
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002b9f8 memsz 0x0002b9f8 flags r-x
    LOAD off    0x0002ca18 vaddr 0x0002ba18 paddr 0x0002ec0c align 2**12
         filesz 0x000031f4 memsz 0x000031f4 flags rw-
    LOAD off    0x0002fe00 vaddr 0x00031e00 paddr 0x00031e00 align 2**12
         filesz 0x00000000 memsz 0x000002b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000248d8  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00006f10  00024b08  00024b08  00025b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031f4  0002ba18  0002ec0c  0002ca18  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b8  00031e00  00031e00  0002fe00  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000320b8  000320b8  0002fc0c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002fc0c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001ad8  00000000  00000000  0002fc30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0005398a  00000000  00000000  00031708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001100b  00000000  00000000  00085092  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015ad8  00000000  00000000  0009609d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005a48  00000000  00000000  000abb78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ffee  00000000  00000000  000b15c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00025010  00000000  00000000  000c15ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e65c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002dd0  00000000  00000000  000e6630  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00101f82  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00101f85  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00101f8a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00101f8b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00101f8c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00101f90  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00101f94  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00101f98  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00101fa3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00101fae  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  00101fb9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  00101fcd  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  00101ff8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fae3  00000000  00000000  0010747f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00024b08 l    d  .rodata	00000000 .rodata
0002ba18 l    d  .rwdata	00000000 .rwdata
00031e00 l    d  .bss	00000000 .bss
000320b8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002d4fc l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d4fd l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d4fe l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d4ff l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002d500 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d501 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d502 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d503 l     O .rwdata	00000001 _ZL9SPI_MODE3
00031e00 l     O .bss	00000001 _ZL9usb_error
00031e01 l     O .bss	00000001 _ZL14usb_task_state
00031e04 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002d50c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d50d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d50e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d50f l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d510 l     O .rwdata	00000006 _ZL9XBOX_LEDS
00024c12 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003d04 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
0002d530 l     O .rwdata	00000004 _ZL5synth
00000000 l    df *ABS*	00000000 hidboot.cpp
0002d534 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d535 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d536 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d537 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d538 l     O .rwdata	00000002 _ZL9pstrSpace
0002d53c l     O .rwdata	00000003 _ZL8pstrCRLF
0002d540 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d544 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d548 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d54c l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00024d60 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00024d74 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00024d80 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00024d8c l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00024d98 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00024da4 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00024db4 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d554 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d55c l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d564 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d56c l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00024dc0 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00024dcc l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d570 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d574 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00024dd8 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00024de8 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d57c l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d584 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00024df8 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d58c l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00024e08 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d594 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00024e20 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d598 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00024e2c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00024e38 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002d5a0 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002d5a8 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00024e44 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00024e50 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002d5b0 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002d5b8 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00024e5c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00024e6c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002d5c0 l     O .rwdata	00000002 _ZL10pstrUsageX
0002d5c4 l     O .rwdata	00000002 _ZL10pstrUsageY
0002d5c8 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002d5cc l     O .rwdata	00000003 _ZL11pstrUsageRx
0002d5d0 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002d5d4 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002d5d8 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002d5e0 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002d5e8 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00024e80 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00024e8c l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00024e98 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00024ea4 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002d5f0 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002d5f8 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002d5fc l     O .rwdata	00000003 _ZL11pstrUsageVx
0002d600 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002d604 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002d608 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002d610 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d618 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d620 l     O .rwdata	00000004 _ZL12pstrUsageVno
00024eb4 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00024ec4 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00024ed0 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00024edc l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00024eec l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00024ef8 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00024f04 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00024f18 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00024f28 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00024f38 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00024f48 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00024f58 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00024f68 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00024f78 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00024f88 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00024f94 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00024fa4 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00024fb8 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00024fcc l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00024fd8 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00024fe4 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00024ff0 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00024ffc l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00025008 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00025014 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00025020 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0002502c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00025038 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00025044 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00025050 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00025060 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0002506c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
0002507c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
0002508c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
0002509c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000250ac l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000250bc l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000250d4 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000250ec l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00025104 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00025114 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00025124 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00025134 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00025144 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00025154 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00025164 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00025174 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00025184 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00025194 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000251a4 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000251bc l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000251cc l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000251e0 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000251f0 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000251fc l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00025208 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00025214 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d624 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00025220 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00025230 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00025244 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00025258 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00025268 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00025278 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00025284 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00025298 l     O .rodata	00000009 _ZL17pstrUsageElevator
000252a4 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d62c l     O .rwdata	00000007 _ZL15pstrUsageRudder
000252b4 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000252c0 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000252cc l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000252dc l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000252ec l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d634 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000252f8 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00025304 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00025310 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d63c l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d644 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d64c l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d654 l     O .rwdata	00000008 _ZL16pstrUsageShifter
0002531c l     O .rodata	00000009 _ZL17pstrUsageSteering
00025328 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00025334 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00025340 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d65c l     O .rwdata	00000008 _ZL16pstrUsageBallast
0002534c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0002535c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00025368 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00025374 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d664 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00025380 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d66c l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d674 l     O .rwdata	00000006 _ZL14pstrUsageGlove
0002538c l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00025398 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000253a4 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000253b0 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d67c l     O .rwdata	00000005 _ZL13pstrUsageVest
000253bc l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000253c8 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000253d4 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000253e4 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000253f4 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00025400 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
0002540c l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d684 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d688 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d690 l     O .rwdata	00000005 _ZL13pstrUsageRate
00025418 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00025424 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00025434 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00025444 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00025454 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00025460 l     O .rodata	0000000b _ZL18pstrUsageStickType
0002546c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d698 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d6a0 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d6a8 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d6b0 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d6b8 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d6c0 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d6c8 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d6d0 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d6d8 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d6e0 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d6e8 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d6f0 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00025478 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00025484 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00025490 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d6f8 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d700 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d708 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d710 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d718 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
0002549c l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000254ac l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d720 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d728 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000254b8 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000254c8 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000254d8 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000254e8 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000254f8 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00025508 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00025518 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00025528 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00025538 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d72c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00025548 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d734 l     O .rwdata	00000005 _ZL13pstrUsageBump
00025558 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00025564 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d73c l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00025570 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
0002557c l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d744 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00025588 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00025598 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
000255a4 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000255b0 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000255bc l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000255d0 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000255e0 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000255f0 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000255fc l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00025608 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00025620 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00025634 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
0002564c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00025660 l     O .rodata	00000009 _ZL16pstrUsageNumLock
0002566c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00025678 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d74c l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d754 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d75c l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d760 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d768 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d76c l     O .rwdata	00000005 _ZL13pstrUsageMute
00025684 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00025690 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
000256a0 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d774 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
000256b0 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
000256c0 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d77c l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d784 l     O .rwdata	00000007 _ZL15pstrUsageStereo
000256cc l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
000256e0 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d78c l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d790 l     O .rwdata	00000004 _ZL12pstrUsageCLV
000256ec l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00025700 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d794 l     O .rwdata	00000005 _ZL13pstrUsageRing
0002570c l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00025718 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d79c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d7a4 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d7ac l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d7b4 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00025724 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d7bc l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d7c4 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00025730 l     O .rodata	00000009 _ZL17pstrUsageCoverage
0002573c l     O .rodata	0000000b _ZL18pstrUsageNightMode
00025748 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00025754 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d7c8 l     O .rwdata	00000005 _ZL19pstrUsageConference
00025760 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d7d0 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d7d8 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d7e0 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
0002576c l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d7e8 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d7f0 l     O .rwdata	00000006 _ZL14pstrUsageReady
00025778 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00025784 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d7f8 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d800 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d804 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d808 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d810 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00025790 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d818 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d820 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d828 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d82c l     O .rwdata	00000006 _ZL14pstrUsageError
0002579c l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
000257ac l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
000257c0 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d834 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000257d8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
000257e4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
000257f4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d83c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00025804 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00025814 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00025828 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
0002583c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00025850 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00025864 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d844 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00025874 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00025880 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d84c l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
0002588c l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00025898 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d854 l     O .rwdata	00000006 _ZL14pstrUsagePhone
000258a8 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
000258b4 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d85c l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d864 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
000258c0 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
000258cc l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d86c l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d874 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d87c l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d884 l     O .rwdata	00000007 _ZL15pstrUsageRedial
000258d8 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d88c l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d894 l     O .rwdata	00000005 _ZL13pstrUsagePark
000258e4 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
000258f0 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d89c l     O .rwdata	00000005 _ZL13pstrUsageLine
000258fc l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00025908 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00025914 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00025920 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
0002592c l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d8a4 l     O .rwdata	00000005 _ZL13pstrUsageSend
00025938 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00025944 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00025950 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
0002595c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00025968 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00025974 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d8ac l     O .rwdata	00000004 _ZL16pstrUsageMessage
00025984 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00025994 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
000259a8 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
000259bc l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
000259d0 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
000259e4 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
000259f4 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00025a04 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00025a18 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00025a28 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00025a38 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00025a48 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00025a54 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00025a60 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00025a6c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d8b0 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d8b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d8bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d8c0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d8c4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d8c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d8cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d8d0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d8d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d8d8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002d8dc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002d8e0 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002d8e4 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002d8e8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002d8ec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002d8f0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002d8f4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00025a80 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00025a90 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00025a9c l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00025aa8 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002d8f8 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002d8fc l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002d904 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002d90c l     O .rwdata	00000006 _ZL14pstrUsageReset
0002d914 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00025ab4 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00025ac0 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002d91c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00025acc l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002d924 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00025ad8 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002d92c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00025ae4 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00025af0 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00025afc l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00025b08 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00025b14 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00025b24 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00025b34 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00025b40 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00025b4c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002d934 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00025b5c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00025b6c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002d93c l     O .rwdata	00000006 _ZL14pstrUsageStill
0002d944 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00025b78 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00025b84 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00025b90 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00025b9c l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00025bac l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002d948 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002d950 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00025bb8 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00025bc8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00025bd4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00025be0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00025bec l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00025bf8 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00025c04 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00025c10 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00025c20 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00025c2c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00025c38 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00025c44 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002d958 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002d960 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00025c54 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00025c64 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00025c70 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00025c7c l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00025c8c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00025c9c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002d968 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002d970 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00025cac l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002d978 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002d980 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002d988 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002d990 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002d998 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00025cb8 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00025cc4 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002d9a0 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002d9a8 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00025cd0 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00025cdc l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00025ce8 l     O .rodata	00000009 _ZL17pstrUsageTracking
00025cf4 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00025d00 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002d9b0 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00025d0c l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002d9b8 l     O .rwdata	00000005 _ZL13pstrUsageMark
00025d18 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00025d24 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00025d30 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00025d3c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00025d4c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00025d60 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00025d70 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00025d80 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00025d8c l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00025d98 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00025da4 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00025db0 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002d9c0 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002d9c4 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002d9cc l     O .rwdata	00000005 _ZL13pstrUsageBass
0002d9d4 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00025dbc l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00025dc8 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002d9dc l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002d9e4 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002d9e8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002d9f0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002d9f8 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00025dd4 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00025de0 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00025dec l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00025df8 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002da00 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00025e04 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00025e10 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00025e1c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00025e28 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00025e38 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00025e48 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00025e54 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00025e60 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00025e6c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002da08 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002da10 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00025e78 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00025e84 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002da18 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00025e90 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00025ea0 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00025eb0 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00025ebc l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00025ec8 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00025ed4 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002da20 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002da28 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00025ee0 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00025eec l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00025ef8 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00025f04 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002da30 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00025f14 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00025f20 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002da38 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002da40 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002da48 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00025f30 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00025f3c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00025f48 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00025f54 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00025f60 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00025f70 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00025f84 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00025f90 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00025fa4 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00025fb4 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00025fc0 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00025fd0 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00025fe0 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00025ff0 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00025ffc l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0002600c l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00026018 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00026028 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00026038 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00026048 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00026058 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0002606c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002da50 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0002607c l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00026090 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
000260a4 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000260b4 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000260c4 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000260d4 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000260e0 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000260ec l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000260f8 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00026104 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00026110 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00026120 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00026138 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00026144 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00026150 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0002615c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00026168 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00026174 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00026180 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00026194 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002da58 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
000261a0 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002da60 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
000261ac l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000261b8 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000261c8 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000261d4 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000261e4 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000261f4 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00026204 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00026210 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002621c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00026228 l     O .rodata	00000009 _ZL16pstrUsageALClock
00026234 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00026244 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00026250 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0002625c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00026268 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00026274 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00026288 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00026298 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
000262a4 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000262b8 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000262c4 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000262d4 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000262e8 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000262fc l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00026310 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00026320 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00026338 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0002634c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0002635c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0002636c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002da68 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002da70 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00026380 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002da78 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002da80 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002da88 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002da90 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0002638c l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002da98 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002daa0 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002daa8 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002dab0 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00026398 l     O .rodata	00000009 _ZL16pstrUsageACPaste
000263a4 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002dab8 l     O .rwdata	00000008 _ZL15pstrUsageACFind
000263b0 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000263c0 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002dac0 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002dac8 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002dad0 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002dad8 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002dae0 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000263cc l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000263d8 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000263e8 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000263f8 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002dae8 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00026404 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00026410 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0002641c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002daf0 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00026428 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00026434 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00026444 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00026450 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00026460 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00026470 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0002647c l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00026488 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002daf8 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00026498 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
000264a4 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000264b4 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002db00 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002db08 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002db10 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002db18 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000264c4 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000264d0 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002db20 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000264dc l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000264e8 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000264f4 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00026500 l     O .rodata	0000000a _ZL17pstrUsageACResize
0002650c l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00026518 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00026524 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00026530 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0002653c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00026548 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00026554 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00026560 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00026570 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00026580 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00026590 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
000265a0 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
000265ac l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000265bc l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000265c8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000265d8 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000265e8 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000265f8 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00026604 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00026610 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0002661c l     O .rodata	0000000b _ZL18pstrUsageACPromote
00026628 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002db28 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002db30 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00026634 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002db38 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002db40 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00026640 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002db48 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0002664c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0002665c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00026668 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00026678 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00026688 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00026698 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002db50 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002db58 l     O .rwdata	00000008 _ZL15pstrUsageACLock
000266a4 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002db60 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
000266b0 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
000266bc l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000266cc l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000266d8 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
000266e8 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
000266f4 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00026700 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
0002670c l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00026718 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00026724 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00026730 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002db68 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002db70 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0002673c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00026748 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002db78 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00026758 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00026764 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00026770 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00026780 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00026790 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0002679c l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
000267a8 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
000267b4 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002db80 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
000267c0 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000267cc l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000267d8 l     O .rodata	00000009 _ZL16pstrUsageACReply
000267e4 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
000267f4 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002db88 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00026800 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002db90 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002db98 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0002680c l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00026818 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00026824 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00026830 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0002683c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00026848 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00026854 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00026860 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0002686c l     O .rodata	0000000a _ZL17pstrUsageACRename
00026878 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00026884 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00026890 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0002689c l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
000268a8 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002dba0 l     O .rwdata	00000004 _ZL12pstrUsagePen
000268b4 l     O .rodata	0000000a _ZL17pstrUsageLightPen
000268c0 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
000268cc l     O .rodata	0000000a _ZL17pstrUsageTouchPad
000268d8 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
000268e4 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002dba4 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
000268f4 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002dbac l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00026900 l     O .rodata	00000009 _ZL17pstrUsageArmature
0002690c l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00026920 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002dbb4 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002dbbc l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002dbc4 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00026930 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0002693c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00026948 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002dbcc l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002dbd4 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002dbdc l     O .rwdata	00000004 _ZL12pstrUsageTap
0002dbe0 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00026954 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00026960 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00026970 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00026980 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002dbe8 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002dbf0 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002dbf8 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002dc00 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00026990 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002dc08 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002dc10 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002699c l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002dc18 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002dc20 l     O .rwdata	00000007 _ZL15pstrUsageEraser
000269a8 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
000269b4 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
000269c4 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
000269d0 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
000269e0 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
000269ec l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
000269fc l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00026a08 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00026a18 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00026a24 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00026a34 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00026a44 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00026a50 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00026a5c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00026a68 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00026a74 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00026a80 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00026a8c l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00026a98 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00026aa8 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00026ab8 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002dc28 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002dc2c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002dc30 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002dc38 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00026ac4 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00026ad0 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00026adc l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00026ae8 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002dc40 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00026af4 l     O .rodata	00000009 _ZL17pstrUsageFontData
00026b00 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00026b0c l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00026b18 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00026b28 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00026b38 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00026b48 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00026b54 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00026b60 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00026b6c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00026b78 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00026b84 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00026b90 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00026b9c l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00026ba8 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00026bb4 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00026bc4 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00026bd4 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00026be4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00026bf0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00026bfc l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00026c0c l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002dc48 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00026c18 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00026c28 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00026c38 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00026c44 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00026c50 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00026c60 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00026c70 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00026c80 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00026c90 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00026c9c l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00026ca8 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00026cb4 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00026cc4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00026cd4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00026ce4 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00026cf4 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002dc50 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002dc58 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00026d04 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002dc60 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002dc68 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002dc70 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002dc78 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00026d10 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002dc80 l     O .rwdata	00000005 _ZL13pstrUsageCine
00026d1c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002dc88 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002dc90 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00026d28 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00026d38 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00026d48 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00026d58 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00026d64 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00026d70 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00026d84 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00026d98 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00026dac l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00026dc0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00026dd0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00026de0 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00026dec l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00026df8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00026e08 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002dca4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dca5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dca6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dca7 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002dcac l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dcad l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dcae l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dcaf l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002dcb0 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dcb1 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dcb2 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dcb3 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002702d l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002703d l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008e64 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002dcbc l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dcbd l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dcbe l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dcbf l     O .rwdata	00000001 _ZL9SPI_MODE3
0002dcc0 l     O .rwdata	00000002 _ZL9pstrSpace
0002dcc4 l     O .rwdata	00000003 _ZL8pstrCRLF
0002dcc8 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002dccc l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002dcd0 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002dcd4 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00027108 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
0002711c l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00027128 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00027134 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00027140 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0002714c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0002715c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002dcdc l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002dce4 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002dcec l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002dcf4 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00027168 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00027174 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002dcf8 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002dcfc l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00027180 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00027190 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002dd04 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002dd0c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000271a0 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002dd14 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000271b0 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002dd1c l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
000271c8 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002dd20 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
000271d4 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
000271e0 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002dd28 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002dd30 l     O .rwdata	00000006 _ZL14pstrUsageMouse
000271ec l     O .rodata	00000009 _ZL17pstrUsageJoystick
000271f8 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002dd38 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002dd40 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00027204 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00027214 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002dd48 l     O .rwdata	00000002 _ZL10pstrUsageX
0002dd4c l     O .rwdata	00000002 _ZL10pstrUsageY
0002dd50 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002dd54 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002dd58 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002dd5c l     O .rwdata	00000003 _ZL11pstrUsageRz
0002dd60 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002dd68 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002dd70 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00027228 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00027234 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00027240 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0002724c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002dd78 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002dd80 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002dd84 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002dd88 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002dd8c l     O .rwdata	00000003 _ZL11pstrUsageVz
0002dd90 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002dd98 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002dda0 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002dda8 l     O .rwdata	00000004 _ZL12pstrUsageVno
0002725c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0002726c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00027278 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00027284 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00027294 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000272a0 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000272ac l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
000272c0 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
000272d0 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
000272e0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
000272f0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00027300 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00027310 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00027320 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00027330 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
0002733c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0002734c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00027360 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00027374 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00027380 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
0002738c l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00027398 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000273a4 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000273b0 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
000273bc l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
000273c8 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
000273d4 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
000273e0 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
000273ec l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
000273f8 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00027408 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00027414 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00027424 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00027434 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00027444 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00027454 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00027464 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
0002747c l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00027494 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000274ac l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000274bc l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000274cc l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
000274dc l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
000274ec l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000274fc l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
0002750c l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
0002751c l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
0002752c l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
0002753c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
0002754c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00027564 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00027574 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00027588 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00027598 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000275a4 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000275b0 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000275bc l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002ddac l     O .rwdata	00000008 _ZL16pstrUsageAileron
000275c8 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
000275d8 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
000275ec l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00027600 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00027610 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00027620 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
0002762c l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00027640 l     O .rodata	00000009 _ZL17pstrUsageElevator
0002764c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002ddb4 l     O .rwdata	00000007 _ZL15pstrUsageRudder
0002765c l     O .rodata	00000009 _ZL17pstrUsageThrottle
00027668 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00027674 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00027684 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00027694 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002ddbc l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000276a0 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000276ac l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
000276b8 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002ddc4 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002ddcc l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002ddd4 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002dddc l     O .rwdata	00000008 _ZL16pstrUsageShifter
000276c4 l     O .rodata	00000009 _ZL17pstrUsageSteering
000276d0 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
000276dc l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
000276e8 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002dde4 l     O .rwdata	00000008 _ZL16pstrUsageBallast
000276f4 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00027704 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00027710 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
0002771c l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002ddec l     O .rwdata	00000005 _ZL13pstrUsageBelt
00027728 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002ddf4 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002ddfc l     O .rwdata	00000006 _ZL14pstrUsageGlove
00027734 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00027740 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
0002774c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00027758 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002de04 l     O .rwdata	00000005 _ZL13pstrUsageVest
00027764 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00027770 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
0002777c l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
0002778c l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
0002779c l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000277a8 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000277b4 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002de0c l     O .rwdata	00000004 _ZL12pstrUsageOar
0002de10 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002de18 l     O .rwdata	00000005 _ZL13pstrUsageRate
000277c0 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000277cc l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
000277dc l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
000277ec l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
000277fc l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00027808 l     O .rodata	0000000b _ZL18pstrUsageStickType
00027814 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002de20 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002de28 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002de30 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002de38 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002de40 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002de48 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002de50 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002de58 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002de60 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002de68 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002de70 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002de78 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00027820 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
0002782c l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00027838 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002de80 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002de88 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002de90 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002de98 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002dea0 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00027844 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00027854 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002dea8 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002deb0 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00027860 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00027870 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00027880 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00027890 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000278a0 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
000278b0 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
000278c0 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
000278d0 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
000278e0 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002deb4 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
000278f0 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002debc l     O .rwdata	00000005 _ZL13pstrUsageBump
00027900 l     O .rodata	00000009 _ZL16pstrUsageNewGame
0002790c l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002dec4 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00027918 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00027924 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002decc l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00027930 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00027940 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
0002794c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00027958 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00027964 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00027978 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00027988 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00027998 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000279a4 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
000279b0 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
000279c8 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
000279dc l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
000279f4 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00027a08 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00027a14 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00027a20 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002ded4 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002dedc l     O .rwdata	00000005 _ZL13pstrUsageKana
0002dee4 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002dee8 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002def0 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002def4 l     O .rwdata	00000005 _ZL13pstrUsageMute
00027a2c l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00027a38 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00027a48 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002defc l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00027a58 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00027a68 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002df04 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002df0c l     O .rwdata	00000007 _ZL15pstrUsageStereo
00027a74 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00027a88 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002df14 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002df18 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00027a94 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00027aa8 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002df1c l     O .rwdata	00000005 _ZL13pstrUsageRing
00027ab4 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00027ac0 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002df24 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002df2c l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002df34 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002df3c l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00027acc l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002df44 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002df4c l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00027ad8 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00027ae4 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00027af0 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00027afc l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002df50 l     O .rwdata	00000005 _ZL19pstrUsageConference
00027b08 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002df58 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002df60 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002df68 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00027b14 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002df70 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002df78 l     O .rwdata	00000006 _ZL14pstrUsageReady
00027b20 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00027b2c l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002df80 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002df88 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002df8c l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002df90 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002df98 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00027b38 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002dfa0 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002dfa8 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002dfb0 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002dfb4 l     O .rwdata	00000006 _ZL14pstrUsageError
00027b44 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00027b54 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00027b68 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002dfbc l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00027b80 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00027b8c l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00027b9c l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002dfc4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00027bac l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00027bbc l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00027bd0 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00027be4 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00027bf8 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00027c0c l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002dfcc l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00027c1c l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00027c28 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002dfd4 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00027c34 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00027c40 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002dfdc l     O .rwdata	00000006 _ZL14pstrUsagePhone
00027c50 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00027c5c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002dfe4 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002dfec l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00027c68 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00027c74 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002dff4 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002dffc l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002e004 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002e00c l     O .rwdata	00000007 _ZL15pstrUsageRedial
00027c80 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002e014 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002e01c l     O .rwdata	00000005 _ZL13pstrUsagePark
00027c8c l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00027c98 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002e024 l     O .rwdata	00000005 _ZL13pstrUsageLine
00027ca4 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00027cb0 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00027cbc l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00027cc8 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00027cd4 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002e02c l     O .rwdata	00000005 _ZL13pstrUsageSend
00027ce0 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00027cec l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00027cf8 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00027d04 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00027d10 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00027d1c l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002e034 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00027d2c l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00027d3c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00027d50 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00027d64 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00027d78 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00027d8c l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00027d9c l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00027dac l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00027dc0 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00027dd0 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00027de0 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00027df0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00027dfc l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00027e08 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00027e14 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002e038 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002e040 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002e044 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002e048 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002e04c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002e050 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002e054 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002e058 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002e05c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002e060 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002e064 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002e068 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002e06c l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002e070 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002e074 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002e078 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002e07c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00027e28 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00027e38 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00027e44 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00027e50 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002e080 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002e084 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002e08c l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002e094 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002e09c l     O .rwdata	00000006 _ZL14pstrUsageSleep
00027e5c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00027e68 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002e0a4 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00027e74 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002e0ac l     O .rwdata	00000005 _ZL13pstrUsageMenu
00027e80 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002e0b4 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00027e8c l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00027e98 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00027ea4 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00027eb0 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00027ebc l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00027ecc l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00027edc l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00027ee8 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00027ef4 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002e0bc l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00027f04 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00027f14 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002e0c4 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002e0cc l     O .rwdata	00000004 _ZL18pstrUsageSelection
00027f20 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00027f2c l     O .rodata	0000000a _ZL17pstrUsageModeStep
00027f38 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00027f44 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00027f54 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002e0d0 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002e0d8 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00027f60 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00027f70 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00027f7c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00027f88 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00027f94 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00027fa0 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00027fac l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00027fb8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00027fc8 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00027fd4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00027fe0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00027fec l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002e0e0 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002e0e8 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00027ffc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0002800c l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00028018 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00028024 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00028034 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00028044 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002e0f0 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002e0f8 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00028054 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002e100 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002e108 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002e110 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002e118 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002e120 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00028060 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0002806c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002e128 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002e130 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00028078 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00028084 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00028090 l     O .rodata	00000009 _ZL17pstrUsageTracking
0002809c l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
000280a8 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002e138 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
000280b4 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002e140 l     O .rwdata	00000005 _ZL13pstrUsageMark
000280c0 l     O .rodata	00000009 _ZL18pstrUsageClearMark
000280cc l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
000280d8 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
000280e4 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
000280f4 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00028108 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00028118 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00028128 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00028134 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00028140 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002814c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00028158 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002e148 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002e14c l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002e154 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002e15c l     O .rwdata	00000007 _ZL15pstrUsageTreble
00028164 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00028170 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002e164 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002e16c l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002e170 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002e178 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002e180 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0002817c l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00028188 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00028194 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000281a0 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002e188 l     O .rwdata	00000005 _ZL13pstrUsageSlow
000281ac l     O .rodata	00000009 _ZL18pstrUsageFanEnable
000281b8 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
000281c4 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
000281d0 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
000281e0 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
000281f0 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
000281fc l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00028208 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00028214 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002e190 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002e198 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00028220 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0002822c l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002e1a0 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00028238 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00028248 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00028258 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00028264 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00028270 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0002827c l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002e1a8 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002e1b0 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00028288 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00028294 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000282a0 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000282ac l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002e1b8 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
000282bc l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
000282c8 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002e1c0 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002e1c8 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002e1d0 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
000282d8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
000282e4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
000282f0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
000282fc l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00028308 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00028318 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0002832c l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00028338 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0002834c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0002835c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00028368 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00028378 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00028388 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00028398 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000283a4 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000283b4 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
000283c0 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
000283d0 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
000283e0 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
000283f0 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00028400 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00028414 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002e1d8 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00028424 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00028438 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0002844c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0002845c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0002846c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0002847c l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00028488 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00028494 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000284a0 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000284ac l     O .rodata	0000000a _ZL17pstrUsageALLogoff
000284b8 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000284c8 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
000284e0 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
000284ec l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
000284f8 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00028504 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00028510 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0002851c l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00028528 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0002853c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002e1e0 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00028548 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002e1e8 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00028554 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00028560 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00028570 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0002857c l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
0002858c l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
0002859c l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000285ac l     O .rodata	0000000b _ZL21pstrUsageALEncryption
000285b8 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000285c4 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000285d0 l     O .rodata	00000009 _ZL16pstrUsageALClock
000285dc l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
000285ec l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
000285f8 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00028604 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00028610 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0002861c l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00028630 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00028640 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0002864c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00028660 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0002866c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0002867c l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00028690 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000286a4 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
000286b8 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000286c8 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
000286e0 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
000286f4 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00028704 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00028714 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002e1f0 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002e1f8 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00028728 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002e200 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002e208 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002e210 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002e218 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00028734 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002e220 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002e228 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002e230 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002e238 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00028740 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0002874c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002e240 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00028758 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00028768 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002e248 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002e250 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002e258 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002e260 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002e268 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00028774 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00028780 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00028790 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000287a0 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002e270 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000287ac l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
000287b8 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000287c4 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002e278 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
000287d0 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
000287dc l     O .rodata	0000000d _ZL21pstrUsageACNormalView
000287ec l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
000287f8 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00028808 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00028818 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00028824 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00028830 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002e280 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00028840 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0002884c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0002885c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002e288 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002e290 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002e298 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002e2a0 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0002886c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00028878 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002e2a8 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00028884 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00028890 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0002889c l     O .rodata	0000000a _ZL17pstrUsageACRotate
000288a8 l     O .rodata	0000000a _ZL17pstrUsageACResize
000288b4 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
000288c0 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
000288cc l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
000288d8 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
000288e4 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
000288f0 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
000288fc l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00028908 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00028918 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00028928 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00028938 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00028948 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00028954 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00028964 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00028970 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00028980 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00028990 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000289a0 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
000289ac l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
000289b8 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
000289c4 l     O .rodata	0000000b _ZL18pstrUsageACPromote
000289d0 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002e2b0 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002e2b8 l     O .rwdata	00000006 _ZL13pstrUsageACNo
000289dc l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002e2c0 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002e2c8 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
000289e8 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002e2d0 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
000289f4 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00028a04 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00028a10 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00028a20 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00028a30 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00028a40 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002e2d8 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002e2e0 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00028a4c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002e2e8 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00028a58 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00028a64 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00028a74 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00028a80 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00028a90 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00028a9c l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00028aa8 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00028ab4 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00028ac0 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00028acc l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00028ad8 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002e2f0 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002e2f8 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00028ae4 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00028af0 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002e300 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00028b00 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00028b0c l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00028b18 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00028b28 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00028b38 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00028b44 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00028b50 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00028b5c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002e308 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00028b68 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00028b74 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00028b80 l     O .rodata	00000009 _ZL16pstrUsageACReply
00028b8c l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00028b9c l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002e310 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00028ba8 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002e318 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002e320 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00028bb4 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00028bc0 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00028bcc l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00028bd8 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00028be4 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00028bf0 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00028bfc l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00028c08 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00028c14 l     O .rodata	0000000a _ZL17pstrUsageACRename
00028c20 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00028c2c l     O .rodata	00000009 _ZL16pstrUsageACSplit
00028c38 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00028c44 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00028c50 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002e328 l     O .rwdata	00000004 _ZL12pstrUsagePen
00028c5c l     O .rodata	0000000a _ZL17pstrUsageLightPen
00028c68 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00028c74 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00028c80 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00028c8c l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002e32c l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00028c9c l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002e334 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00028ca8 l     O .rodata	00000009 _ZL17pstrUsageArmature
00028cb4 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00028cc8 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002e33c l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002e344 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002e34c l     O .rwdata	00000007 _ZL15pstrUsageFinger
00028cd8 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00028ce4 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00028cf0 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002e354 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002e35c l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002e364 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002e368 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00028cfc l     O .rodata	0000000b _ZL18pstrUsageDataValid
00028d08 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00028d18 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00028d28 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002e370 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002e378 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002e380 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002e388 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00028d38 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002e390 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002e398 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00028d44 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002e3a0 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002e3a8 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00028d50 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00028d5c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00028d6c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00028d78 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00028d88 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00028d94 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00028da4 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00028db0 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00028dc0 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00028dcc l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00028ddc l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00028dec l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00028df8 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00028e04 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00028e10 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00028e1c l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00028e28 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00028e34 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00028e40 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00028e50 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00028e60 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002e3b0 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002e3b4 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002e3b8 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002e3c0 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00028e6c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00028e78 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00028e84 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00028e90 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002e3c8 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00028e9c l     O .rodata	00000009 _ZL17pstrUsageFontData
00028ea8 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00028eb4 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00028ec0 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00028ed0 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00028ee0 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00028ef0 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00028efc l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00028f08 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00028f14 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00028f20 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00028f2c l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00028f38 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00028f44 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00028f50 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00028f5c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00028f6c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00028f7c l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00028f8c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00028f98 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00028fa4 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00028fb4 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002e3d0 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00028fc0 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00028fd0 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00028fe0 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00028fec l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00028ff8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00029008 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00029018 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00029028 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00029038 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00029044 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00029050 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002905c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002906c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002907c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0002908c l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0002909c l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002e3d8 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002e3e0 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
000290ac l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002e3e8 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002e3f0 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002e3f8 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002e400 l     O .rwdata	00000006 _ZL14pstrUsagePrint
000290b8 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002e408 l     O .rwdata	00000005 _ZL13pstrUsageCine
000290c4 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002e410 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002e418 l     O .rwdata	00000006 _ZL14pstrUsageDepth
000290d0 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
000290e0 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
000290f0 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00029100 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002910c l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00029118 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002912c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00029140 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00029154 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00029168 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00029178 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00029188 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00029194 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000291a0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000291b0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002e41e l     O .rwdata	00000001 _ZL9SPI_MODE0
0002e41f l     O .rwdata	00000001 _ZL9SPI_MODE1
0002e420 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002e421 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002e424 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002e425 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002e426 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002e427 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002e428 l     O .rwdata	00000002 _ZL9pstrSpace
0002e42c l     O .rwdata	00000003 _ZL8pstrCRLF
0002e430 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002e434 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002e438 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002e43c l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00029290 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
000292a4 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000292b0 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000292bc l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000292c8 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
000292d4 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
000292e4 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002e444 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002e44c l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002e454 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002e45c l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
000292f0 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
000292fc l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002e460 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002e464 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00029308 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00029318 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002e46c l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002e474 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00029328 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002e47c l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00029338 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002e484 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00029350 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002e488 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0002935c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00029368 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002e490 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002e498 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00029374 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00029380 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002e4a0 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002e4a8 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0002938c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
0002939c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002e4b0 l     O .rwdata	00000002 _ZL10pstrUsageX
0002e4b4 l     O .rwdata	00000002 _ZL10pstrUsageY
0002e4b8 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002e4bc l     O .rwdata	00000003 _ZL11pstrUsageRx
0002e4c0 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002e4c4 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002e4c8 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002e4d0 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002e4d8 l     O .rwdata	00000006 _ZL14pstrUsageWheel
000293b0 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000293bc l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000293c8 l     O .rodata	0000000b _ZL18pstrUsageByteCount
000293d4 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002e4e0 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002e4e8 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002e4ec l     O .rwdata	00000003 _ZL11pstrUsageVx
0002e4f0 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002e4f4 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002e4f8 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002e500 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002e508 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002e510 l     O .rwdata	00000004 _ZL12pstrUsageVno
000293e4 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
000293f4 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00029400 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
0002940c l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
0002941c l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00029428 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00029434 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00029448 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00029458 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00029468 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00029478 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00029488 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00029498 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000294a8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000294b8 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000294c4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000294d4 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000294e8 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000294fc l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00029508 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00029514 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00029520 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
0002952c l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00029538 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00029544 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00029550 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0002955c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00029568 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00029574 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00029580 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00029590 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0002959c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000295ac l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000295bc l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000295cc l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000295dc l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000295ec l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00029604 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
0002961c l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00029634 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00029644 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00029654 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00029664 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00029674 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00029684 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00029694 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000296a4 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000296b4 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000296c4 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000296d4 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000296ec l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000296fc l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00029710 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00029720 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
0002972c l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00029738 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00029744 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002e514 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00029750 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00029760 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00029774 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00029788 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00029798 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
000297a8 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000297b4 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000297c8 l     O .rodata	00000009 _ZL17pstrUsageElevator
000297d4 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002e51c l     O .rwdata	00000007 _ZL15pstrUsageRudder
000297e4 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000297f0 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000297fc l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
0002980c l     O .rodata	0000000d _ZL20pstrUsageLandingGear
0002981c l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002e524 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00029828 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00029834 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00029840 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002e52c l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002e534 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002e53c l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002e544 l     O .rwdata	00000008 _ZL16pstrUsageShifter
0002984c l     O .rodata	00000009 _ZL17pstrUsageSteering
00029858 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00029864 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00029870 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002e54c l     O .rwdata	00000008 _ZL16pstrUsageBallast
0002987c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0002988c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00029898 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
000298a4 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002e554 l     O .rwdata	00000005 _ZL13pstrUsageBelt
000298b0 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002e55c l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002e564 l     O .rwdata	00000006 _ZL14pstrUsageGlove
000298bc l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000298c8 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000298d4 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000298e0 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002e56c l     O .rwdata	00000005 _ZL13pstrUsageVest
000298ec l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000298f8 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00029904 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00029914 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00029924 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00029930 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
0002993c l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002e574 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002e578 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002e580 l     O .rwdata	00000005 _ZL13pstrUsageRate
00029948 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00029954 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00029964 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00029974 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00029984 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00029990 l     O .rodata	0000000b _ZL18pstrUsageStickType
0002999c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002e588 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002e590 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002e598 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002e5a0 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002e5a8 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002e5b0 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002e5b8 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002e5c0 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002e5c8 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002e5d0 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002e5d8 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002e5e0 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
000299a8 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
000299b4 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000299c0 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002e5e8 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002e5f0 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002e5f8 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002e600 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002e608 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000299cc l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000299dc l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002e610 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002e618 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000299e8 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000299f8 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00029a08 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00029a18 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00029a28 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00029a38 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00029a48 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00029a58 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00029a68 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002e61c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00029a78 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002e624 l     O .rwdata	00000005 _ZL13pstrUsageBump
00029a88 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00029a94 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002e62c l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00029aa0 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00029aac l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002e634 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00029ab8 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00029ac8 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00029ad4 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00029ae0 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00029aec l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00029b00 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00029b10 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00029b20 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00029b2c l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00029b38 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00029b50 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00029b64 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00029b7c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00029b90 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00029b9c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00029ba8 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002e63c l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002e644 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002e64c l     O .rwdata	00000004 _ZL14pstrUsagePower
0002e650 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002e658 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002e65c l     O .rwdata	00000005 _ZL13pstrUsageMute
00029bb4 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00029bc0 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00029bd0 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002e664 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00029be0 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00029bf0 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002e66c l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002e674 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00029bfc l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00029c10 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002e67c l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002e680 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00029c1c l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00029c30 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002e684 l     O .rwdata	00000005 _ZL13pstrUsageRing
00029c3c l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00029c48 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002e68c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002e694 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002e69c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002e6a4 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00029c54 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002e6ac l     O .rwdata	00000005 _ZL13pstrUsageHold
0002e6b4 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00029c60 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00029c6c l     O .rodata	0000000b _ZL18pstrUsageNightMode
00029c78 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00029c84 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002e6b8 l     O .rwdata	00000005 _ZL19pstrUsageConference
00029c90 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002e6c0 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002e6c8 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002e6d0 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00029c9c l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002e6d8 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002e6e0 l     O .rwdata	00000006 _ZL14pstrUsageReady
00029ca8 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00029cb4 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002e6e8 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002e6f0 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002e6f4 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002e6f8 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002e700 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00029cc0 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002e708 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002e710 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002e718 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002e71c l     O .rwdata	00000006 _ZL14pstrUsageError
00029ccc l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00029cdc l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00029cf0 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002e724 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00029d08 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00029d14 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00029d24 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002e72c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00029d34 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00029d44 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00029d58 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00029d6c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00029d80 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00029d94 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002e734 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00029da4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00029db0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002e73c l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00029dbc l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00029dc8 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002e744 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00029dd8 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00029de4 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002e74c l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002e754 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00029df0 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00029dfc l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002e75c l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002e764 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002e76c l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002e774 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00029e08 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002e77c l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002e784 l     O .rwdata	00000005 _ZL13pstrUsagePark
00029e14 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00029e20 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002e78c l     O .rwdata	00000005 _ZL13pstrUsageLine
00029e2c l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00029e38 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00029e44 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00029e50 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00029e5c l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002e794 l     O .rwdata	00000005 _ZL13pstrUsageSend
00029e68 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00029e74 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00029e80 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00029e8c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00029e98 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00029ea4 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002e79c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00029eb4 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00029ec4 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00029ed8 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00029eec l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00029f00 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00029f14 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00029f24 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00029f34 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00029f48 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00029f58 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00029f68 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00029f78 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00029f84 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00029f90 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00029f9c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002e7a0 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002e7a8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002e7ac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002e7b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002e7b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002e7b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002e7bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002e7c0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002e7c4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002e7c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002e7cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002e7d0 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002e7d4 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002e7d8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002e7dc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002e7e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002e7e4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00029fb0 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00029fc0 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00029fcc l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00029fd8 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002e7e8 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002e7ec l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002e7f4 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002e7fc l     O .rwdata	00000006 _ZL14pstrUsageReset
0002e804 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00029fe4 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00029ff0 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002e80c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00029ffc l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002e814 l     O .rwdata	00000005 _ZL13pstrUsageMenu
0002a008 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002e81c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0002a014 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
0002a020 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0002a02c l     O .rodata	0000000b _ZL18pstrUsageMenuRight
0002a038 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
0002a044 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
0002a054 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
0002a064 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
0002a070 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0002a07c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002e824 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0002a08c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0002a09c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002e82c l     O .rwdata	00000006 _ZL14pstrUsageStill
0002e834 l     O .rwdata	00000004 _ZL18pstrUsageSelection
0002a0a8 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0002a0b4 l     O .rodata	0000000a _ZL17pstrUsageModeStep
0002a0c0 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
0002a0cc l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0002a0dc l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002e838 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002e840 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0002a0e8 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0002a0f8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0002a104 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
0002a110 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0002a11c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0002a128 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
0002a134 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
0002a140 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
0002a150 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0002a15c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0002a168 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0002a174 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002e848 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002e850 l     O .rwdata	00000005 _ZL13pstrUsageHelp
0002a184 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0002a194 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
0002a1a0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0002a1ac l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0002a1bc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0002a1cc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002e858 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002e860 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0002a1dc l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002e868 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002e870 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002e878 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002e880 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002e888 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0002a1e8 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0002a1f4 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002e890 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002e898 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
0002a200 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0002a20c l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0002a218 l     O .rodata	00000009 _ZL17pstrUsageTracking
0002a224 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
0002a230 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002e8a0 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0002a23c l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002e8a8 l     O .rwdata	00000005 _ZL13pstrUsageMark
0002a248 l     O .rodata	00000009 _ZL18pstrUsageClearMark
0002a254 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
0002a260 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0002a26c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0002a27c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
0002a290 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
0002a2a0 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0002a2b0 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0002a2bc l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0002a2c8 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002a2d4 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
0002a2e0 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002e8b0 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002e8b4 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002e8bc l     O .rwdata	00000005 _ZL13pstrUsageBass
0002e8c4 l     O .rwdata	00000007 _ZL15pstrUsageTreble
0002a2ec l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0002a2f8 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002e8cc l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002e8d4 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002e8d8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002e8e0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002e8e8 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0002a304 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
0002a310 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0002a31c l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0002a328 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002e8f0 l     O .rwdata	00000005 _ZL13pstrUsageSlow
0002a334 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
0002a340 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0002a34c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0002a358 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0002a368 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0002a378 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0002a384 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
0002a390 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0002a39c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002e8f8 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002e900 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0002a3a8 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0002a3b4 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002e908 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0002a3c0 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0002a3d0 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0002a3e0 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
0002a3ec l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0002a3f8 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0002a404 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002e910 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002e918 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0002a410 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0002a41c l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0002a428 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
0002a434 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002e920 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0002a444 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
0002a450 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002e928 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002e930 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002e938 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
0002a460 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0002a46c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0002a478 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0002a484 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
0002a490 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
0002a4a0 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0002a4b4 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0002a4c0 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0002a4d4 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0002a4e4 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0002a4f0 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0002a500 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0002a510 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0002a520 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0002a52c l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0002a53c l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0002a548 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0002a558 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0002a568 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002a578 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0002a588 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0002a59c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002e940 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0002a5ac l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0002a5c0 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0002a5d4 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0002a5e4 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0002a5f4 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0002a604 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0002a610 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0002a61c l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0002a628 l     O .rodata	00000009 _ZL16pstrUsageALLogon
0002a634 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0002a640 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0002a650 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0002a668 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0002a674 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0002a680 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0002a68c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0002a698 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0002a6a4 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002a6b0 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0002a6c4 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002e948 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0002a6d0 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002e950 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0002a6dc l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0002a6e8 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0002a6f8 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0002a704 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
0002a714 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
0002a724 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
0002a734 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0002a740 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002a74c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0002a758 l     O .rodata	00000009 _ZL16pstrUsageALClock
0002a764 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0002a774 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0002a780 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0002a78c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0002a798 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0002a7a4 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0002a7b8 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0002a7c8 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0002a7d4 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0002a7e8 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0002a7f4 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0002a804 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
0002a818 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
0002a82c l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0002a840 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0002a850 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0002a868 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0002a87c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0002a88c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0002a89c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002e958 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002e960 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002a8b0 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002e968 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002e970 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002e978 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002e980 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0002a8bc l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002e988 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002e990 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002e998 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002e9a0 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0002a8c8 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0002a8d4 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002e9a8 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0002a8e0 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0002a8f0 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002e9b0 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002e9b8 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002e9c0 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002e9c8 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002e9d0 l     O .rwdata	00000008 _ZL15pstrUsageACStop
0002a8fc l     O .rodata	0000000b _ZL18pstrUsageACRefresh
0002a908 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
0002a918 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0002a928 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002e9d8 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
0002a934 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002a940 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0002a94c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002e9e0 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0002a958 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0002a964 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
0002a974 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0002a980 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0002a990 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0002a9a0 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0002a9ac l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0002a9b8 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002e9e8 l     O .rwdata	00000007 _ZL14pstrUsageACPan
0002a9c8 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0002a9d4 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0002a9e4 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002e9f0 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002e9f8 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002ea00 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002ea08 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0002a9f4 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0002aa00 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002ea10 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
0002aa0c l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
0002aa18 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0002aa24 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0002aa30 l     O .rodata	0000000a _ZL17pstrUsageACResize
0002aa3c l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0002aa48 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
0002aa54 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0002aa60 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0002aa6c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0002aa78 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
0002aa84 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0002aa90 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0002aaa0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0002aab0 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0002aac0 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0002aad0 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0002aadc l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
0002aaec l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
0002aaf8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
0002ab08 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
0002ab18 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
0002ab28 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
0002ab34 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002ab40 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0002ab4c l     O .rodata	0000000b _ZL18pstrUsageACPromote
0002ab58 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002ea18 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002ea20 l     O .rwdata	00000006 _ZL13pstrUsageACNo
0002ab64 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002ea28 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002ea30 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002ab70 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002ea38 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0002ab7c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0002ab8c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0002ab98 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0002aba8 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0002abb8 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0002abc8 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002ea40 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002ea48 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0002abd4 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002ea50 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0002abe0 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
0002abec l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
0002abfc l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
0002ac08 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0002ac18 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0002ac24 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0002ac30 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
0002ac3c l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0002ac48 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0002ac54 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0002ac60 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002ea58 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002ea60 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0002ac6c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0002ac78 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002ea68 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0002ac88 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0002ac94 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0002aca0 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0002acb0 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0002acc0 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0002accc l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0002acd8 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0002ace4 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002ea70 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0002acf0 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0002acfc l     O .rodata	0000000a _ZL17pstrUsageACSendTo
0002ad08 l     O .rodata	00000009 _ZL16pstrUsageACReply
0002ad14 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
0002ad24 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002ea78 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0002ad30 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002ea80 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002ea88 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0002ad3c l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0002ad48 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
0002ad54 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0002ad60 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0002ad6c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0002ad78 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
0002ad84 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0002ad90 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0002ad9c l     O .rodata	0000000a _ZL17pstrUsageACRename
0002ada8 l     O .rodata	00000009 _ZL16pstrUsageACMerge
0002adb4 l     O .rodata	00000009 _ZL16pstrUsageACSplit
0002adc0 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0002adcc l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0002add8 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002ea90 l     O .rwdata	00000004 _ZL12pstrUsagePen
0002ade4 l     O .rodata	0000000a _ZL17pstrUsageLightPen
0002adf0 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0002adfc l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0002ae08 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0002ae14 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002ea94 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0002ae24 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002ea9c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0002ae30 l     O .rodata	00000009 _ZL17pstrUsageArmature
0002ae3c l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0002ae50 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002eaa4 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002eaac l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002eab4 l     O .rwdata	00000007 _ZL15pstrUsageFinger
0002ae60 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0002ae6c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0002ae78 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002eabc l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002eac4 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002eacc l     O .rwdata	00000004 _ZL12pstrUsageTap
0002ead0 l     O .rwdata	00000005 _ZL16pstrUsageQuality
0002ae84 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0002ae90 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0002aea0 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002aeb0 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002ead8 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002eae0 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002eae8 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002eaf0 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002aec0 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002eaf8 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002eb00 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002aecc l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002eb08 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002eb10 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0002aed8 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0002aee4 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0002aef4 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0002af00 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0002af10 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0002af1c l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0002af2c l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0002af38 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0002af48 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0002af54 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0002af64 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0002af74 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0002af80 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0002af8c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0002af98 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0002afa4 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002afb0 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0002afbc l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0002afc8 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0002afd8 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0002afe8 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002eb18 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002eb1c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002eb20 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002eb28 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002aff4 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002b000 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0002b00c l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0002b018 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002eb30 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0002b024 l     O .rodata	00000009 _ZL17pstrUsageFontData
0002b030 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0002b03c l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0002b048 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0002b058 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0002b068 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0002b078 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002b084 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002b090 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002b09c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0002b0a8 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002b0b4 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002b0c0 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002b0cc l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0002b0d8 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002b0e4 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002b0f4 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0002b104 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0002b114 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0002b120 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0002b12c l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0002b13c l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002eb38 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002b148 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002b158 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002b168 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002b174 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002b180 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002b190 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002b1a0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002b1b0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002b1c0 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002b1cc l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0002b1d8 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002b1e4 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002b1f4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002b204 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0002b214 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0002b224 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002eb40 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002eb48 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0002b234 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002eb50 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002eb58 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002eb60 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002eb68 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002b240 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002eb70 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002b24c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002eb78 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002eb80 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002b258 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002b268 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002b278 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002b288 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002b294 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002b2a0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002b2b4 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0002b2c8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002b2dc l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002b2f0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002b300 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0002b310 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0002b31c l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002b328 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002b338 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0002b346 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002b356 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0002eb88 l     O .rwdata	00000004 _ZL5synth
0000ad64 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000adcc l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000c000 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000c0a4 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000c2b0 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000c304 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000c390 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000c4c4 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000c54c l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000c778 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000d050 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000d338 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
00031f80 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000d3f0 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000d5a0 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00031e1c l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000ee3c l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00031e24 l     O .bss	00000004 fc_static
0000ef54 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000f014 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0002ba18 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002b7f6 l     O .rodata	00000010 zeroes.4389
0002b806 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002b816 l     O .rodata	00000010 zeroes.4404
00014b74 l     F .text	000000bc __sbprintf
0002b826 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00014d84 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000168dc l     F .text	00000008 __fp_unlock
000168f0 l     F .text	0000019c __sinit.part.1
00016a8c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002c264 l     O .rwdata	00000020 lc_ctype_charset
0002c244 l     O .rwdata	00000020 lc_message_charset
0002c284 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002b854 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002b978 l     O .rodata	00000010 zeroes.4333
0002b988 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0001aa8c l     F .text	000000fc __sprint_r.part.0
0002b998 l     O .rodata	00000010 zeroes.4349
0001c0c8 l     F .text	000000bc __sbprintf
0002b9a8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001fed0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001ffe4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00020044 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00020158 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00020240 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000203ac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00020498 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00020674 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002ebf4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
000208e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000209cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00020b08 l     F .text	00000034 alt_dev_reg
0002c464 l     O .rwdata	00000038 i2c_0
0002c49c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00020be8 l     F .text	00000110 optional_irq_callback
00020d48 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00022a24 l     F .text	0000020c altera_avalon_jtag_uart_irq
00022c30 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00023464 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000237fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00023cec l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00023e4c l     F .text	0000003c alt_get_errno
00023e88 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00031e5c g     O .bss	00000004 alt_instruction_exception_handler
0000d4f8 g     F .text	00000028 __cxa_free_exception
00024c78  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000ff3c g     F .text	00000018 putchar
0000bb54 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00018b28 g     F .text	00000074 _mprec_log10
00004840  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000bfa0 g     F .text	00000018 _ZSt10unexpectedv
00018c14 g     F .text	0000008c __any_on
0001c7d4 g     F .text	00000054 _isatty_r
0002b860 g     O .rodata	00000028 __mprec_tinytens
000205b0 g     F .text	0000007c alt_main
00006d28 g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000ff54 g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
00007184 g     F .text	00000070 _Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh
00031fb8 g     O .bss	00000100 alt_irq
0000d694 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00009670 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001c828 g     F .text	00000060 _lseek_r
0000f0d0 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002ec0c g       *ABS*	00000000 __flash_rwdata_start
000066c8 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001e90c g     F .text	00000088 .hidden __eqdf2
00004840  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000028cc g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000d124 g     F .text	00000084 __cxa_rethrow
0000f05c g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000bfdc g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006f6c g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000f0c0 g     F .text	00000010 .hidden _Unwind_GetIP
000320b8 g       *ABS*	00000000 __alt_heap_start
00008fb0  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00010320 g     F .text	0000005c _kill_r
000071f4 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000fef8 g     F .text	0000003c printf
00024c9c  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001c8e8 g     F .text	0000009c _wcrtomb_r
000100e8 g     F .text	00000084 _signal_r
00006450  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
000194b8 g     F .text	0000005c __sseek
00016c3c g     F .text	00000010 __sinit
0001c184 g     F .text	00000140 __swbuf_r
000055b4 g     F .text	000000a8 _Z8set_notehhh
00009ce4 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000d574 g     F .text	0000002c __cxa_free_dependent_exception
0000aea8 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000047e0  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
00017710 g     F .text	0000007c _setlocale_r
0002b43c  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00016a94 g     F .text	00000078 __sfmoreglue
00021440 g     F .text	000000a8 alt_avalon_i2c_rx_read
00020650 g     F .text	00000024 __malloc_unlock
0000d694 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00008900 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000b8dc g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00009098  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
00001ffc g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0000d318 g     F .text	00000020 _ZSt18uncaught_exceptionv
0000dda8 g     F .text	00000440 .hidden __divsf3
00022658 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001d6c g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
0000a0b8 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0002eb98 g     O .rwdata	00000004 peak_sus
0000bbd0 g     F .text	00000020 __cxa_deleted_virtual
000211c4 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002d3c  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
0000915c g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
00009af4 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00017a8c g     F .text	0000015c memmove
00031e14 g     O .bss	00000002 sus_h
0000616c  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000d66c g     F .text	00000004 _ZNSt9exceptionD2Ev
00016c24 g     F .text	00000018 _cleanup
00021ea8 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00017be8 g     F .text	000000a8 _Balloc
0000ebb8 g     F .text	00000070 .hidden __fixsfsi
00003e40 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001e994 g     F .text	000000dc .hidden __gtdf2
00003f04 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0002b670  w    O .rodata	00000014 _ZTVSt13bad_exception
000244dc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00020924 g     F .text	00000078 times
00009018  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000f10c g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002d518  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008884 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004d0c  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001c778 g     F .text	0000005c _fstat_r
000097c0 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
00031e34 g     O .bss	00000004 errno
00005eac g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
00019434 g     F .text	00000008 __seofread
0000936c g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
000196ec g     F .text	000013a0 ___svfiprintf_internal_r
0000f2e8 g     F .text	00000074 .hidden _Unwind_Backtrace
00031e48 g     O .bss	00000004 alt_argv
000034cc g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
000354fc g       *ABS*	00000000 _gp
0002099c g     F .text	00000030 usleep
0002269c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000e6d4 g     F .text	000004e4 .hidden __subsf3
00008210 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002dcb4  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0002eb92 g     O .rwdata	00000002 rel_l
00031e10 g     O .bss	00000002 att_h
00020138 g     F .text	00000020 getpid
0000ce20 g     F .text	00000230 __cxa_call_unexpected
0000d1a8 g     F .text	00000008 __cxa_get_exception_ptr
00021354 g     F .text	00000044 alt_avalon_i2c_is_busy
0002c2e4 g     O .rwdata	00000180 alt_fd_list
0000951c g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00024be8  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
000071f4 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
00004618 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000ff34 g     F .text	00000008 _putchar_r
0000f1fc g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
000210f8 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c0c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000f08c g     F .text	00000018 .hidden _Unwind_GetCFA
0000bfb8 g     F .text	00000014 _ZSt13set_terminatePFvvE
0002399c g     F .text	00000090 alt_find_dev
00024bdc  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
00012874 g     F .text	00000008 _times_r
0000fc58 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00006234  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000d520 g     F .text	00000054 __cxa_allocate_dependent_exception
000168e4 g     F .text	0000000c _cleanup_r
0000bc68 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001fd4c g     F .text	000000dc .hidden __floatsidf
00024c90  w    O .rodata	0000000c _ZTV13USBReadParser
00023dd0 g     F .text	0000007c alt_io_redirect
0001ea70 g     F .text	000000f4 .hidden __ltdf2
00004b60  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00024b08 g       *ABS*	00000000 __DTOR_END__
0000bc80 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00021ce8 g     F .text	000001c0 alt_avalon_i2c_master_transmit
00010014 g     F .text	00000014 puts
0002b4c4  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
000246cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00008298 g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
000095a4 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0001936c g     F .text	00000074 __fpclassifyd
0000a240 g     F .text	000009b8 _Z9MIDI_pollv
00018a84 g     F .text	000000a4 __ratio
0001c0ac g     F .text	0000001c __vfiprintf_internal
00007d14 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00022e28 g     F .text	0000021c altera_avalon_jtag_uart_read
0000f424 g     F .text	00000014 malloc
0000fec8 g     F .text	00000030 _printf_r
0000d7fc g     F .text	00000064 .hidden __udivsi3
00020194 g     F .text	000000ac isatty
0001016c g     F .text	000000bc _raise_r
00009760 g     F .text	0000003c _ZN8MAX3421eC2Ev
0002b8b0 g     O .rodata	000000c8 __mprec_tens
00006fd8 g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
0001778c g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004b18  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
00020f64 g     F .text	00000098 alt_avalon_i2c_enable
00031e30 g     O .bss	00000004 __malloc_top_pad
0001037c g     F .text	00000004 _getpid_r
0002258c g     F .text	00000068 alt_avalon_i2c_int_disable
00031e08 g     O .bss	00000001 usb_task_state
0002ebd4 g     O .rwdata	00000004 __mb_cur_max
000177bc g     F .text	0000000c _localeconv_r
0000b16c g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003e70 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
00007374 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
0001801c g     F .text	0000003c __i2b
000170c0 g     F .text	000004c8 __sfvwrite_r
0000be00 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00010228 g     F .text	000000a8 __sigtramp_r
000085cc g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
00002df4  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
00010028 g     F .text	00000054 _sbrk_r
0002b50c  w    O .rodata	00000020 _ZTVSt9type_info
00004c10  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
00009404 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001c888 g     F .text	00000060 _read_r
0000d674 g     F .text	0000000c _ZNKSt9exception4whatEv
0002ebec g     O .rwdata	00000004 alt_max_fd
00006520 g     F .text	00000050 _Z9E_Notifycci
0000870c g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001c46c g     F .text	000000f0 _fclose_r
000168ac g     F .text	00000030 fflush
0000a150 g     F .text	00000078 _Z6onInitv
00031e2c g     O .bss	00000004 __malloc_max_sbrked_mem
00009a6c g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
000220b4 g     F .text	00000210 alt_avalon_i2c_master_receive
000270c4  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001d690 g     F .text	000008ac .hidden __adddf3
0002b470  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004c3c  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008e64 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001882c g     F .text	0000010c __b2d
0001d0cc g     F .text	000005c4 .hidden __umoddi3
000204d4 g     F .text	000000dc lseek
0000625c  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000bcc4 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00006678 g     F .text	00000028 _Z8E_Notifyhi
0000bbac g     F .text	00000004 _ZdlPv
000225f4 g     F .text	00000064 alt_avalon_i2c_int_enable
0002ebc4 g     O .rwdata	00000004 _global_impure_ptr
0000b17c g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00018e08 g     F .text	00000564 _realloc_r
000320b8 g       *ABS*	00000000 __bss_end
00023bfc g     F .text	000000f0 alt_iic_isr_register
000243d4 g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000f044 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001cad0 g     F .text	000005fc .hidden __udivdi3
000224b4 g     F .text	00000058 alt_avalon_i2c_int_status_get
0001c6d4 g     F .text	00000024 _fputwc_r
0002b888 g     O .rodata	00000028 __mprec_bigtens
00017e00 g     F .text	00000104 __s2b
0000f3c0 g     F .text	00000018 abort
0001fe28 g     F .text	000000a8 .hidden __floatunsidf
00026ebc  w    O .rodata	00000014 _ZTS17MouseReportParser
0001856c g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
000090d4  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
000036b0 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000d264 g     F .text	000000b4 __cxa_end_catch
00009498 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00016c5c g     F .text	00000018 __fp_lock_all
00024cd4  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00023bb0 g     F .text	0000004c alt_ic_irq_enabled
0000d670 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
000030c0  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
0000620c  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
00024338 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00027050  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
00020de4 g     F .text	00000054 alt_avalon_i2c_register_callback
00031e50 g     O .bss	00000004 alt_irq_active
00020e38 g     F .text	000000ec alt_avalon_i2c_init
0000bf78 g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002c2bc g     O .rwdata	00000028 alt_dev_null
0000b1b0 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00006484  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000d69c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
0000326c  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002b94 g     F .text	00000084 _ZN3USB7setConfEhhh
00031e16 g     O .bss	00000002 rel_h
00008fa8 g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002b568  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
000237dc g     F .text	00000020 alt_dcache_flush_all
00017f04 g     F .text	00000068 __hi0bits
000270d0  w    O .rodata	0000000c _ZTI14MidiDescParser
00009cbc g     F .text	00000028 _Z10Vbus_powerb
0002ebac  w    O .rwdata	00000008 _ZTISt9exception
0001fccc g     F .text	00000080 .hidden __fixdfsi
00026ed0  w    O .rodata	00000012 _ZTS15HIDReportParser
0000adfc  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002ec0c g       *ABS*	00000000 __ram_rwdata_end
0000bb50 g     F .text	00000004 _ZNSt9type_infoD1Ev
0002ebe4 g     O .rwdata	00000008 alt_dev_list
0000d69c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00020a08 g     F .text	00000100 write
00018ca0 g     F .text	000000a0 _putc_r
0000a12c g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
00021774 g     F .text	0000004c alt_avalon_i2c_check_arblost
0000bb64 g     F .text	00000004 _ZNSt9type_infoD0Ev
00004d34  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0000e1e8 g     F .text	000000bc .hidden __gtsf2
00022550 g     F .text	0000003c alt_avalon_i2c_int_clear
00009130  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00024bc8  w    O .rodata	00000014 _ZTV11AddressPool
0002ba18 g       *ABS*	00000000 __ram_rodata_end
00020080 g     F .text	000000b8 fstat
00002c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0002027c g     F .text	00000130 kill
000064fc  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001ea70 g     F .text	000000f4 .hidden __ledf2
00024cfc  w    O .rodata	00000020 _ZTI7XBOXONE
0002ebf8 g     O .rwdata	00000008 alt_avalon_i2c_list
00004aa0  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00026e16 g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
000182e4 g     F .text	00000140 __pow5mult
00005088  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
0001aba0 g     F .text	0000150c ___vfiprintf_internal_r
00031e40 g     O .bss	00000004 __nlocale_changed
0000d860 g     F .text	00000058 .hidden __umodsi3
0000bb5c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0000487c  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
0000a1c8 g     F .text	00000078 _Z10MIDI_setupv
0000270c g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000bfcc g     F .text	00000010 _ZSt13get_terminatev
000320b8 g       *ABS*	00000000 end
00024c84  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004e88  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
00009980 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
0000641c  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000f2d0 g     F .text	00000018 .hidden _Unwind_DeleteException
00022964 g     F .text	000000c0 altera_avalon_jtag_uart_init
000061e4  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00020f24 g     F .text	00000040 alt_avalon_i2c_open
00026e2c g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
00031e18 g     O .bss	00000001 ped_flip
0000bd30 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000b16c g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002dca8 g     O .rwdata	00000004 UsbDEBUGlvl
00024b00 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
000218fc g     F .text	000000e8 alt_avalon_i2c_master_tx
000234dc g     F .text	0000007c alt_avalon_timer_sc_init
0000f35c g     F .text	00000064 .hidden __clzsi2
0000bbf0 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00023044 g     F .text	00000224 altera_avalon_jtag_uart_write
00016c4c g     F .text	00000004 __sfp_lock_acquire
0002b5f8  w    O .rodata	00000012 _ZTSSt13bad_exception
000179a8 g     F .text	000000e4 memchr
0001287c g     F .text	000022dc ___vfprintf_internal_r
00010380 g     F .text	00000058 _sprintf_r
000047e0  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00016db0 g     F .text	00000310 _free_r
000240d0 g     F .text	0000022c alt_printf
00017798 g     F .text	00000010 __locale_mb_cur_max
00024948 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
00031e3c g     O .bss	00000004 __mlocale_changed
0002eb8e g     O .rwdata	00000002 dec_l
00020cf8 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002ebcc g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003e48 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00031e54 g     O .bss	00000004 _alt_tick_rate
0002b4fc  w    O .rodata	0000000d _ZTSSt9type_info
000222c4 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000bbb0 g     F .text	00000020 __cxa_pure_virtual
00024bb4  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00024d3c  w    O .rodata	00000010 _ZTS13USBReadParser
000226e8 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00018424 g     F .text	00000148 __lshift
00023268 g     F .text	000001fc alt_avalon_spi_command
00031e58 g     O .bss	00000004 _alt_nticks
000102e4 g     F .text	00000018 signal
000206b0 g     F .text	00000104 read
000059d4 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
00020b74 g     F .text	00000074 alt_sys_init
00024c38  w    O .rodata	00000040 _ZTV7XBOXONE
0000ec28 g     F .text	00000124 .hidden __floatsisf
0001951c g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
00024830 g     F .text	00000118 __register_exitproc
00002b00 g     F .text	00000094 _ZN3USB7setAddrEhhh
00006570 g     F .text	00000084 _Z8E_NotifyPKci
0002708c  w    O .rodata	0000000c _ZTV14MidiDescParser
00009040  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00003300  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000aeec g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000063e8  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
00004ccc  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00021b20 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00018058 g     F .text	0000028c __multiply
00002a58 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002dc96 g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00022cd0 g     F .text	00000068 altera_avalon_jtag_uart_close
00002c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000d8b8 g     F .text	00000028 .hidden __mulsi3
0002ba18 g       *ABS*	00000000 __ram_rwdata_start
0000f12c g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0000565c g     F .text	00000064 _Z8set_ctrlhhm
00024b08 g       *ABS*	00000000 __ram_rodata_start
00031f90 g     O .bss	00000028 __malloc_current_mallinfo
00004f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000f240 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00018938 g     F .text	0000014c __d2b
0002b698  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000bb50 g     F .text	00000004 _ZNSt9type_infoD2Ev
00008ff0  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004938  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002d504  w    O .rwdata	00000008 _ZTI11AddressPool
0000d6a0 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000b0e8 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000270dc  w    O .rodata	00000011 _ZTS14MidiDescParser
0002b49c  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
00022800 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024608 g     F .text	000000c4 alt_get_fd
00005bf0 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
00023684 g     F .text	00000158 alt_busy_sleep
00006ac8 g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002ebbc  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001c33c g     F .text	00000054 _close_r
000247b4 g     F .text	0000007c memcmp
00021398 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
000228c0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007de8 g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
000320b8 g       *ABS*	00000000 __alt_stack_base
00022910 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000aea8 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00008050 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004578 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00014c30 g     F .text	00000154 __swsetup_r
0000f284 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00031e0c g     O .bss	00000004 i2c_dev
0001df3c g     F .text	000009d0 .hidden __divdf3
0000ae4c  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00016b0c g     F .text	00000118 __sfp
00018b9c g     F .text	00000078 __copybits
0000bb54 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0002be3c g     O .rwdata	00000408 __malloc_av_
000048fc  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00016c58 g     F .text	00000004 __sinit_lock_release
0001eb64 g     F .text	0000086c .hidden __muldf3
000193e0 g     F .text	00000054 __sread
00004ef0  w    F .text	00000034 _ZN13USBReadParserC2Ev
0002b65c  w    O .rodata	00000014 _ZTVSt9exception
0000d698 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002c3c  w    F .text	00000034 _ZN11AddressPoolC2Ev
00024500 g     F .text	00000108 alt_find_file
00004be4  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
00023838 g     F .text	000000a4 alt_dev_llist_insert
0002062c g     F .text	00000024 __malloc_lock
00020838 g     F .text	000000b0 sbrk
000105b8 g     F .text	000022bc ___svfprintf_internal_r
000217c0 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00021728 g     F .text	0000004c alt_avalon_i2c_check_nack
0002b598  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000d094 g     F .text	00000090 __cxa_throw
00016850 g     F .text	0000005c _fflush_r
0000f0f0 g     F .text	00000010 .hidden _Unwind_SetIP
00006ed4 g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001c390 g     F .text	000000dc _calloc_r
00024d28  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
000066a0 g     F .text	00000028 _Z8E_Notifydi
00007c0c g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
00031e12 g     O .bss	00000002 dec_h
00031e00 g       *ABS*	00000000 __bss_start
0002d528  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000fda0 g     F .text	00000128 memset
0000870c g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00005104  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000abf8 g     F .text	0000016c main
000099f4 g     F .text	00000078 _ZN8MAX3421e5regRdEh
00009bf0 g     F .text	000000cc _ZN8MAX3421e5resetEv
000216f4 g     F .text	00000034 alt_avalon_i2c_master_target_set
00031e4c g     O .bss	00000004 alt_envp
00024d4c  w    O .rodata	00000012 _ZTS15USBDeviceConfig
00031e28 g     O .bss	00000004 __malloc_max_total_mem
00022860 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00031e09 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001c2c4 g     F .text	00000018 __swbuf
0000d654 g     F .text	0000000c __cxa_get_globals_fast
0002250c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00009760 g     F .text	0000003c _ZN8MAX3421eC1Ev
00004ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002c18  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
00019514 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001c55c g     F .text	00000014 fclose
0000ae74  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
0000444c g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
000065f4 g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
00014fac g     F .text	00001688 _dtoa_r
0000f44c g     F .text	0000080c _malloc_r
0001ca44 g     F .text	00000030 __ascii_wctomb
0000d680 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002ebf0 g     O .rwdata	00000004 alt_errno
00026eb0  w    O .rodata	0000000c _ZTI17MouseReportParser
000102fc g     F .text	00000010 _init_signal
00002960 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
00006c80 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0002b58c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000046bc g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
00017588 g     F .text	000000c4 _fwalk
0000979c g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00003204  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000d670 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00018d40 g     F .text	000000c8 putc
0000d704 g     F .text	00000084 .hidden __divsi3
000270f0  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00016c8c g     F .text	00000124 _malloc_trim_r
00024b08 g       *ABS*	00000000 __CTOR_END__
0000e2a4 g     F .text	00000430 .hidden __mulsf3
00004adc  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
000090fc  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00026e64  w    O .rodata	00000028 _ZTV17MouseReportParser
00010444 g     F .text	000000dc strcmp
000034cc g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00024b08 g       *ABS*	00000000 __flash_rodata_start
0002b684  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000ae24  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00024b08 g       *ABS*	00000000 __DTOR_LIST__
00027098  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001e90c g     F .text	00000088 .hidden __nedf2
00020b3c g     F .text	00000038 alt_irq_init
000207b4 g     F .text	00000084 alt_release_fd
0000aeb8 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00024d1c  w    O .rodata	00000009 _ZTS7XBOXONE
000103d8 g     F .text	0000006c sprintf
0002b6ac g     O .rodata	00000100 .hidden __clz_tab
00031e38 g     O .bss	00000004 _PathLocale
00024768 g     F .text	00000014 atexit
0000e1e8 g     F .text	000000bc .hidden __gesf2
0001c2dc g     F .text	00000060 _write_r
00002844 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
00002dc8  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
000177c8 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00026e38  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00009b74 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000f124 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002b4d0  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000d5fc g     F .text	00000058 __cxa_call_terminate
0002ebc8 g     O .rwdata	00000004 _impure_ptr
0002ebb4  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00024c04  w    O .rodata	0000000e _ZTS11AddressPool
00031e44 g     O .bss	00000004 alt_argc
00003404  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
00016634 g     F .text	0000021c __sflush_r
000090fc  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00003054  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
0002393c g     F .text	00000060 _do_dtors
00031f1c g     O .bss	00000064 Midi
000177b4 g     F .text	00000008 __locale_cjk_lang
000216bc g     F .text	00000038 alt_avalon_i2c_master_target_get
000215cc g     F .text	000000f0 alt_avalon_i2c_send_address
0000bff0 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002c3c  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
000187c8 g     F .text	00000064 __ulp
0000f114 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00016c74 g     F .text	00000018 __fp_unlock_all
00004f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
0000453c g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004b84  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002ebdc g     O .rwdata	00000008 alt_fs_list
0002b638  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00026e98  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004ef0  w    F .text	00000034 _ZN13USBReadParserC1Ev
0002eb8c g     O .rwdata	00000002 att_l
0000f100 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00004bb0  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000d1b0 g     F .text	000000b4 __cxa_begin_catch
00004734 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
000056c0 g     F .text	00000314 _Z9calc_adsrttttttttff
0000bc80 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000bf90 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
000061bc  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
000177e0 g     F .text	0000000c localeconv
00009ee0 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004d5c  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000d690 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
00022798 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002eba8 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
000091fc g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00023a4c g     F .text	00000050 alt_ic_isr_register
00020ffc g     F .text	0000004c alt_avalon_i2c_disable
0000d498 g     F .text	00000060 __cxa_allocate_exception
0002b464  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002ec0c g       *ABS*	00000000 _edata
00004e88  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
000320b8 g       *ABS*	00000000 _end
0000b2d8 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000c820 g     F .text	00000600 __gxx_personality_sj0
0001c570 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	000003f0 _ZN3USB4TaskEv
00022d38 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002d520  w    O .rwdata	00000008 _ZTI13USBReadParser
00021048 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000d66c g     F .text	00000004 _ZNSt9exceptionD1Ev
00023b24 g     F .text	0000008c alt_ic_irq_disable
00006144  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
0001943c g     F .text	0000007c __swrite
0002ebd0 g     O .rwdata	00000004 __malloc_trim_threshold
000177a8 g     F .text	0000000c __locale_msgcharset
0002477c g     F .text	00000038 exit
0000f0a4 g     F .text	0000001c .hidden _Unwind_SetGR
00006194  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
0001764c g     F .text	000000c4 _fwalk_reent
0000b04c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000ed4c g     F .text	000000f0 .hidden __floatunsisf
000185cc g     F .text	000001fc __mdiff
0000beb8 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000d788 g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00016c50 g     F .text	00000004 __sfp_lock_release
0002b60c  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000064ac  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00003ffc g     F .text	000003c8 _ZN7XBOXONE10readReportEv
00021258 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00009dc8 g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
000214e8 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000270a4  w    O .rodata	00000020 _ZTI9USBH_MIDI
000043c4 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0000d6a4 g     F .text	00000060 .hidden __fixunssfsi
0002eb90 g     O .rwdata	00000002 sus_l
00007b94 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
00020010 g     F .text	00000034 _exit
00023558 g     F .text	0000012c alt_alarm_start
00026e8c  w    O .rodata	0000000c _ZTI20KeyboardReportParser
000081ac g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000f070 g     F .text	0000001c .hidden _Unwind_GetGR
0000d660 g     F .text	0000000c __cxa_get_globals
000067d0 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
000177ec g     F .text	000001bc __smakebuf_r
0002eba4 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004b3c  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
00010520 g     F .text	00000098 strlen
0001007c g     F .text	0000006c _init_signal_r
0002eb9c  w    O .rwdata	00000008 _ZTISt9type_info
00023f74 g     F .text	0000015c open
0001e994 g     F .text	000000dc .hidden __gedf2
000242fc g     F .text	0000003c alt_putchar
0002b5e8  w    O .rodata	0000000d _ZTSSt9exception
0000f3d8 g     F .text	0000004c clock
000064d4  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
0000a054 g     F .text	00000064 _ZN8MAX3421e4TaskEv
00026e20 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
0000984c g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002ebd8 g     O .rwdata	00000004 __wctomb
0000d68c g     F .text	00000004 _ZNSt9exceptionD0Ev
0001ab88 g     F .text	00000018 __sprint_r
00023a2c g     F .text	00000020 alt_icache_flush_all
0000f11c g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00031e60 g     O .bss	000000bc Usb
0002ec00 g     O .rwdata	00000004 alt_priority_mask
000048fc  w    F .text	0000003c _ZN11ByteSkipperC2Ev
00023a9c g     F .text	00000088 alt_ic_irq_enable
00014b58 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001ca74 g     F .text	0000005c _wctomb_r
0001f3d0 g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003d04 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00017f6c g     F .text	000000b0 __lo0bits
0002ec04 g     O .rwdata	00000008 alt_alarm_list
000238dc g     F .text	00000060 _do_ctors
00024cc8  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0001030c g     F .text	00000014 __sigtramp
000092b4 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001c984 g     F .text	000000c0 wcrtomb
0001ff0c g     F .text	000000d8 close
0000d8e0 g     F .text	000004c8 .hidden __addsf3
0002eb94 g     O .rwdata	00000004 peak_att
0002274c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002b618  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00020414 g     F .text	00000084 alt_load
000219e4 g     F .text	0000013c alt_avalon_i2c_master_rx
0000bb68 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
000049a0  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001c6f8 g     F .text	00000080 fputwc
000102d0 g     F .text	00000014 raise
0002dc9c  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000f438 g     F .text	00000014 free
00016c54 g     F .text	00000004 __sinit_lock_acquire
00017cb8 g     F .text	00000148 __multadd
0000bc90 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00017c90 g     F .text	00000028 _Bfree
00006a24 g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	1087ee04 	addi	r2,r2,8120
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	1087ee04 	addi	r2,r2,8120
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b25817 	ldw	r2,-13984(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b25817 	ldw	r2,-13984(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d6953f14 	ori	gp,gp,21756
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     244:	10878014 	ori	r2,r2,7680

    movhi r3, %hi(__bss_end)
     248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     24c:	18c82e14 	ori	r3,r3,8376

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00204140 	call	20414 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00205b00 	call	205b0 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	2112c204 	addi	r4,r4,19208
     28c:	00100140 	call	10014 <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	2112c504 	addi	r4,r4,19220
     2d0:	00100140 	call	10014 <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	2112ca04 	addi	r4,r4,19240
     304:	00100140 	call	10014 <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	2112cd04 	addi	r4,r4,19252
     340:	00100140 	call	10014 <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	2112d104 	addi	r4,r4,19268
     374:	00100140 	call	10014 <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	2112d504 	addi	r4,r4,19284
     3b0:	00100140 	call	10014 <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	2112d804 	addi	r4,r4,19296
     3ec:	00100140 	call	10014 <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	2112db04 	addi	r4,r4,19308
     428:	00100140 	call	10014 <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	2112de04 	addi	r4,r4,19320
     464:	00100140 	call	10014 <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	2112e104 	addi	r4,r4,19332
     4a0:	00100140 	call	10014 <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	2112e504 	addi	r4,r4,19348
     4dc:	00100140 	call	10014 <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	2112e904 	addi	r4,r4,19364
     510:	00100140 	call	10014 <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000d8b80 	call	d8b8 <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000d7fc0 	call	d7fc <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000d7fc0 	call	d7fc <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000d7fc0 	call	d7fc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000d8b80 	call	d8b8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000d7fc0 	call	d7fc <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000d7fc0 	call	d7fc <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000d8b80 	call	d8b8 <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000d7fc0 	call	d7fc <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000d8b80 	call	d8b8 <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000d8b80 	call	d8b8 <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000d7fc0 	call	d7fc <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000d8b80 	call	d8b8 <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000f3d80 	call	f3d8 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000f3d80 	call	f3d8 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000f3d80 	call	f3d8 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	00097600 	call	9760 <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	0002c700 	call	2c70 <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b24145 	stb	r2,-14075(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b24143 	ldbu	r2,-14075(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b24145 	stb	r2,-14075(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	000984c0 	call	984c <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	0009a6c0 	call	9a6c <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	000984c0 	call	984c <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	000a0540 	call	a054 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	000979c0 	call	979c <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b24145 	stb	r2,-14075(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b24143 	ldbu	r2,-14075(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b24145 	stb	r2,-14075(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b24143 	ldbu	r2,-14075(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b24215 	stw	r2,-14072(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b24145 	stb	r2,-14075(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b24143 	ldbu	r2,-14075(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	18008e1e 	bne	r3,zero,1bc8 <_ZN3USB4TaskEv+0x3ac>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	00009406 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00008f06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	18006e1e 	bne	r3,zero,1b78 <_ZN3USB4TaskEv+0x35c>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18008b1e 	bne	r3,zero,1bf4 <_ZN3USB4TaskEv+0x3d8>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00008606 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1a7c:	00005d06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b24217 	ldw	r2,-14072(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10004c26 	beq	r2,zero,1bd0 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b24145 	stb	r2,-14075(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1ac0:	00004c06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10003d26 	beq	r2,zero,1bd8 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b24145 	stb	r2,-14075(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00003006 	br	1bd8 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10002a26 	beq	r2,zero,1be0 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b24145 	stb	r2,-14075(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b24215 	stw	r2,-14072(gp)
                        }
                        break;
    1b4c:	00002406 	br	1be0 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b24217 	ldw	r2,-14072(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10001e26 	beq	r2,zero,1be8 <_ZN3USB4TaskEv+0x3cc>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b24145 	stb	r2,-14075(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
    1b78:	e0bffc03 	ldbu	r2,-16(fp)
    1b7c:	100f883a 	mov	r7,r2
    1b80:	000d883a 	mov	r6,zero
    1b84:	000b883a 	mov	r5,zero
    1b88:	e13ffe17 	ldw	r4,-8(fp)
    1b8c:	0001ffc0 	call	1ffc <_ZN3USB11ConfiguringEhhb>
    1b90:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
    1b94:	e0bffd03 	ldbu	r2,-12(fp)
    1b98:	10000826 	beq	r2,zero,1bbc <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1b9c:	e0bffd03 	ldbu	r2,-12(fp)
    1ba0:	108034a0 	cmpeqi	r2,r2,210
    1ba4:	1000121e 	bne	r2,zero,1bf0 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
    1ba8:	e0bffd03 	ldbu	r2,-12(fp)
    1bac:	d0b24105 	stb	r2,-14076(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1bb0:	00bfe804 	movi	r2,-96
    1bb4:	d0b24145 	stb	r2,-14075(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bb8:	00000d06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bbc:	00bfe404 	movi	r2,-112
    1bc0:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1bc4:	00000a06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1bc8:	0001883a 	nop
    1bcc:	00000906 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1bd0:	0001883a 	nop
    1bd4:	00000706 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1bd8:	0001883a 	nop
    1bdc:	00000506 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1be0:	0001883a 	nop
    1be4:	00000306 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1be8:	0001883a 	nop
    1bec:	00000106 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bf0:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1bf4:	0001883a 	nop
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	dfc00117 	ldw	ra,4(sp)
    1c00:	df000017 	ldw	fp,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c0c:	defff704 	addi	sp,sp,-36
    1c10:	dfc00815 	stw	ra,32(sp)
    1c14:	df000715 	stw	fp,28(sp)
    1c18:	df000704 	addi	fp,sp,28
    1c1c:	e13ffc15 	stw	r4,-16(fp)
    1c20:	2809883a 	mov	r4,r5
    1c24:	3007883a 	mov	r3,r6
    1c28:	3805883a 	mov	r2,r7
    1c2c:	e13ffd05 	stb	r4,-12(fp)
    1c30:	e0fffe05 	stb	r3,-8(fp)
    1c34:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c38:	e03ff915 	stw	zero,-28(fp)
    1c3c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	000b883a 	mov	r5,zero
    1c48:	1009883a 	mov	r4,r2
    1c4c:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c50:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c54:	e0bff917 	ldw	r2,-28(fp)
    1c58:	1000021e 	bne	r2,zero,1c64 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c5c:	00bff584 	movi	r2,-42
    1c60:	00003d06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1c64:	e0bff917 	ldw	r2,-28(fp)
    1c68:	10c00003 	ldbu	r3,0(r2)
    1c6c:	11000043 	ldbu	r4,1(r2)
    1c70:	2008923a 	slli	r4,r4,8
    1c74:	20c6b03a 	or	r3,r4,r3
    1c78:	11000083 	ldbu	r4,2(r2)
    1c7c:	2008943a 	slli	r4,r4,16
    1c80:	20c6b03a 	or	r3,r4,r3
    1c84:	108000c3 	ldbu	r2,3(r2)
    1c88:	1004963a 	slli	r2,r2,24
    1c8c:	10c4b03a 	or	r2,r2,r3
    1c90:	1000021e 	bne	r2,zero,1c9c <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1c94:	00bff5c4 	movi	r2,-41
    1c98:	00002f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1c9c:	e0bff917 	ldw	r2,-28(fp)
    1ca0:	e0ffff03 	ldbu	r3,-4(fp)
    1ca4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	e0fffd03 	ldbu	r3,-12(fp)
    1cb0:	e13ffe03 	ldbu	r4,-8(fp)
    1cb4:	200f883a 	mov	r7,r4
    1cb8:	000d883a 	mov	r6,zero
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	0002df40 	call	2df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1cc8:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1ccc:	e0bffb03 	ldbu	r2,-20(fp)
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1cd4:	00bff504 	movi	r2,-44
    1cd8:	00001f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	e0fffb03 	ldbu	r3,-20(fp)
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	1009883a 	mov	r4,r2
    1cec:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1cf0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1cf4:	e0bffa17 	ldw	r2,-24(fp)
    1cf8:	1000021e 	bne	r2,zero,1d04 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1cfc:	00bff584 	movi	r2,-42
    1d00:	00001506 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d04:	e0bffa17 	ldw	r2,-24(fp)
    1d08:	e0ffff03 	ldbu	r3,-4(fp)
    1d0c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d10:	e0bffb03 	ldbu	r2,-20(fp)
    1d14:	100f883a 	mov	r7,r2
    1d18:	000d883a 	mov	r6,zero
    1d1c:	000b883a 	mov	r5,zero
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    1d28:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d2c:	e0bffb43 	ldbu	r2,-19(fp)
    1d30:	10000826 	beq	r2,zero,1d54 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0fffb03 	ldbu	r3,-20(fp)
    1d3c:	180b883a 	mov	r5,r3
    1d40:	1009883a 	mov	r4,r2
    1d44:	00030540 	call	3054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d48:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d4c:	e0bffb43 	ldbu	r2,-19(fp)
    1d50:	00000106 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d54:	0005883a 	mov	r2,zero
};
    1d58:	e037883a 	mov	sp,fp
    1d5c:	dfc00117 	ldw	ra,4(sp)
    1d60:	df000017 	ldw	fp,0(sp)
    1d64:	dec00204 	addi	sp,sp,8
    1d68:	f800283a 	ret

00001d6c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1d6c:	defff804 	addi	sp,sp,-32
    1d70:	dfc00715 	stw	ra,28(sp)
    1d74:	df000615 	stw	fp,24(sp)
    1d78:	df000604 	addi	fp,sp,24
    1d7c:	e13ffb15 	stw	r4,-20(fp)
    1d80:	3009883a 	mov	r4,r6
    1d84:	3807883a 	mov	r3,r7
    1d88:	e0800217 	ldw	r2,8(fp)
    1d8c:	e17ffc05 	stb	r5,-16(fp)
    1d90:	e13ffd05 	stb	r4,-12(fp)
    1d94:	e0fffe05 	stb	r3,-8(fp)
    1d98:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1d9c:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1da0:	e0bffc03 	ldbu	r2,-16(fp)
    1da4:	e0fffb17 	ldw	r3,-20(fp)
    1da8:	10800784 	addi	r2,r2,30
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	10800017 	ldw	r2,0(r2)
    1dbc:	10800017 	ldw	r2,0(r2)
    1dc0:	10800104 	addi	r2,r2,4
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	e0bffc03 	ldbu	r2,-16(fp)
    1dcc:	e13ffb17 	ldw	r4,-20(fp)
    1dd0:	10800784 	addi	r2,r2,30
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1085883a 	add	r2,r2,r2
    1ddc:	2085883a 	add	r2,r4,r2
    1de0:	10800017 	ldw	r2,0(r2)
    1de4:	e13ffd03 	ldbu	r4,-12(fp)
    1de8:	e17ffe03 	ldbu	r5,-8(fp)
    1dec:	e1bfff03 	ldbu	r6,-4(fp)
    1df0:	300f883a 	mov	r7,r6
    1df4:	280d883a 	mov	r6,r5
    1df8:	200b883a 	mov	r5,r4
    1dfc:	1009883a 	mov	r4,r2
    1e00:	183ee83a 	callr	r3
    1e04:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e08:	e0bffa43 	ldbu	r2,-23(fp)
    1e0c:	10803818 	cmpnei	r2,r2,224
    1e10:	10001f1e 	bne	r2,zero,1e90 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e14:	e0bffd03 	ldbu	r2,-12(fp)
    1e18:	1000071e 	bne	r2,zero,1e38 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e1c:	01800044 	movi	r6,1
    1e20:	01403a04 	movi	r5,232
    1e24:	e13ffb17 	ldw	r4,-20(fp)
    1e28:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e2c:	01001984 	movi	r4,102
    1e30:	00006840 	call	684 <_Z5delaym>
    1e34:	00002606 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e38:	e0bffd03 	ldbu	r2,-12(fp)
    1e3c:	e0fffb17 	ldw	r3,-20(fp)
    1e40:	10800784 	addi	r2,r2,30
    1e44:	1085883a 	add	r2,r2,r2
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1885883a 	add	r2,r3,r2
    1e50:	10800017 	ldw	r2,0(r2)
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	10800504 	addi	r2,r2,20
    1e5c:	10c00017 	ldw	r3,0(r2)
    1e60:	e0bffd03 	ldbu	r2,-12(fp)
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	10800784 	addi	r2,r2,30
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	2085883a 	add	r2,r4,r2
    1e78:	10800017 	ldw	r2,0(r2)
    1e7c:	e13ffe03 	ldbu	r4,-8(fp)
    1e80:	200b883a 	mov	r5,r4
    1e84:	1009883a 	mov	r4,r2
    1e88:	183ee83a 	callr	r3
    1e8c:	00001006 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1e90:	e0bffa43 	ldbu	r2,-23(fp)
    1e94:	10800358 	cmpnei	r2,r2,13
    1e98:	1000091e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1e9c:	e0bffa03 	ldbu	r2,-24(fp)
    1ea0:	108000e8 	cmpgeui	r2,r2,3
    1ea4:	1000061e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ea8:	01001904 	movi	r4,100
    1eac:	00006840 	call	684 <_Z5delaym>
                retries++;
    1eb0:	e0bffa03 	ldbu	r2,-24(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1ebc:	003fb806 	br	1da0 <__alt_data_end+0xfc001da0>
        } else if(rcode)
    1ec0:	e0bffa43 	ldbu	r2,-23(fp)
    1ec4:	10000226 	beq	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1ec8:	e0bffa43 	ldbu	r2,-23(fp)
    1ecc:	00004606 	br	1fe8 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1ed0:	e0bffc03 	ldbu	r2,-16(fp)
    1ed4:	e0fffb17 	ldw	r3,-20(fp)
    1ed8:	10800784 	addi	r2,r2,30
    1edc:	1085883a 	add	r2,r2,r2
    1ee0:	1085883a 	add	r2,r2,r2
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	10800017 	ldw	r2,0(r2)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bffc03 	ldbu	r2,-16(fp)
    1ef8:	e13ffb17 	ldw	r4,-20(fp)
    1efc:	10800784 	addi	r2,r2,30
    1f00:	1085883a 	add	r2,r2,r2
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	2085883a 	add	r2,r4,r2
    1f0c:	10800017 	ldw	r2,0(r2)
    1f10:	e13ffd03 	ldbu	r4,-12(fp)
    1f14:	e17ffe03 	ldbu	r5,-8(fp)
    1f18:	e1bfff03 	ldbu	r6,-4(fp)
    1f1c:	300f883a 	mov	r7,r6
    1f20:	280d883a 	mov	r6,r5
    1f24:	200b883a 	mov	r5,r4
    1f28:	1009883a 	mov	r4,r2
    1f2c:	183ee83a 	callr	r3
    1f30:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f34:	e0bffa43 	ldbu	r2,-23(fp)
    1f38:	10800358 	cmpnei	r2,r2,13
    1f3c:	1000091e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f40:	e0bffa03 	ldbu	r2,-24(fp)
    1f44:	108000e8 	cmpgeui	r2,r2,3
    1f48:	1000061e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f4c:	01001904 	movi	r4,100
    1f50:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f54:	e0bffa03 	ldbu	r2,-24(fp)
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1f60:	003f8f06 	br	1da0 <__alt_data_end+0xfc001da0>
        }
        if(rcode) {
    1f64:	e0bffa43 	ldbu	r2,-23(fp)
    1f68:	10001e26 	beq	r2,zero,1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1f6c:	e0bffd03 	ldbu	r2,-12(fp)
    1f70:	1000071e 	bne	r2,zero,1f90 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1f74:	01800044 	movi	r6,1
    1f78:	01403a04 	movi	r5,232
    1f7c:	e13ffb17 	ldw	r4,-20(fp)
    1f80:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1f84:	01001984 	movi	r4,102
    1f88:	00006840 	call	684 <_Z5delaym>
    1f8c:	00001506 	br	1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1f90:	e0bffd03 	ldbu	r2,-12(fp)
    1f94:	e0fffb17 	ldw	r3,-20(fp)
    1f98:	10800784 	addi	r2,r2,30
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	10800017 	ldw	r2,0(r2)
    1fb0:	10800504 	addi	r2,r2,20
    1fb4:	10c00017 	ldw	r3,0(r2)
    1fb8:	e0bffd03 	ldbu	r2,-12(fp)
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	10800784 	addi	r2,r2,30
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1085883a 	add	r2,r2,r2
    1fcc:	2085883a 	add	r2,r4,r2
    1fd0:	10800017 	ldw	r2,0(r2)
    1fd4:	e13ffe03 	ldbu	r4,-8(fp)
    1fd8:	200b883a 	mov	r5,r4
    1fdc:	1009883a 	mov	r4,r2
    1fe0:	183ee83a 	callr	r3
                }
        }
        return rcode;
    1fe4:	e0bffa43 	ldbu	r2,-23(fp)
}
    1fe8:	e037883a 	mov	sp,fp
    1fec:	dfc00117 	ldw	ra,4(sp)
    1ff0:	df000017 	ldw	fp,0(sp)
    1ff4:	dec00204 	addi	sp,sp,8
    1ff8:	f800283a 	ret

00001ffc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    1ffc:	deffed04 	addi	sp,sp,-76
    2000:	dfc01215 	stw	ra,72(sp)
    2004:	df001115 	stw	fp,68(sp)
    2008:	df001104 	addi	fp,sp,68
    200c:	e13ffc15 	stw	r4,-16(fp)
    2010:	2809883a 	mov	r4,r5
    2014:	3007883a 	mov	r3,r6
    2018:	3805883a 	mov	r2,r7
    201c:	e13ffd05 	stb	r4,-12(fp)
    2020:	e0fffe05 	stb	r3,-8(fp)
    2024:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2028:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    202c:	e0bff684 	addi	r2,fp,-38
    2030:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2034:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2038:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    203c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    2040:	00800204 	movi	r2,8
    2044:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    2048:	e0fffb83 	ldbu	r3,-18(fp)
    204c:	00bfff84 	movi	r2,-2
    2050:	1884703a 	and	r2,r3,r2
    2054:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    2058:	e0fffb83 	ldbu	r3,-18(fp)
    205c:	00bfff44 	movi	r2,-3
    2060:	1884703a 	and	r2,r3,r2
    2064:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    2068:	e0bffb83 	ldbu	r2,-18(fp)
    206c:	108000cc 	andi	r2,r2,3
    2070:	10800f14 	ori	r2,r2,60
    2074:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    2078:	e13ffc17 	ldw	r4,-16(fp)
    207c:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    2080:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    2084:	e0bff417 	ldw	r2,-48(fp)
    2088:	10800017 	ldw	r2,0(r2)
    208c:	10800017 	ldw	r2,0(r2)
    2090:	000b883a 	mov	r5,zero
    2094:	e13ff417 	ldw	r4,-48(fp)
    2098:	103ee83a 	callr	r2
    209c:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20a0:	e0bff217 	ldw	r2,-56(fp)
    20a4:	1000021e 	bne	r2,zero,20b0 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    20a8:	00bff584 	movi	r2,-42
    20ac:	00019206 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    20b0:	e0bff217 	ldw	r2,-56(fp)
    20b4:	10c00003 	ldbu	r3,0(r2)
    20b8:	11000043 	ldbu	r4,1(r2)
    20bc:	2008923a 	slli	r4,r4,8
    20c0:	20c6b03a 	or	r3,r4,r3
    20c4:	11000083 	ldbu	r4,2(r2)
    20c8:	2008943a 	slli	r4,r4,16
    20cc:	20c6b03a 	or	r3,r4,r3
    20d0:	108000c3 	ldbu	r2,3(r2)
    20d4:	1004963a 	slli	r2,r2,24
    20d8:	10c4b03a 	or	r2,r2,r3
    20dc:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    20e0:	e0bff217 	ldw	r2,-56(fp)
    20e4:	e0fffb04 	addi	r3,fp,-20
    20e8:	19803fcc 	andi	r6,r3,255
    20ec:	11000003 	ldbu	r4,0(r2)
    20f0:	2008703a 	and	r4,r4,zero
    20f4:	200b883a 	mov	r5,r4
    20f8:	3009883a 	mov	r4,r6
    20fc:	2908b03a 	or	r4,r5,r4
    2100:	11000005 	stb	r4,0(r2)
    2104:	1808d23a 	srli	r4,r3,8
    2108:	21803fcc 	andi	r6,r4,255
    210c:	11000043 	ldbu	r4,1(r2)
    2110:	2008703a 	and	r4,r4,zero
    2114:	200b883a 	mov	r5,r4
    2118:	3009883a 	mov	r4,r6
    211c:	2908b03a 	or	r4,r5,r4
    2120:	11000045 	stb	r4,1(r2)
    2124:	1808d43a 	srli	r4,r3,16
    2128:	21803fcc 	andi	r6,r4,255
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008703a 	and	r4,r4,zero
    2134:	200b883a 	mov	r5,r4
    2138:	3009883a 	mov	r4,r6
    213c:	2908b03a 	or	r4,r5,r4
    2140:	11000085 	stb	r4,2(r2)
    2144:	180ad63a 	srli	r5,r3,24
    2148:	10c000c3 	ldbu	r3,3(r2)
    214c:	1806703a 	and	r3,r3,zero
    2150:	1809883a 	mov	r4,r3
    2154:	2807883a 	mov	r3,r5
    2158:	20c6b03a 	or	r3,r4,r3
    215c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    2160:	e0bff217 	ldw	r2,-56(fp)
    2164:	e0ffff03 	ldbu	r3,-4(fp)
    2168:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    216c:	00800484 	movi	r2,18
    2170:	10ffffcc 	andi	r3,r2,65535
    2174:	e0bff684 	addi	r2,fp,-38
    2178:	d8800015 	stw	r2,0(sp)
    217c:	180f883a 	mov	r7,r3
    2180:	000d883a 	mov	r6,zero
    2184:	000b883a 	mov	r5,zero
    2188:	e13ffc17 	ldw	r4,-16(fp)
    218c:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    2190:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    2194:	e0bff217 	ldw	r2,-56(fp)
    2198:	e0fff317 	ldw	r3,-52(fp)
    219c:	19403fcc 	andi	r5,r3,255
    21a0:	10c00003 	ldbu	r3,0(r2)
    21a4:	1806703a 	and	r3,r3,zero
    21a8:	1809883a 	mov	r4,r3
    21ac:	2807883a 	mov	r3,r5
    21b0:	20c6b03a 	or	r3,r4,r3
    21b4:	10c00005 	stb	r3,0(r2)
    21b8:	e0fff317 	ldw	r3,-52(fp)
    21bc:	1806d23a 	srli	r3,r3,8
    21c0:	19403fcc 	andi	r5,r3,255
    21c4:	10c00043 	ldbu	r3,1(r2)
    21c8:	1806703a 	and	r3,r3,zero
    21cc:	1809883a 	mov	r4,r3
    21d0:	2807883a 	mov	r3,r5
    21d4:	20c6b03a 	or	r3,r4,r3
    21d8:	10c00045 	stb	r3,1(r2)
    21dc:	e0fff317 	ldw	r3,-52(fp)
    21e0:	1806d43a 	srli	r3,r3,16
    21e4:	19403fcc 	andi	r5,r3,255
    21e8:	10c00083 	ldbu	r3,2(r2)
    21ec:	1806703a 	and	r3,r3,zero
    21f0:	1809883a 	mov	r4,r3
    21f4:	2807883a 	mov	r3,r5
    21f8:	20c6b03a 	or	r3,r4,r3
    21fc:	10c00085 	stb	r3,2(r2)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	180ad63a 	srli	r5,r3,24
    2208:	10c000c3 	ldbu	r3,3(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2220:	e0bff043 	ldbu	r2,-63(fp)
    2224:	10000226 	beq	r2,zero,2230 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
    2228:	e0bff043 	ldbu	r2,-63(fp)
    222c:	00013206 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    2230:	e0bff117 	ldw	r2,-60(fp)
    2234:	10c00203 	ldbu	r3,8(r2)
    2238:	10800243 	ldbu	r2,9(r2)
    223c:	1004923a 	slli	r2,r2,8
    2240:	10c4b03a 	or	r2,r2,r3
    2244:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    2248:	e0bff117 	ldw	r2,-60(fp)
    224c:	10c00283 	ldbu	r3,10(r2)
    2250:	108002c3 	ldbu	r2,11(r2)
    2254:	1004923a 	slli	r2,r2,8
    2258:	10c4b03a 	or	r2,r2,r3
    225c:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    2260:	e0bff117 	ldw	r2,-60(fp)
    2264:	10800103 	ldbu	r2,4(r2)
    2268:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    226c:	e0bff117 	ldw	r2,-60(fp)
    2270:	10800143 	ldbu	r2,5(r2)
    2274:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    2278:	e03ff005 	stb	zero,-64(fp)
    227c:	e0bff003 	ldbu	r2,-64(fp)
    2280:	10800428 	cmpgeui	r2,r2,16
    2284:	1000821e 	bne	r2,zero,2490 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue;// no driver
    2288:	e0bff003 	ldbu	r2,-64(fp)
    228c:	e0fffc17 	ldw	r3,-16(fp)
    2290:	10800784 	addi	r2,r2,30
    2294:	1085883a 	add	r2,r2,r2
    2298:	1085883a 	add	r2,r2,r2
    229c:	1885883a 	add	r2,r3,r2
    22a0:	10800017 	ldw	r2,0(r2)
    22a4:	10007226 	beq	r2,zero,2470 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    22a8:	e0bff003 	ldbu	r2,-64(fp)
    22ac:	e0fffc17 	ldw	r3,-16(fp)
    22b0:	10800784 	addi	r2,r2,30
    22b4:	1085883a 	add	r2,r2,r2
    22b8:	1085883a 	add	r2,r2,r2
    22bc:	1885883a 	add	r2,r3,r2
    22c0:	10800017 	ldw	r2,0(r2)
    22c4:	10800017 	ldw	r2,0(r2)
    22c8:	10800404 	addi	r2,r2,16
    22cc:	10c00017 	ldw	r3,0(r2)
    22d0:	e0bff003 	ldbu	r2,-64(fp)
    22d4:	e13ffc17 	ldw	r4,-16(fp)
    22d8:	10800784 	addi	r2,r2,30
    22dc:	1085883a 	add	r2,r2,r2
    22e0:	1085883a 	add	r2,r2,r2
    22e4:	2085883a 	add	r2,r4,r2
    22e8:	10800017 	ldw	r2,0(r2)
    22ec:	1009883a 	mov	r4,r2
    22f0:	183ee83a 	callr	r3
    22f4:	10803fcc 	andi	r2,r2,255
    22f8:	1004c03a 	cmpne	r2,r2,zero
    22fc:	10803fcc 	andi	r2,r2,255
    2300:	10005d1e 	bne	r2,zero,2478 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
    2304:	e0bff003 	ldbu	r2,-64(fp)
    2308:	e0fffc17 	ldw	r3,-16(fp)
    230c:	10800784 	addi	r2,r2,30
    2310:	1085883a 	add	r2,r2,r2
    2314:	1085883a 	add	r2,r2,r2
    2318:	1885883a 	add	r2,r3,r2
    231c:	10800017 	ldw	r2,0(r2)
    2320:	10800017 	ldw	r2,0(r2)
    2324:	10800804 	addi	r2,r2,32
    2328:	10c00017 	ldw	r3,0(r2)
    232c:	e0bff003 	ldbu	r2,-64(fp)
    2330:	e13ffc17 	ldw	r4,-16(fp)
    2334:	10800784 	addi	r2,r2,30
    2338:	1085883a 	add	r2,r2,r2
    233c:	1085883a 	add	r2,r2,r2
    2340:	2085883a 	add	r2,r4,r2
    2344:	10800017 	ldw	r2,0(r2)
    2348:	e13ff643 	ldbu	r4,-39(fp)
    234c:	200b883a 	mov	r5,r4
    2350:	1009883a 	mov	r4,r2
    2354:	183ee83a 	callr	r3
    2358:	10803fcc 	andi	r2,r2,255
    235c:	10003226 	beq	r2,zero,2428 <_ZN3USB11ConfiguringEhhb+0x42c>
    2360:	e0bff003 	ldbu	r2,-64(fp)
    2364:	e0fffc17 	ldw	r3,-16(fp)
    2368:	10800784 	addi	r2,r2,30
    236c:	1085883a 	add	r2,r2,r2
    2370:	1085883a 	add	r2,r2,r2
    2374:	1885883a 	add	r2,r3,r2
    2378:	10800017 	ldw	r2,0(r2)
    237c:	10800017 	ldw	r2,0(r2)
    2380:	10800604 	addi	r2,r2,24
    2384:	10c00017 	ldw	r3,0(r2)
    2388:	e0bff003 	ldbu	r2,-64(fp)
    238c:	e13ffc17 	ldw	r4,-16(fp)
    2390:	10800784 	addi	r2,r2,30
    2394:	1085883a 	add	r2,r2,r2
    2398:	1085883a 	add	r2,r2,r2
    239c:	2085883a 	add	r2,r4,r2
    23a0:	10800017 	ldw	r2,0(r2)
    23a4:	e13ff50b 	ldhu	r4,-44(fp)
    23a8:	e17ff58b 	ldhu	r5,-42(fp)
    23ac:	280d883a 	mov	r6,r5
    23b0:	200b883a 	mov	r5,r4
    23b4:	1009883a 	mov	r4,r2
    23b8:	183ee83a 	callr	r3
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	1000171e 	bne	r2,zero,2420 <_ZN3USB11ConfiguringEhhb+0x424>
    23c4:	e0bff003 	ldbu	r2,-64(fp)
    23c8:	e0fffc17 	ldw	r3,-16(fp)
    23cc:	10800784 	addi	r2,r2,30
    23d0:	1085883a 	add	r2,r2,r2
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1885883a 	add	r2,r3,r2
    23dc:	10800017 	ldw	r2,0(r2)
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10800704 	addi	r2,r2,28
    23e8:	10c00017 	ldw	r3,0(r2)
    23ec:	e0bff003 	ldbu	r2,-64(fp)
    23f0:	e13ffc17 	ldw	r4,-16(fp)
    23f4:	10800784 	addi	r2,r2,30
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	1085883a 	add	r2,r2,r2
    2400:	2085883a 	add	r2,r4,r2
    2404:	10800017 	ldw	r2,0(r2)
    2408:	e13ff603 	ldbu	r4,-40(fp)
    240c:	200b883a 	mov	r5,r4
    2410:	1009883a 	mov	r4,r2
    2414:	183ee83a 	callr	r3
    2418:	10803fcc 	andi	r2,r2,255
    241c:	10000226 	beq	r2,zero,2428 <_ZN3USB11ConfiguringEhhb+0x42c>
    2420:	00800044 	movi	r2,1
    2424:	00000106 	br	242c <_ZN3USB11ConfiguringEhhb+0x430>
    2428:	0005883a 	mov	r2,zero
    242c:	10803fcc 	andi	r2,r2,255
    2430:	10001226 	beq	r2,zero,247c <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2434:	e0fff003 	ldbu	r3,-64(fp)
    2438:	e13ffd03 	ldbu	r4,-12(fp)
    243c:	e17ffe03 	ldbu	r5,-8(fp)
    2440:	e0bfff03 	ldbu	r2,-4(fp)
    2444:	d8800015 	stw	r2,0(sp)
    2448:	280f883a 	mov	r7,r5
    244c:	200d883a 	mov	r6,r4
    2450:	180b883a 	mov	r5,r3
    2454:	e13ffc17 	ldw	r4,-16(fp)
    2458:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    245c:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
    2460:	e0bff043 	ldbu	r2,-63(fp)
    2464:	10803460 	cmpeqi	r2,r2,209
    2468:	10000826 	beq	r2,zero,248c <_ZN3USB11ConfiguringEhhb+0x490>
    246c:	00000306 	br	247c <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;// no driver
    2470:	0001883a 	nop
    2474:	00000106 	br	247c <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    2478:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    247c:	e0bff003 	ldbu	r2,-64(fp)
    2480:	10800044 	addi	r2,r2,1
    2484:	e0bff005 	stb	r2,-64(fp)
    2488:	003f7c06 	br	227c <__alt_data_end+0xfc00227c>
                if(!devConfig[devConfigIndex]) continue;// no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
    248c:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
    2490:	e0bff003 	ldbu	r2,-64(fp)
    2494:	10800428 	cmpgeui	r2,r2,16
    2498:	1000021e 	bne	r2,zero,24a4 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
    249c:	e0bff043 	ldbu	r2,-63(fp)
    24a0:	00009506 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    24a4:	e03ff005 	stb	zero,-64(fp)
    24a8:	e0bff003 	ldbu	r2,-64(fp)
    24ac:	10800428 	cmpgeui	r2,r2,16
    24b0:	1000871e 	bne	r2,zero,26d0 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
    24b4:	e0bff003 	ldbu	r2,-64(fp)
    24b8:	e0fffc17 	ldw	r3,-16(fp)
    24bc:	10800784 	addi	r2,r2,30
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	1085883a 	add	r2,r2,r2
    24c8:	1885883a 	add	r2,r3,r2
    24cc:	10800017 	ldw	r2,0(r2)
    24d0:	10007626 	beq	r2,zero,26ac <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    24d4:	e0bff003 	ldbu	r2,-64(fp)
    24d8:	e0fffc17 	ldw	r3,-16(fp)
    24dc:	10800784 	addi	r2,r2,30
    24e0:	1085883a 	add	r2,r2,r2
    24e4:	1085883a 	add	r2,r2,r2
    24e8:	1885883a 	add	r2,r3,r2
    24ec:	10800017 	ldw	r2,0(r2)
    24f0:	10800017 	ldw	r2,0(r2)
    24f4:	10800404 	addi	r2,r2,16
    24f8:	10c00017 	ldw	r3,0(r2)
    24fc:	e0bff003 	ldbu	r2,-64(fp)
    2500:	e13ffc17 	ldw	r4,-16(fp)
    2504:	10800784 	addi	r2,r2,30
    2508:	1085883a 	add	r2,r2,r2
    250c:	1085883a 	add	r2,r2,r2
    2510:	2085883a 	add	r2,r4,r2
    2514:	10800017 	ldw	r2,0(r2)
    2518:	1009883a 	mov	r4,r2
    251c:	183ee83a 	callr	r3
    2520:	10803fcc 	andi	r2,r2,255
    2524:	1004c03a 	cmpne	r2,r2,zero
    2528:	10803fcc 	andi	r2,r2,255
    252c:	1000611e 	bne	r2,zero,26b4 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    2530:	e0bff003 	ldbu	r2,-64(fp)
    2534:	e0fffc17 	ldw	r3,-16(fp)
    2538:	10800784 	addi	r2,r2,30
    253c:	1085883a 	add	r2,r2,r2
    2540:	1085883a 	add	r2,r2,r2
    2544:	1885883a 	add	r2,r3,r2
    2548:	10800017 	ldw	r2,0(r2)
    254c:	10800017 	ldw	r2,0(r2)
    2550:	10800804 	addi	r2,r2,32
    2554:	10c00017 	ldw	r3,0(r2)
    2558:	e0bff003 	ldbu	r2,-64(fp)
    255c:	e13ffc17 	ldw	r4,-16(fp)
    2560:	10800784 	addi	r2,r2,30
    2564:	1085883a 	add	r2,r2,r2
    2568:	1085883a 	add	r2,r2,r2
    256c:	2085883a 	add	r2,r4,r2
    2570:	10800017 	ldw	r2,0(r2)
    2574:	e13ff643 	ldbu	r4,-39(fp)
    2578:	200b883a 	mov	r5,r4
    257c:	1009883a 	mov	r4,r2
    2580:	183ee83a 	callr	r3
    2584:	10803fcc 	andi	r2,r2,255
    2588:	10003226 	beq	r2,zero,2654 <_ZN3USB11ConfiguringEhhb+0x658>
    258c:	e0bff003 	ldbu	r2,-64(fp)
    2590:	e0fffc17 	ldw	r3,-16(fp)
    2594:	10800784 	addi	r2,r2,30
    2598:	1085883a 	add	r2,r2,r2
    259c:	1085883a 	add	r2,r2,r2
    25a0:	1885883a 	add	r2,r3,r2
    25a4:	10800017 	ldw	r2,0(r2)
    25a8:	10800017 	ldw	r2,0(r2)
    25ac:	10800604 	addi	r2,r2,24
    25b0:	10c00017 	ldw	r3,0(r2)
    25b4:	e0bff003 	ldbu	r2,-64(fp)
    25b8:	e13ffc17 	ldw	r4,-16(fp)
    25bc:	10800784 	addi	r2,r2,30
    25c0:	1085883a 	add	r2,r2,r2
    25c4:	1085883a 	add	r2,r2,r2
    25c8:	2085883a 	add	r2,r4,r2
    25cc:	10800017 	ldw	r2,0(r2)
    25d0:	e13ff50b 	ldhu	r4,-44(fp)
    25d4:	e17ff58b 	ldhu	r5,-42(fp)
    25d8:	280d883a 	mov	r6,r5
    25dc:	200b883a 	mov	r5,r4
    25e0:	1009883a 	mov	r4,r2
    25e4:	183ee83a 	callr	r3
    25e8:	10803fcc 	andi	r2,r2,255
    25ec:	1000171e 	bne	r2,zero,264c <_ZN3USB11ConfiguringEhhb+0x650>
    25f0:	e0bff003 	ldbu	r2,-64(fp)
    25f4:	e0fffc17 	ldw	r3,-16(fp)
    25f8:	10800784 	addi	r2,r2,30
    25fc:	1085883a 	add	r2,r2,r2
    2600:	1085883a 	add	r2,r2,r2
    2604:	1885883a 	add	r2,r3,r2
    2608:	10800017 	ldw	r2,0(r2)
    260c:	10800017 	ldw	r2,0(r2)
    2610:	10800704 	addi	r2,r2,28
    2614:	10c00017 	ldw	r3,0(r2)
    2618:	e0bff003 	ldbu	r2,-64(fp)
    261c:	e13ffc17 	ldw	r4,-16(fp)
    2620:	10800784 	addi	r2,r2,30
    2624:	1085883a 	add	r2,r2,r2
    2628:	1085883a 	add	r2,r2,r2
    262c:	2085883a 	add	r2,r4,r2
    2630:	10800017 	ldw	r2,0(r2)
    2634:	e13ff603 	ldbu	r4,-40(fp)
    2638:	200b883a 	mov	r5,r4
    263c:	1009883a 	mov	r4,r2
    2640:	183ee83a 	callr	r3
    2644:	10803fcc 	andi	r2,r2,255
    2648:	10000226 	beq	r2,zero,2654 <_ZN3USB11ConfiguringEhhb+0x658>
    264c:	00800044 	movi	r2,1
    2650:	00000106 	br	2658 <_ZN3USB11ConfiguringEhhb+0x65c>
    2654:	0005883a 	mov	r2,zero
    2658:	10803fcc 	andi	r2,r2,255
    265c:	1000171e 	bne	r2,zero,26bc <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2660:	e0fff003 	ldbu	r3,-64(fp)
    2664:	e13ffd03 	ldbu	r4,-12(fp)
    2668:	e17ffe03 	ldbu	r5,-8(fp)
    266c:	e0bfff03 	ldbu	r2,-4(fp)
    2670:	d8800015 	stw	r2,0(sp)
    2674:	280f883a 	mov	r7,r5
    2678:	200d883a 	mov	r6,r4
    267c:	180b883a 	mov	r5,r3
    2680:	e13ffc17 	ldw	r4,-16(fp)
    2684:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    2688:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
    268c:	e0bff043 	ldbu	r2,-63(fp)
    2690:	10803460 	cmpeqi	r2,r2,209
    2694:	10000a1e 	bne	r2,zero,26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
    2698:	e0bff043 	ldbu	r2,-63(fp)
    269c:	10803660 	cmpeqi	r2,r2,217
    26a0:	1000071e 	bne	r2,zero,26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
    26a4:	e0bff043 	ldbu	r2,-63(fp)
    26a8:	00001306 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
                return rcode;
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
    26ac:	0001883a 	nop
    26b0:	00000306 	br	26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    26b4:	0001883a 	nop
    26b8:	00000106 	br	26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    26bc:	0001883a 	nop
        if(devConfigIndex < USB_NUMDEVICES) {
                return rcode;
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    26c0:	e0bff003 	ldbu	r2,-64(fp)
    26c4:	10800044 	addi	r2,r2,1
    26c8:	e0bff005 	stb	r2,-64(fp)
    26cc:	003f7606 	br	24a8 <__alt_data_end+0xfc0024a8>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
    26d0:	e0bffd03 	ldbu	r2,-12(fp)
    26d4:	e0fffe03 	ldbu	r3,-8(fp)
    26d8:	e13fff03 	ldbu	r4,-4(fp)
    26dc:	200f883a 	mov	r7,r4
    26e0:	180d883a 	mov	r6,r3
    26e4:	100b883a 	mov	r5,r2
    26e8:	e13ffc17 	ldw	r4,-16(fp)
    26ec:	0001c0c0 	call	1c0c <_ZN3USB17DefaultAddressingEhhb>
    26f0:	e0bff045 	stb	r2,-63(fp)

        return rcode;
    26f4:	e0bff043 	ldbu	r2,-63(fp)
}
    26f8:	e037883a 	mov	sp,fp
    26fc:	dfc00117 	ldw	ra,4(sp)
    2700:	df000017 	ldw	fp,0(sp)
    2704:	dec00204 	addi	sp,sp,8
    2708:	f800283a 	ret

0000270c <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    270c:	defffb04 	addi	sp,sp,-20
    2710:	dfc00415 	stw	ra,16(sp)
    2714:	df000315 	stw	fp,12(sp)
    2718:	df000304 	addi	fp,sp,12
    271c:	e13ffe15 	stw	r4,-8(fp)
    2720:	2805883a 	mov	r2,r5
    2724:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2728:	e0bfff03 	ldbu	r2,-4(fp)
    272c:	1000021e 	bne	r2,zero,2738 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    2730:	0005883a 	mov	r2,zero
    2734:	00003e06 	br	2830 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2738:	e03ffd05 	stb	zero,-12(fp)
    273c:	e0bffd03 	ldbu	r2,-12(fp)
    2740:	10800428 	cmpgeui	r2,r2,16
    2744:	1000391e 	bne	r2,zero,282c <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2748:	e0bffd03 	ldbu	r2,-12(fp)
    274c:	e0fffe17 	ldw	r3,-8(fp)
    2750:	10800784 	addi	r2,r2,30
    2754:	1085883a 	add	r2,r2,r2
    2758:	1085883a 	add	r2,r2,r2
    275c:	1885883a 	add	r2,r3,r2
    2760:	10800017 	ldw	r2,0(r2)
    2764:	10002c26 	beq	r2,zero,2818 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2768:	e0bffd03 	ldbu	r2,-12(fp)
    276c:	e0fffe17 	ldw	r3,-8(fp)
    2770:	10800784 	addi	r2,r2,30
    2774:	1085883a 	add	r2,r2,r2
    2778:	1085883a 	add	r2,r2,r2
    277c:	1885883a 	add	r2,r3,r2
    2780:	10800017 	ldw	r2,0(r2)
    2784:	10800017 	ldw	r2,0(r2)
    2788:	10800404 	addi	r2,r2,16
    278c:	10c00017 	ldw	r3,0(r2)
    2790:	e0bffd03 	ldbu	r2,-12(fp)
    2794:	e13ffe17 	ldw	r4,-8(fp)
    2798:	10800784 	addi	r2,r2,30
    279c:	1085883a 	add	r2,r2,r2
    27a0:	1085883a 	add	r2,r2,r2
    27a4:	2085883a 	add	r2,r4,r2
    27a8:	10800017 	ldw	r2,0(r2)
    27ac:	1009883a 	mov	r4,r2
    27b0:	183ee83a 	callr	r3
    27b4:	10c03fcc 	andi	r3,r2,255
    27b8:	e0bfff03 	ldbu	r2,-4(fp)
    27bc:	1885003a 	cmpeq	r2,r3,r2
    27c0:	10803fcc 	andi	r2,r2,255
    27c4:	10001526 	beq	r2,zero,281c <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    27c8:	e0bffd03 	ldbu	r2,-12(fp)
    27cc:	e0fffe17 	ldw	r3,-8(fp)
    27d0:	10800784 	addi	r2,r2,30
    27d4:	1085883a 	add	r2,r2,r2
    27d8:	1085883a 	add	r2,r2,r2
    27dc:	1885883a 	add	r2,r3,r2
    27e0:	10800017 	ldw	r2,0(r2)
    27e4:	10800017 	ldw	r2,0(r2)
    27e8:	10800204 	addi	r2,r2,8
    27ec:	10c00017 	ldw	r3,0(r2)
    27f0:	e0bffd03 	ldbu	r2,-12(fp)
    27f4:	e13ffe17 	ldw	r4,-8(fp)
    27f8:	10800784 	addi	r2,r2,30
    27fc:	1085883a 	add	r2,r2,r2
    2800:	1085883a 	add	r2,r2,r2
    2804:	2085883a 	add	r2,r4,r2
    2808:	10800017 	ldw	r2,0(r2)
    280c:	1009883a 	mov	r4,r2
    2810:	183ee83a 	callr	r3
    2814:	00000606 	br	2830 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    2818:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    281c:	e0bffd03 	ldbu	r2,-12(fp)
    2820:	10800044 	addi	r2,r2,1
    2824:	e0bffd05 	stb	r2,-12(fp)
    2828:	003fc406 	br	273c <__alt_data_end+0xfc00273c>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    282c:	0005883a 	mov	r2,zero
        printf("END\n");
}
    2830:	e037883a 	mov	sp,fp
    2834:	dfc00117 	ldw	ra,4(sp)
    2838:	df000017 	ldw	fp,0(sp)
    283c:	dec00204 	addi	sp,sp,8
    2840:	f800283a 	ret

00002844 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2844:	defff204 	addi	sp,sp,-56
    2848:	dfc00d15 	stw	ra,52(sp)
    284c:	df000c15 	stw	fp,48(sp)
    2850:	df000c04 	addi	fp,sp,48
    2854:	e13ffc15 	stw	r4,-16(fp)
    2858:	2809883a 	mov	r4,r5
    285c:	3007883a 	mov	r3,r6
    2860:	3805883a 	mov	r2,r7
    2864:	e13ffd05 	stb	r4,-12(fp)
    2868:	e0fffe05 	stb	r3,-8(fp)
    286c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    2870:	e17ffd03 	ldbu	r5,-12(fp)
    2874:	e1bffe03 	ldbu	r6,-8(fp)
    2878:	e0bfff0b 	ldhu	r2,-4(fp)
    287c:	e0ffff0b 	ldhu	r3,-4(fp)
    2880:	d8000715 	stw	zero,28(sp)
    2884:	e1000217 	ldw	r4,8(fp)
    2888:	d9000615 	stw	r4,24(sp)
    288c:	d8c00515 	stw	r3,20(sp)
    2890:	d8800415 	stw	r2,16(sp)
    2894:	d8000315 	stw	zero,12(sp)
    2898:	00800044 	movi	r2,1
    289c:	d8800215 	stw	r2,8(sp)
    28a0:	d8000115 	stw	zero,4(sp)
    28a4:	00800184 	movi	r2,6
    28a8:	d8800015 	stw	r2,0(sp)
    28ac:	01c02004 	movi	r7,128
    28b0:	e13ffc17 	ldw	r4,-16(fp)
    28b4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    28b8:	e037883a 	mov	sp,fp
    28bc:	dfc00117 	ldw	ra,4(sp)
    28c0:	df000017 	ldw	fp,0(sp)
    28c4:	dec00204 	addi	sp,sp,8
    28c8:	f800283a 	ret

000028cc <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    28cc:	defff104 	addi	sp,sp,-60
    28d0:	dfc00e15 	stw	ra,56(sp)
    28d4:	df000d15 	stw	fp,52(sp)
    28d8:	df000d04 	addi	fp,sp,52
    28dc:	e13ffb15 	stw	r4,-20(fp)
    28e0:	3009883a 	mov	r4,r6
    28e4:	3807883a 	mov	r3,r7
    28e8:	e0800217 	ldw	r2,8(fp)
    28ec:	e17ffc05 	stb	r5,-16(fp)
    28f0:	e13ffd05 	stb	r4,-12(fp)
    28f4:	e0fffe0d 	sth	r3,-8(fp)
    28f8:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    28fc:	e23ffc03 	ldbu	r8,-16(fp)
    2900:	e1bffd03 	ldbu	r6,-12(fp)
    2904:	e0bfff03 	ldbu	r2,-4(fp)
    2908:	e0fffe0b 	ldhu	r3,-8(fp)
    290c:	e13ffe0b 	ldhu	r4,-8(fp)
    2910:	d8000715 	stw	zero,28(sp)
    2914:	e1400317 	ldw	r5,12(fp)
    2918:	d9400615 	stw	r5,24(sp)
    291c:	d9000515 	stw	r4,20(sp)
    2920:	d8c00415 	stw	r3,16(sp)
    2924:	d8000315 	stw	zero,12(sp)
    2928:	00c00084 	movi	r3,2
    292c:	d8c00215 	stw	r3,8(sp)
    2930:	d8800115 	stw	r2,4(sp)
    2934:	00800184 	movi	r2,6
    2938:	d8800015 	stw	r2,0(sp)
    293c:	01c02004 	movi	r7,128
    2940:	400b883a 	mov	r5,r8
    2944:	e13ffb17 	ldw	r4,-20(fp)
    2948:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    294c:	e037883a 	mov	sp,fp
    2950:	dfc00117 	ldw	ra,4(sp)
    2954:	df000017 	ldw	fp,0(sp)
    2958:	dec00204 	addi	sp,sp,8
    295c:	f800283a 	ret

00002960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    2960:	deffdf04 	addi	sp,sp,-132
    2964:	dfc02015 	stw	ra,128(sp)
    2968:	df001f15 	stw	fp,124(sp)
    296c:	df001f04 	addi	fp,sp,124
    2970:	e13ffc15 	stw	r4,-16(fp)
    2974:	2809883a 	mov	r4,r5
    2978:	3007883a 	mov	r3,r6
    297c:	3805883a 	mov	r2,r7
    2980:	e13ffd05 	stb	r4,-12(fp)
    2984:	e0fffe05 	stb	r3,-8(fp)
    2988:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    298c:	00801004 	movi	r2,64
    2990:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    2994:	e0bfec04 	addi	r2,fp,-80
    2998:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    299c:	e13ffd03 	ldbu	r4,-12(fp)
    29a0:	e17ffe03 	ldbu	r5,-8(fp)
    29a4:	e0bfff03 	ldbu	r2,-4(fp)
    29a8:	e0ffec04 	addi	r3,fp,-80
    29ac:	d8c00115 	stw	r3,4(sp)
    29b0:	d8800015 	stw	r2,0(sp)
    29b4:	01c00244 	movi	r7,9
    29b8:	280d883a 	mov	r6,r5
    29bc:	200b883a 	mov	r5,r4
    29c0:	e13ffc17 	ldw	r4,-16(fp)
    29c4:	00028cc0 	call	28cc <_ZN3USB12getConfDescrEhhthPh>
    29c8:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    29cc:	e0bfeb03 	ldbu	r2,-84(fp)
    29d0:	10000226 	beq	r2,zero,29dc <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    29d4:	e0bfeb03 	ldbu	r2,-84(fp)
    29d8:	00001a06 	br	2a44 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    29dc:	e0bfea17 	ldw	r2,-88(fp)
    29e0:	10c00083 	ldbu	r3,2(r2)
    29e4:	108000c3 	ldbu	r2,3(r2)
    29e8:	1004923a 	slli	r2,r2,8
    29ec:	10c4b03a 	or	r2,r2,r3
    29f0:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    29f4:	e17ffd03 	ldbu	r5,-12(fp)
    29f8:	e1bffe03 	ldbu	r6,-8(fp)
    29fc:	e0bfff03 	ldbu	r2,-4(fp)
    2a00:	e0ffeb8b 	ldhu	r3,-82(fp)
    2a04:	e1000217 	ldw	r4,8(fp)
    2a08:	d9000715 	stw	r4,28(sp)
    2a0c:	e13fec04 	addi	r4,fp,-80
    2a10:	d9000615 	stw	r4,24(sp)
    2a14:	01001004 	movi	r4,64
    2a18:	d9000515 	stw	r4,20(sp)
    2a1c:	d8c00415 	stw	r3,16(sp)
    2a20:	d8000315 	stw	zero,12(sp)
    2a24:	00c00084 	movi	r3,2
    2a28:	d8c00215 	stw	r3,8(sp)
    2a2c:	d8800115 	stw	r2,4(sp)
    2a30:	00800184 	movi	r2,6
    2a34:	d8800015 	stw	r2,0(sp)
    2a38:	01c02004 	movi	r7,128
    2a3c:	e13ffc17 	ldw	r4,-16(fp)
    2a40:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2a44:	e037883a 	mov	sp,fp
    2a48:	dfc00117 	ldw	ra,4(sp)
    2a4c:	df000017 	ldw	fp,0(sp)
    2a50:	dec00204 	addi	sp,sp,8
    2a54:	f800283a 	ret

00002a58 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2a58:	defff004 	addi	sp,sp,-64
    2a5c:	dfc00f15 	stw	ra,60(sp)
    2a60:	df000e15 	stw	fp,56(sp)
    2a64:	df000e04 	addi	fp,sp,56
    2a68:	e13ffa15 	stw	r4,-24(fp)
    2a6c:	2811883a 	mov	r8,r5
    2a70:	300b883a 	mov	r5,r6
    2a74:	3809883a 	mov	r4,r7
    2a78:	e0c00217 	ldw	r3,8(fp)
    2a7c:	e0800317 	ldw	r2,12(fp)
    2a80:	e23ffb05 	stb	r8,-20(fp)
    2a84:	e17ffc05 	stb	r5,-16(fp)
    2a88:	e13ffd0d 	sth	r4,-12(fp)
    2a8c:	e0fffe05 	stb	r3,-8(fp)
    2a90:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2a94:	e23ffb03 	ldbu	r8,-20(fp)
    2a98:	e27ffc03 	ldbu	r9,-16(fp)
    2a9c:	e0bffe03 	ldbu	r2,-8(fp)
    2aa0:	e0ffff0b 	ldhu	r3,-4(fp)
    2aa4:	e13ffd0b 	ldhu	r4,-12(fp)
    2aa8:	e17ffd0b 	ldhu	r5,-12(fp)
    2aac:	d8000715 	stw	zero,28(sp)
    2ab0:	e1800417 	ldw	r6,16(fp)
    2ab4:	d9800615 	stw	r6,24(sp)
    2ab8:	d9400515 	stw	r5,20(sp)
    2abc:	d9000415 	stw	r4,16(sp)
    2ac0:	d8c00315 	stw	r3,12(sp)
    2ac4:	00c000c4 	movi	r3,3
    2ac8:	d8c00215 	stw	r3,8(sp)
    2acc:	d8800115 	stw	r2,4(sp)
    2ad0:	00800184 	movi	r2,6
    2ad4:	d8800015 	stw	r2,0(sp)
    2ad8:	01c02004 	movi	r7,128
    2adc:	480d883a 	mov	r6,r9
    2ae0:	400b883a 	mov	r5,r8
    2ae4:	e13ffa17 	ldw	r4,-24(fp)
    2ae8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2aec:	e037883a 	mov	sp,fp
    2af0:	dfc00117 	ldw	ra,4(sp)
    2af4:	df000017 	ldw	fp,0(sp)
    2af8:	dec00204 	addi	sp,sp,8
    2afc:	f800283a 	ret

00002b00 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    2b00:	defff104 	addi	sp,sp,-60
    2b04:	dfc00e15 	stw	ra,56(sp)
    2b08:	df000d15 	stw	fp,52(sp)
    2b0c:	df000d04 	addi	fp,sp,52
    2b10:	e13ffc15 	stw	r4,-16(fp)
    2b14:	2809883a 	mov	r4,r5
    2b18:	3007883a 	mov	r3,r6
    2b1c:	3805883a 	mov	r2,r7
    2b20:	e13ffd05 	stb	r4,-12(fp)
    2b24:	e0fffe05 	stb	r3,-8(fp)
    2b28:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2b2c:	e0fffd03 	ldbu	r3,-12(fp)
    2b30:	e13ffe03 	ldbu	r4,-8(fp)
    2b34:	e0bfff03 	ldbu	r2,-4(fp)
    2b38:	d8000715 	stw	zero,28(sp)
    2b3c:	d8000615 	stw	zero,24(sp)
    2b40:	d8000515 	stw	zero,20(sp)
    2b44:	d8000415 	stw	zero,16(sp)
    2b48:	d8000315 	stw	zero,12(sp)
    2b4c:	d8000215 	stw	zero,8(sp)
    2b50:	d8800115 	stw	r2,4(sp)
    2b54:	00800144 	movi	r2,5
    2b58:	d8800015 	stw	r2,0(sp)
    2b5c:	000f883a 	mov	r7,zero
    2b60:	200d883a 	mov	r6,r4
    2b64:	180b883a 	mov	r5,r3
    2b68:	e13ffc17 	ldw	r4,-16(fp)
    2b6c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    2b70:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2b74:	01004b04 	movi	r4,300
    2b78:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2b7c:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    2b80:	e037883a 	mov	sp,fp
    2b84:	dfc00117 	ldw	ra,4(sp)
    2b88:	df000017 	ldw	fp,0(sp)
    2b8c:	dec00204 	addi	sp,sp,8
    2b90:	f800283a 	ret

00002b94 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2b94:	defff204 	addi	sp,sp,-56
    2b98:	dfc00d15 	stw	ra,52(sp)
    2b9c:	df000c15 	stw	fp,48(sp)
    2ba0:	df000c04 	addi	fp,sp,48
    2ba4:	e13ffc15 	stw	r4,-16(fp)
    2ba8:	2809883a 	mov	r4,r5
    2bac:	3007883a 	mov	r3,r6
    2bb0:	3805883a 	mov	r2,r7
    2bb4:	e13ffd05 	stb	r4,-12(fp)
    2bb8:	e0fffe05 	stb	r3,-8(fp)
    2bbc:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    2bc0:	e0fffd03 	ldbu	r3,-12(fp)
    2bc4:	e13ffe03 	ldbu	r4,-8(fp)
    2bc8:	e0bfff03 	ldbu	r2,-4(fp)
    2bcc:	d8000715 	stw	zero,28(sp)
    2bd0:	d8000615 	stw	zero,24(sp)
    2bd4:	d8000515 	stw	zero,20(sp)
    2bd8:	d8000415 	stw	zero,16(sp)
    2bdc:	d8000315 	stw	zero,12(sp)
    2be0:	d8000215 	stw	zero,8(sp)
    2be4:	d8800115 	stw	r2,4(sp)
    2be8:	00800244 	movi	r2,9
    2bec:	d8800015 	stw	r2,0(sp)
    2bf0:	000f883a 	mov	r7,zero
    2bf4:	200d883a 	mov	r6,r4
    2bf8:	180b883a 	mov	r5,r3
    2bfc:	e13ffc17 	ldw	r4,-16(fp)
    2c00:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2c04:	e037883a 	mov	sp,fp
    2c08:	dfc00117 	ldw	ra,4(sp)
    2c0c:	df000017 	ldw	fp,0(sp)
    2c10:	dec00204 	addi	sp,sp,8
    2c14:	f800283a 	ret

00002c18 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2c18:	defffe04 	addi	sp,sp,-8
    2c1c:	df000115 	stw	fp,4(sp)
    2c20:	df000104 	addi	fp,sp,4
    2c24:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2c28:	e0bfff17 	ldw	r2,-4(fp)
        };
    2c2c:	e037883a 	mov	sp,fp
    2c30:	df000017 	ldw	fp,0(sp)
    2c34:	dec00104 	addi	sp,sp,4
    2c38:	f800283a 	ret

00002c3c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2c3c:	defffe04 	addi	sp,sp,-8
    2c40:	df000115 	stw	fp,4(sp)
    2c44:	df000104 	addi	fp,sp,4
    2c48:	e13fff15 	stw	r4,-4(fp)
    2c4c:	008000b4 	movhi	r2,2
    2c50:	1092f404 	addi	r2,r2,19408
    2c54:	e0ffff17 	ldw	r3,-4(fp)
    2c58:	18800015 	stw	r2,0(r3)
    2c5c:	0001883a 	nop
    2c60:	e037883a 	mov	sp,fp
    2c64:	df000017 	ldw	fp,0(sp)
    2c68:	dec00104 	addi	sp,sp,4
    2c6c:	f800283a 	ret

00002c70 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    2c70:	defffd04 	addi	sp,sp,-12
    2c74:	dfc00215 	stw	ra,8(sp)
    2c78:	df000115 	stw	fp,4(sp)
    2c7c:	df000104 	addi	fp,sp,4
    2c80:	e13fff15 	stw	r4,-4(fp)
    2c84:	e0bfff17 	ldw	r2,-4(fp)
    2c88:	1009883a 	mov	r4,r2
    2c8c:	0002c3c0 	call	2c3c <_ZN11AddressPoolC1Ev>
    2c90:	008000b4 	movhi	r2,2
    2c94:	1092ef04 	addi	r2,r2,19388
    2c98:	e0ffff17 	ldw	r3,-4(fp)
    2c9c:	18800015 	stw	r2,0(r3)
    2ca0:	e0bfff17 	ldw	r2,-4(fp)
    2ca4:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    2ca8:	000b883a 	mov	r5,zero
    2cac:	e13fff17 	ldw	r4,-4(fp)
    2cb0:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    2cb4:	e0bfff17 	ldw	r2,-4(fp)
    2cb8:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    2cbc:	e0bfff17 	ldw	r2,-4(fp)
    2cc0:	10c00104 	addi	r3,r2,4
    2cc4:	e0bfff17 	ldw	r2,-4(fp)
    2cc8:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    2ccc:	e0bfff17 	ldw	r2,-4(fp)
    2cd0:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    2cd4:	e0bfff17 	ldw	r2,-4(fp)
    2cd8:	00c00204 	movi	r3,8
    2cdc:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    2ce0:	e0bfff17 	ldw	r2,-4(fp)
    2ce4:	11000183 	ldbu	r4,6(r2)
    2ce8:	00ffff84 	movi	r3,-2
    2cec:	20c6703a 	and	r3,r4,r3
    2cf0:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    2cf4:	e0bfff17 	ldw	r2,-4(fp)
    2cf8:	11000183 	ldbu	r4,6(r2)
    2cfc:	00ffff44 	movi	r3,-3
    2d00:	20c6703a 	and	r3,r4,r3
    2d04:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2d08:	e0bfff17 	ldw	r2,-4(fp)
    2d0c:	10c00183 	ldbu	r3,6(r2)
    2d10:	18c000cc 	andi	r3,r3,3
    2d14:	18c00f14 	ori	r3,r3,60
    2d18:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2d1c:	e13fff17 	ldw	r4,-4(fp)
    2d20:	00032040 	call	3204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2d24:	0001883a 	nop
    2d28:	e037883a 	mov	sp,fp
    2d2c:	dfc00117 	ldw	ra,4(sp)
    2d30:	df000017 	ldw	fp,0(sp)
    2d34:	dec00204 	addi	sp,sp,8
    2d38:	f800283a 	ret

00002d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2d3c:	defffa04 	addi	sp,sp,-24
    2d40:	dfc00515 	stw	ra,20(sp)
    2d44:	df000415 	stw	fp,16(sp)
    2d48:	dc000315 	stw	r16,12(sp)
    2d4c:	df000404 	addi	fp,sp,16
    2d50:	e13ffd15 	stw	r4,-12(fp)
    2d54:	2805883a 	mov	r2,r5
    2d58:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2d5c:	e0bffe03 	ldbu	r2,-8(fp)
    2d60:	1000031e 	bne	r2,zero,2d70 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2d64:	e0bffd17 	ldw	r2,-12(fp)
    2d68:	10800204 	addi	r2,r2,8
    2d6c:	00001006 	br	2db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    2d70:	e0bffe03 	ldbu	r2,-8(fp)
    2d74:	100b883a 	mov	r5,r2
    2d78:	e13ffd17 	ldw	r4,-12(fp)
    2d7c:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2d80:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2d84:	e0bffc03 	ldbu	r2,-16(fp)
    2d88:	10000826 	beq	r2,zero,2dac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2d8c:	e0bffd17 	ldw	r2,-12(fp)
    2d90:	14000204 	addi	r16,r2,8
    2d94:	e0bffc03 	ldbu	r2,-16(fp)
    2d98:	014001c4 	movi	r5,7
    2d9c:	1009883a 	mov	r4,r2
    2da0:	000d8b80 	call	d8b8 <__mulsi3>
    2da4:	8085883a 	add	r2,r16,r2
    2da8:	00000106 	br	2db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    2dac:	0005883a 	mov	r2,zero
        };
    2db0:	e6ffff04 	addi	sp,fp,-4
    2db4:	dfc00217 	ldw	ra,8(sp)
    2db8:	df000117 	ldw	fp,4(sp)
    2dbc:	dc000017 	ldw	r16,0(sp)
    2dc0:	dec00304 	addi	sp,sp,12
    2dc4:	f800283a 	ret

00002dc8 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    2dc8:	defffd04 	addi	sp,sp,-12
    2dcc:	df000215 	stw	fp,8(sp)
    2dd0:	df000204 	addi	fp,sp,8
    2dd4:	2005883a 	mov	r2,r4
    2dd8:	e17fff15 	stw	r5,-4(fp)
    2ddc:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    2de0:	0001883a 	nop
    2de4:	e037883a 	mov	sp,fp
    2de8:	df000017 	ldw	fp,0(sp)
    2dec:	dec00104 	addi	sp,sp,4
    2df0:	f800283a 	ret

00002df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    2df4:	defff804 	addi	sp,sp,-32
    2df8:	dfc00715 	stw	ra,28(sp)
    2dfc:	df000615 	stw	fp,24(sp)
    2e00:	dc000515 	stw	r16,20(sp)
    2e04:	df000604 	addi	fp,sp,24
    2e08:	e13ffb15 	stw	r4,-20(fp)
    2e0c:	2809883a 	mov	r4,r5
    2e10:	3007883a 	mov	r3,r6
    2e14:	3805883a 	mov	r2,r7
    2e18:	e13ffc05 	stb	r4,-16(fp)
    2e1c:	e0fffd05 	stb	r3,-12(fp)
    2e20:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2e24:	e0bffc03 	ldbu	r2,-16(fp)
    2e28:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2e2c:	e0fffa43 	ldbu	r3,-23(fp)
    2e30:	00bfe004 	movi	r2,-128
    2e34:	1884703a 	and	r2,r3,r2
    2e38:	10803fcc 	andi	r2,r2,255
    2e3c:	1000031e 	bne	r2,zero,2e4c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2e40:	e0bffe03 	ldbu	r2,-8(fp)
    2e44:	10800230 	cmpltui	r2,r2,8
    2e48:	1000021e 	bne	r2,zero,2e54 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2e4c:	0005883a 	mov	r2,zero
    2e50:	00007a06 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2e54:	e0bffd03 	ldbu	r2,-12(fp)
    2e58:	10000726 	beq	r2,zero,2e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2e5c:	e0bffb17 	ldw	r2,-20(fp)
    2e60:	108001c3 	ldbu	r2,7(r2)
    2e64:	10803fcc 	andi	r2,r2,255
    2e68:	108001d8 	cmpnei	r2,r2,7
    2e6c:	1000021e 	bne	r2,zero,2e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2e70:	0005883a 	mov	r2,zero
    2e74:	00007106 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2e78:	000b883a 	mov	r5,zero
    2e7c:	e13ffb17 	ldw	r4,-20(fp)
    2e80:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2e84:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2e88:	e0bffa03 	ldbu	r2,-24(fp)
    2e8c:	1000021e 	bne	r2,zero,2e98 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2e90:	0005883a 	mov	r2,zero
    2e94:	00006906 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2e98:	e0bffa43 	ldbu	r2,-23(fp)
    2e9c:	10803fcc 	andi	r2,r2,255
    2ea0:	1000241e 	bne	r2,zero,2f34 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2ea4:	e0bffd03 	ldbu	r2,-12(fp)
    2ea8:	10001026 	beq	r2,zero,2eec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2eac:	e0bffa03 	ldbu	r2,-24(fp)
    2eb0:	e43ffb17 	ldw	r16,-20(fp)
    2eb4:	014001c4 	movi	r5,7
    2eb8:	1009883a 	mov	r4,r2
    2ebc:	000d8b80 	call	d8b8 <__mulsi3>
    2ec0:	8085883a 	add	r2,r16,r2
    2ec4:	10800304 	addi	r2,r2,12
    2ec8:	00c01044 	movi	r3,65
    2ecc:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2ed0:	e0bffb17 	ldw	r2,-20(fp)
    2ed4:	108001c3 	ldbu	r2,7(r2)
    2ed8:	10800044 	addi	r2,r2,1
    2edc:	1007883a 	mov	r3,r2
    2ee0:	e0bffb17 	ldw	r2,-20(fp)
    2ee4:	10c001c5 	stb	r3,7(r2)
    2ee8:	00000906 	br	2f10 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2eec:	e0bffa03 	ldbu	r2,-24(fp)
    2ef0:	e43ffb17 	ldw	r16,-20(fp)
    2ef4:	014001c4 	movi	r5,7
    2ef8:	1009883a 	mov	r4,r2
    2efc:	000d8b80 	call	d8b8 <__mulsi3>
    2f00:	8085883a 	add	r2,r16,r2
    2f04:	10800304 	addi	r2,r2,12
    2f08:	00c00044 	movi	r3,1
    2f0c:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2f10:	e0bffa03 	ldbu	r2,-24(fp)
    2f14:	e43ffb17 	ldw	r16,-20(fp)
    2f18:	014001c4 	movi	r5,7
    2f1c:	1009883a 	mov	r4,r2
    2f20:	000d8b80 	call	d8b8 <__mulsi3>
    2f24:	8085883a 	add	r2,r16,r2
    2f28:	10800304 	addi	r2,r2,12
    2f2c:	10800003 	ldbu	r2,0(r2)
    2f30:	00004206 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2f34:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2f38:	e0bffa43 	ldbu	r2,-23(fp)
    2f3c:	108001cc 	andi	r2,r2,7
    2f40:	108001cc 	andi	r2,r2,7
    2f44:	100890fa 	slli	r4,r2,3
    2f48:	e0fffa83 	ldbu	r3,-22(fp)
    2f4c:	00bff1c4 	movi	r2,-57
    2f50:	1884703a 	and	r2,r3,r2
    2f54:	1007883a 	mov	r3,r2
    2f58:	2005883a 	mov	r2,r4
    2f5c:	1884b03a 	or	r2,r3,r2
    2f60:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2f64:	e0bffd03 	ldbu	r2,-12(fp)
    2f68:	10001526 	beq	r2,zero,2fc0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2f6c:	e0bffa83 	ldbu	r2,-22(fp)
    2f70:	10801014 	ori	r2,r2,64
    2f74:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2f78:	e0bffb17 	ldw	r2,-20(fp)
    2f7c:	108001c3 	ldbu	r2,7(r2)
    2f80:	10800044 	addi	r2,r2,1
    2f84:	1007883a 	mov	r3,r2
    2f88:	e0bffb17 	ldw	r2,-20(fp)
    2f8c:	10c001c5 	stb	r3,7(r2)
    2f90:	e0bffb17 	ldw	r2,-20(fp)
    2f94:	108001c3 	ldbu	r2,7(r2)
    2f98:	108001cc 	andi	r2,r2,7
    2f9c:	110001cc 	andi	r4,r2,7
    2fa0:	e0fffa83 	ldbu	r3,-22(fp)
    2fa4:	00bffe04 	movi	r2,-8
    2fa8:	1884703a 	and	r2,r3,r2
    2fac:	1007883a 	mov	r3,r2
    2fb0:	2005883a 	mov	r2,r4
    2fb4:	1884b03a 	or	r2,r3,r2
    2fb8:	e0bffa85 	stb	r2,-22(fp)
    2fbc:	00000e06 	br	2ff8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    2fc0:	e0fffa83 	ldbu	r3,-22(fp)
    2fc4:	00bfefc4 	movi	r2,-65
    2fc8:	1884703a 	and	r2,r3,r2
    2fcc:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    2fd0:	e0bffe03 	ldbu	r2,-8(fp)
    2fd4:	108001cc 	andi	r2,r2,7
    2fd8:	110001cc 	andi	r4,r2,7
    2fdc:	e0fffa83 	ldbu	r3,-22(fp)
    2fe0:	00bffe04 	movi	r2,-8
    2fe4:	1884703a 	and	r2,r3,r2
    2fe8:	1007883a 	mov	r3,r2
    2fec:	2005883a 	mov	r2,r4
    2ff0:	1884b03a 	or	r2,r3,r2
    2ff4:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    2ff8:	e0bffa03 	ldbu	r2,-24(fp)
    2ffc:	e43ffb17 	ldw	r16,-20(fp)
    3000:	014001c4 	movi	r5,7
    3004:	1009883a 	mov	r4,r2
    3008:	000d8b80 	call	d8b8 <__mulsi3>
    300c:	8085883a 	add	r2,r16,r2
    3010:	10800304 	addi	r2,r2,12
    3014:	e0fffa83 	ldbu	r3,-22(fp)
    3018:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    301c:	e0bffa03 	ldbu	r2,-24(fp)
    3020:	e43ffb17 	ldw	r16,-20(fp)
    3024:	014001c4 	movi	r5,7
    3028:	1009883a 	mov	r4,r2
    302c:	000d8b80 	call	d8b8 <__mulsi3>
    3030:	8085883a 	add	r2,r16,r2
    3034:	10800304 	addi	r2,r2,12
    3038:	10800003 	ldbu	r2,0(r2)
        };
    303c:	e6ffff04 	addi	sp,fp,-4
    3040:	dfc00217 	ldw	ra,8(sp)
    3044:	df000117 	ldw	fp,4(sp)
    3048:	dc000017 	ldw	r16,0(sp)
    304c:	dec00304 	addi	sp,sp,12
    3050:	f800283a 	ret

00003054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    3054:	defffb04 	addi	sp,sp,-20
    3058:	dfc00415 	stw	ra,16(sp)
    305c:	df000315 	stw	fp,12(sp)
    3060:	df000304 	addi	fp,sp,12
    3064:	e13ffe15 	stw	r4,-8(fp)
    3068:	2805883a 	mov	r2,r5
    306c:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    3070:	e0bfff03 	ldbu	r2,-4(fp)
    3074:	10801058 	cmpnei	r2,r2,65
    3078:	1000031e 	bne	r2,zero,3088 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    307c:	e13ffe17 	ldw	r4,-8(fp)
    3080:	00032040 	call	3204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    3084:	00000906 	br	30ac <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    3088:	e0bfff03 	ldbu	r2,-4(fp)
    308c:	100b883a 	mov	r5,r2
    3090:	e13ffe17 	ldw	r4,-8(fp)
    3094:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    3098:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    309c:	e0bffd03 	ldbu	r2,-12(fp)
    30a0:	100b883a 	mov	r5,r2
    30a4:	e13ffe17 	ldw	r4,-8(fp)
    30a8:	00033000 	call	3300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    30ac:	e037883a 	mov	sp,fp
    30b0:	dfc00117 	ldw	ra,4(sp)
    30b4:	df000017 	ldw	fp,0(sp)
    30b8:	dec00204 	addi	sp,sp,8
    30bc:	f800283a 	ret

000030c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    30c0:	defffa04 	addi	sp,sp,-24
    30c4:	dfc00515 	stw	ra,20(sp)
    30c8:	df000415 	stw	fp,16(sp)
    30cc:	dc400315 	stw	r17,12(sp)
    30d0:	dc000215 	stw	r16,8(sp)
    30d4:	df000404 	addi	fp,sp,16
    30d8:	e13ffc15 	stw	r4,-16(fp)
    30dc:	2805883a 	mov	r2,r5
    30e0:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    30e4:	e0bffd03 	ldbu	r2,-12(fp)
    30e8:	e43ffc17 	ldw	r16,-16(fp)
    30ec:	014001c4 	movi	r5,7
    30f0:	1009883a 	mov	r4,r2
    30f4:	000d8b80 	call	d8b8 <__mulsi3>
    30f8:	8085883a 	add	r2,r16,r2
    30fc:	10800304 	addi	r2,r2,12
    3100:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    3104:	e0bffd03 	ldbu	r2,-12(fp)
    3108:	e43ffc17 	ldw	r16,-16(fp)
    310c:	014001c4 	movi	r5,7
    3110:	1009883a 	mov	r4,r2
    3114:	000d8b80 	call	d8b8 <__mulsi3>
    3118:	8085883a 	add	r2,r16,r2
    311c:	10800344 	addi	r2,r2,13
    3120:	00c00044 	movi	r3,1
    3124:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    3128:	e0bffd03 	ldbu	r2,-12(fp)
    312c:	e43ffc17 	ldw	r16,-16(fp)
    3130:	014001c4 	movi	r5,7
    3134:	1009883a 	mov	r4,r2
    3138:	000d8b80 	call	d8b8 <__mulsi3>
    313c:	8085883a 	add	r2,r16,r2
    3140:	10800384 	addi	r2,r2,14
    3144:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    3148:	e0fffd03 	ldbu	r3,-12(fp)
    314c:	e0bffc17 	ldw	r2,-16(fp)
    3150:	14000104 	addi	r16,r2,4
    3154:	e47ffc17 	ldw	r17,-16(fp)
    3158:	014001c4 	movi	r5,7
    315c:	1809883a 	mov	r4,r3
    3160:	000d8b80 	call	d8b8 <__mulsi3>
    3164:	8885883a 	add	r2,r17,r2
    3168:	10800204 	addi	r2,r2,8
    316c:	81403fcc 	andi	r5,r16,255
    3170:	10c00003 	ldbu	r3,0(r2)
    3174:	1806703a 	and	r3,r3,zero
    3178:	1809883a 	mov	r4,r3
    317c:	2807883a 	mov	r3,r5
    3180:	20c6b03a 	or	r3,r4,r3
    3184:	10c00005 	stb	r3,0(r2)
    3188:	8006d23a 	srli	r3,r16,8
    318c:	19403fcc 	andi	r5,r3,255
    3190:	10c00043 	ldbu	r3,1(r2)
    3194:	1806703a 	and	r3,r3,zero
    3198:	1809883a 	mov	r4,r3
    319c:	2807883a 	mov	r3,r5
    31a0:	20c6b03a 	or	r3,r4,r3
    31a4:	10c00045 	stb	r3,1(r2)
    31a8:	8006d43a 	srli	r3,r16,16
    31ac:	19403fcc 	andi	r5,r3,255
    31b0:	10c00083 	ldbu	r3,2(r2)
    31b4:	1806703a 	and	r3,r3,zero
    31b8:	1809883a 	mov	r4,r3
    31bc:	2807883a 	mov	r3,r5
    31c0:	20c6b03a 	or	r3,r4,r3
    31c4:	10c00085 	stb	r3,2(r2)
    31c8:	800ad63a 	srli	r5,r16,24
    31cc:	10c000c3 	ldbu	r3,3(r2)
    31d0:	1806703a 	and	r3,r3,zero
    31d4:	1809883a 	mov	r4,r3
    31d8:	2807883a 	mov	r3,r5
    31dc:	20c6b03a 	or	r3,r4,r3
    31e0:	10c000c5 	stb	r3,3(r2)
        };
    31e4:	0001883a 	nop
    31e8:	e6fffe04 	addi	sp,fp,-8
    31ec:	dfc00317 	ldw	ra,12(sp)
    31f0:	df000217 	ldw	fp,8(sp)
    31f4:	dc400117 	ldw	r17,4(sp)
    31f8:	dc000017 	ldw	r16,0(sp)
    31fc:	dec00404 	addi	sp,sp,16
    3200:	f800283a 	ret

00003204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    3204:	defffc04 	addi	sp,sp,-16
    3208:	dfc00315 	stw	ra,12(sp)
    320c:	df000215 	stw	fp,8(sp)
    3210:	df000204 	addi	fp,sp,8
    3214:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    3218:	00800044 	movi	r2,1
    321c:	e0bffe05 	stb	r2,-8(fp)
    3220:	e0bffe03 	ldbu	r2,-8(fp)
    3224:	10800428 	cmpgeui	r2,r2,16
    3228:	1000081e 	bne	r2,zero,324c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    322c:	e0bffe03 	ldbu	r2,-8(fp)
    3230:	100b883a 	mov	r5,r2
    3234:	e13fff17 	ldw	r4,-4(fp)
    3238:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    323c:	e0bffe03 	ldbu	r2,-8(fp)
    3240:	10800044 	addi	r2,r2,1
    3244:	e0bffe05 	stb	r2,-8(fp)
    3248:	003ff506 	br	3220 <__alt_data_end+0xfc003220>
                        InitEntry(i);

                hubCounter = 0;
    324c:	e0bfff17 	ldw	r2,-4(fp)
    3250:	100001c5 	stb	zero,7(r2)
        };
    3254:	0001883a 	nop
    3258:	e037883a 	mov	sp,fp
    325c:	dfc00117 	ldw	ra,4(sp)
    3260:	df000017 	ldw	fp,0(sp)
    3264:	dec00204 	addi	sp,sp,8
    3268:	f800283a 	ret

0000326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    326c:	defffa04 	addi	sp,sp,-24
    3270:	dfc00515 	stw	ra,20(sp)
    3274:	df000415 	stw	fp,16(sp)
    3278:	dc000315 	stw	r16,12(sp)
    327c:	df000404 	addi	fp,sp,16
    3280:	e13ffd15 	stw	r4,-12(fp)
    3284:	2805883a 	mov	r2,r5
    3288:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    328c:	00800044 	movi	r2,1
    3290:	e0bffc05 	stb	r2,-16(fp)
    3294:	e0bffc03 	ldbu	r2,-16(fp)
    3298:	10800428 	cmpgeui	r2,r2,16
    329c:	1000111e 	bne	r2,zero,32e4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    32a0:	e0bffc03 	ldbu	r2,-16(fp)
    32a4:	e43ffd17 	ldw	r16,-12(fp)
    32a8:	014001c4 	movi	r5,7
    32ac:	1009883a 	mov	r4,r2
    32b0:	000d8b80 	call	d8b8 <__mulsi3>
    32b4:	8085883a 	add	r2,r16,r2
    32b8:	10800304 	addi	r2,r2,12
    32bc:	10800003 	ldbu	r2,0(r2)
    32c0:	10c03fcc 	andi	r3,r2,255
    32c4:	e0bffe03 	ldbu	r2,-8(fp)
    32c8:	1880021e 	bne	r3,r2,32d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    32cc:	e0bffc03 	ldbu	r2,-16(fp)
    32d0:	00000506 	br	32e8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    32d4:	e0bffc03 	ldbu	r2,-16(fp)
    32d8:	10800044 	addi	r2,r2,1
    32dc:	e0bffc05 	stb	r2,-16(fp)
    32e0:	003fec06 	br	3294 <__alt_data_end+0xfc003294>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    32e4:	0005883a 	mov	r2,zero
        };
    32e8:	e6ffff04 	addi	sp,fp,-4
    32ec:	dfc00217 	ldw	ra,8(sp)
    32f0:	df000117 	ldw	fp,4(sp)
    32f4:	dc000017 	ldw	r16,0(sp)
    32f8:	dec00304 	addi	sp,sp,12
    32fc:	f800283a 	ret

00003300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    3300:	defffa04 	addi	sp,sp,-24
    3304:	dfc00515 	stw	ra,20(sp)
    3308:	df000415 	stw	fp,16(sp)
    330c:	dc000315 	stw	r16,12(sp)
    3310:	df000404 	addi	fp,sp,16
    3314:	e13ffd15 	stw	r4,-12(fp)
    3318:	2805883a 	mov	r2,r5
    331c:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    3320:	e0bffe03 	ldbu	r2,-8(fp)
    3324:	10003026 	beq	r2,zero,33e8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    3328:	e0bffe03 	ldbu	r2,-8(fp)
    332c:	e43ffd17 	ldw	r16,-12(fp)
    3330:	014001c4 	movi	r5,7
    3334:	1009883a 	mov	r4,r2
    3338:	000d8b80 	call	d8b8 <__mulsi3>
    333c:	8085883a 	add	r2,r16,r2
    3340:	10800304 	addi	r2,r2,12
    3344:	10800003 	ldbu	r2,0(r2)
    3348:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    334c:	e0bffc43 	ldbu	r2,-15(fp)
    3350:	1080100c 	andi	r2,r2,64
    3354:	10803fcc 	andi	r2,r2,255
    3358:	10001e26 	beq	r2,zero,33d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    335c:	00800044 	movi	r2,1
    3360:	e0bffc05 	stb	r2,-16(fp)
    3364:	e0bffc03 	ldbu	r2,-16(fp)
    3368:	100d883a 	mov	r6,r2
    336c:	e17ffc43 	ldbu	r5,-15(fp)
    3370:	e13ffd17 	ldw	r4,-12(fp)
    3374:	00034040 	call	3404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    3378:	e0bffc05 	stb	r2,-16(fp)
    337c:	e0bffc03 	ldbu	r2,-16(fp)
    3380:	1004c03a 	cmpne	r2,r2,zero
    3384:	10803fcc 	andi	r2,r2,255
    3388:	10000526 	beq	r2,zero,33a0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    338c:	e0bffc03 	ldbu	r2,-16(fp)
    3390:	100b883a 	mov	r5,r2
    3394:	e13ffd17 	ldw	r4,-12(fp)
    3398:	00033000 	call	3300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    339c:	003ff106 	br	3364 <__alt_data_end+0xfc003364>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    33a0:	e0bffd17 	ldw	r2,-12(fp)
    33a4:	10c001c3 	ldbu	r3,7(r2)
    33a8:	e0bffc43 	ldbu	r2,-15(fp)
    33ac:	108001cc 	andi	r2,r2,7
    33b0:	18c03fcc 	andi	r3,r3,255
    33b4:	10803fcc 	andi	r2,r2,255
    33b8:	1880061e 	bne	r3,r2,33d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    33bc:	e0bffd17 	ldw	r2,-12(fp)
    33c0:	108001c3 	ldbu	r2,7(r2)
    33c4:	10bfffc4 	addi	r2,r2,-1
    33c8:	1007883a 	mov	r3,r2
    33cc:	e0bffd17 	ldw	r2,-12(fp)
    33d0:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    33d4:	e0bffe03 	ldbu	r2,-8(fp)
    33d8:	100b883a 	mov	r5,r2
    33dc:	e13ffd17 	ldw	r4,-12(fp)
    33e0:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    33e4:	00000106 	br	33ec <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    33e8:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    33ec:	e6ffff04 	addi	sp,fp,-4
    33f0:	dfc00217 	ldw	ra,8(sp)
    33f4:	df000117 	ldw	fp,4(sp)
    33f8:	dc000017 	ldw	r16,0(sp)
    33fc:	dec00304 	addi	sp,sp,12
    3400:	f800283a 	ret

00003404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    3404:	defff904 	addi	sp,sp,-28
    3408:	dfc00615 	stw	ra,24(sp)
    340c:	df000515 	stw	fp,20(sp)
    3410:	dc000415 	stw	r16,16(sp)
    3414:	df000504 	addi	fp,sp,20
    3418:	e13ffc15 	stw	r4,-16(fp)
    341c:	e17ffd05 	stb	r5,-12(fp)
    3420:	3005883a 	mov	r2,r6
    3424:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3428:	e0bffe03 	ldbu	r2,-8(fp)
    342c:	10000526 	beq	r2,zero,3444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3430:	e0bffe03 	ldbu	r2,-8(fp)
    3434:	10800428 	cmpgeui	r2,r2,16
    3438:	1000021e 	bne	r2,zero,3444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    343c:	e0bffe03 	ldbu	r2,-8(fp)
    3440:	00000106 	br	3448 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3444:	00800044 	movi	r2,1
    3448:	e0bffb05 	stb	r2,-20(fp)
    344c:	e0bffb03 	ldbu	r2,-20(fp)
    3450:	10800428 	cmpgeui	r2,r2,16
    3454:	1000161e 	bne	r2,zero,34b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3458:	e0bffb03 	ldbu	r2,-20(fp)
    345c:	e43ffc17 	ldw	r16,-16(fp)
    3460:	014001c4 	movi	r5,7
    3464:	1009883a 	mov	r4,r2
    3468:	000d8b80 	call	d8b8 <__mulsi3>
    346c:	8085883a 	add	r2,r16,r2
    3470:	10800304 	addi	r2,r2,12
    3474:	10800003 	ldbu	r2,0(r2)
    3478:	1004d0fa 	srli	r2,r2,3
    347c:	108001cc 	andi	r2,r2,7
    3480:	1007883a 	mov	r3,r2
    3484:	e0bffd03 	ldbu	r2,-12(fp)
    3488:	108001cc 	andi	r2,r2,7
    348c:	18c03fcc 	andi	r3,r3,255
    3490:	10803fcc 	andi	r2,r2,255
    3494:	1880021e 	bne	r3,r2,34a0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3498:	e0bffb03 	ldbu	r2,-20(fp)
    349c:	00000506 	br	34b4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    34a0:	e0bffb03 	ldbu	r2,-20(fp)
    34a4:	10800044 	addi	r2,r2,1
    34a8:	e0bffb05 	stb	r2,-20(fp)
    34ac:	003fe706 	br	344c <__alt_data_end+0xfc00344c>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    34b0:	0005883a 	mov	r2,zero
        };
    34b4:	e6ffff04 	addi	sp,fp,-4
    34b8:	dfc00217 	ldw	ra,8(sp)
    34bc:	df000117 	ldw	fp,4(sp)
    34c0:	dc000017 	ldw	r16,0(sp)
    34c4:	dec00304 	addi	sp,sp,12
    34c8:	f800283a 	ret

000034cc <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    34cc:	defffb04 	addi	sp,sp,-20
    34d0:	dfc00415 	stw	ra,16(sp)
    34d4:	df000315 	stw	fp,12(sp)
    34d8:	df000304 	addi	fp,sp,12
    34dc:	e13ffe15 	stw	r4,-8(fp)
    34e0:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    34e4:	e0bffe17 	ldw	r2,-8(fp)
    34e8:	1009883a 	mov	r4,r2
    34ec:	0004e880 	call	4e88 <_ZN15USBDeviceConfigC1Ev>
    34f0:	e0bffe17 	ldw	r2,-8(fp)
    34f4:	10800104 	addi	r2,r2,4
    34f8:	1009883a 	mov	r4,r2
    34fc:	0004ebc0 	call	4ebc <_ZN17UsbConfigXtracterC1Ev>
    3500:	008000b4 	movhi	r2,2
    3504:	10931004 	addi	r2,r2,19520
    3508:	e0fffe17 	ldw	r3,-8(fp)
    350c:	18800015 	stw	r2,0(r3)
    3510:	008000b4 	movhi	r2,2
    3514:	10931d04 	addi	r2,r2,19572
    3518:	e0fffe17 	ldw	r3,-8(fp)
    351c:	18800115 	stw	r2,4(r3)
    3520:	e0bffe17 	ldw	r2,-8(fp)
    3524:	e0ffff17 	ldw	r3,-4(fp)
    3528:	10c00315 	stw	r3,12(r2)
    352c:	e0bffe17 	ldw	r2,-8(fp)
    3530:	10000405 	stb	zero,16(r2)
    3534:	e0bffe17 	ldw	r2,-8(fp)
    3538:	00c00044 	movi	r3,1
    353c:	10c006c5 	stb	r3,27(r2)
    3540:	e0bffe17 	ldw	r2,-8(fp)
    3544:	10000715 	stw	zero,28(r2)
    3548:	e0bffe17 	ldw	r2,-8(fp)
    354c:	10000905 	stb	zero,36(r2)
    3550:	e0bffe17 	ldw	r2,-8(fp)
    3554:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3558:	e03ffd05 	stb	zero,-12(fp)
    355c:	e0bffd03 	ldbu	r2,-12(fp)
    3560:	108000e8 	cmpgeui	r2,r2,3
    3564:	1000431e 	bne	r2,zero,3674 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3568:	e0fffd03 	ldbu	r3,-12(fp)
    356c:	e13ffe17 	ldw	r4,-8(fp)
    3570:	1805883a 	mov	r2,r3
    3574:	1085883a 	add	r2,r2,r2
    3578:	10c5883a 	add	r2,r2,r3
    357c:	2085883a 	add	r2,r4,r2
    3580:	10800444 	addi	r2,r2,17
    3584:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3588:	e13ffd03 	ldbu	r4,-12(fp)
    358c:	e0bffd03 	ldbu	r2,-12(fp)
    3590:	10000226 	beq	r2,zero,359c <_ZN7XBOXONEC1EP3USB+0xd0>
    3594:	0007883a 	mov	r3,zero
    3598:	00000106 	br	35a0 <_ZN7XBOXONEC1EP3USB+0xd4>
    359c:	00c00204 	movi	r3,8
    35a0:	e17ffe17 	ldw	r5,-8(fp)
    35a4:	2005883a 	mov	r2,r4
    35a8:	1085883a 	add	r2,r2,r2
    35ac:	1105883a 	add	r2,r2,r4
    35b0:	2885883a 	add	r2,r5,r2
    35b4:	10800484 	addi	r2,r2,18
    35b8:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    35bc:	e0fffd03 	ldbu	r3,-12(fp)
    35c0:	e13ffe17 	ldw	r4,-8(fp)
    35c4:	1805883a 	mov	r2,r3
    35c8:	1085883a 	add	r2,r2,r2
    35cc:	10c5883a 	add	r2,r2,r3
    35d0:	2085883a 	add	r2,r4,r2
    35d4:	10800404 	addi	r2,r2,16
    35d8:	110000c3 	ldbu	r4,3(r2)
    35dc:	00ffff84 	movi	r3,-2
    35e0:	20c6703a 	and	r3,r4,r3
    35e4:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    35e8:	e0fffd03 	ldbu	r3,-12(fp)
    35ec:	e13ffe17 	ldw	r4,-8(fp)
    35f0:	1805883a 	mov	r2,r3
    35f4:	1085883a 	add	r2,r2,r2
    35f8:	10c5883a 	add	r2,r2,r3
    35fc:	2085883a 	add	r2,r4,r2
    3600:	10800404 	addi	r2,r2,16
    3604:	110000c3 	ldbu	r4,3(r2)
    3608:	00ffff44 	movi	r3,-3
    360c:	20c6703a 	and	r3,r4,r3
    3610:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    3614:	e13ffd03 	ldbu	r4,-12(fp)
    3618:	e0bffd03 	ldbu	r2,-12(fp)
    361c:	10000226 	beq	r2,zero,3628 <_ZN7XBOXONEC1EP3USB+0x15c>
    3620:	00c00044 	movi	r3,1
    3624:	00000106 	br	362c <_ZN7XBOXONEC1EP3USB+0x160>
    3628:	00c003c4 	movi	r3,15
    362c:	e17ffe17 	ldw	r5,-8(fp)
    3630:	2005883a 	mov	r2,r4
    3634:	1085883a 	add	r2,r2,r2
    3638:	1105883a 	add	r2,r2,r4
    363c:	2885883a 	add	r2,r5,r2
    3640:	10800404 	addi	r2,r2,16
    3644:	18c7883a 	add	r3,r3,r3
    3648:	18cb883a 	add	r5,r3,r3
    364c:	10c000c3 	ldbu	r3,3(r2)
    3650:	18c000cc 	andi	r3,r3,3
    3654:	1809883a 	mov	r4,r3
    3658:	2807883a 	mov	r3,r5
    365c:	20c6b03a 	or	r3,r4,r3
    3660:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3664:	e0bffd03 	ldbu	r2,-12(fp)
    3668:	10800044 	addi	r2,r2,1
    366c:	e0bffd05 	stb	r2,-12(fp)
    3670:	003fba06 	br	355c <__alt_data_end+0xfc00355c>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    3674:	e0bffe17 	ldw	r2,-8(fp)
    3678:	10800317 	ldw	r2,12(r2)
    367c:	10000626 	beq	r2,zero,3698 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    3680:	e0bffe17 	ldw	r2,-8(fp)
    3684:	10800317 	ldw	r2,12(r2)
    3688:	e0fffe17 	ldw	r3,-8(fp)
    368c:	180b883a 	mov	r5,r3
    3690:	1009883a 	mov	r4,r2
    3694:	0004c3c0 	call	4c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3698:	0001883a 	nop
    369c:	e037883a 	mov	sp,fp
    36a0:	dfc00117 	ldw	ra,4(sp)
    36a4:	df000017 	ldw	fp,0(sp)
    36a8:	dec00204 	addi	sp,sp,8
    36ac:	f800283a 	ret

000036b0 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    36b0:	deffde04 	addi	sp,sp,-136
    36b4:	dfc02115 	stw	ra,132(sp)
    36b8:	df002015 	stw	fp,128(sp)
    36bc:	df002004 	addi	fp,sp,128
    36c0:	e13ffc15 	stw	r4,-16(fp)
    36c4:	2809883a 	mov	r4,r5
    36c8:	3007883a 	mov	r3,r6
    36cc:	3805883a 	mov	r2,r7
    36d0:	e13ffd05 	stb	r4,-12(fp)
    36d4:	e0fffe05 	stb	r3,-8(fp)
    36d8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    36dc:	e0bfe744 	addi	r2,fp,-99
    36e0:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    36e4:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    36e8:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    36ec:	e0bffc17 	ldw	r2,-16(fp)
    36f0:	10800317 	ldw	r2,12(r2)
    36f4:	1009883a 	mov	r4,r2
    36f8:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    36fc:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	10800403 	ldbu	r2,16(r2)
    3708:	10803fcc 	andi	r2,r2,255
    370c:	10000226 	beq	r2,zero,3718 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    3710:	00bff644 	movi	r2,-39
    3714:	00017606 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    3718:	e0bfe517 	ldw	r2,-108(fp)
    371c:	10800017 	ldw	r2,0(r2)
    3720:	10800017 	ldw	r2,0(r2)
    3724:	000b883a 	mov	r5,zero
    3728:	e13fe517 	ldw	r4,-108(fp)
    372c:	103ee83a 	callr	r2
    3730:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3734:	e0bfe317 	ldw	r2,-116(fp)
    3738:	1000021e 	bne	r2,zero,3744 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    373c:	00bff584 	movi	r2,-42
    3740:	00016b06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3744:	e0bfe317 	ldw	r2,-116(fp)
    3748:	10c00003 	ldbu	r3,0(r2)
    374c:	11000043 	ldbu	r4,1(r2)
    3750:	2008923a 	slli	r4,r4,8
    3754:	20c6b03a 	or	r3,r4,r3
    3758:	11000083 	ldbu	r4,2(r2)
    375c:	2008943a 	slli	r4,r4,16
    3760:	20c6b03a 	or	r3,r4,r3
    3764:	108000c3 	ldbu	r2,3(r2)
    3768:	1004963a 	slli	r2,r2,24
    376c:	10c4b03a 	or	r2,r2,r3
    3770:	1000021e 	bne	r2,zero,377c <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    3774:	00bff5c4 	movi	r2,-41
    3778:	00015d06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    377c:	e0bfe317 	ldw	r2,-116(fp)
    3780:	10c00003 	ldbu	r3,0(r2)
    3784:	11000043 	ldbu	r4,1(r2)
    3788:	2008923a 	slli	r4,r4,8
    378c:	20c6b03a 	or	r3,r4,r3
    3790:	11000083 	ldbu	r4,2(r2)
    3794:	2008943a 	slli	r4,r4,16
    3798:	20c6b03a 	or	r3,r4,r3
    379c:	108000c3 	ldbu	r2,3(r2)
    37a0:	1004963a 	slli	r2,r2,24
    37a4:	10c4b03a 	or	r2,r2,r3
    37a8:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    37ac:	e0bffc17 	ldw	r2,-16(fp)
    37b0:	10c00444 	addi	r3,r2,17
    37b4:	e0bfe317 	ldw	r2,-116(fp)
    37b8:	19803fcc 	andi	r6,r3,255
    37bc:	11000003 	ldbu	r4,0(r2)
    37c0:	2008703a 	and	r4,r4,zero
    37c4:	200b883a 	mov	r5,r4
    37c8:	3009883a 	mov	r4,r6
    37cc:	2908b03a 	or	r4,r5,r4
    37d0:	11000005 	stb	r4,0(r2)
    37d4:	1808d23a 	srli	r4,r3,8
    37d8:	21803fcc 	andi	r6,r4,255
    37dc:	11000043 	ldbu	r4,1(r2)
    37e0:	2008703a 	and	r4,r4,zero
    37e4:	200b883a 	mov	r5,r4
    37e8:	3009883a 	mov	r4,r6
    37ec:	2908b03a 	or	r4,r5,r4
    37f0:	11000045 	stb	r4,1(r2)
    37f4:	1808d43a 	srli	r4,r3,16
    37f8:	21803fcc 	andi	r6,r4,255
    37fc:	11000083 	ldbu	r4,2(r2)
    3800:	2008703a 	and	r4,r4,zero
    3804:	200b883a 	mov	r5,r4
    3808:	3009883a 	mov	r4,r6
    380c:	2908b03a 	or	r4,r5,r4
    3810:	11000085 	stb	r4,2(r2)
    3814:	180ad63a 	srli	r5,r3,24
    3818:	10c000c3 	ldbu	r3,3(r2)
    381c:	1806703a 	and	r3,r3,zero
    3820:	1809883a 	mov	r4,r3
    3824:	2807883a 	mov	r3,r5
    3828:	20c6b03a 	or	r3,r4,r3
    382c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    3830:	e0bfe317 	ldw	r2,-116(fp)
    3834:	e0ffff03 	ldbu	r3,-4(fp)
    3838:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    383c:	e0bffc17 	ldw	r2,-16(fp)
    3840:	10c00317 	ldw	r3,12(r2)
    3844:	00800484 	movi	r2,18
    3848:	113fffcc 	andi	r4,r2,65535
    384c:	e0bfe744 	addi	r2,fp,-99
    3850:	d8800015 	stw	r2,0(sp)
    3854:	200f883a 	mov	r7,r4
    3858:	000d883a 	mov	r6,zero
    385c:	000b883a 	mov	r5,zero
    3860:	1809883a 	mov	r4,r3
    3864:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    3868:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    386c:	e0bfe317 	ldw	r2,-116(fp)
    3870:	e0ffe417 	ldw	r3,-112(fp)
    3874:	19403fcc 	andi	r5,r3,255
    3878:	10c00003 	ldbu	r3,0(r2)
    387c:	1806703a 	and	r3,r3,zero
    3880:	1809883a 	mov	r4,r3
    3884:	2807883a 	mov	r3,r5
    3888:	20c6b03a 	or	r3,r4,r3
    388c:	10c00005 	stb	r3,0(r2)
    3890:	e0ffe417 	ldw	r3,-112(fp)
    3894:	1806d23a 	srli	r3,r3,8
    3898:	19403fcc 	andi	r5,r3,255
    389c:	10c00043 	ldbu	r3,1(r2)
    38a0:	1806703a 	and	r3,r3,zero
    38a4:	1809883a 	mov	r4,r3
    38a8:	2807883a 	mov	r3,r5
    38ac:	20c6b03a 	or	r3,r4,r3
    38b0:	10c00045 	stb	r3,1(r2)
    38b4:	e0ffe417 	ldw	r3,-112(fp)
    38b8:	1806d43a 	srli	r3,r3,16
    38bc:	19403fcc 	andi	r5,r3,255
    38c0:	10c00083 	ldbu	r3,2(r2)
    38c4:	1806703a 	and	r3,r3,zero
    38c8:	1809883a 	mov	r4,r3
    38cc:	2807883a 	mov	r3,r5
    38d0:	20c6b03a 	or	r3,r4,r3
    38d4:	10c00085 	stb	r3,2(r2)
    38d8:	e0ffe417 	ldw	r3,-112(fp)
    38dc:	180ad63a 	srli	r5,r3,24
    38e0:	10c000c3 	ldbu	r3,3(r2)
    38e4:	1806703a 	and	r3,r3,zero
    38e8:	1809883a 	mov	r4,r3
    38ec:	2807883a 	mov	r3,r5
    38f0:	20c6b03a 	or	r3,r4,r3
    38f4:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    38f8:	e0bfe103 	ldbu	r2,-124(fp)
    38fc:	1000e61e 	bne	r2,zero,3c98 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    3900:	e0bfe217 	ldw	r2,-120(fp)
    3904:	10c00203 	ldbu	r3,8(r2)
    3908:	10800243 	ldbu	r2,9(r2)
    390c:	1004923a 	slli	r2,r2,8
    3910:	10c4b03a 	or	r2,r2,r3
    3914:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    3918:	e0bfe217 	ldw	r2,-120(fp)
    391c:	10c00283 	ldbu	r3,10(r2)
    3920:	108002c3 	ldbu	r2,11(r2)
    3924:	1004923a 	slli	r2,r2,8
    3928:	10c4b03a 	or	r2,r2,r3
    392c:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    3930:	e0bffc17 	ldw	r2,-16(fp)
    3934:	10800017 	ldw	r2,0(r2)
    3938:	10800604 	addi	r2,r2,24
    393c:	10800017 	ldw	r2,0(r2)
    3940:	e0ffe60b 	ldhu	r3,-104(fp)
    3944:	e13fe68b 	ldhu	r4,-102(fp)
    3948:	200d883a 	mov	r6,r4
    394c:	180b883a 	mov	r5,r3
    3950:	e13ffc17 	ldw	r4,-16(fp)
    3954:	103ee83a 	callr	r2
    3958:	1080005c 	xori	r2,r2,1
    395c:	10803fcc 	andi	r2,r2,255
    3960:	1000d51e 	bne	r2,zero,3cb8 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    3964:	e0bfe517 	ldw	r2,-108(fp)
    3968:	10800017 	ldw	r2,0(r2)
    396c:	10800104 	addi	r2,r2,4
    3970:	10800017 	ldw	r2,0(r2)
    3974:	e0fffd03 	ldbu	r3,-12(fp)
    3978:	e13ffe03 	ldbu	r4,-8(fp)
    397c:	200f883a 	mov	r7,r4
    3980:	000d883a 	mov	r6,zero
    3984:	180b883a 	mov	r5,r3
    3988:	e13fe517 	ldw	r4,-108(fp)
    398c:	103ee83a 	callr	r2
    3990:	1007883a 	mov	r3,r2
    3994:	e0bffc17 	ldw	r2,-16(fp)
    3998:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    399c:	e0bffc17 	ldw	r2,-16(fp)
    39a0:	10800403 	ldbu	r2,16(r2)
    39a4:	10803fcc 	andi	r2,r2,255
    39a8:	1000021e 	bne	r2,zero,39b4 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    39ac:	00bff504 	movi	r2,-44
    39b0:	0000cf06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    39b4:	e0bfe217 	ldw	r2,-120(fp)
    39b8:	10c001c3 	ldbu	r3,7(r2)
    39bc:	e0bffc17 	ldw	r2,-16(fp)
    39c0:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    39c4:	e0bffc17 	ldw	r2,-16(fp)
    39c8:	10c00317 	ldw	r3,12(r2)
    39cc:	e0bffc17 	ldw	r2,-16(fp)
    39d0:	10800403 	ldbu	r2,16(r2)
    39d4:	10803fcc 	andi	r2,r2,255
    39d8:	100f883a 	mov	r7,r2
    39dc:	000d883a 	mov	r6,zero
    39e0:	000b883a 	mov	r5,zero
    39e4:	1809883a 	mov	r4,r3
    39e8:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    39ec:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    39f0:	e0bfe103 	ldbu	r2,-124(fp)
    39f4:	10001026 	beq	r2,zero,3a38 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    39f8:	e0bfe317 	ldw	r2,-116(fp)
    39fc:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    3a00:	e0bfe517 	ldw	r2,-108(fp)
    3a04:	10800017 	ldw	r2,0(r2)
    3a08:	10800204 	addi	r2,r2,8
    3a0c:	10800017 	ldw	r2,0(r2)
    3a10:	e0fffc17 	ldw	r3,-16(fp)
    3a14:	18c00403 	ldbu	r3,16(r3)
    3a18:	18c03fcc 	andi	r3,r3,255
    3a1c:	180b883a 	mov	r5,r3
    3a20:	e13fe517 	ldw	r4,-108(fp)
    3a24:	103ee83a 	callr	r2
                bAddress = 0;
    3a28:	e0bffc17 	ldw	r2,-16(fp)
    3a2c:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    3a30:	e0bfe103 	ldbu	r2,-124(fp)
    3a34:	0000ae06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3a38:	e0bfe317 	ldw	r2,-116(fp)
    3a3c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    3a40:	e0bfe517 	ldw	r2,-108(fp)
    3a44:	10800017 	ldw	r2,0(r2)
    3a48:	10800017 	ldw	r2,0(r2)
    3a4c:	e0fffc17 	ldw	r3,-16(fp)
    3a50:	18c00403 	ldbu	r3,16(r3)
    3a54:	18c03fcc 	andi	r3,r3,255
    3a58:	180b883a 	mov	r5,r3
    3a5c:	e13fe517 	ldw	r4,-108(fp)
    3a60:	103ee83a 	callr	r2
    3a64:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3a68:	e0bfe317 	ldw	r2,-116(fp)
    3a6c:	1000021e 	bne	r2,zero,3a78 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3a70:	00bff584 	movi	r2,-42
    3a74:	00009e06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3a78:	e0bfe317 	ldw	r2,-116(fp)
    3a7c:	e0ffff03 	ldbu	r3,-4(fp)
    3a80:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3a84:	e0bffc17 	ldw	r2,-16(fp)
    3a88:	10c00317 	ldw	r3,12(r2)
    3a8c:	e0bffc17 	ldw	r2,-16(fp)
    3a90:	10800403 	ldbu	r2,16(r2)
    3a94:	11003fcc 	andi	r4,r2,255
    3a98:	e0bffc17 	ldw	r2,-16(fp)
    3a9c:	10800444 	addi	r2,r2,17
    3aa0:	100f883a 	mov	r7,r2
    3aa4:	01800044 	movi	r6,1
    3aa8:	200b883a 	mov	r5,r4
    3aac:	1809883a 	mov	r4,r3
    3ab0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3ab4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3ab8:	e0bfe103 	ldbu	r2,-124(fp)
    3abc:	1000781e 	bne	r2,zero,3ca0 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    3ac0:	e0bfe217 	ldw	r2,-120(fp)
    3ac4:	10800443 	ldbu	r2,17(r2)
    3ac8:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    3acc:	e0bfe703 	ldbu	r2,-100(fp)
    3ad0:	01402004 	movi	r5,128
    3ad4:	1009883a 	mov	r4,r2
    3ad8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3adc:	e03fe145 	stb	zero,-123(fp)
    3ae0:	e0ffe143 	ldbu	r3,-123(fp)
    3ae4:	e0bfe703 	ldbu	r2,-100(fp)
    3ae8:	1880222e 	bgeu	r3,r2,3b74 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    3aec:	e0bffc17 	ldw	r2,-16(fp)
    3af0:	10c00104 	addi	r3,r2,4
    3af4:	e0bfed04 	addi	r2,fp,-76
    3af8:	180b883a 	mov	r5,r3
    3afc:	1009883a 	mov	r4,r2
    3b00:	0004f240 	call	4f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3b04:	e0bffc17 	ldw	r2,-16(fp)
    3b08:	10c00317 	ldw	r3,12(r2)
    3b0c:	e0bffc17 	ldw	r2,-16(fp)
    3b10:	10800403 	ldbu	r2,16(r2)
    3b14:	11003fcc 	andi	r4,r2,255
    3b18:	e17fe143 	ldbu	r5,-123(fp)
    3b1c:	e0bfed04 	addi	r2,fp,-76
    3b20:	d8800015 	stw	r2,0(sp)
    3b24:	280f883a 	mov	r7,r5
    3b28:	000d883a 	mov	r6,zero
    3b2c:	200b883a 	mov	r5,r4
    3b30:	1809883a 	mov	r4,r3
    3b34:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3b38:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3b3c:	e0bfe103 	ldbu	r2,-124(fp)
    3b40:	10000226 	beq	r2,zero,3b4c <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3b44:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3b48:	00006206 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3b4c:	e0bffc17 	ldw	r2,-16(fp)
    3b50:	108006c3 	ldbu	r2,27(r2)
    3b54:	10803fcc 	andi	r2,r2,255
    3b58:	108000f0 	cmpltui	r2,r2,3
    3b5c:	10000426 	beq	r2,zero,3b70 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3b60:	e0bfe143 	ldbu	r2,-123(fp)
    3b64:	10800044 	addi	r2,r2,1
    3b68:	e0bfe145 	stb	r2,-123(fp)
    3b6c:	003fdc06 	br	3ae0 <__alt_data_end+0xfc003ae0>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    3b70:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3b74:	e0bffc17 	ldw	r2,-16(fp)
    3b78:	108006c3 	ldbu	r2,27(r2)
    3b7c:	10803fcc 	andi	r2,r2,255
    3b80:	108000e8 	cmpgeui	r2,r2,3
    3b84:	10004e26 	beq	r2,zero,3cc0 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3b88:	e0bffc17 	ldw	r2,-16(fp)
    3b8c:	10c00317 	ldw	r3,12(r2)
    3b90:	e0bffc17 	ldw	r2,-16(fp)
    3b94:	10800403 	ldbu	r2,16(r2)
    3b98:	11003fcc 	andi	r4,r2,255
    3b9c:	e0bffc17 	ldw	r2,-16(fp)
    3ba0:	108006c3 	ldbu	r2,27(r2)
    3ba4:	11403fcc 	andi	r5,r2,255
    3ba8:	e0bffc17 	ldw	r2,-16(fp)
    3bac:	10800444 	addi	r2,r2,17
    3bb0:	100f883a 	mov	r7,r2
    3bb4:	280d883a 	mov	r6,r5
    3bb8:	200b883a 	mov	r5,r4
    3bbc:	1809883a 	mov	r4,r3
    3bc0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3bc4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3bc8:	e0bfe103 	ldbu	r2,-124(fp)
    3bcc:	1000361e 	bne	r2,zero,3ca8 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    3bd0:	01003204 	movi	r4,200
    3bd4:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    3bd8:	e0bffc17 	ldw	r2,-16(fp)
    3bdc:	10c00317 	ldw	r3,12(r2)
    3be0:	e0bffc17 	ldw	r2,-16(fp)
    3be4:	10800403 	ldbu	r2,16(r2)
    3be8:	11003fcc 	andi	r4,r2,255
    3bec:	e0bffc17 	ldw	r2,-16(fp)
    3bf0:	10800443 	ldbu	r2,17(r2)
    3bf4:	11403fcc 	andi	r5,r2,255
    3bf8:	e0bffc17 	ldw	r2,-16(fp)
    3bfc:	10800683 	ldbu	r2,26(r2)
    3c00:	10803fcc 	andi	r2,r2,255
    3c04:	100f883a 	mov	r7,r2
    3c08:	280d883a 	mov	r6,r5
    3c0c:	200b883a 	mov	r5,r4
    3c10:	1809883a 	mov	r4,r3
    3c14:	0002b940 	call	2b94 <_ZN3USB7setConfEhhh>
    3c18:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3c1c:	e0bfe103 	ldbu	r2,-124(fp)
    3c20:	1000231e 	bne	r2,zero,3cb0 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3c24:	01003204 	movi	r4,200
    3c28:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3c2c:	e0bffc17 	ldw	r2,-16(fp)
    3c30:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3c34:	00800144 	movi	r2,5
    3c38:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3c3c:	00800804 	movi	r2,32
    3c40:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3c44:	00800044 	movi	r2,1
    3c48:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3c4c:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    3c50:	e0bfebc4 	addi	r2,fp,-81
    3c54:	01800144 	movi	r6,5
    3c58:	100b883a 	mov	r5,r2
    3c5c:	e13ffc17 	ldw	r4,-16(fp)
    3c60:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
    3c64:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3c68:	e0bfe103 	ldbu	r2,-124(fp)
    3c6c:	1000181e 	bne	r2,zero,3cd0 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    3c70:	e13ffc17 	ldw	r4,-16(fp)
    3c74:	00046180 	call	4618 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	00c00044 	movi	r3,1
    3c80:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3c84:	e0bffc17 	ldw	r2,-16(fp)
    3c88:	00c00044 	movi	r3,1
    3c8c:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    3c90:	0005883a 	mov	r2,zero
    3c94:	00001606 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3c98:	0001883a 	nop
    3c9c:	00000d06 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3ca0:	0001883a 	nop
    3ca4:	00000b06 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3ca8:	0001883a 	nop
    3cac:	00000906 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    3cb0:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3cb4:	00000706 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    3cb8:	0001883a 	nop
    3cbc:	00000106 	br	3cc4 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    3cc0:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    3cc4:	00bff444 	movi	r2,-47
    3cc8:	e0bfe105 	stb	r2,-124(fp)
    3ccc:	00000106 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    3cd0:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    3cd4:	e0bffc17 	ldw	r2,-16(fp)
    3cd8:	10800017 	ldw	r2,0(r2)
    3cdc:	10800204 	addi	r2,r2,8
    3ce0:	10800017 	ldw	r2,0(r2)
    3ce4:	e13ffc17 	ldw	r4,-16(fp)
    3ce8:	103ee83a 	callr	r2
        return rcode;
    3cec:	e0bfe103 	ldbu	r2,-124(fp)
}
    3cf0:	e037883a 	mov	sp,fp
    3cf4:	dfc00117 	ldw	ra,4(sp)
    3cf8:	df000017 	ldw	fp,0(sp)
    3cfc:	dec00204 	addi	sp,sp,8
    3d00:	f800283a 	ret

00003d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3d04:	defff904 	addi	sp,sp,-28
    3d08:	df000615 	stw	fp,24(sp)
    3d0c:	df000604 	addi	fp,sp,24
    3d10:	e13ffb15 	stw	r4,-20(fp)
    3d14:	3009883a 	mov	r4,r6
    3d18:	3807883a 	mov	r3,r7
    3d1c:	e0800117 	ldw	r2,4(fp)
    3d20:	e17ffc05 	stb	r5,-16(fp)
    3d24:	e13ffd05 	stb	r4,-12(fp)
    3d28:	e0fffe05 	stb	r3,-8(fp)
    3d2c:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    3d30:	e0bffb17 	ldw	r2,-20(fp)
    3d34:	e0fffc03 	ldbu	r3,-16(fp)
    3d38:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3d3c:	e0800217 	ldw	r2,8(fp)
    3d40:	108000c3 	ldbu	r2,3(r2)
    3d44:	10803fcc 	andi	r2,r2,255
    3d48:	108000cc 	andi	r2,r2,3
    3d4c:	108000d8 	cmpnei	r2,r2,3
    3d50:	1000361e 	bne	r2,zero,3e2c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3d54:	e0800217 	ldw	r2,8(fp)
    3d58:	10800083 	ldbu	r2,2(r2)
    3d5c:	10803fcc 	andi	r2,r2,255
    3d60:	1080201c 	xori	r2,r2,128
    3d64:	10bfe004 	addi	r2,r2,-128
    3d68:	1000020e 	bge	r2,zero,3d74 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3d6c:	00800084 	movi	r2,2
    3d70:	00000106 	br	3d78 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3d74:	00800044 	movi	r2,1
    3d78:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3d7c:	e0fffa03 	ldbu	r3,-24(fp)
    3d80:	e0800217 	ldw	r2,8(fp)
    3d84:	10800083 	ldbu	r2,2(r2)
    3d88:	108003cc 	andi	r2,r2,15
    3d8c:	100b883a 	mov	r5,r2
    3d90:	e13ffb17 	ldw	r4,-20(fp)
    3d94:	1805883a 	mov	r2,r3
    3d98:	1085883a 	add	r2,r2,r2
    3d9c:	10c5883a 	add	r2,r2,r3
    3da0:	2085883a 	add	r2,r4,r2
    3da4:	10800444 	addi	r2,r2,17
    3da8:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    3dac:	e0fffa03 	ldbu	r3,-24(fp)
    3db0:	e0800217 	ldw	r2,8(fp)
    3db4:	11000103 	ldbu	r4,4(r2)
    3db8:	10800143 	ldbu	r2,5(r2)
    3dbc:	1004923a 	slli	r2,r2,8
    3dc0:	1104b03a 	or	r2,r2,r4
    3dc4:	100b883a 	mov	r5,r2
    3dc8:	e13ffb17 	ldw	r4,-20(fp)
    3dcc:	1805883a 	mov	r2,r3
    3dd0:	1085883a 	add	r2,r2,r2
    3dd4:	10c5883a 	add	r2,r2,r3
    3dd8:	2085883a 	add	r2,r4,r2
    3ddc:	10800484 	addi	r2,r2,18
    3de0:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    3de4:	e0bffb17 	ldw	r2,-20(fp)
    3de8:	10c00903 	ldbu	r3,36(r2)
    3dec:	e0800217 	ldw	r2,8(fp)
    3df0:	10800183 	ldbu	r2,6(r2)
    3df4:	18c03fcc 	andi	r3,r3,255
    3df8:	10803fcc 	andi	r2,r2,255
    3dfc:	1880042e 	bgeu	r3,r2,3e10 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    3e00:	e0800217 	ldw	r2,8(fp)
    3e04:	10c00183 	ldbu	r3,6(r2)
    3e08:	e0bffb17 	ldw	r2,-20(fp)
    3e0c:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3e10:	e0bffb17 	ldw	r2,-20(fp)
    3e14:	108006c3 	ldbu	r2,27(r2)
    3e18:	10800044 	addi	r2,r2,1
    3e1c:	1007883a 	mov	r3,r2
    3e20:	e0bffb17 	ldw	r2,-20(fp)
    3e24:	10c006c5 	stb	r3,27(r2)
    3e28:	00000106 	br	3e30 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3e2c:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3e30:	e037883a 	mov	sp,fp
    3e34:	df000017 	ldw	fp,0(sp)
    3e38:	dec00104 	addi	sp,sp,4
    3e3c:	f800283a 	ret

00003e40 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3e40:	213fff04 	addi	r4,r4,-4
    3e44:	0003d041 	jmpi	3d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003e48 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3e48:	defffd04 	addi	sp,sp,-12
    3e4c:	df000215 	stw	fp,8(sp)
    3e50:	df000204 	addi	fp,sp,8
    3e54:	e13ffe15 	stw	r4,-8(fp)
    3e58:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3e5c:	0001883a 	nop
    3e60:	e037883a 	mov	sp,fp
    3e64:	df000017 	ldw	fp,0(sp)
    3e68:	dec00104 	addi	sp,sp,4
    3e6c:	f800283a 	ret

00003e70 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3e70:	defffd04 	addi	sp,sp,-12
    3e74:	dfc00215 	stw	ra,8(sp)
    3e78:	df000115 	stw	fp,4(sp)
    3e7c:	df000104 	addi	fp,sp,4
    3e80:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3e84:	e0bfff17 	ldw	r2,-4(fp)
    3e88:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3e8c:	e0bfff17 	ldw	r2,-4(fp)
    3e90:	10800317 	ldw	r2,12(r2)
    3e94:	1009883a 	mov	r4,r2
    3e98:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    3e9c:	1009883a 	mov	r4,r2
    3ea0:	20800017 	ldw	r2,0(r4)
    3ea4:	10800204 	addi	r2,r2,8
    3ea8:	10800017 	ldw	r2,0(r2)
    3eac:	e0ffff17 	ldw	r3,-4(fp)
    3eb0:	18c00403 	ldbu	r3,16(r3)
    3eb4:	18c03fcc 	andi	r3,r3,255
    3eb8:	180b883a 	mov	r5,r3
    3ebc:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3ec0:	e0bfff17 	ldw	r2,-4(fp)
    3ec4:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3ec8:	e0bfff17 	ldw	r2,-4(fp)
    3ecc:	00c00044 	movi	r3,1
    3ed0:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
    3ed8:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3eec:	0005883a 	mov	r2,zero
}
    3ef0:	e037883a 	mov	sp,fp
    3ef4:	dfc00117 	ldw	ra,4(sp)
    3ef8:	df000017 	ldw	fp,0(sp)
    3efc:	dec00204 	addi	sp,sp,8
    3f00:	f800283a 	ret

00003f04 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3f04:	defffa04 	addi	sp,sp,-24
    3f08:	dfc00515 	stw	ra,20(sp)
    3f0c:	df000415 	stw	fp,16(sp)
    3f10:	df000404 	addi	fp,sp,16
    3f14:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3f18:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3f1c:	e0bfff17 	ldw	r2,-4(fp)
    3f20:	10800943 	ldbu	r2,37(r2)
    3f24:	1080005c 	xori	r2,r2,1
    3f28:	10803fcc 	andi	r2,r2,255
    3f2c:	10000226 	beq	r2,zero,3f38 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3f30:	0005883a 	mov	r2,zero
    3f34:	00002c06 	br	3fe8 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3f38:	00006dc0 	call	6dc <_Z6millisv>
    3f3c:	1007883a 	mov	r3,r2
    3f40:	e0bfff17 	ldw	r2,-4(fp)
    3f44:	10800717 	ldw	r2,28(r2)
    3f48:	1885c83a 	sub	r2,r3,r2
    3f4c:	0084303a 	nor	r2,zero,r2
    3f50:	1004d7fa 	srli	r2,r2,31
    3f54:	10803fcc 	andi	r2,r2,255
    3f58:	10002226 	beq	r2,zero,3fe4 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3f5c:	00006dc0 	call	6dc <_Z6millisv>
    3f60:	1007883a 	mov	r3,r2
    3f64:	e0bfff17 	ldw	r2,-4(fp)
    3f68:	10800903 	ldbu	r2,36(r2)
    3f6c:	10803fcc 	andi	r2,r2,255
    3f70:	1887883a 	add	r3,r3,r2
    3f74:	e0bfff17 	ldw	r2,-4(fp)
    3f78:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3f7c:	e0bfff17 	ldw	r2,-4(fp)
    3f80:	10800603 	ldbu	r2,24(r2)
    3f84:	10803fcc 	andi	r2,r2,255
    3f88:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3f8c:	e0bfff17 	ldw	r2,-4(fp)
    3f90:	11000317 	ldw	r4,12(r2)
    3f94:	e0bfff17 	ldw	r2,-4(fp)
    3f98:	10800403 	ldbu	r2,16(r2)
    3f9c:	11403fcc 	andi	r5,r2,255
    3fa0:	e0bfff17 	ldw	r2,-4(fp)
    3fa4:	108005c3 	ldbu	r2,23(r2)
    3fa8:	11803fcc 	andi	r6,r2,255
    3fac:	e0bfff17 	ldw	r2,-4(fp)
    3fb0:	10800f84 	addi	r2,r2,62
    3fb4:	e0ffff17 	ldw	r3,-4(fp)
    3fb8:	18c00903 	ldbu	r3,36(r3)
    3fbc:	18c03fcc 	andi	r3,r3,255
    3fc0:	e1fffe84 	addi	r7,fp,-6
    3fc4:	d8c00115 	stw	r3,4(sp)
    3fc8:	d8800015 	stw	r2,0(sp)
    3fcc:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    3fd0:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    3fd4:	e0bffe43 	ldbu	r2,-7(fp)
    3fd8:	1000021e 	bne	r2,zero,3fe4 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    3fdc:	e13fff17 	ldw	r4,-4(fp)
    3fe0:	0003ffc0 	call	3ffc <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    3fe4:	e0bffe03 	ldbu	r2,-8(fp)
}
    3fe8:	e037883a 	mov	sp,fp
    3fec:	dfc00117 	ldw	ra,4(sp)
    3ff0:	df000017 	ldw	fp,0(sp)
    3ff4:	dec00204 	addi	sp,sp,8
    3ff8:	f800283a 	ret

00003ffc <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    3ffc:	defffd04 	addi	sp,sp,-12
    4000:	df000215 	stw	fp,8(sp)
    4004:	df000204 	addi	fp,sp,8
    4008:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10800f83 	ldbu	r2,62(r2)
    4014:	10803fcc 	andi	r2,r2,255
    4018:	108001d8 	cmpnei	r2,r2,7
    401c:	10002f1e 	bne	r2,zero,40dc <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    4020:	e0bfff17 	ldw	r2,-4(fp)
    4024:	10801083 	ldbu	r2,66(r2)
    4028:	10803fcc 	andi	r2,r2,255
    402c:	10800058 	cmpnei	r2,r2,1
    4030:	10000a1e 	bne	r2,zero,405c <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    4034:	e0bfff17 	ldw	r2,-4(fp)
    4038:	10c0098b 	ldhu	r3,38(r2)
    403c:	008000b4 	movhi	r2,2
    4040:	10930c84 	addi	r2,r2,19506
    4044:	1080000b 	ldhu	r2,0(r2)
    4048:	1884b03a 	or	r2,r3,r2
    404c:	1007883a 	mov	r3,r2
    4050:	e0bfff17 	ldw	r2,-4(fp)
    4054:	10c0098d 	sth	r3,38(r2)
    4058:	00000b06 	br	4088 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    405c:	e0bfff17 	ldw	r2,-4(fp)
    4060:	1080098b 	ldhu	r2,38(r2)
    4064:	1007883a 	mov	r3,r2
    4068:	008000b4 	movhi	r2,2
    406c:	10930c84 	addi	r2,r2,19506
    4070:	1080000b 	ldhu	r2,0(r2)
    4074:	0084303a 	nor	r2,zero,r2
    4078:	1884703a 	and	r2,r3,r2
    407c:	1007883a 	mov	r3,r2
    4080:	e0bfff17 	ldw	r2,-4(fp)
    4084:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    4088:	e0bfff17 	ldw	r2,-4(fp)
    408c:	10c0098b 	ldhu	r3,38(r2)
    4090:	e0bfff17 	ldw	r2,-4(fp)
    4094:	10800a0b 	ldhu	r2,40(r2)
    4098:	18ffffcc 	andi	r3,r3,65535
    409c:	10bfffcc 	andi	r2,r2,65535
    40a0:	18800e26 	beq	r3,r2,40dc <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    40a4:	e0bfff17 	ldw	r2,-4(fp)
    40a8:	1080098b 	ldhu	r2,38(r2)
    40ac:	1007883a 	mov	r3,r2
    40b0:	e0bfff17 	ldw	r2,-4(fp)
    40b4:	10800a0b 	ldhu	r2,40(r2)
    40b8:	0084303a 	nor	r2,zero,r2
    40bc:	1884703a 	and	r2,r3,r2
    40c0:	1007883a 	mov	r3,r2
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    40cc:	e0bfff17 	ldw	r2,-4(fp)
    40d0:	10c0098b 	ldhu	r3,38(r2)
    40d4:	e0bfff17 	ldw	r2,-4(fp)
    40d8:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    40dc:	e0bfff17 	ldw	r2,-4(fp)
    40e0:	10800f83 	ldbu	r2,62(r2)
    40e4:	10803fcc 	andi	r2,r2,255
    40e8:	10800820 	cmpeqi	r2,r2,32
    40ec:	1000b026 	beq	r2,zero,43b0 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    40f0:	e0bfff17 	ldw	r2,-4(fp)
    40f4:	10c0098b 	ldhu	r3,38(r2)
    40f8:	008000b4 	movhi	r2,2
    40fc:	10930c84 	addi	r2,r2,19506
    4100:	1080000b 	ldhu	r2,0(r2)
    4104:	1884703a 	and	r2,r3,r2
    4108:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    410c:	e0bfff17 	ldw	r2,-4(fp)
    4110:	108010c3 	ldbu	r2,67(r2)
    4114:	10803fcc 	andi	r2,r2,255
    4118:	108003cc 	andi	r2,r2,15
    411c:	1004923a 	slli	r2,r2,8
    4120:	1007883a 	mov	r3,r2
    4124:	e0bffe0b 	ldhu	r2,-8(fp)
    4128:	1884b03a 	or	r2,r3,r2
    412c:	1007883a 	mov	r3,r2
    4130:	e0bfff17 	ldw	r2,-4(fp)
    4134:	10801083 	ldbu	r2,66(r2)
    4138:	10803fcc 	andi	r2,r2,255
    413c:	10803c0c 	andi	r2,r2,240
    4140:	1884b03a 	or	r2,r3,r2
    4144:	1007883a 	mov	r3,r2
    4148:	e0bfff17 	ldw	r2,-4(fp)
    414c:	10801083 	ldbu	r2,66(r2)
    4150:	10803fcc 	andi	r2,r2,255
    4154:	1080030c 	andi	r2,r2,12
    4158:	100492ba 	slli	r2,r2,10
    415c:	1884b03a 	or	r2,r3,r2
    4160:	1007883a 	mov	r3,r2
    4164:	e0bfff17 	ldw	r2,-4(fp)
    4168:	10801083 	ldbu	r2,66(r2)
    416c:	10803fcc 	andi	r2,r2,255
    4170:	1080004c 	andi	r2,r2,1
    4174:	100490fa 	slli	r2,r2,3
    4178:	1884b03a 	or	r2,r3,r2
    417c:	1007883a 	mov	r3,r2
    4180:	e0bfff17 	ldw	r2,-4(fp)
    4184:	108010c3 	ldbu	r2,67(r2)
    4188:	10803fcc 	andi	r2,r2,255
    418c:	1080300c 	andi	r2,r2,192
    4190:	1004923a 	slli	r2,r2,8
    4194:	1884b03a 	or	r2,r3,r2
    4198:	1007883a 	mov	r3,r2
    419c:	e0bfff17 	ldw	r2,-4(fp)
    41a0:	108010c3 	ldbu	r2,67(r2)
    41a4:	10803fcc 	andi	r2,r2,255
    41a8:	10800c0c 	andi	r2,r2,48
    41ac:	1005d13a 	srai	r2,r2,4
    41b0:	1884b03a 	or	r2,r3,r2
    41b4:	1007883a 	mov	r3,r2
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    41c0:	e0bfff17 	ldw	r2,-4(fp)
    41c4:	10801143 	ldbu	r2,69(r2)
    41c8:	10803fcc 	andi	r2,r2,255
    41cc:	1004923a 	slli	r2,r2,8
    41d0:	1007883a 	mov	r3,r2
    41d4:	e0bfff17 	ldw	r2,-4(fp)
    41d8:	10801103 	ldbu	r2,68(r2)
    41dc:	10803fcc 	andi	r2,r2,255
    41e0:	1884b03a 	or	r2,r3,r2
    41e4:	1007883a 	mov	r3,r2
    41e8:	e0bfff17 	ldw	r2,-4(fp)
    41ec:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    41f0:	e0bfff17 	ldw	r2,-4(fp)
    41f4:	108011c3 	ldbu	r2,71(r2)
    41f8:	10803fcc 	andi	r2,r2,255
    41fc:	1004923a 	slli	r2,r2,8
    4200:	1007883a 	mov	r3,r2
    4204:	e0bfff17 	ldw	r2,-4(fp)
    4208:	10801183 	ldbu	r2,70(r2)
    420c:	10803fcc 	andi	r2,r2,255
    4210:	1884b03a 	or	r2,r3,r2
    4214:	1007883a 	mov	r3,r2
    4218:	e0bfff17 	ldw	r2,-4(fp)
    421c:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    4220:	e0bfff17 	ldw	r2,-4(fp)
    4224:	10801243 	ldbu	r2,73(r2)
    4228:	10803fcc 	andi	r2,r2,255
    422c:	1004923a 	slli	r2,r2,8
    4230:	1007883a 	mov	r3,r2
    4234:	e0bfff17 	ldw	r2,-4(fp)
    4238:	10801203 	ldbu	r2,72(r2)
    423c:	10803fcc 	andi	r2,r2,255
    4240:	1884b03a 	or	r2,r3,r2
    4244:	1007883a 	mov	r3,r2
    4248:	e0bfff17 	ldw	r2,-4(fp)
    424c:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    4250:	e0bfff17 	ldw	r2,-4(fp)
    4254:	108012c3 	ldbu	r2,75(r2)
    4258:	10803fcc 	andi	r2,r2,255
    425c:	1004923a 	slli	r2,r2,8
    4260:	1007883a 	mov	r3,r2
    4264:	e0bfff17 	ldw	r2,-4(fp)
    4268:	10801283 	ldbu	r2,74(r2)
    426c:	10803fcc 	andi	r2,r2,255
    4270:	1884b03a 	or	r2,r3,r2
    4274:	1007883a 	mov	r3,r2
    4278:	e0bfff17 	ldw	r2,-4(fp)
    427c:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    4280:	e0bfff17 	ldw	r2,-4(fp)
    4284:	10801343 	ldbu	r2,77(r2)
    4288:	10803fcc 	andi	r2,r2,255
    428c:	1004923a 	slli	r2,r2,8
    4290:	1007883a 	mov	r3,r2
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	10801303 	ldbu	r2,76(r2)
    429c:	10803fcc 	andi	r2,r2,255
    42a0:	1884b03a 	or	r2,r3,r2
    42a4:	1007883a 	mov	r3,r2
    42a8:	e0bfff17 	ldw	r2,-4(fp)
    42ac:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    42b0:	e0bfff17 	ldw	r2,-4(fp)
    42b4:	108013c3 	ldbu	r2,79(r2)
    42b8:	10803fcc 	andi	r2,r2,255
    42bc:	1004923a 	slli	r2,r2,8
    42c0:	1007883a 	mov	r3,r2
    42c4:	e0bfff17 	ldw	r2,-4(fp)
    42c8:	10801383 	ldbu	r2,78(r2)
    42cc:	10803fcc 	andi	r2,r2,255
    42d0:	1884b03a 	or	r2,r3,r2
    42d4:	1007883a 	mov	r3,r2
    42d8:	e0bfff17 	ldw	r2,-4(fp)
    42dc:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    42e0:	e0bfff17 	ldw	r2,-4(fp)
    42e4:	10c0098b 	ldhu	r3,38(r2)
    42e8:	e0bfff17 	ldw	r2,-4(fp)
    42ec:	10800a0b 	ldhu	r2,40(r2)
    42f0:	18ffffcc 	andi	r3,r3,65535
    42f4:	10bfffcc 	andi	r2,r2,65535
    42f8:	18800e26 	beq	r3,r2,4334 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	1080098b 	ldhu	r2,38(r2)
    4304:	1007883a 	mov	r3,r2
    4308:	e0bfff17 	ldw	r2,-4(fp)
    430c:	10800a0b 	ldhu	r2,40(r2)
    4310:	0084303a 	nor	r2,zero,r2
    4314:	1884703a 	and	r2,r3,r2
    4318:	1007883a 	mov	r3,r2
    431c:	e0bfff17 	ldw	r2,-4(fp)
    4320:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    4324:	e0bfff17 	ldw	r2,-4(fp)
    4328:	10c0098b 	ldhu	r3,38(r2)
    432c:	e0bfff17 	ldw	r2,-4(fp)
    4330:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    4334:	e0bfff17 	ldw	r2,-4(fp)
    4338:	10800d0b 	ldhu	r2,52(r2)
    433c:	10bfffcc 	andi	r2,r2,65535
    4340:	10000726 	beq	r2,zero,4360 <_ZN7XBOXONE10readReportEv+0x364>
    4344:	e0bfff17 	ldw	r2,-4(fp)
    4348:	10800e0b 	ldhu	r2,56(r2)
    434c:	10bfffcc 	andi	r2,r2,65535
    4350:	1000031e 	bne	r2,zero,4360 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    4354:	e0bfff17 	ldw	r2,-4(fp)
    4358:	00c00044 	movi	r3,1
    435c:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    4360:	e0bfff17 	ldw	r2,-4(fp)
    4364:	10c00d0b 	ldhu	r3,52(r2)
    4368:	e0bfff17 	ldw	r2,-4(fp)
    436c:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    4370:	e0bfff17 	ldw	r2,-4(fp)
    4374:	10800d8b 	ldhu	r2,54(r2)
    4378:	10bfffcc 	andi	r2,r2,65535
    437c:	10000726 	beq	r2,zero,439c <_ZN7XBOXONE10readReportEv+0x3a0>
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	10800e8b 	ldhu	r2,58(r2)
    4388:	10bfffcc 	andi	r2,r2,65535
    438c:	1000031e 	bne	r2,zero,439c <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    4390:	e0bfff17 	ldw	r2,-4(fp)
    4394:	00c00044 	movi	r3,1
    4398:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    439c:	e0bfff17 	ldw	r2,-4(fp)
    43a0:	10c00d8b 	ldhu	r3,54(r2)
    43a4:	e0bfff17 	ldw	r2,-4(fp)
    43a8:	10c00e8d 	sth	r3,58(r2)
    43ac:	00000106 	br	43b4 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    43b0:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    43b4:	e037883a 	mov	sp,fp
    43b8:	df000017 	ldw	fp,0(sp)
    43bc:	dec00104 	addi	sp,sp,4
    43c0:	f800283a 	ret

000043c4 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    43c4:	defffd04 	addi	sp,sp,-12
    43c8:	df000215 	stw	fp,8(sp)
    43cc:	df000204 	addi	fp,sp,8
    43d0:	e13ffe15 	stw	r4,-8(fp)
    43d4:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    43d8:	e0bfff17 	ldw	r2,-4(fp)
    43dc:	10800218 	cmpnei	r2,r2,8
    43e0:	1000031e 	bne	r2,zero,43f0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    43e4:	e0bffe17 	ldw	r2,-8(fp)
    43e8:	10800d0b 	ldhu	r2,52(r2)
    43ec:	00001306 	br	443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    43f0:	e0bfff17 	ldw	r2,-4(fp)
    43f4:	10800258 	cmpnei	r2,r2,9
    43f8:	1000031e 	bne	r2,zero,4408 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    43fc:	e0bffe17 	ldw	r2,-8(fp)
    4400:	10800d8b 	ldhu	r2,54(r2)
    4404:	00000d06 	br	443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    4408:	e0bffe17 	ldw	r2,-8(fp)
    440c:	10c0098b 	ldhu	r3,38(r2)
    4410:	e0bfff17 	ldw	r2,-4(fp)
    4414:	10803fcc 	andi	r2,r2,255
    4418:	1089883a 	add	r4,r2,r2
    441c:	008000b4 	movhi	r2,2
    4420:	10930484 	addi	r2,r2,19474
    4424:	2085883a 	add	r2,r4,r2
    4428:	1080000b 	ldhu	r2,0(r2)
    442c:	1884703a 	and	r2,r3,r2
    4430:	10bfffcc 	andi	r2,r2,65535
    4434:	1004c03a 	cmpne	r2,r2,zero
    4438:	10803fcc 	andi	r2,r2,255
}
    443c:	e037883a 	mov	sp,fp
    4440:	df000017 	ldw	fp,0(sp)
    4444:	dec00104 	addi	sp,sp,4
    4448:	f800283a 	ret

0000444c <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    444c:	defffc04 	addi	sp,sp,-16
    4450:	df000315 	stw	fp,12(sp)
    4454:	df000304 	addi	fp,sp,12
    4458:	e13ffe15 	stw	r4,-8(fp)
    445c:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    4460:	e0bfff17 	ldw	r2,-4(fp)
    4464:	10800218 	cmpnei	r2,r2,8
    4468:	10000a1e 	bne	r2,zero,4494 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    446c:	e0bffe17 	ldw	r2,-8(fp)
    4470:	10800f03 	ldbu	r2,60(r2)
    4474:	10803fcc 	andi	r2,r2,255
    4478:	10000426 	beq	r2,zero,448c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	10000f05 	stb	zero,60(r2)
                        return true;
    4484:	00800044 	movi	r2,1
    4488:	00002806 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    448c:	0005883a 	mov	r2,zero
    4490:	00002606 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    4494:	e0bfff17 	ldw	r2,-4(fp)
    4498:	10800258 	cmpnei	r2,r2,9
    449c:	10000a1e 	bne	r2,zero,44c8 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    44a0:	e0bffe17 	ldw	r2,-8(fp)
    44a4:	10800f43 	ldbu	r2,61(r2)
    44a8:	10803fcc 	andi	r2,r2,255
    44ac:	10000426 	beq	r2,zero,44c0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    44b0:	e0bffe17 	ldw	r2,-8(fp)
    44b4:	10000f45 	stb	zero,61(r2)
                        return true;
    44b8:	00800044 	movi	r2,1
    44bc:	00001b06 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    44c0:	0005883a 	mov	r2,zero
    44c4:	00001906 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    44c8:	e0bfff17 	ldw	r2,-4(fp)
    44cc:	10803fcc 	andi	r2,r2,255
    44d0:	1087883a 	add	r3,r2,r2
    44d4:	008000b4 	movhi	r2,2
    44d8:	10930484 	addi	r2,r2,19474
    44dc:	1885883a 	add	r2,r3,r2
    44e0:	1080000b 	ldhu	r2,0(r2)
    44e4:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    44e8:	e0bffe17 	ldw	r2,-8(fp)
    44ec:	10c00a8b 	ldhu	r3,42(r2)
    44f0:	e0bffd0b 	ldhu	r2,-12(fp)
    44f4:	1884703a 	and	r2,r3,r2
    44f8:	10bfffcc 	andi	r2,r2,65535
    44fc:	1004c03a 	cmpne	r2,r2,zero
    4500:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    4504:	e0bffe17 	ldw	r2,-8(fp)
    4508:	10800a8b 	ldhu	r2,42(r2)
    450c:	1007883a 	mov	r3,r2
    4510:	e0bffd0b 	ldhu	r2,-12(fp)
    4514:	0084303a 	nor	r2,zero,r2
    4518:	1884703a 	and	r2,r3,r2
    451c:	1007883a 	mov	r3,r2
    4520:	e0bffe17 	ldw	r2,-8(fp)
    4524:	10c00a8d 	sth	r3,42(r2)
        return click;
    4528:	e0bffd83 	ldbu	r2,-10(fp)
}
    452c:	e037883a 	mov	sp,fp
    4530:	df000017 	ldw	fp,0(sp)
    4534:	dec00104 	addi	sp,sp,4
    4538:	f800283a 	ret

0000453c <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    453c:	defffd04 	addi	sp,sp,-12
    4540:	df000215 	stw	fp,8(sp)
    4544:	df000204 	addi	fp,sp,8
    4548:	e13ffe15 	stw	r4,-8(fp)
    454c:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    4550:	e0bfff17 	ldw	r2,-4(fp)
    4554:	e0fffe17 	ldw	r3,-8(fp)
    4558:	10800584 	addi	r2,r2,22
    455c:	1085883a 	add	r2,r2,r2
    4560:	1885883a 	add	r2,r3,r2
    4564:	1080000b 	ldhu	r2,0(r2)
}
    4568:	e037883a 	mov	sp,fp
    456c:	df000017 	ldw	fp,0(sp)
    4570:	dec00104 	addi	sp,sp,4
    4574:	f800283a 	ret

00004578 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4578:	defff904 	addi	sp,sp,-28
    457c:	dfc00615 	stw	ra,24(sp)
    4580:	df000515 	stw	fp,20(sp)
    4584:	df000504 	addi	fp,sp,20
    4588:	e13ffd15 	stw	r4,-12(fp)
    458c:	e17ffe15 	stw	r5,-8(fp)
    4590:	3005883a 	mov	r2,r6
    4594:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4598:	e0bffe17 	ldw	r2,-8(fp)
    459c:	10c00084 	addi	r3,r2,2
    45a0:	e0bffd17 	ldw	r2,-12(fp)
    45a4:	10801f83 	ldbu	r2,126(r2)
    45a8:	11000044 	addi	r4,r2,1
    45ac:	200b883a 	mov	r5,r4
    45b0:	e13ffd17 	ldw	r4,-12(fp)
    45b4:	21401f85 	stb	r5,126(r4)
    45b8:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    45bc:	e0bffd17 	ldw	r2,-12(fp)
    45c0:	10c00317 	ldw	r3,12(r2)
    45c4:	e0bffd17 	ldw	r2,-12(fp)
    45c8:	10800403 	ldbu	r2,16(r2)
    45cc:	11003fcc 	andi	r4,r2,255
    45d0:	e0bffd17 	ldw	r2,-12(fp)
    45d4:	10800503 	ldbu	r2,20(r2)
    45d8:	11403fcc 	andi	r5,r2,255
    45dc:	e1bfff0b 	ldhu	r6,-4(fp)
    45e0:	e0bffe17 	ldw	r2,-8(fp)
    45e4:	d8800015 	stw	r2,0(sp)
    45e8:	300f883a 	mov	r7,r6
    45ec:	280d883a 	mov	r6,r5
    45f0:	200b883a 	mov	r5,r4
    45f4:	1809883a 	mov	r4,r3
    45f8:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    45fc:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    4600:	e0bffc03 	ldbu	r2,-16(fp)
}
    4604:	e037883a 	mov	sp,fp
    4608:	dfc00117 	ldw	ra,4(sp)
    460c:	df000017 	ldw	fp,0(sp)
    4610:	dec00204 	addi	sp,sp,8
    4614:	f800283a 	ret

00004618 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    4618:	defff904 	addi	sp,sp,-28
    461c:	dfc00615 	stw	ra,24(sp)
    4620:	df000515 	stw	fp,20(sp)
    4624:	df000504 	addi	fp,sp,20
    4628:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    462c:	00800244 	movi	r2,9
    4630:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4634:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4638:	00800244 	movi	r2,9
    463c:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    4640:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4644:	008003c4 	movi	r2,15
    4648:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    464c:	00800104 	movi	r2,4
    4650:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    4654:	00800104 	movi	r2,4
    4658:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    465c:	00800804 	movi	r2,32
    4660:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    4664:	00800804 	movi	r2,32
    4668:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    466c:	00bfe004 	movi	r2,-128
    4670:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4674:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4678:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    467c:	01800344 	movi	r6,13
    4680:	e17ffb04 	addi	r5,fp,-20
    4684:	e13fff17 	ldw	r4,-4(fp)
    4688:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    468c:	e0bfff17 	ldw	r2,-4(fp)
    4690:	10800817 	ldw	r2,32(r2)
    4694:	10000326 	beq	r2,zero,46a4 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4698:	e0bfff17 	ldw	r2,-4(fp)
    469c:	10800817 	ldw	r2,32(r2)
    46a0:	103ee83a 	callr	r2
}
    46a4:	0001883a 	nop
    46a8:	e037883a 	mov	sp,fp
    46ac:	dfc00117 	ldw	ra,4(sp)
    46b0:	df000017 	ldw	fp,0(sp)
    46b4:	dec00204 	addi	sp,sp,8
    46b8:	f800283a 	ret

000046bc <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    46bc:	defff904 	addi	sp,sp,-28
    46c0:	dfc00615 	stw	ra,24(sp)
    46c4:	df000515 	stw	fp,20(sp)
    46c8:	df000504 	addi	fp,sp,20
    46cc:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    46d0:	00800244 	movi	r2,9
    46d4:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    46d8:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    46dc:	00800244 	movi	r2,9
    46e0:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    46e4:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    46e8:	008003c4 	movi	r2,15
    46ec:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    46f0:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    46f4:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    46f8:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    46fc:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    4700:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4704:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4708:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    470c:	01800344 	movi	r6,13
    4710:	e17ffb04 	addi	r5,fp,-20
    4714:	e13fff17 	ldw	r4,-4(fp)
    4718:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
}
    471c:	0001883a 	nop
    4720:	e037883a 	mov	sp,fp
    4724:	dfc00117 	ldw	ra,4(sp)
    4728:	df000017 	ldw	fp,0(sp)
    472c:	dec00204 	addi	sp,sp,8
    4730:	f800283a 	ret

00004734 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4734:	defff504 	addi	sp,sp,-44
    4738:	dfc00a15 	stw	ra,40(sp)
    473c:	df000915 	stw	fp,36(sp)
    4740:	df000904 	addi	fp,sp,36
    4744:	e13ffb15 	stw	r4,-20(fp)
    4748:	3009883a 	mov	r4,r6
    474c:	3807883a 	mov	r3,r7
    4750:	e0800217 	ldw	r2,8(fp)
    4754:	e17ffc05 	stb	r5,-16(fp)
    4758:	e13ffd05 	stb	r4,-12(fp)
    475c:	e0fffe05 	stb	r3,-8(fp)
    4760:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4764:	00800244 	movi	r2,9
    4768:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    476c:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4770:	00800244 	movi	r2,9
    4774:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4778:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    477c:	008003c4 	movi	r2,15
    4780:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    4784:	e0bffc03 	ldbu	r2,-16(fp)
    4788:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    478c:	e0bffd03 	ldbu	r2,-12(fp)
    4790:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    4794:	e0bffe03 	ldbu	r2,-8(fp)
    4798:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    479c:	e0bfff03 	ldbu	r2,-4(fp)
    47a0:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    47a4:	00bfffc4 	movi	r2,-1
    47a8:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    47ac:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    47b0:	00bfffc4 	movi	r2,-1
    47b4:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    47b8:	01800344 	movi	r6,13
    47bc:	e17ff704 	addi	r5,fp,-36
    47c0:	e13ffb17 	ldw	r4,-20(fp)
    47c4:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
}
    47c8:	0001883a 	nop
    47cc:	e037883a 	mov	sp,fp
    47d0:	dfc00117 	ldw	ra,4(sp)
    47d4:	df000017 	ldw	fp,0(sp)
    47d8:	dec00204 	addi	sp,sp,8
    47dc:	f800283a 	ret

000047e0 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    47e0:	defffe04 	addi	sp,sp,-8
    47e4:	df000115 	stw	fp,4(sp)
    47e8:	df000104 	addi	fp,sp,4
    47ec:	e13fff15 	stw	r4,-4(fp)
    47f0:	e0bfff17 	ldw	r2,-4(fp)
    47f4:	10000005 	stb	zero,0(r2)
    47f8:	e0bfff17 	ldw	r2,-4(fp)
    47fc:	10c00043 	ldbu	r3,1(r2)
    4800:	1806703a 	and	r3,r3,zero
    4804:	10c00045 	stb	r3,1(r2)
    4808:	10c00083 	ldbu	r3,2(r2)
    480c:	1806703a 	and	r3,r3,zero
    4810:	10c00085 	stb	r3,2(r2)
    4814:	10c000c3 	ldbu	r3,3(r2)
    4818:	1806703a 	and	r3,r3,zero
    481c:	10c000c5 	stb	r3,3(r2)
    4820:	10c00103 	ldbu	r3,4(r2)
    4824:	1806703a 	and	r3,r3,zero
    4828:	10c00105 	stb	r3,4(r2)
        };
    482c:	0001883a 	nop
    4830:	e037883a 	mov	sp,fp
    4834:	df000017 	ldw	fp,0(sp)
    4838:	dec00104 	addi	sp,sp,4
    483c:	f800283a 	ret

00004840 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    4840:	defffe04 	addi	sp,sp,-8
    4844:	df000115 	stw	fp,4(sp)
    4848:	df000104 	addi	fp,sp,4
    484c:	e13fff15 	stw	r4,-4(fp)
    4850:	e0bfff17 	ldw	r2,-4(fp)
    4854:	10000015 	stw	zero,0(r2)
    4858:	e0bfff17 	ldw	r2,-4(fp)
    485c:	10000105 	stb	zero,4(r2)
    4860:	e0bfff17 	ldw	r2,-4(fp)
    4864:	10000145 	stb	zero,5(r2)
        };
    4868:	0001883a 	nop
    486c:	e037883a 	mov	sp,fp
    4870:	df000017 	ldw	fp,0(sp)
    4874:	dec00104 	addi	sp,sp,4
    4878:	f800283a 	ret

0000487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    487c:	defffd04 	addi	sp,sp,-12
    4880:	df000215 	stw	fp,8(sp)
    4884:	df000204 	addi	fp,sp,8
    4888:	e13ffe15 	stw	r4,-8(fp)
    488c:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4890:	e0bfff17 	ldw	r2,-4(fp)
    4894:	10c00043 	ldbu	r3,1(r2)
    4898:	11000083 	ldbu	r4,2(r2)
    489c:	2008923a 	slli	r4,r4,8
    48a0:	20c6b03a 	or	r3,r4,r3
    48a4:	110000c3 	ldbu	r4,3(r2)
    48a8:	2008943a 	slli	r4,r4,16
    48ac:	20c6b03a 	or	r3,r4,r3
    48b0:	10800103 	ldbu	r2,4(r2)
    48b4:	1004963a 	slli	r2,r2,24
    48b8:	10c4b03a 	or	r2,r2,r3
    48bc:	1007883a 	mov	r3,r2
    48c0:	e0bffe17 	ldw	r2,-8(fp)
    48c4:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    48c8:	e0bfff17 	ldw	r2,-4(fp)
    48cc:	10c00003 	ldbu	r3,0(r2)
    48d0:	e0bffe17 	ldw	r2,-8(fp)
    48d4:	10c00145 	stb	r3,5(r2)
    48d8:	e0bffe17 	ldw	r2,-8(fp)
    48dc:	10c00143 	ldbu	r3,5(r2)
    48e0:	e0bffe17 	ldw	r2,-8(fp)
    48e4:	10c00105 	stb	r3,4(r2)
        };
    48e8:	0001883a 	nop
    48ec:	e037883a 	mov	sp,fp
    48f0:	df000017 	ldw	fp,0(sp)
    48f4:	dec00104 	addi	sp,sp,4
    48f8:	f800283a 	ret

000048fc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    48fc:	defffe04 	addi	sp,sp,-8
    4900:	df000115 	stw	fp,4(sp)
    4904:	df000104 	addi	fp,sp,4
    4908:	e13fff15 	stw	r4,-4(fp)
    490c:	e0bfff17 	ldw	r2,-4(fp)
    4910:	10000015 	stw	zero,0(r2)
    4914:	e0bfff17 	ldw	r2,-4(fp)
    4918:	10000105 	stb	zero,4(r2)
    491c:	e0bfff17 	ldw	r2,-4(fp)
    4920:	1000018d 	sth	zero,6(r2)
        };
    4924:	0001883a 	nop
    4928:	e037883a 	mov	sp,fp
    492c:	df000017 	ldw	fp,0(sp)
    4930:	dec00104 	addi	sp,sp,4
    4934:	f800283a 	ret

00004938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4938:	defffd04 	addi	sp,sp,-12
    493c:	df000215 	stw	fp,8(sp)
    4940:	df000204 	addi	fp,sp,8
    4944:	e13ffe15 	stw	r4,-8(fp)
    4948:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    494c:	e0bfff17 	ldw	r2,-4(fp)
    4950:	10c00043 	ldbu	r3,1(r2)
    4954:	11000083 	ldbu	r4,2(r2)
    4958:	2008923a 	slli	r4,r4,8
    495c:	20c6b03a 	or	r3,r4,r3
    4960:	110000c3 	ldbu	r4,3(r2)
    4964:	2008943a 	slli	r4,r4,16
    4968:	20c6b03a 	or	r3,r4,r3
    496c:	10800103 	ldbu	r2,4(r2)
    4970:	1004963a 	slli	r2,r2,24
    4974:	10c4b03a 	or	r2,r2,r3
    4978:	1007883a 	mov	r3,r2
    497c:	e0bffe17 	ldw	r2,-8(fp)
    4980:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    4984:	e0bffe17 	ldw	r2,-8(fp)
    4988:	1000018d 	sth	zero,6(r2)
        };
    498c:	0001883a 	nop
    4990:	e037883a 	mov	sp,fp
    4994:	df000017 	ldw	fp,0(sp)
    4998:	dec00104 	addi	sp,sp,4
    499c:	f800283a 	ret

000049a0 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    49a0:	defffb04 	addi	sp,sp,-20
    49a4:	df000415 	stw	fp,16(sp)
    49a8:	df000404 	addi	fp,sp,16
    49ac:	e13ffc15 	stw	r4,-16(fp)
    49b0:	e17ffd15 	stw	r5,-12(fp)
    49b4:	e1bffe15 	stw	r6,-8(fp)
    49b8:	3805883a 	mov	r2,r7
    49bc:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    49c0:	e0bffc17 	ldw	r2,-16(fp)
    49c4:	10800103 	ldbu	r2,4(r2)
    49c8:	10803fcc 	andi	r2,r2,255
    49cc:	10000326 	beq	r2,zero,49dc <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    49d0:	10800060 	cmpeqi	r2,r2,1
    49d4:	10000a1e 	bne	r2,zero,4a00 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    49d8:	00002906 	br	4a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    49dc:	e0bffc17 	ldw	r2,-16(fp)
    49e0:	e0ffff0b 	ldhu	r3,-4(fp)
    49e4:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    49e8:	e0bffc17 	ldw	r2,-16(fp)
    49ec:	10800103 	ldbu	r2,4(r2)
    49f0:	10800044 	addi	r2,r2,1
    49f4:	1007883a 	mov	r3,r2
    49f8:	e0bffc17 	ldw	r2,-16(fp)
    49fc:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    4a00:	e0bffc17 	ldw	r2,-16(fp)
    4a04:	1080018b 	ldhu	r2,6(r2)
    4a08:	10bfffcc 	andi	r2,r2,65535
    4a0c:	10001626 	beq	r2,zero,4a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a10:	e0bffe17 	ldw	r2,-8(fp)
    4a14:	1080000b 	ldhu	r2,0(r2)
    4a18:	10bfffcc 	andi	r2,r2,65535
    4a1c:	10001226 	beq	r2,zero,4a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a20:	e0bffc17 	ldw	r2,-16(fp)
    4a24:	1080018b 	ldhu	r2,6(r2)
    4a28:	10bfffc4 	addi	r2,r2,-1
    4a2c:	1007883a 	mov	r3,r2
    4a30:	e0bffc17 	ldw	r2,-16(fp)
    4a34:	10c0018d 	sth	r3,6(r2)
    4a38:	e0bffd17 	ldw	r2,-12(fp)
    4a3c:	10800017 	ldw	r2,0(r2)
    4a40:	10c00044 	addi	r3,r2,1
    4a44:	e0bffd17 	ldw	r2,-12(fp)
    4a48:	10c00015 	stw	r3,0(r2)
    4a4c:	e0bffe17 	ldw	r2,-8(fp)
    4a50:	1080000b 	ldhu	r2,0(r2)
    4a54:	10bfffc4 	addi	r2,r2,-1
    4a58:	1007883a 	mov	r3,r2
    4a5c:	e0bffe17 	ldw	r2,-8(fp)
    4a60:	10c0000d 	sth	r3,0(r2)
    4a64:	003fe606 	br	4a00 <__alt_data_end+0xfc004a00>

                                if(!countDown)
    4a68:	e0bffc17 	ldw	r2,-16(fp)
    4a6c:	1080018b 	ldhu	r2,6(r2)
    4a70:	10bfffcc 	andi	r2,r2,65535
    4a74:	1000021e 	bne	r2,zero,4a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4a78:	e0bffc17 	ldw	r2,-16(fp)
    4a7c:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    4a80:	e0bffc17 	ldw	r2,-16(fp)
    4a84:	1080018b 	ldhu	r2,6(r2)
    4a88:	10bfffcc 	andi	r2,r2,65535
    4a8c:	1005003a 	cmpeq	r2,r2,zero
        };
    4a90:	e037883a 	mov	sp,fp
    4a94:	df000017 	ldw	fp,0(sp)
    4a98:	dec00104 	addi	sp,sp,4
    4a9c:	f800283a 	ret

00004aa0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4aa0:	defffb04 	addi	sp,sp,-20
    4aa4:	df000415 	stw	fp,16(sp)
    4aa8:	df000404 	addi	fp,sp,16
    4aac:	e13ffc15 	stw	r4,-16(fp)
    4ab0:	2809883a 	mov	r4,r5
    4ab4:	3007883a 	mov	r3,r6
    4ab8:	3805883a 	mov	r2,r7
    4abc:	e13ffd05 	stb	r4,-12(fp)
    4ac0:	e0fffe05 	stb	r3,-8(fp)
    4ac4:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4ac8:	0005883a 	mov	r2,zero
        }
    4acc:	e037883a 	mov	sp,fp
    4ad0:	df000017 	ldw	fp,0(sp)
    4ad4:	dec00104 	addi	sp,sp,4
    4ad8:	f800283a 	ret

00004adc <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4adc:	defffb04 	addi	sp,sp,-20
    4ae0:	df000415 	stw	fp,16(sp)
    4ae4:	df000404 	addi	fp,sp,16
    4ae8:	e13ffc15 	stw	r4,-16(fp)
    4aec:	2809883a 	mov	r4,r5
    4af0:	3007883a 	mov	r3,r6
    4af4:	3805883a 	mov	r2,r7
    4af8:	e13ffd05 	stb	r4,-12(fp)
    4afc:	e0fffe05 	stb	r3,-8(fp)
    4b00:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4b04:	0005883a 	mov	r2,zero
        }
    4b08:	e037883a 	mov	sp,fp
    4b0c:	df000017 	ldw	fp,0(sp)
    4b10:	dec00104 	addi	sp,sp,4
    4b14:	f800283a 	ret

00004b18 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4b18:	defffe04 	addi	sp,sp,-8
    4b1c:	df000115 	stw	fp,4(sp)
    4b20:	df000104 	addi	fp,sp,4
    4b24:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b28:	0005883a 	mov	r2,zero
        }
    4b2c:	e037883a 	mov	sp,fp
    4b30:	df000017 	ldw	fp,0(sp)
    4b34:	dec00104 	addi	sp,sp,4
    4b38:	f800283a 	ret

00004b3c <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4b3c:	defffe04 	addi	sp,sp,-8
    4b40:	df000115 	stw	fp,4(sp)
    4b44:	df000104 	addi	fp,sp,4
    4b48:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b4c:	0005883a 	mov	r2,zero
        }
    4b50:	e037883a 	mov	sp,fp
    4b54:	df000017 	ldw	fp,0(sp)
    4b58:	dec00104 	addi	sp,sp,4
    4b5c:	f800283a 	ret

00004b60 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    4b60:	defffe04 	addi	sp,sp,-8
    4b64:	df000115 	stw	fp,4(sp)
    4b68:	df000104 	addi	fp,sp,4
    4b6c:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b70:	0005883a 	mov	r2,zero
        }
    4b74:	e037883a 	mov	sp,fp
    4b78:	df000017 	ldw	fp,0(sp)
    4b7c:	dec00104 	addi	sp,sp,4
    4b80:	f800283a 	ret

00004b84 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4b84:	defffd04 	addi	sp,sp,-12
    4b88:	df000215 	stw	fp,8(sp)
    4b8c:	df000204 	addi	fp,sp,8
    4b90:	e13ffe15 	stw	r4,-8(fp)
    4b94:	2805883a 	mov	r2,r5
    4b98:	e0bfff05 	stb	r2,-4(fp)
                return;
    4b9c:	0001883a 	nop
        } // Note used for hubs only!
    4ba0:	e037883a 	mov	sp,fp
    4ba4:	df000017 	ldw	fp,0(sp)
    4ba8:	dec00104 	addi	sp,sp,4
    4bac:	f800283a 	ret

00004bb0 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    4bb0:	defffc04 	addi	sp,sp,-16
    4bb4:	df000315 	stw	fp,12(sp)
    4bb8:	df000304 	addi	fp,sp,12
    4bbc:	e13ffd15 	stw	r4,-12(fp)
    4bc0:	2807883a 	mov	r3,r5
    4bc4:	3005883a 	mov	r2,r6
    4bc8:	e0fffe0d 	sth	r3,-8(fp)
    4bcc:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    4bd0:	0005883a 	mov	r2,zero
        }
    4bd4:	e037883a 	mov	sp,fp
    4bd8:	df000017 	ldw	fp,0(sp)
    4bdc:	dec00104 	addi	sp,sp,4
    4be0:	f800283a 	ret

00004be4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    4be4:	defffd04 	addi	sp,sp,-12
    4be8:	df000215 	stw	fp,8(sp)
    4bec:	df000204 	addi	fp,sp,8
    4bf0:	e13ffe15 	stw	r4,-8(fp)
    4bf4:	2805883a 	mov	r2,r5
    4bf8:	e0bfff05 	stb	r2,-4(fp)
                return false;
    4bfc:	0005883a 	mov	r2,zero
        }
    4c00:	e037883a 	mov	sp,fp
    4c04:	df000017 	ldw	fp,0(sp)
    4c08:	dec00104 	addi	sp,sp,4
    4c0c:	f800283a 	ret

00004c10 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    4c10:	defffd04 	addi	sp,sp,-12
    4c14:	df000215 	stw	fp,8(sp)
    4c18:	df000204 	addi	fp,sp,8
    4c1c:	e13ffe15 	stw	r4,-8(fp)
    4c20:	2805883a 	mov	r2,r5
    4c24:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4c28:	00800044 	movi	r2,1
        }
    4c2c:	e037883a 	mov	sp,fp
    4c30:	df000017 	ldw	fp,0(sp)
    4c34:	dec00104 	addi	sp,sp,4
    4c38:	f800283a 	ret

00004c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4c3c:	defffc04 	addi	sp,sp,-16
    4c40:	df000315 	stw	fp,12(sp)
    4c44:	df000304 	addi	fp,sp,12
    4c48:	e13ffe15 	stw	r4,-8(fp)
    4c4c:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4c50:	e03ffd05 	stb	zero,-12(fp)
    4c54:	e0bffd03 	ldbu	r2,-12(fp)
    4c58:	10800428 	cmpgeui	r2,r2,16
    4c5c:	1000161e 	bne	r2,zero,4cb8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    4c60:	e0bffd03 	ldbu	r2,-12(fp)
    4c64:	e0fffe17 	ldw	r3,-8(fp)
    4c68:	10800784 	addi	r2,r2,30
    4c6c:	1085883a 	add	r2,r2,r2
    4c70:	1085883a 	add	r2,r2,r2
    4c74:	1885883a 	add	r2,r3,r2
    4c78:	10800017 	ldw	r2,0(r2)
    4c7c:	10000a1e 	bne	r2,zero,4ca8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    4c80:	e0bffd03 	ldbu	r2,-12(fp)
    4c84:	e0fffe17 	ldw	r3,-8(fp)
    4c88:	10800784 	addi	r2,r2,30
    4c8c:	1085883a 	add	r2,r2,r2
    4c90:	1085883a 	add	r2,r2,r2
    4c94:	1885883a 	add	r2,r3,r2
    4c98:	e0ffff17 	ldw	r3,-4(fp)
    4c9c:	10c00015 	stw	r3,0(r2)
                                return 0;
    4ca0:	0005883a 	mov	r2,zero
    4ca4:	00000506 	br	4cbc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4ca8:	e0bffd03 	ldbu	r2,-12(fp)
    4cac:	10800044 	addi	r2,r2,1
    4cb0:	e0bffd05 	stb	r2,-12(fp)
    4cb4:	003fe706 	br	4c54 <__alt_data_end+0xfc004c54>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    4cb8:	00bff4c4 	movi	r2,-45
        };
    4cbc:	e037883a 	mov	sp,fp
    4cc0:	df000017 	ldw	fp,0(sp)
    4cc4:	dec00104 	addi	sp,sp,4
    4cc8:	f800283a 	ret

00004ccc <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    4ccc:	defffa04 	addi	sp,sp,-24
    4cd0:	df000515 	stw	fp,20(sp)
    4cd4:	df000504 	addi	fp,sp,20
    4cd8:	e13ffb15 	stw	r4,-20(fp)
    4cdc:	3009883a 	mov	r4,r6
    4ce0:	3807883a 	mov	r3,r7
    4ce4:	e0800117 	ldw	r2,4(fp)
    4ce8:	e17ffc05 	stb	r5,-16(fp)
    4cec:	e13ffd05 	stb	r4,-12(fp)
    4cf0:	e0fffe05 	stb	r3,-8(fp)
    4cf4:	e0bfff05 	stb	r2,-4(fp)
        };
    4cf8:	0001883a 	nop
    4cfc:	e037883a 	mov	sp,fp
    4d00:	df000017 	ldw	fp,0(sp)
    4d04:	dec00104 	addi	sp,sp,4
    4d08:	f800283a 	ret

00004d0c <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4d0c:	defffe04 	addi	sp,sp,-8
    4d10:	df000115 	stw	fp,4(sp)
    4d14:	df000104 	addi	fp,sp,4
    4d18:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4d1c:	e0bfff17 	ldw	r2,-4(fp)
    4d20:	10800403 	ldbu	r2,16(r2)
        };
    4d24:	e037883a 	mov	sp,fp
    4d28:	df000017 	ldw	fp,0(sp)
    4d2c:	dec00104 	addi	sp,sp,4
    4d30:	f800283a 	ret

00004d34 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4d34:	defffe04 	addi	sp,sp,-8
    4d38:	df000115 	stw	fp,4(sp)
    4d3c:	df000104 	addi	fp,sp,4
    4d40:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4d44:	e0bfff17 	ldw	r2,-4(fp)
    4d48:	10800943 	ldbu	r2,37(r2)
        };
    4d4c:	e037883a 	mov	sp,fp
    4d50:	df000017 	ldw	fp,0(sp)
    4d54:	dec00104 	addi	sp,sp,4
    4d58:	f800283a 	ret

00004d5c <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4d5c:	defffc04 	addi	sp,sp,-16
    4d60:	df000315 	stw	fp,12(sp)
    4d64:	df000304 	addi	fp,sp,12
    4d68:	e13ffd15 	stw	r4,-12(fp)
    4d6c:	2807883a 	mov	r3,r5
    4d70:	3005883a 	mov	r2,r6
    4d74:	e0fffe0d 	sth	r3,-8(fp)
    4d78:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4d7c:	e0bffe0b 	ldhu	r2,-8(fp)
    4d80:	108117a0 	cmpeqi	r2,r2,1118
    4d84:	10000f1e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4d88:	e0bffe0b 	ldhu	r2,-8(fp)
    4d8c:	1081ce20 	cmpeqi	r2,r2,1848
    4d90:	10000c1e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4d94:	e0bffe0b 	ldhu	r2,-8(fp)
    4d98:	10839be0 	cmpeqi	r2,r2,3695
    4d9c:	1000091e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4da0:	e0bffe0b 	ldhu	r2,-8(fp)
    4da4:	1083c360 	cmpeqi	r2,r2,3853
    4da8:	1000061e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4dac:	e0bffe0b 	ldhu	r2,-8(fp)
    4db0:	10854ca0 	cmpeqi	r2,r2,5426
    4db4:	1000031e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4db8:	e0bffe0b 	ldhu	r2,-8(fp)
    4dbc:	10893198 	cmpnei	r2,r2,9414
    4dc0:	10002c1e 	bne	r2,zero,4e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    4dc4:	e0bfff0b 	ldhu	r2,-4(fp)
    4dc8:	1080b460 	cmpeqi	r2,r2,721
    4dcc:	1000271e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    4dd0:	e0bfff0b 	ldhu	r2,-4(fp)
    4dd4:	1080b760 	cmpeqi	r2,r2,733
    4dd8:	1000241e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ddc:	e0bfff0b 	ldhu	r2,-4(fp)
    4de0:	1080b8e0 	cmpeqi	r2,r2,739
    4de4:	1000211e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4de8:	e0bfff0b 	ldhu	r2,-4(fp)
    4dec:	1080baa0 	cmpeqi	r2,r2,746
    4df0:	10001e1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4df4:	e0bfff0b 	ldhu	r2,-4(fp)
    4df8:	10928060 	cmpeqi	r2,r2,18945
    4dfc:	10001b1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    4e00:	e0bfff0b 	ldhu	r2,-4(fp)
    4e04:	10804e60 	cmpeqi	r2,r2,313
    4e08:	1000181e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e0c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e10:	108051a0 	cmpeqi	r2,r2,326
    4e14:	1000151e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e18:	e0bfff0b 	ldhu	r2,-4(fp)
    4e1c:	108019e0 	cmpeqi	r2,r2,103
    4e20:	1000121e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e24:	e0bfff0b 	ldhu	r2,-4(fp)
    4e28:	108280e0 	cmpeqi	r2,r2,2563
    4e2c:	10000f1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4e30:	e0bfff0b 	ldhu	r2,-4(fp)
    4e34:	109506a0 	cmpeqi	r2,r2,21530
    4e38:	10000c1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e3c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e40:	10950aa0 	cmpeqi	r2,r2,21546
    4e44:	1000091e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e48:	e0bfff0b 	ldhu	r2,-4(fp)
    4e4c:	10950ea0 	cmpeqi	r2,r2,21562
    4e50:	1000061e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e54:	e0bfff0b 	ldhu	r2,-4(fp)
    4e58:	1082c2a0 	cmpeqi	r2,r2,2826
    4e5c:	1000031e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4e60:	e0bfff0b 	ldhu	r2,-4(fp)
    4e64:	1082c498 	cmpnei	r2,r2,2834
    4e68:	1000021e 	bne	r2,zero,4e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4e6c:	00800044 	movi	r2,1
    4e70:	00000106 	br	4e78 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4e74:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4e78:	e037883a 	mov	sp,fp
    4e7c:	df000017 	ldw	fp,0(sp)
    4e80:	dec00104 	addi	sp,sp,4
    4e84:	f800283a 	ret

00004e88 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4e88:	defffe04 	addi	sp,sp,-8
    4e8c:	df000115 	stw	fp,4(sp)
    4e90:	df000104 	addi	fp,sp,4
    4e94:	e13fff15 	stw	r4,-4(fp)
    4e98:	008000b4 	movhi	r2,2
    4e9c:	10932904 	addi	r2,r2,19620
    4ea0:	e0ffff17 	ldw	r3,-4(fp)
    4ea4:	18800015 	stw	r2,0(r3)
    4ea8:	0001883a 	nop
    4eac:	e037883a 	mov	sp,fp
    4eb0:	df000017 	ldw	fp,0(sp)
    4eb4:	dec00104 	addi	sp,sp,4
    4eb8:	f800283a 	ret

00004ebc <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4ebc:	defffe04 	addi	sp,sp,-8
    4ec0:	df000115 	stw	fp,4(sp)
    4ec4:	df000104 	addi	fp,sp,4
    4ec8:	e13fff15 	stw	r4,-4(fp)
    4ecc:	008000b4 	movhi	r2,2
    4ed0:	10932304 	addi	r2,r2,19596
    4ed4:	e0ffff17 	ldw	r3,-4(fp)
    4ed8:	18800015 	stw	r2,0(r3)
    4edc:	0001883a 	nop
    4ee0:	e037883a 	mov	sp,fp
    4ee4:	df000017 	ldw	fp,0(sp)
    4ee8:	dec00104 	addi	sp,sp,4
    4eec:	f800283a 	ret

00004ef0 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4ef0:	defffe04 	addi	sp,sp,-8
    4ef4:	df000115 	stw	fp,4(sp)
    4ef8:	df000104 	addi	fp,sp,4
    4efc:	e13fff15 	stw	r4,-4(fp)
    4f00:	008000b4 	movhi	r2,2
    4f04:	10932604 	addi	r2,r2,19608
    4f08:	e0ffff17 	ldw	r3,-4(fp)
    4f0c:	18800015 	stw	r2,0(r3)
    4f10:	0001883a 	nop
    4f14:	e037883a 	mov	sp,fp
    4f18:	df000017 	ldw	fp,0(sp)
    4f1c:	dec00104 	addi	sp,sp,4
    4f20:	f800283a 	ret

00004f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4f24:	defffc04 	addi	sp,sp,-16
    4f28:	dfc00315 	stw	ra,12(sp)
    4f2c:	df000215 	stw	fp,8(sp)
    4f30:	df000204 	addi	fp,sp,8
    4f34:	e13ffe15 	stw	r4,-8(fp)
    4f38:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4f3c:	e0bffe17 	ldw	r2,-8(fp)
    4f40:	1009883a 	mov	r4,r2
    4f44:	0004ef00 	call	4ef0 <_ZN13USBReadParserC1Ev>
    4f48:	008000b4 	movhi	r2,2
    4f4c:	10932004 	addi	r2,r2,19584
    4f50:	e0fffe17 	ldw	r3,-8(fp)
    4f54:	18800015 	stw	r2,0(r3)
    4f58:	e0bffe17 	ldw	r2,-8(fp)
    4f5c:	e0ffff17 	ldw	r3,-4(fp)
    4f60:	10c00115 	stw	r3,4(r2)
    4f64:	e0bffe17 	ldw	r2,-8(fp)
    4f68:	10800204 	addi	r2,r2,8
    4f6c:	1009883a 	mov	r4,r2
    4f70:	00047e00 	call	47e0 <_ZN16MultiValueBufferC1Ev>
    4f74:	e0bffe17 	ldw	r2,-8(fp)
    4f78:	10800404 	addi	r2,r2,16
    4f7c:	1009883a 	mov	r4,r2
    4f80:	00048400 	call	4840 <_ZN20MultiByteValueParserC1Ev>
    4f84:	e0bffe17 	ldw	r2,-8(fp)
    4f88:	10800604 	addi	r2,r2,24
    4f8c:	1009883a 	mov	r4,r2
    4f90:	00048fc0 	call	48fc <_ZN11ByteSkipperC1Ev>
    4f94:	e0bffe17 	ldw	r2,-8(fp)
    4f98:	10000c05 	stb	zero,48(r2)
    4f9c:	e0bffe17 	ldw	r2,-8(fp)
    4fa0:	10000c45 	stb	zero,49(r2)
    4fa4:	e0bffe17 	ldw	r2,-8(fp)
    4fa8:	10000c85 	stb	zero,50(r2)
    4fac:	e0bffe17 	ldw	r2,-8(fp)
    4fb0:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    4fb4:	e0bffe17 	ldw	r2,-8(fp)
    4fb8:	10c00804 	addi	r3,r2,32
    4fbc:	e0bffe17 	ldw	r2,-8(fp)
    4fc0:	19803fcc 	andi	r6,r3,255
    4fc4:	11000243 	ldbu	r4,9(r2)
    4fc8:	2008703a 	and	r4,r4,zero
    4fcc:	200b883a 	mov	r5,r4
    4fd0:	3009883a 	mov	r4,r6
    4fd4:	2908b03a 	or	r4,r5,r4
    4fd8:	11000245 	stb	r4,9(r2)
    4fdc:	1808d23a 	srli	r4,r3,8
    4fe0:	21803fcc 	andi	r6,r4,255
    4fe4:	11000283 	ldbu	r4,10(r2)
    4fe8:	2008703a 	and	r4,r4,zero
    4fec:	200b883a 	mov	r5,r4
    4ff0:	3009883a 	mov	r4,r6
    4ff4:	2908b03a 	or	r4,r5,r4
    4ff8:	11000285 	stb	r4,10(r2)
    4ffc:	1808d43a 	srli	r4,r3,16
    5000:	21803fcc 	andi	r6,r4,255
    5004:	110002c3 	ldbu	r4,11(r2)
    5008:	2008703a 	and	r4,r4,zero
    500c:	200b883a 	mov	r5,r4
    5010:	3009883a 	mov	r4,r6
    5014:	2908b03a 	or	r4,r5,r4
    5018:	110002c5 	stb	r4,11(r2)
    501c:	180ad63a 	srli	r5,r3,24
    5020:	10c00303 	ldbu	r3,12(r2)
    5024:	1806703a 	and	r3,r3,zero
    5028:	1809883a 	mov	r4,r3
    502c:	2807883a 	mov	r3,r5
    5030:	20c6b03a 	or	r3,r4,r3
    5034:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    5038:	e0bffe17 	ldw	r2,-8(fp)
    503c:	10c00404 	addi	r3,r2,16
    5040:	e0bffe17 	ldw	r2,-8(fp)
    5044:	10800204 	addi	r2,r2,8
    5048:	100b883a 	mov	r5,r2
    504c:	1809883a 	mov	r4,r3
    5050:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    5054:	e0bffe17 	ldw	r2,-8(fp)
    5058:	10c00604 	addi	r3,r2,24
    505c:	e0bffe17 	ldw	r2,-8(fp)
    5060:	10800204 	addi	r2,r2,8
    5064:	100b883a 	mov	r5,r2
    5068:	1809883a 	mov	r4,r3
    506c:	00049380 	call	4938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    5070:	0001883a 	nop
    5074:	e037883a 	mov	sp,fp
    5078:	dfc00117 	ldw	ra,4(sp)
    507c:	df000017 	ldw	fp,0(sp)
    5080:	dec00204 	addi	sp,sp,8
    5084:	f800283a 	ret

00005088 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    5088:	defff804 	addi	sp,sp,-32
    508c:	dfc00715 	stw	ra,28(sp)
    5090:	df000615 	stw	fp,24(sp)
    5094:	df000604 	addi	fp,sp,24
    5098:	e13ffc15 	stw	r4,-16(fp)
    509c:	2805883a 	mov	r2,r5
    50a0:	e1bffe15 	stw	r6,-8(fp)
    50a4:	e1ffff15 	stw	r7,-4(fp)
    50a8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    50ac:	e0bffd0b 	ldhu	r2,-12(fp)
    50b0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    50b4:	e0bffe17 	ldw	r2,-8(fp)
    50b8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    50bc:	e0bffa0b 	ldhu	r2,-24(fp)
    50c0:	10bfffcc 	andi	r2,r2,65535
    50c4:	10000a26 	beq	r2,zero,50f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    50c8:	e0bffb04 	addi	r2,fp,-20
    50cc:	e1bffa04 	addi	r6,fp,-24
    50d0:	100b883a 	mov	r5,r2
    50d4:	e13ffc17 	ldw	r4,-16(fp)
    50d8:	00051040 	call	5104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    50dc:	1080005c 	xori	r2,r2,1
    50e0:	10803fcc 	andi	r2,r2,255
    50e4:	1000011e 	bne	r2,zero,50ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    50e8:	003ff406 	br	50bc <__alt_data_end+0xfc0050bc>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    50ec:	0001883a 	nop
}
    50f0:	e037883a 	mov	sp,fp
    50f4:	dfc00117 	ldw	ra,4(sp)
    50f8:	df000017 	ldw	fp,0(sp)
    50fc:	dec00204 	addi	sp,sp,8
    5100:	f800283a 	ret

00005104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    5104:	defff604 	addi	sp,sp,-40
    5108:	dfc00915 	stw	ra,36(sp)
    510c:	df000815 	stw	fp,32(sp)
    5110:	df000804 	addi	fp,sp,32
    5114:	e13ffc15 	stw	r4,-16(fp)
    5118:	e17ffd15 	stw	r5,-12(fp)
    511c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    5120:	e0bffc17 	ldw	r2,-16(fp)
    5124:	10800804 	addi	r2,r2,32
    5128:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    512c:	e0bffc17 	ldw	r2,-16(fp)
    5130:	10800804 	addi	r2,r2,32
    5134:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    5138:	e0bffc17 	ldw	r2,-16(fp)
    513c:	10800c03 	ldbu	r2,48(r2)
    5140:	10803fcc 	andi	r2,r2,255
    5144:	10c00168 	cmpgeui	r3,r2,5
    5148:	1801141e 	bne	r3,zero,559c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    514c:	100690ba 	slli	r3,r2,2
    5150:	00800034 	movhi	r2,0
    5154:	10945904 	addi	r2,r2,20836
    5158:	1885883a 	add	r2,r3,r2
    515c:	10800017 	ldw	r2,0(r2)
    5160:	1000683a 	jmp	r2
    5164:	00005178 	rdprs	zero,zero,325
    5168:	000051ac 	andhi	zero,zero,326
    516c:	00005234 	movhi	zero,328
    5170:	000052c8 	cmpgei	zero,zero,331
    5174:	00005334 	movhi	zero,332
                case 0:
                        theBuffer.valueSize = 2;
    5178:	e0bffc17 	ldw	r2,-16(fp)
    517c:	00c00084 	movi	r3,2
    5180:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    5184:	e0bffc17 	ldw	r2,-16(fp)
    5188:	10c00404 	addi	r3,r2,16
    518c:	e0bffc17 	ldw	r2,-16(fp)
    5190:	10800204 	addi	r2,r2,8
    5194:	100b883a 	mov	r5,r2
    5198:	1809883a 	mov	r4,r3
    519c:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    51a0:	e0bffc17 	ldw	r2,-16(fp)
    51a4:	00c00044 	movi	r3,1
    51a8:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    51ac:	e0bffc17 	ldw	r2,-16(fp)
    51b0:	10800404 	addi	r2,r2,16
    51b4:	e1bffe17 	ldw	r6,-8(fp)
    51b8:	e17ffd17 	ldw	r5,-12(fp)
    51bc:	1009883a 	mov	r4,r2
    51c0:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    51c4:	1080005c 	xori	r2,r2,1
    51c8:	10803fcc 	andi	r2,r2,255
    51cc:	10000226 	beq	r2,zero,51d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    51d0:	0005883a 	mov	r2,zero
    51d4:	0000f206 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    51d8:	e0bffc17 	ldw	r2,-16(fp)
    51dc:	10c00217 	ldw	r3,8(r2)
    51e0:	1806d23a 	srli	r3,r3,8
    51e4:	10800317 	ldw	r2,12(r2)
    51e8:	10803fcc 	andi	r2,r2,255
    51ec:	1004963a 	slli	r2,r2,24
    51f0:	10c4b03a 	or	r2,r2,r3
    51f4:	10c00003 	ldbu	r3,0(r2)
    51f8:	e0bffc17 	ldw	r2,-16(fp)
    51fc:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    5200:	e0bffc17 	ldw	r2,-16(fp)
    5204:	10c00217 	ldw	r3,8(r2)
    5208:	1806d23a 	srli	r3,r3,8
    520c:	10800317 	ldw	r2,12(r2)
    5210:	10803fcc 	andi	r2,r2,255
    5214:	1004963a 	slli	r2,r2,24
    5218:	10c4b03a 	or	r2,r2,r3
    521c:	10c00043 	ldbu	r3,1(r2)
    5220:	e0bffc17 	ldw	r2,-16(fp)
    5224:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    5228:	e0bffc17 	ldw	r2,-16(fp)
    522c:	00c00084 	movi	r3,2
    5230:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    5234:	e0bffc17 	ldw	r2,-16(fp)
    5238:	10800804 	addi	r2,r2,32
    523c:	10c00084 	addi	r3,r2,2
    5240:	e0bffc17 	ldw	r2,-16(fp)
    5244:	19803fcc 	andi	r6,r3,255
    5248:	11000243 	ldbu	r4,9(r2)
    524c:	2008703a 	and	r4,r4,zero
    5250:	200b883a 	mov	r5,r4
    5254:	3009883a 	mov	r4,r6
    5258:	2908b03a 	or	r4,r5,r4
    525c:	11000245 	stb	r4,9(r2)
    5260:	1808d23a 	srli	r4,r3,8
    5264:	21803fcc 	andi	r6,r4,255
    5268:	11000283 	ldbu	r4,10(r2)
    526c:	2008703a 	and	r4,r4,zero
    5270:	200b883a 	mov	r5,r4
    5274:	3009883a 	mov	r4,r6
    5278:	2908b03a 	or	r4,r5,r4
    527c:	11000285 	stb	r4,10(r2)
    5280:	1808d43a 	srli	r4,r3,16
    5284:	21803fcc 	andi	r6,r4,255
    5288:	110002c3 	ldbu	r4,11(r2)
    528c:	2008703a 	and	r4,r4,zero
    5290:	200b883a 	mov	r5,r4
    5294:	3009883a 	mov	r4,r6
    5298:	2908b03a 	or	r4,r5,r4
    529c:	110002c5 	stb	r4,11(r2)
    52a0:	180ad63a 	srli	r5,r3,24
    52a4:	10c00303 	ldbu	r3,12(r2)
    52a8:	1806703a 	and	r3,r3,zero
    52ac:	1809883a 	mov	r4,r3
    52b0:	2807883a 	mov	r3,r5
    52b4:	20c6b03a 	or	r3,r4,r3
    52b8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    52bc:	e0bffc17 	ldw	r2,-16(fp)
    52c0:	00c000c4 	movi	r3,3
    52c4:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    52c8:	e0bffc17 	ldw	r2,-16(fp)
    52cc:	10800c83 	ldbu	r2,50(r2)
    52d0:	10803fcc 	andi	r2,r2,255
    52d4:	10c00120 	cmpeqi	r3,r2,4
    52d8:	1800021e 	bne	r3,zero,52e4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    52dc:	10800148 	cmpgei	r2,r2,5
    52e0:	00000306 	br	52f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    52e4:	e0bffc17 	ldw	r2,-16(fp)
    52e8:	10000cc5 	stb	zero,51(r2)
                                        break;
    52ec:	00000106 	br	52f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    52f0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    52f4:	e0bffc17 	ldw	r2,-16(fp)
    52f8:	10800c43 	ldbu	r2,49(r2)
    52fc:	10bfff84 	addi	r2,r2,-2
    5300:	1007883a 	mov	r3,r2
    5304:	e0bffc17 	ldw	r2,-16(fp)
    5308:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    530c:	e0bffc17 	ldw	r2,-16(fp)
    5310:	10c00404 	addi	r3,r2,16
    5314:	e0bffc17 	ldw	r2,-16(fp)
    5318:	10800204 	addi	r2,r2,8
    531c:	100b883a 	mov	r5,r2
    5320:	1809883a 	mov	r4,r3
    5324:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    5328:	e0bffc17 	ldw	r2,-16(fp)
    532c:	00c00104 	movi	r3,4
    5330:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    5334:	e0bffc17 	ldw	r2,-16(fp)
    5338:	10800c83 	ldbu	r2,50(r2)
    533c:	10803fcc 	andi	r2,r2,255
    5340:	10c00120 	cmpeqi	r3,r2,4
    5344:	1800141e 	bne	r3,zero,5398 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    5348:	10c00160 	cmpeqi	r3,r2,5
    534c:	1800311e 	bne	r3,zero,5414 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    5350:	108000a0 	cmpeqi	r2,r2,2
    5354:	10005a26 	beq	r2,zero,54c0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    5358:	e0bffc17 	ldw	r2,-16(fp)
    535c:	10800404 	addi	r2,r2,16
    5360:	e1bffe17 	ldw	r6,-8(fp)
    5364:	e17ffd17 	ldw	r5,-12(fp)
    5368:	1009883a 	mov	r4,r2
    536c:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5370:	1080005c 	xori	r2,r2,1
    5374:	10803fcc 	andi	r2,r2,255
    5378:	10000226 	beq	r2,zero,5384 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    537c:	0005883a 	mov	r2,zero
    5380:	00008706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    5384:	e0bffa17 	ldw	r2,-24(fp)
    5388:	10c00143 	ldbu	r3,5(r2)
    538c:	e0bffc17 	ldw	r2,-16(fp)
    5390:	10c00d05 	stb	r3,52(r2)
                                        break;
    5394:	00005e06 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    5398:	e0bffc17 	ldw	r2,-16(fp)
    539c:	10800404 	addi	r2,r2,16
    53a0:	e1bffe17 	ldw	r6,-8(fp)
    53a4:	e17ffd17 	ldw	r5,-12(fp)
    53a8:	1009883a 	mov	r4,r2
    53ac:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    53b0:	1080005c 	xori	r2,r2,1
    53b4:	10803fcc 	andi	r2,r2,255
    53b8:	10000226 	beq	r2,zero,53c4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    53bc:	0005883a 	mov	r2,zero
    53c0:	00007706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    53c4:	e0bffc17 	ldw	r2,-16(fp)
    53c8:	10800e03 	ldbu	r2,56(r2)
    53cc:	10803fcc 	andi	r2,r2,255
    53d0:	10004c1e 	bne	r2,zero,5504 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    53d4:	e0bffc17 	ldw	r2,-16(fp)
    53d8:	00c00044 	movi	r3,1
    53dc:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    53e0:	e0bffb17 	ldw	r2,-20(fp)
    53e4:	10c00083 	ldbu	r3,2(r2)
    53e8:	e0bffc17 	ldw	r2,-16(fp)
    53ec:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    53f0:	e0bffb17 	ldw	r2,-20(fp)
    53f4:	10c000c3 	ldbu	r3,3(r2)
    53f8:	e0bffc17 	ldw	r2,-16(fp)
    53fc:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    5400:	e0bffb17 	ldw	r2,-20(fp)
    5404:	10c001c3 	ldbu	r3,7(r2)
    5408:	e0bffc17 	ldw	r2,-16(fp)
    540c:	10c00d45 	stb	r3,53(r2)
                                        break;
    5410:	00003f06 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    5414:	e0bffc17 	ldw	r2,-16(fp)
    5418:	10800404 	addi	r2,r2,16
    541c:	e1bffe17 	ldw	r6,-8(fp)
    5420:	e17ffd17 	ldw	r5,-12(fp)
    5424:	1009883a 	mov	r4,r2
    5428:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    542c:	1080005c 	xori	r2,r2,1
    5430:	10803fcc 	andi	r2,r2,255
    5434:	10000226 	beq	r2,zero,5440 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5438:	0005883a 	mov	r2,zero
    543c:	00005806 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    5440:	e0bffc17 	ldw	r2,-16(fp)
    5444:	10800cc3 	ldbu	r2,51(r2)
    5448:	10803fcc 	andi	r2,r2,255
    544c:	10002f26 	beq	r2,zero,550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    5450:	e0bffc17 	ldw	r2,-16(fp)
    5454:	10800117 	ldw	r2,4(r2)
    5458:	10002c26 	beq	r2,zero,550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    545c:	e0bffc17 	ldw	r2,-16(fp)
    5460:	10800117 	ldw	r2,4(r2)
    5464:	10800017 	ldw	r2,0(r2)
    5468:	10800017 	ldw	r2,0(r2)
    546c:	e0fffc17 	ldw	r3,-16(fp)
    5470:	1a000117 	ldw	r8,4(r3)
    5474:	e0fffc17 	ldw	r3,-16(fp)
    5478:	18c00d03 	ldbu	r3,52(r3)
    547c:	19403fcc 	andi	r5,r3,255
    5480:	e0fffc17 	ldw	r3,-16(fp)
    5484:	18c00d83 	ldbu	r3,54(r3)
    5488:	19803fcc 	andi	r6,r3,255
    548c:	e0fffc17 	ldw	r3,-16(fp)
    5490:	18c00dc3 	ldbu	r3,55(r3)
    5494:	19c03fcc 	andi	r7,r3,255
    5498:	e0fffc17 	ldw	r3,-16(fp)
    549c:	18c00d43 	ldbu	r3,53(r3)
    54a0:	18c03fcc 	andi	r3,r3,255
    54a4:	e13ffc17 	ldw	r4,-16(fp)
    54a8:	21000804 	addi	r4,r4,32
    54ac:	d9000115 	stw	r4,4(sp)
    54b0:	d8c00015 	stw	r3,0(sp)
    54b4:	4009883a 	mov	r4,r8
    54b8:	103ee83a 	callr	r2
                                        break;
    54bc:	00001306 	br	550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    54c0:	e0bffc17 	ldw	r2,-16(fp)
    54c4:	10c00604 	addi	r3,r2,24
    54c8:	e0bffc17 	ldw	r2,-16(fp)
    54cc:	10800c43 	ldbu	r2,49(r2)
    54d0:	10803fcc 	andi	r2,r2,255
    54d4:	10bfff84 	addi	r2,r2,-2
    54d8:	10bfffcc 	andi	r2,r2,65535
    54dc:	100f883a 	mov	r7,r2
    54e0:	e1bffe17 	ldw	r6,-8(fp)
    54e4:	e17ffd17 	ldw	r5,-12(fp)
    54e8:	1809883a 	mov	r4,r3
    54ec:	00049a00 	call	49a0 <_ZN11ByteSkipper4SkipEPPhPtt>
    54f0:	1080005c 	xori	r2,r2,1
    54f4:	10803fcc 	andi	r2,r2,255
    54f8:	10000526 	beq	r2,zero,5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    54fc:	0005883a 	mov	r2,zero
    5500:	00002706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    5504:	0001883a 	nop
    5508:	00000106 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    550c:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    5510:	e0bffc17 	ldw	r2,-16(fp)
    5514:	10c00804 	addi	r3,r2,32
    5518:	e0bffc17 	ldw	r2,-16(fp)
    551c:	19803fcc 	andi	r6,r3,255
    5520:	11000243 	ldbu	r4,9(r2)
    5524:	2008703a 	and	r4,r4,zero
    5528:	200b883a 	mov	r5,r4
    552c:	3009883a 	mov	r4,r6
    5530:	2908b03a 	or	r4,r5,r4
    5534:	11000245 	stb	r4,9(r2)
    5538:	1808d23a 	srli	r4,r3,8
    553c:	21803fcc 	andi	r6,r4,255
    5540:	11000283 	ldbu	r4,10(r2)
    5544:	2008703a 	and	r4,r4,zero
    5548:	200b883a 	mov	r5,r4
    554c:	3009883a 	mov	r4,r6
    5550:	2908b03a 	or	r4,r5,r4
    5554:	11000285 	stb	r4,10(r2)
    5558:	1808d43a 	srli	r4,r3,16
    555c:	21803fcc 	andi	r6,r4,255
    5560:	110002c3 	ldbu	r4,11(r2)
    5564:	2008703a 	and	r4,r4,zero
    5568:	200b883a 	mov	r5,r4
    556c:	3009883a 	mov	r4,r6
    5570:	2908b03a 	or	r4,r5,r4
    5574:	110002c5 	stb	r4,11(r2)
    5578:	180ad63a 	srli	r5,r3,24
    557c:	10c00303 	ldbu	r3,12(r2)
    5580:	1806703a 	and	r3,r3,zero
    5584:	1809883a 	mov	r4,r3
    5588:	2807883a 	mov	r3,r5
    558c:	20c6b03a 	or	r3,r4,r3
    5590:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    5594:	e0bffc17 	ldw	r2,-16(fp)
    5598:	10000c05 	stb	zero,48(r2)
        }
        return true;
    559c:	00800044 	movi	r2,1
}
    55a0:	e037883a 	mov	sp,fp
    55a4:	dfc00117 	ldw	ra,4(sp)
    55a8:	df000017 	ldw	fp,0(sp)
    55ac:	dec00204 	addi	sp,sp,8
    55b0:	f800283a 	ret

000055b4 <_Z8set_notehhh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 channel, alt_u8 note, alt_u8 vel) {
    55b4:	defffb04 	addi	sp,sp,-20
    55b8:	df000415 	stw	fp,16(sp)
    55bc:	df000404 	addi	fp,sp,16
    55c0:	2807883a 	mov	r3,r5
    55c4:	3005883a 	mov	r2,r6
    55c8:	e13ffd05 	stb	r4,-12(fp)
    55cc:	e0fffe05 	stb	r3,-8(fp)
    55d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(note > 0x7F) {
    55d4:	e0bffe03 	ldbu	r2,-8(fp)
    55d8:	10803fcc 	andi	r2,r2,255
    55dc:	1080201c 	xori	r2,r2,128
    55e0:	10bfe004 	addi	r2,r2,-128
    55e4:	10001816 	blt	r2,zero,5648 <_Z8set_notehhh+0x94>
		return;
	}

	switch (channel) {
    55e8:	e0bffd03 	ldbu	r2,-12(fp)
    55ec:	10000126 	beq	r2,zero,55f4 <_Z8set_notehhh+0x40>
				set_val = 0x80 + vel;
			}
			synth->KEY[note] = set_val;
			break;
		default:
			break;
    55f0:	00001606 	br	564c <_Z8set_notehhh+0x98>
		return;
	}

	switch (channel) {
		case 0:
			if(vel == 0x00) {
    55f4:	e0bfff03 	ldbu	r2,-4(fp)
    55f8:	1000081e 	bne	r2,zero,561c <_Z8set_notehhh+0x68>
				set_val = synth->KEY[note];
    55fc:	d0e00d17 	ldw	r3,-32716(gp)
    5600:	e0bffe03 	ldbu	r2,-8(fp)
    5604:	1085883a 	add	r2,r2,r2
    5608:	1085883a 	add	r2,r2,r2
    560c:	1885883a 	add	r2,r3,r2
    5610:	10800017 	ldw	r2,0(r2)
    5614:	e0bffc15 	stw	r2,-16(fp)
    5618:	00000306 	br	5628 <_Z8set_notehhh+0x74>
			}
			else {
				set_val = 0x80 + vel;
    561c:	e0bfff03 	ldbu	r2,-4(fp)
    5620:	10802004 	addi	r2,r2,128
    5624:	e0bffc15 	stw	r2,-16(fp)
			}
			synth->KEY[note] = set_val;
    5628:	d0e00d17 	ldw	r3,-32716(gp)
    562c:	e0bffe03 	ldbu	r2,-8(fp)
    5630:	1085883a 	add	r2,r2,r2
    5634:	1085883a 	add	r2,r2,r2
    5638:	1885883a 	add	r2,r3,r2
    563c:	e0fffc17 	ldw	r3,-16(fp)
    5640:	10c00015 	stw	r3,0(r2)
			break;
    5644:	00000106 	br	564c <_Z8set_notehhh+0x98>

void set_note(alt_u8 channel, alt_u8 note, alt_u8 vel) {
	alt_u32 set_val;

	if(note > 0x7F) {
		return;
    5648:	0001883a 	nop
			synth->KEY[note] = set_val;
			break;
		default:
			break;
	}
}
    564c:	e037883a 	mov	sp,fp
    5650:	df000017 	ldw	fp,0(sp)
    5654:	dec00104 	addi	sp,sp,4
    5658:	f800283a 	ret

0000565c <_Z8set_ctrlhhm>:

void set_ctrl(alt_u8 channel, alt_u8 par, alt_u32 val) {
    565c:	defffc04 	addi	sp,sp,-16
    5660:	df000315 	stw	fp,12(sp)
    5664:	df000304 	addi	fp,sp,12
    5668:	2007883a 	mov	r3,r4
    566c:	2805883a 	mov	r2,r5
    5670:	e1bfff15 	stw	r6,-4(fp)
    5674:	e0fffd05 	stb	r3,-12(fp)
    5678:	e0bffe05 	stb	r2,-8(fp)
	switch (channel) {
    567c:	e0bffd03 	ldbu	r2,-12(fp)
    5680:	10000126 	beq	r2,zero,5688 <_Z8set_ctrlhhm+0x2c>
		case 0:
			synth->CTRL[par] = val;
			break;
		default:
			break;
    5684:	00000906 	br	56ac <_Z8set_ctrlhhm+0x50>
}

void set_ctrl(alt_u8 channel, alt_u8 par, alt_u32 val) {
	switch (channel) {
		case 0:
			synth->CTRL[par] = val;
    5688:	d0e00d17 	ldw	r3,-32716(gp)
    568c:	e0bffe03 	ldbu	r2,-8(fp)
    5690:	10802004 	addi	r2,r2,128
    5694:	1085883a 	add	r2,r2,r2
    5698:	1085883a 	add	r2,r2,r2
    569c:	1885883a 	add	r2,r3,r2
    56a0:	e0ffff17 	ldw	r3,-4(fp)
    56a4:	10c00015 	stw	r3,0(r2)
			break;
    56a8:	0001883a 	nop
		default:
			break;
	}
}
    56ac:	0001883a 	nop
    56b0:	e037883a 	mov	sp,fp
    56b4:	df000017 	ldw	fp,0(sp)
    56b8:	dec00104 	addi	sp,sp,4
    56bc:	f800283a 	ret

000056c0 <_Z9calc_adsrttttttttff>:

void calc_adsr(alt_u16 att_h, alt_u16 att_l, alt_u16 dec_h, alt_u16 dec_l, alt_u16 sus_h, alt_u16 sus_l, alt_u16 rel_h, alt_u16 rel_l, float peak_att, float peak_sus) {
    56c0:	deffe904 	addi	sp,sp,-92
    56c4:	dfc01615 	stw	ra,88(sp)
    56c8:	df001515 	stw	fp,84(sp)
    56cc:	df001504 	addi	fp,sp,84
    56d0:	2015883a 	mov	r10,r4
    56d4:	2813883a 	mov	r9,r5
    56d8:	3011883a 	mov	r8,r6
    56dc:	380d883a 	mov	r6,r7
    56e0:	e1400217 	ldw	r5,8(fp)
    56e4:	e1000317 	ldw	r4,12(fp)
    56e8:	e0c00417 	ldw	r3,16(fp)
    56ec:	e0800517 	ldw	r2,20(fp)
    56f0:	e2bff80d 	sth	r10,-32(fp)
    56f4:	e27ff90d 	sth	r9,-28(fp)
    56f8:	e23ffa0d 	sth	r8,-24(fp)
    56fc:	e1bffb0d 	sth	r6,-20(fp)
    5700:	e17ffc0d 	sth	r5,-16(fp)
    5704:	e13ffd0d 	sth	r4,-12(fp)
    5708:	e0fffe0d 	sth	r3,-8(fp)
    570c:	e0bfff0d 	sth	r2,-4(fp)

	alt_u16 att_m_seconds = att_h + att_l;
    5710:	e0fff80b 	ldhu	r3,-32(fp)
    5714:	e0bff90b 	ldhu	r2,-28(fp)
    5718:	1885883a 	add	r2,r3,r2
    571c:	e0bff10d 	sth	r2,-60(fp)
	alt_u16 dec_m_seconds = dec_h + dec_l;
    5720:	e0fffa0b 	ldhu	r3,-24(fp)
    5724:	e0bffb0b 	ldhu	r2,-20(fp)
    5728:	1885883a 	add	r2,r3,r2
    572c:	e0bff18d 	sth	r2,-58(fp)
	alt_u16 sus_m_seconds = sus_h + sus_l;
    5730:	e0fffc0b 	ldhu	r3,-16(fp)
    5734:	e0bffd0b 	ldhu	r2,-12(fp)
    5738:	1885883a 	add	r2,r3,r2
    573c:	e0bff20d 	sth	r2,-56(fp)
	alt_u16 rel_m_seconds = rel_h + rel_l;
    5740:	e0fffe0b 	ldhu	r3,-8(fp)
    5744:	e0bfff0b 	ldhu	r2,-4(fp)
    5748:	1885883a 	add	r2,r3,r2
    574c:	e0bff28d 	sth	r2,-54(fp)
	alt_u32 PEAK_ATT, PEAK_SUS, ATT_STEP, DEC_STEP, SUS_STEP, REL_STEP;
	alt_u32 ATT_LEN, DEC_LEN, SUS_LEN, REL_LEN;

	float p_att = peak_att + peak_sus;
    5750:	e1400717 	ldw	r5,28(fp)
    5754:	e1000617 	ldw	r4,24(fp)
    5758:	000d8e00 	call	d8e0 <__addsf3>
    575c:	1007883a 	mov	r3,r2
    5760:	e0fff015 	stw	r3,-64(fp)

	if (p_att > 2) p_att = 2;
    5764:	01500034 	movhi	r5,16384
    5768:	e13ff017 	ldw	r4,-64(fp)
    576c:	000e1e80 	call	e1e8 <__gesf2>
    5770:	0080020e 	bge	zero,r2,577c <_Z9calc_adsrttttttttff+0xbc>
    5774:	00900034 	movhi	r2,16384
    5778:	e0bff015 	stw	r2,-64(fp)

	if (att_m_seconds > 5000) {
    577c:	e0bff10b 	ldhu	r2,-60(fp)
    5780:	1084e270 	cmpltui	r2,r2,5001
    5784:	10008526 	beq	r2,zero,599c <_Z9calc_adsrttttttttff+0x2dc>
		//printf("ERROR: Requested attack length is too long.\n");
		return;
	}
	if (dec_m_seconds > 5000) {
    5788:	e0bff18b 	ldhu	r2,-58(fp)
    578c:	1084e270 	cmpltui	r2,r2,5001
    5790:	10008426 	beq	r2,zero,59a4 <_Z9calc_adsrttttttttff+0x2e4>
		//printf("ERROR: Requested decay length is too long.\n");
		return;
	}
	if (sus_m_seconds > 20000) {
    5794:	e0bff20b 	ldhu	r2,-56(fp)
    5798:	10938870 	cmpltui	r2,r2,20001
    579c:	10008326 	beq	r2,zero,59ac <_Z9calc_adsrttttttttff+0x2ec>
		//printf("ERROR: Requested sustain length is too long.\n");
		return;
	}
	if (sus_m_seconds < rel_m_seconds) {
    57a0:	e0fff20b 	ldhu	r3,-56(fp)
    57a4:	e0bff28b 	ldhu	r2,-54(fp)
    57a8:	18808236 	bltu	r3,r2,59b4 <_Z9calc_adsrttttttttff+0x2f4>
		//printf("ERROR: Requested sustain length must be longer than release length.\n");
		return;
	}
	if (rel_m_seconds > 10000) {
    57ac:	e0bff28b 	ldhu	r2,-54(fp)
    57b0:	1089c470 	cmpltui	r2,r2,10001
    57b4:	10008126 	beq	r2,zero,59bc <_Z9calc_adsrttttttttff+0x2fc>
		//printf("ERROR: Requested release length is too long.\n");
		return;
	}

	PEAK_ATT = p_att * (alt_u32) 0x80000;
    57b8:	01524034 	movhi	r5,18688
    57bc:	e13ff017 	ldw	r4,-64(fp)
    57c0:	000e2a40 	call	e2a4 <__mulsf3>
    57c4:	1007883a 	mov	r3,r2
    57c8:	1805883a 	mov	r2,r3
    57cc:	1009883a 	mov	r4,r2
    57d0:	000d6a40 	call	d6a4 <__fixunssfsi>
    57d4:	e0bfeb15 	stw	r2,-84(fp)
	if(peak_att + peak_sus >= 2) PEAK_ATT = 0xFFFFF;
    57d8:	e1400717 	ldw	r5,28(fp)
    57dc:	e1000617 	ldw	r4,24(fp)
    57e0:	000d8e00 	call	d8e0 <__addsf3>
    57e4:	1007883a 	mov	r3,r2
    57e8:	1805883a 	mov	r2,r3
    57ec:	01500034 	movhi	r5,16384
    57f0:	1009883a 	mov	r4,r2
    57f4:	000e1e80 	call	e1e8 <__gesf2>
    57f8:	10000316 	blt	r2,zero,5808 <_Z9calc_adsrttttttttff+0x148>
    57fc:	00800434 	movhi	r2,16
    5800:	10bfffc4 	addi	r2,r2,-1
    5804:	e0bfeb15 	stw	r2,-84(fp)
	PEAK_SUS = peak_sus * (alt_u32) 0x80000;
    5808:	01524034 	movhi	r5,18688
    580c:	e1000717 	ldw	r4,28(fp)
    5810:	000e2a40 	call	e2a4 <__mulsf3>
    5814:	1007883a 	mov	r3,r2
    5818:	1805883a 	mov	r2,r3
    581c:	1009883a 	mov	r4,r2
    5820:	000d6a40 	call	d6a4 <__fixunssfsi>
    5824:	e0bff315 	stw	r2,-52(fp)
	ATT_LEN = (att_m_seconds * F_S) / 1000;
    5828:	e0bff10b 	ldhu	r2,-60(fp)
    582c:	016b1114 	movui	r5,44100
    5830:	1009883a 	mov	r4,r2
    5834:	000d8b80 	call	d8b8 <__mulsi3>
    5838:	0140fa04 	movi	r5,1000
    583c:	1009883a 	mov	r4,r2
    5840:	000d7040 	call	d704 <__divsi3>
    5844:	e0bfec15 	stw	r2,-80(fp)
	if(!ATT_LEN) ATT_LEN = 1;
    5848:	e0bfec17 	ldw	r2,-80(fp)
    584c:	1000021e 	bne	r2,zero,5858 <_Z9calc_adsrttttttttff+0x198>
    5850:	00800044 	movi	r2,1
    5854:	e0bfec15 	stw	r2,-80(fp)
	ATT_STEP = PEAK_ATT / ATT_LEN;
    5858:	e17fec17 	ldw	r5,-80(fp)
    585c:	e13feb17 	ldw	r4,-84(fp)
    5860:	000d7fc0 	call	d7fc <__udivsi3>
    5864:	e0bff415 	stw	r2,-48(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
    5868:	e0bff18b 	ldhu	r2,-58(fp)
    586c:	016b1114 	movui	r5,44100
    5870:	1009883a 	mov	r4,r2
    5874:	000d8b80 	call	d8b8 <__mulsi3>
    5878:	0140fa04 	movi	r5,1000
    587c:	1009883a 	mov	r4,r2
    5880:	000d7040 	call	d704 <__divsi3>
    5884:	e0bfed15 	stw	r2,-76(fp)
	if(!DEC_LEN) DEC_LEN = 1;
    5888:	e0bfed17 	ldw	r2,-76(fp)
    588c:	1000021e 	bne	r2,zero,5898 <_Z9calc_adsrttttttttff+0x1d8>
    5890:	00800044 	movi	r2,1
    5894:	e0bfed15 	stw	r2,-76(fp)
	DEC_STEP = (PEAK_ATT - PEAK_SUS) / DEC_LEN;
    5898:	e0ffeb17 	ldw	r3,-84(fp)
    589c:	e0bff317 	ldw	r2,-52(fp)
    58a0:	1885c83a 	sub	r2,r3,r2
    58a4:	e17fed17 	ldw	r5,-76(fp)
    58a8:	1009883a 	mov	r4,r2
    58ac:	000d7fc0 	call	d7fc <__udivsi3>
    58b0:	e0bff515 	stw	r2,-44(fp)
	SUS_LEN = (sus_m_seconds * F_S) / 1000;
    58b4:	e0bff20b 	ldhu	r2,-56(fp)
    58b8:	016b1114 	movui	r5,44100
    58bc:	1009883a 	mov	r4,r2
    58c0:	000d8b80 	call	d8b8 <__mulsi3>
    58c4:	0140fa04 	movi	r5,1000
    58c8:	1009883a 	mov	r4,r2
    58cc:	000d7040 	call	d704 <__divsi3>
    58d0:	e0bfee15 	stw	r2,-72(fp)
	if(!SUS_LEN) SUS_LEN = 1;
    58d4:	e0bfee17 	ldw	r2,-72(fp)
    58d8:	1000021e 	bne	r2,zero,58e4 <_Z9calc_adsrttttttttff+0x224>
    58dc:	00800044 	movi	r2,1
    58e0:	e0bfee15 	stw	r2,-72(fp)
	SUS_STEP = PEAK_SUS / SUS_LEN;
    58e4:	e17fee17 	ldw	r5,-72(fp)
    58e8:	e13ff317 	ldw	r4,-52(fp)
    58ec:	000d7fc0 	call	d7fc <__udivsi3>
    58f0:	e0bff615 	stw	r2,-40(fp)
	REL_LEN = (rel_m_seconds * F_S) / 1000;
    58f4:	e0bff28b 	ldhu	r2,-54(fp)
    58f8:	016b1114 	movui	r5,44100
    58fc:	1009883a 	mov	r4,r2
    5900:	000d8b80 	call	d8b8 <__mulsi3>
    5904:	0140fa04 	movi	r5,1000
    5908:	1009883a 	mov	r4,r2
    590c:	000d7040 	call	d704 <__divsi3>
    5910:	e0bfef15 	stw	r2,-68(fp)
	if(!REL_LEN) REL_LEN = 1;
    5914:	e0bfef17 	ldw	r2,-68(fp)
    5918:	1000021e 	bne	r2,zero,5924 <_Z9calc_adsrttttttttff+0x264>
    591c:	00800044 	movi	r2,1
    5920:	e0bfef15 	stw	r2,-68(fp)
	REL_STEP = PEAK_SUS / REL_LEN;
    5924:	e17fef17 	ldw	r5,-68(fp)
    5928:	e13ff317 	ldw	r4,-52(fp)
    592c:	000d7fc0 	call	d7fc <__udivsi3>
    5930:	e0bff715 	stw	r2,-36(fp)

	set_ctrl(0, PEAK_A, PEAK_ATT);
    5934:	e1bfeb17 	ldw	r6,-84(fp)
    5938:	000b883a 	mov	r5,zero
    593c:	0009883a 	mov	r4,zero
    5940:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, ATT_S, ATT_STEP);
    5944:	e1bff417 	ldw	r6,-48(fp)
    5948:	01400044 	movi	r5,1
    594c:	0009883a 	mov	r4,zero
    5950:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, DEC_S, DEC_STEP);
    5954:	e1bff517 	ldw	r6,-44(fp)
    5958:	01400084 	movi	r5,2
    595c:	0009883a 	mov	r4,zero
    5960:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, PEAK_S, PEAK_SUS);
    5964:	e1bff317 	ldw	r6,-52(fp)
    5968:	014000c4 	movi	r5,3
    596c:	0009883a 	mov	r4,zero
    5970:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, SUS_S, SUS_STEP);
    5974:	e1bff617 	ldw	r6,-40(fp)
    5978:	01400104 	movi	r5,4
    597c:	0009883a 	mov	r4,zero
    5980:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, REL_S, REL_STEP);
    5984:	e1bff717 	ldw	r6,-36(fp)
    5988:	01400144 	movi	r5,5
    598c:	0009883a 	mov	r4,zero
    5990:	000565c0 	call	565c <_Z8set_ctrlhhm>
	return;
    5994:	0001883a 	nop
    5998:	00000906 	br	59c0 <_Z9calc_adsrttttttttff+0x300>

	if (p_att > 2) p_att = 2;

	if (att_m_seconds > 5000) {
		//printf("ERROR: Requested attack length is too long.\n");
		return;
    599c:	0001883a 	nop
    59a0:	00000706 	br	59c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (dec_m_seconds > 5000) {
		//printf("ERROR: Requested decay length is too long.\n");
		return;
    59a4:	0001883a 	nop
    59a8:	00000506 	br	59c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (sus_m_seconds > 20000) {
		//printf("ERROR: Requested sustain length is too long.\n");
		return;
    59ac:	0001883a 	nop
    59b0:	00000306 	br	59c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (sus_m_seconds < rel_m_seconds) {
		//printf("ERROR: Requested sustain length must be longer than release length.\n");
		return;
    59b4:	0001883a 	nop
    59b8:	00000106 	br	59c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (rel_m_seconds > 10000) {
		//printf("ERROR: Requested release length is too long.\n");
		return;
    59bc:	0001883a 	nop
	set_ctrl(0, DEC_S, DEC_STEP);
	set_ctrl(0, PEAK_S, PEAK_SUS);
	set_ctrl(0, SUS_S, SUS_STEP);
	set_ctrl(0, REL_S, REL_STEP);
	return;
}
    59c0:	e037883a 	mov	sp,fp
    59c4:	dfc00117 	ldw	ra,4(sp)
    59c8:	df000017 	ldw	fp,0(sp)
    59cc:	dec00204 	addi	sp,sp,8
    59d0:	f800283a 	ret

000059d4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    59d4:	defff904 	addi	sp,sp,-28
    59d8:	dfc00615 	stw	ra,24(sp)
    59dc:	df000515 	stw	fp,20(sp)
    59e0:	df000504 	addi	fp,sp,20
    59e4:	e13ffc15 	stw	r4,-16(fp)
    59e8:	e17ffd15 	stw	r5,-12(fp)
    59ec:	3007883a 	mov	r3,r6
    59f0:	3805883a 	mov	r2,r7
    59f4:	e0fffe05 	stb	r3,-8(fp)
    59f8:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    59fc:	e0800217 	ldw	r2,8(fp)
    5a00:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    5a04:	e0bffc17 	ldw	r2,-16(fp)
    5a08:	10800117 	ldw	r2,4(r2)
    5a0c:	1080004c 	andi	r2,r2,1
    5a10:	1007883a 	mov	r3,r2
    5a14:	e0bffb17 	ldw	r2,-20(fp)
    5a18:	10800003 	ldbu	r2,0(r2)
    5a1c:	1080004c 	andi	r2,r2,1
    5a20:	18c03fcc 	andi	r3,r3,255
    5a24:	10803fcc 	andi	r2,r2,255
    5a28:	18801426 	beq	r3,r2,5a7c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    5a2c:	e0bffb17 	ldw	r2,-20(fp)
    5a30:	10800003 	ldbu	r2,0(r2)
    5a34:	1080004c 	andi	r2,r2,1
    5a38:	10803fcc 	andi	r2,r2,255
    5a3c:	10000826 	beq	r2,zero,5a60 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    5a40:	e0bffc17 	ldw	r2,-16(fp)
    5a44:	10800017 	ldw	r2,0(r2)
    5a48:	10800304 	addi	r2,r2,12
    5a4c:	10800017 	ldw	r2,0(r2)
    5a50:	e17ffb17 	ldw	r5,-20(fp)
    5a54:	e13ffc17 	ldw	r4,-16(fp)
    5a58:	103ee83a 	callr	r2
    5a5c:	00000706 	br	5a7c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    5a60:	e0bffc17 	ldw	r2,-16(fp)
    5a64:	10800017 	ldw	r2,0(r2)
    5a68:	10800204 	addi	r2,r2,8
    5a6c:	10800017 	ldw	r2,0(r2)
    5a70:	e17ffb17 	ldw	r5,-20(fp)
    5a74:	e13ffc17 	ldw	r4,-16(fp)
    5a78:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    5a7c:	e0bffc17 	ldw	r2,-16(fp)
    5a80:	10800117 	ldw	r2,4(r2)
    5a84:	1004d07a 	srli	r2,r2,1
    5a88:	1080004c 	andi	r2,r2,1
    5a8c:	1007883a 	mov	r3,r2
    5a90:	e0bffb17 	ldw	r2,-20(fp)
    5a94:	10800003 	ldbu	r2,0(r2)
    5a98:	1004d07a 	srli	r2,r2,1
    5a9c:	1080004c 	andi	r2,r2,1
    5aa0:	18c03fcc 	andi	r3,r3,255
    5aa4:	10803fcc 	andi	r2,r2,255
    5aa8:	18801426 	beq	r3,r2,5afc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    5aac:	e0bffb17 	ldw	r2,-20(fp)
    5ab0:	10800003 	ldbu	r2,0(r2)
    5ab4:	1080008c 	andi	r2,r2,2
    5ab8:	10803fcc 	andi	r2,r2,255
    5abc:	10000826 	beq	r2,zero,5ae0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    5ac0:	e0bffc17 	ldw	r2,-16(fp)
    5ac4:	10800017 	ldw	r2,0(r2)
    5ac8:	10800504 	addi	r2,r2,20
    5acc:	10800017 	ldw	r2,0(r2)
    5ad0:	e17ffb17 	ldw	r5,-20(fp)
    5ad4:	e13ffc17 	ldw	r4,-16(fp)
    5ad8:	103ee83a 	callr	r2
    5adc:	00000706 	br	5afc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    5ae0:	e0bffc17 	ldw	r2,-16(fp)
    5ae4:	10800017 	ldw	r2,0(r2)
    5ae8:	10800404 	addi	r2,r2,16
    5aec:	10800017 	ldw	r2,0(r2)
    5af0:	e17ffb17 	ldw	r5,-20(fp)
    5af4:	e13ffc17 	ldw	r4,-16(fp)
    5af8:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    5afc:	e0bffc17 	ldw	r2,-16(fp)
    5b00:	10800117 	ldw	r2,4(r2)
    5b04:	1004d0ba 	srli	r2,r2,2
    5b08:	1080004c 	andi	r2,r2,1
    5b0c:	1007883a 	mov	r3,r2
    5b10:	e0bffb17 	ldw	r2,-20(fp)
    5b14:	10800003 	ldbu	r2,0(r2)
    5b18:	1004d0ba 	srli	r2,r2,2
    5b1c:	1080004c 	andi	r2,r2,1
    5b20:	18c03fcc 	andi	r3,r3,255
    5b24:	10803fcc 	andi	r2,r2,255
    5b28:	18801426 	beq	r3,r2,5b7c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    5b2c:	e0bffb17 	ldw	r2,-20(fp)
    5b30:	10800003 	ldbu	r2,0(r2)
    5b34:	1080010c 	andi	r2,r2,4
    5b38:	10803fcc 	andi	r2,r2,255
    5b3c:	10000826 	beq	r2,zero,5b60 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    5b40:	e0bffc17 	ldw	r2,-16(fp)
    5b44:	10800017 	ldw	r2,0(r2)
    5b48:	10800704 	addi	r2,r2,28
    5b4c:	10800017 	ldw	r2,0(r2)
    5b50:	e17ffb17 	ldw	r5,-20(fp)
    5b54:	e13ffc17 	ldw	r4,-16(fp)
    5b58:	103ee83a 	callr	r2
    5b5c:	00000706 	br	5b7c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    5b60:	e0bffc17 	ldw	r2,-16(fp)
    5b64:	10800017 	ldw	r2,0(r2)
    5b68:	10800604 	addi	r2,r2,24
    5b6c:	10800017 	ldw	r2,0(r2)
    5b70:	e17ffb17 	ldw	r5,-20(fp)
    5b74:	e13ffc17 	ldw	r4,-16(fp)
    5b78:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    5b7c:	e0bffb17 	ldw	r2,-20(fp)
    5b80:	10800043 	ldbu	r2,1(r2)
    5b84:	10803fcc 	andi	r2,r2,255
    5b88:	1080201c 	xori	r2,r2,128
    5b8c:	10bfe004 	addi	r2,r2,-128
    5b90:	1000061e 	bne	r2,zero,5bac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    5b94:	e0bffb17 	ldw	r2,-20(fp)
    5b98:	10800083 	ldbu	r2,2(r2)
    5b9c:	10803fcc 	andi	r2,r2,255
    5ba0:	1080201c 	xori	r2,r2,128
    5ba4:	10bfe004 	addi	r2,r2,-128
    5ba8:	10000726 	beq	r2,zero,5bc8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    5bac:	e0bffc17 	ldw	r2,-16(fp)
    5bb0:	10800017 	ldw	r2,0(r2)
    5bb4:	10800104 	addi	r2,r2,4
    5bb8:	10800017 	ldw	r2,0(r2)
    5bbc:	e17ffb17 	ldw	r5,-20(fp)
    5bc0:	e13ffc17 	ldw	r4,-16(fp)
    5bc4:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    5bc8:	e0800217 	ldw	r2,8(fp)
    5bcc:	10c00003 	ldbu	r3,0(r2)
    5bd0:	e0bffc17 	ldw	r2,-16(fp)
    5bd4:	10c00105 	stb	r3,4(r2)
#endif

};
    5bd8:	0001883a 	nop
    5bdc:	e037883a 	mov	sp,fp
    5be0:	dfc00117 	ldw	ra,4(sp)
    5be4:	df000017 	ldw	fp,0(sp)
    5be8:	dec00204 	addi	sp,sp,8
    5bec:	f800283a 	ret

00005bf0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5bf0:	defff804 	addi	sp,sp,-32
    5bf4:	dfc00715 	stw	ra,28(sp)
    5bf8:	df000615 	stw	fp,24(sp)
    5bfc:	df000604 	addi	fp,sp,24
    5c00:	e13ffc15 	stw	r4,-16(fp)
    5c04:	e17ffd15 	stw	r5,-12(fp)
    5c08:	3007883a 	mov	r3,r6
    5c0c:	3805883a 	mov	r2,r7
    5c10:	e0fffe05 	stb	r3,-8(fp)
    5c14:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    5c18:	e0800217 	ldw	r2,8(fp)
    5c1c:	10800084 	addi	r2,r2,2
    5c20:	10800003 	ldbu	r2,0(r2)
    5c24:	10803fcc 	andi	r2,r2,255
    5c28:	10800058 	cmpnei	r2,r2,1
    5c2c:	10009926 	beq	r2,zero,5e94 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    5c30:	e0bffc17 	ldw	r2,-16(fp)
    5c34:	10c00103 	ldbu	r3,4(r2)
    5c38:	e0800217 	ldw	r2,8(fp)
    5c3c:	10800003 	ldbu	r2,0(r2)
    5c40:	18c03fcc 	andi	r3,r3,255
    5c44:	10803fcc 	andi	r2,r2,255
    5c48:	18800e26 	beq	r3,r2,5c84 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    5c4c:	e0bffc17 	ldw	r2,-16(fp)
    5c50:	10800017 	ldw	r2,0(r2)
    5c54:	10800204 	addi	r2,r2,8
    5c58:	10800017 	ldw	r2,0(r2)
    5c5c:	e0fffc17 	ldw	r3,-16(fp)
    5c60:	18c00103 	ldbu	r3,4(r3)
    5c64:	19003fcc 	andi	r4,r3,255
    5c68:	e0c00217 	ldw	r3,8(fp)
    5c6c:	18c00003 	ldbu	r3,0(r3)
    5c70:	18c03fcc 	andi	r3,r3,255
    5c74:	180d883a 	mov	r6,r3
    5c78:	200b883a 	mov	r5,r4
    5c7c:	e13ffc17 	ldw	r4,-16(fp)
    5c80:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    5c84:	00800084 	movi	r2,2
    5c88:	e0bffa05 	stb	r2,-24(fp)
    5c8c:	e0bffa03 	ldbu	r2,-24(fp)
    5c90:	10800228 	cmpgeui	r2,r2,8
    5c94:	10006e1e 	bne	r2,zero,5e50 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    5c98:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    5c9c:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    5ca0:	00800084 	movi	r2,2
    5ca4:	e0bffac5 	stb	r2,-21(fp)
    5ca8:	e0bffac3 	ldbu	r2,-21(fp)
    5cac:	10800228 	cmpgeui	r2,r2,8
    5cb0:	10002f1e 	bne	r2,zero,5d70 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    5cb4:	e0bffa03 	ldbu	r2,-24(fp)
    5cb8:	e0c00217 	ldw	r3,8(fp)
    5cbc:	1885883a 	add	r2,r3,r2
    5cc0:	11000003 	ldbu	r4,0(r2)
    5cc4:	e0bffac3 	ldbu	r2,-21(fp)
    5cc8:	e0fffc17 	ldw	r3,-16(fp)
    5ccc:	1885883a 	add	r2,r3,r2
    5cd0:	10800104 	addi	r2,r2,4
    5cd4:	10800003 	ldbu	r2,0(r2)
    5cd8:	20c03fcc 	andi	r3,r4,255
    5cdc:	10803fcc 	andi	r2,r2,255
    5ce0:	1880091e 	bne	r3,r2,5d08 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    5ce4:	e0bffa03 	ldbu	r2,-24(fp)
    5ce8:	e0c00217 	ldw	r3,8(fp)
    5cec:	1885883a 	add	r2,r3,r2
    5cf0:	10800003 	ldbu	r2,0(r2)
    5cf4:	10803fcc 	andi	r2,r2,255
    5cf8:	10800060 	cmpeqi	r2,r2,1
    5cfc:	1000021e 	bne	r2,zero,5d08 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    5d00:	00800044 	movi	r2,1
    5d04:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    5d08:	e0bffac3 	ldbu	r2,-21(fp)
    5d0c:	e0c00217 	ldw	r3,8(fp)
    5d10:	1885883a 	add	r2,r3,r2
    5d14:	11000003 	ldbu	r4,0(r2)
    5d18:	e0bffa03 	ldbu	r2,-24(fp)
    5d1c:	e0fffc17 	ldw	r3,-16(fp)
    5d20:	1885883a 	add	r2,r3,r2
    5d24:	10800104 	addi	r2,r2,4
    5d28:	10800003 	ldbu	r2,0(r2)
    5d2c:	20c03fcc 	andi	r3,r4,255
    5d30:	10803fcc 	andi	r2,r2,255
    5d34:	18800a1e 	bne	r3,r2,5d60 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    5d38:	e0bffa03 	ldbu	r2,-24(fp)
    5d3c:	e0fffc17 	ldw	r3,-16(fp)
    5d40:	1885883a 	add	r2,r3,r2
    5d44:	10800104 	addi	r2,r2,4
    5d48:	10800003 	ldbu	r2,0(r2)
    5d4c:	10803fcc 	andi	r2,r2,255
    5d50:	10800060 	cmpeqi	r2,r2,1
    5d54:	1000021e 	bne	r2,zero,5d60 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    5d58:	00800044 	movi	r2,1
    5d5c:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    5d60:	e0bffac3 	ldbu	r2,-21(fp)
    5d64:	10800044 	addi	r2,r2,1
    5d68:	e0bffac5 	stb	r2,-21(fp)
    5d6c:	003fce06 	br	5ca8 <__alt_data_end+0xfc005ca8>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    5d70:	e0bffa43 	ldbu	r2,-23(fp)
    5d74:	1080005c 	xori	r2,r2,1
    5d78:	10803fcc 	andi	r2,r2,255
    5d7c:	10001c26 	beq	r2,zero,5df0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    5d80:	e0bffc17 	ldw	r2,-16(fp)
    5d84:	10800017 	ldw	r2,0(r2)
    5d88:	10800104 	addi	r2,r2,4
    5d8c:	10800017 	ldw	r2,0(r2)
    5d90:	e0fffa03 	ldbu	r3,-24(fp)
    5d94:	e1000217 	ldw	r4,8(fp)
    5d98:	20c7883a 	add	r3,r4,r3
    5d9c:	18c00003 	ldbu	r3,0(r3)
    5da0:	18c03fcc 	andi	r3,r3,255
    5da4:	180d883a 	mov	r6,r3
    5da8:	e17ffd17 	ldw	r5,-12(fp)
    5dac:	e13ffc17 	ldw	r4,-16(fp)
    5db0:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    5db4:	e0bffc17 	ldw	r2,-16(fp)
    5db8:	10800017 	ldw	r2,0(r2)
    5dbc:	10800304 	addi	r2,r2,12
    5dc0:	10800017 	ldw	r2,0(r2)
    5dc4:	e0c00217 	ldw	r3,8(fp)
    5dc8:	18c00003 	ldbu	r3,0(r3)
    5dcc:	19403fcc 	andi	r5,r3,255
    5dd0:	e0fffa03 	ldbu	r3,-24(fp)
    5dd4:	e1000217 	ldw	r4,8(fp)
    5dd8:	20c7883a 	add	r3,r4,r3
    5ddc:	18c00003 	ldbu	r3,0(r3)
    5de0:	18c03fcc 	andi	r3,r3,255
    5de4:	180d883a 	mov	r6,r3
    5de8:	e13ffc17 	ldw	r4,-16(fp)
    5dec:	103ee83a 	callr	r2
                }
                if (!up)
    5df0:	e0bffa83 	ldbu	r2,-22(fp)
    5df4:	1080005c 	xori	r2,r2,1
    5df8:	10803fcc 	andi	r2,r2,255
    5dfc:	10001026 	beq	r2,zero,5e40 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    5e00:	e0bffc17 	ldw	r2,-16(fp)
    5e04:	10800017 	ldw	r2,0(r2)
    5e08:	10800404 	addi	r2,r2,16
    5e0c:	10800017 	ldw	r2,0(r2)
    5e10:	e0fffc17 	ldw	r3,-16(fp)
    5e14:	18c00103 	ldbu	r3,4(r3)
    5e18:	19403fcc 	andi	r5,r3,255
    5e1c:	e0fffa03 	ldbu	r3,-24(fp)
    5e20:	e13ffc17 	ldw	r4,-16(fp)
    5e24:	20c7883a 	add	r3,r4,r3
    5e28:	18c00104 	addi	r3,r3,4
    5e2c:	18c00003 	ldbu	r3,0(r3)
    5e30:	18c03fcc 	andi	r3,r3,255
    5e34:	180d883a 	mov	r6,r3
    5e38:	e13ffc17 	ldw	r4,-16(fp)
    5e3c:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    5e40:	e0bffa03 	ldbu	r2,-24(fp)
    5e44:	10800044 	addi	r2,r2,1
    5e48:	e0bffa05 	stb	r2,-24(fp)
    5e4c:	003f8f06 	br	5c8c <__alt_data_end+0xfc005c8c>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5e50:	e03ffb05 	stb	zero,-20(fp)
    5e54:	e0bffb03 	ldbu	r2,-20(fp)
    5e58:	10800228 	cmpgeui	r2,r2,8
    5e5c:	10000e1e 	bne	r2,zero,5e98 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    5e60:	e0bffb03 	ldbu	r2,-20(fp)
    5e64:	e0fffb03 	ldbu	r3,-20(fp)
    5e68:	e1000217 	ldw	r4,8(fp)
    5e6c:	20c7883a 	add	r3,r4,r3
    5e70:	18c00003 	ldbu	r3,0(r3)
    5e74:	e13ffc17 	ldw	r4,-16(fp)
    5e78:	2085883a 	add	r2,r4,r2
    5e7c:	10800104 	addi	r2,r2,4
    5e80:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5e84:	e0bffb03 	ldbu	r2,-20(fp)
    5e88:	10800044 	addi	r2,r2,1
    5e8c:	e0bffb05 	stb	r2,-20(fp)
    5e90:	003ff006 	br	5e54 <__alt_data_end+0xfc005e54>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5e94:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5e98:	e037883a 	mov	sp,fp
    5e9c:	dfc00117 	ldw	ra,4(sp)
    5ea0:	df000017 	ldw	fp,0(sp)
    5ea4:	dec00204 	addi	sp,sp,8
    5ea8:	f800283a 	ret

00005eac <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5eac:	defffa04 	addi	sp,sp,-24
    5eb0:	dfc00515 	stw	ra,20(sp)
    5eb4:	df000415 	stw	fp,16(sp)
    5eb8:	df000404 	addi	fp,sp,16
    5ebc:	e13ffd15 	stw	r4,-12(fp)
    5ec0:	2807883a 	mov	r3,r5
    5ec4:	3005883a 	mov	r2,r6
    5ec8:	e0fffe05 	stb	r3,-8(fp)
    5ecc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5ed0:	e0bffe03 	ldbu	r2,-8(fp)
    5ed4:	1080088c 	andi	r2,r2,34
    5ed8:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5edc:	e0bfff03 	ldbu	r2,-4(fp)
    5ee0:	10800130 	cmpltui	r2,r2,4
    5ee4:	1000151e 	bne	r2,zero,5f3c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5ee8:	e0bfff03 	ldbu	r2,-4(fp)
    5eec:	108007a8 	cmpgeui	r2,r2,30
    5ef0:	1000121e 	bne	r2,zero,5f3c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5ef4:	e0bffd17 	ldw	r2,-12(fp)
    5ef8:	10800317 	ldw	r2,12(r2)
    5efc:	1080008c 	andi	r2,r2,2
    5f00:	1000021e 	bne	r2,zero,5f0c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5f04:	e0bffc03 	ldbu	r2,-16(fp)
    5f08:	1000061e 	bne	r2,zero,5f24 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5f0c:	e0bffd17 	ldw	r2,-12(fp)
    5f10:	10800317 	ldw	r2,12(r2)
    5f14:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5f18:	10000526 	beq	r2,zero,5f30 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5f1c:	e0bffc03 	ldbu	r2,-16(fp)
    5f20:	1000031e 	bne	r2,zero,5f30 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5f24:	e0bfff03 	ldbu	r2,-4(fp)
    5f28:	10800f44 	addi	r2,r2,61
    5f2c:	00008006 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5f30:	e0bfff03 	ldbu	r2,-4(fp)
    5f34:	10801744 	addi	r2,r2,93
    5f38:	00007d06 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5f3c:	e0bfff03 	ldbu	r2,-4(fp)
    5f40:	108007b0 	cmpltui	r2,r2,30
    5f44:	1000191e 	bne	r2,zero,5fac <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5f48:	e0bfff03 	ldbu	r2,-4(fp)
    5f4c:	10800a28 	cmpgeui	r2,r2,40
    5f50:	1000161e 	bne	r2,zero,5fac <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5f54:	e0bffc03 	ldbu	r2,-16(fp)
    5f58:	10000c26 	beq	r2,zero,5f8c <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5f5c:	e0bffd17 	ldw	r2,-12(fp)
    5f60:	10800017 	ldw	r2,0(r2)
    5f64:	10800504 	addi	r2,r2,20
    5f68:	10800017 	ldw	r2,0(r2)
    5f6c:	e13ffd17 	ldw	r4,-12(fp)
    5f70:	103ee83a 	callr	r2
    5f74:	1007883a 	mov	r3,r2
    5f78:	e0bfff03 	ldbu	r2,-4(fp)
    5f7c:	10bff884 	addi	r2,r2,-30
    5f80:	1885883a 	add	r2,r3,r2
    5f84:	10800003 	ldbu	r2,0(r2)
    5f88:	00006906 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5f8c:	e0bfff03 	ldbu	r2,-4(fp)
    5f90:	108009e0 	cmpeqi	r2,r2,39
    5f94:	1000031e 	bne	r2,zero,5fa4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5f98:	e0bfff03 	ldbu	r2,-4(fp)
    5f9c:	108004c4 	addi	r2,r2,19
    5fa0:	00006306 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5fa4:	00800c04 	movi	r2,48
    5fa8:	00006106 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5fac:	e0bfff03 	ldbu	r2,-4(fp)
    5fb0:	10801670 	cmpltui	r2,r2,89
    5fb4:	10000a1e 	bne	r2,zero,5fe0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5fb8:	e0bfff03 	ldbu	r2,-4(fp)
    5fbc:	108018a8 	cmpgeui	r2,r2,98
    5fc0:	1000071e 	bne	r2,zero,5fe0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5fc4:	e0bffd17 	ldw	r2,-12(fp)
    5fc8:	10800317 	ldw	r2,12(r2)
    5fcc:	1080004c 	andi	r2,r2,1
    5fd0:	10005626 	beq	r2,zero,612c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5fd4:	e0bfff03 	ldbu	r2,-4(fp)
    5fd8:	10bff604 	addi	r2,r2,-40
    5fdc:	00005406 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    5fe0:	e0bfff03 	ldbu	r2,-4(fp)
    5fe4:	10800b70 	cmpltui	r2,r2,45
    5fe8:	10001d1e 	bne	r2,zero,6060 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    5fec:	e0bfff03 	ldbu	r2,-4(fp)
    5ff0:	10800e68 	cmpgeui	r2,r2,57
    5ff4:	10001a1e 	bne	r2,zero,6060 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    5ff8:	e0bffc03 	ldbu	r2,-16(fp)
    5ffc:	10000c26 	beq	r2,zero,6030 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    6000:	e0bffd17 	ldw	r2,-12(fp)
    6004:	10800017 	ldw	r2,0(r2)
    6008:	10800604 	addi	r2,r2,24
    600c:	10800017 	ldw	r2,0(r2)
    6010:	e13ffd17 	ldw	r4,-12(fp)
    6014:	103ee83a 	callr	r2
    6018:	1007883a 	mov	r3,r2
    601c:	e0bfff03 	ldbu	r2,-4(fp)
    6020:	10bff4c4 	addi	r2,r2,-45
    6024:	1885883a 	add	r2,r3,r2
    6028:	10800003 	ldbu	r2,0(r2)
    602c:	00004006 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6030:	e0bffd17 	ldw	r2,-12(fp)
    6034:	10800017 	ldw	r2,0(r2)
    6038:	10800704 	addi	r2,r2,28
    603c:	10800017 	ldw	r2,0(r2)
    6040:	e13ffd17 	ldw	r4,-12(fp)
    6044:	103ee83a 	callr	r2
    6048:	1007883a 	mov	r3,r2
    604c:	e0bfff03 	ldbu	r2,-4(fp)
    6050:	10bff4c4 	addi	r2,r2,-45
    6054:	1885883a 	add	r2,r3,r2
    6058:	10800003 	ldbu	r2,0(r2)
    605c:	00003406 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    6060:	e0bfff03 	ldbu	r2,-4(fp)
    6064:	10801530 	cmpltui	r2,r2,84
    6068:	10000f1e 	bne	r2,zero,60a8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    606c:	e0bfff03 	ldbu	r2,-4(fp)
    6070:	10801668 	cmpgeui	r2,r2,89
    6074:	10000c1e 	bne	r2,zero,60a8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    6078:	e0bffd17 	ldw	r2,-12(fp)
    607c:	10800017 	ldw	r2,0(r2)
    6080:	10800804 	addi	r2,r2,32
    6084:	10800017 	ldw	r2,0(r2)
    6088:	e13ffd17 	ldw	r4,-12(fp)
    608c:	103ee83a 	callr	r2
    6090:	1007883a 	mov	r3,r2
    6094:	e0bfff03 	ldbu	r2,-4(fp)
    6098:	10bfeb04 	addi	r2,r2,-84
    609c:	1885883a 	add	r2,r3,r2
    60a0:	10800003 	ldbu	r2,0(r2)
    60a4:	00002206 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    60a8:	e0bfff03 	ldbu	r2,-4(fp)
    60ac:	10c00b20 	cmpeqi	r3,r2,44
    60b0:	18000a1e 	bne	r3,zero,60dc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    60b4:	10c00b48 	cmpgei	r3,r2,45
    60b8:	1800031e 	bne	r3,zero,60c8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    60bc:	10800a20 	cmpeqi	r2,r2,40
    60c0:	1000081e 	bne	r2,zero,60e4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    60c4:	00001906 	br	612c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    60c8:	10c018a0 	cmpeqi	r3,r2,98
    60cc:	1800071e 	bne	r3,zero,60ec <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    60d0:	108018e0 	cmpeqi	r2,r2,99
    60d4:	10000d1e 	bne	r2,zero,610c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    60d8:	00001406 	br	612c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    60dc:	00800804 	movi	r2,32
    60e0:	00001306 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    60e4:	00800344 	movi	r2,13
    60e8:	00001106 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    60ec:	e0bffd17 	ldw	r2,-12(fp)
    60f0:	10800317 	ldw	r2,12(r2)
    60f4:	1080004c 	andi	r2,r2,1
    60f8:	10000226 	beq	r2,zero,6104 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    60fc:	00800c04 	movi	r2,48
    6100:	00000b06 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6104:	0005883a 	mov	r2,zero
    6108:	00000906 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    610c:	e0bffd17 	ldw	r2,-12(fp)
    6110:	10800317 	ldw	r2,12(r2)
    6114:	1080004c 	andi	r2,r2,1
    6118:	10000226 	beq	r2,zero,6124 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    611c:	00800b84 	movi	r2,46
    6120:	00000306 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6124:	0005883a 	mov	r2,zero
    6128:	00000106 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    612c:	0005883a 	mov	r2,zero
}
    6130:	e037883a 	mov	sp,fp
    6134:	dfc00117 	ldw	ra,4(sp)
    6138:	df000017 	ldw	fp,0(sp)
    613c:	dec00204 	addi	sp,sp,8
    6140:	f800283a 	ret

00006144 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    6144:	defffd04 	addi	sp,sp,-12
    6148:	df000215 	stw	fp,8(sp)
    614c:	df000204 	addi	fp,sp,8
    6150:	e13ffe15 	stw	r4,-8(fp)
    6154:	e17fff15 	stw	r5,-4(fp)
        };
    6158:	0001883a 	nop
    615c:	e037883a 	mov	sp,fp
    6160:	df000017 	ldw	fp,0(sp)
    6164:	dec00104 	addi	sp,sp,4
    6168:	f800283a 	ret

0000616c <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    616c:	defffd04 	addi	sp,sp,-12
    6170:	df000215 	stw	fp,8(sp)
    6174:	df000204 	addi	fp,sp,8
    6178:	e13ffe15 	stw	r4,-8(fp)
    617c:	e17fff15 	stw	r5,-4(fp)
        };
    6180:	0001883a 	nop
    6184:	e037883a 	mov	sp,fp
    6188:	df000017 	ldw	fp,0(sp)
    618c:	dec00104 	addi	sp,sp,4
    6190:	f800283a 	ret

00006194 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    6194:	defffd04 	addi	sp,sp,-12
    6198:	df000215 	stw	fp,8(sp)
    619c:	df000204 	addi	fp,sp,8
    61a0:	e13ffe15 	stw	r4,-8(fp)
    61a4:	e17fff15 	stw	r5,-4(fp)
        };
    61a8:	0001883a 	nop
    61ac:	e037883a 	mov	sp,fp
    61b0:	df000017 	ldw	fp,0(sp)
    61b4:	dec00104 	addi	sp,sp,4
    61b8:	f800283a 	ret

000061bc <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    61bc:	defffd04 	addi	sp,sp,-12
    61c0:	df000215 	stw	fp,8(sp)
    61c4:	df000204 	addi	fp,sp,8
    61c8:	e13ffe15 	stw	r4,-8(fp)
    61cc:	e17fff15 	stw	r5,-4(fp)
        };
    61d0:	0001883a 	nop
    61d4:	e037883a 	mov	sp,fp
    61d8:	df000017 	ldw	fp,0(sp)
    61dc:	dec00104 	addi	sp,sp,4
    61e0:	f800283a 	ret

000061e4 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    61e4:	defffd04 	addi	sp,sp,-12
    61e8:	df000215 	stw	fp,8(sp)
    61ec:	df000204 	addi	fp,sp,8
    61f0:	e13ffe15 	stw	r4,-8(fp)
    61f4:	e17fff15 	stw	r5,-4(fp)
        };
    61f8:	0001883a 	nop
    61fc:	e037883a 	mov	sp,fp
    6200:	df000017 	ldw	fp,0(sp)
    6204:	dec00104 	addi	sp,sp,4
    6208:	f800283a 	ret

0000620c <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    620c:	defffd04 	addi	sp,sp,-12
    6210:	df000215 	stw	fp,8(sp)
    6214:	df000204 	addi	fp,sp,8
    6218:	e13ffe15 	stw	r4,-8(fp)
    621c:	e17fff15 	stw	r5,-4(fp)
        };
    6220:	0001883a 	nop
    6224:	e037883a 	mov	sp,fp
    6228:	df000017 	ldw	fp,0(sp)
    622c:	dec00104 	addi	sp,sp,4
    6230:	f800283a 	ret

00006234 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    6234:	defffd04 	addi	sp,sp,-12
    6238:	df000215 	stw	fp,8(sp)
    623c:	df000204 	addi	fp,sp,8
    6240:	e13ffe15 	stw	r4,-8(fp)
    6244:	e17fff15 	stw	r5,-4(fp)
        };
    6248:	0001883a 	nop
    624c:	e037883a 	mov	sp,fp
    6250:	df000017 	ldw	fp,0(sp)
    6254:	dec00104 	addi	sp,sp,4
    6258:	f800283a 	ret

0000625c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    625c:	defff704 	addi	sp,sp,-36
    6260:	dfc00815 	stw	ra,32(sp)
    6264:	df000715 	stw	fp,28(sp)
    6268:	df000704 	addi	fp,sp,28
    626c:	e13ffd15 	stw	r4,-12(fp)
    6270:	e17ffe15 	stw	r5,-8(fp)
    6274:	3005883a 	mov	r2,r6
    6278:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    627c:	e0bffd17 	ldw	r2,-12(fp)
    6280:	10800303 	ldbu	r2,12(r2)
    6284:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    6288:	e0bfff03 	ldbu	r2,-4(fp)
    628c:	10c011e0 	cmpeqi	r3,r2,71
    6290:	1800271e 	bne	r3,zero,6330 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    6294:	10c014e0 	cmpeqi	r3,r2,83
    6298:	1800031e 	bne	r3,zero,62a8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    629c:	10800e60 	cmpeqi	r2,r2,57
    62a0:	1000111e 	bne	r2,zero,62e8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    62a4:	00003506 	br	637c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    62a8:	e0bffd17 	ldw	r2,-12(fp)
    62ac:	10800317 	ldw	r2,12(r2)
    62b0:	1080004c 	andi	r2,r2,1
    62b4:	0084303a 	nor	r2,zero,r2
    62b8:	1080004c 	andi	r2,r2,1
    62bc:	1007883a 	mov	r3,r2
    62c0:	e0bffd17 	ldw	r2,-12(fp)
    62c4:	1940004c 	andi	r5,r3,1
    62c8:	11000303 	ldbu	r4,12(r2)
    62cc:	00ffff84 	movi	r3,-2
    62d0:	20c6703a 	and	r3,r4,r3
    62d4:	1809883a 	mov	r4,r3
    62d8:	2807883a 	mov	r3,r5
    62dc:	20c6b03a 	or	r3,r4,r3
    62e0:	10c00305 	stb	r3,12(r2)
                                break;
    62e4:	00002506 	br	637c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    62e8:	e0bffd17 	ldw	r2,-12(fp)
    62ec:	10800317 	ldw	r2,12(r2)
    62f0:	1004d07a 	srli	r2,r2,1
    62f4:	1080004c 	andi	r2,r2,1
    62f8:	0084303a 	nor	r2,zero,r2
    62fc:	1080004c 	andi	r2,r2,1
    6300:	1007883a 	mov	r3,r2
    6304:	e0bffd17 	ldw	r2,-12(fp)
    6308:	18c0004c 	andi	r3,r3,1
    630c:	18cb883a 	add	r5,r3,r3
    6310:	11000303 	ldbu	r4,12(r2)
    6314:	00ffff44 	movi	r3,-3
    6318:	20c6703a 	and	r3,r4,r3
    631c:	1809883a 	mov	r4,r3
    6320:	2807883a 	mov	r3,r5
    6324:	20c6b03a 	or	r3,r4,r3
    6328:	10c00305 	stb	r3,12(r2)
                                break;
    632c:	00001306 	br	637c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    6330:	e0bffd17 	ldw	r2,-12(fp)
    6334:	10800317 	ldw	r2,12(r2)
    6338:	1004d0ba 	srli	r2,r2,2
    633c:	1080004c 	andi	r2,r2,1
    6340:	0084303a 	nor	r2,zero,r2
    6344:	1080004c 	andi	r2,r2,1
    6348:	1007883a 	mov	r3,r2
    634c:	e0bffd17 	ldw	r2,-12(fp)
    6350:	18c0004c 	andi	r3,r3,1
    6354:	18c7883a 	add	r3,r3,r3
    6358:	18cb883a 	add	r5,r3,r3
    635c:	11000303 	ldbu	r4,12(r2)
    6360:	00fffec4 	movi	r3,-5
    6364:	20c6703a 	and	r3,r4,r3
    6368:	1809883a 	mov	r4,r3
    636c:	2807883a 	mov	r3,r5
    6370:	20c6b03a 	or	r3,r4,r3
    6374:	10c00305 	stb	r3,12(r2)
                                break;
    6378:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    637c:	e0bffd17 	ldw	r2,-12(fp)
    6380:	10800303 	ldbu	r2,12(r2)
    6384:	10c03fcc 	andi	r3,r2,255
    6388:	e0bffc03 	ldbu	r2,-16(fp)
    638c:	18801026 	beq	r3,r2,63d0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    6390:	e0bffe17 	ldw	r2,-8(fp)
    6394:	10000e26 	beq	r2,zero,63d0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    6398:	e0bffd17 	ldw	r2,-12(fp)
    639c:	10800303 	ldbu	r2,12(r2)
    63a0:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    63a4:	e0bffc44 	addi	r2,fp,-15
    63a8:	d8800215 	stw	r2,8(sp)
    63ac:	00800044 	movi	r2,1
    63b0:	d8800115 	stw	r2,4(sp)
    63b4:	d8000015 	stw	zero,0(sp)
    63b8:	01c00084 	movi	r7,2
    63bc:	000d883a 	mov	r6,zero
    63c0:	000b883a 	mov	r5,zero
    63c4:	e13ffe17 	ldw	r4,-8(fp)
    63c8:	00091fc0 	call	91fc <_ZN6USBHID9SetReportEhhhhtPh>
    63cc:	00000106 	br	63d4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    63d0:	0005883a 	mov	r2,zero
        };
    63d4:	e037883a 	mov	sp,fp
    63d8:	dfc00117 	ldw	ra,4(sp)
    63dc:	df000017 	ldw	fp,0(sp)
    63e0:	dec00204 	addi	sp,sp,8
    63e4:	f800283a 	ret

000063e8 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    63e8:	defffc04 	addi	sp,sp,-16
    63ec:	df000315 	stw	fp,12(sp)
    63f0:	df000304 	addi	fp,sp,12
    63f4:	e13ffd15 	stw	r4,-12(fp)
    63f8:	2807883a 	mov	r3,r5
    63fc:	3005883a 	mov	r2,r6
    6400:	e0fffe05 	stb	r3,-8(fp)
    6404:	e0bfff05 	stb	r2,-4(fp)
        };
    6408:	0001883a 	nop
    640c:	e037883a 	mov	sp,fp
    6410:	df000017 	ldw	fp,0(sp)
    6414:	dec00104 	addi	sp,sp,4
    6418:	f800283a 	ret

0000641c <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    641c:	defffc04 	addi	sp,sp,-16
    6420:	df000315 	stw	fp,12(sp)
    6424:	df000304 	addi	fp,sp,12
    6428:	e13ffd15 	stw	r4,-12(fp)
    642c:	2807883a 	mov	r3,r5
    6430:	3005883a 	mov	r2,r6
    6434:	e0fffe05 	stb	r3,-8(fp)
    6438:	e0bfff05 	stb	r2,-4(fp)
        };
    643c:	0001883a 	nop
    6440:	e037883a 	mov	sp,fp
    6444:	df000017 	ldw	fp,0(sp)
    6448:	dec00104 	addi	sp,sp,4
    644c:	f800283a 	ret

00006450 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6450:	defffc04 	addi	sp,sp,-16
    6454:	df000315 	stw	fp,12(sp)
    6458:	df000304 	addi	fp,sp,12
    645c:	e13ffd15 	stw	r4,-12(fp)
    6460:	2807883a 	mov	r3,r5
    6464:	3005883a 	mov	r2,r6
    6468:	e0fffe05 	stb	r3,-8(fp)
    646c:	e0bfff05 	stb	r2,-4(fp)
        };
    6470:	0001883a 	nop
    6474:	e037883a 	mov	sp,fp
    6478:	df000017 	ldw	fp,0(sp)
    647c:	dec00104 	addi	sp,sp,4
    6480:	f800283a 	ret

00006484 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    6484:	defffe04 	addi	sp,sp,-8
    6488:	df000115 	stw	fp,4(sp)
    648c:	df000104 	addi	fp,sp,4
    6490:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    6494:	008000b4 	movhi	r2,2
    6498:	109b8584 	addi	r2,r2,28182
        };
    649c:	e037883a 	mov	sp,fp
    64a0:	df000017 	ldw	fp,0(sp)
    64a4:	dec00104 	addi	sp,sp,4
    64a8:	f800283a 	ret

000064ac <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    64ac:	defffe04 	addi	sp,sp,-8
    64b0:	df000115 	stw	fp,4(sp)
    64b4:	df000104 	addi	fp,sp,4
    64b8:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    64bc:	008000b4 	movhi	r2,2
    64c0:	109b8804 	addi	r2,r2,28192
        };
    64c4:	e037883a 	mov	sp,fp
    64c8:	df000017 	ldw	fp,0(sp)
    64cc:	dec00104 	addi	sp,sp,4
    64d0:	f800283a 	ret

000064d4 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    64d4:	defffe04 	addi	sp,sp,-8
    64d8:	df000115 	stw	fp,4(sp)
    64dc:	df000104 	addi	fp,sp,4
    64e0:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    64e4:	008000b4 	movhi	r2,2
    64e8:	109b8b04 	addi	r2,r2,28204
        };
    64ec:	e037883a 	mov	sp,fp
    64f0:	df000017 	ldw	fp,0(sp)
    64f4:	dec00104 	addi	sp,sp,4
    64f8:	f800283a 	ret

000064fc <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    64fc:	defffe04 	addi	sp,sp,-8
    6500:	df000115 	stw	fp,4(sp)
    6504:	df000104 	addi	fp,sp,4
    6508:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    650c:	d0a1e684 	addi	r2,gp,-30822
        };
    6510:	e037883a 	mov	sp,fp
    6514:	df000017 	ldw	fp,0(sp)
    6518:	dec00104 	addi	sp,sp,4
    651c:	f800283a 	ret

00006520 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    6520:	defffc04 	addi	sp,sp,-16
    6524:	dfc00315 	stw	ra,12(sp)
    6528:	df000215 	stw	fp,8(sp)
    652c:	df000204 	addi	fp,sp,8
    6530:	2005883a 	mov	r2,r4
    6534:	e17fff15 	stw	r5,-4(fp)
    6538:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    653c:	d0e1eb17 	ldw	r3,-30804(gp)
    6540:	e0bfff17 	ldw	r2,-4(fp)
    6544:	18800416 	blt	r3,r2,6558 <_Z9E_Notifycci+0x38>
        printf("%c", c);
    6548:	e0bffe07 	ldb	r2,-8(fp)
    654c:	1009883a 	mov	r4,r2
    6550:	000ff3c0 	call	ff3c <putchar>
    6554:	00000106 	br	655c <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6558:	0001883a 	nop
        printf("%c", c);
}
    655c:	e037883a 	mov	sp,fp
    6560:	dfc00117 	ldw	ra,4(sp)
    6564:	df000017 	ldw	fp,0(sp)
    6568:	dec00204 	addi	sp,sp,8
    656c:	f800283a 	ret

00006570 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    6570:	defffb04 	addi	sp,sp,-20
    6574:	dfc00415 	stw	ra,16(sp)
    6578:	df000315 	stw	fp,12(sp)
    657c:	df000304 	addi	fp,sp,12
    6580:	e13ffe15 	stw	r4,-8(fp)
    6584:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6588:	d0e1eb17 	ldw	r3,-30804(gp)
    658c:	e0bfff17 	ldw	r2,-4(fp)
    6590:	18801016 	blt	r3,r2,65d4 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    6594:	e0bffe17 	ldw	r2,-8(fp)
    6598:	10001026 	beq	r2,zero,65dc <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    659c:	e0bffe17 	ldw	r2,-8(fp)
    65a0:	10c00044 	addi	r3,r2,1
    65a4:	e0fffe15 	stw	r3,-8(fp)
    65a8:	10800003 	ldbu	r2,0(r2)
    65ac:	e0bffd05 	stb	r2,-12(fp)
    65b0:	e0bffd07 	ldb	r2,-12(fp)
    65b4:	1004c03a 	cmpne	r2,r2,zero
    65b8:	10803fcc 	andi	r2,r2,255
    65bc:	10000826 	beq	r2,zero,65e0 <_Z8E_NotifyPKci+0x70>
    65c0:	e0bffd07 	ldb	r2,-12(fp)
    65c4:	e17fff17 	ldw	r5,-4(fp)
    65c8:	1009883a 	mov	r4,r2
    65cc:	00065200 	call	6520 <_Z9E_Notifycci>
    65d0:	003ff206 	br	659c <__alt_data_end+0xfc00659c>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    65d4:	0001883a 	nop
    65d8:	00000106 	br	65e0 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    65dc:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    65e0:	e037883a 	mov	sp,fp
    65e4:	dfc00117 	ldw	ra,4(sp)
    65e8:	df000017 	ldw	fp,0(sp)
    65ec:	dec00204 	addi	sp,sp,8
    65f0:	f800283a 	ret

000065f4 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    65f4:	defffb04 	addi	sp,sp,-20
    65f8:	dfc00415 	stw	ra,16(sp)
    65fc:	df000315 	stw	fp,12(sp)
    6600:	df000304 	addi	fp,sp,12
    6604:	e13ffe15 	stw	r4,-8(fp)
    6608:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    660c:	d0e1eb17 	ldw	r3,-30804(gp)
    6610:	e0bfff17 	ldw	r2,-4(fp)
    6614:	18801016 	blt	r3,r2,6658 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    6618:	e0bffe17 	ldw	r2,-8(fp)
    661c:	10001026 	beq	r2,zero,6660 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    6620:	e0bffe17 	ldw	r2,-8(fp)
    6624:	10c00044 	addi	r3,r2,1
    6628:	e0fffe15 	stw	r3,-8(fp)
    662c:	10800003 	ldbu	r2,0(r2)
    6630:	e0bffd05 	stb	r2,-12(fp)
    6634:	e0bffd07 	ldb	r2,-12(fp)
    6638:	1004c03a 	cmpne	r2,r2,zero
    663c:	10803fcc 	andi	r2,r2,255
    6640:	10000826 	beq	r2,zero,6664 <_Z11E_NotifyStrPKci+0x70>
    6644:	e0bffd07 	ldb	r2,-12(fp)
    6648:	e17fff17 	ldw	r5,-4(fp)
    664c:	1009883a 	mov	r4,r2
    6650:	00065200 	call	6520 <_Z9E_Notifycci>
    6654:	003ff206 	br	6620 <__alt_data_end+0xfc006620>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6658:	0001883a 	nop
    665c:	00000106 	br	6664 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    6660:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    6664:	e037883a 	mov	sp,fp
    6668:	dfc00117 	ldw	ra,4(sp)
    666c:	df000017 	ldw	fp,0(sp)
    6670:	dec00204 	addi	sp,sp,8
    6674:	f800283a 	ret

00006678 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    6678:	defffd04 	addi	sp,sp,-12
    667c:	df000215 	stw	fp,8(sp)
    6680:	df000204 	addi	fp,sp,8
    6684:	2005883a 	mov	r2,r4
    6688:	e17fff15 	stw	r5,-4(fp)
    668c:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    6690:	e037883a 	mov	sp,fp
    6694:	df000017 	ldw	fp,0(sp)
    6698:	dec00104 	addi	sp,sp,4
    669c:	f800283a 	ret

000066a0 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    66a0:	defffc04 	addi	sp,sp,-16
    66a4:	df000315 	stw	fp,12(sp)
    66a8:	df000304 	addi	fp,sp,12
    66ac:	e13ffd15 	stw	r4,-12(fp)
    66b0:	e17ffe15 	stw	r5,-8(fp)
    66b4:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    66b8:	e037883a 	mov	sp,fp
    66bc:	df000017 	ldw	fp,0(sp)
    66c0:	dec00104 	addi	sp,sp,4
    66c4:	f800283a 	ret

000066c8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    66c8:	defffc04 	addi	sp,sp,-16
    66cc:	df000315 	stw	fp,12(sp)
    66d0:	df000304 	addi	fp,sp,12
    66d4:	e13ffd15 	stw	r4,-12(fp)
    66d8:	e17ffe15 	stw	r5,-8(fp)
    66dc:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    66e0:	e0bffd17 	ldw	r2,-12(fp)
    66e4:	10800017 	ldw	r2,0(r2)
    66e8:	1000021e 	bne	r2,zero,66f4 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    66ec:	0005883a 	mov	r2,zero
    66f0:	00003306 	br	67c0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    66f4:	e0bffd17 	ldw	r2,-12(fp)
    66f8:	10800103 	ldbu	r2,4(r2)
    66fc:	10803fcc 	andi	r2,r2,255
    6700:	10002426 	beq	r2,zero,6794 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    6704:	e0bfff17 	ldw	r2,-4(fp)
    6708:	1080000b 	ldhu	r2,0(r2)
    670c:	10bfffcc 	andi	r2,r2,65535
    6710:	10002026 	beq	r2,zero,6794 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    6714:	e0bffd17 	ldw	r2,-12(fp)
    6718:	10800017 	ldw	r2,0(r2)
    671c:	e0fffd17 	ldw	r3,-12(fp)
    6720:	18c00143 	ldbu	r3,5(r3)
    6724:	19003fcc 	andi	r4,r3,255
    6728:	e0fffd17 	ldw	r3,-12(fp)
    672c:	18c00103 	ldbu	r3,4(r3)
    6730:	18c03fcc 	andi	r3,r3,255
    6734:	20c7c83a 	sub	r3,r4,r3
    6738:	10c5883a 	add	r2,r2,r3
    673c:	e0fffe17 	ldw	r3,-8(fp)
    6740:	18c00017 	ldw	r3,0(r3)
    6744:	18c00003 	ldbu	r3,0(r3)
    6748:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    674c:	e0bffd17 	ldw	r2,-12(fp)
    6750:	10800103 	ldbu	r2,4(r2)
    6754:	10bfffc4 	addi	r2,r2,-1
    6758:	1007883a 	mov	r3,r2
    675c:	e0bffd17 	ldw	r2,-12(fp)
    6760:	10c00105 	stb	r3,4(r2)
    6764:	e0bfff17 	ldw	r2,-4(fp)
    6768:	1080000b 	ldhu	r2,0(r2)
    676c:	10bfffc4 	addi	r2,r2,-1
    6770:	1007883a 	mov	r3,r2
    6774:	e0bfff17 	ldw	r2,-4(fp)
    6778:	10c0000d 	sth	r3,0(r2)
    677c:	e0bffe17 	ldw	r2,-8(fp)
    6780:	10800017 	ldw	r2,0(r2)
    6784:	10c00044 	addi	r3,r2,1
    6788:	e0bffe17 	ldw	r2,-8(fp)
    678c:	10c00015 	stw	r3,0(r2)
    6790:	003fd806 	br	66f4 <__alt_data_end+0xfc0066f4>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    6794:	e0bffd17 	ldw	r2,-12(fp)
    6798:	10800103 	ldbu	r2,4(r2)
    679c:	10803fcc 	andi	r2,r2,255
    67a0:	10000226 	beq	r2,zero,67ac <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    67a4:	0005883a 	mov	r2,zero
    67a8:	00000506 	br	67c0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    67ac:	e0bffd17 	ldw	r2,-12(fp)
    67b0:	10c00143 	ldbu	r3,5(r2)
    67b4:	e0bffd17 	ldw	r2,-12(fp)
    67b8:	10c00105 	stb	r3,4(r2)
        return true;
    67bc:	00800044 	movi	r2,1
}
    67c0:	e037883a 	mov	sp,fp
    67c4:	df000017 	ldw	fp,0(sp)
    67c8:	dec00104 	addi	sp,sp,4
    67cc:	f800283a 	ret

000067d0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    67d0:	defffa04 	addi	sp,sp,-24
    67d4:	dfc00515 	stw	ra,20(sp)
    67d8:	df000415 	stw	fp,16(sp)
    67dc:	df000404 	addi	fp,sp,16
    67e0:	e13ffc15 	stw	r4,-16(fp)
    67e4:	e17ffd15 	stw	r5,-12(fp)
    67e8:	e1bffe15 	stw	r6,-8(fp)
    67ec:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    67f0:	e0bffc17 	ldw	r2,-16(fp)
    67f4:	10800003 	ldbu	r2,0(r2)
    67f8:	10803fcc 	andi	r2,r2,255
    67fc:	10c00060 	cmpeqi	r3,r2,1
    6800:	1800181e 	bne	r3,zero,6864 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    6804:	10c00088 	cmpgei	r3,r2,2
    6808:	1800021e 	bne	r3,zero,6814 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    680c:	10000626 	beq	r2,zero,6828 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    6810:	00007e06 	br	6a0c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    6814:	10c000a0 	cmpeqi	r3,r2,2
    6818:	18004a1e 	bne	r3,zero,6944 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    681c:	108000e0 	cmpeqi	r2,r2,3
    6820:	1000571e 	bne	r2,zero,6980 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    6824:	00007906 	br	6a0c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    6828:	e0bffc17 	ldw	r2,-16(fp)
    682c:	10800417 	ldw	r2,16(r2)
    6830:	e0fffc17 	ldw	r3,-16(fp)
    6834:	18c00303 	ldbu	r3,12(r3)
    6838:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    683c:	e0bffc17 	ldw	r2,-16(fp)
    6840:	10c00504 	addi	r3,r2,20
    6844:	e0bffc17 	ldw	r2,-16(fp)
    6848:	10800417 	ldw	r2,16(r2)
    684c:	100b883a 	mov	r5,r2
    6850:	1809883a 	mov	r4,r3
    6854:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    6858:	e0bffc17 	ldw	r2,-16(fp)
    685c:	00c00044 	movi	r3,1
    6860:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    6864:	e0bffc17 	ldw	r2,-16(fp)
    6868:	10800504 	addi	r2,r2,20
    686c:	e1bffe17 	ldw	r6,-8(fp)
    6870:	e17ffd17 	ldw	r5,-12(fp)
    6874:	1009883a 	mov	r4,r2
    6878:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    687c:	1080005c 	xori	r2,r2,1
    6880:	10803fcc 	andi	r2,r2,255
    6884:	10000226 	beq	r2,zero,6890 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    6888:	0005883a 	mov	r2,zero
    688c:	00006006 	br	6a10 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    6890:	e0bffc17 	ldw	r2,-16(fp)
    6894:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    6898:	e0bffc17 	ldw	r2,-16(fp)
    689c:	10800417 	ldw	r2,16(r2)
    68a0:	10800003 	ldbu	r2,0(r2)
    68a4:	10803fcc 	andi	r2,r2,255
    68a8:	10800130 	cmpltui	r2,r2,4
    68ac:	10000e1e 	bne	r2,zero,68e8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    68b0:	e0bffc17 	ldw	r2,-16(fp)
    68b4:	10800417 	ldw	r2,16(r2)
    68b8:	10c00043 	ldbu	r3,1(r2)
    68bc:	11000083 	ldbu	r4,2(r2)
    68c0:	2008923a 	slli	r4,r4,8
    68c4:	20c6b03a 	or	r3,r4,r3
    68c8:	110000c3 	ldbu	r4,3(r2)
    68cc:	2008943a 	slli	r4,r4,16
    68d0:	20c6b03a 	or	r3,r4,r3
    68d4:	10800103 	ldbu	r2,4(r2)
    68d8:	1004963a 	slli	r2,r2,24
    68dc:	10c4b03a 	or	r2,r2,r3
    68e0:	10800017 	ldw	r2,0(r2)
    68e4:	00000e06 	br	6920 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    68e8:	e0bffc17 	ldw	r2,-16(fp)
    68ec:	10800417 	ldw	r2,16(r2)
    68f0:	10c00043 	ldbu	r3,1(r2)
    68f4:	11000083 	ldbu	r4,2(r2)
    68f8:	2008923a 	slli	r4,r4,8
    68fc:	20c6b03a 	or	r3,r4,r3
    6900:	110000c3 	ldbu	r4,3(r2)
    6904:	2008943a 	slli	r4,r4,16
    6908:	20c6b03a 	or	r3,r4,r3
    690c:	10800103 	ldbu	r2,4(r2)
    6910:	1004963a 	slli	r2,r2,24
    6914:	10c4b03a 	or	r2,r2,r3
    6918:	1080000b 	ldhu	r2,0(r2)
    691c:	10bfffcc 	andi	r2,r2,65535
    6920:	e0fffc17 	ldw	r3,-16(fp)
    6924:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    6928:	e0bffc17 	ldw	r2,-16(fp)
    692c:	10c00117 	ldw	r3,4(r2)
    6930:	e0bffc17 	ldw	r2,-16(fp)
    6934:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    6938:	e0bffc17 	ldw	r2,-16(fp)
    693c:	00c00084 	movi	r3,2
    6940:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    6944:	e0bffc17 	ldw	r2,-16(fp)
    6948:	10800417 	ldw	r2,16(r2)
    694c:	e0fffc17 	ldw	r3,-16(fp)
    6950:	18c00343 	ldbu	r3,13(r3)
    6954:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6958:	e0bffc17 	ldw	r2,-16(fp)
    695c:	10c00504 	addi	r3,r2,20
    6960:	e0bffc17 	ldw	r2,-16(fp)
    6964:	10800417 	ldw	r2,16(r2)
    6968:	100b883a 	mov	r5,r2
    696c:	1809883a 	mov	r4,r3
    6970:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    6974:	e0bffc17 	ldw	r2,-16(fp)
    6978:	00c000c4 	movi	r3,3
    697c:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6980:	e0bffc17 	ldw	r2,-16(fp)
    6984:	10800217 	ldw	r2,8(r2)
    6988:	10001e26 	beq	r2,zero,6a04 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    698c:	e0bffc17 	ldw	r2,-16(fp)
    6990:	10800504 	addi	r2,r2,20
    6994:	e1bffe17 	ldw	r6,-8(fp)
    6998:	e17ffd17 	ldw	r5,-12(fp)
    699c:	1009883a 	mov	r4,r2
    69a0:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    69a4:	1080005c 	xori	r2,r2,1
    69a8:	10803fcc 	andi	r2,r2,255
    69ac:	10000226 	beq	r2,zero,69b8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    69b0:	0005883a 	mov	r2,zero
    69b4:	00001606 	br	6a10 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    69b8:	e0bfff17 	ldw	r2,-4(fp)
    69bc:	10000b26 	beq	r2,zero,69ec <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    69c0:	e0bffc17 	ldw	r2,-16(fp)
    69c4:	11000417 	ldw	r4,16(r2)
    69c8:	e0bffc17 	ldw	r2,-16(fp)
    69cc:	10c00117 	ldw	r3,4(r2)
    69d0:	e0bffc17 	ldw	r2,-16(fp)
    69d4:	10800217 	ldw	r2,8(r2)
    69d8:	1887c83a 	sub	r3,r3,r2
    69dc:	e0bfff17 	ldw	r2,-4(fp)
    69e0:	e1800217 	ldw	r6,8(fp)
    69e4:	180b883a 	mov	r5,r3
    69e8:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    69ec:	e0bffc17 	ldw	r2,-16(fp)
    69f0:	10800217 	ldw	r2,8(r2)
    69f4:	10ffffc4 	addi	r3,r2,-1
    69f8:	e0bffc17 	ldw	r2,-16(fp)
    69fc:	10c00215 	stw	r3,8(r2)
    6a00:	003fdf06 	br	6980 <__alt_data_end+0xfc006980>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    6a04:	e0bffc17 	ldw	r2,-16(fp)
    6a08:	10000005 	stb	zero,0(r2)
        }
        return true;
    6a0c:	00800044 	movi	r2,1
}
    6a10:	e037883a 	mov	sp,fp
    6a14:	dfc00117 	ldw	ra,4(sp)
    6a18:	df000017 	ldw	fp,0(sp)
    6a1c:	dec00204 	addi	sp,sp,8
    6a20:	f800283a 	ret

00006a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    6a24:	defff904 	addi	sp,sp,-28
    6a28:	dfc00615 	stw	ra,24(sp)
    6a2c:	df000515 	stw	fp,20(sp)
    6a30:	df000504 	addi	fp,sp,20
    6a34:	e13ffd15 	stw	r4,-12(fp)
    6a38:	2807883a 	mov	r3,r5
    6a3c:	3005883a 	mov	r2,r6
    6a40:	e0fffe05 	stb	r3,-8(fp)
    6a44:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    6a48:	e0bfff0b 	ldhu	r2,-4(fp)
    6a4c:	1005d23a 	srai	r2,r2,8
    6a50:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    6a54:	e0bfff0b 	ldhu	r2,-4(fp)
    6a58:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    6a5c:	e03ffb8d 	sth	zero,-18(fp)
    6a60:	e03ffc0d 	sth	zero,-16(fp)
    6a64:	e0bffe03 	ldbu	r2,-8(fp)
    6a68:	e0bffbc5 	stb	r2,-17(fp)
    6a6c:	e0bffb03 	ldbu	r2,-20(fp)
    6a70:	e0bffc05 	stb	r2,-16(fp)
    6a74:	e0bffb43 	ldbu	r2,-19(fp)
    6a78:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6a7c:	e0bffb84 	addi	r2,fp,-18
    6a80:	000f883a 	mov	r7,zero
    6a84:	01800104 	movi	r6,4
    6a88:	100b883a 	mov	r5,r2
    6a8c:	e13ffd17 	ldw	r4,-12(fp)
    6a90:	00218fc0 	call	218fc <alt_avalon_i2c_master_tx>
    6a94:	1004c03a 	cmpne	r2,r2,zero
    6a98:	10803fcc 	andi	r2,r2,255
    6a9c:	10000426 	beq	r2,zero,6ab0 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    6aa0:	010000b4 	movhi	r4,2
    6aa4:	211bb904 	addi	r4,r4,28388
    6aa8:	000fef80 	call	fef8 <printf>
	}
	return;
    6aac:	0001883a 	nop
    6ab0:	0001883a 	nop
}
    6ab4:	e037883a 	mov	sp,fp
    6ab8:	dfc00117 	ldw	ra,4(sp)
    6abc:	df000017 	ldw	fp,0(sp)
    6ac0:	dec00204 	addi	sp,sp,8
    6ac4:	f800283a 	ret

00006ac8 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6ac8:	defff604 	addi	sp,sp,-40
    6acc:	dfc00915 	stw	ra,36(sp)
    6ad0:	df000815 	stw	fp,32(sp)
    6ad4:	dc000715 	stw	r16,28(sp)
    6ad8:	df000804 	addi	fp,sp,32
    6adc:	e13ffb15 	stw	r4,-20(fp)
    6ae0:	3009883a 	mov	r4,r6
    6ae4:	e1fffe15 	stw	r7,-8(fp)
    6ae8:	e17ffc05 	stb	r5,-16(fp)
    6aec:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    6af0:	d809883a 	mov	r4,sp
    6af4:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    6af8:	e13ffd03 	ldbu	r4,-12(fp)
    6afc:	21000044 	addi	r4,r4,1
    6b00:	2109883a 	add	r4,r4,r4
    6b04:	213fffc4 	addi	r4,r4,-1
    6b08:	e13ff915 	stw	r4,-28(fp)
    6b0c:	200b883a 	mov	r5,r4
    6b10:	29400044 	addi	r5,r5,1
    6b14:	2819883a 	mov	r12,r5
    6b18:	001b883a 	mov	r13,zero
    6b1c:	600ad77a 	srli	r5,r12,29
    6b20:	681290fa 	slli	r9,r13,3
    6b24:	2a52b03a 	or	r9,r5,r9
    6b28:	601090fa 	slli	r8,r12,3
    6b2c:	200b883a 	mov	r5,r4
    6b30:	29400044 	addi	r5,r5,1
    6b34:	2815883a 	mov	r10,r5
    6b38:	0017883a 	mov	r11,zero
    6b3c:	500ad77a 	srli	r5,r10,29
    6b40:	580690fa 	slli	r3,r11,3
    6b44:	28c6b03a 	or	r3,r5,r3
    6b48:	500490fa 	slli	r2,r10,3
    6b4c:	2005883a 	mov	r2,r4
    6b50:	10800044 	addi	r2,r2,1
    6b54:	108000c4 	addi	r2,r2,3
    6b58:	1004d0ba 	srli	r2,r2,2
    6b5c:	1085883a 	add	r2,r2,r2
    6b60:	1085883a 	add	r2,r2,r2
    6b64:	d8b7c83a 	sub	sp,sp,r2
    6b68:	d805883a 	mov	r2,sp
    6b6c:	1005883a 	mov	r2,r2
    6b70:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    6b74:	e0bffa17 	ldw	r2,-24(fp)
    6b78:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    6b7c:	e0bffa17 	ldw	r2,-24(fp)
    6b80:	e0fffc03 	ldbu	r3,-16(fp)
    6b84:	10c00045 	stb	r3,1(r2)
	int i = 0;
    6b88:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    6b8c:	e03ff815 	stw	zero,-32(fp)
    6b90:	e0bffd03 	ldbu	r2,-12(fp)
    6b94:	e0fff817 	ldw	r3,-32(fp)
    6b98:	18801e0e 	bge	r3,r2,6c14 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    6b9c:	e0bff817 	ldw	r2,-32(fp)
    6ba0:	10c00084 	addi	r3,r2,2
    6ba4:	e0bff817 	ldw	r2,-32(fp)
    6ba8:	1085883a 	add	r2,r2,r2
    6bac:	1009883a 	mov	r4,r2
    6bb0:	e0bffe17 	ldw	r2,-8(fp)
    6bb4:	1105883a 	add	r2,r2,r4
    6bb8:	1080000b 	ldhu	r2,0(r2)
    6bbc:	10bfffcc 	andi	r2,r2,65535
    6bc0:	1005d23a 	srai	r2,r2,8
    6bc4:	1009883a 	mov	r4,r2
    6bc8:	e0bffa17 	ldw	r2,-24(fp)
    6bcc:	10c5883a 	add	r2,r2,r3
    6bd0:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    6bd4:	e0bff817 	ldw	r2,-32(fp)
    6bd8:	10c000c4 	addi	r3,r2,3
    6bdc:	e0bff817 	ldw	r2,-32(fp)
    6be0:	1085883a 	add	r2,r2,r2
    6be4:	1009883a 	mov	r4,r2
    6be8:	e0bffe17 	ldw	r2,-8(fp)
    6bec:	1105883a 	add	r2,r2,r4
    6bf0:	1080000b 	ldhu	r2,0(r2)
    6bf4:	1009883a 	mov	r4,r2
    6bf8:	e0bffa17 	ldw	r2,-24(fp)
    6bfc:	10c5883a 	add	r2,r2,r3
    6c00:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    6c04:	e0bff817 	ldw	r2,-32(fp)
    6c08:	10800044 	addi	r2,r2,1
    6c0c:	e0bff815 	stw	r2,-32(fp)
    6c10:	003fdf06 	br	6b90 <__alt_data_end+0xfc006b90>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6c14:	e0fffa17 	ldw	r3,-24(fp)
    6c18:	e0bffd03 	ldbu	r2,-12(fp)
    6c1c:	10800044 	addi	r2,r2,1
    6c20:	1085883a 	add	r2,r2,r2
    6c24:	000f883a 	mov	r7,zero
    6c28:	100d883a 	mov	r6,r2
    6c2c:	180b883a 	mov	r5,r3
    6c30:	e13ffb17 	ldw	r4,-20(fp)
    6c34:	00218fc0 	call	218fc <alt_avalon_i2c_master_tx>
    6c38:	1004c03a 	cmpne	r2,r2,zero
    6c3c:	10803fcc 	andi	r2,r2,255
    6c40:	10000326 	beq	r2,zero,6c50 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    6c44:	010000b4 	movhi	r4,2
    6c48:	211bc004 	addi	r4,r4,28416
    6c4c:	000fef80 	call	fef8 <printf>
	}
	return (data+nwords);
    6c50:	e0bffd03 	ldbu	r2,-12(fp)
    6c54:	1085883a 	add	r2,r2,r2
    6c58:	1007883a 	mov	r3,r2
    6c5c:	e0bffe17 	ldw	r2,-8(fp)
    6c60:	10c5883a 	add	r2,r2,r3
    6c64:	8037883a 	mov	sp,r16
}
    6c68:	e6ffff04 	addi	sp,fp,-4
    6c6c:	dfc00217 	ldw	ra,8(sp)
    6c70:	df000117 	ldw	fp,4(sp)
    6c74:	dc000017 	ldw	r16,0(sp)
    6c78:	dec00304 	addi	sp,sp,12
    6c7c:	f800283a 	ret

00006c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    6c80:	defff804 	addi	sp,sp,-32
    6c84:	dfc00715 	stw	ra,28(sp)
    6c88:	df000615 	stw	fp,24(sp)
    6c8c:	df000604 	addi	fp,sp,24
    6c90:	e13ffe15 	stw	r4,-8(fp)
    6c94:	2805883a 	mov	r2,r5
    6c98:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    6c9c:	e03ffc8d 	sth	zero,-14(fp)
    6ca0:	e0bfff03 	ldbu	r2,-4(fp)
    6ca4:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    6ca8:	e03ffd05 	stb	zero,-12(fp)
    6cac:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6cb0:	e13ffd04 	addi	r4,fp,-12
    6cb4:	e0fffc84 	addi	r3,fp,-14
    6cb8:	d8000115 	stw	zero,4(sp)
    6cbc:	00800084 	movi	r2,2
    6cc0:	d8800015 	stw	r2,0(sp)
    6cc4:	200f883a 	mov	r7,r4
    6cc8:	01800084 	movi	r6,2
    6ccc:	180b883a 	mov	r5,r3
    6cd0:	e13ffe17 	ldw	r4,-8(fp)
    6cd4:	0021b200 	call	21b20 <alt_avalon_i2c_master_tx_rx>
    6cd8:	1004c03a 	cmpne	r2,r2,zero
    6cdc:	10803fcc 	andi	r2,r2,255
    6ce0:	10000326 	beq	r2,zero,6cf0 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    6ce4:	010000b4 	movhi	r4,2
    6ce8:	211bc604 	addi	r4,r4,28440
    6cec:	000fef80 	call	fef8 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    6cf0:	e0bffd03 	ldbu	r2,-12(fp)
    6cf4:	10803fcc 	andi	r2,r2,255
    6cf8:	1004923a 	slli	r2,r2,8
    6cfc:	1007883a 	mov	r3,r2
    6d00:	e0bffd43 	ldbu	r2,-11(fp)
    6d04:	10803fcc 	andi	r2,r2,255
    6d08:	1884b03a 	or	r2,r3,r2
    6d0c:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    6d10:	e0bffc0b 	ldhu	r2,-16(fp)
}
    6d14:	e037883a 	mov	sp,fp
    6d18:	dfc00117 	ldw	ra,4(sp)
    6d1c:	df000017 	ldw	fp,0(sp)
    6d20:	dec00204 	addi	sp,sp,8
    6d24:	f800283a 	ret

00006d28 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6d28:	defff304 	addi	sp,sp,-52
    6d2c:	dfc00c15 	stw	ra,48(sp)
    6d30:	df000b15 	stw	fp,44(sp)
    6d34:	dc000a15 	stw	r16,40(sp)
    6d38:	df000b04 	addi	fp,sp,44
    6d3c:	e13ffb15 	stw	r4,-20(fp)
    6d40:	3009883a 	mov	r4,r6
    6d44:	e1fffe15 	stw	r7,-8(fp)
    6d48:	e17ffc05 	stb	r5,-16(fp)
    6d4c:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6d50:	d809883a 	mov	r4,sp
    6d54:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    6d58:	e03ffa0d 	sth	zero,-24(fp)
    6d5c:	e13ffc03 	ldbu	r4,-16(fp)
    6d60:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    6d64:	e13ffd03 	ldbu	r4,-12(fp)
    6d68:	2109883a 	add	r4,r4,r4
    6d6c:	213fffc4 	addi	r4,r4,-1
    6d70:	e13ff815 	stw	r4,-32(fp)
    6d74:	200b883a 	mov	r5,r4
    6d78:	29400044 	addi	r5,r5,1
    6d7c:	2819883a 	mov	r12,r5
    6d80:	001b883a 	mov	r13,zero
    6d84:	600ad77a 	srli	r5,r12,29
    6d88:	681290fa 	slli	r9,r13,3
    6d8c:	2a52b03a 	or	r9,r5,r9
    6d90:	601090fa 	slli	r8,r12,3
    6d94:	200b883a 	mov	r5,r4
    6d98:	29400044 	addi	r5,r5,1
    6d9c:	2815883a 	mov	r10,r5
    6da0:	0017883a 	mov	r11,zero
    6da4:	500ad77a 	srli	r5,r10,29
    6da8:	580690fa 	slli	r3,r11,3
    6dac:	28c6b03a 	or	r3,r5,r3
    6db0:	500490fa 	slli	r2,r10,3
    6db4:	2005883a 	mov	r2,r4
    6db8:	10800044 	addi	r2,r2,1
    6dbc:	108000c4 	addi	r2,r2,3
    6dc0:	1004d0ba 	srli	r2,r2,2
    6dc4:	1085883a 	add	r2,r2,r2
    6dc8:	1085883a 	add	r2,r2,r2
    6dcc:	d8b7c83a 	sub	sp,sp,r2
    6dd0:	d8800204 	addi	r2,sp,8
    6dd4:	1005883a 	mov	r2,r2
    6dd8:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    6ddc:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    6de0:	e0fff917 	ldw	r3,-28(fp)
    6de4:	e0bffd03 	ldbu	r2,-12(fp)
    6de8:	1085883a 	add	r2,r2,r2
    6dec:	1009883a 	mov	r4,r2
    6df0:	e0bffa04 	addi	r2,fp,-24
    6df4:	d8000115 	stw	zero,4(sp)
    6df8:	d9000015 	stw	r4,0(sp)
    6dfc:	180f883a 	mov	r7,r3
    6e00:	01800084 	movi	r6,2
    6e04:	100b883a 	mov	r5,r2
    6e08:	e13ffb17 	ldw	r4,-20(fp)
    6e0c:	0021b200 	call	21b20 <alt_avalon_i2c_master_tx_rx>
    6e10:	1004c03a 	cmpne	r2,r2,zero
    6e14:	10803fcc 	andi	r2,r2,255
    6e18:	10000326 	beq	r2,zero,6e28 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    6e1c:	010000b4 	movhi	r4,2
    6e20:	211bcc04 	addi	r4,r4,28464
    6e24:	000fef80 	call	fef8 <printf>
	}
	for(i = 0; i < nwords; i++) {
    6e28:	e03ff715 	stw	zero,-36(fp)
    6e2c:	e0bffd03 	ldbu	r2,-12(fp)
    6e30:	e0fff717 	ldw	r3,-36(fp)
    6e34:	18801b0e 	bge	r3,r2,6ea4 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    6e38:	e0bff717 	ldw	r2,-36(fp)
    6e3c:	1085883a 	add	r2,r2,r2
    6e40:	1007883a 	mov	r3,r2
    6e44:	e0bffe17 	ldw	r2,-8(fp)
    6e48:	10c7883a 	add	r3,r2,r3
    6e4c:	e0bff717 	ldw	r2,-36(fp)
    6e50:	1085883a 	add	r2,r2,r2
    6e54:	1009883a 	mov	r4,r2
    6e58:	e0bff917 	ldw	r2,-28(fp)
    6e5c:	1105883a 	add	r2,r2,r4
    6e60:	10800003 	ldbu	r2,0(r2)
    6e64:	10803fcc 	andi	r2,r2,255
    6e68:	1004923a 	slli	r2,r2,8
    6e6c:	100b883a 	mov	r5,r2
    6e70:	e0bff717 	ldw	r2,-36(fp)
    6e74:	1085883a 	add	r2,r2,r2
    6e78:	10800044 	addi	r2,r2,1
    6e7c:	e13ff917 	ldw	r4,-28(fp)
    6e80:	2085883a 	add	r2,r4,r2
    6e84:	10800003 	ldbu	r2,0(r2)
    6e88:	10803fcc 	andi	r2,r2,255
    6e8c:	2884b03a 	or	r2,r5,r2
    6e90:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6e94:	e0bff717 	ldw	r2,-36(fp)
    6e98:	10800044 	addi	r2,r2,1
    6e9c:	e0bff715 	stw	r2,-36(fp)
    6ea0:	003fe206 	br	6e2c <__alt_data_end+0xfc006e2c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6ea4:	e0bffd03 	ldbu	r2,-12(fp)
    6ea8:	1085883a 	add	r2,r2,r2
    6eac:	1007883a 	mov	r3,r2
    6eb0:	e0bffe17 	ldw	r2,-8(fp)
    6eb4:	10c5883a 	add	r2,r2,r3
    6eb8:	8037883a 	mov	sp,r16
}
    6ebc:	e6ffff04 	addi	sp,fp,-4
    6ec0:	dfc00217 	ldw	ra,8(sp)
    6ec4:	df000117 	ldw	fp,4(sp)
    6ec8:	dc000017 	ldw	r16,0(sp)
    6ecc:	dec00304 	addi	sp,sp,12
    6ed0:	f800283a 	ret

00006ed4 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6ed4:	defffd04 	addi	sp,sp,-12
    6ed8:	dfc00215 	stw	ra,8(sp)
    6edc:	df000115 	stw	fp,4(sp)
    6ee0:	df000104 	addi	fp,sp,4
    6ee4:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6ee8:	01400284 	movi	r5,10
    6eec:	e13fff17 	ldw	r4,-4(fp)
    6ef0:	00216f40 	call	216f4 <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6ef4:	01902f04 	movi	r6,16572
    6ef8:	01400c04 	movi	r5,48
    6efc:	e13fff17 	ldw	r4,-4(fp)
    6f00:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6f04:	01801384 	movi	r6,78
    6f08:	01400a04 	movi	r5,40
    6f0c:	e13fff17 	ldw	r4,-4(fp)
    6f10:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6f14:	01800844 	movi	r6,33
    6f18:	01400084 	movi	r5,2
    6f1c:	e13fff17 	ldw	r4,-4(fp)
    6f20:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6f24:	01800104 	movi	r6,4
    6f28:	01400104 	movi	r5,4
    6f2c:	e13fff17 	ldw	r4,-4(fp)
    6f30:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_32);
    6f34:	000d883a 	mov	r6,zero
    6f38:	01400184 	movi	r5,6
    6f3c:	e13fff17 	ldw	r4,-4(fp)
    6f40:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6f44:	01800404 	movi	r6,16
    6f48:	01400284 	movi	r5,10
    6f4c:	e13fff17 	ldw	r4,-4(fp)
    6f50:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6f54:	0001883a 	nop
    6f58:	e037883a 	mov	sp,fp
    6f5c:	dfc00117 	ldw	ra,4(sp)
    6f60:	df000017 	ldw	fp,0(sp)
    6f64:	dec00204 	addi	sp,sp,8
    6f68:	f800283a 	ret

00006f6c <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6f6c:	defffd04 	addi	sp,sp,-12
    6f70:	dfc00215 	stw	ra,8(sp)
    6f74:	df000115 	stw	fp,4(sp)
    6f78:	df000104 	addi	fp,sp,4
    6f7c:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6f80:	01860604 	movi	r6,6168
    6f84:	01400884 	movi	r5,34
    6f88:	e13fff17 	ldw	r4,-4(fp)
    6f8c:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6f90:	018f0f04 	movi	r6,15420
    6f94:	01400404 	movi	r5,16
    6f98:	e13fff17 	ldw	r4,-4(fp)
    6f9c:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6fa0:	01808004 	movi	r6,512
    6fa4:	01400384 	movi	r5,14
    6fa8:	e13fff17 	ldw	r4,-4(fp)
    6fac:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			EN_ZCD_HP |
			!MUTE_HP |
			MUTE_ADC);
    6fb0:	01804844 	movi	r6,289
    6fb4:	01400904 	movi	r5,36
    6fb8:	e13fff17 	ldw	r4,-4(fp)
    6fbc:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6fc0:	0001883a 	nop
    6fc4:	e037883a 	mov	sp,fp
    6fc8:	dfc00117 	ldw	ra,4(sp)
    6fcc:	df000017 	ldw	fp,0(sp)
    6fd0:	dec00204 	addi	sp,sp,8
    6fd4:	f800283a 	ret

00006fd8 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    6fd8:	defffd04 	addi	sp,sp,-12
    6fdc:	dfc00215 	stw	ra,8(sp)
    6fe0:	df000115 	stw	fp,4(sp)
    6fe4:	df000104 	addi	fp,sp,4
    6fe8:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    6fec:	000b883a 	mov	r5,zero
    6ff0:	e13fff17 	ldw	r4,-4(fp)
    6ff4:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6ff8:	10bfffcc 	andi	r2,r2,65535
    6ffc:	100b883a 	mov	r5,r2
    7000:	010000b4 	movhi	r4,2
    7004:	211bd204 	addi	r4,r4,28488
    7008:	000fef80 	call	fef8 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    700c:	01400084 	movi	r5,2
    7010:	e13fff17 	ldw	r4,-4(fp)
    7014:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7018:	10bfffcc 	andi	r2,r2,65535
    701c:	100b883a 	mov	r5,r2
    7020:	010000b4 	movhi	r4,2
    7024:	211bd504 	addi	r4,r4,28500
    7028:	000fef80 	call	fef8 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    702c:	01400104 	movi	r5,4
    7030:	e13fff17 	ldw	r4,-4(fp)
    7034:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7038:	10bfffcc 	andi	r2,r2,65535
    703c:	100b883a 	mov	r5,r2
    7040:	010000b4 	movhi	r4,2
    7044:	211bda04 	addi	r4,r4,28520
    7048:	000fef80 	call	fef8 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    704c:	01400184 	movi	r5,6
    7050:	e13fff17 	ldw	r4,-4(fp)
    7054:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7058:	10bfffcc 	andi	r2,r2,65535
    705c:	100b883a 	mov	r5,r2
    7060:	010000b4 	movhi	r4,2
    7064:	211bdf04 	addi	r4,r4,28540
    7068:	000fef80 	call	fef8 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    706c:	01400284 	movi	r5,10
    7070:	e13fff17 	ldw	r4,-4(fp)
    7074:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7078:	10bfffcc 	andi	r2,r2,65535
    707c:	100b883a 	mov	r5,r2
    7080:	010000b4 	movhi	r4,2
    7084:	211be404 	addi	r4,r4,28560
    7088:	000fef80 	call	fef8 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    708c:	01400c04 	movi	r5,48
    7090:	e13fff17 	ldw	r4,-4(fp)
    7094:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7098:	10bfffcc 	andi	r2,r2,65535
    709c:	100b883a 	mov	r5,r2
    70a0:	010000b4 	movhi	r4,2
    70a4:	211be904 	addi	r4,r4,28580
    70a8:	000fef80 	call	fef8 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    70ac:	01400384 	movi	r5,14
    70b0:	e13fff17 	ldw	r4,-4(fp)
    70b4:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70b8:	10bfffcc 	andi	r2,r2,65535
    70bc:	100b883a 	mov	r5,r2
    70c0:	010000b4 	movhi	r4,2
    70c4:	211bee04 	addi	r4,r4,28600
    70c8:	000fef80 	call	fef8 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    70cc:	01400904 	movi	r5,36
    70d0:	e13fff17 	ldw	r4,-4(fp)
    70d4:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70d8:	10bfffcc 	andi	r2,r2,65535
    70dc:	100b883a 	mov	r5,r2
    70e0:	010000b4 	movhi	r4,2
    70e4:	211bf304 	addi	r4,r4,28620
    70e8:	000fef80 	call	fef8 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    70ec:	01400e04 	movi	r5,56
    70f0:	e13fff17 	ldw	r4,-4(fp)
    70f4:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70f8:	10bfffcc 	andi	r2,r2,65535
    70fc:	100b883a 	mov	r5,r2
    7100:	010000b4 	movhi	r4,2
    7104:	211bf804 	addi	r4,r4,28640
    7108:	000fef80 	call	fef8 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    710c:	01400804 	movi	r5,32
    7110:	e13fff17 	ldw	r4,-4(fp)
    7114:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7118:	10bfffcc 	andi	r2,r2,65535
    711c:	100b883a 	mov	r5,r2
    7120:	010000b4 	movhi	r4,2
    7124:	211bfd04 	addi	r4,r4,28660
    7128:	000fef80 	call	fef8 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    712c:	01400404 	movi	r5,16
    7130:	e13fff17 	ldw	r4,-4(fp)
    7134:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7138:	10bfffcc 	andi	r2,r2,65535
    713c:	100b883a 	mov	r5,r2
    7140:	010000b4 	movhi	r4,2
    7144:	211c0204 	addi	r4,r4,28680
    7148:	000fef80 	call	fef8 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    714c:	01400884 	movi	r5,34
    7150:	e13fff17 	ldw	r4,-4(fp)
    7154:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7158:	10bfffcc 	andi	r2,r2,65535
    715c:	100b883a 	mov	r5,r2
    7160:	010000b4 	movhi	r4,2
    7164:	211c0704 	addi	r4,r4,28700
    7168:	000fef80 	call	fef8 <printf>
}
    716c:	0001883a 	nop
    7170:	e037883a 	mov	sp,fp
    7174:	dfc00117 	ldw	ra,4(sp)
    7178:	df000017 	ldw	fp,0(sp)
    717c:	dec00204 	addi	sp,sp,8
    7180:	f800283a 	ret

00007184 <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>:

void SGTL5000vol_change(ALT_AVALON_I2C_DEV_t* dev, alt_u8 vol) {
    7184:	defffa04 	addi	sp,sp,-24
    7188:	dfc00515 	stw	ra,20(sp)
    718c:	df000415 	stw	fp,16(sp)
    7190:	df000404 	addi	fp,sp,16
    7194:	e13ffe15 	stw	r4,-8(fp)
    7198:	2805883a 	mov	r2,r5
    719c:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 new_vol = HP_MIN_VOL - vol;
    71a0:	e0bfff03 	ldbu	r2,-4(fp)
    71a4:	00c01fc4 	movi	r3,127
    71a8:	1885c83a 	sub	r2,r3,r2
    71ac:	e0bffc15 	stw	r2,-16(fp)
	alt_u16 set_vol = ((new_vol << 8) | new_vol);
    71b0:	e0bffc17 	ldw	r2,-16(fp)
    71b4:	1004923a 	slli	r2,r2,8
    71b8:	1007883a 	mov	r3,r2
    71bc:	e0bffc17 	ldw	r2,-16(fp)
    71c0:	1884b03a 	or	r2,r3,r2
    71c4:	e0bffd0d 	sth	r2,-12(fp)
	I2Creg_wr(dev, ANA_HP_CTRL, set_vol);
    71c8:	e0bffd0b 	ldhu	r2,-12(fp)
    71cc:	100d883a 	mov	r6,r2
    71d0:	01400884 	movi	r5,34
    71d4:	e13ffe17 	ldw	r4,-8(fp)
    71d8:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    71dc:	0001883a 	nop
    71e0:	e037883a 	mov	sp,fp
    71e4:	dfc00117 	ldw	ra,4(sp)
    71e8:	df000017 	ldw	fp,0(sp)
    71ec:	dec00204 	addi	sp,sp,8
    71f0:	f800283a 	ret

000071f4 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    71f4:	defffb04 	addi	sp,sp,-20
    71f8:	dfc00415 	stw	ra,16(sp)
    71fc:	df000315 	stw	fp,12(sp)
    7200:	df000304 	addi	fp,sp,12
    7204:	e13ffe15 	stw	r4,-8(fp)
    7208:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    720c:	e0bffe17 	ldw	r2,-8(fp)
    7210:	1009883a 	mov	r4,r2
    7214:	0004e880 	call	4e88 <_ZN15USBDeviceConfigC1Ev>
    7218:	e0bffe17 	ldw	r2,-8(fp)
    721c:	10800104 	addi	r2,r2,4
    7220:	1009883a 	mov	r4,r2
    7224:	00090fc0 	call	90fc <_ZN21UsbMidiConfigXtracterC1Ev>
    7228:	008000b4 	movhi	r2,2
    722c:	109c1604 	addi	r2,r2,28760
    7230:	e0fffe17 	ldw	r3,-8(fp)
    7234:	18800015 	stw	r2,0(r3)
    7238:	008000b4 	movhi	r2,2
    723c:	109c2204 	addi	r2,r2,28808
    7240:	e0fffe17 	ldw	r3,-8(fp)
    7244:	18800115 	stw	r2,4(r3)
    7248:	e0bffe17 	ldw	r2,-8(fp)
    724c:	e0ffff17 	ldw	r3,-4(fp)
    7250:	10c00215 	stw	r3,8(r2)
    7254:	e0bffe17 	ldw	r2,-8(fp)
    7258:	10000305 	stb	zero,12(r2)
    725c:	e0bffe17 	ldw	r2,-8(fp)
    7260:	10000345 	stb	zero,13(r2)
    7264:	e0bffe17 	ldw	r2,-8(fp)
    7268:	10001705 	stb	zero,92(r2)
    726c:	e0bffe17 	ldw	r2,-8(fp)
    7270:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    7274:	e03ffd05 	stb	zero,-12(fp)
    7278:	e0bffd03 	ldbu	r2,-12(fp)
    727c:	108000e8 	cmpgeui	r2,r2,3
    7280:	10002d1e 	bne	r2,zero,7338 <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    7284:	e0fffd03 	ldbu	r3,-12(fp)
    7288:	e13ffe17 	ldw	r4,-8(fp)
    728c:	1805883a 	mov	r2,r3
    7290:	1085883a 	add	r2,r2,r2
    7294:	10c5883a 	add	r2,r2,r3
    7298:	2085883a 	add	r2,r4,r2
    729c:	108004c4 	addi	r2,r2,19
    72a0:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    72a4:	e13ffd03 	ldbu	r4,-12(fp)
    72a8:	e0bffd03 	ldbu	r2,-12(fp)
    72ac:	10000226 	beq	r2,zero,72b8 <_ZN9USBH_MIDIC1EP3USB+0xc4>
    72b0:	0007883a 	mov	r3,zero
    72b4:	00000106 	br	72bc <_ZN9USBH_MIDIC1EP3USB+0xc8>
    72b8:	00c00204 	movi	r3,8
    72bc:	e17ffe17 	ldw	r5,-8(fp)
    72c0:	2005883a 	mov	r2,r4
    72c4:	1085883a 	add	r2,r2,r2
    72c8:	1105883a 	add	r2,r2,r4
    72cc:	2885883a 	add	r2,r5,r2
    72d0:	10800504 	addi	r2,r2,20
    72d4:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    72d8:	e13ffd03 	ldbu	r4,-12(fp)
    72dc:	e0bffd03 	ldbu	r2,-12(fp)
    72e0:	10000226 	beq	r2,zero,72ec <_ZN9USBH_MIDIC1EP3USB+0xf8>
    72e4:	00c00044 	movi	r3,1
    72e8:	00000106 	br	72f0 <_ZN9USBH_MIDIC1EP3USB+0xfc>
    72ec:	00c003c4 	movi	r3,15
    72f0:	e17ffe17 	ldw	r5,-8(fp)
    72f4:	2005883a 	mov	r2,r4
    72f8:	1085883a 	add	r2,r2,r2
    72fc:	1105883a 	add	r2,r2,r4
    7300:	2885883a 	add	r2,r5,r2
    7304:	10800404 	addi	r2,r2,16
    7308:	18c7883a 	add	r3,r3,r3
    730c:	18cb883a 	add	r5,r3,r3
    7310:	10c00143 	ldbu	r3,5(r2)
    7314:	18c000cc 	andi	r3,r3,3
    7318:	1809883a 	mov	r4,r3
    731c:	2807883a 	mov	r3,r5
    7320:	20c6b03a 	or	r3,r4,r3
    7324:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    7328:	e0bffd03 	ldbu	r2,-12(fp)
    732c:	10800044 	addi	r2,r2,1
    7330:	e0bffd05 	stb	r2,-12(fp)
    7334:	003fd006 	br	7278 <__alt_data_end+0xfc007278>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    7338:	e0bffe17 	ldw	r2,-8(fp)
    733c:	10800217 	ldw	r2,8(r2)
    7340:	10000626 	beq	r2,zero,735c <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    7344:	e0bffe17 	ldw	r2,-8(fp)
    7348:	10800217 	ldw	r2,8(r2)
    734c:	e0fffe17 	ldw	r3,-8(fp)
    7350:	180b883a 	mov	r5,r3
    7354:	1009883a 	mov	r4,r2
    7358:	0004c3c0 	call	4c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    735c:	0001883a 	nop
    7360:	e037883a 	mov	sp,fp
    7364:	dfc00117 	ldw	ra,4(sp)
    7368:	df000017 	ldw	fp,0(sp)
    736c:	dec00204 	addi	sp,sp,8
    7370:	f800283a 	ret

00007374 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    7374:	deffe004 	addi	sp,sp,-128
    7378:	dfc01f15 	stw	ra,124(sp)
    737c:	df001e15 	stw	fp,120(sp)
    7380:	df001e04 	addi	fp,sp,120
    7384:	e13ffc15 	stw	r4,-16(fp)
    7388:	2809883a 	mov	r4,r5
    738c:	3007883a 	mov	r3,r6
    7390:	3805883a 	mov	r2,r7
    7394:	e13ffd05 	stb	r4,-12(fp)
    7398:	e0fffe05 	stb	r3,-8(fp)
    739c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    73a0:	e0bfe944 	addi	r2,fp,-91
    73a4:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    73a8:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    73ac:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    73b0:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    73b4:	00800044 	movi	r2,1
    73b8:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    73bc:	00800044 	movi	r2,1
    73c0:	e0bfe3c5 	stb	r2,-113(fp)
    73c4:	e0bfe3c3 	ldbu	r2,-113(fp)
    73c8:	108000e8 	cmpgeui	r2,r2,3
    73cc:	10001a1e 	bne	r2,zero,7438 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    73d0:	e0ffe3c3 	ldbu	r3,-113(fp)
    73d4:	e13ffc17 	ldw	r4,-16(fp)
    73d8:	1805883a 	mov	r2,r3
    73dc:	1085883a 	add	r2,r2,r2
    73e0:	10c5883a 	add	r2,r2,r3
    73e4:	2085883a 	add	r2,r4,r2
    73e8:	10800404 	addi	r2,r2,16
    73ec:	11000143 	ldbu	r4,5(r2)
    73f0:	00ffff84 	movi	r3,-2
    73f4:	20c6703a 	and	r3,r4,r3
    73f8:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    73fc:	e0ffe3c3 	ldbu	r3,-113(fp)
    7400:	e13ffc17 	ldw	r4,-16(fp)
    7404:	1805883a 	mov	r2,r3
    7408:	1085883a 	add	r2,r2,r2
    740c:	10c5883a 	add	r2,r2,r3
    7410:	2085883a 	add	r2,r4,r2
    7414:	10800404 	addi	r2,r2,16
    7418:	11000143 	ldbu	r4,5(r2)
    741c:	00ffff44 	movi	r3,-3
    7420:	20c6703a 	and	r3,r4,r3
    7424:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7428:	e0bfe3c3 	ldbu	r2,-113(fp)
    742c:	10800044 	addi	r2,r2,1
    7430:	e0bfe3c5 	stb	r2,-113(fp)
    7434:	003fe306 	br	73c4 <__alt_data_end+0xfc0073c4>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    7438:	e0bffc17 	ldw	r2,-16(fp)
    743c:	10800217 	ldw	r2,8(r2)
    7440:	1009883a 	mov	r4,r2
    7444:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    7448:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    744c:	e0bffc17 	ldw	r2,-16(fp)
    7450:	10800303 	ldbu	r2,12(r2)
    7454:	10803fcc 	andi	r2,r2,255
    7458:	10000226 	beq	r2,zero,7464 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    745c:	00bff644 	movi	r2,-39
    7460:	0001c706 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    7464:	e0bfe817 	ldw	r2,-96(fp)
    7468:	10800017 	ldw	r2,0(r2)
    746c:	10800017 	ldw	r2,0(r2)
    7470:	e0fffc17 	ldw	r3,-16(fp)
    7474:	18c00303 	ldbu	r3,12(r3)
    7478:	18c03fcc 	andi	r3,r3,255
    747c:	180b883a 	mov	r5,r3
    7480:	e13fe817 	ldw	r4,-96(fp)
    7484:	103ee83a 	callr	r2
    7488:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    748c:	e0bfe617 	ldw	r2,-104(fp)
    7490:	1000021e 	bne	r2,zero,749c <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7494:	00bff584 	movi	r2,-42
    7498:	0001b906 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    749c:	e0bfe617 	ldw	r2,-104(fp)
    74a0:	10c00003 	ldbu	r3,0(r2)
    74a4:	11000043 	ldbu	r4,1(r2)
    74a8:	2008923a 	slli	r4,r4,8
    74ac:	20c6b03a 	or	r3,r4,r3
    74b0:	11000083 	ldbu	r4,2(r2)
    74b4:	2008943a 	slli	r4,r4,16
    74b8:	20c6b03a 	or	r3,r4,r3
    74bc:	108000c3 	ldbu	r2,3(r2)
    74c0:	1004963a 	slli	r2,r2,24
    74c4:	10c4b03a 	or	r2,r2,r3
    74c8:	1000021e 	bne	r2,zero,74d4 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    74cc:	00bff5c4 	movi	r2,-41
    74d0:	0001ab06 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    74d4:	e0bfe617 	ldw	r2,-104(fp)
    74d8:	10c00003 	ldbu	r3,0(r2)
    74dc:	11000043 	ldbu	r4,1(r2)
    74e0:	2008923a 	slli	r4,r4,8
    74e4:	20c6b03a 	or	r3,r4,r3
    74e8:	11000083 	ldbu	r4,2(r2)
    74ec:	2008943a 	slli	r4,r4,16
    74f0:	20c6b03a 	or	r3,r4,r3
    74f4:	108000c3 	ldbu	r2,3(r2)
    74f8:	1004963a 	slli	r2,r2,24
    74fc:	10c4b03a 	or	r2,r2,r3
    7500:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    7504:	e0bffc17 	ldw	r2,-16(fp)
    7508:	10c004c4 	addi	r3,r2,19
    750c:	e0bfe617 	ldw	r2,-104(fp)
    7510:	19803fcc 	andi	r6,r3,255
    7514:	11000003 	ldbu	r4,0(r2)
    7518:	2008703a 	and	r4,r4,zero
    751c:	200b883a 	mov	r5,r4
    7520:	3009883a 	mov	r4,r6
    7524:	2908b03a 	or	r4,r5,r4
    7528:	11000005 	stb	r4,0(r2)
    752c:	1808d23a 	srli	r4,r3,8
    7530:	21803fcc 	andi	r6,r4,255
    7534:	11000043 	ldbu	r4,1(r2)
    7538:	2008703a 	and	r4,r4,zero
    753c:	200b883a 	mov	r5,r4
    7540:	3009883a 	mov	r4,r6
    7544:	2908b03a 	or	r4,r5,r4
    7548:	11000045 	stb	r4,1(r2)
    754c:	1808d43a 	srli	r4,r3,16
    7550:	21803fcc 	andi	r6,r4,255
    7554:	11000083 	ldbu	r4,2(r2)
    7558:	2008703a 	and	r4,r4,zero
    755c:	200b883a 	mov	r5,r4
    7560:	3009883a 	mov	r4,r6
    7564:	2908b03a 	or	r4,r5,r4
    7568:	11000085 	stb	r4,2(r2)
    756c:	180ad63a 	srli	r5,r3,24
    7570:	10c000c3 	ldbu	r3,3(r2)
    7574:	1806703a 	and	r3,r3,zero
    7578:	1809883a 	mov	r4,r3
    757c:	2807883a 	mov	r3,r5
    7580:	20c6b03a 	or	r3,r4,r3
    7584:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    7588:	e0bfe617 	ldw	r2,-104(fp)
    758c:	e0ffff03 	ldbu	r3,-4(fp)
    7590:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    7594:	e0bffc17 	ldw	r2,-16(fp)
    7598:	10c00217 	ldw	r3,8(r2)
    759c:	e0bfe944 	addi	r2,fp,-91
    75a0:	d8800015 	stw	r2,0(sp)
    75a4:	01c00204 	movi	r7,8
    75a8:	000d883a 	mov	r6,zero
    75ac:	000b883a 	mov	r5,zero
    75b0:	1809883a 	mov	r4,r3
    75b4:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    75b8:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    75bc:	e0bfe617 	ldw	r2,-104(fp)
    75c0:	e0ffe717 	ldw	r3,-100(fp)
    75c4:	19403fcc 	andi	r5,r3,255
    75c8:	10c00003 	ldbu	r3,0(r2)
    75cc:	1806703a 	and	r3,r3,zero
    75d0:	1809883a 	mov	r4,r3
    75d4:	2807883a 	mov	r3,r5
    75d8:	20c6b03a 	or	r3,r4,r3
    75dc:	10c00005 	stb	r3,0(r2)
    75e0:	e0ffe717 	ldw	r3,-100(fp)
    75e4:	1806d23a 	srli	r3,r3,8
    75e8:	19403fcc 	andi	r5,r3,255
    75ec:	10c00043 	ldbu	r3,1(r2)
    75f0:	1806703a 	and	r3,r3,zero
    75f4:	1809883a 	mov	r4,r3
    75f8:	2807883a 	mov	r3,r5
    75fc:	20c6b03a 	or	r3,r4,r3
    7600:	10c00045 	stb	r3,1(r2)
    7604:	e0ffe717 	ldw	r3,-100(fp)
    7608:	1806d43a 	srli	r3,r3,16
    760c:	19403fcc 	andi	r5,r3,255
    7610:	10c00083 	ldbu	r3,2(r2)
    7614:	1806703a 	and	r3,r3,zero
    7618:	1809883a 	mov	r4,r3
    761c:	2807883a 	mov	r3,r5
    7620:	20c6b03a 	or	r3,r4,r3
    7624:	10c00085 	stb	r3,2(r2)
    7628:	e0ffe717 	ldw	r3,-100(fp)
    762c:	180ad63a 	srli	r5,r3,24
    7630:	10c000c3 	ldbu	r3,3(r2)
    7634:	1806703a 	and	r3,r3,zero
    7638:	1809883a 	mov	r4,r3
    763c:	2807883a 	mov	r3,r5
    7640:	20c6b03a 	or	r3,r4,r3
    7644:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    7648:	e0bfe303 	ldbu	r2,-116(fp)
    764c:	10013a1e 	bne	r2,zero,7b38 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    7650:	e0bfe817 	ldw	r2,-96(fp)
    7654:	10800017 	ldw	r2,0(r2)
    7658:	10800104 	addi	r2,r2,4
    765c:	10800017 	ldw	r2,0(r2)
    7660:	e0fffd03 	ldbu	r3,-12(fp)
    7664:	e13ffe03 	ldbu	r4,-8(fp)
    7668:	200f883a 	mov	r7,r4
    766c:	000d883a 	mov	r6,zero
    7670:	180b883a 	mov	r5,r3
    7674:	e13fe817 	ldw	r4,-96(fp)
    7678:	103ee83a 	callr	r2
    767c:	1007883a 	mov	r3,r2
    7680:	e0bffc17 	ldw	r2,-16(fp)
    7684:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    7688:	e0bffc17 	ldw	r2,-16(fp)
    768c:	10800303 	ldbu	r2,12(r2)
    7690:	10803fcc 	andi	r2,r2,255
    7694:	1000021e 	bne	r2,zero,76a0 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    7698:	00bff504 	movi	r2,-44
    769c:	00013806 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    76a0:	e0bfe517 	ldw	r2,-108(fp)
    76a4:	10c001c3 	ldbu	r3,7(r2)
    76a8:	e0bffc17 	ldw	r2,-16(fp)
    76ac:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    76b0:	e0bffc17 	ldw	r2,-16(fp)
    76b4:	10c00217 	ldw	r3,8(r2)
    76b8:	e0bffc17 	ldw	r2,-16(fp)
    76bc:	10800303 	ldbu	r2,12(r2)
    76c0:	10803fcc 	andi	r2,r2,255
    76c4:	100f883a 	mov	r7,r2
    76c8:	000d883a 	mov	r6,zero
    76cc:	000b883a 	mov	r5,zero
    76d0:	1809883a 	mov	r4,r3
    76d4:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    76d8:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    76dc:	e0bfe303 	ldbu	r2,-116(fp)
    76e0:	10001026 	beq	r2,zero,7724 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    76e4:	e0bfe617 	ldw	r2,-104(fp)
    76e8:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    76ec:	e0bfe817 	ldw	r2,-96(fp)
    76f0:	10800017 	ldw	r2,0(r2)
    76f4:	10800204 	addi	r2,r2,8
    76f8:	10800017 	ldw	r2,0(r2)
    76fc:	e0fffc17 	ldw	r3,-16(fp)
    7700:	18c00303 	ldbu	r3,12(r3)
    7704:	18c03fcc 	andi	r3,r3,255
    7708:	180b883a 	mov	r5,r3
    770c:	e13fe817 	ldw	r4,-96(fp)
    7710:	103ee83a 	callr	r2
                bAddress = 0;
    7714:	e0bffc17 	ldw	r2,-16(fp)
    7718:	10000305 	stb	zero,12(r2)
                return rcode;
    771c:	e0bfe303 	ldbu	r2,-116(fp)
    7720:	00011706 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    7724:	e0bffc17 	ldw	r2,-16(fp)
    7728:	10800303 	ldbu	r2,12(r2)
    772c:	10803fcc 	andi	r2,r2,255
    7730:	01402004 	movi	r5,128
    7734:	1009883a 	mov	r4,r2
    7738:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    773c:	e0bfe617 	ldw	r2,-104(fp)
    7740:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    7744:	e0bfe817 	ldw	r2,-96(fp)
    7748:	10800017 	ldw	r2,0(r2)
    774c:	10800017 	ldw	r2,0(r2)
    7750:	e0fffc17 	ldw	r3,-16(fp)
    7754:	18c00303 	ldbu	r3,12(r3)
    7758:	18c03fcc 	andi	r3,r3,255
    775c:	180b883a 	mov	r5,r3
    7760:	e13fe817 	ldw	r4,-96(fp)
    7764:	103ee83a 	callr	r2
    7768:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    776c:	e0bfe617 	ldw	r2,-104(fp)
    7770:	1000021e 	bne	r2,zero,777c <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7774:	00bff584 	movi	r2,-42
    7778:	00010106 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    777c:	e0bfe617 	ldw	r2,-104(fp)
    7780:	e0ffff03 	ldbu	r3,-4(fp)
    7784:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    7788:	e0bffc17 	ldw	r2,-16(fp)
    778c:	10c00217 	ldw	r3,8(r2)
    7790:	e0bffc17 	ldw	r2,-16(fp)
    7794:	10800303 	ldbu	r2,12(r2)
    7798:	11003fcc 	andi	r4,r2,255
    779c:	00800484 	movi	r2,18
    77a0:	117fffcc 	andi	r5,r2,65535
    77a4:	e0bfe944 	addi	r2,fp,-91
    77a8:	d8800015 	stw	r2,0(sp)
    77ac:	280f883a 	mov	r7,r5
    77b0:	000d883a 	mov	r6,zero
    77b4:	200b883a 	mov	r5,r4
    77b8:	1809883a 	mov	r4,r3
    77bc:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    77c0:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    77c4:	e0bfe303 	ldbu	r2,-116(fp)
    77c8:	1000dd1e 	bne	r2,zero,7b40 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    77cc:	e0bfe517 	ldw	r2,-108(fp)
    77d0:	10c00203 	ldbu	r3,8(r2)
    77d4:	10800243 	ldbu	r2,9(r2)
    77d8:	1004923a 	slli	r2,r2,8
    77dc:	10c4b03a 	or	r2,r2,r3
    77e0:	1007883a 	mov	r3,r2
    77e4:	e0bffc17 	ldw	r2,-16(fp)
    77e8:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    77ec:	e0bfe517 	ldw	r2,-108(fp)
    77f0:	10c00283 	ldbu	r3,10(r2)
    77f4:	108002c3 	ldbu	r2,11(r2)
    77f8:	1004923a 	slli	r2,r2,8
    77fc:	10c4b03a 	or	r2,r2,r3
    7800:	1007883a 	mov	r3,r2
    7804:	e0bffc17 	ldw	r2,-16(fp)
    7808:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    780c:	e0bfe517 	ldw	r2,-108(fp)
    7810:	10800443 	ldbu	r2,17(r2)
    7814:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    7818:	e0bffc17 	ldw	r2,-16(fp)
    781c:	10c00217 	ldw	r3,8(r2)
    7820:	e0bffc17 	ldw	r2,-16(fp)
    7824:	10800303 	ldbu	r2,12(r2)
    7828:	11003fcc 	andi	r4,r2,255
    782c:	e0bffc17 	ldw	r2,-16(fp)
    7830:	108004c4 	addi	r2,r2,19
    7834:	100f883a 	mov	r7,r2
    7838:	01800044 	movi	r6,1
    783c:	200b883a 	mov	r5,r4
    7840:	1809883a 	mov	r4,r3
    7844:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7848:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    784c:	e0bfe303 	ldbu	r2,-116(fp)
    7850:	1000bd1e 	bne	r2,zero,7b48 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    7854:	e0bffc17 	ldw	r2,-16(fp)
    7858:	1080040b 	ldhu	r2,16(r2)
    785c:	10bfffcc 	andi	r2,r2,65535
    7860:	01402004 	movi	r5,128
    7864:	1009883a 	mov	r4,r2
    7868:	00091300 	call	9130 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    786c:	e0bffc17 	ldw	r2,-16(fp)
    7870:	1080038b 	ldhu	r2,14(r2)
    7874:	10bfffcc 	andi	r2,r2,65535
    7878:	01402004 	movi	r5,128
    787c:	1009883a 	mov	r4,r2
    7880:	00091300 	call	9130 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    7884:	e0bfe903 	ldbu	r2,-92(fp)
    7888:	01402004 	movi	r5,128
    788c:	1009883a 	mov	r4,r2
    7890:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    7894:	e0bffc17 	ldw	r2,-16(fp)
    7898:	00c000c4 	movi	r3,3
    789c:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    78a0:	e13ffc17 	ldw	r4,-16(fp)
    78a4:	0007c0c0 	call	7c0c <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    78a8:	e03fe405 	stb	zero,-112(fp)
    78ac:	e0ffe403 	ldbu	r3,-112(fp)
    78b0:	e0bfe903 	ldbu	r2,-92(fp)
    78b4:	18802a2e 	bgeu	r3,r2,7960 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    78b8:	e0bffc17 	ldw	r2,-16(fp)
    78bc:	10c00104 	addi	r3,r2,4
    78c0:	e0bfee04 	addi	r2,fp,-72
    78c4:	01800044 	movi	r6,1
    78c8:	180b883a 	mov	r5,r3
    78cc:	1009883a 	mov	r4,r2
    78d0:	000870c0 	call	870c <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    78d4:	e0bffc17 	ldw	r2,-16(fp)
    78d8:	10c00217 	ldw	r3,8(r2)
    78dc:	e0bffc17 	ldw	r2,-16(fp)
    78e0:	10800303 	ldbu	r2,12(r2)
    78e4:	11003fcc 	andi	r4,r2,255
    78e8:	e17fe403 	ldbu	r5,-112(fp)
    78ec:	e0bfee04 	addi	r2,fp,-72
    78f0:	d8800015 	stw	r2,0(sp)
    78f4:	280f883a 	mov	r7,r5
    78f8:	000d883a 	mov	r6,zero
    78fc:	200b883a 	mov	r5,r4
    7900:	1809883a 	mov	r4,r3
    7904:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7908:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    790c:	e0bfe303 	ldbu	r2,-116(fp)
    7910:	10008f1e 	bne	r2,zero,7b50 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    7914:	e0bfee04 	addi	r2,fp,-72
    7918:	1009883a 	mov	r4,r2
    791c:	00090180 	call	9018 <_ZN14MidiDescParser9getNumEPsEv>
    7920:	1007883a 	mov	r3,r2
    7924:	e0bfe383 	ldbu	r2,-114(fp)
    7928:	10c5883a 	add	r2,r2,r3
    792c:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    7930:	e0bfe383 	ldbu	r2,-114(fp)
    7934:	108000b0 	cmpltui	r2,r2,2
    7938:	1000051e 	bne	r2,zero,7950 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    793c:	e0bfee04 	addi	r2,fp,-72
    7940:	1009883a 	mov	r4,r2
    7944:	0008ff00 	call	8ff0 <_ZN14MidiDescParser12getConfValueEv>
    7948:	e0bfe345 	stb	r2,-115(fp)
    794c:	00000406 	br	7960 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    7950:	e0bfe403 	ldbu	r2,-112(fp)
    7954:	10800044 	addi	r2,r2,1
    7958:	e0bfe405 	stb	r2,-112(fp)
    795c:	003fd306 	br	78ac <__alt_data_end+0xfc0078ac>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    7960:	e0bfe383 	ldbu	r2,-114(fp)
    7964:	01402004 	movi	r5,128
    7968:	1009883a 	mov	r4,r2
    796c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    7970:	e0bfe383 	ldbu	r2,-114(fp)
    7974:	10800058 	cmpnei	r2,r2,1
    7978:	1000321e 	bne	r2,zero,7a44 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    797c:	e03fe445 	stb	zero,-111(fp)
    7980:	e0ffe443 	ldbu	r3,-111(fp)
    7984:	e0bfe903 	ldbu	r2,-92(fp)
    7988:	18802a2e 	bgeu	r3,r2,7a34 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    798c:	e0bffc17 	ldw	r2,-16(fp)
    7990:	10c00104 	addi	r3,r2,4
    7994:	e0bfee04 	addi	r2,fp,-72
    7998:	000d883a 	mov	r6,zero
    799c:	180b883a 	mov	r5,r3
    79a0:	1009883a 	mov	r4,r2
    79a4:	000870c0 	call	870c <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    79a8:	e0bffc17 	ldw	r2,-16(fp)
    79ac:	10c00217 	ldw	r3,8(r2)
    79b0:	e0bffc17 	ldw	r2,-16(fp)
    79b4:	10800303 	ldbu	r2,12(r2)
    79b8:	11003fcc 	andi	r4,r2,255
    79bc:	e17fe443 	ldbu	r5,-111(fp)
    79c0:	e0bfee04 	addi	r2,fp,-72
    79c4:	d8800015 	stw	r2,0(sp)
    79c8:	280f883a 	mov	r7,r5
    79cc:	000d883a 	mov	r6,zero
    79d0:	200b883a 	mov	r5,r4
    79d4:	1809883a 	mov	r4,r3
    79d8:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    79dc:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    79e0:	e0bfe303 	ldbu	r2,-116(fp)
    79e4:	10005c1e 	bne	r2,zero,7b58 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    79e8:	e0bfee04 	addi	r2,fp,-72
    79ec:	1009883a 	mov	r4,r2
    79f0:	00090180 	call	9018 <_ZN14MidiDescParser9getNumEPsEv>
    79f4:	1007883a 	mov	r3,r2
    79f8:	e0bfe383 	ldbu	r2,-114(fp)
    79fc:	10c5883a 	add	r2,r2,r3
    7a00:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    7a04:	e0bfe383 	ldbu	r2,-114(fp)
    7a08:	108000b0 	cmpltui	r2,r2,2
    7a0c:	1000051e 	bne	r2,zero,7a24 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    7a10:	e0bfee04 	addi	r2,fp,-72
    7a14:	1009883a 	mov	r4,r2
    7a18:	0008ff00 	call	8ff0 <_ZN14MidiDescParser12getConfValueEv>
    7a1c:	e0bfe345 	stb	r2,-115(fp)
    7a20:	00000406 	br	7a34 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7a24:	e0bfe443 	ldbu	r2,-111(fp)
    7a28:	10800044 	addi	r2,r2,1
    7a2c:	e0bfe445 	stb	r2,-111(fp)
    7a30:	003fd306 	br	7980 <__alt_data_end+0xfc007980>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    7a34:	e0bfe383 	ldbu	r2,-114(fp)
    7a38:	01402004 	movi	r5,128
    7a3c:	1009883a 	mov	r4,r2
    7a40:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    7a44:	e0bfe383 	ldbu	r2,-114(fp)
    7a48:	108000a8 	cmpgeui	r2,r2,2
    7a4c:	1000031e 	bne	r2,zero,7a5c <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    7a50:	00bfffc4 	movi	r2,-1
    7a54:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    7a58:	00004206 	br	7b64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    7a5c:	e0bffc17 	ldw	r2,-16(fp)
    7a60:	10c00217 	ldw	r3,8(r2)
    7a64:	e0bffc17 	ldw	r2,-16(fp)
    7a68:	10800303 	ldbu	r2,12(r2)
    7a6c:	11003fcc 	andi	r4,r2,255
    7a70:	e0bffc17 	ldw	r2,-16(fp)
    7a74:	108004c4 	addi	r2,r2,19
    7a78:	100f883a 	mov	r7,r2
    7a7c:	018000c4 	movi	r6,3
    7a80:	200b883a 	mov	r5,r4
    7a84:	1809883a 	mov	r4,r3
    7a88:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7a8c:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    7a90:	e0bfe343 	ldbu	r2,-115(fp)
    7a94:	01402004 	movi	r5,128
    7a98:	1009883a 	mov	r4,r2
    7a9c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    7aa0:	e0bffc17 	ldw	r2,-16(fp)
    7aa4:	10800583 	ldbu	r2,22(r2)
    7aa8:	10bfe004 	addi	r2,r2,-128
    7aac:	10803fcc 	andi	r2,r2,255
    7ab0:	01402004 	movi	r5,128
    7ab4:	1009883a 	mov	r4,r2
    7ab8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    7abc:	e0bffc17 	ldw	r2,-16(fp)
    7ac0:	10800643 	ldbu	r2,25(r2)
    7ac4:	10803fcc 	andi	r2,r2,255
    7ac8:	01402004 	movi	r5,128
    7acc:	1009883a 	mov	r4,r2
    7ad0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    7ad4:	e0bffc17 	ldw	r2,-16(fp)
    7ad8:	10c00217 	ldw	r3,8(r2)
    7adc:	e0bffc17 	ldw	r2,-16(fp)
    7ae0:	10800303 	ldbu	r2,12(r2)
    7ae4:	10803fcc 	andi	r2,r2,255
    7ae8:	e13fe343 	ldbu	r4,-115(fp)
    7aec:	200f883a 	mov	r7,r4
    7af0:	000d883a 	mov	r6,zero
    7af4:	100b883a 	mov	r5,r2
    7af8:	1809883a 	mov	r4,r3
    7afc:	0002b940 	call	2b94 <_ZN3USB7setConfEhhh>
    7b00:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    7b04:	e0bfe303 	ldbu	r2,-116(fp)
    7b08:	1000151e 	bne	r2,zero,7b60 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    7b0c:	e0bffc17 	ldw	r2,-16(fp)
    7b10:	10801817 	ldw	r2,96(r2)
    7b14:	10000326 	beq	r2,zero,7b24 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    7b18:	e0bffc17 	ldw	r2,-16(fp)
    7b1c:	10801817 	ldw	r2,96(r2)
    7b20:	103ee83a 	callr	r2

        bPollEnable = true;
    7b24:	e0bffc17 	ldw	r2,-16(fp)
    7b28:	00c00044 	movi	r3,1
    7b2c:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    7b30:	0005883a 	mov	r2,zero
    7b34:	00001206 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    7b38:	0001883a 	nop
    7b3c:	00000906 	br	7b64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    7b40:	0001883a 	nop
    7b44:	00000706 	br	7b64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    7b48:	0001883a 	nop
    7b4c:	00000506 	br	7b64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    7b50:	0001883a 	nop
    7b54:	00000306 	br	7b64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    7b58:	0001883a 	nop
    7b5c:	00000106 	br	7b64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    7b60:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    7b64:	e0bffc17 	ldw	r2,-16(fp)
    7b68:	10800017 	ldw	r2,0(r2)
    7b6c:	10800204 	addi	r2,r2,8
    7b70:	10800017 	ldw	r2,0(r2)
    7b74:	e13ffc17 	ldw	r4,-16(fp)
    7b78:	103ee83a 	callr	r2
        return rcode;
    7b7c:	e0bfe303 	ldbu	r2,-116(fp)
}
    7b80:	e037883a 	mov	sp,fp
    7b84:	dfc00117 	ldw	ra,4(sp)
    7b88:	df000017 	ldw	fp,0(sp)
    7b8c:	dec00204 	addi	sp,sp,8
    7b90:	f800283a 	ret

00007b94 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    7b94:	defffd04 	addi	sp,sp,-12
    7b98:	dfc00215 	stw	ra,8(sp)
    7b9c:	df000115 	stw	fp,4(sp)
    7ba0:	df000104 	addi	fp,sp,4
    7ba4:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    7ba8:	e0bfff17 	ldw	r2,-4(fp)
    7bac:	10800217 	ldw	r2,8(r2)
    7bb0:	1009883a 	mov	r4,r2
    7bb4:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    7bb8:	1009883a 	mov	r4,r2
    7bbc:	20800017 	ldw	r2,0(r4)
    7bc0:	10800204 	addi	r2,r2,8
    7bc4:	10800017 	ldw	r2,0(r2)
    7bc8:	e0ffff17 	ldw	r3,-4(fp)
    7bcc:	18c00303 	ldbu	r3,12(r3)
    7bd0:	18c03fcc 	andi	r3,r3,255
    7bd4:	180b883a 	mov	r5,r3
    7bd8:	103ee83a 	callr	r2
        bAddress     = 0;
    7bdc:	e0bfff17 	ldw	r2,-4(fp)
    7be0:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    7be4:	e0bfff17 	ldw	r2,-4(fp)
    7be8:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    7bec:	e0bfff17 	ldw	r2,-4(fp)
    7bf0:	10001705 	stb	zero,92(r2)
        return 0;
    7bf4:	0005883a 	mov	r2,zero
}
    7bf8:	e037883a 	mov	sp,fp
    7bfc:	dfc00117 	ldw	ra,4(sp)
    7c00:	df000017 	ldw	fp,0(sp)
    7c04:	dec00204 	addi	sp,sp,8
    7c08:	f800283a 	ret

00007c0c <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    7c0c:	defffe04 	addi	sp,sp,-8
    7c10:	df000115 	stw	fp,4(sp)
    7c14:	df000104 	addi	fp,sp,4
    7c18:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    7c1c:	e0bfff17 	ldw	r2,-4(fp)
    7c20:	1080040b 	ldhu	r2,16(r2)
    7c24:	10bfffcc 	andi	r2,r2,65535
    7c28:	10848d58 	cmpnei	r2,r2,4661
    7c2c:	1000351e 	bne	r2,zero,7d04 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    7c30:	e0bfff17 	ldw	r2,-4(fp)
    7c34:	1080038b 	ldhu	r2,14(r2)
    7c38:	10bfffcc 	andi	r2,r2,65535
    7c3c:	10800820 	cmpeqi	r2,r2,32
    7c40:	10000f1e 	bne	r2,zero,7c80 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7c44:	e0bfff17 	ldw	r2,-4(fp)
    7c48:	1080038b 	ldhu	r2,14(r2)
    7c4c:	10bfffcc 	andi	r2,r2,65535
    7c50:	10800da0 	cmpeqi	r2,r2,54
    7c54:	10000a1e 	bne	r2,zero,7c80 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7c58:	e0bfff17 	ldw	r2,-4(fp)
    7c5c:	1080038b 	ldhu	r2,14(r2)
    7c60:	10bfffcc 	andi	r2,r2,65535
    7c64:	10801460 	cmpeqi	r2,r2,81
    7c68:	1000051e 	bne	r2,zero,7c80 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7c6c:	e0bfff17 	ldw	r2,-4(fp)
    7c70:	1080038b 	ldhu	r2,14(r2)
    7c74:	10bfffcc 	andi	r2,r2,65535
    7c78:	10801a58 	cmpnei	r2,r2,105
    7c7c:	1000041e 	bne	r2,zero,7c90 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    7c80:	e0bfff17 	ldw	r2,-4(fp)
    7c84:	00c00084 	movi	r3,2
    7c88:	10c00485 	stb	r3,18(r2)
                        return;
    7c8c:	00001d06 	br	7d04 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    7c90:	e0bfff17 	ldw	r2,-4(fp)
    7c94:	1080038b 	ldhu	r2,14(r2)
    7c98:	10bfffcc 	andi	r2,r2,65535
    7c9c:	10800c30 	cmpltui	r2,r2,48
    7ca0:	1000051e 	bne	r2,zero,7cb8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    7ca4:	e0bfff17 	ldw	r2,-4(fp)
    7ca8:	1080038b 	ldhu	r2,14(r2)
    7cac:	10bfffcc 	andi	r2,r2,65535
    7cb0:	10800cf0 	cmpltui	r2,r2,51
    7cb4:	10000f1e 	bne	r2,zero,7cf4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7cb8:	e0bfff17 	ldw	r2,-4(fp)
    7cbc:	1080038b 	ldhu	r2,14(r2)
    7cc0:	10bfffcc 	andi	r2,r2,65535
    7cc4:	10800d60 	cmpeqi	r2,r2,53
    7cc8:	10000a1e 	bne	r2,zero,7cf4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7ccc:	e0bfff17 	ldw	r2,-4(fp)
    7cd0:	1080038b 	ldhu	r2,14(r2)
    7cd4:	10bfffcc 	andi	r2,r2,65535
    7cd8:	10801ef0 	cmpltui	r2,r2,123
    7cdc:	1000091e 	bne	r2,zero,7d04 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    7ce0:	e0bfff17 	ldw	r2,-4(fp)
    7ce4:	1080038b 	ldhu	r2,14(r2)
    7ce8:	10bfffcc 	andi	r2,r2,65535
    7cec:	10801fa8 	cmpgeui	r2,r2,126
    7cf0:	1000041e 	bne	r2,zero,7d04 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    7cf4:	e0bfff17 	ldw	r2,-4(fp)
    7cf8:	00c00084 	movi	r3,2
    7cfc:	10c00485 	stb	r3,18(r2)
                        return;
    7d00:	0001883a 	nop
                }
        }
}
    7d04:	e037883a 	mov	sp,fp
    7d08:	df000017 	ldw	fp,0(sp)
    7d0c:	dec00104 	addi	sp,sp,4
    7d10:	f800283a 	ret

00007d14 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    7d14:	defff804 	addi	sp,sp,-32
    7d18:	dfc00715 	stw	ra,28(sp)
    7d1c:	df000615 	stw	fp,24(sp)
    7d20:	df000604 	addi	fp,sp,24
    7d24:	e13ffd15 	stw	r4,-12(fp)
    7d28:	e17ffe15 	stw	r5,-8(fp)
    7d2c:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    7d30:	e0bffd17 	ldw	r2,-12(fp)
    7d34:	108005c3 	ldbu	r2,23(r2)
    7d38:	10c03fcc 	andi	r3,r2,255
    7d3c:	e0bffe17 	ldw	r2,-8(fp)
    7d40:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7d44:	e0bffd17 	ldw	r2,-12(fp)
    7d48:	10c00217 	ldw	r3,8(r2)
    7d4c:	e0bffd17 	ldw	r2,-12(fp)
    7d50:	10800303 	ldbu	r2,12(r2)
    7d54:	11003fcc 	andi	r4,r2,255
    7d58:	e0bffd17 	ldw	r2,-12(fp)
    7d5c:	10800583 	ldbu	r2,22(r2)
    7d60:	11403fcc 	andi	r5,r2,255
    7d64:	d8000115 	stw	zero,4(sp)
    7d68:	e0bfff17 	ldw	r2,-4(fp)
    7d6c:	d8800015 	stw	r2,0(sp)
    7d70:	e1fffe17 	ldw	r7,-8(fp)
    7d74:	280d883a 	mov	r6,r5
    7d78:	200b883a 	mov	r5,r4
    7d7c:	1809883a 	mov	r4,r3
    7d80:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    7d84:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    7d88:	e0bffe17 	ldw	r2,-8(fp)
    7d8c:	1080000b 	ldhu	r2,0(r2)
    7d90:	10bfffcc 	andi	r2,r2,65535
    7d94:	10800f28 	cmpgeui	r2,r2,60
    7d98:	10000d1e 	bne	r2,zero,7dd0 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    7d9c:	e0bffe17 	ldw	r2,-8(fp)
    7da0:	1080000b 	ldhu	r2,0(r2)
    7da4:	10bfffcc 	andi	r2,r2,65535
    7da8:	e0ffff17 	ldw	r3,-4(fp)
    7dac:	1885883a 	add	r2,r3,r2
    7db0:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7db4:	e0bffe17 	ldw	r2,-8(fp)
    7db8:	1080000b 	ldhu	r2,0(r2)
    7dbc:	10bfffcc 	andi	r2,r2,65535
    7dc0:	10800044 	addi	r2,r2,1
    7dc4:	e0ffff17 	ldw	r3,-4(fp)
    7dc8:	1885883a 	add	r2,r3,r2
    7dcc:	10000005 	stb	zero,0(r2)
        }
        return r;
    7dd0:	e0bffc03 	ldbu	r2,-16(fp)
}
    7dd4:	e037883a 	mov	sp,fp
    7dd8:	dfc00117 	ldw	ra,4(sp)
    7ddc:	df000017 	ldw	fp,0(sp)
    7de0:	dec00204 	addi	sp,sp,8
    7de4:	f800283a 	ret

00007de8 <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7de8:	defff904 	addi	sp,sp,-28
    7dec:	dfc00615 	stw	ra,24(sp)
    7df0:	df000515 	stw	fp,20(sp)
    7df4:	df000504 	addi	fp,sp,20
    7df8:	e13ffd15 	stw	r4,-12(fp)
    7dfc:	e17ffe15 	stw	r5,-8(fp)
    7e00:	3005883a 	mov	r2,r6
    7e04:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7e08:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7e0c:	e0bffd17 	ldw	r2,-12(fp)
    7e10:	10800343 	ldbu	r2,13(r2)
    7e14:	1080005c 	xori	r2,r2,1
    7e18:	10803fcc 	andi	r2,r2,255
    7e1c:	10000226 	beq	r2,zero,7e28 <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7e20:	0005883a 	mov	r2,zero
    7e24:	00008506 	br	803c <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7e28:	e0bffd17 	ldw	r2,-12(fp)
    7e2c:	10801703 	ldbu	r2,92(r2)
    7e30:	10803fcc 	andi	r2,r2,255
    7e34:	10001826 	beq	r2,zero,7e98 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7e38:	e0bffd17 	ldw	r2,-12(fp)
    7e3c:	10801703 	ldbu	r2,92(r2)
    7e40:	10803fcc 	andi	r2,r2,255
    7e44:	10801028 	cmpgeui	r2,r2,64
    7e48:	1000131e 	bne	r2,zero,7e98 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7e4c:	e0bffd17 	ldw	r2,-12(fp)
    7e50:	10801703 	ldbu	r2,92(r2)
    7e54:	10803fcc 	andi	r2,r2,255
    7e58:	e0fffd17 	ldw	r3,-12(fp)
    7e5c:	1885883a 	add	r2,r3,r2
    7e60:	10800704 	addi	r2,r2,28
    7e64:	10800003 	ldbu	r2,0(r2)
    7e68:	10803fcc 	andi	r2,r2,255
    7e6c:	10002a1e 	bne	r2,zero,7f18 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7e70:	e0bffd17 	ldw	r2,-12(fp)
    7e74:	10801703 	ldbu	r2,92(r2)
    7e78:	10803fcc 	andi	r2,r2,255
    7e7c:	10800044 	addi	r2,r2,1
    7e80:	e0fffd17 	ldw	r3,-12(fp)
    7e84:	1885883a 	add	r2,r3,r2
    7e88:	10800704 	addi	r2,r2,28
    7e8c:	10800003 	ldbu	r2,0(r2)
    7e90:	10803fcc 	andi	r2,r2,255
    7e94:	1000201e 	bne	r2,zero,7f18 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7e98:	e0bffd17 	ldw	r2,-12(fp)
    7e9c:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7ea0:	e0bffd17 	ldw	r2,-12(fp)
    7ea4:	10c00704 	addi	r3,r2,28
    7ea8:	e0bffc04 	addi	r2,fp,-16
    7eac:	180d883a 	mov	r6,r3
    7eb0:	100b883a 	mov	r5,r2
    7eb4:	e13ffd17 	ldw	r4,-12(fp)
    7eb8:	0007d140 	call	7d14 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7ebc:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7ec0:	e0bffb03 	ldbu	r2,-20(fp)
    7ec4:	10000226 	beq	r2,zero,7ed0 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7ec8:	0005883a 	mov	r2,zero
    7ecc:	00005b06 	br	803c <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7ed0:	e0bffd17 	ldw	r2,-12(fp)
    7ed4:	10800703 	ldbu	r2,28(r2)
    7ed8:	10803fcc 	andi	r2,r2,255
    7edc:	10000e1e 	bne	r2,zero,7f18 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7ee0:	e0bffd17 	ldw	r2,-12(fp)
    7ee4:	10800743 	ldbu	r2,29(r2)
    7ee8:	10803fcc 	andi	r2,r2,255
    7eec:	10000a1e 	bne	r2,zero,7f18 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7ef0:	e0bffd17 	ldw	r2,-12(fp)
    7ef4:	10800783 	ldbu	r2,30(r2)
    7ef8:	10803fcc 	andi	r2,r2,255
    7efc:	1000061e 	bne	r2,zero,7f18 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7f00:	e0bffd17 	ldw	r2,-12(fp)
    7f04:	108007c3 	ldbu	r2,31(r2)
    7f08:	10803fcc 	andi	r2,r2,255
    7f0c:	1000021e 	bne	r2,zero,7f18 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    7f10:	0005883a 	mov	r2,zero
    7f14:	00004906 	br	803c <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    7f18:	e0bffd17 	ldw	r2,-12(fp)
    7f1c:	10801703 	ldbu	r2,92(r2)
    7f20:	10803fcc 	andi	r2,r2,255
    7f24:	e0fffd17 	ldw	r3,-12(fp)
    7f28:	1885883a 	add	r2,r3,r2
    7f2c:	10800704 	addi	r2,r2,28
    7f30:	10800003 	ldbu	r2,0(r2)
    7f34:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    7f38:	e0bfff03 	ldbu	r2,-4(fp)
    7f3c:	10000526 	beq	r2,zero,7f54 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    7f40:	e0bffe17 	ldw	r2,-8(fp)
    7f44:	10c00044 	addi	r3,r2,1
    7f48:	e0fffe15 	stw	r3,-8(fp)
    7f4c:	e0fffb43 	ldbu	r3,-19(fp)
    7f50:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    7f54:	e0bffd17 	ldw	r2,-12(fp)
    7f58:	10801703 	ldbu	r2,92(r2)
    7f5c:	10800044 	addi	r2,r2,1
    7f60:	1007883a 	mov	r3,r2
    7f64:	e0bffd17 	ldw	r2,-12(fp)
    7f68:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    7f6c:	e0bffe17 	ldw	r2,-8(fp)
    7f70:	10c00044 	addi	r3,r2,1
    7f74:	e0fffe15 	stw	r3,-8(fp)
    7f78:	e0fffd17 	ldw	r3,-12(fp)
    7f7c:	18c01703 	ldbu	r3,92(r3)
    7f80:	19000044 	addi	r4,r3,1
    7f84:	200b883a 	mov	r5,r4
    7f88:	e13ffd17 	ldw	r4,-12(fp)
    7f8c:	21401705 	stb	r5,92(r4)
    7f90:	18c03fcc 	andi	r3,r3,255
    7f94:	e13ffd17 	ldw	r4,-12(fp)
    7f98:	20c7883a 	add	r3,r4,r3
    7f9c:	18c00704 	addi	r3,r3,28
    7fa0:	18c00003 	ldbu	r3,0(r3)
    7fa4:	e0fffb85 	stb	r3,-18(fp)
    7fa8:	e0fffb83 	ldbu	r3,-18(fp)
    7fac:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7fb0:	e0bffe17 	ldw	r2,-8(fp)
    7fb4:	10c00044 	addi	r3,r2,1
    7fb8:	e0fffe15 	stw	r3,-8(fp)
    7fbc:	e0fffd17 	ldw	r3,-12(fp)
    7fc0:	18c01703 	ldbu	r3,92(r3)
    7fc4:	19000044 	addi	r4,r3,1
    7fc8:	200b883a 	mov	r5,r4
    7fcc:	e13ffd17 	ldw	r4,-12(fp)
    7fd0:	21401705 	stb	r5,92(r4)
    7fd4:	18c03fcc 	andi	r3,r3,255
    7fd8:	e13ffd17 	ldw	r4,-12(fp)
    7fdc:	20c7883a 	add	r3,r4,r3
    7fe0:	18c00704 	addi	r3,r3,28
    7fe4:	18c00003 	ldbu	r3,0(r3)
    7fe8:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7fec:	e0bffe17 	ldw	r2,-8(fp)
    7ff0:	10c00044 	addi	r3,r2,1
    7ff4:	e0fffe15 	stw	r3,-8(fp)
    7ff8:	e0fffd17 	ldw	r3,-12(fp)
    7ffc:	18c01703 	ldbu	r3,92(r3)
    8000:	19000044 	addi	r4,r3,1
    8004:	200b883a 	mov	r5,r4
    8008:	e13ffd17 	ldw	r4,-12(fp)
    800c:	21401705 	stb	r5,92(r4)
    8010:	18c03fcc 	andi	r3,r3,255
    8014:	e13ffd17 	ldw	r4,-12(fp)
    8018:	20c7883a 	add	r3,r4,r3
    801c:	18c00704 	addi	r3,r3,28
    8020:	18c00003 	ldbu	r3,0(r3)
    8024:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    8028:	e0bffb43 	ldbu	r2,-19(fp)
    802c:	108003cc 	andi	r2,r2,15
    8030:	100b883a 	mov	r5,r2
    8034:	e13ffd17 	ldw	r4,-12(fp)
    8038:	00090980 	call	9098 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    803c:	e037883a 	mov	sp,fp
    8040:	dfc00117 	ldw	ra,4(sp)
    8044:	df000017 	ldw	fp,0(sp)
    8048:	dec00204 	addi	sp,sp,8
    804c:	f800283a 	ret

00008050 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    8050:	defff804 	addi	sp,sp,-32
    8054:	dfc00715 	stw	ra,28(sp)
    8058:	df000615 	stw	fp,24(sp)
    805c:	df000604 	addi	fp,sp,24
    8060:	e13ffd15 	stw	r4,-12(fp)
    8064:	e17ffe15 	stw	r5,-8(fp)
    8068:	3005883a 	mov	r2,r6
    806c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    8070:	e0bffe17 	ldw	r2,-8(fp)
    8074:	10800003 	ldbu	r2,0(r2)
    8078:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    807c:	e0bffb03 	ldbu	r2,-20(fp)
    8080:	100b883a 	mov	r5,r2
    8084:	e13ffd17 	ldw	r4,-12(fp)
    8088:	00090400 	call	9040 <_ZN9USBH_MIDI17convertStatus2CinEh>
    808c:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    8090:	e0bffb03 	ldbu	r2,-20(fp)
    8094:	10803c18 	cmpnei	r2,r2,240
    8098:	10000b1e 	bne	r2,zero,80c8 <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    809c:	e17ffe17 	ldw	r5,-8(fp)
    80a0:	e13ffd17 	ldw	r4,-12(fp)
    80a4:	00082100 	call	8210 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    80a8:	10bfffcc 	andi	r2,r2,65535
    80ac:	e0ffff03 	ldbu	r3,-4(fp)
    80b0:	180f883a 	mov	r7,r3
    80b4:	100d883a 	mov	r6,r2
    80b8:	e17ffe17 	ldw	r5,-8(fp)
    80bc:	e13ffd17 	ldw	r4,-12(fp)
    80c0:	00082980 	call	8298 <_ZN9USBH_MIDI9SendSysExEPhth>
    80c4:	00003406 	br	8198 <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    80c8:	e0bfff03 	ldbu	r2,-4(fp)
    80cc:	1004913a 	slli	r2,r2,4
    80d0:	1007883a 	mov	r3,r2
    80d4:	e0bffb43 	ldbu	r2,-19(fp)
    80d8:	1884b03a 	or	r2,r3,r2
    80dc:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    80e0:	e0bffe17 	ldw	r2,-8(fp)
    80e4:	10800003 	ldbu	r2,0(r2)
    80e8:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    80ec:	e0bffb43 	ldbu	r2,-19(fp)
    80f0:	100b883a 	mov	r5,r2
    80f4:	e13ffd17 	ldw	r4,-12(fp)
    80f8:	00090980 	call	9098 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    80fc:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    8100:	e0bffb83 	ldbu	r2,-18(fp)
    8104:	10c000a0 	cmpeqi	r3,r2,2
    8108:	18000c1e 	bne	r3,zero,813c <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    810c:	10c000e0 	cmpeqi	r3,r2,3
    8110:	1800031e 	bne	r3,zero,8120 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    8114:	10800060 	cmpeqi	r2,r2,1
    8118:	10000d1e 	bne	r2,zero,8150 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    811c:	00000f06 	br	815c <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    8120:	e0bffe17 	ldw	r2,-8(fp)
    8124:	10800043 	ldbu	r2,1(r2)
    8128:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    812c:	e0bffe17 	ldw	r2,-8(fp)
    8130:	10800083 	ldbu	r2,2(r2)
    8134:	e0bffc85 	stb	r2,-14(fp)
                break;
    8138:	00000806 	br	815c <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    813c:	e0bffe17 	ldw	r2,-8(fp)
    8140:	10800043 	ldbu	r2,1(r2)
    8144:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    8148:	e03ffc85 	stb	zero,-14(fp)
                break;
    814c:	00000306 	br	815c <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    8150:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    8154:	e03ffc85 	stb	zero,-14(fp)
                break;
    8158:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    815c:	e0bffd17 	ldw	r2,-12(fp)
    8160:	10c00217 	ldw	r3,8(r2)
    8164:	e0bffd17 	ldw	r2,-12(fp)
    8168:	10800303 	ldbu	r2,12(r2)
    816c:	11003fcc 	andi	r4,r2,255
    8170:	e0bffd17 	ldw	r2,-12(fp)
    8174:	10800643 	ldbu	r2,25(r2)
    8178:	11403fcc 	andi	r5,r2,255
    817c:	e0bffbc4 	addi	r2,fp,-17
    8180:	d8800015 	stw	r2,0(sp)
    8184:	01c00104 	movi	r7,4
    8188:	280d883a 	mov	r6,r5
    818c:	200b883a 	mov	r5,r4
    8190:	1809883a 	mov	r4,r3
    8194:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    8198:	e037883a 	mov	sp,fp
    819c:	dfc00117 	ldw	ra,4(sp)
    81a0:	df000017 	ldw	fp,0(sp)
    81a4:	dec00204 	addi	sp,sp,8
    81a8:	f800283a 	ret

000081ac <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    81ac:	defffb04 	addi	sp,sp,-20
    81b0:	dfc00415 	stw	ra,16(sp)
    81b4:	df000315 	stw	fp,12(sp)
    81b8:	df000304 	addi	fp,sp,12
    81bc:	e13ffd15 	stw	r4,-12(fp)
    81c0:	2807883a 	mov	r3,r5
    81c4:	3005883a 	mov	r2,r6
    81c8:	e0fffe05 	stb	r3,-8(fp)
    81cc:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    81d0:	e0bfff03 	ldbu	r2,-4(fp)
    81d4:	1000051e 	bne	r2,zero,81ec <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    81d8:	e0bffe03 	ldbu	r2,-8(fp)
    81dc:	100b883a 	mov	r5,r2
    81e0:	e13ffd17 	ldw	r4,-12(fp)
    81e4:	00090400 	call	9040 <_ZN9USBH_MIDI17convertStatus2CinEh>
    81e8:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    81ec:	e0bfff03 	ldbu	r2,-4(fp)
    81f0:	100b883a 	mov	r5,r2
    81f4:	e13ffd17 	ldw	r4,-12(fp)
    81f8:	00090980 	call	9098 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    81fc:	e037883a 	mov	sp,fp
    8200:	dfc00117 	ldw	ra,4(sp)
    8204:	df000017 	ldw	fp,0(sp)
    8208:	dec00204 	addi	sp,sp,8
    820c:	f800283a 	ret

00008210 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    8210:	defffc04 	addi	sp,sp,-16
    8214:	df000315 	stw	fp,12(sp)
    8218:	df000304 	addi	fp,sp,12
    821c:	e13ffe15 	stw	r4,-8(fp)
    8220:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    8224:	00800044 	movi	r2,1
    8228:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    822c:	e0bfff17 	ldw	r2,-4(fp)
    8230:	10800003 	ldbu	r2,0(r2)
    8234:	10803fcc 	andi	r2,r2,255
    8238:	10803c20 	cmpeqi	r2,r2,240
    823c:	1000021e 	bne	r2,zero,8248 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    8240:	0005883a 	mov	r2,zero
    8244:	00001006 	br	8288 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    8248:	e0bfff17 	ldw	r2,-4(fp)
    824c:	10800003 	ldbu	r2,0(r2)
    8250:	10803fcc 	andi	r2,r2,255
    8254:	10803de0 	cmpeqi	r2,r2,247
    8258:	10000a1e 	bne	r2,zero,8284 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    825c:	e0bfff17 	ldw	r2,-4(fp)
    8260:	10800044 	addi	r2,r2,1
    8264:	e0bfff15 	stw	r2,-4(fp)
                c++;
    8268:	e0bffd0b 	ldhu	r2,-12(fp)
    826c:	10800044 	addi	r2,r2,1
    8270:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    8274:	e0bffd0b 	ldhu	r2,-12(fp)
    8278:	10804070 	cmpltui	r2,r2,257
    827c:	103ff21e 	bne	r2,zero,8248 <__alt_data_end+0xfc008248>
                        c = 0;
    8280:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    8284:	e0bffd0b 	ldhu	r2,-12(fp)
}
    8288:	e037883a 	mov	sp,fp
    828c:	df000017 	ldw	fp,0(sp)
    8290:	dec00104 	addi	sp,sp,4
    8294:	f800283a 	ret

00008298 <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    8298:	deffe704 	addi	sp,sp,-100
    829c:	dfc01815 	stw	ra,96(sp)
    82a0:	df001715 	stw	fp,92(sp)
    82a4:	df001704 	addi	fp,sp,92
    82a8:	e13ffc15 	stw	r4,-16(fp)
    82ac:	e17ffd15 	stw	r5,-12(fp)
    82b0:	3007883a 	mov	r3,r6
    82b4:	3805883a 	mov	r2,r7
    82b8:	e0fffe0d 	sth	r3,-8(fp)
    82bc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    82c0:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    82c4:	e0bffe0b 	ldhu	r2,-8(fp)
    82c8:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    82cc:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    82d0:	e0bffc17 	ldw	r2,-16(fp)
    82d4:	108005c3 	ldbu	r2,23(r2)
    82d8:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    82dc:	e0bffe0b 	ldhu	r2,-8(fp)
    82e0:	01402004 	movi	r5,128
    82e4:	1009883a 	mov	r4,r2
    82e8:	00091300 	call	9130 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    82ec:	e0bfea8b 	ldhu	r2,-86(fp)
    82f0:	1000b026 	beq	r2,zero,85b4 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    82f4:	e0bfeb03 	ldbu	r2,-84(fp)
    82f8:	e0ffff03 	ldbu	r3,-4(fp)
    82fc:	1806913a 	slli	r3,r3,4
    8300:	18c00114 	ori	r3,r3,4
    8304:	1809883a 	mov	r4,r3
    8308:	e0ffeb84 	addi	r3,fp,-82
    830c:	1885883a 	add	r2,r3,r2
    8310:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    8314:	e0bfea8b 	ldhu	r2,-86(fp)
    8318:	10c000a0 	cmpeqi	r3,r2,2
    831c:	18002a1e 	bne	r3,zero,83c8 <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    8320:	10c000e0 	cmpeqi	r3,r2,3
    8324:	1800521e 	bne	r3,zero,8470 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    8328:	10800060 	cmpeqi	r2,r2,1
    832c:	10005826 	beq	r2,zero,8490 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    8330:	e0bfeb03 	ldbu	r2,-84(fp)
    8334:	10c00044 	addi	r3,r2,1
    8338:	e0ffeb05 	stb	r3,-84(fp)
    833c:	10803fcc 	andi	r2,r2,255
    8340:	e0ffff03 	ldbu	r3,-4(fp)
    8344:	1806913a 	slli	r3,r3,4
    8348:	18c00154 	ori	r3,r3,5
    834c:	1809883a 	mov	r4,r3
    8350:	e0ffeb84 	addi	r3,fp,-82
    8354:	1885883a 	add	r2,r3,r2
    8358:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    835c:	e0bfeb03 	ldbu	r2,-84(fp)
    8360:	10c00044 	addi	r3,r2,1
    8364:	e0ffeb05 	stb	r3,-84(fp)
    8368:	11003fcc 	andi	r4,r2,255
    836c:	e0bffd17 	ldw	r2,-12(fp)
    8370:	10c00044 	addi	r3,r2,1
    8374:	e0fffd15 	stw	r3,-12(fp)
    8378:	10c00003 	ldbu	r3,0(r2)
    837c:	e0bfeb84 	addi	r2,fp,-82
    8380:	1105883a 	add	r2,r2,r4
    8384:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8388:	e0bfeb03 	ldbu	r2,-84(fp)
    838c:	10c00044 	addi	r3,r2,1
    8390:	e0ffeb05 	stb	r3,-84(fp)
    8394:	10803fcc 	andi	r2,r2,255
    8398:	e0ffeb84 	addi	r3,fp,-82
    839c:	1885883a 	add	r2,r3,r2
    83a0:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    83a4:	e0bfeb03 	ldbu	r2,-84(fp)
    83a8:	10c00044 	addi	r3,r2,1
    83ac:	e0ffeb05 	stb	r3,-84(fp)
    83b0:	10803fcc 	andi	r2,r2,255
    83b4:	e0ffeb84 	addi	r3,fp,-82
    83b8:	1885883a 	add	r2,r3,r2
    83bc:	10000005 	stb	zero,0(r2)
                        n = 0;
    83c0:	e03fea8d 	sth	zero,-86(fp)
                        break;
    83c4:	00005a06 	br	8530 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    83c8:	e0bfeb03 	ldbu	r2,-84(fp)
    83cc:	10c00044 	addi	r3,r2,1
    83d0:	e0ffeb05 	stb	r3,-84(fp)
    83d4:	10803fcc 	andi	r2,r2,255
    83d8:	e0ffff03 	ldbu	r3,-4(fp)
    83dc:	1806913a 	slli	r3,r3,4
    83e0:	18c00194 	ori	r3,r3,6
    83e4:	1809883a 	mov	r4,r3
    83e8:	e0ffeb84 	addi	r3,fp,-82
    83ec:	1885883a 	add	r2,r3,r2
    83f0:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    83f4:	e0bfeb03 	ldbu	r2,-84(fp)
    83f8:	10c00044 	addi	r3,r2,1
    83fc:	e0ffeb05 	stb	r3,-84(fp)
    8400:	11003fcc 	andi	r4,r2,255
    8404:	e0bffd17 	ldw	r2,-12(fp)
    8408:	10c00044 	addi	r3,r2,1
    840c:	e0fffd15 	stw	r3,-12(fp)
    8410:	10c00003 	ldbu	r3,0(r2)
    8414:	e0bfeb84 	addi	r2,fp,-82
    8418:	1105883a 	add	r2,r2,r4
    841c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8420:	e0bfeb03 	ldbu	r2,-84(fp)
    8424:	10c00044 	addi	r3,r2,1
    8428:	e0ffeb05 	stb	r3,-84(fp)
    842c:	11003fcc 	andi	r4,r2,255
    8430:	e0bffd17 	ldw	r2,-12(fp)
    8434:	10c00044 	addi	r3,r2,1
    8438:	e0fffd15 	stw	r3,-12(fp)
    843c:	10c00003 	ldbu	r3,0(r2)
    8440:	e0bfeb84 	addi	r2,fp,-82
    8444:	1105883a 	add	r2,r2,r4
    8448:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    844c:	e0bfeb03 	ldbu	r2,-84(fp)
    8450:	10c00044 	addi	r3,r2,1
    8454:	e0ffeb05 	stb	r3,-84(fp)
    8458:	10803fcc 	andi	r2,r2,255
    845c:	e0ffeb84 	addi	r3,fp,-82
    8460:	1885883a 	add	r2,r3,r2
    8464:	10000005 	stb	zero,0(r2)
                        n = 0;
    8468:	e03fea8d 	sth	zero,-86(fp)
                        break;
    846c:	00003006 	br	8530 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    8470:	e0bfeb03 	ldbu	r2,-84(fp)
    8474:	e0ffff03 	ldbu	r3,-4(fp)
    8478:	1806913a 	slli	r3,r3,4
    847c:	18c001d4 	ori	r3,r3,7
    8480:	1809883a 	mov	r4,r3
    8484:	e0ffeb84 	addi	r3,fp,-82
    8488:	1885883a 	add	r2,r3,r2
    848c:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    8490:	e0bfeb03 	ldbu	r2,-84(fp)
    8494:	10800044 	addi	r2,r2,1
    8498:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    849c:	e0bfeb03 	ldbu	r2,-84(fp)
    84a0:	10c00044 	addi	r3,r2,1
    84a4:	e0ffeb05 	stb	r3,-84(fp)
    84a8:	11003fcc 	andi	r4,r2,255
    84ac:	e0bffd17 	ldw	r2,-12(fp)
    84b0:	10c00044 	addi	r3,r2,1
    84b4:	e0fffd15 	stw	r3,-12(fp)
    84b8:	10c00003 	ldbu	r3,0(r2)
    84bc:	e0bfeb84 	addi	r2,fp,-82
    84c0:	1105883a 	add	r2,r2,r4
    84c4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    84c8:	e0bfeb03 	ldbu	r2,-84(fp)
    84cc:	10c00044 	addi	r3,r2,1
    84d0:	e0ffeb05 	stb	r3,-84(fp)
    84d4:	11003fcc 	andi	r4,r2,255
    84d8:	e0bffd17 	ldw	r2,-12(fp)
    84dc:	10c00044 	addi	r3,r2,1
    84e0:	e0fffd15 	stw	r3,-12(fp)
    84e4:	10c00003 	ldbu	r3,0(r2)
    84e8:	e0bfeb84 	addi	r2,fp,-82
    84ec:	1105883a 	add	r2,r2,r4
    84f0:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    84f4:	e0bfeb03 	ldbu	r2,-84(fp)
    84f8:	10c00044 	addi	r3,r2,1
    84fc:	e0ffeb05 	stb	r3,-84(fp)
    8500:	11003fcc 	andi	r4,r2,255
    8504:	e0bffd17 	ldw	r2,-12(fp)
    8508:	10c00044 	addi	r3,r2,1
    850c:	e0fffd15 	stw	r3,-12(fp)
    8510:	10c00003 	ldbu	r3,0(r2)
    8514:	e0bfeb84 	addi	r2,fp,-82
    8518:	1105883a 	add	r2,r2,r4
    851c:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    8520:	e0bfea8b 	ldhu	r2,-86(fp)
    8524:	10bfff44 	addi	r2,r2,-3
    8528:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    852c:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    8530:	e0ffeb03 	ldbu	r3,-84(fp)
    8534:	e0bfeb43 	ldbu	r2,-83(fp)
    8538:	1880022e 	bgeu	r3,r2,8544 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    853c:	e0bfea8b 	ldhu	r2,-86(fp)
    8540:	103f6a1e 	bne	r2,zero,82ec <__alt_data_end+0xfc0082ec>
                        USBTRACE2(" wptr:\t", wptr);
    8544:	e0bfeb03 	ldbu	r2,-84(fp)
    8548:	01402004 	movi	r5,128
    854c:	1009883a 	mov	r4,r2
    8550:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    8554:	e0bffc17 	ldw	r2,-16(fp)
    8558:	10c00217 	ldw	r3,8(r2)
    855c:	e0bffc17 	ldw	r2,-16(fp)
    8560:	10800303 	ldbu	r2,12(r2)
    8564:	11003fcc 	andi	r4,r2,255
    8568:	e0bffc17 	ldw	r2,-16(fp)
    856c:	10800643 	ldbu	r2,25(r2)
    8570:	11403fcc 	andi	r5,r2,255
    8574:	e1bfeb03 	ldbu	r6,-84(fp)
    8578:	e0bfeb84 	addi	r2,fp,-82
    857c:	d8800015 	stw	r2,0(sp)
    8580:	300f883a 	mov	r7,r6
    8584:	280d883a 	mov	r6,r5
    8588:	200b883a 	mov	r5,r4
    858c:	1809883a 	mov	r4,r3
    8590:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    8594:	e0bfea05 	stb	r2,-88(fp)
    8598:	e0bfea03 	ldbu	r2,-88(fp)
    859c:	1004c03a 	cmpne	r2,r2,zero
    85a0:	10803fcc 	andi	r2,r2,255
    85a4:	1000021e 	bne	r2,zero,85b0 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    85a8:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    85ac:	003f4f06 	br	82ec <__alt_data_end+0xfc0082ec>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    85b0:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    85b4:	e0bfea03 	ldbu	r2,-88(fp)
}
    85b8:	e037883a 	mov	sp,fp
    85bc:	dfc00117 	ldw	ra,4(sp)
    85c0:	df000017 	ldw	fp,0(sp)
    85c4:	dec00204 	addi	sp,sp,8
    85c8:	f800283a 	ret

000085cc <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    85cc:	defffb04 	addi	sp,sp,-20
    85d0:	df000415 	stw	fp,16(sp)
    85d4:	df000404 	addi	fp,sp,16
    85d8:	e13ffd15 	stw	r4,-12(fp)
    85dc:	e17ffe15 	stw	r5,-8(fp)
    85e0:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    85e4:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    85e8:	e0bffe17 	ldw	r2,-8(fp)
    85ec:	10800003 	ldbu	r2,0(r2)
    85f0:	108003cc 	andi	r2,r2,15
    85f4:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    85f8:	e0bffc43 	ldbu	r2,-15(fp)
    85fc:	1080030c 	andi	r2,r2,12
    8600:	10800120 	cmpeqi	r2,r2,4
    8604:	1000021e 	bne	r2,zero,8610 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    8608:	e0bffc03 	ldbu	r2,-16(fp)
    860c:	00003b06 	br	86fc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    8610:	e0bffc43 	ldbu	r2,-15(fp)
    8614:	10c00160 	cmpeqi	r3,r2,5
    8618:	18002e1e 	bne	r3,zero,86d4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    861c:	10c00188 	cmpgei	r3,r2,6
    8620:	1800031e 	bne	r3,zero,8630 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    8624:	10800120 	cmpeqi	r2,r2,4
    8628:	1000061e 	bne	r2,zero,8644 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    862c:	00003206 	br	86f8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    8630:	10c001a0 	cmpeqi	r3,r2,6
    8634:	1800181e 	bne	r3,zero,8698 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    8638:	108001e0 	cmpeqi	r2,r2,7
    863c:	1000011e 	bne	r2,zero,8644 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8640:	00002d06 	br	86f8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    8644:	e0bfff17 	ldw	r2,-4(fp)
    8648:	10c00044 	addi	r3,r2,1
    864c:	e0ffff15 	stw	r3,-4(fp)
    8650:	e0fffe17 	ldw	r3,-8(fp)
    8654:	18c00043 	ldbu	r3,1(r3)
    8658:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    865c:	e0bfff17 	ldw	r2,-4(fp)
    8660:	10c00044 	addi	r3,r2,1
    8664:	e0ffff15 	stw	r3,-4(fp)
    8668:	e0fffe17 	ldw	r3,-8(fp)
    866c:	18c00083 	ldbu	r3,2(r3)
    8670:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    8674:	e0bfff17 	ldw	r2,-4(fp)
    8678:	10c00044 	addi	r3,r2,1
    867c:	e0ffff15 	stw	r3,-4(fp)
    8680:	e0fffe17 	ldw	r3,-8(fp)
    8684:	18c000c3 	ldbu	r3,3(r3)
    8688:	10c00005 	stb	r3,0(r2)
                rc = 3;
    868c:	008000c4 	movi	r2,3
    8690:	e0bffc05 	stb	r2,-16(fp)
                break;
    8694:	00001806 	br	86f8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    8698:	e0bfff17 	ldw	r2,-4(fp)
    869c:	10c00044 	addi	r3,r2,1
    86a0:	e0ffff15 	stw	r3,-4(fp)
    86a4:	e0fffe17 	ldw	r3,-8(fp)
    86a8:	18c00043 	ldbu	r3,1(r3)
    86ac:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    86b0:	e0bfff17 	ldw	r2,-4(fp)
    86b4:	10c00044 	addi	r3,r2,1
    86b8:	e0ffff15 	stw	r3,-4(fp)
    86bc:	e0fffe17 	ldw	r3,-8(fp)
    86c0:	18c00083 	ldbu	r3,2(r3)
    86c4:	10c00005 	stb	r3,0(r2)
                rc = 2;
    86c8:	00800084 	movi	r2,2
    86cc:	e0bffc05 	stb	r2,-16(fp)
                break;
    86d0:	00000906 	br	86f8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    86d4:	e0bfff17 	ldw	r2,-4(fp)
    86d8:	10c00044 	addi	r3,r2,1
    86dc:	e0ffff15 	stw	r3,-4(fp)
    86e0:	e0fffe17 	ldw	r3,-8(fp)
    86e4:	18c00043 	ldbu	r3,1(r3)
    86e8:	10c00005 	stb	r3,0(r2)
                rc = 1;
    86ec:	00800044 	movi	r2,1
    86f0:	e0bffc05 	stb	r2,-16(fp)
                break;
    86f4:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    86f8:	e0bffc03 	ldbu	r2,-16(fp)
}
    86fc:	e037883a 	mov	sp,fp
    8700:	df000017 	ldw	fp,0(sp)
    8704:	dec00104 	addi	sp,sp,4
    8708:	f800283a 	ret

0000870c <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    870c:	defffb04 	addi	sp,sp,-20
    8710:	dfc00415 	stw	ra,16(sp)
    8714:	df000315 	stw	fp,12(sp)
    8718:	df000304 	addi	fp,sp,12
    871c:	e13ffd15 	stw	r4,-12(fp)
    8720:	e17ffe15 	stw	r5,-8(fp)
    8724:	3005883a 	mov	r2,r6
    8728:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    872c:	e0bffd17 	ldw	r2,-12(fp)
    8730:	1009883a 	mov	r4,r2
    8734:	0004ef00 	call	4ef0 <_ZN13USBReadParserC1Ev>
    8738:	008000b4 	movhi	r2,2
    873c:	109c2504 	addi	r2,r2,28820
    8740:	e0fffd17 	ldw	r3,-12(fp)
    8744:	18800015 	stw	r2,0(r3)
    8748:	e0bffd17 	ldw	r2,-12(fp)
    874c:	e0fffe17 	ldw	r3,-8(fp)
    8750:	10c00115 	stw	r3,4(r2)
    8754:	e0bffd17 	ldw	r2,-12(fp)
    8758:	10800204 	addi	r2,r2,8
    875c:	1009883a 	mov	r4,r2
    8760:	00047e00 	call	47e0 <_ZN16MultiValueBufferC1Ev>
    8764:	e0bffd17 	ldw	r2,-12(fp)
    8768:	10800404 	addi	r2,r2,16
    876c:	1009883a 	mov	r4,r2
    8770:	00048400 	call	4840 <_ZN20MultiByteValueParserC1Ev>
    8774:	e0bffd17 	ldw	r2,-12(fp)
    8778:	10800604 	addi	r2,r2,24
    877c:	1009883a 	mov	r4,r2
    8780:	00048fc0 	call	48fc <_ZN11ByteSkipperC1Ev>
    8784:	e0bffd17 	ldw	r2,-12(fp)
    8788:	10000c05 	stb	zero,48(r2)
    878c:	e0bffd17 	ldw	r2,-12(fp)
    8790:	10000c45 	stb	zero,49(r2)
    8794:	e0bffd17 	ldw	r2,-12(fp)
    8798:	10000c85 	stb	zero,50(r2)
    879c:	e0bffd17 	ldw	r2,-12(fp)
    87a0:	10000cc5 	stb	zero,51(r2)
    87a4:	e0bffd17 	ldw	r2,-12(fp)
    87a8:	e0ffff03 	ldbu	r3,-4(fp)
    87ac:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    87b0:	e0bffd17 	ldw	r2,-12(fp)
    87b4:	10c00804 	addi	r3,r2,32
    87b8:	e0bffd17 	ldw	r2,-12(fp)
    87bc:	19803fcc 	andi	r6,r3,255
    87c0:	11000243 	ldbu	r4,9(r2)
    87c4:	2008703a 	and	r4,r4,zero
    87c8:	200b883a 	mov	r5,r4
    87cc:	3009883a 	mov	r4,r6
    87d0:	2908b03a 	or	r4,r5,r4
    87d4:	11000245 	stb	r4,9(r2)
    87d8:	1808d23a 	srli	r4,r3,8
    87dc:	21803fcc 	andi	r6,r4,255
    87e0:	11000283 	ldbu	r4,10(r2)
    87e4:	2008703a 	and	r4,r4,zero
    87e8:	200b883a 	mov	r5,r4
    87ec:	3009883a 	mov	r4,r6
    87f0:	2908b03a 	or	r4,r5,r4
    87f4:	11000285 	stb	r4,10(r2)
    87f8:	1808d43a 	srli	r4,r3,16
    87fc:	21803fcc 	andi	r6,r4,255
    8800:	110002c3 	ldbu	r4,11(r2)
    8804:	2008703a 	and	r4,r4,zero
    8808:	200b883a 	mov	r5,r4
    880c:	3009883a 	mov	r4,r6
    8810:	2908b03a 	or	r4,r5,r4
    8814:	110002c5 	stb	r4,11(r2)
    8818:	180ad63a 	srli	r5,r3,24
    881c:	10c00303 	ldbu	r3,12(r2)
    8820:	1806703a 	and	r3,r3,zero
    8824:	1809883a 	mov	r4,r3
    8828:	2807883a 	mov	r3,r5
    882c:	20c6b03a 	or	r3,r4,r3
    8830:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    8834:	e0bffd17 	ldw	r2,-12(fp)
    8838:	10c00404 	addi	r3,r2,16
    883c:	e0bffd17 	ldw	r2,-12(fp)
    8840:	10800204 	addi	r2,r2,8
    8844:	100b883a 	mov	r5,r2
    8848:	1809883a 	mov	r4,r3
    884c:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    8850:	e0bffd17 	ldw	r2,-12(fp)
    8854:	10c00604 	addi	r3,r2,24
    8858:	e0bffd17 	ldw	r2,-12(fp)
    885c:	10800204 	addi	r2,r2,8
    8860:	100b883a 	mov	r5,r2
    8864:	1809883a 	mov	r4,r3
    8868:	00049380 	call	4938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    886c:	0001883a 	nop
    8870:	e037883a 	mov	sp,fp
    8874:	dfc00117 	ldw	ra,4(sp)
    8878:	df000017 	ldw	fp,0(sp)
    887c:	dec00204 	addi	sp,sp,8
    8880:	f800283a 	ret

00008884 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    8884:	defff804 	addi	sp,sp,-32
    8888:	dfc00715 	stw	ra,28(sp)
    888c:	df000615 	stw	fp,24(sp)
    8890:	df000604 	addi	fp,sp,24
    8894:	e13ffc15 	stw	r4,-16(fp)
    8898:	2805883a 	mov	r2,r5
    889c:	e1bffe15 	stw	r6,-8(fp)
    88a0:	e1ffff15 	stw	r7,-4(fp)
    88a4:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    88a8:	e0bffd0b 	ldhu	r2,-12(fp)
    88ac:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    88b0:	e0bffe17 	ldw	r2,-8(fp)
    88b4:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    88b8:	e0bffa0b 	ldhu	r2,-24(fp)
    88bc:	10bfffcc 	andi	r2,r2,65535
    88c0:	10000a26 	beq	r2,zero,88ec <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    88c4:	e0bffb04 	addi	r2,fp,-20
    88c8:	e1bffa04 	addi	r6,fp,-24
    88cc:	100b883a 	mov	r5,r2
    88d0:	e13ffc17 	ldw	r4,-16(fp)
    88d4:	00089000 	call	8900 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    88d8:	1080005c 	xori	r2,r2,1
    88dc:	10803fcc 	andi	r2,r2,255
    88e0:	1000011e 	bne	r2,zero,88e8 <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    88e4:	003ff406 	br	88b8 <__alt_data_end+0xfc0088b8>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    88e8:	0001883a 	nop
}
    88ec:	e037883a 	mov	sp,fp
    88f0:	dfc00117 	ldw	ra,4(sp)
    88f4:	df000017 	ldw	fp,0(sp)
    88f8:	dec00204 	addi	sp,sp,8
    88fc:	f800283a 	ret

00008900 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    8900:	defff604 	addi	sp,sp,-40
    8904:	dfc00915 	stw	ra,36(sp)
    8908:	df000815 	stw	fp,32(sp)
    890c:	df000804 	addi	fp,sp,32
    8910:	e13ffc15 	stw	r4,-16(fp)
    8914:	e17ffd15 	stw	r5,-12(fp)
    8918:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    891c:	e0bffc17 	ldw	r2,-16(fp)
    8920:	10800804 	addi	r2,r2,32
    8924:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    8928:	e0bffc17 	ldw	r2,-16(fp)
    892c:	10800804 	addi	r2,r2,32
    8930:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    8934:	e0bffc17 	ldw	r2,-16(fp)
    8938:	10800c03 	ldbu	r2,48(r2)
    893c:	10803fcc 	andi	r2,r2,255
    8940:	10c00168 	cmpgeui	r3,r2,5
    8944:	1801411e 	bne	r3,zero,8e4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    8948:	100690ba 	slli	r3,r2,2
    894c:	00800074 	movhi	r2,1
    8950:	10a25804 	addi	r2,r2,-30368
    8954:	1885883a 	add	r2,r3,r2
    8958:	10800017 	ldw	r2,0(r2)
    895c:	1000683a 	jmp	r2
    8960:	00008974 	movhi	zero,549
    8964:	000089a8 	cmpgeui	zero,zero,550
    8968:	00008a30 	cmpltui	zero,zero,552
    896c:	00008ac4 	movi	zero,555
    8970:	00008b30 	cmpltui	zero,zero,556
                case 0:
                        theBuffer.valueSize = 2;
    8974:	e0bffc17 	ldw	r2,-16(fp)
    8978:	00c00084 	movi	r3,2
    897c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8980:	e0bffc17 	ldw	r2,-16(fp)
    8984:	10c00404 	addi	r3,r2,16
    8988:	e0bffc17 	ldw	r2,-16(fp)
    898c:	10800204 	addi	r2,r2,8
    8990:	100b883a 	mov	r5,r2
    8994:	1809883a 	mov	r4,r3
    8998:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    899c:	e0bffc17 	ldw	r2,-16(fp)
    89a0:	00c00044 	movi	r3,1
    89a4:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    89a8:	e0bffc17 	ldw	r2,-16(fp)
    89ac:	10800404 	addi	r2,r2,16
    89b0:	e1bffe17 	ldw	r6,-8(fp)
    89b4:	e17ffd17 	ldw	r5,-12(fp)
    89b8:	1009883a 	mov	r4,r2
    89bc:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    89c0:	1080005c 	xori	r2,r2,1
    89c4:	10803fcc 	andi	r2,r2,255
    89c8:	10000226 	beq	r2,zero,89d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    89cc:	0005883a 	mov	r2,zero
    89d0:	00011f06 	br	8e50 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    89d4:	e0bffc17 	ldw	r2,-16(fp)
    89d8:	10c00217 	ldw	r3,8(r2)
    89dc:	1806d23a 	srli	r3,r3,8
    89e0:	10800317 	ldw	r2,12(r2)
    89e4:	10803fcc 	andi	r2,r2,255
    89e8:	1004963a 	slli	r2,r2,24
    89ec:	10c4b03a 	or	r2,r2,r3
    89f0:	10c00003 	ldbu	r3,0(r2)
    89f4:	e0bffc17 	ldw	r2,-16(fp)
    89f8:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    89fc:	e0bffc17 	ldw	r2,-16(fp)
    8a00:	10c00217 	ldw	r3,8(r2)
    8a04:	1806d23a 	srli	r3,r3,8
    8a08:	10800317 	ldw	r2,12(r2)
    8a0c:	10803fcc 	andi	r2,r2,255
    8a10:	1004963a 	slli	r2,r2,24
    8a14:	10c4b03a 	or	r2,r2,r3
    8a18:	10c00043 	ldbu	r3,1(r2)
    8a1c:	e0bffc17 	ldw	r2,-16(fp)
    8a20:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    8a24:	e0bffc17 	ldw	r2,-16(fp)
    8a28:	00c00084 	movi	r3,2
    8a2c:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    8a30:	e0bffc17 	ldw	r2,-16(fp)
    8a34:	10800804 	addi	r2,r2,32
    8a38:	10c00084 	addi	r3,r2,2
    8a3c:	e0bffc17 	ldw	r2,-16(fp)
    8a40:	19803fcc 	andi	r6,r3,255
    8a44:	11000243 	ldbu	r4,9(r2)
    8a48:	2008703a 	and	r4,r4,zero
    8a4c:	200b883a 	mov	r5,r4
    8a50:	3009883a 	mov	r4,r6
    8a54:	2908b03a 	or	r4,r5,r4
    8a58:	11000245 	stb	r4,9(r2)
    8a5c:	1808d23a 	srli	r4,r3,8
    8a60:	21803fcc 	andi	r6,r4,255
    8a64:	11000283 	ldbu	r4,10(r2)
    8a68:	2008703a 	and	r4,r4,zero
    8a6c:	200b883a 	mov	r5,r4
    8a70:	3009883a 	mov	r4,r6
    8a74:	2908b03a 	or	r4,r5,r4
    8a78:	11000285 	stb	r4,10(r2)
    8a7c:	1808d43a 	srli	r4,r3,16
    8a80:	21803fcc 	andi	r6,r4,255
    8a84:	110002c3 	ldbu	r4,11(r2)
    8a88:	2008703a 	and	r4,r4,zero
    8a8c:	200b883a 	mov	r5,r4
    8a90:	3009883a 	mov	r4,r6
    8a94:	2908b03a 	or	r4,r5,r4
    8a98:	110002c5 	stb	r4,11(r2)
    8a9c:	180ad63a 	srli	r5,r3,24
    8aa0:	10c00303 	ldbu	r3,12(r2)
    8aa4:	1806703a 	and	r3,r3,zero
    8aa8:	1809883a 	mov	r4,r3
    8aac:	2807883a 	mov	r3,r5
    8ab0:	20c6b03a 	or	r3,r4,r3
    8ab4:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    8ab8:	e0bffc17 	ldw	r2,-16(fp)
    8abc:	00c000c4 	movi	r3,3
    8ac0:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    8ac4:	e0bffc17 	ldw	r2,-16(fp)
    8ac8:	10800c83 	ldbu	r2,50(r2)
    8acc:	10803fcc 	andi	r2,r2,255
    8ad0:	10c00120 	cmpeqi	r3,r2,4
    8ad4:	1800021e 	bne	r3,zero,8ae0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    8ad8:	10800148 	cmpgei	r2,r2,5
    8adc:	00000306 	br	8aec <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    8ae0:	e0bffc17 	ldw	r2,-16(fp)
    8ae4:	10000d45 	stb	zero,53(r2)
                                        break;
    8ae8:	00000106 	br	8af0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    8aec:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    8af0:	e0bffc17 	ldw	r2,-16(fp)
    8af4:	10800c43 	ldbu	r2,49(r2)
    8af8:	10bfff84 	addi	r2,r2,-2
    8afc:	1007883a 	mov	r3,r2
    8b00:	e0bffc17 	ldw	r2,-16(fp)
    8b04:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8b08:	e0bffc17 	ldw	r2,-16(fp)
    8b0c:	10c00404 	addi	r3,r2,16
    8b10:	e0bffc17 	ldw	r2,-16(fp)
    8b14:	10800204 	addi	r2,r2,8
    8b18:	100b883a 	mov	r5,r2
    8b1c:	1809883a 	mov	r4,r3
    8b20:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    8b24:	e0bffc17 	ldw	r2,-16(fp)
    8b28:	00c00104 	movi	r3,4
    8b2c:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    8b30:	e0bffc17 	ldw	r2,-16(fp)
    8b34:	10800c83 	ldbu	r2,50(r2)
    8b38:	10803fcc 	andi	r2,r2,255
    8b3c:	10c00120 	cmpeqi	r3,r2,4
    8b40:	1800141e 	bne	r3,zero,8b94 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    8b44:	10c00160 	cmpeqi	r3,r2,5
    8b48:	18005a1e 	bne	r3,zero,8cb4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    8b4c:	108000a0 	cmpeqi	r2,r2,2
    8b50:	10008526 	beq	r2,zero,8d68 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    8b54:	e0bffc17 	ldw	r2,-16(fp)
    8b58:	10800404 	addi	r2,r2,16
    8b5c:	e1bffe17 	ldw	r6,-8(fp)
    8b60:	e17ffd17 	ldw	r5,-12(fp)
    8b64:	1009883a 	mov	r4,r2
    8b68:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8b6c:	1080005c 	xori	r2,r2,1
    8b70:	10803fcc 	andi	r2,r2,255
    8b74:	10000226 	beq	r2,zero,8b80 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    8b78:	0005883a 	mov	r2,zero
    8b7c:	0000b406 	br	8e50 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    8b80:	e0bffa17 	ldw	r2,-24(fp)
    8b84:	10c00143 	ldbu	r3,5(r2)
    8b88:	e0bffc17 	ldw	r2,-16(fp)
    8b8c:	10c00d85 	stb	r3,54(r2)
                                        break;
    8b90:	00008b06 	br	8dc0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    8b94:	e0bffc17 	ldw	r2,-16(fp)
    8b98:	10800404 	addi	r2,r2,16
    8b9c:	e1bffe17 	ldw	r6,-8(fp)
    8ba0:	e17ffd17 	ldw	r5,-12(fp)
    8ba4:	1009883a 	mov	r4,r2
    8ba8:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8bac:	1080005c 	xori	r2,r2,1
    8bb0:	10803fcc 	andi	r2,r2,255
    8bb4:	10000226 	beq	r2,zero,8bc0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    8bb8:	0005883a 	mov	r2,zero
    8bbc:	0000a406 	br	8e50 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    8bc0:	e0bffb17 	ldw	r2,-20(fp)
    8bc4:	10800083 	ldbu	r2,2(r2)
    8bc8:	10803fcc 	andi	r2,r2,255
    8bcc:	01402004 	movi	r5,128
    8bd0:	1009883a 	mov	r4,r2
    8bd4:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    8bd8:	e0bffb17 	ldw	r2,-20(fp)
    8bdc:	108000c3 	ldbu	r2,3(r2)
    8be0:	10803fcc 	andi	r2,r2,255
    8be4:	01402004 	movi	r5,128
    8be8:	1009883a 	mov	r4,r2
    8bec:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    8bf0:	e0bffb17 	ldw	r2,-20(fp)
    8bf4:	10800103 	ldbu	r2,4(r2)
    8bf8:	10803fcc 	andi	r2,r2,255
    8bfc:	01402004 	movi	r5,128
    8c00:	1009883a 	mov	r4,r2
    8c04:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    8c08:	e0bffb17 	ldw	r2,-20(fp)
    8c0c:	10800143 	ldbu	r2,5(r2)
    8c10:	10803fcc 	andi	r2,r2,255
    8c14:	01402004 	movi	r5,128
    8c18:	1009883a 	mov	r4,r2
    8c1c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    8c20:	e0bffb17 	ldw	r2,-20(fp)
    8c24:	10800183 	ldbu	r2,6(r2)
    8c28:	10803fcc 	andi	r2,r2,255
    8c2c:	01402004 	movi	r5,128
    8c30:	1009883a 	mov	r4,r2
    8c34:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    8c38:	e0bffb17 	ldw	r2,-20(fp)
    8c3c:	108001c3 	ldbu	r2,7(r2)
    8c40:	10803fcc 	andi	r2,r2,255
    8c44:	01402004 	movi	r5,128
    8c48:	1009883a 	mov	r4,r2
    8c4c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    8c50:	e0bffc17 	ldw	r2,-16(fp)
    8c54:	10800d03 	ldbu	r2,52(r2)
    8c58:	10803fcc 	andi	r2,r2,255
    8c5c:	10000a26 	beq	r2,zero,8c88 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    8c60:	e0bffb17 	ldw	r2,-20(fp)
    8c64:	10800143 	ldbu	r2,5(r2)
    8c68:	10803fcc 	andi	r2,r2,255
    8c6c:	10800058 	cmpnei	r2,r2,1
    8c70:	10004e1e 	bne	r2,zero,8dac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    8c74:	e0bffb17 	ldw	r2,-20(fp)
    8c78:	10800183 	ldbu	r2,6(r2)
    8c7c:	10803fcc 	andi	r2,r2,255
    8c80:	108000d8 	cmpnei	r2,r2,3
    8c84:	1000491e 	bne	r2,zero,8dac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    8c88:	e0bffc17 	ldw	r2,-16(fp)
    8c8c:	00c00044 	movi	r3,1
    8c90:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    8c94:	e0bffc17 	ldw	r2,-16(fp)
    8c98:	10800cc3 	ldbu	r2,51(r2)
    8c9c:	10803fcc 	andi	r2,r2,255
    8ca0:	108000a8 	cmpgeui	r2,r2,2
    8ca4:	1000431e 	bne	r2,zero,8db4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    8ca8:	e0bffc17 	ldw	r2,-16(fp)
    8cac:	10000cc5 	stb	zero,51(r2)
                                        break;
    8cb0:	00004006 	br	8db4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    8cb4:	e0bffc17 	ldw	r2,-16(fp)
    8cb8:	10800404 	addi	r2,r2,16
    8cbc:	e1bffe17 	ldw	r6,-8(fp)
    8cc0:	e17ffd17 	ldw	r5,-12(fp)
    8cc4:	1009883a 	mov	r4,r2
    8cc8:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8ccc:	1080005c 	xori	r2,r2,1
    8cd0:	10803fcc 	andi	r2,r2,255
    8cd4:	10000226 	beq	r2,zero,8ce0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    8cd8:	0005883a 	mov	r2,zero
    8cdc:	00005c06 	br	8e50 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    8ce0:	e0bffc17 	ldw	r2,-16(fp)
    8ce4:	10800d43 	ldbu	r2,53(r2)
    8ce8:	10803fcc 	andi	r2,r2,255
    8cec:	10003326 	beq	r2,zero,8dbc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    8cf0:	e0bffc17 	ldw	r2,-16(fp)
    8cf4:	10800cc3 	ldbu	r2,51(r2)
    8cf8:	10803fcc 	andi	r2,r2,255
    8cfc:	108000a8 	cmpgeui	r2,r2,2
    8d00:	10002e1e 	bne	r2,zero,8dbc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    8d04:	e0bffc17 	ldw	r2,-16(fp)
    8d08:	10800117 	ldw	r2,4(r2)
    8d0c:	10800017 	ldw	r2,0(r2)
    8d10:	10800017 	ldw	r2,0(r2)
    8d14:	e0fffc17 	ldw	r3,-16(fp)
    8d18:	19000117 	ldw	r4,4(r3)
    8d1c:	e0fffc17 	ldw	r3,-16(fp)
    8d20:	18c00d83 	ldbu	r3,54(r3)
    8d24:	19403fcc 	andi	r5,r3,255
    8d28:	e0fffc17 	ldw	r3,-16(fp)
    8d2c:	18c00804 	addi	r3,r3,32
    8d30:	d8c00115 	stw	r3,4(sp)
    8d34:	d8000015 	stw	zero,0(sp)
    8d38:	000f883a 	mov	r7,zero
    8d3c:	000d883a 	mov	r6,zero
    8d40:	103ee83a 	callr	r2
    8d44:	10803fcc 	andi	r2,r2,255
    8d48:	10001c26 	beq	r2,zero,8dbc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    8d4c:	e0bffc17 	ldw	r2,-16(fp)
    8d50:	10800cc3 	ldbu	r2,51(r2)
    8d54:	10800044 	addi	r2,r2,1
    8d58:	1007883a 	mov	r3,r2
    8d5c:	e0bffc17 	ldw	r2,-16(fp)
    8d60:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8d64:	00001506 	br	8dbc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    8d68:	e0bffc17 	ldw	r2,-16(fp)
    8d6c:	10c00604 	addi	r3,r2,24
    8d70:	e0bffc17 	ldw	r2,-16(fp)
    8d74:	10800c43 	ldbu	r2,49(r2)
    8d78:	10803fcc 	andi	r2,r2,255
    8d7c:	10bfff84 	addi	r2,r2,-2
    8d80:	10bfffcc 	andi	r2,r2,65535
    8d84:	100f883a 	mov	r7,r2
    8d88:	e1bffe17 	ldw	r6,-8(fp)
    8d8c:	e17ffd17 	ldw	r5,-12(fp)
    8d90:	1809883a 	mov	r4,r3
    8d94:	00049a00 	call	49a0 <_ZN11ByteSkipper4SkipEPPhPtt>
    8d98:	1080005c 	xori	r2,r2,1
    8d9c:	10803fcc 	andi	r2,r2,255
    8da0:	10000726 	beq	r2,zero,8dc0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8da4:	0005883a 	mov	r2,zero
    8da8:	00002906 	br	8e50 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8dac:	0001883a 	nop
    8db0:	00000306 	br	8dc0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8db4:	0001883a 	nop
    8db8:	00000106 	br	8dc0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    8dbc:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    8dc0:	e0bffc17 	ldw	r2,-16(fp)
    8dc4:	10c00804 	addi	r3,r2,32
    8dc8:	e0bffc17 	ldw	r2,-16(fp)
    8dcc:	19803fcc 	andi	r6,r3,255
    8dd0:	11000243 	ldbu	r4,9(r2)
    8dd4:	2008703a 	and	r4,r4,zero
    8dd8:	200b883a 	mov	r5,r4
    8ddc:	3009883a 	mov	r4,r6
    8de0:	2908b03a 	or	r4,r5,r4
    8de4:	11000245 	stb	r4,9(r2)
    8de8:	1808d23a 	srli	r4,r3,8
    8dec:	21803fcc 	andi	r6,r4,255
    8df0:	11000283 	ldbu	r4,10(r2)
    8df4:	2008703a 	and	r4,r4,zero
    8df8:	200b883a 	mov	r5,r4
    8dfc:	3009883a 	mov	r4,r6
    8e00:	2908b03a 	or	r4,r5,r4
    8e04:	11000285 	stb	r4,10(r2)
    8e08:	1808d43a 	srli	r4,r3,16
    8e0c:	21803fcc 	andi	r6,r4,255
    8e10:	110002c3 	ldbu	r4,11(r2)
    8e14:	2008703a 	and	r4,r4,zero
    8e18:	200b883a 	mov	r5,r4
    8e1c:	3009883a 	mov	r4,r6
    8e20:	2908b03a 	or	r4,r5,r4
    8e24:	110002c5 	stb	r4,11(r2)
    8e28:	180ad63a 	srli	r5,r3,24
    8e2c:	10c00303 	ldbu	r3,12(r2)
    8e30:	1806703a 	and	r3,r3,zero
    8e34:	1809883a 	mov	r4,r3
    8e38:	2807883a 	mov	r3,r5
    8e3c:	20c6b03a 	or	r3,r4,r3
    8e40:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8e44:	e0bffc17 	ldw	r2,-16(fp)
    8e48:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8e4c:	00800044 	movi	r2,1
}
    8e50:	e037883a 	mov	sp,fp
    8e54:	dfc00117 	ldw	ra,4(sp)
    8e58:	df000017 	ldw	fp,0(sp)
    8e5c:	dec00204 	addi	sp,sp,8
    8e60:	f800283a 	ret

00008e64 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8e64:	defff904 	addi	sp,sp,-28
    8e68:	df000615 	stw	fp,24(sp)
    8e6c:	df000604 	addi	fp,sp,24
    8e70:	e13ffb15 	stw	r4,-20(fp)
    8e74:	3009883a 	mov	r4,r6
    8e78:	3807883a 	mov	r3,r7
    8e7c:	e0800117 	ldw	r2,4(fp)
    8e80:	e17ffc05 	stb	r5,-16(fp)
    8e84:	e13ffd05 	stb	r4,-12(fp)
    8e88:	e0fffe05 	stb	r3,-8(fp)
    8e8c:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8e90:	e0800217 	ldw	r2,8(fp)
    8e94:	10c000c3 	ldbu	r3,3(r2)
    8e98:	e0bffb17 	ldw	r2,-20(fp)
    8e9c:	10800483 	ldbu	r2,18(r2)
    8ea0:	1884703a 	and	r2,r3,r2
    8ea4:	10803fcc 	andi	r2,r2,255
    8ea8:	10800098 	cmpnei	r2,r2,2
    8eac:	10001f1e 	bne	r2,zero,8f2c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8eb0:	e0800217 	ldw	r2,8(fp)
    8eb4:	10800083 	ldbu	r2,2(r2)
    8eb8:	10803fcc 	andi	r2,r2,255
    8ebc:	1080201c 	xori	r2,r2,128
    8ec0:	10bfe004 	addi	r2,r2,-128
    8ec4:	1000020e 	bge	r2,zero,8ed0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8ec8:	00800044 	movi	r2,1
    8ecc:	00000106 	br	8ed4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8ed0:	00800084 	movi	r2,2
    8ed4:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8ed8:	e0fffa03 	ldbu	r3,-24(fp)
    8edc:	e0800217 	ldw	r2,8(fp)
    8ee0:	10800083 	ldbu	r2,2(r2)
    8ee4:	108003cc 	andi	r2,r2,15
    8ee8:	100b883a 	mov	r5,r2
    8eec:	e13ffb17 	ldw	r4,-20(fp)
    8ef0:	1805883a 	mov	r2,r3
    8ef4:	1085883a 	add	r2,r2,r2
    8ef8:	10c5883a 	add	r2,r2,r3
    8efc:	2085883a 	add	r2,r4,r2
    8f00:	108004c4 	addi	r2,r2,19
    8f04:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    8f08:	e0800217 	ldw	r2,8(fp)
    8f0c:	10c00103 	ldbu	r3,4(r2)
    8f10:	10800143 	ldbu	r2,5(r2)
    8f14:	1004923a 	slli	r2,r2,8
    8f18:	10c4b03a 	or	r2,r2,r3
    8f1c:	10bfffcc 	andi	r2,r2,65535
    8f20:	10801070 	cmpltui	r2,r2,65
    8f24:	10000d1e 	bne	r2,zero,8f5c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    8f28:	00000206 	br	8f34 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    8f2c:	0005883a 	mov	r2,zero
    8f30:	00001906 	br	8f98 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    8f34:	e0fffa03 	ldbu	r3,-24(fp)
    8f38:	e13ffb17 	ldw	r4,-20(fp)
    8f3c:	1805883a 	mov	r2,r3
    8f40:	1085883a 	add	r2,r2,r2
    8f44:	10c5883a 	add	r2,r2,r3
    8f48:	2085883a 	add	r2,r4,r2
    8f4c:	10800504 	addi	r2,r2,20
    8f50:	00c01004 	movi	r3,64
    8f54:	10c00005 	stb	r3,0(r2)
    8f58:	00000e06 	br	8f94 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    8f5c:	e0fffa03 	ldbu	r3,-24(fp)
    8f60:	e0800217 	ldw	r2,8(fp)
    8f64:	11000103 	ldbu	r4,4(r2)
    8f68:	10800143 	ldbu	r2,5(r2)
    8f6c:	1004923a 	slli	r2,r2,8
    8f70:	1104b03a 	or	r2,r2,r4
    8f74:	100b883a 	mov	r5,r2
    8f78:	e13ffb17 	ldw	r4,-20(fp)
    8f7c:	1805883a 	mov	r2,r3
    8f80:	1085883a 	add	r2,r2,r2
    8f84:	10c5883a 	add	r2,r2,r3
    8f88:	2085883a 	add	r2,r4,r2
    8f8c:	10800504 	addi	r2,r2,20
    8f90:	11400005 	stb	r5,0(r2)
        }

        return true;
    8f94:	00800044 	movi	r2,1
}
    8f98:	e037883a 	mov	sp,fp
    8f9c:	df000017 	ldw	fp,0(sp)
    8fa0:	dec00104 	addi	sp,sp,4
    8fa4:	f800283a 	ret

00008fa8 <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    8fa8:	213fff04 	addi	r4,r4,-4
    8fac:	0008e641 	jmpi	8e64 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00008fb0 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    8fb0:	defffa04 	addi	sp,sp,-24
    8fb4:	df000515 	stw	fp,20(sp)
    8fb8:	df000504 	addi	fp,sp,20
    8fbc:	e13ffb15 	stw	r4,-20(fp)
    8fc0:	3009883a 	mov	r4,r6
    8fc4:	3807883a 	mov	r3,r7
    8fc8:	e0800117 	ldw	r2,4(fp)
    8fcc:	e17ffc05 	stb	r5,-16(fp)
    8fd0:	e13ffd05 	stb	r4,-12(fp)
    8fd4:	e0fffe05 	stb	r3,-8(fp)
    8fd8:	e0bfff05 	stb	r2,-4(fp)
                return true;
    8fdc:	00800044 	movi	r2,1
        };
    8fe0:	e037883a 	mov	sp,fp
    8fe4:	df000017 	ldw	fp,0(sp)
    8fe8:	dec00104 	addi	sp,sp,4
    8fec:	f800283a 	ret

00008ff0 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    8ff0:	defffe04 	addi	sp,sp,-8
    8ff4:	df000115 	stw	fp,4(sp)
    8ff8:	df000104 	addi	fp,sp,4
    8ffc:	e13fff15 	stw	r4,-4(fp)
    9000:	e0bfff17 	ldw	r2,-4(fp)
    9004:	10800d83 	ldbu	r2,54(r2)
    9008:	e037883a 	mov	sp,fp
    900c:	df000017 	ldw	fp,0(sp)
    9010:	dec00104 	addi	sp,sp,4
    9014:	f800283a 	ret

00009018 <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    9018:	defffe04 	addi	sp,sp,-8
    901c:	df000115 	stw	fp,4(sp)
    9020:	df000104 	addi	fp,sp,4
    9024:	e13fff15 	stw	r4,-4(fp)
    9028:	e0bfff17 	ldw	r2,-4(fp)
    902c:	10800cc3 	ldbu	r2,51(r2)
    9030:	e037883a 	mov	sp,fp
    9034:	df000017 	ldw	fp,0(sp)
    9038:	dec00104 	addi	sp,sp,4
    903c:	f800283a 	ret

00009040 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    9040:	defffd04 	addi	sp,sp,-12
    9044:	df000215 	stw	fp,8(sp)
    9048:	df000204 	addi	fp,sp,8
    904c:	e13ffe15 	stw	r4,-8(fp)
    9050:	2805883a 	mov	r2,r5
    9054:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    9058:	e0bfff03 	ldbu	r2,-4(fp)
    905c:	10803c28 	cmpgeui	r2,r2,240
    9060:	1000031e 	bne	r2,zero,9070 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    9064:	e0bfff03 	ldbu	r2,-4(fp)
    9068:	1004d13a 	srli	r2,r2,4
    906c:	00000606 	br	9088 <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    9070:	e0bfff03 	ldbu	r2,-4(fp)
    9074:	10c003cc 	andi	r3,r2,15
    9078:	008000b4 	movhi	r2,2
    907c:	109c0f44 	addi	r2,r2,28733
    9080:	1885883a 	add	r2,r3,r2
    9084:	10800003 	ldbu	r2,0(r2)
        };
    9088:	e037883a 	mov	sp,fp
    908c:	df000017 	ldw	fp,0(sp)
    9090:	dec00104 	addi	sp,sp,4
    9094:	f800283a 	ret

00009098 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    9098:	defffd04 	addi	sp,sp,-12
    909c:	df000215 	stw	fp,8(sp)
    90a0:	df000204 	addi	fp,sp,8
    90a4:	e13ffe15 	stw	r4,-8(fp)
    90a8:	2805883a 	mov	r2,r5
    90ac:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    90b0:	e0ffff03 	ldbu	r3,-4(fp)
    90b4:	008000b4 	movhi	r2,2
    90b8:	109c0b44 	addi	r2,r2,28717
    90bc:	1885883a 	add	r2,r3,r2
    90c0:	10800003 	ldbu	r2,0(r2)
        };
    90c4:	e037883a 	mov	sp,fp
    90c8:	df000017 	ldw	fp,0(sp)
    90cc:	dec00104 	addi	sp,sp,4
    90d0:	f800283a 	ret

000090d4 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    90d4:	defffe04 	addi	sp,sp,-8
    90d8:	df000115 	stw	fp,4(sp)
    90dc:	df000104 	addi	fp,sp,4
    90e0:	e13fff15 	stw	r4,-4(fp)
    90e4:	e0bfff17 	ldw	r2,-4(fp)
    90e8:	10800303 	ldbu	r2,12(r2)
    90ec:	e037883a 	mov	sp,fp
    90f0:	df000017 	ldw	fp,0(sp)
    90f4:	dec00104 	addi	sp,sp,4
    90f8:	f800283a 	ret

000090fc <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    90fc:	defffe04 	addi	sp,sp,-8
    9100:	df000115 	stw	fp,4(sp)
    9104:	df000104 	addi	fp,sp,4
    9108:	e13fff15 	stw	r4,-4(fp)
    910c:	008000b4 	movhi	r2,2
    9110:	109c2804 	addi	r2,r2,28832
    9114:	e0ffff17 	ldw	r3,-4(fp)
    9118:	18800015 	stw	r2,0(r3)
    911c:	0001883a 	nop
    9120:	e037883a 	mov	sp,fp
    9124:	df000017 	ldw	fp,0(sp)
    9128:	dec00104 	addi	sp,sp,4
    912c:	f800283a 	ret

00009130 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    9130:	defffd04 	addi	sp,sp,-12
    9134:	df000215 	stw	fp,8(sp)
    9138:	df000204 	addi	fp,sp,8
    913c:	2005883a 	mov	r2,r4
    9140:	e17fff15 	stw	r5,-4(fp)
    9144:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    9148:	0001883a 	nop
    914c:	e037883a 	mov	sp,fp
    9150:	df000017 	ldw	fp,0(sp)
    9154:	dec00104 	addi	sp,sp,4
    9158:	f800283a 	ret

0000915c <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    915c:	deffe204 	addi	sp,sp,-120
    9160:	dfc01d15 	stw	ra,116(sp)
    9164:	df001c15 	stw	fp,112(sp)
    9168:	df001c04 	addi	fp,sp,112
    916c:	e13ffd15 	stw	r4,-12(fp)
    9170:	2805883a 	mov	r2,r5
    9174:	e1bfff15 	stw	r6,-4(fp)
    9178:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    917c:	00801004 	movi	r2,64
    9180:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    9184:	e0bffd17 	ldw	r2,-12(fp)
    9188:	11000217 	ldw	r4,8(r2)
    918c:	e0bffd17 	ldw	r2,-12(fp)
    9190:	10800303 	ldbu	r2,12(r2)
    9194:	11403fcc 	andi	r5,r2,255
    9198:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    919c:	e0ffff17 	ldw	r3,-4(fp)
    91a0:	d8c00715 	stw	r3,28(sp)
    91a4:	e0ffec84 	addi	r3,fp,-78
    91a8:	d8c00615 	stw	r3,24(sp)
    91ac:	00c01004 	movi	r3,64
    91b0:	d8c00515 	stw	r3,20(sp)
    91b4:	00c02004 	movi	r3,128
    91b8:	d8c00415 	stw	r3,16(sp)
    91bc:	d8800315 	stw	r2,12(sp)
    91c0:	00800884 	movi	r2,34
    91c4:	d8800215 	stw	r2,8(sp)
    91c8:	d8000115 	stw	zero,4(sp)
    91cc:	00800184 	movi	r2,6
    91d0:	d8800015 	stw	r2,0(sp)
    91d4:	01c02044 	movi	r7,129
    91d8:	000d883a 	mov	r6,zero
    91dc:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    91e0:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    91e4:	e0bfec43 	ldbu	r2,-79(fp)
}
    91e8:	e037883a 	mov	sp,fp
    91ec:	dfc00117 	ldw	ra,4(sp)
    91f0:	df000017 	ldw	fp,0(sp)
    91f4:	dec00204 	addi	sp,sp,8
    91f8:	f800283a 	ret

000091fc <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    91fc:	defff004 	addi	sp,sp,-64
    9200:	dfc00f15 	stw	ra,60(sp)
    9204:	df000e15 	stw	fp,56(sp)
    9208:	df000e04 	addi	fp,sp,56
    920c:	e13ffa15 	stw	r4,-24(fp)
    9210:	2811883a 	mov	r8,r5
    9214:	300b883a 	mov	r5,r6
    9218:	3809883a 	mov	r4,r7
    921c:	e0c00217 	ldw	r3,8(fp)
    9220:	e0800317 	ldw	r2,12(fp)
    9224:	e23ffb05 	stb	r8,-20(fp)
    9228:	e17ffc05 	stb	r5,-16(fp)
    922c:	e13ffd05 	stb	r4,-12(fp)
    9230:	e0fffe05 	stb	r3,-8(fp)
    9234:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    9238:	e0bffa17 	ldw	r2,-24(fp)
    923c:	12000217 	ldw	r8,8(r2)
    9240:	e0bffa17 	ldw	r2,-24(fp)
    9244:	10800303 	ldbu	r2,12(r2)
    9248:	12403fcc 	andi	r9,r2,255
    924c:	e2bffb03 	ldbu	r10,-20(fp)
    9250:	e0bffe03 	ldbu	r2,-8(fp)
    9254:	e0fffd03 	ldbu	r3,-12(fp)
    9258:	e13ffc03 	ldbu	r4,-16(fp)
    925c:	e17fff0b 	ldhu	r5,-4(fp)
    9260:	e1bfff0b 	ldhu	r6,-4(fp)
    9264:	d8000715 	stw	zero,28(sp)
    9268:	e1c00417 	ldw	r7,16(fp)
    926c:	d9c00615 	stw	r7,24(sp)
    9270:	d9800515 	stw	r6,20(sp)
    9274:	d9400415 	stw	r5,16(sp)
    9278:	d9000315 	stw	r4,12(sp)
    927c:	d8c00215 	stw	r3,8(sp)
    9280:	d8800115 	stw	r2,4(sp)
    9284:	00800244 	movi	r2,9
    9288:	d8800015 	stw	r2,0(sp)
    928c:	01c00844 	movi	r7,33
    9290:	500d883a 	mov	r6,r10
    9294:	480b883a 	mov	r5,r9
    9298:	4009883a 	mov	r4,r8
    929c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    92a0:	e037883a 	mov	sp,fp
    92a4:	dfc00117 	ldw	ra,4(sp)
    92a8:	df000017 	ldw	fp,0(sp)
    92ac:	dec00204 	addi	sp,sp,8
    92b0:	f800283a 	ret

000092b4 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    92b4:	defff004 	addi	sp,sp,-64
    92b8:	dfc00f15 	stw	ra,60(sp)
    92bc:	df000e15 	stw	fp,56(sp)
    92c0:	df000e04 	addi	fp,sp,56
    92c4:	e13ffa15 	stw	r4,-24(fp)
    92c8:	2811883a 	mov	r8,r5
    92cc:	300b883a 	mov	r5,r6
    92d0:	3809883a 	mov	r4,r7
    92d4:	e0c00217 	ldw	r3,8(fp)
    92d8:	e0800317 	ldw	r2,12(fp)
    92dc:	e23ffb05 	stb	r8,-20(fp)
    92e0:	e17ffc05 	stb	r5,-16(fp)
    92e4:	e13ffd05 	stb	r4,-12(fp)
    92e8:	e0fffe05 	stb	r3,-8(fp)
    92ec:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    92f0:	e0bffa17 	ldw	r2,-24(fp)
    92f4:	12000217 	ldw	r8,8(r2)
    92f8:	e0bffa17 	ldw	r2,-24(fp)
    92fc:	10800303 	ldbu	r2,12(r2)
    9300:	12403fcc 	andi	r9,r2,255
    9304:	e2bffb03 	ldbu	r10,-20(fp)
    9308:	e0bffe03 	ldbu	r2,-8(fp)
    930c:	e0fffd03 	ldbu	r3,-12(fp)
    9310:	e13ffc03 	ldbu	r4,-16(fp)
    9314:	e17fff0b 	ldhu	r5,-4(fp)
    9318:	e1bfff0b 	ldhu	r6,-4(fp)
    931c:	d8000715 	stw	zero,28(sp)
    9320:	e1c00417 	ldw	r7,16(fp)
    9324:	d9c00615 	stw	r7,24(sp)
    9328:	d9800515 	stw	r6,20(sp)
    932c:	d9400415 	stw	r5,16(sp)
    9330:	d9000315 	stw	r4,12(sp)
    9334:	d8c00215 	stw	r3,8(sp)
    9338:	d8800115 	stw	r2,4(sp)
    933c:	00800044 	movi	r2,1
    9340:	d8800015 	stw	r2,0(sp)
    9344:	01c02844 	movi	r7,161
    9348:	500d883a 	mov	r6,r10
    934c:	480b883a 	mov	r5,r9
    9350:	4009883a 	mov	r4,r8
    9354:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9358:	e037883a 	mov	sp,fp
    935c:	dfc00117 	ldw	ra,4(sp)
    9360:	df000017 	ldw	fp,0(sp)
    9364:	dec00204 	addi	sp,sp,8
    9368:	f800283a 	ret

0000936c <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    936c:	defff204 	addi	sp,sp,-56
    9370:	dfc00d15 	stw	ra,52(sp)
    9374:	df000c15 	stw	fp,48(sp)
    9378:	df000c04 	addi	fp,sp,48
    937c:	e13ffc15 	stw	r4,-16(fp)
    9380:	2807883a 	mov	r3,r5
    9384:	3005883a 	mov	r2,r6
    9388:	e1ffff15 	stw	r7,-4(fp)
    938c:	e0fffd05 	stb	r3,-12(fp)
    9390:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    9394:	e0bffc17 	ldw	r2,-16(fp)
    9398:	12000217 	ldw	r8,8(r2)
    939c:	e0bffc17 	ldw	r2,-16(fp)
    93a0:	10800303 	ldbu	r2,12(r2)
    93a4:	11403fcc 	andi	r5,r2,255
    93a8:	e0bffe03 	ldbu	r2,-8(fp)
    93ac:	e0fffd03 	ldbu	r3,-12(fp)
    93b0:	d8000715 	stw	zero,28(sp)
    93b4:	e13fff17 	ldw	r4,-4(fp)
    93b8:	d9000615 	stw	r4,24(sp)
    93bc:	01000044 	movi	r4,1
    93c0:	d9000515 	stw	r4,20(sp)
    93c4:	01000044 	movi	r4,1
    93c8:	d9000415 	stw	r4,16(sp)
    93cc:	d8c00315 	stw	r3,12(sp)
    93d0:	d8000215 	stw	zero,8(sp)
    93d4:	d8800115 	stw	r2,4(sp)
    93d8:	00800084 	movi	r2,2
    93dc:	d8800015 	stw	r2,0(sp)
    93e0:	01c02844 	movi	r7,161
    93e4:	000d883a 	mov	r6,zero
    93e8:	4009883a 	mov	r4,r8
    93ec:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    93f0:	e037883a 	mov	sp,fp
    93f4:	dfc00117 	ldw	ra,4(sp)
    93f8:	df000017 	ldw	fp,0(sp)
    93fc:	dec00204 	addi	sp,sp,8
    9400:	f800283a 	ret

00009404 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    9404:	defff204 	addi	sp,sp,-56
    9408:	dfc00d15 	stw	ra,52(sp)
    940c:	df000c15 	stw	fp,48(sp)
    9410:	df000c04 	addi	fp,sp,48
    9414:	e13ffc15 	stw	r4,-16(fp)
    9418:	2809883a 	mov	r4,r5
    941c:	3007883a 	mov	r3,r6
    9420:	3805883a 	mov	r2,r7
    9424:	e13ffd05 	stb	r4,-12(fp)
    9428:	e0fffe05 	stb	r3,-8(fp)
    942c:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    9430:	e0bffc17 	ldw	r2,-16(fp)
    9434:	12000217 	ldw	r8,8(r2)
    9438:	e0bffc17 	ldw	r2,-16(fp)
    943c:	10800303 	ldbu	r2,12(r2)
    9440:	11403fcc 	andi	r5,r2,255
    9444:	e0bffe03 	ldbu	r2,-8(fp)
    9448:	e0ffff03 	ldbu	r3,-4(fp)
    944c:	e13ffd03 	ldbu	r4,-12(fp)
    9450:	d8000715 	stw	zero,28(sp)
    9454:	d8000615 	stw	zero,24(sp)
    9458:	d8000515 	stw	zero,20(sp)
    945c:	d8000415 	stw	zero,16(sp)
    9460:	d9000315 	stw	r4,12(sp)
    9464:	d8c00215 	stw	r3,8(sp)
    9468:	d8800115 	stw	r2,4(sp)
    946c:	00800284 	movi	r2,10
    9470:	d8800015 	stw	r2,0(sp)
    9474:	01c00844 	movi	r7,33
    9478:	000d883a 	mov	r6,zero
    947c:	4009883a 	mov	r4,r8
    9480:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9484:	e037883a 	mov	sp,fp
    9488:	dfc00117 	ldw	ra,4(sp)
    948c:	df000017 	ldw	fp,0(sp)
    9490:	dec00204 	addi	sp,sp,8
    9494:	f800283a 	ret

00009498 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    9498:	defff304 	addi	sp,sp,-52
    949c:	dfc00c15 	stw	ra,48(sp)
    94a0:	df000b15 	stw	fp,44(sp)
    94a4:	df000b04 	addi	fp,sp,44
    94a8:	e13ffd15 	stw	r4,-12(fp)
    94ac:	2807883a 	mov	r3,r5
    94b0:	3005883a 	mov	r2,r6
    94b4:	e0fffe05 	stb	r3,-8(fp)
    94b8:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    94bc:	e0bffd17 	ldw	r2,-12(fp)
    94c0:	11000217 	ldw	r4,8(r2)
    94c4:	e0bffd17 	ldw	r2,-12(fp)
    94c8:	10800303 	ldbu	r2,12(r2)
    94cc:	11403fcc 	andi	r5,r2,255
    94d0:	e0bfff03 	ldbu	r2,-4(fp)
    94d4:	e0fffe03 	ldbu	r3,-8(fp)
    94d8:	d8000715 	stw	zero,28(sp)
    94dc:	d8000615 	stw	zero,24(sp)
    94e0:	d8000515 	stw	zero,20(sp)
    94e4:	d8000415 	stw	zero,16(sp)
    94e8:	d8c00315 	stw	r3,12(sp)
    94ec:	d8000215 	stw	zero,8(sp)
    94f0:	d8800115 	stw	r2,4(sp)
    94f4:	008002c4 	movi	r2,11
    94f8:	d8800015 	stw	r2,0(sp)
    94fc:	01c00844 	movi	r7,33
    9500:	000d883a 	mov	r6,zero
    9504:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9508:	e037883a 	mov	sp,fp
    950c:	dfc00117 	ldw	ra,4(sp)
    9510:	df000017 	ldw	fp,0(sp)
    9514:	dec00204 	addi	sp,sp,8
    9518:	f800283a 	ret

0000951c <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    951c:	defff304 	addi	sp,sp,-52
    9520:	dfc00c15 	stw	ra,48(sp)
    9524:	df000b15 	stw	fp,44(sp)
    9528:	df000b04 	addi	fp,sp,44
    952c:	e13ffd15 	stw	r4,-12(fp)
    9530:	2805883a 	mov	r2,r5
    9534:	e1bfff15 	stw	r6,-4(fp)
    9538:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    953c:	e0bffd17 	ldw	r2,-12(fp)
    9540:	11000217 	ldw	r4,8(r2)
    9544:	e0bffd17 	ldw	r2,-12(fp)
    9548:	10800303 	ldbu	r2,12(r2)
    954c:	11403fcc 	andi	r5,r2,255
    9550:	e0bffe03 	ldbu	r2,-8(fp)
    9554:	d8000715 	stw	zero,28(sp)
    9558:	e0ffff17 	ldw	r3,-4(fp)
    955c:	d8c00615 	stw	r3,24(sp)
    9560:	00c00044 	movi	r3,1
    9564:	d8c00515 	stw	r3,20(sp)
    9568:	00c00044 	movi	r3,1
    956c:	d8c00415 	stw	r3,16(sp)
    9570:	d8800315 	stw	r2,12(sp)
    9574:	d8000215 	stw	zero,8(sp)
    9578:	d8000115 	stw	zero,4(sp)
    957c:	008000c4 	movi	r2,3
    9580:	d8800015 	stw	r2,0(sp)
    9584:	01c02844 	movi	r7,161
    9588:	000d883a 	mov	r6,zero
    958c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9590:	e037883a 	mov	sp,fp
    9594:	dfc00117 	ldw	ra,4(sp)
    9598:	df000017 	ldw	fp,0(sp)
    959c:	dec00204 	addi	sp,sp,8
    95a0:	f800283a 	ret

000095a4 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    95a4:	defffc04 	addi	sp,sp,-16
    95a8:	dfc00315 	stw	ra,12(sp)
    95ac:	df000215 	stw	fp,8(sp)
    95b0:	df000204 	addi	fp,sp,8
    95b4:	e13ffe15 	stw	r4,-8(fp)
    95b8:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    95bc:	e0bfff17 	ldw	r2,-4(fp)
    95c0:	10800003 	ldbu	r2,0(r2)
    95c4:	10803fcc 	andi	r2,r2,255
    95c8:	01402004 	movi	r5,128
    95cc:	1009883a 	mov	r4,r2
    95d0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    95d4:	e0bfff17 	ldw	r2,-4(fp)
    95d8:	10800043 	ldbu	r2,1(r2)
    95dc:	10803fcc 	andi	r2,r2,255
    95e0:	01402004 	movi	r5,128
    95e4:	1009883a 	mov	r4,r2
    95e8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    95ec:	e0bfff17 	ldw	r2,-4(fp)
    95f0:	10800083 	ldbu	r2,2(r2)
    95f4:	10803fcc 	andi	r2,r2,255
    95f8:	01402004 	movi	r5,128
    95fc:	1009883a 	mov	r4,r2
    9600:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    9604:	e0bfff17 	ldw	r2,-4(fp)
    9608:	108000c3 	ldbu	r2,3(r2)
    960c:	10803fcc 	andi	r2,r2,255
    9610:	01402004 	movi	r5,128
    9614:	1009883a 	mov	r4,r2
    9618:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    961c:	e0bfff17 	ldw	r2,-4(fp)
    9620:	10c00103 	ldbu	r3,4(r2)
    9624:	10800143 	ldbu	r2,5(r2)
    9628:	1004923a 	slli	r2,r2,8
    962c:	10c4b03a 	or	r2,r2,r3
    9630:	10bfffcc 	andi	r2,r2,65535
    9634:	01402004 	movi	r5,128
    9638:	1009883a 	mov	r4,r2
    963c:	00091300 	call	9130 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    9640:	e0bfff17 	ldw	r2,-4(fp)
    9644:	10800183 	ldbu	r2,6(r2)
    9648:	10803fcc 	andi	r2,r2,255
    964c:	01402004 	movi	r5,128
    9650:	1009883a 	mov	r4,r2
    9654:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
}
    9658:	0001883a 	nop
    965c:	e037883a 	mov	sp,fp
    9660:	dfc00117 	ldw	ra,4(sp)
    9664:	df000017 	ldw	fp,0(sp)
    9668:	dec00204 	addi	sp,sp,8
    966c:	f800283a 	ret

00009670 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    9670:	defffc04 	addi	sp,sp,-16
    9674:	dfc00315 	stw	ra,12(sp)
    9678:	df000215 	stw	fp,8(sp)
    967c:	df000204 	addi	fp,sp,8
    9680:	e13ffe15 	stw	r4,-8(fp)
    9684:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    9688:	e0bfff17 	ldw	r2,-4(fp)
    968c:	10800003 	ldbu	r2,0(r2)
    9690:	10803fcc 	andi	r2,r2,255
    9694:	01402004 	movi	r5,128
    9698:	1009883a 	mov	r4,r2
    969c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    96a0:	e0bfff17 	ldw	r2,-4(fp)
    96a4:	10800043 	ldbu	r2,1(r2)
    96a8:	10803fcc 	andi	r2,r2,255
    96ac:	01402004 	movi	r5,128
    96b0:	1009883a 	mov	r4,r2
    96b4:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    96b8:	e0bfff17 	ldw	r2,-4(fp)
    96bc:	10c00083 	ldbu	r3,2(r2)
    96c0:	108000c3 	ldbu	r2,3(r2)
    96c4:	1004923a 	slli	r2,r2,8
    96c8:	10c4b03a 	or	r2,r2,r3
    96cc:	10bfffcc 	andi	r2,r2,65535
    96d0:	01402004 	movi	r5,128
    96d4:	1009883a 	mov	r4,r2
    96d8:	00091300 	call	9130 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    96dc:	e0bfff17 	ldw	r2,-4(fp)
    96e0:	10800103 	ldbu	r2,4(r2)
    96e4:	10803fcc 	andi	r2,r2,255
    96e8:	01402004 	movi	r5,128
    96ec:	1009883a 	mov	r4,r2
    96f0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    96f4:	e0bfff17 	ldw	r2,-4(fp)
    96f8:	10800143 	ldbu	r2,5(r2)
    96fc:	10803fcc 	andi	r2,r2,255
    9700:	01402004 	movi	r5,128
    9704:	1009883a 	mov	r4,r2
    9708:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    970c:	e0bfff17 	ldw	r2,-4(fp)
    9710:	10800183 	ldbu	r2,6(r2)
    9714:	10803fcc 	andi	r2,r2,255
    9718:	01402004 	movi	r5,128
    971c:	1009883a 	mov	r4,r2
    9720:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    9724:	e0bfff17 	ldw	r2,-4(fp)
    9728:	10c001c3 	ldbu	r3,7(r2)
    972c:	10800203 	ldbu	r2,8(r2)
    9730:	1004923a 	slli	r2,r2,8
    9734:	10c4b03a 	or	r2,r2,r3
    9738:	10bfffcc 	andi	r2,r2,65535
    973c:	01402004 	movi	r5,128
    9740:	1009883a 	mov	r4,r2
    9744:	00091300 	call	9130 <_Z10D_PrintHexItEvT_i>
}
    9748:	0001883a 	nop
    974c:	e037883a 	mov	sp,fp
    9750:	dfc00117 	ldw	ra,4(sp)
    9754:	df000017 	ldw	fp,0(sp)
    9758:	dec00204 	addi	sp,sp,8
    975c:	f800283a 	ret

00009760 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    9760:	defffd04 	addi	sp,sp,-12
    9764:	dfc00215 	stw	ra,8(sp)
    9768:	df000115 	stw	fp,4(sp)
    976c:	df000104 	addi	fp,sp,4
    9770:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    9774:	010000f4 	movhi	r4,3
    9778:	21247004 	addi	r4,r4,-28224
    977c:	00100140 	call	10014 <puts>
	vbusState = 0;
    9780:	d0324345 	stb	zero,-14067(gp)
};
    9784:	0001883a 	nop
    9788:	e037883a 	mov	sp,fp
    978c:	dfc00117 	ldw	ra,4(sp)
    9790:	df000017 	ldw	fp,0(sp)
    9794:	dec00204 	addi	sp,sp,8
    9798:	f800283a 	ret

0000979c <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    979c:	defffe04 	addi	sp,sp,-8
    97a0:	df000115 	stw	fp,4(sp)
    97a4:	df000104 	addi	fp,sp,4
    97a8:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    97ac:	d0b24343 	ldbu	r2,-14067(gp)
};
    97b0:	e037883a 	mov	sp,fp
    97b4:	df000017 	ldw	fp,0(sp)
    97b8:	dec00104 	addi	sp,sp,4
    97bc:	f800283a 	ret

000097c0 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    97c0:	defff704 	addi	sp,sp,-36
    97c4:	dfc00815 	stw	ra,32(sp)
    97c8:	df000715 	stw	fp,28(sp)
    97cc:	df000704 	addi	fp,sp,28
    97d0:	e13ffd15 	stw	r4,-12(fp)
    97d4:	2807883a 	mov	r3,r5
    97d8:	3005883a 	mov	r2,r6
    97dc:	e0fffe05 	stb	r3,-8(fp)
    97e0:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    97e4:	e03ffc45 	stb	zero,-15(fp)
    97e8:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    97ec:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    97f0:	e0bffe03 	ldbu	r2,-8(fp)
    97f4:	10800084 	addi	r2,r2,2
    97f8:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    97fc:	e0bfff03 	ldbu	r2,-4(fp)
    9800:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    9804:	e0fffc44 	addi	r3,fp,-15
    9808:	d8000215 	stw	zero,8(sp)
    980c:	e0bffcc4 	addi	r2,fp,-13
    9810:	d8800115 	stw	r2,4(sp)
    9814:	d8000015 	stw	zero,0(sp)
    9818:	180f883a 	mov	r7,r3
    981c:	01800084 	movi	r6,2
    9820:	000b883a 	mov	r5,zero
    9824:	01010034 	movhi	r4,1024
    9828:	21044804 	addi	r4,r4,4384
    982c:	00232680 	call	23268 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    9830:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    9834:	0001883a 	nop
    9838:	e037883a 	mov	sp,fp
    983c:	dfc00117 	ldw	ra,4(sp)
    9840:	df000017 	ldw	fp,0(sp)
    9844:	dec00204 	addi	sp,sp,8
    9848:	f800283a 	ret

0000984c <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    984c:	defff304 	addi	sp,sp,-52
    9850:	dfc00c15 	stw	ra,48(sp)
    9854:	df000b15 	stw	fp,44(sp)
    9858:	dc000a15 	stw	r16,40(sp)
    985c:	df000b04 	addi	fp,sp,44
    9860:	e13ffb15 	stw	r4,-20(fp)
    9864:	3009883a 	mov	r4,r6
    9868:	e1fffe15 	stw	r7,-8(fp)
    986c:	e17ffc05 	stb	r5,-16(fp)
    9870:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9874:	d809883a 	mov	r4,sp
    9878:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    987c:	e13ffd03 	ldbu	r4,-12(fp)
    9880:	e13ff815 	stw	r4,-32(fp)
    9884:	200b883a 	mov	r5,r4
    9888:	29400044 	addi	r5,r5,1
    988c:	2819883a 	mov	r12,r5
    9890:	001b883a 	mov	r13,zero
    9894:	600ad77a 	srli	r5,r12,29
    9898:	681290fa 	slli	r9,r13,3
    989c:	2a52b03a 	or	r9,r5,r9
    98a0:	601090fa 	slli	r8,r12,3
    98a4:	200b883a 	mov	r5,r4
    98a8:	29400044 	addi	r5,r5,1
    98ac:	2815883a 	mov	r10,r5
    98b0:	0017883a 	mov	r11,zero
    98b4:	500ad77a 	srli	r5,r10,29
    98b8:	580690fa 	slli	r3,r11,3
    98bc:	28c6b03a 	or	r3,r5,r3
    98c0:	500490fa 	slli	r2,r10,3
    98c4:	2005883a 	mov	r2,r4
    98c8:	10800044 	addi	r2,r2,1
    98cc:	108000c4 	addi	r2,r2,3
    98d0:	1004d0ba 	srli	r2,r2,2
    98d4:	1085883a 	add	r2,r2,r2
    98d8:	1085883a 	add	r2,r2,r2
    98dc:	d8b7c83a 	sub	sp,sp,r2
    98e0:	d8800304 	addi	r2,sp,12
    98e4:	1005883a 	mov	r2,r2
    98e8:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    98ec:	e0bffc03 	ldbu	r2,-16(fp)
    98f0:	10800084 	addi	r2,r2,2
    98f4:	1007883a 	mov	r3,r2
    98f8:	e0bff917 	ldw	r2,-28(fp)
    98fc:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    9900:	e0bff917 	ldw	r2,-28(fp)
    9904:	10800044 	addi	r2,r2,1
    9908:	e0fffd03 	ldbu	r3,-12(fp)
    990c:	180d883a 	mov	r6,r3
    9910:	e17ffe17 	ldw	r5,-8(fp)
    9914:	1009883a 	mov	r4,r2
    9918:	000fc580 	call	fc58 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    991c:	e0bffd03 	ldbu	r2,-12(fp)
    9920:	10800044 	addi	r2,r2,1
    9924:	1009883a 	mov	r4,r2
    9928:	e0fff917 	ldw	r3,-28(fp)
    992c:	d8000215 	stw	zero,8(sp)
    9930:	e0bffa44 	addi	r2,fp,-23
    9934:	d8800115 	stw	r2,4(sp)
    9938:	d8000015 	stw	zero,0(sp)
    993c:	180f883a 	mov	r7,r3
    9940:	200d883a 	mov	r6,r4
    9944:	000b883a 	mov	r5,zero
    9948:	01010034 	movhi	r4,1024
    994c:	21044804 	addi	r4,r4,4384
    9950:	00232680 	call	23268 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    9954:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9958:	e0bffd03 	ldbu	r2,-12(fp)
    995c:	e0fffe17 	ldw	r3,-8(fp)
    9960:	1885883a 	add	r2,r3,r2
    9964:	8037883a 	mov	sp,r16
}
    9968:	e6ffff04 	addi	sp,fp,-4
    996c:	dfc00217 	ldw	ra,8(sp)
    9970:	df000117 	ldw	fp,4(sp)
    9974:	dc000017 	ldw	r16,0(sp)
    9978:	dec00304 	addi	sp,sp,12
    997c:	f800283a 	ret

00009980 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    9980:	defffc04 	addi	sp,sp,-16
    9984:	dfc00315 	stw	ra,12(sp)
    9988:	df000215 	stw	fp,8(sp)
    998c:	df000204 	addi	fp,sp,8
    9990:	e13ffe15 	stw	r4,-8(fp)
    9994:	2805883a 	mov	r2,r5
    9998:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    999c:	010000f4 	movhi	r4,3
    99a0:	21247604 	addi	r4,r4,-28200
    99a4:	00100140 	call	10014 <puts>
	regWr(rIOPINS1, data);
    99a8:	e0bfff03 	ldbu	r2,-4(fp)
    99ac:	100d883a 	mov	r6,r2
    99b0:	01402804 	movi	r5,160
    99b4:	e13ffe17 	ldw	r4,-8(fp)
    99b8:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    99bc:	e0bfff03 	ldbu	r2,-4(fp)
    99c0:	1005d13a 	srai	r2,r2,4
    99c4:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    99c8:	e0bfff03 	ldbu	r2,-4(fp)
    99cc:	100d883a 	mov	r6,r2
    99d0:	01402a04 	movi	r5,168
    99d4:	e13ffe17 	ldw	r4,-8(fp)
    99d8:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
	return;
    99dc:	0001883a 	nop
}
    99e0:	e037883a 	mov	sp,fp
    99e4:	dfc00117 	ldw	ra,4(sp)
    99e8:	df000017 	ldw	fp,0(sp)
    99ec:	dec00204 	addi	sp,sp,8
    99f0:	f800283a 	ret

000099f4 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    99f4:	defff804 	addi	sp,sp,-32
    99f8:	dfc00715 	stw	ra,28(sp)
    99fc:	df000615 	stw	fp,24(sp)
    9a00:	df000604 	addi	fp,sp,24
    9a04:	e13ffe15 	stw	r4,-8(fp)
    9a08:	2805883a 	mov	r2,r5
    9a0c:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9a10:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9a14:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9a18:	e0bfff03 	ldbu	r2,-4(fp)
    9a1c:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9a20:	e0fffd44 	addi	r3,fp,-11
    9a24:	d8000215 	stw	zero,8(sp)
    9a28:	e0bffd84 	addi	r2,fp,-10
    9a2c:	d8800115 	stw	r2,4(sp)
    9a30:	00800044 	movi	r2,1
    9a34:	d8800015 	stw	r2,0(sp)
    9a38:	180f883a 	mov	r7,r3
    9a3c:	01800044 	movi	r6,1
    9a40:	000b883a 	mov	r5,zero
    9a44:	01010034 	movhi	r4,1024
    9a48:	21044804 	addi	r4,r4,4384
    9a4c:	00232680 	call	23268 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    9a50:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    9a54:	e0bffd83 	ldbu	r2,-10(fp)
}
    9a58:	e037883a 	mov	sp,fp
    9a5c:	dfc00117 	ldw	ra,4(sp)
    9a60:	df000017 	ldw	fp,0(sp)
    9a64:	dec00204 	addi	sp,sp,8
    9a68:	f800283a 	ret

00009a6c <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9a6c:	defff604 	addi	sp,sp,-40
    9a70:	dfc00915 	stw	ra,36(sp)
    9a74:	df000815 	stw	fp,32(sp)
    9a78:	df000804 	addi	fp,sp,32
    9a7c:	e13ffc15 	stw	r4,-16(fp)
    9a80:	2807883a 	mov	r3,r5
    9a84:	3005883a 	mov	r2,r6
    9a88:	e1ffff15 	stw	r7,-4(fp)
    9a8c:	e0fffd05 	stb	r3,-12(fp)
    9a90:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9a94:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9a98:	e0bffd03 	ldbu	r2,-12(fp)
    9a9c:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9aa0:	e0bffe03 	ldbu	r2,-8(fp)
    9aa4:	e13ffb44 	addi	r4,fp,-19
    9aa8:	d8000215 	stw	zero,8(sp)
    9aac:	e0ffff17 	ldw	r3,-4(fp)
    9ab0:	d8c00115 	stw	r3,4(sp)
    9ab4:	d8800015 	stw	r2,0(sp)
    9ab8:	200f883a 	mov	r7,r4
    9abc:	01800044 	movi	r6,1
    9ac0:	000b883a 	mov	r5,zero
    9ac4:	01010034 	movhi	r4,1024
    9ac8:	21044804 	addi	r4,r4,4384
    9acc:	00232680 	call	23268 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    9ad0:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    9ad4:	e0bffe03 	ldbu	r2,-8(fp)
    9ad8:	e0ffff17 	ldw	r3,-4(fp)
    9adc:	1885883a 	add	r2,r3,r2
}
    9ae0:	e037883a 	mov	sp,fp
    9ae4:	dfc00117 	ldw	ra,4(sp)
    9ae8:	df000017 	ldw	fp,0(sp)
    9aec:	dec00204 	addi	sp,sp,8
    9af0:	f800283a 	ret

00009af4 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    9af4:	defffc04 	addi	sp,sp,-16
    9af8:	dfc00315 	stw	ra,12(sp)
    9afc:	df000215 	stw	fp,8(sp)
    9b00:	df000204 	addi	fp,sp,8
    9b04:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    9b08:	010000f4 	movhi	r4,3
    9b0c:	21247a04 	addi	r4,r4,-28184
    9b10:	00100140 	call	10014 <puts>
	uint8_t gpin = 0;
    9b14:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    9b18:	01402a04 	movi	r5,168
    9b1c:	e13fff17 	ldw	r4,-4(fp)
    9b20:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    9b24:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    9b28:	e0fffe03 	ldbu	r3,-8(fp)
    9b2c:	00bffc04 	movi	r2,-16
    9b30:	1884703a 	and	r2,r3,r2
    9b34:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    9b38:	01402804 	movi	r5,160
    9b3c:	e13fff17 	ldw	r4,-4(fp)
    9b40:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    9b44:	10803fcc 	andi	r2,r2,255
    9b48:	1005d13a 	srai	r2,r2,4
    9b4c:	1007883a 	mov	r3,r2
    9b50:	e0bffe03 	ldbu	r2,-8(fp)
    9b54:	1884b03a 	or	r2,r3,r2
    9b58:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    9b5c:	e0bffe03 	ldbu	r2,-8(fp)
}
    9b60:	e037883a 	mov	sp,fp
    9b64:	dfc00117 	ldw	ra,4(sp)
    9b68:	df000017 	ldw	fp,0(sp)
    9b6c:	dec00204 	addi	sp,sp,8
    9b70:	f800283a 	ret

00009b74 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    9b74:	defffc04 	addi	sp,sp,-16
    9b78:	dfc00315 	stw	ra,12(sp)
    9b7c:	df000215 	stw	fp,8(sp)
    9b80:	df000204 	addi	fp,sp,8
    9b84:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    9b88:	010000f4 	movhi	r4,3
    9b8c:	21247e04 	addi	r4,r4,-28168
    9b90:	00100140 	call	10014 <puts>
	uint8_t gpout = 0;
    9b94:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    9b98:	01402804 	movi	r5,160
    9b9c:	e13fff17 	ldw	r4,-4(fp)
    9ba0:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    9ba4:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    9ba8:	e0bffe03 	ldbu	r2,-8(fp)
    9bac:	108003cc 	andi	r2,r2,15
    9bb0:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    9bb4:	01402a04 	movi	r5,168
    9bb8:	e13fff17 	ldw	r4,-4(fp)
    9bbc:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    9bc0:	10803fcc 	andi	r2,r2,255
    9bc4:	1004913a 	slli	r2,r2,4
    9bc8:	1007883a 	mov	r3,r2
    9bcc:	e0bffe03 	ldbu	r2,-8(fp)
    9bd0:	1884b03a 	or	r2,r3,r2
    9bd4:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    9bd8:	e0bffe03 	ldbu	r2,-8(fp)
}
    9bdc:	e037883a 	mov	sp,fp
    9be0:	dfc00117 	ldw	ra,4(sp)
    9be4:	df000017 	ldw	fp,0(sp)
    9be8:	dec00204 	addi	sp,sp,8
    9bec:	f800283a 	ret

00009bf0 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    9bf0:	defffc04 	addi	sp,sp,-16
    9bf4:	dfc00315 	stw	ra,12(sp)
    9bf8:	df000215 	stw	fp,8(sp)
    9bfc:	df000204 	addi	fp,sp,8
    9c00:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    9c04:	010000f4 	movhi	r4,3
    9c08:	21248404 	addi	r4,r4,-28144
    9c0c:	00100140 	call	10014 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    9c10:	0007883a 	mov	r3,zero
    9c14:	00810034 	movhi	r2,1024
    9c18:	10847404 	addi	r2,r2,4560
    9c1c:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    9c20:	010003f4 	movhi	r4,15
    9c24:	21109004 	addi	r4,r4,16960
    9c28:	002099c0 	call	2099c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    9c2c:	00c00044 	movi	r3,1
    9c30:	00810034 	movhi	r2,1024
    9c34:	10847404 	addi	r2,r2,4560
    9c38:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9c3c:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    9c40:	01800804 	movi	r6,32
    9c44:	01401e04 	movi	r5,120
    9c48:	e13fff17 	ldw	r4,-4(fp)
    9c4c:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    9c50:	000d883a 	mov	r6,zero
    9c54:	01401e04 	movi	r5,120
    9c58:	e13fff17 	ldw	r4,-4(fp)
    9c5c:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    9c60:	e0bffe0b 	ldhu	r2,-8(fp)
    9c64:	10800044 	addi	r2,r2,1
    9c68:	e0bffe0d 	sth	r2,-8(fp)
    9c6c:	e0bffe0b 	ldhu	r2,-8(fp)
    9c70:	1004c03a 	cmpne	r2,r2,zero
    9c74:	10803fcc 	andi	r2,r2,255
    9c78:	10000a26 	beq	r2,zero,9ca4 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    9c7c:	01401a04 	movi	r5,104
    9c80:	e13fff17 	ldw	r4,-4(fp)
    9c84:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    9c88:	10803fcc 	andi	r2,r2,255
    9c8c:	1080004c 	andi	r2,r2,1
    9c90:	1004c03a 	cmpne	r2,r2,zero
    9c94:	10803fcc 	andi	r2,r2,255
    9c98:	1000011e 	bne	r2,zero,9ca0 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    9c9c:	003ff006 	br	9c60 <__alt_data_end+0xfc009c60>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    9ca0:	0001883a 	nop
		}
	}
	return ( i);
    9ca4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    9ca8:	e037883a 	mov	sp,fp
    9cac:	dfc00117 	ldw	ra,4(sp)
    9cb0:	df000017 	ldw	fp,0(sp)
    9cb4:	dec00204 	addi	sp,sp,8
    9cb8:	f800283a 	ret

00009cbc <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    9cbc:	defffe04 	addi	sp,sp,-8
    9cc0:	df000115 	stw	fp,4(sp)
    9cc4:	df000104 	addi	fp,sp,4
    9cc8:	2005883a 	mov	r2,r4
    9ccc:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    9cd0:	00800044 	movi	r2,1
}
    9cd4:	e037883a 	mov	sp,fp
    9cd8:	df000017 	ldw	fp,0(sp)
    9cdc:	dec00104 	addi	sp,sp,4
    9ce0:	f800283a 	ret

00009ce4 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    9ce4:	defffd04 	addi	sp,sp,-12
    9ce8:	dfc00215 	stw	ra,8(sp)
    9cec:	df000115 	stw	fp,4(sp)
    9cf0:	df000104 	addi	fp,sp,4
    9cf4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    9cf8:	010000f4 	movhi	r4,3
    9cfc:	21248804 	addi	r4,r4,-28128
    9d00:	00100140 	call	10014 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9d04:	01800604 	movi	r6,24
    9d08:	01402204 	movi	r5,136
    9d0c:	e13fff17 	ldw	r4,-4(fp)
    9d10:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9d14:	e13fff17 	ldw	r4,-4(fp)
    9d18:	0009bf00 	call	9bf0 <_ZN8MAX3421e5resetEv>
    9d1c:	10bfffcc 	andi	r2,r2,65535
    9d20:	1005003a 	cmpeq	r2,r2,zero
    9d24:	10803fcc 	andi	r2,r2,255
    9d28:	10000226 	beq	r2,zero,9d34 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    9d2c:	00bfffc4 	movi	r2,-1
    9d30:	00002006 	br	9db4 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9d34:	01803044 	movi	r6,193
    9d38:	01403604 	movi	r5,216
    9d3c:	e13fff17 	ldw	r4,-4(fp)
    9d40:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9d44:	01801804 	movi	r6,96
    9d48:	01403404 	movi	r5,208
    9d4c:	e13fff17 	ldw	r4,-4(fp)
    9d50:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9d54:	01800104 	movi	r6,4
    9d58:	01403a04 	movi	r5,232
    9d5c:	e13fff17 	ldw	r4,-4(fp)
    9d60:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9d64:	01403a04 	movi	r5,232
    9d68:	e13fff17 	ldw	r4,-4(fp)
    9d6c:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    9d70:	10803fcc 	andi	r2,r2,255
    9d74:	1080010c 	andi	r2,r2,4
    9d78:	1005003a 	cmpeq	r2,r2,zero
    9d7c:	10803fcc 	andi	r2,r2,255
    9d80:	10000126 	beq	r2,zero,9d88 <_ZN8MAX3421e4InitEv+0xa4>
    9d84:	003ff706 	br	9d64 <__alt_data_end+0xfc009d64>

	busprobe(); //check if anything is connected
    9d88:	e13fff17 	ldw	r4,-4(fp)
    9d8c:	0009ee00 	call	9ee0 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9d90:	01800804 	movi	r6,32
    9d94:	01403204 	movi	r5,200
    9d98:	e13fff17 	ldw	r4,-4(fp)
    9d9c:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9da0:	01800044 	movi	r6,1
    9da4:	01402004 	movi	r5,128
    9da8:	e13fff17 	ldw	r4,-4(fp)
    9dac:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9db0:	0005883a 	mov	r2,zero
}
    9db4:	e037883a 	mov	sp,fp
    9db8:	dfc00117 	ldw	ra,4(sp)
    9dbc:	df000017 	ldw	fp,0(sp)
    9dc0:	dec00204 	addi	sp,sp,8
    9dc4:	f800283a 	ret

00009dc8 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    9dc8:	defffc04 	addi	sp,sp,-16
    9dcc:	dfc00315 	stw	ra,12(sp)
    9dd0:	df000215 	stw	fp,8(sp)
    9dd4:	df000204 	addi	fp,sp,8
    9dd8:	e13ffe15 	stw	r4,-8(fp)
    9ddc:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9de0:	010000f4 	movhi	r4,3
    9de4:	21248c04 	addi	r4,r4,-28112
    9de8:	00100140 	call	10014 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9dec:	01800644 	movi	r6,25
    9df0:	01402204 	movi	r5,136
    9df4:	e13ffe17 	ldw	r4,-8(fp)
    9df8:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9dfc:	e13ffe17 	ldw	r4,-8(fp)
    9e00:	0009bf00 	call	9bf0 <_ZN8MAX3421e5resetEv>
    9e04:	10bfffcc 	andi	r2,r2,65535
    9e08:	1005003a 	cmpeq	r2,r2,zero
    9e0c:	10803fcc 	andi	r2,r2,255
    9e10:	10000226 	beq	r2,zero,9e1c <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9e14:	00bfffc4 	movi	r2,-1
    9e18:	00002c06 	br	9ecc <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9e1c:	e0bfff17 	ldw	r2,-4(fp)
    9e20:	1080fa08 	cmpgei	r2,r2,1000
    9e24:	1000021e 	bne	r2,zero,9e30 <_ZN8MAX3421e4InitEi+0x68>
    9e28:	0080fa04 	movi	r2,1000
    9e2c:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9e30:	e0bfff17 	ldw	r2,-4(fp)
    9e34:	1009883a 	mov	r4,r2
    9e38:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9e3c:	01803044 	movi	r6,193
    9e40:	01403604 	movi	r5,216
    9e44:	e13ffe17 	ldw	r4,-8(fp)
    9e48:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9e4c:	01801804 	movi	r6,96
    9e50:	01403404 	movi	r5,208
    9e54:	e13ffe17 	ldw	r4,-8(fp)
    9e58:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9e5c:	01800104 	movi	r6,4
    9e60:	01403a04 	movi	r5,232
    9e64:	e13ffe17 	ldw	r4,-8(fp)
    9e68:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9e6c:	01403a04 	movi	r5,232
    9e70:	e13ffe17 	ldw	r4,-8(fp)
    9e74:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    9e78:	10803fcc 	andi	r2,r2,255
    9e7c:	1080010c 	andi	r2,r2,4
    9e80:	1005003a 	cmpeq	r2,r2,zero
    9e84:	10803fcc 	andi	r2,r2,255
    9e88:	10000126 	beq	r2,zero,9e90 <_ZN8MAX3421e4InitEi+0xc8>
    9e8c:	003ff706 	br	9e6c <__alt_data_end+0xfc009e6c>

	busprobe(); //check if anything is connected
    9e90:	e13ffe17 	ldw	r4,-8(fp)
    9e94:	0009ee00 	call	9ee0 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9e98:	01800804 	movi	r6,32
    9e9c:	01403204 	movi	r5,200
    9ea0:	e13ffe17 	ldw	r4,-8(fp)
    9ea4:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9ea8:	01800044 	movi	r6,1
    9eac:	01402004 	movi	r5,128
    9eb0:	e13ffe17 	ldw	r4,-8(fp)
    9eb4:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9eb8:	01800604 	movi	r6,24
    9ebc:	01402204 	movi	r5,136
    9ec0:	e13ffe17 	ldw	r4,-8(fp)
    9ec4:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9ec8:	0005883a 	mov	r2,zero
}
    9ecc:	e037883a 	mov	sp,fp
    9ed0:	dfc00117 	ldw	ra,4(sp)
    9ed4:	df000017 	ldw	fp,0(sp)
    9ed8:	dec00204 	addi	sp,sp,8
    9edc:	f800283a 	ret

00009ee0 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9ee0:	defffc04 	addi	sp,sp,-16
    9ee4:	dfc00315 	stw	ra,12(sp)
    9ee8:	df000215 	stw	fp,8(sp)
    9eec:	df000204 	addi	fp,sp,8
    9ef0:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9ef4:	010000f4 	movhi	r4,3
    9ef8:	21249204 	addi	r4,r4,-28088
    9efc:	00100140 	call	10014 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9f00:	01403e04 	movi	r5,248
    9f04:	e13fff17 	ldw	r4,-4(fp)
    9f08:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    9f0c:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    9f10:	e0fffe03 	ldbu	r3,-8(fp)
    9f14:	00bff004 	movi	r2,-64
    9f18:	1884703a 	and	r2,r3,r2
    9f1c:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    9f20:	e0bffe03 	ldbu	r2,-8(fp)
    9f24:	10c01020 	cmpeqi	r3,r2,64
    9f28:	1800251e 	bne	r3,zero,9fc0 <_ZN8MAX3421e8busprobeEv+0xe0>
    9f2c:	10c01048 	cmpgei	r3,r2,65
    9f30:	1800021e 	bne	r3,zero,9f3c <_ZN8MAX3421e8busprobeEv+0x5c>
    9f34:	10003b26 	beq	r2,zero,a024 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9f38:	00004006 	br	a03c <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    9f3c:	10c02020 	cmpeqi	r3,r2,128
    9f40:	1800031e 	bne	r3,zero,9f50 <_ZN8MAX3421e8busprobeEv+0x70>
    9f44:	10803020 	cmpeqi	r2,r2,192
    9f48:	1000331e 	bne	r2,zero,a018 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9f4c:	00003b06 	br	a03c <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9f50:	01403604 	movi	r5,216
    9f54:	e13fff17 	ldw	r4,-4(fp)
    9f58:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    9f5c:	10803fcc 	andi	r2,r2,255
    9f60:	1080008c 	andi	r2,r2,2
    9f64:	1005003a 	cmpeq	r2,r2,zero
    9f68:	10803fcc 	andi	r2,r2,255
    9f6c:	10000a26 	beq	r2,zero,9f98 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    9f70:	010000f4 	movhi	r4,3
    9f74:	21249704 	addi	r4,r4,-28068
    9f78:	00100140 	call	10014 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9f7c:	01803244 	movi	r6,201
    9f80:	01403604 	movi	r5,216
    9f84:	e13fff17 	ldw	r4,-4(fp)
    9f88:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9f8c:	00800084 	movi	r2,2
    9f90:	d0b24345 	stb	r2,-14067(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    9f94:	00002906 	br	a03c <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    9f98:	010000f4 	movhi	r4,3
    9f9c:	21249e04 	addi	r4,r4,-28040
    9fa0:	00100140 	call	10014 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9fa4:	018032c4 	movi	r6,203
    9fa8:	01403604 	movi	r5,216
    9fac:	e13fff17 	ldw	r4,-4(fp)
    9fb0:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9fb4:	008000c4 	movi	r2,3
    9fb8:	d0b24345 	stb	r2,-14067(gp)
			}
			break;
    9fbc:	00001f06 	br	a03c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9fc0:	01403604 	movi	r5,216
    9fc4:	e13fff17 	ldw	r4,-4(fp)
    9fc8:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    9fcc:	10803fcc 	andi	r2,r2,255
    9fd0:	1080008c 	andi	r2,r2,2
    9fd4:	1005003a 	cmpeq	r2,r2,zero
    9fd8:	10803fcc 	andi	r2,r2,255
    9fdc:	10000726 	beq	r2,zero,9ffc <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9fe0:	018032c4 	movi	r6,203
    9fe4:	01403604 	movi	r5,216
    9fe8:	e13fff17 	ldw	r4,-4(fp)
    9fec:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9ff0:	008000c4 	movi	r2,3
    9ff4:	d0b24345 	stb	r2,-14067(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    9ff8:	00001006 	br	a03c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9ffc:	01803244 	movi	r6,201
    a000:	01403604 	movi	r5,216
    a004:	e13fff17 	ldw	r4,-4(fp)
    a008:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    a00c:	00800084 	movi	r2,2
    a010:	d0b24345 	stb	r2,-14067(gp)
			}
			break;
    a014:	00000906 	br	a03c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    a018:	00800044 	movi	r2,1
    a01c:	d0b24345 	stb	r2,-14067(gp)
			break;
    a020:	00000606 	br	a03c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    a024:	01803444 	movi	r6,209
    a028:	01403604 	movi	r5,216
    a02c:	e13fff17 	ldw	r4,-4(fp)
    a030:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    a034:	d0324345 	stb	zero,-14067(gp)
			break;
    a038:	0001883a 	nop
	}//end switch( bus_sample )
}
    a03c:	0001883a 	nop
    a040:	e037883a 	mov	sp,fp
    a044:	dfc00117 	ldw	ra,4(sp)
    a048:	df000017 	ldw	fp,0(sp)
    a04c:	dec00204 	addi	sp,sp,8
    a050:	f800283a 	ret

0000a054 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    a054:	defffc04 	addi	sp,sp,-16
    a058:	dfc00315 	stw	ra,12(sp)
    a05c:	df000215 	stw	fp,8(sp)
    a060:	df000204 	addi	fp,sp,8
    a064:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    a068:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    a06c:	00810034 	movhi	r2,1024
    a070:	10847c04 	addi	r2,r2,4592
    a074:	10800003 	ldbu	r2,0(r2)
    a078:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    a07c:	00810034 	movhi	r2,1024
    a080:	10847c04 	addi	r2,r2,4592
    a084:	10800037 	ldwio	r2,0(r2)
    a088:	1005003a 	cmpeq	r2,r2,zero
    a08c:	10803fcc 	andi	r2,r2,255
    a090:	10000326 	beq	r2,zero,a0a0 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    a094:	e13fff17 	ldw	r4,-4(fp)
    a098:	000a0b80 	call	a0b8 <_ZN8MAX3421e10IntHandlerEv>
    a09c:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    a0a0:	e0bffe03 	ldbu	r2,-8(fp)
}
    a0a4:	e037883a 	mov	sp,fp
    a0a8:	dfc00117 	ldw	ra,4(sp)
    a0ac:	df000017 	ldw	fp,0(sp)
    a0b0:	dec00204 	addi	sp,sp,8
    a0b4:	f800283a 	ret

0000a0b8 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    a0b8:	defffc04 	addi	sp,sp,-16
    a0bc:	dfc00315 	stw	ra,12(sp)
    a0c0:	df000215 	stw	fp,8(sp)
    a0c4:	df000204 	addi	fp,sp,8
    a0c8:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    a0cc:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    a0d0:	01403204 	movi	r5,200
    a0d4:	e13fff17 	ldw	r4,-4(fp)
    a0d8:	00099f40 	call	99f4 <_ZN8MAX3421e5regRdEh>
    a0dc:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    a0e0:	e0bffe43 	ldbu	r2,-7(fp)
    a0e4:	1080080c 	andi	r2,r2,32
    a0e8:	10000526 	beq	r2,zero,a100 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    a0ec:	e13fff17 	ldw	r4,-4(fp)
    a0f0:	0009ee00 	call	9ee0 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    a0f4:	e0bffe03 	ldbu	r2,-8(fp)
    a0f8:	10800814 	ori	r2,r2,32
    a0fc:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    a100:	e0bffe03 	ldbu	r2,-8(fp)
    a104:	100d883a 	mov	r6,r2
    a108:	01403204 	movi	r5,200
    a10c:	e13fff17 	ldw	r4,-4(fp)
    a110:	00097c00 	call	97c0 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    a114:	e0bffe03 	ldbu	r2,-8(fp)
}
    a118:	e037883a 	mov	sp,fp
    a11c:	dfc00117 	ldw	ra,4(sp)
    a120:	df000017 	ldw	fp,0(sp)
    a124:	dec00204 	addi	sp,sp,8
    a128:	f800283a 	ret

0000a12c <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    a12c:	defffe04 	addi	sp,sp,-8
    a130:	df000115 	stw	fp,4(sp)
    a134:	df000104 	addi	fp,sp,4
    a138:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    a13c:	0005883a 	mov	r2,zero
}
    a140:	e037883a 	mov	sp,fp
    a144:	df000017 	ldw	fp,0(sp)
    a148:	dec00104 	addi	sp,sp,4
    a14c:	f800283a 	ret

0000a150 <_Z6onInitv>:
bool ped_flip = 0;

void MIDI_poll();

void onInit()
{
    a150:	defff804 	addi	sp,sp,-32
    a154:	dfc00715 	stw	ra,28(sp)
    a158:	df000615 	stw	fp,24(sp)
    a15c:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    a160:	010000f4 	movhi	r4,3
    a164:	2107c704 	addi	r4,r4,7964
    a168:	000ae240 	call	ae24 <_ZN9USBH_MIDI8idVendorEv>
    a16c:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    a170:	010000f4 	movhi	r4,3
    a174:	2107c704 	addi	r4,r4,7964
    a178:	000ae4c0 	call	ae4c <_ZN9USBH_MIDI9idProductEv>
    a17c:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    a180:	e0fffa0b 	ldhu	r3,-24(fp)
    a184:	e13ffa8b 	ldhu	r4,-22(fp)
    a188:	e0bffb04 	addi	r2,fp,-20
    a18c:	200f883a 	mov	r7,r4
    a190:	180d883a 	mov	r6,r3
    a194:	014000f4 	movhi	r5,3
    a198:	296cda04 	addi	r5,r5,-19608
    a19c:	1009883a 	mov	r4,r2
    a1a0:	00103d80 	call	103d8 <sprintf>
  printf("%s\n", buf);
    a1a4:	e0bffb04 	addi	r2,fp,-20
    a1a8:	1009883a 	mov	r4,r2
    a1ac:	00100140 	call	10014 <puts>
}
    a1b0:	0001883a 	nop
    a1b4:	e037883a 	mov	sp,fp
    a1b8:	dfc00117 	ldw	ra,4(sp)
    a1bc:	df000017 	ldw	fp,0(sp)
    a1c0:	dec00204 	addi	sp,sp,8
    a1c4:	f800283a 	ret

0000a1c8 <_Z10MIDI_setupv>:

void MIDI_setup()
{
    a1c8:	defffe04 	addi	sp,sp,-8
    a1cc:	dfc00115 	stw	ra,4(sp)
    a1d0:	df000015 	stw	fp,0(sp)
    a1d4:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    a1d8:	010000f4 	movhi	r4,3
    a1dc:	21079804 	addi	r4,r4,7776
    a1e0:	0009ce40 	call	9ce4 <_ZN8MAX3421e4InitEv>
    a1e4:	10803fcc 	andi	r2,r2,255
    a1e8:	1080201c 	xori	r2,r2,128
    a1ec:	10bfe004 	addi	r2,r2,-128
    a1f0:	10bfffe0 	cmpeqi	r2,r2,-1
    a1f4:	10803fcc 	andi	r2,r2,255
    a1f8:	10000326 	beq	r2,zero,a208 <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    a1fc:	010000f4 	movhi	r4,3
    a200:	212cdf04 	addi	r4,r4,-19588
    a204:	000fef80 	call	fef8 <printf>
	printf ("USB Started\n\r");
    a208:	010000f4 	movhi	r4,3
    a20c:	212ce104 	addi	r4,r4,-19580
    a210:	000fef80 	call	fef8 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    a214:	01400074 	movhi	r5,1
    a218:	29685404 	addi	r5,r5,-24240
    a21c:	010000f4 	movhi	r4,3
    a220:	2107c704 	addi	r4,r4,7964
    a224:	000ae740 	call	ae74 <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    a228:	0001883a 	nop
    a22c:	e037883a 	mov	sp,fp
    a230:	dfc00117 	ldw	ra,4(sp)
    a234:	df000017 	ldw	fp,0(sp)
    a238:	dec00204 	addi	sp,sp,8
    a23c:	f800283a 	ret

0000a240 <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to synthesizer
void MIDI_poll()
{
    a240:	deffe504 	addi	sp,sp,-108
    a244:	dfc01a15 	stw	ra,104(sp)
    a248:	df001915 	stw	fp,100(sp)
    a24c:	df001904 	addi	fp,sp,100
  uint8_t channel, ctrl, par;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    a250:	e0ffeec4 	addi	r3,fp,-69
    a254:	e0bfff04 	addi	r2,fp,-4
    a258:	180d883a 	mov	r6,r3
    a25c:	100b883a 	mov	r5,r2
    a260:	010000f4 	movhi	r4,3
    a264:	2107c704 	addi	r4,r4,7964
    a268:	0007d140 	call	7d14 <_ZN9USBH_MIDI8RecvDataEPtPh>
    a26c:	10803fcc 	andi	r2,r2,255
    a270:	1005003a 	cmpeq	r2,r2,zero
    a274:	10803fcc 	andi	r2,r2,255
    a278:	10025926 	beq	r2,zero,abe0 <_Z9MIDI_pollv+0x9a0>
		channel = (bufMidi[1] & 0x0F);
    a27c:	e0bfef03 	ldbu	r2,-68(fp)
    a280:	108003cc 	andi	r2,r2,15
    a284:	e0bfee05 	stb	r2,-72(fp)
		ctrl = bufMidi[2];
    a288:	e0bfef43 	ldbu	r2,-67(fp)
    a28c:	e0bfee45 	stb	r2,-71(fp)
		par = bufMidi[3];
    a290:	e0bfef83 	ldbu	r2,-66(fp)
    a294:	e0bfee85 	stb	r2,-70(fp)
	switch (bufMidi[1] & 0xF0) {
    a298:	e0bfef03 	ldbu	r2,-68(fp)
    a29c:	10803fcc 	andi	r2,r2,255
    a2a0:	10803c0c 	andi	r2,r2,240
    a2a4:	10c02420 	cmpeqi	r3,r2,144
    a2a8:	18000a1e 	bne	r3,zero,a2d4 <_Z9MIDI_pollv+0x94>
    a2ac:	10c02448 	cmpgei	r3,r2,145
    a2b0:	1800031e 	bne	r3,zero,a2c0 <_Z9MIDI_pollv+0x80>
    a2b4:	10802020 	cmpeqi	r2,r2,128
    a2b8:	1000061e 	bne	r2,zero,a2d4 <_Z9MIDI_pollv+0x94>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
			set_ctrl(channel, BEND, long_par);
			break;
		default:
			break;
    a2bc:	00024806 	br	abe0 <_Z9MIDI_pollv+0x9a0>

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
		channel = (bufMidi[1] & 0x0F);
		ctrl = bufMidi[2];
		par = bufMidi[3];
	switch (bufMidi[1] & 0xF0) {
    a2c0:	10c02c20 	cmpeqi	r3,r2,176
    a2c4:	18000b1e 	bne	r3,zero,a2f4 <_Z9MIDI_pollv+0xb4>
    a2c8:	10803820 	cmpeqi	r2,r2,224
    a2cc:	1002391e 	bne	r2,zero,abb4 <_Z9MIDI_pollv+0x974>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
			set_ctrl(channel, BEND, long_par);
			break;
		default:
			break;
    a2d0:	00024306 	br	abe0 <_Z9MIDI_pollv+0x9a0>
		ctrl = bufMidi[2];
		par = bufMidi[3];
	switch (bufMidi[1] & 0xF0) {
		case NOTE_OFF:
		case NOTE_ON:
			set_note(channel, ctrl, par);
    a2d4:	e0bfee03 	ldbu	r2,-72(fp)
    a2d8:	e0ffee43 	ldbu	r3,-71(fp)
    a2dc:	e13fee83 	ldbu	r4,-70(fp)
    a2e0:	200d883a 	mov	r6,r4
    a2e4:	180b883a 	mov	r5,r3
    a2e8:	1009883a 	mov	r4,r2
    a2ec:	00055b40 	call	55b4 <_Z8set_notehhh>
			break;
    a2f0:	00023b06 	br	abe0 <_Z9MIDI_pollv+0x9a0>
		case CONTROL_CHANGE:
			long_par = par;
    a2f4:	e0bfee83 	ldbu	r2,-70(fp)
    a2f8:	e0bfed15 	stw	r2,-76(fp)
			switch(ctrl) {
    a2fc:	e0bfee43 	ldbu	r2,-71(fp)
    a300:	10c01ba8 	cmpgeui	r3,r2,110
    a304:	1802291e 	bne	r3,zero,abac <_Z9MIDI_pollv+0x96c>
    a308:	100690ba 	slli	r3,r2,2
    a30c:	00800074 	movhi	r2,1
    a310:	10a8c804 	addi	r2,r2,-23776
    a314:	1885883a 	add	r2,r3,r2
    a318:	10800017 	ldw	r2,0(r2)
    a31c:	1000683a 	jmp	r2
    a320:	0000abac 	andhi	zero,zero,686
    a324:	0000a4d8 	cmpnei	zero,zero,659
    a328:	0000abac 	andhi	zero,zero,686
    a32c:	0000a6d8 	cmpnei	zero,zero,667
    a330:	0000abac 	andhi	zero,zero,686
    a334:	0000abac 	andhi	zero,zero,686
    a338:	0000abac 	andhi	zero,zero,686
    a33c:	0000a4f0 	cmpltui	zero,zero,659
    a340:	0000abac 	andhi	zero,zero,686
    a344:	0000a560 	cmpeqi	zero,zero,661
    a348:	0000abac 	andhi	zero,zero,686
    a34c:	0000abac 	andhi	zero,zero,686
    a350:	0000abac 	andhi	zero,zero,686
    a354:	0000abac 	andhi	zero,zero,686
    a358:	0000a578 	rdprs	zero,zero,661
    a35c:	0000abac 	andhi	zero,zero,686
    a360:	0000abac 	andhi	zero,zero,686
    a364:	0000abac 	andhi	zero,zero,686
    a368:	0000abac 	andhi	zero,zero,686
    a36c:	0000abac 	andhi	zero,zero,686
    a370:	0000abac 	andhi	zero,zero,686
    a374:	0000abac 	andhi	zero,zero,686
    a378:	0000abac 	andhi	zero,zero,686
    a37c:	0000abac 	andhi	zero,zero,686
    a380:	0000abac 	andhi	zero,zero,686
    a384:	0000abac 	andhi	zero,zero,686
    a388:	0000abac 	andhi	zero,zero,686
    a38c:	0000abac 	andhi	zero,zero,686
    a390:	0000abac 	andhi	zero,zero,686
    a394:	0000abac 	andhi	zero,zero,686
    a398:	0000abac 	andhi	zero,zero,686
    a39c:	0000abac 	andhi	zero,zero,686
    a3a0:	0000abac 	andhi	zero,zero,686
    a3a4:	0000abac 	andhi	zero,zero,686
    a3a8:	0000abac 	andhi	zero,zero,686
    a3ac:	0000abac 	andhi	zero,zero,686
    a3b0:	0000abac 	andhi	zero,zero,686
    a3b4:	0000abac 	andhi	zero,zero,686
    a3b8:	0000abac 	andhi	zero,zero,686
    a3bc:	0000abac 	andhi	zero,zero,686
    a3c0:	0000abac 	andhi	zero,zero,686
    a3c4:	0000abac 	andhi	zero,zero,686
    a3c8:	0000abac 	andhi	zero,zero,686
    a3cc:	0000abac 	andhi	zero,zero,686
    a3d0:	0000abac 	andhi	zero,zero,686
    a3d4:	0000abac 	andhi	zero,zero,686
    a3d8:	0000abac 	andhi	zero,zero,686
    a3dc:	0000abac 	andhi	zero,zero,686
    a3e0:	0000abac 	andhi	zero,zero,686
    a3e4:	0000abac 	andhi	zero,zero,686
    a3e8:	0000abac 	andhi	zero,zero,686
    a3ec:	0000abac 	andhi	zero,zero,686
    a3f0:	0000abac 	andhi	zero,zero,686
    a3f4:	0000abac 	andhi	zero,zero,686
    a3f8:	0000abac 	andhi	zero,zero,686
    a3fc:	0000abac 	andhi	zero,zero,686
    a400:	0000abac 	andhi	zero,zero,686
    a404:	0000abac 	andhi	zero,zero,686
    a408:	0000abac 	andhi	zero,zero,686
    a40c:	0000abac 	andhi	zero,zero,686
    a410:	0000abac 	andhi	zero,zero,686
    a414:	0000abac 	andhi	zero,zero,686
    a418:	0000abac 	andhi	zero,zero,686
    a41c:	0000abac 	andhi	zero,zero,686
    a420:	0000a508 	cmpgei	zero,zero,660
    a424:	0000abac 	andhi	zero,zero,686
    a428:	0000abac 	andhi	zero,zero,686
    a42c:	0000abac 	andhi	zero,zero,686
    a430:	0000abac 	andhi	zero,zero,686
    a434:	0000abac 	andhi	zero,zero,686
    a438:	0000abac 	andhi	zero,zero,686
    a43c:	0000abac 	andhi	zero,zero,686
    a440:	0000a770 	cmpltui	zero,zero,669
    a444:	0000a5a8 	cmpgeui	zero,zero,662
    a448:	0000abac 	andhi	zero,zero,686
    a44c:	0000a640 	call	a64 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
    a450:	0000abac 	andhi	zero,zero,686
    a454:	0000abac 	andhi	zero,zero,686
    a458:	0000abac 	andhi	zero,zero,686
    a45c:	0000abac 	andhi	zero,zero,686
    a460:	0000abac 	andhi	zero,zero,686
    a464:	0000abac 	andhi	zero,zero,686
    a468:	0000a538 	rdprs	zero,zero,660
    a46c:	0000abac 	andhi	zero,zero,686
    a470:	0000abac 	andhi	zero,zero,686
    a474:	0000a548 	cmpgei	zero,zero,661
    a478:	0000a590 	cmplti	zero,zero,662
    a47c:	0000abac 	andhi	zero,zero,686
    a480:	0000abac 	andhi	zero,zero,686
    a484:	0000abac 	andhi	zero,zero,686
    a488:	0000abac 	andhi	zero,zero,686
    a48c:	0000abac 	andhi	zero,zero,686
    a490:	0000abac 	andhi	zero,zero,686
    a494:	0000abac 	andhi	zero,zero,686
    a498:	0000abac 	andhi	zero,zero,686
    a49c:	0000abac 	andhi	zero,zero,686
    a4a0:	0000abac 	andhi	zero,zero,686
    a4a4:	0000abac 	andhi	zero,zero,686
    a4a8:	0000abac 	andhi	zero,zero,686
    a4ac:	0000abac 	andhi	zero,zero,686
    a4b0:	0000abac 	andhi	zero,zero,686
    a4b4:	0000abac 	andhi	zero,zero,686
    a4b8:	0000abac 	andhi	zero,zero,686
    a4bc:	0000abac 	andhi	zero,zero,686
    a4c0:	0000a808 	cmpgei	zero,zero,672
    a4c4:	0000a8a0 	cmpeqi	zero,zero,674
    a4c8:	0000a938 	rdprs	zero,zero,676
    a4cc:	0000a9d0 	cmplti	zero,zero,679
    a4d0:	0000aa68 	cmpgeui	zero,zero,681
    a4d4:	0000ab0c 	andi	zero,zero,684
				case MOD_WHEEL:
					set_ctrl(channel, MOD, long_par);
    a4d8:	e0bfee03 	ldbu	r2,-72(fp)
    a4dc:	e1bfed17 	ldw	r6,-76(fp)
    a4e0:	01400204 	movi	r5,8
    a4e4:	1009883a 	mov	r4,r2
    a4e8:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a4ec:	0001b006 	br	abb0 <_Z9MIDI_pollv+0x970>
				case CHAN_VOL:
					SGTL5000vol_change(i2c_dev, par);
    a4f0:	d0b24417 	ldw	r2,-14064(gp)
    a4f4:	e0ffee83 	ldbu	r3,-70(fp)
    a4f8:	180b883a 	mov	r5,r3
    a4fc:	1009883a 	mov	r4,r2
    a500:	00071840 	call	7184 <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>
					break;
    a504:	0001aa06 	br	abb0 <_Z9MIDI_pollv+0x970>
				case SUSTAIN_PEDAL:
					if(ped_flip) long_par = ~long_par;
    a508:	d0b24703 	ldbu	r2,-14052(gp)
    a50c:	10803fcc 	andi	r2,r2,255
    a510:	10000326 	beq	r2,zero,a520 <_Z9MIDI_pollv+0x2e0>
    a514:	e0bfed17 	ldw	r2,-76(fp)
    a518:	0084303a 	nor	r2,zero,r2
    a51c:	e0bfed15 	stw	r2,-76(fp)
					set_ctrl(channel, SUS, long_par);
    a520:	e0bfee03 	ldbu	r2,-72(fp)
    a524:	e1bfed17 	ldw	r6,-76(fp)
    a528:	01400184 	movi	r5,6
    a52c:	1009883a 	mov	r4,r2
    a530:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a534:	00019e06 	br	abb0 <_Z9MIDI_pollv+0x970>
				case PEDAL_FLIP:
					ped_flip = par;
    a538:	e0bfee83 	ldbu	r2,-70(fp)
    a53c:	1004c03a 	cmpne	r2,r2,zero
    a540:	d0b24705 	stb	r2,-14052(gp)
					break;
    a544:	00019a06 	br	abb0 <_Z9MIDI_pollv+0x970>
				case MOD_WHEEL_ON:
					set_ctrl(channel, MOD_ON, long_par);
    a548:	e0bfee03 	ldbu	r2,-72(fp)
    a54c:	e1bfed17 	ldw	r6,-76(fp)
    a550:	014001c4 	movi	r5,7
    a554:	1009883a 	mov	r4,r2
    a558:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a55c:	00019406 	br	abb0 <_Z9MIDI_pollv+0x970>
				case SAMPLE_1_SEL:
					set_ctrl(channel, SAMPLE_1, long_par);
    a560:	e0bfee03 	ldbu	r2,-72(fp)
    a564:	e1bfed17 	ldw	r6,-76(fp)
    a568:	01400244 	movi	r5,9
    a56c:	1009883a 	mov	r4,r2
    a570:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a574:	00018e06 	br	abb0 <_Z9MIDI_pollv+0x970>
				case SAMPLE_2_SEL:
					set_ctrl(channel, SAMPLE_2, long_par);
    a578:	e0bfee03 	ldbu	r2,-72(fp)
    a57c:	e1bfed17 	ldw	r6,-76(fp)
    a580:	01400284 	movi	r5,10
    a584:	1009883a 	mov	r4,r2
    a588:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a58c:	00018806 	br	abb0 <_Z9MIDI_pollv+0x970>
				case BEND_ON_:
					set_ctrl(channel, BEND_ON, long_par);
    a590:	e0bfee03 	ldbu	r2,-72(fp)
    a594:	e1bfed17 	ldw	r6,-76(fp)
    a598:	014002c4 	movi	r5,11
    a59c:	1009883a 	mov	r4,r2
    a5a0:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a5a4:	00018206 	br	abb0 <_Z9MIDI_pollv+0x970>
				case ATT_TIME_H:
					att_h= (par * 5000) / 0x7F;
    a5a8:	e0bfee83 	ldbu	r2,-70(fp)
    a5ac:	0144e204 	movi	r5,5000
    a5b0:	1009883a 	mov	r4,r2
    a5b4:	000d8b80 	call	d8b8 <__mulsi3>
    a5b8:	01401fc4 	movi	r5,127
    a5bc:	1009883a 	mov	r4,r2
    a5c0:	000d7040 	call	d704 <__divsi3>
    a5c4:	d0b2450d 	sth	r2,-14060(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a5c8:	d0b2450b 	ldhu	r2,-14060(gp)
    a5cc:	123fffcc 	andi	r8,r2,65535
    a5d0:	d0a5a40b 	ldhu	r2,-26992(gp)
    a5d4:	127fffcc 	andi	r9,r2,65535
    a5d8:	d0b2458b 	ldhu	r2,-14058(gp)
    a5dc:	12bfffcc 	andi	r10,r2,65535
    a5e0:	d0a5a48b 	ldhu	r2,-26990(gp)
    a5e4:	12ffffcc 	andi	r11,r2,65535
    a5e8:	d0b2460b 	ldhu	r2,-14056(gp)
    a5ec:	10bfffcc 	andi	r2,r2,65535
    a5f0:	d0e5a50b 	ldhu	r3,-26988(gp)
    a5f4:	18ffffcc 	andi	r3,r3,65535
    a5f8:	d132468b 	ldhu	r4,-14054(gp)
    a5fc:	213fffcc 	andi	r4,r4,65535
    a600:	d165a58b 	ldhu	r5,-26986(gp)
    a604:	297fffcc 	andi	r5,r5,65535
    a608:	d1a5a617 	ldw	r6,-26984(gp)
    a60c:	d1e5a717 	ldw	r7,-26980(gp)
    a610:	d9c00515 	stw	r7,20(sp)
    a614:	d9800415 	stw	r6,16(sp)
    a618:	d9400315 	stw	r5,12(sp)
    a61c:	d9000215 	stw	r4,8(sp)
    a620:	d8c00115 	stw	r3,4(sp)
    a624:	d8800015 	stw	r2,0(sp)
    a628:	580f883a 	mov	r7,r11
    a62c:	500d883a 	mov	r6,r10
    a630:	480b883a 	mov	r5,r9
    a634:	4009883a 	mov	r4,r8
    a638:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a63c:	00015c06 	br	abb0 <_Z9MIDI_pollv+0x970>
				case DEC_TIME_H:
					dec_h = (par * 5000) / 0x7F;
    a640:	e0bfee83 	ldbu	r2,-70(fp)
    a644:	0144e204 	movi	r5,5000
    a648:	1009883a 	mov	r4,r2
    a64c:	000d8b80 	call	d8b8 <__mulsi3>
    a650:	01401fc4 	movi	r5,127
    a654:	1009883a 	mov	r4,r2
    a658:	000d7040 	call	d704 <__divsi3>
    a65c:	d0b2458d 	sth	r2,-14058(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a660:	d0b2450b 	ldhu	r2,-14060(gp)
    a664:	123fffcc 	andi	r8,r2,65535
    a668:	d0a5a40b 	ldhu	r2,-26992(gp)
    a66c:	127fffcc 	andi	r9,r2,65535
    a670:	d0b2458b 	ldhu	r2,-14058(gp)
    a674:	12bfffcc 	andi	r10,r2,65535
    a678:	d0a5a48b 	ldhu	r2,-26990(gp)
    a67c:	12ffffcc 	andi	r11,r2,65535
    a680:	d0b2460b 	ldhu	r2,-14056(gp)
    a684:	10bfffcc 	andi	r2,r2,65535
    a688:	d0e5a50b 	ldhu	r3,-26988(gp)
    a68c:	18ffffcc 	andi	r3,r3,65535
    a690:	d132468b 	ldhu	r4,-14054(gp)
    a694:	213fffcc 	andi	r4,r4,65535
    a698:	d165a58b 	ldhu	r5,-26986(gp)
    a69c:	297fffcc 	andi	r5,r5,65535
    a6a0:	d1a5a617 	ldw	r6,-26984(gp)
    a6a4:	d1e5a717 	ldw	r7,-26980(gp)
    a6a8:	d9c00515 	stw	r7,20(sp)
    a6ac:	d9800415 	stw	r6,16(sp)
    a6b0:	d9400315 	stw	r5,12(sp)
    a6b4:	d9000215 	stw	r4,8(sp)
    a6b8:	d8c00115 	stw	r3,4(sp)
    a6bc:	d8800015 	stw	r2,0(sp)
    a6c0:	580f883a 	mov	r7,r11
    a6c4:	500d883a 	mov	r6,r10
    a6c8:	480b883a 	mov	r5,r9
    a6cc:	4009883a 	mov	r4,r8
    a6d0:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a6d4:	00013606 	br	abb0 <_Z9MIDI_pollv+0x970>
				case SUS_TIME_H:
					sus_h = (par * 20000) / 0x7F;
    a6d8:	e0bfee83 	ldbu	r2,-70(fp)
    a6dc:	01538804 	movi	r5,20000
    a6e0:	1009883a 	mov	r4,r2
    a6e4:	000d8b80 	call	d8b8 <__mulsi3>
    a6e8:	01401fc4 	movi	r5,127
    a6ec:	1009883a 	mov	r4,r2
    a6f0:	000d7040 	call	d704 <__divsi3>
    a6f4:	d0b2460d 	sth	r2,-14056(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a6f8:	d0b2450b 	ldhu	r2,-14060(gp)
    a6fc:	123fffcc 	andi	r8,r2,65535
    a700:	d0a5a40b 	ldhu	r2,-26992(gp)
    a704:	127fffcc 	andi	r9,r2,65535
    a708:	d0b2458b 	ldhu	r2,-14058(gp)
    a70c:	12bfffcc 	andi	r10,r2,65535
    a710:	d0a5a48b 	ldhu	r2,-26990(gp)
    a714:	12ffffcc 	andi	r11,r2,65535
    a718:	d0b2460b 	ldhu	r2,-14056(gp)
    a71c:	10bfffcc 	andi	r2,r2,65535
    a720:	d0e5a50b 	ldhu	r3,-26988(gp)
    a724:	18ffffcc 	andi	r3,r3,65535
    a728:	d132468b 	ldhu	r4,-14054(gp)
    a72c:	213fffcc 	andi	r4,r4,65535
    a730:	d165a58b 	ldhu	r5,-26986(gp)
    a734:	297fffcc 	andi	r5,r5,65535
    a738:	d1a5a617 	ldw	r6,-26984(gp)
    a73c:	d1e5a717 	ldw	r7,-26980(gp)
    a740:	d9c00515 	stw	r7,20(sp)
    a744:	d9800415 	stw	r6,16(sp)
    a748:	d9400315 	stw	r5,12(sp)
    a74c:	d9000215 	stw	r4,8(sp)
    a750:	d8c00115 	stw	r3,4(sp)
    a754:	d8800015 	stw	r2,0(sp)
    a758:	580f883a 	mov	r7,r11
    a75c:	500d883a 	mov	r6,r10
    a760:	480b883a 	mov	r5,r9
    a764:	4009883a 	mov	r4,r8
    a768:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a76c:	00011006 	br	abb0 <_Z9MIDI_pollv+0x970>
				case REL_TIME_H:
					rel_h = (par * 10000) / 0x7F;
    a770:	e0bfee83 	ldbu	r2,-70(fp)
    a774:	0149c404 	movi	r5,10000
    a778:	1009883a 	mov	r4,r2
    a77c:	000d8b80 	call	d8b8 <__mulsi3>
    a780:	01401fc4 	movi	r5,127
    a784:	1009883a 	mov	r4,r2
    a788:	000d7040 	call	d704 <__divsi3>
    a78c:	d0b2468d 	sth	r2,-14054(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a790:	d0b2450b 	ldhu	r2,-14060(gp)
    a794:	123fffcc 	andi	r8,r2,65535
    a798:	d0a5a40b 	ldhu	r2,-26992(gp)
    a79c:	127fffcc 	andi	r9,r2,65535
    a7a0:	d0b2458b 	ldhu	r2,-14058(gp)
    a7a4:	12bfffcc 	andi	r10,r2,65535
    a7a8:	d0a5a48b 	ldhu	r2,-26990(gp)
    a7ac:	12ffffcc 	andi	r11,r2,65535
    a7b0:	d0b2460b 	ldhu	r2,-14056(gp)
    a7b4:	10bfffcc 	andi	r2,r2,65535
    a7b8:	d0e5a50b 	ldhu	r3,-26988(gp)
    a7bc:	18ffffcc 	andi	r3,r3,65535
    a7c0:	d132468b 	ldhu	r4,-14054(gp)
    a7c4:	213fffcc 	andi	r4,r4,65535
    a7c8:	d165a58b 	ldhu	r5,-26986(gp)
    a7cc:	297fffcc 	andi	r5,r5,65535
    a7d0:	d1a5a617 	ldw	r6,-26984(gp)
    a7d4:	d1e5a717 	ldw	r7,-26980(gp)
    a7d8:	d9c00515 	stw	r7,20(sp)
    a7dc:	d9800415 	stw	r6,16(sp)
    a7e0:	d9400315 	stw	r5,12(sp)
    a7e4:	d9000215 	stw	r4,8(sp)
    a7e8:	d8c00115 	stw	r3,4(sp)
    a7ec:	d8800015 	stw	r2,0(sp)
    a7f0:	580f883a 	mov	r7,r11
    a7f4:	500d883a 	mov	r6,r10
    a7f8:	480b883a 	mov	r5,r9
    a7fc:	4009883a 	mov	r4,r8
    a800:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a804:	0000ea06 	br	abb0 <_Z9MIDI_pollv+0x970>
				case ATT_TIME_L:
					att_l = (par * 200) / 0x7F;
    a808:	e0bfee83 	ldbu	r2,-70(fp)
    a80c:	01403204 	movi	r5,200
    a810:	1009883a 	mov	r4,r2
    a814:	000d8b80 	call	d8b8 <__mulsi3>
    a818:	01401fc4 	movi	r5,127
    a81c:	1009883a 	mov	r4,r2
    a820:	000d7040 	call	d704 <__divsi3>
    a824:	d0a5a40d 	sth	r2,-26992(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a828:	d0b2450b 	ldhu	r2,-14060(gp)
    a82c:	123fffcc 	andi	r8,r2,65535
    a830:	d0a5a40b 	ldhu	r2,-26992(gp)
    a834:	127fffcc 	andi	r9,r2,65535
    a838:	d0b2458b 	ldhu	r2,-14058(gp)
    a83c:	12bfffcc 	andi	r10,r2,65535
    a840:	d0a5a48b 	ldhu	r2,-26990(gp)
    a844:	12ffffcc 	andi	r11,r2,65535
    a848:	d0b2460b 	ldhu	r2,-14056(gp)
    a84c:	10bfffcc 	andi	r2,r2,65535
    a850:	d0e5a50b 	ldhu	r3,-26988(gp)
    a854:	18ffffcc 	andi	r3,r3,65535
    a858:	d132468b 	ldhu	r4,-14054(gp)
    a85c:	213fffcc 	andi	r4,r4,65535
    a860:	d165a58b 	ldhu	r5,-26986(gp)
    a864:	297fffcc 	andi	r5,r5,65535
    a868:	d1a5a617 	ldw	r6,-26984(gp)
    a86c:	d1e5a717 	ldw	r7,-26980(gp)
    a870:	d9c00515 	stw	r7,20(sp)
    a874:	d9800415 	stw	r6,16(sp)
    a878:	d9400315 	stw	r5,12(sp)
    a87c:	d9000215 	stw	r4,8(sp)
    a880:	d8c00115 	stw	r3,4(sp)
    a884:	d8800015 	stw	r2,0(sp)
    a888:	580f883a 	mov	r7,r11
    a88c:	500d883a 	mov	r6,r10
    a890:	480b883a 	mov	r5,r9
    a894:	4009883a 	mov	r4,r8
    a898:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a89c:	0000c406 	br	abb0 <_Z9MIDI_pollv+0x970>
				case DEC_TIME_L:
					dec_l = (par * 200) / 0x7F;
    a8a0:	e0bfee83 	ldbu	r2,-70(fp)
    a8a4:	01403204 	movi	r5,200
    a8a8:	1009883a 	mov	r4,r2
    a8ac:	000d8b80 	call	d8b8 <__mulsi3>
    a8b0:	01401fc4 	movi	r5,127
    a8b4:	1009883a 	mov	r4,r2
    a8b8:	000d7040 	call	d704 <__divsi3>
    a8bc:	d0a5a48d 	sth	r2,-26990(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a8c0:	d0b2450b 	ldhu	r2,-14060(gp)
    a8c4:	123fffcc 	andi	r8,r2,65535
    a8c8:	d0a5a40b 	ldhu	r2,-26992(gp)
    a8cc:	127fffcc 	andi	r9,r2,65535
    a8d0:	d0b2458b 	ldhu	r2,-14058(gp)
    a8d4:	12bfffcc 	andi	r10,r2,65535
    a8d8:	d0a5a48b 	ldhu	r2,-26990(gp)
    a8dc:	12ffffcc 	andi	r11,r2,65535
    a8e0:	d0b2460b 	ldhu	r2,-14056(gp)
    a8e4:	10bfffcc 	andi	r2,r2,65535
    a8e8:	d0e5a50b 	ldhu	r3,-26988(gp)
    a8ec:	18ffffcc 	andi	r3,r3,65535
    a8f0:	d132468b 	ldhu	r4,-14054(gp)
    a8f4:	213fffcc 	andi	r4,r4,65535
    a8f8:	d165a58b 	ldhu	r5,-26986(gp)
    a8fc:	297fffcc 	andi	r5,r5,65535
    a900:	d1a5a617 	ldw	r6,-26984(gp)
    a904:	d1e5a717 	ldw	r7,-26980(gp)
    a908:	d9c00515 	stw	r7,20(sp)
    a90c:	d9800415 	stw	r6,16(sp)
    a910:	d9400315 	stw	r5,12(sp)
    a914:	d9000215 	stw	r4,8(sp)
    a918:	d8c00115 	stw	r3,4(sp)
    a91c:	d8800015 	stw	r2,0(sp)
    a920:	580f883a 	mov	r7,r11
    a924:	500d883a 	mov	r6,r10
    a928:	480b883a 	mov	r5,r9
    a92c:	4009883a 	mov	r4,r8
    a930:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a934:	00009e06 	br	abb0 <_Z9MIDI_pollv+0x970>
				case SUS_TIME_L:
					sus_l = (par * 800) / 0x7F;
    a938:	e0bfee83 	ldbu	r2,-70(fp)
    a93c:	0140c804 	movi	r5,800
    a940:	1009883a 	mov	r4,r2
    a944:	000d8b80 	call	d8b8 <__mulsi3>
    a948:	01401fc4 	movi	r5,127
    a94c:	1009883a 	mov	r4,r2
    a950:	000d7040 	call	d704 <__divsi3>
    a954:	d0a5a50d 	sth	r2,-26988(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a958:	d0b2450b 	ldhu	r2,-14060(gp)
    a95c:	123fffcc 	andi	r8,r2,65535
    a960:	d0a5a40b 	ldhu	r2,-26992(gp)
    a964:	127fffcc 	andi	r9,r2,65535
    a968:	d0b2458b 	ldhu	r2,-14058(gp)
    a96c:	12bfffcc 	andi	r10,r2,65535
    a970:	d0a5a48b 	ldhu	r2,-26990(gp)
    a974:	12ffffcc 	andi	r11,r2,65535
    a978:	d0b2460b 	ldhu	r2,-14056(gp)
    a97c:	10bfffcc 	andi	r2,r2,65535
    a980:	d0e5a50b 	ldhu	r3,-26988(gp)
    a984:	18ffffcc 	andi	r3,r3,65535
    a988:	d132468b 	ldhu	r4,-14054(gp)
    a98c:	213fffcc 	andi	r4,r4,65535
    a990:	d165a58b 	ldhu	r5,-26986(gp)
    a994:	297fffcc 	andi	r5,r5,65535
    a998:	d1a5a617 	ldw	r6,-26984(gp)
    a99c:	d1e5a717 	ldw	r7,-26980(gp)
    a9a0:	d9c00515 	stw	r7,20(sp)
    a9a4:	d9800415 	stw	r6,16(sp)
    a9a8:	d9400315 	stw	r5,12(sp)
    a9ac:	d9000215 	stw	r4,8(sp)
    a9b0:	d8c00115 	stw	r3,4(sp)
    a9b4:	d8800015 	stw	r2,0(sp)
    a9b8:	580f883a 	mov	r7,r11
    a9bc:	500d883a 	mov	r6,r10
    a9c0:	480b883a 	mov	r5,r9
    a9c4:	4009883a 	mov	r4,r8
    a9c8:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a9cc:	00007806 	br	abb0 <_Z9MIDI_pollv+0x970>
				case REL_TIME_L:
					rel_l = (par * 400) / 0x7F;
    a9d0:	e0bfee83 	ldbu	r2,-70(fp)
    a9d4:	01406404 	movi	r5,400
    a9d8:	1009883a 	mov	r4,r2
    a9dc:	000d8b80 	call	d8b8 <__mulsi3>
    a9e0:	01401fc4 	movi	r5,127
    a9e4:	1009883a 	mov	r4,r2
    a9e8:	000d7040 	call	d704 <__divsi3>
    a9ec:	d0a5a58d 	sth	r2,-26986(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a9f0:	d0b2450b 	ldhu	r2,-14060(gp)
    a9f4:	123fffcc 	andi	r8,r2,65535
    a9f8:	d0a5a40b 	ldhu	r2,-26992(gp)
    a9fc:	127fffcc 	andi	r9,r2,65535
    aa00:	d0b2458b 	ldhu	r2,-14058(gp)
    aa04:	12bfffcc 	andi	r10,r2,65535
    aa08:	d0a5a48b 	ldhu	r2,-26990(gp)
    aa0c:	12ffffcc 	andi	r11,r2,65535
    aa10:	d0b2460b 	ldhu	r2,-14056(gp)
    aa14:	10bfffcc 	andi	r2,r2,65535
    aa18:	d0e5a50b 	ldhu	r3,-26988(gp)
    aa1c:	18ffffcc 	andi	r3,r3,65535
    aa20:	d132468b 	ldhu	r4,-14054(gp)
    aa24:	213fffcc 	andi	r4,r4,65535
    aa28:	d165a58b 	ldhu	r5,-26986(gp)
    aa2c:	297fffcc 	andi	r5,r5,65535
    aa30:	d1a5a617 	ldw	r6,-26984(gp)
    aa34:	d1e5a717 	ldw	r7,-26980(gp)
    aa38:	d9c00515 	stw	r7,20(sp)
    aa3c:	d9800415 	stw	r6,16(sp)
    aa40:	d9400315 	stw	r5,12(sp)
    aa44:	d9000215 	stw	r4,8(sp)
    aa48:	d8c00115 	stw	r3,4(sp)
    aa4c:	d8800015 	stw	r2,0(sp)
    aa50:	580f883a 	mov	r7,r11
    aa54:	500d883a 	mov	r6,r10
    aa58:	480b883a 	mov	r5,r9
    aa5c:	4009883a 	mov	r4,r8
    aa60:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    aa64:	00005206 	br	abb0 <_Z9MIDI_pollv+0x970>
				case PEAK_ATT:
					peak_att = (float) (par * 2) / 0x7F;
    aa68:	e0bfee83 	ldbu	r2,-70(fp)
    aa6c:	1085883a 	add	r2,r2,r2
    aa70:	1009883a 	mov	r4,r2
    aa74:	000ec280 	call	ec28 <__floatsisf>
    aa78:	1007883a 	mov	r3,r2
    aa7c:	0150bfb4 	movhi	r5,17150
    aa80:	1809883a 	mov	r4,r3
    aa84:	000dda80 	call	dda8 <__divsf3>
    aa88:	1007883a 	mov	r3,r2
    aa8c:	1805883a 	mov	r2,r3
    aa90:	d0a5a615 	stw	r2,-26984(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    aa94:	d0b2450b 	ldhu	r2,-14060(gp)
    aa98:	123fffcc 	andi	r8,r2,65535
    aa9c:	d0a5a40b 	ldhu	r2,-26992(gp)
    aaa0:	127fffcc 	andi	r9,r2,65535
    aaa4:	d0b2458b 	ldhu	r2,-14058(gp)
    aaa8:	12bfffcc 	andi	r10,r2,65535
    aaac:	d0a5a48b 	ldhu	r2,-26990(gp)
    aab0:	12ffffcc 	andi	r11,r2,65535
    aab4:	d0b2460b 	ldhu	r2,-14056(gp)
    aab8:	10bfffcc 	andi	r2,r2,65535
    aabc:	d0e5a50b 	ldhu	r3,-26988(gp)
    aac0:	18ffffcc 	andi	r3,r3,65535
    aac4:	d132468b 	ldhu	r4,-14054(gp)
    aac8:	213fffcc 	andi	r4,r4,65535
    aacc:	d165a58b 	ldhu	r5,-26986(gp)
    aad0:	297fffcc 	andi	r5,r5,65535
    aad4:	d1a5a617 	ldw	r6,-26984(gp)
    aad8:	d1e5a717 	ldw	r7,-26980(gp)
    aadc:	d9c00515 	stw	r7,20(sp)
    aae0:	d9800415 	stw	r6,16(sp)
    aae4:	d9400315 	stw	r5,12(sp)
    aae8:	d9000215 	stw	r4,8(sp)
    aaec:	d8c00115 	stw	r3,4(sp)
    aaf0:	d8800015 	stw	r2,0(sp)
    aaf4:	580f883a 	mov	r7,r11
    aaf8:	500d883a 	mov	r6,r10
    aafc:	480b883a 	mov	r5,r9
    ab00:	4009883a 	mov	r4,r8
    ab04:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    ab08:	00002906 	br	abb0 <_Z9MIDI_pollv+0x970>
				case PEAK_SUS:
					peak_sus = (float) par / 0x7F;
    ab0c:	e0bfee83 	ldbu	r2,-70(fp)
    ab10:	1009883a 	mov	r4,r2
    ab14:	000ed4c0 	call	ed4c <__floatunsisf>
    ab18:	1007883a 	mov	r3,r2
    ab1c:	0150bfb4 	movhi	r5,17150
    ab20:	1809883a 	mov	r4,r3
    ab24:	000dda80 	call	dda8 <__divsf3>
    ab28:	1007883a 	mov	r3,r2
    ab2c:	1805883a 	mov	r2,r3
    ab30:	d0a5a715 	stw	r2,-26980(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    ab34:	d0b2450b 	ldhu	r2,-14060(gp)
    ab38:	123fffcc 	andi	r8,r2,65535
    ab3c:	d0a5a40b 	ldhu	r2,-26992(gp)
    ab40:	127fffcc 	andi	r9,r2,65535
    ab44:	d0b2458b 	ldhu	r2,-14058(gp)
    ab48:	12bfffcc 	andi	r10,r2,65535
    ab4c:	d0a5a48b 	ldhu	r2,-26990(gp)
    ab50:	12ffffcc 	andi	r11,r2,65535
    ab54:	d0b2460b 	ldhu	r2,-14056(gp)
    ab58:	10bfffcc 	andi	r2,r2,65535
    ab5c:	d0e5a50b 	ldhu	r3,-26988(gp)
    ab60:	18ffffcc 	andi	r3,r3,65535
    ab64:	d132468b 	ldhu	r4,-14054(gp)
    ab68:	213fffcc 	andi	r4,r4,65535
    ab6c:	d165a58b 	ldhu	r5,-26986(gp)
    ab70:	297fffcc 	andi	r5,r5,65535
    ab74:	d1a5a617 	ldw	r6,-26984(gp)
    ab78:	d1e5a717 	ldw	r7,-26980(gp)
    ab7c:	d9c00515 	stw	r7,20(sp)
    ab80:	d9800415 	stw	r6,16(sp)
    ab84:	d9400315 	stw	r5,12(sp)
    ab88:	d9000215 	stw	r4,8(sp)
    ab8c:	d8c00115 	stw	r3,4(sp)
    ab90:	d8800015 	stw	r2,0(sp)
    ab94:	580f883a 	mov	r7,r11
    ab98:	500d883a 	mov	r6,r10
    ab9c:	480b883a 	mov	r5,r9
    aba0:	4009883a 	mov	r4,r8
    aba4:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    aba8:	00000106 	br	abb0 <_Z9MIDI_pollv+0x970>
				default:
					break;
    abac:	0001883a 	nop
			}
			break;
    abb0:	00000b06 	br	abe0 <_Z9MIDI_pollv+0x9a0>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
    abb4:	e0bfee83 	ldbu	r2,-70(fp)
    abb8:	100691fa 	slli	r3,r2,7
    abbc:	e0bfee43 	ldbu	r2,-71(fp)
    abc0:	1885883a 	add	r2,r3,r2
    abc4:	e0bfed15 	stw	r2,-76(fp)
			set_ctrl(channel, BEND, long_par);
    abc8:	e0bfee03 	ldbu	r2,-72(fp)
    abcc:	e1bfed17 	ldw	r6,-76(fp)
    abd0:	01400304 	movi	r5,12
    abd4:	1009883a 	mov	r4,r2
    abd8:	000565c0 	call	565c <_Z8set_ctrlhhm>
			break;
    abdc:	0001883a 	nop
		default:
			break;
	}
  }
}
    abe0:	0001883a 	nop
    abe4:	e037883a 	mov	sp,fp
    abe8:	dfc00117 	ldw	ra,4(sp)
    abec:	df000017 	ldw	fp,0(sp)
    abf0:	dec00204 	addi	sp,sp,8
    abf4:	f800283a 	ret

0000abf8 <main>:

int main() {
    abf8:	defff804 	addi	sp,sp,-32
    abfc:	dfc00715 	stw	ra,28(sp)
    ac00:	df000615 	stw	fp,24(sp)
    ac04:	df000604 	addi	fp,sp,24

	printf("Initializing SGTL5000...\n");
    ac08:	010000f4 	movhi	r4,3
    ac0c:	212ce504 	addi	r4,r4,-19564
    ac10:	00100140 	call	10014 <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    ac14:	010000f4 	movhi	r4,3
    ac18:	212cec04 	addi	r4,r4,-19536
    ac1c:	0020f240 	call	20f24 <alt_avalon_i2c_open>
    ac20:	d0b24415 	stw	r2,-14064(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    ac24:	d0b24417 	ldw	r2,-14064(gp)
    ac28:	1000031e 	bne	r2,zero,ac38 <main+0x40>
    ac2c:	010000f4 	movhi	r4,3
    ac30:	212cef04 	addi	r4,r4,-19524
    ac34:	00100140 	call	10014 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    ac38:	d0b24417 	ldw	r2,-14064(gp)
    ac3c:	1009883a 	mov	r4,r2
    ac40:	0006ed40 	call	6ed4 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    ac44:	010000f4 	movhi	r4,3
    ac48:	212cf704 	addi	r4,r4,-19492
    ac4c:	00100140 	call	10014 <puts>
	SGTL5000audio_on(i2c_dev);
    ac50:	d0b24417 	ldw	r2,-14064(gp)
    ac54:	1009883a 	mov	r4,r2
    ac58:	0006f6c0 	call	6f6c <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	SGTL5000status(i2c_dev);
    ac5c:	d0b24417 	ldw	r2,-14064(gp)
    ac60:	1009883a 	mov	r4,r2
    ac64:	0006fd80 	call	6fd8 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>
	printf("Audio running\n");
    ac68:	010000f4 	movhi	r4,3
    ac6c:	212cfc04 	addi	r4,r4,-19472
    ac70:	00100140 	call	10014 <puts>

	printf("Initializing ADSR...\n");
    ac74:	010000f4 	movhi	r4,3
    ac78:	212d0004 	addi	r4,r4,-19456
    ac7c:	00100140 	call	10014 <puts>
	calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    ac80:	d0b2450b 	ldhu	r2,-14060(gp)
    ac84:	123fffcc 	andi	r8,r2,65535
    ac88:	d0a5a40b 	ldhu	r2,-26992(gp)
    ac8c:	127fffcc 	andi	r9,r2,65535
    ac90:	d0b2458b 	ldhu	r2,-14058(gp)
    ac94:	12bfffcc 	andi	r10,r2,65535
    ac98:	d0a5a48b 	ldhu	r2,-26990(gp)
    ac9c:	12ffffcc 	andi	r11,r2,65535
    aca0:	d0b2460b 	ldhu	r2,-14056(gp)
    aca4:	10bfffcc 	andi	r2,r2,65535
    aca8:	d0e5a50b 	ldhu	r3,-26988(gp)
    acac:	18ffffcc 	andi	r3,r3,65535
    acb0:	d132468b 	ldhu	r4,-14054(gp)
    acb4:	213fffcc 	andi	r4,r4,65535
    acb8:	d165a58b 	ldhu	r5,-26986(gp)
    acbc:	297fffcc 	andi	r5,r5,65535
    acc0:	d1a5a617 	ldw	r6,-26984(gp)
    acc4:	d1e5a717 	ldw	r7,-26980(gp)
    acc8:	d9c00515 	stw	r7,20(sp)
    accc:	d9800415 	stw	r6,16(sp)
    acd0:	d9400315 	stw	r5,12(sp)
    acd4:	d9000215 	stw	r4,8(sp)
    acd8:	d8c00115 	stw	r3,4(sp)
    acdc:	d8800015 	stw	r2,0(sp)
    ace0:	580f883a 	mov	r7,r11
    ace4:	500d883a 	mov	r6,r10
    ace8:	480b883a 	mov	r5,r9
    acec:	4009883a 	mov	r4,r8
    acf0:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
	printf("ADSR set\n");
    acf4:	010000f4 	movhi	r4,3
    acf8:	212d0604 	addi	r4,r4,-19432
    acfc:	00100140 	call	10014 <puts>

	MIDI_setup();
    ad00:	000a1c80 	call	a1c8 <_Z10MIDI_setupv>
	printf("MIDI set\n");
    ad04:	010000f4 	movhi	r4,3
    ad08:	212d0904 	addi	r4,r4,-19420
    ad0c:	00100140 	call	10014 <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    ad10:	010000f4 	movhi	r4,3
    ad14:	21079804 	addi	r4,r4,7776
    ad18:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    ad1c:	10803fcc 	andi	r2,r2,255
    ad20:	10802418 	cmpnei	r2,r2,144
    ad24:	10803fcc 	andi	r2,r2,255
    ad28:	10000426 	beq	r2,zero,ad3c <main+0x144>
		Usb.Task();
    ad2c:	010000f4 	movhi	r4,3
    ad30:	21079804 	addi	r4,r4,7776
    ad34:	000181c0 	call	181c <_ZN3USB4TaskEv>
	printf("ADSR set\n");

	MIDI_setup();
	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    ad38:	003ff506 	br	ad10 <__alt_data_end+0xfc00ad10>
		Usb.Task();
	}
	printf("USB running\n");
    ad3c:	010000f4 	movhi	r4,3
    ad40:	212d0c04 	addi	r4,r4,-19408
    ad44:	00100140 	call	10014 <puts>

	while(1) {
		if ( Midi ) {
    ad48:	010000f4 	movhi	r4,3
    ad4c:	2107c704 	addi	r4,r4,7964
    ad50:	000adfc0 	call	adfc <_ZN9USBH_MIDIcvbEv>
    ad54:	10803fcc 	andi	r2,r2,255
    ad58:	103ffb26 	beq	r2,zero,ad48 <__alt_data_end+0xfc00ad48>
			MIDI_poll();
    ad5c:	000a2400 	call	a240 <_Z9MIDI_pollv>
	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
		Usb.Task();
	}
	printf("USB running\n");

	while(1) {
    ad60:	003ff906 	br	ad48 <__alt_data_end+0xfc00ad48>

0000ad64 <_Z41__static_initialization_and_destruction_0ii>:
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
    ad64:	defffc04 	addi	sp,sp,-16
    ad68:	dfc00315 	stw	ra,12(sp)
    ad6c:	df000215 	stw	fp,8(sp)
    ad70:	df000204 	addi	fp,sp,8
    ad74:	e13ffe15 	stw	r4,-8(fp)
    ad78:	e17fff15 	stw	r5,-4(fp)
    ad7c:	e0bffe17 	ldw	r2,-8(fp)
    ad80:	10800058 	cmpnei	r2,r2,1
    ad84:	10000b1e 	bne	r2,zero,adb4 <_Z41__static_initialization_and_destruction_0ii+0x50>
    ad88:	e0ffff17 	ldw	r3,-4(fp)
    ad8c:	00bfffd4 	movui	r2,65535
    ad90:	1880081e 	bne	r3,r2,adb4 <_Z41__static_initialization_and_destruction_0ii+0x50>
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif
#include "include/SPI.h"

USB Usb;
    ad94:	010000f4 	movhi	r4,3
    ad98:	21079804 	addi	r4,r4,7776
    ad9c:	00007040 	call	704 <_ZN3USBC1Ev>
USBH_MIDI  Midi(&Usb);
    ada0:	014000f4 	movhi	r5,3
    ada4:	29479804 	addi	r5,r5,7776
    ada8:	010000f4 	movhi	r4,3
    adac:	2107c704 	addi	r4,r4,7964
    adb0:	00071f40 	call	71f4 <_ZN9USBH_MIDIC1EP3USB>
	while(1) {
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
    adb4:	0001883a 	nop
    adb8:	e037883a 	mov	sp,fp
    adbc:	dfc00117 	ldw	ra,4(sp)
    adc0:	df000017 	ldw	fp,0(sp)
    adc4:	dec00204 	addi	sp,sp,8
    adc8:	f800283a 	ret

0000adcc <_GLOBAL__sub_I_Usb>:
    adcc:	defffe04 	addi	sp,sp,-8
    add0:	dfc00115 	stw	ra,4(sp)
    add4:	df000015 	stw	fp,0(sp)
    add8:	d839883a 	mov	fp,sp
    addc:	017fffd4 	movui	r5,65535
    ade0:	01000044 	movi	r4,1
    ade4:	000ad640 	call	ad64 <_Z41__static_initialization_and_destruction_0ii>
    ade8:	e037883a 	mov	sp,fp
    adec:	dfc00117 	ldw	ra,4(sp)
    adf0:	df000017 	ldw	fp,0(sp)
    adf4:	dec00204 	addi	sp,sp,8
    adf8:	f800283a 	ret

0000adfc <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    adfc:	defffe04 	addi	sp,sp,-8
    ae00:	df000115 	stw	fp,4(sp)
    ae04:	df000104 	addi	fp,sp,4
    ae08:	e13fff15 	stw	r4,-4(fp)
    ae0c:	e0bfff17 	ldw	r2,-4(fp)
    ae10:	10800343 	ldbu	r2,13(r2)
    ae14:	e037883a 	mov	sp,fp
    ae18:	df000017 	ldw	fp,0(sp)
    ae1c:	dec00104 	addi	sp,sp,4
    ae20:	f800283a 	ret

0000ae24 <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    ae24:	defffe04 	addi	sp,sp,-8
    ae28:	df000115 	stw	fp,4(sp)
    ae2c:	df000104 	addi	fp,sp,4
    ae30:	e13fff15 	stw	r4,-4(fp)
    ae34:	e0bfff17 	ldw	r2,-4(fp)
    ae38:	1080040b 	ldhu	r2,16(r2)
    ae3c:	e037883a 	mov	sp,fp
    ae40:	df000017 	ldw	fp,0(sp)
    ae44:	dec00104 	addi	sp,sp,4
    ae48:	f800283a 	ret

0000ae4c <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    ae4c:	defffe04 	addi	sp,sp,-8
    ae50:	df000115 	stw	fp,4(sp)
    ae54:	df000104 	addi	fp,sp,4
    ae58:	e13fff15 	stw	r4,-4(fp)
    ae5c:	e0bfff17 	ldw	r2,-4(fp)
    ae60:	1080038b 	ldhu	r2,14(r2)
    ae64:	e037883a 	mov	sp,fp
    ae68:	df000017 	ldw	fp,0(sp)
    ae6c:	dec00104 	addi	sp,sp,4
    ae70:	f800283a 	ret

0000ae74 <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    ae74:	defffd04 	addi	sp,sp,-12
    ae78:	df000215 	stw	fp,8(sp)
    ae7c:	df000204 	addi	fp,sp,8
    ae80:	e13ffe15 	stw	r4,-8(fp)
    ae84:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    ae88:	e0bffe17 	ldw	r2,-8(fp)
    ae8c:	e0ffff17 	ldw	r3,-4(fp)
    ae90:	10c01815 	stw	r3,96(r2)
        };
    ae94:	0001883a 	nop
    ae98:	e037883a 	mov	sp,fp
    ae9c:	df000017 	ldw	fp,0(sp)
    aea0:	dec00104 	addi	sp,sp,4
    aea4:	f800283a 	ret

0000aea8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    aea8:	008000f4 	movhi	r2,3
    aeac:	10ad1e04 	addi	r2,r2,-19336
    aeb0:	20800015 	stw	r2,0(r4)
    aeb4:	000bc801 	jmpi	bc80 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000aeb8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    aeb8:	defffe04 	addi	sp,sp,-8
    aebc:	008000f4 	movhi	r2,3
    aec0:	dc000015 	stw	r16,0(sp)
    aec4:	dfc00115 	stw	ra,4(sp)
    aec8:	10ad1e04 	addi	r2,r2,-19336
    aecc:	20800015 	stw	r2,0(r4)
    aed0:	2021883a 	mov	r16,r4
    aed4:	000bc800 	call	bc80 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    aed8:	8009883a 	mov	r4,r16
    aedc:	dfc00117 	ldw	ra,4(sp)
    aee0:	dc000017 	ldw	r16,0(sp)
    aee4:	dec00204 	addi	sp,sp,8
    aee8:	000bbac1 	jmpi	bbac <_ZdlPv>

0000aeec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    aeec:	defff504 	addi	sp,sp,-44
    aef0:	dc000115 	stw	r16,4(sp)
    aef4:	38800117 	ldw	r2,4(r7)
    aef8:	24000117 	ldw	r16,4(r4)
    aefc:	df000915 	stw	fp,36(sp)
    af00:	ddc00815 	stw	r23,32(sp)
    af04:	dd800715 	stw	r22,28(sp)
    af08:	dcc00415 	stw	r19,16(sp)
    af0c:	dc800315 	stw	r18,12(sp)
    af10:	dc400215 	stw	r17,8(sp)
    af14:	dfc00a15 	stw	ra,40(sp)
    af18:	dd400615 	stw	r21,24(sp)
    af1c:	dd000515 	stw	r20,20(sp)
    af20:	2823883a 	mov	r17,r5
    af24:	3039883a 	mov	fp,r6
    af28:	dcc00b17 	ldw	r19,44(sp)
    af2c:	ddc00c17 	ldw	r23,48(sp)
    af30:	dd800d17 	ldw	r22,52(sp)
    af34:	dc800e17 	ldw	r18,56(sp)
    af38:	80800b26 	beq	r16,r2,af68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    af3c:	80c00007 	ldb	r3,0(r16)
    af40:	2029883a 	mov	r20,r4
    af44:	01000a84 	movi	r4,42
    af48:	382b883a 	mov	r21,r7
    af4c:	19001a26 	beq	r3,r4,afb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    af50:	100b883a 	mov	r5,r2
    af54:	8009883a 	mov	r4,r16
    af58:	d8c00015 	stw	r3,0(sp)
    af5c:	00104440 	call	10444 <strcmp>
    af60:	d8c00017 	ldw	r3,0(sp)
    af64:	1000141e 	bne	r2,zero,afb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    af68:	94c00015 	stw	r19,0(r18)
    af6c:	97000115 	stw	fp,4(r18)
    af70:	88002816 	blt	r17,zero,b014 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    af74:	9c63883a 	add	r17,r19,r17
    af78:	b4403226 	beq	r22,r17,b044 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    af7c:	00800044 	movi	r2,1
    af80:	90800315 	stw	r2,12(r18)
    af84:	0005883a 	mov	r2,zero
    af88:	dfc00a17 	ldw	ra,40(sp)
    af8c:	df000917 	ldw	fp,36(sp)
    af90:	ddc00817 	ldw	r23,32(sp)
    af94:	dd800717 	ldw	r22,28(sp)
    af98:	dd400617 	ldw	r21,24(sp)
    af9c:	dd000517 	ldw	r20,20(sp)
    afa0:	dcc00417 	ldw	r19,16(sp)
    afa4:	dc800317 	ldw	r18,12(sp)
    afa8:	dc400217 	ldw	r17,8(sp)
    afac:	dc000117 	ldw	r16,4(sp)
    afb0:	dec00b04 	addi	sp,sp,44
    afb4:	f800283a 	ret
    afb8:	9d801926 	beq	r19,r22,b020 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    afbc:	a1000217 	ldw	r4,8(r20)
    afc0:	a80f883a 	mov	r7,r21
    afc4:	e00d883a 	mov	r6,fp
    afc8:	20800017 	ldw	r2,0(r4)
    afcc:	dc800e15 	stw	r18,56(sp)
    afd0:	dd800d15 	stw	r22,52(sp)
    afd4:	ddc00c15 	stw	r23,48(sp)
    afd8:	dcc00b15 	stw	r19,44(sp)
    afdc:	10800717 	ldw	r2,28(r2)
    afe0:	880b883a 	mov	r5,r17
    afe4:	dfc00a17 	ldw	ra,40(sp)
    afe8:	df000917 	ldw	fp,36(sp)
    afec:	ddc00817 	ldw	r23,32(sp)
    aff0:	dd800717 	ldw	r22,28(sp)
    aff4:	dd400617 	ldw	r21,24(sp)
    aff8:	dd000517 	ldw	r20,20(sp)
    affc:	dcc00417 	ldw	r19,16(sp)
    b000:	dc800317 	ldw	r18,12(sp)
    b004:	dc400217 	ldw	r17,8(sp)
    b008:	dc000117 	ldw	r16,4(sp)
    b00c:	dec00b04 	addi	sp,sp,44
    b010:	1000683a 	jmp	r2
    b014:	00bfff84 	movi	r2,-2
    b018:	88bfda1e 	bne	r17,r2,af84 <__alt_data_end+0xfc00af84>
    b01c:	003fd706 	br	af7c <__alt_data_end+0xfc00af7c>
    b020:	b9400117 	ldw	r5,4(r23)
    b024:	81400526 	beq	r16,r5,b03c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    b028:	00800a84 	movi	r2,42
    b02c:	18bfe326 	beq	r3,r2,afbc <__alt_data_end+0xfc00afbc>
    b030:	8009883a 	mov	r4,r16
    b034:	00104440 	call	10444 <strcmp>
    b038:	103fe01e 	bne	r2,zero,afbc <__alt_data_end+0xfc00afbc>
    b03c:	97000215 	stw	fp,8(r18)
    b040:	003fd006 	br	af84 <__alt_data_end+0xfc00af84>
    b044:	00800184 	movi	r2,6
    b048:	003fcd06 	br	af80 <__alt_data_end+0xfc00af80>

0000b04c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    b04c:	defffa04 	addi	sp,sp,-24
    b050:	dc000215 	stw	r16,8(sp)
    b054:	dc000617 	ldw	r16,24(sp)
    b058:	dc800415 	stw	r18,16(sp)
    b05c:	dc400315 	stw	r17,12(sp)
    b060:	dfc00515 	stw	ra,20(sp)
    b064:	2023883a 	mov	r17,r4
    b068:	2825883a 	mov	r18,r5
    b06c:	81800b26 	beq	r16,r6,b09c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    b070:	89000217 	ldw	r4,8(r17)
    b074:	900b883a 	mov	r5,r18
    b078:	20800017 	ldw	r2,0(r4)
    b07c:	dc000615 	stw	r16,24(sp)
    b080:	10800817 	ldw	r2,32(r2)
    b084:	dfc00517 	ldw	ra,20(sp)
    b088:	dc800417 	ldw	r18,16(sp)
    b08c:	dc400317 	ldw	r17,12(sp)
    b090:	dc000217 	ldw	r16,8(sp)
    b094:	dec00604 	addi	sp,sp,24
    b098:	1000683a 	jmp	r2
    b09c:	21000117 	ldw	r4,4(r4)
    b0a0:	39400117 	ldw	r5,4(r7)
    b0a4:	21400926 	beq	r4,r5,b0cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    b0a8:	20c00007 	ldb	r3,0(r4)
    b0ac:	00800a84 	movi	r2,42
    b0b0:	18bfef26 	beq	r3,r2,b070 <__alt_data_end+0xfc00b070>
    b0b4:	d9800015 	stw	r6,0(sp)
    b0b8:	d9c00115 	stw	r7,4(sp)
    b0bc:	00104440 	call	10444 <strcmp>
    b0c0:	d9800017 	ldw	r6,0(sp)
    b0c4:	d9c00117 	ldw	r7,4(sp)
    b0c8:	103fe91e 	bne	r2,zero,b070 <__alt_data_end+0xfc00b070>
    b0cc:	00800184 	movi	r2,6
    b0d0:	dfc00517 	ldw	ra,20(sp)
    b0d4:	dc800417 	ldw	r18,16(sp)
    b0d8:	dc400317 	ldw	r17,12(sp)
    b0dc:	dc000217 	ldw	r16,8(sp)
    b0e0:	dec00604 	addi	sp,sp,24
    b0e4:	f800283a 	ret

0000b0e8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    b0e8:	defffb04 	addi	sp,sp,-20
    b0ec:	dcc00315 	stw	r19,12(sp)
    b0f0:	dc800215 	stw	r18,8(sp)
    b0f4:	dc400115 	stw	r17,4(sp)
    b0f8:	dc000015 	stw	r16,0(sp)
    b0fc:	dfc00415 	stw	ra,16(sp)
    b100:	2027883a 	mov	r19,r4
    b104:	2821883a 	mov	r16,r5
    b108:	3023883a 	mov	r17,r6
    b10c:	3825883a 	mov	r18,r7
    b110:	000bcc40 	call	bcc4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    b114:	10c03fcc 	andi	r3,r2,255
    b118:	18000726 	beq	r3,zero,b138 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    b11c:	dfc00417 	ldw	ra,16(sp)
    b120:	dcc00317 	ldw	r19,12(sp)
    b124:	dc800217 	ldw	r18,8(sp)
    b128:	dc400117 	ldw	r17,4(sp)
    b12c:	dc000017 	ldw	r16,0(sp)
    b130:	dec00504 	addi	sp,sp,20
    b134:	f800283a 	ret
    b138:	99000217 	ldw	r4,8(r19)
    b13c:	900f883a 	mov	r7,r18
    b140:	880d883a 	mov	r6,r17
    b144:	20800017 	ldw	r2,0(r4)
    b148:	800b883a 	mov	r5,r16
    b14c:	10800617 	ldw	r2,24(r2)
    b150:	dfc00417 	ldw	ra,16(sp)
    b154:	dcc00317 	ldw	r19,12(sp)
    b158:	dc800217 	ldw	r18,8(sp)
    b15c:	dc400117 	ldw	r17,4(sp)
    b160:	dc000017 	ldw	r16,0(sp)
    b164:	dec00504 	addi	sp,sp,20
    b168:	1000683a 	jmp	r2

0000b16c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    b16c:	008000f4 	movhi	r2,3
    b170:	10ad3604 	addi	r2,r2,-19240
    b174:	20800015 	stw	r2,0(r4)
    b178:	000bc801 	jmpi	bc80 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000b17c <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    b17c:	defffe04 	addi	sp,sp,-8
    b180:	008000f4 	movhi	r2,3
    b184:	dc000015 	stw	r16,0(sp)
    b188:	dfc00115 	stw	ra,4(sp)
    b18c:	10ad3604 	addi	r2,r2,-19240
    b190:	20800015 	stw	r2,0(r4)
    b194:	2021883a 	mov	r16,r4
    b198:	000bc800 	call	bc80 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    b19c:	8009883a 	mov	r4,r16
    b1a0:	dfc00117 	ldw	ra,4(sp)
    b1a4:	dc000017 	ldw	r16,0(sp)
    b1a8:	dec00204 	addi	sp,sp,8
    b1ac:	000bbac1 	jmpi	bbac <_ZdlPv>

0000b1b0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    b1b0:	defff504 	addi	sp,sp,-44
    b1b4:	dc400215 	stw	r17,8(sp)
    b1b8:	dc400b17 	ldw	r17,44(sp)
    b1bc:	df000915 	stw	fp,36(sp)
    b1c0:	ddc00815 	stw	r23,32(sp)
    b1c4:	dd800715 	stw	r22,28(sp)
    b1c8:	dc000115 	stw	r16,4(sp)
    b1cc:	dfc00a15 	stw	ra,40(sp)
    b1d0:	dd400615 	stw	r21,24(sp)
    b1d4:	dd000515 	stw	r20,20(sp)
    b1d8:	dcc00415 	stw	r19,16(sp)
    b1dc:	dc800315 	stw	r18,12(sp)
    b1e0:	3039883a 	mov	fp,r6
    b1e4:	2021883a 	mov	r16,r4
    b1e8:	282d883a 	mov	r22,r5
    b1ec:	382f883a 	mov	r23,r7
    b1f0:	34402c26 	beq	r6,r17,b2a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    b1f4:	85000317 	ldw	r20,12(r16)
    b1f8:	048000c4 	movi	r18,3
    b1fc:	04ffff44 	movi	r19,-3
    b200:	a484983a 	sll	r2,r20,r18
    b204:	b80f883a 	mov	r7,r23
    b208:	b00b883a 	mov	r5,r22
    b20c:	10800304 	addi	r2,r2,12
    b210:	80a1883a 	add	r16,r16,r2
    b214:	a0001626 	beq	r20,zero,b270 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    b218:	81800017 	ldw	r6,0(r16)
    b21c:	a53fffc4 	addi	r20,r20,-1
    b220:	3080008c 	andi	r2,r6,2
    b224:	3540004c 	andi	r21,r6,1
    b228:	10000d26 	beq	r2,zero,b260 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    b22c:	300dd23a 	srai	r6,r6,8
    b230:	a8000426 	beq	r21,zero,b244 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    b234:	b4c00a26 	beq	r22,r19,b260 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    b238:	e0800017 	ldw	r2,0(fp)
    b23c:	118d883a 	add	r6,r2,r6
    b240:	31800017 	ldw	r6,0(r6)
    b244:	813fff17 	ldw	r4,-4(r16)
    b248:	e18d883a 	add	r6,fp,r6
    b24c:	20800017 	ldw	r2,0(r4)
    b250:	dc400015 	stw	r17,0(sp)
    b254:	10800817 	ldw	r2,32(r2)
    b258:	103ee83a 	callr	r2
    b25c:	90801b16 	blt	r18,r2,b2cc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    b260:	843ffe04 	addi	r16,r16,-8
    b264:	b80f883a 	mov	r7,r23
    b268:	b00b883a 	mov	r5,r22
    b26c:	a03fea1e 	bne	r20,zero,b218 <__alt_data_end+0xfc00b218>
    b270:	00800044 	movi	r2,1
    b274:	dfc00a17 	ldw	ra,40(sp)
    b278:	df000917 	ldw	fp,36(sp)
    b27c:	ddc00817 	ldw	r23,32(sp)
    b280:	dd800717 	ldw	r22,28(sp)
    b284:	dd400617 	ldw	r21,24(sp)
    b288:	dd000517 	ldw	r20,20(sp)
    b28c:	dcc00417 	ldw	r19,16(sp)
    b290:	dc800317 	ldw	r18,12(sp)
    b294:	dc400217 	ldw	r17,8(sp)
    b298:	dc000117 	ldw	r16,4(sp)
    b29c:	dec00b04 	addi	sp,sp,44
    b2a0:	f800283a 	ret
    b2a4:	21000117 	ldw	r4,4(r4)
    b2a8:	39400117 	ldw	r5,4(r7)
    b2ac:	21400526 	beq	r4,r5,b2c4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    b2b0:	20c00007 	ldb	r3,0(r4)
    b2b4:	00800a84 	movi	r2,42
    b2b8:	18bfce26 	beq	r3,r2,b1f4 <__alt_data_end+0xfc00b1f4>
    b2bc:	00104440 	call	10444 <strcmp>
    b2c0:	103fcc1e 	bne	r2,zero,b1f4 <__alt_data_end+0xfc00b1f4>
    b2c4:	00800184 	movi	r2,6
    b2c8:	003fea06 	br	b274 <__alt_data_end+0xfc00b274>
    b2cc:	a83fe926 	beq	r21,zero,b274 <__alt_data_end+0xfc00b274>
    b2d0:	10800054 	ori	r2,r2,1
    b2d4:	003fe706 	br	b274 <__alt_data_end+0xfc00b274>

0000b2d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    b2d8:	deffe804 	addi	sp,sp,-96
    b2dc:	df001615 	stw	fp,88(sp)
    b2e0:	df001b17 	ldw	fp,108(sp)
    b2e4:	ddc01515 	stw	r23,84(sp)
    b2e8:	dd001215 	stw	r20,72(sp)
    b2ec:	e0800417 	ldw	r2,16(fp)
    b2f0:	dcc01115 	stw	r19,68(sp)
    b2f4:	dfc01715 	stw	ra,92(sp)
    b2f8:	dd801415 	stw	r22,80(sp)
    b2fc:	dd401315 	stw	r21,76(sp)
    b300:	dc801015 	stw	r18,64(sp)
    b304:	dc400f15 	stw	r17,60(sp)
    b308:	dc000e15 	stw	r16,56(sp)
    b30c:	d9000b15 	stw	r4,44(sp)
    b310:	d9c00915 	stw	r7,36(sp)
    b314:	1080040c 	andi	r2,r2,16
    b318:	282f883a 	mov	r23,r5
    b31c:	3027883a 	mov	r19,r6
    b320:	dd001817 	ldw	r20,96(sp)
    b324:	10000226 	beq	r2,zero,b330 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    b328:	20800217 	ldw	r2,8(r4)
    b32c:	e0800415 	stw	r2,16(fp)
    b330:	d8c01a17 	ldw	r3,104(sp)
    b334:	a0c0cb26 	beq	r20,r3,b664 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    b338:	d8c00b17 	ldw	r3,44(sp)
    b33c:	1c000117 	ldw	r16,4(r3)
    b340:	d8c00917 	ldw	r3,36(sp)
    b344:	19400117 	ldw	r5,4(r3)
    b348:	2c000626 	beq	r5,r16,b364 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    b34c:	80c00007 	ldb	r3,0(r16)
    b350:	00800a84 	movi	r2,42
    b354:	18801b26 	beq	r3,r2,b3c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    b358:	8009883a 	mov	r4,r16
    b35c:	00104440 	call	10444 <strcmp>
    b360:	1000181e 	bne	r2,zero,b3c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    b364:	e5000015 	stw	r20,0(fp)
    b368:	e4c00115 	stw	r19,4(fp)
    b36c:	b8010916 	blt	r23,zero,b794 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    b370:	d8c01a17 	ldw	r3,104(sp)
    b374:	a5d9883a 	add	r12,r20,r23
    b378:	1b014126 	beq	r3,r12,b880 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    b37c:	00800044 	movi	r2,1
    b380:	e0800315 	stw	r2,12(fp)
    b384:	0005883a 	mov	r2,zero
    b388:	dfc01717 	ldw	ra,92(sp)
    b38c:	df001617 	ldw	fp,88(sp)
    b390:	ddc01517 	ldw	r23,84(sp)
    b394:	dd801417 	ldw	r22,80(sp)
    b398:	dd401317 	ldw	r21,76(sp)
    b39c:	dd001217 	ldw	r20,72(sp)
    b3a0:	dcc01117 	ldw	r19,68(sp)
    b3a4:	dc801017 	ldw	r18,64(sp)
    b3a8:	dc400f17 	ldw	r17,60(sp)
    b3ac:	dc000e17 	ldw	r16,56(sp)
    b3b0:	dec01804 	addi	sp,sp,96
    b3b4:	f800283a 	ret
    b3b8:	d8c00917 	ldw	r3,36(sp)
    b3bc:	18800117 	ldw	r2,4(r3)
    b3c0:	80bfe826 	beq	r16,r2,b364 <__alt_data_end+0xfc00b364>
    b3c4:	b800ef16 	blt	r23,zero,b784 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    b3c8:	d8c01a17 	ldw	r3,104(sp)
    b3cc:	1dedc83a 	sub	r22,r3,r23
    b3d0:	e005883a 	mov	r2,fp
    b3d4:	00c00044 	movi	r3,1
    b3d8:	b039883a 	mov	fp,r22
    b3dc:	0021883a 	mov	r16,zero
    b3e0:	a02d883a 	mov	r22,r20
    b3e4:	d8000a45 	stb	zero,41(sp)
    b3e8:	d8c00a05 	stb	r3,40(sp)
    b3ec:	048000c4 	movi	r18,3
    b3f0:	1029883a 	mov	r20,r2
    b3f4:	d8c00b17 	ldw	r3,44(sp)
    b3f8:	b805883a 	mov	r2,r23
    b3fc:	1ac00317 	ldw	r11,12(r3)
    b400:	581490fa 	slli	r10,r11,3
    b404:	52800304 	addi	r10,r10,12
    b408:	1aab883a 	add	r21,r3,r10
    b40c:	b007883a 	mov	r3,r22
    b410:	582d883a 	mov	r22,r11
    b414:	a82f883a 	mov	r23,r21
    b418:	1823883a 	mov	r17,r3
    b41c:	102b883a 	mov	r21,r2
    b420:	b0005526 	beq	r22,zero,b578 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    b424:	b8800017 	ldw	r2,0(r23)
    b428:	a1400417 	ldw	r5,16(r20)
    b42c:	d8000415 	stw	zero,16(sp)
    b430:	d8000515 	stw	zero,20(sp)
    b434:	d8000615 	stw	zero,24(sp)
    b438:	d8000715 	stw	zero,28(sp)
    b43c:	d9400815 	stw	r5,32(sp)
    b440:	1100004c 	andi	r4,r2,1
    b444:	1007d23a 	srai	r3,r2,8
    b448:	20007526 	beq	r4,zero,b620 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    b44c:	89000017 	ldw	r4,0(r17)
    b450:	99800054 	ori	r6,r19,1
    b454:	20c7883a 	add	r3,r4,r3
    b458:	18c00017 	ldw	r3,0(r3)
    b45c:	88c7883a 	add	r3,r17,r3
    b460:	e0000326 	beq	fp,zero,b470 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    b464:	d9c00a03 	ldbu	r7,40(sp)
    b468:	e0c9803a 	cmpltu	r4,fp,r3
    b46c:	21c07226 	beq	r4,r7,b638 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    b470:	1080008c 	andi	r2,r2,2
    b474:	1000041e 	bne	r2,zero,b488 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    b478:	013fff84 	movi	r4,-2
    b47c:	a9007126 	beq	r21,r4,b644 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    b480:	00bfff44 	movi	r2,-3
    b484:	308c703a 	and	r6,r6,r2
    b488:	b93fff17 	ldw	r4,-4(r23)
    b48c:	d9400404 	addi	r5,sp,16
    b490:	d9c00917 	ldw	r7,36(sp)
    b494:	20800017 	ldw	r2,0(r4)
    b498:	d9400315 	stw	r5,12(sp)
    b49c:	d9401a17 	ldw	r5,104(sp)
    b4a0:	d8c00015 	stw	r3,0(sp)
    b4a4:	d9400215 	stw	r5,8(sp)
    b4a8:	d9401917 	ldw	r5,100(sp)
    b4ac:	d9400115 	stw	r5,4(sp)
    b4b0:	10800717 	ldw	r2,28(r2)
    b4b4:	a80b883a 	mov	r5,r21
    b4b8:	103ee83a 	callr	r2
    b4bc:	a1400217 	ldw	r5,8(r20)
    b4c0:	d9000617 	ldw	r4,24(sp)
    b4c4:	d8c00717 	ldw	r3,28(sp)
    b4c8:	2908b03a 	or	r4,r5,r4
    b4cc:	a1000215 	stw	r4,8(r20)
    b4d0:	01400184 	movi	r5,6
    b4d4:	1940a426 	beq	r3,r5,b768 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    b4d8:	01400084 	movi	r5,2
    b4dc:	1940a226 	beq	r3,r5,b768 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    b4e0:	81403fcc 	andi	r5,r16,255
    b4e4:	a1800017 	ldw	r6,0(r20)
    b4e8:	28004f1e 	bne	r5,zero,b628 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    b4ec:	30007926 	beq	r6,zero,b6d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    b4f0:	d9400417 	ldw	r5,16(sp)
    b4f4:	29806926 	beq	r5,r6,b69c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    b4f8:	28006d26 	beq	r5,zero,b6b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    b4fc:	a2800317 	ldw	r10,12(r20)
    b500:	9100250e 	bge	r18,r4,b598 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    b504:	2100004c 	andi	r4,r4,1
    b508:	20000326 	beq	r4,zero,b518 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    b50c:	a0800417 	ldw	r2,16(r20)
    b510:	1080008c 	andi	r2,r2,2
    b514:	1000201e 	bne	r2,zero,b598 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    b518:	50004d1e 	bne	r10,zero,b650 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    b51c:	18002626 	beq	r3,zero,b5b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    b520:	02800044 	movi	r10,1
    b524:	181b883a 	mov	r13,r3
    b528:	1a84f03a 	xor	r2,r3,r10
    b52c:	501f883a 	mov	r15,r10
    b530:	90801f0e 	bge	r18,r2,b5b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    b534:	90c0880e 	bge	r18,r3,b758 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    b538:	d9400417 	ldw	r5,16(sp)
    b53c:	1880008c 	andi	r2,r3,2
    b540:	d9000517 	ldw	r4,20(sp)
    b544:	a1400015 	stw	r5,0(r20)
    b548:	0021883a 	mov	r16,zero
    b54c:	a1000115 	stw	r4,4(r20)
    b550:	a0c00315 	stw	r3,12(r20)
    b554:	10004f1e 	bne	r2,zero,b694 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    b558:	6b40004c 	andi	r13,r13,1
    b55c:	68004d26 	beq	r13,zero,b694 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    b560:	a1000217 	ldw	r4,8(r20)
    b564:	01400104 	movi	r5,4
    b568:	21408826 	beq	r4,r5,b78c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b56c:	b5bfffc4 	addi	r22,r22,-1
    b570:	bdfffe04 	addi	r23,r23,-8
    b574:	b03fab1e 	bne	r22,zero,b424 <__alt_data_end+0xfc00b424>
    b578:	d8800a43 	ldbu	r2,41(sp)
    b57c:	a82f883a 	mov	r23,r21
    b580:	882d883a 	mov	r22,r17
    b584:	10008126 	beq	r2,zero,b78c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b588:	dd400a03 	ldbu	r21,40(sp)
    b58c:	a8007f26 	beq	r21,zero,b78c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b590:	d8000a05 	stb	zero,40(sp)
    b594:	003f9706 	br	b3f4 <__alt_data_end+0xfc00b3f4>
    b598:	501f883a 	mov	r15,r10
    b59c:	181b883a 	mov	r13,r3
    b5a0:	02800b0e 	bge	zero,r10,b5d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    b5a4:	00c0570e 	bge	zero,r3,b704 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    b5a8:	1a84f03a 	xor	r2,r3,r10
    b5ac:	90bfe116 	blt	r18,r2,b534 <__alt_data_end+0xfc00b534>
    b5b0:	1bc6703a 	and	r3,r3,r15
    b5b4:	90c09916 	blt	r18,r3,b81c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    b5b8:	01000044 	movi	r4,1
    b5bc:	a1000315 	stw	r4,12(r20)
    b5c0:	a0000015 	stw	zero,0(r20)
    b5c4:	a1000217 	ldw	r4,8(r20)
    b5c8:	04000044 	movi	r16,1
    b5cc:	003fe506 	br	b564 <__alt_data_end+0xfc00b564>
    b5d0:	90c00a0e 	bge	r18,r3,b5fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    b5d4:	1880004c 	andi	r2,r3,1
    b5d8:	10000426 	beq	r2,zero,b5ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    b5dc:	d9000b17 	ldw	r4,44(sp)
    b5e0:	20800217 	ldw	r2,8(r4)
    b5e4:	1080008c 	andi	r2,r2,2
    b5e8:	1000041e 	bne	r2,zero,b5fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    b5ec:	1880005c 	xori	r2,r3,1
    b5f0:	90bfd216 	blt	r18,r2,b53c <__alt_data_end+0xfc00b53c>
    b5f4:	03c00044 	movi	r15,1
    b5f8:	003fed06 	br	b5b0 <__alt_data_end+0xfc00b5b0>
    b5fc:	a8006e16 	blt	r21,zero,b7b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    b600:	d8801a17 	ldw	r2,104(sp)
    b604:	354d883a 	add	r6,r6,r21
    b608:	11805026 	beq	r2,r6,b74c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    b60c:	00c0a50e 	bge	zero,r3,b8a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    b610:	03c00044 	movi	r15,1
    b614:	1bc4f03a 	xor	r2,r3,r15
    b618:	7815883a 	mov	r10,r15
    b61c:	003fc406 	br	b530 <__alt_data_end+0xfc00b530>
    b620:	980d883a 	mov	r6,r19
    b624:	003f8d06 	br	b45c <__alt_data_end+0xfc00b45c>
    b628:	303fb11e 	bne	r6,zero,b4f0 <__alt_data_end+0xfc00b4f0>
    b62c:	d9400417 	ldw	r5,16(sp)
    b630:	283fb21e 	bne	r5,zero,b4fc <__alt_data_end+0xfc00b4fc>
    b634:	003fcb06 	br	b564 <__alt_data_end+0xfc00b564>
    b638:	00c00044 	movi	r3,1
    b63c:	d8c00a45 	stb	r3,41(sp)
    b640:	003fca06 	br	b56c <__alt_data_end+0xfc00b56c>
    b644:	294000cc 	andi	r5,r5,3
    b648:	283fc826 	beq	r5,zero,b56c <__alt_data_end+0xfc00b56c>
    b64c:	003f8c06 	br	b480 <__alt_data_end+0xfc00b480>
    b650:	18001a26 	beq	r3,zero,b6bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    b654:	181b883a 	mov	r13,r3
    b658:	501f883a 	mov	r15,r10
    b65c:	50c4f03a 	xor	r2,r10,r3
    b660:	003fb306 	br	b530 <__alt_data_end+0xfc00b530>
    b664:	d8c00b17 	ldw	r3,44(sp)
    b668:	1c000117 	ldw	r16,4(r3)
    b66c:	d8c01917 	ldw	r3,100(sp)
    b670:	19400117 	ldw	r5,4(r3)
    b674:	81400626 	beq	r16,r5,b690 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    b678:	80c00007 	ldb	r3,0(r16)
    b67c:	00800a84 	movi	r2,42
    b680:	18bf4d26 	beq	r3,r2,b3b8 <__alt_data_end+0xfc00b3b8>
    b684:	8009883a 	mov	r4,r16
    b688:	00104440 	call	10444 <strcmp>
    b68c:	10005c1e 	bne	r2,zero,b800 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    b690:	e4c00215 	stw	r19,8(fp)
    b694:	0005883a 	mov	r2,zero
    b698:	003f3b06 	br	b388 <__alt_data_end+0xfc00b388>
    b69c:	a0c00117 	ldw	r3,4(r20)
    b6a0:	d8800517 	ldw	r2,20(sp)
    b6a4:	1884b03a 	or	r2,r3,r2
    b6a8:	a0800115 	stw	r2,4(r20)
    b6ac:	003fad06 	br	b564 <__alt_data_end+0xfc00b564>
    b6b0:	10803fcc 	andi	r2,r2,255
    b6b4:	103f911e 	bne	r2,zero,b4fc <__alt_data_end+0xfc00b4fc>
    b6b8:	003faa06 	br	b564 <__alt_data_end+0xfc00b564>
    b6bc:	501b883a 	mov	r13,r10
    b6c0:	5080005c 	xori	r2,r10,1
    b6c4:	5007883a 	mov	r3,r10
    b6c8:	90bfbb0e 	bge	r18,r2,b5b8 <__alt_data_end+0xfc00b5b8>
    b6cc:	6880008c 	andi	r2,r13,2
    b6d0:	003f9f06 	br	b550 <__alt_data_end+0xfc00b550>
    b6d4:	d8c00417 	ldw	r3,16(sp)
    b6d8:	d9400517 	ldw	r5,20(sp)
    b6dc:	a0c00015 	stw	r3,0(r20)
    b6e0:	a1400115 	stw	r5,4(r20)
    b6e4:	18000526 	beq	r3,zero,b6fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    b6e8:	20001626 	beq	r4,zero,b744 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    b6ec:	d9400b17 	ldw	r5,44(sp)
    b6f0:	28c00217 	ldw	r3,8(r5)
    b6f4:	18c0004c 	andi	r3,r3,1
    b6f8:	183f2326 	beq	r3,zero,b388 <__alt_data_end+0xfc00b388>
    b6fc:	1021883a 	mov	r16,r2
    b700:	003f9806 	br	b564 <__alt_data_end+0xfc00b564>
    b704:	9280060e 	bge	r18,r10,b720 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    b708:	5080004c 	andi	r2,r10,1
    b70c:	10002426 	beq	r2,zero,b7a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    b710:	d8c00b17 	ldw	r3,44(sp)
    b714:	18800217 	ldw	r2,8(r3)
    b718:	1080008c 	andi	r2,r2,2
    b71c:	10003c26 	beq	r2,zero,b810 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    b720:	d9400417 	ldw	r5,16(sp)
    b724:	a8004216 	blt	r21,zero,b830 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    b728:	d8c01a17 	ldw	r3,104(sp)
    b72c:	2d45883a 	add	r2,r5,r21
    b730:	18805726 	beq	r3,r2,b890 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    b734:	7880005c 	xori	r2,r15,1
    b738:	781b883a 	mov	r13,r15
    b73c:	5007883a 	mov	r3,r10
    b740:	003fe106 	br	b6c8 <__alt_data_end+0xfc00b6c8>
    b744:	1021883a 	mov	r16,r2
    b748:	003f8806 	br	b56c <__alt_data_end+0xfc00b56c>
    b74c:	03c00184 	movi	r15,6
    b750:	00ffb016 	blt	zero,r3,b614 <__alt_data_end+0xfc00b614>
    b754:	7815883a 	mov	r10,r15
    b758:	7880008c 	andi	r2,r15,2
    b75c:	781b883a 	mov	r13,r15
    b760:	5007883a 	mov	r3,r10
    b764:	003f7a06 	br	b550 <__alt_data_end+0xfc00b550>
    b768:	a039883a 	mov	fp,r20
    b76c:	e0c00315 	stw	r3,12(fp)
    b770:	d8c00417 	ldw	r3,16(sp)
    b774:	a0c00015 	stw	r3,0(r20)
    b778:	d8c00517 	ldw	r3,20(sp)
    b77c:	a0c00115 	stw	r3,4(r20)
    b780:	003f0106 	br	b388 <__alt_data_end+0xfc00b388>
    b784:	002d883a 	mov	r22,zero
    b788:	003f1106 	br	b3d0 <__alt_data_end+0xfc00b3d0>
    b78c:	8005883a 	mov	r2,r16
    b790:	003efd06 	br	b388 <__alt_data_end+0xfc00b388>
    b794:	00bfff84 	movi	r2,-2
    b798:	b8bfbe1e 	bne	r23,r2,b694 <__alt_data_end+0xfc00b694>
    b79c:	003ef706 	br	b37c <__alt_data_end+0xfc00b37c>
    b7a0:	5080005c 	xori	r2,r10,1
    b7a4:	90bf840e 	bge	r18,r2,b5b8 <__alt_data_end+0xfc00b5b8>
    b7a8:	501b883a 	mov	r13,r10
    b7ac:	5080008c 	andi	r2,r10,2
    b7b0:	5007883a 	mov	r3,r10
    b7b4:	003f6606 	br	b550 <__alt_data_end+0xfc00b550>
    b7b8:	013fff84 	movi	r4,-2
    b7bc:	a9003226 	beq	r21,r4,b888 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    b7c0:	d9400917 	ldw	r5,36(sp)
    b7c4:	d9001a17 	ldw	r4,104(sp)
    b7c8:	d9c01917 	ldw	r7,100(sp)
    b7cc:	28800017 	ldw	r2,0(r5)
    b7d0:	d9000015 	stw	r4,0(sp)
    b7d4:	d9000917 	ldw	r4,36(sp)
    b7d8:	10800817 	ldw	r2,32(r2)
    b7dc:	a80b883a 	mov	r5,r21
    b7e0:	d8c00d15 	stw	r3,52(sp)
    b7e4:	db400c15 	stw	r13,48(sp)
    b7e8:	103ee83a 	callr	r2
    b7ec:	1015883a 	mov	r10,r2
    b7f0:	101f883a 	mov	r15,r2
    b7f4:	db400c17 	ldw	r13,48(sp)
    b7f8:	d8c00d17 	ldw	r3,52(sp)
    b7fc:	003f6906 	br	b5a4 <__alt_data_end+0xfc00b5a4>
    b800:	d8c00917 	ldw	r3,36(sp)
    b804:	19400117 	ldw	r5,4(r3)
    b808:	817ed31e 	bne	r16,r5,b358 <__alt_data_end+0xfc00b358>
    b80c:	003ed506 	br	b364 <__alt_data_end+0xfc00b364>
    b810:	5080005c 	xori	r2,r10,1
    b814:	90bfe416 	blt	r18,r2,b7a8 <__alt_data_end+0xfc00b7a8>
    b818:	003f6706 	br	b5b8 <__alt_data_end+0xfc00b5b8>
    b81c:	00800084 	movi	r2,2
    b820:	a0800315 	stw	r2,12(r20)
    b824:	a0000015 	stw	zero,0(r20)
    b828:	00800044 	movi	r2,1
    b82c:	003ed606 	br	b388 <__alt_data_end+0xfc00b388>
    b830:	013fff84 	movi	r4,-2
    b834:	a9002526 	beq	r21,r4,b8cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    b838:	d8c00917 	ldw	r3,36(sp)
    b83c:	d9c01917 	ldw	r7,100(sp)
    b840:	d9000917 	ldw	r4,36(sp)
    b844:	18800017 	ldw	r2,0(r3)
    b848:	d8c01a17 	ldw	r3,104(sp)
    b84c:	280d883a 	mov	r6,r5
    b850:	a80b883a 	mov	r5,r21
    b854:	d8c00015 	stw	r3,0(sp)
    b858:	10800817 	ldw	r2,32(r2)
    b85c:	da800c15 	stw	r10,48(sp)
    b860:	dbc00d15 	stw	r15,52(sp)
    b864:	103ee83a 	callr	r2
    b868:	da800c17 	ldw	r10,48(sp)
    b86c:	1007883a 	mov	r3,r2
    b870:	101b883a 	mov	r13,r2
    b874:	dbc00d17 	ldw	r15,52(sp)
    b878:	1284f03a 	xor	r2,r2,r10
    b87c:	003f2c06 	br	b530 <__alt_data_end+0xfc00b530>
    b880:	00800184 	movi	r2,6
    b884:	003ebe06 	br	b380 <__alt_data_end+0xfc00b380>
    b888:	00ff4b0e 	bge	zero,r3,b5b8 <__alt_data_end+0xfc00b5b8>
    b88c:	003f6006 	br	b610 <__alt_data_end+0xfc00b610>
    b890:	5080019c 	xori	r2,r10,6
    b894:	90800916 	blt	r18,r2,b8bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    b898:	50c0018c 	andi	r3,r10,6
    b89c:	90ff460e 	bge	r18,r3,b5b8 <__alt_data_end+0xfc00b5b8>
    b8a0:	003fde06 	br	b81c <__alt_data_end+0xfc00b81c>
    b8a4:	d8c01a17 	ldw	r3,104(sp)
    b8a8:	2d45883a 	add	r2,r5,r21
    b8ac:	18800326 	beq	r3,r2,b8bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    b8b0:	02800044 	movi	r10,1
    b8b4:	501f883a 	mov	r15,r10
    b8b8:	003f9e06 	br	b734 <__alt_data_end+0xfc00b734>
    b8bc:	03400184 	movi	r13,6
    b8c0:	00800084 	movi	r2,2
    b8c4:	6807883a 	mov	r3,r13
    b8c8:	003f1d06 	br	b540 <__alt_data_end+0xfc00b540>
    b8cc:	501b883a 	mov	r13,r10
    b8d0:	5080005c 	xori	r2,r10,1
    b8d4:	5007883a 	mov	r3,r10
    b8d8:	003f7b06 	br	b6c8 <__alt_data_end+0xfc00b6c8>

0000b8dc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    b8dc:	deffef04 	addi	sp,sp,-68
    b8e0:	ddc00e15 	stw	r23,56(sp)
    b8e4:	dd000b15 	stw	r20,44(sp)
    b8e8:	dc400815 	stw	r17,32(sp)
    b8ec:	3029883a 	mov	r20,r6
    b8f0:	dfc01015 	stw	ra,64(sp)
    b8f4:	df000f15 	stw	fp,60(sp)
    b8f8:	dd800d15 	stw	r22,52(sp)
    b8fc:	dd400c15 	stw	r21,48(sp)
    b900:	dcc00a15 	stw	r19,40(sp)
    b904:	dc800915 	stw	r18,36(sp)
    b908:	dc000715 	stw	r16,28(sp)
    b90c:	d9000515 	stw	r4,20(sp)
    b910:	2823883a 	mov	r17,r5
    b914:	382f883a 	mov	r23,r7
    b918:	000bcc40 	call	bcc4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    b91c:	100d883a 	mov	r6,r2
    b920:	10803fcc 	andi	r2,r2,255
    b924:	1000441e 	bne	r2,zero,ba38 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    b928:	bc000217 	ldw	r16,8(r23)
    b92c:	8080040c 	andi	r2,r16,16
    b930:	10000226 	beq	r2,zero,b93c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    b934:	d8c00517 	ldw	r3,20(sp)
    b938:	1c000217 	ldw	r16,8(r3)
    b93c:	d8c00517 	ldw	r3,20(sp)
    b940:	d8800517 	ldw	r2,20(sp)
    b944:	1f000317 	ldw	fp,12(r3)
    b948:	e01090fa 	slli	r8,fp,3
    b94c:	40c00304 	addi	r3,r8,12
    b950:	10ed883a 	add	r22,r2,r3
    b954:	80c0004c 	andi	r3,r16,1
    b958:	42000204 	addi	r8,r8,8
    b95c:	d8c00415 	stw	r3,16(sp)
    b960:	122b883a 	add	r21,r2,r8
    b964:	e0003226 	beq	fp,zero,ba30 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    b968:	b1800017 	ldw	r6,0(r22)
    b96c:	d8000015 	stw	zero,0(sp)
    b970:	d8000115 	stw	zero,4(sp)
    b974:	dc000215 	stw	r16,8(sp)
    b978:	d8000315 	stw	zero,12(sp)
    b97c:	34c0008c 	andi	r19,r6,2
    b980:	3480004c 	andi	r18,r6,1
    b984:	9800021e 	bne	r19,zero,b990 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    b988:	d8c00417 	ldw	r3,16(sp)
    b98c:	18002426 	beq	r3,zero,ba20 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    b990:	a0003626 	beq	r20,zero,ba6c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    b994:	300dd23a 	srai	r6,r6,8
    b998:	90000326 	beq	r18,zero,b9a8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    b99c:	a0800017 	ldw	r2,0(r20)
    b9a0:	118d883a 	add	r6,r2,r6
    b9a4:	31800017 	ldw	r6,0(r6)
    b9a8:	a18d883a 	add	r6,r20,r6
    b9ac:	a9000017 	ldw	r4,0(r21)
    b9b0:	d80f883a 	mov	r7,sp
    b9b4:	880b883a 	mov	r5,r17
    b9b8:	20800017 	ldw	r2,0(r4)
    b9bc:	10800617 	ldw	r2,24(r2)
    b9c0:	103ee83a 	callr	r2
    b9c4:	100d883a 	mov	r6,r2
    b9c8:	10803fcc 	andi	r2,r2,255
    b9cc:	10001426 	beq	r2,zero,ba20 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    b9d0:	d8800317 	ldw	r2,12(sp)
    b9d4:	00c00204 	movi	r3,8
    b9d8:	10c02626 	beq	r2,r3,ba74 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    b9dc:	d8800117 	ldw	r2,4(sp)
    b9e0:	00c000c4 	movi	r3,3
    b9e4:	1880040e 	bge	r3,r2,b9f8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    b9e8:	9800031e 	bne	r19,zero,b9f8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    b9ec:	00ffff44 	movi	r3,-3
    b9f0:	10c4703a 	and	r2,r2,r3
    b9f4:	d8800115 	stw	r2,4(sp)
    b9f8:	b9400317 	ldw	r5,12(r23)
    b9fc:	28002126 	beq	r5,zero,ba84 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    ba00:	b8800017 	ldw	r2,0(r23)
    ba04:	d9000017 	ldw	r4,0(sp)
    ba08:	11004d1e 	bne	r2,r4,bb40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    ba0c:	10003126 	beq	r2,zero,bad4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    ba10:	b9000117 	ldw	r4,4(r23)
    ba14:	d8800117 	ldw	r2,4(sp)
    ba18:	2084b03a 	or	r2,r4,r2
    ba1c:	b8800115 	stw	r2,4(r23)
    ba20:	e73fffc4 	addi	fp,fp,-1
    ba24:	b5bffe04 	addi	r22,r22,-8
    ba28:	ad7ffe04 	addi	r21,r21,-8
    ba2c:	e03fce1e 	bne	fp,zero,b968 <__alt_data_end+0xfc00b968>
    ba30:	b9800117 	ldw	r6,4(r23)
    ba34:	300cc03a 	cmpne	r6,r6,zero
    ba38:	3005883a 	mov	r2,r6
    ba3c:	dfc01017 	ldw	ra,64(sp)
    ba40:	df000f17 	ldw	fp,60(sp)
    ba44:	ddc00e17 	ldw	r23,56(sp)
    ba48:	dd800d17 	ldw	r22,52(sp)
    ba4c:	dd400c17 	ldw	r21,48(sp)
    ba50:	dd000b17 	ldw	r20,44(sp)
    ba54:	dcc00a17 	ldw	r19,40(sp)
    ba58:	dc800917 	ldw	r18,36(sp)
    ba5c:	dc400817 	ldw	r17,32(sp)
    ba60:	dc000717 	ldw	r16,28(sp)
    ba64:	dec01104 	addi	sp,sp,68
    ba68:	f800283a 	ret
    ba6c:	000d883a 	mov	r6,zero
    ba70:	003fce06 	br	b9ac <__alt_data_end+0xfc00b9ac>
    ba74:	903fd926 	beq	r18,zero,b9dc <__alt_data_end+0xfc00b9dc>
    ba78:	a8800017 	ldw	r2,0(r21)
    ba7c:	d8800315 	stw	r2,12(sp)
    ba80:	003fd606 	br	b9dc <__alt_data_end+0xfc00b9dc>
    ba84:	d9000017 	ldw	r4,0(sp)
    ba88:	d8800117 	ldw	r2,4(sp)
    ba8c:	00c000c4 	movi	r3,3
    ba90:	b9000015 	stw	r4,0(r23)
    ba94:	d9000217 	ldw	r4,8(sp)
    ba98:	b8800115 	stw	r2,4(r23)
    ba9c:	b9000215 	stw	r4,8(r23)
    baa0:	d9000317 	ldw	r4,12(sp)
    baa4:	b9000315 	stw	r4,12(r23)
    baa8:	18bfe30e 	bge	r3,r2,ba38 <__alt_data_end+0xfc00ba38>
    baac:	1100008c 	andi	r4,r2,2
    bab0:	20001926 	beq	r4,zero,bb18 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    bab4:	d8c00517 	ldw	r3,20(sp)
    bab8:	18800217 	ldw	r2,8(r3)
    babc:	1080004c 	andi	r2,r2,1
    bac0:	103fdd26 	beq	r2,zero,ba38 <__alt_data_end+0xfc00ba38>
    bac4:	e73fffc4 	addi	fp,fp,-1
    bac8:	b5bffe04 	addi	r22,r22,-8
    bacc:	ad7ffe04 	addi	r21,r21,-8
    bad0:	003fd606 	br	ba2c <__alt_data_end+0xfc00ba2c>
    bad4:	d8800317 	ldw	r2,12(sp)
    bad8:	00c00204 	movi	r3,8
    badc:	10c00b26 	beq	r2,r3,bb0c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bae0:	28c00a26 	beq	r5,r3,bb0c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bae4:	11000117 	ldw	r4,4(r2)
    bae8:	29400117 	ldw	r5,4(r5)
    baec:	217fc826 	beq	r4,r5,ba10 <__alt_data_end+0xfc00ba10>
    baf0:	20800007 	ldb	r2,0(r4)
    baf4:	00c00a84 	movi	r3,42
    baf8:	10c00426 	beq	r2,r3,bb0c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bafc:	d9800615 	stw	r6,24(sp)
    bb00:	00104440 	call	10444 <strcmp>
    bb04:	d9800617 	ldw	r6,24(sp)
    bb08:	103fc126 	beq	r2,zero,ba10 <__alt_data_end+0xfc00ba10>
    bb0c:	00800084 	movi	r2,2
    bb10:	b8800115 	stw	r2,4(r23)
    bb14:	003fc806 	br	ba38 <__alt_data_end+0xfc00ba38>
    bb18:	1080004c 	andi	r2,r2,1
    bb1c:	103fc626 	beq	r2,zero,ba38 <__alt_data_end+0xfc00ba38>
    bb20:	d8c00517 	ldw	r3,20(sp)
    bb24:	18800217 	ldw	r2,8(r3)
    bb28:	1080008c 	andi	r2,r2,2
    bb2c:	103fc226 	beq	r2,zero,ba38 <__alt_data_end+0xfc00ba38>
    bb30:	e73fffc4 	addi	fp,fp,-1
    bb34:	b5bffe04 	addi	r22,r22,-8
    bb38:	ad7ffe04 	addi	r21,r21,-8
    bb3c:	003fbb06 	br	ba2c <__alt_data_end+0xfc00ba2c>
    bb40:	00800084 	movi	r2,2
    bb44:	b8000015 	stw	zero,0(r23)
    bb48:	b8800115 	stw	r2,4(r23)
    bb4c:	003fba06 	br	ba38 <__alt_data_end+0xfc00ba38>

0000bb50 <_ZNSt9type_infoD1Ev>:
    bb50:	f800283a 	ret

0000bb54 <_ZNKSt9type_info14__is_pointer_pEv>:
    bb54:	0005883a 	mov	r2,zero
    bb58:	f800283a 	ret

0000bb5c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    bb5c:	0005883a 	mov	r2,zero
    bb60:	f800283a 	ret

0000bb64 <_ZNSt9type_infoD0Ev>:
    bb64:	000bbac1 	jmpi	bbac <_ZdlPv>

0000bb68 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    bb68:	21000117 	ldw	r4,4(r4)
    bb6c:	29400117 	ldw	r5,4(r5)
    bb70:	21400c26 	beq	r4,r5,bba4 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    bb74:	20c00007 	ldb	r3,0(r4)
    bb78:	00800a84 	movi	r2,42
    bb7c:	18800726 	beq	r3,r2,bb9c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    bb80:	deffff04 	addi	sp,sp,-4
    bb84:	dfc00015 	stw	ra,0(sp)
    bb88:	00104440 	call	10444 <strcmp>
    bb8c:	1005003a 	cmpeq	r2,r2,zero
    bb90:	dfc00017 	ldw	ra,0(sp)
    bb94:	dec00104 	addi	sp,sp,4
    bb98:	f800283a 	ret
    bb9c:	0005883a 	mov	r2,zero
    bba0:	f800283a 	ret
    bba4:	00800044 	movi	r2,1
    bba8:	f800283a 	ret

0000bbac <_ZdlPv>:
    bbac:	000f4381 	jmpi	f438 <free>

0000bbb0 <__cxa_pure_virtual>:
    bbb0:	014000f4 	movhi	r5,3
    bbb4:	deffff04 	addi	sp,sp,-4
    bbb8:	296d4b04 	addi	r5,r5,-19156
    bbbc:	018006c4 	movi	r6,27
    bbc0:	01000084 	movi	r4,2
    bbc4:	dfc00015 	stw	ra,0(sp)
    bbc8:	0020a080 	call	20a08 <write>
    bbcc:	000bf780 	call	bf78 <_ZSt9terminatev>

0000bbd0 <__cxa_deleted_virtual>:
    bbd0:	014000f4 	movhi	r5,3
    bbd4:	deffff04 	addi	sp,sp,-4
    bbd8:	296d5204 	addi	r5,r5,-19128
    bbdc:	01800784 	movi	r6,30
    bbe0:	01000084 	movi	r4,2
    bbe4:	dfc00015 	stw	ra,0(sp)
    bbe8:	0020a080 	call	20a08 <write>
    bbec:	000bf780 	call	bf78 <_ZSt9terminatev>

0000bbf0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    bbf0:	20800017 	ldw	r2,0(r4)
    bbf4:	defffa04 	addi	sp,sp,-24
    bbf8:	dc000415 	stw	r16,16(sp)
    bbfc:	10800617 	ldw	r2,24(r2)
    bc00:	3021883a 	mov	r16,r6
    bc04:	31800017 	ldw	r6,0(r6)
    bc08:	00c00404 	movi	r3,16
    bc0c:	d8c00215 	stw	r3,8(sp)
    bc10:	dfc00515 	stw	ra,20(sp)
    bc14:	d8000015 	stw	zero,0(sp)
    bc18:	d8000115 	stw	zero,4(sp)
    bc1c:	d8000315 	stw	zero,12(sp)
    bc20:	d80f883a 	mov	r7,sp
    bc24:	103ee83a 	callr	r2
    bc28:	d8800117 	ldw	r2,4(sp)
    bc2c:	00c00184 	movi	r3,6
    bc30:	1080018c 	andi	r2,r2,6
    bc34:	10c00526 	beq	r2,r3,bc4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    bc38:	0005883a 	mov	r2,zero
    bc3c:	dfc00517 	ldw	ra,20(sp)
    bc40:	dc000417 	ldw	r16,16(sp)
    bc44:	dec00604 	addi	sp,sp,24
    bc48:	f800283a 	ret
    bc4c:	d8c00017 	ldw	r3,0(sp)
    bc50:	00800044 	movi	r2,1
    bc54:	80c00015 	stw	r3,0(r16)
    bc58:	dfc00517 	ldw	ra,20(sp)
    bc5c:	dc000417 	ldw	r16,16(sp)
    bc60:	dec00604 	addi	sp,sp,24
    bc64:	f800283a 	ret

0000bc68 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    bc68:	d8800017 	ldw	r2,0(sp)
    bc6c:	11800226 	beq	r2,r6,bc78 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    bc70:	00800044 	movi	r2,1
    bc74:	f800283a 	ret
    bc78:	00800184 	movi	r2,6
    bc7c:	f800283a 	ret

0000bc80 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    bc80:	008000f4 	movhi	r2,3
    bc84:	10ad6804 	addi	r2,r2,-19040
    bc88:	20800015 	stw	r2,0(r4)
    bc8c:	000bb501 	jmpi	bb50 <_ZNSt9type_infoD1Ev>

0000bc90 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    bc90:	defffe04 	addi	sp,sp,-8
    bc94:	008000f4 	movhi	r2,3
    bc98:	dc000015 	stw	r16,0(sp)
    bc9c:	dfc00115 	stw	ra,4(sp)
    bca0:	10ad6804 	addi	r2,r2,-19040
    bca4:	20800015 	stw	r2,0(r4)
    bca8:	2021883a 	mov	r16,r4
    bcac:	000bb500 	call	bb50 <_ZNSt9type_infoD1Ev>
    bcb0:	8009883a 	mov	r4,r16
    bcb4:	dfc00117 	ldw	ra,4(sp)
    bcb8:	dc000017 	ldw	r16,0(sp)
    bcbc:	dec00204 	addi	sp,sp,8
    bcc0:	000bbac1 	jmpi	bbac <_ZdlPv>

0000bcc4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    bcc4:	21000117 	ldw	r4,4(r4)
    bcc8:	29400117 	ldw	r5,4(r5)
    bccc:	defffd04 	addi	sp,sp,-12
    bcd0:	dc400115 	stw	r17,4(sp)
    bcd4:	dc000015 	stw	r16,0(sp)
    bcd8:	dfc00215 	stw	ra,8(sp)
    bcdc:	3023883a 	mov	r17,r6
    bce0:	3821883a 	mov	r16,r7
    bce4:	21400526 	beq	r4,r5,bcfc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    bce8:	20c00007 	ldb	r3,0(r4)
    bcec:	00800a84 	movi	r2,42
    bcf0:	18800d26 	beq	r3,r2,bd28 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    bcf4:	00104440 	call	10444 <strcmp>
    bcf8:	10000b1e 	bne	r2,zero,bd28 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    bcfc:	00800204 	movi	r2,8
    bd00:	80800315 	stw	r2,12(r16)
    bd04:	00800184 	movi	r2,6
    bd08:	80800115 	stw	r2,4(r16)
    bd0c:	84400015 	stw	r17,0(r16)
    bd10:	00800044 	movi	r2,1
    bd14:	dfc00217 	ldw	ra,8(sp)
    bd18:	dc400117 	ldw	r17,4(sp)
    bd1c:	dc000017 	ldw	r16,0(sp)
    bd20:	dec00304 	addi	sp,sp,12
    bd24:	f800283a 	ret
    bd28:	0005883a 	mov	r2,zero
    bd2c:	003ff906 	br	bd14 <__alt_data_end+0xfc00bd14>

0000bd30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    bd30:	defffa04 	addi	sp,sp,-24
    bd34:	dc800415 	stw	r18,16(sp)
    bd38:	d8800817 	ldw	r2,32(sp)
    bd3c:	dc800617 	ldw	r18,24(sp)
    bd40:	dc400315 	stw	r17,12(sp)
    bd44:	dc000215 	stw	r16,8(sp)
    bd48:	dfc00515 	stw	ra,20(sp)
    bd4c:	dc400917 	ldw	r17,36(sp)
    bd50:	24000117 	ldw	r16,4(r4)
    bd54:	90801526 	beq	r18,r2,bdac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    bd58:	39400117 	ldw	r5,4(r7)
    bd5c:	2c000826 	beq	r5,r16,bd80 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    bd60:	80c00007 	ldb	r3,0(r16)
    bd64:	00800a84 	movi	r2,42
    bd68:	18800926 	beq	r3,r2,bd90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    bd6c:	8009883a 	mov	r4,r16
    bd70:	d9800115 	stw	r6,4(sp)
    bd74:	00104440 	call	10444 <strcmp>
    bd78:	d9800117 	ldw	r6,4(sp)
    bd7c:	1000041e 	bne	r2,zero,bd90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    bd80:	00800044 	movi	r2,1
    bd84:	8c800015 	stw	r18,0(r17)
    bd88:	89800115 	stw	r6,4(r17)
    bd8c:	88800315 	stw	r2,12(r17)
    bd90:	0005883a 	mov	r2,zero
    bd94:	dfc00517 	ldw	ra,20(sp)
    bd98:	dc800417 	ldw	r18,16(sp)
    bd9c:	dc400317 	ldw	r17,12(sp)
    bda0:	dc000217 	ldw	r16,8(sp)
    bda4:	dec00604 	addi	sp,sp,24
    bda8:	f800283a 	ret
    bdac:	d8800717 	ldw	r2,28(sp)
    bdb0:	11400117 	ldw	r5,4(r2)
    bdb4:	81400a26 	beq	r16,r5,bde0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    bdb8:	80c00007 	ldb	r3,0(r16)
    bdbc:	00800a84 	movi	r2,42
    bdc0:	18800c26 	beq	r3,r2,bdf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    bdc4:	8009883a 	mov	r4,r16
    bdc8:	d9800115 	stw	r6,4(sp)
    bdcc:	d9c00015 	stw	r7,0(sp)
    bdd0:	00104440 	call	10444 <strcmp>
    bdd4:	d9800117 	ldw	r6,4(sp)
    bdd8:	d9c00017 	ldw	r7,0(sp)
    bddc:	1000021e 	bne	r2,zero,bde8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    bde0:	89800215 	stw	r6,8(r17)
    bde4:	003fea06 	br	bd90 <__alt_data_end+0xfc00bd90>
    bde8:	39400117 	ldw	r5,4(r7)
    bdec:	817fdf1e 	bne	r16,r5,bd6c <__alt_data_end+0xfc00bd6c>
    bdf0:	003fe306 	br	bd80 <__alt_data_end+0xfc00bd80>
    bdf4:	38800117 	ldw	r2,4(r7)
    bdf8:	80bfe51e 	bne	r16,r2,bd90 <__alt_data_end+0xfc00bd90>
    bdfc:	003fe006 	br	bd80 <__alt_data_end+0xfc00bd80>

0000be00 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    be00:	20800117 	ldw	r2,4(r4)
    be04:	28c00117 	ldw	r3,4(r5)
    be08:	10c02926 	beq	r2,r3,beb0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    be0c:	defffb04 	addi	sp,sp,-20
    be10:	dcc00315 	stw	r19,12(sp)
    be14:	dc800215 	stw	r18,8(sp)
    be18:	dc400115 	stw	r17,4(sp)
    be1c:	dc000015 	stw	r16,0(sp)
    be20:	dfc00415 	stw	ra,16(sp)
    be24:	2821883a 	mov	r16,r5
    be28:	11400007 	ldb	r5,0(r2)
    be2c:	2025883a 	mov	r18,r4
    be30:	01000a84 	movi	r4,42
    be34:	3823883a 	mov	r17,r7
    be38:	3027883a 	mov	r19,r6
    be3c:	29000626 	beq	r5,r4,be58 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    be40:	180b883a 	mov	r5,r3
    be44:	1009883a 	mov	r4,r2
    be48:	00104440 	call	10444 <strcmp>
    be4c:	1000021e 	bne	r2,zero,be58 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    be50:	00800044 	movi	r2,1
    be54:	00000306 	br	be64 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    be58:	008000c4 	movi	r2,3
    be5c:	1440082e 	bgeu	r2,r17,be80 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    be60:	0005883a 	mov	r2,zero
    be64:	dfc00417 	ldw	ra,16(sp)
    be68:	dcc00317 	ldw	r19,12(sp)
    be6c:	dc800217 	ldw	r18,8(sp)
    be70:	dc400117 	ldw	r17,4(sp)
    be74:	dc000017 	ldw	r16,0(sp)
    be78:	dec00504 	addi	sp,sp,20
    be7c:	f800283a 	ret
    be80:	80800017 	ldw	r2,0(r16)
    be84:	980d883a 	mov	r6,r19
    be88:	900b883a 	mov	r5,r18
    be8c:	10800517 	ldw	r2,20(r2)
    be90:	8009883a 	mov	r4,r16
    be94:	dfc00417 	ldw	ra,16(sp)
    be98:	dcc00317 	ldw	r19,12(sp)
    be9c:	dc800217 	ldw	r18,8(sp)
    bea0:	dc400117 	ldw	r17,4(sp)
    bea4:	dc000017 	ldw	r16,0(sp)
    bea8:	dec00504 	addi	sp,sp,20
    beac:	1000683a 	jmp	r2
    beb0:	00800044 	movi	r2,1
    beb4:	f800283a 	ret

0000beb8 <_ZN10__cxxabiv111__terminateEPFvvE>:
    beb8:	00800074 	movhi	r2,1
    bebc:	deffef04 	addi	sp,sp,-68
    bec0:	10b20804 	addi	r2,r2,-14304
    bec4:	d8800615 	stw	r2,24(sp)
    bec8:	008000b4 	movhi	r2,2
    becc:	1092b204 	addi	r2,r2,19144
    bed0:	d8800715 	stw	r2,28(sp)
    bed4:	00800074 	movhi	r2,1
    bed8:	10afc404 	addi	r2,r2,-16624
    bedc:	d9000d15 	stw	r4,52(sp)
    bee0:	d809883a 	mov	r4,sp
    bee4:	d8800915 	stw	r2,36(sp)
    bee8:	dfc01015 	stw	ra,64(sp)
    beec:	df000f15 	stw	fp,60(sp)
    bef0:	dec00815 	stw	sp,32(sp)
    bef4:	dec00a15 	stw	sp,40(sp)
    bef8:	000f0440 	call	f044 <_Unwind_SjLj_Register>
    befc:	00800044 	movi	r2,1
    bf00:	d8800115 	stw	r2,4(sp)
    bf04:	d8800d17 	ldw	r2,52(sp)
    bf08:	103ee83a 	callr	r2
    bf0c:	000f3c00 	call	f3c0 <abort>
    bf10:	d8c00217 	ldw	r3,8(sp)
    bf14:	d8800117 	ldw	r2,4(sp)
    bf18:	d8c00d15 	stw	r3,52(sp)
    bf1c:	d8c00317 	ldw	r3,12(sp)
    bf20:	d8c00e15 	stw	r3,56(sp)
    bf24:	10000b26 	beq	r2,zero,bf54 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    bf28:	10bfffc4 	addi	r2,r2,-1
    bf2c:	10000126 	beq	r2,zero,bf34 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    bf30:	003b68fa 	trap	3
    bf34:	d8000115 	stw	zero,4(sp)
    bf38:	000d2640 	call	d264 <__cxa_end_catch>
    bf3c:	d8c00e17 	ldw	r3,56(sp)
    bf40:	00bfffc4 	movi	r2,-1
    bf44:	18800826 	beq	r3,r2,bf68 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    bf48:	d9000d17 	ldw	r4,52(sp)
    bf4c:	d8800115 	stw	r2,4(sp)
    bf50:	000f2400 	call	f240 <_Unwind_SjLj_Resume>
    bf54:	d9000d17 	ldw	r4,52(sp)
    bf58:	000d1b00 	call	d1b0 <__cxa_begin_catch>
    bf5c:	00800084 	movi	r2,2
    bf60:	d8800115 	stw	r2,4(sp)
    bf64:	000f3c00 	call	f3c0 <abort>
    bf68:	d8800e17 	ldw	r2,56(sp)
    bf6c:	d9000d17 	ldw	r4,52(sp)
    bf70:	d8800115 	stw	r2,4(sp)
    bf74:	000ce200 	call	ce20 <__cxa_call_unexpected>

0000bf78 <_ZSt9terminatev>:
    bf78:	008000f4 	movhi	r2,3
    bf7c:	10baea04 	addi	r2,r2,-5208
    bf80:	11000017 	ldw	r4,0(r2)
    bf84:	deffff04 	addi	sp,sp,-4
    bf88:	dfc00015 	stw	ra,0(sp)
    bf8c:	000beb80 	call	beb8 <_ZN10__cxxabiv111__terminateEPFvvE>

0000bf90 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    bf90:	deffff04 	addi	sp,sp,-4
    bf94:	dfc00015 	stw	ra,0(sp)
    bf98:	203ee83a 	callr	r4
    bf9c:	000bf780 	call	bf78 <_ZSt9terminatev>

0000bfa0 <_ZSt10unexpectedv>:
    bfa0:	008000f4 	movhi	r2,3
    bfa4:	10bae904 	addi	r2,r2,-5212
    bfa8:	11000017 	ldw	r4,0(r2)
    bfac:	deffff04 	addi	sp,sp,-4
    bfb0:	dfc00015 	stw	ra,0(sp)
    bfb4:	000bf900 	call	bf90 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000bfb8 <_ZSt13set_terminatePFvvE>:
    bfb8:	00c000f4 	movhi	r3,3
    bfbc:	18faea04 	addi	r3,r3,-5208
    bfc0:	18800017 	ldw	r2,0(r3)
    bfc4:	19000015 	stw	r4,0(r3)
    bfc8:	f800283a 	ret

0000bfcc <_ZSt13get_terminatev>:
    bfcc:	008000f4 	movhi	r2,3
    bfd0:	10baea04 	addi	r2,r2,-5208
    bfd4:	10800017 	ldw	r2,0(r2)
    bfd8:	f800283a 	ret

0000bfdc <_ZSt14set_unexpectedPFvvE>:
    bfdc:	00c000f4 	movhi	r3,3
    bfe0:	18fae904 	addi	r3,r3,-5212
    bfe4:	18800017 	ldw	r2,0(r3)
    bfe8:	19000015 	stw	r4,0(r3)
    bfec:	f800283a 	ret

0000bff0 <_ZSt14get_unexpectedv>:
    bff0:	008000f4 	movhi	r2,3
    bff4:	10bae904 	addi	r2,r2,-5212
    bff8:	10800017 	ldw	r2,0(r2)
    bffc:	f800283a 	ret

0000c000 <_ZL21size_of_encoded_valueh>:
    c000:	deffff04 	addi	sp,sp,-4
    c004:	dfc00015 	stw	ra,0(sp)
    c008:	20c03fcc 	andi	r3,r4,255
    c00c:	00803fc4 	movi	r2,255
    c010:	18802026 	beq	r3,r2,c094 <_ZL21size_of_encoded_valueh+0x94>
    c014:	210001cc 	andi	r4,r4,7
    c018:	00800144 	movi	r2,5
    c01c:	11001c36 	bltu	r2,r4,c090 <_ZL21size_of_encoded_valueh+0x90>
    c020:	200890ba 	slli	r4,r4,2
    c024:	00800074 	movhi	r2,1
    c028:	10b00e04 	addi	r2,r2,-16328
    c02c:	2089883a 	add	r4,r4,r2
    c030:	20800017 	ldw	r2,0(r4)
    c034:	1000683a 	jmp	r2
    c038:	0000c050 	cmplti	zero,zero,769
    c03c:	0000c090 	cmplti	zero,zero,770
    c040:	0000c060 	cmpeqi	zero,zero,769
    c044:	0000c050 	cmplti	zero,zero,769
    c048:	0000c080 	call	c08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x6c>
    c04c:	0000c070 	cmpltui	zero,zero,769
    c050:	00800104 	movi	r2,4
    c054:	dfc00017 	ldw	ra,0(sp)
    c058:	dec00104 	addi	sp,sp,4
    c05c:	f800283a 	ret
    c060:	00800084 	movi	r2,2
    c064:	dfc00017 	ldw	ra,0(sp)
    c068:	dec00104 	addi	sp,sp,4
    c06c:	f800283a 	ret
    c070:	00800044 	movi	r2,1
    c074:	dfc00017 	ldw	ra,0(sp)
    c078:	dec00104 	addi	sp,sp,4
    c07c:	f800283a 	ret
    c080:	00800204 	movi	r2,8
    c084:	dfc00017 	ldw	ra,0(sp)
    c088:	dec00104 	addi	sp,sp,4
    c08c:	f800283a 	ret
    c090:	000f3c00 	call	f3c0 <abort>
    c094:	0005883a 	mov	r2,zero
    c098:	dfc00017 	ldw	ra,0(sp)
    c09c:	dec00104 	addi	sp,sp,4
    c0a0:	f800283a 	ret

0000c0a4 <_ZL28read_encoded_value_with_basehjPKhPj>:
    c0a4:	deffff04 	addi	sp,sp,-4
    c0a8:	dfc00015 	stw	ra,0(sp)
    c0ac:	20c03fcc 	andi	r3,r4,255
    c0b0:	00801404 	movi	r2,80
    c0b4:	18807326 	beq	r3,r2,c284 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    c0b8:	20c003cc 	andi	r3,r4,15
    c0bc:	00800304 	movi	r2,12
    c0c0:	10c06f36 	bltu	r2,r3,c280 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    c0c4:	180690ba 	slli	r3,r3,2
    c0c8:	02000074 	movhi	r8,1
    c0cc:	42303704 	addi	r8,r8,-16164
    c0d0:	1a07883a 	add	r3,r3,r8
    c0d4:	18800017 	ldw	r2,0(r3)
    c0d8:	1000683a 	jmp	r2
    c0dc:	0000c110 	cmplti	zero,zero,772
    c0e0:	0000c22c 	andhi	zero,zero,776
    c0e4:	0000c268 	cmpgeui	zero,zero,777
    c0e8:	0000c110 	cmplti	zero,zero,772
    c0ec:	0000c174 	movhi	zero,773
    c0f0:	0000c1c8 	cmpgei	zero,zero,775
    c0f4:	0000c280 	call	c28 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x8c>
    c0f8:	0000c280 	call	c28 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x8c>
    c0fc:	0000c280 	call	c28 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x8c>
    c100:	0000c1d4 	movui	zero,775
    c104:	0000c1a4 	muli	zero,zero,774
    c108:	0000c110 	cmplti	zero,zero,772
    c10c:	0000c174 	movhi	zero,773
    c110:	30800043 	ldbu	r2,1(r6)
    c114:	30c00083 	ldbu	r3,2(r6)
    c118:	324000c3 	ldbu	r9,3(r6)
    c11c:	32000003 	ldbu	r8,0(r6)
    c120:	1004923a 	slli	r2,r2,8
    c124:	1806943a 	slli	r3,r3,16
    c128:	4812963a 	slli	r9,r9,24
    c12c:	1204b03a 	or	r2,r2,r8
    c130:	1884b03a 	or	r2,r3,r2
    c134:	4886b03a 	or	r3,r9,r2
    c138:	30800104 	addi	r2,r6,4
    c13c:	18000926 	beq	r3,zero,c164 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    c140:	22001c0c 	andi	r8,r4,112
    c144:	02400404 	movi	r9,16
    c148:	42405726 	beq	r8,r9,c2a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    c14c:	21003fcc 	andi	r4,r4,255
    c150:	2100201c 	xori	r4,r4,128
    c154:	213fe004 	addi	r4,r4,-128
    c158:	1947883a 	add	r3,r3,r5
    c15c:	2000010e 	bge	r4,zero,c164 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    c160:	18c00017 	ldw	r3,0(r3)
    c164:	38c00015 	stw	r3,0(r7)
    c168:	dfc00017 	ldw	ra,0(sp)
    c16c:	dec00104 	addi	sp,sp,4
    c170:	f800283a 	ret
    c174:	30800043 	ldbu	r2,1(r6)
    c178:	30c00083 	ldbu	r3,2(r6)
    c17c:	324000c3 	ldbu	r9,3(r6)
    c180:	32000003 	ldbu	r8,0(r6)
    c184:	1004923a 	slli	r2,r2,8
    c188:	1806943a 	slli	r3,r3,16
    c18c:	4812963a 	slli	r9,r9,24
    c190:	1204b03a 	or	r2,r2,r8
    c194:	1884b03a 	or	r2,r3,r2
    c198:	4886b03a 	or	r3,r9,r2
    c19c:	30800204 	addi	r2,r6,8
    c1a0:	003fe606 	br	c13c <__alt_data_end+0xfc00c13c>
    c1a4:	30c00043 	ldbu	r3,1(r6)
    c1a8:	32000003 	ldbu	r8,0(r6)
    c1ac:	30800084 	addi	r2,r6,2
    c1b0:	1806923a 	slli	r3,r3,8
    c1b4:	1a06b03a 	or	r3,r3,r8
    c1b8:	18ffffcc 	andi	r3,r3,65535
    c1bc:	18e0001c 	xori	r3,r3,32768
    c1c0:	18e00004 	addi	r3,r3,-32768
    c1c4:	003fdd06 	br	c13c <__alt_data_end+0xfc00c13c>
    c1c8:	30c00003 	ldbu	r3,0(r6)
    c1cc:	30800044 	addi	r2,r6,1
    c1d0:	003fda06 	br	c13c <__alt_data_end+0xfc00c13c>
    c1d4:	3017883a 	mov	r11,r6
    c1d8:	0007883a 	mov	r3,zero
    c1dc:	0013883a 	mov	r9,zero
    c1e0:	5a800003 	ldbu	r10,0(r11)
    c1e4:	58800044 	addi	r2,r11,1
    c1e8:	1017883a 	mov	r11,r2
    c1ec:	52001fcc 	andi	r8,r10,127
    c1f0:	4250983a 	sll	r8,r8,r9
    c1f4:	53003fcc 	andi	r12,r10,255
    c1f8:	6300201c 	xori	r12,r12,128
    c1fc:	633fe004 	addi	r12,r12,-128
    c200:	1a06b03a 	or	r3,r3,r8
    c204:	4a4001c4 	addi	r9,r9,7
    c208:	603ff516 	blt	r12,zero,c1e0 <__alt_data_end+0xfc00c1e0>
    c20c:	020007c4 	movi	r8,31
    c210:	427fca36 	bltu	r8,r9,c13c <__alt_data_end+0xfc00c13c>
    c214:	5280100c 	andi	r10,r10,64
    c218:	503fc826 	beq	r10,zero,c13c <__alt_data_end+0xfc00c13c>
    c21c:	023fffc4 	movi	r8,-1
    c220:	4252983a 	sll	r9,r8,r9
    c224:	1a46b03a 	or	r3,r3,r9
    c228:	003fc506 	br	c140 <__alt_data_end+0xfc00c140>
    c22c:	3017883a 	mov	r11,r6
    c230:	0007883a 	mov	r3,zero
    c234:	0015883a 	mov	r10,zero
    c238:	5a000003 	ldbu	r8,0(r11)
    c23c:	58800044 	addi	r2,r11,1
    c240:	1017883a 	mov	r11,r2
    c244:	42401fcc 	andi	r9,r8,127
    c248:	4a92983a 	sll	r9,r9,r10
    c24c:	42003fcc 	andi	r8,r8,255
    c250:	4200201c 	xori	r8,r8,128
    c254:	423fe004 	addi	r8,r8,-128
    c258:	1a46b03a 	or	r3,r3,r9
    c25c:	528001c4 	addi	r10,r10,7
    c260:	403ff516 	blt	r8,zero,c238 <__alt_data_end+0xfc00c238>
    c264:	003fb506 	br	c13c <__alt_data_end+0xfc00c13c>
    c268:	30c00043 	ldbu	r3,1(r6)
    c26c:	32000003 	ldbu	r8,0(r6)
    c270:	30800084 	addi	r2,r6,2
    c274:	1806923a 	slli	r3,r3,8
    c278:	1a06b03a 	or	r3,r3,r8
    c27c:	003faf06 	br	c13c <__alt_data_end+0xfc00c13c>
    c280:	000f3c00 	call	f3c0 <abort>
    c284:	308000c4 	addi	r2,r6,3
    c288:	00ffff04 	movi	r3,-4
    c28c:	10c4703a 	and	r2,r2,r3
    c290:	10c00017 	ldw	r3,0(r2)
    c294:	10800104 	addi	r2,r2,4
    c298:	38c00015 	stw	r3,0(r7)
    c29c:	dfc00017 	ldw	ra,0(sp)
    c2a0:	dec00104 	addi	sp,sp,4
    c2a4:	f800283a 	ret
    c2a8:	300b883a 	mov	r5,r6
    c2ac:	003fa706 	br	c14c <__alt_data_end+0xfc00c14c>

0000c2b0 <_ZL15get_ttype_entryP16lsda_header_infom>:
    c2b0:	defffc04 	addi	sp,sp,-16
    c2b4:	dfc00315 	stw	ra,12(sp)
    c2b8:	dc000215 	stw	r16,8(sp)
    c2bc:	2021883a 	mov	r16,r4
    c2c0:	21000503 	ldbu	r4,20(r4)
    c2c4:	d9400115 	stw	r5,4(sp)
    c2c8:	000c0000 	call	c000 <_ZL21size_of_encoded_valueh>
    c2cc:	d9400117 	ldw	r5,4(sp)
    c2d0:	1009883a 	mov	r4,r2
    c2d4:	000d8b80 	call	d8b8 <__mulsi3>
    c2d8:	81800317 	ldw	r6,12(r16)
    c2dc:	81400217 	ldw	r5,8(r16)
    c2e0:	81000503 	ldbu	r4,20(r16)
    c2e4:	d80f883a 	mov	r7,sp
    c2e8:	308dc83a 	sub	r6,r6,r2
    c2ec:	000c0a40 	call	c0a4 <_ZL28read_encoded_value_with_basehjPKhPj>
    c2f0:	d8800017 	ldw	r2,0(sp)
    c2f4:	dfc00317 	ldw	ra,12(sp)
    c2f8:	dc000217 	ldw	r16,8(sp)
    c2fc:	dec00404 	addi	sp,sp,16
    c300:	f800283a 	ret

0000c304 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    c304:	deffff04 	addi	sp,sp,-4
    c308:	dfc00015 	stw	ra,0(sp)
    c30c:	20c03fcc 	andi	r3,r4,255
    c310:	00803fc4 	movi	r2,255
    c314:	18800e26 	beq	r3,r2,c350 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    c318:	20801c0c 	andi	r2,r4,112
    c31c:	00c00804 	movi	r3,32
    c320:	10c01726 	beq	r2,r3,c380 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    c324:	18800e2e 	bgeu	r3,r2,c360 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    c328:	00c01004 	movi	r3,64
    c32c:	10c01026 	beq	r2,r3,c370 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    c330:	00c01404 	movi	r3,80
    c334:	10c00626 	beq	r2,r3,c350 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    c338:	00c00c04 	movi	r3,48
    c33c:	10c00b1e 	bne	r2,r3,c36c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    c340:	2809883a 	mov	r4,r5
    c344:	dfc00017 	ldw	ra,0(sp)
    c348:	dec00104 	addi	sp,sp,4
    c34c:	000f11c1 	jmpi	f11c <_Unwind_GetDataRelBase>
    c350:	0005883a 	mov	r2,zero
    c354:	dfc00017 	ldw	ra,0(sp)
    c358:	dec00104 	addi	sp,sp,4
    c35c:	f800283a 	ret
    c360:	103ffb26 	beq	r2,zero,c350 <__alt_data_end+0xfc00c350>
    c364:	00c00404 	movi	r3,16
    c368:	10fff926 	beq	r2,r3,c350 <__alt_data_end+0xfc00c350>
    c36c:	000f3c00 	call	f3c0 <abort>
    c370:	2809883a 	mov	r4,r5
    c374:	dfc00017 	ldw	ra,0(sp)
    c378:	dec00104 	addi	sp,sp,4
    c37c:	000f10c1 	jmpi	f10c <_Unwind_GetRegionStart>
    c380:	2809883a 	mov	r4,r5
    c384:	dfc00017 	ldw	ra,0(sp)
    c388:	dec00104 	addi	sp,sp,4
    c38c:	000f1241 	jmpi	f124 <_Unwind_GetTextRelBase>

0000c390 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    c390:	defffb04 	addi	sp,sp,-20
    c394:	dcc00315 	stw	r19,12(sp)
    c398:	dc400115 	stw	r17,4(sp)
    c39c:	dc000015 	stw	r16,0(sp)
    c3a0:	dfc00415 	stw	ra,16(sp)
    c3a4:	dc800215 	stw	r18,8(sp)
    c3a8:	2027883a 	mov	r19,r4
    c3ac:	2821883a 	mov	r16,r5
    c3b0:	3023883a 	mov	r17,r6
    c3b4:	20003f26 	beq	r4,zero,c4b4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    c3b8:	000f10c0 	call	f10c <_Unwind_GetRegionStart>
    c3bc:	88800015 	stw	r2,0(r17)
    c3c0:	84800003 	ldbu	r18,0(r16)
    c3c4:	00c03fc4 	movi	r3,255
    c3c8:	84000044 	addi	r16,r16,1
    c3cc:	90c03726 	beq	r18,r3,c4ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    c3d0:	980b883a 	mov	r5,r19
    c3d4:	9009883a 	mov	r4,r18
    c3d8:	000c3040 	call	c304 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c3dc:	800d883a 	mov	r6,r16
    c3e0:	89c00104 	addi	r7,r17,4
    c3e4:	100b883a 	mov	r5,r2
    c3e8:	9009883a 	mov	r4,r18
    c3ec:	000c0a40 	call	c0a4 <_ZL28read_encoded_value_with_basehjPKhPj>
    c3f0:	1021883a 	mov	r16,r2
    c3f4:	80c00003 	ldbu	r3,0(r16)
    c3f8:	01003fc4 	movi	r4,255
    c3fc:	80800044 	addi	r2,r16,1
    c400:	88c00505 	stb	r3,20(r17)
    c404:	18c03fcc 	andi	r3,r3,255
    c408:	19002c26 	beq	r3,r4,c4bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    c40c:	100f883a 	mov	r7,r2
    c410:	000d883a 	mov	r6,zero
    c414:	000b883a 	mov	r5,zero
    c418:	38c00003 	ldbu	r3,0(r7)
    c41c:	10800044 	addi	r2,r2,1
    c420:	100f883a 	mov	r7,r2
    c424:	19001fcc 	andi	r4,r3,127
    c428:	2148983a 	sll	r4,r4,r5
    c42c:	18c03fcc 	andi	r3,r3,255
    c430:	18c0201c 	xori	r3,r3,128
    c434:	18ffe004 	addi	r3,r3,-128
    c438:	310cb03a 	or	r6,r6,r4
    c43c:	294001c4 	addi	r5,r5,7
    c440:	183ff516 	blt	r3,zero,c418 <__alt_data_end+0xfc00c418>
    c444:	118d883a 	add	r6,r2,r6
    c448:	89800315 	stw	r6,12(r17)
    c44c:	10c00003 	ldbu	r3,0(r2)
    c450:	000d883a 	mov	r6,zero
    c454:	10800044 	addi	r2,r2,1
    c458:	88c00545 	stb	r3,21(r17)
    c45c:	000b883a 	mov	r5,zero
    c460:	10c00003 	ldbu	r3,0(r2)
    c464:	10800044 	addi	r2,r2,1
    c468:	19001fcc 	andi	r4,r3,127
    c46c:	2148983a 	sll	r4,r4,r5
    c470:	18c03fcc 	andi	r3,r3,255
    c474:	18c0201c 	xori	r3,r3,128
    c478:	18ffe004 	addi	r3,r3,-128
    c47c:	310cb03a 	or	r6,r6,r4
    c480:	294001c4 	addi	r5,r5,7
    c484:	183ff616 	blt	r3,zero,c460 <__alt_data_end+0xfc00c460>
    c488:	118d883a 	add	r6,r2,r6
    c48c:	89800415 	stw	r6,16(r17)
    c490:	dfc00417 	ldw	ra,16(sp)
    c494:	dcc00317 	ldw	r19,12(sp)
    c498:	dc800217 	ldw	r18,8(sp)
    c49c:	dc400117 	ldw	r17,4(sp)
    c4a0:	dc000017 	ldw	r16,0(sp)
    c4a4:	dec00504 	addi	sp,sp,20
    c4a8:	f800283a 	ret
    c4ac:	88800115 	stw	r2,4(r17)
    c4b0:	003fd006 	br	c3f4 <__alt_data_end+0xfc00c3f4>
    c4b4:	0005883a 	mov	r2,zero
    c4b8:	003fc006 	br	c3bc <__alt_data_end+0xfc00c3bc>
    c4bc:	88000315 	stw	zero,12(r17)
    c4c0:	003fe206 	br	c44c <__alt_data_end+0xfc00c44c>

0000c4c4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    c4c4:	28800017 	ldw	r2,0(r5)
    c4c8:	30c00017 	ldw	r3,0(r6)
    c4cc:	defffb04 	addi	sp,sp,-20
    c4d0:	10800217 	ldw	r2,8(r2)
    c4d4:	dc400315 	stw	r17,12(sp)
    c4d8:	dc000215 	stw	r16,8(sp)
    c4dc:	d9400115 	stw	r5,4(sp)
    c4e0:	dfc00415 	stw	ra,16(sp)
    c4e4:	2021883a 	mov	r16,r4
    c4e8:	d8c00015 	stw	r3,0(sp)
    c4ec:	2809883a 	mov	r4,r5
    c4f0:	3023883a 	mov	r17,r6
    c4f4:	103ee83a 	callr	r2
    c4f8:	10803fcc 	andi	r2,r2,255
    c4fc:	d9400117 	ldw	r5,4(sp)
    c500:	10000326 	beq	r2,zero,c510 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    c504:	d8800017 	ldw	r2,0(sp)
    c508:	10800017 	ldw	r2,0(r2)
    c50c:	d8800015 	stw	r2,0(sp)
    c510:	80800017 	ldw	r2,0(r16)
    c514:	01c00044 	movi	r7,1
    c518:	d80d883a 	mov	r6,sp
    c51c:	10800417 	ldw	r2,16(r2)
    c520:	8009883a 	mov	r4,r16
    c524:	103ee83a 	callr	r2
    c528:	10c03fcc 	andi	r3,r2,255
    c52c:	18000226 	beq	r3,zero,c538 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    c530:	d8c00017 	ldw	r3,0(sp)
    c534:	88c00015 	stw	r3,0(r17)
    c538:	dfc00417 	ldw	ra,16(sp)
    c53c:	dc400317 	ldw	r17,12(sp)
    c540:	dc000217 	ldw	r16,8(sp)
    c544:	dec00504 	addi	sp,sp,20
    c548:	f800283a 	ret

0000c54c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    c54c:	defff304 	addi	sp,sp,-52
    c550:	dc800615 	stw	r18,24(sp)
    c554:	3825d23a 	srai	r18,r7,8
    c558:	dd000815 	stw	r20,32(sp)
    c55c:	dcc00715 	stw	r19,28(sp)
    c560:	dfc00c15 	stw	ra,48(sp)
    c564:	ddc00b15 	stw	r23,44(sp)
    c568:	dd800a15 	stw	r22,40(sp)
    c56c:	dd400915 	stw	r21,36(sp)
    c570:	dc400515 	stw	r17,20(sp)
    c574:	dc000415 	stw	r16,16(sp)
    c578:	d9400215 	stw	r5,8(sp)
    c57c:	3827883a 	mov	r19,r7
    c580:	2029883a 	mov	r20,r4
    c584:	9000010e 	bge	r18,zero,c58c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    c588:	04a5c83a 	sub	r18,zero,r18
    c58c:	000b883a 	mov	r5,zero
    c590:	01000144 	movi	r4,5
    c594:	d9800315 	stw	r6,12(sp)
    c598:	000c3040 	call	c304 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c59c:	d9800317 	ldw	r6,12(sp)
    c5a0:	d9c00104 	addi	r7,sp,4
    c5a4:	100b883a 	mov	r5,r2
    c5a8:	01000144 	movi	r4,5
    c5ac:	000c0a40 	call	c0a4 <_ZL28read_encoded_value_with_basehjPKhPj>
    c5b0:	017ffe44 	movi	r5,-7
    c5b4:	1009883a 	mov	r4,r2
    c5b8:	1021883a 	mov	r16,r2
    c5bc:	000d8b80 	call	d8b8 <__mulsi3>
    c5c0:	102d883a 	mov	r22,r2
    c5c4:	0023883a 	mov	r17,zero
    c5c8:	85400003 	ldbu	r21,0(r16)
    c5cc:	8009883a 	mov	r4,r16
    c5d0:	014001c4 	movi	r5,7
    c5d4:	000d8b80 	call	d8b8 <__mulsi3>
    c5d8:	a8c01fcc 	andi	r3,r21,127
    c5dc:	1585883a 	add	r2,r2,r22
    c5e0:	1886983a 	sll	r3,r3,r2
    c5e4:	ad403fcc 	andi	r21,r21,255
    c5e8:	ad40201c 	xori	r21,r21,128
    c5ec:	ad7fe004 	addi	r21,r21,-128
    c5f0:	84000044 	addi	r16,r16,1
    c5f4:	88e2b03a 	or	r17,r17,r3
    c5f8:	a83ff316 	blt	r21,zero,c5c8 <__alt_data_end+0xfc00c5c8>
    c5fc:	8461883a 	add	r16,r16,r17
    c600:	017ffe44 	movi	r5,-7
    c604:	8009883a 	mov	r4,r16
    c608:	000d8b80 	call	d8b8 <__mulsi3>
    c60c:	102d883a 	mov	r22,r2
    c610:	002b883a 	mov	r21,zero
    c614:	84400003 	ldbu	r17,0(r16)
    c618:	8009883a 	mov	r4,r16
    c61c:	014001c4 	movi	r5,7
    c620:	000d8b80 	call	d8b8 <__mulsi3>
    c624:	88c01fcc 	andi	r3,r17,127
    c628:	1585883a 	add	r2,r2,r22
    c62c:	1886983a 	sll	r3,r3,r2
    c630:	8c403fcc 	andi	r17,r17,255
    c634:	8c40201c 	xori	r17,r17,128
    c638:	8c7fe004 	addi	r17,r17,-128
    c63c:	84000044 	addi	r16,r16,1
    c640:	a8eab03a 	or	r21,r21,r3
    c644:	883ff316 	blt	r17,zero,c614 <__alt_data_end+0xfc00c614>
    c648:	94403fcc 	andi	r17,r18,255
    c64c:	8c7fffc4 	addi	r17,r17,-1
    c650:	8463883a 	add	r17,r16,r17
    c654:	ad4000c4 	addi	r21,r21,3
    c658:	00bfff04 	movi	r2,-4
    c65c:	ac21883a 	add	r16,r21,r16
    c660:	017ffe44 	movi	r5,-7
    c664:	8809883a 	mov	r4,r17
    c668:	80a0703a 	and	r16,r16,r2
    c66c:	000d8b80 	call	d8b8 <__mulsi3>
    c670:	0025883a 	mov	r18,zero
    c674:	102f883a 	mov	r23,r2
    c678:	8d800003 	ldbu	r22,0(r17)
    c67c:	8809883a 	mov	r4,r17
    c680:	014001c4 	movi	r5,7
    c684:	000d8b80 	call	d8b8 <__mulsi3>
    c688:	b0c01fcc 	andi	r3,r22,127
    c68c:	15c5883a 	add	r2,r2,r23
    c690:	1886983a 	sll	r3,r3,r2
    c694:	b5803fcc 	andi	r22,r22,255
    c698:	b580201c 	xori	r22,r22,128
    c69c:	8d400044 	addi	r21,r17,1
    c6a0:	b5bfe004 	addi	r22,r22,-128
    c6a4:	90e4b03a 	or	r18,r18,r3
    c6a8:	a823883a 	mov	r17,r21
    c6ac:	b03ff216 	blt	r22,zero,c678 <__alt_data_end+0xfc00c678>
    c6b0:	9cc03fcc 	andi	r19,r19,255
    c6b4:	90002426 	beq	r18,zero,c748 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    c6b8:	9809883a 	mov	r4,r19
    c6bc:	000c0000 	call	c000 <_ZL21size_of_encoded_valueh>
    c6c0:	100b883a 	mov	r5,r2
    c6c4:	913fffc4 	addi	r4,r18,-1
    c6c8:	000d8b80 	call	d8b8 <__mulsi3>
    c6cc:	d9400d17 	ldw	r5,52(sp)
    c6d0:	d80f883a 	mov	r7,sp
    c6d4:	9809883a 	mov	r4,r19
    c6d8:	140d883a 	add	r6,r2,r16
    c6dc:	000c0a40 	call	c0a4 <_ZL28read_encoded_value_with_basehjPKhPj>
    c6e0:	d9000017 	ldw	r4,0(sp)
    c6e4:	d9800204 	addi	r6,sp,8
    c6e8:	a00b883a 	mov	r5,r20
    c6ec:	000c4c40 	call	c4c4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c6f0:	10c03fcc 	andi	r3,r2,255
    c6f4:	1800151e 	bne	r3,zero,c74c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    c6f8:	a809883a 	mov	r4,r21
    c6fc:	017ffe44 	movi	r5,-7
    c700:	000d8b80 	call	d8b8 <__mulsi3>
    c704:	102d883a 	mov	r22,r2
    c708:	a809883a 	mov	r4,r21
    c70c:	0025883a 	mov	r18,zero
    c710:	24400003 	ldbu	r17,0(r4)
    c714:	014001c4 	movi	r5,7
    c718:	000d8b80 	call	d8b8 <__mulsi3>
    c71c:	88c01fcc 	andi	r3,r17,127
    c720:	1585883a 	add	r2,r2,r22
    c724:	1886983a 	sll	r3,r3,r2
    c728:	8c403fcc 	andi	r17,r17,255
    c72c:	8c40201c 	xori	r17,r17,128
    c730:	ad400044 	addi	r21,r21,1
    c734:	8c7fe004 	addi	r17,r17,-128
    c738:	90e4b03a 	or	r18,r18,r3
    c73c:	a809883a 	mov	r4,r21
    c740:	883ff316 	blt	r17,zero,c710 <__alt_data_end+0xfc00c710>
    c744:	003fdb06 	br	c6b4 <__alt_data_end+0xfc00c6b4>
    c748:	0005883a 	mov	r2,zero
    c74c:	dfc00c17 	ldw	ra,48(sp)
    c750:	ddc00b17 	ldw	r23,44(sp)
    c754:	dd800a17 	ldw	r22,40(sp)
    c758:	dd400917 	ldw	r21,36(sp)
    c75c:	dd000817 	ldw	r20,32(sp)
    c760:	dcc00717 	ldw	r19,28(sp)
    c764:	dc800617 	ldw	r18,24(sp)
    c768:	dc400517 	ldw	r17,20(sp)
    c76c:	dc000417 	ldw	r16,16(sp)
    c770:	dec00d04 	addi	sp,sp,52
    c774:	f800283a 	ret

0000c778 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    c778:	defffb04 	addi	sp,sp,-20
    c77c:	dc000115 	stw	r16,4(sp)
    c780:	24000317 	ldw	r16,12(r4)
    c784:	01ce303a 	nor	r7,zero,r7
    c788:	dc800315 	stw	r18,12(sp)
    c78c:	dc400215 	stw	r17,8(sp)
    c790:	dfc00415 	stw	ra,16(sp)
    c794:	2023883a 	mov	r17,r4
    c798:	2825883a 	mov	r18,r5
    c79c:	d9800015 	stw	r6,0(sp)
    c7a0:	81e1883a 	add	r16,r16,r7
    c7a4:	800d883a 	mov	r6,r16
    c7a8:	000b883a 	mov	r5,zero
    c7ac:	0009883a 	mov	r4,zero
    c7b0:	30800003 	ldbu	r2,0(r6)
    c7b4:	84000044 	addi	r16,r16,1
    c7b8:	800d883a 	mov	r6,r16
    c7bc:	10c01fcc 	andi	r3,r2,127
    c7c0:	1906983a 	sll	r3,r3,r4
    c7c4:	10803fcc 	andi	r2,r2,255
    c7c8:	1080201c 	xori	r2,r2,128
    c7cc:	10bfe004 	addi	r2,r2,-128
    c7d0:	28cab03a 	or	r5,r5,r3
    c7d4:	210001c4 	addi	r4,r4,7
    c7d8:	103ff516 	blt	r2,zero,c7b0 <__alt_data_end+0xfc00c7b0>
    c7dc:	28000e26 	beq	r5,zero,c818 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    c7e0:	8809883a 	mov	r4,r17
    c7e4:	000c2b00 	call	c2b0 <_ZL15get_ttype_entryP16lsda_header_infom>
    c7e8:	d80d883a 	mov	r6,sp
    c7ec:	900b883a 	mov	r5,r18
    c7f0:	1009883a 	mov	r4,r2
    c7f4:	000c4c40 	call	c4c4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c7f8:	10c03fcc 	andi	r3,r2,255
    c7fc:	183fe926 	beq	r3,zero,c7a4 <__alt_data_end+0xfc00c7a4>
    c800:	dfc00417 	ldw	ra,16(sp)
    c804:	dc800317 	ldw	r18,12(sp)
    c808:	dc400217 	ldw	r17,8(sp)
    c80c:	dc000117 	ldw	r16,4(sp)
    c810:	dec00504 	addi	sp,sp,20
    c814:	f800283a 	ret
    c818:	0005883a 	mov	r2,zero
    c81c:	003ff806 	br	c800 <__alt_data_end+0xfc00c800>

0000c820 <__gxx_personality_sj0>:
    c820:	00800074 	movhi	r2,1
    c824:	deffdd04 	addi	sp,sp,-140
    c828:	10b20804 	addi	r2,r2,-14304
    c82c:	d8800e15 	stw	r2,56(sp)
    c830:	008000b4 	movhi	r2,2
    c834:	1092b804 	addi	r2,r2,19168
    c838:	d8800f15 	stw	r2,60(sp)
    c83c:	00800074 	movhi	r2,1
    c840:	10b37e04 	addi	r2,r2,-12808
    c844:	d9001515 	stw	r4,84(sp)
    c848:	d9000804 	addi	r4,sp,32
    c84c:	d8801115 	stw	r2,68(sp)
    c850:	dfc02215 	stw	ra,136(sp)
    c854:	df002115 	stw	fp,132(sp)
    c858:	dec01015 	stw	sp,64(sp)
    c85c:	dec01215 	stw	sp,72(sp)
    c860:	d9401915 	stw	r5,100(sp)
    c864:	d9801615 	stw	r6,88(sp)
    c868:	d9c01715 	stw	r7,92(sp)
    c86c:	000f0440 	call	f044 <_Unwind_SjLj_Register>
    c870:	d8c01517 	ldw	r3,84(sp)
    c874:	d8000715 	stw	zero,28(sp)
    c878:	d8000615 	stw	zero,24(sp)
    c87c:	00800044 	movi	r2,1
    c880:	18800926 	beq	r3,r2,c8a8 <__gxx_personality_sj0+0x88>
    c884:	01c000c4 	movi	r7,3
    c888:	d9c01515 	stw	r7,84(sp)
    c88c:	d9000804 	addi	r4,sp,32
    c890:	000f05c0 	call	f05c <_Unwind_SjLj_Unregister>
    c894:	d8801517 	ldw	r2,84(sp)
    c898:	dfc02217 	ldw	ra,136(sp)
    c89c:	df002117 	ldw	fp,132(sp)
    c8a0:	dec02304 	addi	sp,sp,140
    c8a4:	f800283a 	ret
    c8a8:	d9001617 	ldw	r4,88(sp)
    c8ac:	00af3574 	movhi	r2,48341
    c8b0:	d9c01717 	ldw	r7,92(sp)
    c8b4:	10b54004 	addi	r2,r2,-11008
    c8b8:	00ee2cb4 	movhi	r3,47282
    c8bc:	2085883a 	add	r2,r4,r2
    c8c0:	18eaaf04 	addi	r3,r3,-21828
    c8c4:	d8801b15 	stw	r2,108(sp)
    c8c8:	38c7883a 	add	r3,r7,r3
    c8cc:	1105803a 	cmpltu	r2,r2,r4
    c8d0:	10c7883a 	add	r3,r2,r3
    c8d4:	d8c01c15 	stw	r3,112(sp)
    c8d8:	d8c01917 	ldw	r3,100(sp)
    c8dc:	00800184 	movi	r2,6
    c8e0:	18805426 	beq	r3,r2,ca34 <__gxx_personality_sj0+0x214>
    c8e4:	d9002417 	ldw	r4,144(sp)
    c8e8:	00bfffc4 	movi	r2,-1
    c8ec:	d8800915 	stw	r2,36(sp)
    c8f0:	000f1000 	call	f100 <_Unwind_GetLanguageSpecificData>
    c8f4:	d8801a15 	stw	r2,104(sp)
    c8f8:	1000c926 	beq	r2,zero,cc20 <__gxx_personality_sj0+0x400>
    c8fc:	d9002417 	ldw	r4,144(sp)
    c900:	d80d883a 	mov	r6,sp
    c904:	100b883a 	mov	r5,r2
    c908:	000c3900 	call	c390 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c90c:	d9402417 	ldw	r5,144(sp)
    c910:	d9000503 	ldbu	r4,20(sp)
    c914:	d8801515 	stw	r2,84(sp)
    c918:	000c3040 	call	c304 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c91c:	d9002417 	ldw	r4,144(sp)
    c920:	d9400604 	addi	r5,sp,24
    c924:	d8800215 	stw	r2,8(sp)
    c928:	000f0d00 	call	f0d0 <_Unwind_GetIPInfo>
    c92c:	d8c00617 	ldw	r3,24(sp)
    c930:	18006126 	beq	r3,zero,cab8 <__gxx_personality_sj0+0x298>
    c934:	1000ba16 	blt	r2,zero,cc20 <__gxx_personality_sj0+0x400>
    c938:	10002f1e 	bne	r2,zero,c9f8 <__gxx_personality_sj0+0x1d8>
    c93c:	d8001515 	stw	zero,84(sp)
    c940:	d8001f15 	stw	zero,124(sp)
    c944:	d8001815 	stw	zero,96(sp)
    c948:	00c00044 	movi	r3,1
    c94c:	d9001917 	ldw	r4,100(sp)
    c950:	2080004c 	andi	r2,r4,1
    c954:	1000b51e 	bne	r2,zero,cc2c <__gxx_personality_sj0+0x40c>
    c958:	d9001917 	ldw	r4,100(sp)
    c95c:	2080020c 	andi	r2,r4,8
    c960:	1000b71e 	bne	r2,zero,cc40 <__gxx_personality_sj0+0x420>
    c964:	d9c01c17 	ldw	r7,112(sp)
    c968:	3800b826 	beq	r7,zero,cc4c <__gxx_personality_sj0+0x42c>
    c96c:	00800044 	movi	r2,1
    c970:	1880b526 	beq	r3,r2,cc48 <__gxx_personality_sj0+0x428>
    c974:	d9c01517 	ldw	r7,84(sp)
    c978:	3800f516 	blt	r7,zero,cd50 <__gxx_personality_sj0+0x530>
    c97c:	d9002417 	ldw	r4,144(sp)
    c980:	d9802317 	ldw	r6,140(sp)
    c984:	00bfffc4 	movi	r2,-1
    c988:	000b883a 	mov	r5,zero
    c98c:	d8800915 	stw	r2,36(sp)
    c990:	000f0a40 	call	f0a4 <_Unwind_SetGR>
    c994:	d9801517 	ldw	r6,84(sp)
    c998:	d9002417 	ldw	r4,144(sp)
    c99c:	01400044 	movi	r5,1
    c9a0:	000f0a40 	call	f0a4 <_Unwind_SetGR>
    c9a4:	d9002417 	ldw	r4,144(sp)
    c9a8:	d9401f17 	ldw	r5,124(sp)
    c9ac:	000f0f00 	call	f0f0 <_Unwind_SetIP>
    c9b0:	010001c4 	movi	r4,7
    c9b4:	d9001515 	stw	r4,84(sp)
    c9b8:	003fb406 	br	c88c <__alt_data_end+0xfc00c88c>
    c9bc:	000f883a 	mov	r7,zero
    c9c0:	000d883a 	mov	r6,zero
    c9c4:	19000003 	ldbu	r4,0(r3)
    c9c8:	18c00044 	addi	r3,r3,1
    c9cc:	d8c01515 	stw	r3,84(sp)
    c9d0:	21401fcc 	andi	r5,r4,127
    c9d4:	298a983a 	sll	r5,r5,r6
    c9d8:	21003fcc 	andi	r4,r4,255
    c9dc:	2100201c 	xori	r4,r4,128
    c9e0:	213fe004 	addi	r4,r4,-128
    c9e4:	394eb03a 	or	r7,r7,r5
    c9e8:	318001c4 	addi	r6,r6,7
    c9ec:	203ff516 	blt	r4,zero,c9c4 <__alt_data_end+0xfc00c9c4>
    c9f0:	10bfffc4 	addi	r2,r2,-1
    c9f4:	10003226 	beq	r2,zero,cac0 <__gxx_personality_sj0+0x2a0>
    c9f8:	d9c01517 	ldw	r7,84(sp)
    c9fc:	0011883a 	mov	r8,zero
    ca00:	000d883a 	mov	r6,zero
    ca04:	39000003 	ldbu	r4,0(r7)
    ca08:	38c00044 	addi	r3,r7,1
    ca0c:	180f883a 	mov	r7,r3
    ca10:	21401fcc 	andi	r5,r4,127
    ca14:	298a983a 	sll	r5,r5,r6
    ca18:	21003fcc 	andi	r4,r4,255
    ca1c:	2100201c 	xori	r4,r4,128
    ca20:	213fe004 	addi	r4,r4,-128
    ca24:	4150b03a 	or	r8,r8,r5
    ca28:	318001c4 	addi	r6,r6,7
    ca2c:	203ff516 	blt	r4,zero,ca04 <__alt_data_end+0xfc00ca04>
    ca30:	003fe206 	br	c9bc <__alt_data_end+0xfc00c9bc>
    ca34:	d9001c17 	ldw	r4,112(sp)
    ca38:	203faa1e 	bne	r4,zero,c8e4 <__alt_data_end+0xfc00c8e4>
    ca3c:	d9c01517 	ldw	r7,84(sp)
    ca40:	d8801b17 	ldw	r2,108(sp)
    ca44:	38bfa736 	bltu	r7,r2,c8e4 <__alt_data_end+0xfc00c8e4>
    ca48:	d8c02317 	ldw	r3,140(sp)
    ca4c:	18fffe17 	ldw	r3,-8(r3)
    ca50:	d8c01f15 	stw	r3,124(sp)
    ca54:	18008226 	beq	r3,zero,cc60 <__gxx_personality_sj0+0x440>
    ca58:	d9002317 	ldw	r4,140(sp)
    ca5c:	d9c02317 	ldw	r7,140(sp)
    ca60:	213ffb17 	ldw	r4,-20(r4)
    ca64:	39fffd17 	ldw	r7,-12(r7)
    ca68:	d9001515 	stw	r4,84(sp)
    ca6c:	d9c01a15 	stw	r7,104(sp)
    ca70:	d8801517 	ldw	r2,84(sp)
    ca74:	103fc10e 	bge	r2,zero,c97c <__alt_data_end+0xfc00c97c>
    ca78:	d9002417 	ldw	r4,144(sp)
    ca7c:	d9401a17 	ldw	r5,104(sp)
    ca80:	d80d883a 	mov	r6,sp
    ca84:	00bfffc4 	movi	r2,-1
    ca88:	d8800915 	stw	r2,36(sp)
    ca8c:	000c3900 	call	c390 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    ca90:	d9402417 	ldw	r5,144(sp)
    ca94:	d9000503 	ldbu	r4,20(sp)
    ca98:	000c3040 	call	c304 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    ca9c:	d9000503 	ldbu	r4,20(sp)
    caa0:	d9402417 	ldw	r5,144(sp)
    caa4:	d8800215 	stw	r2,8(sp)
    caa8:	000c3040 	call	c304 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    caac:	d8c02317 	ldw	r3,140(sp)
    cab0:	18bffe15 	stw	r2,-8(r3)
    cab4:	003fb106 	br	c97c <__alt_data_end+0xfc00c97c>
    cab8:	10bfffc4 	addi	r2,r2,-1
    cabc:	003f9d06 	br	c934 <__alt_data_end+0xfc00c934>
    cac0:	42000044 	addi	r8,r8,1
    cac4:	da001f15 	stw	r8,124(sp)
    cac8:	38005326 	beq	r7,zero,cc18 <__gxx_personality_sj0+0x3f8>
    cacc:	d8800417 	ldw	r2,16(sp)
    cad0:	39ffffc4 	addi	r7,r7,-1
    cad4:	11c5883a 	add	r2,r2,r7
    cad8:	d8801815 	stw	r2,96(sp)
    cadc:	40005026 	beq	r8,zero,cc20 <__gxx_personality_sj0+0x400>
    cae0:	10007426 	beq	r2,zero,ccb4 <__gxx_personality_sj0+0x494>
    cae4:	d8801917 	ldw	r2,100(sp)
    cae8:	1080020c 	andi	r2,r2,8
    caec:	d8802015 	stw	r2,128(sp)
    caf0:	1000a21e 	bne	r2,zero,cd7c <__gxx_personality_sj0+0x55c>
    caf4:	d8c01c17 	ldw	r3,112(sp)
    caf8:	1800b026 	beq	r3,zero,cdbc <__gxx_personality_sj0+0x59c>
    cafc:	01c000f4 	movhi	r7,3
    cb00:	39faef04 	addi	r7,r7,-5188
    cb04:	d9c01e15 	stw	r7,120(sp)
    cb08:	d8001d05 	stb	zero,116(sp)
    cb0c:	d8c01817 	ldw	r3,96(sp)
    cb10:	d8001515 	stw	zero,84(sp)
    cb14:	0009883a 	mov	r4,zero
    cb18:	19400003 	ldbu	r5,0(r3)
    cb1c:	18800044 	addi	r2,r3,1
    cb20:	d9c01517 	ldw	r7,84(sp)
    cb24:	28c01fcc 	andi	r3,r5,127
    cb28:	1906983a 	sll	r3,r3,r4
    cb2c:	29803fcc 	andi	r6,r5,255
    cb30:	3180201c 	xori	r6,r6,128
    cb34:	38ceb03a 	or	r7,r7,r3
    cb38:	d8801715 	stw	r2,92(sp)
    cb3c:	31bfe004 	addi	r6,r6,-128
    cb40:	d9c01515 	stw	r7,84(sp)
    cb44:	210001c4 	addi	r4,r4,7
    cb48:	1007883a 	mov	r3,r2
    cb4c:	303ff216 	blt	r6,zero,cb18 <__alt_data_end+0xfc00cb18>
    cb50:	00c007c4 	movi	r3,31
    cb54:	19000836 	bltu	r3,r4,cb78 <__gxx_personality_sj0+0x358>
    cb58:	2940100c 	andi	r5,r5,64
    cb5c:	28000626 	beq	r5,zero,cb78 <__gxx_personality_sj0+0x358>
    cb60:	01c00044 	movi	r7,1
    cb64:	3908983a 	sll	r4,r7,r4
    cb68:	d8c01517 	ldw	r3,84(sp)
    cb6c:	0109c83a 	sub	r4,zero,r4
    cb70:	1906b03a 	or	r3,r3,r4
    cb74:	d8c01515 	stw	r3,84(sp)
    cb78:	d8001615 	stw	zero,88(sp)
    cb7c:	0009883a 	mov	r4,zero
    cb80:	11400003 	ldbu	r5,0(r2)
    cb84:	d9c01617 	ldw	r7,88(sp)
    cb88:	10800044 	addi	r2,r2,1
    cb8c:	28c01fcc 	andi	r3,r5,127
    cb90:	1906983a 	sll	r3,r3,r4
    cb94:	29803fcc 	andi	r6,r5,255
    cb98:	3180201c 	xori	r6,r6,128
    cb9c:	38ceb03a 	or	r7,r7,r3
    cba0:	31bfe004 	addi	r6,r6,-128
    cba4:	d9c01615 	stw	r7,88(sp)
    cba8:	210001c4 	addi	r4,r4,7
    cbac:	303ff416 	blt	r6,zero,cb80 <__alt_data_end+0xfc00cb80>
    cbb0:	008007c4 	movi	r2,31
    cbb4:	11000736 	bltu	r2,r4,cbd4 <__gxx_personality_sj0+0x3b4>
    cbb8:	2940100c 	andi	r5,r5,64
    cbbc:	28000526 	beq	r5,zero,cbd4 <__gxx_personality_sj0+0x3b4>
    cbc0:	00c00044 	movi	r3,1
    cbc4:	1908983a 	sll	r4,r3,r4
    cbc8:	0109c83a 	sub	r4,zero,r4
    cbcc:	390eb03a 	or	r7,r7,r4
    cbd0:	d9c01615 	stw	r7,88(sp)
    cbd4:	d9001517 	ldw	r4,84(sp)
    cbd8:	20003c26 	beq	r4,zero,cccc <__gxx_personality_sj0+0x4ac>
    cbdc:	01003e0e 	bge	zero,r4,ccd8 <__gxx_personality_sj0+0x4b8>
    cbe0:	01ffffc4 	movi	r7,-1
    cbe4:	200b883a 	mov	r5,r4
    cbe8:	d809883a 	mov	r4,sp
    cbec:	d9c00915 	stw	r7,36(sp)
    cbf0:	000c2b00 	call	c2b0 <_ZL15get_ttype_entryP16lsda_header_infom>
    cbf4:	10005f26 	beq	r2,zero,cd74 <__gxx_personality_sj0+0x554>
    cbf8:	d8c01e17 	ldw	r3,120(sp)
    cbfc:	1800571e 	bne	r3,zero,cd5c <__gxx_personality_sj0+0x53c>
    cc00:	d9001617 	ldw	r4,88(sp)
    cc04:	20002926 	beq	r4,zero,ccac <__gxx_personality_sj0+0x48c>
    cc08:	d9c01717 	ldw	r7,92(sp)
    cc0c:	390f883a 	add	r7,r7,r4
    cc10:	d9c01815 	stw	r7,96(sp)
    cc14:	003fbd06 	br	cb0c <__alt_data_end+0xfc00cb0c>
    cc18:	d8c01f17 	ldw	r3,124(sp)
    cc1c:	1800251e 	bne	r3,zero,ccb4 <__gxx_personality_sj0+0x494>
    cc20:	01000204 	movi	r4,8
    cc24:	d9001515 	stw	r4,84(sp)
    cc28:	003f1806 	br	c88c <__alt_data_end+0xfc00c88c>
    cc2c:	d8801c17 	ldw	r2,112(sp)
    cc30:	10000d26 	beq	r2,zero,cc68 <__gxx_personality_sj0+0x448>
    cc34:	00800184 	movi	r2,6
    cc38:	d8801515 	stw	r2,84(sp)
    cc3c:	003f1306 	br	c88c <__alt_data_end+0xfc00c88c>
    cc40:	00800044 	movi	r2,1
    cc44:	18bf4d1e 	bne	r3,r2,c97c <__alt_data_end+0xfc00c97c>
    cc48:	000bf780 	call	bf78 <_ZSt9terminatev>
    cc4c:	d9001b17 	ldw	r4,108(sp)
    cc50:	00800044 	movi	r2,1
    cc54:	113f4536 	bltu	r2,r4,c96c <__alt_data_end+0xfc00c96c>
    cc58:	00800044 	movi	r2,1
    cc5c:	18bf841e 	bne	r3,r2,ca70 <__alt_data_end+0xfc00ca70>
    cc60:	d9002317 	ldw	r4,140(sp)
    cc64:	000d5fc0 	call	d5fc <__cxa_call_terminate>
    cc68:	d8c01b17 	ldw	r3,108(sp)
    cc6c:	00800044 	movi	r2,1
    cc70:	10fff036 	bltu	r2,r3,cc34 <__alt_data_end+0xfc00cc34>
    cc74:	d9002317 	ldw	r4,140(sp)
    cc78:	d8801817 	ldw	r2,96(sp)
    cc7c:	d9c01517 	ldw	r7,84(sp)
    cc80:	d8c01a17 	ldw	r3,104(sp)
    cc84:	20bffc15 	stw	r2,-16(r4)
    cc88:	d8800717 	ldw	r2,28(sp)
    cc8c:	21fffb15 	stw	r7,-20(r4)
    cc90:	d9c01f17 	ldw	r7,124(sp)
    cc94:	20bfff15 	stw	r2,-4(r4)
    cc98:	00800184 	movi	r2,6
    cc9c:	20fffd15 	stw	r3,-12(r4)
    cca0:	21fffe15 	stw	r7,-8(r4)
    cca4:	d8801515 	stw	r2,84(sp)
    cca8:	003ef806 	br	c88c <__alt_data_end+0xfc00c88c>
    ccac:	d8801d03 	ldbu	r2,116(sp)
    ccb0:	103fdb26 	beq	r2,zero,cc20 <__alt_data_end+0xfc00cc20>
    ccb4:	d8c01917 	ldw	r3,100(sp)
    ccb8:	1880004c 	andi	r2,r3,1
    ccbc:	103fd81e 	bne	r2,zero,cc20 <__alt_data_end+0xfc00cc20>
    ccc0:	d8001515 	stw	zero,84(sp)
    ccc4:	00c00084 	movi	r3,2
    ccc8:	003f2306 	br	c958 <__alt_data_end+0xfc00c958>
    cccc:	00c00044 	movi	r3,1
    ccd0:	d8c01d05 	stb	r3,116(sp)
    ccd4:	003fca06 	br	cc00 <__alt_data_end+0xfc00cc00>
    ccd8:	d9001e17 	ldw	r4,120(sp)
    ccdc:	20000426 	beq	r4,zero,ccf0 <__gxx_personality_sj0+0x4d0>
    cce0:	d9c02017 	ldw	r7,128(sp)
    cce4:	3800021e 	bne	r7,zero,ccf0 <__gxx_personality_sj0+0x4d0>
    cce8:	d8801c17 	ldw	r2,112(sp)
    ccec:	10002726 	beq	r2,zero,cd8c <__gxx_personality_sj0+0x56c>
    ccf0:	d8801517 	ldw	r2,84(sp)
    ccf4:	000d883a 	mov	r6,zero
    ccf8:	000b883a 	mov	r5,zero
    ccfc:	0088303a 	nor	r4,zero,r2
    cd00:	d8800317 	ldw	r2,12(sp)
    cd04:	1109883a 	add	r4,r2,r4
    cd08:	20800003 	ldbu	r2,0(r4)
    cd0c:	21000044 	addi	r4,r4,1
    cd10:	10c01fcc 	andi	r3,r2,127
    cd14:	1946983a 	sll	r3,r3,r5
    cd18:	10803fcc 	andi	r2,r2,255
    cd1c:	1080201c 	xori	r2,r2,128
    cd20:	10bfe004 	addi	r2,r2,-128
    cd24:	30ccb03a 	or	r6,r6,r3
    cd28:	294001c4 	addi	r5,r5,7
    cd2c:	103ff616 	blt	r2,zero,cd08 <__alt_data_end+0xfc00cd08>
    cd30:	3005003a 	cmpeq	r2,r6,zero
    cd34:	10803fcc 	andi	r2,r2,255
    cd38:	103fb126 	beq	r2,zero,cc00 <__alt_data_end+0xfc00cc00>
    cd3c:	d9c01917 	ldw	r7,100(sp)
    cd40:	3880004c 	andi	r2,r7,1
    cd44:	103fb91e 	bne	r2,zero,cc2c <__alt_data_end+0xfc00cc2c>
    cd48:	d8802017 	ldw	r2,128(sp)
    cd4c:	10002d26 	beq	r2,zero,ce04 <__gxx_personality_sj0+0x5e4>
    cd50:	00800044 	movi	r2,1
    cd54:	d8800915 	stw	r2,36(sp)
    cd58:	000bfa00 	call	bfa0 <_ZSt10unexpectedv>
    cd5c:	d9800704 	addi	r6,sp,28
    cd60:	180b883a 	mov	r5,r3
    cd64:	1009883a 	mov	r4,r2
    cd68:	000c4c40 	call	c4c4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    cd6c:	10803fcc 	andi	r2,r2,255
    cd70:	103fa326 	beq	r2,zero,cc00 <__alt_data_end+0xfc00cc00>
    cd74:	00c000c4 	movi	r3,3
    cd78:	003ef406 	br	c94c <__alt_data_end+0xfc00c94c>
    cd7c:	010000f4 	movhi	r4,3
    cd80:	213aed04 	addi	r4,r4,-5196
    cd84:	d9001e15 	stw	r4,120(sp)
    cd88:	003f5f06 	br	cb08 <__alt_data_end+0xfc00cb08>
    cd8c:	d9001b17 	ldw	r4,108(sp)
    cd90:	00c00044 	movi	r3,1
    cd94:	193fd636 	bltu	r3,r4,ccf0 <__alt_data_end+0xfc00ccf0>
    cd98:	01ffffc4 	movi	r7,-1
    cd9c:	d9c00915 	stw	r7,36(sp)
    cda0:	d9800717 	ldw	r6,28(sp)
    cda4:	d9c01517 	ldw	r7,84(sp)
    cda8:	d9401e17 	ldw	r5,120(sp)
    cdac:	d809883a 	mov	r4,sp
    cdb0:	000c7780 	call	c778 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    cdb4:	1080005c 	xori	r2,r2,1
    cdb8:	003fde06 	br	cd34 <__alt_data_end+0xfc00cd34>
    cdbc:	d9001b17 	ldw	r4,108(sp)
    cdc0:	00800044 	movi	r2,1
    cdc4:	113f4d36 	bltu	r2,r4,cafc <__alt_data_end+0xfc00cafc>
    cdc8:	d9c02317 	ldw	r7,140(sp)
    cdcc:	38800017 	ldw	r2,0(r7)
    cdd0:	1080004c 	andi	r2,r2,1
    cdd4:	1000061e 	bne	r2,zero,cdf0 <__gxx_personality_sj0+0x5d0>
    cdd8:	d8c02317 	ldw	r3,140(sp)
    cddc:	18800504 	addi	r2,r3,20
    cde0:	d8800715 	stw	r2,28(sp)
    cde4:	10bff017 	ldw	r2,-64(r2)
    cde8:	d8801e15 	stw	r2,120(sp)
    cdec:	003f4606 	br	cb08 <__alt_data_end+0xfc00cb08>
    cdf0:	38bff517 	ldw	r2,-44(r7)
    cdf4:	003ffa06 	br	cde0 <__alt_data_end+0xfc00cde0>
    cdf8:	d9000a17 	ldw	r4,40(sp)
    cdfc:	000d1b00 	call	d1b0 <__cxa_begin_catch>
    ce00:	003f9106 	br	cc48 <__alt_data_end+0xfc00cc48>
    ce04:	d9c01c17 	ldw	r7,112(sp)
    ce08:	383eda1e 	bne	r7,zero,c974 <__alt_data_end+0xfc00c974>
    ce0c:	d8c01b17 	ldw	r3,108(sp)
    ce10:	00800044 	movi	r2,1
    ce14:	10fed736 	bltu	r2,r3,c974 <__alt_data_end+0xfc00c974>
    ce18:	00c000c4 	movi	r3,3
    ce1c:	003f8e06 	br	cc58 <__alt_data_end+0xfc00cc58>

0000ce20 <__cxa_call_unexpected>:
    ce20:	00800074 	movhi	r2,1
    ce24:	deffe604 	addi	sp,sp,-104
    ce28:	10b20804 	addi	r2,r2,-14304
    ce2c:	d8800d15 	stw	r2,52(sp)
    ce30:	008000b4 	movhi	r2,2
    ce34:	1092bc04 	addi	r2,r2,19184
    ce38:	d8800e15 	stw	r2,56(sp)
    ce3c:	d8800104 	addi	r2,sp,4
    ce40:	d8800f15 	stw	r2,60(sp)
    ce44:	00800074 	movhi	r2,1
    ce48:	10b3ab04 	addi	r2,r2,-12628
    ce4c:	d9001415 	stw	r4,80(sp)
    ce50:	d9000704 	addi	r4,sp,28
    ce54:	dfc01915 	stw	ra,100(sp)
    ce58:	d8801015 	stw	r2,64(sp)
    ce5c:	df001815 	stw	fp,96(sp)
    ce60:	dec01115 	stw	sp,68(sp)
    ce64:	000f0440 	call	f044 <_Unwind_SjLj_Register>
    ce68:	d9001417 	ldw	r4,80(sp)
    ce6c:	000d1b00 	call	d1b0 <__cxa_begin_catch>
    ce70:	d8c01417 	ldw	r3,80(sp)
    ce74:	18bffe17 	ldw	r2,-8(r3)
    ce78:	193ff717 	ldw	r4,-36(r3)
    ce7c:	18fffd17 	ldw	r3,-12(r3)
    ce80:	d8800315 	stw	r2,12(sp)
    ce84:	d8c01615 	stw	r3,88(sp)
    ce88:	d8c01417 	ldw	r3,80(sp)
    ce8c:	18fffb17 	ldw	r3,-20(r3)
    ce90:	d8c01515 	stw	r3,84(sp)
    ce94:	d8c01417 	ldw	r3,80(sp)
    ce98:	18fff817 	ldw	r3,-32(r3)
    ce9c:	d8c01415 	stw	r3,80(sp)
    cea0:	00c00044 	movi	r3,1
    cea4:	d8c00815 	stw	r3,32(sp)
    cea8:	000bf900 	call	bf90 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    ceac:	d8c00917 	ldw	r3,36(sp)
    ceb0:	d8800817 	ldw	r2,32(sp)
    ceb4:	d8c01715 	stw	r3,92(sp)
    ceb8:	10000a26 	beq	r2,zero,cee4 <__cxa_call_unexpected+0xc4>
    cebc:	10bfffc4 	addi	r2,r2,-1
    cec0:	10000126 	beq	r2,zero,cec8 <__cxa_call_unexpected+0xa8>
    cec4:	003b68fa 	trap	3
    cec8:	d8000815 	stw	zero,32(sp)
    cecc:	000d2640 	call	d264 <__cxa_end_catch>
    ced0:	000d2640 	call	d264 <__cxa_end_catch>
    ced4:	d9001717 	ldw	r4,92(sp)
    ced8:	00bfffc4 	movi	r2,-1
    cedc:	d8800815 	stw	r2,32(sp)
    cee0:	000f2400 	call	f240 <_Unwind_SjLj_Resume>
    cee4:	d9001717 	ldw	r4,92(sp)
    cee8:	000d1b00 	call	d1b0 <__cxa_begin_catch>
    ceec:	000d6540 	call	d654 <__cxa_get_globals_fast>
    cef0:	10800017 	ldw	r2,0(r2)
    cef4:	10c00b17 	ldw	r3,44(r2)
    cef8:	18c0004c 	andi	r3,r3,1
    cefc:	18001e26 	beq	r3,zero,cf78 <__cxa_call_unexpected+0x158>
    cf00:	10800017 	ldw	r2,0(r2)
    cf04:	d8801715 	stw	r2,92(sp)
    cf08:	d8801517 	ldw	r2,84(sp)
    cf0c:	00802b0e 	bge	zero,r2,cfbc <__cxa_call_unexpected+0x19c>
    cf10:	d8c01717 	ldw	r3,92(sp)
    cf14:	d8800317 	ldw	r2,12(sp)
    cf18:	d9c01517 	ldw	r7,84(sp)
    cf1c:	193ff017 	ldw	r4,-64(r3)
    cf20:	d9801617 	ldw	r6,88(sp)
    cf24:	d8800015 	stw	r2,0(sp)
    cf28:	180b883a 	mov	r5,r3
    cf2c:	00800084 	movi	r2,2
    cf30:	d8800815 	stw	r2,32(sp)
    cf34:	000c54c0 	call	c54c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    cf38:	10803fcc 	andi	r2,r2,255
    cf3c:	10001e1e 	bne	r2,zero,cfb8 <__cxa_call_unexpected+0x198>
    cf40:	d8800317 	ldw	r2,12(sp)
    cf44:	d9c01517 	ldw	r7,84(sp)
    cf48:	d9801617 	ldw	r6,88(sp)
    cf4c:	010000f4 	movhi	r4,3
    cf50:	d8800015 	stw	r2,0(sp)
    cf54:	212d8304 	addi	r4,r4,-18932
    cf58:	00800084 	movi	r2,2
    cf5c:	000b883a 	mov	r5,zero
    cf60:	d8800815 	stw	r2,32(sp)
    cf64:	000c54c0 	call	c54c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    cf68:	10803fcc 	andi	r2,r2,255
    cf6c:	1000051e 	bne	r2,zero,cf84 <__cxa_call_unexpected+0x164>
    cf70:	d9001417 	ldw	r4,80(sp)
    cf74:	000beb80 	call	beb8 <_ZN10__cxxabiv111__terminateEPFvvE>
    cf78:	10801004 	addi	r2,r2,64
    cf7c:	d8801715 	stw	r2,92(sp)
    cf80:	003fe106 	br	cf08 <__alt_data_end+0xfc00cf08>
    cf84:	01000104 	movi	r4,4
    cf88:	000d4980 	call	d498 <__cxa_allocate_exception>
    cf8c:	00c000f4 	movhi	r3,3
    cf90:	18ed9e04 	addi	r3,r3,-18824
    cf94:	01800074 	movhi	r6,1
    cf98:	014000f4 	movhi	r5,3
    cf9c:	10c00015 	stw	r3,0(r2)
    cfa0:	31b59c04 	addi	r6,r6,-10640
    cfa4:	00c00084 	movi	r3,2
    cfa8:	296d8304 	addi	r5,r5,-18932
    cfac:	1009883a 	mov	r4,r2
    cfb0:	d8c00815 	stw	r3,32(sp)
    cfb4:	000d0940 	call	d094 <__cxa_throw>
    cfb8:	000d1240 	call	d124 <__cxa_rethrow>
    cfbc:	d9401617 	ldw	r5,88(sp)
    cfc0:	00800084 	movi	r2,2
    cfc4:	d9800104 	addi	r6,sp,4
    cfc8:	0009883a 	mov	r4,zero
    cfcc:	d8800815 	stw	r2,32(sp)
    cfd0:	000c3900 	call	c390 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    cfd4:	d9801717 	ldw	r6,92(sp)
    cfd8:	d9c01517 	ldw	r7,84(sp)
    cfdc:	d9000104 	addi	r4,sp,4
    cfe0:	317ff017 	ldw	r5,-64(r6)
    cfe4:	000c7780 	call	c778 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    cfe8:	10803fcc 	andi	r2,r2,255
    cfec:	1000171e 	bne	r2,zero,d04c <__cxa_call_unexpected+0x22c>
    cff0:	d9c01517 	ldw	r7,84(sp)
    cff4:	014000f4 	movhi	r5,3
    cff8:	00800084 	movi	r2,2
    cffc:	296d8304 	addi	r5,r5,-18932
    d000:	000d883a 	mov	r6,zero
    d004:	d9000104 	addi	r4,sp,4
    d008:	d8800815 	stw	r2,32(sp)
    d00c:	000c7780 	call	c778 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    d010:	10803fcc 	andi	r2,r2,255
    d014:	103fd626 	beq	r2,zero,cf70 <__alt_data_end+0xfc00cf70>
    d018:	01000104 	movi	r4,4
    d01c:	000d4980 	call	d498 <__cxa_allocate_exception>
    d020:	00c000f4 	movhi	r3,3
    d024:	18ed9e04 	addi	r3,r3,-18824
    d028:	01800074 	movhi	r6,1
    d02c:	014000f4 	movhi	r5,3
    d030:	10c00015 	stw	r3,0(r2)
    d034:	31b59c04 	addi	r6,r6,-10640
    d038:	00c00084 	movi	r3,2
    d03c:	296d8304 	addi	r5,r5,-18932
    d040:	1009883a 	mov	r4,r2
    d044:	d8c00815 	stw	r3,32(sp)
    d048:	000d0940 	call	d094 <__cxa_throw>
    d04c:	000d1240 	call	d124 <__cxa_rethrow>

0000d050 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    d050:	defffe04 	addi	sp,sp,-8
    d054:	dfc00115 	stw	ra,4(sp)
    d058:	dc000015 	stw	r16,0(sp)
    d05c:	00800044 	movi	r2,1
    d060:	11000a36 	bltu	r2,r4,d08c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    d064:	28bff617 	ldw	r2,-40(r5)
    d068:	2c000504 	addi	r16,r5,20
    d06c:	10000226 	beq	r2,zero,d078 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    d070:	8009883a 	mov	r4,r16
    d074:	103ee83a 	callr	r2
    d078:	8009883a 	mov	r4,r16
    d07c:	dfc00117 	ldw	ra,4(sp)
    d080:	dc000017 	ldw	r16,0(sp)
    d084:	dec00204 	addi	sp,sp,8
    d088:	000d4f81 	jmpi	d4f8 <__cxa_free_exception>
    d08c:	293ff817 	ldw	r4,-32(r5)
    d090:	000beb80 	call	beb8 <_ZN10__cxxabiv111__terminateEPFvvE>

0000d094 <__cxa_throw>:
    d094:	defffb04 	addi	sp,sp,-20
    d098:	dfc00415 	stw	ra,16(sp)
    d09c:	dcc00315 	stw	r19,12(sp)
    d0a0:	dc800215 	stw	r18,8(sp)
    d0a4:	2827883a 	mov	r19,r5
    d0a8:	3025883a 	mov	r18,r6
    d0ac:	dc400115 	stw	r17,4(sp)
    d0b0:	dc000015 	stw	r16,0(sp)
    d0b4:	2021883a 	mov	r16,r4
    d0b8:	000d6600 	call	d660 <__cxa_get_globals>
    d0bc:	10c00117 	ldw	r3,4(r2)
    d0c0:	847ffb04 	addi	r17,r16,-20
    d0c4:	18c00044 	addi	r3,r3,1
    d0c8:	10c00115 	stw	r3,4(r2)
    d0cc:	00800044 	movi	r2,1
    d0d0:	80bfef15 	stw	r2,-68(r16)
    d0d4:	84fff015 	stw	r19,-64(r16)
    d0d8:	84bff115 	stw	r18,-60(r16)
    d0dc:	000bff00 	call	bff0 <_ZSt14get_unexpectedv>
    d0e0:	80bff215 	stw	r2,-56(r16)
    d0e4:	000bfcc0 	call	bfcc <_ZSt13get_terminatev>
    d0e8:	80bff315 	stw	r2,-52(r16)
    d0ec:	0090caf4 	movhi	r2,17195
    d0f0:	108ac004 	addi	r2,r2,11008
    d0f4:	80bffb15 	stw	r2,-20(r16)
    d0f8:	0091d3b4 	movhi	r2,18254
    d0fc:	109550c4 	addi	r2,r2,21827
    d100:	80bffc15 	stw	r2,-16(r16)
    d104:	00800074 	movhi	r2,1
    d108:	10b41404 	addi	r2,r2,-12208
    d10c:	8809883a 	mov	r4,r17
    d110:	80bffd15 	stw	r2,-12(r16)
    d114:	000f12c0 	call	f12c <_Unwind_SjLj_RaiseException>
    d118:	8809883a 	mov	r4,r17
    d11c:	000d1b00 	call	d1b0 <__cxa_begin_catch>
    d120:	000bf780 	call	bf78 <_ZSt9terminatev>

0000d124 <__cxa_rethrow>:
    d124:	defffe04 	addi	sp,sp,-8
    d128:	dfc00115 	stw	ra,4(sp)
    d12c:	dc000015 	stw	r16,0(sp)
    d130:	000d6600 	call	d660 <__cxa_get_globals>
    d134:	10c00117 	ldw	r3,4(r2)
    d138:	11000017 	ldw	r4,0(r2)
    d13c:	18c00044 	addi	r3,r3,1
    d140:	10c00115 	stw	r3,4(r2)
    d144:	20001126 	beq	r4,zero,d18c <__cxa_rethrow+0x68>
    d148:	21400b17 	ldw	r5,44(r4)
    d14c:	01ef3574 	movhi	r7,48341
    d150:	39f54004 	addi	r7,r7,-11008
    d154:	29cf883a 	add	r7,r5,r7
    d158:	20c00c17 	ldw	r3,48(r4)
    d15c:	394d803a 	cmpltu	r6,r7,r5
    d160:	016e2cb4 	movhi	r5,47282
    d164:	296aaf04 	addi	r5,r5,-21828
    d168:	1947883a 	add	r3,r3,r5
    d16c:	30c7883a 	add	r3,r6,r3
    d170:	18000726 	beq	r3,zero,d190 <__cxa_rethrow+0x6c>
    d174:	10000015 	stw	zero,0(r2)
    d178:	24000b04 	addi	r16,r4,44
    d17c:	8009883a 	mov	r4,r16
    d180:	000f2840 	call	f284 <_Unwind_SjLj_Resume_or_Rethrow>
    d184:	8009883a 	mov	r4,r16
    d188:	000d1b00 	call	d1b0 <__cxa_begin_catch>
    d18c:	000bf780 	call	bf78 <_ZSt9terminatev>
    d190:	00c00044 	movi	r3,1
    d194:	19fff736 	bltu	r3,r7,d174 <__alt_data_end+0xfc00d174>
    d198:	20800517 	ldw	r2,20(r4)
    d19c:	0085c83a 	sub	r2,zero,r2
    d1a0:	20800515 	stw	r2,20(r4)
    d1a4:	003ff406 	br	d178 <__alt_data_end+0xfc00d178>

0000d1a8 <__cxa_get_exception_ptr>:
    d1a8:	20bfff17 	ldw	r2,-4(r4)
    d1ac:	f800283a 	ret

0000d1b0 <__cxa_begin_catch>:
    d1b0:	defffe04 	addi	sp,sp,-8
    d1b4:	dc000015 	stw	r16,0(sp)
    d1b8:	dfc00115 	stw	ra,4(sp)
    d1bc:	2021883a 	mov	r16,r4
    d1c0:	000d6600 	call	d660 <__cxa_get_globals>
    d1c4:	81000017 	ldw	r4,0(r16)
    d1c8:	80c00117 	ldw	r3,4(r16)
    d1cc:	01af3574 	movhi	r6,48341
    d1d0:	31b54004 	addi	r6,r6,-11008
    d1d4:	016e2cb4 	movhi	r5,47282
    d1d8:	296aaf04 	addi	r5,r5,-21828
    d1dc:	218d883a 	add	r6,r4,r6
    d1e0:	3109803a 	cmpltu	r4,r6,r4
    d1e4:	1947883a 	add	r3,r3,r5
    d1e8:	20c7883a 	add	r3,r4,r3
    d1ec:	817ff504 	addi	r5,r16,-44
    d1f0:	11000017 	ldw	r4,0(r2)
    d1f4:	18000726 	beq	r3,zero,d214 <__cxa_begin_catch+0x64>
    d1f8:	2000191e 	bne	r4,zero,d260 <__cxa_begin_catch+0xb0>
    d1fc:	11400015 	stw	r5,0(r2)
    d200:	0005883a 	mov	r2,zero
    d204:	dfc00117 	ldw	ra,4(sp)
    d208:	dc000017 	ldw	r16,0(sp)
    d20c:	dec00204 	addi	sp,sp,8
    d210:	f800283a 	ret
    d214:	01c00044 	movi	r7,1
    d218:	39bff736 	bltu	r7,r6,d1f8 <__alt_data_end+0xfc00d1f8>
    d21c:	80fffa17 	ldw	r3,-24(r16)
    d220:	18000d16 	blt	r3,zero,d258 <__cxa_begin_catch+0xa8>
    d224:	18c00044 	addi	r3,r3,1
    d228:	11800117 	ldw	r6,4(r2)
    d22c:	80fffa15 	stw	r3,-24(r16)
    d230:	30ffffc4 	addi	r3,r6,-1
    d234:	10c00115 	stw	r3,4(r2)
    d238:	21400226 	beq	r4,r5,d244 <__cxa_begin_catch+0x94>
    d23c:	813ff915 	stw	r4,-28(r16)
    d240:	11400015 	stw	r5,0(r2)
    d244:	80bfff17 	ldw	r2,-4(r16)
    d248:	dfc00117 	ldw	ra,4(sp)
    d24c:	dc000017 	ldw	r16,0(sp)
    d250:	dec00204 	addi	sp,sp,8
    d254:	f800283a 	ret
    d258:	38c7c83a 	sub	r3,r7,r3
    d25c:	003ff206 	br	d228 <__alt_data_end+0xfc00d228>
    d260:	000bf780 	call	bf78 <_ZSt9terminatev>

0000d264 <__cxa_end_catch>:
    d264:	deffff04 	addi	sp,sp,-4
    d268:	dfc00015 	stw	ra,0(sp)
    d26c:	000d6540 	call	d654 <__cxa_get_globals_fast>
    d270:	11000017 	ldw	r4,0(r2)
    d274:	20001426 	beq	r4,zero,d2c8 <__cxa_end_catch+0x64>
    d278:	21400b17 	ldw	r5,44(r4)
    d27c:	01ef3574 	movhi	r7,48341
    d280:	39f54004 	addi	r7,r7,-11008
    d284:	29cf883a 	add	r7,r5,r7
    d288:	20c00c17 	ldw	r3,48(r4)
    d28c:	394d803a 	cmpltu	r6,r7,r5
    d290:	016e2cb4 	movhi	r5,47282
    d294:	296aaf04 	addi	r5,r5,-21828
    d298:	1947883a 	add	r3,r3,r5
    d29c:	30c7883a 	add	r3,r6,r3
    d2a0:	18000c1e 	bne	r3,zero,d2d4 <__cxa_end_catch+0x70>
    d2a4:	00c00044 	movi	r3,1
    d2a8:	19c00a36 	bltu	r3,r7,d2d4 <__cxa_end_catch+0x70>
    d2ac:	20c00517 	ldw	r3,20(r4)
    d2b0:	18000d16 	blt	r3,zero,d2e8 <__cxa_end_catch+0x84>
    d2b4:	18ffffc4 	addi	r3,r3,-1
    d2b8:	18001026 	beq	r3,zero,d2fc <__cxa_end_catch+0x98>
    d2bc:	00bfffc4 	movi	r2,-1
    d2c0:	18801426 	beq	r3,r2,d314 <__cxa_end_catch+0xb0>
    d2c4:	20c00515 	stw	r3,20(r4)
    d2c8:	dfc00017 	ldw	ra,0(sp)
    d2cc:	dec00104 	addi	sp,sp,4
    d2d0:	f800283a 	ret
    d2d4:	21000b04 	addi	r4,r4,44
    d2d8:	10000015 	stw	zero,0(r2)
    d2dc:	dfc00017 	ldw	ra,0(sp)
    d2e0:	dec00104 	addi	sp,sp,4
    d2e4:	000f2d01 	jmpi	f2d0 <_Unwind_DeleteException>
    d2e8:	18c00044 	addi	r3,r3,1
    d2ec:	183ff51e 	bne	r3,zero,d2c4 <__alt_data_end+0xfc00d2c4>
    d2f0:	21400417 	ldw	r5,16(r4)
    d2f4:	11400015 	stw	r5,0(r2)
    d2f8:	003ff206 	br	d2c4 <__alt_data_end+0xfc00d2c4>
    d2fc:	20c00417 	ldw	r3,16(r4)
    d300:	21000b04 	addi	r4,r4,44
    d304:	10c00015 	stw	r3,0(r2)
    d308:	dfc00017 	ldw	ra,0(sp)
    d30c:	dec00104 	addi	sp,sp,4
    d310:	000f2d01 	jmpi	f2d0 <_Unwind_DeleteException>
    d314:	000bf780 	call	bf78 <_ZSt9terminatev>

0000d318 <_ZSt18uncaught_exceptionv>:
    d318:	deffff04 	addi	sp,sp,-4
    d31c:	dfc00015 	stw	ra,0(sp)
    d320:	000d6600 	call	d660 <__cxa_get_globals>
    d324:	10800117 	ldw	r2,4(r2)
    d328:	1004c03a 	cmpne	r2,r2,zero
    d32c:	dfc00017 	ldw	ra,0(sp)
    d330:	dec00104 	addi	sp,sp,4
    d334:	f800283a 	ret

0000d338 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    d338:	018000f4 	movhi	r6,3
    d33c:	3187e004 	addi	r6,r6,8064
    d340:	31400117 	ldw	r5,4(r6)
    d344:	223fff04 	addi	r8,r4,-4
    d348:	227fff17 	ldw	r9,-4(r4)
    d34c:	28001326 	beq	r5,zero,d39c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    d350:	424f883a 	add	r7,r8,r9
    d354:	29c01426 	beq	r5,r7,d3a8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    d358:	28c00117 	ldw	r3,4(r5)
    d35c:	18001c26 	beq	r3,zero,d3d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    d360:	38c00336 	bltu	r7,r3,d370 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    d364:	00001e06 	br	d3e0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    d368:	3880052e 	bgeu	r7,r2,d380 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    d36c:	1007883a 	mov	r3,r2
    d370:	18800117 	ldw	r2,4(r3)
    d374:	29800104 	addi	r6,r5,4
    d378:	180b883a 	mov	r5,r3
    d37c:	103ffa1e 	bne	r2,zero,d368 <__alt_data_end+0xfc00d368>
    d380:	19400017 	ldw	r5,0(r3)
    d384:	194f883a 	add	r7,r3,r5
    d388:	41c00e26 	beq	r8,r7,d3c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    d38c:	20800015 	stw	r2,0(r4)
    d390:	30800017 	ldw	r2,0(r6)
    d394:	12000115 	stw	r8,4(r2)
    d398:	f800283a 	ret
    d39c:	20000015 	stw	zero,0(r4)
    d3a0:	32000115 	stw	r8,4(r6)
    d3a4:	f800283a 	ret
    d3a8:	28c00017 	ldw	r3,0(r5)
    d3ac:	28800117 	ldw	r2,4(r5)
    d3b0:	1a53883a 	add	r9,r3,r9
    d3b4:	227fff15 	stw	r9,-4(r4)
    d3b8:	20800015 	stw	r2,0(r4)
    d3bc:	32000115 	stw	r8,4(r6)
    d3c0:	f800283a 	ret
    d3c4:	494b883a 	add	r5,r9,r5
    d3c8:	19400015 	stw	r5,0(r3)
    d3cc:	f800283a 	ret
    d3d0:	0005883a 	mov	r2,zero
    d3d4:	2807883a 	mov	r3,r5
    d3d8:	31800104 	addi	r6,r6,4
    d3dc:	003fe806 	br	d380 <__alt_data_end+0xfc00d380>
    d3e0:	1805883a 	mov	r2,r3
    d3e4:	31800104 	addi	r6,r6,4
    d3e8:	2807883a 	mov	r3,r5
    d3ec:	003fe406 	br	d380 <__alt_data_end+0xfc00d380>

0000d3f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    d3f0:	20800104 	addi	r2,r4,4
    d3f4:	00c001c4 	movi	r3,7
    d3f8:	1880112e 	bgeu	r3,r2,d440 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    d3fc:	20c9883a 	add	r4,r4,r3
    d400:	00bfff04 	movi	r2,-4
    d404:	208a703a 	and	r5,r4,r2
    d408:	018000f4 	movhi	r6,3
    d40c:	3187e004 	addi	r6,r6,8064
    d410:	30c00117 	ldw	r3,4(r6)
    d414:	18000826 	beq	r3,zero,d438 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    d418:	19000017 	ldw	r4,0(r3)
    d41c:	21400436 	bltu	r4,r5,d430 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    d420:	00001a06 	br	d48c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    d424:	11000017 	ldw	r4,0(r2)
    d428:	2140072e 	bgeu	r4,r5,d448 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    d42c:	1007883a 	mov	r3,r2
    d430:	18800117 	ldw	r2,4(r3)
    d434:	103ffb1e 	bne	r2,zero,d424 <__alt_data_end+0xfc00d424>
    d438:	0005883a 	mov	r2,zero
    d43c:	f800283a 	ret
    d440:	01400204 	movi	r5,8
    d444:	003ff006 	br	d408 <__alt_data_end+0xfc00d408>
    d448:	18c00104 	addi	r3,r3,4
    d44c:	2149c83a 	sub	r4,r4,r5
    d450:	018001c4 	movi	r6,7
    d454:	3100092e 	bgeu	r6,r4,d47c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    d458:	11c00117 	ldw	r7,4(r2)
    d45c:	114d883a 	add	r6,r2,r5
    d460:	31000015 	stw	r4,0(r6)
    d464:	31c00115 	stw	r7,4(r6)
    d468:	18800017 	ldw	r2,0(r3)
    d46c:	11400015 	stw	r5,0(r2)
    d470:	19800015 	stw	r6,0(r3)
    d474:	10800104 	addi	r2,r2,4
    d478:	f800283a 	ret
    d47c:	11000117 	ldw	r4,4(r2)
    d480:	10800104 	addi	r2,r2,4
    d484:	19000015 	stw	r4,0(r3)
    d488:	f800283a 	ret
    d48c:	1805883a 	mov	r2,r3
    d490:	30c00104 	addi	r3,r6,4
    d494:	003fed06 	br	d44c <__alt_data_end+0xfc00d44c>

0000d498 <__cxa_allocate_exception>:
    d498:	defffd04 	addi	sp,sp,-12
    d49c:	dc400115 	stw	r17,4(sp)
    d4a0:	24401104 	addi	r17,r4,68
    d4a4:	8809883a 	mov	r4,r17
    d4a8:	dc000015 	stw	r16,0(sp)
    d4ac:	dfc00215 	stw	ra,8(sp)
    d4b0:	000f4240 	call	f424 <malloc>
    d4b4:	1021883a 	mov	r16,r2
    d4b8:	10000a26 	beq	r2,zero,d4e4 <__cxa_allocate_exception+0x4c>
    d4bc:	01801104 	movi	r6,68
    d4c0:	000b883a 	mov	r5,zero
    d4c4:	8009883a 	mov	r4,r16
    d4c8:	000fda00 	call	fda0 <memset>
    d4cc:	80801104 	addi	r2,r16,68
    d4d0:	dfc00217 	ldw	ra,8(sp)
    d4d4:	dc400117 	ldw	r17,4(sp)
    d4d8:	dc000017 	ldw	r16,0(sp)
    d4dc:	dec00304 	addi	sp,sp,12
    d4e0:	f800283a 	ret
    d4e4:	8809883a 	mov	r4,r17
    d4e8:	000d3f00 	call	d3f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    d4ec:	1021883a 	mov	r16,r2
    d4f0:	103ff21e 	bne	r2,zero,d4bc <__alt_data_end+0xfc00d4bc>
    d4f4:	000bf780 	call	bf78 <_ZSt9terminatev>

0000d4f8 <__cxa_free_exception>:
    d4f8:	00c000f4 	movhi	r3,3
    d4fc:	18c7e004 	addi	r3,r3,8064
    d500:	18800217 	ldw	r2,8(r3)
    d504:	213fef04 	addi	r4,r4,-68
    d508:	1100042e 	bgeu	r2,r4,d51c <__cxa_free_exception+0x24>
    d50c:	18c00317 	ldw	r3,12(r3)
    d510:	10c5883a 	add	r2,r2,r3
    d514:	2080012e 	bgeu	r4,r2,d51c <__cxa_free_exception+0x24>
    d518:	000d3381 	jmpi	d338 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    d51c:	000f4381 	jmpi	f438 <free>

0000d520 <__cxa_allocate_dependent_exception>:
    d520:	defffe04 	addi	sp,sp,-8
    d524:	01001004 	movi	r4,64
    d528:	dc000015 	stw	r16,0(sp)
    d52c:	dfc00115 	stw	ra,4(sp)
    d530:	000f4240 	call	f424 <malloc>
    d534:	1021883a 	mov	r16,r2
    d538:	10000926 	beq	r2,zero,d560 <__cxa_allocate_dependent_exception+0x40>
    d53c:	01801004 	movi	r6,64
    d540:	000b883a 	mov	r5,zero
    d544:	8009883a 	mov	r4,r16
    d548:	000fda00 	call	fda0 <memset>
    d54c:	8005883a 	mov	r2,r16
    d550:	dfc00117 	ldw	ra,4(sp)
    d554:	dc000017 	ldw	r16,0(sp)
    d558:	dec00204 	addi	sp,sp,8
    d55c:	f800283a 	ret
    d560:	01001004 	movi	r4,64
    d564:	000d3f00 	call	d3f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    d568:	1021883a 	mov	r16,r2
    d56c:	103ff31e 	bne	r2,zero,d53c <__alt_data_end+0xfc00d53c>
    d570:	000bf780 	call	bf78 <_ZSt9terminatev>

0000d574 <__cxa_free_dependent_exception>:
    d574:	014000f4 	movhi	r5,3
    d578:	2947e004 	addi	r5,r5,8064
    d57c:	28c00217 	ldw	r3,8(r5)
    d580:	2005883a 	mov	r2,r4
    d584:	1900042e 	bgeu	r3,r4,d598 <__cxa_free_dependent_exception+0x24>
    d588:	29400317 	ldw	r5,12(r5)
    d58c:	1947883a 	add	r3,r3,r5
    d590:	20c0012e 	bgeu	r4,r3,d598 <__cxa_free_dependent_exception+0x24>
    d594:	000d3381 	jmpi	d338 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    d598:	1009883a 	mov	r4,r2
    d59c:	000f4381 	jmpi	f438 <free>

0000d5a0 <_GLOBAL__sub_I___cxa_allocate_exception>:
    d5a0:	defffd04 	addi	sp,sp,-12
    d5a4:	dc400115 	stw	r17,4(sp)
    d5a8:	dc000015 	stw	r16,0(sp)
    d5ac:	04424004 	movi	r17,2304
    d5b0:	040000f4 	movhi	r16,3
    d5b4:	8407e004 	addi	r16,r16,8064
    d5b8:	8809883a 	mov	r4,r17
    d5bc:	dfc00215 	stw	ra,8(sp)
    d5c0:	84400315 	stw	r17,12(r16)
    d5c4:	000f4240 	call	f424 <malloc>
    d5c8:	80800215 	stw	r2,8(r16)
    d5cc:	10000826 	beq	r2,zero,d5f0 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    d5d0:	80800115 	stw	r2,4(r16)
    d5d4:	14400015 	stw	r17,0(r2)
    d5d8:	10000115 	stw	zero,4(r2)
    d5dc:	dfc00217 	ldw	ra,8(sp)
    d5e0:	dc400117 	ldw	r17,4(sp)
    d5e4:	dc000017 	ldw	r16,0(sp)
    d5e8:	dec00304 	addi	sp,sp,12
    d5ec:	f800283a 	ret
    d5f0:	80000315 	stw	zero,12(r16)
    d5f4:	80000115 	stw	zero,4(r16)
    d5f8:	003ff806 	br	d5dc <__alt_data_end+0xfc00d5dc>

0000d5fc <__cxa_call_terminate>:
    d5fc:	defffe04 	addi	sp,sp,-8
    d600:	dfc00115 	stw	ra,4(sp)
    d604:	dc000015 	stw	r16,0(sp)
    d608:	20000d26 	beq	r4,zero,d640 <__cxa_call_terminate+0x44>
    d60c:	2021883a 	mov	r16,r4
    d610:	000d1b00 	call	d1b0 <__cxa_begin_catch>
    d614:	80c00017 	ldw	r3,0(r16)
    d618:	016f3574 	movhi	r5,48341
    d61c:	29754004 	addi	r5,r5,-11008
    d620:	194b883a 	add	r5,r3,r5
    d624:	80800117 	ldw	r2,4(r16)
    d628:	28c9803a 	cmpltu	r4,r5,r3
    d62c:	00ee2cb4 	movhi	r3,47282
    d630:	18eaaf04 	addi	r3,r3,-21828
    d634:	10c5883a 	add	r2,r2,r3
    d638:	2085883a 	add	r2,r4,r2
    d63c:	10000126 	beq	r2,zero,d644 <__cxa_call_terminate+0x48>
    d640:	000bf780 	call	bf78 <_ZSt9terminatev>
    d644:	00800044 	movi	r2,1
    d648:	117ffd36 	bltu	r2,r5,d640 <__alt_data_end+0xfc00d640>
    d64c:	813ff817 	ldw	r4,-32(r16)
    d650:	000beb80 	call	beb8 <_ZN10__cxxabiv111__terminateEPFvvE>

0000d654 <__cxa_get_globals_fast>:
    d654:	008000f4 	movhi	r2,3
    d658:	10878704 	addi	r2,r2,7708
    d65c:	f800283a 	ret

0000d660 <__cxa_get_globals>:
    d660:	008000f4 	movhi	r2,3
    d664:	10878704 	addi	r2,r2,7708
    d668:	f800283a 	ret

0000d66c <_ZNSt9exceptionD1Ev>:
    d66c:	f800283a 	ret

0000d670 <_ZNSt13bad_exceptionD1Ev>:
    d670:	f800283a 	ret

0000d674 <_ZNKSt9exception4whatEv>:
    d674:	008000f4 	movhi	r2,3
    d678:	10ad7104 	addi	r2,r2,-19004
    d67c:	f800283a 	ret

0000d680 <_ZNKSt13bad_exception4whatEv>:
    d680:	008000f4 	movhi	r2,3
    d684:	10ad7504 	addi	r2,r2,-18988
    d688:	f800283a 	ret

0000d68c <_ZNSt9exceptionD0Ev>:
    d68c:	000bbac1 	jmpi	bbac <_ZdlPv>

0000d690 <_ZNSt13bad_exceptionD0Ev>:
    d690:	000bbac1 	jmpi	bbac <_ZdlPv>

0000d694 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    d694:	f800283a 	ret

0000d698 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    d698:	000bbac1 	jmpi	bbac <_ZdlPv>

0000d69c <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    d69c:	f800283a 	ret

0000d6a0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    d6a0:	000bbac1 	jmpi	bbac <_ZdlPv>

0000d6a4 <__fixunssfsi>:
    d6a4:	defffd04 	addi	sp,sp,-12
    d6a8:	dc000015 	stw	r16,0(sp)
    d6ac:	0413c034 	movhi	r16,20224
    d6b0:	800b883a 	mov	r5,r16
    d6b4:	dc400115 	stw	r17,4(sp)
    d6b8:	dfc00215 	stw	ra,8(sp)
    d6bc:	2023883a 	mov	r17,r4
    d6c0:	000e1e80 	call	e1e8 <__gesf2>
    d6c4:	1000070e 	bge	r2,zero,d6e4 <__fixunssfsi+0x40>
    d6c8:	8809883a 	mov	r4,r17
    d6cc:	000ebb80 	call	ebb8 <__fixsfsi>
    d6d0:	dfc00217 	ldw	ra,8(sp)
    d6d4:	dc400117 	ldw	r17,4(sp)
    d6d8:	dc000017 	ldw	r16,0(sp)
    d6dc:	dec00304 	addi	sp,sp,12
    d6e0:	f800283a 	ret
    d6e4:	800b883a 	mov	r5,r16
    d6e8:	8809883a 	mov	r4,r17
    d6ec:	000e6d40 	call	e6d4 <__subsf3>
    d6f0:	1009883a 	mov	r4,r2
    d6f4:	000ebb80 	call	ebb8 <__fixsfsi>
    d6f8:	00e00034 	movhi	r3,32768
    d6fc:	10c5883a 	add	r2,r2,r3
    d700:	003ff306 	br	d6d0 <__alt_data_end+0xfc00d6d0>

0000d704 <__divsi3>:
    d704:	20001b16 	blt	r4,zero,d774 <__divsi3+0x70>
    d708:	000f883a 	mov	r7,zero
    d70c:	28001616 	blt	r5,zero,d768 <__divsi3+0x64>
    d710:	200d883a 	mov	r6,r4
    d714:	29001a2e 	bgeu	r5,r4,d780 <__divsi3+0x7c>
    d718:	00800804 	movi	r2,32
    d71c:	00c00044 	movi	r3,1
    d720:	00000106 	br	d728 <__divsi3+0x24>
    d724:	10000d26 	beq	r2,zero,d75c <__divsi3+0x58>
    d728:	294b883a 	add	r5,r5,r5
    d72c:	10bfffc4 	addi	r2,r2,-1
    d730:	18c7883a 	add	r3,r3,r3
    d734:	293ffb36 	bltu	r5,r4,d724 <__alt_data_end+0xfc00d724>
    d738:	0005883a 	mov	r2,zero
    d73c:	18000726 	beq	r3,zero,d75c <__divsi3+0x58>
    d740:	0005883a 	mov	r2,zero
    d744:	31400236 	bltu	r6,r5,d750 <__divsi3+0x4c>
    d748:	314dc83a 	sub	r6,r6,r5
    d74c:	10c4b03a 	or	r2,r2,r3
    d750:	1806d07a 	srli	r3,r3,1
    d754:	280ad07a 	srli	r5,r5,1
    d758:	183ffa1e 	bne	r3,zero,d744 <__alt_data_end+0xfc00d744>
    d75c:	38000126 	beq	r7,zero,d764 <__divsi3+0x60>
    d760:	0085c83a 	sub	r2,zero,r2
    d764:	f800283a 	ret
    d768:	014bc83a 	sub	r5,zero,r5
    d76c:	39c0005c 	xori	r7,r7,1
    d770:	003fe706 	br	d710 <__alt_data_end+0xfc00d710>
    d774:	0109c83a 	sub	r4,zero,r4
    d778:	01c00044 	movi	r7,1
    d77c:	003fe306 	br	d70c <__alt_data_end+0xfc00d70c>
    d780:	00c00044 	movi	r3,1
    d784:	003fee06 	br	d740 <__alt_data_end+0xfc00d740>

0000d788 <__modsi3>:
    d788:	20001716 	blt	r4,zero,d7e8 <__modsi3+0x60>
    d78c:	000f883a 	mov	r7,zero
    d790:	2005883a 	mov	r2,r4
    d794:	28001216 	blt	r5,zero,d7e0 <__modsi3+0x58>
    d798:	2900162e 	bgeu	r5,r4,d7f4 <__modsi3+0x6c>
    d79c:	01800804 	movi	r6,32
    d7a0:	00c00044 	movi	r3,1
    d7a4:	00000106 	br	d7ac <__modsi3+0x24>
    d7a8:	30000a26 	beq	r6,zero,d7d4 <__modsi3+0x4c>
    d7ac:	294b883a 	add	r5,r5,r5
    d7b0:	31bfffc4 	addi	r6,r6,-1
    d7b4:	18c7883a 	add	r3,r3,r3
    d7b8:	293ffb36 	bltu	r5,r4,d7a8 <__alt_data_end+0xfc00d7a8>
    d7bc:	18000526 	beq	r3,zero,d7d4 <__modsi3+0x4c>
    d7c0:	1806d07a 	srli	r3,r3,1
    d7c4:	11400136 	bltu	r2,r5,d7cc <__modsi3+0x44>
    d7c8:	1145c83a 	sub	r2,r2,r5
    d7cc:	280ad07a 	srli	r5,r5,1
    d7d0:	183ffb1e 	bne	r3,zero,d7c0 <__alt_data_end+0xfc00d7c0>
    d7d4:	38000126 	beq	r7,zero,d7dc <__modsi3+0x54>
    d7d8:	0085c83a 	sub	r2,zero,r2
    d7dc:	f800283a 	ret
    d7e0:	014bc83a 	sub	r5,zero,r5
    d7e4:	003fec06 	br	d798 <__alt_data_end+0xfc00d798>
    d7e8:	0109c83a 	sub	r4,zero,r4
    d7ec:	01c00044 	movi	r7,1
    d7f0:	003fe706 	br	d790 <__alt_data_end+0xfc00d790>
    d7f4:	00c00044 	movi	r3,1
    d7f8:	003ff106 	br	d7c0 <__alt_data_end+0xfc00d7c0>

0000d7fc <__udivsi3>:
    d7fc:	200d883a 	mov	r6,r4
    d800:	2900152e 	bgeu	r5,r4,d858 <__udivsi3+0x5c>
    d804:	28001416 	blt	r5,zero,d858 <__udivsi3+0x5c>
    d808:	00800804 	movi	r2,32
    d80c:	00c00044 	movi	r3,1
    d810:	00000206 	br	d81c <__udivsi3+0x20>
    d814:	10000e26 	beq	r2,zero,d850 <__udivsi3+0x54>
    d818:	28000516 	blt	r5,zero,d830 <__udivsi3+0x34>
    d81c:	294b883a 	add	r5,r5,r5
    d820:	10bfffc4 	addi	r2,r2,-1
    d824:	18c7883a 	add	r3,r3,r3
    d828:	293ffa36 	bltu	r5,r4,d814 <__alt_data_end+0xfc00d814>
    d82c:	18000826 	beq	r3,zero,d850 <__udivsi3+0x54>
    d830:	0005883a 	mov	r2,zero
    d834:	31400236 	bltu	r6,r5,d840 <__udivsi3+0x44>
    d838:	314dc83a 	sub	r6,r6,r5
    d83c:	10c4b03a 	or	r2,r2,r3
    d840:	1806d07a 	srli	r3,r3,1
    d844:	280ad07a 	srli	r5,r5,1
    d848:	183ffa1e 	bne	r3,zero,d834 <__alt_data_end+0xfc00d834>
    d84c:	f800283a 	ret
    d850:	0005883a 	mov	r2,zero
    d854:	f800283a 	ret
    d858:	00c00044 	movi	r3,1
    d85c:	003ff406 	br	d830 <__alt_data_end+0xfc00d830>

0000d860 <__umodsi3>:
    d860:	2005883a 	mov	r2,r4
    d864:	2900122e 	bgeu	r5,r4,d8b0 <__umodsi3+0x50>
    d868:	28001116 	blt	r5,zero,d8b0 <__umodsi3+0x50>
    d86c:	01800804 	movi	r6,32
    d870:	00c00044 	movi	r3,1
    d874:	00000206 	br	d880 <__umodsi3+0x20>
    d878:	30000c26 	beq	r6,zero,d8ac <__umodsi3+0x4c>
    d87c:	28000516 	blt	r5,zero,d894 <__umodsi3+0x34>
    d880:	294b883a 	add	r5,r5,r5
    d884:	31bfffc4 	addi	r6,r6,-1
    d888:	18c7883a 	add	r3,r3,r3
    d88c:	293ffa36 	bltu	r5,r4,d878 <__alt_data_end+0xfc00d878>
    d890:	18000626 	beq	r3,zero,d8ac <__umodsi3+0x4c>
    d894:	1806d07a 	srli	r3,r3,1
    d898:	11400136 	bltu	r2,r5,d8a0 <__umodsi3+0x40>
    d89c:	1145c83a 	sub	r2,r2,r5
    d8a0:	280ad07a 	srli	r5,r5,1
    d8a4:	183ffb1e 	bne	r3,zero,d894 <__alt_data_end+0xfc00d894>
    d8a8:	f800283a 	ret
    d8ac:	f800283a 	ret
    d8b0:	00c00044 	movi	r3,1
    d8b4:	003ff706 	br	d894 <__alt_data_end+0xfc00d894>

0000d8b8 <__mulsi3>:
    d8b8:	0005883a 	mov	r2,zero
    d8bc:	20000726 	beq	r4,zero,d8dc <__mulsi3+0x24>
    d8c0:	20c0004c 	andi	r3,r4,1
    d8c4:	2008d07a 	srli	r4,r4,1
    d8c8:	18000126 	beq	r3,zero,d8d0 <__mulsi3+0x18>
    d8cc:	1145883a 	add	r2,r2,r5
    d8d0:	294b883a 	add	r5,r5,r5
    d8d4:	203ffa1e 	bne	r4,zero,d8c0 <__alt_data_end+0xfc00d8c0>
    d8d8:	f800283a 	ret
    d8dc:	f800283a 	ret

0000d8e0 <__addsf3>:
    d8e0:	defffc04 	addi	sp,sp,-16
    d8e4:	2004d7fa 	srli	r2,r4,31
    d8e8:	280cd5fa 	srli	r6,r5,23
    d8ec:	dc000015 	stw	r16,0(sp)
    d8f0:	00c02034 	movhi	r3,128
    d8f4:	2020d5fa 	srli	r16,r4,23
    d8f8:	280ed7fa 	srli	r7,r5,31
    d8fc:	18ffffc4 	addi	r3,r3,-1
    d900:	dc400115 	stw	r17,4(sp)
    d904:	1908703a 	and	r4,r3,r4
    d908:	194a703a 	and	r5,r3,r5
    d90c:	dfc00315 	stw	ra,12(sp)
    d910:	dc800215 	stw	r18,8(sp)
    d914:	14403fcc 	andi	r17,r2,255
    d918:	84003fcc 	andi	r16,r16,255
    d91c:	200890fa 	slli	r4,r4,3
    d920:	31803fcc 	andi	r6,r6,255
    d924:	280a90fa 	slli	r5,r5,3
    d928:	89c05026 	beq	r17,r7,da6c <__addsf3+0x18c>
    d92c:	8185c83a 	sub	r2,r16,r6
    d930:	00807a0e 	bge	zero,r2,db1c <__addsf3+0x23c>
    d934:	30001e1e 	bne	r6,zero,d9b0 <__addsf3+0xd0>
    d938:	28006d1e 	bne	r5,zero,daf0 <__addsf3+0x210>
    d93c:	208001cc 	andi	r2,r4,7
    d940:	10000426 	beq	r2,zero,d954 <__addsf3+0x74>
    d944:	208003cc 	andi	r2,r4,15
    d948:	00c00104 	movi	r3,4
    d94c:	10c00126 	beq	r2,r3,d954 <__addsf3+0x74>
    d950:	20c9883a 	add	r4,r4,r3
    d954:	2081002c 	andhi	r2,r4,1024
    d958:	10003926 	beq	r2,zero,da40 <__addsf3+0x160>
    d95c:	84000044 	addi	r16,r16,1
    d960:	00803fc4 	movi	r2,255
    d964:	80807826 	beq	r16,r2,db48 <__addsf3+0x268>
    d968:	200891ba 	slli	r4,r4,6
    d96c:	8805883a 	mov	r2,r17
    d970:	2008d27a 	srli	r4,r4,9
    d974:	84003fcc 	andi	r16,r16,255
    d978:	800695fa 	slli	r3,r16,23
    d97c:	10803fcc 	andi	r2,r2,255
    d980:	04002034 	movhi	r16,128
    d984:	843fffc4 	addi	r16,r16,-1
    d988:	100497fa 	slli	r2,r2,31
    d98c:	2408703a 	and	r4,r4,r16
    d990:	20e0b03a 	or	r16,r4,r3
    d994:	8084b03a 	or	r2,r16,r2
    d998:	dfc00317 	ldw	ra,12(sp)
    d99c:	dc800217 	ldw	r18,8(sp)
    d9a0:	dc400117 	ldw	r17,4(sp)
    d9a4:	dc000017 	ldw	r16,0(sp)
    d9a8:	dec00404 	addi	sp,sp,16
    d9ac:	f800283a 	ret
    d9b0:	00c03fc4 	movi	r3,255
    d9b4:	80ffe126 	beq	r16,r3,d93c <__alt_data_end+0xfc00d93c>
    d9b8:	29410034 	orhi	r5,r5,1024
    d9bc:	00c006c4 	movi	r3,27
    d9c0:	18807516 	blt	r3,r2,db98 <__addsf3+0x2b8>
    d9c4:	00c00804 	movi	r3,32
    d9c8:	1887c83a 	sub	r3,r3,r2
    d9cc:	28c6983a 	sll	r3,r5,r3
    d9d0:	288ad83a 	srl	r5,r5,r2
    d9d4:	1804c03a 	cmpne	r2,r3,zero
    d9d8:	288ab03a 	or	r5,r5,r2
    d9dc:	2149c83a 	sub	r4,r4,r5
    d9e0:	2081002c 	andhi	r2,r4,1024
    d9e4:	10001426 	beq	r2,zero,da38 <__addsf3+0x158>
    d9e8:	04810034 	movhi	r18,1024
    d9ec:	94bfffc4 	addi	r18,r18,-1
    d9f0:	24a4703a 	and	r18,r4,r18
    d9f4:	9009883a 	mov	r4,r18
    d9f8:	000f35c0 	call	f35c <__clzsi2>
    d9fc:	10bffec4 	addi	r2,r2,-5
    da00:	90a4983a 	sll	r18,r18,r2
    da04:	14005416 	blt	r2,r16,db58 <__addsf3+0x278>
    da08:	1405c83a 	sub	r2,r2,r16
    da0c:	11000044 	addi	r4,r2,1
    da10:	00800804 	movi	r2,32
    da14:	1105c83a 	sub	r2,r2,r4
    da18:	9084983a 	sll	r2,r18,r2
    da1c:	9124d83a 	srl	r18,r18,r4
    da20:	0021883a 	mov	r16,zero
    da24:	1008c03a 	cmpne	r4,r2,zero
    da28:	9108b03a 	or	r4,r18,r4
    da2c:	003fc306 	br	d93c <__alt_data_end+0xfc00d93c>
    da30:	1000db26 	beq	r2,zero,dda0 <__addsf3+0x4c0>
    da34:	1009883a 	mov	r4,r2
    da38:	208001cc 	andi	r2,r4,7
    da3c:	103fc11e 	bne	r2,zero,d944 <__alt_data_end+0xfc00d944>
    da40:	2006d0fa 	srli	r3,r4,3
    da44:	01003fc4 	movi	r4,255
    da48:	8805883a 	mov	r2,r17
    da4c:	8100241e 	bne	r16,r4,dae0 <__addsf3+0x200>
    da50:	18006e26 	beq	r3,zero,dc0c <__addsf3+0x32c>
    da54:	19001034 	orhi	r4,r3,64
    da58:	00c02034 	movhi	r3,128
    da5c:	18ffffc4 	addi	r3,r3,-1
    da60:	043fffc4 	movi	r16,-1
    da64:	20c8703a 	and	r4,r4,r3
    da68:	003fc206 	br	d974 <__alt_data_end+0xfc00d974>
    da6c:	8187c83a 	sub	r3,r16,r6
    da70:	00c03e0e 	bge	zero,r3,db6c <__addsf3+0x28c>
    da74:	30002326 	beq	r6,zero,db04 <__addsf3+0x224>
    da78:	01803fc4 	movi	r6,255
    da7c:	81bfaf26 	beq	r16,r6,d93c <__alt_data_end+0xfc00d93c>
    da80:	29410034 	orhi	r5,r5,1024
    da84:	018006c4 	movi	r6,27
    da88:	30c07416 	blt	r6,r3,dc5c <__addsf3+0x37c>
    da8c:	01800804 	movi	r6,32
    da90:	30cdc83a 	sub	r6,r6,r3
    da94:	298c983a 	sll	r6,r5,r6
    da98:	28cad83a 	srl	r5,r5,r3
    da9c:	3006c03a 	cmpne	r3,r6,zero
    daa0:	28cab03a 	or	r5,r5,r3
    daa4:	2149883a 	add	r4,r4,r5
    daa8:	20c1002c 	andhi	r3,r4,1024
    daac:	183fe226 	beq	r3,zero,da38 <__alt_data_end+0xfc00da38>
    dab0:	84000044 	addi	r16,r16,1
    dab4:	00c03fc4 	movi	r3,255
    dab8:	80c05426 	beq	r16,r3,dc0c <__addsf3+0x32c>
    dabc:	00bf0034 	movhi	r2,64512
    dac0:	10bfffc4 	addi	r2,r2,-1
    dac4:	20c0004c 	andi	r3,r4,1
    dac8:	2088703a 	and	r4,r4,r2
    dacc:	2008d07a 	srli	r4,r4,1
    dad0:	20c8b03a 	or	r4,r4,r3
    dad4:	003f9906 	br	d93c <__alt_data_end+0xfc00d93c>
    dad8:	0007883a 	mov	r3,zero
    dadc:	0005883a 	mov	r2,zero
    dae0:	01002034 	movhi	r4,128
    dae4:	213fffc4 	addi	r4,r4,-1
    dae8:	1908703a 	and	r4,r3,r4
    daec:	003fa106 	br	d974 <__alt_data_end+0xfc00d974>
    daf0:	10bfffc4 	addi	r2,r2,-1
    daf4:	103fb926 	beq	r2,zero,d9dc <__alt_data_end+0xfc00d9dc>
    daf8:	00c03fc4 	movi	r3,255
    dafc:	80ffaf1e 	bne	r16,r3,d9bc <__alt_data_end+0xfc00d9bc>
    db00:	003f8e06 	br	d93c <__alt_data_end+0xfc00d93c>
    db04:	283f8d26 	beq	r5,zero,d93c <__alt_data_end+0xfc00d93c>
    db08:	18ffffc4 	addi	r3,r3,-1
    db0c:	183fe526 	beq	r3,zero,daa4 <__alt_data_end+0xfc00daa4>
    db10:	01803fc4 	movi	r6,255
    db14:	81bfdb1e 	bne	r16,r6,da84 <__alt_data_end+0xfc00da84>
    db18:	003f8806 	br	d93c <__alt_data_end+0xfc00d93c>
    db1c:	1000201e 	bne	r2,zero,dba0 <__addsf3+0x2c0>
    db20:	80800044 	addi	r2,r16,1
    db24:	10803fcc 	andi	r2,r2,255
    db28:	01800044 	movi	r6,1
    db2c:	3080450e 	bge	r6,r2,dc44 <__addsf3+0x364>
    db30:	2165c83a 	sub	r18,r4,r5
    db34:	90c1002c 	andhi	r3,r18,1024
    db38:	18002b26 	beq	r3,zero,dbe8 <__addsf3+0x308>
    db3c:	2925c83a 	sub	r18,r5,r4
    db40:	3823883a 	mov	r17,r7
    db44:	003fab06 	br	d9f4 <__alt_data_end+0xfc00d9f4>
    db48:	8805883a 	mov	r2,r17
    db4c:	043fffc4 	movi	r16,-1
    db50:	0009883a 	mov	r4,zero
    db54:	003f8706 	br	d974 <__alt_data_end+0xfc00d974>
    db58:	013f0034 	movhi	r4,64512
    db5c:	213fffc4 	addi	r4,r4,-1
    db60:	80a1c83a 	sub	r16,r16,r2
    db64:	9108703a 	and	r4,r18,r4
    db68:	003f7406 	br	d93c <__alt_data_end+0xfc00d93c>
    db6c:	1800411e 	bne	r3,zero,dc74 <__addsf3+0x394>
    db70:	80c00044 	addi	r3,r16,1
    db74:	19c03fcc 	andi	r7,r3,255
    db78:	01800044 	movi	r6,1
    db7c:	31c0260e 	bge	r6,r7,dc18 <__addsf3+0x338>
    db80:	01803fc4 	movi	r6,255
    db84:	19802126 	beq	r3,r6,dc0c <__addsf3+0x32c>
    db88:	2149883a 	add	r4,r4,r5
    db8c:	2008d07a 	srli	r4,r4,1
    db90:	1821883a 	mov	r16,r3
    db94:	003f6906 	br	d93c <__alt_data_end+0xfc00d93c>
    db98:	01400044 	movi	r5,1
    db9c:	003f8f06 	br	d9dc <__alt_data_end+0xfc00d9dc>
    dba0:	8000151e 	bne	r16,zero,dbf8 <__addsf3+0x318>
    dba4:	20002f26 	beq	r4,zero,dc64 <__addsf3+0x384>
    dba8:	0084303a 	nor	r2,zero,r2
    dbac:	10000a26 	beq	r2,zero,dbd8 <__addsf3+0x2f8>
    dbb0:	00c03fc4 	movi	r3,255
    dbb4:	30c02b26 	beq	r6,r3,dc64 <__addsf3+0x384>
    dbb8:	00c006c4 	movi	r3,27
    dbbc:	18806d16 	blt	r3,r2,dd74 <__addsf3+0x494>
    dbc0:	00c00804 	movi	r3,32
    dbc4:	1887c83a 	sub	r3,r3,r2
    dbc8:	20c6983a 	sll	r3,r4,r3
    dbcc:	2084d83a 	srl	r2,r4,r2
    dbd0:	1808c03a 	cmpne	r4,r3,zero
    dbd4:	1108b03a 	or	r4,r2,r4
    dbd8:	2909c83a 	sub	r4,r5,r4
    dbdc:	3021883a 	mov	r16,r6
    dbe0:	3823883a 	mov	r17,r7
    dbe4:	003f7e06 	br	d9e0 <__alt_data_end+0xfc00d9e0>
    dbe8:	903f821e 	bne	r18,zero,d9f4 <__alt_data_end+0xfc00d9f4>
    dbec:	0005883a 	mov	r2,zero
    dbf0:	0021883a 	mov	r16,zero
    dbf4:	003fba06 	br	dae0 <__alt_data_end+0xfc00dae0>
    dbf8:	00c03fc4 	movi	r3,255
    dbfc:	30c01926 	beq	r6,r3,dc64 <__addsf3+0x384>
    dc00:	0085c83a 	sub	r2,zero,r2
    dc04:	21010034 	orhi	r4,r4,1024
    dc08:	003feb06 	br	dbb8 <__alt_data_end+0xfc00dbb8>
    dc0c:	043fffc4 	movi	r16,-1
    dc10:	0009883a 	mov	r4,zero
    dc14:	003f5706 	br	d974 <__alt_data_end+0xfc00d974>
    dc18:	80004a1e 	bne	r16,zero,dd44 <__addsf3+0x464>
    dc1c:	20005926 	beq	r4,zero,dd84 <__addsf3+0x4a4>
    dc20:	283f4626 	beq	r5,zero,d93c <__alt_data_end+0xfc00d93c>
    dc24:	2149883a 	add	r4,r4,r5
    dc28:	2081002c 	andhi	r2,r4,1024
    dc2c:	103f8226 	beq	r2,zero,da38 <__alt_data_end+0xfc00da38>
    dc30:	00bf0034 	movhi	r2,64512
    dc34:	10bfffc4 	addi	r2,r2,-1
    dc38:	3021883a 	mov	r16,r6
    dc3c:	2088703a 	and	r4,r4,r2
    dc40:	003f3e06 	br	d93c <__alt_data_end+0xfc00d93c>
    dc44:	8000121e 	bne	r16,zero,dc90 <__addsf3+0x3b0>
    dc48:	2000261e 	bne	r4,zero,dce4 <__addsf3+0x404>
    dc4c:	283fa226 	beq	r5,zero,dad8 <__alt_data_end+0xfc00dad8>
    dc50:	2809883a 	mov	r4,r5
    dc54:	3823883a 	mov	r17,r7
    dc58:	003f3806 	br	d93c <__alt_data_end+0xfc00d93c>
    dc5c:	01400044 	movi	r5,1
    dc60:	003f9006 	br	daa4 <__alt_data_end+0xfc00daa4>
    dc64:	2809883a 	mov	r4,r5
    dc68:	3021883a 	mov	r16,r6
    dc6c:	3823883a 	mov	r17,r7
    dc70:	003f3206 	br	d93c <__alt_data_end+0xfc00d93c>
    dc74:	80000c1e 	bne	r16,zero,dca8 <__addsf3+0x3c8>
    dc78:	20002f26 	beq	r4,zero,dd38 <__addsf3+0x458>
    dc7c:	00c6303a 	nor	r3,zero,r3
    dc80:	18002b1e 	bne	r3,zero,dd30 <__addsf3+0x450>
    dc84:	2149883a 	add	r4,r4,r5
    dc88:	3021883a 	mov	r16,r6
    dc8c:	003f8606 	br	daa8 <__alt_data_end+0xfc00daa8>
    dc90:	20001b1e 	bne	r4,zero,dd00 <__addsf3+0x420>
    dc94:	28003926 	beq	r5,zero,dd7c <__addsf3+0x49c>
    dc98:	2809883a 	mov	r4,r5
    dc9c:	3823883a 	mov	r17,r7
    dca0:	04003fc4 	movi	r16,255
    dca4:	003f2506 	br	d93c <__alt_data_end+0xfc00d93c>
    dca8:	01c03fc4 	movi	r7,255
    dcac:	31c02226 	beq	r6,r7,dd38 <__addsf3+0x458>
    dcb0:	00c7c83a 	sub	r3,zero,r3
    dcb4:	21010034 	orhi	r4,r4,1024
    dcb8:	01c006c4 	movi	r7,27
    dcbc:	38c03616 	blt	r7,r3,dd98 <__addsf3+0x4b8>
    dcc0:	01c00804 	movi	r7,32
    dcc4:	38cfc83a 	sub	r7,r7,r3
    dcc8:	21ce983a 	sll	r7,r4,r7
    dccc:	20c6d83a 	srl	r3,r4,r3
    dcd0:	3808c03a 	cmpne	r4,r7,zero
    dcd4:	1906b03a 	or	r3,r3,r4
    dcd8:	1949883a 	add	r4,r3,r5
    dcdc:	3021883a 	mov	r16,r6
    dce0:	003f7106 	br	daa8 <__alt_data_end+0xfc00daa8>
    dce4:	283f1526 	beq	r5,zero,d93c <__alt_data_end+0xfc00d93c>
    dce8:	2145c83a 	sub	r2,r4,r5
    dcec:	10c1002c 	andhi	r3,r2,1024
    dcf0:	183f4f26 	beq	r3,zero,da30 <__alt_data_end+0xfc00da30>
    dcf4:	2909c83a 	sub	r4,r5,r4
    dcf8:	3823883a 	mov	r17,r7
    dcfc:	003f0f06 	br	d93c <__alt_data_end+0xfc00d93c>
    dd00:	28001a26 	beq	r5,zero,dd6c <__addsf3+0x48c>
    dd04:	2008d0fa 	srli	r4,r4,3
    dd08:	2080102c 	andhi	r2,r4,64
    dd0c:	10000526 	beq	r2,zero,dd24 <__addsf3+0x444>
    dd10:	280ad0fa 	srli	r5,r5,3
    dd14:	2880102c 	andhi	r2,r5,64
    dd18:	1000021e 	bne	r2,zero,dd24 <__addsf3+0x444>
    dd1c:	2809883a 	mov	r4,r5
    dd20:	3823883a 	mov	r17,r7
    dd24:	200890fa 	slli	r4,r4,3
    dd28:	04003fc4 	movi	r16,255
    dd2c:	003f0306 	br	d93c <__alt_data_end+0xfc00d93c>
    dd30:	01c03fc4 	movi	r7,255
    dd34:	31ffe01e 	bne	r6,r7,dcb8 <__alt_data_end+0xfc00dcb8>
    dd38:	2809883a 	mov	r4,r5
    dd3c:	3021883a 	mov	r16,r6
    dd40:	003efe06 	br	d93c <__alt_data_end+0xfc00d93c>
    dd44:	20001126 	beq	r4,zero,dd8c <__addsf3+0x4ac>
    dd48:	28000826 	beq	r5,zero,dd6c <__addsf3+0x48c>
    dd4c:	2008d0fa 	srli	r4,r4,3
    dd50:	2080102c 	andhi	r2,r4,64
    dd54:	103ff326 	beq	r2,zero,dd24 <__alt_data_end+0xfc00dd24>
    dd58:	280ad0fa 	srli	r5,r5,3
    dd5c:	2880102c 	andhi	r2,r5,64
    dd60:	103ff01e 	bne	r2,zero,dd24 <__alt_data_end+0xfc00dd24>
    dd64:	2809883a 	mov	r4,r5
    dd68:	003fee06 	br	dd24 <__alt_data_end+0xfc00dd24>
    dd6c:	04003fc4 	movi	r16,255
    dd70:	003ef206 	br	d93c <__alt_data_end+0xfc00d93c>
    dd74:	01000044 	movi	r4,1
    dd78:	003f9706 	br	dbd8 <__alt_data_end+0xfc00dbd8>
    dd7c:	0005883a 	mov	r2,zero
    dd80:	003f3406 	br	da54 <__alt_data_end+0xfc00da54>
    dd84:	2809883a 	mov	r4,r5
    dd88:	003eec06 	br	d93c <__alt_data_end+0xfc00d93c>
    dd8c:	2809883a 	mov	r4,r5
    dd90:	04003fc4 	movi	r16,255
    dd94:	003ee906 	br	d93c <__alt_data_end+0xfc00d93c>
    dd98:	00c00044 	movi	r3,1
    dd9c:	003fce06 	br	dcd8 <__alt_data_end+0xfc00dcd8>
    dda0:	0005883a 	mov	r2,zero
    dda4:	003f4e06 	br	dae0 <__alt_data_end+0xfc00dae0>

0000dda8 <__divsf3>:
    dda8:	defff504 	addi	sp,sp,-44
    ddac:	200cd5fa 	srli	r6,r4,23
    ddb0:	dcc00415 	stw	r19,16(sp)
    ddb4:	2026d7fa 	srli	r19,r4,31
    ddb8:	00c02034 	movhi	r3,128
    ddbc:	dd800715 	stw	r22,28(sp)
    ddc0:	dd000515 	stw	r20,20(sp)
    ddc4:	dc800315 	stw	r18,12(sp)
    ddc8:	18ffffc4 	addi	r3,r3,-1
    ddcc:	dfc00a15 	stw	ra,40(sp)
    ddd0:	df000915 	stw	fp,36(sp)
    ddd4:	ddc00815 	stw	r23,32(sp)
    ddd8:	dd400615 	stw	r21,24(sp)
    dddc:	dc400215 	stw	r17,8(sp)
    dde0:	dc000115 	stw	r16,4(sp)
    dde4:	35003fcc 	andi	r20,r6,255
    dde8:	1924703a 	and	r18,r3,r4
    ddec:	9d803fcc 	andi	r22,r19,255
    ddf0:	a0005226 	beq	r20,zero,df3c <__divsf3+0x194>
    ddf4:	00803fc4 	movi	r2,255
    ddf8:	a0802e26 	beq	r20,r2,deb4 <__divsf3+0x10c>
    ddfc:	91002034 	orhi	r4,r18,128
    de00:	202490fa 	slli	r18,r4,3
    de04:	a53fe044 	addi	r20,r20,-127
    de08:	0021883a 	mov	r16,zero
    de0c:	002f883a 	mov	r23,zero
    de10:	280cd5fa 	srli	r6,r5,23
    de14:	282ad7fa 	srli	r21,r5,31
    de18:	00c02034 	movhi	r3,128
    de1c:	18ffffc4 	addi	r3,r3,-1
    de20:	31803fcc 	andi	r6,r6,255
    de24:	1962703a 	and	r17,r3,r5
    de28:	af003fcc 	andi	fp,r21,255
    de2c:	30004a26 	beq	r6,zero,df58 <__divsf3+0x1b0>
    de30:	00803fc4 	movi	r2,255
    de34:	30804526 	beq	r6,r2,df4c <__divsf3+0x1a4>
    de38:	89402034 	orhi	r5,r17,128
    de3c:	282290fa 	slli	r17,r5,3
    de40:	31bfe044 	addi	r6,r6,-127
    de44:	000b883a 	mov	r5,zero
    de48:	2c20b03a 	or	r16,r5,r16
    de4c:	802090ba 	slli	r16,r16,2
    de50:	00800074 	movhi	r2,1
    de54:	10b79d04 	addi	r2,r2,-8588
    de58:	80a1883a 	add	r16,r16,r2
    de5c:	81000017 	ldw	r4,0(r16)
    de60:	9d46f03a 	xor	r3,r19,r21
    de64:	180f883a 	mov	r7,r3
    de68:	18803fcc 	andi	r2,r3,255
    de6c:	a18dc83a 	sub	r6,r20,r6
    de70:	2000683a 	jmp	r4
    de74:	0000e058 	cmpnei	zero,zero,897
    de78:	0000dedc 	xori	zero,zero,891
    de7c:	0000e04c 	andi	zero,zero,897
    de80:	0000dec8 	cmpgei	zero,zero,891
    de84:	0000e04c 	andi	zero,zero,897
    de88:	0000e024 	muli	zero,zero,896
    de8c:	0000e04c 	andi	zero,zero,897
    de90:	0000dec8 	cmpgei	zero,zero,891
    de94:	0000dedc 	xori	zero,zero,891
    de98:	0000dedc 	xori	zero,zero,891
    de9c:	0000e024 	muli	zero,zero,896
    dea0:	0000dec8 	cmpgei	zero,zero,891
    dea4:	0000e138 	rdprs	zero,zero,900
    dea8:	0000e138 	rdprs	zero,zero,900
    deac:	0000e138 	rdprs	zero,zero,900
    deb0:	0000e0ec 	andhi	zero,zero,899
    deb4:	9000581e 	bne	r18,zero,e018 <__divsf3+0x270>
    deb8:	04000204 	movi	r16,8
    debc:	05c00084 	movi	r23,2
    dec0:	003fd306 	br	de10 <__alt_data_end+0xfc00de10>
    dec4:	0023883a 	mov	r17,zero
    dec8:	e02d883a 	mov	r22,fp
    decc:	282f883a 	mov	r23,r5
    ded0:	00800084 	movi	r2,2
    ded4:	b8808f1e 	bne	r23,r2,e114 <__divsf3+0x36c>
    ded8:	b005883a 	mov	r2,r22
    dedc:	11c0004c 	andi	r7,r2,1
    dee0:	013fffc4 	movi	r4,-1
    dee4:	000d883a 	mov	r6,zero
    dee8:	21003fcc 	andi	r4,r4,255
    deec:	200895fa 	slli	r4,r4,23
    def0:	38803fcc 	andi	r2,r7,255
    def4:	00c02034 	movhi	r3,128
    def8:	100497fa 	slli	r2,r2,31
    defc:	18ffffc4 	addi	r3,r3,-1
    df00:	30c6703a 	and	r3,r6,r3
    df04:	1906b03a 	or	r3,r3,r4
    df08:	1884b03a 	or	r2,r3,r2
    df0c:	dfc00a17 	ldw	ra,40(sp)
    df10:	df000917 	ldw	fp,36(sp)
    df14:	ddc00817 	ldw	r23,32(sp)
    df18:	dd800717 	ldw	r22,28(sp)
    df1c:	dd400617 	ldw	r21,24(sp)
    df20:	dd000517 	ldw	r20,20(sp)
    df24:	dcc00417 	ldw	r19,16(sp)
    df28:	dc800317 	ldw	r18,12(sp)
    df2c:	dc400217 	ldw	r17,8(sp)
    df30:	dc000117 	ldw	r16,4(sp)
    df34:	dec00b04 	addi	sp,sp,44
    df38:	f800283a 	ret
    df3c:	90002b1e 	bne	r18,zero,dfec <__divsf3+0x244>
    df40:	04000104 	movi	r16,4
    df44:	05c00044 	movi	r23,1
    df48:	003fb106 	br	de10 <__alt_data_end+0xfc00de10>
    df4c:	8800251e 	bne	r17,zero,dfe4 <__divsf3+0x23c>
    df50:	01400084 	movi	r5,2
    df54:	00000206 	br	df60 <__divsf3+0x1b8>
    df58:	88001a1e 	bne	r17,zero,dfc4 <__divsf3+0x21c>
    df5c:	01400044 	movi	r5,1
    df60:	8160b03a 	or	r16,r16,r5
    df64:	802090ba 	slli	r16,r16,2
    df68:	00c00074 	movhi	r3,1
    df6c:	18f7e104 	addi	r3,r3,-8316
    df70:	80e1883a 	add	r16,r16,r3
    df74:	80c00017 	ldw	r3,0(r16)
    df78:	9d44f03a 	xor	r2,r19,r21
    df7c:	a18dc83a 	sub	r6,r20,r6
    df80:	1800683a 	jmp	r3
    df84:	0000dedc 	xori	zero,zero,891
    df88:	0000dedc 	xori	zero,zero,891
    df8c:	0000e128 	cmpgeui	zero,zero,900
    df90:	0000dec4 	movi	zero,891
    df94:	0000e128 	cmpgeui	zero,zero,900
    df98:	0000e024 	muli	zero,zero,896
    df9c:	0000e128 	cmpgeui	zero,zero,900
    dfa0:	0000dec4 	movi	zero,891
    dfa4:	0000dedc 	xori	zero,zero,891
    dfa8:	0000dedc 	xori	zero,zero,891
    dfac:	0000e024 	muli	zero,zero,896
    dfb0:	0000dec4 	movi	zero,891
    dfb4:	0000e138 	rdprs	zero,zero,900
    dfb8:	0000e138 	rdprs	zero,zero,900
    dfbc:	0000e138 	rdprs	zero,zero,900
    dfc0:	0000e150 	cmplti	zero,zero,901
    dfc4:	8809883a 	mov	r4,r17
    dfc8:	000f35c0 	call	f35c <__clzsi2>
    dfcc:	10fffec4 	addi	r3,r2,-5
    dfd0:	10801d84 	addi	r2,r2,118
    dfd4:	88e2983a 	sll	r17,r17,r3
    dfd8:	008dc83a 	sub	r6,zero,r2
    dfdc:	000b883a 	mov	r5,zero
    dfe0:	003f9906 	br	de48 <__alt_data_end+0xfc00de48>
    dfe4:	014000c4 	movi	r5,3
    dfe8:	003f9706 	br	de48 <__alt_data_end+0xfc00de48>
    dfec:	9009883a 	mov	r4,r18
    dff0:	d9400015 	stw	r5,0(sp)
    dff4:	000f35c0 	call	f35c <__clzsi2>
    dff8:	10fffec4 	addi	r3,r2,-5
    dffc:	11801d84 	addi	r6,r2,118
    e000:	90e4983a 	sll	r18,r18,r3
    e004:	01a9c83a 	sub	r20,zero,r6
    e008:	0021883a 	mov	r16,zero
    e00c:	002f883a 	mov	r23,zero
    e010:	d9400017 	ldw	r5,0(sp)
    e014:	003f7e06 	br	de10 <__alt_data_end+0xfc00de10>
    e018:	04000304 	movi	r16,12
    e01c:	05c000c4 	movi	r23,3
    e020:	003f7b06 	br	de10 <__alt_data_end+0xfc00de10>
    e024:	01802034 	movhi	r6,128
    e028:	000f883a 	mov	r7,zero
    e02c:	31bfffc4 	addi	r6,r6,-1
    e030:	013fffc4 	movi	r4,-1
    e034:	003fac06 	br	dee8 <__alt_data_end+0xfc00dee8>
    e038:	01400044 	movi	r5,1
    e03c:	2909c83a 	sub	r4,r5,r4
    e040:	00c006c4 	movi	r3,27
    e044:	19004b0e 	bge	r3,r4,e174 <__divsf3+0x3cc>
    e048:	114e703a 	and	r7,r2,r5
    e04c:	0009883a 	mov	r4,zero
    e050:	000d883a 	mov	r6,zero
    e054:	003fa406 	br	dee8 <__alt_data_end+0xfc00dee8>
    e058:	9006917a 	slli	r3,r18,5
    e05c:	8822917a 	slli	r17,r17,5
    e060:	1c40372e 	bgeu	r3,r17,e140 <__divsf3+0x398>
    e064:	31bfffc4 	addi	r6,r6,-1
    e068:	010006c4 	movi	r4,27
    e06c:	000b883a 	mov	r5,zero
    e070:	180f883a 	mov	r7,r3
    e074:	294b883a 	add	r5,r5,r5
    e078:	18c7883a 	add	r3,r3,r3
    e07c:	38000116 	blt	r7,zero,e084 <__divsf3+0x2dc>
    e080:	1c400236 	bltu	r3,r17,e08c <__divsf3+0x2e4>
    e084:	1c47c83a 	sub	r3,r3,r17
    e088:	29400054 	ori	r5,r5,1
    e08c:	213fffc4 	addi	r4,r4,-1
    e090:	203ff71e 	bne	r4,zero,e070 <__alt_data_end+0xfc00e070>
    e094:	1806c03a 	cmpne	r3,r3,zero
    e098:	1962b03a 	or	r17,r3,r5
    e09c:	31001fc4 	addi	r4,r6,127
    e0a0:	013fe50e 	bge	zero,r4,e038 <__alt_data_end+0xfc00e038>
    e0a4:	88c001cc 	andi	r3,r17,7
    e0a8:	18000426 	beq	r3,zero,e0bc <__divsf3+0x314>
    e0ac:	88c003cc 	andi	r3,r17,15
    e0b0:	01400104 	movi	r5,4
    e0b4:	19400126 	beq	r3,r5,e0bc <__divsf3+0x314>
    e0b8:	8963883a 	add	r17,r17,r5
    e0bc:	88c2002c 	andhi	r3,r17,2048
    e0c0:	18000426 	beq	r3,zero,e0d4 <__divsf3+0x32c>
    e0c4:	00fe0034 	movhi	r3,63488
    e0c8:	18ffffc4 	addi	r3,r3,-1
    e0cc:	31002004 	addi	r4,r6,128
    e0d0:	88e2703a 	and	r17,r17,r3
    e0d4:	00c03f84 	movi	r3,254
    e0d8:	193f8016 	blt	r3,r4,dedc <__alt_data_end+0xfc00dedc>
    e0dc:	880c91ba 	slli	r6,r17,6
    e0e0:	11c0004c 	andi	r7,r2,1
    e0e4:	300cd27a 	srli	r6,r6,9
    e0e8:	003f7f06 	br	dee8 <__alt_data_end+0xfc00dee8>
    e0ec:	9080102c 	andhi	r2,r18,64
    e0f0:	10000226 	beq	r2,zero,e0fc <__divsf3+0x354>
    e0f4:	8880102c 	andhi	r2,r17,64
    e0f8:	10001826 	beq	r2,zero,e15c <__divsf3+0x3b4>
    e0fc:	00802034 	movhi	r2,128
    e100:	91801034 	orhi	r6,r18,64
    e104:	10bfffc4 	addi	r2,r2,-1
    e108:	980f883a 	mov	r7,r19
    e10c:	308c703a 	and	r6,r6,r2
    e110:	003fc706 	br	e030 <__alt_data_end+0xfc00e030>
    e114:	008000c4 	movi	r2,3
    e118:	b8802d26 	beq	r23,r2,e1d0 <__divsf3+0x428>
    e11c:	00c00044 	movi	r3,1
    e120:	b005883a 	mov	r2,r22
    e124:	b8ffdd1e 	bne	r23,r3,e09c <__alt_data_end+0xfc00e09c>
    e128:	11c0004c 	andi	r7,r2,1
    e12c:	0009883a 	mov	r4,zero
    e130:	000d883a 	mov	r6,zero
    e134:	003f6c06 	br	dee8 <__alt_data_end+0xfc00dee8>
    e138:	9023883a 	mov	r17,r18
    e13c:	003f6406 	br	ded0 <__alt_data_end+0xfc00ded0>
    e140:	1c47c83a 	sub	r3,r3,r17
    e144:	01000684 	movi	r4,26
    e148:	01400044 	movi	r5,1
    e14c:	003fc806 	br	e070 <__alt_data_end+0xfc00e070>
    e150:	9080102c 	andhi	r2,r18,64
    e154:	103fe926 	beq	r2,zero,e0fc <__alt_data_end+0xfc00e0fc>
    e158:	0023883a 	mov	r17,zero
    e15c:	00802034 	movhi	r2,128
    e160:	89801034 	orhi	r6,r17,64
    e164:	10bfffc4 	addi	r2,r2,-1
    e168:	a80f883a 	mov	r7,r21
    e16c:	308c703a 	and	r6,r6,r2
    e170:	003faf06 	br	e030 <__alt_data_end+0xfc00e030>
    e174:	01c00804 	movi	r7,32
    e178:	390fc83a 	sub	r7,r7,r4
    e17c:	89ce983a 	sll	r7,r17,r7
    e180:	890ad83a 	srl	r5,r17,r4
    e184:	380ec03a 	cmpne	r7,r7,zero
    e188:	29cab03a 	or	r5,r5,r7
    e18c:	28c001cc 	andi	r3,r5,7
    e190:	18000426 	beq	r3,zero,e1a4 <__divsf3+0x3fc>
    e194:	28c003cc 	andi	r3,r5,15
    e198:	01000104 	movi	r4,4
    e19c:	19000126 	beq	r3,r4,e1a4 <__divsf3+0x3fc>
    e1a0:	290b883a 	add	r5,r5,r4
    e1a4:	28c1002c 	andhi	r3,r5,1024
    e1a8:	18000426 	beq	r3,zero,e1bc <__divsf3+0x414>
    e1ac:	11c0004c 	andi	r7,r2,1
    e1b0:	01000044 	movi	r4,1
    e1b4:	000d883a 	mov	r6,zero
    e1b8:	003f4b06 	br	dee8 <__alt_data_end+0xfc00dee8>
    e1bc:	280a91ba 	slli	r5,r5,6
    e1c0:	11c0004c 	andi	r7,r2,1
    e1c4:	0009883a 	mov	r4,zero
    e1c8:	280cd27a 	srli	r6,r5,9
    e1cc:	003f4606 	br	dee8 <__alt_data_end+0xfc00dee8>
    e1d0:	00802034 	movhi	r2,128
    e1d4:	89801034 	orhi	r6,r17,64
    e1d8:	10bfffc4 	addi	r2,r2,-1
    e1dc:	b00f883a 	mov	r7,r22
    e1e0:	308c703a 	and	r6,r6,r2
    e1e4:	003f9206 	br	e030 <__alt_data_end+0xfc00e030>

0000e1e8 <__gesf2>:
    e1e8:	2004d5fa 	srli	r2,r4,23
    e1ec:	2806d5fa 	srli	r3,r5,23
    e1f0:	01802034 	movhi	r6,128
    e1f4:	31bfffc4 	addi	r6,r6,-1
    e1f8:	10803fcc 	andi	r2,r2,255
    e1fc:	01c03fc4 	movi	r7,255
    e200:	3110703a 	and	r8,r6,r4
    e204:	18c03fcc 	andi	r3,r3,255
    e208:	314c703a 	and	r6,r6,r5
    e20c:	2008d7fa 	srli	r4,r4,31
    e210:	280ad7fa 	srli	r5,r5,31
    e214:	11c01926 	beq	r2,r7,e27c <__gesf2+0x94>
    e218:	01c03fc4 	movi	r7,255
    e21c:	19c00f26 	beq	r3,r7,e25c <__gesf2+0x74>
    e220:	1000061e 	bne	r2,zero,e23c <__gesf2+0x54>
    e224:	400f003a 	cmpeq	r7,r8,zero
    e228:	1800071e 	bne	r3,zero,e248 <__gesf2+0x60>
    e22c:	3000061e 	bne	r6,zero,e248 <__gesf2+0x60>
    e230:	0005883a 	mov	r2,zero
    e234:	40000e1e 	bne	r8,zero,e270 <__gesf2+0x88>
    e238:	f800283a 	ret
    e23c:	18000a1e 	bne	r3,zero,e268 <__gesf2+0x80>
    e240:	30000b26 	beq	r6,zero,e270 <__gesf2+0x88>
    e244:	000f883a 	mov	r7,zero
    e248:	29403fcc 	andi	r5,r5,255
    e24c:	38000726 	beq	r7,zero,e26c <__gesf2+0x84>
    e250:	28000826 	beq	r5,zero,e274 <__gesf2+0x8c>
    e254:	00800044 	movi	r2,1
    e258:	f800283a 	ret
    e25c:	303ff026 	beq	r6,zero,e220 <__alt_data_end+0xfc00e220>
    e260:	00bfff84 	movi	r2,-2
    e264:	f800283a 	ret
    e268:	29403fcc 	andi	r5,r5,255
    e26c:	21400526 	beq	r4,r5,e284 <__gesf2+0x9c>
    e270:	203ff826 	beq	r4,zero,e254 <__alt_data_end+0xfc00e254>
    e274:	00bfffc4 	movi	r2,-1
    e278:	f800283a 	ret
    e27c:	403fe626 	beq	r8,zero,e218 <__alt_data_end+0xfc00e218>
    e280:	003ff706 	br	e260 <__alt_data_end+0xfc00e260>
    e284:	18bffa16 	blt	r3,r2,e270 <__alt_data_end+0xfc00e270>
    e288:	10c00216 	blt	r2,r3,e294 <__gesf2+0xac>
    e28c:	323ff836 	bltu	r6,r8,e270 <__alt_data_end+0xfc00e270>
    e290:	4180022e 	bgeu	r8,r6,e29c <__gesf2+0xb4>
    e294:	203fef1e 	bne	r4,zero,e254 <__alt_data_end+0xfc00e254>
    e298:	003ff606 	br	e274 <__alt_data_end+0xfc00e274>
    e29c:	0005883a 	mov	r2,zero
    e2a0:	f800283a 	ret

0000e2a4 <__mulsf3>:
    e2a4:	defff504 	addi	sp,sp,-44
    e2a8:	dc000115 	stw	r16,4(sp)
    e2ac:	2020d5fa 	srli	r16,r4,23
    e2b0:	dd400615 	stw	r21,24(sp)
    e2b4:	202ad7fa 	srli	r21,r4,31
    e2b8:	dc800315 	stw	r18,12(sp)
    e2bc:	04802034 	movhi	r18,128
    e2c0:	df000915 	stw	fp,36(sp)
    e2c4:	dd000515 	stw	r20,20(sp)
    e2c8:	94bfffc4 	addi	r18,r18,-1
    e2cc:	dfc00a15 	stw	ra,40(sp)
    e2d0:	ddc00815 	stw	r23,32(sp)
    e2d4:	dd800715 	stw	r22,28(sp)
    e2d8:	dcc00415 	stw	r19,16(sp)
    e2dc:	dc400215 	stw	r17,8(sp)
    e2e0:	84003fcc 	andi	r16,r16,255
    e2e4:	9124703a 	and	r18,r18,r4
    e2e8:	a829883a 	mov	r20,r21
    e2ec:	af003fcc 	andi	fp,r21,255
    e2f0:	80005426 	beq	r16,zero,e444 <__mulsf3+0x1a0>
    e2f4:	00803fc4 	movi	r2,255
    e2f8:	80802f26 	beq	r16,r2,e3b8 <__mulsf3+0x114>
    e2fc:	91002034 	orhi	r4,r18,128
    e300:	202490fa 	slli	r18,r4,3
    e304:	843fe044 	addi	r16,r16,-127
    e308:	0023883a 	mov	r17,zero
    e30c:	002f883a 	mov	r23,zero
    e310:	2804d5fa 	srli	r2,r5,23
    e314:	282cd7fa 	srli	r22,r5,31
    e318:	01002034 	movhi	r4,128
    e31c:	213fffc4 	addi	r4,r4,-1
    e320:	10803fcc 	andi	r2,r2,255
    e324:	2166703a 	and	r19,r4,r5
    e328:	b1803fcc 	andi	r6,r22,255
    e32c:	10004c26 	beq	r2,zero,e460 <__mulsf3+0x1bc>
    e330:	00c03fc4 	movi	r3,255
    e334:	10c04726 	beq	r2,r3,e454 <__mulsf3+0x1b0>
    e338:	99002034 	orhi	r4,r19,128
    e33c:	202690fa 	slli	r19,r4,3
    e340:	10bfe044 	addi	r2,r2,-127
    e344:	0007883a 	mov	r3,zero
    e348:	80a1883a 	add	r16,r16,r2
    e34c:	010003c4 	movi	r4,15
    e350:	1c44b03a 	or	r2,r3,r17
    e354:	b56af03a 	xor	r21,r22,r21
    e358:	81c00044 	addi	r7,r16,1
    e35c:	20806b36 	bltu	r4,r2,e50c <__mulsf3+0x268>
    e360:	100490ba 	slli	r2,r2,2
    e364:	01000074 	movhi	r4,1
    e368:	2138de04 	addi	r4,r4,-7304
    e36c:	1105883a 	add	r2,r2,r4
    e370:	10800017 	ldw	r2,0(r2)
    e374:	1000683a 	jmp	r2
    e378:	0000e50c 	andi	zero,zero,916
    e37c:	0000e3cc 	andi	zero,zero,911
    e380:	0000e3cc 	andi	zero,zero,911
    e384:	0000e3c8 	cmpgei	zero,zero,911
    e388:	0000e4f0 	cmpltui	zero,zero,915
    e38c:	0000e4f0 	cmpltui	zero,zero,915
    e390:	0000e4dc 	xori	zero,zero,915
    e394:	0000e3c8 	cmpgei	zero,zero,911
    e398:	0000e4f0 	cmpltui	zero,zero,915
    e39c:	0000e4dc 	xori	zero,zero,915
    e3a0:	0000e4f0 	cmpltui	zero,zero,915
    e3a4:	0000e3c8 	cmpgei	zero,zero,911
    e3a8:	0000e4fc 	xorhi	zero,zero,915
    e3ac:	0000e4fc 	xorhi	zero,zero,915
    e3b0:	0000e4fc 	xorhi	zero,zero,915
    e3b4:	0000e60c 	andi	zero,zero,920
    e3b8:	90003b1e 	bne	r18,zero,e4a8 <__mulsf3+0x204>
    e3bc:	04400204 	movi	r17,8
    e3c0:	05c00084 	movi	r23,2
    e3c4:	003fd206 	br	e310 <__alt_data_end+0xfc00e310>
    e3c8:	302b883a 	mov	r21,r6
    e3cc:	00800084 	movi	r2,2
    e3d0:	18802626 	beq	r3,r2,e46c <__mulsf3+0x1c8>
    e3d4:	008000c4 	movi	r2,3
    e3d8:	1880b826 	beq	r3,r2,e6bc <__mulsf3+0x418>
    e3dc:	00800044 	movi	r2,1
    e3e0:	1880af1e 	bne	r3,r2,e6a0 <__mulsf3+0x3fc>
    e3e4:	a829883a 	mov	r20,r21
    e3e8:	0007883a 	mov	r3,zero
    e3ec:	0009883a 	mov	r4,zero
    e3f0:	18803fcc 	andi	r2,r3,255
    e3f4:	100695fa 	slli	r3,r2,23
    e3f8:	a0803fcc 	andi	r2,r20,255
    e3fc:	100a97fa 	slli	r5,r2,31
    e400:	00802034 	movhi	r2,128
    e404:	10bfffc4 	addi	r2,r2,-1
    e408:	2084703a 	and	r2,r4,r2
    e40c:	10c4b03a 	or	r2,r2,r3
    e410:	1144b03a 	or	r2,r2,r5
    e414:	dfc00a17 	ldw	ra,40(sp)
    e418:	df000917 	ldw	fp,36(sp)
    e41c:	ddc00817 	ldw	r23,32(sp)
    e420:	dd800717 	ldw	r22,28(sp)
    e424:	dd400617 	ldw	r21,24(sp)
    e428:	dd000517 	ldw	r20,20(sp)
    e42c:	dcc00417 	ldw	r19,16(sp)
    e430:	dc800317 	ldw	r18,12(sp)
    e434:	dc400217 	ldw	r17,8(sp)
    e438:	dc000117 	ldw	r16,4(sp)
    e43c:	dec00b04 	addi	sp,sp,44
    e440:	f800283a 	ret
    e444:	90000d1e 	bne	r18,zero,e47c <__mulsf3+0x1d8>
    e448:	04400104 	movi	r17,4
    e44c:	05c00044 	movi	r23,1
    e450:	003faf06 	br	e310 <__alt_data_end+0xfc00e310>
    e454:	9806c03a 	cmpne	r3,r19,zero
    e458:	18c00084 	addi	r3,r3,2
    e45c:	003fba06 	br	e348 <__alt_data_end+0xfc00e348>
    e460:	9800141e 	bne	r19,zero,e4b4 <__mulsf3+0x210>
    e464:	00c00044 	movi	r3,1
    e468:	003fb706 	br	e348 <__alt_data_end+0xfc00e348>
    e46c:	a829883a 	mov	r20,r21
    e470:	00ffffc4 	movi	r3,-1
    e474:	0009883a 	mov	r4,zero
    e478:	003fdd06 	br	e3f0 <__alt_data_end+0xfc00e3f0>
    e47c:	9009883a 	mov	r4,r18
    e480:	d9400015 	stw	r5,0(sp)
    e484:	000f35c0 	call	f35c <__clzsi2>
    e488:	10fffec4 	addi	r3,r2,-5
    e48c:	10801d84 	addi	r2,r2,118
    e490:	90e4983a 	sll	r18,r18,r3
    e494:	00a1c83a 	sub	r16,zero,r2
    e498:	0023883a 	mov	r17,zero
    e49c:	002f883a 	mov	r23,zero
    e4a0:	d9400017 	ldw	r5,0(sp)
    e4a4:	003f9a06 	br	e310 <__alt_data_end+0xfc00e310>
    e4a8:	04400304 	movi	r17,12
    e4ac:	05c000c4 	movi	r23,3
    e4b0:	003f9706 	br	e310 <__alt_data_end+0xfc00e310>
    e4b4:	9809883a 	mov	r4,r19
    e4b8:	d9800015 	stw	r6,0(sp)
    e4bc:	000f35c0 	call	f35c <__clzsi2>
    e4c0:	10fffec4 	addi	r3,r2,-5
    e4c4:	10801d84 	addi	r2,r2,118
    e4c8:	98e6983a 	sll	r19,r19,r3
    e4cc:	0085c83a 	sub	r2,zero,r2
    e4d0:	0007883a 	mov	r3,zero
    e4d4:	d9800017 	ldw	r6,0(sp)
    e4d8:	003f9b06 	br	e348 <__alt_data_end+0xfc00e348>
    e4dc:	01002034 	movhi	r4,128
    e4e0:	0029883a 	mov	r20,zero
    e4e4:	213fffc4 	addi	r4,r4,-1
    e4e8:	00ffffc4 	movi	r3,-1
    e4ec:	003fc006 	br	e3f0 <__alt_data_end+0xfc00e3f0>
    e4f0:	9027883a 	mov	r19,r18
    e4f4:	b807883a 	mov	r3,r23
    e4f8:	003fb406 	br	e3cc <__alt_data_end+0xfc00e3cc>
    e4fc:	9027883a 	mov	r19,r18
    e500:	e02b883a 	mov	r21,fp
    e504:	b807883a 	mov	r3,r23
    e508:	003fb006 	br	e3cc <__alt_data_end+0xfc00e3cc>
    e50c:	9028d43a 	srli	r20,r18,16
    e510:	982cd43a 	srli	r22,r19,16
    e514:	94bfffcc 	andi	r18,r18,65535
    e518:	9cffffcc 	andi	r19,r19,65535
    e51c:	980b883a 	mov	r5,r19
    e520:	9009883a 	mov	r4,r18
    e524:	d9c00015 	stw	r7,0(sp)
    e528:	000d8b80 	call	d8b8 <__mulsi3>
    e52c:	a00b883a 	mov	r5,r20
    e530:	9809883a 	mov	r4,r19
    e534:	1023883a 	mov	r17,r2
    e538:	000d8b80 	call	d8b8 <__mulsi3>
    e53c:	a009883a 	mov	r4,r20
    e540:	b00b883a 	mov	r5,r22
    e544:	1027883a 	mov	r19,r2
    e548:	000d8b80 	call	d8b8 <__mulsi3>
    e54c:	b00b883a 	mov	r5,r22
    e550:	9009883a 	mov	r4,r18
    e554:	1029883a 	mov	r20,r2
    e558:	000d8b80 	call	d8b8 <__mulsi3>
    e55c:	8806d43a 	srli	r3,r17,16
    e560:	14c5883a 	add	r2,r2,r19
    e564:	d9c00017 	ldw	r7,0(sp)
    e568:	1885883a 	add	r2,r3,r2
    e56c:	14c0022e 	bgeu	r2,r19,e578 <__mulsf3+0x2d4>
    e570:	00c00074 	movhi	r3,1
    e574:	a0e9883a 	add	r20,r20,r3
    e578:	1026943a 	slli	r19,r2,16
    e57c:	8c7fffcc 	andi	r17,r17,65535
    e580:	1004d43a 	srli	r2,r2,16
    e584:	9c63883a 	add	r17,r19,r17
    e588:	882691ba 	slli	r19,r17,6
    e58c:	1505883a 	add	r2,r2,r20
    e590:	8822d6ba 	srli	r17,r17,26
    e594:	100891ba 	slli	r4,r2,6
    e598:	9826c03a 	cmpne	r19,r19,zero
    e59c:	9c62b03a 	or	r17,r19,r17
    e5a0:	8926b03a 	or	r19,r17,r4
    e5a4:	9882002c 	andhi	r2,r19,2048
    e5a8:	10000426 	beq	r2,zero,e5bc <__mulsf3+0x318>
    e5ac:	9804d07a 	srli	r2,r19,1
    e5b0:	9900004c 	andi	r4,r19,1
    e5b4:	3821883a 	mov	r16,r7
    e5b8:	1126b03a 	or	r19,r2,r4
    e5bc:	80c01fc4 	addi	r3,r16,127
    e5c0:	00c0210e 	bge	zero,r3,e648 <__mulsf3+0x3a4>
    e5c4:	988001cc 	andi	r2,r19,7
    e5c8:	10000426 	beq	r2,zero,e5dc <__mulsf3+0x338>
    e5cc:	988003cc 	andi	r2,r19,15
    e5d0:	01000104 	movi	r4,4
    e5d4:	11000126 	beq	r2,r4,e5dc <__mulsf3+0x338>
    e5d8:	9927883a 	add	r19,r19,r4
    e5dc:	9882002c 	andhi	r2,r19,2048
    e5e0:	10000426 	beq	r2,zero,e5f4 <__mulsf3+0x350>
    e5e4:	00be0034 	movhi	r2,63488
    e5e8:	10bfffc4 	addi	r2,r2,-1
    e5ec:	80c02004 	addi	r3,r16,128
    e5f0:	98a6703a 	and	r19,r19,r2
    e5f4:	00803f84 	movi	r2,254
    e5f8:	10ff9c16 	blt	r2,r3,e46c <__alt_data_end+0xfc00e46c>
    e5fc:	980891ba 	slli	r4,r19,6
    e600:	a829883a 	mov	r20,r21
    e604:	2008d27a 	srli	r4,r4,9
    e608:	003f7906 	br	e3f0 <__alt_data_end+0xfc00e3f0>
    e60c:	9080102c 	andhi	r2,r18,64
    e610:	10000826 	beq	r2,zero,e634 <__mulsf3+0x390>
    e614:	9880102c 	andhi	r2,r19,64
    e618:	1000061e 	bne	r2,zero,e634 <__mulsf3+0x390>
    e61c:	00802034 	movhi	r2,128
    e620:	99001034 	orhi	r4,r19,64
    e624:	10bfffc4 	addi	r2,r2,-1
    e628:	b029883a 	mov	r20,r22
    e62c:	2088703a 	and	r4,r4,r2
    e630:	003fad06 	br	e4e8 <__alt_data_end+0xfc00e4e8>
    e634:	00802034 	movhi	r2,128
    e638:	91001034 	orhi	r4,r18,64
    e63c:	10bfffc4 	addi	r2,r2,-1
    e640:	2088703a 	and	r4,r4,r2
    e644:	003fa806 	br	e4e8 <__alt_data_end+0xfc00e4e8>
    e648:	00800044 	movi	r2,1
    e64c:	10c7c83a 	sub	r3,r2,r3
    e650:	008006c4 	movi	r2,27
    e654:	10ff6316 	blt	r2,r3,e3e4 <__alt_data_end+0xfc00e3e4>
    e658:	00800804 	movi	r2,32
    e65c:	10c5c83a 	sub	r2,r2,r3
    e660:	9884983a 	sll	r2,r19,r2
    e664:	98c6d83a 	srl	r3,r19,r3
    e668:	1004c03a 	cmpne	r2,r2,zero
    e66c:	1884b03a 	or	r2,r3,r2
    e670:	10c001cc 	andi	r3,r2,7
    e674:	18000426 	beq	r3,zero,e688 <__mulsf3+0x3e4>
    e678:	10c003cc 	andi	r3,r2,15
    e67c:	01000104 	movi	r4,4
    e680:	19000126 	beq	r3,r4,e688 <__mulsf3+0x3e4>
    e684:	1105883a 	add	r2,r2,r4
    e688:	10c1002c 	andhi	r3,r2,1024
    e68c:	18000626 	beq	r3,zero,e6a8 <__mulsf3+0x404>
    e690:	a829883a 	mov	r20,r21
    e694:	00c00044 	movi	r3,1
    e698:	0009883a 	mov	r4,zero
    e69c:	003f5406 	br	e3f0 <__alt_data_end+0xfc00e3f0>
    e6a0:	3821883a 	mov	r16,r7
    e6a4:	003fc506 	br	e5bc <__alt_data_end+0xfc00e5bc>
    e6a8:	100491ba 	slli	r2,r2,6
    e6ac:	a829883a 	mov	r20,r21
    e6b0:	0007883a 	mov	r3,zero
    e6b4:	1008d27a 	srli	r4,r2,9
    e6b8:	003f4d06 	br	e3f0 <__alt_data_end+0xfc00e3f0>
    e6bc:	00802034 	movhi	r2,128
    e6c0:	99001034 	orhi	r4,r19,64
    e6c4:	10bfffc4 	addi	r2,r2,-1
    e6c8:	a829883a 	mov	r20,r21
    e6cc:	2088703a 	and	r4,r4,r2
    e6d0:	003f8506 	br	e4e8 <__alt_data_end+0xfc00e4e8>

0000e6d4 <__subsf3>:
    e6d4:	defffc04 	addi	sp,sp,-16
    e6d8:	280cd5fa 	srli	r6,r5,23
    e6dc:	dc000015 	stw	r16,0(sp)
    e6e0:	01c02034 	movhi	r7,128
    e6e4:	2020d5fa 	srli	r16,r4,23
    e6e8:	39ffffc4 	addi	r7,r7,-1
    e6ec:	3906703a 	and	r3,r7,r4
    e6f0:	dc400115 	stw	r17,4(sp)
    e6f4:	394e703a 	and	r7,r7,r5
    e6f8:	2022d7fa 	srli	r17,r4,31
    e6fc:	dfc00315 	stw	ra,12(sp)
    e700:	dc800215 	stw	r18,8(sp)
    e704:	31803fcc 	andi	r6,r6,255
    e708:	01003fc4 	movi	r4,255
    e70c:	84003fcc 	andi	r16,r16,255
    e710:	180690fa 	slli	r3,r3,3
    e714:	2804d7fa 	srli	r2,r5,31
    e718:	380e90fa 	slli	r7,r7,3
    e71c:	31006d26 	beq	r6,r4,e8d4 <__subsf3+0x200>
    e720:	1080005c 	xori	r2,r2,1
    e724:	8189c83a 	sub	r4,r16,r6
    e728:	14404f26 	beq	r2,r17,e868 <__subsf3+0x194>
    e72c:	0100770e 	bge	zero,r4,e90c <__subsf3+0x238>
    e730:	30001e1e 	bne	r6,zero,e7ac <__subsf3+0xd8>
    e734:	38006a1e 	bne	r7,zero,e8e0 <__subsf3+0x20c>
    e738:	188001cc 	andi	r2,r3,7
    e73c:	10000426 	beq	r2,zero,e750 <__subsf3+0x7c>
    e740:	188003cc 	andi	r2,r3,15
    e744:	01000104 	movi	r4,4
    e748:	11000126 	beq	r2,r4,e750 <__subsf3+0x7c>
    e74c:	1907883a 	add	r3,r3,r4
    e750:	1881002c 	andhi	r2,r3,1024
    e754:	10003926 	beq	r2,zero,e83c <__subsf3+0x168>
    e758:	84000044 	addi	r16,r16,1
    e75c:	00803fc4 	movi	r2,255
    e760:	80807526 	beq	r16,r2,e938 <__subsf3+0x264>
    e764:	180691ba 	slli	r3,r3,6
    e768:	8880004c 	andi	r2,r17,1
    e76c:	180ad27a 	srli	r5,r3,9
    e770:	84003fcc 	andi	r16,r16,255
    e774:	800695fa 	slli	r3,r16,23
    e778:	10803fcc 	andi	r2,r2,255
    e77c:	01002034 	movhi	r4,128
    e780:	213fffc4 	addi	r4,r4,-1
    e784:	100497fa 	slli	r2,r2,31
    e788:	2920703a 	and	r16,r5,r4
    e78c:	80e0b03a 	or	r16,r16,r3
    e790:	8084b03a 	or	r2,r16,r2
    e794:	dfc00317 	ldw	ra,12(sp)
    e798:	dc800217 	ldw	r18,8(sp)
    e79c:	dc400117 	ldw	r17,4(sp)
    e7a0:	dc000017 	ldw	r16,0(sp)
    e7a4:	dec00404 	addi	sp,sp,16
    e7a8:	f800283a 	ret
    e7ac:	00803fc4 	movi	r2,255
    e7b0:	80bfe126 	beq	r16,r2,e738 <__alt_data_end+0xfc00e738>
    e7b4:	39c10034 	orhi	r7,r7,1024
    e7b8:	008006c4 	movi	r2,27
    e7bc:	11007416 	blt	r2,r4,e990 <__subsf3+0x2bc>
    e7c0:	00800804 	movi	r2,32
    e7c4:	1105c83a 	sub	r2,r2,r4
    e7c8:	3884983a 	sll	r2,r7,r2
    e7cc:	390ed83a 	srl	r7,r7,r4
    e7d0:	1008c03a 	cmpne	r4,r2,zero
    e7d4:	390eb03a 	or	r7,r7,r4
    e7d8:	19c7c83a 	sub	r3,r3,r7
    e7dc:	1881002c 	andhi	r2,r3,1024
    e7e0:	10001426 	beq	r2,zero,e834 <__subsf3+0x160>
    e7e4:	04810034 	movhi	r18,1024
    e7e8:	94bfffc4 	addi	r18,r18,-1
    e7ec:	1ca4703a 	and	r18,r3,r18
    e7f0:	9009883a 	mov	r4,r18
    e7f4:	000f35c0 	call	f35c <__clzsi2>
    e7f8:	10bffec4 	addi	r2,r2,-5
    e7fc:	90a4983a 	sll	r18,r18,r2
    e800:	14005116 	blt	r2,r16,e948 <__subsf3+0x274>
    e804:	1405c83a 	sub	r2,r2,r16
    e808:	10c00044 	addi	r3,r2,1
    e80c:	00800804 	movi	r2,32
    e810:	10c5c83a 	sub	r2,r2,r3
    e814:	9084983a 	sll	r2,r18,r2
    e818:	90e4d83a 	srl	r18,r18,r3
    e81c:	0021883a 	mov	r16,zero
    e820:	1006c03a 	cmpne	r3,r2,zero
    e824:	90c6b03a 	or	r3,r18,r3
    e828:	003fc306 	br	e738 <__alt_data_end+0xfc00e738>
    e82c:	2000e026 	beq	r4,zero,ebb0 <__subsf3+0x4dc>
    e830:	2007883a 	mov	r3,r4
    e834:	188001cc 	andi	r2,r3,7
    e838:	103fc11e 	bne	r2,zero,e740 <__alt_data_end+0xfc00e740>
    e83c:	180ad0fa 	srli	r5,r3,3
    e840:	00c03fc4 	movi	r3,255
    e844:	8880004c 	andi	r2,r17,1
    e848:	80c0031e 	bne	r16,r3,e858 <__subsf3+0x184>
    e84c:	28006d26 	beq	r5,zero,ea04 <__subsf3+0x330>
    e850:	29401034 	orhi	r5,r5,64
    e854:	043fffc4 	movi	r16,-1
    e858:	00c02034 	movhi	r3,128
    e85c:	18ffffc4 	addi	r3,r3,-1
    e860:	28ca703a 	and	r5,r5,r3
    e864:	003fc206 	br	e770 <__alt_data_end+0xfc00e770>
    e868:	01003c0e 	bge	zero,r4,e95c <__subsf3+0x288>
    e86c:	30002126 	beq	r6,zero,e8f4 <__subsf3+0x220>
    e870:	01403fc4 	movi	r5,255
    e874:	817fb026 	beq	r16,r5,e738 <__alt_data_end+0xfc00e738>
    e878:	39c10034 	orhi	r7,r7,1024
    e87c:	014006c4 	movi	r5,27
    e880:	29007416 	blt	r5,r4,ea54 <__subsf3+0x380>
    e884:	01400804 	movi	r5,32
    e888:	290bc83a 	sub	r5,r5,r4
    e88c:	394a983a 	sll	r5,r7,r5
    e890:	390ed83a 	srl	r7,r7,r4
    e894:	2808c03a 	cmpne	r4,r5,zero
    e898:	390eb03a 	or	r7,r7,r4
    e89c:	19c7883a 	add	r3,r3,r7
    e8a0:	1901002c 	andhi	r4,r3,1024
    e8a4:	20003826 	beq	r4,zero,e988 <__subsf3+0x2b4>
    e8a8:	84000044 	addi	r16,r16,1
    e8ac:	01003fc4 	movi	r4,255
    e8b0:	81005426 	beq	r16,r4,ea04 <__subsf3+0x330>
    e8b4:	1023883a 	mov	r17,r2
    e8b8:	00bf0034 	movhi	r2,64512
    e8bc:	10bfffc4 	addi	r2,r2,-1
    e8c0:	1900004c 	andi	r4,r3,1
    e8c4:	1886703a 	and	r3,r3,r2
    e8c8:	1806d07a 	srli	r3,r3,1
    e8cc:	1906b03a 	or	r3,r3,r4
    e8d0:	003f9906 	br	e738 <__alt_data_end+0xfc00e738>
    e8d4:	383f9226 	beq	r7,zero,e720 <__alt_data_end+0xfc00e720>
    e8d8:	10803fcc 	andi	r2,r2,255
    e8dc:	003f9106 	br	e724 <__alt_data_end+0xfc00e724>
    e8e0:	213fffc4 	addi	r4,r4,-1
    e8e4:	203fbc26 	beq	r4,zero,e7d8 <__alt_data_end+0xfc00e7d8>
    e8e8:	00803fc4 	movi	r2,255
    e8ec:	80bfb21e 	bne	r16,r2,e7b8 <__alt_data_end+0xfc00e7b8>
    e8f0:	003f9106 	br	e738 <__alt_data_end+0xfc00e738>
    e8f4:	383f9026 	beq	r7,zero,e738 <__alt_data_end+0xfc00e738>
    e8f8:	213fffc4 	addi	r4,r4,-1
    e8fc:	203fe726 	beq	r4,zero,e89c <__alt_data_end+0xfc00e89c>
    e900:	01403fc4 	movi	r5,255
    e904:	817fdd1e 	bne	r16,r5,e87c <__alt_data_end+0xfc00e87c>
    e908:	003f8b06 	br	e738 <__alt_data_end+0xfc00e738>
    e90c:	2000221e 	bne	r4,zero,e998 <__subsf3+0x2c4>
    e910:	81000044 	addi	r4,r16,1
    e914:	21003fcc 	andi	r4,r4,255
    e918:	01400044 	movi	r5,1
    e91c:	2900470e 	bge	r5,r4,ea3c <__subsf3+0x368>
    e920:	19e5c83a 	sub	r18,r3,r7
    e924:	9141002c 	andhi	r5,r18,1024
    e928:	28002d26 	beq	r5,zero,e9e0 <__subsf3+0x30c>
    e92c:	38e5c83a 	sub	r18,r7,r3
    e930:	1023883a 	mov	r17,r2
    e934:	003fae06 	br	e7f0 <__alt_data_end+0xfc00e7f0>
    e938:	8880004c 	andi	r2,r17,1
    e93c:	043fffc4 	movi	r16,-1
    e940:	000b883a 	mov	r5,zero
    e944:	003f8a06 	br	e770 <__alt_data_end+0xfc00e770>
    e948:	00ff0034 	movhi	r3,64512
    e94c:	18ffffc4 	addi	r3,r3,-1
    e950:	80a1c83a 	sub	r16,r16,r2
    e954:	90c6703a 	and	r3,r18,r3
    e958:	003f7706 	br	e738 <__alt_data_end+0xfc00e738>
    e95c:	2000431e 	bne	r4,zero,ea6c <__subsf3+0x398>
    e960:	81000044 	addi	r4,r16,1
    e964:	21803fcc 	andi	r6,r4,255
    e968:	01400044 	movi	r5,1
    e96c:	2980280e 	bge	r5,r6,ea10 <__subsf3+0x33c>
    e970:	01403fc4 	movi	r5,255
    e974:	21402326 	beq	r4,r5,ea04 <__subsf3+0x330>
    e978:	19c7883a 	add	r3,r3,r7
    e97c:	1806d07a 	srli	r3,r3,1
    e980:	2021883a 	mov	r16,r4
    e984:	003f6c06 	br	e738 <__alt_data_end+0xfc00e738>
    e988:	1023883a 	mov	r17,r2
    e98c:	003fa906 	br	e834 <__alt_data_end+0xfc00e834>
    e990:	01c00044 	movi	r7,1
    e994:	003f9006 	br	e7d8 <__alt_data_end+0xfc00e7d8>
    e998:	8000151e 	bne	r16,zero,e9f0 <__subsf3+0x31c>
    e99c:	18002f26 	beq	r3,zero,ea5c <__subsf3+0x388>
    e9a0:	0108303a 	nor	r4,zero,r4
    e9a4:	20000a26 	beq	r4,zero,e9d0 <__subsf3+0x2fc>
    e9a8:	01403fc4 	movi	r5,255
    e9ac:	31402b26 	beq	r6,r5,ea5c <__subsf3+0x388>
    e9b0:	014006c4 	movi	r5,27
    e9b4:	29006e16 	blt	r5,r4,eb70 <__subsf3+0x49c>
    e9b8:	01400804 	movi	r5,32
    e9bc:	290bc83a 	sub	r5,r5,r4
    e9c0:	194a983a 	sll	r5,r3,r5
    e9c4:	1908d83a 	srl	r4,r3,r4
    e9c8:	2806c03a 	cmpne	r3,r5,zero
    e9cc:	20c6b03a 	or	r3,r4,r3
    e9d0:	38c7c83a 	sub	r3,r7,r3
    e9d4:	3021883a 	mov	r16,r6
    e9d8:	1023883a 	mov	r17,r2
    e9dc:	003f7f06 	br	e7dc <__alt_data_end+0xfc00e7dc>
    e9e0:	903f831e 	bne	r18,zero,e7f0 <__alt_data_end+0xfc00e7f0>
    e9e4:	0005883a 	mov	r2,zero
    e9e8:	0021883a 	mov	r16,zero
    e9ec:	003f9a06 	br	e858 <__alt_data_end+0xfc00e858>
    e9f0:	01403fc4 	movi	r5,255
    e9f4:	31401926 	beq	r6,r5,ea5c <__subsf3+0x388>
    e9f8:	0109c83a 	sub	r4,zero,r4
    e9fc:	18c10034 	orhi	r3,r3,1024
    ea00:	003feb06 	br	e9b0 <__alt_data_end+0xfc00e9b0>
    ea04:	043fffc4 	movi	r16,-1
    ea08:	000b883a 	mov	r5,zero
    ea0c:	003f5806 	br	e770 <__alt_data_end+0xfc00e770>
    ea10:	8000481e 	bne	r16,zero,eb34 <__subsf3+0x460>
    ea14:	18006226 	beq	r3,zero,eba0 <__subsf3+0x4cc>
    ea18:	383f4726 	beq	r7,zero,e738 <__alt_data_end+0xfc00e738>
    ea1c:	19c7883a 	add	r3,r3,r7
    ea20:	1881002c 	andhi	r2,r3,1024
    ea24:	103f8326 	beq	r2,zero,e834 <__alt_data_end+0xfc00e834>
    ea28:	00bf0034 	movhi	r2,64512
    ea2c:	10bfffc4 	addi	r2,r2,-1
    ea30:	2821883a 	mov	r16,r5
    ea34:	1886703a 	and	r3,r3,r2
    ea38:	003f3f06 	br	e738 <__alt_data_end+0xfc00e738>
    ea3c:	80001c1e 	bne	r16,zero,eab0 <__subsf3+0x3dc>
    ea40:	1800261e 	bne	r3,zero,eadc <__subsf3+0x408>
    ea44:	38004c26 	beq	r7,zero,eb78 <__subsf3+0x4a4>
    ea48:	3807883a 	mov	r3,r7
    ea4c:	1023883a 	mov	r17,r2
    ea50:	003f3906 	br	e738 <__alt_data_end+0xfc00e738>
    ea54:	01c00044 	movi	r7,1
    ea58:	003f9006 	br	e89c <__alt_data_end+0xfc00e89c>
    ea5c:	3807883a 	mov	r3,r7
    ea60:	3021883a 	mov	r16,r6
    ea64:	1023883a 	mov	r17,r2
    ea68:	003f3306 	br	e738 <__alt_data_end+0xfc00e738>
    ea6c:	8000161e 	bne	r16,zero,eac8 <__subsf3+0x3f4>
    ea70:	18002d26 	beq	r3,zero,eb28 <__subsf3+0x454>
    ea74:	0108303a 	nor	r4,zero,r4
    ea78:	20000a26 	beq	r4,zero,eaa4 <__subsf3+0x3d0>
    ea7c:	01403fc4 	movi	r5,255
    ea80:	31402926 	beq	r6,r5,eb28 <__subsf3+0x454>
    ea84:	014006c4 	movi	r5,27
    ea88:	29004716 	blt	r5,r4,eba8 <__subsf3+0x4d4>
    ea8c:	01400804 	movi	r5,32
    ea90:	290bc83a 	sub	r5,r5,r4
    ea94:	194a983a 	sll	r5,r3,r5
    ea98:	1908d83a 	srl	r4,r3,r4
    ea9c:	2806c03a 	cmpne	r3,r5,zero
    eaa0:	20c6b03a 	or	r3,r4,r3
    eaa4:	19c7883a 	add	r3,r3,r7
    eaa8:	3021883a 	mov	r16,r6
    eaac:	003f7c06 	br	e8a0 <__alt_data_end+0xfc00e8a0>
    eab0:	1800111e 	bne	r3,zero,eaf8 <__subsf3+0x424>
    eab4:	38003326 	beq	r7,zero,eb84 <__subsf3+0x4b0>
    eab8:	3807883a 	mov	r3,r7
    eabc:	1023883a 	mov	r17,r2
    eac0:	04003fc4 	movi	r16,255
    eac4:	003f1c06 	br	e738 <__alt_data_end+0xfc00e738>
    eac8:	01403fc4 	movi	r5,255
    eacc:	31401626 	beq	r6,r5,eb28 <__subsf3+0x454>
    ead0:	0109c83a 	sub	r4,zero,r4
    ead4:	18c10034 	orhi	r3,r3,1024
    ead8:	003fea06 	br	ea84 <__alt_data_end+0xfc00ea84>
    eadc:	383f1626 	beq	r7,zero,e738 <__alt_data_end+0xfc00e738>
    eae0:	19c9c83a 	sub	r4,r3,r7
    eae4:	2141002c 	andhi	r5,r4,1024
    eae8:	283f5026 	beq	r5,zero,e82c <__alt_data_end+0xfc00e82c>
    eaec:	38c7c83a 	sub	r3,r7,r3
    eaf0:	1023883a 	mov	r17,r2
    eaf4:	003f1006 	br	e738 <__alt_data_end+0xfc00e738>
    eaf8:	38001b26 	beq	r7,zero,eb68 <__subsf3+0x494>
    eafc:	1806d0fa 	srli	r3,r3,3
    eb00:	1900102c 	andhi	r4,r3,64
    eb04:	20000526 	beq	r4,zero,eb1c <__subsf3+0x448>
    eb08:	380ed0fa 	srli	r7,r7,3
    eb0c:	3900102c 	andhi	r4,r7,64
    eb10:	2000021e 	bne	r4,zero,eb1c <__subsf3+0x448>
    eb14:	3807883a 	mov	r3,r7
    eb18:	1023883a 	mov	r17,r2
    eb1c:	180690fa 	slli	r3,r3,3
    eb20:	04003fc4 	movi	r16,255
    eb24:	003f0406 	br	e738 <__alt_data_end+0xfc00e738>
    eb28:	3807883a 	mov	r3,r7
    eb2c:	3021883a 	mov	r16,r6
    eb30:	003f0106 	br	e738 <__alt_data_end+0xfc00e738>
    eb34:	18001726 	beq	r3,zero,eb94 <__subsf3+0x4c0>
    eb38:	38000b26 	beq	r7,zero,eb68 <__subsf3+0x494>
    eb3c:	1806d0fa 	srli	r3,r3,3
    eb40:	1900102c 	andhi	r4,r3,64
    eb44:	20000426 	beq	r4,zero,eb58 <__subsf3+0x484>
    eb48:	380ed0fa 	srli	r7,r7,3
    eb4c:	3900102c 	andhi	r4,r7,64
    eb50:	2000011e 	bne	r4,zero,eb58 <__subsf3+0x484>
    eb54:	3807883a 	mov	r3,r7
    eb58:	180690fa 	slli	r3,r3,3
    eb5c:	1023883a 	mov	r17,r2
    eb60:	04003fc4 	movi	r16,255
    eb64:	003ef406 	br	e738 <__alt_data_end+0xfc00e738>
    eb68:	04003fc4 	movi	r16,255
    eb6c:	003ef206 	br	e738 <__alt_data_end+0xfc00e738>
    eb70:	00c00044 	movi	r3,1
    eb74:	003f9606 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    eb78:	000b883a 	mov	r5,zero
    eb7c:	0005883a 	mov	r2,zero
    eb80:	003f3506 	br	e858 <__alt_data_end+0xfc00e858>
    eb84:	01402034 	movhi	r5,128
    eb88:	297fffc4 	addi	r5,r5,-1
    eb8c:	0005883a 	mov	r2,zero
    eb90:	003f2f06 	br	e850 <__alt_data_end+0xfc00e850>
    eb94:	3807883a 	mov	r3,r7
    eb98:	04003fc4 	movi	r16,255
    eb9c:	003ee606 	br	e738 <__alt_data_end+0xfc00e738>
    eba0:	3807883a 	mov	r3,r7
    eba4:	003ee406 	br	e738 <__alt_data_end+0xfc00e738>
    eba8:	00c00044 	movi	r3,1
    ebac:	003fbd06 	br	eaa4 <__alt_data_end+0xfc00eaa4>
    ebb0:	0005883a 	mov	r2,zero
    ebb4:	003f2806 	br	e858 <__alt_data_end+0xfc00e858>

0000ebb8 <__fixsfsi>:
    ebb8:	200ad5fa 	srli	r5,r4,23
    ebbc:	00c02034 	movhi	r3,128
    ebc0:	18ffffc4 	addi	r3,r3,-1
    ebc4:	29403fcc 	andi	r5,r5,255
    ebc8:	00801f84 	movi	r2,126
    ebcc:	1906703a 	and	r3,r3,r4
    ebd0:	2008d7fa 	srli	r4,r4,31
    ebd4:	11400e0e 	bge	r2,r5,ec10 <__fixsfsi+0x58>
    ebd8:	00802744 	movi	r2,157
    ebdc:	11400816 	blt	r2,r5,ec00 <__fixsfsi+0x48>
    ebe0:	00802544 	movi	r2,149
    ebe4:	18c02034 	orhi	r3,r3,128
    ebe8:	11400b0e 	bge	r2,r5,ec18 <__fixsfsi+0x60>
    ebec:	28bfda84 	addi	r2,r5,-150
    ebf0:	1884983a 	sll	r2,r3,r2
    ebf4:	20000726 	beq	r4,zero,ec14 <__fixsfsi+0x5c>
    ebf8:	0085c83a 	sub	r2,zero,r2
    ebfc:	f800283a 	ret
    ec00:	00a00034 	movhi	r2,32768
    ec04:	10bfffc4 	addi	r2,r2,-1
    ec08:	2085883a 	add	r2,r4,r2
    ec0c:	f800283a 	ret
    ec10:	0005883a 	mov	r2,zero
    ec14:	f800283a 	ret
    ec18:	00802584 	movi	r2,150
    ec1c:	1145c83a 	sub	r2,r2,r5
    ec20:	1884d83a 	srl	r2,r3,r2
    ec24:	003ff306 	br	ebf4 <__alt_data_end+0xfc00ebf4>

0000ec28 <__floatsisf>:
    ec28:	defffd04 	addi	sp,sp,-12
    ec2c:	dfc00215 	stw	ra,8(sp)
    ec30:	dc400115 	stw	r17,4(sp)
    ec34:	dc000015 	stw	r16,0(sp)
    ec38:	20003526 	beq	r4,zero,ed10 <__floatsisf+0xe8>
    ec3c:	2021883a 	mov	r16,r4
    ec40:	2022d7fa 	srli	r17,r4,31
    ec44:	20003616 	blt	r4,zero,ed20 <__floatsisf+0xf8>
    ec48:	8009883a 	mov	r4,r16
    ec4c:	000f35c0 	call	f35c <__clzsi2>
    ec50:	00c02784 	movi	r3,158
    ec54:	1887c83a 	sub	r3,r3,r2
    ec58:	01002584 	movi	r4,150
    ec5c:	20c01416 	blt	r4,r3,ecb0 <__floatsisf+0x88>
    ec60:	20c9c83a 	sub	r4,r4,r3
    ec64:	8120983a 	sll	r16,r16,r4
    ec68:	00802034 	movhi	r2,128
    ec6c:	10bfffc4 	addi	r2,r2,-1
    ec70:	8809883a 	mov	r4,r17
    ec74:	80a0703a 	and	r16,r16,r2
    ec78:	18803fcc 	andi	r2,r3,255
    ec7c:	100695fa 	slli	r3,r2,23
    ec80:	20803fcc 	andi	r2,r4,255
    ec84:	100897fa 	slli	r4,r2,31
    ec88:	00802034 	movhi	r2,128
    ec8c:	10bfffc4 	addi	r2,r2,-1
    ec90:	8084703a 	and	r2,r16,r2
    ec94:	10c4b03a 	or	r2,r2,r3
    ec98:	1104b03a 	or	r2,r2,r4
    ec9c:	dfc00217 	ldw	ra,8(sp)
    eca0:	dc400117 	ldw	r17,4(sp)
    eca4:	dc000017 	ldw	r16,0(sp)
    eca8:	dec00304 	addi	sp,sp,12
    ecac:	f800283a 	ret
    ecb0:	01002644 	movi	r4,153
    ecb4:	20c01c16 	blt	r4,r3,ed28 <__floatsisf+0x100>
    ecb8:	20c9c83a 	sub	r4,r4,r3
    ecbc:	8120983a 	sll	r16,r16,r4
    ecc0:	013f0034 	movhi	r4,64512
    ecc4:	213fffc4 	addi	r4,r4,-1
    ecc8:	814001cc 	andi	r5,r16,7
    eccc:	8108703a 	and	r4,r16,r4
    ecd0:	28000426 	beq	r5,zero,ece4 <__floatsisf+0xbc>
    ecd4:	840003cc 	andi	r16,r16,15
    ecd8:	01400104 	movi	r5,4
    ecdc:	81400126 	beq	r16,r5,ece4 <__floatsisf+0xbc>
    ece0:	2149883a 	add	r4,r4,r5
    ece4:	2141002c 	andhi	r5,r4,1024
    ece8:	28000526 	beq	r5,zero,ed00 <__floatsisf+0xd8>
    ecec:	00c027c4 	movi	r3,159
    ecf0:	1887c83a 	sub	r3,r3,r2
    ecf4:	00bf0034 	movhi	r2,64512
    ecf8:	10bfffc4 	addi	r2,r2,-1
    ecfc:	2088703a 	and	r4,r4,r2
    ed00:	202091ba 	slli	r16,r4,6
    ed04:	8809883a 	mov	r4,r17
    ed08:	8020d27a 	srli	r16,r16,9
    ed0c:	003fda06 	br	ec78 <__alt_data_end+0xfc00ec78>
    ed10:	0009883a 	mov	r4,zero
    ed14:	0007883a 	mov	r3,zero
    ed18:	0021883a 	mov	r16,zero
    ed1c:	003fd606 	br	ec78 <__alt_data_end+0xfc00ec78>
    ed20:	0121c83a 	sub	r16,zero,r4
    ed24:	003fc806 	br	ec48 <__alt_data_end+0xfc00ec48>
    ed28:	01002e44 	movi	r4,185
    ed2c:	20c9c83a 	sub	r4,r4,r3
    ed30:	01400144 	movi	r5,5
    ed34:	8108983a 	sll	r4,r16,r4
    ed38:	288bc83a 	sub	r5,r5,r2
    ed3c:	8160d83a 	srl	r16,r16,r5
    ed40:	2008c03a 	cmpne	r4,r4,zero
    ed44:	8120b03a 	or	r16,r16,r4
    ed48:	003fdd06 	br	ecc0 <__alt_data_end+0xfc00ecc0>

0000ed4c <__floatunsisf>:
    ed4c:	defffe04 	addi	sp,sp,-8
    ed50:	dfc00115 	stw	ra,4(sp)
    ed54:	dc000015 	stw	r16,0(sp)
    ed58:	20002c26 	beq	r4,zero,ee0c <__floatunsisf+0xc0>
    ed5c:	2021883a 	mov	r16,r4
    ed60:	000f35c0 	call	f35c <__clzsi2>
    ed64:	00c02784 	movi	r3,158
    ed68:	1887c83a 	sub	r3,r3,r2
    ed6c:	01002584 	movi	r4,150
    ed70:	20c00f16 	blt	r4,r3,edb0 <__floatunsisf+0x64>
    ed74:	20c9c83a 	sub	r4,r4,r3
    ed78:	8108983a 	sll	r4,r16,r4
    ed7c:	00802034 	movhi	r2,128
    ed80:	10bfffc4 	addi	r2,r2,-1
    ed84:	2088703a 	and	r4,r4,r2
    ed88:	18803fcc 	andi	r2,r3,255
    ed8c:	100695fa 	slli	r3,r2,23
    ed90:	00802034 	movhi	r2,128
    ed94:	10bfffc4 	addi	r2,r2,-1
    ed98:	2084703a 	and	r2,r4,r2
    ed9c:	10c4b03a 	or	r2,r2,r3
    eda0:	dfc00117 	ldw	ra,4(sp)
    eda4:	dc000017 	ldw	r16,0(sp)
    eda8:	dec00204 	addi	sp,sp,8
    edac:	f800283a 	ret
    edb0:	01002644 	movi	r4,153
    edb4:	20c01816 	blt	r4,r3,ee18 <__floatunsisf+0xcc>
    edb8:	20c9c83a 	sub	r4,r4,r3
    edbc:	8108983a 	sll	r4,r16,r4
    edc0:	017f0034 	movhi	r5,64512
    edc4:	297fffc4 	addi	r5,r5,-1
    edc8:	218001cc 	andi	r6,r4,7
    edcc:	214a703a 	and	r5,r4,r5
    edd0:	30000426 	beq	r6,zero,ede4 <__floatunsisf+0x98>
    edd4:	210003cc 	andi	r4,r4,15
    edd8:	01800104 	movi	r6,4
    eddc:	21800126 	beq	r4,r6,ede4 <__floatunsisf+0x98>
    ede0:	298b883a 	add	r5,r5,r6
    ede4:	2901002c 	andhi	r4,r5,1024
    ede8:	20000526 	beq	r4,zero,ee00 <__floatunsisf+0xb4>
    edec:	00c027c4 	movi	r3,159
    edf0:	1887c83a 	sub	r3,r3,r2
    edf4:	00bf0034 	movhi	r2,64512
    edf8:	10bfffc4 	addi	r2,r2,-1
    edfc:	288a703a 	and	r5,r5,r2
    ee00:	280891ba 	slli	r4,r5,6
    ee04:	2008d27a 	srli	r4,r4,9
    ee08:	003fdf06 	br	ed88 <__alt_data_end+0xfc00ed88>
    ee0c:	0007883a 	mov	r3,zero
    ee10:	0009883a 	mov	r4,zero
    ee14:	003fdc06 	br	ed88 <__alt_data_end+0xfc00ed88>
    ee18:	01402e44 	movi	r5,185
    ee1c:	28cbc83a 	sub	r5,r5,r3
    ee20:	01000144 	movi	r4,5
    ee24:	2089c83a 	sub	r4,r4,r2
    ee28:	814a983a 	sll	r5,r16,r5
    ee2c:	8108d83a 	srl	r4,r16,r4
    ee30:	2820c03a 	cmpne	r16,r5,zero
    ee34:	2408b03a 	or	r4,r4,r16
    ee38:	003fe106 	br	edc0 <__alt_data_end+0xfc00edc0>

0000ee3c <_Unwind_ForcedUnwind_Phase2>:
    ee3c:	defff404 	addi	sp,sp,-48
    ee40:	dd800915 	stw	r22,36(sp)
    ee44:	058000f4 	movhi	r22,3
    ee48:	ddc00a15 	stw	r23,40(sp)
    ee4c:	dd400815 	stw	r21,32(sp)
    ee50:	dd000715 	stw	r20,28(sp)
    ee54:	dcc00615 	stw	r19,24(sp)
    ee58:	dc400415 	stw	r17,16(sp)
    ee5c:	dc000315 	stw	r16,12(sp)
    ee60:	dfc00b15 	stw	ra,44(sp)
    ee64:	dc800515 	stw	r18,20(sp)
    ee68:	2021883a 	mov	r16,r4
    ee6c:	2823883a 	mov	r17,r5
    ee70:	24c00317 	ldw	r19,12(r4)
    ee74:	25000417 	ldw	r20,16(r4)
    ee78:	28c00017 	ldw	r3,0(r5)
    ee7c:	b5878904 	addi	r22,r22,7716
    ee80:	054001c4 	movi	r21,7
    ee84:	05c00204 	movi	r23,8
    ee88:	00001606 	br	eee4 <_Unwind_ForcedUnwind_Phase2+0xa8>
    ee8c:	81800017 	ldw	r6,0(r16)
    ee90:	81c00117 	ldw	r7,4(r16)
    ee94:	1c800617 	ldw	r18,24(r3)
    ee98:	dd000215 	stw	r20,8(sp)
    ee9c:	dc400115 	stw	r17,4(sp)
    eea0:	dc000015 	stw	r16,0(sp)
    eea4:	983ee83a 	callr	r19
    eea8:	01400284 	movi	r5,10
    eeac:	01000044 	movi	r4,1
    eeb0:	1000241e 	bne	r2,zero,ef44 <_Unwind_ForcedUnwind_Phase2+0x108>
    eeb4:	90000726 	beq	r18,zero,eed4 <_Unwind_ForcedUnwind_Phase2+0x98>
    eeb8:	81800017 	ldw	r6,0(r16)
    eebc:	81c00117 	ldw	r7,4(r16)
    eec0:	dc400115 	stw	r17,4(sp)
    eec4:	dc000015 	stw	r16,0(sp)
    eec8:	903ee83a 	callr	r18
    eecc:	15401f26 	beq	r2,r21,ef4c <_Unwind_ForcedUnwind_Phase2+0x110>
    eed0:	15c01c1e 	bne	r2,r23,ef44 <_Unwind_ForcedUnwind_Phase2+0x108>
    eed4:	88800017 	ldw	r2,0(r17)
    eed8:	10c00017 	ldw	r3,0(r2)
    eedc:	b0c00015 	stw	r3,0(r22)
    eee0:	88c00015 	stw	r3,0(r17)
    eee4:	01400284 	movi	r5,10
    eee8:	01000044 	movi	r4,1
    eeec:	183fe71e 	bne	r3,zero,ee8c <__alt_data_end+0xfc00ee8c>
    eef0:	81800017 	ldw	r6,0(r16)
    eef4:	81c00117 	ldw	r7,4(r16)
    eef8:	01400684 	movi	r5,26
    eefc:	dd000215 	stw	r20,8(sp)
    ef00:	dc400115 	stw	r17,4(sp)
    ef04:	dc000015 	stw	r16,0(sp)
    ef08:	01000044 	movi	r4,1
    ef0c:	983ee83a 	callr	r19
    ef10:	10000c1e 	bne	r2,zero,ef44 <_Unwind_ForcedUnwind_Phase2+0x108>
    ef14:	00800144 	movi	r2,5
    ef18:	dfc00b17 	ldw	ra,44(sp)
    ef1c:	ddc00a17 	ldw	r23,40(sp)
    ef20:	dd800917 	ldw	r22,36(sp)
    ef24:	dd400817 	ldw	r21,32(sp)
    ef28:	dd000717 	ldw	r20,28(sp)
    ef2c:	dcc00617 	ldw	r19,24(sp)
    ef30:	dc800517 	ldw	r18,20(sp)
    ef34:	dc400417 	ldw	r17,16(sp)
    ef38:	dc000317 	ldw	r16,12(sp)
    ef3c:	dec00c04 	addi	sp,sp,48
    ef40:	f800283a 	ret
    ef44:	00800084 	movi	r2,2
    ef48:	003ff306 	br	ef18 <__alt_data_end+0xfc00ef18>
    ef4c:	a805883a 	mov	r2,r21
    ef50:	003ff106 	br	ef18 <__alt_data_end+0xfc00ef18>

0000ef54 <_Unwind_RaiseException_Phase2>:
    ef54:	28c00017 	ldw	r3,0(r5)
    ef58:	defff804 	addi	sp,sp,-32
    ef5c:	dcc00515 	stw	r19,20(sp)
    ef60:	dc800415 	stw	r18,16(sp)
    ef64:	dc400315 	stw	r17,12(sp)
    ef68:	dc000215 	stw	r16,8(sp)
    ef6c:	dfc00715 	stw	ra,28(sp)
    ef70:	dd000615 	stw	r20,24(sp)
    ef74:	2823883a 	mov	r17,r5
    ef78:	2021883a 	mov	r16,r4
    ef7c:	048001c4 	movi	r18,7
    ef80:	04c00204 	movi	r19,8
    ef84:	18001326 	beq	r3,zero,efd4 <_Unwind_RaiseException_Phase2+0x80>
    ef88:	81000417 	ldw	r4,16(r16)
    ef8c:	1a000617 	ldw	r8,24(r3)
    ef90:	19001926 	beq	r3,r4,eff8 <_Unwind_RaiseException_Phase2+0xa4>
    ef94:	40000c26 	beq	r8,zero,efc8 <_Unwind_RaiseException_Phase2+0x74>
    ef98:	01400084 	movi	r5,2
    ef9c:	0029883a 	mov	r20,zero
    efa0:	81800017 	ldw	r6,0(r16)
    efa4:	81c00117 	ldw	r7,4(r16)
    efa8:	01000044 	movi	r4,1
    efac:	dc400115 	stw	r17,4(sp)
    efb0:	dc000015 	stw	r16,0(sp)
    efb4:	403ee83a 	callr	r8
    efb8:	14801326 	beq	r2,r18,f008 <_Unwind_RaiseException_Phase2+0xb4>
    efbc:	14c0051e 	bne	r2,r19,efd4 <_Unwind_RaiseException_Phase2+0x80>
    efc0:	a000131e 	bne	r20,zero,f010 <_Unwind_RaiseException_Phase2+0xbc>
    efc4:	88c00017 	ldw	r3,0(r17)
    efc8:	18c00017 	ldw	r3,0(r3)
    efcc:	88c00015 	stw	r3,0(r17)
    efd0:	183fed1e 	bne	r3,zero,ef88 <__alt_data_end+0xfc00ef88>
    efd4:	00800084 	movi	r2,2
    efd8:	dfc00717 	ldw	ra,28(sp)
    efdc:	dd000617 	ldw	r20,24(sp)
    efe0:	dcc00517 	ldw	r19,20(sp)
    efe4:	dc800417 	ldw	r18,16(sp)
    efe8:	dc400317 	ldw	r17,12(sp)
    efec:	dc000217 	ldw	r16,8(sp)
    eff0:	dec00804 	addi	sp,sp,32
    eff4:	f800283a 	ret
    eff8:	40000526 	beq	r8,zero,f010 <_Unwind_RaiseException_Phase2+0xbc>
    effc:	01400184 	movi	r5,6
    f000:	05000104 	movi	r20,4
    f004:	003fe606 	br	efa0 <__alt_data_end+0xfc00efa0>
    f008:	9005883a 	mov	r2,r18
    f00c:	003ff206 	br	efd8 <__alt_data_end+0xfc00efd8>
    f010:	000f3c00 	call	f3c0 <abort>

0000f014 <uw_install_context.isra.1>:
    f014:	20c00017 	ldw	r3,0(r4)
    f018:	deffff04 	addi	sp,sp,-4
    f01c:	014000f4 	movhi	r5,3
    f020:	19000917 	ldw	r4,36(r3)
    f024:	df000015 	stw	fp,0(sp)
    f028:	18800804 	addi	r2,r3,32
    f02c:	d839883a 	mov	fp,sp
    f030:	29478904 	addi	r5,r5,7716
    f034:	28c00015 	stw	r3,0(r5)
    f038:	17000017 	ldw	fp,0(r2)
    f03c:	1ec00a17 	ldw	sp,40(r3)
    f040:	2000683a 	jmp	r4

0000f044 <_Unwind_SjLj_Register>:
    f044:	008000f4 	movhi	r2,3
    f048:	10878904 	addi	r2,r2,7716
    f04c:	10c00017 	ldw	r3,0(r2)
    f050:	11000015 	stw	r4,0(r2)
    f054:	20c00015 	stw	r3,0(r4)
    f058:	f800283a 	ret

0000f05c <_Unwind_SjLj_Unregister>:
    f05c:	20c00017 	ldw	r3,0(r4)
    f060:	008000f4 	movhi	r2,3
    f064:	10878904 	addi	r2,r2,7716
    f068:	10c00015 	stw	r3,0(r2)
    f06c:	f800283a 	ret

0000f070 <_Unwind_GetGR>:
    f070:	20800017 	ldw	r2,0(r4)
    f074:	29400084 	addi	r5,r5,2
    f078:	294b883a 	add	r5,r5,r5
    f07c:	294b883a 	add	r5,r5,r5
    f080:	114b883a 	add	r5,r2,r5
    f084:	28800017 	ldw	r2,0(r5)
    f088:	f800283a 	ret

0000f08c <_Unwind_GetCFA>:
    f08c:	20800017 	ldw	r2,0(r4)
    f090:	10000226 	beq	r2,zero,f09c <_Unwind_GetCFA+0x10>
    f094:	10800a17 	ldw	r2,40(r2)
    f098:	f800283a 	ret
    f09c:	0005883a 	mov	r2,zero
    f0a0:	f800283a 	ret

0000f0a4 <_Unwind_SetGR>:
    f0a4:	20800017 	ldw	r2,0(r4)
    f0a8:	29400084 	addi	r5,r5,2
    f0ac:	294b883a 	add	r5,r5,r5
    f0b0:	294b883a 	add	r5,r5,r5
    f0b4:	114b883a 	add	r5,r2,r5
    f0b8:	29800015 	stw	r6,0(r5)
    f0bc:	f800283a 	ret

0000f0c0 <_Unwind_GetIP>:
    f0c0:	20800017 	ldw	r2,0(r4)
    f0c4:	10800117 	ldw	r2,4(r2)
    f0c8:	10800044 	addi	r2,r2,1
    f0cc:	f800283a 	ret

0000f0d0 <_Unwind_GetIPInfo>:
    f0d0:	20800017 	ldw	r2,0(r4)
    f0d4:	28000015 	stw	zero,0(r5)
    f0d8:	10000326 	beq	r2,zero,f0e8 <_Unwind_GetIPInfo+0x18>
    f0dc:	10800117 	ldw	r2,4(r2)
    f0e0:	10800044 	addi	r2,r2,1
    f0e4:	f800283a 	ret
    f0e8:	0005883a 	mov	r2,zero
    f0ec:	f800283a 	ret

0000f0f0 <_Unwind_SetIP>:
    f0f0:	20800017 	ldw	r2,0(r4)
    f0f4:	297fffc4 	addi	r5,r5,-1
    f0f8:	11400115 	stw	r5,4(r2)
    f0fc:	f800283a 	ret

0000f100 <_Unwind_GetLanguageSpecificData>:
    f100:	20800017 	ldw	r2,0(r4)
    f104:	10800717 	ldw	r2,28(r2)
    f108:	f800283a 	ret

0000f10c <_Unwind_GetRegionStart>:
    f10c:	0005883a 	mov	r2,zero
    f110:	f800283a 	ret

0000f114 <_Unwind_FindEnclosingFunction>:
    f114:	0005883a 	mov	r2,zero
    f118:	f800283a 	ret

0000f11c <_Unwind_GetDataRelBase>:
    f11c:	0005883a 	mov	r2,zero
    f120:	f800283a 	ret

0000f124 <_Unwind_GetTextRelBase>:
    f124:	0005883a 	mov	r2,zero
    f128:	f800283a 	ret

0000f12c <_Unwind_SjLj_RaiseException>:
    f12c:	008000f4 	movhi	r2,3
    f130:	defff804 	addi	sp,sp,-32
    f134:	10878904 	addi	r2,r2,7716
    f138:	dc800515 	stw	r18,20(sp)
    f13c:	14800017 	ldw	r18,0(r2)
    f140:	dfc00715 	stw	ra,28(sp)
    f144:	dcc00615 	stw	r19,24(sp)
    f148:	dc400415 	stw	r17,16(sp)
    f14c:	dc000315 	stw	r16,12(sp)
    f150:	dc800215 	stw	r18,8(sp)
    f154:	90001426 	beq	r18,zero,f1a8 <_Unwind_SjLj_RaiseException+0x7c>
    f158:	2021883a 	mov	r16,r4
    f15c:	9005883a 	mov	r2,r18
    f160:	04400184 	movi	r17,6
    f164:	04c00204 	movi	r19,8
    f168:	10800617 	ldw	r2,24(r2)
    f16c:	10000a26 	beq	r2,zero,f198 <_Unwind_SjLj_RaiseException+0x6c>
    f170:	81800017 	ldw	r6,0(r16)
    f174:	81c00117 	ldw	r7,4(r16)
    f178:	01400044 	movi	r5,1
    f17c:	d8c00204 	addi	r3,sp,8
    f180:	d8c00115 	stw	r3,4(sp)
    f184:	dc000015 	stw	r16,0(sp)
    f188:	2809883a 	mov	r4,r5
    f18c:	103ee83a 	callr	r2
    f190:	14400d26 	beq	r2,r17,f1c8 <_Unwind_SjLj_RaiseException+0x9c>
    f194:	14c0171e 	bne	r2,r19,f1f4 <_Unwind_SjLj_RaiseException+0xc8>
    f198:	d8800217 	ldw	r2,8(sp)
    f19c:	10800017 	ldw	r2,0(r2)
    f1a0:	d8800215 	stw	r2,8(sp)
    f1a4:	103ff01e 	bne	r2,zero,f168 <__alt_data_end+0xfc00f168>
    f1a8:	00800144 	movi	r2,5
    f1ac:	dfc00717 	ldw	ra,28(sp)
    f1b0:	dcc00617 	ldw	r19,24(sp)
    f1b4:	dc800517 	ldw	r18,20(sp)
    f1b8:	dc400417 	ldw	r17,16(sp)
    f1bc:	dc000317 	ldw	r16,12(sp)
    f1c0:	dec00804 	addi	sp,sp,32
    f1c4:	f800283a 	ret
    f1c8:	d8800217 	ldw	r2,8(sp)
    f1cc:	80000315 	stw	zero,12(r16)
    f1d0:	d9400204 	addi	r5,sp,8
    f1d4:	80800415 	stw	r2,16(r16)
    f1d8:	8009883a 	mov	r4,r16
    f1dc:	dc800215 	stw	r18,8(sp)
    f1e0:	000ef540 	call	ef54 <_Unwind_RaiseException_Phase2>
    f1e4:	00c001c4 	movi	r3,7
    f1e8:	10fff01e 	bne	r2,r3,f1ac <__alt_data_end+0xfc00f1ac>
    f1ec:	d9000204 	addi	r4,sp,8
    f1f0:	000f0140 	call	f014 <uw_install_context.isra.1>
    f1f4:	008000c4 	movi	r2,3
    f1f8:	003fec06 	br	f1ac <__alt_data_end+0xfc00f1ac>

0000f1fc <_Unwind_SjLj_ForcedUnwind>:
    f1fc:	00c000f4 	movhi	r3,3
    f200:	18c78904 	addi	r3,r3,7716
    f204:	defffe04 	addi	sp,sp,-8
    f208:	18c00017 	ldw	r3,0(r3)
    f20c:	dfc00115 	stw	ra,4(sp)
    f210:	21400315 	stw	r5,12(r4)
    f214:	21800415 	stw	r6,16(r4)
    f218:	d80b883a 	mov	r5,sp
    f21c:	d8c00015 	stw	r3,0(sp)
    f220:	000ee3c0 	call	ee3c <_Unwind_ForcedUnwind_Phase2>
    f224:	00c001c4 	movi	r3,7
    f228:	10c00326 	beq	r2,r3,f238 <_Unwind_SjLj_ForcedUnwind+0x3c>
    f22c:	dfc00117 	ldw	ra,4(sp)
    f230:	dec00204 	addi	sp,sp,8
    f234:	f800283a 	ret
    f238:	d809883a 	mov	r4,sp
    f23c:	000f0140 	call	f014 <uw_install_context.isra.1>

0000f240 <_Unwind_SjLj_Resume>:
    f240:	00c000f4 	movhi	r3,3
    f244:	18c78904 	addi	r3,r3,7716
    f248:	18c00017 	ldw	r3,0(r3)
    f24c:	20800317 	ldw	r2,12(r4)
    f250:	defffe04 	addi	sp,sp,-8
    f254:	dfc00115 	stw	ra,4(sp)
    f258:	d8c00015 	stw	r3,0(sp)
    f25c:	d80b883a 	mov	r5,sp
    f260:	1000041e 	bne	r2,zero,f274 <_Unwind_SjLj_Resume+0x34>
    f264:	000ef540 	call	ef54 <_Unwind_RaiseException_Phase2>
    f268:	00c001c4 	movi	r3,7
    f26c:	10c00326 	beq	r2,r3,f27c <_Unwind_SjLj_Resume+0x3c>
    f270:	000f3c00 	call	f3c0 <abort>
    f274:	000ee3c0 	call	ee3c <_Unwind_ForcedUnwind_Phase2>
    f278:	003ffb06 	br	f268 <__alt_data_end+0xfc00f268>
    f27c:	d809883a 	mov	r4,sp
    f280:	000f0140 	call	f014 <uw_install_context.isra.1>

0000f284 <_Unwind_SjLj_Resume_or_Rethrow>:
    f284:	20800317 	ldw	r2,12(r4)
    f288:	defffe04 	addi	sp,sp,-8
    f28c:	dfc00115 	stw	ra,4(sp)
    f290:	1000041e 	bne	r2,zero,f2a4 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    f294:	000f12c0 	call	f12c <_Unwind_SjLj_RaiseException>
    f298:	dfc00117 	ldw	ra,4(sp)
    f29c:	dec00204 	addi	sp,sp,8
    f2a0:	f800283a 	ret
    f2a4:	008000f4 	movhi	r2,3
    f2a8:	10878904 	addi	r2,r2,7716
    f2ac:	10800017 	ldw	r2,0(r2)
    f2b0:	d80b883a 	mov	r5,sp
    f2b4:	d8800015 	stw	r2,0(sp)
    f2b8:	000ee3c0 	call	ee3c <_Unwind_ForcedUnwind_Phase2>
    f2bc:	00c001c4 	movi	r3,7
    f2c0:	10c00126 	beq	r2,r3,f2c8 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    f2c4:	000f3c00 	call	f3c0 <abort>
    f2c8:	d809883a 	mov	r4,sp
    f2cc:	000f0140 	call	f014 <uw_install_context.isra.1>

0000f2d0 <_Unwind_DeleteException>:
    f2d0:	20800217 	ldw	r2,8(r4)
    f2d4:	10000326 	beq	r2,zero,f2e4 <_Unwind_DeleteException+0x14>
    f2d8:	200b883a 	mov	r5,r4
    f2dc:	01000044 	movi	r4,1
    f2e0:	1000683a 	jmp	r2
    f2e4:	f800283a 	ret

0000f2e8 <_Unwind_Backtrace>:
    f2e8:	008000f4 	movhi	r2,3
    f2ec:	10878904 	addi	r2,r2,7716
    f2f0:	10800017 	ldw	r2,0(r2)
    f2f4:	defffc04 	addi	sp,sp,-16
    f2f8:	dc400215 	stw	r17,8(sp)
    f2fc:	dc000115 	stw	r16,4(sp)
    f300:	dfc00315 	stw	ra,12(sp)
    f304:	2023883a 	mov	r17,r4
    f308:	2821883a 	mov	r16,r5
    f30c:	d8800015 	stw	r2,0(sp)
    f310:	00000506 	br	f328 <_Unwind_Backtrace+0x40>
    f314:	883ee83a 	callr	r17
    f318:	10000e1e 	bne	r2,zero,f354 <_Unwind_Backtrace+0x6c>
    f31c:	d8800017 	ldw	r2,0(sp)
    f320:	10800017 	ldw	r2,0(r2)
    f324:	d8800015 	stw	r2,0(sp)
    f328:	800b883a 	mov	r5,r16
    f32c:	d809883a 	mov	r4,sp
    f330:	103ff81e 	bne	r2,zero,f314 <__alt_data_end+0xfc00f314>
    f334:	883ee83a 	callr	r17
    f338:	1000061e 	bne	r2,zero,f354 <_Unwind_Backtrace+0x6c>
    f33c:	00800144 	movi	r2,5
    f340:	dfc00317 	ldw	ra,12(sp)
    f344:	dc400217 	ldw	r17,8(sp)
    f348:	dc000117 	ldw	r16,4(sp)
    f34c:	dec00404 	addi	sp,sp,16
    f350:	f800283a 	ret
    f354:	008000c4 	movi	r2,3
    f358:	003ff906 	br	f340 <__alt_data_end+0xfc00f340>

0000f35c <__clzsi2>:
    f35c:	00bfffd4 	movui	r2,65535
    f360:	11000536 	bltu	r2,r4,f378 <__clzsi2+0x1c>
    f364:	00803fc4 	movi	r2,255
    f368:	11000f36 	bltu	r2,r4,f3a8 <__clzsi2+0x4c>
    f36c:	00800804 	movi	r2,32
    f370:	0007883a 	mov	r3,zero
    f374:	00000506 	br	f38c <__clzsi2+0x30>
    f378:	00804034 	movhi	r2,256
    f37c:	10bfffc4 	addi	r2,r2,-1
    f380:	11000c2e 	bgeu	r2,r4,f3b4 <__clzsi2+0x58>
    f384:	00800204 	movi	r2,8
    f388:	00c00604 	movi	r3,24
    f38c:	20c8d83a 	srl	r4,r4,r3
    f390:	00c000f4 	movhi	r3,3
    f394:	18edab04 	addi	r3,r3,-18772
    f398:	1909883a 	add	r4,r3,r4
    f39c:	20c00003 	ldbu	r3,0(r4)
    f3a0:	10c5c83a 	sub	r2,r2,r3
    f3a4:	f800283a 	ret
    f3a8:	00800604 	movi	r2,24
    f3ac:	00c00204 	movi	r3,8
    f3b0:	003ff606 	br	f38c <__alt_data_end+0xfc00f38c>
    f3b4:	00800404 	movi	r2,16
    f3b8:	1007883a 	mov	r3,r2
    f3bc:	003ff306 	br	f38c <__alt_data_end+0xfc00f38c>

0000f3c0 <abort>:
    f3c0:	deffff04 	addi	sp,sp,-4
    f3c4:	01000184 	movi	r4,6
    f3c8:	dfc00015 	stw	ra,0(sp)
    f3cc:	00102d00 	call	102d0 <raise>
    f3d0:	01000044 	movi	r4,1
    f3d4:	00200100 	call	20010 <_exit>

0000f3d8 <clock>:
    f3d8:	008000f4 	movhi	r2,3
    f3dc:	10baf204 	addi	r2,r2,-5176
    f3e0:	11000017 	ldw	r4,0(r2)
    f3e4:	defffb04 	addi	sp,sp,-20
    f3e8:	d80b883a 	mov	r5,sp
    f3ec:	dfc00415 	stw	ra,16(sp)
    f3f0:	00128740 	call	12874 <_times_r>
    f3f4:	00ffffc4 	movi	r3,-1
    f3f8:	10c00726 	beq	r2,r3,f418 <clock+0x40>
    f3fc:	d8c00017 	ldw	r3,0(sp)
    f400:	d8800117 	ldw	r2,4(sp)
    f404:	1885883a 	add	r2,r3,r2
    f408:	d8c00217 	ldw	r3,8(sp)
    f40c:	10c7883a 	add	r3,r2,r3
    f410:	d8800317 	ldw	r2,12(sp)
    f414:	1885883a 	add	r2,r3,r2
    f418:	dfc00417 	ldw	ra,16(sp)
    f41c:	dec00504 	addi	sp,sp,20
    f420:	f800283a 	ret

0000f424 <malloc>:
    f424:	008000f4 	movhi	r2,3
    f428:	10baf204 	addi	r2,r2,-5176
    f42c:	200b883a 	mov	r5,r4
    f430:	11000017 	ldw	r4,0(r2)
    f434:	000f44c1 	jmpi	f44c <_malloc_r>

0000f438 <free>:
    f438:	008000f4 	movhi	r2,3
    f43c:	10baf204 	addi	r2,r2,-5176
    f440:	200b883a 	mov	r5,r4
    f444:	11000017 	ldw	r4,0(r2)
    f448:	0016db01 	jmpi	16db0 <_free_r>

0000f44c <_malloc_r>:
    f44c:	defff504 	addi	sp,sp,-44
    f450:	dc800315 	stw	r18,12(sp)
    f454:	dfc00a15 	stw	ra,40(sp)
    f458:	df000915 	stw	fp,36(sp)
    f45c:	ddc00815 	stw	r23,32(sp)
    f460:	dd800715 	stw	r22,28(sp)
    f464:	dd400615 	stw	r21,24(sp)
    f468:	dd000515 	stw	r20,20(sp)
    f46c:	dcc00415 	stw	r19,16(sp)
    f470:	dc400215 	stw	r17,8(sp)
    f474:	dc000115 	stw	r16,4(sp)
    f478:	288002c4 	addi	r2,r5,11
    f47c:	00c00584 	movi	r3,22
    f480:	2025883a 	mov	r18,r4
    f484:	18807f2e 	bgeu	r3,r2,f684 <_malloc_r+0x238>
    f488:	047ffe04 	movi	r17,-8
    f48c:	1462703a 	and	r17,r2,r17
    f490:	8800a316 	blt	r17,zero,f720 <_malloc_r+0x2d4>
    f494:	8940a236 	bltu	r17,r5,f720 <_malloc_r+0x2d4>
    f498:	002062c0 	call	2062c <__malloc_lock>
    f49c:	00807dc4 	movi	r2,503
    f4a0:	1441e92e 	bgeu	r2,r17,fc48 <_malloc_r+0x7fc>
    f4a4:	8804d27a 	srli	r2,r17,9
    f4a8:	1000a126 	beq	r2,zero,f730 <_malloc_r+0x2e4>
    f4ac:	00c00104 	movi	r3,4
    f4b0:	18811e36 	bltu	r3,r2,f92c <_malloc_r+0x4e0>
    f4b4:	8804d1ba 	srli	r2,r17,6
    f4b8:	12000e44 	addi	r8,r2,57
    f4bc:	11c00e04 	addi	r7,r2,56
    f4c0:	4209883a 	add	r4,r8,r8
    f4c4:	04c000f4 	movhi	r19,3
    f4c8:	2109883a 	add	r4,r4,r4
    f4cc:	9cef8f04 	addi	r19,r19,-16836
    f4d0:	2109883a 	add	r4,r4,r4
    f4d4:	9909883a 	add	r4,r19,r4
    f4d8:	24000117 	ldw	r16,4(r4)
    f4dc:	213ffe04 	addi	r4,r4,-8
    f4e0:	24009726 	beq	r4,r16,f740 <_malloc_r+0x2f4>
    f4e4:	80800117 	ldw	r2,4(r16)
    f4e8:	01bfff04 	movi	r6,-4
    f4ec:	014003c4 	movi	r5,15
    f4f0:	1184703a 	and	r2,r2,r6
    f4f4:	1447c83a 	sub	r3,r2,r17
    f4f8:	28c00716 	blt	r5,r3,f518 <_malloc_r+0xcc>
    f4fc:	1800920e 	bge	r3,zero,f748 <_malloc_r+0x2fc>
    f500:	84000317 	ldw	r16,12(r16)
    f504:	24008e26 	beq	r4,r16,f740 <_malloc_r+0x2f4>
    f508:	80800117 	ldw	r2,4(r16)
    f50c:	1184703a 	and	r2,r2,r6
    f510:	1447c83a 	sub	r3,r2,r17
    f514:	28fff90e 	bge	r5,r3,f4fc <__alt_data_end+0xfc00f4fc>
    f518:	3809883a 	mov	r4,r7
    f51c:	018000f4 	movhi	r6,3
    f520:	9c000417 	ldw	r16,16(r19)
    f524:	31af8f04 	addi	r6,r6,-16836
    f528:	32000204 	addi	r8,r6,8
    f52c:	82013426 	beq	r16,r8,fa00 <_malloc_r+0x5b4>
    f530:	80c00117 	ldw	r3,4(r16)
    f534:	00bfff04 	movi	r2,-4
    f538:	188e703a 	and	r7,r3,r2
    f53c:	3c45c83a 	sub	r2,r7,r17
    f540:	00c003c4 	movi	r3,15
    f544:	18811f16 	blt	r3,r2,f9c4 <_malloc_r+0x578>
    f548:	32000515 	stw	r8,20(r6)
    f54c:	32000415 	stw	r8,16(r6)
    f550:	10007f0e 	bge	r2,zero,f750 <_malloc_r+0x304>
    f554:	00807fc4 	movi	r2,511
    f558:	11c0fd36 	bltu	r2,r7,f950 <_malloc_r+0x504>
    f55c:	3806d0fa 	srli	r3,r7,3
    f560:	01c00044 	movi	r7,1
    f564:	30800117 	ldw	r2,4(r6)
    f568:	19400044 	addi	r5,r3,1
    f56c:	294b883a 	add	r5,r5,r5
    f570:	1807d0ba 	srai	r3,r3,2
    f574:	294b883a 	add	r5,r5,r5
    f578:	294b883a 	add	r5,r5,r5
    f57c:	298b883a 	add	r5,r5,r6
    f580:	38c6983a 	sll	r3,r7,r3
    f584:	29c00017 	ldw	r7,0(r5)
    f588:	2a7ffe04 	addi	r9,r5,-8
    f58c:	1886b03a 	or	r3,r3,r2
    f590:	82400315 	stw	r9,12(r16)
    f594:	81c00215 	stw	r7,8(r16)
    f598:	30c00115 	stw	r3,4(r6)
    f59c:	2c000015 	stw	r16,0(r5)
    f5a0:	3c000315 	stw	r16,12(r7)
    f5a4:	2005d0ba 	srai	r2,r4,2
    f5a8:	01400044 	movi	r5,1
    f5ac:	288a983a 	sll	r5,r5,r2
    f5b0:	19406f36 	bltu	r3,r5,f770 <_malloc_r+0x324>
    f5b4:	28c4703a 	and	r2,r5,r3
    f5b8:	10000a1e 	bne	r2,zero,f5e4 <_malloc_r+0x198>
    f5bc:	00bfff04 	movi	r2,-4
    f5c0:	294b883a 	add	r5,r5,r5
    f5c4:	2088703a 	and	r4,r4,r2
    f5c8:	28c4703a 	and	r2,r5,r3
    f5cc:	21000104 	addi	r4,r4,4
    f5d0:	1000041e 	bne	r2,zero,f5e4 <_malloc_r+0x198>
    f5d4:	294b883a 	add	r5,r5,r5
    f5d8:	28c4703a 	and	r2,r5,r3
    f5dc:	21000104 	addi	r4,r4,4
    f5e0:	103ffc26 	beq	r2,zero,f5d4 <__alt_data_end+0xfc00f5d4>
    f5e4:	02bfff04 	movi	r10,-4
    f5e8:	024003c4 	movi	r9,15
    f5ec:	21800044 	addi	r6,r4,1
    f5f0:	318d883a 	add	r6,r6,r6
    f5f4:	318d883a 	add	r6,r6,r6
    f5f8:	318d883a 	add	r6,r6,r6
    f5fc:	998d883a 	add	r6,r19,r6
    f600:	333ffe04 	addi	r12,r6,-8
    f604:	2017883a 	mov	r11,r4
    f608:	31800104 	addi	r6,r6,4
    f60c:	34000017 	ldw	r16,0(r6)
    f610:	31fffd04 	addi	r7,r6,-12
    f614:	81c0041e 	bne	r16,r7,f628 <_malloc_r+0x1dc>
    f618:	0000fb06 	br	fa08 <_malloc_r+0x5bc>
    f61c:	1801030e 	bge	r3,zero,fa2c <_malloc_r+0x5e0>
    f620:	84000317 	ldw	r16,12(r16)
    f624:	81c0f826 	beq	r16,r7,fa08 <_malloc_r+0x5bc>
    f628:	80800117 	ldw	r2,4(r16)
    f62c:	1284703a 	and	r2,r2,r10
    f630:	1447c83a 	sub	r3,r2,r17
    f634:	48fff90e 	bge	r9,r3,f61c <__alt_data_end+0xfc00f61c>
    f638:	80800317 	ldw	r2,12(r16)
    f63c:	81000217 	ldw	r4,8(r16)
    f640:	89400054 	ori	r5,r17,1
    f644:	81400115 	stw	r5,4(r16)
    f648:	20800315 	stw	r2,12(r4)
    f64c:	11000215 	stw	r4,8(r2)
    f650:	8463883a 	add	r17,r16,r17
    f654:	9c400515 	stw	r17,20(r19)
    f658:	9c400415 	stw	r17,16(r19)
    f65c:	18800054 	ori	r2,r3,1
    f660:	88800115 	stw	r2,4(r17)
    f664:	8a000315 	stw	r8,12(r17)
    f668:	8a000215 	stw	r8,8(r17)
    f66c:	88e3883a 	add	r17,r17,r3
    f670:	88c00015 	stw	r3,0(r17)
    f674:	9009883a 	mov	r4,r18
    f678:	00206500 	call	20650 <__malloc_unlock>
    f67c:	80800204 	addi	r2,r16,8
    f680:	00001b06 	br	f6f0 <_malloc_r+0x2a4>
    f684:	04400404 	movi	r17,16
    f688:	89402536 	bltu	r17,r5,f720 <_malloc_r+0x2d4>
    f68c:	002062c0 	call	2062c <__malloc_lock>
    f690:	00800184 	movi	r2,6
    f694:	01000084 	movi	r4,2
    f698:	04c000f4 	movhi	r19,3
    f69c:	1085883a 	add	r2,r2,r2
    f6a0:	9cef8f04 	addi	r19,r19,-16836
    f6a4:	1085883a 	add	r2,r2,r2
    f6a8:	9885883a 	add	r2,r19,r2
    f6ac:	14000117 	ldw	r16,4(r2)
    f6b0:	10fffe04 	addi	r3,r2,-8
    f6b4:	80c0d926 	beq	r16,r3,fa1c <_malloc_r+0x5d0>
    f6b8:	80c00117 	ldw	r3,4(r16)
    f6bc:	81000317 	ldw	r4,12(r16)
    f6c0:	00bfff04 	movi	r2,-4
    f6c4:	1884703a 	and	r2,r3,r2
    f6c8:	81400217 	ldw	r5,8(r16)
    f6cc:	8085883a 	add	r2,r16,r2
    f6d0:	10c00117 	ldw	r3,4(r2)
    f6d4:	29000315 	stw	r4,12(r5)
    f6d8:	21400215 	stw	r5,8(r4)
    f6dc:	18c00054 	ori	r3,r3,1
    f6e0:	10c00115 	stw	r3,4(r2)
    f6e4:	9009883a 	mov	r4,r18
    f6e8:	00206500 	call	20650 <__malloc_unlock>
    f6ec:	80800204 	addi	r2,r16,8
    f6f0:	dfc00a17 	ldw	ra,40(sp)
    f6f4:	df000917 	ldw	fp,36(sp)
    f6f8:	ddc00817 	ldw	r23,32(sp)
    f6fc:	dd800717 	ldw	r22,28(sp)
    f700:	dd400617 	ldw	r21,24(sp)
    f704:	dd000517 	ldw	r20,20(sp)
    f708:	dcc00417 	ldw	r19,16(sp)
    f70c:	dc800317 	ldw	r18,12(sp)
    f710:	dc400217 	ldw	r17,8(sp)
    f714:	dc000117 	ldw	r16,4(sp)
    f718:	dec00b04 	addi	sp,sp,44
    f71c:	f800283a 	ret
    f720:	00800304 	movi	r2,12
    f724:	90800015 	stw	r2,0(r18)
    f728:	0005883a 	mov	r2,zero
    f72c:	003ff006 	br	f6f0 <__alt_data_end+0xfc00f6f0>
    f730:	01002004 	movi	r4,128
    f734:	02001004 	movi	r8,64
    f738:	01c00fc4 	movi	r7,63
    f73c:	003f6106 	br	f4c4 <__alt_data_end+0xfc00f4c4>
    f740:	4009883a 	mov	r4,r8
    f744:	003f7506 	br	f51c <__alt_data_end+0xfc00f51c>
    f748:	81000317 	ldw	r4,12(r16)
    f74c:	003fde06 	br	f6c8 <__alt_data_end+0xfc00f6c8>
    f750:	81c5883a 	add	r2,r16,r7
    f754:	11400117 	ldw	r5,4(r2)
    f758:	9009883a 	mov	r4,r18
    f75c:	29400054 	ori	r5,r5,1
    f760:	11400115 	stw	r5,4(r2)
    f764:	00206500 	call	20650 <__malloc_unlock>
    f768:	80800204 	addi	r2,r16,8
    f76c:	003fe006 	br	f6f0 <__alt_data_end+0xfc00f6f0>
    f770:	9c000217 	ldw	r16,8(r19)
    f774:	00bfff04 	movi	r2,-4
    f778:	85800117 	ldw	r22,4(r16)
    f77c:	b0ac703a 	and	r22,r22,r2
    f780:	b4400336 	bltu	r22,r17,f790 <_malloc_r+0x344>
    f784:	b445c83a 	sub	r2,r22,r17
    f788:	00c003c4 	movi	r3,15
    f78c:	18805d16 	blt	r3,r2,f904 <_malloc_r+0x4b8>
    f790:	05c000f4 	movhi	r23,3
    f794:	008000f4 	movhi	r2,3
    f798:	10878c04 	addi	r2,r2,7728
    f79c:	bdfaf304 	addi	r23,r23,-5172
    f7a0:	15400017 	ldw	r21,0(r2)
    f7a4:	b8c00017 	ldw	r3,0(r23)
    f7a8:	00bfffc4 	movi	r2,-1
    f7ac:	858d883a 	add	r6,r16,r22
    f7b0:	8d6b883a 	add	r21,r17,r21
    f7b4:	1880ea26 	beq	r3,r2,fb60 <_malloc_r+0x714>
    f7b8:	ad4403c4 	addi	r21,r21,4111
    f7bc:	00bc0004 	movi	r2,-4096
    f7c0:	a8aa703a 	and	r21,r21,r2
    f7c4:	a80b883a 	mov	r5,r21
    f7c8:	9009883a 	mov	r4,r18
    f7cc:	d9800015 	stw	r6,0(sp)
    f7d0:	00100280 	call	10028 <_sbrk_r>
    f7d4:	1029883a 	mov	r20,r2
    f7d8:	00bfffc4 	movi	r2,-1
    f7dc:	d9800017 	ldw	r6,0(sp)
    f7e0:	a080e826 	beq	r20,r2,fb84 <_malloc_r+0x738>
    f7e4:	a180a636 	bltu	r20,r6,fa80 <_malloc_r+0x634>
    f7e8:	070000f4 	movhi	fp,3
    f7ec:	e707e404 	addi	fp,fp,8080
    f7f0:	e0800017 	ldw	r2,0(fp)
    f7f4:	a887883a 	add	r3,r21,r2
    f7f8:	e0c00015 	stw	r3,0(fp)
    f7fc:	3500e626 	beq	r6,r20,fb98 <_malloc_r+0x74c>
    f800:	b9000017 	ldw	r4,0(r23)
    f804:	00bfffc4 	movi	r2,-1
    f808:	2080ee26 	beq	r4,r2,fbc4 <_malloc_r+0x778>
    f80c:	a185c83a 	sub	r2,r20,r6
    f810:	10c5883a 	add	r2,r2,r3
    f814:	e0800015 	stw	r2,0(fp)
    f818:	a0c001cc 	andi	r3,r20,7
    f81c:	1800bc26 	beq	r3,zero,fb10 <_malloc_r+0x6c4>
    f820:	a0e9c83a 	sub	r20,r20,r3
    f824:	00840204 	movi	r2,4104
    f828:	a5000204 	addi	r20,r20,8
    f82c:	10c7c83a 	sub	r3,r2,r3
    f830:	a545883a 	add	r2,r20,r21
    f834:	1083ffcc 	andi	r2,r2,4095
    f838:	18abc83a 	sub	r21,r3,r2
    f83c:	a80b883a 	mov	r5,r21
    f840:	9009883a 	mov	r4,r18
    f844:	00100280 	call	10028 <_sbrk_r>
    f848:	00ffffc4 	movi	r3,-1
    f84c:	10c0e126 	beq	r2,r3,fbd4 <_malloc_r+0x788>
    f850:	1505c83a 	sub	r2,r2,r20
    f854:	1545883a 	add	r2,r2,r21
    f858:	10800054 	ori	r2,r2,1
    f85c:	e0c00017 	ldw	r3,0(fp)
    f860:	9d000215 	stw	r20,8(r19)
    f864:	a0800115 	stw	r2,4(r20)
    f868:	a8c7883a 	add	r3,r21,r3
    f86c:	e0c00015 	stw	r3,0(fp)
    f870:	84c00e26 	beq	r16,r19,f8ac <_malloc_r+0x460>
    f874:	018003c4 	movi	r6,15
    f878:	3580a72e 	bgeu	r6,r22,fb18 <_malloc_r+0x6cc>
    f87c:	81400117 	ldw	r5,4(r16)
    f880:	013ffe04 	movi	r4,-8
    f884:	b0bffd04 	addi	r2,r22,-12
    f888:	1104703a 	and	r2,r2,r4
    f88c:	2900004c 	andi	r4,r5,1
    f890:	2088b03a 	or	r4,r4,r2
    f894:	81000115 	stw	r4,4(r16)
    f898:	01400144 	movi	r5,5
    f89c:	8089883a 	add	r4,r16,r2
    f8a0:	21400115 	stw	r5,4(r4)
    f8a4:	21400215 	stw	r5,8(r4)
    f8a8:	3080cd36 	bltu	r6,r2,fbe0 <_malloc_r+0x794>
    f8ac:	008000f4 	movhi	r2,3
    f8b0:	10878b04 	addi	r2,r2,7724
    f8b4:	11000017 	ldw	r4,0(r2)
    f8b8:	20c0012e 	bgeu	r4,r3,f8c0 <_malloc_r+0x474>
    f8bc:	10c00015 	stw	r3,0(r2)
    f8c0:	008000f4 	movhi	r2,3
    f8c4:	10878a04 	addi	r2,r2,7720
    f8c8:	11000017 	ldw	r4,0(r2)
    f8cc:	9c000217 	ldw	r16,8(r19)
    f8d0:	20c0012e 	bgeu	r4,r3,f8d8 <_malloc_r+0x48c>
    f8d4:	10c00015 	stw	r3,0(r2)
    f8d8:	80c00117 	ldw	r3,4(r16)
    f8dc:	00bfff04 	movi	r2,-4
    f8e0:	1886703a 	and	r3,r3,r2
    f8e4:	1c45c83a 	sub	r2,r3,r17
    f8e8:	1c400236 	bltu	r3,r17,f8f4 <_malloc_r+0x4a8>
    f8ec:	00c003c4 	movi	r3,15
    f8f0:	18800416 	blt	r3,r2,f904 <_malloc_r+0x4b8>
    f8f4:	9009883a 	mov	r4,r18
    f8f8:	00206500 	call	20650 <__malloc_unlock>
    f8fc:	0005883a 	mov	r2,zero
    f900:	003f7b06 	br	f6f0 <__alt_data_end+0xfc00f6f0>
    f904:	88c00054 	ori	r3,r17,1
    f908:	80c00115 	stw	r3,4(r16)
    f90c:	8463883a 	add	r17,r16,r17
    f910:	10800054 	ori	r2,r2,1
    f914:	9c400215 	stw	r17,8(r19)
    f918:	88800115 	stw	r2,4(r17)
    f91c:	9009883a 	mov	r4,r18
    f920:	00206500 	call	20650 <__malloc_unlock>
    f924:	80800204 	addi	r2,r16,8
    f928:	003f7106 	br	f6f0 <__alt_data_end+0xfc00f6f0>
    f92c:	00c00504 	movi	r3,20
    f930:	18804a2e 	bgeu	r3,r2,fa5c <_malloc_r+0x610>
    f934:	00c01504 	movi	r3,84
    f938:	18806e36 	bltu	r3,r2,faf4 <_malloc_r+0x6a8>
    f93c:	8804d33a 	srli	r2,r17,12
    f940:	12001bc4 	addi	r8,r2,111
    f944:	11c01b84 	addi	r7,r2,110
    f948:	4209883a 	add	r4,r8,r8
    f94c:	003edd06 	br	f4c4 <__alt_data_end+0xfc00f4c4>
    f950:	3804d27a 	srli	r2,r7,9
    f954:	00c00104 	movi	r3,4
    f958:	1880442e 	bgeu	r3,r2,fa6c <_malloc_r+0x620>
    f95c:	00c00504 	movi	r3,20
    f960:	18808136 	bltu	r3,r2,fb68 <_malloc_r+0x71c>
    f964:	11401704 	addi	r5,r2,92
    f968:	10c016c4 	addi	r3,r2,91
    f96c:	294b883a 	add	r5,r5,r5
    f970:	294b883a 	add	r5,r5,r5
    f974:	294b883a 	add	r5,r5,r5
    f978:	994b883a 	add	r5,r19,r5
    f97c:	28800017 	ldw	r2,0(r5)
    f980:	018000f4 	movhi	r6,3
    f984:	297ffe04 	addi	r5,r5,-8
    f988:	31af8f04 	addi	r6,r6,-16836
    f98c:	28806526 	beq	r5,r2,fb24 <_malloc_r+0x6d8>
    f990:	01bfff04 	movi	r6,-4
    f994:	10c00117 	ldw	r3,4(r2)
    f998:	1986703a 	and	r3,r3,r6
    f99c:	38c0022e 	bgeu	r7,r3,f9a8 <_malloc_r+0x55c>
    f9a0:	10800217 	ldw	r2,8(r2)
    f9a4:	28bffb1e 	bne	r5,r2,f994 <__alt_data_end+0xfc00f994>
    f9a8:	11400317 	ldw	r5,12(r2)
    f9ac:	98c00117 	ldw	r3,4(r19)
    f9b0:	81400315 	stw	r5,12(r16)
    f9b4:	80800215 	stw	r2,8(r16)
    f9b8:	2c000215 	stw	r16,8(r5)
    f9bc:	14000315 	stw	r16,12(r2)
    f9c0:	003ef806 	br	f5a4 <__alt_data_end+0xfc00f5a4>
    f9c4:	88c00054 	ori	r3,r17,1
    f9c8:	80c00115 	stw	r3,4(r16)
    f9cc:	8463883a 	add	r17,r16,r17
    f9d0:	34400515 	stw	r17,20(r6)
    f9d4:	34400415 	stw	r17,16(r6)
    f9d8:	10c00054 	ori	r3,r2,1
    f9dc:	8a000315 	stw	r8,12(r17)
    f9e0:	8a000215 	stw	r8,8(r17)
    f9e4:	88c00115 	stw	r3,4(r17)
    f9e8:	88a3883a 	add	r17,r17,r2
    f9ec:	88800015 	stw	r2,0(r17)
    f9f0:	9009883a 	mov	r4,r18
    f9f4:	00206500 	call	20650 <__malloc_unlock>
    f9f8:	80800204 	addi	r2,r16,8
    f9fc:	003f3c06 	br	f6f0 <__alt_data_end+0xfc00f6f0>
    fa00:	30c00117 	ldw	r3,4(r6)
    fa04:	003ee706 	br	f5a4 <__alt_data_end+0xfc00f5a4>
    fa08:	5ac00044 	addi	r11,r11,1
    fa0c:	588000cc 	andi	r2,r11,3
    fa10:	31800204 	addi	r6,r6,8
    fa14:	103efd1e 	bne	r2,zero,f60c <__alt_data_end+0xfc00f60c>
    fa18:	00002406 	br	faac <_malloc_r+0x660>
    fa1c:	14000317 	ldw	r16,12(r2)
    fa20:	143f251e 	bne	r2,r16,f6b8 <__alt_data_end+0xfc00f6b8>
    fa24:	21000084 	addi	r4,r4,2
    fa28:	003ebc06 	br	f51c <__alt_data_end+0xfc00f51c>
    fa2c:	8085883a 	add	r2,r16,r2
    fa30:	10c00117 	ldw	r3,4(r2)
    fa34:	81000317 	ldw	r4,12(r16)
    fa38:	81400217 	ldw	r5,8(r16)
    fa3c:	18c00054 	ori	r3,r3,1
    fa40:	10c00115 	stw	r3,4(r2)
    fa44:	29000315 	stw	r4,12(r5)
    fa48:	21400215 	stw	r5,8(r4)
    fa4c:	9009883a 	mov	r4,r18
    fa50:	00206500 	call	20650 <__malloc_unlock>
    fa54:	80800204 	addi	r2,r16,8
    fa58:	003f2506 	br	f6f0 <__alt_data_end+0xfc00f6f0>
    fa5c:	12001704 	addi	r8,r2,92
    fa60:	11c016c4 	addi	r7,r2,91
    fa64:	4209883a 	add	r4,r8,r8
    fa68:	003e9606 	br	f4c4 <__alt_data_end+0xfc00f4c4>
    fa6c:	3804d1ba 	srli	r2,r7,6
    fa70:	11400e44 	addi	r5,r2,57
    fa74:	10c00e04 	addi	r3,r2,56
    fa78:	294b883a 	add	r5,r5,r5
    fa7c:	003fbc06 	br	f970 <__alt_data_end+0xfc00f970>
    fa80:	84ff5926 	beq	r16,r19,f7e8 <__alt_data_end+0xfc00f7e8>
    fa84:	008000f4 	movhi	r2,3
    fa88:	10af8f04 	addi	r2,r2,-16836
    fa8c:	14000217 	ldw	r16,8(r2)
    fa90:	00bfff04 	movi	r2,-4
    fa94:	80c00117 	ldw	r3,4(r16)
    fa98:	1886703a 	and	r3,r3,r2
    fa9c:	003f9106 	br	f8e4 <__alt_data_end+0xfc00f8e4>
    faa0:	60800217 	ldw	r2,8(r12)
    faa4:	213fffc4 	addi	r4,r4,-1
    faa8:	1300651e 	bne	r2,r12,fc40 <_malloc_r+0x7f4>
    faac:	208000cc 	andi	r2,r4,3
    fab0:	633ffe04 	addi	r12,r12,-8
    fab4:	103ffa1e 	bne	r2,zero,faa0 <__alt_data_end+0xfc00faa0>
    fab8:	98800117 	ldw	r2,4(r19)
    fabc:	0146303a 	nor	r3,zero,r5
    fac0:	1884703a 	and	r2,r3,r2
    fac4:	98800115 	stw	r2,4(r19)
    fac8:	294b883a 	add	r5,r5,r5
    facc:	117f2836 	bltu	r2,r5,f770 <__alt_data_end+0xfc00f770>
    fad0:	283f2726 	beq	r5,zero,f770 <__alt_data_end+0xfc00f770>
    fad4:	2886703a 	and	r3,r5,r2
    fad8:	5809883a 	mov	r4,r11
    fadc:	183ec31e 	bne	r3,zero,f5ec <__alt_data_end+0xfc00f5ec>
    fae0:	294b883a 	add	r5,r5,r5
    fae4:	2886703a 	and	r3,r5,r2
    fae8:	21000104 	addi	r4,r4,4
    faec:	183ffc26 	beq	r3,zero,fae0 <__alt_data_end+0xfc00fae0>
    faf0:	003ebe06 	br	f5ec <__alt_data_end+0xfc00f5ec>
    faf4:	00c05504 	movi	r3,340
    faf8:	18801236 	bltu	r3,r2,fb44 <_malloc_r+0x6f8>
    fafc:	8804d3fa 	srli	r2,r17,15
    fb00:	12001e04 	addi	r8,r2,120
    fb04:	11c01dc4 	addi	r7,r2,119
    fb08:	4209883a 	add	r4,r8,r8
    fb0c:	003e6d06 	br	f4c4 <__alt_data_end+0xfc00f4c4>
    fb10:	00c40004 	movi	r3,4096
    fb14:	003f4606 	br	f830 <__alt_data_end+0xfc00f830>
    fb18:	00800044 	movi	r2,1
    fb1c:	a0800115 	stw	r2,4(r20)
    fb20:	003f7406 	br	f8f4 <__alt_data_end+0xfc00f8f4>
    fb24:	1805d0ba 	srai	r2,r3,2
    fb28:	01c00044 	movi	r7,1
    fb2c:	30c00117 	ldw	r3,4(r6)
    fb30:	388e983a 	sll	r7,r7,r2
    fb34:	2805883a 	mov	r2,r5
    fb38:	38c6b03a 	or	r3,r7,r3
    fb3c:	30c00115 	stw	r3,4(r6)
    fb40:	003f9b06 	br	f9b0 <__alt_data_end+0xfc00f9b0>
    fb44:	00c15504 	movi	r3,1364
    fb48:	18801a36 	bltu	r3,r2,fbb4 <_malloc_r+0x768>
    fb4c:	8804d4ba 	srli	r2,r17,18
    fb50:	12001f44 	addi	r8,r2,125
    fb54:	11c01f04 	addi	r7,r2,124
    fb58:	4209883a 	add	r4,r8,r8
    fb5c:	003e5906 	br	f4c4 <__alt_data_end+0xfc00f4c4>
    fb60:	ad400404 	addi	r21,r21,16
    fb64:	003f1706 	br	f7c4 <__alt_data_end+0xfc00f7c4>
    fb68:	00c01504 	movi	r3,84
    fb6c:	18802336 	bltu	r3,r2,fbfc <_malloc_r+0x7b0>
    fb70:	3804d33a 	srli	r2,r7,12
    fb74:	11401bc4 	addi	r5,r2,111
    fb78:	10c01b84 	addi	r3,r2,110
    fb7c:	294b883a 	add	r5,r5,r5
    fb80:	003f7b06 	br	f970 <__alt_data_end+0xfc00f970>
    fb84:	9c000217 	ldw	r16,8(r19)
    fb88:	00bfff04 	movi	r2,-4
    fb8c:	80c00117 	ldw	r3,4(r16)
    fb90:	1886703a 	and	r3,r3,r2
    fb94:	003f5306 	br	f8e4 <__alt_data_end+0xfc00f8e4>
    fb98:	3083ffcc 	andi	r2,r6,4095
    fb9c:	103f181e 	bne	r2,zero,f800 <__alt_data_end+0xfc00f800>
    fba0:	99000217 	ldw	r4,8(r19)
    fba4:	b545883a 	add	r2,r22,r21
    fba8:	10800054 	ori	r2,r2,1
    fbac:	20800115 	stw	r2,4(r4)
    fbb0:	003f3e06 	br	f8ac <__alt_data_end+0xfc00f8ac>
    fbb4:	01003f84 	movi	r4,254
    fbb8:	02001fc4 	movi	r8,127
    fbbc:	01c01f84 	movi	r7,126
    fbc0:	003e4006 	br	f4c4 <__alt_data_end+0xfc00f4c4>
    fbc4:	008000f4 	movhi	r2,3
    fbc8:	10baf304 	addi	r2,r2,-5172
    fbcc:	15000015 	stw	r20,0(r2)
    fbd0:	003f1106 	br	f818 <__alt_data_end+0xfc00f818>
    fbd4:	00800044 	movi	r2,1
    fbd8:	002b883a 	mov	r21,zero
    fbdc:	003f1f06 	br	f85c <__alt_data_end+0xfc00f85c>
    fbe0:	81400204 	addi	r5,r16,8
    fbe4:	9009883a 	mov	r4,r18
    fbe8:	0016db00 	call	16db0 <_free_r>
    fbec:	008000f4 	movhi	r2,3
    fbf0:	1087e404 	addi	r2,r2,8080
    fbf4:	10c00017 	ldw	r3,0(r2)
    fbf8:	003f2c06 	br	f8ac <__alt_data_end+0xfc00f8ac>
    fbfc:	00c05504 	movi	r3,340
    fc00:	18800536 	bltu	r3,r2,fc18 <_malloc_r+0x7cc>
    fc04:	3804d3fa 	srli	r2,r7,15
    fc08:	11401e04 	addi	r5,r2,120
    fc0c:	10c01dc4 	addi	r3,r2,119
    fc10:	294b883a 	add	r5,r5,r5
    fc14:	003f5606 	br	f970 <__alt_data_end+0xfc00f970>
    fc18:	00c15504 	movi	r3,1364
    fc1c:	18800536 	bltu	r3,r2,fc34 <_malloc_r+0x7e8>
    fc20:	3804d4ba 	srli	r2,r7,18
    fc24:	11401f44 	addi	r5,r2,125
    fc28:	10c01f04 	addi	r3,r2,124
    fc2c:	294b883a 	add	r5,r5,r5
    fc30:	003f4f06 	br	f970 <__alt_data_end+0xfc00f970>
    fc34:	01403f84 	movi	r5,254
    fc38:	00c01f84 	movi	r3,126
    fc3c:	003f4c06 	br	f970 <__alt_data_end+0xfc00f970>
    fc40:	98800117 	ldw	r2,4(r19)
    fc44:	003fa006 	br	fac8 <__alt_data_end+0xfc00fac8>
    fc48:	8808d0fa 	srli	r4,r17,3
    fc4c:	20800044 	addi	r2,r4,1
    fc50:	1085883a 	add	r2,r2,r2
    fc54:	003e9006 	br	f698 <__alt_data_end+0xfc00f698>

0000fc58 <memcpy>:
    fc58:	defffd04 	addi	sp,sp,-12
    fc5c:	dfc00215 	stw	ra,8(sp)
    fc60:	dc400115 	stw	r17,4(sp)
    fc64:	dc000015 	stw	r16,0(sp)
    fc68:	00c003c4 	movi	r3,15
    fc6c:	2005883a 	mov	r2,r4
    fc70:	1980452e 	bgeu	r3,r6,fd88 <memcpy+0x130>
    fc74:	2906b03a 	or	r3,r5,r4
    fc78:	18c000cc 	andi	r3,r3,3
    fc7c:	1800441e 	bne	r3,zero,fd90 <memcpy+0x138>
    fc80:	347ffc04 	addi	r17,r6,-16
    fc84:	8822d13a 	srli	r17,r17,4
    fc88:	28c00104 	addi	r3,r5,4
    fc8c:	23400104 	addi	r13,r4,4
    fc90:	8820913a 	slli	r16,r17,4
    fc94:	2b000204 	addi	r12,r5,8
    fc98:	22c00204 	addi	r11,r4,8
    fc9c:	84000504 	addi	r16,r16,20
    fca0:	2a800304 	addi	r10,r5,12
    fca4:	22400304 	addi	r9,r4,12
    fca8:	2c21883a 	add	r16,r5,r16
    fcac:	2811883a 	mov	r8,r5
    fcb0:	200f883a 	mov	r7,r4
    fcb4:	41000017 	ldw	r4,0(r8)
    fcb8:	1fc00017 	ldw	ra,0(r3)
    fcbc:	63c00017 	ldw	r15,0(r12)
    fcc0:	39000015 	stw	r4,0(r7)
    fcc4:	53800017 	ldw	r14,0(r10)
    fcc8:	6fc00015 	stw	ra,0(r13)
    fccc:	5bc00015 	stw	r15,0(r11)
    fcd0:	4b800015 	stw	r14,0(r9)
    fcd4:	18c00404 	addi	r3,r3,16
    fcd8:	39c00404 	addi	r7,r7,16
    fcdc:	42000404 	addi	r8,r8,16
    fce0:	6b400404 	addi	r13,r13,16
    fce4:	63000404 	addi	r12,r12,16
    fce8:	5ac00404 	addi	r11,r11,16
    fcec:	52800404 	addi	r10,r10,16
    fcf0:	4a400404 	addi	r9,r9,16
    fcf4:	1c3fef1e 	bne	r3,r16,fcb4 <__alt_data_end+0xfc00fcb4>
    fcf8:	89c00044 	addi	r7,r17,1
    fcfc:	380e913a 	slli	r7,r7,4
    fd00:	310003cc 	andi	r4,r6,15
    fd04:	02c000c4 	movi	r11,3
    fd08:	11c7883a 	add	r3,r2,r7
    fd0c:	29cb883a 	add	r5,r5,r7
    fd10:	5900212e 	bgeu	r11,r4,fd98 <memcpy+0x140>
    fd14:	1813883a 	mov	r9,r3
    fd18:	2811883a 	mov	r8,r5
    fd1c:	200f883a 	mov	r7,r4
    fd20:	42800017 	ldw	r10,0(r8)
    fd24:	4a400104 	addi	r9,r9,4
    fd28:	39ffff04 	addi	r7,r7,-4
    fd2c:	4abfff15 	stw	r10,-4(r9)
    fd30:	42000104 	addi	r8,r8,4
    fd34:	59fffa36 	bltu	r11,r7,fd20 <__alt_data_end+0xfc00fd20>
    fd38:	213fff04 	addi	r4,r4,-4
    fd3c:	2008d0ba 	srli	r4,r4,2
    fd40:	318000cc 	andi	r6,r6,3
    fd44:	21000044 	addi	r4,r4,1
    fd48:	2109883a 	add	r4,r4,r4
    fd4c:	2109883a 	add	r4,r4,r4
    fd50:	1907883a 	add	r3,r3,r4
    fd54:	290b883a 	add	r5,r5,r4
    fd58:	30000626 	beq	r6,zero,fd74 <memcpy+0x11c>
    fd5c:	198d883a 	add	r6,r3,r6
    fd60:	29c00003 	ldbu	r7,0(r5)
    fd64:	18c00044 	addi	r3,r3,1
    fd68:	29400044 	addi	r5,r5,1
    fd6c:	19ffffc5 	stb	r7,-1(r3)
    fd70:	19bffb1e 	bne	r3,r6,fd60 <__alt_data_end+0xfc00fd60>
    fd74:	dfc00217 	ldw	ra,8(sp)
    fd78:	dc400117 	ldw	r17,4(sp)
    fd7c:	dc000017 	ldw	r16,0(sp)
    fd80:	dec00304 	addi	sp,sp,12
    fd84:	f800283a 	ret
    fd88:	2007883a 	mov	r3,r4
    fd8c:	003ff206 	br	fd58 <__alt_data_end+0xfc00fd58>
    fd90:	2007883a 	mov	r3,r4
    fd94:	003ff106 	br	fd5c <__alt_data_end+0xfc00fd5c>
    fd98:	200d883a 	mov	r6,r4
    fd9c:	003fee06 	br	fd58 <__alt_data_end+0xfc00fd58>

0000fda0 <memset>:
    fda0:	20c000cc 	andi	r3,r4,3
    fda4:	2005883a 	mov	r2,r4
    fda8:	18004426 	beq	r3,zero,febc <memset+0x11c>
    fdac:	31ffffc4 	addi	r7,r6,-1
    fdb0:	30004026 	beq	r6,zero,feb4 <memset+0x114>
    fdb4:	2813883a 	mov	r9,r5
    fdb8:	200d883a 	mov	r6,r4
    fdbc:	2007883a 	mov	r3,r4
    fdc0:	00000406 	br	fdd4 <memset+0x34>
    fdc4:	3a3fffc4 	addi	r8,r7,-1
    fdc8:	31800044 	addi	r6,r6,1
    fdcc:	38003926 	beq	r7,zero,feb4 <memset+0x114>
    fdd0:	400f883a 	mov	r7,r8
    fdd4:	18c00044 	addi	r3,r3,1
    fdd8:	32400005 	stb	r9,0(r6)
    fddc:	1a0000cc 	andi	r8,r3,3
    fde0:	403ff81e 	bne	r8,zero,fdc4 <__alt_data_end+0xfc00fdc4>
    fde4:	010000c4 	movi	r4,3
    fde8:	21c02d2e 	bgeu	r4,r7,fea0 <memset+0x100>
    fdec:	29003fcc 	andi	r4,r5,255
    fdf0:	200c923a 	slli	r6,r4,8
    fdf4:	3108b03a 	or	r4,r6,r4
    fdf8:	200c943a 	slli	r6,r4,16
    fdfc:	218cb03a 	or	r6,r4,r6
    fe00:	010003c4 	movi	r4,15
    fe04:	21c0182e 	bgeu	r4,r7,fe68 <memset+0xc8>
    fe08:	3b3ffc04 	addi	r12,r7,-16
    fe0c:	6018d13a 	srli	r12,r12,4
    fe10:	1a000104 	addi	r8,r3,4
    fe14:	1ac00204 	addi	r11,r3,8
    fe18:	6008913a 	slli	r4,r12,4
    fe1c:	1a800304 	addi	r10,r3,12
    fe20:	1813883a 	mov	r9,r3
    fe24:	21000504 	addi	r4,r4,20
    fe28:	1909883a 	add	r4,r3,r4
    fe2c:	49800015 	stw	r6,0(r9)
    fe30:	41800015 	stw	r6,0(r8)
    fe34:	59800015 	stw	r6,0(r11)
    fe38:	51800015 	stw	r6,0(r10)
    fe3c:	42000404 	addi	r8,r8,16
    fe40:	4a400404 	addi	r9,r9,16
    fe44:	5ac00404 	addi	r11,r11,16
    fe48:	52800404 	addi	r10,r10,16
    fe4c:	413ff71e 	bne	r8,r4,fe2c <__alt_data_end+0xfc00fe2c>
    fe50:	63000044 	addi	r12,r12,1
    fe54:	6018913a 	slli	r12,r12,4
    fe58:	39c003cc 	andi	r7,r7,15
    fe5c:	010000c4 	movi	r4,3
    fe60:	1b07883a 	add	r3,r3,r12
    fe64:	21c00e2e 	bgeu	r4,r7,fea0 <memset+0x100>
    fe68:	1813883a 	mov	r9,r3
    fe6c:	3811883a 	mov	r8,r7
    fe70:	010000c4 	movi	r4,3
    fe74:	49800015 	stw	r6,0(r9)
    fe78:	423fff04 	addi	r8,r8,-4
    fe7c:	4a400104 	addi	r9,r9,4
    fe80:	223ffc36 	bltu	r4,r8,fe74 <__alt_data_end+0xfc00fe74>
    fe84:	393fff04 	addi	r4,r7,-4
    fe88:	2008d0ba 	srli	r4,r4,2
    fe8c:	39c000cc 	andi	r7,r7,3
    fe90:	21000044 	addi	r4,r4,1
    fe94:	2109883a 	add	r4,r4,r4
    fe98:	2109883a 	add	r4,r4,r4
    fe9c:	1907883a 	add	r3,r3,r4
    fea0:	38000526 	beq	r7,zero,feb8 <memset+0x118>
    fea4:	19cf883a 	add	r7,r3,r7
    fea8:	19400005 	stb	r5,0(r3)
    feac:	18c00044 	addi	r3,r3,1
    feb0:	38fffd1e 	bne	r7,r3,fea8 <__alt_data_end+0xfc00fea8>
    feb4:	f800283a 	ret
    feb8:	f800283a 	ret
    febc:	2007883a 	mov	r3,r4
    fec0:	300f883a 	mov	r7,r6
    fec4:	003fc706 	br	fde4 <__alt_data_end+0xfc00fde4>

0000fec8 <_printf_r>:
    fec8:	defffd04 	addi	sp,sp,-12
    fecc:	2805883a 	mov	r2,r5
    fed0:	dfc00015 	stw	ra,0(sp)
    fed4:	d9800115 	stw	r6,4(sp)
    fed8:	d9c00215 	stw	r7,8(sp)
    fedc:	21400217 	ldw	r5,8(r4)
    fee0:	d9c00104 	addi	r7,sp,4
    fee4:	100d883a 	mov	r6,r2
    fee8:	001287c0 	call	1287c <___vfprintf_internal_r>
    feec:	dfc00017 	ldw	ra,0(sp)
    fef0:	dec00304 	addi	sp,sp,12
    fef4:	f800283a 	ret

0000fef8 <printf>:
    fef8:	defffc04 	addi	sp,sp,-16
    fefc:	dfc00015 	stw	ra,0(sp)
    ff00:	d9400115 	stw	r5,4(sp)
    ff04:	d9800215 	stw	r6,8(sp)
    ff08:	d9c00315 	stw	r7,12(sp)
    ff0c:	008000f4 	movhi	r2,3
    ff10:	10baf204 	addi	r2,r2,-5176
    ff14:	10800017 	ldw	r2,0(r2)
    ff18:	200b883a 	mov	r5,r4
    ff1c:	d9800104 	addi	r6,sp,4
    ff20:	11000217 	ldw	r4,8(r2)
    ff24:	0014b580 	call	14b58 <__vfprintf_internal>
    ff28:	dfc00017 	ldw	ra,0(sp)
    ff2c:	dec00404 	addi	sp,sp,16
    ff30:	f800283a 	ret

0000ff34 <_putchar_r>:
    ff34:	21800217 	ldw	r6,8(r4)
    ff38:	0018ca01 	jmpi	18ca0 <_putc_r>

0000ff3c <putchar>:
    ff3c:	008000f4 	movhi	r2,3
    ff40:	10baf204 	addi	r2,r2,-5176
    ff44:	200b883a 	mov	r5,r4
    ff48:	11000017 	ldw	r4,0(r2)
    ff4c:	21800217 	ldw	r6,8(r4)
    ff50:	0018ca01 	jmpi	18ca0 <_putc_r>

0000ff54 <_puts_r>:
    ff54:	defff604 	addi	sp,sp,-40
    ff58:	dc000715 	stw	r16,28(sp)
    ff5c:	2021883a 	mov	r16,r4
    ff60:	2809883a 	mov	r4,r5
    ff64:	dc400815 	stw	r17,32(sp)
    ff68:	dfc00915 	stw	ra,36(sp)
    ff6c:	2823883a 	mov	r17,r5
    ff70:	00105200 	call	10520 <strlen>
    ff74:	10c00044 	addi	r3,r2,1
    ff78:	d8800115 	stw	r2,4(sp)
    ff7c:	008000f4 	movhi	r2,3
    ff80:	10adec04 	addi	r2,r2,-18512
    ff84:	d8800215 	stw	r2,8(sp)
    ff88:	00800044 	movi	r2,1
    ff8c:	d8800315 	stw	r2,12(sp)
    ff90:	00800084 	movi	r2,2
    ff94:	dc400015 	stw	r17,0(sp)
    ff98:	d8c00615 	stw	r3,24(sp)
    ff9c:	dec00415 	stw	sp,16(sp)
    ffa0:	d8800515 	stw	r2,20(sp)
    ffa4:	80000226 	beq	r16,zero,ffb0 <_puts_r+0x5c>
    ffa8:	80800e17 	ldw	r2,56(r16)
    ffac:	10001426 	beq	r2,zero,10000 <_puts_r+0xac>
    ffb0:	81400217 	ldw	r5,8(r16)
    ffb4:	2880030b 	ldhu	r2,12(r5)
    ffb8:	10c8000c 	andi	r3,r2,8192
    ffbc:	1800061e 	bne	r3,zero,ffd8 <_puts_r+0x84>
    ffc0:	29001917 	ldw	r4,100(r5)
    ffc4:	00f7ffc4 	movi	r3,-8193
    ffc8:	10880014 	ori	r2,r2,8192
    ffcc:	20c6703a 	and	r3,r4,r3
    ffd0:	2880030d 	sth	r2,12(r5)
    ffd4:	28c01915 	stw	r3,100(r5)
    ffd8:	d9800404 	addi	r6,sp,16
    ffdc:	8009883a 	mov	r4,r16
    ffe0:	00170c00 	call	170c0 <__sfvwrite_r>
    ffe4:	1000091e 	bne	r2,zero,1000c <_puts_r+0xb8>
    ffe8:	00800284 	movi	r2,10
    ffec:	dfc00917 	ldw	ra,36(sp)
    fff0:	dc400817 	ldw	r17,32(sp)
    fff4:	dc000717 	ldw	r16,28(sp)
    fff8:	dec00a04 	addi	sp,sp,40
    fffc:	f800283a 	ret
   10000:	8009883a 	mov	r4,r16
   10004:	0016c3c0 	call	16c3c <__sinit>
   10008:	003fe906 	br	ffb0 <__alt_data_end+0xfc00ffb0>
   1000c:	00bfffc4 	movi	r2,-1
   10010:	003ff606 	br	ffec <__alt_data_end+0xfc00ffec>

00010014 <puts>:
   10014:	008000f4 	movhi	r2,3
   10018:	10baf204 	addi	r2,r2,-5176
   1001c:	200b883a 	mov	r5,r4
   10020:	11000017 	ldw	r4,0(r2)
   10024:	000ff541 	jmpi	ff54 <_puts_r>

00010028 <_sbrk_r>:
   10028:	defffd04 	addi	sp,sp,-12
   1002c:	dc000015 	stw	r16,0(sp)
   10030:	040000f4 	movhi	r16,3
   10034:	dc400115 	stw	r17,4(sp)
   10038:	84078d04 	addi	r16,r16,7732
   1003c:	2023883a 	mov	r17,r4
   10040:	2809883a 	mov	r4,r5
   10044:	dfc00215 	stw	ra,8(sp)
   10048:	80000015 	stw	zero,0(r16)
   1004c:	00208380 	call	20838 <sbrk>
   10050:	00ffffc4 	movi	r3,-1
   10054:	10c00526 	beq	r2,r3,1006c <_sbrk_r+0x44>
   10058:	dfc00217 	ldw	ra,8(sp)
   1005c:	dc400117 	ldw	r17,4(sp)
   10060:	dc000017 	ldw	r16,0(sp)
   10064:	dec00304 	addi	sp,sp,12
   10068:	f800283a 	ret
   1006c:	80c00017 	ldw	r3,0(r16)
   10070:	183ff926 	beq	r3,zero,10058 <__alt_data_end+0xfc010058>
   10074:	88c00015 	stw	r3,0(r17)
   10078:	003ff706 	br	10058 <__alt_data_end+0xfc010058>

0001007c <_init_signal_r>:
   1007c:	2080b717 	ldw	r2,732(r4)
   10080:	10000226 	beq	r2,zero,1008c <_init_signal_r+0x10>
   10084:	0005883a 	mov	r2,zero
   10088:	f800283a 	ret
   1008c:	defffe04 	addi	sp,sp,-8
   10090:	01402004 	movi	r5,128
   10094:	dc000015 	stw	r16,0(sp)
   10098:	dfc00115 	stw	ra,4(sp)
   1009c:	2021883a 	mov	r16,r4
   100a0:	000f44c0 	call	f44c <_malloc_r>
   100a4:	8080b715 	stw	r2,732(r16)
   100a8:	10000d26 	beq	r2,zero,100e0 <_init_signal_r+0x64>
   100ac:	0007883a 	mov	r3,zero
   100b0:	01002004 	movi	r4,128
   100b4:	00000106 	br	100bc <_init_signal_r+0x40>
   100b8:	8080b717 	ldw	r2,732(r16)
   100bc:	10c5883a 	add	r2,r2,r3
   100c0:	10000015 	stw	zero,0(r2)
   100c4:	18c00104 	addi	r3,r3,4
   100c8:	193ffb1e 	bne	r3,r4,100b8 <__alt_data_end+0xfc0100b8>
   100cc:	0005883a 	mov	r2,zero
   100d0:	dfc00117 	ldw	ra,4(sp)
   100d4:	dc000017 	ldw	r16,0(sp)
   100d8:	dec00204 	addi	sp,sp,8
   100dc:	f800283a 	ret
   100e0:	00bfffc4 	movi	r2,-1
   100e4:	003ffa06 	br	100d0 <__alt_data_end+0xfc0100d0>

000100e8 <_signal_r>:
   100e8:	00c007c4 	movi	r3,31
   100ec:	19401536 	bltu	r3,r5,10144 <_signal_r+0x5c>
   100f0:	2080b717 	ldw	r2,732(r4)
   100f4:	defffc04 	addi	sp,sp,-16
   100f8:	dc800215 	stw	r18,8(sp)
   100fc:	dc400115 	stw	r17,4(sp)
   10100:	dc000015 	stw	r16,0(sp)
   10104:	dfc00315 	stw	ra,12(sp)
   10108:	3023883a 	mov	r17,r6
   1010c:	2021883a 	mov	r16,r4
   10110:	2825883a 	mov	r18,r5
   10114:	10000f26 	beq	r2,zero,10154 <_signal_r+0x6c>
   10118:	948b883a 	add	r5,r18,r18
   1011c:	294b883a 	add	r5,r5,r5
   10120:	114b883a 	add	r5,r2,r5
   10124:	28800017 	ldw	r2,0(r5)
   10128:	2c400015 	stw	r17,0(r5)
   1012c:	dfc00317 	ldw	ra,12(sp)
   10130:	dc800217 	ldw	r18,8(sp)
   10134:	dc400117 	ldw	r17,4(sp)
   10138:	dc000017 	ldw	r16,0(sp)
   1013c:	dec00404 	addi	sp,sp,16
   10140:	f800283a 	ret
   10144:	00c00584 	movi	r3,22
   10148:	20c00015 	stw	r3,0(r4)
   1014c:	00bfffc4 	movi	r2,-1
   10150:	f800283a 	ret
   10154:	001007c0 	call	1007c <_init_signal_r>
   10158:	1000021e 	bne	r2,zero,10164 <_signal_r+0x7c>
   1015c:	8080b717 	ldw	r2,732(r16)
   10160:	003fed06 	br	10118 <__alt_data_end+0xfc010118>
   10164:	00bfffc4 	movi	r2,-1
   10168:	003ff006 	br	1012c <__alt_data_end+0xfc01012c>

0001016c <_raise_r>:
   1016c:	008007c4 	movi	r2,31
   10170:	11402936 	bltu	r2,r5,10218 <_raise_r+0xac>
   10174:	20c0b717 	ldw	r3,732(r4)
   10178:	defffd04 	addi	sp,sp,-12
   1017c:	dc400115 	stw	r17,4(sp)
   10180:	dc000015 	stw	r16,0(sp)
   10184:	dfc00215 	stw	ra,8(sp)
   10188:	2021883a 	mov	r16,r4
   1018c:	2823883a 	mov	r17,r5
   10190:	18001726 	beq	r3,zero,101f0 <_raise_r+0x84>
   10194:	2945883a 	add	r2,r5,r5
   10198:	1085883a 	add	r2,r2,r2
   1019c:	1887883a 	add	r3,r3,r2
   101a0:	19800017 	ldw	r6,0(r3)
   101a4:	30001226 	beq	r6,zero,101f0 <_raise_r+0x84>
   101a8:	00800044 	movi	r2,1
   101ac:	30800e26 	beq	r6,r2,101e8 <_raise_r+0x7c>
   101b0:	013fffc4 	movi	r4,-1
   101b4:	31000926 	beq	r6,r4,101dc <_raise_r+0x70>
   101b8:	18000015 	stw	zero,0(r3)
   101bc:	2809883a 	mov	r4,r5
   101c0:	303ee83a 	callr	r6
   101c4:	0005883a 	mov	r2,zero
   101c8:	dfc00217 	ldw	ra,8(sp)
   101cc:	dc400117 	ldw	r17,4(sp)
   101d0:	dc000017 	ldw	r16,0(sp)
   101d4:	dec00304 	addi	sp,sp,12
   101d8:	f800283a 	ret
   101dc:	00c00584 	movi	r3,22
   101e0:	80c00015 	stw	r3,0(r16)
   101e4:	003ff806 	br	101c8 <__alt_data_end+0xfc0101c8>
   101e8:	0005883a 	mov	r2,zero
   101ec:	003ff606 	br	101c8 <__alt_data_end+0xfc0101c8>
   101f0:	8009883a 	mov	r4,r16
   101f4:	001037c0 	call	1037c <_getpid_r>
   101f8:	880d883a 	mov	r6,r17
   101fc:	100b883a 	mov	r5,r2
   10200:	8009883a 	mov	r4,r16
   10204:	dfc00217 	ldw	ra,8(sp)
   10208:	dc400117 	ldw	r17,4(sp)
   1020c:	dc000017 	ldw	r16,0(sp)
   10210:	dec00304 	addi	sp,sp,12
   10214:	00103201 	jmpi	10320 <_kill_r>
   10218:	00800584 	movi	r2,22
   1021c:	20800015 	stw	r2,0(r4)
   10220:	00bfffc4 	movi	r2,-1
   10224:	f800283a 	ret

00010228 <__sigtramp_r>:
   10228:	008007c4 	movi	r2,31
   1022c:	11402436 	bltu	r2,r5,102c0 <__sigtramp_r+0x98>
   10230:	20c0b717 	ldw	r3,732(r4)
   10234:	defffd04 	addi	sp,sp,-12
   10238:	dc400115 	stw	r17,4(sp)
   1023c:	dc000015 	stw	r16,0(sp)
   10240:	dfc00215 	stw	ra,8(sp)
   10244:	2021883a 	mov	r16,r4
   10248:	2823883a 	mov	r17,r5
   1024c:	18001826 	beq	r3,zero,102b0 <__sigtramp_r+0x88>
   10250:	8c45883a 	add	r2,r17,r17
   10254:	1085883a 	add	r2,r2,r2
   10258:	1885883a 	add	r2,r3,r2
   1025c:	10c00017 	ldw	r3,0(r2)
   10260:	18001126 	beq	r3,zero,102a8 <__sigtramp_r+0x80>
   10264:	013fffc4 	movi	r4,-1
   10268:	19000d26 	beq	r3,r4,102a0 <__sigtramp_r+0x78>
   1026c:	01000044 	movi	r4,1
   10270:	19000926 	beq	r3,r4,10298 <__sigtramp_r+0x70>
   10274:	10000015 	stw	zero,0(r2)
   10278:	8809883a 	mov	r4,r17
   1027c:	183ee83a 	callr	r3
   10280:	0005883a 	mov	r2,zero
   10284:	dfc00217 	ldw	ra,8(sp)
   10288:	dc400117 	ldw	r17,4(sp)
   1028c:	dc000017 	ldw	r16,0(sp)
   10290:	dec00304 	addi	sp,sp,12
   10294:	f800283a 	ret
   10298:	008000c4 	movi	r2,3
   1029c:	003ff906 	br	10284 <__alt_data_end+0xfc010284>
   102a0:	00800084 	movi	r2,2
   102a4:	003ff706 	br	10284 <__alt_data_end+0xfc010284>
   102a8:	00800044 	movi	r2,1
   102ac:	003ff506 	br	10284 <__alt_data_end+0xfc010284>
   102b0:	001007c0 	call	1007c <_init_signal_r>
   102b4:	1000041e 	bne	r2,zero,102c8 <__sigtramp_r+0xa0>
   102b8:	80c0b717 	ldw	r3,732(r16)
   102bc:	003fe406 	br	10250 <__alt_data_end+0xfc010250>
   102c0:	00bfffc4 	movi	r2,-1
   102c4:	f800283a 	ret
   102c8:	00bfffc4 	movi	r2,-1
   102cc:	003fed06 	br	10284 <__alt_data_end+0xfc010284>

000102d0 <raise>:
   102d0:	008000f4 	movhi	r2,3
   102d4:	10baf204 	addi	r2,r2,-5176
   102d8:	200b883a 	mov	r5,r4
   102dc:	11000017 	ldw	r4,0(r2)
   102e0:	001016c1 	jmpi	1016c <_raise_r>

000102e4 <signal>:
   102e4:	008000f4 	movhi	r2,3
   102e8:	10baf204 	addi	r2,r2,-5176
   102ec:	280d883a 	mov	r6,r5
   102f0:	200b883a 	mov	r5,r4
   102f4:	11000017 	ldw	r4,0(r2)
   102f8:	00100e81 	jmpi	100e8 <_signal_r>

000102fc <_init_signal>:
   102fc:	008000f4 	movhi	r2,3
   10300:	10baf204 	addi	r2,r2,-5176
   10304:	11000017 	ldw	r4,0(r2)
   10308:	001007c1 	jmpi	1007c <_init_signal_r>

0001030c <__sigtramp>:
   1030c:	008000f4 	movhi	r2,3
   10310:	10baf204 	addi	r2,r2,-5176
   10314:	200b883a 	mov	r5,r4
   10318:	11000017 	ldw	r4,0(r2)
   1031c:	00102281 	jmpi	10228 <__sigtramp_r>

00010320 <_kill_r>:
   10320:	defffd04 	addi	sp,sp,-12
   10324:	2805883a 	mov	r2,r5
   10328:	dc000015 	stw	r16,0(sp)
   1032c:	040000f4 	movhi	r16,3
   10330:	dc400115 	stw	r17,4(sp)
   10334:	84078d04 	addi	r16,r16,7732
   10338:	2023883a 	mov	r17,r4
   1033c:	300b883a 	mov	r5,r6
   10340:	1009883a 	mov	r4,r2
   10344:	dfc00215 	stw	ra,8(sp)
   10348:	80000015 	stw	zero,0(r16)
   1034c:	002027c0 	call	2027c <kill>
   10350:	00ffffc4 	movi	r3,-1
   10354:	10c00526 	beq	r2,r3,1036c <_kill_r+0x4c>
   10358:	dfc00217 	ldw	ra,8(sp)
   1035c:	dc400117 	ldw	r17,4(sp)
   10360:	dc000017 	ldw	r16,0(sp)
   10364:	dec00304 	addi	sp,sp,12
   10368:	f800283a 	ret
   1036c:	80c00017 	ldw	r3,0(r16)
   10370:	183ff926 	beq	r3,zero,10358 <__alt_data_end+0xfc010358>
   10374:	88c00015 	stw	r3,0(r17)
   10378:	003ff706 	br	10358 <__alt_data_end+0xfc010358>

0001037c <_getpid_r>:
   1037c:	00201381 	jmpi	20138 <getpid>

00010380 <_sprintf_r>:
   10380:	deffe404 	addi	sp,sp,-112
   10384:	2807883a 	mov	r3,r5
   10388:	dfc01a15 	stw	ra,104(sp)
   1038c:	d9c01b15 	stw	r7,108(sp)
   10390:	00a00034 	movhi	r2,32768
   10394:	10bfffc4 	addi	r2,r2,-1
   10398:	02008204 	movi	r8,520
   1039c:	d8800215 	stw	r2,8(sp)
   103a0:	d8800515 	stw	r2,20(sp)
   103a4:	d9c01b04 	addi	r7,sp,108
   103a8:	d80b883a 	mov	r5,sp
   103ac:	00bfffc4 	movi	r2,-1
   103b0:	d8c00015 	stw	r3,0(sp)
   103b4:	d8c00415 	stw	r3,16(sp)
   103b8:	da00030d 	sth	r8,12(sp)
   103bc:	d880038d 	sth	r2,14(sp)
   103c0:	00105b80 	call	105b8 <___svfprintf_internal_r>
   103c4:	d8c00017 	ldw	r3,0(sp)
   103c8:	18000005 	stb	zero,0(r3)
   103cc:	dfc01a17 	ldw	ra,104(sp)
   103d0:	dec01c04 	addi	sp,sp,112
   103d4:	f800283a 	ret

000103d8 <sprintf>:
   103d8:	deffe304 	addi	sp,sp,-116
   103dc:	2007883a 	mov	r3,r4
   103e0:	dfc01a15 	stw	ra,104(sp)
   103e4:	d9801b15 	stw	r6,108(sp)
   103e8:	d9c01c15 	stw	r7,112(sp)
   103ec:	010000f4 	movhi	r4,3
   103f0:	213af204 	addi	r4,r4,-5176
   103f4:	21000017 	ldw	r4,0(r4)
   103f8:	00a00034 	movhi	r2,32768
   103fc:	10bfffc4 	addi	r2,r2,-1
   10400:	280d883a 	mov	r6,r5
   10404:	02008204 	movi	r8,520
   10408:	d8800215 	stw	r2,8(sp)
   1040c:	d8800515 	stw	r2,20(sp)
   10410:	d9c01b04 	addi	r7,sp,108
   10414:	d80b883a 	mov	r5,sp
   10418:	00bfffc4 	movi	r2,-1
   1041c:	d8c00015 	stw	r3,0(sp)
   10420:	d8c00415 	stw	r3,16(sp)
   10424:	da00030d 	sth	r8,12(sp)
   10428:	d880038d 	sth	r2,14(sp)
   1042c:	00105b80 	call	105b8 <___svfprintf_internal_r>
   10430:	d8c00017 	ldw	r3,0(sp)
   10434:	18000005 	stb	zero,0(r3)
   10438:	dfc01a17 	ldw	ra,104(sp)
   1043c:	dec01d04 	addi	sp,sp,116
   10440:	f800283a 	ret

00010444 <strcmp>:
   10444:	2144b03a 	or	r2,r4,r5
   10448:	108000cc 	andi	r2,r2,3
   1044c:	1000171e 	bne	r2,zero,104ac <strcmp+0x68>
   10450:	20800017 	ldw	r2,0(r4)
   10454:	28c00017 	ldw	r3,0(r5)
   10458:	10c0141e 	bne	r2,r3,104ac <strcmp+0x68>
   1045c:	027fbff4 	movhi	r9,65279
   10460:	4a7fbfc4 	addi	r9,r9,-257
   10464:	0086303a 	nor	r3,zero,r2
   10468:	02202074 	movhi	r8,32897
   1046c:	1245883a 	add	r2,r2,r9
   10470:	42202004 	addi	r8,r8,-32640
   10474:	10c4703a 	and	r2,r2,r3
   10478:	1204703a 	and	r2,r2,r8
   1047c:	10000226 	beq	r2,zero,10488 <strcmp+0x44>
   10480:	00002306 	br	10510 <strcmp+0xcc>
   10484:	1000221e 	bne	r2,zero,10510 <strcmp+0xcc>
   10488:	21000104 	addi	r4,r4,4
   1048c:	20c00017 	ldw	r3,0(r4)
   10490:	29400104 	addi	r5,r5,4
   10494:	29800017 	ldw	r6,0(r5)
   10498:	1a4f883a 	add	r7,r3,r9
   1049c:	00c4303a 	nor	r2,zero,r3
   104a0:	3884703a 	and	r2,r7,r2
   104a4:	1204703a 	and	r2,r2,r8
   104a8:	19bff626 	beq	r3,r6,10484 <__alt_data_end+0xfc010484>
   104ac:	20800003 	ldbu	r2,0(r4)
   104b0:	10c03fcc 	andi	r3,r2,255
   104b4:	18c0201c 	xori	r3,r3,128
   104b8:	18ffe004 	addi	r3,r3,-128
   104bc:	18000c26 	beq	r3,zero,104f0 <strcmp+0xac>
   104c0:	29800007 	ldb	r6,0(r5)
   104c4:	19800326 	beq	r3,r6,104d4 <strcmp+0x90>
   104c8:	00001306 	br	10518 <strcmp+0xd4>
   104cc:	29800007 	ldb	r6,0(r5)
   104d0:	11800b1e 	bne	r2,r6,10500 <strcmp+0xbc>
   104d4:	21000044 	addi	r4,r4,1
   104d8:	20c00003 	ldbu	r3,0(r4)
   104dc:	29400044 	addi	r5,r5,1
   104e0:	18803fcc 	andi	r2,r3,255
   104e4:	1080201c 	xori	r2,r2,128
   104e8:	10bfe004 	addi	r2,r2,-128
   104ec:	103ff71e 	bne	r2,zero,104cc <__alt_data_end+0xfc0104cc>
   104f0:	0007883a 	mov	r3,zero
   104f4:	28800003 	ldbu	r2,0(r5)
   104f8:	1885c83a 	sub	r2,r3,r2
   104fc:	f800283a 	ret
   10500:	28800003 	ldbu	r2,0(r5)
   10504:	18c03fcc 	andi	r3,r3,255
   10508:	1885c83a 	sub	r2,r3,r2
   1050c:	f800283a 	ret
   10510:	0005883a 	mov	r2,zero
   10514:	f800283a 	ret
   10518:	10c03fcc 	andi	r3,r2,255
   1051c:	003ff506 	br	104f4 <__alt_data_end+0xfc0104f4>

00010520 <strlen>:
   10520:	208000cc 	andi	r2,r4,3
   10524:	10002026 	beq	r2,zero,105a8 <strlen+0x88>
   10528:	20800007 	ldb	r2,0(r4)
   1052c:	10002026 	beq	r2,zero,105b0 <strlen+0x90>
   10530:	2005883a 	mov	r2,r4
   10534:	00000206 	br	10540 <strlen+0x20>
   10538:	10c00007 	ldb	r3,0(r2)
   1053c:	18001826 	beq	r3,zero,105a0 <strlen+0x80>
   10540:	10800044 	addi	r2,r2,1
   10544:	10c000cc 	andi	r3,r2,3
   10548:	183ffb1e 	bne	r3,zero,10538 <__alt_data_end+0xfc010538>
   1054c:	10c00017 	ldw	r3,0(r2)
   10550:	01ffbff4 	movhi	r7,65279
   10554:	39ffbfc4 	addi	r7,r7,-257
   10558:	00ca303a 	nor	r5,zero,r3
   1055c:	01a02074 	movhi	r6,32897
   10560:	19c7883a 	add	r3,r3,r7
   10564:	31a02004 	addi	r6,r6,-32640
   10568:	1946703a 	and	r3,r3,r5
   1056c:	1986703a 	and	r3,r3,r6
   10570:	1800091e 	bne	r3,zero,10598 <strlen+0x78>
   10574:	10800104 	addi	r2,r2,4
   10578:	10c00017 	ldw	r3,0(r2)
   1057c:	19cb883a 	add	r5,r3,r7
   10580:	00c6303a 	nor	r3,zero,r3
   10584:	28c6703a 	and	r3,r5,r3
   10588:	1986703a 	and	r3,r3,r6
   1058c:	183ff926 	beq	r3,zero,10574 <__alt_data_end+0xfc010574>
   10590:	00000106 	br	10598 <strlen+0x78>
   10594:	10800044 	addi	r2,r2,1
   10598:	10c00007 	ldb	r3,0(r2)
   1059c:	183ffd1e 	bne	r3,zero,10594 <__alt_data_end+0xfc010594>
   105a0:	1105c83a 	sub	r2,r2,r4
   105a4:	f800283a 	ret
   105a8:	2005883a 	mov	r2,r4
   105ac:	003fe706 	br	1054c <__alt_data_end+0xfc01054c>
   105b0:	0005883a 	mov	r2,zero
   105b4:	f800283a 	ret

000105b8 <___svfprintf_internal_r>:
   105b8:	deffb704 	addi	sp,sp,-292
   105bc:	dfc04815 	stw	ra,288(sp)
   105c0:	ddc04615 	stw	r23,280(sp)
   105c4:	d9402d15 	stw	r5,180(sp)
   105c8:	d9003915 	stw	r4,228(sp)
   105cc:	302f883a 	mov	r23,r6
   105d0:	d9c02e15 	stw	r7,184(sp)
   105d4:	df004715 	stw	fp,284(sp)
   105d8:	dd804515 	stw	r22,276(sp)
   105dc:	dd404415 	stw	r21,272(sp)
   105e0:	dd004315 	stw	r20,268(sp)
   105e4:	dcc04215 	stw	r19,264(sp)
   105e8:	dc804115 	stw	r18,260(sp)
   105ec:	dc404015 	stw	r17,256(sp)
   105f0:	dc003f15 	stw	r16,252(sp)
   105f4:	00177bc0 	call	177bc <_localeconv_r>
   105f8:	10800017 	ldw	r2,0(r2)
   105fc:	1009883a 	mov	r4,r2
   10600:	d8803415 	stw	r2,208(sp)
   10604:	00105200 	call	10520 <strlen>
   10608:	d8c02d17 	ldw	r3,180(sp)
   1060c:	d8803815 	stw	r2,224(sp)
   10610:	1880030b 	ldhu	r2,12(r3)
   10614:	1080200c 	andi	r2,r2,128
   10618:	10000226 	beq	r2,zero,10624 <___svfprintf_internal_r+0x6c>
   1061c:	18800417 	ldw	r2,16(r3)
   10620:	1006b126 	beq	r2,zero,120e8 <___svfprintf_internal_r+0x1b30>
   10624:	dcc03917 	ldw	r19,228(sp)
   10628:	d8c00404 	addi	r3,sp,16
   1062c:	054000f4 	movhi	r21,3
   10630:	d9001e04 	addi	r4,sp,120
   10634:	ad6dfd84 	addi	r21,r21,-18442
   10638:	d8c01e15 	stw	r3,120(sp)
   1063c:	d8002015 	stw	zero,128(sp)
   10640:	d8001f15 	stw	zero,124(sp)
   10644:	d8003315 	stw	zero,204(sp)
   10648:	d8003615 	stw	zero,216(sp)
   1064c:	d8003715 	stw	zero,220(sp)
   10650:	1811883a 	mov	r8,r3
   10654:	d8003a15 	stw	zero,232(sp)
   10658:	d8003b15 	stw	zero,236(sp)
   1065c:	d8002f15 	stw	zero,188(sp)
   10660:	d9002815 	stw	r4,160(sp)
   10664:	b8800007 	ldb	r2,0(r23)
   10668:	10027726 	beq	r2,zero,11048 <___svfprintf_internal_r+0xa90>
   1066c:	00c00944 	movi	r3,37
   10670:	b823883a 	mov	r17,r23
   10674:	10c0021e 	bne	r2,r3,10680 <___svfprintf_internal_r+0xc8>
   10678:	00001406 	br	106cc <___svfprintf_internal_r+0x114>
   1067c:	10c00326 	beq	r2,r3,1068c <___svfprintf_internal_r+0xd4>
   10680:	8c400044 	addi	r17,r17,1
   10684:	88800007 	ldb	r2,0(r17)
   10688:	103ffc1e 	bne	r2,zero,1067c <__alt_data_end+0xfc01067c>
   1068c:	8de1c83a 	sub	r16,r17,r23
   10690:	80000e26 	beq	r16,zero,106cc <___svfprintf_internal_r+0x114>
   10694:	d8c02017 	ldw	r3,128(sp)
   10698:	d8801f17 	ldw	r2,124(sp)
   1069c:	45c00015 	stw	r23,0(r8)
   106a0:	1c07883a 	add	r3,r3,r16
   106a4:	10800044 	addi	r2,r2,1
   106a8:	d8c02015 	stw	r3,128(sp)
   106ac:	44000115 	stw	r16,4(r8)
   106b0:	d8801f15 	stw	r2,124(sp)
   106b4:	00c001c4 	movi	r3,7
   106b8:	18809916 	blt	r3,r2,10920 <___svfprintf_internal_r+0x368>
   106bc:	42000204 	addi	r8,r8,8
   106c0:	d9402f17 	ldw	r5,188(sp)
   106c4:	2c0b883a 	add	r5,r5,r16
   106c8:	d9402f15 	stw	r5,188(sp)
   106cc:	88800007 	ldb	r2,0(r17)
   106d0:	10009a26 	beq	r2,zero,1093c <___svfprintf_internal_r+0x384>
   106d4:	8dc00044 	addi	r23,r17,1
   106d8:	8c400047 	ldb	r17,1(r17)
   106dc:	0021883a 	mov	r16,zero
   106e0:	00bfffc4 	movi	r2,-1
   106e4:	0025883a 	mov	r18,zero
   106e8:	dc002905 	stb	r16,164(sp)
   106ec:	d8002785 	stb	zero,158(sp)
   106f0:	d8002b05 	stb	zero,172(sp)
   106f4:	d8802a15 	stw	r2,168(sp)
   106f8:	d8003115 	stw	zero,196(sp)
   106fc:	05001604 	movi	r20,88
   10700:	05800244 	movi	r22,9
   10704:	4039883a 	mov	fp,r8
   10708:	9021883a 	mov	r16,r18
   1070c:	bdc00044 	addi	r23,r23,1
   10710:	88bff804 	addi	r2,r17,-32
   10714:	a0831e36 	bltu	r20,r2,11390 <___svfprintf_internal_r+0xdd8>
   10718:	100490ba 	slli	r2,r2,2
   1071c:	00c00074 	movhi	r3,1
   10720:	18c1cc04 	addi	r3,r3,1840
   10724:	10c5883a 	add	r2,r2,r3
   10728:	10800017 	ldw	r2,0(r2)
   1072c:	1000683a 	jmp	r2
   10730:	000112d8 	cmpnei	zero,zero,1099
   10734:	00011390 	cmplti	zero,zero,1102
   10738:	00011390 	cmplti	zero,zero,1102
   1073c:	000112cc 	andi	zero,zero,1099
   10740:	00011390 	cmplti	zero,zero,1102
   10744:	00011390 	cmplti	zero,zero,1102
   10748:	00011390 	cmplti	zero,zero,1102
   1074c:	00011390 	cmplti	zero,zero,1102
   10750:	00011390 	cmplti	zero,zero,1102
   10754:	00011390 	cmplti	zero,zero,1102
   10758:	00010998 	cmpnei	zero,zero,1062
   1075c:	000111dc 	xori	zero,zero,1095
   10760:	00011390 	cmplti	zero,zero,1102
   10764:	000108a4 	muli	zero,zero,1058
   10768:	000109bc 	xorhi	zero,zero,1062
   1076c:	00011390 	cmplti	zero,zero,1102
   10770:	00010a48 	cmpgei	zero,zero,1065
   10774:	00010a0c 	andi	zero,zero,1064
   10778:	00010a0c 	andi	zero,zero,1064
   1077c:	00010a0c 	andi	zero,zero,1064
   10780:	00010a0c 	andi	zero,zero,1064
   10784:	00010a0c 	andi	zero,zero,1064
   10788:	00010a0c 	andi	zero,zero,1064
   1078c:	00010a0c 	andi	zero,zero,1064
   10790:	00010a0c 	andi	zero,zero,1064
   10794:	00010a0c 	andi	zero,zero,1064
   10798:	00011390 	cmplti	zero,zero,1102
   1079c:	00011390 	cmplti	zero,zero,1102
   107a0:	00011390 	cmplti	zero,zero,1102
   107a4:	00011390 	cmplti	zero,zero,1102
   107a8:	00011390 	cmplti	zero,zero,1102
   107ac:	00011390 	cmplti	zero,zero,1102
   107b0:	00011390 	cmplti	zero,zero,1102
   107b4:	00011390 	cmplti	zero,zero,1102
   107b8:	00011390 	cmplti	zero,zero,1102
   107bc:	00011390 	cmplti	zero,zero,1102
   107c0:	00010b0c 	andi	zero,zero,1068
   107c4:	00010a54 	movui	zero,1065
   107c8:	00011390 	cmplti	zero,zero,1102
   107cc:	00010a54 	movui	zero,1065
   107d0:	00011390 	cmplti	zero,zero,1102
   107d4:	00011390 	cmplti	zero,zero,1102
   107d8:	00011390 	cmplti	zero,zero,1102
   107dc:	00011390 	cmplti	zero,zero,1102
   107e0:	00010b00 	call	10b0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x11c>
   107e4:	00011390 	cmplti	zero,zero,1102
   107e8:	00011390 	cmplti	zero,zero,1102
   107ec:	00010bd4 	movui	zero,1071
   107f0:	00011390 	cmplti	zero,zero,1102
   107f4:	00011390 	cmplti	zero,zero,1102
   107f8:	00011390 	cmplti	zero,zero,1102
   107fc:	00011390 	cmplti	zero,zero,1102
   10800:	00011390 	cmplti	zero,zero,1102
   10804:	00011050 	cmplti	zero,zero,1089
   10808:	00011390 	cmplti	zero,zero,1102
   1080c:	00011390 	cmplti	zero,zero,1102
   10810:	000110bc 	xorhi	zero,zero,1090
   10814:	00011390 	cmplti	zero,zero,1102
   10818:	00011390 	cmplti	zero,zero,1102
   1081c:	00011390 	cmplti	zero,zero,1102
   10820:	00011390 	cmplti	zero,zero,1102
   10824:	00011390 	cmplti	zero,zero,1102
   10828:	00011390 	cmplti	zero,zero,1102
   1082c:	00011390 	cmplti	zero,zero,1102
   10830:	00011390 	cmplti	zero,zero,1102
   10834:	00011390 	cmplti	zero,zero,1102
   10838:	00011390 	cmplti	zero,zero,1102
   1083c:	00011178 	rdprs	zero,zero,1093
   10840:	000112f8 	rdprs	zero,zero,1099
   10844:	00010a54 	movui	zero,1065
   10848:	00010a54 	movui	zero,1065
   1084c:	00010a54 	movui	zero,1065
   10850:	0001136c 	andhi	zero,zero,1101
   10854:	000112f8 	rdprs	zero,zero,1099
   10858:	00011390 	cmplti	zero,zero,1102
   1085c:	00011390 	cmplti	zero,zero,1102
   10860:	00011318 	cmpnei	zero,zero,1100
   10864:	00011390 	cmplti	zero,zero,1102
   10868:	0001132c 	andhi	zero,zero,1100
   1086c:	000111bc 	xorhi	zero,zero,1094
   10870:	000108b0 	cmpltui	zero,zero,1058
   10874:	000111f4 	movhi	zero,1095
   10878:	00011390 	cmplti	zero,zero,1102
   1087c:	00011200 	call	1120 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18c>
   10880:	00011390 	cmplti	zero,zero,1102
   10884:	00011264 	muli	zero,zero,1097
   10888:	00011390 	cmplti	zero,zero,1102
   1088c:	00011390 	cmplti	zero,zero,1102
   10890:	00011284 	movi	zero,1098
   10894:	d8c03117 	ldw	r3,196(sp)
   10898:	d8802e15 	stw	r2,184(sp)
   1089c:	00c7c83a 	sub	r3,zero,r3
   108a0:	d8c03115 	stw	r3,196(sp)
   108a4:	84000114 	ori	r16,r16,4
   108a8:	bc400007 	ldb	r17,0(r23)
   108ac:	003f9706 	br	1070c <__alt_data_end+0xfc01070c>
   108b0:	00800c04 	movi	r2,48
   108b4:	d8802705 	stb	r2,156(sp)
   108b8:	00801e04 	movi	r2,120
   108bc:	d8802745 	stb	r2,157(sp)
   108c0:	d9002a17 	ldw	r4,168(sp)
   108c4:	d8802e17 	ldw	r2,184(sp)
   108c8:	d8002785 	stb	zero,158(sp)
   108cc:	e011883a 	mov	r8,fp
   108d0:	10c00104 	addi	r3,r2,4
   108d4:	15000017 	ldw	r20,0(r2)
   108d8:	002d883a 	mov	r22,zero
   108dc:	80800094 	ori	r2,r16,2
   108e0:	2002b616 	blt	r4,zero,113bc <___svfprintf_internal_r+0xe04>
   108e4:	00bfdfc4 	movi	r2,-129
   108e8:	80a4703a 	and	r18,r16,r2
   108ec:	d8c02e15 	stw	r3,184(sp)
   108f0:	94800094 	ori	r18,r18,2
   108f4:	a002a01e 	bne	r20,zero,11378 <___svfprintf_internal_r+0xdc0>
   108f8:	014000f4 	movhi	r5,3
   108fc:	296df604 	addi	r5,r5,-18472
   10900:	d9403a15 	stw	r5,232(sp)
   10904:	04401e04 	movi	r17,120
   10908:	d8c02a17 	ldw	r3,168(sp)
   1090c:	0039883a 	mov	fp,zero
   10910:	1801e626 	beq	r3,zero,110ac <___svfprintf_internal_r+0xaf4>
   10914:	0029883a 	mov	r20,zero
   10918:	002d883a 	mov	r22,zero
   1091c:	00020506 	br	11134 <___svfprintf_internal_r+0xb7c>
   10920:	d9402d17 	ldw	r5,180(sp)
   10924:	d9801e04 	addi	r6,sp,120
   10928:	9809883a 	mov	r4,r19
   1092c:	001951c0 	call	1951c <__ssprint_r>
   10930:	1000081e 	bne	r2,zero,10954 <___svfprintf_internal_r+0x39c>
   10934:	da000404 	addi	r8,sp,16
   10938:	003f6106 	br	106c0 <__alt_data_end+0xfc0106c0>
   1093c:	d8802017 	ldw	r2,128(sp)
   10940:	10000426 	beq	r2,zero,10954 <___svfprintf_internal_r+0x39c>
   10944:	d9402d17 	ldw	r5,180(sp)
   10948:	d9003917 	ldw	r4,228(sp)
   1094c:	d9801e04 	addi	r6,sp,120
   10950:	001951c0 	call	1951c <__ssprint_r>
   10954:	d8802d17 	ldw	r2,180(sp)
   10958:	10c0030b 	ldhu	r3,12(r2)
   1095c:	d8802f17 	ldw	r2,188(sp)
   10960:	18c0100c 	andi	r3,r3,64
   10964:	1806251e 	bne	r3,zero,121fc <___svfprintf_internal_r+0x1c44>
   10968:	dfc04817 	ldw	ra,288(sp)
   1096c:	df004717 	ldw	fp,284(sp)
   10970:	ddc04617 	ldw	r23,280(sp)
   10974:	dd804517 	ldw	r22,276(sp)
   10978:	dd404417 	ldw	r21,272(sp)
   1097c:	dd004317 	ldw	r20,268(sp)
   10980:	dcc04217 	ldw	r19,264(sp)
   10984:	dc804117 	ldw	r18,260(sp)
   10988:	dc404017 	ldw	r17,256(sp)
   1098c:	dc003f17 	ldw	r16,252(sp)
   10990:	dec04904 	addi	sp,sp,292
   10994:	f800283a 	ret
   10998:	d9002e17 	ldw	r4,184(sp)
   1099c:	d9402e17 	ldw	r5,184(sp)
   109a0:	21000017 	ldw	r4,0(r4)
   109a4:	28800104 	addi	r2,r5,4
   109a8:	d9003115 	stw	r4,196(sp)
   109ac:	203fb916 	blt	r4,zero,10894 <__alt_data_end+0xfc010894>
   109b0:	d8802e15 	stw	r2,184(sp)
   109b4:	bc400007 	ldb	r17,0(r23)
   109b8:	003f5406 	br	1070c <__alt_data_end+0xfc01070c>
   109bc:	bc400007 	ldb	r17,0(r23)
   109c0:	01000a84 	movi	r4,42
   109c4:	b8c00044 	addi	r3,r23,1
   109c8:	89076926 	beq	r17,r4,12770 <___svfprintf_internal_r+0x21b8>
   109cc:	8cbff404 	addi	r18,r17,-48
   109d0:	b486b936 	bltu	r22,r18,124b8 <___svfprintf_internal_r+0x1f00>
   109d4:	0009883a 	mov	r4,zero
   109d8:	1823883a 	mov	r17,r3
   109dc:	01400284 	movi	r5,10
   109e0:	000d8b80 	call	d8b8 <__mulsi3>
   109e4:	88c00007 	ldb	r3,0(r17)
   109e8:	1489883a 	add	r4,r2,r18
   109ec:	8dc00044 	addi	r23,r17,1
   109f0:	1cbff404 	addi	r18,r3,-48
   109f4:	b823883a 	mov	r17,r23
   109f8:	b4bff82e 	bgeu	r22,r18,109dc <__alt_data_end+0xfc0109dc>
   109fc:	1823883a 	mov	r17,r3
   10a00:	20060416 	blt	r4,zero,12214 <___svfprintf_internal_r+0x1c5c>
   10a04:	d9002a15 	stw	r4,168(sp)
   10a08:	003f4106 	br	10710 <__alt_data_end+0xfc010710>
   10a0c:	8cbff404 	addi	r18,r17,-48
   10a10:	d8003115 	stw	zero,196(sp)
   10a14:	0009883a 	mov	r4,zero
   10a18:	b823883a 	mov	r17,r23
   10a1c:	01400284 	movi	r5,10
   10a20:	000d8b80 	call	d8b8 <__mulsi3>
   10a24:	88c00007 	ldb	r3,0(r17)
   10a28:	9089883a 	add	r4,r18,r2
   10a2c:	bdc00044 	addi	r23,r23,1
   10a30:	1cbff404 	addi	r18,r3,-48
   10a34:	b823883a 	mov	r17,r23
   10a38:	b4bff82e 	bgeu	r22,r18,10a1c <__alt_data_end+0xfc010a1c>
   10a3c:	1823883a 	mov	r17,r3
   10a40:	d9003115 	stw	r4,196(sp)
   10a44:	003f3206 	br	10710 <__alt_data_end+0xfc010710>
   10a48:	84002014 	ori	r16,r16,128
   10a4c:	bc400007 	ldb	r17,0(r23)
   10a50:	003f2e06 	br	1070c <__alt_data_end+0xfc01070c>
   10a54:	8025883a 	mov	r18,r16
   10a58:	dc002903 	ldbu	r16,164(sp)
   10a5c:	e011883a 	mov	r8,fp
   10a60:	84003fcc 	andi	r16,r16,255
   10a64:	8007721e 	bne	r16,zero,12830 <___svfprintf_internal_r+0x2278>
   10a68:	9080020c 	andi	r2,r18,8
   10a6c:	1004a526 	beq	r2,zero,11d04 <___svfprintf_internal_r+0x174c>
   10a70:	d9002e17 	ldw	r4,184(sp)
   10a74:	d9402e17 	ldw	r5,184(sp)
   10a78:	d8802e17 	ldw	r2,184(sp)
   10a7c:	21000017 	ldw	r4,0(r4)
   10a80:	29400117 	ldw	r5,4(r5)
   10a84:	10800204 	addi	r2,r2,8
   10a88:	d9003615 	stw	r4,216(sp)
   10a8c:	d9403715 	stw	r5,220(sp)
   10a90:	d8802e15 	stw	r2,184(sp)
   10a94:	d9003617 	ldw	r4,216(sp)
   10a98:	d9403717 	ldw	r5,220(sp)
   10a9c:	da003e15 	stw	r8,248(sp)
   10aa0:	04000044 	movi	r16,1
   10aa4:	001936c0 	call	1936c <__fpclassifyd>
   10aa8:	da003e17 	ldw	r8,248(sp)
   10aac:	1404731e 	bne	r2,r16,11c7c <___svfprintf_internal_r+0x16c4>
   10ab0:	d9003617 	ldw	r4,216(sp)
   10ab4:	d9403717 	ldw	r5,220(sp)
   10ab8:	000d883a 	mov	r6,zero
   10abc:	000f883a 	mov	r7,zero
   10ac0:	001ea700 	call	1ea70 <__ledf2>
   10ac4:	da003e17 	ldw	r8,248(sp)
   10ac8:	10061b16 	blt	r2,zero,12338 <___svfprintf_internal_r+0x1d80>
   10acc:	df002783 	ldbu	fp,158(sp)
   10ad0:	008011c4 	movi	r2,71
   10ad4:	1445810e 	bge	r2,r17,120dc <___svfprintf_internal_r+0x1b24>
   10ad8:	040000f4 	movhi	r16,3
   10adc:	842dee04 	addi	r16,r16,-18504
   10ae0:	00c000c4 	movi	r3,3
   10ae4:	00bfdfc4 	movi	r2,-129
   10ae8:	d8c02915 	stw	r3,164(sp)
   10aec:	90a4703a 	and	r18,r18,r2
   10af0:	d8c02b15 	stw	r3,172(sp)
   10af4:	d8002a15 	stw	zero,168(sp)
   10af8:	d8003215 	stw	zero,200(sp)
   10afc:	00006c06 	br	10cb0 <___svfprintf_internal_r+0x6f8>
   10b00:	84000214 	ori	r16,r16,8
   10b04:	bc400007 	ldb	r17,0(r23)
   10b08:	003f0006 	br	1070c <__alt_data_end+0xfc01070c>
   10b0c:	8025883a 	mov	r18,r16
   10b10:	dc002903 	ldbu	r16,164(sp)
   10b14:	e011883a 	mov	r8,fp
   10b18:	84003fcc 	andi	r16,r16,255
   10b1c:	80073f1e 	bne	r16,zero,1281c <___svfprintf_internal_r+0x2264>
   10b20:	94800414 	ori	r18,r18,16
   10b24:	9080080c 	andi	r2,r18,32
   10b28:	1003bb26 	beq	r2,zero,11a18 <___svfprintf_internal_r+0x1460>
   10b2c:	d9002e17 	ldw	r4,184(sp)
   10b30:	20800117 	ldw	r2,4(r4)
   10b34:	25000017 	ldw	r20,0(r4)
   10b38:	21000204 	addi	r4,r4,8
   10b3c:	d9002e15 	stw	r4,184(sp)
   10b40:	102d883a 	mov	r22,r2
   10b44:	1003bd16 	blt	r2,zero,11a3c <___svfprintf_internal_r+0x1484>
   10b48:	d9002a17 	ldw	r4,168(sp)
   10b4c:	df002783 	ldbu	fp,158(sp)
   10b50:	2003d016 	blt	r4,zero,11a94 <___svfprintf_internal_r+0x14dc>
   10b54:	00ffdfc4 	movi	r3,-129
   10b58:	a584b03a 	or	r2,r20,r22
   10b5c:	90e4703a 	and	r18,r18,r3
   10b60:	10015026 	beq	r2,zero,110a4 <___svfprintf_internal_r+0xaec>
   10b64:	b0037026 	beq	r22,zero,11928 <___svfprintf_internal_r+0x1370>
   10b68:	dc402915 	stw	r17,164(sp)
   10b6c:	dc001e04 	addi	r16,sp,120
   10b70:	b023883a 	mov	r17,r22
   10b74:	402d883a 	mov	r22,r8
   10b78:	a009883a 	mov	r4,r20
   10b7c:	880b883a 	mov	r5,r17
   10b80:	01800284 	movi	r6,10
   10b84:	000f883a 	mov	r7,zero
   10b88:	001d0cc0 	call	1d0cc <__umoddi3>
   10b8c:	10800c04 	addi	r2,r2,48
   10b90:	843fffc4 	addi	r16,r16,-1
   10b94:	a009883a 	mov	r4,r20
   10b98:	880b883a 	mov	r5,r17
   10b9c:	80800005 	stb	r2,0(r16)
   10ba0:	01800284 	movi	r6,10
   10ba4:	000f883a 	mov	r7,zero
   10ba8:	001cad00 	call	1cad0 <__udivdi3>
   10bac:	1029883a 	mov	r20,r2
   10bb0:	10c4b03a 	or	r2,r2,r3
   10bb4:	1823883a 	mov	r17,r3
   10bb8:	103fef1e 	bne	r2,zero,10b78 <__alt_data_end+0xfc010b78>
   10bbc:	d8c02817 	ldw	r3,160(sp)
   10bc0:	dc402917 	ldw	r17,164(sp)
   10bc4:	b011883a 	mov	r8,r22
   10bc8:	1c07c83a 	sub	r3,r3,r16
   10bcc:	d8c02b15 	stw	r3,172(sp)
   10bd0:	00003106 	br	10c98 <___svfprintf_internal_r+0x6e0>
   10bd4:	8025883a 	mov	r18,r16
   10bd8:	dc002903 	ldbu	r16,164(sp)
   10bdc:	e011883a 	mov	r8,fp
   10be0:	84003fcc 	andi	r16,r16,255
   10be4:	80070a1e 	bne	r16,zero,12810 <___svfprintf_internal_r+0x2258>
   10be8:	94800414 	ori	r18,r18,16
   10bec:	9080080c 	andi	r2,r18,32
   10bf0:	1002f626 	beq	r2,zero,117cc <___svfprintf_internal_r+0x1214>
   10bf4:	d9002e17 	ldw	r4,184(sp)
   10bf8:	d9402a17 	ldw	r5,168(sp)
   10bfc:	d8002785 	stb	zero,158(sp)
   10c00:	20800204 	addi	r2,r4,8
   10c04:	25000017 	ldw	r20,0(r4)
   10c08:	25800117 	ldw	r22,4(r4)
   10c0c:	28043716 	blt	r5,zero,11cec <___svfprintf_internal_r+0x1734>
   10c10:	013fdfc4 	movi	r4,-129
   10c14:	a586b03a 	or	r3,r20,r22
   10c18:	d8802e15 	stw	r2,184(sp)
   10c1c:	9124703a 	and	r18,r18,r4
   10c20:	1802f71e 	bne	r3,zero,11800 <___svfprintf_internal_r+0x1248>
   10c24:	d9402a17 	ldw	r5,168(sp)
   10c28:	0039883a 	mov	fp,zero
   10c2c:	2806df26 	beq	r5,zero,127ac <___svfprintf_internal_r+0x21f4>
   10c30:	0029883a 	mov	r20,zero
   10c34:	002d883a 	mov	r22,zero
   10c38:	dc001e04 	addi	r16,sp,120
   10c3c:	a006d0fa 	srli	r3,r20,3
   10c40:	b008977a 	slli	r4,r22,29
   10c44:	b02cd0fa 	srli	r22,r22,3
   10c48:	a50001cc 	andi	r20,r20,7
   10c4c:	a0800c04 	addi	r2,r20,48
   10c50:	843fffc4 	addi	r16,r16,-1
   10c54:	20e8b03a 	or	r20,r4,r3
   10c58:	80800005 	stb	r2,0(r16)
   10c5c:	a586b03a 	or	r3,r20,r22
   10c60:	183ff61e 	bne	r3,zero,10c3c <__alt_data_end+0xfc010c3c>
   10c64:	90c0004c 	andi	r3,r18,1
   10c68:	18013f26 	beq	r3,zero,11168 <___svfprintf_internal_r+0xbb0>
   10c6c:	10803fcc 	andi	r2,r2,255
   10c70:	1080201c 	xori	r2,r2,128
   10c74:	10bfe004 	addi	r2,r2,-128
   10c78:	00c00c04 	movi	r3,48
   10c7c:	10c13a26 	beq	r2,r3,11168 <___svfprintf_internal_r+0xbb0>
   10c80:	80ffffc5 	stb	r3,-1(r16)
   10c84:	d8c02817 	ldw	r3,160(sp)
   10c88:	80bfffc4 	addi	r2,r16,-1
   10c8c:	1021883a 	mov	r16,r2
   10c90:	1887c83a 	sub	r3,r3,r2
   10c94:	d8c02b15 	stw	r3,172(sp)
   10c98:	d8802b17 	ldw	r2,172(sp)
   10c9c:	d9002a17 	ldw	r4,168(sp)
   10ca0:	1100010e 	bge	r2,r4,10ca8 <___svfprintf_internal_r+0x6f0>
   10ca4:	2005883a 	mov	r2,r4
   10ca8:	d8802915 	stw	r2,164(sp)
   10cac:	d8003215 	stw	zero,200(sp)
   10cb0:	e7003fcc 	andi	fp,fp,255
   10cb4:	e700201c 	xori	fp,fp,128
   10cb8:	e73fe004 	addi	fp,fp,-128
   10cbc:	e0000326 	beq	fp,zero,10ccc <___svfprintf_internal_r+0x714>
   10cc0:	d8c02917 	ldw	r3,164(sp)
   10cc4:	18c00044 	addi	r3,r3,1
   10cc8:	d8c02915 	stw	r3,164(sp)
   10ccc:	90c0008c 	andi	r3,r18,2
   10cd0:	d8c02c15 	stw	r3,176(sp)
   10cd4:	18000326 	beq	r3,zero,10ce4 <___svfprintf_internal_r+0x72c>
   10cd8:	d8c02917 	ldw	r3,164(sp)
   10cdc:	18c00084 	addi	r3,r3,2
   10ce0:	d8c02915 	stw	r3,164(sp)
   10ce4:	90c0210c 	andi	r3,r18,132
   10ce8:	d8c03015 	stw	r3,192(sp)
   10cec:	1801c31e 	bne	r3,zero,113fc <___svfprintf_internal_r+0xe44>
   10cf0:	d9003117 	ldw	r4,196(sp)
   10cf4:	d8c02917 	ldw	r3,164(sp)
   10cf8:	20e9c83a 	sub	r20,r4,r3
   10cfc:	0501bf0e 	bge	zero,r20,113fc <___svfprintf_internal_r+0xe44>
   10d00:	02400404 	movi	r9,16
   10d04:	d8c02017 	ldw	r3,128(sp)
   10d08:	d8801f17 	ldw	r2,124(sp)
   10d0c:	4d053d0e 	bge	r9,r20,12204 <___svfprintf_internal_r+0x1c4c>
   10d10:	014000f4 	movhi	r5,3
   10d14:	296e0184 	addi	r5,r5,-18426
   10d18:	dc403c15 	stw	r17,240(sp)
   10d1c:	d9403515 	stw	r5,212(sp)
   10d20:	a023883a 	mov	r17,r20
   10d24:	482d883a 	mov	r22,r9
   10d28:	9029883a 	mov	r20,r18
   10d2c:	070001c4 	movi	fp,7
   10d30:	8025883a 	mov	r18,r16
   10d34:	dc002d17 	ldw	r16,180(sp)
   10d38:	00000306 	br	10d48 <___svfprintf_internal_r+0x790>
   10d3c:	8c7ffc04 	addi	r17,r17,-16
   10d40:	42000204 	addi	r8,r8,8
   10d44:	b440130e 	bge	r22,r17,10d94 <___svfprintf_internal_r+0x7dc>
   10d48:	010000f4 	movhi	r4,3
   10d4c:	18c00404 	addi	r3,r3,16
   10d50:	10800044 	addi	r2,r2,1
   10d54:	212e0184 	addi	r4,r4,-18426
   10d58:	41000015 	stw	r4,0(r8)
   10d5c:	45800115 	stw	r22,4(r8)
   10d60:	d8c02015 	stw	r3,128(sp)
   10d64:	d8801f15 	stw	r2,124(sp)
   10d68:	e0bff40e 	bge	fp,r2,10d3c <__alt_data_end+0xfc010d3c>
   10d6c:	d9801e04 	addi	r6,sp,120
   10d70:	800b883a 	mov	r5,r16
   10d74:	9809883a 	mov	r4,r19
   10d78:	001951c0 	call	1951c <__ssprint_r>
   10d7c:	103ef51e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   10d80:	8c7ffc04 	addi	r17,r17,-16
   10d84:	d8c02017 	ldw	r3,128(sp)
   10d88:	d8801f17 	ldw	r2,124(sp)
   10d8c:	da000404 	addi	r8,sp,16
   10d90:	b47fed16 	blt	r22,r17,10d48 <__alt_data_end+0xfc010d48>
   10d94:	9021883a 	mov	r16,r18
   10d98:	a025883a 	mov	r18,r20
   10d9c:	8829883a 	mov	r20,r17
   10da0:	dc403c17 	ldw	r17,240(sp)
   10da4:	d9403517 	ldw	r5,212(sp)
   10da8:	a0c7883a 	add	r3,r20,r3
   10dac:	10800044 	addi	r2,r2,1
   10db0:	41400015 	stw	r5,0(r8)
   10db4:	45000115 	stw	r20,4(r8)
   10db8:	d8c02015 	stw	r3,128(sp)
   10dbc:	d8801f15 	stw	r2,124(sp)
   10dc0:	010001c4 	movi	r4,7
   10dc4:	2082c116 	blt	r4,r2,118cc <___svfprintf_internal_r+0x1314>
   10dc8:	df002787 	ldb	fp,158(sp)
   10dcc:	42000204 	addi	r8,r8,8
   10dd0:	e0000c26 	beq	fp,zero,10e04 <___svfprintf_internal_r+0x84c>
   10dd4:	d8801f17 	ldw	r2,124(sp)
   10dd8:	d9002784 	addi	r4,sp,158
   10ddc:	18c00044 	addi	r3,r3,1
   10de0:	10800044 	addi	r2,r2,1
   10de4:	41000015 	stw	r4,0(r8)
   10de8:	01000044 	movi	r4,1
   10dec:	41000115 	stw	r4,4(r8)
   10df0:	d8c02015 	stw	r3,128(sp)
   10df4:	d8801f15 	stw	r2,124(sp)
   10df8:	010001c4 	movi	r4,7
   10dfc:	20825a16 	blt	r4,r2,11768 <___svfprintf_internal_r+0x11b0>
   10e00:	42000204 	addi	r8,r8,8
   10e04:	d8802c17 	ldw	r2,176(sp)
   10e08:	10000c26 	beq	r2,zero,10e3c <___svfprintf_internal_r+0x884>
   10e0c:	d8801f17 	ldw	r2,124(sp)
   10e10:	d9002704 	addi	r4,sp,156
   10e14:	18c00084 	addi	r3,r3,2
   10e18:	10800044 	addi	r2,r2,1
   10e1c:	41000015 	stw	r4,0(r8)
   10e20:	01000084 	movi	r4,2
   10e24:	41000115 	stw	r4,4(r8)
   10e28:	d8c02015 	stw	r3,128(sp)
   10e2c:	d8801f15 	stw	r2,124(sp)
   10e30:	010001c4 	movi	r4,7
   10e34:	20825416 	blt	r4,r2,11788 <___svfprintf_internal_r+0x11d0>
   10e38:	42000204 	addi	r8,r8,8
   10e3c:	d9003017 	ldw	r4,192(sp)
   10e40:	00802004 	movi	r2,128
   10e44:	2081b926 	beq	r4,r2,1152c <___svfprintf_internal_r+0xf74>
   10e48:	d9402a17 	ldw	r5,168(sp)
   10e4c:	d8802b17 	ldw	r2,172(sp)
   10e50:	28adc83a 	sub	r22,r5,r2
   10e54:	05802f0e 	bge	zero,r22,10f14 <___svfprintf_internal_r+0x95c>
   10e58:	07000404 	movi	fp,16
   10e5c:	d8801f17 	ldw	r2,124(sp)
   10e60:	e583e20e 	bge	fp,r22,11dec <___svfprintf_internal_r+0x1834>
   10e64:	014000f4 	movhi	r5,3
   10e68:	296dfd84 	addi	r5,r5,-18442
   10e6c:	dc402a15 	stw	r17,168(sp)
   10e70:	d9402c15 	stw	r5,176(sp)
   10e74:	b023883a 	mov	r17,r22
   10e78:	050001c4 	movi	r20,7
   10e7c:	902d883a 	mov	r22,r18
   10e80:	8025883a 	mov	r18,r16
   10e84:	dc002d17 	ldw	r16,180(sp)
   10e88:	00000306 	br	10e98 <___svfprintf_internal_r+0x8e0>
   10e8c:	8c7ffc04 	addi	r17,r17,-16
   10e90:	42000204 	addi	r8,r8,8
   10e94:	e440110e 	bge	fp,r17,10edc <___svfprintf_internal_r+0x924>
   10e98:	18c00404 	addi	r3,r3,16
   10e9c:	10800044 	addi	r2,r2,1
   10ea0:	45400015 	stw	r21,0(r8)
   10ea4:	47000115 	stw	fp,4(r8)
   10ea8:	d8c02015 	stw	r3,128(sp)
   10eac:	d8801f15 	stw	r2,124(sp)
   10eb0:	a0bff60e 	bge	r20,r2,10e8c <__alt_data_end+0xfc010e8c>
   10eb4:	d9801e04 	addi	r6,sp,120
   10eb8:	800b883a 	mov	r5,r16
   10ebc:	9809883a 	mov	r4,r19
   10ec0:	001951c0 	call	1951c <__ssprint_r>
   10ec4:	103ea31e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   10ec8:	8c7ffc04 	addi	r17,r17,-16
   10ecc:	d8c02017 	ldw	r3,128(sp)
   10ed0:	d8801f17 	ldw	r2,124(sp)
   10ed4:	da000404 	addi	r8,sp,16
   10ed8:	e47fef16 	blt	fp,r17,10e98 <__alt_data_end+0xfc010e98>
   10edc:	9021883a 	mov	r16,r18
   10ee0:	b025883a 	mov	r18,r22
   10ee4:	882d883a 	mov	r22,r17
   10ee8:	dc402a17 	ldw	r17,168(sp)
   10eec:	d9002c17 	ldw	r4,176(sp)
   10ef0:	1d87883a 	add	r3,r3,r22
   10ef4:	10800044 	addi	r2,r2,1
   10ef8:	41000015 	stw	r4,0(r8)
   10efc:	45800115 	stw	r22,4(r8)
   10f00:	d8c02015 	stw	r3,128(sp)
   10f04:	d8801f15 	stw	r2,124(sp)
   10f08:	010001c4 	movi	r4,7
   10f0c:	20820e16 	blt	r4,r2,11748 <___svfprintf_internal_r+0x1190>
   10f10:	42000204 	addi	r8,r8,8
   10f14:	9080400c 	andi	r2,r18,256
   10f18:	10013a1e 	bne	r2,zero,11404 <___svfprintf_internal_r+0xe4c>
   10f1c:	d9402b17 	ldw	r5,172(sp)
   10f20:	d8801f17 	ldw	r2,124(sp)
   10f24:	44000015 	stw	r16,0(r8)
   10f28:	1947883a 	add	r3,r3,r5
   10f2c:	10800044 	addi	r2,r2,1
   10f30:	41400115 	stw	r5,4(r8)
   10f34:	d8c02015 	stw	r3,128(sp)
   10f38:	d8801f15 	stw	r2,124(sp)
   10f3c:	010001c4 	movi	r4,7
   10f40:	2081f316 	blt	r4,r2,11710 <___svfprintf_internal_r+0x1158>
   10f44:	42000204 	addi	r8,r8,8
   10f48:	9480010c 	andi	r18,r18,4
   10f4c:	90003226 	beq	r18,zero,11018 <___svfprintf_internal_r+0xa60>
   10f50:	d9403117 	ldw	r5,196(sp)
   10f54:	d8802917 	ldw	r2,164(sp)
   10f58:	28a1c83a 	sub	r16,r5,r2
   10f5c:	04002e0e 	bge	zero,r16,11018 <___svfprintf_internal_r+0xa60>
   10f60:	04400404 	movi	r17,16
   10f64:	d8801f17 	ldw	r2,124(sp)
   10f68:	8c04db0e 	bge	r17,r16,122d8 <___svfprintf_internal_r+0x1d20>
   10f6c:	014000f4 	movhi	r5,3
   10f70:	296e0184 	addi	r5,r5,-18426
   10f74:	d9403515 	stw	r5,212(sp)
   10f78:	048001c4 	movi	r18,7
   10f7c:	dd002d17 	ldw	r20,180(sp)
   10f80:	00000306 	br	10f90 <___svfprintf_internal_r+0x9d8>
   10f84:	843ffc04 	addi	r16,r16,-16
   10f88:	42000204 	addi	r8,r8,8
   10f8c:	8c00130e 	bge	r17,r16,10fdc <___svfprintf_internal_r+0xa24>
   10f90:	010000f4 	movhi	r4,3
   10f94:	18c00404 	addi	r3,r3,16
   10f98:	10800044 	addi	r2,r2,1
   10f9c:	212e0184 	addi	r4,r4,-18426
   10fa0:	41000015 	stw	r4,0(r8)
   10fa4:	44400115 	stw	r17,4(r8)
   10fa8:	d8c02015 	stw	r3,128(sp)
   10fac:	d8801f15 	stw	r2,124(sp)
   10fb0:	90bff40e 	bge	r18,r2,10f84 <__alt_data_end+0xfc010f84>
   10fb4:	d9801e04 	addi	r6,sp,120
   10fb8:	a00b883a 	mov	r5,r20
   10fbc:	9809883a 	mov	r4,r19
   10fc0:	001951c0 	call	1951c <__ssprint_r>
   10fc4:	103e631e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   10fc8:	843ffc04 	addi	r16,r16,-16
   10fcc:	d8c02017 	ldw	r3,128(sp)
   10fd0:	d8801f17 	ldw	r2,124(sp)
   10fd4:	da000404 	addi	r8,sp,16
   10fd8:	8c3fed16 	blt	r17,r16,10f90 <__alt_data_end+0xfc010f90>
   10fdc:	d9403517 	ldw	r5,212(sp)
   10fe0:	1c07883a 	add	r3,r3,r16
   10fe4:	10800044 	addi	r2,r2,1
   10fe8:	41400015 	stw	r5,0(r8)
   10fec:	44000115 	stw	r16,4(r8)
   10ff0:	d8c02015 	stw	r3,128(sp)
   10ff4:	d8801f15 	stw	r2,124(sp)
   10ff8:	010001c4 	movi	r4,7
   10ffc:	2080060e 	bge	r4,r2,11018 <___svfprintf_internal_r+0xa60>
   11000:	d9402d17 	ldw	r5,180(sp)
   11004:	d9801e04 	addi	r6,sp,120
   11008:	9809883a 	mov	r4,r19
   1100c:	001951c0 	call	1951c <__ssprint_r>
   11010:	103e501e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11014:	d8c02017 	ldw	r3,128(sp)
   11018:	d8803117 	ldw	r2,196(sp)
   1101c:	d9002917 	ldw	r4,164(sp)
   11020:	1100010e 	bge	r2,r4,11028 <___svfprintf_internal_r+0xa70>
   11024:	2005883a 	mov	r2,r4
   11028:	d9402f17 	ldw	r5,188(sp)
   1102c:	288b883a 	add	r5,r5,r2
   11030:	d9402f15 	stw	r5,188(sp)
   11034:	1801be1e 	bne	r3,zero,11730 <___svfprintf_internal_r+0x1178>
   11038:	b8800007 	ldb	r2,0(r23)
   1103c:	d8001f15 	stw	zero,124(sp)
   11040:	da000404 	addi	r8,sp,16
   11044:	103d891e 	bne	r2,zero,1066c <__alt_data_end+0xfc01066c>
   11048:	b823883a 	mov	r17,r23
   1104c:	003d9f06 	br	106cc <__alt_data_end+0xfc0106cc>
   11050:	8025883a 	mov	r18,r16
   11054:	dc002903 	ldbu	r16,164(sp)
   11058:	e011883a 	mov	r8,fp
   1105c:	84003fcc 	andi	r16,r16,255
   11060:	8005e61e 	bne	r16,zero,127fc <___svfprintf_internal_r+0x2244>
   11064:	94800414 	ori	r18,r18,16
   11068:	9080080c 	andi	r2,r18,32
   1106c:	10022026 	beq	r2,zero,118f0 <___svfprintf_internal_r+0x1338>
   11070:	d9002e17 	ldw	r4,184(sp)
   11074:	d9402a17 	ldw	r5,168(sp)
   11078:	d8002785 	stb	zero,158(sp)
   1107c:	20c00204 	addi	r3,r4,8
   11080:	25000017 	ldw	r20,0(r4)
   11084:	25800117 	ldw	r22,4(r4)
   11088:	2803ad16 	blt	r5,zero,11f40 <___svfprintf_internal_r+0x1988>
   1108c:	013fdfc4 	movi	r4,-129
   11090:	a584b03a 	or	r2,r20,r22
   11094:	d8c02e15 	stw	r3,184(sp)
   11098:	9124703a 	and	r18,r18,r4
   1109c:	0039883a 	mov	fp,zero
   110a0:	103eb01e 	bne	r2,zero,10b64 <__alt_data_end+0xfc010b64>
   110a4:	d8802a17 	ldw	r2,168(sp)
   110a8:	1002e71e 	bne	r2,zero,11c48 <___svfprintf_internal_r+0x1690>
   110ac:	d8002a15 	stw	zero,168(sp)
   110b0:	d8002b15 	stw	zero,172(sp)
   110b4:	dc001e04 	addi	r16,sp,120
   110b8:	003ef706 	br	10c98 <__alt_data_end+0xfc010c98>
   110bc:	8025883a 	mov	r18,r16
   110c0:	dc002903 	ldbu	r16,164(sp)
   110c4:	e011883a 	mov	r8,fp
   110c8:	84003fcc 	andi	r16,r16,255
   110cc:	8005c81e 	bne	r16,zero,127f0 <___svfprintf_internal_r+0x2238>
   110d0:	010000f4 	movhi	r4,3
   110d4:	212df104 	addi	r4,r4,-18492
   110d8:	d9003a15 	stw	r4,232(sp)
   110dc:	9080080c 	andi	r2,r18,32
   110e0:	10007226 	beq	r2,zero,112ac <___svfprintf_internal_r+0xcf4>
   110e4:	d9402e17 	ldw	r5,184(sp)
   110e8:	2d000017 	ldw	r20,0(r5)
   110ec:	2d800117 	ldw	r22,4(r5)
   110f0:	29400204 	addi	r5,r5,8
   110f4:	d9402e15 	stw	r5,184(sp)
   110f8:	9080004c 	andi	r2,r18,1
   110fc:	1001aa26 	beq	r2,zero,117a8 <___svfprintf_internal_r+0x11f0>
   11100:	a584b03a 	or	r2,r20,r22
   11104:	10032526 	beq	r2,zero,11d9c <___svfprintf_internal_r+0x17e4>
   11108:	d8c02a17 	ldw	r3,168(sp)
   1110c:	00800c04 	movi	r2,48
   11110:	d8802705 	stb	r2,156(sp)
   11114:	dc402745 	stb	r17,157(sp)
   11118:	d8002785 	stb	zero,158(sp)
   1111c:	90800094 	ori	r2,r18,2
   11120:	1804a316 	blt	r3,zero,123b0 <___svfprintf_internal_r+0x1df8>
   11124:	00bfdfc4 	movi	r2,-129
   11128:	90a4703a 	and	r18,r18,r2
   1112c:	94800094 	ori	r18,r18,2
   11130:	0039883a 	mov	fp,zero
   11134:	d9003a17 	ldw	r4,232(sp)
   11138:	dc001e04 	addi	r16,sp,120
   1113c:	a08003cc 	andi	r2,r20,15
   11140:	b006973a 	slli	r3,r22,28
   11144:	2085883a 	add	r2,r4,r2
   11148:	a028d13a 	srli	r20,r20,4
   1114c:	10800003 	ldbu	r2,0(r2)
   11150:	b02cd13a 	srli	r22,r22,4
   11154:	843fffc4 	addi	r16,r16,-1
   11158:	1d28b03a 	or	r20,r3,r20
   1115c:	80800005 	stb	r2,0(r16)
   11160:	a584b03a 	or	r2,r20,r22
   11164:	103ff51e 	bne	r2,zero,1113c <__alt_data_end+0xfc01113c>
   11168:	d8c02817 	ldw	r3,160(sp)
   1116c:	1c07c83a 	sub	r3,r3,r16
   11170:	d8c02b15 	stw	r3,172(sp)
   11174:	003ec806 	br	10c98 <__alt_data_end+0xfc010c98>
   11178:	d8c02e17 	ldw	r3,184(sp)
   1117c:	d9002e17 	ldw	r4,184(sp)
   11180:	8025883a 	mov	r18,r16
   11184:	18800017 	ldw	r2,0(r3)
   11188:	21000104 	addi	r4,r4,4
   1118c:	00c00044 	movi	r3,1
   11190:	e011883a 	mov	r8,fp
   11194:	d8c02915 	stw	r3,164(sp)
   11198:	d8002785 	stb	zero,158(sp)
   1119c:	d8801405 	stb	r2,80(sp)
   111a0:	d9002e15 	stw	r4,184(sp)
   111a4:	d8c02b15 	stw	r3,172(sp)
   111a8:	d8002a15 	stw	zero,168(sp)
   111ac:	d8003215 	stw	zero,200(sp)
   111b0:	dc001404 	addi	r16,sp,80
   111b4:	0039883a 	mov	fp,zero
   111b8:	003ec406 	br	10ccc <__alt_data_end+0xfc010ccc>
   111bc:	8025883a 	mov	r18,r16
   111c0:	dc002903 	ldbu	r16,164(sp)
   111c4:	e011883a 	mov	r8,fp
   111c8:	84003fcc 	andi	r16,r16,255
   111cc:	803e8726 	beq	r16,zero,10bec <__alt_data_end+0xfc010bec>
   111d0:	d8c02b03 	ldbu	r3,172(sp)
   111d4:	d8c02785 	stb	r3,158(sp)
   111d8:	003e8406 	br	10bec <__alt_data_end+0xfc010bec>
   111dc:	00c00044 	movi	r3,1
   111e0:	d8c02905 	stb	r3,164(sp)
   111e4:	00c00ac4 	movi	r3,43
   111e8:	d8c02b05 	stb	r3,172(sp)
   111ec:	bc400007 	ldb	r17,0(r23)
   111f0:	003d4606 	br	1070c <__alt_data_end+0xfc01070c>
   111f4:	84000814 	ori	r16,r16,32
   111f8:	bc400007 	ldb	r17,0(r23)
   111fc:	003d4306 	br	1070c <__alt_data_end+0xfc01070c>
   11200:	d8802e17 	ldw	r2,184(sp)
   11204:	8025883a 	mov	r18,r16
   11208:	d8002785 	stb	zero,158(sp)
   1120c:	14000017 	ldw	r16,0(r2)
   11210:	e011883a 	mov	r8,fp
   11214:	15000104 	addi	r20,r2,4
   11218:	80042126 	beq	r16,zero,122a0 <___svfprintf_internal_r+0x1ce8>
   1121c:	d8c02a17 	ldw	r3,168(sp)
   11220:	1803ee16 	blt	r3,zero,121dc <___svfprintf_internal_r+0x1c24>
   11224:	180d883a 	mov	r6,r3
   11228:	000b883a 	mov	r5,zero
   1122c:	8009883a 	mov	r4,r16
   11230:	df003e15 	stw	fp,248(sp)
   11234:	00179a80 	call	179a8 <memchr>
   11238:	da003e17 	ldw	r8,248(sp)
   1123c:	10046a26 	beq	r2,zero,123e8 <___svfprintf_internal_r+0x1e30>
   11240:	1405c83a 	sub	r2,r2,r16
   11244:	d8802b15 	stw	r2,172(sp)
   11248:	1003ea16 	blt	r2,zero,121f4 <___svfprintf_internal_r+0x1c3c>
   1124c:	df002783 	ldbu	fp,158(sp)
   11250:	d8802915 	stw	r2,164(sp)
   11254:	dd002e15 	stw	r20,184(sp)
   11258:	d8002a15 	stw	zero,168(sp)
   1125c:	d8003215 	stw	zero,200(sp)
   11260:	003e9306 	br	10cb0 <__alt_data_end+0xfc010cb0>
   11264:	8025883a 	mov	r18,r16
   11268:	dc002903 	ldbu	r16,164(sp)
   1126c:	e011883a 	mov	r8,fp
   11270:	84003fcc 	andi	r16,r16,255
   11274:	803f7c26 	beq	r16,zero,11068 <__alt_data_end+0xfc011068>
   11278:	d8c02b03 	ldbu	r3,172(sp)
   1127c:	d8c02785 	stb	r3,158(sp)
   11280:	003f7906 	br	11068 <__alt_data_end+0xfc011068>
   11284:	8025883a 	mov	r18,r16
   11288:	dc002903 	ldbu	r16,164(sp)
   1128c:	e011883a 	mov	r8,fp
   11290:	84003fcc 	andi	r16,r16,255
   11294:	8005741e 	bne	r16,zero,12868 <___svfprintf_internal_r+0x22b0>
   11298:	010000f4 	movhi	r4,3
   1129c:	212df604 	addi	r4,r4,-18472
   112a0:	d9003a15 	stw	r4,232(sp)
   112a4:	9080080c 	andi	r2,r18,32
   112a8:	103f8e1e 	bne	r2,zero,110e4 <__alt_data_end+0xfc0110e4>
   112ac:	9080040c 	andi	r2,r18,16
   112b0:	1002a726 	beq	r2,zero,11d50 <___svfprintf_internal_r+0x1798>
   112b4:	d8802e17 	ldw	r2,184(sp)
   112b8:	002d883a 	mov	r22,zero
   112bc:	15000017 	ldw	r20,0(r2)
   112c0:	10800104 	addi	r2,r2,4
   112c4:	d8802e15 	stw	r2,184(sp)
   112c8:	003f8b06 	br	110f8 <__alt_data_end+0xfc0110f8>
   112cc:	84000054 	ori	r16,r16,1
   112d0:	bc400007 	ldb	r17,0(r23)
   112d4:	003d0d06 	br	1070c <__alt_data_end+0xfc01070c>
   112d8:	d8802b07 	ldb	r2,172(sp)
   112dc:	1002a41e 	bne	r2,zero,11d70 <___svfprintf_internal_r+0x17b8>
   112e0:	00c00044 	movi	r3,1
   112e4:	d8c02905 	stb	r3,164(sp)
   112e8:	00c00804 	movi	r3,32
   112ec:	d8c02b05 	stb	r3,172(sp)
   112f0:	bc400007 	ldb	r17,0(r23)
   112f4:	003d0506 	br	1070c <__alt_data_end+0xfc01070c>
   112f8:	8025883a 	mov	r18,r16
   112fc:	dc002903 	ldbu	r16,164(sp)
   11300:	e011883a 	mov	r8,fp
   11304:	84003fcc 	andi	r16,r16,255
   11308:	803e0626 	beq	r16,zero,10b24 <__alt_data_end+0xfc010b24>
   1130c:	d8c02b03 	ldbu	r3,172(sp)
   11310:	d8c02785 	stb	r3,158(sp)
   11314:	003e0306 	br	10b24 <__alt_data_end+0xfc010b24>
   11318:	bc400007 	ldb	r17,0(r23)
   1131c:	00801b04 	movi	r2,108
   11320:	88830a26 	beq	r17,r2,11f4c <___svfprintf_internal_r+0x1994>
   11324:	84000414 	ori	r16,r16,16
   11328:	003cf806 	br	1070c <__alt_data_end+0xfc01070c>
   1132c:	8025883a 	mov	r18,r16
   11330:	dc002903 	ldbu	r16,164(sp)
   11334:	e011883a 	mov	r8,fp
   11338:	84003fcc 	andi	r16,r16,255
   1133c:	8005471e 	bne	r16,zero,1285c <___svfprintf_internal_r+0x22a4>
   11340:	9080080c 	andi	r2,r18,32
   11344:	10028c26 	beq	r2,zero,11d78 <___svfprintf_internal_r+0x17c0>
   11348:	d9002e17 	ldw	r4,184(sp)
   1134c:	d9402f17 	ldw	r5,188(sp)
   11350:	20800017 	ldw	r2,0(r4)
   11354:	2807d7fa 	srai	r3,r5,31
   11358:	21000104 	addi	r4,r4,4
   1135c:	d9002e15 	stw	r4,184(sp)
   11360:	11400015 	stw	r5,0(r2)
   11364:	10c00115 	stw	r3,4(r2)
   11368:	003cbe06 	br	10664 <__alt_data_end+0xfc010664>
   1136c:	84001014 	ori	r16,r16,64
   11370:	bc400007 	ldb	r17,0(r23)
   11374:	003ce506 	br	1070c <__alt_data_end+0xfc01070c>
   11378:	010000f4 	movhi	r4,3
   1137c:	212df604 	addi	r4,r4,-18472
   11380:	0039883a 	mov	fp,zero
   11384:	d9003a15 	stw	r4,232(sp)
   11388:	04401e04 	movi	r17,120
   1138c:	003f6906 	br	11134 <__alt_data_end+0xfc011134>
   11390:	8025883a 	mov	r18,r16
   11394:	dc002903 	ldbu	r16,164(sp)
   11398:	e011883a 	mov	r8,fp
   1139c:	84003fcc 	andi	r16,r16,255
   113a0:	8005261e 	bne	r16,zero,1283c <___svfprintf_internal_r+0x2284>
   113a4:	883d6526 	beq	r17,zero,1093c <__alt_data_end+0xfc01093c>
   113a8:	00c00044 	movi	r3,1
   113ac:	d8c02915 	stw	r3,164(sp)
   113b0:	dc401405 	stb	r17,80(sp)
   113b4:	d8002785 	stb	zero,158(sp)
   113b8:	003f7a06 	br	111a4 <__alt_data_end+0xfc0111a4>
   113bc:	010000f4 	movhi	r4,3
   113c0:	212df604 	addi	r4,r4,-18472
   113c4:	d9003a15 	stw	r4,232(sp)
   113c8:	d8c02e15 	stw	r3,184(sp)
   113cc:	1025883a 	mov	r18,r2
   113d0:	04401e04 	movi	r17,120
   113d4:	a584b03a 	or	r2,r20,r22
   113d8:	1000fa1e 	bne	r2,zero,117c4 <___svfprintf_internal_r+0x120c>
   113dc:	0039883a 	mov	fp,zero
   113e0:	00800084 	movi	r2,2
   113e4:	10803fcc 	andi	r2,r2,255
   113e8:	00c00044 	movi	r3,1
   113ec:	10c21626 	beq	r2,r3,11c48 <___svfprintf_internal_r+0x1690>
   113f0:	00c00084 	movi	r3,2
   113f4:	10fe0e1e 	bne	r2,r3,10c30 <__alt_data_end+0xfc010c30>
   113f8:	003d4606 	br	10914 <__alt_data_end+0xfc010914>
   113fc:	d8c02017 	ldw	r3,128(sp)
   11400:	003e7306 	br	10dd0 <__alt_data_end+0xfc010dd0>
   11404:	00801944 	movi	r2,101
   11408:	14407c0e 	bge	r2,r17,115fc <___svfprintf_internal_r+0x1044>
   1140c:	d9003617 	ldw	r4,216(sp)
   11410:	d9403717 	ldw	r5,220(sp)
   11414:	000d883a 	mov	r6,zero
   11418:	000f883a 	mov	r7,zero
   1141c:	d8c03d15 	stw	r3,244(sp)
   11420:	da003e15 	stw	r8,248(sp)
   11424:	001e90c0 	call	1e90c <__eqdf2>
   11428:	d8c03d17 	ldw	r3,244(sp)
   1142c:	da003e17 	ldw	r8,248(sp)
   11430:	1000f51e 	bne	r2,zero,11808 <___svfprintf_internal_r+0x1250>
   11434:	d8801f17 	ldw	r2,124(sp)
   11438:	010000f4 	movhi	r4,3
   1143c:	212dfd04 	addi	r4,r4,-18444
   11440:	18c00044 	addi	r3,r3,1
   11444:	10800044 	addi	r2,r2,1
   11448:	41000015 	stw	r4,0(r8)
   1144c:	01000044 	movi	r4,1
   11450:	41000115 	stw	r4,4(r8)
   11454:	d8c02015 	stw	r3,128(sp)
   11458:	d8801f15 	stw	r2,124(sp)
   1145c:	010001c4 	movi	r4,7
   11460:	20826616 	blt	r4,r2,11dfc <___svfprintf_internal_r+0x1844>
   11464:	42000204 	addi	r8,r8,8
   11468:	d8802617 	ldw	r2,152(sp)
   1146c:	d9403317 	ldw	r5,204(sp)
   11470:	11400216 	blt	r2,r5,1147c <___svfprintf_internal_r+0xec4>
   11474:	9080004c 	andi	r2,r18,1
   11478:	103eb326 	beq	r2,zero,10f48 <__alt_data_end+0xfc010f48>
   1147c:	d8803817 	ldw	r2,224(sp)
   11480:	d9003417 	ldw	r4,208(sp)
   11484:	d9403817 	ldw	r5,224(sp)
   11488:	1887883a 	add	r3,r3,r2
   1148c:	d8801f17 	ldw	r2,124(sp)
   11490:	41000015 	stw	r4,0(r8)
   11494:	41400115 	stw	r5,4(r8)
   11498:	10800044 	addi	r2,r2,1
   1149c:	d8c02015 	stw	r3,128(sp)
   114a0:	d8801f15 	stw	r2,124(sp)
   114a4:	010001c4 	movi	r4,7
   114a8:	2082af16 	blt	r4,r2,11f68 <___svfprintf_internal_r+0x19b0>
   114ac:	42000204 	addi	r8,r8,8
   114b0:	d8803317 	ldw	r2,204(sp)
   114b4:	143fffc4 	addi	r16,r2,-1
   114b8:	043ea30e 	bge	zero,r16,10f48 <__alt_data_end+0xfc010f48>
   114bc:	04400404 	movi	r17,16
   114c0:	d8801f17 	ldw	r2,124(sp)
   114c4:	8c00860e 	bge	r17,r16,116e0 <___svfprintf_internal_r+0x1128>
   114c8:	014000f4 	movhi	r5,3
   114cc:	296dfd84 	addi	r5,r5,-18442
   114d0:	d9402c15 	stw	r5,176(sp)
   114d4:	058001c4 	movi	r22,7
   114d8:	dd002d17 	ldw	r20,180(sp)
   114dc:	00000306 	br	114ec <___svfprintf_internal_r+0xf34>
   114e0:	42000204 	addi	r8,r8,8
   114e4:	843ffc04 	addi	r16,r16,-16
   114e8:	8c00800e 	bge	r17,r16,116ec <___svfprintf_internal_r+0x1134>
   114ec:	18c00404 	addi	r3,r3,16
   114f0:	10800044 	addi	r2,r2,1
   114f4:	45400015 	stw	r21,0(r8)
   114f8:	44400115 	stw	r17,4(r8)
   114fc:	d8c02015 	stw	r3,128(sp)
   11500:	d8801f15 	stw	r2,124(sp)
   11504:	b0bff60e 	bge	r22,r2,114e0 <__alt_data_end+0xfc0114e0>
   11508:	d9801e04 	addi	r6,sp,120
   1150c:	a00b883a 	mov	r5,r20
   11510:	9809883a 	mov	r4,r19
   11514:	001951c0 	call	1951c <__ssprint_r>
   11518:	103d0e1e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   1151c:	d8c02017 	ldw	r3,128(sp)
   11520:	d8801f17 	ldw	r2,124(sp)
   11524:	da000404 	addi	r8,sp,16
   11528:	003fee06 	br	114e4 <__alt_data_end+0xfc0114e4>
   1152c:	d9403117 	ldw	r5,196(sp)
   11530:	d8802917 	ldw	r2,164(sp)
   11534:	28adc83a 	sub	r22,r5,r2
   11538:	05be430e 	bge	zero,r22,10e48 <__alt_data_end+0xfc010e48>
   1153c:	07000404 	movi	fp,16
   11540:	d8801f17 	ldw	r2,124(sp)
   11544:	e583a20e 	bge	fp,r22,123d0 <___svfprintf_internal_r+0x1e18>
   11548:	014000f4 	movhi	r5,3
   1154c:	296dfd84 	addi	r5,r5,-18442
   11550:	dc403015 	stw	r17,192(sp)
   11554:	d9402c15 	stw	r5,176(sp)
   11558:	b023883a 	mov	r17,r22
   1155c:	050001c4 	movi	r20,7
   11560:	902d883a 	mov	r22,r18
   11564:	8025883a 	mov	r18,r16
   11568:	dc002d17 	ldw	r16,180(sp)
   1156c:	00000306 	br	1157c <___svfprintf_internal_r+0xfc4>
   11570:	8c7ffc04 	addi	r17,r17,-16
   11574:	42000204 	addi	r8,r8,8
   11578:	e440110e 	bge	fp,r17,115c0 <___svfprintf_internal_r+0x1008>
   1157c:	18c00404 	addi	r3,r3,16
   11580:	10800044 	addi	r2,r2,1
   11584:	45400015 	stw	r21,0(r8)
   11588:	47000115 	stw	fp,4(r8)
   1158c:	d8c02015 	stw	r3,128(sp)
   11590:	d8801f15 	stw	r2,124(sp)
   11594:	a0bff60e 	bge	r20,r2,11570 <__alt_data_end+0xfc011570>
   11598:	d9801e04 	addi	r6,sp,120
   1159c:	800b883a 	mov	r5,r16
   115a0:	9809883a 	mov	r4,r19
   115a4:	001951c0 	call	1951c <__ssprint_r>
   115a8:	103cea1e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   115ac:	8c7ffc04 	addi	r17,r17,-16
   115b0:	d8c02017 	ldw	r3,128(sp)
   115b4:	d8801f17 	ldw	r2,124(sp)
   115b8:	da000404 	addi	r8,sp,16
   115bc:	e47fef16 	blt	fp,r17,1157c <__alt_data_end+0xfc01157c>
   115c0:	9021883a 	mov	r16,r18
   115c4:	b025883a 	mov	r18,r22
   115c8:	882d883a 	mov	r22,r17
   115cc:	dc403017 	ldw	r17,192(sp)
   115d0:	d9002c17 	ldw	r4,176(sp)
   115d4:	1d87883a 	add	r3,r3,r22
   115d8:	10800044 	addi	r2,r2,1
   115dc:	41000015 	stw	r4,0(r8)
   115e0:	45800115 	stw	r22,4(r8)
   115e4:	d8c02015 	stw	r3,128(sp)
   115e8:	d8801f15 	stw	r2,124(sp)
   115ec:	010001c4 	movi	r4,7
   115f0:	20819a16 	blt	r4,r2,11c5c <___svfprintf_internal_r+0x16a4>
   115f4:	42000204 	addi	r8,r8,8
   115f8:	003e1306 	br	10e48 <__alt_data_end+0xfc010e48>
   115fc:	d9403317 	ldw	r5,204(sp)
   11600:	00800044 	movi	r2,1
   11604:	18c00044 	addi	r3,r3,1
   11608:	1141710e 	bge	r2,r5,11bd0 <___svfprintf_internal_r+0x1618>
   1160c:	dc401f17 	ldw	r17,124(sp)
   11610:	00800044 	movi	r2,1
   11614:	40800115 	stw	r2,4(r8)
   11618:	8c400044 	addi	r17,r17,1
   1161c:	44000015 	stw	r16,0(r8)
   11620:	d8c02015 	stw	r3,128(sp)
   11624:	dc401f15 	stw	r17,124(sp)
   11628:	008001c4 	movi	r2,7
   1162c:	14417416 	blt	r2,r17,11c00 <___svfprintf_internal_r+0x1648>
   11630:	42000204 	addi	r8,r8,8
   11634:	d8803817 	ldw	r2,224(sp)
   11638:	d9003417 	ldw	r4,208(sp)
   1163c:	8c400044 	addi	r17,r17,1
   11640:	10c7883a 	add	r3,r2,r3
   11644:	40800115 	stw	r2,4(r8)
   11648:	41000015 	stw	r4,0(r8)
   1164c:	d8c02015 	stw	r3,128(sp)
   11650:	dc401f15 	stw	r17,124(sp)
   11654:	008001c4 	movi	r2,7
   11658:	14417216 	blt	r2,r17,11c24 <___svfprintf_internal_r+0x166c>
   1165c:	45800204 	addi	r22,r8,8
   11660:	d9003617 	ldw	r4,216(sp)
   11664:	d9403717 	ldw	r5,220(sp)
   11668:	000d883a 	mov	r6,zero
   1166c:	000f883a 	mov	r7,zero
   11670:	d8c03d15 	stw	r3,244(sp)
   11674:	001e90c0 	call	1e90c <__eqdf2>
   11678:	d8c03d17 	ldw	r3,244(sp)
   1167c:	1000b326 	beq	r2,zero,1194c <___svfprintf_internal_r+0x1394>
   11680:	d9403317 	ldw	r5,204(sp)
   11684:	84000044 	addi	r16,r16,1
   11688:	8c400044 	addi	r17,r17,1
   1168c:	28bfffc4 	addi	r2,r5,-1
   11690:	1887883a 	add	r3,r3,r2
   11694:	b0800115 	stw	r2,4(r22)
   11698:	b4000015 	stw	r16,0(r22)
   1169c:	d8c02015 	stw	r3,128(sp)
   116a0:	dc401f15 	stw	r17,124(sp)
   116a4:	008001c4 	movi	r2,7
   116a8:	1440d216 	blt	r2,r17,119f4 <___svfprintf_internal_r+0x143c>
   116ac:	b5800204 	addi	r22,r22,8
   116b0:	d9003b17 	ldw	r4,236(sp)
   116b4:	df0022c4 	addi	fp,sp,139
   116b8:	8c400044 	addi	r17,r17,1
   116bc:	20c7883a 	add	r3,r4,r3
   116c0:	b7000015 	stw	fp,0(r22)
   116c4:	b1000115 	stw	r4,4(r22)
   116c8:	d8c02015 	stw	r3,128(sp)
   116cc:	dc401f15 	stw	r17,124(sp)
   116d0:	008001c4 	movi	r2,7
   116d4:	14400e16 	blt	r2,r17,11710 <___svfprintf_internal_r+0x1158>
   116d8:	b2000204 	addi	r8,r22,8
   116dc:	003e1a06 	br	10f48 <__alt_data_end+0xfc010f48>
   116e0:	010000f4 	movhi	r4,3
   116e4:	212dfd84 	addi	r4,r4,-18442
   116e8:	d9002c15 	stw	r4,176(sp)
   116ec:	d9002c17 	ldw	r4,176(sp)
   116f0:	1c07883a 	add	r3,r3,r16
   116f4:	44000115 	stw	r16,4(r8)
   116f8:	41000015 	stw	r4,0(r8)
   116fc:	10800044 	addi	r2,r2,1
   11700:	d8c02015 	stw	r3,128(sp)
   11704:	d8801f15 	stw	r2,124(sp)
   11708:	010001c4 	movi	r4,7
   1170c:	20be0d0e 	bge	r4,r2,10f44 <__alt_data_end+0xfc010f44>
   11710:	d9402d17 	ldw	r5,180(sp)
   11714:	d9801e04 	addi	r6,sp,120
   11718:	9809883a 	mov	r4,r19
   1171c:	001951c0 	call	1951c <__ssprint_r>
   11720:	103c8c1e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11724:	d8c02017 	ldw	r3,128(sp)
   11728:	da000404 	addi	r8,sp,16
   1172c:	003e0606 	br	10f48 <__alt_data_end+0xfc010f48>
   11730:	d9402d17 	ldw	r5,180(sp)
   11734:	d9801e04 	addi	r6,sp,120
   11738:	9809883a 	mov	r4,r19
   1173c:	001951c0 	call	1951c <__ssprint_r>
   11740:	103e3d26 	beq	r2,zero,11038 <__alt_data_end+0xfc011038>
   11744:	003c8306 	br	10954 <__alt_data_end+0xfc010954>
   11748:	d9402d17 	ldw	r5,180(sp)
   1174c:	d9801e04 	addi	r6,sp,120
   11750:	9809883a 	mov	r4,r19
   11754:	001951c0 	call	1951c <__ssprint_r>
   11758:	103c7e1e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   1175c:	d8c02017 	ldw	r3,128(sp)
   11760:	da000404 	addi	r8,sp,16
   11764:	003deb06 	br	10f14 <__alt_data_end+0xfc010f14>
   11768:	d9402d17 	ldw	r5,180(sp)
   1176c:	d9801e04 	addi	r6,sp,120
   11770:	9809883a 	mov	r4,r19
   11774:	001951c0 	call	1951c <__ssprint_r>
   11778:	103c761e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   1177c:	d8c02017 	ldw	r3,128(sp)
   11780:	da000404 	addi	r8,sp,16
   11784:	003d9f06 	br	10e04 <__alt_data_end+0xfc010e04>
   11788:	d9402d17 	ldw	r5,180(sp)
   1178c:	d9801e04 	addi	r6,sp,120
   11790:	9809883a 	mov	r4,r19
   11794:	001951c0 	call	1951c <__ssprint_r>
   11798:	103c6e1e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   1179c:	d8c02017 	ldw	r3,128(sp)
   117a0:	da000404 	addi	r8,sp,16
   117a4:	003da506 	br	10e3c <__alt_data_end+0xfc010e3c>
   117a8:	d9402a17 	ldw	r5,168(sp)
   117ac:	d8002785 	stb	zero,158(sp)
   117b0:	283f0816 	blt	r5,zero,113d4 <__alt_data_end+0xfc0113d4>
   117b4:	00ffdfc4 	movi	r3,-129
   117b8:	a584b03a 	or	r2,r20,r22
   117bc:	90e4703a 	and	r18,r18,r3
   117c0:	103c5126 	beq	r2,zero,10908 <__alt_data_end+0xfc010908>
   117c4:	0039883a 	mov	fp,zero
   117c8:	003e5a06 	br	11134 <__alt_data_end+0xfc011134>
   117cc:	9080040c 	andi	r2,r18,16
   117d0:	10013d26 	beq	r2,zero,11cc8 <___svfprintf_internal_r+0x1710>
   117d4:	d8c02e17 	ldw	r3,184(sp)
   117d8:	d9002a17 	ldw	r4,168(sp)
   117dc:	d8002785 	stb	zero,158(sp)
   117e0:	18800104 	addi	r2,r3,4
   117e4:	1d000017 	ldw	r20,0(r3)
   117e8:	002d883a 	mov	r22,zero
   117ec:	20013f16 	blt	r4,zero,11cec <___svfprintf_internal_r+0x1734>
   117f0:	00ffdfc4 	movi	r3,-129
   117f4:	d8802e15 	stw	r2,184(sp)
   117f8:	90e4703a 	and	r18,r18,r3
   117fc:	a03d0926 	beq	r20,zero,10c24 <__alt_data_end+0xfc010c24>
   11800:	0039883a 	mov	fp,zero
   11804:	003d0c06 	br	10c38 <__alt_data_end+0xfc010c38>
   11808:	dc402617 	ldw	r17,152(sp)
   1180c:	0441830e 	bge	zero,r17,11e1c <___svfprintf_internal_r+0x1864>
   11810:	dc403217 	ldw	r17,200(sp)
   11814:	d8803317 	ldw	r2,204(sp)
   11818:	1440010e 	bge	r2,r17,11820 <___svfprintf_internal_r+0x1268>
   1181c:	1023883a 	mov	r17,r2
   11820:	04400a0e 	bge	zero,r17,1184c <___svfprintf_internal_r+0x1294>
   11824:	d8801f17 	ldw	r2,124(sp)
   11828:	1c47883a 	add	r3,r3,r17
   1182c:	44000015 	stw	r16,0(r8)
   11830:	10800044 	addi	r2,r2,1
   11834:	44400115 	stw	r17,4(r8)
   11838:	d8c02015 	stw	r3,128(sp)
   1183c:	d8801f15 	stw	r2,124(sp)
   11840:	010001c4 	movi	r4,7
   11844:	20827516 	blt	r4,r2,1221c <___svfprintf_internal_r+0x1c64>
   11848:	42000204 	addi	r8,r8,8
   1184c:	88027b16 	blt	r17,zero,1223c <___svfprintf_internal_r+0x1c84>
   11850:	d9003217 	ldw	r4,200(sp)
   11854:	2463c83a 	sub	r17,r4,r17
   11858:	0440990e 	bge	zero,r17,11ac0 <___svfprintf_internal_r+0x1508>
   1185c:	05800404 	movi	r22,16
   11860:	d8801f17 	ldw	r2,124(sp)
   11864:	b441530e 	bge	r22,r17,11db4 <___svfprintf_internal_r+0x17fc>
   11868:	010000f4 	movhi	r4,3
   1186c:	212dfd84 	addi	r4,r4,-18442
   11870:	d9002c15 	stw	r4,176(sp)
   11874:	070001c4 	movi	fp,7
   11878:	dd002d17 	ldw	r20,180(sp)
   1187c:	00000306 	br	1188c <___svfprintf_internal_r+0x12d4>
   11880:	42000204 	addi	r8,r8,8
   11884:	8c7ffc04 	addi	r17,r17,-16
   11888:	b4414d0e 	bge	r22,r17,11dc0 <___svfprintf_internal_r+0x1808>
   1188c:	18c00404 	addi	r3,r3,16
   11890:	10800044 	addi	r2,r2,1
   11894:	45400015 	stw	r21,0(r8)
   11898:	45800115 	stw	r22,4(r8)
   1189c:	d8c02015 	stw	r3,128(sp)
   118a0:	d8801f15 	stw	r2,124(sp)
   118a4:	e0bff60e 	bge	fp,r2,11880 <__alt_data_end+0xfc011880>
   118a8:	d9801e04 	addi	r6,sp,120
   118ac:	a00b883a 	mov	r5,r20
   118b0:	9809883a 	mov	r4,r19
   118b4:	001951c0 	call	1951c <__ssprint_r>
   118b8:	103c261e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   118bc:	d8c02017 	ldw	r3,128(sp)
   118c0:	d8801f17 	ldw	r2,124(sp)
   118c4:	da000404 	addi	r8,sp,16
   118c8:	003fee06 	br	11884 <__alt_data_end+0xfc011884>
   118cc:	d9402d17 	ldw	r5,180(sp)
   118d0:	d9801e04 	addi	r6,sp,120
   118d4:	9809883a 	mov	r4,r19
   118d8:	001951c0 	call	1951c <__ssprint_r>
   118dc:	103c1d1e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   118e0:	d8c02017 	ldw	r3,128(sp)
   118e4:	df002787 	ldb	fp,158(sp)
   118e8:	da000404 	addi	r8,sp,16
   118ec:	003d3806 	br	10dd0 <__alt_data_end+0xfc010dd0>
   118f0:	9080040c 	andi	r2,r18,16
   118f4:	10005c26 	beq	r2,zero,11a68 <___svfprintf_internal_r+0x14b0>
   118f8:	d8c02e17 	ldw	r3,184(sp)
   118fc:	d9002a17 	ldw	r4,168(sp)
   11900:	d8002785 	stb	zero,158(sp)
   11904:	18800104 	addi	r2,r3,4
   11908:	1d000017 	ldw	r20,0(r3)
   1190c:	002d883a 	mov	r22,zero
   11910:	20005e16 	blt	r4,zero,11a8c <___svfprintf_internal_r+0x14d4>
   11914:	00ffdfc4 	movi	r3,-129
   11918:	d8802e15 	stw	r2,184(sp)
   1191c:	90e4703a 	and	r18,r18,r3
   11920:	0039883a 	mov	fp,zero
   11924:	a03ddf26 	beq	r20,zero,110a4 <__alt_data_end+0xfc0110a4>
   11928:	00800244 	movi	r2,9
   1192c:	153c8e36 	bltu	r2,r20,10b68 <__alt_data_end+0xfc010b68>
   11930:	a5000c04 	addi	r20,r20,48
   11934:	dc001dc4 	addi	r16,sp,119
   11938:	dd001dc5 	stb	r20,119(sp)
   1193c:	d8c02817 	ldw	r3,160(sp)
   11940:	1c07c83a 	sub	r3,r3,r16
   11944:	d8c02b15 	stw	r3,172(sp)
   11948:	003cd306 	br	10c98 <__alt_data_end+0xfc010c98>
   1194c:	d8803317 	ldw	r2,204(sp)
   11950:	143fffc4 	addi	r16,r2,-1
   11954:	043f560e 	bge	zero,r16,116b0 <__alt_data_end+0xfc0116b0>
   11958:	07000404 	movi	fp,16
   1195c:	e403530e 	bge	fp,r16,126ac <___svfprintf_internal_r+0x20f4>
   11960:	014000f4 	movhi	r5,3
   11964:	296dfd84 	addi	r5,r5,-18442
   11968:	d9402c15 	stw	r5,176(sp)
   1196c:	01c001c4 	movi	r7,7
   11970:	dd002d17 	ldw	r20,180(sp)
   11974:	00000306 	br	11984 <___svfprintf_internal_r+0x13cc>
   11978:	843ffc04 	addi	r16,r16,-16
   1197c:	b5800204 	addi	r22,r22,8
   11980:	e400130e 	bge	fp,r16,119d0 <___svfprintf_internal_r+0x1418>
   11984:	18c00404 	addi	r3,r3,16
   11988:	8c400044 	addi	r17,r17,1
   1198c:	b5400015 	stw	r21,0(r22)
   11990:	b7000115 	stw	fp,4(r22)
   11994:	d8c02015 	stw	r3,128(sp)
   11998:	dc401f15 	stw	r17,124(sp)
   1199c:	3c7ff60e 	bge	r7,r17,11978 <__alt_data_end+0xfc011978>
   119a0:	d9801e04 	addi	r6,sp,120
   119a4:	a00b883a 	mov	r5,r20
   119a8:	9809883a 	mov	r4,r19
   119ac:	d9c03d15 	stw	r7,244(sp)
   119b0:	001951c0 	call	1951c <__ssprint_r>
   119b4:	d9c03d17 	ldw	r7,244(sp)
   119b8:	103be61e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   119bc:	843ffc04 	addi	r16,r16,-16
   119c0:	d8c02017 	ldw	r3,128(sp)
   119c4:	dc401f17 	ldw	r17,124(sp)
   119c8:	dd800404 	addi	r22,sp,16
   119cc:	e43fed16 	blt	fp,r16,11984 <__alt_data_end+0xfc011984>
   119d0:	d8802c17 	ldw	r2,176(sp)
   119d4:	1c07883a 	add	r3,r3,r16
   119d8:	8c400044 	addi	r17,r17,1
   119dc:	b0800015 	stw	r2,0(r22)
   119e0:	b4000115 	stw	r16,4(r22)
   119e4:	d8c02015 	stw	r3,128(sp)
   119e8:	dc401f15 	stw	r17,124(sp)
   119ec:	008001c4 	movi	r2,7
   119f0:	147f2e0e 	bge	r2,r17,116ac <__alt_data_end+0xfc0116ac>
   119f4:	d9402d17 	ldw	r5,180(sp)
   119f8:	d9801e04 	addi	r6,sp,120
   119fc:	9809883a 	mov	r4,r19
   11a00:	001951c0 	call	1951c <__ssprint_r>
   11a04:	103bd31e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11a08:	d8c02017 	ldw	r3,128(sp)
   11a0c:	dc401f17 	ldw	r17,124(sp)
   11a10:	dd800404 	addi	r22,sp,16
   11a14:	003f2606 	br	116b0 <__alt_data_end+0xfc0116b0>
   11a18:	9080040c 	andi	r2,r18,16
   11a1c:	1000c326 	beq	r2,zero,11d2c <___svfprintf_internal_r+0x1774>
   11a20:	d9402e17 	ldw	r5,184(sp)
   11a24:	2d000017 	ldw	r20,0(r5)
   11a28:	29400104 	addi	r5,r5,4
   11a2c:	d9402e15 	stw	r5,184(sp)
   11a30:	a02dd7fa 	srai	r22,r20,31
   11a34:	b005883a 	mov	r2,r22
   11a38:	103c430e 	bge	r2,zero,10b48 <__alt_data_end+0xfc010b48>
   11a3c:	d9402a17 	ldw	r5,168(sp)
   11a40:	0529c83a 	sub	r20,zero,r20
   11a44:	07000b44 	movi	fp,45
   11a48:	a004c03a 	cmpne	r2,r20,zero
   11a4c:	05adc83a 	sub	r22,zero,r22
   11a50:	df002785 	stb	fp,158(sp)
   11a54:	b0adc83a 	sub	r22,r22,r2
   11a58:	28022e16 	blt	r5,zero,12314 <___svfprintf_internal_r+0x1d5c>
   11a5c:	00bfdfc4 	movi	r2,-129
   11a60:	90a4703a 	and	r18,r18,r2
   11a64:	003c3f06 	br	10b64 <__alt_data_end+0xfc010b64>
   11a68:	9080100c 	andi	r2,r18,64
   11a6c:	d8002785 	stb	zero,158(sp)
   11a70:	10012526 	beq	r2,zero,11f08 <___svfprintf_internal_r+0x1950>
   11a74:	d9402e17 	ldw	r5,184(sp)
   11a78:	d8c02a17 	ldw	r3,168(sp)
   11a7c:	002d883a 	mov	r22,zero
   11a80:	28800104 	addi	r2,r5,4
   11a84:	2d00000b 	ldhu	r20,0(r5)
   11a88:	183fa20e 	bge	r3,zero,11914 <__alt_data_end+0xfc011914>
   11a8c:	d8802e15 	stw	r2,184(sp)
   11a90:	0039883a 	mov	fp,zero
   11a94:	a584b03a 	or	r2,r20,r22
   11a98:	103c321e 	bne	r2,zero,10b64 <__alt_data_end+0xfc010b64>
   11a9c:	00800044 	movi	r2,1
   11aa0:	003e5006 	br	113e4 <__alt_data_end+0xfc0113e4>
   11aa4:	d9402d17 	ldw	r5,180(sp)
   11aa8:	d9801e04 	addi	r6,sp,120
   11aac:	9809883a 	mov	r4,r19
   11ab0:	001951c0 	call	1951c <__ssprint_r>
   11ab4:	103ba71e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11ab8:	d8c02017 	ldw	r3,128(sp)
   11abc:	da000404 	addi	r8,sp,16
   11ac0:	d9003217 	ldw	r4,200(sp)
   11ac4:	d8802617 	ldw	r2,152(sp)
   11ac8:	d9403317 	ldw	r5,204(sp)
   11acc:	8123883a 	add	r17,r16,r4
   11ad0:	11400216 	blt	r2,r5,11adc <___svfprintf_internal_r+0x1524>
   11ad4:	9100004c 	andi	r4,r18,1
   11ad8:	20000d26 	beq	r4,zero,11b10 <___svfprintf_internal_r+0x1558>
   11adc:	d9003817 	ldw	r4,224(sp)
   11ae0:	d9403417 	ldw	r5,208(sp)
   11ae4:	1907883a 	add	r3,r3,r4
   11ae8:	d9001f17 	ldw	r4,124(sp)
   11aec:	41400015 	stw	r5,0(r8)
   11af0:	d9403817 	ldw	r5,224(sp)
   11af4:	21000044 	addi	r4,r4,1
   11af8:	d8c02015 	stw	r3,128(sp)
   11afc:	41400115 	stw	r5,4(r8)
   11b00:	d9001f15 	stw	r4,124(sp)
   11b04:	014001c4 	movi	r5,7
   11b08:	2901dc16 	blt	r5,r4,1227c <___svfprintf_internal_r+0x1cc4>
   11b0c:	42000204 	addi	r8,r8,8
   11b10:	d9003317 	ldw	r4,204(sp)
   11b14:	8121883a 	add	r16,r16,r4
   11b18:	2085c83a 	sub	r2,r4,r2
   11b1c:	8461c83a 	sub	r16,r16,r17
   11b20:	1400010e 	bge	r2,r16,11b28 <___svfprintf_internal_r+0x1570>
   11b24:	1021883a 	mov	r16,r2
   11b28:	04000a0e 	bge	zero,r16,11b54 <___svfprintf_internal_r+0x159c>
   11b2c:	d9001f17 	ldw	r4,124(sp)
   11b30:	1c07883a 	add	r3,r3,r16
   11b34:	44400015 	stw	r17,0(r8)
   11b38:	21000044 	addi	r4,r4,1
   11b3c:	44000115 	stw	r16,4(r8)
   11b40:	d8c02015 	stw	r3,128(sp)
   11b44:	d9001f15 	stw	r4,124(sp)
   11b48:	014001c4 	movi	r5,7
   11b4c:	2901e616 	blt	r5,r4,122e8 <___svfprintf_internal_r+0x1d30>
   11b50:	42000204 	addi	r8,r8,8
   11b54:	8001f616 	blt	r16,zero,12330 <___svfprintf_internal_r+0x1d78>
   11b58:	1421c83a 	sub	r16,r2,r16
   11b5c:	043cfa0e 	bge	zero,r16,10f48 <__alt_data_end+0xfc010f48>
   11b60:	04400404 	movi	r17,16
   11b64:	d8801f17 	ldw	r2,124(sp)
   11b68:	8c3edd0e 	bge	r17,r16,116e0 <__alt_data_end+0xfc0116e0>
   11b6c:	014000f4 	movhi	r5,3
   11b70:	296dfd84 	addi	r5,r5,-18442
   11b74:	d9402c15 	stw	r5,176(sp)
   11b78:	058001c4 	movi	r22,7
   11b7c:	dd002d17 	ldw	r20,180(sp)
   11b80:	00000306 	br	11b90 <___svfprintf_internal_r+0x15d8>
   11b84:	42000204 	addi	r8,r8,8
   11b88:	843ffc04 	addi	r16,r16,-16
   11b8c:	8c3ed70e 	bge	r17,r16,116ec <__alt_data_end+0xfc0116ec>
   11b90:	18c00404 	addi	r3,r3,16
   11b94:	10800044 	addi	r2,r2,1
   11b98:	45400015 	stw	r21,0(r8)
   11b9c:	44400115 	stw	r17,4(r8)
   11ba0:	d8c02015 	stw	r3,128(sp)
   11ba4:	d8801f15 	stw	r2,124(sp)
   11ba8:	b0bff60e 	bge	r22,r2,11b84 <__alt_data_end+0xfc011b84>
   11bac:	d9801e04 	addi	r6,sp,120
   11bb0:	a00b883a 	mov	r5,r20
   11bb4:	9809883a 	mov	r4,r19
   11bb8:	001951c0 	call	1951c <__ssprint_r>
   11bbc:	103b651e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11bc0:	d8c02017 	ldw	r3,128(sp)
   11bc4:	d8801f17 	ldw	r2,124(sp)
   11bc8:	da000404 	addi	r8,sp,16
   11bcc:	003fee06 	br	11b88 <__alt_data_end+0xfc011b88>
   11bd0:	9088703a 	and	r4,r18,r2
   11bd4:	203e8d1e 	bne	r4,zero,1160c <__alt_data_end+0xfc01160c>
   11bd8:	dc401f17 	ldw	r17,124(sp)
   11bdc:	40800115 	stw	r2,4(r8)
   11be0:	44000015 	stw	r16,0(r8)
   11be4:	8c400044 	addi	r17,r17,1
   11be8:	d8c02015 	stw	r3,128(sp)
   11bec:	dc401f15 	stw	r17,124(sp)
   11bf0:	008001c4 	movi	r2,7
   11bf4:	147f7f16 	blt	r2,r17,119f4 <__alt_data_end+0xfc0119f4>
   11bf8:	45800204 	addi	r22,r8,8
   11bfc:	003eac06 	br	116b0 <__alt_data_end+0xfc0116b0>
   11c00:	d9402d17 	ldw	r5,180(sp)
   11c04:	d9801e04 	addi	r6,sp,120
   11c08:	9809883a 	mov	r4,r19
   11c0c:	001951c0 	call	1951c <__ssprint_r>
   11c10:	103b501e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11c14:	d8c02017 	ldw	r3,128(sp)
   11c18:	dc401f17 	ldw	r17,124(sp)
   11c1c:	da000404 	addi	r8,sp,16
   11c20:	003e8406 	br	11634 <__alt_data_end+0xfc011634>
   11c24:	d9402d17 	ldw	r5,180(sp)
   11c28:	d9801e04 	addi	r6,sp,120
   11c2c:	9809883a 	mov	r4,r19
   11c30:	001951c0 	call	1951c <__ssprint_r>
   11c34:	103b471e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11c38:	d8c02017 	ldw	r3,128(sp)
   11c3c:	dc401f17 	ldw	r17,124(sp)
   11c40:	dd800404 	addi	r22,sp,16
   11c44:	003e8606 	br	11660 <__alt_data_end+0xfc011660>
   11c48:	0029883a 	mov	r20,zero
   11c4c:	a5000c04 	addi	r20,r20,48
   11c50:	dc001dc4 	addi	r16,sp,119
   11c54:	dd001dc5 	stb	r20,119(sp)
   11c58:	003f3806 	br	1193c <__alt_data_end+0xfc01193c>
   11c5c:	d9402d17 	ldw	r5,180(sp)
   11c60:	d9801e04 	addi	r6,sp,120
   11c64:	9809883a 	mov	r4,r19
   11c68:	001951c0 	call	1951c <__ssprint_r>
   11c6c:	103b391e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11c70:	d8c02017 	ldw	r3,128(sp)
   11c74:	da000404 	addi	r8,sp,16
   11c78:	003c7306 	br	10e48 <__alt_data_end+0xfc010e48>
   11c7c:	d9003617 	ldw	r4,216(sp)
   11c80:	d9403717 	ldw	r5,220(sp)
   11c84:	da003e15 	stw	r8,248(sp)
   11c88:	001936c0 	call	1936c <__fpclassifyd>
   11c8c:	da003e17 	ldw	r8,248(sp)
   11c90:	1000bd1e 	bne	r2,zero,11f88 <___svfprintf_internal_r+0x19d0>
   11c94:	008011c4 	movi	r2,71
   11c98:	14411e0e 	bge	r2,r17,12114 <___svfprintf_internal_r+0x1b5c>
   11c9c:	040000f4 	movhi	r16,3
   11ca0:	842df004 	addi	r16,r16,-18496
   11ca4:	00c000c4 	movi	r3,3
   11ca8:	00bfdfc4 	movi	r2,-129
   11cac:	d8c02915 	stw	r3,164(sp)
   11cb0:	90a4703a 	and	r18,r18,r2
   11cb4:	df002783 	ldbu	fp,158(sp)
   11cb8:	d8c02b15 	stw	r3,172(sp)
   11cbc:	d8002a15 	stw	zero,168(sp)
   11cc0:	d8003215 	stw	zero,200(sp)
   11cc4:	003bfa06 	br	10cb0 <__alt_data_end+0xfc010cb0>
   11cc8:	9080100c 	andi	r2,r18,64
   11ccc:	d8002785 	stb	zero,158(sp)
   11cd0:	10009426 	beq	r2,zero,11f24 <___svfprintf_internal_r+0x196c>
   11cd4:	d9402e17 	ldw	r5,184(sp)
   11cd8:	d8c02a17 	ldw	r3,168(sp)
   11cdc:	002d883a 	mov	r22,zero
   11ce0:	28800104 	addi	r2,r5,4
   11ce4:	2d00000b 	ldhu	r20,0(r5)
   11ce8:	183ec10e 	bge	r3,zero,117f0 <__alt_data_end+0xfc0117f0>
   11cec:	a586b03a 	or	r3,r20,r22
   11cf0:	d8802e15 	stw	r2,184(sp)
   11cf4:	183ec21e 	bne	r3,zero,11800 <__alt_data_end+0xfc011800>
   11cf8:	0039883a 	mov	fp,zero
   11cfc:	0005883a 	mov	r2,zero
   11d00:	003db806 	br	113e4 <__alt_data_end+0xfc0113e4>
   11d04:	d8c02e17 	ldw	r3,184(sp)
   11d08:	d9002e17 	ldw	r4,184(sp)
   11d0c:	d9402e17 	ldw	r5,184(sp)
   11d10:	18c00017 	ldw	r3,0(r3)
   11d14:	21000117 	ldw	r4,4(r4)
   11d18:	29400204 	addi	r5,r5,8
   11d1c:	d8c03615 	stw	r3,216(sp)
   11d20:	d9003715 	stw	r4,220(sp)
   11d24:	d9402e15 	stw	r5,184(sp)
   11d28:	003b5a06 	br	10a94 <__alt_data_end+0xfc010a94>
   11d2c:	9080100c 	andi	r2,r18,64
   11d30:	10010726 	beq	r2,zero,12150 <___svfprintf_internal_r+0x1b98>
   11d34:	d8802e17 	ldw	r2,184(sp)
   11d38:	1500000f 	ldh	r20,0(r2)
   11d3c:	10800104 	addi	r2,r2,4
   11d40:	d8802e15 	stw	r2,184(sp)
   11d44:	a02dd7fa 	srai	r22,r20,31
   11d48:	b005883a 	mov	r2,r22
   11d4c:	003b7d06 	br	10b44 <__alt_data_end+0xfc010b44>
   11d50:	9080100c 	andi	r2,r18,64
   11d54:	10010526 	beq	r2,zero,1216c <___svfprintf_internal_r+0x1bb4>
   11d58:	d8c02e17 	ldw	r3,184(sp)
   11d5c:	002d883a 	mov	r22,zero
   11d60:	1d00000b 	ldhu	r20,0(r3)
   11d64:	18c00104 	addi	r3,r3,4
   11d68:	d8c02e15 	stw	r3,184(sp)
   11d6c:	003ce206 	br	110f8 <__alt_data_end+0xfc0110f8>
   11d70:	bc400007 	ldb	r17,0(r23)
   11d74:	003a6506 	br	1070c <__alt_data_end+0xfc01070c>
   11d78:	9080040c 	andi	r2,r18,16
   11d7c:	10010126 	beq	r2,zero,12184 <___svfprintf_internal_r+0x1bcc>
   11d80:	d8c02e17 	ldw	r3,184(sp)
   11d84:	d9002f17 	ldw	r4,188(sp)
   11d88:	18800017 	ldw	r2,0(r3)
   11d8c:	18c00104 	addi	r3,r3,4
   11d90:	d8c02e15 	stw	r3,184(sp)
   11d94:	11000015 	stw	r4,0(r2)
   11d98:	003a3206 	br	10664 <__alt_data_end+0xfc010664>
   11d9c:	d9002a17 	ldw	r4,168(sp)
   11da0:	d8002785 	stb	zero,158(sp)
   11da4:	203d8d16 	blt	r4,zero,113dc <__alt_data_end+0xfc0113dc>
   11da8:	00bfdfc4 	movi	r2,-129
   11dac:	90a4703a 	and	r18,r18,r2
   11db0:	003ad506 	br	10908 <__alt_data_end+0xfc010908>
   11db4:	014000f4 	movhi	r5,3
   11db8:	296dfd84 	addi	r5,r5,-18442
   11dbc:	d9402c15 	stw	r5,176(sp)
   11dc0:	d9402c17 	ldw	r5,176(sp)
   11dc4:	1c47883a 	add	r3,r3,r17
   11dc8:	10800044 	addi	r2,r2,1
   11dcc:	41400015 	stw	r5,0(r8)
   11dd0:	44400115 	stw	r17,4(r8)
   11dd4:	d8c02015 	stw	r3,128(sp)
   11dd8:	d8801f15 	stw	r2,124(sp)
   11ddc:	010001c4 	movi	r4,7
   11de0:	20bf3016 	blt	r4,r2,11aa4 <__alt_data_end+0xfc011aa4>
   11de4:	42000204 	addi	r8,r8,8
   11de8:	003f3506 	br	11ac0 <__alt_data_end+0xfc011ac0>
   11dec:	010000f4 	movhi	r4,3
   11df0:	212dfd84 	addi	r4,r4,-18442
   11df4:	d9002c15 	stw	r4,176(sp)
   11df8:	003c3c06 	br	10eec <__alt_data_end+0xfc010eec>
   11dfc:	d9402d17 	ldw	r5,180(sp)
   11e00:	d9801e04 	addi	r6,sp,120
   11e04:	9809883a 	mov	r4,r19
   11e08:	001951c0 	call	1951c <__ssprint_r>
   11e0c:	103ad11e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11e10:	d8c02017 	ldw	r3,128(sp)
   11e14:	da000404 	addi	r8,sp,16
   11e18:	003d9306 	br	11468 <__alt_data_end+0xfc011468>
   11e1c:	d8801f17 	ldw	r2,124(sp)
   11e20:	014000f4 	movhi	r5,3
   11e24:	01000044 	movi	r4,1
   11e28:	18c00044 	addi	r3,r3,1
   11e2c:	10800044 	addi	r2,r2,1
   11e30:	296dfd04 	addi	r5,r5,-18444
   11e34:	41000115 	stw	r4,4(r8)
   11e38:	41400015 	stw	r5,0(r8)
   11e3c:	d8c02015 	stw	r3,128(sp)
   11e40:	d8801f15 	stw	r2,124(sp)
   11e44:	010001c4 	movi	r4,7
   11e48:	2080b516 	blt	r4,r2,12120 <___svfprintf_internal_r+0x1b68>
   11e4c:	42000204 	addi	r8,r8,8
   11e50:	8800041e 	bne	r17,zero,11e64 <___svfprintf_internal_r+0x18ac>
   11e54:	d8803317 	ldw	r2,204(sp)
   11e58:	1000021e 	bne	r2,zero,11e64 <___svfprintf_internal_r+0x18ac>
   11e5c:	9080004c 	andi	r2,r18,1
   11e60:	103c3926 	beq	r2,zero,10f48 <__alt_data_end+0xfc010f48>
   11e64:	d9003817 	ldw	r4,224(sp)
   11e68:	d8801f17 	ldw	r2,124(sp)
   11e6c:	d9403417 	ldw	r5,208(sp)
   11e70:	20c7883a 	add	r3,r4,r3
   11e74:	10800044 	addi	r2,r2,1
   11e78:	41000115 	stw	r4,4(r8)
   11e7c:	41400015 	stw	r5,0(r8)
   11e80:	d8c02015 	stw	r3,128(sp)
   11e84:	d8801f15 	stw	r2,124(sp)
   11e88:	010001c4 	movi	r4,7
   11e8c:	20818016 	blt	r4,r2,12490 <___svfprintf_internal_r+0x1ed8>
   11e90:	42000204 	addi	r8,r8,8
   11e94:	0463c83a 	sub	r17,zero,r17
   11e98:	0440cb0e 	bge	zero,r17,121c8 <___svfprintf_internal_r+0x1c10>
   11e9c:	05800404 	movi	r22,16
   11ea0:	b440e80e 	bge	r22,r17,12244 <___svfprintf_internal_r+0x1c8c>
   11ea4:	014000f4 	movhi	r5,3
   11ea8:	296dfd84 	addi	r5,r5,-18442
   11eac:	d9402c15 	stw	r5,176(sp)
   11eb0:	070001c4 	movi	fp,7
   11eb4:	dd002d17 	ldw	r20,180(sp)
   11eb8:	00000306 	br	11ec8 <___svfprintf_internal_r+0x1910>
   11ebc:	42000204 	addi	r8,r8,8
   11ec0:	8c7ffc04 	addi	r17,r17,-16
   11ec4:	b440e20e 	bge	r22,r17,12250 <___svfprintf_internal_r+0x1c98>
   11ec8:	18c00404 	addi	r3,r3,16
   11ecc:	10800044 	addi	r2,r2,1
   11ed0:	45400015 	stw	r21,0(r8)
   11ed4:	45800115 	stw	r22,4(r8)
   11ed8:	d8c02015 	stw	r3,128(sp)
   11edc:	d8801f15 	stw	r2,124(sp)
   11ee0:	e0bff60e 	bge	fp,r2,11ebc <__alt_data_end+0xfc011ebc>
   11ee4:	d9801e04 	addi	r6,sp,120
   11ee8:	a00b883a 	mov	r5,r20
   11eec:	9809883a 	mov	r4,r19
   11ef0:	001951c0 	call	1951c <__ssprint_r>
   11ef4:	103a971e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11ef8:	d8c02017 	ldw	r3,128(sp)
   11efc:	d8801f17 	ldw	r2,124(sp)
   11f00:	da000404 	addi	r8,sp,16
   11f04:	003fee06 	br	11ec0 <__alt_data_end+0xfc011ec0>
   11f08:	d9002e17 	ldw	r4,184(sp)
   11f0c:	d9402a17 	ldw	r5,168(sp)
   11f10:	002d883a 	mov	r22,zero
   11f14:	20800104 	addi	r2,r4,4
   11f18:	25000017 	ldw	r20,0(r4)
   11f1c:	283e7d0e 	bge	r5,zero,11914 <__alt_data_end+0xfc011914>
   11f20:	003eda06 	br	11a8c <__alt_data_end+0xfc011a8c>
   11f24:	d9002e17 	ldw	r4,184(sp)
   11f28:	d9402a17 	ldw	r5,168(sp)
   11f2c:	002d883a 	mov	r22,zero
   11f30:	20800104 	addi	r2,r4,4
   11f34:	25000017 	ldw	r20,0(r4)
   11f38:	283e2d0e 	bge	r5,zero,117f0 <__alt_data_end+0xfc0117f0>
   11f3c:	003f6b06 	br	11cec <__alt_data_end+0xfc011cec>
   11f40:	d8c02e15 	stw	r3,184(sp)
   11f44:	0039883a 	mov	fp,zero
   11f48:	003ed206 	br	11a94 <__alt_data_end+0xfc011a94>
   11f4c:	bc400043 	ldbu	r17,1(r23)
   11f50:	84000814 	ori	r16,r16,32
   11f54:	bdc00044 	addi	r23,r23,1
   11f58:	8c403fcc 	andi	r17,r17,255
   11f5c:	8c40201c 	xori	r17,r17,128
   11f60:	8c7fe004 	addi	r17,r17,-128
   11f64:	0039e906 	br	1070c <__alt_data_end+0xfc01070c>
   11f68:	d9402d17 	ldw	r5,180(sp)
   11f6c:	d9801e04 	addi	r6,sp,120
   11f70:	9809883a 	mov	r4,r19
   11f74:	001951c0 	call	1951c <__ssprint_r>
   11f78:	103a761e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   11f7c:	d8c02017 	ldw	r3,128(sp)
   11f80:	da000404 	addi	r8,sp,16
   11f84:	003d4a06 	br	114b0 <__alt_data_end+0xfc0114b0>
   11f88:	d9002a17 	ldw	r4,168(sp)
   11f8c:	05bff7c4 	movi	r22,-33
   11f90:	00bfffc4 	movi	r2,-1
   11f94:	8dac703a 	and	r22,r17,r22
   11f98:	20806a26 	beq	r4,r2,12144 <___svfprintf_internal_r+0x1b8c>
   11f9c:	008011c4 	movi	r2,71
   11fa0:	b0813726 	beq	r22,r2,12480 <___svfprintf_internal_r+0x1ec8>
   11fa4:	d9003717 	ldw	r4,220(sp)
   11fa8:	90c04014 	ori	r3,r18,256
   11fac:	d8c02c15 	stw	r3,176(sp)
   11fb0:	20015d16 	blt	r4,zero,12528 <___svfprintf_internal_r+0x1f70>
   11fb4:	dd003717 	ldw	r20,220(sp)
   11fb8:	d8002905 	stb	zero,164(sp)
   11fbc:	00801984 	movi	r2,102
   11fc0:	88814026 	beq	r17,r2,124c4 <___svfprintf_internal_r+0x1f0c>
   11fc4:	00801184 	movi	r2,70
   11fc8:	88817126 	beq	r17,r2,12590 <___svfprintf_internal_r+0x1fd8>
   11fcc:	00801144 	movi	r2,69
   11fd0:	b0816226 	beq	r22,r2,1255c <___svfprintf_internal_r+0x1fa4>
   11fd4:	d8c02a17 	ldw	r3,168(sp)
   11fd8:	d8802104 	addi	r2,sp,132
   11fdc:	d8800315 	stw	r2,12(sp)
   11fe0:	d9403617 	ldw	r5,216(sp)
   11fe4:	d8802504 	addi	r2,sp,148
   11fe8:	d8800215 	stw	r2,8(sp)
   11fec:	d8802604 	addi	r2,sp,152
   11ff0:	d8c00015 	stw	r3,0(sp)
   11ff4:	d8800115 	stw	r2,4(sp)
   11ff8:	01c00084 	movi	r7,2
   11ffc:	a00d883a 	mov	r6,r20
   12000:	9809883a 	mov	r4,r19
   12004:	d8c03d15 	stw	r3,244(sp)
   12008:	da003e15 	stw	r8,248(sp)
   1200c:	0014fac0 	call	14fac <_dtoa_r>
   12010:	1021883a 	mov	r16,r2
   12014:	008019c4 	movi	r2,103
   12018:	d8c03d17 	ldw	r3,244(sp)
   1201c:	da003e17 	ldw	r8,248(sp)
   12020:	8880e726 	beq	r17,r2,123c0 <___svfprintf_internal_r+0x1e08>
   12024:	008011c4 	movi	r2,71
   12028:	8880d426 	beq	r17,r2,1237c <___svfprintf_internal_r+0x1dc4>
   1202c:	80f9883a 	add	fp,r16,r3
   12030:	d9003617 	ldw	r4,216(sp)
   12034:	000d883a 	mov	r6,zero
   12038:	000f883a 	mov	r7,zero
   1203c:	a00b883a 	mov	r5,r20
   12040:	da003e15 	stw	r8,248(sp)
   12044:	001e90c0 	call	1e90c <__eqdf2>
   12048:	da003e17 	ldw	r8,248(sp)
   1204c:	1000e426 	beq	r2,zero,123e0 <___svfprintf_internal_r+0x1e28>
   12050:	d8802117 	ldw	r2,132(sp)
   12054:	1700062e 	bgeu	r2,fp,12070 <___svfprintf_internal_r+0x1ab8>
   12058:	01000c04 	movi	r4,48
   1205c:	10c00044 	addi	r3,r2,1
   12060:	d8c02115 	stw	r3,132(sp)
   12064:	11000005 	stb	r4,0(r2)
   12068:	d8802117 	ldw	r2,132(sp)
   1206c:	173ffb36 	bltu	r2,fp,1205c <__alt_data_end+0xfc01205c>
   12070:	1405c83a 	sub	r2,r2,r16
   12074:	d8803315 	stw	r2,204(sp)
   12078:	008011c4 	movi	r2,71
   1207c:	b080c526 	beq	r22,r2,12394 <___svfprintf_internal_r+0x1ddc>
   12080:	00801944 	movi	r2,101
   12084:	1441d80e 	bge	r2,r17,127e8 <___svfprintf_internal_r+0x2230>
   12088:	d8c02617 	ldw	r3,152(sp)
   1208c:	00801984 	movi	r2,102
   12090:	d8c03215 	stw	r3,200(sp)
   12094:	88813426 	beq	r17,r2,12568 <___svfprintf_internal_r+0x1fb0>
   12098:	d8c03217 	ldw	r3,200(sp)
   1209c:	d9003317 	ldw	r4,204(sp)
   120a0:	19012516 	blt	r3,r4,12538 <___svfprintf_internal_r+0x1f80>
   120a4:	9480004c 	andi	r18,r18,1
   120a8:	9001841e 	bne	r18,zero,126bc <___svfprintf_internal_r+0x2104>
   120ac:	1805883a 	mov	r2,r3
   120b0:	1801cb16 	blt	r3,zero,127e0 <___svfprintf_internal_r+0x2228>
   120b4:	d8c03217 	ldw	r3,200(sp)
   120b8:	044019c4 	movi	r17,103
   120bc:	d8c02b15 	stw	r3,172(sp)
   120c0:	df002907 	ldb	fp,164(sp)
   120c4:	e000a61e 	bne	fp,zero,12360 <___svfprintf_internal_r+0x1da8>
   120c8:	df002783 	ldbu	fp,158(sp)
   120cc:	d8802915 	stw	r2,164(sp)
   120d0:	dc802c17 	ldw	r18,176(sp)
   120d4:	d8002a15 	stw	zero,168(sp)
   120d8:	003af506 	br	10cb0 <__alt_data_end+0xfc010cb0>
   120dc:	040000f4 	movhi	r16,3
   120e0:	842ded04 	addi	r16,r16,-18508
   120e4:	003a7e06 	br	10ae0 <__alt_data_end+0xfc010ae0>
   120e8:	d9003917 	ldw	r4,228(sp)
   120ec:	04001004 	movi	r16,64
   120f0:	800b883a 	mov	r5,r16
   120f4:	000f44c0 	call	f44c <_malloc_r>
   120f8:	d9002d17 	ldw	r4,180(sp)
   120fc:	20800015 	stw	r2,0(r4)
   12100:	20800415 	stw	r2,16(r4)
   12104:	1001d026 	beq	r2,zero,12848 <___svfprintf_internal_r+0x2290>
   12108:	d8802d17 	ldw	r2,180(sp)
   1210c:	14000515 	stw	r16,20(r2)
   12110:	00394406 	br	10624 <__alt_data_end+0xfc010624>
   12114:	040000f4 	movhi	r16,3
   12118:	842def04 	addi	r16,r16,-18500
   1211c:	003ee106 	br	11ca4 <__alt_data_end+0xfc011ca4>
   12120:	d9402d17 	ldw	r5,180(sp)
   12124:	d9801e04 	addi	r6,sp,120
   12128:	9809883a 	mov	r4,r19
   1212c:	001951c0 	call	1951c <__ssprint_r>
   12130:	103a081e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   12134:	dc402617 	ldw	r17,152(sp)
   12138:	d8c02017 	ldw	r3,128(sp)
   1213c:	da000404 	addi	r8,sp,16
   12140:	003f4306 	br	11e50 <__alt_data_end+0xfc011e50>
   12144:	01400184 	movi	r5,6
   12148:	d9402a15 	stw	r5,168(sp)
   1214c:	003f9506 	br	11fa4 <__alt_data_end+0xfc011fa4>
   12150:	d8c02e17 	ldw	r3,184(sp)
   12154:	1d000017 	ldw	r20,0(r3)
   12158:	18c00104 	addi	r3,r3,4
   1215c:	d8c02e15 	stw	r3,184(sp)
   12160:	a02dd7fa 	srai	r22,r20,31
   12164:	b005883a 	mov	r2,r22
   12168:	003a7606 	br	10b44 <__alt_data_end+0xfc010b44>
   1216c:	d9002e17 	ldw	r4,184(sp)
   12170:	002d883a 	mov	r22,zero
   12174:	25000017 	ldw	r20,0(r4)
   12178:	21000104 	addi	r4,r4,4
   1217c:	d9002e15 	stw	r4,184(sp)
   12180:	003bdd06 	br	110f8 <__alt_data_end+0xfc0110f8>
   12184:	9480100c 	andi	r18,r18,64
   12188:	90006e26 	beq	r18,zero,12344 <___svfprintf_internal_r+0x1d8c>
   1218c:	d9402e17 	ldw	r5,184(sp)
   12190:	d8c02f17 	ldw	r3,188(sp)
   12194:	28800017 	ldw	r2,0(r5)
   12198:	29400104 	addi	r5,r5,4
   1219c:	d9402e15 	stw	r5,184(sp)
   121a0:	10c0000d 	sth	r3,0(r2)
   121a4:	00392f06 	br	10664 <__alt_data_end+0xfc010664>
   121a8:	d9402d17 	ldw	r5,180(sp)
   121ac:	d9801e04 	addi	r6,sp,120
   121b0:	9809883a 	mov	r4,r19
   121b4:	001951c0 	call	1951c <__ssprint_r>
   121b8:	1039e61e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   121bc:	d8c02017 	ldw	r3,128(sp)
   121c0:	d8801f17 	ldw	r2,124(sp)
   121c4:	da000404 	addi	r8,sp,16
   121c8:	d9403317 	ldw	r5,204(sp)
   121cc:	10800044 	addi	r2,r2,1
   121d0:	44000015 	stw	r16,0(r8)
   121d4:	28c7883a 	add	r3,r5,r3
   121d8:	003b5506 	br	10f30 <__alt_data_end+0xfc010f30>
   121dc:	8009883a 	mov	r4,r16
   121e0:	df003e15 	stw	fp,248(sp)
   121e4:	00105200 	call	10520 <strlen>
   121e8:	d8802b15 	stw	r2,172(sp)
   121ec:	da003e17 	ldw	r8,248(sp)
   121f0:	103c160e 	bge	r2,zero,1124c <__alt_data_end+0xfc01124c>
   121f4:	0005883a 	mov	r2,zero
   121f8:	003c1406 	br	1124c <__alt_data_end+0xfc01124c>
   121fc:	00bfffc4 	movi	r2,-1
   12200:	0039d906 	br	10968 <__alt_data_end+0xfc010968>
   12204:	010000f4 	movhi	r4,3
   12208:	212e0184 	addi	r4,r4,-18426
   1220c:	d9003515 	stw	r4,212(sp)
   12210:	003ae406 	br	10da4 <__alt_data_end+0xfc010da4>
   12214:	013fffc4 	movi	r4,-1
   12218:	0039fa06 	br	10a04 <__alt_data_end+0xfc010a04>
   1221c:	d9402d17 	ldw	r5,180(sp)
   12220:	d9801e04 	addi	r6,sp,120
   12224:	9809883a 	mov	r4,r19
   12228:	001951c0 	call	1951c <__ssprint_r>
   1222c:	1039c91e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   12230:	d8c02017 	ldw	r3,128(sp)
   12234:	da000404 	addi	r8,sp,16
   12238:	003d8406 	br	1184c <__alt_data_end+0xfc01184c>
   1223c:	0023883a 	mov	r17,zero
   12240:	003d8306 	br	11850 <__alt_data_end+0xfc011850>
   12244:	010000f4 	movhi	r4,3
   12248:	212dfd84 	addi	r4,r4,-18442
   1224c:	d9002c15 	stw	r4,176(sp)
   12250:	d9002c17 	ldw	r4,176(sp)
   12254:	1c47883a 	add	r3,r3,r17
   12258:	10800044 	addi	r2,r2,1
   1225c:	41000015 	stw	r4,0(r8)
   12260:	44400115 	stw	r17,4(r8)
   12264:	d8c02015 	stw	r3,128(sp)
   12268:	d8801f15 	stw	r2,124(sp)
   1226c:	010001c4 	movi	r4,7
   12270:	20bfcd16 	blt	r4,r2,121a8 <__alt_data_end+0xfc0121a8>
   12274:	42000204 	addi	r8,r8,8
   12278:	003fd306 	br	121c8 <__alt_data_end+0xfc0121c8>
   1227c:	d9402d17 	ldw	r5,180(sp)
   12280:	d9801e04 	addi	r6,sp,120
   12284:	9809883a 	mov	r4,r19
   12288:	001951c0 	call	1951c <__ssprint_r>
   1228c:	1039b11e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   12290:	d8802617 	ldw	r2,152(sp)
   12294:	d8c02017 	ldw	r3,128(sp)
   12298:	da000404 	addi	r8,sp,16
   1229c:	003e1c06 	br	11b10 <__alt_data_end+0xfc011b10>
   122a0:	d8802a17 	ldw	r2,168(sp)
   122a4:	00c00184 	movi	r3,6
   122a8:	1880012e 	bgeu	r3,r2,122b0 <___svfprintf_internal_r+0x1cf8>
   122ac:	1805883a 	mov	r2,r3
   122b0:	d8802b15 	stw	r2,172(sp)
   122b4:	1000f316 	blt	r2,zero,12684 <___svfprintf_internal_r+0x20cc>
   122b8:	040000f4 	movhi	r16,3
   122bc:	d8802915 	stw	r2,164(sp)
   122c0:	dd002e15 	stw	r20,184(sp)
   122c4:	d8002a15 	stw	zero,168(sp)
   122c8:	d8003215 	stw	zero,200(sp)
   122cc:	842dfb04 	addi	r16,r16,-18452
   122d0:	0039883a 	mov	fp,zero
   122d4:	003a7d06 	br	10ccc <__alt_data_end+0xfc010ccc>
   122d8:	010000f4 	movhi	r4,3
   122dc:	212e0184 	addi	r4,r4,-18426
   122e0:	d9003515 	stw	r4,212(sp)
   122e4:	003b3d06 	br	10fdc <__alt_data_end+0xfc010fdc>
   122e8:	d9402d17 	ldw	r5,180(sp)
   122ec:	d9801e04 	addi	r6,sp,120
   122f0:	9809883a 	mov	r4,r19
   122f4:	001951c0 	call	1951c <__ssprint_r>
   122f8:	1039961e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   122fc:	d8802617 	ldw	r2,152(sp)
   12300:	d9403317 	ldw	r5,204(sp)
   12304:	d8c02017 	ldw	r3,128(sp)
   12308:	da000404 	addi	r8,sp,16
   1230c:	2885c83a 	sub	r2,r5,r2
   12310:	003e1006 	br	11b54 <__alt_data_end+0xfc011b54>
   12314:	00800044 	movi	r2,1
   12318:	10803fcc 	andi	r2,r2,255
   1231c:	00c00044 	movi	r3,1
   12320:	10fa1026 	beq	r2,r3,10b64 <__alt_data_end+0xfc010b64>
   12324:	00c00084 	movi	r3,2
   12328:	10fb8226 	beq	r2,r3,11134 <__alt_data_end+0xfc011134>
   1232c:	003a4206 	br	10c38 <__alt_data_end+0xfc010c38>
   12330:	0021883a 	mov	r16,zero
   12334:	003e0806 	br	11b58 <__alt_data_end+0xfc011b58>
   12338:	07000b44 	movi	fp,45
   1233c:	df002785 	stb	fp,158(sp)
   12340:	0039e306 	br	10ad0 <__alt_data_end+0xfc010ad0>
   12344:	d9002e17 	ldw	r4,184(sp)
   12348:	d9402f17 	ldw	r5,188(sp)
   1234c:	20800017 	ldw	r2,0(r4)
   12350:	21000104 	addi	r4,r4,4
   12354:	d9002e15 	stw	r4,184(sp)
   12358:	11400015 	stw	r5,0(r2)
   1235c:	0038c106 	br	10664 <__alt_data_end+0xfc010664>
   12360:	00c00b44 	movi	r3,45
   12364:	d8c02785 	stb	r3,158(sp)
   12368:	d8802915 	stw	r2,164(sp)
   1236c:	dc802c17 	ldw	r18,176(sp)
   12370:	d8002a15 	stw	zero,168(sp)
   12374:	07000b44 	movi	fp,45
   12378:	003a5106 	br	10cc0 <__alt_data_end+0xfc010cc0>
   1237c:	9080004c 	andi	r2,r18,1
   12380:	1000941e 	bne	r2,zero,125d4 <___svfprintf_internal_r+0x201c>
   12384:	d8802117 	ldw	r2,132(sp)
   12388:	1405c83a 	sub	r2,r2,r16
   1238c:	d8803315 	stw	r2,204(sp)
   12390:	b441151e 	bne	r22,r17,127e8 <___svfprintf_internal_r+0x2230>
   12394:	dd802617 	ldw	r22,152(sp)
   12398:	00bfff44 	movi	r2,-3
   1239c:	b0801a16 	blt	r22,r2,12408 <___svfprintf_internal_r+0x1e50>
   123a0:	d9402a17 	ldw	r5,168(sp)
   123a4:	2d801816 	blt	r5,r22,12408 <___svfprintf_internal_r+0x1e50>
   123a8:	dd803215 	stw	r22,200(sp)
   123ac:	003f3a06 	br	12098 <__alt_data_end+0xfc012098>
   123b0:	1025883a 	mov	r18,r2
   123b4:	0039883a 	mov	fp,zero
   123b8:	00800084 	movi	r2,2
   123bc:	003fd606 	br	12318 <__alt_data_end+0xfc012318>
   123c0:	9080004c 	andi	r2,r18,1
   123c4:	103f191e 	bne	r2,zero,1202c <__alt_data_end+0xfc01202c>
   123c8:	d8802117 	ldw	r2,132(sp)
   123cc:	003f2806 	br	12070 <__alt_data_end+0xfc012070>
   123d0:	010000f4 	movhi	r4,3
   123d4:	212dfd84 	addi	r4,r4,-18442
   123d8:	d9002c15 	stw	r4,176(sp)
   123dc:	003c7c06 	br	115d0 <__alt_data_end+0xfc0115d0>
   123e0:	e005883a 	mov	r2,fp
   123e4:	003f2206 	br	12070 <__alt_data_end+0xfc012070>
   123e8:	d9002a17 	ldw	r4,168(sp)
   123ec:	df002783 	ldbu	fp,158(sp)
   123f0:	dd002e15 	stw	r20,184(sp)
   123f4:	d9002915 	stw	r4,164(sp)
   123f8:	d9002b15 	stw	r4,172(sp)
   123fc:	d8002a15 	stw	zero,168(sp)
   12400:	d8003215 	stw	zero,200(sp)
   12404:	003a2a06 	br	10cb0 <__alt_data_end+0xfc010cb0>
   12408:	8c7fff84 	addi	r17,r17,-2
   1240c:	b5bfffc4 	addi	r22,r22,-1
   12410:	dd802615 	stw	r22,152(sp)
   12414:	dc4022c5 	stb	r17,139(sp)
   12418:	b000c316 	blt	r22,zero,12728 <___svfprintf_internal_r+0x2170>
   1241c:	00800ac4 	movi	r2,43
   12420:	d8802305 	stb	r2,140(sp)
   12424:	00800244 	movi	r2,9
   12428:	15806e16 	blt	r2,r22,125e4 <___svfprintf_internal_r+0x202c>
   1242c:	00800c04 	movi	r2,48
   12430:	b5800c04 	addi	r22,r22,48
   12434:	d8802345 	stb	r2,141(sp)
   12438:	dd802385 	stb	r22,142(sp)
   1243c:	d88023c4 	addi	r2,sp,143
   12440:	df0022c4 	addi	fp,sp,139
   12444:	d8c03317 	ldw	r3,204(sp)
   12448:	1739c83a 	sub	fp,r2,fp
   1244c:	d9003317 	ldw	r4,204(sp)
   12450:	e0c7883a 	add	r3,fp,r3
   12454:	df003b15 	stw	fp,236(sp)
   12458:	d8c02b15 	stw	r3,172(sp)
   1245c:	00800044 	movi	r2,1
   12460:	1100b70e 	bge	r2,r4,12740 <___svfprintf_internal_r+0x2188>
   12464:	d8c02b17 	ldw	r3,172(sp)
   12468:	18c00044 	addi	r3,r3,1
   1246c:	d8c02b15 	stw	r3,172(sp)
   12470:	1805883a 	mov	r2,r3
   12474:	1800b016 	blt	r3,zero,12738 <___svfprintf_internal_r+0x2180>
   12478:	d8003215 	stw	zero,200(sp)
   1247c:	003f1006 	br	120c0 <__alt_data_end+0xfc0120c0>
   12480:	d8802a17 	ldw	r2,168(sp)
   12484:	103ec71e 	bne	r2,zero,11fa4 <__alt_data_end+0xfc011fa4>
   12488:	dc002a15 	stw	r16,168(sp)
   1248c:	003ec506 	br	11fa4 <__alt_data_end+0xfc011fa4>
   12490:	d9402d17 	ldw	r5,180(sp)
   12494:	d9801e04 	addi	r6,sp,120
   12498:	9809883a 	mov	r4,r19
   1249c:	001951c0 	call	1951c <__ssprint_r>
   124a0:	10392c1e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   124a4:	dc402617 	ldw	r17,152(sp)
   124a8:	d8c02017 	ldw	r3,128(sp)
   124ac:	d8801f17 	ldw	r2,124(sp)
   124b0:	da000404 	addi	r8,sp,16
   124b4:	003e7706 	br	11e94 <__alt_data_end+0xfc011e94>
   124b8:	182f883a 	mov	r23,r3
   124bc:	d8002a15 	stw	zero,168(sp)
   124c0:	00389306 	br	10710 <__alt_data_end+0xfc010710>
   124c4:	d8c02a17 	ldw	r3,168(sp)
   124c8:	d8802104 	addi	r2,sp,132
   124cc:	d8800315 	stw	r2,12(sp)
   124d0:	d9403617 	ldw	r5,216(sp)
   124d4:	d8802504 	addi	r2,sp,148
   124d8:	d8800215 	stw	r2,8(sp)
   124dc:	d8802604 	addi	r2,sp,152
   124e0:	d8c00015 	stw	r3,0(sp)
   124e4:	9809883a 	mov	r4,r19
   124e8:	d8800115 	stw	r2,4(sp)
   124ec:	01c000c4 	movi	r7,3
   124f0:	a00d883a 	mov	r6,r20
   124f4:	da003e15 	stw	r8,248(sp)
   124f8:	0014fac0 	call	14fac <_dtoa_r>
   124fc:	d9002a17 	ldw	r4,168(sp)
   12500:	da003e17 	ldw	r8,248(sp)
   12504:	1021883a 	mov	r16,r2
   12508:	1139883a 	add	fp,r2,r4
   1250c:	2007883a 	mov	r3,r4
   12510:	81000007 	ldb	r4,0(r16)
   12514:	00800c04 	movi	r2,48
   12518:	20806f26 	beq	r4,r2,126d8 <___svfprintf_internal_r+0x2120>
   1251c:	d8c02617 	ldw	r3,152(sp)
   12520:	e0f9883a 	add	fp,fp,r3
   12524:	003ec206 	br	12030 <__alt_data_end+0xfc012030>
   12528:	00c00b44 	movi	r3,45
   1252c:	2520003c 	xorhi	r20,r4,32768
   12530:	d8c02905 	stb	r3,164(sp)
   12534:	003ea106 	br	11fbc <__alt_data_end+0xfc011fbc>
   12538:	d8c03217 	ldw	r3,200(sp)
   1253c:	00c0890e 	bge	zero,r3,12764 <___svfprintf_internal_r+0x21ac>
   12540:	00800044 	movi	r2,1
   12544:	d9003317 	ldw	r4,204(sp)
   12548:	1105883a 	add	r2,r2,r4
   1254c:	d8802b15 	stw	r2,172(sp)
   12550:	10005f16 	blt	r2,zero,126d0 <___svfprintf_internal_r+0x2118>
   12554:	044019c4 	movi	r17,103
   12558:	003ed906 	br	120c0 <__alt_data_end+0xfc0120c0>
   1255c:	d9002a17 	ldw	r4,168(sp)
   12560:	20c00044 	addi	r3,r4,1
   12564:	003e9c06 	br	11fd8 <__alt_data_end+0xfc011fd8>
   12568:	d9002a17 	ldw	r4,168(sp)
   1256c:	00c0680e 	bge	zero,r3,12710 <___svfprintf_internal_r+0x2158>
   12570:	2000461e 	bne	r4,zero,1268c <___svfprintf_internal_r+0x20d4>
   12574:	9480004c 	andi	r18,r18,1
   12578:	9000441e 	bne	r18,zero,1268c <___svfprintf_internal_r+0x20d4>
   1257c:	1805883a 	mov	r2,r3
   12580:	1800a116 	blt	r3,zero,12808 <___svfprintf_internal_r+0x2250>
   12584:	d8c03217 	ldw	r3,200(sp)
   12588:	d8c02b15 	stw	r3,172(sp)
   1258c:	003ecc06 	br	120c0 <__alt_data_end+0xfc0120c0>
   12590:	d9402a17 	ldw	r5,168(sp)
   12594:	d8802104 	addi	r2,sp,132
   12598:	d8800315 	stw	r2,12(sp)
   1259c:	d9400015 	stw	r5,0(sp)
   125a0:	d8802504 	addi	r2,sp,148
   125a4:	d9403617 	ldw	r5,216(sp)
   125a8:	d8800215 	stw	r2,8(sp)
   125ac:	d8802604 	addi	r2,sp,152
   125b0:	d8800115 	stw	r2,4(sp)
   125b4:	01c000c4 	movi	r7,3
   125b8:	a00d883a 	mov	r6,r20
   125bc:	9809883a 	mov	r4,r19
   125c0:	da003e15 	stw	r8,248(sp)
   125c4:	0014fac0 	call	14fac <_dtoa_r>
   125c8:	d8c02a17 	ldw	r3,168(sp)
   125cc:	da003e17 	ldw	r8,248(sp)
   125d0:	1021883a 	mov	r16,r2
   125d4:	00801184 	movi	r2,70
   125d8:	80f9883a 	add	fp,r16,r3
   125dc:	88bfcc26 	beq	r17,r2,12510 <__alt_data_end+0xfc012510>
   125e0:	003e9306 	br	12030 <__alt_data_end+0xfc012030>
   125e4:	df0022c4 	addi	fp,sp,139
   125e8:	dc002a15 	stw	r16,168(sp)
   125ec:	9829883a 	mov	r20,r19
   125f0:	e021883a 	mov	r16,fp
   125f4:	4027883a 	mov	r19,r8
   125f8:	b009883a 	mov	r4,r22
   125fc:	01400284 	movi	r5,10
   12600:	000d7880 	call	d788 <__modsi3>
   12604:	10800c04 	addi	r2,r2,48
   12608:	843fffc4 	addi	r16,r16,-1
   1260c:	b009883a 	mov	r4,r22
   12610:	01400284 	movi	r5,10
   12614:	80800005 	stb	r2,0(r16)
   12618:	000d7040 	call	d704 <__divsi3>
   1261c:	102d883a 	mov	r22,r2
   12620:	00800244 	movi	r2,9
   12624:	15bff416 	blt	r2,r22,125f8 <__alt_data_end+0xfc0125f8>
   12628:	9811883a 	mov	r8,r19
   1262c:	b0800c04 	addi	r2,r22,48
   12630:	a027883a 	mov	r19,r20
   12634:	8029883a 	mov	r20,r16
   12638:	a17fffc4 	addi	r5,r20,-1
   1263c:	a0bfffc5 	stb	r2,-1(r20)
   12640:	dc002a17 	ldw	r16,168(sp)
   12644:	2f00782e 	bgeu	r5,fp,12828 <___svfprintf_internal_r+0x2270>
   12648:	d9c02384 	addi	r7,sp,142
   1264c:	3d0fc83a 	sub	r7,r7,r20
   12650:	d9002344 	addi	r4,sp,141
   12654:	e1cf883a 	add	r7,fp,r7
   12658:	00000106 	br	12660 <___svfprintf_internal_r+0x20a8>
   1265c:	28800003 	ldbu	r2,0(r5)
   12660:	20800005 	stb	r2,0(r4)
   12664:	21000044 	addi	r4,r4,1
   12668:	29400044 	addi	r5,r5,1
   1266c:	21fffb1e 	bne	r4,r7,1265c <__alt_data_end+0xfc01265c>
   12670:	d8802304 	addi	r2,sp,140
   12674:	1505c83a 	sub	r2,r2,r20
   12678:	d8c02344 	addi	r3,sp,141
   1267c:	1885883a 	add	r2,r3,r2
   12680:	003f7006 	br	12444 <__alt_data_end+0xfc012444>
   12684:	0005883a 	mov	r2,zero
   12688:	003f0b06 	br	122b8 <__alt_data_end+0xfc0122b8>
   1268c:	d9002a17 	ldw	r4,168(sp)
   12690:	d8c03217 	ldw	r3,200(sp)
   12694:	20800044 	addi	r2,r4,1
   12698:	1885883a 	add	r2,r3,r2
   1269c:	d8802b15 	stw	r2,172(sp)
   126a0:	103e870e 	bge	r2,zero,120c0 <__alt_data_end+0xfc0120c0>
   126a4:	0005883a 	mov	r2,zero
   126a8:	003e8506 	br	120c0 <__alt_data_end+0xfc0120c0>
   126ac:	010000f4 	movhi	r4,3
   126b0:	212dfd84 	addi	r4,r4,-18442
   126b4:	d9002c15 	stw	r4,176(sp)
   126b8:	003cc506 	br	119d0 <__alt_data_end+0xfc0119d0>
   126bc:	d8c03217 	ldw	r3,200(sp)
   126c0:	18c00044 	addi	r3,r3,1
   126c4:	d8c02b15 	stw	r3,172(sp)
   126c8:	1805883a 	mov	r2,r3
   126cc:	183fa10e 	bge	r3,zero,12554 <__alt_data_end+0xfc012554>
   126d0:	0005883a 	mov	r2,zero
   126d4:	003f9f06 	br	12554 <__alt_data_end+0xfc012554>
   126d8:	d9003617 	ldw	r4,216(sp)
   126dc:	000d883a 	mov	r6,zero
   126e0:	000f883a 	mov	r7,zero
   126e4:	a00b883a 	mov	r5,r20
   126e8:	d8c03d15 	stw	r3,244(sp)
   126ec:	da003e15 	stw	r8,248(sp)
   126f0:	001e90c0 	call	1e90c <__eqdf2>
   126f4:	d8c03d17 	ldw	r3,244(sp)
   126f8:	da003e17 	ldw	r8,248(sp)
   126fc:	103f8726 	beq	r2,zero,1251c <__alt_data_end+0xfc01251c>
   12700:	00800044 	movi	r2,1
   12704:	10c7c83a 	sub	r3,r2,r3
   12708:	d8c02615 	stw	r3,152(sp)
   1270c:	003f8406 	br	12520 <__alt_data_end+0xfc012520>
   12710:	20000e1e 	bne	r4,zero,1274c <___svfprintf_internal_r+0x2194>
   12714:	9480004c 	andi	r18,r18,1
   12718:	90000c1e 	bne	r18,zero,1274c <___svfprintf_internal_r+0x2194>
   1271c:	00800044 	movi	r2,1
   12720:	d8802b15 	stw	r2,172(sp)
   12724:	003e6606 	br	120c0 <__alt_data_end+0xfc0120c0>
   12728:	00800b44 	movi	r2,45
   1272c:	05adc83a 	sub	r22,zero,r22
   12730:	d8802305 	stb	r2,140(sp)
   12734:	003f3b06 	br	12424 <__alt_data_end+0xfc012424>
   12738:	0005883a 	mov	r2,zero
   1273c:	003f4e06 	br	12478 <__alt_data_end+0xfc012478>
   12740:	90a4703a 	and	r18,r18,r2
   12744:	903f4a26 	beq	r18,zero,12470 <__alt_data_end+0xfc012470>
   12748:	003f4606 	br	12464 <__alt_data_end+0xfc012464>
   1274c:	d8c02a17 	ldw	r3,168(sp)
   12750:	18c00084 	addi	r3,r3,2
   12754:	d8c02b15 	stw	r3,172(sp)
   12758:	1805883a 	mov	r2,r3
   1275c:	183e580e 	bge	r3,zero,120c0 <__alt_data_end+0xfc0120c0>
   12760:	003fd006 	br	126a4 <__alt_data_end+0xfc0126a4>
   12764:	00800084 	movi	r2,2
   12768:	10c5c83a 	sub	r2,r2,r3
   1276c:	003f7506 	br	12544 <__alt_data_end+0xfc012544>
   12770:	d9402e17 	ldw	r5,184(sp)
   12774:	d9002e17 	ldw	r4,184(sp)
   12778:	bc400043 	ldbu	r17,1(r23)
   1277c:	29400017 	ldw	r5,0(r5)
   12780:	20800104 	addi	r2,r4,4
   12784:	d8802e15 	stw	r2,184(sp)
   12788:	d9402a15 	stw	r5,168(sp)
   1278c:	182f883a 	mov	r23,r3
   12790:	283df10e 	bge	r5,zero,11f58 <__alt_data_end+0xfc011f58>
   12794:	8c403fcc 	andi	r17,r17,255
   12798:	017fffc4 	movi	r5,-1
   1279c:	8c40201c 	xori	r17,r17,128
   127a0:	d9402a15 	stw	r5,168(sp)
   127a4:	8c7fe004 	addi	r17,r17,-128
   127a8:	0037d806 	br	1070c <__alt_data_end+0xfc01070c>
   127ac:	9080004c 	andi	r2,r18,1
   127b0:	0039883a 	mov	fp,zero
   127b4:	10000726 	beq	r2,zero,127d4 <___svfprintf_internal_r+0x221c>
   127b8:	d8c02817 	ldw	r3,160(sp)
   127bc:	dc001dc4 	addi	r16,sp,119
   127c0:	00800c04 	movi	r2,48
   127c4:	1c07c83a 	sub	r3,r3,r16
   127c8:	d8801dc5 	stb	r2,119(sp)
   127cc:	d8c02b15 	stw	r3,172(sp)
   127d0:	00393106 	br	10c98 <__alt_data_end+0xfc010c98>
   127d4:	d8002b15 	stw	zero,172(sp)
   127d8:	dc001e04 	addi	r16,sp,120
   127dc:	00392e06 	br	10c98 <__alt_data_end+0xfc010c98>
   127e0:	0005883a 	mov	r2,zero
   127e4:	003e3306 	br	120b4 <__alt_data_end+0xfc0120b4>
   127e8:	dd802617 	ldw	r22,152(sp)
   127ec:	003f0706 	br	1240c <__alt_data_end+0xfc01240c>
   127f0:	d8c02b03 	ldbu	r3,172(sp)
   127f4:	d8c02785 	stb	r3,158(sp)
   127f8:	003a3506 	br	110d0 <__alt_data_end+0xfc0110d0>
   127fc:	d8c02b03 	ldbu	r3,172(sp)
   12800:	d8c02785 	stb	r3,158(sp)
   12804:	003a1706 	br	11064 <__alt_data_end+0xfc011064>
   12808:	0005883a 	mov	r2,zero
   1280c:	003f5d06 	br	12584 <__alt_data_end+0xfc012584>
   12810:	d8c02b03 	ldbu	r3,172(sp)
   12814:	d8c02785 	stb	r3,158(sp)
   12818:	0038f306 	br	10be8 <__alt_data_end+0xfc010be8>
   1281c:	d8c02b03 	ldbu	r3,172(sp)
   12820:	d8c02785 	stb	r3,158(sp)
   12824:	0038be06 	br	10b20 <__alt_data_end+0xfc010b20>
   12828:	d8802344 	addi	r2,sp,141
   1282c:	003f0506 	br	12444 <__alt_data_end+0xfc012444>
   12830:	d8c02b03 	ldbu	r3,172(sp)
   12834:	d8c02785 	stb	r3,158(sp)
   12838:	00388b06 	br	10a68 <__alt_data_end+0xfc010a68>
   1283c:	d8c02b03 	ldbu	r3,172(sp)
   12840:	d8c02785 	stb	r3,158(sp)
   12844:	003ad706 	br	113a4 <__alt_data_end+0xfc0113a4>
   12848:	d9403917 	ldw	r5,228(sp)
   1284c:	00800304 	movi	r2,12
   12850:	28800015 	stw	r2,0(r5)
   12854:	00bfffc4 	movi	r2,-1
   12858:	00384306 	br	10968 <__alt_data_end+0xfc010968>
   1285c:	d8c02b03 	ldbu	r3,172(sp)
   12860:	d8c02785 	stb	r3,158(sp)
   12864:	003ab606 	br	11340 <__alt_data_end+0xfc011340>
   12868:	d8c02b03 	ldbu	r3,172(sp)
   1286c:	d8c02785 	stb	r3,158(sp)
   12870:	003a8906 	br	11298 <__alt_data_end+0xfc011298>

00012874 <_times_r>:
   12874:	2809883a 	mov	r4,r5
   12878:	00209241 	jmpi	20924 <times>

0001287c <___vfprintf_internal_r>:
   1287c:	deffb804 	addi	sp,sp,-288
   12880:	dfc04715 	stw	ra,284(sp)
   12884:	ddc04515 	stw	r23,276(sp)
   12888:	dd404315 	stw	r21,268(sp)
   1288c:	d9002d15 	stw	r4,180(sp)
   12890:	282f883a 	mov	r23,r5
   12894:	302b883a 	mov	r21,r6
   12898:	d9c02e15 	stw	r7,184(sp)
   1289c:	df004615 	stw	fp,280(sp)
   128a0:	dd804415 	stw	r22,272(sp)
   128a4:	dd004215 	stw	r20,264(sp)
   128a8:	dcc04115 	stw	r19,260(sp)
   128ac:	dc804015 	stw	r18,256(sp)
   128b0:	dc403f15 	stw	r17,252(sp)
   128b4:	dc003e15 	stw	r16,248(sp)
   128b8:	00177bc0 	call	177bc <_localeconv_r>
   128bc:	10800017 	ldw	r2,0(r2)
   128c0:	1009883a 	mov	r4,r2
   128c4:	d8803415 	stw	r2,208(sp)
   128c8:	00105200 	call	10520 <strlen>
   128cc:	d8803715 	stw	r2,220(sp)
   128d0:	d8802d17 	ldw	r2,180(sp)
   128d4:	10000226 	beq	r2,zero,128e0 <___vfprintf_internal_r+0x64>
   128d8:	10800e17 	ldw	r2,56(r2)
   128dc:	1000fb26 	beq	r2,zero,12ccc <___vfprintf_internal_r+0x450>
   128e0:	b880030b 	ldhu	r2,12(r23)
   128e4:	10c8000c 	andi	r3,r2,8192
   128e8:	1800061e 	bne	r3,zero,12904 <___vfprintf_internal_r+0x88>
   128ec:	b9001917 	ldw	r4,100(r23)
   128f0:	00f7ffc4 	movi	r3,-8193
   128f4:	10880014 	ori	r2,r2,8192
   128f8:	20c6703a 	and	r3,r4,r3
   128fc:	b880030d 	sth	r2,12(r23)
   12900:	b8c01915 	stw	r3,100(r23)
   12904:	10c0020c 	andi	r3,r2,8
   12908:	1800c326 	beq	r3,zero,12c18 <___vfprintf_internal_r+0x39c>
   1290c:	b8c00417 	ldw	r3,16(r23)
   12910:	1800c126 	beq	r3,zero,12c18 <___vfprintf_internal_r+0x39c>
   12914:	1080068c 	andi	r2,r2,26
   12918:	00c00284 	movi	r3,10
   1291c:	10c0c626 	beq	r2,r3,12c38 <___vfprintf_internal_r+0x3bc>
   12920:	d8c00404 	addi	r3,sp,16
   12924:	050000f4 	movhi	r20,3
   12928:	d9001e04 	addi	r4,sp,120
   1292c:	a52e0584 	addi	r20,r20,-18410
   12930:	d8c01e15 	stw	r3,120(sp)
   12934:	d8002015 	stw	zero,128(sp)
   12938:	d8001f15 	stw	zero,124(sp)
   1293c:	d8003315 	stw	zero,204(sp)
   12940:	d8003615 	stw	zero,216(sp)
   12944:	d8003815 	stw	zero,224(sp)
   12948:	1811883a 	mov	r8,r3
   1294c:	d8003915 	stw	zero,228(sp)
   12950:	d8003a15 	stw	zero,232(sp)
   12954:	d8002f15 	stw	zero,188(sp)
   12958:	d9002815 	stw	r4,160(sp)
   1295c:	a8800007 	ldb	r2,0(r21)
   12960:	10028b26 	beq	r2,zero,13390 <___vfprintf_internal_r+0xb14>
   12964:	00c00944 	movi	r3,37
   12968:	a823883a 	mov	r17,r21
   1296c:	10c0021e 	bne	r2,r3,12978 <___vfprintf_internal_r+0xfc>
   12970:	00001406 	br	129c4 <___vfprintf_internal_r+0x148>
   12974:	10c00326 	beq	r2,r3,12984 <___vfprintf_internal_r+0x108>
   12978:	8c400044 	addi	r17,r17,1
   1297c:	88800007 	ldb	r2,0(r17)
   12980:	103ffc1e 	bne	r2,zero,12974 <__alt_data_end+0xfc012974>
   12984:	8d61c83a 	sub	r16,r17,r21
   12988:	80000e26 	beq	r16,zero,129c4 <___vfprintf_internal_r+0x148>
   1298c:	d8c02017 	ldw	r3,128(sp)
   12990:	d8801f17 	ldw	r2,124(sp)
   12994:	45400015 	stw	r21,0(r8)
   12998:	1c07883a 	add	r3,r3,r16
   1299c:	10800044 	addi	r2,r2,1
   129a0:	d8c02015 	stw	r3,128(sp)
   129a4:	44000115 	stw	r16,4(r8)
   129a8:	d8801f15 	stw	r2,124(sp)
   129ac:	00c001c4 	movi	r3,7
   129b0:	1880a916 	blt	r3,r2,12c58 <___vfprintf_internal_r+0x3dc>
   129b4:	42000204 	addi	r8,r8,8
   129b8:	d9402f17 	ldw	r5,188(sp)
   129bc:	2c0b883a 	add	r5,r5,r16
   129c0:	d9402f15 	stw	r5,188(sp)
   129c4:	88800007 	ldb	r2,0(r17)
   129c8:	1000aa26 	beq	r2,zero,12c74 <___vfprintf_internal_r+0x3f8>
   129cc:	8d400044 	addi	r21,r17,1
   129d0:	8c400047 	ldb	r17,1(r17)
   129d4:	0021883a 	mov	r16,zero
   129d8:	00bfffc4 	movi	r2,-1
   129dc:	0025883a 	mov	r18,zero
   129e0:	dc002905 	stb	r16,164(sp)
   129e4:	d8002785 	stb	zero,158(sp)
   129e8:	d8002b05 	stb	zero,172(sp)
   129ec:	d8802a15 	stw	r2,168(sp)
   129f0:	d8003115 	stw	zero,196(sp)
   129f4:	04c01604 	movi	r19,88
   129f8:	05800244 	movi	r22,9
   129fc:	9021883a 	mov	r16,r18
   12a00:	4039883a 	mov	fp,r8
   12a04:	ad400044 	addi	r21,r21,1
   12a08:	88bff804 	addi	r2,r17,-32
   12a0c:	98833236 	bltu	r19,r2,136d8 <___vfprintf_internal_r+0xe5c>
   12a10:	100490ba 	slli	r2,r2,2
   12a14:	00c00074 	movhi	r3,1
   12a18:	18ca8a04 	addi	r3,r3,10792
   12a1c:	10c5883a 	add	r2,r2,r3
   12a20:	10800017 	ldw	r2,0(r2)
   12a24:	1000683a 	jmp	r2
   12a28:	000135d0 	cmplti	zero,zero,1239
   12a2c:	000136d8 	cmpnei	zero,zero,1243
   12a30:	000136d8 	cmpnei	zero,zero,1243
   12a34:	000135f0 	cmpltui	zero,zero,1239
   12a38:	000136d8 	cmpnei	zero,zero,1243
   12a3c:	000136d8 	cmpnei	zero,zero,1243
   12a40:	000136d8 	cmpnei	zero,zero,1243
   12a44:	000136d8 	cmpnei	zero,zero,1243
   12a48:	000136d8 	cmpnei	zero,zero,1243
   12a4c:	000136d8 	cmpnei	zero,zero,1243
   12a50:	00012cd8 	cmpnei	zero,zero,1203
   12a54:	000134e0 	cmpeqi	zero,zero,1235
   12a58:	000136d8 	cmpnei	zero,zero,1243
   12a5c:	00012b9c 	xori	zero,zero,1198
   12a60:	00012cfc 	xorhi	zero,zero,1203
   12a64:	000136d8 	cmpnei	zero,zero,1243
   12a68:	00012d4c 	andi	zero,zero,1205
   12a6c:	00012d58 	cmpnei	zero,zero,1205
   12a70:	00012d58 	cmpnei	zero,zero,1205
   12a74:	00012d58 	cmpnei	zero,zero,1205
   12a78:	00012d58 	cmpnei	zero,zero,1205
   12a7c:	00012d58 	cmpnei	zero,zero,1205
   12a80:	00012d58 	cmpnei	zero,zero,1205
   12a84:	00012d58 	cmpnei	zero,zero,1205
   12a88:	00012d58 	cmpnei	zero,zero,1205
   12a8c:	00012d58 	cmpnei	zero,zero,1205
   12a90:	000136d8 	cmpnei	zero,zero,1243
   12a94:	000136d8 	cmpnei	zero,zero,1243
   12a98:	000136d8 	cmpnei	zero,zero,1243
   12a9c:	000136d8 	cmpnei	zero,zero,1243
   12aa0:	000136d8 	cmpnei	zero,zero,1243
   12aa4:	000136d8 	cmpnei	zero,zero,1243
   12aa8:	000136d8 	cmpnei	zero,zero,1243
   12aac:	000136d8 	cmpnei	zero,zero,1243
   12ab0:	000136d8 	cmpnei	zero,zero,1243
   12ab4:	000136d8 	cmpnei	zero,zero,1243
   12ab8:	00012d94 	movui	zero,1206
   12abc:	00012e5c 	xori	zero,zero,1209
   12ac0:	000136d8 	cmpnei	zero,zero,1243
   12ac4:	00012e5c 	xori	zero,zero,1209
   12ac8:	000136d8 	cmpnei	zero,zero,1243
   12acc:	000136d8 	cmpnei	zero,zero,1243
   12ad0:	000136d8 	cmpnei	zero,zero,1243
   12ad4:	000136d8 	cmpnei	zero,zero,1243
   12ad8:	00012f08 	cmpgei	zero,zero,1212
   12adc:	000136d8 	cmpnei	zero,zero,1243
   12ae0:	000136d8 	cmpnei	zero,zero,1243
   12ae4:	00012f14 	movui	zero,1212
   12ae8:	000136d8 	cmpnei	zero,zero,1243
   12aec:	000136d8 	cmpnei	zero,zero,1243
   12af0:	000136d8 	cmpnei	zero,zero,1243
   12af4:	000136d8 	cmpnei	zero,zero,1243
   12af8:	000136d8 	cmpnei	zero,zero,1243
   12afc:	00013398 	cmpnei	zero,zero,1230
   12b00:	000136d8 	cmpnei	zero,zero,1243
   12b04:	000136d8 	cmpnei	zero,zero,1243
   12b08:	00013404 	movi	zero,1232
   12b0c:	000136d8 	cmpnei	zero,zero,1243
   12b10:	000136d8 	cmpnei	zero,zero,1243
   12b14:	000136d8 	cmpnei	zero,zero,1243
   12b18:	000136d8 	cmpnei	zero,zero,1243
   12b1c:	000136d8 	cmpnei	zero,zero,1243
   12b20:	000136d8 	cmpnei	zero,zero,1243
   12b24:	000136d8 	cmpnei	zero,zero,1243
   12b28:	000136d8 	cmpnei	zero,zero,1243
   12b2c:	000136d8 	cmpnei	zero,zero,1243
   12b30:	000136d8 	cmpnei	zero,zero,1243
   12b34:	0001367c 	xorhi	zero,zero,1241
   12b38:	000135fc 	xorhi	zero,zero,1239
   12b3c:	00012e5c 	xori	zero,zero,1209
   12b40:	00012e5c 	xori	zero,zero,1209
   12b44:	00012e5c 	xori	zero,zero,1209
   12b48:	0001361c 	xori	zero,zero,1240
   12b4c:	000135fc 	xorhi	zero,zero,1239
   12b50:	000136d8 	cmpnei	zero,zero,1243
   12b54:	000136d8 	cmpnei	zero,zero,1243
   12b58:	00013628 	cmpgeui	zero,zero,1240
   12b5c:	000136d8 	cmpnei	zero,zero,1243
   12b60:	0001363c 	xorhi	zero,zero,1240
   12b64:	000134c0 	call	134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
   12b68:	00012ba8 	cmpgeui	zero,zero,1198
   12b6c:	000134f8 	rdprs	zero,zero,1235
   12b70:	000136d8 	cmpnei	zero,zero,1243
   12b74:	00013504 	movi	zero,1236
   12b78:	000136d8 	cmpnei	zero,zero,1243
   12b7c:	00013568 	cmpgeui	zero,zero,1237
   12b80:	000136d8 	cmpnei	zero,zero,1243
   12b84:	000136d8 	cmpnei	zero,zero,1243
   12b88:	00013588 	cmpgei	zero,zero,1238
   12b8c:	d8c03117 	ldw	r3,196(sp)
   12b90:	d8802e15 	stw	r2,184(sp)
   12b94:	00c7c83a 	sub	r3,zero,r3
   12b98:	d8c03115 	stw	r3,196(sp)
   12b9c:	84000114 	ori	r16,r16,4
   12ba0:	ac400007 	ldb	r17,0(r21)
   12ba4:	003f9706 	br	12a04 <__alt_data_end+0xfc012a04>
   12ba8:	00800c04 	movi	r2,48
   12bac:	d8802705 	stb	r2,156(sp)
   12bb0:	00801e04 	movi	r2,120
   12bb4:	d8802745 	stb	r2,157(sp)
   12bb8:	d9002a17 	ldw	r4,168(sp)
   12bbc:	d8802e17 	ldw	r2,184(sp)
   12bc0:	d8002785 	stb	zero,158(sp)
   12bc4:	e011883a 	mov	r8,fp
   12bc8:	10c00104 	addi	r3,r2,4
   12bcc:	14c00017 	ldw	r19,0(r2)
   12bd0:	002d883a 	mov	r22,zero
   12bd4:	80800094 	ori	r2,r16,2
   12bd8:	2002ca16 	blt	r4,zero,13704 <___vfprintf_internal_r+0xe88>
   12bdc:	00bfdfc4 	movi	r2,-129
   12be0:	80a4703a 	and	r18,r16,r2
   12be4:	d8c02e15 	stw	r3,184(sp)
   12be8:	94800094 	ori	r18,r18,2
   12bec:	9802b41e 	bne	r19,zero,136c0 <___vfprintf_internal_r+0xe44>
   12bf0:	014000f4 	movhi	r5,3
   12bf4:	296df604 	addi	r5,r5,-18472
   12bf8:	d9403915 	stw	r5,228(sp)
   12bfc:	04401e04 	movi	r17,120
   12c00:	d8802a17 	ldw	r2,168(sp)
   12c04:	0039883a 	mov	fp,zero
   12c08:	1001fa26 	beq	r2,zero,133f4 <___vfprintf_internal_r+0xb78>
   12c0c:	0027883a 	mov	r19,zero
   12c10:	002d883a 	mov	r22,zero
   12c14:	00021906 	br	1347c <___vfprintf_internal_r+0xc00>
   12c18:	d9002d17 	ldw	r4,180(sp)
   12c1c:	b80b883a 	mov	r5,r23
   12c20:	0014c300 	call	14c30 <__swsetup_r>
   12c24:	1005dc1e 	bne	r2,zero,14398 <___vfprintf_internal_r+0x1b1c>
   12c28:	b880030b 	ldhu	r2,12(r23)
   12c2c:	00c00284 	movi	r3,10
   12c30:	1080068c 	andi	r2,r2,26
   12c34:	10ff3a1e 	bne	r2,r3,12920 <__alt_data_end+0xfc012920>
   12c38:	b880038f 	ldh	r2,14(r23)
   12c3c:	103f3816 	blt	r2,zero,12920 <__alt_data_end+0xfc012920>
   12c40:	d9c02e17 	ldw	r7,184(sp)
   12c44:	d9002d17 	ldw	r4,180(sp)
   12c48:	a80d883a 	mov	r6,r21
   12c4c:	b80b883a 	mov	r5,r23
   12c50:	0014b740 	call	14b74 <__sbprintf>
   12c54:	00001106 	br	12c9c <___vfprintf_internal_r+0x420>
   12c58:	d9002d17 	ldw	r4,180(sp)
   12c5c:	d9801e04 	addi	r6,sp,120
   12c60:	b80b883a 	mov	r5,r23
   12c64:	001ab880 	call	1ab88 <__sprint_r>
   12c68:	1000081e 	bne	r2,zero,12c8c <___vfprintf_internal_r+0x410>
   12c6c:	da000404 	addi	r8,sp,16
   12c70:	003f5106 	br	129b8 <__alt_data_end+0xfc0129b8>
   12c74:	d8802017 	ldw	r2,128(sp)
   12c78:	10000426 	beq	r2,zero,12c8c <___vfprintf_internal_r+0x410>
   12c7c:	d9002d17 	ldw	r4,180(sp)
   12c80:	d9801e04 	addi	r6,sp,120
   12c84:	b80b883a 	mov	r5,r23
   12c88:	001ab880 	call	1ab88 <__sprint_r>
   12c8c:	b880030b 	ldhu	r2,12(r23)
   12c90:	1080100c 	andi	r2,r2,64
   12c94:	1005c01e 	bne	r2,zero,14398 <___vfprintf_internal_r+0x1b1c>
   12c98:	d8802f17 	ldw	r2,188(sp)
   12c9c:	dfc04717 	ldw	ra,284(sp)
   12ca0:	df004617 	ldw	fp,280(sp)
   12ca4:	ddc04517 	ldw	r23,276(sp)
   12ca8:	dd804417 	ldw	r22,272(sp)
   12cac:	dd404317 	ldw	r21,268(sp)
   12cb0:	dd004217 	ldw	r20,264(sp)
   12cb4:	dcc04117 	ldw	r19,260(sp)
   12cb8:	dc804017 	ldw	r18,256(sp)
   12cbc:	dc403f17 	ldw	r17,252(sp)
   12cc0:	dc003e17 	ldw	r16,248(sp)
   12cc4:	dec04804 	addi	sp,sp,288
   12cc8:	f800283a 	ret
   12ccc:	d9002d17 	ldw	r4,180(sp)
   12cd0:	0016c3c0 	call	16c3c <__sinit>
   12cd4:	003f0206 	br	128e0 <__alt_data_end+0xfc0128e0>
   12cd8:	d9002e17 	ldw	r4,184(sp)
   12cdc:	d9402e17 	ldw	r5,184(sp)
   12ce0:	21000017 	ldw	r4,0(r4)
   12ce4:	28800104 	addi	r2,r5,4
   12ce8:	d9003115 	stw	r4,196(sp)
   12cec:	203fa716 	blt	r4,zero,12b8c <__alt_data_end+0xfc012b8c>
   12cf0:	d8802e15 	stw	r2,184(sp)
   12cf4:	ac400007 	ldb	r17,0(r21)
   12cf8:	003f4206 	br	12a04 <__alt_data_end+0xfc012a04>
   12cfc:	ac400007 	ldb	r17,0(r21)
   12d00:	01000a84 	movi	r4,42
   12d04:	a8c00044 	addi	r3,r21,1
   12d08:	89075826 	beq	r17,r4,14a6c <___vfprintf_internal_r+0x21f0>
   12d0c:	8cbff404 	addi	r18,r17,-48
   12d10:	b486ae36 	bltu	r22,r18,147cc <___vfprintf_internal_r+0x1f50>
   12d14:	0009883a 	mov	r4,zero
   12d18:	1823883a 	mov	r17,r3
   12d1c:	01400284 	movi	r5,10
   12d20:	000d8b80 	call	d8b8 <__mulsi3>
   12d24:	88c00007 	ldb	r3,0(r17)
   12d28:	1489883a 	add	r4,r2,r18
   12d2c:	8d400044 	addi	r21,r17,1
   12d30:	1cbff404 	addi	r18,r3,-48
   12d34:	a823883a 	mov	r17,r21
   12d38:	b4bff82e 	bgeu	r22,r18,12d1c <__alt_data_end+0xfc012d1c>
   12d3c:	1823883a 	mov	r17,r3
   12d40:	2005f616 	blt	r4,zero,1451c <___vfprintf_internal_r+0x1ca0>
   12d44:	d9002a15 	stw	r4,168(sp)
   12d48:	003f2f06 	br	12a08 <__alt_data_end+0xfc012a08>
   12d4c:	84002014 	ori	r16,r16,128
   12d50:	ac400007 	ldb	r17,0(r21)
   12d54:	003f2b06 	br	12a04 <__alt_data_end+0xfc012a04>
   12d58:	8cbff404 	addi	r18,r17,-48
   12d5c:	d8003115 	stw	zero,196(sp)
   12d60:	0009883a 	mov	r4,zero
   12d64:	a823883a 	mov	r17,r21
   12d68:	01400284 	movi	r5,10
   12d6c:	000d8b80 	call	d8b8 <__mulsi3>
   12d70:	88c00007 	ldb	r3,0(r17)
   12d74:	9089883a 	add	r4,r18,r2
   12d78:	ad400044 	addi	r21,r21,1
   12d7c:	1cbff404 	addi	r18,r3,-48
   12d80:	a823883a 	mov	r17,r21
   12d84:	b4bff82e 	bgeu	r22,r18,12d68 <__alt_data_end+0xfc012d68>
   12d88:	1823883a 	mov	r17,r3
   12d8c:	d9003115 	stw	r4,196(sp)
   12d90:	003f1d06 	br	12a08 <__alt_data_end+0xfc012a08>
   12d94:	8025883a 	mov	r18,r16
   12d98:	dc002903 	ldbu	r16,164(sp)
   12d9c:	e011883a 	mov	r8,fp
   12da0:	84003fcc 	andi	r16,r16,255
   12da4:	8007531e 	bne	r16,zero,14af4 <___vfprintf_internal_r+0x2278>
   12da8:	94800414 	ori	r18,r18,16
   12dac:	9080080c 	andi	r2,r18,32
   12db0:	1003a326 	beq	r2,zero,13c40 <___vfprintf_internal_r+0x13c4>
   12db4:	d9002e17 	ldw	r4,184(sp)
   12db8:	20800117 	ldw	r2,4(r4)
   12dbc:	24c00017 	ldw	r19,0(r4)
   12dc0:	21000204 	addi	r4,r4,8
   12dc4:	d9002e15 	stw	r4,184(sp)
   12dc8:	102d883a 	mov	r22,r2
   12dcc:	10047316 	blt	r2,zero,13f9c <___vfprintf_internal_r+0x1720>
   12dd0:	d9002a17 	ldw	r4,168(sp)
   12dd4:	df002783 	ldbu	fp,158(sp)
   12dd8:	2003e416 	blt	r4,zero,13d6c <___vfprintf_internal_r+0x14f0>
   12ddc:	00ffdfc4 	movi	r3,-129
   12de0:	9d84b03a 	or	r2,r19,r22
   12de4:	90e4703a 	and	r18,r18,r3
   12de8:	10018026 	beq	r2,zero,133ec <___vfprintf_internal_r+0xb70>
   12dec:	b003ab26 	beq	r22,zero,13c9c <___vfprintf_internal_r+0x1420>
   12df0:	dc402915 	stw	r17,164(sp)
   12df4:	dc001e04 	addi	r16,sp,120
   12df8:	b023883a 	mov	r17,r22
   12dfc:	402d883a 	mov	r22,r8
   12e00:	9809883a 	mov	r4,r19
   12e04:	880b883a 	mov	r5,r17
   12e08:	01800284 	movi	r6,10
   12e0c:	000f883a 	mov	r7,zero
   12e10:	001d0cc0 	call	1d0cc <__umoddi3>
   12e14:	10800c04 	addi	r2,r2,48
   12e18:	843fffc4 	addi	r16,r16,-1
   12e1c:	9809883a 	mov	r4,r19
   12e20:	880b883a 	mov	r5,r17
   12e24:	80800005 	stb	r2,0(r16)
   12e28:	01800284 	movi	r6,10
   12e2c:	000f883a 	mov	r7,zero
   12e30:	001cad00 	call	1cad0 <__udivdi3>
   12e34:	1027883a 	mov	r19,r2
   12e38:	10c4b03a 	or	r2,r2,r3
   12e3c:	1823883a 	mov	r17,r3
   12e40:	103fef1e 	bne	r2,zero,12e00 <__alt_data_end+0xfc012e00>
   12e44:	d8c02817 	ldw	r3,160(sp)
   12e48:	dc402917 	ldw	r17,164(sp)
   12e4c:	b011883a 	mov	r8,r22
   12e50:	1c07c83a 	sub	r3,r3,r16
   12e54:	d8c02b15 	stw	r3,172(sp)
   12e58:	00005f06 	br	12fd8 <___vfprintf_internal_r+0x75c>
   12e5c:	8025883a 	mov	r18,r16
   12e60:	dc002903 	ldbu	r16,164(sp)
   12e64:	e011883a 	mov	r8,fp
   12e68:	84003fcc 	andi	r16,r16,255
   12e6c:	80071e1e 	bne	r16,zero,14ae8 <___vfprintf_internal_r+0x226c>
   12e70:	9080020c 	andi	r2,r18,8
   12e74:	1004af26 	beq	r2,zero,14134 <___vfprintf_internal_r+0x18b8>
   12e78:	d9002e17 	ldw	r4,184(sp)
   12e7c:	d9402e17 	ldw	r5,184(sp)
   12e80:	d8802e17 	ldw	r2,184(sp)
   12e84:	21000017 	ldw	r4,0(r4)
   12e88:	29400117 	ldw	r5,4(r5)
   12e8c:	10800204 	addi	r2,r2,8
   12e90:	d9003615 	stw	r4,216(sp)
   12e94:	d9403815 	stw	r5,224(sp)
   12e98:	d8802e15 	stw	r2,184(sp)
   12e9c:	d9003617 	ldw	r4,216(sp)
   12ea0:	d9403817 	ldw	r5,224(sp)
   12ea4:	da003d15 	stw	r8,244(sp)
   12ea8:	04000044 	movi	r16,1
   12eac:	001936c0 	call	1936c <__fpclassifyd>
   12eb0:	da003d17 	ldw	r8,244(sp)
   12eb4:	1404441e 	bne	r2,r16,13fc8 <___vfprintf_internal_r+0x174c>
   12eb8:	d9003617 	ldw	r4,216(sp)
   12ebc:	d9403817 	ldw	r5,224(sp)
   12ec0:	000d883a 	mov	r6,zero
   12ec4:	000f883a 	mov	r7,zero
   12ec8:	001ea700 	call	1ea70 <__ledf2>
   12ecc:	da003d17 	ldw	r8,244(sp)
   12ed0:	1005e316 	blt	r2,zero,14660 <___vfprintf_internal_r+0x1de4>
   12ed4:	df002783 	ldbu	fp,158(sp)
   12ed8:	008011c4 	movi	r2,71
   12edc:	1445580e 	bge	r2,r17,14440 <___vfprintf_internal_r+0x1bc4>
   12ee0:	040000f4 	movhi	r16,3
   12ee4:	842dee04 	addi	r16,r16,-18504
   12ee8:	00c000c4 	movi	r3,3
   12eec:	00bfdfc4 	movi	r2,-129
   12ef0:	d8c02915 	stw	r3,164(sp)
   12ef4:	90a4703a 	and	r18,r18,r2
   12ef8:	d8c02b15 	stw	r3,172(sp)
   12efc:	d8002a15 	stw	zero,168(sp)
   12f00:	d8003215 	stw	zero,200(sp)
   12f04:	00003a06 	br	12ff0 <___vfprintf_internal_r+0x774>
   12f08:	84000214 	ori	r16,r16,8
   12f0c:	ac400007 	ldb	r17,0(r21)
   12f10:	003ebc06 	br	12a04 <__alt_data_end+0xfc012a04>
   12f14:	8025883a 	mov	r18,r16
   12f18:	dc002903 	ldbu	r16,164(sp)
   12f1c:	e011883a 	mov	r8,fp
   12f20:	84003fcc 	andi	r16,r16,255
   12f24:	8007001e 	bne	r16,zero,14b28 <___vfprintf_internal_r+0x22ac>
   12f28:	94800414 	ori	r18,r18,16
   12f2c:	9080080c 	andi	r2,r18,32
   12f30:	1002fa26 	beq	r2,zero,13b1c <___vfprintf_internal_r+0x12a0>
   12f34:	d9002e17 	ldw	r4,184(sp)
   12f38:	d9402a17 	ldw	r5,168(sp)
   12f3c:	d8002785 	stb	zero,158(sp)
   12f40:	20800204 	addi	r2,r4,8
   12f44:	24c00017 	ldw	r19,0(r4)
   12f48:	25800117 	ldw	r22,4(r4)
   12f4c:	2804b116 	blt	r5,zero,14214 <___vfprintf_internal_r+0x1998>
   12f50:	013fdfc4 	movi	r4,-129
   12f54:	9d86b03a 	or	r3,r19,r22
   12f58:	d8802e15 	stw	r2,184(sp)
   12f5c:	9124703a 	and	r18,r18,r4
   12f60:	1802fb1e 	bne	r3,zero,13b50 <___vfprintf_internal_r+0x12d4>
   12f64:	d8c02a17 	ldw	r3,168(sp)
   12f68:	0039883a 	mov	fp,zero
   12f6c:	1805e526 	beq	r3,zero,14704 <___vfprintf_internal_r+0x1e88>
   12f70:	0027883a 	mov	r19,zero
   12f74:	002d883a 	mov	r22,zero
   12f78:	dc001e04 	addi	r16,sp,120
   12f7c:	9806d0fa 	srli	r3,r19,3
   12f80:	b008977a 	slli	r4,r22,29
   12f84:	b02cd0fa 	srli	r22,r22,3
   12f88:	9cc001cc 	andi	r19,r19,7
   12f8c:	98800c04 	addi	r2,r19,48
   12f90:	843fffc4 	addi	r16,r16,-1
   12f94:	20e6b03a 	or	r19,r4,r3
   12f98:	80800005 	stb	r2,0(r16)
   12f9c:	9d86b03a 	or	r3,r19,r22
   12fa0:	183ff61e 	bne	r3,zero,12f7c <__alt_data_end+0xfc012f7c>
   12fa4:	90c0004c 	andi	r3,r18,1
   12fa8:	18014126 	beq	r3,zero,134b0 <___vfprintf_internal_r+0xc34>
   12fac:	10803fcc 	andi	r2,r2,255
   12fb0:	1080201c 	xori	r2,r2,128
   12fb4:	10bfe004 	addi	r2,r2,-128
   12fb8:	00c00c04 	movi	r3,48
   12fbc:	10c13c26 	beq	r2,r3,134b0 <___vfprintf_internal_r+0xc34>
   12fc0:	80ffffc5 	stb	r3,-1(r16)
   12fc4:	d8c02817 	ldw	r3,160(sp)
   12fc8:	80bfffc4 	addi	r2,r16,-1
   12fcc:	1021883a 	mov	r16,r2
   12fd0:	1887c83a 	sub	r3,r3,r2
   12fd4:	d8c02b15 	stw	r3,172(sp)
   12fd8:	d8802b17 	ldw	r2,172(sp)
   12fdc:	d9002a17 	ldw	r4,168(sp)
   12fe0:	1100010e 	bge	r2,r4,12fe8 <___vfprintf_internal_r+0x76c>
   12fe4:	2005883a 	mov	r2,r4
   12fe8:	d8802915 	stw	r2,164(sp)
   12fec:	d8003215 	stw	zero,200(sp)
   12ff0:	e7003fcc 	andi	fp,fp,255
   12ff4:	e700201c 	xori	fp,fp,128
   12ff8:	e73fe004 	addi	fp,fp,-128
   12ffc:	e0000326 	beq	fp,zero,1300c <___vfprintf_internal_r+0x790>
   13000:	d8c02917 	ldw	r3,164(sp)
   13004:	18c00044 	addi	r3,r3,1
   13008:	d8c02915 	stw	r3,164(sp)
   1300c:	90c0008c 	andi	r3,r18,2
   13010:	d8c02c15 	stw	r3,176(sp)
   13014:	18000326 	beq	r3,zero,13024 <___vfprintf_internal_r+0x7a8>
   13018:	d8c02917 	ldw	r3,164(sp)
   1301c:	18c00084 	addi	r3,r3,2
   13020:	d8c02915 	stw	r3,164(sp)
   13024:	90c0210c 	andi	r3,r18,132
   13028:	d8c03015 	stw	r3,192(sp)
   1302c:	1801c51e 	bne	r3,zero,13744 <___vfprintf_internal_r+0xec8>
   13030:	d9003117 	ldw	r4,196(sp)
   13034:	d8c02917 	ldw	r3,164(sp)
   13038:	20e7c83a 	sub	r19,r4,r3
   1303c:	04c1c10e 	bge	zero,r19,13744 <___vfprintf_internal_r+0xec8>
   13040:	02400404 	movi	r9,16
   13044:	d8c02017 	ldw	r3,128(sp)
   13048:	d8801f17 	ldw	r2,124(sp)
   1304c:	4cc52f0e 	bge	r9,r19,1450c <___vfprintf_internal_r+0x1c90>
   13050:	014000f4 	movhi	r5,3
   13054:	296e0984 	addi	r5,r5,-18394
   13058:	dc403b15 	stw	r17,236(sp)
   1305c:	d9403515 	stw	r5,212(sp)
   13060:	9823883a 	mov	r17,r19
   13064:	482d883a 	mov	r22,r9
   13068:	9027883a 	mov	r19,r18
   1306c:	070001c4 	movi	fp,7
   13070:	8025883a 	mov	r18,r16
   13074:	dc002d17 	ldw	r16,180(sp)
   13078:	00000306 	br	13088 <___vfprintf_internal_r+0x80c>
   1307c:	8c7ffc04 	addi	r17,r17,-16
   13080:	42000204 	addi	r8,r8,8
   13084:	b440130e 	bge	r22,r17,130d4 <___vfprintf_internal_r+0x858>
   13088:	010000f4 	movhi	r4,3
   1308c:	18c00404 	addi	r3,r3,16
   13090:	10800044 	addi	r2,r2,1
   13094:	212e0984 	addi	r4,r4,-18394
   13098:	41000015 	stw	r4,0(r8)
   1309c:	45800115 	stw	r22,4(r8)
   130a0:	d8c02015 	stw	r3,128(sp)
   130a4:	d8801f15 	stw	r2,124(sp)
   130a8:	e0bff40e 	bge	fp,r2,1307c <__alt_data_end+0xfc01307c>
   130ac:	d9801e04 	addi	r6,sp,120
   130b0:	b80b883a 	mov	r5,r23
   130b4:	8009883a 	mov	r4,r16
   130b8:	001ab880 	call	1ab88 <__sprint_r>
   130bc:	103ef31e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   130c0:	8c7ffc04 	addi	r17,r17,-16
   130c4:	d8c02017 	ldw	r3,128(sp)
   130c8:	d8801f17 	ldw	r2,124(sp)
   130cc:	da000404 	addi	r8,sp,16
   130d0:	b47fed16 	blt	r22,r17,13088 <__alt_data_end+0xfc013088>
   130d4:	9021883a 	mov	r16,r18
   130d8:	9825883a 	mov	r18,r19
   130dc:	8827883a 	mov	r19,r17
   130e0:	dc403b17 	ldw	r17,236(sp)
   130e4:	d9403517 	ldw	r5,212(sp)
   130e8:	98c7883a 	add	r3,r19,r3
   130ec:	10800044 	addi	r2,r2,1
   130f0:	41400015 	stw	r5,0(r8)
   130f4:	44c00115 	stw	r19,4(r8)
   130f8:	d8c02015 	stw	r3,128(sp)
   130fc:	d8801f15 	stw	r2,124(sp)
   13100:	010001c4 	movi	r4,7
   13104:	2082c516 	blt	r4,r2,13c1c <___vfprintf_internal_r+0x13a0>
   13108:	df002787 	ldb	fp,158(sp)
   1310c:	42000204 	addi	r8,r8,8
   13110:	e0000c26 	beq	fp,zero,13144 <___vfprintf_internal_r+0x8c8>
   13114:	d8801f17 	ldw	r2,124(sp)
   13118:	d9002784 	addi	r4,sp,158
   1311c:	18c00044 	addi	r3,r3,1
   13120:	10800044 	addi	r2,r2,1
   13124:	41000015 	stw	r4,0(r8)
   13128:	01000044 	movi	r4,1
   1312c:	41000115 	stw	r4,4(r8)
   13130:	d8c02015 	stw	r3,128(sp)
   13134:	d8801f15 	stw	r2,124(sp)
   13138:	010001c4 	movi	r4,7
   1313c:	20825e16 	blt	r4,r2,13ab8 <___vfprintf_internal_r+0x123c>
   13140:	42000204 	addi	r8,r8,8
   13144:	d8802c17 	ldw	r2,176(sp)
   13148:	10000c26 	beq	r2,zero,1317c <___vfprintf_internal_r+0x900>
   1314c:	d8801f17 	ldw	r2,124(sp)
   13150:	d9002704 	addi	r4,sp,156
   13154:	18c00084 	addi	r3,r3,2
   13158:	10800044 	addi	r2,r2,1
   1315c:	41000015 	stw	r4,0(r8)
   13160:	01000084 	movi	r4,2
   13164:	41000115 	stw	r4,4(r8)
   13168:	d8c02015 	stw	r3,128(sp)
   1316c:	d8801f15 	stw	r2,124(sp)
   13170:	010001c4 	movi	r4,7
   13174:	20825816 	blt	r4,r2,13ad8 <___vfprintf_internal_r+0x125c>
   13178:	42000204 	addi	r8,r8,8
   1317c:	d9003017 	ldw	r4,192(sp)
   13180:	00802004 	movi	r2,128
   13184:	2081bb26 	beq	r4,r2,13874 <___vfprintf_internal_r+0xff8>
   13188:	d9402a17 	ldw	r5,168(sp)
   1318c:	d8802b17 	ldw	r2,172(sp)
   13190:	28adc83a 	sub	r22,r5,r2
   13194:	0580310e 	bge	zero,r22,1325c <___vfprintf_internal_r+0x9e0>
   13198:	07000404 	movi	fp,16
   1319c:	d8801f17 	ldw	r2,124(sp)
   131a0:	e584360e 	bge	fp,r22,1427c <___vfprintf_internal_r+0x1a00>
   131a4:	014000f4 	movhi	r5,3
   131a8:	296e0584 	addi	r5,r5,-18410
   131ac:	dc402a15 	stw	r17,168(sp)
   131b0:	d9402c15 	stw	r5,176(sp)
   131b4:	b023883a 	mov	r17,r22
   131b8:	04c001c4 	movi	r19,7
   131bc:	a82d883a 	mov	r22,r21
   131c0:	902b883a 	mov	r21,r18
   131c4:	8025883a 	mov	r18,r16
   131c8:	dc002d17 	ldw	r16,180(sp)
   131cc:	00000306 	br	131dc <___vfprintf_internal_r+0x960>
   131d0:	8c7ffc04 	addi	r17,r17,-16
   131d4:	42000204 	addi	r8,r8,8
   131d8:	e440110e 	bge	fp,r17,13220 <___vfprintf_internal_r+0x9a4>
   131dc:	18c00404 	addi	r3,r3,16
   131e0:	10800044 	addi	r2,r2,1
   131e4:	45000015 	stw	r20,0(r8)
   131e8:	47000115 	stw	fp,4(r8)
   131ec:	d8c02015 	stw	r3,128(sp)
   131f0:	d8801f15 	stw	r2,124(sp)
   131f4:	98bff60e 	bge	r19,r2,131d0 <__alt_data_end+0xfc0131d0>
   131f8:	d9801e04 	addi	r6,sp,120
   131fc:	b80b883a 	mov	r5,r23
   13200:	8009883a 	mov	r4,r16
   13204:	001ab880 	call	1ab88 <__sprint_r>
   13208:	103ea01e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   1320c:	8c7ffc04 	addi	r17,r17,-16
   13210:	d8c02017 	ldw	r3,128(sp)
   13214:	d8801f17 	ldw	r2,124(sp)
   13218:	da000404 	addi	r8,sp,16
   1321c:	e47fef16 	blt	fp,r17,131dc <__alt_data_end+0xfc0131dc>
   13220:	9021883a 	mov	r16,r18
   13224:	a825883a 	mov	r18,r21
   13228:	b02b883a 	mov	r21,r22
   1322c:	882d883a 	mov	r22,r17
   13230:	dc402a17 	ldw	r17,168(sp)
   13234:	d9002c17 	ldw	r4,176(sp)
   13238:	1d87883a 	add	r3,r3,r22
   1323c:	10800044 	addi	r2,r2,1
   13240:	41000015 	stw	r4,0(r8)
   13244:	45800115 	stw	r22,4(r8)
   13248:	d8c02015 	stw	r3,128(sp)
   1324c:	d8801f15 	stw	r2,124(sp)
   13250:	010001c4 	movi	r4,7
   13254:	20821016 	blt	r4,r2,13a98 <___vfprintf_internal_r+0x121c>
   13258:	42000204 	addi	r8,r8,8
   1325c:	9080400c 	andi	r2,r18,256
   13260:	10013a1e 	bne	r2,zero,1374c <___vfprintf_internal_r+0xed0>
   13264:	d9402b17 	ldw	r5,172(sp)
   13268:	d8801f17 	ldw	r2,124(sp)
   1326c:	44000015 	stw	r16,0(r8)
   13270:	1947883a 	add	r3,r3,r5
   13274:	10800044 	addi	r2,r2,1
   13278:	41400115 	stw	r5,4(r8)
   1327c:	d8c02015 	stw	r3,128(sp)
   13280:	d8801f15 	stw	r2,124(sp)
   13284:	010001c4 	movi	r4,7
   13288:	2081f516 	blt	r4,r2,13a60 <___vfprintf_internal_r+0x11e4>
   1328c:	42000204 	addi	r8,r8,8
   13290:	9480010c 	andi	r18,r18,4
   13294:	90003226 	beq	r18,zero,13360 <___vfprintf_internal_r+0xae4>
   13298:	d9403117 	ldw	r5,196(sp)
   1329c:	d8802917 	ldw	r2,164(sp)
   132a0:	28a1c83a 	sub	r16,r5,r2
   132a4:	04002e0e 	bge	zero,r16,13360 <___vfprintf_internal_r+0xae4>
   132a8:	04400404 	movi	r17,16
   132ac:	d8801f17 	ldw	r2,124(sp)
   132b0:	8c04c40e 	bge	r17,r16,145c4 <___vfprintf_internal_r+0x1d48>
   132b4:	014000f4 	movhi	r5,3
   132b8:	296e0984 	addi	r5,r5,-18394
   132bc:	d9403515 	stw	r5,212(sp)
   132c0:	048001c4 	movi	r18,7
   132c4:	dcc02d17 	ldw	r19,180(sp)
   132c8:	00000306 	br	132d8 <___vfprintf_internal_r+0xa5c>
   132cc:	843ffc04 	addi	r16,r16,-16
   132d0:	42000204 	addi	r8,r8,8
   132d4:	8c00130e 	bge	r17,r16,13324 <___vfprintf_internal_r+0xaa8>
   132d8:	010000f4 	movhi	r4,3
   132dc:	18c00404 	addi	r3,r3,16
   132e0:	10800044 	addi	r2,r2,1
   132e4:	212e0984 	addi	r4,r4,-18394
   132e8:	41000015 	stw	r4,0(r8)
   132ec:	44400115 	stw	r17,4(r8)
   132f0:	d8c02015 	stw	r3,128(sp)
   132f4:	d8801f15 	stw	r2,124(sp)
   132f8:	90bff40e 	bge	r18,r2,132cc <__alt_data_end+0xfc0132cc>
   132fc:	d9801e04 	addi	r6,sp,120
   13300:	b80b883a 	mov	r5,r23
   13304:	9809883a 	mov	r4,r19
   13308:	001ab880 	call	1ab88 <__sprint_r>
   1330c:	103e5f1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13310:	843ffc04 	addi	r16,r16,-16
   13314:	d8c02017 	ldw	r3,128(sp)
   13318:	d8801f17 	ldw	r2,124(sp)
   1331c:	da000404 	addi	r8,sp,16
   13320:	8c3fed16 	blt	r17,r16,132d8 <__alt_data_end+0xfc0132d8>
   13324:	d9403517 	ldw	r5,212(sp)
   13328:	1c07883a 	add	r3,r3,r16
   1332c:	10800044 	addi	r2,r2,1
   13330:	41400015 	stw	r5,0(r8)
   13334:	44000115 	stw	r16,4(r8)
   13338:	d8c02015 	stw	r3,128(sp)
   1333c:	d8801f15 	stw	r2,124(sp)
   13340:	010001c4 	movi	r4,7
   13344:	2080060e 	bge	r4,r2,13360 <___vfprintf_internal_r+0xae4>
   13348:	d9002d17 	ldw	r4,180(sp)
   1334c:	d9801e04 	addi	r6,sp,120
   13350:	b80b883a 	mov	r5,r23
   13354:	001ab880 	call	1ab88 <__sprint_r>
   13358:	103e4c1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   1335c:	d8c02017 	ldw	r3,128(sp)
   13360:	d8803117 	ldw	r2,196(sp)
   13364:	d9002917 	ldw	r4,164(sp)
   13368:	1100010e 	bge	r2,r4,13370 <___vfprintf_internal_r+0xaf4>
   1336c:	2005883a 	mov	r2,r4
   13370:	d9402f17 	ldw	r5,188(sp)
   13374:	288b883a 	add	r5,r5,r2
   13378:	d9402f15 	stw	r5,188(sp)
   1337c:	1801c01e 	bne	r3,zero,13a80 <___vfprintf_internal_r+0x1204>
   13380:	a8800007 	ldb	r2,0(r21)
   13384:	d8001f15 	stw	zero,124(sp)
   13388:	da000404 	addi	r8,sp,16
   1338c:	103d751e 	bne	r2,zero,12964 <__alt_data_end+0xfc012964>
   13390:	a823883a 	mov	r17,r21
   13394:	003d8b06 	br	129c4 <__alt_data_end+0xfc0129c4>
   13398:	8025883a 	mov	r18,r16
   1339c:	dc002903 	ldbu	r16,164(sp)
   133a0:	e011883a 	mov	r8,fp
   133a4:	84003fcc 	andi	r16,r16,255
   133a8:	8005e51e 	bne	r16,zero,14b40 <___vfprintf_internal_r+0x22c4>
   133ac:	94800414 	ori	r18,r18,16
   133b0:	9080080c 	andi	r2,r18,32
   133b4:	10022b26 	beq	r2,zero,13c64 <___vfprintf_internal_r+0x13e8>
   133b8:	d9002e17 	ldw	r4,184(sp)
   133bc:	d9402a17 	ldw	r5,168(sp)
   133c0:	d8002785 	stb	zero,158(sp)
   133c4:	20c00204 	addi	r3,r4,8
   133c8:	24c00017 	ldw	r19,0(r4)
   133cc:	25800117 	ldw	r22,4(r4)
   133d0:	28042e16 	blt	r5,zero,1448c <___vfprintf_internal_r+0x1c10>
   133d4:	013fdfc4 	movi	r4,-129
   133d8:	9d84b03a 	or	r2,r19,r22
   133dc:	d8c02e15 	stw	r3,184(sp)
   133e0:	9124703a 	and	r18,r18,r4
   133e4:	0039883a 	mov	fp,zero
   133e8:	103e801e 	bne	r2,zero,12dec <__alt_data_end+0xfc012dec>
   133ec:	d9002a17 	ldw	r4,168(sp)
   133f0:	2002e01e 	bne	r4,zero,13f74 <___vfprintf_internal_r+0x16f8>
   133f4:	d8002a15 	stw	zero,168(sp)
   133f8:	d8002b15 	stw	zero,172(sp)
   133fc:	dc001e04 	addi	r16,sp,120
   13400:	003ef506 	br	12fd8 <__alt_data_end+0xfc012fd8>
   13404:	8025883a 	mov	r18,r16
   13408:	dc002903 	ldbu	r16,164(sp)
   1340c:	e011883a 	mov	r8,fp
   13410:	84003fcc 	andi	r16,r16,255
   13414:	8005ba1e 	bne	r16,zero,14b00 <___vfprintf_internal_r+0x2284>
   13418:	010000f4 	movhi	r4,3
   1341c:	212df104 	addi	r4,r4,-18492
   13420:	d9003915 	stw	r4,228(sp)
   13424:	9080080c 	andi	r2,r18,32
   13428:	10006126 	beq	r2,zero,135b0 <___vfprintf_internal_r+0xd34>
   1342c:	d9402e17 	ldw	r5,184(sp)
   13430:	2cc00017 	ldw	r19,0(r5)
   13434:	2d800117 	ldw	r22,4(r5)
   13438:	29400204 	addi	r5,r5,8
   1343c:	d9402e15 	stw	r5,184(sp)
   13440:	9080004c 	andi	r2,r18,1
   13444:	1001ac26 	beq	r2,zero,13af8 <___vfprintf_internal_r+0x127c>
   13448:	9d84b03a 	or	r2,r19,r22
   1344c:	10038526 	beq	r2,zero,14264 <___vfprintf_internal_r+0x19e8>
   13450:	d8c02a17 	ldw	r3,168(sp)
   13454:	00800c04 	movi	r2,48
   13458:	d8802705 	stb	r2,156(sp)
   1345c:	dc402745 	stb	r17,157(sp)
   13460:	d8002785 	stb	zero,158(sp)
   13464:	90800094 	ori	r2,r18,2
   13468:	18047916 	blt	r3,zero,14650 <___vfprintf_internal_r+0x1dd4>
   1346c:	00bfdfc4 	movi	r2,-129
   13470:	90a4703a 	and	r18,r18,r2
   13474:	94800094 	ori	r18,r18,2
   13478:	0039883a 	mov	fp,zero
   1347c:	d9003917 	ldw	r4,228(sp)
   13480:	dc001e04 	addi	r16,sp,120
   13484:	988003cc 	andi	r2,r19,15
   13488:	b006973a 	slli	r3,r22,28
   1348c:	2085883a 	add	r2,r4,r2
   13490:	9826d13a 	srli	r19,r19,4
   13494:	10800003 	ldbu	r2,0(r2)
   13498:	b02cd13a 	srli	r22,r22,4
   1349c:	843fffc4 	addi	r16,r16,-1
   134a0:	1ce6b03a 	or	r19,r3,r19
   134a4:	80800005 	stb	r2,0(r16)
   134a8:	9d84b03a 	or	r2,r19,r22
   134ac:	103ff51e 	bne	r2,zero,13484 <__alt_data_end+0xfc013484>
   134b0:	d8c02817 	ldw	r3,160(sp)
   134b4:	1c07c83a 	sub	r3,r3,r16
   134b8:	d8c02b15 	stw	r3,172(sp)
   134bc:	003ec606 	br	12fd8 <__alt_data_end+0xfc012fd8>
   134c0:	8025883a 	mov	r18,r16
   134c4:	dc002903 	ldbu	r16,164(sp)
   134c8:	e011883a 	mov	r8,fp
   134cc:	84003fcc 	andi	r16,r16,255
   134d0:	803e9626 	beq	r16,zero,12f2c <__alt_data_end+0xfc012f2c>
   134d4:	d8c02b03 	ldbu	r3,172(sp)
   134d8:	d8c02785 	stb	r3,158(sp)
   134dc:	003e9306 	br	12f2c <__alt_data_end+0xfc012f2c>
   134e0:	00c00044 	movi	r3,1
   134e4:	d8c02905 	stb	r3,164(sp)
   134e8:	00c00ac4 	movi	r3,43
   134ec:	d8c02b05 	stb	r3,172(sp)
   134f0:	ac400007 	ldb	r17,0(r21)
   134f4:	003d4306 	br	12a04 <__alt_data_end+0xfc012a04>
   134f8:	84000814 	ori	r16,r16,32
   134fc:	ac400007 	ldb	r17,0(r21)
   13500:	003d4006 	br	12a04 <__alt_data_end+0xfc012a04>
   13504:	d8802e17 	ldw	r2,184(sp)
   13508:	8025883a 	mov	r18,r16
   1350c:	d8002785 	stb	zero,158(sp)
   13510:	14000017 	ldw	r16,0(r2)
   13514:	e011883a 	mov	r8,fp
   13518:	14c00104 	addi	r19,r2,4
   1351c:	80042d26 	beq	r16,zero,145d4 <___vfprintf_internal_r+0x1d58>
   13520:	d8c02a17 	ldw	r3,168(sp)
   13524:	1803e416 	blt	r3,zero,144b8 <___vfprintf_internal_r+0x1c3c>
   13528:	180d883a 	mov	r6,r3
   1352c:	000b883a 	mov	r5,zero
   13530:	8009883a 	mov	r4,r16
   13534:	df003d15 	stw	fp,244(sp)
   13538:	00179a80 	call	179a8 <memchr>
   1353c:	da003d17 	ldw	r8,244(sp)
   13540:	10046826 	beq	r2,zero,146e4 <___vfprintf_internal_r+0x1e68>
   13544:	1405c83a 	sub	r2,r2,r16
   13548:	d8802b15 	stw	r2,172(sp)
   1354c:	1003e016 	blt	r2,zero,144d0 <___vfprintf_internal_r+0x1c54>
   13550:	df002783 	ldbu	fp,158(sp)
   13554:	d8802915 	stw	r2,164(sp)
   13558:	dcc02e15 	stw	r19,184(sp)
   1355c:	d8002a15 	stw	zero,168(sp)
   13560:	d8003215 	stw	zero,200(sp)
   13564:	003ea206 	br	12ff0 <__alt_data_end+0xfc012ff0>
   13568:	8025883a 	mov	r18,r16
   1356c:	dc002903 	ldbu	r16,164(sp)
   13570:	e011883a 	mov	r8,fp
   13574:	84003fcc 	andi	r16,r16,255
   13578:	803f8d26 	beq	r16,zero,133b0 <__alt_data_end+0xfc0133b0>
   1357c:	d8c02b03 	ldbu	r3,172(sp)
   13580:	d8c02785 	stb	r3,158(sp)
   13584:	003f8a06 	br	133b0 <__alt_data_end+0xfc0133b0>
   13588:	8025883a 	mov	r18,r16
   1358c:	dc002903 	ldbu	r16,164(sp)
   13590:	e011883a 	mov	r8,fp
   13594:	84003fcc 	andi	r16,r16,255
   13598:	8005661e 	bne	r16,zero,14b34 <___vfprintf_internal_r+0x22b8>
   1359c:	010000f4 	movhi	r4,3
   135a0:	212df604 	addi	r4,r4,-18472
   135a4:	d9003915 	stw	r4,228(sp)
   135a8:	9080080c 	andi	r2,r18,32
   135ac:	103f9f1e 	bne	r2,zero,1342c <__alt_data_end+0xfc01342c>
   135b0:	9080040c 	andi	r2,r18,16
   135b4:	1002eb26 	beq	r2,zero,14164 <___vfprintf_internal_r+0x18e8>
   135b8:	d8802e17 	ldw	r2,184(sp)
   135bc:	002d883a 	mov	r22,zero
   135c0:	14c00017 	ldw	r19,0(r2)
   135c4:	10800104 	addi	r2,r2,4
   135c8:	d8802e15 	stw	r2,184(sp)
   135cc:	003f9c06 	br	13440 <__alt_data_end+0xfc013440>
   135d0:	d8802b07 	ldb	r2,172(sp)
   135d4:	1002e11e 	bne	r2,zero,1415c <___vfprintf_internal_r+0x18e0>
   135d8:	00c00044 	movi	r3,1
   135dc:	d8c02905 	stb	r3,164(sp)
   135e0:	00c00804 	movi	r3,32
   135e4:	d8c02b05 	stb	r3,172(sp)
   135e8:	ac400007 	ldb	r17,0(r21)
   135ec:	003d0506 	br	12a04 <__alt_data_end+0xfc012a04>
   135f0:	84000054 	ori	r16,r16,1
   135f4:	ac400007 	ldb	r17,0(r21)
   135f8:	003d0206 	br	12a04 <__alt_data_end+0xfc012a04>
   135fc:	8025883a 	mov	r18,r16
   13600:	dc002903 	ldbu	r16,164(sp)
   13604:	e011883a 	mov	r8,fp
   13608:	84003fcc 	andi	r16,r16,255
   1360c:	803de726 	beq	r16,zero,12dac <__alt_data_end+0xfc012dac>
   13610:	d8c02b03 	ldbu	r3,172(sp)
   13614:	d8c02785 	stb	r3,158(sp)
   13618:	003de406 	br	12dac <__alt_data_end+0xfc012dac>
   1361c:	84001014 	ori	r16,r16,64
   13620:	ac400007 	ldb	r17,0(r21)
   13624:	003cf706 	br	12a04 <__alt_data_end+0xfc012a04>
   13628:	ac400007 	ldb	r17,0(r21)
   1362c:	00801b04 	movi	r2,108
   13630:	88838f26 	beq	r17,r2,14470 <___vfprintf_internal_r+0x1bf4>
   13634:	84000414 	ori	r16,r16,16
   13638:	003cf206 	br	12a04 <__alt_data_end+0xfc012a04>
   1363c:	8025883a 	mov	r18,r16
   13640:	dc002903 	ldbu	r16,164(sp)
   13644:	e011883a 	mov	r8,fp
   13648:	84003fcc 	andi	r16,r16,255
   1364c:	80053f1e 	bne	r16,zero,14b4c <___vfprintf_internal_r+0x22d0>
   13650:	9080080c 	andi	r2,r18,32
   13654:	1002d226 	beq	r2,zero,141a0 <___vfprintf_internal_r+0x1924>
   13658:	d9002e17 	ldw	r4,184(sp)
   1365c:	d9402f17 	ldw	r5,188(sp)
   13660:	20800017 	ldw	r2,0(r4)
   13664:	2807d7fa 	srai	r3,r5,31
   13668:	21000104 	addi	r4,r4,4
   1366c:	d9002e15 	stw	r4,184(sp)
   13670:	11400015 	stw	r5,0(r2)
   13674:	10c00115 	stw	r3,4(r2)
   13678:	003cb806 	br	1295c <__alt_data_end+0xfc01295c>
   1367c:	d8c02e17 	ldw	r3,184(sp)
   13680:	d9002e17 	ldw	r4,184(sp)
   13684:	8025883a 	mov	r18,r16
   13688:	18800017 	ldw	r2,0(r3)
   1368c:	21000104 	addi	r4,r4,4
   13690:	00c00044 	movi	r3,1
   13694:	e011883a 	mov	r8,fp
   13698:	d8c02915 	stw	r3,164(sp)
   1369c:	d8002785 	stb	zero,158(sp)
   136a0:	d8801405 	stb	r2,80(sp)
   136a4:	d9002e15 	stw	r4,184(sp)
   136a8:	d8c02b15 	stw	r3,172(sp)
   136ac:	d8002a15 	stw	zero,168(sp)
   136b0:	d8003215 	stw	zero,200(sp)
   136b4:	dc001404 	addi	r16,sp,80
   136b8:	0039883a 	mov	fp,zero
   136bc:	003e5306 	br	1300c <__alt_data_end+0xfc01300c>
   136c0:	010000f4 	movhi	r4,3
   136c4:	212df604 	addi	r4,r4,-18472
   136c8:	0039883a 	mov	fp,zero
   136cc:	d9003915 	stw	r4,228(sp)
   136d0:	04401e04 	movi	r17,120
   136d4:	003f6906 	br	1347c <__alt_data_end+0xfc01347c>
   136d8:	8025883a 	mov	r18,r16
   136dc:	dc002903 	ldbu	r16,164(sp)
   136e0:	e011883a 	mov	r8,fp
   136e4:	84003fcc 	andi	r16,r16,255
   136e8:	8005081e 	bne	r16,zero,14b0c <___vfprintf_internal_r+0x2290>
   136ec:	883d6126 	beq	r17,zero,12c74 <__alt_data_end+0xfc012c74>
   136f0:	00c00044 	movi	r3,1
   136f4:	d8c02915 	stw	r3,164(sp)
   136f8:	dc401405 	stb	r17,80(sp)
   136fc:	d8002785 	stb	zero,158(sp)
   13700:	003fe906 	br	136a8 <__alt_data_end+0xfc0136a8>
   13704:	014000f4 	movhi	r5,3
   13708:	296df604 	addi	r5,r5,-18472
   1370c:	d9403915 	stw	r5,228(sp)
   13710:	d8c02e15 	stw	r3,184(sp)
   13714:	1025883a 	mov	r18,r2
   13718:	04401e04 	movi	r17,120
   1371c:	9d84b03a 	or	r2,r19,r22
   13720:	1000fc1e 	bne	r2,zero,13b14 <___vfprintf_internal_r+0x1298>
   13724:	0039883a 	mov	fp,zero
   13728:	00800084 	movi	r2,2
   1372c:	10803fcc 	andi	r2,r2,255
   13730:	00c00044 	movi	r3,1
   13734:	10c20f26 	beq	r2,r3,13f74 <___vfprintf_internal_r+0x16f8>
   13738:	00c00084 	movi	r3,2
   1373c:	10fd3326 	beq	r2,r3,12c0c <__alt_data_end+0xfc012c0c>
   13740:	003e0b06 	br	12f70 <__alt_data_end+0xfc012f70>
   13744:	d8c02017 	ldw	r3,128(sp)
   13748:	003e7106 	br	13110 <__alt_data_end+0xfc013110>
   1374c:	00801944 	movi	r2,101
   13750:	14407e0e 	bge	r2,r17,1394c <___vfprintf_internal_r+0x10d0>
   13754:	d9003617 	ldw	r4,216(sp)
   13758:	d9403817 	ldw	r5,224(sp)
   1375c:	000d883a 	mov	r6,zero
   13760:	000f883a 	mov	r7,zero
   13764:	d8c03c15 	stw	r3,240(sp)
   13768:	da003d15 	stw	r8,244(sp)
   1376c:	001e90c0 	call	1e90c <__eqdf2>
   13770:	d8c03c17 	ldw	r3,240(sp)
   13774:	da003d17 	ldw	r8,244(sp)
   13778:	1000f71e 	bne	r2,zero,13b58 <___vfprintf_internal_r+0x12dc>
   1377c:	d8801f17 	ldw	r2,124(sp)
   13780:	010000f4 	movhi	r4,3
   13784:	212dfd04 	addi	r4,r4,-18444
   13788:	18c00044 	addi	r3,r3,1
   1378c:	10800044 	addi	r2,r2,1
   13790:	41000015 	stw	r4,0(r8)
   13794:	01000044 	movi	r4,1
   13798:	41000115 	stw	r4,4(r8)
   1379c:	d8c02015 	stw	r3,128(sp)
   137a0:	d8801f15 	stw	r2,124(sp)
   137a4:	010001c4 	movi	r4,7
   137a8:	2082b816 	blt	r4,r2,1428c <___vfprintf_internal_r+0x1a10>
   137ac:	42000204 	addi	r8,r8,8
   137b0:	d8802617 	ldw	r2,152(sp)
   137b4:	d9403317 	ldw	r5,204(sp)
   137b8:	11400216 	blt	r2,r5,137c4 <___vfprintf_internal_r+0xf48>
   137bc:	9080004c 	andi	r2,r18,1
   137c0:	103eb326 	beq	r2,zero,13290 <__alt_data_end+0xfc013290>
   137c4:	d8803717 	ldw	r2,220(sp)
   137c8:	d9003417 	ldw	r4,208(sp)
   137cc:	d9403717 	ldw	r5,220(sp)
   137d0:	1887883a 	add	r3,r3,r2
   137d4:	d8801f17 	ldw	r2,124(sp)
   137d8:	41000015 	stw	r4,0(r8)
   137dc:	41400115 	stw	r5,4(r8)
   137e0:	10800044 	addi	r2,r2,1
   137e4:	d8c02015 	stw	r3,128(sp)
   137e8:	d8801f15 	stw	r2,124(sp)
   137ec:	010001c4 	movi	r4,7
   137f0:	20832916 	blt	r4,r2,14498 <___vfprintf_internal_r+0x1c1c>
   137f4:	42000204 	addi	r8,r8,8
   137f8:	d8803317 	ldw	r2,204(sp)
   137fc:	143fffc4 	addi	r16,r2,-1
   13800:	043ea30e 	bge	zero,r16,13290 <__alt_data_end+0xfc013290>
   13804:	04400404 	movi	r17,16
   13808:	d8801f17 	ldw	r2,124(sp)
   1380c:	8c00880e 	bge	r17,r16,13a30 <___vfprintf_internal_r+0x11b4>
   13810:	014000f4 	movhi	r5,3
   13814:	296e0584 	addi	r5,r5,-18410
   13818:	d9402c15 	stw	r5,176(sp)
   1381c:	058001c4 	movi	r22,7
   13820:	dcc02d17 	ldw	r19,180(sp)
   13824:	00000306 	br	13834 <___vfprintf_internal_r+0xfb8>
   13828:	42000204 	addi	r8,r8,8
   1382c:	843ffc04 	addi	r16,r16,-16
   13830:	8c00820e 	bge	r17,r16,13a3c <___vfprintf_internal_r+0x11c0>
   13834:	18c00404 	addi	r3,r3,16
   13838:	10800044 	addi	r2,r2,1
   1383c:	45000015 	stw	r20,0(r8)
   13840:	44400115 	stw	r17,4(r8)
   13844:	d8c02015 	stw	r3,128(sp)
   13848:	d8801f15 	stw	r2,124(sp)
   1384c:	b0bff60e 	bge	r22,r2,13828 <__alt_data_end+0xfc013828>
   13850:	d9801e04 	addi	r6,sp,120
   13854:	b80b883a 	mov	r5,r23
   13858:	9809883a 	mov	r4,r19
   1385c:	001ab880 	call	1ab88 <__sprint_r>
   13860:	103d0a1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13864:	d8c02017 	ldw	r3,128(sp)
   13868:	d8801f17 	ldw	r2,124(sp)
   1386c:	da000404 	addi	r8,sp,16
   13870:	003fee06 	br	1382c <__alt_data_end+0xfc01382c>
   13874:	d9403117 	ldw	r5,196(sp)
   13878:	d8802917 	ldw	r2,164(sp)
   1387c:	28adc83a 	sub	r22,r5,r2
   13880:	05be410e 	bge	zero,r22,13188 <__alt_data_end+0xfc013188>
   13884:	07000404 	movi	fp,16
   13888:	d8801f17 	ldw	r2,124(sp)
   1388c:	e5838f0e 	bge	fp,r22,146cc <___vfprintf_internal_r+0x1e50>
   13890:	014000f4 	movhi	r5,3
   13894:	296e0584 	addi	r5,r5,-18410
   13898:	dc403015 	stw	r17,192(sp)
   1389c:	d9402c15 	stw	r5,176(sp)
   138a0:	b023883a 	mov	r17,r22
   138a4:	04c001c4 	movi	r19,7
   138a8:	a82d883a 	mov	r22,r21
   138ac:	902b883a 	mov	r21,r18
   138b0:	8025883a 	mov	r18,r16
   138b4:	dc002d17 	ldw	r16,180(sp)
   138b8:	00000306 	br	138c8 <___vfprintf_internal_r+0x104c>
   138bc:	8c7ffc04 	addi	r17,r17,-16
   138c0:	42000204 	addi	r8,r8,8
   138c4:	e440110e 	bge	fp,r17,1390c <___vfprintf_internal_r+0x1090>
   138c8:	18c00404 	addi	r3,r3,16
   138cc:	10800044 	addi	r2,r2,1
   138d0:	45000015 	stw	r20,0(r8)
   138d4:	47000115 	stw	fp,4(r8)
   138d8:	d8c02015 	stw	r3,128(sp)
   138dc:	d8801f15 	stw	r2,124(sp)
   138e0:	98bff60e 	bge	r19,r2,138bc <__alt_data_end+0xfc0138bc>
   138e4:	d9801e04 	addi	r6,sp,120
   138e8:	b80b883a 	mov	r5,r23
   138ec:	8009883a 	mov	r4,r16
   138f0:	001ab880 	call	1ab88 <__sprint_r>
   138f4:	103ce51e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   138f8:	8c7ffc04 	addi	r17,r17,-16
   138fc:	d8c02017 	ldw	r3,128(sp)
   13900:	d8801f17 	ldw	r2,124(sp)
   13904:	da000404 	addi	r8,sp,16
   13908:	e47fef16 	blt	fp,r17,138c8 <__alt_data_end+0xfc0138c8>
   1390c:	9021883a 	mov	r16,r18
   13910:	a825883a 	mov	r18,r21
   13914:	b02b883a 	mov	r21,r22
   13918:	882d883a 	mov	r22,r17
   1391c:	dc403017 	ldw	r17,192(sp)
   13920:	d9002c17 	ldw	r4,176(sp)
   13924:	1d87883a 	add	r3,r3,r22
   13928:	10800044 	addi	r2,r2,1
   1392c:	41000015 	stw	r4,0(r8)
   13930:	45800115 	stw	r22,4(r8)
   13934:	d8c02015 	stw	r3,128(sp)
   13938:	d8801f15 	stw	r2,124(sp)
   1393c:	010001c4 	movi	r4,7
   13940:	20818e16 	blt	r4,r2,13f7c <___vfprintf_internal_r+0x1700>
   13944:	42000204 	addi	r8,r8,8
   13948:	003e0f06 	br	13188 <__alt_data_end+0xfc013188>
   1394c:	d9403317 	ldw	r5,204(sp)
   13950:	00800044 	movi	r2,1
   13954:	18c00044 	addi	r3,r3,1
   13958:	1141530e 	bge	r2,r5,13ea8 <___vfprintf_internal_r+0x162c>
   1395c:	dc401f17 	ldw	r17,124(sp)
   13960:	00800044 	movi	r2,1
   13964:	40800115 	stw	r2,4(r8)
   13968:	8c400044 	addi	r17,r17,1
   1396c:	44000015 	stw	r16,0(r8)
   13970:	d8c02015 	stw	r3,128(sp)
   13974:	dc401f15 	stw	r17,124(sp)
   13978:	008001c4 	movi	r2,7
   1397c:	14416b16 	blt	r2,r17,13f2c <___vfprintf_internal_r+0x16b0>
   13980:	42000204 	addi	r8,r8,8
   13984:	d8803717 	ldw	r2,220(sp)
   13988:	d9003417 	ldw	r4,208(sp)
   1398c:	8c400044 	addi	r17,r17,1
   13990:	10c7883a 	add	r3,r2,r3
   13994:	40800115 	stw	r2,4(r8)
   13998:	41000015 	stw	r4,0(r8)
   1399c:	d8c02015 	stw	r3,128(sp)
   139a0:	dc401f15 	stw	r17,124(sp)
   139a4:	008001c4 	movi	r2,7
   139a8:	14416916 	blt	r2,r17,13f50 <___vfprintf_internal_r+0x16d4>
   139ac:	45800204 	addi	r22,r8,8
   139b0:	d9003617 	ldw	r4,216(sp)
   139b4:	d9403817 	ldw	r5,224(sp)
   139b8:	000d883a 	mov	r6,zero
   139bc:	000f883a 	mov	r7,zero
   139c0:	d8c03c15 	stw	r3,240(sp)
   139c4:	001e90c0 	call	1e90c <__eqdf2>
   139c8:	d8c03c17 	ldw	r3,240(sp)
   139cc:	1000bc26 	beq	r2,zero,13cc0 <___vfprintf_internal_r+0x1444>
   139d0:	d9403317 	ldw	r5,204(sp)
   139d4:	84000044 	addi	r16,r16,1
   139d8:	8c400044 	addi	r17,r17,1
   139dc:	28bfffc4 	addi	r2,r5,-1
   139e0:	1887883a 	add	r3,r3,r2
   139e4:	b0800115 	stw	r2,4(r22)
   139e8:	b4000015 	stw	r16,0(r22)
   139ec:	d8c02015 	stw	r3,128(sp)
   139f0:	dc401f15 	stw	r17,124(sp)
   139f4:	008001c4 	movi	r2,7
   139f8:	14414316 	blt	r2,r17,13f08 <___vfprintf_internal_r+0x168c>
   139fc:	b5800204 	addi	r22,r22,8
   13a00:	d9003a17 	ldw	r4,232(sp)
   13a04:	df0022c4 	addi	fp,sp,139
   13a08:	8c400044 	addi	r17,r17,1
   13a0c:	20c7883a 	add	r3,r4,r3
   13a10:	b7000015 	stw	fp,0(r22)
   13a14:	b1000115 	stw	r4,4(r22)
   13a18:	d8c02015 	stw	r3,128(sp)
   13a1c:	dc401f15 	stw	r17,124(sp)
   13a20:	008001c4 	movi	r2,7
   13a24:	14400e16 	blt	r2,r17,13a60 <___vfprintf_internal_r+0x11e4>
   13a28:	b2000204 	addi	r8,r22,8
   13a2c:	003e1806 	br	13290 <__alt_data_end+0xfc013290>
   13a30:	010000f4 	movhi	r4,3
   13a34:	212e0584 	addi	r4,r4,-18410
   13a38:	d9002c15 	stw	r4,176(sp)
   13a3c:	d9002c17 	ldw	r4,176(sp)
   13a40:	1c07883a 	add	r3,r3,r16
   13a44:	44000115 	stw	r16,4(r8)
   13a48:	41000015 	stw	r4,0(r8)
   13a4c:	10800044 	addi	r2,r2,1
   13a50:	d8c02015 	stw	r3,128(sp)
   13a54:	d8801f15 	stw	r2,124(sp)
   13a58:	010001c4 	movi	r4,7
   13a5c:	20be0b0e 	bge	r4,r2,1328c <__alt_data_end+0xfc01328c>
   13a60:	d9002d17 	ldw	r4,180(sp)
   13a64:	d9801e04 	addi	r6,sp,120
   13a68:	b80b883a 	mov	r5,r23
   13a6c:	001ab880 	call	1ab88 <__sprint_r>
   13a70:	103c861e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13a74:	d8c02017 	ldw	r3,128(sp)
   13a78:	da000404 	addi	r8,sp,16
   13a7c:	003e0406 	br	13290 <__alt_data_end+0xfc013290>
   13a80:	d9002d17 	ldw	r4,180(sp)
   13a84:	d9801e04 	addi	r6,sp,120
   13a88:	b80b883a 	mov	r5,r23
   13a8c:	001ab880 	call	1ab88 <__sprint_r>
   13a90:	103e3b26 	beq	r2,zero,13380 <__alt_data_end+0xfc013380>
   13a94:	003c7d06 	br	12c8c <__alt_data_end+0xfc012c8c>
   13a98:	d9002d17 	ldw	r4,180(sp)
   13a9c:	d9801e04 	addi	r6,sp,120
   13aa0:	b80b883a 	mov	r5,r23
   13aa4:	001ab880 	call	1ab88 <__sprint_r>
   13aa8:	103c781e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13aac:	d8c02017 	ldw	r3,128(sp)
   13ab0:	da000404 	addi	r8,sp,16
   13ab4:	003de906 	br	1325c <__alt_data_end+0xfc01325c>
   13ab8:	d9002d17 	ldw	r4,180(sp)
   13abc:	d9801e04 	addi	r6,sp,120
   13ac0:	b80b883a 	mov	r5,r23
   13ac4:	001ab880 	call	1ab88 <__sprint_r>
   13ac8:	103c701e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13acc:	d8c02017 	ldw	r3,128(sp)
   13ad0:	da000404 	addi	r8,sp,16
   13ad4:	003d9b06 	br	13144 <__alt_data_end+0xfc013144>
   13ad8:	d9002d17 	ldw	r4,180(sp)
   13adc:	d9801e04 	addi	r6,sp,120
   13ae0:	b80b883a 	mov	r5,r23
   13ae4:	001ab880 	call	1ab88 <__sprint_r>
   13ae8:	103c681e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13aec:	d8c02017 	ldw	r3,128(sp)
   13af0:	da000404 	addi	r8,sp,16
   13af4:	003da106 	br	1317c <__alt_data_end+0xfc01317c>
   13af8:	d9402a17 	ldw	r5,168(sp)
   13afc:	d8002785 	stb	zero,158(sp)
   13b00:	283f0616 	blt	r5,zero,1371c <__alt_data_end+0xfc01371c>
   13b04:	00ffdfc4 	movi	r3,-129
   13b08:	9d84b03a 	or	r2,r19,r22
   13b0c:	90e4703a 	and	r18,r18,r3
   13b10:	103c3b26 	beq	r2,zero,12c00 <__alt_data_end+0xfc012c00>
   13b14:	0039883a 	mov	fp,zero
   13b18:	003e5806 	br	1347c <__alt_data_end+0xfc01347c>
   13b1c:	9080040c 	andi	r2,r18,16
   13b20:	1001b326 	beq	r2,zero,141f0 <___vfprintf_internal_r+0x1974>
   13b24:	d8c02e17 	ldw	r3,184(sp)
   13b28:	d9002a17 	ldw	r4,168(sp)
   13b2c:	d8002785 	stb	zero,158(sp)
   13b30:	18800104 	addi	r2,r3,4
   13b34:	1cc00017 	ldw	r19,0(r3)
   13b38:	002d883a 	mov	r22,zero
   13b3c:	2001b516 	blt	r4,zero,14214 <___vfprintf_internal_r+0x1998>
   13b40:	00ffdfc4 	movi	r3,-129
   13b44:	d8802e15 	stw	r2,184(sp)
   13b48:	90e4703a 	and	r18,r18,r3
   13b4c:	983d0526 	beq	r19,zero,12f64 <__alt_data_end+0xfc012f64>
   13b50:	0039883a 	mov	fp,zero
   13b54:	003d0806 	br	12f78 <__alt_data_end+0xfc012f78>
   13b58:	dc402617 	ldw	r17,152(sp)
   13b5c:	0441d30e 	bge	zero,r17,142ac <___vfprintf_internal_r+0x1a30>
   13b60:	dc403217 	ldw	r17,200(sp)
   13b64:	d8803317 	ldw	r2,204(sp)
   13b68:	1440010e 	bge	r2,r17,13b70 <___vfprintf_internal_r+0x12f4>
   13b6c:	1023883a 	mov	r17,r2
   13b70:	04400a0e 	bge	zero,r17,13b9c <___vfprintf_internal_r+0x1320>
   13b74:	d8801f17 	ldw	r2,124(sp)
   13b78:	1c47883a 	add	r3,r3,r17
   13b7c:	44000015 	stw	r16,0(r8)
   13b80:	10800044 	addi	r2,r2,1
   13b84:	44400115 	stw	r17,4(r8)
   13b88:	d8c02015 	stw	r3,128(sp)
   13b8c:	d8801f15 	stw	r2,124(sp)
   13b90:	010001c4 	movi	r4,7
   13b94:	20826516 	blt	r4,r2,1452c <___vfprintf_internal_r+0x1cb0>
   13b98:	42000204 	addi	r8,r8,8
   13b9c:	88026116 	blt	r17,zero,14524 <___vfprintf_internal_r+0x1ca8>
   13ba0:	d9003217 	ldw	r4,200(sp)
   13ba4:	2463c83a 	sub	r17,r4,r17
   13ba8:	04407b0e 	bge	zero,r17,13d98 <___vfprintf_internal_r+0x151c>
   13bac:	05800404 	movi	r22,16
   13bb0:	d8801f17 	ldw	r2,124(sp)
   13bb4:	b4419d0e 	bge	r22,r17,1422c <___vfprintf_internal_r+0x19b0>
   13bb8:	010000f4 	movhi	r4,3
   13bbc:	212e0584 	addi	r4,r4,-18410
   13bc0:	d9002c15 	stw	r4,176(sp)
   13bc4:	070001c4 	movi	fp,7
   13bc8:	dcc02d17 	ldw	r19,180(sp)
   13bcc:	00000306 	br	13bdc <___vfprintf_internal_r+0x1360>
   13bd0:	42000204 	addi	r8,r8,8
   13bd4:	8c7ffc04 	addi	r17,r17,-16
   13bd8:	b441970e 	bge	r22,r17,14238 <___vfprintf_internal_r+0x19bc>
   13bdc:	18c00404 	addi	r3,r3,16
   13be0:	10800044 	addi	r2,r2,1
   13be4:	45000015 	stw	r20,0(r8)
   13be8:	45800115 	stw	r22,4(r8)
   13bec:	d8c02015 	stw	r3,128(sp)
   13bf0:	d8801f15 	stw	r2,124(sp)
   13bf4:	e0bff60e 	bge	fp,r2,13bd0 <__alt_data_end+0xfc013bd0>
   13bf8:	d9801e04 	addi	r6,sp,120
   13bfc:	b80b883a 	mov	r5,r23
   13c00:	9809883a 	mov	r4,r19
   13c04:	001ab880 	call	1ab88 <__sprint_r>
   13c08:	103c201e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13c0c:	d8c02017 	ldw	r3,128(sp)
   13c10:	d8801f17 	ldw	r2,124(sp)
   13c14:	da000404 	addi	r8,sp,16
   13c18:	003fee06 	br	13bd4 <__alt_data_end+0xfc013bd4>
   13c1c:	d9002d17 	ldw	r4,180(sp)
   13c20:	d9801e04 	addi	r6,sp,120
   13c24:	b80b883a 	mov	r5,r23
   13c28:	001ab880 	call	1ab88 <__sprint_r>
   13c2c:	103c171e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13c30:	d8c02017 	ldw	r3,128(sp)
   13c34:	df002787 	ldb	fp,158(sp)
   13c38:	da000404 	addi	r8,sp,16
   13c3c:	003d3406 	br	13110 <__alt_data_end+0xfc013110>
   13c40:	9080040c 	andi	r2,r18,16
   13c44:	10016126 	beq	r2,zero,141cc <___vfprintf_internal_r+0x1950>
   13c48:	d9402e17 	ldw	r5,184(sp)
   13c4c:	2cc00017 	ldw	r19,0(r5)
   13c50:	29400104 	addi	r5,r5,4
   13c54:	d9402e15 	stw	r5,184(sp)
   13c58:	982dd7fa 	srai	r22,r19,31
   13c5c:	b005883a 	mov	r2,r22
   13c60:	003c5a06 	br	12dcc <__alt_data_end+0xfc012dcc>
   13c64:	9080040c 	andi	r2,r18,16
   13c68:	10003526 	beq	r2,zero,13d40 <___vfprintf_internal_r+0x14c4>
   13c6c:	d8c02e17 	ldw	r3,184(sp)
   13c70:	d9002a17 	ldw	r4,168(sp)
   13c74:	d8002785 	stb	zero,158(sp)
   13c78:	18800104 	addi	r2,r3,4
   13c7c:	1cc00017 	ldw	r19,0(r3)
   13c80:	002d883a 	mov	r22,zero
   13c84:	20003716 	blt	r4,zero,13d64 <___vfprintf_internal_r+0x14e8>
   13c88:	00ffdfc4 	movi	r3,-129
   13c8c:	d8802e15 	stw	r2,184(sp)
   13c90:	90e4703a 	and	r18,r18,r3
   13c94:	0039883a 	mov	fp,zero
   13c98:	983dd426 	beq	r19,zero,133ec <__alt_data_end+0xfc0133ec>
   13c9c:	00800244 	movi	r2,9
   13ca0:	14fc5336 	bltu	r2,r19,12df0 <__alt_data_end+0xfc012df0>
   13ca4:	d8c02817 	ldw	r3,160(sp)
   13ca8:	dc001dc4 	addi	r16,sp,119
   13cac:	9cc00c04 	addi	r19,r19,48
   13cb0:	1c07c83a 	sub	r3,r3,r16
   13cb4:	dcc01dc5 	stb	r19,119(sp)
   13cb8:	d8c02b15 	stw	r3,172(sp)
   13cbc:	003cc606 	br	12fd8 <__alt_data_end+0xfc012fd8>
   13cc0:	d8803317 	ldw	r2,204(sp)
   13cc4:	143fffc4 	addi	r16,r2,-1
   13cc8:	043f4d0e 	bge	zero,r16,13a00 <__alt_data_end+0xfc013a00>
   13ccc:	07000404 	movi	fp,16
   13cd0:	e400810e 	bge	fp,r16,13ed8 <___vfprintf_internal_r+0x165c>
   13cd4:	014000f4 	movhi	r5,3
   13cd8:	296e0584 	addi	r5,r5,-18410
   13cdc:	d9402c15 	stw	r5,176(sp)
   13ce0:	01c001c4 	movi	r7,7
   13ce4:	dcc02d17 	ldw	r19,180(sp)
   13ce8:	00000306 	br	13cf8 <___vfprintf_internal_r+0x147c>
   13cec:	b5800204 	addi	r22,r22,8
   13cf0:	843ffc04 	addi	r16,r16,-16
   13cf4:	e4007b0e 	bge	fp,r16,13ee4 <___vfprintf_internal_r+0x1668>
   13cf8:	18c00404 	addi	r3,r3,16
   13cfc:	8c400044 	addi	r17,r17,1
   13d00:	b5000015 	stw	r20,0(r22)
   13d04:	b7000115 	stw	fp,4(r22)
   13d08:	d8c02015 	stw	r3,128(sp)
   13d0c:	dc401f15 	stw	r17,124(sp)
   13d10:	3c7ff60e 	bge	r7,r17,13cec <__alt_data_end+0xfc013cec>
   13d14:	d9801e04 	addi	r6,sp,120
   13d18:	b80b883a 	mov	r5,r23
   13d1c:	9809883a 	mov	r4,r19
   13d20:	d9c03c15 	stw	r7,240(sp)
   13d24:	001ab880 	call	1ab88 <__sprint_r>
   13d28:	d9c03c17 	ldw	r7,240(sp)
   13d2c:	103bd71e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13d30:	d8c02017 	ldw	r3,128(sp)
   13d34:	dc401f17 	ldw	r17,124(sp)
   13d38:	dd800404 	addi	r22,sp,16
   13d3c:	003fec06 	br	13cf0 <__alt_data_end+0xfc013cf0>
   13d40:	9080100c 	andi	r2,r18,64
   13d44:	d8002785 	stb	zero,158(sp)
   13d48:	10010e26 	beq	r2,zero,14184 <___vfprintf_internal_r+0x1908>
   13d4c:	d9402e17 	ldw	r5,184(sp)
   13d50:	d8c02a17 	ldw	r3,168(sp)
   13d54:	002d883a 	mov	r22,zero
   13d58:	28800104 	addi	r2,r5,4
   13d5c:	2cc0000b 	ldhu	r19,0(r5)
   13d60:	183fc90e 	bge	r3,zero,13c88 <__alt_data_end+0xfc013c88>
   13d64:	d8802e15 	stw	r2,184(sp)
   13d68:	0039883a 	mov	fp,zero
   13d6c:	9d84b03a 	or	r2,r19,r22
   13d70:	103c1e1e 	bne	r2,zero,12dec <__alt_data_end+0xfc012dec>
   13d74:	00800044 	movi	r2,1
   13d78:	003e6c06 	br	1372c <__alt_data_end+0xfc01372c>
   13d7c:	d9002d17 	ldw	r4,180(sp)
   13d80:	d9801e04 	addi	r6,sp,120
   13d84:	b80b883a 	mov	r5,r23
   13d88:	001ab880 	call	1ab88 <__sprint_r>
   13d8c:	103bbf1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13d90:	d8c02017 	ldw	r3,128(sp)
   13d94:	da000404 	addi	r8,sp,16
   13d98:	d9003217 	ldw	r4,200(sp)
   13d9c:	d8802617 	ldw	r2,152(sp)
   13da0:	d9403317 	ldw	r5,204(sp)
   13da4:	8123883a 	add	r17,r16,r4
   13da8:	11400216 	blt	r2,r5,13db4 <___vfprintf_internal_r+0x1538>
   13dac:	9100004c 	andi	r4,r18,1
   13db0:	20000d26 	beq	r4,zero,13de8 <___vfprintf_internal_r+0x156c>
   13db4:	d9003717 	ldw	r4,220(sp)
   13db8:	d9403417 	ldw	r5,208(sp)
   13dbc:	1907883a 	add	r3,r3,r4
   13dc0:	d9001f17 	ldw	r4,124(sp)
   13dc4:	41400015 	stw	r5,0(r8)
   13dc8:	d9403717 	ldw	r5,220(sp)
   13dcc:	21000044 	addi	r4,r4,1
   13dd0:	d8c02015 	stw	r3,128(sp)
   13dd4:	41400115 	stw	r5,4(r8)
   13dd8:	d9001f15 	stw	r4,124(sp)
   13ddc:	014001c4 	movi	r5,7
   13de0:	2901e816 	blt	r5,r4,14584 <___vfprintf_internal_r+0x1d08>
   13de4:	42000204 	addi	r8,r8,8
   13de8:	d9003317 	ldw	r4,204(sp)
   13dec:	8121883a 	add	r16,r16,r4
   13df0:	2085c83a 	sub	r2,r4,r2
   13df4:	8461c83a 	sub	r16,r16,r17
   13df8:	1400010e 	bge	r2,r16,13e00 <___vfprintf_internal_r+0x1584>
   13dfc:	1021883a 	mov	r16,r2
   13e00:	04000a0e 	bge	zero,r16,13e2c <___vfprintf_internal_r+0x15b0>
   13e04:	d9001f17 	ldw	r4,124(sp)
   13e08:	1c07883a 	add	r3,r3,r16
   13e0c:	44400015 	stw	r17,0(r8)
   13e10:	21000044 	addi	r4,r4,1
   13e14:	44000115 	stw	r16,4(r8)
   13e18:	d8c02015 	stw	r3,128(sp)
   13e1c:	d9001f15 	stw	r4,124(sp)
   13e20:	014001c4 	movi	r5,7
   13e24:	2901fb16 	blt	r5,r4,14614 <___vfprintf_internal_r+0x1d98>
   13e28:	42000204 	addi	r8,r8,8
   13e2c:	8001f716 	blt	r16,zero,1460c <___vfprintf_internal_r+0x1d90>
   13e30:	1421c83a 	sub	r16,r2,r16
   13e34:	043d160e 	bge	zero,r16,13290 <__alt_data_end+0xfc013290>
   13e38:	04400404 	movi	r17,16
   13e3c:	d8801f17 	ldw	r2,124(sp)
   13e40:	8c3efb0e 	bge	r17,r16,13a30 <__alt_data_end+0xfc013a30>
   13e44:	014000f4 	movhi	r5,3
   13e48:	296e0584 	addi	r5,r5,-18410
   13e4c:	d9402c15 	stw	r5,176(sp)
   13e50:	058001c4 	movi	r22,7
   13e54:	dcc02d17 	ldw	r19,180(sp)
   13e58:	00000306 	br	13e68 <___vfprintf_internal_r+0x15ec>
   13e5c:	42000204 	addi	r8,r8,8
   13e60:	843ffc04 	addi	r16,r16,-16
   13e64:	8c3ef50e 	bge	r17,r16,13a3c <__alt_data_end+0xfc013a3c>
   13e68:	18c00404 	addi	r3,r3,16
   13e6c:	10800044 	addi	r2,r2,1
   13e70:	45000015 	stw	r20,0(r8)
   13e74:	44400115 	stw	r17,4(r8)
   13e78:	d8c02015 	stw	r3,128(sp)
   13e7c:	d8801f15 	stw	r2,124(sp)
   13e80:	b0bff60e 	bge	r22,r2,13e5c <__alt_data_end+0xfc013e5c>
   13e84:	d9801e04 	addi	r6,sp,120
   13e88:	b80b883a 	mov	r5,r23
   13e8c:	9809883a 	mov	r4,r19
   13e90:	001ab880 	call	1ab88 <__sprint_r>
   13e94:	103b7d1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13e98:	d8c02017 	ldw	r3,128(sp)
   13e9c:	d8801f17 	ldw	r2,124(sp)
   13ea0:	da000404 	addi	r8,sp,16
   13ea4:	003fee06 	br	13e60 <__alt_data_end+0xfc013e60>
   13ea8:	9088703a 	and	r4,r18,r2
   13eac:	203eab1e 	bne	r4,zero,1395c <__alt_data_end+0xfc01395c>
   13eb0:	dc401f17 	ldw	r17,124(sp)
   13eb4:	40800115 	stw	r2,4(r8)
   13eb8:	44000015 	stw	r16,0(r8)
   13ebc:	8c400044 	addi	r17,r17,1
   13ec0:	d8c02015 	stw	r3,128(sp)
   13ec4:	dc401f15 	stw	r17,124(sp)
   13ec8:	008001c4 	movi	r2,7
   13ecc:	14400e16 	blt	r2,r17,13f08 <___vfprintf_internal_r+0x168c>
   13ed0:	45800204 	addi	r22,r8,8
   13ed4:	003eca06 	br	13a00 <__alt_data_end+0xfc013a00>
   13ed8:	010000f4 	movhi	r4,3
   13edc:	212e0584 	addi	r4,r4,-18410
   13ee0:	d9002c15 	stw	r4,176(sp)
   13ee4:	d8802c17 	ldw	r2,176(sp)
   13ee8:	1c07883a 	add	r3,r3,r16
   13eec:	8c400044 	addi	r17,r17,1
   13ef0:	b0800015 	stw	r2,0(r22)
   13ef4:	b4000115 	stw	r16,4(r22)
   13ef8:	d8c02015 	stw	r3,128(sp)
   13efc:	dc401f15 	stw	r17,124(sp)
   13f00:	008001c4 	movi	r2,7
   13f04:	147ebd0e 	bge	r2,r17,139fc <__alt_data_end+0xfc0139fc>
   13f08:	d9002d17 	ldw	r4,180(sp)
   13f0c:	d9801e04 	addi	r6,sp,120
   13f10:	b80b883a 	mov	r5,r23
   13f14:	001ab880 	call	1ab88 <__sprint_r>
   13f18:	103b5c1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13f1c:	d8c02017 	ldw	r3,128(sp)
   13f20:	dc401f17 	ldw	r17,124(sp)
   13f24:	dd800404 	addi	r22,sp,16
   13f28:	003eb506 	br	13a00 <__alt_data_end+0xfc013a00>
   13f2c:	d9002d17 	ldw	r4,180(sp)
   13f30:	d9801e04 	addi	r6,sp,120
   13f34:	b80b883a 	mov	r5,r23
   13f38:	001ab880 	call	1ab88 <__sprint_r>
   13f3c:	103b531e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13f40:	d8c02017 	ldw	r3,128(sp)
   13f44:	dc401f17 	ldw	r17,124(sp)
   13f48:	da000404 	addi	r8,sp,16
   13f4c:	003e8d06 	br	13984 <__alt_data_end+0xfc013984>
   13f50:	d9002d17 	ldw	r4,180(sp)
   13f54:	d9801e04 	addi	r6,sp,120
   13f58:	b80b883a 	mov	r5,r23
   13f5c:	001ab880 	call	1ab88 <__sprint_r>
   13f60:	103b4a1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13f64:	d8c02017 	ldw	r3,128(sp)
   13f68:	dc401f17 	ldw	r17,124(sp)
   13f6c:	dd800404 	addi	r22,sp,16
   13f70:	003e8f06 	br	139b0 <__alt_data_end+0xfc0139b0>
   13f74:	0027883a 	mov	r19,zero
   13f78:	003f4a06 	br	13ca4 <__alt_data_end+0xfc013ca4>
   13f7c:	d9002d17 	ldw	r4,180(sp)
   13f80:	d9801e04 	addi	r6,sp,120
   13f84:	b80b883a 	mov	r5,r23
   13f88:	001ab880 	call	1ab88 <__sprint_r>
   13f8c:	103b3f1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   13f90:	d8c02017 	ldw	r3,128(sp)
   13f94:	da000404 	addi	r8,sp,16
   13f98:	003c7b06 	br	13188 <__alt_data_end+0xfc013188>
   13f9c:	d9402a17 	ldw	r5,168(sp)
   13fa0:	04e7c83a 	sub	r19,zero,r19
   13fa4:	07000b44 	movi	fp,45
   13fa8:	9804c03a 	cmpne	r2,r19,zero
   13fac:	05adc83a 	sub	r22,zero,r22
   13fb0:	df002785 	stb	fp,158(sp)
   13fb4:	b0adc83a 	sub	r22,r22,r2
   13fb8:	28017b16 	blt	r5,zero,145a8 <___vfprintf_internal_r+0x1d2c>
   13fbc:	00bfdfc4 	movi	r2,-129
   13fc0:	90a4703a 	and	r18,r18,r2
   13fc4:	003b8906 	br	12dec <__alt_data_end+0xfc012dec>
   13fc8:	d9003617 	ldw	r4,216(sp)
   13fcc:	d9403817 	ldw	r5,224(sp)
   13fd0:	da003d15 	stw	r8,244(sp)
   13fd4:	001936c0 	call	1936c <__fpclassifyd>
   13fd8:	da003d17 	ldw	r8,244(sp)
   13fdc:	1000f026 	beq	r2,zero,143a0 <___vfprintf_internal_r+0x1b24>
   13fe0:	d9002a17 	ldw	r4,168(sp)
   13fe4:	05bff7c4 	movi	r22,-33
   13fe8:	00bfffc4 	movi	r2,-1
   13fec:	8dac703a 	and	r22,r17,r22
   13ff0:	20820026 	beq	r4,r2,147f4 <___vfprintf_internal_r+0x1f78>
   13ff4:	008011c4 	movi	r2,71
   13ff8:	b081f726 	beq	r22,r2,147d8 <___vfprintf_internal_r+0x1f5c>
   13ffc:	d9003817 	ldw	r4,224(sp)
   14000:	90c04014 	ori	r3,r18,256
   14004:	d8c02c15 	stw	r3,176(sp)
   14008:	20021516 	blt	r4,zero,14860 <___vfprintf_internal_r+0x1fe4>
   1400c:	dcc03817 	ldw	r19,224(sp)
   14010:	d8002905 	stb	zero,164(sp)
   14014:	00801984 	movi	r2,102
   14018:	8881f926 	beq	r17,r2,14800 <___vfprintf_internal_r+0x1f84>
   1401c:	00801184 	movi	r2,70
   14020:	88821c26 	beq	r17,r2,14894 <___vfprintf_internal_r+0x2018>
   14024:	00801144 	movi	r2,69
   14028:	b081ef26 	beq	r22,r2,147e8 <___vfprintf_internal_r+0x1f6c>
   1402c:	d8c02a17 	ldw	r3,168(sp)
   14030:	d8802104 	addi	r2,sp,132
   14034:	d8800315 	stw	r2,12(sp)
   14038:	d9403617 	ldw	r5,216(sp)
   1403c:	d8802504 	addi	r2,sp,148
   14040:	d9002d17 	ldw	r4,180(sp)
   14044:	d8800215 	stw	r2,8(sp)
   14048:	d8802604 	addi	r2,sp,152
   1404c:	d8c00015 	stw	r3,0(sp)
   14050:	d8800115 	stw	r2,4(sp)
   14054:	01c00084 	movi	r7,2
   14058:	980d883a 	mov	r6,r19
   1405c:	d8c03c15 	stw	r3,240(sp)
   14060:	da003d15 	stw	r8,244(sp)
   14064:	0014fac0 	call	14fac <_dtoa_r>
   14068:	1021883a 	mov	r16,r2
   1406c:	008019c4 	movi	r2,103
   14070:	d8c03c17 	ldw	r3,240(sp)
   14074:	da003d17 	ldw	r8,244(sp)
   14078:	88817126 	beq	r17,r2,14640 <___vfprintf_internal_r+0x1dc4>
   1407c:	008011c4 	movi	r2,71
   14080:	88829126 	beq	r17,r2,14ac8 <___vfprintf_internal_r+0x224c>
   14084:	80f9883a 	add	fp,r16,r3
   14088:	d9003617 	ldw	r4,216(sp)
   1408c:	000d883a 	mov	r6,zero
   14090:	000f883a 	mov	r7,zero
   14094:	980b883a 	mov	r5,r19
   14098:	da003d15 	stw	r8,244(sp)
   1409c:	001e90c0 	call	1e90c <__eqdf2>
   140a0:	da003d17 	ldw	r8,244(sp)
   140a4:	10018d26 	beq	r2,zero,146dc <___vfprintf_internal_r+0x1e60>
   140a8:	d8802117 	ldw	r2,132(sp)
   140ac:	1700062e 	bgeu	r2,fp,140c8 <___vfprintf_internal_r+0x184c>
   140b0:	01000c04 	movi	r4,48
   140b4:	10c00044 	addi	r3,r2,1
   140b8:	d8c02115 	stw	r3,132(sp)
   140bc:	11000005 	stb	r4,0(r2)
   140c0:	d8802117 	ldw	r2,132(sp)
   140c4:	173ffb36 	bltu	r2,fp,140b4 <__alt_data_end+0xfc0140b4>
   140c8:	1405c83a 	sub	r2,r2,r16
   140cc:	d8803315 	stw	r2,204(sp)
   140d0:	008011c4 	movi	r2,71
   140d4:	b0817626 	beq	r22,r2,146b0 <___vfprintf_internal_r+0x1e34>
   140d8:	00801944 	movi	r2,101
   140dc:	1442800e 	bge	r2,r17,14ae0 <___vfprintf_internal_r+0x2264>
   140e0:	d8c02617 	ldw	r3,152(sp)
   140e4:	00801984 	movi	r2,102
   140e8:	d8c03215 	stw	r3,200(sp)
   140ec:	8881fe26 	beq	r17,r2,148e8 <___vfprintf_internal_r+0x206c>
   140f0:	d8c03217 	ldw	r3,200(sp)
   140f4:	d9003317 	ldw	r4,204(sp)
   140f8:	1901dd16 	blt	r3,r4,14870 <___vfprintf_internal_r+0x1ff4>
   140fc:	9480004c 	andi	r18,r18,1
   14100:	90022b1e 	bne	r18,zero,149b0 <___vfprintf_internal_r+0x2134>
   14104:	1805883a 	mov	r2,r3
   14108:	18028316 	blt	r3,zero,14b18 <___vfprintf_internal_r+0x229c>
   1410c:	d8c03217 	ldw	r3,200(sp)
   14110:	044019c4 	movi	r17,103
   14114:	d8c02b15 	stw	r3,172(sp)
   14118:	df002907 	ldb	fp,164(sp)
   1411c:	e001531e 	bne	fp,zero,1466c <___vfprintf_internal_r+0x1df0>
   14120:	df002783 	ldbu	fp,158(sp)
   14124:	d8802915 	stw	r2,164(sp)
   14128:	dc802c17 	ldw	r18,176(sp)
   1412c:	d8002a15 	stw	zero,168(sp)
   14130:	003baf06 	br	12ff0 <__alt_data_end+0xfc012ff0>
   14134:	d8c02e17 	ldw	r3,184(sp)
   14138:	d9002e17 	ldw	r4,184(sp)
   1413c:	d9402e17 	ldw	r5,184(sp)
   14140:	18c00017 	ldw	r3,0(r3)
   14144:	21000117 	ldw	r4,4(r4)
   14148:	29400204 	addi	r5,r5,8
   1414c:	d8c03615 	stw	r3,216(sp)
   14150:	d9003815 	stw	r4,224(sp)
   14154:	d9402e15 	stw	r5,184(sp)
   14158:	003b5006 	br	12e9c <__alt_data_end+0xfc012e9c>
   1415c:	ac400007 	ldb	r17,0(r21)
   14160:	003a2806 	br	12a04 <__alt_data_end+0xfc012a04>
   14164:	9080100c 	andi	r2,r18,64
   14168:	1000a826 	beq	r2,zero,1440c <___vfprintf_internal_r+0x1b90>
   1416c:	d8c02e17 	ldw	r3,184(sp)
   14170:	002d883a 	mov	r22,zero
   14174:	1cc0000b 	ldhu	r19,0(r3)
   14178:	18c00104 	addi	r3,r3,4
   1417c:	d8c02e15 	stw	r3,184(sp)
   14180:	003caf06 	br	13440 <__alt_data_end+0xfc013440>
   14184:	d9002e17 	ldw	r4,184(sp)
   14188:	d9402a17 	ldw	r5,168(sp)
   1418c:	002d883a 	mov	r22,zero
   14190:	20800104 	addi	r2,r4,4
   14194:	24c00017 	ldw	r19,0(r4)
   14198:	283ebb0e 	bge	r5,zero,13c88 <__alt_data_end+0xfc013c88>
   1419c:	003ef106 	br	13d64 <__alt_data_end+0xfc013d64>
   141a0:	9080040c 	andi	r2,r18,16
   141a4:	1000921e 	bne	r2,zero,143f0 <___vfprintf_internal_r+0x1b74>
   141a8:	9480100c 	andi	r18,r18,64
   141ac:	90013926 	beq	r18,zero,14694 <___vfprintf_internal_r+0x1e18>
   141b0:	d9402e17 	ldw	r5,184(sp)
   141b4:	d8c02f17 	ldw	r3,188(sp)
   141b8:	28800017 	ldw	r2,0(r5)
   141bc:	29400104 	addi	r5,r5,4
   141c0:	d9402e15 	stw	r5,184(sp)
   141c4:	10c0000d 	sth	r3,0(r2)
   141c8:	0039e406 	br	1295c <__alt_data_end+0xfc01295c>
   141cc:	9080100c 	andi	r2,r18,64
   141d0:	10008026 	beq	r2,zero,143d4 <___vfprintf_internal_r+0x1b58>
   141d4:	d8802e17 	ldw	r2,184(sp)
   141d8:	14c0000f 	ldh	r19,0(r2)
   141dc:	10800104 	addi	r2,r2,4
   141e0:	d8802e15 	stw	r2,184(sp)
   141e4:	982dd7fa 	srai	r22,r19,31
   141e8:	b005883a 	mov	r2,r22
   141ec:	003af706 	br	12dcc <__alt_data_end+0xfc012dcc>
   141f0:	9080100c 	andi	r2,r18,64
   141f4:	d8002785 	stb	zero,158(sp)
   141f8:	10008a1e 	bne	r2,zero,14424 <___vfprintf_internal_r+0x1ba8>
   141fc:	d9002e17 	ldw	r4,184(sp)
   14200:	d9402a17 	ldw	r5,168(sp)
   14204:	002d883a 	mov	r22,zero
   14208:	20800104 	addi	r2,r4,4
   1420c:	24c00017 	ldw	r19,0(r4)
   14210:	283e4b0e 	bge	r5,zero,13b40 <__alt_data_end+0xfc013b40>
   14214:	9d86b03a 	or	r3,r19,r22
   14218:	d8802e15 	stw	r2,184(sp)
   1421c:	183e4c1e 	bne	r3,zero,13b50 <__alt_data_end+0xfc013b50>
   14220:	0039883a 	mov	fp,zero
   14224:	0005883a 	mov	r2,zero
   14228:	003d4006 	br	1372c <__alt_data_end+0xfc01372c>
   1422c:	014000f4 	movhi	r5,3
   14230:	296e0584 	addi	r5,r5,-18410
   14234:	d9402c15 	stw	r5,176(sp)
   14238:	d9402c17 	ldw	r5,176(sp)
   1423c:	1c47883a 	add	r3,r3,r17
   14240:	10800044 	addi	r2,r2,1
   14244:	41400015 	stw	r5,0(r8)
   14248:	44400115 	stw	r17,4(r8)
   1424c:	d8c02015 	stw	r3,128(sp)
   14250:	d8801f15 	stw	r2,124(sp)
   14254:	010001c4 	movi	r4,7
   14258:	20bec816 	blt	r4,r2,13d7c <__alt_data_end+0xfc013d7c>
   1425c:	42000204 	addi	r8,r8,8
   14260:	003ecd06 	br	13d98 <__alt_data_end+0xfc013d98>
   14264:	d9002a17 	ldw	r4,168(sp)
   14268:	d8002785 	stb	zero,158(sp)
   1426c:	203d2d16 	blt	r4,zero,13724 <__alt_data_end+0xfc013724>
   14270:	00bfdfc4 	movi	r2,-129
   14274:	90a4703a 	and	r18,r18,r2
   14278:	003a6106 	br	12c00 <__alt_data_end+0xfc012c00>
   1427c:	010000f4 	movhi	r4,3
   14280:	212e0584 	addi	r4,r4,-18410
   14284:	d9002c15 	stw	r4,176(sp)
   14288:	003bea06 	br	13234 <__alt_data_end+0xfc013234>
   1428c:	d9002d17 	ldw	r4,180(sp)
   14290:	d9801e04 	addi	r6,sp,120
   14294:	b80b883a 	mov	r5,r23
   14298:	001ab880 	call	1ab88 <__sprint_r>
   1429c:	103a7b1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   142a0:	d8c02017 	ldw	r3,128(sp)
   142a4:	da000404 	addi	r8,sp,16
   142a8:	003d4106 	br	137b0 <__alt_data_end+0xfc0137b0>
   142ac:	d8801f17 	ldw	r2,124(sp)
   142b0:	014000f4 	movhi	r5,3
   142b4:	01000044 	movi	r4,1
   142b8:	18c00044 	addi	r3,r3,1
   142bc:	10800044 	addi	r2,r2,1
   142c0:	296dfd04 	addi	r5,r5,-18444
   142c4:	41000115 	stw	r4,4(r8)
   142c8:	41400015 	stw	r5,0(r8)
   142cc:	d8c02015 	stw	r3,128(sp)
   142d0:	d8801f15 	stw	r2,124(sp)
   142d4:	010001c4 	movi	r4,7
   142d8:	20805c16 	blt	r4,r2,1444c <___vfprintf_internal_r+0x1bd0>
   142dc:	42000204 	addi	r8,r8,8
   142e0:	8800041e 	bne	r17,zero,142f4 <___vfprintf_internal_r+0x1a78>
   142e4:	d8803317 	ldw	r2,204(sp)
   142e8:	1000021e 	bne	r2,zero,142f4 <___vfprintf_internal_r+0x1a78>
   142ec:	9080004c 	andi	r2,r18,1
   142f0:	103be726 	beq	r2,zero,13290 <__alt_data_end+0xfc013290>
   142f4:	d9003717 	ldw	r4,220(sp)
   142f8:	d8801f17 	ldw	r2,124(sp)
   142fc:	d9403417 	ldw	r5,208(sp)
   14300:	20c7883a 	add	r3,r4,r3
   14304:	10800044 	addi	r2,r2,1
   14308:	41000115 	stw	r4,4(r8)
   1430c:	41400015 	stw	r5,0(r8)
   14310:	d8c02015 	stw	r3,128(sp)
   14314:	d8801f15 	stw	r2,124(sp)
   14318:	010001c4 	movi	r4,7
   1431c:	20812116 	blt	r4,r2,147a4 <___vfprintf_internal_r+0x1f28>
   14320:	42000204 	addi	r8,r8,8
   14324:	0463c83a 	sub	r17,zero,r17
   14328:	0440730e 	bge	zero,r17,144f8 <___vfprintf_internal_r+0x1c7c>
   1432c:	05800404 	movi	r22,16
   14330:	b440860e 	bge	r22,r17,1454c <___vfprintf_internal_r+0x1cd0>
   14334:	014000f4 	movhi	r5,3
   14338:	296e0584 	addi	r5,r5,-18410
   1433c:	d9402c15 	stw	r5,176(sp)
   14340:	070001c4 	movi	fp,7
   14344:	dcc02d17 	ldw	r19,180(sp)
   14348:	00000306 	br	14358 <___vfprintf_internal_r+0x1adc>
   1434c:	42000204 	addi	r8,r8,8
   14350:	8c7ffc04 	addi	r17,r17,-16
   14354:	b440800e 	bge	r22,r17,14558 <___vfprintf_internal_r+0x1cdc>
   14358:	18c00404 	addi	r3,r3,16
   1435c:	10800044 	addi	r2,r2,1
   14360:	45000015 	stw	r20,0(r8)
   14364:	45800115 	stw	r22,4(r8)
   14368:	d8c02015 	stw	r3,128(sp)
   1436c:	d8801f15 	stw	r2,124(sp)
   14370:	e0bff60e 	bge	fp,r2,1434c <__alt_data_end+0xfc01434c>
   14374:	d9801e04 	addi	r6,sp,120
   14378:	b80b883a 	mov	r5,r23
   1437c:	9809883a 	mov	r4,r19
   14380:	001ab880 	call	1ab88 <__sprint_r>
   14384:	103a411e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   14388:	d8c02017 	ldw	r3,128(sp)
   1438c:	d8801f17 	ldw	r2,124(sp)
   14390:	da000404 	addi	r8,sp,16
   14394:	003fee06 	br	14350 <__alt_data_end+0xfc014350>
   14398:	00bfffc4 	movi	r2,-1
   1439c:	003a3f06 	br	12c9c <__alt_data_end+0xfc012c9c>
   143a0:	008011c4 	movi	r2,71
   143a4:	1440b816 	blt	r2,r17,14688 <___vfprintf_internal_r+0x1e0c>
   143a8:	040000f4 	movhi	r16,3
   143ac:	842def04 	addi	r16,r16,-18500
   143b0:	00c000c4 	movi	r3,3
   143b4:	00bfdfc4 	movi	r2,-129
   143b8:	d8c02915 	stw	r3,164(sp)
   143bc:	90a4703a 	and	r18,r18,r2
   143c0:	df002783 	ldbu	fp,158(sp)
   143c4:	d8c02b15 	stw	r3,172(sp)
   143c8:	d8002a15 	stw	zero,168(sp)
   143cc:	d8003215 	stw	zero,200(sp)
   143d0:	003b0706 	br	12ff0 <__alt_data_end+0xfc012ff0>
   143d4:	d8c02e17 	ldw	r3,184(sp)
   143d8:	1cc00017 	ldw	r19,0(r3)
   143dc:	18c00104 	addi	r3,r3,4
   143e0:	d8c02e15 	stw	r3,184(sp)
   143e4:	982dd7fa 	srai	r22,r19,31
   143e8:	b005883a 	mov	r2,r22
   143ec:	003a7706 	br	12dcc <__alt_data_end+0xfc012dcc>
   143f0:	d8c02e17 	ldw	r3,184(sp)
   143f4:	d9002f17 	ldw	r4,188(sp)
   143f8:	18800017 	ldw	r2,0(r3)
   143fc:	18c00104 	addi	r3,r3,4
   14400:	d8c02e15 	stw	r3,184(sp)
   14404:	11000015 	stw	r4,0(r2)
   14408:	00395406 	br	1295c <__alt_data_end+0xfc01295c>
   1440c:	d9002e17 	ldw	r4,184(sp)
   14410:	002d883a 	mov	r22,zero
   14414:	24c00017 	ldw	r19,0(r4)
   14418:	21000104 	addi	r4,r4,4
   1441c:	d9002e15 	stw	r4,184(sp)
   14420:	003c0706 	br	13440 <__alt_data_end+0xfc013440>
   14424:	d9402e17 	ldw	r5,184(sp)
   14428:	d8c02a17 	ldw	r3,168(sp)
   1442c:	002d883a 	mov	r22,zero
   14430:	28800104 	addi	r2,r5,4
   14434:	2cc0000b 	ldhu	r19,0(r5)
   14438:	183dc10e 	bge	r3,zero,13b40 <__alt_data_end+0xfc013b40>
   1443c:	003f7506 	br	14214 <__alt_data_end+0xfc014214>
   14440:	040000f4 	movhi	r16,3
   14444:	842ded04 	addi	r16,r16,-18508
   14448:	003aa706 	br	12ee8 <__alt_data_end+0xfc012ee8>
   1444c:	d9002d17 	ldw	r4,180(sp)
   14450:	d9801e04 	addi	r6,sp,120
   14454:	b80b883a 	mov	r5,r23
   14458:	001ab880 	call	1ab88 <__sprint_r>
   1445c:	103a0b1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   14460:	dc402617 	ldw	r17,152(sp)
   14464:	d8c02017 	ldw	r3,128(sp)
   14468:	da000404 	addi	r8,sp,16
   1446c:	003f9c06 	br	142e0 <__alt_data_end+0xfc0142e0>
   14470:	ac400043 	ldbu	r17,1(r21)
   14474:	84000814 	ori	r16,r16,32
   14478:	ad400044 	addi	r21,r21,1
   1447c:	8c403fcc 	andi	r17,r17,255
   14480:	8c40201c 	xori	r17,r17,128
   14484:	8c7fe004 	addi	r17,r17,-128
   14488:	00395e06 	br	12a04 <__alt_data_end+0xfc012a04>
   1448c:	d8c02e15 	stw	r3,184(sp)
   14490:	0039883a 	mov	fp,zero
   14494:	003e3506 	br	13d6c <__alt_data_end+0xfc013d6c>
   14498:	d9002d17 	ldw	r4,180(sp)
   1449c:	d9801e04 	addi	r6,sp,120
   144a0:	b80b883a 	mov	r5,r23
   144a4:	001ab880 	call	1ab88 <__sprint_r>
   144a8:	1039f81e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   144ac:	d8c02017 	ldw	r3,128(sp)
   144b0:	da000404 	addi	r8,sp,16
   144b4:	003cd006 	br	137f8 <__alt_data_end+0xfc0137f8>
   144b8:	8009883a 	mov	r4,r16
   144bc:	df003d15 	stw	fp,244(sp)
   144c0:	00105200 	call	10520 <strlen>
   144c4:	d8802b15 	stw	r2,172(sp)
   144c8:	da003d17 	ldw	r8,244(sp)
   144cc:	103c200e 	bge	r2,zero,13550 <__alt_data_end+0xfc013550>
   144d0:	0005883a 	mov	r2,zero
   144d4:	003c1e06 	br	13550 <__alt_data_end+0xfc013550>
   144d8:	d9002d17 	ldw	r4,180(sp)
   144dc:	d9801e04 	addi	r6,sp,120
   144e0:	b80b883a 	mov	r5,r23
   144e4:	001ab880 	call	1ab88 <__sprint_r>
   144e8:	1039e81e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   144ec:	d8c02017 	ldw	r3,128(sp)
   144f0:	d8801f17 	ldw	r2,124(sp)
   144f4:	da000404 	addi	r8,sp,16
   144f8:	d9403317 	ldw	r5,204(sp)
   144fc:	10800044 	addi	r2,r2,1
   14500:	44000015 	stw	r16,0(r8)
   14504:	28c7883a 	add	r3,r5,r3
   14508:	003b5b06 	br	13278 <__alt_data_end+0xfc013278>
   1450c:	010000f4 	movhi	r4,3
   14510:	212e0984 	addi	r4,r4,-18394
   14514:	d9003515 	stw	r4,212(sp)
   14518:	003af206 	br	130e4 <__alt_data_end+0xfc0130e4>
   1451c:	013fffc4 	movi	r4,-1
   14520:	003a0806 	br	12d44 <__alt_data_end+0xfc012d44>
   14524:	0023883a 	mov	r17,zero
   14528:	003d9d06 	br	13ba0 <__alt_data_end+0xfc013ba0>
   1452c:	d9002d17 	ldw	r4,180(sp)
   14530:	d9801e04 	addi	r6,sp,120
   14534:	b80b883a 	mov	r5,r23
   14538:	001ab880 	call	1ab88 <__sprint_r>
   1453c:	1039d31e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   14540:	d8c02017 	ldw	r3,128(sp)
   14544:	da000404 	addi	r8,sp,16
   14548:	003d9406 	br	13b9c <__alt_data_end+0xfc013b9c>
   1454c:	010000f4 	movhi	r4,3
   14550:	212e0584 	addi	r4,r4,-18410
   14554:	d9002c15 	stw	r4,176(sp)
   14558:	d9002c17 	ldw	r4,176(sp)
   1455c:	1c47883a 	add	r3,r3,r17
   14560:	10800044 	addi	r2,r2,1
   14564:	41000015 	stw	r4,0(r8)
   14568:	44400115 	stw	r17,4(r8)
   1456c:	d8c02015 	stw	r3,128(sp)
   14570:	d8801f15 	stw	r2,124(sp)
   14574:	010001c4 	movi	r4,7
   14578:	20bfd716 	blt	r4,r2,144d8 <__alt_data_end+0xfc0144d8>
   1457c:	42000204 	addi	r8,r8,8
   14580:	003fdd06 	br	144f8 <__alt_data_end+0xfc0144f8>
   14584:	d9002d17 	ldw	r4,180(sp)
   14588:	d9801e04 	addi	r6,sp,120
   1458c:	b80b883a 	mov	r5,r23
   14590:	001ab880 	call	1ab88 <__sprint_r>
   14594:	1039bd1e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   14598:	d8802617 	ldw	r2,152(sp)
   1459c:	d8c02017 	ldw	r3,128(sp)
   145a0:	da000404 	addi	r8,sp,16
   145a4:	003e1006 	br	13de8 <__alt_data_end+0xfc013de8>
   145a8:	00800044 	movi	r2,1
   145ac:	10803fcc 	andi	r2,r2,255
   145b0:	00c00044 	movi	r3,1
   145b4:	10fa0d26 	beq	r2,r3,12dec <__alt_data_end+0xfc012dec>
   145b8:	00c00084 	movi	r3,2
   145bc:	10fbaf26 	beq	r2,r3,1347c <__alt_data_end+0xfc01347c>
   145c0:	003a6d06 	br	12f78 <__alt_data_end+0xfc012f78>
   145c4:	010000f4 	movhi	r4,3
   145c8:	212e0984 	addi	r4,r4,-18394
   145cc:	d9003515 	stw	r4,212(sp)
   145d0:	003b5406 	br	13324 <__alt_data_end+0xfc013324>
   145d4:	d8802a17 	ldw	r2,168(sp)
   145d8:	00c00184 	movi	r3,6
   145dc:	1880012e 	bgeu	r3,r2,145e4 <___vfprintf_internal_r+0x1d68>
   145e0:	1805883a 	mov	r2,r3
   145e4:	d8802b15 	stw	r2,172(sp)
   145e8:	1000ef16 	blt	r2,zero,149a8 <___vfprintf_internal_r+0x212c>
   145ec:	040000f4 	movhi	r16,3
   145f0:	d8802915 	stw	r2,164(sp)
   145f4:	dcc02e15 	stw	r19,184(sp)
   145f8:	d8002a15 	stw	zero,168(sp)
   145fc:	d8003215 	stw	zero,200(sp)
   14600:	842dfb04 	addi	r16,r16,-18452
   14604:	0039883a 	mov	fp,zero
   14608:	003a8006 	br	1300c <__alt_data_end+0xfc01300c>
   1460c:	0021883a 	mov	r16,zero
   14610:	003e0706 	br	13e30 <__alt_data_end+0xfc013e30>
   14614:	d9002d17 	ldw	r4,180(sp)
   14618:	d9801e04 	addi	r6,sp,120
   1461c:	b80b883a 	mov	r5,r23
   14620:	001ab880 	call	1ab88 <__sprint_r>
   14624:	1039991e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   14628:	d8802617 	ldw	r2,152(sp)
   1462c:	d9403317 	ldw	r5,204(sp)
   14630:	d8c02017 	ldw	r3,128(sp)
   14634:	da000404 	addi	r8,sp,16
   14638:	2885c83a 	sub	r2,r5,r2
   1463c:	003dfb06 	br	13e2c <__alt_data_end+0xfc013e2c>
   14640:	9080004c 	andi	r2,r18,1
   14644:	103e8f1e 	bne	r2,zero,14084 <__alt_data_end+0xfc014084>
   14648:	d8802117 	ldw	r2,132(sp)
   1464c:	003e9e06 	br	140c8 <__alt_data_end+0xfc0140c8>
   14650:	1025883a 	mov	r18,r2
   14654:	0039883a 	mov	fp,zero
   14658:	00800084 	movi	r2,2
   1465c:	003fd306 	br	145ac <__alt_data_end+0xfc0145ac>
   14660:	07000b44 	movi	fp,45
   14664:	df002785 	stb	fp,158(sp)
   14668:	003a1b06 	br	12ed8 <__alt_data_end+0xfc012ed8>
   1466c:	00c00b44 	movi	r3,45
   14670:	d8c02785 	stb	r3,158(sp)
   14674:	d8802915 	stw	r2,164(sp)
   14678:	dc802c17 	ldw	r18,176(sp)
   1467c:	d8002a15 	stw	zero,168(sp)
   14680:	07000b44 	movi	fp,45
   14684:	003a5e06 	br	13000 <__alt_data_end+0xfc013000>
   14688:	040000f4 	movhi	r16,3
   1468c:	842df004 	addi	r16,r16,-18496
   14690:	003f4706 	br	143b0 <__alt_data_end+0xfc0143b0>
   14694:	d9002e17 	ldw	r4,184(sp)
   14698:	d9402f17 	ldw	r5,188(sp)
   1469c:	20800017 	ldw	r2,0(r4)
   146a0:	21000104 	addi	r4,r4,4
   146a4:	d9002e15 	stw	r4,184(sp)
   146a8:	11400015 	stw	r5,0(r2)
   146ac:	0038ab06 	br	1295c <__alt_data_end+0xfc01295c>
   146b0:	dd802617 	ldw	r22,152(sp)
   146b4:	00bfff44 	movi	r2,-3
   146b8:	b0801c16 	blt	r22,r2,1472c <___vfprintf_internal_r+0x1eb0>
   146bc:	d9402a17 	ldw	r5,168(sp)
   146c0:	2d801a16 	blt	r5,r22,1472c <___vfprintf_internal_r+0x1eb0>
   146c4:	dd803215 	stw	r22,200(sp)
   146c8:	003e8906 	br	140f0 <__alt_data_end+0xfc0140f0>
   146cc:	010000f4 	movhi	r4,3
   146d0:	212e0584 	addi	r4,r4,-18410
   146d4:	d9002c15 	stw	r4,176(sp)
   146d8:	003c9106 	br	13920 <__alt_data_end+0xfc013920>
   146dc:	e005883a 	mov	r2,fp
   146e0:	003e7906 	br	140c8 <__alt_data_end+0xfc0140c8>
   146e4:	d9002a17 	ldw	r4,168(sp)
   146e8:	df002783 	ldbu	fp,158(sp)
   146ec:	dcc02e15 	stw	r19,184(sp)
   146f0:	d9002915 	stw	r4,164(sp)
   146f4:	d9002b15 	stw	r4,172(sp)
   146f8:	d8002a15 	stw	zero,168(sp)
   146fc:	d8003215 	stw	zero,200(sp)
   14700:	003a3b06 	br	12ff0 <__alt_data_end+0xfc012ff0>
   14704:	9080004c 	andi	r2,r18,1
   14708:	0039883a 	mov	fp,zero
   1470c:	10000426 	beq	r2,zero,14720 <___vfprintf_internal_r+0x1ea4>
   14710:	00800c04 	movi	r2,48
   14714:	dc001dc4 	addi	r16,sp,119
   14718:	d8801dc5 	stb	r2,119(sp)
   1471c:	003b6406 	br	134b0 <__alt_data_end+0xfc0134b0>
   14720:	d8002b15 	stw	zero,172(sp)
   14724:	dc001e04 	addi	r16,sp,120
   14728:	003a2b06 	br	12fd8 <__alt_data_end+0xfc012fd8>
   1472c:	8c7fff84 	addi	r17,r17,-2
   14730:	b5bfffc4 	addi	r22,r22,-1
   14734:	dd802615 	stw	r22,152(sp)
   14738:	dc4022c5 	stb	r17,139(sp)
   1473c:	b000bf16 	blt	r22,zero,14a3c <___vfprintf_internal_r+0x21c0>
   14740:	00800ac4 	movi	r2,43
   14744:	d8802305 	stb	r2,140(sp)
   14748:	00800244 	movi	r2,9
   1474c:	15807016 	blt	r2,r22,14910 <___vfprintf_internal_r+0x2094>
   14750:	00800c04 	movi	r2,48
   14754:	b5800c04 	addi	r22,r22,48
   14758:	d8802345 	stb	r2,141(sp)
   1475c:	dd802385 	stb	r22,142(sp)
   14760:	d88023c4 	addi	r2,sp,143
   14764:	df0022c4 	addi	fp,sp,139
   14768:	d8c03317 	ldw	r3,204(sp)
   1476c:	1739c83a 	sub	fp,r2,fp
   14770:	d9003317 	ldw	r4,204(sp)
   14774:	e0c7883a 	add	r3,fp,r3
   14778:	df003a15 	stw	fp,232(sp)
   1477c:	d8c02b15 	stw	r3,172(sp)
   14780:	00800044 	movi	r2,1
   14784:	1100b30e 	bge	r2,r4,14a54 <___vfprintf_internal_r+0x21d8>
   14788:	d8c02b17 	ldw	r3,172(sp)
   1478c:	18c00044 	addi	r3,r3,1
   14790:	d8c02b15 	stw	r3,172(sp)
   14794:	1805883a 	mov	r2,r3
   14798:	1800ac16 	blt	r3,zero,14a4c <___vfprintf_internal_r+0x21d0>
   1479c:	d8003215 	stw	zero,200(sp)
   147a0:	003e5d06 	br	14118 <__alt_data_end+0xfc014118>
   147a4:	d9002d17 	ldw	r4,180(sp)
   147a8:	d9801e04 	addi	r6,sp,120
   147ac:	b80b883a 	mov	r5,r23
   147b0:	001ab880 	call	1ab88 <__sprint_r>
   147b4:	1039351e 	bne	r2,zero,12c8c <__alt_data_end+0xfc012c8c>
   147b8:	dc402617 	ldw	r17,152(sp)
   147bc:	d8c02017 	ldw	r3,128(sp)
   147c0:	d8801f17 	ldw	r2,124(sp)
   147c4:	da000404 	addi	r8,sp,16
   147c8:	003ed606 	br	14324 <__alt_data_end+0xfc014324>
   147cc:	182b883a 	mov	r21,r3
   147d0:	d8002a15 	stw	zero,168(sp)
   147d4:	00388c06 	br	12a08 <__alt_data_end+0xfc012a08>
   147d8:	d8802a17 	ldw	r2,168(sp)
   147dc:	103e071e 	bne	r2,zero,13ffc <__alt_data_end+0xfc013ffc>
   147e0:	dc002a15 	stw	r16,168(sp)
   147e4:	003e0506 	br	13ffc <__alt_data_end+0xfc013ffc>
   147e8:	d9002a17 	ldw	r4,168(sp)
   147ec:	20c00044 	addi	r3,r4,1
   147f0:	003e0f06 	br	14030 <__alt_data_end+0xfc014030>
   147f4:	01400184 	movi	r5,6
   147f8:	d9402a15 	stw	r5,168(sp)
   147fc:	003dff06 	br	13ffc <__alt_data_end+0xfc013ffc>
   14800:	d8802104 	addi	r2,sp,132
   14804:	d8800315 	stw	r2,12(sp)
   14808:	d8802504 	addi	r2,sp,148
   1480c:	d8800215 	stw	r2,8(sp)
   14810:	d8802604 	addi	r2,sp,152
   14814:	d8800115 	stw	r2,4(sp)
   14818:	d8802a17 	ldw	r2,168(sp)
   1481c:	d9403617 	ldw	r5,216(sp)
   14820:	d9002d17 	ldw	r4,180(sp)
   14824:	d8800015 	stw	r2,0(sp)
   14828:	01c000c4 	movi	r7,3
   1482c:	980d883a 	mov	r6,r19
   14830:	da003d15 	stw	r8,244(sp)
   14834:	0014fac0 	call	14fac <_dtoa_r>
   14838:	d8c02a17 	ldw	r3,168(sp)
   1483c:	da003d17 	ldw	r8,244(sp)
   14840:	1021883a 	mov	r16,r2
   14844:	10f9883a 	add	fp,r2,r3
   14848:	81000007 	ldb	r4,0(r16)
   1484c:	00800c04 	movi	r2,48
   14850:	20805e26 	beq	r4,r2,149cc <___vfprintf_internal_r+0x2150>
   14854:	d8c02617 	ldw	r3,152(sp)
   14858:	e0f9883a 	add	fp,fp,r3
   1485c:	003e0a06 	br	14088 <__alt_data_end+0xfc014088>
   14860:	00c00b44 	movi	r3,45
   14864:	24e0003c 	xorhi	r19,r4,32768
   14868:	d8c02905 	stb	r3,164(sp)
   1486c:	003de906 	br	14014 <__alt_data_end+0xfc014014>
   14870:	d8c03217 	ldw	r3,200(sp)
   14874:	00c07a0e 	bge	zero,r3,14a60 <___vfprintf_internal_r+0x21e4>
   14878:	00800044 	movi	r2,1
   1487c:	d9003317 	ldw	r4,204(sp)
   14880:	1105883a 	add	r2,r2,r4
   14884:	d8802b15 	stw	r2,172(sp)
   14888:	10004e16 	blt	r2,zero,149c4 <___vfprintf_internal_r+0x2148>
   1488c:	044019c4 	movi	r17,103
   14890:	003e2106 	br	14118 <__alt_data_end+0xfc014118>
   14894:	d9002a17 	ldw	r4,168(sp)
   14898:	d8802104 	addi	r2,sp,132
   1489c:	d8800315 	stw	r2,12(sp)
   148a0:	d9000015 	stw	r4,0(sp)
   148a4:	d8802504 	addi	r2,sp,148
   148a8:	d9403617 	ldw	r5,216(sp)
   148ac:	d9002d17 	ldw	r4,180(sp)
   148b0:	d8800215 	stw	r2,8(sp)
   148b4:	d8802604 	addi	r2,sp,152
   148b8:	d8800115 	stw	r2,4(sp)
   148bc:	01c000c4 	movi	r7,3
   148c0:	980d883a 	mov	r6,r19
   148c4:	da003d15 	stw	r8,244(sp)
   148c8:	0014fac0 	call	14fac <_dtoa_r>
   148cc:	d8c02a17 	ldw	r3,168(sp)
   148d0:	da003d17 	ldw	r8,244(sp)
   148d4:	1021883a 	mov	r16,r2
   148d8:	00801184 	movi	r2,70
   148dc:	80f9883a 	add	fp,r16,r3
   148e0:	88bfd926 	beq	r17,r2,14848 <__alt_data_end+0xfc014848>
   148e4:	003de806 	br	14088 <__alt_data_end+0xfc014088>
   148e8:	d9002a17 	ldw	r4,168(sp)
   148ec:	00c04d0e 	bge	zero,r3,14a24 <___vfprintf_internal_r+0x21a8>
   148f0:	2000441e 	bne	r4,zero,14a04 <___vfprintf_internal_r+0x2188>
   148f4:	9480004c 	andi	r18,r18,1
   148f8:	9000421e 	bne	r18,zero,14a04 <___vfprintf_internal_r+0x2188>
   148fc:	1805883a 	mov	r2,r3
   14900:	18006f16 	blt	r3,zero,14ac0 <___vfprintf_internal_r+0x2244>
   14904:	d8c03217 	ldw	r3,200(sp)
   14908:	d8c02b15 	stw	r3,172(sp)
   1490c:	003e0206 	br	14118 <__alt_data_end+0xfc014118>
   14910:	df0022c4 	addi	fp,sp,139
   14914:	dc002a15 	stw	r16,168(sp)
   14918:	4027883a 	mov	r19,r8
   1491c:	e021883a 	mov	r16,fp
   14920:	b009883a 	mov	r4,r22
   14924:	01400284 	movi	r5,10
   14928:	000d7880 	call	d788 <__modsi3>
   1492c:	10800c04 	addi	r2,r2,48
   14930:	843fffc4 	addi	r16,r16,-1
   14934:	b009883a 	mov	r4,r22
   14938:	01400284 	movi	r5,10
   1493c:	80800005 	stb	r2,0(r16)
   14940:	000d7040 	call	d704 <__divsi3>
   14944:	102d883a 	mov	r22,r2
   14948:	00800244 	movi	r2,9
   1494c:	15bff416 	blt	r2,r22,14920 <__alt_data_end+0xfc014920>
   14950:	9811883a 	mov	r8,r19
   14954:	b0800c04 	addi	r2,r22,48
   14958:	8027883a 	mov	r19,r16
   1495c:	997fffc4 	addi	r5,r19,-1
   14960:	98bfffc5 	stb	r2,-1(r19)
   14964:	dc002a17 	ldw	r16,168(sp)
   14968:	2f006d2e 	bgeu	r5,fp,14b20 <___vfprintf_internal_r+0x22a4>
   1496c:	d9c02384 	addi	r7,sp,142
   14970:	3ccfc83a 	sub	r7,r7,r19
   14974:	d9002344 	addi	r4,sp,141
   14978:	e1cf883a 	add	r7,fp,r7
   1497c:	00000106 	br	14984 <___vfprintf_internal_r+0x2108>
   14980:	28800003 	ldbu	r2,0(r5)
   14984:	20800005 	stb	r2,0(r4)
   14988:	21000044 	addi	r4,r4,1
   1498c:	29400044 	addi	r5,r5,1
   14990:	393ffb1e 	bne	r7,r4,14980 <__alt_data_end+0xfc014980>
   14994:	d8802304 	addi	r2,sp,140
   14998:	14c5c83a 	sub	r2,r2,r19
   1499c:	d8c02344 	addi	r3,sp,141
   149a0:	1885883a 	add	r2,r3,r2
   149a4:	003f7006 	br	14768 <__alt_data_end+0xfc014768>
   149a8:	0005883a 	mov	r2,zero
   149ac:	003f0f06 	br	145ec <__alt_data_end+0xfc0145ec>
   149b0:	d8c03217 	ldw	r3,200(sp)
   149b4:	18c00044 	addi	r3,r3,1
   149b8:	d8c02b15 	stw	r3,172(sp)
   149bc:	1805883a 	mov	r2,r3
   149c0:	183fb20e 	bge	r3,zero,1488c <__alt_data_end+0xfc01488c>
   149c4:	0005883a 	mov	r2,zero
   149c8:	003fb006 	br	1488c <__alt_data_end+0xfc01488c>
   149cc:	d9003617 	ldw	r4,216(sp)
   149d0:	000d883a 	mov	r6,zero
   149d4:	000f883a 	mov	r7,zero
   149d8:	980b883a 	mov	r5,r19
   149dc:	d8c03c15 	stw	r3,240(sp)
   149e0:	da003d15 	stw	r8,244(sp)
   149e4:	001e90c0 	call	1e90c <__eqdf2>
   149e8:	d8c03c17 	ldw	r3,240(sp)
   149ec:	da003d17 	ldw	r8,244(sp)
   149f0:	103f9826 	beq	r2,zero,14854 <__alt_data_end+0xfc014854>
   149f4:	00800044 	movi	r2,1
   149f8:	10c7c83a 	sub	r3,r2,r3
   149fc:	d8c02615 	stw	r3,152(sp)
   14a00:	003f9506 	br	14858 <__alt_data_end+0xfc014858>
   14a04:	d9002a17 	ldw	r4,168(sp)
   14a08:	d8c03217 	ldw	r3,200(sp)
   14a0c:	20800044 	addi	r2,r4,1
   14a10:	1885883a 	add	r2,r3,r2
   14a14:	d8802b15 	stw	r2,172(sp)
   14a18:	103dbf0e 	bge	r2,zero,14118 <__alt_data_end+0xfc014118>
   14a1c:	0005883a 	mov	r2,zero
   14a20:	003dbd06 	br	14118 <__alt_data_end+0xfc014118>
   14a24:	2000201e 	bne	r4,zero,14aa8 <___vfprintf_internal_r+0x222c>
   14a28:	9480004c 	andi	r18,r18,1
   14a2c:	90001e1e 	bne	r18,zero,14aa8 <___vfprintf_internal_r+0x222c>
   14a30:	00800044 	movi	r2,1
   14a34:	d8802b15 	stw	r2,172(sp)
   14a38:	003db706 	br	14118 <__alt_data_end+0xfc014118>
   14a3c:	00800b44 	movi	r2,45
   14a40:	05adc83a 	sub	r22,zero,r22
   14a44:	d8802305 	stb	r2,140(sp)
   14a48:	003f3f06 	br	14748 <__alt_data_end+0xfc014748>
   14a4c:	0005883a 	mov	r2,zero
   14a50:	003f5206 	br	1479c <__alt_data_end+0xfc01479c>
   14a54:	90a4703a 	and	r18,r18,r2
   14a58:	903f4e26 	beq	r18,zero,14794 <__alt_data_end+0xfc014794>
   14a5c:	003f4a06 	br	14788 <__alt_data_end+0xfc014788>
   14a60:	00800084 	movi	r2,2
   14a64:	10c5c83a 	sub	r2,r2,r3
   14a68:	003f8406 	br	1487c <__alt_data_end+0xfc01487c>
   14a6c:	d9402e17 	ldw	r5,184(sp)
   14a70:	d9002e17 	ldw	r4,184(sp)
   14a74:	ac400043 	ldbu	r17,1(r21)
   14a78:	29400017 	ldw	r5,0(r5)
   14a7c:	20800104 	addi	r2,r4,4
   14a80:	d8802e15 	stw	r2,184(sp)
   14a84:	d9402a15 	stw	r5,168(sp)
   14a88:	182b883a 	mov	r21,r3
   14a8c:	283e7b0e 	bge	r5,zero,1447c <__alt_data_end+0xfc01447c>
   14a90:	8c403fcc 	andi	r17,r17,255
   14a94:	017fffc4 	movi	r5,-1
   14a98:	8c40201c 	xori	r17,r17,128
   14a9c:	d9402a15 	stw	r5,168(sp)
   14aa0:	8c7fe004 	addi	r17,r17,-128
   14aa4:	0037d706 	br	12a04 <__alt_data_end+0xfc012a04>
   14aa8:	d8c02a17 	ldw	r3,168(sp)
   14aac:	18c00084 	addi	r3,r3,2
   14ab0:	d8c02b15 	stw	r3,172(sp)
   14ab4:	1805883a 	mov	r2,r3
   14ab8:	183d970e 	bge	r3,zero,14118 <__alt_data_end+0xfc014118>
   14abc:	003fd706 	br	14a1c <__alt_data_end+0xfc014a1c>
   14ac0:	0005883a 	mov	r2,zero
   14ac4:	003f8f06 	br	14904 <__alt_data_end+0xfc014904>
   14ac8:	9080004c 	andi	r2,r18,1
   14acc:	103f821e 	bne	r2,zero,148d8 <__alt_data_end+0xfc0148d8>
   14ad0:	d8802117 	ldw	r2,132(sp)
   14ad4:	1405c83a 	sub	r2,r2,r16
   14ad8:	d8803315 	stw	r2,204(sp)
   14adc:	b47ef426 	beq	r22,r17,146b0 <__alt_data_end+0xfc0146b0>
   14ae0:	dd802617 	ldw	r22,152(sp)
   14ae4:	003f1206 	br	14730 <__alt_data_end+0xfc014730>
   14ae8:	d8c02b03 	ldbu	r3,172(sp)
   14aec:	d8c02785 	stb	r3,158(sp)
   14af0:	0038df06 	br	12e70 <__alt_data_end+0xfc012e70>
   14af4:	d8c02b03 	ldbu	r3,172(sp)
   14af8:	d8c02785 	stb	r3,158(sp)
   14afc:	0038aa06 	br	12da8 <__alt_data_end+0xfc012da8>
   14b00:	d8c02b03 	ldbu	r3,172(sp)
   14b04:	d8c02785 	stb	r3,158(sp)
   14b08:	003a4306 	br	13418 <__alt_data_end+0xfc013418>
   14b0c:	d8c02b03 	ldbu	r3,172(sp)
   14b10:	d8c02785 	stb	r3,158(sp)
   14b14:	003af506 	br	136ec <__alt_data_end+0xfc0136ec>
   14b18:	0005883a 	mov	r2,zero
   14b1c:	003d7b06 	br	1410c <__alt_data_end+0xfc01410c>
   14b20:	d8802344 	addi	r2,sp,141
   14b24:	003f1006 	br	14768 <__alt_data_end+0xfc014768>
   14b28:	d8c02b03 	ldbu	r3,172(sp)
   14b2c:	d8c02785 	stb	r3,158(sp)
   14b30:	0038fd06 	br	12f28 <__alt_data_end+0xfc012f28>
   14b34:	d8c02b03 	ldbu	r3,172(sp)
   14b38:	d8c02785 	stb	r3,158(sp)
   14b3c:	003a9706 	br	1359c <__alt_data_end+0xfc01359c>
   14b40:	d8c02b03 	ldbu	r3,172(sp)
   14b44:	d8c02785 	stb	r3,158(sp)
   14b48:	003a1806 	br	133ac <__alt_data_end+0xfc0133ac>
   14b4c:	d8c02b03 	ldbu	r3,172(sp)
   14b50:	d8c02785 	stb	r3,158(sp)
   14b54:	003abe06 	br	13650 <__alt_data_end+0xfc013650>

00014b58 <__vfprintf_internal>:
   14b58:	008000f4 	movhi	r2,3
   14b5c:	10baf204 	addi	r2,r2,-5176
   14b60:	300f883a 	mov	r7,r6
   14b64:	280d883a 	mov	r6,r5
   14b68:	200b883a 	mov	r5,r4
   14b6c:	11000017 	ldw	r4,0(r2)
   14b70:	001287c1 	jmpi	1287c <___vfprintf_internal_r>

00014b74 <__sbprintf>:
   14b74:	2880030b 	ldhu	r2,12(r5)
   14b78:	2ac01917 	ldw	r11,100(r5)
   14b7c:	2a80038b 	ldhu	r10,14(r5)
   14b80:	2a400717 	ldw	r9,28(r5)
   14b84:	2a000917 	ldw	r8,36(r5)
   14b88:	defee204 	addi	sp,sp,-1144
   14b8c:	00c10004 	movi	r3,1024
   14b90:	dc011a15 	stw	r16,1128(sp)
   14b94:	10bfff4c 	andi	r2,r2,65533
   14b98:	2821883a 	mov	r16,r5
   14b9c:	d8cb883a 	add	r5,sp,r3
   14ba0:	dc811c15 	stw	r18,1136(sp)
   14ba4:	dc411b15 	stw	r17,1132(sp)
   14ba8:	dfc11d15 	stw	ra,1140(sp)
   14bac:	2025883a 	mov	r18,r4
   14bb0:	d881030d 	sth	r2,1036(sp)
   14bb4:	dac11915 	stw	r11,1124(sp)
   14bb8:	da81038d 	sth	r10,1038(sp)
   14bbc:	da410715 	stw	r9,1052(sp)
   14bc0:	da010915 	stw	r8,1060(sp)
   14bc4:	dec10015 	stw	sp,1024(sp)
   14bc8:	dec10415 	stw	sp,1040(sp)
   14bcc:	d8c10215 	stw	r3,1032(sp)
   14bd0:	d8c10515 	stw	r3,1044(sp)
   14bd4:	d8010615 	stw	zero,1048(sp)
   14bd8:	001287c0 	call	1287c <___vfprintf_internal_r>
   14bdc:	1023883a 	mov	r17,r2
   14be0:	10000416 	blt	r2,zero,14bf4 <__sbprintf+0x80>
   14be4:	d9410004 	addi	r5,sp,1024
   14be8:	9009883a 	mov	r4,r18
   14bec:	00168500 	call	16850 <_fflush_r>
   14bf0:	10000d1e 	bne	r2,zero,14c28 <__sbprintf+0xb4>
   14bf4:	d881030b 	ldhu	r2,1036(sp)
   14bf8:	1080100c 	andi	r2,r2,64
   14bfc:	10000326 	beq	r2,zero,14c0c <__sbprintf+0x98>
   14c00:	8080030b 	ldhu	r2,12(r16)
   14c04:	10801014 	ori	r2,r2,64
   14c08:	8080030d 	sth	r2,12(r16)
   14c0c:	8805883a 	mov	r2,r17
   14c10:	dfc11d17 	ldw	ra,1140(sp)
   14c14:	dc811c17 	ldw	r18,1136(sp)
   14c18:	dc411b17 	ldw	r17,1132(sp)
   14c1c:	dc011a17 	ldw	r16,1128(sp)
   14c20:	dec11e04 	addi	sp,sp,1144
   14c24:	f800283a 	ret
   14c28:	047fffc4 	movi	r17,-1
   14c2c:	003ff106 	br	14bf4 <__alt_data_end+0xfc014bf4>

00014c30 <__swsetup_r>:
   14c30:	008000f4 	movhi	r2,3
   14c34:	defffd04 	addi	sp,sp,-12
   14c38:	10baf204 	addi	r2,r2,-5176
   14c3c:	dc400115 	stw	r17,4(sp)
   14c40:	2023883a 	mov	r17,r4
   14c44:	11000017 	ldw	r4,0(r2)
   14c48:	dc000015 	stw	r16,0(sp)
   14c4c:	dfc00215 	stw	ra,8(sp)
   14c50:	2821883a 	mov	r16,r5
   14c54:	20000226 	beq	r4,zero,14c60 <__swsetup_r+0x30>
   14c58:	20800e17 	ldw	r2,56(r4)
   14c5c:	10003126 	beq	r2,zero,14d24 <__swsetup_r+0xf4>
   14c60:	8080030b 	ldhu	r2,12(r16)
   14c64:	10c0020c 	andi	r3,r2,8
   14c68:	1009883a 	mov	r4,r2
   14c6c:	18000f26 	beq	r3,zero,14cac <__swsetup_r+0x7c>
   14c70:	80c00417 	ldw	r3,16(r16)
   14c74:	18001526 	beq	r3,zero,14ccc <__swsetup_r+0x9c>
   14c78:	1100004c 	andi	r4,r2,1
   14c7c:	20001c1e 	bne	r4,zero,14cf0 <__swsetup_r+0xc0>
   14c80:	1080008c 	andi	r2,r2,2
   14c84:	1000291e 	bne	r2,zero,14d2c <__swsetup_r+0xfc>
   14c88:	80800517 	ldw	r2,20(r16)
   14c8c:	80800215 	stw	r2,8(r16)
   14c90:	18001c26 	beq	r3,zero,14d04 <__swsetup_r+0xd4>
   14c94:	0005883a 	mov	r2,zero
   14c98:	dfc00217 	ldw	ra,8(sp)
   14c9c:	dc400117 	ldw	r17,4(sp)
   14ca0:	dc000017 	ldw	r16,0(sp)
   14ca4:	dec00304 	addi	sp,sp,12
   14ca8:	f800283a 	ret
   14cac:	2080040c 	andi	r2,r4,16
   14cb0:	10002e26 	beq	r2,zero,14d6c <__swsetup_r+0x13c>
   14cb4:	2080010c 	andi	r2,r4,4
   14cb8:	10001e1e 	bne	r2,zero,14d34 <__swsetup_r+0x104>
   14cbc:	80c00417 	ldw	r3,16(r16)
   14cc0:	20800214 	ori	r2,r4,8
   14cc4:	8080030d 	sth	r2,12(r16)
   14cc8:	183feb1e 	bne	r3,zero,14c78 <__alt_data_end+0xfc014c78>
   14ccc:	1100a00c 	andi	r4,r2,640
   14cd0:	01408004 	movi	r5,512
   14cd4:	217fe826 	beq	r4,r5,14c78 <__alt_data_end+0xfc014c78>
   14cd8:	800b883a 	mov	r5,r16
   14cdc:	8809883a 	mov	r4,r17
   14ce0:	00177ec0 	call	177ec <__smakebuf_r>
   14ce4:	8080030b 	ldhu	r2,12(r16)
   14ce8:	80c00417 	ldw	r3,16(r16)
   14cec:	003fe206 	br	14c78 <__alt_data_end+0xfc014c78>
   14cf0:	80800517 	ldw	r2,20(r16)
   14cf4:	80000215 	stw	zero,8(r16)
   14cf8:	0085c83a 	sub	r2,zero,r2
   14cfc:	80800615 	stw	r2,24(r16)
   14d00:	183fe41e 	bne	r3,zero,14c94 <__alt_data_end+0xfc014c94>
   14d04:	80c0030b 	ldhu	r3,12(r16)
   14d08:	0005883a 	mov	r2,zero
   14d0c:	1900200c 	andi	r4,r3,128
   14d10:	203fe126 	beq	r4,zero,14c98 <__alt_data_end+0xfc014c98>
   14d14:	18c01014 	ori	r3,r3,64
   14d18:	80c0030d 	sth	r3,12(r16)
   14d1c:	00bfffc4 	movi	r2,-1
   14d20:	003fdd06 	br	14c98 <__alt_data_end+0xfc014c98>
   14d24:	0016c3c0 	call	16c3c <__sinit>
   14d28:	003fcd06 	br	14c60 <__alt_data_end+0xfc014c60>
   14d2c:	0005883a 	mov	r2,zero
   14d30:	003fd606 	br	14c8c <__alt_data_end+0xfc014c8c>
   14d34:	81400c17 	ldw	r5,48(r16)
   14d38:	28000626 	beq	r5,zero,14d54 <__swsetup_r+0x124>
   14d3c:	80801004 	addi	r2,r16,64
   14d40:	28800326 	beq	r5,r2,14d50 <__swsetup_r+0x120>
   14d44:	8809883a 	mov	r4,r17
   14d48:	0016db00 	call	16db0 <_free_r>
   14d4c:	8100030b 	ldhu	r4,12(r16)
   14d50:	80000c15 	stw	zero,48(r16)
   14d54:	80c00417 	ldw	r3,16(r16)
   14d58:	00bff6c4 	movi	r2,-37
   14d5c:	1108703a 	and	r4,r2,r4
   14d60:	80000115 	stw	zero,4(r16)
   14d64:	80c00015 	stw	r3,0(r16)
   14d68:	003fd506 	br	14cc0 <__alt_data_end+0xfc014cc0>
   14d6c:	00800244 	movi	r2,9
   14d70:	88800015 	stw	r2,0(r17)
   14d74:	20801014 	ori	r2,r4,64
   14d78:	8080030d 	sth	r2,12(r16)
   14d7c:	00bfffc4 	movi	r2,-1
   14d80:	003fc506 	br	14c98 <__alt_data_end+0xfc014c98>

00014d84 <quorem>:
   14d84:	defff204 	addi	sp,sp,-56
   14d88:	ddc00b15 	stw	r23,44(sp)
   14d8c:	20800417 	ldw	r2,16(r4)
   14d90:	2dc00417 	ldw	r23,16(r5)
   14d94:	dfc00d15 	stw	ra,52(sp)
   14d98:	df000c15 	stw	fp,48(sp)
   14d9c:	dd800a15 	stw	r22,40(sp)
   14da0:	dd400915 	stw	r21,36(sp)
   14da4:	dd000815 	stw	r20,32(sp)
   14da8:	dcc00715 	stw	r19,28(sp)
   14dac:	dc800615 	stw	r18,24(sp)
   14db0:	dc400515 	stw	r17,20(sp)
   14db4:	dc000415 	stw	r16,16(sp)
   14db8:	15c07a16 	blt	r2,r23,14fa4 <quorem+0x220>
   14dbc:	bdffffc4 	addi	r23,r23,-1
   14dc0:	bde9883a 	add	r20,r23,r23
   14dc4:	28c00504 	addi	r3,r5,20
   14dc8:	a529883a 	add	r20,r20,r20
   14dcc:	1d39883a 	add	fp,r3,r20
   14dd0:	24c00504 	addi	r19,r4,20
   14dd4:	d9400215 	stw	r5,8(sp)
   14dd8:	9d29883a 	add	r20,r19,r20
   14ddc:	e1400017 	ldw	r5,0(fp)
   14de0:	d9000015 	stw	r4,0(sp)
   14de4:	a1000017 	ldw	r4,0(r20)
   14de8:	29400044 	addi	r5,r5,1
   14dec:	d8c00115 	stw	r3,4(sp)
   14df0:	dd000315 	stw	r20,12(sp)
   14df4:	000d7fc0 	call	d7fc <__udivsi3>
   14df8:	1025883a 	mov	r18,r2
   14dfc:	10003026 	beq	r2,zero,14ec0 <quorem+0x13c>
   14e00:	dc400117 	ldw	r17,4(sp)
   14e04:	9829883a 	mov	r20,r19
   14e08:	002d883a 	mov	r22,zero
   14e0c:	0021883a 	mov	r16,zero
   14e10:	8d400017 	ldw	r21,0(r17)
   14e14:	900b883a 	mov	r5,r18
   14e18:	8c400104 	addi	r17,r17,4
   14e1c:	a93fffcc 	andi	r4,r21,65535
   14e20:	000d8b80 	call	d8b8 <__mulsi3>
   14e24:	a808d43a 	srli	r4,r21,16
   14e28:	900b883a 	mov	r5,r18
   14e2c:	15ad883a 	add	r22,r2,r22
   14e30:	000d8b80 	call	d8b8 <__mulsi3>
   14e34:	a1000017 	ldw	r4,0(r20)
   14e38:	b00cd43a 	srli	r6,r22,16
   14e3c:	b0ffffcc 	andi	r3,r22,65535
   14e40:	217fffcc 	andi	r5,r4,65535
   14e44:	2c21883a 	add	r16,r5,r16
   14e48:	80c7c83a 	sub	r3,r16,r3
   14e4c:	2008d43a 	srli	r4,r4,16
   14e50:	1185883a 	add	r2,r2,r6
   14e54:	1821d43a 	srai	r16,r3,16
   14e58:	117fffcc 	andi	r5,r2,65535
   14e5c:	2149c83a 	sub	r4,r4,r5
   14e60:	2421883a 	add	r16,r4,r16
   14e64:	8008943a 	slli	r4,r16,16
   14e68:	18ffffcc 	andi	r3,r3,65535
   14e6c:	102cd43a 	srli	r22,r2,16
   14e70:	20c8b03a 	or	r4,r4,r3
   14e74:	a1000015 	stw	r4,0(r20)
   14e78:	8021d43a 	srai	r16,r16,16
   14e7c:	a5000104 	addi	r20,r20,4
   14e80:	e47fe32e 	bgeu	fp,r17,14e10 <__alt_data_end+0xfc014e10>
   14e84:	d8c00317 	ldw	r3,12(sp)
   14e88:	18800017 	ldw	r2,0(r3)
   14e8c:	10000c1e 	bne	r2,zero,14ec0 <quorem+0x13c>
   14e90:	18bfff04 	addi	r2,r3,-4
   14e94:	9880082e 	bgeu	r19,r2,14eb8 <quorem+0x134>
   14e98:	18ffff17 	ldw	r3,-4(r3)
   14e9c:	18000326 	beq	r3,zero,14eac <quorem+0x128>
   14ea0:	00000506 	br	14eb8 <quorem+0x134>
   14ea4:	10c00017 	ldw	r3,0(r2)
   14ea8:	1800031e 	bne	r3,zero,14eb8 <quorem+0x134>
   14eac:	10bfff04 	addi	r2,r2,-4
   14eb0:	bdffffc4 	addi	r23,r23,-1
   14eb4:	98bffb36 	bltu	r19,r2,14ea4 <__alt_data_end+0xfc014ea4>
   14eb8:	d8c00017 	ldw	r3,0(sp)
   14ebc:	1dc00415 	stw	r23,16(r3)
   14ec0:	d9400217 	ldw	r5,8(sp)
   14ec4:	d9000017 	ldw	r4,0(sp)
   14ec8:	001856c0 	call	1856c <__mcmp>
   14ecc:	10002816 	blt	r2,zero,14f70 <quorem+0x1ec>
   14ed0:	dc400117 	ldw	r17,4(sp)
   14ed4:	94800044 	addi	r18,r18,1
   14ed8:	980d883a 	mov	r6,r19
   14edc:	0007883a 	mov	r3,zero
   14ee0:	31000017 	ldw	r4,0(r6)
   14ee4:	89400017 	ldw	r5,0(r17)
   14ee8:	31800104 	addi	r6,r6,4
   14eec:	20bfffcc 	andi	r2,r4,65535
   14ef0:	10c7883a 	add	r3,r2,r3
   14ef4:	28bfffcc 	andi	r2,r5,65535
   14ef8:	1885c83a 	sub	r2,r3,r2
   14efc:	280ad43a 	srli	r5,r5,16
   14f00:	2008d43a 	srli	r4,r4,16
   14f04:	1007d43a 	srai	r3,r2,16
   14f08:	10bfffcc 	andi	r2,r2,65535
   14f0c:	2149c83a 	sub	r4,r4,r5
   14f10:	20c9883a 	add	r4,r4,r3
   14f14:	200a943a 	slli	r5,r4,16
   14f18:	8c400104 	addi	r17,r17,4
   14f1c:	2007d43a 	srai	r3,r4,16
   14f20:	2884b03a 	or	r2,r5,r2
   14f24:	30bfff15 	stw	r2,-4(r6)
   14f28:	e47fed2e 	bgeu	fp,r17,14ee0 <__alt_data_end+0xfc014ee0>
   14f2c:	bdc5883a 	add	r2,r23,r23
   14f30:	1085883a 	add	r2,r2,r2
   14f34:	9887883a 	add	r3,r19,r2
   14f38:	18800017 	ldw	r2,0(r3)
   14f3c:	10000c1e 	bne	r2,zero,14f70 <quorem+0x1ec>
   14f40:	18bfff04 	addi	r2,r3,-4
   14f44:	9880082e 	bgeu	r19,r2,14f68 <quorem+0x1e4>
   14f48:	18ffff17 	ldw	r3,-4(r3)
   14f4c:	18000326 	beq	r3,zero,14f5c <quorem+0x1d8>
   14f50:	00000506 	br	14f68 <quorem+0x1e4>
   14f54:	10c00017 	ldw	r3,0(r2)
   14f58:	1800031e 	bne	r3,zero,14f68 <quorem+0x1e4>
   14f5c:	10bfff04 	addi	r2,r2,-4
   14f60:	bdffffc4 	addi	r23,r23,-1
   14f64:	98bffb36 	bltu	r19,r2,14f54 <__alt_data_end+0xfc014f54>
   14f68:	d8c00017 	ldw	r3,0(sp)
   14f6c:	1dc00415 	stw	r23,16(r3)
   14f70:	9005883a 	mov	r2,r18
   14f74:	dfc00d17 	ldw	ra,52(sp)
   14f78:	df000c17 	ldw	fp,48(sp)
   14f7c:	ddc00b17 	ldw	r23,44(sp)
   14f80:	dd800a17 	ldw	r22,40(sp)
   14f84:	dd400917 	ldw	r21,36(sp)
   14f88:	dd000817 	ldw	r20,32(sp)
   14f8c:	dcc00717 	ldw	r19,28(sp)
   14f90:	dc800617 	ldw	r18,24(sp)
   14f94:	dc400517 	ldw	r17,20(sp)
   14f98:	dc000417 	ldw	r16,16(sp)
   14f9c:	dec00e04 	addi	sp,sp,56
   14fa0:	f800283a 	ret
   14fa4:	0005883a 	mov	r2,zero
   14fa8:	003ff206 	br	14f74 <__alt_data_end+0xfc014f74>

00014fac <_dtoa_r>:
   14fac:	20801017 	ldw	r2,64(r4)
   14fb0:	deffde04 	addi	sp,sp,-136
   14fb4:	df002015 	stw	fp,128(sp)
   14fb8:	dcc01b15 	stw	r19,108(sp)
   14fbc:	dc801a15 	stw	r18,104(sp)
   14fc0:	dc401915 	stw	r17,100(sp)
   14fc4:	dc001815 	stw	r16,96(sp)
   14fc8:	dfc02115 	stw	ra,132(sp)
   14fcc:	ddc01f15 	stw	r23,124(sp)
   14fd0:	dd801e15 	stw	r22,120(sp)
   14fd4:	dd401d15 	stw	r21,116(sp)
   14fd8:	dd001c15 	stw	r20,112(sp)
   14fdc:	d9c00315 	stw	r7,12(sp)
   14fe0:	2039883a 	mov	fp,r4
   14fe4:	3023883a 	mov	r17,r6
   14fe8:	2825883a 	mov	r18,r5
   14fec:	dc002417 	ldw	r16,144(sp)
   14ff0:	3027883a 	mov	r19,r6
   14ff4:	10000826 	beq	r2,zero,15018 <_dtoa_r+0x6c>
   14ff8:	21801117 	ldw	r6,68(r4)
   14ffc:	00c00044 	movi	r3,1
   15000:	100b883a 	mov	r5,r2
   15004:	1986983a 	sll	r3,r3,r6
   15008:	11800115 	stw	r6,4(r2)
   1500c:	10c00215 	stw	r3,8(r2)
   15010:	0017c900 	call	17c90 <_Bfree>
   15014:	e0001015 	stw	zero,64(fp)
   15018:	88002e16 	blt	r17,zero,150d4 <_dtoa_r+0x128>
   1501c:	80000015 	stw	zero,0(r16)
   15020:	889ffc2c 	andhi	r2,r17,32752
   15024:	00dffc34 	movhi	r3,32752
   15028:	10c01c26 	beq	r2,r3,1509c <_dtoa_r+0xf0>
   1502c:	000d883a 	mov	r6,zero
   15030:	000f883a 	mov	r7,zero
   15034:	9009883a 	mov	r4,r18
   15038:	980b883a 	mov	r5,r19
   1503c:	001e90c0 	call	1e90c <__eqdf2>
   15040:	10002b1e 	bne	r2,zero,150f0 <_dtoa_r+0x144>
   15044:	d9c02317 	ldw	r7,140(sp)
   15048:	00800044 	movi	r2,1
   1504c:	38800015 	stw	r2,0(r7)
   15050:	d8802517 	ldw	r2,148(sp)
   15054:	10019e26 	beq	r2,zero,156d0 <_dtoa_r+0x724>
   15058:	d8c02517 	ldw	r3,148(sp)
   1505c:	008000f4 	movhi	r2,3
   15060:	10adfd44 	addi	r2,r2,-18443
   15064:	18800015 	stw	r2,0(r3)
   15068:	10bfffc4 	addi	r2,r2,-1
   1506c:	dfc02117 	ldw	ra,132(sp)
   15070:	df002017 	ldw	fp,128(sp)
   15074:	ddc01f17 	ldw	r23,124(sp)
   15078:	dd801e17 	ldw	r22,120(sp)
   1507c:	dd401d17 	ldw	r21,116(sp)
   15080:	dd001c17 	ldw	r20,112(sp)
   15084:	dcc01b17 	ldw	r19,108(sp)
   15088:	dc801a17 	ldw	r18,104(sp)
   1508c:	dc401917 	ldw	r17,100(sp)
   15090:	dc001817 	ldw	r16,96(sp)
   15094:	dec02204 	addi	sp,sp,136
   15098:	f800283a 	ret
   1509c:	d8c02317 	ldw	r3,140(sp)
   150a0:	0089c3c4 	movi	r2,9999
   150a4:	18800015 	stw	r2,0(r3)
   150a8:	90017726 	beq	r18,zero,15688 <_dtoa_r+0x6dc>
   150ac:	008000f4 	movhi	r2,3
   150b0:	10ae1104 	addi	r2,r2,-18364
   150b4:	d9002517 	ldw	r4,148(sp)
   150b8:	203fec26 	beq	r4,zero,1506c <__alt_data_end+0xfc01506c>
   150bc:	10c000c7 	ldb	r3,3(r2)
   150c0:	1801781e 	bne	r3,zero,156a4 <_dtoa_r+0x6f8>
   150c4:	10c000c4 	addi	r3,r2,3
   150c8:	d9802517 	ldw	r6,148(sp)
   150cc:	30c00015 	stw	r3,0(r6)
   150d0:	003fe606 	br	1506c <__alt_data_end+0xfc01506c>
   150d4:	04e00034 	movhi	r19,32768
   150d8:	9cffffc4 	addi	r19,r19,-1
   150dc:	00800044 	movi	r2,1
   150e0:	8ce6703a 	and	r19,r17,r19
   150e4:	80800015 	stw	r2,0(r16)
   150e8:	9823883a 	mov	r17,r19
   150ec:	003fcc06 	br	15020 <__alt_data_end+0xfc015020>
   150f0:	d8800204 	addi	r2,sp,8
   150f4:	d8800015 	stw	r2,0(sp)
   150f8:	d9c00104 	addi	r7,sp,4
   150fc:	900b883a 	mov	r5,r18
   15100:	980d883a 	mov	r6,r19
   15104:	e009883a 	mov	r4,fp
   15108:	8820d53a 	srli	r16,r17,20
   1510c:	00189380 	call	18938 <__d2b>
   15110:	d8800915 	stw	r2,36(sp)
   15114:	8001651e 	bne	r16,zero,156ac <_dtoa_r+0x700>
   15118:	dd800217 	ldw	r22,8(sp)
   1511c:	dc000117 	ldw	r16,4(sp)
   15120:	00800804 	movi	r2,32
   15124:	b421883a 	add	r16,r22,r16
   15128:	80c10c84 	addi	r3,r16,1074
   1512c:	10c2d10e 	bge	r2,r3,15c74 <_dtoa_r+0xcc8>
   15130:	00801004 	movi	r2,64
   15134:	81010484 	addi	r4,r16,1042
   15138:	10c7c83a 	sub	r3,r2,r3
   1513c:	9108d83a 	srl	r4,r18,r4
   15140:	88e2983a 	sll	r17,r17,r3
   15144:	2448b03a 	or	r4,r4,r17
   15148:	001fe280 	call	1fe28 <__floatunsidf>
   1514c:	017f8434 	movhi	r5,65040
   15150:	01800044 	movi	r6,1
   15154:	1009883a 	mov	r4,r2
   15158:	194b883a 	add	r5,r3,r5
   1515c:	843fffc4 	addi	r16,r16,-1
   15160:	d9801115 	stw	r6,68(sp)
   15164:	000d883a 	mov	r6,zero
   15168:	01cffe34 	movhi	r7,16376
   1516c:	001f3d00 	call	1f3d0 <__subdf3>
   15170:	0198dbf4 	movhi	r6,25455
   15174:	01cff4f4 	movhi	r7,16339
   15178:	3190d844 	addi	r6,r6,17249
   1517c:	39e1e9c4 	addi	r7,r7,-30809
   15180:	1009883a 	mov	r4,r2
   15184:	180b883a 	mov	r5,r3
   15188:	001eb640 	call	1eb64 <__muldf3>
   1518c:	01a2d874 	movhi	r6,35681
   15190:	01cff1f4 	movhi	r7,16327
   15194:	31b22cc4 	addi	r6,r6,-14157
   15198:	39e28a04 	addi	r7,r7,-30168
   1519c:	180b883a 	mov	r5,r3
   151a0:	1009883a 	mov	r4,r2
   151a4:	001d6900 	call	1d690 <__adddf3>
   151a8:	8009883a 	mov	r4,r16
   151ac:	1029883a 	mov	r20,r2
   151b0:	1823883a 	mov	r17,r3
   151b4:	001fd4c0 	call	1fd4c <__floatsidf>
   151b8:	019427f4 	movhi	r6,20639
   151bc:	01cff4f4 	movhi	r7,16339
   151c0:	319e7ec4 	addi	r6,r6,31227
   151c4:	39d104c4 	addi	r7,r7,17427
   151c8:	1009883a 	mov	r4,r2
   151cc:	180b883a 	mov	r5,r3
   151d0:	001eb640 	call	1eb64 <__muldf3>
   151d4:	100d883a 	mov	r6,r2
   151d8:	180f883a 	mov	r7,r3
   151dc:	a009883a 	mov	r4,r20
   151e0:	880b883a 	mov	r5,r17
   151e4:	001d6900 	call	1d690 <__adddf3>
   151e8:	1009883a 	mov	r4,r2
   151ec:	180b883a 	mov	r5,r3
   151f0:	1029883a 	mov	r20,r2
   151f4:	1823883a 	mov	r17,r3
   151f8:	001fccc0 	call	1fccc <__fixdfsi>
   151fc:	000d883a 	mov	r6,zero
   15200:	000f883a 	mov	r7,zero
   15204:	a009883a 	mov	r4,r20
   15208:	880b883a 	mov	r5,r17
   1520c:	d8800515 	stw	r2,20(sp)
   15210:	001ea700 	call	1ea70 <__ledf2>
   15214:	10028716 	blt	r2,zero,15c34 <_dtoa_r+0xc88>
   15218:	d8c00517 	ldw	r3,20(sp)
   1521c:	00800584 	movi	r2,22
   15220:	10c27536 	bltu	r2,r3,15bf8 <_dtoa_r+0xc4c>
   15224:	180490fa 	slli	r2,r3,3
   15228:	00c000f4 	movhi	r3,3
   1522c:	18ee2c04 	addi	r3,r3,-18256
   15230:	1885883a 	add	r2,r3,r2
   15234:	11000017 	ldw	r4,0(r2)
   15238:	11400117 	ldw	r5,4(r2)
   1523c:	900d883a 	mov	r6,r18
   15240:	980f883a 	mov	r7,r19
   15244:	001e9940 	call	1e994 <__gedf2>
   15248:	00828d0e 	bge	zero,r2,15c80 <_dtoa_r+0xcd4>
   1524c:	d9000517 	ldw	r4,20(sp)
   15250:	d8000e15 	stw	zero,56(sp)
   15254:	213fffc4 	addi	r4,r4,-1
   15258:	d9000515 	stw	r4,20(sp)
   1525c:	b42dc83a 	sub	r22,r22,r16
   15260:	b5bfffc4 	addi	r22,r22,-1
   15264:	b0026f16 	blt	r22,zero,15c24 <_dtoa_r+0xc78>
   15268:	d8000815 	stw	zero,32(sp)
   1526c:	d9c00517 	ldw	r7,20(sp)
   15270:	38026416 	blt	r7,zero,15c04 <_dtoa_r+0xc58>
   15274:	b1ed883a 	add	r22,r22,r7
   15278:	d9c00d15 	stw	r7,52(sp)
   1527c:	d8000a15 	stw	zero,40(sp)
   15280:	d9800317 	ldw	r6,12(sp)
   15284:	00800244 	movi	r2,9
   15288:	11811436 	bltu	r2,r6,156dc <_dtoa_r+0x730>
   1528c:	00800144 	movi	r2,5
   15290:	1184e10e 	bge	r2,r6,16618 <_dtoa_r+0x166c>
   15294:	31bfff04 	addi	r6,r6,-4
   15298:	d9800315 	stw	r6,12(sp)
   1529c:	0023883a 	mov	r17,zero
   152a0:	d9800317 	ldw	r6,12(sp)
   152a4:	008000c4 	movi	r2,3
   152a8:	30836726 	beq	r6,r2,16048 <_dtoa_r+0x109c>
   152ac:	1183410e 	bge	r2,r6,15fb4 <_dtoa_r+0x1008>
   152b0:	d9c00317 	ldw	r7,12(sp)
   152b4:	00800104 	movi	r2,4
   152b8:	38827c26 	beq	r7,r2,15cac <_dtoa_r+0xd00>
   152bc:	00800144 	movi	r2,5
   152c0:	3884c41e 	bne	r7,r2,165d4 <_dtoa_r+0x1628>
   152c4:	00800044 	movi	r2,1
   152c8:	d8800b15 	stw	r2,44(sp)
   152cc:	d8c00517 	ldw	r3,20(sp)
   152d0:	d9002217 	ldw	r4,136(sp)
   152d4:	1907883a 	add	r3,r3,r4
   152d8:	19800044 	addi	r6,r3,1
   152dc:	d8c00c15 	stw	r3,48(sp)
   152e0:	d9800615 	stw	r6,24(sp)
   152e4:	0183a40e 	bge	zero,r6,16178 <_dtoa_r+0x11cc>
   152e8:	d9800617 	ldw	r6,24(sp)
   152ec:	3021883a 	mov	r16,r6
   152f0:	e0001115 	stw	zero,68(fp)
   152f4:	008005c4 	movi	r2,23
   152f8:	1184c92e 	bgeu	r2,r6,16620 <_dtoa_r+0x1674>
   152fc:	00c00044 	movi	r3,1
   15300:	00800104 	movi	r2,4
   15304:	1085883a 	add	r2,r2,r2
   15308:	11000504 	addi	r4,r2,20
   1530c:	180b883a 	mov	r5,r3
   15310:	18c00044 	addi	r3,r3,1
   15314:	313ffb2e 	bgeu	r6,r4,15304 <__alt_data_end+0xfc015304>
   15318:	e1401115 	stw	r5,68(fp)
   1531c:	e009883a 	mov	r4,fp
   15320:	0017be80 	call	17be8 <_Balloc>
   15324:	d8800715 	stw	r2,28(sp)
   15328:	e0801015 	stw	r2,64(fp)
   1532c:	00800384 	movi	r2,14
   15330:	1400f736 	bltu	r2,r16,15710 <_dtoa_r+0x764>
   15334:	8800f626 	beq	r17,zero,15710 <_dtoa_r+0x764>
   15338:	d9c00517 	ldw	r7,20(sp)
   1533c:	01c39a0e 	bge	zero,r7,161a8 <_dtoa_r+0x11fc>
   15340:	388003cc 	andi	r2,r7,15
   15344:	100490fa 	slli	r2,r2,3
   15348:	382bd13a 	srai	r21,r7,4
   1534c:	00c000f4 	movhi	r3,3
   15350:	18ee2c04 	addi	r3,r3,-18256
   15354:	1885883a 	add	r2,r3,r2
   15358:	a8c0040c 	andi	r3,r21,16
   1535c:	12400017 	ldw	r9,0(r2)
   15360:	12000117 	ldw	r8,4(r2)
   15364:	18037926 	beq	r3,zero,1614c <_dtoa_r+0x11a0>
   15368:	008000f4 	movhi	r2,3
   1536c:	10ae2204 	addi	r2,r2,-18296
   15370:	11800817 	ldw	r6,32(r2)
   15374:	11c00917 	ldw	r7,36(r2)
   15378:	9009883a 	mov	r4,r18
   1537c:	980b883a 	mov	r5,r19
   15380:	da001715 	stw	r8,92(sp)
   15384:	da401615 	stw	r9,88(sp)
   15388:	001df3c0 	call	1df3c <__divdf3>
   1538c:	da001717 	ldw	r8,92(sp)
   15390:	da401617 	ldw	r9,88(sp)
   15394:	ad4003cc 	andi	r21,r21,15
   15398:	040000c4 	movi	r16,3
   1539c:	1023883a 	mov	r17,r2
   153a0:	1829883a 	mov	r20,r3
   153a4:	a8001126 	beq	r21,zero,153ec <_dtoa_r+0x440>
   153a8:	05c000f4 	movhi	r23,3
   153ac:	bdee2204 	addi	r23,r23,-18296
   153b0:	4805883a 	mov	r2,r9
   153b4:	4007883a 	mov	r3,r8
   153b8:	a980004c 	andi	r6,r21,1
   153bc:	1009883a 	mov	r4,r2
   153c0:	a82bd07a 	srai	r21,r21,1
   153c4:	180b883a 	mov	r5,r3
   153c8:	30000426 	beq	r6,zero,153dc <_dtoa_r+0x430>
   153cc:	b9800017 	ldw	r6,0(r23)
   153d0:	b9c00117 	ldw	r7,4(r23)
   153d4:	84000044 	addi	r16,r16,1
   153d8:	001eb640 	call	1eb64 <__muldf3>
   153dc:	bdc00204 	addi	r23,r23,8
   153e0:	a83ff51e 	bne	r21,zero,153b8 <__alt_data_end+0xfc0153b8>
   153e4:	1013883a 	mov	r9,r2
   153e8:	1811883a 	mov	r8,r3
   153ec:	480d883a 	mov	r6,r9
   153f0:	400f883a 	mov	r7,r8
   153f4:	8809883a 	mov	r4,r17
   153f8:	a00b883a 	mov	r5,r20
   153fc:	001df3c0 	call	1df3c <__divdf3>
   15400:	d8800f15 	stw	r2,60(sp)
   15404:	d8c01015 	stw	r3,64(sp)
   15408:	d8c00e17 	ldw	r3,56(sp)
   1540c:	18000626 	beq	r3,zero,15428 <_dtoa_r+0x47c>
   15410:	d9000f17 	ldw	r4,60(sp)
   15414:	d9401017 	ldw	r5,64(sp)
   15418:	000d883a 	mov	r6,zero
   1541c:	01cffc34 	movhi	r7,16368
   15420:	001ea700 	call	1ea70 <__ledf2>
   15424:	10040b16 	blt	r2,zero,16454 <_dtoa_r+0x14a8>
   15428:	8009883a 	mov	r4,r16
   1542c:	001fd4c0 	call	1fd4c <__floatsidf>
   15430:	d9800f17 	ldw	r6,60(sp)
   15434:	d9c01017 	ldw	r7,64(sp)
   15438:	1009883a 	mov	r4,r2
   1543c:	180b883a 	mov	r5,r3
   15440:	001eb640 	call	1eb64 <__muldf3>
   15444:	000d883a 	mov	r6,zero
   15448:	01d00734 	movhi	r7,16412
   1544c:	1009883a 	mov	r4,r2
   15450:	180b883a 	mov	r5,r3
   15454:	001d6900 	call	1d690 <__adddf3>
   15458:	1021883a 	mov	r16,r2
   1545c:	d8800617 	ldw	r2,24(sp)
   15460:	047f3034 	movhi	r17,64704
   15464:	1c63883a 	add	r17,r3,r17
   15468:	10031826 	beq	r2,zero,160cc <_dtoa_r+0x1120>
   1546c:	d8c00517 	ldw	r3,20(sp)
   15470:	db000617 	ldw	r12,24(sp)
   15474:	d8c01315 	stw	r3,76(sp)
   15478:	d9000b17 	ldw	r4,44(sp)
   1547c:	20038f26 	beq	r4,zero,162bc <_dtoa_r+0x1310>
   15480:	60bfffc4 	addi	r2,r12,-1
   15484:	100490fa 	slli	r2,r2,3
   15488:	00c000f4 	movhi	r3,3
   1548c:	18ee2c04 	addi	r3,r3,-18256
   15490:	1885883a 	add	r2,r3,r2
   15494:	11800017 	ldw	r6,0(r2)
   15498:	11c00117 	ldw	r7,4(r2)
   1549c:	d8800717 	ldw	r2,28(sp)
   154a0:	0009883a 	mov	r4,zero
   154a4:	014ff834 	movhi	r5,16352
   154a8:	db001615 	stw	r12,88(sp)
   154ac:	15c00044 	addi	r23,r2,1
   154b0:	001df3c0 	call	1df3c <__divdf3>
   154b4:	800d883a 	mov	r6,r16
   154b8:	880f883a 	mov	r7,r17
   154bc:	1009883a 	mov	r4,r2
   154c0:	180b883a 	mov	r5,r3
   154c4:	001f3d00 	call	1f3d0 <__subdf3>
   154c8:	d9401017 	ldw	r5,64(sp)
   154cc:	d9000f17 	ldw	r4,60(sp)
   154d0:	102b883a 	mov	r21,r2
   154d4:	d8c01215 	stw	r3,72(sp)
   154d8:	001fccc0 	call	1fccc <__fixdfsi>
   154dc:	1009883a 	mov	r4,r2
   154e0:	1029883a 	mov	r20,r2
   154e4:	001fd4c0 	call	1fd4c <__floatsidf>
   154e8:	d9000f17 	ldw	r4,60(sp)
   154ec:	d9401017 	ldw	r5,64(sp)
   154f0:	100d883a 	mov	r6,r2
   154f4:	180f883a 	mov	r7,r3
   154f8:	001f3d00 	call	1f3d0 <__subdf3>
   154fc:	1823883a 	mov	r17,r3
   15500:	d8c00717 	ldw	r3,28(sp)
   15504:	d9401217 	ldw	r5,72(sp)
   15508:	a2000c04 	addi	r8,r20,48
   1550c:	1021883a 	mov	r16,r2
   15510:	1a000005 	stb	r8,0(r3)
   15514:	800d883a 	mov	r6,r16
   15518:	880f883a 	mov	r7,r17
   1551c:	a809883a 	mov	r4,r21
   15520:	4029883a 	mov	r20,r8
   15524:	001e9940 	call	1e994 <__gedf2>
   15528:	00841d16 	blt	zero,r2,165a0 <_dtoa_r+0x15f4>
   1552c:	800d883a 	mov	r6,r16
   15530:	880f883a 	mov	r7,r17
   15534:	0009883a 	mov	r4,zero
   15538:	014ffc34 	movhi	r5,16368
   1553c:	001f3d00 	call	1f3d0 <__subdf3>
   15540:	d9401217 	ldw	r5,72(sp)
   15544:	100d883a 	mov	r6,r2
   15548:	180f883a 	mov	r7,r3
   1554c:	a809883a 	mov	r4,r21
   15550:	001e9940 	call	1e994 <__gedf2>
   15554:	db001617 	ldw	r12,88(sp)
   15558:	00840e16 	blt	zero,r2,16594 <_dtoa_r+0x15e8>
   1555c:	00800044 	movi	r2,1
   15560:	13006b0e 	bge	r2,r12,15710 <_dtoa_r+0x764>
   15564:	d9000717 	ldw	r4,28(sp)
   15568:	dd800f15 	stw	r22,60(sp)
   1556c:	dcc01015 	stw	r19,64(sp)
   15570:	2319883a 	add	r12,r4,r12
   15574:	dcc01217 	ldw	r19,72(sp)
   15578:	602d883a 	mov	r22,r12
   1557c:	dc801215 	stw	r18,72(sp)
   15580:	b825883a 	mov	r18,r23
   15584:	00000906 	br	155ac <_dtoa_r+0x600>
   15588:	001f3d00 	call	1f3d0 <__subdf3>
   1558c:	a80d883a 	mov	r6,r21
   15590:	980f883a 	mov	r7,r19
   15594:	1009883a 	mov	r4,r2
   15598:	180b883a 	mov	r5,r3
   1559c:	001ea700 	call	1ea70 <__ledf2>
   155a0:	1003e816 	blt	r2,zero,16544 <_dtoa_r+0x1598>
   155a4:	b825883a 	mov	r18,r23
   155a8:	bd83e926 	beq	r23,r22,16550 <_dtoa_r+0x15a4>
   155ac:	a809883a 	mov	r4,r21
   155b0:	980b883a 	mov	r5,r19
   155b4:	000d883a 	mov	r6,zero
   155b8:	01d00934 	movhi	r7,16420
   155bc:	001eb640 	call	1eb64 <__muldf3>
   155c0:	000d883a 	mov	r6,zero
   155c4:	01d00934 	movhi	r7,16420
   155c8:	8009883a 	mov	r4,r16
   155cc:	880b883a 	mov	r5,r17
   155d0:	102b883a 	mov	r21,r2
   155d4:	1827883a 	mov	r19,r3
   155d8:	001eb640 	call	1eb64 <__muldf3>
   155dc:	180b883a 	mov	r5,r3
   155e0:	1009883a 	mov	r4,r2
   155e4:	1821883a 	mov	r16,r3
   155e8:	1023883a 	mov	r17,r2
   155ec:	001fccc0 	call	1fccc <__fixdfsi>
   155f0:	1009883a 	mov	r4,r2
   155f4:	1029883a 	mov	r20,r2
   155f8:	001fd4c0 	call	1fd4c <__floatsidf>
   155fc:	8809883a 	mov	r4,r17
   15600:	800b883a 	mov	r5,r16
   15604:	100d883a 	mov	r6,r2
   15608:	180f883a 	mov	r7,r3
   1560c:	001f3d00 	call	1f3d0 <__subdf3>
   15610:	a5000c04 	addi	r20,r20,48
   15614:	a80d883a 	mov	r6,r21
   15618:	980f883a 	mov	r7,r19
   1561c:	1009883a 	mov	r4,r2
   15620:	180b883a 	mov	r5,r3
   15624:	95000005 	stb	r20,0(r18)
   15628:	1021883a 	mov	r16,r2
   1562c:	1823883a 	mov	r17,r3
   15630:	001ea700 	call	1ea70 <__ledf2>
   15634:	bdc00044 	addi	r23,r23,1
   15638:	800d883a 	mov	r6,r16
   1563c:	880f883a 	mov	r7,r17
   15640:	0009883a 	mov	r4,zero
   15644:	014ffc34 	movhi	r5,16368
   15648:	103fcf0e 	bge	r2,zero,15588 <__alt_data_end+0xfc015588>
   1564c:	d8c01317 	ldw	r3,76(sp)
   15650:	d8c00515 	stw	r3,20(sp)
   15654:	d9400917 	ldw	r5,36(sp)
   15658:	e009883a 	mov	r4,fp
   1565c:	0017c900 	call	17c90 <_Bfree>
   15660:	d9000517 	ldw	r4,20(sp)
   15664:	d9802317 	ldw	r6,140(sp)
   15668:	d9c02517 	ldw	r7,148(sp)
   1566c:	b8000005 	stb	zero,0(r23)
   15670:	20800044 	addi	r2,r4,1
   15674:	30800015 	stw	r2,0(r6)
   15678:	3802aa26 	beq	r7,zero,16124 <_dtoa_r+0x1178>
   1567c:	3dc00015 	stw	r23,0(r7)
   15680:	d8800717 	ldw	r2,28(sp)
   15684:	003e7906 	br	1506c <__alt_data_end+0xfc01506c>
   15688:	00800434 	movhi	r2,16
   1568c:	10bfffc4 	addi	r2,r2,-1
   15690:	88a2703a 	and	r17,r17,r2
   15694:	883e851e 	bne	r17,zero,150ac <__alt_data_end+0xfc0150ac>
   15698:	008000f4 	movhi	r2,3
   1569c:	10ae0e04 	addi	r2,r2,-18376
   156a0:	003e8406 	br	150b4 <__alt_data_end+0xfc0150b4>
   156a4:	10c00204 	addi	r3,r2,8
   156a8:	003e8706 	br	150c8 <__alt_data_end+0xfc0150c8>
   156ac:	01400434 	movhi	r5,16
   156b0:	297fffc4 	addi	r5,r5,-1
   156b4:	994a703a 	and	r5,r19,r5
   156b8:	9009883a 	mov	r4,r18
   156bc:	843f0044 	addi	r16,r16,-1023
   156c0:	294ffc34 	orhi	r5,r5,16368
   156c4:	dd800217 	ldw	r22,8(sp)
   156c8:	d8001115 	stw	zero,68(sp)
   156cc:	003ea506 	br	15164 <__alt_data_end+0xfc015164>
   156d0:	008000f4 	movhi	r2,3
   156d4:	10adfd04 	addi	r2,r2,-18444
   156d8:	003e6406 	br	1506c <__alt_data_end+0xfc01506c>
   156dc:	e0001115 	stw	zero,68(fp)
   156e0:	000b883a 	mov	r5,zero
   156e4:	e009883a 	mov	r4,fp
   156e8:	0017be80 	call	17be8 <_Balloc>
   156ec:	01bfffc4 	movi	r6,-1
   156f0:	01c00044 	movi	r7,1
   156f4:	d8800715 	stw	r2,28(sp)
   156f8:	d9800c15 	stw	r6,48(sp)
   156fc:	e0801015 	stw	r2,64(fp)
   15700:	d8000315 	stw	zero,12(sp)
   15704:	d9c00b15 	stw	r7,44(sp)
   15708:	d9800615 	stw	r6,24(sp)
   1570c:	d8002215 	stw	zero,136(sp)
   15710:	d8800117 	ldw	r2,4(sp)
   15714:	10008916 	blt	r2,zero,1593c <_dtoa_r+0x990>
   15718:	d9000517 	ldw	r4,20(sp)
   1571c:	00c00384 	movi	r3,14
   15720:	19008616 	blt	r3,r4,1593c <_dtoa_r+0x990>
   15724:	200490fa 	slli	r2,r4,3
   15728:	00c000f4 	movhi	r3,3
   1572c:	d9802217 	ldw	r6,136(sp)
   15730:	18ee2c04 	addi	r3,r3,-18256
   15734:	1885883a 	add	r2,r3,r2
   15738:	14000017 	ldw	r16,0(r2)
   1573c:	14400117 	ldw	r17,4(r2)
   15740:	30016316 	blt	r6,zero,15cd0 <_dtoa_r+0xd24>
   15744:	800d883a 	mov	r6,r16
   15748:	880f883a 	mov	r7,r17
   1574c:	9009883a 	mov	r4,r18
   15750:	980b883a 	mov	r5,r19
   15754:	001df3c0 	call	1df3c <__divdf3>
   15758:	180b883a 	mov	r5,r3
   1575c:	1009883a 	mov	r4,r2
   15760:	001fccc0 	call	1fccc <__fixdfsi>
   15764:	1009883a 	mov	r4,r2
   15768:	102b883a 	mov	r21,r2
   1576c:	001fd4c0 	call	1fd4c <__floatsidf>
   15770:	800d883a 	mov	r6,r16
   15774:	880f883a 	mov	r7,r17
   15778:	1009883a 	mov	r4,r2
   1577c:	180b883a 	mov	r5,r3
   15780:	001eb640 	call	1eb64 <__muldf3>
   15784:	100d883a 	mov	r6,r2
   15788:	180f883a 	mov	r7,r3
   1578c:	9009883a 	mov	r4,r18
   15790:	980b883a 	mov	r5,r19
   15794:	001f3d00 	call	1f3d0 <__subdf3>
   15798:	d9c00717 	ldw	r7,28(sp)
   1579c:	1009883a 	mov	r4,r2
   157a0:	a8800c04 	addi	r2,r21,48
   157a4:	38800005 	stb	r2,0(r7)
   157a8:	3dc00044 	addi	r23,r7,1
   157ac:	d9c00617 	ldw	r7,24(sp)
   157b0:	01800044 	movi	r6,1
   157b4:	180b883a 	mov	r5,r3
   157b8:	2005883a 	mov	r2,r4
   157bc:	39803826 	beq	r7,r6,158a0 <_dtoa_r+0x8f4>
   157c0:	000d883a 	mov	r6,zero
   157c4:	01d00934 	movhi	r7,16420
   157c8:	001eb640 	call	1eb64 <__muldf3>
   157cc:	000d883a 	mov	r6,zero
   157d0:	000f883a 	mov	r7,zero
   157d4:	1009883a 	mov	r4,r2
   157d8:	180b883a 	mov	r5,r3
   157dc:	1025883a 	mov	r18,r2
   157e0:	1827883a 	mov	r19,r3
   157e4:	001e90c0 	call	1e90c <__eqdf2>
   157e8:	103f9a26 	beq	r2,zero,15654 <__alt_data_end+0xfc015654>
   157ec:	d9c00617 	ldw	r7,24(sp)
   157f0:	d8c00717 	ldw	r3,28(sp)
   157f4:	b829883a 	mov	r20,r23
   157f8:	38bfffc4 	addi	r2,r7,-1
   157fc:	18ad883a 	add	r22,r3,r2
   15800:	00000a06 	br	1582c <_dtoa_r+0x880>
   15804:	001eb640 	call	1eb64 <__muldf3>
   15808:	000d883a 	mov	r6,zero
   1580c:	000f883a 	mov	r7,zero
   15810:	1009883a 	mov	r4,r2
   15814:	180b883a 	mov	r5,r3
   15818:	1025883a 	mov	r18,r2
   1581c:	1827883a 	mov	r19,r3
   15820:	b829883a 	mov	r20,r23
   15824:	001e90c0 	call	1e90c <__eqdf2>
   15828:	103f8a26 	beq	r2,zero,15654 <__alt_data_end+0xfc015654>
   1582c:	800d883a 	mov	r6,r16
   15830:	880f883a 	mov	r7,r17
   15834:	9009883a 	mov	r4,r18
   15838:	980b883a 	mov	r5,r19
   1583c:	001df3c0 	call	1df3c <__divdf3>
   15840:	180b883a 	mov	r5,r3
   15844:	1009883a 	mov	r4,r2
   15848:	001fccc0 	call	1fccc <__fixdfsi>
   1584c:	1009883a 	mov	r4,r2
   15850:	102b883a 	mov	r21,r2
   15854:	001fd4c0 	call	1fd4c <__floatsidf>
   15858:	800d883a 	mov	r6,r16
   1585c:	880f883a 	mov	r7,r17
   15860:	1009883a 	mov	r4,r2
   15864:	180b883a 	mov	r5,r3
   15868:	001eb640 	call	1eb64 <__muldf3>
   1586c:	100d883a 	mov	r6,r2
   15870:	180f883a 	mov	r7,r3
   15874:	9009883a 	mov	r4,r18
   15878:	980b883a 	mov	r5,r19
   1587c:	001f3d00 	call	1f3d0 <__subdf3>
   15880:	aa000c04 	addi	r8,r21,48
   15884:	a2000005 	stb	r8,0(r20)
   15888:	000d883a 	mov	r6,zero
   1588c:	01d00934 	movhi	r7,16420
   15890:	1009883a 	mov	r4,r2
   15894:	180b883a 	mov	r5,r3
   15898:	a5c00044 	addi	r23,r20,1
   1589c:	b53fd91e 	bne	r22,r20,15804 <__alt_data_end+0xfc015804>
   158a0:	100d883a 	mov	r6,r2
   158a4:	180f883a 	mov	r7,r3
   158a8:	1009883a 	mov	r4,r2
   158ac:	180b883a 	mov	r5,r3
   158b0:	001d6900 	call	1d690 <__adddf3>
   158b4:	100d883a 	mov	r6,r2
   158b8:	180f883a 	mov	r7,r3
   158bc:	8009883a 	mov	r4,r16
   158c0:	880b883a 	mov	r5,r17
   158c4:	1027883a 	mov	r19,r2
   158c8:	1825883a 	mov	r18,r3
   158cc:	001ea700 	call	1ea70 <__ledf2>
   158d0:	10000816 	blt	r2,zero,158f4 <_dtoa_r+0x948>
   158d4:	980d883a 	mov	r6,r19
   158d8:	900f883a 	mov	r7,r18
   158dc:	8009883a 	mov	r4,r16
   158e0:	880b883a 	mov	r5,r17
   158e4:	001e90c0 	call	1e90c <__eqdf2>
   158e8:	103f5a1e 	bne	r2,zero,15654 <__alt_data_end+0xfc015654>
   158ec:	ad40004c 	andi	r21,r21,1
   158f0:	a83f5826 	beq	r21,zero,15654 <__alt_data_end+0xfc015654>
   158f4:	bd3fffc3 	ldbu	r20,-1(r23)
   158f8:	b8bfffc4 	addi	r2,r23,-1
   158fc:	1007883a 	mov	r3,r2
   15900:	01400e44 	movi	r5,57
   15904:	d9800717 	ldw	r6,28(sp)
   15908:	00000506 	br	15920 <_dtoa_r+0x974>
   1590c:	18ffffc4 	addi	r3,r3,-1
   15910:	11824726 	beq	r2,r6,16230 <_dtoa_r+0x1284>
   15914:	1d000003 	ldbu	r20,0(r3)
   15918:	102f883a 	mov	r23,r2
   1591c:	10bfffc4 	addi	r2,r2,-1
   15920:	a1003fcc 	andi	r4,r20,255
   15924:	2100201c 	xori	r4,r4,128
   15928:	213fe004 	addi	r4,r4,-128
   1592c:	217ff726 	beq	r4,r5,1590c <__alt_data_end+0xfc01590c>
   15930:	a2000044 	addi	r8,r20,1
   15934:	12000005 	stb	r8,0(r2)
   15938:	003f4606 	br	15654 <__alt_data_end+0xfc015654>
   1593c:	d9000b17 	ldw	r4,44(sp)
   15940:	2000c826 	beq	r4,zero,15c64 <_dtoa_r+0xcb8>
   15944:	d9800317 	ldw	r6,12(sp)
   15948:	00c00044 	movi	r3,1
   1594c:	1980f90e 	bge	r3,r6,15d34 <_dtoa_r+0xd88>
   15950:	d8800617 	ldw	r2,24(sp)
   15954:	d8c00a17 	ldw	r3,40(sp)
   15958:	157fffc4 	addi	r21,r2,-1
   1595c:	1d41f316 	blt	r3,r21,1612c <_dtoa_r+0x1180>
   15960:	1d6bc83a 	sub	r21,r3,r21
   15964:	d9c00617 	ldw	r7,24(sp)
   15968:	3802aa16 	blt	r7,zero,16414 <_dtoa_r+0x1468>
   1596c:	dd000817 	ldw	r20,32(sp)
   15970:	d8800617 	ldw	r2,24(sp)
   15974:	d8c00817 	ldw	r3,32(sp)
   15978:	01400044 	movi	r5,1
   1597c:	e009883a 	mov	r4,fp
   15980:	1887883a 	add	r3,r3,r2
   15984:	d8c00815 	stw	r3,32(sp)
   15988:	b0ad883a 	add	r22,r22,r2
   1598c:	001801c0 	call	1801c <__i2b>
   15990:	1023883a 	mov	r17,r2
   15994:	a0000826 	beq	r20,zero,159b8 <_dtoa_r+0xa0c>
   15998:	0580070e 	bge	zero,r22,159b8 <_dtoa_r+0xa0c>
   1599c:	a005883a 	mov	r2,r20
   159a0:	b500b916 	blt	r22,r20,15c88 <_dtoa_r+0xcdc>
   159a4:	d9000817 	ldw	r4,32(sp)
   159a8:	a0a9c83a 	sub	r20,r20,r2
   159ac:	b0adc83a 	sub	r22,r22,r2
   159b0:	2089c83a 	sub	r4,r4,r2
   159b4:	d9000815 	stw	r4,32(sp)
   159b8:	d9800a17 	ldw	r6,40(sp)
   159bc:	0181810e 	bge	zero,r6,15fc4 <_dtoa_r+0x1018>
   159c0:	d9c00b17 	ldw	r7,44(sp)
   159c4:	3800b326 	beq	r7,zero,15c94 <_dtoa_r+0xce8>
   159c8:	a800b226 	beq	r21,zero,15c94 <_dtoa_r+0xce8>
   159cc:	880b883a 	mov	r5,r17
   159d0:	a80d883a 	mov	r6,r21
   159d4:	e009883a 	mov	r4,fp
   159d8:	00182e40 	call	182e4 <__pow5mult>
   159dc:	d9800917 	ldw	r6,36(sp)
   159e0:	100b883a 	mov	r5,r2
   159e4:	e009883a 	mov	r4,fp
   159e8:	1023883a 	mov	r17,r2
   159ec:	00180580 	call	18058 <__multiply>
   159f0:	1021883a 	mov	r16,r2
   159f4:	d8800a17 	ldw	r2,40(sp)
   159f8:	d9400917 	ldw	r5,36(sp)
   159fc:	e009883a 	mov	r4,fp
   15a00:	1545c83a 	sub	r2,r2,r21
   15a04:	d8800a15 	stw	r2,40(sp)
   15a08:	0017c900 	call	17c90 <_Bfree>
   15a0c:	d8c00a17 	ldw	r3,40(sp)
   15a10:	18009f1e 	bne	r3,zero,15c90 <_dtoa_r+0xce4>
   15a14:	05c00044 	movi	r23,1
   15a18:	e009883a 	mov	r4,fp
   15a1c:	b80b883a 	mov	r5,r23
   15a20:	001801c0 	call	1801c <__i2b>
   15a24:	d9000d17 	ldw	r4,52(sp)
   15a28:	102b883a 	mov	r21,r2
   15a2c:	2000ce26 	beq	r4,zero,15d68 <_dtoa_r+0xdbc>
   15a30:	200d883a 	mov	r6,r4
   15a34:	100b883a 	mov	r5,r2
   15a38:	e009883a 	mov	r4,fp
   15a3c:	00182e40 	call	182e4 <__pow5mult>
   15a40:	d9800317 	ldw	r6,12(sp)
   15a44:	102b883a 	mov	r21,r2
   15a48:	b981810e 	bge	r23,r6,16050 <_dtoa_r+0x10a4>
   15a4c:	0027883a 	mov	r19,zero
   15a50:	a8800417 	ldw	r2,16(r21)
   15a54:	05c00804 	movi	r23,32
   15a58:	10800104 	addi	r2,r2,4
   15a5c:	1085883a 	add	r2,r2,r2
   15a60:	1085883a 	add	r2,r2,r2
   15a64:	a885883a 	add	r2,r21,r2
   15a68:	11000017 	ldw	r4,0(r2)
   15a6c:	0017f040 	call	17f04 <__hi0bits>
   15a70:	b885c83a 	sub	r2,r23,r2
   15a74:	1585883a 	add	r2,r2,r22
   15a78:	108007cc 	andi	r2,r2,31
   15a7c:	1000b326 	beq	r2,zero,15d4c <_dtoa_r+0xda0>
   15a80:	00c00804 	movi	r3,32
   15a84:	1887c83a 	sub	r3,r3,r2
   15a88:	01000104 	movi	r4,4
   15a8c:	20c2cd0e 	bge	r4,r3,165c4 <_dtoa_r+0x1618>
   15a90:	00c00704 	movi	r3,28
   15a94:	1885c83a 	sub	r2,r3,r2
   15a98:	d8c00817 	ldw	r3,32(sp)
   15a9c:	a0a9883a 	add	r20,r20,r2
   15aa0:	b0ad883a 	add	r22,r22,r2
   15aa4:	1887883a 	add	r3,r3,r2
   15aa8:	d8c00815 	stw	r3,32(sp)
   15aac:	d9800817 	ldw	r6,32(sp)
   15ab0:	0180040e 	bge	zero,r6,15ac4 <_dtoa_r+0xb18>
   15ab4:	800b883a 	mov	r5,r16
   15ab8:	e009883a 	mov	r4,fp
   15abc:	00184240 	call	18424 <__lshift>
   15ac0:	1021883a 	mov	r16,r2
   15ac4:	0580050e 	bge	zero,r22,15adc <_dtoa_r+0xb30>
   15ac8:	a80b883a 	mov	r5,r21
   15acc:	b00d883a 	mov	r6,r22
   15ad0:	e009883a 	mov	r4,fp
   15ad4:	00184240 	call	18424 <__lshift>
   15ad8:	102b883a 	mov	r21,r2
   15adc:	d9c00e17 	ldw	r7,56(sp)
   15ae0:	3801211e 	bne	r7,zero,15f68 <_dtoa_r+0xfbc>
   15ae4:	d9800617 	ldw	r6,24(sp)
   15ae8:	0181380e 	bge	zero,r6,15fcc <_dtoa_r+0x1020>
   15aec:	d8c00b17 	ldw	r3,44(sp)
   15af0:	1800ab1e 	bne	r3,zero,15da0 <_dtoa_r+0xdf4>
   15af4:	dc800717 	ldw	r18,28(sp)
   15af8:	dcc00617 	ldw	r19,24(sp)
   15afc:	9029883a 	mov	r20,r18
   15b00:	00000206 	br	15b0c <_dtoa_r+0xb60>
   15b04:	0017cb80 	call	17cb8 <__multadd>
   15b08:	1021883a 	mov	r16,r2
   15b0c:	a80b883a 	mov	r5,r21
   15b10:	8009883a 	mov	r4,r16
   15b14:	0014d840 	call	14d84 <quorem>
   15b18:	10800c04 	addi	r2,r2,48
   15b1c:	90800005 	stb	r2,0(r18)
   15b20:	94800044 	addi	r18,r18,1
   15b24:	9507c83a 	sub	r3,r18,r20
   15b28:	000f883a 	mov	r7,zero
   15b2c:	01800284 	movi	r6,10
   15b30:	800b883a 	mov	r5,r16
   15b34:	e009883a 	mov	r4,fp
   15b38:	1cfff216 	blt	r3,r19,15b04 <__alt_data_end+0xfc015b04>
   15b3c:	1011883a 	mov	r8,r2
   15b40:	d8800617 	ldw	r2,24(sp)
   15b44:	0082370e 	bge	zero,r2,16424 <_dtoa_r+0x1478>
   15b48:	d9000717 	ldw	r4,28(sp)
   15b4c:	0025883a 	mov	r18,zero
   15b50:	20af883a 	add	r23,r4,r2
   15b54:	01800044 	movi	r6,1
   15b58:	800b883a 	mov	r5,r16
   15b5c:	e009883a 	mov	r4,fp
   15b60:	da001715 	stw	r8,92(sp)
   15b64:	00184240 	call	18424 <__lshift>
   15b68:	a80b883a 	mov	r5,r21
   15b6c:	1009883a 	mov	r4,r2
   15b70:	d8800915 	stw	r2,36(sp)
   15b74:	001856c0 	call	1856c <__mcmp>
   15b78:	da001717 	ldw	r8,92(sp)
   15b7c:	0081800e 	bge	zero,r2,16180 <_dtoa_r+0x11d4>
   15b80:	b93fffc3 	ldbu	r4,-1(r23)
   15b84:	b8bfffc4 	addi	r2,r23,-1
   15b88:	1007883a 	mov	r3,r2
   15b8c:	01800e44 	movi	r6,57
   15b90:	d9c00717 	ldw	r7,28(sp)
   15b94:	00000506 	br	15bac <_dtoa_r+0xc00>
   15b98:	18ffffc4 	addi	r3,r3,-1
   15b9c:	11c12326 	beq	r2,r7,1602c <_dtoa_r+0x1080>
   15ba0:	19000003 	ldbu	r4,0(r3)
   15ba4:	102f883a 	mov	r23,r2
   15ba8:	10bfffc4 	addi	r2,r2,-1
   15bac:	21403fcc 	andi	r5,r4,255
   15bb0:	2940201c 	xori	r5,r5,128
   15bb4:	297fe004 	addi	r5,r5,-128
   15bb8:	29bff726 	beq	r5,r6,15b98 <__alt_data_end+0xfc015b98>
   15bbc:	21000044 	addi	r4,r4,1
   15bc0:	11000005 	stb	r4,0(r2)
   15bc4:	a80b883a 	mov	r5,r21
   15bc8:	e009883a 	mov	r4,fp
   15bcc:	0017c900 	call	17c90 <_Bfree>
   15bd0:	883ea026 	beq	r17,zero,15654 <__alt_data_end+0xfc015654>
   15bd4:	90000426 	beq	r18,zero,15be8 <_dtoa_r+0xc3c>
   15bd8:	94400326 	beq	r18,r17,15be8 <_dtoa_r+0xc3c>
   15bdc:	900b883a 	mov	r5,r18
   15be0:	e009883a 	mov	r4,fp
   15be4:	0017c900 	call	17c90 <_Bfree>
   15be8:	880b883a 	mov	r5,r17
   15bec:	e009883a 	mov	r4,fp
   15bf0:	0017c900 	call	17c90 <_Bfree>
   15bf4:	003e9706 	br	15654 <__alt_data_end+0xfc015654>
   15bf8:	01800044 	movi	r6,1
   15bfc:	d9800e15 	stw	r6,56(sp)
   15c00:	003d9606 	br	1525c <__alt_data_end+0xfc01525c>
   15c04:	d8800817 	ldw	r2,32(sp)
   15c08:	d8c00517 	ldw	r3,20(sp)
   15c0c:	d8000d15 	stw	zero,52(sp)
   15c10:	10c5c83a 	sub	r2,r2,r3
   15c14:	00c9c83a 	sub	r4,zero,r3
   15c18:	d8800815 	stw	r2,32(sp)
   15c1c:	d9000a15 	stw	r4,40(sp)
   15c20:	003d9706 	br	15280 <__alt_data_end+0xfc015280>
   15c24:	05adc83a 	sub	r22,zero,r22
   15c28:	dd800815 	stw	r22,32(sp)
   15c2c:	002d883a 	mov	r22,zero
   15c30:	003d8e06 	br	1526c <__alt_data_end+0xfc01526c>
   15c34:	d9000517 	ldw	r4,20(sp)
   15c38:	001fd4c0 	call	1fd4c <__floatsidf>
   15c3c:	100d883a 	mov	r6,r2
   15c40:	180f883a 	mov	r7,r3
   15c44:	a009883a 	mov	r4,r20
   15c48:	880b883a 	mov	r5,r17
   15c4c:	001e90c0 	call	1e90c <__eqdf2>
   15c50:	103d7126 	beq	r2,zero,15218 <__alt_data_end+0xfc015218>
   15c54:	d9c00517 	ldw	r7,20(sp)
   15c58:	39ffffc4 	addi	r7,r7,-1
   15c5c:	d9c00515 	stw	r7,20(sp)
   15c60:	003d6d06 	br	15218 <__alt_data_end+0xfc015218>
   15c64:	dd400a17 	ldw	r21,40(sp)
   15c68:	dd000817 	ldw	r20,32(sp)
   15c6c:	0023883a 	mov	r17,zero
   15c70:	003f4806 	br	15994 <__alt_data_end+0xfc015994>
   15c74:	10e3c83a 	sub	r17,r2,r3
   15c78:	9448983a 	sll	r4,r18,r17
   15c7c:	003d3206 	br	15148 <__alt_data_end+0xfc015148>
   15c80:	d8000e15 	stw	zero,56(sp)
   15c84:	003d7506 	br	1525c <__alt_data_end+0xfc01525c>
   15c88:	b005883a 	mov	r2,r22
   15c8c:	003f4506 	br	159a4 <__alt_data_end+0xfc0159a4>
   15c90:	dc000915 	stw	r16,36(sp)
   15c94:	d9800a17 	ldw	r6,40(sp)
   15c98:	d9400917 	ldw	r5,36(sp)
   15c9c:	e009883a 	mov	r4,fp
   15ca0:	00182e40 	call	182e4 <__pow5mult>
   15ca4:	1021883a 	mov	r16,r2
   15ca8:	003f5a06 	br	15a14 <__alt_data_end+0xfc015a14>
   15cac:	01c00044 	movi	r7,1
   15cb0:	d9c00b15 	stw	r7,44(sp)
   15cb4:	d8802217 	ldw	r2,136(sp)
   15cb8:	0081280e 	bge	zero,r2,1615c <_dtoa_r+0x11b0>
   15cbc:	100d883a 	mov	r6,r2
   15cc0:	1021883a 	mov	r16,r2
   15cc4:	d8800c15 	stw	r2,48(sp)
   15cc8:	d8800615 	stw	r2,24(sp)
   15ccc:	003d8806 	br	152f0 <__alt_data_end+0xfc0152f0>
   15cd0:	d8800617 	ldw	r2,24(sp)
   15cd4:	00be9b16 	blt	zero,r2,15744 <__alt_data_end+0xfc015744>
   15cd8:	10010f1e 	bne	r2,zero,16118 <_dtoa_r+0x116c>
   15cdc:	880b883a 	mov	r5,r17
   15ce0:	000d883a 	mov	r6,zero
   15ce4:	01d00534 	movhi	r7,16404
   15ce8:	8009883a 	mov	r4,r16
   15cec:	001eb640 	call	1eb64 <__muldf3>
   15cf0:	900d883a 	mov	r6,r18
   15cf4:	980f883a 	mov	r7,r19
   15cf8:	1009883a 	mov	r4,r2
   15cfc:	180b883a 	mov	r5,r3
   15d00:	001e9940 	call	1e994 <__gedf2>
   15d04:	002b883a 	mov	r21,zero
   15d08:	0023883a 	mov	r17,zero
   15d0c:	1000bf16 	blt	r2,zero,1600c <_dtoa_r+0x1060>
   15d10:	d9802217 	ldw	r6,136(sp)
   15d14:	ddc00717 	ldw	r23,28(sp)
   15d18:	018c303a 	nor	r6,zero,r6
   15d1c:	d9800515 	stw	r6,20(sp)
   15d20:	a80b883a 	mov	r5,r21
   15d24:	e009883a 	mov	r4,fp
   15d28:	0017c900 	call	17c90 <_Bfree>
   15d2c:	883e4926 	beq	r17,zero,15654 <__alt_data_end+0xfc015654>
   15d30:	003fad06 	br	15be8 <__alt_data_end+0xfc015be8>
   15d34:	d9c01117 	ldw	r7,68(sp)
   15d38:	3801bc26 	beq	r7,zero,1642c <_dtoa_r+0x1480>
   15d3c:	10810cc4 	addi	r2,r2,1075
   15d40:	dd400a17 	ldw	r21,40(sp)
   15d44:	dd000817 	ldw	r20,32(sp)
   15d48:	003f0a06 	br	15974 <__alt_data_end+0xfc015974>
   15d4c:	00800704 	movi	r2,28
   15d50:	d9000817 	ldw	r4,32(sp)
   15d54:	a0a9883a 	add	r20,r20,r2
   15d58:	b0ad883a 	add	r22,r22,r2
   15d5c:	2089883a 	add	r4,r4,r2
   15d60:	d9000815 	stw	r4,32(sp)
   15d64:	003f5106 	br	15aac <__alt_data_end+0xfc015aac>
   15d68:	d8c00317 	ldw	r3,12(sp)
   15d6c:	b8c1fc0e 	bge	r23,r3,16560 <_dtoa_r+0x15b4>
   15d70:	0027883a 	mov	r19,zero
   15d74:	b805883a 	mov	r2,r23
   15d78:	003f3e06 	br	15a74 <__alt_data_end+0xfc015a74>
   15d7c:	880b883a 	mov	r5,r17
   15d80:	e009883a 	mov	r4,fp
   15d84:	000f883a 	mov	r7,zero
   15d88:	01800284 	movi	r6,10
   15d8c:	0017cb80 	call	17cb8 <__multadd>
   15d90:	d9000c17 	ldw	r4,48(sp)
   15d94:	1023883a 	mov	r17,r2
   15d98:	0102040e 	bge	zero,r4,165ac <_dtoa_r+0x1600>
   15d9c:	d9000615 	stw	r4,24(sp)
   15da0:	0500050e 	bge	zero,r20,15db8 <_dtoa_r+0xe0c>
   15da4:	880b883a 	mov	r5,r17
   15da8:	a00d883a 	mov	r6,r20
   15dac:	e009883a 	mov	r4,fp
   15db0:	00184240 	call	18424 <__lshift>
   15db4:	1023883a 	mov	r17,r2
   15db8:	9801241e 	bne	r19,zero,1624c <_dtoa_r+0x12a0>
   15dbc:	8829883a 	mov	r20,r17
   15dc0:	d9000617 	ldw	r4,24(sp)
   15dc4:	dcc00717 	ldw	r19,28(sp)
   15dc8:	9480004c 	andi	r18,r18,1
   15dcc:	20bfffc4 	addi	r2,r4,-1
   15dd0:	9885883a 	add	r2,r19,r2
   15dd4:	d8800415 	stw	r2,16(sp)
   15dd8:	dc800615 	stw	r18,24(sp)
   15ddc:	a80b883a 	mov	r5,r21
   15de0:	8009883a 	mov	r4,r16
   15de4:	0014d840 	call	14d84 <quorem>
   15de8:	880b883a 	mov	r5,r17
   15dec:	8009883a 	mov	r4,r16
   15df0:	102f883a 	mov	r23,r2
   15df4:	001856c0 	call	1856c <__mcmp>
   15df8:	a80b883a 	mov	r5,r21
   15dfc:	a00d883a 	mov	r6,r20
   15e00:	e009883a 	mov	r4,fp
   15e04:	102d883a 	mov	r22,r2
   15e08:	00185cc0 	call	185cc <__mdiff>
   15e0c:	1007883a 	mov	r3,r2
   15e10:	10800317 	ldw	r2,12(r2)
   15e14:	bc800c04 	addi	r18,r23,48
   15e18:	180b883a 	mov	r5,r3
   15e1c:	10004e1e 	bne	r2,zero,15f58 <_dtoa_r+0xfac>
   15e20:	8009883a 	mov	r4,r16
   15e24:	d8c01615 	stw	r3,88(sp)
   15e28:	001856c0 	call	1856c <__mcmp>
   15e2c:	d8c01617 	ldw	r3,88(sp)
   15e30:	e009883a 	mov	r4,fp
   15e34:	d8801615 	stw	r2,88(sp)
   15e38:	180b883a 	mov	r5,r3
   15e3c:	0017c900 	call	17c90 <_Bfree>
   15e40:	d8801617 	ldw	r2,88(sp)
   15e44:	1000041e 	bne	r2,zero,15e58 <_dtoa_r+0xeac>
   15e48:	d9800317 	ldw	r6,12(sp)
   15e4c:	3000021e 	bne	r6,zero,15e58 <_dtoa_r+0xeac>
   15e50:	d8c00617 	ldw	r3,24(sp)
   15e54:	18003726 	beq	r3,zero,15f34 <_dtoa_r+0xf88>
   15e58:	b0002016 	blt	r22,zero,15edc <_dtoa_r+0xf30>
   15e5c:	b000041e 	bne	r22,zero,15e70 <_dtoa_r+0xec4>
   15e60:	d9000317 	ldw	r4,12(sp)
   15e64:	2000021e 	bne	r4,zero,15e70 <_dtoa_r+0xec4>
   15e68:	d8c00617 	ldw	r3,24(sp)
   15e6c:	18001b26 	beq	r3,zero,15edc <_dtoa_r+0xf30>
   15e70:	00810716 	blt	zero,r2,16290 <_dtoa_r+0x12e4>
   15e74:	d8c00417 	ldw	r3,16(sp)
   15e78:	9d800044 	addi	r22,r19,1
   15e7c:	9c800005 	stb	r18,0(r19)
   15e80:	b02f883a 	mov	r23,r22
   15e84:	98c10626 	beq	r19,r3,162a0 <_dtoa_r+0x12f4>
   15e88:	800b883a 	mov	r5,r16
   15e8c:	000f883a 	mov	r7,zero
   15e90:	01800284 	movi	r6,10
   15e94:	e009883a 	mov	r4,fp
   15e98:	0017cb80 	call	17cb8 <__multadd>
   15e9c:	1021883a 	mov	r16,r2
   15ea0:	000f883a 	mov	r7,zero
   15ea4:	01800284 	movi	r6,10
   15ea8:	880b883a 	mov	r5,r17
   15eac:	e009883a 	mov	r4,fp
   15eb0:	8d002526 	beq	r17,r20,15f48 <_dtoa_r+0xf9c>
   15eb4:	0017cb80 	call	17cb8 <__multadd>
   15eb8:	a00b883a 	mov	r5,r20
   15ebc:	000f883a 	mov	r7,zero
   15ec0:	01800284 	movi	r6,10
   15ec4:	e009883a 	mov	r4,fp
   15ec8:	1023883a 	mov	r17,r2
   15ecc:	0017cb80 	call	17cb8 <__multadd>
   15ed0:	1029883a 	mov	r20,r2
   15ed4:	b027883a 	mov	r19,r22
   15ed8:	003fc006 	br	15ddc <__alt_data_end+0xfc015ddc>
   15edc:	9011883a 	mov	r8,r18
   15ee0:	00800e0e 	bge	zero,r2,15f1c <_dtoa_r+0xf70>
   15ee4:	800b883a 	mov	r5,r16
   15ee8:	01800044 	movi	r6,1
   15eec:	e009883a 	mov	r4,fp
   15ef0:	da001715 	stw	r8,92(sp)
   15ef4:	00184240 	call	18424 <__lshift>
   15ef8:	a80b883a 	mov	r5,r21
   15efc:	1009883a 	mov	r4,r2
   15f00:	1021883a 	mov	r16,r2
   15f04:	001856c0 	call	1856c <__mcmp>
   15f08:	da001717 	ldw	r8,92(sp)
   15f0c:	0081960e 	bge	zero,r2,16568 <_dtoa_r+0x15bc>
   15f10:	00800e44 	movi	r2,57
   15f14:	40817026 	beq	r8,r2,164d8 <_dtoa_r+0x152c>
   15f18:	ba000c44 	addi	r8,r23,49
   15f1c:	8825883a 	mov	r18,r17
   15f20:	9dc00044 	addi	r23,r19,1
   15f24:	9a000005 	stb	r8,0(r19)
   15f28:	a023883a 	mov	r17,r20
   15f2c:	dc000915 	stw	r16,36(sp)
   15f30:	003f2406 	br	15bc4 <__alt_data_end+0xfc015bc4>
   15f34:	00800e44 	movi	r2,57
   15f38:	9011883a 	mov	r8,r18
   15f3c:	90816626 	beq	r18,r2,164d8 <_dtoa_r+0x152c>
   15f40:	05bff516 	blt	zero,r22,15f18 <__alt_data_end+0xfc015f18>
   15f44:	003ff506 	br	15f1c <__alt_data_end+0xfc015f1c>
   15f48:	0017cb80 	call	17cb8 <__multadd>
   15f4c:	1023883a 	mov	r17,r2
   15f50:	1029883a 	mov	r20,r2
   15f54:	003fdf06 	br	15ed4 <__alt_data_end+0xfc015ed4>
   15f58:	e009883a 	mov	r4,fp
   15f5c:	0017c900 	call	17c90 <_Bfree>
   15f60:	00800044 	movi	r2,1
   15f64:	003fbc06 	br	15e58 <__alt_data_end+0xfc015e58>
   15f68:	a80b883a 	mov	r5,r21
   15f6c:	8009883a 	mov	r4,r16
   15f70:	001856c0 	call	1856c <__mcmp>
   15f74:	103edb0e 	bge	r2,zero,15ae4 <__alt_data_end+0xfc015ae4>
   15f78:	800b883a 	mov	r5,r16
   15f7c:	000f883a 	mov	r7,zero
   15f80:	01800284 	movi	r6,10
   15f84:	e009883a 	mov	r4,fp
   15f88:	0017cb80 	call	17cb8 <__multadd>
   15f8c:	1021883a 	mov	r16,r2
   15f90:	d8800517 	ldw	r2,20(sp)
   15f94:	d8c00b17 	ldw	r3,44(sp)
   15f98:	10bfffc4 	addi	r2,r2,-1
   15f9c:	d8800515 	stw	r2,20(sp)
   15fa0:	183f761e 	bne	r3,zero,15d7c <__alt_data_end+0xfc015d7c>
   15fa4:	d9000c17 	ldw	r4,48(sp)
   15fa8:	0101730e 	bge	zero,r4,16578 <_dtoa_r+0x15cc>
   15fac:	d9000615 	stw	r4,24(sp)
   15fb0:	003ed006 	br	15af4 <__alt_data_end+0xfc015af4>
   15fb4:	00800084 	movi	r2,2
   15fb8:	3081861e 	bne	r6,r2,165d4 <_dtoa_r+0x1628>
   15fbc:	d8000b15 	stw	zero,44(sp)
   15fc0:	003f3c06 	br	15cb4 <__alt_data_end+0xfc015cb4>
   15fc4:	dc000917 	ldw	r16,36(sp)
   15fc8:	003e9206 	br	15a14 <__alt_data_end+0xfc015a14>
   15fcc:	d9c00317 	ldw	r7,12(sp)
   15fd0:	00800084 	movi	r2,2
   15fd4:	11fec50e 	bge	r2,r7,15aec <__alt_data_end+0xfc015aec>
   15fd8:	d9000617 	ldw	r4,24(sp)
   15fdc:	20013c1e 	bne	r4,zero,164d0 <_dtoa_r+0x1524>
   15fe0:	a80b883a 	mov	r5,r21
   15fe4:	000f883a 	mov	r7,zero
   15fe8:	01800144 	movi	r6,5
   15fec:	e009883a 	mov	r4,fp
   15ff0:	0017cb80 	call	17cb8 <__multadd>
   15ff4:	100b883a 	mov	r5,r2
   15ff8:	8009883a 	mov	r4,r16
   15ffc:	102b883a 	mov	r21,r2
   16000:	001856c0 	call	1856c <__mcmp>
   16004:	dc000915 	stw	r16,36(sp)
   16008:	00bf410e 	bge	zero,r2,15d10 <__alt_data_end+0xfc015d10>
   1600c:	d9c00717 	ldw	r7,28(sp)
   16010:	00800c44 	movi	r2,49
   16014:	38800005 	stb	r2,0(r7)
   16018:	d8800517 	ldw	r2,20(sp)
   1601c:	3dc00044 	addi	r23,r7,1
   16020:	10800044 	addi	r2,r2,1
   16024:	d8800515 	stw	r2,20(sp)
   16028:	003f3d06 	br	15d20 <__alt_data_end+0xfc015d20>
   1602c:	d9800517 	ldw	r6,20(sp)
   16030:	d9c00717 	ldw	r7,28(sp)
   16034:	00800c44 	movi	r2,49
   16038:	31800044 	addi	r6,r6,1
   1603c:	d9800515 	stw	r6,20(sp)
   16040:	38800005 	stb	r2,0(r7)
   16044:	003edf06 	br	15bc4 <__alt_data_end+0xfc015bc4>
   16048:	d8000b15 	stw	zero,44(sp)
   1604c:	003c9f06 	br	152cc <__alt_data_end+0xfc0152cc>
   16050:	903e7e1e 	bne	r18,zero,15a4c <__alt_data_end+0xfc015a4c>
   16054:	00800434 	movhi	r2,16
   16058:	10bfffc4 	addi	r2,r2,-1
   1605c:	9884703a 	and	r2,r19,r2
   16060:	1000ea1e 	bne	r2,zero,1640c <_dtoa_r+0x1460>
   16064:	9cdffc2c 	andhi	r19,r19,32752
   16068:	9800e826 	beq	r19,zero,1640c <_dtoa_r+0x1460>
   1606c:	d9c00817 	ldw	r7,32(sp)
   16070:	b5800044 	addi	r22,r22,1
   16074:	04c00044 	movi	r19,1
   16078:	39c00044 	addi	r7,r7,1
   1607c:	d9c00815 	stw	r7,32(sp)
   16080:	d8800d17 	ldw	r2,52(sp)
   16084:	103e721e 	bne	r2,zero,15a50 <__alt_data_end+0xfc015a50>
   16088:	00800044 	movi	r2,1
   1608c:	003e7906 	br	15a74 <__alt_data_end+0xfc015a74>
   16090:	8009883a 	mov	r4,r16
   16094:	001fd4c0 	call	1fd4c <__floatsidf>
   16098:	d9800f17 	ldw	r6,60(sp)
   1609c:	d9c01017 	ldw	r7,64(sp)
   160a0:	1009883a 	mov	r4,r2
   160a4:	180b883a 	mov	r5,r3
   160a8:	001eb640 	call	1eb64 <__muldf3>
   160ac:	000d883a 	mov	r6,zero
   160b0:	01d00734 	movhi	r7,16412
   160b4:	1009883a 	mov	r4,r2
   160b8:	180b883a 	mov	r5,r3
   160bc:	001d6900 	call	1d690 <__adddf3>
   160c0:	047f3034 	movhi	r17,64704
   160c4:	1021883a 	mov	r16,r2
   160c8:	1c63883a 	add	r17,r3,r17
   160cc:	d9000f17 	ldw	r4,60(sp)
   160d0:	d9401017 	ldw	r5,64(sp)
   160d4:	000d883a 	mov	r6,zero
   160d8:	01d00534 	movhi	r7,16404
   160dc:	001f3d00 	call	1f3d0 <__subdf3>
   160e0:	800d883a 	mov	r6,r16
   160e4:	880f883a 	mov	r7,r17
   160e8:	1009883a 	mov	r4,r2
   160ec:	180b883a 	mov	r5,r3
   160f0:	102b883a 	mov	r21,r2
   160f4:	1829883a 	mov	r20,r3
   160f8:	001e9940 	call	1e994 <__gedf2>
   160fc:	00806c16 	blt	zero,r2,162b0 <_dtoa_r+0x1304>
   16100:	89e0003c 	xorhi	r7,r17,32768
   16104:	800d883a 	mov	r6,r16
   16108:	a809883a 	mov	r4,r21
   1610c:	a00b883a 	mov	r5,r20
   16110:	001ea700 	call	1ea70 <__ledf2>
   16114:	103d7e0e 	bge	r2,zero,15710 <__alt_data_end+0xfc015710>
   16118:	002b883a 	mov	r21,zero
   1611c:	0023883a 	mov	r17,zero
   16120:	003efb06 	br	15d10 <__alt_data_end+0xfc015d10>
   16124:	d8800717 	ldw	r2,28(sp)
   16128:	003bd006 	br	1506c <__alt_data_end+0xfc01506c>
   1612c:	d9000a17 	ldw	r4,40(sp)
   16130:	d9800d17 	ldw	r6,52(sp)
   16134:	dd400a15 	stw	r21,40(sp)
   16138:	a905c83a 	sub	r2,r21,r4
   1613c:	308d883a 	add	r6,r6,r2
   16140:	d9800d15 	stw	r6,52(sp)
   16144:	002b883a 	mov	r21,zero
   16148:	003e0606 	br	15964 <__alt_data_end+0xfc015964>
   1614c:	9023883a 	mov	r17,r18
   16150:	9829883a 	mov	r20,r19
   16154:	04000084 	movi	r16,2
   16158:	003c9206 	br	153a4 <__alt_data_end+0xfc0153a4>
   1615c:	04000044 	movi	r16,1
   16160:	dc000c15 	stw	r16,48(sp)
   16164:	dc000615 	stw	r16,24(sp)
   16168:	dc002215 	stw	r16,136(sp)
   1616c:	e0001115 	stw	zero,68(fp)
   16170:	000b883a 	mov	r5,zero
   16174:	003c6906 	br	1531c <__alt_data_end+0xfc01531c>
   16178:	3021883a 	mov	r16,r6
   1617c:	003ffb06 	br	1616c <__alt_data_end+0xfc01616c>
   16180:	1000021e 	bne	r2,zero,1618c <_dtoa_r+0x11e0>
   16184:	4200004c 	andi	r8,r8,1
   16188:	403e7d1e 	bne	r8,zero,15b80 <__alt_data_end+0xfc015b80>
   1618c:	01000c04 	movi	r4,48
   16190:	00000106 	br	16198 <_dtoa_r+0x11ec>
   16194:	102f883a 	mov	r23,r2
   16198:	b8bfffc4 	addi	r2,r23,-1
   1619c:	10c00007 	ldb	r3,0(r2)
   161a0:	193ffc26 	beq	r3,r4,16194 <__alt_data_end+0xfc016194>
   161a4:	003e8706 	br	15bc4 <__alt_data_end+0xfc015bc4>
   161a8:	d8800517 	ldw	r2,20(sp)
   161ac:	00a3c83a 	sub	r17,zero,r2
   161b0:	8800a426 	beq	r17,zero,16444 <_dtoa_r+0x1498>
   161b4:	888003cc 	andi	r2,r17,15
   161b8:	100490fa 	slli	r2,r2,3
   161bc:	00c000f4 	movhi	r3,3
   161c0:	18ee2c04 	addi	r3,r3,-18256
   161c4:	1885883a 	add	r2,r3,r2
   161c8:	11800017 	ldw	r6,0(r2)
   161cc:	11c00117 	ldw	r7,4(r2)
   161d0:	9009883a 	mov	r4,r18
   161d4:	980b883a 	mov	r5,r19
   161d8:	8823d13a 	srai	r17,r17,4
   161dc:	001eb640 	call	1eb64 <__muldf3>
   161e0:	d8800f15 	stw	r2,60(sp)
   161e4:	d8c01015 	stw	r3,64(sp)
   161e8:	8800e826 	beq	r17,zero,1658c <_dtoa_r+0x15e0>
   161ec:	050000f4 	movhi	r20,3
   161f0:	a52e2204 	addi	r20,r20,-18296
   161f4:	04000084 	movi	r16,2
   161f8:	8980004c 	andi	r6,r17,1
   161fc:	1009883a 	mov	r4,r2
   16200:	8823d07a 	srai	r17,r17,1
   16204:	180b883a 	mov	r5,r3
   16208:	30000426 	beq	r6,zero,1621c <_dtoa_r+0x1270>
   1620c:	a1800017 	ldw	r6,0(r20)
   16210:	a1c00117 	ldw	r7,4(r20)
   16214:	84000044 	addi	r16,r16,1
   16218:	001eb640 	call	1eb64 <__muldf3>
   1621c:	a5000204 	addi	r20,r20,8
   16220:	883ff51e 	bne	r17,zero,161f8 <__alt_data_end+0xfc0161f8>
   16224:	d8800f15 	stw	r2,60(sp)
   16228:	d8c01015 	stw	r3,64(sp)
   1622c:	003c7606 	br	15408 <__alt_data_end+0xfc015408>
   16230:	00c00c04 	movi	r3,48
   16234:	10c00005 	stb	r3,0(r2)
   16238:	d8c00517 	ldw	r3,20(sp)
   1623c:	bd3fffc3 	ldbu	r20,-1(r23)
   16240:	18c00044 	addi	r3,r3,1
   16244:	d8c00515 	stw	r3,20(sp)
   16248:	003db906 	br	15930 <__alt_data_end+0xfc015930>
   1624c:	89400117 	ldw	r5,4(r17)
   16250:	e009883a 	mov	r4,fp
   16254:	0017be80 	call	17be8 <_Balloc>
   16258:	89800417 	ldw	r6,16(r17)
   1625c:	89400304 	addi	r5,r17,12
   16260:	11000304 	addi	r4,r2,12
   16264:	31800084 	addi	r6,r6,2
   16268:	318d883a 	add	r6,r6,r6
   1626c:	318d883a 	add	r6,r6,r6
   16270:	1027883a 	mov	r19,r2
   16274:	000fc580 	call	fc58 <memcpy>
   16278:	01800044 	movi	r6,1
   1627c:	980b883a 	mov	r5,r19
   16280:	e009883a 	mov	r4,fp
   16284:	00184240 	call	18424 <__lshift>
   16288:	1029883a 	mov	r20,r2
   1628c:	003ecc06 	br	15dc0 <__alt_data_end+0xfc015dc0>
   16290:	00800e44 	movi	r2,57
   16294:	90809026 	beq	r18,r2,164d8 <_dtoa_r+0x152c>
   16298:	92000044 	addi	r8,r18,1
   1629c:	003f1f06 	br	15f1c <__alt_data_end+0xfc015f1c>
   162a0:	9011883a 	mov	r8,r18
   162a4:	8825883a 	mov	r18,r17
   162a8:	a023883a 	mov	r17,r20
   162ac:	003e2906 	br	15b54 <__alt_data_end+0xfc015b54>
   162b0:	002b883a 	mov	r21,zero
   162b4:	0023883a 	mov	r17,zero
   162b8:	003f5406 	br	1600c <__alt_data_end+0xfc01600c>
   162bc:	61bfffc4 	addi	r6,r12,-1
   162c0:	300490fa 	slli	r2,r6,3
   162c4:	00c000f4 	movhi	r3,3
   162c8:	18ee2c04 	addi	r3,r3,-18256
   162cc:	1885883a 	add	r2,r3,r2
   162d0:	11000017 	ldw	r4,0(r2)
   162d4:	11400117 	ldw	r5,4(r2)
   162d8:	d8800717 	ldw	r2,28(sp)
   162dc:	880f883a 	mov	r7,r17
   162e0:	d9801215 	stw	r6,72(sp)
   162e4:	800d883a 	mov	r6,r16
   162e8:	db001615 	stw	r12,88(sp)
   162ec:	15c00044 	addi	r23,r2,1
   162f0:	001eb640 	call	1eb64 <__muldf3>
   162f4:	d9401017 	ldw	r5,64(sp)
   162f8:	d9000f17 	ldw	r4,60(sp)
   162fc:	d8c01515 	stw	r3,84(sp)
   16300:	d8801415 	stw	r2,80(sp)
   16304:	001fccc0 	call	1fccc <__fixdfsi>
   16308:	1009883a 	mov	r4,r2
   1630c:	1021883a 	mov	r16,r2
   16310:	001fd4c0 	call	1fd4c <__floatsidf>
   16314:	d9000f17 	ldw	r4,60(sp)
   16318:	d9401017 	ldw	r5,64(sp)
   1631c:	100d883a 	mov	r6,r2
   16320:	180f883a 	mov	r7,r3
   16324:	001f3d00 	call	1f3d0 <__subdf3>
   16328:	1829883a 	mov	r20,r3
   1632c:	d8c00717 	ldw	r3,28(sp)
   16330:	84000c04 	addi	r16,r16,48
   16334:	1023883a 	mov	r17,r2
   16338:	1c000005 	stb	r16,0(r3)
   1633c:	db001617 	ldw	r12,88(sp)
   16340:	00800044 	movi	r2,1
   16344:	60802226 	beq	r12,r2,163d0 <_dtoa_r+0x1424>
   16348:	d9c00717 	ldw	r7,28(sp)
   1634c:	8805883a 	mov	r2,r17
   16350:	b82b883a 	mov	r21,r23
   16354:	3b19883a 	add	r12,r7,r12
   16358:	6023883a 	mov	r17,r12
   1635c:	a007883a 	mov	r3,r20
   16360:	dc800f15 	stw	r18,60(sp)
   16364:	000d883a 	mov	r6,zero
   16368:	01d00934 	movhi	r7,16420
   1636c:	1009883a 	mov	r4,r2
   16370:	180b883a 	mov	r5,r3
   16374:	001eb640 	call	1eb64 <__muldf3>
   16378:	180b883a 	mov	r5,r3
   1637c:	1009883a 	mov	r4,r2
   16380:	1829883a 	mov	r20,r3
   16384:	1025883a 	mov	r18,r2
   16388:	001fccc0 	call	1fccc <__fixdfsi>
   1638c:	1009883a 	mov	r4,r2
   16390:	1021883a 	mov	r16,r2
   16394:	001fd4c0 	call	1fd4c <__floatsidf>
   16398:	100d883a 	mov	r6,r2
   1639c:	180f883a 	mov	r7,r3
   163a0:	9009883a 	mov	r4,r18
   163a4:	a00b883a 	mov	r5,r20
   163a8:	84000c04 	addi	r16,r16,48
   163ac:	001f3d00 	call	1f3d0 <__subdf3>
   163b0:	ad400044 	addi	r21,r21,1
   163b4:	ac3fffc5 	stb	r16,-1(r21)
   163b8:	ac7fea1e 	bne	r21,r17,16364 <__alt_data_end+0xfc016364>
   163bc:	1023883a 	mov	r17,r2
   163c0:	d8801217 	ldw	r2,72(sp)
   163c4:	dc800f17 	ldw	r18,60(sp)
   163c8:	1829883a 	mov	r20,r3
   163cc:	b8af883a 	add	r23,r23,r2
   163d0:	d9001417 	ldw	r4,80(sp)
   163d4:	d9401517 	ldw	r5,84(sp)
   163d8:	000d883a 	mov	r6,zero
   163dc:	01cff834 	movhi	r7,16352
   163e0:	001d6900 	call	1d690 <__adddf3>
   163e4:	880d883a 	mov	r6,r17
   163e8:	a00f883a 	mov	r7,r20
   163ec:	1009883a 	mov	r4,r2
   163f0:	180b883a 	mov	r5,r3
   163f4:	001ea700 	call	1ea70 <__ledf2>
   163f8:	10003e0e 	bge	r2,zero,164f4 <_dtoa_r+0x1548>
   163fc:	d9001317 	ldw	r4,76(sp)
   16400:	bd3fffc3 	ldbu	r20,-1(r23)
   16404:	d9000515 	stw	r4,20(sp)
   16408:	003d3b06 	br	158f8 <__alt_data_end+0xfc0158f8>
   1640c:	0027883a 	mov	r19,zero
   16410:	003f1b06 	br	16080 <__alt_data_end+0xfc016080>
   16414:	d8800817 	ldw	r2,32(sp)
   16418:	11e9c83a 	sub	r20,r2,r7
   1641c:	0005883a 	mov	r2,zero
   16420:	003d5406 	br	15974 <__alt_data_end+0xfc015974>
   16424:	00800044 	movi	r2,1
   16428:	003dc706 	br	15b48 <__alt_data_end+0xfc015b48>
   1642c:	d8c00217 	ldw	r3,8(sp)
   16430:	00800d84 	movi	r2,54
   16434:	dd400a17 	ldw	r21,40(sp)
   16438:	10c5c83a 	sub	r2,r2,r3
   1643c:	dd000817 	ldw	r20,32(sp)
   16440:	003d4c06 	br	15974 <__alt_data_end+0xfc015974>
   16444:	dc800f15 	stw	r18,60(sp)
   16448:	dcc01015 	stw	r19,64(sp)
   1644c:	04000084 	movi	r16,2
   16450:	003bed06 	br	15408 <__alt_data_end+0xfc015408>
   16454:	d9000617 	ldw	r4,24(sp)
   16458:	203f0d26 	beq	r4,zero,16090 <__alt_data_end+0xfc016090>
   1645c:	d9800c17 	ldw	r6,48(sp)
   16460:	01bcab0e 	bge	zero,r6,15710 <__alt_data_end+0xfc015710>
   16464:	d9401017 	ldw	r5,64(sp)
   16468:	d9000f17 	ldw	r4,60(sp)
   1646c:	000d883a 	mov	r6,zero
   16470:	01d00934 	movhi	r7,16420
   16474:	001eb640 	call	1eb64 <__muldf3>
   16478:	81000044 	addi	r4,r16,1
   1647c:	d8800f15 	stw	r2,60(sp)
   16480:	d8c01015 	stw	r3,64(sp)
   16484:	001fd4c0 	call	1fd4c <__floatsidf>
   16488:	d9800f17 	ldw	r6,60(sp)
   1648c:	d9c01017 	ldw	r7,64(sp)
   16490:	1009883a 	mov	r4,r2
   16494:	180b883a 	mov	r5,r3
   16498:	001eb640 	call	1eb64 <__muldf3>
   1649c:	01d00734 	movhi	r7,16412
   164a0:	000d883a 	mov	r6,zero
   164a4:	1009883a 	mov	r4,r2
   164a8:	180b883a 	mov	r5,r3
   164ac:	001d6900 	call	1d690 <__adddf3>
   164b0:	d9c00517 	ldw	r7,20(sp)
   164b4:	047f3034 	movhi	r17,64704
   164b8:	1021883a 	mov	r16,r2
   164bc:	39ffffc4 	addi	r7,r7,-1
   164c0:	d9c01315 	stw	r7,76(sp)
   164c4:	1c63883a 	add	r17,r3,r17
   164c8:	db000c17 	ldw	r12,48(sp)
   164cc:	003bea06 	br	15478 <__alt_data_end+0xfc015478>
   164d0:	dc000915 	stw	r16,36(sp)
   164d4:	003e0e06 	br	15d10 <__alt_data_end+0xfc015d10>
   164d8:	01000e44 	movi	r4,57
   164dc:	8825883a 	mov	r18,r17
   164e0:	9dc00044 	addi	r23,r19,1
   164e4:	99000005 	stb	r4,0(r19)
   164e8:	a023883a 	mov	r17,r20
   164ec:	dc000915 	stw	r16,36(sp)
   164f0:	003da406 	br	15b84 <__alt_data_end+0xfc015b84>
   164f4:	d9801417 	ldw	r6,80(sp)
   164f8:	d9c01517 	ldw	r7,84(sp)
   164fc:	0009883a 	mov	r4,zero
   16500:	014ff834 	movhi	r5,16352
   16504:	001f3d00 	call	1f3d0 <__subdf3>
   16508:	880d883a 	mov	r6,r17
   1650c:	a00f883a 	mov	r7,r20
   16510:	1009883a 	mov	r4,r2
   16514:	180b883a 	mov	r5,r3
   16518:	001e9940 	call	1e994 <__gedf2>
   1651c:	00bc7c0e 	bge	zero,r2,15710 <__alt_data_end+0xfc015710>
   16520:	01000c04 	movi	r4,48
   16524:	00000106 	br	1652c <_dtoa_r+0x1580>
   16528:	102f883a 	mov	r23,r2
   1652c:	b8bfffc4 	addi	r2,r23,-1
   16530:	10c00007 	ldb	r3,0(r2)
   16534:	193ffc26 	beq	r3,r4,16528 <__alt_data_end+0xfc016528>
   16538:	d9801317 	ldw	r6,76(sp)
   1653c:	d9800515 	stw	r6,20(sp)
   16540:	003c4406 	br	15654 <__alt_data_end+0xfc015654>
   16544:	d9801317 	ldw	r6,76(sp)
   16548:	d9800515 	stw	r6,20(sp)
   1654c:	003cea06 	br	158f8 <__alt_data_end+0xfc0158f8>
   16550:	dd800f17 	ldw	r22,60(sp)
   16554:	dcc01017 	ldw	r19,64(sp)
   16558:	dc801217 	ldw	r18,72(sp)
   1655c:	003c6c06 	br	15710 <__alt_data_end+0xfc015710>
   16560:	903e031e 	bne	r18,zero,15d70 <__alt_data_end+0xfc015d70>
   16564:	003ebb06 	br	16054 <__alt_data_end+0xfc016054>
   16568:	103e6c1e 	bne	r2,zero,15f1c <__alt_data_end+0xfc015f1c>
   1656c:	4080004c 	andi	r2,r8,1
   16570:	103e6a26 	beq	r2,zero,15f1c <__alt_data_end+0xfc015f1c>
   16574:	003e6606 	br	15f10 <__alt_data_end+0xfc015f10>
   16578:	d8c00317 	ldw	r3,12(sp)
   1657c:	00800084 	movi	r2,2
   16580:	10c02916 	blt	r2,r3,16628 <_dtoa_r+0x167c>
   16584:	d9000c17 	ldw	r4,48(sp)
   16588:	003e8806 	br	15fac <__alt_data_end+0xfc015fac>
   1658c:	04000084 	movi	r16,2
   16590:	003b9d06 	br	15408 <__alt_data_end+0xfc015408>
   16594:	d9001317 	ldw	r4,76(sp)
   16598:	d9000515 	stw	r4,20(sp)
   1659c:	003cd606 	br	158f8 <__alt_data_end+0xfc0158f8>
   165a0:	d8801317 	ldw	r2,76(sp)
   165a4:	d8800515 	stw	r2,20(sp)
   165a8:	003c2a06 	br	15654 <__alt_data_end+0xfc015654>
   165ac:	d9800317 	ldw	r6,12(sp)
   165b0:	00800084 	movi	r2,2
   165b4:	11801516 	blt	r2,r6,1660c <_dtoa_r+0x1660>
   165b8:	d9c00c17 	ldw	r7,48(sp)
   165bc:	d9c00615 	stw	r7,24(sp)
   165c0:	003df706 	br	15da0 <__alt_data_end+0xfc015da0>
   165c4:	193d3926 	beq	r3,r4,15aac <__alt_data_end+0xfc015aac>
   165c8:	00c00f04 	movi	r3,60
   165cc:	1885c83a 	sub	r2,r3,r2
   165d0:	003ddf06 	br	15d50 <__alt_data_end+0xfc015d50>
   165d4:	e009883a 	mov	r4,fp
   165d8:	e0001115 	stw	zero,68(fp)
   165dc:	000b883a 	mov	r5,zero
   165e0:	0017be80 	call	17be8 <_Balloc>
   165e4:	d8800715 	stw	r2,28(sp)
   165e8:	d8c00717 	ldw	r3,28(sp)
   165ec:	00bfffc4 	movi	r2,-1
   165f0:	01000044 	movi	r4,1
   165f4:	d8800c15 	stw	r2,48(sp)
   165f8:	e0c01015 	stw	r3,64(fp)
   165fc:	d9000b15 	stw	r4,44(sp)
   16600:	d8800615 	stw	r2,24(sp)
   16604:	d8002215 	stw	zero,136(sp)
   16608:	003c4106 	br	15710 <__alt_data_end+0xfc015710>
   1660c:	d8c00c17 	ldw	r3,48(sp)
   16610:	d8c00615 	stw	r3,24(sp)
   16614:	003e7006 	br	15fd8 <__alt_data_end+0xfc015fd8>
   16618:	04400044 	movi	r17,1
   1661c:	003b2006 	br	152a0 <__alt_data_end+0xfc0152a0>
   16620:	000b883a 	mov	r5,zero
   16624:	003b3d06 	br	1531c <__alt_data_end+0xfc01531c>
   16628:	d8800c17 	ldw	r2,48(sp)
   1662c:	d8800615 	stw	r2,24(sp)
   16630:	003e6906 	br	15fd8 <__alt_data_end+0xfc015fd8>

00016634 <__sflush_r>:
   16634:	2880030b 	ldhu	r2,12(r5)
   16638:	defffb04 	addi	sp,sp,-20
   1663c:	dcc00315 	stw	r19,12(sp)
   16640:	dc400115 	stw	r17,4(sp)
   16644:	dfc00415 	stw	ra,16(sp)
   16648:	dc800215 	stw	r18,8(sp)
   1664c:	dc000015 	stw	r16,0(sp)
   16650:	10c0020c 	andi	r3,r2,8
   16654:	2823883a 	mov	r17,r5
   16658:	2027883a 	mov	r19,r4
   1665c:	1800311e 	bne	r3,zero,16724 <__sflush_r+0xf0>
   16660:	28c00117 	ldw	r3,4(r5)
   16664:	10820014 	ori	r2,r2,2048
   16668:	2880030d 	sth	r2,12(r5)
   1666c:	00c04b0e 	bge	zero,r3,1679c <__sflush_r+0x168>
   16670:	8a000a17 	ldw	r8,40(r17)
   16674:	40002326 	beq	r8,zero,16704 <__sflush_r+0xd0>
   16678:	9c000017 	ldw	r16,0(r19)
   1667c:	10c4000c 	andi	r3,r2,4096
   16680:	98000015 	stw	zero,0(r19)
   16684:	18004826 	beq	r3,zero,167a8 <__sflush_r+0x174>
   16688:	89801417 	ldw	r6,80(r17)
   1668c:	10c0010c 	andi	r3,r2,4
   16690:	18000626 	beq	r3,zero,166ac <__sflush_r+0x78>
   16694:	88c00117 	ldw	r3,4(r17)
   16698:	88800c17 	ldw	r2,48(r17)
   1669c:	30cdc83a 	sub	r6,r6,r3
   166a0:	10000226 	beq	r2,zero,166ac <__sflush_r+0x78>
   166a4:	88800f17 	ldw	r2,60(r17)
   166a8:	308dc83a 	sub	r6,r6,r2
   166ac:	89400717 	ldw	r5,28(r17)
   166b0:	000f883a 	mov	r7,zero
   166b4:	9809883a 	mov	r4,r19
   166b8:	403ee83a 	callr	r8
   166bc:	00ffffc4 	movi	r3,-1
   166c0:	10c04426 	beq	r2,r3,167d4 <__sflush_r+0x1a0>
   166c4:	88c0030b 	ldhu	r3,12(r17)
   166c8:	89000417 	ldw	r4,16(r17)
   166cc:	88000115 	stw	zero,4(r17)
   166d0:	197dffcc 	andi	r5,r3,63487
   166d4:	8940030d 	sth	r5,12(r17)
   166d8:	89000015 	stw	r4,0(r17)
   166dc:	18c4000c 	andi	r3,r3,4096
   166e0:	18002c1e 	bne	r3,zero,16794 <__sflush_r+0x160>
   166e4:	89400c17 	ldw	r5,48(r17)
   166e8:	9c000015 	stw	r16,0(r19)
   166ec:	28000526 	beq	r5,zero,16704 <__sflush_r+0xd0>
   166f0:	88801004 	addi	r2,r17,64
   166f4:	28800226 	beq	r5,r2,16700 <__sflush_r+0xcc>
   166f8:	9809883a 	mov	r4,r19
   166fc:	0016db00 	call	16db0 <_free_r>
   16700:	88000c15 	stw	zero,48(r17)
   16704:	0005883a 	mov	r2,zero
   16708:	dfc00417 	ldw	ra,16(sp)
   1670c:	dcc00317 	ldw	r19,12(sp)
   16710:	dc800217 	ldw	r18,8(sp)
   16714:	dc400117 	ldw	r17,4(sp)
   16718:	dc000017 	ldw	r16,0(sp)
   1671c:	dec00504 	addi	sp,sp,20
   16720:	f800283a 	ret
   16724:	2c800417 	ldw	r18,16(r5)
   16728:	903ff626 	beq	r18,zero,16704 <__alt_data_end+0xfc016704>
   1672c:	2c000017 	ldw	r16,0(r5)
   16730:	108000cc 	andi	r2,r2,3
   16734:	2c800015 	stw	r18,0(r5)
   16738:	84a1c83a 	sub	r16,r16,r18
   1673c:	1000131e 	bne	r2,zero,1678c <__sflush_r+0x158>
   16740:	28800517 	ldw	r2,20(r5)
   16744:	88800215 	stw	r2,8(r17)
   16748:	04000316 	blt	zero,r16,16758 <__sflush_r+0x124>
   1674c:	003fed06 	br	16704 <__alt_data_end+0xfc016704>
   16750:	90a5883a 	add	r18,r18,r2
   16754:	043feb0e 	bge	zero,r16,16704 <__alt_data_end+0xfc016704>
   16758:	88800917 	ldw	r2,36(r17)
   1675c:	89400717 	ldw	r5,28(r17)
   16760:	800f883a 	mov	r7,r16
   16764:	900d883a 	mov	r6,r18
   16768:	9809883a 	mov	r4,r19
   1676c:	103ee83a 	callr	r2
   16770:	80a1c83a 	sub	r16,r16,r2
   16774:	00bff616 	blt	zero,r2,16750 <__alt_data_end+0xfc016750>
   16778:	88c0030b 	ldhu	r3,12(r17)
   1677c:	00bfffc4 	movi	r2,-1
   16780:	18c01014 	ori	r3,r3,64
   16784:	88c0030d 	sth	r3,12(r17)
   16788:	003fdf06 	br	16708 <__alt_data_end+0xfc016708>
   1678c:	0005883a 	mov	r2,zero
   16790:	003fec06 	br	16744 <__alt_data_end+0xfc016744>
   16794:	88801415 	stw	r2,80(r17)
   16798:	003fd206 	br	166e4 <__alt_data_end+0xfc0166e4>
   1679c:	28c00f17 	ldw	r3,60(r5)
   167a0:	00ffb316 	blt	zero,r3,16670 <__alt_data_end+0xfc016670>
   167a4:	003fd706 	br	16704 <__alt_data_end+0xfc016704>
   167a8:	89400717 	ldw	r5,28(r17)
   167ac:	000d883a 	mov	r6,zero
   167b0:	01c00044 	movi	r7,1
   167b4:	9809883a 	mov	r4,r19
   167b8:	403ee83a 	callr	r8
   167bc:	100d883a 	mov	r6,r2
   167c0:	00bfffc4 	movi	r2,-1
   167c4:	30801426 	beq	r6,r2,16818 <__sflush_r+0x1e4>
   167c8:	8880030b 	ldhu	r2,12(r17)
   167cc:	8a000a17 	ldw	r8,40(r17)
   167d0:	003fae06 	br	1668c <__alt_data_end+0xfc01668c>
   167d4:	98c00017 	ldw	r3,0(r19)
   167d8:	183fba26 	beq	r3,zero,166c4 <__alt_data_end+0xfc0166c4>
   167dc:	01000744 	movi	r4,29
   167e0:	19000626 	beq	r3,r4,167fc <__sflush_r+0x1c8>
   167e4:	01000584 	movi	r4,22
   167e8:	19000426 	beq	r3,r4,167fc <__sflush_r+0x1c8>
   167ec:	88c0030b 	ldhu	r3,12(r17)
   167f0:	18c01014 	ori	r3,r3,64
   167f4:	88c0030d 	sth	r3,12(r17)
   167f8:	003fc306 	br	16708 <__alt_data_end+0xfc016708>
   167fc:	8880030b 	ldhu	r2,12(r17)
   16800:	88c00417 	ldw	r3,16(r17)
   16804:	88000115 	stw	zero,4(r17)
   16808:	10bdffcc 	andi	r2,r2,63487
   1680c:	8880030d 	sth	r2,12(r17)
   16810:	88c00015 	stw	r3,0(r17)
   16814:	003fb306 	br	166e4 <__alt_data_end+0xfc0166e4>
   16818:	98800017 	ldw	r2,0(r19)
   1681c:	103fea26 	beq	r2,zero,167c8 <__alt_data_end+0xfc0167c8>
   16820:	00c00744 	movi	r3,29
   16824:	10c00226 	beq	r2,r3,16830 <__sflush_r+0x1fc>
   16828:	00c00584 	movi	r3,22
   1682c:	10c0031e 	bne	r2,r3,1683c <__sflush_r+0x208>
   16830:	9c000015 	stw	r16,0(r19)
   16834:	0005883a 	mov	r2,zero
   16838:	003fb306 	br	16708 <__alt_data_end+0xfc016708>
   1683c:	88c0030b 	ldhu	r3,12(r17)
   16840:	3005883a 	mov	r2,r6
   16844:	18c01014 	ori	r3,r3,64
   16848:	88c0030d 	sth	r3,12(r17)
   1684c:	003fae06 	br	16708 <__alt_data_end+0xfc016708>

00016850 <_fflush_r>:
   16850:	defffd04 	addi	sp,sp,-12
   16854:	dc000115 	stw	r16,4(sp)
   16858:	dfc00215 	stw	ra,8(sp)
   1685c:	2021883a 	mov	r16,r4
   16860:	20000226 	beq	r4,zero,1686c <_fflush_r+0x1c>
   16864:	20800e17 	ldw	r2,56(r4)
   16868:	10000c26 	beq	r2,zero,1689c <_fflush_r+0x4c>
   1686c:	2880030f 	ldh	r2,12(r5)
   16870:	1000051e 	bne	r2,zero,16888 <_fflush_r+0x38>
   16874:	0005883a 	mov	r2,zero
   16878:	dfc00217 	ldw	ra,8(sp)
   1687c:	dc000117 	ldw	r16,4(sp)
   16880:	dec00304 	addi	sp,sp,12
   16884:	f800283a 	ret
   16888:	8009883a 	mov	r4,r16
   1688c:	dfc00217 	ldw	ra,8(sp)
   16890:	dc000117 	ldw	r16,4(sp)
   16894:	dec00304 	addi	sp,sp,12
   16898:	00166341 	jmpi	16634 <__sflush_r>
   1689c:	d9400015 	stw	r5,0(sp)
   168a0:	0016c3c0 	call	16c3c <__sinit>
   168a4:	d9400017 	ldw	r5,0(sp)
   168a8:	003ff006 	br	1686c <__alt_data_end+0xfc01686c>

000168ac <fflush>:
   168ac:	20000526 	beq	r4,zero,168c4 <fflush+0x18>
   168b0:	008000f4 	movhi	r2,3
   168b4:	10baf204 	addi	r2,r2,-5176
   168b8:	200b883a 	mov	r5,r4
   168bc:	11000017 	ldw	r4,0(r2)
   168c0:	00168501 	jmpi	16850 <_fflush_r>
   168c4:	008000f4 	movhi	r2,3
   168c8:	10baf104 	addi	r2,r2,-5180
   168cc:	11000017 	ldw	r4,0(r2)
   168d0:	01400074 	movhi	r5,1
   168d4:	295a1404 	addi	r5,r5,26704
   168d8:	001764c1 	jmpi	1764c <_fwalk_reent>

000168dc <__fp_unlock>:
   168dc:	0005883a 	mov	r2,zero
   168e0:	f800283a 	ret

000168e4 <_cleanup_r>:
   168e4:	014000b4 	movhi	r5,2
   168e8:	29711b04 	addi	r5,r5,-15252
   168ec:	001764c1 	jmpi	1764c <_fwalk_reent>

000168f0 <__sinit.part.1>:
   168f0:	defff704 	addi	sp,sp,-36
   168f4:	00c00074 	movhi	r3,1
   168f8:	dfc00815 	stw	ra,32(sp)
   168fc:	ddc00715 	stw	r23,28(sp)
   16900:	dd800615 	stw	r22,24(sp)
   16904:	dd400515 	stw	r21,20(sp)
   16908:	dd000415 	stw	r20,16(sp)
   1690c:	dcc00315 	stw	r19,12(sp)
   16910:	dc800215 	stw	r18,8(sp)
   16914:	dc400115 	stw	r17,4(sp)
   16918:	dc000015 	stw	r16,0(sp)
   1691c:	18da3904 	addi	r3,r3,26852
   16920:	24000117 	ldw	r16,4(r4)
   16924:	20c00f15 	stw	r3,60(r4)
   16928:	2080bb04 	addi	r2,r4,748
   1692c:	00c000c4 	movi	r3,3
   16930:	20c0b915 	stw	r3,740(r4)
   16934:	2080ba15 	stw	r2,744(r4)
   16938:	2000b815 	stw	zero,736(r4)
   1693c:	05c00204 	movi	r23,8
   16940:	00800104 	movi	r2,4
   16944:	2025883a 	mov	r18,r4
   16948:	b80d883a 	mov	r6,r23
   1694c:	81001704 	addi	r4,r16,92
   16950:	000b883a 	mov	r5,zero
   16954:	80000015 	stw	zero,0(r16)
   16958:	80000115 	stw	zero,4(r16)
   1695c:	80000215 	stw	zero,8(r16)
   16960:	8080030d 	sth	r2,12(r16)
   16964:	80001915 	stw	zero,100(r16)
   16968:	8000038d 	sth	zero,14(r16)
   1696c:	80000415 	stw	zero,16(r16)
   16970:	80000515 	stw	zero,20(r16)
   16974:	80000615 	stw	zero,24(r16)
   16978:	000fda00 	call	fda0 <memset>
   1697c:	058000b4 	movhi	r22,2
   16980:	94400217 	ldw	r17,8(r18)
   16984:	054000b4 	movhi	r21,2
   16988:	050000b4 	movhi	r20,2
   1698c:	04c000b4 	movhi	r19,2
   16990:	b5a4f804 	addi	r22,r22,-27680
   16994:	ad650f04 	addi	r21,r21,-27588
   16998:	a5252e04 	addi	r20,r20,-27464
   1699c:	9ce54504 	addi	r19,r19,-27372
   169a0:	85800815 	stw	r22,32(r16)
   169a4:	85400915 	stw	r21,36(r16)
   169a8:	85000a15 	stw	r20,40(r16)
   169ac:	84c00b15 	stw	r19,44(r16)
   169b0:	84000715 	stw	r16,28(r16)
   169b4:	00800284 	movi	r2,10
   169b8:	8880030d 	sth	r2,12(r17)
   169bc:	00800044 	movi	r2,1
   169c0:	b80d883a 	mov	r6,r23
   169c4:	89001704 	addi	r4,r17,92
   169c8:	000b883a 	mov	r5,zero
   169cc:	88000015 	stw	zero,0(r17)
   169d0:	88000115 	stw	zero,4(r17)
   169d4:	88000215 	stw	zero,8(r17)
   169d8:	88001915 	stw	zero,100(r17)
   169dc:	8880038d 	sth	r2,14(r17)
   169e0:	88000415 	stw	zero,16(r17)
   169e4:	88000515 	stw	zero,20(r17)
   169e8:	88000615 	stw	zero,24(r17)
   169ec:	000fda00 	call	fda0 <memset>
   169f0:	94000317 	ldw	r16,12(r18)
   169f4:	00800484 	movi	r2,18
   169f8:	8c400715 	stw	r17,28(r17)
   169fc:	8d800815 	stw	r22,32(r17)
   16a00:	8d400915 	stw	r21,36(r17)
   16a04:	8d000a15 	stw	r20,40(r17)
   16a08:	8cc00b15 	stw	r19,44(r17)
   16a0c:	8080030d 	sth	r2,12(r16)
   16a10:	00800084 	movi	r2,2
   16a14:	80000015 	stw	zero,0(r16)
   16a18:	80000115 	stw	zero,4(r16)
   16a1c:	80000215 	stw	zero,8(r16)
   16a20:	80001915 	stw	zero,100(r16)
   16a24:	8080038d 	sth	r2,14(r16)
   16a28:	80000415 	stw	zero,16(r16)
   16a2c:	80000515 	stw	zero,20(r16)
   16a30:	80000615 	stw	zero,24(r16)
   16a34:	b80d883a 	mov	r6,r23
   16a38:	000b883a 	mov	r5,zero
   16a3c:	81001704 	addi	r4,r16,92
   16a40:	000fda00 	call	fda0 <memset>
   16a44:	00800044 	movi	r2,1
   16a48:	84000715 	stw	r16,28(r16)
   16a4c:	85800815 	stw	r22,32(r16)
   16a50:	85400915 	stw	r21,36(r16)
   16a54:	85000a15 	stw	r20,40(r16)
   16a58:	84c00b15 	stw	r19,44(r16)
   16a5c:	90800e15 	stw	r2,56(r18)
   16a60:	dfc00817 	ldw	ra,32(sp)
   16a64:	ddc00717 	ldw	r23,28(sp)
   16a68:	dd800617 	ldw	r22,24(sp)
   16a6c:	dd400517 	ldw	r21,20(sp)
   16a70:	dd000417 	ldw	r20,16(sp)
   16a74:	dcc00317 	ldw	r19,12(sp)
   16a78:	dc800217 	ldw	r18,8(sp)
   16a7c:	dc400117 	ldw	r17,4(sp)
   16a80:	dc000017 	ldw	r16,0(sp)
   16a84:	dec00904 	addi	sp,sp,36
   16a88:	f800283a 	ret

00016a8c <__fp_lock>:
   16a8c:	0005883a 	mov	r2,zero
   16a90:	f800283a 	ret

00016a94 <__sfmoreglue>:
   16a94:	defffc04 	addi	sp,sp,-16
   16a98:	dc800215 	stw	r18,8(sp)
   16a9c:	2825883a 	mov	r18,r5
   16aa0:	dc000015 	stw	r16,0(sp)
   16aa4:	01401a04 	movi	r5,104
   16aa8:	2021883a 	mov	r16,r4
   16aac:	913fffc4 	addi	r4,r18,-1
   16ab0:	dfc00315 	stw	ra,12(sp)
   16ab4:	dc400115 	stw	r17,4(sp)
   16ab8:	000d8b80 	call	d8b8 <__mulsi3>
   16abc:	8009883a 	mov	r4,r16
   16ac0:	11401d04 	addi	r5,r2,116
   16ac4:	1023883a 	mov	r17,r2
   16ac8:	000f44c0 	call	f44c <_malloc_r>
   16acc:	1021883a 	mov	r16,r2
   16ad0:	10000726 	beq	r2,zero,16af0 <__sfmoreglue+0x5c>
   16ad4:	11000304 	addi	r4,r2,12
   16ad8:	10000015 	stw	zero,0(r2)
   16adc:	14800115 	stw	r18,4(r2)
   16ae0:	11000215 	stw	r4,8(r2)
   16ae4:	89801a04 	addi	r6,r17,104
   16ae8:	000b883a 	mov	r5,zero
   16aec:	000fda00 	call	fda0 <memset>
   16af0:	8005883a 	mov	r2,r16
   16af4:	dfc00317 	ldw	ra,12(sp)
   16af8:	dc800217 	ldw	r18,8(sp)
   16afc:	dc400117 	ldw	r17,4(sp)
   16b00:	dc000017 	ldw	r16,0(sp)
   16b04:	dec00404 	addi	sp,sp,16
   16b08:	f800283a 	ret

00016b0c <__sfp>:
   16b0c:	defffb04 	addi	sp,sp,-20
   16b10:	dc000015 	stw	r16,0(sp)
   16b14:	040000f4 	movhi	r16,3
   16b18:	843af104 	addi	r16,r16,-5180
   16b1c:	dcc00315 	stw	r19,12(sp)
   16b20:	2027883a 	mov	r19,r4
   16b24:	81000017 	ldw	r4,0(r16)
   16b28:	dfc00415 	stw	ra,16(sp)
   16b2c:	dc800215 	stw	r18,8(sp)
   16b30:	20800e17 	ldw	r2,56(r4)
   16b34:	dc400115 	stw	r17,4(sp)
   16b38:	1000021e 	bne	r2,zero,16b44 <__sfp+0x38>
   16b3c:	00168f00 	call	168f0 <__sinit.part.1>
   16b40:	81000017 	ldw	r4,0(r16)
   16b44:	2480b804 	addi	r18,r4,736
   16b48:	047fffc4 	movi	r17,-1
   16b4c:	91000117 	ldw	r4,4(r18)
   16b50:	94000217 	ldw	r16,8(r18)
   16b54:	213fffc4 	addi	r4,r4,-1
   16b58:	20000a16 	blt	r4,zero,16b84 <__sfp+0x78>
   16b5c:	8080030f 	ldh	r2,12(r16)
   16b60:	10000c26 	beq	r2,zero,16b94 <__sfp+0x88>
   16b64:	80c01d04 	addi	r3,r16,116
   16b68:	00000206 	br	16b74 <__sfp+0x68>
   16b6c:	18bfe60f 	ldh	r2,-104(r3)
   16b70:	10000826 	beq	r2,zero,16b94 <__sfp+0x88>
   16b74:	213fffc4 	addi	r4,r4,-1
   16b78:	1c3ffd04 	addi	r16,r3,-12
   16b7c:	18c01a04 	addi	r3,r3,104
   16b80:	247ffa1e 	bne	r4,r17,16b6c <__alt_data_end+0xfc016b6c>
   16b84:	90800017 	ldw	r2,0(r18)
   16b88:	10001d26 	beq	r2,zero,16c00 <__sfp+0xf4>
   16b8c:	1025883a 	mov	r18,r2
   16b90:	003fee06 	br	16b4c <__alt_data_end+0xfc016b4c>
   16b94:	00bfffc4 	movi	r2,-1
   16b98:	8080038d 	sth	r2,14(r16)
   16b9c:	00800044 	movi	r2,1
   16ba0:	8080030d 	sth	r2,12(r16)
   16ba4:	80001915 	stw	zero,100(r16)
   16ba8:	80000015 	stw	zero,0(r16)
   16bac:	80000215 	stw	zero,8(r16)
   16bb0:	80000115 	stw	zero,4(r16)
   16bb4:	80000415 	stw	zero,16(r16)
   16bb8:	80000515 	stw	zero,20(r16)
   16bbc:	80000615 	stw	zero,24(r16)
   16bc0:	01800204 	movi	r6,8
   16bc4:	000b883a 	mov	r5,zero
   16bc8:	81001704 	addi	r4,r16,92
   16bcc:	000fda00 	call	fda0 <memset>
   16bd0:	8005883a 	mov	r2,r16
   16bd4:	80000c15 	stw	zero,48(r16)
   16bd8:	80000d15 	stw	zero,52(r16)
   16bdc:	80001115 	stw	zero,68(r16)
   16be0:	80001215 	stw	zero,72(r16)
   16be4:	dfc00417 	ldw	ra,16(sp)
   16be8:	dcc00317 	ldw	r19,12(sp)
   16bec:	dc800217 	ldw	r18,8(sp)
   16bf0:	dc400117 	ldw	r17,4(sp)
   16bf4:	dc000017 	ldw	r16,0(sp)
   16bf8:	dec00504 	addi	sp,sp,20
   16bfc:	f800283a 	ret
   16c00:	01400104 	movi	r5,4
   16c04:	9809883a 	mov	r4,r19
   16c08:	0016a940 	call	16a94 <__sfmoreglue>
   16c0c:	90800015 	stw	r2,0(r18)
   16c10:	103fde1e 	bne	r2,zero,16b8c <__alt_data_end+0xfc016b8c>
   16c14:	00800304 	movi	r2,12
   16c18:	98800015 	stw	r2,0(r19)
   16c1c:	0005883a 	mov	r2,zero
   16c20:	003ff006 	br	16be4 <__alt_data_end+0xfc016be4>

00016c24 <_cleanup>:
   16c24:	008000f4 	movhi	r2,3
   16c28:	10baf104 	addi	r2,r2,-5180
   16c2c:	11000017 	ldw	r4,0(r2)
   16c30:	014000b4 	movhi	r5,2
   16c34:	29711b04 	addi	r5,r5,-15252
   16c38:	001764c1 	jmpi	1764c <_fwalk_reent>

00016c3c <__sinit>:
   16c3c:	20800e17 	ldw	r2,56(r4)
   16c40:	10000126 	beq	r2,zero,16c48 <__sinit+0xc>
   16c44:	f800283a 	ret
   16c48:	00168f01 	jmpi	168f0 <__sinit.part.1>

00016c4c <__sfp_lock_acquire>:
   16c4c:	f800283a 	ret

00016c50 <__sfp_lock_release>:
   16c50:	f800283a 	ret

00016c54 <__sinit_lock_acquire>:
   16c54:	f800283a 	ret

00016c58 <__sinit_lock_release>:
   16c58:	f800283a 	ret

00016c5c <__fp_lock_all>:
   16c5c:	008000f4 	movhi	r2,3
   16c60:	10baf204 	addi	r2,r2,-5176
   16c64:	11000017 	ldw	r4,0(r2)
   16c68:	01400074 	movhi	r5,1
   16c6c:	295aa304 	addi	r5,r5,27276
   16c70:	00175881 	jmpi	17588 <_fwalk>

00016c74 <__fp_unlock_all>:
   16c74:	008000f4 	movhi	r2,3
   16c78:	10baf204 	addi	r2,r2,-5176
   16c7c:	11000017 	ldw	r4,0(r2)
   16c80:	01400074 	movhi	r5,1
   16c84:	295a3704 	addi	r5,r5,26844
   16c88:	00175881 	jmpi	17588 <_fwalk>

00016c8c <_malloc_trim_r>:
   16c8c:	defffb04 	addi	sp,sp,-20
   16c90:	dcc00315 	stw	r19,12(sp)
   16c94:	04c000f4 	movhi	r19,3
   16c98:	dc800215 	stw	r18,8(sp)
   16c9c:	dc400115 	stw	r17,4(sp)
   16ca0:	dc000015 	stw	r16,0(sp)
   16ca4:	dfc00415 	stw	ra,16(sp)
   16ca8:	2821883a 	mov	r16,r5
   16cac:	9cef8f04 	addi	r19,r19,-16836
   16cb0:	2025883a 	mov	r18,r4
   16cb4:	002062c0 	call	2062c <__malloc_lock>
   16cb8:	98800217 	ldw	r2,8(r19)
   16cbc:	14400117 	ldw	r17,4(r2)
   16cc0:	00bfff04 	movi	r2,-4
   16cc4:	88a2703a 	and	r17,r17,r2
   16cc8:	8c21c83a 	sub	r16,r17,r16
   16ccc:	8403fbc4 	addi	r16,r16,4079
   16cd0:	8020d33a 	srli	r16,r16,12
   16cd4:	0083ffc4 	movi	r2,4095
   16cd8:	843fffc4 	addi	r16,r16,-1
   16cdc:	8020933a 	slli	r16,r16,12
   16ce0:	1400060e 	bge	r2,r16,16cfc <_malloc_trim_r+0x70>
   16ce4:	000b883a 	mov	r5,zero
   16ce8:	9009883a 	mov	r4,r18
   16cec:	00100280 	call	10028 <_sbrk_r>
   16cf0:	98c00217 	ldw	r3,8(r19)
   16cf4:	1c47883a 	add	r3,r3,r17
   16cf8:	10c00a26 	beq	r2,r3,16d24 <_malloc_trim_r+0x98>
   16cfc:	9009883a 	mov	r4,r18
   16d00:	00206500 	call	20650 <__malloc_unlock>
   16d04:	0005883a 	mov	r2,zero
   16d08:	dfc00417 	ldw	ra,16(sp)
   16d0c:	dcc00317 	ldw	r19,12(sp)
   16d10:	dc800217 	ldw	r18,8(sp)
   16d14:	dc400117 	ldw	r17,4(sp)
   16d18:	dc000017 	ldw	r16,0(sp)
   16d1c:	dec00504 	addi	sp,sp,20
   16d20:	f800283a 	ret
   16d24:	040bc83a 	sub	r5,zero,r16
   16d28:	9009883a 	mov	r4,r18
   16d2c:	00100280 	call	10028 <_sbrk_r>
   16d30:	00ffffc4 	movi	r3,-1
   16d34:	10c00d26 	beq	r2,r3,16d6c <_malloc_trim_r+0xe0>
   16d38:	00c000f4 	movhi	r3,3
   16d3c:	18c7e404 	addi	r3,r3,8080
   16d40:	18800017 	ldw	r2,0(r3)
   16d44:	99000217 	ldw	r4,8(r19)
   16d48:	8c23c83a 	sub	r17,r17,r16
   16d4c:	8c400054 	ori	r17,r17,1
   16d50:	1421c83a 	sub	r16,r2,r16
   16d54:	24400115 	stw	r17,4(r4)
   16d58:	9009883a 	mov	r4,r18
   16d5c:	1c000015 	stw	r16,0(r3)
   16d60:	00206500 	call	20650 <__malloc_unlock>
   16d64:	00800044 	movi	r2,1
   16d68:	003fe706 	br	16d08 <__alt_data_end+0xfc016d08>
   16d6c:	000b883a 	mov	r5,zero
   16d70:	9009883a 	mov	r4,r18
   16d74:	00100280 	call	10028 <_sbrk_r>
   16d78:	99000217 	ldw	r4,8(r19)
   16d7c:	014003c4 	movi	r5,15
   16d80:	1107c83a 	sub	r3,r2,r4
   16d84:	28ffdd0e 	bge	r5,r3,16cfc <__alt_data_end+0xfc016cfc>
   16d88:	014000f4 	movhi	r5,3
   16d8c:	297af304 	addi	r5,r5,-5172
   16d90:	29400017 	ldw	r5,0(r5)
   16d94:	18c00054 	ori	r3,r3,1
   16d98:	20c00115 	stw	r3,4(r4)
   16d9c:	00c000f4 	movhi	r3,3
   16da0:	1145c83a 	sub	r2,r2,r5
   16da4:	18c7e404 	addi	r3,r3,8080
   16da8:	18800015 	stw	r2,0(r3)
   16dac:	003fd306 	br	16cfc <__alt_data_end+0xfc016cfc>

00016db0 <_free_r>:
   16db0:	28004126 	beq	r5,zero,16eb8 <_free_r+0x108>
   16db4:	defffd04 	addi	sp,sp,-12
   16db8:	dc400115 	stw	r17,4(sp)
   16dbc:	dc000015 	stw	r16,0(sp)
   16dc0:	2023883a 	mov	r17,r4
   16dc4:	2821883a 	mov	r16,r5
   16dc8:	dfc00215 	stw	ra,8(sp)
   16dcc:	002062c0 	call	2062c <__malloc_lock>
   16dd0:	81ffff17 	ldw	r7,-4(r16)
   16dd4:	00bfff84 	movi	r2,-2
   16dd8:	010000f4 	movhi	r4,3
   16ddc:	81bffe04 	addi	r6,r16,-8
   16de0:	3884703a 	and	r2,r7,r2
   16de4:	212f8f04 	addi	r4,r4,-16836
   16de8:	308b883a 	add	r5,r6,r2
   16dec:	2a400117 	ldw	r9,4(r5)
   16df0:	22000217 	ldw	r8,8(r4)
   16df4:	00ffff04 	movi	r3,-4
   16df8:	48c6703a 	and	r3,r9,r3
   16dfc:	2a005726 	beq	r5,r8,16f5c <_free_r+0x1ac>
   16e00:	28c00115 	stw	r3,4(r5)
   16e04:	39c0004c 	andi	r7,r7,1
   16e08:	3800091e 	bne	r7,zero,16e30 <_free_r+0x80>
   16e0c:	823ffe17 	ldw	r8,-8(r16)
   16e10:	22400204 	addi	r9,r4,8
   16e14:	320dc83a 	sub	r6,r6,r8
   16e18:	31c00217 	ldw	r7,8(r6)
   16e1c:	1205883a 	add	r2,r2,r8
   16e20:	3a406526 	beq	r7,r9,16fb8 <_free_r+0x208>
   16e24:	32000317 	ldw	r8,12(r6)
   16e28:	3a000315 	stw	r8,12(r7)
   16e2c:	41c00215 	stw	r7,8(r8)
   16e30:	28cf883a 	add	r7,r5,r3
   16e34:	39c00117 	ldw	r7,4(r7)
   16e38:	39c0004c 	andi	r7,r7,1
   16e3c:	38003a26 	beq	r7,zero,16f28 <_free_r+0x178>
   16e40:	10c00054 	ori	r3,r2,1
   16e44:	30c00115 	stw	r3,4(r6)
   16e48:	3087883a 	add	r3,r6,r2
   16e4c:	18800015 	stw	r2,0(r3)
   16e50:	00c07fc4 	movi	r3,511
   16e54:	18801936 	bltu	r3,r2,16ebc <_free_r+0x10c>
   16e58:	1004d0fa 	srli	r2,r2,3
   16e5c:	01c00044 	movi	r7,1
   16e60:	21400117 	ldw	r5,4(r4)
   16e64:	10c00044 	addi	r3,r2,1
   16e68:	18c7883a 	add	r3,r3,r3
   16e6c:	1005d0ba 	srai	r2,r2,2
   16e70:	18c7883a 	add	r3,r3,r3
   16e74:	18c7883a 	add	r3,r3,r3
   16e78:	1907883a 	add	r3,r3,r4
   16e7c:	3884983a 	sll	r2,r7,r2
   16e80:	19c00017 	ldw	r7,0(r3)
   16e84:	1a3ffe04 	addi	r8,r3,-8
   16e88:	1144b03a 	or	r2,r2,r5
   16e8c:	32000315 	stw	r8,12(r6)
   16e90:	31c00215 	stw	r7,8(r6)
   16e94:	20800115 	stw	r2,4(r4)
   16e98:	19800015 	stw	r6,0(r3)
   16e9c:	39800315 	stw	r6,12(r7)
   16ea0:	8809883a 	mov	r4,r17
   16ea4:	dfc00217 	ldw	ra,8(sp)
   16ea8:	dc400117 	ldw	r17,4(sp)
   16eac:	dc000017 	ldw	r16,0(sp)
   16eb0:	dec00304 	addi	sp,sp,12
   16eb4:	00206501 	jmpi	20650 <__malloc_unlock>
   16eb8:	f800283a 	ret
   16ebc:	100ad27a 	srli	r5,r2,9
   16ec0:	00c00104 	movi	r3,4
   16ec4:	19404a36 	bltu	r3,r5,16ff0 <_free_r+0x240>
   16ec8:	100ad1ba 	srli	r5,r2,6
   16ecc:	28c00e44 	addi	r3,r5,57
   16ed0:	18c7883a 	add	r3,r3,r3
   16ed4:	29400e04 	addi	r5,r5,56
   16ed8:	18c7883a 	add	r3,r3,r3
   16edc:	18c7883a 	add	r3,r3,r3
   16ee0:	1909883a 	add	r4,r3,r4
   16ee4:	20c00017 	ldw	r3,0(r4)
   16ee8:	01c000f4 	movhi	r7,3
   16eec:	213ffe04 	addi	r4,r4,-8
   16ef0:	39ef8f04 	addi	r7,r7,-16836
   16ef4:	20c04426 	beq	r4,r3,17008 <_free_r+0x258>
   16ef8:	01ffff04 	movi	r7,-4
   16efc:	19400117 	ldw	r5,4(r3)
   16f00:	29ca703a 	and	r5,r5,r7
   16f04:	1140022e 	bgeu	r2,r5,16f10 <_free_r+0x160>
   16f08:	18c00217 	ldw	r3,8(r3)
   16f0c:	20fffb1e 	bne	r4,r3,16efc <__alt_data_end+0xfc016efc>
   16f10:	19000317 	ldw	r4,12(r3)
   16f14:	31000315 	stw	r4,12(r6)
   16f18:	30c00215 	stw	r3,8(r6)
   16f1c:	21800215 	stw	r6,8(r4)
   16f20:	19800315 	stw	r6,12(r3)
   16f24:	003fde06 	br	16ea0 <__alt_data_end+0xfc016ea0>
   16f28:	29c00217 	ldw	r7,8(r5)
   16f2c:	10c5883a 	add	r2,r2,r3
   16f30:	00c000f4 	movhi	r3,3
   16f34:	18ef9104 	addi	r3,r3,-16828
   16f38:	38c03b26 	beq	r7,r3,17028 <_free_r+0x278>
   16f3c:	2a000317 	ldw	r8,12(r5)
   16f40:	11400054 	ori	r5,r2,1
   16f44:	3087883a 	add	r3,r6,r2
   16f48:	3a000315 	stw	r8,12(r7)
   16f4c:	41c00215 	stw	r7,8(r8)
   16f50:	31400115 	stw	r5,4(r6)
   16f54:	18800015 	stw	r2,0(r3)
   16f58:	003fbd06 	br	16e50 <__alt_data_end+0xfc016e50>
   16f5c:	39c0004c 	andi	r7,r7,1
   16f60:	10c5883a 	add	r2,r2,r3
   16f64:	3800071e 	bne	r7,zero,16f84 <_free_r+0x1d4>
   16f68:	81fffe17 	ldw	r7,-8(r16)
   16f6c:	31cdc83a 	sub	r6,r6,r7
   16f70:	30c00317 	ldw	r3,12(r6)
   16f74:	31400217 	ldw	r5,8(r6)
   16f78:	11c5883a 	add	r2,r2,r7
   16f7c:	28c00315 	stw	r3,12(r5)
   16f80:	19400215 	stw	r5,8(r3)
   16f84:	10c00054 	ori	r3,r2,1
   16f88:	30c00115 	stw	r3,4(r6)
   16f8c:	00c000f4 	movhi	r3,3
   16f90:	18faf404 	addi	r3,r3,-5168
   16f94:	18c00017 	ldw	r3,0(r3)
   16f98:	21800215 	stw	r6,8(r4)
   16f9c:	10ffc036 	bltu	r2,r3,16ea0 <__alt_data_end+0xfc016ea0>
   16fa0:	008000f4 	movhi	r2,3
   16fa4:	10878c04 	addi	r2,r2,7728
   16fa8:	11400017 	ldw	r5,0(r2)
   16fac:	8809883a 	mov	r4,r17
   16fb0:	0016c8c0 	call	16c8c <_malloc_trim_r>
   16fb4:	003fba06 	br	16ea0 <__alt_data_end+0xfc016ea0>
   16fb8:	28c9883a 	add	r4,r5,r3
   16fbc:	21000117 	ldw	r4,4(r4)
   16fc0:	2100004c 	andi	r4,r4,1
   16fc4:	2000391e 	bne	r4,zero,170ac <_free_r+0x2fc>
   16fc8:	29c00217 	ldw	r7,8(r5)
   16fcc:	29000317 	ldw	r4,12(r5)
   16fd0:	1885883a 	add	r2,r3,r2
   16fd4:	10c00054 	ori	r3,r2,1
   16fd8:	39000315 	stw	r4,12(r7)
   16fdc:	21c00215 	stw	r7,8(r4)
   16fe0:	30c00115 	stw	r3,4(r6)
   16fe4:	308d883a 	add	r6,r6,r2
   16fe8:	30800015 	stw	r2,0(r6)
   16fec:	003fac06 	br	16ea0 <__alt_data_end+0xfc016ea0>
   16ff0:	00c00504 	movi	r3,20
   16ff4:	19401536 	bltu	r3,r5,1704c <_free_r+0x29c>
   16ff8:	28c01704 	addi	r3,r5,92
   16ffc:	18c7883a 	add	r3,r3,r3
   17000:	294016c4 	addi	r5,r5,91
   17004:	003fb406 	br	16ed8 <__alt_data_end+0xfc016ed8>
   17008:	280bd0ba 	srai	r5,r5,2
   1700c:	00c00044 	movi	r3,1
   17010:	38800117 	ldw	r2,4(r7)
   17014:	194a983a 	sll	r5,r3,r5
   17018:	2007883a 	mov	r3,r4
   1701c:	2884b03a 	or	r2,r5,r2
   17020:	38800115 	stw	r2,4(r7)
   17024:	003fbb06 	br	16f14 <__alt_data_end+0xfc016f14>
   17028:	21800515 	stw	r6,20(r4)
   1702c:	21800415 	stw	r6,16(r4)
   17030:	10c00054 	ori	r3,r2,1
   17034:	31c00315 	stw	r7,12(r6)
   17038:	31c00215 	stw	r7,8(r6)
   1703c:	30c00115 	stw	r3,4(r6)
   17040:	308d883a 	add	r6,r6,r2
   17044:	30800015 	stw	r2,0(r6)
   17048:	003f9506 	br	16ea0 <__alt_data_end+0xfc016ea0>
   1704c:	00c01504 	movi	r3,84
   17050:	19400536 	bltu	r3,r5,17068 <_free_r+0x2b8>
   17054:	100ad33a 	srli	r5,r2,12
   17058:	28c01bc4 	addi	r3,r5,111
   1705c:	18c7883a 	add	r3,r3,r3
   17060:	29401b84 	addi	r5,r5,110
   17064:	003f9c06 	br	16ed8 <__alt_data_end+0xfc016ed8>
   17068:	00c05504 	movi	r3,340
   1706c:	19400536 	bltu	r3,r5,17084 <_free_r+0x2d4>
   17070:	100ad3fa 	srli	r5,r2,15
   17074:	28c01e04 	addi	r3,r5,120
   17078:	18c7883a 	add	r3,r3,r3
   1707c:	29401dc4 	addi	r5,r5,119
   17080:	003f9506 	br	16ed8 <__alt_data_end+0xfc016ed8>
   17084:	00c15504 	movi	r3,1364
   17088:	19400536 	bltu	r3,r5,170a0 <_free_r+0x2f0>
   1708c:	100ad4ba 	srli	r5,r2,18
   17090:	28c01f44 	addi	r3,r5,125
   17094:	18c7883a 	add	r3,r3,r3
   17098:	29401f04 	addi	r5,r5,124
   1709c:	003f8e06 	br	16ed8 <__alt_data_end+0xfc016ed8>
   170a0:	00c03f84 	movi	r3,254
   170a4:	01401f84 	movi	r5,126
   170a8:	003f8b06 	br	16ed8 <__alt_data_end+0xfc016ed8>
   170ac:	10c00054 	ori	r3,r2,1
   170b0:	30c00115 	stw	r3,4(r6)
   170b4:	308d883a 	add	r6,r6,r2
   170b8:	30800015 	stw	r2,0(r6)
   170bc:	003f7806 	br	16ea0 <__alt_data_end+0xfc016ea0>

000170c0 <__sfvwrite_r>:
   170c0:	30800217 	ldw	r2,8(r6)
   170c4:	10006726 	beq	r2,zero,17264 <__sfvwrite_r+0x1a4>
   170c8:	28c0030b 	ldhu	r3,12(r5)
   170cc:	defff404 	addi	sp,sp,-48
   170d0:	dd400715 	stw	r21,28(sp)
   170d4:	dd000615 	stw	r20,24(sp)
   170d8:	dc000215 	stw	r16,8(sp)
   170dc:	dfc00b15 	stw	ra,44(sp)
   170e0:	df000a15 	stw	fp,40(sp)
   170e4:	ddc00915 	stw	r23,36(sp)
   170e8:	dd800815 	stw	r22,32(sp)
   170ec:	dcc00515 	stw	r19,20(sp)
   170f0:	dc800415 	stw	r18,16(sp)
   170f4:	dc400315 	stw	r17,12(sp)
   170f8:	1880020c 	andi	r2,r3,8
   170fc:	2821883a 	mov	r16,r5
   17100:	202b883a 	mov	r21,r4
   17104:	3029883a 	mov	r20,r6
   17108:	10002726 	beq	r2,zero,171a8 <__sfvwrite_r+0xe8>
   1710c:	28800417 	ldw	r2,16(r5)
   17110:	10002526 	beq	r2,zero,171a8 <__sfvwrite_r+0xe8>
   17114:	1880008c 	andi	r2,r3,2
   17118:	a4400017 	ldw	r17,0(r20)
   1711c:	10002a26 	beq	r2,zero,171c8 <__sfvwrite_r+0x108>
   17120:	05a00034 	movhi	r22,32768
   17124:	0027883a 	mov	r19,zero
   17128:	0025883a 	mov	r18,zero
   1712c:	b5bf0004 	addi	r22,r22,-1024
   17130:	980d883a 	mov	r6,r19
   17134:	a809883a 	mov	r4,r21
   17138:	90004626 	beq	r18,zero,17254 <__sfvwrite_r+0x194>
   1713c:	900f883a 	mov	r7,r18
   17140:	b480022e 	bgeu	r22,r18,1714c <__sfvwrite_r+0x8c>
   17144:	01e00034 	movhi	r7,32768
   17148:	39ff0004 	addi	r7,r7,-1024
   1714c:	80800917 	ldw	r2,36(r16)
   17150:	81400717 	ldw	r5,28(r16)
   17154:	103ee83a 	callr	r2
   17158:	00805a0e 	bge	zero,r2,172c4 <__sfvwrite_r+0x204>
   1715c:	a0c00217 	ldw	r3,8(r20)
   17160:	98a7883a 	add	r19,r19,r2
   17164:	90a5c83a 	sub	r18,r18,r2
   17168:	1885c83a 	sub	r2,r3,r2
   1716c:	a0800215 	stw	r2,8(r20)
   17170:	103fef1e 	bne	r2,zero,17130 <__alt_data_end+0xfc017130>
   17174:	0005883a 	mov	r2,zero
   17178:	dfc00b17 	ldw	ra,44(sp)
   1717c:	df000a17 	ldw	fp,40(sp)
   17180:	ddc00917 	ldw	r23,36(sp)
   17184:	dd800817 	ldw	r22,32(sp)
   17188:	dd400717 	ldw	r21,28(sp)
   1718c:	dd000617 	ldw	r20,24(sp)
   17190:	dcc00517 	ldw	r19,20(sp)
   17194:	dc800417 	ldw	r18,16(sp)
   17198:	dc400317 	ldw	r17,12(sp)
   1719c:	dc000217 	ldw	r16,8(sp)
   171a0:	dec00c04 	addi	sp,sp,48
   171a4:	f800283a 	ret
   171a8:	800b883a 	mov	r5,r16
   171ac:	a809883a 	mov	r4,r21
   171b0:	0014c300 	call	14c30 <__swsetup_r>
   171b4:	1000ee1e 	bne	r2,zero,17570 <__sfvwrite_r+0x4b0>
   171b8:	80c0030b 	ldhu	r3,12(r16)
   171bc:	a4400017 	ldw	r17,0(r20)
   171c0:	1880008c 	andi	r2,r3,2
   171c4:	103fd61e 	bne	r2,zero,17120 <__alt_data_end+0xfc017120>
   171c8:	1880004c 	andi	r2,r3,1
   171cc:	1000421e 	bne	r2,zero,172d8 <__sfvwrite_r+0x218>
   171d0:	0039883a 	mov	fp,zero
   171d4:	0025883a 	mov	r18,zero
   171d8:	90001a26 	beq	r18,zero,17244 <__sfvwrite_r+0x184>
   171dc:	1880800c 	andi	r2,r3,512
   171e0:	84c00217 	ldw	r19,8(r16)
   171e4:	10002126 	beq	r2,zero,1726c <__sfvwrite_r+0x1ac>
   171e8:	982f883a 	mov	r23,r19
   171ec:	94c09636 	bltu	r18,r19,17448 <__sfvwrite_r+0x388>
   171f0:	1881200c 	andi	r2,r3,1152
   171f4:	1000a11e 	bne	r2,zero,1747c <__sfvwrite_r+0x3bc>
   171f8:	81000017 	ldw	r4,0(r16)
   171fc:	b80d883a 	mov	r6,r23
   17200:	e00b883a 	mov	r5,fp
   17204:	0017a8c0 	call	17a8c <memmove>
   17208:	80c00217 	ldw	r3,8(r16)
   1720c:	81000017 	ldw	r4,0(r16)
   17210:	9005883a 	mov	r2,r18
   17214:	1ce7c83a 	sub	r19,r3,r19
   17218:	25cf883a 	add	r7,r4,r23
   1721c:	84c00215 	stw	r19,8(r16)
   17220:	81c00015 	stw	r7,0(r16)
   17224:	a0c00217 	ldw	r3,8(r20)
   17228:	e0b9883a 	add	fp,fp,r2
   1722c:	90a5c83a 	sub	r18,r18,r2
   17230:	18a7c83a 	sub	r19,r3,r2
   17234:	a4c00215 	stw	r19,8(r20)
   17238:	983fce26 	beq	r19,zero,17174 <__alt_data_end+0xfc017174>
   1723c:	80c0030b 	ldhu	r3,12(r16)
   17240:	903fe61e 	bne	r18,zero,171dc <__alt_data_end+0xfc0171dc>
   17244:	8f000017 	ldw	fp,0(r17)
   17248:	8c800117 	ldw	r18,4(r17)
   1724c:	8c400204 	addi	r17,r17,8
   17250:	003fe106 	br	171d8 <__alt_data_end+0xfc0171d8>
   17254:	8cc00017 	ldw	r19,0(r17)
   17258:	8c800117 	ldw	r18,4(r17)
   1725c:	8c400204 	addi	r17,r17,8
   17260:	003fb306 	br	17130 <__alt_data_end+0xfc017130>
   17264:	0005883a 	mov	r2,zero
   17268:	f800283a 	ret
   1726c:	81000017 	ldw	r4,0(r16)
   17270:	80800417 	ldw	r2,16(r16)
   17274:	11005a36 	bltu	r2,r4,173e0 <__sfvwrite_r+0x320>
   17278:	85c00517 	ldw	r23,20(r16)
   1727c:	95c05836 	bltu	r18,r23,173e0 <__sfvwrite_r+0x320>
   17280:	00a00034 	movhi	r2,32768
   17284:	10bfffc4 	addi	r2,r2,-1
   17288:	9009883a 	mov	r4,r18
   1728c:	1480012e 	bgeu	r2,r18,17294 <__sfvwrite_r+0x1d4>
   17290:	1009883a 	mov	r4,r2
   17294:	b80b883a 	mov	r5,r23
   17298:	000d7040 	call	d704 <__divsi3>
   1729c:	b80b883a 	mov	r5,r23
   172a0:	1009883a 	mov	r4,r2
   172a4:	000d8b80 	call	d8b8 <__mulsi3>
   172a8:	81400717 	ldw	r5,28(r16)
   172ac:	80c00917 	ldw	r3,36(r16)
   172b0:	100f883a 	mov	r7,r2
   172b4:	e00d883a 	mov	r6,fp
   172b8:	a809883a 	mov	r4,r21
   172bc:	183ee83a 	callr	r3
   172c0:	00bfd816 	blt	zero,r2,17224 <__alt_data_end+0xfc017224>
   172c4:	8080030b 	ldhu	r2,12(r16)
   172c8:	10801014 	ori	r2,r2,64
   172cc:	8080030d 	sth	r2,12(r16)
   172d0:	00bfffc4 	movi	r2,-1
   172d4:	003fa806 	br	17178 <__alt_data_end+0xfc017178>
   172d8:	0027883a 	mov	r19,zero
   172dc:	0011883a 	mov	r8,zero
   172e0:	0039883a 	mov	fp,zero
   172e4:	0025883a 	mov	r18,zero
   172e8:	90001f26 	beq	r18,zero,17368 <__sfvwrite_r+0x2a8>
   172ec:	40005a26 	beq	r8,zero,17458 <__sfvwrite_r+0x398>
   172f0:	982d883a 	mov	r22,r19
   172f4:	94c0012e 	bgeu	r18,r19,172fc <__sfvwrite_r+0x23c>
   172f8:	902d883a 	mov	r22,r18
   172fc:	81000017 	ldw	r4,0(r16)
   17300:	80800417 	ldw	r2,16(r16)
   17304:	b02f883a 	mov	r23,r22
   17308:	81c00517 	ldw	r7,20(r16)
   1730c:	1100032e 	bgeu	r2,r4,1731c <__sfvwrite_r+0x25c>
   17310:	80c00217 	ldw	r3,8(r16)
   17314:	38c7883a 	add	r3,r7,r3
   17318:	1d801816 	blt	r3,r22,1737c <__sfvwrite_r+0x2bc>
   1731c:	b1c03e16 	blt	r22,r7,17418 <__sfvwrite_r+0x358>
   17320:	80800917 	ldw	r2,36(r16)
   17324:	81400717 	ldw	r5,28(r16)
   17328:	e00d883a 	mov	r6,fp
   1732c:	da000115 	stw	r8,4(sp)
   17330:	a809883a 	mov	r4,r21
   17334:	103ee83a 	callr	r2
   17338:	102f883a 	mov	r23,r2
   1733c:	da000117 	ldw	r8,4(sp)
   17340:	00bfe00e 	bge	zero,r2,172c4 <__alt_data_end+0xfc0172c4>
   17344:	9de7c83a 	sub	r19,r19,r23
   17348:	98001f26 	beq	r19,zero,173c8 <__sfvwrite_r+0x308>
   1734c:	a0800217 	ldw	r2,8(r20)
   17350:	e5f9883a 	add	fp,fp,r23
   17354:	95e5c83a 	sub	r18,r18,r23
   17358:	15efc83a 	sub	r23,r2,r23
   1735c:	a5c00215 	stw	r23,8(r20)
   17360:	b83f8426 	beq	r23,zero,17174 <__alt_data_end+0xfc017174>
   17364:	903fe11e 	bne	r18,zero,172ec <__alt_data_end+0xfc0172ec>
   17368:	8f000017 	ldw	fp,0(r17)
   1736c:	8c800117 	ldw	r18,4(r17)
   17370:	0011883a 	mov	r8,zero
   17374:	8c400204 	addi	r17,r17,8
   17378:	003fdb06 	br	172e8 <__alt_data_end+0xfc0172e8>
   1737c:	180d883a 	mov	r6,r3
   17380:	e00b883a 	mov	r5,fp
   17384:	da000115 	stw	r8,4(sp)
   17388:	d8c00015 	stw	r3,0(sp)
   1738c:	0017a8c0 	call	17a8c <memmove>
   17390:	d8c00017 	ldw	r3,0(sp)
   17394:	80800017 	ldw	r2,0(r16)
   17398:	800b883a 	mov	r5,r16
   1739c:	a809883a 	mov	r4,r21
   173a0:	10c5883a 	add	r2,r2,r3
   173a4:	80800015 	stw	r2,0(r16)
   173a8:	d8c00015 	stw	r3,0(sp)
   173ac:	00168500 	call	16850 <_fflush_r>
   173b0:	d8c00017 	ldw	r3,0(sp)
   173b4:	da000117 	ldw	r8,4(sp)
   173b8:	103fc21e 	bne	r2,zero,172c4 <__alt_data_end+0xfc0172c4>
   173bc:	182f883a 	mov	r23,r3
   173c0:	9de7c83a 	sub	r19,r19,r23
   173c4:	983fe11e 	bne	r19,zero,1734c <__alt_data_end+0xfc01734c>
   173c8:	800b883a 	mov	r5,r16
   173cc:	a809883a 	mov	r4,r21
   173d0:	00168500 	call	16850 <_fflush_r>
   173d4:	103fbb1e 	bne	r2,zero,172c4 <__alt_data_end+0xfc0172c4>
   173d8:	0011883a 	mov	r8,zero
   173dc:	003fdb06 	br	1734c <__alt_data_end+0xfc01734c>
   173e0:	94c0012e 	bgeu	r18,r19,173e8 <__sfvwrite_r+0x328>
   173e4:	9027883a 	mov	r19,r18
   173e8:	980d883a 	mov	r6,r19
   173ec:	e00b883a 	mov	r5,fp
   173f0:	0017a8c0 	call	17a8c <memmove>
   173f4:	80800217 	ldw	r2,8(r16)
   173f8:	80c00017 	ldw	r3,0(r16)
   173fc:	14c5c83a 	sub	r2,r2,r19
   17400:	1cc7883a 	add	r3,r3,r19
   17404:	80800215 	stw	r2,8(r16)
   17408:	80c00015 	stw	r3,0(r16)
   1740c:	10004326 	beq	r2,zero,1751c <__sfvwrite_r+0x45c>
   17410:	9805883a 	mov	r2,r19
   17414:	003f8306 	br	17224 <__alt_data_end+0xfc017224>
   17418:	b00d883a 	mov	r6,r22
   1741c:	e00b883a 	mov	r5,fp
   17420:	da000115 	stw	r8,4(sp)
   17424:	0017a8c0 	call	17a8c <memmove>
   17428:	80800217 	ldw	r2,8(r16)
   1742c:	80c00017 	ldw	r3,0(r16)
   17430:	da000117 	ldw	r8,4(sp)
   17434:	1585c83a 	sub	r2,r2,r22
   17438:	1dad883a 	add	r22,r3,r22
   1743c:	80800215 	stw	r2,8(r16)
   17440:	85800015 	stw	r22,0(r16)
   17444:	003fbf06 	br	17344 <__alt_data_end+0xfc017344>
   17448:	81000017 	ldw	r4,0(r16)
   1744c:	9027883a 	mov	r19,r18
   17450:	902f883a 	mov	r23,r18
   17454:	003f6906 	br	171fc <__alt_data_end+0xfc0171fc>
   17458:	900d883a 	mov	r6,r18
   1745c:	01400284 	movi	r5,10
   17460:	e009883a 	mov	r4,fp
   17464:	00179a80 	call	179a8 <memchr>
   17468:	10003e26 	beq	r2,zero,17564 <__sfvwrite_r+0x4a4>
   1746c:	10800044 	addi	r2,r2,1
   17470:	1727c83a 	sub	r19,r2,fp
   17474:	02000044 	movi	r8,1
   17478:	003f9d06 	br	172f0 <__alt_data_end+0xfc0172f0>
   1747c:	80800517 	ldw	r2,20(r16)
   17480:	81400417 	ldw	r5,16(r16)
   17484:	81c00017 	ldw	r7,0(r16)
   17488:	10a7883a 	add	r19,r2,r2
   1748c:	9885883a 	add	r2,r19,r2
   17490:	1026d7fa 	srli	r19,r2,31
   17494:	396dc83a 	sub	r22,r7,r5
   17498:	b1000044 	addi	r4,r22,1
   1749c:	9885883a 	add	r2,r19,r2
   174a0:	1027d07a 	srai	r19,r2,1
   174a4:	2485883a 	add	r2,r4,r18
   174a8:	980d883a 	mov	r6,r19
   174ac:	9880022e 	bgeu	r19,r2,174b8 <__sfvwrite_r+0x3f8>
   174b0:	1027883a 	mov	r19,r2
   174b4:	100d883a 	mov	r6,r2
   174b8:	18c1000c 	andi	r3,r3,1024
   174bc:	18001c26 	beq	r3,zero,17530 <__sfvwrite_r+0x470>
   174c0:	300b883a 	mov	r5,r6
   174c4:	a809883a 	mov	r4,r21
   174c8:	000f44c0 	call	f44c <_malloc_r>
   174cc:	102f883a 	mov	r23,r2
   174d0:	10002926 	beq	r2,zero,17578 <__sfvwrite_r+0x4b8>
   174d4:	81400417 	ldw	r5,16(r16)
   174d8:	b00d883a 	mov	r6,r22
   174dc:	1009883a 	mov	r4,r2
   174e0:	000fc580 	call	fc58 <memcpy>
   174e4:	8080030b 	ldhu	r2,12(r16)
   174e8:	00fedfc4 	movi	r3,-1153
   174ec:	10c4703a 	and	r2,r2,r3
   174f0:	10802014 	ori	r2,r2,128
   174f4:	8080030d 	sth	r2,12(r16)
   174f8:	bd89883a 	add	r4,r23,r22
   174fc:	9d8fc83a 	sub	r7,r19,r22
   17500:	85c00415 	stw	r23,16(r16)
   17504:	84c00515 	stw	r19,20(r16)
   17508:	81000015 	stw	r4,0(r16)
   1750c:	9027883a 	mov	r19,r18
   17510:	81c00215 	stw	r7,8(r16)
   17514:	902f883a 	mov	r23,r18
   17518:	003f3806 	br	171fc <__alt_data_end+0xfc0171fc>
   1751c:	800b883a 	mov	r5,r16
   17520:	a809883a 	mov	r4,r21
   17524:	00168500 	call	16850 <_fflush_r>
   17528:	103fb926 	beq	r2,zero,17410 <__alt_data_end+0xfc017410>
   1752c:	003f6506 	br	172c4 <__alt_data_end+0xfc0172c4>
   17530:	a809883a 	mov	r4,r21
   17534:	0018e080 	call	18e08 <_realloc_r>
   17538:	102f883a 	mov	r23,r2
   1753c:	103fee1e 	bne	r2,zero,174f8 <__alt_data_end+0xfc0174f8>
   17540:	81400417 	ldw	r5,16(r16)
   17544:	a809883a 	mov	r4,r21
   17548:	0016db00 	call	16db0 <_free_r>
   1754c:	8080030b 	ldhu	r2,12(r16)
   17550:	00ffdfc4 	movi	r3,-129
   17554:	1884703a 	and	r2,r3,r2
   17558:	00c00304 	movi	r3,12
   1755c:	a8c00015 	stw	r3,0(r21)
   17560:	003f5906 	br	172c8 <__alt_data_end+0xfc0172c8>
   17564:	94c00044 	addi	r19,r18,1
   17568:	02000044 	movi	r8,1
   1756c:	003f6006 	br	172f0 <__alt_data_end+0xfc0172f0>
   17570:	00bfffc4 	movi	r2,-1
   17574:	003f0006 	br	17178 <__alt_data_end+0xfc017178>
   17578:	00800304 	movi	r2,12
   1757c:	a8800015 	stw	r2,0(r21)
   17580:	8080030b 	ldhu	r2,12(r16)
   17584:	003f5006 	br	172c8 <__alt_data_end+0xfc0172c8>

00017588 <_fwalk>:
   17588:	defff704 	addi	sp,sp,-36
   1758c:	dd000415 	stw	r20,16(sp)
   17590:	dfc00815 	stw	ra,32(sp)
   17594:	ddc00715 	stw	r23,28(sp)
   17598:	dd800615 	stw	r22,24(sp)
   1759c:	dd400515 	stw	r21,20(sp)
   175a0:	dcc00315 	stw	r19,12(sp)
   175a4:	dc800215 	stw	r18,8(sp)
   175a8:	dc400115 	stw	r17,4(sp)
   175ac:	dc000015 	stw	r16,0(sp)
   175b0:	2500b804 	addi	r20,r4,736
   175b4:	a0002326 	beq	r20,zero,17644 <_fwalk+0xbc>
   175b8:	282b883a 	mov	r21,r5
   175bc:	002f883a 	mov	r23,zero
   175c0:	05800044 	movi	r22,1
   175c4:	04ffffc4 	movi	r19,-1
   175c8:	a4400117 	ldw	r17,4(r20)
   175cc:	a4800217 	ldw	r18,8(r20)
   175d0:	8c7fffc4 	addi	r17,r17,-1
   175d4:	88000d16 	blt	r17,zero,1760c <_fwalk+0x84>
   175d8:	94000304 	addi	r16,r18,12
   175dc:	94800384 	addi	r18,r18,14
   175e0:	8080000b 	ldhu	r2,0(r16)
   175e4:	8c7fffc4 	addi	r17,r17,-1
   175e8:	813ffd04 	addi	r4,r16,-12
   175ec:	b080042e 	bgeu	r22,r2,17600 <_fwalk+0x78>
   175f0:	9080000f 	ldh	r2,0(r18)
   175f4:	14c00226 	beq	r2,r19,17600 <_fwalk+0x78>
   175f8:	a83ee83a 	callr	r21
   175fc:	b8aeb03a 	or	r23,r23,r2
   17600:	84001a04 	addi	r16,r16,104
   17604:	94801a04 	addi	r18,r18,104
   17608:	8cfff51e 	bne	r17,r19,175e0 <__alt_data_end+0xfc0175e0>
   1760c:	a5000017 	ldw	r20,0(r20)
   17610:	a03fed1e 	bne	r20,zero,175c8 <__alt_data_end+0xfc0175c8>
   17614:	b805883a 	mov	r2,r23
   17618:	dfc00817 	ldw	ra,32(sp)
   1761c:	ddc00717 	ldw	r23,28(sp)
   17620:	dd800617 	ldw	r22,24(sp)
   17624:	dd400517 	ldw	r21,20(sp)
   17628:	dd000417 	ldw	r20,16(sp)
   1762c:	dcc00317 	ldw	r19,12(sp)
   17630:	dc800217 	ldw	r18,8(sp)
   17634:	dc400117 	ldw	r17,4(sp)
   17638:	dc000017 	ldw	r16,0(sp)
   1763c:	dec00904 	addi	sp,sp,36
   17640:	f800283a 	ret
   17644:	002f883a 	mov	r23,zero
   17648:	003ff206 	br	17614 <__alt_data_end+0xfc017614>

0001764c <_fwalk_reent>:
   1764c:	defff704 	addi	sp,sp,-36
   17650:	dd000415 	stw	r20,16(sp)
   17654:	dfc00815 	stw	ra,32(sp)
   17658:	ddc00715 	stw	r23,28(sp)
   1765c:	dd800615 	stw	r22,24(sp)
   17660:	dd400515 	stw	r21,20(sp)
   17664:	dcc00315 	stw	r19,12(sp)
   17668:	dc800215 	stw	r18,8(sp)
   1766c:	dc400115 	stw	r17,4(sp)
   17670:	dc000015 	stw	r16,0(sp)
   17674:	2500b804 	addi	r20,r4,736
   17678:	a0002326 	beq	r20,zero,17708 <_fwalk_reent+0xbc>
   1767c:	282b883a 	mov	r21,r5
   17680:	2027883a 	mov	r19,r4
   17684:	002f883a 	mov	r23,zero
   17688:	05800044 	movi	r22,1
   1768c:	04bfffc4 	movi	r18,-1
   17690:	a4400117 	ldw	r17,4(r20)
   17694:	a4000217 	ldw	r16,8(r20)
   17698:	8c7fffc4 	addi	r17,r17,-1
   1769c:	88000c16 	blt	r17,zero,176d0 <_fwalk_reent+0x84>
   176a0:	84000304 	addi	r16,r16,12
   176a4:	8080000b 	ldhu	r2,0(r16)
   176a8:	8c7fffc4 	addi	r17,r17,-1
   176ac:	817ffd04 	addi	r5,r16,-12
   176b0:	b080052e 	bgeu	r22,r2,176c8 <_fwalk_reent+0x7c>
   176b4:	8080008f 	ldh	r2,2(r16)
   176b8:	9809883a 	mov	r4,r19
   176bc:	14800226 	beq	r2,r18,176c8 <_fwalk_reent+0x7c>
   176c0:	a83ee83a 	callr	r21
   176c4:	b8aeb03a 	or	r23,r23,r2
   176c8:	84001a04 	addi	r16,r16,104
   176cc:	8cbff51e 	bne	r17,r18,176a4 <__alt_data_end+0xfc0176a4>
   176d0:	a5000017 	ldw	r20,0(r20)
   176d4:	a03fee1e 	bne	r20,zero,17690 <__alt_data_end+0xfc017690>
   176d8:	b805883a 	mov	r2,r23
   176dc:	dfc00817 	ldw	ra,32(sp)
   176e0:	ddc00717 	ldw	r23,28(sp)
   176e4:	dd800617 	ldw	r22,24(sp)
   176e8:	dd400517 	ldw	r21,20(sp)
   176ec:	dd000417 	ldw	r20,16(sp)
   176f0:	dcc00317 	ldw	r19,12(sp)
   176f4:	dc800217 	ldw	r18,8(sp)
   176f8:	dc400117 	ldw	r17,4(sp)
   176fc:	dc000017 	ldw	r16,0(sp)
   17700:	dec00904 	addi	sp,sp,36
   17704:	f800283a 	ret
   17708:	002f883a 	mov	r23,zero
   1770c:	003ff206 	br	176d8 <__alt_data_end+0xfc0176d8>

00017710 <_setlocale_r>:
   17710:	30001b26 	beq	r6,zero,17780 <_setlocale_r+0x70>
   17714:	014000f4 	movhi	r5,3
   17718:	defffe04 	addi	sp,sp,-8
   1771c:	296e1204 	addi	r5,r5,-18360
   17720:	3009883a 	mov	r4,r6
   17724:	dc000015 	stw	r16,0(sp)
   17728:	dfc00115 	stw	ra,4(sp)
   1772c:	3021883a 	mov	r16,r6
   17730:	00104440 	call	10444 <strcmp>
   17734:	1000061e 	bne	r2,zero,17750 <_setlocale_r+0x40>
   17738:	008000f4 	movhi	r2,3
   1773c:	10adeb04 	addi	r2,r2,-18516
   17740:	dfc00117 	ldw	ra,4(sp)
   17744:	dc000017 	ldw	r16,0(sp)
   17748:	dec00204 	addi	sp,sp,8
   1774c:	f800283a 	ret
   17750:	014000f4 	movhi	r5,3
   17754:	296deb04 	addi	r5,r5,-18516
   17758:	8009883a 	mov	r4,r16
   1775c:	00104440 	call	10444 <strcmp>
   17760:	103ff526 	beq	r2,zero,17738 <__alt_data_end+0xfc017738>
   17764:	014000f4 	movhi	r5,3
   17768:	296df504 	addi	r5,r5,-18476
   1776c:	8009883a 	mov	r4,r16
   17770:	00104440 	call	10444 <strcmp>
   17774:	103ff026 	beq	r2,zero,17738 <__alt_data_end+0xfc017738>
   17778:	0005883a 	mov	r2,zero
   1777c:	003ff006 	br	17740 <__alt_data_end+0xfc017740>
   17780:	008000f4 	movhi	r2,3
   17784:	10adeb04 	addi	r2,r2,-18516
   17788:	f800283a 	ret

0001778c <__locale_charset>:
   1778c:	008000f4 	movhi	r2,3
   17790:	10b09904 	addi	r2,r2,-15772
   17794:	f800283a 	ret

00017798 <__locale_mb_cur_max>:
   17798:	008000f4 	movhi	r2,3
   1779c:	10baf504 	addi	r2,r2,-5164
   177a0:	10800017 	ldw	r2,0(r2)
   177a4:	f800283a 	ret

000177a8 <__locale_msgcharset>:
   177a8:	008000f4 	movhi	r2,3
   177ac:	10b09104 	addi	r2,r2,-15804
   177b0:	f800283a 	ret

000177b4 <__locale_cjk_lang>:
   177b4:	0005883a 	mov	r2,zero
   177b8:	f800283a 	ret

000177bc <_localeconv_r>:
   177bc:	008000f4 	movhi	r2,3
   177c0:	10b0a104 	addi	r2,r2,-15740
   177c4:	f800283a 	ret

000177c8 <setlocale>:
   177c8:	008000f4 	movhi	r2,3
   177cc:	10baf204 	addi	r2,r2,-5176
   177d0:	280d883a 	mov	r6,r5
   177d4:	200b883a 	mov	r5,r4
   177d8:	11000017 	ldw	r4,0(r2)
   177dc:	00177101 	jmpi	17710 <_setlocale_r>

000177e0 <localeconv>:
   177e0:	008000f4 	movhi	r2,3
   177e4:	10b0a104 	addi	r2,r2,-15740
   177e8:	f800283a 	ret

000177ec <__smakebuf_r>:
   177ec:	2880030b 	ldhu	r2,12(r5)
   177f0:	10c0008c 	andi	r3,r2,2
   177f4:	1800411e 	bne	r3,zero,178fc <__smakebuf_r+0x110>
   177f8:	deffec04 	addi	sp,sp,-80
   177fc:	dc000f15 	stw	r16,60(sp)
   17800:	2821883a 	mov	r16,r5
   17804:	2940038f 	ldh	r5,14(r5)
   17808:	dc401015 	stw	r17,64(sp)
   1780c:	dfc01315 	stw	ra,76(sp)
   17810:	dcc01215 	stw	r19,72(sp)
   17814:	dc801115 	stw	r18,68(sp)
   17818:	2023883a 	mov	r17,r4
   1781c:	28001c16 	blt	r5,zero,17890 <__smakebuf_r+0xa4>
   17820:	d80d883a 	mov	r6,sp
   17824:	001c7780 	call	1c778 <_fstat_r>
   17828:	10001816 	blt	r2,zero,1788c <__smakebuf_r+0xa0>
   1782c:	d8800117 	ldw	r2,4(sp)
   17830:	00e00014 	movui	r3,32768
   17834:	10bc000c 	andi	r2,r2,61440
   17838:	14c80020 	cmpeqi	r19,r2,8192
   1783c:	10c03726 	beq	r2,r3,1791c <__smakebuf_r+0x130>
   17840:	80c0030b 	ldhu	r3,12(r16)
   17844:	18c20014 	ori	r3,r3,2048
   17848:	80c0030d 	sth	r3,12(r16)
   1784c:	00c80004 	movi	r3,8192
   17850:	10c0521e 	bne	r2,r3,1799c <__smakebuf_r+0x1b0>
   17854:	8140038f 	ldh	r5,14(r16)
   17858:	8809883a 	mov	r4,r17
   1785c:	001c7d40 	call	1c7d4 <_isatty_r>
   17860:	10004c26 	beq	r2,zero,17994 <__smakebuf_r+0x1a8>
   17864:	8080030b 	ldhu	r2,12(r16)
   17868:	80c010c4 	addi	r3,r16,67
   1786c:	80c00015 	stw	r3,0(r16)
   17870:	10800054 	ori	r2,r2,1
   17874:	8080030d 	sth	r2,12(r16)
   17878:	00800044 	movi	r2,1
   1787c:	80c00415 	stw	r3,16(r16)
   17880:	80800515 	stw	r2,20(r16)
   17884:	04810004 	movi	r18,1024
   17888:	00000706 	br	178a8 <__smakebuf_r+0xbc>
   1788c:	8080030b 	ldhu	r2,12(r16)
   17890:	10c0200c 	andi	r3,r2,128
   17894:	18001f1e 	bne	r3,zero,17914 <__smakebuf_r+0x128>
   17898:	04810004 	movi	r18,1024
   1789c:	10820014 	ori	r2,r2,2048
   178a0:	8080030d 	sth	r2,12(r16)
   178a4:	0027883a 	mov	r19,zero
   178a8:	900b883a 	mov	r5,r18
   178ac:	8809883a 	mov	r4,r17
   178b0:	000f44c0 	call	f44c <_malloc_r>
   178b4:	10002c26 	beq	r2,zero,17968 <__smakebuf_r+0x17c>
   178b8:	80c0030b 	ldhu	r3,12(r16)
   178bc:	01000074 	movhi	r4,1
   178c0:	211a3904 	addi	r4,r4,26852
   178c4:	89000f15 	stw	r4,60(r17)
   178c8:	18c02014 	ori	r3,r3,128
   178cc:	80c0030d 	sth	r3,12(r16)
   178d0:	80800015 	stw	r2,0(r16)
   178d4:	80800415 	stw	r2,16(r16)
   178d8:	84800515 	stw	r18,20(r16)
   178dc:	98001a1e 	bne	r19,zero,17948 <__smakebuf_r+0x15c>
   178e0:	dfc01317 	ldw	ra,76(sp)
   178e4:	dcc01217 	ldw	r19,72(sp)
   178e8:	dc801117 	ldw	r18,68(sp)
   178ec:	dc401017 	ldw	r17,64(sp)
   178f0:	dc000f17 	ldw	r16,60(sp)
   178f4:	dec01404 	addi	sp,sp,80
   178f8:	f800283a 	ret
   178fc:	288010c4 	addi	r2,r5,67
   17900:	28800015 	stw	r2,0(r5)
   17904:	28800415 	stw	r2,16(r5)
   17908:	00800044 	movi	r2,1
   1790c:	28800515 	stw	r2,20(r5)
   17910:	f800283a 	ret
   17914:	04801004 	movi	r18,64
   17918:	003fe006 	br	1789c <__alt_data_end+0xfc01789c>
   1791c:	81000a17 	ldw	r4,40(r16)
   17920:	00c000b4 	movhi	r3,2
   17924:	18e52e04 	addi	r3,r3,-27464
   17928:	20ffc51e 	bne	r4,r3,17840 <__alt_data_end+0xfc017840>
   1792c:	8080030b 	ldhu	r2,12(r16)
   17930:	04810004 	movi	r18,1024
   17934:	84801315 	stw	r18,76(r16)
   17938:	1484b03a 	or	r2,r2,r18
   1793c:	8080030d 	sth	r2,12(r16)
   17940:	0027883a 	mov	r19,zero
   17944:	003fd806 	br	178a8 <__alt_data_end+0xfc0178a8>
   17948:	8140038f 	ldh	r5,14(r16)
   1794c:	8809883a 	mov	r4,r17
   17950:	001c7d40 	call	1c7d4 <_isatty_r>
   17954:	103fe226 	beq	r2,zero,178e0 <__alt_data_end+0xfc0178e0>
   17958:	8080030b 	ldhu	r2,12(r16)
   1795c:	10800054 	ori	r2,r2,1
   17960:	8080030d 	sth	r2,12(r16)
   17964:	003fde06 	br	178e0 <__alt_data_end+0xfc0178e0>
   17968:	8080030b 	ldhu	r2,12(r16)
   1796c:	10c0800c 	andi	r3,r2,512
   17970:	183fdb1e 	bne	r3,zero,178e0 <__alt_data_end+0xfc0178e0>
   17974:	10800094 	ori	r2,r2,2
   17978:	80c010c4 	addi	r3,r16,67
   1797c:	8080030d 	sth	r2,12(r16)
   17980:	00800044 	movi	r2,1
   17984:	80c00015 	stw	r3,0(r16)
   17988:	80c00415 	stw	r3,16(r16)
   1798c:	80800515 	stw	r2,20(r16)
   17990:	003fd306 	br	178e0 <__alt_data_end+0xfc0178e0>
   17994:	04810004 	movi	r18,1024
   17998:	003fc306 	br	178a8 <__alt_data_end+0xfc0178a8>
   1799c:	0027883a 	mov	r19,zero
   179a0:	04810004 	movi	r18,1024
   179a4:	003fc006 	br	178a8 <__alt_data_end+0xfc0178a8>

000179a8 <memchr>:
   179a8:	208000cc 	andi	r2,r4,3
   179ac:	280f883a 	mov	r7,r5
   179b0:	10003426 	beq	r2,zero,17a84 <memchr+0xdc>
   179b4:	30bfffc4 	addi	r2,r6,-1
   179b8:	30001a26 	beq	r6,zero,17a24 <memchr+0x7c>
   179bc:	20c00003 	ldbu	r3,0(r4)
   179c0:	29803fcc 	andi	r6,r5,255
   179c4:	30c0051e 	bne	r6,r3,179dc <memchr+0x34>
   179c8:	00001806 	br	17a2c <memchr+0x84>
   179cc:	10001526 	beq	r2,zero,17a24 <memchr+0x7c>
   179d0:	20c00003 	ldbu	r3,0(r4)
   179d4:	10bfffc4 	addi	r2,r2,-1
   179d8:	30c01426 	beq	r6,r3,17a2c <memchr+0x84>
   179dc:	21000044 	addi	r4,r4,1
   179e0:	20c000cc 	andi	r3,r4,3
   179e4:	183ff91e 	bne	r3,zero,179cc <__alt_data_end+0xfc0179cc>
   179e8:	020000c4 	movi	r8,3
   179ec:	40801136 	bltu	r8,r2,17a34 <memchr+0x8c>
   179f0:	10000c26 	beq	r2,zero,17a24 <memchr+0x7c>
   179f4:	20c00003 	ldbu	r3,0(r4)
   179f8:	29403fcc 	andi	r5,r5,255
   179fc:	28c00b26 	beq	r5,r3,17a2c <memchr+0x84>
   17a00:	20c00044 	addi	r3,r4,1
   17a04:	39803fcc 	andi	r6,r7,255
   17a08:	2089883a 	add	r4,r4,r2
   17a0c:	00000306 	br	17a1c <memchr+0x74>
   17a10:	18c00044 	addi	r3,r3,1
   17a14:	197fffc3 	ldbu	r5,-1(r3)
   17a18:	31400526 	beq	r6,r5,17a30 <memchr+0x88>
   17a1c:	1805883a 	mov	r2,r3
   17a20:	20fffb1e 	bne	r4,r3,17a10 <__alt_data_end+0xfc017a10>
   17a24:	0005883a 	mov	r2,zero
   17a28:	f800283a 	ret
   17a2c:	2005883a 	mov	r2,r4
   17a30:	f800283a 	ret
   17a34:	28c03fcc 	andi	r3,r5,255
   17a38:	1812923a 	slli	r9,r3,8
   17a3c:	02ffbff4 	movhi	r11,65279
   17a40:	02a02074 	movhi	r10,32897
   17a44:	48d2b03a 	or	r9,r9,r3
   17a48:	4806943a 	slli	r3,r9,16
   17a4c:	5affbfc4 	addi	r11,r11,-257
   17a50:	52a02004 	addi	r10,r10,-32640
   17a54:	48d2b03a 	or	r9,r9,r3
   17a58:	20c00017 	ldw	r3,0(r4)
   17a5c:	48c6f03a 	xor	r3,r9,r3
   17a60:	1acd883a 	add	r6,r3,r11
   17a64:	00c6303a 	nor	r3,zero,r3
   17a68:	30c6703a 	and	r3,r6,r3
   17a6c:	1a86703a 	and	r3,r3,r10
   17a70:	183fe01e 	bne	r3,zero,179f4 <__alt_data_end+0xfc0179f4>
   17a74:	10bfff04 	addi	r2,r2,-4
   17a78:	21000104 	addi	r4,r4,4
   17a7c:	40bff636 	bltu	r8,r2,17a58 <__alt_data_end+0xfc017a58>
   17a80:	003fdb06 	br	179f0 <__alt_data_end+0xfc0179f0>
   17a84:	3005883a 	mov	r2,r6
   17a88:	003fd706 	br	179e8 <__alt_data_end+0xfc0179e8>

00017a8c <memmove>:
   17a8c:	2005883a 	mov	r2,r4
   17a90:	29000b2e 	bgeu	r5,r4,17ac0 <memmove+0x34>
   17a94:	298f883a 	add	r7,r5,r6
   17a98:	21c0092e 	bgeu	r4,r7,17ac0 <memmove+0x34>
   17a9c:	2187883a 	add	r3,r4,r6
   17aa0:	198bc83a 	sub	r5,r3,r6
   17aa4:	30004826 	beq	r6,zero,17bc8 <memmove+0x13c>
   17aa8:	39ffffc4 	addi	r7,r7,-1
   17aac:	39000003 	ldbu	r4,0(r7)
   17ab0:	18ffffc4 	addi	r3,r3,-1
   17ab4:	19000005 	stb	r4,0(r3)
   17ab8:	28fffb1e 	bne	r5,r3,17aa8 <__alt_data_end+0xfc017aa8>
   17abc:	f800283a 	ret
   17ac0:	00c003c4 	movi	r3,15
   17ac4:	1980412e 	bgeu	r3,r6,17bcc <memmove+0x140>
   17ac8:	2886b03a 	or	r3,r5,r2
   17acc:	18c000cc 	andi	r3,r3,3
   17ad0:	1800401e 	bne	r3,zero,17bd4 <memmove+0x148>
   17ad4:	33fffc04 	addi	r15,r6,-16
   17ad8:	781ed13a 	srli	r15,r15,4
   17adc:	28c00104 	addi	r3,r5,4
   17ae0:	13400104 	addi	r13,r2,4
   17ae4:	781c913a 	slli	r14,r15,4
   17ae8:	2b000204 	addi	r12,r5,8
   17aec:	12c00204 	addi	r11,r2,8
   17af0:	73800504 	addi	r14,r14,20
   17af4:	2a800304 	addi	r10,r5,12
   17af8:	12400304 	addi	r9,r2,12
   17afc:	2b9d883a 	add	r14,r5,r14
   17b00:	2811883a 	mov	r8,r5
   17b04:	100f883a 	mov	r7,r2
   17b08:	41000017 	ldw	r4,0(r8)
   17b0c:	39c00404 	addi	r7,r7,16
   17b10:	18c00404 	addi	r3,r3,16
   17b14:	393ffc15 	stw	r4,-16(r7)
   17b18:	193ffc17 	ldw	r4,-16(r3)
   17b1c:	6b400404 	addi	r13,r13,16
   17b20:	5ac00404 	addi	r11,r11,16
   17b24:	693ffc15 	stw	r4,-16(r13)
   17b28:	61000017 	ldw	r4,0(r12)
   17b2c:	4a400404 	addi	r9,r9,16
   17b30:	42000404 	addi	r8,r8,16
   17b34:	593ffc15 	stw	r4,-16(r11)
   17b38:	51000017 	ldw	r4,0(r10)
   17b3c:	63000404 	addi	r12,r12,16
   17b40:	52800404 	addi	r10,r10,16
   17b44:	493ffc15 	stw	r4,-16(r9)
   17b48:	1bbfef1e 	bne	r3,r14,17b08 <__alt_data_end+0xfc017b08>
   17b4c:	79000044 	addi	r4,r15,1
   17b50:	2008913a 	slli	r4,r4,4
   17b54:	328003cc 	andi	r10,r6,15
   17b58:	02c000c4 	movi	r11,3
   17b5c:	1107883a 	add	r3,r2,r4
   17b60:	290b883a 	add	r5,r5,r4
   17b64:	5a801e2e 	bgeu	r11,r10,17be0 <memmove+0x154>
   17b68:	1813883a 	mov	r9,r3
   17b6c:	2811883a 	mov	r8,r5
   17b70:	500f883a 	mov	r7,r10
   17b74:	41000017 	ldw	r4,0(r8)
   17b78:	4a400104 	addi	r9,r9,4
   17b7c:	39ffff04 	addi	r7,r7,-4
   17b80:	493fff15 	stw	r4,-4(r9)
   17b84:	42000104 	addi	r8,r8,4
   17b88:	59fffa36 	bltu	r11,r7,17b74 <__alt_data_end+0xfc017b74>
   17b8c:	513fff04 	addi	r4,r10,-4
   17b90:	2008d0ba 	srli	r4,r4,2
   17b94:	318000cc 	andi	r6,r6,3
   17b98:	21000044 	addi	r4,r4,1
   17b9c:	2109883a 	add	r4,r4,r4
   17ba0:	2109883a 	add	r4,r4,r4
   17ba4:	1907883a 	add	r3,r3,r4
   17ba8:	290b883a 	add	r5,r5,r4
   17bac:	30000b26 	beq	r6,zero,17bdc <memmove+0x150>
   17bb0:	198d883a 	add	r6,r3,r6
   17bb4:	29c00003 	ldbu	r7,0(r5)
   17bb8:	18c00044 	addi	r3,r3,1
   17bbc:	29400044 	addi	r5,r5,1
   17bc0:	19ffffc5 	stb	r7,-1(r3)
   17bc4:	19bffb1e 	bne	r3,r6,17bb4 <__alt_data_end+0xfc017bb4>
   17bc8:	f800283a 	ret
   17bcc:	1007883a 	mov	r3,r2
   17bd0:	003ff606 	br	17bac <__alt_data_end+0xfc017bac>
   17bd4:	1007883a 	mov	r3,r2
   17bd8:	003ff506 	br	17bb0 <__alt_data_end+0xfc017bb0>
   17bdc:	f800283a 	ret
   17be0:	500d883a 	mov	r6,r10
   17be4:	003ff106 	br	17bac <__alt_data_end+0xfc017bac>

00017be8 <_Balloc>:
   17be8:	20801317 	ldw	r2,76(r4)
   17bec:	defffc04 	addi	sp,sp,-16
   17bf0:	dc400115 	stw	r17,4(sp)
   17bf4:	dc000015 	stw	r16,0(sp)
   17bf8:	dfc00315 	stw	ra,12(sp)
   17bfc:	dc800215 	stw	r18,8(sp)
   17c00:	2023883a 	mov	r17,r4
   17c04:	2821883a 	mov	r16,r5
   17c08:	10000f26 	beq	r2,zero,17c48 <_Balloc+0x60>
   17c0c:	8407883a 	add	r3,r16,r16
   17c10:	18c7883a 	add	r3,r3,r3
   17c14:	10c7883a 	add	r3,r2,r3
   17c18:	18800017 	ldw	r2,0(r3)
   17c1c:	10001126 	beq	r2,zero,17c64 <_Balloc+0x7c>
   17c20:	11000017 	ldw	r4,0(r2)
   17c24:	19000015 	stw	r4,0(r3)
   17c28:	10000415 	stw	zero,16(r2)
   17c2c:	10000315 	stw	zero,12(r2)
   17c30:	dfc00317 	ldw	ra,12(sp)
   17c34:	dc800217 	ldw	r18,8(sp)
   17c38:	dc400117 	ldw	r17,4(sp)
   17c3c:	dc000017 	ldw	r16,0(sp)
   17c40:	dec00404 	addi	sp,sp,16
   17c44:	f800283a 	ret
   17c48:	01800844 	movi	r6,33
   17c4c:	01400104 	movi	r5,4
   17c50:	001c3900 	call	1c390 <_calloc_r>
   17c54:	88801315 	stw	r2,76(r17)
   17c58:	103fec1e 	bne	r2,zero,17c0c <__alt_data_end+0xfc017c0c>
   17c5c:	0005883a 	mov	r2,zero
   17c60:	003ff306 	br	17c30 <__alt_data_end+0xfc017c30>
   17c64:	01400044 	movi	r5,1
   17c68:	2c24983a 	sll	r18,r5,r16
   17c6c:	8809883a 	mov	r4,r17
   17c70:	91800144 	addi	r6,r18,5
   17c74:	318d883a 	add	r6,r6,r6
   17c78:	318d883a 	add	r6,r6,r6
   17c7c:	001c3900 	call	1c390 <_calloc_r>
   17c80:	103ff626 	beq	r2,zero,17c5c <__alt_data_end+0xfc017c5c>
   17c84:	14000115 	stw	r16,4(r2)
   17c88:	14800215 	stw	r18,8(r2)
   17c8c:	003fe606 	br	17c28 <__alt_data_end+0xfc017c28>

00017c90 <_Bfree>:
   17c90:	28000826 	beq	r5,zero,17cb4 <_Bfree+0x24>
   17c94:	28c00117 	ldw	r3,4(r5)
   17c98:	20801317 	ldw	r2,76(r4)
   17c9c:	18c7883a 	add	r3,r3,r3
   17ca0:	18c7883a 	add	r3,r3,r3
   17ca4:	10c5883a 	add	r2,r2,r3
   17ca8:	10c00017 	ldw	r3,0(r2)
   17cac:	28c00015 	stw	r3,0(r5)
   17cb0:	11400015 	stw	r5,0(r2)
   17cb4:	f800283a 	ret

00017cb8 <__multadd>:
   17cb8:	defff704 	addi	sp,sp,-36
   17cbc:	dc800215 	stw	r18,8(sp)
   17cc0:	2c800417 	ldw	r18,16(r5)
   17cc4:	dd800615 	stw	r22,24(sp)
   17cc8:	dd400515 	stw	r21,20(sp)
   17ccc:	dd000415 	stw	r20,16(sp)
   17cd0:	dcc00315 	stw	r19,12(sp)
   17cd4:	dc400115 	stw	r17,4(sp)
   17cd8:	dc000015 	stw	r16,0(sp)
   17cdc:	dfc00815 	stw	ra,32(sp)
   17ce0:	ddc00715 	stw	r23,28(sp)
   17ce4:	2827883a 	mov	r19,r5
   17ce8:	2029883a 	mov	r20,r4
   17cec:	3023883a 	mov	r17,r6
   17cf0:	3821883a 	mov	r16,r7
   17cf4:	2d400504 	addi	r21,r5,20
   17cf8:	002d883a 	mov	r22,zero
   17cfc:	adc00017 	ldw	r23,0(r21)
   17d00:	880b883a 	mov	r5,r17
   17d04:	ad400104 	addi	r21,r21,4
   17d08:	b93fffcc 	andi	r4,r23,65535
   17d0c:	000d8b80 	call	d8b8 <__mulsi3>
   17d10:	b808d43a 	srli	r4,r23,16
   17d14:	880b883a 	mov	r5,r17
   17d18:	1421883a 	add	r16,r2,r16
   17d1c:	000d8b80 	call	d8b8 <__mulsi3>
   17d20:	800ed43a 	srli	r7,r16,16
   17d24:	80ffffcc 	andi	r3,r16,65535
   17d28:	b5800044 	addi	r22,r22,1
   17d2c:	11c5883a 	add	r2,r2,r7
   17d30:	100e943a 	slli	r7,r2,16
   17d34:	1020d43a 	srli	r16,r2,16
   17d38:	38c7883a 	add	r3,r7,r3
   17d3c:	a8ffff15 	stw	r3,-4(r21)
   17d40:	b4bfee16 	blt	r22,r18,17cfc <__alt_data_end+0xfc017cfc>
   17d44:	80000926 	beq	r16,zero,17d6c <__multadd+0xb4>
   17d48:	98800217 	ldw	r2,8(r19)
   17d4c:	9080130e 	bge	r18,r2,17d9c <__multadd+0xe4>
   17d50:	90800144 	addi	r2,r18,5
   17d54:	1085883a 	add	r2,r2,r2
   17d58:	1085883a 	add	r2,r2,r2
   17d5c:	9885883a 	add	r2,r19,r2
   17d60:	14000015 	stw	r16,0(r2)
   17d64:	94800044 	addi	r18,r18,1
   17d68:	9c800415 	stw	r18,16(r19)
   17d6c:	9805883a 	mov	r2,r19
   17d70:	dfc00817 	ldw	ra,32(sp)
   17d74:	ddc00717 	ldw	r23,28(sp)
   17d78:	dd800617 	ldw	r22,24(sp)
   17d7c:	dd400517 	ldw	r21,20(sp)
   17d80:	dd000417 	ldw	r20,16(sp)
   17d84:	dcc00317 	ldw	r19,12(sp)
   17d88:	dc800217 	ldw	r18,8(sp)
   17d8c:	dc400117 	ldw	r17,4(sp)
   17d90:	dc000017 	ldw	r16,0(sp)
   17d94:	dec00904 	addi	sp,sp,36
   17d98:	f800283a 	ret
   17d9c:	99400117 	ldw	r5,4(r19)
   17da0:	a009883a 	mov	r4,r20
   17da4:	29400044 	addi	r5,r5,1
   17da8:	0017be80 	call	17be8 <_Balloc>
   17dac:	99800417 	ldw	r6,16(r19)
   17db0:	99400304 	addi	r5,r19,12
   17db4:	11000304 	addi	r4,r2,12
   17db8:	31800084 	addi	r6,r6,2
   17dbc:	318d883a 	add	r6,r6,r6
   17dc0:	318d883a 	add	r6,r6,r6
   17dc4:	1023883a 	mov	r17,r2
   17dc8:	000fc580 	call	fc58 <memcpy>
   17dcc:	98000a26 	beq	r19,zero,17df8 <__multadd+0x140>
   17dd0:	98c00117 	ldw	r3,4(r19)
   17dd4:	a0801317 	ldw	r2,76(r20)
   17dd8:	18c7883a 	add	r3,r3,r3
   17ddc:	18c7883a 	add	r3,r3,r3
   17de0:	10c5883a 	add	r2,r2,r3
   17de4:	10c00017 	ldw	r3,0(r2)
   17de8:	98c00015 	stw	r3,0(r19)
   17dec:	14c00015 	stw	r19,0(r2)
   17df0:	8827883a 	mov	r19,r17
   17df4:	003fd606 	br	17d50 <__alt_data_end+0xfc017d50>
   17df8:	8827883a 	mov	r19,r17
   17dfc:	003fd406 	br	17d50 <__alt_data_end+0xfc017d50>

00017e00 <__s2b>:
   17e00:	defff904 	addi	sp,sp,-28
   17e04:	dc400115 	stw	r17,4(sp)
   17e08:	dc000015 	stw	r16,0(sp)
   17e0c:	2023883a 	mov	r17,r4
   17e10:	2821883a 	mov	r16,r5
   17e14:	39000204 	addi	r4,r7,8
   17e18:	01400244 	movi	r5,9
   17e1c:	dcc00315 	stw	r19,12(sp)
   17e20:	dc800215 	stw	r18,8(sp)
   17e24:	dfc00615 	stw	ra,24(sp)
   17e28:	dd400515 	stw	r21,20(sp)
   17e2c:	dd000415 	stw	r20,16(sp)
   17e30:	3825883a 	mov	r18,r7
   17e34:	3027883a 	mov	r19,r6
   17e38:	000d7040 	call	d704 <__divsi3>
   17e3c:	00c00044 	movi	r3,1
   17e40:	000b883a 	mov	r5,zero
   17e44:	1880030e 	bge	r3,r2,17e54 <__s2b+0x54>
   17e48:	18c7883a 	add	r3,r3,r3
   17e4c:	29400044 	addi	r5,r5,1
   17e50:	18bffd16 	blt	r3,r2,17e48 <__alt_data_end+0xfc017e48>
   17e54:	8809883a 	mov	r4,r17
   17e58:	0017be80 	call	17be8 <_Balloc>
   17e5c:	d8c00717 	ldw	r3,28(sp)
   17e60:	10c00515 	stw	r3,20(r2)
   17e64:	00c00044 	movi	r3,1
   17e68:	10c00415 	stw	r3,16(r2)
   17e6c:	00c00244 	movi	r3,9
   17e70:	1cc0210e 	bge	r3,r19,17ef8 <__s2b+0xf8>
   17e74:	80eb883a 	add	r21,r16,r3
   17e78:	a829883a 	mov	r20,r21
   17e7c:	84e1883a 	add	r16,r16,r19
   17e80:	a1c00007 	ldb	r7,0(r20)
   17e84:	01800284 	movi	r6,10
   17e88:	a5000044 	addi	r20,r20,1
   17e8c:	100b883a 	mov	r5,r2
   17e90:	39fff404 	addi	r7,r7,-48
   17e94:	8809883a 	mov	r4,r17
   17e98:	0017cb80 	call	17cb8 <__multadd>
   17e9c:	a43ff81e 	bne	r20,r16,17e80 <__alt_data_end+0xfc017e80>
   17ea0:	ace1883a 	add	r16,r21,r19
   17ea4:	843ffe04 	addi	r16,r16,-8
   17ea8:	9c800a0e 	bge	r19,r18,17ed4 <__s2b+0xd4>
   17eac:	94e5c83a 	sub	r18,r18,r19
   17eb0:	84a5883a 	add	r18,r16,r18
   17eb4:	81c00007 	ldb	r7,0(r16)
   17eb8:	01800284 	movi	r6,10
   17ebc:	84000044 	addi	r16,r16,1
   17ec0:	100b883a 	mov	r5,r2
   17ec4:	39fff404 	addi	r7,r7,-48
   17ec8:	8809883a 	mov	r4,r17
   17ecc:	0017cb80 	call	17cb8 <__multadd>
   17ed0:	84bff81e 	bne	r16,r18,17eb4 <__alt_data_end+0xfc017eb4>
   17ed4:	dfc00617 	ldw	ra,24(sp)
   17ed8:	dd400517 	ldw	r21,20(sp)
   17edc:	dd000417 	ldw	r20,16(sp)
   17ee0:	dcc00317 	ldw	r19,12(sp)
   17ee4:	dc800217 	ldw	r18,8(sp)
   17ee8:	dc400117 	ldw	r17,4(sp)
   17eec:	dc000017 	ldw	r16,0(sp)
   17ef0:	dec00704 	addi	sp,sp,28
   17ef4:	f800283a 	ret
   17ef8:	84000284 	addi	r16,r16,10
   17efc:	1827883a 	mov	r19,r3
   17f00:	003fe906 	br	17ea8 <__alt_data_end+0xfc017ea8>

00017f04 <__hi0bits>:
   17f04:	20bfffec 	andhi	r2,r4,65535
   17f08:	1000141e 	bne	r2,zero,17f5c <__hi0bits+0x58>
   17f0c:	2008943a 	slli	r4,r4,16
   17f10:	00800404 	movi	r2,16
   17f14:	20ffc02c 	andhi	r3,r4,65280
   17f18:	1800021e 	bne	r3,zero,17f24 <__hi0bits+0x20>
   17f1c:	2008923a 	slli	r4,r4,8
   17f20:	10800204 	addi	r2,r2,8
   17f24:	20fc002c 	andhi	r3,r4,61440
   17f28:	1800021e 	bne	r3,zero,17f34 <__hi0bits+0x30>
   17f2c:	2008913a 	slli	r4,r4,4
   17f30:	10800104 	addi	r2,r2,4
   17f34:	20f0002c 	andhi	r3,r4,49152
   17f38:	1800031e 	bne	r3,zero,17f48 <__hi0bits+0x44>
   17f3c:	2109883a 	add	r4,r4,r4
   17f40:	10800084 	addi	r2,r2,2
   17f44:	2109883a 	add	r4,r4,r4
   17f48:	20000316 	blt	r4,zero,17f58 <__hi0bits+0x54>
   17f4c:	2110002c 	andhi	r4,r4,16384
   17f50:	2000041e 	bne	r4,zero,17f64 <__hi0bits+0x60>
   17f54:	00800804 	movi	r2,32
   17f58:	f800283a 	ret
   17f5c:	0005883a 	mov	r2,zero
   17f60:	003fec06 	br	17f14 <__alt_data_end+0xfc017f14>
   17f64:	10800044 	addi	r2,r2,1
   17f68:	f800283a 	ret

00017f6c <__lo0bits>:
   17f6c:	20c00017 	ldw	r3,0(r4)
   17f70:	188001cc 	andi	r2,r3,7
   17f74:	10000826 	beq	r2,zero,17f98 <__lo0bits+0x2c>
   17f78:	1880004c 	andi	r2,r3,1
   17f7c:	1000211e 	bne	r2,zero,18004 <__lo0bits+0x98>
   17f80:	1880008c 	andi	r2,r3,2
   17f84:	1000211e 	bne	r2,zero,1800c <__lo0bits+0xa0>
   17f88:	1806d0ba 	srli	r3,r3,2
   17f8c:	00800084 	movi	r2,2
   17f90:	20c00015 	stw	r3,0(r4)
   17f94:	f800283a 	ret
   17f98:	18bfffcc 	andi	r2,r3,65535
   17f9c:	10001326 	beq	r2,zero,17fec <__lo0bits+0x80>
   17fa0:	0005883a 	mov	r2,zero
   17fa4:	19403fcc 	andi	r5,r3,255
   17fa8:	2800021e 	bne	r5,zero,17fb4 <__lo0bits+0x48>
   17fac:	1806d23a 	srli	r3,r3,8
   17fb0:	10800204 	addi	r2,r2,8
   17fb4:	194003cc 	andi	r5,r3,15
   17fb8:	2800021e 	bne	r5,zero,17fc4 <__lo0bits+0x58>
   17fbc:	1806d13a 	srli	r3,r3,4
   17fc0:	10800104 	addi	r2,r2,4
   17fc4:	194000cc 	andi	r5,r3,3
   17fc8:	2800021e 	bne	r5,zero,17fd4 <__lo0bits+0x68>
   17fcc:	1806d0ba 	srli	r3,r3,2
   17fd0:	10800084 	addi	r2,r2,2
   17fd4:	1940004c 	andi	r5,r3,1
   17fd8:	2800081e 	bne	r5,zero,17ffc <__lo0bits+0x90>
   17fdc:	1806d07a 	srli	r3,r3,1
   17fe0:	1800051e 	bne	r3,zero,17ff8 <__lo0bits+0x8c>
   17fe4:	00800804 	movi	r2,32
   17fe8:	f800283a 	ret
   17fec:	1806d43a 	srli	r3,r3,16
   17ff0:	00800404 	movi	r2,16
   17ff4:	003feb06 	br	17fa4 <__alt_data_end+0xfc017fa4>
   17ff8:	10800044 	addi	r2,r2,1
   17ffc:	20c00015 	stw	r3,0(r4)
   18000:	f800283a 	ret
   18004:	0005883a 	mov	r2,zero
   18008:	f800283a 	ret
   1800c:	1806d07a 	srli	r3,r3,1
   18010:	00800044 	movi	r2,1
   18014:	20c00015 	stw	r3,0(r4)
   18018:	f800283a 	ret

0001801c <__i2b>:
   1801c:	defffd04 	addi	sp,sp,-12
   18020:	dc000015 	stw	r16,0(sp)
   18024:	04000044 	movi	r16,1
   18028:	dc400115 	stw	r17,4(sp)
   1802c:	2823883a 	mov	r17,r5
   18030:	800b883a 	mov	r5,r16
   18034:	dfc00215 	stw	ra,8(sp)
   18038:	0017be80 	call	17be8 <_Balloc>
   1803c:	14400515 	stw	r17,20(r2)
   18040:	14000415 	stw	r16,16(r2)
   18044:	dfc00217 	ldw	ra,8(sp)
   18048:	dc400117 	ldw	r17,4(sp)
   1804c:	dc000017 	ldw	r16,0(sp)
   18050:	dec00304 	addi	sp,sp,12
   18054:	f800283a 	ret

00018058 <__multiply>:
   18058:	deffef04 	addi	sp,sp,-68
   1805c:	dc400815 	stw	r17,32(sp)
   18060:	dc000715 	stw	r16,28(sp)
   18064:	34400417 	ldw	r17,16(r6)
   18068:	2c000417 	ldw	r16,16(r5)
   1806c:	dd800d15 	stw	r22,52(sp)
   18070:	dc800915 	stw	r18,36(sp)
   18074:	dfc01015 	stw	ra,64(sp)
   18078:	df000f15 	stw	fp,60(sp)
   1807c:	ddc00e15 	stw	r23,56(sp)
   18080:	dd400c15 	stw	r21,48(sp)
   18084:	dd000b15 	stw	r20,44(sp)
   18088:	dcc00a15 	stw	r19,40(sp)
   1808c:	2825883a 	mov	r18,r5
   18090:	302d883a 	mov	r22,r6
   18094:	8440050e 	bge	r16,r17,180ac <__multiply+0x54>
   18098:	8007883a 	mov	r3,r16
   1809c:	3025883a 	mov	r18,r6
   180a0:	8821883a 	mov	r16,r17
   180a4:	282d883a 	mov	r22,r5
   180a8:	1823883a 	mov	r17,r3
   180ac:	90800217 	ldw	r2,8(r18)
   180b0:	8447883a 	add	r3,r16,r17
   180b4:	d8c00215 	stw	r3,8(sp)
   180b8:	91400117 	ldw	r5,4(r18)
   180bc:	10c0010e 	bge	r2,r3,180c4 <__multiply+0x6c>
   180c0:	29400044 	addi	r5,r5,1
   180c4:	0017be80 	call	17be8 <_Balloc>
   180c8:	d8c00217 	ldw	r3,8(sp)
   180cc:	d8800615 	stw	r2,24(sp)
   180d0:	18eb883a 	add	r21,r3,r3
   180d4:	ad6b883a 	add	r21,r21,r21
   180d8:	10c00504 	addi	r3,r2,20
   180dc:	1d6b883a 	add	r21,r3,r21
   180e0:	d8c00115 	stw	r3,4(sp)
   180e4:	dd400315 	stw	r21,12(sp)
   180e8:	1805883a 	mov	r2,r3
   180ec:	1d40042e 	bgeu	r3,r21,18100 <__multiply+0xa8>
   180f0:	d8c00317 	ldw	r3,12(sp)
   180f4:	10000015 	stw	zero,0(r2)
   180f8:	10800104 	addi	r2,r2,4
   180fc:	10fffc36 	bltu	r2,r3,180f0 <__alt_data_end+0xfc0180f0>
   18100:	8c63883a 	add	r17,r17,r17
   18104:	b5800504 	addi	r22,r22,20
   18108:	8c63883a 	add	r17,r17,r17
   1810c:	94800504 	addi	r18,r18,20
   18110:	8421883a 	add	r16,r16,r16
   18114:	b463883a 	add	r17,r22,r17
   18118:	8421883a 	add	r16,r16,r16
   1811c:	dd800015 	stw	r22,0(sp)
   18120:	dc800415 	stw	r18,16(sp)
   18124:	dc400515 	stw	r17,20(sp)
   18128:	9429883a 	add	r20,r18,r16
   1812c:	b4404f2e 	bgeu	r22,r17,1826c <__multiply+0x214>
   18130:	d8c00017 	ldw	r3,0(sp)
   18134:	1c800017 	ldw	r18,0(r3)
   18138:	947fffcc 	andi	r17,r18,65535
   1813c:	88001e26 	beq	r17,zero,181b8 <__multiply+0x160>
   18140:	dd800117 	ldw	r22,4(sp)
   18144:	dd400417 	ldw	r21,16(sp)
   18148:	0027883a 	mov	r19,zero
   1814c:	ac800017 	ldw	r18,0(r21)
   18150:	b4000017 	ldw	r16,0(r22)
   18154:	880b883a 	mov	r5,r17
   18158:	913fffcc 	andi	r4,r18,65535
   1815c:	000d8b80 	call	d8b8 <__mulsi3>
   18160:	9008d43a 	srli	r4,r18,16
   18164:	84bfffcc 	andi	r18,r16,65535
   18168:	1485883a 	add	r2,r2,r18
   1816c:	14e5883a 	add	r18,r2,r19
   18170:	8020d43a 	srli	r16,r16,16
   18174:	9026d43a 	srli	r19,r18,16
   18178:	880b883a 	mov	r5,r17
   1817c:	000d8b80 	call	d8b8 <__mulsi3>
   18180:	1405883a 	add	r2,r2,r16
   18184:	14e1883a 	add	r16,r2,r19
   18188:	90ffffcc 	andi	r3,r18,65535
   1818c:	8024943a 	slli	r18,r16,16
   18190:	ad400104 	addi	r21,r21,4
   18194:	b005883a 	mov	r2,r22
   18198:	90c6b03a 	or	r3,r18,r3
   1819c:	b0c00015 	stw	r3,0(r22)
   181a0:	8026d43a 	srli	r19,r16,16
   181a4:	b5800104 	addi	r22,r22,4
   181a8:	ad3fe836 	bltu	r21,r20,1814c <__alt_data_end+0xfc01814c>
   181ac:	d8c00017 	ldw	r3,0(sp)
   181b0:	14c00115 	stw	r19,4(r2)
   181b4:	1c800017 	ldw	r18,0(r3)
   181b8:	9024d43a 	srli	r18,r18,16
   181bc:	90002226 	beq	r18,zero,18248 <__multiply+0x1f0>
   181c0:	d8c00117 	ldw	r3,4(sp)
   181c4:	dd800417 	ldw	r22,16(sp)
   181c8:	002f883a 	mov	r23,zero
   181cc:	1f000017 	ldw	fp,0(r3)
   181d0:	1823883a 	mov	r17,r3
   181d4:	182b883a 	mov	r21,r3
   181d8:	e021883a 	mov	r16,fp
   181dc:	00000106 	br	181e4 <__multiply+0x18c>
   181e0:	982b883a 	mov	r21,r19
   181e4:	b100000b 	ldhu	r4,0(r22)
   181e8:	8020d43a 	srli	r16,r16,16
   181ec:	900b883a 	mov	r5,r18
   181f0:	000d8b80 	call	d8b8 <__mulsi3>
   181f4:	1405883a 	add	r2,r2,r16
   181f8:	15ef883a 	add	r23,r2,r23
   181fc:	b804943a 	slli	r2,r23,16
   18200:	e0ffffcc 	andi	r3,fp,65535
   18204:	8c400104 	addi	r17,r17,4
   18208:	10c6b03a 	or	r3,r2,r3
   1820c:	88ffff15 	stw	r3,-4(r17)
   18210:	b5800104 	addi	r22,r22,4
   18214:	b13fff17 	ldw	r4,-4(r22)
   18218:	acc00104 	addi	r19,r21,4
   1821c:	900b883a 	mov	r5,r18
   18220:	2008d43a 	srli	r4,r4,16
   18224:	9c000017 	ldw	r16,0(r19)
   18228:	000d8b80 	call	d8b8 <__mulsi3>
   1822c:	b806d43a 	srli	r3,r23,16
   18230:	813fffcc 	andi	r4,r16,65535
   18234:	1105883a 	add	r2,r2,r4
   18238:	10f9883a 	add	fp,r2,r3
   1823c:	e02ed43a 	srli	r23,fp,16
   18240:	b53fe736 	bltu	r22,r20,181e0 <__alt_data_end+0xfc0181e0>
   18244:	af000115 	stw	fp,4(r21)
   18248:	d8c00017 	ldw	r3,0(sp)
   1824c:	d9000517 	ldw	r4,20(sp)
   18250:	18c00104 	addi	r3,r3,4
   18254:	d8c00015 	stw	r3,0(sp)
   18258:	d8c00117 	ldw	r3,4(sp)
   1825c:	18c00104 	addi	r3,r3,4
   18260:	d8c00115 	stw	r3,4(sp)
   18264:	d8c00017 	ldw	r3,0(sp)
   18268:	193fb136 	bltu	r3,r4,18130 <__alt_data_end+0xfc018130>
   1826c:	d8c00217 	ldw	r3,8(sp)
   18270:	00c00c0e 	bge	zero,r3,182a4 <__multiply+0x24c>
   18274:	d8c00317 	ldw	r3,12(sp)
   18278:	18bfff17 	ldw	r2,-4(r3)
   1827c:	1d7fff04 	addi	r21,r3,-4
   18280:	10000326 	beq	r2,zero,18290 <__multiply+0x238>
   18284:	00000706 	br	182a4 <__multiply+0x24c>
   18288:	a8800017 	ldw	r2,0(r21)
   1828c:	1000051e 	bne	r2,zero,182a4 <__multiply+0x24c>
   18290:	d8c00217 	ldw	r3,8(sp)
   18294:	ad7fff04 	addi	r21,r21,-4
   18298:	18ffffc4 	addi	r3,r3,-1
   1829c:	d8c00215 	stw	r3,8(sp)
   182a0:	183ff91e 	bne	r3,zero,18288 <__alt_data_end+0xfc018288>
   182a4:	d8c00617 	ldw	r3,24(sp)
   182a8:	d9000217 	ldw	r4,8(sp)
   182ac:	1805883a 	mov	r2,r3
   182b0:	19000415 	stw	r4,16(r3)
   182b4:	dfc01017 	ldw	ra,64(sp)
   182b8:	df000f17 	ldw	fp,60(sp)
   182bc:	ddc00e17 	ldw	r23,56(sp)
   182c0:	dd800d17 	ldw	r22,52(sp)
   182c4:	dd400c17 	ldw	r21,48(sp)
   182c8:	dd000b17 	ldw	r20,44(sp)
   182cc:	dcc00a17 	ldw	r19,40(sp)
   182d0:	dc800917 	ldw	r18,36(sp)
   182d4:	dc400817 	ldw	r17,32(sp)
   182d8:	dc000717 	ldw	r16,28(sp)
   182dc:	dec01104 	addi	sp,sp,68
   182e0:	f800283a 	ret

000182e4 <__pow5mult>:
   182e4:	defffa04 	addi	sp,sp,-24
   182e8:	dcc00315 	stw	r19,12(sp)
   182ec:	dc000015 	stw	r16,0(sp)
   182f0:	dfc00515 	stw	ra,20(sp)
   182f4:	dd000415 	stw	r20,16(sp)
   182f8:	dc800215 	stw	r18,8(sp)
   182fc:	dc400115 	stw	r17,4(sp)
   18300:	308000cc 	andi	r2,r6,3
   18304:	3021883a 	mov	r16,r6
   18308:	2027883a 	mov	r19,r4
   1830c:	10002f1e 	bne	r2,zero,183cc <__pow5mult+0xe8>
   18310:	2825883a 	mov	r18,r5
   18314:	8021d0ba 	srai	r16,r16,2
   18318:	80001a26 	beq	r16,zero,18384 <__pow5mult+0xa0>
   1831c:	9c401217 	ldw	r17,72(r19)
   18320:	8800061e 	bne	r17,zero,1833c <__pow5mult+0x58>
   18324:	00003406 	br	183f8 <__pow5mult+0x114>
   18328:	8021d07a 	srai	r16,r16,1
   1832c:	80001526 	beq	r16,zero,18384 <__pow5mult+0xa0>
   18330:	88800017 	ldw	r2,0(r17)
   18334:	10001c26 	beq	r2,zero,183a8 <__pow5mult+0xc4>
   18338:	1023883a 	mov	r17,r2
   1833c:	8080004c 	andi	r2,r16,1
   18340:	103ff926 	beq	r2,zero,18328 <__alt_data_end+0xfc018328>
   18344:	880d883a 	mov	r6,r17
   18348:	900b883a 	mov	r5,r18
   1834c:	9809883a 	mov	r4,r19
   18350:	00180580 	call	18058 <__multiply>
   18354:	90001b26 	beq	r18,zero,183c4 <__pow5mult+0xe0>
   18358:	91000117 	ldw	r4,4(r18)
   1835c:	98c01317 	ldw	r3,76(r19)
   18360:	8021d07a 	srai	r16,r16,1
   18364:	2109883a 	add	r4,r4,r4
   18368:	2109883a 	add	r4,r4,r4
   1836c:	1907883a 	add	r3,r3,r4
   18370:	19000017 	ldw	r4,0(r3)
   18374:	91000015 	stw	r4,0(r18)
   18378:	1c800015 	stw	r18,0(r3)
   1837c:	1025883a 	mov	r18,r2
   18380:	803feb1e 	bne	r16,zero,18330 <__alt_data_end+0xfc018330>
   18384:	9005883a 	mov	r2,r18
   18388:	dfc00517 	ldw	ra,20(sp)
   1838c:	dd000417 	ldw	r20,16(sp)
   18390:	dcc00317 	ldw	r19,12(sp)
   18394:	dc800217 	ldw	r18,8(sp)
   18398:	dc400117 	ldw	r17,4(sp)
   1839c:	dc000017 	ldw	r16,0(sp)
   183a0:	dec00604 	addi	sp,sp,24
   183a4:	f800283a 	ret
   183a8:	880d883a 	mov	r6,r17
   183ac:	880b883a 	mov	r5,r17
   183b0:	9809883a 	mov	r4,r19
   183b4:	00180580 	call	18058 <__multiply>
   183b8:	88800015 	stw	r2,0(r17)
   183bc:	10000015 	stw	zero,0(r2)
   183c0:	003fdd06 	br	18338 <__alt_data_end+0xfc018338>
   183c4:	1025883a 	mov	r18,r2
   183c8:	003fd706 	br	18328 <__alt_data_end+0xfc018328>
   183cc:	10bfffc4 	addi	r2,r2,-1
   183d0:	1085883a 	add	r2,r2,r2
   183d4:	00c000f4 	movhi	r3,3
   183d8:	18ee1504 	addi	r3,r3,-18348
   183dc:	1085883a 	add	r2,r2,r2
   183e0:	1885883a 	add	r2,r3,r2
   183e4:	11800017 	ldw	r6,0(r2)
   183e8:	000f883a 	mov	r7,zero
   183ec:	0017cb80 	call	17cb8 <__multadd>
   183f0:	1025883a 	mov	r18,r2
   183f4:	003fc706 	br	18314 <__alt_data_end+0xfc018314>
   183f8:	05000044 	movi	r20,1
   183fc:	a00b883a 	mov	r5,r20
   18400:	9809883a 	mov	r4,r19
   18404:	0017be80 	call	17be8 <_Balloc>
   18408:	1023883a 	mov	r17,r2
   1840c:	00809c44 	movi	r2,625
   18410:	88800515 	stw	r2,20(r17)
   18414:	8d000415 	stw	r20,16(r17)
   18418:	9c401215 	stw	r17,72(r19)
   1841c:	88000015 	stw	zero,0(r17)
   18420:	003fc606 	br	1833c <__alt_data_end+0xfc01833c>

00018424 <__lshift>:
   18424:	defff904 	addi	sp,sp,-28
   18428:	dd400515 	stw	r21,20(sp)
   1842c:	dcc00315 	stw	r19,12(sp)
   18430:	302bd17a 	srai	r21,r6,5
   18434:	2cc00417 	ldw	r19,16(r5)
   18438:	28800217 	ldw	r2,8(r5)
   1843c:	dd000415 	stw	r20,16(sp)
   18440:	ace7883a 	add	r19,r21,r19
   18444:	dc800215 	stw	r18,8(sp)
   18448:	dc400115 	stw	r17,4(sp)
   1844c:	dc000015 	stw	r16,0(sp)
   18450:	dfc00615 	stw	ra,24(sp)
   18454:	9c000044 	addi	r16,r19,1
   18458:	2823883a 	mov	r17,r5
   1845c:	3029883a 	mov	r20,r6
   18460:	2025883a 	mov	r18,r4
   18464:	29400117 	ldw	r5,4(r5)
   18468:	1400030e 	bge	r2,r16,18478 <__lshift+0x54>
   1846c:	1085883a 	add	r2,r2,r2
   18470:	29400044 	addi	r5,r5,1
   18474:	143ffd16 	blt	r2,r16,1846c <__alt_data_end+0xfc01846c>
   18478:	9009883a 	mov	r4,r18
   1847c:	0017be80 	call	17be8 <_Balloc>
   18480:	10c00504 	addi	r3,r2,20
   18484:	0540070e 	bge	zero,r21,184a4 <__lshift+0x80>
   18488:	ad6b883a 	add	r21,r21,r21
   1848c:	ad6b883a 	add	r21,r21,r21
   18490:	1809883a 	mov	r4,r3
   18494:	1d47883a 	add	r3,r3,r21
   18498:	20000015 	stw	zero,0(r4)
   1849c:	21000104 	addi	r4,r4,4
   184a0:	193ffd1e 	bne	r3,r4,18498 <__alt_data_end+0xfc018498>
   184a4:	8a000417 	ldw	r8,16(r17)
   184a8:	89000504 	addi	r4,r17,20
   184ac:	a18007cc 	andi	r6,r20,31
   184b0:	4211883a 	add	r8,r8,r8
   184b4:	4211883a 	add	r8,r8,r8
   184b8:	2211883a 	add	r8,r4,r8
   184bc:	30002326 	beq	r6,zero,1854c <__lshift+0x128>
   184c0:	02400804 	movi	r9,32
   184c4:	4993c83a 	sub	r9,r9,r6
   184c8:	000b883a 	mov	r5,zero
   184cc:	21c00017 	ldw	r7,0(r4)
   184d0:	1815883a 	mov	r10,r3
   184d4:	18c00104 	addi	r3,r3,4
   184d8:	398e983a 	sll	r7,r7,r6
   184dc:	21000104 	addi	r4,r4,4
   184e0:	394ab03a 	or	r5,r7,r5
   184e4:	197fff15 	stw	r5,-4(r3)
   184e8:	217fff17 	ldw	r5,-4(r4)
   184ec:	2a4ad83a 	srl	r5,r5,r9
   184f0:	223ff636 	bltu	r4,r8,184cc <__alt_data_end+0xfc0184cc>
   184f4:	51400115 	stw	r5,4(r10)
   184f8:	28001a1e 	bne	r5,zero,18564 <__lshift+0x140>
   184fc:	843fffc4 	addi	r16,r16,-1
   18500:	14000415 	stw	r16,16(r2)
   18504:	88000826 	beq	r17,zero,18528 <__lshift+0x104>
   18508:	89000117 	ldw	r4,4(r17)
   1850c:	90c01317 	ldw	r3,76(r18)
   18510:	2109883a 	add	r4,r4,r4
   18514:	2109883a 	add	r4,r4,r4
   18518:	1907883a 	add	r3,r3,r4
   1851c:	19000017 	ldw	r4,0(r3)
   18520:	89000015 	stw	r4,0(r17)
   18524:	1c400015 	stw	r17,0(r3)
   18528:	dfc00617 	ldw	ra,24(sp)
   1852c:	dd400517 	ldw	r21,20(sp)
   18530:	dd000417 	ldw	r20,16(sp)
   18534:	dcc00317 	ldw	r19,12(sp)
   18538:	dc800217 	ldw	r18,8(sp)
   1853c:	dc400117 	ldw	r17,4(sp)
   18540:	dc000017 	ldw	r16,0(sp)
   18544:	dec00704 	addi	sp,sp,28
   18548:	f800283a 	ret
   1854c:	21400017 	ldw	r5,0(r4)
   18550:	18c00104 	addi	r3,r3,4
   18554:	21000104 	addi	r4,r4,4
   18558:	197fff15 	stw	r5,-4(r3)
   1855c:	223ffb36 	bltu	r4,r8,1854c <__alt_data_end+0xfc01854c>
   18560:	003fe606 	br	184fc <__alt_data_end+0xfc0184fc>
   18564:	9c000084 	addi	r16,r19,2
   18568:	003fe406 	br	184fc <__alt_data_end+0xfc0184fc>

0001856c <__mcmp>:
   1856c:	20800417 	ldw	r2,16(r4)
   18570:	28c00417 	ldw	r3,16(r5)
   18574:	10c5c83a 	sub	r2,r2,r3
   18578:	1000111e 	bne	r2,zero,185c0 <__mcmp+0x54>
   1857c:	18c7883a 	add	r3,r3,r3
   18580:	18c7883a 	add	r3,r3,r3
   18584:	21000504 	addi	r4,r4,20
   18588:	29400504 	addi	r5,r5,20
   1858c:	20c5883a 	add	r2,r4,r3
   18590:	28cb883a 	add	r5,r5,r3
   18594:	00000106 	br	1859c <__mcmp+0x30>
   18598:	20800a2e 	bgeu	r4,r2,185c4 <__mcmp+0x58>
   1859c:	10bfff04 	addi	r2,r2,-4
   185a0:	297fff04 	addi	r5,r5,-4
   185a4:	11800017 	ldw	r6,0(r2)
   185a8:	28c00017 	ldw	r3,0(r5)
   185ac:	30fffa26 	beq	r6,r3,18598 <__alt_data_end+0xfc018598>
   185b0:	30c00236 	bltu	r6,r3,185bc <__mcmp+0x50>
   185b4:	00800044 	movi	r2,1
   185b8:	f800283a 	ret
   185bc:	00bfffc4 	movi	r2,-1
   185c0:	f800283a 	ret
   185c4:	0005883a 	mov	r2,zero
   185c8:	f800283a 	ret

000185cc <__mdiff>:
   185cc:	28c00417 	ldw	r3,16(r5)
   185d0:	30800417 	ldw	r2,16(r6)
   185d4:	defffa04 	addi	sp,sp,-24
   185d8:	dcc00315 	stw	r19,12(sp)
   185dc:	dc800215 	stw	r18,8(sp)
   185e0:	dfc00515 	stw	ra,20(sp)
   185e4:	dd000415 	stw	r20,16(sp)
   185e8:	dc400115 	stw	r17,4(sp)
   185ec:	dc000015 	stw	r16,0(sp)
   185f0:	1887c83a 	sub	r3,r3,r2
   185f4:	2825883a 	mov	r18,r5
   185f8:	3027883a 	mov	r19,r6
   185fc:	1800141e 	bne	r3,zero,18650 <__mdiff+0x84>
   18600:	1085883a 	add	r2,r2,r2
   18604:	1085883a 	add	r2,r2,r2
   18608:	2a000504 	addi	r8,r5,20
   1860c:	34000504 	addi	r16,r6,20
   18610:	4087883a 	add	r3,r8,r2
   18614:	8085883a 	add	r2,r16,r2
   18618:	00000106 	br	18620 <__mdiff+0x54>
   1861c:	40c0592e 	bgeu	r8,r3,18784 <__mdiff+0x1b8>
   18620:	18ffff04 	addi	r3,r3,-4
   18624:	10bfff04 	addi	r2,r2,-4
   18628:	19c00017 	ldw	r7,0(r3)
   1862c:	11400017 	ldw	r5,0(r2)
   18630:	397ffa26 	beq	r7,r5,1861c <__alt_data_end+0xfc01861c>
   18634:	3940592e 	bgeu	r7,r5,1879c <__mdiff+0x1d0>
   18638:	9005883a 	mov	r2,r18
   1863c:	4023883a 	mov	r17,r8
   18640:	9825883a 	mov	r18,r19
   18644:	05000044 	movi	r20,1
   18648:	1027883a 	mov	r19,r2
   1864c:	00000406 	br	18660 <__mdiff+0x94>
   18650:	18005616 	blt	r3,zero,187ac <__mdiff+0x1e0>
   18654:	34400504 	addi	r17,r6,20
   18658:	2c000504 	addi	r16,r5,20
   1865c:	0029883a 	mov	r20,zero
   18660:	91400117 	ldw	r5,4(r18)
   18664:	0017be80 	call	17be8 <_Balloc>
   18668:	92400417 	ldw	r9,16(r18)
   1866c:	9b000417 	ldw	r12,16(r19)
   18670:	12c00504 	addi	r11,r2,20
   18674:	4a51883a 	add	r8,r9,r9
   18678:	6319883a 	add	r12,r12,r12
   1867c:	4211883a 	add	r8,r8,r8
   18680:	6319883a 	add	r12,r12,r12
   18684:	15000315 	stw	r20,12(r2)
   18688:	8211883a 	add	r8,r16,r8
   1868c:	8b19883a 	add	r12,r17,r12
   18690:	0007883a 	mov	r3,zero
   18694:	81400017 	ldw	r5,0(r16)
   18698:	89c00017 	ldw	r7,0(r17)
   1869c:	59800104 	addi	r6,r11,4
   186a0:	293fffcc 	andi	r4,r5,65535
   186a4:	20c7883a 	add	r3,r4,r3
   186a8:	393fffcc 	andi	r4,r7,65535
   186ac:	1909c83a 	sub	r4,r3,r4
   186b0:	280ad43a 	srli	r5,r5,16
   186b4:	380ed43a 	srli	r7,r7,16
   186b8:	2007d43a 	srai	r3,r4,16
   186bc:	213fffcc 	andi	r4,r4,65535
   186c0:	29cbc83a 	sub	r5,r5,r7
   186c4:	28c7883a 	add	r3,r5,r3
   186c8:	180a943a 	slli	r5,r3,16
   186cc:	8c400104 	addi	r17,r17,4
   186d0:	84000104 	addi	r16,r16,4
   186d4:	2908b03a 	or	r4,r5,r4
   186d8:	59000015 	stw	r4,0(r11)
   186dc:	1807d43a 	srai	r3,r3,16
   186e0:	3015883a 	mov	r10,r6
   186e4:	3017883a 	mov	r11,r6
   186e8:	8b3fea36 	bltu	r17,r12,18694 <__alt_data_end+0xfc018694>
   186ec:	8200162e 	bgeu	r16,r8,18748 <__mdiff+0x17c>
   186f0:	8017883a 	mov	r11,r16
   186f4:	59400017 	ldw	r5,0(r11)
   186f8:	31800104 	addi	r6,r6,4
   186fc:	5ac00104 	addi	r11,r11,4
   18700:	293fffcc 	andi	r4,r5,65535
   18704:	20c7883a 	add	r3,r4,r3
   18708:	280ed43a 	srli	r7,r5,16
   1870c:	180bd43a 	srai	r5,r3,16
   18710:	193fffcc 	andi	r4,r3,65535
   18714:	3947883a 	add	r3,r7,r5
   18718:	180a943a 	slli	r5,r3,16
   1871c:	1807d43a 	srai	r3,r3,16
   18720:	2908b03a 	or	r4,r5,r4
   18724:	313fff15 	stw	r4,-4(r6)
   18728:	5a3ff236 	bltu	r11,r8,186f4 <__alt_data_end+0xfc0186f4>
   1872c:	0406303a 	nor	r3,zero,r16
   18730:	1a07883a 	add	r3,r3,r8
   18734:	1806d0ba 	srli	r3,r3,2
   18738:	18c00044 	addi	r3,r3,1
   1873c:	18c7883a 	add	r3,r3,r3
   18740:	18c7883a 	add	r3,r3,r3
   18744:	50d5883a 	add	r10,r10,r3
   18748:	50ffff04 	addi	r3,r10,-4
   1874c:	2000041e 	bne	r4,zero,18760 <__mdiff+0x194>
   18750:	18ffff04 	addi	r3,r3,-4
   18754:	19000017 	ldw	r4,0(r3)
   18758:	4a7fffc4 	addi	r9,r9,-1
   1875c:	203ffc26 	beq	r4,zero,18750 <__alt_data_end+0xfc018750>
   18760:	12400415 	stw	r9,16(r2)
   18764:	dfc00517 	ldw	ra,20(sp)
   18768:	dd000417 	ldw	r20,16(sp)
   1876c:	dcc00317 	ldw	r19,12(sp)
   18770:	dc800217 	ldw	r18,8(sp)
   18774:	dc400117 	ldw	r17,4(sp)
   18778:	dc000017 	ldw	r16,0(sp)
   1877c:	dec00604 	addi	sp,sp,24
   18780:	f800283a 	ret
   18784:	000b883a 	mov	r5,zero
   18788:	0017be80 	call	17be8 <_Balloc>
   1878c:	00c00044 	movi	r3,1
   18790:	10c00415 	stw	r3,16(r2)
   18794:	10000515 	stw	zero,20(r2)
   18798:	003ff206 	br	18764 <__alt_data_end+0xfc018764>
   1879c:	8023883a 	mov	r17,r16
   187a0:	0029883a 	mov	r20,zero
   187a4:	4021883a 	mov	r16,r8
   187a8:	003fad06 	br	18660 <__alt_data_end+0xfc018660>
   187ac:	9005883a 	mov	r2,r18
   187b0:	94400504 	addi	r17,r18,20
   187b4:	9c000504 	addi	r16,r19,20
   187b8:	9825883a 	mov	r18,r19
   187bc:	05000044 	movi	r20,1
   187c0:	1027883a 	mov	r19,r2
   187c4:	003fa606 	br	18660 <__alt_data_end+0xfc018660>

000187c8 <__ulp>:
   187c8:	295ffc2c 	andhi	r5,r5,32752
   187cc:	00bf3034 	movhi	r2,64704
   187d0:	2887883a 	add	r3,r5,r2
   187d4:	00c0020e 	bge	zero,r3,187e0 <__ulp+0x18>
   187d8:	0005883a 	mov	r2,zero
   187dc:	f800283a 	ret
   187e0:	00c7c83a 	sub	r3,zero,r3
   187e4:	1807d53a 	srai	r3,r3,20
   187e8:	008004c4 	movi	r2,19
   187ec:	10c00b0e 	bge	r2,r3,1881c <__ulp+0x54>
   187f0:	18bffb04 	addi	r2,r3,-20
   187f4:	01000784 	movi	r4,30
   187f8:	0007883a 	mov	r3,zero
   187fc:	20800516 	blt	r4,r2,18814 <__ulp+0x4c>
   18800:	010007c4 	movi	r4,31
   18804:	2089c83a 	sub	r4,r4,r2
   18808:	00800044 	movi	r2,1
   1880c:	1104983a 	sll	r2,r2,r4
   18810:	f800283a 	ret
   18814:	00800044 	movi	r2,1
   18818:	f800283a 	ret
   1881c:	01400234 	movhi	r5,8
   18820:	28c7d83a 	sra	r3,r5,r3
   18824:	0005883a 	mov	r2,zero
   18828:	f800283a 	ret

0001882c <__b2d>:
   1882c:	defffa04 	addi	sp,sp,-24
   18830:	dc000015 	stw	r16,0(sp)
   18834:	24000417 	ldw	r16,16(r4)
   18838:	dc400115 	stw	r17,4(sp)
   1883c:	24400504 	addi	r17,r4,20
   18840:	8421883a 	add	r16,r16,r16
   18844:	8421883a 	add	r16,r16,r16
   18848:	8c21883a 	add	r16,r17,r16
   1884c:	dc800215 	stw	r18,8(sp)
   18850:	84bfff17 	ldw	r18,-4(r16)
   18854:	dd000415 	stw	r20,16(sp)
   18858:	dcc00315 	stw	r19,12(sp)
   1885c:	9009883a 	mov	r4,r18
   18860:	2829883a 	mov	r20,r5
   18864:	dfc00515 	stw	ra,20(sp)
   18868:	0017f040 	call	17f04 <__hi0bits>
   1886c:	00c00804 	movi	r3,32
   18870:	1889c83a 	sub	r4,r3,r2
   18874:	a1000015 	stw	r4,0(r20)
   18878:	01000284 	movi	r4,10
   1887c:	84ffff04 	addi	r19,r16,-4
   18880:	20801216 	blt	r4,r2,188cc <__b2d+0xa0>
   18884:	018002c4 	movi	r6,11
   18888:	308dc83a 	sub	r6,r6,r2
   1888c:	9186d83a 	srl	r3,r18,r6
   18890:	18cffc34 	orhi	r3,r3,16368
   18894:	8cc0212e 	bgeu	r17,r19,1891c <__b2d+0xf0>
   18898:	813ffe17 	ldw	r4,-8(r16)
   1889c:	218cd83a 	srl	r6,r4,r6
   188a0:	10800544 	addi	r2,r2,21
   188a4:	9084983a 	sll	r2,r18,r2
   188a8:	1184b03a 	or	r2,r2,r6
   188ac:	dfc00517 	ldw	ra,20(sp)
   188b0:	dd000417 	ldw	r20,16(sp)
   188b4:	dcc00317 	ldw	r19,12(sp)
   188b8:	dc800217 	ldw	r18,8(sp)
   188bc:	dc400117 	ldw	r17,4(sp)
   188c0:	dc000017 	ldw	r16,0(sp)
   188c4:	dec00604 	addi	sp,sp,24
   188c8:	f800283a 	ret
   188cc:	8cc00f2e 	bgeu	r17,r19,1890c <__b2d+0xe0>
   188d0:	117ffd44 	addi	r5,r2,-11
   188d4:	80bffe17 	ldw	r2,-8(r16)
   188d8:	28000e26 	beq	r5,zero,18914 <__b2d+0xe8>
   188dc:	1949c83a 	sub	r4,r3,r5
   188e0:	9164983a 	sll	r18,r18,r5
   188e4:	1106d83a 	srl	r3,r2,r4
   188e8:	81bffe04 	addi	r6,r16,-8
   188ec:	948ffc34 	orhi	r18,r18,16368
   188f0:	90c6b03a 	or	r3,r18,r3
   188f4:	89800e2e 	bgeu	r17,r6,18930 <__b2d+0x104>
   188f8:	81bffd17 	ldw	r6,-12(r16)
   188fc:	1144983a 	sll	r2,r2,r5
   18900:	310ad83a 	srl	r5,r6,r4
   18904:	2884b03a 	or	r2,r5,r2
   18908:	003fe806 	br	188ac <__alt_data_end+0xfc0188ac>
   1890c:	10bffd44 	addi	r2,r2,-11
   18910:	1000041e 	bne	r2,zero,18924 <__b2d+0xf8>
   18914:	90cffc34 	orhi	r3,r18,16368
   18918:	003fe406 	br	188ac <__alt_data_end+0xfc0188ac>
   1891c:	000d883a 	mov	r6,zero
   18920:	003fdf06 	br	188a0 <__alt_data_end+0xfc0188a0>
   18924:	90a4983a 	sll	r18,r18,r2
   18928:	0005883a 	mov	r2,zero
   1892c:	003ff906 	br	18914 <__alt_data_end+0xfc018914>
   18930:	1144983a 	sll	r2,r2,r5
   18934:	003fdd06 	br	188ac <__alt_data_end+0xfc0188ac>

00018938 <__d2b>:
   18938:	defff804 	addi	sp,sp,-32
   1893c:	dc000215 	stw	r16,8(sp)
   18940:	3021883a 	mov	r16,r6
   18944:	dc400315 	stw	r17,12(sp)
   18948:	8022907a 	slli	r17,r16,1
   1894c:	dd000615 	stw	r20,24(sp)
   18950:	2829883a 	mov	r20,r5
   18954:	01400044 	movi	r5,1
   18958:	dcc00515 	stw	r19,20(sp)
   1895c:	dc800415 	stw	r18,16(sp)
   18960:	dfc00715 	stw	ra,28(sp)
   18964:	3825883a 	mov	r18,r7
   18968:	8822d57a 	srli	r17,r17,21
   1896c:	0017be80 	call	17be8 <_Balloc>
   18970:	1027883a 	mov	r19,r2
   18974:	00800434 	movhi	r2,16
   18978:	10bfffc4 	addi	r2,r2,-1
   1897c:	808c703a 	and	r6,r16,r2
   18980:	88000126 	beq	r17,zero,18988 <__d2b+0x50>
   18984:	31800434 	orhi	r6,r6,16
   18988:	d9800015 	stw	r6,0(sp)
   1898c:	a0002426 	beq	r20,zero,18a20 <__d2b+0xe8>
   18990:	d9000104 	addi	r4,sp,4
   18994:	dd000115 	stw	r20,4(sp)
   18998:	0017f6c0 	call	17f6c <__lo0bits>
   1899c:	d8c00017 	ldw	r3,0(sp)
   189a0:	10002f1e 	bne	r2,zero,18a60 <__d2b+0x128>
   189a4:	d9000117 	ldw	r4,4(sp)
   189a8:	99000515 	stw	r4,20(r19)
   189ac:	1821003a 	cmpeq	r16,r3,zero
   189b0:	01000084 	movi	r4,2
   189b4:	2421c83a 	sub	r16,r4,r16
   189b8:	98c00615 	stw	r3,24(r19)
   189bc:	9c000415 	stw	r16,16(r19)
   189c0:	88001f1e 	bne	r17,zero,18a40 <__d2b+0x108>
   189c4:	10bef384 	addi	r2,r2,-1074
   189c8:	90800015 	stw	r2,0(r18)
   189cc:	00900034 	movhi	r2,16384
   189d0:	10bfffc4 	addi	r2,r2,-1
   189d4:	8085883a 	add	r2,r16,r2
   189d8:	1085883a 	add	r2,r2,r2
   189dc:	1085883a 	add	r2,r2,r2
   189e0:	9885883a 	add	r2,r19,r2
   189e4:	11000517 	ldw	r4,20(r2)
   189e8:	8020917a 	slli	r16,r16,5
   189ec:	0017f040 	call	17f04 <__hi0bits>
   189f0:	d8c00817 	ldw	r3,32(sp)
   189f4:	8085c83a 	sub	r2,r16,r2
   189f8:	18800015 	stw	r2,0(r3)
   189fc:	9805883a 	mov	r2,r19
   18a00:	dfc00717 	ldw	ra,28(sp)
   18a04:	dd000617 	ldw	r20,24(sp)
   18a08:	dcc00517 	ldw	r19,20(sp)
   18a0c:	dc800417 	ldw	r18,16(sp)
   18a10:	dc400317 	ldw	r17,12(sp)
   18a14:	dc000217 	ldw	r16,8(sp)
   18a18:	dec00804 	addi	sp,sp,32
   18a1c:	f800283a 	ret
   18a20:	d809883a 	mov	r4,sp
   18a24:	0017f6c0 	call	17f6c <__lo0bits>
   18a28:	d8c00017 	ldw	r3,0(sp)
   18a2c:	04000044 	movi	r16,1
   18a30:	9c000415 	stw	r16,16(r19)
   18a34:	98c00515 	stw	r3,20(r19)
   18a38:	10800804 	addi	r2,r2,32
   18a3c:	883fe126 	beq	r17,zero,189c4 <__alt_data_end+0xfc0189c4>
   18a40:	00c00d44 	movi	r3,53
   18a44:	8c7ef344 	addi	r17,r17,-1075
   18a48:	88a3883a 	add	r17,r17,r2
   18a4c:	1885c83a 	sub	r2,r3,r2
   18a50:	d8c00817 	ldw	r3,32(sp)
   18a54:	94400015 	stw	r17,0(r18)
   18a58:	18800015 	stw	r2,0(r3)
   18a5c:	003fe706 	br	189fc <__alt_data_end+0xfc0189fc>
   18a60:	01000804 	movi	r4,32
   18a64:	2089c83a 	sub	r4,r4,r2
   18a68:	1908983a 	sll	r4,r3,r4
   18a6c:	d9400117 	ldw	r5,4(sp)
   18a70:	1886d83a 	srl	r3,r3,r2
   18a74:	2148b03a 	or	r4,r4,r5
   18a78:	99000515 	stw	r4,20(r19)
   18a7c:	d8c00015 	stw	r3,0(sp)
   18a80:	003fca06 	br	189ac <__alt_data_end+0xfc0189ac>

00018a84 <__ratio>:
   18a84:	defff904 	addi	sp,sp,-28
   18a88:	dc400315 	stw	r17,12(sp)
   18a8c:	2823883a 	mov	r17,r5
   18a90:	d9400104 	addi	r5,sp,4
   18a94:	dfc00615 	stw	ra,24(sp)
   18a98:	dcc00515 	stw	r19,20(sp)
   18a9c:	dc800415 	stw	r18,16(sp)
   18aa0:	2027883a 	mov	r19,r4
   18aa4:	dc000215 	stw	r16,8(sp)
   18aa8:	001882c0 	call	1882c <__b2d>
   18aac:	d80b883a 	mov	r5,sp
   18ab0:	8809883a 	mov	r4,r17
   18ab4:	1025883a 	mov	r18,r2
   18ab8:	1821883a 	mov	r16,r3
   18abc:	001882c0 	call	1882c <__b2d>
   18ac0:	8a000417 	ldw	r8,16(r17)
   18ac4:	99000417 	ldw	r4,16(r19)
   18ac8:	d9400117 	ldw	r5,4(sp)
   18acc:	2209c83a 	sub	r4,r4,r8
   18ad0:	2010917a 	slli	r8,r4,5
   18ad4:	d9000017 	ldw	r4,0(sp)
   18ad8:	2909c83a 	sub	r4,r5,r4
   18adc:	4109883a 	add	r4,r8,r4
   18ae0:	01000e0e 	bge	zero,r4,18b1c <__ratio+0x98>
   18ae4:	2008953a 	slli	r4,r4,20
   18ae8:	2421883a 	add	r16,r4,r16
   18aec:	100d883a 	mov	r6,r2
   18af0:	180f883a 	mov	r7,r3
   18af4:	9009883a 	mov	r4,r18
   18af8:	800b883a 	mov	r5,r16
   18afc:	001df3c0 	call	1df3c <__divdf3>
   18b00:	dfc00617 	ldw	ra,24(sp)
   18b04:	dcc00517 	ldw	r19,20(sp)
   18b08:	dc800417 	ldw	r18,16(sp)
   18b0c:	dc400317 	ldw	r17,12(sp)
   18b10:	dc000217 	ldw	r16,8(sp)
   18b14:	dec00704 	addi	sp,sp,28
   18b18:	f800283a 	ret
   18b1c:	2008953a 	slli	r4,r4,20
   18b20:	1907c83a 	sub	r3,r3,r4
   18b24:	003ff106 	br	18aec <__alt_data_end+0xfc018aec>

00018b28 <_mprec_log10>:
   18b28:	defffe04 	addi	sp,sp,-8
   18b2c:	dc000015 	stw	r16,0(sp)
   18b30:	dfc00115 	stw	ra,4(sp)
   18b34:	008005c4 	movi	r2,23
   18b38:	2021883a 	mov	r16,r4
   18b3c:	11000d0e 	bge	r2,r4,18b74 <_mprec_log10+0x4c>
   18b40:	0005883a 	mov	r2,zero
   18b44:	00cffc34 	movhi	r3,16368
   18b48:	843fffc4 	addi	r16,r16,-1
   18b4c:	000d883a 	mov	r6,zero
   18b50:	01d00934 	movhi	r7,16420
   18b54:	1009883a 	mov	r4,r2
   18b58:	180b883a 	mov	r5,r3
   18b5c:	001eb640 	call	1eb64 <__muldf3>
   18b60:	803ff91e 	bne	r16,zero,18b48 <__alt_data_end+0xfc018b48>
   18b64:	dfc00117 	ldw	ra,4(sp)
   18b68:	dc000017 	ldw	r16,0(sp)
   18b6c:	dec00204 	addi	sp,sp,8
   18b70:	f800283a 	ret
   18b74:	202090fa 	slli	r16,r4,3
   18b78:	008000f4 	movhi	r2,3
   18b7c:	10ae2c04 	addi	r2,r2,-18256
   18b80:	1421883a 	add	r16,r2,r16
   18b84:	80800017 	ldw	r2,0(r16)
   18b88:	80c00117 	ldw	r3,4(r16)
   18b8c:	dfc00117 	ldw	ra,4(sp)
   18b90:	dc000017 	ldw	r16,0(sp)
   18b94:	dec00204 	addi	sp,sp,8
   18b98:	f800283a 	ret

00018b9c <__copybits>:
   18b9c:	297fffc4 	addi	r5,r5,-1
   18ba0:	280fd17a 	srai	r7,r5,5
   18ba4:	30c00417 	ldw	r3,16(r6)
   18ba8:	30800504 	addi	r2,r6,20
   18bac:	39c00044 	addi	r7,r7,1
   18bb0:	18c7883a 	add	r3,r3,r3
   18bb4:	39cf883a 	add	r7,r7,r7
   18bb8:	18c7883a 	add	r3,r3,r3
   18bbc:	39cf883a 	add	r7,r7,r7
   18bc0:	10c7883a 	add	r3,r2,r3
   18bc4:	21cf883a 	add	r7,r4,r7
   18bc8:	10c00d2e 	bgeu	r2,r3,18c00 <__copybits+0x64>
   18bcc:	200b883a 	mov	r5,r4
   18bd0:	12000017 	ldw	r8,0(r2)
   18bd4:	29400104 	addi	r5,r5,4
   18bd8:	10800104 	addi	r2,r2,4
   18bdc:	2a3fff15 	stw	r8,-4(r5)
   18be0:	10fffb36 	bltu	r2,r3,18bd0 <__alt_data_end+0xfc018bd0>
   18be4:	1985c83a 	sub	r2,r3,r6
   18be8:	10bffac4 	addi	r2,r2,-21
   18bec:	1004d0ba 	srli	r2,r2,2
   18bf0:	10800044 	addi	r2,r2,1
   18bf4:	1085883a 	add	r2,r2,r2
   18bf8:	1085883a 	add	r2,r2,r2
   18bfc:	2089883a 	add	r4,r4,r2
   18c00:	21c0032e 	bgeu	r4,r7,18c10 <__copybits+0x74>
   18c04:	20000015 	stw	zero,0(r4)
   18c08:	21000104 	addi	r4,r4,4
   18c0c:	21fffd36 	bltu	r4,r7,18c04 <__alt_data_end+0xfc018c04>
   18c10:	f800283a 	ret

00018c14 <__any_on>:
   18c14:	20c00417 	ldw	r3,16(r4)
   18c18:	2805d17a 	srai	r2,r5,5
   18c1c:	21000504 	addi	r4,r4,20
   18c20:	18800d0e 	bge	r3,r2,18c58 <__any_on+0x44>
   18c24:	18c7883a 	add	r3,r3,r3
   18c28:	18c7883a 	add	r3,r3,r3
   18c2c:	20c7883a 	add	r3,r4,r3
   18c30:	20c0192e 	bgeu	r4,r3,18c98 <__any_on+0x84>
   18c34:	18bfff17 	ldw	r2,-4(r3)
   18c38:	18ffff04 	addi	r3,r3,-4
   18c3c:	1000041e 	bne	r2,zero,18c50 <__any_on+0x3c>
   18c40:	20c0142e 	bgeu	r4,r3,18c94 <__any_on+0x80>
   18c44:	18ffff04 	addi	r3,r3,-4
   18c48:	19400017 	ldw	r5,0(r3)
   18c4c:	283ffc26 	beq	r5,zero,18c40 <__alt_data_end+0xfc018c40>
   18c50:	00800044 	movi	r2,1
   18c54:	f800283a 	ret
   18c58:	10c00a0e 	bge	r2,r3,18c84 <__any_on+0x70>
   18c5c:	1085883a 	add	r2,r2,r2
   18c60:	1085883a 	add	r2,r2,r2
   18c64:	294007cc 	andi	r5,r5,31
   18c68:	2087883a 	add	r3,r4,r2
   18c6c:	283ff026 	beq	r5,zero,18c30 <__alt_data_end+0xfc018c30>
   18c70:	19800017 	ldw	r6,0(r3)
   18c74:	3144d83a 	srl	r2,r6,r5
   18c78:	114a983a 	sll	r5,r2,r5
   18c7c:	317ff41e 	bne	r6,r5,18c50 <__alt_data_end+0xfc018c50>
   18c80:	003feb06 	br	18c30 <__alt_data_end+0xfc018c30>
   18c84:	1085883a 	add	r2,r2,r2
   18c88:	1085883a 	add	r2,r2,r2
   18c8c:	2087883a 	add	r3,r4,r2
   18c90:	003fe706 	br	18c30 <__alt_data_end+0xfc018c30>
   18c94:	f800283a 	ret
   18c98:	0005883a 	mov	r2,zero
   18c9c:	f800283a 	ret

00018ca0 <_putc_r>:
   18ca0:	defffc04 	addi	sp,sp,-16
   18ca4:	dc000215 	stw	r16,8(sp)
   18ca8:	dfc00315 	stw	ra,12(sp)
   18cac:	2021883a 	mov	r16,r4
   18cb0:	20000226 	beq	r4,zero,18cbc <_putc_r+0x1c>
   18cb4:	20800e17 	ldw	r2,56(r4)
   18cb8:	10001b26 	beq	r2,zero,18d28 <_putc_r+0x88>
   18cbc:	30800217 	ldw	r2,8(r6)
   18cc0:	10bfffc4 	addi	r2,r2,-1
   18cc4:	30800215 	stw	r2,8(r6)
   18cc8:	10000a16 	blt	r2,zero,18cf4 <_putc_r+0x54>
   18ccc:	30800017 	ldw	r2,0(r6)
   18cd0:	11400005 	stb	r5,0(r2)
   18cd4:	30800017 	ldw	r2,0(r6)
   18cd8:	10c00044 	addi	r3,r2,1
   18cdc:	30c00015 	stw	r3,0(r6)
   18ce0:	10800003 	ldbu	r2,0(r2)
   18ce4:	dfc00317 	ldw	ra,12(sp)
   18ce8:	dc000217 	ldw	r16,8(sp)
   18cec:	dec00404 	addi	sp,sp,16
   18cf0:	f800283a 	ret
   18cf4:	30c00617 	ldw	r3,24(r6)
   18cf8:	10c00616 	blt	r2,r3,18d14 <_putc_r+0x74>
   18cfc:	30800017 	ldw	r2,0(r6)
   18d00:	00c00284 	movi	r3,10
   18d04:	11400005 	stb	r5,0(r2)
   18d08:	30800017 	ldw	r2,0(r6)
   18d0c:	11400003 	ldbu	r5,0(r2)
   18d10:	28fff11e 	bne	r5,r3,18cd8 <__alt_data_end+0xfc018cd8>
   18d14:	8009883a 	mov	r4,r16
   18d18:	dfc00317 	ldw	ra,12(sp)
   18d1c:	dc000217 	ldw	r16,8(sp)
   18d20:	dec00404 	addi	sp,sp,16
   18d24:	001c1841 	jmpi	1c184 <__swbuf_r>
   18d28:	d9400015 	stw	r5,0(sp)
   18d2c:	d9800115 	stw	r6,4(sp)
   18d30:	0016c3c0 	call	16c3c <__sinit>
   18d34:	d9800117 	ldw	r6,4(sp)
   18d38:	d9400017 	ldw	r5,0(sp)
   18d3c:	003fdf06 	br	18cbc <__alt_data_end+0xfc018cbc>

00018d40 <putc>:
   18d40:	008000f4 	movhi	r2,3
   18d44:	defffc04 	addi	sp,sp,-16
   18d48:	10baf204 	addi	r2,r2,-5176
   18d4c:	dc000115 	stw	r16,4(sp)
   18d50:	14000017 	ldw	r16,0(r2)
   18d54:	dc400215 	stw	r17,8(sp)
   18d58:	dfc00315 	stw	ra,12(sp)
   18d5c:	2023883a 	mov	r17,r4
   18d60:	80000226 	beq	r16,zero,18d6c <putc+0x2c>
   18d64:	80800e17 	ldw	r2,56(r16)
   18d68:	10001a26 	beq	r2,zero,18dd4 <putc+0x94>
   18d6c:	28800217 	ldw	r2,8(r5)
   18d70:	10bfffc4 	addi	r2,r2,-1
   18d74:	28800215 	stw	r2,8(r5)
   18d78:	10000b16 	blt	r2,zero,18da8 <putc+0x68>
   18d7c:	28800017 	ldw	r2,0(r5)
   18d80:	14400005 	stb	r17,0(r2)
   18d84:	28800017 	ldw	r2,0(r5)
   18d88:	10c00044 	addi	r3,r2,1
   18d8c:	28c00015 	stw	r3,0(r5)
   18d90:	10800003 	ldbu	r2,0(r2)
   18d94:	dfc00317 	ldw	ra,12(sp)
   18d98:	dc400217 	ldw	r17,8(sp)
   18d9c:	dc000117 	ldw	r16,4(sp)
   18da0:	dec00404 	addi	sp,sp,16
   18da4:	f800283a 	ret
   18da8:	28c00617 	ldw	r3,24(r5)
   18dac:	10c00e16 	blt	r2,r3,18de8 <putc+0xa8>
   18db0:	28800017 	ldw	r2,0(r5)
   18db4:	01000284 	movi	r4,10
   18db8:	14400005 	stb	r17,0(r2)
   18dbc:	28800017 	ldw	r2,0(r5)
   18dc0:	10c00003 	ldbu	r3,0(r2)
   18dc4:	193ff01e 	bne	r3,r4,18d88 <__alt_data_end+0xfc018d88>
   18dc8:	280d883a 	mov	r6,r5
   18dcc:	180b883a 	mov	r5,r3
   18dd0:	00000706 	br	18df0 <putc+0xb0>
   18dd4:	8009883a 	mov	r4,r16
   18dd8:	d9400015 	stw	r5,0(sp)
   18ddc:	0016c3c0 	call	16c3c <__sinit>
   18de0:	d9400017 	ldw	r5,0(sp)
   18de4:	003fe106 	br	18d6c <__alt_data_end+0xfc018d6c>
   18de8:	280d883a 	mov	r6,r5
   18dec:	880b883a 	mov	r5,r17
   18df0:	8009883a 	mov	r4,r16
   18df4:	dfc00317 	ldw	ra,12(sp)
   18df8:	dc400217 	ldw	r17,8(sp)
   18dfc:	dc000117 	ldw	r16,4(sp)
   18e00:	dec00404 	addi	sp,sp,16
   18e04:	001c1841 	jmpi	1c184 <__swbuf_r>

00018e08 <_realloc_r>:
   18e08:	defff604 	addi	sp,sp,-40
   18e0c:	dc800215 	stw	r18,8(sp)
   18e10:	dfc00915 	stw	ra,36(sp)
   18e14:	df000815 	stw	fp,32(sp)
   18e18:	ddc00715 	stw	r23,28(sp)
   18e1c:	dd800615 	stw	r22,24(sp)
   18e20:	dd400515 	stw	r21,20(sp)
   18e24:	dd000415 	stw	r20,16(sp)
   18e28:	dcc00315 	stw	r19,12(sp)
   18e2c:	dc400115 	stw	r17,4(sp)
   18e30:	dc000015 	stw	r16,0(sp)
   18e34:	3025883a 	mov	r18,r6
   18e38:	2800b726 	beq	r5,zero,19118 <_realloc_r+0x310>
   18e3c:	282b883a 	mov	r21,r5
   18e40:	2029883a 	mov	r20,r4
   18e44:	002062c0 	call	2062c <__malloc_lock>
   18e48:	a8bfff17 	ldw	r2,-4(r21)
   18e4c:	043fff04 	movi	r16,-4
   18e50:	90c002c4 	addi	r3,r18,11
   18e54:	01000584 	movi	r4,22
   18e58:	acfffe04 	addi	r19,r21,-8
   18e5c:	1420703a 	and	r16,r2,r16
   18e60:	20c0332e 	bgeu	r4,r3,18f30 <_realloc_r+0x128>
   18e64:	047ffe04 	movi	r17,-8
   18e68:	1c62703a 	and	r17,r3,r17
   18e6c:	8807883a 	mov	r3,r17
   18e70:	88005816 	blt	r17,zero,18fd4 <_realloc_r+0x1cc>
   18e74:	8c805736 	bltu	r17,r18,18fd4 <_realloc_r+0x1cc>
   18e78:	80c0300e 	bge	r16,r3,18f3c <_realloc_r+0x134>
   18e7c:	070000f4 	movhi	fp,3
   18e80:	e72f8f04 	addi	fp,fp,-16836
   18e84:	e1c00217 	ldw	r7,8(fp)
   18e88:	9c09883a 	add	r4,r19,r16
   18e8c:	22000117 	ldw	r8,4(r4)
   18e90:	21c06326 	beq	r4,r7,19020 <_realloc_r+0x218>
   18e94:	017fff84 	movi	r5,-2
   18e98:	414a703a 	and	r5,r8,r5
   18e9c:	214b883a 	add	r5,r4,r5
   18ea0:	29800117 	ldw	r6,4(r5)
   18ea4:	3180004c 	andi	r6,r6,1
   18ea8:	30003f26 	beq	r6,zero,18fa8 <_realloc_r+0x1a0>
   18eac:	1080004c 	andi	r2,r2,1
   18eb0:	10008326 	beq	r2,zero,190c0 <_realloc_r+0x2b8>
   18eb4:	900b883a 	mov	r5,r18
   18eb8:	a009883a 	mov	r4,r20
   18ebc:	000f44c0 	call	f44c <_malloc_r>
   18ec0:	1025883a 	mov	r18,r2
   18ec4:	10011e26 	beq	r2,zero,19340 <_realloc_r+0x538>
   18ec8:	a93fff17 	ldw	r4,-4(r21)
   18ecc:	10fffe04 	addi	r3,r2,-8
   18ed0:	00bfff84 	movi	r2,-2
   18ed4:	2084703a 	and	r2,r4,r2
   18ed8:	9885883a 	add	r2,r19,r2
   18edc:	1880ee26 	beq	r3,r2,19298 <_realloc_r+0x490>
   18ee0:	81bfff04 	addi	r6,r16,-4
   18ee4:	00800904 	movi	r2,36
   18ee8:	1180b836 	bltu	r2,r6,191cc <_realloc_r+0x3c4>
   18eec:	00c004c4 	movi	r3,19
   18ef0:	19809636 	bltu	r3,r6,1914c <_realloc_r+0x344>
   18ef4:	9005883a 	mov	r2,r18
   18ef8:	a807883a 	mov	r3,r21
   18efc:	19000017 	ldw	r4,0(r3)
   18f00:	11000015 	stw	r4,0(r2)
   18f04:	19000117 	ldw	r4,4(r3)
   18f08:	11000115 	stw	r4,4(r2)
   18f0c:	18c00217 	ldw	r3,8(r3)
   18f10:	10c00215 	stw	r3,8(r2)
   18f14:	a80b883a 	mov	r5,r21
   18f18:	a009883a 	mov	r4,r20
   18f1c:	0016db00 	call	16db0 <_free_r>
   18f20:	a009883a 	mov	r4,r20
   18f24:	00206500 	call	20650 <__malloc_unlock>
   18f28:	9005883a 	mov	r2,r18
   18f2c:	00001206 	br	18f78 <_realloc_r+0x170>
   18f30:	00c00404 	movi	r3,16
   18f34:	1823883a 	mov	r17,r3
   18f38:	003fce06 	br	18e74 <__alt_data_end+0xfc018e74>
   18f3c:	a825883a 	mov	r18,r21
   18f40:	8445c83a 	sub	r2,r16,r17
   18f44:	00c003c4 	movi	r3,15
   18f48:	18802636 	bltu	r3,r2,18fe4 <_realloc_r+0x1dc>
   18f4c:	99800117 	ldw	r6,4(r19)
   18f50:	9c07883a 	add	r3,r19,r16
   18f54:	3180004c 	andi	r6,r6,1
   18f58:	3420b03a 	or	r16,r6,r16
   18f5c:	9c000115 	stw	r16,4(r19)
   18f60:	18800117 	ldw	r2,4(r3)
   18f64:	10800054 	ori	r2,r2,1
   18f68:	18800115 	stw	r2,4(r3)
   18f6c:	a009883a 	mov	r4,r20
   18f70:	00206500 	call	20650 <__malloc_unlock>
   18f74:	9005883a 	mov	r2,r18
   18f78:	dfc00917 	ldw	ra,36(sp)
   18f7c:	df000817 	ldw	fp,32(sp)
   18f80:	ddc00717 	ldw	r23,28(sp)
   18f84:	dd800617 	ldw	r22,24(sp)
   18f88:	dd400517 	ldw	r21,20(sp)
   18f8c:	dd000417 	ldw	r20,16(sp)
   18f90:	dcc00317 	ldw	r19,12(sp)
   18f94:	dc800217 	ldw	r18,8(sp)
   18f98:	dc400117 	ldw	r17,4(sp)
   18f9c:	dc000017 	ldw	r16,0(sp)
   18fa0:	dec00a04 	addi	sp,sp,40
   18fa4:	f800283a 	ret
   18fa8:	017fff04 	movi	r5,-4
   18fac:	414a703a 	and	r5,r8,r5
   18fb0:	814d883a 	add	r6,r16,r5
   18fb4:	30c01f16 	blt	r6,r3,19034 <_realloc_r+0x22c>
   18fb8:	20800317 	ldw	r2,12(r4)
   18fbc:	20c00217 	ldw	r3,8(r4)
   18fc0:	a825883a 	mov	r18,r21
   18fc4:	3021883a 	mov	r16,r6
   18fc8:	18800315 	stw	r2,12(r3)
   18fcc:	10c00215 	stw	r3,8(r2)
   18fd0:	003fdb06 	br	18f40 <__alt_data_end+0xfc018f40>
   18fd4:	00800304 	movi	r2,12
   18fd8:	a0800015 	stw	r2,0(r20)
   18fdc:	0005883a 	mov	r2,zero
   18fe0:	003fe506 	br	18f78 <__alt_data_end+0xfc018f78>
   18fe4:	98c00117 	ldw	r3,4(r19)
   18fe8:	9c4b883a 	add	r5,r19,r17
   18fec:	11000054 	ori	r4,r2,1
   18ff0:	18c0004c 	andi	r3,r3,1
   18ff4:	1c62b03a 	or	r17,r3,r17
   18ff8:	9c400115 	stw	r17,4(r19)
   18ffc:	29000115 	stw	r4,4(r5)
   19000:	2885883a 	add	r2,r5,r2
   19004:	10c00117 	ldw	r3,4(r2)
   19008:	29400204 	addi	r5,r5,8
   1900c:	a009883a 	mov	r4,r20
   19010:	18c00054 	ori	r3,r3,1
   19014:	10c00115 	stw	r3,4(r2)
   19018:	0016db00 	call	16db0 <_free_r>
   1901c:	003fd306 	br	18f6c <__alt_data_end+0xfc018f6c>
   19020:	017fff04 	movi	r5,-4
   19024:	414a703a 	and	r5,r8,r5
   19028:	89800404 	addi	r6,r17,16
   1902c:	8151883a 	add	r8,r16,r5
   19030:	4180590e 	bge	r8,r6,19198 <_realloc_r+0x390>
   19034:	1080004c 	andi	r2,r2,1
   19038:	103f9e1e 	bne	r2,zero,18eb4 <__alt_data_end+0xfc018eb4>
   1903c:	adbffe17 	ldw	r22,-8(r21)
   19040:	00bfff04 	movi	r2,-4
   19044:	9dadc83a 	sub	r22,r19,r22
   19048:	b1800117 	ldw	r6,4(r22)
   1904c:	3084703a 	and	r2,r6,r2
   19050:	20002026 	beq	r4,zero,190d4 <_realloc_r+0x2cc>
   19054:	80af883a 	add	r23,r16,r2
   19058:	b96f883a 	add	r23,r23,r5
   1905c:	21c05f26 	beq	r4,r7,191dc <_realloc_r+0x3d4>
   19060:	b8c01c16 	blt	r23,r3,190d4 <_realloc_r+0x2cc>
   19064:	20800317 	ldw	r2,12(r4)
   19068:	20c00217 	ldw	r3,8(r4)
   1906c:	81bfff04 	addi	r6,r16,-4
   19070:	01000904 	movi	r4,36
   19074:	18800315 	stw	r2,12(r3)
   19078:	10c00215 	stw	r3,8(r2)
   1907c:	b0c00217 	ldw	r3,8(r22)
   19080:	b0800317 	ldw	r2,12(r22)
   19084:	b4800204 	addi	r18,r22,8
   19088:	18800315 	stw	r2,12(r3)
   1908c:	10c00215 	stw	r3,8(r2)
   19090:	21801b36 	bltu	r4,r6,19100 <_realloc_r+0x2f8>
   19094:	008004c4 	movi	r2,19
   19098:	1180352e 	bgeu	r2,r6,19170 <_realloc_r+0x368>
   1909c:	a8800017 	ldw	r2,0(r21)
   190a0:	b0800215 	stw	r2,8(r22)
   190a4:	a8800117 	ldw	r2,4(r21)
   190a8:	b0800315 	stw	r2,12(r22)
   190ac:	008006c4 	movi	r2,27
   190b0:	11807f36 	bltu	r2,r6,192b0 <_realloc_r+0x4a8>
   190b4:	b0800404 	addi	r2,r22,16
   190b8:	ad400204 	addi	r21,r21,8
   190bc:	00002d06 	br	19174 <_realloc_r+0x36c>
   190c0:	adbffe17 	ldw	r22,-8(r21)
   190c4:	00bfff04 	movi	r2,-4
   190c8:	9dadc83a 	sub	r22,r19,r22
   190cc:	b1000117 	ldw	r4,4(r22)
   190d0:	2084703a 	and	r2,r4,r2
   190d4:	b03f7726 	beq	r22,zero,18eb4 <__alt_data_end+0xfc018eb4>
   190d8:	80af883a 	add	r23,r16,r2
   190dc:	b8ff7516 	blt	r23,r3,18eb4 <__alt_data_end+0xfc018eb4>
   190e0:	b0800317 	ldw	r2,12(r22)
   190e4:	b0c00217 	ldw	r3,8(r22)
   190e8:	81bfff04 	addi	r6,r16,-4
   190ec:	01000904 	movi	r4,36
   190f0:	18800315 	stw	r2,12(r3)
   190f4:	10c00215 	stw	r3,8(r2)
   190f8:	b4800204 	addi	r18,r22,8
   190fc:	21bfe52e 	bgeu	r4,r6,19094 <__alt_data_end+0xfc019094>
   19100:	a80b883a 	mov	r5,r21
   19104:	9009883a 	mov	r4,r18
   19108:	0017a8c0 	call	17a8c <memmove>
   1910c:	b821883a 	mov	r16,r23
   19110:	b027883a 	mov	r19,r22
   19114:	003f8a06 	br	18f40 <__alt_data_end+0xfc018f40>
   19118:	300b883a 	mov	r5,r6
   1911c:	dfc00917 	ldw	ra,36(sp)
   19120:	df000817 	ldw	fp,32(sp)
   19124:	ddc00717 	ldw	r23,28(sp)
   19128:	dd800617 	ldw	r22,24(sp)
   1912c:	dd400517 	ldw	r21,20(sp)
   19130:	dd000417 	ldw	r20,16(sp)
   19134:	dcc00317 	ldw	r19,12(sp)
   19138:	dc800217 	ldw	r18,8(sp)
   1913c:	dc400117 	ldw	r17,4(sp)
   19140:	dc000017 	ldw	r16,0(sp)
   19144:	dec00a04 	addi	sp,sp,40
   19148:	000f44c1 	jmpi	f44c <_malloc_r>
   1914c:	a8c00017 	ldw	r3,0(r21)
   19150:	90c00015 	stw	r3,0(r18)
   19154:	a8c00117 	ldw	r3,4(r21)
   19158:	90c00115 	stw	r3,4(r18)
   1915c:	00c006c4 	movi	r3,27
   19160:	19804536 	bltu	r3,r6,19278 <_realloc_r+0x470>
   19164:	90800204 	addi	r2,r18,8
   19168:	a8c00204 	addi	r3,r21,8
   1916c:	003f6306 	br	18efc <__alt_data_end+0xfc018efc>
   19170:	9005883a 	mov	r2,r18
   19174:	a8c00017 	ldw	r3,0(r21)
   19178:	b821883a 	mov	r16,r23
   1917c:	b027883a 	mov	r19,r22
   19180:	10c00015 	stw	r3,0(r2)
   19184:	a8c00117 	ldw	r3,4(r21)
   19188:	10c00115 	stw	r3,4(r2)
   1918c:	a8c00217 	ldw	r3,8(r21)
   19190:	10c00215 	stw	r3,8(r2)
   19194:	003f6a06 	br	18f40 <__alt_data_end+0xfc018f40>
   19198:	9c67883a 	add	r19,r19,r17
   1919c:	4445c83a 	sub	r2,r8,r17
   191a0:	e4c00215 	stw	r19,8(fp)
   191a4:	10800054 	ori	r2,r2,1
   191a8:	98800115 	stw	r2,4(r19)
   191ac:	a8bfff17 	ldw	r2,-4(r21)
   191b0:	a009883a 	mov	r4,r20
   191b4:	1080004c 	andi	r2,r2,1
   191b8:	1462b03a 	or	r17,r2,r17
   191bc:	ac7fff15 	stw	r17,-4(r21)
   191c0:	00206500 	call	20650 <__malloc_unlock>
   191c4:	a805883a 	mov	r2,r21
   191c8:	003f6b06 	br	18f78 <__alt_data_end+0xfc018f78>
   191cc:	a80b883a 	mov	r5,r21
   191d0:	9009883a 	mov	r4,r18
   191d4:	0017a8c0 	call	17a8c <memmove>
   191d8:	003f4e06 	br	18f14 <__alt_data_end+0xfc018f14>
   191dc:	89000404 	addi	r4,r17,16
   191e0:	b93fbc16 	blt	r23,r4,190d4 <__alt_data_end+0xfc0190d4>
   191e4:	b0800317 	ldw	r2,12(r22)
   191e8:	b0c00217 	ldw	r3,8(r22)
   191ec:	81bfff04 	addi	r6,r16,-4
   191f0:	01000904 	movi	r4,36
   191f4:	18800315 	stw	r2,12(r3)
   191f8:	10c00215 	stw	r3,8(r2)
   191fc:	b4800204 	addi	r18,r22,8
   19200:	21804336 	bltu	r4,r6,19310 <_realloc_r+0x508>
   19204:	008004c4 	movi	r2,19
   19208:	11803f2e 	bgeu	r2,r6,19308 <_realloc_r+0x500>
   1920c:	a8800017 	ldw	r2,0(r21)
   19210:	b0800215 	stw	r2,8(r22)
   19214:	a8800117 	ldw	r2,4(r21)
   19218:	b0800315 	stw	r2,12(r22)
   1921c:	008006c4 	movi	r2,27
   19220:	11803f36 	bltu	r2,r6,19320 <_realloc_r+0x518>
   19224:	b0800404 	addi	r2,r22,16
   19228:	ad400204 	addi	r21,r21,8
   1922c:	a8c00017 	ldw	r3,0(r21)
   19230:	10c00015 	stw	r3,0(r2)
   19234:	a8c00117 	ldw	r3,4(r21)
   19238:	10c00115 	stw	r3,4(r2)
   1923c:	a8c00217 	ldw	r3,8(r21)
   19240:	10c00215 	stw	r3,8(r2)
   19244:	b447883a 	add	r3,r22,r17
   19248:	bc45c83a 	sub	r2,r23,r17
   1924c:	e0c00215 	stw	r3,8(fp)
   19250:	10800054 	ori	r2,r2,1
   19254:	18800115 	stw	r2,4(r3)
   19258:	b0800117 	ldw	r2,4(r22)
   1925c:	a009883a 	mov	r4,r20
   19260:	1080004c 	andi	r2,r2,1
   19264:	1462b03a 	or	r17,r2,r17
   19268:	b4400115 	stw	r17,4(r22)
   1926c:	00206500 	call	20650 <__malloc_unlock>
   19270:	9005883a 	mov	r2,r18
   19274:	003f4006 	br	18f78 <__alt_data_end+0xfc018f78>
   19278:	a8c00217 	ldw	r3,8(r21)
   1927c:	90c00215 	stw	r3,8(r18)
   19280:	a8c00317 	ldw	r3,12(r21)
   19284:	90c00315 	stw	r3,12(r18)
   19288:	30801126 	beq	r6,r2,192d0 <_realloc_r+0x4c8>
   1928c:	90800404 	addi	r2,r18,16
   19290:	a8c00404 	addi	r3,r21,16
   19294:	003f1906 	br	18efc <__alt_data_end+0xfc018efc>
   19298:	90ffff17 	ldw	r3,-4(r18)
   1929c:	00bfff04 	movi	r2,-4
   192a0:	a825883a 	mov	r18,r21
   192a4:	1884703a 	and	r2,r3,r2
   192a8:	80a1883a 	add	r16,r16,r2
   192ac:	003f2406 	br	18f40 <__alt_data_end+0xfc018f40>
   192b0:	a8800217 	ldw	r2,8(r21)
   192b4:	b0800415 	stw	r2,16(r22)
   192b8:	a8800317 	ldw	r2,12(r21)
   192bc:	b0800515 	stw	r2,20(r22)
   192c0:	31000a26 	beq	r6,r4,192ec <_realloc_r+0x4e4>
   192c4:	b0800604 	addi	r2,r22,24
   192c8:	ad400404 	addi	r21,r21,16
   192cc:	003fa906 	br	19174 <__alt_data_end+0xfc019174>
   192d0:	a9000417 	ldw	r4,16(r21)
   192d4:	90800604 	addi	r2,r18,24
   192d8:	a8c00604 	addi	r3,r21,24
   192dc:	91000415 	stw	r4,16(r18)
   192e0:	a9000517 	ldw	r4,20(r21)
   192e4:	91000515 	stw	r4,20(r18)
   192e8:	003f0406 	br	18efc <__alt_data_end+0xfc018efc>
   192ec:	a8c00417 	ldw	r3,16(r21)
   192f0:	ad400604 	addi	r21,r21,24
   192f4:	b0800804 	addi	r2,r22,32
   192f8:	b0c00615 	stw	r3,24(r22)
   192fc:	a8ffff17 	ldw	r3,-4(r21)
   19300:	b0c00715 	stw	r3,28(r22)
   19304:	003f9b06 	br	19174 <__alt_data_end+0xfc019174>
   19308:	9005883a 	mov	r2,r18
   1930c:	003fc706 	br	1922c <__alt_data_end+0xfc01922c>
   19310:	a80b883a 	mov	r5,r21
   19314:	9009883a 	mov	r4,r18
   19318:	0017a8c0 	call	17a8c <memmove>
   1931c:	003fc906 	br	19244 <__alt_data_end+0xfc019244>
   19320:	a8800217 	ldw	r2,8(r21)
   19324:	b0800415 	stw	r2,16(r22)
   19328:	a8800317 	ldw	r2,12(r21)
   1932c:	b0800515 	stw	r2,20(r22)
   19330:	31000726 	beq	r6,r4,19350 <_realloc_r+0x548>
   19334:	b0800604 	addi	r2,r22,24
   19338:	ad400404 	addi	r21,r21,16
   1933c:	003fbb06 	br	1922c <__alt_data_end+0xfc01922c>
   19340:	a009883a 	mov	r4,r20
   19344:	00206500 	call	20650 <__malloc_unlock>
   19348:	0005883a 	mov	r2,zero
   1934c:	003f0a06 	br	18f78 <__alt_data_end+0xfc018f78>
   19350:	a8c00417 	ldw	r3,16(r21)
   19354:	ad400604 	addi	r21,r21,24
   19358:	b0800804 	addi	r2,r22,32
   1935c:	b0c00615 	stw	r3,24(r22)
   19360:	a8ffff17 	ldw	r3,-4(r21)
   19364:	b0c00715 	stw	r3,28(r22)
   19368:	003fb006 	br	1922c <__alt_data_end+0xfc01922c>

0001936c <__fpclassifyd>:
   1936c:	00a00034 	movhi	r2,32768
   19370:	10bfffc4 	addi	r2,r2,-1
   19374:	2884703a 	and	r2,r5,r2
   19378:	10000726 	beq	r2,zero,19398 <__fpclassifyd+0x2c>
   1937c:	00fffc34 	movhi	r3,65520
   19380:	019ff834 	movhi	r6,32736
   19384:	28c7883a 	add	r3,r5,r3
   19388:	31bfffc4 	addi	r6,r6,-1
   1938c:	30c00536 	bltu	r6,r3,193a4 <__fpclassifyd+0x38>
   19390:	00800104 	movi	r2,4
   19394:	f800283a 	ret
   19398:	2000021e 	bne	r4,zero,193a4 <__fpclassifyd+0x38>
   1939c:	00800084 	movi	r2,2
   193a0:	f800283a 	ret
   193a4:	00dffc34 	movhi	r3,32752
   193a8:	019ff834 	movhi	r6,32736
   193ac:	28cb883a 	add	r5,r5,r3
   193b0:	31bfffc4 	addi	r6,r6,-1
   193b4:	317ff62e 	bgeu	r6,r5,19390 <__alt_data_end+0xfc019390>
   193b8:	01400434 	movhi	r5,16
   193bc:	297fffc4 	addi	r5,r5,-1
   193c0:	28800236 	bltu	r5,r2,193cc <__fpclassifyd+0x60>
   193c4:	008000c4 	movi	r2,3
   193c8:	f800283a 	ret
   193cc:	10c00226 	beq	r2,r3,193d8 <__fpclassifyd+0x6c>
   193d0:	0005883a 	mov	r2,zero
   193d4:	f800283a 	ret
   193d8:	2005003a 	cmpeq	r2,r4,zero
   193dc:	f800283a 	ret

000193e0 <__sread>:
   193e0:	defffe04 	addi	sp,sp,-8
   193e4:	dc000015 	stw	r16,0(sp)
   193e8:	2821883a 	mov	r16,r5
   193ec:	2940038f 	ldh	r5,14(r5)
   193f0:	dfc00115 	stw	ra,4(sp)
   193f4:	001c8880 	call	1c888 <_read_r>
   193f8:	10000716 	blt	r2,zero,19418 <__sread+0x38>
   193fc:	80c01417 	ldw	r3,80(r16)
   19400:	1887883a 	add	r3,r3,r2
   19404:	80c01415 	stw	r3,80(r16)
   19408:	dfc00117 	ldw	ra,4(sp)
   1940c:	dc000017 	ldw	r16,0(sp)
   19410:	dec00204 	addi	sp,sp,8
   19414:	f800283a 	ret
   19418:	80c0030b 	ldhu	r3,12(r16)
   1941c:	18fbffcc 	andi	r3,r3,61439
   19420:	80c0030d 	sth	r3,12(r16)
   19424:	dfc00117 	ldw	ra,4(sp)
   19428:	dc000017 	ldw	r16,0(sp)
   1942c:	dec00204 	addi	sp,sp,8
   19430:	f800283a 	ret

00019434 <__seofread>:
   19434:	0005883a 	mov	r2,zero
   19438:	f800283a 	ret

0001943c <__swrite>:
   1943c:	2880030b 	ldhu	r2,12(r5)
   19440:	defffb04 	addi	sp,sp,-20
   19444:	dcc00315 	stw	r19,12(sp)
   19448:	dc800215 	stw	r18,8(sp)
   1944c:	dc400115 	stw	r17,4(sp)
   19450:	dc000015 	stw	r16,0(sp)
   19454:	dfc00415 	stw	ra,16(sp)
   19458:	10c0400c 	andi	r3,r2,256
   1945c:	2821883a 	mov	r16,r5
   19460:	2023883a 	mov	r17,r4
   19464:	3025883a 	mov	r18,r6
   19468:	3827883a 	mov	r19,r7
   1946c:	18000526 	beq	r3,zero,19484 <__swrite+0x48>
   19470:	2940038f 	ldh	r5,14(r5)
   19474:	01c00084 	movi	r7,2
   19478:	000d883a 	mov	r6,zero
   1947c:	001c8280 	call	1c828 <_lseek_r>
   19480:	8080030b 	ldhu	r2,12(r16)
   19484:	8140038f 	ldh	r5,14(r16)
   19488:	10bbffcc 	andi	r2,r2,61439
   1948c:	980f883a 	mov	r7,r19
   19490:	900d883a 	mov	r6,r18
   19494:	8809883a 	mov	r4,r17
   19498:	8080030d 	sth	r2,12(r16)
   1949c:	dfc00417 	ldw	ra,16(sp)
   194a0:	dcc00317 	ldw	r19,12(sp)
   194a4:	dc800217 	ldw	r18,8(sp)
   194a8:	dc400117 	ldw	r17,4(sp)
   194ac:	dc000017 	ldw	r16,0(sp)
   194b0:	dec00504 	addi	sp,sp,20
   194b4:	001c2dc1 	jmpi	1c2dc <_write_r>

000194b8 <__sseek>:
   194b8:	defffe04 	addi	sp,sp,-8
   194bc:	dc000015 	stw	r16,0(sp)
   194c0:	2821883a 	mov	r16,r5
   194c4:	2940038f 	ldh	r5,14(r5)
   194c8:	dfc00115 	stw	ra,4(sp)
   194cc:	001c8280 	call	1c828 <_lseek_r>
   194d0:	00ffffc4 	movi	r3,-1
   194d4:	10c00826 	beq	r2,r3,194f8 <__sseek+0x40>
   194d8:	80c0030b 	ldhu	r3,12(r16)
   194dc:	80801415 	stw	r2,80(r16)
   194e0:	18c40014 	ori	r3,r3,4096
   194e4:	80c0030d 	sth	r3,12(r16)
   194e8:	dfc00117 	ldw	ra,4(sp)
   194ec:	dc000017 	ldw	r16,0(sp)
   194f0:	dec00204 	addi	sp,sp,8
   194f4:	f800283a 	ret
   194f8:	80c0030b 	ldhu	r3,12(r16)
   194fc:	18fbffcc 	andi	r3,r3,61439
   19500:	80c0030d 	sth	r3,12(r16)
   19504:	dfc00117 	ldw	ra,4(sp)
   19508:	dc000017 	ldw	r16,0(sp)
   1950c:	dec00204 	addi	sp,sp,8
   19510:	f800283a 	ret

00019514 <__sclose>:
   19514:	2940038f 	ldh	r5,14(r5)
   19518:	001c33c1 	jmpi	1c33c <_close_r>

0001951c <__ssprint_r>:
   1951c:	30800217 	ldw	r2,8(r6)
   19520:	defff604 	addi	sp,sp,-40
   19524:	dc800215 	stw	r18,8(sp)
   19528:	dfc00915 	stw	ra,36(sp)
   1952c:	df000815 	stw	fp,32(sp)
   19530:	ddc00715 	stw	r23,28(sp)
   19534:	dd800615 	stw	r22,24(sp)
   19538:	dd400515 	stw	r21,20(sp)
   1953c:	dd000415 	stw	r20,16(sp)
   19540:	dcc00315 	stw	r19,12(sp)
   19544:	dc400115 	stw	r17,4(sp)
   19548:	dc000015 	stw	r16,0(sp)
   1954c:	3025883a 	mov	r18,r6
   19550:	10005826 	beq	r2,zero,196b4 <__ssprint_r+0x198>
   19554:	2027883a 	mov	r19,r4
   19558:	35c00017 	ldw	r23,0(r6)
   1955c:	29000017 	ldw	r4,0(r5)
   19560:	28800217 	ldw	r2,8(r5)
   19564:	2823883a 	mov	r17,r5
   19568:	0039883a 	mov	fp,zero
   1956c:	0021883a 	mov	r16,zero
   19570:	80003926 	beq	r16,zero,19658 <__ssprint_r+0x13c>
   19574:	102b883a 	mov	r21,r2
   19578:	102d883a 	mov	r22,r2
   1957c:	80803a36 	bltu	r16,r2,19668 <__ssprint_r+0x14c>
   19580:	88c0030b 	ldhu	r3,12(r17)
   19584:	1881200c 	andi	r2,r3,1152
   19588:	10002626 	beq	r2,zero,19624 <__ssprint_r+0x108>
   1958c:	88800517 	ldw	r2,20(r17)
   19590:	89400417 	ldw	r5,16(r17)
   19594:	81800044 	addi	r6,r16,1
   19598:	108f883a 	add	r7,r2,r2
   1959c:	3885883a 	add	r2,r7,r2
   195a0:	100ed7fa 	srli	r7,r2,31
   195a4:	216dc83a 	sub	r22,r4,r5
   195a8:	3589883a 	add	r4,r6,r22
   195ac:	3885883a 	add	r2,r7,r2
   195b0:	102bd07a 	srai	r21,r2,1
   195b4:	a80d883a 	mov	r6,r21
   195b8:	a900022e 	bgeu	r21,r4,195c4 <__ssprint_r+0xa8>
   195bc:	202b883a 	mov	r21,r4
   195c0:	200d883a 	mov	r6,r4
   195c4:	18c1000c 	andi	r3,r3,1024
   195c8:	18002a26 	beq	r3,zero,19674 <__ssprint_r+0x158>
   195cc:	300b883a 	mov	r5,r6
   195d0:	9809883a 	mov	r4,r19
   195d4:	000f44c0 	call	f44c <_malloc_r>
   195d8:	1029883a 	mov	r20,r2
   195dc:	10002c26 	beq	r2,zero,19690 <__ssprint_r+0x174>
   195e0:	89400417 	ldw	r5,16(r17)
   195e4:	b00d883a 	mov	r6,r22
   195e8:	1009883a 	mov	r4,r2
   195ec:	000fc580 	call	fc58 <memcpy>
   195f0:	8880030b 	ldhu	r2,12(r17)
   195f4:	00fedfc4 	movi	r3,-1153
   195f8:	10c4703a 	and	r2,r2,r3
   195fc:	10802014 	ori	r2,r2,128
   19600:	8880030d 	sth	r2,12(r17)
   19604:	a589883a 	add	r4,r20,r22
   19608:	adadc83a 	sub	r22,r21,r22
   1960c:	8d400515 	stw	r21,20(r17)
   19610:	8d800215 	stw	r22,8(r17)
   19614:	8d000415 	stw	r20,16(r17)
   19618:	89000015 	stw	r4,0(r17)
   1961c:	802b883a 	mov	r21,r16
   19620:	802d883a 	mov	r22,r16
   19624:	b00d883a 	mov	r6,r22
   19628:	e00b883a 	mov	r5,fp
   1962c:	0017a8c0 	call	17a8c <memmove>
   19630:	88800217 	ldw	r2,8(r17)
   19634:	89000017 	ldw	r4,0(r17)
   19638:	90c00217 	ldw	r3,8(r18)
   1963c:	1545c83a 	sub	r2,r2,r21
   19640:	2589883a 	add	r4,r4,r22
   19644:	88800215 	stw	r2,8(r17)
   19648:	89000015 	stw	r4,0(r17)
   1964c:	1c21c83a 	sub	r16,r3,r16
   19650:	94000215 	stw	r16,8(r18)
   19654:	80001726 	beq	r16,zero,196b4 <__ssprint_r+0x198>
   19658:	bf000017 	ldw	fp,0(r23)
   1965c:	bc000117 	ldw	r16,4(r23)
   19660:	bdc00204 	addi	r23,r23,8
   19664:	003fc206 	br	19570 <__alt_data_end+0xfc019570>
   19668:	802b883a 	mov	r21,r16
   1966c:	802d883a 	mov	r22,r16
   19670:	003fec06 	br	19624 <__alt_data_end+0xfc019624>
   19674:	9809883a 	mov	r4,r19
   19678:	0018e080 	call	18e08 <_realloc_r>
   1967c:	1029883a 	mov	r20,r2
   19680:	103fe01e 	bne	r2,zero,19604 <__alt_data_end+0xfc019604>
   19684:	89400417 	ldw	r5,16(r17)
   19688:	9809883a 	mov	r4,r19
   1968c:	0016db00 	call	16db0 <_free_r>
   19690:	88c0030b 	ldhu	r3,12(r17)
   19694:	00800304 	movi	r2,12
   19698:	98800015 	stw	r2,0(r19)
   1969c:	18c01014 	ori	r3,r3,64
   196a0:	88c0030d 	sth	r3,12(r17)
   196a4:	00bfffc4 	movi	r2,-1
   196a8:	90000215 	stw	zero,8(r18)
   196ac:	90000115 	stw	zero,4(r18)
   196b0:	00000206 	br	196bc <__ssprint_r+0x1a0>
   196b4:	90000115 	stw	zero,4(r18)
   196b8:	0005883a 	mov	r2,zero
   196bc:	dfc00917 	ldw	ra,36(sp)
   196c0:	df000817 	ldw	fp,32(sp)
   196c4:	ddc00717 	ldw	r23,28(sp)
   196c8:	dd800617 	ldw	r22,24(sp)
   196cc:	dd400517 	ldw	r21,20(sp)
   196d0:	dd000417 	ldw	r20,16(sp)
   196d4:	dcc00317 	ldw	r19,12(sp)
   196d8:	dc800217 	ldw	r18,8(sp)
   196dc:	dc400117 	ldw	r17,4(sp)
   196e0:	dc000017 	ldw	r16,0(sp)
   196e4:	dec00a04 	addi	sp,sp,40
   196e8:	f800283a 	ret

000196ec <___svfiprintf_internal_r>:
   196ec:	2880030b 	ldhu	r2,12(r5)
   196f0:	deffc804 	addi	sp,sp,-224
   196f4:	dcc03115 	stw	r19,196(sp)
   196f8:	dfc03715 	stw	ra,220(sp)
   196fc:	df003615 	stw	fp,216(sp)
   19700:	ddc03515 	stw	r23,212(sp)
   19704:	dd803415 	stw	r22,208(sp)
   19708:	dd403315 	stw	r21,204(sp)
   1970c:	dd003215 	stw	r20,200(sp)
   19710:	dc803015 	stw	r18,192(sp)
   19714:	dc402f15 	stw	r17,188(sp)
   19718:	dc002e15 	stw	r16,184(sp)
   1971c:	d9402315 	stw	r5,140(sp)
   19720:	d9002715 	stw	r4,156(sp)
   19724:	1080200c 	andi	r2,r2,128
   19728:	d9c02415 	stw	r7,144(sp)
   1972c:	3027883a 	mov	r19,r6
   19730:	10000226 	beq	r2,zero,1973c <___svfiprintf_internal_r+0x50>
   19734:	28800417 	ldw	r2,16(r5)
   19738:	10046d26 	beq	r2,zero,1a8f0 <___svfiprintf_internal_r+0x1204>
   1973c:	d8801a04 	addi	r2,sp,104
   19740:	d8c019c4 	addi	r3,sp,103
   19744:	058000f4 	movhi	r22,3
   19748:	10c9c83a 	sub	r4,r2,r3
   1974c:	b5ae5e04 	addi	r22,r22,-18056
   19750:	d8801e15 	stw	r2,120(sp)
   19754:	d8c01f15 	stw	r3,124(sp)
   19758:	dec01a15 	stw	sp,104(sp)
   1975c:	d8001c15 	stw	zero,112(sp)
   19760:	d8001b15 	stw	zero,108(sp)
   19764:	d811883a 	mov	r8,sp
   19768:	d8002915 	stw	zero,164(sp)
   1976c:	d8002615 	stw	zero,152(sp)
   19770:	d9002c15 	stw	r4,176(sp)
   19774:	98800007 	ldb	r2,0(r19)
   19778:	10031426 	beq	r2,zero,1a3cc <___svfiprintf_internal_r+0xce0>
   1977c:	00c00944 	movi	r3,37
   19780:	9825883a 	mov	r18,r19
   19784:	10c0021e 	bne	r2,r3,19790 <___svfiprintf_internal_r+0xa4>
   19788:	00001406 	br	197dc <___svfiprintf_internal_r+0xf0>
   1978c:	10c00326 	beq	r2,r3,1979c <___svfiprintf_internal_r+0xb0>
   19790:	94800044 	addi	r18,r18,1
   19794:	90800007 	ldb	r2,0(r18)
   19798:	103ffc1e 	bne	r2,zero,1978c <__alt_data_end+0xfc01978c>
   1979c:	94e1c83a 	sub	r16,r18,r19
   197a0:	80000e26 	beq	r16,zero,197dc <___svfiprintf_internal_r+0xf0>
   197a4:	d8c01c17 	ldw	r3,112(sp)
   197a8:	d8801b17 	ldw	r2,108(sp)
   197ac:	44c00015 	stw	r19,0(r8)
   197b0:	1c07883a 	add	r3,r3,r16
   197b4:	10800044 	addi	r2,r2,1
   197b8:	d8c01c15 	stw	r3,112(sp)
   197bc:	44000115 	stw	r16,4(r8)
   197c0:	d8801b15 	stw	r2,108(sp)
   197c4:	00c001c4 	movi	r3,7
   197c8:	18835c16 	blt	r3,r2,1a53c <___svfiprintf_internal_r+0xe50>
   197cc:	42000204 	addi	r8,r8,8
   197d0:	d9402617 	ldw	r5,152(sp)
   197d4:	2c0b883a 	add	r5,r5,r16
   197d8:	d9402615 	stw	r5,152(sp)
   197dc:	90800007 	ldb	r2,0(r18)
   197e0:	1002fc26 	beq	r2,zero,1a3d4 <___svfiprintf_internal_r+0xce8>
   197e4:	0023883a 	mov	r17,zero
   197e8:	00bfffc4 	movi	r2,-1
   197ec:	0021883a 	mov	r16,zero
   197f0:	94c00044 	addi	r19,r18,1
   197f4:	90c00047 	ldb	r3,1(r18)
   197f8:	dc402105 	stb	r17,132(sp)
   197fc:	d8001d85 	stb	zero,118(sp)
   19800:	002b883a 	mov	r21,zero
   19804:	d8802015 	stw	r2,128(sp)
   19808:	d8002515 	stw	zero,148(sp)
   1980c:	04801604 	movi	r18,88
   19810:	05000244 	movi	r20,9
   19814:	402f883a 	mov	r23,r8
   19818:	8023883a 	mov	r17,r16
   1981c:	9cc00044 	addi	r19,r19,1
   19820:	18bff804 	addi	r2,r3,-32
   19824:	9081fb36 	bltu	r18,r2,1a014 <___svfiprintf_internal_r+0x928>
   19828:	100490ba 	slli	r2,r2,2
   1982c:	010000b4 	movhi	r4,2
   19830:	21261004 	addi	r4,r4,-26560
   19834:	1105883a 	add	r2,r2,r4
   19838:	10800017 	ldw	r2,0(r2)
   1983c:	1000683a 	jmp	r2
   19840:	00019a40 	call	19a4 <_ZN3USB4TaskEv+0x188>
   19844:	0001a014 	movui	zero,1664
   19848:	0001a014 	movui	zero,1664
   1984c:	00019a34 	movhi	zero,1640
   19850:	0001a014 	movui	zero,1664
   19854:	0001a014 	movui	zero,1664
   19858:	0001a014 	movui	zero,1664
   1985c:	0001a014 	movui	zero,1664
   19860:	0001a014 	movui	zero,1664
   19864:	0001a014 	movui	zero,1664
   19868:	000199a4 	muli	zero,zero,1638
   1986c:	00019ba0 	cmpeqi	zero,zero,1646
   19870:	0001a014 	movui	zero,1664
   19874:	000199cc 	andi	zero,zero,1639
   19878:	0001a050 	cmplti	zero,zero,1665
   1987c:	0001a014 	movui	zero,1664
   19880:	0001a044 	movi	zero,1665
   19884:	00019fd8 	cmpnei	zero,zero,1663
   19888:	00019fd8 	cmpnei	zero,zero,1663
   1988c:	00019fd8 	cmpnei	zero,zero,1663
   19890:	00019fd8 	cmpnei	zero,zero,1663
   19894:	00019fd8 	cmpnei	zero,zero,1663
   19898:	00019fd8 	cmpnei	zero,zero,1663
   1989c:	00019fd8 	cmpnei	zero,zero,1663
   198a0:	00019fd8 	cmpnei	zero,zero,1663
   198a4:	00019fd8 	cmpnei	zero,zero,1663
   198a8:	0001a014 	movui	zero,1664
   198ac:	0001a014 	movui	zero,1664
   198b0:	0001a014 	movui	zero,1664
   198b4:	0001a014 	movui	zero,1664
   198b8:	0001a014 	movui	zero,1664
   198bc:	0001a014 	movui	zero,1664
   198c0:	0001a014 	movui	zero,1664
   198c4:	0001a014 	movui	zero,1664
   198c8:	0001a014 	movui	zero,1664
   198cc:	0001a014 	movui	zero,1664
   198d0:	00019f5c 	xori	zero,zero,1661
   198d4:	0001a014 	movui	zero,1664
   198d8:	0001a014 	movui	zero,1664
   198dc:	0001a014 	movui	zero,1664
   198e0:	0001a014 	movui	zero,1664
   198e4:	0001a014 	movui	zero,1664
   198e8:	0001a014 	movui	zero,1664
   198ec:	0001a014 	movui	zero,1664
   198f0:	0001a014 	movui	zero,1664
   198f4:	0001a014 	movui	zero,1664
   198f8:	0001a014 	movui	zero,1664
   198fc:	0001a10c 	andi	zero,zero,1668
   19900:	0001a014 	movui	zero,1664
   19904:	0001a014 	movui	zero,1664
   19908:	0001a014 	movui	zero,1664
   1990c:	0001a014 	movui	zero,1664
   19910:	0001a014 	movui	zero,1664
   19914:	0001a098 	cmpnei	zero,zero,1666
   19918:	0001a014 	movui	zero,1664
   1991c:	0001a014 	movui	zero,1664
   19920:	00019d98 	cmpnei	zero,zero,1654
   19924:	0001a014 	movui	zero,1664
   19928:	0001a014 	movui	zero,1664
   1992c:	0001a014 	movui	zero,1664
   19930:	0001a014 	movui	zero,1664
   19934:	0001a014 	movui	zero,1664
   19938:	0001a014 	movui	zero,1664
   1993c:	0001a014 	movui	zero,1664
   19940:	0001a014 	movui	zero,1664
   19944:	0001a014 	movui	zero,1664
   19948:	0001a014 	movui	zero,1664
   1994c:	00019c64 	muli	zero,zero,1649
   19950:	00019e48 	cmpgei	zero,zero,1657
   19954:	0001a014 	movui	zero,1664
   19958:	0001a014 	movui	zero,1664
   1995c:	0001a014 	movui	zero,1664
   19960:	00019e3c 	xorhi	zero,zero,1656
   19964:	00019e48 	cmpgei	zero,zero,1657
   19968:	0001a014 	movui	zero,1664
   1996c:	0001a014 	movui	zero,1664
   19970:	00019e28 	cmpgeui	zero,zero,1656
   19974:	0001a014 	movui	zero,1664
   19978:	00019de8 	cmpgeui	zero,zero,1655
   1997c:	00019bb4 	movhi	zero,1646
   19980:	000199d8 	cmpnei	zero,zero,1639
   19984:	00019f50 	cmplti	zero,zero,1661
   19988:	0001a014 	movui	zero,1664
   1998c:	00019efc 	xorhi	zero,zero,1659
   19990:	0001a014 	movui	zero,1664
   19994:	00019b18 	cmpnei	zero,zero,1644
   19998:	0001a014 	movui	zero,1664
   1999c:	0001a014 	movui	zero,1664
   199a0:	00019a64 	muli	zero,zero,1641
   199a4:	d9002417 	ldw	r4,144(sp)
   199a8:	d9402417 	ldw	r5,144(sp)
   199ac:	21000017 	ldw	r4,0(r4)
   199b0:	28800104 	addi	r2,r5,4
   199b4:	d9002515 	stw	r4,148(sp)
   199b8:	20032b0e 	bge	r4,zero,1a668 <___svfiprintf_internal_r+0xf7c>
   199bc:	d8c02517 	ldw	r3,148(sp)
   199c0:	d8802415 	stw	r2,144(sp)
   199c4:	00c7c83a 	sub	r3,zero,r3
   199c8:	d8c02515 	stw	r3,148(sp)
   199cc:	8c400114 	ori	r17,r17,4
   199d0:	98c00007 	ldb	r3,0(r19)
   199d4:	003f9106 	br	1981c <__alt_data_end+0xfc01981c>
   199d8:	00800c04 	movi	r2,48
   199dc:	d9402417 	ldw	r5,144(sp)
   199e0:	d9002017 	ldw	r4,128(sp)
   199e4:	d8801d05 	stb	r2,116(sp)
   199e8:	00801e04 	movi	r2,120
   199ec:	d8801d45 	stb	r2,117(sp)
   199f0:	d8001d85 	stb	zero,118(sp)
   199f4:	b811883a 	mov	r8,r23
   199f8:	28c00104 	addi	r3,r5,4
   199fc:	2c800017 	ldw	r18,0(r5)
   19a00:	0029883a 	mov	r20,zero
   19a04:	88800094 	ori	r2,r17,2
   19a08:	20036316 	blt	r4,zero,1a798 <___svfiprintf_internal_r+0x10ac>
   19a0c:	00bfdfc4 	movi	r2,-129
   19a10:	88a0703a 	and	r16,r17,r2
   19a14:	d8c02415 	stw	r3,144(sp)
   19a18:	84000094 	ori	r16,r16,2
   19a1c:	90031c26 	beq	r18,zero,1a690 <___svfiprintf_internal_r+0xfa4>
   19a20:	014000f4 	movhi	r5,3
   19a24:	296df604 	addi	r5,r5,-18472
   19a28:	002b883a 	mov	r21,zero
   19a2c:	d9402915 	stw	r5,164(sp)
   19a30:	00002906 	br	19ad8 <___svfiprintf_internal_r+0x3ec>
   19a34:	8c400054 	ori	r17,r17,1
   19a38:	98c00007 	ldb	r3,0(r19)
   19a3c:	003f7706 	br	1981c <__alt_data_end+0xfc01981c>
   19a40:	a8803fcc 	andi	r2,r21,255
   19a44:	1080201c 	xori	r2,r2,128
   19a48:	10bfe004 	addi	r2,r2,-128
   19a4c:	10032a1e 	bne	r2,zero,1a6f8 <___svfiprintf_internal_r+0x100c>
   19a50:	00c00044 	movi	r3,1
   19a54:	d8c02105 	stb	r3,132(sp)
   19a58:	05400804 	movi	r21,32
   19a5c:	98c00007 	ldb	r3,0(r19)
   19a60:	003f6e06 	br	1981c <__alt_data_end+0xfc01981c>
   19a64:	8821883a 	mov	r16,r17
   19a68:	dc402103 	ldbu	r17,132(sp)
   19a6c:	b811883a 	mov	r8,r23
   19a70:	8c403fcc 	andi	r17,r17,255
   19a74:	8803f01e 	bne	r17,zero,1aa38 <___svfiprintf_internal_r+0x134c>
   19a78:	008000f4 	movhi	r2,3
   19a7c:	10adf604 	addi	r2,r2,-18472
   19a80:	d8802915 	stw	r2,164(sp)
   19a84:	8080080c 	andi	r2,r16,32
   19a88:	1000cd26 	beq	r2,zero,19dc0 <___svfiprintf_internal_r+0x6d4>
   19a8c:	d9002417 	ldw	r4,144(sp)
   19a90:	24800017 	ldw	r18,0(r4)
   19a94:	25000117 	ldw	r20,4(r4)
   19a98:	21000204 	addi	r4,r4,8
   19a9c:	d9002415 	stw	r4,144(sp)
   19aa0:	8080004c 	andi	r2,r16,1
   19aa4:	1002c726 	beq	r2,zero,1a5c4 <___svfiprintf_internal_r+0xed8>
   19aa8:	9504b03a 	or	r2,r18,r20
   19aac:	1003061e 	bne	r2,zero,1a6c8 <___svfiprintf_internal_r+0xfdc>
   19ab0:	d9002017 	ldw	r4,128(sp)
   19ab4:	d8001d85 	stb	zero,118(sp)
   19ab8:	20033e16 	blt	r4,zero,1a7b4 <___svfiprintf_internal_r+0x10c8>
   19abc:	00bfdfc4 	movi	r2,-129
   19ac0:	80a0703a 	and	r16,r16,r2
   19ac4:	d9402017 	ldw	r5,128(sp)
   19ac8:	002b883a 	mov	r21,zero
   19acc:	28002826 	beq	r5,zero,19b70 <___svfiprintf_internal_r+0x484>
   19ad0:	0025883a 	mov	r18,zero
   19ad4:	0029883a 	mov	r20,zero
   19ad8:	d9002917 	ldw	r4,164(sp)
   19adc:	dc401a04 	addi	r17,sp,104
   19ae0:	908003cc 	andi	r2,r18,15
   19ae4:	a006973a 	slli	r3,r20,28
   19ae8:	2085883a 	add	r2,r4,r2
   19aec:	9024d13a 	srli	r18,r18,4
   19af0:	10800003 	ldbu	r2,0(r2)
   19af4:	a028d13a 	srli	r20,r20,4
   19af8:	8c7fffc4 	addi	r17,r17,-1
   19afc:	1ca4b03a 	or	r18,r3,r18
   19b00:	88800005 	stb	r2,0(r17)
   19b04:	9504b03a 	or	r2,r18,r20
   19b08:	103ff51e 	bne	r2,zero,19ae0 <__alt_data_end+0xfc019ae0>
   19b0c:	d8801e17 	ldw	r2,120(sp)
   19b10:	1469c83a 	sub	r20,r2,r17
   19b14:	00001906 	br	19b7c <___svfiprintf_internal_r+0x490>
   19b18:	8821883a 	mov	r16,r17
   19b1c:	dc402103 	ldbu	r17,132(sp)
   19b20:	b811883a 	mov	r8,r23
   19b24:	8c403fcc 	andi	r17,r17,255
   19b28:	8803d01e 	bne	r17,zero,1aa6c <___svfiprintf_internal_r+0x1380>
   19b2c:	8080080c 	andi	r2,r16,32
   19b30:	10016126 	beq	r2,zero,1a0b8 <___svfiprintf_internal_r+0x9cc>
   19b34:	d9002417 	ldw	r4,144(sp)
   19b38:	d9402017 	ldw	r5,128(sp)
   19b3c:	d8001d85 	stb	zero,118(sp)
   19b40:	20c00204 	addi	r3,r4,8
   19b44:	24800017 	ldw	r18,0(r4)
   19b48:	25000117 	ldw	r20,4(r4)
   19b4c:	28030f16 	blt	r5,zero,1a78c <___svfiprintf_internal_r+0x10a0>
   19b50:	013fdfc4 	movi	r4,-129
   19b54:	9504b03a 	or	r2,r18,r20
   19b58:	d8c02415 	stw	r3,144(sp)
   19b5c:	8120703a 	and	r16,r16,r4
   19b60:	002b883a 	mov	r21,zero
   19b64:	1000cd1e 	bne	r2,zero,19e9c <___svfiprintf_internal_r+0x7b0>
   19b68:	d8c02017 	ldw	r3,128(sp)
   19b6c:	1803141e 	bne	r3,zero,1a7c0 <___svfiprintf_internal_r+0x10d4>
   19b70:	d8002015 	stw	zero,128(sp)
   19b74:	0029883a 	mov	r20,zero
   19b78:	dc401a04 	addi	r17,sp,104
   19b7c:	dc802017 	ldw	r18,128(sp)
   19b80:	9500010e 	bge	r18,r20,19b88 <___svfiprintf_internal_r+0x49c>
   19b84:	a025883a 	mov	r18,r20
   19b88:	ad403fcc 	andi	r21,r21,255
   19b8c:	ad40201c 	xori	r21,r21,128
   19b90:	ad7fe004 	addi	r21,r21,-128
   19b94:	a8003f26 	beq	r21,zero,19c94 <___svfiprintf_internal_r+0x5a8>
   19b98:	94800044 	addi	r18,r18,1
   19b9c:	00003d06 	br	19c94 <___svfiprintf_internal_r+0x5a8>
   19ba0:	00c00044 	movi	r3,1
   19ba4:	d8c02105 	stb	r3,132(sp)
   19ba8:	05400ac4 	movi	r21,43
   19bac:	98c00007 	ldb	r3,0(r19)
   19bb0:	003f1a06 	br	1981c <__alt_data_end+0xfc01981c>
   19bb4:	8821883a 	mov	r16,r17
   19bb8:	dc402103 	ldbu	r17,132(sp)
   19bbc:	b811883a 	mov	r8,r23
   19bc0:	8c403fcc 	andi	r17,r17,255
   19bc4:	8803a71e 	bne	r17,zero,1aa64 <___svfiprintf_internal_r+0x1378>
   19bc8:	8080080c 	andi	r2,r16,32
   19bcc:	10015726 	beq	r2,zero,1a12c <___svfiprintf_internal_r+0xa40>
   19bd0:	d8c02417 	ldw	r3,144(sp)
   19bd4:	d9002017 	ldw	r4,128(sp)
   19bd8:	d8001d85 	stb	zero,118(sp)
   19bdc:	18800204 	addi	r2,r3,8
   19be0:	1c800017 	ldw	r18,0(r3)
   19be4:	1d000117 	ldw	r20,4(r3)
   19be8:	2002db16 	blt	r4,zero,1a758 <___svfiprintf_internal_r+0x106c>
   19bec:	013fdfc4 	movi	r4,-129
   19bf0:	9506b03a 	or	r3,r18,r20
   19bf4:	d8802415 	stw	r2,144(sp)
   19bf8:	8120703a 	and	r16,r16,r4
   19bfc:	18015826 	beq	r3,zero,1a160 <___svfiprintf_internal_r+0xa74>
   19c00:	002b883a 	mov	r21,zero
   19c04:	dc401a04 	addi	r17,sp,104
   19c08:	9006d0fa 	srli	r3,r18,3
   19c0c:	a008977a 	slli	r4,r20,29
   19c10:	a028d0fa 	srli	r20,r20,3
   19c14:	948001cc 	andi	r18,r18,7
   19c18:	90800c04 	addi	r2,r18,48
   19c1c:	8c7fffc4 	addi	r17,r17,-1
   19c20:	20e4b03a 	or	r18,r4,r3
   19c24:	88800005 	stb	r2,0(r17)
   19c28:	9506b03a 	or	r3,r18,r20
   19c2c:	183ff61e 	bne	r3,zero,19c08 <__alt_data_end+0xfc019c08>
   19c30:	80c0004c 	andi	r3,r16,1
   19c34:	18028926 	beq	r3,zero,1a65c <___svfiprintf_internal_r+0xf70>
   19c38:	10803fcc 	andi	r2,r2,255
   19c3c:	1080201c 	xori	r2,r2,128
   19c40:	10bfe004 	addi	r2,r2,-128
   19c44:	00c00c04 	movi	r3,48
   19c48:	10ffb026 	beq	r2,r3,19b0c <__alt_data_end+0xfc019b0c>
   19c4c:	88ffffc5 	stb	r3,-1(r17)
   19c50:	d8c01e17 	ldw	r3,120(sp)
   19c54:	88bfffc4 	addi	r2,r17,-1
   19c58:	1023883a 	mov	r17,r2
   19c5c:	18a9c83a 	sub	r20,r3,r2
   19c60:	003fc606 	br	19b7c <__alt_data_end+0xfc019b7c>
   19c64:	d8c02417 	ldw	r3,144(sp)
   19c68:	04800044 	movi	r18,1
   19c6c:	8821883a 	mov	r16,r17
   19c70:	18800017 	ldw	r2,0(r3)
   19c74:	18c00104 	addi	r3,r3,4
   19c78:	b811883a 	mov	r8,r23
   19c7c:	d8001d85 	stb	zero,118(sp)
   19c80:	d8801005 	stb	r2,64(sp)
   19c84:	d8c02415 	stw	r3,144(sp)
   19c88:	9029883a 	mov	r20,r18
   19c8c:	dc401004 	addi	r17,sp,64
   19c90:	d8002015 	stw	zero,128(sp)
   19c94:	80c0008c 	andi	r3,r16,2
   19c98:	d8c02115 	stw	r3,132(sp)
   19c9c:	18000126 	beq	r3,zero,19ca4 <___svfiprintf_internal_r+0x5b8>
   19ca0:	94800084 	addi	r18,r18,2
   19ca4:	80c0210c 	andi	r3,r16,132
   19ca8:	d8c02215 	stw	r3,136(sp)
   19cac:	1801321e 	bne	r3,zero,1a178 <___svfiprintf_internal_r+0xa8c>
   19cb0:	d9002517 	ldw	r4,148(sp)
   19cb4:	24b9c83a 	sub	fp,r4,r18
   19cb8:	07012f0e 	bge	zero,fp,1a178 <___svfiprintf_internal_r+0xa8c>
   19cbc:	02400404 	movi	r9,16
   19cc0:	d8c01c17 	ldw	r3,112(sp)
   19cc4:	d8801b17 	ldw	r2,108(sp)
   19cc8:	4f03250e 	bge	r9,fp,1a960 <___svfiprintf_internal_r+0x1274>
   19ccc:	010000f4 	movhi	r4,3
   19cd0:	212e6204 	addi	r4,r4,-18040
   19cd4:	dc002a15 	stw	r16,168(sp)
   19cd8:	dc402b15 	stw	r17,172(sp)
   19cdc:	d9002815 	stw	r4,160(sp)
   19ce0:	e023883a 	mov	r17,fp
   19ce4:	482f883a 	mov	r23,r9
   19ce8:	9839883a 	mov	fp,r19
   19cec:	054001c4 	movi	r21,7
   19cf0:	9027883a 	mov	r19,r18
   19cf4:	dc002717 	ldw	r16,156(sp)
   19cf8:	dc802317 	ldw	r18,140(sp)
   19cfc:	00000306 	br	19d0c <___svfiprintf_internal_r+0x620>
   19d00:	8c7ffc04 	addi	r17,r17,-16
   19d04:	42000204 	addi	r8,r8,8
   19d08:	bc40130e 	bge	r23,r17,19d58 <___svfiprintf_internal_r+0x66c>
   19d0c:	014000f4 	movhi	r5,3
   19d10:	18c00404 	addi	r3,r3,16
   19d14:	10800044 	addi	r2,r2,1
   19d18:	296e6204 	addi	r5,r5,-18040
   19d1c:	41400015 	stw	r5,0(r8)
   19d20:	45c00115 	stw	r23,4(r8)
   19d24:	d8c01c15 	stw	r3,112(sp)
   19d28:	d8801b15 	stw	r2,108(sp)
   19d2c:	a8bff40e 	bge	r21,r2,19d00 <__alt_data_end+0xfc019d00>
   19d30:	d9801a04 	addi	r6,sp,104
   19d34:	900b883a 	mov	r5,r18
   19d38:	8009883a 	mov	r4,r16
   19d3c:	001951c0 	call	1951c <__ssprint_r>
   19d40:	1001aa1e 	bne	r2,zero,1a3ec <___svfiprintf_internal_r+0xd00>
   19d44:	8c7ffc04 	addi	r17,r17,-16
   19d48:	d8c01c17 	ldw	r3,112(sp)
   19d4c:	d8801b17 	ldw	r2,108(sp)
   19d50:	d811883a 	mov	r8,sp
   19d54:	bc7fed16 	blt	r23,r17,19d0c <__alt_data_end+0xfc019d0c>
   19d58:	9825883a 	mov	r18,r19
   19d5c:	dc002a17 	ldw	r16,168(sp)
   19d60:	e027883a 	mov	r19,fp
   19d64:	8839883a 	mov	fp,r17
   19d68:	dc402b17 	ldw	r17,172(sp)
   19d6c:	d9002817 	ldw	r4,160(sp)
   19d70:	e0c7883a 	add	r3,fp,r3
   19d74:	10800044 	addi	r2,r2,1
   19d78:	41000015 	stw	r4,0(r8)
   19d7c:	47000115 	stw	fp,4(r8)
   19d80:	d8c01c15 	stw	r3,112(sp)
   19d84:	d8801b15 	stw	r2,108(sp)
   19d88:	010001c4 	movi	r4,7
   19d8c:	20821616 	blt	r4,r2,1a5e8 <___svfiprintf_internal_r+0xefc>
   19d90:	42000204 	addi	r8,r8,8
   19d94:	0000fa06 	br	1a180 <___svfiprintf_internal_r+0xa94>
   19d98:	8821883a 	mov	r16,r17
   19d9c:	dc402103 	ldbu	r17,132(sp)
   19da0:	b811883a 	mov	r8,r23
   19da4:	8c403fcc 	andi	r17,r17,255
   19da8:	8803361e 	bne	r17,zero,1aa84 <___svfiprintf_internal_r+0x1398>
   19dac:	014000f4 	movhi	r5,3
   19db0:	296df104 	addi	r5,r5,-18492
   19db4:	d9402915 	stw	r5,164(sp)
   19db8:	8080080c 	andi	r2,r16,32
   19dbc:	103f331e 	bne	r2,zero,19a8c <__alt_data_end+0xfc019a8c>
   19dc0:	8080040c 	andi	r2,r16,16
   19dc4:	1002551e 	bne	r2,zero,1a71c <___svfiprintf_internal_r+0x1030>
   19dc8:	8080100c 	andi	r2,r16,64
   19dcc:	1002a626 	beq	r2,zero,1a868 <___svfiprintf_internal_r+0x117c>
   19dd0:	d8802417 	ldw	r2,144(sp)
   19dd4:	0029883a 	mov	r20,zero
   19dd8:	1480000b 	ldhu	r18,0(r2)
   19ddc:	10800104 	addi	r2,r2,4
   19de0:	d8802415 	stw	r2,144(sp)
   19de4:	003f2e06 	br	19aa0 <__alt_data_end+0xfc019aa0>
   19de8:	8821883a 	mov	r16,r17
   19dec:	dc402103 	ldbu	r17,132(sp)
   19df0:	b811883a 	mov	r8,r23
   19df4:	8c403fcc 	andi	r17,r17,255
   19df8:	88030b1e 	bne	r17,zero,1aa28 <___svfiprintf_internal_r+0x133c>
   19dfc:	8080080c 	andi	r2,r16,32
   19e00:	1002271e 	bne	r2,zero,1a6a0 <___svfiprintf_internal_r+0xfb4>
   19e04:	8080040c 	andi	r2,r16,16
   19e08:	10028e26 	beq	r2,zero,1a844 <___svfiprintf_internal_r+0x1158>
   19e0c:	d8c02417 	ldw	r3,144(sp)
   19e10:	d9002617 	ldw	r4,152(sp)
   19e14:	18800017 	ldw	r2,0(r3)
   19e18:	18c00104 	addi	r3,r3,4
   19e1c:	d8c02415 	stw	r3,144(sp)
   19e20:	11000015 	stw	r4,0(r2)
   19e24:	003e5306 	br	19774 <__alt_data_end+0xfc019774>
   19e28:	98c00007 	ldb	r3,0(r19)
   19e2c:	01401b04 	movi	r5,108
   19e30:	19424f26 	beq	r3,r5,1a770 <___svfiprintf_internal_r+0x1084>
   19e34:	8c400414 	ori	r17,r17,16
   19e38:	003e7806 	br	1981c <__alt_data_end+0xfc01981c>
   19e3c:	8c401014 	ori	r17,r17,64
   19e40:	98c00007 	ldb	r3,0(r19)
   19e44:	003e7506 	br	1981c <__alt_data_end+0xfc01981c>
   19e48:	8821883a 	mov	r16,r17
   19e4c:	dc402103 	ldbu	r17,132(sp)
   19e50:	b811883a 	mov	r8,r23
   19e54:	8c403fcc 	andi	r17,r17,255
   19e58:	8802fe1e 	bne	r17,zero,1aa54 <___svfiprintf_internal_r+0x1368>
   19e5c:	8080080c 	andi	r2,r16,32
   19e60:	10004626 	beq	r2,zero,19f7c <___svfiprintf_internal_r+0x890>
   19e64:	d9002417 	ldw	r4,144(sp)
   19e68:	20800117 	ldw	r2,4(r4)
   19e6c:	24800017 	ldw	r18,0(r4)
   19e70:	21000204 	addi	r4,r4,8
   19e74:	d9002415 	stw	r4,144(sp)
   19e78:	1029883a 	mov	r20,r2
   19e7c:	10004a16 	blt	r2,zero,19fa8 <___svfiprintf_internal_r+0x8bc>
   19e80:	d9002017 	ldw	r4,128(sp)
   19e84:	dd401d83 	ldbu	r21,118(sp)
   19e88:	2001eb16 	blt	r4,zero,1a638 <___svfiprintf_internal_r+0xf4c>
   19e8c:	00ffdfc4 	movi	r3,-129
   19e90:	9504b03a 	or	r2,r18,r20
   19e94:	80e0703a 	and	r16,r16,r3
   19e98:	103f3326 	beq	r2,zero,19b68 <__alt_data_end+0xfc019b68>
   19e9c:	a0009426 	beq	r20,zero,1a0f0 <___svfiprintf_internal_r+0xa04>
   19ea0:	dc401a04 	addi	r17,sp,104
   19ea4:	402f883a 	mov	r23,r8
   19ea8:	9009883a 	mov	r4,r18
   19eac:	a00b883a 	mov	r5,r20
   19eb0:	01800284 	movi	r6,10
   19eb4:	000f883a 	mov	r7,zero
   19eb8:	001d0cc0 	call	1d0cc <__umoddi3>
   19ebc:	10800c04 	addi	r2,r2,48
   19ec0:	8c7fffc4 	addi	r17,r17,-1
   19ec4:	9009883a 	mov	r4,r18
   19ec8:	a00b883a 	mov	r5,r20
   19ecc:	88800005 	stb	r2,0(r17)
   19ed0:	01800284 	movi	r6,10
   19ed4:	000f883a 	mov	r7,zero
   19ed8:	001cad00 	call	1cad0 <__udivdi3>
   19edc:	1025883a 	mov	r18,r2
   19ee0:	10c4b03a 	or	r2,r2,r3
   19ee4:	1829883a 	mov	r20,r3
   19ee8:	103fef1e 	bne	r2,zero,19ea8 <__alt_data_end+0xfc019ea8>
   19eec:	d9001e17 	ldw	r4,120(sp)
   19ef0:	b811883a 	mov	r8,r23
   19ef4:	2469c83a 	sub	r20,r4,r17
   19ef8:	003f2006 	br	19b7c <__alt_data_end+0xfc019b7c>
   19efc:	d8802417 	ldw	r2,144(sp)
   19f00:	8821883a 	mov	r16,r17
   19f04:	d8001d85 	stb	zero,118(sp)
   19f08:	14400017 	ldw	r17,0(r2)
   19f0c:	b811883a 	mov	r8,r23
   19f10:	15c00104 	addi	r23,r2,4
   19f14:	88026c26 	beq	r17,zero,1a8c8 <___svfiprintf_internal_r+0x11dc>
   19f18:	d8c02017 	ldw	r3,128(sp)
   19f1c:	18025f16 	blt	r3,zero,1a89c <___svfiprintf_internal_r+0x11b0>
   19f20:	180d883a 	mov	r6,r3
   19f24:	000b883a 	mov	r5,zero
   19f28:	8809883a 	mov	r4,r17
   19f2c:	da002d15 	stw	r8,180(sp)
   19f30:	00179a80 	call	179a8 <memchr>
   19f34:	da002d17 	ldw	r8,180(sp)
   19f38:	1002a526 	beq	r2,zero,1a9d0 <___svfiprintf_internal_r+0x12e4>
   19f3c:	1469c83a 	sub	r20,r2,r17
   19f40:	dd401d83 	ldbu	r21,118(sp)
   19f44:	ddc02415 	stw	r23,144(sp)
   19f48:	d8002015 	stw	zero,128(sp)
   19f4c:	003f0b06 	br	19b7c <__alt_data_end+0xfc019b7c>
   19f50:	8c400814 	ori	r17,r17,32
   19f54:	98c00007 	ldb	r3,0(r19)
   19f58:	003e3006 	br	1981c <__alt_data_end+0xfc01981c>
   19f5c:	8821883a 	mov	r16,r17
   19f60:	dc402103 	ldbu	r17,132(sp)
   19f64:	b811883a 	mov	r8,r23
   19f68:	8c403fcc 	andi	r17,r17,255
   19f6c:	8802b01e 	bne	r17,zero,1aa30 <___svfiprintf_internal_r+0x1344>
   19f70:	84000414 	ori	r16,r16,16
   19f74:	8080080c 	andi	r2,r16,32
   19f78:	103fba1e 	bne	r2,zero,19e64 <__alt_data_end+0xfc019e64>
   19f7c:	8080040c 	andi	r2,r16,16
   19f80:	1001df1e 	bne	r2,zero,1a700 <___svfiprintf_internal_r+0x1014>
   19f84:	8080100c 	andi	r2,r16,64
   19f88:	10023d26 	beq	r2,zero,1a880 <___svfiprintf_internal_r+0x1194>
   19f8c:	d8802417 	ldw	r2,144(sp)
   19f90:	1480000f 	ldh	r18,0(r2)
   19f94:	10800104 	addi	r2,r2,4
   19f98:	d8802415 	stw	r2,144(sp)
   19f9c:	9029d7fa 	srai	r20,r18,31
   19fa0:	a005883a 	mov	r2,r20
   19fa4:	103fb60e 	bge	r2,zero,19e80 <__alt_data_end+0xfc019e80>
   19fa8:	d9402017 	ldw	r5,128(sp)
   19fac:	04a5c83a 	sub	r18,zero,r18
   19fb0:	05400b44 	movi	r21,45
   19fb4:	9004c03a 	cmpne	r2,r18,zero
   19fb8:	0529c83a 	sub	r20,zero,r20
   19fbc:	dd401d85 	stb	r21,118(sp)
   19fc0:	a0a9c83a 	sub	r20,r20,r2
   19fc4:	28026c16 	blt	r5,zero,1a978 <___svfiprintf_internal_r+0x128c>
   19fc8:	00bfdfc4 	movi	r2,-129
   19fcc:	80a0703a 	and	r16,r16,r2
   19fd0:	a03fb31e 	bne	r20,zero,19ea0 <__alt_data_end+0xfc019ea0>
   19fd4:	00004606 	br	1a0f0 <___svfiprintf_internal_r+0xa04>
   19fd8:	9839883a 	mov	fp,r19
   19fdc:	d8002515 	stw	zero,148(sp)
   19fe0:	1c3ff404 	addi	r16,r3,-48
   19fe4:	0009883a 	mov	r4,zero
   19fe8:	01400284 	movi	r5,10
   19fec:	000d8b80 	call	d8b8 <__mulsi3>
   19ff0:	e0c00007 	ldb	r3,0(fp)
   19ff4:	8089883a 	add	r4,r16,r2
   19ff8:	9cc00044 	addi	r19,r19,1
   19ffc:	1c3ff404 	addi	r16,r3,-48
   1a000:	9839883a 	mov	fp,r19
   1a004:	a43ff82e 	bgeu	r20,r16,19fe8 <__alt_data_end+0xfc019fe8>
   1a008:	d9002515 	stw	r4,148(sp)
   1a00c:	18bff804 	addi	r2,r3,-32
   1a010:	90be052e 	bgeu	r18,r2,19828 <__alt_data_end+0xfc019828>
   1a014:	8821883a 	mov	r16,r17
   1a018:	dc402103 	ldbu	r17,132(sp)
   1a01c:	b811883a 	mov	r8,r23
   1a020:	8c403fcc 	andi	r17,r17,255
   1a024:	88028d1e 	bne	r17,zero,1aa5c <___svfiprintf_internal_r+0x1370>
   1a028:	1800ea26 	beq	r3,zero,1a3d4 <___svfiprintf_internal_r+0xce8>
   1a02c:	04800044 	movi	r18,1
   1a030:	d8c01005 	stb	r3,64(sp)
   1a034:	d8001d85 	stb	zero,118(sp)
   1a038:	9029883a 	mov	r20,r18
   1a03c:	dc401004 	addi	r17,sp,64
   1a040:	003f1306 	br	19c90 <__alt_data_end+0xfc019c90>
   1a044:	8c402014 	ori	r17,r17,128
   1a048:	98c00007 	ldb	r3,0(r19)
   1a04c:	003df306 	br	1981c <__alt_data_end+0xfc01981c>
   1a050:	98c00007 	ldb	r3,0(r19)
   1a054:	01000a84 	movi	r4,42
   1a058:	9f000044 	addi	fp,r19,1
   1a05c:	19026326 	beq	r3,r4,1a9ec <___svfiprintf_internal_r+0x1300>
   1a060:	1c3ff404 	addi	r16,r3,-48
   1a064:	0009883a 	mov	r4,zero
   1a068:	a4025636 	bltu	r20,r16,1a9c4 <___svfiprintf_internal_r+0x12d8>
   1a06c:	01400284 	movi	r5,10
   1a070:	000d8b80 	call	d8b8 <__mulsi3>
   1a074:	e0c00007 	ldb	r3,0(fp)
   1a078:	1409883a 	add	r4,r2,r16
   1a07c:	e4c00044 	addi	r19,fp,1
   1a080:	1c3ff404 	addi	r16,r3,-48
   1a084:	9839883a 	mov	fp,r19
   1a088:	a43ff82e 	bgeu	r20,r16,1a06c <__alt_data_end+0xfc01a06c>
   1a08c:	20020c16 	blt	r4,zero,1a8c0 <___svfiprintf_internal_r+0x11d4>
   1a090:	d9002015 	stw	r4,128(sp)
   1a094:	003de206 	br	19820 <__alt_data_end+0xfc019820>
   1a098:	8821883a 	mov	r16,r17
   1a09c:	dc402103 	ldbu	r17,132(sp)
   1a0a0:	b811883a 	mov	r8,r23
   1a0a4:	8c403fcc 	andi	r17,r17,255
   1a0a8:	8802721e 	bne	r17,zero,1aa74 <___svfiprintf_internal_r+0x1388>
   1a0ac:	84000414 	ori	r16,r16,16
   1a0b0:	8080080c 	andi	r2,r16,32
   1a0b4:	103e9f1e 	bne	r2,zero,19b34 <__alt_data_end+0xfc019b34>
   1a0b8:	8080040c 	andi	r2,r16,16
   1a0bc:	10015326 	beq	r2,zero,1a60c <___svfiprintf_internal_r+0xf20>
   1a0c0:	d8c02417 	ldw	r3,144(sp)
   1a0c4:	d9002017 	ldw	r4,128(sp)
   1a0c8:	d8001d85 	stb	zero,118(sp)
   1a0cc:	18800104 	addi	r2,r3,4
   1a0d0:	1c800017 	ldw	r18,0(r3)
   1a0d4:	0029883a 	mov	r20,zero
   1a0d8:	20015516 	blt	r4,zero,1a630 <___svfiprintf_internal_r+0xf44>
   1a0dc:	00ffdfc4 	movi	r3,-129
   1a0e0:	d8802415 	stw	r2,144(sp)
   1a0e4:	80e0703a 	and	r16,r16,r3
   1a0e8:	002b883a 	mov	r21,zero
   1a0ec:	903e9e26 	beq	r18,zero,19b68 <__alt_data_end+0xfc019b68>
   1a0f0:	00800244 	movi	r2,9
   1a0f4:	14bf6a36 	bltu	r2,r18,19ea0 <__alt_data_end+0xfc019ea0>
   1a0f8:	94800c04 	addi	r18,r18,48
   1a0fc:	dc8019c5 	stb	r18,103(sp)
   1a100:	dd002c17 	ldw	r20,176(sp)
   1a104:	dc4019c4 	addi	r17,sp,103
   1a108:	003e9c06 	br	19b7c <__alt_data_end+0xfc019b7c>
   1a10c:	8821883a 	mov	r16,r17
   1a110:	dc402103 	ldbu	r17,132(sp)
   1a114:	b811883a 	mov	r8,r23
   1a118:	8c403fcc 	andi	r17,r17,255
   1a11c:	8802571e 	bne	r17,zero,1aa7c <___svfiprintf_internal_r+0x1390>
   1a120:	84000414 	ori	r16,r16,16
   1a124:	8080080c 	andi	r2,r16,32
   1a128:	103ea91e 	bne	r2,zero,19bd0 <__alt_data_end+0xfc019bd0>
   1a12c:	8080040c 	andi	r2,r16,16
   1a130:	10018026 	beq	r2,zero,1a734 <___svfiprintf_internal_r+0x1048>
   1a134:	d9402417 	ldw	r5,144(sp)
   1a138:	d8c02017 	ldw	r3,128(sp)
   1a13c:	d8001d85 	stb	zero,118(sp)
   1a140:	28800104 	addi	r2,r5,4
   1a144:	2c800017 	ldw	r18,0(r5)
   1a148:	0029883a 	mov	r20,zero
   1a14c:	18018216 	blt	r3,zero,1a758 <___svfiprintf_internal_r+0x106c>
   1a150:	00ffdfc4 	movi	r3,-129
   1a154:	d8802415 	stw	r2,144(sp)
   1a158:	80e0703a 	and	r16,r16,r3
   1a15c:	903ea81e 	bne	r18,zero,19c00 <__alt_data_end+0xfc019c00>
   1a160:	d8802017 	ldw	r2,128(sp)
   1a164:	002b883a 	mov	r21,zero
   1a168:	1001f226 	beq	r2,zero,1a934 <___svfiprintf_internal_r+0x1248>
   1a16c:	0025883a 	mov	r18,zero
   1a170:	0029883a 	mov	r20,zero
   1a174:	003ea306 	br	19c04 <__alt_data_end+0xfc019c04>
   1a178:	d8c01c17 	ldw	r3,112(sp)
   1a17c:	d8801b17 	ldw	r2,108(sp)
   1a180:	d9001d87 	ldb	r4,118(sp)
   1a184:	20000b26 	beq	r4,zero,1a1b4 <___svfiprintf_internal_r+0xac8>
   1a188:	d9001d84 	addi	r4,sp,118
   1a18c:	18c00044 	addi	r3,r3,1
   1a190:	10800044 	addi	r2,r2,1
   1a194:	41000015 	stw	r4,0(r8)
   1a198:	01000044 	movi	r4,1
   1a19c:	41000115 	stw	r4,4(r8)
   1a1a0:	d8c01c15 	stw	r3,112(sp)
   1a1a4:	d8801b15 	stw	r2,108(sp)
   1a1a8:	010001c4 	movi	r4,7
   1a1ac:	2080f316 	blt	r4,r2,1a57c <___svfiprintf_internal_r+0xe90>
   1a1b0:	42000204 	addi	r8,r8,8
   1a1b4:	d9402117 	ldw	r5,132(sp)
   1a1b8:	28000b26 	beq	r5,zero,1a1e8 <___svfiprintf_internal_r+0xafc>
   1a1bc:	d9001d04 	addi	r4,sp,116
   1a1c0:	18c00084 	addi	r3,r3,2
   1a1c4:	10800044 	addi	r2,r2,1
   1a1c8:	41000015 	stw	r4,0(r8)
   1a1cc:	01000084 	movi	r4,2
   1a1d0:	41000115 	stw	r4,4(r8)
   1a1d4:	d8c01c15 	stw	r3,112(sp)
   1a1d8:	d8801b15 	stw	r2,108(sp)
   1a1dc:	010001c4 	movi	r4,7
   1a1e0:	2080ef16 	blt	r4,r2,1a5a0 <___svfiprintf_internal_r+0xeb4>
   1a1e4:	42000204 	addi	r8,r8,8
   1a1e8:	d9402217 	ldw	r5,136(sp)
   1a1ec:	01002004 	movi	r4,128
   1a1f0:	29008f26 	beq	r5,r4,1a430 <___svfiprintf_internal_r+0xd44>
   1a1f4:	d9002017 	ldw	r4,128(sp)
   1a1f8:	252fc83a 	sub	r23,r4,r20
   1a1fc:	05c0310e 	bge	zero,r23,1a2c4 <___svfiprintf_internal_r+0xbd8>
   1a200:	07000404 	movi	fp,16
   1a204:	e5c17d0e 	bge	fp,r23,1a7fc <___svfiprintf_internal_r+0x1110>
   1a208:	010000f4 	movhi	r4,3
   1a20c:	212e5e04 	addi	r4,r4,-18056
   1a210:	dc002015 	stw	r16,128(sp)
   1a214:	dc402215 	stw	r17,136(sp)
   1a218:	d9002115 	stw	r4,132(sp)
   1a21c:	b823883a 	mov	r17,r23
   1a220:	054001c4 	movi	r21,7
   1a224:	982f883a 	mov	r23,r19
   1a228:	dc002717 	ldw	r16,156(sp)
   1a22c:	9027883a 	mov	r19,r18
   1a230:	dc802317 	ldw	r18,140(sp)
   1a234:	00000306 	br	1a244 <___svfiprintf_internal_r+0xb58>
   1a238:	8c7ffc04 	addi	r17,r17,-16
   1a23c:	42000204 	addi	r8,r8,8
   1a240:	e440110e 	bge	fp,r17,1a288 <___svfiprintf_internal_r+0xb9c>
   1a244:	18c00404 	addi	r3,r3,16
   1a248:	10800044 	addi	r2,r2,1
   1a24c:	45800015 	stw	r22,0(r8)
   1a250:	47000115 	stw	fp,4(r8)
   1a254:	d8c01c15 	stw	r3,112(sp)
   1a258:	d8801b15 	stw	r2,108(sp)
   1a25c:	a8bff60e 	bge	r21,r2,1a238 <__alt_data_end+0xfc01a238>
   1a260:	d9801a04 	addi	r6,sp,104
   1a264:	900b883a 	mov	r5,r18
   1a268:	8009883a 	mov	r4,r16
   1a26c:	001951c0 	call	1951c <__ssprint_r>
   1a270:	10005e1e 	bne	r2,zero,1a3ec <___svfiprintf_internal_r+0xd00>
   1a274:	8c7ffc04 	addi	r17,r17,-16
   1a278:	d8c01c17 	ldw	r3,112(sp)
   1a27c:	d8801b17 	ldw	r2,108(sp)
   1a280:	d811883a 	mov	r8,sp
   1a284:	e47fef16 	blt	fp,r17,1a244 <__alt_data_end+0xfc01a244>
   1a288:	9825883a 	mov	r18,r19
   1a28c:	dc002017 	ldw	r16,128(sp)
   1a290:	b827883a 	mov	r19,r23
   1a294:	882f883a 	mov	r23,r17
   1a298:	dc402217 	ldw	r17,136(sp)
   1a29c:	d9402117 	ldw	r5,132(sp)
   1a2a0:	1dc7883a 	add	r3,r3,r23
   1a2a4:	10800044 	addi	r2,r2,1
   1a2a8:	41400015 	stw	r5,0(r8)
   1a2ac:	45c00115 	stw	r23,4(r8)
   1a2b0:	d8c01c15 	stw	r3,112(sp)
   1a2b4:	d8801b15 	stw	r2,108(sp)
   1a2b8:	010001c4 	movi	r4,7
   1a2bc:	2080a616 	blt	r4,r2,1a558 <___svfiprintf_internal_r+0xe6c>
   1a2c0:	42000204 	addi	r8,r8,8
   1a2c4:	a0c7883a 	add	r3,r20,r3
   1a2c8:	10800044 	addi	r2,r2,1
   1a2cc:	44400015 	stw	r17,0(r8)
   1a2d0:	45000115 	stw	r20,4(r8)
   1a2d4:	d8c01c15 	stw	r3,112(sp)
   1a2d8:	d8801b15 	stw	r2,108(sp)
   1a2dc:	010001c4 	movi	r4,7
   1a2e0:	20808816 	blt	r4,r2,1a504 <___svfiprintf_internal_r+0xe18>
   1a2e4:	42000204 	addi	r8,r8,8
   1a2e8:	8400010c 	andi	r16,r16,4
   1a2ec:	80002c26 	beq	r16,zero,1a3a0 <___svfiprintf_internal_r+0xcb4>
   1a2f0:	d8802517 	ldw	r2,148(sp)
   1a2f4:	14a1c83a 	sub	r16,r2,r18
   1a2f8:	0400290e 	bge	zero,r16,1a3a0 <___svfiprintf_internal_r+0xcb4>
   1a2fc:	04400404 	movi	r17,16
   1a300:	d8801b17 	ldw	r2,108(sp)
   1a304:	8c01a70e 	bge	r17,r16,1a9a4 <___svfiprintf_internal_r+0x12b8>
   1a308:	014000f4 	movhi	r5,3
   1a30c:	296e6204 	addi	r5,r5,-18040
   1a310:	d9402815 	stw	r5,160(sp)
   1a314:	050001c4 	movi	r20,7
   1a318:	dd402717 	ldw	r21,156(sp)
   1a31c:	ddc02317 	ldw	r23,140(sp)
   1a320:	00000306 	br	1a330 <___svfiprintf_internal_r+0xc44>
   1a324:	843ffc04 	addi	r16,r16,-16
   1a328:	42000204 	addi	r8,r8,8
   1a32c:	8c00130e 	bge	r17,r16,1a37c <___svfiprintf_internal_r+0xc90>
   1a330:	010000f4 	movhi	r4,3
   1a334:	18c00404 	addi	r3,r3,16
   1a338:	10800044 	addi	r2,r2,1
   1a33c:	212e6204 	addi	r4,r4,-18040
   1a340:	41000015 	stw	r4,0(r8)
   1a344:	44400115 	stw	r17,4(r8)
   1a348:	d8c01c15 	stw	r3,112(sp)
   1a34c:	d8801b15 	stw	r2,108(sp)
   1a350:	a0bff40e 	bge	r20,r2,1a324 <__alt_data_end+0xfc01a324>
   1a354:	d9801a04 	addi	r6,sp,104
   1a358:	b80b883a 	mov	r5,r23
   1a35c:	a809883a 	mov	r4,r21
   1a360:	001951c0 	call	1951c <__ssprint_r>
   1a364:	1000211e 	bne	r2,zero,1a3ec <___svfiprintf_internal_r+0xd00>
   1a368:	843ffc04 	addi	r16,r16,-16
   1a36c:	d8c01c17 	ldw	r3,112(sp)
   1a370:	d8801b17 	ldw	r2,108(sp)
   1a374:	d811883a 	mov	r8,sp
   1a378:	8c3fed16 	blt	r17,r16,1a330 <__alt_data_end+0xfc01a330>
   1a37c:	d9402817 	ldw	r5,160(sp)
   1a380:	1c07883a 	add	r3,r3,r16
   1a384:	10800044 	addi	r2,r2,1
   1a388:	41400015 	stw	r5,0(r8)
   1a38c:	44000115 	stw	r16,4(r8)
   1a390:	d8c01c15 	stw	r3,112(sp)
   1a394:	d8801b15 	stw	r2,108(sp)
   1a398:	010001c4 	movi	r4,7
   1a39c:	2080b516 	blt	r4,r2,1a674 <___svfiprintf_internal_r+0xf88>
   1a3a0:	d8802517 	ldw	r2,148(sp)
   1a3a4:	1480010e 	bge	r2,r18,1a3ac <___svfiprintf_internal_r+0xcc0>
   1a3a8:	9005883a 	mov	r2,r18
   1a3ac:	d9002617 	ldw	r4,152(sp)
   1a3b0:	2089883a 	add	r4,r4,r2
   1a3b4:	d9002615 	stw	r4,152(sp)
   1a3b8:	18005a1e 	bne	r3,zero,1a524 <___svfiprintf_internal_r+0xe38>
   1a3bc:	98800007 	ldb	r2,0(r19)
   1a3c0:	d8001b15 	stw	zero,108(sp)
   1a3c4:	d811883a 	mov	r8,sp
   1a3c8:	103cec1e 	bne	r2,zero,1977c <__alt_data_end+0xfc01977c>
   1a3cc:	9825883a 	mov	r18,r19
   1a3d0:	003d0206 	br	197dc <__alt_data_end+0xfc0197dc>
   1a3d4:	d8801c17 	ldw	r2,112(sp)
   1a3d8:	10000426 	beq	r2,zero,1a3ec <___svfiprintf_internal_r+0xd00>
   1a3dc:	d9402317 	ldw	r5,140(sp)
   1a3e0:	d9002717 	ldw	r4,156(sp)
   1a3e4:	d9801a04 	addi	r6,sp,104
   1a3e8:	001951c0 	call	1951c <__ssprint_r>
   1a3ec:	d9402317 	ldw	r5,140(sp)
   1a3f0:	d8802617 	ldw	r2,152(sp)
   1a3f4:	28c0030b 	ldhu	r3,12(r5)
   1a3f8:	18c0100c 	andi	r3,r3,64
   1a3fc:	18015c1e 	bne	r3,zero,1a970 <___svfiprintf_internal_r+0x1284>
   1a400:	dfc03717 	ldw	ra,220(sp)
   1a404:	df003617 	ldw	fp,216(sp)
   1a408:	ddc03517 	ldw	r23,212(sp)
   1a40c:	dd803417 	ldw	r22,208(sp)
   1a410:	dd403317 	ldw	r21,204(sp)
   1a414:	dd003217 	ldw	r20,200(sp)
   1a418:	dcc03117 	ldw	r19,196(sp)
   1a41c:	dc803017 	ldw	r18,192(sp)
   1a420:	dc402f17 	ldw	r17,188(sp)
   1a424:	dc002e17 	ldw	r16,184(sp)
   1a428:	dec03804 	addi	sp,sp,224
   1a42c:	f800283a 	ret
   1a430:	d9002517 	ldw	r4,148(sp)
   1a434:	24afc83a 	sub	r23,r4,r18
   1a438:	05ff6e0e 	bge	zero,r23,1a1f4 <__alt_data_end+0xfc01a1f4>
   1a43c:	07000404 	movi	fp,16
   1a440:	e5c15c0e 	bge	fp,r23,1a9b4 <___svfiprintf_internal_r+0x12c8>
   1a444:	010000f4 	movhi	r4,3
   1a448:	212e5e04 	addi	r4,r4,-18056
   1a44c:	dc002215 	stw	r16,136(sp)
   1a450:	dc402815 	stw	r17,160(sp)
   1a454:	d9002115 	stw	r4,132(sp)
   1a458:	b823883a 	mov	r17,r23
   1a45c:	054001c4 	movi	r21,7
   1a460:	982f883a 	mov	r23,r19
   1a464:	dc002717 	ldw	r16,156(sp)
   1a468:	9027883a 	mov	r19,r18
   1a46c:	dc802317 	ldw	r18,140(sp)
   1a470:	00000306 	br	1a480 <___svfiprintf_internal_r+0xd94>
   1a474:	8c7ffc04 	addi	r17,r17,-16
   1a478:	42000204 	addi	r8,r8,8
   1a47c:	e440110e 	bge	fp,r17,1a4c4 <___svfiprintf_internal_r+0xdd8>
   1a480:	18c00404 	addi	r3,r3,16
   1a484:	10800044 	addi	r2,r2,1
   1a488:	45800015 	stw	r22,0(r8)
   1a48c:	47000115 	stw	fp,4(r8)
   1a490:	d8c01c15 	stw	r3,112(sp)
   1a494:	d8801b15 	stw	r2,108(sp)
   1a498:	a8bff60e 	bge	r21,r2,1a474 <__alt_data_end+0xfc01a474>
   1a49c:	d9801a04 	addi	r6,sp,104
   1a4a0:	900b883a 	mov	r5,r18
   1a4a4:	8009883a 	mov	r4,r16
   1a4a8:	001951c0 	call	1951c <__ssprint_r>
   1a4ac:	103fcf1e 	bne	r2,zero,1a3ec <__alt_data_end+0xfc01a3ec>
   1a4b0:	8c7ffc04 	addi	r17,r17,-16
   1a4b4:	d8c01c17 	ldw	r3,112(sp)
   1a4b8:	d8801b17 	ldw	r2,108(sp)
   1a4bc:	d811883a 	mov	r8,sp
   1a4c0:	e47fef16 	blt	fp,r17,1a480 <__alt_data_end+0xfc01a480>
   1a4c4:	9825883a 	mov	r18,r19
   1a4c8:	dc002217 	ldw	r16,136(sp)
   1a4cc:	b827883a 	mov	r19,r23
   1a4d0:	882f883a 	mov	r23,r17
   1a4d4:	dc402817 	ldw	r17,160(sp)
   1a4d8:	d9402117 	ldw	r5,132(sp)
   1a4dc:	1dc7883a 	add	r3,r3,r23
   1a4e0:	10800044 	addi	r2,r2,1
   1a4e4:	41400015 	stw	r5,0(r8)
   1a4e8:	45c00115 	stw	r23,4(r8)
   1a4ec:	d8c01c15 	stw	r3,112(sp)
   1a4f0:	d8801b15 	stw	r2,108(sp)
   1a4f4:	010001c4 	movi	r4,7
   1a4f8:	2080b716 	blt	r4,r2,1a7d8 <___svfiprintf_internal_r+0x10ec>
   1a4fc:	42000204 	addi	r8,r8,8
   1a500:	003f3c06 	br	1a1f4 <__alt_data_end+0xfc01a1f4>
   1a504:	d9402317 	ldw	r5,140(sp)
   1a508:	d9002717 	ldw	r4,156(sp)
   1a50c:	d9801a04 	addi	r6,sp,104
   1a510:	001951c0 	call	1951c <__ssprint_r>
   1a514:	103fb51e 	bne	r2,zero,1a3ec <__alt_data_end+0xfc01a3ec>
   1a518:	d8c01c17 	ldw	r3,112(sp)
   1a51c:	d811883a 	mov	r8,sp
   1a520:	003f7106 	br	1a2e8 <__alt_data_end+0xfc01a2e8>
   1a524:	d9402317 	ldw	r5,140(sp)
   1a528:	d9002717 	ldw	r4,156(sp)
   1a52c:	d9801a04 	addi	r6,sp,104
   1a530:	001951c0 	call	1951c <__ssprint_r>
   1a534:	103fa126 	beq	r2,zero,1a3bc <__alt_data_end+0xfc01a3bc>
   1a538:	003fac06 	br	1a3ec <__alt_data_end+0xfc01a3ec>
   1a53c:	d9402317 	ldw	r5,140(sp)
   1a540:	d9002717 	ldw	r4,156(sp)
   1a544:	d9801a04 	addi	r6,sp,104
   1a548:	001951c0 	call	1951c <__ssprint_r>
   1a54c:	103fa71e 	bne	r2,zero,1a3ec <__alt_data_end+0xfc01a3ec>
   1a550:	d811883a 	mov	r8,sp
   1a554:	003c9e06 	br	197d0 <__alt_data_end+0xfc0197d0>
   1a558:	d9402317 	ldw	r5,140(sp)
   1a55c:	d9002717 	ldw	r4,156(sp)
   1a560:	d9801a04 	addi	r6,sp,104
   1a564:	001951c0 	call	1951c <__ssprint_r>
   1a568:	103fa01e 	bne	r2,zero,1a3ec <__alt_data_end+0xfc01a3ec>
   1a56c:	d8c01c17 	ldw	r3,112(sp)
   1a570:	d8801b17 	ldw	r2,108(sp)
   1a574:	d811883a 	mov	r8,sp
   1a578:	003f5206 	br	1a2c4 <__alt_data_end+0xfc01a2c4>
   1a57c:	d9402317 	ldw	r5,140(sp)
   1a580:	d9002717 	ldw	r4,156(sp)
   1a584:	d9801a04 	addi	r6,sp,104
   1a588:	001951c0 	call	1951c <__ssprint_r>
   1a58c:	103f971e 	bne	r2,zero,1a3ec <__alt_data_end+0xfc01a3ec>
   1a590:	d8c01c17 	ldw	r3,112(sp)
   1a594:	d8801b17 	ldw	r2,108(sp)
   1a598:	d811883a 	mov	r8,sp
   1a59c:	003f0506 	br	1a1b4 <__alt_data_end+0xfc01a1b4>
   1a5a0:	d9402317 	ldw	r5,140(sp)
   1a5a4:	d9002717 	ldw	r4,156(sp)
   1a5a8:	d9801a04 	addi	r6,sp,104
   1a5ac:	001951c0 	call	1951c <__ssprint_r>
   1a5b0:	103f8e1e 	bne	r2,zero,1a3ec <__alt_data_end+0xfc01a3ec>
   1a5b4:	d8c01c17 	ldw	r3,112(sp)
   1a5b8:	d8801b17 	ldw	r2,108(sp)
   1a5bc:	d811883a 	mov	r8,sp
   1a5c0:	003f0906 	br	1a1e8 <__alt_data_end+0xfc01a1e8>
   1a5c4:	d9402017 	ldw	r5,128(sp)
   1a5c8:	d8001d85 	stb	zero,118(sp)
   1a5cc:	28007716 	blt	r5,zero,1a7ac <___svfiprintf_internal_r+0x10c0>
   1a5d0:	00ffdfc4 	movi	r3,-129
   1a5d4:	9504b03a 	or	r2,r18,r20
   1a5d8:	80e0703a 	and	r16,r16,r3
   1a5dc:	103d3926 	beq	r2,zero,19ac4 <__alt_data_end+0xfc019ac4>
   1a5e0:	002b883a 	mov	r21,zero
   1a5e4:	003d3c06 	br	19ad8 <__alt_data_end+0xfc019ad8>
   1a5e8:	d9402317 	ldw	r5,140(sp)
   1a5ec:	d9002717 	ldw	r4,156(sp)
   1a5f0:	d9801a04 	addi	r6,sp,104
   1a5f4:	001951c0 	call	1951c <__ssprint_r>
   1a5f8:	103f7c1e 	bne	r2,zero,1a3ec <__alt_data_end+0xfc01a3ec>
   1a5fc:	d8c01c17 	ldw	r3,112(sp)
   1a600:	d8801b17 	ldw	r2,108(sp)
   1a604:	d811883a 	mov	r8,sp
   1a608:	003edd06 	br	1a180 <__alt_data_end+0xfc01a180>
   1a60c:	8080100c 	andi	r2,r16,64
   1a610:	d8001d85 	stb	zero,118(sp)
   1a614:	10008426 	beq	r2,zero,1a828 <___svfiprintf_internal_r+0x113c>
   1a618:	d9402417 	ldw	r5,144(sp)
   1a61c:	d8c02017 	ldw	r3,128(sp)
   1a620:	0029883a 	mov	r20,zero
   1a624:	28800104 	addi	r2,r5,4
   1a628:	2c80000b 	ldhu	r18,0(r5)
   1a62c:	183eab0e 	bge	r3,zero,1a0dc <__alt_data_end+0xfc01a0dc>
   1a630:	d8802415 	stw	r2,144(sp)
   1a634:	002b883a 	mov	r21,zero
   1a638:	9504b03a 	or	r2,r18,r20
   1a63c:	103e171e 	bne	r2,zero,19e9c <__alt_data_end+0xfc019e9c>
   1a640:	00800044 	movi	r2,1
   1a644:	10803fcc 	andi	r2,r2,255
   1a648:	00c00044 	movi	r3,1
   1a64c:	10c05c26 	beq	r2,r3,1a7c0 <___svfiprintf_internal_r+0x10d4>
   1a650:	00c00084 	movi	r3,2
   1a654:	10fd1e26 	beq	r2,r3,19ad0 <__alt_data_end+0xfc019ad0>
   1a658:	003ec406 	br	1a16c <__alt_data_end+0xfc01a16c>
   1a65c:	d9401e17 	ldw	r5,120(sp)
   1a660:	2c69c83a 	sub	r20,r5,r17
   1a664:	003d4506 	br	19b7c <__alt_data_end+0xfc019b7c>
   1a668:	d8802415 	stw	r2,144(sp)
   1a66c:	98c00007 	ldb	r3,0(r19)
   1a670:	003c6a06 	br	1981c <__alt_data_end+0xfc01981c>
   1a674:	d9402317 	ldw	r5,140(sp)
   1a678:	d9002717 	ldw	r4,156(sp)
   1a67c:	d9801a04 	addi	r6,sp,104
   1a680:	001951c0 	call	1951c <__ssprint_r>
   1a684:	103f591e 	bne	r2,zero,1a3ec <__alt_data_end+0xfc01a3ec>
   1a688:	d8c01c17 	ldw	r3,112(sp)
   1a68c:	003f4406 	br	1a3a0 <__alt_data_end+0xfc01a3a0>
   1a690:	014000f4 	movhi	r5,3
   1a694:	296df604 	addi	r5,r5,-18472
   1a698:	d9402915 	stw	r5,164(sp)
   1a69c:	003d0906 	br	19ac4 <__alt_data_end+0xfc019ac4>
   1a6a0:	d8c02417 	ldw	r3,144(sp)
   1a6a4:	d9002617 	ldw	r4,152(sp)
   1a6a8:	d9402417 	ldw	r5,144(sp)
   1a6ac:	18800017 	ldw	r2,0(r3)
   1a6b0:	2007d7fa 	srai	r3,r4,31
   1a6b4:	29400104 	addi	r5,r5,4
   1a6b8:	d9402415 	stw	r5,144(sp)
   1a6bc:	11000015 	stw	r4,0(r2)
   1a6c0:	10c00115 	stw	r3,4(r2)
   1a6c4:	003c2b06 	br	19774 <__alt_data_end+0xfc019774>
   1a6c8:	d8c01d45 	stb	r3,117(sp)
   1a6cc:	d8c02017 	ldw	r3,128(sp)
   1a6d0:	00800c04 	movi	r2,48
   1a6d4:	d8801d05 	stb	r2,116(sp)
   1a6d8:	d8001d85 	stb	zero,118(sp)
   1a6dc:	80800094 	ori	r2,r16,2
   1a6e0:	1800ac16 	blt	r3,zero,1a994 <___svfiprintf_internal_r+0x12a8>
   1a6e4:	00bfdfc4 	movi	r2,-129
   1a6e8:	80a0703a 	and	r16,r16,r2
   1a6ec:	84000094 	ori	r16,r16,2
   1a6f0:	002b883a 	mov	r21,zero
   1a6f4:	003cf806 	br	19ad8 <__alt_data_end+0xfc019ad8>
   1a6f8:	98c00007 	ldb	r3,0(r19)
   1a6fc:	003c4706 	br	1981c <__alt_data_end+0xfc01981c>
   1a700:	d9402417 	ldw	r5,144(sp)
   1a704:	2c800017 	ldw	r18,0(r5)
   1a708:	29400104 	addi	r5,r5,4
   1a70c:	d9402415 	stw	r5,144(sp)
   1a710:	9029d7fa 	srai	r20,r18,31
   1a714:	a005883a 	mov	r2,r20
   1a718:	003dd806 	br	19e7c <__alt_data_end+0xfc019e7c>
   1a71c:	d9402417 	ldw	r5,144(sp)
   1a720:	0029883a 	mov	r20,zero
   1a724:	2c800017 	ldw	r18,0(r5)
   1a728:	29400104 	addi	r5,r5,4
   1a72c:	d9402415 	stw	r5,144(sp)
   1a730:	003cdb06 	br	19aa0 <__alt_data_end+0xfc019aa0>
   1a734:	8080100c 	andi	r2,r16,64
   1a738:	d8001d85 	stb	zero,118(sp)
   1a73c:	10003326 	beq	r2,zero,1a80c <___svfiprintf_internal_r+0x1120>
   1a740:	d9002417 	ldw	r4,144(sp)
   1a744:	d9402017 	ldw	r5,128(sp)
   1a748:	0029883a 	mov	r20,zero
   1a74c:	20800104 	addi	r2,r4,4
   1a750:	2480000b 	ldhu	r18,0(r4)
   1a754:	283e7e0e 	bge	r5,zero,1a150 <__alt_data_end+0xfc01a150>
   1a758:	9506b03a 	or	r3,r18,r20
   1a75c:	d8802415 	stw	r2,144(sp)
   1a760:	183d271e 	bne	r3,zero,19c00 <__alt_data_end+0xfc019c00>
   1a764:	002b883a 	mov	r21,zero
   1a768:	0005883a 	mov	r2,zero
   1a76c:	003fb506 	br	1a644 <__alt_data_end+0xfc01a644>
   1a770:	98c00043 	ldbu	r3,1(r19)
   1a774:	8c400814 	ori	r17,r17,32
   1a778:	9cc00044 	addi	r19,r19,1
   1a77c:	18c03fcc 	andi	r3,r3,255
   1a780:	18c0201c 	xori	r3,r3,128
   1a784:	18ffe004 	addi	r3,r3,-128
   1a788:	003c2406 	br	1981c <__alt_data_end+0xfc01981c>
   1a78c:	d8c02415 	stw	r3,144(sp)
   1a790:	002b883a 	mov	r21,zero
   1a794:	003fa806 	br	1a638 <__alt_data_end+0xfc01a638>
   1a798:	010000f4 	movhi	r4,3
   1a79c:	212df604 	addi	r4,r4,-18472
   1a7a0:	d9002915 	stw	r4,164(sp)
   1a7a4:	d8c02415 	stw	r3,144(sp)
   1a7a8:	1021883a 	mov	r16,r2
   1a7ac:	9504b03a 	or	r2,r18,r20
   1a7b0:	103f8b1e 	bne	r2,zero,1a5e0 <__alt_data_end+0xfc01a5e0>
   1a7b4:	002b883a 	mov	r21,zero
   1a7b8:	00800084 	movi	r2,2
   1a7bc:	003fa106 	br	1a644 <__alt_data_end+0xfc01a644>
   1a7c0:	0025883a 	mov	r18,zero
   1a7c4:	94800c04 	addi	r18,r18,48
   1a7c8:	dc8019c5 	stb	r18,103(sp)
   1a7cc:	dd002c17 	ldw	r20,176(sp)
   1a7d0:	dc4019c4 	addi	r17,sp,103
   1a7d4:	003ce906 	br	19b7c <__alt_data_end+0xfc019b7c>
   1a7d8:	d9402317 	ldw	r5,140(sp)
   1a7dc:	d9002717 	ldw	r4,156(sp)
   1a7e0:	d9801a04 	addi	r6,sp,104
   1a7e4:	001951c0 	call	1951c <__ssprint_r>
   1a7e8:	103f001e 	bne	r2,zero,1a3ec <__alt_data_end+0xfc01a3ec>
   1a7ec:	d8c01c17 	ldw	r3,112(sp)
   1a7f0:	d8801b17 	ldw	r2,108(sp)
   1a7f4:	d811883a 	mov	r8,sp
   1a7f8:	003e7e06 	br	1a1f4 <__alt_data_end+0xfc01a1f4>
   1a7fc:	014000f4 	movhi	r5,3
   1a800:	296e5e04 	addi	r5,r5,-18056
   1a804:	d9402115 	stw	r5,132(sp)
   1a808:	003ea406 	br	1a29c <__alt_data_end+0xfc01a29c>
   1a80c:	d8c02417 	ldw	r3,144(sp)
   1a810:	d9002017 	ldw	r4,128(sp)
   1a814:	0029883a 	mov	r20,zero
   1a818:	18800104 	addi	r2,r3,4
   1a81c:	1c800017 	ldw	r18,0(r3)
   1a820:	203e4b0e 	bge	r4,zero,1a150 <__alt_data_end+0xfc01a150>
   1a824:	003fcc06 	br	1a758 <__alt_data_end+0xfc01a758>
   1a828:	d9002417 	ldw	r4,144(sp)
   1a82c:	d9402017 	ldw	r5,128(sp)
   1a830:	0029883a 	mov	r20,zero
   1a834:	20800104 	addi	r2,r4,4
   1a838:	24800017 	ldw	r18,0(r4)
   1a83c:	283e270e 	bge	r5,zero,1a0dc <__alt_data_end+0xfc01a0dc>
   1a840:	003f7b06 	br	1a630 <__alt_data_end+0xfc01a630>
   1a844:	8400100c 	andi	r16,r16,64
   1a848:	80003326 	beq	r16,zero,1a918 <___svfiprintf_internal_r+0x122c>
   1a84c:	d9402417 	ldw	r5,144(sp)
   1a850:	d8c02617 	ldw	r3,152(sp)
   1a854:	28800017 	ldw	r2,0(r5)
   1a858:	29400104 	addi	r5,r5,4
   1a85c:	d9402415 	stw	r5,144(sp)
   1a860:	10c0000d 	sth	r3,0(r2)
   1a864:	003bc306 	br	19774 <__alt_data_end+0xfc019774>
   1a868:	d9002417 	ldw	r4,144(sp)
   1a86c:	0029883a 	mov	r20,zero
   1a870:	24800017 	ldw	r18,0(r4)
   1a874:	21000104 	addi	r4,r4,4
   1a878:	d9002415 	stw	r4,144(sp)
   1a87c:	003c8806 	br	19aa0 <__alt_data_end+0xfc019aa0>
   1a880:	d8c02417 	ldw	r3,144(sp)
   1a884:	1c800017 	ldw	r18,0(r3)
   1a888:	18c00104 	addi	r3,r3,4
   1a88c:	d8c02415 	stw	r3,144(sp)
   1a890:	9029d7fa 	srai	r20,r18,31
   1a894:	a005883a 	mov	r2,r20
   1a898:	003d7806 	br	19e7c <__alt_data_end+0xfc019e7c>
   1a89c:	8809883a 	mov	r4,r17
   1a8a0:	da002d15 	stw	r8,180(sp)
   1a8a4:	00105200 	call	10520 <strlen>
   1a8a8:	1029883a 	mov	r20,r2
   1a8ac:	dd401d83 	ldbu	r21,118(sp)
   1a8b0:	ddc02415 	stw	r23,144(sp)
   1a8b4:	d8002015 	stw	zero,128(sp)
   1a8b8:	da002d17 	ldw	r8,180(sp)
   1a8bc:	003caf06 	br	19b7c <__alt_data_end+0xfc019b7c>
   1a8c0:	013fffc4 	movi	r4,-1
   1a8c4:	003df206 	br	1a090 <__alt_data_end+0xfc01a090>
   1a8c8:	dd002017 	ldw	r20,128(sp)
   1a8cc:	00800184 	movi	r2,6
   1a8d0:	1500012e 	bgeu	r2,r20,1a8d8 <___svfiprintf_internal_r+0x11ec>
   1a8d4:	1029883a 	mov	r20,r2
   1a8d8:	a025883a 	mov	r18,r20
   1a8dc:	a0004116 	blt	r20,zero,1a9e4 <___svfiprintf_internal_r+0x12f8>
   1a8e0:	044000f4 	movhi	r17,3
   1a8e4:	ddc02415 	stw	r23,144(sp)
   1a8e8:	8c6dfb04 	addi	r17,r17,-18452
   1a8ec:	003ce806 	br	19c90 <__alt_data_end+0xfc019c90>
   1a8f0:	04001004 	movi	r16,64
   1a8f4:	800b883a 	mov	r5,r16
   1a8f8:	000f44c0 	call	f44c <_malloc_r>
   1a8fc:	d8c02317 	ldw	r3,140(sp)
   1a900:	18800015 	stw	r2,0(r3)
   1a904:	18800415 	stw	r2,16(r3)
   1a908:	10004d26 	beq	r2,zero,1aa40 <___svfiprintf_internal_r+0x1354>
   1a90c:	d9402317 	ldw	r5,140(sp)
   1a910:	2c000515 	stw	r16,20(r5)
   1a914:	003b8906 	br	1973c <__alt_data_end+0xfc01973c>
   1a918:	d9002417 	ldw	r4,144(sp)
   1a91c:	d9402617 	ldw	r5,152(sp)
   1a920:	20800017 	ldw	r2,0(r4)
   1a924:	21000104 	addi	r4,r4,4
   1a928:	d9002415 	stw	r4,144(sp)
   1a92c:	11400015 	stw	r5,0(r2)
   1a930:	003b9006 	br	19774 <__alt_data_end+0xfc019774>
   1a934:	8080004c 	andi	r2,r16,1
   1a938:	002b883a 	mov	r21,zero
   1a93c:	10000526 	beq	r2,zero,1a954 <___svfiprintf_internal_r+0x1268>
   1a940:	00800c04 	movi	r2,48
   1a944:	d88019c5 	stb	r2,103(sp)
   1a948:	dd002c17 	ldw	r20,176(sp)
   1a94c:	dc4019c4 	addi	r17,sp,103
   1a950:	003c8a06 	br	19b7c <__alt_data_end+0xfc019b7c>
   1a954:	0029883a 	mov	r20,zero
   1a958:	dc401a04 	addi	r17,sp,104
   1a95c:	003c8706 	br	19b7c <__alt_data_end+0xfc019b7c>
   1a960:	014000f4 	movhi	r5,3
   1a964:	296e6204 	addi	r5,r5,-18040
   1a968:	d9402815 	stw	r5,160(sp)
   1a96c:	003cff06 	br	19d6c <__alt_data_end+0xfc019d6c>
   1a970:	00bfffc4 	movi	r2,-1
   1a974:	003ea206 	br	1a400 <__alt_data_end+0xfc01a400>
   1a978:	00800044 	movi	r2,1
   1a97c:	10803fcc 	andi	r2,r2,255
   1a980:	00c00044 	movi	r3,1
   1a984:	10fd4526 	beq	r2,r3,19e9c <__alt_data_end+0xfc019e9c>
   1a988:	00c00084 	movi	r3,2
   1a98c:	10fc5226 	beq	r2,r3,19ad8 <__alt_data_end+0xfc019ad8>
   1a990:	003c9c06 	br	19c04 <__alt_data_end+0xfc019c04>
   1a994:	1021883a 	mov	r16,r2
   1a998:	002b883a 	mov	r21,zero
   1a99c:	00800084 	movi	r2,2
   1a9a0:	003ff606 	br	1a97c <__alt_data_end+0xfc01a97c>
   1a9a4:	010000f4 	movhi	r4,3
   1a9a8:	212e6204 	addi	r4,r4,-18040
   1a9ac:	d9002815 	stw	r4,160(sp)
   1a9b0:	003e7206 	br	1a37c <__alt_data_end+0xfc01a37c>
   1a9b4:	014000f4 	movhi	r5,3
   1a9b8:	296e5e04 	addi	r5,r5,-18056
   1a9bc:	d9402115 	stw	r5,132(sp)
   1a9c0:	003ec506 	br	1a4d8 <__alt_data_end+0xfc01a4d8>
   1a9c4:	e027883a 	mov	r19,fp
   1a9c8:	d8002015 	stw	zero,128(sp)
   1a9cc:	003b9406 	br	19820 <__alt_data_end+0xfc019820>
   1a9d0:	dd002017 	ldw	r20,128(sp)
   1a9d4:	dd401d83 	ldbu	r21,118(sp)
   1a9d8:	ddc02415 	stw	r23,144(sp)
   1a9dc:	d8002015 	stw	zero,128(sp)
   1a9e0:	003c6606 	br	19b7c <__alt_data_end+0xfc019b7c>
   1a9e4:	0025883a 	mov	r18,zero
   1a9e8:	003fbd06 	br	1a8e0 <__alt_data_end+0xfc01a8e0>
   1a9ec:	d9402417 	ldw	r5,144(sp)
   1a9f0:	d8c02417 	ldw	r3,144(sp)
   1a9f4:	29400017 	ldw	r5,0(r5)
   1a9f8:	19000104 	addi	r4,r3,4
   1a9fc:	d9002415 	stw	r4,144(sp)
   1aa00:	d9402015 	stw	r5,128(sp)
   1aa04:	98c00043 	ldbu	r3,1(r19)
   1aa08:	e027883a 	mov	r19,fp
   1aa0c:	283f5b0e 	bge	r5,zero,1a77c <__alt_data_end+0xfc01a77c>
   1aa10:	18c03fcc 	andi	r3,r3,255
   1aa14:	013fffc4 	movi	r4,-1
   1aa18:	18c0201c 	xori	r3,r3,128
   1aa1c:	d9002015 	stw	r4,128(sp)
   1aa20:	18ffe004 	addi	r3,r3,-128
   1aa24:	003b7d06 	br	1981c <__alt_data_end+0xfc01981c>
   1aa28:	dd401d85 	stb	r21,118(sp)
   1aa2c:	003cf306 	br	19dfc <__alt_data_end+0xfc019dfc>
   1aa30:	dd401d85 	stb	r21,118(sp)
   1aa34:	003d4e06 	br	19f70 <__alt_data_end+0xfc019f70>
   1aa38:	dd401d85 	stb	r21,118(sp)
   1aa3c:	003c0e06 	br	19a78 <__alt_data_end+0xfc019a78>
   1aa40:	d9002717 	ldw	r4,156(sp)
   1aa44:	00800304 	movi	r2,12
   1aa48:	20800015 	stw	r2,0(r4)
   1aa4c:	00bfffc4 	movi	r2,-1
   1aa50:	003e6b06 	br	1a400 <__alt_data_end+0xfc01a400>
   1aa54:	dd401d85 	stb	r21,118(sp)
   1aa58:	003d0006 	br	19e5c <__alt_data_end+0xfc019e5c>
   1aa5c:	dd401d85 	stb	r21,118(sp)
   1aa60:	003d7106 	br	1a028 <__alt_data_end+0xfc01a028>
   1aa64:	dd401d85 	stb	r21,118(sp)
   1aa68:	003c5706 	br	19bc8 <__alt_data_end+0xfc019bc8>
   1aa6c:	dd401d85 	stb	r21,118(sp)
   1aa70:	003c2e06 	br	19b2c <__alt_data_end+0xfc019b2c>
   1aa74:	dd401d85 	stb	r21,118(sp)
   1aa78:	003d8c06 	br	1a0ac <__alt_data_end+0xfc01a0ac>
   1aa7c:	dd401d85 	stb	r21,118(sp)
   1aa80:	003da706 	br	1a120 <__alt_data_end+0xfc01a120>
   1aa84:	dd401d85 	stb	r21,118(sp)
   1aa88:	003cc806 	br	19dac <__alt_data_end+0xfc019dac>

0001aa8c <__sprint_r.part.0>:
   1aa8c:	28801917 	ldw	r2,100(r5)
   1aa90:	defff604 	addi	sp,sp,-40
   1aa94:	dd400515 	stw	r21,20(sp)
   1aa98:	dfc00915 	stw	ra,36(sp)
   1aa9c:	df000815 	stw	fp,32(sp)
   1aaa0:	ddc00715 	stw	r23,28(sp)
   1aaa4:	dd800615 	stw	r22,24(sp)
   1aaa8:	dd000415 	stw	r20,16(sp)
   1aaac:	dcc00315 	stw	r19,12(sp)
   1aab0:	dc800215 	stw	r18,8(sp)
   1aab4:	dc400115 	stw	r17,4(sp)
   1aab8:	dc000015 	stw	r16,0(sp)
   1aabc:	1088000c 	andi	r2,r2,8192
   1aac0:	302b883a 	mov	r21,r6
   1aac4:	10002e26 	beq	r2,zero,1ab80 <__sprint_r.part.0+0xf4>
   1aac8:	30800217 	ldw	r2,8(r6)
   1aacc:	35800017 	ldw	r22,0(r6)
   1aad0:	10002926 	beq	r2,zero,1ab78 <__sprint_r.part.0+0xec>
   1aad4:	2827883a 	mov	r19,r5
   1aad8:	2029883a 	mov	r20,r4
   1aadc:	b5c00104 	addi	r23,r22,4
   1aae0:	04bfffc4 	movi	r18,-1
   1aae4:	bc400017 	ldw	r17,0(r23)
   1aae8:	b4000017 	ldw	r16,0(r22)
   1aaec:	0039883a 	mov	fp,zero
   1aaf0:	8822d0ba 	srli	r17,r17,2
   1aaf4:	8800031e 	bne	r17,zero,1ab04 <__sprint_r.part.0+0x78>
   1aaf8:	00001806 	br	1ab5c <__sprint_r.part.0+0xd0>
   1aafc:	84000104 	addi	r16,r16,4
   1ab00:	8f001526 	beq	r17,fp,1ab58 <__sprint_r.part.0+0xcc>
   1ab04:	81400017 	ldw	r5,0(r16)
   1ab08:	980d883a 	mov	r6,r19
   1ab0c:	a009883a 	mov	r4,r20
   1ab10:	001c6d40 	call	1c6d4 <_fputwc_r>
   1ab14:	e7000044 	addi	fp,fp,1
   1ab18:	14bff81e 	bne	r2,r18,1aafc <__alt_data_end+0xfc01aafc>
   1ab1c:	9005883a 	mov	r2,r18
   1ab20:	a8000215 	stw	zero,8(r21)
   1ab24:	a8000115 	stw	zero,4(r21)
   1ab28:	dfc00917 	ldw	ra,36(sp)
   1ab2c:	df000817 	ldw	fp,32(sp)
   1ab30:	ddc00717 	ldw	r23,28(sp)
   1ab34:	dd800617 	ldw	r22,24(sp)
   1ab38:	dd400517 	ldw	r21,20(sp)
   1ab3c:	dd000417 	ldw	r20,16(sp)
   1ab40:	dcc00317 	ldw	r19,12(sp)
   1ab44:	dc800217 	ldw	r18,8(sp)
   1ab48:	dc400117 	ldw	r17,4(sp)
   1ab4c:	dc000017 	ldw	r16,0(sp)
   1ab50:	dec00a04 	addi	sp,sp,40
   1ab54:	f800283a 	ret
   1ab58:	a8800217 	ldw	r2,8(r21)
   1ab5c:	8c63883a 	add	r17,r17,r17
   1ab60:	8c63883a 	add	r17,r17,r17
   1ab64:	1445c83a 	sub	r2,r2,r17
   1ab68:	a8800215 	stw	r2,8(r21)
   1ab6c:	b5800204 	addi	r22,r22,8
   1ab70:	bdc00204 	addi	r23,r23,8
   1ab74:	103fdb1e 	bne	r2,zero,1aae4 <__alt_data_end+0xfc01aae4>
   1ab78:	0005883a 	mov	r2,zero
   1ab7c:	003fe806 	br	1ab20 <__alt_data_end+0xfc01ab20>
   1ab80:	00170c00 	call	170c0 <__sfvwrite_r>
   1ab84:	003fe606 	br	1ab20 <__alt_data_end+0xfc01ab20>

0001ab88 <__sprint_r>:
   1ab88:	30c00217 	ldw	r3,8(r6)
   1ab8c:	18000126 	beq	r3,zero,1ab94 <__sprint_r+0xc>
   1ab90:	001aa8c1 	jmpi	1aa8c <__sprint_r.part.0>
   1ab94:	30000115 	stw	zero,4(r6)
   1ab98:	0005883a 	mov	r2,zero
   1ab9c:	f800283a 	ret

0001aba0 <___vfiprintf_internal_r>:
   1aba0:	deffca04 	addi	sp,sp,-216
   1aba4:	dd403115 	stw	r21,196(sp)
   1aba8:	dfc03515 	stw	ra,212(sp)
   1abac:	df003415 	stw	fp,208(sp)
   1abb0:	ddc03315 	stw	r23,204(sp)
   1abb4:	dd803215 	stw	r22,200(sp)
   1abb8:	dd003015 	stw	r20,192(sp)
   1abbc:	dcc02f15 	stw	r19,188(sp)
   1abc0:	dc802e15 	stw	r18,184(sp)
   1abc4:	dc402d15 	stw	r17,180(sp)
   1abc8:	dc002c15 	stw	r16,176(sp)
   1abcc:	d9002115 	stw	r4,132(sp)
   1abd0:	d9402015 	stw	r5,128(sp)
   1abd4:	d9c02215 	stw	r7,136(sp)
   1abd8:	302b883a 	mov	r21,r6
   1abdc:	20000226 	beq	r4,zero,1abe8 <___vfiprintf_internal_r+0x48>
   1abe0:	20800e17 	ldw	r2,56(r4)
   1abe4:	1000cf26 	beq	r2,zero,1af24 <___vfiprintf_internal_r+0x384>
   1abe8:	d8c02017 	ldw	r3,128(sp)
   1abec:	1880030b 	ldhu	r2,12(r3)
   1abf0:	10c8000c 	andi	r3,r2,8192
   1abf4:	1800071e 	bne	r3,zero,1ac14 <___vfiprintf_internal_r+0x74>
   1abf8:	d9402017 	ldw	r5,128(sp)
   1abfc:	00f7ffc4 	movi	r3,-8193
   1ac00:	10880014 	ori	r2,r2,8192
   1ac04:	29001917 	ldw	r4,100(r5)
   1ac08:	2880030d 	sth	r2,12(r5)
   1ac0c:	20c6703a 	and	r3,r4,r3
   1ac10:	28c01915 	stw	r3,100(r5)
   1ac14:	10c0020c 	andi	r3,r2,8
   1ac18:	1800a526 	beq	r3,zero,1aeb0 <___vfiprintf_internal_r+0x310>
   1ac1c:	d9002017 	ldw	r4,128(sp)
   1ac20:	20c00417 	ldw	r3,16(r4)
   1ac24:	1800a226 	beq	r3,zero,1aeb0 <___vfiprintf_internal_r+0x310>
   1ac28:	1080068c 	andi	r2,r2,26
   1ac2c:	00c00284 	movi	r3,10
   1ac30:	10c0a826 	beq	r2,r3,1aed4 <___vfiprintf_internal_r+0x334>
   1ac34:	d9001a04 	addi	r4,sp,104
   1ac38:	d94019c4 	addi	r5,sp,103
   1ac3c:	048000f4 	movhi	r18,3
   1ac40:	2145c83a 	sub	r2,r4,r5
   1ac44:	94ae6604 	addi	r18,r18,-18024
   1ac48:	d9001e15 	stw	r4,120(sp)
   1ac4c:	d9401f15 	stw	r5,124(sp)
   1ac50:	dec01a15 	stw	sp,104(sp)
   1ac54:	d8001c15 	stw	zero,112(sp)
   1ac58:	d8001b15 	stw	zero,108(sp)
   1ac5c:	d811883a 	mov	r8,sp
   1ac60:	d8002615 	stw	zero,152(sp)
   1ac64:	d8002415 	stw	zero,144(sp)
   1ac68:	d8802815 	stw	r2,160(sp)
   1ac6c:	a82d883a 	mov	r22,r21
   1ac70:	b0800007 	ldb	r2,0(r22)
   1ac74:	10040d26 	beq	r2,zero,1bcac <___vfiprintf_internal_r+0x110c>
   1ac78:	00c00944 	movi	r3,37
   1ac7c:	b029883a 	mov	r20,r22
   1ac80:	10c0021e 	bne	r2,r3,1ac8c <___vfiprintf_internal_r+0xec>
   1ac84:	00001606 	br	1ace0 <___vfiprintf_internal_r+0x140>
   1ac88:	10c00326 	beq	r2,r3,1ac98 <___vfiprintf_internal_r+0xf8>
   1ac8c:	a5000044 	addi	r20,r20,1
   1ac90:	a0800007 	ldb	r2,0(r20)
   1ac94:	103ffc1e 	bne	r2,zero,1ac88 <__alt_data_end+0xfc01ac88>
   1ac98:	a5a1c83a 	sub	r16,r20,r22
   1ac9c:	80001026 	beq	r16,zero,1ace0 <___vfiprintf_internal_r+0x140>
   1aca0:	d8c01c17 	ldw	r3,112(sp)
   1aca4:	d8801b17 	ldw	r2,108(sp)
   1aca8:	45800015 	stw	r22,0(r8)
   1acac:	80c7883a 	add	r3,r16,r3
   1acb0:	10800044 	addi	r2,r2,1
   1acb4:	44000115 	stw	r16,4(r8)
   1acb8:	d8c01c15 	stw	r3,112(sp)
   1acbc:	d8801b15 	stw	r2,108(sp)
   1acc0:	010001c4 	movi	r4,7
   1acc4:	2080750e 	bge	r4,r2,1ae9c <___vfiprintf_internal_r+0x2fc>
   1acc8:	1803951e 	bne	r3,zero,1bb20 <___vfiprintf_internal_r+0xf80>
   1accc:	d8c02417 	ldw	r3,144(sp)
   1acd0:	d8001b15 	stw	zero,108(sp)
   1acd4:	d811883a 	mov	r8,sp
   1acd8:	1c07883a 	add	r3,r3,r16
   1acdc:	d8c02415 	stw	r3,144(sp)
   1ace0:	a0800007 	ldb	r2,0(r20)
   1ace4:	1002e026 	beq	r2,zero,1b868 <___vfiprintf_internal_r+0xcc8>
   1ace8:	a5800044 	addi	r22,r20,1
   1acec:	a0c00047 	ldb	r3,1(r20)
   1acf0:	d8001d85 	stb	zero,118(sp)
   1acf4:	0027883a 	mov	r19,zero
   1acf8:	d8002305 	stb	zero,140(sp)
   1acfc:	043fffc4 	movi	r16,-1
   1ad00:	d8002515 	stw	zero,148(sp)
   1ad04:	0023883a 	mov	r17,zero
   1ad08:	05001604 	movi	r20,88
   1ad0c:	05400244 	movi	r21,9
   1ad10:	402f883a 	mov	r23,r8
   1ad14:	b5800044 	addi	r22,r22,1
   1ad18:	18bff804 	addi	r2,r3,-32
   1ad1c:	a0827736 	bltu	r20,r2,1b6fc <___vfiprintf_internal_r+0xb5c>
   1ad20:	100490ba 	slli	r2,r2,2
   1ad24:	010000b4 	movhi	r4,2
   1ad28:	212b4e04 	addi	r4,r4,-21192
   1ad2c:	1105883a 	add	r2,r2,r4
   1ad30:	10800017 	ldw	r2,0(r2)
   1ad34:	1000683a 	jmp	r2
   1ad38:	0001b3fc 	xorhi	zero,zero,1743
   1ad3c:	0001b6fc 	xorhi	zero,zero,1755
   1ad40:	0001b6fc 	xorhi	zero,zero,1755
   1ad44:	0001b418 	cmpnei	zero,zero,1744
   1ad48:	0001b6fc 	xorhi	zero,zero,1755
   1ad4c:	0001b6fc 	xorhi	zero,zero,1755
   1ad50:	0001b6fc 	xorhi	zero,zero,1755
   1ad54:	0001b6fc 	xorhi	zero,zero,1755
   1ad58:	0001b6fc 	xorhi	zero,zero,1755
   1ad5c:	0001b6fc 	xorhi	zero,zero,1755
   1ad60:	0001b620 	cmpeqi	zero,zero,1752
   1ad64:	0001b644 	movi	zero,1753
   1ad68:	0001b6fc 	xorhi	zero,zero,1755
   1ad6c:	0001af3c 	xorhi	zero,zero,1724
   1ad70:	0001b658 	cmpnei	zero,zero,1753
   1ad74:	0001b6fc 	xorhi	zero,zero,1755
   1ad78:	0001b424 	muli	zero,zero,1744
   1ad7c:	0001b430 	cmpltui	zero,zero,1744
   1ad80:	0001b430 	cmpltui	zero,zero,1744
   1ad84:	0001b430 	cmpltui	zero,zero,1744
   1ad88:	0001b430 	cmpltui	zero,zero,1744
   1ad8c:	0001b430 	cmpltui	zero,zero,1744
   1ad90:	0001b430 	cmpltui	zero,zero,1744
   1ad94:	0001b430 	cmpltui	zero,zero,1744
   1ad98:	0001b430 	cmpltui	zero,zero,1744
   1ad9c:	0001b430 	cmpltui	zero,zero,1744
   1ada0:	0001b6fc 	xorhi	zero,zero,1755
   1ada4:	0001b6fc 	xorhi	zero,zero,1755
   1ada8:	0001b6fc 	xorhi	zero,zero,1755
   1adac:	0001b6fc 	xorhi	zero,zero,1755
   1adb0:	0001b6fc 	xorhi	zero,zero,1755
   1adb4:	0001b6fc 	xorhi	zero,zero,1755
   1adb8:	0001b6fc 	xorhi	zero,zero,1755
   1adbc:	0001b6fc 	xorhi	zero,zero,1755
   1adc0:	0001b6fc 	xorhi	zero,zero,1755
   1adc4:	0001b6fc 	xorhi	zero,zero,1755
   1adc8:	0001b470 	cmpltui	zero,zero,1745
   1adcc:	0001b6fc 	xorhi	zero,zero,1755
   1add0:	0001b6fc 	xorhi	zero,zero,1755
   1add4:	0001b6fc 	xorhi	zero,zero,1755
   1add8:	0001b6fc 	xorhi	zero,zero,1755
   1addc:	0001b6fc 	xorhi	zero,zero,1755
   1ade0:	0001b6fc 	xorhi	zero,zero,1755
   1ade4:	0001b6fc 	xorhi	zero,zero,1755
   1ade8:	0001b6fc 	xorhi	zero,zero,1755
   1adec:	0001b6fc 	xorhi	zero,zero,1755
   1adf0:	0001b6fc 	xorhi	zero,zero,1755
   1adf4:	0001b4ac 	andhi	zero,zero,1746
   1adf8:	0001b6fc 	xorhi	zero,zero,1755
   1adfc:	0001b6fc 	xorhi	zero,zero,1755
   1ae00:	0001b6fc 	xorhi	zero,zero,1755
   1ae04:	0001b6fc 	xorhi	zero,zero,1755
   1ae08:	0001b6fc 	xorhi	zero,zero,1755
   1ae0c:	0001b508 	cmpgei	zero,zero,1748
   1ae10:	0001b6fc 	xorhi	zero,zero,1755
   1ae14:	0001b6fc 	xorhi	zero,zero,1755
   1ae18:	0001b57c 	xorhi	zero,zero,1749
   1ae1c:	0001b6fc 	xorhi	zero,zero,1755
   1ae20:	0001b6fc 	xorhi	zero,zero,1755
   1ae24:	0001b6fc 	xorhi	zero,zero,1755
   1ae28:	0001b6fc 	xorhi	zero,zero,1755
   1ae2c:	0001b6fc 	xorhi	zero,zero,1755
   1ae30:	0001b6fc 	xorhi	zero,zero,1755
   1ae34:	0001b6fc 	xorhi	zero,zero,1755
   1ae38:	0001b6fc 	xorhi	zero,zero,1755
   1ae3c:	0001b6fc 	xorhi	zero,zero,1755
   1ae40:	0001b6fc 	xorhi	zero,zero,1755
   1ae44:	0001b324 	muli	zero,zero,1740
   1ae48:	0001b354 	movui	zero,1741
   1ae4c:	0001b6fc 	xorhi	zero,zero,1755
   1ae50:	0001b6fc 	xorhi	zero,zero,1755
   1ae54:	0001b6fc 	xorhi	zero,zero,1755
   1ae58:	0001b6a4 	muli	zero,zero,1754
   1ae5c:	0001b354 	movui	zero,1741
   1ae60:	0001b6fc 	xorhi	zero,zero,1755
   1ae64:	0001b6fc 	xorhi	zero,zero,1755
   1ae68:	0001b1fc 	xorhi	zero,zero,1735
   1ae6c:	0001b6fc 	xorhi	zero,zero,1755
   1ae70:	0001b210 	cmplti	zero,zero,1736
   1ae74:	0001b248 	cmpgei	zero,zero,1737
   1ae78:	0001af48 	cmpgei	zero,zero,1725
   1ae7c:	0001b1f0 	cmpltui	zero,zero,1735
   1ae80:	0001b6fc 	xorhi	zero,zero,1755
   1ae84:	0001b5bc 	xorhi	zero,zero,1750
   1ae88:	0001b6fc 	xorhi	zero,zero,1755
   1ae8c:	0001b608 	cmpgei	zero,zero,1752
   1ae90:	0001b6fc 	xorhi	zero,zero,1755
   1ae94:	0001b6fc 	xorhi	zero,zero,1755
   1ae98:	0001b2cc 	andi	zero,zero,1739
   1ae9c:	42000204 	addi	r8,r8,8
   1aea0:	d8c02417 	ldw	r3,144(sp)
   1aea4:	1c07883a 	add	r3,r3,r16
   1aea8:	d8c02415 	stw	r3,144(sp)
   1aeac:	003f8c06 	br	1ace0 <__alt_data_end+0xfc01ace0>
   1aeb0:	d9402017 	ldw	r5,128(sp)
   1aeb4:	d9002117 	ldw	r4,132(sp)
   1aeb8:	0014c300 	call	14c30 <__swsetup_r>
   1aebc:	1003c11e 	bne	r2,zero,1bdc4 <___vfiprintf_internal_r+0x1224>
   1aec0:	d9402017 	ldw	r5,128(sp)
   1aec4:	00c00284 	movi	r3,10
   1aec8:	2880030b 	ldhu	r2,12(r5)
   1aecc:	1080068c 	andi	r2,r2,26
   1aed0:	10ff581e 	bne	r2,r3,1ac34 <__alt_data_end+0xfc01ac34>
   1aed4:	d8c02017 	ldw	r3,128(sp)
   1aed8:	1880038f 	ldh	r2,14(r3)
   1aedc:	103f5516 	blt	r2,zero,1ac34 <__alt_data_end+0xfc01ac34>
   1aee0:	d9c02217 	ldw	r7,136(sp)
   1aee4:	d9002117 	ldw	r4,132(sp)
   1aee8:	a80d883a 	mov	r6,r21
   1aeec:	180b883a 	mov	r5,r3
   1aef0:	001c0c80 	call	1c0c8 <__sbprintf>
   1aef4:	dfc03517 	ldw	ra,212(sp)
   1aef8:	df003417 	ldw	fp,208(sp)
   1aefc:	ddc03317 	ldw	r23,204(sp)
   1af00:	dd803217 	ldw	r22,200(sp)
   1af04:	dd403117 	ldw	r21,196(sp)
   1af08:	dd003017 	ldw	r20,192(sp)
   1af0c:	dcc02f17 	ldw	r19,188(sp)
   1af10:	dc802e17 	ldw	r18,184(sp)
   1af14:	dc402d17 	ldw	r17,180(sp)
   1af18:	dc002c17 	ldw	r16,176(sp)
   1af1c:	dec03604 	addi	sp,sp,216
   1af20:	f800283a 	ret
   1af24:	0016c3c0 	call	16c3c <__sinit>
   1af28:	003f2f06 	br	1abe8 <__alt_data_end+0xfc01abe8>
   1af2c:	d8c02517 	ldw	r3,148(sp)
   1af30:	d8802215 	stw	r2,136(sp)
   1af34:	00c7c83a 	sub	r3,zero,r3
   1af38:	d8c02515 	stw	r3,148(sp)
   1af3c:	8c400114 	ori	r17,r17,4
   1af40:	b0c00007 	ldb	r3,0(r22)
   1af44:	003f7306 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1af48:	00800c04 	movi	r2,48
   1af4c:	d9402217 	ldw	r5,136(sp)
   1af50:	d8801d05 	stb	r2,116(sp)
   1af54:	00801e04 	movi	r2,120
   1af58:	d8801d45 	stb	r2,117(sp)
   1af5c:	d8001d85 	stb	zero,118(sp)
   1af60:	b811883a 	mov	r8,r23
   1af64:	28c00104 	addi	r3,r5,4
   1af68:	2cc00017 	ldw	r19,0(r5)
   1af6c:	0029883a 	mov	r20,zero
   1af70:	88800094 	ori	r2,r17,2
   1af74:	80032516 	blt	r16,zero,1bc0c <___vfiprintf_internal_r+0x106c>
   1af78:	00bfdfc4 	movi	r2,-129
   1af7c:	88a2703a 	and	r17,r17,r2
   1af80:	d8c02215 	stw	r3,136(sp)
   1af84:	8c400094 	ori	r17,r17,2
   1af88:	98032a1e 	bne	r19,zero,1bc34 <___vfiprintf_internal_r+0x1094>
   1af8c:	008000f4 	movhi	r2,3
   1af90:	10adf604 	addi	r2,r2,-18472
   1af94:	d8802615 	stw	r2,152(sp)
   1af98:	002b883a 	mov	r21,zero
   1af9c:	8001741e 	bne	r16,zero,1b570 <___vfiprintf_internal_r+0x9d0>
   1afa0:	0021883a 	mov	r16,zero
   1afa4:	0029883a 	mov	r20,zero
   1afa8:	ddc01a04 	addi	r23,sp,104
   1afac:	8027883a 	mov	r19,r16
   1afb0:	8500010e 	bge	r16,r20,1afb8 <___vfiprintf_internal_r+0x418>
   1afb4:	a027883a 	mov	r19,r20
   1afb8:	ad403fcc 	andi	r21,r21,255
   1afbc:	ad40201c 	xori	r21,r21,128
   1afc0:	ad7fe004 	addi	r21,r21,-128
   1afc4:	a8000126 	beq	r21,zero,1afcc <___vfiprintf_internal_r+0x42c>
   1afc8:	9cc00044 	addi	r19,r19,1
   1afcc:	89c0008c 	andi	r7,r17,2
   1afd0:	38000126 	beq	r7,zero,1afd8 <___vfiprintf_internal_r+0x438>
   1afd4:	9cc00084 	addi	r19,r19,2
   1afd8:	88c0210c 	andi	r3,r17,132
   1afdc:	1801dd1e 	bne	r3,zero,1b754 <___vfiprintf_internal_r+0xbb4>
   1afe0:	d9402517 	ldw	r5,148(sp)
   1afe4:	2cebc83a 	sub	r21,r5,r19
   1afe8:	0541da0e 	bge	zero,r21,1b754 <___vfiprintf_internal_r+0xbb4>
   1afec:	07000404 	movi	fp,16
   1aff0:	d8801c17 	ldw	r2,112(sp)
   1aff4:	e543be0e 	bge	fp,r21,1bef0 <___vfiprintf_internal_r+0x1350>
   1aff8:	014000f4 	movhi	r5,3
   1affc:	296e6a04 	addi	r5,r5,-18008
   1b000:	dc002715 	stw	r16,156(sp)
   1b004:	d9801b17 	ldw	r6,108(sp)
   1b008:	a821883a 	mov	r16,r21
   1b00c:	d9402315 	stw	r5,140(sp)
   1b010:	028001c4 	movi	r10,7
   1b014:	d9c02915 	stw	r7,164(sp)
   1b018:	182b883a 	mov	r21,r3
   1b01c:	00000506 	br	1b034 <___vfiprintf_internal_r+0x494>
   1b020:	31000084 	addi	r4,r6,2
   1b024:	42000204 	addi	r8,r8,8
   1b028:	180d883a 	mov	r6,r3
   1b02c:	843ffc04 	addi	r16,r16,-16
   1b030:	e4000f0e 	bge	fp,r16,1b070 <___vfiprintf_internal_r+0x4d0>
   1b034:	010000f4 	movhi	r4,3
   1b038:	10800404 	addi	r2,r2,16
   1b03c:	30c00044 	addi	r3,r6,1
   1b040:	212e6a04 	addi	r4,r4,-18008
   1b044:	41000015 	stw	r4,0(r8)
   1b048:	47000115 	stw	fp,4(r8)
   1b04c:	d8801c15 	stw	r2,112(sp)
   1b050:	d8c01b15 	stw	r3,108(sp)
   1b054:	50fff20e 	bge	r10,r3,1b020 <__alt_data_end+0xfc01b020>
   1b058:	1001b21e 	bne	r2,zero,1b724 <___vfiprintf_internal_r+0xb84>
   1b05c:	843ffc04 	addi	r16,r16,-16
   1b060:	000d883a 	mov	r6,zero
   1b064:	01000044 	movi	r4,1
   1b068:	d811883a 	mov	r8,sp
   1b06c:	e43ff116 	blt	fp,r16,1b034 <__alt_data_end+0xfc01b034>
   1b070:	a807883a 	mov	r3,r21
   1b074:	d9c02917 	ldw	r7,164(sp)
   1b078:	802b883a 	mov	r21,r16
   1b07c:	dc002717 	ldw	r16,156(sp)
   1b080:	d9402317 	ldw	r5,140(sp)
   1b084:	a885883a 	add	r2,r21,r2
   1b088:	45400115 	stw	r21,4(r8)
   1b08c:	41400015 	stw	r5,0(r8)
   1b090:	d8801c15 	stw	r2,112(sp)
   1b094:	d9001b15 	stw	r4,108(sp)
   1b098:	014001c4 	movi	r5,7
   1b09c:	29026216 	blt	r5,r4,1ba28 <___vfiprintf_internal_r+0xe88>
   1b0a0:	d9801d87 	ldb	r6,118(sp)
   1b0a4:	42000204 	addi	r8,r8,8
   1b0a8:	21400044 	addi	r5,r4,1
   1b0ac:	3001ae1e 	bne	r6,zero,1b768 <___vfiprintf_internal_r+0xbc8>
   1b0b0:	3801bb26 	beq	r7,zero,1b7a0 <___vfiprintf_internal_r+0xc00>
   1b0b4:	d9001d04 	addi	r4,sp,116
   1b0b8:	10800084 	addi	r2,r2,2
   1b0bc:	41000015 	stw	r4,0(r8)
   1b0c0:	01000084 	movi	r4,2
   1b0c4:	41000115 	stw	r4,4(r8)
   1b0c8:	d8801c15 	stw	r2,112(sp)
   1b0cc:	d9401b15 	stw	r5,108(sp)
   1b0d0:	010001c4 	movi	r4,7
   1b0d4:	2142680e 	bge	r4,r5,1ba78 <___vfiprintf_internal_r+0xed8>
   1b0d8:	1002b11e 	bne	r2,zero,1bba0 <___vfiprintf_internal_r+0x1000>
   1b0dc:	01802004 	movi	r6,128
   1b0e0:	01400044 	movi	r5,1
   1b0e4:	0009883a 	mov	r4,zero
   1b0e8:	d811883a 	mov	r8,sp
   1b0ec:	1981ae1e 	bne	r3,r6,1b7a8 <___vfiprintf_internal_r+0xc08>
   1b0f0:	d8c02517 	ldw	r3,148(sp)
   1b0f4:	1cf9c83a 	sub	fp,r3,r19
   1b0f8:	0701ab0e 	bge	zero,fp,1b7a8 <___vfiprintf_internal_r+0xc08>
   1b0fc:	05400404 	movi	r21,16
   1b100:	af03a90e 	bge	r21,fp,1bfa8 <___vfiprintf_internal_r+0x1408>
   1b104:	014000f4 	movhi	r5,3
   1b108:	296e6604 	addi	r5,r5,-18024
   1b10c:	d9402315 	stw	r5,140(sp)
   1b110:	01c001c4 	movi	r7,7
   1b114:	00000506 	br	1b12c <___vfiprintf_internal_r+0x58c>
   1b118:	21800084 	addi	r6,r4,2
   1b11c:	42000204 	addi	r8,r8,8
   1b120:	1809883a 	mov	r4,r3
   1b124:	e73ffc04 	addi	fp,fp,-16
   1b128:	af000d0e 	bge	r21,fp,1b160 <___vfiprintf_internal_r+0x5c0>
   1b12c:	10800404 	addi	r2,r2,16
   1b130:	20c00044 	addi	r3,r4,1
   1b134:	44800015 	stw	r18,0(r8)
   1b138:	45400115 	stw	r21,4(r8)
   1b13c:	d8801c15 	stw	r2,112(sp)
   1b140:	d8c01b15 	stw	r3,108(sp)
   1b144:	38fff40e 	bge	r7,r3,1b118 <__alt_data_end+0xfc01b118>
   1b148:	10022b1e 	bne	r2,zero,1b9f8 <___vfiprintf_internal_r+0xe58>
   1b14c:	e73ffc04 	addi	fp,fp,-16
   1b150:	01800044 	movi	r6,1
   1b154:	0009883a 	mov	r4,zero
   1b158:	d811883a 	mov	r8,sp
   1b15c:	af3ff316 	blt	r21,fp,1b12c <__alt_data_end+0xfc01b12c>
   1b160:	d8c02317 	ldw	r3,140(sp)
   1b164:	1705883a 	add	r2,r2,fp
   1b168:	47000115 	stw	fp,4(r8)
   1b16c:	40c00015 	stw	r3,0(r8)
   1b170:	d8801c15 	stw	r2,112(sp)
   1b174:	d9801b15 	stw	r6,108(sp)
   1b178:	00c001c4 	movi	r3,7
   1b17c:	19829416 	blt	r3,r6,1bbd0 <___vfiprintf_internal_r+0x1030>
   1b180:	8521c83a 	sub	r16,r16,r20
   1b184:	42000204 	addi	r8,r8,8
   1b188:	31400044 	addi	r5,r6,1
   1b18c:	3009883a 	mov	r4,r6
   1b190:	04018716 	blt	zero,r16,1b7b0 <___vfiprintf_internal_r+0xc10>
   1b194:	a085883a 	add	r2,r20,r2
   1b198:	45c00015 	stw	r23,0(r8)
   1b19c:	45000115 	stw	r20,4(r8)
   1b1a0:	d8801c15 	stw	r2,112(sp)
   1b1a4:	d9401b15 	stw	r5,108(sp)
   1b1a8:	00c001c4 	movi	r3,7
   1b1ac:	1941c20e 	bge	r3,r5,1b8b8 <___vfiprintf_internal_r+0xd18>
   1b1b0:	1002531e 	bne	r2,zero,1bb00 <___vfiprintf_internal_r+0xf60>
   1b1b4:	d8001b15 	stw	zero,108(sp)
   1b1b8:	8c40010c 	andi	r17,r17,4
   1b1bc:	88023226 	beq	r17,zero,1ba88 <___vfiprintf_internal_r+0xee8>
   1b1c0:	d9002517 	ldw	r4,148(sp)
   1b1c4:	24e3c83a 	sub	r17,r4,r19
   1b1c8:	04432916 	blt	zero,r17,1be70 <___vfiprintf_internal_r+0x12d0>
   1b1cc:	d8802517 	ldw	r2,148(sp)
   1b1d0:	14c0010e 	bge	r2,r19,1b1d8 <___vfiprintf_internal_r+0x638>
   1b1d4:	9805883a 	mov	r2,r19
   1b1d8:	d8c02417 	ldw	r3,144(sp)
   1b1dc:	1887883a 	add	r3,r3,r2
   1b1e0:	d8c02415 	stw	r3,144(sp)
   1b1e4:	d8001b15 	stw	zero,108(sp)
   1b1e8:	d811883a 	mov	r8,sp
   1b1ec:	003ea006 	br	1ac70 <__alt_data_end+0xfc01ac70>
   1b1f0:	8c400814 	ori	r17,r17,32
   1b1f4:	b0c00007 	ldb	r3,0(r22)
   1b1f8:	003ec606 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1b1fc:	b0c00007 	ldb	r3,0(r22)
   1b200:	00801b04 	movi	r2,108
   1b204:	18832026 	beq	r3,r2,1be88 <___vfiprintf_internal_r+0x12e8>
   1b208:	8c400414 	ori	r17,r17,16
   1b20c:	003ec106 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1b210:	9cc03fcc 	andi	r19,r19,255
   1b214:	b811883a 	mov	r8,r23
   1b218:	9803981e 	bne	r19,zero,1c07c <___vfiprintf_internal_r+0x14dc>
   1b21c:	8880080c 	andi	r2,r17,32
   1b220:	1002be26 	beq	r2,zero,1bd1c <___vfiprintf_internal_r+0x117c>
   1b224:	d9002217 	ldw	r4,136(sp)
   1b228:	d9402417 	ldw	r5,144(sp)
   1b22c:	20800017 	ldw	r2,0(r4)
   1b230:	2807d7fa 	srai	r3,r5,31
   1b234:	21000104 	addi	r4,r4,4
   1b238:	d9002215 	stw	r4,136(sp)
   1b23c:	11400015 	stw	r5,0(r2)
   1b240:	10c00115 	stw	r3,4(r2)
   1b244:	003e8a06 	br	1ac70 <__alt_data_end+0xfc01ac70>
   1b248:	9cc03fcc 	andi	r19,r19,255
   1b24c:	b811883a 	mov	r8,r23
   1b250:	9803871e 	bne	r19,zero,1c070 <___vfiprintf_internal_r+0x14d0>
   1b254:	8880080c 	andi	r2,r17,32
   1b258:	10009a26 	beq	r2,zero,1b4c4 <___vfiprintf_internal_r+0x924>
   1b25c:	d9002217 	ldw	r4,136(sp)
   1b260:	d8001d85 	stb	zero,118(sp)
   1b264:	20800204 	addi	r2,r4,8
   1b268:	24c00017 	ldw	r19,0(r4)
   1b26c:	25000117 	ldw	r20,4(r4)
   1b270:	8002a416 	blt	r16,zero,1bd04 <___vfiprintf_internal_r+0x1164>
   1b274:	013fdfc4 	movi	r4,-129
   1b278:	9d06b03a 	or	r3,r19,r20
   1b27c:	d8802215 	stw	r2,136(sp)
   1b280:	8922703a 	and	r17,r17,r4
   1b284:	18009b26 	beq	r3,zero,1b4f4 <___vfiprintf_internal_r+0x954>
   1b288:	002b883a 	mov	r21,zero
   1b28c:	ddc01a04 	addi	r23,sp,104
   1b290:	9806d0fa 	srli	r3,r19,3
   1b294:	a008977a 	slli	r4,r20,29
   1b298:	a028d0fa 	srli	r20,r20,3
   1b29c:	9cc001cc 	andi	r19,r19,7
   1b2a0:	98800c04 	addi	r2,r19,48
   1b2a4:	bdffffc4 	addi	r23,r23,-1
   1b2a8:	20e6b03a 	or	r19,r4,r3
   1b2ac:	b8800005 	stb	r2,0(r23)
   1b2b0:	9d06b03a 	or	r3,r19,r20
   1b2b4:	183ff61e 	bne	r3,zero,1b290 <__alt_data_end+0xfc01b290>
   1b2b8:	88c0004c 	andi	r3,r17,1
   1b2bc:	18021f1e 	bne	r3,zero,1bb3c <___vfiprintf_internal_r+0xf9c>
   1b2c0:	d9401e17 	ldw	r5,120(sp)
   1b2c4:	2de9c83a 	sub	r20,r5,r23
   1b2c8:	003f3806 	br	1afac <__alt_data_end+0xfc01afac>
   1b2cc:	9cc03fcc 	andi	r19,r19,255
   1b2d0:	b811883a 	mov	r8,r23
   1b2d4:	98034f1e 	bne	r19,zero,1c014 <___vfiprintf_internal_r+0x1474>
   1b2d8:	008000f4 	movhi	r2,3
   1b2dc:	10adf604 	addi	r2,r2,-18472
   1b2e0:	d8802615 	stw	r2,152(sp)
   1b2e4:	8880080c 	andi	r2,r17,32
   1b2e8:	1000ac26 	beq	r2,zero,1b59c <___vfiprintf_internal_r+0x9fc>
   1b2ec:	d9002217 	ldw	r4,136(sp)
   1b2f0:	24c00017 	ldw	r19,0(r4)
   1b2f4:	25000117 	ldw	r20,4(r4)
   1b2f8:	21000204 	addi	r4,r4,8
   1b2fc:	d9002215 	stw	r4,136(sp)
   1b300:	8880004c 	andi	r2,r17,1
   1b304:	1001e726 	beq	r2,zero,1baa4 <___vfiprintf_internal_r+0xf04>
   1b308:	9d04b03a 	or	r2,r19,r20
   1b30c:	10025c1e 	bne	r2,zero,1bc80 <___vfiprintf_internal_r+0x10e0>
   1b310:	d8001d85 	stb	zero,118(sp)
   1b314:	80024416 	blt	r16,zero,1bc28 <___vfiprintf_internal_r+0x1088>
   1b318:	00bfdfc4 	movi	r2,-129
   1b31c:	88a2703a 	and	r17,r17,r2
   1b320:	003f1d06 	br	1af98 <__alt_data_end+0xfc01af98>
   1b324:	d8c02217 	ldw	r3,136(sp)
   1b328:	04c00044 	movi	r19,1
   1b32c:	b811883a 	mov	r8,r23
   1b330:	18800017 	ldw	r2,0(r3)
   1b334:	18c00104 	addi	r3,r3,4
   1b338:	d8001d85 	stb	zero,118(sp)
   1b33c:	d8801005 	stb	r2,64(sp)
   1b340:	d8c02215 	stw	r3,136(sp)
   1b344:	9829883a 	mov	r20,r19
   1b348:	ddc01004 	addi	r23,sp,64
   1b34c:	0021883a 	mov	r16,zero
   1b350:	003f1e06 	br	1afcc <__alt_data_end+0xfc01afcc>
   1b354:	9cc03fcc 	andi	r19,r19,255
   1b358:	b811883a 	mov	r8,r23
   1b35c:	9803331e 	bne	r19,zero,1c02c <___vfiprintf_internal_r+0x148c>
   1b360:	8880080c 	andi	r2,r17,32
   1b364:	10004826 	beq	r2,zero,1b488 <___vfiprintf_internal_r+0x8e8>
   1b368:	d9002217 	ldw	r4,136(sp)
   1b36c:	20800117 	ldw	r2,4(r4)
   1b370:	24c00017 	ldw	r19,0(r4)
   1b374:	21000204 	addi	r4,r4,8
   1b378:	d9002215 	stw	r4,136(sp)
   1b37c:	1029883a 	mov	r20,r2
   1b380:	10024c16 	blt	r2,zero,1bcb4 <___vfiprintf_internal_r+0x1114>
   1b384:	dd401d83 	ldbu	r21,118(sp)
   1b388:	80007116 	blt	r16,zero,1b550 <___vfiprintf_internal_r+0x9b0>
   1b38c:	00ffdfc4 	movi	r3,-129
   1b390:	9d04b03a 	or	r2,r19,r20
   1b394:	88e2703a 	and	r17,r17,r3
   1b398:	1000d126 	beq	r2,zero,1b6e0 <___vfiprintf_internal_r+0xb40>
   1b39c:	a0023526 	beq	r20,zero,1bc74 <___vfiprintf_internal_r+0x10d4>
   1b3a0:	ddc01a04 	addi	r23,sp,104
   1b3a4:	4039883a 	mov	fp,r8
   1b3a8:	9809883a 	mov	r4,r19
   1b3ac:	a00b883a 	mov	r5,r20
   1b3b0:	01800284 	movi	r6,10
   1b3b4:	000f883a 	mov	r7,zero
   1b3b8:	001d0cc0 	call	1d0cc <__umoddi3>
   1b3bc:	10800c04 	addi	r2,r2,48
   1b3c0:	bdffffc4 	addi	r23,r23,-1
   1b3c4:	9809883a 	mov	r4,r19
   1b3c8:	a00b883a 	mov	r5,r20
   1b3cc:	b8800005 	stb	r2,0(r23)
   1b3d0:	01800284 	movi	r6,10
   1b3d4:	000f883a 	mov	r7,zero
   1b3d8:	001cad00 	call	1cad0 <__udivdi3>
   1b3dc:	1027883a 	mov	r19,r2
   1b3e0:	10c4b03a 	or	r2,r2,r3
   1b3e4:	1829883a 	mov	r20,r3
   1b3e8:	103fef1e 	bne	r2,zero,1b3a8 <__alt_data_end+0xfc01b3a8>
   1b3ec:	d9001e17 	ldw	r4,120(sp)
   1b3f0:	e011883a 	mov	r8,fp
   1b3f4:	25e9c83a 	sub	r20,r4,r23
   1b3f8:	003eec06 	br	1afac <__alt_data_end+0xfc01afac>
   1b3fc:	d8802307 	ldb	r2,140(sp)
   1b400:	1002361e 	bne	r2,zero,1bcdc <___vfiprintf_internal_r+0x113c>
   1b404:	00c00804 	movi	r3,32
   1b408:	d8c02305 	stb	r3,140(sp)
   1b40c:	04c00044 	movi	r19,1
   1b410:	b0c00007 	ldb	r3,0(r22)
   1b414:	003e3f06 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1b418:	8c400054 	ori	r17,r17,1
   1b41c:	b0c00007 	ldb	r3,0(r22)
   1b420:	003e3c06 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1b424:	8c402014 	ori	r17,r17,128
   1b428:	b0c00007 	ldb	r3,0(r22)
   1b42c:	003e3906 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1b430:	dc002715 	stw	r16,156(sp)
   1b434:	d8002515 	stw	zero,148(sp)
   1b438:	1f3ff404 	addi	fp,r3,-48
   1b43c:	0009883a 	mov	r4,zero
   1b440:	b021883a 	mov	r16,r22
   1b444:	01400284 	movi	r5,10
   1b448:	000d8b80 	call	d8b8 <__mulsi3>
   1b44c:	80c00007 	ldb	r3,0(r16)
   1b450:	e089883a 	add	r4,fp,r2
   1b454:	b5800044 	addi	r22,r22,1
   1b458:	1f3ff404 	addi	fp,r3,-48
   1b45c:	b021883a 	mov	r16,r22
   1b460:	af3ff82e 	bgeu	r21,fp,1b444 <__alt_data_end+0xfc01b444>
   1b464:	d9002515 	stw	r4,148(sp)
   1b468:	dc002717 	ldw	r16,156(sp)
   1b46c:	003e2a06 	br	1ad18 <__alt_data_end+0xfc01ad18>
   1b470:	9cc03fcc 	andi	r19,r19,255
   1b474:	b811883a 	mov	r8,r23
   1b478:	9802e91e 	bne	r19,zero,1c020 <___vfiprintf_internal_r+0x1480>
   1b47c:	8c400414 	ori	r17,r17,16
   1b480:	8880080c 	andi	r2,r17,32
   1b484:	103fb81e 	bne	r2,zero,1b368 <__alt_data_end+0xfc01b368>
   1b488:	8880040c 	andi	r2,r17,16
   1b48c:	10022e26 	beq	r2,zero,1bd48 <___vfiprintf_internal_r+0x11a8>
   1b490:	d9402217 	ldw	r5,136(sp)
   1b494:	2cc00017 	ldw	r19,0(r5)
   1b498:	29400104 	addi	r5,r5,4
   1b49c:	d9402215 	stw	r5,136(sp)
   1b4a0:	9829d7fa 	srai	r20,r19,31
   1b4a4:	a005883a 	mov	r2,r20
   1b4a8:	003fb506 	br	1b380 <__alt_data_end+0xfc01b380>
   1b4ac:	9cc03fcc 	andi	r19,r19,255
   1b4b0:	b811883a 	mov	r8,r23
   1b4b4:	9802fa1e 	bne	r19,zero,1c0a0 <___vfiprintf_internal_r+0x1500>
   1b4b8:	8c400414 	ori	r17,r17,16
   1b4bc:	8880080c 	andi	r2,r17,32
   1b4c0:	103f661e 	bne	r2,zero,1b25c <__alt_data_end+0xfc01b25c>
   1b4c4:	8880040c 	andi	r2,r17,16
   1b4c8:	10020626 	beq	r2,zero,1bce4 <___vfiprintf_internal_r+0x1144>
   1b4cc:	d9402217 	ldw	r5,136(sp)
   1b4d0:	d8001d85 	stb	zero,118(sp)
   1b4d4:	0029883a 	mov	r20,zero
   1b4d8:	28800104 	addi	r2,r5,4
   1b4dc:	2cc00017 	ldw	r19,0(r5)
   1b4e0:	80020816 	blt	r16,zero,1bd04 <___vfiprintf_internal_r+0x1164>
   1b4e4:	00ffdfc4 	movi	r3,-129
   1b4e8:	d8802215 	stw	r2,136(sp)
   1b4ec:	88e2703a 	and	r17,r17,r3
   1b4f0:	983f651e 	bne	r19,zero,1b288 <__alt_data_end+0xfc01b288>
   1b4f4:	002b883a 	mov	r21,zero
   1b4f8:	8002cf26 	beq	r16,zero,1c038 <___vfiprintf_internal_r+0x1498>
   1b4fc:	0027883a 	mov	r19,zero
   1b500:	0029883a 	mov	r20,zero
   1b504:	003f6106 	br	1b28c <__alt_data_end+0xfc01b28c>
   1b508:	9cc03fcc 	andi	r19,r19,255
   1b50c:	b811883a 	mov	r8,r23
   1b510:	9802e01e 	bne	r19,zero,1c094 <___vfiprintf_internal_r+0x14f4>
   1b514:	8c400414 	ori	r17,r17,16
   1b518:	8880080c 	andi	r2,r17,32
   1b51c:	1000641e 	bne	r2,zero,1b6b0 <___vfiprintf_internal_r+0xb10>
   1b520:	8880040c 	andi	r2,r17,16
   1b524:	1001c81e 	bne	r2,zero,1bc48 <___vfiprintf_internal_r+0x10a8>
   1b528:	8880100c 	andi	r2,r17,64
   1b52c:	d8001d85 	stb	zero,118(sp)
   1b530:	1002281e 	bne	r2,zero,1bdd4 <___vfiprintf_internal_r+0x1234>
   1b534:	d9002217 	ldw	r4,136(sp)
   1b538:	0029883a 	mov	r20,zero
   1b53c:	20800104 	addi	r2,r4,4
   1b540:	24c00017 	ldw	r19,0(r4)
   1b544:	8001c60e 	bge	r16,zero,1bc60 <___vfiprintf_internal_r+0x10c0>
   1b548:	d8802215 	stw	r2,136(sp)
   1b54c:	002b883a 	mov	r21,zero
   1b550:	9d04b03a 	or	r2,r19,r20
   1b554:	103f911e 	bne	r2,zero,1b39c <__alt_data_end+0xfc01b39c>
   1b558:	00800044 	movi	r2,1
   1b55c:	10803fcc 	andi	r2,r2,255
   1b560:	00c00044 	movi	r3,1
   1b564:	10c05f26 	beq	r2,r3,1b6e4 <___vfiprintf_internal_r+0xb44>
   1b568:	00c00084 	movi	r3,2
   1b56c:	10ffe31e 	bne	r2,r3,1b4fc <__alt_data_end+0xfc01b4fc>
   1b570:	0027883a 	mov	r19,zero
   1b574:	0029883a 	mov	r20,zero
   1b578:	00015106 	br	1bac0 <___vfiprintf_internal_r+0xf20>
   1b57c:	9cc03fcc 	andi	r19,r19,255
   1b580:	b811883a 	mov	r8,r23
   1b584:	9802c01e 	bne	r19,zero,1c088 <___vfiprintf_internal_r+0x14e8>
   1b588:	014000f4 	movhi	r5,3
   1b58c:	296df104 	addi	r5,r5,-18492
   1b590:	d9402615 	stw	r5,152(sp)
   1b594:	8880080c 	andi	r2,r17,32
   1b598:	103f541e 	bne	r2,zero,1b2ec <__alt_data_end+0xfc01b2ec>
   1b59c:	8880040c 	andi	r2,r17,16
   1b5a0:	1001f226 	beq	r2,zero,1bd6c <___vfiprintf_internal_r+0x11cc>
   1b5a4:	d9402217 	ldw	r5,136(sp)
   1b5a8:	0029883a 	mov	r20,zero
   1b5ac:	2cc00017 	ldw	r19,0(r5)
   1b5b0:	29400104 	addi	r5,r5,4
   1b5b4:	d9402215 	stw	r5,136(sp)
   1b5b8:	003f5106 	br	1b300 <__alt_data_end+0xfc01b300>
   1b5bc:	d8c02217 	ldw	r3,136(sp)
   1b5c0:	b811883a 	mov	r8,r23
   1b5c4:	d8001d85 	stb	zero,118(sp)
   1b5c8:	1dc00017 	ldw	r23,0(r3)
   1b5cc:	1f000104 	addi	fp,r3,4
   1b5d0:	b8025926 	beq	r23,zero,1bf38 <___vfiprintf_internal_r+0x1398>
   1b5d4:	80023316 	blt	r16,zero,1bea4 <___vfiprintf_internal_r+0x1304>
   1b5d8:	800d883a 	mov	r6,r16
   1b5dc:	000b883a 	mov	r5,zero
   1b5e0:	b809883a 	mov	r4,r23
   1b5e4:	da002a15 	stw	r8,168(sp)
   1b5e8:	00179a80 	call	179a8 <memchr>
   1b5ec:	da002a17 	ldw	r8,168(sp)
   1b5f0:	10026826 	beq	r2,zero,1bf94 <___vfiprintf_internal_r+0x13f4>
   1b5f4:	15e9c83a 	sub	r20,r2,r23
   1b5f8:	dd401d83 	ldbu	r21,118(sp)
   1b5fc:	df002215 	stw	fp,136(sp)
   1b600:	0021883a 	mov	r16,zero
   1b604:	003e6906 	br	1afac <__alt_data_end+0xfc01afac>
   1b608:	9cc03fcc 	andi	r19,r19,255
   1b60c:	b811883a 	mov	r8,r23
   1b610:	983fc126 	beq	r19,zero,1b518 <__alt_data_end+0xfc01b518>
   1b614:	d8c02303 	ldbu	r3,140(sp)
   1b618:	d8c01d85 	stb	r3,118(sp)
   1b61c:	003fbe06 	br	1b518 <__alt_data_end+0xfc01b518>
   1b620:	d9002217 	ldw	r4,136(sp)
   1b624:	d9402217 	ldw	r5,136(sp)
   1b628:	21000017 	ldw	r4,0(r4)
   1b62c:	28800104 	addi	r2,r5,4
   1b630:	d9002515 	stw	r4,148(sp)
   1b634:	203e3d16 	blt	r4,zero,1af2c <__alt_data_end+0xfc01af2c>
   1b638:	d8802215 	stw	r2,136(sp)
   1b63c:	b0c00007 	ldb	r3,0(r22)
   1b640:	003db406 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1b644:	00c00ac4 	movi	r3,43
   1b648:	d8c02305 	stb	r3,140(sp)
   1b64c:	04c00044 	movi	r19,1
   1b650:	b0c00007 	ldb	r3,0(r22)
   1b654:	003daf06 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1b658:	b0c00007 	ldb	r3,0(r22)
   1b65c:	01000a84 	movi	r4,42
   1b660:	b4000044 	addi	r16,r22,1
   1b664:	19025e26 	beq	r3,r4,1bfe0 <___vfiprintf_internal_r+0x1440>
   1b668:	1f3ff404 	addi	fp,r3,-48
   1b66c:	0009883a 	mov	r4,zero
   1b670:	af025236 	bltu	r21,fp,1bfbc <___vfiprintf_internal_r+0x141c>
   1b674:	01400284 	movi	r5,10
   1b678:	000d8b80 	call	d8b8 <__mulsi3>
   1b67c:	80c00007 	ldb	r3,0(r16)
   1b680:	1709883a 	add	r4,r2,fp
   1b684:	85800044 	addi	r22,r16,1
   1b688:	1f3ff404 	addi	fp,r3,-48
   1b68c:	b021883a 	mov	r16,r22
   1b690:	af3ff82e 	bgeu	r21,fp,1b674 <__alt_data_end+0xfc01b674>
   1b694:	2021883a 	mov	r16,r4
   1b698:	203d9f0e 	bge	r4,zero,1ad18 <__alt_data_end+0xfc01ad18>
   1b69c:	043fffc4 	movi	r16,-1
   1b6a0:	003d9d06 	br	1ad18 <__alt_data_end+0xfc01ad18>
   1b6a4:	8c401014 	ori	r17,r17,64
   1b6a8:	b0c00007 	ldb	r3,0(r22)
   1b6ac:	003d9906 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1b6b0:	d9002217 	ldw	r4,136(sp)
   1b6b4:	d8001d85 	stb	zero,118(sp)
   1b6b8:	20c00204 	addi	r3,r4,8
   1b6bc:	24c00017 	ldw	r19,0(r4)
   1b6c0:	25000117 	ldw	r20,4(r4)
   1b6c4:	8001e716 	blt	r16,zero,1be64 <___vfiprintf_internal_r+0x12c4>
   1b6c8:	013fdfc4 	movi	r4,-129
   1b6cc:	9d04b03a 	or	r2,r19,r20
   1b6d0:	d8c02215 	stw	r3,136(sp)
   1b6d4:	8922703a 	and	r17,r17,r4
   1b6d8:	002b883a 	mov	r21,zero
   1b6dc:	103f2f1e 	bne	r2,zero,1b39c <__alt_data_end+0xfc01b39c>
   1b6e0:	803e2f26 	beq	r16,zero,1afa0 <__alt_data_end+0xfc01afa0>
   1b6e4:	0027883a 	mov	r19,zero
   1b6e8:	9cc00c04 	addi	r19,r19,48
   1b6ec:	dcc019c5 	stb	r19,103(sp)
   1b6f0:	dd002817 	ldw	r20,160(sp)
   1b6f4:	ddc019c4 	addi	r23,sp,103
   1b6f8:	003e2c06 	br	1afac <__alt_data_end+0xfc01afac>
   1b6fc:	9cc03fcc 	andi	r19,r19,255
   1b700:	b811883a 	mov	r8,r23
   1b704:	9802571e 	bne	r19,zero,1c064 <___vfiprintf_internal_r+0x14c4>
   1b708:	18005726 	beq	r3,zero,1b868 <___vfiprintf_internal_r+0xcc8>
   1b70c:	04c00044 	movi	r19,1
   1b710:	d8c01005 	stb	r3,64(sp)
   1b714:	d8001d85 	stb	zero,118(sp)
   1b718:	9829883a 	mov	r20,r19
   1b71c:	ddc01004 	addi	r23,sp,64
   1b720:	003f0a06 	br	1b34c <__alt_data_end+0xfc01b34c>
   1b724:	d9402017 	ldw	r5,128(sp)
   1b728:	d9002117 	ldw	r4,132(sp)
   1b72c:	d9801a04 	addi	r6,sp,104
   1b730:	da802a15 	stw	r10,168(sp)
   1b734:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1b738:	da802a17 	ldw	r10,168(sp)
   1b73c:	1000501e 	bne	r2,zero,1b880 <___vfiprintf_internal_r+0xce0>
   1b740:	d9801b17 	ldw	r6,108(sp)
   1b744:	d8801c17 	ldw	r2,112(sp)
   1b748:	d811883a 	mov	r8,sp
   1b74c:	31000044 	addi	r4,r6,1
   1b750:	003e3606 	br	1b02c <__alt_data_end+0xfc01b02c>
   1b754:	d9001b17 	ldw	r4,108(sp)
   1b758:	d8801c17 	ldw	r2,112(sp)
   1b75c:	21400044 	addi	r5,r4,1
   1b760:	d9801d87 	ldb	r6,118(sp)
   1b764:	303e5226 	beq	r6,zero,1b0b0 <__alt_data_end+0xfc01b0b0>
   1b768:	01800044 	movi	r6,1
   1b76c:	d9001d84 	addi	r4,sp,118
   1b770:	1185883a 	add	r2,r2,r6
   1b774:	41000015 	stw	r4,0(r8)
   1b778:	41800115 	stw	r6,4(r8)
   1b77c:	d8801c15 	stw	r2,112(sp)
   1b780:	d9401b15 	stw	r5,108(sp)
   1b784:	010001c4 	movi	r4,7
   1b788:	2140b00e 	bge	r4,r5,1ba4c <___vfiprintf_internal_r+0xeac>
   1b78c:	1000f61e 	bne	r2,zero,1bb68 <___vfiprintf_internal_r+0xfc8>
   1b790:	3800b31e 	bne	r7,zero,1ba60 <___vfiprintf_internal_r+0xec0>
   1b794:	0009883a 	mov	r4,zero
   1b798:	300b883a 	mov	r5,r6
   1b79c:	d811883a 	mov	r8,sp
   1b7a0:	01802004 	movi	r6,128
   1b7a4:	19be5226 	beq	r3,r6,1b0f0 <__alt_data_end+0xfc01b0f0>
   1b7a8:	8521c83a 	sub	r16,r16,r20
   1b7ac:	043e790e 	bge	zero,r16,1b194 <__alt_data_end+0xfc01b194>
   1b7b0:	05400404 	movi	r21,16
   1b7b4:	ac01b00e 	bge	r21,r16,1be78 <___vfiprintf_internal_r+0x12d8>
   1b7b8:	014000f4 	movhi	r5,3
   1b7bc:	296e6604 	addi	r5,r5,-18024
   1b7c0:	d9402315 	stw	r5,140(sp)
   1b7c4:	070001c4 	movi	fp,7
   1b7c8:	00000506 	br	1b7e0 <___vfiprintf_internal_r+0xc40>
   1b7cc:	21400084 	addi	r5,r4,2
   1b7d0:	42000204 	addi	r8,r8,8
   1b7d4:	1809883a 	mov	r4,r3
   1b7d8:	843ffc04 	addi	r16,r16,-16
   1b7dc:	ac000d0e 	bge	r21,r16,1b814 <___vfiprintf_internal_r+0xc74>
   1b7e0:	10800404 	addi	r2,r2,16
   1b7e4:	20c00044 	addi	r3,r4,1
   1b7e8:	44800015 	stw	r18,0(r8)
   1b7ec:	45400115 	stw	r21,4(r8)
   1b7f0:	d8801c15 	stw	r2,112(sp)
   1b7f4:	d8c01b15 	stw	r3,108(sp)
   1b7f8:	e0fff40e 	bge	fp,r3,1b7cc <__alt_data_end+0xfc01b7cc>
   1b7fc:	1000101e 	bne	r2,zero,1b840 <___vfiprintf_internal_r+0xca0>
   1b800:	843ffc04 	addi	r16,r16,-16
   1b804:	01400044 	movi	r5,1
   1b808:	0009883a 	mov	r4,zero
   1b80c:	d811883a 	mov	r8,sp
   1b810:	ac3ff316 	blt	r21,r16,1b7e0 <__alt_data_end+0xfc01b7e0>
   1b814:	d8c02317 	ldw	r3,140(sp)
   1b818:	1405883a 	add	r2,r2,r16
   1b81c:	44000115 	stw	r16,4(r8)
   1b820:	40c00015 	stw	r3,0(r8)
   1b824:	d8801c15 	stw	r2,112(sp)
   1b828:	d9401b15 	stw	r5,108(sp)
   1b82c:	00c001c4 	movi	r3,7
   1b830:	19401916 	blt	r3,r5,1b898 <___vfiprintf_internal_r+0xcf8>
   1b834:	42000204 	addi	r8,r8,8
   1b838:	29400044 	addi	r5,r5,1
   1b83c:	003e5506 	br	1b194 <__alt_data_end+0xfc01b194>
   1b840:	d9402017 	ldw	r5,128(sp)
   1b844:	d9002117 	ldw	r4,132(sp)
   1b848:	d9801a04 	addi	r6,sp,104
   1b84c:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1b850:	10000b1e 	bne	r2,zero,1b880 <___vfiprintf_internal_r+0xce0>
   1b854:	d9001b17 	ldw	r4,108(sp)
   1b858:	d8801c17 	ldw	r2,112(sp)
   1b85c:	d811883a 	mov	r8,sp
   1b860:	21400044 	addi	r5,r4,1
   1b864:	003fdc06 	br	1b7d8 <__alt_data_end+0xfc01b7d8>
   1b868:	d8801c17 	ldw	r2,112(sp)
   1b86c:	10000426 	beq	r2,zero,1b880 <___vfiprintf_internal_r+0xce0>
   1b870:	d9402017 	ldw	r5,128(sp)
   1b874:	d9002117 	ldw	r4,132(sp)
   1b878:	d9801a04 	addi	r6,sp,104
   1b87c:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1b880:	d9402017 	ldw	r5,128(sp)
   1b884:	2880030b 	ldhu	r2,12(r5)
   1b888:	1080100c 	andi	r2,r2,64
   1b88c:	10014d1e 	bne	r2,zero,1bdc4 <___vfiprintf_internal_r+0x1224>
   1b890:	d8802417 	ldw	r2,144(sp)
   1b894:	003d9706 	br	1aef4 <__alt_data_end+0xfc01aef4>
   1b898:	1000d21e 	bne	r2,zero,1bbe4 <___vfiprintf_internal_r+0x1044>
   1b89c:	00c00044 	movi	r3,1
   1b8a0:	a005883a 	mov	r2,r20
   1b8a4:	ddc00015 	stw	r23,0(sp)
   1b8a8:	dd000115 	stw	r20,4(sp)
   1b8ac:	dd001c15 	stw	r20,112(sp)
   1b8b0:	d8c01b15 	stw	r3,108(sp)
   1b8b4:	d811883a 	mov	r8,sp
   1b8b8:	42000204 	addi	r8,r8,8
   1b8bc:	8c40010c 	andi	r17,r17,4
   1b8c0:	88004026 	beq	r17,zero,1b9c4 <___vfiprintf_internal_r+0xe24>
   1b8c4:	d9002517 	ldw	r4,148(sp)
   1b8c8:	24e3c83a 	sub	r17,r4,r19
   1b8cc:	04403d0e 	bge	zero,r17,1b9c4 <___vfiprintf_internal_r+0xe24>
   1b8d0:	04000404 	movi	r16,16
   1b8d4:	8441a90e 	bge	r16,r17,1bf7c <___vfiprintf_internal_r+0x13dc>
   1b8d8:	00c000f4 	movhi	r3,3
   1b8dc:	18ee6a04 	addi	r3,r3,-18008
   1b8e0:	d9001b17 	ldw	r4,108(sp)
   1b8e4:	d8c02315 	stw	r3,140(sp)
   1b8e8:	050001c4 	movi	r20,7
   1b8ec:	dd402117 	ldw	r21,132(sp)
   1b8f0:	ddc02017 	ldw	r23,128(sp)
   1b8f4:	00000506 	br	1b90c <___vfiprintf_internal_r+0xd6c>
   1b8f8:	21400084 	addi	r5,r4,2
   1b8fc:	42000204 	addi	r8,r8,8
   1b900:	1809883a 	mov	r4,r3
   1b904:	8c7ffc04 	addi	r17,r17,-16
   1b908:	84400f0e 	bge	r16,r17,1b948 <___vfiprintf_internal_r+0xda8>
   1b90c:	014000f4 	movhi	r5,3
   1b910:	10800404 	addi	r2,r2,16
   1b914:	20c00044 	addi	r3,r4,1
   1b918:	296e6a04 	addi	r5,r5,-18008
   1b91c:	41400015 	stw	r5,0(r8)
   1b920:	44000115 	stw	r16,4(r8)
   1b924:	d8801c15 	stw	r2,112(sp)
   1b928:	d8c01b15 	stw	r3,108(sp)
   1b92c:	a0fff20e 	bge	r20,r3,1b8f8 <__alt_data_end+0xfc01b8f8>
   1b930:	1000141e 	bne	r2,zero,1b984 <___vfiprintf_internal_r+0xde4>
   1b934:	8c7ffc04 	addi	r17,r17,-16
   1b938:	01400044 	movi	r5,1
   1b93c:	0009883a 	mov	r4,zero
   1b940:	d811883a 	mov	r8,sp
   1b944:	847ff116 	blt	r16,r17,1b90c <__alt_data_end+0xfc01b90c>
   1b948:	d8c02317 	ldw	r3,140(sp)
   1b94c:	1445883a 	add	r2,r2,r17
   1b950:	44400115 	stw	r17,4(r8)
   1b954:	40c00015 	stw	r3,0(r8)
   1b958:	d8801c15 	stw	r2,112(sp)
   1b95c:	d9401b15 	stw	r5,108(sp)
   1b960:	00c001c4 	movi	r3,7
   1b964:	1940170e 	bge	r3,r5,1b9c4 <___vfiprintf_internal_r+0xe24>
   1b968:	1000101e 	bne	r2,zero,1b9ac <___vfiprintf_internal_r+0xe0c>
   1b96c:	d8802517 	ldw	r2,148(sp)
   1b970:	14c11616 	blt	r2,r19,1bdcc <___vfiprintf_internal_r+0x122c>
   1b974:	d9002417 	ldw	r4,144(sp)
   1b978:	2089883a 	add	r4,r4,r2
   1b97c:	d9002415 	stw	r4,144(sp)
   1b980:	003e1806 	br	1b1e4 <__alt_data_end+0xfc01b1e4>
   1b984:	d9801a04 	addi	r6,sp,104
   1b988:	b80b883a 	mov	r5,r23
   1b98c:	a809883a 	mov	r4,r21
   1b990:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1b994:	103fba1e 	bne	r2,zero,1b880 <__alt_data_end+0xfc01b880>
   1b998:	d9001b17 	ldw	r4,108(sp)
   1b99c:	d8801c17 	ldw	r2,112(sp)
   1b9a0:	d811883a 	mov	r8,sp
   1b9a4:	21400044 	addi	r5,r4,1
   1b9a8:	003fd606 	br	1b904 <__alt_data_end+0xfc01b904>
   1b9ac:	d9402017 	ldw	r5,128(sp)
   1b9b0:	d9002117 	ldw	r4,132(sp)
   1b9b4:	d9801a04 	addi	r6,sp,104
   1b9b8:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1b9bc:	103fb01e 	bne	r2,zero,1b880 <__alt_data_end+0xfc01b880>
   1b9c0:	d8801c17 	ldw	r2,112(sp)
   1b9c4:	d8c02517 	ldw	r3,148(sp)
   1b9c8:	1cc0010e 	bge	r3,r19,1b9d0 <___vfiprintf_internal_r+0xe30>
   1b9cc:	9807883a 	mov	r3,r19
   1b9d0:	d9002417 	ldw	r4,144(sp)
   1b9d4:	20c9883a 	add	r4,r4,r3
   1b9d8:	d9002415 	stw	r4,144(sp)
   1b9dc:	103e0126 	beq	r2,zero,1b1e4 <__alt_data_end+0xfc01b1e4>
   1b9e0:	d9402017 	ldw	r5,128(sp)
   1b9e4:	d9002117 	ldw	r4,132(sp)
   1b9e8:	d9801a04 	addi	r6,sp,104
   1b9ec:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1b9f0:	103dfc26 	beq	r2,zero,1b1e4 <__alt_data_end+0xfc01b1e4>
   1b9f4:	003fa206 	br	1b880 <__alt_data_end+0xfc01b880>
   1b9f8:	d9402017 	ldw	r5,128(sp)
   1b9fc:	d9002117 	ldw	r4,132(sp)
   1ba00:	d9801a04 	addi	r6,sp,104
   1ba04:	d9c02b15 	stw	r7,172(sp)
   1ba08:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1ba0c:	d9c02b17 	ldw	r7,172(sp)
   1ba10:	103f9b1e 	bne	r2,zero,1b880 <__alt_data_end+0xfc01b880>
   1ba14:	d9001b17 	ldw	r4,108(sp)
   1ba18:	d8801c17 	ldw	r2,112(sp)
   1ba1c:	d811883a 	mov	r8,sp
   1ba20:	21800044 	addi	r6,r4,1
   1ba24:	003dbf06 	br	1b124 <__alt_data_end+0xfc01b124>
   1ba28:	1000d81e 	bne	r2,zero,1bd8c <___vfiprintf_internal_r+0x11ec>
   1ba2c:	d9001d87 	ldb	r4,118(sp)
   1ba30:	20000a26 	beq	r4,zero,1ba5c <___vfiprintf_internal_r+0xebc>
   1ba34:	00800044 	movi	r2,1
   1ba38:	d9001d84 	addi	r4,sp,118
   1ba3c:	100b883a 	mov	r5,r2
   1ba40:	d9000015 	stw	r4,0(sp)
   1ba44:	d8800115 	stw	r2,4(sp)
   1ba48:	d811883a 	mov	r8,sp
   1ba4c:	2809883a 	mov	r4,r5
   1ba50:	42000204 	addi	r8,r8,8
   1ba54:	29400044 	addi	r5,r5,1
   1ba58:	003d9506 	br	1b0b0 <__alt_data_end+0xfc01b0b0>
   1ba5c:	3800fd26 	beq	r7,zero,1be54 <___vfiprintf_internal_r+0x12b4>
   1ba60:	00800084 	movi	r2,2
   1ba64:	d9001d04 	addi	r4,sp,116
   1ba68:	d9000015 	stw	r4,0(sp)
   1ba6c:	d8800115 	stw	r2,4(sp)
   1ba70:	01400044 	movi	r5,1
   1ba74:	d811883a 	mov	r8,sp
   1ba78:	2809883a 	mov	r4,r5
   1ba7c:	42000204 	addi	r8,r8,8
   1ba80:	29400044 	addi	r5,r5,1
   1ba84:	003f4606 	br	1b7a0 <__alt_data_end+0xfc01b7a0>
   1ba88:	d8802517 	ldw	r2,148(sp)
   1ba8c:	14c0010e 	bge	r2,r19,1ba94 <___vfiprintf_internal_r+0xef4>
   1ba90:	9805883a 	mov	r2,r19
   1ba94:	d9402417 	ldw	r5,144(sp)
   1ba98:	288b883a 	add	r5,r5,r2
   1ba9c:	d9402415 	stw	r5,144(sp)
   1baa0:	003dd006 	br	1b1e4 <__alt_data_end+0xfc01b1e4>
   1baa4:	d8001d85 	stb	zero,118(sp)
   1baa8:	80005d16 	blt	r16,zero,1bc20 <___vfiprintf_internal_r+0x1080>
   1baac:	00ffdfc4 	movi	r3,-129
   1bab0:	9d04b03a 	or	r2,r19,r20
   1bab4:	88e2703a 	and	r17,r17,r3
   1bab8:	103d3726 	beq	r2,zero,1af98 <__alt_data_end+0xfc01af98>
   1babc:	002b883a 	mov	r21,zero
   1bac0:	d9002617 	ldw	r4,152(sp)
   1bac4:	ddc01a04 	addi	r23,sp,104
   1bac8:	988003cc 	andi	r2,r19,15
   1bacc:	a006973a 	slli	r3,r20,28
   1bad0:	2085883a 	add	r2,r4,r2
   1bad4:	9826d13a 	srli	r19,r19,4
   1bad8:	10800003 	ldbu	r2,0(r2)
   1badc:	a028d13a 	srli	r20,r20,4
   1bae0:	bdffffc4 	addi	r23,r23,-1
   1bae4:	1ce6b03a 	or	r19,r3,r19
   1bae8:	b8800005 	stb	r2,0(r23)
   1baec:	9d04b03a 	or	r2,r19,r20
   1baf0:	103ff51e 	bne	r2,zero,1bac8 <__alt_data_end+0xfc01bac8>
   1baf4:	d8801e17 	ldw	r2,120(sp)
   1baf8:	15e9c83a 	sub	r20,r2,r23
   1bafc:	003d2b06 	br	1afac <__alt_data_end+0xfc01afac>
   1bb00:	d9402017 	ldw	r5,128(sp)
   1bb04:	d9002117 	ldw	r4,132(sp)
   1bb08:	d9801a04 	addi	r6,sp,104
   1bb0c:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1bb10:	103f5b1e 	bne	r2,zero,1b880 <__alt_data_end+0xfc01b880>
   1bb14:	d8801c17 	ldw	r2,112(sp)
   1bb18:	d811883a 	mov	r8,sp
   1bb1c:	003f6706 	br	1b8bc <__alt_data_end+0xfc01b8bc>
   1bb20:	d9402017 	ldw	r5,128(sp)
   1bb24:	d9002117 	ldw	r4,132(sp)
   1bb28:	d9801a04 	addi	r6,sp,104
   1bb2c:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1bb30:	103f531e 	bne	r2,zero,1b880 <__alt_data_end+0xfc01b880>
   1bb34:	d811883a 	mov	r8,sp
   1bb38:	003cd906 	br	1aea0 <__alt_data_end+0xfc01aea0>
   1bb3c:	10803fcc 	andi	r2,r2,255
   1bb40:	1080201c 	xori	r2,r2,128
   1bb44:	10bfe004 	addi	r2,r2,-128
   1bb48:	00c00c04 	movi	r3,48
   1bb4c:	10ffe926 	beq	r2,r3,1baf4 <__alt_data_end+0xfc01baf4>
   1bb50:	b8ffffc5 	stb	r3,-1(r23)
   1bb54:	d8c01e17 	ldw	r3,120(sp)
   1bb58:	b8bfffc4 	addi	r2,r23,-1
   1bb5c:	102f883a 	mov	r23,r2
   1bb60:	18a9c83a 	sub	r20,r3,r2
   1bb64:	003d1106 	br	1afac <__alt_data_end+0xfc01afac>
   1bb68:	d9402017 	ldw	r5,128(sp)
   1bb6c:	d9002117 	ldw	r4,132(sp)
   1bb70:	d9801a04 	addi	r6,sp,104
   1bb74:	d8c02a15 	stw	r3,168(sp)
   1bb78:	d9c02b15 	stw	r7,172(sp)
   1bb7c:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1bb80:	d8c02a17 	ldw	r3,168(sp)
   1bb84:	d9c02b17 	ldw	r7,172(sp)
   1bb88:	103f3d1e 	bne	r2,zero,1b880 <__alt_data_end+0xfc01b880>
   1bb8c:	d9001b17 	ldw	r4,108(sp)
   1bb90:	d8801c17 	ldw	r2,112(sp)
   1bb94:	d811883a 	mov	r8,sp
   1bb98:	21400044 	addi	r5,r4,1
   1bb9c:	003d4406 	br	1b0b0 <__alt_data_end+0xfc01b0b0>
   1bba0:	d9402017 	ldw	r5,128(sp)
   1bba4:	d9002117 	ldw	r4,132(sp)
   1bba8:	d9801a04 	addi	r6,sp,104
   1bbac:	d8c02a15 	stw	r3,168(sp)
   1bbb0:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1bbb4:	d8c02a17 	ldw	r3,168(sp)
   1bbb8:	103f311e 	bne	r2,zero,1b880 <__alt_data_end+0xfc01b880>
   1bbbc:	d9001b17 	ldw	r4,108(sp)
   1bbc0:	d8801c17 	ldw	r2,112(sp)
   1bbc4:	d811883a 	mov	r8,sp
   1bbc8:	21400044 	addi	r5,r4,1
   1bbcc:	003ef406 	br	1b7a0 <__alt_data_end+0xfc01b7a0>
   1bbd0:	1000bd1e 	bne	r2,zero,1bec8 <___vfiprintf_internal_r+0x1328>
   1bbd4:	01400044 	movi	r5,1
   1bbd8:	0009883a 	mov	r4,zero
   1bbdc:	d811883a 	mov	r8,sp
   1bbe0:	003ef106 	br	1b7a8 <__alt_data_end+0xfc01b7a8>
   1bbe4:	d9402017 	ldw	r5,128(sp)
   1bbe8:	d9002117 	ldw	r4,132(sp)
   1bbec:	d9801a04 	addi	r6,sp,104
   1bbf0:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1bbf4:	103f221e 	bne	r2,zero,1b880 <__alt_data_end+0xfc01b880>
   1bbf8:	d9401b17 	ldw	r5,108(sp)
   1bbfc:	d8801c17 	ldw	r2,112(sp)
   1bc00:	d811883a 	mov	r8,sp
   1bc04:	29400044 	addi	r5,r5,1
   1bc08:	003d6206 	br	1b194 <__alt_data_end+0xfc01b194>
   1bc0c:	014000f4 	movhi	r5,3
   1bc10:	296df604 	addi	r5,r5,-18472
   1bc14:	d9402615 	stw	r5,152(sp)
   1bc18:	d8c02215 	stw	r3,136(sp)
   1bc1c:	1023883a 	mov	r17,r2
   1bc20:	9d04b03a 	or	r2,r19,r20
   1bc24:	103fa51e 	bne	r2,zero,1babc <__alt_data_end+0xfc01babc>
   1bc28:	002b883a 	mov	r21,zero
   1bc2c:	00800084 	movi	r2,2
   1bc30:	003e4a06 	br	1b55c <__alt_data_end+0xfc01b55c>
   1bc34:	014000f4 	movhi	r5,3
   1bc38:	296df604 	addi	r5,r5,-18472
   1bc3c:	002b883a 	mov	r21,zero
   1bc40:	d9402615 	stw	r5,152(sp)
   1bc44:	003f9e06 	br	1bac0 <__alt_data_end+0xfc01bac0>
   1bc48:	d9402217 	ldw	r5,136(sp)
   1bc4c:	d8001d85 	stb	zero,118(sp)
   1bc50:	0029883a 	mov	r20,zero
   1bc54:	28800104 	addi	r2,r5,4
   1bc58:	2cc00017 	ldw	r19,0(r5)
   1bc5c:	803e3a16 	blt	r16,zero,1b548 <__alt_data_end+0xfc01b548>
   1bc60:	00ffdfc4 	movi	r3,-129
   1bc64:	d8802215 	stw	r2,136(sp)
   1bc68:	88e2703a 	and	r17,r17,r3
   1bc6c:	002b883a 	mov	r21,zero
   1bc70:	983e9b26 	beq	r19,zero,1b6e0 <__alt_data_end+0xfc01b6e0>
   1bc74:	00800244 	movi	r2,9
   1bc78:	14fdc936 	bltu	r2,r19,1b3a0 <__alt_data_end+0xfc01b3a0>
   1bc7c:	003e9a06 	br	1b6e8 <__alt_data_end+0xfc01b6e8>
   1bc80:	00800c04 	movi	r2,48
   1bc84:	d8c01d45 	stb	r3,117(sp)
   1bc88:	d8801d05 	stb	r2,116(sp)
   1bc8c:	d8001d85 	stb	zero,118(sp)
   1bc90:	88c00094 	ori	r3,r17,2
   1bc94:	80009c16 	blt	r16,zero,1bf08 <___vfiprintf_internal_r+0x1368>
   1bc98:	00bfdfc4 	movi	r2,-129
   1bc9c:	88a2703a 	and	r17,r17,r2
   1bca0:	8c400094 	ori	r17,r17,2
   1bca4:	002b883a 	mov	r21,zero
   1bca8:	003f8506 	br	1bac0 <__alt_data_end+0xfc01bac0>
   1bcac:	b029883a 	mov	r20,r22
   1bcb0:	003c0b06 	br	1ace0 <__alt_data_end+0xfc01ace0>
   1bcb4:	04e7c83a 	sub	r19,zero,r19
   1bcb8:	05400b44 	movi	r21,45
   1bcbc:	9804c03a 	cmpne	r2,r19,zero
   1bcc0:	0529c83a 	sub	r20,zero,r20
   1bcc4:	dd401d85 	stb	r21,118(sp)
   1bcc8:	a0a9c83a 	sub	r20,r20,r2
   1bccc:	80009716 	blt	r16,zero,1bf2c <___vfiprintf_internal_r+0x138c>
   1bcd0:	00bfdfc4 	movi	r2,-129
   1bcd4:	88a2703a 	and	r17,r17,r2
   1bcd8:	003db006 	br	1b39c <__alt_data_end+0xfc01b39c>
   1bcdc:	b0c00007 	ldb	r3,0(r22)
   1bce0:	003c0c06 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1bce4:	8880100c 	andi	r2,r17,64
   1bce8:	d8001d85 	stb	zero,118(sp)
   1bcec:	1000461e 	bne	r2,zero,1be08 <___vfiprintf_internal_r+0x1268>
   1bcf0:	d9002217 	ldw	r4,136(sp)
   1bcf4:	0029883a 	mov	r20,zero
   1bcf8:	20800104 	addi	r2,r4,4
   1bcfc:	24c00017 	ldw	r19,0(r4)
   1bd00:	803df80e 	bge	r16,zero,1b4e4 <__alt_data_end+0xfc01b4e4>
   1bd04:	9d06b03a 	or	r3,r19,r20
   1bd08:	d8802215 	stw	r2,136(sp)
   1bd0c:	183d5e1e 	bne	r3,zero,1b288 <__alt_data_end+0xfc01b288>
   1bd10:	002b883a 	mov	r21,zero
   1bd14:	0005883a 	mov	r2,zero
   1bd18:	003e1006 	br	1b55c <__alt_data_end+0xfc01b55c>
   1bd1c:	8880040c 	andi	r2,r17,16
   1bd20:	1000321e 	bne	r2,zero,1bdec <___vfiprintf_internal_r+0x124c>
   1bd24:	8c40100c 	andi	r17,r17,64
   1bd28:	88008d26 	beq	r17,zero,1bf60 <___vfiprintf_internal_r+0x13c0>
   1bd2c:	d9402217 	ldw	r5,136(sp)
   1bd30:	d8c02417 	ldw	r3,144(sp)
   1bd34:	28800017 	ldw	r2,0(r5)
   1bd38:	29400104 	addi	r5,r5,4
   1bd3c:	d9402215 	stw	r5,136(sp)
   1bd40:	10c0000d 	sth	r3,0(r2)
   1bd44:	003bca06 	br	1ac70 <__alt_data_end+0xfc01ac70>
   1bd48:	8880100c 	andi	r2,r17,64
   1bd4c:	10003a26 	beq	r2,zero,1be38 <___vfiprintf_internal_r+0x1298>
   1bd50:	d8802217 	ldw	r2,136(sp)
   1bd54:	14c0000f 	ldh	r19,0(r2)
   1bd58:	10800104 	addi	r2,r2,4
   1bd5c:	d8802215 	stw	r2,136(sp)
   1bd60:	9829d7fa 	srai	r20,r19,31
   1bd64:	a005883a 	mov	r2,r20
   1bd68:	003d8506 	br	1b380 <__alt_data_end+0xfc01b380>
   1bd6c:	8880100c 	andi	r2,r17,64
   1bd70:	10002b26 	beq	r2,zero,1be20 <___vfiprintf_internal_r+0x1280>
   1bd74:	d8802217 	ldw	r2,136(sp)
   1bd78:	0029883a 	mov	r20,zero
   1bd7c:	14c0000b 	ldhu	r19,0(r2)
   1bd80:	10800104 	addi	r2,r2,4
   1bd84:	d8802215 	stw	r2,136(sp)
   1bd88:	003d5d06 	br	1b300 <__alt_data_end+0xfc01b300>
   1bd8c:	d9402017 	ldw	r5,128(sp)
   1bd90:	d9002117 	ldw	r4,132(sp)
   1bd94:	d9801a04 	addi	r6,sp,104
   1bd98:	d8c02a15 	stw	r3,168(sp)
   1bd9c:	d9c02b15 	stw	r7,172(sp)
   1bda0:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1bda4:	d8c02a17 	ldw	r3,168(sp)
   1bda8:	d9c02b17 	ldw	r7,172(sp)
   1bdac:	103eb41e 	bne	r2,zero,1b880 <__alt_data_end+0xfc01b880>
   1bdb0:	d9001b17 	ldw	r4,108(sp)
   1bdb4:	d8801c17 	ldw	r2,112(sp)
   1bdb8:	d811883a 	mov	r8,sp
   1bdbc:	21400044 	addi	r5,r4,1
   1bdc0:	003e6706 	br	1b760 <__alt_data_end+0xfc01b760>
   1bdc4:	00bfffc4 	movi	r2,-1
   1bdc8:	003c4a06 	br	1aef4 <__alt_data_end+0xfc01aef4>
   1bdcc:	9805883a 	mov	r2,r19
   1bdd0:	003ee806 	br	1b974 <__alt_data_end+0xfc01b974>
   1bdd4:	d8c02217 	ldw	r3,136(sp)
   1bdd8:	0029883a 	mov	r20,zero
   1bddc:	18800104 	addi	r2,r3,4
   1bde0:	1cc0000b 	ldhu	r19,0(r3)
   1bde4:	803f9e0e 	bge	r16,zero,1bc60 <__alt_data_end+0xfc01bc60>
   1bde8:	003dd706 	br	1b548 <__alt_data_end+0xfc01b548>
   1bdec:	d8c02217 	ldw	r3,136(sp)
   1bdf0:	d9002417 	ldw	r4,144(sp)
   1bdf4:	18800017 	ldw	r2,0(r3)
   1bdf8:	18c00104 	addi	r3,r3,4
   1bdfc:	d8c02215 	stw	r3,136(sp)
   1be00:	11000015 	stw	r4,0(r2)
   1be04:	003b9a06 	br	1ac70 <__alt_data_end+0xfc01ac70>
   1be08:	d8c02217 	ldw	r3,136(sp)
   1be0c:	0029883a 	mov	r20,zero
   1be10:	18800104 	addi	r2,r3,4
   1be14:	1cc0000b 	ldhu	r19,0(r3)
   1be18:	803db20e 	bge	r16,zero,1b4e4 <__alt_data_end+0xfc01b4e4>
   1be1c:	003fb906 	br	1bd04 <__alt_data_end+0xfc01bd04>
   1be20:	d9002217 	ldw	r4,136(sp)
   1be24:	0029883a 	mov	r20,zero
   1be28:	24c00017 	ldw	r19,0(r4)
   1be2c:	21000104 	addi	r4,r4,4
   1be30:	d9002215 	stw	r4,136(sp)
   1be34:	003d3206 	br	1b300 <__alt_data_end+0xfc01b300>
   1be38:	d8c02217 	ldw	r3,136(sp)
   1be3c:	1cc00017 	ldw	r19,0(r3)
   1be40:	18c00104 	addi	r3,r3,4
   1be44:	d8c02215 	stw	r3,136(sp)
   1be48:	9829d7fa 	srai	r20,r19,31
   1be4c:	a005883a 	mov	r2,r20
   1be50:	003d4b06 	br	1b380 <__alt_data_end+0xfc01b380>
   1be54:	0009883a 	mov	r4,zero
   1be58:	01400044 	movi	r5,1
   1be5c:	d811883a 	mov	r8,sp
   1be60:	003e4f06 	br	1b7a0 <__alt_data_end+0xfc01b7a0>
   1be64:	d8c02215 	stw	r3,136(sp)
   1be68:	002b883a 	mov	r21,zero
   1be6c:	003db806 	br	1b550 <__alt_data_end+0xfc01b550>
   1be70:	d811883a 	mov	r8,sp
   1be74:	003e9606 	br	1b8d0 <__alt_data_end+0xfc01b8d0>
   1be78:	010000f4 	movhi	r4,3
   1be7c:	212e6604 	addi	r4,r4,-18024
   1be80:	d9002315 	stw	r4,140(sp)
   1be84:	003e6306 	br	1b814 <__alt_data_end+0xfc01b814>
   1be88:	b0c00043 	ldbu	r3,1(r22)
   1be8c:	8c400814 	ori	r17,r17,32
   1be90:	b5800044 	addi	r22,r22,1
   1be94:	18c03fcc 	andi	r3,r3,255
   1be98:	18c0201c 	xori	r3,r3,128
   1be9c:	18ffe004 	addi	r3,r3,-128
   1bea0:	003b9c06 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1bea4:	b809883a 	mov	r4,r23
   1bea8:	da002a15 	stw	r8,168(sp)
   1beac:	00105200 	call	10520 <strlen>
   1beb0:	1029883a 	mov	r20,r2
   1beb4:	dd401d83 	ldbu	r21,118(sp)
   1beb8:	df002215 	stw	fp,136(sp)
   1bebc:	0021883a 	mov	r16,zero
   1bec0:	da002a17 	ldw	r8,168(sp)
   1bec4:	003c3906 	br	1afac <__alt_data_end+0xfc01afac>
   1bec8:	d9402017 	ldw	r5,128(sp)
   1becc:	d9002117 	ldw	r4,132(sp)
   1bed0:	d9801a04 	addi	r6,sp,104
   1bed4:	001aa8c0 	call	1aa8c <__sprint_r.part.0>
   1bed8:	103e691e 	bne	r2,zero,1b880 <__alt_data_end+0xfc01b880>
   1bedc:	d9001b17 	ldw	r4,108(sp)
   1bee0:	d8801c17 	ldw	r2,112(sp)
   1bee4:	d811883a 	mov	r8,sp
   1bee8:	21400044 	addi	r5,r4,1
   1beec:	003e2e06 	br	1b7a8 <__alt_data_end+0xfc01b7a8>
   1bef0:	010000f4 	movhi	r4,3
   1bef4:	212e6a04 	addi	r4,r4,-18008
   1bef8:	d9002315 	stw	r4,140(sp)
   1befc:	d9001b17 	ldw	r4,108(sp)
   1bf00:	21000044 	addi	r4,r4,1
   1bf04:	003c5e06 	br	1b080 <__alt_data_end+0xfc01b080>
   1bf08:	002b883a 	mov	r21,zero
   1bf0c:	00800084 	movi	r2,2
   1bf10:	10803fcc 	andi	r2,r2,255
   1bf14:	01000044 	movi	r4,1
   1bf18:	11002b26 	beq	r2,r4,1bfc8 <___vfiprintf_internal_r+0x1428>
   1bf1c:	01000084 	movi	r4,2
   1bf20:	11002b1e 	bne	r2,r4,1bfd0 <___vfiprintf_internal_r+0x1430>
   1bf24:	1823883a 	mov	r17,r3
   1bf28:	003ee506 	br	1bac0 <__alt_data_end+0xfc01bac0>
   1bf2c:	8807883a 	mov	r3,r17
   1bf30:	00800044 	movi	r2,1
   1bf34:	003ff606 	br	1bf10 <__alt_data_end+0xfc01bf10>
   1bf38:	00800184 	movi	r2,6
   1bf3c:	1400012e 	bgeu	r2,r16,1bf44 <___vfiprintf_internal_r+0x13a4>
   1bf40:	1021883a 	mov	r16,r2
   1bf44:	8029883a 	mov	r20,r16
   1bf48:	8027883a 	mov	r19,r16
   1bf4c:	80002216 	blt	r16,zero,1bfd8 <___vfiprintf_internal_r+0x1438>
   1bf50:	05c000f4 	movhi	r23,3
   1bf54:	df002215 	stw	fp,136(sp)
   1bf58:	bdedfb04 	addi	r23,r23,-18452
   1bf5c:	003cfb06 	br	1b34c <__alt_data_end+0xfc01b34c>
   1bf60:	d9002217 	ldw	r4,136(sp)
   1bf64:	d9402417 	ldw	r5,144(sp)
   1bf68:	20800017 	ldw	r2,0(r4)
   1bf6c:	21000104 	addi	r4,r4,4
   1bf70:	d9002215 	stw	r4,136(sp)
   1bf74:	11400015 	stw	r5,0(r2)
   1bf78:	003b3d06 	br	1ac70 <__alt_data_end+0xfc01ac70>
   1bf7c:	014000f4 	movhi	r5,3
   1bf80:	296e6a04 	addi	r5,r5,-18008
   1bf84:	d9402315 	stw	r5,140(sp)
   1bf88:	d9401b17 	ldw	r5,108(sp)
   1bf8c:	29400044 	addi	r5,r5,1
   1bf90:	003e6d06 	br	1b948 <__alt_data_end+0xfc01b948>
   1bf94:	8029883a 	mov	r20,r16
   1bf98:	dd401d83 	ldbu	r21,118(sp)
   1bf9c:	df002215 	stw	fp,136(sp)
   1bfa0:	0021883a 	mov	r16,zero
   1bfa4:	003c0106 	br	1afac <__alt_data_end+0xfc01afac>
   1bfa8:	00c000f4 	movhi	r3,3
   1bfac:	18ee6604 	addi	r3,r3,-18024
   1bfb0:	d8c02315 	stw	r3,140(sp)
   1bfb4:	280d883a 	mov	r6,r5
   1bfb8:	003c6906 	br	1b160 <__alt_data_end+0xfc01b160>
   1bfbc:	802d883a 	mov	r22,r16
   1bfc0:	0021883a 	mov	r16,zero
   1bfc4:	003b5406 	br	1ad18 <__alt_data_end+0xfc01ad18>
   1bfc8:	1823883a 	mov	r17,r3
   1bfcc:	003cf306 	br	1b39c <__alt_data_end+0xfc01b39c>
   1bfd0:	1823883a 	mov	r17,r3
   1bfd4:	003cad06 	br	1b28c <__alt_data_end+0xfc01b28c>
   1bfd8:	0027883a 	mov	r19,zero
   1bfdc:	003fdc06 	br	1bf50 <__alt_data_end+0xfc01bf50>
   1bfe0:	d9402217 	ldw	r5,136(sp)
   1bfe4:	8005883a 	mov	r2,r16
   1bfe8:	b0c00043 	ldbu	r3,1(r22)
   1bfec:	2c000017 	ldw	r16,0(r5)
   1bff0:	29000104 	addi	r4,r5,4
   1bff4:	d9002215 	stw	r4,136(sp)
   1bff8:	102d883a 	mov	r22,r2
   1bffc:	803fa50e 	bge	r16,zero,1be94 <__alt_data_end+0xfc01be94>
   1c000:	18c03fcc 	andi	r3,r3,255
   1c004:	18c0201c 	xori	r3,r3,128
   1c008:	043fffc4 	movi	r16,-1
   1c00c:	18ffe004 	addi	r3,r3,-128
   1c010:	003b4006 	br	1ad14 <__alt_data_end+0xfc01ad14>
   1c014:	d9402303 	ldbu	r5,140(sp)
   1c018:	d9401d85 	stb	r5,118(sp)
   1c01c:	003cae06 	br	1b2d8 <__alt_data_end+0xfc01b2d8>
   1c020:	d8c02303 	ldbu	r3,140(sp)
   1c024:	d8c01d85 	stb	r3,118(sp)
   1c028:	003d1406 	br	1b47c <__alt_data_end+0xfc01b47c>
   1c02c:	d8c02303 	ldbu	r3,140(sp)
   1c030:	d8c01d85 	stb	r3,118(sp)
   1c034:	003cca06 	br	1b360 <__alt_data_end+0xfc01b360>
   1c038:	8880004c 	andi	r2,r17,1
   1c03c:	002b883a 	mov	r21,zero
   1c040:	10000526 	beq	r2,zero,1c058 <___vfiprintf_internal_r+0x14b8>
   1c044:	00800c04 	movi	r2,48
   1c048:	d88019c5 	stb	r2,103(sp)
   1c04c:	dd002817 	ldw	r20,160(sp)
   1c050:	ddc019c4 	addi	r23,sp,103
   1c054:	003bd506 	br	1afac <__alt_data_end+0xfc01afac>
   1c058:	0029883a 	mov	r20,zero
   1c05c:	ddc01a04 	addi	r23,sp,104
   1c060:	003bd206 	br	1afac <__alt_data_end+0xfc01afac>
   1c064:	d9002303 	ldbu	r4,140(sp)
   1c068:	d9001d85 	stb	r4,118(sp)
   1c06c:	003da606 	br	1b708 <__alt_data_end+0xfc01b708>
   1c070:	d8c02303 	ldbu	r3,140(sp)
   1c074:	d8c01d85 	stb	r3,118(sp)
   1c078:	003c7606 	br	1b254 <__alt_data_end+0xfc01b254>
   1c07c:	d8c02303 	ldbu	r3,140(sp)
   1c080:	d8c01d85 	stb	r3,118(sp)
   1c084:	003c6506 	br	1b21c <__alt_data_end+0xfc01b21c>
   1c088:	d9002303 	ldbu	r4,140(sp)
   1c08c:	d9001d85 	stb	r4,118(sp)
   1c090:	003d3d06 	br	1b588 <__alt_data_end+0xfc01b588>
   1c094:	d8c02303 	ldbu	r3,140(sp)
   1c098:	d8c01d85 	stb	r3,118(sp)
   1c09c:	003d1d06 	br	1b514 <__alt_data_end+0xfc01b514>
   1c0a0:	d8c02303 	ldbu	r3,140(sp)
   1c0a4:	d8c01d85 	stb	r3,118(sp)
   1c0a8:	003d0306 	br	1b4b8 <__alt_data_end+0xfc01b4b8>

0001c0ac <__vfiprintf_internal>:
   1c0ac:	008000f4 	movhi	r2,3
   1c0b0:	10baf204 	addi	r2,r2,-5176
   1c0b4:	300f883a 	mov	r7,r6
   1c0b8:	280d883a 	mov	r6,r5
   1c0bc:	200b883a 	mov	r5,r4
   1c0c0:	11000017 	ldw	r4,0(r2)
   1c0c4:	001aba01 	jmpi	1aba0 <___vfiprintf_internal_r>

0001c0c8 <__sbprintf>:
   1c0c8:	2880030b 	ldhu	r2,12(r5)
   1c0cc:	2ac01917 	ldw	r11,100(r5)
   1c0d0:	2a80038b 	ldhu	r10,14(r5)
   1c0d4:	2a400717 	ldw	r9,28(r5)
   1c0d8:	2a000917 	ldw	r8,36(r5)
   1c0dc:	defee204 	addi	sp,sp,-1144
   1c0e0:	00c10004 	movi	r3,1024
   1c0e4:	dc011a15 	stw	r16,1128(sp)
   1c0e8:	10bfff4c 	andi	r2,r2,65533
   1c0ec:	2821883a 	mov	r16,r5
   1c0f0:	d8cb883a 	add	r5,sp,r3
   1c0f4:	dc811c15 	stw	r18,1136(sp)
   1c0f8:	dc411b15 	stw	r17,1132(sp)
   1c0fc:	dfc11d15 	stw	ra,1140(sp)
   1c100:	2025883a 	mov	r18,r4
   1c104:	d881030d 	sth	r2,1036(sp)
   1c108:	dac11915 	stw	r11,1124(sp)
   1c10c:	da81038d 	sth	r10,1038(sp)
   1c110:	da410715 	stw	r9,1052(sp)
   1c114:	da010915 	stw	r8,1060(sp)
   1c118:	dec10015 	stw	sp,1024(sp)
   1c11c:	dec10415 	stw	sp,1040(sp)
   1c120:	d8c10215 	stw	r3,1032(sp)
   1c124:	d8c10515 	stw	r3,1044(sp)
   1c128:	d8010615 	stw	zero,1048(sp)
   1c12c:	001aba00 	call	1aba0 <___vfiprintf_internal_r>
   1c130:	1023883a 	mov	r17,r2
   1c134:	10000416 	blt	r2,zero,1c148 <__sbprintf+0x80>
   1c138:	d9410004 	addi	r5,sp,1024
   1c13c:	9009883a 	mov	r4,r18
   1c140:	00168500 	call	16850 <_fflush_r>
   1c144:	10000d1e 	bne	r2,zero,1c17c <__sbprintf+0xb4>
   1c148:	d881030b 	ldhu	r2,1036(sp)
   1c14c:	1080100c 	andi	r2,r2,64
   1c150:	10000326 	beq	r2,zero,1c160 <__sbprintf+0x98>
   1c154:	8080030b 	ldhu	r2,12(r16)
   1c158:	10801014 	ori	r2,r2,64
   1c15c:	8080030d 	sth	r2,12(r16)
   1c160:	8805883a 	mov	r2,r17
   1c164:	dfc11d17 	ldw	ra,1140(sp)
   1c168:	dc811c17 	ldw	r18,1136(sp)
   1c16c:	dc411b17 	ldw	r17,1132(sp)
   1c170:	dc011a17 	ldw	r16,1128(sp)
   1c174:	dec11e04 	addi	sp,sp,1144
   1c178:	f800283a 	ret
   1c17c:	047fffc4 	movi	r17,-1
   1c180:	003ff106 	br	1c148 <__alt_data_end+0xfc01c148>

0001c184 <__swbuf_r>:
   1c184:	defffb04 	addi	sp,sp,-20
   1c188:	dcc00315 	stw	r19,12(sp)
   1c18c:	dc800215 	stw	r18,8(sp)
   1c190:	dc000015 	stw	r16,0(sp)
   1c194:	dfc00415 	stw	ra,16(sp)
   1c198:	dc400115 	stw	r17,4(sp)
   1c19c:	2025883a 	mov	r18,r4
   1c1a0:	2827883a 	mov	r19,r5
   1c1a4:	3021883a 	mov	r16,r6
   1c1a8:	20000226 	beq	r4,zero,1c1b4 <__swbuf_r+0x30>
   1c1ac:	20800e17 	ldw	r2,56(r4)
   1c1b0:	10004226 	beq	r2,zero,1c2bc <__swbuf_r+0x138>
   1c1b4:	80800617 	ldw	r2,24(r16)
   1c1b8:	8100030b 	ldhu	r4,12(r16)
   1c1bc:	80800215 	stw	r2,8(r16)
   1c1c0:	2080020c 	andi	r2,r4,8
   1c1c4:	10003626 	beq	r2,zero,1c2a0 <__swbuf_r+0x11c>
   1c1c8:	80c00417 	ldw	r3,16(r16)
   1c1cc:	18003426 	beq	r3,zero,1c2a0 <__swbuf_r+0x11c>
   1c1d0:	2088000c 	andi	r2,r4,8192
   1c1d4:	9c403fcc 	andi	r17,r19,255
   1c1d8:	10001a26 	beq	r2,zero,1c244 <__swbuf_r+0xc0>
   1c1dc:	80800017 	ldw	r2,0(r16)
   1c1e0:	81000517 	ldw	r4,20(r16)
   1c1e4:	10c7c83a 	sub	r3,r2,r3
   1c1e8:	1900200e 	bge	r3,r4,1c26c <__swbuf_r+0xe8>
   1c1ec:	18c00044 	addi	r3,r3,1
   1c1f0:	81000217 	ldw	r4,8(r16)
   1c1f4:	11400044 	addi	r5,r2,1
   1c1f8:	81400015 	stw	r5,0(r16)
   1c1fc:	213fffc4 	addi	r4,r4,-1
   1c200:	81000215 	stw	r4,8(r16)
   1c204:	14c00005 	stb	r19,0(r2)
   1c208:	80800517 	ldw	r2,20(r16)
   1c20c:	10c01e26 	beq	r2,r3,1c288 <__swbuf_r+0x104>
   1c210:	8080030b 	ldhu	r2,12(r16)
   1c214:	1080004c 	andi	r2,r2,1
   1c218:	10000226 	beq	r2,zero,1c224 <__swbuf_r+0xa0>
   1c21c:	00800284 	movi	r2,10
   1c220:	88801926 	beq	r17,r2,1c288 <__swbuf_r+0x104>
   1c224:	8805883a 	mov	r2,r17
   1c228:	dfc00417 	ldw	ra,16(sp)
   1c22c:	dcc00317 	ldw	r19,12(sp)
   1c230:	dc800217 	ldw	r18,8(sp)
   1c234:	dc400117 	ldw	r17,4(sp)
   1c238:	dc000017 	ldw	r16,0(sp)
   1c23c:	dec00504 	addi	sp,sp,20
   1c240:	f800283a 	ret
   1c244:	81401917 	ldw	r5,100(r16)
   1c248:	00b7ffc4 	movi	r2,-8193
   1c24c:	21080014 	ori	r4,r4,8192
   1c250:	2884703a 	and	r2,r5,r2
   1c254:	80801915 	stw	r2,100(r16)
   1c258:	80800017 	ldw	r2,0(r16)
   1c25c:	8100030d 	sth	r4,12(r16)
   1c260:	81000517 	ldw	r4,20(r16)
   1c264:	10c7c83a 	sub	r3,r2,r3
   1c268:	193fe016 	blt	r3,r4,1c1ec <__alt_data_end+0xfc01c1ec>
   1c26c:	800b883a 	mov	r5,r16
   1c270:	9009883a 	mov	r4,r18
   1c274:	00168500 	call	16850 <_fflush_r>
   1c278:	1000071e 	bne	r2,zero,1c298 <__swbuf_r+0x114>
   1c27c:	80800017 	ldw	r2,0(r16)
   1c280:	00c00044 	movi	r3,1
   1c284:	003fda06 	br	1c1f0 <__alt_data_end+0xfc01c1f0>
   1c288:	800b883a 	mov	r5,r16
   1c28c:	9009883a 	mov	r4,r18
   1c290:	00168500 	call	16850 <_fflush_r>
   1c294:	103fe326 	beq	r2,zero,1c224 <__alt_data_end+0xfc01c224>
   1c298:	00bfffc4 	movi	r2,-1
   1c29c:	003fe206 	br	1c228 <__alt_data_end+0xfc01c228>
   1c2a0:	800b883a 	mov	r5,r16
   1c2a4:	9009883a 	mov	r4,r18
   1c2a8:	0014c300 	call	14c30 <__swsetup_r>
   1c2ac:	103ffa1e 	bne	r2,zero,1c298 <__alt_data_end+0xfc01c298>
   1c2b0:	8100030b 	ldhu	r4,12(r16)
   1c2b4:	80c00417 	ldw	r3,16(r16)
   1c2b8:	003fc506 	br	1c1d0 <__alt_data_end+0xfc01c1d0>
   1c2bc:	0016c3c0 	call	16c3c <__sinit>
   1c2c0:	003fbc06 	br	1c1b4 <__alt_data_end+0xfc01c1b4>

0001c2c4 <__swbuf>:
   1c2c4:	008000f4 	movhi	r2,3
   1c2c8:	10baf204 	addi	r2,r2,-5176
   1c2cc:	280d883a 	mov	r6,r5
   1c2d0:	200b883a 	mov	r5,r4
   1c2d4:	11000017 	ldw	r4,0(r2)
   1c2d8:	001c1841 	jmpi	1c184 <__swbuf_r>

0001c2dc <_write_r>:
   1c2dc:	defffd04 	addi	sp,sp,-12
   1c2e0:	2805883a 	mov	r2,r5
   1c2e4:	dc000015 	stw	r16,0(sp)
   1c2e8:	040000f4 	movhi	r16,3
   1c2ec:	dc400115 	stw	r17,4(sp)
   1c2f0:	300b883a 	mov	r5,r6
   1c2f4:	84078d04 	addi	r16,r16,7732
   1c2f8:	2023883a 	mov	r17,r4
   1c2fc:	380d883a 	mov	r6,r7
   1c300:	1009883a 	mov	r4,r2
   1c304:	dfc00215 	stw	ra,8(sp)
   1c308:	80000015 	stw	zero,0(r16)
   1c30c:	0020a080 	call	20a08 <write>
   1c310:	00ffffc4 	movi	r3,-1
   1c314:	10c00526 	beq	r2,r3,1c32c <_write_r+0x50>
   1c318:	dfc00217 	ldw	ra,8(sp)
   1c31c:	dc400117 	ldw	r17,4(sp)
   1c320:	dc000017 	ldw	r16,0(sp)
   1c324:	dec00304 	addi	sp,sp,12
   1c328:	f800283a 	ret
   1c32c:	80c00017 	ldw	r3,0(r16)
   1c330:	183ff926 	beq	r3,zero,1c318 <__alt_data_end+0xfc01c318>
   1c334:	88c00015 	stw	r3,0(r17)
   1c338:	003ff706 	br	1c318 <__alt_data_end+0xfc01c318>

0001c33c <_close_r>:
   1c33c:	defffd04 	addi	sp,sp,-12
   1c340:	dc000015 	stw	r16,0(sp)
   1c344:	040000f4 	movhi	r16,3
   1c348:	dc400115 	stw	r17,4(sp)
   1c34c:	84078d04 	addi	r16,r16,7732
   1c350:	2023883a 	mov	r17,r4
   1c354:	2809883a 	mov	r4,r5
   1c358:	dfc00215 	stw	ra,8(sp)
   1c35c:	80000015 	stw	zero,0(r16)
   1c360:	001ff0c0 	call	1ff0c <close>
   1c364:	00ffffc4 	movi	r3,-1
   1c368:	10c00526 	beq	r2,r3,1c380 <_close_r+0x44>
   1c36c:	dfc00217 	ldw	ra,8(sp)
   1c370:	dc400117 	ldw	r17,4(sp)
   1c374:	dc000017 	ldw	r16,0(sp)
   1c378:	dec00304 	addi	sp,sp,12
   1c37c:	f800283a 	ret
   1c380:	80c00017 	ldw	r3,0(r16)
   1c384:	183ff926 	beq	r3,zero,1c36c <__alt_data_end+0xfc01c36c>
   1c388:	88c00015 	stw	r3,0(r17)
   1c38c:	003ff706 	br	1c36c <__alt_data_end+0xfc01c36c>

0001c390 <_calloc_r>:
   1c390:	defffe04 	addi	sp,sp,-8
   1c394:	2805883a 	mov	r2,r5
   1c398:	dc000015 	stw	r16,0(sp)
   1c39c:	300b883a 	mov	r5,r6
   1c3a0:	2021883a 	mov	r16,r4
   1c3a4:	1009883a 	mov	r4,r2
   1c3a8:	dfc00115 	stw	ra,4(sp)
   1c3ac:	000d8b80 	call	d8b8 <__mulsi3>
   1c3b0:	100b883a 	mov	r5,r2
   1c3b4:	8009883a 	mov	r4,r16
   1c3b8:	000f44c0 	call	f44c <_malloc_r>
   1c3bc:	10002926 	beq	r2,zero,1c464 <_calloc_r+0xd4>
   1c3c0:	11bfff17 	ldw	r6,-4(r2)
   1c3c4:	1021883a 	mov	r16,r2
   1c3c8:	00bfff04 	movi	r2,-4
   1c3cc:	308c703a 	and	r6,r6,r2
   1c3d0:	00c00904 	movi	r3,36
   1c3d4:	308d883a 	add	r6,r6,r2
   1c3d8:	19801636 	bltu	r3,r6,1c434 <_calloc_r+0xa4>
   1c3dc:	008004c4 	movi	r2,19
   1c3e0:	11800b2e 	bgeu	r2,r6,1c410 <_calloc_r+0x80>
   1c3e4:	80000015 	stw	zero,0(r16)
   1c3e8:	80000115 	stw	zero,4(r16)
   1c3ec:	008006c4 	movi	r2,27
   1c3f0:	11801a2e 	bgeu	r2,r6,1c45c <_calloc_r+0xcc>
   1c3f4:	80000215 	stw	zero,8(r16)
   1c3f8:	80000315 	stw	zero,12(r16)
   1c3fc:	30c0151e 	bne	r6,r3,1c454 <_calloc_r+0xc4>
   1c400:	80000415 	stw	zero,16(r16)
   1c404:	80800604 	addi	r2,r16,24
   1c408:	80000515 	stw	zero,20(r16)
   1c40c:	00000106 	br	1c414 <_calloc_r+0x84>
   1c410:	8005883a 	mov	r2,r16
   1c414:	10000015 	stw	zero,0(r2)
   1c418:	10000115 	stw	zero,4(r2)
   1c41c:	10000215 	stw	zero,8(r2)
   1c420:	8005883a 	mov	r2,r16
   1c424:	dfc00117 	ldw	ra,4(sp)
   1c428:	dc000017 	ldw	r16,0(sp)
   1c42c:	dec00204 	addi	sp,sp,8
   1c430:	f800283a 	ret
   1c434:	000b883a 	mov	r5,zero
   1c438:	8009883a 	mov	r4,r16
   1c43c:	000fda00 	call	fda0 <memset>
   1c440:	8005883a 	mov	r2,r16
   1c444:	dfc00117 	ldw	ra,4(sp)
   1c448:	dc000017 	ldw	r16,0(sp)
   1c44c:	dec00204 	addi	sp,sp,8
   1c450:	f800283a 	ret
   1c454:	80800404 	addi	r2,r16,16
   1c458:	003fee06 	br	1c414 <__alt_data_end+0xfc01c414>
   1c45c:	80800204 	addi	r2,r16,8
   1c460:	003fec06 	br	1c414 <__alt_data_end+0xfc01c414>
   1c464:	0005883a 	mov	r2,zero
   1c468:	003fee06 	br	1c424 <__alt_data_end+0xfc01c424>

0001c46c <_fclose_r>:
   1c46c:	28003926 	beq	r5,zero,1c554 <_fclose_r+0xe8>
   1c470:	defffc04 	addi	sp,sp,-16
   1c474:	dc400115 	stw	r17,4(sp)
   1c478:	dc000015 	stw	r16,0(sp)
   1c47c:	dfc00315 	stw	ra,12(sp)
   1c480:	dc800215 	stw	r18,8(sp)
   1c484:	2023883a 	mov	r17,r4
   1c488:	2821883a 	mov	r16,r5
   1c48c:	20000226 	beq	r4,zero,1c498 <_fclose_r+0x2c>
   1c490:	20800e17 	ldw	r2,56(r4)
   1c494:	10002726 	beq	r2,zero,1c534 <_fclose_r+0xc8>
   1c498:	8080030f 	ldh	r2,12(r16)
   1c49c:	1000071e 	bne	r2,zero,1c4bc <_fclose_r+0x50>
   1c4a0:	0005883a 	mov	r2,zero
   1c4a4:	dfc00317 	ldw	ra,12(sp)
   1c4a8:	dc800217 	ldw	r18,8(sp)
   1c4ac:	dc400117 	ldw	r17,4(sp)
   1c4b0:	dc000017 	ldw	r16,0(sp)
   1c4b4:	dec00404 	addi	sp,sp,16
   1c4b8:	f800283a 	ret
   1c4bc:	800b883a 	mov	r5,r16
   1c4c0:	8809883a 	mov	r4,r17
   1c4c4:	00166340 	call	16634 <__sflush_r>
   1c4c8:	1025883a 	mov	r18,r2
   1c4cc:	80800b17 	ldw	r2,44(r16)
   1c4d0:	10000426 	beq	r2,zero,1c4e4 <_fclose_r+0x78>
   1c4d4:	81400717 	ldw	r5,28(r16)
   1c4d8:	8809883a 	mov	r4,r17
   1c4dc:	103ee83a 	callr	r2
   1c4e0:	10001616 	blt	r2,zero,1c53c <_fclose_r+0xd0>
   1c4e4:	8080030b 	ldhu	r2,12(r16)
   1c4e8:	1080200c 	andi	r2,r2,128
   1c4ec:	1000151e 	bne	r2,zero,1c544 <_fclose_r+0xd8>
   1c4f0:	81400c17 	ldw	r5,48(r16)
   1c4f4:	28000526 	beq	r5,zero,1c50c <_fclose_r+0xa0>
   1c4f8:	80801004 	addi	r2,r16,64
   1c4fc:	28800226 	beq	r5,r2,1c508 <_fclose_r+0x9c>
   1c500:	8809883a 	mov	r4,r17
   1c504:	0016db00 	call	16db0 <_free_r>
   1c508:	80000c15 	stw	zero,48(r16)
   1c50c:	81401117 	ldw	r5,68(r16)
   1c510:	28000326 	beq	r5,zero,1c520 <_fclose_r+0xb4>
   1c514:	8809883a 	mov	r4,r17
   1c518:	0016db00 	call	16db0 <_free_r>
   1c51c:	80001115 	stw	zero,68(r16)
   1c520:	0016c4c0 	call	16c4c <__sfp_lock_acquire>
   1c524:	8000030d 	sth	zero,12(r16)
   1c528:	0016c500 	call	16c50 <__sfp_lock_release>
   1c52c:	9005883a 	mov	r2,r18
   1c530:	003fdc06 	br	1c4a4 <__alt_data_end+0xfc01c4a4>
   1c534:	0016c3c0 	call	16c3c <__sinit>
   1c538:	003fd706 	br	1c498 <__alt_data_end+0xfc01c498>
   1c53c:	04bfffc4 	movi	r18,-1
   1c540:	003fe806 	br	1c4e4 <__alt_data_end+0xfc01c4e4>
   1c544:	81400417 	ldw	r5,16(r16)
   1c548:	8809883a 	mov	r4,r17
   1c54c:	0016db00 	call	16db0 <_free_r>
   1c550:	003fe706 	br	1c4f0 <__alt_data_end+0xfc01c4f0>
   1c554:	0005883a 	mov	r2,zero
   1c558:	f800283a 	ret

0001c55c <fclose>:
   1c55c:	008000f4 	movhi	r2,3
   1c560:	10baf204 	addi	r2,r2,-5176
   1c564:	200b883a 	mov	r5,r4
   1c568:	11000017 	ldw	r4,0(r2)
   1c56c:	001c46c1 	jmpi	1c46c <_fclose_r>

0001c570 <__fputwc>:
   1c570:	defff804 	addi	sp,sp,-32
   1c574:	dcc00415 	stw	r19,16(sp)
   1c578:	dc800315 	stw	r18,12(sp)
   1c57c:	dc000115 	stw	r16,4(sp)
   1c580:	dfc00715 	stw	ra,28(sp)
   1c584:	dd400615 	stw	r21,24(sp)
   1c588:	dd000515 	stw	r20,20(sp)
   1c58c:	dc400215 	stw	r17,8(sp)
   1c590:	2027883a 	mov	r19,r4
   1c594:	2825883a 	mov	r18,r5
   1c598:	3021883a 	mov	r16,r6
   1c59c:	00177980 	call	17798 <__locale_mb_cur_max>
   1c5a0:	00c00044 	movi	r3,1
   1c5a4:	10c03e26 	beq	r2,r3,1c6a0 <__fputwc+0x130>
   1c5a8:	81c01704 	addi	r7,r16,92
   1c5ac:	900d883a 	mov	r6,r18
   1c5b0:	d80b883a 	mov	r5,sp
   1c5b4:	9809883a 	mov	r4,r19
   1c5b8:	001c8e80 	call	1c8e8 <_wcrtomb_r>
   1c5bc:	1029883a 	mov	r20,r2
   1c5c0:	00bfffc4 	movi	r2,-1
   1c5c4:	a0802026 	beq	r20,r2,1c648 <__fputwc+0xd8>
   1c5c8:	d9400003 	ldbu	r5,0(sp)
   1c5cc:	a0001c26 	beq	r20,zero,1c640 <__fputwc+0xd0>
   1c5d0:	0023883a 	mov	r17,zero
   1c5d4:	05400284 	movi	r21,10
   1c5d8:	00000906 	br	1c600 <__fputwc+0x90>
   1c5dc:	80800017 	ldw	r2,0(r16)
   1c5e0:	11400005 	stb	r5,0(r2)
   1c5e4:	80c00017 	ldw	r3,0(r16)
   1c5e8:	18c00044 	addi	r3,r3,1
   1c5ec:	80c00015 	stw	r3,0(r16)
   1c5f0:	8c400044 	addi	r17,r17,1
   1c5f4:	dc45883a 	add	r2,sp,r17
   1c5f8:	8d00112e 	bgeu	r17,r20,1c640 <__fputwc+0xd0>
   1c5fc:	11400003 	ldbu	r5,0(r2)
   1c600:	80c00217 	ldw	r3,8(r16)
   1c604:	18ffffc4 	addi	r3,r3,-1
   1c608:	80c00215 	stw	r3,8(r16)
   1c60c:	183ff30e 	bge	r3,zero,1c5dc <__alt_data_end+0xfc01c5dc>
   1c610:	80800617 	ldw	r2,24(r16)
   1c614:	18801916 	blt	r3,r2,1c67c <__fputwc+0x10c>
   1c618:	80800017 	ldw	r2,0(r16)
   1c61c:	11400005 	stb	r5,0(r2)
   1c620:	80800017 	ldw	r2,0(r16)
   1c624:	10c00003 	ldbu	r3,0(r2)
   1c628:	10800044 	addi	r2,r2,1
   1c62c:	1d402326 	beq	r3,r21,1c6bc <__fputwc+0x14c>
   1c630:	80800015 	stw	r2,0(r16)
   1c634:	8c400044 	addi	r17,r17,1
   1c638:	dc45883a 	add	r2,sp,r17
   1c63c:	8d3fef36 	bltu	r17,r20,1c5fc <__alt_data_end+0xfc01c5fc>
   1c640:	9005883a 	mov	r2,r18
   1c644:	00000406 	br	1c658 <__fputwc+0xe8>
   1c648:	80c0030b 	ldhu	r3,12(r16)
   1c64c:	a005883a 	mov	r2,r20
   1c650:	18c01014 	ori	r3,r3,64
   1c654:	80c0030d 	sth	r3,12(r16)
   1c658:	dfc00717 	ldw	ra,28(sp)
   1c65c:	dd400617 	ldw	r21,24(sp)
   1c660:	dd000517 	ldw	r20,20(sp)
   1c664:	dcc00417 	ldw	r19,16(sp)
   1c668:	dc800317 	ldw	r18,12(sp)
   1c66c:	dc400217 	ldw	r17,8(sp)
   1c670:	dc000117 	ldw	r16,4(sp)
   1c674:	dec00804 	addi	sp,sp,32
   1c678:	f800283a 	ret
   1c67c:	800d883a 	mov	r6,r16
   1c680:	29403fcc 	andi	r5,r5,255
   1c684:	9809883a 	mov	r4,r19
   1c688:	001c1840 	call	1c184 <__swbuf_r>
   1c68c:	10bfffe0 	cmpeqi	r2,r2,-1
   1c690:	10803fcc 	andi	r2,r2,255
   1c694:	103fd626 	beq	r2,zero,1c5f0 <__alt_data_end+0xfc01c5f0>
   1c698:	00bfffc4 	movi	r2,-1
   1c69c:	003fee06 	br	1c658 <__alt_data_end+0xfc01c658>
   1c6a0:	90ffffc4 	addi	r3,r18,-1
   1c6a4:	01003f84 	movi	r4,254
   1c6a8:	20ffbf36 	bltu	r4,r3,1c5a8 <__alt_data_end+0xfc01c5a8>
   1c6ac:	900b883a 	mov	r5,r18
   1c6b0:	dc800005 	stb	r18,0(sp)
   1c6b4:	1029883a 	mov	r20,r2
   1c6b8:	003fc506 	br	1c5d0 <__alt_data_end+0xfc01c5d0>
   1c6bc:	800d883a 	mov	r6,r16
   1c6c0:	a80b883a 	mov	r5,r21
   1c6c4:	9809883a 	mov	r4,r19
   1c6c8:	001c1840 	call	1c184 <__swbuf_r>
   1c6cc:	10bfffe0 	cmpeqi	r2,r2,-1
   1c6d0:	003fef06 	br	1c690 <__alt_data_end+0xfc01c690>

0001c6d4 <_fputwc_r>:
   1c6d4:	3080030b 	ldhu	r2,12(r6)
   1c6d8:	10c8000c 	andi	r3,r2,8192
   1c6dc:	1800051e 	bne	r3,zero,1c6f4 <_fputwc_r+0x20>
   1c6e0:	30c01917 	ldw	r3,100(r6)
   1c6e4:	10880014 	ori	r2,r2,8192
   1c6e8:	3080030d 	sth	r2,12(r6)
   1c6ec:	18880014 	ori	r2,r3,8192
   1c6f0:	30801915 	stw	r2,100(r6)
   1c6f4:	001c5701 	jmpi	1c570 <__fputwc>

0001c6f8 <fputwc>:
   1c6f8:	008000f4 	movhi	r2,3
   1c6fc:	defffc04 	addi	sp,sp,-16
   1c700:	10baf204 	addi	r2,r2,-5176
   1c704:	dc000115 	stw	r16,4(sp)
   1c708:	14000017 	ldw	r16,0(r2)
   1c70c:	dc400215 	stw	r17,8(sp)
   1c710:	dfc00315 	stw	ra,12(sp)
   1c714:	2023883a 	mov	r17,r4
   1c718:	80000226 	beq	r16,zero,1c724 <fputwc+0x2c>
   1c71c:	80800e17 	ldw	r2,56(r16)
   1c720:	10001026 	beq	r2,zero,1c764 <fputwc+0x6c>
   1c724:	2880030b 	ldhu	r2,12(r5)
   1c728:	10c8000c 	andi	r3,r2,8192
   1c72c:	1800051e 	bne	r3,zero,1c744 <fputwc+0x4c>
   1c730:	28c01917 	ldw	r3,100(r5)
   1c734:	10880014 	ori	r2,r2,8192
   1c738:	2880030d 	sth	r2,12(r5)
   1c73c:	18880014 	ori	r2,r3,8192
   1c740:	28801915 	stw	r2,100(r5)
   1c744:	280d883a 	mov	r6,r5
   1c748:	8009883a 	mov	r4,r16
   1c74c:	880b883a 	mov	r5,r17
   1c750:	dfc00317 	ldw	ra,12(sp)
   1c754:	dc400217 	ldw	r17,8(sp)
   1c758:	dc000117 	ldw	r16,4(sp)
   1c75c:	dec00404 	addi	sp,sp,16
   1c760:	001c5701 	jmpi	1c570 <__fputwc>
   1c764:	8009883a 	mov	r4,r16
   1c768:	d9400015 	stw	r5,0(sp)
   1c76c:	0016c3c0 	call	16c3c <__sinit>
   1c770:	d9400017 	ldw	r5,0(sp)
   1c774:	003feb06 	br	1c724 <__alt_data_end+0xfc01c724>

0001c778 <_fstat_r>:
   1c778:	defffd04 	addi	sp,sp,-12
   1c77c:	2805883a 	mov	r2,r5
   1c780:	dc000015 	stw	r16,0(sp)
   1c784:	040000f4 	movhi	r16,3
   1c788:	dc400115 	stw	r17,4(sp)
   1c78c:	84078d04 	addi	r16,r16,7732
   1c790:	2023883a 	mov	r17,r4
   1c794:	300b883a 	mov	r5,r6
   1c798:	1009883a 	mov	r4,r2
   1c79c:	dfc00215 	stw	ra,8(sp)
   1c7a0:	80000015 	stw	zero,0(r16)
   1c7a4:	00200800 	call	20080 <fstat>
   1c7a8:	00ffffc4 	movi	r3,-1
   1c7ac:	10c00526 	beq	r2,r3,1c7c4 <_fstat_r+0x4c>
   1c7b0:	dfc00217 	ldw	ra,8(sp)
   1c7b4:	dc400117 	ldw	r17,4(sp)
   1c7b8:	dc000017 	ldw	r16,0(sp)
   1c7bc:	dec00304 	addi	sp,sp,12
   1c7c0:	f800283a 	ret
   1c7c4:	80c00017 	ldw	r3,0(r16)
   1c7c8:	183ff926 	beq	r3,zero,1c7b0 <__alt_data_end+0xfc01c7b0>
   1c7cc:	88c00015 	stw	r3,0(r17)
   1c7d0:	003ff706 	br	1c7b0 <__alt_data_end+0xfc01c7b0>

0001c7d4 <_isatty_r>:
   1c7d4:	defffd04 	addi	sp,sp,-12
   1c7d8:	dc000015 	stw	r16,0(sp)
   1c7dc:	040000f4 	movhi	r16,3
   1c7e0:	dc400115 	stw	r17,4(sp)
   1c7e4:	84078d04 	addi	r16,r16,7732
   1c7e8:	2023883a 	mov	r17,r4
   1c7ec:	2809883a 	mov	r4,r5
   1c7f0:	dfc00215 	stw	ra,8(sp)
   1c7f4:	80000015 	stw	zero,0(r16)
   1c7f8:	00201940 	call	20194 <isatty>
   1c7fc:	00ffffc4 	movi	r3,-1
   1c800:	10c00526 	beq	r2,r3,1c818 <_isatty_r+0x44>
   1c804:	dfc00217 	ldw	ra,8(sp)
   1c808:	dc400117 	ldw	r17,4(sp)
   1c80c:	dc000017 	ldw	r16,0(sp)
   1c810:	dec00304 	addi	sp,sp,12
   1c814:	f800283a 	ret
   1c818:	80c00017 	ldw	r3,0(r16)
   1c81c:	183ff926 	beq	r3,zero,1c804 <__alt_data_end+0xfc01c804>
   1c820:	88c00015 	stw	r3,0(r17)
   1c824:	003ff706 	br	1c804 <__alt_data_end+0xfc01c804>

0001c828 <_lseek_r>:
   1c828:	defffd04 	addi	sp,sp,-12
   1c82c:	2805883a 	mov	r2,r5
   1c830:	dc000015 	stw	r16,0(sp)
   1c834:	040000f4 	movhi	r16,3
   1c838:	dc400115 	stw	r17,4(sp)
   1c83c:	300b883a 	mov	r5,r6
   1c840:	84078d04 	addi	r16,r16,7732
   1c844:	2023883a 	mov	r17,r4
   1c848:	380d883a 	mov	r6,r7
   1c84c:	1009883a 	mov	r4,r2
   1c850:	dfc00215 	stw	ra,8(sp)
   1c854:	80000015 	stw	zero,0(r16)
   1c858:	00204d40 	call	204d4 <lseek>
   1c85c:	00ffffc4 	movi	r3,-1
   1c860:	10c00526 	beq	r2,r3,1c878 <_lseek_r+0x50>
   1c864:	dfc00217 	ldw	ra,8(sp)
   1c868:	dc400117 	ldw	r17,4(sp)
   1c86c:	dc000017 	ldw	r16,0(sp)
   1c870:	dec00304 	addi	sp,sp,12
   1c874:	f800283a 	ret
   1c878:	80c00017 	ldw	r3,0(r16)
   1c87c:	183ff926 	beq	r3,zero,1c864 <__alt_data_end+0xfc01c864>
   1c880:	88c00015 	stw	r3,0(r17)
   1c884:	003ff706 	br	1c864 <__alt_data_end+0xfc01c864>

0001c888 <_read_r>:
   1c888:	defffd04 	addi	sp,sp,-12
   1c88c:	2805883a 	mov	r2,r5
   1c890:	dc000015 	stw	r16,0(sp)
   1c894:	040000f4 	movhi	r16,3
   1c898:	dc400115 	stw	r17,4(sp)
   1c89c:	300b883a 	mov	r5,r6
   1c8a0:	84078d04 	addi	r16,r16,7732
   1c8a4:	2023883a 	mov	r17,r4
   1c8a8:	380d883a 	mov	r6,r7
   1c8ac:	1009883a 	mov	r4,r2
   1c8b0:	dfc00215 	stw	ra,8(sp)
   1c8b4:	80000015 	stw	zero,0(r16)
   1c8b8:	00206b00 	call	206b0 <read>
   1c8bc:	00ffffc4 	movi	r3,-1
   1c8c0:	10c00526 	beq	r2,r3,1c8d8 <_read_r+0x50>
   1c8c4:	dfc00217 	ldw	ra,8(sp)
   1c8c8:	dc400117 	ldw	r17,4(sp)
   1c8cc:	dc000017 	ldw	r16,0(sp)
   1c8d0:	dec00304 	addi	sp,sp,12
   1c8d4:	f800283a 	ret
   1c8d8:	80c00017 	ldw	r3,0(r16)
   1c8dc:	183ff926 	beq	r3,zero,1c8c4 <__alt_data_end+0xfc01c8c4>
   1c8e0:	88c00015 	stw	r3,0(r17)
   1c8e4:	003ff706 	br	1c8c4 <__alt_data_end+0xfc01c8c4>

0001c8e8 <_wcrtomb_r>:
   1c8e8:	defff604 	addi	sp,sp,-40
   1c8ec:	008000f4 	movhi	r2,3
   1c8f0:	dc800815 	stw	r18,32(sp)
   1c8f4:	dc400715 	stw	r17,28(sp)
   1c8f8:	dc000615 	stw	r16,24(sp)
   1c8fc:	10baf604 	addi	r2,r2,-5160
   1c900:	dfc00915 	stw	ra,36(sp)
   1c904:	2021883a 	mov	r16,r4
   1c908:	3823883a 	mov	r17,r7
   1c90c:	14800017 	ldw	r18,0(r2)
   1c910:	28001426 	beq	r5,zero,1c964 <_wcrtomb_r+0x7c>
   1c914:	d9400415 	stw	r5,16(sp)
   1c918:	d9800515 	stw	r6,20(sp)
   1c91c:	001778c0 	call	1778c <__locale_charset>
   1c920:	d9800517 	ldw	r6,20(sp)
   1c924:	d9400417 	ldw	r5,16(sp)
   1c928:	100f883a 	mov	r7,r2
   1c92c:	dc400015 	stw	r17,0(sp)
   1c930:	8009883a 	mov	r4,r16
   1c934:	903ee83a 	callr	r18
   1c938:	00ffffc4 	movi	r3,-1
   1c93c:	10c0031e 	bne	r2,r3,1c94c <_wcrtomb_r+0x64>
   1c940:	88000015 	stw	zero,0(r17)
   1c944:	00c02284 	movi	r3,138
   1c948:	80c00015 	stw	r3,0(r16)
   1c94c:	dfc00917 	ldw	ra,36(sp)
   1c950:	dc800817 	ldw	r18,32(sp)
   1c954:	dc400717 	ldw	r17,28(sp)
   1c958:	dc000617 	ldw	r16,24(sp)
   1c95c:	dec00a04 	addi	sp,sp,40
   1c960:	f800283a 	ret
   1c964:	001778c0 	call	1778c <__locale_charset>
   1c968:	100f883a 	mov	r7,r2
   1c96c:	dc400015 	stw	r17,0(sp)
   1c970:	000d883a 	mov	r6,zero
   1c974:	d9400104 	addi	r5,sp,4
   1c978:	8009883a 	mov	r4,r16
   1c97c:	903ee83a 	callr	r18
   1c980:	003fed06 	br	1c938 <__alt_data_end+0xfc01c938>

0001c984 <wcrtomb>:
   1c984:	defff604 	addi	sp,sp,-40
   1c988:	008000f4 	movhi	r2,3
   1c98c:	dc800615 	stw	r18,24(sp)
   1c990:	dc400515 	stw	r17,20(sp)
   1c994:	10baf204 	addi	r2,r2,-5176
   1c998:	dfc00915 	stw	ra,36(sp)
   1c99c:	dd000815 	stw	r20,32(sp)
   1c9a0:	dcc00715 	stw	r19,28(sp)
   1c9a4:	dc000415 	stw	r16,16(sp)
   1c9a8:	3025883a 	mov	r18,r6
   1c9ac:	14400017 	ldw	r17,0(r2)
   1c9b0:	20001926 	beq	r4,zero,1ca18 <wcrtomb+0x94>
   1c9b4:	008000f4 	movhi	r2,3
   1c9b8:	10baf604 	addi	r2,r2,-5160
   1c9bc:	15000017 	ldw	r20,0(r2)
   1c9c0:	2021883a 	mov	r16,r4
   1c9c4:	2827883a 	mov	r19,r5
   1c9c8:	001778c0 	call	1778c <__locale_charset>
   1c9cc:	100f883a 	mov	r7,r2
   1c9d0:	dc800015 	stw	r18,0(sp)
   1c9d4:	980d883a 	mov	r6,r19
   1c9d8:	800b883a 	mov	r5,r16
   1c9dc:	8809883a 	mov	r4,r17
   1c9e0:	a03ee83a 	callr	r20
   1c9e4:	00ffffc4 	movi	r3,-1
   1c9e8:	10c0031e 	bne	r2,r3,1c9f8 <wcrtomb+0x74>
   1c9ec:	90000015 	stw	zero,0(r18)
   1c9f0:	00c02284 	movi	r3,138
   1c9f4:	88c00015 	stw	r3,0(r17)
   1c9f8:	dfc00917 	ldw	ra,36(sp)
   1c9fc:	dd000817 	ldw	r20,32(sp)
   1ca00:	dcc00717 	ldw	r19,28(sp)
   1ca04:	dc800617 	ldw	r18,24(sp)
   1ca08:	dc400517 	ldw	r17,20(sp)
   1ca0c:	dc000417 	ldw	r16,16(sp)
   1ca10:	dec00a04 	addi	sp,sp,40
   1ca14:	f800283a 	ret
   1ca18:	008000f4 	movhi	r2,3
   1ca1c:	10baf604 	addi	r2,r2,-5160
   1ca20:	14000017 	ldw	r16,0(r2)
   1ca24:	001778c0 	call	1778c <__locale_charset>
   1ca28:	100f883a 	mov	r7,r2
   1ca2c:	dc800015 	stw	r18,0(sp)
   1ca30:	000d883a 	mov	r6,zero
   1ca34:	d9400104 	addi	r5,sp,4
   1ca38:	8809883a 	mov	r4,r17
   1ca3c:	803ee83a 	callr	r16
   1ca40:	003fe806 	br	1c9e4 <__alt_data_end+0xfc01c9e4>

0001ca44 <__ascii_wctomb>:
   1ca44:	28000526 	beq	r5,zero,1ca5c <__ascii_wctomb+0x18>
   1ca48:	00803fc4 	movi	r2,255
   1ca4c:	11800536 	bltu	r2,r6,1ca64 <__ascii_wctomb+0x20>
   1ca50:	29800005 	stb	r6,0(r5)
   1ca54:	00800044 	movi	r2,1
   1ca58:	f800283a 	ret
   1ca5c:	0005883a 	mov	r2,zero
   1ca60:	f800283a 	ret
   1ca64:	00802284 	movi	r2,138
   1ca68:	20800015 	stw	r2,0(r4)
   1ca6c:	00bfffc4 	movi	r2,-1
   1ca70:	f800283a 	ret

0001ca74 <_wctomb_r>:
   1ca74:	008000f4 	movhi	r2,3
   1ca78:	defff904 	addi	sp,sp,-28
   1ca7c:	10baf604 	addi	r2,r2,-5160
   1ca80:	dfc00615 	stw	ra,24(sp)
   1ca84:	dc400515 	stw	r17,20(sp)
   1ca88:	dc000415 	stw	r16,16(sp)
   1ca8c:	3823883a 	mov	r17,r7
   1ca90:	14000017 	ldw	r16,0(r2)
   1ca94:	d9000115 	stw	r4,4(sp)
   1ca98:	d9400215 	stw	r5,8(sp)
   1ca9c:	d9800315 	stw	r6,12(sp)
   1caa0:	001778c0 	call	1778c <__locale_charset>
   1caa4:	d9800317 	ldw	r6,12(sp)
   1caa8:	d9400217 	ldw	r5,8(sp)
   1caac:	d9000117 	ldw	r4,4(sp)
   1cab0:	100f883a 	mov	r7,r2
   1cab4:	dc400015 	stw	r17,0(sp)
   1cab8:	803ee83a 	callr	r16
   1cabc:	dfc00617 	ldw	ra,24(sp)
   1cac0:	dc400517 	ldw	r17,20(sp)
   1cac4:	dc000417 	ldw	r16,16(sp)
   1cac8:	dec00704 	addi	sp,sp,28
   1cacc:	f800283a 	ret

0001cad0 <__udivdi3>:
   1cad0:	defff404 	addi	sp,sp,-48
   1cad4:	dcc00515 	stw	r19,20(sp)
   1cad8:	dc000215 	stw	r16,8(sp)
   1cadc:	dfc00b15 	stw	ra,44(sp)
   1cae0:	df000a15 	stw	fp,40(sp)
   1cae4:	ddc00915 	stw	r23,36(sp)
   1cae8:	dd800815 	stw	r22,32(sp)
   1caec:	dd400715 	stw	r21,28(sp)
   1caf0:	dd000615 	stw	r20,24(sp)
   1caf4:	dc800415 	stw	r18,16(sp)
   1caf8:	dc400315 	stw	r17,12(sp)
   1cafc:	2027883a 	mov	r19,r4
   1cb00:	2821883a 	mov	r16,r5
   1cb04:	3800461e 	bne	r7,zero,1cc20 <__udivdi3+0x150>
   1cb08:	3023883a 	mov	r17,r6
   1cb0c:	2025883a 	mov	r18,r4
   1cb10:	2980572e 	bgeu	r5,r6,1cc70 <__udivdi3+0x1a0>
   1cb14:	00bfffd4 	movui	r2,65535
   1cb18:	282d883a 	mov	r22,r5
   1cb1c:	1180b236 	bltu	r2,r6,1cde8 <__udivdi3+0x318>
   1cb20:	00803fc4 	movi	r2,255
   1cb24:	1185803a 	cmpltu	r2,r2,r6
   1cb28:	100490fa 	slli	r2,r2,3
   1cb2c:	3086d83a 	srl	r3,r6,r2
   1cb30:	010000f4 	movhi	r4,3
   1cb34:	212dab04 	addi	r4,r4,-18772
   1cb38:	20c7883a 	add	r3,r4,r3
   1cb3c:	18c00003 	ldbu	r3,0(r3)
   1cb40:	1885883a 	add	r2,r3,r2
   1cb44:	00c00804 	movi	r3,32
   1cb48:	1887c83a 	sub	r3,r3,r2
   1cb4c:	18000526 	beq	r3,zero,1cb64 <__udivdi3+0x94>
   1cb50:	80e0983a 	sll	r16,r16,r3
   1cb54:	9884d83a 	srl	r2,r19,r2
   1cb58:	30e2983a 	sll	r17,r6,r3
   1cb5c:	98e4983a 	sll	r18,r19,r3
   1cb60:	142cb03a 	or	r22,r2,r16
   1cb64:	882ad43a 	srli	r21,r17,16
   1cb68:	b009883a 	mov	r4,r22
   1cb6c:	8d3fffcc 	andi	r20,r17,65535
   1cb70:	a80b883a 	mov	r5,r21
   1cb74:	000d8600 	call	d860 <__umodsi3>
   1cb78:	b009883a 	mov	r4,r22
   1cb7c:	a80b883a 	mov	r5,r21
   1cb80:	1027883a 	mov	r19,r2
   1cb84:	000d7fc0 	call	d7fc <__udivsi3>
   1cb88:	100b883a 	mov	r5,r2
   1cb8c:	a009883a 	mov	r4,r20
   1cb90:	102d883a 	mov	r22,r2
   1cb94:	000d8b80 	call	d8b8 <__mulsi3>
   1cb98:	9826943a 	slli	r19,r19,16
   1cb9c:	9006d43a 	srli	r3,r18,16
   1cba0:	1cc6b03a 	or	r3,r3,r19
   1cba4:	1880052e 	bgeu	r3,r2,1cbbc <__udivdi3+0xec>
   1cba8:	1c47883a 	add	r3,r3,r17
   1cbac:	b13fffc4 	addi	r4,r22,-1
   1cbb0:	1c400136 	bltu	r3,r17,1cbb8 <__udivdi3+0xe8>
   1cbb4:	18814236 	bltu	r3,r2,1d0c0 <__udivdi3+0x5f0>
   1cbb8:	202d883a 	mov	r22,r4
   1cbbc:	18a1c83a 	sub	r16,r3,r2
   1cbc0:	8009883a 	mov	r4,r16
   1cbc4:	a80b883a 	mov	r5,r21
   1cbc8:	000d8600 	call	d860 <__umodsi3>
   1cbcc:	1027883a 	mov	r19,r2
   1cbd0:	8009883a 	mov	r4,r16
   1cbd4:	a80b883a 	mov	r5,r21
   1cbd8:	9826943a 	slli	r19,r19,16
   1cbdc:	000d7fc0 	call	d7fc <__udivsi3>
   1cbe0:	100b883a 	mov	r5,r2
   1cbe4:	a009883a 	mov	r4,r20
   1cbe8:	94bfffcc 	andi	r18,r18,65535
   1cbec:	1021883a 	mov	r16,r2
   1cbf0:	94e4b03a 	or	r18,r18,r19
   1cbf4:	000d8b80 	call	d8b8 <__mulsi3>
   1cbf8:	9080052e 	bgeu	r18,r2,1cc10 <__udivdi3+0x140>
   1cbfc:	8ca5883a 	add	r18,r17,r18
   1cc00:	80ffffc4 	addi	r3,r16,-1
   1cc04:	94410c36 	bltu	r18,r17,1d038 <__udivdi3+0x568>
   1cc08:	90810b2e 	bgeu	r18,r2,1d038 <__udivdi3+0x568>
   1cc0c:	843fff84 	addi	r16,r16,-2
   1cc10:	b004943a 	slli	r2,r22,16
   1cc14:	0007883a 	mov	r3,zero
   1cc18:	1404b03a 	or	r2,r2,r16
   1cc1c:	00005e06 	br	1cd98 <__udivdi3+0x2c8>
   1cc20:	29c05b36 	bltu	r5,r7,1cd90 <__udivdi3+0x2c0>
   1cc24:	00bfffd4 	movui	r2,65535
   1cc28:	11c0672e 	bgeu	r2,r7,1cdc8 <__udivdi3+0x2f8>
   1cc2c:	00804034 	movhi	r2,256
   1cc30:	10bfffc4 	addi	r2,r2,-1
   1cc34:	11c10a36 	bltu	r2,r7,1d060 <__udivdi3+0x590>
   1cc38:	00800404 	movi	r2,16
   1cc3c:	3886d83a 	srl	r3,r7,r2
   1cc40:	010000f4 	movhi	r4,3
   1cc44:	212dab04 	addi	r4,r4,-18772
   1cc48:	20c7883a 	add	r3,r4,r3
   1cc4c:	18c00003 	ldbu	r3,0(r3)
   1cc50:	05c00804 	movi	r23,32
   1cc54:	1885883a 	add	r2,r3,r2
   1cc58:	b8afc83a 	sub	r23,r23,r2
   1cc5c:	b800671e 	bne	r23,zero,1cdfc <__udivdi3+0x32c>
   1cc60:	3c010536 	bltu	r7,r16,1d078 <__udivdi3+0x5a8>
   1cc64:	9985403a 	cmpgeu	r2,r19,r6
   1cc68:	0007883a 	mov	r3,zero
   1cc6c:	00004a06 	br	1cd98 <__udivdi3+0x2c8>
   1cc70:	3000041e 	bne	r6,zero,1cc84 <__udivdi3+0x1b4>
   1cc74:	000b883a 	mov	r5,zero
   1cc78:	01000044 	movi	r4,1
   1cc7c:	000d7fc0 	call	d7fc <__udivsi3>
   1cc80:	1023883a 	mov	r17,r2
   1cc84:	00bfffd4 	movui	r2,65535
   1cc88:	1440532e 	bgeu	r2,r17,1cdd8 <__udivdi3+0x308>
   1cc8c:	00804034 	movhi	r2,256
   1cc90:	10bfffc4 	addi	r2,r2,-1
   1cc94:	1440f436 	bltu	r2,r17,1d068 <__udivdi3+0x598>
   1cc98:	00800404 	movi	r2,16
   1cc9c:	8886d83a 	srl	r3,r17,r2
   1cca0:	010000f4 	movhi	r4,3
   1cca4:	212dab04 	addi	r4,r4,-18772
   1cca8:	20c7883a 	add	r3,r4,r3
   1ccac:	18c00003 	ldbu	r3,0(r3)
   1ccb0:	1885883a 	add	r2,r3,r2
   1ccb4:	00c00804 	movi	r3,32
   1ccb8:	1887c83a 	sub	r3,r3,r2
   1ccbc:	1800a51e 	bne	r3,zero,1cf54 <__udivdi3+0x484>
   1ccc0:	882ad43a 	srli	r21,r17,16
   1ccc4:	8461c83a 	sub	r16,r16,r17
   1ccc8:	8d3fffcc 	andi	r20,r17,65535
   1cccc:	00c00044 	movi	r3,1
   1ccd0:	a80b883a 	mov	r5,r21
   1ccd4:	8009883a 	mov	r4,r16
   1ccd8:	d8c00115 	stw	r3,4(sp)
   1ccdc:	000d8600 	call	d860 <__umodsi3>
   1cce0:	a80b883a 	mov	r5,r21
   1cce4:	8009883a 	mov	r4,r16
   1cce8:	1027883a 	mov	r19,r2
   1ccec:	000d7fc0 	call	d7fc <__udivsi3>
   1ccf0:	a00b883a 	mov	r5,r20
   1ccf4:	1009883a 	mov	r4,r2
   1ccf8:	102d883a 	mov	r22,r2
   1ccfc:	000d8b80 	call	d8b8 <__mulsi3>
   1cd00:	9826943a 	slli	r19,r19,16
   1cd04:	900ed43a 	srli	r7,r18,16
   1cd08:	d8c00117 	ldw	r3,4(sp)
   1cd0c:	3cceb03a 	or	r7,r7,r19
   1cd10:	3880052e 	bgeu	r7,r2,1cd28 <__udivdi3+0x258>
   1cd14:	3c4f883a 	add	r7,r7,r17
   1cd18:	b13fffc4 	addi	r4,r22,-1
   1cd1c:	3c400136 	bltu	r7,r17,1cd24 <__udivdi3+0x254>
   1cd20:	3880e436 	bltu	r7,r2,1d0b4 <__udivdi3+0x5e4>
   1cd24:	202d883a 	mov	r22,r4
   1cd28:	38a1c83a 	sub	r16,r7,r2
   1cd2c:	8009883a 	mov	r4,r16
   1cd30:	a80b883a 	mov	r5,r21
   1cd34:	d8c00115 	stw	r3,4(sp)
   1cd38:	000d8600 	call	d860 <__umodsi3>
   1cd3c:	1027883a 	mov	r19,r2
   1cd40:	8009883a 	mov	r4,r16
   1cd44:	a80b883a 	mov	r5,r21
   1cd48:	9826943a 	slli	r19,r19,16
   1cd4c:	000d7fc0 	call	d7fc <__udivsi3>
   1cd50:	a00b883a 	mov	r5,r20
   1cd54:	1009883a 	mov	r4,r2
   1cd58:	94bfffcc 	andi	r18,r18,65535
   1cd5c:	1021883a 	mov	r16,r2
   1cd60:	94e4b03a 	or	r18,r18,r19
   1cd64:	000d8b80 	call	d8b8 <__mulsi3>
   1cd68:	d8c00117 	ldw	r3,4(sp)
   1cd6c:	9080052e 	bgeu	r18,r2,1cd84 <__udivdi3+0x2b4>
   1cd70:	8ca5883a 	add	r18,r17,r18
   1cd74:	813fffc4 	addi	r4,r16,-1
   1cd78:	9440ad36 	bltu	r18,r17,1d030 <__udivdi3+0x560>
   1cd7c:	9080ac2e 	bgeu	r18,r2,1d030 <__udivdi3+0x560>
   1cd80:	843fff84 	addi	r16,r16,-2
   1cd84:	b004943a 	slli	r2,r22,16
   1cd88:	1404b03a 	or	r2,r2,r16
   1cd8c:	00000206 	br	1cd98 <__udivdi3+0x2c8>
   1cd90:	0007883a 	mov	r3,zero
   1cd94:	0005883a 	mov	r2,zero
   1cd98:	dfc00b17 	ldw	ra,44(sp)
   1cd9c:	df000a17 	ldw	fp,40(sp)
   1cda0:	ddc00917 	ldw	r23,36(sp)
   1cda4:	dd800817 	ldw	r22,32(sp)
   1cda8:	dd400717 	ldw	r21,28(sp)
   1cdac:	dd000617 	ldw	r20,24(sp)
   1cdb0:	dcc00517 	ldw	r19,20(sp)
   1cdb4:	dc800417 	ldw	r18,16(sp)
   1cdb8:	dc400317 	ldw	r17,12(sp)
   1cdbc:	dc000217 	ldw	r16,8(sp)
   1cdc0:	dec00c04 	addi	sp,sp,48
   1cdc4:	f800283a 	ret
   1cdc8:	00803fc4 	movi	r2,255
   1cdcc:	11c5803a 	cmpltu	r2,r2,r7
   1cdd0:	100490fa 	slli	r2,r2,3
   1cdd4:	003f9906 	br	1cc3c <__alt_data_end+0xfc01cc3c>
   1cdd8:	00803fc4 	movi	r2,255
   1cddc:	1445803a 	cmpltu	r2,r2,r17
   1cde0:	100490fa 	slli	r2,r2,3
   1cde4:	003fad06 	br	1cc9c <__alt_data_end+0xfc01cc9c>
   1cde8:	00804034 	movhi	r2,256
   1cdec:	10bfffc4 	addi	r2,r2,-1
   1cdf0:	11809f36 	bltu	r2,r6,1d070 <__udivdi3+0x5a0>
   1cdf4:	00800404 	movi	r2,16
   1cdf8:	003f4c06 	br	1cb2c <__alt_data_end+0xfc01cb2c>
   1cdfc:	3dce983a 	sll	r7,r7,r23
   1ce00:	30b8d83a 	srl	fp,r6,r2
   1ce04:	80a2d83a 	srl	r17,r16,r2
   1ce08:	35cc983a 	sll	r6,r6,r23
   1ce0c:	3f38b03a 	or	fp,r7,fp
   1ce10:	e024d43a 	srli	r18,fp,16
   1ce14:	9884d83a 	srl	r2,r19,r2
   1ce18:	85e0983a 	sll	r16,r16,r23
   1ce1c:	8809883a 	mov	r4,r17
   1ce20:	900b883a 	mov	r5,r18
   1ce24:	d9800015 	stw	r6,0(sp)
   1ce28:	1420b03a 	or	r16,r2,r16
   1ce2c:	000d8600 	call	d860 <__umodsi3>
   1ce30:	900b883a 	mov	r5,r18
   1ce34:	8809883a 	mov	r4,r17
   1ce38:	1029883a 	mov	r20,r2
   1ce3c:	e5bfffcc 	andi	r22,fp,65535
   1ce40:	000d7fc0 	call	d7fc <__udivsi3>
   1ce44:	100b883a 	mov	r5,r2
   1ce48:	b009883a 	mov	r4,r22
   1ce4c:	102b883a 	mov	r21,r2
   1ce50:	000d8b80 	call	d8b8 <__mulsi3>
   1ce54:	a028943a 	slli	r20,r20,16
   1ce58:	8006d43a 	srli	r3,r16,16
   1ce5c:	1d06b03a 	or	r3,r3,r20
   1ce60:	1880042e 	bgeu	r3,r2,1ce74 <__udivdi3+0x3a4>
   1ce64:	1f07883a 	add	r3,r3,fp
   1ce68:	a93fffc4 	addi	r4,r21,-1
   1ce6c:	1f00892e 	bgeu	r3,fp,1d094 <__udivdi3+0x5c4>
   1ce70:	202b883a 	mov	r21,r4
   1ce74:	18a3c83a 	sub	r17,r3,r2
   1ce78:	8809883a 	mov	r4,r17
   1ce7c:	900b883a 	mov	r5,r18
   1ce80:	000d8600 	call	d860 <__umodsi3>
   1ce84:	1029883a 	mov	r20,r2
   1ce88:	8809883a 	mov	r4,r17
   1ce8c:	900b883a 	mov	r5,r18
   1ce90:	a028943a 	slli	r20,r20,16
   1ce94:	000d7fc0 	call	d7fc <__udivsi3>
   1ce98:	100b883a 	mov	r5,r2
   1ce9c:	b009883a 	mov	r4,r22
   1cea0:	843fffcc 	andi	r16,r16,65535
   1cea4:	1023883a 	mov	r17,r2
   1cea8:	8520b03a 	or	r16,r16,r20
   1ceac:	000d8b80 	call	d8b8 <__mulsi3>
   1ceb0:	8080042e 	bgeu	r16,r2,1cec4 <__udivdi3+0x3f4>
   1ceb4:	8721883a 	add	r16,r16,fp
   1ceb8:	88ffffc4 	addi	r3,r17,-1
   1cebc:	8700712e 	bgeu	r16,fp,1d084 <__udivdi3+0x5b4>
   1cec0:	1823883a 	mov	r17,r3
   1cec4:	a80e943a 	slli	r7,r21,16
   1cec8:	d8c00017 	ldw	r3,0(sp)
   1cecc:	80a1c83a 	sub	r16,r16,r2
   1ced0:	3c64b03a 	or	r18,r7,r17
   1ced4:	1d3fffcc 	andi	r20,r3,65535
   1ced8:	9022d43a 	srli	r17,r18,16
   1cedc:	95bfffcc 	andi	r22,r18,65535
   1cee0:	a00b883a 	mov	r5,r20
   1cee4:	b009883a 	mov	r4,r22
   1cee8:	182ad43a 	srli	r21,r3,16
   1ceec:	000d8b80 	call	d8b8 <__mulsi3>
   1cef0:	a00b883a 	mov	r5,r20
   1cef4:	8809883a 	mov	r4,r17
   1cef8:	1039883a 	mov	fp,r2
   1cefc:	000d8b80 	call	d8b8 <__mulsi3>
   1cf00:	8809883a 	mov	r4,r17
   1cf04:	a80b883a 	mov	r5,r21
   1cf08:	1029883a 	mov	r20,r2
   1cf0c:	000d8b80 	call	d8b8 <__mulsi3>
   1cf10:	a80b883a 	mov	r5,r21
   1cf14:	b009883a 	mov	r4,r22
   1cf18:	1023883a 	mov	r17,r2
   1cf1c:	000d8b80 	call	d8b8 <__mulsi3>
   1cf20:	e006d43a 	srli	r3,fp,16
   1cf24:	1505883a 	add	r2,r2,r20
   1cf28:	1887883a 	add	r3,r3,r2
   1cf2c:	1d00022e 	bgeu	r3,r20,1cf38 <__udivdi3+0x468>
   1cf30:	00800074 	movhi	r2,1
   1cf34:	88a3883a 	add	r17,r17,r2
   1cf38:	1804d43a 	srli	r2,r3,16
   1cf3c:	1463883a 	add	r17,r2,r17
   1cf40:	84404436 	bltu	r16,r17,1d054 <__udivdi3+0x584>
   1cf44:	84403e26 	beq	r16,r17,1d040 <__udivdi3+0x570>
   1cf48:	9005883a 	mov	r2,r18
   1cf4c:	0007883a 	mov	r3,zero
   1cf50:	003f9106 	br	1cd98 <__alt_data_end+0xfc01cd98>
   1cf54:	88e2983a 	sll	r17,r17,r3
   1cf58:	80aed83a 	srl	r23,r16,r2
   1cf5c:	80e0983a 	sll	r16,r16,r3
   1cf60:	882ad43a 	srli	r21,r17,16
   1cf64:	9884d83a 	srl	r2,r19,r2
   1cf68:	b809883a 	mov	r4,r23
   1cf6c:	a80b883a 	mov	r5,r21
   1cf70:	98e4983a 	sll	r18,r19,r3
   1cf74:	142cb03a 	or	r22,r2,r16
   1cf78:	000d8600 	call	d860 <__umodsi3>
   1cf7c:	b809883a 	mov	r4,r23
   1cf80:	a80b883a 	mov	r5,r21
   1cf84:	1027883a 	mov	r19,r2
   1cf88:	8d3fffcc 	andi	r20,r17,65535
   1cf8c:	000d7fc0 	call	d7fc <__udivsi3>
   1cf90:	a009883a 	mov	r4,r20
   1cf94:	100b883a 	mov	r5,r2
   1cf98:	102f883a 	mov	r23,r2
   1cf9c:	000d8b80 	call	d8b8 <__mulsi3>
   1cfa0:	9826943a 	slli	r19,r19,16
   1cfa4:	b008d43a 	srli	r4,r22,16
   1cfa8:	24c8b03a 	or	r4,r4,r19
   1cfac:	2080062e 	bgeu	r4,r2,1cfc8 <__udivdi3+0x4f8>
   1cfb0:	2449883a 	add	r4,r4,r17
   1cfb4:	b8ffffc4 	addi	r3,r23,-1
   1cfb8:	24403c36 	bltu	r4,r17,1d0ac <__udivdi3+0x5dc>
   1cfbc:	20803b2e 	bgeu	r4,r2,1d0ac <__udivdi3+0x5dc>
   1cfc0:	bdffff84 	addi	r23,r23,-2
   1cfc4:	2449883a 	add	r4,r4,r17
   1cfc8:	20a1c83a 	sub	r16,r4,r2
   1cfcc:	a80b883a 	mov	r5,r21
   1cfd0:	8009883a 	mov	r4,r16
   1cfd4:	000d8600 	call	d860 <__umodsi3>
   1cfd8:	a80b883a 	mov	r5,r21
   1cfdc:	8009883a 	mov	r4,r16
   1cfe0:	1027883a 	mov	r19,r2
   1cfe4:	000d7fc0 	call	d7fc <__udivsi3>
   1cfe8:	a009883a 	mov	r4,r20
   1cfec:	100b883a 	mov	r5,r2
   1cff0:	9826943a 	slli	r19,r19,16
   1cff4:	1039883a 	mov	fp,r2
   1cff8:	000d8b80 	call	d8b8 <__mulsi3>
   1cffc:	b13fffcc 	andi	r4,r22,65535
   1d000:	24c8b03a 	or	r4,r4,r19
   1d004:	2080062e 	bgeu	r4,r2,1d020 <__udivdi3+0x550>
   1d008:	2449883a 	add	r4,r4,r17
   1d00c:	e0ffffc4 	addi	r3,fp,-1
   1d010:	24402436 	bltu	r4,r17,1d0a4 <__udivdi3+0x5d4>
   1d014:	2080232e 	bgeu	r4,r2,1d0a4 <__udivdi3+0x5d4>
   1d018:	e73fff84 	addi	fp,fp,-2
   1d01c:	2449883a 	add	r4,r4,r17
   1d020:	b82e943a 	slli	r23,r23,16
   1d024:	20a1c83a 	sub	r16,r4,r2
   1d028:	bf06b03a 	or	r3,r23,fp
   1d02c:	003f2806 	br	1ccd0 <__alt_data_end+0xfc01ccd0>
   1d030:	2021883a 	mov	r16,r4
   1d034:	003f5306 	br	1cd84 <__alt_data_end+0xfc01cd84>
   1d038:	1821883a 	mov	r16,r3
   1d03c:	003ef406 	br	1cc10 <__alt_data_end+0xfc01cc10>
   1d040:	1806943a 	slli	r3,r3,16
   1d044:	9de6983a 	sll	r19,r19,r23
   1d048:	e73fffcc 	andi	fp,fp,65535
   1d04c:	1f07883a 	add	r3,r3,fp
   1d050:	98ffbd2e 	bgeu	r19,r3,1cf48 <__alt_data_end+0xfc01cf48>
   1d054:	90bfffc4 	addi	r2,r18,-1
   1d058:	0007883a 	mov	r3,zero
   1d05c:	003f4e06 	br	1cd98 <__alt_data_end+0xfc01cd98>
   1d060:	00800604 	movi	r2,24
   1d064:	003ef506 	br	1cc3c <__alt_data_end+0xfc01cc3c>
   1d068:	00800604 	movi	r2,24
   1d06c:	003f0b06 	br	1cc9c <__alt_data_end+0xfc01cc9c>
   1d070:	00800604 	movi	r2,24
   1d074:	003ead06 	br	1cb2c <__alt_data_end+0xfc01cb2c>
   1d078:	0007883a 	mov	r3,zero
   1d07c:	00800044 	movi	r2,1
   1d080:	003f4506 	br	1cd98 <__alt_data_end+0xfc01cd98>
   1d084:	80bf8e2e 	bgeu	r16,r2,1cec0 <__alt_data_end+0xfc01cec0>
   1d088:	8c7fff84 	addi	r17,r17,-2
   1d08c:	8721883a 	add	r16,r16,fp
   1d090:	003f8c06 	br	1cec4 <__alt_data_end+0xfc01cec4>
   1d094:	18bf762e 	bgeu	r3,r2,1ce70 <__alt_data_end+0xfc01ce70>
   1d098:	ad7fff84 	addi	r21,r21,-2
   1d09c:	1f07883a 	add	r3,r3,fp
   1d0a0:	003f7406 	br	1ce74 <__alt_data_end+0xfc01ce74>
   1d0a4:	1839883a 	mov	fp,r3
   1d0a8:	003fdd06 	br	1d020 <__alt_data_end+0xfc01d020>
   1d0ac:	182f883a 	mov	r23,r3
   1d0b0:	003fc506 	br	1cfc8 <__alt_data_end+0xfc01cfc8>
   1d0b4:	b5bfff84 	addi	r22,r22,-2
   1d0b8:	3c4f883a 	add	r7,r7,r17
   1d0bc:	003f1a06 	br	1cd28 <__alt_data_end+0xfc01cd28>
   1d0c0:	b5bfff84 	addi	r22,r22,-2
   1d0c4:	1c47883a 	add	r3,r3,r17
   1d0c8:	003ebc06 	br	1cbbc <__alt_data_end+0xfc01cbbc>

0001d0cc <__umoddi3>:
   1d0cc:	defff304 	addi	sp,sp,-52
   1d0d0:	df000b15 	stw	fp,44(sp)
   1d0d4:	dc400415 	stw	r17,16(sp)
   1d0d8:	dc000315 	stw	r16,12(sp)
   1d0dc:	dfc00c15 	stw	ra,48(sp)
   1d0e0:	ddc00a15 	stw	r23,40(sp)
   1d0e4:	dd800915 	stw	r22,36(sp)
   1d0e8:	dd400815 	stw	r21,32(sp)
   1d0ec:	dd000715 	stw	r20,28(sp)
   1d0f0:	dcc00615 	stw	r19,24(sp)
   1d0f4:	dc800515 	stw	r18,20(sp)
   1d0f8:	2021883a 	mov	r16,r4
   1d0fc:	2823883a 	mov	r17,r5
   1d100:	2839883a 	mov	fp,r5
   1d104:	3800401e 	bne	r7,zero,1d208 <__umoddi3+0x13c>
   1d108:	3027883a 	mov	r19,r6
   1d10c:	2029883a 	mov	r20,r4
   1d110:	2980552e 	bgeu	r5,r6,1d268 <__umoddi3+0x19c>
   1d114:	00bfffd4 	movui	r2,65535
   1d118:	1180a236 	bltu	r2,r6,1d3a4 <__umoddi3+0x2d8>
   1d11c:	01003fc4 	movi	r4,255
   1d120:	2189803a 	cmpltu	r4,r4,r6
   1d124:	200890fa 	slli	r4,r4,3
   1d128:	3104d83a 	srl	r2,r6,r4
   1d12c:	00c000f4 	movhi	r3,3
   1d130:	18edab04 	addi	r3,r3,-18772
   1d134:	1885883a 	add	r2,r3,r2
   1d138:	10c00003 	ldbu	r3,0(r2)
   1d13c:	00800804 	movi	r2,32
   1d140:	1909883a 	add	r4,r3,r4
   1d144:	1125c83a 	sub	r18,r2,r4
   1d148:	90000526 	beq	r18,zero,1d160 <__umoddi3+0x94>
   1d14c:	8ca2983a 	sll	r17,r17,r18
   1d150:	8108d83a 	srl	r4,r16,r4
   1d154:	34a6983a 	sll	r19,r6,r18
   1d158:	84a8983a 	sll	r20,r16,r18
   1d15c:	2478b03a 	or	fp,r4,r17
   1d160:	982cd43a 	srli	r22,r19,16
   1d164:	e009883a 	mov	r4,fp
   1d168:	9dffffcc 	andi	r23,r19,65535
   1d16c:	b00b883a 	mov	r5,r22
   1d170:	000d8600 	call	d860 <__umodsi3>
   1d174:	b00b883a 	mov	r5,r22
   1d178:	e009883a 	mov	r4,fp
   1d17c:	102b883a 	mov	r21,r2
   1d180:	000d7fc0 	call	d7fc <__udivsi3>
   1d184:	100b883a 	mov	r5,r2
   1d188:	b809883a 	mov	r4,r23
   1d18c:	000d8b80 	call	d8b8 <__mulsi3>
   1d190:	a82a943a 	slli	r21,r21,16
   1d194:	a006d43a 	srli	r3,r20,16
   1d198:	1d46b03a 	or	r3,r3,r21
   1d19c:	1880032e 	bgeu	r3,r2,1d1ac <__umoddi3+0xe0>
   1d1a0:	1cc7883a 	add	r3,r3,r19
   1d1a4:	1cc00136 	bltu	r3,r19,1d1ac <__umoddi3+0xe0>
   1d1a8:	18813136 	bltu	r3,r2,1d670 <__umoddi3+0x5a4>
   1d1ac:	18a1c83a 	sub	r16,r3,r2
   1d1b0:	b00b883a 	mov	r5,r22
   1d1b4:	8009883a 	mov	r4,r16
   1d1b8:	000d8600 	call	d860 <__umodsi3>
   1d1bc:	b00b883a 	mov	r5,r22
   1d1c0:	8009883a 	mov	r4,r16
   1d1c4:	1023883a 	mov	r17,r2
   1d1c8:	000d7fc0 	call	d7fc <__udivsi3>
   1d1cc:	100b883a 	mov	r5,r2
   1d1d0:	b809883a 	mov	r4,r23
   1d1d4:	8822943a 	slli	r17,r17,16
   1d1d8:	000d8b80 	call	d8b8 <__mulsi3>
   1d1dc:	a0ffffcc 	andi	r3,r20,65535
   1d1e0:	1c46b03a 	or	r3,r3,r17
   1d1e4:	1880042e 	bgeu	r3,r2,1d1f8 <__umoddi3+0x12c>
   1d1e8:	1cc7883a 	add	r3,r3,r19
   1d1ec:	1cc00236 	bltu	r3,r19,1d1f8 <__umoddi3+0x12c>
   1d1f0:	1880012e 	bgeu	r3,r2,1d1f8 <__umoddi3+0x12c>
   1d1f4:	1cc7883a 	add	r3,r3,r19
   1d1f8:	1885c83a 	sub	r2,r3,r2
   1d1fc:	1484d83a 	srl	r2,r2,r18
   1d200:	0007883a 	mov	r3,zero
   1d204:	00005306 	br	1d354 <__umoddi3+0x288>
   1d208:	29c05036 	bltu	r5,r7,1d34c <__umoddi3+0x280>
   1d20c:	00bfffd4 	movui	r2,65535
   1d210:	11c05c2e 	bgeu	r2,r7,1d384 <__umoddi3+0x2b8>
   1d214:	00804034 	movhi	r2,256
   1d218:	10bfffc4 	addi	r2,r2,-1
   1d21c:	11c10636 	bltu	r2,r7,1d638 <__umoddi3+0x56c>
   1d220:	01000404 	movi	r4,16
   1d224:	3904d83a 	srl	r2,r7,r4
   1d228:	00c000f4 	movhi	r3,3
   1d22c:	18edab04 	addi	r3,r3,-18772
   1d230:	1885883a 	add	r2,r3,r2
   1d234:	14c00003 	ldbu	r19,0(r2)
   1d238:	00c00804 	movi	r3,32
   1d23c:	9927883a 	add	r19,r19,r4
   1d240:	1ce9c83a 	sub	r20,r3,r19
   1d244:	a0005c1e 	bne	r20,zero,1d3b8 <__umoddi3+0x2ec>
   1d248:	3c400136 	bltu	r7,r17,1d250 <__umoddi3+0x184>
   1d24c:	81810a36 	bltu	r16,r6,1d678 <__umoddi3+0x5ac>
   1d250:	8185c83a 	sub	r2,r16,r6
   1d254:	89e3c83a 	sub	r17,r17,r7
   1d258:	8089803a 	cmpltu	r4,r16,r2
   1d25c:	8939c83a 	sub	fp,r17,r4
   1d260:	e007883a 	mov	r3,fp
   1d264:	00003b06 	br	1d354 <__umoddi3+0x288>
   1d268:	3000041e 	bne	r6,zero,1d27c <__umoddi3+0x1b0>
   1d26c:	000b883a 	mov	r5,zero
   1d270:	01000044 	movi	r4,1
   1d274:	000d7fc0 	call	d7fc <__udivsi3>
   1d278:	1027883a 	mov	r19,r2
   1d27c:	00bfffd4 	movui	r2,65535
   1d280:	14c0442e 	bgeu	r2,r19,1d394 <__umoddi3+0x2c8>
   1d284:	00804034 	movhi	r2,256
   1d288:	10bfffc4 	addi	r2,r2,-1
   1d28c:	14c0ec36 	bltu	r2,r19,1d640 <__umoddi3+0x574>
   1d290:	00800404 	movi	r2,16
   1d294:	9886d83a 	srl	r3,r19,r2
   1d298:	010000f4 	movhi	r4,3
   1d29c:	212dab04 	addi	r4,r4,-18772
   1d2a0:	20c7883a 	add	r3,r4,r3
   1d2a4:	18c00003 	ldbu	r3,0(r3)
   1d2a8:	1887883a 	add	r3,r3,r2
   1d2ac:	00800804 	movi	r2,32
   1d2b0:	10e5c83a 	sub	r18,r2,r3
   1d2b4:	9000ab1e 	bne	r18,zero,1d564 <__umoddi3+0x498>
   1d2b8:	982cd43a 	srli	r22,r19,16
   1d2bc:	8ce3c83a 	sub	r17,r17,r19
   1d2c0:	9dffffcc 	andi	r23,r19,65535
   1d2c4:	b00b883a 	mov	r5,r22
   1d2c8:	8809883a 	mov	r4,r17
   1d2cc:	000d8600 	call	d860 <__umodsi3>
   1d2d0:	b00b883a 	mov	r5,r22
   1d2d4:	8809883a 	mov	r4,r17
   1d2d8:	102b883a 	mov	r21,r2
   1d2dc:	000d7fc0 	call	d7fc <__udivsi3>
   1d2e0:	b80b883a 	mov	r5,r23
   1d2e4:	1009883a 	mov	r4,r2
   1d2e8:	000d8b80 	call	d8b8 <__mulsi3>
   1d2ec:	a82a943a 	slli	r21,r21,16
   1d2f0:	a006d43a 	srli	r3,r20,16
   1d2f4:	1d46b03a 	or	r3,r3,r21
   1d2f8:	1880042e 	bgeu	r3,r2,1d30c <__umoddi3+0x240>
   1d2fc:	1cc7883a 	add	r3,r3,r19
   1d300:	1cc00236 	bltu	r3,r19,1d30c <__umoddi3+0x240>
   1d304:	1880012e 	bgeu	r3,r2,1d30c <__umoddi3+0x240>
   1d308:	1cc7883a 	add	r3,r3,r19
   1d30c:	18a1c83a 	sub	r16,r3,r2
   1d310:	b00b883a 	mov	r5,r22
   1d314:	8009883a 	mov	r4,r16
   1d318:	000d8600 	call	d860 <__umodsi3>
   1d31c:	1023883a 	mov	r17,r2
   1d320:	b00b883a 	mov	r5,r22
   1d324:	8009883a 	mov	r4,r16
   1d328:	000d7fc0 	call	d7fc <__udivsi3>
   1d32c:	8822943a 	slli	r17,r17,16
   1d330:	b80b883a 	mov	r5,r23
   1d334:	1009883a 	mov	r4,r2
   1d338:	000d8b80 	call	d8b8 <__mulsi3>
   1d33c:	a53fffcc 	andi	r20,r20,65535
   1d340:	a446b03a 	or	r3,r20,r17
   1d344:	18bfac2e 	bgeu	r3,r2,1d1f8 <__alt_data_end+0xfc01d1f8>
   1d348:	003fa706 	br	1d1e8 <__alt_data_end+0xfc01d1e8>
   1d34c:	2005883a 	mov	r2,r4
   1d350:	2807883a 	mov	r3,r5
   1d354:	dfc00c17 	ldw	ra,48(sp)
   1d358:	df000b17 	ldw	fp,44(sp)
   1d35c:	ddc00a17 	ldw	r23,40(sp)
   1d360:	dd800917 	ldw	r22,36(sp)
   1d364:	dd400817 	ldw	r21,32(sp)
   1d368:	dd000717 	ldw	r20,28(sp)
   1d36c:	dcc00617 	ldw	r19,24(sp)
   1d370:	dc800517 	ldw	r18,20(sp)
   1d374:	dc400417 	ldw	r17,16(sp)
   1d378:	dc000317 	ldw	r16,12(sp)
   1d37c:	dec00d04 	addi	sp,sp,52
   1d380:	f800283a 	ret
   1d384:	04c03fc4 	movi	r19,255
   1d388:	99c9803a 	cmpltu	r4,r19,r7
   1d38c:	200890fa 	slli	r4,r4,3
   1d390:	003fa406 	br	1d224 <__alt_data_end+0xfc01d224>
   1d394:	00803fc4 	movi	r2,255
   1d398:	14c5803a 	cmpltu	r2,r2,r19
   1d39c:	100490fa 	slli	r2,r2,3
   1d3a0:	003fbc06 	br	1d294 <__alt_data_end+0xfc01d294>
   1d3a4:	00804034 	movhi	r2,256
   1d3a8:	10bfffc4 	addi	r2,r2,-1
   1d3ac:	1180a636 	bltu	r2,r6,1d648 <__umoddi3+0x57c>
   1d3b0:	01000404 	movi	r4,16
   1d3b4:	003f5c06 	br	1d128 <__alt_data_end+0xfc01d128>
   1d3b8:	3d0e983a 	sll	r7,r7,r20
   1d3bc:	34ead83a 	srl	r21,r6,r19
   1d3c0:	8cc6d83a 	srl	r3,r17,r19
   1d3c4:	8d10983a 	sll	r8,r17,r20
   1d3c8:	3d6ab03a 	or	r21,r7,r21
   1d3cc:	a82cd43a 	srli	r22,r21,16
   1d3d0:	84e2d83a 	srl	r17,r16,r19
   1d3d4:	1809883a 	mov	r4,r3
   1d3d8:	b00b883a 	mov	r5,r22
   1d3dc:	8a22b03a 	or	r17,r17,r8
   1d3e0:	3524983a 	sll	r18,r6,r20
   1d3e4:	dc400015 	stw	r17,0(sp)
   1d3e8:	d8c00115 	stw	r3,4(sp)
   1d3ec:	000d8600 	call	d860 <__umodsi3>
   1d3f0:	d8c00117 	ldw	r3,4(sp)
   1d3f4:	b00b883a 	mov	r5,r22
   1d3f8:	1039883a 	mov	fp,r2
   1d3fc:	1809883a 	mov	r4,r3
   1d400:	000d7fc0 	call	d7fc <__udivsi3>
   1d404:	adffffcc 	andi	r23,r21,65535
   1d408:	100b883a 	mov	r5,r2
   1d40c:	b809883a 	mov	r4,r23
   1d410:	1023883a 	mov	r17,r2
   1d414:	000d8b80 	call	d8b8 <__mulsi3>
   1d418:	d9400017 	ldw	r5,0(sp)
   1d41c:	e008943a 	slli	r4,fp,16
   1d420:	8520983a 	sll	r16,r16,r20
   1d424:	2806d43a 	srli	r3,r5,16
   1d428:	1906b03a 	or	r3,r3,r4
   1d42c:	1880042e 	bgeu	r3,r2,1d440 <__umoddi3+0x374>
   1d430:	1d47883a 	add	r3,r3,r21
   1d434:	893fffc4 	addi	r4,r17,-1
   1d438:	1d40892e 	bgeu	r3,r21,1d660 <__umoddi3+0x594>
   1d43c:	2023883a 	mov	r17,r4
   1d440:	18b9c83a 	sub	fp,r3,r2
   1d444:	b00b883a 	mov	r5,r22
   1d448:	e009883a 	mov	r4,fp
   1d44c:	000d8600 	call	d860 <__umodsi3>
   1d450:	b00b883a 	mov	r5,r22
   1d454:	e009883a 	mov	r4,fp
   1d458:	d8800215 	stw	r2,8(sp)
   1d45c:	000d7fc0 	call	d7fc <__udivsi3>
   1d460:	100b883a 	mov	r5,r2
   1d464:	b809883a 	mov	r4,r23
   1d468:	102d883a 	mov	r22,r2
   1d46c:	000d8b80 	call	d8b8 <__mulsi3>
   1d470:	d9800217 	ldw	r6,8(sp)
   1d474:	d8c00017 	ldw	r3,0(sp)
   1d478:	300c943a 	slli	r6,r6,16
   1d47c:	1a3fffcc 	andi	r8,r3,65535
   1d480:	4190b03a 	or	r8,r8,r6
   1d484:	4080042e 	bgeu	r8,r2,1d498 <__umoddi3+0x3cc>
   1d488:	4551883a 	add	r8,r8,r21
   1d48c:	b0ffffc4 	addi	r3,r22,-1
   1d490:	45406f2e 	bgeu	r8,r21,1d650 <__umoddi3+0x584>
   1d494:	182d883a 	mov	r22,r3
   1d498:	880e943a 	slli	r7,r17,16
   1d49c:	9006d43a 	srli	r3,r18,16
   1d4a0:	91bfffcc 	andi	r6,r18,65535
   1d4a4:	3dacb03a 	or	r22,r7,r22
   1d4a8:	b02ed43a 	srli	r23,r22,16
   1d4ac:	b5bfffcc 	andi	r22,r22,65535
   1d4b0:	300b883a 	mov	r5,r6
   1d4b4:	b009883a 	mov	r4,r22
   1d4b8:	40a3c83a 	sub	r17,r8,r2
   1d4bc:	d8c00115 	stw	r3,4(sp)
   1d4c0:	d9800215 	stw	r6,8(sp)
   1d4c4:	000d8b80 	call	d8b8 <__mulsi3>
   1d4c8:	d9800217 	ldw	r6,8(sp)
   1d4cc:	b809883a 	mov	r4,r23
   1d4d0:	1039883a 	mov	fp,r2
   1d4d4:	300b883a 	mov	r5,r6
   1d4d8:	000d8b80 	call	d8b8 <__mulsi3>
   1d4dc:	d8c00117 	ldw	r3,4(sp)
   1d4e0:	b809883a 	mov	r4,r23
   1d4e4:	d8800215 	stw	r2,8(sp)
   1d4e8:	180b883a 	mov	r5,r3
   1d4ec:	000d8b80 	call	d8b8 <__mulsi3>
   1d4f0:	d8c00117 	ldw	r3,4(sp)
   1d4f4:	b009883a 	mov	r4,r22
   1d4f8:	102f883a 	mov	r23,r2
   1d4fc:	180b883a 	mov	r5,r3
   1d500:	000d8b80 	call	d8b8 <__mulsi3>
   1d504:	d9800217 	ldw	r6,8(sp)
   1d508:	e006d43a 	srli	r3,fp,16
   1d50c:	1185883a 	add	r2,r2,r6
   1d510:	1885883a 	add	r2,r3,r2
   1d514:	1180022e 	bgeu	r2,r6,1d520 <__umoddi3+0x454>
   1d518:	00c00074 	movhi	r3,1
   1d51c:	b8ef883a 	add	r23,r23,r3
   1d520:	1006d43a 	srli	r3,r2,16
   1d524:	1004943a 	slli	r2,r2,16
   1d528:	e73fffcc 	andi	fp,fp,65535
   1d52c:	1dc7883a 	add	r3,r3,r23
   1d530:	1739883a 	add	fp,r2,fp
   1d534:	88c03a36 	bltu	r17,r3,1d620 <__umoddi3+0x554>
   1d538:	88c05126 	beq	r17,r3,1d680 <__umoddi3+0x5b4>
   1d53c:	88c9c83a 	sub	r4,r17,r3
   1d540:	e00f883a 	mov	r7,fp
   1d544:	81cfc83a 	sub	r7,r16,r7
   1d548:	81c7803a 	cmpltu	r3,r16,r7
   1d54c:	20c7c83a 	sub	r3,r4,r3
   1d550:	1cc4983a 	sll	r2,r3,r19
   1d554:	3d0ed83a 	srl	r7,r7,r20
   1d558:	1d06d83a 	srl	r3,r3,r20
   1d55c:	11c4b03a 	or	r2,r2,r7
   1d560:	003f7c06 	br	1d354 <__alt_data_end+0xfc01d354>
   1d564:	9ca6983a 	sll	r19,r19,r18
   1d568:	88f8d83a 	srl	fp,r17,r3
   1d56c:	80c4d83a 	srl	r2,r16,r3
   1d570:	982cd43a 	srli	r22,r19,16
   1d574:	8ca2983a 	sll	r17,r17,r18
   1d578:	e009883a 	mov	r4,fp
   1d57c:	b00b883a 	mov	r5,r22
   1d580:	146ab03a 	or	r21,r2,r17
   1d584:	000d8600 	call	d860 <__umodsi3>
   1d588:	b00b883a 	mov	r5,r22
   1d58c:	e009883a 	mov	r4,fp
   1d590:	1029883a 	mov	r20,r2
   1d594:	9dffffcc 	andi	r23,r19,65535
   1d598:	000d7fc0 	call	d7fc <__udivsi3>
   1d59c:	b809883a 	mov	r4,r23
   1d5a0:	100b883a 	mov	r5,r2
   1d5a4:	000d8b80 	call	d8b8 <__mulsi3>
   1d5a8:	a008943a 	slli	r4,r20,16
   1d5ac:	a806d43a 	srli	r3,r21,16
   1d5b0:	84a8983a 	sll	r20,r16,r18
   1d5b4:	1906b03a 	or	r3,r3,r4
   1d5b8:	1880042e 	bgeu	r3,r2,1d5cc <__umoddi3+0x500>
   1d5bc:	1cc7883a 	add	r3,r3,r19
   1d5c0:	1cc00236 	bltu	r3,r19,1d5cc <__umoddi3+0x500>
   1d5c4:	1880012e 	bgeu	r3,r2,1d5cc <__umoddi3+0x500>
   1d5c8:	1cc7883a 	add	r3,r3,r19
   1d5cc:	18a3c83a 	sub	r17,r3,r2
   1d5d0:	b00b883a 	mov	r5,r22
   1d5d4:	8809883a 	mov	r4,r17
   1d5d8:	000d8600 	call	d860 <__umodsi3>
   1d5dc:	b00b883a 	mov	r5,r22
   1d5e0:	8809883a 	mov	r4,r17
   1d5e4:	1021883a 	mov	r16,r2
   1d5e8:	000d7fc0 	call	d7fc <__udivsi3>
   1d5ec:	100b883a 	mov	r5,r2
   1d5f0:	b809883a 	mov	r4,r23
   1d5f4:	8020943a 	slli	r16,r16,16
   1d5f8:	000d8b80 	call	d8b8 <__mulsi3>
   1d5fc:	a8ffffcc 	andi	r3,r21,65535
   1d600:	1c06b03a 	or	r3,r3,r16
   1d604:	1880042e 	bgeu	r3,r2,1d618 <__umoddi3+0x54c>
   1d608:	1cc7883a 	add	r3,r3,r19
   1d60c:	1cc00236 	bltu	r3,r19,1d618 <__umoddi3+0x54c>
   1d610:	1880012e 	bgeu	r3,r2,1d618 <__umoddi3+0x54c>
   1d614:	1cc7883a 	add	r3,r3,r19
   1d618:	18a3c83a 	sub	r17,r3,r2
   1d61c:	003f2906 	br	1d2c4 <__alt_data_end+0xfc01d2c4>
   1d620:	e48fc83a 	sub	r7,fp,r18
   1d624:	1d49c83a 	sub	r4,r3,r21
   1d628:	e1f9803a 	cmpltu	fp,fp,r7
   1d62c:	2739c83a 	sub	fp,r4,fp
   1d630:	8f09c83a 	sub	r4,r17,fp
   1d634:	003fc306 	br	1d544 <__alt_data_end+0xfc01d544>
   1d638:	01000604 	movi	r4,24
   1d63c:	003ef906 	br	1d224 <__alt_data_end+0xfc01d224>
   1d640:	00800604 	movi	r2,24
   1d644:	003f1306 	br	1d294 <__alt_data_end+0xfc01d294>
   1d648:	01000604 	movi	r4,24
   1d64c:	003eb606 	br	1d128 <__alt_data_end+0xfc01d128>
   1d650:	40bf902e 	bgeu	r8,r2,1d494 <__alt_data_end+0xfc01d494>
   1d654:	b5bfff84 	addi	r22,r22,-2
   1d658:	4551883a 	add	r8,r8,r21
   1d65c:	003f8e06 	br	1d498 <__alt_data_end+0xfc01d498>
   1d660:	18bf762e 	bgeu	r3,r2,1d43c <__alt_data_end+0xfc01d43c>
   1d664:	8c7fff84 	addi	r17,r17,-2
   1d668:	1d47883a 	add	r3,r3,r21
   1d66c:	003f7406 	br	1d440 <__alt_data_end+0xfc01d440>
   1d670:	1cc7883a 	add	r3,r3,r19
   1d674:	003ecd06 	br	1d1ac <__alt_data_end+0xfc01d1ac>
   1d678:	8005883a 	mov	r2,r16
   1d67c:	003ef806 	br	1d260 <__alt_data_end+0xfc01d260>
   1d680:	873fe736 	bltu	r16,fp,1d620 <__alt_data_end+0xfc01d620>
   1d684:	e00f883a 	mov	r7,fp
   1d688:	0009883a 	mov	r4,zero
   1d68c:	003fad06 	br	1d544 <__alt_data_end+0xfc01d544>

0001d690 <__adddf3>:
   1d690:	02c00434 	movhi	r11,16
   1d694:	5affffc4 	addi	r11,r11,-1
   1d698:	2806d7fa 	srli	r3,r5,31
   1d69c:	2ad4703a 	and	r10,r5,r11
   1d6a0:	3ad2703a 	and	r9,r7,r11
   1d6a4:	3804d53a 	srli	r2,r7,20
   1d6a8:	3018d77a 	srli	r12,r6,29
   1d6ac:	280ad53a 	srli	r5,r5,20
   1d6b0:	501490fa 	slli	r10,r10,3
   1d6b4:	2010d77a 	srli	r8,r4,29
   1d6b8:	481290fa 	slli	r9,r9,3
   1d6bc:	380ed7fa 	srli	r7,r7,31
   1d6c0:	defffb04 	addi	sp,sp,-20
   1d6c4:	dc800215 	stw	r18,8(sp)
   1d6c8:	dc400115 	stw	r17,4(sp)
   1d6cc:	dc000015 	stw	r16,0(sp)
   1d6d0:	dfc00415 	stw	ra,16(sp)
   1d6d4:	dcc00315 	stw	r19,12(sp)
   1d6d8:	1c803fcc 	andi	r18,r3,255
   1d6dc:	2c01ffcc 	andi	r16,r5,2047
   1d6e0:	5210b03a 	or	r8,r10,r8
   1d6e4:	202290fa 	slli	r17,r4,3
   1d6e8:	1081ffcc 	andi	r2,r2,2047
   1d6ec:	4b12b03a 	or	r9,r9,r12
   1d6f0:	300c90fa 	slli	r6,r6,3
   1d6f4:	91c07526 	beq	r18,r7,1d8cc <__adddf3+0x23c>
   1d6f8:	8087c83a 	sub	r3,r16,r2
   1d6fc:	00c0ab0e 	bge	zero,r3,1d9ac <__adddf3+0x31c>
   1d700:	10002a1e 	bne	r2,zero,1d7ac <__adddf3+0x11c>
   1d704:	4984b03a 	or	r2,r9,r6
   1d708:	1000961e 	bne	r2,zero,1d964 <__adddf3+0x2d4>
   1d70c:	888001cc 	andi	r2,r17,7
   1d710:	10000726 	beq	r2,zero,1d730 <__adddf3+0xa0>
   1d714:	888003cc 	andi	r2,r17,15
   1d718:	00c00104 	movi	r3,4
   1d71c:	10c00426 	beq	r2,r3,1d730 <__adddf3+0xa0>
   1d720:	88c7883a 	add	r3,r17,r3
   1d724:	1c63803a 	cmpltu	r17,r3,r17
   1d728:	4451883a 	add	r8,r8,r17
   1d72c:	1823883a 	mov	r17,r3
   1d730:	4080202c 	andhi	r2,r8,128
   1d734:	10005926 	beq	r2,zero,1d89c <__adddf3+0x20c>
   1d738:	84000044 	addi	r16,r16,1
   1d73c:	0081ffc4 	movi	r2,2047
   1d740:	8080ba26 	beq	r16,r2,1da2c <__adddf3+0x39c>
   1d744:	00bfe034 	movhi	r2,65408
   1d748:	10bfffc4 	addi	r2,r2,-1
   1d74c:	4090703a 	and	r8,r8,r2
   1d750:	4004977a 	slli	r2,r8,29
   1d754:	4010927a 	slli	r8,r8,9
   1d758:	8822d0fa 	srli	r17,r17,3
   1d75c:	8401ffcc 	andi	r16,r16,2047
   1d760:	4010d33a 	srli	r8,r8,12
   1d764:	9007883a 	mov	r3,r18
   1d768:	1444b03a 	or	r2,r2,r17
   1d76c:	8401ffcc 	andi	r16,r16,2047
   1d770:	8020953a 	slli	r16,r16,20
   1d774:	18c03fcc 	andi	r3,r3,255
   1d778:	01000434 	movhi	r4,16
   1d77c:	213fffc4 	addi	r4,r4,-1
   1d780:	180697fa 	slli	r3,r3,31
   1d784:	4110703a 	and	r8,r8,r4
   1d788:	4410b03a 	or	r8,r8,r16
   1d78c:	40c6b03a 	or	r3,r8,r3
   1d790:	dfc00417 	ldw	ra,16(sp)
   1d794:	dcc00317 	ldw	r19,12(sp)
   1d798:	dc800217 	ldw	r18,8(sp)
   1d79c:	dc400117 	ldw	r17,4(sp)
   1d7a0:	dc000017 	ldw	r16,0(sp)
   1d7a4:	dec00504 	addi	sp,sp,20
   1d7a8:	f800283a 	ret
   1d7ac:	0081ffc4 	movi	r2,2047
   1d7b0:	80bfd626 	beq	r16,r2,1d70c <__alt_data_end+0xfc01d70c>
   1d7b4:	4a402034 	orhi	r9,r9,128
   1d7b8:	00800e04 	movi	r2,56
   1d7bc:	10c09f16 	blt	r2,r3,1da3c <__adddf3+0x3ac>
   1d7c0:	008007c4 	movi	r2,31
   1d7c4:	10c0c216 	blt	r2,r3,1dad0 <__adddf3+0x440>
   1d7c8:	00800804 	movi	r2,32
   1d7cc:	10c5c83a 	sub	r2,r2,r3
   1d7d0:	488a983a 	sll	r5,r9,r2
   1d7d4:	30c8d83a 	srl	r4,r6,r3
   1d7d8:	3084983a 	sll	r2,r6,r2
   1d7dc:	48c6d83a 	srl	r3,r9,r3
   1d7e0:	290cb03a 	or	r6,r5,r4
   1d7e4:	1004c03a 	cmpne	r2,r2,zero
   1d7e8:	308cb03a 	or	r6,r6,r2
   1d7ec:	898dc83a 	sub	r6,r17,r6
   1d7f0:	89a3803a 	cmpltu	r17,r17,r6
   1d7f4:	40d1c83a 	sub	r8,r8,r3
   1d7f8:	4451c83a 	sub	r8,r8,r17
   1d7fc:	3023883a 	mov	r17,r6
   1d800:	4080202c 	andhi	r2,r8,128
   1d804:	10002326 	beq	r2,zero,1d894 <__adddf3+0x204>
   1d808:	04c02034 	movhi	r19,128
   1d80c:	9cffffc4 	addi	r19,r19,-1
   1d810:	44e6703a 	and	r19,r8,r19
   1d814:	98007626 	beq	r19,zero,1d9f0 <__adddf3+0x360>
   1d818:	9809883a 	mov	r4,r19
   1d81c:	000f35c0 	call	f35c <__clzsi2>
   1d820:	10fffe04 	addi	r3,r2,-8
   1d824:	010007c4 	movi	r4,31
   1d828:	20c07716 	blt	r4,r3,1da08 <__adddf3+0x378>
   1d82c:	00800804 	movi	r2,32
   1d830:	10c5c83a 	sub	r2,r2,r3
   1d834:	8884d83a 	srl	r2,r17,r2
   1d838:	98d0983a 	sll	r8,r19,r3
   1d83c:	88e2983a 	sll	r17,r17,r3
   1d840:	1204b03a 	or	r2,r2,r8
   1d844:	1c007416 	blt	r3,r16,1da18 <__adddf3+0x388>
   1d848:	1c21c83a 	sub	r16,r3,r16
   1d84c:	82000044 	addi	r8,r16,1
   1d850:	00c007c4 	movi	r3,31
   1d854:	1a009116 	blt	r3,r8,1da9c <__adddf3+0x40c>
   1d858:	00c00804 	movi	r3,32
   1d85c:	1a07c83a 	sub	r3,r3,r8
   1d860:	8a08d83a 	srl	r4,r17,r8
   1d864:	88e2983a 	sll	r17,r17,r3
   1d868:	10c6983a 	sll	r3,r2,r3
   1d86c:	1210d83a 	srl	r8,r2,r8
   1d870:	8804c03a 	cmpne	r2,r17,zero
   1d874:	1906b03a 	or	r3,r3,r4
   1d878:	18a2b03a 	or	r17,r3,r2
   1d87c:	0021883a 	mov	r16,zero
   1d880:	003fa206 	br	1d70c <__alt_data_end+0xfc01d70c>
   1d884:	1890b03a 	or	r8,r3,r2
   1d888:	40017d26 	beq	r8,zero,1de80 <__adddf3+0x7f0>
   1d88c:	1011883a 	mov	r8,r2
   1d890:	1823883a 	mov	r17,r3
   1d894:	888001cc 	andi	r2,r17,7
   1d898:	103f9e1e 	bne	r2,zero,1d714 <__alt_data_end+0xfc01d714>
   1d89c:	4004977a 	slli	r2,r8,29
   1d8a0:	8822d0fa 	srli	r17,r17,3
   1d8a4:	4010d0fa 	srli	r8,r8,3
   1d8a8:	9007883a 	mov	r3,r18
   1d8ac:	1444b03a 	or	r2,r2,r17
   1d8b0:	0101ffc4 	movi	r4,2047
   1d8b4:	81002426 	beq	r16,r4,1d948 <__adddf3+0x2b8>
   1d8b8:	8120703a 	and	r16,r16,r4
   1d8bc:	01000434 	movhi	r4,16
   1d8c0:	213fffc4 	addi	r4,r4,-1
   1d8c4:	4110703a 	and	r8,r8,r4
   1d8c8:	003fa806 	br	1d76c <__alt_data_end+0xfc01d76c>
   1d8cc:	8089c83a 	sub	r4,r16,r2
   1d8d0:	01005e0e 	bge	zero,r4,1da4c <__adddf3+0x3bc>
   1d8d4:	10002b26 	beq	r2,zero,1d984 <__adddf3+0x2f4>
   1d8d8:	0081ffc4 	movi	r2,2047
   1d8dc:	80bf8b26 	beq	r16,r2,1d70c <__alt_data_end+0xfc01d70c>
   1d8e0:	4a402034 	orhi	r9,r9,128
   1d8e4:	00800e04 	movi	r2,56
   1d8e8:	1100a40e 	bge	r2,r4,1db7c <__adddf3+0x4ec>
   1d8ec:	498cb03a 	or	r6,r9,r6
   1d8f0:	300ac03a 	cmpne	r5,r6,zero
   1d8f4:	0013883a 	mov	r9,zero
   1d8f8:	2c4b883a 	add	r5,r5,r17
   1d8fc:	2c63803a 	cmpltu	r17,r5,r17
   1d900:	4a11883a 	add	r8,r9,r8
   1d904:	8a11883a 	add	r8,r17,r8
   1d908:	2823883a 	mov	r17,r5
   1d90c:	4080202c 	andhi	r2,r8,128
   1d910:	103fe026 	beq	r2,zero,1d894 <__alt_data_end+0xfc01d894>
   1d914:	84000044 	addi	r16,r16,1
   1d918:	0081ffc4 	movi	r2,2047
   1d91c:	8080d226 	beq	r16,r2,1dc68 <__adddf3+0x5d8>
   1d920:	00bfe034 	movhi	r2,65408
   1d924:	10bfffc4 	addi	r2,r2,-1
   1d928:	4090703a 	and	r8,r8,r2
   1d92c:	880ad07a 	srli	r5,r17,1
   1d930:	400897fa 	slli	r4,r8,31
   1d934:	88c0004c 	andi	r3,r17,1
   1d938:	28e2b03a 	or	r17,r5,r3
   1d93c:	4010d07a 	srli	r8,r8,1
   1d940:	2462b03a 	or	r17,r4,r17
   1d944:	003f7106 	br	1d70c <__alt_data_end+0xfc01d70c>
   1d948:	4088b03a 	or	r4,r8,r2
   1d94c:	20014526 	beq	r4,zero,1de64 <__adddf3+0x7d4>
   1d950:	01000434 	movhi	r4,16
   1d954:	42000234 	orhi	r8,r8,8
   1d958:	213fffc4 	addi	r4,r4,-1
   1d95c:	4110703a 	and	r8,r8,r4
   1d960:	003f8206 	br	1d76c <__alt_data_end+0xfc01d76c>
   1d964:	18ffffc4 	addi	r3,r3,-1
   1d968:	1800491e 	bne	r3,zero,1da90 <__adddf3+0x400>
   1d96c:	898bc83a 	sub	r5,r17,r6
   1d970:	8963803a 	cmpltu	r17,r17,r5
   1d974:	4251c83a 	sub	r8,r8,r9
   1d978:	4451c83a 	sub	r8,r8,r17
   1d97c:	2823883a 	mov	r17,r5
   1d980:	003f9f06 	br	1d800 <__alt_data_end+0xfc01d800>
   1d984:	4984b03a 	or	r2,r9,r6
   1d988:	103f6026 	beq	r2,zero,1d70c <__alt_data_end+0xfc01d70c>
   1d98c:	213fffc4 	addi	r4,r4,-1
   1d990:	2000931e 	bne	r4,zero,1dbe0 <__adddf3+0x550>
   1d994:	898d883a 	add	r6,r17,r6
   1d998:	3463803a 	cmpltu	r17,r6,r17
   1d99c:	4251883a 	add	r8,r8,r9
   1d9a0:	8a11883a 	add	r8,r17,r8
   1d9a4:	3023883a 	mov	r17,r6
   1d9a8:	003fd806 	br	1d90c <__alt_data_end+0xfc01d90c>
   1d9ac:	1800541e 	bne	r3,zero,1db00 <__adddf3+0x470>
   1d9b0:	80800044 	addi	r2,r16,1
   1d9b4:	1081ffcc 	andi	r2,r2,2047
   1d9b8:	00c00044 	movi	r3,1
   1d9bc:	1880a00e 	bge	r3,r2,1dc40 <__adddf3+0x5b0>
   1d9c0:	8989c83a 	sub	r4,r17,r6
   1d9c4:	8905803a 	cmpltu	r2,r17,r4
   1d9c8:	4267c83a 	sub	r19,r8,r9
   1d9cc:	98a7c83a 	sub	r19,r19,r2
   1d9d0:	9880202c 	andhi	r2,r19,128
   1d9d4:	10006326 	beq	r2,zero,1db64 <__adddf3+0x4d4>
   1d9d8:	3463c83a 	sub	r17,r6,r17
   1d9dc:	4a07c83a 	sub	r3,r9,r8
   1d9e0:	344d803a 	cmpltu	r6,r6,r17
   1d9e4:	19a7c83a 	sub	r19,r3,r6
   1d9e8:	3825883a 	mov	r18,r7
   1d9ec:	983f8a1e 	bne	r19,zero,1d818 <__alt_data_end+0xfc01d818>
   1d9f0:	8809883a 	mov	r4,r17
   1d9f4:	000f35c0 	call	f35c <__clzsi2>
   1d9f8:	10800804 	addi	r2,r2,32
   1d9fc:	10fffe04 	addi	r3,r2,-8
   1da00:	010007c4 	movi	r4,31
   1da04:	20ff890e 	bge	r4,r3,1d82c <__alt_data_end+0xfc01d82c>
   1da08:	10bff604 	addi	r2,r2,-40
   1da0c:	8884983a 	sll	r2,r17,r2
   1da10:	0023883a 	mov	r17,zero
   1da14:	1c3f8c0e 	bge	r3,r16,1d848 <__alt_data_end+0xfc01d848>
   1da18:	023fe034 	movhi	r8,65408
   1da1c:	423fffc4 	addi	r8,r8,-1
   1da20:	80e1c83a 	sub	r16,r16,r3
   1da24:	1210703a 	and	r8,r2,r8
   1da28:	003f3806 	br	1d70c <__alt_data_end+0xfc01d70c>
   1da2c:	9007883a 	mov	r3,r18
   1da30:	0011883a 	mov	r8,zero
   1da34:	0005883a 	mov	r2,zero
   1da38:	003f4c06 	br	1d76c <__alt_data_end+0xfc01d76c>
   1da3c:	498cb03a 	or	r6,r9,r6
   1da40:	300cc03a 	cmpne	r6,r6,zero
   1da44:	0007883a 	mov	r3,zero
   1da48:	003f6806 	br	1d7ec <__alt_data_end+0xfc01d7ec>
   1da4c:	20009c1e 	bne	r4,zero,1dcc0 <__adddf3+0x630>
   1da50:	80800044 	addi	r2,r16,1
   1da54:	1141ffcc 	andi	r5,r2,2047
   1da58:	01000044 	movi	r4,1
   1da5c:	2140670e 	bge	r4,r5,1dbfc <__adddf3+0x56c>
   1da60:	0101ffc4 	movi	r4,2047
   1da64:	11007f26 	beq	r2,r4,1dc64 <__adddf3+0x5d4>
   1da68:	898d883a 	add	r6,r17,r6
   1da6c:	4247883a 	add	r3,r8,r9
   1da70:	3451803a 	cmpltu	r8,r6,r17
   1da74:	40d1883a 	add	r8,r8,r3
   1da78:	402297fa 	slli	r17,r8,31
   1da7c:	300cd07a 	srli	r6,r6,1
   1da80:	4010d07a 	srli	r8,r8,1
   1da84:	1021883a 	mov	r16,r2
   1da88:	89a2b03a 	or	r17,r17,r6
   1da8c:	003f1f06 	br	1d70c <__alt_data_end+0xfc01d70c>
   1da90:	0081ffc4 	movi	r2,2047
   1da94:	80bf481e 	bne	r16,r2,1d7b8 <__alt_data_end+0xfc01d7b8>
   1da98:	003f1c06 	br	1d70c <__alt_data_end+0xfc01d70c>
   1da9c:	843ff844 	addi	r16,r16,-31
   1daa0:	01000804 	movi	r4,32
   1daa4:	1406d83a 	srl	r3,r2,r16
   1daa8:	41005026 	beq	r8,r4,1dbec <__adddf3+0x55c>
   1daac:	01001004 	movi	r4,64
   1dab0:	2211c83a 	sub	r8,r4,r8
   1dab4:	1204983a 	sll	r2,r2,r8
   1dab8:	88a2b03a 	or	r17,r17,r2
   1dabc:	8822c03a 	cmpne	r17,r17,zero
   1dac0:	1c62b03a 	or	r17,r3,r17
   1dac4:	0011883a 	mov	r8,zero
   1dac8:	0021883a 	mov	r16,zero
   1dacc:	003f7106 	br	1d894 <__alt_data_end+0xfc01d894>
   1dad0:	193ff804 	addi	r4,r3,-32
   1dad4:	00800804 	movi	r2,32
   1dad8:	4908d83a 	srl	r4,r9,r4
   1dadc:	18804526 	beq	r3,r2,1dbf4 <__adddf3+0x564>
   1dae0:	00801004 	movi	r2,64
   1dae4:	10c5c83a 	sub	r2,r2,r3
   1dae8:	4886983a 	sll	r3,r9,r2
   1daec:	198cb03a 	or	r6,r3,r6
   1daf0:	300cc03a 	cmpne	r6,r6,zero
   1daf4:	218cb03a 	or	r6,r4,r6
   1daf8:	0007883a 	mov	r3,zero
   1dafc:	003f3b06 	br	1d7ec <__alt_data_end+0xfc01d7ec>
   1db00:	80002a26 	beq	r16,zero,1dbac <__adddf3+0x51c>
   1db04:	0101ffc4 	movi	r4,2047
   1db08:	11006826 	beq	r2,r4,1dcac <__adddf3+0x61c>
   1db0c:	00c7c83a 	sub	r3,zero,r3
   1db10:	42002034 	orhi	r8,r8,128
   1db14:	01000e04 	movi	r4,56
   1db18:	20c07c16 	blt	r4,r3,1dd0c <__adddf3+0x67c>
   1db1c:	010007c4 	movi	r4,31
   1db20:	20c0da16 	blt	r4,r3,1de8c <__adddf3+0x7fc>
   1db24:	01000804 	movi	r4,32
   1db28:	20c9c83a 	sub	r4,r4,r3
   1db2c:	4114983a 	sll	r10,r8,r4
   1db30:	88cad83a 	srl	r5,r17,r3
   1db34:	8908983a 	sll	r4,r17,r4
   1db38:	40c6d83a 	srl	r3,r8,r3
   1db3c:	5162b03a 	or	r17,r10,r5
   1db40:	2008c03a 	cmpne	r4,r4,zero
   1db44:	8922b03a 	or	r17,r17,r4
   1db48:	3463c83a 	sub	r17,r6,r17
   1db4c:	48c7c83a 	sub	r3,r9,r3
   1db50:	344d803a 	cmpltu	r6,r6,r17
   1db54:	1991c83a 	sub	r8,r3,r6
   1db58:	1021883a 	mov	r16,r2
   1db5c:	3825883a 	mov	r18,r7
   1db60:	003f2706 	br	1d800 <__alt_data_end+0xfc01d800>
   1db64:	24d0b03a 	or	r8,r4,r19
   1db68:	40001b1e 	bne	r8,zero,1dbd8 <__adddf3+0x548>
   1db6c:	0005883a 	mov	r2,zero
   1db70:	0007883a 	mov	r3,zero
   1db74:	0021883a 	mov	r16,zero
   1db78:	003f4d06 	br	1d8b0 <__alt_data_end+0xfc01d8b0>
   1db7c:	008007c4 	movi	r2,31
   1db80:	11003c16 	blt	r2,r4,1dc74 <__adddf3+0x5e4>
   1db84:	00800804 	movi	r2,32
   1db88:	1105c83a 	sub	r2,r2,r4
   1db8c:	488e983a 	sll	r7,r9,r2
   1db90:	310ad83a 	srl	r5,r6,r4
   1db94:	3084983a 	sll	r2,r6,r2
   1db98:	4912d83a 	srl	r9,r9,r4
   1db9c:	394ab03a 	or	r5,r7,r5
   1dba0:	1004c03a 	cmpne	r2,r2,zero
   1dba4:	288ab03a 	or	r5,r5,r2
   1dba8:	003f5306 	br	1d8f8 <__alt_data_end+0xfc01d8f8>
   1dbac:	4448b03a 	or	r4,r8,r17
   1dbb0:	20003e26 	beq	r4,zero,1dcac <__adddf3+0x61c>
   1dbb4:	00c6303a 	nor	r3,zero,r3
   1dbb8:	18003a1e 	bne	r3,zero,1dca4 <__adddf3+0x614>
   1dbbc:	3463c83a 	sub	r17,r6,r17
   1dbc0:	4a07c83a 	sub	r3,r9,r8
   1dbc4:	344d803a 	cmpltu	r6,r6,r17
   1dbc8:	1991c83a 	sub	r8,r3,r6
   1dbcc:	1021883a 	mov	r16,r2
   1dbd0:	3825883a 	mov	r18,r7
   1dbd4:	003f0a06 	br	1d800 <__alt_data_end+0xfc01d800>
   1dbd8:	2023883a 	mov	r17,r4
   1dbdc:	003f0d06 	br	1d814 <__alt_data_end+0xfc01d814>
   1dbe0:	0081ffc4 	movi	r2,2047
   1dbe4:	80bf3f1e 	bne	r16,r2,1d8e4 <__alt_data_end+0xfc01d8e4>
   1dbe8:	003ec806 	br	1d70c <__alt_data_end+0xfc01d70c>
   1dbec:	0005883a 	mov	r2,zero
   1dbf0:	003fb106 	br	1dab8 <__alt_data_end+0xfc01dab8>
   1dbf4:	0007883a 	mov	r3,zero
   1dbf8:	003fbc06 	br	1daec <__alt_data_end+0xfc01daec>
   1dbfc:	4444b03a 	or	r2,r8,r17
   1dc00:	8000871e 	bne	r16,zero,1de20 <__adddf3+0x790>
   1dc04:	1000ba26 	beq	r2,zero,1def0 <__adddf3+0x860>
   1dc08:	4984b03a 	or	r2,r9,r6
   1dc0c:	103ebf26 	beq	r2,zero,1d70c <__alt_data_end+0xfc01d70c>
   1dc10:	8985883a 	add	r2,r17,r6
   1dc14:	4247883a 	add	r3,r8,r9
   1dc18:	1451803a 	cmpltu	r8,r2,r17
   1dc1c:	40d1883a 	add	r8,r8,r3
   1dc20:	40c0202c 	andhi	r3,r8,128
   1dc24:	1023883a 	mov	r17,r2
   1dc28:	183f1a26 	beq	r3,zero,1d894 <__alt_data_end+0xfc01d894>
   1dc2c:	00bfe034 	movhi	r2,65408
   1dc30:	10bfffc4 	addi	r2,r2,-1
   1dc34:	2021883a 	mov	r16,r4
   1dc38:	4090703a 	and	r8,r8,r2
   1dc3c:	003eb306 	br	1d70c <__alt_data_end+0xfc01d70c>
   1dc40:	4444b03a 	or	r2,r8,r17
   1dc44:	8000291e 	bne	r16,zero,1dcec <__adddf3+0x65c>
   1dc48:	10004b1e 	bne	r2,zero,1dd78 <__adddf3+0x6e8>
   1dc4c:	4990b03a 	or	r8,r9,r6
   1dc50:	40008b26 	beq	r8,zero,1de80 <__adddf3+0x7f0>
   1dc54:	4811883a 	mov	r8,r9
   1dc58:	3023883a 	mov	r17,r6
   1dc5c:	3825883a 	mov	r18,r7
   1dc60:	003eaa06 	br	1d70c <__alt_data_end+0xfc01d70c>
   1dc64:	1021883a 	mov	r16,r2
   1dc68:	0011883a 	mov	r8,zero
   1dc6c:	0005883a 	mov	r2,zero
   1dc70:	003f0f06 	br	1d8b0 <__alt_data_end+0xfc01d8b0>
   1dc74:	217ff804 	addi	r5,r4,-32
   1dc78:	00800804 	movi	r2,32
   1dc7c:	494ad83a 	srl	r5,r9,r5
   1dc80:	20807d26 	beq	r4,r2,1de78 <__adddf3+0x7e8>
   1dc84:	00801004 	movi	r2,64
   1dc88:	1109c83a 	sub	r4,r2,r4
   1dc8c:	4912983a 	sll	r9,r9,r4
   1dc90:	498cb03a 	or	r6,r9,r6
   1dc94:	300cc03a 	cmpne	r6,r6,zero
   1dc98:	298ab03a 	or	r5,r5,r6
   1dc9c:	0013883a 	mov	r9,zero
   1dca0:	003f1506 	br	1d8f8 <__alt_data_end+0xfc01d8f8>
   1dca4:	0101ffc4 	movi	r4,2047
   1dca8:	113f9a1e 	bne	r2,r4,1db14 <__alt_data_end+0xfc01db14>
   1dcac:	4811883a 	mov	r8,r9
   1dcb0:	3023883a 	mov	r17,r6
   1dcb4:	1021883a 	mov	r16,r2
   1dcb8:	3825883a 	mov	r18,r7
   1dcbc:	003e9306 	br	1d70c <__alt_data_end+0xfc01d70c>
   1dcc0:	8000161e 	bne	r16,zero,1dd1c <__adddf3+0x68c>
   1dcc4:	444ab03a 	or	r5,r8,r17
   1dcc8:	28005126 	beq	r5,zero,1de10 <__adddf3+0x780>
   1dccc:	0108303a 	nor	r4,zero,r4
   1dcd0:	20004d1e 	bne	r4,zero,1de08 <__adddf3+0x778>
   1dcd4:	89a3883a 	add	r17,r17,r6
   1dcd8:	4253883a 	add	r9,r8,r9
   1dcdc:	898d803a 	cmpltu	r6,r17,r6
   1dce0:	3251883a 	add	r8,r6,r9
   1dce4:	1021883a 	mov	r16,r2
   1dce8:	003f0806 	br	1d90c <__alt_data_end+0xfc01d90c>
   1dcec:	1000301e 	bne	r2,zero,1ddb0 <__adddf3+0x720>
   1dcf0:	4984b03a 	or	r2,r9,r6
   1dcf4:	10007126 	beq	r2,zero,1debc <__adddf3+0x82c>
   1dcf8:	4811883a 	mov	r8,r9
   1dcfc:	3023883a 	mov	r17,r6
   1dd00:	3825883a 	mov	r18,r7
   1dd04:	0401ffc4 	movi	r16,2047
   1dd08:	003e8006 	br	1d70c <__alt_data_end+0xfc01d70c>
   1dd0c:	4462b03a 	or	r17,r8,r17
   1dd10:	8822c03a 	cmpne	r17,r17,zero
   1dd14:	0007883a 	mov	r3,zero
   1dd18:	003f8b06 	br	1db48 <__alt_data_end+0xfc01db48>
   1dd1c:	0141ffc4 	movi	r5,2047
   1dd20:	11403b26 	beq	r2,r5,1de10 <__adddf3+0x780>
   1dd24:	0109c83a 	sub	r4,zero,r4
   1dd28:	42002034 	orhi	r8,r8,128
   1dd2c:	01400e04 	movi	r5,56
   1dd30:	29006716 	blt	r5,r4,1ded0 <__adddf3+0x840>
   1dd34:	014007c4 	movi	r5,31
   1dd38:	29007016 	blt	r5,r4,1defc <__adddf3+0x86c>
   1dd3c:	01400804 	movi	r5,32
   1dd40:	290bc83a 	sub	r5,r5,r4
   1dd44:	4154983a 	sll	r10,r8,r5
   1dd48:	890ed83a 	srl	r7,r17,r4
   1dd4c:	894a983a 	sll	r5,r17,r5
   1dd50:	4108d83a 	srl	r4,r8,r4
   1dd54:	51e2b03a 	or	r17,r10,r7
   1dd58:	280ac03a 	cmpne	r5,r5,zero
   1dd5c:	8962b03a 	or	r17,r17,r5
   1dd60:	89a3883a 	add	r17,r17,r6
   1dd64:	2253883a 	add	r9,r4,r9
   1dd68:	898d803a 	cmpltu	r6,r17,r6
   1dd6c:	3251883a 	add	r8,r6,r9
   1dd70:	1021883a 	mov	r16,r2
   1dd74:	003ee506 	br	1d90c <__alt_data_end+0xfc01d90c>
   1dd78:	4984b03a 	or	r2,r9,r6
   1dd7c:	103e6326 	beq	r2,zero,1d70c <__alt_data_end+0xfc01d70c>
   1dd80:	8987c83a 	sub	r3,r17,r6
   1dd84:	88c9803a 	cmpltu	r4,r17,r3
   1dd88:	4245c83a 	sub	r2,r8,r9
   1dd8c:	1105c83a 	sub	r2,r2,r4
   1dd90:	1100202c 	andhi	r4,r2,128
   1dd94:	203ebb26 	beq	r4,zero,1d884 <__alt_data_end+0xfc01d884>
   1dd98:	3463c83a 	sub	r17,r6,r17
   1dd9c:	4a07c83a 	sub	r3,r9,r8
   1dda0:	344d803a 	cmpltu	r6,r6,r17
   1dda4:	1991c83a 	sub	r8,r3,r6
   1dda8:	3825883a 	mov	r18,r7
   1ddac:	003e5706 	br	1d70c <__alt_data_end+0xfc01d70c>
   1ddb0:	4984b03a 	or	r2,r9,r6
   1ddb4:	10002e26 	beq	r2,zero,1de70 <__adddf3+0x7e0>
   1ddb8:	4004d0fa 	srli	r2,r8,3
   1ddbc:	8822d0fa 	srli	r17,r17,3
   1ddc0:	4010977a 	slli	r8,r8,29
   1ddc4:	10c0022c 	andhi	r3,r2,8
   1ddc8:	4462b03a 	or	r17,r8,r17
   1ddcc:	18000826 	beq	r3,zero,1ddf0 <__adddf3+0x760>
   1ddd0:	4808d0fa 	srli	r4,r9,3
   1ddd4:	20c0022c 	andhi	r3,r4,8
   1ddd8:	1800051e 	bne	r3,zero,1ddf0 <__adddf3+0x760>
   1dddc:	300cd0fa 	srli	r6,r6,3
   1dde0:	4806977a 	slli	r3,r9,29
   1dde4:	2005883a 	mov	r2,r4
   1dde8:	3825883a 	mov	r18,r7
   1ddec:	19a2b03a 	or	r17,r3,r6
   1ddf0:	8810d77a 	srli	r8,r17,29
   1ddf4:	100490fa 	slli	r2,r2,3
   1ddf8:	882290fa 	slli	r17,r17,3
   1ddfc:	0401ffc4 	movi	r16,2047
   1de00:	4090b03a 	or	r8,r8,r2
   1de04:	003e4106 	br	1d70c <__alt_data_end+0xfc01d70c>
   1de08:	0141ffc4 	movi	r5,2047
   1de0c:	117fc71e 	bne	r2,r5,1dd2c <__alt_data_end+0xfc01dd2c>
   1de10:	4811883a 	mov	r8,r9
   1de14:	3023883a 	mov	r17,r6
   1de18:	1021883a 	mov	r16,r2
   1de1c:	003e3b06 	br	1d70c <__alt_data_end+0xfc01d70c>
   1de20:	10002f26 	beq	r2,zero,1dee0 <__adddf3+0x850>
   1de24:	4984b03a 	or	r2,r9,r6
   1de28:	10001126 	beq	r2,zero,1de70 <__adddf3+0x7e0>
   1de2c:	4004d0fa 	srli	r2,r8,3
   1de30:	8822d0fa 	srli	r17,r17,3
   1de34:	4010977a 	slli	r8,r8,29
   1de38:	10c0022c 	andhi	r3,r2,8
   1de3c:	4462b03a 	or	r17,r8,r17
   1de40:	183feb26 	beq	r3,zero,1ddf0 <__alt_data_end+0xfc01ddf0>
   1de44:	4808d0fa 	srli	r4,r9,3
   1de48:	20c0022c 	andhi	r3,r4,8
   1de4c:	183fe81e 	bne	r3,zero,1ddf0 <__alt_data_end+0xfc01ddf0>
   1de50:	300cd0fa 	srli	r6,r6,3
   1de54:	4806977a 	slli	r3,r9,29
   1de58:	2005883a 	mov	r2,r4
   1de5c:	19a2b03a 	or	r17,r3,r6
   1de60:	003fe306 	br	1ddf0 <__alt_data_end+0xfc01ddf0>
   1de64:	0011883a 	mov	r8,zero
   1de68:	0005883a 	mov	r2,zero
   1de6c:	003e3f06 	br	1d76c <__alt_data_end+0xfc01d76c>
   1de70:	0401ffc4 	movi	r16,2047
   1de74:	003e2506 	br	1d70c <__alt_data_end+0xfc01d70c>
   1de78:	0013883a 	mov	r9,zero
   1de7c:	003f8406 	br	1dc90 <__alt_data_end+0xfc01dc90>
   1de80:	0005883a 	mov	r2,zero
   1de84:	0007883a 	mov	r3,zero
   1de88:	003e8906 	br	1d8b0 <__alt_data_end+0xfc01d8b0>
   1de8c:	197ff804 	addi	r5,r3,-32
   1de90:	01000804 	movi	r4,32
   1de94:	414ad83a 	srl	r5,r8,r5
   1de98:	19002426 	beq	r3,r4,1df2c <__adddf3+0x89c>
   1de9c:	01001004 	movi	r4,64
   1dea0:	20c7c83a 	sub	r3,r4,r3
   1dea4:	40c6983a 	sll	r3,r8,r3
   1dea8:	1c46b03a 	or	r3,r3,r17
   1deac:	1806c03a 	cmpne	r3,r3,zero
   1deb0:	28e2b03a 	or	r17,r5,r3
   1deb4:	0007883a 	mov	r3,zero
   1deb8:	003f2306 	br	1db48 <__alt_data_end+0xfc01db48>
   1debc:	0007883a 	mov	r3,zero
   1dec0:	5811883a 	mov	r8,r11
   1dec4:	00bfffc4 	movi	r2,-1
   1dec8:	0401ffc4 	movi	r16,2047
   1decc:	003e7806 	br	1d8b0 <__alt_data_end+0xfc01d8b0>
   1ded0:	4462b03a 	or	r17,r8,r17
   1ded4:	8822c03a 	cmpne	r17,r17,zero
   1ded8:	0009883a 	mov	r4,zero
   1dedc:	003fa006 	br	1dd60 <__alt_data_end+0xfc01dd60>
   1dee0:	4811883a 	mov	r8,r9
   1dee4:	3023883a 	mov	r17,r6
   1dee8:	0401ffc4 	movi	r16,2047
   1deec:	003e0706 	br	1d70c <__alt_data_end+0xfc01d70c>
   1def0:	4811883a 	mov	r8,r9
   1def4:	3023883a 	mov	r17,r6
   1def8:	003e0406 	br	1d70c <__alt_data_end+0xfc01d70c>
   1defc:	21fff804 	addi	r7,r4,-32
   1df00:	01400804 	movi	r5,32
   1df04:	41ced83a 	srl	r7,r8,r7
   1df08:	21400a26 	beq	r4,r5,1df34 <__adddf3+0x8a4>
   1df0c:	01401004 	movi	r5,64
   1df10:	2909c83a 	sub	r4,r5,r4
   1df14:	4108983a 	sll	r4,r8,r4
   1df18:	2448b03a 	or	r4,r4,r17
   1df1c:	2008c03a 	cmpne	r4,r4,zero
   1df20:	3922b03a 	or	r17,r7,r4
   1df24:	0009883a 	mov	r4,zero
   1df28:	003f8d06 	br	1dd60 <__alt_data_end+0xfc01dd60>
   1df2c:	0007883a 	mov	r3,zero
   1df30:	003fdd06 	br	1dea8 <__alt_data_end+0xfc01dea8>
   1df34:	0009883a 	mov	r4,zero
   1df38:	003ff706 	br	1df18 <__alt_data_end+0xfc01df18>

0001df3c <__divdf3>:
   1df3c:	defff004 	addi	sp,sp,-64
   1df40:	dc800815 	stw	r18,32(sp)
   1df44:	2824d53a 	srli	r18,r5,20
   1df48:	dd800c15 	stw	r22,48(sp)
   1df4c:	282cd7fa 	srli	r22,r5,31
   1df50:	dc000615 	stw	r16,24(sp)
   1df54:	04000434 	movhi	r16,16
   1df58:	843fffc4 	addi	r16,r16,-1
   1df5c:	dfc00f15 	stw	ra,60(sp)
   1df60:	df000e15 	stw	fp,56(sp)
   1df64:	ddc00d15 	stw	r23,52(sp)
   1df68:	dd400b15 	stw	r21,44(sp)
   1df6c:	dd000a15 	stw	r20,40(sp)
   1df70:	dcc00915 	stw	r19,36(sp)
   1df74:	dc400715 	stw	r17,28(sp)
   1df78:	9481ffcc 	andi	r18,r18,2047
   1df7c:	2c20703a 	and	r16,r5,r16
   1df80:	b2003fcc 	andi	r8,r22,255
   1df84:	90006126 	beq	r18,zero,1e10c <__divdf3+0x1d0>
   1df88:	0081ffc4 	movi	r2,2047
   1df8c:	202b883a 	mov	r21,r4
   1df90:	90803726 	beq	r18,r2,1e070 <__divdf3+0x134>
   1df94:	80800434 	orhi	r2,r16,16
   1df98:	100490fa 	slli	r2,r2,3
   1df9c:	2020d77a 	srli	r16,r4,29
   1dfa0:	202a90fa 	slli	r21,r4,3
   1dfa4:	94bf0044 	addi	r18,r18,-1023
   1dfa8:	80a0b03a 	or	r16,r16,r2
   1dfac:	0013883a 	mov	r9,zero
   1dfb0:	000b883a 	mov	r5,zero
   1dfb4:	3806d53a 	srli	r3,r7,20
   1dfb8:	382ed7fa 	srli	r23,r7,31
   1dfbc:	04400434 	movhi	r17,16
   1dfc0:	8c7fffc4 	addi	r17,r17,-1
   1dfc4:	18c1ffcc 	andi	r3,r3,2047
   1dfc8:	3029883a 	mov	r20,r6
   1dfcc:	3c62703a 	and	r17,r7,r17
   1dfd0:	bf003fcc 	andi	fp,r23,255
   1dfd4:	18006e26 	beq	r3,zero,1e190 <__divdf3+0x254>
   1dfd8:	0081ffc4 	movi	r2,2047
   1dfdc:	18806626 	beq	r3,r2,1e178 <__divdf3+0x23c>
   1dfe0:	88800434 	orhi	r2,r17,16
   1dfe4:	100490fa 	slli	r2,r2,3
   1dfe8:	3022d77a 	srli	r17,r6,29
   1dfec:	302890fa 	slli	r20,r6,3
   1dff0:	18ff0044 	addi	r3,r3,-1023
   1dff4:	88a2b03a 	or	r17,r17,r2
   1dff8:	000f883a 	mov	r7,zero
   1dffc:	b5e6f03a 	xor	r19,r22,r23
   1e000:	3a4cb03a 	or	r6,r7,r9
   1e004:	008003c4 	movi	r2,15
   1e008:	9809883a 	mov	r4,r19
   1e00c:	90c7c83a 	sub	r3,r18,r3
   1e010:	9cc03fcc 	andi	r19,r19,255
   1e014:	11809636 	bltu	r2,r6,1e270 <__divdf3+0x334>
   1e018:	300c90ba 	slli	r6,r6,2
   1e01c:	008000b4 	movhi	r2,2
   1e020:	10b80c04 	addi	r2,r2,-8144
   1e024:	308d883a 	add	r6,r6,r2
   1e028:	30800017 	ldw	r2,0(r6)
   1e02c:	1000683a 	jmp	r2
   1e030:	0001e270 	cmpltui	zero,zero,1929
   1e034:	0001e0a8 	cmpgeui	zero,zero,1922
   1e038:	0001e260 	cmpeqi	zero,zero,1929
   1e03c:	0001e09c 	xori	zero,zero,1922
   1e040:	0001e260 	cmpeqi	zero,zero,1929
   1e044:	0001e234 	movhi	zero,1928
   1e048:	0001e260 	cmpeqi	zero,zero,1929
   1e04c:	0001e09c 	xori	zero,zero,1922
   1e050:	0001e0a8 	cmpgeui	zero,zero,1922
   1e054:	0001e0a8 	cmpgeui	zero,zero,1922
   1e058:	0001e234 	movhi	zero,1928
   1e05c:	0001e09c 	xori	zero,zero,1922
   1e060:	0001e08c 	andi	zero,zero,1922
   1e064:	0001e08c 	andi	zero,zero,1922
   1e068:	0001e08c 	andi	zero,zero,1922
   1e06c:	0001e5f8 	rdprs	zero,zero,1943
   1e070:	2404b03a 	or	r2,r4,r16
   1e074:	10006c1e 	bne	r2,zero,1e228 <__divdf3+0x2ec>
   1e078:	02400204 	movi	r9,8
   1e07c:	0021883a 	mov	r16,zero
   1e080:	002b883a 	mov	r21,zero
   1e084:	01400084 	movi	r5,2
   1e088:	003fca06 	br	1dfb4 <__alt_data_end+0xfc01dfb4>
   1e08c:	8023883a 	mov	r17,r16
   1e090:	a829883a 	mov	r20,r21
   1e094:	4039883a 	mov	fp,r8
   1e098:	280f883a 	mov	r7,r5
   1e09c:	00800084 	movi	r2,2
   1e0a0:	3881601e 	bne	r7,r2,1e624 <__divdf3+0x6e8>
   1e0a4:	e027883a 	mov	r19,fp
   1e0a8:	9900004c 	andi	r4,r19,1
   1e0ac:	0081ffc4 	movi	r2,2047
   1e0b0:	0021883a 	mov	r16,zero
   1e0b4:	002b883a 	mov	r21,zero
   1e0b8:	1004953a 	slli	r2,r2,20
   1e0bc:	20c03fcc 	andi	r3,r4,255
   1e0c0:	01400434 	movhi	r5,16
   1e0c4:	297fffc4 	addi	r5,r5,-1
   1e0c8:	180697fa 	slli	r3,r3,31
   1e0cc:	8160703a 	and	r16,r16,r5
   1e0d0:	80a0b03a 	or	r16,r16,r2
   1e0d4:	80c6b03a 	or	r3,r16,r3
   1e0d8:	a805883a 	mov	r2,r21
   1e0dc:	dfc00f17 	ldw	ra,60(sp)
   1e0e0:	df000e17 	ldw	fp,56(sp)
   1e0e4:	ddc00d17 	ldw	r23,52(sp)
   1e0e8:	dd800c17 	ldw	r22,48(sp)
   1e0ec:	dd400b17 	ldw	r21,44(sp)
   1e0f0:	dd000a17 	ldw	r20,40(sp)
   1e0f4:	dcc00917 	ldw	r19,36(sp)
   1e0f8:	dc800817 	ldw	r18,32(sp)
   1e0fc:	dc400717 	ldw	r17,28(sp)
   1e100:	dc000617 	ldw	r16,24(sp)
   1e104:	dec01004 	addi	sp,sp,64
   1e108:	f800283a 	ret
   1e10c:	2404b03a 	or	r2,r4,r16
   1e110:	2023883a 	mov	r17,r4
   1e114:	10003f26 	beq	r2,zero,1e214 <__divdf3+0x2d8>
   1e118:	80015e26 	beq	r16,zero,1e694 <__divdf3+0x758>
   1e11c:	8009883a 	mov	r4,r16
   1e120:	d9800215 	stw	r6,8(sp)
   1e124:	d9c00515 	stw	r7,20(sp)
   1e128:	da000415 	stw	r8,16(sp)
   1e12c:	000f35c0 	call	f35c <__clzsi2>
   1e130:	d9800217 	ldw	r6,8(sp)
   1e134:	d9c00517 	ldw	r7,20(sp)
   1e138:	da000417 	ldw	r8,16(sp)
   1e13c:	113ffd44 	addi	r4,r2,-11
   1e140:	00c00704 	movi	r3,28
   1e144:	19014f16 	blt	r3,r4,1e684 <__divdf3+0x748>
   1e148:	00c00744 	movi	r3,29
   1e14c:	157ffe04 	addi	r21,r2,-8
   1e150:	1907c83a 	sub	r3,r3,r4
   1e154:	8560983a 	sll	r16,r16,r21
   1e158:	88c6d83a 	srl	r3,r17,r3
   1e15c:	8d6a983a 	sll	r21,r17,r21
   1e160:	1c20b03a 	or	r16,r3,r16
   1e164:	1080fcc4 	addi	r2,r2,1011
   1e168:	00a5c83a 	sub	r18,zero,r2
   1e16c:	0013883a 	mov	r9,zero
   1e170:	000b883a 	mov	r5,zero
   1e174:	003f8f06 	br	1dfb4 <__alt_data_end+0xfc01dfb4>
   1e178:	3444b03a 	or	r2,r6,r17
   1e17c:	1000231e 	bne	r2,zero,1e20c <__divdf3+0x2d0>
   1e180:	0023883a 	mov	r17,zero
   1e184:	0029883a 	mov	r20,zero
   1e188:	01c00084 	movi	r7,2
   1e18c:	003f9b06 	br	1dffc <__alt_data_end+0xfc01dffc>
   1e190:	3444b03a 	or	r2,r6,r17
   1e194:	10001926 	beq	r2,zero,1e1fc <__divdf3+0x2c0>
   1e198:	88014b26 	beq	r17,zero,1e6c8 <__divdf3+0x78c>
   1e19c:	8809883a 	mov	r4,r17
   1e1a0:	d9400115 	stw	r5,4(sp)
   1e1a4:	d9800215 	stw	r6,8(sp)
   1e1a8:	da000415 	stw	r8,16(sp)
   1e1ac:	da400315 	stw	r9,12(sp)
   1e1b0:	000f35c0 	call	f35c <__clzsi2>
   1e1b4:	d9400117 	ldw	r5,4(sp)
   1e1b8:	d9800217 	ldw	r6,8(sp)
   1e1bc:	da000417 	ldw	r8,16(sp)
   1e1c0:	da400317 	ldw	r9,12(sp)
   1e1c4:	113ffd44 	addi	r4,r2,-11
   1e1c8:	00c00704 	movi	r3,28
   1e1cc:	19013a16 	blt	r3,r4,1e6b8 <__divdf3+0x77c>
   1e1d0:	00c00744 	movi	r3,29
   1e1d4:	153ffe04 	addi	r20,r2,-8
   1e1d8:	1907c83a 	sub	r3,r3,r4
   1e1dc:	8d22983a 	sll	r17,r17,r20
   1e1e0:	30c6d83a 	srl	r3,r6,r3
   1e1e4:	3528983a 	sll	r20,r6,r20
   1e1e8:	1c62b03a 	or	r17,r3,r17
   1e1ec:	1080fcc4 	addi	r2,r2,1011
   1e1f0:	0087c83a 	sub	r3,zero,r2
   1e1f4:	000f883a 	mov	r7,zero
   1e1f8:	003f8006 	br	1dffc <__alt_data_end+0xfc01dffc>
   1e1fc:	0023883a 	mov	r17,zero
   1e200:	0029883a 	mov	r20,zero
   1e204:	01c00044 	movi	r7,1
   1e208:	003f7c06 	br	1dffc <__alt_data_end+0xfc01dffc>
   1e20c:	01c000c4 	movi	r7,3
   1e210:	003f7a06 	br	1dffc <__alt_data_end+0xfc01dffc>
   1e214:	02400104 	movi	r9,4
   1e218:	0021883a 	mov	r16,zero
   1e21c:	002b883a 	mov	r21,zero
   1e220:	01400044 	movi	r5,1
   1e224:	003f6306 	br	1dfb4 <__alt_data_end+0xfc01dfb4>
   1e228:	02400304 	movi	r9,12
   1e22c:	014000c4 	movi	r5,3
   1e230:	003f6006 	br	1dfb4 <__alt_data_end+0xfc01dfb4>
   1e234:	04000434 	movhi	r16,16
   1e238:	0009883a 	mov	r4,zero
   1e23c:	843fffc4 	addi	r16,r16,-1
   1e240:	057fffc4 	movi	r21,-1
   1e244:	0081ffc4 	movi	r2,2047
   1e248:	003f9b06 	br	1e0b8 <__alt_data_end+0xfc01e0b8>
   1e24c:	00c00044 	movi	r3,1
   1e250:	1887c83a 	sub	r3,r3,r2
   1e254:	01000e04 	movi	r4,56
   1e258:	20c1530e 	bge	r4,r3,1e7a8 <__divdf3+0x86c>
   1e25c:	9900004c 	andi	r4,r19,1
   1e260:	0005883a 	mov	r2,zero
   1e264:	0021883a 	mov	r16,zero
   1e268:	002b883a 	mov	r21,zero
   1e26c:	003f9206 	br	1e0b8 <__alt_data_end+0xfc01e0b8>
   1e270:	8c012e36 	bltu	r17,r16,1e72c <__divdf3+0x7f0>
   1e274:	84412c26 	beq	r16,r17,1e728 <__divdf3+0x7ec>
   1e278:	a82f883a 	mov	r23,r21
   1e27c:	18ffffc4 	addi	r3,r3,-1
   1e280:	002b883a 	mov	r21,zero
   1e284:	a004d63a 	srli	r2,r20,24
   1e288:	8822923a 	slli	r17,r17,8
   1e28c:	a028923a 	slli	r20,r20,8
   1e290:	8009883a 	mov	r4,r16
   1e294:	88acb03a 	or	r22,r17,r2
   1e298:	dd000015 	stw	r20,0(sp)
   1e29c:	b028d43a 	srli	r20,r22,16
   1e2a0:	d8c00215 	stw	r3,8(sp)
   1e2a4:	b4bfffcc 	andi	r18,r22,65535
   1e2a8:	a00b883a 	mov	r5,r20
   1e2ac:	000d7fc0 	call	d7fc <__udivsi3>
   1e2b0:	100b883a 	mov	r5,r2
   1e2b4:	9009883a 	mov	r4,r18
   1e2b8:	1023883a 	mov	r17,r2
   1e2bc:	000d8b80 	call	d8b8 <__mulsi3>
   1e2c0:	8009883a 	mov	r4,r16
   1e2c4:	a00b883a 	mov	r5,r20
   1e2c8:	1039883a 	mov	fp,r2
   1e2cc:	000d8600 	call	d860 <__umodsi3>
   1e2d0:	1004943a 	slli	r2,r2,16
   1e2d4:	b808d43a 	srli	r4,r23,16
   1e2d8:	d8c00217 	ldw	r3,8(sp)
   1e2dc:	2084b03a 	or	r2,r4,r2
   1e2e0:	1700062e 	bgeu	r2,fp,1e2fc <__divdf3+0x3c0>
   1e2e4:	1585883a 	add	r2,r2,r22
   1e2e8:	893fffc4 	addi	r4,r17,-1
   1e2ec:	15811d36 	bltu	r2,r22,1e764 <__divdf3+0x828>
   1e2f0:	17011c2e 	bgeu	r2,fp,1e764 <__divdf3+0x828>
   1e2f4:	8c7fff84 	addi	r17,r17,-2
   1e2f8:	1585883a 	add	r2,r2,r22
   1e2fc:	1739c83a 	sub	fp,r2,fp
   1e300:	a00b883a 	mov	r5,r20
   1e304:	e009883a 	mov	r4,fp
   1e308:	d8c00215 	stw	r3,8(sp)
   1e30c:	000d7fc0 	call	d7fc <__udivsi3>
   1e310:	100b883a 	mov	r5,r2
   1e314:	9009883a 	mov	r4,r18
   1e318:	1021883a 	mov	r16,r2
   1e31c:	000d8b80 	call	d8b8 <__mulsi3>
   1e320:	a00b883a 	mov	r5,r20
   1e324:	e009883a 	mov	r4,fp
   1e328:	d8800415 	stw	r2,16(sp)
   1e32c:	000d8600 	call	d860 <__umodsi3>
   1e330:	1004943a 	slli	r2,r2,16
   1e334:	da000417 	ldw	r8,16(sp)
   1e338:	bdffffcc 	andi	r23,r23,65535
   1e33c:	b884b03a 	or	r2,r23,r2
   1e340:	d8c00217 	ldw	r3,8(sp)
   1e344:	1200062e 	bgeu	r2,r8,1e360 <__divdf3+0x424>
   1e348:	1585883a 	add	r2,r2,r22
   1e34c:	813fffc4 	addi	r4,r16,-1
   1e350:	15810236 	bltu	r2,r22,1e75c <__divdf3+0x820>
   1e354:	1201012e 	bgeu	r2,r8,1e75c <__divdf3+0x820>
   1e358:	843fff84 	addi	r16,r16,-2
   1e35c:	1585883a 	add	r2,r2,r22
   1e360:	8822943a 	slli	r17,r17,16
   1e364:	d9800017 	ldw	r6,0(sp)
   1e368:	1211c83a 	sub	r8,r2,r8
   1e36c:	8c22b03a 	or	r17,r17,r16
   1e370:	373fffcc 	andi	fp,r6,65535
   1e374:	8abfffcc 	andi	r10,r17,65535
   1e378:	8820d43a 	srli	r16,r17,16
   1e37c:	5009883a 	mov	r4,r10
   1e380:	e00b883a 	mov	r5,fp
   1e384:	302ed43a 	srli	r23,r6,16
   1e388:	d8c00215 	stw	r3,8(sp)
   1e38c:	da000415 	stw	r8,16(sp)
   1e390:	da800115 	stw	r10,4(sp)
   1e394:	000d8b80 	call	d8b8 <__mulsi3>
   1e398:	800b883a 	mov	r5,r16
   1e39c:	e009883a 	mov	r4,fp
   1e3a0:	d8800515 	stw	r2,20(sp)
   1e3a4:	000d8b80 	call	d8b8 <__mulsi3>
   1e3a8:	8009883a 	mov	r4,r16
   1e3ac:	b80b883a 	mov	r5,r23
   1e3b0:	d8800315 	stw	r2,12(sp)
   1e3b4:	000d8b80 	call	d8b8 <__mulsi3>
   1e3b8:	da800117 	ldw	r10,4(sp)
   1e3bc:	b80b883a 	mov	r5,r23
   1e3c0:	1021883a 	mov	r16,r2
   1e3c4:	5009883a 	mov	r4,r10
   1e3c8:	000d8b80 	call	d8b8 <__mulsi3>
   1e3cc:	d9c00517 	ldw	r7,20(sp)
   1e3d0:	da400317 	ldw	r9,12(sp)
   1e3d4:	d8c00217 	ldw	r3,8(sp)
   1e3d8:	3808d43a 	srli	r4,r7,16
   1e3dc:	1245883a 	add	r2,r2,r9
   1e3e0:	da000417 	ldw	r8,16(sp)
   1e3e4:	2085883a 	add	r2,r4,r2
   1e3e8:	1240022e 	bgeu	r2,r9,1e3f4 <__divdf3+0x4b8>
   1e3ec:	01000074 	movhi	r4,1
   1e3f0:	8121883a 	add	r16,r16,r4
   1e3f4:	1008d43a 	srli	r4,r2,16
   1e3f8:	1004943a 	slli	r2,r2,16
   1e3fc:	39ffffcc 	andi	r7,r7,65535
   1e400:	2409883a 	add	r4,r4,r16
   1e404:	11c5883a 	add	r2,r2,r7
   1e408:	4100bb36 	bltu	r8,r4,1e6f8 <__divdf3+0x7bc>
   1e40c:	4100d726 	beq	r8,r4,1e76c <__divdf3+0x830>
   1e410:	4109c83a 	sub	r4,r8,r4
   1e414:	a8a1c83a 	sub	r16,r21,r2
   1e418:	ac2b803a 	cmpltu	r21,r21,r16
   1e41c:	256bc83a 	sub	r21,r4,r21
   1e420:	b540d926 	beq	r22,r21,1e788 <__divdf3+0x84c>
   1e424:	a00b883a 	mov	r5,r20
   1e428:	a809883a 	mov	r4,r21
   1e42c:	d8c00215 	stw	r3,8(sp)
   1e430:	000d7fc0 	call	d7fc <__udivsi3>
   1e434:	100b883a 	mov	r5,r2
   1e438:	9009883a 	mov	r4,r18
   1e43c:	d8800515 	stw	r2,20(sp)
   1e440:	000d8b80 	call	d8b8 <__mulsi3>
   1e444:	a809883a 	mov	r4,r21
   1e448:	a00b883a 	mov	r5,r20
   1e44c:	d8800415 	stw	r2,16(sp)
   1e450:	000d8600 	call	d860 <__umodsi3>
   1e454:	1004943a 	slli	r2,r2,16
   1e458:	8008d43a 	srli	r4,r16,16
   1e45c:	da000417 	ldw	r8,16(sp)
   1e460:	d8c00217 	ldw	r3,8(sp)
   1e464:	2084b03a 	or	r2,r4,r2
   1e468:	d9c00517 	ldw	r7,20(sp)
   1e46c:	1200062e 	bgeu	r2,r8,1e488 <__divdf3+0x54c>
   1e470:	1585883a 	add	r2,r2,r22
   1e474:	393fffc4 	addi	r4,r7,-1
   1e478:	1580c536 	bltu	r2,r22,1e790 <__divdf3+0x854>
   1e47c:	1200c42e 	bgeu	r2,r8,1e790 <__divdf3+0x854>
   1e480:	39ffff84 	addi	r7,r7,-2
   1e484:	1585883a 	add	r2,r2,r22
   1e488:	122bc83a 	sub	r21,r2,r8
   1e48c:	a00b883a 	mov	r5,r20
   1e490:	a809883a 	mov	r4,r21
   1e494:	d8c00215 	stw	r3,8(sp)
   1e498:	d9c00515 	stw	r7,20(sp)
   1e49c:	000d7fc0 	call	d7fc <__udivsi3>
   1e4a0:	9009883a 	mov	r4,r18
   1e4a4:	100b883a 	mov	r5,r2
   1e4a8:	d8800415 	stw	r2,16(sp)
   1e4ac:	000d8b80 	call	d8b8 <__mulsi3>
   1e4b0:	a809883a 	mov	r4,r21
   1e4b4:	a00b883a 	mov	r5,r20
   1e4b8:	1025883a 	mov	r18,r2
   1e4bc:	000d8600 	call	d860 <__umodsi3>
   1e4c0:	1004943a 	slli	r2,r2,16
   1e4c4:	813fffcc 	andi	r4,r16,65535
   1e4c8:	d8c00217 	ldw	r3,8(sp)
   1e4cc:	20a0b03a 	or	r16,r4,r2
   1e4d0:	d9c00517 	ldw	r7,20(sp)
   1e4d4:	da000417 	ldw	r8,16(sp)
   1e4d8:	8480062e 	bgeu	r16,r18,1e4f4 <__divdf3+0x5b8>
   1e4dc:	85a1883a 	add	r16,r16,r22
   1e4e0:	40bfffc4 	addi	r2,r8,-1
   1e4e4:	8580ac36 	bltu	r16,r22,1e798 <__divdf3+0x85c>
   1e4e8:	8480ab2e 	bgeu	r16,r18,1e798 <__divdf3+0x85c>
   1e4ec:	423fff84 	addi	r8,r8,-2
   1e4f0:	85a1883a 	add	r16,r16,r22
   1e4f4:	3804943a 	slli	r2,r7,16
   1e4f8:	84a1c83a 	sub	r16,r16,r18
   1e4fc:	e009883a 	mov	r4,fp
   1e500:	1228b03a 	or	r20,r2,r8
   1e504:	a1ffffcc 	andi	r7,r20,65535
   1e508:	a024d43a 	srli	r18,r20,16
   1e50c:	380b883a 	mov	r5,r7
   1e510:	d8c00215 	stw	r3,8(sp)
   1e514:	d9c00515 	stw	r7,20(sp)
   1e518:	000d8b80 	call	d8b8 <__mulsi3>
   1e51c:	900b883a 	mov	r5,r18
   1e520:	e009883a 	mov	r4,fp
   1e524:	102b883a 	mov	r21,r2
   1e528:	000d8b80 	call	d8b8 <__mulsi3>
   1e52c:	900b883a 	mov	r5,r18
   1e530:	b809883a 	mov	r4,r23
   1e534:	1039883a 	mov	fp,r2
   1e538:	000d8b80 	call	d8b8 <__mulsi3>
   1e53c:	d9c00517 	ldw	r7,20(sp)
   1e540:	b80b883a 	mov	r5,r23
   1e544:	1025883a 	mov	r18,r2
   1e548:	3809883a 	mov	r4,r7
   1e54c:	000d8b80 	call	d8b8 <__mulsi3>
   1e550:	a808d43a 	srli	r4,r21,16
   1e554:	1705883a 	add	r2,r2,fp
   1e558:	d8c00217 	ldw	r3,8(sp)
   1e55c:	2085883a 	add	r2,r4,r2
   1e560:	1700022e 	bgeu	r2,fp,1e56c <__divdf3+0x630>
   1e564:	01000074 	movhi	r4,1
   1e568:	9125883a 	add	r18,r18,r4
   1e56c:	1008d43a 	srli	r4,r2,16
   1e570:	1004943a 	slli	r2,r2,16
   1e574:	ad7fffcc 	andi	r21,r21,65535
   1e578:	2489883a 	add	r4,r4,r18
   1e57c:	1545883a 	add	r2,r2,r21
   1e580:	81003836 	bltu	r16,r4,1e664 <__divdf3+0x728>
   1e584:	81003626 	beq	r16,r4,1e660 <__divdf3+0x724>
   1e588:	a5000054 	ori	r20,r20,1
   1e58c:	1880ffc4 	addi	r2,r3,1023
   1e590:	00bf2e0e 	bge	zero,r2,1e24c <__alt_data_end+0xfc01e24c>
   1e594:	a10001cc 	andi	r4,r20,7
   1e598:	20000726 	beq	r4,zero,1e5b8 <__divdf3+0x67c>
   1e59c:	a10003cc 	andi	r4,r20,15
   1e5a0:	01400104 	movi	r5,4
   1e5a4:	21400426 	beq	r4,r5,1e5b8 <__divdf3+0x67c>
   1e5a8:	a149883a 	add	r4,r20,r5
   1e5ac:	2529803a 	cmpltu	r20,r4,r20
   1e5b0:	8d23883a 	add	r17,r17,r20
   1e5b4:	2029883a 	mov	r20,r4
   1e5b8:	8900402c 	andhi	r4,r17,256
   1e5bc:	20000426 	beq	r4,zero,1e5d0 <__divdf3+0x694>
   1e5c0:	18810004 	addi	r2,r3,1024
   1e5c4:	00ffc034 	movhi	r3,65280
   1e5c8:	18ffffc4 	addi	r3,r3,-1
   1e5cc:	88e2703a 	and	r17,r17,r3
   1e5d0:	00c1ff84 	movi	r3,2046
   1e5d4:	18beb416 	blt	r3,r2,1e0a8 <__alt_data_end+0xfc01e0a8>
   1e5d8:	a028d0fa 	srli	r20,r20,3
   1e5dc:	882a977a 	slli	r21,r17,29
   1e5e0:	8820927a 	slli	r16,r17,9
   1e5e4:	1081ffcc 	andi	r2,r2,2047
   1e5e8:	ad2ab03a 	or	r21,r21,r20
   1e5ec:	8020d33a 	srli	r16,r16,12
   1e5f0:	9900004c 	andi	r4,r19,1
   1e5f4:	003eb006 	br	1e0b8 <__alt_data_end+0xfc01e0b8>
   1e5f8:	8080022c 	andhi	r2,r16,8
   1e5fc:	10001226 	beq	r2,zero,1e648 <__divdf3+0x70c>
   1e600:	8880022c 	andhi	r2,r17,8
   1e604:	1000101e 	bne	r2,zero,1e648 <__divdf3+0x70c>
   1e608:	00800434 	movhi	r2,16
   1e60c:	8c000234 	orhi	r16,r17,8
   1e610:	10bfffc4 	addi	r2,r2,-1
   1e614:	b809883a 	mov	r4,r23
   1e618:	80a0703a 	and	r16,r16,r2
   1e61c:	a02b883a 	mov	r21,r20
   1e620:	003f0806 	br	1e244 <__alt_data_end+0xfc01e244>
   1e624:	008000c4 	movi	r2,3
   1e628:	3880b126 	beq	r7,r2,1e8f0 <__divdf3+0x9b4>
   1e62c:	00800044 	movi	r2,1
   1e630:	38805b1e 	bne	r7,r2,1e7a0 <__divdf3+0x864>
   1e634:	e009883a 	mov	r4,fp
   1e638:	0005883a 	mov	r2,zero
   1e63c:	0021883a 	mov	r16,zero
   1e640:	002b883a 	mov	r21,zero
   1e644:	003e9c06 	br	1e0b8 <__alt_data_end+0xfc01e0b8>
   1e648:	00800434 	movhi	r2,16
   1e64c:	84000234 	orhi	r16,r16,8
   1e650:	10bfffc4 	addi	r2,r2,-1
   1e654:	b009883a 	mov	r4,r22
   1e658:	80a0703a 	and	r16,r16,r2
   1e65c:	003ef906 	br	1e244 <__alt_data_end+0xfc01e244>
   1e660:	103fca26 	beq	r2,zero,1e58c <__alt_data_end+0xfc01e58c>
   1e664:	b421883a 	add	r16,r22,r16
   1e668:	a17fffc4 	addi	r5,r20,-1
   1e66c:	8580422e 	bgeu	r16,r22,1e778 <__divdf3+0x83c>
   1e670:	2829883a 	mov	r20,r5
   1e674:	813fc41e 	bne	r16,r4,1e588 <__alt_data_end+0xfc01e588>
   1e678:	d9800017 	ldw	r6,0(sp)
   1e67c:	30bfc21e 	bne	r6,r2,1e588 <__alt_data_end+0xfc01e588>
   1e680:	003fc206 	br	1e58c <__alt_data_end+0xfc01e58c>
   1e684:	143ff604 	addi	r16,r2,-40
   1e688:	8c20983a 	sll	r16,r17,r16
   1e68c:	002b883a 	mov	r21,zero
   1e690:	003eb406 	br	1e164 <__alt_data_end+0xfc01e164>
   1e694:	d9800215 	stw	r6,8(sp)
   1e698:	d9c00515 	stw	r7,20(sp)
   1e69c:	da000415 	stw	r8,16(sp)
   1e6a0:	000f35c0 	call	f35c <__clzsi2>
   1e6a4:	10800804 	addi	r2,r2,32
   1e6a8:	da000417 	ldw	r8,16(sp)
   1e6ac:	d9c00517 	ldw	r7,20(sp)
   1e6b0:	d9800217 	ldw	r6,8(sp)
   1e6b4:	003ea106 	br	1e13c <__alt_data_end+0xfc01e13c>
   1e6b8:	147ff604 	addi	r17,r2,-40
   1e6bc:	3462983a 	sll	r17,r6,r17
   1e6c0:	0029883a 	mov	r20,zero
   1e6c4:	003ec906 	br	1e1ec <__alt_data_end+0xfc01e1ec>
   1e6c8:	3009883a 	mov	r4,r6
   1e6cc:	d9400115 	stw	r5,4(sp)
   1e6d0:	d9800215 	stw	r6,8(sp)
   1e6d4:	da000415 	stw	r8,16(sp)
   1e6d8:	da400315 	stw	r9,12(sp)
   1e6dc:	000f35c0 	call	f35c <__clzsi2>
   1e6e0:	10800804 	addi	r2,r2,32
   1e6e4:	da400317 	ldw	r9,12(sp)
   1e6e8:	da000417 	ldw	r8,16(sp)
   1e6ec:	d9800217 	ldw	r6,8(sp)
   1e6f0:	d9400117 	ldw	r5,4(sp)
   1e6f4:	003eb306 	br	1e1c4 <__alt_data_end+0xfc01e1c4>
   1e6f8:	d9800017 	ldw	r6,0(sp)
   1e6fc:	a9ab883a 	add	r21,r21,r6
   1e700:	a98b803a 	cmpltu	r5,r21,r6
   1e704:	2d8b883a 	add	r5,r5,r22
   1e708:	2a11883a 	add	r8,r5,r8
   1e70c:	897fffc4 	addi	r5,r17,-1
   1e710:	b2000c2e 	bgeu	r22,r8,1e744 <__divdf3+0x808>
   1e714:	41003f36 	bltu	r8,r4,1e814 <__divdf3+0x8d8>
   1e718:	22006c26 	beq	r4,r8,1e8cc <__divdf3+0x990>
   1e71c:	4109c83a 	sub	r4,r8,r4
   1e720:	2823883a 	mov	r17,r5
   1e724:	003f3b06 	br	1e414 <__alt_data_end+0xfc01e414>
   1e728:	ad3ed336 	bltu	r21,r20,1e278 <__alt_data_end+0xfc01e278>
   1e72c:	a804d07a 	srli	r2,r21,1
   1e730:	802e97fa 	slli	r23,r16,31
   1e734:	a82a97fa 	slli	r21,r21,31
   1e738:	8020d07a 	srli	r16,r16,1
   1e73c:	b8aeb03a 	or	r23,r23,r2
   1e740:	003ed006 	br	1e284 <__alt_data_end+0xfc01e284>
   1e744:	b23ff51e 	bne	r22,r8,1e71c <__alt_data_end+0xfc01e71c>
   1e748:	d9800017 	ldw	r6,0(sp)
   1e74c:	a9bff12e 	bgeu	r21,r6,1e714 <__alt_data_end+0xfc01e714>
   1e750:	b109c83a 	sub	r4,r22,r4
   1e754:	2823883a 	mov	r17,r5
   1e758:	003f2e06 	br	1e414 <__alt_data_end+0xfc01e414>
   1e75c:	2021883a 	mov	r16,r4
   1e760:	003eff06 	br	1e360 <__alt_data_end+0xfc01e360>
   1e764:	2023883a 	mov	r17,r4
   1e768:	003ee406 	br	1e2fc <__alt_data_end+0xfc01e2fc>
   1e76c:	a8bfe236 	bltu	r21,r2,1e6f8 <__alt_data_end+0xfc01e6f8>
   1e770:	0009883a 	mov	r4,zero
   1e774:	003f2706 	br	1e414 <__alt_data_end+0xfc01e414>
   1e778:	81002d36 	bltu	r16,r4,1e830 <__divdf3+0x8f4>
   1e77c:	24005626 	beq	r4,r16,1e8d8 <__divdf3+0x99c>
   1e780:	2829883a 	mov	r20,r5
   1e784:	003f8006 	br	1e588 <__alt_data_end+0xfc01e588>
   1e788:	053fffc4 	movi	r20,-1
   1e78c:	003f7f06 	br	1e58c <__alt_data_end+0xfc01e58c>
   1e790:	200f883a 	mov	r7,r4
   1e794:	003f3c06 	br	1e488 <__alt_data_end+0xfc01e488>
   1e798:	1011883a 	mov	r8,r2
   1e79c:	003f5506 	br	1e4f4 <__alt_data_end+0xfc01e4f4>
   1e7a0:	e027883a 	mov	r19,fp
   1e7a4:	003f7906 	br	1e58c <__alt_data_end+0xfc01e58c>
   1e7a8:	010007c4 	movi	r4,31
   1e7ac:	20c02816 	blt	r4,r3,1e850 <__divdf3+0x914>
   1e7b0:	00800804 	movi	r2,32
   1e7b4:	10c5c83a 	sub	r2,r2,r3
   1e7b8:	888a983a 	sll	r5,r17,r2
   1e7bc:	a0c8d83a 	srl	r4,r20,r3
   1e7c0:	a084983a 	sll	r2,r20,r2
   1e7c4:	88e2d83a 	srl	r17,r17,r3
   1e7c8:	2906b03a 	or	r3,r5,r4
   1e7cc:	1004c03a 	cmpne	r2,r2,zero
   1e7d0:	1886b03a 	or	r3,r3,r2
   1e7d4:	188001cc 	andi	r2,r3,7
   1e7d8:	10000726 	beq	r2,zero,1e7f8 <__divdf3+0x8bc>
   1e7dc:	188003cc 	andi	r2,r3,15
   1e7e0:	01000104 	movi	r4,4
   1e7e4:	11000426 	beq	r2,r4,1e7f8 <__divdf3+0x8bc>
   1e7e8:	1805883a 	mov	r2,r3
   1e7ec:	10c00104 	addi	r3,r2,4
   1e7f0:	1885803a 	cmpltu	r2,r3,r2
   1e7f4:	88a3883a 	add	r17,r17,r2
   1e7f8:	8880202c 	andhi	r2,r17,128
   1e7fc:	10002926 	beq	r2,zero,1e8a4 <__divdf3+0x968>
   1e800:	9900004c 	andi	r4,r19,1
   1e804:	00800044 	movi	r2,1
   1e808:	0021883a 	mov	r16,zero
   1e80c:	002b883a 	mov	r21,zero
   1e810:	003e2906 	br	1e0b8 <__alt_data_end+0xfc01e0b8>
   1e814:	d9800017 	ldw	r6,0(sp)
   1e818:	8c7fff84 	addi	r17,r17,-2
   1e81c:	a9ab883a 	add	r21,r21,r6
   1e820:	a98b803a 	cmpltu	r5,r21,r6
   1e824:	2d8b883a 	add	r5,r5,r22
   1e828:	2a11883a 	add	r8,r5,r8
   1e82c:	003ef806 	br	1e410 <__alt_data_end+0xfc01e410>
   1e830:	d9800017 	ldw	r6,0(sp)
   1e834:	318f883a 	add	r7,r6,r6
   1e838:	398b803a 	cmpltu	r5,r7,r6
   1e83c:	2d8d883a 	add	r6,r5,r22
   1e840:	81a1883a 	add	r16,r16,r6
   1e844:	a17fff84 	addi	r5,r20,-2
   1e848:	d9c00015 	stw	r7,0(sp)
   1e84c:	003f8806 	br	1e670 <__alt_data_end+0xfc01e670>
   1e850:	013ff844 	movi	r4,-31
   1e854:	2085c83a 	sub	r2,r4,r2
   1e858:	8888d83a 	srl	r4,r17,r2
   1e85c:	00800804 	movi	r2,32
   1e860:	18802126 	beq	r3,r2,1e8e8 <__divdf3+0x9ac>
   1e864:	04001004 	movi	r16,64
   1e868:	80c7c83a 	sub	r3,r16,r3
   1e86c:	88e0983a 	sll	r16,r17,r3
   1e870:	8504b03a 	or	r2,r16,r20
   1e874:	1004c03a 	cmpne	r2,r2,zero
   1e878:	2084b03a 	or	r2,r4,r2
   1e87c:	144001cc 	andi	r17,r2,7
   1e880:	88000d1e 	bne	r17,zero,1e8b8 <__divdf3+0x97c>
   1e884:	0021883a 	mov	r16,zero
   1e888:	102ad0fa 	srli	r21,r2,3
   1e88c:	9900004c 	andi	r4,r19,1
   1e890:	0005883a 	mov	r2,zero
   1e894:	ac6ab03a 	or	r21,r21,r17
   1e898:	003e0706 	br	1e0b8 <__alt_data_end+0xfc01e0b8>
   1e89c:	1007883a 	mov	r3,r2
   1e8a0:	0023883a 	mov	r17,zero
   1e8a4:	8820927a 	slli	r16,r17,9
   1e8a8:	1805883a 	mov	r2,r3
   1e8ac:	8822977a 	slli	r17,r17,29
   1e8b0:	8020d33a 	srli	r16,r16,12
   1e8b4:	003ff406 	br	1e888 <__alt_data_end+0xfc01e888>
   1e8b8:	10c003cc 	andi	r3,r2,15
   1e8bc:	01000104 	movi	r4,4
   1e8c0:	193ff626 	beq	r3,r4,1e89c <__alt_data_end+0xfc01e89c>
   1e8c4:	0023883a 	mov	r17,zero
   1e8c8:	003fc806 	br	1e7ec <__alt_data_end+0xfc01e7ec>
   1e8cc:	a8bfd136 	bltu	r21,r2,1e814 <__alt_data_end+0xfc01e814>
   1e8d0:	2823883a 	mov	r17,r5
   1e8d4:	003fa606 	br	1e770 <__alt_data_end+0xfc01e770>
   1e8d8:	d9800017 	ldw	r6,0(sp)
   1e8dc:	30bfd436 	bltu	r6,r2,1e830 <__alt_data_end+0xfc01e830>
   1e8e0:	2829883a 	mov	r20,r5
   1e8e4:	003f6406 	br	1e678 <__alt_data_end+0xfc01e678>
   1e8e8:	0021883a 	mov	r16,zero
   1e8ec:	003fe006 	br	1e870 <__alt_data_end+0xfc01e870>
   1e8f0:	00800434 	movhi	r2,16
   1e8f4:	8c000234 	orhi	r16,r17,8
   1e8f8:	10bfffc4 	addi	r2,r2,-1
   1e8fc:	e009883a 	mov	r4,fp
   1e900:	80a0703a 	and	r16,r16,r2
   1e904:	a02b883a 	mov	r21,r20
   1e908:	003e4e06 	br	1e244 <__alt_data_end+0xfc01e244>

0001e90c <__eqdf2>:
   1e90c:	2804d53a 	srli	r2,r5,20
   1e910:	3806d53a 	srli	r3,r7,20
   1e914:	02000434 	movhi	r8,16
   1e918:	423fffc4 	addi	r8,r8,-1
   1e91c:	1081ffcc 	andi	r2,r2,2047
   1e920:	0281ffc4 	movi	r10,2047
   1e924:	2a12703a 	and	r9,r5,r8
   1e928:	18c1ffcc 	andi	r3,r3,2047
   1e92c:	3a10703a 	and	r8,r7,r8
   1e930:	280ad7fa 	srli	r5,r5,31
   1e934:	380ed7fa 	srli	r7,r7,31
   1e938:	12801026 	beq	r2,r10,1e97c <__eqdf2+0x70>
   1e93c:	0281ffc4 	movi	r10,2047
   1e940:	1a800a26 	beq	r3,r10,1e96c <__eqdf2+0x60>
   1e944:	10c00226 	beq	r2,r3,1e950 <__eqdf2+0x44>
   1e948:	00800044 	movi	r2,1
   1e94c:	f800283a 	ret
   1e950:	4a3ffd1e 	bne	r9,r8,1e948 <__alt_data_end+0xfc01e948>
   1e954:	21bffc1e 	bne	r4,r6,1e948 <__alt_data_end+0xfc01e948>
   1e958:	29c00c26 	beq	r5,r7,1e98c <__eqdf2+0x80>
   1e95c:	103ffa1e 	bne	r2,zero,1e948 <__alt_data_end+0xfc01e948>
   1e960:	2244b03a 	or	r2,r4,r9
   1e964:	1004c03a 	cmpne	r2,r2,zero
   1e968:	f800283a 	ret
   1e96c:	3214b03a 	or	r10,r6,r8
   1e970:	503ff426 	beq	r10,zero,1e944 <__alt_data_end+0xfc01e944>
   1e974:	00800044 	movi	r2,1
   1e978:	f800283a 	ret
   1e97c:	2254b03a 	or	r10,r4,r9
   1e980:	503fee26 	beq	r10,zero,1e93c <__alt_data_end+0xfc01e93c>
   1e984:	00800044 	movi	r2,1
   1e988:	f800283a 	ret
   1e98c:	0005883a 	mov	r2,zero
   1e990:	f800283a 	ret

0001e994 <__gedf2>:
   1e994:	2804d53a 	srli	r2,r5,20
   1e998:	3806d53a 	srli	r3,r7,20
   1e99c:	02000434 	movhi	r8,16
   1e9a0:	423fffc4 	addi	r8,r8,-1
   1e9a4:	1081ffcc 	andi	r2,r2,2047
   1e9a8:	0241ffc4 	movi	r9,2047
   1e9ac:	2a14703a 	and	r10,r5,r8
   1e9b0:	18c1ffcc 	andi	r3,r3,2047
   1e9b4:	3a10703a 	and	r8,r7,r8
   1e9b8:	280ad7fa 	srli	r5,r5,31
   1e9bc:	380ed7fa 	srli	r7,r7,31
   1e9c0:	12401d26 	beq	r2,r9,1ea38 <__gedf2+0xa4>
   1e9c4:	0241ffc4 	movi	r9,2047
   1e9c8:	1a401226 	beq	r3,r9,1ea14 <__gedf2+0x80>
   1e9cc:	1000081e 	bne	r2,zero,1e9f0 <__gedf2+0x5c>
   1e9d0:	2296b03a 	or	r11,r4,r10
   1e9d4:	5813003a 	cmpeq	r9,r11,zero
   1e9d8:	1800091e 	bne	r3,zero,1ea00 <__gedf2+0x6c>
   1e9dc:	3218b03a 	or	r12,r6,r8
   1e9e0:	6000071e 	bne	r12,zero,1ea00 <__gedf2+0x6c>
   1e9e4:	0005883a 	mov	r2,zero
   1e9e8:	5800101e 	bne	r11,zero,1ea2c <__gedf2+0x98>
   1e9ec:	f800283a 	ret
   1e9f0:	18000c1e 	bne	r3,zero,1ea24 <__gedf2+0x90>
   1e9f4:	3212b03a 	or	r9,r6,r8
   1e9f8:	48000c26 	beq	r9,zero,1ea2c <__gedf2+0x98>
   1e9fc:	0013883a 	mov	r9,zero
   1ea00:	39c03fcc 	andi	r7,r7,255
   1ea04:	48000826 	beq	r9,zero,1ea28 <__gedf2+0x94>
   1ea08:	38000926 	beq	r7,zero,1ea30 <__gedf2+0x9c>
   1ea0c:	00800044 	movi	r2,1
   1ea10:	f800283a 	ret
   1ea14:	3212b03a 	or	r9,r6,r8
   1ea18:	483fec26 	beq	r9,zero,1e9cc <__alt_data_end+0xfc01e9cc>
   1ea1c:	00bfff84 	movi	r2,-2
   1ea20:	f800283a 	ret
   1ea24:	39c03fcc 	andi	r7,r7,255
   1ea28:	29c00626 	beq	r5,r7,1ea44 <__gedf2+0xb0>
   1ea2c:	283ff726 	beq	r5,zero,1ea0c <__alt_data_end+0xfc01ea0c>
   1ea30:	00bfffc4 	movi	r2,-1
   1ea34:	f800283a 	ret
   1ea38:	2292b03a 	or	r9,r4,r10
   1ea3c:	483fe126 	beq	r9,zero,1e9c4 <__alt_data_end+0xfc01e9c4>
   1ea40:	003ff606 	br	1ea1c <__alt_data_end+0xfc01ea1c>
   1ea44:	18bff916 	blt	r3,r2,1ea2c <__alt_data_end+0xfc01ea2c>
   1ea48:	10c00316 	blt	r2,r3,1ea58 <__gedf2+0xc4>
   1ea4c:	42bff736 	bltu	r8,r10,1ea2c <__alt_data_end+0xfc01ea2c>
   1ea50:	52000326 	beq	r10,r8,1ea60 <__gedf2+0xcc>
   1ea54:	5200042e 	bgeu	r10,r8,1ea68 <__gedf2+0xd4>
   1ea58:	283fec1e 	bne	r5,zero,1ea0c <__alt_data_end+0xfc01ea0c>
   1ea5c:	003ff406 	br	1ea30 <__alt_data_end+0xfc01ea30>
   1ea60:	313ff236 	bltu	r6,r4,1ea2c <__alt_data_end+0xfc01ea2c>
   1ea64:	21bffc36 	bltu	r4,r6,1ea58 <__alt_data_end+0xfc01ea58>
   1ea68:	0005883a 	mov	r2,zero
   1ea6c:	f800283a 	ret

0001ea70 <__ledf2>:
   1ea70:	2804d53a 	srli	r2,r5,20
   1ea74:	3810d53a 	srli	r8,r7,20
   1ea78:	00c00434 	movhi	r3,16
   1ea7c:	18ffffc4 	addi	r3,r3,-1
   1ea80:	1081ffcc 	andi	r2,r2,2047
   1ea84:	0241ffc4 	movi	r9,2047
   1ea88:	28d4703a 	and	r10,r5,r3
   1ea8c:	4201ffcc 	andi	r8,r8,2047
   1ea90:	38c6703a 	and	r3,r7,r3
   1ea94:	280ad7fa 	srli	r5,r5,31
   1ea98:	380ed7fa 	srli	r7,r7,31
   1ea9c:	12401f26 	beq	r2,r9,1eb1c <__ledf2+0xac>
   1eaa0:	0241ffc4 	movi	r9,2047
   1eaa4:	42401426 	beq	r8,r9,1eaf8 <__ledf2+0x88>
   1eaa8:	1000091e 	bne	r2,zero,1ead0 <__ledf2+0x60>
   1eaac:	2296b03a 	or	r11,r4,r10
   1eab0:	5813003a 	cmpeq	r9,r11,zero
   1eab4:	29403fcc 	andi	r5,r5,255
   1eab8:	40000a1e 	bne	r8,zero,1eae4 <__ledf2+0x74>
   1eabc:	30d8b03a 	or	r12,r6,r3
   1eac0:	6000081e 	bne	r12,zero,1eae4 <__ledf2+0x74>
   1eac4:	0005883a 	mov	r2,zero
   1eac8:	5800111e 	bne	r11,zero,1eb10 <__ledf2+0xa0>
   1eacc:	f800283a 	ret
   1ead0:	29403fcc 	andi	r5,r5,255
   1ead4:	40000c1e 	bne	r8,zero,1eb08 <__ledf2+0x98>
   1ead8:	30d2b03a 	or	r9,r6,r3
   1eadc:	48000c26 	beq	r9,zero,1eb10 <__ledf2+0xa0>
   1eae0:	0013883a 	mov	r9,zero
   1eae4:	39c03fcc 	andi	r7,r7,255
   1eae8:	48000826 	beq	r9,zero,1eb0c <__ledf2+0x9c>
   1eaec:	38001126 	beq	r7,zero,1eb34 <__ledf2+0xc4>
   1eaf0:	00800044 	movi	r2,1
   1eaf4:	f800283a 	ret
   1eaf8:	30d2b03a 	or	r9,r6,r3
   1eafc:	483fea26 	beq	r9,zero,1eaa8 <__alt_data_end+0xfc01eaa8>
   1eb00:	00800084 	movi	r2,2
   1eb04:	f800283a 	ret
   1eb08:	39c03fcc 	andi	r7,r7,255
   1eb0c:	39400726 	beq	r7,r5,1eb2c <__ledf2+0xbc>
   1eb10:	2800081e 	bne	r5,zero,1eb34 <__ledf2+0xc4>
   1eb14:	00800044 	movi	r2,1
   1eb18:	f800283a 	ret
   1eb1c:	2292b03a 	or	r9,r4,r10
   1eb20:	483fdf26 	beq	r9,zero,1eaa0 <__alt_data_end+0xfc01eaa0>
   1eb24:	00800084 	movi	r2,2
   1eb28:	f800283a 	ret
   1eb2c:	4080030e 	bge	r8,r2,1eb3c <__ledf2+0xcc>
   1eb30:	383fef26 	beq	r7,zero,1eaf0 <__alt_data_end+0xfc01eaf0>
   1eb34:	00bfffc4 	movi	r2,-1
   1eb38:	f800283a 	ret
   1eb3c:	123feb16 	blt	r2,r8,1eaec <__alt_data_end+0xfc01eaec>
   1eb40:	1abff336 	bltu	r3,r10,1eb10 <__alt_data_end+0xfc01eb10>
   1eb44:	50c00326 	beq	r10,r3,1eb54 <__ledf2+0xe4>
   1eb48:	50c0042e 	bgeu	r10,r3,1eb5c <__ledf2+0xec>
   1eb4c:	283fe81e 	bne	r5,zero,1eaf0 <__alt_data_end+0xfc01eaf0>
   1eb50:	003ff806 	br	1eb34 <__alt_data_end+0xfc01eb34>
   1eb54:	313fee36 	bltu	r6,r4,1eb10 <__alt_data_end+0xfc01eb10>
   1eb58:	21bffc36 	bltu	r4,r6,1eb4c <__alt_data_end+0xfc01eb4c>
   1eb5c:	0005883a 	mov	r2,zero
   1eb60:	f800283a 	ret

0001eb64 <__muldf3>:
   1eb64:	deffee04 	addi	sp,sp,-72
   1eb68:	dd000c15 	stw	r20,48(sp)
   1eb6c:	2828d53a 	srli	r20,r5,20
   1eb70:	ddc00f15 	stw	r23,60(sp)
   1eb74:	282ed7fa 	srli	r23,r5,31
   1eb78:	dc000815 	stw	r16,32(sp)
   1eb7c:	04000434 	movhi	r16,16
   1eb80:	dcc00b15 	stw	r19,44(sp)
   1eb84:	843fffc4 	addi	r16,r16,-1
   1eb88:	dfc01115 	stw	ra,68(sp)
   1eb8c:	df001015 	stw	fp,64(sp)
   1eb90:	dd800e15 	stw	r22,56(sp)
   1eb94:	dd400d15 	stw	r21,52(sp)
   1eb98:	dc800a15 	stw	r18,40(sp)
   1eb9c:	dc400915 	stw	r17,36(sp)
   1eba0:	a501ffcc 	andi	r20,r20,2047
   1eba4:	2c20703a 	and	r16,r5,r16
   1eba8:	b827883a 	mov	r19,r23
   1ebac:	ba403fcc 	andi	r9,r23,255
   1ebb0:	a0006026 	beq	r20,zero,1ed34 <__muldf3+0x1d0>
   1ebb4:	0081ffc4 	movi	r2,2047
   1ebb8:	202d883a 	mov	r22,r4
   1ebbc:	a0803626 	beq	r20,r2,1ec98 <__muldf3+0x134>
   1ebc0:	84000434 	orhi	r16,r16,16
   1ebc4:	200ad77a 	srli	r5,r4,29
   1ebc8:	800490fa 	slli	r2,r16,3
   1ebcc:	202c90fa 	slli	r22,r4,3
   1ebd0:	a53f0044 	addi	r20,r20,-1023
   1ebd4:	28a0b03a 	or	r16,r5,r2
   1ebd8:	002b883a 	mov	r21,zero
   1ebdc:	000b883a 	mov	r5,zero
   1ebe0:	3804d53a 	srli	r2,r7,20
   1ebe4:	3838d7fa 	srli	fp,r7,31
   1ebe8:	04400434 	movhi	r17,16
   1ebec:	8c7fffc4 	addi	r17,r17,-1
   1ebf0:	1081ffcc 	andi	r2,r2,2047
   1ebf4:	3025883a 	mov	r18,r6
   1ebf8:	3c62703a 	and	r17,r7,r17
   1ebfc:	e2803fcc 	andi	r10,fp,255
   1ec00:	10006d26 	beq	r2,zero,1edb8 <__muldf3+0x254>
   1ec04:	00c1ffc4 	movi	r3,2047
   1ec08:	10c06526 	beq	r2,r3,1eda0 <__muldf3+0x23c>
   1ec0c:	8c400434 	orhi	r17,r17,16
   1ec10:	300ed77a 	srli	r7,r6,29
   1ec14:	880690fa 	slli	r3,r17,3
   1ec18:	302490fa 	slli	r18,r6,3
   1ec1c:	10bf0044 	addi	r2,r2,-1023
   1ec20:	38e2b03a 	or	r17,r7,r3
   1ec24:	000f883a 	mov	r7,zero
   1ec28:	a087883a 	add	r3,r20,r2
   1ec2c:	010003c4 	movi	r4,15
   1ec30:	3d44b03a 	or	r2,r7,r21
   1ec34:	e5ccf03a 	xor	r6,fp,r23
   1ec38:	1a000044 	addi	r8,r3,1
   1ec3c:	20809b36 	bltu	r4,r2,1eeac <__muldf3+0x348>
   1ec40:	100490ba 	slli	r2,r2,2
   1ec44:	010000b4 	movhi	r4,2
   1ec48:	213b1604 	addi	r4,r4,-5032
   1ec4c:	1105883a 	add	r2,r2,r4
   1ec50:	10800017 	ldw	r2,0(r2)
   1ec54:	1000683a 	jmp	r2
   1ec58:	0001eeac 	andhi	zero,zero,1978
   1ec5c:	0001ecb8 	rdprs	zero,zero,1970
   1ec60:	0001ecb8 	rdprs	zero,zero,1970
   1ec64:	0001ecb4 	movhi	zero,1970
   1ec68:	0001ee88 	cmpgei	zero,zero,1978
   1ec6c:	0001ee88 	cmpgei	zero,zero,1978
   1ec70:	0001ee70 	cmpltui	zero,zero,1977
   1ec74:	0001ecb4 	movhi	zero,1970
   1ec78:	0001ee88 	cmpgei	zero,zero,1978
   1ec7c:	0001ee70 	cmpltui	zero,zero,1977
   1ec80:	0001ee88 	cmpgei	zero,zero,1978
   1ec84:	0001ecb4 	movhi	zero,1970
   1ec88:	0001ee98 	cmpnei	zero,zero,1978
   1ec8c:	0001ee98 	cmpnei	zero,zero,1978
   1ec90:	0001ee98 	cmpnei	zero,zero,1978
   1ec94:	0001f1f8 	rdprs	zero,zero,1991
   1ec98:	2404b03a 	or	r2,r4,r16
   1ec9c:	1000711e 	bne	r2,zero,1ee64 <__muldf3+0x300>
   1eca0:	05400204 	movi	r21,8
   1eca4:	0021883a 	mov	r16,zero
   1eca8:	002d883a 	mov	r22,zero
   1ecac:	01400084 	movi	r5,2
   1ecb0:	003fcb06 	br	1ebe0 <__alt_data_end+0xfc01ebe0>
   1ecb4:	500d883a 	mov	r6,r10
   1ecb8:	00800084 	movi	r2,2
   1ecbc:	38805926 	beq	r7,r2,1ee24 <__muldf3+0x2c0>
   1ecc0:	008000c4 	movi	r2,3
   1ecc4:	3881bb26 	beq	r7,r2,1f3b4 <__muldf3+0x850>
   1ecc8:	00800044 	movi	r2,1
   1eccc:	3881961e 	bne	r7,r2,1f328 <__muldf3+0x7c4>
   1ecd0:	3027883a 	mov	r19,r6
   1ecd4:	0005883a 	mov	r2,zero
   1ecd8:	0021883a 	mov	r16,zero
   1ecdc:	002d883a 	mov	r22,zero
   1ece0:	1004953a 	slli	r2,r2,20
   1ece4:	98c03fcc 	andi	r3,r19,255
   1ece8:	04400434 	movhi	r17,16
   1ecec:	8c7fffc4 	addi	r17,r17,-1
   1ecf0:	180697fa 	slli	r3,r3,31
   1ecf4:	8460703a 	and	r16,r16,r17
   1ecf8:	80a0b03a 	or	r16,r16,r2
   1ecfc:	80c6b03a 	or	r3,r16,r3
   1ed00:	b005883a 	mov	r2,r22
   1ed04:	dfc01117 	ldw	ra,68(sp)
   1ed08:	df001017 	ldw	fp,64(sp)
   1ed0c:	ddc00f17 	ldw	r23,60(sp)
   1ed10:	dd800e17 	ldw	r22,56(sp)
   1ed14:	dd400d17 	ldw	r21,52(sp)
   1ed18:	dd000c17 	ldw	r20,48(sp)
   1ed1c:	dcc00b17 	ldw	r19,44(sp)
   1ed20:	dc800a17 	ldw	r18,40(sp)
   1ed24:	dc400917 	ldw	r17,36(sp)
   1ed28:	dc000817 	ldw	r16,32(sp)
   1ed2c:	dec01204 	addi	sp,sp,72
   1ed30:	f800283a 	ret
   1ed34:	2404b03a 	or	r2,r4,r16
   1ed38:	202b883a 	mov	r21,r4
   1ed3c:	10004426 	beq	r2,zero,1ee50 <__muldf3+0x2ec>
   1ed40:	80015126 	beq	r16,zero,1f288 <__muldf3+0x724>
   1ed44:	8009883a 	mov	r4,r16
   1ed48:	d9800715 	stw	r6,28(sp)
   1ed4c:	d9c00215 	stw	r7,8(sp)
   1ed50:	da400415 	stw	r9,16(sp)
   1ed54:	000f35c0 	call	f35c <__clzsi2>
   1ed58:	d9800717 	ldw	r6,28(sp)
   1ed5c:	d9c00217 	ldw	r7,8(sp)
   1ed60:	da400417 	ldw	r9,16(sp)
   1ed64:	113ffd44 	addi	r4,r2,-11
   1ed68:	00c00704 	movi	r3,28
   1ed6c:	19014216 	blt	r3,r4,1f278 <__muldf3+0x714>
   1ed70:	00c00744 	movi	r3,29
   1ed74:	15bffe04 	addi	r22,r2,-8
   1ed78:	1907c83a 	sub	r3,r3,r4
   1ed7c:	85a0983a 	sll	r16,r16,r22
   1ed80:	a8c6d83a 	srl	r3,r21,r3
   1ed84:	adac983a 	sll	r22,r21,r22
   1ed88:	1c20b03a 	or	r16,r3,r16
   1ed8c:	1080fcc4 	addi	r2,r2,1011
   1ed90:	00a9c83a 	sub	r20,zero,r2
   1ed94:	002b883a 	mov	r21,zero
   1ed98:	000b883a 	mov	r5,zero
   1ed9c:	003f9006 	br	1ebe0 <__alt_data_end+0xfc01ebe0>
   1eda0:	3446b03a 	or	r3,r6,r17
   1eda4:	1800281e 	bne	r3,zero,1ee48 <__muldf3+0x2e4>
   1eda8:	0023883a 	mov	r17,zero
   1edac:	0025883a 	mov	r18,zero
   1edb0:	01c00084 	movi	r7,2
   1edb4:	003f9c06 	br	1ec28 <__alt_data_end+0xfc01ec28>
   1edb8:	3446b03a 	or	r3,r6,r17
   1edbc:	18001e26 	beq	r3,zero,1ee38 <__muldf3+0x2d4>
   1edc0:	88012126 	beq	r17,zero,1f248 <__muldf3+0x6e4>
   1edc4:	8809883a 	mov	r4,r17
   1edc8:	d9400215 	stw	r5,8(sp)
   1edcc:	d9800715 	stw	r6,28(sp)
   1edd0:	da400415 	stw	r9,16(sp)
   1edd4:	da800315 	stw	r10,12(sp)
   1edd8:	000f35c0 	call	f35c <__clzsi2>
   1eddc:	d9400217 	ldw	r5,8(sp)
   1ede0:	d9800717 	ldw	r6,28(sp)
   1ede4:	da400417 	ldw	r9,16(sp)
   1ede8:	da800317 	ldw	r10,12(sp)
   1edec:	113ffd44 	addi	r4,r2,-11
   1edf0:	00c00704 	movi	r3,28
   1edf4:	19011016 	blt	r3,r4,1f238 <__muldf3+0x6d4>
   1edf8:	00c00744 	movi	r3,29
   1edfc:	14bffe04 	addi	r18,r2,-8
   1ee00:	1907c83a 	sub	r3,r3,r4
   1ee04:	8ca2983a 	sll	r17,r17,r18
   1ee08:	30c6d83a 	srl	r3,r6,r3
   1ee0c:	34a4983a 	sll	r18,r6,r18
   1ee10:	1c62b03a 	or	r17,r3,r17
   1ee14:	1080fcc4 	addi	r2,r2,1011
   1ee18:	0085c83a 	sub	r2,zero,r2
   1ee1c:	000f883a 	mov	r7,zero
   1ee20:	003f8106 	br	1ec28 <__alt_data_end+0xfc01ec28>
   1ee24:	3027883a 	mov	r19,r6
   1ee28:	0081ffc4 	movi	r2,2047
   1ee2c:	0021883a 	mov	r16,zero
   1ee30:	002d883a 	mov	r22,zero
   1ee34:	003faa06 	br	1ece0 <__alt_data_end+0xfc01ece0>
   1ee38:	0023883a 	mov	r17,zero
   1ee3c:	0025883a 	mov	r18,zero
   1ee40:	01c00044 	movi	r7,1
   1ee44:	003f7806 	br	1ec28 <__alt_data_end+0xfc01ec28>
   1ee48:	01c000c4 	movi	r7,3
   1ee4c:	003f7606 	br	1ec28 <__alt_data_end+0xfc01ec28>
   1ee50:	05400104 	movi	r21,4
   1ee54:	0021883a 	mov	r16,zero
   1ee58:	002d883a 	mov	r22,zero
   1ee5c:	01400044 	movi	r5,1
   1ee60:	003f5f06 	br	1ebe0 <__alt_data_end+0xfc01ebe0>
   1ee64:	05400304 	movi	r21,12
   1ee68:	014000c4 	movi	r5,3
   1ee6c:	003f5c06 	br	1ebe0 <__alt_data_end+0xfc01ebe0>
   1ee70:	04000434 	movhi	r16,16
   1ee74:	0027883a 	mov	r19,zero
   1ee78:	843fffc4 	addi	r16,r16,-1
   1ee7c:	05bfffc4 	movi	r22,-1
   1ee80:	0081ffc4 	movi	r2,2047
   1ee84:	003f9606 	br	1ece0 <__alt_data_end+0xfc01ece0>
   1ee88:	8023883a 	mov	r17,r16
   1ee8c:	b025883a 	mov	r18,r22
   1ee90:	280f883a 	mov	r7,r5
   1ee94:	003f8806 	br	1ecb8 <__alt_data_end+0xfc01ecb8>
   1ee98:	8023883a 	mov	r17,r16
   1ee9c:	b025883a 	mov	r18,r22
   1eea0:	480d883a 	mov	r6,r9
   1eea4:	280f883a 	mov	r7,r5
   1eea8:	003f8306 	br	1ecb8 <__alt_data_end+0xfc01ecb8>
   1eeac:	b026d43a 	srli	r19,r22,16
   1eeb0:	902ed43a 	srli	r23,r18,16
   1eeb4:	b5bfffcc 	andi	r22,r22,65535
   1eeb8:	94bfffcc 	andi	r18,r18,65535
   1eebc:	b00b883a 	mov	r5,r22
   1eec0:	9009883a 	mov	r4,r18
   1eec4:	d8c00515 	stw	r3,20(sp)
   1eec8:	d9800715 	stw	r6,28(sp)
   1eecc:	da000615 	stw	r8,24(sp)
   1eed0:	000d8b80 	call	d8b8 <__mulsi3>
   1eed4:	980b883a 	mov	r5,r19
   1eed8:	9009883a 	mov	r4,r18
   1eedc:	1029883a 	mov	r20,r2
   1eee0:	000d8b80 	call	d8b8 <__mulsi3>
   1eee4:	b80b883a 	mov	r5,r23
   1eee8:	9809883a 	mov	r4,r19
   1eeec:	102b883a 	mov	r21,r2
   1eef0:	000d8b80 	call	d8b8 <__mulsi3>
   1eef4:	b809883a 	mov	r4,r23
   1eef8:	b00b883a 	mov	r5,r22
   1eefc:	1039883a 	mov	fp,r2
   1ef00:	000d8b80 	call	d8b8 <__mulsi3>
   1ef04:	a008d43a 	srli	r4,r20,16
   1ef08:	1545883a 	add	r2,r2,r21
   1ef0c:	d8c00517 	ldw	r3,20(sp)
   1ef10:	2085883a 	add	r2,r4,r2
   1ef14:	d9800717 	ldw	r6,28(sp)
   1ef18:	da000617 	ldw	r8,24(sp)
   1ef1c:	1540022e 	bgeu	r2,r21,1ef28 <__muldf3+0x3c4>
   1ef20:	01000074 	movhi	r4,1
   1ef24:	e139883a 	add	fp,fp,r4
   1ef28:	100e943a 	slli	r7,r2,16
   1ef2c:	1004d43a 	srli	r2,r2,16
   1ef30:	882ad43a 	srli	r21,r17,16
   1ef34:	a53fffcc 	andi	r20,r20,65535
   1ef38:	8c7fffcc 	andi	r17,r17,65535
   1ef3c:	3d29883a 	add	r20,r7,r20
   1ef40:	b00b883a 	mov	r5,r22
   1ef44:	8809883a 	mov	r4,r17
   1ef48:	d8c00515 	stw	r3,20(sp)
   1ef4c:	d9800715 	stw	r6,28(sp)
   1ef50:	da000615 	stw	r8,24(sp)
   1ef54:	dd000115 	stw	r20,4(sp)
   1ef58:	d8800015 	stw	r2,0(sp)
   1ef5c:	000d8b80 	call	d8b8 <__mulsi3>
   1ef60:	980b883a 	mov	r5,r19
   1ef64:	8809883a 	mov	r4,r17
   1ef68:	d8800215 	stw	r2,8(sp)
   1ef6c:	000d8b80 	call	d8b8 <__mulsi3>
   1ef70:	9809883a 	mov	r4,r19
   1ef74:	a80b883a 	mov	r5,r21
   1ef78:	1029883a 	mov	r20,r2
   1ef7c:	000d8b80 	call	d8b8 <__mulsi3>
   1ef80:	b00b883a 	mov	r5,r22
   1ef84:	a809883a 	mov	r4,r21
   1ef88:	d8800415 	stw	r2,16(sp)
   1ef8c:	000d8b80 	call	d8b8 <__mulsi3>
   1ef90:	d9c00217 	ldw	r7,8(sp)
   1ef94:	1505883a 	add	r2,r2,r20
   1ef98:	d8c00517 	ldw	r3,20(sp)
   1ef9c:	3826d43a 	srli	r19,r7,16
   1efa0:	d9800717 	ldw	r6,28(sp)
   1efa4:	da000617 	ldw	r8,24(sp)
   1efa8:	9885883a 	add	r2,r19,r2
   1efac:	da400417 	ldw	r9,16(sp)
   1efb0:	1500022e 	bgeu	r2,r20,1efbc <__muldf3+0x458>
   1efb4:	01000074 	movhi	r4,1
   1efb8:	4913883a 	add	r9,r9,r4
   1efbc:	1028d43a 	srli	r20,r2,16
   1efc0:	1004943a 	slli	r2,r2,16
   1efc4:	802cd43a 	srli	r22,r16,16
   1efc8:	843fffcc 	andi	r16,r16,65535
   1efcc:	3cffffcc 	andi	r19,r7,65535
   1efd0:	9009883a 	mov	r4,r18
   1efd4:	800b883a 	mov	r5,r16
   1efd8:	a269883a 	add	r20,r20,r9
   1efdc:	d8c00515 	stw	r3,20(sp)
   1efe0:	d9800715 	stw	r6,28(sp)
   1efe4:	da000615 	stw	r8,24(sp)
   1efe8:	14e7883a 	add	r19,r2,r19
   1efec:	000d8b80 	call	d8b8 <__mulsi3>
   1eff0:	9009883a 	mov	r4,r18
   1eff4:	b00b883a 	mov	r5,r22
   1eff8:	d8800315 	stw	r2,12(sp)
   1effc:	000d8b80 	call	d8b8 <__mulsi3>
   1f000:	b809883a 	mov	r4,r23
   1f004:	b00b883a 	mov	r5,r22
   1f008:	d8800215 	stw	r2,8(sp)
   1f00c:	000d8b80 	call	d8b8 <__mulsi3>
   1f010:	b80b883a 	mov	r5,r23
   1f014:	8009883a 	mov	r4,r16
   1f018:	d8800415 	stw	r2,16(sp)
   1f01c:	000d8b80 	call	d8b8 <__mulsi3>
   1f020:	da800317 	ldw	r10,12(sp)
   1f024:	d9c00217 	ldw	r7,8(sp)
   1f028:	d9000017 	ldw	r4,0(sp)
   1f02c:	502ed43a 	srli	r23,r10,16
   1f030:	11c5883a 	add	r2,r2,r7
   1f034:	24e5883a 	add	r18,r4,r19
   1f038:	b885883a 	add	r2,r23,r2
   1f03c:	d8c00517 	ldw	r3,20(sp)
   1f040:	d9800717 	ldw	r6,28(sp)
   1f044:	da000617 	ldw	r8,24(sp)
   1f048:	da400417 	ldw	r9,16(sp)
   1f04c:	11c0022e 	bgeu	r2,r7,1f058 <__muldf3+0x4f4>
   1f050:	01000074 	movhi	r4,1
   1f054:	4913883a 	add	r9,r9,r4
   1f058:	100ed43a 	srli	r7,r2,16
   1f05c:	1004943a 	slli	r2,r2,16
   1f060:	55ffffcc 	andi	r23,r10,65535
   1f064:	3a53883a 	add	r9,r7,r9
   1f068:	8809883a 	mov	r4,r17
   1f06c:	800b883a 	mov	r5,r16
   1f070:	d8c00515 	stw	r3,20(sp)
   1f074:	d9800715 	stw	r6,28(sp)
   1f078:	da000615 	stw	r8,24(sp)
   1f07c:	da400415 	stw	r9,16(sp)
   1f080:	15ef883a 	add	r23,r2,r23
   1f084:	000d8b80 	call	d8b8 <__mulsi3>
   1f088:	8809883a 	mov	r4,r17
   1f08c:	b00b883a 	mov	r5,r22
   1f090:	d8800215 	stw	r2,8(sp)
   1f094:	000d8b80 	call	d8b8 <__mulsi3>
   1f098:	b00b883a 	mov	r5,r22
   1f09c:	a809883a 	mov	r4,r21
   1f0a0:	d8800315 	stw	r2,12(sp)
   1f0a4:	000d8b80 	call	d8b8 <__mulsi3>
   1f0a8:	8009883a 	mov	r4,r16
   1f0ac:	a80b883a 	mov	r5,r21
   1f0b0:	1023883a 	mov	r17,r2
   1f0b4:	000d8b80 	call	d8b8 <__mulsi3>
   1f0b8:	d9c00217 	ldw	r7,8(sp)
   1f0bc:	da800317 	ldw	r10,12(sp)
   1f0c0:	d8c00517 	ldw	r3,20(sp)
   1f0c4:	3808d43a 	srli	r4,r7,16
   1f0c8:	1285883a 	add	r2,r2,r10
   1f0cc:	d9800717 	ldw	r6,28(sp)
   1f0d0:	2085883a 	add	r2,r4,r2
   1f0d4:	da000617 	ldw	r8,24(sp)
   1f0d8:	da400417 	ldw	r9,16(sp)
   1f0dc:	1280022e 	bgeu	r2,r10,1f0e8 <__muldf3+0x584>
   1f0e0:	01000074 	movhi	r4,1
   1f0e4:	8923883a 	add	r17,r17,r4
   1f0e8:	1008943a 	slli	r4,r2,16
   1f0ec:	39ffffcc 	andi	r7,r7,65535
   1f0f0:	e4b9883a 	add	fp,fp,r18
   1f0f4:	21cf883a 	add	r7,r4,r7
   1f0f8:	e4e7803a 	cmpltu	r19,fp,r19
   1f0fc:	3d0f883a 	add	r7,r7,r20
   1f100:	bf39883a 	add	fp,r23,fp
   1f104:	99c9883a 	add	r4,r19,r7
   1f108:	e5ef803a 	cmpltu	r23,fp,r23
   1f10c:	490b883a 	add	r5,r9,r4
   1f110:	1004d43a 	srli	r2,r2,16
   1f114:	b965883a 	add	r18,r23,r5
   1f118:	24c9803a 	cmpltu	r4,r4,r19
   1f11c:	3d29803a 	cmpltu	r20,r7,r20
   1f120:	a128b03a 	or	r20,r20,r4
   1f124:	95ef803a 	cmpltu	r23,r18,r23
   1f128:	2a53803a 	cmpltu	r9,r5,r9
   1f12c:	a0a9883a 	add	r20,r20,r2
   1f130:	4deeb03a 	or	r23,r9,r23
   1f134:	a5ef883a 	add	r23,r20,r23
   1f138:	bc63883a 	add	r17,r23,r17
   1f13c:	e004927a 	slli	r2,fp,9
   1f140:	d9000117 	ldw	r4,4(sp)
   1f144:	882e927a 	slli	r23,r17,9
   1f148:	9022d5fa 	srli	r17,r18,23
   1f14c:	e038d5fa 	srli	fp,fp,23
   1f150:	1104b03a 	or	r2,r2,r4
   1f154:	9024927a 	slli	r18,r18,9
   1f158:	1004c03a 	cmpne	r2,r2,zero
   1f15c:	bc62b03a 	or	r17,r23,r17
   1f160:	1738b03a 	or	fp,r2,fp
   1f164:	8880402c 	andhi	r2,r17,256
   1f168:	e4a4b03a 	or	r18,fp,r18
   1f16c:	10000726 	beq	r2,zero,1f18c <__muldf3+0x628>
   1f170:	9006d07a 	srli	r3,r18,1
   1f174:	880497fa 	slli	r2,r17,31
   1f178:	9480004c 	andi	r18,r18,1
   1f17c:	8822d07a 	srli	r17,r17,1
   1f180:	1ca4b03a 	or	r18,r3,r18
   1f184:	14a4b03a 	or	r18,r2,r18
   1f188:	4007883a 	mov	r3,r8
   1f18c:	1880ffc4 	addi	r2,r3,1023
   1f190:	0080460e 	bge	zero,r2,1f2ac <__muldf3+0x748>
   1f194:	910001cc 	andi	r4,r18,7
   1f198:	20000726 	beq	r4,zero,1f1b8 <__muldf3+0x654>
   1f19c:	910003cc 	andi	r4,r18,15
   1f1a0:	01400104 	movi	r5,4
   1f1a4:	21400426 	beq	r4,r5,1f1b8 <__muldf3+0x654>
   1f1a8:	9149883a 	add	r4,r18,r5
   1f1ac:	24a5803a 	cmpltu	r18,r4,r18
   1f1b0:	8ca3883a 	add	r17,r17,r18
   1f1b4:	2025883a 	mov	r18,r4
   1f1b8:	8900402c 	andhi	r4,r17,256
   1f1bc:	20000426 	beq	r4,zero,1f1d0 <__muldf3+0x66c>
   1f1c0:	18810004 	addi	r2,r3,1024
   1f1c4:	00ffc034 	movhi	r3,65280
   1f1c8:	18ffffc4 	addi	r3,r3,-1
   1f1cc:	88e2703a 	and	r17,r17,r3
   1f1d0:	00c1ff84 	movi	r3,2046
   1f1d4:	18bf1316 	blt	r3,r2,1ee24 <__alt_data_end+0xfc01ee24>
   1f1d8:	882c977a 	slli	r22,r17,29
   1f1dc:	9024d0fa 	srli	r18,r18,3
   1f1e0:	8822927a 	slli	r17,r17,9
   1f1e4:	1081ffcc 	andi	r2,r2,2047
   1f1e8:	b4acb03a 	or	r22,r22,r18
   1f1ec:	8820d33a 	srli	r16,r17,12
   1f1f0:	3027883a 	mov	r19,r6
   1f1f4:	003eba06 	br	1ece0 <__alt_data_end+0xfc01ece0>
   1f1f8:	8080022c 	andhi	r2,r16,8
   1f1fc:	10000926 	beq	r2,zero,1f224 <__muldf3+0x6c0>
   1f200:	8880022c 	andhi	r2,r17,8
   1f204:	1000071e 	bne	r2,zero,1f224 <__muldf3+0x6c0>
   1f208:	00800434 	movhi	r2,16
   1f20c:	8c000234 	orhi	r16,r17,8
   1f210:	10bfffc4 	addi	r2,r2,-1
   1f214:	e027883a 	mov	r19,fp
   1f218:	80a0703a 	and	r16,r16,r2
   1f21c:	902d883a 	mov	r22,r18
   1f220:	003f1706 	br	1ee80 <__alt_data_end+0xfc01ee80>
   1f224:	00800434 	movhi	r2,16
   1f228:	84000234 	orhi	r16,r16,8
   1f22c:	10bfffc4 	addi	r2,r2,-1
   1f230:	80a0703a 	and	r16,r16,r2
   1f234:	003f1206 	br	1ee80 <__alt_data_end+0xfc01ee80>
   1f238:	147ff604 	addi	r17,r2,-40
   1f23c:	3462983a 	sll	r17,r6,r17
   1f240:	0025883a 	mov	r18,zero
   1f244:	003ef306 	br	1ee14 <__alt_data_end+0xfc01ee14>
   1f248:	3009883a 	mov	r4,r6
   1f24c:	d9400215 	stw	r5,8(sp)
   1f250:	d9800715 	stw	r6,28(sp)
   1f254:	da400415 	stw	r9,16(sp)
   1f258:	da800315 	stw	r10,12(sp)
   1f25c:	000f35c0 	call	f35c <__clzsi2>
   1f260:	10800804 	addi	r2,r2,32
   1f264:	da800317 	ldw	r10,12(sp)
   1f268:	da400417 	ldw	r9,16(sp)
   1f26c:	d9800717 	ldw	r6,28(sp)
   1f270:	d9400217 	ldw	r5,8(sp)
   1f274:	003edd06 	br	1edec <__alt_data_end+0xfc01edec>
   1f278:	143ff604 	addi	r16,r2,-40
   1f27c:	ac20983a 	sll	r16,r21,r16
   1f280:	002d883a 	mov	r22,zero
   1f284:	003ec106 	br	1ed8c <__alt_data_end+0xfc01ed8c>
   1f288:	d9800715 	stw	r6,28(sp)
   1f28c:	d9c00215 	stw	r7,8(sp)
   1f290:	da400415 	stw	r9,16(sp)
   1f294:	000f35c0 	call	f35c <__clzsi2>
   1f298:	10800804 	addi	r2,r2,32
   1f29c:	da400417 	ldw	r9,16(sp)
   1f2a0:	d9c00217 	ldw	r7,8(sp)
   1f2a4:	d9800717 	ldw	r6,28(sp)
   1f2a8:	003eae06 	br	1ed64 <__alt_data_end+0xfc01ed64>
   1f2ac:	00c00044 	movi	r3,1
   1f2b0:	1887c83a 	sub	r3,r3,r2
   1f2b4:	01000e04 	movi	r4,56
   1f2b8:	20fe8516 	blt	r4,r3,1ecd0 <__alt_data_end+0xfc01ecd0>
   1f2bc:	010007c4 	movi	r4,31
   1f2c0:	20c01b16 	blt	r4,r3,1f330 <__muldf3+0x7cc>
   1f2c4:	00800804 	movi	r2,32
   1f2c8:	10c5c83a 	sub	r2,r2,r3
   1f2cc:	888a983a 	sll	r5,r17,r2
   1f2d0:	90c8d83a 	srl	r4,r18,r3
   1f2d4:	9084983a 	sll	r2,r18,r2
   1f2d8:	88e2d83a 	srl	r17,r17,r3
   1f2dc:	2906b03a 	or	r3,r5,r4
   1f2e0:	1004c03a 	cmpne	r2,r2,zero
   1f2e4:	1886b03a 	or	r3,r3,r2
   1f2e8:	188001cc 	andi	r2,r3,7
   1f2ec:	10000726 	beq	r2,zero,1f30c <__muldf3+0x7a8>
   1f2f0:	188003cc 	andi	r2,r3,15
   1f2f4:	01000104 	movi	r4,4
   1f2f8:	11000426 	beq	r2,r4,1f30c <__muldf3+0x7a8>
   1f2fc:	1805883a 	mov	r2,r3
   1f300:	10c00104 	addi	r3,r2,4
   1f304:	1885803a 	cmpltu	r2,r3,r2
   1f308:	88a3883a 	add	r17,r17,r2
   1f30c:	8880202c 	andhi	r2,r17,128
   1f310:	10001c26 	beq	r2,zero,1f384 <__muldf3+0x820>
   1f314:	3027883a 	mov	r19,r6
   1f318:	00800044 	movi	r2,1
   1f31c:	0021883a 	mov	r16,zero
   1f320:	002d883a 	mov	r22,zero
   1f324:	003e6e06 	br	1ece0 <__alt_data_end+0xfc01ece0>
   1f328:	4007883a 	mov	r3,r8
   1f32c:	003f9706 	br	1f18c <__alt_data_end+0xfc01f18c>
   1f330:	017ff844 	movi	r5,-31
   1f334:	2885c83a 	sub	r2,r5,r2
   1f338:	888ad83a 	srl	r5,r17,r2
   1f33c:	00800804 	movi	r2,32
   1f340:	18801a26 	beq	r3,r2,1f3ac <__muldf3+0x848>
   1f344:	01001004 	movi	r4,64
   1f348:	20c7c83a 	sub	r3,r4,r3
   1f34c:	88e2983a 	sll	r17,r17,r3
   1f350:	8ca4b03a 	or	r18,r17,r18
   1f354:	9004c03a 	cmpne	r2,r18,zero
   1f358:	2884b03a 	or	r2,r5,r2
   1f35c:	144001cc 	andi	r17,r2,7
   1f360:	88000d1e 	bne	r17,zero,1f398 <__muldf3+0x834>
   1f364:	0021883a 	mov	r16,zero
   1f368:	102cd0fa 	srli	r22,r2,3
   1f36c:	3027883a 	mov	r19,r6
   1f370:	0005883a 	mov	r2,zero
   1f374:	b46cb03a 	or	r22,r22,r17
   1f378:	003e5906 	br	1ece0 <__alt_data_end+0xfc01ece0>
   1f37c:	1007883a 	mov	r3,r2
   1f380:	0023883a 	mov	r17,zero
   1f384:	8820927a 	slli	r16,r17,9
   1f388:	1805883a 	mov	r2,r3
   1f38c:	8822977a 	slli	r17,r17,29
   1f390:	8020d33a 	srli	r16,r16,12
   1f394:	003ff406 	br	1f368 <__alt_data_end+0xfc01f368>
   1f398:	10c003cc 	andi	r3,r2,15
   1f39c:	01000104 	movi	r4,4
   1f3a0:	193ff626 	beq	r3,r4,1f37c <__alt_data_end+0xfc01f37c>
   1f3a4:	0023883a 	mov	r17,zero
   1f3a8:	003fd506 	br	1f300 <__alt_data_end+0xfc01f300>
   1f3ac:	0023883a 	mov	r17,zero
   1f3b0:	003fe706 	br	1f350 <__alt_data_end+0xfc01f350>
   1f3b4:	00800434 	movhi	r2,16
   1f3b8:	8c000234 	orhi	r16,r17,8
   1f3bc:	10bfffc4 	addi	r2,r2,-1
   1f3c0:	3027883a 	mov	r19,r6
   1f3c4:	80a0703a 	and	r16,r16,r2
   1f3c8:	902d883a 	mov	r22,r18
   1f3cc:	003eac06 	br	1ee80 <__alt_data_end+0xfc01ee80>

0001f3d0 <__subdf3>:
   1f3d0:	02000434 	movhi	r8,16
   1f3d4:	423fffc4 	addi	r8,r8,-1
   1f3d8:	defffb04 	addi	sp,sp,-20
   1f3dc:	2a14703a 	and	r10,r5,r8
   1f3e0:	3812d53a 	srli	r9,r7,20
   1f3e4:	3a10703a 	and	r8,r7,r8
   1f3e8:	2006d77a 	srli	r3,r4,29
   1f3ec:	3004d77a 	srli	r2,r6,29
   1f3f0:	dc000015 	stw	r16,0(sp)
   1f3f4:	501490fa 	slli	r10,r10,3
   1f3f8:	2820d53a 	srli	r16,r5,20
   1f3fc:	401090fa 	slli	r8,r8,3
   1f400:	dc800215 	stw	r18,8(sp)
   1f404:	dc400115 	stw	r17,4(sp)
   1f408:	dfc00415 	stw	ra,16(sp)
   1f40c:	202290fa 	slli	r17,r4,3
   1f410:	dcc00315 	stw	r19,12(sp)
   1f414:	4a41ffcc 	andi	r9,r9,2047
   1f418:	0101ffc4 	movi	r4,2047
   1f41c:	2824d7fa 	srli	r18,r5,31
   1f420:	8401ffcc 	andi	r16,r16,2047
   1f424:	50c6b03a 	or	r3,r10,r3
   1f428:	380ed7fa 	srli	r7,r7,31
   1f42c:	408ab03a 	or	r5,r8,r2
   1f430:	300c90fa 	slli	r6,r6,3
   1f434:	49009626 	beq	r9,r4,1f690 <__subdf3+0x2c0>
   1f438:	39c0005c 	xori	r7,r7,1
   1f43c:	8245c83a 	sub	r2,r16,r9
   1f440:	3c807426 	beq	r7,r18,1f614 <__subdf3+0x244>
   1f444:	0080af0e 	bge	zero,r2,1f704 <__subdf3+0x334>
   1f448:	48002a1e 	bne	r9,zero,1f4f4 <__subdf3+0x124>
   1f44c:	2988b03a 	or	r4,r5,r6
   1f450:	20009a1e 	bne	r4,zero,1f6bc <__subdf3+0x2ec>
   1f454:	888001cc 	andi	r2,r17,7
   1f458:	10000726 	beq	r2,zero,1f478 <__subdf3+0xa8>
   1f45c:	888003cc 	andi	r2,r17,15
   1f460:	01000104 	movi	r4,4
   1f464:	11000426 	beq	r2,r4,1f478 <__subdf3+0xa8>
   1f468:	890b883a 	add	r5,r17,r4
   1f46c:	2c63803a 	cmpltu	r17,r5,r17
   1f470:	1c47883a 	add	r3,r3,r17
   1f474:	2823883a 	mov	r17,r5
   1f478:	1880202c 	andhi	r2,r3,128
   1f47c:	10005926 	beq	r2,zero,1f5e4 <__subdf3+0x214>
   1f480:	84000044 	addi	r16,r16,1
   1f484:	0081ffc4 	movi	r2,2047
   1f488:	8080be26 	beq	r16,r2,1f784 <__subdf3+0x3b4>
   1f48c:	017fe034 	movhi	r5,65408
   1f490:	297fffc4 	addi	r5,r5,-1
   1f494:	1946703a 	and	r3,r3,r5
   1f498:	1804977a 	slli	r2,r3,29
   1f49c:	1806927a 	slli	r3,r3,9
   1f4a0:	8822d0fa 	srli	r17,r17,3
   1f4a4:	8401ffcc 	andi	r16,r16,2047
   1f4a8:	180ad33a 	srli	r5,r3,12
   1f4ac:	9100004c 	andi	r4,r18,1
   1f4b0:	1444b03a 	or	r2,r2,r17
   1f4b4:	80c1ffcc 	andi	r3,r16,2047
   1f4b8:	1820953a 	slli	r16,r3,20
   1f4bc:	20c03fcc 	andi	r3,r4,255
   1f4c0:	180897fa 	slli	r4,r3,31
   1f4c4:	00c00434 	movhi	r3,16
   1f4c8:	18ffffc4 	addi	r3,r3,-1
   1f4cc:	28c6703a 	and	r3,r5,r3
   1f4d0:	1c06b03a 	or	r3,r3,r16
   1f4d4:	1906b03a 	or	r3,r3,r4
   1f4d8:	dfc00417 	ldw	ra,16(sp)
   1f4dc:	dcc00317 	ldw	r19,12(sp)
   1f4e0:	dc800217 	ldw	r18,8(sp)
   1f4e4:	dc400117 	ldw	r17,4(sp)
   1f4e8:	dc000017 	ldw	r16,0(sp)
   1f4ec:	dec00504 	addi	sp,sp,20
   1f4f0:	f800283a 	ret
   1f4f4:	0101ffc4 	movi	r4,2047
   1f4f8:	813fd626 	beq	r16,r4,1f454 <__alt_data_end+0xfc01f454>
   1f4fc:	29402034 	orhi	r5,r5,128
   1f500:	01000e04 	movi	r4,56
   1f504:	2080a316 	blt	r4,r2,1f794 <__subdf3+0x3c4>
   1f508:	010007c4 	movi	r4,31
   1f50c:	2080c616 	blt	r4,r2,1f828 <__subdf3+0x458>
   1f510:	01000804 	movi	r4,32
   1f514:	2089c83a 	sub	r4,r4,r2
   1f518:	2910983a 	sll	r8,r5,r4
   1f51c:	308ed83a 	srl	r7,r6,r2
   1f520:	3108983a 	sll	r4,r6,r4
   1f524:	2884d83a 	srl	r2,r5,r2
   1f528:	41ccb03a 	or	r6,r8,r7
   1f52c:	2008c03a 	cmpne	r4,r4,zero
   1f530:	310cb03a 	or	r6,r6,r4
   1f534:	898dc83a 	sub	r6,r17,r6
   1f538:	89a3803a 	cmpltu	r17,r17,r6
   1f53c:	1887c83a 	sub	r3,r3,r2
   1f540:	1c47c83a 	sub	r3,r3,r17
   1f544:	3023883a 	mov	r17,r6
   1f548:	1880202c 	andhi	r2,r3,128
   1f54c:	10002326 	beq	r2,zero,1f5dc <__subdf3+0x20c>
   1f550:	04c02034 	movhi	r19,128
   1f554:	9cffffc4 	addi	r19,r19,-1
   1f558:	1ce6703a 	and	r19,r3,r19
   1f55c:	98007a26 	beq	r19,zero,1f748 <__subdf3+0x378>
   1f560:	9809883a 	mov	r4,r19
   1f564:	000f35c0 	call	f35c <__clzsi2>
   1f568:	113ffe04 	addi	r4,r2,-8
   1f56c:	00c007c4 	movi	r3,31
   1f570:	19007b16 	blt	r3,r4,1f760 <__subdf3+0x390>
   1f574:	00800804 	movi	r2,32
   1f578:	1105c83a 	sub	r2,r2,r4
   1f57c:	8884d83a 	srl	r2,r17,r2
   1f580:	9906983a 	sll	r3,r19,r4
   1f584:	8922983a 	sll	r17,r17,r4
   1f588:	10c4b03a 	or	r2,r2,r3
   1f58c:	24007816 	blt	r4,r16,1f770 <__subdf3+0x3a0>
   1f590:	2421c83a 	sub	r16,r4,r16
   1f594:	80c00044 	addi	r3,r16,1
   1f598:	010007c4 	movi	r4,31
   1f59c:	20c09516 	blt	r4,r3,1f7f4 <__subdf3+0x424>
   1f5a0:	01400804 	movi	r5,32
   1f5a4:	28cbc83a 	sub	r5,r5,r3
   1f5a8:	88c8d83a 	srl	r4,r17,r3
   1f5ac:	8962983a 	sll	r17,r17,r5
   1f5b0:	114a983a 	sll	r5,r2,r5
   1f5b4:	10c6d83a 	srl	r3,r2,r3
   1f5b8:	8804c03a 	cmpne	r2,r17,zero
   1f5bc:	290ab03a 	or	r5,r5,r4
   1f5c0:	28a2b03a 	or	r17,r5,r2
   1f5c4:	0021883a 	mov	r16,zero
   1f5c8:	003fa206 	br	1f454 <__alt_data_end+0xfc01f454>
   1f5cc:	2090b03a 	or	r8,r4,r2
   1f5d0:	40018e26 	beq	r8,zero,1fc0c <__subdf3+0x83c>
   1f5d4:	1007883a 	mov	r3,r2
   1f5d8:	2023883a 	mov	r17,r4
   1f5dc:	888001cc 	andi	r2,r17,7
   1f5e0:	103f9e1e 	bne	r2,zero,1f45c <__alt_data_end+0xfc01f45c>
   1f5e4:	1804977a 	slli	r2,r3,29
   1f5e8:	8822d0fa 	srli	r17,r17,3
   1f5ec:	1810d0fa 	srli	r8,r3,3
   1f5f0:	9100004c 	andi	r4,r18,1
   1f5f4:	1444b03a 	or	r2,r2,r17
   1f5f8:	00c1ffc4 	movi	r3,2047
   1f5fc:	80c02826 	beq	r16,r3,1f6a0 <__subdf3+0x2d0>
   1f600:	01400434 	movhi	r5,16
   1f604:	297fffc4 	addi	r5,r5,-1
   1f608:	80e0703a 	and	r16,r16,r3
   1f60c:	414a703a 	and	r5,r8,r5
   1f610:	003fa806 	br	1f4b4 <__alt_data_end+0xfc01f4b4>
   1f614:	0080630e 	bge	zero,r2,1f7a4 <__subdf3+0x3d4>
   1f618:	48003026 	beq	r9,zero,1f6dc <__subdf3+0x30c>
   1f61c:	0101ffc4 	movi	r4,2047
   1f620:	813f8c26 	beq	r16,r4,1f454 <__alt_data_end+0xfc01f454>
   1f624:	29402034 	orhi	r5,r5,128
   1f628:	01000e04 	movi	r4,56
   1f62c:	2080a90e 	bge	r4,r2,1f8d4 <__subdf3+0x504>
   1f630:	298cb03a 	or	r6,r5,r6
   1f634:	3012c03a 	cmpne	r9,r6,zero
   1f638:	0005883a 	mov	r2,zero
   1f63c:	4c53883a 	add	r9,r9,r17
   1f640:	4c63803a 	cmpltu	r17,r9,r17
   1f644:	10c7883a 	add	r3,r2,r3
   1f648:	88c7883a 	add	r3,r17,r3
   1f64c:	4823883a 	mov	r17,r9
   1f650:	1880202c 	andhi	r2,r3,128
   1f654:	1000d026 	beq	r2,zero,1f998 <__subdf3+0x5c8>
   1f658:	84000044 	addi	r16,r16,1
   1f65c:	0081ffc4 	movi	r2,2047
   1f660:	8080fe26 	beq	r16,r2,1fa5c <__subdf3+0x68c>
   1f664:	00bfe034 	movhi	r2,65408
   1f668:	10bfffc4 	addi	r2,r2,-1
   1f66c:	1886703a 	and	r3,r3,r2
   1f670:	880ad07a 	srli	r5,r17,1
   1f674:	180497fa 	slli	r2,r3,31
   1f678:	8900004c 	andi	r4,r17,1
   1f67c:	2922b03a 	or	r17,r5,r4
   1f680:	1806d07a 	srli	r3,r3,1
   1f684:	1462b03a 	or	r17,r2,r17
   1f688:	3825883a 	mov	r18,r7
   1f68c:	003f7106 	br	1f454 <__alt_data_end+0xfc01f454>
   1f690:	2984b03a 	or	r2,r5,r6
   1f694:	103f6826 	beq	r2,zero,1f438 <__alt_data_end+0xfc01f438>
   1f698:	39c03fcc 	andi	r7,r7,255
   1f69c:	003f6706 	br	1f43c <__alt_data_end+0xfc01f43c>
   1f6a0:	4086b03a 	or	r3,r8,r2
   1f6a4:	18015226 	beq	r3,zero,1fbf0 <__subdf3+0x820>
   1f6a8:	00c00434 	movhi	r3,16
   1f6ac:	41400234 	orhi	r5,r8,8
   1f6b0:	18ffffc4 	addi	r3,r3,-1
   1f6b4:	28ca703a 	and	r5,r5,r3
   1f6b8:	003f7e06 	br	1f4b4 <__alt_data_end+0xfc01f4b4>
   1f6bc:	10bfffc4 	addi	r2,r2,-1
   1f6c0:	1000491e 	bne	r2,zero,1f7e8 <__subdf3+0x418>
   1f6c4:	898fc83a 	sub	r7,r17,r6
   1f6c8:	89e3803a 	cmpltu	r17,r17,r7
   1f6cc:	1947c83a 	sub	r3,r3,r5
   1f6d0:	1c47c83a 	sub	r3,r3,r17
   1f6d4:	3823883a 	mov	r17,r7
   1f6d8:	003f9b06 	br	1f548 <__alt_data_end+0xfc01f548>
   1f6dc:	2988b03a 	or	r4,r5,r6
   1f6e0:	203f5c26 	beq	r4,zero,1f454 <__alt_data_end+0xfc01f454>
   1f6e4:	10bfffc4 	addi	r2,r2,-1
   1f6e8:	1000931e 	bne	r2,zero,1f938 <__subdf3+0x568>
   1f6ec:	898d883a 	add	r6,r17,r6
   1f6f0:	3463803a 	cmpltu	r17,r6,r17
   1f6f4:	1947883a 	add	r3,r3,r5
   1f6f8:	88c7883a 	add	r3,r17,r3
   1f6fc:	3023883a 	mov	r17,r6
   1f700:	003fd306 	br	1f650 <__alt_data_end+0xfc01f650>
   1f704:	1000541e 	bne	r2,zero,1f858 <__subdf3+0x488>
   1f708:	80800044 	addi	r2,r16,1
   1f70c:	1081ffcc 	andi	r2,r2,2047
   1f710:	01000044 	movi	r4,1
   1f714:	2080a20e 	bge	r4,r2,1f9a0 <__subdf3+0x5d0>
   1f718:	8989c83a 	sub	r4,r17,r6
   1f71c:	8905803a 	cmpltu	r2,r17,r4
   1f720:	1967c83a 	sub	r19,r3,r5
   1f724:	98a7c83a 	sub	r19,r19,r2
   1f728:	9880202c 	andhi	r2,r19,128
   1f72c:	10006326 	beq	r2,zero,1f8bc <__subdf3+0x4ec>
   1f730:	3463c83a 	sub	r17,r6,r17
   1f734:	28c7c83a 	sub	r3,r5,r3
   1f738:	344d803a 	cmpltu	r6,r6,r17
   1f73c:	19a7c83a 	sub	r19,r3,r6
   1f740:	3825883a 	mov	r18,r7
   1f744:	983f861e 	bne	r19,zero,1f560 <__alt_data_end+0xfc01f560>
   1f748:	8809883a 	mov	r4,r17
   1f74c:	000f35c0 	call	f35c <__clzsi2>
   1f750:	10800804 	addi	r2,r2,32
   1f754:	113ffe04 	addi	r4,r2,-8
   1f758:	00c007c4 	movi	r3,31
   1f75c:	193f850e 	bge	r3,r4,1f574 <__alt_data_end+0xfc01f574>
   1f760:	10bff604 	addi	r2,r2,-40
   1f764:	8884983a 	sll	r2,r17,r2
   1f768:	0023883a 	mov	r17,zero
   1f76c:	243f880e 	bge	r4,r16,1f590 <__alt_data_end+0xfc01f590>
   1f770:	00ffe034 	movhi	r3,65408
   1f774:	18ffffc4 	addi	r3,r3,-1
   1f778:	8121c83a 	sub	r16,r16,r4
   1f77c:	10c6703a 	and	r3,r2,r3
   1f780:	003f3406 	br	1f454 <__alt_data_end+0xfc01f454>
   1f784:	9100004c 	andi	r4,r18,1
   1f788:	000b883a 	mov	r5,zero
   1f78c:	0005883a 	mov	r2,zero
   1f790:	003f4806 	br	1f4b4 <__alt_data_end+0xfc01f4b4>
   1f794:	298cb03a 	or	r6,r5,r6
   1f798:	300cc03a 	cmpne	r6,r6,zero
   1f79c:	0005883a 	mov	r2,zero
   1f7a0:	003f6406 	br	1f534 <__alt_data_end+0xfc01f534>
   1f7a4:	10009a1e 	bne	r2,zero,1fa10 <__subdf3+0x640>
   1f7a8:	82400044 	addi	r9,r16,1
   1f7ac:	4881ffcc 	andi	r2,r9,2047
   1f7b0:	02800044 	movi	r10,1
   1f7b4:	5080670e 	bge	r10,r2,1f954 <__subdf3+0x584>
   1f7b8:	0081ffc4 	movi	r2,2047
   1f7bc:	4880af26 	beq	r9,r2,1fa7c <__subdf3+0x6ac>
   1f7c0:	898d883a 	add	r6,r17,r6
   1f7c4:	1945883a 	add	r2,r3,r5
   1f7c8:	3447803a 	cmpltu	r3,r6,r17
   1f7cc:	1887883a 	add	r3,r3,r2
   1f7d0:	182297fa 	slli	r17,r3,31
   1f7d4:	300cd07a 	srli	r6,r6,1
   1f7d8:	1806d07a 	srli	r3,r3,1
   1f7dc:	4821883a 	mov	r16,r9
   1f7e0:	89a2b03a 	or	r17,r17,r6
   1f7e4:	003f1b06 	br	1f454 <__alt_data_end+0xfc01f454>
   1f7e8:	0101ffc4 	movi	r4,2047
   1f7ec:	813f441e 	bne	r16,r4,1f500 <__alt_data_end+0xfc01f500>
   1f7f0:	003f1806 	br	1f454 <__alt_data_end+0xfc01f454>
   1f7f4:	843ff844 	addi	r16,r16,-31
   1f7f8:	01400804 	movi	r5,32
   1f7fc:	1408d83a 	srl	r4,r2,r16
   1f800:	19405026 	beq	r3,r5,1f944 <__subdf3+0x574>
   1f804:	01401004 	movi	r5,64
   1f808:	28c7c83a 	sub	r3,r5,r3
   1f80c:	10c4983a 	sll	r2,r2,r3
   1f810:	88a2b03a 	or	r17,r17,r2
   1f814:	8822c03a 	cmpne	r17,r17,zero
   1f818:	2462b03a 	or	r17,r4,r17
   1f81c:	0007883a 	mov	r3,zero
   1f820:	0021883a 	mov	r16,zero
   1f824:	003f6d06 	br	1f5dc <__alt_data_end+0xfc01f5dc>
   1f828:	11fff804 	addi	r7,r2,-32
   1f82c:	01000804 	movi	r4,32
   1f830:	29ced83a 	srl	r7,r5,r7
   1f834:	11004526 	beq	r2,r4,1f94c <__subdf3+0x57c>
   1f838:	01001004 	movi	r4,64
   1f83c:	2089c83a 	sub	r4,r4,r2
   1f840:	2904983a 	sll	r2,r5,r4
   1f844:	118cb03a 	or	r6,r2,r6
   1f848:	300cc03a 	cmpne	r6,r6,zero
   1f84c:	398cb03a 	or	r6,r7,r6
   1f850:	0005883a 	mov	r2,zero
   1f854:	003f3706 	br	1f534 <__alt_data_end+0xfc01f534>
   1f858:	80002a26 	beq	r16,zero,1f904 <__subdf3+0x534>
   1f85c:	0101ffc4 	movi	r4,2047
   1f860:	49006626 	beq	r9,r4,1f9fc <__subdf3+0x62c>
   1f864:	0085c83a 	sub	r2,zero,r2
   1f868:	18c02034 	orhi	r3,r3,128
   1f86c:	01000e04 	movi	r4,56
   1f870:	20807e16 	blt	r4,r2,1fa6c <__subdf3+0x69c>
   1f874:	010007c4 	movi	r4,31
   1f878:	2080e716 	blt	r4,r2,1fc18 <__subdf3+0x848>
   1f87c:	01000804 	movi	r4,32
   1f880:	2089c83a 	sub	r4,r4,r2
   1f884:	1914983a 	sll	r10,r3,r4
   1f888:	8890d83a 	srl	r8,r17,r2
   1f88c:	8908983a 	sll	r4,r17,r4
   1f890:	1884d83a 	srl	r2,r3,r2
   1f894:	5222b03a 	or	r17,r10,r8
   1f898:	2006c03a 	cmpne	r3,r4,zero
   1f89c:	88e2b03a 	or	r17,r17,r3
   1f8a0:	3463c83a 	sub	r17,r6,r17
   1f8a4:	2885c83a 	sub	r2,r5,r2
   1f8a8:	344d803a 	cmpltu	r6,r6,r17
   1f8ac:	1187c83a 	sub	r3,r2,r6
   1f8b0:	4821883a 	mov	r16,r9
   1f8b4:	3825883a 	mov	r18,r7
   1f8b8:	003f2306 	br	1f548 <__alt_data_end+0xfc01f548>
   1f8bc:	24d0b03a 	or	r8,r4,r19
   1f8c0:	40001b1e 	bne	r8,zero,1f930 <__subdf3+0x560>
   1f8c4:	0005883a 	mov	r2,zero
   1f8c8:	0009883a 	mov	r4,zero
   1f8cc:	0021883a 	mov	r16,zero
   1f8d0:	003f4906 	br	1f5f8 <__alt_data_end+0xfc01f5f8>
   1f8d4:	010007c4 	movi	r4,31
   1f8d8:	20803a16 	blt	r4,r2,1f9c4 <__subdf3+0x5f4>
   1f8dc:	01000804 	movi	r4,32
   1f8e0:	2089c83a 	sub	r4,r4,r2
   1f8e4:	2912983a 	sll	r9,r5,r4
   1f8e8:	3090d83a 	srl	r8,r6,r2
   1f8ec:	3108983a 	sll	r4,r6,r4
   1f8f0:	2884d83a 	srl	r2,r5,r2
   1f8f4:	4a12b03a 	or	r9,r9,r8
   1f8f8:	2008c03a 	cmpne	r4,r4,zero
   1f8fc:	4912b03a 	or	r9,r9,r4
   1f900:	003f4e06 	br	1f63c <__alt_data_end+0xfc01f63c>
   1f904:	1c48b03a 	or	r4,r3,r17
   1f908:	20003c26 	beq	r4,zero,1f9fc <__subdf3+0x62c>
   1f90c:	0084303a 	nor	r2,zero,r2
   1f910:	1000381e 	bne	r2,zero,1f9f4 <__subdf3+0x624>
   1f914:	3463c83a 	sub	r17,r6,r17
   1f918:	28c5c83a 	sub	r2,r5,r3
   1f91c:	344d803a 	cmpltu	r6,r6,r17
   1f920:	1187c83a 	sub	r3,r2,r6
   1f924:	4821883a 	mov	r16,r9
   1f928:	3825883a 	mov	r18,r7
   1f92c:	003f0606 	br	1f548 <__alt_data_end+0xfc01f548>
   1f930:	2023883a 	mov	r17,r4
   1f934:	003f0906 	br	1f55c <__alt_data_end+0xfc01f55c>
   1f938:	0101ffc4 	movi	r4,2047
   1f93c:	813f3a1e 	bne	r16,r4,1f628 <__alt_data_end+0xfc01f628>
   1f940:	003ec406 	br	1f454 <__alt_data_end+0xfc01f454>
   1f944:	0005883a 	mov	r2,zero
   1f948:	003fb106 	br	1f810 <__alt_data_end+0xfc01f810>
   1f94c:	0005883a 	mov	r2,zero
   1f950:	003fbc06 	br	1f844 <__alt_data_end+0xfc01f844>
   1f954:	1c44b03a 	or	r2,r3,r17
   1f958:	80008e1e 	bne	r16,zero,1fb94 <__subdf3+0x7c4>
   1f95c:	1000c826 	beq	r2,zero,1fc80 <__subdf3+0x8b0>
   1f960:	2984b03a 	or	r2,r5,r6
   1f964:	103ebb26 	beq	r2,zero,1f454 <__alt_data_end+0xfc01f454>
   1f968:	8989883a 	add	r4,r17,r6
   1f96c:	1945883a 	add	r2,r3,r5
   1f970:	2447803a 	cmpltu	r3,r4,r17
   1f974:	1887883a 	add	r3,r3,r2
   1f978:	1880202c 	andhi	r2,r3,128
   1f97c:	2023883a 	mov	r17,r4
   1f980:	103f1626 	beq	r2,zero,1f5dc <__alt_data_end+0xfc01f5dc>
   1f984:	00bfe034 	movhi	r2,65408
   1f988:	10bfffc4 	addi	r2,r2,-1
   1f98c:	5021883a 	mov	r16,r10
   1f990:	1886703a 	and	r3,r3,r2
   1f994:	003eaf06 	br	1f454 <__alt_data_end+0xfc01f454>
   1f998:	3825883a 	mov	r18,r7
   1f99c:	003f0f06 	br	1f5dc <__alt_data_end+0xfc01f5dc>
   1f9a0:	1c44b03a 	or	r2,r3,r17
   1f9a4:	8000251e 	bne	r16,zero,1fa3c <__subdf3+0x66c>
   1f9a8:	1000661e 	bne	r2,zero,1fb44 <__subdf3+0x774>
   1f9ac:	2990b03a 	or	r8,r5,r6
   1f9b0:	40009626 	beq	r8,zero,1fc0c <__subdf3+0x83c>
   1f9b4:	2807883a 	mov	r3,r5
   1f9b8:	3023883a 	mov	r17,r6
   1f9bc:	3825883a 	mov	r18,r7
   1f9c0:	003ea406 	br	1f454 <__alt_data_end+0xfc01f454>
   1f9c4:	127ff804 	addi	r9,r2,-32
   1f9c8:	01000804 	movi	r4,32
   1f9cc:	2a52d83a 	srl	r9,r5,r9
   1f9d0:	11008c26 	beq	r2,r4,1fc04 <__subdf3+0x834>
   1f9d4:	01001004 	movi	r4,64
   1f9d8:	2085c83a 	sub	r2,r4,r2
   1f9dc:	2884983a 	sll	r2,r5,r2
   1f9e0:	118cb03a 	or	r6,r2,r6
   1f9e4:	300cc03a 	cmpne	r6,r6,zero
   1f9e8:	4992b03a 	or	r9,r9,r6
   1f9ec:	0005883a 	mov	r2,zero
   1f9f0:	003f1206 	br	1f63c <__alt_data_end+0xfc01f63c>
   1f9f4:	0101ffc4 	movi	r4,2047
   1f9f8:	493f9c1e 	bne	r9,r4,1f86c <__alt_data_end+0xfc01f86c>
   1f9fc:	2807883a 	mov	r3,r5
   1fa00:	3023883a 	mov	r17,r6
   1fa04:	4821883a 	mov	r16,r9
   1fa08:	3825883a 	mov	r18,r7
   1fa0c:	003e9106 	br	1f454 <__alt_data_end+0xfc01f454>
   1fa10:	80001f1e 	bne	r16,zero,1fa90 <__subdf3+0x6c0>
   1fa14:	1c48b03a 	or	r4,r3,r17
   1fa18:	20005a26 	beq	r4,zero,1fb84 <__subdf3+0x7b4>
   1fa1c:	0084303a 	nor	r2,zero,r2
   1fa20:	1000561e 	bne	r2,zero,1fb7c <__subdf3+0x7ac>
   1fa24:	89a3883a 	add	r17,r17,r6
   1fa28:	1945883a 	add	r2,r3,r5
   1fa2c:	898d803a 	cmpltu	r6,r17,r6
   1fa30:	3087883a 	add	r3,r6,r2
   1fa34:	4821883a 	mov	r16,r9
   1fa38:	003f0506 	br	1f650 <__alt_data_end+0xfc01f650>
   1fa3c:	10002b1e 	bne	r2,zero,1faec <__subdf3+0x71c>
   1fa40:	2984b03a 	or	r2,r5,r6
   1fa44:	10008026 	beq	r2,zero,1fc48 <__subdf3+0x878>
   1fa48:	2807883a 	mov	r3,r5
   1fa4c:	3023883a 	mov	r17,r6
   1fa50:	3825883a 	mov	r18,r7
   1fa54:	0401ffc4 	movi	r16,2047
   1fa58:	003e7e06 	br	1f454 <__alt_data_end+0xfc01f454>
   1fa5c:	3809883a 	mov	r4,r7
   1fa60:	0011883a 	mov	r8,zero
   1fa64:	0005883a 	mov	r2,zero
   1fa68:	003ee306 	br	1f5f8 <__alt_data_end+0xfc01f5f8>
   1fa6c:	1c62b03a 	or	r17,r3,r17
   1fa70:	8822c03a 	cmpne	r17,r17,zero
   1fa74:	0005883a 	mov	r2,zero
   1fa78:	003f8906 	br	1f8a0 <__alt_data_end+0xfc01f8a0>
   1fa7c:	3809883a 	mov	r4,r7
   1fa80:	4821883a 	mov	r16,r9
   1fa84:	0011883a 	mov	r8,zero
   1fa88:	0005883a 	mov	r2,zero
   1fa8c:	003eda06 	br	1f5f8 <__alt_data_end+0xfc01f5f8>
   1fa90:	0101ffc4 	movi	r4,2047
   1fa94:	49003b26 	beq	r9,r4,1fb84 <__subdf3+0x7b4>
   1fa98:	0085c83a 	sub	r2,zero,r2
   1fa9c:	18c02034 	orhi	r3,r3,128
   1faa0:	01000e04 	movi	r4,56
   1faa4:	20806e16 	blt	r4,r2,1fc60 <__subdf3+0x890>
   1faa8:	010007c4 	movi	r4,31
   1faac:	20807716 	blt	r4,r2,1fc8c <__subdf3+0x8bc>
   1fab0:	01000804 	movi	r4,32
   1fab4:	2089c83a 	sub	r4,r4,r2
   1fab8:	1914983a 	sll	r10,r3,r4
   1fabc:	8890d83a 	srl	r8,r17,r2
   1fac0:	8908983a 	sll	r4,r17,r4
   1fac4:	1884d83a 	srl	r2,r3,r2
   1fac8:	5222b03a 	or	r17,r10,r8
   1facc:	2006c03a 	cmpne	r3,r4,zero
   1fad0:	88e2b03a 	or	r17,r17,r3
   1fad4:	89a3883a 	add	r17,r17,r6
   1fad8:	1145883a 	add	r2,r2,r5
   1fadc:	898d803a 	cmpltu	r6,r17,r6
   1fae0:	3087883a 	add	r3,r6,r2
   1fae4:	4821883a 	mov	r16,r9
   1fae8:	003ed906 	br	1f650 <__alt_data_end+0xfc01f650>
   1faec:	2984b03a 	or	r2,r5,r6
   1faf0:	10004226 	beq	r2,zero,1fbfc <__subdf3+0x82c>
   1faf4:	1808d0fa 	srli	r4,r3,3
   1faf8:	8822d0fa 	srli	r17,r17,3
   1fafc:	1806977a 	slli	r3,r3,29
   1fb00:	2080022c 	andhi	r2,r4,8
   1fb04:	1c62b03a 	or	r17,r3,r17
   1fb08:	10000826 	beq	r2,zero,1fb2c <__subdf3+0x75c>
   1fb0c:	2812d0fa 	srli	r9,r5,3
   1fb10:	4880022c 	andhi	r2,r9,8
   1fb14:	1000051e 	bne	r2,zero,1fb2c <__subdf3+0x75c>
   1fb18:	300cd0fa 	srli	r6,r6,3
   1fb1c:	2804977a 	slli	r2,r5,29
   1fb20:	4809883a 	mov	r4,r9
   1fb24:	3825883a 	mov	r18,r7
   1fb28:	11a2b03a 	or	r17,r2,r6
   1fb2c:	8806d77a 	srli	r3,r17,29
   1fb30:	200890fa 	slli	r4,r4,3
   1fb34:	882290fa 	slli	r17,r17,3
   1fb38:	0401ffc4 	movi	r16,2047
   1fb3c:	1906b03a 	or	r3,r3,r4
   1fb40:	003e4406 	br	1f454 <__alt_data_end+0xfc01f454>
   1fb44:	2984b03a 	or	r2,r5,r6
   1fb48:	103e4226 	beq	r2,zero,1f454 <__alt_data_end+0xfc01f454>
   1fb4c:	8989c83a 	sub	r4,r17,r6
   1fb50:	8911803a 	cmpltu	r8,r17,r4
   1fb54:	1945c83a 	sub	r2,r3,r5
   1fb58:	1205c83a 	sub	r2,r2,r8
   1fb5c:	1200202c 	andhi	r8,r2,128
   1fb60:	403e9a26 	beq	r8,zero,1f5cc <__alt_data_end+0xfc01f5cc>
   1fb64:	3463c83a 	sub	r17,r6,r17
   1fb68:	28c5c83a 	sub	r2,r5,r3
   1fb6c:	344d803a 	cmpltu	r6,r6,r17
   1fb70:	1187c83a 	sub	r3,r2,r6
   1fb74:	3825883a 	mov	r18,r7
   1fb78:	003e3606 	br	1f454 <__alt_data_end+0xfc01f454>
   1fb7c:	0101ffc4 	movi	r4,2047
   1fb80:	493fc71e 	bne	r9,r4,1faa0 <__alt_data_end+0xfc01faa0>
   1fb84:	2807883a 	mov	r3,r5
   1fb88:	3023883a 	mov	r17,r6
   1fb8c:	4821883a 	mov	r16,r9
   1fb90:	003e3006 	br	1f454 <__alt_data_end+0xfc01f454>
   1fb94:	10003626 	beq	r2,zero,1fc70 <__subdf3+0x8a0>
   1fb98:	2984b03a 	or	r2,r5,r6
   1fb9c:	10001726 	beq	r2,zero,1fbfc <__subdf3+0x82c>
   1fba0:	1808d0fa 	srli	r4,r3,3
   1fba4:	8822d0fa 	srli	r17,r17,3
   1fba8:	1806977a 	slli	r3,r3,29
   1fbac:	2080022c 	andhi	r2,r4,8
   1fbb0:	1c62b03a 	or	r17,r3,r17
   1fbb4:	10000726 	beq	r2,zero,1fbd4 <__subdf3+0x804>
   1fbb8:	2812d0fa 	srli	r9,r5,3
   1fbbc:	4880022c 	andhi	r2,r9,8
   1fbc0:	1000041e 	bne	r2,zero,1fbd4 <__subdf3+0x804>
   1fbc4:	300cd0fa 	srli	r6,r6,3
   1fbc8:	2804977a 	slli	r2,r5,29
   1fbcc:	4809883a 	mov	r4,r9
   1fbd0:	11a2b03a 	or	r17,r2,r6
   1fbd4:	8806d77a 	srli	r3,r17,29
   1fbd8:	200890fa 	slli	r4,r4,3
   1fbdc:	882290fa 	slli	r17,r17,3
   1fbe0:	3825883a 	mov	r18,r7
   1fbe4:	1906b03a 	or	r3,r3,r4
   1fbe8:	0401ffc4 	movi	r16,2047
   1fbec:	003e1906 	br	1f454 <__alt_data_end+0xfc01f454>
   1fbf0:	000b883a 	mov	r5,zero
   1fbf4:	0005883a 	mov	r2,zero
   1fbf8:	003e2e06 	br	1f4b4 <__alt_data_end+0xfc01f4b4>
   1fbfc:	0401ffc4 	movi	r16,2047
   1fc00:	003e1406 	br	1f454 <__alt_data_end+0xfc01f454>
   1fc04:	0005883a 	mov	r2,zero
   1fc08:	003f7506 	br	1f9e0 <__alt_data_end+0xfc01f9e0>
   1fc0c:	0005883a 	mov	r2,zero
   1fc10:	0009883a 	mov	r4,zero
   1fc14:	003e7806 	br	1f5f8 <__alt_data_end+0xfc01f5f8>
   1fc18:	123ff804 	addi	r8,r2,-32
   1fc1c:	01000804 	movi	r4,32
   1fc20:	1a10d83a 	srl	r8,r3,r8
   1fc24:	11002526 	beq	r2,r4,1fcbc <__subdf3+0x8ec>
   1fc28:	01001004 	movi	r4,64
   1fc2c:	2085c83a 	sub	r2,r4,r2
   1fc30:	1884983a 	sll	r2,r3,r2
   1fc34:	1444b03a 	or	r2,r2,r17
   1fc38:	1004c03a 	cmpne	r2,r2,zero
   1fc3c:	40a2b03a 	or	r17,r8,r2
   1fc40:	0005883a 	mov	r2,zero
   1fc44:	003f1606 	br	1f8a0 <__alt_data_end+0xfc01f8a0>
   1fc48:	02000434 	movhi	r8,16
   1fc4c:	0009883a 	mov	r4,zero
   1fc50:	423fffc4 	addi	r8,r8,-1
   1fc54:	00bfffc4 	movi	r2,-1
   1fc58:	0401ffc4 	movi	r16,2047
   1fc5c:	003e6606 	br	1f5f8 <__alt_data_end+0xfc01f5f8>
   1fc60:	1c62b03a 	or	r17,r3,r17
   1fc64:	8822c03a 	cmpne	r17,r17,zero
   1fc68:	0005883a 	mov	r2,zero
   1fc6c:	003f9906 	br	1fad4 <__alt_data_end+0xfc01fad4>
   1fc70:	2807883a 	mov	r3,r5
   1fc74:	3023883a 	mov	r17,r6
   1fc78:	0401ffc4 	movi	r16,2047
   1fc7c:	003df506 	br	1f454 <__alt_data_end+0xfc01f454>
   1fc80:	2807883a 	mov	r3,r5
   1fc84:	3023883a 	mov	r17,r6
   1fc88:	003df206 	br	1f454 <__alt_data_end+0xfc01f454>
   1fc8c:	123ff804 	addi	r8,r2,-32
   1fc90:	01000804 	movi	r4,32
   1fc94:	1a10d83a 	srl	r8,r3,r8
   1fc98:	11000a26 	beq	r2,r4,1fcc4 <__subdf3+0x8f4>
   1fc9c:	01001004 	movi	r4,64
   1fca0:	2085c83a 	sub	r2,r4,r2
   1fca4:	1884983a 	sll	r2,r3,r2
   1fca8:	1444b03a 	or	r2,r2,r17
   1fcac:	1004c03a 	cmpne	r2,r2,zero
   1fcb0:	40a2b03a 	or	r17,r8,r2
   1fcb4:	0005883a 	mov	r2,zero
   1fcb8:	003f8606 	br	1fad4 <__alt_data_end+0xfc01fad4>
   1fcbc:	0005883a 	mov	r2,zero
   1fcc0:	003fdc06 	br	1fc34 <__alt_data_end+0xfc01fc34>
   1fcc4:	0005883a 	mov	r2,zero
   1fcc8:	003ff706 	br	1fca8 <__alt_data_end+0xfc01fca8>

0001fccc <__fixdfsi>:
   1fccc:	280cd53a 	srli	r6,r5,20
   1fcd0:	00c00434 	movhi	r3,16
   1fcd4:	18ffffc4 	addi	r3,r3,-1
   1fcd8:	3181ffcc 	andi	r6,r6,2047
   1fcdc:	01c0ff84 	movi	r7,1022
   1fce0:	28c6703a 	and	r3,r5,r3
   1fce4:	280ad7fa 	srli	r5,r5,31
   1fce8:	3980120e 	bge	r7,r6,1fd34 <__fixdfsi+0x68>
   1fcec:	00810744 	movi	r2,1053
   1fcf0:	11800c16 	blt	r2,r6,1fd24 <__fixdfsi+0x58>
   1fcf4:	00810cc4 	movi	r2,1075
   1fcf8:	1185c83a 	sub	r2,r2,r6
   1fcfc:	01c007c4 	movi	r7,31
   1fd00:	18c00434 	orhi	r3,r3,16
   1fd04:	38800d16 	blt	r7,r2,1fd3c <__fixdfsi+0x70>
   1fd08:	31befb44 	addi	r6,r6,-1043
   1fd0c:	2084d83a 	srl	r2,r4,r2
   1fd10:	1986983a 	sll	r3,r3,r6
   1fd14:	1884b03a 	or	r2,r3,r2
   1fd18:	28000726 	beq	r5,zero,1fd38 <__fixdfsi+0x6c>
   1fd1c:	0085c83a 	sub	r2,zero,r2
   1fd20:	f800283a 	ret
   1fd24:	00a00034 	movhi	r2,32768
   1fd28:	10bfffc4 	addi	r2,r2,-1
   1fd2c:	2885883a 	add	r2,r5,r2
   1fd30:	f800283a 	ret
   1fd34:	0005883a 	mov	r2,zero
   1fd38:	f800283a 	ret
   1fd3c:	008104c4 	movi	r2,1043
   1fd40:	1185c83a 	sub	r2,r2,r6
   1fd44:	1884d83a 	srl	r2,r3,r2
   1fd48:	003ff306 	br	1fd18 <__alt_data_end+0xfc01fd18>

0001fd4c <__floatsidf>:
   1fd4c:	defffd04 	addi	sp,sp,-12
   1fd50:	dfc00215 	stw	ra,8(sp)
   1fd54:	dc400115 	stw	r17,4(sp)
   1fd58:	dc000015 	stw	r16,0(sp)
   1fd5c:	20002b26 	beq	r4,zero,1fe0c <__floatsidf+0xc0>
   1fd60:	2023883a 	mov	r17,r4
   1fd64:	2020d7fa 	srli	r16,r4,31
   1fd68:	20002d16 	blt	r4,zero,1fe20 <__floatsidf+0xd4>
   1fd6c:	8809883a 	mov	r4,r17
   1fd70:	000f35c0 	call	f35c <__clzsi2>
   1fd74:	01410784 	movi	r5,1054
   1fd78:	288bc83a 	sub	r5,r5,r2
   1fd7c:	01010cc4 	movi	r4,1075
   1fd80:	2149c83a 	sub	r4,r4,r5
   1fd84:	00c007c4 	movi	r3,31
   1fd88:	1900160e 	bge	r3,r4,1fde4 <__floatsidf+0x98>
   1fd8c:	00c104c4 	movi	r3,1043
   1fd90:	1947c83a 	sub	r3,r3,r5
   1fd94:	88c6983a 	sll	r3,r17,r3
   1fd98:	00800434 	movhi	r2,16
   1fd9c:	10bfffc4 	addi	r2,r2,-1
   1fda0:	1886703a 	and	r3,r3,r2
   1fda4:	2941ffcc 	andi	r5,r5,2047
   1fda8:	800d883a 	mov	r6,r16
   1fdac:	0005883a 	mov	r2,zero
   1fdb0:	280a953a 	slli	r5,r5,20
   1fdb4:	31803fcc 	andi	r6,r6,255
   1fdb8:	01000434 	movhi	r4,16
   1fdbc:	300c97fa 	slli	r6,r6,31
   1fdc0:	213fffc4 	addi	r4,r4,-1
   1fdc4:	1906703a 	and	r3,r3,r4
   1fdc8:	1946b03a 	or	r3,r3,r5
   1fdcc:	1986b03a 	or	r3,r3,r6
   1fdd0:	dfc00217 	ldw	ra,8(sp)
   1fdd4:	dc400117 	ldw	r17,4(sp)
   1fdd8:	dc000017 	ldw	r16,0(sp)
   1fddc:	dec00304 	addi	sp,sp,12
   1fde0:	f800283a 	ret
   1fde4:	00c002c4 	movi	r3,11
   1fde8:	1887c83a 	sub	r3,r3,r2
   1fdec:	88c6d83a 	srl	r3,r17,r3
   1fdf0:	8904983a 	sll	r2,r17,r4
   1fdf4:	01000434 	movhi	r4,16
   1fdf8:	213fffc4 	addi	r4,r4,-1
   1fdfc:	2941ffcc 	andi	r5,r5,2047
   1fe00:	1906703a 	and	r3,r3,r4
   1fe04:	800d883a 	mov	r6,r16
   1fe08:	003fe906 	br	1fdb0 <__alt_data_end+0xfc01fdb0>
   1fe0c:	000d883a 	mov	r6,zero
   1fe10:	000b883a 	mov	r5,zero
   1fe14:	0007883a 	mov	r3,zero
   1fe18:	0005883a 	mov	r2,zero
   1fe1c:	003fe406 	br	1fdb0 <__alt_data_end+0xfc01fdb0>
   1fe20:	0123c83a 	sub	r17,zero,r4
   1fe24:	003fd106 	br	1fd6c <__alt_data_end+0xfc01fd6c>

0001fe28 <__floatunsidf>:
   1fe28:	defffe04 	addi	sp,sp,-8
   1fe2c:	dc000015 	stw	r16,0(sp)
   1fe30:	dfc00115 	stw	ra,4(sp)
   1fe34:	2021883a 	mov	r16,r4
   1fe38:	20002226 	beq	r4,zero,1fec4 <__floatunsidf+0x9c>
   1fe3c:	000f35c0 	call	f35c <__clzsi2>
   1fe40:	01010784 	movi	r4,1054
   1fe44:	2089c83a 	sub	r4,r4,r2
   1fe48:	01810cc4 	movi	r6,1075
   1fe4c:	310dc83a 	sub	r6,r6,r4
   1fe50:	00c007c4 	movi	r3,31
   1fe54:	1980120e 	bge	r3,r6,1fea0 <__floatunsidf+0x78>
   1fe58:	00c104c4 	movi	r3,1043
   1fe5c:	1907c83a 	sub	r3,r3,r4
   1fe60:	80ca983a 	sll	r5,r16,r3
   1fe64:	00800434 	movhi	r2,16
   1fe68:	10bfffc4 	addi	r2,r2,-1
   1fe6c:	2101ffcc 	andi	r4,r4,2047
   1fe70:	0021883a 	mov	r16,zero
   1fe74:	288a703a 	and	r5,r5,r2
   1fe78:	2008953a 	slli	r4,r4,20
   1fe7c:	00c00434 	movhi	r3,16
   1fe80:	18ffffc4 	addi	r3,r3,-1
   1fe84:	28c6703a 	and	r3,r5,r3
   1fe88:	8005883a 	mov	r2,r16
   1fe8c:	1906b03a 	or	r3,r3,r4
   1fe90:	dfc00117 	ldw	ra,4(sp)
   1fe94:	dc000017 	ldw	r16,0(sp)
   1fe98:	dec00204 	addi	sp,sp,8
   1fe9c:	f800283a 	ret
   1fea0:	00c002c4 	movi	r3,11
   1fea4:	188bc83a 	sub	r5,r3,r2
   1fea8:	814ad83a 	srl	r5,r16,r5
   1feac:	00c00434 	movhi	r3,16
   1feb0:	18ffffc4 	addi	r3,r3,-1
   1feb4:	81a0983a 	sll	r16,r16,r6
   1feb8:	2101ffcc 	andi	r4,r4,2047
   1febc:	28ca703a 	and	r5,r5,r3
   1fec0:	003fed06 	br	1fe78 <__alt_data_end+0xfc01fe78>
   1fec4:	0009883a 	mov	r4,zero
   1fec8:	000b883a 	mov	r5,zero
   1fecc:	003fea06 	br	1fe78 <__alt_data_end+0xfc01fe78>

0001fed0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1fed0:	defffe04 	addi	sp,sp,-8
   1fed4:	dfc00115 	stw	ra,4(sp)
   1fed8:	df000015 	stw	fp,0(sp)
   1fedc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fee0:	d0a5bd17 	ldw	r2,-26892(gp)
   1fee4:	10000326 	beq	r2,zero,1fef4 <alt_get_errno+0x24>
   1fee8:	d0a5bd17 	ldw	r2,-26892(gp)
   1feec:	103ee83a 	callr	r2
   1fef0:	00000106 	br	1fef8 <alt_get_errno+0x28>
   1fef4:	d0b24e04 	addi	r2,gp,-14024
}
   1fef8:	e037883a 	mov	sp,fp
   1fefc:	dfc00117 	ldw	ra,4(sp)
   1ff00:	df000017 	ldw	fp,0(sp)
   1ff04:	dec00204 	addi	sp,sp,8
   1ff08:	f800283a 	ret

0001ff0c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1ff0c:	defffb04 	addi	sp,sp,-20
   1ff10:	dfc00415 	stw	ra,16(sp)
   1ff14:	df000315 	stw	fp,12(sp)
   1ff18:	df000304 	addi	fp,sp,12
   1ff1c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1ff20:	e0bfff17 	ldw	r2,-4(fp)
   1ff24:	10000816 	blt	r2,zero,1ff48 <close+0x3c>
   1ff28:	01400304 	movi	r5,12
   1ff2c:	e13fff17 	ldw	r4,-4(fp)
   1ff30:	000d8b80 	call	d8b8 <__mulsi3>
   1ff34:	1007883a 	mov	r3,r2
   1ff38:	008000f4 	movhi	r2,3
   1ff3c:	10b0b904 	addi	r2,r2,-15644
   1ff40:	1885883a 	add	r2,r3,r2
   1ff44:	00000106 	br	1ff4c <close+0x40>
   1ff48:	0005883a 	mov	r2,zero
   1ff4c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1ff50:	e0bffd17 	ldw	r2,-12(fp)
   1ff54:	10001926 	beq	r2,zero,1ffbc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1ff58:	e0bffd17 	ldw	r2,-12(fp)
   1ff5c:	10800017 	ldw	r2,0(r2)
   1ff60:	10800417 	ldw	r2,16(r2)
   1ff64:	10000626 	beq	r2,zero,1ff80 <close+0x74>
   1ff68:	e0bffd17 	ldw	r2,-12(fp)
   1ff6c:	10800017 	ldw	r2,0(r2)
   1ff70:	10800417 	ldw	r2,16(r2)
   1ff74:	e13ffd17 	ldw	r4,-12(fp)
   1ff78:	103ee83a 	callr	r2
   1ff7c:	00000106 	br	1ff84 <close+0x78>
   1ff80:	0005883a 	mov	r2,zero
   1ff84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1ff88:	e13fff17 	ldw	r4,-4(fp)
   1ff8c:	00207b40 	call	207b4 <alt_release_fd>
    if (rval < 0)
   1ff90:	e0bffe17 	ldw	r2,-8(fp)
   1ff94:	1000070e 	bge	r2,zero,1ffb4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1ff98:	001fed00 	call	1fed0 <alt_get_errno>
   1ff9c:	1007883a 	mov	r3,r2
   1ffa0:	e0bffe17 	ldw	r2,-8(fp)
   1ffa4:	0085c83a 	sub	r2,zero,r2
   1ffa8:	18800015 	stw	r2,0(r3)
      return -1;
   1ffac:	00bfffc4 	movi	r2,-1
   1ffb0:	00000706 	br	1ffd0 <close+0xc4>
    }
    return 0;
   1ffb4:	0005883a 	mov	r2,zero
   1ffb8:	00000506 	br	1ffd0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1ffbc:	001fed00 	call	1fed0 <alt_get_errno>
   1ffc0:	1007883a 	mov	r3,r2
   1ffc4:	00801444 	movi	r2,81
   1ffc8:	18800015 	stw	r2,0(r3)
    return -1;
   1ffcc:	00bfffc4 	movi	r2,-1
  }
}
   1ffd0:	e037883a 	mov	sp,fp
   1ffd4:	dfc00117 	ldw	ra,4(sp)
   1ffd8:	df000017 	ldw	fp,0(sp)
   1ffdc:	dec00204 	addi	sp,sp,8
   1ffe0:	f800283a 	ret

0001ffe4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1ffe4:	defffc04 	addi	sp,sp,-16
   1ffe8:	df000315 	stw	fp,12(sp)
   1ffec:	df000304 	addi	fp,sp,12
   1fff0:	e13ffd15 	stw	r4,-12(fp)
   1fff4:	e17ffe15 	stw	r5,-8(fp)
   1fff8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1fffc:	e0bfff17 	ldw	r2,-4(fp)
}
   20000:	e037883a 	mov	sp,fp
   20004:	df000017 	ldw	fp,0(sp)
   20008:	dec00104 	addi	sp,sp,4
   2000c:	f800283a 	ret

00020010 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   20010:	defffd04 	addi	sp,sp,-12
   20014:	df000215 	stw	fp,8(sp)
   20018:	df000204 	addi	fp,sp,8
   2001c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   20020:	0001883a 	nop
   20024:	e0bfff17 	ldw	r2,-4(fp)
   20028:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2002c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   20030:	10000226 	beq	r2,zero,2003c <_exit+0x2c>
    ALT_SIM_FAIL();
   20034:	002af070 	cmpltui	zero,zero,43969
   20038:	00000106 	br	20040 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   2003c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   20040:	003fff06 	br	20040 <__alt_data_end+0xfc020040>

00020044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20044:	defffe04 	addi	sp,sp,-8
   20048:	dfc00115 	stw	ra,4(sp)
   2004c:	df000015 	stw	fp,0(sp)
   20050:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20054:	d0a5bd17 	ldw	r2,-26892(gp)
   20058:	10000326 	beq	r2,zero,20068 <alt_get_errno+0x24>
   2005c:	d0a5bd17 	ldw	r2,-26892(gp)
   20060:	103ee83a 	callr	r2
   20064:	00000106 	br	2006c <alt_get_errno+0x28>
   20068:	d0b24e04 	addi	r2,gp,-14024
}
   2006c:	e037883a 	mov	sp,fp
   20070:	dfc00117 	ldw	ra,4(sp)
   20074:	df000017 	ldw	fp,0(sp)
   20078:	dec00204 	addi	sp,sp,8
   2007c:	f800283a 	ret

00020080 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   20080:	defffb04 	addi	sp,sp,-20
   20084:	dfc00415 	stw	ra,16(sp)
   20088:	df000315 	stw	fp,12(sp)
   2008c:	df000304 	addi	fp,sp,12
   20090:	e13ffe15 	stw	r4,-8(fp)
   20094:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20098:	e0bffe17 	ldw	r2,-8(fp)
   2009c:	10000816 	blt	r2,zero,200c0 <fstat+0x40>
   200a0:	01400304 	movi	r5,12
   200a4:	e13ffe17 	ldw	r4,-8(fp)
   200a8:	000d8b80 	call	d8b8 <__mulsi3>
   200ac:	1007883a 	mov	r3,r2
   200b0:	008000f4 	movhi	r2,3
   200b4:	10b0b904 	addi	r2,r2,-15644
   200b8:	1885883a 	add	r2,r3,r2
   200bc:	00000106 	br	200c4 <fstat+0x44>
   200c0:	0005883a 	mov	r2,zero
   200c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   200c8:	e0bffd17 	ldw	r2,-12(fp)
   200cc:	10001026 	beq	r2,zero,20110 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   200d0:	e0bffd17 	ldw	r2,-12(fp)
   200d4:	10800017 	ldw	r2,0(r2)
   200d8:	10800817 	ldw	r2,32(r2)
   200dc:	10000726 	beq	r2,zero,200fc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   200e0:	e0bffd17 	ldw	r2,-12(fp)
   200e4:	10800017 	ldw	r2,0(r2)
   200e8:	10800817 	ldw	r2,32(r2)
   200ec:	e17fff17 	ldw	r5,-4(fp)
   200f0:	e13ffd17 	ldw	r4,-12(fp)
   200f4:	103ee83a 	callr	r2
   200f8:	00000a06 	br	20124 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   200fc:	e0bfff17 	ldw	r2,-4(fp)
   20100:	00c80004 	movi	r3,8192
   20104:	10c00115 	stw	r3,4(r2)
      return 0;
   20108:	0005883a 	mov	r2,zero
   2010c:	00000506 	br	20124 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   20110:	00200440 	call	20044 <alt_get_errno>
   20114:	1007883a 	mov	r3,r2
   20118:	00801444 	movi	r2,81
   2011c:	18800015 	stw	r2,0(r3)
    return -1;
   20120:	00bfffc4 	movi	r2,-1
  }
}
   20124:	e037883a 	mov	sp,fp
   20128:	dfc00117 	ldw	ra,4(sp)
   2012c:	df000017 	ldw	fp,0(sp)
   20130:	dec00204 	addi	sp,sp,8
   20134:	f800283a 	ret

00020138 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   20138:	deffff04 	addi	sp,sp,-4
   2013c:	df000015 	stw	fp,0(sp)
   20140:	d839883a 	mov	fp,sp
  return 0;
   20144:	0005883a 	mov	r2,zero
}
   20148:	e037883a 	mov	sp,fp
   2014c:	df000017 	ldw	fp,0(sp)
   20150:	dec00104 	addi	sp,sp,4
   20154:	f800283a 	ret

00020158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20158:	defffe04 	addi	sp,sp,-8
   2015c:	dfc00115 	stw	ra,4(sp)
   20160:	df000015 	stw	fp,0(sp)
   20164:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20168:	d0a5bd17 	ldw	r2,-26892(gp)
   2016c:	10000326 	beq	r2,zero,2017c <alt_get_errno+0x24>
   20170:	d0a5bd17 	ldw	r2,-26892(gp)
   20174:	103ee83a 	callr	r2
   20178:	00000106 	br	20180 <alt_get_errno+0x28>
   2017c:	d0b24e04 	addi	r2,gp,-14024
}
   20180:	e037883a 	mov	sp,fp
   20184:	dfc00117 	ldw	ra,4(sp)
   20188:	df000017 	ldw	fp,0(sp)
   2018c:	dec00204 	addi	sp,sp,8
   20190:	f800283a 	ret

00020194 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   20194:	deffed04 	addi	sp,sp,-76
   20198:	dfc01215 	stw	ra,72(sp)
   2019c:	df001115 	stw	fp,68(sp)
   201a0:	df001104 	addi	fp,sp,68
   201a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   201a8:	e0bfff17 	ldw	r2,-4(fp)
   201ac:	10000816 	blt	r2,zero,201d0 <isatty+0x3c>
   201b0:	01400304 	movi	r5,12
   201b4:	e13fff17 	ldw	r4,-4(fp)
   201b8:	000d8b80 	call	d8b8 <__mulsi3>
   201bc:	1007883a 	mov	r3,r2
   201c0:	008000f4 	movhi	r2,3
   201c4:	10b0b904 	addi	r2,r2,-15644
   201c8:	1885883a 	add	r2,r3,r2
   201cc:	00000106 	br	201d4 <isatty+0x40>
   201d0:	0005883a 	mov	r2,zero
   201d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   201d8:	e0bfef17 	ldw	r2,-68(fp)
   201dc:	10000e26 	beq	r2,zero,20218 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   201e0:	e0bfef17 	ldw	r2,-68(fp)
   201e4:	10800017 	ldw	r2,0(r2)
   201e8:	10800817 	ldw	r2,32(r2)
   201ec:	1000021e 	bne	r2,zero,201f8 <isatty+0x64>
    {
      return 1;
   201f0:	00800044 	movi	r2,1
   201f4:	00000d06 	br	2022c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   201f8:	e0bff004 	addi	r2,fp,-64
   201fc:	100b883a 	mov	r5,r2
   20200:	e13fff17 	ldw	r4,-4(fp)
   20204:	00200800 	call	20080 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   20208:	e0bff117 	ldw	r2,-60(fp)
   2020c:	10880020 	cmpeqi	r2,r2,8192
   20210:	10803fcc 	andi	r2,r2,255
   20214:	00000506 	br	2022c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   20218:	00201580 	call	20158 <alt_get_errno>
   2021c:	1007883a 	mov	r3,r2
   20220:	00801444 	movi	r2,81
   20224:	18800015 	stw	r2,0(r3)
    return 0;
   20228:	0005883a 	mov	r2,zero
  }
}
   2022c:	e037883a 	mov	sp,fp
   20230:	dfc00117 	ldw	ra,4(sp)
   20234:	df000017 	ldw	fp,0(sp)
   20238:	dec00204 	addi	sp,sp,8
   2023c:	f800283a 	ret

00020240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20240:	defffe04 	addi	sp,sp,-8
   20244:	dfc00115 	stw	ra,4(sp)
   20248:	df000015 	stw	fp,0(sp)
   2024c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20250:	d0a5bd17 	ldw	r2,-26892(gp)
   20254:	10000326 	beq	r2,zero,20264 <alt_get_errno+0x24>
   20258:	d0a5bd17 	ldw	r2,-26892(gp)
   2025c:	103ee83a 	callr	r2
   20260:	00000106 	br	20268 <alt_get_errno+0x28>
   20264:	d0b24e04 	addi	r2,gp,-14024
}
   20268:	e037883a 	mov	sp,fp
   2026c:	dfc00117 	ldw	ra,4(sp)
   20270:	df000017 	ldw	fp,0(sp)
   20274:	dec00204 	addi	sp,sp,8
   20278:	f800283a 	ret

0002027c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   2027c:	defffb04 	addi	sp,sp,-20
   20280:	dfc00415 	stw	ra,16(sp)
   20284:	df000315 	stw	fp,12(sp)
   20288:	df000304 	addi	fp,sp,12
   2028c:	e13ffe15 	stw	r4,-8(fp)
   20290:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   20294:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   20298:	e0bffe17 	ldw	r2,-8(fp)
   2029c:	00802f16 	blt	zero,r2,2035c <kill+0xe0>
  {
    switch (sig)
   202a0:	e0bfff17 	ldw	r2,-4(fp)
   202a4:	10800828 	cmpgeui	r2,r2,32
   202a8:	1000291e 	bne	r2,zero,20350 <kill+0xd4>
   202ac:	e0bfff17 	ldw	r2,-4(fp)
   202b0:	100690ba 	slli	r3,r2,2
   202b4:	008000b4 	movhi	r2,2
   202b8:	1080b204 	addi	r2,r2,712
   202bc:	1885883a 	add	r2,r3,r2
   202c0:	10800017 	ldw	r2,0(r2)
   202c4:	1000683a 	jmp	r2
   202c8:	00020370 	cmpltui	zero,zero,2061
   202cc:	00020350 	cmplti	zero,zero,2061
   202d0:	00020350 	cmplti	zero,zero,2061
   202d4:	00020348 	cmpgei	zero,zero,2061
   202d8:	00020348 	cmpgei	zero,zero,2061
   202dc:	00020348 	cmpgei	zero,zero,2061
   202e0:	00020348 	cmpgei	zero,zero,2061
   202e4:	00020350 	cmplti	zero,zero,2061
   202e8:	00020348 	cmpgei	zero,zero,2061
   202ec:	00020348 	cmpgei	zero,zero,2061
   202f0:	00020348 	cmpgei	zero,zero,2061
   202f4:	00020348 	cmpgei	zero,zero,2061
   202f8:	00020348 	cmpgei	zero,zero,2061
   202fc:	00020348 	cmpgei	zero,zero,2061
   20300:	00020348 	cmpgei	zero,zero,2061
   20304:	00020348 	cmpgei	zero,zero,2061
   20308:	00020370 	cmpltui	zero,zero,2061
   2030c:	00020350 	cmplti	zero,zero,2061
   20310:	00020350 	cmplti	zero,zero,2061
   20314:	00020350 	cmplti	zero,zero,2061
   20318:	00020370 	cmpltui	zero,zero,2061
   2031c:	00020350 	cmplti	zero,zero,2061
   20320:	00020350 	cmplti	zero,zero,2061
   20324:	00020348 	cmpgei	zero,zero,2061
   20328:	00020348 	cmpgei	zero,zero,2061
   2032c:	00020348 	cmpgei	zero,zero,2061
   20330:	00020348 	cmpgei	zero,zero,2061
   20334:	00020348 	cmpgei	zero,zero,2061
   20338:	00020350 	cmplti	zero,zero,2061
   2033c:	00020350 	cmplti	zero,zero,2061
   20340:	00020348 	cmpgei	zero,zero,2061
   20344:	00020348 	cmpgei	zero,zero,2061
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   20348:	0009883a 	mov	r4,zero
   2034c:	00200100 	call	20010 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   20350:	00800584 	movi	r2,22
   20354:	e0bffd15 	stw	r2,-12(fp)
   20358:	00000606 	br	20374 <kill+0xf8>
    }
  }

  else if (pid > 0)
   2035c:	e0bffe17 	ldw	r2,-8(fp)
   20360:	0080040e 	bge	zero,r2,20374 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   20364:	008000c4 	movi	r2,3
   20368:	e0bffd15 	stw	r2,-12(fp)
   2036c:	00000106 	br	20374 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   20370:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   20374:	e0bffd17 	ldw	r2,-12(fp)
   20378:	10000626 	beq	r2,zero,20394 <kill+0x118>
  {
    ALT_ERRNO = status;
   2037c:	00202400 	call	20240 <alt_get_errno>
   20380:	1007883a 	mov	r3,r2
   20384:	e0bffd17 	ldw	r2,-12(fp)
   20388:	18800015 	stw	r2,0(r3)
    return -1;
   2038c:	00bfffc4 	movi	r2,-1
   20390:	00000106 	br	20398 <kill+0x11c>
  }

  return 0;
   20394:	0005883a 	mov	r2,zero
}
   20398:	e037883a 	mov	sp,fp
   2039c:	dfc00117 	ldw	ra,4(sp)
   203a0:	df000017 	ldw	fp,0(sp)
   203a4:	dec00204 	addi	sp,sp,8
   203a8:	f800283a 	ret

000203ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   203ac:	defffc04 	addi	sp,sp,-16
   203b0:	df000315 	stw	fp,12(sp)
   203b4:	df000304 	addi	fp,sp,12
   203b8:	e13ffd15 	stw	r4,-12(fp)
   203bc:	e17ffe15 	stw	r5,-8(fp)
   203c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   203c4:	e0fffe17 	ldw	r3,-8(fp)
   203c8:	e0bffd17 	ldw	r2,-12(fp)
   203cc:	18800c26 	beq	r3,r2,20400 <alt_load_section+0x54>
  {
    while( to != end )
   203d0:	00000806 	br	203f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   203d4:	e0bffe17 	ldw	r2,-8(fp)
   203d8:	10c00104 	addi	r3,r2,4
   203dc:	e0fffe15 	stw	r3,-8(fp)
   203e0:	e0fffd17 	ldw	r3,-12(fp)
   203e4:	19000104 	addi	r4,r3,4
   203e8:	e13ffd15 	stw	r4,-12(fp)
   203ec:	18c00017 	ldw	r3,0(r3)
   203f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   203f4:	e0fffe17 	ldw	r3,-8(fp)
   203f8:	e0bfff17 	ldw	r2,-4(fp)
   203fc:	18bff51e 	bne	r3,r2,203d4 <__alt_data_end+0xfc0203d4>
    {
      *to++ = *from++;
    }
  }
}
   20400:	0001883a 	nop
   20404:	e037883a 	mov	sp,fp
   20408:	df000017 	ldw	fp,0(sp)
   2040c:	dec00104 	addi	sp,sp,4
   20410:	f800283a 	ret

00020414 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20414:	defffe04 	addi	sp,sp,-8
   20418:	dfc00115 	stw	ra,4(sp)
   2041c:	df000015 	stw	fp,0(sp)
   20420:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   20424:	018000f4 	movhi	r6,3
   20428:	31bb0304 	addi	r6,r6,-5108
   2042c:	014000f4 	movhi	r5,3
   20430:	296e8604 	addi	r5,r5,-17896
   20434:	010000f4 	movhi	r4,3
   20438:	213b0304 	addi	r4,r4,-5108
   2043c:	00203ac0 	call	203ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   20440:	01800034 	movhi	r6,0
   20444:	31808c04 	addi	r6,r6,560
   20448:	01400034 	movhi	r5,0
   2044c:	29400804 	addi	r5,r5,32
   20450:	01000034 	movhi	r4,0
   20454:	21000804 	addi	r4,r4,32
   20458:	00203ac0 	call	203ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2045c:	018000f4 	movhi	r6,3
   20460:	31ae8604 	addi	r6,r6,-17896
   20464:	014000b4 	movhi	r5,2
   20468:	2952c204 	addi	r5,r5,19208
   2046c:	010000b4 	movhi	r4,2
   20470:	2112c204 	addi	r4,r4,19208
   20474:	00203ac0 	call	203ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20478:	00237dc0 	call	237dc <alt_dcache_flush_all>
  alt_icache_flush_all();
   2047c:	0023a2c0 	call	23a2c <alt_icache_flush_all>
}
   20480:	0001883a 	nop
   20484:	e037883a 	mov	sp,fp
   20488:	dfc00117 	ldw	ra,4(sp)
   2048c:	df000017 	ldw	fp,0(sp)
   20490:	dec00204 	addi	sp,sp,8
   20494:	f800283a 	ret

00020498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20498:	defffe04 	addi	sp,sp,-8
   2049c:	dfc00115 	stw	ra,4(sp)
   204a0:	df000015 	stw	fp,0(sp)
   204a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   204a8:	d0a5bd17 	ldw	r2,-26892(gp)
   204ac:	10000326 	beq	r2,zero,204bc <alt_get_errno+0x24>
   204b0:	d0a5bd17 	ldw	r2,-26892(gp)
   204b4:	103ee83a 	callr	r2
   204b8:	00000106 	br	204c0 <alt_get_errno+0x28>
   204bc:	d0b24e04 	addi	r2,gp,-14024
}
   204c0:	e037883a 	mov	sp,fp
   204c4:	dfc00117 	ldw	ra,4(sp)
   204c8:	df000017 	ldw	fp,0(sp)
   204cc:	dec00204 	addi	sp,sp,8
   204d0:	f800283a 	ret

000204d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   204d4:	defff904 	addi	sp,sp,-28
   204d8:	dfc00615 	stw	ra,24(sp)
   204dc:	df000515 	stw	fp,20(sp)
   204e0:	df000504 	addi	fp,sp,20
   204e4:	e13ffd15 	stw	r4,-12(fp)
   204e8:	e17ffe15 	stw	r5,-8(fp)
   204ec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   204f0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   204f4:	e0bffd17 	ldw	r2,-12(fp)
   204f8:	10000816 	blt	r2,zero,2051c <lseek+0x48>
   204fc:	01400304 	movi	r5,12
   20500:	e13ffd17 	ldw	r4,-12(fp)
   20504:	000d8b80 	call	d8b8 <__mulsi3>
   20508:	1007883a 	mov	r3,r2
   2050c:	008000f4 	movhi	r2,3
   20510:	10b0b904 	addi	r2,r2,-15644
   20514:	1885883a 	add	r2,r3,r2
   20518:	00000106 	br	20520 <lseek+0x4c>
   2051c:	0005883a 	mov	r2,zero
   20520:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   20524:	e0bffc17 	ldw	r2,-16(fp)
   20528:	10001026 	beq	r2,zero,2056c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2052c:	e0bffc17 	ldw	r2,-16(fp)
   20530:	10800017 	ldw	r2,0(r2)
   20534:	10800717 	ldw	r2,28(r2)
   20538:	10000926 	beq	r2,zero,20560 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2053c:	e0bffc17 	ldw	r2,-16(fp)
   20540:	10800017 	ldw	r2,0(r2)
   20544:	10800717 	ldw	r2,28(r2)
   20548:	e1bfff17 	ldw	r6,-4(fp)
   2054c:	e17ffe17 	ldw	r5,-8(fp)
   20550:	e13ffc17 	ldw	r4,-16(fp)
   20554:	103ee83a 	callr	r2
   20558:	e0bffb15 	stw	r2,-20(fp)
   2055c:	00000506 	br	20574 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   20560:	00bfde84 	movi	r2,-134
   20564:	e0bffb15 	stw	r2,-20(fp)
   20568:	00000206 	br	20574 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2056c:	00bfebc4 	movi	r2,-81
   20570:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   20574:	e0bffb17 	ldw	r2,-20(fp)
   20578:	1000070e 	bge	r2,zero,20598 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   2057c:	00204980 	call	20498 <alt_get_errno>
   20580:	1007883a 	mov	r3,r2
   20584:	e0bffb17 	ldw	r2,-20(fp)
   20588:	0085c83a 	sub	r2,zero,r2
   2058c:	18800015 	stw	r2,0(r3)
    rc = -1;
   20590:	00bfffc4 	movi	r2,-1
   20594:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   20598:	e0bffb17 	ldw	r2,-20(fp)
}
   2059c:	e037883a 	mov	sp,fp
   205a0:	dfc00117 	ldw	ra,4(sp)
   205a4:	df000017 	ldw	fp,0(sp)
   205a8:	dec00204 	addi	sp,sp,8
   205ac:	f800283a 	ret

000205b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   205b0:	defffd04 	addi	sp,sp,-12
   205b4:	dfc00215 	stw	ra,8(sp)
   205b8:	df000115 	stw	fp,4(sp)
   205bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   205c0:	0009883a 	mov	r4,zero
   205c4:	0020b3c0 	call	20b3c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   205c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   205cc:	0020b740 	call	20b74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   205d0:	018000f4 	movhi	r6,3
   205d4:	31ae7104 	addi	r6,r6,-17980
   205d8:	014000f4 	movhi	r5,3
   205dc:	296e7104 	addi	r5,r5,-17980
   205e0:	010000f4 	movhi	r4,3
   205e4:	212e7104 	addi	r4,r4,-17980
   205e8:	0023dd00 	call	23dd0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   205ec:	00238dc0 	call	238dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   205f0:	010000b4 	movhi	r4,2
   205f4:	210e4f04 	addi	r4,r4,14652
   205f8:	00247680 	call	24768 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   205fc:	d0b25217 	ldw	r2,-14008(gp)
   20600:	d0f25317 	ldw	r3,-14004(gp)
   20604:	d1325417 	ldw	r4,-14000(gp)
   20608:	200d883a 	mov	r6,r4
   2060c:	180b883a 	mov	r5,r3
   20610:	1009883a 	mov	r4,r2
   20614:	000abf80 	call	abf8 <main>
   20618:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2061c:	01000044 	movi	r4,1
   20620:	001ff0c0 	call	1ff0c <close>
  exit (result);
   20624:	e13fff17 	ldw	r4,-4(fp)
   20628:	002477c0 	call	2477c <exit>

0002062c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2062c:	defffe04 	addi	sp,sp,-8
   20630:	df000115 	stw	fp,4(sp)
   20634:	df000104 	addi	fp,sp,4
   20638:	e13fff15 	stw	r4,-4(fp)
}
   2063c:	0001883a 	nop
   20640:	e037883a 	mov	sp,fp
   20644:	df000017 	ldw	fp,0(sp)
   20648:	dec00104 	addi	sp,sp,4
   2064c:	f800283a 	ret

00020650 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   20650:	defffe04 	addi	sp,sp,-8
   20654:	df000115 	stw	fp,4(sp)
   20658:	df000104 	addi	fp,sp,4
   2065c:	e13fff15 	stw	r4,-4(fp)
}
   20660:	0001883a 	nop
   20664:	e037883a 	mov	sp,fp
   20668:	df000017 	ldw	fp,0(sp)
   2066c:	dec00104 	addi	sp,sp,4
   20670:	f800283a 	ret

00020674 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20674:	defffe04 	addi	sp,sp,-8
   20678:	dfc00115 	stw	ra,4(sp)
   2067c:	df000015 	stw	fp,0(sp)
   20680:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20684:	d0a5bd17 	ldw	r2,-26892(gp)
   20688:	10000326 	beq	r2,zero,20698 <alt_get_errno+0x24>
   2068c:	d0a5bd17 	ldw	r2,-26892(gp)
   20690:	103ee83a 	callr	r2
   20694:	00000106 	br	2069c <alt_get_errno+0x28>
   20698:	d0b24e04 	addi	r2,gp,-14024
}
   2069c:	e037883a 	mov	sp,fp
   206a0:	dfc00117 	ldw	ra,4(sp)
   206a4:	df000017 	ldw	fp,0(sp)
   206a8:	dec00204 	addi	sp,sp,8
   206ac:	f800283a 	ret

000206b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   206b0:	defff904 	addi	sp,sp,-28
   206b4:	dfc00615 	stw	ra,24(sp)
   206b8:	df000515 	stw	fp,20(sp)
   206bc:	df000504 	addi	fp,sp,20
   206c0:	e13ffd15 	stw	r4,-12(fp)
   206c4:	e17ffe15 	stw	r5,-8(fp)
   206c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   206cc:	e0bffd17 	ldw	r2,-12(fp)
   206d0:	10000816 	blt	r2,zero,206f4 <read+0x44>
   206d4:	01400304 	movi	r5,12
   206d8:	e13ffd17 	ldw	r4,-12(fp)
   206dc:	000d8b80 	call	d8b8 <__mulsi3>
   206e0:	1007883a 	mov	r3,r2
   206e4:	008000f4 	movhi	r2,3
   206e8:	10b0b904 	addi	r2,r2,-15644
   206ec:	1885883a 	add	r2,r3,r2
   206f0:	00000106 	br	206f8 <read+0x48>
   206f4:	0005883a 	mov	r2,zero
   206f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   206fc:	e0bffb17 	ldw	r2,-20(fp)
   20700:	10002226 	beq	r2,zero,2078c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   20704:	e0bffb17 	ldw	r2,-20(fp)
   20708:	10800217 	ldw	r2,8(r2)
   2070c:	108000cc 	andi	r2,r2,3
   20710:	10800060 	cmpeqi	r2,r2,1
   20714:	1000181e 	bne	r2,zero,20778 <read+0xc8>
        (fd->dev->read))
   20718:	e0bffb17 	ldw	r2,-20(fp)
   2071c:	10800017 	ldw	r2,0(r2)
   20720:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   20724:	10001426 	beq	r2,zero,20778 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   20728:	e0bffb17 	ldw	r2,-20(fp)
   2072c:	10800017 	ldw	r2,0(r2)
   20730:	10800517 	ldw	r2,20(r2)
   20734:	e0ffff17 	ldw	r3,-4(fp)
   20738:	180d883a 	mov	r6,r3
   2073c:	e17ffe17 	ldw	r5,-8(fp)
   20740:	e13ffb17 	ldw	r4,-20(fp)
   20744:	103ee83a 	callr	r2
   20748:	e0bffc15 	stw	r2,-16(fp)
   2074c:	e0bffc17 	ldw	r2,-16(fp)
   20750:	1000070e 	bge	r2,zero,20770 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   20754:	00206740 	call	20674 <alt_get_errno>
   20758:	1007883a 	mov	r3,r2
   2075c:	e0bffc17 	ldw	r2,-16(fp)
   20760:	0085c83a 	sub	r2,zero,r2
   20764:	18800015 	stw	r2,0(r3)
          return -1;
   20768:	00bfffc4 	movi	r2,-1
   2076c:	00000c06 	br	207a0 <read+0xf0>
        }
        return rval;
   20770:	e0bffc17 	ldw	r2,-16(fp)
   20774:	00000a06 	br	207a0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   20778:	00206740 	call	20674 <alt_get_errno>
   2077c:	1007883a 	mov	r3,r2
   20780:	00800344 	movi	r2,13
   20784:	18800015 	stw	r2,0(r3)
   20788:	00000406 	br	2079c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2078c:	00206740 	call	20674 <alt_get_errno>
   20790:	1007883a 	mov	r3,r2
   20794:	00801444 	movi	r2,81
   20798:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2079c:	00bfffc4 	movi	r2,-1
}
   207a0:	e037883a 	mov	sp,fp
   207a4:	dfc00117 	ldw	ra,4(sp)
   207a8:	df000017 	ldw	fp,0(sp)
   207ac:	dec00204 	addi	sp,sp,8
   207b0:	f800283a 	ret

000207b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   207b4:	defffc04 	addi	sp,sp,-16
   207b8:	dfc00315 	stw	ra,12(sp)
   207bc:	df000215 	stw	fp,8(sp)
   207c0:	dc000115 	stw	r16,4(sp)
   207c4:	df000204 	addi	fp,sp,8
   207c8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   207cc:	e0bffe17 	ldw	r2,-8(fp)
   207d0:	108000d0 	cmplti	r2,r2,3
   207d4:	1000111e 	bne	r2,zero,2081c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   207d8:	040000f4 	movhi	r16,3
   207dc:	8430b904 	addi	r16,r16,-15644
   207e0:	e0bffe17 	ldw	r2,-8(fp)
   207e4:	01400304 	movi	r5,12
   207e8:	1009883a 	mov	r4,r2
   207ec:	000d8b80 	call	d8b8 <__mulsi3>
   207f0:	8085883a 	add	r2,r16,r2
   207f4:	10800204 	addi	r2,r2,8
   207f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   207fc:	040000f4 	movhi	r16,3
   20800:	8430b904 	addi	r16,r16,-15644
   20804:	e0bffe17 	ldw	r2,-8(fp)
   20808:	01400304 	movi	r5,12
   2080c:	1009883a 	mov	r4,r2
   20810:	000d8b80 	call	d8b8 <__mulsi3>
   20814:	8085883a 	add	r2,r16,r2
   20818:	10000015 	stw	zero,0(r2)
  }
}
   2081c:	0001883a 	nop
   20820:	e6ffff04 	addi	sp,fp,-4
   20824:	dfc00217 	ldw	ra,8(sp)
   20828:	df000117 	ldw	fp,4(sp)
   2082c:	dc000017 	ldw	r16,0(sp)
   20830:	dec00304 	addi	sp,sp,12
   20834:	f800283a 	ret

00020838 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   20838:	defff904 	addi	sp,sp,-28
   2083c:	df000615 	stw	fp,24(sp)
   20840:	df000604 	addi	fp,sp,24
   20844:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20848:	0005303a 	rdctl	r2,status
   2084c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20850:	e0fffe17 	ldw	r3,-8(fp)
   20854:	00bfff84 	movi	r2,-2
   20858:	1884703a 	and	r2,r3,r2
   2085c:	1001703a 	wrctl	status,r2
  
  return context;
   20860:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   20864:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   20868:	d0a5be17 	ldw	r2,-26888(gp)
   2086c:	10c000c4 	addi	r3,r2,3
   20870:	00bfff04 	movi	r2,-4
   20874:	1884703a 	and	r2,r3,r2
   20878:	d0a5be15 	stw	r2,-26888(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2087c:	d0e5be17 	ldw	r3,-26888(gp)
   20880:	e0bfff17 	ldw	r2,-4(fp)
   20884:	1887883a 	add	r3,r3,r2
   20888:	00810034 	movhi	r2,1024
   2088c:	10800004 	addi	r2,r2,0
   20890:	10c0062e 	bgeu	r2,r3,208ac <sbrk+0x74>
   20894:	e0bffb17 	ldw	r2,-20(fp)
   20898:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2089c:	e0bffa17 	ldw	r2,-24(fp)
   208a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   208a4:	00bfffc4 	movi	r2,-1
   208a8:	00000b06 	br	208d8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   208ac:	d0a5be17 	ldw	r2,-26888(gp)
   208b0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   208b4:	d0e5be17 	ldw	r3,-26888(gp)
   208b8:	e0bfff17 	ldw	r2,-4(fp)
   208bc:	1885883a 	add	r2,r3,r2
   208c0:	d0a5be15 	stw	r2,-26888(gp)
   208c4:	e0bffb17 	ldw	r2,-20(fp)
   208c8:	e0bffc15 	stw	r2,-16(fp)
   208cc:	e0bffc17 	ldw	r2,-16(fp)
   208d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   208d4:	e0bffd17 	ldw	r2,-12(fp)
} 
   208d8:	e037883a 	mov	sp,fp
   208dc:	df000017 	ldw	fp,0(sp)
   208e0:	dec00104 	addi	sp,sp,4
   208e4:	f800283a 	ret

000208e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   208e8:	defffe04 	addi	sp,sp,-8
   208ec:	dfc00115 	stw	ra,4(sp)
   208f0:	df000015 	stw	fp,0(sp)
   208f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   208f8:	d0a5bd17 	ldw	r2,-26892(gp)
   208fc:	10000326 	beq	r2,zero,2090c <alt_get_errno+0x24>
   20900:	d0a5bd17 	ldw	r2,-26892(gp)
   20904:	103ee83a 	callr	r2
   20908:	00000106 	br	20910 <alt_get_errno+0x28>
   2090c:	d0b24e04 	addi	r2,gp,-14024
}
   20910:	e037883a 	mov	sp,fp
   20914:	dfc00117 	ldw	ra,4(sp)
   20918:	df000017 	ldw	fp,0(sp)
   2091c:	dec00204 	addi	sp,sp,8
   20920:	f800283a 	ret

00020924 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   20924:	defffc04 	addi	sp,sp,-16
   20928:	dfc00315 	stw	ra,12(sp)
   2092c:	df000215 	stw	fp,8(sp)
   20930:	df000204 	addi	fp,sp,8
   20934:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   20938:	d0b25717 	ldw	r2,-13988(gp)
  clock_t ticks = alt_nticks(); 
   2093c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20940:	d0b25617 	ldw	r2,-13992(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   20944:	1000061e 	bne	r2,zero,20960 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   20948:	00208e80 	call	208e8 <alt_get_errno>
   2094c:	1007883a 	mov	r3,r2
   20950:	00801604 	movi	r2,88
   20954:	18800015 	stw	r2,0(r3)
    return 0;
   20958:	0005883a 	mov	r2,zero
   2095c:	00000a06 	br	20988 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   20960:	e0bfff17 	ldw	r2,-4(fp)
   20964:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   20968:	e0bfff17 	ldw	r2,-4(fp)
   2096c:	e0fffe17 	ldw	r3,-8(fp)
   20970:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   20974:	e0bfff17 	ldw	r2,-4(fp)
   20978:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   2097c:	e0bfff17 	ldw	r2,-4(fp)
   20980:	10000315 	stw	zero,12(r2)

  return ticks;
   20984:	e0bffe17 	ldw	r2,-8(fp)
}
   20988:	e037883a 	mov	sp,fp
   2098c:	dfc00117 	ldw	ra,4(sp)
   20990:	df000017 	ldw	fp,0(sp)
   20994:	dec00204 	addi	sp,sp,8
   20998:	f800283a 	ret

0002099c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2099c:	defffd04 	addi	sp,sp,-12
   209a0:	dfc00215 	stw	ra,8(sp)
   209a4:	df000115 	stw	fp,4(sp)
   209a8:	df000104 	addi	fp,sp,4
   209ac:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   209b0:	e13fff17 	ldw	r4,-4(fp)
   209b4:	00236840 	call	23684 <alt_busy_sleep>
}
   209b8:	e037883a 	mov	sp,fp
   209bc:	dfc00117 	ldw	ra,4(sp)
   209c0:	df000017 	ldw	fp,0(sp)
   209c4:	dec00204 	addi	sp,sp,8
   209c8:	f800283a 	ret

000209cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   209cc:	defffe04 	addi	sp,sp,-8
   209d0:	dfc00115 	stw	ra,4(sp)
   209d4:	df000015 	stw	fp,0(sp)
   209d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   209dc:	d0a5bd17 	ldw	r2,-26892(gp)
   209e0:	10000326 	beq	r2,zero,209f0 <alt_get_errno+0x24>
   209e4:	d0a5bd17 	ldw	r2,-26892(gp)
   209e8:	103ee83a 	callr	r2
   209ec:	00000106 	br	209f4 <alt_get_errno+0x28>
   209f0:	d0b24e04 	addi	r2,gp,-14024
}
   209f4:	e037883a 	mov	sp,fp
   209f8:	dfc00117 	ldw	ra,4(sp)
   209fc:	df000017 	ldw	fp,0(sp)
   20a00:	dec00204 	addi	sp,sp,8
   20a04:	f800283a 	ret

00020a08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   20a08:	defff904 	addi	sp,sp,-28
   20a0c:	dfc00615 	stw	ra,24(sp)
   20a10:	df000515 	stw	fp,20(sp)
   20a14:	df000504 	addi	fp,sp,20
   20a18:	e13ffd15 	stw	r4,-12(fp)
   20a1c:	e17ffe15 	stw	r5,-8(fp)
   20a20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20a24:	e0bffd17 	ldw	r2,-12(fp)
   20a28:	10000816 	blt	r2,zero,20a4c <write+0x44>
   20a2c:	01400304 	movi	r5,12
   20a30:	e13ffd17 	ldw	r4,-12(fp)
   20a34:	000d8b80 	call	d8b8 <__mulsi3>
   20a38:	1007883a 	mov	r3,r2
   20a3c:	008000f4 	movhi	r2,3
   20a40:	10b0b904 	addi	r2,r2,-15644
   20a44:	1885883a 	add	r2,r3,r2
   20a48:	00000106 	br	20a50 <write+0x48>
   20a4c:	0005883a 	mov	r2,zero
   20a50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   20a54:	e0bffb17 	ldw	r2,-20(fp)
   20a58:	10002126 	beq	r2,zero,20ae0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   20a5c:	e0bffb17 	ldw	r2,-20(fp)
   20a60:	10800217 	ldw	r2,8(r2)
   20a64:	108000cc 	andi	r2,r2,3
   20a68:	10001826 	beq	r2,zero,20acc <write+0xc4>
   20a6c:	e0bffb17 	ldw	r2,-20(fp)
   20a70:	10800017 	ldw	r2,0(r2)
   20a74:	10800617 	ldw	r2,24(r2)
   20a78:	10001426 	beq	r2,zero,20acc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   20a7c:	e0bffb17 	ldw	r2,-20(fp)
   20a80:	10800017 	ldw	r2,0(r2)
   20a84:	10800617 	ldw	r2,24(r2)
   20a88:	e0ffff17 	ldw	r3,-4(fp)
   20a8c:	180d883a 	mov	r6,r3
   20a90:	e17ffe17 	ldw	r5,-8(fp)
   20a94:	e13ffb17 	ldw	r4,-20(fp)
   20a98:	103ee83a 	callr	r2
   20a9c:	e0bffc15 	stw	r2,-16(fp)
   20aa0:	e0bffc17 	ldw	r2,-16(fp)
   20aa4:	1000070e 	bge	r2,zero,20ac4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   20aa8:	00209cc0 	call	209cc <alt_get_errno>
   20aac:	1007883a 	mov	r3,r2
   20ab0:	e0bffc17 	ldw	r2,-16(fp)
   20ab4:	0085c83a 	sub	r2,zero,r2
   20ab8:	18800015 	stw	r2,0(r3)
        return -1;
   20abc:	00bfffc4 	movi	r2,-1
   20ac0:	00000c06 	br	20af4 <write+0xec>
      }
      return rval;
   20ac4:	e0bffc17 	ldw	r2,-16(fp)
   20ac8:	00000a06 	br	20af4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   20acc:	00209cc0 	call	209cc <alt_get_errno>
   20ad0:	1007883a 	mov	r3,r2
   20ad4:	00800344 	movi	r2,13
   20ad8:	18800015 	stw	r2,0(r3)
   20adc:	00000406 	br	20af0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   20ae0:	00209cc0 	call	209cc <alt_get_errno>
   20ae4:	1007883a 	mov	r3,r2
   20ae8:	00801444 	movi	r2,81
   20aec:	18800015 	stw	r2,0(r3)
  }
  return -1;
   20af0:	00bfffc4 	movi	r2,-1
}
   20af4:	e037883a 	mov	sp,fp
   20af8:	dfc00117 	ldw	ra,4(sp)
   20afc:	df000017 	ldw	fp,0(sp)
   20b00:	dec00204 	addi	sp,sp,8
   20b04:	f800283a 	ret

00020b08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   20b08:	defffd04 	addi	sp,sp,-12
   20b0c:	dfc00215 	stw	ra,8(sp)
   20b10:	df000115 	stw	fp,4(sp)
   20b14:	df000104 	addi	fp,sp,4
   20b18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20b1c:	d165ba04 	addi	r5,gp,-26904
   20b20:	e13fff17 	ldw	r4,-4(fp)
   20b24:	00238380 	call	23838 <alt_dev_llist_insert>
}
   20b28:	e037883a 	mov	sp,fp
   20b2c:	dfc00117 	ldw	ra,4(sp)
   20b30:	df000017 	ldw	fp,0(sp)
   20b34:	dec00204 	addi	sp,sp,8
   20b38:	f800283a 	ret

00020b3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20b3c:	defffd04 	addi	sp,sp,-12
   20b40:	dfc00215 	stw	ra,8(sp)
   20b44:	df000115 	stw	fp,4(sp)
   20b48:	df000104 	addi	fp,sp,4
   20b4c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   20b50:	00244dc0 	call	244dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20b54:	00800044 	movi	r2,1
   20b58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20b5c:	0001883a 	nop
   20b60:	e037883a 	mov	sp,fp
   20b64:	dfc00117 	ldw	ra,4(sp)
   20b68:	df000017 	ldw	fp,0(sp)
   20b6c:	dec00204 	addi	sp,sp,8
   20b70:	f800283a 	ret

00020b74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20b74:	defffe04 	addi	sp,sp,-8
   20b78:	dfc00115 	stw	ra,4(sp)
   20b7c:	df000015 	stw	fp,0(sp)
   20b80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   20b84:	01c0fa04 	movi	r7,1000
   20b88:	01800084 	movi	r6,2
   20b8c:	000b883a 	mov	r5,zero
   20b90:	01010034 	movhi	r4,1024
   20b94:	21042004 	addi	r4,r4,4224
   20b98:	00234dc0 	call	234dc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   20b9c:	010000f4 	movhi	r4,3
   20ba0:	21311904 	addi	r4,r4,-15260
   20ba4:	0020e380 	call	20e38 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   20ba8:	01800044 	movi	r6,1
   20bac:	000b883a 	mov	r5,zero
   20bb0:	010000f4 	movhi	r4,3
   20bb4:	21313104 	addi	r4,r4,-15164
   20bb8:	00229640 	call	22964 <altera_avalon_jtag_uart_init>
   20bbc:	010000f4 	movhi	r4,3
   20bc0:	21312704 	addi	r4,r4,-15204
   20bc4:	0020b080 	call	20b08 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   20bc8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   20bcc:	0001883a 	nop
}
   20bd0:	0001883a 	nop
   20bd4:	e037883a 	mov	sp,fp
   20bd8:	dfc00117 	ldw	ra,4(sp)
   20bdc:	df000017 	ldw	fp,0(sp)
   20be0:	dec00204 	addi	sp,sp,8
   20be4:	f800283a 	ret

00020be8 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   20be8:	defff904 	addi	sp,sp,-28
   20bec:	dfc00615 	stw	ra,24(sp)
   20bf0:	df000515 	stw	fp,20(sp)
   20bf4:	df000504 	addi	fp,sp,20
   20bf8:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   20bfc:	008000b4 	movhi	r2,2
   20c00:	10a1a804 	addi	r2,r2,-31072
   20c04:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   20c08:	e0bfff17 	ldw	r2,-4(fp)
   20c0c:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   20c10:	e0bffc17 	ldw	r2,-16(fp)
   20c14:	10800717 	ldw	r2,28(r2)
   20c18:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   20c1c:	e0bffd17 	ldw	r2,-12(fp)
   20c20:	10800217 	ldw	r2,8(r2)
   20c24:	10800098 	cmpnei	r2,r2,2
   20c28:	1000251e 	bne	r2,zero,20cc0 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   20c2c:	e0bffd17 	ldw	r2,-12(fp)
   20c30:	10c00017 	ldw	r3,0(r2)
   20c34:	e0bffd17 	ldw	r2,-12(fp)
   20c38:	10800117 	ldw	r2,4(r2)
   20c3c:	e13ffe04 	addi	r4,fp,-8
   20c40:	200f883a 	mov	r7,r4
   20c44:	100d883a 	mov	r6,r2
   20c48:	180b883a 	mov	r5,r3
   20c4c:	e13ffc17 	ldw	r4,-16(fp)
   20c50:	00213980 	call	21398 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   20c54:	e0bffd17 	ldw	r2,-12(fp)
   20c58:	10c00117 	ldw	r3,4(r2)
   20c5c:	e0bffe17 	ldw	r2,-8(fp)
   20c60:	1887c83a 	sub	r3,r3,r2
   20c64:	e0bffd17 	ldw	r2,-12(fp)
   20c68:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   20c6c:	e0bffd17 	ldw	r2,-12(fp)
   20c70:	10c00017 	ldw	r3,0(r2)
   20c74:	e0bffe17 	ldw	r2,-8(fp)
   20c78:	1887883a 	add	r3,r3,r2
   20c7c:	e0bffd17 	ldw	r2,-12(fp)
   20c80:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   20c84:	e0bffd17 	ldw	r2,-12(fp)
   20c88:	10800117 	ldw	r2,4(r2)
   20c8c:	10000c26 	beq	r2,zero,20cc0 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20c90:	01400704 	movi	r5,28
   20c94:	e13ffc17 	ldw	r4,-16(fp)
   20c98:	00225500 	call	22550 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   20c9c:	01400084 	movi	r5,2
   20ca0:	e13ffc17 	ldw	r4,-16(fp)
   20ca4:	00225f40 	call	225f4 <alt_avalon_i2c_int_enable>
   20ca8:	00000e06 	br	20ce4 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   20cac:	e0bffb17 	ldw	r2,-20(fp)
   20cb0:	10bfffc4 	addi	r2,r2,-1
   20cb4:	e0bffb15 	stw	r2,-20(fp)
   20cb8:	e0bffb17 	ldw	r2,-20(fp)
   20cbc:	10000426 	beq	r2,zero,20cd0 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   20cc0:	e13ffc17 	ldw	r4,-16(fp)
   20cc4:	00213540 	call	21354 <alt_avalon_i2c_is_busy>
   20cc8:	103ff81e 	bne	r2,zero,20cac <__alt_data_end+0xfc020cac>
   20ccc:	00000106 	br	20cd4 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   20cd0:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   20cd4:	e13ffc17 	ldw	r4,-16(fp)
   20cd8:	0020ffc0 	call	20ffc <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   20cdc:	e0bffd17 	ldw	r2,-12(fp)
   20ce0:	10000215 	stw	zero,8(r2)
}
   20ce4:	e037883a 	mov	sp,fp
   20ce8:	dfc00117 	ldw	ra,4(sp)
   20cec:	df000017 	ldw	fp,0(sp)
   20cf0:	dec00204 	addi	sp,sp,8
   20cf4:	f800283a 	ret

00020cf8 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   20cf8:	defffc04 	addi	sp,sp,-16
   20cfc:	dfc00315 	stw	ra,12(sp)
   20d00:	df000215 	stw	fp,8(sp)
   20d04:	df000204 	addi	fp,sp,8
   20d08:	e13ffe15 	stw	r4,-8(fp)
   20d0c:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   20d10:	e0bfff17 	ldw	r2,-4(fp)
   20d14:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   20d18:	e1ffff17 	ldw	r7,-4(fp)
   20d1c:	000d883a 	mov	r6,zero
   20d20:	014000b4 	movhi	r5,2
   20d24:	2942fa04 	addi	r5,r5,3048
   20d28:	e13ffe17 	ldw	r4,-8(fp)
   20d2c:	0020de40 	call	20de4 <alt_avalon_i2c_register_callback>
}
   20d30:	0001883a 	nop
   20d34:	e037883a 	mov	sp,fp
   20d38:	dfc00117 	ldw	ra,4(sp)
   20d3c:	df000017 	ldw	fp,0(sp)
   20d40:	dec00204 	addi	sp,sp,8
   20d44:	f800283a 	ret

00020d48 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   20d48:	defff904 	addi	sp,sp,-28
   20d4c:	dfc00615 	stw	ra,24(sp)
   20d50:	df000515 	stw	fp,20(sp)
   20d54:	df000504 	addi	fp,sp,20
   20d58:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   20d5c:	e0bfff17 	ldw	r2,-4(fp)
   20d60:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   20d64:	014007c4 	movi	r5,31
   20d68:	e13ffb17 	ldw	r4,-20(fp)
   20d6c:	002258c0 	call	2258c <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20d70:	01400704 	movi	r5,28
   20d74:	e13ffb17 	ldw	r4,-20(fp)
   20d78:	00225500 	call	22550 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   20d7c:	e0bffb17 	ldw	r2,-20(fp)
   20d80:	10800617 	ldw	r2,24(r2)
   20d84:	10001126 	beq	r2,zero,20dcc <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20d88:	0005303a 	rdctl	r2,status
   20d8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20d90:	e0fffd17 	ldw	r3,-12(fp)
   20d94:	00bfff84 	movi	r2,-2
   20d98:	1884703a 	and	r2,r3,r2
   20d9c:	1001703a 	wrctl	status,r2
  
  return context;
   20da0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   20da4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   20da8:	e0bffb17 	ldw	r2,-20(fp)
   20dac:	10800617 	ldw	r2,24(r2)
   20db0:	e13ffb17 	ldw	r4,-20(fp)
   20db4:	103ee83a 	callr	r2
   20db8:	e0bffc17 	ldw	r2,-16(fp)
   20dbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20dc0:	e0bffe17 	ldw	r2,-8(fp)
   20dc4:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   20dc8:	0001883a 	nop
   20dcc:	0001883a 	nop
}
   20dd0:	e037883a 	mov	sp,fp
   20dd4:	dfc00117 	ldw	ra,4(sp)
   20dd8:	df000017 	ldw	fp,0(sp)
   20ddc:	dec00204 	addi	sp,sp,8
   20de0:	f800283a 	ret

00020de4 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   20de4:	defffb04 	addi	sp,sp,-20
   20de8:	df000415 	stw	fp,16(sp)
   20dec:	df000404 	addi	fp,sp,16
   20df0:	e13ffc15 	stw	r4,-16(fp)
   20df4:	e17ffd15 	stw	r5,-12(fp)
   20df8:	e1bffe15 	stw	r6,-8(fp)
   20dfc:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   20e00:	e0bffc17 	ldw	r2,-16(fp)
   20e04:	e0fffd17 	ldw	r3,-12(fp)
   20e08:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   20e0c:	e0bffc17 	ldw	r2,-16(fp)
   20e10:	e0ffff17 	ldw	r3,-4(fp)
   20e14:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   20e18:	e0bffc17 	ldw	r2,-16(fp)
   20e1c:	e0fffe17 	ldw	r3,-8(fp)
   20e20:	10c00815 	stw	r3,32(r2)

    return ;
   20e24:	0001883a 	nop
}
   20e28:	e037883a 	mov	sp,fp
   20e2c:	df000017 	ldw	fp,0(sp)
   20e30:	dec00104 	addi	sp,sp,4
   20e34:	f800283a 	ret

00020e38 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   20e38:	defff704 	addi	sp,sp,-36
   20e3c:	dfc00815 	stw	ra,32(sp)
   20e40:	df000715 	stw	fp,28(sp)
   20e44:	df000704 	addi	fp,sp,28
   20e48:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   20e4c:	e13fff17 	ldw	r4,-4(fp)
   20e50:	0020ffc0 	call	20ffc <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   20e54:	014007c4 	movi	r5,31
   20e58:	e13fff17 	ldw	r4,-4(fp)
   20e5c:	002258c0 	call	2258c <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20e60:	01400704 	movi	r5,28
   20e64:	e13fff17 	ldw	r4,-4(fp)
   20e68:	00225500 	call	22550 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   20e6c:	014000c4 	movi	r5,3
   20e70:	e13fff17 	ldw	r4,-4(fp)
   20e74:	00227980 	call	22798 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   20e78:	014000c4 	movi	r5,3
   20e7c:	e13fff17 	ldw	r4,-4(fp)
   20e80:	00226e80 	call	226e8 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   20e84:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   20e88:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   20e8c:	e0bffb04 	addi	r2,fp,-20
   20e90:	018000b4 	movhi	r6,2
   20e94:	31a1a804 	addi	r6,r6,-31072
   20e98:	100b883a 	mov	r5,r2
   20e9c:	e13fff17 	ldw	r4,-4(fp)
   20ea0:	00212580 	call	21258 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   20ea4:	e0bffb04 	addi	r2,fp,-20
   20ea8:	100b883a 	mov	r5,r2
   20eac:	e13fff17 	ldw	r4,-4(fp)
   20eb0:	00210f80 	call	210f8 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   20eb4:	d165bf04 	addi	r5,gp,-26884
   20eb8:	e13fff17 	ldw	r4,-4(fp)
   20ebc:	00238380 	call	23838 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   20ec0:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   20ec4:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   20ec8:	e0bffa17 	ldw	r2,-24(fp)
   20ecc:	10000c1e 	bne	r2,zero,20f00 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   20ed0:	e0bfff17 	ldw	r2,-4(fp)
   20ed4:	10c00417 	ldw	r3,16(r2)
   20ed8:	e0bfff17 	ldw	r2,-4(fp)
   20edc:	10800517 	ldw	r2,20(r2)
   20ee0:	d8000015 	stw	zero,0(sp)
   20ee4:	e1ffff17 	ldw	r7,-4(fp)
   20ee8:	018000b4 	movhi	r6,2
   20eec:	31835204 	addi	r6,r6,3400
   20ef0:	100b883a 	mov	r5,r2
   20ef4:	1809883a 	mov	r4,r3
   20ef8:	0023a4c0 	call	23a4c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   20efc:	00000406 	br	20f10 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   20f00:	010000f4 	movhi	r4,3
   20f04:	212e7e04 	addi	r4,r4,-17928
   20f08:	00240d00 	call	240d0 <alt_printf>
    }

    return;
   20f0c:	0001883a 	nop

}
   20f10:	e037883a 	mov	sp,fp
   20f14:	dfc00117 	ldw	ra,4(sp)
   20f18:	df000017 	ldw	fp,0(sp)
   20f1c:	dec00204 	addi	sp,sp,8
   20f20:	f800283a 	ret

00020f24 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   20f24:	defffc04 	addi	sp,sp,-16
   20f28:	dfc00315 	stw	ra,12(sp)
   20f2c:	df000215 	stw	fp,8(sp)
   20f30:	df000204 	addi	fp,sp,8
   20f34:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   20f38:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   20f3c:	d165bf04 	addi	r5,gp,-26884
   20f40:	e13fff17 	ldw	r4,-4(fp)
   20f44:	002399c0 	call	2399c <alt_find_dev>
   20f48:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   20f4c:	e0bffe17 	ldw	r2,-8(fp)
}
   20f50:	e037883a 	mov	sp,fp
   20f54:	dfc00117 	ldw	ra,4(sp)
   20f58:	df000017 	ldw	fp,0(sp)
   20f5c:	dec00204 	addi	sp,sp,8
   20f60:	f800283a 	ret

00020f64 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20f64:	defffc04 	addi	sp,sp,-16
   20f68:	df000315 	stw	fp,12(sp)
   20f6c:	df000304 	addi	fp,sp,12
   20f70:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   20f74:	e0bfff17 	ldw	r2,-4(fp)
   20f78:	10800717 	ldw	r2,28(r2)
   20f7c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   20f80:	e0bfff17 	ldw	r2,-4(fp)
   20f84:	10800317 	ldw	r2,12(r2)
   20f88:	10800204 	addi	r2,r2,8
   20f8c:	10800037 	ldwio	r2,0(r2)
   20f90:	1080004c 	andi	r2,r2,1
   20f94:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   20f98:	e0bffe17 	ldw	r2,-8(fp)
   20f9c:	10000226 	beq	r2,zero,20fa8 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   20fa0:	00bffe44 	movi	r2,-7
   20fa4:	00001106 	br	20fec <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   20fa8:	e0bfff17 	ldw	r2,-4(fp)
   20fac:	10c00617 	ldw	r3,24(r2)
   20fb0:	008000b4 	movhi	r2,2
   20fb4:	1082fa04 	addi	r2,r2,3048
   20fb8:	1880021e 	bne	r3,r2,20fc4 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   20fbc:	e0bffd17 	ldw	r2,-12(fp)
   20fc0:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   20fc4:	e0bfff17 	ldw	r2,-4(fp)
   20fc8:	10800317 	ldw	r2,12(r2)
   20fcc:	10800204 	addi	r2,r2,8
   20fd0:	e0ffff17 	ldw	r3,-4(fp)
   20fd4:	18c00317 	ldw	r3,12(r3)
   20fd8:	18c00204 	addi	r3,r3,8
   20fdc:	18c00037 	ldwio	r3,0(r3)
   20fe0:	18c00054 	ori	r3,r3,1
   20fe4:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   20fe8:	0005883a 	mov	r2,zero
}
   20fec:	e037883a 	mov	sp,fp
   20ff0:	df000017 	ldw	fp,0(sp)
   20ff4:	dec00104 	addi	sp,sp,4
   20ff8:	f800283a 	ret

00020ffc <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20ffc:	defffe04 	addi	sp,sp,-8
   21000:	df000115 	stw	fp,4(sp)
   21004:	df000104 	addi	fp,sp,4
   21008:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   2100c:	e0bfff17 	ldw	r2,-4(fp)
   21010:	10800317 	ldw	r2,12(r2)
   21014:	10800204 	addi	r2,r2,8
   21018:	e0ffff17 	ldw	r3,-4(fp)
   2101c:	18c00317 	ldw	r3,12(r3)
   21020:	18c00204 	addi	r3,r3,8
   21024:	19000037 	ldwio	r4,0(r3)
   21028:	00ffff84 	movi	r3,-2
   2102c:	20c6703a 	and	r3,r4,r3
   21030:	10c00035 	stwio	r3,0(r2)

}
   21034:	0001883a 	nop
   21038:	e037883a 	mov	sp,fp
   2103c:	df000017 	ldw	fp,0(sp)
   21040:	dec00104 	addi	sp,sp,4
   21044:	f800283a 	ret

00021048 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   21048:	defffd04 	addi	sp,sp,-12
   2104c:	df000215 	stw	fp,8(sp)
   21050:	df000204 	addi	fp,sp,8
   21054:	e13ffe15 	stw	r4,-8(fp)
   21058:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   2105c:	e0bffe17 	ldw	r2,-8(fp)
   21060:	10c00d17 	ldw	r3,52(r2)
   21064:	e0bfff17 	ldw	r2,-4(fp)
   21068:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   2106c:	e0bffe17 	ldw	r2,-8(fp)
   21070:	10800317 	ldw	r2,12(r2)
   21074:	10800204 	addi	r2,r2,8
   21078:	10800037 	ldwio	r2,0(r2)
   2107c:	1080008c 	andi	r2,r2,2
   21080:	1005d07a 	srai	r2,r2,1
   21084:	1007883a 	mov	r3,r2
   21088:	e0bfff17 	ldw	r2,-4(fp)
   2108c:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   21090:	e0bffe17 	ldw	r2,-8(fp)
   21094:	10800317 	ldw	r2,12(r2)
   21098:	10800904 	addi	r2,r2,36
   2109c:	10800037 	ldwio	r2,0(r2)
   210a0:	1007883a 	mov	r3,r2
   210a4:	e0bfff17 	ldw	r2,-4(fp)
   210a8:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   210ac:	e0bffe17 	ldw	r2,-8(fp)
   210b0:	10800317 	ldw	r2,12(r2)
   210b4:	10800804 	addi	r2,r2,32
   210b8:	10800037 	ldwio	r2,0(r2)
   210bc:	1007883a 	mov	r3,r2
   210c0:	e0bfff17 	ldw	r2,-4(fp)
   210c4:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   210c8:	e0bffe17 	ldw	r2,-8(fp)
   210cc:	10800317 	ldw	r2,12(r2)
   210d0:	10800a04 	addi	r2,r2,40
   210d4:	10800037 	ldwio	r2,0(r2)
   210d8:	1007883a 	mov	r3,r2
   210dc:	e0bfff17 	ldw	r2,-4(fp)
   210e0:	10c0030d 	sth	r3,12(r2)
}
   210e4:	0001883a 	nop
   210e8:	e037883a 	mov	sp,fp
   210ec:	df000017 	ldw	fp,0(sp)
   210f0:	dec00104 	addi	sp,sp,4
   210f4:	f800283a 	ret

000210f8 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   210f8:	defffd04 	addi	sp,sp,-12
   210fc:	df000215 	stw	fp,8(sp)
   21100:	df000204 	addi	fp,sp,8
   21104:	e13ffe15 	stw	r4,-8(fp)
   21108:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   2110c:	e0bfff17 	ldw	r2,-4(fp)
   21110:	10c00017 	ldw	r3,0(r2)
   21114:	e0bffe17 	ldw	r2,-8(fp)
   21118:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   2111c:	e0bffe17 	ldw	r2,-8(fp)
   21120:	10800317 	ldw	r2,12(r2)
   21124:	10c00204 	addi	r3,r2,8
   21128:	e0bffe17 	ldw	r2,-8(fp)
   2112c:	10800317 	ldw	r2,12(r2)
   21130:	10800204 	addi	r2,r2,8
   21134:	10800037 	ldwio	r2,0(r2)
   21138:	1009883a 	mov	r4,r2
   2113c:	00bfff44 	movi	r2,-3
   21140:	2088703a 	and	r4,r4,r2
   21144:	e0bfff17 	ldw	r2,-4(fp)
   21148:	10800117 	ldw	r2,4(r2)
   2114c:	1085883a 	add	r2,r2,r2
   21150:	1080008c 	andi	r2,r2,2
   21154:	2084b03a 	or	r2,r4,r2
   21158:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   2115c:	e0bffe17 	ldw	r2,-8(fp)
   21160:	10800317 	ldw	r2,12(r2)
   21164:	10800904 	addi	r2,r2,36
   21168:	e0ffff17 	ldw	r3,-4(fp)
   2116c:	18c0020b 	ldhu	r3,8(r3)
   21170:	18ffffcc 	andi	r3,r3,65535
   21174:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   21178:	e0bffe17 	ldw	r2,-8(fp)
   2117c:	10800317 	ldw	r2,12(r2)
   21180:	10800804 	addi	r2,r2,32
   21184:	e0ffff17 	ldw	r3,-4(fp)
   21188:	18c0028b 	ldhu	r3,10(r3)
   2118c:	18ffffcc 	andi	r3,r3,65535
   21190:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   21194:	e0bffe17 	ldw	r2,-8(fp)
   21198:	10800317 	ldw	r2,12(r2)
   2119c:	10800a04 	addi	r2,r2,40
   211a0:	e0ffff17 	ldw	r3,-4(fp)
   211a4:	18c0030b 	ldhu	r3,12(r3)
   211a8:	18ffffcc 	andi	r3,r3,65535
   211ac:	10c00035 	stwio	r3,0(r2)
}
   211b0:	0001883a 	nop
   211b4:	e037883a 	mov	sp,fp
   211b8:	df000017 	ldw	fp,0(sp)
   211bc:	dec00104 	addi	sp,sp,4
   211c0:	f800283a 	ret

000211c4 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   211c4:	defffb04 	addi	sp,sp,-20
   211c8:	dfc00415 	stw	ra,16(sp)
   211cc:	df000315 	stw	fp,12(sp)
   211d0:	df000304 	addi	fp,sp,12
   211d4:	e13ffd15 	stw	r4,-12(fp)
   211d8:	e17ffe15 	stw	r5,-8(fp)
   211dc:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   211e0:	e0bffe17 	ldw	r2,-8(fp)
   211e4:	1080028b 	ldhu	r2,10(r2)
   211e8:	10bfffcc 	andi	r2,r2,65535
   211ec:	10000426 	beq	r2,zero,21200 <alt_avalon_i2c_master_config_speed_get+0x3c>
   211f0:	e0bffe17 	ldw	r2,-8(fp)
   211f4:	1080020b 	ldhu	r2,8(r2)
   211f8:	10bfffcc 	andi	r2,r2,65535
   211fc:	1000021e 	bne	r2,zero,21208 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   21200:	00bfff44 	movi	r2,-3
   21204:	00000f06 	br	21244 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   21208:	e0bffd17 	ldw	r2,-12(fp)
   2120c:	11000c17 	ldw	r4,48(r2)
   21210:	e0bffe17 	ldw	r2,-8(fp)
   21214:	1080028b 	ldhu	r2,10(r2)
   21218:	10ffffcc 	andi	r3,r2,65535
   2121c:	e0bffe17 	ldw	r2,-8(fp)
   21220:	1080020b 	ldhu	r2,8(r2)
   21224:	10bfffcc 	andi	r2,r2,65535
   21228:	1885883a 	add	r2,r3,r2
   2122c:	100b883a 	mov	r5,r2
   21230:	000d7fc0 	call	d7fc <__udivsi3>
   21234:	1007883a 	mov	r3,r2
   21238:	e0bfff17 	ldw	r2,-4(fp)
   2123c:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   21240:	0005883a 	mov	r2,zero
}
   21244:	e037883a 	mov	sp,fp
   21248:	dfc00117 	ldw	ra,4(sp)
   2124c:	df000017 	ldw	fp,0(sp)
   21250:	dec00204 	addi	sp,sp,8
   21254:	f800283a 	ret

00021258 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   21258:	defff904 	addi	sp,sp,-28
   2125c:	dfc00615 	stw	ra,24(sp)
   21260:	df000515 	stw	fp,20(sp)
   21264:	df000504 	addi	fp,sp,20
   21268:	e13ffd15 	stw	r4,-12(fp)
   2126c:	e17ffe15 	stw	r5,-8(fp)
   21270:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   21274:	e0ffff17 	ldw	r3,-4(fp)
   21278:	008001b4 	movhi	r2,6
   2127c:	1086a004 	addi	r2,r2,6784
   21280:	10c00436 	bltu	r2,r3,21294 <alt_avalon_i2c_master_config_speed_set+0x3c>
   21284:	e0bfff17 	ldw	r2,-4(fp)
   21288:	10000226 	beq	r2,zero,21294 <alt_avalon_i2c_master_config_speed_set+0x3c>
   2128c:	e0bfff17 	ldw	r2,-4(fp)
   21290:	1000021e 	bne	r2,zero,2129c <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   21294:	00bfff04 	movi	r2,-4
   21298:	00002906 	br	21340 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   2129c:	e0bffd17 	ldw	r2,-12(fp)
   212a0:	10c00c17 	ldw	r3,48(r2)
   212a4:	e0bfff17 	ldw	r2,-4(fp)
   212a8:	1085883a 	add	r2,r2,r2
   212ac:	100b883a 	mov	r5,r2
   212b0:	1809883a 	mov	r4,r3
   212b4:	000d7fc0 	call	d7fc <__udivsi3>
   212b8:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   212bc:	e0bffb17 	ldw	r2,-20(fp)
   212c0:	10800f04 	addi	r2,r2,60
   212c4:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   212c8:	e0bffb17 	ldw	r2,-20(fp)
   212cc:	10bff104 	addi	r2,r2,-60
   212d0:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   212d4:	e0ffff17 	ldw	r3,-4(fp)
   212d8:	008000b4 	movhi	r2,2
   212dc:	10a1a804 	addi	r2,r2,-31072
   212e0:	10c0042e 	bgeu	r2,r3,212f4 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   212e4:	e0bffe17 	ldw	r2,-8(fp)
   212e8:	00c00044 	movi	r3,1
   212ec:	10c00115 	stw	r3,4(r2)
   212f0:	00000206 	br	212fc <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   212f4:	e0bffe17 	ldw	r2,-8(fp)
   212f8:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   212fc:	e0bffb17 	ldw	r2,-20(fp)
   21300:	1007883a 	mov	r3,r2
   21304:	e0bffe17 	ldw	r2,-8(fp)
   21308:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   2130c:	e0bffc17 	ldw	r2,-16(fp)
   21310:	1007883a 	mov	r3,r2
   21314:	e0bffe17 	ldw	r2,-8(fp)
   21318:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   2131c:	e0bffb17 	ldw	r2,-20(fp)
   21320:	1007883a 	mov	r3,r2
   21324:	e0bffb17 	ldw	r2,-20(fp)
   21328:	1004d07a 	srli	r2,r2,1
   2132c:	1885c83a 	sub	r2,r3,r2
   21330:	1007883a 	mov	r3,r2
   21334:	e0bffe17 	ldw	r2,-8(fp)
   21338:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   2133c:	0005883a 	mov	r2,zero

}
   21340:	e037883a 	mov	sp,fp
   21344:	dfc00117 	ldw	ra,4(sp)
   21348:	df000017 	ldw	fp,0(sp)
   2134c:	dec00204 	addi	sp,sp,8
   21350:	f800283a 	ret

00021354 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   21354:	defffe04 	addi	sp,sp,-8
   21358:	df000115 	stw	fp,4(sp)
   2135c:	df000104 	addi	fp,sp,4
   21360:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   21364:	e0bfff17 	ldw	r2,-4(fp)
   21368:	10800317 	ldw	r2,12(r2)
   2136c:	10800504 	addi	r2,r2,20
   21370:	10800037 	ldwio	r2,0(r2)
   21374:	1080004c 	andi	r2,r2,1
   21378:	10000226 	beq	r2,zero,21384 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   2137c:	00800044 	movi	r2,1
   21380:	00000106 	br	21388 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   21384:	0005883a 	mov	r2,zero
}
   21388:	e037883a 	mov	sp,fp
   2138c:	df000017 	ldw	fp,0(sp)
   21390:	dec00104 	addi	sp,sp,4
   21394:	f800283a 	ret

00021398 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   21398:	defffb04 	addi	sp,sp,-20
   2139c:	df000415 	stw	fp,16(sp)
   213a0:	df000404 	addi	fp,sp,16
   213a4:	e13ffc15 	stw	r4,-16(fp)
   213a8:	e17ffd15 	stw	r5,-12(fp)
   213ac:	e1bffe15 	stw	r6,-8(fp)
   213b0:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   213b4:	e0bfff17 	ldw	r2,-4(fp)
   213b8:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   213bc:	00001406 	br	21410 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   213c0:	e0bfff17 	ldw	r2,-4(fp)
   213c4:	10800017 	ldw	r2,0(r2)
   213c8:	e0fffd17 	ldw	r3,-12(fp)
   213cc:	1885883a 	add	r2,r3,r2
   213d0:	e0fffc17 	ldw	r3,-16(fp)
   213d4:	18c00317 	ldw	r3,12(r3)
   213d8:	18c00104 	addi	r3,r3,4
   213dc:	18c00037 	ldwio	r3,0(r3)
   213e0:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   213e4:	e0bfff17 	ldw	r2,-4(fp)
   213e8:	10800017 	ldw	r2,0(r2)
   213ec:	10c00044 	addi	r3,r2,1
   213f0:	e0bfff17 	ldw	r2,-4(fp)
   213f4:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   213f8:	e0bfff17 	ldw	r2,-4(fp)
   213fc:	10c00017 	ldw	r3,0(r2)
   21400:	e0bffe17 	ldw	r2,-8(fp)
   21404:	1880021e 	bne	r3,r2,21410 <alt_avalon_i2c_rx_read_available+0x78>
   21408:	e0bffe17 	ldw	r2,-8(fp)
   2140c:	1000061e 	bne	r2,zero,21428 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   21410:	e0bffc17 	ldw	r2,-16(fp)
   21414:	10800317 	ldw	r2,12(r2)
   21418:	10800704 	addi	r2,r2,28
   2141c:	10800037 	ldwio	r2,0(r2)
   21420:	103fe71e 	bne	r2,zero,213c0 <__alt_data_end+0xfc0213c0>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   21424:	00000106 	br	2142c <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   21428:	0001883a 	nop
    }
}
   2142c:	0001883a 	nop
   21430:	e037883a 	mov	sp,fp
   21434:	df000017 	ldw	fp,0(sp)
   21438:	dec00104 	addi	sp,sp,4
   2143c:	f800283a 	ret

00021440 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   21440:	defffa04 	addi	sp,sp,-24
   21444:	dfc00515 	stw	ra,20(sp)
   21448:	df000415 	stw	fp,16(sp)
   2144c:	df000404 	addi	fp,sp,16
   21450:	e13ffe15 	stw	r4,-8(fp)
   21454:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   21458:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   2145c:	008000b4 	movhi	r2,2
   21460:	10a1a804 	addi	r2,r2,-31072
   21464:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   21468:	00000d06 	br	214a0 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   2146c:	e0bffd17 	ldw	r2,-12(fp)
   21470:	108002a8 	cmpgeui	r2,r2,10
   21474:	1000021e 	bne	r2,zero,21480 <alt_avalon_i2c_rx_read+0x40>
   21478:	0109c404 	movi	r4,10000
   2147c:	00236840 	call	23684 <alt_busy_sleep>
      if (--timeout == 0)
   21480:	e0bffd17 	ldw	r2,-12(fp)
   21484:	10bfffc4 	addi	r2,r2,-1
   21488:	e0bffd15 	stw	r2,-12(fp)
   2148c:	e0bffd17 	ldw	r2,-12(fp)
   21490:	1000031e 	bne	r2,zero,214a0 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   21494:	00bfff84 	movi	r2,-2
   21498:	e0bffc15 	stw	r2,-16(fp)
        break;
   2149c:	00000506 	br	214b4 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   214a0:	e0bffe17 	ldw	r2,-8(fp)
   214a4:	10800317 	ldw	r2,12(r2)
   214a8:	10800704 	addi	r2,r2,28
   214ac:	10800037 	ldwio	r2,0(r2)
   214b0:	103fee26 	beq	r2,zero,2146c <__alt_data_end+0xfc02146c>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   214b4:	e0bffe17 	ldw	r2,-8(fp)
   214b8:	10800317 	ldw	r2,12(r2)
   214bc:	10800104 	addi	r2,r2,4
   214c0:	10800037 	ldwio	r2,0(r2)
   214c4:	1007883a 	mov	r3,r2
   214c8:	e0bfff17 	ldw	r2,-4(fp)
   214cc:	10c00005 	stb	r3,0(r2)
        
    return status;
   214d0:	e0bffc17 	ldw	r2,-16(fp)
}
   214d4:	e037883a 	mov	sp,fp
   214d8:	dfc00117 	ldw	ra,4(sp)
   214dc:	df000017 	ldw	fp,0(sp)
   214e0:	dec00204 	addi	sp,sp,8
   214e4:	f800283a 	ret

000214e8 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   214e8:	defff804 	addi	sp,sp,-32
   214ec:	dfc00715 	stw	ra,28(sp)
   214f0:	df000615 	stw	fp,24(sp)
   214f4:	df000604 	addi	fp,sp,24
   214f8:	e13ffc15 	stw	r4,-16(fp)
   214fc:	2809883a 	mov	r4,r5
   21500:	3007883a 	mov	r3,r6
   21504:	3805883a 	mov	r2,r7
   21508:	e13ffd05 	stb	r4,-12(fp)
   2150c:	e0fffe05 	stb	r3,-8(fp)
   21510:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   21514:	0089c404 	movi	r2,10000
   21518:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2151c:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   21520:	00000c06 	br	21554 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   21524:	e0bffa17 	ldw	r2,-24(fp)
   21528:	108002a8 	cmpgeui	r2,r2,10
   2152c:	1000021e 	bne	r2,zero,21538 <alt_avalon_i2c_cmd_write+0x50>
   21530:	0109c404 	movi	r4,10000
   21534:	00236840 	call	23684 <alt_busy_sleep>
      if (--timeout == 0)
   21538:	e0bffa17 	ldw	r2,-24(fp)
   2153c:	10bfffc4 	addi	r2,r2,-1
   21540:	e0bffa15 	stw	r2,-24(fp)
   21544:	e0bffa17 	ldw	r2,-24(fp)
   21548:	1000021e 	bne	r2,zero,21554 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   2154c:	00bfff84 	movi	r2,-2
   21550:	00001906 	br	215b8 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   21554:	e0bffc17 	ldw	r2,-16(fp)
   21558:	10800317 	ldw	r2,12(r2)
   2155c:	10800404 	addi	r2,r2,16
   21560:	10800037 	ldwio	r2,0(r2)
   21564:	1080004c 	andi	r2,r2,1
   21568:	103fee26 	beq	r2,zero,21524 <__alt_data_end+0xfc021524>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   2156c:	e0bffc17 	ldw	r2,-16(fp)
   21570:	10800317 	ldw	r2,12(r2)
   21574:	e13ffd03 	ldbu	r4,-12(fp)
   21578:	e0fffe03 	ldbu	r3,-8(fp)
   2157c:	1806927a 	slli	r3,r3,9
   21580:	20c8b03a 	or	r4,r4,r3
   21584:	e0ffff03 	ldbu	r3,-4(fp)
   21588:	1806923a 	slli	r3,r3,8
   2158c:	20c6b03a 	or	r3,r4,r3
   21590:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   21594:	e0bffb04 	addi	r2,fp,-20
   21598:	100b883a 	mov	r5,r2
   2159c:	e13ffc17 	ldw	r4,-16(fp)
   215a0:	00217280 	call	21728 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   215a4:	e0bffb04 	addi	r2,fp,-20
   215a8:	100b883a 	mov	r5,r2
   215ac:	e13ffc17 	ldw	r4,-16(fp)
   215b0:	00217740 	call	21774 <alt_avalon_i2c_check_arblost>
    
    return status;
   215b4:	e0bffb17 	ldw	r2,-20(fp)
}
   215b8:	e037883a 	mov	sp,fp
   215bc:	dfc00117 	ldw	ra,4(sp)
   215c0:	df000017 	ldw	fp,0(sp)
   215c4:	dec00204 	addi	sp,sp,8
   215c8:	f800283a 	ret

000215cc <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   215cc:	defffa04 	addi	sp,sp,-24
   215d0:	dfc00515 	stw	ra,20(sp)
   215d4:	df000415 	stw	fp,16(sp)
   215d8:	df000404 	addi	fp,sp,16
   215dc:	e13ffd15 	stw	r4,-12(fp)
   215e0:	e17ffe15 	stw	r5,-8(fp)
   215e4:	3005883a 	mov	r2,r6
   215e8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   215ec:	e0bffd17 	ldw	r2,-12(fp)
   215f0:	10800d17 	ldw	r2,52(r2)
   215f4:	10800058 	cmpnei	r2,r2,1
   215f8:	10001c1e 	bne	r2,zero,2166c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   215fc:	e0bffd17 	ldw	r2,-12(fp)
   21600:	10800917 	ldw	r2,36(r2)
   21604:	109e0014 	ori	r2,r2,30720
   21608:	1004d1fa 	srli	r2,r2,7
   2160c:	1007883a 	mov	r3,r2
   21610:	00bfff84 	movi	r2,-2
   21614:	1884703a 	and	r2,r3,r2
   21618:	1007883a 	mov	r3,r2
   2161c:	e0bffe17 	ldw	r2,-8(fp)
   21620:	1884b03a 	or	r2,r3,r2
   21624:	10803fcc 	andi	r2,r2,255
   21628:	e0ffff03 	ldbu	r3,-4(fp)
   2162c:	000f883a 	mov	r7,zero
   21630:	180d883a 	mov	r6,r3
   21634:	100b883a 	mov	r5,r2
   21638:	e13ffd17 	ldw	r4,-12(fp)
   2163c:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   21640:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   21644:	e0bffd17 	ldw	r2,-12(fp)
   21648:	10800917 	ldw	r2,36(r2)
   2164c:	10803fcc 	andi	r2,r2,255
   21650:	000f883a 	mov	r7,zero
   21654:	000d883a 	mov	r6,zero
   21658:	100b883a 	mov	r5,r2
   2165c:	e13ffd17 	ldw	r4,-12(fp)
   21660:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   21664:	e0bffc15 	stw	r2,-16(fp)
   21668:	00000e06 	br	216a4 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2166c:	e0bffd17 	ldw	r2,-12(fp)
   21670:	10800917 	ldw	r2,36(r2)
   21674:	1085883a 	add	r2,r2,r2
   21678:	1007883a 	mov	r3,r2
   2167c:	e0bffe17 	ldw	r2,-8(fp)
   21680:	1884b03a 	or	r2,r3,r2
   21684:	10803fcc 	andi	r2,r2,255
   21688:	e0ffff03 	ldbu	r3,-4(fp)
   2168c:	000f883a 	mov	r7,zero
   21690:	180d883a 	mov	r6,r3
   21694:	100b883a 	mov	r5,r2
   21698:	e13ffd17 	ldw	r4,-12(fp)
   2169c:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   216a0:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   216a4:	e0bffc17 	ldw	r2,-16(fp)
}
   216a8:	e037883a 	mov	sp,fp
   216ac:	dfc00117 	ldw	ra,4(sp)
   216b0:	df000017 	ldw	fp,0(sp)
   216b4:	dec00204 	addi	sp,sp,8
   216b8:	f800283a 	ret

000216bc <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   216bc:	defffd04 	addi	sp,sp,-12
   216c0:	df000215 	stw	fp,8(sp)
   216c4:	df000204 	addi	fp,sp,8
   216c8:	e13ffe15 	stw	r4,-8(fp)
   216cc:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   216d0:	e0bffe17 	ldw	r2,-8(fp)
   216d4:	10c00917 	ldw	r3,36(r2)
   216d8:	e0bfff17 	ldw	r2,-4(fp)
   216dc:	10c00015 	stw	r3,0(r2)
}
   216e0:	0001883a 	nop
   216e4:	e037883a 	mov	sp,fp
   216e8:	df000017 	ldw	fp,0(sp)
   216ec:	dec00104 	addi	sp,sp,4
   216f0:	f800283a 	ret

000216f4 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   216f4:	defffd04 	addi	sp,sp,-12
   216f8:	df000215 	stw	fp,8(sp)
   216fc:	df000204 	addi	fp,sp,8
   21700:	e13ffe15 	stw	r4,-8(fp)
   21704:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   21708:	e0bffe17 	ldw	r2,-8(fp)
   2170c:	e0ffff17 	ldw	r3,-4(fp)
   21710:	10c00915 	stw	r3,36(r2)
}
   21714:	0001883a 	nop
   21718:	e037883a 	mov	sp,fp
   2171c:	df000017 	ldw	fp,0(sp)
   21720:	dec00104 	addi	sp,sp,4
   21724:	f800283a 	ret

00021728 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   21728:	defffd04 	addi	sp,sp,-12
   2172c:	df000215 	stw	fp,8(sp)
   21730:	df000204 	addi	fp,sp,8
   21734:	e13ffe15 	stw	r4,-8(fp)
   21738:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   2173c:	e0bffe17 	ldw	r2,-8(fp)
   21740:	10800317 	ldw	r2,12(r2)
   21744:	10800404 	addi	r2,r2,16
   21748:	10800037 	ldwio	r2,0(r2)
   2174c:	1080010c 	andi	r2,r2,4
   21750:	10000326 	beq	r2,zero,21760 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   21754:	e0bfff17 	ldw	r2,-4(fp)
   21758:	00fffec4 	movi	r3,-5
   2175c:	10c00015 	stw	r3,0(r2)
    }
}
   21760:	0001883a 	nop
   21764:	e037883a 	mov	sp,fp
   21768:	df000017 	ldw	fp,0(sp)
   2176c:	dec00104 	addi	sp,sp,4
   21770:	f800283a 	ret

00021774 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   21774:	defffd04 	addi	sp,sp,-12
   21778:	df000215 	stw	fp,8(sp)
   2177c:	df000204 	addi	fp,sp,8
   21780:	e13ffe15 	stw	r4,-8(fp)
   21784:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   21788:	e0bffe17 	ldw	r2,-8(fp)
   2178c:	10800317 	ldw	r2,12(r2)
   21790:	10800404 	addi	r2,r2,16
   21794:	10800037 	ldwio	r2,0(r2)
   21798:	1080020c 	andi	r2,r2,8
   2179c:	10000326 	beq	r2,zero,217ac <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   217a0:	e0bfff17 	ldw	r2,-4(fp)
   217a4:	00fffe84 	movi	r3,-6
   217a8:	10c00015 	stw	r3,0(r2)
    }
}
   217ac:	0001883a 	nop
   217b0:	e037883a 	mov	sp,fp
   217b4:	df000017 	ldw	fp,0(sp)
   217b8:	dec00104 	addi	sp,sp,4
   217bc:	f800283a 	ret

000217c0 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   217c0:	defff804 	addi	sp,sp,-32
   217c4:	dfc00715 	stw	ra,28(sp)
   217c8:	df000615 	stw	fp,24(sp)
   217cc:	df000604 	addi	fp,sp,24
   217d0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   217d4:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   217d8:	e0bfff17 	ldw	r2,-4(fp)
   217dc:	10800717 	ldw	r2,28(r2)
   217e0:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   217e4:	e0bffb17 	ldw	r2,-20(fp)
   217e8:	10800117 	ldw	r2,4(r2)
   217ec:	10800044 	addi	r2,r2,1
   217f0:	0149c404 	movi	r5,10000
   217f4:	1009883a 	mov	r4,r2
   217f8:	000d8b80 	call	d8b8 <__mulsi3>
   217fc:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   21800:	e0bffd04 	addi	r2,fp,-12
   21804:	100b883a 	mov	r5,r2
   21808:	e13fff17 	ldw	r4,-4(fp)
   2180c:	00226580 	call	22658 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   21810:	e0bffd17 	ldw	r2,-12(fp)
   21814:	100b883a 	mov	r5,r2
   21818:	e13fff17 	ldw	r4,-4(fp)
   2181c:	002258c0 	call	2258c <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   21820:	e0bffc04 	addi	r2,fp,-16
   21824:	100b883a 	mov	r5,r2
   21828:	e13fff17 	ldw	r4,-4(fp)
   2182c:	00217280 	call	21728 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   21830:	e0bffc17 	ldw	r2,-16(fp)
   21834:	10002226 	beq	r2,zero,218c0 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   21838:	e0bffb17 	ldw	r2,-20(fp)
   2183c:	10800217 	ldw	r2,8(r2)
   21840:	10001d26 	beq	r2,zero,218b8 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21844:	00000d06 	br	2187c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   21848:	e0bffa17 	ldw	r2,-24(fp)
   2184c:	108002a8 	cmpgeui	r2,r2,10
   21850:	1000021e 	bne	r2,zero,2185c <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   21854:	0109c404 	movi	r4,10000
   21858:	00236840 	call	23684 <alt_busy_sleep>
              if (--timeout == 0)
   2185c:	e0bffa17 	ldw	r2,-24(fp)
   21860:	10bfffc4 	addi	r2,r2,-1
   21864:	e0bffa15 	stw	r2,-24(fp)
   21868:	e0bffa17 	ldw	r2,-24(fp)
   2186c:	1000031e 	bne	r2,zero,2187c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   21870:	00bfff84 	movi	r2,-2
   21874:	e0bffc15 	stw	r2,-16(fp)
                 break;
   21878:	00000306 	br	21888 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2187c:	e13fff17 	ldw	r4,-4(fp)
   21880:	00213540 	call	21354 <alt_avalon_i2c_is_busy>
   21884:	103ff01e 	bne	r2,zero,21848 <__alt_data_end+0xfc021848>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   21888:	e0bffb17 	ldw	r2,-20(fp)
   2188c:	10800017 	ldw	r2,0(r2)
   21890:	e0fffe04 	addi	r3,fp,-8
   21894:	180f883a 	mov	r7,r3
   21898:	000d883a 	mov	r6,zero
   2189c:	100b883a 	mov	r5,r2
   218a0:	e13fff17 	ldw	r4,-4(fp)
   218a4:	00213980 	call	21398 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   218a8:	e13fff17 	ldw	r4,-4(fp)
   218ac:	0020ffc0 	call	20ffc <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   218b0:	e0bffb17 	ldw	r2,-20(fp)
   218b4:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   218b8:	e0bffc17 	ldw	r2,-16(fp)
   218bc:	00000a06 	br	218e8 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   218c0:	e0bffb17 	ldw	r2,-20(fp)
   218c4:	10800217 	ldw	r2,8(r2)
   218c8:	10000626 	beq	r2,zero,218e4 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   218cc:	e0bffd17 	ldw	r2,-12(fp)
   218d0:	100b883a 	mov	r5,r2
   218d4:	e13fff17 	ldw	r4,-4(fp)
   218d8:	00225f40 	call	225f4 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   218dc:	00bffe44 	movi	r2,-7
   218e0:	00000106 	br	218e8 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   218e4:	0005883a 	mov	r2,zero
}
   218e8:	e037883a 	mov	sp,fp
   218ec:	dfc00117 	ldw	ra,4(sp)
   218f0:	df000017 	ldw	fp,0(sp)
   218f4:	dec00204 	addi	sp,sp,8
   218f8:	f800283a 	ret

000218fc <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   218fc:	defff704 	addi	sp,sp,-36
   21900:	dfc00815 	stw	ra,32(sp)
   21904:	df000715 	stw	fp,28(sp)
   21908:	df000704 	addi	fp,sp,28
   2190c:	e13ffc15 	stw	r4,-16(fp)
   21910:	e17ffd15 	stw	r5,-12(fp)
   21914:	e1bffe15 	stw	r6,-8(fp)
   21918:	3805883a 	mov	r2,r7
   2191c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21920:	0089c404 	movi	r2,10000
   21924:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   21928:	00002206 	br	219b4 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   2192c:	e0bffb17 	ldw	r2,-20(fp)
   21930:	108002a8 	cmpgeui	r2,r2,10
   21934:	1000021e 	bne	r2,zero,21940 <alt_avalon_i2c_master_tx+0x44>
   21938:	0109c404 	movi	r4,10000
   2193c:	00236840 	call	23684 <alt_busy_sleep>
      if (use_interrupts)
   21940:	e0bfff03 	ldbu	r2,-4(fp)
   21944:	10000926 	beq	r2,zero,2196c <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   21948:	00800044 	movi	r2,1
   2194c:	d8800015 	stw	r2,0(sp)
   21950:	000f883a 	mov	r7,zero
   21954:	e1bffe17 	ldw	r6,-8(fp)
   21958:	e17ffd17 	ldw	r5,-12(fp)
   2195c:	e13ffc17 	ldw	r4,-16(fp)
   21960:	0021ea80 	call	21ea8 <alt_avalon_i2c_master_transmit_using_interrupts>
   21964:	e0bffa15 	stw	r2,-24(fp)
   21968:	00000806 	br	2198c <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   2196c:	00800044 	movi	r2,1
   21970:	d8800015 	stw	r2,0(sp)
   21974:	000f883a 	mov	r7,zero
   21978:	e1bffe17 	ldw	r6,-8(fp)
   2197c:	e17ffd17 	ldw	r5,-12(fp)
   21980:	e13ffc17 	ldw	r4,-16(fp)
   21984:	0021ce80 	call	21ce8 <alt_avalon_i2c_master_transmit>
   21988:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2198c:	e0bffa17 	ldw	r2,-24(fp)
   21990:	10bffea0 	cmpeqi	r2,r2,-6
   21994:	1000061e 	bne	r2,zero,219b0 <alt_avalon_i2c_master_tx+0xb4>
   21998:	e0bffa17 	ldw	r2,-24(fp)
   2199c:	10bffee0 	cmpeqi	r2,r2,-5
   219a0:	1000031e 	bne	r2,zero,219b0 <alt_avalon_i2c_master_tx+0xb4>
   219a4:	e0bffa17 	ldw	r2,-24(fp)
   219a8:	10bffe58 	cmpnei	r2,r2,-7
   219ac:	1000061e 	bne	r2,zero,219c8 <alt_avalon_i2c_master_tx+0xcc>
   219b0:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   219b4:	e0bffb17 	ldw	r2,-20(fp)
   219b8:	10ffffc4 	addi	r3,r2,-1
   219bc:	e0fffb15 	stw	r3,-20(fp)
   219c0:	103fda1e 	bne	r2,zero,2192c <__alt_data_end+0xfc02192c>
   219c4:	00000106 	br	219cc <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   219c8:	0001883a 	nop
    }

    return status;
   219cc:	e0bffa17 	ldw	r2,-24(fp)
}        
   219d0:	e037883a 	mov	sp,fp
   219d4:	dfc00117 	ldw	ra,4(sp)
   219d8:	df000017 	ldw	fp,0(sp)
   219dc:	dec00204 	addi	sp,sp,8
   219e0:	f800283a 	ret

000219e4 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   219e4:	defff704 	addi	sp,sp,-36
   219e8:	dfc00815 	stw	ra,32(sp)
   219ec:	df000715 	stw	fp,28(sp)
   219f0:	df000704 	addi	fp,sp,28
   219f4:	e13ffc15 	stw	r4,-16(fp)
   219f8:	e17ffd15 	stw	r5,-12(fp)
   219fc:	e1bffe15 	stw	r6,-8(fp)
   21a00:	3805883a 	mov	r2,r7
   21a04:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21a08:	0089c404 	movi	r2,10000
   21a0c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   21a10:	e0bfff03 	ldbu	r2,-4(fp)
   21a14:	10003426 	beq	r2,zero,21ae8 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   21a18:	00001706 	br	21a78 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   21a1c:	e0bffb17 	ldw	r2,-20(fp)
   21a20:	108002a8 	cmpgeui	r2,r2,10
   21a24:	1000021e 	bne	r2,zero,21a30 <alt_avalon_i2c_master_rx+0x4c>
   21a28:	0109c404 	movi	r4,10000
   21a2c:	00236840 	call	23684 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21a30:	00800044 	movi	r2,1
   21a34:	d8800015 	stw	r2,0(sp)
   21a38:	000f883a 	mov	r7,zero
   21a3c:	e1bffe17 	ldw	r6,-8(fp)
   21a40:	e17ffd17 	ldw	r5,-12(fp)
   21a44:	e13ffc17 	ldw	r4,-16(fp)
   21a48:	00222c40 	call	222c4 <alt_avalon_i2c_master_receive_using_interrupts>
   21a4c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21a50:	e0bffa17 	ldw	r2,-24(fp)
   21a54:	10bffea0 	cmpeqi	r2,r2,-6
   21a58:	1000061e 	bne	r2,zero,21a74 <alt_avalon_i2c_master_rx+0x90>
   21a5c:	e0bffa17 	ldw	r2,-24(fp)
   21a60:	10bffee0 	cmpeqi	r2,r2,-5
   21a64:	1000031e 	bne	r2,zero,21a74 <alt_avalon_i2c_master_rx+0x90>
   21a68:	e0bffa17 	ldw	r2,-24(fp)
   21a6c:	10bffe58 	cmpnei	r2,r2,-7
   21a70:	1000221e 	bne	r2,zero,21afc <alt_avalon_i2c_master_rx+0x118>
   21a74:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   21a78:	e0bffb17 	ldw	r2,-20(fp)
   21a7c:	10ffffc4 	addi	r3,r2,-1
   21a80:	e0fffb15 	stw	r3,-20(fp)
   21a84:	103fe51e 	bne	r2,zero,21a1c <__alt_data_end+0xfc021a1c>
   21a88:	00001f06 	br	21b08 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   21a8c:	e0bffb17 	ldw	r2,-20(fp)
   21a90:	108002a8 	cmpgeui	r2,r2,10
   21a94:	1000021e 	bne	r2,zero,21aa0 <alt_avalon_i2c_master_rx+0xbc>
   21a98:	0109c404 	movi	r4,10000
   21a9c:	00236840 	call	23684 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21aa0:	00800044 	movi	r2,1
   21aa4:	d8800015 	stw	r2,0(sp)
   21aa8:	000f883a 	mov	r7,zero
   21aac:	e1bffe17 	ldw	r6,-8(fp)
   21ab0:	e17ffd17 	ldw	r5,-12(fp)
   21ab4:	e13ffc17 	ldw	r4,-16(fp)
   21ab8:	00220b40 	call	220b4 <alt_avalon_i2c_master_receive>
   21abc:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21ac0:	e0bffa17 	ldw	r2,-24(fp)
   21ac4:	10bffea0 	cmpeqi	r2,r2,-6
   21ac8:	1000061e 	bne	r2,zero,21ae4 <alt_avalon_i2c_master_rx+0x100>
   21acc:	e0bffa17 	ldw	r2,-24(fp)
   21ad0:	10bffee0 	cmpeqi	r2,r2,-5
   21ad4:	1000031e 	bne	r2,zero,21ae4 <alt_avalon_i2c_master_rx+0x100>
   21ad8:	e0bffa17 	ldw	r2,-24(fp)
   21adc:	10bffe58 	cmpnei	r2,r2,-7
   21ae0:	1000081e 	bne	r2,zero,21b04 <alt_avalon_i2c_master_rx+0x120>
   21ae4:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   21ae8:	e0bffb17 	ldw	r2,-20(fp)
   21aec:	10ffffc4 	addi	r3,r2,-1
   21af0:	e0fffb15 	stw	r3,-20(fp)
   21af4:	103fe51e 	bne	r2,zero,21a8c <__alt_data_end+0xfc021a8c>
   21af8:	00000306 	br	21b08 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   21afc:	0001883a 	nop
   21b00:	00000106 	br	21b08 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   21b04:	0001883a 	nop
      }
    }
    
    return status;
   21b08:	e0bffa17 	ldw	r2,-24(fp)
}        
   21b0c:	e037883a 	mov	sp,fp
   21b10:	dfc00117 	ldw	ra,4(sp)
   21b14:	df000017 	ldw	fp,0(sp)
   21b18:	dec00204 	addi	sp,sp,8
   21b1c:	f800283a 	ret

00021b20 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   21b20:	defff604 	addi	sp,sp,-40
   21b24:	dfc00915 	stw	ra,36(sp)
   21b28:	df000815 	stw	fp,32(sp)
   21b2c:	df000804 	addi	fp,sp,32
   21b30:	e13ffb15 	stw	r4,-20(fp)
   21b34:	e17ffc15 	stw	r5,-16(fp)
   21b38:	e1bffd15 	stw	r6,-12(fp)
   21b3c:	e1fffe15 	stw	r7,-8(fp)
   21b40:	e0800317 	ldw	r2,12(fp)
   21b44:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21b48:	0089c404 	movi	r2,10000
   21b4c:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   21b50:	e0bfff03 	ldbu	r2,-4(fp)
   21b54:	10005626 	beq	r2,zero,21cb0 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   21b58:	00002806 	br	21bfc <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   21b5c:	e0bffa17 	ldw	r2,-24(fp)
   21b60:	108002a8 	cmpgeui	r2,r2,10
   21b64:	1000021e 	bne	r2,zero,21b70 <alt_avalon_i2c_master_tx_rx+0x50>
   21b68:	0109c404 	movi	r4,10000
   21b6c:	00236840 	call	23684 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   21b70:	d8000015 	stw	zero,0(sp)
   21b74:	000f883a 	mov	r7,zero
   21b78:	e1bffd17 	ldw	r6,-12(fp)
   21b7c:	e17ffc17 	ldw	r5,-16(fp)
   21b80:	e13ffb17 	ldw	r4,-20(fp)
   21b84:	0021ea80 	call	21ea8 <alt_avalon_i2c_master_transmit_using_interrupts>
   21b88:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21b8c:	e0bff917 	ldw	r2,-28(fp)
   21b90:	10bffea0 	cmpeqi	r2,r2,-6
   21b94:	1000191e 	bne	r2,zero,21bfc <alt_avalon_i2c_master_tx_rx+0xdc>
   21b98:	e0bff917 	ldw	r2,-28(fp)
   21b9c:	10bffee0 	cmpeqi	r2,r2,-5
   21ba0:	1000161e 	bne	r2,zero,21bfc <alt_avalon_i2c_master_tx_rx+0xdc>
   21ba4:	e0bff917 	ldw	r2,-28(fp)
   21ba8:	10bffe58 	cmpnei	r2,r2,-7
   21bac:	1000011e 	bne	r2,zero,21bb4 <alt_avalon_i2c_master_tx_rx+0x94>
   21bb0:	00001206 	br	21bfc <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21bb4:	00800044 	movi	r2,1
   21bb8:	d8800015 	stw	r2,0(sp)
   21bbc:	01c00044 	movi	r7,1
   21bc0:	e1800217 	ldw	r6,8(fp)
   21bc4:	e17ffe17 	ldw	r5,-8(fp)
   21bc8:	e13ffb17 	ldw	r4,-20(fp)
   21bcc:	00222c40 	call	222c4 <alt_avalon_i2c_master_receive_using_interrupts>
   21bd0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21bd4:	e0bff917 	ldw	r2,-28(fp)
   21bd8:	10bffea0 	cmpeqi	r2,r2,-6
   21bdc:	1000061e 	bne	r2,zero,21bf8 <alt_avalon_i2c_master_tx_rx+0xd8>
   21be0:	e0bff917 	ldw	r2,-28(fp)
   21be4:	10bffee0 	cmpeqi	r2,r2,-5
   21be8:	1000031e 	bne	r2,zero,21bf8 <alt_avalon_i2c_master_tx_rx+0xd8>
   21bec:	e0bff917 	ldw	r2,-28(fp)
   21bf0:	10bffe58 	cmpnei	r2,r2,-7
   21bf4:	1000331e 	bne	r2,zero,21cc4 <alt_avalon_i2c_master_tx_rx+0x1a4>
   21bf8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   21bfc:	e0bffa17 	ldw	r2,-24(fp)
   21c00:	10ffffc4 	addi	r3,r2,-1
   21c04:	e0fffa15 	stw	r3,-24(fp)
   21c08:	103fd41e 	bne	r2,zero,21b5c <__alt_data_end+0xfc021b5c>
   21c0c:	00003006 	br	21cd0 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   21c10:	e0bffa17 	ldw	r2,-24(fp)
   21c14:	108002a8 	cmpgeui	r2,r2,10
   21c18:	1000021e 	bne	r2,zero,21c24 <alt_avalon_i2c_master_tx_rx+0x104>
   21c1c:	0109c404 	movi	r4,10000
   21c20:	00236840 	call	23684 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   21c24:	d8000015 	stw	zero,0(sp)
   21c28:	000f883a 	mov	r7,zero
   21c2c:	e1bffd17 	ldw	r6,-12(fp)
   21c30:	e17ffc17 	ldw	r5,-16(fp)
   21c34:	e13ffb17 	ldw	r4,-20(fp)
   21c38:	0021ce80 	call	21ce8 <alt_avalon_i2c_master_transmit>
   21c3c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21c40:	e0bff917 	ldw	r2,-28(fp)
   21c44:	10bffea0 	cmpeqi	r2,r2,-6
   21c48:	1000191e 	bne	r2,zero,21cb0 <alt_avalon_i2c_master_tx_rx+0x190>
   21c4c:	e0bff917 	ldw	r2,-28(fp)
   21c50:	10bffee0 	cmpeqi	r2,r2,-5
   21c54:	1000161e 	bne	r2,zero,21cb0 <alt_avalon_i2c_master_tx_rx+0x190>
   21c58:	e0bff917 	ldw	r2,-28(fp)
   21c5c:	10bffe58 	cmpnei	r2,r2,-7
   21c60:	1000011e 	bne	r2,zero,21c68 <alt_avalon_i2c_master_tx_rx+0x148>
   21c64:	00001206 	br	21cb0 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21c68:	00800044 	movi	r2,1
   21c6c:	d8800015 	stw	r2,0(sp)
   21c70:	01c00044 	movi	r7,1
   21c74:	e1800217 	ldw	r6,8(fp)
   21c78:	e17ffe17 	ldw	r5,-8(fp)
   21c7c:	e13ffb17 	ldw	r4,-20(fp)
   21c80:	00220b40 	call	220b4 <alt_avalon_i2c_master_receive>
   21c84:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21c88:	e0bff917 	ldw	r2,-28(fp)
   21c8c:	10bffea0 	cmpeqi	r2,r2,-6
   21c90:	1000061e 	bne	r2,zero,21cac <alt_avalon_i2c_master_tx_rx+0x18c>
   21c94:	e0bff917 	ldw	r2,-28(fp)
   21c98:	10bffee0 	cmpeqi	r2,r2,-5
   21c9c:	1000031e 	bne	r2,zero,21cac <alt_avalon_i2c_master_tx_rx+0x18c>
   21ca0:	e0bff917 	ldw	r2,-28(fp)
   21ca4:	10bffe58 	cmpnei	r2,r2,-7
   21ca8:	1000081e 	bne	r2,zero,21ccc <alt_avalon_i2c_master_tx_rx+0x1ac>
   21cac:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   21cb0:	e0bffa17 	ldw	r2,-24(fp)
   21cb4:	10ffffc4 	addi	r3,r2,-1
   21cb8:	e0fffa15 	stw	r3,-24(fp)
   21cbc:	103fd41e 	bne	r2,zero,21c10 <__alt_data_end+0xfc021c10>
   21cc0:	00000306 	br	21cd0 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   21cc4:	0001883a 	nop
   21cc8:	00000106 	br	21cd0 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   21ccc:	0001883a 	nop
      }
    }
    
    return status;
   21cd0:	e0bff917 	ldw	r2,-28(fp)
}                                       
   21cd4:	e037883a 	mov	sp,fp
   21cd8:	dfc00117 	ldw	ra,4(sp)
   21cdc:	df000017 	ldw	fp,0(sp)
   21ce0:	dec00204 	addi	sp,sp,8
   21ce4:	f800283a 	ret

00021ce8 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   21ce8:	defff704 	addi	sp,sp,-36
   21cec:	dfc00815 	stw	ra,32(sp)
   21cf0:	df000715 	stw	fp,28(sp)
   21cf4:	df000704 	addi	fp,sp,28
   21cf8:	e13ffb15 	stw	r4,-20(fp)
   21cfc:	e17ffc15 	stw	r5,-16(fp)
   21d00:	e1bffd15 	stw	r6,-12(fp)
   21d04:	3807883a 	mov	r3,r7
   21d08:	e0800217 	ldw	r2,8(fp)
   21d0c:	e0fffe05 	stb	r3,-8(fp)
   21d10:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21d14:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   21d18:	0149c404 	movi	r5,10000
   21d1c:	e13ffd17 	ldw	r4,-12(fp)
   21d20:	000d8b80 	call	d8b8 <__mulsi3>
   21d24:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   21d28:	e0bffd17 	ldw	r2,-12(fp)
   21d2c:	1000021e 	bne	r2,zero,21d38 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21d30:	0005883a 	mov	r2,zero
   21d34:	00005706 	br	21e94 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21d38:	e0bffe03 	ldbu	r2,-8(fp)
   21d3c:	10000a1e 	bne	r2,zero,21d68 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21d40:	e13ffb17 	ldw	r4,-20(fp)
   21d44:	0020f640 	call	20f64 <alt_avalon_i2c_enable>
   21d48:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21d4c:	e0bffa17 	ldw	r2,-24(fp)
   21d50:	10000226 	beq	r2,zero,21d5c <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   21d54:	e0bffa17 	ldw	r2,-24(fp)
   21d58:	00004e06 	br	21e94 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21d5c:	01400704 	movi	r5,28
   21d60:	e13ffb17 	ldw	r4,-20(fp)
   21d64:	00225500 	call	22550 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21d68:	e0bffe03 	ldbu	r2,-8(fp)
   21d6c:	100d883a 	mov	r6,r2
   21d70:	000b883a 	mov	r5,zero
   21d74:	e13ffb17 	ldw	r4,-20(fp)
   21d78:	00215cc0 	call	215cc <alt_avalon_i2c_send_address>
   21d7c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   21d80:	e0bffa17 	ldw	r2,-24(fp)
   21d84:	1000271e 	bne	r2,zero,21e24 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21d88:	00000f06 	br	21dc8 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21d8c:	e0bffc17 	ldw	r2,-16(fp)
   21d90:	10800003 	ldbu	r2,0(r2)
   21d94:	10803fcc 	andi	r2,r2,255
   21d98:	000f883a 	mov	r7,zero
   21d9c:	000d883a 	mov	r6,zero
   21da0:	100b883a 	mov	r5,r2
   21da4:	e13ffb17 	ldw	r4,-20(fp)
   21da8:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   21dac:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   21db0:	e0bffc17 	ldw	r2,-16(fp)
   21db4:	10800044 	addi	r2,r2,1
   21db8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21dbc:	e0bffd17 	ldw	r2,-12(fp)
   21dc0:	10bfffc4 	addi	r2,r2,-1
   21dc4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21dc8:	e0bffd17 	ldw	r2,-12(fp)
   21dcc:	108000b0 	cmpltui	r2,r2,2
   21dd0:	1000021e 	bne	r2,zero,21ddc <alt_avalon_i2c_master_transmit+0xf4>
   21dd4:	e0bffa17 	ldw	r2,-24(fp)
   21dd8:	103fec26 	beq	r2,zero,21d8c <__alt_data_end+0xfc021d8c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21ddc:	e0bffa17 	ldw	r2,-24(fp)
   21de0:	1000101e 	bne	r2,zero,21e24 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21de4:	e0bffc17 	ldw	r2,-16(fp)
   21de8:	10800003 	ldbu	r2,0(r2)
   21dec:	10803fcc 	andi	r2,r2,255
   21df0:	e0ffff03 	ldbu	r3,-4(fp)
   21df4:	180f883a 	mov	r7,r3
   21df8:	000d883a 	mov	r6,zero
   21dfc:	100b883a 	mov	r5,r2
   21e00:	e13ffb17 	ldw	r4,-20(fp)
   21e04:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   21e08:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   21e0c:	e0bffc17 	ldw	r2,-16(fp)
   21e10:	10800044 	addi	r2,r2,1
   21e14:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21e18:	e0bffd17 	ldw	r2,-12(fp)
   21e1c:	10bfffc4 	addi	r2,r2,-1
   21e20:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21e24:	e0bfff03 	ldbu	r2,-4(fp)
   21e28:	1000101e 	bne	r2,zero,21e6c <alt_avalon_i2c_master_transmit+0x184>
   21e2c:	e0bffa17 	ldw	r2,-24(fp)
   21e30:	10001726 	beq	r2,zero,21e90 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21e34:	00000d06 	br	21e6c <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21e38:	e0bff917 	ldw	r2,-28(fp)
   21e3c:	108002a8 	cmpgeui	r2,r2,10
   21e40:	1000021e 	bne	r2,zero,21e4c <alt_avalon_i2c_master_transmit+0x164>
   21e44:	0109c404 	movi	r4,10000
   21e48:	00236840 	call	23684 <alt_busy_sleep>
            if (--timeout == 0)
   21e4c:	e0bff917 	ldw	r2,-28(fp)
   21e50:	10bfffc4 	addi	r2,r2,-1
   21e54:	e0bff915 	stw	r2,-28(fp)
   21e58:	e0bff917 	ldw	r2,-28(fp)
   21e5c:	1000031e 	bne	r2,zero,21e6c <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21e60:	00bfff84 	movi	r2,-2
   21e64:	e0bffa15 	stw	r2,-24(fp)
               break;
   21e68:	00000306 	br	21e78 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21e6c:	e13ffb17 	ldw	r4,-20(fp)
   21e70:	00213540 	call	21354 <alt_avalon_i2c_is_busy>
   21e74:	103ff01e 	bne	r2,zero,21e38 <__alt_data_end+0xfc021e38>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   21e78:	e0bffa04 	addi	r2,fp,-24
   21e7c:	100b883a 	mov	r5,r2
   21e80:	e13ffb17 	ldw	r4,-20(fp)
   21e84:	00217280 	call	21728 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21e88:	e13ffb17 	ldw	r4,-20(fp)
   21e8c:	0020ffc0 	call	20ffc <alt_avalon_i2c_disable>
    }


    return status;
   21e90:	e0bffa17 	ldw	r2,-24(fp)
}
   21e94:	e037883a 	mov	sp,fp
   21e98:	dfc00117 	ldw	ra,4(sp)
   21e9c:	df000017 	ldw	fp,0(sp)
   21ea0:	dec00204 	addi	sp,sp,8
   21ea4:	f800283a 	ret

00021ea8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   21ea8:	defff604 	addi	sp,sp,-40
   21eac:	dfc00915 	stw	ra,36(sp)
   21eb0:	df000815 	stw	fp,32(sp)
   21eb4:	df000804 	addi	fp,sp,32
   21eb8:	e13ffb15 	stw	r4,-20(fp)
   21ebc:	e17ffc15 	stw	r5,-16(fp)
   21ec0:	e1bffd15 	stw	r6,-12(fp)
   21ec4:	3807883a 	mov	r3,r7
   21ec8:	e0800217 	ldw	r2,8(fp)
   21ecc:	e0fffe05 	stb	r3,-8(fp)
   21ed0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21ed4:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   21ed8:	0149c404 	movi	r5,10000
   21edc:	e13ffd17 	ldw	r4,-12(fp)
   21ee0:	000d8b80 	call	d8b8 <__mulsi3>
   21ee4:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   21ee8:	e0bffb17 	ldw	r2,-20(fp)
   21eec:	10800717 	ldw	r2,28(r2)
   21ef0:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   21ef4:	e0bffd17 	ldw	r2,-12(fp)
   21ef8:	1000021e 	bne	r2,zero,21f04 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21efc:	0005883a 	mov	r2,zero
   21f00:	00006706 	br	220a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   21f04:	e0bffb17 	ldw	r2,-20(fp)
   21f08:	10c00617 	ldw	r3,24(r2)
   21f0c:	008000b4 	movhi	r2,2
   21f10:	1082fa04 	addi	r2,r2,3048
   21f14:	18800226 	beq	r3,r2,21f20 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   21f18:	00bfff44 	movi	r2,-3
   21f1c:	00006006 	br	220a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21f20:	e0bffe03 	ldbu	r2,-8(fp)
   21f24:	10000a1e 	bne	r2,zero,21f50 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21f28:	e13ffb17 	ldw	r4,-20(fp)
   21f2c:	0020f640 	call	20f64 <alt_avalon_i2c_enable>
   21f30:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21f34:	e0bff817 	ldw	r2,-32(fp)
   21f38:	10000226 	beq	r2,zero,21f44 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   21f3c:	e0bff817 	ldw	r2,-32(fp)
   21f40:	00005706 	br	220a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21f44:	01400704 	movi	r5,28
   21f48:	e13ffb17 	ldw	r4,-20(fp)
   21f4c:	00225500 	call	22550 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21f50:	e0bffe03 	ldbu	r2,-8(fp)
   21f54:	100d883a 	mov	r6,r2
   21f58:	000b883a 	mov	r5,zero
   21f5c:	e13ffb17 	ldw	r4,-20(fp)
   21f60:	00215cc0 	call	215cc <alt_avalon_i2c_send_address>
   21f64:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   21f68:	e0bff817 	ldw	r2,-32(fp)
   21f6c:	1000271e 	bne	r2,zero,2200c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21f70:	00000f06 	br	21fb0 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21f74:	e0bffc17 	ldw	r2,-16(fp)
   21f78:	10800003 	ldbu	r2,0(r2)
   21f7c:	10803fcc 	andi	r2,r2,255
   21f80:	000f883a 	mov	r7,zero
   21f84:	000d883a 	mov	r6,zero
   21f88:	100b883a 	mov	r5,r2
   21f8c:	e13ffb17 	ldw	r4,-20(fp)
   21f90:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   21f94:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   21f98:	e0bffc17 	ldw	r2,-16(fp)
   21f9c:	10800044 	addi	r2,r2,1
   21fa0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21fa4:	e0bffd17 	ldw	r2,-12(fp)
   21fa8:	10bfffc4 	addi	r2,r2,-1
   21fac:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21fb0:	e0bffd17 	ldw	r2,-12(fp)
   21fb4:	108000b0 	cmpltui	r2,r2,2
   21fb8:	1000021e 	bne	r2,zero,21fc4 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   21fbc:	e0bff817 	ldw	r2,-32(fp)
   21fc0:	103fec26 	beq	r2,zero,21f74 <__alt_data_end+0xfc021f74>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21fc4:	e0bff817 	ldw	r2,-32(fp)
   21fc8:	1000101e 	bne	r2,zero,2200c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21fcc:	e0bffc17 	ldw	r2,-16(fp)
   21fd0:	10800003 	ldbu	r2,0(r2)
   21fd4:	10803fcc 	andi	r2,r2,255
   21fd8:	e0ffff03 	ldbu	r3,-4(fp)
   21fdc:	180f883a 	mov	r7,r3
   21fe0:	000d883a 	mov	r6,zero
   21fe4:	100b883a 	mov	r5,r2
   21fe8:	e13ffb17 	ldw	r4,-20(fp)
   21fec:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   21ff0:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   21ff4:	e0bffc17 	ldw	r2,-16(fp)
   21ff8:	10800044 	addi	r2,r2,1
   21ffc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   22000:	e0bffd17 	ldw	r2,-12(fp)
   22004:	10bfffc4 	addi	r2,r2,-1
   22008:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2200c:	e0bff817 	ldw	r2,-32(fp)
   22010:	10001426 	beq	r2,zero,22064 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   22014:	00000d06 	br	2204c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   22018:	e0bff917 	ldw	r2,-28(fp)
   2201c:	108002a8 	cmpgeui	r2,r2,10
   22020:	1000021e 	bne	r2,zero,2202c <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   22024:	0109c404 	movi	r4,10000
   22028:	00236840 	call	23684 <alt_busy_sleep>
            if (--timeout == 0)
   2202c:	e0bff917 	ldw	r2,-28(fp)
   22030:	10bfffc4 	addi	r2,r2,-1
   22034:	e0bff915 	stw	r2,-28(fp)
   22038:	e0bff917 	ldw	r2,-28(fp)
   2203c:	1000031e 	bne	r2,zero,2204c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   22040:	00bfff84 	movi	r2,-2
   22044:	e0bff815 	stw	r2,-32(fp)
               break;
   22048:	00000306 	br	22058 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2204c:	e13ffb17 	ldw	r4,-20(fp)
   22050:	00213540 	call	21354 <alt_avalon_i2c_is_busy>
   22054:	103ff01e 	bne	r2,zero,22018 <__alt_data_end+0xfc022018>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   22058:	e13ffb17 	ldw	r4,-20(fp)
   2205c:	0020ffc0 	call	20ffc <alt_avalon_i2c_disable>
   22060:	00000e06 	br	2209c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   22064:	e0bfff03 	ldbu	r2,-4(fp)
   22068:	10000c26 	beq	r2,zero,2209c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2206c:	01400704 	movi	r5,28
   22070:	e13ffb17 	ldw	r4,-20(fp)
   22074:	00225500 	call	22550 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   22078:	000b883a 	mov	r5,zero
   2207c:	e13ffb17 	ldw	r4,-20(fp)
   22080:	00227980 	call	22798 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   22084:	e0bffa17 	ldw	r2,-24(fp)
   22088:	00c00044 	movi	r3,1
   2208c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   22090:	01400044 	movi	r5,1
   22094:	e13ffb17 	ldw	r4,-20(fp)
   22098:	00225f40 	call	225f4 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   2209c:	e0bff817 	ldw	r2,-32(fp)
}
   220a0:	e037883a 	mov	sp,fp
   220a4:	dfc00117 	ldw	ra,4(sp)
   220a8:	df000017 	ldw	fp,0(sp)
   220ac:	dec00204 	addi	sp,sp,8
   220b0:	f800283a 	ret

000220b4 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   220b4:	defff404 	addi	sp,sp,-48
   220b8:	dfc00b15 	stw	ra,44(sp)
   220bc:	df000a15 	stw	fp,40(sp)
   220c0:	df000a04 	addi	fp,sp,40
   220c4:	e13ffb15 	stw	r4,-20(fp)
   220c8:	e17ffc15 	stw	r5,-16(fp)
   220cc:	e1bffd15 	stw	r6,-12(fp)
   220d0:	3807883a 	mov	r3,r7
   220d4:	e0800217 	ldw	r2,8(fp)
   220d8:	e0fffe05 	stb	r3,-8(fp)
   220dc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   220e0:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   220e4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   220e8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   220ec:	e0bffd17 	ldw	r2,-12(fp)
   220f0:	1000021e 	bne	r2,zero,220fc <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   220f4:	0005883a 	mov	r2,zero
   220f8:	00006d06 	br	222b0 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   220fc:	e0bffe03 	ldbu	r2,-8(fp)
   22100:	10000a1e 	bne	r2,zero,2212c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   22104:	e13ffb17 	ldw	r4,-20(fp)
   22108:	0020f640 	call	20f64 <alt_avalon_i2c_enable>
   2210c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   22110:	e0bff917 	ldw	r2,-28(fp)
   22114:	10000226 	beq	r2,zero,22120 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   22118:	e0bff917 	ldw	r2,-28(fp)
   2211c:	00006406 	br	222b0 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22120:	01400704 	movi	r5,28
   22124:	e13ffb17 	ldw	r4,-20(fp)
   22128:	00225500 	call	22550 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2212c:	e0bffe03 	ldbu	r2,-8(fp)
   22130:	100d883a 	mov	r6,r2
   22134:	01400044 	movi	r5,1
   22138:	e13ffb17 	ldw	r4,-20(fp)
   2213c:	00215cc0 	call	215cc <alt_avalon_i2c_send_address>
   22140:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   22144:	e0bff917 	ldw	r2,-28(fp)
   22148:	1000341e 	bne	r2,zero,2221c <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2214c:	00001906 	br	221b4 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   22150:	000f883a 	mov	r7,zero
   22154:	000d883a 	mov	r6,zero
   22158:	000b883a 	mov	r5,zero
   2215c:	e13ffb17 	ldw	r4,-20(fp)
   22160:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   22164:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   22168:	e0bff817 	ldw	r2,-32(fp)
   2216c:	10800044 	addi	r2,r2,1
   22170:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   22174:	e0bff917 	ldw	r2,-28(fp)
   22178:	10000e1e 	bne	r2,zero,221b4 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   2217c:	e0bffa04 	addi	r2,fp,-24
   22180:	100f883a 	mov	r7,r2
   22184:	000d883a 	mov	r6,zero
   22188:	e17ffc17 	ldw	r5,-16(fp)
   2218c:	e13ffb17 	ldw	r4,-20(fp)
   22190:	00213980 	call	21398 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   22194:	e0bffa17 	ldw	r2,-24(fp)
   22198:	e0fffc17 	ldw	r3,-16(fp)
   2219c:	1885883a 	add	r2,r3,r2
   221a0:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   221a4:	e0bffa17 	ldw	r2,-24(fp)
   221a8:	e0fff717 	ldw	r3,-36(fp)
   221ac:	1885883a 	add	r2,r3,r2
   221b0:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   221b4:	e0bffd17 	ldw	r2,-12(fp)
   221b8:	10bfffc4 	addi	r2,r2,-1
   221bc:	e0fff817 	ldw	r3,-32(fp)
   221c0:	1880022e 	bgeu	r3,r2,221cc <alt_avalon_i2c_master_receive+0x118>
   221c4:	e0bff917 	ldw	r2,-28(fp)
   221c8:	103fe126 	beq	r2,zero,22150 <__alt_data_end+0xfc022150>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   221cc:	e0bff917 	ldw	r2,-28(fp)
   221d0:	1000121e 	bne	r2,zero,2221c <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   221d4:	e0bfff03 	ldbu	r2,-4(fp)
   221d8:	100f883a 	mov	r7,r2
   221dc:	000d883a 	mov	r6,zero
   221e0:	000b883a 	mov	r5,zero
   221e4:	e13ffb17 	ldw	r4,-20(fp)
   221e8:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   221ec:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   221f0:	00000a06 	br	2221c <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   221f4:	e17ffc17 	ldw	r5,-16(fp)
   221f8:	e13ffb17 	ldw	r4,-20(fp)
   221fc:	00214400 	call	21440 <alt_avalon_i2c_rx_read>
   22200:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   22204:	e0bffc17 	ldw	r2,-16(fp)
   22208:	10800044 	addi	r2,r2,1
   2220c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   22210:	e0bff717 	ldw	r2,-36(fp)
   22214:	10800044 	addi	r2,r2,1
   22218:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2221c:	e0fff717 	ldw	r3,-36(fp)
   22220:	e0bffd17 	ldw	r2,-12(fp)
   22224:	1880022e 	bgeu	r3,r2,22230 <alt_avalon_i2c_master_receive+0x17c>
   22228:	e0bff917 	ldw	r2,-28(fp)
   2222c:	103ff126 	beq	r2,zero,221f4 <__alt_data_end+0xfc0221f4>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   22230:	e0bfff03 	ldbu	r2,-4(fp)
   22234:	1000021e 	bne	r2,zero,22240 <alt_avalon_i2c_master_receive+0x18c>
   22238:	e0bff917 	ldw	r2,-28(fp)
   2223c:	10001b26 	beq	r2,zero,222ac <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   22240:	0149c404 	movi	r5,10000
   22244:	e13ffd17 	ldw	r4,-12(fp)
   22248:	000d8b80 	call	d8b8 <__mulsi3>
   2224c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   22250:	00000d06 	br	22288 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   22254:	e0bff617 	ldw	r2,-40(fp)
   22258:	108002a8 	cmpgeui	r2,r2,10
   2225c:	1000021e 	bne	r2,zero,22268 <alt_avalon_i2c_master_receive+0x1b4>
   22260:	0109c404 	movi	r4,10000
   22264:	00236840 	call	23684 <alt_busy_sleep>
            if (--timeout == 0)
   22268:	e0bff617 	ldw	r2,-40(fp)
   2226c:	10bfffc4 	addi	r2,r2,-1
   22270:	e0bff615 	stw	r2,-40(fp)
   22274:	e0bff617 	ldw	r2,-40(fp)
   22278:	1000031e 	bne	r2,zero,22288 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2227c:	00bfff84 	movi	r2,-2
   22280:	e0bff915 	stw	r2,-28(fp)
               break;
   22284:	00000306 	br	22294 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   22288:	e13ffb17 	ldw	r4,-20(fp)
   2228c:	00213540 	call	21354 <alt_avalon_i2c_is_busy>
   22290:	103ff01e 	bne	r2,zero,22254 <__alt_data_end+0xfc022254>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   22294:	e0bff904 	addi	r2,fp,-28
   22298:	100b883a 	mov	r5,r2
   2229c:	e13ffb17 	ldw	r4,-20(fp)
   222a0:	00217280 	call	21728 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   222a4:	e13ffb17 	ldw	r4,-20(fp)
   222a8:	0020ffc0 	call	20ffc <alt_avalon_i2c_disable>
    }

    return status;
   222ac:	e0bff917 	ldw	r2,-28(fp)
}
   222b0:	e037883a 	mov	sp,fp
   222b4:	dfc00117 	ldw	ra,4(sp)
   222b8:	df000017 	ldw	fp,0(sp)
   222bc:	dec00204 	addi	sp,sp,8
   222c0:	f800283a 	ret

000222c4 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   222c4:	defff504 	addi	sp,sp,-44
   222c8:	dfc00a15 	stw	ra,40(sp)
   222cc:	df000915 	stw	fp,36(sp)
   222d0:	df000904 	addi	fp,sp,36
   222d4:	e13ffb15 	stw	r4,-20(fp)
   222d8:	e17ffc15 	stw	r5,-16(fp)
   222dc:	e1bffd15 	stw	r6,-12(fp)
   222e0:	3807883a 	mov	r3,r7
   222e4:	e0800217 	ldw	r2,8(fp)
   222e8:	e0fffe05 	stb	r3,-8(fp)
   222ec:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   222f0:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   222f4:	e0bffb17 	ldw	r2,-20(fp)
   222f8:	10800717 	ldw	r2,28(r2)
   222fc:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   22300:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   22304:	e0bffd17 	ldw	r2,-12(fp)
   22308:	1000021e 	bne	r2,zero,22314 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2230c:	0005883a 	mov	r2,zero
   22310:	00006306 	br	224a0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   22314:	e0bffb17 	ldw	r2,-20(fp)
   22318:	10c00617 	ldw	r3,24(r2)
   2231c:	008000b4 	movhi	r2,2
   22320:	1082fa04 	addi	r2,r2,3048
   22324:	18800226 	beq	r3,r2,22330 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   22328:	00bfff44 	movi	r2,-3
   2232c:	00005c06 	br	224a0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   22330:	e0bffe03 	ldbu	r2,-8(fp)
   22334:	10000a1e 	bne	r2,zero,22360 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   22338:	e13ffb17 	ldw	r4,-20(fp)
   2233c:	0020f640 	call	20f64 <alt_avalon_i2c_enable>
   22340:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   22344:	e0bff717 	ldw	r2,-36(fp)
   22348:	10000226 	beq	r2,zero,22354 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   2234c:	e0bff717 	ldw	r2,-36(fp)
   22350:	00005306 	br	224a0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22354:	01400704 	movi	r5,28
   22358:	e13ffb17 	ldw	r4,-20(fp)
   2235c:	00225500 	call	22550 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   22360:	e0bffe03 	ldbu	r2,-8(fp)
   22364:	100d883a 	mov	r6,r2
   22368:	01400044 	movi	r5,1
   2236c:	e13ffb17 	ldw	r4,-20(fp)
   22370:	00215cc0 	call	215cc <alt_avalon_i2c_send_address>
   22374:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   22378:	e0bff717 	ldw	r2,-36(fp)
   2237c:	1000191e 	bne	r2,zero,223e4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   22380:	00000906 	br	223a8 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   22384:	000f883a 	mov	r7,zero
   22388:	000d883a 	mov	r6,zero
   2238c:	000b883a 	mov	r5,zero
   22390:	e13ffb17 	ldw	r4,-20(fp)
   22394:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   22398:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   2239c:	e0bff917 	ldw	r2,-28(fp)
   223a0:	10800044 	addi	r2,r2,1
   223a4:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   223a8:	e0bffd17 	ldw	r2,-12(fp)
   223ac:	10bfffc4 	addi	r2,r2,-1
   223b0:	e0fff917 	ldw	r3,-28(fp)
   223b4:	1880022e 	bgeu	r3,r2,223c0 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   223b8:	e0bff717 	ldw	r2,-36(fp)
   223bc:	103ff126 	beq	r2,zero,22384 <__alt_data_end+0xfc022384>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   223c0:	e0bff717 	ldw	r2,-36(fp)
   223c4:	1000071e 	bne	r2,zero,223e4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   223c8:	e0bfff03 	ldbu	r2,-4(fp)
   223cc:	100f883a 	mov	r7,r2
   223d0:	000d883a 	mov	r6,zero
   223d4:	000b883a 	mov	r5,zero
   223d8:	e13ffb17 	ldw	r4,-20(fp)
   223dc:	00214e80 	call	214e8 <alt_avalon_i2c_cmd_write>
   223e0:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   223e4:	e0bff717 	ldw	r2,-36(fp)
   223e8:	10001826 	beq	r2,zero,2244c <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   223ec:	0149c404 	movi	r5,10000
   223f0:	e13ffd17 	ldw	r4,-12(fp)
   223f4:	000d8b80 	call	d8b8 <__mulsi3>
   223f8:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   223fc:	00000d06 	br	22434 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   22400:	e0bff817 	ldw	r2,-32(fp)
   22404:	108002a8 	cmpgeui	r2,r2,10
   22408:	1000021e 	bne	r2,zero,22414 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   2240c:	0109c404 	movi	r4,10000
   22410:	00236840 	call	23684 <alt_busy_sleep>
            if (--timeout == 0)
   22414:	e0bff817 	ldw	r2,-32(fp)
   22418:	10bfffc4 	addi	r2,r2,-1
   2241c:	e0bff815 	stw	r2,-32(fp)
   22420:	e0bff817 	ldw	r2,-32(fp)
   22424:	1000031e 	bne	r2,zero,22434 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   22428:	00bfff84 	movi	r2,-2
   2242c:	e0bff715 	stw	r2,-36(fp)
               break;
   22430:	00000306 	br	22440 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   22434:	e13ffb17 	ldw	r4,-20(fp)
   22438:	00213540 	call	21354 <alt_avalon_i2c_is_busy>
   2243c:	103ff01e 	bne	r2,zero,22400 <__alt_data_end+0xfc022400>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   22440:	e13ffb17 	ldw	r4,-20(fp)
   22444:	0020ffc0 	call	20ffc <alt_avalon_i2c_disable>
   22448:	00001406 	br	2249c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   2244c:	e0bfff03 	ldbu	r2,-4(fp)
   22450:	10001226 	beq	r2,zero,2249c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22454:	01400704 	movi	r5,28
   22458:	e13ffb17 	ldw	r4,-20(fp)
   2245c:	00225500 	call	22550 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   22460:	000b883a 	mov	r5,zero
   22464:	e13ffb17 	ldw	r4,-20(fp)
   22468:	00226e80 	call	226e8 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   2246c:	e0bffa17 	ldw	r2,-24(fp)
   22470:	00c00084 	movi	r3,2
   22474:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   22478:	e0bffa17 	ldw	r2,-24(fp)
   2247c:	e0fffc17 	ldw	r3,-16(fp)
   22480:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   22484:	e0bffa17 	ldw	r2,-24(fp)
   22488:	e0fffd17 	ldw	r3,-12(fp)
   2248c:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   22490:	01400084 	movi	r5,2
   22494:	e13ffb17 	ldw	r4,-20(fp)
   22498:	00225f40 	call	225f4 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   2249c:	e0bff717 	ldw	r2,-36(fp)
}
   224a0:	e037883a 	mov	sp,fp
   224a4:	dfc00117 	ldw	ra,4(sp)
   224a8:	df000017 	ldw	fp,0(sp)
   224ac:	dec00204 	addi	sp,sp,8
   224b0:	f800283a 	ret

000224b4 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   224b4:	defffd04 	addi	sp,sp,-12
   224b8:	df000215 	stw	fp,8(sp)
   224bc:	df000204 	addi	fp,sp,8
   224c0:	e13ffe15 	stw	r4,-8(fp)
   224c4:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   224c8:	e0bffe17 	ldw	r2,-8(fp)
   224cc:	10800317 	ldw	r2,12(r2)
   224d0:	10800404 	addi	r2,r2,16
   224d4:	10c00037 	ldwio	r3,0(r2)
   224d8:	e0bffe17 	ldw	r2,-8(fp)
   224dc:	10800317 	ldw	r2,12(r2)
   224e0:	10800304 	addi	r2,r2,12
   224e4:	10800037 	ldwio	r2,0(r2)
   224e8:	1884703a 	and	r2,r3,r2
   224ec:	1007883a 	mov	r3,r2
   224f0:	e0bfff17 	ldw	r2,-4(fp)
   224f4:	10c00015 	stw	r3,0(r2)
}
   224f8:	0001883a 	nop
   224fc:	e037883a 	mov	sp,fp
   22500:	df000017 	ldw	fp,0(sp)
   22504:	dec00104 	addi	sp,sp,4
   22508:	f800283a 	ret

0002250c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   2250c:	defffd04 	addi	sp,sp,-12
   22510:	df000215 	stw	fp,8(sp)
   22514:	df000204 	addi	fp,sp,8
   22518:	e13ffe15 	stw	r4,-8(fp)
   2251c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   22520:	e0bffe17 	ldw	r2,-8(fp)
   22524:	10800317 	ldw	r2,12(r2)
   22528:	10800404 	addi	r2,r2,16
   2252c:	10800037 	ldwio	r2,0(r2)
   22530:	1007883a 	mov	r3,r2
   22534:	e0bfff17 	ldw	r2,-4(fp)
   22538:	10c00015 	stw	r3,0(r2)
}
   2253c:	0001883a 	nop
   22540:	e037883a 	mov	sp,fp
   22544:	df000017 	ldw	fp,0(sp)
   22548:	dec00104 	addi	sp,sp,4
   2254c:	f800283a 	ret

00022550 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   22550:	defffd04 	addi	sp,sp,-12
   22554:	df000215 	stw	fp,8(sp)
   22558:	df000204 	addi	fp,sp,8
   2255c:	e13ffe15 	stw	r4,-8(fp)
   22560:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   22564:	e0bffe17 	ldw	r2,-8(fp)
   22568:	10800317 	ldw	r2,12(r2)
   2256c:	10800404 	addi	r2,r2,16
   22570:	e0ffff17 	ldw	r3,-4(fp)
   22574:	10c00035 	stwio	r3,0(r2)
}
   22578:	0001883a 	nop
   2257c:	e037883a 	mov	sp,fp
   22580:	df000017 	ldw	fp,0(sp)
   22584:	dec00104 	addi	sp,sp,4
   22588:	f800283a 	ret

0002258c <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2258c:	defffb04 	addi	sp,sp,-20
   22590:	dfc00415 	stw	ra,16(sp)
   22594:	df000315 	stw	fp,12(sp)
   22598:	df000304 	addi	fp,sp,12
   2259c:	e13ffe15 	stw	r4,-8(fp)
   225a0:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   225a4:	e17ffd04 	addi	r5,fp,-12
   225a8:	e13ffe17 	ldw	r4,-8(fp)
   225ac:	00226580 	call	22658 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   225b0:	e0bfff17 	ldw	r2,-4(fp)
   225b4:	0086303a 	nor	r3,zero,r2
   225b8:	e0bffd17 	ldw	r2,-12(fp)
   225bc:	1884703a 	and	r2,r3,r2
   225c0:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   225c4:	e0bffe17 	ldw	r2,-8(fp)
   225c8:	10800317 	ldw	r2,12(r2)
   225cc:	10800304 	addi	r2,r2,12
   225d0:	e0fffd17 	ldw	r3,-12(fp)
   225d4:	18c007cc 	andi	r3,r3,31
   225d8:	10c00035 	stwio	r3,0(r2)
}
   225dc:	0001883a 	nop
   225e0:	e037883a 	mov	sp,fp
   225e4:	dfc00117 	ldw	ra,4(sp)
   225e8:	df000017 	ldw	fp,0(sp)
   225ec:	dec00204 	addi	sp,sp,8
   225f0:	f800283a 	ret

000225f4 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   225f4:	defffb04 	addi	sp,sp,-20
   225f8:	dfc00415 	stw	ra,16(sp)
   225fc:	df000315 	stw	fp,12(sp)
   22600:	df000304 	addi	fp,sp,12
   22604:	e13ffe15 	stw	r4,-8(fp)
   22608:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2260c:	e17ffd04 	addi	r5,fp,-12
   22610:	e13ffe17 	ldw	r4,-8(fp)
   22614:	00226580 	call	22658 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   22618:	e0fffd17 	ldw	r3,-12(fp)
   2261c:	e0bfff17 	ldw	r2,-4(fp)
   22620:	1884b03a 	or	r2,r3,r2
   22624:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   22628:	e0bffe17 	ldw	r2,-8(fp)
   2262c:	10800317 	ldw	r2,12(r2)
   22630:	10800304 	addi	r2,r2,12
   22634:	e0fffd17 	ldw	r3,-12(fp)
   22638:	18c007cc 	andi	r3,r3,31
   2263c:	10c00035 	stwio	r3,0(r2)
}
   22640:	0001883a 	nop
   22644:	e037883a 	mov	sp,fp
   22648:	dfc00117 	ldw	ra,4(sp)
   2264c:	df000017 	ldw	fp,0(sp)
   22650:	dec00204 	addi	sp,sp,8
   22654:	f800283a 	ret

00022658 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   22658:	defffd04 	addi	sp,sp,-12
   2265c:	df000215 	stw	fp,8(sp)
   22660:	df000204 	addi	fp,sp,8
   22664:	e13ffe15 	stw	r4,-8(fp)
   22668:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   2266c:	e0bffe17 	ldw	r2,-8(fp)
   22670:	10800317 	ldw	r2,12(r2)
   22674:	10800304 	addi	r2,r2,12
   22678:	10800037 	ldwio	r2,0(r2)
   2267c:	10c007cc 	andi	r3,r2,31
   22680:	e0bfff17 	ldw	r2,-4(fp)
   22684:	10c00015 	stw	r3,0(r2)
}
   22688:	0001883a 	nop
   2268c:	e037883a 	mov	sp,fp
   22690:	df000017 	ldw	fp,0(sp)
   22694:	dec00104 	addi	sp,sp,4
   22698:	f800283a 	ret

0002269c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   2269c:	defffd04 	addi	sp,sp,-12
   226a0:	df000215 	stw	fp,8(sp)
   226a4:	df000204 	addi	fp,sp,8
   226a8:	e13ffe15 	stw	r4,-8(fp)
   226ac:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   226b0:	e0bffe17 	ldw	r2,-8(fp)
   226b4:	10800317 	ldw	r2,12(r2)
   226b8:	10800204 	addi	r2,r2,8
   226bc:	10800037 	ldwio	r2,0(r2)
   226c0:	10800c0c 	andi	r2,r2,48
   226c4:	1005d13a 	srai	r2,r2,4
   226c8:	1007883a 	mov	r3,r2
   226cc:	e0bfff17 	ldw	r2,-4(fp)
   226d0:	10c00015 	stw	r3,0(r2)
}
   226d4:	0001883a 	nop
   226d8:	e037883a 	mov	sp,fp
   226dc:	df000017 	ldw	fp,0(sp)
   226e0:	dec00104 	addi	sp,sp,4
   226e4:	f800283a 	ret

000226e8 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   226e8:	defffd04 	addi	sp,sp,-12
   226ec:	df000215 	stw	fp,8(sp)
   226f0:	df000204 	addi	fp,sp,8
   226f4:	e13ffe15 	stw	r4,-8(fp)
   226f8:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   226fc:	e0bffe17 	ldw	r2,-8(fp)
   22700:	10800317 	ldw	r2,12(r2)
   22704:	10800204 	addi	r2,r2,8
   22708:	e0fffe17 	ldw	r3,-8(fp)
   2270c:	18c00317 	ldw	r3,12(r3)
   22710:	18c00204 	addi	r3,r3,8
   22714:	18c00037 	ldwio	r3,0(r3)
   22718:	1809883a 	mov	r4,r3
   2271c:	00fff3c4 	movi	r3,-49
   22720:	20c8703a 	and	r4,r4,r3
   22724:	e0ffff17 	ldw	r3,-4(fp)
   22728:	1806913a 	slli	r3,r3,4
   2272c:	18c00c0c 	andi	r3,r3,48
   22730:	20c6b03a 	or	r3,r4,r3
   22734:	10c00035 	stwio	r3,0(r2)
}
   22738:	0001883a 	nop
   2273c:	e037883a 	mov	sp,fp
   22740:	df000017 	ldw	fp,0(sp)
   22744:	dec00104 	addi	sp,sp,4
   22748:	f800283a 	ret

0002274c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   2274c:	defffd04 	addi	sp,sp,-12
   22750:	df000215 	stw	fp,8(sp)
   22754:	df000204 	addi	fp,sp,8
   22758:	e13ffe15 	stw	r4,-8(fp)
   2275c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   22760:	e0bffe17 	ldw	r2,-8(fp)
   22764:	10800317 	ldw	r2,12(r2)
   22768:	10800204 	addi	r2,r2,8
   2276c:	10800037 	ldwio	r2,0(r2)
   22770:	1080030c 	andi	r2,r2,12
   22774:	1005d0ba 	srai	r2,r2,2
   22778:	1007883a 	mov	r3,r2
   2277c:	e0bfff17 	ldw	r2,-4(fp)
   22780:	10c00015 	stw	r3,0(r2)
}
   22784:	0001883a 	nop
   22788:	e037883a 	mov	sp,fp
   2278c:	df000017 	ldw	fp,0(sp)
   22790:	dec00104 	addi	sp,sp,4
   22794:	f800283a 	ret

00022798 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   22798:	defffd04 	addi	sp,sp,-12
   2279c:	df000215 	stw	fp,8(sp)
   227a0:	df000204 	addi	fp,sp,8
   227a4:	e13ffe15 	stw	r4,-8(fp)
   227a8:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   227ac:	e0bffe17 	ldw	r2,-8(fp)
   227b0:	10800317 	ldw	r2,12(r2)
   227b4:	10c00204 	addi	r3,r2,8
   227b8:	e0bffe17 	ldw	r2,-8(fp)
   227bc:	10800317 	ldw	r2,12(r2)
   227c0:	10800204 	addi	r2,r2,8
   227c4:	10800037 	ldwio	r2,0(r2)
   227c8:	1009883a 	mov	r4,r2
   227cc:	00bffcc4 	movi	r2,-13
   227d0:	2088703a 	and	r4,r4,r2
   227d4:	e0bfff17 	ldw	r2,-4(fp)
   227d8:	1085883a 	add	r2,r2,r2
   227dc:	1085883a 	add	r2,r2,r2
   227e0:	1080030c 	andi	r2,r2,12
   227e4:	2084b03a 	or	r2,r4,r2
   227e8:	18800035 	stwio	r2,0(r3)
}
   227ec:	0001883a 	nop
   227f0:	e037883a 	mov	sp,fp
   227f4:	df000017 	ldw	fp,0(sp)
   227f8:	dec00104 	addi	sp,sp,4
   227fc:	f800283a 	ret

00022800 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   22800:	defffa04 	addi	sp,sp,-24
   22804:	dfc00515 	stw	ra,20(sp)
   22808:	df000415 	stw	fp,16(sp)
   2280c:	df000404 	addi	fp,sp,16
   22810:	e13ffd15 	stw	r4,-12(fp)
   22814:	e17ffe15 	stw	r5,-8(fp)
   22818:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2281c:	e0bffd17 	ldw	r2,-12(fp)
   22820:	10800017 	ldw	r2,0(r2)
   22824:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   22828:	e0bffc17 	ldw	r2,-16(fp)
   2282c:	10c00a04 	addi	r3,r2,40
   22830:	e0bffd17 	ldw	r2,-12(fp)
   22834:	10800217 	ldw	r2,8(r2)
   22838:	100f883a 	mov	r7,r2
   2283c:	e1bfff17 	ldw	r6,-4(fp)
   22840:	e17ffe17 	ldw	r5,-8(fp)
   22844:	1809883a 	mov	r4,r3
   22848:	0022e280 	call	22e28 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2284c:	e037883a 	mov	sp,fp
   22850:	dfc00117 	ldw	ra,4(sp)
   22854:	df000017 	ldw	fp,0(sp)
   22858:	dec00204 	addi	sp,sp,8
   2285c:	f800283a 	ret

00022860 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   22860:	defffa04 	addi	sp,sp,-24
   22864:	dfc00515 	stw	ra,20(sp)
   22868:	df000415 	stw	fp,16(sp)
   2286c:	df000404 	addi	fp,sp,16
   22870:	e13ffd15 	stw	r4,-12(fp)
   22874:	e17ffe15 	stw	r5,-8(fp)
   22878:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2287c:	e0bffd17 	ldw	r2,-12(fp)
   22880:	10800017 	ldw	r2,0(r2)
   22884:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   22888:	e0bffc17 	ldw	r2,-16(fp)
   2288c:	10c00a04 	addi	r3,r2,40
   22890:	e0bffd17 	ldw	r2,-12(fp)
   22894:	10800217 	ldw	r2,8(r2)
   22898:	100f883a 	mov	r7,r2
   2289c:	e1bfff17 	ldw	r6,-4(fp)
   228a0:	e17ffe17 	ldw	r5,-8(fp)
   228a4:	1809883a 	mov	r4,r3
   228a8:	00230440 	call	23044 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   228ac:	e037883a 	mov	sp,fp
   228b0:	dfc00117 	ldw	ra,4(sp)
   228b4:	df000017 	ldw	fp,0(sp)
   228b8:	dec00204 	addi	sp,sp,8
   228bc:	f800283a 	ret

000228c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   228c0:	defffc04 	addi	sp,sp,-16
   228c4:	dfc00315 	stw	ra,12(sp)
   228c8:	df000215 	stw	fp,8(sp)
   228cc:	df000204 	addi	fp,sp,8
   228d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   228d4:	e0bfff17 	ldw	r2,-4(fp)
   228d8:	10800017 	ldw	r2,0(r2)
   228dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   228e0:	e0bffe17 	ldw	r2,-8(fp)
   228e4:	10c00a04 	addi	r3,r2,40
   228e8:	e0bfff17 	ldw	r2,-4(fp)
   228ec:	10800217 	ldw	r2,8(r2)
   228f0:	100b883a 	mov	r5,r2
   228f4:	1809883a 	mov	r4,r3
   228f8:	0022cd00 	call	22cd0 <altera_avalon_jtag_uart_close>
}
   228fc:	e037883a 	mov	sp,fp
   22900:	dfc00117 	ldw	ra,4(sp)
   22904:	df000017 	ldw	fp,0(sp)
   22908:	dec00204 	addi	sp,sp,8
   2290c:	f800283a 	ret

00022910 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   22910:	defffa04 	addi	sp,sp,-24
   22914:	dfc00515 	stw	ra,20(sp)
   22918:	df000415 	stw	fp,16(sp)
   2291c:	df000404 	addi	fp,sp,16
   22920:	e13ffd15 	stw	r4,-12(fp)
   22924:	e17ffe15 	stw	r5,-8(fp)
   22928:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2292c:	e0bffd17 	ldw	r2,-12(fp)
   22930:	10800017 	ldw	r2,0(r2)
   22934:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   22938:	e0bffc17 	ldw	r2,-16(fp)
   2293c:	10800a04 	addi	r2,r2,40
   22940:	e1bfff17 	ldw	r6,-4(fp)
   22944:	e17ffe17 	ldw	r5,-8(fp)
   22948:	1009883a 	mov	r4,r2
   2294c:	0022d380 	call	22d38 <altera_avalon_jtag_uart_ioctl>
}
   22950:	e037883a 	mov	sp,fp
   22954:	dfc00117 	ldw	ra,4(sp)
   22958:	df000017 	ldw	fp,0(sp)
   2295c:	dec00204 	addi	sp,sp,8
   22960:	f800283a 	ret

00022964 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   22964:	defffa04 	addi	sp,sp,-24
   22968:	dfc00515 	stw	ra,20(sp)
   2296c:	df000415 	stw	fp,16(sp)
   22970:	df000404 	addi	fp,sp,16
   22974:	e13ffd15 	stw	r4,-12(fp)
   22978:	e17ffe15 	stw	r5,-8(fp)
   2297c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22980:	e0bffd17 	ldw	r2,-12(fp)
   22984:	00c00044 	movi	r3,1
   22988:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2298c:	e0bffd17 	ldw	r2,-12(fp)
   22990:	10800017 	ldw	r2,0(r2)
   22994:	10800104 	addi	r2,r2,4
   22998:	1007883a 	mov	r3,r2
   2299c:	e0bffd17 	ldw	r2,-12(fp)
   229a0:	10800817 	ldw	r2,32(r2)
   229a4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   229a8:	e0bffe17 	ldw	r2,-8(fp)
   229ac:	e0ffff17 	ldw	r3,-4(fp)
   229b0:	d8000015 	stw	zero,0(sp)
   229b4:	e1fffd17 	ldw	r7,-12(fp)
   229b8:	018000b4 	movhi	r6,2
   229bc:	318a8904 	addi	r6,r6,10788
   229c0:	180b883a 	mov	r5,r3
   229c4:	1009883a 	mov	r4,r2
   229c8:	0023a4c0 	call	23a4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   229cc:	e0bffd17 	ldw	r2,-12(fp)
   229d0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   229d4:	e0bffd17 	ldw	r2,-12(fp)
   229d8:	10800204 	addi	r2,r2,8
   229dc:	d0f25617 	ldw	r3,-13992(gp)
   229e0:	e1fffd17 	ldw	r7,-12(fp)
   229e4:	018000b4 	movhi	r6,2
   229e8:	318b0c04 	addi	r6,r6,11312
   229ec:	180b883a 	mov	r5,r3
   229f0:	1009883a 	mov	r4,r2
   229f4:	00235580 	call	23558 <alt_alarm_start>
   229f8:	1000040e 	bge	r2,zero,22a0c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   229fc:	e0fffd17 	ldw	r3,-12(fp)
   22a00:	00a00034 	movhi	r2,32768
   22a04:	10bfffc4 	addi	r2,r2,-1
   22a08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   22a0c:	0001883a 	nop
   22a10:	e037883a 	mov	sp,fp
   22a14:	dfc00117 	ldw	ra,4(sp)
   22a18:	df000017 	ldw	fp,0(sp)
   22a1c:	dec00204 	addi	sp,sp,8
   22a20:	f800283a 	ret

00022a24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   22a24:	defff804 	addi	sp,sp,-32
   22a28:	df000715 	stw	fp,28(sp)
   22a2c:	df000704 	addi	fp,sp,28
   22a30:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   22a34:	e0bfff17 	ldw	r2,-4(fp)
   22a38:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   22a3c:	e0bffb17 	ldw	r2,-20(fp)
   22a40:	10800017 	ldw	r2,0(r2)
   22a44:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22a48:	e0bffc17 	ldw	r2,-16(fp)
   22a4c:	10800104 	addi	r2,r2,4
   22a50:	10800037 	ldwio	r2,0(r2)
   22a54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   22a58:	e0bffd17 	ldw	r2,-12(fp)
   22a5c:	1080c00c 	andi	r2,r2,768
   22a60:	10006d26 	beq	r2,zero,22c18 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   22a64:	e0bffd17 	ldw	r2,-12(fp)
   22a68:	1080400c 	andi	r2,r2,256
   22a6c:	10003526 	beq	r2,zero,22b44 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   22a70:	00800074 	movhi	r2,1
   22a74:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22a78:	e0bffb17 	ldw	r2,-20(fp)
   22a7c:	10800a17 	ldw	r2,40(r2)
   22a80:	10800044 	addi	r2,r2,1
   22a84:	1081ffcc 	andi	r2,r2,2047
   22a88:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   22a8c:	e0bffb17 	ldw	r2,-20(fp)
   22a90:	10c00b17 	ldw	r3,44(r2)
   22a94:	e0bffe17 	ldw	r2,-8(fp)
   22a98:	18801526 	beq	r3,r2,22af0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   22a9c:	e0bffc17 	ldw	r2,-16(fp)
   22aa0:	10800037 	ldwio	r2,0(r2)
   22aa4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   22aa8:	e0bff917 	ldw	r2,-28(fp)
   22aac:	10a0000c 	andi	r2,r2,32768
   22ab0:	10001126 	beq	r2,zero,22af8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   22ab4:	e0bffb17 	ldw	r2,-20(fp)
   22ab8:	10800a17 	ldw	r2,40(r2)
   22abc:	e0fff917 	ldw	r3,-28(fp)
   22ac0:	1809883a 	mov	r4,r3
   22ac4:	e0fffb17 	ldw	r3,-20(fp)
   22ac8:	1885883a 	add	r2,r3,r2
   22acc:	10800e04 	addi	r2,r2,56
   22ad0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22ad4:	e0bffb17 	ldw	r2,-20(fp)
   22ad8:	10800a17 	ldw	r2,40(r2)
   22adc:	10800044 	addi	r2,r2,1
   22ae0:	10c1ffcc 	andi	r3,r2,2047
   22ae4:	e0bffb17 	ldw	r2,-20(fp)
   22ae8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   22aec:	003fe206 	br	22a78 <__alt_data_end+0xfc022a78>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   22af0:	0001883a 	nop
   22af4:	00000106 	br	22afc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   22af8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   22afc:	e0bff917 	ldw	r2,-28(fp)
   22b00:	10bfffec 	andhi	r2,r2,65535
   22b04:	10000f26 	beq	r2,zero,22b44 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22b08:	e0bffb17 	ldw	r2,-20(fp)
   22b0c:	10c00817 	ldw	r3,32(r2)
   22b10:	00bfff84 	movi	r2,-2
   22b14:	1886703a 	and	r3,r3,r2
   22b18:	e0bffb17 	ldw	r2,-20(fp)
   22b1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   22b20:	e0bffc17 	ldw	r2,-16(fp)
   22b24:	10800104 	addi	r2,r2,4
   22b28:	1007883a 	mov	r3,r2
   22b2c:	e0bffb17 	ldw	r2,-20(fp)
   22b30:	10800817 	ldw	r2,32(r2)
   22b34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22b38:	e0bffc17 	ldw	r2,-16(fp)
   22b3c:	10800104 	addi	r2,r2,4
   22b40:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   22b44:	e0bffd17 	ldw	r2,-12(fp)
   22b48:	1080800c 	andi	r2,r2,512
   22b4c:	103fbe26 	beq	r2,zero,22a48 <__alt_data_end+0xfc022a48>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   22b50:	e0bffd17 	ldw	r2,-12(fp)
   22b54:	1004d43a 	srli	r2,r2,16
   22b58:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   22b5c:	00001406 	br	22bb0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   22b60:	e0bffc17 	ldw	r2,-16(fp)
   22b64:	e0fffb17 	ldw	r3,-20(fp)
   22b68:	18c00d17 	ldw	r3,52(r3)
   22b6c:	e13ffb17 	ldw	r4,-20(fp)
   22b70:	20c7883a 	add	r3,r4,r3
   22b74:	18c20e04 	addi	r3,r3,2104
   22b78:	18c00003 	ldbu	r3,0(r3)
   22b7c:	18c03fcc 	andi	r3,r3,255
   22b80:	18c0201c 	xori	r3,r3,128
   22b84:	18ffe004 	addi	r3,r3,-128
   22b88:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22b8c:	e0bffb17 	ldw	r2,-20(fp)
   22b90:	10800d17 	ldw	r2,52(r2)
   22b94:	10800044 	addi	r2,r2,1
   22b98:	10c1ffcc 	andi	r3,r2,2047
   22b9c:	e0bffb17 	ldw	r2,-20(fp)
   22ba0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   22ba4:	e0bffa17 	ldw	r2,-24(fp)
   22ba8:	10bfffc4 	addi	r2,r2,-1
   22bac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   22bb0:	e0bffa17 	ldw	r2,-24(fp)
   22bb4:	10000526 	beq	r2,zero,22bcc <altera_avalon_jtag_uart_irq+0x1a8>
   22bb8:	e0bffb17 	ldw	r2,-20(fp)
   22bbc:	10c00d17 	ldw	r3,52(r2)
   22bc0:	e0bffb17 	ldw	r2,-20(fp)
   22bc4:	10800c17 	ldw	r2,48(r2)
   22bc8:	18bfe51e 	bne	r3,r2,22b60 <__alt_data_end+0xfc022b60>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   22bcc:	e0bffa17 	ldw	r2,-24(fp)
   22bd0:	103f9d26 	beq	r2,zero,22a48 <__alt_data_end+0xfc022a48>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   22bd4:	e0bffb17 	ldw	r2,-20(fp)
   22bd8:	10c00817 	ldw	r3,32(r2)
   22bdc:	00bfff44 	movi	r2,-3
   22be0:	1886703a 	and	r3,r3,r2
   22be4:	e0bffb17 	ldw	r2,-20(fp)
   22be8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22bec:	e0bffb17 	ldw	r2,-20(fp)
   22bf0:	10800017 	ldw	r2,0(r2)
   22bf4:	10800104 	addi	r2,r2,4
   22bf8:	1007883a 	mov	r3,r2
   22bfc:	e0bffb17 	ldw	r2,-20(fp)
   22c00:	10800817 	ldw	r2,32(r2)
   22c04:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22c08:	e0bffc17 	ldw	r2,-16(fp)
   22c0c:	10800104 	addi	r2,r2,4
   22c10:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   22c14:	003f8c06 	br	22a48 <__alt_data_end+0xfc022a48>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   22c18:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   22c1c:	0001883a 	nop
   22c20:	e037883a 	mov	sp,fp
   22c24:	df000017 	ldw	fp,0(sp)
   22c28:	dec00104 	addi	sp,sp,4
   22c2c:	f800283a 	ret

00022c30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   22c30:	defff804 	addi	sp,sp,-32
   22c34:	df000715 	stw	fp,28(sp)
   22c38:	df000704 	addi	fp,sp,28
   22c3c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   22c40:	e0bffb17 	ldw	r2,-20(fp)
   22c44:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   22c48:	e0bff917 	ldw	r2,-28(fp)
   22c4c:	10800017 	ldw	r2,0(r2)
   22c50:	10800104 	addi	r2,r2,4
   22c54:	10800037 	ldwio	r2,0(r2)
   22c58:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   22c5c:	e0bffa17 	ldw	r2,-24(fp)
   22c60:	1081000c 	andi	r2,r2,1024
   22c64:	10000b26 	beq	r2,zero,22c94 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   22c68:	e0bff917 	ldw	r2,-28(fp)
   22c6c:	10800017 	ldw	r2,0(r2)
   22c70:	10800104 	addi	r2,r2,4
   22c74:	1007883a 	mov	r3,r2
   22c78:	e0bff917 	ldw	r2,-28(fp)
   22c7c:	10800817 	ldw	r2,32(r2)
   22c80:	10810014 	ori	r2,r2,1024
   22c84:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   22c88:	e0bff917 	ldw	r2,-28(fp)
   22c8c:	10000915 	stw	zero,36(r2)
   22c90:	00000a06 	br	22cbc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   22c94:	e0bff917 	ldw	r2,-28(fp)
   22c98:	10c00917 	ldw	r3,36(r2)
   22c9c:	00a00034 	movhi	r2,32768
   22ca0:	10bfff04 	addi	r2,r2,-4
   22ca4:	10c00536 	bltu	r2,r3,22cbc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   22ca8:	e0bff917 	ldw	r2,-28(fp)
   22cac:	10800917 	ldw	r2,36(r2)
   22cb0:	10c00044 	addi	r3,r2,1
   22cb4:	e0bff917 	ldw	r2,-28(fp)
   22cb8:	10c00915 	stw	r3,36(r2)
   22cbc:	d0b25617 	ldw	r2,-13992(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   22cc0:	e037883a 	mov	sp,fp
   22cc4:	df000017 	ldw	fp,0(sp)
   22cc8:	dec00104 	addi	sp,sp,4
   22ccc:	f800283a 	ret

00022cd0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   22cd0:	defffd04 	addi	sp,sp,-12
   22cd4:	df000215 	stw	fp,8(sp)
   22cd8:	df000204 	addi	fp,sp,8
   22cdc:	e13ffe15 	stw	r4,-8(fp)
   22ce0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22ce4:	00000506 	br	22cfc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   22ce8:	e0bfff17 	ldw	r2,-4(fp)
   22cec:	1090000c 	andi	r2,r2,16384
   22cf0:	10000226 	beq	r2,zero,22cfc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   22cf4:	00bffd44 	movi	r2,-11
   22cf8:	00000b06 	br	22d28 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22cfc:	e0bffe17 	ldw	r2,-8(fp)
   22d00:	10c00d17 	ldw	r3,52(r2)
   22d04:	e0bffe17 	ldw	r2,-8(fp)
   22d08:	10800c17 	ldw	r2,48(r2)
   22d0c:	18800526 	beq	r3,r2,22d24 <altera_avalon_jtag_uart_close+0x54>
   22d10:	e0bffe17 	ldw	r2,-8(fp)
   22d14:	10c00917 	ldw	r3,36(r2)
   22d18:	e0bffe17 	ldw	r2,-8(fp)
   22d1c:	10800117 	ldw	r2,4(r2)
   22d20:	18bff136 	bltu	r3,r2,22ce8 <__alt_data_end+0xfc022ce8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   22d24:	0005883a 	mov	r2,zero
}
   22d28:	e037883a 	mov	sp,fp
   22d2c:	df000017 	ldw	fp,0(sp)
   22d30:	dec00104 	addi	sp,sp,4
   22d34:	f800283a 	ret

00022d38 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   22d38:	defffa04 	addi	sp,sp,-24
   22d3c:	df000515 	stw	fp,20(sp)
   22d40:	df000504 	addi	fp,sp,20
   22d44:	e13ffd15 	stw	r4,-12(fp)
   22d48:	e17ffe15 	stw	r5,-8(fp)
   22d4c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   22d50:	00bff9c4 	movi	r2,-25
   22d54:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   22d58:	e0bffe17 	ldw	r2,-8(fp)
   22d5c:	10da8060 	cmpeqi	r3,r2,27137
   22d60:	1800031e 	bne	r3,zero,22d70 <altera_avalon_jtag_uart_ioctl+0x38>
   22d64:	109a80a0 	cmpeqi	r2,r2,27138
   22d68:	1000181e 	bne	r2,zero,22dcc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   22d6c:	00002906 	br	22e14 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   22d70:	e0bffd17 	ldw	r2,-12(fp)
   22d74:	10c00117 	ldw	r3,4(r2)
   22d78:	00a00034 	movhi	r2,32768
   22d7c:	10bfffc4 	addi	r2,r2,-1
   22d80:	18802126 	beq	r3,r2,22e08 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   22d84:	e0bfff17 	ldw	r2,-4(fp)
   22d88:	10800017 	ldw	r2,0(r2)
   22d8c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   22d90:	e0bffc17 	ldw	r2,-16(fp)
   22d94:	10800090 	cmplti	r2,r2,2
   22d98:	1000061e 	bne	r2,zero,22db4 <altera_avalon_jtag_uart_ioctl+0x7c>
   22d9c:	e0fffc17 	ldw	r3,-16(fp)
   22da0:	00a00034 	movhi	r2,32768
   22da4:	10bfffc4 	addi	r2,r2,-1
   22da8:	18800226 	beq	r3,r2,22db4 <altera_avalon_jtag_uart_ioctl+0x7c>
   22dac:	e0bffc17 	ldw	r2,-16(fp)
   22db0:	00000206 	br	22dbc <altera_avalon_jtag_uart_ioctl+0x84>
   22db4:	00a00034 	movhi	r2,32768
   22db8:	10bfff84 	addi	r2,r2,-2
   22dbc:	e0fffd17 	ldw	r3,-12(fp)
   22dc0:	18800115 	stw	r2,4(r3)
      rc = 0;
   22dc4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22dc8:	00000f06 	br	22e08 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   22dcc:	e0bffd17 	ldw	r2,-12(fp)
   22dd0:	10c00117 	ldw	r3,4(r2)
   22dd4:	00a00034 	movhi	r2,32768
   22dd8:	10bfffc4 	addi	r2,r2,-1
   22ddc:	18800c26 	beq	r3,r2,22e10 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   22de0:	e0bffd17 	ldw	r2,-12(fp)
   22de4:	10c00917 	ldw	r3,36(r2)
   22de8:	e0bffd17 	ldw	r2,-12(fp)
   22dec:	10800117 	ldw	r2,4(r2)
   22df0:	1885803a 	cmpltu	r2,r3,r2
   22df4:	10c03fcc 	andi	r3,r2,255
   22df8:	e0bfff17 	ldw	r2,-4(fp)
   22dfc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   22e00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22e04:	00000206 	br	22e10 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   22e08:	0001883a 	nop
   22e0c:	00000106 	br	22e14 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   22e10:	0001883a 	nop

  default:
    break;
  }

  return rc;
   22e14:	e0bffb17 	ldw	r2,-20(fp)
}
   22e18:	e037883a 	mov	sp,fp
   22e1c:	df000017 	ldw	fp,0(sp)
   22e20:	dec00104 	addi	sp,sp,4
   22e24:	f800283a 	ret

00022e28 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   22e28:	defff304 	addi	sp,sp,-52
   22e2c:	dfc00c15 	stw	ra,48(sp)
   22e30:	df000b15 	stw	fp,44(sp)
   22e34:	df000b04 	addi	fp,sp,44
   22e38:	e13ffc15 	stw	r4,-16(fp)
   22e3c:	e17ffd15 	stw	r5,-12(fp)
   22e40:	e1bffe15 	stw	r6,-8(fp)
   22e44:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   22e48:	e0bffd17 	ldw	r2,-12(fp)
   22e4c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   22e50:	00004706 	br	22f70 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   22e54:	e0bffc17 	ldw	r2,-16(fp)
   22e58:	10800a17 	ldw	r2,40(r2)
   22e5c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   22e60:	e0bffc17 	ldw	r2,-16(fp)
   22e64:	10800b17 	ldw	r2,44(r2)
   22e68:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   22e6c:	e0fff717 	ldw	r3,-36(fp)
   22e70:	e0bff817 	ldw	r2,-32(fp)
   22e74:	18800536 	bltu	r3,r2,22e8c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   22e78:	e0fff717 	ldw	r3,-36(fp)
   22e7c:	e0bff817 	ldw	r2,-32(fp)
   22e80:	1885c83a 	sub	r2,r3,r2
   22e84:	e0bff615 	stw	r2,-40(fp)
   22e88:	00000406 	br	22e9c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   22e8c:	00c20004 	movi	r3,2048
   22e90:	e0bff817 	ldw	r2,-32(fp)
   22e94:	1885c83a 	sub	r2,r3,r2
   22e98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   22e9c:	e0bff617 	ldw	r2,-40(fp)
   22ea0:	10001e26 	beq	r2,zero,22f1c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   22ea4:	e0fffe17 	ldw	r3,-8(fp)
   22ea8:	e0bff617 	ldw	r2,-40(fp)
   22eac:	1880022e 	bgeu	r3,r2,22eb8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   22eb0:	e0bffe17 	ldw	r2,-8(fp)
   22eb4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   22eb8:	e0bffc17 	ldw	r2,-16(fp)
   22ebc:	10c00e04 	addi	r3,r2,56
   22ec0:	e0bff817 	ldw	r2,-32(fp)
   22ec4:	1885883a 	add	r2,r3,r2
   22ec8:	e1bff617 	ldw	r6,-40(fp)
   22ecc:	100b883a 	mov	r5,r2
   22ed0:	e13ff517 	ldw	r4,-44(fp)
   22ed4:	000fc580 	call	fc58 <memcpy>
      ptr   += n;
   22ed8:	e0fff517 	ldw	r3,-44(fp)
   22edc:	e0bff617 	ldw	r2,-40(fp)
   22ee0:	1885883a 	add	r2,r3,r2
   22ee4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   22ee8:	e0fffe17 	ldw	r3,-8(fp)
   22eec:	e0bff617 	ldw	r2,-40(fp)
   22ef0:	1885c83a 	sub	r2,r3,r2
   22ef4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22ef8:	e0fff817 	ldw	r3,-32(fp)
   22efc:	e0bff617 	ldw	r2,-40(fp)
   22f00:	1885883a 	add	r2,r3,r2
   22f04:	10c1ffcc 	andi	r3,r2,2047
   22f08:	e0bffc17 	ldw	r2,-16(fp)
   22f0c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   22f10:	e0bffe17 	ldw	r2,-8(fp)
   22f14:	00bfcf16 	blt	zero,r2,22e54 <__alt_data_end+0xfc022e54>
   22f18:	00000106 	br	22f20 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   22f1c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   22f20:	e0fff517 	ldw	r3,-44(fp)
   22f24:	e0bffd17 	ldw	r2,-12(fp)
   22f28:	1880141e 	bne	r3,r2,22f7c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   22f2c:	e0bfff17 	ldw	r2,-4(fp)
   22f30:	1090000c 	andi	r2,r2,16384
   22f34:	1000131e 	bne	r2,zero,22f84 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   22f38:	0001883a 	nop
   22f3c:	e0bffc17 	ldw	r2,-16(fp)
   22f40:	10c00a17 	ldw	r3,40(r2)
   22f44:	e0bff717 	ldw	r2,-36(fp)
   22f48:	1880051e 	bne	r3,r2,22f60 <altera_avalon_jtag_uart_read+0x138>
   22f4c:	e0bffc17 	ldw	r2,-16(fp)
   22f50:	10c00917 	ldw	r3,36(r2)
   22f54:	e0bffc17 	ldw	r2,-16(fp)
   22f58:	10800117 	ldw	r2,4(r2)
   22f5c:	18bff736 	bltu	r3,r2,22f3c <__alt_data_end+0xfc022f3c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   22f60:	e0bffc17 	ldw	r2,-16(fp)
   22f64:	10c00a17 	ldw	r3,40(r2)
   22f68:	e0bff717 	ldw	r2,-36(fp)
   22f6c:	18800726 	beq	r3,r2,22f8c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   22f70:	e0bffe17 	ldw	r2,-8(fp)
   22f74:	00bfb716 	blt	zero,r2,22e54 <__alt_data_end+0xfc022e54>
   22f78:	00000506 	br	22f90 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   22f7c:	0001883a 	nop
   22f80:	00000306 	br	22f90 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   22f84:	0001883a 	nop
   22f88:	00000106 	br	22f90 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   22f8c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   22f90:	e0fff517 	ldw	r3,-44(fp)
   22f94:	e0bffd17 	ldw	r2,-12(fp)
   22f98:	18801826 	beq	r3,r2,22ffc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22f9c:	0005303a 	rdctl	r2,status
   22fa0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22fa4:	e0fffb17 	ldw	r3,-20(fp)
   22fa8:	00bfff84 	movi	r2,-2
   22fac:	1884703a 	and	r2,r3,r2
   22fb0:	1001703a 	wrctl	status,r2
  
  return context;
   22fb4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   22fb8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22fbc:	e0bffc17 	ldw	r2,-16(fp)
   22fc0:	10800817 	ldw	r2,32(r2)
   22fc4:	10c00054 	ori	r3,r2,1
   22fc8:	e0bffc17 	ldw	r2,-16(fp)
   22fcc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22fd0:	e0bffc17 	ldw	r2,-16(fp)
   22fd4:	10800017 	ldw	r2,0(r2)
   22fd8:	10800104 	addi	r2,r2,4
   22fdc:	1007883a 	mov	r3,r2
   22fe0:	e0bffc17 	ldw	r2,-16(fp)
   22fe4:	10800817 	ldw	r2,32(r2)
   22fe8:	18800035 	stwio	r2,0(r3)
   22fec:	e0bffa17 	ldw	r2,-24(fp)
   22ff0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22ff4:	e0bff917 	ldw	r2,-28(fp)
   22ff8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   22ffc:	e0fff517 	ldw	r3,-44(fp)
   23000:	e0bffd17 	ldw	r2,-12(fp)
   23004:	18800426 	beq	r3,r2,23018 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   23008:	e0fff517 	ldw	r3,-44(fp)
   2300c:	e0bffd17 	ldw	r2,-12(fp)
   23010:	1885c83a 	sub	r2,r3,r2
   23014:	00000606 	br	23030 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   23018:	e0bfff17 	ldw	r2,-4(fp)
   2301c:	1090000c 	andi	r2,r2,16384
   23020:	10000226 	beq	r2,zero,2302c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   23024:	00bffd44 	movi	r2,-11
   23028:	00000106 	br	23030 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2302c:	00bffec4 	movi	r2,-5
}
   23030:	e037883a 	mov	sp,fp
   23034:	dfc00117 	ldw	ra,4(sp)
   23038:	df000017 	ldw	fp,0(sp)
   2303c:	dec00204 	addi	sp,sp,8
   23040:	f800283a 	ret

00023044 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23044:	defff304 	addi	sp,sp,-52
   23048:	dfc00c15 	stw	ra,48(sp)
   2304c:	df000b15 	stw	fp,44(sp)
   23050:	df000b04 	addi	fp,sp,44
   23054:	e13ffc15 	stw	r4,-16(fp)
   23058:	e17ffd15 	stw	r5,-12(fp)
   2305c:	e1bffe15 	stw	r6,-8(fp)
   23060:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   23064:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   23068:	e0bffd17 	ldw	r2,-12(fp)
   2306c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23070:	00003706 	br	23150 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   23074:	e0bffc17 	ldw	r2,-16(fp)
   23078:	10800c17 	ldw	r2,48(r2)
   2307c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   23080:	e0bffc17 	ldw	r2,-16(fp)
   23084:	10800d17 	ldw	r2,52(r2)
   23088:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2308c:	e0fff917 	ldw	r3,-28(fp)
   23090:	e0bff517 	ldw	r2,-44(fp)
   23094:	1880062e 	bgeu	r3,r2,230b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   23098:	e0fff517 	ldw	r3,-44(fp)
   2309c:	e0bff917 	ldw	r2,-28(fp)
   230a0:	1885c83a 	sub	r2,r3,r2
   230a4:	10bfffc4 	addi	r2,r2,-1
   230a8:	e0bff615 	stw	r2,-40(fp)
   230ac:	00000b06 	br	230dc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   230b0:	e0bff517 	ldw	r2,-44(fp)
   230b4:	10000526 	beq	r2,zero,230cc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   230b8:	00c20004 	movi	r3,2048
   230bc:	e0bff917 	ldw	r2,-28(fp)
   230c0:	1885c83a 	sub	r2,r3,r2
   230c4:	e0bff615 	stw	r2,-40(fp)
   230c8:	00000406 	br	230dc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   230cc:	00c1ffc4 	movi	r3,2047
   230d0:	e0bff917 	ldw	r2,-28(fp)
   230d4:	1885c83a 	sub	r2,r3,r2
   230d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   230dc:	e0bff617 	ldw	r2,-40(fp)
   230e0:	10001e26 	beq	r2,zero,2315c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   230e4:	e0fffe17 	ldw	r3,-8(fp)
   230e8:	e0bff617 	ldw	r2,-40(fp)
   230ec:	1880022e 	bgeu	r3,r2,230f8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   230f0:	e0bffe17 	ldw	r2,-8(fp)
   230f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   230f8:	e0bffc17 	ldw	r2,-16(fp)
   230fc:	10c20e04 	addi	r3,r2,2104
   23100:	e0bff917 	ldw	r2,-28(fp)
   23104:	1885883a 	add	r2,r3,r2
   23108:	e1bff617 	ldw	r6,-40(fp)
   2310c:	e17ffd17 	ldw	r5,-12(fp)
   23110:	1009883a 	mov	r4,r2
   23114:	000fc580 	call	fc58 <memcpy>
      ptr   += n;
   23118:	e0fffd17 	ldw	r3,-12(fp)
   2311c:	e0bff617 	ldw	r2,-40(fp)
   23120:	1885883a 	add	r2,r3,r2
   23124:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   23128:	e0fffe17 	ldw	r3,-8(fp)
   2312c:	e0bff617 	ldw	r2,-40(fp)
   23130:	1885c83a 	sub	r2,r3,r2
   23134:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23138:	e0fff917 	ldw	r3,-28(fp)
   2313c:	e0bff617 	ldw	r2,-40(fp)
   23140:	1885883a 	add	r2,r3,r2
   23144:	10c1ffcc 	andi	r3,r2,2047
   23148:	e0bffc17 	ldw	r2,-16(fp)
   2314c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23150:	e0bffe17 	ldw	r2,-8(fp)
   23154:	00bfc716 	blt	zero,r2,23074 <__alt_data_end+0xfc023074>
   23158:	00000106 	br	23160 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2315c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23160:	0005303a 	rdctl	r2,status
   23164:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23168:	e0fffb17 	ldw	r3,-20(fp)
   2316c:	00bfff84 	movi	r2,-2
   23170:	1884703a 	and	r2,r3,r2
   23174:	1001703a 	wrctl	status,r2
  
  return context;
   23178:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2317c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23180:	e0bffc17 	ldw	r2,-16(fp)
   23184:	10800817 	ldw	r2,32(r2)
   23188:	10c00094 	ori	r3,r2,2
   2318c:	e0bffc17 	ldw	r2,-16(fp)
   23190:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23194:	e0bffc17 	ldw	r2,-16(fp)
   23198:	10800017 	ldw	r2,0(r2)
   2319c:	10800104 	addi	r2,r2,4
   231a0:	1007883a 	mov	r3,r2
   231a4:	e0bffc17 	ldw	r2,-16(fp)
   231a8:	10800817 	ldw	r2,32(r2)
   231ac:	18800035 	stwio	r2,0(r3)
   231b0:	e0bffa17 	ldw	r2,-24(fp)
   231b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   231b8:	e0bff817 	ldw	r2,-32(fp)
   231bc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   231c0:	e0bffe17 	ldw	r2,-8(fp)
   231c4:	0080100e 	bge	zero,r2,23208 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   231c8:	e0bfff17 	ldw	r2,-4(fp)
   231cc:	1090000c 	andi	r2,r2,16384
   231d0:	1000101e 	bne	r2,zero,23214 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   231d4:	0001883a 	nop
   231d8:	e0bffc17 	ldw	r2,-16(fp)
   231dc:	10c00d17 	ldw	r3,52(r2)
   231e0:	e0bff517 	ldw	r2,-44(fp)
   231e4:	1880051e 	bne	r3,r2,231fc <altera_avalon_jtag_uart_write+0x1b8>
   231e8:	e0bffc17 	ldw	r2,-16(fp)
   231ec:	10c00917 	ldw	r3,36(r2)
   231f0:	e0bffc17 	ldw	r2,-16(fp)
   231f4:	10800117 	ldw	r2,4(r2)
   231f8:	18bff736 	bltu	r3,r2,231d8 <__alt_data_end+0xfc0231d8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   231fc:	e0bffc17 	ldw	r2,-16(fp)
   23200:	10800917 	ldw	r2,36(r2)
   23204:	1000051e 	bne	r2,zero,2321c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   23208:	e0bffe17 	ldw	r2,-8(fp)
   2320c:	00bfd016 	blt	zero,r2,23150 <__alt_data_end+0xfc023150>
   23210:	00000306 	br	23220 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   23214:	0001883a 	nop
   23218:	00000106 	br	23220 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2321c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   23220:	e0fffd17 	ldw	r3,-12(fp)
   23224:	e0bff717 	ldw	r2,-36(fp)
   23228:	18800426 	beq	r3,r2,2323c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2322c:	e0fffd17 	ldw	r3,-12(fp)
   23230:	e0bff717 	ldw	r2,-36(fp)
   23234:	1885c83a 	sub	r2,r3,r2
   23238:	00000606 	br	23254 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2323c:	e0bfff17 	ldw	r2,-4(fp)
   23240:	1090000c 	andi	r2,r2,16384
   23244:	10000226 	beq	r2,zero,23250 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   23248:	00bffd44 	movi	r2,-11
   2324c:	00000106 	br	23254 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   23250:	00bffec4 	movi	r2,-5
}
   23254:	e037883a 	mov	sp,fp
   23258:	dfc00117 	ldw	ra,4(sp)
   2325c:	df000017 	ldw	fp,0(sp)
   23260:	dec00204 	addi	sp,sp,8
   23264:	f800283a 	ret

00023268 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   23268:	defff404 	addi	sp,sp,-48
   2326c:	df000b15 	stw	fp,44(sp)
   23270:	df000b04 	addi	fp,sp,44
   23274:	e13ffc15 	stw	r4,-16(fp)
   23278:	e17ffd15 	stw	r5,-12(fp)
   2327c:	e1bffe15 	stw	r6,-8(fp)
   23280:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   23284:	e0ffff17 	ldw	r3,-4(fp)
   23288:	e0bffe17 	ldw	r2,-8(fp)
   2328c:	1885883a 	add	r2,r3,r2
   23290:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   23294:	e0c00217 	ldw	r3,8(fp)
   23298:	e0800117 	ldw	r2,4(fp)
   2329c:	1885883a 	add	r2,r3,r2
   232a0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   232a4:	e0800117 	ldw	r2,4(fp)
   232a8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   232ac:	e0bffe17 	ldw	r2,-8(fp)
   232b0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   232b4:	00800044 	movi	r2,1
   232b8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   232bc:	e0bffc17 	ldw	r2,-16(fp)
   232c0:	10800504 	addi	r2,r2,20
   232c4:	1009883a 	mov	r4,r2
   232c8:	00c00044 	movi	r3,1
   232cc:	e0bffd17 	ldw	r2,-12(fp)
   232d0:	1884983a 	sll	r2,r3,r2
   232d4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   232d8:	e0800317 	ldw	r2,12(fp)
   232dc:	1080008c 	andi	r2,r2,2
   232e0:	1000051e 	bne	r2,zero,232f8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   232e4:	e0bffc17 	ldw	r2,-16(fp)
   232e8:	10800304 	addi	r2,r2,12
   232ec:	1007883a 	mov	r3,r2
   232f0:	00810004 	movi	r2,1024
   232f4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   232f8:	e0bffc17 	ldw	r2,-16(fp)
   232fc:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   23300:	e0bffc17 	ldw	r2,-16(fp)
   23304:	10800204 	addi	r2,r2,8
   23308:	10800037 	ldwio	r2,0(r2)
   2330c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   23310:	e0bffa17 	ldw	r2,-24(fp)
   23314:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   23318:	10000226 	beq	r2,zero,23324 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   2331c:	e0bff717 	ldw	r2,-36(fp)
   23320:	1000031e 	bne	r2,zero,23330 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   23324:	e0bffa17 	ldw	r2,-24(fp)
   23328:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   2332c:	103ff426 	beq	r2,zero,23300 <__alt_data_end+0xfc023300>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   23330:	e0bffa17 	ldw	r2,-24(fp)
   23334:	1080100c 	andi	r2,r2,64
   23338:	10001e26 	beq	r2,zero,233b4 <alt_avalon_spi_command+0x14c>
   2333c:	e0bff717 	ldw	r2,-36(fp)
   23340:	00801c0e 	bge	zero,r2,233b4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   23344:	e0bff717 	ldw	r2,-36(fp)
   23348:	10bfffc4 	addi	r2,r2,-1
   2334c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   23350:	e0ffff17 	ldw	r3,-4(fp)
   23354:	e0bff817 	ldw	r2,-32(fp)
   23358:	18800a2e 	bgeu	r3,r2,23384 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   2335c:	e0bffc17 	ldw	r2,-16(fp)
   23360:	10800104 	addi	r2,r2,4
   23364:	1009883a 	mov	r4,r2
   23368:	e0bfff17 	ldw	r2,-4(fp)
   2336c:	10c00044 	addi	r3,r2,1
   23370:	e0ffff15 	stw	r3,-4(fp)
   23374:	10800003 	ldbu	r2,0(r2)
   23378:	10803fcc 	andi	r2,r2,255
   2337c:	20800035 	stwio	r2,0(r4)
   23380:	00000c06 	br	233b4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   23384:	e0bff517 	ldw	r2,-44(fp)
   23388:	10000826 	beq	r2,zero,233ac <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   2338c:	e0bff517 	ldw	r2,-44(fp)
   23390:	10bfffc4 	addi	r2,r2,-1
   23394:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   23398:	e0bffc17 	ldw	r2,-16(fp)
   2339c:	10800104 	addi	r2,r2,4
   233a0:	0007883a 	mov	r3,zero
   233a4:	10c00035 	stwio	r3,0(r2)
   233a8:	00000206 	br	233b4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   233ac:	00bf0004 	movi	r2,-1024
   233b0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   233b4:	e0bffa17 	ldw	r2,-24(fp)
   233b8:	1080200c 	andi	r2,r2,128
   233bc:	103fd026 	beq	r2,zero,23300 <__alt_data_end+0xfc023300>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   233c0:	e0bffc17 	ldw	r2,-16(fp)
   233c4:	10800037 	ldwio	r2,0(r2)
   233c8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   233cc:	e0bff617 	ldw	r2,-40(fp)
   233d0:	10000426 	beq	r2,zero,233e4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   233d4:	e0bff617 	ldw	r2,-40(fp)
   233d8:	10bfffc4 	addi	r2,r2,-1
   233dc:	e0bff615 	stw	r2,-40(fp)
   233e0:	00000506 	br	233f8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   233e4:	e0800217 	ldw	r2,8(fp)
   233e8:	10c00044 	addi	r3,r2,1
   233ec:	e0c00215 	stw	r3,8(fp)
   233f0:	e0fffb17 	ldw	r3,-20(fp)
   233f4:	10c00005 	stb	r3,0(r2)
      credits++;
   233f8:	e0bff717 	ldw	r2,-36(fp)
   233fc:	10800044 	addi	r2,r2,1
   23400:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   23404:	e0bff617 	ldw	r2,-40(fp)
   23408:	103fbd1e 	bne	r2,zero,23300 <__alt_data_end+0xfc023300>
   2340c:	e0c00217 	ldw	r3,8(fp)
   23410:	e0bff917 	ldw	r2,-28(fp)
   23414:	18bfba1e 	bne	r3,r2,23300 <__alt_data_end+0xfc023300>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   23418:	e0bffc17 	ldw	r2,-16(fp)
   2341c:	10800204 	addi	r2,r2,8
   23420:	10800037 	ldwio	r2,0(r2)
   23424:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   23428:	e0bffa17 	ldw	r2,-24(fp)
   2342c:	1080080c 	andi	r2,r2,32
   23430:	103ff926 	beq	r2,zero,23418 <__alt_data_end+0xfc023418>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   23434:	e0800317 	ldw	r2,12(fp)
   23438:	1080004c 	andi	r2,r2,1
   2343c:	1000041e 	bne	r2,zero,23450 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   23440:	e0bffc17 	ldw	r2,-16(fp)
   23444:	10800304 	addi	r2,r2,12
   23448:	0007883a 	mov	r3,zero
   2344c:	10c00035 	stwio	r3,0(r2)

  return read_length;
   23450:	e0800117 	ldw	r2,4(fp)
}
   23454:	e037883a 	mov	sp,fp
   23458:	df000017 	ldw	fp,0(sp)
   2345c:	dec00104 	addi	sp,sp,4
   23460:	f800283a 	ret

00023464 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   23464:	defffa04 	addi	sp,sp,-24
   23468:	dfc00515 	stw	ra,20(sp)
   2346c:	df000415 	stw	fp,16(sp)
   23470:	df000404 	addi	fp,sp,16
   23474:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   23478:	0007883a 	mov	r3,zero
   2347c:	e0bfff17 	ldw	r2,-4(fp)
   23480:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   23484:	e0bfff17 	ldw	r2,-4(fp)
   23488:	10800104 	addi	r2,r2,4
   2348c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23490:	0005303a 	rdctl	r2,status
   23494:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23498:	e0fffd17 	ldw	r3,-12(fp)
   2349c:	00bfff84 	movi	r2,-2
   234a0:	1884703a 	and	r2,r3,r2
   234a4:	1001703a 	wrctl	status,r2
  
  return context;
   234a8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   234ac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   234b0:	00243d40 	call	243d4 <alt_tick>
   234b4:	e0bffc17 	ldw	r2,-16(fp)
   234b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   234bc:	e0bffe17 	ldw	r2,-8(fp)
   234c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   234c4:	0001883a 	nop
   234c8:	e037883a 	mov	sp,fp
   234cc:	dfc00117 	ldw	ra,4(sp)
   234d0:	df000017 	ldw	fp,0(sp)
   234d4:	dec00204 	addi	sp,sp,8
   234d8:	f800283a 	ret

000234dc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   234dc:	defff804 	addi	sp,sp,-32
   234e0:	dfc00715 	stw	ra,28(sp)
   234e4:	df000615 	stw	fp,24(sp)
   234e8:	df000604 	addi	fp,sp,24
   234ec:	e13ffc15 	stw	r4,-16(fp)
   234f0:	e17ffd15 	stw	r5,-12(fp)
   234f4:	e1bffe15 	stw	r6,-8(fp)
   234f8:	e1ffff15 	stw	r7,-4(fp)
   234fc:	e0bfff17 	ldw	r2,-4(fp)
   23500:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   23504:	d0b25617 	ldw	r2,-13992(gp)
   23508:	1000021e 	bne	r2,zero,23514 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   2350c:	e0bffb17 	ldw	r2,-20(fp)
   23510:	d0b25615 	stw	r2,-13992(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   23514:	e0bffc17 	ldw	r2,-16(fp)
   23518:	10800104 	addi	r2,r2,4
   2351c:	00c001c4 	movi	r3,7
   23520:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   23524:	d8000015 	stw	zero,0(sp)
   23528:	e1fffc17 	ldw	r7,-16(fp)
   2352c:	018000b4 	movhi	r6,2
   23530:	318d1904 	addi	r6,r6,13412
   23534:	e17ffe17 	ldw	r5,-8(fp)
   23538:	e13ffd17 	ldw	r4,-12(fp)
   2353c:	0023a4c0 	call	23a4c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   23540:	0001883a 	nop
   23544:	e037883a 	mov	sp,fp
   23548:	dfc00117 	ldw	ra,4(sp)
   2354c:	df000017 	ldw	fp,0(sp)
   23550:	dec00204 	addi	sp,sp,8
   23554:	f800283a 	ret

00023558 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   23558:	defff504 	addi	sp,sp,-44
   2355c:	df000a15 	stw	fp,40(sp)
   23560:	df000a04 	addi	fp,sp,40
   23564:	e13ffc15 	stw	r4,-16(fp)
   23568:	e17ffd15 	stw	r5,-12(fp)
   2356c:	e1bffe15 	stw	r6,-8(fp)
   23570:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   23574:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23578:	d0b25617 	ldw	r2,-13992(gp)
  
  if (alt_ticks_per_second ())
   2357c:	10003c26 	beq	r2,zero,23670 <alt_alarm_start+0x118>
  {
    if (alarm)
   23580:	e0bffc17 	ldw	r2,-16(fp)
   23584:	10003826 	beq	r2,zero,23668 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   23588:	e0bffc17 	ldw	r2,-16(fp)
   2358c:	e0fffe17 	ldw	r3,-8(fp)
   23590:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   23594:	e0bffc17 	ldw	r2,-16(fp)
   23598:	e0ffff17 	ldw	r3,-4(fp)
   2359c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   235a0:	0005303a 	rdctl	r2,status
   235a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   235a8:	e0fff917 	ldw	r3,-28(fp)
   235ac:	00bfff84 	movi	r2,-2
   235b0:	1884703a 	and	r2,r3,r2
   235b4:	1001703a 	wrctl	status,r2
  
  return context;
   235b8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   235bc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   235c0:	d0b25717 	ldw	r2,-13988(gp)
      
      current_nticks = alt_nticks();
   235c4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   235c8:	e0fffd17 	ldw	r3,-12(fp)
   235cc:	e0bff617 	ldw	r2,-40(fp)
   235d0:	1885883a 	add	r2,r3,r2
   235d4:	10c00044 	addi	r3,r2,1
   235d8:	e0bffc17 	ldw	r2,-16(fp)
   235dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   235e0:	e0bffc17 	ldw	r2,-16(fp)
   235e4:	10c00217 	ldw	r3,8(r2)
   235e8:	e0bff617 	ldw	r2,-40(fp)
   235ec:	1880042e 	bgeu	r3,r2,23600 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   235f0:	e0bffc17 	ldw	r2,-16(fp)
   235f4:	00c00044 	movi	r3,1
   235f8:	10c00405 	stb	r3,16(r2)
   235fc:	00000206 	br	23608 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   23600:	e0bffc17 	ldw	r2,-16(fp)
   23604:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   23608:	e0bffc17 	ldw	r2,-16(fp)
   2360c:	d0e5c204 	addi	r3,gp,-26872
   23610:	e0fffa15 	stw	r3,-24(fp)
   23614:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23618:	e0bffb17 	ldw	r2,-20(fp)
   2361c:	e0fffa17 	ldw	r3,-24(fp)
   23620:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23624:	e0bffa17 	ldw	r2,-24(fp)
   23628:	10c00017 	ldw	r3,0(r2)
   2362c:	e0bffb17 	ldw	r2,-20(fp)
   23630:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23634:	e0bffa17 	ldw	r2,-24(fp)
   23638:	10800017 	ldw	r2,0(r2)
   2363c:	e0fffb17 	ldw	r3,-20(fp)
   23640:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23644:	e0bffa17 	ldw	r2,-24(fp)
   23648:	e0fffb17 	ldw	r3,-20(fp)
   2364c:	10c00015 	stw	r3,0(r2)
   23650:	e0bff817 	ldw	r2,-32(fp)
   23654:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23658:	e0bff717 	ldw	r2,-36(fp)
   2365c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   23660:	0005883a 	mov	r2,zero
   23664:	00000306 	br	23674 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   23668:	00bffa84 	movi	r2,-22
   2366c:	00000106 	br	23674 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   23670:	00bfde84 	movi	r2,-134
  }
}
   23674:	e037883a 	mov	sp,fp
   23678:	df000017 	ldw	fp,0(sp)
   2367c:	dec00104 	addi	sp,sp,4
   23680:	f800283a 	ret

00023684 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   23684:	defffa04 	addi	sp,sp,-24
   23688:	dfc00515 	stw	ra,20(sp)
   2368c:	df000415 	stw	fp,16(sp)
   23690:	df000404 	addi	fp,sp,16
   23694:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   23698:	00800244 	movi	r2,9
   2369c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   236a0:	014003f4 	movhi	r5,15
   236a4:	29509004 	addi	r5,r5,16960
   236a8:	e13ffd17 	ldw	r4,-12(fp)
   236ac:	000d8b80 	call	d8b8 <__mulsi3>
   236b0:	100b883a 	mov	r5,r2
   236b4:	01017db4 	movhi	r4,1526
   236b8:	21384004 	addi	r4,r4,-7936
   236bc:	000d7fc0 	call	d7fc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   236c0:	100b883a 	mov	r5,r2
   236c4:	01200034 	movhi	r4,32768
   236c8:	213fffc4 	addi	r4,r4,-1
   236cc:	000d7fc0 	call	d7fc <__udivsi3>
   236d0:	100b883a 	mov	r5,r2
   236d4:	e13fff17 	ldw	r4,-4(fp)
   236d8:	000d7fc0 	call	d7fc <__udivsi3>
   236dc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   236e0:	e0bffe17 	ldw	r2,-8(fp)
   236e4:	10002a26 	beq	r2,zero,23790 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   236e8:	e03ffc15 	stw	zero,-16(fp)
   236ec:	00001706 	br	2374c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   236f0:	00a00034 	movhi	r2,32768
   236f4:	10bfffc4 	addi	r2,r2,-1
   236f8:	10bfffc4 	addi	r2,r2,-1
   236fc:	103ffe1e 	bne	r2,zero,236f8 <__alt_data_end+0xfc0236f8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   23700:	014003f4 	movhi	r5,15
   23704:	29509004 	addi	r5,r5,16960
   23708:	e13ffd17 	ldw	r4,-12(fp)
   2370c:	000d8b80 	call	d8b8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   23710:	100b883a 	mov	r5,r2
   23714:	01017db4 	movhi	r4,1526
   23718:	21384004 	addi	r4,r4,-7936
   2371c:	000d7fc0 	call	d7fc <__udivsi3>
   23720:	100b883a 	mov	r5,r2
   23724:	01200034 	movhi	r4,32768
   23728:	213fffc4 	addi	r4,r4,-1
   2372c:	000d7fc0 	call	d7fc <__udivsi3>
   23730:	1007883a 	mov	r3,r2
   23734:	e0bfff17 	ldw	r2,-4(fp)
   23738:	10c5c83a 	sub	r2,r2,r3
   2373c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   23740:	e0bffc17 	ldw	r2,-16(fp)
   23744:	10800044 	addi	r2,r2,1
   23748:	e0bffc15 	stw	r2,-16(fp)
   2374c:	e0fffc17 	ldw	r3,-16(fp)
   23750:	e0bffe17 	ldw	r2,-8(fp)
   23754:	18bfe616 	blt	r3,r2,236f0 <__alt_data_end+0xfc0236f0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23758:	014003f4 	movhi	r5,15
   2375c:	29509004 	addi	r5,r5,16960
   23760:	e13ffd17 	ldw	r4,-12(fp)
   23764:	000d8b80 	call	d8b8 <__mulsi3>
   23768:	100b883a 	mov	r5,r2
   2376c:	01017db4 	movhi	r4,1526
   23770:	21384004 	addi	r4,r4,-7936
   23774:	000d7fc0 	call	d7fc <__udivsi3>
   23778:	e17fff17 	ldw	r5,-4(fp)
   2377c:	1009883a 	mov	r4,r2
   23780:	000d8b80 	call	d8b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   23784:	10bfffc4 	addi	r2,r2,-1
   23788:	103ffe1e 	bne	r2,zero,23784 <__alt_data_end+0xfc023784>
   2378c:	00000d06 	br	237c4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23790:	014003f4 	movhi	r5,15
   23794:	29509004 	addi	r5,r5,16960
   23798:	e13ffd17 	ldw	r4,-12(fp)
   2379c:	000d8b80 	call	d8b8 <__mulsi3>
   237a0:	100b883a 	mov	r5,r2
   237a4:	01017db4 	movhi	r4,1526
   237a8:	21384004 	addi	r4,r4,-7936
   237ac:	000d7fc0 	call	d7fc <__udivsi3>
   237b0:	e17fff17 	ldw	r5,-4(fp)
   237b4:	1009883a 	mov	r4,r2
   237b8:	000d8b80 	call	d8b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   237bc:	10bfffc4 	addi	r2,r2,-1
   237c0:	00bffe16 	blt	zero,r2,237bc <__alt_data_end+0xfc0237bc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   237c4:	0005883a 	mov	r2,zero
}
   237c8:	e037883a 	mov	sp,fp
   237cc:	dfc00117 	ldw	ra,4(sp)
   237d0:	df000017 	ldw	fp,0(sp)
   237d4:	dec00204 	addi	sp,sp,8
   237d8:	f800283a 	ret

000237dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   237dc:	deffff04 	addi	sp,sp,-4
   237e0:	df000015 	stw	fp,0(sp)
   237e4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   237e8:	0001883a 	nop
   237ec:	e037883a 	mov	sp,fp
   237f0:	df000017 	ldw	fp,0(sp)
   237f4:	dec00104 	addi	sp,sp,4
   237f8:	f800283a 	ret

000237fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   237fc:	defffe04 	addi	sp,sp,-8
   23800:	dfc00115 	stw	ra,4(sp)
   23804:	df000015 	stw	fp,0(sp)
   23808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2380c:	d0a5bd17 	ldw	r2,-26892(gp)
   23810:	10000326 	beq	r2,zero,23820 <alt_get_errno+0x24>
   23814:	d0a5bd17 	ldw	r2,-26892(gp)
   23818:	103ee83a 	callr	r2
   2381c:	00000106 	br	23824 <alt_get_errno+0x28>
   23820:	d0b24e04 	addi	r2,gp,-14024
}
   23824:	e037883a 	mov	sp,fp
   23828:	dfc00117 	ldw	ra,4(sp)
   2382c:	df000017 	ldw	fp,0(sp)
   23830:	dec00204 	addi	sp,sp,8
   23834:	f800283a 	ret

00023838 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23838:	defffa04 	addi	sp,sp,-24
   2383c:	dfc00515 	stw	ra,20(sp)
   23840:	df000415 	stw	fp,16(sp)
   23844:	df000404 	addi	fp,sp,16
   23848:	e13ffe15 	stw	r4,-8(fp)
   2384c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   23850:	e0bffe17 	ldw	r2,-8(fp)
   23854:	10000326 	beq	r2,zero,23864 <alt_dev_llist_insert+0x2c>
   23858:	e0bffe17 	ldw	r2,-8(fp)
   2385c:	10800217 	ldw	r2,8(r2)
   23860:	1000061e 	bne	r2,zero,2387c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   23864:	00237fc0 	call	237fc <alt_get_errno>
   23868:	1007883a 	mov	r3,r2
   2386c:	00800584 	movi	r2,22
   23870:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   23874:	00bffa84 	movi	r2,-22
   23878:	00001306 	br	238c8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2387c:	e0bffe17 	ldw	r2,-8(fp)
   23880:	e0ffff17 	ldw	r3,-4(fp)
   23884:	e0fffc15 	stw	r3,-16(fp)
   23888:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2388c:	e0bffd17 	ldw	r2,-12(fp)
   23890:	e0fffc17 	ldw	r3,-16(fp)
   23894:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23898:	e0bffc17 	ldw	r2,-16(fp)
   2389c:	10c00017 	ldw	r3,0(r2)
   238a0:	e0bffd17 	ldw	r2,-12(fp)
   238a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   238a8:	e0bffc17 	ldw	r2,-16(fp)
   238ac:	10800017 	ldw	r2,0(r2)
   238b0:	e0fffd17 	ldw	r3,-12(fp)
   238b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   238b8:	e0bffc17 	ldw	r2,-16(fp)
   238bc:	e0fffd17 	ldw	r3,-12(fp)
   238c0:	10c00015 	stw	r3,0(r2)

  return 0;  
   238c4:	0005883a 	mov	r2,zero
}
   238c8:	e037883a 	mov	sp,fp
   238cc:	dfc00117 	ldw	ra,4(sp)
   238d0:	df000017 	ldw	fp,0(sp)
   238d4:	dec00204 	addi	sp,sp,8
   238d8:	f800283a 	ret

000238dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   238dc:	defffd04 	addi	sp,sp,-12
   238e0:	dfc00215 	stw	ra,8(sp)
   238e4:	df000115 	stw	fp,4(sp)
   238e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   238ec:	008000b4 	movhi	r2,2
   238f0:	1092c104 	addi	r2,r2,19204
   238f4:	e0bfff15 	stw	r2,-4(fp)
   238f8:	00000606 	br	23914 <_do_ctors+0x38>
        (*ctor) (); 
   238fc:	e0bfff17 	ldw	r2,-4(fp)
   23900:	10800017 	ldw	r2,0(r2)
   23904:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23908:	e0bfff17 	ldw	r2,-4(fp)
   2390c:	10bfff04 	addi	r2,r2,-4
   23910:	e0bfff15 	stw	r2,-4(fp)
   23914:	e0ffff17 	ldw	r3,-4(fp)
   23918:	008000b4 	movhi	r2,2
   2391c:	1092c004 	addi	r2,r2,19200
   23920:	18bff62e 	bgeu	r3,r2,238fc <__alt_data_end+0xfc0238fc>
        (*ctor) (); 
}
   23924:	0001883a 	nop
   23928:	e037883a 	mov	sp,fp
   2392c:	dfc00117 	ldw	ra,4(sp)
   23930:	df000017 	ldw	fp,0(sp)
   23934:	dec00204 	addi	sp,sp,8
   23938:	f800283a 	ret

0002393c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2393c:	defffd04 	addi	sp,sp,-12
   23940:	dfc00215 	stw	ra,8(sp)
   23944:	df000115 	stw	fp,4(sp)
   23948:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2394c:	008000b4 	movhi	r2,2
   23950:	1092c104 	addi	r2,r2,19204
   23954:	e0bfff15 	stw	r2,-4(fp)
   23958:	00000606 	br	23974 <_do_dtors+0x38>
        (*dtor) (); 
   2395c:	e0bfff17 	ldw	r2,-4(fp)
   23960:	10800017 	ldw	r2,0(r2)
   23964:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23968:	e0bfff17 	ldw	r2,-4(fp)
   2396c:	10bfff04 	addi	r2,r2,-4
   23970:	e0bfff15 	stw	r2,-4(fp)
   23974:	e0ffff17 	ldw	r3,-4(fp)
   23978:	008000b4 	movhi	r2,2
   2397c:	1092c204 	addi	r2,r2,19208
   23980:	18bff62e 	bgeu	r3,r2,2395c <__alt_data_end+0xfc02395c>
        (*dtor) (); 
}
   23984:	0001883a 	nop
   23988:	e037883a 	mov	sp,fp
   2398c:	dfc00117 	ldw	ra,4(sp)
   23990:	df000017 	ldw	fp,0(sp)
   23994:	dec00204 	addi	sp,sp,8
   23998:	f800283a 	ret

0002399c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2399c:	defffa04 	addi	sp,sp,-24
   239a0:	dfc00515 	stw	ra,20(sp)
   239a4:	df000415 	stw	fp,16(sp)
   239a8:	df000404 	addi	fp,sp,16
   239ac:	e13ffe15 	stw	r4,-8(fp)
   239b0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   239b4:	e0bfff17 	ldw	r2,-4(fp)
   239b8:	10800017 	ldw	r2,0(r2)
   239bc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   239c0:	e13ffe17 	ldw	r4,-8(fp)
   239c4:	00105200 	call	10520 <strlen>
   239c8:	10800044 	addi	r2,r2,1
   239cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   239d0:	00000d06 	br	23a08 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   239d4:	e0bffc17 	ldw	r2,-16(fp)
   239d8:	10800217 	ldw	r2,8(r2)
   239dc:	e0fffd17 	ldw	r3,-12(fp)
   239e0:	180d883a 	mov	r6,r3
   239e4:	e17ffe17 	ldw	r5,-8(fp)
   239e8:	1009883a 	mov	r4,r2
   239ec:	00247b40 	call	247b4 <memcmp>
   239f0:	1000021e 	bne	r2,zero,239fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   239f4:	e0bffc17 	ldw	r2,-16(fp)
   239f8:	00000706 	br	23a18 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   239fc:	e0bffc17 	ldw	r2,-16(fp)
   23a00:	10800017 	ldw	r2,0(r2)
   23a04:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23a08:	e0fffc17 	ldw	r3,-16(fp)
   23a0c:	e0bfff17 	ldw	r2,-4(fp)
   23a10:	18bff01e 	bne	r3,r2,239d4 <__alt_data_end+0xfc0239d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   23a14:	0005883a 	mov	r2,zero
}
   23a18:	e037883a 	mov	sp,fp
   23a1c:	dfc00117 	ldw	ra,4(sp)
   23a20:	df000017 	ldw	fp,0(sp)
   23a24:	dec00204 	addi	sp,sp,8
   23a28:	f800283a 	ret

00023a2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23a2c:	deffff04 	addi	sp,sp,-4
   23a30:	df000015 	stw	fp,0(sp)
   23a34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   23a38:	0001883a 	nop
   23a3c:	e037883a 	mov	sp,fp
   23a40:	df000017 	ldw	fp,0(sp)
   23a44:	dec00104 	addi	sp,sp,4
   23a48:	f800283a 	ret

00023a4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23a4c:	defff904 	addi	sp,sp,-28
   23a50:	dfc00615 	stw	ra,24(sp)
   23a54:	df000515 	stw	fp,20(sp)
   23a58:	df000504 	addi	fp,sp,20
   23a5c:	e13ffc15 	stw	r4,-16(fp)
   23a60:	e17ffd15 	stw	r5,-12(fp)
   23a64:	e1bffe15 	stw	r6,-8(fp)
   23a68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   23a6c:	e0800217 	ldw	r2,8(fp)
   23a70:	d8800015 	stw	r2,0(sp)
   23a74:	e1ffff17 	ldw	r7,-4(fp)
   23a78:	e1bffe17 	ldw	r6,-8(fp)
   23a7c:	e17ffd17 	ldw	r5,-12(fp)
   23a80:	e13ffc17 	ldw	r4,-16(fp)
   23a84:	0023bfc0 	call	23bfc <alt_iic_isr_register>
}  
   23a88:	e037883a 	mov	sp,fp
   23a8c:	dfc00117 	ldw	ra,4(sp)
   23a90:	df000017 	ldw	fp,0(sp)
   23a94:	dec00204 	addi	sp,sp,8
   23a98:	f800283a 	ret

00023a9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   23a9c:	defff904 	addi	sp,sp,-28
   23aa0:	df000615 	stw	fp,24(sp)
   23aa4:	df000604 	addi	fp,sp,24
   23aa8:	e13ffe15 	stw	r4,-8(fp)
   23aac:	e17fff15 	stw	r5,-4(fp)
   23ab0:	e0bfff17 	ldw	r2,-4(fp)
   23ab4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23ab8:	0005303a 	rdctl	r2,status
   23abc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23ac0:	e0fffb17 	ldw	r3,-20(fp)
   23ac4:	00bfff84 	movi	r2,-2
   23ac8:	1884703a 	and	r2,r3,r2
   23acc:	1001703a 	wrctl	status,r2
  
  return context;
   23ad0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23ad4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   23ad8:	00c00044 	movi	r3,1
   23adc:	e0bffa17 	ldw	r2,-24(fp)
   23ae0:	1884983a 	sll	r2,r3,r2
   23ae4:	1007883a 	mov	r3,r2
   23ae8:	d0b25517 	ldw	r2,-13996(gp)
   23aec:	1884b03a 	or	r2,r3,r2
   23af0:	d0b25515 	stw	r2,-13996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23af4:	d0b25517 	ldw	r2,-13996(gp)
   23af8:	100170fa 	wrctl	ienable,r2
   23afc:	e0bffc17 	ldw	r2,-16(fp)
   23b00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23b04:	e0bffd17 	ldw	r2,-12(fp)
   23b08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23b0c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   23b10:	0001883a 	nop
}
   23b14:	e037883a 	mov	sp,fp
   23b18:	df000017 	ldw	fp,0(sp)
   23b1c:	dec00104 	addi	sp,sp,4
   23b20:	f800283a 	ret

00023b24 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   23b24:	defff904 	addi	sp,sp,-28
   23b28:	df000615 	stw	fp,24(sp)
   23b2c:	df000604 	addi	fp,sp,24
   23b30:	e13ffe15 	stw	r4,-8(fp)
   23b34:	e17fff15 	stw	r5,-4(fp)
   23b38:	e0bfff17 	ldw	r2,-4(fp)
   23b3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23b40:	0005303a 	rdctl	r2,status
   23b44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23b48:	e0fffb17 	ldw	r3,-20(fp)
   23b4c:	00bfff84 	movi	r2,-2
   23b50:	1884703a 	and	r2,r3,r2
   23b54:	1001703a 	wrctl	status,r2
  
  return context;
   23b58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23b5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   23b60:	00c00044 	movi	r3,1
   23b64:	e0bffa17 	ldw	r2,-24(fp)
   23b68:	1884983a 	sll	r2,r3,r2
   23b6c:	0084303a 	nor	r2,zero,r2
   23b70:	1007883a 	mov	r3,r2
   23b74:	d0b25517 	ldw	r2,-13996(gp)
   23b78:	1884703a 	and	r2,r3,r2
   23b7c:	d0b25515 	stw	r2,-13996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23b80:	d0b25517 	ldw	r2,-13996(gp)
   23b84:	100170fa 	wrctl	ienable,r2
   23b88:	e0bffc17 	ldw	r2,-16(fp)
   23b8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23b90:	e0bffd17 	ldw	r2,-12(fp)
   23b94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23b98:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   23b9c:	0001883a 	nop
}
   23ba0:	e037883a 	mov	sp,fp
   23ba4:	df000017 	ldw	fp,0(sp)
   23ba8:	dec00104 	addi	sp,sp,4
   23bac:	f800283a 	ret

00023bb0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   23bb0:	defffc04 	addi	sp,sp,-16
   23bb4:	df000315 	stw	fp,12(sp)
   23bb8:	df000304 	addi	fp,sp,12
   23bbc:	e13ffe15 	stw	r4,-8(fp)
   23bc0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   23bc4:	000530fa 	rdctl	r2,ienable
   23bc8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   23bcc:	00c00044 	movi	r3,1
   23bd0:	e0bfff17 	ldw	r2,-4(fp)
   23bd4:	1884983a 	sll	r2,r3,r2
   23bd8:	1007883a 	mov	r3,r2
   23bdc:	e0bffd17 	ldw	r2,-12(fp)
   23be0:	1884703a 	and	r2,r3,r2
   23be4:	1004c03a 	cmpne	r2,r2,zero
   23be8:	10803fcc 	andi	r2,r2,255
}
   23bec:	e037883a 	mov	sp,fp
   23bf0:	df000017 	ldw	fp,0(sp)
   23bf4:	dec00104 	addi	sp,sp,4
   23bf8:	f800283a 	ret

00023bfc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23bfc:	defff504 	addi	sp,sp,-44
   23c00:	dfc00a15 	stw	ra,40(sp)
   23c04:	df000915 	stw	fp,36(sp)
   23c08:	df000904 	addi	fp,sp,36
   23c0c:	e13ffc15 	stw	r4,-16(fp)
   23c10:	e17ffd15 	stw	r5,-12(fp)
   23c14:	e1bffe15 	stw	r6,-8(fp)
   23c18:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   23c1c:	00bffa84 	movi	r2,-22
   23c20:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   23c24:	e0bffd17 	ldw	r2,-12(fp)
   23c28:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23c2c:	e0bff817 	ldw	r2,-32(fp)
   23c30:	10800808 	cmpgei	r2,r2,32
   23c34:	1000271e 	bne	r2,zero,23cd4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23c38:	0005303a 	rdctl	r2,status
   23c3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23c40:	e0fffb17 	ldw	r3,-20(fp)
   23c44:	00bfff84 	movi	r2,-2
   23c48:	1884703a 	and	r2,r3,r2
   23c4c:	1001703a 	wrctl	status,r2
  
  return context;
   23c50:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   23c54:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   23c58:	008000f4 	movhi	r2,3
   23c5c:	1087ee04 	addi	r2,r2,8120
   23c60:	e0fff817 	ldw	r3,-32(fp)
   23c64:	180690fa 	slli	r3,r3,3
   23c68:	10c5883a 	add	r2,r2,r3
   23c6c:	e0fffe17 	ldw	r3,-8(fp)
   23c70:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   23c74:	008000f4 	movhi	r2,3
   23c78:	1087ee04 	addi	r2,r2,8120
   23c7c:	e0fff817 	ldw	r3,-32(fp)
   23c80:	180690fa 	slli	r3,r3,3
   23c84:	10c5883a 	add	r2,r2,r3
   23c88:	10800104 	addi	r2,r2,4
   23c8c:	e0ffff17 	ldw	r3,-4(fp)
   23c90:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   23c94:	e0bffe17 	ldw	r2,-8(fp)
   23c98:	10000526 	beq	r2,zero,23cb0 <alt_iic_isr_register+0xb4>
   23c9c:	e0bff817 	ldw	r2,-32(fp)
   23ca0:	100b883a 	mov	r5,r2
   23ca4:	e13ffc17 	ldw	r4,-16(fp)
   23ca8:	0023a9c0 	call	23a9c <alt_ic_irq_enable>
   23cac:	00000406 	br	23cc0 <alt_iic_isr_register+0xc4>
   23cb0:	e0bff817 	ldw	r2,-32(fp)
   23cb4:	100b883a 	mov	r5,r2
   23cb8:	e13ffc17 	ldw	r4,-16(fp)
   23cbc:	0023b240 	call	23b24 <alt_ic_irq_disable>
   23cc0:	e0bff715 	stw	r2,-36(fp)
   23cc4:	e0bffa17 	ldw	r2,-24(fp)
   23cc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23ccc:	e0bff917 	ldw	r2,-28(fp)
   23cd0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   23cd4:	e0bff717 	ldw	r2,-36(fp)
}
   23cd8:	e037883a 	mov	sp,fp
   23cdc:	dfc00117 	ldw	ra,4(sp)
   23ce0:	df000017 	ldw	fp,0(sp)
   23ce4:	dec00204 	addi	sp,sp,8
   23ce8:	f800283a 	ret

00023cec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   23cec:	defff804 	addi	sp,sp,-32
   23cf0:	dfc00715 	stw	ra,28(sp)
   23cf4:	df000615 	stw	fp,24(sp)
   23cf8:	dc000515 	stw	r16,20(sp)
   23cfc:	df000604 	addi	fp,sp,24
   23d00:	e13ffb15 	stw	r4,-20(fp)
   23d04:	e17ffc15 	stw	r5,-16(fp)
   23d08:	e1bffd15 	stw	r6,-12(fp)
   23d0c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   23d10:	e1bffe17 	ldw	r6,-8(fp)
   23d14:	e17ffd17 	ldw	r5,-12(fp)
   23d18:	e13ffc17 	ldw	r4,-16(fp)
   23d1c:	0023f740 	call	23f74 <open>
   23d20:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   23d24:	e0bffa17 	ldw	r2,-24(fp)
   23d28:	10002216 	blt	r2,zero,23db4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   23d2c:	040000f4 	movhi	r16,3
   23d30:	8430b904 	addi	r16,r16,-15644
   23d34:	e0bffa17 	ldw	r2,-24(fp)
   23d38:	01400304 	movi	r5,12
   23d3c:	1009883a 	mov	r4,r2
   23d40:	000d8b80 	call	d8b8 <__mulsi3>
   23d44:	8085883a 	add	r2,r16,r2
   23d48:	10c00017 	ldw	r3,0(r2)
   23d4c:	e0bffb17 	ldw	r2,-20(fp)
   23d50:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23d54:	040000f4 	movhi	r16,3
   23d58:	8430b904 	addi	r16,r16,-15644
   23d5c:	e0bffa17 	ldw	r2,-24(fp)
   23d60:	01400304 	movi	r5,12
   23d64:	1009883a 	mov	r4,r2
   23d68:	000d8b80 	call	d8b8 <__mulsi3>
   23d6c:	8085883a 	add	r2,r16,r2
   23d70:	10800104 	addi	r2,r2,4
   23d74:	10c00017 	ldw	r3,0(r2)
   23d78:	e0bffb17 	ldw	r2,-20(fp)
   23d7c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23d80:	040000f4 	movhi	r16,3
   23d84:	8430b904 	addi	r16,r16,-15644
   23d88:	e0bffa17 	ldw	r2,-24(fp)
   23d8c:	01400304 	movi	r5,12
   23d90:	1009883a 	mov	r4,r2
   23d94:	000d8b80 	call	d8b8 <__mulsi3>
   23d98:	8085883a 	add	r2,r16,r2
   23d9c:	10800204 	addi	r2,r2,8
   23da0:	10c00017 	ldw	r3,0(r2)
   23da4:	e0bffb17 	ldw	r2,-20(fp)
   23da8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23dac:	e13ffa17 	ldw	r4,-24(fp)
   23db0:	00207b40 	call	207b4 <alt_release_fd>
  }
} 
   23db4:	0001883a 	nop
   23db8:	e6ffff04 	addi	sp,fp,-4
   23dbc:	dfc00217 	ldw	ra,8(sp)
   23dc0:	df000117 	ldw	fp,4(sp)
   23dc4:	dc000017 	ldw	r16,0(sp)
   23dc8:	dec00304 	addi	sp,sp,12
   23dcc:	f800283a 	ret

00023dd0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23dd0:	defffb04 	addi	sp,sp,-20
   23dd4:	dfc00415 	stw	ra,16(sp)
   23dd8:	df000315 	stw	fp,12(sp)
   23ddc:	df000304 	addi	fp,sp,12
   23de0:	e13ffd15 	stw	r4,-12(fp)
   23de4:	e17ffe15 	stw	r5,-8(fp)
   23de8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23dec:	01c07fc4 	movi	r7,511
   23df0:	01800044 	movi	r6,1
   23df4:	e17ffd17 	ldw	r5,-12(fp)
   23df8:	010000f4 	movhi	r4,3
   23dfc:	2130bc04 	addi	r4,r4,-15632
   23e00:	0023cec0 	call	23cec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   23e04:	01c07fc4 	movi	r7,511
   23e08:	000d883a 	mov	r6,zero
   23e0c:	e17ffe17 	ldw	r5,-8(fp)
   23e10:	010000f4 	movhi	r4,3
   23e14:	2130b904 	addi	r4,r4,-15644
   23e18:	0023cec0 	call	23cec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   23e1c:	01c07fc4 	movi	r7,511
   23e20:	01800044 	movi	r6,1
   23e24:	e17fff17 	ldw	r5,-4(fp)
   23e28:	010000f4 	movhi	r4,3
   23e2c:	2130bf04 	addi	r4,r4,-15620
   23e30:	0023cec0 	call	23cec <alt_open_fd>
}  
   23e34:	0001883a 	nop
   23e38:	e037883a 	mov	sp,fp
   23e3c:	dfc00117 	ldw	ra,4(sp)
   23e40:	df000017 	ldw	fp,0(sp)
   23e44:	dec00204 	addi	sp,sp,8
   23e48:	f800283a 	ret

00023e4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23e4c:	defffe04 	addi	sp,sp,-8
   23e50:	dfc00115 	stw	ra,4(sp)
   23e54:	df000015 	stw	fp,0(sp)
   23e58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23e5c:	d0a5bd17 	ldw	r2,-26892(gp)
   23e60:	10000326 	beq	r2,zero,23e70 <alt_get_errno+0x24>
   23e64:	d0a5bd17 	ldw	r2,-26892(gp)
   23e68:	103ee83a 	callr	r2
   23e6c:	00000106 	br	23e74 <alt_get_errno+0x28>
   23e70:	d0b24e04 	addi	r2,gp,-14024
}
   23e74:	e037883a 	mov	sp,fp
   23e78:	dfc00117 	ldw	ra,4(sp)
   23e7c:	df000017 	ldw	fp,0(sp)
   23e80:	dec00204 	addi	sp,sp,8
   23e84:	f800283a 	ret

00023e88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   23e88:	defffb04 	addi	sp,sp,-20
   23e8c:	dfc00415 	stw	ra,16(sp)
   23e90:	df000315 	stw	fp,12(sp)
   23e94:	dc000215 	stw	r16,8(sp)
   23e98:	df000304 	addi	fp,sp,12
   23e9c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   23ea0:	e0bffe17 	ldw	r2,-8(fp)
   23ea4:	10800217 	ldw	r2,8(r2)
   23ea8:	10d00034 	orhi	r3,r2,16384
   23eac:	e0bffe17 	ldw	r2,-8(fp)
   23eb0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23eb4:	e03ffd15 	stw	zero,-12(fp)
   23eb8:	00002306 	br	23f48 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23ebc:	040000f4 	movhi	r16,3
   23ec0:	8430b904 	addi	r16,r16,-15644
   23ec4:	e0bffd17 	ldw	r2,-12(fp)
   23ec8:	01400304 	movi	r5,12
   23ecc:	1009883a 	mov	r4,r2
   23ed0:	000d8b80 	call	d8b8 <__mulsi3>
   23ed4:	8085883a 	add	r2,r16,r2
   23ed8:	10c00017 	ldw	r3,0(r2)
   23edc:	e0bffe17 	ldw	r2,-8(fp)
   23ee0:	10800017 	ldw	r2,0(r2)
   23ee4:	1880151e 	bne	r3,r2,23f3c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23ee8:	040000f4 	movhi	r16,3
   23eec:	8430b904 	addi	r16,r16,-15644
   23ef0:	e0bffd17 	ldw	r2,-12(fp)
   23ef4:	01400304 	movi	r5,12
   23ef8:	1009883a 	mov	r4,r2
   23efc:	000d8b80 	call	d8b8 <__mulsi3>
   23f00:	8085883a 	add	r2,r16,r2
   23f04:	10800204 	addi	r2,r2,8
   23f08:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23f0c:	10000b0e 	bge	r2,zero,23f3c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   23f10:	01400304 	movi	r5,12
   23f14:	e13ffd17 	ldw	r4,-12(fp)
   23f18:	000d8b80 	call	d8b8 <__mulsi3>
   23f1c:	1007883a 	mov	r3,r2
   23f20:	008000f4 	movhi	r2,3
   23f24:	10b0b904 	addi	r2,r2,-15644
   23f28:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23f2c:	e0bffe17 	ldw	r2,-8(fp)
   23f30:	18800226 	beq	r3,r2,23f3c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   23f34:	00bffcc4 	movi	r2,-13
   23f38:	00000806 	br	23f5c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23f3c:	e0bffd17 	ldw	r2,-12(fp)
   23f40:	10800044 	addi	r2,r2,1
   23f44:	e0bffd15 	stw	r2,-12(fp)
   23f48:	d0a5bc17 	ldw	r2,-26896(gp)
   23f4c:	1007883a 	mov	r3,r2
   23f50:	e0bffd17 	ldw	r2,-12(fp)
   23f54:	18bfd92e 	bgeu	r3,r2,23ebc <__alt_data_end+0xfc023ebc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   23f58:	0005883a 	mov	r2,zero
}
   23f5c:	e6ffff04 	addi	sp,fp,-4
   23f60:	dfc00217 	ldw	ra,8(sp)
   23f64:	df000117 	ldw	fp,4(sp)
   23f68:	dc000017 	ldw	r16,0(sp)
   23f6c:	dec00304 	addi	sp,sp,12
   23f70:	f800283a 	ret

00023f74 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   23f74:	defff604 	addi	sp,sp,-40
   23f78:	dfc00915 	stw	ra,36(sp)
   23f7c:	df000815 	stw	fp,32(sp)
   23f80:	df000804 	addi	fp,sp,32
   23f84:	e13ffd15 	stw	r4,-12(fp)
   23f88:	e17ffe15 	stw	r5,-8(fp)
   23f8c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   23f90:	00bfffc4 	movi	r2,-1
   23f94:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   23f98:	00bffb44 	movi	r2,-19
   23f9c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   23fa0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   23fa4:	d165ba04 	addi	r5,gp,-26904
   23fa8:	e13ffd17 	ldw	r4,-12(fp)
   23fac:	002399c0 	call	2399c <alt_find_dev>
   23fb0:	e0bff815 	stw	r2,-32(fp)
   23fb4:	e0bff817 	ldw	r2,-32(fp)
   23fb8:	1000051e 	bne	r2,zero,23fd0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   23fbc:	e13ffd17 	ldw	r4,-12(fp)
   23fc0:	00245000 	call	24500 <alt_find_file>
   23fc4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   23fc8:	00800044 	movi	r2,1
   23fcc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   23fd0:	e0bff817 	ldw	r2,-32(fp)
   23fd4:	10002b26 	beq	r2,zero,24084 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   23fd8:	e13ff817 	ldw	r4,-32(fp)
   23fdc:	00246080 	call	24608 <alt_get_fd>
   23fe0:	e0bff915 	stw	r2,-28(fp)
   23fe4:	e0bff917 	ldw	r2,-28(fp)
   23fe8:	1000030e 	bge	r2,zero,23ff8 <open+0x84>
    {
      status = index;
   23fec:	e0bff917 	ldw	r2,-28(fp)
   23ff0:	e0bffa15 	stw	r2,-24(fp)
   23ff4:	00002506 	br	2408c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   23ff8:	01400304 	movi	r5,12
   23ffc:	e13ff917 	ldw	r4,-28(fp)
   24000:	000d8b80 	call	d8b8 <__mulsi3>
   24004:	1007883a 	mov	r3,r2
   24008:	008000f4 	movhi	r2,3
   2400c:	10b0b904 	addi	r2,r2,-15644
   24010:	1885883a 	add	r2,r3,r2
   24014:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24018:	e0fffe17 	ldw	r3,-8(fp)
   2401c:	00900034 	movhi	r2,16384
   24020:	10bfffc4 	addi	r2,r2,-1
   24024:	1886703a 	and	r3,r3,r2
   24028:	e0bffc17 	ldw	r2,-16(fp)
   2402c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24030:	e0bffb17 	ldw	r2,-20(fp)
   24034:	1000051e 	bne	r2,zero,2404c <open+0xd8>
   24038:	e13ffc17 	ldw	r4,-16(fp)
   2403c:	0023e880 	call	23e88 <alt_file_locked>
   24040:	e0bffa15 	stw	r2,-24(fp)
   24044:	e0bffa17 	ldw	r2,-24(fp)
   24048:	10001016 	blt	r2,zero,2408c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2404c:	e0bff817 	ldw	r2,-32(fp)
   24050:	10800317 	ldw	r2,12(r2)
   24054:	10000826 	beq	r2,zero,24078 <open+0x104>
   24058:	e0bff817 	ldw	r2,-32(fp)
   2405c:	10800317 	ldw	r2,12(r2)
   24060:	e1ffff17 	ldw	r7,-4(fp)
   24064:	e1bffe17 	ldw	r6,-8(fp)
   24068:	e17ffd17 	ldw	r5,-12(fp)
   2406c:	e13ffc17 	ldw	r4,-16(fp)
   24070:	103ee83a 	callr	r2
   24074:	00000106 	br	2407c <open+0x108>
   24078:	0005883a 	mov	r2,zero
   2407c:	e0bffa15 	stw	r2,-24(fp)
   24080:	00000206 	br	2408c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24084:	00bffb44 	movi	r2,-19
   24088:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2408c:	e0bffa17 	ldw	r2,-24(fp)
   24090:	1000090e 	bge	r2,zero,240b8 <open+0x144>
  {
    alt_release_fd (index);  
   24094:	e13ff917 	ldw	r4,-28(fp)
   24098:	00207b40 	call	207b4 <alt_release_fd>
    ALT_ERRNO = -status;
   2409c:	0023e4c0 	call	23e4c <alt_get_errno>
   240a0:	1007883a 	mov	r3,r2
   240a4:	e0bffa17 	ldw	r2,-24(fp)
   240a8:	0085c83a 	sub	r2,zero,r2
   240ac:	18800015 	stw	r2,0(r3)
    return -1;
   240b0:	00bfffc4 	movi	r2,-1
   240b4:	00000106 	br	240bc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   240b8:	e0bff917 	ldw	r2,-28(fp)
}
   240bc:	e037883a 	mov	sp,fp
   240c0:	dfc00117 	ldw	ra,4(sp)
   240c4:	df000017 	ldw	fp,0(sp)
   240c8:	dec00204 	addi	sp,sp,8
   240cc:	f800283a 	ret

000240d0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   240d0:	defff204 	addi	sp,sp,-56
   240d4:	dfc00a15 	stw	ra,40(sp)
   240d8:	df000915 	stw	fp,36(sp)
   240dc:	df000904 	addi	fp,sp,36
   240e0:	e13fff15 	stw	r4,-4(fp)
   240e4:	e1400215 	stw	r5,8(fp)
   240e8:	e1800315 	stw	r6,12(fp)
   240ec:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   240f0:	e0800204 	addi	r2,fp,8
   240f4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   240f8:	e0bfff17 	ldw	r2,-4(fp)
   240fc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   24100:	00006f06 	br	242c0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   24104:	e0bff807 	ldb	r2,-32(fp)
   24108:	10800960 	cmpeqi	r2,r2,37
   2410c:	1000041e 	bne	r2,zero,24120 <alt_printf+0x50>
        {
            alt_putchar(c);
   24110:	e0bff807 	ldb	r2,-32(fp)
   24114:	1009883a 	mov	r4,r2
   24118:	00242fc0 	call	242fc <alt_putchar>
   2411c:	00006806 	br	242c0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   24120:	e0bff717 	ldw	r2,-36(fp)
   24124:	10c00044 	addi	r3,r2,1
   24128:	e0fff715 	stw	r3,-36(fp)
   2412c:	10800003 	ldbu	r2,0(r2)
   24130:	e0bff805 	stb	r2,-32(fp)
   24134:	e0bff807 	ldb	r2,-32(fp)
   24138:	10006926 	beq	r2,zero,242e0 <alt_printf+0x210>
            {
                if (c == '%')
   2413c:	e0bff807 	ldb	r2,-32(fp)
   24140:	10800958 	cmpnei	r2,r2,37
   24144:	1000041e 	bne	r2,zero,24158 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   24148:	e0bff807 	ldb	r2,-32(fp)
   2414c:	1009883a 	mov	r4,r2
   24150:	00242fc0 	call	242fc <alt_putchar>
   24154:	00005a06 	br	242c0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   24158:	e0bff807 	ldb	r2,-32(fp)
   2415c:	108018d8 	cmpnei	r2,r2,99
   24160:	1000081e 	bne	r2,zero,24184 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   24164:	e0bffe17 	ldw	r2,-8(fp)
   24168:	10c00104 	addi	r3,r2,4
   2416c:	e0fffe15 	stw	r3,-8(fp)
   24170:	10800017 	ldw	r2,0(r2)
   24174:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   24178:	e13ffd17 	ldw	r4,-12(fp)
   2417c:	00242fc0 	call	242fc <alt_putchar>
   24180:	00004f06 	br	242c0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   24184:	e0bff807 	ldb	r2,-32(fp)
   24188:	10801e18 	cmpnei	r2,r2,120
   2418c:	1000341e 	bne	r2,zero,24260 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   24190:	e0bffe17 	ldw	r2,-8(fp)
   24194:	10c00104 	addi	r3,r2,4
   24198:	e0fffe15 	stw	r3,-8(fp)
   2419c:	10800017 	ldw	r2,0(r2)
   241a0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   241a4:	e0bffb17 	ldw	r2,-20(fp)
   241a8:	1000031e 	bne	r2,zero,241b8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   241ac:	01000c04 	movi	r4,48
   241b0:	00242fc0 	call	242fc <alt_putchar>
                        continue;
   241b4:	00004206 	br	242c0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   241b8:	00800704 	movi	r2,28
   241bc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   241c0:	00000306 	br	241d0 <alt_printf+0x100>
                        digit_shift -= 4;
   241c4:	e0bff917 	ldw	r2,-28(fp)
   241c8:	10bfff04 	addi	r2,r2,-4
   241cc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   241d0:	00c003c4 	movi	r3,15
   241d4:	e0bff917 	ldw	r2,-28(fp)
   241d8:	1884983a 	sll	r2,r3,r2
   241dc:	1007883a 	mov	r3,r2
   241e0:	e0bffb17 	ldw	r2,-20(fp)
   241e4:	1884703a 	and	r2,r3,r2
   241e8:	103ff626 	beq	r2,zero,241c4 <__alt_data_end+0xfc0241c4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   241ec:	00001906 	br	24254 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   241f0:	00c003c4 	movi	r3,15
   241f4:	e0bff917 	ldw	r2,-28(fp)
   241f8:	1884983a 	sll	r2,r3,r2
   241fc:	1007883a 	mov	r3,r2
   24200:	e0bffb17 	ldw	r2,-20(fp)
   24204:	1886703a 	and	r3,r3,r2
   24208:	e0bff917 	ldw	r2,-28(fp)
   2420c:	1884d83a 	srl	r2,r3,r2
   24210:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   24214:	e0bffc17 	ldw	r2,-16(fp)
   24218:	108002a8 	cmpgeui	r2,r2,10
   2421c:	1000041e 	bne	r2,zero,24230 <alt_printf+0x160>
                            c = '0' + digit;
   24220:	e0bffc17 	ldw	r2,-16(fp)
   24224:	10800c04 	addi	r2,r2,48
   24228:	e0bff805 	stb	r2,-32(fp)
   2422c:	00000306 	br	2423c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   24230:	e0bffc17 	ldw	r2,-16(fp)
   24234:	108015c4 	addi	r2,r2,87
   24238:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   2423c:	e0bff807 	ldb	r2,-32(fp)
   24240:	1009883a 	mov	r4,r2
   24244:	00242fc0 	call	242fc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   24248:	e0bff917 	ldw	r2,-28(fp)
   2424c:	10bfff04 	addi	r2,r2,-4
   24250:	e0bff915 	stw	r2,-28(fp)
   24254:	e0bff917 	ldw	r2,-28(fp)
   24258:	103fe50e 	bge	r2,zero,241f0 <__alt_data_end+0xfc0241f0>
   2425c:	00001806 	br	242c0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   24260:	e0bff807 	ldb	r2,-32(fp)
   24264:	10801cd8 	cmpnei	r2,r2,115
   24268:	1000151e 	bne	r2,zero,242c0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   2426c:	e0bffe17 	ldw	r2,-8(fp)
   24270:	10c00104 	addi	r3,r2,4
   24274:	e0fffe15 	stw	r3,-8(fp)
   24278:	10800017 	ldw	r2,0(r2)
   2427c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   24280:	00000906 	br	242a8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   24284:	e0bffa17 	ldw	r2,-24(fp)
   24288:	10c00044 	addi	r3,r2,1
   2428c:	e0fffa15 	stw	r3,-24(fp)
   24290:	10800003 	ldbu	r2,0(r2)
   24294:	10803fcc 	andi	r2,r2,255
   24298:	1080201c 	xori	r2,r2,128
   2429c:	10bfe004 	addi	r2,r2,-128
   242a0:	1009883a 	mov	r4,r2
   242a4:	00242fc0 	call	242fc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   242a8:	e0bffa17 	ldw	r2,-24(fp)
   242ac:	10800003 	ldbu	r2,0(r2)
   242b0:	10803fcc 	andi	r2,r2,255
   242b4:	1080201c 	xori	r2,r2,128
   242b8:	10bfe004 	addi	r2,r2,-128
   242bc:	103ff11e 	bne	r2,zero,24284 <__alt_data_end+0xfc024284>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   242c0:	e0bff717 	ldw	r2,-36(fp)
   242c4:	10c00044 	addi	r3,r2,1
   242c8:	e0fff715 	stw	r3,-36(fp)
   242cc:	10800003 	ldbu	r2,0(r2)
   242d0:	e0bff805 	stb	r2,-32(fp)
   242d4:	e0bff807 	ldb	r2,-32(fp)
   242d8:	103f8a1e 	bne	r2,zero,24104 <__alt_data_end+0xfc024104>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   242dc:	00000106 	br	242e4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   242e0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   242e4:	0001883a 	nop
   242e8:	e037883a 	mov	sp,fp
   242ec:	dfc00117 	ldw	ra,4(sp)
   242f0:	df000017 	ldw	fp,0(sp)
   242f4:	dec00504 	addi	sp,sp,20
   242f8:	f800283a 	ret

000242fc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   242fc:	defffd04 	addi	sp,sp,-12
   24300:	dfc00215 	stw	ra,8(sp)
   24304:	df000115 	stw	fp,4(sp)
   24308:	df000104 	addi	fp,sp,4
   2430c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   24310:	d0a5b317 	ldw	r2,-26932(gp)
   24314:	10800217 	ldw	r2,8(r2)
   24318:	100b883a 	mov	r5,r2
   2431c:	e13fff17 	ldw	r4,-4(fp)
   24320:	0018d400 	call	18d40 <putc>
#endif
#endif
}
   24324:	e037883a 	mov	sp,fp
   24328:	dfc00117 	ldw	ra,4(sp)
   2432c:	df000017 	ldw	fp,0(sp)
   24330:	dec00204 	addi	sp,sp,8
   24334:	f800283a 	ret

00024338 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24338:	defffa04 	addi	sp,sp,-24
   2433c:	df000515 	stw	fp,20(sp)
   24340:	df000504 	addi	fp,sp,20
   24344:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24348:	0005303a 	rdctl	r2,status
   2434c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24350:	e0fffc17 	ldw	r3,-16(fp)
   24354:	00bfff84 	movi	r2,-2
   24358:	1884703a 	and	r2,r3,r2
   2435c:	1001703a 	wrctl	status,r2
  
  return context;
   24360:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24364:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24368:	e0bfff17 	ldw	r2,-4(fp)
   2436c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24370:	e0bffd17 	ldw	r2,-12(fp)
   24374:	10800017 	ldw	r2,0(r2)
   24378:	e0fffd17 	ldw	r3,-12(fp)
   2437c:	18c00117 	ldw	r3,4(r3)
   24380:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24384:	e0bffd17 	ldw	r2,-12(fp)
   24388:	10800117 	ldw	r2,4(r2)
   2438c:	e0fffd17 	ldw	r3,-12(fp)
   24390:	18c00017 	ldw	r3,0(r3)
   24394:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24398:	e0bffd17 	ldw	r2,-12(fp)
   2439c:	e0fffd17 	ldw	r3,-12(fp)
   243a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   243a4:	e0bffd17 	ldw	r2,-12(fp)
   243a8:	e0fffd17 	ldw	r3,-12(fp)
   243ac:	10c00015 	stw	r3,0(r2)
   243b0:	e0bffb17 	ldw	r2,-20(fp)
   243b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   243b8:	e0bffe17 	ldw	r2,-8(fp)
   243bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   243c0:	0001883a 	nop
   243c4:	e037883a 	mov	sp,fp
   243c8:	df000017 	ldw	fp,0(sp)
   243cc:	dec00104 	addi	sp,sp,4
   243d0:	f800283a 	ret

000243d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   243d4:	defffb04 	addi	sp,sp,-20
   243d8:	dfc00415 	stw	ra,16(sp)
   243dc:	df000315 	stw	fp,12(sp)
   243e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   243e4:	d0a5c217 	ldw	r2,-26872(gp)
   243e8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   243ec:	d0b25717 	ldw	r2,-13988(gp)
   243f0:	10800044 	addi	r2,r2,1
   243f4:	d0b25715 	stw	r2,-13988(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   243f8:	00002e06 	br	244b4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   243fc:	e0bffd17 	ldw	r2,-12(fp)
   24400:	10800017 	ldw	r2,0(r2)
   24404:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24408:	e0bffd17 	ldw	r2,-12(fp)
   2440c:	10800403 	ldbu	r2,16(r2)
   24410:	10803fcc 	andi	r2,r2,255
   24414:	10000426 	beq	r2,zero,24428 <alt_tick+0x54>
   24418:	d0b25717 	ldw	r2,-13988(gp)
   2441c:	1000021e 	bne	r2,zero,24428 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   24420:	e0bffd17 	ldw	r2,-12(fp)
   24424:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24428:	e0bffd17 	ldw	r2,-12(fp)
   2442c:	10800217 	ldw	r2,8(r2)
   24430:	d0f25717 	ldw	r3,-13988(gp)
   24434:	18801d36 	bltu	r3,r2,244ac <alt_tick+0xd8>
   24438:	e0bffd17 	ldw	r2,-12(fp)
   2443c:	10800403 	ldbu	r2,16(r2)
   24440:	10803fcc 	andi	r2,r2,255
   24444:	1000191e 	bne	r2,zero,244ac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24448:	e0bffd17 	ldw	r2,-12(fp)
   2444c:	10800317 	ldw	r2,12(r2)
   24450:	e0fffd17 	ldw	r3,-12(fp)
   24454:	18c00517 	ldw	r3,20(r3)
   24458:	1809883a 	mov	r4,r3
   2445c:	103ee83a 	callr	r2
   24460:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24464:	e0bfff17 	ldw	r2,-4(fp)
   24468:	1000031e 	bne	r2,zero,24478 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2446c:	e13ffd17 	ldw	r4,-12(fp)
   24470:	00243380 	call	24338 <alt_alarm_stop>
   24474:	00000d06 	br	244ac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24478:	e0bffd17 	ldw	r2,-12(fp)
   2447c:	10c00217 	ldw	r3,8(r2)
   24480:	e0bfff17 	ldw	r2,-4(fp)
   24484:	1887883a 	add	r3,r3,r2
   24488:	e0bffd17 	ldw	r2,-12(fp)
   2448c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   24490:	e0bffd17 	ldw	r2,-12(fp)
   24494:	10c00217 	ldw	r3,8(r2)
   24498:	d0b25717 	ldw	r2,-13988(gp)
   2449c:	1880032e 	bgeu	r3,r2,244ac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   244a0:	e0bffd17 	ldw	r2,-12(fp)
   244a4:	00c00044 	movi	r3,1
   244a8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   244ac:	e0bffe17 	ldw	r2,-8(fp)
   244b0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   244b4:	e0fffd17 	ldw	r3,-12(fp)
   244b8:	d0a5c204 	addi	r2,gp,-26872
   244bc:	18bfcf1e 	bne	r3,r2,243fc <__alt_data_end+0xfc0243fc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   244c0:	0001883a 	nop
}
   244c4:	0001883a 	nop
   244c8:	e037883a 	mov	sp,fp
   244cc:	dfc00117 	ldw	ra,4(sp)
   244d0:	df000017 	ldw	fp,0(sp)
   244d4:	dec00204 	addi	sp,sp,8
   244d8:	f800283a 	ret

000244dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   244dc:	deffff04 	addi	sp,sp,-4
   244e0:	df000015 	stw	fp,0(sp)
   244e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   244e8:	000170fa 	wrctl	ienable,zero
}
   244ec:	0001883a 	nop
   244f0:	e037883a 	mov	sp,fp
   244f4:	df000017 	ldw	fp,0(sp)
   244f8:	dec00104 	addi	sp,sp,4
   244fc:	f800283a 	ret

00024500 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24500:	defffb04 	addi	sp,sp,-20
   24504:	dfc00415 	stw	ra,16(sp)
   24508:	df000315 	stw	fp,12(sp)
   2450c:	df000304 	addi	fp,sp,12
   24510:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24514:	d0a5b817 	ldw	r2,-26912(gp)
   24518:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2451c:	00003106 	br	245e4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24520:	e0bffd17 	ldw	r2,-12(fp)
   24524:	10800217 	ldw	r2,8(r2)
   24528:	1009883a 	mov	r4,r2
   2452c:	00105200 	call	10520 <strlen>
   24530:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24534:	e0bffd17 	ldw	r2,-12(fp)
   24538:	10c00217 	ldw	r3,8(r2)
   2453c:	e0bffe17 	ldw	r2,-8(fp)
   24540:	10bfffc4 	addi	r2,r2,-1
   24544:	1885883a 	add	r2,r3,r2
   24548:	10800003 	ldbu	r2,0(r2)
   2454c:	10803fcc 	andi	r2,r2,255
   24550:	1080201c 	xori	r2,r2,128
   24554:	10bfe004 	addi	r2,r2,-128
   24558:	10800bd8 	cmpnei	r2,r2,47
   2455c:	1000031e 	bne	r2,zero,2456c <alt_find_file+0x6c>
    {
      len -= 1;
   24560:	e0bffe17 	ldw	r2,-8(fp)
   24564:	10bfffc4 	addi	r2,r2,-1
   24568:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2456c:	e0bffe17 	ldw	r2,-8(fp)
   24570:	e0ffff17 	ldw	r3,-4(fp)
   24574:	1885883a 	add	r2,r3,r2
   24578:	10800003 	ldbu	r2,0(r2)
   2457c:	10803fcc 	andi	r2,r2,255
   24580:	1080201c 	xori	r2,r2,128
   24584:	10bfe004 	addi	r2,r2,-128
   24588:	10800be0 	cmpeqi	r2,r2,47
   2458c:	1000081e 	bne	r2,zero,245b0 <alt_find_file+0xb0>
   24590:	e0bffe17 	ldw	r2,-8(fp)
   24594:	e0ffff17 	ldw	r3,-4(fp)
   24598:	1885883a 	add	r2,r3,r2
   2459c:	10800003 	ldbu	r2,0(r2)
   245a0:	10803fcc 	andi	r2,r2,255
   245a4:	1080201c 	xori	r2,r2,128
   245a8:	10bfe004 	addi	r2,r2,-128
   245ac:	10000a1e 	bne	r2,zero,245d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   245b0:	e0bffd17 	ldw	r2,-12(fp)
   245b4:	10800217 	ldw	r2,8(r2)
   245b8:	e0fffe17 	ldw	r3,-8(fp)
   245bc:	180d883a 	mov	r6,r3
   245c0:	e17fff17 	ldw	r5,-4(fp)
   245c4:	1009883a 	mov	r4,r2
   245c8:	00247b40 	call	247b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   245cc:	1000021e 	bne	r2,zero,245d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   245d0:	e0bffd17 	ldw	r2,-12(fp)
   245d4:	00000706 	br	245f4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   245d8:	e0bffd17 	ldw	r2,-12(fp)
   245dc:	10800017 	ldw	r2,0(r2)
   245e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   245e4:	e0fffd17 	ldw	r3,-12(fp)
   245e8:	d0a5b804 	addi	r2,gp,-26912
   245ec:	18bfcc1e 	bne	r3,r2,24520 <__alt_data_end+0xfc024520>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   245f0:	0005883a 	mov	r2,zero
}
   245f4:	e037883a 	mov	sp,fp
   245f8:	dfc00117 	ldw	ra,4(sp)
   245fc:	df000017 	ldw	fp,0(sp)
   24600:	dec00204 	addi	sp,sp,8
   24604:	f800283a 	ret

00024608 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24608:	defffa04 	addi	sp,sp,-24
   2460c:	dfc00515 	stw	ra,20(sp)
   24610:	df000415 	stw	fp,16(sp)
   24614:	dc000315 	stw	r16,12(sp)
   24618:	df000404 	addi	fp,sp,16
   2461c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   24620:	00bffa04 	movi	r2,-24
   24624:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24628:	e03ffc15 	stw	zero,-16(fp)
   2462c:	00001d06 	br	246a4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   24630:	040000f4 	movhi	r16,3
   24634:	8430b904 	addi	r16,r16,-15644
   24638:	e0bffc17 	ldw	r2,-16(fp)
   2463c:	01400304 	movi	r5,12
   24640:	1009883a 	mov	r4,r2
   24644:	000d8b80 	call	d8b8 <__mulsi3>
   24648:	8085883a 	add	r2,r16,r2
   2464c:	10800017 	ldw	r2,0(r2)
   24650:	1000111e 	bne	r2,zero,24698 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   24654:	040000f4 	movhi	r16,3
   24658:	8430b904 	addi	r16,r16,-15644
   2465c:	e0bffc17 	ldw	r2,-16(fp)
   24660:	01400304 	movi	r5,12
   24664:	1009883a 	mov	r4,r2
   24668:	000d8b80 	call	d8b8 <__mulsi3>
   2466c:	8085883a 	add	r2,r16,r2
   24670:	e0fffe17 	ldw	r3,-8(fp)
   24674:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24678:	d0e5bc17 	ldw	r3,-26896(gp)
   2467c:	e0bffc17 	ldw	r2,-16(fp)
   24680:	1880020e 	bge	r3,r2,2468c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   24684:	e0bffc17 	ldw	r2,-16(fp)
   24688:	d0a5bc15 	stw	r2,-26896(gp)
      }
      rc = i;
   2468c:	e0bffc17 	ldw	r2,-16(fp)
   24690:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   24694:	00000606 	br	246b0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24698:	e0bffc17 	ldw	r2,-16(fp)
   2469c:	10800044 	addi	r2,r2,1
   246a0:	e0bffc15 	stw	r2,-16(fp)
   246a4:	e0bffc17 	ldw	r2,-16(fp)
   246a8:	10800810 	cmplti	r2,r2,32
   246ac:	103fe01e 	bne	r2,zero,24630 <__alt_data_end+0xfc024630>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   246b0:	e0bffd17 	ldw	r2,-12(fp)
}
   246b4:	e6ffff04 	addi	sp,fp,-4
   246b8:	dfc00217 	ldw	ra,8(sp)
   246bc:	df000117 	ldw	fp,4(sp)
   246c0:	dc000017 	ldw	r16,0(sp)
   246c4:	dec00304 	addi	sp,sp,12
   246c8:	f800283a 	ret

000246cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   246cc:	defffe04 	addi	sp,sp,-8
   246d0:	df000115 	stw	fp,4(sp)
   246d4:	df000104 	addi	fp,sp,4
   246d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   246dc:	e0bfff17 	ldw	r2,-4(fp)
   246e0:	10bffe84 	addi	r2,r2,-6
   246e4:	10c00428 	cmpgeui	r3,r2,16
   246e8:	18001a1e 	bne	r3,zero,24754 <alt_exception_cause_generated_bad_addr+0x88>
   246ec:	100690ba 	slli	r3,r2,2
   246f0:	008000b4 	movhi	r2,2
   246f4:	1091c104 	addi	r2,r2,18180
   246f8:	1885883a 	add	r2,r3,r2
   246fc:	10800017 	ldw	r2,0(r2)
   24700:	1000683a 	jmp	r2
   24704:	00024744 	movi	zero,2333
   24708:	00024744 	movi	zero,2333
   2470c:	00024754 	movui	zero,2333
   24710:	00024754 	movui	zero,2333
   24714:	00024754 	movui	zero,2333
   24718:	00024744 	movi	zero,2333
   2471c:	0002474c 	andi	zero,zero,2333
   24720:	00024754 	movui	zero,2333
   24724:	00024744 	movi	zero,2333
   24728:	00024744 	movi	zero,2333
   2472c:	00024754 	movui	zero,2333
   24730:	00024744 	movi	zero,2333
   24734:	0002474c 	andi	zero,zero,2333
   24738:	00024754 	movui	zero,2333
   2473c:	00024754 	movui	zero,2333
   24740:	00024744 	movi	zero,2333
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24744:	00800044 	movi	r2,1
   24748:	00000306 	br	24758 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2474c:	0005883a 	mov	r2,zero
   24750:	00000106 	br	24758 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   24754:	0005883a 	mov	r2,zero
  }
}
   24758:	e037883a 	mov	sp,fp
   2475c:	df000017 	ldw	fp,0(sp)
   24760:	dec00104 	addi	sp,sp,4
   24764:	f800283a 	ret

00024768 <atexit>:
   24768:	200b883a 	mov	r5,r4
   2476c:	000f883a 	mov	r7,zero
   24770:	000d883a 	mov	r6,zero
   24774:	0009883a 	mov	r4,zero
   24778:	00248301 	jmpi	24830 <__register_exitproc>

0002477c <exit>:
   2477c:	defffe04 	addi	sp,sp,-8
   24780:	000b883a 	mov	r5,zero
   24784:	dc000015 	stw	r16,0(sp)
   24788:	dfc00115 	stw	ra,4(sp)
   2478c:	2021883a 	mov	r16,r4
   24790:	00249480 	call	24948 <__call_exitprocs>
   24794:	008000f4 	movhi	r2,3
   24798:	10baf104 	addi	r2,r2,-5180
   2479c:	11000017 	ldw	r4,0(r2)
   247a0:	20800f17 	ldw	r2,60(r4)
   247a4:	10000126 	beq	r2,zero,247ac <exit+0x30>
   247a8:	103ee83a 	callr	r2
   247ac:	8009883a 	mov	r4,r16
   247b0:	00200100 	call	20010 <_exit>

000247b4 <memcmp>:
   247b4:	01c000c4 	movi	r7,3
   247b8:	3980192e 	bgeu	r7,r6,24820 <memcmp+0x6c>
   247bc:	2144b03a 	or	r2,r4,r5
   247c0:	11c4703a 	and	r2,r2,r7
   247c4:	10000f26 	beq	r2,zero,24804 <memcmp+0x50>
   247c8:	20800003 	ldbu	r2,0(r4)
   247cc:	28c00003 	ldbu	r3,0(r5)
   247d0:	10c0151e 	bne	r2,r3,24828 <memcmp+0x74>
   247d4:	31bfff84 	addi	r6,r6,-2
   247d8:	01ffffc4 	movi	r7,-1
   247dc:	00000406 	br	247f0 <memcmp+0x3c>
   247e0:	20800003 	ldbu	r2,0(r4)
   247e4:	28c00003 	ldbu	r3,0(r5)
   247e8:	31bfffc4 	addi	r6,r6,-1
   247ec:	10c00e1e 	bne	r2,r3,24828 <memcmp+0x74>
   247f0:	21000044 	addi	r4,r4,1
   247f4:	29400044 	addi	r5,r5,1
   247f8:	31fff91e 	bne	r6,r7,247e0 <__alt_data_end+0xfc0247e0>
   247fc:	0005883a 	mov	r2,zero
   24800:	f800283a 	ret
   24804:	20c00017 	ldw	r3,0(r4)
   24808:	28800017 	ldw	r2,0(r5)
   2480c:	18bfee1e 	bne	r3,r2,247c8 <__alt_data_end+0xfc0247c8>
   24810:	31bfff04 	addi	r6,r6,-4
   24814:	21000104 	addi	r4,r4,4
   24818:	29400104 	addi	r5,r5,4
   2481c:	39bff936 	bltu	r7,r6,24804 <__alt_data_end+0xfc024804>
   24820:	303fe91e 	bne	r6,zero,247c8 <__alt_data_end+0xfc0247c8>
   24824:	003ff506 	br	247fc <__alt_data_end+0xfc0247fc>
   24828:	10c5c83a 	sub	r2,r2,r3
   2482c:	f800283a 	ret

00024830 <__register_exitproc>:
   24830:	defffa04 	addi	sp,sp,-24
   24834:	dc000315 	stw	r16,12(sp)
   24838:	040000f4 	movhi	r16,3
   2483c:	843af104 	addi	r16,r16,-5180
   24840:	80c00017 	ldw	r3,0(r16)
   24844:	dc400415 	stw	r17,16(sp)
   24848:	dfc00515 	stw	ra,20(sp)
   2484c:	18805217 	ldw	r2,328(r3)
   24850:	2023883a 	mov	r17,r4
   24854:	10003726 	beq	r2,zero,24934 <__register_exitproc+0x104>
   24858:	10c00117 	ldw	r3,4(r2)
   2485c:	010007c4 	movi	r4,31
   24860:	20c00e16 	blt	r4,r3,2489c <__register_exitproc+0x6c>
   24864:	1a000044 	addi	r8,r3,1
   24868:	8800221e 	bne	r17,zero,248f4 <__register_exitproc+0xc4>
   2486c:	18c00084 	addi	r3,r3,2
   24870:	18c7883a 	add	r3,r3,r3
   24874:	18c7883a 	add	r3,r3,r3
   24878:	12000115 	stw	r8,4(r2)
   2487c:	10c7883a 	add	r3,r2,r3
   24880:	19400015 	stw	r5,0(r3)
   24884:	0005883a 	mov	r2,zero
   24888:	dfc00517 	ldw	ra,20(sp)
   2488c:	dc400417 	ldw	r17,16(sp)
   24890:	dc000317 	ldw	r16,12(sp)
   24894:	dec00604 	addi	sp,sp,24
   24898:	f800283a 	ret
   2489c:	00800074 	movhi	r2,1
   248a0:	10bd0904 	addi	r2,r2,-3036
   248a4:	10002626 	beq	r2,zero,24940 <__register_exitproc+0x110>
   248a8:	01006404 	movi	r4,400
   248ac:	d9400015 	stw	r5,0(sp)
   248b0:	d9800115 	stw	r6,4(sp)
   248b4:	d9c00215 	stw	r7,8(sp)
   248b8:	000f4240 	call	f424 <malloc>
   248bc:	d9400017 	ldw	r5,0(sp)
   248c0:	d9800117 	ldw	r6,4(sp)
   248c4:	d9c00217 	ldw	r7,8(sp)
   248c8:	10001d26 	beq	r2,zero,24940 <__register_exitproc+0x110>
   248cc:	81000017 	ldw	r4,0(r16)
   248d0:	10000115 	stw	zero,4(r2)
   248d4:	02000044 	movi	r8,1
   248d8:	22405217 	ldw	r9,328(r4)
   248dc:	0007883a 	mov	r3,zero
   248e0:	12400015 	stw	r9,0(r2)
   248e4:	20805215 	stw	r2,328(r4)
   248e8:	10006215 	stw	zero,392(r2)
   248ec:	10006315 	stw	zero,396(r2)
   248f0:	883fde26 	beq	r17,zero,2486c <__alt_data_end+0xfc02486c>
   248f4:	18c9883a 	add	r4,r3,r3
   248f8:	2109883a 	add	r4,r4,r4
   248fc:	1109883a 	add	r4,r2,r4
   24900:	21802215 	stw	r6,136(r4)
   24904:	01800044 	movi	r6,1
   24908:	12406217 	ldw	r9,392(r2)
   2490c:	30cc983a 	sll	r6,r6,r3
   24910:	4992b03a 	or	r9,r9,r6
   24914:	12406215 	stw	r9,392(r2)
   24918:	21c04215 	stw	r7,264(r4)
   2491c:	01000084 	movi	r4,2
   24920:	893fd21e 	bne	r17,r4,2486c <__alt_data_end+0xfc02486c>
   24924:	11006317 	ldw	r4,396(r2)
   24928:	218cb03a 	or	r6,r4,r6
   2492c:	11806315 	stw	r6,396(r2)
   24930:	003fce06 	br	2486c <__alt_data_end+0xfc02486c>
   24934:	18805304 	addi	r2,r3,332
   24938:	18805215 	stw	r2,328(r3)
   2493c:	003fc606 	br	24858 <__alt_data_end+0xfc024858>
   24940:	00bfffc4 	movi	r2,-1
   24944:	003fd006 	br	24888 <__alt_data_end+0xfc024888>

00024948 <__call_exitprocs>:
   24948:	defff504 	addi	sp,sp,-44
   2494c:	df000915 	stw	fp,36(sp)
   24950:	dd400615 	stw	r21,24(sp)
   24954:	dc800315 	stw	r18,12(sp)
   24958:	dfc00a15 	stw	ra,40(sp)
   2495c:	ddc00815 	stw	r23,32(sp)
   24960:	dd800715 	stw	r22,28(sp)
   24964:	dd000515 	stw	r20,20(sp)
   24968:	dcc00415 	stw	r19,16(sp)
   2496c:	dc400215 	stw	r17,8(sp)
   24970:	dc000115 	stw	r16,4(sp)
   24974:	d9000015 	stw	r4,0(sp)
   24978:	2839883a 	mov	fp,r5
   2497c:	04800044 	movi	r18,1
   24980:	057fffc4 	movi	r21,-1
   24984:	008000f4 	movhi	r2,3
   24988:	10baf104 	addi	r2,r2,-5180
   2498c:	12000017 	ldw	r8,0(r2)
   24990:	45005217 	ldw	r20,328(r8)
   24994:	44c05204 	addi	r19,r8,328
   24998:	a0001c26 	beq	r20,zero,24a0c <__call_exitprocs+0xc4>
   2499c:	a0800117 	ldw	r2,4(r20)
   249a0:	15ffffc4 	addi	r23,r2,-1
   249a4:	b8000d16 	blt	r23,zero,249dc <__call_exitprocs+0x94>
   249a8:	14000044 	addi	r16,r2,1
   249ac:	8421883a 	add	r16,r16,r16
   249b0:	8421883a 	add	r16,r16,r16
   249b4:	84402004 	addi	r17,r16,128
   249b8:	a463883a 	add	r17,r20,r17
   249bc:	a421883a 	add	r16,r20,r16
   249c0:	e0001e26 	beq	fp,zero,24a3c <__call_exitprocs+0xf4>
   249c4:	80804017 	ldw	r2,256(r16)
   249c8:	e0801c26 	beq	fp,r2,24a3c <__call_exitprocs+0xf4>
   249cc:	bdffffc4 	addi	r23,r23,-1
   249d0:	843fff04 	addi	r16,r16,-4
   249d4:	8c7fff04 	addi	r17,r17,-4
   249d8:	bd7ff91e 	bne	r23,r21,249c0 <__alt_data_end+0xfc0249c0>
   249dc:	00800074 	movhi	r2,1
   249e0:	10bd0e04 	addi	r2,r2,-3016
   249e4:	10000926 	beq	r2,zero,24a0c <__call_exitprocs+0xc4>
   249e8:	a0800117 	ldw	r2,4(r20)
   249ec:	1000301e 	bne	r2,zero,24ab0 <__call_exitprocs+0x168>
   249f0:	a0800017 	ldw	r2,0(r20)
   249f4:	10003226 	beq	r2,zero,24ac0 <__call_exitprocs+0x178>
   249f8:	a009883a 	mov	r4,r20
   249fc:	98800015 	stw	r2,0(r19)
   24a00:	000f4380 	call	f438 <free>
   24a04:	9d000017 	ldw	r20,0(r19)
   24a08:	a03fe41e 	bne	r20,zero,2499c <__alt_data_end+0xfc02499c>
   24a0c:	dfc00a17 	ldw	ra,40(sp)
   24a10:	df000917 	ldw	fp,36(sp)
   24a14:	ddc00817 	ldw	r23,32(sp)
   24a18:	dd800717 	ldw	r22,28(sp)
   24a1c:	dd400617 	ldw	r21,24(sp)
   24a20:	dd000517 	ldw	r20,20(sp)
   24a24:	dcc00417 	ldw	r19,16(sp)
   24a28:	dc800317 	ldw	r18,12(sp)
   24a2c:	dc400217 	ldw	r17,8(sp)
   24a30:	dc000117 	ldw	r16,4(sp)
   24a34:	dec00b04 	addi	sp,sp,44
   24a38:	f800283a 	ret
   24a3c:	a0800117 	ldw	r2,4(r20)
   24a40:	80c00017 	ldw	r3,0(r16)
   24a44:	10bfffc4 	addi	r2,r2,-1
   24a48:	15c01426 	beq	r2,r23,24a9c <__call_exitprocs+0x154>
   24a4c:	80000015 	stw	zero,0(r16)
   24a50:	183fde26 	beq	r3,zero,249cc <__alt_data_end+0xfc0249cc>
   24a54:	95c8983a 	sll	r4,r18,r23
   24a58:	a0806217 	ldw	r2,392(r20)
   24a5c:	a5800117 	ldw	r22,4(r20)
   24a60:	2084703a 	and	r2,r4,r2
   24a64:	10000b26 	beq	r2,zero,24a94 <__call_exitprocs+0x14c>
   24a68:	a0806317 	ldw	r2,396(r20)
   24a6c:	2088703a 	and	r4,r4,r2
   24a70:	20000c1e 	bne	r4,zero,24aa4 <__call_exitprocs+0x15c>
   24a74:	89400017 	ldw	r5,0(r17)
   24a78:	d9000017 	ldw	r4,0(sp)
   24a7c:	183ee83a 	callr	r3
   24a80:	a0800117 	ldw	r2,4(r20)
   24a84:	15bfbf1e 	bne	r2,r22,24984 <__alt_data_end+0xfc024984>
   24a88:	98800017 	ldw	r2,0(r19)
   24a8c:	153fcf26 	beq	r2,r20,249cc <__alt_data_end+0xfc0249cc>
   24a90:	003fbc06 	br	24984 <__alt_data_end+0xfc024984>
   24a94:	183ee83a 	callr	r3
   24a98:	003ff906 	br	24a80 <__alt_data_end+0xfc024a80>
   24a9c:	a5c00115 	stw	r23,4(r20)
   24aa0:	003feb06 	br	24a50 <__alt_data_end+0xfc024a50>
   24aa4:	89000017 	ldw	r4,0(r17)
   24aa8:	183ee83a 	callr	r3
   24aac:	003ff406 	br	24a80 <__alt_data_end+0xfc024a80>
   24ab0:	a0800017 	ldw	r2,0(r20)
   24ab4:	a027883a 	mov	r19,r20
   24ab8:	1029883a 	mov	r20,r2
   24abc:	003fb606 	br	24998 <__alt_data_end+0xfc024998>
   24ac0:	0005883a 	mov	r2,zero
   24ac4:	003ffb06 	br	24ab4 <__alt_data_end+0xfc024ab4>
   24ac8:	01110bff 	0x1110bff
   24acc:	01010004 	movi	r4,1024
   24ad0:	7f000105 	stb	fp,4(r15)
   24ad4:	007d0000 	call	7d000 <_gp+0x47b04>
   24ad8:	00000000 	call	0 <__alt_mem_sdram>
   24adc:	01883a00 	call	1883a0 <_gp+0x152ea4>
   24ae0:	010d0bff 	0x10d0bff
   24ae4:	01010002 	0x1010002
	...
   24af0:	010d0bff 	0x10d0bff
   24af4:	01010004 	movi	r4,1024
   24af8:	00000100 	call	10 <__alt_mem_sdram+0x10>
   24afc:	00000000 	call	0 <__alt_mem_sdram>
   24b00:	0000adcc 	andi	zero,zero,695
   24b04:	0000d5a0 	cmpeqi	zero,zero,854
