
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002989c memsz 0x0002989c flags r-x
    LOAD off    0x0002a8bc vaddr 0x000298bc paddr 0x0002ca98 align 2**12
         filesz 0x000031dc memsz 0x000031dc flags rw-
    LOAD off    0x0002dc74 vaddr 0x0002fc74 paddr 0x0002fc74 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00022764  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00006f28  00022994  00022994  00023994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031dc  000298bc  0002ca98  0002a8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  0002fc74  0002fc74  0002dc74  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0002ff20  0002ff20  0002da98  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002da98  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001998  00000000  00000000  0002dac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000522e9  00000000  00000000  0002f458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000104ed  00000000  00000000  00081741  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014e97  00000000  00000000  00091c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005808  00000000  00000000  000a6ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000fc05  00000000  00000000  000ac2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00022609  00000000  00000000  000bbed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000de4e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000028e8  00000000  00000000  000de550  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000f967e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000f9681  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000f9686  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000f9687  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000f9688  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000f968c  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000f9690  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000f9694  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000f969f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000f96aa  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  000f96b5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  000f96c9  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  000f96f4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008ee53  00000000  00000000  000feb7b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00022994 l    d  .rodata	00000000 .rodata
000298bc l    d  .rwdata	00000000 .rwdata
0002fc74 l    d  .bss	00000000 .bss
0002ff20 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002b3a0 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002b3a1 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002b3a2 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002b3a3 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002b3a4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002b3a5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002b3a6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002b3a7 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002fc74 l     O .bss	00000001 _ZL9usb_error
0002fc75 l     O .bss	00000001 _ZL14usb_task_state
0002fc78 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002b3b0 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002b3b1 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002b3b2 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002b3b3 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002b3b4 l     O .rwdata	00000006 _ZL9XBOX_LEDS
00022a9e l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003d04 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 hidboot.cpp
0002b3d4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002b3d5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002b3d6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002b3d7 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002b3d8 l     O .rwdata	00000002 _ZL9pstrSpace
0002b3dc l     O .rwdata	00000003 _ZL8pstrCRLF
0002b3e0 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002b3e4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002b3e8 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002b3ec l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00022bec l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00022c00 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00022c0c l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00022c18 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00022c24 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00022c30 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00022c40 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002b3f4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002b3fc l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002b404 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002b40c l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00022c4c l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00022c58 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002b410 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002b414 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00022c64 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00022c74 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002b41c l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002b424 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00022c84 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002b42c l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00022c94 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002b434 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00022cac l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002b438 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00022cb8 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00022cc4 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002b440 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002b448 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00022cd0 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00022cdc l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002b450 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002b458 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00022ce8 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00022cf8 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002b460 l     O .rwdata	00000002 _ZL10pstrUsageX
0002b464 l     O .rwdata	00000002 _ZL10pstrUsageY
0002b468 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002b46c l     O .rwdata	00000003 _ZL11pstrUsageRx
0002b470 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002b474 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002b478 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002b480 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002b488 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00022d0c l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00022d18 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00022d24 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00022d30 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002b490 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002b498 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002b49c l     O .rwdata	00000003 _ZL11pstrUsageVx
0002b4a0 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002b4a4 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002b4a8 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002b4b0 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002b4b8 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002b4c0 l     O .rwdata	00000004 _ZL12pstrUsageVno
00022d40 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00022d50 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00022d5c l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00022d68 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00022d78 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00022d84 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00022d90 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00022da4 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00022db4 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00022dc4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00022dd4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00022de4 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00022df4 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00022e04 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00022e14 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00022e20 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00022e30 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00022e44 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00022e58 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00022e64 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00022e70 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00022e7c l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00022e88 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00022e94 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00022ea0 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00022eac l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00022eb8 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00022ec4 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00022ed0 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00022edc l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00022eec l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00022ef8 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00022f08 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00022f18 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00022f28 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00022f38 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00022f48 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00022f60 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00022f78 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00022f90 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00022fa0 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00022fb0 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00022fc0 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00022fd0 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00022fe0 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00022ff0 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00023000 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00023010 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00023020 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00023030 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00023048 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00023058 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
0002306c l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0002307c l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00023088 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00023094 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000230a0 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002b4c4 l     O .rwdata	00000008 _ZL16pstrUsageAileron
000230ac l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
000230bc l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
000230d0 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
000230e4 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000230f4 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00023104 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00023110 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00023124 l     O .rodata	00000009 _ZL17pstrUsageElevator
00023130 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002b4cc l     O .rwdata	00000007 _ZL15pstrUsageRudder
00023140 l     O .rodata	00000009 _ZL17pstrUsageThrottle
0002314c l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00023158 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00023168 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00023178 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002b4d4 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00023184 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00023190 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0002319c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002b4dc l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002b4e4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002b4ec l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002b4f4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
000231a8 l     O .rodata	00000009 _ZL17pstrUsageSteering
000231b4 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
000231c0 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
000231cc l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002b4fc l     O .rwdata	00000008 _ZL16pstrUsageBallast
000231d8 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
000231e8 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
000231f4 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00023200 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002b504 l     O .rwdata	00000005 _ZL13pstrUsageBelt
0002320c l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002b50c l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002b514 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00023218 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00023224 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00023230 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
0002323c l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002b51c l     O .rwdata	00000005 _ZL13pstrUsageVest
00023248 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00023254 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00023260 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00023270 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00023280 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0002328c l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00023298 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002b524 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002b528 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002b530 l     O .rwdata	00000005 _ZL13pstrUsageRate
000232a4 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000232b0 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
000232c0 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
000232d0 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
000232e0 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
000232ec l     O .rodata	0000000b _ZL18pstrUsageStickType
000232f8 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002b538 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002b540 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002b548 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002b550 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002b558 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002b560 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002b568 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002b570 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002b578 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002b580 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002b588 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002b590 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00023304 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00023310 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
0002331c l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002b598 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002b5a0 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002b5a8 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002b5b0 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002b5b8 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00023328 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00023338 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002b5c0 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002b5c8 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00023344 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00023354 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00023364 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00023374 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00023384 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00023394 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
000233a4 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
000233b4 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
000233c4 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002b5cc l     O .rwdata	00000008 _ZL16pstrUsageFlipper
000233d4 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002b5d4 l     O .rwdata	00000005 _ZL13pstrUsageBump
000233e4 l     O .rodata	00000009 _ZL16pstrUsageNewGame
000233f0 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002b5dc l     O .rwdata	00000007 _ZL15pstrUsagePlayer
000233fc l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00023408 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002b5e4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00023414 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00023424 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00023430 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
0002343c l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00023448 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
0002345c l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
0002346c l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
0002347c l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00023488 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00023494 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
000234ac l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
000234c0 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
000234d8 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
000234ec l     O .rodata	00000009 _ZL16pstrUsageNumLock
000234f8 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00023504 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002b5ec l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002b5f4 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002b5fc l     O .rwdata	00000004 _ZL14pstrUsagePower
0002b600 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002b608 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002b60c l     O .rwdata	00000005 _ZL13pstrUsageMute
00023510 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
0002351c l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
0002352c l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002b614 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
0002353c l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
0002354c l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002b61c l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002b624 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00023558 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
0002356c l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002b62c l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002b630 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00023578 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
0002358c l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002b634 l     O .rwdata	00000005 _ZL13pstrUsageRing
00023598 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
000235a4 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002b63c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002b644 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002b64c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002b654 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
000235b0 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002b65c l     O .rwdata	00000005 _ZL13pstrUsageHold
0002b664 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
000235bc l     O .rodata	00000009 _ZL17pstrUsageCoverage
000235c8 l     O .rodata	0000000b _ZL18pstrUsageNightMode
000235d4 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
000235e0 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002b668 l     O .rwdata	00000005 _ZL19pstrUsageConference
000235ec l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002b670 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002b678 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002b680 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
000235f8 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002b688 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002b690 l     O .rwdata	00000006 _ZL14pstrUsageReady
00023604 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00023610 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002b698 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002b6a0 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002b6a4 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002b6a8 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002b6b0 l     O .rwdata	00000007 _ZL15pstrUsageRewind
0002361c l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002b6b8 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002b6c0 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002b6c8 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002b6cc l     O .rwdata	00000006 _ZL14pstrUsageError
00023628 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00023638 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
0002364c l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002b6d4 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00023664 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00023670 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00023680 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002b6dc l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00023690 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
000236a0 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
000236b4 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
000236c8 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
000236dc l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
000236f0 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002b6e4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00023700 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
0002370c l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002b6ec l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00023718 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00023724 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002b6f4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00023734 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00023740 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002b6fc l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002b704 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
0002374c l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00023758 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002b70c l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002b714 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002b71c l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002b724 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00023764 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002b72c l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002b734 l     O .rwdata	00000005 _ZL13pstrUsagePark
00023770 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
0002377c l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002b73c l     O .rwdata	00000005 _ZL13pstrUsageLine
00023788 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00023794 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
000237a0 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
000237ac l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
000237b8 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002b744 l     O .rwdata	00000005 _ZL13pstrUsageSend
000237c4 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
000237d0 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
000237dc l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
000237e8 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
000237f4 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00023800 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002b74c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00023810 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00023820 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00023834 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00023848 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
0002385c l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00023870 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00023880 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00023890 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
000238a4 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
000238b4 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
000238c4 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
000238d4 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
000238e0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
000238ec l     O .rodata	0000000a _ZL17pstrUsageTonesOff
000238f8 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002b750 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002b758 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002b75c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002b760 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002b764 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002b768 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002b76c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002b770 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002b774 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002b778 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002b77c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002b780 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002b784 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002b788 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002b78c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002b790 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002b794 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
0002390c l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
0002391c l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00023928 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00023934 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002b798 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002b79c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002b7a4 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002b7ac l     O .rwdata	00000006 _ZL14pstrUsageReset
0002b7b4 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00023940 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
0002394c l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002b7bc l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00023958 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002b7c4 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00023964 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002b7cc l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00023970 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
0002397c l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00023988 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00023994 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
000239a0 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
000239b0 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
000239c0 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
000239cc l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
000239d8 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002b7d4 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
000239e8 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
000239f8 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002b7dc l     O .rwdata	00000006 _ZL14pstrUsageStill
0002b7e4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00023a04 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00023a10 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00023a1c l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00023a28 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00023a38 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002b7e8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002b7f0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00023a44 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00023a54 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00023a60 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00023a6c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00023a78 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00023a84 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00023a90 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00023a9c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00023aac l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00023ab8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00023ac4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00023ad0 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002b7f8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002b800 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00023ae0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00023af0 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00023afc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00023b08 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00023b18 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00023b28 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002b808 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002b810 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00023b38 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002b818 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002b820 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002b828 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002b830 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002b838 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00023b44 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00023b50 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002b840 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002b848 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00023b5c l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00023b68 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00023b74 l     O .rodata	00000009 _ZL17pstrUsageTracking
00023b80 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00023b8c l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002b850 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00023b98 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002b858 l     O .rwdata	00000005 _ZL13pstrUsageMark
00023ba4 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00023bb0 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00023bbc l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00023bc8 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00023bd8 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00023bec l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00023bfc l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00023c0c l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00023c18 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00023c24 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00023c30 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00023c3c l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002b860 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002b864 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002b86c l     O .rwdata	00000005 _ZL13pstrUsageBass
0002b874 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00023c48 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00023c54 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002b87c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002b884 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002b888 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002b890 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002b898 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00023c60 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00023c6c l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00023c78 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00023c84 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002b8a0 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00023c90 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00023c9c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00023ca8 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00023cb4 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00023cc4 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00023cd4 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00023ce0 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00023cec l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00023cf8 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002b8a8 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002b8b0 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00023d04 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00023d10 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002b8b8 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00023d1c l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00023d2c l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00023d3c l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00023d48 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00023d54 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00023d60 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002b8c0 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002b8c8 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00023d6c l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00023d78 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00023d84 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00023d90 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002b8d0 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00023da0 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00023dac l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002b8d8 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002b8e0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002b8e8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00023dbc l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00023dc8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00023dd4 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00023de0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00023dec l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00023dfc l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00023e10 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00023e1c l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00023e30 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00023e40 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00023e4c l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00023e5c l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00023e6c l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00023e7c l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00023e88 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00023e98 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00023ea4 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00023eb4 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00023ec4 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00023ed4 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00023ee4 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00023ef8 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002b8f0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00023f08 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00023f1c l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00023f30 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00023f40 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00023f50 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00023f60 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00023f6c l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00023f78 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00023f84 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00023f90 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00023f9c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00023fac l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00023fc4 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00023fd0 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00023fdc l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00023fe8 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00023ff4 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00024000 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002400c l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00024020 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002b8f8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0002402c l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002b900 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00024038 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00024044 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00024054 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00024060 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00024070 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00024080 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00024090 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0002409c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000240a8 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000240b4 l     O .rodata	00000009 _ZL16pstrUsageALClock
000240c0 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
000240d0 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
000240dc l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
000240e8 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
000240f4 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00024100 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00024114 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00024124 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00024130 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00024144 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00024150 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00024160 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00024174 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00024188 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0002419c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000241ac l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
000241c4 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
000241d8 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
000241e8 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
000241f8 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002b908 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002b910 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002420c l     O .rodata	00000009 _ZL16pstrUsageACClose
0002b918 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002b920 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002b928 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002b930 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00024218 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002b938 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002b940 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002b948 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002b950 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00024224 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00024230 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002b958 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0002423c l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0002424c l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002b960 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002b968 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002b970 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002b978 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002b980 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00024258 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00024264 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00024274 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00024284 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002b988 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00024290 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002429c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000242a8 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002b990 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
000242b4 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
000242c0 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
000242d0 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
000242dc l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
000242ec l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
000242fc l     O .rodata	0000000a _ZL17pstrUsageACScroll
00024308 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00024314 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002b998 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00024324 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00024330 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00024340 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002b9a0 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002b9a8 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002b9b0 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002b9b8 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00024350 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0002435c l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002b9c0 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00024368 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00024374 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00024380 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0002438c l     O .rodata	0000000a _ZL17pstrUsageACResize
00024398 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
000243a4 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
000243b0 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
000243bc l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
000243c8 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
000243d4 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
000243e0 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
000243ec l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
000243fc l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0002440c l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0002441c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0002442c l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00024438 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00024448 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00024454 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00024464 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00024474 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00024484 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00024490 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002449c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
000244a8 l     O .rodata	0000000b _ZL18pstrUsageACPromote
000244b4 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002b9c8 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002b9d0 l     O .rwdata	00000006 _ZL13pstrUsageACNo
000244c0 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002b9d8 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002b9e0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
000244cc l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002b9e8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
000244d8 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
000244e8 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
000244f4 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00024504 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00024514 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00024524 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002b9f0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002b9f8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00024530 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002ba00 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0002453c l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00024548 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00024558 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00024564 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00024574 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00024580 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0002458c l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00024598 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
000245a4 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
000245b0 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
000245bc l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002ba08 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002ba10 l     O .rwdata	00000008 _ZL15pstrUsageACSort
000245c8 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
000245d4 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002ba18 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
000245e4 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
000245f0 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
000245fc l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0002460c l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0002461c l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00024628 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00024634 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00024640 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002ba20 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0002464c l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00024658 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00024664 l     O .rodata	00000009 _ZL16pstrUsageACReply
00024670 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00024680 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002ba28 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0002468c l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002ba30 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002ba38 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00024698 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
000246a4 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
000246b0 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
000246bc l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
000246c8 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
000246d4 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
000246e0 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
000246ec l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
000246f8 l     O .rodata	0000000a _ZL17pstrUsageACRename
00024704 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00024710 l     O .rodata	00000009 _ZL16pstrUsageACSplit
0002471c l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00024728 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00024734 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002ba40 l     O .rwdata	00000004 _ZL12pstrUsagePen
00024740 l     O .rodata	0000000a _ZL17pstrUsageLightPen
0002474c l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00024758 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00024764 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00024770 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002ba44 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00024780 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002ba4c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0002478c l     O .rodata	00000009 _ZL17pstrUsageArmature
00024798 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
000247ac l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002ba54 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002ba5c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002ba64 l     O .rwdata	00000007 _ZL15pstrUsageFinger
000247bc l     O .rodata	0000000a _ZL20pstrUsageTipPressure
000247c8 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
000247d4 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002ba6c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002ba74 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002ba7c l     O .rwdata	00000004 _ZL12pstrUsageTap
0002ba80 l     O .rwdata	00000005 _ZL16pstrUsageQuality
000247e0 l     O .rodata	0000000b _ZL18pstrUsageDataValid
000247ec l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
000247fc l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002480c l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002ba88 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002ba90 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002ba98 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002baa0 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002481c l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002baa8 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002bab0 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00024828 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002bab8 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002bac0 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00024834 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00024840 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00024850 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0002485c l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0002486c l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00024878 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00024888 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00024894 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
000248a4 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
000248b0 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
000248c0 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
000248d0 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
000248dc l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
000248e8 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
000248f4 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00024900 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002490c l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00024918 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00024924 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00024934 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00024944 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002bac8 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002bacc l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002bad0 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002bad8 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00024950 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002495c l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00024968 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00024974 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002bae0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00024980 l     O .rodata	00000009 _ZL17pstrUsageFontData
0002498c l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00024998 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
000249a4 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
000249b4 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
000249c4 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
000249d4 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
000249e0 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
000249ec l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
000249f8 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00024a04 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00024a10 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00024a1c l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00024a28 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00024a34 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00024a40 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00024a50 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00024a60 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00024a70 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00024a7c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00024a88 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00024a98 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002bae8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00024aa4 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00024ab4 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00024ac4 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00024ad0 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00024adc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00024aec l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00024afc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00024b0c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00024b1c l     O .rodata	0000000a _ZL17pstrUsageBlitData
00024b28 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00024b34 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00024b40 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00024b50 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00024b60 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00024b70 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00024b80 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002baf0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002baf8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00024b90 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002bb00 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002bb08 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002bb10 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002bb18 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00024b9c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002bb20 l     O .rwdata	00000005 _ZL13pstrUsageCine
00024ba8 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002bb28 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002bb30 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00024bb4 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00024bc4 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00024bd4 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00024be4 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00024bf0 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00024bfc l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00024c10 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00024c24 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00024c38 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00024c4c l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00024c5c l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00024c6c l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00024c78 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00024c84 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00024c94 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002bb44 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002bb45 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002bb46 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002bb47 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002bb4c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002bb4d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002bb4e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002bb4f l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002bb50 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002bb51 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002bb52 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002bb53 l     O .rwdata	00000001 _ZL9SPI_MODE3
00024eee l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00024efe l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008b28 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002bb5c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002bb5d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002bb5e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002bb5f l     O .rwdata	00000001 _ZL9SPI_MODE3
0002bb60 l     O .rwdata	00000002 _ZL9pstrSpace
0002bb64 l     O .rwdata	00000003 _ZL8pstrCRLF
0002bb68 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002bb6c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002bb70 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002bb74 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00024fc8 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00024fdc l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00024fe8 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00024ff4 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00025000 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0002500c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0002501c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002bb7c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002bb84 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002bb8c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002bb94 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00025028 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00025034 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002bb98 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002bb9c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00025040 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00025050 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002bba4 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002bbac l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00025060 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002bbb4 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00025070 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002bbbc l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00025088 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002bbc0 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00025094 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
000250a0 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002bbc8 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002bbd0 l     O .rwdata	00000006 _ZL14pstrUsageMouse
000250ac l     O .rodata	00000009 _ZL17pstrUsageJoystick
000250b8 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002bbd8 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002bbe0 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
000250c4 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000250d4 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002bbe8 l     O .rwdata	00000002 _ZL10pstrUsageX
0002bbec l     O .rwdata	00000002 _ZL10pstrUsageY
0002bbf0 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002bbf4 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002bbf8 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002bbfc l     O .rwdata	00000003 _ZL11pstrUsageRz
0002bc00 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002bc08 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002bc10 l     O .rwdata	00000006 _ZL14pstrUsageWheel
000250e8 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000250f4 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00025100 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0002510c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002bc18 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002bc20 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002bc24 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002bc28 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002bc2c l     O .rwdata	00000003 _ZL11pstrUsageVz
0002bc30 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002bc38 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002bc40 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002bc48 l     O .rwdata	00000004 _ZL12pstrUsageVno
0002511c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0002512c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00025138 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00025144 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00025154 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00025160 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
0002516c l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00025180 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00025190 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
000251a0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
000251b0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000251c0 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000251d0 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000251e0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000251f0 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000251fc l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0002520c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00025220 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00025234 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00025240 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
0002524c l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00025258 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00025264 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00025270 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
0002527c l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00025288 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00025294 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
000252a0 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
000252ac l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
000252b8 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
000252c8 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000252d4 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000252e4 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000252f4 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00025304 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00025314 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00025324 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
0002533c l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00025354 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
0002536c l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
0002537c l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
0002538c l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
0002539c l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
000253ac l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000253bc l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000253cc l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000253dc l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000253ec l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000253fc l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
0002540c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00025424 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00025434 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00025448 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00025458 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00025464 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00025470 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
0002547c l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002bc4c l     O .rwdata	00000008 _ZL16pstrUsageAileron
00025488 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00025498 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
000254ac l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
000254c0 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000254d0 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
000254e0 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000254ec l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00025500 l     O .rodata	00000009 _ZL17pstrUsageElevator
0002550c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002bc54 l     O .rwdata	00000007 _ZL15pstrUsageRudder
0002551c l     O .rodata	00000009 _ZL17pstrUsageThrottle
00025528 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00025534 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00025544 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00025554 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002bc5c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00025560 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
0002556c l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00025578 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002bc64 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002bc6c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002bc74 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002bc7c l     O .rwdata	00000008 _ZL16pstrUsageShifter
00025584 l     O .rodata	00000009 _ZL17pstrUsageSteering
00025590 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
0002559c l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
000255a8 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002bc84 l     O .rwdata	00000008 _ZL16pstrUsageBallast
000255b4 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
000255c4 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
000255d0 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
000255dc l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002bc8c l     O .rwdata	00000005 _ZL13pstrUsageBelt
000255e8 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002bc94 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002bc9c l     O .rwdata	00000006 _ZL14pstrUsageGlove
000255f4 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00025600 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
0002560c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00025618 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002bca4 l     O .rwdata	00000005 _ZL13pstrUsageVest
00025624 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00025630 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
0002563c l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
0002564c l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
0002565c l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00025668 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00025674 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002bcac l     O .rwdata	00000004 _ZL12pstrUsageOar
0002bcb0 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002bcb8 l     O .rwdata	00000005 _ZL13pstrUsageRate
00025680 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
0002568c l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
0002569c l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
000256ac l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
000256bc l     O .rodata	0000000c _ZL19pstrUsageStickTempo
000256c8 l     O .rodata	0000000b _ZL18pstrUsageStickType
000256d4 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002bcc0 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002bcc8 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002bcd0 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002bcd8 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002bce0 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002bce8 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002bcf0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002bcf8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002bd00 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002bd08 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002bd10 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002bd18 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
000256e0 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
000256ec l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000256f8 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002bd20 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002bd28 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002bd30 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002bd38 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002bd40 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00025704 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00025714 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002bd48 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002bd50 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00025720 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00025730 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00025740 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00025750 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00025760 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00025770 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00025780 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00025790 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
000257a0 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002bd54 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
000257b0 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002bd5c l     O .rwdata	00000005 _ZL13pstrUsageBump
000257c0 l     O .rodata	00000009 _ZL16pstrUsageNewGame
000257cc l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002bd64 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
000257d8 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
000257e4 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002bd6c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
000257f0 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00025800 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
0002580c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00025818 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00025824 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00025838 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00025848 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00025858 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00025864 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00025870 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00025888 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
0002589c l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
000258b4 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
000258c8 l     O .rodata	00000009 _ZL16pstrUsageNumLock
000258d4 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
000258e0 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002bd74 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002bd7c l     O .rwdata	00000005 _ZL13pstrUsageKana
0002bd84 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002bd88 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002bd90 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002bd94 l     O .rwdata	00000005 _ZL13pstrUsageMute
000258ec l     O .rodata	0000000a _ZL19pstrUsageToneEnable
000258f8 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00025908 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002bd9c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00025918 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00025928 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002bda4 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002bdac l     O .rwdata	00000007 _ZL15pstrUsageStereo
00025934 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00025948 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002bdb4 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002bdb8 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00025954 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00025968 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002bdbc l     O .rwdata	00000005 _ZL13pstrUsageRing
00025974 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00025980 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002bdc4 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002bdcc l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002bdd4 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002bddc l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
0002598c l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002bde4 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002bdec l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00025998 l     O .rodata	00000009 _ZL17pstrUsageCoverage
000259a4 l     O .rodata	0000000b _ZL18pstrUsageNightMode
000259b0 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
000259bc l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002bdf0 l     O .rwdata	00000005 _ZL19pstrUsageConference
000259c8 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002bdf8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002be00 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002be08 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
000259d4 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002be10 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002be18 l     O .rwdata	00000006 _ZL14pstrUsageReady
000259e0 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
000259ec l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002be20 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002be28 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002be2c l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002be30 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002be38 l     O .rwdata	00000007 _ZL15pstrUsageRewind
000259f8 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002be40 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002be48 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002be50 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002be54 l     O .rwdata	00000006 _ZL14pstrUsageError
00025a04 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00025a14 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00025a28 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002be5c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00025a40 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00025a4c l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00025a5c l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002be64 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00025a6c l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00025a7c l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00025a90 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00025aa4 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00025ab8 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00025acc l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002be6c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00025adc l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00025ae8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002be74 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00025af4 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00025b00 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002be7c l     O .rwdata	00000006 _ZL14pstrUsagePhone
00025b10 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00025b1c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002be84 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002be8c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00025b28 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00025b34 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002be94 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002be9c l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002bea4 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002beac l     O .rwdata	00000007 _ZL15pstrUsageRedial
00025b40 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002beb4 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002bebc l     O .rwdata	00000005 _ZL13pstrUsagePark
00025b4c l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00025b58 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002bec4 l     O .rwdata	00000005 _ZL13pstrUsageLine
00025b64 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00025b70 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00025b7c l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00025b88 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00025b94 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002becc l     O .rwdata	00000005 _ZL13pstrUsageSend
00025ba0 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00025bac l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00025bb8 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00025bc4 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00025bd0 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00025bdc l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002bed4 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00025bec l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00025bfc l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00025c10 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00025c24 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00025c38 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00025c4c l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00025c5c l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00025c6c l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00025c80 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00025c90 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00025ca0 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00025cb0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00025cbc l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00025cc8 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00025cd4 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002bed8 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002bee0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002bee4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002bee8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002beec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002bef0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002bef4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002bef8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002befc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002bf00 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002bf04 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002bf08 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002bf0c l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002bf10 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002bf14 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002bf18 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002bf1c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00025ce8 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00025cf8 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00025d04 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00025d10 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002bf20 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002bf24 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002bf2c l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002bf34 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002bf3c l     O .rwdata	00000006 _ZL14pstrUsageSleep
00025d1c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00025d28 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002bf44 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00025d34 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002bf4c l     O .rwdata	00000005 _ZL13pstrUsageMenu
00025d40 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002bf54 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00025d4c l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00025d58 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00025d64 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00025d70 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00025d7c l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00025d8c l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00025d9c l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00025da8 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00025db4 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002bf5c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00025dc4 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00025dd4 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002bf64 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002bf6c l     O .rwdata	00000004 _ZL18pstrUsageSelection
00025de0 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00025dec l     O .rodata	0000000a _ZL17pstrUsageModeStep
00025df8 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00025e04 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00025e14 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002bf70 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002bf78 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00025e20 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00025e30 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00025e3c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00025e48 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00025e54 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00025e60 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00025e6c l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00025e78 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00025e88 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00025e94 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00025ea0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00025eac l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002bf80 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002bf88 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00025ebc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00025ecc l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00025ed8 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00025ee4 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00025ef4 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00025f04 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002bf90 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002bf98 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00025f14 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002bfa0 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002bfa8 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002bfb0 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002bfb8 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002bfc0 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00025f20 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00025f2c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002bfc8 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002bfd0 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00025f38 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00025f44 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00025f50 l     O .rodata	00000009 _ZL17pstrUsageTracking
00025f5c l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00025f68 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002bfd8 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00025f74 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002bfe0 l     O .rwdata	00000005 _ZL13pstrUsageMark
00025f80 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00025f8c l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00025f98 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00025fa4 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00025fb4 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00025fc8 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00025fd8 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00025fe8 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00025ff4 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00026000 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002600c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00026018 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002bfe8 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002bfec l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002bff4 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002bffc l     O .rwdata	00000007 _ZL15pstrUsageTreble
00026024 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00026030 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002c004 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002c00c l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002c010 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002c018 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002c020 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0002603c l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00026048 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00026054 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00026060 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002c028 l     O .rwdata	00000005 _ZL13pstrUsageSlow
0002606c l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00026078 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00026084 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00026090 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
000260a0 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
000260b0 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
000260bc l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
000260c8 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
000260d4 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002c030 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002c038 l     O .rwdata	00000007 _ZL15pstrUsageMotion
000260e0 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
000260ec l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002c040 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
000260f8 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00026108 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00026118 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00026124 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00026130 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0002613c l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002c048 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002c050 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00026148 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00026154 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00026160 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
0002616c l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002c058 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0002617c l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00026188 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002c060 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002c068 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002c070 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00026198 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
000261a4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
000261b0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
000261bc l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
000261c8 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
000261d8 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
000261ec l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
000261f8 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0002620c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0002621c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00026228 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00026238 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00026248 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00026258 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00026264 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00026274 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00026280 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00026290 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
000262a0 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
000262b0 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
000262c0 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
000262d4 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002c078 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
000262e4 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000262f8 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0002630c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0002631c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0002632c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0002633c l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00026348 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00026354 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00026360 l     O .rodata	00000009 _ZL16pstrUsageALLogon
0002636c l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00026378 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00026388 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
000263a0 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
000263ac l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
000263b8 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
000263c4 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
000263d0 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
000263dc l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
000263e8 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000263fc l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002c080 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00026408 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002c088 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00026414 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00026420 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00026430 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0002643c l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
0002644c l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
0002645c l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
0002646c l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00026478 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00026484 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00026490 l     O .rodata	00000009 _ZL16pstrUsageALClock
0002649c l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
000264ac l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
000264b8 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
000264c4 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
000264d0 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
000264dc l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
000264f0 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00026500 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0002650c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00026520 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0002652c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0002653c l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00026550 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00026564 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00026578 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00026588 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
000265a0 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
000265b4 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
000265c4 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
000265d4 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002c090 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002c098 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
000265e8 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002c0a0 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002c0a8 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002c0b0 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002c0b8 l     O .rwdata	00000008 _ZL15pstrUsageACSave
000265f4 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002c0c0 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002c0c8 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002c0d0 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002c0d8 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00026600 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0002660c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002c0e0 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00026618 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00026628 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002c0e8 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002c0f0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002c0f8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002c100 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002c108 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00026634 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00026640 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00026650 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00026660 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002c110 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
0002666c l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00026678 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00026684 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002c118 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00026690 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0002669c l     O .rodata	0000000d _ZL21pstrUsageACNormalView
000266ac l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
000266b8 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
000266c8 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
000266d8 l     O .rodata	0000000a _ZL17pstrUsageACScroll
000266e4 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
000266f0 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002c120 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00026700 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0002670c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0002671c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002c128 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002c130 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002c138 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002c140 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0002672c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00026738 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002c148 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00026744 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00026750 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0002675c l     O .rodata	0000000a _ZL17pstrUsageACRotate
00026768 l     O .rodata	0000000a _ZL17pstrUsageACResize
00026774 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00026780 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
0002678c l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00026798 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
000267a4 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
000267b0 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
000267bc l     O .rodata	0000000c _ZL19pstrUsageACFontSize
000267c8 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
000267d8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
000267e8 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
000267f8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00026808 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00026814 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00026824 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00026830 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00026840 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00026850 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00026860 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
0002686c l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00026878 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00026884 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00026890 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002c150 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002c158 l     O .rwdata	00000006 _ZL13pstrUsageACNo
0002689c l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002c160 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002c168 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
000268a8 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002c170 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
000268b4 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
000268c4 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
000268d0 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
000268e0 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
000268f0 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00026900 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002c178 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002c180 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0002690c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002c188 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00026918 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00026924 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00026934 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00026940 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00026950 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0002695c l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00026968 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00026974 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00026980 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0002698c l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00026998 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002c190 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002c198 l     O .rwdata	00000008 _ZL15pstrUsageACSort
000269a4 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
000269b0 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002c1a0 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
000269c0 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
000269cc l     O .rodata	0000000c _ZL20pstrUsageACViewClock
000269d8 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
000269e8 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
000269f8 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00026a04 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00026a10 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00026a1c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002c1a8 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00026a28 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00026a34 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00026a40 l     O .rodata	00000009 _ZL16pstrUsageACReply
00026a4c l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00026a5c l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002c1b0 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00026a68 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002c1b8 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002c1c0 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00026a74 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00026a80 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00026a8c l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00026a98 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00026aa4 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00026ab0 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00026abc l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00026ac8 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00026ad4 l     O .rodata	0000000a _ZL17pstrUsageACRename
00026ae0 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00026aec l     O .rodata	00000009 _ZL16pstrUsageACSplit
00026af8 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00026b04 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00026b10 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002c1c8 l     O .rwdata	00000004 _ZL12pstrUsagePen
00026b1c l     O .rodata	0000000a _ZL17pstrUsageLightPen
00026b28 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00026b34 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00026b40 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00026b4c l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002c1cc l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00026b5c l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002c1d4 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00026b68 l     O .rodata	00000009 _ZL17pstrUsageArmature
00026b74 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00026b88 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002c1dc l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002c1e4 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002c1ec l     O .rwdata	00000007 _ZL15pstrUsageFinger
00026b98 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00026ba4 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00026bb0 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002c1f4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002c1fc l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002c204 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002c208 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00026bbc l     O .rodata	0000000b _ZL18pstrUsageDataValid
00026bc8 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00026bd8 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00026be8 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002c210 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002c218 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002c220 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002c228 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00026bf8 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002c230 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002c238 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00026c04 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002c240 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002c248 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00026c10 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00026c1c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00026c2c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00026c38 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00026c48 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00026c54 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00026c64 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00026c70 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00026c80 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00026c8c l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00026c9c l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00026cac l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00026cb8 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00026cc4 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00026cd0 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00026cdc l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00026ce8 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00026cf4 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00026d00 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00026d10 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00026d20 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002c250 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002c254 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002c258 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002c260 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00026d2c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00026d38 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00026d44 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00026d50 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002c268 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00026d5c l     O .rodata	00000009 _ZL17pstrUsageFontData
00026d68 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00026d74 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00026d80 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00026d90 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00026da0 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00026db0 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00026dbc l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00026dc8 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00026dd4 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00026de0 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00026dec l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00026df8 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00026e04 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00026e10 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00026e1c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00026e2c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00026e3c l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00026e4c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00026e58 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00026e64 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00026e74 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002c270 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00026e80 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00026e90 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00026ea0 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00026eac l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00026eb8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00026ec8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00026ed8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00026ee8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00026ef8 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00026f04 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00026f10 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00026f1c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00026f2c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00026f3c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00026f4c l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00026f5c l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002c278 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002c280 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00026f6c l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002c288 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002c290 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002c298 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002c2a0 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00026f78 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002c2a8 l     O .rwdata	00000005 _ZL13pstrUsageCine
00026f84 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002c2b0 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002c2b8 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00026f90 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00026fa0 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00026fb0 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00026fc0 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00026fcc l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00026fd8 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00026fec l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00027000 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00027014 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00027028 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00027038 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00027048 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00027054 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00027060 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00027070 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002c2be l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c2bf l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c2c0 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c2c1 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002c2c4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c2c5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c2c6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c2c7 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c2c8 l     O .rwdata	00000002 _ZL9pstrSpace
0002c2cc l     O .rwdata	00000003 _ZL8pstrCRLF
0002c2d0 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002c2d4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002c2d8 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002c2dc l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00027150 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00027164 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00027170 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
0002717c l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00027188 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00027194 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
000271a4 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002c2e4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002c2ec l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002c2f4 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002c2fc l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
000271b0 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
000271bc l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002c300 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002c304 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000271c8 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000271d8 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002c30c l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002c314 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000271e8 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002c31c l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000271f8 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002c324 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00027210 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002c328 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0002721c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00027228 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002c330 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002c338 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00027234 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00027240 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002c340 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002c348 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0002724c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
0002725c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002c350 l     O .rwdata	00000002 _ZL10pstrUsageX
0002c354 l     O .rwdata	00000002 _ZL10pstrUsageY
0002c358 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002c35c l     O .rwdata	00000003 _ZL11pstrUsageRx
0002c360 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002c364 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002c368 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002c370 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002c378 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00027270 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
0002727c l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00027288 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00027294 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002c380 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002c388 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002c38c l     O .rwdata	00000003 _ZL11pstrUsageVx
0002c390 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002c394 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002c398 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002c3a0 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002c3a8 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002c3b0 l     O .rwdata	00000004 _ZL12pstrUsageVno
000272a4 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
000272b4 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
000272c0 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000272cc l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000272dc l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000272e8 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000272f4 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00027308 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00027318 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00027328 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00027338 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00027348 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00027358 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00027368 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00027378 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00027384 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00027394 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000273a8 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000273bc l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000273c8 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000273d4 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000273e0 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000273ec l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000273f8 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00027404 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00027410 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0002741c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00027428 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00027434 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00027440 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00027450 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0002745c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
0002746c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
0002747c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
0002748c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
0002749c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000274ac l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000274c4 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000274dc l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000274f4 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00027504 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00027514 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00027524 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00027534 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00027544 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00027554 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00027564 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00027574 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00027584 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00027594 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000275ac l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000275bc l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000275d0 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000275e0 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000275ec l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000275f8 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00027604 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002c3b4 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00027610 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00027620 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00027634 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00027648 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00027658 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00027668 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00027674 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00027688 l     O .rodata	00000009 _ZL17pstrUsageElevator
00027694 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002c3bc l     O .rwdata	00000007 _ZL15pstrUsageRudder
000276a4 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000276b0 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000276bc l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000276cc l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000276dc l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002c3c4 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000276e8 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000276f4 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00027700 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002c3cc l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002c3d4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002c3dc l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002c3e4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
0002770c l     O .rodata	00000009 _ZL17pstrUsageSteering
00027718 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00027724 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00027730 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002c3ec l     O .rwdata	00000008 _ZL16pstrUsageBallast
0002773c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0002774c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00027758 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00027764 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002c3f4 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00027770 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002c3fc l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002c404 l     O .rwdata	00000006 _ZL14pstrUsageGlove
0002777c l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00027788 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00027794 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000277a0 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002c40c l     O .rwdata	00000005 _ZL13pstrUsageVest
000277ac l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000277b8 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000277c4 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000277d4 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000277e4 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000277f0 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000277fc l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002c414 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002c418 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002c420 l     O .rwdata	00000005 _ZL13pstrUsageRate
00027808 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00027814 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00027824 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00027834 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00027844 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00027850 l     O .rodata	0000000b _ZL18pstrUsageStickType
0002785c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002c428 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002c430 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002c438 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002c440 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002c448 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002c450 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002c458 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002c460 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002c468 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002c470 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002c478 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002c480 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00027868 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00027874 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00027880 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002c488 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002c490 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002c498 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002c4a0 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002c4a8 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
0002788c l     O .rodata	0000000d _ZL25pstrUsage3DGameController
0002789c l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002c4b0 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002c4b8 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000278a8 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000278b8 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000278c8 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000278d8 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000278e8 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
000278f8 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00027908 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00027918 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00027928 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002c4bc l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00027938 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002c4c4 l     O .rwdata	00000005 _ZL13pstrUsageBump
00027948 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00027954 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002c4cc l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00027960 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
0002796c l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002c4d4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00027978 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00027988 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00027994 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000279a0 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000279ac l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000279c0 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000279d0 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000279e0 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000279ec l     O .rodata	0000000c _ZL19pstrUsageWirelessID
000279f8 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00027a10 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00027a24 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00027a3c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00027a50 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00027a5c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00027a68 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002c4dc l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002c4e4 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002c4ec l     O .rwdata	00000004 _ZL14pstrUsagePower
0002c4f0 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002c4f8 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002c4fc l     O .rwdata	00000005 _ZL13pstrUsageMute
00027a74 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00027a80 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00027a90 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002c504 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00027aa0 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00027ab0 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002c50c l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002c514 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00027abc l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00027ad0 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002c51c l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002c520 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00027adc l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00027af0 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002c524 l     O .rwdata	00000005 _ZL13pstrUsageRing
00027afc l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00027b08 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002c52c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002c534 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002c53c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002c544 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00027b14 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002c54c l     O .rwdata	00000005 _ZL13pstrUsageHold
0002c554 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00027b20 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00027b2c l     O .rodata	0000000b _ZL18pstrUsageNightMode
00027b38 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00027b44 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002c558 l     O .rwdata	00000005 _ZL19pstrUsageConference
00027b50 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002c560 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002c568 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002c570 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00027b5c l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002c578 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002c580 l     O .rwdata	00000006 _ZL14pstrUsageReady
00027b68 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00027b74 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002c588 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002c590 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002c594 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002c598 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002c5a0 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00027b80 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002c5a8 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002c5b0 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002c5b8 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002c5bc l     O .rwdata	00000006 _ZL14pstrUsageError
00027b8c l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00027b9c l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00027bb0 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002c5c4 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00027bc8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00027bd4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00027be4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002c5cc l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00027bf4 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00027c04 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00027c18 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00027c2c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00027c40 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00027c54 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002c5d4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00027c64 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00027c70 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002c5dc l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00027c7c l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00027c88 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002c5e4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00027c98 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00027ca4 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002c5ec l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002c5f4 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00027cb0 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00027cbc l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002c5fc l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002c604 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002c60c l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002c614 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00027cc8 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002c61c l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002c624 l     O .rwdata	00000005 _ZL13pstrUsagePark
00027cd4 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00027ce0 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002c62c l     O .rwdata	00000005 _ZL13pstrUsageLine
00027cec l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00027cf8 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00027d04 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00027d10 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00027d1c l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002c634 l     O .rwdata	00000005 _ZL13pstrUsageSend
00027d28 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00027d34 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00027d40 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00027d4c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00027d58 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00027d64 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002c63c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00027d74 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00027d84 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00027d98 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00027dac l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00027dc0 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00027dd4 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00027de4 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00027df4 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00027e08 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00027e18 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00027e28 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00027e38 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00027e44 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00027e50 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00027e5c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002c640 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002c648 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002c64c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002c650 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002c654 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002c658 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002c65c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002c660 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002c664 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002c668 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002c66c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002c670 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002c674 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002c678 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002c67c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002c680 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002c684 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00027e70 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00027e80 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00027e8c l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00027e98 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002c688 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002c68c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002c694 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002c69c l     O .rwdata	00000006 _ZL14pstrUsageReset
0002c6a4 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00027ea4 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00027eb0 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002c6ac l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00027ebc l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002c6b4 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00027ec8 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002c6bc l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00027ed4 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00027ee0 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00027eec l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00027ef8 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00027f04 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00027f14 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00027f24 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00027f30 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00027f3c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002c6c4 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00027f4c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00027f5c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002c6cc l     O .rwdata	00000006 _ZL14pstrUsageStill
0002c6d4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00027f68 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00027f74 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00027f80 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00027f8c l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00027f9c l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002c6d8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002c6e0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00027fa8 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00027fb8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00027fc4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00027fd0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00027fdc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00027fe8 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00027ff4 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00028000 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00028010 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0002801c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00028028 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00028034 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002c6e8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002c6f0 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00028044 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00028054 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00028060 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0002806c l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0002807c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0002808c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002c6f8 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002c700 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0002809c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002c708 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002c710 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002c718 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002c720 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002c728 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
000280a8 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
000280b4 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002c730 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002c738 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
000280c0 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000280cc l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000280d8 l     O .rodata	00000009 _ZL17pstrUsageTracking
000280e4 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
000280f0 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002c740 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
000280fc l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002c748 l     O .rwdata	00000005 _ZL13pstrUsageMark
00028108 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00028114 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00028120 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0002812c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0002813c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00028150 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00028160 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00028170 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0002817c l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00028188 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00028194 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
000281a0 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002c750 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002c754 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002c75c l     O .rwdata	00000005 _ZL13pstrUsageBass
0002c764 l     O .rwdata	00000007 _ZL15pstrUsageTreble
000281ac l     O .rodata	0000000b _ZL18pstrUsageBassBoost
000281b8 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002c76c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002c774 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002c778 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002c780 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002c788 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000281c4 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000281d0 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000281dc l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000281e8 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002c790 l     O .rwdata	00000005 _ZL13pstrUsageSlow
000281f4 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00028200 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0002820c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00028218 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00028228 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00028238 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00028244 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00028250 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0002825c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002c798 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002c7a0 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00028268 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00028274 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002c7a8 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00028280 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00028290 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
000282a0 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
000282ac l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
000282b8 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000282c4 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002c7b0 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002c7b8 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000282d0 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000282dc l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000282e8 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000282f4 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002c7c0 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00028304 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00028310 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002c7c8 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002c7d0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002c7d8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00028320 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0002832c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00028338 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00028344 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00028350 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00028360 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00028374 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00028380 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00028394 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
000283a4 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
000283b0 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000283c0 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000283d0 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000283e0 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000283ec l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000283fc l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00028408 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00028418 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00028428 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00028438 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00028448 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0002845c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002c7e0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0002846c l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00028480 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00028494 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000284a4 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000284b4 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000284c4 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000284d0 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000284dc l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000284e8 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000284f4 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00028500 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00028510 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00028528 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00028534 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00028540 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0002854c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00028558 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00028564 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00028570 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00028584 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002c7e8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00028590 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002c7f0 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0002859c l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000285a8 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000285b8 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000285c4 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000285d4 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000285e4 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000285f4 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00028600 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002860c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00028618 l     O .rodata	00000009 _ZL16pstrUsageALClock
00028624 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00028634 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00028640 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0002864c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00028658 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00028664 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00028678 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00028688 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00028694 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000286a8 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000286b4 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000286c4 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000286d8 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000286ec l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00028700 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00028710 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00028728 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0002873c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0002874c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0002875c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002c7f8 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002c800 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00028770 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002c808 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002c810 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002c818 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002c820 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0002877c l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002c828 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002c830 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002c838 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002c840 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00028788 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00028794 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002c848 l     O .rwdata	00000008 _ZL15pstrUsageACFind
000287a0 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000287b0 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002c850 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002c858 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002c860 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002c868 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002c870 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000287bc l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000287c8 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000287d8 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000287e8 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002c878 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000287f4 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00028800 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0002880c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002c880 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00028818 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00028824 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00028834 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00028840 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00028850 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00028860 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0002886c l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00028878 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002c888 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00028888 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00028894 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000288a4 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002c890 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002c898 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002c8a0 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002c8a8 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000288b4 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000288c0 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002c8b0 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000288cc l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000288d8 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000288e4 l     O .rodata	0000000a _ZL17pstrUsageACRotate
000288f0 l     O .rodata	0000000a _ZL17pstrUsageACResize
000288fc l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00028908 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00028914 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00028920 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0002892c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00028938 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00028944 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00028950 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00028960 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00028970 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00028980 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00028990 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0002899c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000289ac l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000289b8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000289c8 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000289d8 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000289e8 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
000289f4 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00028a00 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00028a0c l     O .rodata	0000000b _ZL18pstrUsageACPromote
00028a18 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002c8b8 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002c8c0 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00028a24 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002c8c8 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002c8d0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00028a30 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002c8d8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00028a3c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00028a4c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00028a58 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00028a68 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00028a78 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00028a88 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002c8e0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002c8e8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00028a94 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002c8f0 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00028aa0 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00028aac l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00028abc l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00028ac8 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00028ad8 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00028ae4 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00028af0 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00028afc l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00028b08 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00028b14 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00028b20 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002c8f8 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002c900 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00028b2c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00028b38 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002c908 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00028b48 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00028b54 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00028b60 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00028b70 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00028b80 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00028b8c l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00028b98 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00028ba4 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002c910 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00028bb0 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00028bbc l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00028bc8 l     O .rodata	00000009 _ZL16pstrUsageACReply
00028bd4 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00028be4 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002c918 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00028bf0 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002c920 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002c928 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00028bfc l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00028c08 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00028c14 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00028c20 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00028c2c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00028c38 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00028c44 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00028c50 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00028c5c l     O .rodata	0000000a _ZL17pstrUsageACRename
00028c68 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00028c74 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00028c80 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00028c8c l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00028c98 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002c930 l     O .rwdata	00000004 _ZL12pstrUsagePen
00028ca4 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00028cb0 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00028cbc l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00028cc8 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00028cd4 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002c934 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00028ce4 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002c93c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00028cf0 l     O .rodata	00000009 _ZL17pstrUsageArmature
00028cfc l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00028d10 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002c944 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002c94c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002c954 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00028d20 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00028d2c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00028d38 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002c95c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002c964 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002c96c l     O .rwdata	00000004 _ZL12pstrUsageTap
0002c970 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00028d44 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00028d50 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00028d60 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00028d70 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002c978 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002c980 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002c988 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002c990 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00028d80 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002c998 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002c9a0 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00028d8c l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002c9a8 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002c9b0 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00028d98 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00028da4 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00028db4 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00028dc0 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00028dd0 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00028ddc l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00028dec l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00028df8 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00028e08 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00028e14 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00028e24 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00028e34 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00028e40 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00028e4c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00028e58 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00028e64 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00028e70 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00028e7c l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00028e88 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00028e98 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00028ea8 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002c9b8 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002c9bc l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002c9c0 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002c9c8 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00028eb4 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00028ec0 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00028ecc l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00028ed8 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002c9d0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00028ee4 l     O .rodata	00000009 _ZL17pstrUsageFontData
00028ef0 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00028efc l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00028f08 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00028f18 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00028f28 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00028f38 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00028f44 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00028f50 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00028f5c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00028f68 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00028f74 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00028f80 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00028f8c l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00028f98 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00028fa4 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00028fb4 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00028fc4 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00028fd4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00028fe0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00028fec l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00028ffc l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002c9d8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00029008 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00029018 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00029028 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00029034 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00029040 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00029050 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00029060 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00029070 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00029080 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002908c l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00029098 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
000290a4 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
000290b4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
000290c4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
000290d4 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
000290e4 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002c9e0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002c9e8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
000290f4 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002c9f0 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002c9f8 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002ca00 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002ca08 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00029100 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002ca10 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002910c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002ca18 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002ca20 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00029118 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00029128 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00029138 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00029148 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00029154 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00029160 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00029174 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00029188 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002919c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
000291b0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
000291c0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000291d0 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000291dc l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000291e8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000291f8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00029206 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00029216 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0000a1ac l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000a214 l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000b448 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000b4ec l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000b6f8 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000b74c l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000b7d8 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000b90c l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000b994 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000bbc0 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000c498 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000c780 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0002fde8 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000c838 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000c9e8 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0002fc84 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000ccc8 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0002fc8c l     O .bss	00000004 fc_static
0000cde0 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000cea0 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
000298bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002959a l     O .rodata	00000010 zeroes.4389
000295aa l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000295ba l     O .rodata	00000010 zeroes.4404
0001299c l     F .text	000000bc __sbprintf
000295ca l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00012bac l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00014704 l     F .text	00000008 __fp_unlock
00014718 l     F .text	0000019c __sinit.part.1
000148b4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002a108 l     O .rwdata	00000020 lc_ctype_charset
0002a0e8 l     O .rwdata	00000020 lc_message_charset
0002a128 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000295f8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002971c l     O .rodata	00000010 zeroes.4333
0002972c l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
000188b4 l     F .text	000000fc __sprint_r.part.0
0002973c l     O .rodata	00000010 zeroes.4349
00019ef0 l     F .text	000000bc __sbprintf
0002974c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0001dd5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001de70 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001ded0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001dfe4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001e0cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001e238 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001e324 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001e500 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002ca80 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0001e774 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001e858 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001e994 l     F .text	00000034 alt_dev_reg
0002a308 l     O .rwdata	00000038 i2c_0
0002a340 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0001ea74 l     F .text	00000110 optional_irq_callback
0001ebd4 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000208b0 l     F .text	0000020c altera_avalon_jtag_uart_irq
00020abc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000212f0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00021688 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00021b78 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00021cd8 l     F .text	0000003c alt_get_errno
00021d14 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0002fcc4 g     O .bss	00000004 alt_instruction_exception_handler
0000c940 g     F .text	00000028 __cxa_free_exception
00022b04  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000dd64 g     F .text	00000018 putchar
0000af9c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00016950 g     F .text	00000074 _mprec_log10
00004840  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000b3e8 g     F .text	00000018 _ZSt10unexpectedv
00016a3c g     F .text	0000008c __any_on
0001a5fc g     F .text	00000054 _isatty_r
00029604 g     O .rodata	00000028 __mprec_tinytens
0001e43c g     F .text	0000007c alt_main
00006908 g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000dd7c g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
0002fe20 g     O .bss	00000100 alt_irq
0000cadc g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00009334 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001a650 g     F .text	00000060 _lseek_r
0000cf5c g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002ca98 g       *ABS*	00000000 __flash_rwdata_start
000062a8 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001c734 g     F .text	00000088 .hidden __eqdf2
00004840  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000028cc g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000c56c g     F .text	00000084 __cxa_rethrow
0000cee8 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000b424 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006b4c g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000cf4c g     F .text	00000010 .hidden _Unwind_GetIP
0002ff20 g       *ABS*	00000000 __alt_heap_start
00008c74  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0000e148 g     F .text	0000005c _kill_r
00006eb8 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000dd20 g     F .text	0000003c printf
00022b28  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001a710 g     F .text	0000009c _wcrtomb_r
0000df10 g     F .text	00000084 _signal_r
00006030  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
000172e0 g     F .text	0000005c __sseek
00014a64 g     F .text	00000010 __sinit
00019fac g     F .text	00000140 __swbuf_r
000099a8 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000c9bc g     F .text	0000002c __cxa_free_dependent_exception
0000a2f0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000047e0  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
00015538 g     F .text	0000007c _setlocale_r
000292e0  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
000148bc g     F .text	00000078 __sfmoreglue
0001f2cc g     F .text	000000a8 alt_avalon_i2c_rx_read
0001e4dc g     F .text	00000024 __malloc_unlock
0000cadc g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
000085c4 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000ad24 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00008d5c  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
00001ffc g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0000c760 g     F .text	00000020 _ZSt18uncaught_exceptionv
000204e4 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001d6c g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
00009d7c g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0000b018 g     F .text	00000020 __cxa_deleted_virtual
0001f050 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002d3c  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
00008e20 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
000097b8 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
000158b4 g     F .text	0000015c memmove
00005d4c  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000cab4 g     F .text	00000004 _ZNSt9exceptionD2Ev
00014a4c g     F .text	00000018 _cleanup
0000a03c g     F .text	00000088 _Z7controlv
0001fd34 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00015a10 g     F .text	000000a8 _Balloc
00003e40 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001c7bc g     F .text	000000dc .hidden __gtdf2
00003f04 g     F .text	000000f8 _ZN7XBOXONE4PollEv
00029514  w    O .rodata	00000014 _ZTVSt13bad_exception
00022368 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001e7b0 g     F .text	00000078 times
00008cdc  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000cf98 g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002b3bc  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008548 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004d0c  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001a5a0 g     F .text	0000005c _fstat_r
00009484 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
0002fc9c g     O .bss	00000004 errno
00005a8c g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
0001725c g     F .text	00000008 __seofread
00009030 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
00017514 g     F .text	000013a0 ___svfiprintf_internal_r
0000d174 g     F .text	00000074 .hidden _Unwind_Backtrace
0002fcb0 g     O .bss	00000004 alt_argv
000034cc g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
000333a0 g       *ABS*	00000000 _gp
0001e828 g     F .text	00000030 usleep
00020528 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00007ed4 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002bb54  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0001dfc4 g     F .text	00000020 getpid
0000c268 g     F .text	00000230 __cxa_call_unexpected
0000c5f0 g     F .text	00000008 __cxa_get_exception_ptr
0001f1e0 g     F .text	00000044 alt_avalon_i2c_is_busy
0002a188 g     O .rwdata	00000180 alt_fd_list
000091e0 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00022a74  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
00006eb8 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
00004618 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000dd5c g     F .text	00000008 _putchar_r
0000d088 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0001ef84 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c0c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000cf18 g     F .text	00000018 .hidden _Unwind_GetCFA
0000b400 g     F .text	00000014 _ZSt13set_terminatePFvvE
00021828 g     F .text	00000090 alt_find_dev
00022a68  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
0001069c g     F .text	00000008 _times_r
0000da80 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00005e14  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000c968 g     F .text	00000054 __cxa_allocate_dependent_exception
0001470c g     F .text	0000000c _cleanup_r
0000b0b0 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001db74 g     F .text	000000dc .hidden __floatsidf
00022b1c  w    O .rodata	0000000c _ZTV13USBReadParser
00021c5c g     F .text	0000007c alt_io_redirect
0001c898 g     F .text	000000f4 .hidden __ltdf2
00004b60  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00022994 g       *ABS*	00000000 __DTOR_END__
0000b0c8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0001fb74 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0000de3c g     F .text	00000014 puts
00029368  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
00022558 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007f5c g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
00009268 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00017194 g     F .text	00000074 __fpclassifyd
00009f04 g     F .text	00000138 _Z9MIDI_pollv
000168ac g     F .text	000000a4 __ratio
00019ed4 g     F .text	0000001c __vfiprintf_internal
000079d8 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00020cb4 g     F .text	0000021c altera_avalon_jtag_uart_read
0000d24c g     F .text	00000014 malloc
0000dcf0 g     F .text	00000030 _printf_r
0000cbe4 g     F .text	00000064 .hidden __udivsi3
0001e020 g     F .text	000000ac isatty
0000df94 g     F .text	000000bc _raise_r
00009424 g     F .text	0000003c _ZN8MAX3421eC2Ev
00029654 g     O .rodata	000000c8 __mprec_tens
00006bb8 g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
000155b4 g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004b18  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0001edf0 g     F .text	00000098 alt_avalon_i2c_enable
0002fc98 g     O .bss	00000004 __malloc_top_pad
0000e1a4 g     F .text	00000004 _getpid_r
00020418 g     F .text	00000068 alt_avalon_i2c_int_disable
0002fc7c g     O .bss	00000001 usb_task_state
0002ca60 g     O .rwdata	00000004 __mb_cur_max
000155e4 g     F .text	0000000c _localeconv_r
0000a5b4 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003e70 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
00007038 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
00015e44 g     F .text	0000003c __i2b
00014ee8 g     F .text	000004c8 __sfvwrite_r
0000b248 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0000e050 g     F .text	000000a8 __sigtramp_r
00008290 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
00002df4  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0000de50 g     F .text	00000054 _sbrk_r
000293b0  w    O .rodata	00000020 _ZTVSt9type_info
00004c10  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
000090c8 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001a6b0 g     F .text	00000060 _read_r
0000cabc g     F .text	0000000c _ZNKSt9exception4whatEv
0002ca78 g     O .rwdata	00000004 alt_max_fd
00006100 g     F .text	00000050 _Z9E_Notifycci
000083d0 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001a294 g     F .text	000000f0 _fclose_r
000146d4 g     F .text	00000030 fflush
00009e14 g     F .text	00000078 _Z6onInitv
0002fc94 g     O .bss	00000004 __malloc_max_sbrked_mem
00009730 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
0001ff40 g     F .text	00000210 alt_avalon_i2c_master_receive
00024f84  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001b4b8 g     F .text	000008ac .hidden __adddf3
00029314  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004c3c  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008b28 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00016654 g     F .text	0000010c __b2d
0001aef4 g     F .text	000005c4 .hidden __umoddi3
0001e360 g     F .text	000000dc lseek
00005e3c  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000b10c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00006258 g     F .text	00000028 _Z8E_Notifyhi
0000aff4 g     F .text	00000004 _ZdlPv
00020480 g     F .text	00000064 alt_avalon_i2c_int_enable
0002ca50 g     O .rwdata	00000004 _global_impure_ptr
0000a5c4 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00016c30 g     F .text	00000564 _realloc_r
0002ff20 g       *ABS*	00000000 __bss_end
00021a88 g     F .text	000000f0 alt_iic_isr_register
00022260 g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000ced0 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001a8f8 g     F .text	000005fc .hidden __udivdi3
00020340 g     F .text	00000058 alt_avalon_i2c_int_status_get
0001a4fc g     F .text	00000024 _fputwc_r
0002962c g     O .rodata	00000028 __mprec_bigtens
00015c28 g     F .text	00000104 __s2b
0000d1e8 g     F .text	00000018 abort
0001dc50 g     F .text	000000a8 .hidden __floatunsidf
00024d48  w    O .rodata	00000014 _ZTS17MouseReportParser
00016394 g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
00008d98  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
000036b0 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000c6ac g     F .text	000000b4 __cxa_end_catch
0000915c g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00014a84 g     F .text	00000018 __fp_lock_all
00022b60  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00021a3c g     F .text	0000004c alt_ic_irq_enabled
0000cab8 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
000030c0  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
00005dec  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
000221c4 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00024f10  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0001ec70 g     F .text	00000054 alt_avalon_i2c_register_callback
0002fcb8 g     O .bss	00000004 alt_irq_active
0001ecc4 g     F .text	000000ec alt_avalon_i2c_init
0000b3c0 g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002a160 g     O .rwdata	00000028 alt_dev_null
0000a5f8 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00006064  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000cae4 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
0000326c  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002b94 g     F .text	00000084 _ZN3USB7setConfEhhh
00008c6c g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002940c  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
00021668 g     F .text	00000020 alt_dcache_flush_all
00015d2c g     F .text	00000068 __hi0bits
00024f90  w    O .rodata	0000000c _ZTI14MidiDescParser
00009980 g     F .text	00000028 _Z10Vbus_powerb
0002ca38  w    O .rwdata	00000008 _ZTISt9exception
0001daf4 g     F .text	00000080 .hidden __fixdfsi
00024d5c  w    O .rodata	00000012 _ZTS15HIDReportParser
0000a244  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002ca98 g       *ABS*	00000000 __ram_rwdata_end
0000af98 g     F .text	00000004 _ZNSt9type_infoD1Ev
0002ca70 g     O .rwdata	00000008 alt_dev_list
0000cae4 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0001e894 g     F .text	00000100 write
00016ac8 g     F .text	000000a0 _putc_r
00009df0 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
0001f600 g     F .text	0000004c alt_avalon_i2c_check_arblost
0000afac g     F .text	00000004 _ZNSt9type_infoD0Ev
00004d34  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
000203dc g     F .text	0000003c alt_avalon_i2c_int_clear
00008df4  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00022a54  w    O .rodata	00000014 _ZTV11AddressPool
000298bc g       *ABS*	00000000 __ram_rodata_end
0001df0c g     F .text	000000b8 fstat
00002c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0001e108 g     F .text	00000130 kill
000060dc  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001c898 g     F .text	000000f4 .hidden __ledf2
00022b88  w    O .rodata	00000020 _ZTI7XBOXONE
0002ca84 g     O .rwdata	00000008 alt_avalon_i2c_list
00004aa0  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00024ca2 g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
0001610c g     F .text	00000140 __pow5mult
00005088  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
000189c8 g     F .text	0000150c ___vfiprintf_internal_r
0002fca8 g     O .bss	00000004 __nlocale_changed
0000cc48 g     F .text	00000058 .hidden __umodsi3
0000afa4 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0000487c  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
00009e8c g     F .text	00000078 _Z10MIDI_setupv
0000270c g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000b414 g     F .text	00000010 _ZSt13get_terminatev
0002ff20 g       *ABS*	00000000 end
00022b10  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004e88  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
00009644 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
00005ffc  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000d15c g     F .text	00000018 .hidden _Unwind_DeleteException
000207f0 g     F .text	000000c0 altera_avalon_jtag_uart_init
00005dc4  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001edb0 g     F .text	00000040 alt_avalon_i2c_open
00024cb8 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0000b178 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000a5b4 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002bb48 g     O .rwdata	00000004 UsbDEBUGlvl
0002298c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001f788 g     F .text	000000e8 alt_avalon_i2c_master_tx
00021368 g     F .text	0000007c alt_avalon_timer_sc_init
0001dcf8 g     F .text	00000064 .hidden __clzsi2
0000b038 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00020ed0 g     F .text	00000224 altera_avalon_jtag_uart_write
00014a74 g     F .text	00000004 __sfp_lock_acquire
0002949c  w    O .rodata	00000012 _ZTSSt13bad_exception
000157d0 g     F .text	000000e4 memchr
000106a4 g     F .text	000022dc ___vfprintf_internal_r
0000e1a8 g     F .text	00000058 _sprintf_r
000047e0  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00014bd8 g     F .text	00000310 _free_r
00021f5c g     F .text	0000022c alt_printf
000155c0 g     F .text	00000010 __locale_mb_cur_max
000227d4 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
0002fca4 g     O .bss	00000004 __mlocale_changed
0001eb84 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002ca58 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003e48 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0002fcbc g     O .bss	00000004 _alt_tick_rate
000293a0  w    O .rodata	0000000d _ZTSSt9type_info
00020150 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000aff8 g     F .text	00000020 __cxa_pure_virtual
00022a40  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00022bc8  w    O .rodata	00000010 _ZTS13USBReadParser
00020574 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0001624c g     F .text	00000148 __lshift
000210f4 g     F .text	000001fc alt_avalon_spi_command
0002fcc0 g     O .bss	00000004 _alt_nticks
0000e10c g     F .text	00000018 signal
0001e53c g     F .text	00000104 read
000055b4 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0001ea00 g     F .text	00000074 alt_sys_init
00022ac4  w    O .rodata	00000040 _ZTV7XBOXONE
00017344 g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
000226bc g     F .text	00000118 __register_exitproc
00002b00 g     F .text	00000094 _ZN3USB7setAddrEhhh
00006150 g     F .text	00000084 _Z8E_NotifyPKci
00024f4c  w    O .rodata	0000000c _ZTV14MidiDescParser
00008d04  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00003300  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000a334 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00005fc8  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
00004ccc  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001f9ac g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00015e80 g     F .text	0000028c __multiply
00002a58 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002bb36 g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00020b5c g     F .text	00000068 altera_avalon_jtag_uart_close
00002c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000cca0 g     F .text	00000028 .hidden __mulsi3
000298bc g       *ABS*	00000000 __ram_rwdata_start
0000cfb8 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
00022994 g       *ABS*	00000000 __ram_rodata_start
0002fdf8 g     O .bss	00000028 __malloc_current_mallinfo
00004f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000d0cc g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00016760 g     F .text	0000014c __d2b
0002953c  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000af98 g     F .text	00000004 _ZNSt9type_infoD2Ev
00008cb4  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004938  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002b3a8  w    O .rwdata	00000008 _ZTI11AddressPool
0000cae8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000a530 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00024f9c  w    O .rodata	00000011 _ZTS14MidiDescParser
00029340  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
0002068c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00022494 g     F .text	000000c4 alt_get_fd
000057d0 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
00021510 g     F .text	00000158 alt_busy_sleep
000066a8 g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002ca48  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001a164 g     F .text	00000054 _close_r
00022640 g     F .text	0000007c memcmp
0001f224 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0002074c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007aac g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
0002ff20 g       *ABS*	00000000 __alt_stack_base
0002079c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000a2f0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00007d14 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004578 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00012a58 g     F .text	00000154 __swsetup_r
0000d110 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
0002fc80 g     O .bss	00000004 i2c_dev
0001bd64 g     F .text	000009d0 .hidden __divdf3
0000a294  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00014934 g     F .text	00000118 __sfp
000169c4 g     F .text	00000078 __copybits
0000af9c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00029ce0 g     O .rwdata	00000408 __malloc_av_
000048fc  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00014a80 g     F .text	00000004 __sinit_lock_release
0001c98c g     F .text	0000086c .hidden __muldf3
00017208 g     F .text	00000054 __sread
00004ef0  w    F .text	00000034 _ZN13USBReadParserC2Ev
00029500  w    O .rodata	00000014 _ZTVSt9exception
0000cae0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002c3c  w    F .text	00000034 _ZN11AddressPoolC2Ev
0002238c g     F .text	00000108 alt_find_file
00004be4  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
000216c4 g     F .text	000000a4 alt_dev_llist_insert
0001e4b8 g     F .text	00000024 __malloc_lock
0001e6c4 g     F .text	000000b0 sbrk
0000e3e0 g     F .text	000022bc ___svfprintf_internal_r
0001f64c g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0001f5b4 g     F .text	0000004c alt_avalon_i2c_check_nack
0002943c  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000c4dc g     F .text	00000090 __cxa_throw
00014678 g     F .text	0000005c _fflush_r
0000cf7c g     F .text	00000010 .hidden _Unwind_SetIP
00006ab4 g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001a1b8 g     F .text	000000dc _calloc_r
00022bb4  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
00006280 g     F .text	00000028 _Z8E_Notifydi
000078d0 g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
0002fc74 g       *ABS*	00000000 __bss_start
0002b3cc  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000dbc8 g     F .text	00000128 memset
000083d0 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00005104  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000a0c4 g     F .text	000000e8 main
000096b8 g     F .text	00000078 _ZN8MAX3421e5regRdEh
000098b4 g     F .text	000000cc _ZN8MAX3421e5resetEv
0001f580 g     F .text	00000034 alt_avalon_i2c_master_target_set
0002fcb4 g     O .bss	00000004 alt_envp
00022bd8  w    O .rodata	00000012 _ZTS15USBDeviceConfig
0002fc90 g     O .bss	00000004 __malloc_max_total_mem
000206ec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002fc7d g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001a0ec g     F .text	00000018 __swbuf
0000ca9c g     F .text	0000000c __cxa_get_globals_fast
00020398 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00006d64 g     F .text	000000d4 _Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s
00009424 g     F .text	0000003c _ZN8MAX3421eC1Ev
00004ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002c18  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
0001733c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001a384 g     F .text	00000014 fclose
0000a2bc  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
0000444c g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
000061d4 g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
00012dd4 g     F .text	00001688 _dtoa_r
0000d274 g     F .text	0000080c _malloc_r
0001a86c g     F .text	00000030 __ascii_wctomb
0000cac8 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002ca7c g     O .rwdata	00000004 alt_errno
00024d3c  w    O .rodata	0000000c _ZTI17MouseReportParser
0000e124 g     F .text	00000010 _init_signal
00002960 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
00006860 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
00029430  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000046bc g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
000153b0 g     F .text	000000c4 _fwalk
00009460 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00003204  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000cab8 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00016b68 g     F .text	000000c8 putc
0000caec g     F .text	00000084 .hidden __divsi3
00024fb0  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00014ab4 g     F .text	00000124 _malloc_trim_r
00022994 g       *ABS*	00000000 __CTOR_END__
00004adc  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
00008dc0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00024cf0  w    O .rodata	00000028 _ZTV17MouseReportParser
0000e26c g     F .text	000000dc strcmp
000034cc g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00022994 g       *ABS*	00000000 __flash_rodata_start
00029528  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000a26c  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00022994 g       *ABS*	00000000 __DTOR_LIST__
00024f58  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001c734 g     F .text	00000088 .hidden __nedf2
0001e9c8 g     F .text	00000038 alt_irq_init
0001e640 g     F .text	00000084 alt_release_fd
0000a300 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00022ba8  w    O .rodata	00000009 _ZTS7XBOXONE
0000e200 g     F .text	0000006c sprintf
0002975c g     O .rodata	00000100 .hidden __clz_tab
0002fca0 g     O .bss	00000004 _PathLocale
000225f4 g     F .text	00000014 atexit
0001a104 g     F .text	00000060 _write_r
00002844 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
00002dc8  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
000155f0 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00024cc4  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00009838 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000cfb0 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
00029374  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000ca44 g     F .text	00000058 __cxa_call_terminate
0002ca54 g     O .rwdata	00000004 _impure_ptr
0002ca40  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00022a90  w    O .rodata	0000000e _ZTS11AddressPool
0002fcac g     O .bss	00000004 alt_argc
00003404  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
0001445c g     F .text	0000021c __sflush_r
00008dc0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00003054  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
000217c8 g     F .text	00000060 _do_dtors
0002fd84 g     O .bss	00000064 Midi
000155dc g     F .text	00000008 __locale_cjk_lang
0001f548 g     F .text	00000038 alt_avalon_i2c_master_target_get
0001f458 g     F .text	000000f0 alt_avalon_i2c_send_address
0000b438 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002c3c  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
000165f0 g     F .text	00000064 __ulp
0000cfa0 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00014a9c g     F .text	00000018 __fp_unlock_all
00004f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
0000453c g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004b84  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002ca68 g     O .rwdata	00000008 alt_fs_list
000294dc  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00024d24  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004ef0  w    F .text	00000034 _ZN13USBReadParserC1Ev
0000cf8c g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00004bb0  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000c5f8 g     F .text	000000b4 __cxa_begin_catch
00004734 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0000b0c8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000b3d8 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00005d9c  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
00015608 g     F .text	0000000c localeconv
00009ba4 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004d5c  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000cad8 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
00020624 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002ca34 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00006e38 g     F .text	00000080 _Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
00008ec0 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
000218d8 g     F .text	00000050 alt_ic_isr_register
0001ee88 g     F .text	0000004c alt_avalon_i2c_disable
0000c8e0 g     F .text	00000060 __cxa_allocate_exception
00029308  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002ca98 g       *ABS*	00000000 _edata
00004e88  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
0002ff20 g       *ABS*	00000000 _end
0000a720 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000bc68 g     F .text	00000600 __gxx_personality_sj0
0001a398 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	000003f0 _ZN3USB4TaskEv
00020bc4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002b3c4  w    O .rwdata	00000008 _ZTI13USBReadParser
0001eed4 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000cab4 g     F .text	00000004 _ZNSt9exceptionD1Ev
000219b0 g     F .text	0000008c alt_ic_irq_disable
00005d24  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
00017264 g     F .text	0000007c __swrite
0002ca5c g     O .rwdata	00000004 __malloc_trim_threshold
000155d0 g     F .text	0000000c __locale_msgcharset
00022608 g     F .text	00000038 exit
0000cf30 g     F .text	0000001c .hidden _Unwind_SetGR
00005d74  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
00015474 g     F .text	000000c4 _fwalk_reent
0000a494 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
000163f4 g     F .text	000001fc __mdiff
0000b300 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000cb70 g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00014a78 g     F .text	00000004 __sfp_lock_release
000294b0  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000608c  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00003ffc g     F .text	000003c8 _ZN7XBOXONE10readReportEv
0001f0e4 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00009a8c g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
0001f374 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00024f64  w    O .rodata	00000020 _ZTI9USBH_MIDI
000043c4 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
00007858 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
0001de9c g     F .text	00000034 _exit
000213e4 g     F .text	0000012c alt_alarm_start
00024d18  w    O .rodata	0000000c _ZTI20KeyboardReportParser
00007e70 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000cefc g     F .text	0000001c .hidden _Unwind_GetGR
0000caa8 g     F .text	0000000c __cxa_get_globals
000063b0 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
00015614 g     F .text	000001bc __smakebuf_r
0002ca30 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004b3c  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0000e348 g     F .text	00000098 strlen
0000dea4 g     F .text	0000006c _init_signal_r
0002ca28  w    O .rwdata	00000008 _ZTISt9type_info
00021e00 g     F .text	0000015c open
0001c7bc g     F .text	000000dc .hidden __gedf2
00022188 g     F .text	0000003c alt_putchar
0002948c  w    O .rodata	0000000d _ZTSSt9exception
0000d200 g     F .text	0000004c clock
000060b4  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
00009d18 g     F .text	00000064 _ZN8MAX3421e4TaskEv
00024cac g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
00009510 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002ca64 g     O .rwdata	00000004 __wctomb
0000cad4 g     F .text	00000004 _ZNSt9exceptionD0Ev
000189b0 g     F .text	00000018 __sprint_r
000218b8 g     F .text	00000020 alt_icache_flush_all
0000cfa8 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
0002fcc8 g     O .bss	000000bc Usb
0002ca8c g     O .rwdata	00000004 alt_priority_mask
000048fc  w    F .text	0000003c _ZN11ByteSkipperC2Ev
00021928 g     F .text	00000088 alt_ic_irq_enable
00012980 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001a89c g     F .text	0000005c _wctomb_r
0001d1f8 g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003d04 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00015d94 g     F .text	000000b0 __lo0bits
0002ca90 g     O .rwdata	00000008 alt_alarm_list
00021768 g     F .text	00000060 _do_ctors
00022b54  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0000e134 g     F .text	00000014 __sigtramp
00008f78 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001a7ac g     F .text	000000c0 wcrtomb
0001dd98 g     F .text	000000d8 close
000205d8 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
000294bc  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0001e2a0 g     F .text	00000084 alt_load
0001f870 g     F .text	0000013c alt_avalon_i2c_master_rx
0000afb0 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
000049a0  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001a520 g     F .text	00000080 fputwc
0000e0f8 g     F .text	00000014 raise
0002bb3c  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000d260 g     F .text	00000014 free
00014a7c g     F .text	00000004 __sinit_lock_acquire
00015ae0 g     F .text	00000148 __multadd
0000b0d8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00015ab8 g     F .text	00000028 _Bfree
00006604 g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	10bf8804 	addi	r2,r2,-480
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10bf8804 	addi	r2,r2,-480
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b24917 	ldw	r2,-14044(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b24917 	ldw	r2,-14044(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d68ce814 	ori	gp,gp,13216
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     244:	10bf1d14 	ori	r2,r2,64628

    movhi r3, %hi(__bss_end)
     248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     24c:	18ffc814 	ori	r3,r3,65312

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	001e2a00 	call	1e2a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001e43c0 	call	1e43c <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	210a6504 	addi	r4,r4,10644
     28c:	000de3c0 	call	de3c <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	210a6804 	addi	r4,r4,10656
     2d0:	000de3c0 	call	de3c <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	210a6d04 	addi	r4,r4,10676
     304:	000de3c0 	call	de3c <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	210a7004 	addi	r4,r4,10688
     340:	000de3c0 	call	de3c <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	210a7404 	addi	r4,r4,10704
     374:	000de3c0 	call	de3c <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	210a7804 	addi	r4,r4,10720
     3b0:	000de3c0 	call	de3c <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	210a7b04 	addi	r4,r4,10732
     3ec:	000de3c0 	call	de3c <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	210a7e04 	addi	r4,r4,10744
     428:	000de3c0 	call	de3c <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	210a8104 	addi	r4,r4,10756
     464:	000de3c0 	call	de3c <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	210a8404 	addi	r4,r4,10768
     4a0:	000de3c0 	call	de3c <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	210a8804 	addi	r4,r4,10784
     4dc:	000de3c0 	call	de3c <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	210a8c04 	addi	r4,r4,10800
     510:	000de3c0 	call	de3c <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000cca00 	call	cca0 <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000cbe40 	call	cbe4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000cbe40 	call	cbe4 <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000cbe40 	call	cbe4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000cca00 	call	cca0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000cbe40 	call	cbe4 <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000cbe40 	call	cbe4 <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000cca00 	call	cca0 <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000cbe40 	call	cbe4 <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000cca00 	call	cca0 <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000cca00 	call	cca0 <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000cbe40 	call	cbe4 <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000cca00 	call	cca0 <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000d2000 	call	d200 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000d2000 	call	d200 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000d2000 	call	d200 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	00094240 	call	9424 <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	0002c700 	call	2c70 <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b23545 	stb	r2,-14123(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b23543 	ldbu	r2,-14123(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b23545 	stb	r2,-14123(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	00095100 	call	9510 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	00097300 	call	9730 <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	00095100 	call	9510 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	0009d180 	call	9d18 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	00094600 	call	9460 <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b23543 	ldbu	r2,-14123(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b23543 	ldbu	r2,-14123(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b23615 	stw	r2,-14120(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b23545 	stb	r2,-14123(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b23543 	ldbu	r2,-14123(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	18008e1e 	bne	r3,zero,1bc8 <_ZN3USB4TaskEv+0x3ac>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	00009406 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00008f06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	18006e1e 	bne	r3,zero,1b78 <_ZN3USB4TaskEv+0x35c>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18008b1e 	bne	r3,zero,1bf4 <_ZN3USB4TaskEv+0x3d8>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00008606 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b23545 	stb	r2,-14123(gp)
                        break;
    1a7c:	00005d06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b23617 	ldw	r2,-14120(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10004c26 	beq	r2,zero,1bd0 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b23545 	stb	r2,-14123(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b23545 	stb	r2,-14123(gp)
                        break;
    1ac0:	00004c06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10003d26 	beq	r2,zero,1bd8 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b23545 	stb	r2,-14123(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00003006 	br	1bd8 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10002a26 	beq	r2,zero,1be0 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b23545 	stb	r2,-14123(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b23615 	stw	r2,-14120(gp)
                        }
                        break;
    1b4c:	00002406 	br	1be0 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b23617 	ldw	r2,-14120(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10001e26 	beq	r2,zero,1be8 <_ZN3USB4TaskEv+0x3cc>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b23545 	stb	r2,-14123(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
    1b78:	e0bffc03 	ldbu	r2,-16(fp)
    1b7c:	100f883a 	mov	r7,r2
    1b80:	000d883a 	mov	r6,zero
    1b84:	000b883a 	mov	r5,zero
    1b88:	e13ffe17 	ldw	r4,-8(fp)
    1b8c:	0001ffc0 	call	1ffc <_ZN3USB11ConfiguringEhhb>
    1b90:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
    1b94:	e0bffd03 	ldbu	r2,-12(fp)
    1b98:	10000826 	beq	r2,zero,1bbc <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1b9c:	e0bffd03 	ldbu	r2,-12(fp)
    1ba0:	108034a0 	cmpeqi	r2,r2,210
    1ba4:	1000121e 	bne	r2,zero,1bf0 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
    1ba8:	e0bffd03 	ldbu	r2,-12(fp)
    1bac:	d0b23505 	stb	r2,-14124(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1bb0:	00bfe804 	movi	r2,-96
    1bb4:	d0b23545 	stb	r2,-14123(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bb8:	00000d06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bbc:	00bfe404 	movi	r2,-112
    1bc0:	d0b23545 	stb	r2,-14123(gp)
                        break;
    1bc4:	00000a06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1bc8:	0001883a 	nop
    1bcc:	00000906 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1bd0:	0001883a 	nop
    1bd4:	00000706 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1bd8:	0001883a 	nop
    1bdc:	00000506 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1be0:	0001883a 	nop
    1be4:	00000306 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1be8:	0001883a 	nop
    1bec:	00000106 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bf0:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1bf4:	0001883a 	nop
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	dfc00117 	ldw	ra,4(sp)
    1c00:	df000017 	ldw	fp,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c0c:	defff704 	addi	sp,sp,-36
    1c10:	dfc00815 	stw	ra,32(sp)
    1c14:	df000715 	stw	fp,28(sp)
    1c18:	df000704 	addi	fp,sp,28
    1c1c:	e13ffc15 	stw	r4,-16(fp)
    1c20:	2809883a 	mov	r4,r5
    1c24:	3007883a 	mov	r3,r6
    1c28:	3805883a 	mov	r2,r7
    1c2c:	e13ffd05 	stb	r4,-12(fp)
    1c30:	e0fffe05 	stb	r3,-8(fp)
    1c34:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c38:	e03ff915 	stw	zero,-28(fp)
    1c3c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	000b883a 	mov	r5,zero
    1c48:	1009883a 	mov	r4,r2
    1c4c:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c50:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c54:	e0bff917 	ldw	r2,-28(fp)
    1c58:	1000021e 	bne	r2,zero,1c64 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c5c:	00bff584 	movi	r2,-42
    1c60:	00003d06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1c64:	e0bff917 	ldw	r2,-28(fp)
    1c68:	10c00003 	ldbu	r3,0(r2)
    1c6c:	11000043 	ldbu	r4,1(r2)
    1c70:	2008923a 	slli	r4,r4,8
    1c74:	20c6b03a 	or	r3,r4,r3
    1c78:	11000083 	ldbu	r4,2(r2)
    1c7c:	2008943a 	slli	r4,r4,16
    1c80:	20c6b03a 	or	r3,r4,r3
    1c84:	108000c3 	ldbu	r2,3(r2)
    1c88:	1004963a 	slli	r2,r2,24
    1c8c:	10c4b03a 	or	r2,r2,r3
    1c90:	1000021e 	bne	r2,zero,1c9c <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1c94:	00bff5c4 	movi	r2,-41
    1c98:	00002f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1c9c:	e0bff917 	ldw	r2,-28(fp)
    1ca0:	e0ffff03 	ldbu	r3,-4(fp)
    1ca4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	e0fffd03 	ldbu	r3,-12(fp)
    1cb0:	e13ffe03 	ldbu	r4,-8(fp)
    1cb4:	200f883a 	mov	r7,r4
    1cb8:	000d883a 	mov	r6,zero
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	0002df40 	call	2df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1cc8:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1ccc:	e0bffb03 	ldbu	r2,-20(fp)
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1cd4:	00bff504 	movi	r2,-44
    1cd8:	00001f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	e0fffb03 	ldbu	r3,-20(fp)
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	1009883a 	mov	r4,r2
    1cec:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1cf0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1cf4:	e0bffa17 	ldw	r2,-24(fp)
    1cf8:	1000021e 	bne	r2,zero,1d04 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1cfc:	00bff584 	movi	r2,-42
    1d00:	00001506 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d04:	e0bffa17 	ldw	r2,-24(fp)
    1d08:	e0ffff03 	ldbu	r3,-4(fp)
    1d0c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d10:	e0bffb03 	ldbu	r2,-20(fp)
    1d14:	100f883a 	mov	r7,r2
    1d18:	000d883a 	mov	r6,zero
    1d1c:	000b883a 	mov	r5,zero
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    1d28:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d2c:	e0bffb43 	ldbu	r2,-19(fp)
    1d30:	10000826 	beq	r2,zero,1d54 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0fffb03 	ldbu	r3,-20(fp)
    1d3c:	180b883a 	mov	r5,r3
    1d40:	1009883a 	mov	r4,r2
    1d44:	00030540 	call	3054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d48:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d4c:	e0bffb43 	ldbu	r2,-19(fp)
    1d50:	00000106 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d54:	0005883a 	mov	r2,zero
};
    1d58:	e037883a 	mov	sp,fp
    1d5c:	dfc00117 	ldw	ra,4(sp)
    1d60:	df000017 	ldw	fp,0(sp)
    1d64:	dec00204 	addi	sp,sp,8
    1d68:	f800283a 	ret

00001d6c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1d6c:	defff804 	addi	sp,sp,-32
    1d70:	dfc00715 	stw	ra,28(sp)
    1d74:	df000615 	stw	fp,24(sp)
    1d78:	df000604 	addi	fp,sp,24
    1d7c:	e13ffb15 	stw	r4,-20(fp)
    1d80:	3009883a 	mov	r4,r6
    1d84:	3807883a 	mov	r3,r7
    1d88:	e0800217 	ldw	r2,8(fp)
    1d8c:	e17ffc05 	stb	r5,-16(fp)
    1d90:	e13ffd05 	stb	r4,-12(fp)
    1d94:	e0fffe05 	stb	r3,-8(fp)
    1d98:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1d9c:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1da0:	e0bffc03 	ldbu	r2,-16(fp)
    1da4:	e0fffb17 	ldw	r3,-20(fp)
    1da8:	10800784 	addi	r2,r2,30
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	10800017 	ldw	r2,0(r2)
    1dbc:	10800017 	ldw	r2,0(r2)
    1dc0:	10800104 	addi	r2,r2,4
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	e0bffc03 	ldbu	r2,-16(fp)
    1dcc:	e13ffb17 	ldw	r4,-20(fp)
    1dd0:	10800784 	addi	r2,r2,30
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1085883a 	add	r2,r2,r2
    1ddc:	2085883a 	add	r2,r4,r2
    1de0:	10800017 	ldw	r2,0(r2)
    1de4:	e13ffd03 	ldbu	r4,-12(fp)
    1de8:	e17ffe03 	ldbu	r5,-8(fp)
    1dec:	e1bfff03 	ldbu	r6,-4(fp)
    1df0:	300f883a 	mov	r7,r6
    1df4:	280d883a 	mov	r6,r5
    1df8:	200b883a 	mov	r5,r4
    1dfc:	1009883a 	mov	r4,r2
    1e00:	183ee83a 	callr	r3
    1e04:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e08:	e0bffa43 	ldbu	r2,-23(fp)
    1e0c:	10803818 	cmpnei	r2,r2,224
    1e10:	10001f1e 	bne	r2,zero,1e90 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e14:	e0bffd03 	ldbu	r2,-12(fp)
    1e18:	1000071e 	bne	r2,zero,1e38 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e1c:	01800044 	movi	r6,1
    1e20:	01403a04 	movi	r5,232
    1e24:	e13ffb17 	ldw	r4,-20(fp)
    1e28:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e2c:	01001984 	movi	r4,102
    1e30:	00006840 	call	684 <_Z5delaym>
    1e34:	00002606 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e38:	e0bffd03 	ldbu	r2,-12(fp)
    1e3c:	e0fffb17 	ldw	r3,-20(fp)
    1e40:	10800784 	addi	r2,r2,30
    1e44:	1085883a 	add	r2,r2,r2
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1885883a 	add	r2,r3,r2
    1e50:	10800017 	ldw	r2,0(r2)
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	10800504 	addi	r2,r2,20
    1e5c:	10c00017 	ldw	r3,0(r2)
    1e60:	e0bffd03 	ldbu	r2,-12(fp)
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	10800784 	addi	r2,r2,30
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	2085883a 	add	r2,r4,r2
    1e78:	10800017 	ldw	r2,0(r2)
    1e7c:	e13ffe03 	ldbu	r4,-8(fp)
    1e80:	200b883a 	mov	r5,r4
    1e84:	1009883a 	mov	r4,r2
    1e88:	183ee83a 	callr	r3
    1e8c:	00001006 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1e90:	e0bffa43 	ldbu	r2,-23(fp)
    1e94:	10800358 	cmpnei	r2,r2,13
    1e98:	1000091e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1e9c:	e0bffa03 	ldbu	r2,-24(fp)
    1ea0:	108000e8 	cmpgeui	r2,r2,3
    1ea4:	1000061e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ea8:	01001904 	movi	r4,100
    1eac:	00006840 	call	684 <_Z5delaym>
                retries++;
    1eb0:	e0bffa03 	ldbu	r2,-24(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1ebc:	003fb806 	br	1da0 <__alt_data_end+0xfc001da0>
        } else if(rcode)
    1ec0:	e0bffa43 	ldbu	r2,-23(fp)
    1ec4:	10000226 	beq	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1ec8:	e0bffa43 	ldbu	r2,-23(fp)
    1ecc:	00004606 	br	1fe8 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1ed0:	e0bffc03 	ldbu	r2,-16(fp)
    1ed4:	e0fffb17 	ldw	r3,-20(fp)
    1ed8:	10800784 	addi	r2,r2,30
    1edc:	1085883a 	add	r2,r2,r2
    1ee0:	1085883a 	add	r2,r2,r2
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	10800017 	ldw	r2,0(r2)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bffc03 	ldbu	r2,-16(fp)
    1ef8:	e13ffb17 	ldw	r4,-20(fp)
    1efc:	10800784 	addi	r2,r2,30
    1f00:	1085883a 	add	r2,r2,r2
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	2085883a 	add	r2,r4,r2
    1f0c:	10800017 	ldw	r2,0(r2)
    1f10:	e13ffd03 	ldbu	r4,-12(fp)
    1f14:	e17ffe03 	ldbu	r5,-8(fp)
    1f18:	e1bfff03 	ldbu	r6,-4(fp)
    1f1c:	300f883a 	mov	r7,r6
    1f20:	280d883a 	mov	r6,r5
    1f24:	200b883a 	mov	r5,r4
    1f28:	1009883a 	mov	r4,r2
    1f2c:	183ee83a 	callr	r3
    1f30:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f34:	e0bffa43 	ldbu	r2,-23(fp)
    1f38:	10800358 	cmpnei	r2,r2,13
    1f3c:	1000091e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f40:	e0bffa03 	ldbu	r2,-24(fp)
    1f44:	108000e8 	cmpgeui	r2,r2,3
    1f48:	1000061e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f4c:	01001904 	movi	r4,100
    1f50:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f54:	e0bffa03 	ldbu	r2,-24(fp)
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1f60:	003f8f06 	br	1da0 <__alt_data_end+0xfc001da0>
        }
        if(rcode) {
    1f64:	e0bffa43 	ldbu	r2,-23(fp)
    1f68:	10001e26 	beq	r2,zero,1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1f6c:	e0bffd03 	ldbu	r2,-12(fp)
    1f70:	1000071e 	bne	r2,zero,1f90 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1f74:	01800044 	movi	r6,1
    1f78:	01403a04 	movi	r5,232
    1f7c:	e13ffb17 	ldw	r4,-20(fp)
    1f80:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1f84:	01001984 	movi	r4,102
    1f88:	00006840 	call	684 <_Z5delaym>
    1f8c:	00001506 	br	1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1f90:	e0bffd03 	ldbu	r2,-12(fp)
    1f94:	e0fffb17 	ldw	r3,-20(fp)
    1f98:	10800784 	addi	r2,r2,30
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	10800017 	ldw	r2,0(r2)
    1fb0:	10800504 	addi	r2,r2,20
    1fb4:	10c00017 	ldw	r3,0(r2)
    1fb8:	e0bffd03 	ldbu	r2,-12(fp)
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	10800784 	addi	r2,r2,30
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1085883a 	add	r2,r2,r2
    1fcc:	2085883a 	add	r2,r4,r2
    1fd0:	10800017 	ldw	r2,0(r2)
    1fd4:	e13ffe03 	ldbu	r4,-8(fp)
    1fd8:	200b883a 	mov	r5,r4
    1fdc:	1009883a 	mov	r4,r2
    1fe0:	183ee83a 	callr	r3
                }
        }
        return rcode;
    1fe4:	e0bffa43 	ldbu	r2,-23(fp)
}
    1fe8:	e037883a 	mov	sp,fp
    1fec:	dfc00117 	ldw	ra,4(sp)
    1ff0:	df000017 	ldw	fp,0(sp)
    1ff4:	dec00204 	addi	sp,sp,8
    1ff8:	f800283a 	ret

00001ffc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    1ffc:	deffed04 	addi	sp,sp,-76
    2000:	dfc01215 	stw	ra,72(sp)
    2004:	df001115 	stw	fp,68(sp)
    2008:	df001104 	addi	fp,sp,68
    200c:	e13ffc15 	stw	r4,-16(fp)
    2010:	2809883a 	mov	r4,r5
    2014:	3007883a 	mov	r3,r6
    2018:	3805883a 	mov	r2,r7
    201c:	e13ffd05 	stb	r4,-12(fp)
    2020:	e0fffe05 	stb	r3,-8(fp)
    2024:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2028:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    202c:	e0bff684 	addi	r2,fp,-38
    2030:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2034:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2038:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    203c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    2040:	00800204 	movi	r2,8
    2044:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    2048:	e0fffb83 	ldbu	r3,-18(fp)
    204c:	00bfff84 	movi	r2,-2
    2050:	1884703a 	and	r2,r3,r2
    2054:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    2058:	e0fffb83 	ldbu	r3,-18(fp)
    205c:	00bfff44 	movi	r2,-3
    2060:	1884703a 	and	r2,r3,r2
    2064:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    2068:	e0bffb83 	ldbu	r2,-18(fp)
    206c:	108000cc 	andi	r2,r2,3
    2070:	10800f14 	ori	r2,r2,60
    2074:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    2078:	e13ffc17 	ldw	r4,-16(fp)
    207c:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    2080:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    2084:	e0bff417 	ldw	r2,-48(fp)
    2088:	10800017 	ldw	r2,0(r2)
    208c:	10800017 	ldw	r2,0(r2)
    2090:	000b883a 	mov	r5,zero
    2094:	e13ff417 	ldw	r4,-48(fp)
    2098:	103ee83a 	callr	r2
    209c:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20a0:	e0bff217 	ldw	r2,-56(fp)
    20a4:	1000021e 	bne	r2,zero,20b0 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    20a8:	00bff584 	movi	r2,-42
    20ac:	00019206 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    20b0:	e0bff217 	ldw	r2,-56(fp)
    20b4:	10c00003 	ldbu	r3,0(r2)
    20b8:	11000043 	ldbu	r4,1(r2)
    20bc:	2008923a 	slli	r4,r4,8
    20c0:	20c6b03a 	or	r3,r4,r3
    20c4:	11000083 	ldbu	r4,2(r2)
    20c8:	2008943a 	slli	r4,r4,16
    20cc:	20c6b03a 	or	r3,r4,r3
    20d0:	108000c3 	ldbu	r2,3(r2)
    20d4:	1004963a 	slli	r2,r2,24
    20d8:	10c4b03a 	or	r2,r2,r3
    20dc:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    20e0:	e0bff217 	ldw	r2,-56(fp)
    20e4:	e0fffb04 	addi	r3,fp,-20
    20e8:	19803fcc 	andi	r6,r3,255
    20ec:	11000003 	ldbu	r4,0(r2)
    20f0:	2008703a 	and	r4,r4,zero
    20f4:	200b883a 	mov	r5,r4
    20f8:	3009883a 	mov	r4,r6
    20fc:	2908b03a 	or	r4,r5,r4
    2100:	11000005 	stb	r4,0(r2)
    2104:	1808d23a 	srli	r4,r3,8
    2108:	21803fcc 	andi	r6,r4,255
    210c:	11000043 	ldbu	r4,1(r2)
    2110:	2008703a 	and	r4,r4,zero
    2114:	200b883a 	mov	r5,r4
    2118:	3009883a 	mov	r4,r6
    211c:	2908b03a 	or	r4,r5,r4
    2120:	11000045 	stb	r4,1(r2)
    2124:	1808d43a 	srli	r4,r3,16
    2128:	21803fcc 	andi	r6,r4,255
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008703a 	and	r4,r4,zero
    2134:	200b883a 	mov	r5,r4
    2138:	3009883a 	mov	r4,r6
    213c:	2908b03a 	or	r4,r5,r4
    2140:	11000085 	stb	r4,2(r2)
    2144:	180ad63a 	srli	r5,r3,24
    2148:	10c000c3 	ldbu	r3,3(r2)
    214c:	1806703a 	and	r3,r3,zero
    2150:	1809883a 	mov	r4,r3
    2154:	2807883a 	mov	r3,r5
    2158:	20c6b03a 	or	r3,r4,r3
    215c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    2160:	e0bff217 	ldw	r2,-56(fp)
    2164:	e0ffff03 	ldbu	r3,-4(fp)
    2168:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    216c:	00800484 	movi	r2,18
    2170:	10ffffcc 	andi	r3,r2,65535
    2174:	e0bff684 	addi	r2,fp,-38
    2178:	d8800015 	stw	r2,0(sp)
    217c:	180f883a 	mov	r7,r3
    2180:	000d883a 	mov	r6,zero
    2184:	000b883a 	mov	r5,zero
    2188:	e13ffc17 	ldw	r4,-16(fp)
    218c:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    2190:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    2194:	e0bff217 	ldw	r2,-56(fp)
    2198:	e0fff317 	ldw	r3,-52(fp)
    219c:	19403fcc 	andi	r5,r3,255
    21a0:	10c00003 	ldbu	r3,0(r2)
    21a4:	1806703a 	and	r3,r3,zero
    21a8:	1809883a 	mov	r4,r3
    21ac:	2807883a 	mov	r3,r5
    21b0:	20c6b03a 	or	r3,r4,r3
    21b4:	10c00005 	stb	r3,0(r2)
    21b8:	e0fff317 	ldw	r3,-52(fp)
    21bc:	1806d23a 	srli	r3,r3,8
    21c0:	19403fcc 	andi	r5,r3,255
    21c4:	10c00043 	ldbu	r3,1(r2)
    21c8:	1806703a 	and	r3,r3,zero
    21cc:	1809883a 	mov	r4,r3
    21d0:	2807883a 	mov	r3,r5
    21d4:	20c6b03a 	or	r3,r4,r3
    21d8:	10c00045 	stb	r3,1(r2)
    21dc:	e0fff317 	ldw	r3,-52(fp)
    21e0:	1806d43a 	srli	r3,r3,16
    21e4:	19403fcc 	andi	r5,r3,255
    21e8:	10c00083 	ldbu	r3,2(r2)
    21ec:	1806703a 	and	r3,r3,zero
    21f0:	1809883a 	mov	r4,r3
    21f4:	2807883a 	mov	r3,r5
    21f8:	20c6b03a 	or	r3,r4,r3
    21fc:	10c00085 	stb	r3,2(r2)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	180ad63a 	srli	r5,r3,24
    2208:	10c000c3 	ldbu	r3,3(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2220:	e0bff043 	ldbu	r2,-63(fp)
    2224:	10000226 	beq	r2,zero,2230 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
    2228:	e0bff043 	ldbu	r2,-63(fp)
    222c:	00013206 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    2230:	e0bff117 	ldw	r2,-60(fp)
    2234:	10c00203 	ldbu	r3,8(r2)
    2238:	10800243 	ldbu	r2,9(r2)
    223c:	1004923a 	slli	r2,r2,8
    2240:	10c4b03a 	or	r2,r2,r3
    2244:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    2248:	e0bff117 	ldw	r2,-60(fp)
    224c:	10c00283 	ldbu	r3,10(r2)
    2250:	108002c3 	ldbu	r2,11(r2)
    2254:	1004923a 	slli	r2,r2,8
    2258:	10c4b03a 	or	r2,r2,r3
    225c:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    2260:	e0bff117 	ldw	r2,-60(fp)
    2264:	10800103 	ldbu	r2,4(r2)
    2268:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    226c:	e0bff117 	ldw	r2,-60(fp)
    2270:	10800143 	ldbu	r2,5(r2)
    2274:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    2278:	e03ff005 	stb	zero,-64(fp)
    227c:	e0bff003 	ldbu	r2,-64(fp)
    2280:	10800428 	cmpgeui	r2,r2,16
    2284:	1000821e 	bne	r2,zero,2490 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue; // no driver
    2288:	e0bff003 	ldbu	r2,-64(fp)
    228c:	e0fffc17 	ldw	r3,-16(fp)
    2290:	10800784 	addi	r2,r2,30
    2294:	1085883a 	add	r2,r2,r2
    2298:	1085883a 	add	r2,r2,r2
    229c:	1885883a 	add	r2,r3,r2
    22a0:	10800017 	ldw	r2,0(r2)
    22a4:	10007226 	beq	r2,zero,2470 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    22a8:	e0bff003 	ldbu	r2,-64(fp)
    22ac:	e0fffc17 	ldw	r3,-16(fp)
    22b0:	10800784 	addi	r2,r2,30
    22b4:	1085883a 	add	r2,r2,r2
    22b8:	1085883a 	add	r2,r2,r2
    22bc:	1885883a 	add	r2,r3,r2
    22c0:	10800017 	ldw	r2,0(r2)
    22c4:	10800017 	ldw	r2,0(r2)
    22c8:	10800404 	addi	r2,r2,16
    22cc:	10c00017 	ldw	r3,0(r2)
    22d0:	e0bff003 	ldbu	r2,-64(fp)
    22d4:	e13ffc17 	ldw	r4,-16(fp)
    22d8:	10800784 	addi	r2,r2,30
    22dc:	1085883a 	add	r2,r2,r2
    22e0:	1085883a 	add	r2,r2,r2
    22e4:	2085883a 	add	r2,r4,r2
    22e8:	10800017 	ldw	r2,0(r2)
    22ec:	1009883a 	mov	r4,r2
    22f0:	183ee83a 	callr	r3
    22f4:	10803fcc 	andi	r2,r2,255
    22f8:	1004c03a 	cmpne	r2,r2,zero
    22fc:	10803fcc 	andi	r2,r2,255
    2300:	10005d1e 	bne	r2,zero,2478 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
    2304:	e0bff003 	ldbu	r2,-64(fp)
    2308:	e0fffc17 	ldw	r3,-16(fp)
    230c:	10800784 	addi	r2,r2,30
    2310:	1085883a 	add	r2,r2,r2
    2314:	1085883a 	add	r2,r2,r2
    2318:	1885883a 	add	r2,r3,r2
    231c:	10800017 	ldw	r2,0(r2)
    2320:	10800017 	ldw	r2,0(r2)
    2324:	10800804 	addi	r2,r2,32
    2328:	10c00017 	ldw	r3,0(r2)
    232c:	e0bff003 	ldbu	r2,-64(fp)
    2330:	e13ffc17 	ldw	r4,-16(fp)
    2334:	10800784 	addi	r2,r2,30
    2338:	1085883a 	add	r2,r2,r2
    233c:	1085883a 	add	r2,r2,r2
    2340:	2085883a 	add	r2,r4,r2
    2344:	10800017 	ldw	r2,0(r2)
    2348:	e13ff643 	ldbu	r4,-39(fp)
    234c:	200b883a 	mov	r5,r4
    2350:	1009883a 	mov	r4,r2
    2354:	183ee83a 	callr	r3
    2358:	10803fcc 	andi	r2,r2,255
    235c:	10003226 	beq	r2,zero,2428 <_ZN3USB11ConfiguringEhhb+0x42c>
    2360:	e0bff003 	ldbu	r2,-64(fp)
    2364:	e0fffc17 	ldw	r3,-16(fp)
    2368:	10800784 	addi	r2,r2,30
    236c:	1085883a 	add	r2,r2,r2
    2370:	1085883a 	add	r2,r2,r2
    2374:	1885883a 	add	r2,r3,r2
    2378:	10800017 	ldw	r2,0(r2)
    237c:	10800017 	ldw	r2,0(r2)
    2380:	10800604 	addi	r2,r2,24
    2384:	10c00017 	ldw	r3,0(r2)
    2388:	e0bff003 	ldbu	r2,-64(fp)
    238c:	e13ffc17 	ldw	r4,-16(fp)
    2390:	10800784 	addi	r2,r2,30
    2394:	1085883a 	add	r2,r2,r2
    2398:	1085883a 	add	r2,r2,r2
    239c:	2085883a 	add	r2,r4,r2
    23a0:	10800017 	ldw	r2,0(r2)
    23a4:	e13ff50b 	ldhu	r4,-44(fp)
    23a8:	e17ff58b 	ldhu	r5,-42(fp)
    23ac:	280d883a 	mov	r6,r5
    23b0:	200b883a 	mov	r5,r4
    23b4:	1009883a 	mov	r4,r2
    23b8:	183ee83a 	callr	r3
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	1000171e 	bne	r2,zero,2420 <_ZN3USB11ConfiguringEhhb+0x424>
    23c4:	e0bff003 	ldbu	r2,-64(fp)
    23c8:	e0fffc17 	ldw	r3,-16(fp)
    23cc:	10800784 	addi	r2,r2,30
    23d0:	1085883a 	add	r2,r2,r2
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1885883a 	add	r2,r3,r2
    23dc:	10800017 	ldw	r2,0(r2)
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10800704 	addi	r2,r2,28
    23e8:	10c00017 	ldw	r3,0(r2)
    23ec:	e0bff003 	ldbu	r2,-64(fp)
    23f0:	e13ffc17 	ldw	r4,-16(fp)
    23f4:	10800784 	addi	r2,r2,30
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	1085883a 	add	r2,r2,r2
    2400:	2085883a 	add	r2,r4,r2
    2404:	10800017 	ldw	r2,0(r2)
    2408:	e13ff603 	ldbu	r4,-40(fp)
    240c:	200b883a 	mov	r5,r4
    2410:	1009883a 	mov	r4,r2
    2414:	183ee83a 	callr	r3
    2418:	10803fcc 	andi	r2,r2,255
    241c:	10000226 	beq	r2,zero,2428 <_ZN3USB11ConfiguringEhhb+0x42c>
    2420:	00800044 	movi	r2,1
    2424:	00000106 	br	242c <_ZN3USB11ConfiguringEhhb+0x430>
    2428:	0005883a 	mov	r2,zero
    242c:	10803fcc 	andi	r2,r2,255
    2430:	10001226 	beq	r2,zero,247c <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2434:	e0fff003 	ldbu	r3,-64(fp)
    2438:	e13ffd03 	ldbu	r4,-12(fp)
    243c:	e17ffe03 	ldbu	r5,-8(fp)
    2440:	e0bfff03 	ldbu	r2,-4(fp)
    2444:	d8800015 	stw	r2,0(sp)
    2448:	280f883a 	mov	r7,r5
    244c:	200d883a 	mov	r6,r4
    2450:	180b883a 	mov	r5,r3
    2454:	e13ffc17 	ldw	r4,-16(fp)
    2458:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    245c:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
    2460:	e0bff043 	ldbu	r2,-63(fp)
    2464:	10803460 	cmpeqi	r2,r2,209
    2468:	10000826 	beq	r2,zero,248c <_ZN3USB11ConfiguringEhhb+0x490>
    246c:	00000306 	br	247c <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue; // no driver
    2470:	0001883a 	nop
    2474:	00000106 	br	247c <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    2478:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    247c:	e0bff003 	ldbu	r2,-64(fp)
    2480:	10800044 	addi	r2,r2,1
    2484:	e0bff005 	stb	r2,-64(fp)
    2488:	003f7c06 	br	227c <__alt_data_end+0xfc00227c>
                if(!devConfig[devConfigIndex]) continue; // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
    248c:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
    2490:	e0bff003 	ldbu	r2,-64(fp)
    2494:	10800428 	cmpgeui	r2,r2,16
    2498:	1000021e 	bne	r2,zero,24a4 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
    249c:	e0bff043 	ldbu	r2,-63(fp)
    24a0:	00009506 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    24a4:	e03ff005 	stb	zero,-64(fp)
    24a8:	e0bff003 	ldbu	r2,-64(fp)
    24ac:	10800428 	cmpgeui	r2,r2,16
    24b0:	1000871e 	bne	r2,zero,26d0 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
    24b4:	e0bff003 	ldbu	r2,-64(fp)
    24b8:	e0fffc17 	ldw	r3,-16(fp)
    24bc:	10800784 	addi	r2,r2,30
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	1085883a 	add	r2,r2,r2
    24c8:	1885883a 	add	r2,r3,r2
    24cc:	10800017 	ldw	r2,0(r2)
    24d0:	10007626 	beq	r2,zero,26ac <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    24d4:	e0bff003 	ldbu	r2,-64(fp)
    24d8:	e0fffc17 	ldw	r3,-16(fp)
    24dc:	10800784 	addi	r2,r2,30
    24e0:	1085883a 	add	r2,r2,r2
    24e4:	1085883a 	add	r2,r2,r2
    24e8:	1885883a 	add	r2,r3,r2
    24ec:	10800017 	ldw	r2,0(r2)
    24f0:	10800017 	ldw	r2,0(r2)
    24f4:	10800404 	addi	r2,r2,16
    24f8:	10c00017 	ldw	r3,0(r2)
    24fc:	e0bff003 	ldbu	r2,-64(fp)
    2500:	e13ffc17 	ldw	r4,-16(fp)
    2504:	10800784 	addi	r2,r2,30
    2508:	1085883a 	add	r2,r2,r2
    250c:	1085883a 	add	r2,r2,r2
    2510:	2085883a 	add	r2,r4,r2
    2514:	10800017 	ldw	r2,0(r2)
    2518:	1009883a 	mov	r4,r2
    251c:	183ee83a 	callr	r3
    2520:	10803fcc 	andi	r2,r2,255
    2524:	1004c03a 	cmpne	r2,r2,zero
    2528:	10803fcc 	andi	r2,r2,255
    252c:	1000611e 	bne	r2,zero,26b4 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    2530:	e0bff003 	ldbu	r2,-64(fp)
    2534:	e0fffc17 	ldw	r3,-16(fp)
    2538:	10800784 	addi	r2,r2,30
    253c:	1085883a 	add	r2,r2,r2
    2540:	1085883a 	add	r2,r2,r2
    2544:	1885883a 	add	r2,r3,r2
    2548:	10800017 	ldw	r2,0(r2)
    254c:	10800017 	ldw	r2,0(r2)
    2550:	10800804 	addi	r2,r2,32
    2554:	10c00017 	ldw	r3,0(r2)
    2558:	e0bff003 	ldbu	r2,-64(fp)
    255c:	e13ffc17 	ldw	r4,-16(fp)
    2560:	10800784 	addi	r2,r2,30
    2564:	1085883a 	add	r2,r2,r2
    2568:	1085883a 	add	r2,r2,r2
    256c:	2085883a 	add	r2,r4,r2
    2570:	10800017 	ldw	r2,0(r2)
    2574:	e13ff643 	ldbu	r4,-39(fp)
    2578:	200b883a 	mov	r5,r4
    257c:	1009883a 	mov	r4,r2
    2580:	183ee83a 	callr	r3
    2584:	10803fcc 	andi	r2,r2,255
    2588:	10003226 	beq	r2,zero,2654 <_ZN3USB11ConfiguringEhhb+0x658>
    258c:	e0bff003 	ldbu	r2,-64(fp)
    2590:	e0fffc17 	ldw	r3,-16(fp)
    2594:	10800784 	addi	r2,r2,30
    2598:	1085883a 	add	r2,r2,r2
    259c:	1085883a 	add	r2,r2,r2
    25a0:	1885883a 	add	r2,r3,r2
    25a4:	10800017 	ldw	r2,0(r2)
    25a8:	10800017 	ldw	r2,0(r2)
    25ac:	10800604 	addi	r2,r2,24
    25b0:	10c00017 	ldw	r3,0(r2)
    25b4:	e0bff003 	ldbu	r2,-64(fp)
    25b8:	e13ffc17 	ldw	r4,-16(fp)
    25bc:	10800784 	addi	r2,r2,30
    25c0:	1085883a 	add	r2,r2,r2
    25c4:	1085883a 	add	r2,r2,r2
    25c8:	2085883a 	add	r2,r4,r2
    25cc:	10800017 	ldw	r2,0(r2)
    25d0:	e13ff50b 	ldhu	r4,-44(fp)
    25d4:	e17ff58b 	ldhu	r5,-42(fp)
    25d8:	280d883a 	mov	r6,r5
    25dc:	200b883a 	mov	r5,r4
    25e0:	1009883a 	mov	r4,r2
    25e4:	183ee83a 	callr	r3
    25e8:	10803fcc 	andi	r2,r2,255
    25ec:	1000171e 	bne	r2,zero,264c <_ZN3USB11ConfiguringEhhb+0x650>
    25f0:	e0bff003 	ldbu	r2,-64(fp)
    25f4:	e0fffc17 	ldw	r3,-16(fp)
    25f8:	10800784 	addi	r2,r2,30
    25fc:	1085883a 	add	r2,r2,r2
    2600:	1085883a 	add	r2,r2,r2
    2604:	1885883a 	add	r2,r3,r2
    2608:	10800017 	ldw	r2,0(r2)
    260c:	10800017 	ldw	r2,0(r2)
    2610:	10800704 	addi	r2,r2,28
    2614:	10c00017 	ldw	r3,0(r2)
    2618:	e0bff003 	ldbu	r2,-64(fp)
    261c:	e13ffc17 	ldw	r4,-16(fp)
    2620:	10800784 	addi	r2,r2,30
    2624:	1085883a 	add	r2,r2,r2
    2628:	1085883a 	add	r2,r2,r2
    262c:	2085883a 	add	r2,r4,r2
    2630:	10800017 	ldw	r2,0(r2)
    2634:	e13ff603 	ldbu	r4,-40(fp)
    2638:	200b883a 	mov	r5,r4
    263c:	1009883a 	mov	r4,r2
    2640:	183ee83a 	callr	r3
    2644:	10803fcc 	andi	r2,r2,255
    2648:	10000226 	beq	r2,zero,2654 <_ZN3USB11ConfiguringEhhb+0x658>
    264c:	00800044 	movi	r2,1
    2650:	00000106 	br	2658 <_ZN3USB11ConfiguringEhhb+0x65c>
    2654:	0005883a 	mov	r2,zero
    2658:	10803fcc 	andi	r2,r2,255
    265c:	1000171e 	bne	r2,zero,26bc <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2660:	e0fff003 	ldbu	r3,-64(fp)
    2664:	e13ffd03 	ldbu	r4,-12(fp)
    2668:	e17ffe03 	ldbu	r5,-8(fp)
    266c:	e0bfff03 	ldbu	r2,-4(fp)
    2670:	d8800015 	stw	r2,0(sp)
    2674:	280f883a 	mov	r7,r5
    2678:	200d883a 	mov	r6,r4
    267c:	180b883a 	mov	r5,r3
    2680:	e13ffc17 	ldw	r4,-16(fp)
    2684:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    2688:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
    268c:	e0bff043 	ldbu	r2,-63(fp)
    2690:	10803460 	cmpeqi	r2,r2,209
    2694:	10000a1e 	bne	r2,zero,26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
    2698:	e0bff043 	ldbu	r2,-63(fp)
    269c:	10803660 	cmpeqi	r2,r2,217
    26a0:	1000071e 	bne	r2,zero,26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
    26a4:	e0bff043 	ldbu	r2,-63(fp)
    26a8:	00001306 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
    26ac:	0001883a 	nop
    26b0:	00000306 	br	26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    26b4:	0001883a 	nop
    26b8:	00000106 	br	26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    26bc:	0001883a 	nop
                return rcode;
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    26c0:	e0bff003 	ldbu	r2,-64(fp)
    26c4:	10800044 	addi	r2,r2,1
    26c8:	e0bff005 	stb	r2,-64(fp)
    26cc:	003f7606 	br	24a8 <__alt_data_end+0xfc0024a8>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
    26d0:	e0bffd03 	ldbu	r2,-12(fp)
    26d4:	e0fffe03 	ldbu	r3,-8(fp)
    26d8:	e13fff03 	ldbu	r4,-4(fp)
    26dc:	200f883a 	mov	r7,r4
    26e0:	180d883a 	mov	r6,r3
    26e4:	100b883a 	mov	r5,r2
    26e8:	e13ffc17 	ldw	r4,-16(fp)
    26ec:	0001c0c0 	call	1c0c <_ZN3USB17DefaultAddressingEhhb>
    26f0:	e0bff045 	stb	r2,-63(fp)

        return rcode;
    26f4:	e0bff043 	ldbu	r2,-63(fp)
}
    26f8:	e037883a 	mov	sp,fp
    26fc:	dfc00117 	ldw	ra,4(sp)
    2700:	df000017 	ldw	fp,0(sp)
    2704:	dec00204 	addi	sp,sp,8
    2708:	f800283a 	ret

0000270c <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    270c:	defffb04 	addi	sp,sp,-20
    2710:	dfc00415 	stw	ra,16(sp)
    2714:	df000315 	stw	fp,12(sp)
    2718:	df000304 	addi	fp,sp,12
    271c:	e13ffe15 	stw	r4,-8(fp)
    2720:	2805883a 	mov	r2,r5
    2724:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2728:	e0bfff03 	ldbu	r2,-4(fp)
    272c:	1000021e 	bne	r2,zero,2738 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    2730:	0005883a 	mov	r2,zero
    2734:	00003e06 	br	2830 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2738:	e03ffd05 	stb	zero,-12(fp)
    273c:	e0bffd03 	ldbu	r2,-12(fp)
    2740:	10800428 	cmpgeui	r2,r2,16
    2744:	1000391e 	bne	r2,zero,282c <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2748:	e0bffd03 	ldbu	r2,-12(fp)
    274c:	e0fffe17 	ldw	r3,-8(fp)
    2750:	10800784 	addi	r2,r2,30
    2754:	1085883a 	add	r2,r2,r2
    2758:	1085883a 	add	r2,r2,r2
    275c:	1885883a 	add	r2,r3,r2
    2760:	10800017 	ldw	r2,0(r2)
    2764:	10002c26 	beq	r2,zero,2818 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2768:	e0bffd03 	ldbu	r2,-12(fp)
    276c:	e0fffe17 	ldw	r3,-8(fp)
    2770:	10800784 	addi	r2,r2,30
    2774:	1085883a 	add	r2,r2,r2
    2778:	1085883a 	add	r2,r2,r2
    277c:	1885883a 	add	r2,r3,r2
    2780:	10800017 	ldw	r2,0(r2)
    2784:	10800017 	ldw	r2,0(r2)
    2788:	10800404 	addi	r2,r2,16
    278c:	10c00017 	ldw	r3,0(r2)
    2790:	e0bffd03 	ldbu	r2,-12(fp)
    2794:	e13ffe17 	ldw	r4,-8(fp)
    2798:	10800784 	addi	r2,r2,30
    279c:	1085883a 	add	r2,r2,r2
    27a0:	1085883a 	add	r2,r2,r2
    27a4:	2085883a 	add	r2,r4,r2
    27a8:	10800017 	ldw	r2,0(r2)
    27ac:	1009883a 	mov	r4,r2
    27b0:	183ee83a 	callr	r3
    27b4:	10c03fcc 	andi	r3,r2,255
    27b8:	e0bfff03 	ldbu	r2,-4(fp)
    27bc:	1885003a 	cmpeq	r2,r3,r2
    27c0:	10803fcc 	andi	r2,r2,255
    27c4:	10001526 	beq	r2,zero,281c <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    27c8:	e0bffd03 	ldbu	r2,-12(fp)
    27cc:	e0fffe17 	ldw	r3,-8(fp)
    27d0:	10800784 	addi	r2,r2,30
    27d4:	1085883a 	add	r2,r2,r2
    27d8:	1085883a 	add	r2,r2,r2
    27dc:	1885883a 	add	r2,r3,r2
    27e0:	10800017 	ldw	r2,0(r2)
    27e4:	10800017 	ldw	r2,0(r2)
    27e8:	10800204 	addi	r2,r2,8
    27ec:	10c00017 	ldw	r3,0(r2)
    27f0:	e0bffd03 	ldbu	r2,-12(fp)
    27f4:	e13ffe17 	ldw	r4,-8(fp)
    27f8:	10800784 	addi	r2,r2,30
    27fc:	1085883a 	add	r2,r2,r2
    2800:	1085883a 	add	r2,r2,r2
    2804:	2085883a 	add	r2,r4,r2
    2808:	10800017 	ldw	r2,0(r2)
    280c:	1009883a 	mov	r4,r2
    2810:	183ee83a 	callr	r3
    2814:	00000606 	br	2830 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    2818:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    281c:	e0bffd03 	ldbu	r2,-12(fp)
    2820:	10800044 	addi	r2,r2,1
    2824:	e0bffd05 	stb	r2,-12(fp)
    2828:	003fc406 	br	273c <__alt_data_end+0xfc00273c>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    282c:	0005883a 	mov	r2,zero
}
    2830:	e037883a 	mov	sp,fp
    2834:	dfc00117 	ldw	ra,4(sp)
    2838:	df000017 	ldw	fp,0(sp)
    283c:	dec00204 	addi	sp,sp,8
    2840:	f800283a 	ret

00002844 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2844:	defff204 	addi	sp,sp,-56
    2848:	dfc00d15 	stw	ra,52(sp)
    284c:	df000c15 	stw	fp,48(sp)
    2850:	df000c04 	addi	fp,sp,48
    2854:	e13ffc15 	stw	r4,-16(fp)
    2858:	2809883a 	mov	r4,r5
    285c:	3007883a 	mov	r3,r6
    2860:	3805883a 	mov	r2,r7
    2864:	e13ffd05 	stb	r4,-12(fp)
    2868:	e0fffe05 	stb	r3,-8(fp)
    286c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    2870:	e17ffd03 	ldbu	r5,-12(fp)
    2874:	e1bffe03 	ldbu	r6,-8(fp)
    2878:	e0bfff0b 	ldhu	r2,-4(fp)
    287c:	e0ffff0b 	ldhu	r3,-4(fp)
    2880:	d8000715 	stw	zero,28(sp)
    2884:	e1000217 	ldw	r4,8(fp)
    2888:	d9000615 	stw	r4,24(sp)
    288c:	d8c00515 	stw	r3,20(sp)
    2890:	d8800415 	stw	r2,16(sp)
    2894:	d8000315 	stw	zero,12(sp)
    2898:	00800044 	movi	r2,1
    289c:	d8800215 	stw	r2,8(sp)
    28a0:	d8000115 	stw	zero,4(sp)
    28a4:	00800184 	movi	r2,6
    28a8:	d8800015 	stw	r2,0(sp)
    28ac:	01c02004 	movi	r7,128
    28b0:	e13ffc17 	ldw	r4,-16(fp)
    28b4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    28b8:	e037883a 	mov	sp,fp
    28bc:	dfc00117 	ldw	ra,4(sp)
    28c0:	df000017 	ldw	fp,0(sp)
    28c4:	dec00204 	addi	sp,sp,8
    28c8:	f800283a 	ret

000028cc <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    28cc:	defff104 	addi	sp,sp,-60
    28d0:	dfc00e15 	stw	ra,56(sp)
    28d4:	df000d15 	stw	fp,52(sp)
    28d8:	df000d04 	addi	fp,sp,52
    28dc:	e13ffb15 	stw	r4,-20(fp)
    28e0:	3009883a 	mov	r4,r6
    28e4:	3807883a 	mov	r3,r7
    28e8:	e0800217 	ldw	r2,8(fp)
    28ec:	e17ffc05 	stb	r5,-16(fp)
    28f0:	e13ffd05 	stb	r4,-12(fp)
    28f4:	e0fffe0d 	sth	r3,-8(fp)
    28f8:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    28fc:	e23ffc03 	ldbu	r8,-16(fp)
    2900:	e1bffd03 	ldbu	r6,-12(fp)
    2904:	e0bfff03 	ldbu	r2,-4(fp)
    2908:	e0fffe0b 	ldhu	r3,-8(fp)
    290c:	e13ffe0b 	ldhu	r4,-8(fp)
    2910:	d8000715 	stw	zero,28(sp)
    2914:	e1400317 	ldw	r5,12(fp)
    2918:	d9400615 	stw	r5,24(sp)
    291c:	d9000515 	stw	r4,20(sp)
    2920:	d8c00415 	stw	r3,16(sp)
    2924:	d8000315 	stw	zero,12(sp)
    2928:	00c00084 	movi	r3,2
    292c:	d8c00215 	stw	r3,8(sp)
    2930:	d8800115 	stw	r2,4(sp)
    2934:	00800184 	movi	r2,6
    2938:	d8800015 	stw	r2,0(sp)
    293c:	01c02004 	movi	r7,128
    2940:	400b883a 	mov	r5,r8
    2944:	e13ffb17 	ldw	r4,-20(fp)
    2948:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    294c:	e037883a 	mov	sp,fp
    2950:	dfc00117 	ldw	ra,4(sp)
    2954:	df000017 	ldw	fp,0(sp)
    2958:	dec00204 	addi	sp,sp,8
    295c:	f800283a 	ret

00002960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    2960:	deffdf04 	addi	sp,sp,-132
    2964:	dfc02015 	stw	ra,128(sp)
    2968:	df001f15 	stw	fp,124(sp)
    296c:	df001f04 	addi	fp,sp,124
    2970:	e13ffc15 	stw	r4,-16(fp)
    2974:	2809883a 	mov	r4,r5
    2978:	3007883a 	mov	r3,r6
    297c:	3805883a 	mov	r2,r7
    2980:	e13ffd05 	stb	r4,-12(fp)
    2984:	e0fffe05 	stb	r3,-8(fp)
    2988:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    298c:	00801004 	movi	r2,64
    2990:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    2994:	e0bfec04 	addi	r2,fp,-80
    2998:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    299c:	e13ffd03 	ldbu	r4,-12(fp)
    29a0:	e17ffe03 	ldbu	r5,-8(fp)
    29a4:	e0bfff03 	ldbu	r2,-4(fp)
    29a8:	e0ffec04 	addi	r3,fp,-80
    29ac:	d8c00115 	stw	r3,4(sp)
    29b0:	d8800015 	stw	r2,0(sp)
    29b4:	01c00244 	movi	r7,9
    29b8:	280d883a 	mov	r6,r5
    29bc:	200b883a 	mov	r5,r4
    29c0:	e13ffc17 	ldw	r4,-16(fp)
    29c4:	00028cc0 	call	28cc <_ZN3USB12getConfDescrEhhthPh>
    29c8:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    29cc:	e0bfeb03 	ldbu	r2,-84(fp)
    29d0:	10000226 	beq	r2,zero,29dc <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    29d4:	e0bfeb03 	ldbu	r2,-84(fp)
    29d8:	00001a06 	br	2a44 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    29dc:	e0bfea17 	ldw	r2,-88(fp)
    29e0:	10c00083 	ldbu	r3,2(r2)
    29e4:	108000c3 	ldbu	r2,3(r2)
    29e8:	1004923a 	slli	r2,r2,8
    29ec:	10c4b03a 	or	r2,r2,r3
    29f0:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    29f4:	e17ffd03 	ldbu	r5,-12(fp)
    29f8:	e1bffe03 	ldbu	r6,-8(fp)
    29fc:	e0bfff03 	ldbu	r2,-4(fp)
    2a00:	e0ffeb8b 	ldhu	r3,-82(fp)
    2a04:	e1000217 	ldw	r4,8(fp)
    2a08:	d9000715 	stw	r4,28(sp)
    2a0c:	e13fec04 	addi	r4,fp,-80
    2a10:	d9000615 	stw	r4,24(sp)
    2a14:	01001004 	movi	r4,64
    2a18:	d9000515 	stw	r4,20(sp)
    2a1c:	d8c00415 	stw	r3,16(sp)
    2a20:	d8000315 	stw	zero,12(sp)
    2a24:	00c00084 	movi	r3,2
    2a28:	d8c00215 	stw	r3,8(sp)
    2a2c:	d8800115 	stw	r2,4(sp)
    2a30:	00800184 	movi	r2,6
    2a34:	d8800015 	stw	r2,0(sp)
    2a38:	01c02004 	movi	r7,128
    2a3c:	e13ffc17 	ldw	r4,-16(fp)
    2a40:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2a44:	e037883a 	mov	sp,fp
    2a48:	dfc00117 	ldw	ra,4(sp)
    2a4c:	df000017 	ldw	fp,0(sp)
    2a50:	dec00204 	addi	sp,sp,8
    2a54:	f800283a 	ret

00002a58 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2a58:	defff004 	addi	sp,sp,-64
    2a5c:	dfc00f15 	stw	ra,60(sp)
    2a60:	df000e15 	stw	fp,56(sp)
    2a64:	df000e04 	addi	fp,sp,56
    2a68:	e13ffa15 	stw	r4,-24(fp)
    2a6c:	2811883a 	mov	r8,r5
    2a70:	300b883a 	mov	r5,r6
    2a74:	3809883a 	mov	r4,r7
    2a78:	e0c00217 	ldw	r3,8(fp)
    2a7c:	e0800317 	ldw	r2,12(fp)
    2a80:	e23ffb05 	stb	r8,-20(fp)
    2a84:	e17ffc05 	stb	r5,-16(fp)
    2a88:	e13ffd0d 	sth	r4,-12(fp)
    2a8c:	e0fffe05 	stb	r3,-8(fp)
    2a90:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2a94:	e23ffb03 	ldbu	r8,-20(fp)
    2a98:	e27ffc03 	ldbu	r9,-16(fp)
    2a9c:	e0bffe03 	ldbu	r2,-8(fp)
    2aa0:	e0ffff0b 	ldhu	r3,-4(fp)
    2aa4:	e13ffd0b 	ldhu	r4,-12(fp)
    2aa8:	e17ffd0b 	ldhu	r5,-12(fp)
    2aac:	d8000715 	stw	zero,28(sp)
    2ab0:	e1800417 	ldw	r6,16(fp)
    2ab4:	d9800615 	stw	r6,24(sp)
    2ab8:	d9400515 	stw	r5,20(sp)
    2abc:	d9000415 	stw	r4,16(sp)
    2ac0:	d8c00315 	stw	r3,12(sp)
    2ac4:	00c000c4 	movi	r3,3
    2ac8:	d8c00215 	stw	r3,8(sp)
    2acc:	d8800115 	stw	r2,4(sp)
    2ad0:	00800184 	movi	r2,6
    2ad4:	d8800015 	stw	r2,0(sp)
    2ad8:	01c02004 	movi	r7,128
    2adc:	480d883a 	mov	r6,r9
    2ae0:	400b883a 	mov	r5,r8
    2ae4:	e13ffa17 	ldw	r4,-24(fp)
    2ae8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2aec:	e037883a 	mov	sp,fp
    2af0:	dfc00117 	ldw	ra,4(sp)
    2af4:	df000017 	ldw	fp,0(sp)
    2af8:	dec00204 	addi	sp,sp,8
    2afc:	f800283a 	ret

00002b00 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    2b00:	defff104 	addi	sp,sp,-60
    2b04:	dfc00e15 	stw	ra,56(sp)
    2b08:	df000d15 	stw	fp,52(sp)
    2b0c:	df000d04 	addi	fp,sp,52
    2b10:	e13ffc15 	stw	r4,-16(fp)
    2b14:	2809883a 	mov	r4,r5
    2b18:	3007883a 	mov	r3,r6
    2b1c:	3805883a 	mov	r2,r7
    2b20:	e13ffd05 	stb	r4,-12(fp)
    2b24:	e0fffe05 	stb	r3,-8(fp)
    2b28:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2b2c:	e0fffd03 	ldbu	r3,-12(fp)
    2b30:	e13ffe03 	ldbu	r4,-8(fp)
    2b34:	e0bfff03 	ldbu	r2,-4(fp)
    2b38:	d8000715 	stw	zero,28(sp)
    2b3c:	d8000615 	stw	zero,24(sp)
    2b40:	d8000515 	stw	zero,20(sp)
    2b44:	d8000415 	stw	zero,16(sp)
    2b48:	d8000315 	stw	zero,12(sp)
    2b4c:	d8000215 	stw	zero,8(sp)
    2b50:	d8800115 	stw	r2,4(sp)
    2b54:	00800144 	movi	r2,5
    2b58:	d8800015 	stw	r2,0(sp)
    2b5c:	000f883a 	mov	r7,zero
    2b60:	200d883a 	mov	r6,r4
    2b64:	180b883a 	mov	r5,r3
    2b68:	e13ffc17 	ldw	r4,-16(fp)
    2b6c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    2b70:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2b74:	01004b04 	movi	r4,300
    2b78:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2b7c:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    2b80:	e037883a 	mov	sp,fp
    2b84:	dfc00117 	ldw	ra,4(sp)
    2b88:	df000017 	ldw	fp,0(sp)
    2b8c:	dec00204 	addi	sp,sp,8
    2b90:	f800283a 	ret

00002b94 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2b94:	defff204 	addi	sp,sp,-56
    2b98:	dfc00d15 	stw	ra,52(sp)
    2b9c:	df000c15 	stw	fp,48(sp)
    2ba0:	df000c04 	addi	fp,sp,48
    2ba4:	e13ffc15 	stw	r4,-16(fp)
    2ba8:	2809883a 	mov	r4,r5
    2bac:	3007883a 	mov	r3,r6
    2bb0:	3805883a 	mov	r2,r7
    2bb4:	e13ffd05 	stb	r4,-12(fp)
    2bb8:	e0fffe05 	stb	r3,-8(fp)
    2bbc:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    2bc0:	e0fffd03 	ldbu	r3,-12(fp)
    2bc4:	e13ffe03 	ldbu	r4,-8(fp)
    2bc8:	e0bfff03 	ldbu	r2,-4(fp)
    2bcc:	d8000715 	stw	zero,28(sp)
    2bd0:	d8000615 	stw	zero,24(sp)
    2bd4:	d8000515 	stw	zero,20(sp)
    2bd8:	d8000415 	stw	zero,16(sp)
    2bdc:	d8000315 	stw	zero,12(sp)
    2be0:	d8000215 	stw	zero,8(sp)
    2be4:	d8800115 	stw	r2,4(sp)
    2be8:	00800244 	movi	r2,9
    2bec:	d8800015 	stw	r2,0(sp)
    2bf0:	000f883a 	mov	r7,zero
    2bf4:	200d883a 	mov	r6,r4
    2bf8:	180b883a 	mov	r5,r3
    2bfc:	e13ffc17 	ldw	r4,-16(fp)
    2c00:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2c04:	e037883a 	mov	sp,fp
    2c08:	dfc00117 	ldw	ra,4(sp)
    2c0c:	df000017 	ldw	fp,0(sp)
    2c10:	dec00204 	addi	sp,sp,8
    2c14:	f800283a 	ret

00002c18 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2c18:	defffe04 	addi	sp,sp,-8
    2c1c:	df000115 	stw	fp,4(sp)
    2c20:	df000104 	addi	fp,sp,4
    2c24:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2c28:	e0bfff17 	ldw	r2,-4(fp)
        };
    2c2c:	e037883a 	mov	sp,fp
    2c30:	df000017 	ldw	fp,0(sp)
    2c34:	dec00104 	addi	sp,sp,4
    2c38:	f800283a 	ret

00002c3c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2c3c:	defffe04 	addi	sp,sp,-8
    2c40:	df000115 	stw	fp,4(sp)
    2c44:	df000104 	addi	fp,sp,4
    2c48:	e13fff15 	stw	r4,-4(fp)
    2c4c:	008000b4 	movhi	r2,2
    2c50:	108a9704 	addi	r2,r2,10844
    2c54:	e0ffff17 	ldw	r3,-4(fp)
    2c58:	18800015 	stw	r2,0(r3)
    2c5c:	0001883a 	nop
    2c60:	e037883a 	mov	sp,fp
    2c64:	df000017 	ldw	fp,0(sp)
    2c68:	dec00104 	addi	sp,sp,4
    2c6c:	f800283a 	ret

00002c70 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    2c70:	defffd04 	addi	sp,sp,-12
    2c74:	dfc00215 	stw	ra,8(sp)
    2c78:	df000115 	stw	fp,4(sp)
    2c7c:	df000104 	addi	fp,sp,4
    2c80:	e13fff15 	stw	r4,-4(fp)
    2c84:	e0bfff17 	ldw	r2,-4(fp)
    2c88:	1009883a 	mov	r4,r2
    2c8c:	0002c3c0 	call	2c3c <_ZN11AddressPoolC1Ev>
    2c90:	008000b4 	movhi	r2,2
    2c94:	108a9204 	addi	r2,r2,10824
    2c98:	e0ffff17 	ldw	r3,-4(fp)
    2c9c:	18800015 	stw	r2,0(r3)
    2ca0:	e0bfff17 	ldw	r2,-4(fp)
    2ca4:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    2ca8:	000b883a 	mov	r5,zero
    2cac:	e13fff17 	ldw	r4,-4(fp)
    2cb0:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    2cb4:	e0bfff17 	ldw	r2,-4(fp)
    2cb8:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    2cbc:	e0bfff17 	ldw	r2,-4(fp)
    2cc0:	10c00104 	addi	r3,r2,4
    2cc4:	e0bfff17 	ldw	r2,-4(fp)
    2cc8:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    2ccc:	e0bfff17 	ldw	r2,-4(fp)
    2cd0:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    2cd4:	e0bfff17 	ldw	r2,-4(fp)
    2cd8:	00c00204 	movi	r3,8
    2cdc:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    2ce0:	e0bfff17 	ldw	r2,-4(fp)
    2ce4:	11000183 	ldbu	r4,6(r2)
    2ce8:	00ffff84 	movi	r3,-2
    2cec:	20c6703a 	and	r3,r4,r3
    2cf0:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    2cf4:	e0bfff17 	ldw	r2,-4(fp)
    2cf8:	11000183 	ldbu	r4,6(r2)
    2cfc:	00ffff44 	movi	r3,-3
    2d00:	20c6703a 	and	r3,r4,r3
    2d04:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2d08:	e0bfff17 	ldw	r2,-4(fp)
    2d0c:	10c00183 	ldbu	r3,6(r2)
    2d10:	18c000cc 	andi	r3,r3,3
    2d14:	18c00f14 	ori	r3,r3,60
    2d18:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2d1c:	e13fff17 	ldw	r4,-4(fp)
    2d20:	00032040 	call	3204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2d24:	0001883a 	nop
    2d28:	e037883a 	mov	sp,fp
    2d2c:	dfc00117 	ldw	ra,4(sp)
    2d30:	df000017 	ldw	fp,0(sp)
    2d34:	dec00204 	addi	sp,sp,8
    2d38:	f800283a 	ret

00002d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2d3c:	defffa04 	addi	sp,sp,-24
    2d40:	dfc00515 	stw	ra,20(sp)
    2d44:	df000415 	stw	fp,16(sp)
    2d48:	dc000315 	stw	r16,12(sp)
    2d4c:	df000404 	addi	fp,sp,16
    2d50:	e13ffd15 	stw	r4,-12(fp)
    2d54:	2805883a 	mov	r2,r5
    2d58:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2d5c:	e0bffe03 	ldbu	r2,-8(fp)
    2d60:	1000031e 	bne	r2,zero,2d70 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2d64:	e0bffd17 	ldw	r2,-12(fp)
    2d68:	10800204 	addi	r2,r2,8
    2d6c:	00001006 	br	2db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    2d70:	e0bffe03 	ldbu	r2,-8(fp)
    2d74:	100b883a 	mov	r5,r2
    2d78:	e13ffd17 	ldw	r4,-12(fp)
    2d7c:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2d80:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2d84:	e0bffc03 	ldbu	r2,-16(fp)
    2d88:	10000826 	beq	r2,zero,2dac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2d8c:	e0bffd17 	ldw	r2,-12(fp)
    2d90:	14000204 	addi	r16,r2,8
    2d94:	e0bffc03 	ldbu	r2,-16(fp)
    2d98:	014001c4 	movi	r5,7
    2d9c:	1009883a 	mov	r4,r2
    2da0:	000cca00 	call	cca0 <__mulsi3>
    2da4:	8085883a 	add	r2,r16,r2
    2da8:	00000106 	br	2db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    2dac:	0005883a 	mov	r2,zero
        };
    2db0:	e6ffff04 	addi	sp,fp,-4
    2db4:	dfc00217 	ldw	ra,8(sp)
    2db8:	df000117 	ldw	fp,4(sp)
    2dbc:	dc000017 	ldw	r16,0(sp)
    2dc0:	dec00304 	addi	sp,sp,12
    2dc4:	f800283a 	ret

00002dc8 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    2dc8:	defffd04 	addi	sp,sp,-12
    2dcc:	df000215 	stw	fp,8(sp)
    2dd0:	df000204 	addi	fp,sp,8
    2dd4:	2005883a 	mov	r2,r4
    2dd8:	e17fff15 	stw	r5,-4(fp)
    2ddc:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    2de0:	0001883a 	nop
    2de4:	e037883a 	mov	sp,fp
    2de8:	df000017 	ldw	fp,0(sp)
    2dec:	dec00104 	addi	sp,sp,4
    2df0:	f800283a 	ret

00002df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    2df4:	defff804 	addi	sp,sp,-32
    2df8:	dfc00715 	stw	ra,28(sp)
    2dfc:	df000615 	stw	fp,24(sp)
    2e00:	dc000515 	stw	r16,20(sp)
    2e04:	df000604 	addi	fp,sp,24
    2e08:	e13ffb15 	stw	r4,-20(fp)
    2e0c:	2809883a 	mov	r4,r5
    2e10:	3007883a 	mov	r3,r6
    2e14:	3805883a 	mov	r2,r7
    2e18:	e13ffc05 	stb	r4,-16(fp)
    2e1c:	e0fffd05 	stb	r3,-12(fp)
    2e20:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2e24:	e0bffc03 	ldbu	r2,-16(fp)
    2e28:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2e2c:	e0fffa43 	ldbu	r3,-23(fp)
    2e30:	00bfe004 	movi	r2,-128
    2e34:	1884703a 	and	r2,r3,r2
    2e38:	10803fcc 	andi	r2,r2,255
    2e3c:	1000031e 	bne	r2,zero,2e4c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2e40:	e0bffe03 	ldbu	r2,-8(fp)
    2e44:	10800230 	cmpltui	r2,r2,8
    2e48:	1000021e 	bne	r2,zero,2e54 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2e4c:	0005883a 	mov	r2,zero
    2e50:	00007a06 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2e54:	e0bffd03 	ldbu	r2,-12(fp)
    2e58:	10000726 	beq	r2,zero,2e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2e5c:	e0bffb17 	ldw	r2,-20(fp)
    2e60:	108001c3 	ldbu	r2,7(r2)
    2e64:	10803fcc 	andi	r2,r2,255
    2e68:	108001d8 	cmpnei	r2,r2,7
    2e6c:	1000021e 	bne	r2,zero,2e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2e70:	0005883a 	mov	r2,zero
    2e74:	00007106 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2e78:	000b883a 	mov	r5,zero
    2e7c:	e13ffb17 	ldw	r4,-20(fp)
    2e80:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2e84:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2e88:	e0bffa03 	ldbu	r2,-24(fp)
    2e8c:	1000021e 	bne	r2,zero,2e98 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2e90:	0005883a 	mov	r2,zero
    2e94:	00006906 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2e98:	e0bffa43 	ldbu	r2,-23(fp)
    2e9c:	10803fcc 	andi	r2,r2,255
    2ea0:	1000241e 	bne	r2,zero,2f34 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2ea4:	e0bffd03 	ldbu	r2,-12(fp)
    2ea8:	10001026 	beq	r2,zero,2eec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2eac:	e0bffa03 	ldbu	r2,-24(fp)
    2eb0:	e43ffb17 	ldw	r16,-20(fp)
    2eb4:	014001c4 	movi	r5,7
    2eb8:	1009883a 	mov	r4,r2
    2ebc:	000cca00 	call	cca0 <__mulsi3>
    2ec0:	8085883a 	add	r2,r16,r2
    2ec4:	10800304 	addi	r2,r2,12
    2ec8:	00c01044 	movi	r3,65
    2ecc:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2ed0:	e0bffb17 	ldw	r2,-20(fp)
    2ed4:	108001c3 	ldbu	r2,7(r2)
    2ed8:	10800044 	addi	r2,r2,1
    2edc:	1007883a 	mov	r3,r2
    2ee0:	e0bffb17 	ldw	r2,-20(fp)
    2ee4:	10c001c5 	stb	r3,7(r2)
    2ee8:	00000906 	br	2f10 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2eec:	e0bffa03 	ldbu	r2,-24(fp)
    2ef0:	e43ffb17 	ldw	r16,-20(fp)
    2ef4:	014001c4 	movi	r5,7
    2ef8:	1009883a 	mov	r4,r2
    2efc:	000cca00 	call	cca0 <__mulsi3>
    2f00:	8085883a 	add	r2,r16,r2
    2f04:	10800304 	addi	r2,r2,12
    2f08:	00c00044 	movi	r3,1
    2f0c:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2f10:	e0bffa03 	ldbu	r2,-24(fp)
    2f14:	e43ffb17 	ldw	r16,-20(fp)
    2f18:	014001c4 	movi	r5,7
    2f1c:	1009883a 	mov	r4,r2
    2f20:	000cca00 	call	cca0 <__mulsi3>
    2f24:	8085883a 	add	r2,r16,r2
    2f28:	10800304 	addi	r2,r2,12
    2f2c:	10800003 	ldbu	r2,0(r2)
    2f30:	00004206 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2f34:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2f38:	e0bffa43 	ldbu	r2,-23(fp)
    2f3c:	108001cc 	andi	r2,r2,7
    2f40:	108001cc 	andi	r2,r2,7
    2f44:	100890fa 	slli	r4,r2,3
    2f48:	e0fffa83 	ldbu	r3,-22(fp)
    2f4c:	00bff1c4 	movi	r2,-57
    2f50:	1884703a 	and	r2,r3,r2
    2f54:	1007883a 	mov	r3,r2
    2f58:	2005883a 	mov	r2,r4
    2f5c:	1884b03a 	or	r2,r3,r2
    2f60:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2f64:	e0bffd03 	ldbu	r2,-12(fp)
    2f68:	10001526 	beq	r2,zero,2fc0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2f6c:	e0bffa83 	ldbu	r2,-22(fp)
    2f70:	10801014 	ori	r2,r2,64
    2f74:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2f78:	e0bffb17 	ldw	r2,-20(fp)
    2f7c:	108001c3 	ldbu	r2,7(r2)
    2f80:	10800044 	addi	r2,r2,1
    2f84:	1007883a 	mov	r3,r2
    2f88:	e0bffb17 	ldw	r2,-20(fp)
    2f8c:	10c001c5 	stb	r3,7(r2)
    2f90:	e0bffb17 	ldw	r2,-20(fp)
    2f94:	108001c3 	ldbu	r2,7(r2)
    2f98:	108001cc 	andi	r2,r2,7
    2f9c:	110001cc 	andi	r4,r2,7
    2fa0:	e0fffa83 	ldbu	r3,-22(fp)
    2fa4:	00bffe04 	movi	r2,-8
    2fa8:	1884703a 	and	r2,r3,r2
    2fac:	1007883a 	mov	r3,r2
    2fb0:	2005883a 	mov	r2,r4
    2fb4:	1884b03a 	or	r2,r3,r2
    2fb8:	e0bffa85 	stb	r2,-22(fp)
    2fbc:	00000e06 	br	2ff8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    2fc0:	e0fffa83 	ldbu	r3,-22(fp)
    2fc4:	00bfefc4 	movi	r2,-65
    2fc8:	1884703a 	and	r2,r3,r2
    2fcc:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    2fd0:	e0bffe03 	ldbu	r2,-8(fp)
    2fd4:	108001cc 	andi	r2,r2,7
    2fd8:	110001cc 	andi	r4,r2,7
    2fdc:	e0fffa83 	ldbu	r3,-22(fp)
    2fe0:	00bffe04 	movi	r2,-8
    2fe4:	1884703a 	and	r2,r3,r2
    2fe8:	1007883a 	mov	r3,r2
    2fec:	2005883a 	mov	r2,r4
    2ff0:	1884b03a 	or	r2,r3,r2
    2ff4:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    2ff8:	e0bffa03 	ldbu	r2,-24(fp)
    2ffc:	e43ffb17 	ldw	r16,-20(fp)
    3000:	014001c4 	movi	r5,7
    3004:	1009883a 	mov	r4,r2
    3008:	000cca00 	call	cca0 <__mulsi3>
    300c:	8085883a 	add	r2,r16,r2
    3010:	10800304 	addi	r2,r2,12
    3014:	e0fffa83 	ldbu	r3,-22(fp)
    3018:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    301c:	e0bffa03 	ldbu	r2,-24(fp)
    3020:	e43ffb17 	ldw	r16,-20(fp)
    3024:	014001c4 	movi	r5,7
    3028:	1009883a 	mov	r4,r2
    302c:	000cca00 	call	cca0 <__mulsi3>
    3030:	8085883a 	add	r2,r16,r2
    3034:	10800304 	addi	r2,r2,12
    3038:	10800003 	ldbu	r2,0(r2)
        };
    303c:	e6ffff04 	addi	sp,fp,-4
    3040:	dfc00217 	ldw	ra,8(sp)
    3044:	df000117 	ldw	fp,4(sp)
    3048:	dc000017 	ldw	r16,0(sp)
    304c:	dec00304 	addi	sp,sp,12
    3050:	f800283a 	ret

00003054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    3054:	defffb04 	addi	sp,sp,-20
    3058:	dfc00415 	stw	ra,16(sp)
    305c:	df000315 	stw	fp,12(sp)
    3060:	df000304 	addi	fp,sp,12
    3064:	e13ffe15 	stw	r4,-8(fp)
    3068:	2805883a 	mov	r2,r5
    306c:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    3070:	e0bfff03 	ldbu	r2,-4(fp)
    3074:	10801058 	cmpnei	r2,r2,65
    3078:	1000031e 	bne	r2,zero,3088 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    307c:	e13ffe17 	ldw	r4,-8(fp)
    3080:	00032040 	call	3204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    3084:	00000906 	br	30ac <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    3088:	e0bfff03 	ldbu	r2,-4(fp)
    308c:	100b883a 	mov	r5,r2
    3090:	e13ffe17 	ldw	r4,-8(fp)
    3094:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    3098:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    309c:	e0bffd03 	ldbu	r2,-12(fp)
    30a0:	100b883a 	mov	r5,r2
    30a4:	e13ffe17 	ldw	r4,-8(fp)
    30a8:	00033000 	call	3300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    30ac:	e037883a 	mov	sp,fp
    30b0:	dfc00117 	ldw	ra,4(sp)
    30b4:	df000017 	ldw	fp,0(sp)
    30b8:	dec00204 	addi	sp,sp,8
    30bc:	f800283a 	ret

000030c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    30c0:	defffa04 	addi	sp,sp,-24
    30c4:	dfc00515 	stw	ra,20(sp)
    30c8:	df000415 	stw	fp,16(sp)
    30cc:	dc400315 	stw	r17,12(sp)
    30d0:	dc000215 	stw	r16,8(sp)
    30d4:	df000404 	addi	fp,sp,16
    30d8:	e13ffc15 	stw	r4,-16(fp)
    30dc:	2805883a 	mov	r2,r5
    30e0:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    30e4:	e0bffd03 	ldbu	r2,-12(fp)
    30e8:	e43ffc17 	ldw	r16,-16(fp)
    30ec:	014001c4 	movi	r5,7
    30f0:	1009883a 	mov	r4,r2
    30f4:	000cca00 	call	cca0 <__mulsi3>
    30f8:	8085883a 	add	r2,r16,r2
    30fc:	10800304 	addi	r2,r2,12
    3100:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    3104:	e0bffd03 	ldbu	r2,-12(fp)
    3108:	e43ffc17 	ldw	r16,-16(fp)
    310c:	014001c4 	movi	r5,7
    3110:	1009883a 	mov	r4,r2
    3114:	000cca00 	call	cca0 <__mulsi3>
    3118:	8085883a 	add	r2,r16,r2
    311c:	10800344 	addi	r2,r2,13
    3120:	00c00044 	movi	r3,1
    3124:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    3128:	e0bffd03 	ldbu	r2,-12(fp)
    312c:	e43ffc17 	ldw	r16,-16(fp)
    3130:	014001c4 	movi	r5,7
    3134:	1009883a 	mov	r4,r2
    3138:	000cca00 	call	cca0 <__mulsi3>
    313c:	8085883a 	add	r2,r16,r2
    3140:	10800384 	addi	r2,r2,14
    3144:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    3148:	e0fffd03 	ldbu	r3,-12(fp)
    314c:	e0bffc17 	ldw	r2,-16(fp)
    3150:	14000104 	addi	r16,r2,4
    3154:	e47ffc17 	ldw	r17,-16(fp)
    3158:	014001c4 	movi	r5,7
    315c:	1809883a 	mov	r4,r3
    3160:	000cca00 	call	cca0 <__mulsi3>
    3164:	8885883a 	add	r2,r17,r2
    3168:	10800204 	addi	r2,r2,8
    316c:	81403fcc 	andi	r5,r16,255
    3170:	10c00003 	ldbu	r3,0(r2)
    3174:	1806703a 	and	r3,r3,zero
    3178:	1809883a 	mov	r4,r3
    317c:	2807883a 	mov	r3,r5
    3180:	20c6b03a 	or	r3,r4,r3
    3184:	10c00005 	stb	r3,0(r2)
    3188:	8006d23a 	srli	r3,r16,8
    318c:	19403fcc 	andi	r5,r3,255
    3190:	10c00043 	ldbu	r3,1(r2)
    3194:	1806703a 	and	r3,r3,zero
    3198:	1809883a 	mov	r4,r3
    319c:	2807883a 	mov	r3,r5
    31a0:	20c6b03a 	or	r3,r4,r3
    31a4:	10c00045 	stb	r3,1(r2)
    31a8:	8006d43a 	srli	r3,r16,16
    31ac:	19403fcc 	andi	r5,r3,255
    31b0:	10c00083 	ldbu	r3,2(r2)
    31b4:	1806703a 	and	r3,r3,zero
    31b8:	1809883a 	mov	r4,r3
    31bc:	2807883a 	mov	r3,r5
    31c0:	20c6b03a 	or	r3,r4,r3
    31c4:	10c00085 	stb	r3,2(r2)
    31c8:	800ad63a 	srli	r5,r16,24
    31cc:	10c000c3 	ldbu	r3,3(r2)
    31d0:	1806703a 	and	r3,r3,zero
    31d4:	1809883a 	mov	r4,r3
    31d8:	2807883a 	mov	r3,r5
    31dc:	20c6b03a 	or	r3,r4,r3
    31e0:	10c000c5 	stb	r3,3(r2)
        };
    31e4:	0001883a 	nop
    31e8:	e6fffe04 	addi	sp,fp,-8
    31ec:	dfc00317 	ldw	ra,12(sp)
    31f0:	df000217 	ldw	fp,8(sp)
    31f4:	dc400117 	ldw	r17,4(sp)
    31f8:	dc000017 	ldw	r16,0(sp)
    31fc:	dec00404 	addi	sp,sp,16
    3200:	f800283a 	ret

00003204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    3204:	defffc04 	addi	sp,sp,-16
    3208:	dfc00315 	stw	ra,12(sp)
    320c:	df000215 	stw	fp,8(sp)
    3210:	df000204 	addi	fp,sp,8
    3214:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    3218:	00800044 	movi	r2,1
    321c:	e0bffe05 	stb	r2,-8(fp)
    3220:	e0bffe03 	ldbu	r2,-8(fp)
    3224:	10800428 	cmpgeui	r2,r2,16
    3228:	1000081e 	bne	r2,zero,324c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    322c:	e0bffe03 	ldbu	r2,-8(fp)
    3230:	100b883a 	mov	r5,r2
    3234:	e13fff17 	ldw	r4,-4(fp)
    3238:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    323c:	e0bffe03 	ldbu	r2,-8(fp)
    3240:	10800044 	addi	r2,r2,1
    3244:	e0bffe05 	stb	r2,-8(fp)
    3248:	003ff506 	br	3220 <__alt_data_end+0xfc003220>
                        InitEntry(i);

                hubCounter = 0;
    324c:	e0bfff17 	ldw	r2,-4(fp)
    3250:	100001c5 	stb	zero,7(r2)
        };
    3254:	0001883a 	nop
    3258:	e037883a 	mov	sp,fp
    325c:	dfc00117 	ldw	ra,4(sp)
    3260:	df000017 	ldw	fp,0(sp)
    3264:	dec00204 	addi	sp,sp,8
    3268:	f800283a 	ret

0000326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    326c:	defffa04 	addi	sp,sp,-24
    3270:	dfc00515 	stw	ra,20(sp)
    3274:	df000415 	stw	fp,16(sp)
    3278:	dc000315 	stw	r16,12(sp)
    327c:	df000404 	addi	fp,sp,16
    3280:	e13ffd15 	stw	r4,-12(fp)
    3284:	2805883a 	mov	r2,r5
    3288:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    328c:	00800044 	movi	r2,1
    3290:	e0bffc05 	stb	r2,-16(fp)
    3294:	e0bffc03 	ldbu	r2,-16(fp)
    3298:	10800428 	cmpgeui	r2,r2,16
    329c:	1000111e 	bne	r2,zero,32e4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    32a0:	e0bffc03 	ldbu	r2,-16(fp)
    32a4:	e43ffd17 	ldw	r16,-12(fp)
    32a8:	014001c4 	movi	r5,7
    32ac:	1009883a 	mov	r4,r2
    32b0:	000cca00 	call	cca0 <__mulsi3>
    32b4:	8085883a 	add	r2,r16,r2
    32b8:	10800304 	addi	r2,r2,12
    32bc:	10800003 	ldbu	r2,0(r2)
    32c0:	10c03fcc 	andi	r3,r2,255
    32c4:	e0bffe03 	ldbu	r2,-8(fp)
    32c8:	1880021e 	bne	r3,r2,32d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    32cc:	e0bffc03 	ldbu	r2,-16(fp)
    32d0:	00000506 	br	32e8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    32d4:	e0bffc03 	ldbu	r2,-16(fp)
    32d8:	10800044 	addi	r2,r2,1
    32dc:	e0bffc05 	stb	r2,-16(fp)
    32e0:	003fec06 	br	3294 <__alt_data_end+0xfc003294>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    32e4:	0005883a 	mov	r2,zero
        };
    32e8:	e6ffff04 	addi	sp,fp,-4
    32ec:	dfc00217 	ldw	ra,8(sp)
    32f0:	df000117 	ldw	fp,4(sp)
    32f4:	dc000017 	ldw	r16,0(sp)
    32f8:	dec00304 	addi	sp,sp,12
    32fc:	f800283a 	ret

00003300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    3300:	defffa04 	addi	sp,sp,-24
    3304:	dfc00515 	stw	ra,20(sp)
    3308:	df000415 	stw	fp,16(sp)
    330c:	dc000315 	stw	r16,12(sp)
    3310:	df000404 	addi	fp,sp,16
    3314:	e13ffd15 	stw	r4,-12(fp)
    3318:	2805883a 	mov	r2,r5
    331c:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    3320:	e0bffe03 	ldbu	r2,-8(fp)
    3324:	10003026 	beq	r2,zero,33e8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    3328:	e0bffe03 	ldbu	r2,-8(fp)
    332c:	e43ffd17 	ldw	r16,-12(fp)
    3330:	014001c4 	movi	r5,7
    3334:	1009883a 	mov	r4,r2
    3338:	000cca00 	call	cca0 <__mulsi3>
    333c:	8085883a 	add	r2,r16,r2
    3340:	10800304 	addi	r2,r2,12
    3344:	10800003 	ldbu	r2,0(r2)
    3348:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    334c:	e0bffc43 	ldbu	r2,-15(fp)
    3350:	1080100c 	andi	r2,r2,64
    3354:	10803fcc 	andi	r2,r2,255
    3358:	10001e26 	beq	r2,zero,33d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    335c:	00800044 	movi	r2,1
    3360:	e0bffc05 	stb	r2,-16(fp)
    3364:	e0bffc03 	ldbu	r2,-16(fp)
    3368:	100d883a 	mov	r6,r2
    336c:	e17ffc43 	ldbu	r5,-15(fp)
    3370:	e13ffd17 	ldw	r4,-12(fp)
    3374:	00034040 	call	3404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    3378:	e0bffc05 	stb	r2,-16(fp)
    337c:	e0bffc03 	ldbu	r2,-16(fp)
    3380:	1004c03a 	cmpne	r2,r2,zero
    3384:	10803fcc 	andi	r2,r2,255
    3388:	10000526 	beq	r2,zero,33a0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    338c:	e0bffc03 	ldbu	r2,-16(fp)
    3390:	100b883a 	mov	r5,r2
    3394:	e13ffd17 	ldw	r4,-12(fp)
    3398:	00033000 	call	3300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    339c:	003ff106 	br	3364 <__alt_data_end+0xfc003364>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    33a0:	e0bffd17 	ldw	r2,-12(fp)
    33a4:	10c001c3 	ldbu	r3,7(r2)
    33a8:	e0bffc43 	ldbu	r2,-15(fp)
    33ac:	108001cc 	andi	r2,r2,7
    33b0:	18c03fcc 	andi	r3,r3,255
    33b4:	10803fcc 	andi	r2,r2,255
    33b8:	1880061e 	bne	r3,r2,33d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    33bc:	e0bffd17 	ldw	r2,-12(fp)
    33c0:	108001c3 	ldbu	r2,7(r2)
    33c4:	10bfffc4 	addi	r2,r2,-1
    33c8:	1007883a 	mov	r3,r2
    33cc:	e0bffd17 	ldw	r2,-12(fp)
    33d0:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    33d4:	e0bffe03 	ldbu	r2,-8(fp)
    33d8:	100b883a 	mov	r5,r2
    33dc:	e13ffd17 	ldw	r4,-12(fp)
    33e0:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    33e4:	00000106 	br	33ec <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    33e8:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    33ec:	e6ffff04 	addi	sp,fp,-4
    33f0:	dfc00217 	ldw	ra,8(sp)
    33f4:	df000117 	ldw	fp,4(sp)
    33f8:	dc000017 	ldw	r16,0(sp)
    33fc:	dec00304 	addi	sp,sp,12
    3400:	f800283a 	ret

00003404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    3404:	defff904 	addi	sp,sp,-28
    3408:	dfc00615 	stw	ra,24(sp)
    340c:	df000515 	stw	fp,20(sp)
    3410:	dc000415 	stw	r16,16(sp)
    3414:	df000504 	addi	fp,sp,20
    3418:	e13ffc15 	stw	r4,-16(fp)
    341c:	e17ffd05 	stb	r5,-12(fp)
    3420:	3005883a 	mov	r2,r6
    3424:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3428:	e0bffe03 	ldbu	r2,-8(fp)
    342c:	10000526 	beq	r2,zero,3444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3430:	e0bffe03 	ldbu	r2,-8(fp)
    3434:	10800428 	cmpgeui	r2,r2,16
    3438:	1000021e 	bne	r2,zero,3444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    343c:	e0bffe03 	ldbu	r2,-8(fp)
    3440:	00000106 	br	3448 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3444:	00800044 	movi	r2,1
    3448:	e0bffb05 	stb	r2,-20(fp)
    344c:	e0bffb03 	ldbu	r2,-20(fp)
    3450:	10800428 	cmpgeui	r2,r2,16
    3454:	1000161e 	bne	r2,zero,34b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3458:	e0bffb03 	ldbu	r2,-20(fp)
    345c:	e43ffc17 	ldw	r16,-16(fp)
    3460:	014001c4 	movi	r5,7
    3464:	1009883a 	mov	r4,r2
    3468:	000cca00 	call	cca0 <__mulsi3>
    346c:	8085883a 	add	r2,r16,r2
    3470:	10800304 	addi	r2,r2,12
    3474:	10800003 	ldbu	r2,0(r2)
    3478:	1004d0fa 	srli	r2,r2,3
    347c:	108001cc 	andi	r2,r2,7
    3480:	1007883a 	mov	r3,r2
    3484:	e0bffd03 	ldbu	r2,-12(fp)
    3488:	108001cc 	andi	r2,r2,7
    348c:	18c03fcc 	andi	r3,r3,255
    3490:	10803fcc 	andi	r2,r2,255
    3494:	1880021e 	bne	r3,r2,34a0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3498:	e0bffb03 	ldbu	r2,-20(fp)
    349c:	00000506 	br	34b4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    34a0:	e0bffb03 	ldbu	r2,-20(fp)
    34a4:	10800044 	addi	r2,r2,1
    34a8:	e0bffb05 	stb	r2,-20(fp)
    34ac:	003fe706 	br	344c <__alt_data_end+0xfc00344c>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    34b0:	0005883a 	mov	r2,zero
        };
    34b4:	e6ffff04 	addi	sp,fp,-4
    34b8:	dfc00217 	ldw	ra,8(sp)
    34bc:	df000117 	ldw	fp,4(sp)
    34c0:	dc000017 	ldw	r16,0(sp)
    34c4:	dec00304 	addi	sp,sp,12
    34c8:	f800283a 	ret

000034cc <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    34cc:	defffb04 	addi	sp,sp,-20
    34d0:	dfc00415 	stw	ra,16(sp)
    34d4:	df000315 	stw	fp,12(sp)
    34d8:	df000304 	addi	fp,sp,12
    34dc:	e13ffe15 	stw	r4,-8(fp)
    34e0:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    34e4:	e0bffe17 	ldw	r2,-8(fp)
    34e8:	1009883a 	mov	r4,r2
    34ec:	0004e880 	call	4e88 <_ZN15USBDeviceConfigC1Ev>
    34f0:	e0bffe17 	ldw	r2,-8(fp)
    34f4:	10800104 	addi	r2,r2,4
    34f8:	1009883a 	mov	r4,r2
    34fc:	0004ebc0 	call	4ebc <_ZN17UsbConfigXtracterC1Ev>
    3500:	008000b4 	movhi	r2,2
    3504:	108ab304 	addi	r2,r2,10956
    3508:	e0fffe17 	ldw	r3,-8(fp)
    350c:	18800015 	stw	r2,0(r3)
    3510:	008000b4 	movhi	r2,2
    3514:	108ac004 	addi	r2,r2,11008
    3518:	e0fffe17 	ldw	r3,-8(fp)
    351c:	18800115 	stw	r2,4(r3)
    3520:	e0bffe17 	ldw	r2,-8(fp)
    3524:	e0ffff17 	ldw	r3,-4(fp)
    3528:	10c00315 	stw	r3,12(r2)
    352c:	e0bffe17 	ldw	r2,-8(fp)
    3530:	10000405 	stb	zero,16(r2)
    3534:	e0bffe17 	ldw	r2,-8(fp)
    3538:	00c00044 	movi	r3,1
    353c:	10c006c5 	stb	r3,27(r2)
    3540:	e0bffe17 	ldw	r2,-8(fp)
    3544:	10000715 	stw	zero,28(r2)
    3548:	e0bffe17 	ldw	r2,-8(fp)
    354c:	10000905 	stb	zero,36(r2)
    3550:	e0bffe17 	ldw	r2,-8(fp)
    3554:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3558:	e03ffd05 	stb	zero,-12(fp)
    355c:	e0bffd03 	ldbu	r2,-12(fp)
    3560:	108000e8 	cmpgeui	r2,r2,3
    3564:	1000431e 	bne	r2,zero,3674 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3568:	e0fffd03 	ldbu	r3,-12(fp)
    356c:	e13ffe17 	ldw	r4,-8(fp)
    3570:	1805883a 	mov	r2,r3
    3574:	1085883a 	add	r2,r2,r2
    3578:	10c5883a 	add	r2,r2,r3
    357c:	2085883a 	add	r2,r4,r2
    3580:	10800444 	addi	r2,r2,17
    3584:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3588:	e13ffd03 	ldbu	r4,-12(fp)
    358c:	e0bffd03 	ldbu	r2,-12(fp)
    3590:	10000226 	beq	r2,zero,359c <_ZN7XBOXONEC1EP3USB+0xd0>
    3594:	0007883a 	mov	r3,zero
    3598:	00000106 	br	35a0 <_ZN7XBOXONEC1EP3USB+0xd4>
    359c:	00c00204 	movi	r3,8
    35a0:	e17ffe17 	ldw	r5,-8(fp)
    35a4:	2005883a 	mov	r2,r4
    35a8:	1085883a 	add	r2,r2,r2
    35ac:	1105883a 	add	r2,r2,r4
    35b0:	2885883a 	add	r2,r5,r2
    35b4:	10800484 	addi	r2,r2,18
    35b8:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    35bc:	e0fffd03 	ldbu	r3,-12(fp)
    35c0:	e13ffe17 	ldw	r4,-8(fp)
    35c4:	1805883a 	mov	r2,r3
    35c8:	1085883a 	add	r2,r2,r2
    35cc:	10c5883a 	add	r2,r2,r3
    35d0:	2085883a 	add	r2,r4,r2
    35d4:	10800404 	addi	r2,r2,16
    35d8:	110000c3 	ldbu	r4,3(r2)
    35dc:	00ffff84 	movi	r3,-2
    35e0:	20c6703a 	and	r3,r4,r3
    35e4:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    35e8:	e0fffd03 	ldbu	r3,-12(fp)
    35ec:	e13ffe17 	ldw	r4,-8(fp)
    35f0:	1805883a 	mov	r2,r3
    35f4:	1085883a 	add	r2,r2,r2
    35f8:	10c5883a 	add	r2,r2,r3
    35fc:	2085883a 	add	r2,r4,r2
    3600:	10800404 	addi	r2,r2,16
    3604:	110000c3 	ldbu	r4,3(r2)
    3608:	00ffff44 	movi	r3,-3
    360c:	20c6703a 	and	r3,r4,r3
    3610:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    3614:	e13ffd03 	ldbu	r4,-12(fp)
    3618:	e0bffd03 	ldbu	r2,-12(fp)
    361c:	10000226 	beq	r2,zero,3628 <_ZN7XBOXONEC1EP3USB+0x15c>
    3620:	00c00044 	movi	r3,1
    3624:	00000106 	br	362c <_ZN7XBOXONEC1EP3USB+0x160>
    3628:	00c003c4 	movi	r3,15
    362c:	e17ffe17 	ldw	r5,-8(fp)
    3630:	2005883a 	mov	r2,r4
    3634:	1085883a 	add	r2,r2,r2
    3638:	1105883a 	add	r2,r2,r4
    363c:	2885883a 	add	r2,r5,r2
    3640:	10800404 	addi	r2,r2,16
    3644:	18c7883a 	add	r3,r3,r3
    3648:	18cb883a 	add	r5,r3,r3
    364c:	10c000c3 	ldbu	r3,3(r2)
    3650:	18c000cc 	andi	r3,r3,3
    3654:	1809883a 	mov	r4,r3
    3658:	2807883a 	mov	r3,r5
    365c:	20c6b03a 	or	r3,r4,r3
    3660:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3664:	e0bffd03 	ldbu	r2,-12(fp)
    3668:	10800044 	addi	r2,r2,1
    366c:	e0bffd05 	stb	r2,-12(fp)
    3670:	003fba06 	br	355c <__alt_data_end+0xfc00355c>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    3674:	e0bffe17 	ldw	r2,-8(fp)
    3678:	10800317 	ldw	r2,12(r2)
    367c:	10000626 	beq	r2,zero,3698 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    3680:	e0bffe17 	ldw	r2,-8(fp)
    3684:	10800317 	ldw	r2,12(r2)
    3688:	e0fffe17 	ldw	r3,-8(fp)
    368c:	180b883a 	mov	r5,r3
    3690:	1009883a 	mov	r4,r2
    3694:	0004c3c0 	call	4c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3698:	0001883a 	nop
    369c:	e037883a 	mov	sp,fp
    36a0:	dfc00117 	ldw	ra,4(sp)
    36a4:	df000017 	ldw	fp,0(sp)
    36a8:	dec00204 	addi	sp,sp,8
    36ac:	f800283a 	ret

000036b0 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    36b0:	deffde04 	addi	sp,sp,-136
    36b4:	dfc02115 	stw	ra,132(sp)
    36b8:	df002015 	stw	fp,128(sp)
    36bc:	df002004 	addi	fp,sp,128
    36c0:	e13ffc15 	stw	r4,-16(fp)
    36c4:	2809883a 	mov	r4,r5
    36c8:	3007883a 	mov	r3,r6
    36cc:	3805883a 	mov	r2,r7
    36d0:	e13ffd05 	stb	r4,-12(fp)
    36d4:	e0fffe05 	stb	r3,-8(fp)
    36d8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    36dc:	e0bfe744 	addi	r2,fp,-99
    36e0:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    36e4:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    36e8:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    36ec:	e0bffc17 	ldw	r2,-16(fp)
    36f0:	10800317 	ldw	r2,12(r2)
    36f4:	1009883a 	mov	r4,r2
    36f8:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    36fc:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	10800403 	ldbu	r2,16(r2)
    3708:	10803fcc 	andi	r2,r2,255
    370c:	10000226 	beq	r2,zero,3718 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    3710:	00bff644 	movi	r2,-39
    3714:	00017606 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    3718:	e0bfe517 	ldw	r2,-108(fp)
    371c:	10800017 	ldw	r2,0(r2)
    3720:	10800017 	ldw	r2,0(r2)
    3724:	000b883a 	mov	r5,zero
    3728:	e13fe517 	ldw	r4,-108(fp)
    372c:	103ee83a 	callr	r2
    3730:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3734:	e0bfe317 	ldw	r2,-116(fp)
    3738:	1000021e 	bne	r2,zero,3744 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    373c:	00bff584 	movi	r2,-42
    3740:	00016b06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3744:	e0bfe317 	ldw	r2,-116(fp)
    3748:	10c00003 	ldbu	r3,0(r2)
    374c:	11000043 	ldbu	r4,1(r2)
    3750:	2008923a 	slli	r4,r4,8
    3754:	20c6b03a 	or	r3,r4,r3
    3758:	11000083 	ldbu	r4,2(r2)
    375c:	2008943a 	slli	r4,r4,16
    3760:	20c6b03a 	or	r3,r4,r3
    3764:	108000c3 	ldbu	r2,3(r2)
    3768:	1004963a 	slli	r2,r2,24
    376c:	10c4b03a 	or	r2,r2,r3
    3770:	1000021e 	bne	r2,zero,377c <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    3774:	00bff5c4 	movi	r2,-41
    3778:	00015d06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    377c:	e0bfe317 	ldw	r2,-116(fp)
    3780:	10c00003 	ldbu	r3,0(r2)
    3784:	11000043 	ldbu	r4,1(r2)
    3788:	2008923a 	slli	r4,r4,8
    378c:	20c6b03a 	or	r3,r4,r3
    3790:	11000083 	ldbu	r4,2(r2)
    3794:	2008943a 	slli	r4,r4,16
    3798:	20c6b03a 	or	r3,r4,r3
    379c:	108000c3 	ldbu	r2,3(r2)
    37a0:	1004963a 	slli	r2,r2,24
    37a4:	10c4b03a 	or	r2,r2,r3
    37a8:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    37ac:	e0bffc17 	ldw	r2,-16(fp)
    37b0:	10c00444 	addi	r3,r2,17
    37b4:	e0bfe317 	ldw	r2,-116(fp)
    37b8:	19803fcc 	andi	r6,r3,255
    37bc:	11000003 	ldbu	r4,0(r2)
    37c0:	2008703a 	and	r4,r4,zero
    37c4:	200b883a 	mov	r5,r4
    37c8:	3009883a 	mov	r4,r6
    37cc:	2908b03a 	or	r4,r5,r4
    37d0:	11000005 	stb	r4,0(r2)
    37d4:	1808d23a 	srli	r4,r3,8
    37d8:	21803fcc 	andi	r6,r4,255
    37dc:	11000043 	ldbu	r4,1(r2)
    37e0:	2008703a 	and	r4,r4,zero
    37e4:	200b883a 	mov	r5,r4
    37e8:	3009883a 	mov	r4,r6
    37ec:	2908b03a 	or	r4,r5,r4
    37f0:	11000045 	stb	r4,1(r2)
    37f4:	1808d43a 	srli	r4,r3,16
    37f8:	21803fcc 	andi	r6,r4,255
    37fc:	11000083 	ldbu	r4,2(r2)
    3800:	2008703a 	and	r4,r4,zero
    3804:	200b883a 	mov	r5,r4
    3808:	3009883a 	mov	r4,r6
    380c:	2908b03a 	or	r4,r5,r4
    3810:	11000085 	stb	r4,2(r2)
    3814:	180ad63a 	srli	r5,r3,24
    3818:	10c000c3 	ldbu	r3,3(r2)
    381c:	1806703a 	and	r3,r3,zero
    3820:	1809883a 	mov	r4,r3
    3824:	2807883a 	mov	r3,r5
    3828:	20c6b03a 	or	r3,r4,r3
    382c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    3830:	e0bfe317 	ldw	r2,-116(fp)
    3834:	e0ffff03 	ldbu	r3,-4(fp)
    3838:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    383c:	e0bffc17 	ldw	r2,-16(fp)
    3840:	10c00317 	ldw	r3,12(r2)
    3844:	00800484 	movi	r2,18
    3848:	113fffcc 	andi	r4,r2,65535
    384c:	e0bfe744 	addi	r2,fp,-99
    3850:	d8800015 	stw	r2,0(sp)
    3854:	200f883a 	mov	r7,r4
    3858:	000d883a 	mov	r6,zero
    385c:	000b883a 	mov	r5,zero
    3860:	1809883a 	mov	r4,r3
    3864:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    3868:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    386c:	e0bfe317 	ldw	r2,-116(fp)
    3870:	e0ffe417 	ldw	r3,-112(fp)
    3874:	19403fcc 	andi	r5,r3,255
    3878:	10c00003 	ldbu	r3,0(r2)
    387c:	1806703a 	and	r3,r3,zero
    3880:	1809883a 	mov	r4,r3
    3884:	2807883a 	mov	r3,r5
    3888:	20c6b03a 	or	r3,r4,r3
    388c:	10c00005 	stb	r3,0(r2)
    3890:	e0ffe417 	ldw	r3,-112(fp)
    3894:	1806d23a 	srli	r3,r3,8
    3898:	19403fcc 	andi	r5,r3,255
    389c:	10c00043 	ldbu	r3,1(r2)
    38a0:	1806703a 	and	r3,r3,zero
    38a4:	1809883a 	mov	r4,r3
    38a8:	2807883a 	mov	r3,r5
    38ac:	20c6b03a 	or	r3,r4,r3
    38b0:	10c00045 	stb	r3,1(r2)
    38b4:	e0ffe417 	ldw	r3,-112(fp)
    38b8:	1806d43a 	srli	r3,r3,16
    38bc:	19403fcc 	andi	r5,r3,255
    38c0:	10c00083 	ldbu	r3,2(r2)
    38c4:	1806703a 	and	r3,r3,zero
    38c8:	1809883a 	mov	r4,r3
    38cc:	2807883a 	mov	r3,r5
    38d0:	20c6b03a 	or	r3,r4,r3
    38d4:	10c00085 	stb	r3,2(r2)
    38d8:	e0ffe417 	ldw	r3,-112(fp)
    38dc:	180ad63a 	srli	r5,r3,24
    38e0:	10c000c3 	ldbu	r3,3(r2)
    38e4:	1806703a 	and	r3,r3,zero
    38e8:	1809883a 	mov	r4,r3
    38ec:	2807883a 	mov	r3,r5
    38f0:	20c6b03a 	or	r3,r4,r3
    38f4:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    38f8:	e0bfe103 	ldbu	r2,-124(fp)
    38fc:	1000e61e 	bne	r2,zero,3c98 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    3900:	e0bfe217 	ldw	r2,-120(fp)
    3904:	10c00203 	ldbu	r3,8(r2)
    3908:	10800243 	ldbu	r2,9(r2)
    390c:	1004923a 	slli	r2,r2,8
    3910:	10c4b03a 	or	r2,r2,r3
    3914:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    3918:	e0bfe217 	ldw	r2,-120(fp)
    391c:	10c00283 	ldbu	r3,10(r2)
    3920:	108002c3 	ldbu	r2,11(r2)
    3924:	1004923a 	slli	r2,r2,8
    3928:	10c4b03a 	or	r2,r2,r3
    392c:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    3930:	e0bffc17 	ldw	r2,-16(fp)
    3934:	10800017 	ldw	r2,0(r2)
    3938:	10800604 	addi	r2,r2,24
    393c:	10800017 	ldw	r2,0(r2)
    3940:	e0ffe60b 	ldhu	r3,-104(fp)
    3944:	e13fe68b 	ldhu	r4,-102(fp)
    3948:	200d883a 	mov	r6,r4
    394c:	180b883a 	mov	r5,r3
    3950:	e13ffc17 	ldw	r4,-16(fp)
    3954:	103ee83a 	callr	r2
    3958:	1080005c 	xori	r2,r2,1
    395c:	10803fcc 	andi	r2,r2,255
    3960:	1000d51e 	bne	r2,zero,3cb8 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    3964:	e0bfe517 	ldw	r2,-108(fp)
    3968:	10800017 	ldw	r2,0(r2)
    396c:	10800104 	addi	r2,r2,4
    3970:	10800017 	ldw	r2,0(r2)
    3974:	e0fffd03 	ldbu	r3,-12(fp)
    3978:	e13ffe03 	ldbu	r4,-8(fp)
    397c:	200f883a 	mov	r7,r4
    3980:	000d883a 	mov	r6,zero
    3984:	180b883a 	mov	r5,r3
    3988:	e13fe517 	ldw	r4,-108(fp)
    398c:	103ee83a 	callr	r2
    3990:	1007883a 	mov	r3,r2
    3994:	e0bffc17 	ldw	r2,-16(fp)
    3998:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    399c:	e0bffc17 	ldw	r2,-16(fp)
    39a0:	10800403 	ldbu	r2,16(r2)
    39a4:	10803fcc 	andi	r2,r2,255
    39a8:	1000021e 	bne	r2,zero,39b4 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    39ac:	00bff504 	movi	r2,-44
    39b0:	0000cf06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    39b4:	e0bfe217 	ldw	r2,-120(fp)
    39b8:	10c001c3 	ldbu	r3,7(r2)
    39bc:	e0bffc17 	ldw	r2,-16(fp)
    39c0:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    39c4:	e0bffc17 	ldw	r2,-16(fp)
    39c8:	10c00317 	ldw	r3,12(r2)
    39cc:	e0bffc17 	ldw	r2,-16(fp)
    39d0:	10800403 	ldbu	r2,16(r2)
    39d4:	10803fcc 	andi	r2,r2,255
    39d8:	100f883a 	mov	r7,r2
    39dc:	000d883a 	mov	r6,zero
    39e0:	000b883a 	mov	r5,zero
    39e4:	1809883a 	mov	r4,r3
    39e8:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    39ec:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    39f0:	e0bfe103 	ldbu	r2,-124(fp)
    39f4:	10001026 	beq	r2,zero,3a38 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    39f8:	e0bfe317 	ldw	r2,-116(fp)
    39fc:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    3a00:	e0bfe517 	ldw	r2,-108(fp)
    3a04:	10800017 	ldw	r2,0(r2)
    3a08:	10800204 	addi	r2,r2,8
    3a0c:	10800017 	ldw	r2,0(r2)
    3a10:	e0fffc17 	ldw	r3,-16(fp)
    3a14:	18c00403 	ldbu	r3,16(r3)
    3a18:	18c03fcc 	andi	r3,r3,255
    3a1c:	180b883a 	mov	r5,r3
    3a20:	e13fe517 	ldw	r4,-108(fp)
    3a24:	103ee83a 	callr	r2
                bAddress = 0;
    3a28:	e0bffc17 	ldw	r2,-16(fp)
    3a2c:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    3a30:	e0bfe103 	ldbu	r2,-124(fp)
    3a34:	0000ae06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3a38:	e0bfe317 	ldw	r2,-116(fp)
    3a3c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    3a40:	e0bfe517 	ldw	r2,-108(fp)
    3a44:	10800017 	ldw	r2,0(r2)
    3a48:	10800017 	ldw	r2,0(r2)
    3a4c:	e0fffc17 	ldw	r3,-16(fp)
    3a50:	18c00403 	ldbu	r3,16(r3)
    3a54:	18c03fcc 	andi	r3,r3,255
    3a58:	180b883a 	mov	r5,r3
    3a5c:	e13fe517 	ldw	r4,-108(fp)
    3a60:	103ee83a 	callr	r2
    3a64:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3a68:	e0bfe317 	ldw	r2,-116(fp)
    3a6c:	1000021e 	bne	r2,zero,3a78 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3a70:	00bff584 	movi	r2,-42
    3a74:	00009e06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3a78:	e0bfe317 	ldw	r2,-116(fp)
    3a7c:	e0ffff03 	ldbu	r3,-4(fp)
    3a80:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3a84:	e0bffc17 	ldw	r2,-16(fp)
    3a88:	10c00317 	ldw	r3,12(r2)
    3a8c:	e0bffc17 	ldw	r2,-16(fp)
    3a90:	10800403 	ldbu	r2,16(r2)
    3a94:	11003fcc 	andi	r4,r2,255
    3a98:	e0bffc17 	ldw	r2,-16(fp)
    3a9c:	10800444 	addi	r2,r2,17
    3aa0:	100f883a 	mov	r7,r2
    3aa4:	01800044 	movi	r6,1
    3aa8:	200b883a 	mov	r5,r4
    3aac:	1809883a 	mov	r4,r3
    3ab0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3ab4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3ab8:	e0bfe103 	ldbu	r2,-124(fp)
    3abc:	1000781e 	bne	r2,zero,3ca0 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    3ac0:	e0bfe217 	ldw	r2,-120(fp)
    3ac4:	10800443 	ldbu	r2,17(r2)
    3ac8:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    3acc:	e0bfe703 	ldbu	r2,-100(fp)
    3ad0:	01402004 	movi	r5,128
    3ad4:	1009883a 	mov	r4,r2
    3ad8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3adc:	e03fe145 	stb	zero,-123(fp)
    3ae0:	e0ffe143 	ldbu	r3,-123(fp)
    3ae4:	e0bfe703 	ldbu	r2,-100(fp)
    3ae8:	1880222e 	bgeu	r3,r2,3b74 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    3aec:	e0bffc17 	ldw	r2,-16(fp)
    3af0:	10c00104 	addi	r3,r2,4
    3af4:	e0bfed04 	addi	r2,fp,-76
    3af8:	180b883a 	mov	r5,r3
    3afc:	1009883a 	mov	r4,r2
    3b00:	0004f240 	call	4f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3b04:	e0bffc17 	ldw	r2,-16(fp)
    3b08:	10c00317 	ldw	r3,12(r2)
    3b0c:	e0bffc17 	ldw	r2,-16(fp)
    3b10:	10800403 	ldbu	r2,16(r2)
    3b14:	11003fcc 	andi	r4,r2,255
    3b18:	e17fe143 	ldbu	r5,-123(fp)
    3b1c:	e0bfed04 	addi	r2,fp,-76
    3b20:	d8800015 	stw	r2,0(sp)
    3b24:	280f883a 	mov	r7,r5
    3b28:	000d883a 	mov	r6,zero
    3b2c:	200b883a 	mov	r5,r4
    3b30:	1809883a 	mov	r4,r3
    3b34:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3b38:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3b3c:	e0bfe103 	ldbu	r2,-124(fp)
    3b40:	10000226 	beq	r2,zero,3b4c <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3b44:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3b48:	00006206 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3b4c:	e0bffc17 	ldw	r2,-16(fp)
    3b50:	108006c3 	ldbu	r2,27(r2)
    3b54:	10803fcc 	andi	r2,r2,255
    3b58:	108000f0 	cmpltui	r2,r2,3
    3b5c:	10000426 	beq	r2,zero,3b70 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3b60:	e0bfe143 	ldbu	r2,-123(fp)
    3b64:	10800044 	addi	r2,r2,1
    3b68:	e0bfe145 	stb	r2,-123(fp)
    3b6c:	003fdc06 	br	3ae0 <__alt_data_end+0xfc003ae0>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    3b70:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3b74:	e0bffc17 	ldw	r2,-16(fp)
    3b78:	108006c3 	ldbu	r2,27(r2)
    3b7c:	10803fcc 	andi	r2,r2,255
    3b80:	108000e8 	cmpgeui	r2,r2,3
    3b84:	10004e26 	beq	r2,zero,3cc0 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3b88:	e0bffc17 	ldw	r2,-16(fp)
    3b8c:	10c00317 	ldw	r3,12(r2)
    3b90:	e0bffc17 	ldw	r2,-16(fp)
    3b94:	10800403 	ldbu	r2,16(r2)
    3b98:	11003fcc 	andi	r4,r2,255
    3b9c:	e0bffc17 	ldw	r2,-16(fp)
    3ba0:	108006c3 	ldbu	r2,27(r2)
    3ba4:	11403fcc 	andi	r5,r2,255
    3ba8:	e0bffc17 	ldw	r2,-16(fp)
    3bac:	10800444 	addi	r2,r2,17
    3bb0:	100f883a 	mov	r7,r2
    3bb4:	280d883a 	mov	r6,r5
    3bb8:	200b883a 	mov	r5,r4
    3bbc:	1809883a 	mov	r4,r3
    3bc0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3bc4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3bc8:	e0bfe103 	ldbu	r2,-124(fp)
    3bcc:	1000361e 	bne	r2,zero,3ca8 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    3bd0:	01003204 	movi	r4,200
    3bd4:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    3bd8:	e0bffc17 	ldw	r2,-16(fp)
    3bdc:	10c00317 	ldw	r3,12(r2)
    3be0:	e0bffc17 	ldw	r2,-16(fp)
    3be4:	10800403 	ldbu	r2,16(r2)
    3be8:	11003fcc 	andi	r4,r2,255
    3bec:	e0bffc17 	ldw	r2,-16(fp)
    3bf0:	10800443 	ldbu	r2,17(r2)
    3bf4:	11403fcc 	andi	r5,r2,255
    3bf8:	e0bffc17 	ldw	r2,-16(fp)
    3bfc:	10800683 	ldbu	r2,26(r2)
    3c00:	10803fcc 	andi	r2,r2,255
    3c04:	100f883a 	mov	r7,r2
    3c08:	280d883a 	mov	r6,r5
    3c0c:	200b883a 	mov	r5,r4
    3c10:	1809883a 	mov	r4,r3
    3c14:	0002b940 	call	2b94 <_ZN3USB7setConfEhhh>
    3c18:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3c1c:	e0bfe103 	ldbu	r2,-124(fp)
    3c20:	1000231e 	bne	r2,zero,3cb0 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3c24:	01003204 	movi	r4,200
    3c28:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3c2c:	e0bffc17 	ldw	r2,-16(fp)
    3c30:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3c34:	00800144 	movi	r2,5
    3c38:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3c3c:	00800804 	movi	r2,32
    3c40:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3c44:	00800044 	movi	r2,1
    3c48:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3c4c:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    3c50:	e0bfebc4 	addi	r2,fp,-81
    3c54:	01800144 	movi	r6,5
    3c58:	100b883a 	mov	r5,r2
    3c5c:	e13ffc17 	ldw	r4,-16(fp)
    3c60:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
    3c64:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3c68:	e0bfe103 	ldbu	r2,-124(fp)
    3c6c:	1000181e 	bne	r2,zero,3cd0 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    3c70:	e13ffc17 	ldw	r4,-16(fp)
    3c74:	00046180 	call	4618 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	00c00044 	movi	r3,1
    3c80:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3c84:	e0bffc17 	ldw	r2,-16(fp)
    3c88:	00c00044 	movi	r3,1
    3c8c:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    3c90:	0005883a 	mov	r2,zero
    3c94:	00001606 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3c98:	0001883a 	nop
    3c9c:	00000d06 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3ca0:	0001883a 	nop
    3ca4:	00000b06 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3ca8:	0001883a 	nop
    3cac:	00000906 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    3cb0:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3cb4:	00000706 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    3cb8:	0001883a 	nop
    3cbc:	00000106 	br	3cc4 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    3cc0:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    3cc4:	00bff444 	movi	r2,-47
    3cc8:	e0bfe105 	stb	r2,-124(fp)
    3ccc:	00000106 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    3cd0:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    3cd4:	e0bffc17 	ldw	r2,-16(fp)
    3cd8:	10800017 	ldw	r2,0(r2)
    3cdc:	10800204 	addi	r2,r2,8
    3ce0:	10800017 	ldw	r2,0(r2)
    3ce4:	e13ffc17 	ldw	r4,-16(fp)
    3ce8:	103ee83a 	callr	r2
        return rcode;
    3cec:	e0bfe103 	ldbu	r2,-124(fp)
}
    3cf0:	e037883a 	mov	sp,fp
    3cf4:	dfc00117 	ldw	ra,4(sp)
    3cf8:	df000017 	ldw	fp,0(sp)
    3cfc:	dec00204 	addi	sp,sp,8
    3d00:	f800283a 	ret

00003d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3d04:	defff904 	addi	sp,sp,-28
    3d08:	df000615 	stw	fp,24(sp)
    3d0c:	df000604 	addi	fp,sp,24
    3d10:	e13ffb15 	stw	r4,-20(fp)
    3d14:	3009883a 	mov	r4,r6
    3d18:	3807883a 	mov	r3,r7
    3d1c:	e0800117 	ldw	r2,4(fp)
    3d20:	e17ffc05 	stb	r5,-16(fp)
    3d24:	e13ffd05 	stb	r4,-12(fp)
    3d28:	e0fffe05 	stb	r3,-8(fp)
    3d2c:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    3d30:	e0bffb17 	ldw	r2,-20(fp)
    3d34:	e0fffc03 	ldbu	r3,-16(fp)
    3d38:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3d3c:	e0800217 	ldw	r2,8(fp)
    3d40:	108000c3 	ldbu	r2,3(r2)
    3d44:	10803fcc 	andi	r2,r2,255
    3d48:	108000cc 	andi	r2,r2,3
    3d4c:	108000d8 	cmpnei	r2,r2,3
    3d50:	1000361e 	bne	r2,zero,3e2c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3d54:	e0800217 	ldw	r2,8(fp)
    3d58:	10800083 	ldbu	r2,2(r2)
    3d5c:	10803fcc 	andi	r2,r2,255
    3d60:	1080201c 	xori	r2,r2,128
    3d64:	10bfe004 	addi	r2,r2,-128
    3d68:	1000020e 	bge	r2,zero,3d74 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3d6c:	00800084 	movi	r2,2
    3d70:	00000106 	br	3d78 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3d74:	00800044 	movi	r2,1
    3d78:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3d7c:	e0fffa03 	ldbu	r3,-24(fp)
    3d80:	e0800217 	ldw	r2,8(fp)
    3d84:	10800083 	ldbu	r2,2(r2)
    3d88:	108003cc 	andi	r2,r2,15
    3d8c:	100b883a 	mov	r5,r2
    3d90:	e13ffb17 	ldw	r4,-20(fp)
    3d94:	1805883a 	mov	r2,r3
    3d98:	1085883a 	add	r2,r2,r2
    3d9c:	10c5883a 	add	r2,r2,r3
    3da0:	2085883a 	add	r2,r4,r2
    3da4:	10800444 	addi	r2,r2,17
    3da8:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    3dac:	e0fffa03 	ldbu	r3,-24(fp)
    3db0:	e0800217 	ldw	r2,8(fp)
    3db4:	11000103 	ldbu	r4,4(r2)
    3db8:	10800143 	ldbu	r2,5(r2)
    3dbc:	1004923a 	slli	r2,r2,8
    3dc0:	1104b03a 	or	r2,r2,r4
    3dc4:	100b883a 	mov	r5,r2
    3dc8:	e13ffb17 	ldw	r4,-20(fp)
    3dcc:	1805883a 	mov	r2,r3
    3dd0:	1085883a 	add	r2,r2,r2
    3dd4:	10c5883a 	add	r2,r2,r3
    3dd8:	2085883a 	add	r2,r4,r2
    3ddc:	10800484 	addi	r2,r2,18
    3de0:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    3de4:	e0bffb17 	ldw	r2,-20(fp)
    3de8:	10c00903 	ldbu	r3,36(r2)
    3dec:	e0800217 	ldw	r2,8(fp)
    3df0:	10800183 	ldbu	r2,6(r2)
    3df4:	18c03fcc 	andi	r3,r3,255
    3df8:	10803fcc 	andi	r2,r2,255
    3dfc:	1880042e 	bgeu	r3,r2,3e10 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    3e00:	e0800217 	ldw	r2,8(fp)
    3e04:	10c00183 	ldbu	r3,6(r2)
    3e08:	e0bffb17 	ldw	r2,-20(fp)
    3e0c:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3e10:	e0bffb17 	ldw	r2,-20(fp)
    3e14:	108006c3 	ldbu	r2,27(r2)
    3e18:	10800044 	addi	r2,r2,1
    3e1c:	1007883a 	mov	r3,r2
    3e20:	e0bffb17 	ldw	r2,-20(fp)
    3e24:	10c006c5 	stb	r3,27(r2)
    3e28:	00000106 	br	3e30 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3e2c:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3e30:	e037883a 	mov	sp,fp
    3e34:	df000017 	ldw	fp,0(sp)
    3e38:	dec00104 	addi	sp,sp,4
    3e3c:	f800283a 	ret

00003e40 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3e40:	213fff04 	addi	r4,r4,-4
    3e44:	0003d041 	jmpi	3d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003e48 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3e48:	defffd04 	addi	sp,sp,-12
    3e4c:	df000215 	stw	fp,8(sp)
    3e50:	df000204 	addi	fp,sp,8
    3e54:	e13ffe15 	stw	r4,-8(fp)
    3e58:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3e5c:	0001883a 	nop
    3e60:	e037883a 	mov	sp,fp
    3e64:	df000017 	ldw	fp,0(sp)
    3e68:	dec00104 	addi	sp,sp,4
    3e6c:	f800283a 	ret

00003e70 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3e70:	defffd04 	addi	sp,sp,-12
    3e74:	dfc00215 	stw	ra,8(sp)
    3e78:	df000115 	stw	fp,4(sp)
    3e7c:	df000104 	addi	fp,sp,4
    3e80:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3e84:	e0bfff17 	ldw	r2,-4(fp)
    3e88:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3e8c:	e0bfff17 	ldw	r2,-4(fp)
    3e90:	10800317 	ldw	r2,12(r2)
    3e94:	1009883a 	mov	r4,r2
    3e98:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    3e9c:	1009883a 	mov	r4,r2
    3ea0:	20800017 	ldw	r2,0(r4)
    3ea4:	10800204 	addi	r2,r2,8
    3ea8:	10800017 	ldw	r2,0(r2)
    3eac:	e0ffff17 	ldw	r3,-4(fp)
    3eb0:	18c00403 	ldbu	r3,16(r3)
    3eb4:	18c03fcc 	andi	r3,r3,255
    3eb8:	180b883a 	mov	r5,r3
    3ebc:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3ec0:	e0bfff17 	ldw	r2,-4(fp)
    3ec4:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3ec8:	e0bfff17 	ldw	r2,-4(fp)
    3ecc:	00c00044 	movi	r3,1
    3ed0:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
    3ed8:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3eec:	0005883a 	mov	r2,zero
}
    3ef0:	e037883a 	mov	sp,fp
    3ef4:	dfc00117 	ldw	ra,4(sp)
    3ef8:	df000017 	ldw	fp,0(sp)
    3efc:	dec00204 	addi	sp,sp,8
    3f00:	f800283a 	ret

00003f04 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3f04:	defffa04 	addi	sp,sp,-24
    3f08:	dfc00515 	stw	ra,20(sp)
    3f0c:	df000415 	stw	fp,16(sp)
    3f10:	df000404 	addi	fp,sp,16
    3f14:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3f18:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3f1c:	e0bfff17 	ldw	r2,-4(fp)
    3f20:	10800943 	ldbu	r2,37(r2)
    3f24:	1080005c 	xori	r2,r2,1
    3f28:	10803fcc 	andi	r2,r2,255
    3f2c:	10000226 	beq	r2,zero,3f38 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3f30:	0005883a 	mov	r2,zero
    3f34:	00002c06 	br	3fe8 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3f38:	00006dc0 	call	6dc <_Z6millisv>
    3f3c:	1007883a 	mov	r3,r2
    3f40:	e0bfff17 	ldw	r2,-4(fp)
    3f44:	10800717 	ldw	r2,28(r2)
    3f48:	1885c83a 	sub	r2,r3,r2
    3f4c:	0084303a 	nor	r2,zero,r2
    3f50:	1004d7fa 	srli	r2,r2,31
    3f54:	10803fcc 	andi	r2,r2,255
    3f58:	10002226 	beq	r2,zero,3fe4 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3f5c:	00006dc0 	call	6dc <_Z6millisv>
    3f60:	1007883a 	mov	r3,r2
    3f64:	e0bfff17 	ldw	r2,-4(fp)
    3f68:	10800903 	ldbu	r2,36(r2)
    3f6c:	10803fcc 	andi	r2,r2,255
    3f70:	1887883a 	add	r3,r3,r2
    3f74:	e0bfff17 	ldw	r2,-4(fp)
    3f78:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3f7c:	e0bfff17 	ldw	r2,-4(fp)
    3f80:	10800603 	ldbu	r2,24(r2)
    3f84:	10803fcc 	andi	r2,r2,255
    3f88:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3f8c:	e0bfff17 	ldw	r2,-4(fp)
    3f90:	11000317 	ldw	r4,12(r2)
    3f94:	e0bfff17 	ldw	r2,-4(fp)
    3f98:	10800403 	ldbu	r2,16(r2)
    3f9c:	11403fcc 	andi	r5,r2,255
    3fa0:	e0bfff17 	ldw	r2,-4(fp)
    3fa4:	108005c3 	ldbu	r2,23(r2)
    3fa8:	11803fcc 	andi	r6,r2,255
    3fac:	e0bfff17 	ldw	r2,-4(fp)
    3fb0:	10800f84 	addi	r2,r2,62
    3fb4:	e0ffff17 	ldw	r3,-4(fp)
    3fb8:	18c00903 	ldbu	r3,36(r3)
    3fbc:	18c03fcc 	andi	r3,r3,255
    3fc0:	e1fffe84 	addi	r7,fp,-6
    3fc4:	d8c00115 	stw	r3,4(sp)
    3fc8:	d8800015 	stw	r2,0(sp)
    3fcc:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    3fd0:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    3fd4:	e0bffe43 	ldbu	r2,-7(fp)
    3fd8:	1000021e 	bne	r2,zero,3fe4 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    3fdc:	e13fff17 	ldw	r4,-4(fp)
    3fe0:	0003ffc0 	call	3ffc <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    3fe4:	e0bffe03 	ldbu	r2,-8(fp)
}
    3fe8:	e037883a 	mov	sp,fp
    3fec:	dfc00117 	ldw	ra,4(sp)
    3ff0:	df000017 	ldw	fp,0(sp)
    3ff4:	dec00204 	addi	sp,sp,8
    3ff8:	f800283a 	ret

00003ffc <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    3ffc:	defffd04 	addi	sp,sp,-12
    4000:	df000215 	stw	fp,8(sp)
    4004:	df000204 	addi	fp,sp,8
    4008:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10800f83 	ldbu	r2,62(r2)
    4014:	10803fcc 	andi	r2,r2,255
    4018:	108001d8 	cmpnei	r2,r2,7
    401c:	10002f1e 	bne	r2,zero,40dc <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    4020:	e0bfff17 	ldw	r2,-4(fp)
    4024:	10801083 	ldbu	r2,66(r2)
    4028:	10803fcc 	andi	r2,r2,255
    402c:	10800058 	cmpnei	r2,r2,1
    4030:	10000a1e 	bne	r2,zero,405c <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    4034:	e0bfff17 	ldw	r2,-4(fp)
    4038:	10c0098b 	ldhu	r3,38(r2)
    403c:	008000b4 	movhi	r2,2
    4040:	108aaf84 	addi	r2,r2,10942
    4044:	1080000b 	ldhu	r2,0(r2)
    4048:	1884b03a 	or	r2,r3,r2
    404c:	1007883a 	mov	r3,r2
    4050:	e0bfff17 	ldw	r2,-4(fp)
    4054:	10c0098d 	sth	r3,38(r2)
    4058:	00000b06 	br	4088 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    405c:	e0bfff17 	ldw	r2,-4(fp)
    4060:	1080098b 	ldhu	r2,38(r2)
    4064:	1007883a 	mov	r3,r2
    4068:	008000b4 	movhi	r2,2
    406c:	108aaf84 	addi	r2,r2,10942
    4070:	1080000b 	ldhu	r2,0(r2)
    4074:	0084303a 	nor	r2,zero,r2
    4078:	1884703a 	and	r2,r3,r2
    407c:	1007883a 	mov	r3,r2
    4080:	e0bfff17 	ldw	r2,-4(fp)
    4084:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    4088:	e0bfff17 	ldw	r2,-4(fp)
    408c:	10c0098b 	ldhu	r3,38(r2)
    4090:	e0bfff17 	ldw	r2,-4(fp)
    4094:	10800a0b 	ldhu	r2,40(r2)
    4098:	18ffffcc 	andi	r3,r3,65535
    409c:	10bfffcc 	andi	r2,r2,65535
    40a0:	18800e26 	beq	r3,r2,40dc <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    40a4:	e0bfff17 	ldw	r2,-4(fp)
    40a8:	1080098b 	ldhu	r2,38(r2)
    40ac:	1007883a 	mov	r3,r2
    40b0:	e0bfff17 	ldw	r2,-4(fp)
    40b4:	10800a0b 	ldhu	r2,40(r2)
    40b8:	0084303a 	nor	r2,zero,r2
    40bc:	1884703a 	and	r2,r3,r2
    40c0:	1007883a 	mov	r3,r2
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    40cc:	e0bfff17 	ldw	r2,-4(fp)
    40d0:	10c0098b 	ldhu	r3,38(r2)
    40d4:	e0bfff17 	ldw	r2,-4(fp)
    40d8:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    40dc:	e0bfff17 	ldw	r2,-4(fp)
    40e0:	10800f83 	ldbu	r2,62(r2)
    40e4:	10803fcc 	andi	r2,r2,255
    40e8:	10800820 	cmpeqi	r2,r2,32
    40ec:	1000b026 	beq	r2,zero,43b0 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    40f0:	e0bfff17 	ldw	r2,-4(fp)
    40f4:	10c0098b 	ldhu	r3,38(r2)
    40f8:	008000b4 	movhi	r2,2
    40fc:	108aaf84 	addi	r2,r2,10942
    4100:	1080000b 	ldhu	r2,0(r2)
    4104:	1884703a 	and	r2,r3,r2
    4108:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    410c:	e0bfff17 	ldw	r2,-4(fp)
    4110:	108010c3 	ldbu	r2,67(r2)
    4114:	10803fcc 	andi	r2,r2,255
    4118:	108003cc 	andi	r2,r2,15
    411c:	1004923a 	slli	r2,r2,8
    4120:	1007883a 	mov	r3,r2
    4124:	e0bffe0b 	ldhu	r2,-8(fp)
    4128:	1884b03a 	or	r2,r3,r2
    412c:	1007883a 	mov	r3,r2
    4130:	e0bfff17 	ldw	r2,-4(fp)
    4134:	10801083 	ldbu	r2,66(r2)
    4138:	10803fcc 	andi	r2,r2,255
    413c:	10803c0c 	andi	r2,r2,240
    4140:	1884b03a 	or	r2,r3,r2
    4144:	1007883a 	mov	r3,r2
    4148:	e0bfff17 	ldw	r2,-4(fp)
    414c:	10801083 	ldbu	r2,66(r2)
    4150:	10803fcc 	andi	r2,r2,255
    4154:	1080030c 	andi	r2,r2,12
    4158:	100492ba 	slli	r2,r2,10
    415c:	1884b03a 	or	r2,r3,r2
    4160:	1007883a 	mov	r3,r2
    4164:	e0bfff17 	ldw	r2,-4(fp)
    4168:	10801083 	ldbu	r2,66(r2)
    416c:	10803fcc 	andi	r2,r2,255
    4170:	1080004c 	andi	r2,r2,1
    4174:	100490fa 	slli	r2,r2,3
    4178:	1884b03a 	or	r2,r3,r2
    417c:	1007883a 	mov	r3,r2
    4180:	e0bfff17 	ldw	r2,-4(fp)
    4184:	108010c3 	ldbu	r2,67(r2)
    4188:	10803fcc 	andi	r2,r2,255
    418c:	1080300c 	andi	r2,r2,192
    4190:	1004923a 	slli	r2,r2,8
    4194:	1884b03a 	or	r2,r3,r2
    4198:	1007883a 	mov	r3,r2
    419c:	e0bfff17 	ldw	r2,-4(fp)
    41a0:	108010c3 	ldbu	r2,67(r2)
    41a4:	10803fcc 	andi	r2,r2,255
    41a8:	10800c0c 	andi	r2,r2,48
    41ac:	1005d13a 	srai	r2,r2,4
    41b0:	1884b03a 	or	r2,r3,r2
    41b4:	1007883a 	mov	r3,r2
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    41c0:	e0bfff17 	ldw	r2,-4(fp)
    41c4:	10801143 	ldbu	r2,69(r2)
    41c8:	10803fcc 	andi	r2,r2,255
    41cc:	1004923a 	slli	r2,r2,8
    41d0:	1007883a 	mov	r3,r2
    41d4:	e0bfff17 	ldw	r2,-4(fp)
    41d8:	10801103 	ldbu	r2,68(r2)
    41dc:	10803fcc 	andi	r2,r2,255
    41e0:	1884b03a 	or	r2,r3,r2
    41e4:	1007883a 	mov	r3,r2
    41e8:	e0bfff17 	ldw	r2,-4(fp)
    41ec:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    41f0:	e0bfff17 	ldw	r2,-4(fp)
    41f4:	108011c3 	ldbu	r2,71(r2)
    41f8:	10803fcc 	andi	r2,r2,255
    41fc:	1004923a 	slli	r2,r2,8
    4200:	1007883a 	mov	r3,r2
    4204:	e0bfff17 	ldw	r2,-4(fp)
    4208:	10801183 	ldbu	r2,70(r2)
    420c:	10803fcc 	andi	r2,r2,255
    4210:	1884b03a 	or	r2,r3,r2
    4214:	1007883a 	mov	r3,r2
    4218:	e0bfff17 	ldw	r2,-4(fp)
    421c:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    4220:	e0bfff17 	ldw	r2,-4(fp)
    4224:	10801243 	ldbu	r2,73(r2)
    4228:	10803fcc 	andi	r2,r2,255
    422c:	1004923a 	slli	r2,r2,8
    4230:	1007883a 	mov	r3,r2
    4234:	e0bfff17 	ldw	r2,-4(fp)
    4238:	10801203 	ldbu	r2,72(r2)
    423c:	10803fcc 	andi	r2,r2,255
    4240:	1884b03a 	or	r2,r3,r2
    4244:	1007883a 	mov	r3,r2
    4248:	e0bfff17 	ldw	r2,-4(fp)
    424c:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    4250:	e0bfff17 	ldw	r2,-4(fp)
    4254:	108012c3 	ldbu	r2,75(r2)
    4258:	10803fcc 	andi	r2,r2,255
    425c:	1004923a 	slli	r2,r2,8
    4260:	1007883a 	mov	r3,r2
    4264:	e0bfff17 	ldw	r2,-4(fp)
    4268:	10801283 	ldbu	r2,74(r2)
    426c:	10803fcc 	andi	r2,r2,255
    4270:	1884b03a 	or	r2,r3,r2
    4274:	1007883a 	mov	r3,r2
    4278:	e0bfff17 	ldw	r2,-4(fp)
    427c:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    4280:	e0bfff17 	ldw	r2,-4(fp)
    4284:	10801343 	ldbu	r2,77(r2)
    4288:	10803fcc 	andi	r2,r2,255
    428c:	1004923a 	slli	r2,r2,8
    4290:	1007883a 	mov	r3,r2
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	10801303 	ldbu	r2,76(r2)
    429c:	10803fcc 	andi	r2,r2,255
    42a0:	1884b03a 	or	r2,r3,r2
    42a4:	1007883a 	mov	r3,r2
    42a8:	e0bfff17 	ldw	r2,-4(fp)
    42ac:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    42b0:	e0bfff17 	ldw	r2,-4(fp)
    42b4:	108013c3 	ldbu	r2,79(r2)
    42b8:	10803fcc 	andi	r2,r2,255
    42bc:	1004923a 	slli	r2,r2,8
    42c0:	1007883a 	mov	r3,r2
    42c4:	e0bfff17 	ldw	r2,-4(fp)
    42c8:	10801383 	ldbu	r2,78(r2)
    42cc:	10803fcc 	andi	r2,r2,255
    42d0:	1884b03a 	or	r2,r3,r2
    42d4:	1007883a 	mov	r3,r2
    42d8:	e0bfff17 	ldw	r2,-4(fp)
    42dc:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    42e0:	e0bfff17 	ldw	r2,-4(fp)
    42e4:	10c0098b 	ldhu	r3,38(r2)
    42e8:	e0bfff17 	ldw	r2,-4(fp)
    42ec:	10800a0b 	ldhu	r2,40(r2)
    42f0:	18ffffcc 	andi	r3,r3,65535
    42f4:	10bfffcc 	andi	r2,r2,65535
    42f8:	18800e26 	beq	r3,r2,4334 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	1080098b 	ldhu	r2,38(r2)
    4304:	1007883a 	mov	r3,r2
    4308:	e0bfff17 	ldw	r2,-4(fp)
    430c:	10800a0b 	ldhu	r2,40(r2)
    4310:	0084303a 	nor	r2,zero,r2
    4314:	1884703a 	and	r2,r3,r2
    4318:	1007883a 	mov	r3,r2
    431c:	e0bfff17 	ldw	r2,-4(fp)
    4320:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    4324:	e0bfff17 	ldw	r2,-4(fp)
    4328:	10c0098b 	ldhu	r3,38(r2)
    432c:	e0bfff17 	ldw	r2,-4(fp)
    4330:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    4334:	e0bfff17 	ldw	r2,-4(fp)
    4338:	10800d0b 	ldhu	r2,52(r2)
    433c:	10bfffcc 	andi	r2,r2,65535
    4340:	10000726 	beq	r2,zero,4360 <_ZN7XBOXONE10readReportEv+0x364>
    4344:	e0bfff17 	ldw	r2,-4(fp)
    4348:	10800e0b 	ldhu	r2,56(r2)
    434c:	10bfffcc 	andi	r2,r2,65535
    4350:	1000031e 	bne	r2,zero,4360 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    4354:	e0bfff17 	ldw	r2,-4(fp)
    4358:	00c00044 	movi	r3,1
    435c:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    4360:	e0bfff17 	ldw	r2,-4(fp)
    4364:	10c00d0b 	ldhu	r3,52(r2)
    4368:	e0bfff17 	ldw	r2,-4(fp)
    436c:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    4370:	e0bfff17 	ldw	r2,-4(fp)
    4374:	10800d8b 	ldhu	r2,54(r2)
    4378:	10bfffcc 	andi	r2,r2,65535
    437c:	10000726 	beq	r2,zero,439c <_ZN7XBOXONE10readReportEv+0x3a0>
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	10800e8b 	ldhu	r2,58(r2)
    4388:	10bfffcc 	andi	r2,r2,65535
    438c:	1000031e 	bne	r2,zero,439c <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    4390:	e0bfff17 	ldw	r2,-4(fp)
    4394:	00c00044 	movi	r3,1
    4398:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    439c:	e0bfff17 	ldw	r2,-4(fp)
    43a0:	10c00d8b 	ldhu	r3,54(r2)
    43a4:	e0bfff17 	ldw	r2,-4(fp)
    43a8:	10c00e8d 	sth	r3,58(r2)
    43ac:	00000106 	br	43b4 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    43b0:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    43b4:	e037883a 	mov	sp,fp
    43b8:	df000017 	ldw	fp,0(sp)
    43bc:	dec00104 	addi	sp,sp,4
    43c0:	f800283a 	ret

000043c4 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    43c4:	defffd04 	addi	sp,sp,-12
    43c8:	df000215 	stw	fp,8(sp)
    43cc:	df000204 	addi	fp,sp,8
    43d0:	e13ffe15 	stw	r4,-8(fp)
    43d4:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    43d8:	e0bfff17 	ldw	r2,-4(fp)
    43dc:	10800218 	cmpnei	r2,r2,8
    43e0:	1000031e 	bne	r2,zero,43f0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    43e4:	e0bffe17 	ldw	r2,-8(fp)
    43e8:	10800d0b 	ldhu	r2,52(r2)
    43ec:	00001306 	br	443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    43f0:	e0bfff17 	ldw	r2,-4(fp)
    43f4:	10800258 	cmpnei	r2,r2,9
    43f8:	1000031e 	bne	r2,zero,4408 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    43fc:	e0bffe17 	ldw	r2,-8(fp)
    4400:	10800d8b 	ldhu	r2,54(r2)
    4404:	00000d06 	br	443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    4408:	e0bffe17 	ldw	r2,-8(fp)
    440c:	10c0098b 	ldhu	r3,38(r2)
    4410:	e0bfff17 	ldw	r2,-4(fp)
    4414:	10803fcc 	andi	r2,r2,255
    4418:	1089883a 	add	r4,r2,r2
    441c:	008000b4 	movhi	r2,2
    4420:	108aa784 	addi	r2,r2,10910
    4424:	2085883a 	add	r2,r4,r2
    4428:	1080000b 	ldhu	r2,0(r2)
    442c:	1884703a 	and	r2,r3,r2
    4430:	10bfffcc 	andi	r2,r2,65535
    4434:	1004c03a 	cmpne	r2,r2,zero
    4438:	10803fcc 	andi	r2,r2,255
}
    443c:	e037883a 	mov	sp,fp
    4440:	df000017 	ldw	fp,0(sp)
    4444:	dec00104 	addi	sp,sp,4
    4448:	f800283a 	ret

0000444c <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    444c:	defffc04 	addi	sp,sp,-16
    4450:	df000315 	stw	fp,12(sp)
    4454:	df000304 	addi	fp,sp,12
    4458:	e13ffe15 	stw	r4,-8(fp)
    445c:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    4460:	e0bfff17 	ldw	r2,-4(fp)
    4464:	10800218 	cmpnei	r2,r2,8
    4468:	10000a1e 	bne	r2,zero,4494 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    446c:	e0bffe17 	ldw	r2,-8(fp)
    4470:	10800f03 	ldbu	r2,60(r2)
    4474:	10803fcc 	andi	r2,r2,255
    4478:	10000426 	beq	r2,zero,448c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	10000f05 	stb	zero,60(r2)
                        return true;
    4484:	00800044 	movi	r2,1
    4488:	00002806 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    448c:	0005883a 	mov	r2,zero
    4490:	00002606 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    4494:	e0bfff17 	ldw	r2,-4(fp)
    4498:	10800258 	cmpnei	r2,r2,9
    449c:	10000a1e 	bne	r2,zero,44c8 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    44a0:	e0bffe17 	ldw	r2,-8(fp)
    44a4:	10800f43 	ldbu	r2,61(r2)
    44a8:	10803fcc 	andi	r2,r2,255
    44ac:	10000426 	beq	r2,zero,44c0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    44b0:	e0bffe17 	ldw	r2,-8(fp)
    44b4:	10000f45 	stb	zero,61(r2)
                        return true;
    44b8:	00800044 	movi	r2,1
    44bc:	00001b06 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    44c0:	0005883a 	mov	r2,zero
    44c4:	00001906 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    44c8:	e0bfff17 	ldw	r2,-4(fp)
    44cc:	10803fcc 	andi	r2,r2,255
    44d0:	1087883a 	add	r3,r2,r2
    44d4:	008000b4 	movhi	r2,2
    44d8:	108aa784 	addi	r2,r2,10910
    44dc:	1885883a 	add	r2,r3,r2
    44e0:	1080000b 	ldhu	r2,0(r2)
    44e4:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    44e8:	e0bffe17 	ldw	r2,-8(fp)
    44ec:	10c00a8b 	ldhu	r3,42(r2)
    44f0:	e0bffd0b 	ldhu	r2,-12(fp)
    44f4:	1884703a 	and	r2,r3,r2
    44f8:	10bfffcc 	andi	r2,r2,65535
    44fc:	1004c03a 	cmpne	r2,r2,zero
    4500:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    4504:	e0bffe17 	ldw	r2,-8(fp)
    4508:	10800a8b 	ldhu	r2,42(r2)
    450c:	1007883a 	mov	r3,r2
    4510:	e0bffd0b 	ldhu	r2,-12(fp)
    4514:	0084303a 	nor	r2,zero,r2
    4518:	1884703a 	and	r2,r3,r2
    451c:	1007883a 	mov	r3,r2
    4520:	e0bffe17 	ldw	r2,-8(fp)
    4524:	10c00a8d 	sth	r3,42(r2)
        return click;
    4528:	e0bffd83 	ldbu	r2,-10(fp)
}
    452c:	e037883a 	mov	sp,fp
    4530:	df000017 	ldw	fp,0(sp)
    4534:	dec00104 	addi	sp,sp,4
    4538:	f800283a 	ret

0000453c <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    453c:	defffd04 	addi	sp,sp,-12
    4540:	df000215 	stw	fp,8(sp)
    4544:	df000204 	addi	fp,sp,8
    4548:	e13ffe15 	stw	r4,-8(fp)
    454c:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    4550:	e0bfff17 	ldw	r2,-4(fp)
    4554:	e0fffe17 	ldw	r3,-8(fp)
    4558:	10800584 	addi	r2,r2,22
    455c:	1085883a 	add	r2,r2,r2
    4560:	1885883a 	add	r2,r3,r2
    4564:	1080000b 	ldhu	r2,0(r2)
}
    4568:	e037883a 	mov	sp,fp
    456c:	df000017 	ldw	fp,0(sp)
    4570:	dec00104 	addi	sp,sp,4
    4574:	f800283a 	ret

00004578 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4578:	defff904 	addi	sp,sp,-28
    457c:	dfc00615 	stw	ra,24(sp)
    4580:	df000515 	stw	fp,20(sp)
    4584:	df000504 	addi	fp,sp,20
    4588:	e13ffd15 	stw	r4,-12(fp)
    458c:	e17ffe15 	stw	r5,-8(fp)
    4590:	3005883a 	mov	r2,r6
    4594:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4598:	e0bffe17 	ldw	r2,-8(fp)
    459c:	10c00084 	addi	r3,r2,2
    45a0:	e0bffd17 	ldw	r2,-12(fp)
    45a4:	10801f83 	ldbu	r2,126(r2)
    45a8:	11000044 	addi	r4,r2,1
    45ac:	200b883a 	mov	r5,r4
    45b0:	e13ffd17 	ldw	r4,-12(fp)
    45b4:	21401f85 	stb	r5,126(r4)
    45b8:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    45bc:	e0bffd17 	ldw	r2,-12(fp)
    45c0:	10c00317 	ldw	r3,12(r2)
    45c4:	e0bffd17 	ldw	r2,-12(fp)
    45c8:	10800403 	ldbu	r2,16(r2)
    45cc:	11003fcc 	andi	r4,r2,255
    45d0:	e0bffd17 	ldw	r2,-12(fp)
    45d4:	10800503 	ldbu	r2,20(r2)
    45d8:	11403fcc 	andi	r5,r2,255
    45dc:	e1bfff0b 	ldhu	r6,-4(fp)
    45e0:	e0bffe17 	ldw	r2,-8(fp)
    45e4:	d8800015 	stw	r2,0(sp)
    45e8:	300f883a 	mov	r7,r6
    45ec:	280d883a 	mov	r6,r5
    45f0:	200b883a 	mov	r5,r4
    45f4:	1809883a 	mov	r4,r3
    45f8:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    45fc:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    4600:	e0bffc03 	ldbu	r2,-16(fp)
}
    4604:	e037883a 	mov	sp,fp
    4608:	dfc00117 	ldw	ra,4(sp)
    460c:	df000017 	ldw	fp,0(sp)
    4610:	dec00204 	addi	sp,sp,8
    4614:	f800283a 	ret

00004618 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    4618:	defff904 	addi	sp,sp,-28
    461c:	dfc00615 	stw	ra,24(sp)
    4620:	df000515 	stw	fp,20(sp)
    4624:	df000504 	addi	fp,sp,20
    4628:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    462c:	00800244 	movi	r2,9
    4630:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4634:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4638:	00800244 	movi	r2,9
    463c:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    4640:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4644:	008003c4 	movi	r2,15
    4648:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    464c:	00800104 	movi	r2,4
    4650:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    4654:	00800104 	movi	r2,4
    4658:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    465c:	00800804 	movi	r2,32
    4660:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    4664:	00800804 	movi	r2,32
    4668:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    466c:	00bfe004 	movi	r2,-128
    4670:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4674:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4678:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    467c:	01800344 	movi	r6,13
    4680:	e17ffb04 	addi	r5,fp,-20
    4684:	e13fff17 	ldw	r4,-4(fp)
    4688:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    468c:	e0bfff17 	ldw	r2,-4(fp)
    4690:	10800817 	ldw	r2,32(r2)
    4694:	10000326 	beq	r2,zero,46a4 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4698:	e0bfff17 	ldw	r2,-4(fp)
    469c:	10800817 	ldw	r2,32(r2)
    46a0:	103ee83a 	callr	r2
}
    46a4:	0001883a 	nop
    46a8:	e037883a 	mov	sp,fp
    46ac:	dfc00117 	ldw	ra,4(sp)
    46b0:	df000017 	ldw	fp,0(sp)
    46b4:	dec00204 	addi	sp,sp,8
    46b8:	f800283a 	ret

000046bc <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    46bc:	defff904 	addi	sp,sp,-28
    46c0:	dfc00615 	stw	ra,24(sp)
    46c4:	df000515 	stw	fp,20(sp)
    46c8:	df000504 	addi	fp,sp,20
    46cc:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    46d0:	00800244 	movi	r2,9
    46d4:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    46d8:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    46dc:	00800244 	movi	r2,9
    46e0:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    46e4:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    46e8:	008003c4 	movi	r2,15
    46ec:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    46f0:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    46f4:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    46f8:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    46fc:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    4700:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4704:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4708:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    470c:	01800344 	movi	r6,13
    4710:	e17ffb04 	addi	r5,fp,-20
    4714:	e13fff17 	ldw	r4,-4(fp)
    4718:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
}
    471c:	0001883a 	nop
    4720:	e037883a 	mov	sp,fp
    4724:	dfc00117 	ldw	ra,4(sp)
    4728:	df000017 	ldw	fp,0(sp)
    472c:	dec00204 	addi	sp,sp,8
    4730:	f800283a 	ret

00004734 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4734:	defff504 	addi	sp,sp,-44
    4738:	dfc00a15 	stw	ra,40(sp)
    473c:	df000915 	stw	fp,36(sp)
    4740:	df000904 	addi	fp,sp,36
    4744:	e13ffb15 	stw	r4,-20(fp)
    4748:	3009883a 	mov	r4,r6
    474c:	3807883a 	mov	r3,r7
    4750:	e0800217 	ldw	r2,8(fp)
    4754:	e17ffc05 	stb	r5,-16(fp)
    4758:	e13ffd05 	stb	r4,-12(fp)
    475c:	e0fffe05 	stb	r3,-8(fp)
    4760:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4764:	00800244 	movi	r2,9
    4768:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    476c:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4770:	00800244 	movi	r2,9
    4774:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4778:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    477c:	008003c4 	movi	r2,15
    4780:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    4784:	e0bffc03 	ldbu	r2,-16(fp)
    4788:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    478c:	e0bffd03 	ldbu	r2,-12(fp)
    4790:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    4794:	e0bffe03 	ldbu	r2,-8(fp)
    4798:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    479c:	e0bfff03 	ldbu	r2,-4(fp)
    47a0:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    47a4:	00bfffc4 	movi	r2,-1
    47a8:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    47ac:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    47b0:	00bfffc4 	movi	r2,-1
    47b4:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    47b8:	01800344 	movi	r6,13
    47bc:	e17ff704 	addi	r5,fp,-36
    47c0:	e13ffb17 	ldw	r4,-20(fp)
    47c4:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
}
    47c8:	0001883a 	nop
    47cc:	e037883a 	mov	sp,fp
    47d0:	dfc00117 	ldw	ra,4(sp)
    47d4:	df000017 	ldw	fp,0(sp)
    47d8:	dec00204 	addi	sp,sp,8
    47dc:	f800283a 	ret

000047e0 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    47e0:	defffe04 	addi	sp,sp,-8
    47e4:	df000115 	stw	fp,4(sp)
    47e8:	df000104 	addi	fp,sp,4
    47ec:	e13fff15 	stw	r4,-4(fp)
    47f0:	e0bfff17 	ldw	r2,-4(fp)
    47f4:	10000005 	stb	zero,0(r2)
    47f8:	e0bfff17 	ldw	r2,-4(fp)
    47fc:	10c00043 	ldbu	r3,1(r2)
    4800:	1806703a 	and	r3,r3,zero
    4804:	10c00045 	stb	r3,1(r2)
    4808:	10c00083 	ldbu	r3,2(r2)
    480c:	1806703a 	and	r3,r3,zero
    4810:	10c00085 	stb	r3,2(r2)
    4814:	10c000c3 	ldbu	r3,3(r2)
    4818:	1806703a 	and	r3,r3,zero
    481c:	10c000c5 	stb	r3,3(r2)
    4820:	10c00103 	ldbu	r3,4(r2)
    4824:	1806703a 	and	r3,r3,zero
    4828:	10c00105 	stb	r3,4(r2)
        };
    482c:	0001883a 	nop
    4830:	e037883a 	mov	sp,fp
    4834:	df000017 	ldw	fp,0(sp)
    4838:	dec00104 	addi	sp,sp,4
    483c:	f800283a 	ret

00004840 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    4840:	defffe04 	addi	sp,sp,-8
    4844:	df000115 	stw	fp,4(sp)
    4848:	df000104 	addi	fp,sp,4
    484c:	e13fff15 	stw	r4,-4(fp)
    4850:	e0bfff17 	ldw	r2,-4(fp)
    4854:	10000015 	stw	zero,0(r2)
    4858:	e0bfff17 	ldw	r2,-4(fp)
    485c:	10000105 	stb	zero,4(r2)
    4860:	e0bfff17 	ldw	r2,-4(fp)
    4864:	10000145 	stb	zero,5(r2)
        };
    4868:	0001883a 	nop
    486c:	e037883a 	mov	sp,fp
    4870:	df000017 	ldw	fp,0(sp)
    4874:	dec00104 	addi	sp,sp,4
    4878:	f800283a 	ret

0000487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    487c:	defffd04 	addi	sp,sp,-12
    4880:	df000215 	stw	fp,8(sp)
    4884:	df000204 	addi	fp,sp,8
    4888:	e13ffe15 	stw	r4,-8(fp)
    488c:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4890:	e0bfff17 	ldw	r2,-4(fp)
    4894:	10c00043 	ldbu	r3,1(r2)
    4898:	11000083 	ldbu	r4,2(r2)
    489c:	2008923a 	slli	r4,r4,8
    48a0:	20c6b03a 	or	r3,r4,r3
    48a4:	110000c3 	ldbu	r4,3(r2)
    48a8:	2008943a 	slli	r4,r4,16
    48ac:	20c6b03a 	or	r3,r4,r3
    48b0:	10800103 	ldbu	r2,4(r2)
    48b4:	1004963a 	slli	r2,r2,24
    48b8:	10c4b03a 	or	r2,r2,r3
    48bc:	1007883a 	mov	r3,r2
    48c0:	e0bffe17 	ldw	r2,-8(fp)
    48c4:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    48c8:	e0bfff17 	ldw	r2,-4(fp)
    48cc:	10c00003 	ldbu	r3,0(r2)
    48d0:	e0bffe17 	ldw	r2,-8(fp)
    48d4:	10c00145 	stb	r3,5(r2)
    48d8:	e0bffe17 	ldw	r2,-8(fp)
    48dc:	10c00143 	ldbu	r3,5(r2)
    48e0:	e0bffe17 	ldw	r2,-8(fp)
    48e4:	10c00105 	stb	r3,4(r2)
        };
    48e8:	0001883a 	nop
    48ec:	e037883a 	mov	sp,fp
    48f0:	df000017 	ldw	fp,0(sp)
    48f4:	dec00104 	addi	sp,sp,4
    48f8:	f800283a 	ret

000048fc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    48fc:	defffe04 	addi	sp,sp,-8
    4900:	df000115 	stw	fp,4(sp)
    4904:	df000104 	addi	fp,sp,4
    4908:	e13fff15 	stw	r4,-4(fp)
    490c:	e0bfff17 	ldw	r2,-4(fp)
    4910:	10000015 	stw	zero,0(r2)
    4914:	e0bfff17 	ldw	r2,-4(fp)
    4918:	10000105 	stb	zero,4(r2)
    491c:	e0bfff17 	ldw	r2,-4(fp)
    4920:	1000018d 	sth	zero,6(r2)
        };
    4924:	0001883a 	nop
    4928:	e037883a 	mov	sp,fp
    492c:	df000017 	ldw	fp,0(sp)
    4930:	dec00104 	addi	sp,sp,4
    4934:	f800283a 	ret

00004938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4938:	defffd04 	addi	sp,sp,-12
    493c:	df000215 	stw	fp,8(sp)
    4940:	df000204 	addi	fp,sp,8
    4944:	e13ffe15 	stw	r4,-8(fp)
    4948:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    494c:	e0bfff17 	ldw	r2,-4(fp)
    4950:	10c00043 	ldbu	r3,1(r2)
    4954:	11000083 	ldbu	r4,2(r2)
    4958:	2008923a 	slli	r4,r4,8
    495c:	20c6b03a 	or	r3,r4,r3
    4960:	110000c3 	ldbu	r4,3(r2)
    4964:	2008943a 	slli	r4,r4,16
    4968:	20c6b03a 	or	r3,r4,r3
    496c:	10800103 	ldbu	r2,4(r2)
    4970:	1004963a 	slli	r2,r2,24
    4974:	10c4b03a 	or	r2,r2,r3
    4978:	1007883a 	mov	r3,r2
    497c:	e0bffe17 	ldw	r2,-8(fp)
    4980:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    4984:	e0bffe17 	ldw	r2,-8(fp)
    4988:	1000018d 	sth	zero,6(r2)
        };
    498c:	0001883a 	nop
    4990:	e037883a 	mov	sp,fp
    4994:	df000017 	ldw	fp,0(sp)
    4998:	dec00104 	addi	sp,sp,4
    499c:	f800283a 	ret

000049a0 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    49a0:	defffb04 	addi	sp,sp,-20
    49a4:	df000415 	stw	fp,16(sp)
    49a8:	df000404 	addi	fp,sp,16
    49ac:	e13ffc15 	stw	r4,-16(fp)
    49b0:	e17ffd15 	stw	r5,-12(fp)
    49b4:	e1bffe15 	stw	r6,-8(fp)
    49b8:	3805883a 	mov	r2,r7
    49bc:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    49c0:	e0bffc17 	ldw	r2,-16(fp)
    49c4:	10800103 	ldbu	r2,4(r2)
    49c8:	10803fcc 	andi	r2,r2,255
    49cc:	10000326 	beq	r2,zero,49dc <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    49d0:	10800060 	cmpeqi	r2,r2,1
    49d4:	10000a1e 	bne	r2,zero,4a00 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    49d8:	00002906 	br	4a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    49dc:	e0bffc17 	ldw	r2,-16(fp)
    49e0:	e0ffff0b 	ldhu	r3,-4(fp)
    49e4:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    49e8:	e0bffc17 	ldw	r2,-16(fp)
    49ec:	10800103 	ldbu	r2,4(r2)
    49f0:	10800044 	addi	r2,r2,1
    49f4:	1007883a 	mov	r3,r2
    49f8:	e0bffc17 	ldw	r2,-16(fp)
    49fc:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    4a00:	e0bffc17 	ldw	r2,-16(fp)
    4a04:	1080018b 	ldhu	r2,6(r2)
    4a08:	10bfffcc 	andi	r2,r2,65535
    4a0c:	10001626 	beq	r2,zero,4a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a10:	e0bffe17 	ldw	r2,-8(fp)
    4a14:	1080000b 	ldhu	r2,0(r2)
    4a18:	10bfffcc 	andi	r2,r2,65535
    4a1c:	10001226 	beq	r2,zero,4a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a20:	e0bffc17 	ldw	r2,-16(fp)
    4a24:	1080018b 	ldhu	r2,6(r2)
    4a28:	10bfffc4 	addi	r2,r2,-1
    4a2c:	1007883a 	mov	r3,r2
    4a30:	e0bffc17 	ldw	r2,-16(fp)
    4a34:	10c0018d 	sth	r3,6(r2)
    4a38:	e0bffd17 	ldw	r2,-12(fp)
    4a3c:	10800017 	ldw	r2,0(r2)
    4a40:	10c00044 	addi	r3,r2,1
    4a44:	e0bffd17 	ldw	r2,-12(fp)
    4a48:	10c00015 	stw	r3,0(r2)
    4a4c:	e0bffe17 	ldw	r2,-8(fp)
    4a50:	1080000b 	ldhu	r2,0(r2)
    4a54:	10bfffc4 	addi	r2,r2,-1
    4a58:	1007883a 	mov	r3,r2
    4a5c:	e0bffe17 	ldw	r2,-8(fp)
    4a60:	10c0000d 	sth	r3,0(r2)
    4a64:	003fe606 	br	4a00 <__alt_data_end+0xfc004a00>

                                if(!countDown)
    4a68:	e0bffc17 	ldw	r2,-16(fp)
    4a6c:	1080018b 	ldhu	r2,6(r2)
    4a70:	10bfffcc 	andi	r2,r2,65535
    4a74:	1000021e 	bne	r2,zero,4a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4a78:	e0bffc17 	ldw	r2,-16(fp)
    4a7c:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    4a80:	e0bffc17 	ldw	r2,-16(fp)
    4a84:	1080018b 	ldhu	r2,6(r2)
    4a88:	10bfffcc 	andi	r2,r2,65535
    4a8c:	1005003a 	cmpeq	r2,r2,zero
        };
    4a90:	e037883a 	mov	sp,fp
    4a94:	df000017 	ldw	fp,0(sp)
    4a98:	dec00104 	addi	sp,sp,4
    4a9c:	f800283a 	ret

00004aa0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4aa0:	defffb04 	addi	sp,sp,-20
    4aa4:	df000415 	stw	fp,16(sp)
    4aa8:	df000404 	addi	fp,sp,16
    4aac:	e13ffc15 	stw	r4,-16(fp)
    4ab0:	2809883a 	mov	r4,r5
    4ab4:	3007883a 	mov	r3,r6
    4ab8:	3805883a 	mov	r2,r7
    4abc:	e13ffd05 	stb	r4,-12(fp)
    4ac0:	e0fffe05 	stb	r3,-8(fp)
    4ac4:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4ac8:	0005883a 	mov	r2,zero
        }
    4acc:	e037883a 	mov	sp,fp
    4ad0:	df000017 	ldw	fp,0(sp)
    4ad4:	dec00104 	addi	sp,sp,4
    4ad8:	f800283a 	ret

00004adc <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4adc:	defffb04 	addi	sp,sp,-20
    4ae0:	df000415 	stw	fp,16(sp)
    4ae4:	df000404 	addi	fp,sp,16
    4ae8:	e13ffc15 	stw	r4,-16(fp)
    4aec:	2809883a 	mov	r4,r5
    4af0:	3007883a 	mov	r3,r6
    4af4:	3805883a 	mov	r2,r7
    4af8:	e13ffd05 	stb	r4,-12(fp)
    4afc:	e0fffe05 	stb	r3,-8(fp)
    4b00:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4b04:	0005883a 	mov	r2,zero
        }
    4b08:	e037883a 	mov	sp,fp
    4b0c:	df000017 	ldw	fp,0(sp)
    4b10:	dec00104 	addi	sp,sp,4
    4b14:	f800283a 	ret

00004b18 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4b18:	defffe04 	addi	sp,sp,-8
    4b1c:	df000115 	stw	fp,4(sp)
    4b20:	df000104 	addi	fp,sp,4
    4b24:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b28:	0005883a 	mov	r2,zero
        }
    4b2c:	e037883a 	mov	sp,fp
    4b30:	df000017 	ldw	fp,0(sp)
    4b34:	dec00104 	addi	sp,sp,4
    4b38:	f800283a 	ret

00004b3c <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4b3c:	defffe04 	addi	sp,sp,-8
    4b40:	df000115 	stw	fp,4(sp)
    4b44:	df000104 	addi	fp,sp,4
    4b48:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b4c:	0005883a 	mov	r2,zero
        }
    4b50:	e037883a 	mov	sp,fp
    4b54:	df000017 	ldw	fp,0(sp)
    4b58:	dec00104 	addi	sp,sp,4
    4b5c:	f800283a 	ret

00004b60 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    4b60:	defffe04 	addi	sp,sp,-8
    4b64:	df000115 	stw	fp,4(sp)
    4b68:	df000104 	addi	fp,sp,4
    4b6c:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b70:	0005883a 	mov	r2,zero
        }
    4b74:	e037883a 	mov	sp,fp
    4b78:	df000017 	ldw	fp,0(sp)
    4b7c:	dec00104 	addi	sp,sp,4
    4b80:	f800283a 	ret

00004b84 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4b84:	defffd04 	addi	sp,sp,-12
    4b88:	df000215 	stw	fp,8(sp)
    4b8c:	df000204 	addi	fp,sp,8
    4b90:	e13ffe15 	stw	r4,-8(fp)
    4b94:	2805883a 	mov	r2,r5
    4b98:	e0bfff05 	stb	r2,-4(fp)
                return;
    4b9c:	0001883a 	nop
        } // Note used for hubs only!
    4ba0:	e037883a 	mov	sp,fp
    4ba4:	df000017 	ldw	fp,0(sp)
    4ba8:	dec00104 	addi	sp,sp,4
    4bac:	f800283a 	ret

00004bb0 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    4bb0:	defffc04 	addi	sp,sp,-16
    4bb4:	df000315 	stw	fp,12(sp)
    4bb8:	df000304 	addi	fp,sp,12
    4bbc:	e13ffd15 	stw	r4,-12(fp)
    4bc0:	2807883a 	mov	r3,r5
    4bc4:	3005883a 	mov	r2,r6
    4bc8:	e0fffe0d 	sth	r3,-8(fp)
    4bcc:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    4bd0:	0005883a 	mov	r2,zero
        }
    4bd4:	e037883a 	mov	sp,fp
    4bd8:	df000017 	ldw	fp,0(sp)
    4bdc:	dec00104 	addi	sp,sp,4
    4be0:	f800283a 	ret

00004be4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    4be4:	defffd04 	addi	sp,sp,-12
    4be8:	df000215 	stw	fp,8(sp)
    4bec:	df000204 	addi	fp,sp,8
    4bf0:	e13ffe15 	stw	r4,-8(fp)
    4bf4:	2805883a 	mov	r2,r5
    4bf8:	e0bfff05 	stb	r2,-4(fp)
                return false;
    4bfc:	0005883a 	mov	r2,zero
        }
    4c00:	e037883a 	mov	sp,fp
    4c04:	df000017 	ldw	fp,0(sp)
    4c08:	dec00104 	addi	sp,sp,4
    4c0c:	f800283a 	ret

00004c10 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    4c10:	defffd04 	addi	sp,sp,-12
    4c14:	df000215 	stw	fp,8(sp)
    4c18:	df000204 	addi	fp,sp,8
    4c1c:	e13ffe15 	stw	r4,-8(fp)
    4c20:	2805883a 	mov	r2,r5
    4c24:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4c28:	00800044 	movi	r2,1
        }
    4c2c:	e037883a 	mov	sp,fp
    4c30:	df000017 	ldw	fp,0(sp)
    4c34:	dec00104 	addi	sp,sp,4
    4c38:	f800283a 	ret

00004c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4c3c:	defffc04 	addi	sp,sp,-16
    4c40:	df000315 	stw	fp,12(sp)
    4c44:	df000304 	addi	fp,sp,12
    4c48:	e13ffe15 	stw	r4,-8(fp)
    4c4c:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4c50:	e03ffd05 	stb	zero,-12(fp)
    4c54:	e0bffd03 	ldbu	r2,-12(fp)
    4c58:	10800428 	cmpgeui	r2,r2,16
    4c5c:	1000161e 	bne	r2,zero,4cb8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    4c60:	e0bffd03 	ldbu	r2,-12(fp)
    4c64:	e0fffe17 	ldw	r3,-8(fp)
    4c68:	10800784 	addi	r2,r2,30
    4c6c:	1085883a 	add	r2,r2,r2
    4c70:	1085883a 	add	r2,r2,r2
    4c74:	1885883a 	add	r2,r3,r2
    4c78:	10800017 	ldw	r2,0(r2)
    4c7c:	10000a1e 	bne	r2,zero,4ca8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    4c80:	e0bffd03 	ldbu	r2,-12(fp)
    4c84:	e0fffe17 	ldw	r3,-8(fp)
    4c88:	10800784 	addi	r2,r2,30
    4c8c:	1085883a 	add	r2,r2,r2
    4c90:	1085883a 	add	r2,r2,r2
    4c94:	1885883a 	add	r2,r3,r2
    4c98:	e0ffff17 	ldw	r3,-4(fp)
    4c9c:	10c00015 	stw	r3,0(r2)
                                return 0;
    4ca0:	0005883a 	mov	r2,zero
    4ca4:	00000506 	br	4cbc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4ca8:	e0bffd03 	ldbu	r2,-12(fp)
    4cac:	10800044 	addi	r2,r2,1
    4cb0:	e0bffd05 	stb	r2,-12(fp)
    4cb4:	003fe706 	br	4c54 <__alt_data_end+0xfc004c54>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    4cb8:	00bff4c4 	movi	r2,-45
        };
    4cbc:	e037883a 	mov	sp,fp
    4cc0:	df000017 	ldw	fp,0(sp)
    4cc4:	dec00104 	addi	sp,sp,4
    4cc8:	f800283a 	ret

00004ccc <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    4ccc:	defffa04 	addi	sp,sp,-24
    4cd0:	df000515 	stw	fp,20(sp)
    4cd4:	df000504 	addi	fp,sp,20
    4cd8:	e13ffb15 	stw	r4,-20(fp)
    4cdc:	3009883a 	mov	r4,r6
    4ce0:	3807883a 	mov	r3,r7
    4ce4:	e0800117 	ldw	r2,4(fp)
    4ce8:	e17ffc05 	stb	r5,-16(fp)
    4cec:	e13ffd05 	stb	r4,-12(fp)
    4cf0:	e0fffe05 	stb	r3,-8(fp)
    4cf4:	e0bfff05 	stb	r2,-4(fp)
        };
    4cf8:	0001883a 	nop
    4cfc:	e037883a 	mov	sp,fp
    4d00:	df000017 	ldw	fp,0(sp)
    4d04:	dec00104 	addi	sp,sp,4
    4d08:	f800283a 	ret

00004d0c <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4d0c:	defffe04 	addi	sp,sp,-8
    4d10:	df000115 	stw	fp,4(sp)
    4d14:	df000104 	addi	fp,sp,4
    4d18:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4d1c:	e0bfff17 	ldw	r2,-4(fp)
    4d20:	10800403 	ldbu	r2,16(r2)
        };
    4d24:	e037883a 	mov	sp,fp
    4d28:	df000017 	ldw	fp,0(sp)
    4d2c:	dec00104 	addi	sp,sp,4
    4d30:	f800283a 	ret

00004d34 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4d34:	defffe04 	addi	sp,sp,-8
    4d38:	df000115 	stw	fp,4(sp)
    4d3c:	df000104 	addi	fp,sp,4
    4d40:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4d44:	e0bfff17 	ldw	r2,-4(fp)
    4d48:	10800943 	ldbu	r2,37(r2)
        };
    4d4c:	e037883a 	mov	sp,fp
    4d50:	df000017 	ldw	fp,0(sp)
    4d54:	dec00104 	addi	sp,sp,4
    4d58:	f800283a 	ret

00004d5c <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4d5c:	defffc04 	addi	sp,sp,-16
    4d60:	df000315 	stw	fp,12(sp)
    4d64:	df000304 	addi	fp,sp,12
    4d68:	e13ffd15 	stw	r4,-12(fp)
    4d6c:	2807883a 	mov	r3,r5
    4d70:	3005883a 	mov	r2,r6
    4d74:	e0fffe0d 	sth	r3,-8(fp)
    4d78:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4d7c:	e0bffe0b 	ldhu	r2,-8(fp)
    4d80:	108117a0 	cmpeqi	r2,r2,1118
    4d84:	10000f1e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4d88:	e0bffe0b 	ldhu	r2,-8(fp)
    4d8c:	1081ce20 	cmpeqi	r2,r2,1848
    4d90:	10000c1e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4d94:	e0bffe0b 	ldhu	r2,-8(fp)
    4d98:	10839be0 	cmpeqi	r2,r2,3695
    4d9c:	1000091e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4da0:	e0bffe0b 	ldhu	r2,-8(fp)
    4da4:	1083c360 	cmpeqi	r2,r2,3853
    4da8:	1000061e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4dac:	e0bffe0b 	ldhu	r2,-8(fp)
    4db0:	10854ca0 	cmpeqi	r2,r2,5426
    4db4:	1000031e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4db8:	e0bffe0b 	ldhu	r2,-8(fp)
    4dbc:	10893198 	cmpnei	r2,r2,9414
    4dc0:	10002c1e 	bne	r2,zero,4e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    4dc4:	e0bfff0b 	ldhu	r2,-4(fp)
    4dc8:	1080b460 	cmpeqi	r2,r2,721
    4dcc:	1000271e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    4dd0:	e0bfff0b 	ldhu	r2,-4(fp)
    4dd4:	1080b760 	cmpeqi	r2,r2,733
    4dd8:	1000241e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ddc:	e0bfff0b 	ldhu	r2,-4(fp)
    4de0:	1080b8e0 	cmpeqi	r2,r2,739
    4de4:	1000211e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4de8:	e0bfff0b 	ldhu	r2,-4(fp)
    4dec:	1080baa0 	cmpeqi	r2,r2,746
    4df0:	10001e1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4df4:	e0bfff0b 	ldhu	r2,-4(fp)
    4df8:	10928060 	cmpeqi	r2,r2,18945
    4dfc:	10001b1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    4e00:	e0bfff0b 	ldhu	r2,-4(fp)
    4e04:	10804e60 	cmpeqi	r2,r2,313
    4e08:	1000181e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e0c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e10:	108051a0 	cmpeqi	r2,r2,326
    4e14:	1000151e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e18:	e0bfff0b 	ldhu	r2,-4(fp)
    4e1c:	108019e0 	cmpeqi	r2,r2,103
    4e20:	1000121e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e24:	e0bfff0b 	ldhu	r2,-4(fp)
    4e28:	108280e0 	cmpeqi	r2,r2,2563
    4e2c:	10000f1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4e30:	e0bfff0b 	ldhu	r2,-4(fp)
    4e34:	109506a0 	cmpeqi	r2,r2,21530
    4e38:	10000c1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e3c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e40:	10950aa0 	cmpeqi	r2,r2,21546
    4e44:	1000091e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e48:	e0bfff0b 	ldhu	r2,-4(fp)
    4e4c:	10950ea0 	cmpeqi	r2,r2,21562
    4e50:	1000061e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e54:	e0bfff0b 	ldhu	r2,-4(fp)
    4e58:	1082c2a0 	cmpeqi	r2,r2,2826
    4e5c:	1000031e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4e60:	e0bfff0b 	ldhu	r2,-4(fp)
    4e64:	1082c498 	cmpnei	r2,r2,2834
    4e68:	1000021e 	bne	r2,zero,4e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4e6c:	00800044 	movi	r2,1
    4e70:	00000106 	br	4e78 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4e74:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4e78:	e037883a 	mov	sp,fp
    4e7c:	df000017 	ldw	fp,0(sp)
    4e80:	dec00104 	addi	sp,sp,4
    4e84:	f800283a 	ret

00004e88 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4e88:	defffe04 	addi	sp,sp,-8
    4e8c:	df000115 	stw	fp,4(sp)
    4e90:	df000104 	addi	fp,sp,4
    4e94:	e13fff15 	stw	r4,-4(fp)
    4e98:	008000b4 	movhi	r2,2
    4e9c:	108acc04 	addi	r2,r2,11056
    4ea0:	e0ffff17 	ldw	r3,-4(fp)
    4ea4:	18800015 	stw	r2,0(r3)
    4ea8:	0001883a 	nop
    4eac:	e037883a 	mov	sp,fp
    4eb0:	df000017 	ldw	fp,0(sp)
    4eb4:	dec00104 	addi	sp,sp,4
    4eb8:	f800283a 	ret

00004ebc <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4ebc:	defffe04 	addi	sp,sp,-8
    4ec0:	df000115 	stw	fp,4(sp)
    4ec4:	df000104 	addi	fp,sp,4
    4ec8:	e13fff15 	stw	r4,-4(fp)
    4ecc:	008000b4 	movhi	r2,2
    4ed0:	108ac604 	addi	r2,r2,11032
    4ed4:	e0ffff17 	ldw	r3,-4(fp)
    4ed8:	18800015 	stw	r2,0(r3)
    4edc:	0001883a 	nop
    4ee0:	e037883a 	mov	sp,fp
    4ee4:	df000017 	ldw	fp,0(sp)
    4ee8:	dec00104 	addi	sp,sp,4
    4eec:	f800283a 	ret

00004ef0 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4ef0:	defffe04 	addi	sp,sp,-8
    4ef4:	df000115 	stw	fp,4(sp)
    4ef8:	df000104 	addi	fp,sp,4
    4efc:	e13fff15 	stw	r4,-4(fp)
    4f00:	008000b4 	movhi	r2,2
    4f04:	108ac904 	addi	r2,r2,11044
    4f08:	e0ffff17 	ldw	r3,-4(fp)
    4f0c:	18800015 	stw	r2,0(r3)
    4f10:	0001883a 	nop
    4f14:	e037883a 	mov	sp,fp
    4f18:	df000017 	ldw	fp,0(sp)
    4f1c:	dec00104 	addi	sp,sp,4
    4f20:	f800283a 	ret

00004f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4f24:	defffc04 	addi	sp,sp,-16
    4f28:	dfc00315 	stw	ra,12(sp)
    4f2c:	df000215 	stw	fp,8(sp)
    4f30:	df000204 	addi	fp,sp,8
    4f34:	e13ffe15 	stw	r4,-8(fp)
    4f38:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4f3c:	e0bffe17 	ldw	r2,-8(fp)
    4f40:	1009883a 	mov	r4,r2
    4f44:	0004ef00 	call	4ef0 <_ZN13USBReadParserC1Ev>
    4f48:	008000b4 	movhi	r2,2
    4f4c:	108ac304 	addi	r2,r2,11020
    4f50:	e0fffe17 	ldw	r3,-8(fp)
    4f54:	18800015 	stw	r2,0(r3)
    4f58:	e0bffe17 	ldw	r2,-8(fp)
    4f5c:	e0ffff17 	ldw	r3,-4(fp)
    4f60:	10c00115 	stw	r3,4(r2)
    4f64:	e0bffe17 	ldw	r2,-8(fp)
    4f68:	10800204 	addi	r2,r2,8
    4f6c:	1009883a 	mov	r4,r2
    4f70:	00047e00 	call	47e0 <_ZN16MultiValueBufferC1Ev>
    4f74:	e0bffe17 	ldw	r2,-8(fp)
    4f78:	10800404 	addi	r2,r2,16
    4f7c:	1009883a 	mov	r4,r2
    4f80:	00048400 	call	4840 <_ZN20MultiByteValueParserC1Ev>
    4f84:	e0bffe17 	ldw	r2,-8(fp)
    4f88:	10800604 	addi	r2,r2,24
    4f8c:	1009883a 	mov	r4,r2
    4f90:	00048fc0 	call	48fc <_ZN11ByteSkipperC1Ev>
    4f94:	e0bffe17 	ldw	r2,-8(fp)
    4f98:	10000c05 	stb	zero,48(r2)
    4f9c:	e0bffe17 	ldw	r2,-8(fp)
    4fa0:	10000c45 	stb	zero,49(r2)
    4fa4:	e0bffe17 	ldw	r2,-8(fp)
    4fa8:	10000c85 	stb	zero,50(r2)
    4fac:	e0bffe17 	ldw	r2,-8(fp)
    4fb0:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    4fb4:	e0bffe17 	ldw	r2,-8(fp)
    4fb8:	10c00804 	addi	r3,r2,32
    4fbc:	e0bffe17 	ldw	r2,-8(fp)
    4fc0:	19803fcc 	andi	r6,r3,255
    4fc4:	11000243 	ldbu	r4,9(r2)
    4fc8:	2008703a 	and	r4,r4,zero
    4fcc:	200b883a 	mov	r5,r4
    4fd0:	3009883a 	mov	r4,r6
    4fd4:	2908b03a 	or	r4,r5,r4
    4fd8:	11000245 	stb	r4,9(r2)
    4fdc:	1808d23a 	srli	r4,r3,8
    4fe0:	21803fcc 	andi	r6,r4,255
    4fe4:	11000283 	ldbu	r4,10(r2)
    4fe8:	2008703a 	and	r4,r4,zero
    4fec:	200b883a 	mov	r5,r4
    4ff0:	3009883a 	mov	r4,r6
    4ff4:	2908b03a 	or	r4,r5,r4
    4ff8:	11000285 	stb	r4,10(r2)
    4ffc:	1808d43a 	srli	r4,r3,16
    5000:	21803fcc 	andi	r6,r4,255
    5004:	110002c3 	ldbu	r4,11(r2)
    5008:	2008703a 	and	r4,r4,zero
    500c:	200b883a 	mov	r5,r4
    5010:	3009883a 	mov	r4,r6
    5014:	2908b03a 	or	r4,r5,r4
    5018:	110002c5 	stb	r4,11(r2)
    501c:	180ad63a 	srli	r5,r3,24
    5020:	10c00303 	ldbu	r3,12(r2)
    5024:	1806703a 	and	r3,r3,zero
    5028:	1809883a 	mov	r4,r3
    502c:	2807883a 	mov	r3,r5
    5030:	20c6b03a 	or	r3,r4,r3
    5034:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    5038:	e0bffe17 	ldw	r2,-8(fp)
    503c:	10c00404 	addi	r3,r2,16
    5040:	e0bffe17 	ldw	r2,-8(fp)
    5044:	10800204 	addi	r2,r2,8
    5048:	100b883a 	mov	r5,r2
    504c:	1809883a 	mov	r4,r3
    5050:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    5054:	e0bffe17 	ldw	r2,-8(fp)
    5058:	10c00604 	addi	r3,r2,24
    505c:	e0bffe17 	ldw	r2,-8(fp)
    5060:	10800204 	addi	r2,r2,8
    5064:	100b883a 	mov	r5,r2
    5068:	1809883a 	mov	r4,r3
    506c:	00049380 	call	4938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    5070:	0001883a 	nop
    5074:	e037883a 	mov	sp,fp
    5078:	dfc00117 	ldw	ra,4(sp)
    507c:	df000017 	ldw	fp,0(sp)
    5080:	dec00204 	addi	sp,sp,8
    5084:	f800283a 	ret

00005088 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    5088:	defff804 	addi	sp,sp,-32
    508c:	dfc00715 	stw	ra,28(sp)
    5090:	df000615 	stw	fp,24(sp)
    5094:	df000604 	addi	fp,sp,24
    5098:	e13ffc15 	stw	r4,-16(fp)
    509c:	2805883a 	mov	r2,r5
    50a0:	e1bffe15 	stw	r6,-8(fp)
    50a4:	e1ffff15 	stw	r7,-4(fp)
    50a8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    50ac:	e0bffd0b 	ldhu	r2,-12(fp)
    50b0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    50b4:	e0bffe17 	ldw	r2,-8(fp)
    50b8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    50bc:	e0bffa0b 	ldhu	r2,-24(fp)
    50c0:	10bfffcc 	andi	r2,r2,65535
    50c4:	10000a26 	beq	r2,zero,50f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    50c8:	e0bffb04 	addi	r2,fp,-20
    50cc:	e1bffa04 	addi	r6,fp,-24
    50d0:	100b883a 	mov	r5,r2
    50d4:	e13ffc17 	ldw	r4,-16(fp)
    50d8:	00051040 	call	5104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    50dc:	1080005c 	xori	r2,r2,1
    50e0:	10803fcc 	andi	r2,r2,255
    50e4:	1000011e 	bne	r2,zero,50ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    50e8:	003ff406 	br	50bc <__alt_data_end+0xfc0050bc>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    50ec:	0001883a 	nop
}
    50f0:	e037883a 	mov	sp,fp
    50f4:	dfc00117 	ldw	ra,4(sp)
    50f8:	df000017 	ldw	fp,0(sp)
    50fc:	dec00204 	addi	sp,sp,8
    5100:	f800283a 	ret

00005104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    5104:	defff604 	addi	sp,sp,-40
    5108:	dfc00915 	stw	ra,36(sp)
    510c:	df000815 	stw	fp,32(sp)
    5110:	df000804 	addi	fp,sp,32
    5114:	e13ffc15 	stw	r4,-16(fp)
    5118:	e17ffd15 	stw	r5,-12(fp)
    511c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    5120:	e0bffc17 	ldw	r2,-16(fp)
    5124:	10800804 	addi	r2,r2,32
    5128:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    512c:	e0bffc17 	ldw	r2,-16(fp)
    5130:	10800804 	addi	r2,r2,32
    5134:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    5138:	e0bffc17 	ldw	r2,-16(fp)
    513c:	10800c03 	ldbu	r2,48(r2)
    5140:	10803fcc 	andi	r2,r2,255
    5144:	10c00168 	cmpgeui	r3,r2,5
    5148:	1801141e 	bne	r3,zero,559c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    514c:	100690ba 	slli	r3,r2,2
    5150:	00800034 	movhi	r2,0
    5154:	10945904 	addi	r2,r2,20836
    5158:	1885883a 	add	r2,r3,r2
    515c:	10800017 	ldw	r2,0(r2)
    5160:	1000683a 	jmp	r2
    5164:	00005178 	rdprs	zero,zero,325
    5168:	000051ac 	andhi	zero,zero,326
    516c:	00005234 	movhi	zero,328
    5170:	000052c8 	cmpgei	zero,zero,331
    5174:	00005334 	movhi	zero,332
                case 0:
                        theBuffer.valueSize = 2;
    5178:	e0bffc17 	ldw	r2,-16(fp)
    517c:	00c00084 	movi	r3,2
    5180:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    5184:	e0bffc17 	ldw	r2,-16(fp)
    5188:	10c00404 	addi	r3,r2,16
    518c:	e0bffc17 	ldw	r2,-16(fp)
    5190:	10800204 	addi	r2,r2,8
    5194:	100b883a 	mov	r5,r2
    5198:	1809883a 	mov	r4,r3
    519c:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    51a0:	e0bffc17 	ldw	r2,-16(fp)
    51a4:	00c00044 	movi	r3,1
    51a8:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    51ac:	e0bffc17 	ldw	r2,-16(fp)
    51b0:	10800404 	addi	r2,r2,16
    51b4:	e1bffe17 	ldw	r6,-8(fp)
    51b8:	e17ffd17 	ldw	r5,-12(fp)
    51bc:	1009883a 	mov	r4,r2
    51c0:	00062a80 	call	62a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    51c4:	1080005c 	xori	r2,r2,1
    51c8:	10803fcc 	andi	r2,r2,255
    51cc:	10000226 	beq	r2,zero,51d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    51d0:	0005883a 	mov	r2,zero
    51d4:	0000f206 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    51d8:	e0bffc17 	ldw	r2,-16(fp)
    51dc:	10c00217 	ldw	r3,8(r2)
    51e0:	1806d23a 	srli	r3,r3,8
    51e4:	10800317 	ldw	r2,12(r2)
    51e8:	10803fcc 	andi	r2,r2,255
    51ec:	1004963a 	slli	r2,r2,24
    51f0:	10c4b03a 	or	r2,r2,r3
    51f4:	10c00003 	ldbu	r3,0(r2)
    51f8:	e0bffc17 	ldw	r2,-16(fp)
    51fc:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    5200:	e0bffc17 	ldw	r2,-16(fp)
    5204:	10c00217 	ldw	r3,8(r2)
    5208:	1806d23a 	srli	r3,r3,8
    520c:	10800317 	ldw	r2,12(r2)
    5210:	10803fcc 	andi	r2,r2,255
    5214:	1004963a 	slli	r2,r2,24
    5218:	10c4b03a 	or	r2,r2,r3
    521c:	10c00043 	ldbu	r3,1(r2)
    5220:	e0bffc17 	ldw	r2,-16(fp)
    5224:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    5228:	e0bffc17 	ldw	r2,-16(fp)
    522c:	00c00084 	movi	r3,2
    5230:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    5234:	e0bffc17 	ldw	r2,-16(fp)
    5238:	10800804 	addi	r2,r2,32
    523c:	10c00084 	addi	r3,r2,2
    5240:	e0bffc17 	ldw	r2,-16(fp)
    5244:	19803fcc 	andi	r6,r3,255
    5248:	11000243 	ldbu	r4,9(r2)
    524c:	2008703a 	and	r4,r4,zero
    5250:	200b883a 	mov	r5,r4
    5254:	3009883a 	mov	r4,r6
    5258:	2908b03a 	or	r4,r5,r4
    525c:	11000245 	stb	r4,9(r2)
    5260:	1808d23a 	srli	r4,r3,8
    5264:	21803fcc 	andi	r6,r4,255
    5268:	11000283 	ldbu	r4,10(r2)
    526c:	2008703a 	and	r4,r4,zero
    5270:	200b883a 	mov	r5,r4
    5274:	3009883a 	mov	r4,r6
    5278:	2908b03a 	or	r4,r5,r4
    527c:	11000285 	stb	r4,10(r2)
    5280:	1808d43a 	srli	r4,r3,16
    5284:	21803fcc 	andi	r6,r4,255
    5288:	110002c3 	ldbu	r4,11(r2)
    528c:	2008703a 	and	r4,r4,zero
    5290:	200b883a 	mov	r5,r4
    5294:	3009883a 	mov	r4,r6
    5298:	2908b03a 	or	r4,r5,r4
    529c:	110002c5 	stb	r4,11(r2)
    52a0:	180ad63a 	srli	r5,r3,24
    52a4:	10c00303 	ldbu	r3,12(r2)
    52a8:	1806703a 	and	r3,r3,zero
    52ac:	1809883a 	mov	r4,r3
    52b0:	2807883a 	mov	r3,r5
    52b4:	20c6b03a 	or	r3,r4,r3
    52b8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    52bc:	e0bffc17 	ldw	r2,-16(fp)
    52c0:	00c000c4 	movi	r3,3
    52c4:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    52c8:	e0bffc17 	ldw	r2,-16(fp)
    52cc:	10800c83 	ldbu	r2,50(r2)
    52d0:	10803fcc 	andi	r2,r2,255
    52d4:	10c00120 	cmpeqi	r3,r2,4
    52d8:	1800021e 	bne	r3,zero,52e4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    52dc:	10800148 	cmpgei	r2,r2,5
    52e0:	00000306 	br	52f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    52e4:	e0bffc17 	ldw	r2,-16(fp)
    52e8:	10000cc5 	stb	zero,51(r2)
                                        break;
    52ec:	00000106 	br	52f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    52f0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    52f4:	e0bffc17 	ldw	r2,-16(fp)
    52f8:	10800c43 	ldbu	r2,49(r2)
    52fc:	10bfff84 	addi	r2,r2,-2
    5300:	1007883a 	mov	r3,r2
    5304:	e0bffc17 	ldw	r2,-16(fp)
    5308:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    530c:	e0bffc17 	ldw	r2,-16(fp)
    5310:	10c00404 	addi	r3,r2,16
    5314:	e0bffc17 	ldw	r2,-16(fp)
    5318:	10800204 	addi	r2,r2,8
    531c:	100b883a 	mov	r5,r2
    5320:	1809883a 	mov	r4,r3
    5324:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    5328:	e0bffc17 	ldw	r2,-16(fp)
    532c:	00c00104 	movi	r3,4
    5330:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    5334:	e0bffc17 	ldw	r2,-16(fp)
    5338:	10800c83 	ldbu	r2,50(r2)
    533c:	10803fcc 	andi	r2,r2,255
    5340:	10c00120 	cmpeqi	r3,r2,4
    5344:	1800141e 	bne	r3,zero,5398 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    5348:	10c00160 	cmpeqi	r3,r2,5
    534c:	1800311e 	bne	r3,zero,5414 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    5350:	108000a0 	cmpeqi	r2,r2,2
    5354:	10005a26 	beq	r2,zero,54c0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    5358:	e0bffc17 	ldw	r2,-16(fp)
    535c:	10800404 	addi	r2,r2,16
    5360:	e1bffe17 	ldw	r6,-8(fp)
    5364:	e17ffd17 	ldw	r5,-12(fp)
    5368:	1009883a 	mov	r4,r2
    536c:	00062a80 	call	62a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5370:	1080005c 	xori	r2,r2,1
    5374:	10803fcc 	andi	r2,r2,255
    5378:	10000226 	beq	r2,zero,5384 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    537c:	0005883a 	mov	r2,zero
    5380:	00008706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    5384:	e0bffa17 	ldw	r2,-24(fp)
    5388:	10c00143 	ldbu	r3,5(r2)
    538c:	e0bffc17 	ldw	r2,-16(fp)
    5390:	10c00d05 	stb	r3,52(r2)
                                        break;
    5394:	00005e06 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    5398:	e0bffc17 	ldw	r2,-16(fp)
    539c:	10800404 	addi	r2,r2,16
    53a0:	e1bffe17 	ldw	r6,-8(fp)
    53a4:	e17ffd17 	ldw	r5,-12(fp)
    53a8:	1009883a 	mov	r4,r2
    53ac:	00062a80 	call	62a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    53b0:	1080005c 	xori	r2,r2,1
    53b4:	10803fcc 	andi	r2,r2,255
    53b8:	10000226 	beq	r2,zero,53c4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    53bc:	0005883a 	mov	r2,zero
    53c0:	00007706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    53c4:	e0bffc17 	ldw	r2,-16(fp)
    53c8:	10800e03 	ldbu	r2,56(r2)
    53cc:	10803fcc 	andi	r2,r2,255
    53d0:	10004c1e 	bne	r2,zero,5504 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    53d4:	e0bffc17 	ldw	r2,-16(fp)
    53d8:	00c00044 	movi	r3,1
    53dc:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    53e0:	e0bffb17 	ldw	r2,-20(fp)
    53e4:	10c00083 	ldbu	r3,2(r2)
    53e8:	e0bffc17 	ldw	r2,-16(fp)
    53ec:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    53f0:	e0bffb17 	ldw	r2,-20(fp)
    53f4:	10c000c3 	ldbu	r3,3(r2)
    53f8:	e0bffc17 	ldw	r2,-16(fp)
    53fc:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    5400:	e0bffb17 	ldw	r2,-20(fp)
    5404:	10c001c3 	ldbu	r3,7(r2)
    5408:	e0bffc17 	ldw	r2,-16(fp)
    540c:	10c00d45 	stb	r3,53(r2)
                                        break;
    5410:	00003f06 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    5414:	e0bffc17 	ldw	r2,-16(fp)
    5418:	10800404 	addi	r2,r2,16
    541c:	e1bffe17 	ldw	r6,-8(fp)
    5420:	e17ffd17 	ldw	r5,-12(fp)
    5424:	1009883a 	mov	r4,r2
    5428:	00062a80 	call	62a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    542c:	1080005c 	xori	r2,r2,1
    5430:	10803fcc 	andi	r2,r2,255
    5434:	10000226 	beq	r2,zero,5440 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5438:	0005883a 	mov	r2,zero
    543c:	00005806 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    5440:	e0bffc17 	ldw	r2,-16(fp)
    5444:	10800cc3 	ldbu	r2,51(r2)
    5448:	10803fcc 	andi	r2,r2,255
    544c:	10002f26 	beq	r2,zero,550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    5450:	e0bffc17 	ldw	r2,-16(fp)
    5454:	10800117 	ldw	r2,4(r2)
    5458:	10002c26 	beq	r2,zero,550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    545c:	e0bffc17 	ldw	r2,-16(fp)
    5460:	10800117 	ldw	r2,4(r2)
    5464:	10800017 	ldw	r2,0(r2)
    5468:	10800017 	ldw	r2,0(r2)
    546c:	e0fffc17 	ldw	r3,-16(fp)
    5470:	1a000117 	ldw	r8,4(r3)
    5474:	e0fffc17 	ldw	r3,-16(fp)
    5478:	18c00d03 	ldbu	r3,52(r3)
    547c:	19403fcc 	andi	r5,r3,255
    5480:	e0fffc17 	ldw	r3,-16(fp)
    5484:	18c00d83 	ldbu	r3,54(r3)
    5488:	19803fcc 	andi	r6,r3,255
    548c:	e0fffc17 	ldw	r3,-16(fp)
    5490:	18c00dc3 	ldbu	r3,55(r3)
    5494:	19c03fcc 	andi	r7,r3,255
    5498:	e0fffc17 	ldw	r3,-16(fp)
    549c:	18c00d43 	ldbu	r3,53(r3)
    54a0:	18c03fcc 	andi	r3,r3,255
    54a4:	e13ffc17 	ldw	r4,-16(fp)
    54a8:	21000804 	addi	r4,r4,32
    54ac:	d9000115 	stw	r4,4(sp)
    54b0:	d8c00015 	stw	r3,0(sp)
    54b4:	4009883a 	mov	r4,r8
    54b8:	103ee83a 	callr	r2
                                        break;
    54bc:	00001306 	br	550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    54c0:	e0bffc17 	ldw	r2,-16(fp)
    54c4:	10c00604 	addi	r3,r2,24
    54c8:	e0bffc17 	ldw	r2,-16(fp)
    54cc:	10800c43 	ldbu	r2,49(r2)
    54d0:	10803fcc 	andi	r2,r2,255
    54d4:	10bfff84 	addi	r2,r2,-2
    54d8:	10bfffcc 	andi	r2,r2,65535
    54dc:	100f883a 	mov	r7,r2
    54e0:	e1bffe17 	ldw	r6,-8(fp)
    54e4:	e17ffd17 	ldw	r5,-12(fp)
    54e8:	1809883a 	mov	r4,r3
    54ec:	00049a00 	call	49a0 <_ZN11ByteSkipper4SkipEPPhPtt>
    54f0:	1080005c 	xori	r2,r2,1
    54f4:	10803fcc 	andi	r2,r2,255
    54f8:	10000526 	beq	r2,zero,5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    54fc:	0005883a 	mov	r2,zero
    5500:	00002706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    5504:	0001883a 	nop
    5508:	00000106 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    550c:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    5510:	e0bffc17 	ldw	r2,-16(fp)
    5514:	10c00804 	addi	r3,r2,32
    5518:	e0bffc17 	ldw	r2,-16(fp)
    551c:	19803fcc 	andi	r6,r3,255
    5520:	11000243 	ldbu	r4,9(r2)
    5524:	2008703a 	and	r4,r4,zero
    5528:	200b883a 	mov	r5,r4
    552c:	3009883a 	mov	r4,r6
    5530:	2908b03a 	or	r4,r5,r4
    5534:	11000245 	stb	r4,9(r2)
    5538:	1808d23a 	srli	r4,r3,8
    553c:	21803fcc 	andi	r6,r4,255
    5540:	11000283 	ldbu	r4,10(r2)
    5544:	2008703a 	and	r4,r4,zero
    5548:	200b883a 	mov	r5,r4
    554c:	3009883a 	mov	r4,r6
    5550:	2908b03a 	or	r4,r5,r4
    5554:	11000285 	stb	r4,10(r2)
    5558:	1808d43a 	srli	r4,r3,16
    555c:	21803fcc 	andi	r6,r4,255
    5560:	110002c3 	ldbu	r4,11(r2)
    5564:	2008703a 	and	r4,r4,zero
    5568:	200b883a 	mov	r5,r4
    556c:	3009883a 	mov	r4,r6
    5570:	2908b03a 	or	r4,r5,r4
    5574:	110002c5 	stb	r4,11(r2)
    5578:	180ad63a 	srli	r5,r3,24
    557c:	10c00303 	ldbu	r3,12(r2)
    5580:	1806703a 	and	r3,r3,zero
    5584:	1809883a 	mov	r4,r3
    5588:	2807883a 	mov	r3,r5
    558c:	20c6b03a 	or	r3,r4,r3
    5590:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    5594:	e0bffc17 	ldw	r2,-16(fp)
    5598:	10000c05 	stb	zero,48(r2)
        }
        return true;
    559c:	00800044 	movi	r2,1
}
    55a0:	e037883a 	mov	sp,fp
    55a4:	dfc00117 	ldw	ra,4(sp)
    55a8:	df000017 	ldw	fp,0(sp)
    55ac:	dec00204 	addi	sp,sp,8
    55b0:	f800283a 	ret

000055b4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    55b4:	defff904 	addi	sp,sp,-28
    55b8:	dfc00615 	stw	ra,24(sp)
    55bc:	df000515 	stw	fp,20(sp)
    55c0:	df000504 	addi	fp,sp,20
    55c4:	e13ffc15 	stw	r4,-16(fp)
    55c8:	e17ffd15 	stw	r5,-12(fp)
    55cc:	3007883a 	mov	r3,r6
    55d0:	3805883a 	mov	r2,r7
    55d4:	e0fffe05 	stb	r3,-8(fp)
    55d8:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    55dc:	e0800217 	ldw	r2,8(fp)
    55e0:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    55e4:	e0bffc17 	ldw	r2,-16(fp)
    55e8:	10800117 	ldw	r2,4(r2)
    55ec:	1080004c 	andi	r2,r2,1
    55f0:	1007883a 	mov	r3,r2
    55f4:	e0bffb17 	ldw	r2,-20(fp)
    55f8:	10800003 	ldbu	r2,0(r2)
    55fc:	1080004c 	andi	r2,r2,1
    5600:	18c03fcc 	andi	r3,r3,255
    5604:	10803fcc 	andi	r2,r2,255
    5608:	18801426 	beq	r3,r2,565c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    560c:	e0bffb17 	ldw	r2,-20(fp)
    5610:	10800003 	ldbu	r2,0(r2)
    5614:	1080004c 	andi	r2,r2,1
    5618:	10803fcc 	andi	r2,r2,255
    561c:	10000826 	beq	r2,zero,5640 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    5620:	e0bffc17 	ldw	r2,-16(fp)
    5624:	10800017 	ldw	r2,0(r2)
    5628:	10800304 	addi	r2,r2,12
    562c:	10800017 	ldw	r2,0(r2)
    5630:	e17ffb17 	ldw	r5,-20(fp)
    5634:	e13ffc17 	ldw	r4,-16(fp)
    5638:	103ee83a 	callr	r2
    563c:	00000706 	br	565c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    5640:	e0bffc17 	ldw	r2,-16(fp)
    5644:	10800017 	ldw	r2,0(r2)
    5648:	10800204 	addi	r2,r2,8
    564c:	10800017 	ldw	r2,0(r2)
    5650:	e17ffb17 	ldw	r5,-20(fp)
    5654:	e13ffc17 	ldw	r4,-16(fp)
    5658:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    565c:	e0bffc17 	ldw	r2,-16(fp)
    5660:	10800117 	ldw	r2,4(r2)
    5664:	1004d07a 	srli	r2,r2,1
    5668:	1080004c 	andi	r2,r2,1
    566c:	1007883a 	mov	r3,r2
    5670:	e0bffb17 	ldw	r2,-20(fp)
    5674:	10800003 	ldbu	r2,0(r2)
    5678:	1004d07a 	srli	r2,r2,1
    567c:	1080004c 	andi	r2,r2,1
    5680:	18c03fcc 	andi	r3,r3,255
    5684:	10803fcc 	andi	r2,r2,255
    5688:	18801426 	beq	r3,r2,56dc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    568c:	e0bffb17 	ldw	r2,-20(fp)
    5690:	10800003 	ldbu	r2,0(r2)
    5694:	1080008c 	andi	r2,r2,2
    5698:	10803fcc 	andi	r2,r2,255
    569c:	10000826 	beq	r2,zero,56c0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    56a0:	e0bffc17 	ldw	r2,-16(fp)
    56a4:	10800017 	ldw	r2,0(r2)
    56a8:	10800504 	addi	r2,r2,20
    56ac:	10800017 	ldw	r2,0(r2)
    56b0:	e17ffb17 	ldw	r5,-20(fp)
    56b4:	e13ffc17 	ldw	r4,-16(fp)
    56b8:	103ee83a 	callr	r2
    56bc:	00000706 	br	56dc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    56c0:	e0bffc17 	ldw	r2,-16(fp)
    56c4:	10800017 	ldw	r2,0(r2)
    56c8:	10800404 	addi	r2,r2,16
    56cc:	10800017 	ldw	r2,0(r2)
    56d0:	e17ffb17 	ldw	r5,-20(fp)
    56d4:	e13ffc17 	ldw	r4,-16(fp)
    56d8:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    56dc:	e0bffc17 	ldw	r2,-16(fp)
    56e0:	10800117 	ldw	r2,4(r2)
    56e4:	1004d0ba 	srli	r2,r2,2
    56e8:	1080004c 	andi	r2,r2,1
    56ec:	1007883a 	mov	r3,r2
    56f0:	e0bffb17 	ldw	r2,-20(fp)
    56f4:	10800003 	ldbu	r2,0(r2)
    56f8:	1004d0ba 	srli	r2,r2,2
    56fc:	1080004c 	andi	r2,r2,1
    5700:	18c03fcc 	andi	r3,r3,255
    5704:	10803fcc 	andi	r2,r2,255
    5708:	18801426 	beq	r3,r2,575c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    570c:	e0bffb17 	ldw	r2,-20(fp)
    5710:	10800003 	ldbu	r2,0(r2)
    5714:	1080010c 	andi	r2,r2,4
    5718:	10803fcc 	andi	r2,r2,255
    571c:	10000826 	beq	r2,zero,5740 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    5720:	e0bffc17 	ldw	r2,-16(fp)
    5724:	10800017 	ldw	r2,0(r2)
    5728:	10800704 	addi	r2,r2,28
    572c:	10800017 	ldw	r2,0(r2)
    5730:	e17ffb17 	ldw	r5,-20(fp)
    5734:	e13ffc17 	ldw	r4,-16(fp)
    5738:	103ee83a 	callr	r2
    573c:	00000706 	br	575c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    5740:	e0bffc17 	ldw	r2,-16(fp)
    5744:	10800017 	ldw	r2,0(r2)
    5748:	10800604 	addi	r2,r2,24
    574c:	10800017 	ldw	r2,0(r2)
    5750:	e17ffb17 	ldw	r5,-20(fp)
    5754:	e13ffc17 	ldw	r4,-16(fp)
    5758:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    575c:	e0bffb17 	ldw	r2,-20(fp)
    5760:	10800043 	ldbu	r2,1(r2)
    5764:	10803fcc 	andi	r2,r2,255
    5768:	1080201c 	xori	r2,r2,128
    576c:	10bfe004 	addi	r2,r2,-128
    5770:	1000061e 	bne	r2,zero,578c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    5774:	e0bffb17 	ldw	r2,-20(fp)
    5778:	10800083 	ldbu	r2,2(r2)
    577c:	10803fcc 	andi	r2,r2,255
    5780:	1080201c 	xori	r2,r2,128
    5784:	10bfe004 	addi	r2,r2,-128
    5788:	10000726 	beq	r2,zero,57a8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    578c:	e0bffc17 	ldw	r2,-16(fp)
    5790:	10800017 	ldw	r2,0(r2)
    5794:	10800104 	addi	r2,r2,4
    5798:	10800017 	ldw	r2,0(r2)
    579c:	e17ffb17 	ldw	r5,-20(fp)
    57a0:	e13ffc17 	ldw	r4,-16(fp)
    57a4:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    57a8:	e0800217 	ldw	r2,8(fp)
    57ac:	10c00003 	ldbu	r3,0(r2)
    57b0:	e0bffc17 	ldw	r2,-16(fp)
    57b4:	10c00105 	stb	r3,4(r2)
#endif

};
    57b8:	0001883a 	nop
    57bc:	e037883a 	mov	sp,fp
    57c0:	dfc00117 	ldw	ra,4(sp)
    57c4:	df000017 	ldw	fp,0(sp)
    57c8:	dec00204 	addi	sp,sp,8
    57cc:	f800283a 	ret

000057d0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    57d0:	defff804 	addi	sp,sp,-32
    57d4:	dfc00715 	stw	ra,28(sp)
    57d8:	df000615 	stw	fp,24(sp)
    57dc:	df000604 	addi	fp,sp,24
    57e0:	e13ffc15 	stw	r4,-16(fp)
    57e4:	e17ffd15 	stw	r5,-12(fp)
    57e8:	3007883a 	mov	r3,r6
    57ec:	3805883a 	mov	r2,r7
    57f0:	e0fffe05 	stb	r3,-8(fp)
    57f4:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    57f8:	e0800217 	ldw	r2,8(fp)
    57fc:	10800084 	addi	r2,r2,2
    5800:	10800003 	ldbu	r2,0(r2)
    5804:	10803fcc 	andi	r2,r2,255
    5808:	10800058 	cmpnei	r2,r2,1
    580c:	10009926 	beq	r2,zero,5a74 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    5810:	e0bffc17 	ldw	r2,-16(fp)
    5814:	10c00103 	ldbu	r3,4(r2)
    5818:	e0800217 	ldw	r2,8(fp)
    581c:	10800003 	ldbu	r2,0(r2)
    5820:	18c03fcc 	andi	r3,r3,255
    5824:	10803fcc 	andi	r2,r2,255
    5828:	18800e26 	beq	r3,r2,5864 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    582c:	e0bffc17 	ldw	r2,-16(fp)
    5830:	10800017 	ldw	r2,0(r2)
    5834:	10800204 	addi	r2,r2,8
    5838:	10800017 	ldw	r2,0(r2)
    583c:	e0fffc17 	ldw	r3,-16(fp)
    5840:	18c00103 	ldbu	r3,4(r3)
    5844:	19003fcc 	andi	r4,r3,255
    5848:	e0c00217 	ldw	r3,8(fp)
    584c:	18c00003 	ldbu	r3,0(r3)
    5850:	18c03fcc 	andi	r3,r3,255
    5854:	180d883a 	mov	r6,r3
    5858:	200b883a 	mov	r5,r4
    585c:	e13ffc17 	ldw	r4,-16(fp)
    5860:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    5864:	00800084 	movi	r2,2
    5868:	e0bffa05 	stb	r2,-24(fp)
    586c:	e0bffa03 	ldbu	r2,-24(fp)
    5870:	10800228 	cmpgeui	r2,r2,8
    5874:	10006e1e 	bne	r2,zero,5a30 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    5878:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    587c:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    5880:	00800084 	movi	r2,2
    5884:	e0bffac5 	stb	r2,-21(fp)
    5888:	e0bffac3 	ldbu	r2,-21(fp)
    588c:	10800228 	cmpgeui	r2,r2,8
    5890:	10002f1e 	bne	r2,zero,5950 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    5894:	e0bffa03 	ldbu	r2,-24(fp)
    5898:	e0c00217 	ldw	r3,8(fp)
    589c:	1885883a 	add	r2,r3,r2
    58a0:	11000003 	ldbu	r4,0(r2)
    58a4:	e0bffac3 	ldbu	r2,-21(fp)
    58a8:	e0fffc17 	ldw	r3,-16(fp)
    58ac:	1885883a 	add	r2,r3,r2
    58b0:	10800104 	addi	r2,r2,4
    58b4:	10800003 	ldbu	r2,0(r2)
    58b8:	20c03fcc 	andi	r3,r4,255
    58bc:	10803fcc 	andi	r2,r2,255
    58c0:	1880091e 	bne	r3,r2,58e8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    58c4:	e0bffa03 	ldbu	r2,-24(fp)
    58c8:	e0c00217 	ldw	r3,8(fp)
    58cc:	1885883a 	add	r2,r3,r2
    58d0:	10800003 	ldbu	r2,0(r2)
    58d4:	10803fcc 	andi	r2,r2,255
    58d8:	10800060 	cmpeqi	r2,r2,1
    58dc:	1000021e 	bne	r2,zero,58e8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    58e0:	00800044 	movi	r2,1
    58e4:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    58e8:	e0bffac3 	ldbu	r2,-21(fp)
    58ec:	e0c00217 	ldw	r3,8(fp)
    58f0:	1885883a 	add	r2,r3,r2
    58f4:	11000003 	ldbu	r4,0(r2)
    58f8:	e0bffa03 	ldbu	r2,-24(fp)
    58fc:	e0fffc17 	ldw	r3,-16(fp)
    5900:	1885883a 	add	r2,r3,r2
    5904:	10800104 	addi	r2,r2,4
    5908:	10800003 	ldbu	r2,0(r2)
    590c:	20c03fcc 	andi	r3,r4,255
    5910:	10803fcc 	andi	r2,r2,255
    5914:	18800a1e 	bne	r3,r2,5940 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    5918:	e0bffa03 	ldbu	r2,-24(fp)
    591c:	e0fffc17 	ldw	r3,-16(fp)
    5920:	1885883a 	add	r2,r3,r2
    5924:	10800104 	addi	r2,r2,4
    5928:	10800003 	ldbu	r2,0(r2)
    592c:	10803fcc 	andi	r2,r2,255
    5930:	10800060 	cmpeqi	r2,r2,1
    5934:	1000021e 	bne	r2,zero,5940 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    5938:	00800044 	movi	r2,1
    593c:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    5940:	e0bffac3 	ldbu	r2,-21(fp)
    5944:	10800044 	addi	r2,r2,1
    5948:	e0bffac5 	stb	r2,-21(fp)
    594c:	003fce06 	br	5888 <__alt_data_end+0xfc005888>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    5950:	e0bffa43 	ldbu	r2,-23(fp)
    5954:	1080005c 	xori	r2,r2,1
    5958:	10803fcc 	andi	r2,r2,255
    595c:	10001c26 	beq	r2,zero,59d0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    5960:	e0bffc17 	ldw	r2,-16(fp)
    5964:	10800017 	ldw	r2,0(r2)
    5968:	10800104 	addi	r2,r2,4
    596c:	10800017 	ldw	r2,0(r2)
    5970:	e0fffa03 	ldbu	r3,-24(fp)
    5974:	e1000217 	ldw	r4,8(fp)
    5978:	20c7883a 	add	r3,r4,r3
    597c:	18c00003 	ldbu	r3,0(r3)
    5980:	18c03fcc 	andi	r3,r3,255
    5984:	180d883a 	mov	r6,r3
    5988:	e17ffd17 	ldw	r5,-12(fp)
    598c:	e13ffc17 	ldw	r4,-16(fp)
    5990:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    5994:	e0bffc17 	ldw	r2,-16(fp)
    5998:	10800017 	ldw	r2,0(r2)
    599c:	10800304 	addi	r2,r2,12
    59a0:	10800017 	ldw	r2,0(r2)
    59a4:	e0c00217 	ldw	r3,8(fp)
    59a8:	18c00003 	ldbu	r3,0(r3)
    59ac:	19403fcc 	andi	r5,r3,255
    59b0:	e0fffa03 	ldbu	r3,-24(fp)
    59b4:	e1000217 	ldw	r4,8(fp)
    59b8:	20c7883a 	add	r3,r4,r3
    59bc:	18c00003 	ldbu	r3,0(r3)
    59c0:	18c03fcc 	andi	r3,r3,255
    59c4:	180d883a 	mov	r6,r3
    59c8:	e13ffc17 	ldw	r4,-16(fp)
    59cc:	103ee83a 	callr	r2
                }
                if (!up)
    59d0:	e0bffa83 	ldbu	r2,-22(fp)
    59d4:	1080005c 	xori	r2,r2,1
    59d8:	10803fcc 	andi	r2,r2,255
    59dc:	10001026 	beq	r2,zero,5a20 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    59e0:	e0bffc17 	ldw	r2,-16(fp)
    59e4:	10800017 	ldw	r2,0(r2)
    59e8:	10800404 	addi	r2,r2,16
    59ec:	10800017 	ldw	r2,0(r2)
    59f0:	e0fffc17 	ldw	r3,-16(fp)
    59f4:	18c00103 	ldbu	r3,4(r3)
    59f8:	19403fcc 	andi	r5,r3,255
    59fc:	e0fffa03 	ldbu	r3,-24(fp)
    5a00:	e13ffc17 	ldw	r4,-16(fp)
    5a04:	20c7883a 	add	r3,r4,r3
    5a08:	18c00104 	addi	r3,r3,4
    5a0c:	18c00003 	ldbu	r3,0(r3)
    5a10:	18c03fcc 	andi	r3,r3,255
    5a14:	180d883a 	mov	r6,r3
    5a18:	e13ffc17 	ldw	r4,-16(fp)
    5a1c:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    5a20:	e0bffa03 	ldbu	r2,-24(fp)
    5a24:	10800044 	addi	r2,r2,1
    5a28:	e0bffa05 	stb	r2,-24(fp)
    5a2c:	003f8f06 	br	586c <__alt_data_end+0xfc00586c>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5a30:	e03ffb05 	stb	zero,-20(fp)
    5a34:	e0bffb03 	ldbu	r2,-20(fp)
    5a38:	10800228 	cmpgeui	r2,r2,8
    5a3c:	10000e1e 	bne	r2,zero,5a78 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    5a40:	e0bffb03 	ldbu	r2,-20(fp)
    5a44:	e0fffb03 	ldbu	r3,-20(fp)
    5a48:	e1000217 	ldw	r4,8(fp)
    5a4c:	20c7883a 	add	r3,r4,r3
    5a50:	18c00003 	ldbu	r3,0(r3)
    5a54:	e13ffc17 	ldw	r4,-16(fp)
    5a58:	2085883a 	add	r2,r4,r2
    5a5c:	10800104 	addi	r2,r2,4
    5a60:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5a64:	e0bffb03 	ldbu	r2,-20(fp)
    5a68:	10800044 	addi	r2,r2,1
    5a6c:	e0bffb05 	stb	r2,-20(fp)
    5a70:	003ff006 	br	5a34 <__alt_data_end+0xfc005a34>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5a74:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5a78:	e037883a 	mov	sp,fp
    5a7c:	dfc00117 	ldw	ra,4(sp)
    5a80:	df000017 	ldw	fp,0(sp)
    5a84:	dec00204 	addi	sp,sp,8
    5a88:	f800283a 	ret

00005a8c <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5a8c:	defffa04 	addi	sp,sp,-24
    5a90:	dfc00515 	stw	ra,20(sp)
    5a94:	df000415 	stw	fp,16(sp)
    5a98:	df000404 	addi	fp,sp,16
    5a9c:	e13ffd15 	stw	r4,-12(fp)
    5aa0:	2807883a 	mov	r3,r5
    5aa4:	3005883a 	mov	r2,r6
    5aa8:	e0fffe05 	stb	r3,-8(fp)
    5aac:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5ab0:	e0bffe03 	ldbu	r2,-8(fp)
    5ab4:	1080088c 	andi	r2,r2,34
    5ab8:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5abc:	e0bfff03 	ldbu	r2,-4(fp)
    5ac0:	10800130 	cmpltui	r2,r2,4
    5ac4:	1000151e 	bne	r2,zero,5b1c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5ac8:	e0bfff03 	ldbu	r2,-4(fp)
    5acc:	108007a8 	cmpgeui	r2,r2,30
    5ad0:	1000121e 	bne	r2,zero,5b1c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5ad4:	e0bffd17 	ldw	r2,-12(fp)
    5ad8:	10800317 	ldw	r2,12(r2)
    5adc:	1080008c 	andi	r2,r2,2
    5ae0:	1000021e 	bne	r2,zero,5aec <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5ae4:	e0bffc03 	ldbu	r2,-16(fp)
    5ae8:	1000061e 	bne	r2,zero,5b04 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5aec:	e0bffd17 	ldw	r2,-12(fp)
    5af0:	10800317 	ldw	r2,12(r2)
    5af4:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5af8:	10000526 	beq	r2,zero,5b10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5afc:	e0bffc03 	ldbu	r2,-16(fp)
    5b00:	1000031e 	bne	r2,zero,5b10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5b04:	e0bfff03 	ldbu	r2,-4(fp)
    5b08:	10800f44 	addi	r2,r2,61
    5b0c:	00008006 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5b10:	e0bfff03 	ldbu	r2,-4(fp)
    5b14:	10801744 	addi	r2,r2,93
    5b18:	00007d06 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5b1c:	e0bfff03 	ldbu	r2,-4(fp)
    5b20:	108007b0 	cmpltui	r2,r2,30
    5b24:	1000191e 	bne	r2,zero,5b8c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5b28:	e0bfff03 	ldbu	r2,-4(fp)
    5b2c:	10800a28 	cmpgeui	r2,r2,40
    5b30:	1000161e 	bne	r2,zero,5b8c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5b34:	e0bffc03 	ldbu	r2,-16(fp)
    5b38:	10000c26 	beq	r2,zero,5b6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5b3c:	e0bffd17 	ldw	r2,-12(fp)
    5b40:	10800017 	ldw	r2,0(r2)
    5b44:	10800504 	addi	r2,r2,20
    5b48:	10800017 	ldw	r2,0(r2)
    5b4c:	e13ffd17 	ldw	r4,-12(fp)
    5b50:	103ee83a 	callr	r2
    5b54:	1007883a 	mov	r3,r2
    5b58:	e0bfff03 	ldbu	r2,-4(fp)
    5b5c:	10bff884 	addi	r2,r2,-30
    5b60:	1885883a 	add	r2,r3,r2
    5b64:	10800003 	ldbu	r2,0(r2)
    5b68:	00006906 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5b6c:	e0bfff03 	ldbu	r2,-4(fp)
    5b70:	108009e0 	cmpeqi	r2,r2,39
    5b74:	1000031e 	bne	r2,zero,5b84 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5b78:	e0bfff03 	ldbu	r2,-4(fp)
    5b7c:	108004c4 	addi	r2,r2,19
    5b80:	00006306 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5b84:	00800c04 	movi	r2,48
    5b88:	00006106 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5b8c:	e0bfff03 	ldbu	r2,-4(fp)
    5b90:	10801670 	cmpltui	r2,r2,89
    5b94:	10000a1e 	bne	r2,zero,5bc0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5b98:	e0bfff03 	ldbu	r2,-4(fp)
    5b9c:	108018a8 	cmpgeui	r2,r2,98
    5ba0:	1000071e 	bne	r2,zero,5bc0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5ba4:	e0bffd17 	ldw	r2,-12(fp)
    5ba8:	10800317 	ldw	r2,12(r2)
    5bac:	1080004c 	andi	r2,r2,1
    5bb0:	10005626 	beq	r2,zero,5d0c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5bb4:	e0bfff03 	ldbu	r2,-4(fp)
    5bb8:	10bff604 	addi	r2,r2,-40
    5bbc:	00005406 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    5bc0:	e0bfff03 	ldbu	r2,-4(fp)
    5bc4:	10800b70 	cmpltui	r2,r2,45
    5bc8:	10001d1e 	bne	r2,zero,5c40 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    5bcc:	e0bfff03 	ldbu	r2,-4(fp)
    5bd0:	10800e68 	cmpgeui	r2,r2,57
    5bd4:	10001a1e 	bne	r2,zero,5c40 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    5bd8:	e0bffc03 	ldbu	r2,-16(fp)
    5bdc:	10000c26 	beq	r2,zero,5c10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    5be0:	e0bffd17 	ldw	r2,-12(fp)
    5be4:	10800017 	ldw	r2,0(r2)
    5be8:	10800604 	addi	r2,r2,24
    5bec:	10800017 	ldw	r2,0(r2)
    5bf0:	e13ffd17 	ldw	r4,-12(fp)
    5bf4:	103ee83a 	callr	r2
    5bf8:	1007883a 	mov	r3,r2
    5bfc:	e0bfff03 	ldbu	r2,-4(fp)
    5c00:	10bff4c4 	addi	r2,r2,-45
    5c04:	1885883a 	add	r2,r3,r2
    5c08:	10800003 	ldbu	r2,0(r2)
    5c0c:	00004006 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5c10:	e0bffd17 	ldw	r2,-12(fp)
    5c14:	10800017 	ldw	r2,0(r2)
    5c18:	10800704 	addi	r2,r2,28
    5c1c:	10800017 	ldw	r2,0(r2)
    5c20:	e13ffd17 	ldw	r4,-12(fp)
    5c24:	103ee83a 	callr	r2
    5c28:	1007883a 	mov	r3,r2
    5c2c:	e0bfff03 	ldbu	r2,-4(fp)
    5c30:	10bff4c4 	addi	r2,r2,-45
    5c34:	1885883a 	add	r2,r3,r2
    5c38:	10800003 	ldbu	r2,0(r2)
    5c3c:	00003406 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    5c40:	e0bfff03 	ldbu	r2,-4(fp)
    5c44:	10801530 	cmpltui	r2,r2,84
    5c48:	10000f1e 	bne	r2,zero,5c88 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    5c4c:	e0bfff03 	ldbu	r2,-4(fp)
    5c50:	10801668 	cmpgeui	r2,r2,89
    5c54:	10000c1e 	bne	r2,zero,5c88 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    5c58:	e0bffd17 	ldw	r2,-12(fp)
    5c5c:	10800017 	ldw	r2,0(r2)
    5c60:	10800804 	addi	r2,r2,32
    5c64:	10800017 	ldw	r2,0(r2)
    5c68:	e13ffd17 	ldw	r4,-12(fp)
    5c6c:	103ee83a 	callr	r2
    5c70:	1007883a 	mov	r3,r2
    5c74:	e0bfff03 	ldbu	r2,-4(fp)
    5c78:	10bfeb04 	addi	r2,r2,-84
    5c7c:	1885883a 	add	r2,r3,r2
    5c80:	10800003 	ldbu	r2,0(r2)
    5c84:	00002206 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    5c88:	e0bfff03 	ldbu	r2,-4(fp)
    5c8c:	10c00b20 	cmpeqi	r3,r2,44
    5c90:	18000a1e 	bne	r3,zero,5cbc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    5c94:	10c00b48 	cmpgei	r3,r2,45
    5c98:	1800031e 	bne	r3,zero,5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    5c9c:	10800a20 	cmpeqi	r2,r2,40
    5ca0:	1000081e 	bne	r2,zero,5cc4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    5ca4:	00001906 	br	5d0c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    5ca8:	10c018a0 	cmpeqi	r3,r2,98
    5cac:	1800071e 	bne	r3,zero,5ccc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    5cb0:	108018e0 	cmpeqi	r2,r2,99
    5cb4:	10000d1e 	bne	r2,zero,5cec <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    5cb8:	00001406 	br	5d0c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    5cbc:	00800804 	movi	r2,32
    5cc0:	00001306 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    5cc4:	00800344 	movi	r2,13
    5cc8:	00001106 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    5ccc:	e0bffd17 	ldw	r2,-12(fp)
    5cd0:	10800317 	ldw	r2,12(r2)
    5cd4:	1080004c 	andi	r2,r2,1
    5cd8:	10000226 	beq	r2,zero,5ce4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    5cdc:	00800c04 	movi	r2,48
    5ce0:	00000b06 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5ce4:	0005883a 	mov	r2,zero
    5ce8:	00000906 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    5cec:	e0bffd17 	ldw	r2,-12(fp)
    5cf0:	10800317 	ldw	r2,12(r2)
    5cf4:	1080004c 	andi	r2,r2,1
    5cf8:	10000226 	beq	r2,zero,5d04 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    5cfc:	00800b84 	movi	r2,46
    5d00:	00000306 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5d04:	0005883a 	mov	r2,zero
    5d08:	00000106 	br	5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    5d0c:	0005883a 	mov	r2,zero
}
    5d10:	e037883a 	mov	sp,fp
    5d14:	dfc00117 	ldw	ra,4(sp)
    5d18:	df000017 	ldw	fp,0(sp)
    5d1c:	dec00204 	addi	sp,sp,8
    5d20:	f800283a 	ret

00005d24 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    5d24:	defffd04 	addi	sp,sp,-12
    5d28:	df000215 	stw	fp,8(sp)
    5d2c:	df000204 	addi	fp,sp,8
    5d30:	e13ffe15 	stw	r4,-8(fp)
    5d34:	e17fff15 	stw	r5,-4(fp)
        };
    5d38:	0001883a 	nop
    5d3c:	e037883a 	mov	sp,fp
    5d40:	df000017 	ldw	fp,0(sp)
    5d44:	dec00104 	addi	sp,sp,4
    5d48:	f800283a 	ret

00005d4c <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5d4c:	defffd04 	addi	sp,sp,-12
    5d50:	df000215 	stw	fp,8(sp)
    5d54:	df000204 	addi	fp,sp,8
    5d58:	e13ffe15 	stw	r4,-8(fp)
    5d5c:	e17fff15 	stw	r5,-4(fp)
        };
    5d60:	0001883a 	nop
    5d64:	e037883a 	mov	sp,fp
    5d68:	df000017 	ldw	fp,0(sp)
    5d6c:	dec00104 	addi	sp,sp,4
    5d70:	f800283a 	ret

00005d74 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5d74:	defffd04 	addi	sp,sp,-12
    5d78:	df000215 	stw	fp,8(sp)
    5d7c:	df000204 	addi	fp,sp,8
    5d80:	e13ffe15 	stw	r4,-8(fp)
    5d84:	e17fff15 	stw	r5,-4(fp)
        };
    5d88:	0001883a 	nop
    5d8c:	e037883a 	mov	sp,fp
    5d90:	df000017 	ldw	fp,0(sp)
    5d94:	dec00104 	addi	sp,sp,4
    5d98:	f800283a 	ret

00005d9c <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5d9c:	defffd04 	addi	sp,sp,-12
    5da0:	df000215 	stw	fp,8(sp)
    5da4:	df000204 	addi	fp,sp,8
    5da8:	e13ffe15 	stw	r4,-8(fp)
    5dac:	e17fff15 	stw	r5,-4(fp)
        };
    5db0:	0001883a 	nop
    5db4:	e037883a 	mov	sp,fp
    5db8:	df000017 	ldw	fp,0(sp)
    5dbc:	dec00104 	addi	sp,sp,4
    5dc0:	f800283a 	ret

00005dc4 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5dc4:	defffd04 	addi	sp,sp,-12
    5dc8:	df000215 	stw	fp,8(sp)
    5dcc:	df000204 	addi	fp,sp,8
    5dd0:	e13ffe15 	stw	r4,-8(fp)
    5dd4:	e17fff15 	stw	r5,-4(fp)
        };
    5dd8:	0001883a 	nop
    5ddc:	e037883a 	mov	sp,fp
    5de0:	df000017 	ldw	fp,0(sp)
    5de4:	dec00104 	addi	sp,sp,4
    5de8:	f800283a 	ret

00005dec <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5dec:	defffd04 	addi	sp,sp,-12
    5df0:	df000215 	stw	fp,8(sp)
    5df4:	df000204 	addi	fp,sp,8
    5df8:	e13ffe15 	stw	r4,-8(fp)
    5dfc:	e17fff15 	stw	r5,-4(fp)
        };
    5e00:	0001883a 	nop
    5e04:	e037883a 	mov	sp,fp
    5e08:	df000017 	ldw	fp,0(sp)
    5e0c:	dec00104 	addi	sp,sp,4
    5e10:	f800283a 	ret

00005e14 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5e14:	defffd04 	addi	sp,sp,-12
    5e18:	df000215 	stw	fp,8(sp)
    5e1c:	df000204 	addi	fp,sp,8
    5e20:	e13ffe15 	stw	r4,-8(fp)
    5e24:	e17fff15 	stw	r5,-4(fp)
        };
    5e28:	0001883a 	nop
    5e2c:	e037883a 	mov	sp,fp
    5e30:	df000017 	ldw	fp,0(sp)
    5e34:	dec00104 	addi	sp,sp,4
    5e38:	f800283a 	ret

00005e3c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    5e3c:	defff704 	addi	sp,sp,-36
    5e40:	dfc00815 	stw	ra,32(sp)
    5e44:	df000715 	stw	fp,28(sp)
    5e48:	df000704 	addi	fp,sp,28
    5e4c:	e13ffd15 	stw	r4,-12(fp)
    5e50:	e17ffe15 	stw	r5,-8(fp)
    5e54:	3005883a 	mov	r2,r6
    5e58:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    5e5c:	e0bffd17 	ldw	r2,-12(fp)
    5e60:	10800303 	ldbu	r2,12(r2)
    5e64:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    5e68:	e0bfff03 	ldbu	r2,-4(fp)
    5e6c:	10c011e0 	cmpeqi	r3,r2,71
    5e70:	1800271e 	bne	r3,zero,5f10 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    5e74:	10c014e0 	cmpeqi	r3,r2,83
    5e78:	1800031e 	bne	r3,zero,5e88 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    5e7c:	10800e60 	cmpeqi	r2,r2,57
    5e80:	1000111e 	bne	r2,zero,5ec8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    5e84:	00003506 	br	5f5c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    5e88:	e0bffd17 	ldw	r2,-12(fp)
    5e8c:	10800317 	ldw	r2,12(r2)
    5e90:	1080004c 	andi	r2,r2,1
    5e94:	0084303a 	nor	r2,zero,r2
    5e98:	1080004c 	andi	r2,r2,1
    5e9c:	1007883a 	mov	r3,r2
    5ea0:	e0bffd17 	ldw	r2,-12(fp)
    5ea4:	1940004c 	andi	r5,r3,1
    5ea8:	11000303 	ldbu	r4,12(r2)
    5eac:	00ffff84 	movi	r3,-2
    5eb0:	20c6703a 	and	r3,r4,r3
    5eb4:	1809883a 	mov	r4,r3
    5eb8:	2807883a 	mov	r3,r5
    5ebc:	20c6b03a 	or	r3,r4,r3
    5ec0:	10c00305 	stb	r3,12(r2)
                                break;
    5ec4:	00002506 	br	5f5c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    5ec8:	e0bffd17 	ldw	r2,-12(fp)
    5ecc:	10800317 	ldw	r2,12(r2)
    5ed0:	1004d07a 	srli	r2,r2,1
    5ed4:	1080004c 	andi	r2,r2,1
    5ed8:	0084303a 	nor	r2,zero,r2
    5edc:	1080004c 	andi	r2,r2,1
    5ee0:	1007883a 	mov	r3,r2
    5ee4:	e0bffd17 	ldw	r2,-12(fp)
    5ee8:	18c0004c 	andi	r3,r3,1
    5eec:	18cb883a 	add	r5,r3,r3
    5ef0:	11000303 	ldbu	r4,12(r2)
    5ef4:	00ffff44 	movi	r3,-3
    5ef8:	20c6703a 	and	r3,r4,r3
    5efc:	1809883a 	mov	r4,r3
    5f00:	2807883a 	mov	r3,r5
    5f04:	20c6b03a 	or	r3,r4,r3
    5f08:	10c00305 	stb	r3,12(r2)
                                break;
    5f0c:	00001306 	br	5f5c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    5f10:	e0bffd17 	ldw	r2,-12(fp)
    5f14:	10800317 	ldw	r2,12(r2)
    5f18:	1004d0ba 	srli	r2,r2,2
    5f1c:	1080004c 	andi	r2,r2,1
    5f20:	0084303a 	nor	r2,zero,r2
    5f24:	1080004c 	andi	r2,r2,1
    5f28:	1007883a 	mov	r3,r2
    5f2c:	e0bffd17 	ldw	r2,-12(fp)
    5f30:	18c0004c 	andi	r3,r3,1
    5f34:	18c7883a 	add	r3,r3,r3
    5f38:	18cb883a 	add	r5,r3,r3
    5f3c:	11000303 	ldbu	r4,12(r2)
    5f40:	00fffec4 	movi	r3,-5
    5f44:	20c6703a 	and	r3,r4,r3
    5f48:	1809883a 	mov	r4,r3
    5f4c:	2807883a 	mov	r3,r5
    5f50:	20c6b03a 	or	r3,r4,r3
    5f54:	10c00305 	stb	r3,12(r2)
                                break;
    5f58:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    5f5c:	e0bffd17 	ldw	r2,-12(fp)
    5f60:	10800303 	ldbu	r2,12(r2)
    5f64:	10c03fcc 	andi	r3,r2,255
    5f68:	e0bffc03 	ldbu	r2,-16(fp)
    5f6c:	18801026 	beq	r3,r2,5fb0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    5f70:	e0bffe17 	ldw	r2,-8(fp)
    5f74:	10000e26 	beq	r2,zero,5fb0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    5f78:	e0bffd17 	ldw	r2,-12(fp)
    5f7c:	10800303 	ldbu	r2,12(r2)
    5f80:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    5f84:	e0bffc44 	addi	r2,fp,-15
    5f88:	d8800215 	stw	r2,8(sp)
    5f8c:	00800044 	movi	r2,1
    5f90:	d8800115 	stw	r2,4(sp)
    5f94:	d8000015 	stw	zero,0(sp)
    5f98:	01c00084 	movi	r7,2
    5f9c:	000d883a 	mov	r6,zero
    5fa0:	000b883a 	mov	r5,zero
    5fa4:	e13ffe17 	ldw	r4,-8(fp)
    5fa8:	0008ec00 	call	8ec0 <_ZN6USBHID9SetReportEhhhhtPh>
    5fac:	00000106 	br	5fb4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    5fb0:	0005883a 	mov	r2,zero
        };
    5fb4:	e037883a 	mov	sp,fp
    5fb8:	dfc00117 	ldw	ra,4(sp)
    5fbc:	df000017 	ldw	fp,0(sp)
    5fc0:	dec00204 	addi	sp,sp,8
    5fc4:	f800283a 	ret

00005fc8 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    5fc8:	defffc04 	addi	sp,sp,-16
    5fcc:	df000315 	stw	fp,12(sp)
    5fd0:	df000304 	addi	fp,sp,12
    5fd4:	e13ffd15 	stw	r4,-12(fp)
    5fd8:	2807883a 	mov	r3,r5
    5fdc:	3005883a 	mov	r2,r6
    5fe0:	e0fffe05 	stb	r3,-8(fp)
    5fe4:	e0bfff05 	stb	r2,-4(fp)
        };
    5fe8:	0001883a 	nop
    5fec:	e037883a 	mov	sp,fp
    5ff0:	df000017 	ldw	fp,0(sp)
    5ff4:	dec00104 	addi	sp,sp,4
    5ff8:	f800283a 	ret

00005ffc <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    5ffc:	defffc04 	addi	sp,sp,-16
    6000:	df000315 	stw	fp,12(sp)
    6004:	df000304 	addi	fp,sp,12
    6008:	e13ffd15 	stw	r4,-12(fp)
    600c:	2807883a 	mov	r3,r5
    6010:	3005883a 	mov	r2,r6
    6014:	e0fffe05 	stb	r3,-8(fp)
    6018:	e0bfff05 	stb	r2,-4(fp)
        };
    601c:	0001883a 	nop
    6020:	e037883a 	mov	sp,fp
    6024:	df000017 	ldw	fp,0(sp)
    6028:	dec00104 	addi	sp,sp,4
    602c:	f800283a 	ret

00006030 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6030:	defffc04 	addi	sp,sp,-16
    6034:	df000315 	stw	fp,12(sp)
    6038:	df000304 	addi	fp,sp,12
    603c:	e13ffd15 	stw	r4,-12(fp)
    6040:	2807883a 	mov	r3,r5
    6044:	3005883a 	mov	r2,r6
    6048:	e0fffe05 	stb	r3,-8(fp)
    604c:	e0bfff05 	stb	r2,-4(fp)
        };
    6050:	0001883a 	nop
    6054:	e037883a 	mov	sp,fp
    6058:	df000017 	ldw	fp,0(sp)
    605c:	dec00104 	addi	sp,sp,4
    6060:	f800283a 	ret

00006064 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    6064:	defffe04 	addi	sp,sp,-8
    6068:	df000115 	stw	fp,4(sp)
    606c:	df000104 	addi	fp,sp,4
    6070:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    6074:	008000b4 	movhi	r2,2
    6078:	10932884 	addi	r2,r2,19618
        };
    607c:	e037883a 	mov	sp,fp
    6080:	df000017 	ldw	fp,0(sp)
    6084:	dec00104 	addi	sp,sp,4
    6088:	f800283a 	ret

0000608c <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    608c:	defffe04 	addi	sp,sp,-8
    6090:	df000115 	stw	fp,4(sp)
    6094:	df000104 	addi	fp,sp,4
    6098:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    609c:	008000b4 	movhi	r2,2
    60a0:	10932b04 	addi	r2,r2,19628
        };
    60a4:	e037883a 	mov	sp,fp
    60a8:	df000017 	ldw	fp,0(sp)
    60ac:	dec00104 	addi	sp,sp,4
    60b0:	f800283a 	ret

000060b4 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    60b4:	defffe04 	addi	sp,sp,-8
    60b8:	df000115 	stw	fp,4(sp)
    60bc:	df000104 	addi	fp,sp,4
    60c0:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    60c4:	008000b4 	movhi	r2,2
    60c8:	10932e04 	addi	r2,r2,19640
        };
    60cc:	e037883a 	mov	sp,fp
    60d0:	df000017 	ldw	fp,0(sp)
    60d4:	dec00104 	addi	sp,sp,4
    60d8:	f800283a 	ret

000060dc <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    60dc:	defffe04 	addi	sp,sp,-8
    60e0:	df000115 	stw	fp,4(sp)
    60e4:	df000104 	addi	fp,sp,4
    60e8:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    60ec:	d0a1e584 	addi	r2,gp,-30826
        };
    60f0:	e037883a 	mov	sp,fp
    60f4:	df000017 	ldw	fp,0(sp)
    60f8:	dec00104 	addi	sp,sp,4
    60fc:	f800283a 	ret

00006100 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    6100:	defffc04 	addi	sp,sp,-16
    6104:	dfc00315 	stw	ra,12(sp)
    6108:	df000215 	stw	fp,8(sp)
    610c:	df000204 	addi	fp,sp,8
    6110:	2005883a 	mov	r2,r4
    6114:	e17fff15 	stw	r5,-4(fp)
    6118:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    611c:	d0e1ea17 	ldw	r3,-30808(gp)
    6120:	e0bfff17 	ldw	r2,-4(fp)
    6124:	18800416 	blt	r3,r2,6138 <_Z9E_Notifycci+0x38>
        printf("%c", c);
    6128:	e0bffe07 	ldb	r2,-8(fp)
    612c:	1009883a 	mov	r4,r2
    6130:	000dd640 	call	dd64 <putchar>
    6134:	00000106 	br	613c <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6138:	0001883a 	nop
        printf("%c", c);
}
    613c:	e037883a 	mov	sp,fp
    6140:	dfc00117 	ldw	ra,4(sp)
    6144:	df000017 	ldw	fp,0(sp)
    6148:	dec00204 	addi	sp,sp,8
    614c:	f800283a 	ret

00006150 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    6150:	defffb04 	addi	sp,sp,-20
    6154:	dfc00415 	stw	ra,16(sp)
    6158:	df000315 	stw	fp,12(sp)
    615c:	df000304 	addi	fp,sp,12
    6160:	e13ffe15 	stw	r4,-8(fp)
    6164:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6168:	d0e1ea17 	ldw	r3,-30808(gp)
    616c:	e0bfff17 	ldw	r2,-4(fp)
    6170:	18801016 	blt	r3,r2,61b4 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    6174:	e0bffe17 	ldw	r2,-8(fp)
    6178:	10001026 	beq	r2,zero,61bc <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    617c:	e0bffe17 	ldw	r2,-8(fp)
    6180:	10c00044 	addi	r3,r2,1
    6184:	e0fffe15 	stw	r3,-8(fp)
    6188:	10800003 	ldbu	r2,0(r2)
    618c:	e0bffd05 	stb	r2,-12(fp)
    6190:	e0bffd07 	ldb	r2,-12(fp)
    6194:	1004c03a 	cmpne	r2,r2,zero
    6198:	10803fcc 	andi	r2,r2,255
    619c:	10000826 	beq	r2,zero,61c0 <_Z8E_NotifyPKci+0x70>
    61a0:	e0bffd07 	ldb	r2,-12(fp)
    61a4:	e17fff17 	ldw	r5,-4(fp)
    61a8:	1009883a 	mov	r4,r2
    61ac:	00061000 	call	6100 <_Z9E_Notifycci>
    61b0:	003ff206 	br	617c <__alt_data_end+0xfc00617c>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    61b4:	0001883a 	nop
    61b8:	00000106 	br	61c0 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    61bc:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    61c0:	e037883a 	mov	sp,fp
    61c4:	dfc00117 	ldw	ra,4(sp)
    61c8:	df000017 	ldw	fp,0(sp)
    61cc:	dec00204 	addi	sp,sp,8
    61d0:	f800283a 	ret

000061d4 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    61d4:	defffb04 	addi	sp,sp,-20
    61d8:	dfc00415 	stw	ra,16(sp)
    61dc:	df000315 	stw	fp,12(sp)
    61e0:	df000304 	addi	fp,sp,12
    61e4:	e13ffe15 	stw	r4,-8(fp)
    61e8:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    61ec:	d0e1ea17 	ldw	r3,-30808(gp)
    61f0:	e0bfff17 	ldw	r2,-4(fp)
    61f4:	18801016 	blt	r3,r2,6238 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    61f8:	e0bffe17 	ldw	r2,-8(fp)
    61fc:	10001026 	beq	r2,zero,6240 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    6200:	e0bffe17 	ldw	r2,-8(fp)
    6204:	10c00044 	addi	r3,r2,1
    6208:	e0fffe15 	stw	r3,-8(fp)
    620c:	10800003 	ldbu	r2,0(r2)
    6210:	e0bffd05 	stb	r2,-12(fp)
    6214:	e0bffd07 	ldb	r2,-12(fp)
    6218:	1004c03a 	cmpne	r2,r2,zero
    621c:	10803fcc 	andi	r2,r2,255
    6220:	10000826 	beq	r2,zero,6244 <_Z11E_NotifyStrPKci+0x70>
    6224:	e0bffd07 	ldb	r2,-12(fp)
    6228:	e17fff17 	ldw	r5,-4(fp)
    622c:	1009883a 	mov	r4,r2
    6230:	00061000 	call	6100 <_Z9E_Notifycci>
    6234:	003ff206 	br	6200 <__alt_data_end+0xfc006200>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6238:	0001883a 	nop
    623c:	00000106 	br	6244 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    6240:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    6244:	e037883a 	mov	sp,fp
    6248:	dfc00117 	ldw	ra,4(sp)
    624c:	df000017 	ldw	fp,0(sp)
    6250:	dec00204 	addi	sp,sp,8
    6254:	f800283a 	ret

00006258 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    6258:	defffd04 	addi	sp,sp,-12
    625c:	df000215 	stw	fp,8(sp)
    6260:	df000204 	addi	fp,sp,8
    6264:	2005883a 	mov	r2,r4
    6268:	e17fff15 	stw	r5,-4(fp)
    626c:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    6270:	e037883a 	mov	sp,fp
    6274:	df000017 	ldw	fp,0(sp)
    6278:	dec00104 	addi	sp,sp,4
    627c:	f800283a 	ret

00006280 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    6280:	defffc04 	addi	sp,sp,-16
    6284:	df000315 	stw	fp,12(sp)
    6288:	df000304 	addi	fp,sp,12
    628c:	e13ffd15 	stw	r4,-12(fp)
    6290:	e17ffe15 	stw	r5,-8(fp)
    6294:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    6298:	e037883a 	mov	sp,fp
    629c:	df000017 	ldw	fp,0(sp)
    62a0:	dec00104 	addi	sp,sp,4
    62a4:	f800283a 	ret

000062a8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    62a8:	defffc04 	addi	sp,sp,-16
    62ac:	df000315 	stw	fp,12(sp)
    62b0:	df000304 	addi	fp,sp,12
    62b4:	e13ffd15 	stw	r4,-12(fp)
    62b8:	e17ffe15 	stw	r5,-8(fp)
    62bc:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    62c0:	e0bffd17 	ldw	r2,-12(fp)
    62c4:	10800017 	ldw	r2,0(r2)
    62c8:	1000021e 	bne	r2,zero,62d4 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    62cc:	0005883a 	mov	r2,zero
    62d0:	00003306 	br	63a0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    62d4:	e0bffd17 	ldw	r2,-12(fp)
    62d8:	10800103 	ldbu	r2,4(r2)
    62dc:	10803fcc 	andi	r2,r2,255
    62e0:	10002426 	beq	r2,zero,6374 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    62e4:	e0bfff17 	ldw	r2,-4(fp)
    62e8:	1080000b 	ldhu	r2,0(r2)
    62ec:	10bfffcc 	andi	r2,r2,65535
    62f0:	10002026 	beq	r2,zero,6374 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    62f4:	e0bffd17 	ldw	r2,-12(fp)
    62f8:	10800017 	ldw	r2,0(r2)
    62fc:	e0fffd17 	ldw	r3,-12(fp)
    6300:	18c00143 	ldbu	r3,5(r3)
    6304:	19003fcc 	andi	r4,r3,255
    6308:	e0fffd17 	ldw	r3,-12(fp)
    630c:	18c00103 	ldbu	r3,4(r3)
    6310:	18c03fcc 	andi	r3,r3,255
    6314:	20c7c83a 	sub	r3,r4,r3
    6318:	10c5883a 	add	r2,r2,r3
    631c:	e0fffe17 	ldw	r3,-8(fp)
    6320:	18c00017 	ldw	r3,0(r3)
    6324:	18c00003 	ldbu	r3,0(r3)
    6328:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    632c:	e0bffd17 	ldw	r2,-12(fp)
    6330:	10800103 	ldbu	r2,4(r2)
    6334:	10bfffc4 	addi	r2,r2,-1
    6338:	1007883a 	mov	r3,r2
    633c:	e0bffd17 	ldw	r2,-12(fp)
    6340:	10c00105 	stb	r3,4(r2)
    6344:	e0bfff17 	ldw	r2,-4(fp)
    6348:	1080000b 	ldhu	r2,0(r2)
    634c:	10bfffc4 	addi	r2,r2,-1
    6350:	1007883a 	mov	r3,r2
    6354:	e0bfff17 	ldw	r2,-4(fp)
    6358:	10c0000d 	sth	r3,0(r2)
    635c:	e0bffe17 	ldw	r2,-8(fp)
    6360:	10800017 	ldw	r2,0(r2)
    6364:	10c00044 	addi	r3,r2,1
    6368:	e0bffe17 	ldw	r2,-8(fp)
    636c:	10c00015 	stw	r3,0(r2)
    6370:	003fd806 	br	62d4 <__alt_data_end+0xfc0062d4>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    6374:	e0bffd17 	ldw	r2,-12(fp)
    6378:	10800103 	ldbu	r2,4(r2)
    637c:	10803fcc 	andi	r2,r2,255
    6380:	10000226 	beq	r2,zero,638c <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    6384:	0005883a 	mov	r2,zero
    6388:	00000506 	br	63a0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    638c:	e0bffd17 	ldw	r2,-12(fp)
    6390:	10c00143 	ldbu	r3,5(r2)
    6394:	e0bffd17 	ldw	r2,-12(fp)
    6398:	10c00105 	stb	r3,4(r2)
        return true;
    639c:	00800044 	movi	r2,1
}
    63a0:	e037883a 	mov	sp,fp
    63a4:	df000017 	ldw	fp,0(sp)
    63a8:	dec00104 	addi	sp,sp,4
    63ac:	f800283a 	ret

000063b0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    63b0:	defffa04 	addi	sp,sp,-24
    63b4:	dfc00515 	stw	ra,20(sp)
    63b8:	df000415 	stw	fp,16(sp)
    63bc:	df000404 	addi	fp,sp,16
    63c0:	e13ffc15 	stw	r4,-16(fp)
    63c4:	e17ffd15 	stw	r5,-12(fp)
    63c8:	e1bffe15 	stw	r6,-8(fp)
    63cc:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    63d0:	e0bffc17 	ldw	r2,-16(fp)
    63d4:	10800003 	ldbu	r2,0(r2)
    63d8:	10803fcc 	andi	r2,r2,255
    63dc:	10c00060 	cmpeqi	r3,r2,1
    63e0:	1800181e 	bne	r3,zero,6444 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    63e4:	10c00088 	cmpgei	r3,r2,2
    63e8:	1800021e 	bne	r3,zero,63f4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    63ec:	10000626 	beq	r2,zero,6408 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    63f0:	00007e06 	br	65ec <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    63f4:	10c000a0 	cmpeqi	r3,r2,2
    63f8:	18004a1e 	bne	r3,zero,6524 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    63fc:	108000e0 	cmpeqi	r2,r2,3
    6400:	1000571e 	bne	r2,zero,6560 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    6404:	00007906 	br	65ec <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    6408:	e0bffc17 	ldw	r2,-16(fp)
    640c:	10800417 	ldw	r2,16(r2)
    6410:	e0fffc17 	ldw	r3,-16(fp)
    6414:	18c00303 	ldbu	r3,12(r3)
    6418:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    641c:	e0bffc17 	ldw	r2,-16(fp)
    6420:	10c00504 	addi	r3,r2,20
    6424:	e0bffc17 	ldw	r2,-16(fp)
    6428:	10800417 	ldw	r2,16(r2)
    642c:	100b883a 	mov	r5,r2
    6430:	1809883a 	mov	r4,r3
    6434:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    6438:	e0bffc17 	ldw	r2,-16(fp)
    643c:	00c00044 	movi	r3,1
    6440:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    6444:	e0bffc17 	ldw	r2,-16(fp)
    6448:	10800504 	addi	r2,r2,20
    644c:	e1bffe17 	ldw	r6,-8(fp)
    6450:	e17ffd17 	ldw	r5,-12(fp)
    6454:	1009883a 	mov	r4,r2
    6458:	00062a80 	call	62a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    645c:	1080005c 	xori	r2,r2,1
    6460:	10803fcc 	andi	r2,r2,255
    6464:	10000226 	beq	r2,zero,6470 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    6468:	0005883a 	mov	r2,zero
    646c:	00006006 	br	65f0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    6470:	e0bffc17 	ldw	r2,-16(fp)
    6474:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    6478:	e0bffc17 	ldw	r2,-16(fp)
    647c:	10800417 	ldw	r2,16(r2)
    6480:	10800003 	ldbu	r2,0(r2)
    6484:	10803fcc 	andi	r2,r2,255
    6488:	10800130 	cmpltui	r2,r2,4
    648c:	10000e1e 	bne	r2,zero,64c8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    6490:	e0bffc17 	ldw	r2,-16(fp)
    6494:	10800417 	ldw	r2,16(r2)
    6498:	10c00043 	ldbu	r3,1(r2)
    649c:	11000083 	ldbu	r4,2(r2)
    64a0:	2008923a 	slli	r4,r4,8
    64a4:	20c6b03a 	or	r3,r4,r3
    64a8:	110000c3 	ldbu	r4,3(r2)
    64ac:	2008943a 	slli	r4,r4,16
    64b0:	20c6b03a 	or	r3,r4,r3
    64b4:	10800103 	ldbu	r2,4(r2)
    64b8:	1004963a 	slli	r2,r2,24
    64bc:	10c4b03a 	or	r2,r2,r3
    64c0:	10800017 	ldw	r2,0(r2)
    64c4:	00000e06 	br	6500 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    64c8:	e0bffc17 	ldw	r2,-16(fp)
    64cc:	10800417 	ldw	r2,16(r2)
    64d0:	10c00043 	ldbu	r3,1(r2)
    64d4:	11000083 	ldbu	r4,2(r2)
    64d8:	2008923a 	slli	r4,r4,8
    64dc:	20c6b03a 	or	r3,r4,r3
    64e0:	110000c3 	ldbu	r4,3(r2)
    64e4:	2008943a 	slli	r4,r4,16
    64e8:	20c6b03a 	or	r3,r4,r3
    64ec:	10800103 	ldbu	r2,4(r2)
    64f0:	1004963a 	slli	r2,r2,24
    64f4:	10c4b03a 	or	r2,r2,r3
    64f8:	1080000b 	ldhu	r2,0(r2)
    64fc:	10bfffcc 	andi	r2,r2,65535
    6500:	e0fffc17 	ldw	r3,-16(fp)
    6504:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    6508:	e0bffc17 	ldw	r2,-16(fp)
    650c:	10c00117 	ldw	r3,4(r2)
    6510:	e0bffc17 	ldw	r2,-16(fp)
    6514:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    6518:	e0bffc17 	ldw	r2,-16(fp)
    651c:	00c00084 	movi	r3,2
    6520:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    6524:	e0bffc17 	ldw	r2,-16(fp)
    6528:	10800417 	ldw	r2,16(r2)
    652c:	e0fffc17 	ldw	r3,-16(fp)
    6530:	18c00343 	ldbu	r3,13(r3)
    6534:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6538:	e0bffc17 	ldw	r2,-16(fp)
    653c:	10c00504 	addi	r3,r2,20
    6540:	e0bffc17 	ldw	r2,-16(fp)
    6544:	10800417 	ldw	r2,16(r2)
    6548:	100b883a 	mov	r5,r2
    654c:	1809883a 	mov	r4,r3
    6550:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    6554:	e0bffc17 	ldw	r2,-16(fp)
    6558:	00c000c4 	movi	r3,3
    655c:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6560:	e0bffc17 	ldw	r2,-16(fp)
    6564:	10800217 	ldw	r2,8(r2)
    6568:	10001e26 	beq	r2,zero,65e4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    656c:	e0bffc17 	ldw	r2,-16(fp)
    6570:	10800504 	addi	r2,r2,20
    6574:	e1bffe17 	ldw	r6,-8(fp)
    6578:	e17ffd17 	ldw	r5,-12(fp)
    657c:	1009883a 	mov	r4,r2
    6580:	00062a80 	call	62a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    6584:	1080005c 	xori	r2,r2,1
    6588:	10803fcc 	andi	r2,r2,255
    658c:	10000226 	beq	r2,zero,6598 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    6590:	0005883a 	mov	r2,zero
    6594:	00001606 	br	65f0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    6598:	e0bfff17 	ldw	r2,-4(fp)
    659c:	10000b26 	beq	r2,zero,65cc <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    65a0:	e0bffc17 	ldw	r2,-16(fp)
    65a4:	11000417 	ldw	r4,16(r2)
    65a8:	e0bffc17 	ldw	r2,-16(fp)
    65ac:	10c00117 	ldw	r3,4(r2)
    65b0:	e0bffc17 	ldw	r2,-16(fp)
    65b4:	10800217 	ldw	r2,8(r2)
    65b8:	1887c83a 	sub	r3,r3,r2
    65bc:	e0bfff17 	ldw	r2,-4(fp)
    65c0:	e1800217 	ldw	r6,8(fp)
    65c4:	180b883a 	mov	r5,r3
    65c8:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    65cc:	e0bffc17 	ldw	r2,-16(fp)
    65d0:	10800217 	ldw	r2,8(r2)
    65d4:	10ffffc4 	addi	r3,r2,-1
    65d8:	e0bffc17 	ldw	r2,-16(fp)
    65dc:	10c00215 	stw	r3,8(r2)
    65e0:	003fdf06 	br	6560 <__alt_data_end+0xfc006560>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    65e4:	e0bffc17 	ldw	r2,-16(fp)
    65e8:	10000005 	stb	zero,0(r2)
        }
        return true;
    65ec:	00800044 	movi	r2,1
}
    65f0:	e037883a 	mov	sp,fp
    65f4:	dfc00117 	ldw	ra,4(sp)
    65f8:	df000017 	ldw	fp,0(sp)
    65fc:	dec00204 	addi	sp,sp,8
    6600:	f800283a 	ret

00006604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    6604:	defff904 	addi	sp,sp,-28
    6608:	dfc00615 	stw	ra,24(sp)
    660c:	df000515 	stw	fp,20(sp)
    6610:	df000504 	addi	fp,sp,20
    6614:	e13ffd15 	stw	r4,-12(fp)
    6618:	2807883a 	mov	r3,r5
    661c:	3005883a 	mov	r2,r6
    6620:	e0fffe05 	stb	r3,-8(fp)
    6624:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    6628:	e0bfff0b 	ldhu	r2,-4(fp)
    662c:	1005d23a 	srai	r2,r2,8
    6630:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    6634:	e0bfff0b 	ldhu	r2,-4(fp)
    6638:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    663c:	e03ffb8d 	sth	zero,-18(fp)
    6640:	e03ffc0d 	sth	zero,-16(fp)
    6644:	e0bffe03 	ldbu	r2,-8(fp)
    6648:	e0bffbc5 	stb	r2,-17(fp)
    664c:	e0bffb03 	ldbu	r2,-20(fp)
    6650:	e0bffc05 	stb	r2,-16(fp)
    6654:	e0bffb43 	ldbu	r2,-19(fp)
    6658:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    665c:	e0bffb84 	addi	r2,fp,-18
    6660:	000f883a 	mov	r7,zero
    6664:	01800104 	movi	r6,4
    6668:	100b883a 	mov	r5,r2
    666c:	e13ffd17 	ldw	r4,-12(fp)
    6670:	001f7880 	call	1f788 <alt_avalon_i2c_master_tx>
    6674:	1004c03a 	cmpne	r2,r2,zero
    6678:	10803fcc 	andi	r2,r2,255
    667c:	10000426 	beq	r2,zero,6690 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    6680:	010000b4 	movhi	r4,2
    6684:	21135c04 	addi	r4,r4,19824
    6688:	000dd200 	call	dd20 <printf>
	}
	return;
    668c:	0001883a 	nop
    6690:	0001883a 	nop
}
    6694:	e037883a 	mov	sp,fp
    6698:	dfc00117 	ldw	ra,4(sp)
    669c:	df000017 	ldw	fp,0(sp)
    66a0:	dec00204 	addi	sp,sp,8
    66a4:	f800283a 	ret

000066a8 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    66a8:	defff604 	addi	sp,sp,-40
    66ac:	dfc00915 	stw	ra,36(sp)
    66b0:	df000815 	stw	fp,32(sp)
    66b4:	dc000715 	stw	r16,28(sp)
    66b8:	df000804 	addi	fp,sp,32
    66bc:	e13ffb15 	stw	r4,-20(fp)
    66c0:	3009883a 	mov	r4,r6
    66c4:	e1fffe15 	stw	r7,-8(fp)
    66c8:	e17ffc05 	stb	r5,-16(fp)
    66cc:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    66d0:	d809883a 	mov	r4,sp
    66d4:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    66d8:	e13ffd03 	ldbu	r4,-12(fp)
    66dc:	21000044 	addi	r4,r4,1
    66e0:	2109883a 	add	r4,r4,r4
    66e4:	213fffc4 	addi	r4,r4,-1
    66e8:	e13ff915 	stw	r4,-28(fp)
    66ec:	200b883a 	mov	r5,r4
    66f0:	29400044 	addi	r5,r5,1
    66f4:	2819883a 	mov	r12,r5
    66f8:	001b883a 	mov	r13,zero
    66fc:	600ad77a 	srli	r5,r12,29
    6700:	681290fa 	slli	r9,r13,3
    6704:	2a52b03a 	or	r9,r5,r9
    6708:	601090fa 	slli	r8,r12,3
    670c:	200b883a 	mov	r5,r4
    6710:	29400044 	addi	r5,r5,1
    6714:	2815883a 	mov	r10,r5
    6718:	0017883a 	mov	r11,zero
    671c:	500ad77a 	srli	r5,r10,29
    6720:	580690fa 	slli	r3,r11,3
    6724:	28c6b03a 	or	r3,r5,r3
    6728:	500490fa 	slli	r2,r10,3
    672c:	2005883a 	mov	r2,r4
    6730:	10800044 	addi	r2,r2,1
    6734:	108000c4 	addi	r2,r2,3
    6738:	1004d0ba 	srli	r2,r2,2
    673c:	1085883a 	add	r2,r2,r2
    6740:	1085883a 	add	r2,r2,r2
    6744:	d8b7c83a 	sub	sp,sp,r2
    6748:	d805883a 	mov	r2,sp
    674c:	1005883a 	mov	r2,r2
    6750:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    6754:	e0bffa17 	ldw	r2,-24(fp)
    6758:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    675c:	e0bffa17 	ldw	r2,-24(fp)
    6760:	e0fffc03 	ldbu	r3,-16(fp)
    6764:	10c00045 	stb	r3,1(r2)
	int i = 0;
    6768:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    676c:	e03ff815 	stw	zero,-32(fp)
    6770:	e0bffd03 	ldbu	r2,-12(fp)
    6774:	e0fff817 	ldw	r3,-32(fp)
    6778:	18801e0e 	bge	r3,r2,67f4 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    677c:	e0bff817 	ldw	r2,-32(fp)
    6780:	10c00084 	addi	r3,r2,2
    6784:	e0bff817 	ldw	r2,-32(fp)
    6788:	1085883a 	add	r2,r2,r2
    678c:	1009883a 	mov	r4,r2
    6790:	e0bffe17 	ldw	r2,-8(fp)
    6794:	1105883a 	add	r2,r2,r4
    6798:	1080000b 	ldhu	r2,0(r2)
    679c:	10bfffcc 	andi	r2,r2,65535
    67a0:	1005d23a 	srai	r2,r2,8
    67a4:	1009883a 	mov	r4,r2
    67a8:	e0bffa17 	ldw	r2,-24(fp)
    67ac:	10c5883a 	add	r2,r2,r3
    67b0:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    67b4:	e0bff817 	ldw	r2,-32(fp)
    67b8:	10c000c4 	addi	r3,r2,3
    67bc:	e0bff817 	ldw	r2,-32(fp)
    67c0:	1085883a 	add	r2,r2,r2
    67c4:	1009883a 	mov	r4,r2
    67c8:	e0bffe17 	ldw	r2,-8(fp)
    67cc:	1105883a 	add	r2,r2,r4
    67d0:	1080000b 	ldhu	r2,0(r2)
    67d4:	1009883a 	mov	r4,r2
    67d8:	e0bffa17 	ldw	r2,-24(fp)
    67dc:	10c5883a 	add	r2,r2,r3
    67e0:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    67e4:	e0bff817 	ldw	r2,-32(fp)
    67e8:	10800044 	addi	r2,r2,1
    67ec:	e0bff815 	stw	r2,-32(fp)
    67f0:	003fdf06 	br	6770 <__alt_data_end+0xfc006770>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    67f4:	e0fffa17 	ldw	r3,-24(fp)
    67f8:	e0bffd03 	ldbu	r2,-12(fp)
    67fc:	10800044 	addi	r2,r2,1
    6800:	1085883a 	add	r2,r2,r2
    6804:	000f883a 	mov	r7,zero
    6808:	100d883a 	mov	r6,r2
    680c:	180b883a 	mov	r5,r3
    6810:	e13ffb17 	ldw	r4,-20(fp)
    6814:	001f7880 	call	1f788 <alt_avalon_i2c_master_tx>
    6818:	1004c03a 	cmpne	r2,r2,zero
    681c:	10803fcc 	andi	r2,r2,255
    6820:	10000326 	beq	r2,zero,6830 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    6824:	010000b4 	movhi	r4,2
    6828:	21136304 	addi	r4,r4,19852
    682c:	000dd200 	call	dd20 <printf>
	}
	return (data+nwords);
    6830:	e0bffd03 	ldbu	r2,-12(fp)
    6834:	1085883a 	add	r2,r2,r2
    6838:	1007883a 	mov	r3,r2
    683c:	e0bffe17 	ldw	r2,-8(fp)
    6840:	10c5883a 	add	r2,r2,r3
    6844:	8037883a 	mov	sp,r16
}
    6848:	e6ffff04 	addi	sp,fp,-4
    684c:	dfc00217 	ldw	ra,8(sp)
    6850:	df000117 	ldw	fp,4(sp)
    6854:	dc000017 	ldw	r16,0(sp)
    6858:	dec00304 	addi	sp,sp,12
    685c:	f800283a 	ret

00006860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    6860:	defff804 	addi	sp,sp,-32
    6864:	dfc00715 	stw	ra,28(sp)
    6868:	df000615 	stw	fp,24(sp)
    686c:	df000604 	addi	fp,sp,24
    6870:	e13ffe15 	stw	r4,-8(fp)
    6874:	2805883a 	mov	r2,r5
    6878:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    687c:	e03ffc8d 	sth	zero,-14(fp)
    6880:	e0bfff03 	ldbu	r2,-4(fp)
    6884:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    6888:	e03ffd05 	stb	zero,-12(fp)
    688c:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6890:	e13ffd04 	addi	r4,fp,-12
    6894:	e0fffc84 	addi	r3,fp,-14
    6898:	d8000115 	stw	zero,4(sp)
    689c:	00800084 	movi	r2,2
    68a0:	d8800015 	stw	r2,0(sp)
    68a4:	200f883a 	mov	r7,r4
    68a8:	01800084 	movi	r6,2
    68ac:	180b883a 	mov	r5,r3
    68b0:	e13ffe17 	ldw	r4,-8(fp)
    68b4:	001f9ac0 	call	1f9ac <alt_avalon_i2c_master_tx_rx>
    68b8:	1004c03a 	cmpne	r2,r2,zero
    68bc:	10803fcc 	andi	r2,r2,255
    68c0:	10000326 	beq	r2,zero,68d0 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    68c4:	010000b4 	movhi	r4,2
    68c8:	21136904 	addi	r4,r4,19876
    68cc:	000dd200 	call	dd20 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    68d0:	e0bffd03 	ldbu	r2,-12(fp)
    68d4:	10803fcc 	andi	r2,r2,255
    68d8:	1004923a 	slli	r2,r2,8
    68dc:	1007883a 	mov	r3,r2
    68e0:	e0bffd43 	ldbu	r2,-11(fp)
    68e4:	10803fcc 	andi	r2,r2,255
    68e8:	1884b03a 	or	r2,r3,r2
    68ec:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    68f0:	e0bffc0b 	ldhu	r2,-16(fp)
}
    68f4:	e037883a 	mov	sp,fp
    68f8:	dfc00117 	ldw	ra,4(sp)
    68fc:	df000017 	ldw	fp,0(sp)
    6900:	dec00204 	addi	sp,sp,8
    6904:	f800283a 	ret

00006908 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6908:	defff304 	addi	sp,sp,-52
    690c:	dfc00c15 	stw	ra,48(sp)
    6910:	df000b15 	stw	fp,44(sp)
    6914:	dc000a15 	stw	r16,40(sp)
    6918:	df000b04 	addi	fp,sp,44
    691c:	e13ffb15 	stw	r4,-20(fp)
    6920:	3009883a 	mov	r4,r6
    6924:	e1fffe15 	stw	r7,-8(fp)
    6928:	e17ffc05 	stb	r5,-16(fp)
    692c:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6930:	d809883a 	mov	r4,sp
    6934:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    6938:	e03ffa0d 	sth	zero,-24(fp)
    693c:	e13ffc03 	ldbu	r4,-16(fp)
    6940:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    6944:	e13ffd03 	ldbu	r4,-12(fp)
    6948:	2109883a 	add	r4,r4,r4
    694c:	213fffc4 	addi	r4,r4,-1
    6950:	e13ff815 	stw	r4,-32(fp)
    6954:	200b883a 	mov	r5,r4
    6958:	29400044 	addi	r5,r5,1
    695c:	2819883a 	mov	r12,r5
    6960:	001b883a 	mov	r13,zero
    6964:	600ad77a 	srli	r5,r12,29
    6968:	681290fa 	slli	r9,r13,3
    696c:	2a52b03a 	or	r9,r5,r9
    6970:	601090fa 	slli	r8,r12,3
    6974:	200b883a 	mov	r5,r4
    6978:	29400044 	addi	r5,r5,1
    697c:	2815883a 	mov	r10,r5
    6980:	0017883a 	mov	r11,zero
    6984:	500ad77a 	srli	r5,r10,29
    6988:	580690fa 	slli	r3,r11,3
    698c:	28c6b03a 	or	r3,r5,r3
    6990:	500490fa 	slli	r2,r10,3
    6994:	2005883a 	mov	r2,r4
    6998:	10800044 	addi	r2,r2,1
    699c:	108000c4 	addi	r2,r2,3
    69a0:	1004d0ba 	srli	r2,r2,2
    69a4:	1085883a 	add	r2,r2,r2
    69a8:	1085883a 	add	r2,r2,r2
    69ac:	d8b7c83a 	sub	sp,sp,r2
    69b0:	d8800204 	addi	r2,sp,8
    69b4:	1005883a 	mov	r2,r2
    69b8:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    69bc:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    69c0:	e0fff917 	ldw	r3,-28(fp)
    69c4:	e0bffd03 	ldbu	r2,-12(fp)
    69c8:	1085883a 	add	r2,r2,r2
    69cc:	1009883a 	mov	r4,r2
    69d0:	e0bffa04 	addi	r2,fp,-24
    69d4:	d8000115 	stw	zero,4(sp)
    69d8:	d9000015 	stw	r4,0(sp)
    69dc:	180f883a 	mov	r7,r3
    69e0:	01800084 	movi	r6,2
    69e4:	100b883a 	mov	r5,r2
    69e8:	e13ffb17 	ldw	r4,-20(fp)
    69ec:	001f9ac0 	call	1f9ac <alt_avalon_i2c_master_tx_rx>
    69f0:	1004c03a 	cmpne	r2,r2,zero
    69f4:	10803fcc 	andi	r2,r2,255
    69f8:	10000326 	beq	r2,zero,6a08 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    69fc:	010000b4 	movhi	r4,2
    6a00:	21136f04 	addi	r4,r4,19900
    6a04:	000dd200 	call	dd20 <printf>
	}
	for(i = 0; i < nwords; i++) {
    6a08:	e03ff715 	stw	zero,-36(fp)
    6a0c:	e0bffd03 	ldbu	r2,-12(fp)
    6a10:	e0fff717 	ldw	r3,-36(fp)
    6a14:	18801b0e 	bge	r3,r2,6a84 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    6a18:	e0bff717 	ldw	r2,-36(fp)
    6a1c:	1085883a 	add	r2,r2,r2
    6a20:	1007883a 	mov	r3,r2
    6a24:	e0bffe17 	ldw	r2,-8(fp)
    6a28:	10c7883a 	add	r3,r2,r3
    6a2c:	e0bff717 	ldw	r2,-36(fp)
    6a30:	1085883a 	add	r2,r2,r2
    6a34:	1009883a 	mov	r4,r2
    6a38:	e0bff917 	ldw	r2,-28(fp)
    6a3c:	1105883a 	add	r2,r2,r4
    6a40:	10800003 	ldbu	r2,0(r2)
    6a44:	10803fcc 	andi	r2,r2,255
    6a48:	1004923a 	slli	r2,r2,8
    6a4c:	100b883a 	mov	r5,r2
    6a50:	e0bff717 	ldw	r2,-36(fp)
    6a54:	1085883a 	add	r2,r2,r2
    6a58:	10800044 	addi	r2,r2,1
    6a5c:	e13ff917 	ldw	r4,-28(fp)
    6a60:	2085883a 	add	r2,r4,r2
    6a64:	10800003 	ldbu	r2,0(r2)
    6a68:	10803fcc 	andi	r2,r2,255
    6a6c:	2884b03a 	or	r2,r5,r2
    6a70:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6a74:	e0bff717 	ldw	r2,-36(fp)
    6a78:	10800044 	addi	r2,r2,1
    6a7c:	e0bff715 	stw	r2,-36(fp)
    6a80:	003fe206 	br	6a0c <__alt_data_end+0xfc006a0c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6a84:	e0bffd03 	ldbu	r2,-12(fp)
    6a88:	1085883a 	add	r2,r2,r2
    6a8c:	1007883a 	mov	r3,r2
    6a90:	e0bffe17 	ldw	r2,-8(fp)
    6a94:	10c5883a 	add	r2,r2,r3
    6a98:	8037883a 	mov	sp,r16
}
    6a9c:	e6ffff04 	addi	sp,fp,-4
    6aa0:	dfc00217 	ldw	ra,8(sp)
    6aa4:	df000117 	ldw	fp,4(sp)
    6aa8:	dc000017 	ldw	r16,0(sp)
    6aac:	dec00304 	addi	sp,sp,12
    6ab0:	f800283a 	ret

00006ab4 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6ab4:	defffd04 	addi	sp,sp,-12
    6ab8:	dfc00215 	stw	ra,8(sp)
    6abc:	df000115 	stw	fp,4(sp)
    6ac0:	df000104 	addi	fp,sp,4
    6ac4:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6ac8:	01400284 	movi	r5,10
    6acc:	e13fff17 	ldw	r4,-4(fp)
    6ad0:	001f5800 	call	1f580 <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6ad4:	01902f04 	movi	r6,16572
    6ad8:	01400c04 	movi	r5,48
    6adc:	e13fff17 	ldw	r4,-4(fp)
    6ae0:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6ae4:	01801384 	movi	r6,78
    6ae8:	01400a04 	movi	r5,40
    6aec:	e13fff17 	ldw	r4,-4(fp)
    6af0:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6af4:	01800844 	movi	r6,33
    6af8:	01400084 	movi	r5,2
    6afc:	e13fff17 	ldw	r4,-4(fp)
    6b00:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6b04:	01800104 	movi	r6,4
    6b08:	01400104 	movi	r5,4
    6b0c:	e13fff17 	ldw	r4,-4(fp)
    6b10:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_24);
    6b14:	01800404 	movi	r6,16
    6b18:	01400184 	movi	r5,6
    6b1c:	e13fff17 	ldw	r4,-4(fp)
    6b20:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6b24:	01800404 	movi	r6,16
    6b28:	01400284 	movi	r5,10
    6b2c:	e13fff17 	ldw	r4,-4(fp)
    6b30:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6b34:	0001883a 	nop
    6b38:	e037883a 	mov	sp,fp
    6b3c:	dfc00117 	ldw	ra,4(sp)
    6b40:	df000017 	ldw	fp,0(sp)
    6b44:	dec00204 	addi	sp,sp,8
    6b48:	f800283a 	ret

00006b4c <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6b4c:	defffd04 	addi	sp,sp,-12
    6b50:	dfc00215 	stw	ra,8(sp)
    6b54:	df000115 	stw	fp,4(sp)
    6b58:	df000104 	addi	fp,sp,4
    6b5c:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6b60:	01901004 	movi	r6,16448
    6b64:	01400884 	movi	r5,34
    6b68:	e13fff17 	ldw	r4,-4(fp)
    6b6c:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6b70:	019c1c04 	movi	r6,28784
    6b74:	01400404 	movi	r5,16
    6b78:	e13fff17 	ldw	r4,-4(fp)
    6b7c:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6b80:	01808004 	movi	r6,512
    6b84:	01400384 	movi	r5,14
    6b88:	e13fff17 	ldw	r4,-4(fp)
    6b8c:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    6b90:	01804044 	movi	r6,257
    6b94:	01400904 	movi	r5,36
    6b98:	e13fff17 	ldw	r4,-4(fp)
    6b9c:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6ba0:	0001883a 	nop
    6ba4:	e037883a 	mov	sp,fp
    6ba8:	dfc00117 	ldw	ra,4(sp)
    6bac:	df000017 	ldw	fp,0(sp)
    6bb0:	dec00204 	addi	sp,sp,8
    6bb4:	f800283a 	ret

00006bb8 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    6bb8:	defffd04 	addi	sp,sp,-12
    6bbc:	dfc00215 	stw	ra,8(sp)
    6bc0:	df000115 	stw	fp,4(sp)
    6bc4:	df000104 	addi	fp,sp,4
    6bc8:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    6bcc:	000b883a 	mov	r5,zero
    6bd0:	e13fff17 	ldw	r4,-4(fp)
    6bd4:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bd8:	10bfffcc 	andi	r2,r2,65535
    6bdc:	100b883a 	mov	r5,r2
    6be0:	010000b4 	movhi	r4,2
    6be4:	21137504 	addi	r4,r4,19924
    6be8:	000dd200 	call	dd20 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    6bec:	01400084 	movi	r5,2
    6bf0:	e13fff17 	ldw	r4,-4(fp)
    6bf4:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bf8:	10bfffcc 	andi	r2,r2,65535
    6bfc:	100b883a 	mov	r5,r2
    6c00:	010000b4 	movhi	r4,2
    6c04:	21137804 	addi	r4,r4,19936
    6c08:	000dd200 	call	dd20 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    6c0c:	01400104 	movi	r5,4
    6c10:	e13fff17 	ldw	r4,-4(fp)
    6c14:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c18:	10bfffcc 	andi	r2,r2,65535
    6c1c:	100b883a 	mov	r5,r2
    6c20:	010000b4 	movhi	r4,2
    6c24:	21137d04 	addi	r4,r4,19956
    6c28:	000dd200 	call	dd20 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    6c2c:	01400184 	movi	r5,6
    6c30:	e13fff17 	ldw	r4,-4(fp)
    6c34:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c38:	10bfffcc 	andi	r2,r2,65535
    6c3c:	100b883a 	mov	r5,r2
    6c40:	010000b4 	movhi	r4,2
    6c44:	21138204 	addi	r4,r4,19976
    6c48:	000dd200 	call	dd20 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    6c4c:	01400284 	movi	r5,10
    6c50:	e13fff17 	ldw	r4,-4(fp)
    6c54:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c58:	10bfffcc 	andi	r2,r2,65535
    6c5c:	100b883a 	mov	r5,r2
    6c60:	010000b4 	movhi	r4,2
    6c64:	21138704 	addi	r4,r4,19996
    6c68:	000dd200 	call	dd20 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    6c6c:	01400c04 	movi	r5,48
    6c70:	e13fff17 	ldw	r4,-4(fp)
    6c74:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c78:	10bfffcc 	andi	r2,r2,65535
    6c7c:	100b883a 	mov	r5,r2
    6c80:	010000b4 	movhi	r4,2
    6c84:	21138c04 	addi	r4,r4,20016
    6c88:	000dd200 	call	dd20 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    6c8c:	01400384 	movi	r5,14
    6c90:	e13fff17 	ldw	r4,-4(fp)
    6c94:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c98:	10bfffcc 	andi	r2,r2,65535
    6c9c:	100b883a 	mov	r5,r2
    6ca0:	010000b4 	movhi	r4,2
    6ca4:	21139104 	addi	r4,r4,20036
    6ca8:	000dd200 	call	dd20 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    6cac:	01400904 	movi	r5,36
    6cb0:	e13fff17 	ldw	r4,-4(fp)
    6cb4:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cb8:	10bfffcc 	andi	r2,r2,65535
    6cbc:	100b883a 	mov	r5,r2
    6cc0:	010000b4 	movhi	r4,2
    6cc4:	21139604 	addi	r4,r4,20056
    6cc8:	000dd200 	call	dd20 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    6ccc:	01400e04 	movi	r5,56
    6cd0:	e13fff17 	ldw	r4,-4(fp)
    6cd4:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cd8:	10bfffcc 	andi	r2,r2,65535
    6cdc:	100b883a 	mov	r5,r2
    6ce0:	010000b4 	movhi	r4,2
    6ce4:	21139b04 	addi	r4,r4,20076
    6ce8:	000dd200 	call	dd20 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    6cec:	01400804 	movi	r5,32
    6cf0:	e13fff17 	ldw	r4,-4(fp)
    6cf4:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cf8:	10bfffcc 	andi	r2,r2,65535
    6cfc:	100b883a 	mov	r5,r2
    6d00:	010000b4 	movhi	r4,2
    6d04:	2113a004 	addi	r4,r4,20096
    6d08:	000dd200 	call	dd20 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    6d0c:	01400404 	movi	r5,16
    6d10:	e13fff17 	ldw	r4,-4(fp)
    6d14:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d18:	10bfffcc 	andi	r2,r2,65535
    6d1c:	100b883a 	mov	r5,r2
    6d20:	010000b4 	movhi	r4,2
    6d24:	2113a504 	addi	r4,r4,20116
    6d28:	000dd200 	call	dd20 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    6d2c:	01400884 	movi	r5,34
    6d30:	e13fff17 	ldw	r4,-4(fp)
    6d34:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d38:	10bfffcc 	andi	r2,r2,65535
    6d3c:	100b883a 	mov	r5,r2
    6d40:	010000b4 	movhi	r4,2
    6d44:	2113aa04 	addi	r4,r4,20136
    6d48:	000dd200 	call	dd20 <printf>
}
    6d4c:	0001883a 	nop
    6d50:	e037883a 	mov	sp,fp
    6d54:	dfc00117 	ldw	ra,4(sp)
    6d58:	df000017 	ldw	fp,0(sp)
    6d5c:	dec00204 	addi	sp,sp,8
    6d60:	f800283a 	ret

00006d64 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000vol_up(ALT_AVALON_I2C_DEV_t* dev) {
    6d64:	defffc04 	addi	sp,sp,-16
    6d68:	dfc00315 	stw	ra,12(sp)
    6d6c:	df000215 	stw	fp,8(sp)
    6d70:	df000204 	addi	fp,sp,8
    6d74:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6d78:	01400404 	movi	r5,16
    6d7c:	e13fff17 	ldw	r4,-4(fp)
    6d80:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d84:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6d88:	e03ffe0d 	sth	zero,-8(fp)
	printf("Current:	%X\n", current_vol);
    6d8c:	e0bffe8b 	ldhu	r2,-6(fp)
    6d90:	100b883a 	mov	r5,r2
    6d94:	010000b4 	movhi	r4,2
    6d98:	2113af04 	addi	r4,r4,20156
    6d9c:	000dd200 	call	dd20 <printf>
	printf("Sum:		%X\n", (current_vol >> 8) + DAC_VOL_STEP);
    6da0:	e0bffe8b 	ldhu	r2,-6(fp)
    6da4:	1005d23a 	srai	r2,r2,8
    6da8:	10800084 	addi	r2,r2,2
    6dac:	100b883a 	mov	r5,r2
    6db0:	010000b4 	movhi	r4,2
    6db4:	2113b304 	addi	r4,r4,20172
    6db8:	000dd200 	call	dd20 <printf>
	printf("Max:		%X\n", DAC_MAX_VOL);
    6dbc:	01400f04 	movi	r5,60
    6dc0:	010000b4 	movhi	r4,2
    6dc4:	2113b604 	addi	r4,r4,20184
    6dc8:	000dd200 	call	dd20 <printf>
	if (DAC_MAX_VOL >= ((current_vol >> 8) - DAC_VOL_STEP)) new_vol = (DAC_MAX_VOL << 8) | DAC_MAX_VOL;
    6dcc:	e0bffe8b 	ldhu	r2,-6(fp)
    6dd0:	1005d23a 	srai	r2,r2,8
    6dd4:	10bfff84 	addi	r2,r2,-2
    6dd8:	10800f48 	cmpgei	r2,r2,61
    6ddc:	1000031e 	bne	r2,zero,6dec <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x88>
    6de0:	008f0f04 	movi	r2,15420
    6de4:	e0bffe0d 	sth	r2,-8(fp)
    6de8:	00000306 	br	6df8 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x94>
	else new_vol = current_vol - ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6dec:	e0bffe8b 	ldhu	r2,-6(fp)
    6df0:	10bf7f84 	addi	r2,r2,-514
    6df4:	e0bffe0d 	sth	r2,-8(fp)
	printf("New:		%X\n", new_vol);
    6df8:	e0bffe0b 	ldhu	r2,-8(fp)
    6dfc:	100b883a 	mov	r5,r2
    6e00:	010000b4 	movhi	r4,2
    6e04:	2113b904 	addi	r4,r4,20196
    6e08:	000dd200 	call	dd20 <printf>
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6e0c:	e0bffe0b 	ldhu	r2,-8(fp)
    6e10:	100d883a 	mov	r6,r2
    6e14:	01400404 	movi	r5,16
    6e18:	e13fff17 	ldw	r4,-4(fp)
    6e1c:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6e20:	0001883a 	nop
    6e24:	e037883a 	mov	sp,fp
    6e28:	dfc00117 	ldw	ra,4(sp)
    6e2c:	df000017 	ldw	fp,0(sp)
    6e30:	dec00204 	addi	sp,sp,8
    6e34:	f800283a 	ret

00006e38 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>:


void SGTL5000vol_down(ALT_AVALON_I2C_DEV_t* dev) {
    6e38:	defffc04 	addi	sp,sp,-16
    6e3c:	dfc00315 	stw	ra,12(sp)
    6e40:	df000215 	stw	fp,8(sp)
    6e44:	df000204 	addi	fp,sp,8
    6e48:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6e4c:	01400404 	movi	r5,16
    6e50:	e13fff17 	ldw	r4,-4(fp)
    6e54:	00068600 	call	6860 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6e58:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6e5c:	e03ffe0d 	sth	zero,-8(fp)
	if (DAC_MIN_VOL <= ((current_vol >> 8) + DAC_VOL_STEP)) new_vol = (DAC_MIN_VOL << 8) | DAC_MIN_VOL;
    6e60:	e0bffe8b 	ldhu	r2,-6(fp)
    6e64:	1005d23a 	srai	r2,r2,8
    6e68:	10800084 	addi	r2,r2,2
    6e6c:	10803c10 	cmplti	r2,r2,240
    6e70:	1000031e 	bne	r2,zero,6e80 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x48>
    6e74:	00bc3c04 	movi	r2,-3856
    6e78:	e0bffe0d 	sth	r2,-8(fp)
    6e7c:	00000306 	br	6e8c <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x54>
	else new_vol = current_vol + ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6e80:	e0bffe8b 	ldhu	r2,-6(fp)
    6e84:	10808084 	addi	r2,r2,514
    6e88:	e0bffe0d 	sth	r2,-8(fp)
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6e8c:	e0bffe0b 	ldhu	r2,-8(fp)
    6e90:	100d883a 	mov	r6,r2
    6e94:	01400404 	movi	r5,16
    6e98:	e13fff17 	ldw	r4,-4(fp)
    6e9c:	00066040 	call	6604 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6ea0:	0001883a 	nop
    6ea4:	e037883a 	mov	sp,fp
    6ea8:	dfc00117 	ldw	ra,4(sp)
    6eac:	df000017 	ldw	fp,0(sp)
    6eb0:	dec00204 	addi	sp,sp,8
    6eb4:	f800283a 	ret

00006eb8 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    6eb8:	defffb04 	addi	sp,sp,-20
    6ebc:	dfc00415 	stw	ra,16(sp)
    6ec0:	df000315 	stw	fp,12(sp)
    6ec4:	df000304 	addi	fp,sp,12
    6ec8:	e13ffe15 	stw	r4,-8(fp)
    6ecc:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    6ed0:	e0bffe17 	ldw	r2,-8(fp)
    6ed4:	1009883a 	mov	r4,r2
    6ed8:	0004e880 	call	4e88 <_ZN15USBDeviceConfigC1Ev>
    6edc:	e0bffe17 	ldw	r2,-8(fp)
    6ee0:	10800104 	addi	r2,r2,4
    6ee4:	1009883a 	mov	r4,r2
    6ee8:	0008dc00 	call	8dc0 <_ZN21UsbMidiConfigXtracterC1Ev>
    6eec:	008000b4 	movhi	r2,2
    6ef0:	1093c604 	addi	r2,r2,20248
    6ef4:	e0fffe17 	ldw	r3,-8(fp)
    6ef8:	18800015 	stw	r2,0(r3)
    6efc:	008000b4 	movhi	r2,2
    6f00:	1093d204 	addi	r2,r2,20296
    6f04:	e0fffe17 	ldw	r3,-8(fp)
    6f08:	18800115 	stw	r2,4(r3)
    6f0c:	e0bffe17 	ldw	r2,-8(fp)
    6f10:	e0ffff17 	ldw	r3,-4(fp)
    6f14:	10c00215 	stw	r3,8(r2)
    6f18:	e0bffe17 	ldw	r2,-8(fp)
    6f1c:	10000305 	stb	zero,12(r2)
    6f20:	e0bffe17 	ldw	r2,-8(fp)
    6f24:	10000345 	stb	zero,13(r2)
    6f28:	e0bffe17 	ldw	r2,-8(fp)
    6f2c:	10001705 	stb	zero,92(r2)
    6f30:	e0bffe17 	ldw	r2,-8(fp)
    6f34:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6f38:	e03ffd05 	stb	zero,-12(fp)
    6f3c:	e0bffd03 	ldbu	r2,-12(fp)
    6f40:	108000e8 	cmpgeui	r2,r2,3
    6f44:	10002d1e 	bne	r2,zero,6ffc <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    6f48:	e0fffd03 	ldbu	r3,-12(fp)
    6f4c:	e13ffe17 	ldw	r4,-8(fp)
    6f50:	1805883a 	mov	r2,r3
    6f54:	1085883a 	add	r2,r2,r2
    6f58:	10c5883a 	add	r2,r2,r3
    6f5c:	2085883a 	add	r2,r4,r2
    6f60:	108004c4 	addi	r2,r2,19
    6f64:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    6f68:	e13ffd03 	ldbu	r4,-12(fp)
    6f6c:	e0bffd03 	ldbu	r2,-12(fp)
    6f70:	10000226 	beq	r2,zero,6f7c <_ZN9USBH_MIDIC1EP3USB+0xc4>
    6f74:	0007883a 	mov	r3,zero
    6f78:	00000106 	br	6f80 <_ZN9USBH_MIDIC1EP3USB+0xc8>
    6f7c:	00c00204 	movi	r3,8
    6f80:	e17ffe17 	ldw	r5,-8(fp)
    6f84:	2005883a 	mov	r2,r4
    6f88:	1085883a 	add	r2,r2,r2
    6f8c:	1105883a 	add	r2,r2,r4
    6f90:	2885883a 	add	r2,r5,r2
    6f94:	10800504 	addi	r2,r2,20
    6f98:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    6f9c:	e13ffd03 	ldbu	r4,-12(fp)
    6fa0:	e0bffd03 	ldbu	r2,-12(fp)
    6fa4:	10000226 	beq	r2,zero,6fb0 <_ZN9USBH_MIDIC1EP3USB+0xf8>
    6fa8:	00c00044 	movi	r3,1
    6fac:	00000106 	br	6fb4 <_ZN9USBH_MIDIC1EP3USB+0xfc>
    6fb0:	00c003c4 	movi	r3,15
    6fb4:	e17ffe17 	ldw	r5,-8(fp)
    6fb8:	2005883a 	mov	r2,r4
    6fbc:	1085883a 	add	r2,r2,r2
    6fc0:	1105883a 	add	r2,r2,r4
    6fc4:	2885883a 	add	r2,r5,r2
    6fc8:	10800404 	addi	r2,r2,16
    6fcc:	18c7883a 	add	r3,r3,r3
    6fd0:	18cb883a 	add	r5,r3,r3
    6fd4:	10c00143 	ldbu	r3,5(r2)
    6fd8:	18c000cc 	andi	r3,r3,3
    6fdc:	1809883a 	mov	r4,r3
    6fe0:	2807883a 	mov	r3,r5
    6fe4:	20c6b03a 	or	r3,r4,r3
    6fe8:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6fec:	e0bffd03 	ldbu	r2,-12(fp)
    6ff0:	10800044 	addi	r2,r2,1
    6ff4:	e0bffd05 	stb	r2,-12(fp)
    6ff8:	003fd006 	br	6f3c <__alt_data_end+0xfc006f3c>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    6ffc:	e0bffe17 	ldw	r2,-8(fp)
    7000:	10800217 	ldw	r2,8(r2)
    7004:	10000626 	beq	r2,zero,7020 <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    7008:	e0bffe17 	ldw	r2,-8(fp)
    700c:	10800217 	ldw	r2,8(r2)
    7010:	e0fffe17 	ldw	r3,-8(fp)
    7014:	180b883a 	mov	r5,r3
    7018:	1009883a 	mov	r4,r2
    701c:	0004c3c0 	call	4c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    7020:	0001883a 	nop
    7024:	e037883a 	mov	sp,fp
    7028:	dfc00117 	ldw	ra,4(sp)
    702c:	df000017 	ldw	fp,0(sp)
    7030:	dec00204 	addi	sp,sp,8
    7034:	f800283a 	ret

00007038 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    7038:	deffe004 	addi	sp,sp,-128
    703c:	dfc01f15 	stw	ra,124(sp)
    7040:	df001e15 	stw	fp,120(sp)
    7044:	df001e04 	addi	fp,sp,120
    7048:	e13ffc15 	stw	r4,-16(fp)
    704c:	2809883a 	mov	r4,r5
    7050:	3007883a 	mov	r3,r6
    7054:	3805883a 	mov	r2,r7
    7058:	e13ffd05 	stb	r4,-12(fp)
    705c:	e0fffe05 	stb	r3,-8(fp)
    7060:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    7064:	e0bfe944 	addi	r2,fp,-91
    7068:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    706c:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    7070:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    7074:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    7078:	00800044 	movi	r2,1
    707c:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7080:	00800044 	movi	r2,1
    7084:	e0bfe3c5 	stb	r2,-113(fp)
    7088:	e0bfe3c3 	ldbu	r2,-113(fp)
    708c:	108000e8 	cmpgeui	r2,r2,3
    7090:	10001a1e 	bne	r2,zero,70fc <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    7094:	e0ffe3c3 	ldbu	r3,-113(fp)
    7098:	e13ffc17 	ldw	r4,-16(fp)
    709c:	1805883a 	mov	r2,r3
    70a0:	1085883a 	add	r2,r2,r2
    70a4:	10c5883a 	add	r2,r2,r3
    70a8:	2085883a 	add	r2,r4,r2
    70ac:	10800404 	addi	r2,r2,16
    70b0:	11000143 	ldbu	r4,5(r2)
    70b4:	00ffff84 	movi	r3,-2
    70b8:	20c6703a 	and	r3,r4,r3
    70bc:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    70c0:	e0ffe3c3 	ldbu	r3,-113(fp)
    70c4:	e13ffc17 	ldw	r4,-16(fp)
    70c8:	1805883a 	mov	r2,r3
    70cc:	1085883a 	add	r2,r2,r2
    70d0:	10c5883a 	add	r2,r2,r3
    70d4:	2085883a 	add	r2,r4,r2
    70d8:	10800404 	addi	r2,r2,16
    70dc:	11000143 	ldbu	r4,5(r2)
    70e0:	00ffff44 	movi	r3,-3
    70e4:	20c6703a 	and	r3,r4,r3
    70e8:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    70ec:	e0bfe3c3 	ldbu	r2,-113(fp)
    70f0:	10800044 	addi	r2,r2,1
    70f4:	e0bfe3c5 	stb	r2,-113(fp)
    70f8:	003fe306 	br	7088 <__alt_data_end+0xfc007088>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    70fc:	e0bffc17 	ldw	r2,-16(fp)
    7100:	10800217 	ldw	r2,8(r2)
    7104:	1009883a 	mov	r4,r2
    7108:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    710c:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    7110:	e0bffc17 	ldw	r2,-16(fp)
    7114:	10800303 	ldbu	r2,12(r2)
    7118:	10803fcc 	andi	r2,r2,255
    711c:	10000226 	beq	r2,zero,7128 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    7120:	00bff644 	movi	r2,-39
    7124:	0001c706 	br	7844 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    7128:	e0bfe817 	ldw	r2,-96(fp)
    712c:	10800017 	ldw	r2,0(r2)
    7130:	10800017 	ldw	r2,0(r2)
    7134:	e0fffc17 	ldw	r3,-16(fp)
    7138:	18c00303 	ldbu	r3,12(r3)
    713c:	18c03fcc 	andi	r3,r3,255
    7140:	180b883a 	mov	r5,r3
    7144:	e13fe817 	ldw	r4,-96(fp)
    7148:	103ee83a 	callr	r2
    714c:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7150:	e0bfe617 	ldw	r2,-104(fp)
    7154:	1000021e 	bne	r2,zero,7160 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7158:	00bff584 	movi	r2,-42
    715c:	0001b906 	br	7844 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    7160:	e0bfe617 	ldw	r2,-104(fp)
    7164:	10c00003 	ldbu	r3,0(r2)
    7168:	11000043 	ldbu	r4,1(r2)
    716c:	2008923a 	slli	r4,r4,8
    7170:	20c6b03a 	or	r3,r4,r3
    7174:	11000083 	ldbu	r4,2(r2)
    7178:	2008943a 	slli	r4,r4,16
    717c:	20c6b03a 	or	r3,r4,r3
    7180:	108000c3 	ldbu	r2,3(r2)
    7184:	1004963a 	slli	r2,r2,24
    7188:	10c4b03a 	or	r2,r2,r3
    718c:	1000021e 	bne	r2,zero,7198 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    7190:	00bff5c4 	movi	r2,-41
    7194:	0001ab06 	br	7844 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    7198:	e0bfe617 	ldw	r2,-104(fp)
    719c:	10c00003 	ldbu	r3,0(r2)
    71a0:	11000043 	ldbu	r4,1(r2)
    71a4:	2008923a 	slli	r4,r4,8
    71a8:	20c6b03a 	or	r3,r4,r3
    71ac:	11000083 	ldbu	r4,2(r2)
    71b0:	2008943a 	slli	r4,r4,16
    71b4:	20c6b03a 	or	r3,r4,r3
    71b8:	108000c3 	ldbu	r2,3(r2)
    71bc:	1004963a 	slli	r2,r2,24
    71c0:	10c4b03a 	or	r2,r2,r3
    71c4:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    71c8:	e0bffc17 	ldw	r2,-16(fp)
    71cc:	10c004c4 	addi	r3,r2,19
    71d0:	e0bfe617 	ldw	r2,-104(fp)
    71d4:	19803fcc 	andi	r6,r3,255
    71d8:	11000003 	ldbu	r4,0(r2)
    71dc:	2008703a 	and	r4,r4,zero
    71e0:	200b883a 	mov	r5,r4
    71e4:	3009883a 	mov	r4,r6
    71e8:	2908b03a 	or	r4,r5,r4
    71ec:	11000005 	stb	r4,0(r2)
    71f0:	1808d23a 	srli	r4,r3,8
    71f4:	21803fcc 	andi	r6,r4,255
    71f8:	11000043 	ldbu	r4,1(r2)
    71fc:	2008703a 	and	r4,r4,zero
    7200:	200b883a 	mov	r5,r4
    7204:	3009883a 	mov	r4,r6
    7208:	2908b03a 	or	r4,r5,r4
    720c:	11000045 	stb	r4,1(r2)
    7210:	1808d43a 	srli	r4,r3,16
    7214:	21803fcc 	andi	r6,r4,255
    7218:	11000083 	ldbu	r4,2(r2)
    721c:	2008703a 	and	r4,r4,zero
    7220:	200b883a 	mov	r5,r4
    7224:	3009883a 	mov	r4,r6
    7228:	2908b03a 	or	r4,r5,r4
    722c:	11000085 	stb	r4,2(r2)
    7230:	180ad63a 	srli	r5,r3,24
    7234:	10c000c3 	ldbu	r3,3(r2)
    7238:	1806703a 	and	r3,r3,zero
    723c:	1809883a 	mov	r4,r3
    7240:	2807883a 	mov	r3,r5
    7244:	20c6b03a 	or	r3,r4,r3
    7248:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    724c:	e0bfe617 	ldw	r2,-104(fp)
    7250:	e0ffff03 	ldbu	r3,-4(fp)
    7254:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    7258:	e0bffc17 	ldw	r2,-16(fp)
    725c:	10c00217 	ldw	r3,8(r2)
    7260:	e0bfe944 	addi	r2,fp,-91
    7264:	d8800015 	stw	r2,0(sp)
    7268:	01c00204 	movi	r7,8
    726c:	000d883a 	mov	r6,zero
    7270:	000b883a 	mov	r5,zero
    7274:	1809883a 	mov	r4,r3
    7278:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    727c:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    7280:	e0bfe617 	ldw	r2,-104(fp)
    7284:	e0ffe717 	ldw	r3,-100(fp)
    7288:	19403fcc 	andi	r5,r3,255
    728c:	10c00003 	ldbu	r3,0(r2)
    7290:	1806703a 	and	r3,r3,zero
    7294:	1809883a 	mov	r4,r3
    7298:	2807883a 	mov	r3,r5
    729c:	20c6b03a 	or	r3,r4,r3
    72a0:	10c00005 	stb	r3,0(r2)
    72a4:	e0ffe717 	ldw	r3,-100(fp)
    72a8:	1806d23a 	srli	r3,r3,8
    72ac:	19403fcc 	andi	r5,r3,255
    72b0:	10c00043 	ldbu	r3,1(r2)
    72b4:	1806703a 	and	r3,r3,zero
    72b8:	1809883a 	mov	r4,r3
    72bc:	2807883a 	mov	r3,r5
    72c0:	20c6b03a 	or	r3,r4,r3
    72c4:	10c00045 	stb	r3,1(r2)
    72c8:	e0ffe717 	ldw	r3,-100(fp)
    72cc:	1806d43a 	srli	r3,r3,16
    72d0:	19403fcc 	andi	r5,r3,255
    72d4:	10c00083 	ldbu	r3,2(r2)
    72d8:	1806703a 	and	r3,r3,zero
    72dc:	1809883a 	mov	r4,r3
    72e0:	2807883a 	mov	r3,r5
    72e4:	20c6b03a 	or	r3,r4,r3
    72e8:	10c00085 	stb	r3,2(r2)
    72ec:	e0ffe717 	ldw	r3,-100(fp)
    72f0:	180ad63a 	srli	r5,r3,24
    72f4:	10c000c3 	ldbu	r3,3(r2)
    72f8:	1806703a 	and	r3,r3,zero
    72fc:	1809883a 	mov	r4,r3
    7300:	2807883a 	mov	r3,r5
    7304:	20c6b03a 	or	r3,r4,r3
    7308:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    730c:	e0bfe303 	ldbu	r2,-116(fp)
    7310:	10013a1e 	bne	r2,zero,77fc <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    7314:	e0bfe817 	ldw	r2,-96(fp)
    7318:	10800017 	ldw	r2,0(r2)
    731c:	10800104 	addi	r2,r2,4
    7320:	10800017 	ldw	r2,0(r2)
    7324:	e0fffd03 	ldbu	r3,-12(fp)
    7328:	e13ffe03 	ldbu	r4,-8(fp)
    732c:	200f883a 	mov	r7,r4
    7330:	000d883a 	mov	r6,zero
    7334:	180b883a 	mov	r5,r3
    7338:	e13fe817 	ldw	r4,-96(fp)
    733c:	103ee83a 	callr	r2
    7340:	1007883a 	mov	r3,r2
    7344:	e0bffc17 	ldw	r2,-16(fp)
    7348:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    734c:	e0bffc17 	ldw	r2,-16(fp)
    7350:	10800303 	ldbu	r2,12(r2)
    7354:	10803fcc 	andi	r2,r2,255
    7358:	1000021e 	bne	r2,zero,7364 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    735c:	00bff504 	movi	r2,-44
    7360:	00013806 	br	7844 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    7364:	e0bfe517 	ldw	r2,-108(fp)
    7368:	10c001c3 	ldbu	r3,7(r2)
    736c:	e0bffc17 	ldw	r2,-16(fp)
    7370:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    7374:	e0bffc17 	ldw	r2,-16(fp)
    7378:	10c00217 	ldw	r3,8(r2)
    737c:	e0bffc17 	ldw	r2,-16(fp)
    7380:	10800303 	ldbu	r2,12(r2)
    7384:	10803fcc 	andi	r2,r2,255
    7388:	100f883a 	mov	r7,r2
    738c:	000d883a 	mov	r6,zero
    7390:	000b883a 	mov	r5,zero
    7394:	1809883a 	mov	r4,r3
    7398:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    739c:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    73a0:	e0bfe303 	ldbu	r2,-116(fp)
    73a4:	10001026 	beq	r2,zero,73e8 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    73a8:	e0bfe617 	ldw	r2,-104(fp)
    73ac:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    73b0:	e0bfe817 	ldw	r2,-96(fp)
    73b4:	10800017 	ldw	r2,0(r2)
    73b8:	10800204 	addi	r2,r2,8
    73bc:	10800017 	ldw	r2,0(r2)
    73c0:	e0fffc17 	ldw	r3,-16(fp)
    73c4:	18c00303 	ldbu	r3,12(r3)
    73c8:	18c03fcc 	andi	r3,r3,255
    73cc:	180b883a 	mov	r5,r3
    73d0:	e13fe817 	ldw	r4,-96(fp)
    73d4:	103ee83a 	callr	r2
                bAddress = 0;
    73d8:	e0bffc17 	ldw	r2,-16(fp)
    73dc:	10000305 	stb	zero,12(r2)
                return rcode;
    73e0:	e0bfe303 	ldbu	r2,-116(fp)
    73e4:	00011706 	br	7844 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    73e8:	e0bffc17 	ldw	r2,-16(fp)
    73ec:	10800303 	ldbu	r2,12(r2)
    73f0:	10803fcc 	andi	r2,r2,255
    73f4:	01402004 	movi	r5,128
    73f8:	1009883a 	mov	r4,r2
    73fc:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    7400:	e0bfe617 	ldw	r2,-104(fp)
    7404:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    7408:	e0bfe817 	ldw	r2,-96(fp)
    740c:	10800017 	ldw	r2,0(r2)
    7410:	10800017 	ldw	r2,0(r2)
    7414:	e0fffc17 	ldw	r3,-16(fp)
    7418:	18c00303 	ldbu	r3,12(r3)
    741c:	18c03fcc 	andi	r3,r3,255
    7420:	180b883a 	mov	r5,r3
    7424:	e13fe817 	ldw	r4,-96(fp)
    7428:	103ee83a 	callr	r2
    742c:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7430:	e0bfe617 	ldw	r2,-104(fp)
    7434:	1000021e 	bne	r2,zero,7440 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7438:	00bff584 	movi	r2,-42
    743c:	00010106 	br	7844 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    7440:	e0bfe617 	ldw	r2,-104(fp)
    7444:	e0ffff03 	ldbu	r3,-4(fp)
    7448:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    744c:	e0bffc17 	ldw	r2,-16(fp)
    7450:	10c00217 	ldw	r3,8(r2)
    7454:	e0bffc17 	ldw	r2,-16(fp)
    7458:	10800303 	ldbu	r2,12(r2)
    745c:	11003fcc 	andi	r4,r2,255
    7460:	00800484 	movi	r2,18
    7464:	117fffcc 	andi	r5,r2,65535
    7468:	e0bfe944 	addi	r2,fp,-91
    746c:	d8800015 	stw	r2,0(sp)
    7470:	280f883a 	mov	r7,r5
    7474:	000d883a 	mov	r6,zero
    7478:	200b883a 	mov	r5,r4
    747c:	1809883a 	mov	r4,r3
    7480:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    7484:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    7488:	e0bfe303 	ldbu	r2,-116(fp)
    748c:	1000dd1e 	bne	r2,zero,7804 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    7490:	e0bfe517 	ldw	r2,-108(fp)
    7494:	10c00203 	ldbu	r3,8(r2)
    7498:	10800243 	ldbu	r2,9(r2)
    749c:	1004923a 	slli	r2,r2,8
    74a0:	10c4b03a 	or	r2,r2,r3
    74a4:	1007883a 	mov	r3,r2
    74a8:	e0bffc17 	ldw	r2,-16(fp)
    74ac:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    74b0:	e0bfe517 	ldw	r2,-108(fp)
    74b4:	10c00283 	ldbu	r3,10(r2)
    74b8:	108002c3 	ldbu	r2,11(r2)
    74bc:	1004923a 	slli	r2,r2,8
    74c0:	10c4b03a 	or	r2,r2,r3
    74c4:	1007883a 	mov	r3,r2
    74c8:	e0bffc17 	ldw	r2,-16(fp)
    74cc:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    74d0:	e0bfe517 	ldw	r2,-108(fp)
    74d4:	10800443 	ldbu	r2,17(r2)
    74d8:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    74dc:	e0bffc17 	ldw	r2,-16(fp)
    74e0:	10c00217 	ldw	r3,8(r2)
    74e4:	e0bffc17 	ldw	r2,-16(fp)
    74e8:	10800303 	ldbu	r2,12(r2)
    74ec:	11003fcc 	andi	r4,r2,255
    74f0:	e0bffc17 	ldw	r2,-16(fp)
    74f4:	108004c4 	addi	r2,r2,19
    74f8:	100f883a 	mov	r7,r2
    74fc:	01800044 	movi	r6,1
    7500:	200b883a 	mov	r5,r4
    7504:	1809883a 	mov	r4,r3
    7508:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    750c:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    7510:	e0bfe303 	ldbu	r2,-116(fp)
    7514:	1000bd1e 	bne	r2,zero,780c <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    7518:	e0bffc17 	ldw	r2,-16(fp)
    751c:	1080040b 	ldhu	r2,16(r2)
    7520:	10bfffcc 	andi	r2,r2,65535
    7524:	01402004 	movi	r5,128
    7528:	1009883a 	mov	r4,r2
    752c:	0008df40 	call	8df4 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    7530:	e0bffc17 	ldw	r2,-16(fp)
    7534:	1080038b 	ldhu	r2,14(r2)
    7538:	10bfffcc 	andi	r2,r2,65535
    753c:	01402004 	movi	r5,128
    7540:	1009883a 	mov	r4,r2
    7544:	0008df40 	call	8df4 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    7548:	e0bfe903 	ldbu	r2,-92(fp)
    754c:	01402004 	movi	r5,128
    7550:	1009883a 	mov	r4,r2
    7554:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    7558:	e0bffc17 	ldw	r2,-16(fp)
    755c:	00c000c4 	movi	r3,3
    7560:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    7564:	e13ffc17 	ldw	r4,-16(fp)
    7568:	00078d00 	call	78d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    756c:	e03fe405 	stb	zero,-112(fp)
    7570:	e0ffe403 	ldbu	r3,-112(fp)
    7574:	e0bfe903 	ldbu	r2,-92(fp)
    7578:	18802a2e 	bgeu	r3,r2,7624 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    757c:	e0bffc17 	ldw	r2,-16(fp)
    7580:	10c00104 	addi	r3,r2,4
    7584:	e0bfee04 	addi	r2,fp,-72
    7588:	01800044 	movi	r6,1
    758c:	180b883a 	mov	r5,r3
    7590:	1009883a 	mov	r4,r2
    7594:	00083d00 	call	83d0 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    7598:	e0bffc17 	ldw	r2,-16(fp)
    759c:	10c00217 	ldw	r3,8(r2)
    75a0:	e0bffc17 	ldw	r2,-16(fp)
    75a4:	10800303 	ldbu	r2,12(r2)
    75a8:	11003fcc 	andi	r4,r2,255
    75ac:	e17fe403 	ldbu	r5,-112(fp)
    75b0:	e0bfee04 	addi	r2,fp,-72
    75b4:	d8800015 	stw	r2,0(sp)
    75b8:	280f883a 	mov	r7,r5
    75bc:	000d883a 	mov	r6,zero
    75c0:	200b883a 	mov	r5,r4
    75c4:	1809883a 	mov	r4,r3
    75c8:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    75cc:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    75d0:	e0bfe303 	ldbu	r2,-116(fp)
    75d4:	10008f1e 	bne	r2,zero,7814 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    75d8:	e0bfee04 	addi	r2,fp,-72
    75dc:	1009883a 	mov	r4,r2
    75e0:	0008cdc0 	call	8cdc <_ZN14MidiDescParser9getNumEPsEv>
    75e4:	1007883a 	mov	r3,r2
    75e8:	e0bfe383 	ldbu	r2,-114(fp)
    75ec:	10c5883a 	add	r2,r2,r3
    75f0:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    75f4:	e0bfe383 	ldbu	r2,-114(fp)
    75f8:	108000b0 	cmpltui	r2,r2,2
    75fc:	1000051e 	bne	r2,zero,7614 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    7600:	e0bfee04 	addi	r2,fp,-72
    7604:	1009883a 	mov	r4,r2
    7608:	0008cb40 	call	8cb4 <_ZN14MidiDescParser12getConfValueEv>
    760c:	e0bfe345 	stb	r2,-115(fp)
    7610:	00000406 	br	7624 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    7614:	e0bfe403 	ldbu	r2,-112(fp)
    7618:	10800044 	addi	r2,r2,1
    761c:	e0bfe405 	stb	r2,-112(fp)
    7620:	003fd306 	br	7570 <__alt_data_end+0xfc007570>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    7624:	e0bfe383 	ldbu	r2,-114(fp)
    7628:	01402004 	movi	r5,128
    762c:	1009883a 	mov	r4,r2
    7630:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    7634:	e0bfe383 	ldbu	r2,-114(fp)
    7638:	10800058 	cmpnei	r2,r2,1
    763c:	1000321e 	bne	r2,zero,7708 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7640:	e03fe445 	stb	zero,-111(fp)
    7644:	e0ffe443 	ldbu	r3,-111(fp)
    7648:	e0bfe903 	ldbu	r2,-92(fp)
    764c:	18802a2e 	bgeu	r3,r2,76f8 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    7650:	e0bffc17 	ldw	r2,-16(fp)
    7654:	10c00104 	addi	r3,r2,4
    7658:	e0bfee04 	addi	r2,fp,-72
    765c:	000d883a 	mov	r6,zero
    7660:	180b883a 	mov	r5,r3
    7664:	1009883a 	mov	r4,r2
    7668:	00083d00 	call	83d0 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    766c:	e0bffc17 	ldw	r2,-16(fp)
    7670:	10c00217 	ldw	r3,8(r2)
    7674:	e0bffc17 	ldw	r2,-16(fp)
    7678:	10800303 	ldbu	r2,12(r2)
    767c:	11003fcc 	andi	r4,r2,255
    7680:	e17fe443 	ldbu	r5,-111(fp)
    7684:	e0bfee04 	addi	r2,fp,-72
    7688:	d8800015 	stw	r2,0(sp)
    768c:	280f883a 	mov	r7,r5
    7690:	000d883a 	mov	r6,zero
    7694:	200b883a 	mov	r5,r4
    7698:	1809883a 	mov	r4,r3
    769c:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    76a0:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    76a4:	e0bfe303 	ldbu	r2,-116(fp)
    76a8:	10005c1e 	bne	r2,zero,781c <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    76ac:	e0bfee04 	addi	r2,fp,-72
    76b0:	1009883a 	mov	r4,r2
    76b4:	0008cdc0 	call	8cdc <_ZN14MidiDescParser9getNumEPsEv>
    76b8:	1007883a 	mov	r3,r2
    76bc:	e0bfe383 	ldbu	r2,-114(fp)
    76c0:	10c5883a 	add	r2,r2,r3
    76c4:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    76c8:	e0bfe383 	ldbu	r2,-114(fp)
    76cc:	108000b0 	cmpltui	r2,r2,2
    76d0:	1000051e 	bne	r2,zero,76e8 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    76d4:	e0bfee04 	addi	r2,fp,-72
    76d8:	1009883a 	mov	r4,r2
    76dc:	0008cb40 	call	8cb4 <_ZN14MidiDescParser12getConfValueEv>
    76e0:	e0bfe345 	stb	r2,-115(fp)
    76e4:	00000406 	br	76f8 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    76e8:	e0bfe443 	ldbu	r2,-111(fp)
    76ec:	10800044 	addi	r2,r2,1
    76f0:	e0bfe445 	stb	r2,-111(fp)
    76f4:	003fd306 	br	7644 <__alt_data_end+0xfc007644>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    76f8:	e0bfe383 	ldbu	r2,-114(fp)
    76fc:	01402004 	movi	r5,128
    7700:	1009883a 	mov	r4,r2
    7704:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    7708:	e0bfe383 	ldbu	r2,-114(fp)
    770c:	108000a8 	cmpgeui	r2,r2,2
    7710:	1000031e 	bne	r2,zero,7720 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    7714:	00bfffc4 	movi	r2,-1
    7718:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    771c:	00004206 	br	7828 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    7720:	e0bffc17 	ldw	r2,-16(fp)
    7724:	10c00217 	ldw	r3,8(r2)
    7728:	e0bffc17 	ldw	r2,-16(fp)
    772c:	10800303 	ldbu	r2,12(r2)
    7730:	11003fcc 	andi	r4,r2,255
    7734:	e0bffc17 	ldw	r2,-16(fp)
    7738:	108004c4 	addi	r2,r2,19
    773c:	100f883a 	mov	r7,r2
    7740:	018000c4 	movi	r6,3
    7744:	200b883a 	mov	r5,r4
    7748:	1809883a 	mov	r4,r3
    774c:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7750:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    7754:	e0bfe343 	ldbu	r2,-115(fp)
    7758:	01402004 	movi	r5,128
    775c:	1009883a 	mov	r4,r2
    7760:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    7764:	e0bffc17 	ldw	r2,-16(fp)
    7768:	10800583 	ldbu	r2,22(r2)
    776c:	10bfe004 	addi	r2,r2,-128
    7770:	10803fcc 	andi	r2,r2,255
    7774:	01402004 	movi	r5,128
    7778:	1009883a 	mov	r4,r2
    777c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    7780:	e0bffc17 	ldw	r2,-16(fp)
    7784:	10800643 	ldbu	r2,25(r2)
    7788:	10803fcc 	andi	r2,r2,255
    778c:	01402004 	movi	r5,128
    7790:	1009883a 	mov	r4,r2
    7794:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    7798:	e0bffc17 	ldw	r2,-16(fp)
    779c:	10c00217 	ldw	r3,8(r2)
    77a0:	e0bffc17 	ldw	r2,-16(fp)
    77a4:	10800303 	ldbu	r2,12(r2)
    77a8:	10803fcc 	andi	r2,r2,255
    77ac:	e13fe343 	ldbu	r4,-115(fp)
    77b0:	200f883a 	mov	r7,r4
    77b4:	000d883a 	mov	r6,zero
    77b8:	100b883a 	mov	r5,r2
    77bc:	1809883a 	mov	r4,r3
    77c0:	0002b940 	call	2b94 <_ZN3USB7setConfEhhh>
    77c4:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    77c8:	e0bfe303 	ldbu	r2,-116(fp)
    77cc:	1000151e 	bne	r2,zero,7824 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    77d0:	e0bffc17 	ldw	r2,-16(fp)
    77d4:	10801817 	ldw	r2,96(r2)
    77d8:	10000326 	beq	r2,zero,77e8 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    77dc:	e0bffc17 	ldw	r2,-16(fp)
    77e0:	10801817 	ldw	r2,96(r2)
    77e4:	103ee83a 	callr	r2

        bPollEnable = true;
    77e8:	e0bffc17 	ldw	r2,-16(fp)
    77ec:	00c00044 	movi	r3,1
    77f0:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    77f4:	0005883a 	mov	r2,zero
    77f8:	00001206 	br	7844 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    77fc:	0001883a 	nop
    7800:	00000906 	br	7828 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    7804:	0001883a 	nop
    7808:	00000706 	br	7828 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    780c:	0001883a 	nop
    7810:	00000506 	br	7828 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    7814:	0001883a 	nop
    7818:	00000306 	br	7828 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    781c:	0001883a 	nop
    7820:	00000106 	br	7828 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    7824:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    7828:	e0bffc17 	ldw	r2,-16(fp)
    782c:	10800017 	ldw	r2,0(r2)
    7830:	10800204 	addi	r2,r2,8
    7834:	10800017 	ldw	r2,0(r2)
    7838:	e13ffc17 	ldw	r4,-16(fp)
    783c:	103ee83a 	callr	r2
        return rcode;
    7840:	e0bfe303 	ldbu	r2,-116(fp)
}
    7844:	e037883a 	mov	sp,fp
    7848:	dfc00117 	ldw	ra,4(sp)
    784c:	df000017 	ldw	fp,0(sp)
    7850:	dec00204 	addi	sp,sp,8
    7854:	f800283a 	ret

00007858 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    7858:	defffd04 	addi	sp,sp,-12
    785c:	dfc00215 	stw	ra,8(sp)
    7860:	df000115 	stw	fp,4(sp)
    7864:	df000104 	addi	fp,sp,4
    7868:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    786c:	e0bfff17 	ldw	r2,-4(fp)
    7870:	10800217 	ldw	r2,8(r2)
    7874:	1009883a 	mov	r4,r2
    7878:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    787c:	1009883a 	mov	r4,r2
    7880:	20800017 	ldw	r2,0(r4)
    7884:	10800204 	addi	r2,r2,8
    7888:	10800017 	ldw	r2,0(r2)
    788c:	e0ffff17 	ldw	r3,-4(fp)
    7890:	18c00303 	ldbu	r3,12(r3)
    7894:	18c03fcc 	andi	r3,r3,255
    7898:	180b883a 	mov	r5,r3
    789c:	103ee83a 	callr	r2
        bAddress     = 0;
    78a0:	e0bfff17 	ldw	r2,-4(fp)
    78a4:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    78a8:	e0bfff17 	ldw	r2,-4(fp)
    78ac:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    78b0:	e0bfff17 	ldw	r2,-4(fp)
    78b4:	10001705 	stb	zero,92(r2)
        return 0;
    78b8:	0005883a 	mov	r2,zero
}
    78bc:	e037883a 	mov	sp,fp
    78c0:	dfc00117 	ldw	ra,4(sp)
    78c4:	df000017 	ldw	fp,0(sp)
    78c8:	dec00204 	addi	sp,sp,8
    78cc:	f800283a 	ret

000078d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    78d0:	defffe04 	addi	sp,sp,-8
    78d4:	df000115 	stw	fp,4(sp)
    78d8:	df000104 	addi	fp,sp,4
    78dc:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    78e0:	e0bfff17 	ldw	r2,-4(fp)
    78e4:	1080040b 	ldhu	r2,16(r2)
    78e8:	10bfffcc 	andi	r2,r2,65535
    78ec:	10848d58 	cmpnei	r2,r2,4661
    78f0:	1000351e 	bne	r2,zero,79c8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    78f4:	e0bfff17 	ldw	r2,-4(fp)
    78f8:	1080038b 	ldhu	r2,14(r2)
    78fc:	10bfffcc 	andi	r2,r2,65535
    7900:	10800820 	cmpeqi	r2,r2,32
    7904:	10000f1e 	bne	r2,zero,7944 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7908:	e0bfff17 	ldw	r2,-4(fp)
    790c:	1080038b 	ldhu	r2,14(r2)
    7910:	10bfffcc 	andi	r2,r2,65535
    7914:	10800da0 	cmpeqi	r2,r2,54
    7918:	10000a1e 	bne	r2,zero,7944 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    791c:	e0bfff17 	ldw	r2,-4(fp)
    7920:	1080038b 	ldhu	r2,14(r2)
    7924:	10bfffcc 	andi	r2,r2,65535
    7928:	10801460 	cmpeqi	r2,r2,81
    792c:	1000051e 	bne	r2,zero,7944 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7930:	e0bfff17 	ldw	r2,-4(fp)
    7934:	1080038b 	ldhu	r2,14(r2)
    7938:	10bfffcc 	andi	r2,r2,65535
    793c:	10801a58 	cmpnei	r2,r2,105
    7940:	1000041e 	bne	r2,zero,7954 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    7944:	e0bfff17 	ldw	r2,-4(fp)
    7948:	00c00084 	movi	r3,2
    794c:	10c00485 	stb	r3,18(r2)
                        return;
    7950:	00001d06 	br	79c8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    7954:	e0bfff17 	ldw	r2,-4(fp)
    7958:	1080038b 	ldhu	r2,14(r2)
    795c:	10bfffcc 	andi	r2,r2,65535
    7960:	10800c30 	cmpltui	r2,r2,48
    7964:	1000051e 	bne	r2,zero,797c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    7968:	e0bfff17 	ldw	r2,-4(fp)
    796c:	1080038b 	ldhu	r2,14(r2)
    7970:	10bfffcc 	andi	r2,r2,65535
    7974:	10800cf0 	cmpltui	r2,r2,51
    7978:	10000f1e 	bne	r2,zero,79b8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    797c:	e0bfff17 	ldw	r2,-4(fp)
    7980:	1080038b 	ldhu	r2,14(r2)
    7984:	10bfffcc 	andi	r2,r2,65535
    7988:	10800d60 	cmpeqi	r2,r2,53
    798c:	10000a1e 	bne	r2,zero,79b8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7990:	e0bfff17 	ldw	r2,-4(fp)
    7994:	1080038b 	ldhu	r2,14(r2)
    7998:	10bfffcc 	andi	r2,r2,65535
    799c:	10801ef0 	cmpltui	r2,r2,123
    79a0:	1000091e 	bne	r2,zero,79c8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    79a4:	e0bfff17 	ldw	r2,-4(fp)
    79a8:	1080038b 	ldhu	r2,14(r2)
    79ac:	10bfffcc 	andi	r2,r2,65535
    79b0:	10801fa8 	cmpgeui	r2,r2,126
    79b4:	1000041e 	bne	r2,zero,79c8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    79b8:	e0bfff17 	ldw	r2,-4(fp)
    79bc:	00c00084 	movi	r3,2
    79c0:	10c00485 	stb	r3,18(r2)
                        return;
    79c4:	0001883a 	nop
                }
        }
}
    79c8:	e037883a 	mov	sp,fp
    79cc:	df000017 	ldw	fp,0(sp)
    79d0:	dec00104 	addi	sp,sp,4
    79d4:	f800283a 	ret

000079d8 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    79d8:	defff804 	addi	sp,sp,-32
    79dc:	dfc00715 	stw	ra,28(sp)
    79e0:	df000615 	stw	fp,24(sp)
    79e4:	df000604 	addi	fp,sp,24
    79e8:	e13ffd15 	stw	r4,-12(fp)
    79ec:	e17ffe15 	stw	r5,-8(fp)
    79f0:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    79f4:	e0bffd17 	ldw	r2,-12(fp)
    79f8:	108005c3 	ldbu	r2,23(r2)
    79fc:	10c03fcc 	andi	r3,r2,255
    7a00:	e0bffe17 	ldw	r2,-8(fp)
    7a04:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7a08:	e0bffd17 	ldw	r2,-12(fp)
    7a0c:	10c00217 	ldw	r3,8(r2)
    7a10:	e0bffd17 	ldw	r2,-12(fp)
    7a14:	10800303 	ldbu	r2,12(r2)
    7a18:	11003fcc 	andi	r4,r2,255
    7a1c:	e0bffd17 	ldw	r2,-12(fp)
    7a20:	10800583 	ldbu	r2,22(r2)
    7a24:	11403fcc 	andi	r5,r2,255
    7a28:	d8000115 	stw	zero,4(sp)
    7a2c:	e0bfff17 	ldw	r2,-4(fp)
    7a30:	d8800015 	stw	r2,0(sp)
    7a34:	e1fffe17 	ldw	r7,-8(fp)
    7a38:	280d883a 	mov	r6,r5
    7a3c:	200b883a 	mov	r5,r4
    7a40:	1809883a 	mov	r4,r3
    7a44:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    7a48:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    7a4c:	e0bffe17 	ldw	r2,-8(fp)
    7a50:	1080000b 	ldhu	r2,0(r2)
    7a54:	10bfffcc 	andi	r2,r2,65535
    7a58:	10800f28 	cmpgeui	r2,r2,60
    7a5c:	10000d1e 	bne	r2,zero,7a94 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    7a60:	e0bffe17 	ldw	r2,-8(fp)
    7a64:	1080000b 	ldhu	r2,0(r2)
    7a68:	10bfffcc 	andi	r2,r2,65535
    7a6c:	e0ffff17 	ldw	r3,-4(fp)
    7a70:	1885883a 	add	r2,r3,r2
    7a74:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7a78:	e0bffe17 	ldw	r2,-8(fp)
    7a7c:	1080000b 	ldhu	r2,0(r2)
    7a80:	10bfffcc 	andi	r2,r2,65535
    7a84:	10800044 	addi	r2,r2,1
    7a88:	e0ffff17 	ldw	r3,-4(fp)
    7a8c:	1885883a 	add	r2,r3,r2
    7a90:	10000005 	stb	zero,0(r2)
        }
        return r;
    7a94:	e0bffc03 	ldbu	r2,-16(fp)
}
    7a98:	e037883a 	mov	sp,fp
    7a9c:	dfc00117 	ldw	ra,4(sp)
    7aa0:	df000017 	ldw	fp,0(sp)
    7aa4:	dec00204 	addi	sp,sp,8
    7aa8:	f800283a 	ret

00007aac <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7aac:	defff904 	addi	sp,sp,-28
    7ab0:	dfc00615 	stw	ra,24(sp)
    7ab4:	df000515 	stw	fp,20(sp)
    7ab8:	df000504 	addi	fp,sp,20
    7abc:	e13ffd15 	stw	r4,-12(fp)
    7ac0:	e17ffe15 	stw	r5,-8(fp)
    7ac4:	3005883a 	mov	r2,r6
    7ac8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7acc:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7ad0:	e0bffd17 	ldw	r2,-12(fp)
    7ad4:	10800343 	ldbu	r2,13(r2)
    7ad8:	1080005c 	xori	r2,r2,1
    7adc:	10803fcc 	andi	r2,r2,255
    7ae0:	10000226 	beq	r2,zero,7aec <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7ae4:	0005883a 	mov	r2,zero
    7ae8:	00008506 	br	7d00 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7aec:	e0bffd17 	ldw	r2,-12(fp)
    7af0:	10801703 	ldbu	r2,92(r2)
    7af4:	10803fcc 	andi	r2,r2,255
    7af8:	10001826 	beq	r2,zero,7b5c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7afc:	e0bffd17 	ldw	r2,-12(fp)
    7b00:	10801703 	ldbu	r2,92(r2)
    7b04:	10803fcc 	andi	r2,r2,255
    7b08:	10801028 	cmpgeui	r2,r2,64
    7b0c:	1000131e 	bne	r2,zero,7b5c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7b10:	e0bffd17 	ldw	r2,-12(fp)
    7b14:	10801703 	ldbu	r2,92(r2)
    7b18:	10803fcc 	andi	r2,r2,255
    7b1c:	e0fffd17 	ldw	r3,-12(fp)
    7b20:	1885883a 	add	r2,r3,r2
    7b24:	10800704 	addi	r2,r2,28
    7b28:	10800003 	ldbu	r2,0(r2)
    7b2c:	10803fcc 	andi	r2,r2,255
    7b30:	10002a1e 	bne	r2,zero,7bdc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7b34:	e0bffd17 	ldw	r2,-12(fp)
    7b38:	10801703 	ldbu	r2,92(r2)
    7b3c:	10803fcc 	andi	r2,r2,255
    7b40:	10800044 	addi	r2,r2,1
    7b44:	e0fffd17 	ldw	r3,-12(fp)
    7b48:	1885883a 	add	r2,r3,r2
    7b4c:	10800704 	addi	r2,r2,28
    7b50:	10800003 	ldbu	r2,0(r2)
    7b54:	10803fcc 	andi	r2,r2,255
    7b58:	1000201e 	bne	r2,zero,7bdc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7b5c:	e0bffd17 	ldw	r2,-12(fp)
    7b60:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7b64:	e0bffd17 	ldw	r2,-12(fp)
    7b68:	10c00704 	addi	r3,r2,28
    7b6c:	e0bffc04 	addi	r2,fp,-16
    7b70:	180d883a 	mov	r6,r3
    7b74:	100b883a 	mov	r5,r2
    7b78:	e13ffd17 	ldw	r4,-12(fp)
    7b7c:	00079d80 	call	79d8 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7b80:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7b84:	e0bffb03 	ldbu	r2,-20(fp)
    7b88:	10000226 	beq	r2,zero,7b94 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7b8c:	0005883a 	mov	r2,zero
    7b90:	00005b06 	br	7d00 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7b94:	e0bffd17 	ldw	r2,-12(fp)
    7b98:	10800703 	ldbu	r2,28(r2)
    7b9c:	10803fcc 	andi	r2,r2,255
    7ba0:	10000e1e 	bne	r2,zero,7bdc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7ba4:	e0bffd17 	ldw	r2,-12(fp)
    7ba8:	10800743 	ldbu	r2,29(r2)
    7bac:	10803fcc 	andi	r2,r2,255
    7bb0:	10000a1e 	bne	r2,zero,7bdc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7bb4:	e0bffd17 	ldw	r2,-12(fp)
    7bb8:	10800783 	ldbu	r2,30(r2)
    7bbc:	10803fcc 	andi	r2,r2,255
    7bc0:	1000061e 	bne	r2,zero,7bdc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7bc4:	e0bffd17 	ldw	r2,-12(fp)
    7bc8:	108007c3 	ldbu	r2,31(r2)
    7bcc:	10803fcc 	andi	r2,r2,255
    7bd0:	1000021e 	bne	r2,zero,7bdc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    7bd4:	0005883a 	mov	r2,zero
    7bd8:	00004906 	br	7d00 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    7bdc:	e0bffd17 	ldw	r2,-12(fp)
    7be0:	10801703 	ldbu	r2,92(r2)
    7be4:	10803fcc 	andi	r2,r2,255
    7be8:	e0fffd17 	ldw	r3,-12(fp)
    7bec:	1885883a 	add	r2,r3,r2
    7bf0:	10800704 	addi	r2,r2,28
    7bf4:	10800003 	ldbu	r2,0(r2)
    7bf8:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    7bfc:	e0bfff03 	ldbu	r2,-4(fp)
    7c00:	10000526 	beq	r2,zero,7c18 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    7c04:	e0bffe17 	ldw	r2,-8(fp)
    7c08:	10c00044 	addi	r3,r2,1
    7c0c:	e0fffe15 	stw	r3,-8(fp)
    7c10:	e0fffb43 	ldbu	r3,-19(fp)
    7c14:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    7c18:	e0bffd17 	ldw	r2,-12(fp)
    7c1c:	10801703 	ldbu	r2,92(r2)
    7c20:	10800044 	addi	r2,r2,1
    7c24:	1007883a 	mov	r3,r2
    7c28:	e0bffd17 	ldw	r2,-12(fp)
    7c2c:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    7c30:	e0bffe17 	ldw	r2,-8(fp)
    7c34:	10c00044 	addi	r3,r2,1
    7c38:	e0fffe15 	stw	r3,-8(fp)
    7c3c:	e0fffd17 	ldw	r3,-12(fp)
    7c40:	18c01703 	ldbu	r3,92(r3)
    7c44:	19000044 	addi	r4,r3,1
    7c48:	200b883a 	mov	r5,r4
    7c4c:	e13ffd17 	ldw	r4,-12(fp)
    7c50:	21401705 	stb	r5,92(r4)
    7c54:	18c03fcc 	andi	r3,r3,255
    7c58:	e13ffd17 	ldw	r4,-12(fp)
    7c5c:	20c7883a 	add	r3,r4,r3
    7c60:	18c00704 	addi	r3,r3,28
    7c64:	18c00003 	ldbu	r3,0(r3)
    7c68:	e0fffb85 	stb	r3,-18(fp)
    7c6c:	e0fffb83 	ldbu	r3,-18(fp)
    7c70:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7c74:	e0bffe17 	ldw	r2,-8(fp)
    7c78:	10c00044 	addi	r3,r2,1
    7c7c:	e0fffe15 	stw	r3,-8(fp)
    7c80:	e0fffd17 	ldw	r3,-12(fp)
    7c84:	18c01703 	ldbu	r3,92(r3)
    7c88:	19000044 	addi	r4,r3,1
    7c8c:	200b883a 	mov	r5,r4
    7c90:	e13ffd17 	ldw	r4,-12(fp)
    7c94:	21401705 	stb	r5,92(r4)
    7c98:	18c03fcc 	andi	r3,r3,255
    7c9c:	e13ffd17 	ldw	r4,-12(fp)
    7ca0:	20c7883a 	add	r3,r4,r3
    7ca4:	18c00704 	addi	r3,r3,28
    7ca8:	18c00003 	ldbu	r3,0(r3)
    7cac:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7cb0:	e0bffe17 	ldw	r2,-8(fp)
    7cb4:	10c00044 	addi	r3,r2,1
    7cb8:	e0fffe15 	stw	r3,-8(fp)
    7cbc:	e0fffd17 	ldw	r3,-12(fp)
    7cc0:	18c01703 	ldbu	r3,92(r3)
    7cc4:	19000044 	addi	r4,r3,1
    7cc8:	200b883a 	mov	r5,r4
    7ccc:	e13ffd17 	ldw	r4,-12(fp)
    7cd0:	21401705 	stb	r5,92(r4)
    7cd4:	18c03fcc 	andi	r3,r3,255
    7cd8:	e13ffd17 	ldw	r4,-12(fp)
    7cdc:	20c7883a 	add	r3,r4,r3
    7ce0:	18c00704 	addi	r3,r3,28
    7ce4:	18c00003 	ldbu	r3,0(r3)
    7ce8:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    7cec:	e0bffb43 	ldbu	r2,-19(fp)
    7cf0:	108003cc 	andi	r2,r2,15
    7cf4:	100b883a 	mov	r5,r2
    7cf8:	e13ffd17 	ldw	r4,-12(fp)
    7cfc:	0008d5c0 	call	8d5c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7d00:	e037883a 	mov	sp,fp
    7d04:	dfc00117 	ldw	ra,4(sp)
    7d08:	df000017 	ldw	fp,0(sp)
    7d0c:	dec00204 	addi	sp,sp,8
    7d10:	f800283a 	ret

00007d14 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    7d14:	defff804 	addi	sp,sp,-32
    7d18:	dfc00715 	stw	ra,28(sp)
    7d1c:	df000615 	stw	fp,24(sp)
    7d20:	df000604 	addi	fp,sp,24
    7d24:	e13ffd15 	stw	r4,-12(fp)
    7d28:	e17ffe15 	stw	r5,-8(fp)
    7d2c:	3005883a 	mov	r2,r6
    7d30:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    7d34:	e0bffe17 	ldw	r2,-8(fp)
    7d38:	10800003 	ldbu	r2,0(r2)
    7d3c:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    7d40:	e0bffb03 	ldbu	r2,-20(fp)
    7d44:	100b883a 	mov	r5,r2
    7d48:	e13ffd17 	ldw	r4,-12(fp)
    7d4c:	0008d040 	call	8d04 <_ZN9USBH_MIDI17convertStatus2CinEh>
    7d50:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    7d54:	e0bffb03 	ldbu	r2,-20(fp)
    7d58:	10803c18 	cmpnei	r2,r2,240
    7d5c:	10000b1e 	bne	r2,zero,7d8c <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    7d60:	e17ffe17 	ldw	r5,-8(fp)
    7d64:	e13ffd17 	ldw	r4,-12(fp)
    7d68:	0007ed40 	call	7ed4 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    7d6c:	10bfffcc 	andi	r2,r2,65535
    7d70:	e0ffff03 	ldbu	r3,-4(fp)
    7d74:	180f883a 	mov	r7,r3
    7d78:	100d883a 	mov	r6,r2
    7d7c:	e17ffe17 	ldw	r5,-8(fp)
    7d80:	e13ffd17 	ldw	r4,-12(fp)
    7d84:	0007f5c0 	call	7f5c <_ZN9USBH_MIDI9SendSysExEPhth>
    7d88:	00003406 	br	7e5c <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    7d8c:	e0bfff03 	ldbu	r2,-4(fp)
    7d90:	1004913a 	slli	r2,r2,4
    7d94:	1007883a 	mov	r3,r2
    7d98:	e0bffb43 	ldbu	r2,-19(fp)
    7d9c:	1884b03a 	or	r2,r3,r2
    7da0:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    7da4:	e0bffe17 	ldw	r2,-8(fp)
    7da8:	10800003 	ldbu	r2,0(r2)
    7dac:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    7db0:	e0bffb43 	ldbu	r2,-19(fp)
    7db4:	100b883a 	mov	r5,r2
    7db8:	e13ffd17 	ldw	r4,-12(fp)
    7dbc:	0008d5c0 	call	8d5c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    7dc0:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    7dc4:	e0bffb83 	ldbu	r2,-18(fp)
    7dc8:	10c000a0 	cmpeqi	r3,r2,2
    7dcc:	18000c1e 	bne	r3,zero,7e00 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    7dd0:	10c000e0 	cmpeqi	r3,r2,3
    7dd4:	1800031e 	bne	r3,zero,7de4 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    7dd8:	10800060 	cmpeqi	r2,r2,1
    7ddc:	10000d1e 	bne	r2,zero,7e14 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    7de0:	00000f06 	br	7e20 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    7de4:	e0bffe17 	ldw	r2,-8(fp)
    7de8:	10800043 	ldbu	r2,1(r2)
    7dec:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    7df0:	e0bffe17 	ldw	r2,-8(fp)
    7df4:	10800083 	ldbu	r2,2(r2)
    7df8:	e0bffc85 	stb	r2,-14(fp)
                break;
    7dfc:	00000806 	br	7e20 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    7e00:	e0bffe17 	ldw	r2,-8(fp)
    7e04:	10800043 	ldbu	r2,1(r2)
    7e08:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    7e0c:	e03ffc85 	stb	zero,-14(fp)
                break;
    7e10:	00000306 	br	7e20 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    7e14:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    7e18:	e03ffc85 	stb	zero,-14(fp)
                break;
    7e1c:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    7e20:	e0bffd17 	ldw	r2,-12(fp)
    7e24:	10c00217 	ldw	r3,8(r2)
    7e28:	e0bffd17 	ldw	r2,-12(fp)
    7e2c:	10800303 	ldbu	r2,12(r2)
    7e30:	11003fcc 	andi	r4,r2,255
    7e34:	e0bffd17 	ldw	r2,-12(fp)
    7e38:	10800643 	ldbu	r2,25(r2)
    7e3c:	11403fcc 	andi	r5,r2,255
    7e40:	e0bffbc4 	addi	r2,fp,-17
    7e44:	d8800015 	stw	r2,0(sp)
    7e48:	01c00104 	movi	r7,4
    7e4c:	280d883a 	mov	r6,r5
    7e50:	200b883a 	mov	r5,r4
    7e54:	1809883a 	mov	r4,r3
    7e58:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    7e5c:	e037883a 	mov	sp,fp
    7e60:	dfc00117 	ldw	ra,4(sp)
    7e64:	df000017 	ldw	fp,0(sp)
    7e68:	dec00204 	addi	sp,sp,8
    7e6c:	f800283a 	ret

00007e70 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    7e70:	defffb04 	addi	sp,sp,-20
    7e74:	dfc00415 	stw	ra,16(sp)
    7e78:	df000315 	stw	fp,12(sp)
    7e7c:	df000304 	addi	fp,sp,12
    7e80:	e13ffd15 	stw	r4,-12(fp)
    7e84:	2807883a 	mov	r3,r5
    7e88:	3005883a 	mov	r2,r6
    7e8c:	e0fffe05 	stb	r3,-8(fp)
    7e90:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    7e94:	e0bfff03 	ldbu	r2,-4(fp)
    7e98:	1000051e 	bne	r2,zero,7eb0 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    7e9c:	e0bffe03 	ldbu	r2,-8(fp)
    7ea0:	100b883a 	mov	r5,r2
    7ea4:	e13ffd17 	ldw	r4,-12(fp)
    7ea8:	0008d040 	call	8d04 <_ZN9USBH_MIDI17convertStatus2CinEh>
    7eac:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    7eb0:	e0bfff03 	ldbu	r2,-4(fp)
    7eb4:	100b883a 	mov	r5,r2
    7eb8:	e13ffd17 	ldw	r4,-12(fp)
    7ebc:	0008d5c0 	call	8d5c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7ec0:	e037883a 	mov	sp,fp
    7ec4:	dfc00117 	ldw	ra,4(sp)
    7ec8:	df000017 	ldw	fp,0(sp)
    7ecc:	dec00204 	addi	sp,sp,8
    7ed0:	f800283a 	ret

00007ed4 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    7ed4:	defffc04 	addi	sp,sp,-16
    7ed8:	df000315 	stw	fp,12(sp)
    7edc:	df000304 	addi	fp,sp,12
    7ee0:	e13ffe15 	stw	r4,-8(fp)
    7ee4:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    7ee8:	00800044 	movi	r2,1
    7eec:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    7ef0:	e0bfff17 	ldw	r2,-4(fp)
    7ef4:	10800003 	ldbu	r2,0(r2)
    7ef8:	10803fcc 	andi	r2,r2,255
    7efc:	10803c20 	cmpeqi	r2,r2,240
    7f00:	1000021e 	bne	r2,zero,7f0c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    7f04:	0005883a 	mov	r2,zero
    7f08:	00001006 	br	7f4c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    7f0c:	e0bfff17 	ldw	r2,-4(fp)
    7f10:	10800003 	ldbu	r2,0(r2)
    7f14:	10803fcc 	andi	r2,r2,255
    7f18:	10803de0 	cmpeqi	r2,r2,247
    7f1c:	10000a1e 	bne	r2,zero,7f48 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    7f20:	e0bfff17 	ldw	r2,-4(fp)
    7f24:	10800044 	addi	r2,r2,1
    7f28:	e0bfff15 	stw	r2,-4(fp)
                c++;
    7f2c:	e0bffd0b 	ldhu	r2,-12(fp)
    7f30:	10800044 	addi	r2,r2,1
    7f34:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    7f38:	e0bffd0b 	ldhu	r2,-12(fp)
    7f3c:	10804070 	cmpltui	r2,r2,257
    7f40:	103ff21e 	bne	r2,zero,7f0c <__alt_data_end+0xfc007f0c>
                        c = 0;
    7f44:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    7f48:	e0bffd0b 	ldhu	r2,-12(fp)
}
    7f4c:	e037883a 	mov	sp,fp
    7f50:	df000017 	ldw	fp,0(sp)
    7f54:	dec00104 	addi	sp,sp,4
    7f58:	f800283a 	ret

00007f5c <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    7f5c:	deffe704 	addi	sp,sp,-100
    7f60:	dfc01815 	stw	ra,96(sp)
    7f64:	df001715 	stw	fp,92(sp)
    7f68:	df001704 	addi	fp,sp,92
    7f6c:	e13ffc15 	stw	r4,-16(fp)
    7f70:	e17ffd15 	stw	r5,-12(fp)
    7f74:	3007883a 	mov	r3,r6
    7f78:	3805883a 	mov	r2,r7
    7f7c:	e0fffe0d 	sth	r3,-8(fp)
    7f80:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    7f84:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    7f88:	e0bffe0b 	ldhu	r2,-8(fp)
    7f8c:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    7f90:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    7f94:	e0bffc17 	ldw	r2,-16(fp)
    7f98:	108005c3 	ldbu	r2,23(r2)
    7f9c:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    7fa0:	e0bffe0b 	ldhu	r2,-8(fp)
    7fa4:	01402004 	movi	r5,128
    7fa8:	1009883a 	mov	r4,r2
    7fac:	0008df40 	call	8df4 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    7fb0:	e0bfea8b 	ldhu	r2,-86(fp)
    7fb4:	1000b026 	beq	r2,zero,8278 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    7fb8:	e0bfeb03 	ldbu	r2,-84(fp)
    7fbc:	e0ffff03 	ldbu	r3,-4(fp)
    7fc0:	1806913a 	slli	r3,r3,4
    7fc4:	18c00114 	ori	r3,r3,4
    7fc8:	1809883a 	mov	r4,r3
    7fcc:	e0ffeb84 	addi	r3,fp,-82
    7fd0:	1885883a 	add	r2,r3,r2
    7fd4:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    7fd8:	e0bfea8b 	ldhu	r2,-86(fp)
    7fdc:	10c000a0 	cmpeqi	r3,r2,2
    7fe0:	18002a1e 	bne	r3,zero,808c <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    7fe4:	10c000e0 	cmpeqi	r3,r2,3
    7fe8:	1800521e 	bne	r3,zero,8134 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    7fec:	10800060 	cmpeqi	r2,r2,1
    7ff0:	10005826 	beq	r2,zero,8154 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    7ff4:	e0bfeb03 	ldbu	r2,-84(fp)
    7ff8:	10c00044 	addi	r3,r2,1
    7ffc:	e0ffeb05 	stb	r3,-84(fp)
    8000:	10803fcc 	andi	r2,r2,255
    8004:	e0ffff03 	ldbu	r3,-4(fp)
    8008:	1806913a 	slli	r3,r3,4
    800c:	18c00154 	ori	r3,r3,5
    8010:	1809883a 	mov	r4,r3
    8014:	e0ffeb84 	addi	r3,fp,-82
    8018:	1885883a 	add	r2,r3,r2
    801c:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    8020:	e0bfeb03 	ldbu	r2,-84(fp)
    8024:	10c00044 	addi	r3,r2,1
    8028:	e0ffeb05 	stb	r3,-84(fp)
    802c:	11003fcc 	andi	r4,r2,255
    8030:	e0bffd17 	ldw	r2,-12(fp)
    8034:	10c00044 	addi	r3,r2,1
    8038:	e0fffd15 	stw	r3,-12(fp)
    803c:	10c00003 	ldbu	r3,0(r2)
    8040:	e0bfeb84 	addi	r2,fp,-82
    8044:	1105883a 	add	r2,r2,r4
    8048:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    804c:	e0bfeb03 	ldbu	r2,-84(fp)
    8050:	10c00044 	addi	r3,r2,1
    8054:	e0ffeb05 	stb	r3,-84(fp)
    8058:	10803fcc 	andi	r2,r2,255
    805c:	e0ffeb84 	addi	r3,fp,-82
    8060:	1885883a 	add	r2,r3,r2
    8064:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    8068:	e0bfeb03 	ldbu	r2,-84(fp)
    806c:	10c00044 	addi	r3,r2,1
    8070:	e0ffeb05 	stb	r3,-84(fp)
    8074:	10803fcc 	andi	r2,r2,255
    8078:	e0ffeb84 	addi	r3,fp,-82
    807c:	1885883a 	add	r2,r3,r2
    8080:	10000005 	stb	zero,0(r2)
                        n = 0;
    8084:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8088:	00005a06 	br	81f4 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    808c:	e0bfeb03 	ldbu	r2,-84(fp)
    8090:	10c00044 	addi	r3,r2,1
    8094:	e0ffeb05 	stb	r3,-84(fp)
    8098:	10803fcc 	andi	r2,r2,255
    809c:	e0ffff03 	ldbu	r3,-4(fp)
    80a0:	1806913a 	slli	r3,r3,4
    80a4:	18c00194 	ori	r3,r3,6
    80a8:	1809883a 	mov	r4,r3
    80ac:	e0ffeb84 	addi	r3,fp,-82
    80b0:	1885883a 	add	r2,r3,r2
    80b4:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    80b8:	e0bfeb03 	ldbu	r2,-84(fp)
    80bc:	10c00044 	addi	r3,r2,1
    80c0:	e0ffeb05 	stb	r3,-84(fp)
    80c4:	11003fcc 	andi	r4,r2,255
    80c8:	e0bffd17 	ldw	r2,-12(fp)
    80cc:	10c00044 	addi	r3,r2,1
    80d0:	e0fffd15 	stw	r3,-12(fp)
    80d4:	10c00003 	ldbu	r3,0(r2)
    80d8:	e0bfeb84 	addi	r2,fp,-82
    80dc:	1105883a 	add	r2,r2,r4
    80e0:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    80e4:	e0bfeb03 	ldbu	r2,-84(fp)
    80e8:	10c00044 	addi	r3,r2,1
    80ec:	e0ffeb05 	stb	r3,-84(fp)
    80f0:	11003fcc 	andi	r4,r2,255
    80f4:	e0bffd17 	ldw	r2,-12(fp)
    80f8:	10c00044 	addi	r3,r2,1
    80fc:	e0fffd15 	stw	r3,-12(fp)
    8100:	10c00003 	ldbu	r3,0(r2)
    8104:	e0bfeb84 	addi	r2,fp,-82
    8108:	1105883a 	add	r2,r2,r4
    810c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8110:	e0bfeb03 	ldbu	r2,-84(fp)
    8114:	10c00044 	addi	r3,r2,1
    8118:	e0ffeb05 	stb	r3,-84(fp)
    811c:	10803fcc 	andi	r2,r2,255
    8120:	e0ffeb84 	addi	r3,fp,-82
    8124:	1885883a 	add	r2,r3,r2
    8128:	10000005 	stb	zero,0(r2)
                        n = 0;
    812c:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8130:	00003006 	br	81f4 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    8134:	e0bfeb03 	ldbu	r2,-84(fp)
    8138:	e0ffff03 	ldbu	r3,-4(fp)
    813c:	1806913a 	slli	r3,r3,4
    8140:	18c001d4 	ori	r3,r3,7
    8144:	1809883a 	mov	r4,r3
    8148:	e0ffeb84 	addi	r3,fp,-82
    814c:	1885883a 	add	r2,r3,r2
    8150:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    8154:	e0bfeb03 	ldbu	r2,-84(fp)
    8158:	10800044 	addi	r2,r2,1
    815c:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    8160:	e0bfeb03 	ldbu	r2,-84(fp)
    8164:	10c00044 	addi	r3,r2,1
    8168:	e0ffeb05 	stb	r3,-84(fp)
    816c:	11003fcc 	andi	r4,r2,255
    8170:	e0bffd17 	ldw	r2,-12(fp)
    8174:	10c00044 	addi	r3,r2,1
    8178:	e0fffd15 	stw	r3,-12(fp)
    817c:	10c00003 	ldbu	r3,0(r2)
    8180:	e0bfeb84 	addi	r2,fp,-82
    8184:	1105883a 	add	r2,r2,r4
    8188:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    818c:	e0bfeb03 	ldbu	r2,-84(fp)
    8190:	10c00044 	addi	r3,r2,1
    8194:	e0ffeb05 	stb	r3,-84(fp)
    8198:	11003fcc 	andi	r4,r2,255
    819c:	e0bffd17 	ldw	r2,-12(fp)
    81a0:	10c00044 	addi	r3,r2,1
    81a4:	e0fffd15 	stw	r3,-12(fp)
    81a8:	10c00003 	ldbu	r3,0(r2)
    81ac:	e0bfeb84 	addi	r2,fp,-82
    81b0:	1105883a 	add	r2,r2,r4
    81b4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    81b8:	e0bfeb03 	ldbu	r2,-84(fp)
    81bc:	10c00044 	addi	r3,r2,1
    81c0:	e0ffeb05 	stb	r3,-84(fp)
    81c4:	11003fcc 	andi	r4,r2,255
    81c8:	e0bffd17 	ldw	r2,-12(fp)
    81cc:	10c00044 	addi	r3,r2,1
    81d0:	e0fffd15 	stw	r3,-12(fp)
    81d4:	10c00003 	ldbu	r3,0(r2)
    81d8:	e0bfeb84 	addi	r2,fp,-82
    81dc:	1105883a 	add	r2,r2,r4
    81e0:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    81e4:	e0bfea8b 	ldhu	r2,-86(fp)
    81e8:	10bfff44 	addi	r2,r2,-3
    81ec:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    81f0:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    81f4:	e0ffeb03 	ldbu	r3,-84(fp)
    81f8:	e0bfeb43 	ldbu	r2,-83(fp)
    81fc:	1880022e 	bgeu	r3,r2,8208 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    8200:	e0bfea8b 	ldhu	r2,-86(fp)
    8204:	103f6a1e 	bne	r2,zero,7fb0 <__alt_data_end+0xfc007fb0>
                        USBTRACE2(" wptr:\t", wptr);
    8208:	e0bfeb03 	ldbu	r2,-84(fp)
    820c:	01402004 	movi	r5,128
    8210:	1009883a 	mov	r4,r2
    8214:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    8218:	e0bffc17 	ldw	r2,-16(fp)
    821c:	10c00217 	ldw	r3,8(r2)
    8220:	e0bffc17 	ldw	r2,-16(fp)
    8224:	10800303 	ldbu	r2,12(r2)
    8228:	11003fcc 	andi	r4,r2,255
    822c:	e0bffc17 	ldw	r2,-16(fp)
    8230:	10800643 	ldbu	r2,25(r2)
    8234:	11403fcc 	andi	r5,r2,255
    8238:	e1bfeb03 	ldbu	r6,-84(fp)
    823c:	e0bfeb84 	addi	r2,fp,-82
    8240:	d8800015 	stw	r2,0(sp)
    8244:	300f883a 	mov	r7,r6
    8248:	280d883a 	mov	r6,r5
    824c:	200b883a 	mov	r5,r4
    8250:	1809883a 	mov	r4,r3
    8254:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    8258:	e0bfea05 	stb	r2,-88(fp)
    825c:	e0bfea03 	ldbu	r2,-88(fp)
    8260:	1004c03a 	cmpne	r2,r2,zero
    8264:	10803fcc 	andi	r2,r2,255
    8268:	1000021e 	bne	r2,zero,8274 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    826c:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    8270:	003f4f06 	br	7fb0 <__alt_data_end+0xfc007fb0>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    8274:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    8278:	e0bfea03 	ldbu	r2,-88(fp)
}
    827c:	e037883a 	mov	sp,fp
    8280:	dfc00117 	ldw	ra,4(sp)
    8284:	df000017 	ldw	fp,0(sp)
    8288:	dec00204 	addi	sp,sp,8
    828c:	f800283a 	ret

00008290 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    8290:	defffb04 	addi	sp,sp,-20
    8294:	df000415 	stw	fp,16(sp)
    8298:	df000404 	addi	fp,sp,16
    829c:	e13ffd15 	stw	r4,-12(fp)
    82a0:	e17ffe15 	stw	r5,-8(fp)
    82a4:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    82a8:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    82ac:	e0bffe17 	ldw	r2,-8(fp)
    82b0:	10800003 	ldbu	r2,0(r2)
    82b4:	108003cc 	andi	r2,r2,15
    82b8:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    82bc:	e0bffc43 	ldbu	r2,-15(fp)
    82c0:	1080030c 	andi	r2,r2,12
    82c4:	10800120 	cmpeqi	r2,r2,4
    82c8:	1000021e 	bne	r2,zero,82d4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    82cc:	e0bffc03 	ldbu	r2,-16(fp)
    82d0:	00003b06 	br	83c0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    82d4:	e0bffc43 	ldbu	r2,-15(fp)
    82d8:	10c00160 	cmpeqi	r3,r2,5
    82dc:	18002e1e 	bne	r3,zero,8398 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    82e0:	10c00188 	cmpgei	r3,r2,6
    82e4:	1800031e 	bne	r3,zero,82f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    82e8:	10800120 	cmpeqi	r2,r2,4
    82ec:	1000061e 	bne	r2,zero,8308 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    82f0:	00003206 	br	83bc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    82f4:	10c001a0 	cmpeqi	r3,r2,6
    82f8:	1800181e 	bne	r3,zero,835c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    82fc:	108001e0 	cmpeqi	r2,r2,7
    8300:	1000011e 	bne	r2,zero,8308 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8304:	00002d06 	br	83bc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    8308:	e0bfff17 	ldw	r2,-4(fp)
    830c:	10c00044 	addi	r3,r2,1
    8310:	e0ffff15 	stw	r3,-4(fp)
    8314:	e0fffe17 	ldw	r3,-8(fp)
    8318:	18c00043 	ldbu	r3,1(r3)
    831c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    8320:	e0bfff17 	ldw	r2,-4(fp)
    8324:	10c00044 	addi	r3,r2,1
    8328:	e0ffff15 	stw	r3,-4(fp)
    832c:	e0fffe17 	ldw	r3,-8(fp)
    8330:	18c00083 	ldbu	r3,2(r3)
    8334:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    8338:	e0bfff17 	ldw	r2,-4(fp)
    833c:	10c00044 	addi	r3,r2,1
    8340:	e0ffff15 	stw	r3,-4(fp)
    8344:	e0fffe17 	ldw	r3,-8(fp)
    8348:	18c000c3 	ldbu	r3,3(r3)
    834c:	10c00005 	stb	r3,0(r2)
                rc = 3;
    8350:	008000c4 	movi	r2,3
    8354:	e0bffc05 	stb	r2,-16(fp)
                break;
    8358:	00001806 	br	83bc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    835c:	e0bfff17 	ldw	r2,-4(fp)
    8360:	10c00044 	addi	r3,r2,1
    8364:	e0ffff15 	stw	r3,-4(fp)
    8368:	e0fffe17 	ldw	r3,-8(fp)
    836c:	18c00043 	ldbu	r3,1(r3)
    8370:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    8374:	e0bfff17 	ldw	r2,-4(fp)
    8378:	10c00044 	addi	r3,r2,1
    837c:	e0ffff15 	stw	r3,-4(fp)
    8380:	e0fffe17 	ldw	r3,-8(fp)
    8384:	18c00083 	ldbu	r3,2(r3)
    8388:	10c00005 	stb	r3,0(r2)
                rc = 2;
    838c:	00800084 	movi	r2,2
    8390:	e0bffc05 	stb	r2,-16(fp)
                break;
    8394:	00000906 	br	83bc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    8398:	e0bfff17 	ldw	r2,-4(fp)
    839c:	10c00044 	addi	r3,r2,1
    83a0:	e0ffff15 	stw	r3,-4(fp)
    83a4:	e0fffe17 	ldw	r3,-8(fp)
    83a8:	18c00043 	ldbu	r3,1(r3)
    83ac:	10c00005 	stb	r3,0(r2)
                rc = 1;
    83b0:	00800044 	movi	r2,1
    83b4:	e0bffc05 	stb	r2,-16(fp)
                break;
    83b8:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    83bc:	e0bffc03 	ldbu	r2,-16(fp)
}
    83c0:	e037883a 	mov	sp,fp
    83c4:	df000017 	ldw	fp,0(sp)
    83c8:	dec00104 	addi	sp,sp,4
    83cc:	f800283a 	ret

000083d0 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    83d0:	defffb04 	addi	sp,sp,-20
    83d4:	dfc00415 	stw	ra,16(sp)
    83d8:	df000315 	stw	fp,12(sp)
    83dc:	df000304 	addi	fp,sp,12
    83e0:	e13ffd15 	stw	r4,-12(fp)
    83e4:	e17ffe15 	stw	r5,-8(fp)
    83e8:	3005883a 	mov	r2,r6
    83ec:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    83f0:	e0bffd17 	ldw	r2,-12(fp)
    83f4:	1009883a 	mov	r4,r2
    83f8:	0004ef00 	call	4ef0 <_ZN13USBReadParserC1Ev>
    83fc:	008000b4 	movhi	r2,2
    8400:	1093d504 	addi	r2,r2,20308
    8404:	e0fffd17 	ldw	r3,-12(fp)
    8408:	18800015 	stw	r2,0(r3)
    840c:	e0bffd17 	ldw	r2,-12(fp)
    8410:	e0fffe17 	ldw	r3,-8(fp)
    8414:	10c00115 	stw	r3,4(r2)
    8418:	e0bffd17 	ldw	r2,-12(fp)
    841c:	10800204 	addi	r2,r2,8
    8420:	1009883a 	mov	r4,r2
    8424:	00047e00 	call	47e0 <_ZN16MultiValueBufferC1Ev>
    8428:	e0bffd17 	ldw	r2,-12(fp)
    842c:	10800404 	addi	r2,r2,16
    8430:	1009883a 	mov	r4,r2
    8434:	00048400 	call	4840 <_ZN20MultiByteValueParserC1Ev>
    8438:	e0bffd17 	ldw	r2,-12(fp)
    843c:	10800604 	addi	r2,r2,24
    8440:	1009883a 	mov	r4,r2
    8444:	00048fc0 	call	48fc <_ZN11ByteSkipperC1Ev>
    8448:	e0bffd17 	ldw	r2,-12(fp)
    844c:	10000c05 	stb	zero,48(r2)
    8450:	e0bffd17 	ldw	r2,-12(fp)
    8454:	10000c45 	stb	zero,49(r2)
    8458:	e0bffd17 	ldw	r2,-12(fp)
    845c:	10000c85 	stb	zero,50(r2)
    8460:	e0bffd17 	ldw	r2,-12(fp)
    8464:	10000cc5 	stb	zero,51(r2)
    8468:	e0bffd17 	ldw	r2,-12(fp)
    846c:	e0ffff03 	ldbu	r3,-4(fp)
    8470:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    8474:	e0bffd17 	ldw	r2,-12(fp)
    8478:	10c00804 	addi	r3,r2,32
    847c:	e0bffd17 	ldw	r2,-12(fp)
    8480:	19803fcc 	andi	r6,r3,255
    8484:	11000243 	ldbu	r4,9(r2)
    8488:	2008703a 	and	r4,r4,zero
    848c:	200b883a 	mov	r5,r4
    8490:	3009883a 	mov	r4,r6
    8494:	2908b03a 	or	r4,r5,r4
    8498:	11000245 	stb	r4,9(r2)
    849c:	1808d23a 	srli	r4,r3,8
    84a0:	21803fcc 	andi	r6,r4,255
    84a4:	11000283 	ldbu	r4,10(r2)
    84a8:	2008703a 	and	r4,r4,zero
    84ac:	200b883a 	mov	r5,r4
    84b0:	3009883a 	mov	r4,r6
    84b4:	2908b03a 	or	r4,r5,r4
    84b8:	11000285 	stb	r4,10(r2)
    84bc:	1808d43a 	srli	r4,r3,16
    84c0:	21803fcc 	andi	r6,r4,255
    84c4:	110002c3 	ldbu	r4,11(r2)
    84c8:	2008703a 	and	r4,r4,zero
    84cc:	200b883a 	mov	r5,r4
    84d0:	3009883a 	mov	r4,r6
    84d4:	2908b03a 	or	r4,r5,r4
    84d8:	110002c5 	stb	r4,11(r2)
    84dc:	180ad63a 	srli	r5,r3,24
    84e0:	10c00303 	ldbu	r3,12(r2)
    84e4:	1806703a 	and	r3,r3,zero
    84e8:	1809883a 	mov	r4,r3
    84ec:	2807883a 	mov	r3,r5
    84f0:	20c6b03a 	or	r3,r4,r3
    84f4:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    84f8:	e0bffd17 	ldw	r2,-12(fp)
    84fc:	10c00404 	addi	r3,r2,16
    8500:	e0bffd17 	ldw	r2,-12(fp)
    8504:	10800204 	addi	r2,r2,8
    8508:	100b883a 	mov	r5,r2
    850c:	1809883a 	mov	r4,r3
    8510:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    8514:	e0bffd17 	ldw	r2,-12(fp)
    8518:	10c00604 	addi	r3,r2,24
    851c:	e0bffd17 	ldw	r2,-12(fp)
    8520:	10800204 	addi	r2,r2,8
    8524:	100b883a 	mov	r5,r2
    8528:	1809883a 	mov	r4,r3
    852c:	00049380 	call	4938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    8530:	0001883a 	nop
    8534:	e037883a 	mov	sp,fp
    8538:	dfc00117 	ldw	ra,4(sp)
    853c:	df000017 	ldw	fp,0(sp)
    8540:	dec00204 	addi	sp,sp,8
    8544:	f800283a 	ret

00008548 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    8548:	defff804 	addi	sp,sp,-32
    854c:	dfc00715 	stw	ra,28(sp)
    8550:	df000615 	stw	fp,24(sp)
    8554:	df000604 	addi	fp,sp,24
    8558:	e13ffc15 	stw	r4,-16(fp)
    855c:	2805883a 	mov	r2,r5
    8560:	e1bffe15 	stw	r6,-8(fp)
    8564:	e1ffff15 	stw	r7,-4(fp)
    8568:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    856c:	e0bffd0b 	ldhu	r2,-12(fp)
    8570:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    8574:	e0bffe17 	ldw	r2,-8(fp)
    8578:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    857c:	e0bffa0b 	ldhu	r2,-24(fp)
    8580:	10bfffcc 	andi	r2,r2,65535
    8584:	10000a26 	beq	r2,zero,85b0 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    8588:	e0bffb04 	addi	r2,fp,-20
    858c:	e1bffa04 	addi	r6,fp,-24
    8590:	100b883a 	mov	r5,r2
    8594:	e13ffc17 	ldw	r4,-16(fp)
    8598:	00085c40 	call	85c4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    859c:	1080005c 	xori	r2,r2,1
    85a0:	10803fcc 	andi	r2,r2,255
    85a4:	1000011e 	bne	r2,zero,85ac <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    85a8:	003ff406 	br	857c <__alt_data_end+0xfc00857c>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    85ac:	0001883a 	nop
}
    85b0:	e037883a 	mov	sp,fp
    85b4:	dfc00117 	ldw	ra,4(sp)
    85b8:	df000017 	ldw	fp,0(sp)
    85bc:	dec00204 	addi	sp,sp,8
    85c0:	f800283a 	ret

000085c4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    85c4:	defff604 	addi	sp,sp,-40
    85c8:	dfc00915 	stw	ra,36(sp)
    85cc:	df000815 	stw	fp,32(sp)
    85d0:	df000804 	addi	fp,sp,32
    85d4:	e13ffc15 	stw	r4,-16(fp)
    85d8:	e17ffd15 	stw	r5,-12(fp)
    85dc:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    85e0:	e0bffc17 	ldw	r2,-16(fp)
    85e4:	10800804 	addi	r2,r2,32
    85e8:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    85ec:	e0bffc17 	ldw	r2,-16(fp)
    85f0:	10800804 	addi	r2,r2,32
    85f4:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    85f8:	e0bffc17 	ldw	r2,-16(fp)
    85fc:	10800c03 	ldbu	r2,48(r2)
    8600:	10803fcc 	andi	r2,r2,255
    8604:	10c00168 	cmpgeui	r3,r2,5
    8608:	1801411e 	bne	r3,zero,8b10 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    860c:	100690ba 	slli	r3,r2,2
    8610:	00800074 	movhi	r2,1
    8614:	10a18904 	addi	r2,r2,-31196
    8618:	1885883a 	add	r2,r3,r2
    861c:	10800017 	ldw	r2,0(r2)
    8620:	1000683a 	jmp	r2
    8624:	00008638 	rdprs	zero,zero,536
    8628:	0000866c 	andhi	zero,zero,537
    862c:	000086f4 	movhi	zero,539
    8630:	00008788 	cmpgei	zero,zero,542
    8634:	000087f4 	movhi	zero,543
                case 0:
                        theBuffer.valueSize = 2;
    8638:	e0bffc17 	ldw	r2,-16(fp)
    863c:	00c00084 	movi	r3,2
    8640:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8644:	e0bffc17 	ldw	r2,-16(fp)
    8648:	10c00404 	addi	r3,r2,16
    864c:	e0bffc17 	ldw	r2,-16(fp)
    8650:	10800204 	addi	r2,r2,8
    8654:	100b883a 	mov	r5,r2
    8658:	1809883a 	mov	r4,r3
    865c:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    8660:	e0bffc17 	ldw	r2,-16(fp)
    8664:	00c00044 	movi	r3,1
    8668:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    866c:	e0bffc17 	ldw	r2,-16(fp)
    8670:	10800404 	addi	r2,r2,16
    8674:	e1bffe17 	ldw	r6,-8(fp)
    8678:	e17ffd17 	ldw	r5,-12(fp)
    867c:	1009883a 	mov	r4,r2
    8680:	00062a80 	call	62a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8684:	1080005c 	xori	r2,r2,1
    8688:	10803fcc 	andi	r2,r2,255
    868c:	10000226 	beq	r2,zero,8698 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    8690:	0005883a 	mov	r2,zero
    8694:	00011f06 	br	8b14 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    8698:	e0bffc17 	ldw	r2,-16(fp)
    869c:	10c00217 	ldw	r3,8(r2)
    86a0:	1806d23a 	srli	r3,r3,8
    86a4:	10800317 	ldw	r2,12(r2)
    86a8:	10803fcc 	andi	r2,r2,255
    86ac:	1004963a 	slli	r2,r2,24
    86b0:	10c4b03a 	or	r2,r2,r3
    86b4:	10c00003 	ldbu	r3,0(r2)
    86b8:	e0bffc17 	ldw	r2,-16(fp)
    86bc:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    86c0:	e0bffc17 	ldw	r2,-16(fp)
    86c4:	10c00217 	ldw	r3,8(r2)
    86c8:	1806d23a 	srli	r3,r3,8
    86cc:	10800317 	ldw	r2,12(r2)
    86d0:	10803fcc 	andi	r2,r2,255
    86d4:	1004963a 	slli	r2,r2,24
    86d8:	10c4b03a 	or	r2,r2,r3
    86dc:	10c00043 	ldbu	r3,1(r2)
    86e0:	e0bffc17 	ldw	r2,-16(fp)
    86e4:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    86e8:	e0bffc17 	ldw	r2,-16(fp)
    86ec:	00c00084 	movi	r3,2
    86f0:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    86f4:	e0bffc17 	ldw	r2,-16(fp)
    86f8:	10800804 	addi	r2,r2,32
    86fc:	10c00084 	addi	r3,r2,2
    8700:	e0bffc17 	ldw	r2,-16(fp)
    8704:	19803fcc 	andi	r6,r3,255
    8708:	11000243 	ldbu	r4,9(r2)
    870c:	2008703a 	and	r4,r4,zero
    8710:	200b883a 	mov	r5,r4
    8714:	3009883a 	mov	r4,r6
    8718:	2908b03a 	or	r4,r5,r4
    871c:	11000245 	stb	r4,9(r2)
    8720:	1808d23a 	srli	r4,r3,8
    8724:	21803fcc 	andi	r6,r4,255
    8728:	11000283 	ldbu	r4,10(r2)
    872c:	2008703a 	and	r4,r4,zero
    8730:	200b883a 	mov	r5,r4
    8734:	3009883a 	mov	r4,r6
    8738:	2908b03a 	or	r4,r5,r4
    873c:	11000285 	stb	r4,10(r2)
    8740:	1808d43a 	srli	r4,r3,16
    8744:	21803fcc 	andi	r6,r4,255
    8748:	110002c3 	ldbu	r4,11(r2)
    874c:	2008703a 	and	r4,r4,zero
    8750:	200b883a 	mov	r5,r4
    8754:	3009883a 	mov	r4,r6
    8758:	2908b03a 	or	r4,r5,r4
    875c:	110002c5 	stb	r4,11(r2)
    8760:	180ad63a 	srli	r5,r3,24
    8764:	10c00303 	ldbu	r3,12(r2)
    8768:	1806703a 	and	r3,r3,zero
    876c:	1809883a 	mov	r4,r3
    8770:	2807883a 	mov	r3,r5
    8774:	20c6b03a 	or	r3,r4,r3
    8778:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    877c:	e0bffc17 	ldw	r2,-16(fp)
    8780:	00c000c4 	movi	r3,3
    8784:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    8788:	e0bffc17 	ldw	r2,-16(fp)
    878c:	10800c83 	ldbu	r2,50(r2)
    8790:	10803fcc 	andi	r2,r2,255
    8794:	10c00120 	cmpeqi	r3,r2,4
    8798:	1800021e 	bne	r3,zero,87a4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    879c:	10800148 	cmpgei	r2,r2,5
    87a0:	00000306 	br	87b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    87a4:	e0bffc17 	ldw	r2,-16(fp)
    87a8:	10000d45 	stb	zero,53(r2)
                                        break;
    87ac:	00000106 	br	87b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    87b0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    87b4:	e0bffc17 	ldw	r2,-16(fp)
    87b8:	10800c43 	ldbu	r2,49(r2)
    87bc:	10bfff84 	addi	r2,r2,-2
    87c0:	1007883a 	mov	r3,r2
    87c4:	e0bffc17 	ldw	r2,-16(fp)
    87c8:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    87cc:	e0bffc17 	ldw	r2,-16(fp)
    87d0:	10c00404 	addi	r3,r2,16
    87d4:	e0bffc17 	ldw	r2,-16(fp)
    87d8:	10800204 	addi	r2,r2,8
    87dc:	100b883a 	mov	r5,r2
    87e0:	1809883a 	mov	r4,r3
    87e4:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    87e8:	e0bffc17 	ldw	r2,-16(fp)
    87ec:	00c00104 	movi	r3,4
    87f0:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    87f4:	e0bffc17 	ldw	r2,-16(fp)
    87f8:	10800c83 	ldbu	r2,50(r2)
    87fc:	10803fcc 	andi	r2,r2,255
    8800:	10c00120 	cmpeqi	r3,r2,4
    8804:	1800141e 	bne	r3,zero,8858 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    8808:	10c00160 	cmpeqi	r3,r2,5
    880c:	18005a1e 	bne	r3,zero,8978 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    8810:	108000a0 	cmpeqi	r2,r2,2
    8814:	10008526 	beq	r2,zero,8a2c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    8818:	e0bffc17 	ldw	r2,-16(fp)
    881c:	10800404 	addi	r2,r2,16
    8820:	e1bffe17 	ldw	r6,-8(fp)
    8824:	e17ffd17 	ldw	r5,-12(fp)
    8828:	1009883a 	mov	r4,r2
    882c:	00062a80 	call	62a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8830:	1080005c 	xori	r2,r2,1
    8834:	10803fcc 	andi	r2,r2,255
    8838:	10000226 	beq	r2,zero,8844 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    883c:	0005883a 	mov	r2,zero
    8840:	0000b406 	br	8b14 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    8844:	e0bffa17 	ldw	r2,-24(fp)
    8848:	10c00143 	ldbu	r3,5(r2)
    884c:	e0bffc17 	ldw	r2,-16(fp)
    8850:	10c00d85 	stb	r3,54(r2)
                                        break;
    8854:	00008b06 	br	8a84 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    8858:	e0bffc17 	ldw	r2,-16(fp)
    885c:	10800404 	addi	r2,r2,16
    8860:	e1bffe17 	ldw	r6,-8(fp)
    8864:	e17ffd17 	ldw	r5,-12(fp)
    8868:	1009883a 	mov	r4,r2
    886c:	00062a80 	call	62a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8870:	1080005c 	xori	r2,r2,1
    8874:	10803fcc 	andi	r2,r2,255
    8878:	10000226 	beq	r2,zero,8884 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    887c:	0005883a 	mov	r2,zero
    8880:	0000a406 	br	8b14 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    8884:	e0bffb17 	ldw	r2,-20(fp)
    8888:	10800083 	ldbu	r2,2(r2)
    888c:	10803fcc 	andi	r2,r2,255
    8890:	01402004 	movi	r5,128
    8894:	1009883a 	mov	r4,r2
    8898:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    889c:	e0bffb17 	ldw	r2,-20(fp)
    88a0:	108000c3 	ldbu	r2,3(r2)
    88a4:	10803fcc 	andi	r2,r2,255
    88a8:	01402004 	movi	r5,128
    88ac:	1009883a 	mov	r4,r2
    88b0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    88b4:	e0bffb17 	ldw	r2,-20(fp)
    88b8:	10800103 	ldbu	r2,4(r2)
    88bc:	10803fcc 	andi	r2,r2,255
    88c0:	01402004 	movi	r5,128
    88c4:	1009883a 	mov	r4,r2
    88c8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    88cc:	e0bffb17 	ldw	r2,-20(fp)
    88d0:	10800143 	ldbu	r2,5(r2)
    88d4:	10803fcc 	andi	r2,r2,255
    88d8:	01402004 	movi	r5,128
    88dc:	1009883a 	mov	r4,r2
    88e0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    88e4:	e0bffb17 	ldw	r2,-20(fp)
    88e8:	10800183 	ldbu	r2,6(r2)
    88ec:	10803fcc 	andi	r2,r2,255
    88f0:	01402004 	movi	r5,128
    88f4:	1009883a 	mov	r4,r2
    88f8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    88fc:	e0bffb17 	ldw	r2,-20(fp)
    8900:	108001c3 	ldbu	r2,7(r2)
    8904:	10803fcc 	andi	r2,r2,255
    8908:	01402004 	movi	r5,128
    890c:	1009883a 	mov	r4,r2
    8910:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    8914:	e0bffc17 	ldw	r2,-16(fp)
    8918:	10800d03 	ldbu	r2,52(r2)
    891c:	10803fcc 	andi	r2,r2,255
    8920:	10000a26 	beq	r2,zero,894c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    8924:	e0bffb17 	ldw	r2,-20(fp)
    8928:	10800143 	ldbu	r2,5(r2)
    892c:	10803fcc 	andi	r2,r2,255
    8930:	10800058 	cmpnei	r2,r2,1
    8934:	10004e1e 	bne	r2,zero,8a70 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    8938:	e0bffb17 	ldw	r2,-20(fp)
    893c:	10800183 	ldbu	r2,6(r2)
    8940:	10803fcc 	andi	r2,r2,255
    8944:	108000d8 	cmpnei	r2,r2,3
    8948:	1000491e 	bne	r2,zero,8a70 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    894c:	e0bffc17 	ldw	r2,-16(fp)
    8950:	00c00044 	movi	r3,1
    8954:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    8958:	e0bffc17 	ldw	r2,-16(fp)
    895c:	10800cc3 	ldbu	r2,51(r2)
    8960:	10803fcc 	andi	r2,r2,255
    8964:	108000a8 	cmpgeui	r2,r2,2
    8968:	1000431e 	bne	r2,zero,8a78 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    896c:	e0bffc17 	ldw	r2,-16(fp)
    8970:	10000cc5 	stb	zero,51(r2)
                                        break;
    8974:	00004006 	br	8a78 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    8978:	e0bffc17 	ldw	r2,-16(fp)
    897c:	10800404 	addi	r2,r2,16
    8980:	e1bffe17 	ldw	r6,-8(fp)
    8984:	e17ffd17 	ldw	r5,-12(fp)
    8988:	1009883a 	mov	r4,r2
    898c:	00062a80 	call	62a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8990:	1080005c 	xori	r2,r2,1
    8994:	10803fcc 	andi	r2,r2,255
    8998:	10000226 	beq	r2,zero,89a4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    899c:	0005883a 	mov	r2,zero
    89a0:	00005c06 	br	8b14 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    89a4:	e0bffc17 	ldw	r2,-16(fp)
    89a8:	10800d43 	ldbu	r2,53(r2)
    89ac:	10803fcc 	andi	r2,r2,255
    89b0:	10003326 	beq	r2,zero,8a80 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    89b4:	e0bffc17 	ldw	r2,-16(fp)
    89b8:	10800cc3 	ldbu	r2,51(r2)
    89bc:	10803fcc 	andi	r2,r2,255
    89c0:	108000a8 	cmpgeui	r2,r2,2
    89c4:	10002e1e 	bne	r2,zero,8a80 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    89c8:	e0bffc17 	ldw	r2,-16(fp)
    89cc:	10800117 	ldw	r2,4(r2)
    89d0:	10800017 	ldw	r2,0(r2)
    89d4:	10800017 	ldw	r2,0(r2)
    89d8:	e0fffc17 	ldw	r3,-16(fp)
    89dc:	19000117 	ldw	r4,4(r3)
    89e0:	e0fffc17 	ldw	r3,-16(fp)
    89e4:	18c00d83 	ldbu	r3,54(r3)
    89e8:	19403fcc 	andi	r5,r3,255
    89ec:	e0fffc17 	ldw	r3,-16(fp)
    89f0:	18c00804 	addi	r3,r3,32
    89f4:	d8c00115 	stw	r3,4(sp)
    89f8:	d8000015 	stw	zero,0(sp)
    89fc:	000f883a 	mov	r7,zero
    8a00:	000d883a 	mov	r6,zero
    8a04:	103ee83a 	callr	r2
    8a08:	10803fcc 	andi	r2,r2,255
    8a0c:	10001c26 	beq	r2,zero,8a80 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    8a10:	e0bffc17 	ldw	r2,-16(fp)
    8a14:	10800cc3 	ldbu	r2,51(r2)
    8a18:	10800044 	addi	r2,r2,1
    8a1c:	1007883a 	mov	r3,r2
    8a20:	e0bffc17 	ldw	r2,-16(fp)
    8a24:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8a28:	00001506 	br	8a80 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    8a2c:	e0bffc17 	ldw	r2,-16(fp)
    8a30:	10c00604 	addi	r3,r2,24
    8a34:	e0bffc17 	ldw	r2,-16(fp)
    8a38:	10800c43 	ldbu	r2,49(r2)
    8a3c:	10803fcc 	andi	r2,r2,255
    8a40:	10bfff84 	addi	r2,r2,-2
    8a44:	10bfffcc 	andi	r2,r2,65535
    8a48:	100f883a 	mov	r7,r2
    8a4c:	e1bffe17 	ldw	r6,-8(fp)
    8a50:	e17ffd17 	ldw	r5,-12(fp)
    8a54:	1809883a 	mov	r4,r3
    8a58:	00049a00 	call	49a0 <_ZN11ByteSkipper4SkipEPPhPtt>
    8a5c:	1080005c 	xori	r2,r2,1
    8a60:	10803fcc 	andi	r2,r2,255
    8a64:	10000726 	beq	r2,zero,8a84 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8a68:	0005883a 	mov	r2,zero
    8a6c:	00002906 	br	8b14 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8a70:	0001883a 	nop
    8a74:	00000306 	br	8a84 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8a78:	0001883a 	nop
    8a7c:	00000106 	br	8a84 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    8a80:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    8a84:	e0bffc17 	ldw	r2,-16(fp)
    8a88:	10c00804 	addi	r3,r2,32
    8a8c:	e0bffc17 	ldw	r2,-16(fp)
    8a90:	19803fcc 	andi	r6,r3,255
    8a94:	11000243 	ldbu	r4,9(r2)
    8a98:	2008703a 	and	r4,r4,zero
    8a9c:	200b883a 	mov	r5,r4
    8aa0:	3009883a 	mov	r4,r6
    8aa4:	2908b03a 	or	r4,r5,r4
    8aa8:	11000245 	stb	r4,9(r2)
    8aac:	1808d23a 	srli	r4,r3,8
    8ab0:	21803fcc 	andi	r6,r4,255
    8ab4:	11000283 	ldbu	r4,10(r2)
    8ab8:	2008703a 	and	r4,r4,zero
    8abc:	200b883a 	mov	r5,r4
    8ac0:	3009883a 	mov	r4,r6
    8ac4:	2908b03a 	or	r4,r5,r4
    8ac8:	11000285 	stb	r4,10(r2)
    8acc:	1808d43a 	srli	r4,r3,16
    8ad0:	21803fcc 	andi	r6,r4,255
    8ad4:	110002c3 	ldbu	r4,11(r2)
    8ad8:	2008703a 	and	r4,r4,zero
    8adc:	200b883a 	mov	r5,r4
    8ae0:	3009883a 	mov	r4,r6
    8ae4:	2908b03a 	or	r4,r5,r4
    8ae8:	110002c5 	stb	r4,11(r2)
    8aec:	180ad63a 	srli	r5,r3,24
    8af0:	10c00303 	ldbu	r3,12(r2)
    8af4:	1806703a 	and	r3,r3,zero
    8af8:	1809883a 	mov	r4,r3
    8afc:	2807883a 	mov	r3,r5
    8b00:	20c6b03a 	or	r3,r4,r3
    8b04:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8b08:	e0bffc17 	ldw	r2,-16(fp)
    8b0c:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8b10:	00800044 	movi	r2,1
}
    8b14:	e037883a 	mov	sp,fp
    8b18:	dfc00117 	ldw	ra,4(sp)
    8b1c:	df000017 	ldw	fp,0(sp)
    8b20:	dec00204 	addi	sp,sp,8
    8b24:	f800283a 	ret

00008b28 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8b28:	defff904 	addi	sp,sp,-28
    8b2c:	df000615 	stw	fp,24(sp)
    8b30:	df000604 	addi	fp,sp,24
    8b34:	e13ffb15 	stw	r4,-20(fp)
    8b38:	3009883a 	mov	r4,r6
    8b3c:	3807883a 	mov	r3,r7
    8b40:	e0800117 	ldw	r2,4(fp)
    8b44:	e17ffc05 	stb	r5,-16(fp)
    8b48:	e13ffd05 	stb	r4,-12(fp)
    8b4c:	e0fffe05 	stb	r3,-8(fp)
    8b50:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8b54:	e0800217 	ldw	r2,8(fp)
    8b58:	10c000c3 	ldbu	r3,3(r2)
    8b5c:	e0bffb17 	ldw	r2,-20(fp)
    8b60:	10800483 	ldbu	r2,18(r2)
    8b64:	1884703a 	and	r2,r3,r2
    8b68:	10803fcc 	andi	r2,r2,255
    8b6c:	10800098 	cmpnei	r2,r2,2
    8b70:	10001f1e 	bne	r2,zero,8bf0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8b74:	e0800217 	ldw	r2,8(fp)
    8b78:	10800083 	ldbu	r2,2(r2)
    8b7c:	10803fcc 	andi	r2,r2,255
    8b80:	1080201c 	xori	r2,r2,128
    8b84:	10bfe004 	addi	r2,r2,-128
    8b88:	1000020e 	bge	r2,zero,8b94 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8b8c:	00800044 	movi	r2,1
    8b90:	00000106 	br	8b98 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8b94:	00800084 	movi	r2,2
    8b98:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8b9c:	e0fffa03 	ldbu	r3,-24(fp)
    8ba0:	e0800217 	ldw	r2,8(fp)
    8ba4:	10800083 	ldbu	r2,2(r2)
    8ba8:	108003cc 	andi	r2,r2,15
    8bac:	100b883a 	mov	r5,r2
    8bb0:	e13ffb17 	ldw	r4,-20(fp)
    8bb4:	1805883a 	mov	r2,r3
    8bb8:	1085883a 	add	r2,r2,r2
    8bbc:	10c5883a 	add	r2,r2,r3
    8bc0:	2085883a 	add	r2,r4,r2
    8bc4:	108004c4 	addi	r2,r2,19
    8bc8:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    8bcc:	e0800217 	ldw	r2,8(fp)
    8bd0:	10c00103 	ldbu	r3,4(r2)
    8bd4:	10800143 	ldbu	r2,5(r2)
    8bd8:	1004923a 	slli	r2,r2,8
    8bdc:	10c4b03a 	or	r2,r2,r3
    8be0:	10bfffcc 	andi	r2,r2,65535
    8be4:	10801070 	cmpltui	r2,r2,65
    8be8:	10000d1e 	bne	r2,zero,8c20 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    8bec:	00000206 	br	8bf8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    8bf0:	0005883a 	mov	r2,zero
    8bf4:	00001906 	br	8c5c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    8bf8:	e0fffa03 	ldbu	r3,-24(fp)
    8bfc:	e13ffb17 	ldw	r4,-20(fp)
    8c00:	1805883a 	mov	r2,r3
    8c04:	1085883a 	add	r2,r2,r2
    8c08:	10c5883a 	add	r2,r2,r3
    8c0c:	2085883a 	add	r2,r4,r2
    8c10:	10800504 	addi	r2,r2,20
    8c14:	00c01004 	movi	r3,64
    8c18:	10c00005 	stb	r3,0(r2)
    8c1c:	00000e06 	br	8c58 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    8c20:	e0fffa03 	ldbu	r3,-24(fp)
    8c24:	e0800217 	ldw	r2,8(fp)
    8c28:	11000103 	ldbu	r4,4(r2)
    8c2c:	10800143 	ldbu	r2,5(r2)
    8c30:	1004923a 	slli	r2,r2,8
    8c34:	1104b03a 	or	r2,r2,r4
    8c38:	100b883a 	mov	r5,r2
    8c3c:	e13ffb17 	ldw	r4,-20(fp)
    8c40:	1805883a 	mov	r2,r3
    8c44:	1085883a 	add	r2,r2,r2
    8c48:	10c5883a 	add	r2,r2,r3
    8c4c:	2085883a 	add	r2,r4,r2
    8c50:	10800504 	addi	r2,r2,20
    8c54:	11400005 	stb	r5,0(r2)
        }

        return true;
    8c58:	00800044 	movi	r2,1
}
    8c5c:	e037883a 	mov	sp,fp
    8c60:	df000017 	ldw	fp,0(sp)
    8c64:	dec00104 	addi	sp,sp,4
    8c68:	f800283a 	ret

00008c6c <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    8c6c:	213fff04 	addi	r4,r4,-4
    8c70:	0008b281 	jmpi	8b28 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00008c74 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    8c74:	defffa04 	addi	sp,sp,-24
    8c78:	df000515 	stw	fp,20(sp)
    8c7c:	df000504 	addi	fp,sp,20
    8c80:	e13ffb15 	stw	r4,-20(fp)
    8c84:	3009883a 	mov	r4,r6
    8c88:	3807883a 	mov	r3,r7
    8c8c:	e0800117 	ldw	r2,4(fp)
    8c90:	e17ffc05 	stb	r5,-16(fp)
    8c94:	e13ffd05 	stb	r4,-12(fp)
    8c98:	e0fffe05 	stb	r3,-8(fp)
    8c9c:	e0bfff05 	stb	r2,-4(fp)
                return true;
    8ca0:	00800044 	movi	r2,1
        };
    8ca4:	e037883a 	mov	sp,fp
    8ca8:	df000017 	ldw	fp,0(sp)
    8cac:	dec00104 	addi	sp,sp,4
    8cb0:	f800283a 	ret

00008cb4 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    8cb4:	defffe04 	addi	sp,sp,-8
    8cb8:	df000115 	stw	fp,4(sp)
    8cbc:	df000104 	addi	fp,sp,4
    8cc0:	e13fff15 	stw	r4,-4(fp)
    8cc4:	e0bfff17 	ldw	r2,-4(fp)
    8cc8:	10800d83 	ldbu	r2,54(r2)
    8ccc:	e037883a 	mov	sp,fp
    8cd0:	df000017 	ldw	fp,0(sp)
    8cd4:	dec00104 	addi	sp,sp,4
    8cd8:	f800283a 	ret

00008cdc <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    8cdc:	defffe04 	addi	sp,sp,-8
    8ce0:	df000115 	stw	fp,4(sp)
    8ce4:	df000104 	addi	fp,sp,4
    8ce8:	e13fff15 	stw	r4,-4(fp)
    8cec:	e0bfff17 	ldw	r2,-4(fp)
    8cf0:	10800cc3 	ldbu	r2,51(r2)
    8cf4:	e037883a 	mov	sp,fp
    8cf8:	df000017 	ldw	fp,0(sp)
    8cfc:	dec00104 	addi	sp,sp,4
    8d00:	f800283a 	ret

00008d04 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    8d04:	defffd04 	addi	sp,sp,-12
    8d08:	df000215 	stw	fp,8(sp)
    8d0c:	df000204 	addi	fp,sp,8
    8d10:	e13ffe15 	stw	r4,-8(fp)
    8d14:	2805883a 	mov	r2,r5
    8d18:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    8d1c:	e0bfff03 	ldbu	r2,-4(fp)
    8d20:	10803c28 	cmpgeui	r2,r2,240
    8d24:	1000031e 	bne	r2,zero,8d34 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    8d28:	e0bfff03 	ldbu	r2,-4(fp)
    8d2c:	1004d13a 	srli	r2,r2,4
    8d30:	00000606 	br	8d4c <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    8d34:	e0bfff03 	ldbu	r2,-4(fp)
    8d38:	10c003cc 	andi	r3,r2,15
    8d3c:	008000b4 	movhi	r2,2
    8d40:	1093bf84 	addi	r2,r2,20222
    8d44:	1885883a 	add	r2,r3,r2
    8d48:	10800003 	ldbu	r2,0(r2)
        };
    8d4c:	e037883a 	mov	sp,fp
    8d50:	df000017 	ldw	fp,0(sp)
    8d54:	dec00104 	addi	sp,sp,4
    8d58:	f800283a 	ret

00008d5c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    8d5c:	defffd04 	addi	sp,sp,-12
    8d60:	df000215 	stw	fp,8(sp)
    8d64:	df000204 	addi	fp,sp,8
    8d68:	e13ffe15 	stw	r4,-8(fp)
    8d6c:	2805883a 	mov	r2,r5
    8d70:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    8d74:	e0ffff03 	ldbu	r3,-4(fp)
    8d78:	008000b4 	movhi	r2,2
    8d7c:	1093bb84 	addi	r2,r2,20206
    8d80:	1885883a 	add	r2,r3,r2
    8d84:	10800003 	ldbu	r2,0(r2)
        };
    8d88:	e037883a 	mov	sp,fp
    8d8c:	df000017 	ldw	fp,0(sp)
    8d90:	dec00104 	addi	sp,sp,4
    8d94:	f800283a 	ret

00008d98 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    8d98:	defffe04 	addi	sp,sp,-8
    8d9c:	df000115 	stw	fp,4(sp)
    8da0:	df000104 	addi	fp,sp,4
    8da4:	e13fff15 	stw	r4,-4(fp)
    8da8:	e0bfff17 	ldw	r2,-4(fp)
    8dac:	10800303 	ldbu	r2,12(r2)
    8db0:	e037883a 	mov	sp,fp
    8db4:	df000017 	ldw	fp,0(sp)
    8db8:	dec00104 	addi	sp,sp,4
    8dbc:	f800283a 	ret

00008dc0 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    8dc0:	defffe04 	addi	sp,sp,-8
    8dc4:	df000115 	stw	fp,4(sp)
    8dc8:	df000104 	addi	fp,sp,4
    8dcc:	e13fff15 	stw	r4,-4(fp)
    8dd0:	008000b4 	movhi	r2,2
    8dd4:	1093d804 	addi	r2,r2,20320
    8dd8:	e0ffff17 	ldw	r3,-4(fp)
    8ddc:	18800015 	stw	r2,0(r3)
    8de0:	0001883a 	nop
    8de4:	e037883a 	mov	sp,fp
    8de8:	df000017 	ldw	fp,0(sp)
    8dec:	dec00104 	addi	sp,sp,4
    8df0:	f800283a 	ret

00008df4 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    8df4:	defffd04 	addi	sp,sp,-12
    8df8:	df000215 	stw	fp,8(sp)
    8dfc:	df000204 	addi	fp,sp,8
    8e00:	2005883a 	mov	r2,r4
    8e04:	e17fff15 	stw	r5,-4(fp)
    8e08:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    8e0c:	0001883a 	nop
    8e10:	e037883a 	mov	sp,fp
    8e14:	df000017 	ldw	fp,0(sp)
    8e18:	dec00104 	addi	sp,sp,4
    8e1c:	f800283a 	ret

00008e20 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    8e20:	deffe204 	addi	sp,sp,-120
    8e24:	dfc01d15 	stw	ra,116(sp)
    8e28:	df001c15 	stw	fp,112(sp)
    8e2c:	df001c04 	addi	fp,sp,112
    8e30:	e13ffd15 	stw	r4,-12(fp)
    8e34:	2805883a 	mov	r2,r5
    8e38:	e1bfff15 	stw	r6,-4(fp)
    8e3c:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    8e40:	00801004 	movi	r2,64
    8e44:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    8e48:	e0bffd17 	ldw	r2,-12(fp)
    8e4c:	11000217 	ldw	r4,8(r2)
    8e50:	e0bffd17 	ldw	r2,-12(fp)
    8e54:	10800303 	ldbu	r2,12(r2)
    8e58:	11403fcc 	andi	r5,r2,255
    8e5c:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    8e60:	e0ffff17 	ldw	r3,-4(fp)
    8e64:	d8c00715 	stw	r3,28(sp)
    8e68:	e0ffec84 	addi	r3,fp,-78
    8e6c:	d8c00615 	stw	r3,24(sp)
    8e70:	00c01004 	movi	r3,64
    8e74:	d8c00515 	stw	r3,20(sp)
    8e78:	00c02004 	movi	r3,128
    8e7c:	d8c00415 	stw	r3,16(sp)
    8e80:	d8800315 	stw	r2,12(sp)
    8e84:	00800884 	movi	r2,34
    8e88:	d8800215 	stw	r2,8(sp)
    8e8c:	d8000115 	stw	zero,4(sp)
    8e90:	00800184 	movi	r2,6
    8e94:	d8800015 	stw	r2,0(sp)
    8e98:	01c02044 	movi	r7,129
    8e9c:	000d883a 	mov	r6,zero
    8ea0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    8ea4:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    8ea8:	e0bfec43 	ldbu	r2,-79(fp)
}
    8eac:	e037883a 	mov	sp,fp
    8eb0:	dfc00117 	ldw	ra,4(sp)
    8eb4:	df000017 	ldw	fp,0(sp)
    8eb8:	dec00204 	addi	sp,sp,8
    8ebc:	f800283a 	ret

00008ec0 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8ec0:	defff004 	addi	sp,sp,-64
    8ec4:	dfc00f15 	stw	ra,60(sp)
    8ec8:	df000e15 	stw	fp,56(sp)
    8ecc:	df000e04 	addi	fp,sp,56
    8ed0:	e13ffa15 	stw	r4,-24(fp)
    8ed4:	2811883a 	mov	r8,r5
    8ed8:	300b883a 	mov	r5,r6
    8edc:	3809883a 	mov	r4,r7
    8ee0:	e0c00217 	ldw	r3,8(fp)
    8ee4:	e0800317 	ldw	r2,12(fp)
    8ee8:	e23ffb05 	stb	r8,-20(fp)
    8eec:	e17ffc05 	stb	r5,-16(fp)
    8ef0:	e13ffd05 	stb	r4,-12(fp)
    8ef4:	e0fffe05 	stb	r3,-8(fp)
    8ef8:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8efc:	e0bffa17 	ldw	r2,-24(fp)
    8f00:	12000217 	ldw	r8,8(r2)
    8f04:	e0bffa17 	ldw	r2,-24(fp)
    8f08:	10800303 	ldbu	r2,12(r2)
    8f0c:	12403fcc 	andi	r9,r2,255
    8f10:	e2bffb03 	ldbu	r10,-20(fp)
    8f14:	e0bffe03 	ldbu	r2,-8(fp)
    8f18:	e0fffd03 	ldbu	r3,-12(fp)
    8f1c:	e13ffc03 	ldbu	r4,-16(fp)
    8f20:	e17fff0b 	ldhu	r5,-4(fp)
    8f24:	e1bfff0b 	ldhu	r6,-4(fp)
    8f28:	d8000715 	stw	zero,28(sp)
    8f2c:	e1c00417 	ldw	r7,16(fp)
    8f30:	d9c00615 	stw	r7,24(sp)
    8f34:	d9800515 	stw	r6,20(sp)
    8f38:	d9400415 	stw	r5,16(sp)
    8f3c:	d9000315 	stw	r4,12(sp)
    8f40:	d8c00215 	stw	r3,8(sp)
    8f44:	d8800115 	stw	r2,4(sp)
    8f48:	00800244 	movi	r2,9
    8f4c:	d8800015 	stw	r2,0(sp)
    8f50:	01c00844 	movi	r7,33
    8f54:	500d883a 	mov	r6,r10
    8f58:	480b883a 	mov	r5,r9
    8f5c:	4009883a 	mov	r4,r8
    8f60:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8f64:	e037883a 	mov	sp,fp
    8f68:	dfc00117 	ldw	ra,4(sp)
    8f6c:	df000017 	ldw	fp,0(sp)
    8f70:	dec00204 	addi	sp,sp,8
    8f74:	f800283a 	ret

00008f78 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8f78:	defff004 	addi	sp,sp,-64
    8f7c:	dfc00f15 	stw	ra,60(sp)
    8f80:	df000e15 	stw	fp,56(sp)
    8f84:	df000e04 	addi	fp,sp,56
    8f88:	e13ffa15 	stw	r4,-24(fp)
    8f8c:	2811883a 	mov	r8,r5
    8f90:	300b883a 	mov	r5,r6
    8f94:	3809883a 	mov	r4,r7
    8f98:	e0c00217 	ldw	r3,8(fp)
    8f9c:	e0800317 	ldw	r2,12(fp)
    8fa0:	e23ffb05 	stb	r8,-20(fp)
    8fa4:	e17ffc05 	stb	r5,-16(fp)
    8fa8:	e13ffd05 	stb	r4,-12(fp)
    8fac:	e0fffe05 	stb	r3,-8(fp)
    8fb0:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8fb4:	e0bffa17 	ldw	r2,-24(fp)
    8fb8:	12000217 	ldw	r8,8(r2)
    8fbc:	e0bffa17 	ldw	r2,-24(fp)
    8fc0:	10800303 	ldbu	r2,12(r2)
    8fc4:	12403fcc 	andi	r9,r2,255
    8fc8:	e2bffb03 	ldbu	r10,-20(fp)
    8fcc:	e0bffe03 	ldbu	r2,-8(fp)
    8fd0:	e0fffd03 	ldbu	r3,-12(fp)
    8fd4:	e13ffc03 	ldbu	r4,-16(fp)
    8fd8:	e17fff0b 	ldhu	r5,-4(fp)
    8fdc:	e1bfff0b 	ldhu	r6,-4(fp)
    8fe0:	d8000715 	stw	zero,28(sp)
    8fe4:	e1c00417 	ldw	r7,16(fp)
    8fe8:	d9c00615 	stw	r7,24(sp)
    8fec:	d9800515 	stw	r6,20(sp)
    8ff0:	d9400415 	stw	r5,16(sp)
    8ff4:	d9000315 	stw	r4,12(sp)
    8ff8:	d8c00215 	stw	r3,8(sp)
    8ffc:	d8800115 	stw	r2,4(sp)
    9000:	00800044 	movi	r2,1
    9004:	d8800015 	stw	r2,0(sp)
    9008:	01c02844 	movi	r7,161
    900c:	500d883a 	mov	r6,r10
    9010:	480b883a 	mov	r5,r9
    9014:	4009883a 	mov	r4,r8
    9018:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    901c:	e037883a 	mov	sp,fp
    9020:	dfc00117 	ldw	ra,4(sp)
    9024:	df000017 	ldw	fp,0(sp)
    9028:	dec00204 	addi	sp,sp,8
    902c:	f800283a 	ret

00009030 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    9030:	defff204 	addi	sp,sp,-56
    9034:	dfc00d15 	stw	ra,52(sp)
    9038:	df000c15 	stw	fp,48(sp)
    903c:	df000c04 	addi	fp,sp,48
    9040:	e13ffc15 	stw	r4,-16(fp)
    9044:	2807883a 	mov	r3,r5
    9048:	3005883a 	mov	r2,r6
    904c:	e1ffff15 	stw	r7,-4(fp)
    9050:	e0fffd05 	stb	r3,-12(fp)
    9054:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    9058:	e0bffc17 	ldw	r2,-16(fp)
    905c:	12000217 	ldw	r8,8(r2)
    9060:	e0bffc17 	ldw	r2,-16(fp)
    9064:	10800303 	ldbu	r2,12(r2)
    9068:	11403fcc 	andi	r5,r2,255
    906c:	e0bffe03 	ldbu	r2,-8(fp)
    9070:	e0fffd03 	ldbu	r3,-12(fp)
    9074:	d8000715 	stw	zero,28(sp)
    9078:	e13fff17 	ldw	r4,-4(fp)
    907c:	d9000615 	stw	r4,24(sp)
    9080:	01000044 	movi	r4,1
    9084:	d9000515 	stw	r4,20(sp)
    9088:	01000044 	movi	r4,1
    908c:	d9000415 	stw	r4,16(sp)
    9090:	d8c00315 	stw	r3,12(sp)
    9094:	d8000215 	stw	zero,8(sp)
    9098:	d8800115 	stw	r2,4(sp)
    909c:	00800084 	movi	r2,2
    90a0:	d8800015 	stw	r2,0(sp)
    90a4:	01c02844 	movi	r7,161
    90a8:	000d883a 	mov	r6,zero
    90ac:	4009883a 	mov	r4,r8
    90b0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    90b4:	e037883a 	mov	sp,fp
    90b8:	dfc00117 	ldw	ra,4(sp)
    90bc:	df000017 	ldw	fp,0(sp)
    90c0:	dec00204 	addi	sp,sp,8
    90c4:	f800283a 	ret

000090c8 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    90c8:	defff204 	addi	sp,sp,-56
    90cc:	dfc00d15 	stw	ra,52(sp)
    90d0:	df000c15 	stw	fp,48(sp)
    90d4:	df000c04 	addi	fp,sp,48
    90d8:	e13ffc15 	stw	r4,-16(fp)
    90dc:	2809883a 	mov	r4,r5
    90e0:	3007883a 	mov	r3,r6
    90e4:	3805883a 	mov	r2,r7
    90e8:	e13ffd05 	stb	r4,-12(fp)
    90ec:	e0fffe05 	stb	r3,-8(fp)
    90f0:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    90f4:	e0bffc17 	ldw	r2,-16(fp)
    90f8:	12000217 	ldw	r8,8(r2)
    90fc:	e0bffc17 	ldw	r2,-16(fp)
    9100:	10800303 	ldbu	r2,12(r2)
    9104:	11403fcc 	andi	r5,r2,255
    9108:	e0bffe03 	ldbu	r2,-8(fp)
    910c:	e0ffff03 	ldbu	r3,-4(fp)
    9110:	e13ffd03 	ldbu	r4,-12(fp)
    9114:	d8000715 	stw	zero,28(sp)
    9118:	d8000615 	stw	zero,24(sp)
    911c:	d8000515 	stw	zero,20(sp)
    9120:	d8000415 	stw	zero,16(sp)
    9124:	d9000315 	stw	r4,12(sp)
    9128:	d8c00215 	stw	r3,8(sp)
    912c:	d8800115 	stw	r2,4(sp)
    9130:	00800284 	movi	r2,10
    9134:	d8800015 	stw	r2,0(sp)
    9138:	01c00844 	movi	r7,33
    913c:	000d883a 	mov	r6,zero
    9140:	4009883a 	mov	r4,r8
    9144:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9148:	e037883a 	mov	sp,fp
    914c:	dfc00117 	ldw	ra,4(sp)
    9150:	df000017 	ldw	fp,0(sp)
    9154:	dec00204 	addi	sp,sp,8
    9158:	f800283a 	ret

0000915c <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    915c:	defff304 	addi	sp,sp,-52
    9160:	dfc00c15 	stw	ra,48(sp)
    9164:	df000b15 	stw	fp,44(sp)
    9168:	df000b04 	addi	fp,sp,44
    916c:	e13ffd15 	stw	r4,-12(fp)
    9170:	2807883a 	mov	r3,r5
    9174:	3005883a 	mov	r2,r6
    9178:	e0fffe05 	stb	r3,-8(fp)
    917c:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    9180:	e0bffd17 	ldw	r2,-12(fp)
    9184:	11000217 	ldw	r4,8(r2)
    9188:	e0bffd17 	ldw	r2,-12(fp)
    918c:	10800303 	ldbu	r2,12(r2)
    9190:	11403fcc 	andi	r5,r2,255
    9194:	e0bfff03 	ldbu	r2,-4(fp)
    9198:	e0fffe03 	ldbu	r3,-8(fp)
    919c:	d8000715 	stw	zero,28(sp)
    91a0:	d8000615 	stw	zero,24(sp)
    91a4:	d8000515 	stw	zero,20(sp)
    91a8:	d8000415 	stw	zero,16(sp)
    91ac:	d8c00315 	stw	r3,12(sp)
    91b0:	d8000215 	stw	zero,8(sp)
    91b4:	d8800115 	stw	r2,4(sp)
    91b8:	008002c4 	movi	r2,11
    91bc:	d8800015 	stw	r2,0(sp)
    91c0:	01c00844 	movi	r7,33
    91c4:	000d883a 	mov	r6,zero
    91c8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    91cc:	e037883a 	mov	sp,fp
    91d0:	dfc00117 	ldw	ra,4(sp)
    91d4:	df000017 	ldw	fp,0(sp)
    91d8:	dec00204 	addi	sp,sp,8
    91dc:	f800283a 	ret

000091e0 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    91e0:	defff304 	addi	sp,sp,-52
    91e4:	dfc00c15 	stw	ra,48(sp)
    91e8:	df000b15 	stw	fp,44(sp)
    91ec:	df000b04 	addi	fp,sp,44
    91f0:	e13ffd15 	stw	r4,-12(fp)
    91f4:	2805883a 	mov	r2,r5
    91f8:	e1bfff15 	stw	r6,-4(fp)
    91fc:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    9200:	e0bffd17 	ldw	r2,-12(fp)
    9204:	11000217 	ldw	r4,8(r2)
    9208:	e0bffd17 	ldw	r2,-12(fp)
    920c:	10800303 	ldbu	r2,12(r2)
    9210:	11403fcc 	andi	r5,r2,255
    9214:	e0bffe03 	ldbu	r2,-8(fp)
    9218:	d8000715 	stw	zero,28(sp)
    921c:	e0ffff17 	ldw	r3,-4(fp)
    9220:	d8c00615 	stw	r3,24(sp)
    9224:	00c00044 	movi	r3,1
    9228:	d8c00515 	stw	r3,20(sp)
    922c:	00c00044 	movi	r3,1
    9230:	d8c00415 	stw	r3,16(sp)
    9234:	d8800315 	stw	r2,12(sp)
    9238:	d8000215 	stw	zero,8(sp)
    923c:	d8000115 	stw	zero,4(sp)
    9240:	008000c4 	movi	r2,3
    9244:	d8800015 	stw	r2,0(sp)
    9248:	01c02844 	movi	r7,161
    924c:	000d883a 	mov	r6,zero
    9250:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9254:	e037883a 	mov	sp,fp
    9258:	dfc00117 	ldw	ra,4(sp)
    925c:	df000017 	ldw	fp,0(sp)
    9260:	dec00204 	addi	sp,sp,8
    9264:	f800283a 	ret

00009268 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    9268:	defffc04 	addi	sp,sp,-16
    926c:	dfc00315 	stw	ra,12(sp)
    9270:	df000215 	stw	fp,8(sp)
    9274:	df000204 	addi	fp,sp,8
    9278:	e13ffe15 	stw	r4,-8(fp)
    927c:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    9280:	e0bfff17 	ldw	r2,-4(fp)
    9284:	10800003 	ldbu	r2,0(r2)
    9288:	10803fcc 	andi	r2,r2,255
    928c:	01402004 	movi	r5,128
    9290:	1009883a 	mov	r4,r2
    9294:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    9298:	e0bfff17 	ldw	r2,-4(fp)
    929c:	10800043 	ldbu	r2,1(r2)
    92a0:	10803fcc 	andi	r2,r2,255
    92a4:	01402004 	movi	r5,128
    92a8:	1009883a 	mov	r4,r2
    92ac:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    92b0:	e0bfff17 	ldw	r2,-4(fp)
    92b4:	10800083 	ldbu	r2,2(r2)
    92b8:	10803fcc 	andi	r2,r2,255
    92bc:	01402004 	movi	r5,128
    92c0:	1009883a 	mov	r4,r2
    92c4:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    92c8:	e0bfff17 	ldw	r2,-4(fp)
    92cc:	108000c3 	ldbu	r2,3(r2)
    92d0:	10803fcc 	andi	r2,r2,255
    92d4:	01402004 	movi	r5,128
    92d8:	1009883a 	mov	r4,r2
    92dc:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    92e0:	e0bfff17 	ldw	r2,-4(fp)
    92e4:	10c00103 	ldbu	r3,4(r2)
    92e8:	10800143 	ldbu	r2,5(r2)
    92ec:	1004923a 	slli	r2,r2,8
    92f0:	10c4b03a 	or	r2,r2,r3
    92f4:	10bfffcc 	andi	r2,r2,65535
    92f8:	01402004 	movi	r5,128
    92fc:	1009883a 	mov	r4,r2
    9300:	0008df40 	call	8df4 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    9304:	e0bfff17 	ldw	r2,-4(fp)
    9308:	10800183 	ldbu	r2,6(r2)
    930c:	10803fcc 	andi	r2,r2,255
    9310:	01402004 	movi	r5,128
    9314:	1009883a 	mov	r4,r2
    9318:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
}
    931c:	0001883a 	nop
    9320:	e037883a 	mov	sp,fp
    9324:	dfc00117 	ldw	ra,4(sp)
    9328:	df000017 	ldw	fp,0(sp)
    932c:	dec00204 	addi	sp,sp,8
    9330:	f800283a 	ret

00009334 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    9334:	defffc04 	addi	sp,sp,-16
    9338:	dfc00315 	stw	ra,12(sp)
    933c:	df000215 	stw	fp,8(sp)
    9340:	df000204 	addi	fp,sp,8
    9344:	e13ffe15 	stw	r4,-8(fp)
    9348:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    934c:	e0bfff17 	ldw	r2,-4(fp)
    9350:	10800003 	ldbu	r2,0(r2)
    9354:	10803fcc 	andi	r2,r2,255
    9358:	01402004 	movi	r5,128
    935c:	1009883a 	mov	r4,r2
    9360:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    9364:	e0bfff17 	ldw	r2,-4(fp)
    9368:	10800043 	ldbu	r2,1(r2)
    936c:	10803fcc 	andi	r2,r2,255
    9370:	01402004 	movi	r5,128
    9374:	1009883a 	mov	r4,r2
    9378:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    937c:	e0bfff17 	ldw	r2,-4(fp)
    9380:	10c00083 	ldbu	r3,2(r2)
    9384:	108000c3 	ldbu	r2,3(r2)
    9388:	1004923a 	slli	r2,r2,8
    938c:	10c4b03a 	or	r2,r2,r3
    9390:	10bfffcc 	andi	r2,r2,65535
    9394:	01402004 	movi	r5,128
    9398:	1009883a 	mov	r4,r2
    939c:	0008df40 	call	8df4 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    93a0:	e0bfff17 	ldw	r2,-4(fp)
    93a4:	10800103 	ldbu	r2,4(r2)
    93a8:	10803fcc 	andi	r2,r2,255
    93ac:	01402004 	movi	r5,128
    93b0:	1009883a 	mov	r4,r2
    93b4:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    93b8:	e0bfff17 	ldw	r2,-4(fp)
    93bc:	10800143 	ldbu	r2,5(r2)
    93c0:	10803fcc 	andi	r2,r2,255
    93c4:	01402004 	movi	r5,128
    93c8:	1009883a 	mov	r4,r2
    93cc:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    93d0:	e0bfff17 	ldw	r2,-4(fp)
    93d4:	10800183 	ldbu	r2,6(r2)
    93d8:	10803fcc 	andi	r2,r2,255
    93dc:	01402004 	movi	r5,128
    93e0:	1009883a 	mov	r4,r2
    93e4:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    93e8:	e0bfff17 	ldw	r2,-4(fp)
    93ec:	10c001c3 	ldbu	r3,7(r2)
    93f0:	10800203 	ldbu	r2,8(r2)
    93f4:	1004923a 	slli	r2,r2,8
    93f8:	10c4b03a 	or	r2,r2,r3
    93fc:	10bfffcc 	andi	r2,r2,65535
    9400:	01402004 	movi	r5,128
    9404:	1009883a 	mov	r4,r2
    9408:	0008df40 	call	8df4 <_Z10D_PrintHexItEvT_i>
}
    940c:	0001883a 	nop
    9410:	e037883a 	mov	sp,fp
    9414:	dfc00117 	ldw	ra,4(sp)
    9418:	df000017 	ldw	fp,0(sp)
    941c:	dec00204 	addi	sp,sp,8
    9420:	f800283a 	ret

00009424 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    9424:	defffd04 	addi	sp,sp,-12
    9428:	dfc00215 	stw	ra,8(sp)
    942c:	df000115 	stw	fp,4(sp)
    9430:	df000104 	addi	fp,sp,4
    9434:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    9438:	010000b4 	movhi	r4,2
    943c:	211c2004 	addi	r4,r4,28800
    9440:	000de3c0 	call	de3c <puts>
	vbusState = 0;
    9444:	d0323745 	stb	zero,-14115(gp)
};
    9448:	0001883a 	nop
    944c:	e037883a 	mov	sp,fp
    9450:	dfc00117 	ldw	ra,4(sp)
    9454:	df000017 	ldw	fp,0(sp)
    9458:	dec00204 	addi	sp,sp,8
    945c:	f800283a 	ret

00009460 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    9460:	defffe04 	addi	sp,sp,-8
    9464:	df000115 	stw	fp,4(sp)
    9468:	df000104 	addi	fp,sp,4
    946c:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    9470:	d0b23743 	ldbu	r2,-14115(gp)
};
    9474:	e037883a 	mov	sp,fp
    9478:	df000017 	ldw	fp,0(sp)
    947c:	dec00104 	addi	sp,sp,4
    9480:	f800283a 	ret

00009484 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    9484:	defff704 	addi	sp,sp,-36
    9488:	dfc00815 	stw	ra,32(sp)
    948c:	df000715 	stw	fp,28(sp)
    9490:	df000704 	addi	fp,sp,28
    9494:	e13ffd15 	stw	r4,-12(fp)
    9498:	2807883a 	mov	r3,r5
    949c:	3005883a 	mov	r2,r6
    94a0:	e0fffe05 	stb	r3,-8(fp)
    94a4:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    94a8:	e03ffc45 	stb	zero,-15(fp)
    94ac:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    94b0:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    94b4:	e0bffe03 	ldbu	r2,-8(fp)
    94b8:	10800084 	addi	r2,r2,2
    94bc:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    94c0:	e0bfff03 	ldbu	r2,-4(fp)
    94c4:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    94c8:	e0fffc44 	addi	r3,fp,-15
    94cc:	d8000215 	stw	zero,8(sp)
    94d0:	e0bffcc4 	addi	r2,fp,-13
    94d4:	d8800115 	stw	r2,4(sp)
    94d8:	d8000015 	stw	zero,0(sp)
    94dc:	180f883a 	mov	r7,r3
    94e0:	01800084 	movi	r6,2
    94e4:	000b883a 	mov	r5,zero
    94e8:	01010034 	movhi	r4,1024
    94ec:	21044804 	addi	r4,r4,4384
    94f0:	00210f40 	call	210f4 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    94f4:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    94f8:	0001883a 	nop
    94fc:	e037883a 	mov	sp,fp
    9500:	dfc00117 	ldw	ra,4(sp)
    9504:	df000017 	ldw	fp,0(sp)
    9508:	dec00204 	addi	sp,sp,8
    950c:	f800283a 	ret

00009510 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9510:	defff304 	addi	sp,sp,-52
    9514:	dfc00c15 	stw	ra,48(sp)
    9518:	df000b15 	stw	fp,44(sp)
    951c:	dc000a15 	stw	r16,40(sp)
    9520:	df000b04 	addi	fp,sp,44
    9524:	e13ffb15 	stw	r4,-20(fp)
    9528:	3009883a 	mov	r4,r6
    952c:	e1fffe15 	stw	r7,-8(fp)
    9530:	e17ffc05 	stb	r5,-16(fp)
    9534:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9538:	d809883a 	mov	r4,sp
    953c:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    9540:	e13ffd03 	ldbu	r4,-12(fp)
    9544:	e13ff815 	stw	r4,-32(fp)
    9548:	200b883a 	mov	r5,r4
    954c:	29400044 	addi	r5,r5,1
    9550:	2819883a 	mov	r12,r5
    9554:	001b883a 	mov	r13,zero
    9558:	600ad77a 	srli	r5,r12,29
    955c:	681290fa 	slli	r9,r13,3
    9560:	2a52b03a 	or	r9,r5,r9
    9564:	601090fa 	slli	r8,r12,3
    9568:	200b883a 	mov	r5,r4
    956c:	29400044 	addi	r5,r5,1
    9570:	2815883a 	mov	r10,r5
    9574:	0017883a 	mov	r11,zero
    9578:	500ad77a 	srli	r5,r10,29
    957c:	580690fa 	slli	r3,r11,3
    9580:	28c6b03a 	or	r3,r5,r3
    9584:	500490fa 	slli	r2,r10,3
    9588:	2005883a 	mov	r2,r4
    958c:	10800044 	addi	r2,r2,1
    9590:	108000c4 	addi	r2,r2,3
    9594:	1004d0ba 	srli	r2,r2,2
    9598:	1085883a 	add	r2,r2,r2
    959c:	1085883a 	add	r2,r2,r2
    95a0:	d8b7c83a 	sub	sp,sp,r2
    95a4:	d8800304 	addi	r2,sp,12
    95a8:	1005883a 	mov	r2,r2
    95ac:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    95b0:	e0bffc03 	ldbu	r2,-16(fp)
    95b4:	10800084 	addi	r2,r2,2
    95b8:	1007883a 	mov	r3,r2
    95bc:	e0bff917 	ldw	r2,-28(fp)
    95c0:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    95c4:	e0bff917 	ldw	r2,-28(fp)
    95c8:	10800044 	addi	r2,r2,1
    95cc:	e0fffd03 	ldbu	r3,-12(fp)
    95d0:	180d883a 	mov	r6,r3
    95d4:	e17ffe17 	ldw	r5,-8(fp)
    95d8:	1009883a 	mov	r4,r2
    95dc:	000da800 	call	da80 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    95e0:	e0bffd03 	ldbu	r2,-12(fp)
    95e4:	10800044 	addi	r2,r2,1
    95e8:	1009883a 	mov	r4,r2
    95ec:	e0fff917 	ldw	r3,-28(fp)
    95f0:	d8000215 	stw	zero,8(sp)
    95f4:	e0bffa44 	addi	r2,fp,-23
    95f8:	d8800115 	stw	r2,4(sp)
    95fc:	d8000015 	stw	zero,0(sp)
    9600:	180f883a 	mov	r7,r3
    9604:	200d883a 	mov	r6,r4
    9608:	000b883a 	mov	r5,zero
    960c:	01010034 	movhi	r4,1024
    9610:	21044804 	addi	r4,r4,4384
    9614:	00210f40 	call	210f4 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    9618:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    961c:	e0bffd03 	ldbu	r2,-12(fp)
    9620:	e0fffe17 	ldw	r3,-8(fp)
    9624:	1885883a 	add	r2,r3,r2
    9628:	8037883a 	mov	sp,r16
}
    962c:	e6ffff04 	addi	sp,fp,-4
    9630:	dfc00217 	ldw	ra,8(sp)
    9634:	df000117 	ldw	fp,4(sp)
    9638:	dc000017 	ldw	r16,0(sp)
    963c:	dec00304 	addi	sp,sp,12
    9640:	f800283a 	ret

00009644 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    9644:	defffc04 	addi	sp,sp,-16
    9648:	dfc00315 	stw	ra,12(sp)
    964c:	df000215 	stw	fp,8(sp)
    9650:	df000204 	addi	fp,sp,8
    9654:	e13ffe15 	stw	r4,-8(fp)
    9658:	2805883a 	mov	r2,r5
    965c:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    9660:	010000b4 	movhi	r4,2
    9664:	211c2604 	addi	r4,r4,28824
    9668:	000de3c0 	call	de3c <puts>
	regWr(rIOPINS1, data);
    966c:	e0bfff03 	ldbu	r2,-4(fp)
    9670:	100d883a 	mov	r6,r2
    9674:	01402804 	movi	r5,160
    9678:	e13ffe17 	ldw	r4,-8(fp)
    967c:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    9680:	e0bfff03 	ldbu	r2,-4(fp)
    9684:	1005d13a 	srai	r2,r2,4
    9688:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    968c:	e0bfff03 	ldbu	r2,-4(fp)
    9690:	100d883a 	mov	r6,r2
    9694:	01402a04 	movi	r5,168
    9698:	e13ffe17 	ldw	r4,-8(fp)
    969c:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
	return;
    96a0:	0001883a 	nop
}
    96a4:	e037883a 	mov	sp,fp
    96a8:	dfc00117 	ldw	ra,4(sp)
    96ac:	df000017 	ldw	fp,0(sp)
    96b0:	dec00204 	addi	sp,sp,8
    96b4:	f800283a 	ret

000096b8 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    96b8:	defff804 	addi	sp,sp,-32
    96bc:	dfc00715 	stw	ra,28(sp)
    96c0:	df000615 	stw	fp,24(sp)
    96c4:	df000604 	addi	fp,sp,24
    96c8:	e13ffe15 	stw	r4,-8(fp)
    96cc:	2805883a 	mov	r2,r5
    96d0:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    96d4:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    96d8:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    96dc:	e0bfff03 	ldbu	r2,-4(fp)
    96e0:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    96e4:	e0fffd44 	addi	r3,fp,-11
    96e8:	d8000215 	stw	zero,8(sp)
    96ec:	e0bffd84 	addi	r2,fp,-10
    96f0:	d8800115 	stw	r2,4(sp)
    96f4:	00800044 	movi	r2,1
    96f8:	d8800015 	stw	r2,0(sp)
    96fc:	180f883a 	mov	r7,r3
    9700:	01800044 	movi	r6,1
    9704:	000b883a 	mov	r5,zero
    9708:	01010034 	movhi	r4,1024
    970c:	21044804 	addi	r4,r4,4384
    9710:	00210f40 	call	210f4 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    9714:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    9718:	e0bffd83 	ldbu	r2,-10(fp)
}
    971c:	e037883a 	mov	sp,fp
    9720:	dfc00117 	ldw	ra,4(sp)
    9724:	df000017 	ldw	fp,0(sp)
    9728:	dec00204 	addi	sp,sp,8
    972c:	f800283a 	ret

00009730 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9730:	defff604 	addi	sp,sp,-40
    9734:	dfc00915 	stw	ra,36(sp)
    9738:	df000815 	stw	fp,32(sp)
    973c:	df000804 	addi	fp,sp,32
    9740:	e13ffc15 	stw	r4,-16(fp)
    9744:	2807883a 	mov	r3,r5
    9748:	3005883a 	mov	r2,r6
    974c:	e1ffff15 	stw	r7,-4(fp)
    9750:	e0fffd05 	stb	r3,-12(fp)
    9754:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9758:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    975c:	e0bffd03 	ldbu	r2,-12(fp)
    9760:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9764:	e0bffe03 	ldbu	r2,-8(fp)
    9768:	e13ffb44 	addi	r4,fp,-19
    976c:	d8000215 	stw	zero,8(sp)
    9770:	e0ffff17 	ldw	r3,-4(fp)
    9774:	d8c00115 	stw	r3,4(sp)
    9778:	d8800015 	stw	r2,0(sp)
    977c:	200f883a 	mov	r7,r4
    9780:	01800044 	movi	r6,1
    9784:	000b883a 	mov	r5,zero
    9788:	01010034 	movhi	r4,1024
    978c:	21044804 	addi	r4,r4,4384
    9790:	00210f40 	call	210f4 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    9794:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    9798:	e0bffe03 	ldbu	r2,-8(fp)
    979c:	e0ffff17 	ldw	r3,-4(fp)
    97a0:	1885883a 	add	r2,r3,r2
}
    97a4:	e037883a 	mov	sp,fp
    97a8:	dfc00117 	ldw	ra,4(sp)
    97ac:	df000017 	ldw	fp,0(sp)
    97b0:	dec00204 	addi	sp,sp,8
    97b4:	f800283a 	ret

000097b8 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    97b8:	defffc04 	addi	sp,sp,-16
    97bc:	dfc00315 	stw	ra,12(sp)
    97c0:	df000215 	stw	fp,8(sp)
    97c4:	df000204 	addi	fp,sp,8
    97c8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    97cc:	010000b4 	movhi	r4,2
    97d0:	211c2a04 	addi	r4,r4,28840
    97d4:	000de3c0 	call	de3c <puts>
	uint8_t gpin = 0;
    97d8:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    97dc:	01402a04 	movi	r5,168
    97e0:	e13fff17 	ldw	r4,-4(fp)
    97e4:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    97e8:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    97ec:	e0fffe03 	ldbu	r3,-8(fp)
    97f0:	00bffc04 	movi	r2,-16
    97f4:	1884703a 	and	r2,r3,r2
    97f8:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    97fc:	01402804 	movi	r5,160
    9800:	e13fff17 	ldw	r4,-4(fp)
    9804:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    9808:	10803fcc 	andi	r2,r2,255
    980c:	1005d13a 	srai	r2,r2,4
    9810:	1007883a 	mov	r3,r2
    9814:	e0bffe03 	ldbu	r2,-8(fp)
    9818:	1884b03a 	or	r2,r3,r2
    981c:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    9820:	e0bffe03 	ldbu	r2,-8(fp)
}
    9824:	e037883a 	mov	sp,fp
    9828:	dfc00117 	ldw	ra,4(sp)
    982c:	df000017 	ldw	fp,0(sp)
    9830:	dec00204 	addi	sp,sp,8
    9834:	f800283a 	ret

00009838 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    9838:	defffc04 	addi	sp,sp,-16
    983c:	dfc00315 	stw	ra,12(sp)
    9840:	df000215 	stw	fp,8(sp)
    9844:	df000204 	addi	fp,sp,8
    9848:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    984c:	010000b4 	movhi	r4,2
    9850:	211c2e04 	addi	r4,r4,28856
    9854:	000de3c0 	call	de3c <puts>
	uint8_t gpout = 0;
    9858:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    985c:	01402804 	movi	r5,160
    9860:	e13fff17 	ldw	r4,-4(fp)
    9864:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    9868:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    986c:	e0bffe03 	ldbu	r2,-8(fp)
    9870:	108003cc 	andi	r2,r2,15
    9874:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    9878:	01402a04 	movi	r5,168
    987c:	e13fff17 	ldw	r4,-4(fp)
    9880:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    9884:	10803fcc 	andi	r2,r2,255
    9888:	1004913a 	slli	r2,r2,4
    988c:	1007883a 	mov	r3,r2
    9890:	e0bffe03 	ldbu	r2,-8(fp)
    9894:	1884b03a 	or	r2,r3,r2
    9898:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    989c:	e0bffe03 	ldbu	r2,-8(fp)
}
    98a0:	e037883a 	mov	sp,fp
    98a4:	dfc00117 	ldw	ra,4(sp)
    98a8:	df000017 	ldw	fp,0(sp)
    98ac:	dec00204 	addi	sp,sp,8
    98b0:	f800283a 	ret

000098b4 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    98b4:	defffc04 	addi	sp,sp,-16
    98b8:	dfc00315 	stw	ra,12(sp)
    98bc:	df000215 	stw	fp,8(sp)
    98c0:	df000204 	addi	fp,sp,8
    98c4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    98c8:	010000b4 	movhi	r4,2
    98cc:	211c3404 	addi	r4,r4,28880
    98d0:	000de3c0 	call	de3c <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    98d4:	0007883a 	mov	r3,zero
    98d8:	00810034 	movhi	r2,1024
    98dc:	10847404 	addi	r2,r2,4560
    98e0:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    98e4:	010003f4 	movhi	r4,15
    98e8:	21109004 	addi	r4,r4,16960
    98ec:	001e8280 	call	1e828 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    98f0:	00c00044 	movi	r3,1
    98f4:	00810034 	movhi	r2,1024
    98f8:	10847404 	addi	r2,r2,4560
    98fc:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9900:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    9904:	01800804 	movi	r6,32
    9908:	01401e04 	movi	r5,120
    990c:	e13fff17 	ldw	r4,-4(fp)
    9910:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    9914:	000d883a 	mov	r6,zero
    9918:	01401e04 	movi	r5,120
    991c:	e13fff17 	ldw	r4,-4(fp)
    9920:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    9924:	e0bffe0b 	ldhu	r2,-8(fp)
    9928:	10800044 	addi	r2,r2,1
    992c:	e0bffe0d 	sth	r2,-8(fp)
    9930:	e0bffe0b 	ldhu	r2,-8(fp)
    9934:	1004c03a 	cmpne	r2,r2,zero
    9938:	10803fcc 	andi	r2,r2,255
    993c:	10000a26 	beq	r2,zero,9968 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    9940:	01401a04 	movi	r5,104
    9944:	e13fff17 	ldw	r4,-4(fp)
    9948:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    994c:	10803fcc 	andi	r2,r2,255
    9950:	1080004c 	andi	r2,r2,1
    9954:	1004c03a 	cmpne	r2,r2,zero
    9958:	10803fcc 	andi	r2,r2,255
    995c:	1000011e 	bne	r2,zero,9964 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    9960:	003ff006 	br	9924 <__alt_data_end+0xfc009924>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    9964:	0001883a 	nop
		}
	}
	return ( i);
    9968:	e0bffe0b 	ldhu	r2,-8(fp)
}
    996c:	e037883a 	mov	sp,fp
    9970:	dfc00117 	ldw	ra,4(sp)
    9974:	df000017 	ldw	fp,0(sp)
    9978:	dec00204 	addi	sp,sp,8
    997c:	f800283a 	ret

00009980 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    9980:	defffe04 	addi	sp,sp,-8
    9984:	df000115 	stw	fp,4(sp)
    9988:	df000104 	addi	fp,sp,4
    998c:	2005883a 	mov	r2,r4
    9990:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    9994:	00800044 	movi	r2,1
}
    9998:	e037883a 	mov	sp,fp
    999c:	df000017 	ldw	fp,0(sp)
    99a0:	dec00104 	addi	sp,sp,4
    99a4:	f800283a 	ret

000099a8 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    99a8:	defffd04 	addi	sp,sp,-12
    99ac:	dfc00215 	stw	ra,8(sp)
    99b0:	df000115 	stw	fp,4(sp)
    99b4:	df000104 	addi	fp,sp,4
    99b8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    99bc:	010000b4 	movhi	r4,2
    99c0:	211c3804 	addi	r4,r4,28896
    99c4:	000de3c0 	call	de3c <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    99c8:	01800604 	movi	r6,24
    99cc:	01402204 	movi	r5,136
    99d0:	e13fff17 	ldw	r4,-4(fp)
    99d4:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    99d8:	e13fff17 	ldw	r4,-4(fp)
    99dc:	00098b40 	call	98b4 <_ZN8MAX3421e5resetEv>
    99e0:	10bfffcc 	andi	r2,r2,65535
    99e4:	1005003a 	cmpeq	r2,r2,zero
    99e8:	10803fcc 	andi	r2,r2,255
    99ec:	10000226 	beq	r2,zero,99f8 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    99f0:	00bfffc4 	movi	r2,-1
    99f4:	00002006 	br	9a78 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    99f8:	01803044 	movi	r6,193
    99fc:	01403604 	movi	r5,216
    9a00:	e13fff17 	ldw	r4,-4(fp)
    9a04:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9a08:	01801804 	movi	r6,96
    9a0c:	01403404 	movi	r5,208
    9a10:	e13fff17 	ldw	r4,-4(fp)
    9a14:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9a18:	01800104 	movi	r6,4
    9a1c:	01403a04 	movi	r5,232
    9a20:	e13fff17 	ldw	r4,-4(fp)
    9a24:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9a28:	01403a04 	movi	r5,232
    9a2c:	e13fff17 	ldw	r4,-4(fp)
    9a30:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    9a34:	10803fcc 	andi	r2,r2,255
    9a38:	1080010c 	andi	r2,r2,4
    9a3c:	1005003a 	cmpeq	r2,r2,zero
    9a40:	10803fcc 	andi	r2,r2,255
    9a44:	10000126 	beq	r2,zero,9a4c <_ZN8MAX3421e4InitEv+0xa4>
    9a48:	003ff706 	br	9a28 <__alt_data_end+0xfc009a28>

	busprobe(); //check if anything is connected
    9a4c:	e13fff17 	ldw	r4,-4(fp)
    9a50:	0009ba40 	call	9ba4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9a54:	01800804 	movi	r6,32
    9a58:	01403204 	movi	r5,200
    9a5c:	e13fff17 	ldw	r4,-4(fp)
    9a60:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9a64:	01800044 	movi	r6,1
    9a68:	01402004 	movi	r5,128
    9a6c:	e13fff17 	ldw	r4,-4(fp)
    9a70:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9a74:	0005883a 	mov	r2,zero
}
    9a78:	e037883a 	mov	sp,fp
    9a7c:	dfc00117 	ldw	ra,4(sp)
    9a80:	df000017 	ldw	fp,0(sp)
    9a84:	dec00204 	addi	sp,sp,8
    9a88:	f800283a 	ret

00009a8c <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    9a8c:	defffc04 	addi	sp,sp,-16
    9a90:	dfc00315 	stw	ra,12(sp)
    9a94:	df000215 	stw	fp,8(sp)
    9a98:	df000204 	addi	fp,sp,8
    9a9c:	e13ffe15 	stw	r4,-8(fp)
    9aa0:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9aa4:	010000b4 	movhi	r4,2
    9aa8:	211c3c04 	addi	r4,r4,28912
    9aac:	000de3c0 	call	de3c <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9ab0:	01800644 	movi	r6,25
    9ab4:	01402204 	movi	r5,136
    9ab8:	e13ffe17 	ldw	r4,-8(fp)
    9abc:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9ac0:	e13ffe17 	ldw	r4,-8(fp)
    9ac4:	00098b40 	call	98b4 <_ZN8MAX3421e5resetEv>
    9ac8:	10bfffcc 	andi	r2,r2,65535
    9acc:	1005003a 	cmpeq	r2,r2,zero
    9ad0:	10803fcc 	andi	r2,r2,255
    9ad4:	10000226 	beq	r2,zero,9ae0 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9ad8:	00bfffc4 	movi	r2,-1
    9adc:	00002c06 	br	9b90 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9ae0:	e0bfff17 	ldw	r2,-4(fp)
    9ae4:	1080fa08 	cmpgei	r2,r2,1000
    9ae8:	1000021e 	bne	r2,zero,9af4 <_ZN8MAX3421e4InitEi+0x68>
    9aec:	0080fa04 	movi	r2,1000
    9af0:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9af4:	e0bfff17 	ldw	r2,-4(fp)
    9af8:	1009883a 	mov	r4,r2
    9afc:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9b00:	01803044 	movi	r6,193
    9b04:	01403604 	movi	r5,216
    9b08:	e13ffe17 	ldw	r4,-8(fp)
    9b0c:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9b10:	01801804 	movi	r6,96
    9b14:	01403404 	movi	r5,208
    9b18:	e13ffe17 	ldw	r4,-8(fp)
    9b1c:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9b20:	01800104 	movi	r6,4
    9b24:	01403a04 	movi	r5,232
    9b28:	e13ffe17 	ldw	r4,-8(fp)
    9b2c:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9b30:	01403a04 	movi	r5,232
    9b34:	e13ffe17 	ldw	r4,-8(fp)
    9b38:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    9b3c:	10803fcc 	andi	r2,r2,255
    9b40:	1080010c 	andi	r2,r2,4
    9b44:	1005003a 	cmpeq	r2,r2,zero
    9b48:	10803fcc 	andi	r2,r2,255
    9b4c:	10000126 	beq	r2,zero,9b54 <_ZN8MAX3421e4InitEi+0xc8>
    9b50:	003ff706 	br	9b30 <__alt_data_end+0xfc009b30>

	busprobe(); //check if anything is connected
    9b54:	e13ffe17 	ldw	r4,-8(fp)
    9b58:	0009ba40 	call	9ba4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9b5c:	01800804 	movi	r6,32
    9b60:	01403204 	movi	r5,200
    9b64:	e13ffe17 	ldw	r4,-8(fp)
    9b68:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9b6c:	01800044 	movi	r6,1
    9b70:	01402004 	movi	r5,128
    9b74:	e13ffe17 	ldw	r4,-8(fp)
    9b78:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9b7c:	01800604 	movi	r6,24
    9b80:	01402204 	movi	r5,136
    9b84:	e13ffe17 	ldw	r4,-8(fp)
    9b88:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9b8c:	0005883a 	mov	r2,zero
}
    9b90:	e037883a 	mov	sp,fp
    9b94:	dfc00117 	ldw	ra,4(sp)
    9b98:	df000017 	ldw	fp,0(sp)
    9b9c:	dec00204 	addi	sp,sp,8
    9ba0:	f800283a 	ret

00009ba4 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9ba4:	defffc04 	addi	sp,sp,-16
    9ba8:	dfc00315 	stw	ra,12(sp)
    9bac:	df000215 	stw	fp,8(sp)
    9bb0:	df000204 	addi	fp,sp,8
    9bb4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9bb8:	010000b4 	movhi	r4,2
    9bbc:	211c4204 	addi	r4,r4,28936
    9bc0:	000de3c0 	call	de3c <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9bc4:	01403e04 	movi	r5,248
    9bc8:	e13fff17 	ldw	r4,-4(fp)
    9bcc:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    9bd0:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    9bd4:	e0fffe03 	ldbu	r3,-8(fp)
    9bd8:	00bff004 	movi	r2,-64
    9bdc:	1884703a 	and	r2,r3,r2
    9be0:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    9be4:	e0bffe03 	ldbu	r2,-8(fp)
    9be8:	10c01020 	cmpeqi	r3,r2,64
    9bec:	1800251e 	bne	r3,zero,9c84 <_ZN8MAX3421e8busprobeEv+0xe0>
    9bf0:	10c01048 	cmpgei	r3,r2,65
    9bf4:	1800021e 	bne	r3,zero,9c00 <_ZN8MAX3421e8busprobeEv+0x5c>
    9bf8:	10003b26 	beq	r2,zero,9ce8 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9bfc:	00004006 	br	9d00 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    9c00:	10c02020 	cmpeqi	r3,r2,128
    9c04:	1800031e 	bne	r3,zero,9c14 <_ZN8MAX3421e8busprobeEv+0x70>
    9c08:	10803020 	cmpeqi	r2,r2,192
    9c0c:	1000331e 	bne	r2,zero,9cdc <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9c10:	00003b06 	br	9d00 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9c14:	01403604 	movi	r5,216
    9c18:	e13fff17 	ldw	r4,-4(fp)
    9c1c:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    9c20:	10803fcc 	andi	r2,r2,255
    9c24:	1080008c 	andi	r2,r2,2
    9c28:	1005003a 	cmpeq	r2,r2,zero
    9c2c:	10803fcc 	andi	r2,r2,255
    9c30:	10000a26 	beq	r2,zero,9c5c <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    9c34:	010000b4 	movhi	r4,2
    9c38:	211c4704 	addi	r4,r4,28956
    9c3c:	000de3c0 	call	de3c <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9c40:	01803244 	movi	r6,201
    9c44:	01403604 	movi	r5,216
    9c48:	e13fff17 	ldw	r4,-4(fp)
    9c4c:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9c50:	00800084 	movi	r2,2
    9c54:	d0b23745 	stb	r2,-14115(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    9c58:	00002906 	br	9d00 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    9c5c:	010000b4 	movhi	r4,2
    9c60:	211c4e04 	addi	r4,r4,28984
    9c64:	000de3c0 	call	de3c <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9c68:	018032c4 	movi	r6,203
    9c6c:	01403604 	movi	r5,216
    9c70:	e13fff17 	ldw	r4,-4(fp)
    9c74:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9c78:	008000c4 	movi	r2,3
    9c7c:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
    9c80:	00001f06 	br	9d00 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9c84:	01403604 	movi	r5,216
    9c88:	e13fff17 	ldw	r4,-4(fp)
    9c8c:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    9c90:	10803fcc 	andi	r2,r2,255
    9c94:	1080008c 	andi	r2,r2,2
    9c98:	1005003a 	cmpeq	r2,r2,zero
    9c9c:	10803fcc 	andi	r2,r2,255
    9ca0:	10000726 	beq	r2,zero,9cc0 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9ca4:	018032c4 	movi	r6,203
    9ca8:	01403604 	movi	r5,216
    9cac:	e13fff17 	ldw	r4,-4(fp)
    9cb0:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9cb4:	008000c4 	movi	r2,3
    9cb8:	d0b23745 	stb	r2,-14115(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    9cbc:	00001006 	br	9d00 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9cc0:	01803244 	movi	r6,201
    9cc4:	01403604 	movi	r5,216
    9cc8:	e13fff17 	ldw	r4,-4(fp)
    9ccc:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9cd0:	00800084 	movi	r2,2
    9cd4:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
    9cd8:	00000906 	br	9d00 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    9cdc:	00800044 	movi	r2,1
    9ce0:	d0b23745 	stb	r2,-14115(gp)
			break;
    9ce4:	00000606 	br	9d00 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    9ce8:	01803444 	movi	r6,209
    9cec:	01403604 	movi	r5,216
    9cf0:	e13fff17 	ldw	r4,-4(fp)
    9cf4:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    9cf8:	d0323745 	stb	zero,-14115(gp)
			break;
    9cfc:	0001883a 	nop
	}//end switch( bus_sample )
}
    9d00:	0001883a 	nop
    9d04:	e037883a 	mov	sp,fp
    9d08:	dfc00117 	ldw	ra,4(sp)
    9d0c:	df000017 	ldw	fp,0(sp)
    9d10:	dec00204 	addi	sp,sp,8
    9d14:	f800283a 	ret

00009d18 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    9d18:	defffc04 	addi	sp,sp,-16
    9d1c:	dfc00315 	stw	ra,12(sp)
    9d20:	df000215 	stw	fp,8(sp)
    9d24:	df000204 	addi	fp,sp,8
    9d28:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    9d2c:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    9d30:	00810034 	movhi	r2,1024
    9d34:	10847c04 	addi	r2,r2,4592
    9d38:	10800003 	ldbu	r2,0(r2)
    9d3c:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    9d40:	00810034 	movhi	r2,1024
    9d44:	10847c04 	addi	r2,r2,4592
    9d48:	10800037 	ldwio	r2,0(r2)
    9d4c:	1005003a 	cmpeq	r2,r2,zero
    9d50:	10803fcc 	andi	r2,r2,255
    9d54:	10000326 	beq	r2,zero,9d64 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    9d58:	e13fff17 	ldw	r4,-4(fp)
    9d5c:	0009d7c0 	call	9d7c <_ZN8MAX3421e10IntHandlerEv>
    9d60:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    9d64:	e0bffe03 	ldbu	r2,-8(fp)
}
    9d68:	e037883a 	mov	sp,fp
    9d6c:	dfc00117 	ldw	ra,4(sp)
    9d70:	df000017 	ldw	fp,0(sp)
    9d74:	dec00204 	addi	sp,sp,8
    9d78:	f800283a 	ret

00009d7c <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    9d7c:	defffc04 	addi	sp,sp,-16
    9d80:	dfc00315 	stw	ra,12(sp)
    9d84:	df000215 	stw	fp,8(sp)
    9d88:	df000204 	addi	fp,sp,8
    9d8c:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    9d90:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    9d94:	01403204 	movi	r5,200
    9d98:	e13fff17 	ldw	r4,-4(fp)
    9d9c:	00096b80 	call	96b8 <_ZN8MAX3421e5regRdEh>
    9da0:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    9da4:	e0bffe43 	ldbu	r2,-7(fp)
    9da8:	1080080c 	andi	r2,r2,32
    9dac:	10000526 	beq	r2,zero,9dc4 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    9db0:	e13fff17 	ldw	r4,-4(fp)
    9db4:	0009ba40 	call	9ba4 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    9db8:	e0bffe03 	ldbu	r2,-8(fp)
    9dbc:	10800814 	ori	r2,r2,32
    9dc0:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    9dc4:	e0bffe03 	ldbu	r2,-8(fp)
    9dc8:	100d883a 	mov	r6,r2
    9dcc:	01403204 	movi	r5,200
    9dd0:	e13fff17 	ldw	r4,-4(fp)
    9dd4:	00094840 	call	9484 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    9dd8:	e0bffe03 	ldbu	r2,-8(fp)
}
    9ddc:	e037883a 	mov	sp,fp
    9de0:	dfc00117 	ldw	ra,4(sp)
    9de4:	df000017 	ldw	fp,0(sp)
    9de8:	dec00204 	addi	sp,sp,8
    9dec:	f800283a 	ret

00009df0 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    9df0:	defffe04 	addi	sp,sp,-8
    9df4:	df000115 	stw	fp,4(sp)
    9df8:	df000104 	addi	fp,sp,4
    9dfc:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    9e00:	0005883a 	mov	r2,zero
}
    9e04:	e037883a 	mov	sp,fp
    9e08:	df000017 	ldw	fp,0(sp)
    9e0c:	dec00104 	addi	sp,sp,4
    9e10:	f800283a 	ret

00009e14 <_Z6onInitv>:
ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure

void MIDI_poll();

void onInit()
{
    9e14:	defff804 	addi	sp,sp,-32
    9e18:	dfc00715 	stw	ra,28(sp)
    9e1c:	df000615 	stw	fp,24(sp)
    9e20:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    9e24:	010000f4 	movhi	r4,3
    9e28:	213f6104 	addi	r4,r4,-636
    9e2c:	000a26c0 	call	a26c <_ZN9USBH_MIDI8idVendorEv>
    9e30:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    9e34:	010000f4 	movhi	r4,3
    9e38:	213f6104 	addi	r4,r4,-636
    9e3c:	000a2940 	call	a294 <_ZN9USBH_MIDI9idProductEv>
    9e40:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    9e44:	e0fffa0b 	ldhu	r3,-24(fp)
    9e48:	e13ffa8b 	ldhu	r4,-22(fp)
    9e4c:	e0bffb04 	addi	r2,fp,-20
    9e50:	200f883a 	mov	r7,r4
    9e54:	180d883a 	mov	r6,r3
    9e58:	014000f4 	movhi	r5,3
    9e5c:	29648a04 	addi	r5,r5,-28120
    9e60:	1009883a 	mov	r4,r2
    9e64:	000e2000 	call	e200 <sprintf>
  printf("%s\n", buf);
    9e68:	e0bffb04 	addi	r2,fp,-20
    9e6c:	1009883a 	mov	r4,r2
    9e70:	000de3c0 	call	de3c <puts>
}
    9e74:	0001883a 	nop
    9e78:	e037883a 	mov	sp,fp
    9e7c:	dfc00117 	ldw	ra,4(sp)
    9e80:	df000017 	ldw	fp,0(sp)
    9e84:	dec00204 	addi	sp,sp,8
    9e88:	f800283a 	ret

00009e8c <_Z10MIDI_setupv>:

void MIDI_setup()
{
    9e8c:	defffe04 	addi	sp,sp,-8
    9e90:	dfc00115 	stw	ra,4(sp)
    9e94:	df000015 	stw	fp,0(sp)
    9e98:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    9e9c:	010000f4 	movhi	r4,3
    9ea0:	213f3204 	addi	r4,r4,-824
    9ea4:	00099a80 	call	99a8 <_ZN8MAX3421e4InitEv>
    9ea8:	10803fcc 	andi	r2,r2,255
    9eac:	1080201c 	xori	r2,r2,128
    9eb0:	10bfe004 	addi	r2,r2,-128
    9eb4:	10bfffe0 	cmpeqi	r2,r2,-1
    9eb8:	10803fcc 	andi	r2,r2,255
    9ebc:	10000326 	beq	r2,zero,9ecc <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    9ec0:	010000f4 	movhi	r4,3
    9ec4:	21248f04 	addi	r4,r4,-28100
    9ec8:	000dd200 	call	dd20 <printf>
	printf ("USB Started\n\r");
    9ecc:	010000f4 	movhi	r4,3
    9ed0:	21249104 	addi	r4,r4,-28092
    9ed4:	000dd200 	call	dd20 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    9ed8:	01400074 	movhi	r5,1
    9edc:	29678504 	addi	r5,r5,-25068
    9ee0:	010000f4 	movhi	r4,3
    9ee4:	213f6104 	addi	r4,r4,-636
    9ee8:	000a2bc0 	call	a2bc <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    9eec:	0001883a 	nop
    9ef0:	e037883a 	mov	sp,fp
    9ef4:	dfc00117 	ldw	ra,4(sp)
    9ef8:	df000017 	ldw	fp,0(sp)
    9efc:	dec00204 	addi	sp,sp,8
    9f00:	f800283a 	ret

00009f04 <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to serial MIDI
void MIDI_poll()
{
    9f04:	deffea04 	addi	sp,sp,-88
    9f08:	dfc01515 	stw	ra,84(sp)
    9f0c:	df001415 	stw	fp,80(sp)
    9f10:	df001404 	addi	fp,sp,80
  uint8_t note, vel, play, current;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    9f14:	e0ffeec4 	addi	r3,fp,-69
    9f18:	e0bfff04 	addi	r2,fp,-4
    9f1c:	180d883a 	mov	r6,r3
    9f20:	100b883a 	mov	r5,r2
    9f24:	010000f4 	movhi	r4,3
    9f28:	213f6104 	addi	r4,r4,-636
    9f2c:	00079d80 	call	79d8 <_ZN9USBH_MIDI8RecvDataEPtPh>
    9f30:	10803fcc 	andi	r2,r2,255
    9f34:	1005003a 	cmpeq	r2,r2,zero
    9f38:	10803fcc 	andi	r2,r2,255
    9f3c:	10003926 	beq	r2,zero,a024 <_Z9MIDI_pollv+0x120>
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {\
    9f40:	e03fed15 	stw	zero,-76(fp)
    9f44:	e0bfed17 	ldw	r2,-76(fp)
    9f48:	10801008 	cmpgei	r2,r2,64
    9f4c:	1000351e 	bne	r2,zero,a024 <_Z9MIDI_pollv+0x120>
    	if (bufMidi[i] == 0x90) {
    9f50:	e0ffeec4 	addi	r3,fp,-69
    9f54:	e0bfed17 	ldw	r2,-76(fp)
    9f58:	1885883a 	add	r2,r3,r2
    9f5c:	10800003 	ldbu	r2,0(r2)
    9f60:	10803fcc 	andi	r2,r2,255
    9f64:	10802418 	cmpnei	r2,r2,144
    9f68:	10002a1e 	bne	r2,zero,a014 <_Z9MIDI_pollv+0x110>

    		current = IORD_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE);
    9f6c:	00810034 	movhi	r2,1024
    9f70:	10848004 	addi	r2,r2,4608
    9f74:	10800037 	ldwio	r2,0(r2)
    9f78:	e0bfee05 	stb	r2,-72(fp)
    		note = bufMidi[i+1];
    9f7c:	e0bfed17 	ldw	r2,-76(fp)
    9f80:	10800044 	addi	r2,r2,1
    9f84:	e0ffeec4 	addi	r3,fp,-69
    9f88:	1885883a 	add	r2,r3,r2
    9f8c:	10800003 	ldbu	r2,0(r2)
    9f90:	e0bfee45 	stb	r2,-71(fp)
    		vel = bufMidi[i+2];
    9f94:	e0bfed17 	ldw	r2,-76(fp)
    9f98:	10800084 	addi	r2,r2,2
    9f9c:	e0ffeec4 	addi	r3,fp,-69
    9fa0:	1885883a 	add	r2,r3,r2
    9fa4:	10800003 	ldbu	r2,0(r2)
    9fa8:	e0bfee85 	stb	r2,-70(fp)
    		i += 2;
    9fac:	e0bfed17 	ldw	r2,-76(fp)
    9fb0:	10800084 	addi	r2,r2,2
    9fb4:	e0bfed15 	stw	r2,-76(fp)

        	if(vel == 0) {
    9fb8:	e0bfee83 	ldbu	r2,-70(fp)
    9fbc:	10000a1e 	bne	r2,zero,9fe8 <_Z9MIDI_pollv+0xe4>
        		if (current == note) {
    9fc0:	e0ffee03 	ldbu	r3,-72(fp)
    9fc4:	e0bfee43 	ldbu	r2,-71(fp)
    9fc8:	1880011e 	bne	r3,r2,9fd0 <_Z9MIDI_pollv+0xcc>
        			play = 0;
    9fcc:	e03fec05 	stb	zero,-80(fp)
        		}
        		printf("Note Off:	%d\n", note);
    9fd0:	e0bfee43 	ldbu	r2,-71(fp)
    9fd4:	100b883a 	mov	r5,r2
    9fd8:	010000f4 	movhi	r4,3
    9fdc:	21249504 	addi	r4,r4,-28076
    9fe0:	000dd200 	call	dd20 <printf>
    9fe4:	00000706 	br	a004 <_Z9MIDI_pollv+0x100>
        	}
        	else {
        		play = note;
    9fe8:	e0bfee43 	ldbu	r2,-71(fp)
    9fec:	e0bfec05 	stb	r2,-80(fp)
        		printf("Note On:	%d\n", note);
    9ff0:	e0bfee43 	ldbu	r2,-71(fp)
    9ff4:	100b883a 	mov	r5,r2
    9ff8:	010000f4 	movhi	r4,3
    9ffc:	21249904 	addi	r4,r4,-28060
    a000:	000dd200 	call	dd20 <printf>
        	}
        	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, play);
    a004:	e0ffec03 	ldbu	r3,-80(fp)
    a008:	00810034 	movhi	r2,1024
    a00c:	10848004 	addi	r2,r2,4608
    a010:	10c00035 	stwio	r3,0(r2)
  uint8_t note, vel, play, current;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {\
    a014:	e0bfed17 	ldw	r2,-76(fp)
    a018:	10800044 	addi	r2,r2,1
    a01c:	e0bfed15 	stw	r2,-76(fp)
    a020:	003fc806 	br	9f44 <__alt_data_end+0xfc009f44>
        	}
        	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, play);
    	}
    }
  }
}
    a024:	0001883a 	nop
    a028:	e037883a 	mov	sp,fp
    a02c:	dfc00117 	ldw	ra,4(sp)
    a030:	df000017 	ldw	fp,0(sp)
    a034:	dec00204 	addi	sp,sp,8
    a038:	f800283a 	ret

0000a03c <_Z7controlv>:

void control() {
    a03c:	defffd04 	addi	sp,sp,-12
    a040:	dfc00215 	stw	ra,8(sp)
    a044:	df000115 	stw	fp,4(sp)
    a048:	df000104 	addi	fp,sp,4
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
    a04c:	00810034 	movhi	r2,1024
    a050:	10848804 	addi	r2,r2,4640
    a054:	10800037 	ldwio	r2,0(r2)
    a058:	e0bfff05 	stb	r2,-4(fp)
	if ((~con & 0x1) && (~con & 0x2)) {
    a05c:	e0bfff03 	ldbu	r2,-4(fp)
    a060:	1080004c 	andi	r2,r2,1
    a064:	1000031e 	bne	r2,zero,a074 <_Z7controlv+0x38>
    a068:	e0bfff03 	ldbu	r2,-4(fp)
    a06c:	1080008c 	andi	r2,r2,2
    a070:	10000e26 	beq	r2,zero,a0ac <_Z7controlv+0x70>
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
    a074:	e0bfff03 	ldbu	r2,-4(fp)
    a078:	1080004c 	andi	r2,r2,1
    a07c:	1000041e 	bne	r2,zero,a090 <_Z7controlv+0x54>
    a080:	d0b23817 	ldw	r2,-14112(gp)
    a084:	1009883a 	mov	r4,r2
    a088:	0006d640 	call	6d64 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
}
    a08c:	00000706 	br	a0ac <_Z7controlv+0x70>
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
	if ((~con & 0x1) && (~con & 0x2)) {
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
    a090:	e0bfff03 	ldbu	r2,-4(fp)
    a094:	1080008c 	andi	r2,r2,2
    a098:	1000041e 	bne	r2,zero,a0ac <_Z7controlv+0x70>
    a09c:	d0b23817 	ldw	r2,-14112(gp)
    a0a0:	1009883a 	mov	r4,r2
    a0a4:	0006e380 	call	6e38 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>
}
    a0a8:	00000006 	br	a0ac <_Z7controlv+0x70>
    a0ac:	0001883a 	nop
    a0b0:	e037883a 	mov	sp,fp
    a0b4:	dfc00117 	ldw	ra,4(sp)
    a0b8:	df000017 	ldw	fp,0(sp)
    a0bc:	dec00204 	addi	sp,sp,8
    a0c0:	f800283a 	ret

0000a0c4 <main>:

int main() {
    a0c4:	defffd04 	addi	sp,sp,-12
    a0c8:	dfc00215 	stw	ra,8(sp)
    a0cc:	df000115 	stw	fp,4(sp)
    a0d0:	df000104 	addi	fp,sp,4

	uint8_t timer;

	printf("Initializing SGTL5000...\n");
    a0d4:	010000f4 	movhi	r4,3
    a0d8:	21249d04 	addi	r4,r4,-28044
    a0dc:	000de3c0 	call	de3c <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    a0e0:	010000f4 	movhi	r4,3
    a0e4:	2124a404 	addi	r4,r4,-28016
    a0e8:	001edb00 	call	1edb0 <alt_avalon_i2c_open>
    a0ec:	d0b23815 	stw	r2,-14112(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    a0f0:	d0b23817 	ldw	r2,-14112(gp)
    a0f4:	1000031e 	bne	r2,zero,a104 <main+0x40>
    a0f8:	010000f4 	movhi	r4,3
    a0fc:	2124a704 	addi	r4,r4,-28004
    a100:	000de3c0 	call	de3c <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    a104:	d0b23817 	ldw	r2,-14112(gp)
    a108:	1009883a 	mov	r4,r2
    a10c:	0006ab40 	call	6ab4 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    a110:	010000f4 	movhi	r4,3
    a114:	2124af04 	addi	r4,r4,-27972
    a118:	000de3c0 	call	de3c <puts>
	SGTL5000audio_on(i2c_dev);
    a11c:	d0b23817 	ldw	r2,-14112(gp)
    a120:	1009883a 	mov	r4,r2
    a124:	0006b4c0 	call	6b4c <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	I2Creg_wr(i2c_dev, ANA_TEST1, TM_SELECT_MIC | TESTMODE);
	I2Creg_wr(i2c_dev, ANA_POWER, DAC_MONO | LINREG_SIMPLE_POWERUP | STARTUP_POWERUP | VDDC_CHRGPMP_POWERUP | LINREG_D_POWERUP | ADC_MONO | REFTOP_POWERUP | HEADPHONE_POWERUP | VAG_POWERUP | DAC_POWERUP_ANA | CAPLESS_HEADPHONE_POWERUP | ADC_POWERUP_ANA);
	I2Creg_wr(i2c_dev, ADCDAC_CTRL, VOL_RAMP_EN | !DAC_MUTE_RIGHT | !DAC_MUTE_LEFT);
	*/

	SGTL5000status(i2c_dev);
    a128:	d0b23817 	ldw	r2,-14112(gp)
    a12c:	1009883a 	mov	r4,r2
    a130:	0006bb80 	call	6bb8 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>

	printf("Audio running\n");
    a134:	010000f4 	movhi	r4,3
    a138:	2124b404 	addi	r4,r4,-27952
    a13c:	000de3c0 	call	de3c <puts>

	MIDI_setup();
    a140:	0009e8c0 	call	9e8c <_Z10MIDI_setupv>

	while (Usb.getUsbTaskState() != 0x90) {
    a144:	010000f4 	movhi	r4,3
    a148:	213f3204 	addi	r4,r4,-824
    a14c:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a150:	10803fcc 	andi	r2,r2,255
    a154:	10802418 	cmpnei	r2,r2,144
    a158:	10803fcc 	andi	r2,r2,255
    a15c:	10000426 	beq	r2,zero,a170 <main+0xac>
		Usb.Task();
    a160:	010000f4 	movhi	r4,3
    a164:	213f3204 	addi	r4,r4,-824
    a168:	000181c0 	call	181c <_ZN3USB4TaskEv>

	printf("Audio running\n");

	MIDI_setup();

	while (Usb.getUsbTaskState() != 0x90) {
    a16c:	003ff506 	br	a144 <__alt_data_end+0xfc00a144>
		Usb.Task();
	}
	while(1) {
		if ( Midi ) {
    a170:	010000f4 	movhi	r4,3
    a174:	213f6104 	addi	r4,r4,-636
    a178:	000a2440 	call	a244 <_ZN9USBH_MIDIcvbEv>
    a17c:	10803fcc 	andi	r2,r2,255
    a180:	10000126 	beq	r2,zero,a188 <main+0xc4>
			MIDI_poll();
    a184:	0009f040 	call	9f04 <_Z9MIDI_pollv>
		}
		timer ++;
    a188:	e0bfff03 	ldbu	r2,-4(fp)
    a18c:	10800044 	addi	r2,r2,1
    a190:	e0bfff05 	stb	r2,-4(fp)
		if (timer & 0x70) {
    a194:	e0bfff03 	ldbu	r2,-4(fp)
    a198:	10801c0c 	andi	r2,r2,112
    a19c:	103ff426 	beq	r2,zero,a170 <__alt_data_end+0xfc00a170>
			control();
    a1a0:	000a03c0 	call	a03c <_Z7controlv>
			timer = 0;
    a1a4:	e03fff05 	stb	zero,-4(fp)
	MIDI_setup();

	while (Usb.getUsbTaskState() != 0x90) {
		Usb.Task();
	}
	while(1) {
    a1a8:	003ff106 	br	a170 <__alt_data_end+0xfc00a170>

0000a1ac <_Z41__static_initialization_and_destruction_0ii>:
	/*
        test_setup();
        while (1) {
        	test_loop();
        }*/
}
    a1ac:	defffc04 	addi	sp,sp,-16
    a1b0:	dfc00315 	stw	ra,12(sp)
    a1b4:	df000215 	stw	fp,8(sp)
    a1b8:	df000204 	addi	fp,sp,8
    a1bc:	e13ffe15 	stw	r4,-8(fp)
    a1c0:	e17fff15 	stw	r5,-4(fp)
    a1c4:	e0bffe17 	ldw	r2,-8(fp)
    a1c8:	10800058 	cmpnei	r2,r2,1
    a1cc:	10000b1e 	bne	r2,zero,a1fc <_Z41__static_initialization_and_destruction_0ii+0x50>
    a1d0:	e0ffff17 	ldw	r3,-4(fp)
    a1d4:	00bfffd4 	movui	r2,65535
    a1d8:	1880081e 	bne	r3,r2,a1fc <_Z41__static_initialization_and_destruction_0ii+0x50>
 * This is sample program. Do not expect perfect behavior.
 *******************************************************************************
 */


USB Usb;
    a1dc:	010000f4 	movhi	r4,3
    a1e0:	213f3204 	addi	r4,r4,-824
    a1e4:	00007040 	call	704 <_ZN3USBC1Ev>
//USBHub Hub(&Usb);
USBH_MIDI  Midi(&Usb);
    a1e8:	014000f4 	movhi	r5,3
    a1ec:	297f3204 	addi	r5,r5,-824
    a1f0:	010000f4 	movhi	r4,3
    a1f4:	213f6104 	addi	r4,r4,-636
    a1f8:	0006eb80 	call	6eb8 <_ZN9USBH_MIDIC1EP3USB>
	/*
        test_setup();
        while (1) {
        	test_loop();
        }*/
}
    a1fc:	0001883a 	nop
    a200:	e037883a 	mov	sp,fp
    a204:	dfc00117 	ldw	ra,4(sp)
    a208:	df000017 	ldw	fp,0(sp)
    a20c:	dec00204 	addi	sp,sp,8
    a210:	f800283a 	ret

0000a214 <_GLOBAL__sub_I_Usb>:
    a214:	defffe04 	addi	sp,sp,-8
    a218:	dfc00115 	stw	ra,4(sp)
    a21c:	df000015 	stw	fp,0(sp)
    a220:	d839883a 	mov	fp,sp
    a224:	017fffd4 	movui	r5,65535
    a228:	01000044 	movi	r4,1
    a22c:	000a1ac0 	call	a1ac <_Z41__static_initialization_and_destruction_0ii>
    a230:	e037883a 	mov	sp,fp
    a234:	dfc00117 	ldw	ra,4(sp)
    a238:	df000017 	ldw	fp,0(sp)
    a23c:	dec00204 	addi	sp,sp,8
    a240:	f800283a 	ret

0000a244 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    a244:	defffe04 	addi	sp,sp,-8
    a248:	df000115 	stw	fp,4(sp)
    a24c:	df000104 	addi	fp,sp,4
    a250:	e13fff15 	stw	r4,-4(fp)
    a254:	e0bfff17 	ldw	r2,-4(fp)
    a258:	10800343 	ldbu	r2,13(r2)
    a25c:	e037883a 	mov	sp,fp
    a260:	df000017 	ldw	fp,0(sp)
    a264:	dec00104 	addi	sp,sp,4
    a268:	f800283a 	ret

0000a26c <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    a26c:	defffe04 	addi	sp,sp,-8
    a270:	df000115 	stw	fp,4(sp)
    a274:	df000104 	addi	fp,sp,4
    a278:	e13fff15 	stw	r4,-4(fp)
    a27c:	e0bfff17 	ldw	r2,-4(fp)
    a280:	1080040b 	ldhu	r2,16(r2)
    a284:	e037883a 	mov	sp,fp
    a288:	df000017 	ldw	fp,0(sp)
    a28c:	dec00104 	addi	sp,sp,4
    a290:	f800283a 	ret

0000a294 <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    a294:	defffe04 	addi	sp,sp,-8
    a298:	df000115 	stw	fp,4(sp)
    a29c:	df000104 	addi	fp,sp,4
    a2a0:	e13fff15 	stw	r4,-4(fp)
    a2a4:	e0bfff17 	ldw	r2,-4(fp)
    a2a8:	1080038b 	ldhu	r2,14(r2)
    a2ac:	e037883a 	mov	sp,fp
    a2b0:	df000017 	ldw	fp,0(sp)
    a2b4:	dec00104 	addi	sp,sp,4
    a2b8:	f800283a 	ret

0000a2bc <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    a2bc:	defffd04 	addi	sp,sp,-12
    a2c0:	df000215 	stw	fp,8(sp)
    a2c4:	df000204 	addi	fp,sp,8
    a2c8:	e13ffe15 	stw	r4,-8(fp)
    a2cc:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    a2d0:	e0bffe17 	ldw	r2,-8(fp)
    a2d4:	e0ffff17 	ldw	r3,-4(fp)
    a2d8:	10c01815 	stw	r3,96(r2)
        };
    a2dc:	0001883a 	nop
    a2e0:	e037883a 	mov	sp,fp
    a2e4:	df000017 	ldw	fp,0(sp)
    a2e8:	dec00104 	addi	sp,sp,4
    a2ec:	f800283a 	ret

0000a2f0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    a2f0:	008000f4 	movhi	r2,3
    a2f4:	10a4c704 	addi	r2,r2,-27876
    a2f8:	20800015 	stw	r2,0(r4)
    a2fc:	000b0c81 	jmpi	b0c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a300 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    a300:	defffe04 	addi	sp,sp,-8
    a304:	008000f4 	movhi	r2,3
    a308:	dc000015 	stw	r16,0(sp)
    a30c:	dfc00115 	stw	ra,4(sp)
    a310:	10a4c704 	addi	r2,r2,-27876
    a314:	20800015 	stw	r2,0(r4)
    a318:	2021883a 	mov	r16,r4
    a31c:	000b0c80 	call	b0c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a320:	8009883a 	mov	r4,r16
    a324:	dfc00117 	ldw	ra,4(sp)
    a328:	dc000017 	ldw	r16,0(sp)
    a32c:	dec00204 	addi	sp,sp,8
    a330:	000aff41 	jmpi	aff4 <_ZdlPv>

0000a334 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a334:	defff504 	addi	sp,sp,-44
    a338:	dc000115 	stw	r16,4(sp)
    a33c:	38800117 	ldw	r2,4(r7)
    a340:	24000117 	ldw	r16,4(r4)
    a344:	df000915 	stw	fp,36(sp)
    a348:	ddc00815 	stw	r23,32(sp)
    a34c:	dd800715 	stw	r22,28(sp)
    a350:	dcc00415 	stw	r19,16(sp)
    a354:	dc800315 	stw	r18,12(sp)
    a358:	dc400215 	stw	r17,8(sp)
    a35c:	dfc00a15 	stw	ra,40(sp)
    a360:	dd400615 	stw	r21,24(sp)
    a364:	dd000515 	stw	r20,20(sp)
    a368:	2823883a 	mov	r17,r5
    a36c:	3039883a 	mov	fp,r6
    a370:	dcc00b17 	ldw	r19,44(sp)
    a374:	ddc00c17 	ldw	r23,48(sp)
    a378:	dd800d17 	ldw	r22,52(sp)
    a37c:	dc800e17 	ldw	r18,56(sp)
    a380:	80800b26 	beq	r16,r2,a3b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    a384:	80c00007 	ldb	r3,0(r16)
    a388:	2029883a 	mov	r20,r4
    a38c:	01000a84 	movi	r4,42
    a390:	382b883a 	mov	r21,r7
    a394:	19001a26 	beq	r3,r4,a400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a398:	100b883a 	mov	r5,r2
    a39c:	8009883a 	mov	r4,r16
    a3a0:	d8c00015 	stw	r3,0(sp)
    a3a4:	000e26c0 	call	e26c <strcmp>
    a3a8:	d8c00017 	ldw	r3,0(sp)
    a3ac:	1000141e 	bne	r2,zero,a400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a3b0:	94c00015 	stw	r19,0(r18)
    a3b4:	97000115 	stw	fp,4(r18)
    a3b8:	88002816 	blt	r17,zero,a45c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    a3bc:	9c63883a 	add	r17,r19,r17
    a3c0:	b4403226 	beq	r22,r17,a48c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    a3c4:	00800044 	movi	r2,1
    a3c8:	90800315 	stw	r2,12(r18)
    a3cc:	0005883a 	mov	r2,zero
    a3d0:	dfc00a17 	ldw	ra,40(sp)
    a3d4:	df000917 	ldw	fp,36(sp)
    a3d8:	ddc00817 	ldw	r23,32(sp)
    a3dc:	dd800717 	ldw	r22,28(sp)
    a3e0:	dd400617 	ldw	r21,24(sp)
    a3e4:	dd000517 	ldw	r20,20(sp)
    a3e8:	dcc00417 	ldw	r19,16(sp)
    a3ec:	dc800317 	ldw	r18,12(sp)
    a3f0:	dc400217 	ldw	r17,8(sp)
    a3f4:	dc000117 	ldw	r16,4(sp)
    a3f8:	dec00b04 	addi	sp,sp,44
    a3fc:	f800283a 	ret
    a400:	9d801926 	beq	r19,r22,a468 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    a404:	a1000217 	ldw	r4,8(r20)
    a408:	a80f883a 	mov	r7,r21
    a40c:	e00d883a 	mov	r6,fp
    a410:	20800017 	ldw	r2,0(r4)
    a414:	dc800e15 	stw	r18,56(sp)
    a418:	dd800d15 	stw	r22,52(sp)
    a41c:	ddc00c15 	stw	r23,48(sp)
    a420:	dcc00b15 	stw	r19,44(sp)
    a424:	10800717 	ldw	r2,28(r2)
    a428:	880b883a 	mov	r5,r17
    a42c:	dfc00a17 	ldw	ra,40(sp)
    a430:	df000917 	ldw	fp,36(sp)
    a434:	ddc00817 	ldw	r23,32(sp)
    a438:	dd800717 	ldw	r22,28(sp)
    a43c:	dd400617 	ldw	r21,24(sp)
    a440:	dd000517 	ldw	r20,20(sp)
    a444:	dcc00417 	ldw	r19,16(sp)
    a448:	dc800317 	ldw	r18,12(sp)
    a44c:	dc400217 	ldw	r17,8(sp)
    a450:	dc000117 	ldw	r16,4(sp)
    a454:	dec00b04 	addi	sp,sp,44
    a458:	1000683a 	jmp	r2
    a45c:	00bfff84 	movi	r2,-2
    a460:	88bfda1e 	bne	r17,r2,a3cc <__alt_data_end+0xfc00a3cc>
    a464:	003fd706 	br	a3c4 <__alt_data_end+0xfc00a3c4>
    a468:	b9400117 	ldw	r5,4(r23)
    a46c:	81400526 	beq	r16,r5,a484 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    a470:	00800a84 	movi	r2,42
    a474:	18bfe326 	beq	r3,r2,a404 <__alt_data_end+0xfc00a404>
    a478:	8009883a 	mov	r4,r16
    a47c:	000e26c0 	call	e26c <strcmp>
    a480:	103fe01e 	bne	r2,zero,a404 <__alt_data_end+0xfc00a404>
    a484:	97000215 	stw	fp,8(r18)
    a488:	003fd006 	br	a3cc <__alt_data_end+0xfc00a3cc>
    a48c:	00800184 	movi	r2,6
    a490:	003fcd06 	br	a3c8 <__alt_data_end+0xfc00a3c8>

0000a494 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a494:	defffa04 	addi	sp,sp,-24
    a498:	dc000215 	stw	r16,8(sp)
    a49c:	dc000617 	ldw	r16,24(sp)
    a4a0:	dc800415 	stw	r18,16(sp)
    a4a4:	dc400315 	stw	r17,12(sp)
    a4a8:	dfc00515 	stw	ra,20(sp)
    a4ac:	2023883a 	mov	r17,r4
    a4b0:	2825883a 	mov	r18,r5
    a4b4:	81800b26 	beq	r16,r6,a4e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    a4b8:	89000217 	ldw	r4,8(r17)
    a4bc:	900b883a 	mov	r5,r18
    a4c0:	20800017 	ldw	r2,0(r4)
    a4c4:	dc000615 	stw	r16,24(sp)
    a4c8:	10800817 	ldw	r2,32(r2)
    a4cc:	dfc00517 	ldw	ra,20(sp)
    a4d0:	dc800417 	ldw	r18,16(sp)
    a4d4:	dc400317 	ldw	r17,12(sp)
    a4d8:	dc000217 	ldw	r16,8(sp)
    a4dc:	dec00604 	addi	sp,sp,24
    a4e0:	1000683a 	jmp	r2
    a4e4:	21000117 	ldw	r4,4(r4)
    a4e8:	39400117 	ldw	r5,4(r7)
    a4ec:	21400926 	beq	r4,r5,a514 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    a4f0:	20c00007 	ldb	r3,0(r4)
    a4f4:	00800a84 	movi	r2,42
    a4f8:	18bfef26 	beq	r3,r2,a4b8 <__alt_data_end+0xfc00a4b8>
    a4fc:	d9800015 	stw	r6,0(sp)
    a500:	d9c00115 	stw	r7,4(sp)
    a504:	000e26c0 	call	e26c <strcmp>
    a508:	d9800017 	ldw	r6,0(sp)
    a50c:	d9c00117 	ldw	r7,4(sp)
    a510:	103fe91e 	bne	r2,zero,a4b8 <__alt_data_end+0xfc00a4b8>
    a514:	00800184 	movi	r2,6
    a518:	dfc00517 	ldw	ra,20(sp)
    a51c:	dc800417 	ldw	r18,16(sp)
    a520:	dc400317 	ldw	r17,12(sp)
    a524:	dc000217 	ldw	r16,8(sp)
    a528:	dec00604 	addi	sp,sp,24
    a52c:	f800283a 	ret

0000a530 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    a530:	defffb04 	addi	sp,sp,-20
    a534:	dcc00315 	stw	r19,12(sp)
    a538:	dc800215 	stw	r18,8(sp)
    a53c:	dc400115 	stw	r17,4(sp)
    a540:	dc000015 	stw	r16,0(sp)
    a544:	dfc00415 	stw	ra,16(sp)
    a548:	2027883a 	mov	r19,r4
    a54c:	2821883a 	mov	r16,r5
    a550:	3023883a 	mov	r17,r6
    a554:	3825883a 	mov	r18,r7
    a558:	000b10c0 	call	b10c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    a55c:	10c03fcc 	andi	r3,r2,255
    a560:	18000726 	beq	r3,zero,a580 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    a564:	dfc00417 	ldw	ra,16(sp)
    a568:	dcc00317 	ldw	r19,12(sp)
    a56c:	dc800217 	ldw	r18,8(sp)
    a570:	dc400117 	ldw	r17,4(sp)
    a574:	dc000017 	ldw	r16,0(sp)
    a578:	dec00504 	addi	sp,sp,20
    a57c:	f800283a 	ret
    a580:	99000217 	ldw	r4,8(r19)
    a584:	900f883a 	mov	r7,r18
    a588:	880d883a 	mov	r6,r17
    a58c:	20800017 	ldw	r2,0(r4)
    a590:	800b883a 	mov	r5,r16
    a594:	10800617 	ldw	r2,24(r2)
    a598:	dfc00417 	ldw	ra,16(sp)
    a59c:	dcc00317 	ldw	r19,12(sp)
    a5a0:	dc800217 	ldw	r18,8(sp)
    a5a4:	dc400117 	ldw	r17,4(sp)
    a5a8:	dc000017 	ldw	r16,0(sp)
    a5ac:	dec00504 	addi	sp,sp,20
    a5b0:	1000683a 	jmp	r2

0000a5b4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    a5b4:	008000f4 	movhi	r2,3
    a5b8:	10a4df04 	addi	r2,r2,-27780
    a5bc:	20800015 	stw	r2,0(r4)
    a5c0:	000b0c81 	jmpi	b0c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a5c4 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    a5c4:	defffe04 	addi	sp,sp,-8
    a5c8:	008000f4 	movhi	r2,3
    a5cc:	dc000015 	stw	r16,0(sp)
    a5d0:	dfc00115 	stw	ra,4(sp)
    a5d4:	10a4df04 	addi	r2,r2,-27780
    a5d8:	20800015 	stw	r2,0(r4)
    a5dc:	2021883a 	mov	r16,r4
    a5e0:	000b0c80 	call	b0c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a5e4:	8009883a 	mov	r4,r16
    a5e8:	dfc00117 	ldw	ra,4(sp)
    a5ec:	dc000017 	ldw	r16,0(sp)
    a5f0:	dec00204 	addi	sp,sp,8
    a5f4:	000aff41 	jmpi	aff4 <_ZdlPv>

0000a5f8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a5f8:	defff504 	addi	sp,sp,-44
    a5fc:	dc400215 	stw	r17,8(sp)
    a600:	dc400b17 	ldw	r17,44(sp)
    a604:	df000915 	stw	fp,36(sp)
    a608:	ddc00815 	stw	r23,32(sp)
    a60c:	dd800715 	stw	r22,28(sp)
    a610:	dc000115 	stw	r16,4(sp)
    a614:	dfc00a15 	stw	ra,40(sp)
    a618:	dd400615 	stw	r21,24(sp)
    a61c:	dd000515 	stw	r20,20(sp)
    a620:	dcc00415 	stw	r19,16(sp)
    a624:	dc800315 	stw	r18,12(sp)
    a628:	3039883a 	mov	fp,r6
    a62c:	2021883a 	mov	r16,r4
    a630:	282d883a 	mov	r22,r5
    a634:	382f883a 	mov	r23,r7
    a638:	34402c26 	beq	r6,r17,a6ec <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    a63c:	85000317 	ldw	r20,12(r16)
    a640:	048000c4 	movi	r18,3
    a644:	04ffff44 	movi	r19,-3
    a648:	a484983a 	sll	r2,r20,r18
    a64c:	b80f883a 	mov	r7,r23
    a650:	b00b883a 	mov	r5,r22
    a654:	10800304 	addi	r2,r2,12
    a658:	80a1883a 	add	r16,r16,r2
    a65c:	a0001626 	beq	r20,zero,a6b8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    a660:	81800017 	ldw	r6,0(r16)
    a664:	a53fffc4 	addi	r20,r20,-1
    a668:	3080008c 	andi	r2,r6,2
    a66c:	3540004c 	andi	r21,r6,1
    a670:	10000d26 	beq	r2,zero,a6a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a674:	300dd23a 	srai	r6,r6,8
    a678:	a8000426 	beq	r21,zero,a68c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    a67c:	b4c00a26 	beq	r22,r19,a6a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a680:	e0800017 	ldw	r2,0(fp)
    a684:	118d883a 	add	r6,r2,r6
    a688:	31800017 	ldw	r6,0(r6)
    a68c:	813fff17 	ldw	r4,-4(r16)
    a690:	e18d883a 	add	r6,fp,r6
    a694:	20800017 	ldw	r2,0(r4)
    a698:	dc400015 	stw	r17,0(sp)
    a69c:	10800817 	ldw	r2,32(r2)
    a6a0:	103ee83a 	callr	r2
    a6a4:	90801b16 	blt	r18,r2,a714 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    a6a8:	843ffe04 	addi	r16,r16,-8
    a6ac:	b80f883a 	mov	r7,r23
    a6b0:	b00b883a 	mov	r5,r22
    a6b4:	a03fea1e 	bne	r20,zero,a660 <__alt_data_end+0xfc00a660>
    a6b8:	00800044 	movi	r2,1
    a6bc:	dfc00a17 	ldw	ra,40(sp)
    a6c0:	df000917 	ldw	fp,36(sp)
    a6c4:	ddc00817 	ldw	r23,32(sp)
    a6c8:	dd800717 	ldw	r22,28(sp)
    a6cc:	dd400617 	ldw	r21,24(sp)
    a6d0:	dd000517 	ldw	r20,20(sp)
    a6d4:	dcc00417 	ldw	r19,16(sp)
    a6d8:	dc800317 	ldw	r18,12(sp)
    a6dc:	dc400217 	ldw	r17,8(sp)
    a6e0:	dc000117 	ldw	r16,4(sp)
    a6e4:	dec00b04 	addi	sp,sp,44
    a6e8:	f800283a 	ret
    a6ec:	21000117 	ldw	r4,4(r4)
    a6f0:	39400117 	ldw	r5,4(r7)
    a6f4:	21400526 	beq	r4,r5,a70c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    a6f8:	20c00007 	ldb	r3,0(r4)
    a6fc:	00800a84 	movi	r2,42
    a700:	18bfce26 	beq	r3,r2,a63c <__alt_data_end+0xfc00a63c>
    a704:	000e26c0 	call	e26c <strcmp>
    a708:	103fcc1e 	bne	r2,zero,a63c <__alt_data_end+0xfc00a63c>
    a70c:	00800184 	movi	r2,6
    a710:	003fea06 	br	a6bc <__alt_data_end+0xfc00a6bc>
    a714:	a83fe926 	beq	r21,zero,a6bc <__alt_data_end+0xfc00a6bc>
    a718:	10800054 	ori	r2,r2,1
    a71c:	003fe706 	br	a6bc <__alt_data_end+0xfc00a6bc>

0000a720 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a720:	deffe804 	addi	sp,sp,-96
    a724:	df001615 	stw	fp,88(sp)
    a728:	df001b17 	ldw	fp,108(sp)
    a72c:	ddc01515 	stw	r23,84(sp)
    a730:	dd001215 	stw	r20,72(sp)
    a734:	e0800417 	ldw	r2,16(fp)
    a738:	dcc01115 	stw	r19,68(sp)
    a73c:	dfc01715 	stw	ra,92(sp)
    a740:	dd801415 	stw	r22,80(sp)
    a744:	dd401315 	stw	r21,76(sp)
    a748:	dc801015 	stw	r18,64(sp)
    a74c:	dc400f15 	stw	r17,60(sp)
    a750:	dc000e15 	stw	r16,56(sp)
    a754:	d9000b15 	stw	r4,44(sp)
    a758:	d9c00915 	stw	r7,36(sp)
    a75c:	1080040c 	andi	r2,r2,16
    a760:	282f883a 	mov	r23,r5
    a764:	3027883a 	mov	r19,r6
    a768:	dd001817 	ldw	r20,96(sp)
    a76c:	10000226 	beq	r2,zero,a778 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    a770:	20800217 	ldw	r2,8(r4)
    a774:	e0800415 	stw	r2,16(fp)
    a778:	d8c01a17 	ldw	r3,104(sp)
    a77c:	a0c0cb26 	beq	r20,r3,aaac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    a780:	d8c00b17 	ldw	r3,44(sp)
    a784:	1c000117 	ldw	r16,4(r3)
    a788:	d8c00917 	ldw	r3,36(sp)
    a78c:	19400117 	ldw	r5,4(r3)
    a790:	2c000626 	beq	r5,r16,a7ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    a794:	80c00007 	ldb	r3,0(r16)
    a798:	00800a84 	movi	r2,42
    a79c:	18801b26 	beq	r3,r2,a80c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a7a0:	8009883a 	mov	r4,r16
    a7a4:	000e26c0 	call	e26c <strcmp>
    a7a8:	1000181e 	bne	r2,zero,a80c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a7ac:	e5000015 	stw	r20,0(fp)
    a7b0:	e4c00115 	stw	r19,4(fp)
    a7b4:	b8010916 	blt	r23,zero,abdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    a7b8:	d8c01a17 	ldw	r3,104(sp)
    a7bc:	a5d9883a 	add	r12,r20,r23
    a7c0:	1b014126 	beq	r3,r12,acc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    a7c4:	00800044 	movi	r2,1
    a7c8:	e0800315 	stw	r2,12(fp)
    a7cc:	0005883a 	mov	r2,zero
    a7d0:	dfc01717 	ldw	ra,92(sp)
    a7d4:	df001617 	ldw	fp,88(sp)
    a7d8:	ddc01517 	ldw	r23,84(sp)
    a7dc:	dd801417 	ldw	r22,80(sp)
    a7e0:	dd401317 	ldw	r21,76(sp)
    a7e4:	dd001217 	ldw	r20,72(sp)
    a7e8:	dcc01117 	ldw	r19,68(sp)
    a7ec:	dc801017 	ldw	r18,64(sp)
    a7f0:	dc400f17 	ldw	r17,60(sp)
    a7f4:	dc000e17 	ldw	r16,56(sp)
    a7f8:	dec01804 	addi	sp,sp,96
    a7fc:	f800283a 	ret
    a800:	d8c00917 	ldw	r3,36(sp)
    a804:	18800117 	ldw	r2,4(r3)
    a808:	80bfe826 	beq	r16,r2,a7ac <__alt_data_end+0xfc00a7ac>
    a80c:	b800ef16 	blt	r23,zero,abcc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    a810:	d8c01a17 	ldw	r3,104(sp)
    a814:	1dedc83a 	sub	r22,r3,r23
    a818:	e005883a 	mov	r2,fp
    a81c:	00c00044 	movi	r3,1
    a820:	b039883a 	mov	fp,r22
    a824:	0021883a 	mov	r16,zero
    a828:	a02d883a 	mov	r22,r20
    a82c:	d8000a45 	stb	zero,41(sp)
    a830:	d8c00a05 	stb	r3,40(sp)
    a834:	048000c4 	movi	r18,3
    a838:	1029883a 	mov	r20,r2
    a83c:	d8c00b17 	ldw	r3,44(sp)
    a840:	b805883a 	mov	r2,r23
    a844:	1ac00317 	ldw	r11,12(r3)
    a848:	581490fa 	slli	r10,r11,3
    a84c:	52800304 	addi	r10,r10,12
    a850:	1aab883a 	add	r21,r3,r10
    a854:	b007883a 	mov	r3,r22
    a858:	582d883a 	mov	r22,r11
    a85c:	a82f883a 	mov	r23,r21
    a860:	1823883a 	mov	r17,r3
    a864:	102b883a 	mov	r21,r2
    a868:	b0005526 	beq	r22,zero,a9c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    a86c:	b8800017 	ldw	r2,0(r23)
    a870:	a1400417 	ldw	r5,16(r20)
    a874:	d8000415 	stw	zero,16(sp)
    a878:	d8000515 	stw	zero,20(sp)
    a87c:	d8000615 	stw	zero,24(sp)
    a880:	d8000715 	stw	zero,28(sp)
    a884:	d9400815 	stw	r5,32(sp)
    a888:	1100004c 	andi	r4,r2,1
    a88c:	1007d23a 	srai	r3,r2,8
    a890:	20007526 	beq	r4,zero,aa68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    a894:	89000017 	ldw	r4,0(r17)
    a898:	99800054 	ori	r6,r19,1
    a89c:	20c7883a 	add	r3,r4,r3
    a8a0:	18c00017 	ldw	r3,0(r3)
    a8a4:	88c7883a 	add	r3,r17,r3
    a8a8:	e0000326 	beq	fp,zero,a8b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    a8ac:	d9c00a03 	ldbu	r7,40(sp)
    a8b0:	e0c9803a 	cmpltu	r4,fp,r3
    a8b4:	21c07226 	beq	r4,r7,aa80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    a8b8:	1080008c 	andi	r2,r2,2
    a8bc:	1000041e 	bne	r2,zero,a8d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    a8c0:	013fff84 	movi	r4,-2
    a8c4:	a9007126 	beq	r21,r4,aa8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    a8c8:	00bfff44 	movi	r2,-3
    a8cc:	308c703a 	and	r6,r6,r2
    a8d0:	b93fff17 	ldw	r4,-4(r23)
    a8d4:	d9400404 	addi	r5,sp,16
    a8d8:	d9c00917 	ldw	r7,36(sp)
    a8dc:	20800017 	ldw	r2,0(r4)
    a8e0:	d9400315 	stw	r5,12(sp)
    a8e4:	d9401a17 	ldw	r5,104(sp)
    a8e8:	d8c00015 	stw	r3,0(sp)
    a8ec:	d9400215 	stw	r5,8(sp)
    a8f0:	d9401917 	ldw	r5,100(sp)
    a8f4:	d9400115 	stw	r5,4(sp)
    a8f8:	10800717 	ldw	r2,28(r2)
    a8fc:	a80b883a 	mov	r5,r21
    a900:	103ee83a 	callr	r2
    a904:	a1400217 	ldw	r5,8(r20)
    a908:	d9000617 	ldw	r4,24(sp)
    a90c:	d8c00717 	ldw	r3,28(sp)
    a910:	2908b03a 	or	r4,r5,r4
    a914:	a1000215 	stw	r4,8(r20)
    a918:	01400184 	movi	r5,6
    a91c:	1940a426 	beq	r3,r5,abb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    a920:	01400084 	movi	r5,2
    a924:	1940a226 	beq	r3,r5,abb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    a928:	81403fcc 	andi	r5,r16,255
    a92c:	a1800017 	ldw	r6,0(r20)
    a930:	28004f1e 	bne	r5,zero,aa70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    a934:	30007926 	beq	r6,zero,ab1c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    a938:	d9400417 	ldw	r5,16(sp)
    a93c:	29806926 	beq	r5,r6,aae4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    a940:	28006d26 	beq	r5,zero,aaf8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    a944:	a2800317 	ldw	r10,12(r20)
    a948:	9100250e 	bge	r18,r4,a9e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    a94c:	2100004c 	andi	r4,r4,1
    a950:	20000326 	beq	r4,zero,a960 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    a954:	a0800417 	ldw	r2,16(r20)
    a958:	1080008c 	andi	r2,r2,2
    a95c:	1000201e 	bne	r2,zero,a9e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    a960:	50004d1e 	bne	r10,zero,aa98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    a964:	18002626 	beq	r3,zero,aa00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    a968:	02800044 	movi	r10,1
    a96c:	181b883a 	mov	r13,r3
    a970:	1a84f03a 	xor	r2,r3,r10
    a974:	501f883a 	mov	r15,r10
    a978:	90801f0e 	bge	r18,r2,a9f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    a97c:	90c0880e 	bge	r18,r3,aba0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    a980:	d9400417 	ldw	r5,16(sp)
    a984:	1880008c 	andi	r2,r3,2
    a988:	d9000517 	ldw	r4,20(sp)
    a98c:	a1400015 	stw	r5,0(r20)
    a990:	0021883a 	mov	r16,zero
    a994:	a1000115 	stw	r4,4(r20)
    a998:	a0c00315 	stw	r3,12(r20)
    a99c:	10004f1e 	bne	r2,zero,aadc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    a9a0:	6b40004c 	andi	r13,r13,1
    a9a4:	68004d26 	beq	r13,zero,aadc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    a9a8:	a1000217 	ldw	r4,8(r20)
    a9ac:	01400104 	movi	r5,4
    a9b0:	21408826 	beq	r4,r5,abd4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    a9b4:	b5bfffc4 	addi	r22,r22,-1
    a9b8:	bdfffe04 	addi	r23,r23,-8
    a9bc:	b03fab1e 	bne	r22,zero,a86c <__alt_data_end+0xfc00a86c>
    a9c0:	d8800a43 	ldbu	r2,41(sp)
    a9c4:	a82f883a 	mov	r23,r21
    a9c8:	882d883a 	mov	r22,r17
    a9cc:	10008126 	beq	r2,zero,abd4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    a9d0:	dd400a03 	ldbu	r21,40(sp)
    a9d4:	a8007f26 	beq	r21,zero,abd4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    a9d8:	d8000a05 	stb	zero,40(sp)
    a9dc:	003f9706 	br	a83c <__alt_data_end+0xfc00a83c>
    a9e0:	501f883a 	mov	r15,r10
    a9e4:	181b883a 	mov	r13,r3
    a9e8:	02800b0e 	bge	zero,r10,aa18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    a9ec:	00c0570e 	bge	zero,r3,ab4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    a9f0:	1a84f03a 	xor	r2,r3,r10
    a9f4:	90bfe116 	blt	r18,r2,a97c <__alt_data_end+0xfc00a97c>
    a9f8:	1bc6703a 	and	r3,r3,r15
    a9fc:	90c09916 	blt	r18,r3,ac64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    aa00:	01000044 	movi	r4,1
    aa04:	a1000315 	stw	r4,12(r20)
    aa08:	a0000015 	stw	zero,0(r20)
    aa0c:	a1000217 	ldw	r4,8(r20)
    aa10:	04000044 	movi	r16,1
    aa14:	003fe506 	br	a9ac <__alt_data_end+0xfc00a9ac>
    aa18:	90c00a0e 	bge	r18,r3,aa44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    aa1c:	1880004c 	andi	r2,r3,1
    aa20:	10000426 	beq	r2,zero,aa34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    aa24:	d9000b17 	ldw	r4,44(sp)
    aa28:	20800217 	ldw	r2,8(r4)
    aa2c:	1080008c 	andi	r2,r2,2
    aa30:	1000041e 	bne	r2,zero,aa44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    aa34:	1880005c 	xori	r2,r3,1
    aa38:	90bfd216 	blt	r18,r2,a984 <__alt_data_end+0xfc00a984>
    aa3c:	03c00044 	movi	r15,1
    aa40:	003fed06 	br	a9f8 <__alt_data_end+0xfc00a9f8>
    aa44:	a8006e16 	blt	r21,zero,ac00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    aa48:	d8801a17 	ldw	r2,104(sp)
    aa4c:	354d883a 	add	r6,r6,r21
    aa50:	11805026 	beq	r2,r6,ab94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    aa54:	00c0a50e 	bge	zero,r3,acec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    aa58:	03c00044 	movi	r15,1
    aa5c:	1bc4f03a 	xor	r2,r3,r15
    aa60:	7815883a 	mov	r10,r15
    aa64:	003fc406 	br	a978 <__alt_data_end+0xfc00a978>
    aa68:	980d883a 	mov	r6,r19
    aa6c:	003f8d06 	br	a8a4 <__alt_data_end+0xfc00a8a4>
    aa70:	303fb11e 	bne	r6,zero,a938 <__alt_data_end+0xfc00a938>
    aa74:	d9400417 	ldw	r5,16(sp)
    aa78:	283fb21e 	bne	r5,zero,a944 <__alt_data_end+0xfc00a944>
    aa7c:	003fcb06 	br	a9ac <__alt_data_end+0xfc00a9ac>
    aa80:	00c00044 	movi	r3,1
    aa84:	d8c00a45 	stb	r3,41(sp)
    aa88:	003fca06 	br	a9b4 <__alt_data_end+0xfc00a9b4>
    aa8c:	294000cc 	andi	r5,r5,3
    aa90:	283fc826 	beq	r5,zero,a9b4 <__alt_data_end+0xfc00a9b4>
    aa94:	003f8c06 	br	a8c8 <__alt_data_end+0xfc00a8c8>
    aa98:	18001a26 	beq	r3,zero,ab04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    aa9c:	181b883a 	mov	r13,r3
    aaa0:	501f883a 	mov	r15,r10
    aaa4:	50c4f03a 	xor	r2,r10,r3
    aaa8:	003fb306 	br	a978 <__alt_data_end+0xfc00a978>
    aaac:	d8c00b17 	ldw	r3,44(sp)
    aab0:	1c000117 	ldw	r16,4(r3)
    aab4:	d8c01917 	ldw	r3,100(sp)
    aab8:	19400117 	ldw	r5,4(r3)
    aabc:	81400626 	beq	r16,r5,aad8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    aac0:	80c00007 	ldb	r3,0(r16)
    aac4:	00800a84 	movi	r2,42
    aac8:	18bf4d26 	beq	r3,r2,a800 <__alt_data_end+0xfc00a800>
    aacc:	8009883a 	mov	r4,r16
    aad0:	000e26c0 	call	e26c <strcmp>
    aad4:	10005c1e 	bne	r2,zero,ac48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    aad8:	e4c00215 	stw	r19,8(fp)
    aadc:	0005883a 	mov	r2,zero
    aae0:	003f3b06 	br	a7d0 <__alt_data_end+0xfc00a7d0>
    aae4:	a0c00117 	ldw	r3,4(r20)
    aae8:	d8800517 	ldw	r2,20(sp)
    aaec:	1884b03a 	or	r2,r3,r2
    aaf0:	a0800115 	stw	r2,4(r20)
    aaf4:	003fad06 	br	a9ac <__alt_data_end+0xfc00a9ac>
    aaf8:	10803fcc 	andi	r2,r2,255
    aafc:	103f911e 	bne	r2,zero,a944 <__alt_data_end+0xfc00a944>
    ab00:	003faa06 	br	a9ac <__alt_data_end+0xfc00a9ac>
    ab04:	501b883a 	mov	r13,r10
    ab08:	5080005c 	xori	r2,r10,1
    ab0c:	5007883a 	mov	r3,r10
    ab10:	90bfbb0e 	bge	r18,r2,aa00 <__alt_data_end+0xfc00aa00>
    ab14:	6880008c 	andi	r2,r13,2
    ab18:	003f9f06 	br	a998 <__alt_data_end+0xfc00a998>
    ab1c:	d8c00417 	ldw	r3,16(sp)
    ab20:	d9400517 	ldw	r5,20(sp)
    ab24:	a0c00015 	stw	r3,0(r20)
    ab28:	a1400115 	stw	r5,4(r20)
    ab2c:	18000526 	beq	r3,zero,ab44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    ab30:	20001626 	beq	r4,zero,ab8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    ab34:	d9400b17 	ldw	r5,44(sp)
    ab38:	28c00217 	ldw	r3,8(r5)
    ab3c:	18c0004c 	andi	r3,r3,1
    ab40:	183f2326 	beq	r3,zero,a7d0 <__alt_data_end+0xfc00a7d0>
    ab44:	1021883a 	mov	r16,r2
    ab48:	003f9806 	br	a9ac <__alt_data_end+0xfc00a9ac>
    ab4c:	9280060e 	bge	r18,r10,ab68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    ab50:	5080004c 	andi	r2,r10,1
    ab54:	10002426 	beq	r2,zero,abe8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    ab58:	d8c00b17 	ldw	r3,44(sp)
    ab5c:	18800217 	ldw	r2,8(r3)
    ab60:	1080008c 	andi	r2,r2,2
    ab64:	10003c26 	beq	r2,zero,ac58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    ab68:	d9400417 	ldw	r5,16(sp)
    ab6c:	a8004216 	blt	r21,zero,ac78 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    ab70:	d8c01a17 	ldw	r3,104(sp)
    ab74:	2d45883a 	add	r2,r5,r21
    ab78:	18805726 	beq	r3,r2,acd8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    ab7c:	7880005c 	xori	r2,r15,1
    ab80:	781b883a 	mov	r13,r15
    ab84:	5007883a 	mov	r3,r10
    ab88:	003fe106 	br	ab10 <__alt_data_end+0xfc00ab10>
    ab8c:	1021883a 	mov	r16,r2
    ab90:	003f8806 	br	a9b4 <__alt_data_end+0xfc00a9b4>
    ab94:	03c00184 	movi	r15,6
    ab98:	00ffb016 	blt	zero,r3,aa5c <__alt_data_end+0xfc00aa5c>
    ab9c:	7815883a 	mov	r10,r15
    aba0:	7880008c 	andi	r2,r15,2
    aba4:	781b883a 	mov	r13,r15
    aba8:	5007883a 	mov	r3,r10
    abac:	003f7a06 	br	a998 <__alt_data_end+0xfc00a998>
    abb0:	a039883a 	mov	fp,r20
    abb4:	e0c00315 	stw	r3,12(fp)
    abb8:	d8c00417 	ldw	r3,16(sp)
    abbc:	a0c00015 	stw	r3,0(r20)
    abc0:	d8c00517 	ldw	r3,20(sp)
    abc4:	a0c00115 	stw	r3,4(r20)
    abc8:	003f0106 	br	a7d0 <__alt_data_end+0xfc00a7d0>
    abcc:	002d883a 	mov	r22,zero
    abd0:	003f1106 	br	a818 <__alt_data_end+0xfc00a818>
    abd4:	8005883a 	mov	r2,r16
    abd8:	003efd06 	br	a7d0 <__alt_data_end+0xfc00a7d0>
    abdc:	00bfff84 	movi	r2,-2
    abe0:	b8bfbe1e 	bne	r23,r2,aadc <__alt_data_end+0xfc00aadc>
    abe4:	003ef706 	br	a7c4 <__alt_data_end+0xfc00a7c4>
    abe8:	5080005c 	xori	r2,r10,1
    abec:	90bf840e 	bge	r18,r2,aa00 <__alt_data_end+0xfc00aa00>
    abf0:	501b883a 	mov	r13,r10
    abf4:	5080008c 	andi	r2,r10,2
    abf8:	5007883a 	mov	r3,r10
    abfc:	003f6606 	br	a998 <__alt_data_end+0xfc00a998>
    ac00:	013fff84 	movi	r4,-2
    ac04:	a9003226 	beq	r21,r4,acd0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    ac08:	d9400917 	ldw	r5,36(sp)
    ac0c:	d9001a17 	ldw	r4,104(sp)
    ac10:	d9c01917 	ldw	r7,100(sp)
    ac14:	28800017 	ldw	r2,0(r5)
    ac18:	d9000015 	stw	r4,0(sp)
    ac1c:	d9000917 	ldw	r4,36(sp)
    ac20:	10800817 	ldw	r2,32(r2)
    ac24:	a80b883a 	mov	r5,r21
    ac28:	d8c00d15 	stw	r3,52(sp)
    ac2c:	db400c15 	stw	r13,48(sp)
    ac30:	103ee83a 	callr	r2
    ac34:	1015883a 	mov	r10,r2
    ac38:	101f883a 	mov	r15,r2
    ac3c:	db400c17 	ldw	r13,48(sp)
    ac40:	d8c00d17 	ldw	r3,52(sp)
    ac44:	003f6906 	br	a9ec <__alt_data_end+0xfc00a9ec>
    ac48:	d8c00917 	ldw	r3,36(sp)
    ac4c:	19400117 	ldw	r5,4(r3)
    ac50:	817ed31e 	bne	r16,r5,a7a0 <__alt_data_end+0xfc00a7a0>
    ac54:	003ed506 	br	a7ac <__alt_data_end+0xfc00a7ac>
    ac58:	5080005c 	xori	r2,r10,1
    ac5c:	90bfe416 	blt	r18,r2,abf0 <__alt_data_end+0xfc00abf0>
    ac60:	003f6706 	br	aa00 <__alt_data_end+0xfc00aa00>
    ac64:	00800084 	movi	r2,2
    ac68:	a0800315 	stw	r2,12(r20)
    ac6c:	a0000015 	stw	zero,0(r20)
    ac70:	00800044 	movi	r2,1
    ac74:	003ed606 	br	a7d0 <__alt_data_end+0xfc00a7d0>
    ac78:	013fff84 	movi	r4,-2
    ac7c:	a9002526 	beq	r21,r4,ad14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    ac80:	d8c00917 	ldw	r3,36(sp)
    ac84:	d9c01917 	ldw	r7,100(sp)
    ac88:	d9000917 	ldw	r4,36(sp)
    ac8c:	18800017 	ldw	r2,0(r3)
    ac90:	d8c01a17 	ldw	r3,104(sp)
    ac94:	280d883a 	mov	r6,r5
    ac98:	a80b883a 	mov	r5,r21
    ac9c:	d8c00015 	stw	r3,0(sp)
    aca0:	10800817 	ldw	r2,32(r2)
    aca4:	da800c15 	stw	r10,48(sp)
    aca8:	dbc00d15 	stw	r15,52(sp)
    acac:	103ee83a 	callr	r2
    acb0:	da800c17 	ldw	r10,48(sp)
    acb4:	1007883a 	mov	r3,r2
    acb8:	101b883a 	mov	r13,r2
    acbc:	dbc00d17 	ldw	r15,52(sp)
    acc0:	1284f03a 	xor	r2,r2,r10
    acc4:	003f2c06 	br	a978 <__alt_data_end+0xfc00a978>
    acc8:	00800184 	movi	r2,6
    accc:	003ebe06 	br	a7c8 <__alt_data_end+0xfc00a7c8>
    acd0:	00ff4b0e 	bge	zero,r3,aa00 <__alt_data_end+0xfc00aa00>
    acd4:	003f6006 	br	aa58 <__alt_data_end+0xfc00aa58>
    acd8:	5080019c 	xori	r2,r10,6
    acdc:	90800916 	blt	r18,r2,ad04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    ace0:	50c0018c 	andi	r3,r10,6
    ace4:	90ff460e 	bge	r18,r3,aa00 <__alt_data_end+0xfc00aa00>
    ace8:	003fde06 	br	ac64 <__alt_data_end+0xfc00ac64>
    acec:	d8c01a17 	ldw	r3,104(sp)
    acf0:	2d45883a 	add	r2,r5,r21
    acf4:	18800326 	beq	r3,r2,ad04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    acf8:	02800044 	movi	r10,1
    acfc:	501f883a 	mov	r15,r10
    ad00:	003f9e06 	br	ab7c <__alt_data_end+0xfc00ab7c>
    ad04:	03400184 	movi	r13,6
    ad08:	00800084 	movi	r2,2
    ad0c:	6807883a 	mov	r3,r13
    ad10:	003f1d06 	br	a988 <__alt_data_end+0xfc00a988>
    ad14:	501b883a 	mov	r13,r10
    ad18:	5080005c 	xori	r2,r10,1
    ad1c:	5007883a 	mov	r3,r10
    ad20:	003f7b06 	br	ab10 <__alt_data_end+0xfc00ab10>

0000ad24 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    ad24:	deffef04 	addi	sp,sp,-68
    ad28:	ddc00e15 	stw	r23,56(sp)
    ad2c:	dd000b15 	stw	r20,44(sp)
    ad30:	dc400815 	stw	r17,32(sp)
    ad34:	3029883a 	mov	r20,r6
    ad38:	dfc01015 	stw	ra,64(sp)
    ad3c:	df000f15 	stw	fp,60(sp)
    ad40:	dd800d15 	stw	r22,52(sp)
    ad44:	dd400c15 	stw	r21,48(sp)
    ad48:	dcc00a15 	stw	r19,40(sp)
    ad4c:	dc800915 	stw	r18,36(sp)
    ad50:	dc000715 	stw	r16,28(sp)
    ad54:	d9000515 	stw	r4,20(sp)
    ad58:	2823883a 	mov	r17,r5
    ad5c:	382f883a 	mov	r23,r7
    ad60:	000b10c0 	call	b10c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    ad64:	100d883a 	mov	r6,r2
    ad68:	10803fcc 	andi	r2,r2,255
    ad6c:	1000441e 	bne	r2,zero,ae80 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    ad70:	bc000217 	ldw	r16,8(r23)
    ad74:	8080040c 	andi	r2,r16,16
    ad78:	10000226 	beq	r2,zero,ad84 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    ad7c:	d8c00517 	ldw	r3,20(sp)
    ad80:	1c000217 	ldw	r16,8(r3)
    ad84:	d8c00517 	ldw	r3,20(sp)
    ad88:	d8800517 	ldw	r2,20(sp)
    ad8c:	1f000317 	ldw	fp,12(r3)
    ad90:	e01090fa 	slli	r8,fp,3
    ad94:	40c00304 	addi	r3,r8,12
    ad98:	10ed883a 	add	r22,r2,r3
    ad9c:	80c0004c 	andi	r3,r16,1
    ada0:	42000204 	addi	r8,r8,8
    ada4:	d8c00415 	stw	r3,16(sp)
    ada8:	122b883a 	add	r21,r2,r8
    adac:	e0003226 	beq	fp,zero,ae78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    adb0:	b1800017 	ldw	r6,0(r22)
    adb4:	d8000015 	stw	zero,0(sp)
    adb8:	d8000115 	stw	zero,4(sp)
    adbc:	dc000215 	stw	r16,8(sp)
    adc0:	d8000315 	stw	zero,12(sp)
    adc4:	34c0008c 	andi	r19,r6,2
    adc8:	3480004c 	andi	r18,r6,1
    adcc:	9800021e 	bne	r19,zero,add8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    add0:	d8c00417 	ldw	r3,16(sp)
    add4:	18002426 	beq	r3,zero,ae68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    add8:	a0003626 	beq	r20,zero,aeb4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    addc:	300dd23a 	srai	r6,r6,8
    ade0:	90000326 	beq	r18,zero,adf0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    ade4:	a0800017 	ldw	r2,0(r20)
    ade8:	118d883a 	add	r6,r2,r6
    adec:	31800017 	ldw	r6,0(r6)
    adf0:	a18d883a 	add	r6,r20,r6
    adf4:	a9000017 	ldw	r4,0(r21)
    adf8:	d80f883a 	mov	r7,sp
    adfc:	880b883a 	mov	r5,r17
    ae00:	20800017 	ldw	r2,0(r4)
    ae04:	10800617 	ldw	r2,24(r2)
    ae08:	103ee83a 	callr	r2
    ae0c:	100d883a 	mov	r6,r2
    ae10:	10803fcc 	andi	r2,r2,255
    ae14:	10001426 	beq	r2,zero,ae68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    ae18:	d8800317 	ldw	r2,12(sp)
    ae1c:	00c00204 	movi	r3,8
    ae20:	10c02626 	beq	r2,r3,aebc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    ae24:	d8800117 	ldw	r2,4(sp)
    ae28:	00c000c4 	movi	r3,3
    ae2c:	1880040e 	bge	r3,r2,ae40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ae30:	9800031e 	bne	r19,zero,ae40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ae34:	00ffff44 	movi	r3,-3
    ae38:	10c4703a 	and	r2,r2,r3
    ae3c:	d8800115 	stw	r2,4(sp)
    ae40:	b9400317 	ldw	r5,12(r23)
    ae44:	28002126 	beq	r5,zero,aecc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    ae48:	b8800017 	ldw	r2,0(r23)
    ae4c:	d9000017 	ldw	r4,0(sp)
    ae50:	11004d1e 	bne	r2,r4,af88 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    ae54:	10003126 	beq	r2,zero,af1c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    ae58:	b9000117 	ldw	r4,4(r23)
    ae5c:	d8800117 	ldw	r2,4(sp)
    ae60:	2084b03a 	or	r2,r4,r2
    ae64:	b8800115 	stw	r2,4(r23)
    ae68:	e73fffc4 	addi	fp,fp,-1
    ae6c:	b5bffe04 	addi	r22,r22,-8
    ae70:	ad7ffe04 	addi	r21,r21,-8
    ae74:	e03fce1e 	bne	fp,zero,adb0 <__alt_data_end+0xfc00adb0>
    ae78:	b9800117 	ldw	r6,4(r23)
    ae7c:	300cc03a 	cmpne	r6,r6,zero
    ae80:	3005883a 	mov	r2,r6
    ae84:	dfc01017 	ldw	ra,64(sp)
    ae88:	df000f17 	ldw	fp,60(sp)
    ae8c:	ddc00e17 	ldw	r23,56(sp)
    ae90:	dd800d17 	ldw	r22,52(sp)
    ae94:	dd400c17 	ldw	r21,48(sp)
    ae98:	dd000b17 	ldw	r20,44(sp)
    ae9c:	dcc00a17 	ldw	r19,40(sp)
    aea0:	dc800917 	ldw	r18,36(sp)
    aea4:	dc400817 	ldw	r17,32(sp)
    aea8:	dc000717 	ldw	r16,28(sp)
    aeac:	dec01104 	addi	sp,sp,68
    aeb0:	f800283a 	ret
    aeb4:	000d883a 	mov	r6,zero
    aeb8:	003fce06 	br	adf4 <__alt_data_end+0xfc00adf4>
    aebc:	903fd926 	beq	r18,zero,ae24 <__alt_data_end+0xfc00ae24>
    aec0:	a8800017 	ldw	r2,0(r21)
    aec4:	d8800315 	stw	r2,12(sp)
    aec8:	003fd606 	br	ae24 <__alt_data_end+0xfc00ae24>
    aecc:	d9000017 	ldw	r4,0(sp)
    aed0:	d8800117 	ldw	r2,4(sp)
    aed4:	00c000c4 	movi	r3,3
    aed8:	b9000015 	stw	r4,0(r23)
    aedc:	d9000217 	ldw	r4,8(sp)
    aee0:	b8800115 	stw	r2,4(r23)
    aee4:	b9000215 	stw	r4,8(r23)
    aee8:	d9000317 	ldw	r4,12(sp)
    aeec:	b9000315 	stw	r4,12(r23)
    aef0:	18bfe30e 	bge	r3,r2,ae80 <__alt_data_end+0xfc00ae80>
    aef4:	1100008c 	andi	r4,r2,2
    aef8:	20001926 	beq	r4,zero,af60 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    aefc:	d8c00517 	ldw	r3,20(sp)
    af00:	18800217 	ldw	r2,8(r3)
    af04:	1080004c 	andi	r2,r2,1
    af08:	103fdd26 	beq	r2,zero,ae80 <__alt_data_end+0xfc00ae80>
    af0c:	e73fffc4 	addi	fp,fp,-1
    af10:	b5bffe04 	addi	r22,r22,-8
    af14:	ad7ffe04 	addi	r21,r21,-8
    af18:	003fd606 	br	ae74 <__alt_data_end+0xfc00ae74>
    af1c:	d8800317 	ldw	r2,12(sp)
    af20:	00c00204 	movi	r3,8
    af24:	10c00b26 	beq	r2,r3,af54 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    af28:	28c00a26 	beq	r5,r3,af54 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    af2c:	11000117 	ldw	r4,4(r2)
    af30:	29400117 	ldw	r5,4(r5)
    af34:	217fc826 	beq	r4,r5,ae58 <__alt_data_end+0xfc00ae58>
    af38:	20800007 	ldb	r2,0(r4)
    af3c:	00c00a84 	movi	r3,42
    af40:	10c00426 	beq	r2,r3,af54 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    af44:	d9800615 	stw	r6,24(sp)
    af48:	000e26c0 	call	e26c <strcmp>
    af4c:	d9800617 	ldw	r6,24(sp)
    af50:	103fc126 	beq	r2,zero,ae58 <__alt_data_end+0xfc00ae58>
    af54:	00800084 	movi	r2,2
    af58:	b8800115 	stw	r2,4(r23)
    af5c:	003fc806 	br	ae80 <__alt_data_end+0xfc00ae80>
    af60:	1080004c 	andi	r2,r2,1
    af64:	103fc626 	beq	r2,zero,ae80 <__alt_data_end+0xfc00ae80>
    af68:	d8c00517 	ldw	r3,20(sp)
    af6c:	18800217 	ldw	r2,8(r3)
    af70:	1080008c 	andi	r2,r2,2
    af74:	103fc226 	beq	r2,zero,ae80 <__alt_data_end+0xfc00ae80>
    af78:	e73fffc4 	addi	fp,fp,-1
    af7c:	b5bffe04 	addi	r22,r22,-8
    af80:	ad7ffe04 	addi	r21,r21,-8
    af84:	003fbb06 	br	ae74 <__alt_data_end+0xfc00ae74>
    af88:	00800084 	movi	r2,2
    af8c:	b8000015 	stw	zero,0(r23)
    af90:	b8800115 	stw	r2,4(r23)
    af94:	003fba06 	br	ae80 <__alt_data_end+0xfc00ae80>

0000af98 <_ZNSt9type_infoD1Ev>:
    af98:	f800283a 	ret

0000af9c <_ZNKSt9type_info14__is_pointer_pEv>:
    af9c:	0005883a 	mov	r2,zero
    afa0:	f800283a 	ret

0000afa4 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    afa4:	0005883a 	mov	r2,zero
    afa8:	f800283a 	ret

0000afac <_ZNSt9type_infoD0Ev>:
    afac:	000aff41 	jmpi	aff4 <_ZdlPv>

0000afb0 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    afb0:	21000117 	ldw	r4,4(r4)
    afb4:	29400117 	ldw	r5,4(r5)
    afb8:	21400c26 	beq	r4,r5,afec <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    afbc:	20c00007 	ldb	r3,0(r4)
    afc0:	00800a84 	movi	r2,42
    afc4:	18800726 	beq	r3,r2,afe4 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    afc8:	deffff04 	addi	sp,sp,-4
    afcc:	dfc00015 	stw	ra,0(sp)
    afd0:	000e26c0 	call	e26c <strcmp>
    afd4:	1005003a 	cmpeq	r2,r2,zero
    afd8:	dfc00017 	ldw	ra,0(sp)
    afdc:	dec00104 	addi	sp,sp,4
    afe0:	f800283a 	ret
    afe4:	0005883a 	mov	r2,zero
    afe8:	f800283a 	ret
    afec:	00800044 	movi	r2,1
    aff0:	f800283a 	ret

0000aff4 <_ZdlPv>:
    aff4:	000d2601 	jmpi	d260 <free>

0000aff8 <__cxa_pure_virtual>:
    aff8:	014000f4 	movhi	r5,3
    affc:	deffff04 	addi	sp,sp,-4
    b000:	2964f404 	addi	r5,r5,-27696
    b004:	018006c4 	movi	r6,27
    b008:	01000084 	movi	r4,2
    b00c:	dfc00015 	stw	ra,0(sp)
    b010:	001e8940 	call	1e894 <write>
    b014:	000b3c00 	call	b3c0 <_ZSt9terminatev>

0000b018 <__cxa_deleted_virtual>:
    b018:	014000f4 	movhi	r5,3
    b01c:	deffff04 	addi	sp,sp,-4
    b020:	2964fb04 	addi	r5,r5,-27668
    b024:	01800784 	movi	r6,30
    b028:	01000084 	movi	r4,2
    b02c:	dfc00015 	stw	ra,0(sp)
    b030:	001e8940 	call	1e894 <write>
    b034:	000b3c00 	call	b3c0 <_ZSt9terminatev>

0000b038 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    b038:	20800017 	ldw	r2,0(r4)
    b03c:	defffa04 	addi	sp,sp,-24
    b040:	dc000415 	stw	r16,16(sp)
    b044:	10800617 	ldw	r2,24(r2)
    b048:	3021883a 	mov	r16,r6
    b04c:	31800017 	ldw	r6,0(r6)
    b050:	00c00404 	movi	r3,16
    b054:	d8c00215 	stw	r3,8(sp)
    b058:	dfc00515 	stw	ra,20(sp)
    b05c:	d8000015 	stw	zero,0(sp)
    b060:	d8000115 	stw	zero,4(sp)
    b064:	d8000315 	stw	zero,12(sp)
    b068:	d80f883a 	mov	r7,sp
    b06c:	103ee83a 	callr	r2
    b070:	d8800117 	ldw	r2,4(sp)
    b074:	00c00184 	movi	r3,6
    b078:	1080018c 	andi	r2,r2,6
    b07c:	10c00526 	beq	r2,r3,b094 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    b080:	0005883a 	mov	r2,zero
    b084:	dfc00517 	ldw	ra,20(sp)
    b088:	dc000417 	ldw	r16,16(sp)
    b08c:	dec00604 	addi	sp,sp,24
    b090:	f800283a 	ret
    b094:	d8c00017 	ldw	r3,0(sp)
    b098:	00800044 	movi	r2,1
    b09c:	80c00015 	stw	r3,0(r16)
    b0a0:	dfc00517 	ldw	ra,20(sp)
    b0a4:	dc000417 	ldw	r16,16(sp)
    b0a8:	dec00604 	addi	sp,sp,24
    b0ac:	f800283a 	ret

0000b0b0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    b0b0:	d8800017 	ldw	r2,0(sp)
    b0b4:	11800226 	beq	r2,r6,b0c0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    b0b8:	00800044 	movi	r2,1
    b0bc:	f800283a 	ret
    b0c0:	00800184 	movi	r2,6
    b0c4:	f800283a 	ret

0000b0c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    b0c8:	008000f4 	movhi	r2,3
    b0cc:	10a51104 	addi	r2,r2,-27580
    b0d0:	20800015 	stw	r2,0(r4)
    b0d4:	000af981 	jmpi	af98 <_ZNSt9type_infoD1Ev>

0000b0d8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    b0d8:	defffe04 	addi	sp,sp,-8
    b0dc:	008000f4 	movhi	r2,3
    b0e0:	dc000015 	stw	r16,0(sp)
    b0e4:	dfc00115 	stw	ra,4(sp)
    b0e8:	10a51104 	addi	r2,r2,-27580
    b0ec:	20800015 	stw	r2,0(r4)
    b0f0:	2021883a 	mov	r16,r4
    b0f4:	000af980 	call	af98 <_ZNSt9type_infoD1Ev>
    b0f8:	8009883a 	mov	r4,r16
    b0fc:	dfc00117 	ldw	ra,4(sp)
    b100:	dc000017 	ldw	r16,0(sp)
    b104:	dec00204 	addi	sp,sp,8
    b108:	000aff41 	jmpi	aff4 <_ZdlPv>

0000b10c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    b10c:	21000117 	ldw	r4,4(r4)
    b110:	29400117 	ldw	r5,4(r5)
    b114:	defffd04 	addi	sp,sp,-12
    b118:	dc400115 	stw	r17,4(sp)
    b11c:	dc000015 	stw	r16,0(sp)
    b120:	dfc00215 	stw	ra,8(sp)
    b124:	3023883a 	mov	r17,r6
    b128:	3821883a 	mov	r16,r7
    b12c:	21400526 	beq	r4,r5,b144 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    b130:	20c00007 	ldb	r3,0(r4)
    b134:	00800a84 	movi	r2,42
    b138:	18800d26 	beq	r3,r2,b170 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b13c:	000e26c0 	call	e26c <strcmp>
    b140:	10000b1e 	bne	r2,zero,b170 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b144:	00800204 	movi	r2,8
    b148:	80800315 	stw	r2,12(r16)
    b14c:	00800184 	movi	r2,6
    b150:	80800115 	stw	r2,4(r16)
    b154:	84400015 	stw	r17,0(r16)
    b158:	00800044 	movi	r2,1
    b15c:	dfc00217 	ldw	ra,8(sp)
    b160:	dc400117 	ldw	r17,4(sp)
    b164:	dc000017 	ldw	r16,0(sp)
    b168:	dec00304 	addi	sp,sp,12
    b16c:	f800283a 	ret
    b170:	0005883a 	mov	r2,zero
    b174:	003ff906 	br	b15c <__alt_data_end+0xfc00b15c>

0000b178 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    b178:	defffa04 	addi	sp,sp,-24
    b17c:	dc800415 	stw	r18,16(sp)
    b180:	d8800817 	ldw	r2,32(sp)
    b184:	dc800617 	ldw	r18,24(sp)
    b188:	dc400315 	stw	r17,12(sp)
    b18c:	dc000215 	stw	r16,8(sp)
    b190:	dfc00515 	stw	ra,20(sp)
    b194:	dc400917 	ldw	r17,36(sp)
    b198:	24000117 	ldw	r16,4(r4)
    b19c:	90801526 	beq	r18,r2,b1f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    b1a0:	39400117 	ldw	r5,4(r7)
    b1a4:	2c000826 	beq	r5,r16,b1c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    b1a8:	80c00007 	ldb	r3,0(r16)
    b1ac:	00800a84 	movi	r2,42
    b1b0:	18800926 	beq	r3,r2,b1d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b1b4:	8009883a 	mov	r4,r16
    b1b8:	d9800115 	stw	r6,4(sp)
    b1bc:	000e26c0 	call	e26c <strcmp>
    b1c0:	d9800117 	ldw	r6,4(sp)
    b1c4:	1000041e 	bne	r2,zero,b1d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b1c8:	00800044 	movi	r2,1
    b1cc:	8c800015 	stw	r18,0(r17)
    b1d0:	89800115 	stw	r6,4(r17)
    b1d4:	88800315 	stw	r2,12(r17)
    b1d8:	0005883a 	mov	r2,zero
    b1dc:	dfc00517 	ldw	ra,20(sp)
    b1e0:	dc800417 	ldw	r18,16(sp)
    b1e4:	dc400317 	ldw	r17,12(sp)
    b1e8:	dc000217 	ldw	r16,8(sp)
    b1ec:	dec00604 	addi	sp,sp,24
    b1f0:	f800283a 	ret
    b1f4:	d8800717 	ldw	r2,28(sp)
    b1f8:	11400117 	ldw	r5,4(r2)
    b1fc:	81400a26 	beq	r16,r5,b228 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    b200:	80c00007 	ldb	r3,0(r16)
    b204:	00800a84 	movi	r2,42
    b208:	18800c26 	beq	r3,r2,b23c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    b20c:	8009883a 	mov	r4,r16
    b210:	d9800115 	stw	r6,4(sp)
    b214:	d9c00015 	stw	r7,0(sp)
    b218:	000e26c0 	call	e26c <strcmp>
    b21c:	d9800117 	ldw	r6,4(sp)
    b220:	d9c00017 	ldw	r7,0(sp)
    b224:	1000021e 	bne	r2,zero,b230 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    b228:	89800215 	stw	r6,8(r17)
    b22c:	003fea06 	br	b1d8 <__alt_data_end+0xfc00b1d8>
    b230:	39400117 	ldw	r5,4(r7)
    b234:	817fdf1e 	bne	r16,r5,b1b4 <__alt_data_end+0xfc00b1b4>
    b238:	003fe306 	br	b1c8 <__alt_data_end+0xfc00b1c8>
    b23c:	38800117 	ldw	r2,4(r7)
    b240:	80bfe51e 	bne	r16,r2,b1d8 <__alt_data_end+0xfc00b1d8>
    b244:	003fe006 	br	b1c8 <__alt_data_end+0xfc00b1c8>

0000b248 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    b248:	20800117 	ldw	r2,4(r4)
    b24c:	28c00117 	ldw	r3,4(r5)
    b250:	10c02926 	beq	r2,r3,b2f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    b254:	defffb04 	addi	sp,sp,-20
    b258:	dcc00315 	stw	r19,12(sp)
    b25c:	dc800215 	stw	r18,8(sp)
    b260:	dc400115 	stw	r17,4(sp)
    b264:	dc000015 	stw	r16,0(sp)
    b268:	dfc00415 	stw	ra,16(sp)
    b26c:	2821883a 	mov	r16,r5
    b270:	11400007 	ldb	r5,0(r2)
    b274:	2025883a 	mov	r18,r4
    b278:	01000a84 	movi	r4,42
    b27c:	3823883a 	mov	r17,r7
    b280:	3027883a 	mov	r19,r6
    b284:	29000626 	beq	r5,r4,b2a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b288:	180b883a 	mov	r5,r3
    b28c:	1009883a 	mov	r4,r2
    b290:	000e26c0 	call	e26c <strcmp>
    b294:	1000021e 	bne	r2,zero,b2a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b298:	00800044 	movi	r2,1
    b29c:	00000306 	br	b2ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    b2a0:	008000c4 	movi	r2,3
    b2a4:	1440082e 	bgeu	r2,r17,b2c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    b2a8:	0005883a 	mov	r2,zero
    b2ac:	dfc00417 	ldw	ra,16(sp)
    b2b0:	dcc00317 	ldw	r19,12(sp)
    b2b4:	dc800217 	ldw	r18,8(sp)
    b2b8:	dc400117 	ldw	r17,4(sp)
    b2bc:	dc000017 	ldw	r16,0(sp)
    b2c0:	dec00504 	addi	sp,sp,20
    b2c4:	f800283a 	ret
    b2c8:	80800017 	ldw	r2,0(r16)
    b2cc:	980d883a 	mov	r6,r19
    b2d0:	900b883a 	mov	r5,r18
    b2d4:	10800517 	ldw	r2,20(r2)
    b2d8:	8009883a 	mov	r4,r16
    b2dc:	dfc00417 	ldw	ra,16(sp)
    b2e0:	dcc00317 	ldw	r19,12(sp)
    b2e4:	dc800217 	ldw	r18,8(sp)
    b2e8:	dc400117 	ldw	r17,4(sp)
    b2ec:	dc000017 	ldw	r16,0(sp)
    b2f0:	dec00504 	addi	sp,sp,20
    b2f4:	1000683a 	jmp	r2
    b2f8:	00800044 	movi	r2,1
    b2fc:	f800283a 	ret

0000b300 <_ZN10__cxxabiv111__terminateEPFvvE>:
    b300:	00800074 	movhi	r2,1
    b304:	deffef04 	addi	sp,sp,-68
    b308:	10af1a04 	addi	r2,r2,-17304
    b30c:	d8800615 	stw	r2,24(sp)
    b310:	008000b4 	movhi	r2,2
    b314:	108a5504 	addi	r2,r2,10580
    b318:	d8800715 	stw	r2,28(sp)
    b31c:	00800074 	movhi	r2,1
    b320:	10acd604 	addi	r2,r2,-19624
    b324:	d9000d15 	stw	r4,52(sp)
    b328:	d809883a 	mov	r4,sp
    b32c:	d8800915 	stw	r2,36(sp)
    b330:	dfc01015 	stw	ra,64(sp)
    b334:	df000f15 	stw	fp,60(sp)
    b338:	dec00815 	stw	sp,32(sp)
    b33c:	dec00a15 	stw	sp,40(sp)
    b340:	000ced00 	call	ced0 <_Unwind_SjLj_Register>
    b344:	00800044 	movi	r2,1
    b348:	d8800115 	stw	r2,4(sp)
    b34c:	d8800d17 	ldw	r2,52(sp)
    b350:	103ee83a 	callr	r2
    b354:	000d1e80 	call	d1e8 <abort>
    b358:	d8c00217 	ldw	r3,8(sp)
    b35c:	d8800117 	ldw	r2,4(sp)
    b360:	d8c00d15 	stw	r3,52(sp)
    b364:	d8c00317 	ldw	r3,12(sp)
    b368:	d8c00e15 	stw	r3,56(sp)
    b36c:	10000b26 	beq	r2,zero,b39c <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    b370:	10bfffc4 	addi	r2,r2,-1
    b374:	10000126 	beq	r2,zero,b37c <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    b378:	003b68fa 	trap	3
    b37c:	d8000115 	stw	zero,4(sp)
    b380:	000c6ac0 	call	c6ac <__cxa_end_catch>
    b384:	d8c00e17 	ldw	r3,56(sp)
    b388:	00bfffc4 	movi	r2,-1
    b38c:	18800826 	beq	r3,r2,b3b0 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    b390:	d9000d17 	ldw	r4,52(sp)
    b394:	d8800115 	stw	r2,4(sp)
    b398:	000d0cc0 	call	d0cc <_Unwind_SjLj_Resume>
    b39c:	d9000d17 	ldw	r4,52(sp)
    b3a0:	000c5f80 	call	c5f8 <__cxa_begin_catch>
    b3a4:	00800084 	movi	r2,2
    b3a8:	d8800115 	stw	r2,4(sp)
    b3ac:	000d1e80 	call	d1e8 <abort>
    b3b0:	d8800e17 	ldw	r2,56(sp)
    b3b4:	d9000d17 	ldw	r4,52(sp)
    b3b8:	d8800115 	stw	r2,4(sp)
    b3bc:	000c2680 	call	c268 <__cxa_call_unexpected>

0000b3c0 <_ZSt9terminatev>:
    b3c0:	008000f4 	movhi	r2,3
    b3c4:	10b28d04 	addi	r2,r2,-13772
    b3c8:	11000017 	ldw	r4,0(r2)
    b3cc:	deffff04 	addi	sp,sp,-4
    b3d0:	dfc00015 	stw	ra,0(sp)
    b3d4:	000b3000 	call	b300 <_ZN10__cxxabiv111__terminateEPFvvE>

0000b3d8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    b3d8:	deffff04 	addi	sp,sp,-4
    b3dc:	dfc00015 	stw	ra,0(sp)
    b3e0:	203ee83a 	callr	r4
    b3e4:	000b3c00 	call	b3c0 <_ZSt9terminatev>

0000b3e8 <_ZSt10unexpectedv>:
    b3e8:	008000f4 	movhi	r2,3
    b3ec:	10b28c04 	addi	r2,r2,-13776
    b3f0:	11000017 	ldw	r4,0(r2)
    b3f4:	deffff04 	addi	sp,sp,-4
    b3f8:	dfc00015 	stw	ra,0(sp)
    b3fc:	000b3d80 	call	b3d8 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000b400 <_ZSt13set_terminatePFvvE>:
    b400:	00c000f4 	movhi	r3,3
    b404:	18f28d04 	addi	r3,r3,-13772
    b408:	18800017 	ldw	r2,0(r3)
    b40c:	19000015 	stw	r4,0(r3)
    b410:	f800283a 	ret

0000b414 <_ZSt13get_terminatev>:
    b414:	008000f4 	movhi	r2,3
    b418:	10b28d04 	addi	r2,r2,-13772
    b41c:	10800017 	ldw	r2,0(r2)
    b420:	f800283a 	ret

0000b424 <_ZSt14set_unexpectedPFvvE>:
    b424:	00c000f4 	movhi	r3,3
    b428:	18f28c04 	addi	r3,r3,-13776
    b42c:	18800017 	ldw	r2,0(r3)
    b430:	19000015 	stw	r4,0(r3)
    b434:	f800283a 	ret

0000b438 <_ZSt14get_unexpectedv>:
    b438:	008000f4 	movhi	r2,3
    b43c:	10b28c04 	addi	r2,r2,-13776
    b440:	10800017 	ldw	r2,0(r2)
    b444:	f800283a 	ret

0000b448 <_ZL21size_of_encoded_valueh>:
    b448:	deffff04 	addi	sp,sp,-4
    b44c:	dfc00015 	stw	ra,0(sp)
    b450:	20c03fcc 	andi	r3,r4,255
    b454:	00803fc4 	movi	r2,255
    b458:	18802026 	beq	r3,r2,b4dc <_ZL21size_of_encoded_valueh+0x94>
    b45c:	210001cc 	andi	r4,r4,7
    b460:	00800144 	movi	r2,5
    b464:	11001c36 	bltu	r2,r4,b4d8 <_ZL21size_of_encoded_valueh+0x90>
    b468:	200890ba 	slli	r4,r4,2
    b46c:	00800074 	movhi	r2,1
    b470:	10ad2004 	addi	r2,r2,-19328
    b474:	2089883a 	add	r4,r4,r2
    b478:	20800017 	ldw	r2,0(r4)
    b47c:	1000683a 	jmp	r2
    b480:	0000b498 	cmpnei	zero,zero,722
    b484:	0000b4d8 	cmpnei	zero,zero,723
    b488:	0000b4a8 	cmpgeui	zero,zero,722
    b48c:	0000b498 	cmpnei	zero,zero,722
    b490:	0000b4c8 	cmpgei	zero,zero,723
    b494:	0000b4b8 	rdprs	zero,zero,722
    b498:	00800104 	movi	r2,4
    b49c:	dfc00017 	ldw	ra,0(sp)
    b4a0:	dec00104 	addi	sp,sp,4
    b4a4:	f800283a 	ret
    b4a8:	00800084 	movi	r2,2
    b4ac:	dfc00017 	ldw	ra,0(sp)
    b4b0:	dec00104 	addi	sp,sp,4
    b4b4:	f800283a 	ret
    b4b8:	00800044 	movi	r2,1
    b4bc:	dfc00017 	ldw	ra,0(sp)
    b4c0:	dec00104 	addi	sp,sp,4
    b4c4:	f800283a 	ret
    b4c8:	00800204 	movi	r2,8
    b4cc:	dfc00017 	ldw	ra,0(sp)
    b4d0:	dec00104 	addi	sp,sp,4
    b4d4:	f800283a 	ret
    b4d8:	000d1e80 	call	d1e8 <abort>
    b4dc:	0005883a 	mov	r2,zero
    b4e0:	dfc00017 	ldw	ra,0(sp)
    b4e4:	dec00104 	addi	sp,sp,4
    b4e8:	f800283a 	ret

0000b4ec <_ZL28read_encoded_value_with_basehjPKhPj>:
    b4ec:	deffff04 	addi	sp,sp,-4
    b4f0:	dfc00015 	stw	ra,0(sp)
    b4f4:	20c03fcc 	andi	r3,r4,255
    b4f8:	00801404 	movi	r2,80
    b4fc:	18807326 	beq	r3,r2,b6cc <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    b500:	20c003cc 	andi	r3,r4,15
    b504:	00800304 	movi	r2,12
    b508:	10c06f36 	bltu	r2,r3,b6c8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    b50c:	180690ba 	slli	r3,r3,2
    b510:	02000074 	movhi	r8,1
    b514:	422d4904 	addi	r8,r8,-19164
    b518:	1a07883a 	add	r3,r3,r8
    b51c:	18800017 	ldw	r2,0(r3)
    b520:	1000683a 	jmp	r2
    b524:	0000b558 	cmpnei	zero,zero,725
    b528:	0000b674 	movhi	zero,729
    b52c:	0000b6b0 	cmpltui	zero,zero,730
    b530:	0000b558 	cmpnei	zero,zero,725
    b534:	0000b5bc 	xorhi	zero,zero,726
    b538:	0000b610 	cmplti	zero,zero,728
    b53c:	0000b6c8 	cmpgei	zero,zero,731
    b540:	0000b6c8 	cmpgei	zero,zero,731
    b544:	0000b6c8 	cmpgei	zero,zero,731
    b548:	0000b61c 	xori	zero,zero,728
    b54c:	0000b5ec 	andhi	zero,zero,727
    b550:	0000b558 	cmpnei	zero,zero,725
    b554:	0000b5bc 	xorhi	zero,zero,726
    b558:	30800043 	ldbu	r2,1(r6)
    b55c:	30c00083 	ldbu	r3,2(r6)
    b560:	324000c3 	ldbu	r9,3(r6)
    b564:	32000003 	ldbu	r8,0(r6)
    b568:	1004923a 	slli	r2,r2,8
    b56c:	1806943a 	slli	r3,r3,16
    b570:	4812963a 	slli	r9,r9,24
    b574:	1204b03a 	or	r2,r2,r8
    b578:	1884b03a 	or	r2,r3,r2
    b57c:	4886b03a 	or	r3,r9,r2
    b580:	30800104 	addi	r2,r6,4
    b584:	18000926 	beq	r3,zero,b5ac <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b588:	22001c0c 	andi	r8,r4,112
    b58c:	02400404 	movi	r9,16
    b590:	42405726 	beq	r8,r9,b6f0 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    b594:	21003fcc 	andi	r4,r4,255
    b598:	2100201c 	xori	r4,r4,128
    b59c:	213fe004 	addi	r4,r4,-128
    b5a0:	1947883a 	add	r3,r3,r5
    b5a4:	2000010e 	bge	r4,zero,b5ac <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b5a8:	18c00017 	ldw	r3,0(r3)
    b5ac:	38c00015 	stw	r3,0(r7)
    b5b0:	dfc00017 	ldw	ra,0(sp)
    b5b4:	dec00104 	addi	sp,sp,4
    b5b8:	f800283a 	ret
    b5bc:	30800043 	ldbu	r2,1(r6)
    b5c0:	30c00083 	ldbu	r3,2(r6)
    b5c4:	324000c3 	ldbu	r9,3(r6)
    b5c8:	32000003 	ldbu	r8,0(r6)
    b5cc:	1004923a 	slli	r2,r2,8
    b5d0:	1806943a 	slli	r3,r3,16
    b5d4:	4812963a 	slli	r9,r9,24
    b5d8:	1204b03a 	or	r2,r2,r8
    b5dc:	1884b03a 	or	r2,r3,r2
    b5e0:	4886b03a 	or	r3,r9,r2
    b5e4:	30800204 	addi	r2,r6,8
    b5e8:	003fe606 	br	b584 <__alt_data_end+0xfc00b584>
    b5ec:	30c00043 	ldbu	r3,1(r6)
    b5f0:	32000003 	ldbu	r8,0(r6)
    b5f4:	30800084 	addi	r2,r6,2
    b5f8:	1806923a 	slli	r3,r3,8
    b5fc:	1a06b03a 	or	r3,r3,r8
    b600:	18ffffcc 	andi	r3,r3,65535
    b604:	18e0001c 	xori	r3,r3,32768
    b608:	18e00004 	addi	r3,r3,-32768
    b60c:	003fdd06 	br	b584 <__alt_data_end+0xfc00b584>
    b610:	30c00003 	ldbu	r3,0(r6)
    b614:	30800044 	addi	r2,r6,1
    b618:	003fda06 	br	b584 <__alt_data_end+0xfc00b584>
    b61c:	3017883a 	mov	r11,r6
    b620:	0007883a 	mov	r3,zero
    b624:	0013883a 	mov	r9,zero
    b628:	5a800003 	ldbu	r10,0(r11)
    b62c:	58800044 	addi	r2,r11,1
    b630:	1017883a 	mov	r11,r2
    b634:	52001fcc 	andi	r8,r10,127
    b638:	4250983a 	sll	r8,r8,r9
    b63c:	53003fcc 	andi	r12,r10,255
    b640:	6300201c 	xori	r12,r12,128
    b644:	633fe004 	addi	r12,r12,-128
    b648:	1a06b03a 	or	r3,r3,r8
    b64c:	4a4001c4 	addi	r9,r9,7
    b650:	603ff516 	blt	r12,zero,b628 <__alt_data_end+0xfc00b628>
    b654:	020007c4 	movi	r8,31
    b658:	427fca36 	bltu	r8,r9,b584 <__alt_data_end+0xfc00b584>
    b65c:	5280100c 	andi	r10,r10,64
    b660:	503fc826 	beq	r10,zero,b584 <__alt_data_end+0xfc00b584>
    b664:	023fffc4 	movi	r8,-1
    b668:	4252983a 	sll	r9,r8,r9
    b66c:	1a46b03a 	or	r3,r3,r9
    b670:	003fc506 	br	b588 <__alt_data_end+0xfc00b588>
    b674:	3017883a 	mov	r11,r6
    b678:	0007883a 	mov	r3,zero
    b67c:	0015883a 	mov	r10,zero
    b680:	5a000003 	ldbu	r8,0(r11)
    b684:	58800044 	addi	r2,r11,1
    b688:	1017883a 	mov	r11,r2
    b68c:	42401fcc 	andi	r9,r8,127
    b690:	4a92983a 	sll	r9,r9,r10
    b694:	42003fcc 	andi	r8,r8,255
    b698:	4200201c 	xori	r8,r8,128
    b69c:	423fe004 	addi	r8,r8,-128
    b6a0:	1a46b03a 	or	r3,r3,r9
    b6a4:	528001c4 	addi	r10,r10,7
    b6a8:	403ff516 	blt	r8,zero,b680 <__alt_data_end+0xfc00b680>
    b6ac:	003fb506 	br	b584 <__alt_data_end+0xfc00b584>
    b6b0:	30c00043 	ldbu	r3,1(r6)
    b6b4:	32000003 	ldbu	r8,0(r6)
    b6b8:	30800084 	addi	r2,r6,2
    b6bc:	1806923a 	slli	r3,r3,8
    b6c0:	1a06b03a 	or	r3,r3,r8
    b6c4:	003faf06 	br	b584 <__alt_data_end+0xfc00b584>
    b6c8:	000d1e80 	call	d1e8 <abort>
    b6cc:	308000c4 	addi	r2,r6,3
    b6d0:	00ffff04 	movi	r3,-4
    b6d4:	10c4703a 	and	r2,r2,r3
    b6d8:	10c00017 	ldw	r3,0(r2)
    b6dc:	10800104 	addi	r2,r2,4
    b6e0:	38c00015 	stw	r3,0(r7)
    b6e4:	dfc00017 	ldw	ra,0(sp)
    b6e8:	dec00104 	addi	sp,sp,4
    b6ec:	f800283a 	ret
    b6f0:	300b883a 	mov	r5,r6
    b6f4:	003fa706 	br	b594 <__alt_data_end+0xfc00b594>

0000b6f8 <_ZL15get_ttype_entryP16lsda_header_infom>:
    b6f8:	defffc04 	addi	sp,sp,-16
    b6fc:	dfc00315 	stw	ra,12(sp)
    b700:	dc000215 	stw	r16,8(sp)
    b704:	2021883a 	mov	r16,r4
    b708:	21000503 	ldbu	r4,20(r4)
    b70c:	d9400115 	stw	r5,4(sp)
    b710:	000b4480 	call	b448 <_ZL21size_of_encoded_valueh>
    b714:	d9400117 	ldw	r5,4(sp)
    b718:	1009883a 	mov	r4,r2
    b71c:	000cca00 	call	cca0 <__mulsi3>
    b720:	81800317 	ldw	r6,12(r16)
    b724:	81400217 	ldw	r5,8(r16)
    b728:	81000503 	ldbu	r4,20(r16)
    b72c:	d80f883a 	mov	r7,sp
    b730:	308dc83a 	sub	r6,r6,r2
    b734:	000b4ec0 	call	b4ec <_ZL28read_encoded_value_with_basehjPKhPj>
    b738:	d8800017 	ldw	r2,0(sp)
    b73c:	dfc00317 	ldw	ra,12(sp)
    b740:	dc000217 	ldw	r16,8(sp)
    b744:	dec00404 	addi	sp,sp,16
    b748:	f800283a 	ret

0000b74c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    b74c:	deffff04 	addi	sp,sp,-4
    b750:	dfc00015 	stw	ra,0(sp)
    b754:	20c03fcc 	andi	r3,r4,255
    b758:	00803fc4 	movi	r2,255
    b75c:	18800e26 	beq	r3,r2,b798 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b760:	20801c0c 	andi	r2,r4,112
    b764:	00c00804 	movi	r3,32
    b768:	10c01726 	beq	r2,r3,b7c8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    b76c:	18800e2e 	bgeu	r3,r2,b7a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    b770:	00c01004 	movi	r3,64
    b774:	10c01026 	beq	r2,r3,b7b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    b778:	00c01404 	movi	r3,80
    b77c:	10c00626 	beq	r2,r3,b798 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b780:	00c00c04 	movi	r3,48
    b784:	10c00b1e 	bne	r2,r3,b7b4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    b788:	2809883a 	mov	r4,r5
    b78c:	dfc00017 	ldw	ra,0(sp)
    b790:	dec00104 	addi	sp,sp,4
    b794:	000cfa81 	jmpi	cfa8 <_Unwind_GetDataRelBase>
    b798:	0005883a 	mov	r2,zero
    b79c:	dfc00017 	ldw	ra,0(sp)
    b7a0:	dec00104 	addi	sp,sp,4
    b7a4:	f800283a 	ret
    b7a8:	103ffb26 	beq	r2,zero,b798 <__alt_data_end+0xfc00b798>
    b7ac:	00c00404 	movi	r3,16
    b7b0:	10fff926 	beq	r2,r3,b798 <__alt_data_end+0xfc00b798>
    b7b4:	000d1e80 	call	d1e8 <abort>
    b7b8:	2809883a 	mov	r4,r5
    b7bc:	dfc00017 	ldw	ra,0(sp)
    b7c0:	dec00104 	addi	sp,sp,4
    b7c4:	000cf981 	jmpi	cf98 <_Unwind_GetRegionStart>
    b7c8:	2809883a 	mov	r4,r5
    b7cc:	dfc00017 	ldw	ra,0(sp)
    b7d0:	dec00104 	addi	sp,sp,4
    b7d4:	000cfb01 	jmpi	cfb0 <_Unwind_GetTextRelBase>

0000b7d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    b7d8:	defffb04 	addi	sp,sp,-20
    b7dc:	dcc00315 	stw	r19,12(sp)
    b7e0:	dc400115 	stw	r17,4(sp)
    b7e4:	dc000015 	stw	r16,0(sp)
    b7e8:	dfc00415 	stw	ra,16(sp)
    b7ec:	dc800215 	stw	r18,8(sp)
    b7f0:	2027883a 	mov	r19,r4
    b7f4:	2821883a 	mov	r16,r5
    b7f8:	3023883a 	mov	r17,r6
    b7fc:	20003f26 	beq	r4,zero,b8fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    b800:	000cf980 	call	cf98 <_Unwind_GetRegionStart>
    b804:	88800015 	stw	r2,0(r17)
    b808:	84800003 	ldbu	r18,0(r16)
    b80c:	00c03fc4 	movi	r3,255
    b810:	84000044 	addi	r16,r16,1
    b814:	90c03726 	beq	r18,r3,b8f4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    b818:	980b883a 	mov	r5,r19
    b81c:	9009883a 	mov	r4,r18
    b820:	000b74c0 	call	b74c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b824:	800d883a 	mov	r6,r16
    b828:	89c00104 	addi	r7,r17,4
    b82c:	100b883a 	mov	r5,r2
    b830:	9009883a 	mov	r4,r18
    b834:	000b4ec0 	call	b4ec <_ZL28read_encoded_value_with_basehjPKhPj>
    b838:	1021883a 	mov	r16,r2
    b83c:	80c00003 	ldbu	r3,0(r16)
    b840:	01003fc4 	movi	r4,255
    b844:	80800044 	addi	r2,r16,1
    b848:	88c00505 	stb	r3,20(r17)
    b84c:	18c03fcc 	andi	r3,r3,255
    b850:	19002c26 	beq	r3,r4,b904 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    b854:	100f883a 	mov	r7,r2
    b858:	000d883a 	mov	r6,zero
    b85c:	000b883a 	mov	r5,zero
    b860:	38c00003 	ldbu	r3,0(r7)
    b864:	10800044 	addi	r2,r2,1
    b868:	100f883a 	mov	r7,r2
    b86c:	19001fcc 	andi	r4,r3,127
    b870:	2148983a 	sll	r4,r4,r5
    b874:	18c03fcc 	andi	r3,r3,255
    b878:	18c0201c 	xori	r3,r3,128
    b87c:	18ffe004 	addi	r3,r3,-128
    b880:	310cb03a 	or	r6,r6,r4
    b884:	294001c4 	addi	r5,r5,7
    b888:	183ff516 	blt	r3,zero,b860 <__alt_data_end+0xfc00b860>
    b88c:	118d883a 	add	r6,r2,r6
    b890:	89800315 	stw	r6,12(r17)
    b894:	10c00003 	ldbu	r3,0(r2)
    b898:	000d883a 	mov	r6,zero
    b89c:	10800044 	addi	r2,r2,1
    b8a0:	88c00545 	stb	r3,21(r17)
    b8a4:	000b883a 	mov	r5,zero
    b8a8:	10c00003 	ldbu	r3,0(r2)
    b8ac:	10800044 	addi	r2,r2,1
    b8b0:	19001fcc 	andi	r4,r3,127
    b8b4:	2148983a 	sll	r4,r4,r5
    b8b8:	18c03fcc 	andi	r3,r3,255
    b8bc:	18c0201c 	xori	r3,r3,128
    b8c0:	18ffe004 	addi	r3,r3,-128
    b8c4:	310cb03a 	or	r6,r6,r4
    b8c8:	294001c4 	addi	r5,r5,7
    b8cc:	183ff616 	blt	r3,zero,b8a8 <__alt_data_end+0xfc00b8a8>
    b8d0:	118d883a 	add	r6,r2,r6
    b8d4:	89800415 	stw	r6,16(r17)
    b8d8:	dfc00417 	ldw	ra,16(sp)
    b8dc:	dcc00317 	ldw	r19,12(sp)
    b8e0:	dc800217 	ldw	r18,8(sp)
    b8e4:	dc400117 	ldw	r17,4(sp)
    b8e8:	dc000017 	ldw	r16,0(sp)
    b8ec:	dec00504 	addi	sp,sp,20
    b8f0:	f800283a 	ret
    b8f4:	88800115 	stw	r2,4(r17)
    b8f8:	003fd006 	br	b83c <__alt_data_end+0xfc00b83c>
    b8fc:	0005883a 	mov	r2,zero
    b900:	003fc006 	br	b804 <__alt_data_end+0xfc00b804>
    b904:	88000315 	stw	zero,12(r17)
    b908:	003fe206 	br	b894 <__alt_data_end+0xfc00b894>

0000b90c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    b90c:	28800017 	ldw	r2,0(r5)
    b910:	30c00017 	ldw	r3,0(r6)
    b914:	defffb04 	addi	sp,sp,-20
    b918:	10800217 	ldw	r2,8(r2)
    b91c:	dc400315 	stw	r17,12(sp)
    b920:	dc000215 	stw	r16,8(sp)
    b924:	d9400115 	stw	r5,4(sp)
    b928:	dfc00415 	stw	ra,16(sp)
    b92c:	2021883a 	mov	r16,r4
    b930:	d8c00015 	stw	r3,0(sp)
    b934:	2809883a 	mov	r4,r5
    b938:	3023883a 	mov	r17,r6
    b93c:	103ee83a 	callr	r2
    b940:	10803fcc 	andi	r2,r2,255
    b944:	d9400117 	ldw	r5,4(sp)
    b948:	10000326 	beq	r2,zero,b958 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    b94c:	d8800017 	ldw	r2,0(sp)
    b950:	10800017 	ldw	r2,0(r2)
    b954:	d8800015 	stw	r2,0(sp)
    b958:	80800017 	ldw	r2,0(r16)
    b95c:	01c00044 	movi	r7,1
    b960:	d80d883a 	mov	r6,sp
    b964:	10800417 	ldw	r2,16(r2)
    b968:	8009883a 	mov	r4,r16
    b96c:	103ee83a 	callr	r2
    b970:	10c03fcc 	andi	r3,r2,255
    b974:	18000226 	beq	r3,zero,b980 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    b978:	d8c00017 	ldw	r3,0(sp)
    b97c:	88c00015 	stw	r3,0(r17)
    b980:	dfc00417 	ldw	ra,16(sp)
    b984:	dc400317 	ldw	r17,12(sp)
    b988:	dc000217 	ldw	r16,8(sp)
    b98c:	dec00504 	addi	sp,sp,20
    b990:	f800283a 	ret

0000b994 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    b994:	defff304 	addi	sp,sp,-52
    b998:	dc800615 	stw	r18,24(sp)
    b99c:	3825d23a 	srai	r18,r7,8
    b9a0:	dd000815 	stw	r20,32(sp)
    b9a4:	dcc00715 	stw	r19,28(sp)
    b9a8:	dfc00c15 	stw	ra,48(sp)
    b9ac:	ddc00b15 	stw	r23,44(sp)
    b9b0:	dd800a15 	stw	r22,40(sp)
    b9b4:	dd400915 	stw	r21,36(sp)
    b9b8:	dc400515 	stw	r17,20(sp)
    b9bc:	dc000415 	stw	r16,16(sp)
    b9c0:	d9400215 	stw	r5,8(sp)
    b9c4:	3827883a 	mov	r19,r7
    b9c8:	2029883a 	mov	r20,r4
    b9cc:	9000010e 	bge	r18,zero,b9d4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    b9d0:	04a5c83a 	sub	r18,zero,r18
    b9d4:	000b883a 	mov	r5,zero
    b9d8:	01000144 	movi	r4,5
    b9dc:	d9800315 	stw	r6,12(sp)
    b9e0:	000b74c0 	call	b74c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b9e4:	d9800317 	ldw	r6,12(sp)
    b9e8:	d9c00104 	addi	r7,sp,4
    b9ec:	100b883a 	mov	r5,r2
    b9f0:	01000144 	movi	r4,5
    b9f4:	000b4ec0 	call	b4ec <_ZL28read_encoded_value_with_basehjPKhPj>
    b9f8:	017ffe44 	movi	r5,-7
    b9fc:	1009883a 	mov	r4,r2
    ba00:	1021883a 	mov	r16,r2
    ba04:	000cca00 	call	cca0 <__mulsi3>
    ba08:	102d883a 	mov	r22,r2
    ba0c:	0023883a 	mov	r17,zero
    ba10:	85400003 	ldbu	r21,0(r16)
    ba14:	8009883a 	mov	r4,r16
    ba18:	014001c4 	movi	r5,7
    ba1c:	000cca00 	call	cca0 <__mulsi3>
    ba20:	a8c01fcc 	andi	r3,r21,127
    ba24:	1585883a 	add	r2,r2,r22
    ba28:	1886983a 	sll	r3,r3,r2
    ba2c:	ad403fcc 	andi	r21,r21,255
    ba30:	ad40201c 	xori	r21,r21,128
    ba34:	ad7fe004 	addi	r21,r21,-128
    ba38:	84000044 	addi	r16,r16,1
    ba3c:	88e2b03a 	or	r17,r17,r3
    ba40:	a83ff316 	blt	r21,zero,ba10 <__alt_data_end+0xfc00ba10>
    ba44:	8461883a 	add	r16,r16,r17
    ba48:	017ffe44 	movi	r5,-7
    ba4c:	8009883a 	mov	r4,r16
    ba50:	000cca00 	call	cca0 <__mulsi3>
    ba54:	102d883a 	mov	r22,r2
    ba58:	002b883a 	mov	r21,zero
    ba5c:	84400003 	ldbu	r17,0(r16)
    ba60:	8009883a 	mov	r4,r16
    ba64:	014001c4 	movi	r5,7
    ba68:	000cca00 	call	cca0 <__mulsi3>
    ba6c:	88c01fcc 	andi	r3,r17,127
    ba70:	1585883a 	add	r2,r2,r22
    ba74:	1886983a 	sll	r3,r3,r2
    ba78:	8c403fcc 	andi	r17,r17,255
    ba7c:	8c40201c 	xori	r17,r17,128
    ba80:	8c7fe004 	addi	r17,r17,-128
    ba84:	84000044 	addi	r16,r16,1
    ba88:	a8eab03a 	or	r21,r21,r3
    ba8c:	883ff316 	blt	r17,zero,ba5c <__alt_data_end+0xfc00ba5c>
    ba90:	94403fcc 	andi	r17,r18,255
    ba94:	8c7fffc4 	addi	r17,r17,-1
    ba98:	8463883a 	add	r17,r16,r17
    ba9c:	ad4000c4 	addi	r21,r21,3
    baa0:	00bfff04 	movi	r2,-4
    baa4:	ac21883a 	add	r16,r21,r16
    baa8:	017ffe44 	movi	r5,-7
    baac:	8809883a 	mov	r4,r17
    bab0:	80a0703a 	and	r16,r16,r2
    bab4:	000cca00 	call	cca0 <__mulsi3>
    bab8:	0025883a 	mov	r18,zero
    babc:	102f883a 	mov	r23,r2
    bac0:	8d800003 	ldbu	r22,0(r17)
    bac4:	8809883a 	mov	r4,r17
    bac8:	014001c4 	movi	r5,7
    bacc:	000cca00 	call	cca0 <__mulsi3>
    bad0:	b0c01fcc 	andi	r3,r22,127
    bad4:	15c5883a 	add	r2,r2,r23
    bad8:	1886983a 	sll	r3,r3,r2
    badc:	b5803fcc 	andi	r22,r22,255
    bae0:	b580201c 	xori	r22,r22,128
    bae4:	8d400044 	addi	r21,r17,1
    bae8:	b5bfe004 	addi	r22,r22,-128
    baec:	90e4b03a 	or	r18,r18,r3
    baf0:	a823883a 	mov	r17,r21
    baf4:	b03ff216 	blt	r22,zero,bac0 <__alt_data_end+0xfc00bac0>
    baf8:	9cc03fcc 	andi	r19,r19,255
    bafc:	90002426 	beq	r18,zero,bb90 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    bb00:	9809883a 	mov	r4,r19
    bb04:	000b4480 	call	b448 <_ZL21size_of_encoded_valueh>
    bb08:	100b883a 	mov	r5,r2
    bb0c:	913fffc4 	addi	r4,r18,-1
    bb10:	000cca00 	call	cca0 <__mulsi3>
    bb14:	d9400d17 	ldw	r5,52(sp)
    bb18:	d80f883a 	mov	r7,sp
    bb1c:	9809883a 	mov	r4,r19
    bb20:	140d883a 	add	r6,r2,r16
    bb24:	000b4ec0 	call	b4ec <_ZL28read_encoded_value_with_basehjPKhPj>
    bb28:	d9000017 	ldw	r4,0(sp)
    bb2c:	d9800204 	addi	r6,sp,8
    bb30:	a00b883a 	mov	r5,r20
    bb34:	000b90c0 	call	b90c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bb38:	10c03fcc 	andi	r3,r2,255
    bb3c:	1800151e 	bne	r3,zero,bb94 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    bb40:	a809883a 	mov	r4,r21
    bb44:	017ffe44 	movi	r5,-7
    bb48:	000cca00 	call	cca0 <__mulsi3>
    bb4c:	102d883a 	mov	r22,r2
    bb50:	a809883a 	mov	r4,r21
    bb54:	0025883a 	mov	r18,zero
    bb58:	24400003 	ldbu	r17,0(r4)
    bb5c:	014001c4 	movi	r5,7
    bb60:	000cca00 	call	cca0 <__mulsi3>
    bb64:	88c01fcc 	andi	r3,r17,127
    bb68:	1585883a 	add	r2,r2,r22
    bb6c:	1886983a 	sll	r3,r3,r2
    bb70:	8c403fcc 	andi	r17,r17,255
    bb74:	8c40201c 	xori	r17,r17,128
    bb78:	ad400044 	addi	r21,r21,1
    bb7c:	8c7fe004 	addi	r17,r17,-128
    bb80:	90e4b03a 	or	r18,r18,r3
    bb84:	a809883a 	mov	r4,r21
    bb88:	883ff316 	blt	r17,zero,bb58 <__alt_data_end+0xfc00bb58>
    bb8c:	003fdb06 	br	bafc <__alt_data_end+0xfc00bafc>
    bb90:	0005883a 	mov	r2,zero
    bb94:	dfc00c17 	ldw	ra,48(sp)
    bb98:	ddc00b17 	ldw	r23,44(sp)
    bb9c:	dd800a17 	ldw	r22,40(sp)
    bba0:	dd400917 	ldw	r21,36(sp)
    bba4:	dd000817 	ldw	r20,32(sp)
    bba8:	dcc00717 	ldw	r19,28(sp)
    bbac:	dc800617 	ldw	r18,24(sp)
    bbb0:	dc400517 	ldw	r17,20(sp)
    bbb4:	dc000417 	ldw	r16,16(sp)
    bbb8:	dec00d04 	addi	sp,sp,52
    bbbc:	f800283a 	ret

0000bbc0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    bbc0:	defffb04 	addi	sp,sp,-20
    bbc4:	dc000115 	stw	r16,4(sp)
    bbc8:	24000317 	ldw	r16,12(r4)
    bbcc:	01ce303a 	nor	r7,zero,r7
    bbd0:	dc800315 	stw	r18,12(sp)
    bbd4:	dc400215 	stw	r17,8(sp)
    bbd8:	dfc00415 	stw	ra,16(sp)
    bbdc:	2023883a 	mov	r17,r4
    bbe0:	2825883a 	mov	r18,r5
    bbe4:	d9800015 	stw	r6,0(sp)
    bbe8:	81e1883a 	add	r16,r16,r7
    bbec:	800d883a 	mov	r6,r16
    bbf0:	000b883a 	mov	r5,zero
    bbf4:	0009883a 	mov	r4,zero
    bbf8:	30800003 	ldbu	r2,0(r6)
    bbfc:	84000044 	addi	r16,r16,1
    bc00:	800d883a 	mov	r6,r16
    bc04:	10c01fcc 	andi	r3,r2,127
    bc08:	1906983a 	sll	r3,r3,r4
    bc0c:	10803fcc 	andi	r2,r2,255
    bc10:	1080201c 	xori	r2,r2,128
    bc14:	10bfe004 	addi	r2,r2,-128
    bc18:	28cab03a 	or	r5,r5,r3
    bc1c:	210001c4 	addi	r4,r4,7
    bc20:	103ff516 	blt	r2,zero,bbf8 <__alt_data_end+0xfc00bbf8>
    bc24:	28000e26 	beq	r5,zero,bc60 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    bc28:	8809883a 	mov	r4,r17
    bc2c:	000b6f80 	call	b6f8 <_ZL15get_ttype_entryP16lsda_header_infom>
    bc30:	d80d883a 	mov	r6,sp
    bc34:	900b883a 	mov	r5,r18
    bc38:	1009883a 	mov	r4,r2
    bc3c:	000b90c0 	call	b90c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bc40:	10c03fcc 	andi	r3,r2,255
    bc44:	183fe926 	beq	r3,zero,bbec <__alt_data_end+0xfc00bbec>
    bc48:	dfc00417 	ldw	ra,16(sp)
    bc4c:	dc800317 	ldw	r18,12(sp)
    bc50:	dc400217 	ldw	r17,8(sp)
    bc54:	dc000117 	ldw	r16,4(sp)
    bc58:	dec00504 	addi	sp,sp,20
    bc5c:	f800283a 	ret
    bc60:	0005883a 	mov	r2,zero
    bc64:	003ff806 	br	bc48 <__alt_data_end+0xfc00bc48>

0000bc68 <__gxx_personality_sj0>:
    bc68:	00800074 	movhi	r2,1
    bc6c:	deffdd04 	addi	sp,sp,-140
    bc70:	10af1a04 	addi	r2,r2,-17304
    bc74:	d8800e15 	stw	r2,56(sp)
    bc78:	008000b4 	movhi	r2,2
    bc7c:	108a5b04 	addi	r2,r2,10604
    bc80:	d8800f15 	stw	r2,60(sp)
    bc84:	00800074 	movhi	r2,1
    bc88:	10b09004 	addi	r2,r2,-15808
    bc8c:	d9001515 	stw	r4,84(sp)
    bc90:	d9000804 	addi	r4,sp,32
    bc94:	d8801115 	stw	r2,68(sp)
    bc98:	dfc02215 	stw	ra,136(sp)
    bc9c:	df002115 	stw	fp,132(sp)
    bca0:	dec01015 	stw	sp,64(sp)
    bca4:	dec01215 	stw	sp,72(sp)
    bca8:	d9401915 	stw	r5,100(sp)
    bcac:	d9801615 	stw	r6,88(sp)
    bcb0:	d9c01715 	stw	r7,92(sp)
    bcb4:	000ced00 	call	ced0 <_Unwind_SjLj_Register>
    bcb8:	d8c01517 	ldw	r3,84(sp)
    bcbc:	d8000715 	stw	zero,28(sp)
    bcc0:	d8000615 	stw	zero,24(sp)
    bcc4:	00800044 	movi	r2,1
    bcc8:	18800926 	beq	r3,r2,bcf0 <__gxx_personality_sj0+0x88>
    bccc:	01c000c4 	movi	r7,3
    bcd0:	d9c01515 	stw	r7,84(sp)
    bcd4:	d9000804 	addi	r4,sp,32
    bcd8:	000cee80 	call	cee8 <_Unwind_SjLj_Unregister>
    bcdc:	d8801517 	ldw	r2,84(sp)
    bce0:	dfc02217 	ldw	ra,136(sp)
    bce4:	df002117 	ldw	fp,132(sp)
    bce8:	dec02304 	addi	sp,sp,140
    bcec:	f800283a 	ret
    bcf0:	d9001617 	ldw	r4,88(sp)
    bcf4:	00af3574 	movhi	r2,48341
    bcf8:	d9c01717 	ldw	r7,92(sp)
    bcfc:	10b54004 	addi	r2,r2,-11008
    bd00:	00ee2cb4 	movhi	r3,47282
    bd04:	2085883a 	add	r2,r4,r2
    bd08:	18eaaf04 	addi	r3,r3,-21828
    bd0c:	d8801b15 	stw	r2,108(sp)
    bd10:	38c7883a 	add	r3,r7,r3
    bd14:	1105803a 	cmpltu	r2,r2,r4
    bd18:	10c7883a 	add	r3,r2,r3
    bd1c:	d8c01c15 	stw	r3,112(sp)
    bd20:	d8c01917 	ldw	r3,100(sp)
    bd24:	00800184 	movi	r2,6
    bd28:	18805426 	beq	r3,r2,be7c <__gxx_personality_sj0+0x214>
    bd2c:	d9002417 	ldw	r4,144(sp)
    bd30:	00bfffc4 	movi	r2,-1
    bd34:	d8800915 	stw	r2,36(sp)
    bd38:	000cf8c0 	call	cf8c <_Unwind_GetLanguageSpecificData>
    bd3c:	d8801a15 	stw	r2,104(sp)
    bd40:	1000c926 	beq	r2,zero,c068 <__gxx_personality_sj0+0x400>
    bd44:	d9002417 	ldw	r4,144(sp)
    bd48:	d80d883a 	mov	r6,sp
    bd4c:	100b883a 	mov	r5,r2
    bd50:	000b7d80 	call	b7d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    bd54:	d9402417 	ldw	r5,144(sp)
    bd58:	d9000503 	ldbu	r4,20(sp)
    bd5c:	d8801515 	stw	r2,84(sp)
    bd60:	000b74c0 	call	b74c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bd64:	d9002417 	ldw	r4,144(sp)
    bd68:	d9400604 	addi	r5,sp,24
    bd6c:	d8800215 	stw	r2,8(sp)
    bd70:	000cf5c0 	call	cf5c <_Unwind_GetIPInfo>
    bd74:	d8c00617 	ldw	r3,24(sp)
    bd78:	18006126 	beq	r3,zero,bf00 <__gxx_personality_sj0+0x298>
    bd7c:	1000ba16 	blt	r2,zero,c068 <__gxx_personality_sj0+0x400>
    bd80:	10002f1e 	bne	r2,zero,be40 <__gxx_personality_sj0+0x1d8>
    bd84:	d8001515 	stw	zero,84(sp)
    bd88:	d8001f15 	stw	zero,124(sp)
    bd8c:	d8001815 	stw	zero,96(sp)
    bd90:	00c00044 	movi	r3,1
    bd94:	d9001917 	ldw	r4,100(sp)
    bd98:	2080004c 	andi	r2,r4,1
    bd9c:	1000b51e 	bne	r2,zero,c074 <__gxx_personality_sj0+0x40c>
    bda0:	d9001917 	ldw	r4,100(sp)
    bda4:	2080020c 	andi	r2,r4,8
    bda8:	1000b71e 	bne	r2,zero,c088 <__gxx_personality_sj0+0x420>
    bdac:	d9c01c17 	ldw	r7,112(sp)
    bdb0:	3800b826 	beq	r7,zero,c094 <__gxx_personality_sj0+0x42c>
    bdb4:	00800044 	movi	r2,1
    bdb8:	1880b526 	beq	r3,r2,c090 <__gxx_personality_sj0+0x428>
    bdbc:	d9c01517 	ldw	r7,84(sp)
    bdc0:	3800f516 	blt	r7,zero,c198 <__gxx_personality_sj0+0x530>
    bdc4:	d9002417 	ldw	r4,144(sp)
    bdc8:	d9802317 	ldw	r6,140(sp)
    bdcc:	00bfffc4 	movi	r2,-1
    bdd0:	000b883a 	mov	r5,zero
    bdd4:	d8800915 	stw	r2,36(sp)
    bdd8:	000cf300 	call	cf30 <_Unwind_SetGR>
    bddc:	d9801517 	ldw	r6,84(sp)
    bde0:	d9002417 	ldw	r4,144(sp)
    bde4:	01400044 	movi	r5,1
    bde8:	000cf300 	call	cf30 <_Unwind_SetGR>
    bdec:	d9002417 	ldw	r4,144(sp)
    bdf0:	d9401f17 	ldw	r5,124(sp)
    bdf4:	000cf7c0 	call	cf7c <_Unwind_SetIP>
    bdf8:	010001c4 	movi	r4,7
    bdfc:	d9001515 	stw	r4,84(sp)
    be00:	003fb406 	br	bcd4 <__alt_data_end+0xfc00bcd4>
    be04:	000f883a 	mov	r7,zero
    be08:	000d883a 	mov	r6,zero
    be0c:	19000003 	ldbu	r4,0(r3)
    be10:	18c00044 	addi	r3,r3,1
    be14:	d8c01515 	stw	r3,84(sp)
    be18:	21401fcc 	andi	r5,r4,127
    be1c:	298a983a 	sll	r5,r5,r6
    be20:	21003fcc 	andi	r4,r4,255
    be24:	2100201c 	xori	r4,r4,128
    be28:	213fe004 	addi	r4,r4,-128
    be2c:	394eb03a 	or	r7,r7,r5
    be30:	318001c4 	addi	r6,r6,7
    be34:	203ff516 	blt	r4,zero,be0c <__alt_data_end+0xfc00be0c>
    be38:	10bfffc4 	addi	r2,r2,-1
    be3c:	10003226 	beq	r2,zero,bf08 <__gxx_personality_sj0+0x2a0>
    be40:	d9c01517 	ldw	r7,84(sp)
    be44:	0011883a 	mov	r8,zero
    be48:	000d883a 	mov	r6,zero
    be4c:	39000003 	ldbu	r4,0(r7)
    be50:	38c00044 	addi	r3,r7,1
    be54:	180f883a 	mov	r7,r3
    be58:	21401fcc 	andi	r5,r4,127
    be5c:	298a983a 	sll	r5,r5,r6
    be60:	21003fcc 	andi	r4,r4,255
    be64:	2100201c 	xori	r4,r4,128
    be68:	213fe004 	addi	r4,r4,-128
    be6c:	4150b03a 	or	r8,r8,r5
    be70:	318001c4 	addi	r6,r6,7
    be74:	203ff516 	blt	r4,zero,be4c <__alt_data_end+0xfc00be4c>
    be78:	003fe206 	br	be04 <__alt_data_end+0xfc00be04>
    be7c:	d9001c17 	ldw	r4,112(sp)
    be80:	203faa1e 	bne	r4,zero,bd2c <__alt_data_end+0xfc00bd2c>
    be84:	d9c01517 	ldw	r7,84(sp)
    be88:	d8801b17 	ldw	r2,108(sp)
    be8c:	38bfa736 	bltu	r7,r2,bd2c <__alt_data_end+0xfc00bd2c>
    be90:	d8c02317 	ldw	r3,140(sp)
    be94:	18fffe17 	ldw	r3,-8(r3)
    be98:	d8c01f15 	stw	r3,124(sp)
    be9c:	18008226 	beq	r3,zero,c0a8 <__gxx_personality_sj0+0x440>
    bea0:	d9002317 	ldw	r4,140(sp)
    bea4:	d9c02317 	ldw	r7,140(sp)
    bea8:	213ffb17 	ldw	r4,-20(r4)
    beac:	39fffd17 	ldw	r7,-12(r7)
    beb0:	d9001515 	stw	r4,84(sp)
    beb4:	d9c01a15 	stw	r7,104(sp)
    beb8:	d8801517 	ldw	r2,84(sp)
    bebc:	103fc10e 	bge	r2,zero,bdc4 <__alt_data_end+0xfc00bdc4>
    bec0:	d9002417 	ldw	r4,144(sp)
    bec4:	d9401a17 	ldw	r5,104(sp)
    bec8:	d80d883a 	mov	r6,sp
    becc:	00bfffc4 	movi	r2,-1
    bed0:	d8800915 	stw	r2,36(sp)
    bed4:	000b7d80 	call	b7d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    bed8:	d9402417 	ldw	r5,144(sp)
    bedc:	d9000503 	ldbu	r4,20(sp)
    bee0:	000b74c0 	call	b74c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bee4:	d9000503 	ldbu	r4,20(sp)
    bee8:	d9402417 	ldw	r5,144(sp)
    beec:	d8800215 	stw	r2,8(sp)
    bef0:	000b74c0 	call	b74c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bef4:	d8c02317 	ldw	r3,140(sp)
    bef8:	18bffe15 	stw	r2,-8(r3)
    befc:	003fb106 	br	bdc4 <__alt_data_end+0xfc00bdc4>
    bf00:	10bfffc4 	addi	r2,r2,-1
    bf04:	003f9d06 	br	bd7c <__alt_data_end+0xfc00bd7c>
    bf08:	42000044 	addi	r8,r8,1
    bf0c:	da001f15 	stw	r8,124(sp)
    bf10:	38005326 	beq	r7,zero,c060 <__gxx_personality_sj0+0x3f8>
    bf14:	d8800417 	ldw	r2,16(sp)
    bf18:	39ffffc4 	addi	r7,r7,-1
    bf1c:	11c5883a 	add	r2,r2,r7
    bf20:	d8801815 	stw	r2,96(sp)
    bf24:	40005026 	beq	r8,zero,c068 <__gxx_personality_sj0+0x400>
    bf28:	10007426 	beq	r2,zero,c0fc <__gxx_personality_sj0+0x494>
    bf2c:	d8801917 	ldw	r2,100(sp)
    bf30:	1080020c 	andi	r2,r2,8
    bf34:	d8802015 	stw	r2,128(sp)
    bf38:	1000a21e 	bne	r2,zero,c1c4 <__gxx_personality_sj0+0x55c>
    bf3c:	d8c01c17 	ldw	r3,112(sp)
    bf40:	1800b026 	beq	r3,zero,c204 <__gxx_personality_sj0+0x59c>
    bf44:	01c000f4 	movhi	r7,3
    bf48:	39f29204 	addi	r7,r7,-13752
    bf4c:	d9c01e15 	stw	r7,120(sp)
    bf50:	d8001d05 	stb	zero,116(sp)
    bf54:	d8c01817 	ldw	r3,96(sp)
    bf58:	d8001515 	stw	zero,84(sp)
    bf5c:	0009883a 	mov	r4,zero
    bf60:	19400003 	ldbu	r5,0(r3)
    bf64:	18800044 	addi	r2,r3,1
    bf68:	d9c01517 	ldw	r7,84(sp)
    bf6c:	28c01fcc 	andi	r3,r5,127
    bf70:	1906983a 	sll	r3,r3,r4
    bf74:	29803fcc 	andi	r6,r5,255
    bf78:	3180201c 	xori	r6,r6,128
    bf7c:	38ceb03a 	or	r7,r7,r3
    bf80:	d8801715 	stw	r2,92(sp)
    bf84:	31bfe004 	addi	r6,r6,-128
    bf88:	d9c01515 	stw	r7,84(sp)
    bf8c:	210001c4 	addi	r4,r4,7
    bf90:	1007883a 	mov	r3,r2
    bf94:	303ff216 	blt	r6,zero,bf60 <__alt_data_end+0xfc00bf60>
    bf98:	00c007c4 	movi	r3,31
    bf9c:	19000836 	bltu	r3,r4,bfc0 <__gxx_personality_sj0+0x358>
    bfa0:	2940100c 	andi	r5,r5,64
    bfa4:	28000626 	beq	r5,zero,bfc0 <__gxx_personality_sj0+0x358>
    bfa8:	01c00044 	movi	r7,1
    bfac:	3908983a 	sll	r4,r7,r4
    bfb0:	d8c01517 	ldw	r3,84(sp)
    bfb4:	0109c83a 	sub	r4,zero,r4
    bfb8:	1906b03a 	or	r3,r3,r4
    bfbc:	d8c01515 	stw	r3,84(sp)
    bfc0:	d8001615 	stw	zero,88(sp)
    bfc4:	0009883a 	mov	r4,zero
    bfc8:	11400003 	ldbu	r5,0(r2)
    bfcc:	d9c01617 	ldw	r7,88(sp)
    bfd0:	10800044 	addi	r2,r2,1
    bfd4:	28c01fcc 	andi	r3,r5,127
    bfd8:	1906983a 	sll	r3,r3,r4
    bfdc:	29803fcc 	andi	r6,r5,255
    bfe0:	3180201c 	xori	r6,r6,128
    bfe4:	38ceb03a 	or	r7,r7,r3
    bfe8:	31bfe004 	addi	r6,r6,-128
    bfec:	d9c01615 	stw	r7,88(sp)
    bff0:	210001c4 	addi	r4,r4,7
    bff4:	303ff416 	blt	r6,zero,bfc8 <__alt_data_end+0xfc00bfc8>
    bff8:	008007c4 	movi	r2,31
    bffc:	11000736 	bltu	r2,r4,c01c <__gxx_personality_sj0+0x3b4>
    c000:	2940100c 	andi	r5,r5,64
    c004:	28000526 	beq	r5,zero,c01c <__gxx_personality_sj0+0x3b4>
    c008:	00c00044 	movi	r3,1
    c00c:	1908983a 	sll	r4,r3,r4
    c010:	0109c83a 	sub	r4,zero,r4
    c014:	390eb03a 	or	r7,r7,r4
    c018:	d9c01615 	stw	r7,88(sp)
    c01c:	d9001517 	ldw	r4,84(sp)
    c020:	20003c26 	beq	r4,zero,c114 <__gxx_personality_sj0+0x4ac>
    c024:	01003e0e 	bge	zero,r4,c120 <__gxx_personality_sj0+0x4b8>
    c028:	01ffffc4 	movi	r7,-1
    c02c:	200b883a 	mov	r5,r4
    c030:	d809883a 	mov	r4,sp
    c034:	d9c00915 	stw	r7,36(sp)
    c038:	000b6f80 	call	b6f8 <_ZL15get_ttype_entryP16lsda_header_infom>
    c03c:	10005f26 	beq	r2,zero,c1bc <__gxx_personality_sj0+0x554>
    c040:	d8c01e17 	ldw	r3,120(sp)
    c044:	1800571e 	bne	r3,zero,c1a4 <__gxx_personality_sj0+0x53c>
    c048:	d9001617 	ldw	r4,88(sp)
    c04c:	20002926 	beq	r4,zero,c0f4 <__gxx_personality_sj0+0x48c>
    c050:	d9c01717 	ldw	r7,92(sp)
    c054:	390f883a 	add	r7,r7,r4
    c058:	d9c01815 	stw	r7,96(sp)
    c05c:	003fbd06 	br	bf54 <__alt_data_end+0xfc00bf54>
    c060:	d8c01f17 	ldw	r3,124(sp)
    c064:	1800251e 	bne	r3,zero,c0fc <__gxx_personality_sj0+0x494>
    c068:	01000204 	movi	r4,8
    c06c:	d9001515 	stw	r4,84(sp)
    c070:	003f1806 	br	bcd4 <__alt_data_end+0xfc00bcd4>
    c074:	d8801c17 	ldw	r2,112(sp)
    c078:	10000d26 	beq	r2,zero,c0b0 <__gxx_personality_sj0+0x448>
    c07c:	00800184 	movi	r2,6
    c080:	d8801515 	stw	r2,84(sp)
    c084:	003f1306 	br	bcd4 <__alt_data_end+0xfc00bcd4>
    c088:	00800044 	movi	r2,1
    c08c:	18bf4d1e 	bne	r3,r2,bdc4 <__alt_data_end+0xfc00bdc4>
    c090:	000b3c00 	call	b3c0 <_ZSt9terminatev>
    c094:	d9001b17 	ldw	r4,108(sp)
    c098:	00800044 	movi	r2,1
    c09c:	113f4536 	bltu	r2,r4,bdb4 <__alt_data_end+0xfc00bdb4>
    c0a0:	00800044 	movi	r2,1
    c0a4:	18bf841e 	bne	r3,r2,beb8 <__alt_data_end+0xfc00beb8>
    c0a8:	d9002317 	ldw	r4,140(sp)
    c0ac:	000ca440 	call	ca44 <__cxa_call_terminate>
    c0b0:	d8c01b17 	ldw	r3,108(sp)
    c0b4:	00800044 	movi	r2,1
    c0b8:	10fff036 	bltu	r2,r3,c07c <__alt_data_end+0xfc00c07c>
    c0bc:	d9002317 	ldw	r4,140(sp)
    c0c0:	d8801817 	ldw	r2,96(sp)
    c0c4:	d9c01517 	ldw	r7,84(sp)
    c0c8:	d8c01a17 	ldw	r3,104(sp)
    c0cc:	20bffc15 	stw	r2,-16(r4)
    c0d0:	d8800717 	ldw	r2,28(sp)
    c0d4:	21fffb15 	stw	r7,-20(r4)
    c0d8:	d9c01f17 	ldw	r7,124(sp)
    c0dc:	20bfff15 	stw	r2,-4(r4)
    c0e0:	00800184 	movi	r2,6
    c0e4:	20fffd15 	stw	r3,-12(r4)
    c0e8:	21fffe15 	stw	r7,-8(r4)
    c0ec:	d8801515 	stw	r2,84(sp)
    c0f0:	003ef806 	br	bcd4 <__alt_data_end+0xfc00bcd4>
    c0f4:	d8801d03 	ldbu	r2,116(sp)
    c0f8:	103fdb26 	beq	r2,zero,c068 <__alt_data_end+0xfc00c068>
    c0fc:	d8c01917 	ldw	r3,100(sp)
    c100:	1880004c 	andi	r2,r3,1
    c104:	103fd81e 	bne	r2,zero,c068 <__alt_data_end+0xfc00c068>
    c108:	d8001515 	stw	zero,84(sp)
    c10c:	00c00084 	movi	r3,2
    c110:	003f2306 	br	bda0 <__alt_data_end+0xfc00bda0>
    c114:	00c00044 	movi	r3,1
    c118:	d8c01d05 	stb	r3,116(sp)
    c11c:	003fca06 	br	c048 <__alt_data_end+0xfc00c048>
    c120:	d9001e17 	ldw	r4,120(sp)
    c124:	20000426 	beq	r4,zero,c138 <__gxx_personality_sj0+0x4d0>
    c128:	d9c02017 	ldw	r7,128(sp)
    c12c:	3800021e 	bne	r7,zero,c138 <__gxx_personality_sj0+0x4d0>
    c130:	d8801c17 	ldw	r2,112(sp)
    c134:	10002726 	beq	r2,zero,c1d4 <__gxx_personality_sj0+0x56c>
    c138:	d8801517 	ldw	r2,84(sp)
    c13c:	000d883a 	mov	r6,zero
    c140:	000b883a 	mov	r5,zero
    c144:	0088303a 	nor	r4,zero,r2
    c148:	d8800317 	ldw	r2,12(sp)
    c14c:	1109883a 	add	r4,r2,r4
    c150:	20800003 	ldbu	r2,0(r4)
    c154:	21000044 	addi	r4,r4,1
    c158:	10c01fcc 	andi	r3,r2,127
    c15c:	1946983a 	sll	r3,r3,r5
    c160:	10803fcc 	andi	r2,r2,255
    c164:	1080201c 	xori	r2,r2,128
    c168:	10bfe004 	addi	r2,r2,-128
    c16c:	30ccb03a 	or	r6,r6,r3
    c170:	294001c4 	addi	r5,r5,7
    c174:	103ff616 	blt	r2,zero,c150 <__alt_data_end+0xfc00c150>
    c178:	3005003a 	cmpeq	r2,r6,zero
    c17c:	10803fcc 	andi	r2,r2,255
    c180:	103fb126 	beq	r2,zero,c048 <__alt_data_end+0xfc00c048>
    c184:	d9c01917 	ldw	r7,100(sp)
    c188:	3880004c 	andi	r2,r7,1
    c18c:	103fb91e 	bne	r2,zero,c074 <__alt_data_end+0xfc00c074>
    c190:	d8802017 	ldw	r2,128(sp)
    c194:	10002d26 	beq	r2,zero,c24c <__gxx_personality_sj0+0x5e4>
    c198:	00800044 	movi	r2,1
    c19c:	d8800915 	stw	r2,36(sp)
    c1a0:	000b3e80 	call	b3e8 <_ZSt10unexpectedv>
    c1a4:	d9800704 	addi	r6,sp,28
    c1a8:	180b883a 	mov	r5,r3
    c1ac:	1009883a 	mov	r4,r2
    c1b0:	000b90c0 	call	b90c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c1b4:	10803fcc 	andi	r2,r2,255
    c1b8:	103fa326 	beq	r2,zero,c048 <__alt_data_end+0xfc00c048>
    c1bc:	00c000c4 	movi	r3,3
    c1c0:	003ef406 	br	bd94 <__alt_data_end+0xfc00bd94>
    c1c4:	010000f4 	movhi	r4,3
    c1c8:	21329004 	addi	r4,r4,-13760
    c1cc:	d9001e15 	stw	r4,120(sp)
    c1d0:	003f5f06 	br	bf50 <__alt_data_end+0xfc00bf50>
    c1d4:	d9001b17 	ldw	r4,108(sp)
    c1d8:	00c00044 	movi	r3,1
    c1dc:	193fd636 	bltu	r3,r4,c138 <__alt_data_end+0xfc00c138>
    c1e0:	01ffffc4 	movi	r7,-1
    c1e4:	d9c00915 	stw	r7,36(sp)
    c1e8:	d9800717 	ldw	r6,28(sp)
    c1ec:	d9c01517 	ldw	r7,84(sp)
    c1f0:	d9401e17 	ldw	r5,120(sp)
    c1f4:	d809883a 	mov	r4,sp
    c1f8:	000bbc00 	call	bbc0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c1fc:	1080005c 	xori	r2,r2,1
    c200:	003fde06 	br	c17c <__alt_data_end+0xfc00c17c>
    c204:	d9001b17 	ldw	r4,108(sp)
    c208:	00800044 	movi	r2,1
    c20c:	113f4d36 	bltu	r2,r4,bf44 <__alt_data_end+0xfc00bf44>
    c210:	d9c02317 	ldw	r7,140(sp)
    c214:	38800017 	ldw	r2,0(r7)
    c218:	1080004c 	andi	r2,r2,1
    c21c:	1000061e 	bne	r2,zero,c238 <__gxx_personality_sj0+0x5d0>
    c220:	d8c02317 	ldw	r3,140(sp)
    c224:	18800504 	addi	r2,r3,20
    c228:	d8800715 	stw	r2,28(sp)
    c22c:	10bff017 	ldw	r2,-64(r2)
    c230:	d8801e15 	stw	r2,120(sp)
    c234:	003f4606 	br	bf50 <__alt_data_end+0xfc00bf50>
    c238:	38bff517 	ldw	r2,-44(r7)
    c23c:	003ffa06 	br	c228 <__alt_data_end+0xfc00c228>
    c240:	d9000a17 	ldw	r4,40(sp)
    c244:	000c5f80 	call	c5f8 <__cxa_begin_catch>
    c248:	003f9106 	br	c090 <__alt_data_end+0xfc00c090>
    c24c:	d9c01c17 	ldw	r7,112(sp)
    c250:	383eda1e 	bne	r7,zero,bdbc <__alt_data_end+0xfc00bdbc>
    c254:	d8c01b17 	ldw	r3,108(sp)
    c258:	00800044 	movi	r2,1
    c25c:	10fed736 	bltu	r2,r3,bdbc <__alt_data_end+0xfc00bdbc>
    c260:	00c000c4 	movi	r3,3
    c264:	003f8e06 	br	c0a0 <__alt_data_end+0xfc00c0a0>

0000c268 <__cxa_call_unexpected>:
    c268:	00800074 	movhi	r2,1
    c26c:	deffe604 	addi	sp,sp,-104
    c270:	10af1a04 	addi	r2,r2,-17304
    c274:	d8800d15 	stw	r2,52(sp)
    c278:	008000b4 	movhi	r2,2
    c27c:	108a5f04 	addi	r2,r2,10620
    c280:	d8800e15 	stw	r2,56(sp)
    c284:	d8800104 	addi	r2,sp,4
    c288:	d8800f15 	stw	r2,60(sp)
    c28c:	00800074 	movhi	r2,1
    c290:	10b0bd04 	addi	r2,r2,-15628
    c294:	d9001415 	stw	r4,80(sp)
    c298:	d9000704 	addi	r4,sp,28
    c29c:	dfc01915 	stw	ra,100(sp)
    c2a0:	d8801015 	stw	r2,64(sp)
    c2a4:	df001815 	stw	fp,96(sp)
    c2a8:	dec01115 	stw	sp,68(sp)
    c2ac:	000ced00 	call	ced0 <_Unwind_SjLj_Register>
    c2b0:	d9001417 	ldw	r4,80(sp)
    c2b4:	000c5f80 	call	c5f8 <__cxa_begin_catch>
    c2b8:	d8c01417 	ldw	r3,80(sp)
    c2bc:	18bffe17 	ldw	r2,-8(r3)
    c2c0:	193ff717 	ldw	r4,-36(r3)
    c2c4:	18fffd17 	ldw	r3,-12(r3)
    c2c8:	d8800315 	stw	r2,12(sp)
    c2cc:	d8c01615 	stw	r3,88(sp)
    c2d0:	d8c01417 	ldw	r3,80(sp)
    c2d4:	18fffb17 	ldw	r3,-20(r3)
    c2d8:	d8c01515 	stw	r3,84(sp)
    c2dc:	d8c01417 	ldw	r3,80(sp)
    c2e0:	18fff817 	ldw	r3,-32(r3)
    c2e4:	d8c01415 	stw	r3,80(sp)
    c2e8:	00c00044 	movi	r3,1
    c2ec:	d8c00815 	stw	r3,32(sp)
    c2f0:	000b3d80 	call	b3d8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    c2f4:	d8c00917 	ldw	r3,36(sp)
    c2f8:	d8800817 	ldw	r2,32(sp)
    c2fc:	d8c01715 	stw	r3,92(sp)
    c300:	10000a26 	beq	r2,zero,c32c <__cxa_call_unexpected+0xc4>
    c304:	10bfffc4 	addi	r2,r2,-1
    c308:	10000126 	beq	r2,zero,c310 <__cxa_call_unexpected+0xa8>
    c30c:	003b68fa 	trap	3
    c310:	d8000815 	stw	zero,32(sp)
    c314:	000c6ac0 	call	c6ac <__cxa_end_catch>
    c318:	000c6ac0 	call	c6ac <__cxa_end_catch>
    c31c:	d9001717 	ldw	r4,92(sp)
    c320:	00bfffc4 	movi	r2,-1
    c324:	d8800815 	stw	r2,32(sp)
    c328:	000d0cc0 	call	d0cc <_Unwind_SjLj_Resume>
    c32c:	d9001717 	ldw	r4,92(sp)
    c330:	000c5f80 	call	c5f8 <__cxa_begin_catch>
    c334:	000ca9c0 	call	ca9c <__cxa_get_globals_fast>
    c338:	10800017 	ldw	r2,0(r2)
    c33c:	10c00b17 	ldw	r3,44(r2)
    c340:	18c0004c 	andi	r3,r3,1
    c344:	18001e26 	beq	r3,zero,c3c0 <__cxa_call_unexpected+0x158>
    c348:	10800017 	ldw	r2,0(r2)
    c34c:	d8801715 	stw	r2,92(sp)
    c350:	d8801517 	ldw	r2,84(sp)
    c354:	00802b0e 	bge	zero,r2,c404 <__cxa_call_unexpected+0x19c>
    c358:	d8c01717 	ldw	r3,92(sp)
    c35c:	d8800317 	ldw	r2,12(sp)
    c360:	d9c01517 	ldw	r7,84(sp)
    c364:	193ff017 	ldw	r4,-64(r3)
    c368:	d9801617 	ldw	r6,88(sp)
    c36c:	d8800015 	stw	r2,0(sp)
    c370:	180b883a 	mov	r5,r3
    c374:	00800084 	movi	r2,2
    c378:	d8800815 	stw	r2,32(sp)
    c37c:	000b9940 	call	b994 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c380:	10803fcc 	andi	r2,r2,255
    c384:	10001e1e 	bne	r2,zero,c400 <__cxa_call_unexpected+0x198>
    c388:	d8800317 	ldw	r2,12(sp)
    c38c:	d9c01517 	ldw	r7,84(sp)
    c390:	d9801617 	ldw	r6,88(sp)
    c394:	010000f4 	movhi	r4,3
    c398:	d8800015 	stw	r2,0(sp)
    c39c:	21252c04 	addi	r4,r4,-27472
    c3a0:	00800084 	movi	r2,2
    c3a4:	000b883a 	mov	r5,zero
    c3a8:	d8800815 	stw	r2,32(sp)
    c3ac:	000b9940 	call	b994 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c3b0:	10803fcc 	andi	r2,r2,255
    c3b4:	1000051e 	bne	r2,zero,c3cc <__cxa_call_unexpected+0x164>
    c3b8:	d9001417 	ldw	r4,80(sp)
    c3bc:	000b3000 	call	b300 <_ZN10__cxxabiv111__terminateEPFvvE>
    c3c0:	10801004 	addi	r2,r2,64
    c3c4:	d8801715 	stw	r2,92(sp)
    c3c8:	003fe106 	br	c350 <__alt_data_end+0xfc00c350>
    c3cc:	01000104 	movi	r4,4
    c3d0:	000c8e00 	call	c8e0 <__cxa_allocate_exception>
    c3d4:	00c000f4 	movhi	r3,3
    c3d8:	18e54704 	addi	r3,r3,-27364
    c3dc:	01800074 	movhi	r6,1
    c3e0:	014000f4 	movhi	r5,3
    c3e4:	10c00015 	stw	r3,0(r2)
    c3e8:	31b2ae04 	addi	r6,r6,-13640
    c3ec:	00c00084 	movi	r3,2
    c3f0:	29652c04 	addi	r5,r5,-27472
    c3f4:	1009883a 	mov	r4,r2
    c3f8:	d8c00815 	stw	r3,32(sp)
    c3fc:	000c4dc0 	call	c4dc <__cxa_throw>
    c400:	000c56c0 	call	c56c <__cxa_rethrow>
    c404:	d9401617 	ldw	r5,88(sp)
    c408:	00800084 	movi	r2,2
    c40c:	d9800104 	addi	r6,sp,4
    c410:	0009883a 	mov	r4,zero
    c414:	d8800815 	stw	r2,32(sp)
    c418:	000b7d80 	call	b7d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c41c:	d9801717 	ldw	r6,92(sp)
    c420:	d9c01517 	ldw	r7,84(sp)
    c424:	d9000104 	addi	r4,sp,4
    c428:	317ff017 	ldw	r5,-64(r6)
    c42c:	000bbc00 	call	bbc0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c430:	10803fcc 	andi	r2,r2,255
    c434:	1000171e 	bne	r2,zero,c494 <__cxa_call_unexpected+0x22c>
    c438:	d9c01517 	ldw	r7,84(sp)
    c43c:	014000f4 	movhi	r5,3
    c440:	00800084 	movi	r2,2
    c444:	29652c04 	addi	r5,r5,-27472
    c448:	000d883a 	mov	r6,zero
    c44c:	d9000104 	addi	r4,sp,4
    c450:	d8800815 	stw	r2,32(sp)
    c454:	000bbc00 	call	bbc0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c458:	10803fcc 	andi	r2,r2,255
    c45c:	103fd626 	beq	r2,zero,c3b8 <__alt_data_end+0xfc00c3b8>
    c460:	01000104 	movi	r4,4
    c464:	000c8e00 	call	c8e0 <__cxa_allocate_exception>
    c468:	00c000f4 	movhi	r3,3
    c46c:	18e54704 	addi	r3,r3,-27364
    c470:	01800074 	movhi	r6,1
    c474:	014000f4 	movhi	r5,3
    c478:	10c00015 	stw	r3,0(r2)
    c47c:	31b2ae04 	addi	r6,r6,-13640
    c480:	00c00084 	movi	r3,2
    c484:	29652c04 	addi	r5,r5,-27472
    c488:	1009883a 	mov	r4,r2
    c48c:	d8c00815 	stw	r3,32(sp)
    c490:	000c4dc0 	call	c4dc <__cxa_throw>
    c494:	000c56c0 	call	c56c <__cxa_rethrow>

0000c498 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    c498:	defffe04 	addi	sp,sp,-8
    c49c:	dfc00115 	stw	ra,4(sp)
    c4a0:	dc000015 	stw	r16,0(sp)
    c4a4:	00800044 	movi	r2,1
    c4a8:	11000a36 	bltu	r2,r4,c4d4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    c4ac:	28bff617 	ldw	r2,-40(r5)
    c4b0:	2c000504 	addi	r16,r5,20
    c4b4:	10000226 	beq	r2,zero,c4c0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    c4b8:	8009883a 	mov	r4,r16
    c4bc:	103ee83a 	callr	r2
    c4c0:	8009883a 	mov	r4,r16
    c4c4:	dfc00117 	ldw	ra,4(sp)
    c4c8:	dc000017 	ldw	r16,0(sp)
    c4cc:	dec00204 	addi	sp,sp,8
    c4d0:	000c9401 	jmpi	c940 <__cxa_free_exception>
    c4d4:	293ff817 	ldw	r4,-32(r5)
    c4d8:	000b3000 	call	b300 <_ZN10__cxxabiv111__terminateEPFvvE>

0000c4dc <__cxa_throw>:
    c4dc:	defffb04 	addi	sp,sp,-20
    c4e0:	dfc00415 	stw	ra,16(sp)
    c4e4:	dcc00315 	stw	r19,12(sp)
    c4e8:	dc800215 	stw	r18,8(sp)
    c4ec:	2827883a 	mov	r19,r5
    c4f0:	3025883a 	mov	r18,r6
    c4f4:	dc400115 	stw	r17,4(sp)
    c4f8:	dc000015 	stw	r16,0(sp)
    c4fc:	2021883a 	mov	r16,r4
    c500:	000caa80 	call	caa8 <__cxa_get_globals>
    c504:	10c00117 	ldw	r3,4(r2)
    c508:	847ffb04 	addi	r17,r16,-20
    c50c:	18c00044 	addi	r3,r3,1
    c510:	10c00115 	stw	r3,4(r2)
    c514:	00800044 	movi	r2,1
    c518:	80bfef15 	stw	r2,-68(r16)
    c51c:	84fff015 	stw	r19,-64(r16)
    c520:	84bff115 	stw	r18,-60(r16)
    c524:	000b4380 	call	b438 <_ZSt14get_unexpectedv>
    c528:	80bff215 	stw	r2,-56(r16)
    c52c:	000b4140 	call	b414 <_ZSt13get_terminatev>
    c530:	80bff315 	stw	r2,-52(r16)
    c534:	0090caf4 	movhi	r2,17195
    c538:	108ac004 	addi	r2,r2,11008
    c53c:	80bffb15 	stw	r2,-20(r16)
    c540:	0091d3b4 	movhi	r2,18254
    c544:	109550c4 	addi	r2,r2,21827
    c548:	80bffc15 	stw	r2,-16(r16)
    c54c:	00800074 	movhi	r2,1
    c550:	10b12604 	addi	r2,r2,-15208
    c554:	8809883a 	mov	r4,r17
    c558:	80bffd15 	stw	r2,-12(r16)
    c55c:	000cfb80 	call	cfb8 <_Unwind_SjLj_RaiseException>
    c560:	8809883a 	mov	r4,r17
    c564:	000c5f80 	call	c5f8 <__cxa_begin_catch>
    c568:	000b3c00 	call	b3c0 <_ZSt9terminatev>

0000c56c <__cxa_rethrow>:
    c56c:	defffe04 	addi	sp,sp,-8
    c570:	dfc00115 	stw	ra,4(sp)
    c574:	dc000015 	stw	r16,0(sp)
    c578:	000caa80 	call	caa8 <__cxa_get_globals>
    c57c:	10c00117 	ldw	r3,4(r2)
    c580:	11000017 	ldw	r4,0(r2)
    c584:	18c00044 	addi	r3,r3,1
    c588:	10c00115 	stw	r3,4(r2)
    c58c:	20001126 	beq	r4,zero,c5d4 <__cxa_rethrow+0x68>
    c590:	21400b17 	ldw	r5,44(r4)
    c594:	01ef3574 	movhi	r7,48341
    c598:	39f54004 	addi	r7,r7,-11008
    c59c:	29cf883a 	add	r7,r5,r7
    c5a0:	20c00c17 	ldw	r3,48(r4)
    c5a4:	394d803a 	cmpltu	r6,r7,r5
    c5a8:	016e2cb4 	movhi	r5,47282
    c5ac:	296aaf04 	addi	r5,r5,-21828
    c5b0:	1947883a 	add	r3,r3,r5
    c5b4:	30c7883a 	add	r3,r6,r3
    c5b8:	18000726 	beq	r3,zero,c5d8 <__cxa_rethrow+0x6c>
    c5bc:	10000015 	stw	zero,0(r2)
    c5c0:	24000b04 	addi	r16,r4,44
    c5c4:	8009883a 	mov	r4,r16
    c5c8:	000d1100 	call	d110 <_Unwind_SjLj_Resume_or_Rethrow>
    c5cc:	8009883a 	mov	r4,r16
    c5d0:	000c5f80 	call	c5f8 <__cxa_begin_catch>
    c5d4:	000b3c00 	call	b3c0 <_ZSt9terminatev>
    c5d8:	00c00044 	movi	r3,1
    c5dc:	19fff736 	bltu	r3,r7,c5bc <__alt_data_end+0xfc00c5bc>
    c5e0:	20800517 	ldw	r2,20(r4)
    c5e4:	0085c83a 	sub	r2,zero,r2
    c5e8:	20800515 	stw	r2,20(r4)
    c5ec:	003ff406 	br	c5c0 <__alt_data_end+0xfc00c5c0>

0000c5f0 <__cxa_get_exception_ptr>:
    c5f0:	20bfff17 	ldw	r2,-4(r4)
    c5f4:	f800283a 	ret

0000c5f8 <__cxa_begin_catch>:
    c5f8:	defffe04 	addi	sp,sp,-8
    c5fc:	dc000015 	stw	r16,0(sp)
    c600:	dfc00115 	stw	ra,4(sp)
    c604:	2021883a 	mov	r16,r4
    c608:	000caa80 	call	caa8 <__cxa_get_globals>
    c60c:	81000017 	ldw	r4,0(r16)
    c610:	80c00117 	ldw	r3,4(r16)
    c614:	01af3574 	movhi	r6,48341
    c618:	31b54004 	addi	r6,r6,-11008
    c61c:	016e2cb4 	movhi	r5,47282
    c620:	296aaf04 	addi	r5,r5,-21828
    c624:	218d883a 	add	r6,r4,r6
    c628:	3109803a 	cmpltu	r4,r6,r4
    c62c:	1947883a 	add	r3,r3,r5
    c630:	20c7883a 	add	r3,r4,r3
    c634:	817ff504 	addi	r5,r16,-44
    c638:	11000017 	ldw	r4,0(r2)
    c63c:	18000726 	beq	r3,zero,c65c <__cxa_begin_catch+0x64>
    c640:	2000191e 	bne	r4,zero,c6a8 <__cxa_begin_catch+0xb0>
    c644:	11400015 	stw	r5,0(r2)
    c648:	0005883a 	mov	r2,zero
    c64c:	dfc00117 	ldw	ra,4(sp)
    c650:	dc000017 	ldw	r16,0(sp)
    c654:	dec00204 	addi	sp,sp,8
    c658:	f800283a 	ret
    c65c:	01c00044 	movi	r7,1
    c660:	39bff736 	bltu	r7,r6,c640 <__alt_data_end+0xfc00c640>
    c664:	80fffa17 	ldw	r3,-24(r16)
    c668:	18000d16 	blt	r3,zero,c6a0 <__cxa_begin_catch+0xa8>
    c66c:	18c00044 	addi	r3,r3,1
    c670:	11800117 	ldw	r6,4(r2)
    c674:	80fffa15 	stw	r3,-24(r16)
    c678:	30ffffc4 	addi	r3,r6,-1
    c67c:	10c00115 	stw	r3,4(r2)
    c680:	21400226 	beq	r4,r5,c68c <__cxa_begin_catch+0x94>
    c684:	813ff915 	stw	r4,-28(r16)
    c688:	11400015 	stw	r5,0(r2)
    c68c:	80bfff17 	ldw	r2,-4(r16)
    c690:	dfc00117 	ldw	ra,4(sp)
    c694:	dc000017 	ldw	r16,0(sp)
    c698:	dec00204 	addi	sp,sp,8
    c69c:	f800283a 	ret
    c6a0:	38c7c83a 	sub	r3,r7,r3
    c6a4:	003ff206 	br	c670 <__alt_data_end+0xfc00c670>
    c6a8:	000b3c00 	call	b3c0 <_ZSt9terminatev>

0000c6ac <__cxa_end_catch>:
    c6ac:	deffff04 	addi	sp,sp,-4
    c6b0:	dfc00015 	stw	ra,0(sp)
    c6b4:	000ca9c0 	call	ca9c <__cxa_get_globals_fast>
    c6b8:	11000017 	ldw	r4,0(r2)
    c6bc:	20001426 	beq	r4,zero,c710 <__cxa_end_catch+0x64>
    c6c0:	21400b17 	ldw	r5,44(r4)
    c6c4:	01ef3574 	movhi	r7,48341
    c6c8:	39f54004 	addi	r7,r7,-11008
    c6cc:	29cf883a 	add	r7,r5,r7
    c6d0:	20c00c17 	ldw	r3,48(r4)
    c6d4:	394d803a 	cmpltu	r6,r7,r5
    c6d8:	016e2cb4 	movhi	r5,47282
    c6dc:	296aaf04 	addi	r5,r5,-21828
    c6e0:	1947883a 	add	r3,r3,r5
    c6e4:	30c7883a 	add	r3,r6,r3
    c6e8:	18000c1e 	bne	r3,zero,c71c <__cxa_end_catch+0x70>
    c6ec:	00c00044 	movi	r3,1
    c6f0:	19c00a36 	bltu	r3,r7,c71c <__cxa_end_catch+0x70>
    c6f4:	20c00517 	ldw	r3,20(r4)
    c6f8:	18000d16 	blt	r3,zero,c730 <__cxa_end_catch+0x84>
    c6fc:	18ffffc4 	addi	r3,r3,-1
    c700:	18001026 	beq	r3,zero,c744 <__cxa_end_catch+0x98>
    c704:	00bfffc4 	movi	r2,-1
    c708:	18801426 	beq	r3,r2,c75c <__cxa_end_catch+0xb0>
    c70c:	20c00515 	stw	r3,20(r4)
    c710:	dfc00017 	ldw	ra,0(sp)
    c714:	dec00104 	addi	sp,sp,4
    c718:	f800283a 	ret
    c71c:	21000b04 	addi	r4,r4,44
    c720:	10000015 	stw	zero,0(r2)
    c724:	dfc00017 	ldw	ra,0(sp)
    c728:	dec00104 	addi	sp,sp,4
    c72c:	000d15c1 	jmpi	d15c <_Unwind_DeleteException>
    c730:	18c00044 	addi	r3,r3,1
    c734:	183ff51e 	bne	r3,zero,c70c <__alt_data_end+0xfc00c70c>
    c738:	21400417 	ldw	r5,16(r4)
    c73c:	11400015 	stw	r5,0(r2)
    c740:	003ff206 	br	c70c <__alt_data_end+0xfc00c70c>
    c744:	20c00417 	ldw	r3,16(r4)
    c748:	21000b04 	addi	r4,r4,44
    c74c:	10c00015 	stw	r3,0(r2)
    c750:	dfc00017 	ldw	ra,0(sp)
    c754:	dec00104 	addi	sp,sp,4
    c758:	000d15c1 	jmpi	d15c <_Unwind_DeleteException>
    c75c:	000b3c00 	call	b3c0 <_ZSt9terminatev>

0000c760 <_ZSt18uncaught_exceptionv>:
    c760:	deffff04 	addi	sp,sp,-4
    c764:	dfc00015 	stw	ra,0(sp)
    c768:	000caa80 	call	caa8 <__cxa_get_globals>
    c76c:	10800117 	ldw	r2,4(r2)
    c770:	1004c03a 	cmpne	r2,r2,zero
    c774:	dfc00017 	ldw	ra,0(sp)
    c778:	dec00104 	addi	sp,sp,4
    c77c:	f800283a 	ret

0000c780 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    c780:	018000f4 	movhi	r6,3
    c784:	31bf7a04 	addi	r6,r6,-536
    c788:	31400117 	ldw	r5,4(r6)
    c78c:	223fff04 	addi	r8,r4,-4
    c790:	227fff17 	ldw	r9,-4(r4)
    c794:	28001326 	beq	r5,zero,c7e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    c798:	424f883a 	add	r7,r8,r9
    c79c:	29c01426 	beq	r5,r7,c7f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    c7a0:	28c00117 	ldw	r3,4(r5)
    c7a4:	18001c26 	beq	r3,zero,c818 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    c7a8:	38c00336 	bltu	r7,r3,c7b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    c7ac:	00001e06 	br	c828 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    c7b0:	3880052e 	bgeu	r7,r2,c7c8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    c7b4:	1007883a 	mov	r3,r2
    c7b8:	18800117 	ldw	r2,4(r3)
    c7bc:	29800104 	addi	r6,r5,4
    c7c0:	180b883a 	mov	r5,r3
    c7c4:	103ffa1e 	bne	r2,zero,c7b0 <__alt_data_end+0xfc00c7b0>
    c7c8:	19400017 	ldw	r5,0(r3)
    c7cc:	194f883a 	add	r7,r3,r5
    c7d0:	41c00e26 	beq	r8,r7,c80c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    c7d4:	20800015 	stw	r2,0(r4)
    c7d8:	30800017 	ldw	r2,0(r6)
    c7dc:	12000115 	stw	r8,4(r2)
    c7e0:	f800283a 	ret
    c7e4:	20000015 	stw	zero,0(r4)
    c7e8:	32000115 	stw	r8,4(r6)
    c7ec:	f800283a 	ret
    c7f0:	28c00017 	ldw	r3,0(r5)
    c7f4:	28800117 	ldw	r2,4(r5)
    c7f8:	1a53883a 	add	r9,r3,r9
    c7fc:	227fff15 	stw	r9,-4(r4)
    c800:	20800015 	stw	r2,0(r4)
    c804:	32000115 	stw	r8,4(r6)
    c808:	f800283a 	ret
    c80c:	494b883a 	add	r5,r9,r5
    c810:	19400015 	stw	r5,0(r3)
    c814:	f800283a 	ret
    c818:	0005883a 	mov	r2,zero
    c81c:	2807883a 	mov	r3,r5
    c820:	31800104 	addi	r6,r6,4
    c824:	003fe806 	br	c7c8 <__alt_data_end+0xfc00c7c8>
    c828:	1805883a 	mov	r2,r3
    c82c:	31800104 	addi	r6,r6,4
    c830:	2807883a 	mov	r3,r5
    c834:	003fe406 	br	c7c8 <__alt_data_end+0xfc00c7c8>

0000c838 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    c838:	20800104 	addi	r2,r4,4
    c83c:	00c001c4 	movi	r3,7
    c840:	1880112e 	bgeu	r3,r2,c888 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    c844:	20c9883a 	add	r4,r4,r3
    c848:	00bfff04 	movi	r2,-4
    c84c:	208a703a 	and	r5,r4,r2
    c850:	018000f4 	movhi	r6,3
    c854:	31bf7a04 	addi	r6,r6,-536
    c858:	30c00117 	ldw	r3,4(r6)
    c85c:	18000826 	beq	r3,zero,c880 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    c860:	19000017 	ldw	r4,0(r3)
    c864:	21400436 	bltu	r4,r5,c878 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    c868:	00001a06 	br	c8d4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    c86c:	11000017 	ldw	r4,0(r2)
    c870:	2140072e 	bgeu	r4,r5,c890 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    c874:	1007883a 	mov	r3,r2
    c878:	18800117 	ldw	r2,4(r3)
    c87c:	103ffb1e 	bne	r2,zero,c86c <__alt_data_end+0xfc00c86c>
    c880:	0005883a 	mov	r2,zero
    c884:	f800283a 	ret
    c888:	01400204 	movi	r5,8
    c88c:	003ff006 	br	c850 <__alt_data_end+0xfc00c850>
    c890:	18c00104 	addi	r3,r3,4
    c894:	2149c83a 	sub	r4,r4,r5
    c898:	018001c4 	movi	r6,7
    c89c:	3100092e 	bgeu	r6,r4,c8c4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    c8a0:	11c00117 	ldw	r7,4(r2)
    c8a4:	114d883a 	add	r6,r2,r5
    c8a8:	31000015 	stw	r4,0(r6)
    c8ac:	31c00115 	stw	r7,4(r6)
    c8b0:	18800017 	ldw	r2,0(r3)
    c8b4:	11400015 	stw	r5,0(r2)
    c8b8:	19800015 	stw	r6,0(r3)
    c8bc:	10800104 	addi	r2,r2,4
    c8c0:	f800283a 	ret
    c8c4:	11000117 	ldw	r4,4(r2)
    c8c8:	10800104 	addi	r2,r2,4
    c8cc:	19000015 	stw	r4,0(r3)
    c8d0:	f800283a 	ret
    c8d4:	1805883a 	mov	r2,r3
    c8d8:	30c00104 	addi	r3,r6,4
    c8dc:	003fed06 	br	c894 <__alt_data_end+0xfc00c894>

0000c8e0 <__cxa_allocate_exception>:
    c8e0:	defffd04 	addi	sp,sp,-12
    c8e4:	dc400115 	stw	r17,4(sp)
    c8e8:	24401104 	addi	r17,r4,68
    c8ec:	8809883a 	mov	r4,r17
    c8f0:	dc000015 	stw	r16,0(sp)
    c8f4:	dfc00215 	stw	ra,8(sp)
    c8f8:	000d24c0 	call	d24c <malloc>
    c8fc:	1021883a 	mov	r16,r2
    c900:	10000a26 	beq	r2,zero,c92c <__cxa_allocate_exception+0x4c>
    c904:	01801104 	movi	r6,68
    c908:	000b883a 	mov	r5,zero
    c90c:	8009883a 	mov	r4,r16
    c910:	000dbc80 	call	dbc8 <memset>
    c914:	80801104 	addi	r2,r16,68
    c918:	dfc00217 	ldw	ra,8(sp)
    c91c:	dc400117 	ldw	r17,4(sp)
    c920:	dc000017 	ldw	r16,0(sp)
    c924:	dec00304 	addi	sp,sp,12
    c928:	f800283a 	ret
    c92c:	8809883a 	mov	r4,r17
    c930:	000c8380 	call	c838 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    c934:	1021883a 	mov	r16,r2
    c938:	103ff21e 	bne	r2,zero,c904 <__alt_data_end+0xfc00c904>
    c93c:	000b3c00 	call	b3c0 <_ZSt9terminatev>

0000c940 <__cxa_free_exception>:
    c940:	00c000f4 	movhi	r3,3
    c944:	18ff7a04 	addi	r3,r3,-536
    c948:	18800217 	ldw	r2,8(r3)
    c94c:	213fef04 	addi	r4,r4,-68
    c950:	1100042e 	bgeu	r2,r4,c964 <__cxa_free_exception+0x24>
    c954:	18c00317 	ldw	r3,12(r3)
    c958:	10c5883a 	add	r2,r2,r3
    c95c:	2080012e 	bgeu	r4,r2,c964 <__cxa_free_exception+0x24>
    c960:	000c7801 	jmpi	c780 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    c964:	000d2601 	jmpi	d260 <free>

0000c968 <__cxa_allocate_dependent_exception>:
    c968:	defffe04 	addi	sp,sp,-8
    c96c:	01001004 	movi	r4,64
    c970:	dc000015 	stw	r16,0(sp)
    c974:	dfc00115 	stw	ra,4(sp)
    c978:	000d24c0 	call	d24c <malloc>
    c97c:	1021883a 	mov	r16,r2
    c980:	10000926 	beq	r2,zero,c9a8 <__cxa_allocate_dependent_exception+0x40>
    c984:	01801004 	movi	r6,64
    c988:	000b883a 	mov	r5,zero
    c98c:	8009883a 	mov	r4,r16
    c990:	000dbc80 	call	dbc8 <memset>
    c994:	8005883a 	mov	r2,r16
    c998:	dfc00117 	ldw	ra,4(sp)
    c99c:	dc000017 	ldw	r16,0(sp)
    c9a0:	dec00204 	addi	sp,sp,8
    c9a4:	f800283a 	ret
    c9a8:	01001004 	movi	r4,64
    c9ac:	000c8380 	call	c838 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    c9b0:	1021883a 	mov	r16,r2
    c9b4:	103ff31e 	bne	r2,zero,c984 <__alt_data_end+0xfc00c984>
    c9b8:	000b3c00 	call	b3c0 <_ZSt9terminatev>

0000c9bc <__cxa_free_dependent_exception>:
    c9bc:	014000f4 	movhi	r5,3
    c9c0:	297f7a04 	addi	r5,r5,-536
    c9c4:	28c00217 	ldw	r3,8(r5)
    c9c8:	2005883a 	mov	r2,r4
    c9cc:	1900042e 	bgeu	r3,r4,c9e0 <__cxa_free_dependent_exception+0x24>
    c9d0:	29400317 	ldw	r5,12(r5)
    c9d4:	1947883a 	add	r3,r3,r5
    c9d8:	20c0012e 	bgeu	r4,r3,c9e0 <__cxa_free_dependent_exception+0x24>
    c9dc:	000c7801 	jmpi	c780 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    c9e0:	1009883a 	mov	r4,r2
    c9e4:	000d2601 	jmpi	d260 <free>

0000c9e8 <_GLOBAL__sub_I___cxa_allocate_exception>:
    c9e8:	defffd04 	addi	sp,sp,-12
    c9ec:	dc400115 	stw	r17,4(sp)
    c9f0:	dc000015 	stw	r16,0(sp)
    c9f4:	04424004 	movi	r17,2304
    c9f8:	040000f4 	movhi	r16,3
    c9fc:	843f7a04 	addi	r16,r16,-536
    ca00:	8809883a 	mov	r4,r17
    ca04:	dfc00215 	stw	ra,8(sp)
    ca08:	84400315 	stw	r17,12(r16)
    ca0c:	000d24c0 	call	d24c <malloc>
    ca10:	80800215 	stw	r2,8(r16)
    ca14:	10000826 	beq	r2,zero,ca38 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    ca18:	80800115 	stw	r2,4(r16)
    ca1c:	14400015 	stw	r17,0(r2)
    ca20:	10000115 	stw	zero,4(r2)
    ca24:	dfc00217 	ldw	ra,8(sp)
    ca28:	dc400117 	ldw	r17,4(sp)
    ca2c:	dc000017 	ldw	r16,0(sp)
    ca30:	dec00304 	addi	sp,sp,12
    ca34:	f800283a 	ret
    ca38:	80000315 	stw	zero,12(r16)
    ca3c:	80000115 	stw	zero,4(r16)
    ca40:	003ff806 	br	ca24 <__alt_data_end+0xfc00ca24>

0000ca44 <__cxa_call_terminate>:
    ca44:	defffe04 	addi	sp,sp,-8
    ca48:	dfc00115 	stw	ra,4(sp)
    ca4c:	dc000015 	stw	r16,0(sp)
    ca50:	20000d26 	beq	r4,zero,ca88 <__cxa_call_terminate+0x44>
    ca54:	2021883a 	mov	r16,r4
    ca58:	000c5f80 	call	c5f8 <__cxa_begin_catch>
    ca5c:	80c00017 	ldw	r3,0(r16)
    ca60:	016f3574 	movhi	r5,48341
    ca64:	29754004 	addi	r5,r5,-11008
    ca68:	194b883a 	add	r5,r3,r5
    ca6c:	80800117 	ldw	r2,4(r16)
    ca70:	28c9803a 	cmpltu	r4,r5,r3
    ca74:	00ee2cb4 	movhi	r3,47282
    ca78:	18eaaf04 	addi	r3,r3,-21828
    ca7c:	10c5883a 	add	r2,r2,r3
    ca80:	2085883a 	add	r2,r4,r2
    ca84:	10000126 	beq	r2,zero,ca8c <__cxa_call_terminate+0x48>
    ca88:	000b3c00 	call	b3c0 <_ZSt9terminatev>
    ca8c:	00800044 	movi	r2,1
    ca90:	117ffd36 	bltu	r2,r5,ca88 <__alt_data_end+0xfc00ca88>
    ca94:	813ff817 	ldw	r4,-32(r16)
    ca98:	000b3000 	call	b300 <_ZN10__cxxabiv111__terminateEPFvvE>

0000ca9c <__cxa_get_globals_fast>:
    ca9c:	008000f4 	movhi	r2,3
    caa0:	10bf2104 	addi	r2,r2,-892
    caa4:	f800283a 	ret

0000caa8 <__cxa_get_globals>:
    caa8:	008000f4 	movhi	r2,3
    caac:	10bf2104 	addi	r2,r2,-892
    cab0:	f800283a 	ret

0000cab4 <_ZNSt9exceptionD1Ev>:
    cab4:	f800283a 	ret

0000cab8 <_ZNSt13bad_exceptionD1Ev>:
    cab8:	f800283a 	ret

0000cabc <_ZNKSt9exception4whatEv>:
    cabc:	008000f4 	movhi	r2,3
    cac0:	10a51a04 	addi	r2,r2,-27544
    cac4:	f800283a 	ret

0000cac8 <_ZNKSt13bad_exception4whatEv>:
    cac8:	008000f4 	movhi	r2,3
    cacc:	10a51e04 	addi	r2,r2,-27528
    cad0:	f800283a 	ret

0000cad4 <_ZNSt9exceptionD0Ev>:
    cad4:	000aff41 	jmpi	aff4 <_ZdlPv>

0000cad8 <_ZNSt13bad_exceptionD0Ev>:
    cad8:	000aff41 	jmpi	aff4 <_ZdlPv>

0000cadc <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    cadc:	f800283a 	ret

0000cae0 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    cae0:	000aff41 	jmpi	aff4 <_ZdlPv>

0000cae4 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    cae4:	f800283a 	ret

0000cae8 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    cae8:	000aff41 	jmpi	aff4 <_ZdlPv>

0000caec <__divsi3>:
    caec:	20001b16 	blt	r4,zero,cb5c <__divsi3+0x70>
    caf0:	000f883a 	mov	r7,zero
    caf4:	28001616 	blt	r5,zero,cb50 <__divsi3+0x64>
    caf8:	200d883a 	mov	r6,r4
    cafc:	29001a2e 	bgeu	r5,r4,cb68 <__divsi3+0x7c>
    cb00:	00800804 	movi	r2,32
    cb04:	00c00044 	movi	r3,1
    cb08:	00000106 	br	cb10 <__divsi3+0x24>
    cb0c:	10000d26 	beq	r2,zero,cb44 <__divsi3+0x58>
    cb10:	294b883a 	add	r5,r5,r5
    cb14:	10bfffc4 	addi	r2,r2,-1
    cb18:	18c7883a 	add	r3,r3,r3
    cb1c:	293ffb36 	bltu	r5,r4,cb0c <__alt_data_end+0xfc00cb0c>
    cb20:	0005883a 	mov	r2,zero
    cb24:	18000726 	beq	r3,zero,cb44 <__divsi3+0x58>
    cb28:	0005883a 	mov	r2,zero
    cb2c:	31400236 	bltu	r6,r5,cb38 <__divsi3+0x4c>
    cb30:	314dc83a 	sub	r6,r6,r5
    cb34:	10c4b03a 	or	r2,r2,r3
    cb38:	1806d07a 	srli	r3,r3,1
    cb3c:	280ad07a 	srli	r5,r5,1
    cb40:	183ffa1e 	bne	r3,zero,cb2c <__alt_data_end+0xfc00cb2c>
    cb44:	38000126 	beq	r7,zero,cb4c <__divsi3+0x60>
    cb48:	0085c83a 	sub	r2,zero,r2
    cb4c:	f800283a 	ret
    cb50:	014bc83a 	sub	r5,zero,r5
    cb54:	39c0005c 	xori	r7,r7,1
    cb58:	003fe706 	br	caf8 <__alt_data_end+0xfc00caf8>
    cb5c:	0109c83a 	sub	r4,zero,r4
    cb60:	01c00044 	movi	r7,1
    cb64:	003fe306 	br	caf4 <__alt_data_end+0xfc00caf4>
    cb68:	00c00044 	movi	r3,1
    cb6c:	003fee06 	br	cb28 <__alt_data_end+0xfc00cb28>

0000cb70 <__modsi3>:
    cb70:	20001716 	blt	r4,zero,cbd0 <__modsi3+0x60>
    cb74:	000f883a 	mov	r7,zero
    cb78:	2005883a 	mov	r2,r4
    cb7c:	28001216 	blt	r5,zero,cbc8 <__modsi3+0x58>
    cb80:	2900162e 	bgeu	r5,r4,cbdc <__modsi3+0x6c>
    cb84:	01800804 	movi	r6,32
    cb88:	00c00044 	movi	r3,1
    cb8c:	00000106 	br	cb94 <__modsi3+0x24>
    cb90:	30000a26 	beq	r6,zero,cbbc <__modsi3+0x4c>
    cb94:	294b883a 	add	r5,r5,r5
    cb98:	31bfffc4 	addi	r6,r6,-1
    cb9c:	18c7883a 	add	r3,r3,r3
    cba0:	293ffb36 	bltu	r5,r4,cb90 <__alt_data_end+0xfc00cb90>
    cba4:	18000526 	beq	r3,zero,cbbc <__modsi3+0x4c>
    cba8:	1806d07a 	srli	r3,r3,1
    cbac:	11400136 	bltu	r2,r5,cbb4 <__modsi3+0x44>
    cbb0:	1145c83a 	sub	r2,r2,r5
    cbb4:	280ad07a 	srli	r5,r5,1
    cbb8:	183ffb1e 	bne	r3,zero,cba8 <__alt_data_end+0xfc00cba8>
    cbbc:	38000126 	beq	r7,zero,cbc4 <__modsi3+0x54>
    cbc0:	0085c83a 	sub	r2,zero,r2
    cbc4:	f800283a 	ret
    cbc8:	014bc83a 	sub	r5,zero,r5
    cbcc:	003fec06 	br	cb80 <__alt_data_end+0xfc00cb80>
    cbd0:	0109c83a 	sub	r4,zero,r4
    cbd4:	01c00044 	movi	r7,1
    cbd8:	003fe706 	br	cb78 <__alt_data_end+0xfc00cb78>
    cbdc:	00c00044 	movi	r3,1
    cbe0:	003ff106 	br	cba8 <__alt_data_end+0xfc00cba8>

0000cbe4 <__udivsi3>:
    cbe4:	200d883a 	mov	r6,r4
    cbe8:	2900152e 	bgeu	r5,r4,cc40 <__udivsi3+0x5c>
    cbec:	28001416 	blt	r5,zero,cc40 <__udivsi3+0x5c>
    cbf0:	00800804 	movi	r2,32
    cbf4:	00c00044 	movi	r3,1
    cbf8:	00000206 	br	cc04 <__udivsi3+0x20>
    cbfc:	10000e26 	beq	r2,zero,cc38 <__udivsi3+0x54>
    cc00:	28000516 	blt	r5,zero,cc18 <__udivsi3+0x34>
    cc04:	294b883a 	add	r5,r5,r5
    cc08:	10bfffc4 	addi	r2,r2,-1
    cc0c:	18c7883a 	add	r3,r3,r3
    cc10:	293ffa36 	bltu	r5,r4,cbfc <__alt_data_end+0xfc00cbfc>
    cc14:	18000826 	beq	r3,zero,cc38 <__udivsi3+0x54>
    cc18:	0005883a 	mov	r2,zero
    cc1c:	31400236 	bltu	r6,r5,cc28 <__udivsi3+0x44>
    cc20:	314dc83a 	sub	r6,r6,r5
    cc24:	10c4b03a 	or	r2,r2,r3
    cc28:	1806d07a 	srli	r3,r3,1
    cc2c:	280ad07a 	srli	r5,r5,1
    cc30:	183ffa1e 	bne	r3,zero,cc1c <__alt_data_end+0xfc00cc1c>
    cc34:	f800283a 	ret
    cc38:	0005883a 	mov	r2,zero
    cc3c:	f800283a 	ret
    cc40:	00c00044 	movi	r3,1
    cc44:	003ff406 	br	cc18 <__alt_data_end+0xfc00cc18>

0000cc48 <__umodsi3>:
    cc48:	2005883a 	mov	r2,r4
    cc4c:	2900122e 	bgeu	r5,r4,cc98 <__umodsi3+0x50>
    cc50:	28001116 	blt	r5,zero,cc98 <__umodsi3+0x50>
    cc54:	01800804 	movi	r6,32
    cc58:	00c00044 	movi	r3,1
    cc5c:	00000206 	br	cc68 <__umodsi3+0x20>
    cc60:	30000c26 	beq	r6,zero,cc94 <__umodsi3+0x4c>
    cc64:	28000516 	blt	r5,zero,cc7c <__umodsi3+0x34>
    cc68:	294b883a 	add	r5,r5,r5
    cc6c:	31bfffc4 	addi	r6,r6,-1
    cc70:	18c7883a 	add	r3,r3,r3
    cc74:	293ffa36 	bltu	r5,r4,cc60 <__alt_data_end+0xfc00cc60>
    cc78:	18000626 	beq	r3,zero,cc94 <__umodsi3+0x4c>
    cc7c:	1806d07a 	srli	r3,r3,1
    cc80:	11400136 	bltu	r2,r5,cc88 <__umodsi3+0x40>
    cc84:	1145c83a 	sub	r2,r2,r5
    cc88:	280ad07a 	srli	r5,r5,1
    cc8c:	183ffb1e 	bne	r3,zero,cc7c <__alt_data_end+0xfc00cc7c>
    cc90:	f800283a 	ret
    cc94:	f800283a 	ret
    cc98:	00c00044 	movi	r3,1
    cc9c:	003ff706 	br	cc7c <__alt_data_end+0xfc00cc7c>

0000cca0 <__mulsi3>:
    cca0:	0005883a 	mov	r2,zero
    cca4:	20000726 	beq	r4,zero,ccc4 <__mulsi3+0x24>
    cca8:	20c0004c 	andi	r3,r4,1
    ccac:	2008d07a 	srli	r4,r4,1
    ccb0:	18000126 	beq	r3,zero,ccb8 <__mulsi3+0x18>
    ccb4:	1145883a 	add	r2,r2,r5
    ccb8:	294b883a 	add	r5,r5,r5
    ccbc:	203ffa1e 	bne	r4,zero,cca8 <__alt_data_end+0xfc00cca8>
    ccc0:	f800283a 	ret
    ccc4:	f800283a 	ret

0000ccc8 <_Unwind_ForcedUnwind_Phase2>:
    ccc8:	defff404 	addi	sp,sp,-48
    cccc:	dd800915 	stw	r22,36(sp)
    ccd0:	058000f4 	movhi	r22,3
    ccd4:	ddc00a15 	stw	r23,40(sp)
    ccd8:	dd400815 	stw	r21,32(sp)
    ccdc:	dd000715 	stw	r20,28(sp)
    cce0:	dcc00615 	stw	r19,24(sp)
    cce4:	dc400415 	stw	r17,16(sp)
    cce8:	dc000315 	stw	r16,12(sp)
    ccec:	dfc00b15 	stw	ra,44(sp)
    ccf0:	dc800515 	stw	r18,20(sp)
    ccf4:	2021883a 	mov	r16,r4
    ccf8:	2823883a 	mov	r17,r5
    ccfc:	24c00317 	ldw	r19,12(r4)
    cd00:	25000417 	ldw	r20,16(r4)
    cd04:	28c00017 	ldw	r3,0(r5)
    cd08:	b5bf2304 	addi	r22,r22,-884
    cd0c:	054001c4 	movi	r21,7
    cd10:	05c00204 	movi	r23,8
    cd14:	00001606 	br	cd70 <_Unwind_ForcedUnwind_Phase2+0xa8>
    cd18:	81800017 	ldw	r6,0(r16)
    cd1c:	81c00117 	ldw	r7,4(r16)
    cd20:	1c800617 	ldw	r18,24(r3)
    cd24:	dd000215 	stw	r20,8(sp)
    cd28:	dc400115 	stw	r17,4(sp)
    cd2c:	dc000015 	stw	r16,0(sp)
    cd30:	983ee83a 	callr	r19
    cd34:	01400284 	movi	r5,10
    cd38:	01000044 	movi	r4,1
    cd3c:	1000241e 	bne	r2,zero,cdd0 <_Unwind_ForcedUnwind_Phase2+0x108>
    cd40:	90000726 	beq	r18,zero,cd60 <_Unwind_ForcedUnwind_Phase2+0x98>
    cd44:	81800017 	ldw	r6,0(r16)
    cd48:	81c00117 	ldw	r7,4(r16)
    cd4c:	dc400115 	stw	r17,4(sp)
    cd50:	dc000015 	stw	r16,0(sp)
    cd54:	903ee83a 	callr	r18
    cd58:	15401f26 	beq	r2,r21,cdd8 <_Unwind_ForcedUnwind_Phase2+0x110>
    cd5c:	15c01c1e 	bne	r2,r23,cdd0 <_Unwind_ForcedUnwind_Phase2+0x108>
    cd60:	88800017 	ldw	r2,0(r17)
    cd64:	10c00017 	ldw	r3,0(r2)
    cd68:	b0c00015 	stw	r3,0(r22)
    cd6c:	88c00015 	stw	r3,0(r17)
    cd70:	01400284 	movi	r5,10
    cd74:	01000044 	movi	r4,1
    cd78:	183fe71e 	bne	r3,zero,cd18 <__alt_data_end+0xfc00cd18>
    cd7c:	81800017 	ldw	r6,0(r16)
    cd80:	81c00117 	ldw	r7,4(r16)
    cd84:	01400684 	movi	r5,26
    cd88:	dd000215 	stw	r20,8(sp)
    cd8c:	dc400115 	stw	r17,4(sp)
    cd90:	dc000015 	stw	r16,0(sp)
    cd94:	01000044 	movi	r4,1
    cd98:	983ee83a 	callr	r19
    cd9c:	10000c1e 	bne	r2,zero,cdd0 <_Unwind_ForcedUnwind_Phase2+0x108>
    cda0:	00800144 	movi	r2,5
    cda4:	dfc00b17 	ldw	ra,44(sp)
    cda8:	ddc00a17 	ldw	r23,40(sp)
    cdac:	dd800917 	ldw	r22,36(sp)
    cdb0:	dd400817 	ldw	r21,32(sp)
    cdb4:	dd000717 	ldw	r20,28(sp)
    cdb8:	dcc00617 	ldw	r19,24(sp)
    cdbc:	dc800517 	ldw	r18,20(sp)
    cdc0:	dc400417 	ldw	r17,16(sp)
    cdc4:	dc000317 	ldw	r16,12(sp)
    cdc8:	dec00c04 	addi	sp,sp,48
    cdcc:	f800283a 	ret
    cdd0:	00800084 	movi	r2,2
    cdd4:	003ff306 	br	cda4 <__alt_data_end+0xfc00cda4>
    cdd8:	a805883a 	mov	r2,r21
    cddc:	003ff106 	br	cda4 <__alt_data_end+0xfc00cda4>

0000cde0 <_Unwind_RaiseException_Phase2>:
    cde0:	28c00017 	ldw	r3,0(r5)
    cde4:	defff804 	addi	sp,sp,-32
    cde8:	dcc00515 	stw	r19,20(sp)
    cdec:	dc800415 	stw	r18,16(sp)
    cdf0:	dc400315 	stw	r17,12(sp)
    cdf4:	dc000215 	stw	r16,8(sp)
    cdf8:	dfc00715 	stw	ra,28(sp)
    cdfc:	dd000615 	stw	r20,24(sp)
    ce00:	2823883a 	mov	r17,r5
    ce04:	2021883a 	mov	r16,r4
    ce08:	048001c4 	movi	r18,7
    ce0c:	04c00204 	movi	r19,8
    ce10:	18001326 	beq	r3,zero,ce60 <_Unwind_RaiseException_Phase2+0x80>
    ce14:	81000417 	ldw	r4,16(r16)
    ce18:	1a000617 	ldw	r8,24(r3)
    ce1c:	19001926 	beq	r3,r4,ce84 <_Unwind_RaiseException_Phase2+0xa4>
    ce20:	40000c26 	beq	r8,zero,ce54 <_Unwind_RaiseException_Phase2+0x74>
    ce24:	01400084 	movi	r5,2
    ce28:	0029883a 	mov	r20,zero
    ce2c:	81800017 	ldw	r6,0(r16)
    ce30:	81c00117 	ldw	r7,4(r16)
    ce34:	01000044 	movi	r4,1
    ce38:	dc400115 	stw	r17,4(sp)
    ce3c:	dc000015 	stw	r16,0(sp)
    ce40:	403ee83a 	callr	r8
    ce44:	14801326 	beq	r2,r18,ce94 <_Unwind_RaiseException_Phase2+0xb4>
    ce48:	14c0051e 	bne	r2,r19,ce60 <_Unwind_RaiseException_Phase2+0x80>
    ce4c:	a000131e 	bne	r20,zero,ce9c <_Unwind_RaiseException_Phase2+0xbc>
    ce50:	88c00017 	ldw	r3,0(r17)
    ce54:	18c00017 	ldw	r3,0(r3)
    ce58:	88c00015 	stw	r3,0(r17)
    ce5c:	183fed1e 	bne	r3,zero,ce14 <__alt_data_end+0xfc00ce14>
    ce60:	00800084 	movi	r2,2
    ce64:	dfc00717 	ldw	ra,28(sp)
    ce68:	dd000617 	ldw	r20,24(sp)
    ce6c:	dcc00517 	ldw	r19,20(sp)
    ce70:	dc800417 	ldw	r18,16(sp)
    ce74:	dc400317 	ldw	r17,12(sp)
    ce78:	dc000217 	ldw	r16,8(sp)
    ce7c:	dec00804 	addi	sp,sp,32
    ce80:	f800283a 	ret
    ce84:	40000526 	beq	r8,zero,ce9c <_Unwind_RaiseException_Phase2+0xbc>
    ce88:	01400184 	movi	r5,6
    ce8c:	05000104 	movi	r20,4
    ce90:	003fe606 	br	ce2c <__alt_data_end+0xfc00ce2c>
    ce94:	9005883a 	mov	r2,r18
    ce98:	003ff206 	br	ce64 <__alt_data_end+0xfc00ce64>
    ce9c:	000d1e80 	call	d1e8 <abort>

0000cea0 <uw_install_context.isra.1>:
    cea0:	20c00017 	ldw	r3,0(r4)
    cea4:	deffff04 	addi	sp,sp,-4
    cea8:	014000f4 	movhi	r5,3
    ceac:	19000917 	ldw	r4,36(r3)
    ceb0:	df000015 	stw	fp,0(sp)
    ceb4:	18800804 	addi	r2,r3,32
    ceb8:	d839883a 	mov	fp,sp
    cebc:	297f2304 	addi	r5,r5,-884
    cec0:	28c00015 	stw	r3,0(r5)
    cec4:	17000017 	ldw	fp,0(r2)
    cec8:	1ec00a17 	ldw	sp,40(r3)
    cecc:	2000683a 	jmp	r4

0000ced0 <_Unwind_SjLj_Register>:
    ced0:	008000f4 	movhi	r2,3
    ced4:	10bf2304 	addi	r2,r2,-884
    ced8:	10c00017 	ldw	r3,0(r2)
    cedc:	11000015 	stw	r4,0(r2)
    cee0:	20c00015 	stw	r3,0(r4)
    cee4:	f800283a 	ret

0000cee8 <_Unwind_SjLj_Unregister>:
    cee8:	20c00017 	ldw	r3,0(r4)
    ceec:	008000f4 	movhi	r2,3
    cef0:	10bf2304 	addi	r2,r2,-884
    cef4:	10c00015 	stw	r3,0(r2)
    cef8:	f800283a 	ret

0000cefc <_Unwind_GetGR>:
    cefc:	20800017 	ldw	r2,0(r4)
    cf00:	29400084 	addi	r5,r5,2
    cf04:	294b883a 	add	r5,r5,r5
    cf08:	294b883a 	add	r5,r5,r5
    cf0c:	114b883a 	add	r5,r2,r5
    cf10:	28800017 	ldw	r2,0(r5)
    cf14:	f800283a 	ret

0000cf18 <_Unwind_GetCFA>:
    cf18:	20800017 	ldw	r2,0(r4)
    cf1c:	10000226 	beq	r2,zero,cf28 <_Unwind_GetCFA+0x10>
    cf20:	10800a17 	ldw	r2,40(r2)
    cf24:	f800283a 	ret
    cf28:	0005883a 	mov	r2,zero
    cf2c:	f800283a 	ret

0000cf30 <_Unwind_SetGR>:
    cf30:	20800017 	ldw	r2,0(r4)
    cf34:	29400084 	addi	r5,r5,2
    cf38:	294b883a 	add	r5,r5,r5
    cf3c:	294b883a 	add	r5,r5,r5
    cf40:	114b883a 	add	r5,r2,r5
    cf44:	29800015 	stw	r6,0(r5)
    cf48:	f800283a 	ret

0000cf4c <_Unwind_GetIP>:
    cf4c:	20800017 	ldw	r2,0(r4)
    cf50:	10800117 	ldw	r2,4(r2)
    cf54:	10800044 	addi	r2,r2,1
    cf58:	f800283a 	ret

0000cf5c <_Unwind_GetIPInfo>:
    cf5c:	20800017 	ldw	r2,0(r4)
    cf60:	28000015 	stw	zero,0(r5)
    cf64:	10000326 	beq	r2,zero,cf74 <_Unwind_GetIPInfo+0x18>
    cf68:	10800117 	ldw	r2,4(r2)
    cf6c:	10800044 	addi	r2,r2,1
    cf70:	f800283a 	ret
    cf74:	0005883a 	mov	r2,zero
    cf78:	f800283a 	ret

0000cf7c <_Unwind_SetIP>:
    cf7c:	20800017 	ldw	r2,0(r4)
    cf80:	297fffc4 	addi	r5,r5,-1
    cf84:	11400115 	stw	r5,4(r2)
    cf88:	f800283a 	ret

0000cf8c <_Unwind_GetLanguageSpecificData>:
    cf8c:	20800017 	ldw	r2,0(r4)
    cf90:	10800717 	ldw	r2,28(r2)
    cf94:	f800283a 	ret

0000cf98 <_Unwind_GetRegionStart>:
    cf98:	0005883a 	mov	r2,zero
    cf9c:	f800283a 	ret

0000cfa0 <_Unwind_FindEnclosingFunction>:
    cfa0:	0005883a 	mov	r2,zero
    cfa4:	f800283a 	ret

0000cfa8 <_Unwind_GetDataRelBase>:
    cfa8:	0005883a 	mov	r2,zero
    cfac:	f800283a 	ret

0000cfb0 <_Unwind_GetTextRelBase>:
    cfb0:	0005883a 	mov	r2,zero
    cfb4:	f800283a 	ret

0000cfb8 <_Unwind_SjLj_RaiseException>:
    cfb8:	008000f4 	movhi	r2,3
    cfbc:	defff804 	addi	sp,sp,-32
    cfc0:	10bf2304 	addi	r2,r2,-884
    cfc4:	dc800515 	stw	r18,20(sp)
    cfc8:	14800017 	ldw	r18,0(r2)
    cfcc:	dfc00715 	stw	ra,28(sp)
    cfd0:	dcc00615 	stw	r19,24(sp)
    cfd4:	dc400415 	stw	r17,16(sp)
    cfd8:	dc000315 	stw	r16,12(sp)
    cfdc:	dc800215 	stw	r18,8(sp)
    cfe0:	90001426 	beq	r18,zero,d034 <_Unwind_SjLj_RaiseException+0x7c>
    cfe4:	2021883a 	mov	r16,r4
    cfe8:	9005883a 	mov	r2,r18
    cfec:	04400184 	movi	r17,6
    cff0:	04c00204 	movi	r19,8
    cff4:	10800617 	ldw	r2,24(r2)
    cff8:	10000a26 	beq	r2,zero,d024 <_Unwind_SjLj_RaiseException+0x6c>
    cffc:	81800017 	ldw	r6,0(r16)
    d000:	81c00117 	ldw	r7,4(r16)
    d004:	01400044 	movi	r5,1
    d008:	d8c00204 	addi	r3,sp,8
    d00c:	d8c00115 	stw	r3,4(sp)
    d010:	dc000015 	stw	r16,0(sp)
    d014:	2809883a 	mov	r4,r5
    d018:	103ee83a 	callr	r2
    d01c:	14400d26 	beq	r2,r17,d054 <_Unwind_SjLj_RaiseException+0x9c>
    d020:	14c0171e 	bne	r2,r19,d080 <_Unwind_SjLj_RaiseException+0xc8>
    d024:	d8800217 	ldw	r2,8(sp)
    d028:	10800017 	ldw	r2,0(r2)
    d02c:	d8800215 	stw	r2,8(sp)
    d030:	103ff01e 	bne	r2,zero,cff4 <__alt_data_end+0xfc00cff4>
    d034:	00800144 	movi	r2,5
    d038:	dfc00717 	ldw	ra,28(sp)
    d03c:	dcc00617 	ldw	r19,24(sp)
    d040:	dc800517 	ldw	r18,20(sp)
    d044:	dc400417 	ldw	r17,16(sp)
    d048:	dc000317 	ldw	r16,12(sp)
    d04c:	dec00804 	addi	sp,sp,32
    d050:	f800283a 	ret
    d054:	d8800217 	ldw	r2,8(sp)
    d058:	80000315 	stw	zero,12(r16)
    d05c:	d9400204 	addi	r5,sp,8
    d060:	80800415 	stw	r2,16(r16)
    d064:	8009883a 	mov	r4,r16
    d068:	dc800215 	stw	r18,8(sp)
    d06c:	000cde00 	call	cde0 <_Unwind_RaiseException_Phase2>
    d070:	00c001c4 	movi	r3,7
    d074:	10fff01e 	bne	r2,r3,d038 <__alt_data_end+0xfc00d038>
    d078:	d9000204 	addi	r4,sp,8
    d07c:	000cea00 	call	cea0 <uw_install_context.isra.1>
    d080:	008000c4 	movi	r2,3
    d084:	003fec06 	br	d038 <__alt_data_end+0xfc00d038>

0000d088 <_Unwind_SjLj_ForcedUnwind>:
    d088:	00c000f4 	movhi	r3,3
    d08c:	18ff2304 	addi	r3,r3,-884
    d090:	defffe04 	addi	sp,sp,-8
    d094:	18c00017 	ldw	r3,0(r3)
    d098:	dfc00115 	stw	ra,4(sp)
    d09c:	21400315 	stw	r5,12(r4)
    d0a0:	21800415 	stw	r6,16(r4)
    d0a4:	d80b883a 	mov	r5,sp
    d0a8:	d8c00015 	stw	r3,0(sp)
    d0ac:	000ccc80 	call	ccc8 <_Unwind_ForcedUnwind_Phase2>
    d0b0:	00c001c4 	movi	r3,7
    d0b4:	10c00326 	beq	r2,r3,d0c4 <_Unwind_SjLj_ForcedUnwind+0x3c>
    d0b8:	dfc00117 	ldw	ra,4(sp)
    d0bc:	dec00204 	addi	sp,sp,8
    d0c0:	f800283a 	ret
    d0c4:	d809883a 	mov	r4,sp
    d0c8:	000cea00 	call	cea0 <uw_install_context.isra.1>

0000d0cc <_Unwind_SjLj_Resume>:
    d0cc:	00c000f4 	movhi	r3,3
    d0d0:	18ff2304 	addi	r3,r3,-884
    d0d4:	18c00017 	ldw	r3,0(r3)
    d0d8:	20800317 	ldw	r2,12(r4)
    d0dc:	defffe04 	addi	sp,sp,-8
    d0e0:	dfc00115 	stw	ra,4(sp)
    d0e4:	d8c00015 	stw	r3,0(sp)
    d0e8:	d80b883a 	mov	r5,sp
    d0ec:	1000041e 	bne	r2,zero,d100 <_Unwind_SjLj_Resume+0x34>
    d0f0:	000cde00 	call	cde0 <_Unwind_RaiseException_Phase2>
    d0f4:	00c001c4 	movi	r3,7
    d0f8:	10c00326 	beq	r2,r3,d108 <_Unwind_SjLj_Resume+0x3c>
    d0fc:	000d1e80 	call	d1e8 <abort>
    d100:	000ccc80 	call	ccc8 <_Unwind_ForcedUnwind_Phase2>
    d104:	003ffb06 	br	d0f4 <__alt_data_end+0xfc00d0f4>
    d108:	d809883a 	mov	r4,sp
    d10c:	000cea00 	call	cea0 <uw_install_context.isra.1>

0000d110 <_Unwind_SjLj_Resume_or_Rethrow>:
    d110:	20800317 	ldw	r2,12(r4)
    d114:	defffe04 	addi	sp,sp,-8
    d118:	dfc00115 	stw	ra,4(sp)
    d11c:	1000041e 	bne	r2,zero,d130 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    d120:	000cfb80 	call	cfb8 <_Unwind_SjLj_RaiseException>
    d124:	dfc00117 	ldw	ra,4(sp)
    d128:	dec00204 	addi	sp,sp,8
    d12c:	f800283a 	ret
    d130:	008000f4 	movhi	r2,3
    d134:	10bf2304 	addi	r2,r2,-884
    d138:	10800017 	ldw	r2,0(r2)
    d13c:	d80b883a 	mov	r5,sp
    d140:	d8800015 	stw	r2,0(sp)
    d144:	000ccc80 	call	ccc8 <_Unwind_ForcedUnwind_Phase2>
    d148:	00c001c4 	movi	r3,7
    d14c:	10c00126 	beq	r2,r3,d154 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    d150:	000d1e80 	call	d1e8 <abort>
    d154:	d809883a 	mov	r4,sp
    d158:	000cea00 	call	cea0 <uw_install_context.isra.1>

0000d15c <_Unwind_DeleteException>:
    d15c:	20800217 	ldw	r2,8(r4)
    d160:	10000326 	beq	r2,zero,d170 <_Unwind_DeleteException+0x14>
    d164:	200b883a 	mov	r5,r4
    d168:	01000044 	movi	r4,1
    d16c:	1000683a 	jmp	r2
    d170:	f800283a 	ret

0000d174 <_Unwind_Backtrace>:
    d174:	008000f4 	movhi	r2,3
    d178:	10bf2304 	addi	r2,r2,-884
    d17c:	10800017 	ldw	r2,0(r2)
    d180:	defffc04 	addi	sp,sp,-16
    d184:	dc400215 	stw	r17,8(sp)
    d188:	dc000115 	stw	r16,4(sp)
    d18c:	dfc00315 	stw	ra,12(sp)
    d190:	2023883a 	mov	r17,r4
    d194:	2821883a 	mov	r16,r5
    d198:	d8800015 	stw	r2,0(sp)
    d19c:	00000506 	br	d1b4 <_Unwind_Backtrace+0x40>
    d1a0:	883ee83a 	callr	r17
    d1a4:	10000e1e 	bne	r2,zero,d1e0 <_Unwind_Backtrace+0x6c>
    d1a8:	d8800017 	ldw	r2,0(sp)
    d1ac:	10800017 	ldw	r2,0(r2)
    d1b0:	d8800015 	stw	r2,0(sp)
    d1b4:	800b883a 	mov	r5,r16
    d1b8:	d809883a 	mov	r4,sp
    d1bc:	103ff81e 	bne	r2,zero,d1a0 <__alt_data_end+0xfc00d1a0>
    d1c0:	883ee83a 	callr	r17
    d1c4:	1000061e 	bne	r2,zero,d1e0 <_Unwind_Backtrace+0x6c>
    d1c8:	00800144 	movi	r2,5
    d1cc:	dfc00317 	ldw	ra,12(sp)
    d1d0:	dc400217 	ldw	r17,8(sp)
    d1d4:	dc000117 	ldw	r16,4(sp)
    d1d8:	dec00404 	addi	sp,sp,16
    d1dc:	f800283a 	ret
    d1e0:	008000c4 	movi	r2,3
    d1e4:	003ff906 	br	d1cc <__alt_data_end+0xfc00d1cc>

0000d1e8 <abort>:
    d1e8:	deffff04 	addi	sp,sp,-4
    d1ec:	01000184 	movi	r4,6
    d1f0:	dfc00015 	stw	ra,0(sp)
    d1f4:	000e0f80 	call	e0f8 <raise>
    d1f8:	01000044 	movi	r4,1
    d1fc:	001de9c0 	call	1de9c <_exit>

0000d200 <clock>:
    d200:	008000f4 	movhi	r2,3
    d204:	10b29504 	addi	r2,r2,-13740
    d208:	11000017 	ldw	r4,0(r2)
    d20c:	defffb04 	addi	sp,sp,-20
    d210:	d80b883a 	mov	r5,sp
    d214:	dfc00415 	stw	ra,16(sp)
    d218:	001069c0 	call	1069c <_times_r>
    d21c:	00ffffc4 	movi	r3,-1
    d220:	10c00726 	beq	r2,r3,d240 <clock+0x40>
    d224:	d8c00017 	ldw	r3,0(sp)
    d228:	d8800117 	ldw	r2,4(sp)
    d22c:	1885883a 	add	r2,r3,r2
    d230:	d8c00217 	ldw	r3,8(sp)
    d234:	10c7883a 	add	r3,r2,r3
    d238:	d8800317 	ldw	r2,12(sp)
    d23c:	1885883a 	add	r2,r3,r2
    d240:	dfc00417 	ldw	ra,16(sp)
    d244:	dec00504 	addi	sp,sp,20
    d248:	f800283a 	ret

0000d24c <malloc>:
    d24c:	008000f4 	movhi	r2,3
    d250:	10b29504 	addi	r2,r2,-13740
    d254:	200b883a 	mov	r5,r4
    d258:	11000017 	ldw	r4,0(r2)
    d25c:	000d2741 	jmpi	d274 <_malloc_r>

0000d260 <free>:
    d260:	008000f4 	movhi	r2,3
    d264:	10b29504 	addi	r2,r2,-13740
    d268:	200b883a 	mov	r5,r4
    d26c:	11000017 	ldw	r4,0(r2)
    d270:	0014bd81 	jmpi	14bd8 <_free_r>

0000d274 <_malloc_r>:
    d274:	defff504 	addi	sp,sp,-44
    d278:	dc800315 	stw	r18,12(sp)
    d27c:	dfc00a15 	stw	ra,40(sp)
    d280:	df000915 	stw	fp,36(sp)
    d284:	ddc00815 	stw	r23,32(sp)
    d288:	dd800715 	stw	r22,28(sp)
    d28c:	dd400615 	stw	r21,24(sp)
    d290:	dd000515 	stw	r20,20(sp)
    d294:	dcc00415 	stw	r19,16(sp)
    d298:	dc400215 	stw	r17,8(sp)
    d29c:	dc000115 	stw	r16,4(sp)
    d2a0:	288002c4 	addi	r2,r5,11
    d2a4:	00c00584 	movi	r3,22
    d2a8:	2025883a 	mov	r18,r4
    d2ac:	18807f2e 	bgeu	r3,r2,d4ac <_malloc_r+0x238>
    d2b0:	047ffe04 	movi	r17,-8
    d2b4:	1462703a 	and	r17,r2,r17
    d2b8:	8800a316 	blt	r17,zero,d548 <_malloc_r+0x2d4>
    d2bc:	8940a236 	bltu	r17,r5,d548 <_malloc_r+0x2d4>
    d2c0:	001e4b80 	call	1e4b8 <__malloc_lock>
    d2c4:	00807dc4 	movi	r2,503
    d2c8:	1441e92e 	bgeu	r2,r17,da70 <_malloc_r+0x7fc>
    d2cc:	8804d27a 	srli	r2,r17,9
    d2d0:	1000a126 	beq	r2,zero,d558 <_malloc_r+0x2e4>
    d2d4:	00c00104 	movi	r3,4
    d2d8:	18811e36 	bltu	r3,r2,d754 <_malloc_r+0x4e0>
    d2dc:	8804d1ba 	srli	r2,r17,6
    d2e0:	12000e44 	addi	r8,r2,57
    d2e4:	11c00e04 	addi	r7,r2,56
    d2e8:	4209883a 	add	r4,r8,r8
    d2ec:	04c000f4 	movhi	r19,3
    d2f0:	2109883a 	add	r4,r4,r4
    d2f4:	9ce73804 	addi	r19,r19,-25376
    d2f8:	2109883a 	add	r4,r4,r4
    d2fc:	9909883a 	add	r4,r19,r4
    d300:	24000117 	ldw	r16,4(r4)
    d304:	213ffe04 	addi	r4,r4,-8
    d308:	24009726 	beq	r4,r16,d568 <_malloc_r+0x2f4>
    d30c:	80800117 	ldw	r2,4(r16)
    d310:	01bfff04 	movi	r6,-4
    d314:	014003c4 	movi	r5,15
    d318:	1184703a 	and	r2,r2,r6
    d31c:	1447c83a 	sub	r3,r2,r17
    d320:	28c00716 	blt	r5,r3,d340 <_malloc_r+0xcc>
    d324:	1800920e 	bge	r3,zero,d570 <_malloc_r+0x2fc>
    d328:	84000317 	ldw	r16,12(r16)
    d32c:	24008e26 	beq	r4,r16,d568 <_malloc_r+0x2f4>
    d330:	80800117 	ldw	r2,4(r16)
    d334:	1184703a 	and	r2,r2,r6
    d338:	1447c83a 	sub	r3,r2,r17
    d33c:	28fff90e 	bge	r5,r3,d324 <__alt_data_end+0xfc00d324>
    d340:	3809883a 	mov	r4,r7
    d344:	018000f4 	movhi	r6,3
    d348:	9c000417 	ldw	r16,16(r19)
    d34c:	31a73804 	addi	r6,r6,-25376
    d350:	32000204 	addi	r8,r6,8
    d354:	82013426 	beq	r16,r8,d828 <_malloc_r+0x5b4>
    d358:	80c00117 	ldw	r3,4(r16)
    d35c:	00bfff04 	movi	r2,-4
    d360:	188e703a 	and	r7,r3,r2
    d364:	3c45c83a 	sub	r2,r7,r17
    d368:	00c003c4 	movi	r3,15
    d36c:	18811f16 	blt	r3,r2,d7ec <_malloc_r+0x578>
    d370:	32000515 	stw	r8,20(r6)
    d374:	32000415 	stw	r8,16(r6)
    d378:	10007f0e 	bge	r2,zero,d578 <_malloc_r+0x304>
    d37c:	00807fc4 	movi	r2,511
    d380:	11c0fd36 	bltu	r2,r7,d778 <_malloc_r+0x504>
    d384:	3806d0fa 	srli	r3,r7,3
    d388:	01c00044 	movi	r7,1
    d38c:	30800117 	ldw	r2,4(r6)
    d390:	19400044 	addi	r5,r3,1
    d394:	294b883a 	add	r5,r5,r5
    d398:	1807d0ba 	srai	r3,r3,2
    d39c:	294b883a 	add	r5,r5,r5
    d3a0:	294b883a 	add	r5,r5,r5
    d3a4:	298b883a 	add	r5,r5,r6
    d3a8:	38c6983a 	sll	r3,r7,r3
    d3ac:	29c00017 	ldw	r7,0(r5)
    d3b0:	2a7ffe04 	addi	r9,r5,-8
    d3b4:	1886b03a 	or	r3,r3,r2
    d3b8:	82400315 	stw	r9,12(r16)
    d3bc:	81c00215 	stw	r7,8(r16)
    d3c0:	30c00115 	stw	r3,4(r6)
    d3c4:	2c000015 	stw	r16,0(r5)
    d3c8:	3c000315 	stw	r16,12(r7)
    d3cc:	2005d0ba 	srai	r2,r4,2
    d3d0:	01400044 	movi	r5,1
    d3d4:	288a983a 	sll	r5,r5,r2
    d3d8:	19406f36 	bltu	r3,r5,d598 <_malloc_r+0x324>
    d3dc:	28c4703a 	and	r2,r5,r3
    d3e0:	10000a1e 	bne	r2,zero,d40c <_malloc_r+0x198>
    d3e4:	00bfff04 	movi	r2,-4
    d3e8:	294b883a 	add	r5,r5,r5
    d3ec:	2088703a 	and	r4,r4,r2
    d3f0:	28c4703a 	and	r2,r5,r3
    d3f4:	21000104 	addi	r4,r4,4
    d3f8:	1000041e 	bne	r2,zero,d40c <_malloc_r+0x198>
    d3fc:	294b883a 	add	r5,r5,r5
    d400:	28c4703a 	and	r2,r5,r3
    d404:	21000104 	addi	r4,r4,4
    d408:	103ffc26 	beq	r2,zero,d3fc <__alt_data_end+0xfc00d3fc>
    d40c:	02bfff04 	movi	r10,-4
    d410:	024003c4 	movi	r9,15
    d414:	21800044 	addi	r6,r4,1
    d418:	318d883a 	add	r6,r6,r6
    d41c:	318d883a 	add	r6,r6,r6
    d420:	318d883a 	add	r6,r6,r6
    d424:	998d883a 	add	r6,r19,r6
    d428:	333ffe04 	addi	r12,r6,-8
    d42c:	2017883a 	mov	r11,r4
    d430:	31800104 	addi	r6,r6,4
    d434:	34000017 	ldw	r16,0(r6)
    d438:	31fffd04 	addi	r7,r6,-12
    d43c:	81c0041e 	bne	r16,r7,d450 <_malloc_r+0x1dc>
    d440:	0000fb06 	br	d830 <_malloc_r+0x5bc>
    d444:	1801030e 	bge	r3,zero,d854 <_malloc_r+0x5e0>
    d448:	84000317 	ldw	r16,12(r16)
    d44c:	81c0f826 	beq	r16,r7,d830 <_malloc_r+0x5bc>
    d450:	80800117 	ldw	r2,4(r16)
    d454:	1284703a 	and	r2,r2,r10
    d458:	1447c83a 	sub	r3,r2,r17
    d45c:	48fff90e 	bge	r9,r3,d444 <__alt_data_end+0xfc00d444>
    d460:	80800317 	ldw	r2,12(r16)
    d464:	81000217 	ldw	r4,8(r16)
    d468:	89400054 	ori	r5,r17,1
    d46c:	81400115 	stw	r5,4(r16)
    d470:	20800315 	stw	r2,12(r4)
    d474:	11000215 	stw	r4,8(r2)
    d478:	8463883a 	add	r17,r16,r17
    d47c:	9c400515 	stw	r17,20(r19)
    d480:	9c400415 	stw	r17,16(r19)
    d484:	18800054 	ori	r2,r3,1
    d488:	88800115 	stw	r2,4(r17)
    d48c:	8a000315 	stw	r8,12(r17)
    d490:	8a000215 	stw	r8,8(r17)
    d494:	88e3883a 	add	r17,r17,r3
    d498:	88c00015 	stw	r3,0(r17)
    d49c:	9009883a 	mov	r4,r18
    d4a0:	001e4dc0 	call	1e4dc <__malloc_unlock>
    d4a4:	80800204 	addi	r2,r16,8
    d4a8:	00001b06 	br	d518 <_malloc_r+0x2a4>
    d4ac:	04400404 	movi	r17,16
    d4b0:	89402536 	bltu	r17,r5,d548 <_malloc_r+0x2d4>
    d4b4:	001e4b80 	call	1e4b8 <__malloc_lock>
    d4b8:	00800184 	movi	r2,6
    d4bc:	01000084 	movi	r4,2
    d4c0:	04c000f4 	movhi	r19,3
    d4c4:	1085883a 	add	r2,r2,r2
    d4c8:	9ce73804 	addi	r19,r19,-25376
    d4cc:	1085883a 	add	r2,r2,r2
    d4d0:	9885883a 	add	r2,r19,r2
    d4d4:	14000117 	ldw	r16,4(r2)
    d4d8:	10fffe04 	addi	r3,r2,-8
    d4dc:	80c0d926 	beq	r16,r3,d844 <_malloc_r+0x5d0>
    d4e0:	80c00117 	ldw	r3,4(r16)
    d4e4:	81000317 	ldw	r4,12(r16)
    d4e8:	00bfff04 	movi	r2,-4
    d4ec:	1884703a 	and	r2,r3,r2
    d4f0:	81400217 	ldw	r5,8(r16)
    d4f4:	8085883a 	add	r2,r16,r2
    d4f8:	10c00117 	ldw	r3,4(r2)
    d4fc:	29000315 	stw	r4,12(r5)
    d500:	21400215 	stw	r5,8(r4)
    d504:	18c00054 	ori	r3,r3,1
    d508:	10c00115 	stw	r3,4(r2)
    d50c:	9009883a 	mov	r4,r18
    d510:	001e4dc0 	call	1e4dc <__malloc_unlock>
    d514:	80800204 	addi	r2,r16,8
    d518:	dfc00a17 	ldw	ra,40(sp)
    d51c:	df000917 	ldw	fp,36(sp)
    d520:	ddc00817 	ldw	r23,32(sp)
    d524:	dd800717 	ldw	r22,28(sp)
    d528:	dd400617 	ldw	r21,24(sp)
    d52c:	dd000517 	ldw	r20,20(sp)
    d530:	dcc00417 	ldw	r19,16(sp)
    d534:	dc800317 	ldw	r18,12(sp)
    d538:	dc400217 	ldw	r17,8(sp)
    d53c:	dc000117 	ldw	r16,4(sp)
    d540:	dec00b04 	addi	sp,sp,44
    d544:	f800283a 	ret
    d548:	00800304 	movi	r2,12
    d54c:	90800015 	stw	r2,0(r18)
    d550:	0005883a 	mov	r2,zero
    d554:	003ff006 	br	d518 <__alt_data_end+0xfc00d518>
    d558:	01002004 	movi	r4,128
    d55c:	02001004 	movi	r8,64
    d560:	01c00fc4 	movi	r7,63
    d564:	003f6106 	br	d2ec <__alt_data_end+0xfc00d2ec>
    d568:	4009883a 	mov	r4,r8
    d56c:	003f7506 	br	d344 <__alt_data_end+0xfc00d344>
    d570:	81000317 	ldw	r4,12(r16)
    d574:	003fde06 	br	d4f0 <__alt_data_end+0xfc00d4f0>
    d578:	81c5883a 	add	r2,r16,r7
    d57c:	11400117 	ldw	r5,4(r2)
    d580:	9009883a 	mov	r4,r18
    d584:	29400054 	ori	r5,r5,1
    d588:	11400115 	stw	r5,4(r2)
    d58c:	001e4dc0 	call	1e4dc <__malloc_unlock>
    d590:	80800204 	addi	r2,r16,8
    d594:	003fe006 	br	d518 <__alt_data_end+0xfc00d518>
    d598:	9c000217 	ldw	r16,8(r19)
    d59c:	00bfff04 	movi	r2,-4
    d5a0:	85800117 	ldw	r22,4(r16)
    d5a4:	b0ac703a 	and	r22,r22,r2
    d5a8:	b4400336 	bltu	r22,r17,d5b8 <_malloc_r+0x344>
    d5ac:	b445c83a 	sub	r2,r22,r17
    d5b0:	00c003c4 	movi	r3,15
    d5b4:	18805d16 	blt	r3,r2,d72c <_malloc_r+0x4b8>
    d5b8:	05c000f4 	movhi	r23,3
    d5bc:	008000f4 	movhi	r2,3
    d5c0:	10bf2604 	addi	r2,r2,-872
    d5c4:	bdf29604 	addi	r23,r23,-13736
    d5c8:	15400017 	ldw	r21,0(r2)
    d5cc:	b8c00017 	ldw	r3,0(r23)
    d5d0:	00bfffc4 	movi	r2,-1
    d5d4:	858d883a 	add	r6,r16,r22
    d5d8:	8d6b883a 	add	r21,r17,r21
    d5dc:	1880ea26 	beq	r3,r2,d988 <_malloc_r+0x714>
    d5e0:	ad4403c4 	addi	r21,r21,4111
    d5e4:	00bc0004 	movi	r2,-4096
    d5e8:	a8aa703a 	and	r21,r21,r2
    d5ec:	a80b883a 	mov	r5,r21
    d5f0:	9009883a 	mov	r4,r18
    d5f4:	d9800015 	stw	r6,0(sp)
    d5f8:	000de500 	call	de50 <_sbrk_r>
    d5fc:	1029883a 	mov	r20,r2
    d600:	00bfffc4 	movi	r2,-1
    d604:	d9800017 	ldw	r6,0(sp)
    d608:	a080e826 	beq	r20,r2,d9ac <_malloc_r+0x738>
    d60c:	a180a636 	bltu	r20,r6,d8a8 <_malloc_r+0x634>
    d610:	070000f4 	movhi	fp,3
    d614:	e73f7e04 	addi	fp,fp,-520
    d618:	e0800017 	ldw	r2,0(fp)
    d61c:	a887883a 	add	r3,r21,r2
    d620:	e0c00015 	stw	r3,0(fp)
    d624:	3500e626 	beq	r6,r20,d9c0 <_malloc_r+0x74c>
    d628:	b9000017 	ldw	r4,0(r23)
    d62c:	00bfffc4 	movi	r2,-1
    d630:	2080ee26 	beq	r4,r2,d9ec <_malloc_r+0x778>
    d634:	a185c83a 	sub	r2,r20,r6
    d638:	10c5883a 	add	r2,r2,r3
    d63c:	e0800015 	stw	r2,0(fp)
    d640:	a0c001cc 	andi	r3,r20,7
    d644:	1800bc26 	beq	r3,zero,d938 <_malloc_r+0x6c4>
    d648:	a0e9c83a 	sub	r20,r20,r3
    d64c:	00840204 	movi	r2,4104
    d650:	a5000204 	addi	r20,r20,8
    d654:	10c7c83a 	sub	r3,r2,r3
    d658:	a545883a 	add	r2,r20,r21
    d65c:	1083ffcc 	andi	r2,r2,4095
    d660:	18abc83a 	sub	r21,r3,r2
    d664:	a80b883a 	mov	r5,r21
    d668:	9009883a 	mov	r4,r18
    d66c:	000de500 	call	de50 <_sbrk_r>
    d670:	00ffffc4 	movi	r3,-1
    d674:	10c0e126 	beq	r2,r3,d9fc <_malloc_r+0x788>
    d678:	1505c83a 	sub	r2,r2,r20
    d67c:	1545883a 	add	r2,r2,r21
    d680:	10800054 	ori	r2,r2,1
    d684:	e0c00017 	ldw	r3,0(fp)
    d688:	9d000215 	stw	r20,8(r19)
    d68c:	a0800115 	stw	r2,4(r20)
    d690:	a8c7883a 	add	r3,r21,r3
    d694:	e0c00015 	stw	r3,0(fp)
    d698:	84c00e26 	beq	r16,r19,d6d4 <_malloc_r+0x460>
    d69c:	018003c4 	movi	r6,15
    d6a0:	3580a72e 	bgeu	r6,r22,d940 <_malloc_r+0x6cc>
    d6a4:	81400117 	ldw	r5,4(r16)
    d6a8:	013ffe04 	movi	r4,-8
    d6ac:	b0bffd04 	addi	r2,r22,-12
    d6b0:	1104703a 	and	r2,r2,r4
    d6b4:	2900004c 	andi	r4,r5,1
    d6b8:	2088b03a 	or	r4,r4,r2
    d6bc:	81000115 	stw	r4,4(r16)
    d6c0:	01400144 	movi	r5,5
    d6c4:	8089883a 	add	r4,r16,r2
    d6c8:	21400115 	stw	r5,4(r4)
    d6cc:	21400215 	stw	r5,8(r4)
    d6d0:	3080cd36 	bltu	r6,r2,da08 <_malloc_r+0x794>
    d6d4:	008000f4 	movhi	r2,3
    d6d8:	10bf2504 	addi	r2,r2,-876
    d6dc:	11000017 	ldw	r4,0(r2)
    d6e0:	20c0012e 	bgeu	r4,r3,d6e8 <_malloc_r+0x474>
    d6e4:	10c00015 	stw	r3,0(r2)
    d6e8:	008000f4 	movhi	r2,3
    d6ec:	10bf2404 	addi	r2,r2,-880
    d6f0:	11000017 	ldw	r4,0(r2)
    d6f4:	9c000217 	ldw	r16,8(r19)
    d6f8:	20c0012e 	bgeu	r4,r3,d700 <_malloc_r+0x48c>
    d6fc:	10c00015 	stw	r3,0(r2)
    d700:	80c00117 	ldw	r3,4(r16)
    d704:	00bfff04 	movi	r2,-4
    d708:	1886703a 	and	r3,r3,r2
    d70c:	1c45c83a 	sub	r2,r3,r17
    d710:	1c400236 	bltu	r3,r17,d71c <_malloc_r+0x4a8>
    d714:	00c003c4 	movi	r3,15
    d718:	18800416 	blt	r3,r2,d72c <_malloc_r+0x4b8>
    d71c:	9009883a 	mov	r4,r18
    d720:	001e4dc0 	call	1e4dc <__malloc_unlock>
    d724:	0005883a 	mov	r2,zero
    d728:	003f7b06 	br	d518 <__alt_data_end+0xfc00d518>
    d72c:	88c00054 	ori	r3,r17,1
    d730:	80c00115 	stw	r3,4(r16)
    d734:	8463883a 	add	r17,r16,r17
    d738:	10800054 	ori	r2,r2,1
    d73c:	9c400215 	stw	r17,8(r19)
    d740:	88800115 	stw	r2,4(r17)
    d744:	9009883a 	mov	r4,r18
    d748:	001e4dc0 	call	1e4dc <__malloc_unlock>
    d74c:	80800204 	addi	r2,r16,8
    d750:	003f7106 	br	d518 <__alt_data_end+0xfc00d518>
    d754:	00c00504 	movi	r3,20
    d758:	18804a2e 	bgeu	r3,r2,d884 <_malloc_r+0x610>
    d75c:	00c01504 	movi	r3,84
    d760:	18806e36 	bltu	r3,r2,d91c <_malloc_r+0x6a8>
    d764:	8804d33a 	srli	r2,r17,12
    d768:	12001bc4 	addi	r8,r2,111
    d76c:	11c01b84 	addi	r7,r2,110
    d770:	4209883a 	add	r4,r8,r8
    d774:	003edd06 	br	d2ec <__alt_data_end+0xfc00d2ec>
    d778:	3804d27a 	srli	r2,r7,9
    d77c:	00c00104 	movi	r3,4
    d780:	1880442e 	bgeu	r3,r2,d894 <_malloc_r+0x620>
    d784:	00c00504 	movi	r3,20
    d788:	18808136 	bltu	r3,r2,d990 <_malloc_r+0x71c>
    d78c:	11401704 	addi	r5,r2,92
    d790:	10c016c4 	addi	r3,r2,91
    d794:	294b883a 	add	r5,r5,r5
    d798:	294b883a 	add	r5,r5,r5
    d79c:	294b883a 	add	r5,r5,r5
    d7a0:	994b883a 	add	r5,r19,r5
    d7a4:	28800017 	ldw	r2,0(r5)
    d7a8:	018000f4 	movhi	r6,3
    d7ac:	297ffe04 	addi	r5,r5,-8
    d7b0:	31a73804 	addi	r6,r6,-25376
    d7b4:	28806526 	beq	r5,r2,d94c <_malloc_r+0x6d8>
    d7b8:	01bfff04 	movi	r6,-4
    d7bc:	10c00117 	ldw	r3,4(r2)
    d7c0:	1986703a 	and	r3,r3,r6
    d7c4:	38c0022e 	bgeu	r7,r3,d7d0 <_malloc_r+0x55c>
    d7c8:	10800217 	ldw	r2,8(r2)
    d7cc:	28bffb1e 	bne	r5,r2,d7bc <__alt_data_end+0xfc00d7bc>
    d7d0:	11400317 	ldw	r5,12(r2)
    d7d4:	98c00117 	ldw	r3,4(r19)
    d7d8:	81400315 	stw	r5,12(r16)
    d7dc:	80800215 	stw	r2,8(r16)
    d7e0:	2c000215 	stw	r16,8(r5)
    d7e4:	14000315 	stw	r16,12(r2)
    d7e8:	003ef806 	br	d3cc <__alt_data_end+0xfc00d3cc>
    d7ec:	88c00054 	ori	r3,r17,1
    d7f0:	80c00115 	stw	r3,4(r16)
    d7f4:	8463883a 	add	r17,r16,r17
    d7f8:	34400515 	stw	r17,20(r6)
    d7fc:	34400415 	stw	r17,16(r6)
    d800:	10c00054 	ori	r3,r2,1
    d804:	8a000315 	stw	r8,12(r17)
    d808:	8a000215 	stw	r8,8(r17)
    d80c:	88c00115 	stw	r3,4(r17)
    d810:	88a3883a 	add	r17,r17,r2
    d814:	88800015 	stw	r2,0(r17)
    d818:	9009883a 	mov	r4,r18
    d81c:	001e4dc0 	call	1e4dc <__malloc_unlock>
    d820:	80800204 	addi	r2,r16,8
    d824:	003f3c06 	br	d518 <__alt_data_end+0xfc00d518>
    d828:	30c00117 	ldw	r3,4(r6)
    d82c:	003ee706 	br	d3cc <__alt_data_end+0xfc00d3cc>
    d830:	5ac00044 	addi	r11,r11,1
    d834:	588000cc 	andi	r2,r11,3
    d838:	31800204 	addi	r6,r6,8
    d83c:	103efd1e 	bne	r2,zero,d434 <__alt_data_end+0xfc00d434>
    d840:	00002406 	br	d8d4 <_malloc_r+0x660>
    d844:	14000317 	ldw	r16,12(r2)
    d848:	143f251e 	bne	r2,r16,d4e0 <__alt_data_end+0xfc00d4e0>
    d84c:	21000084 	addi	r4,r4,2
    d850:	003ebc06 	br	d344 <__alt_data_end+0xfc00d344>
    d854:	8085883a 	add	r2,r16,r2
    d858:	10c00117 	ldw	r3,4(r2)
    d85c:	81000317 	ldw	r4,12(r16)
    d860:	81400217 	ldw	r5,8(r16)
    d864:	18c00054 	ori	r3,r3,1
    d868:	10c00115 	stw	r3,4(r2)
    d86c:	29000315 	stw	r4,12(r5)
    d870:	21400215 	stw	r5,8(r4)
    d874:	9009883a 	mov	r4,r18
    d878:	001e4dc0 	call	1e4dc <__malloc_unlock>
    d87c:	80800204 	addi	r2,r16,8
    d880:	003f2506 	br	d518 <__alt_data_end+0xfc00d518>
    d884:	12001704 	addi	r8,r2,92
    d888:	11c016c4 	addi	r7,r2,91
    d88c:	4209883a 	add	r4,r8,r8
    d890:	003e9606 	br	d2ec <__alt_data_end+0xfc00d2ec>
    d894:	3804d1ba 	srli	r2,r7,6
    d898:	11400e44 	addi	r5,r2,57
    d89c:	10c00e04 	addi	r3,r2,56
    d8a0:	294b883a 	add	r5,r5,r5
    d8a4:	003fbc06 	br	d798 <__alt_data_end+0xfc00d798>
    d8a8:	84ff5926 	beq	r16,r19,d610 <__alt_data_end+0xfc00d610>
    d8ac:	008000f4 	movhi	r2,3
    d8b0:	10a73804 	addi	r2,r2,-25376
    d8b4:	14000217 	ldw	r16,8(r2)
    d8b8:	00bfff04 	movi	r2,-4
    d8bc:	80c00117 	ldw	r3,4(r16)
    d8c0:	1886703a 	and	r3,r3,r2
    d8c4:	003f9106 	br	d70c <__alt_data_end+0xfc00d70c>
    d8c8:	60800217 	ldw	r2,8(r12)
    d8cc:	213fffc4 	addi	r4,r4,-1
    d8d0:	1300651e 	bne	r2,r12,da68 <_malloc_r+0x7f4>
    d8d4:	208000cc 	andi	r2,r4,3
    d8d8:	633ffe04 	addi	r12,r12,-8
    d8dc:	103ffa1e 	bne	r2,zero,d8c8 <__alt_data_end+0xfc00d8c8>
    d8e0:	98800117 	ldw	r2,4(r19)
    d8e4:	0146303a 	nor	r3,zero,r5
    d8e8:	1884703a 	and	r2,r3,r2
    d8ec:	98800115 	stw	r2,4(r19)
    d8f0:	294b883a 	add	r5,r5,r5
    d8f4:	117f2836 	bltu	r2,r5,d598 <__alt_data_end+0xfc00d598>
    d8f8:	283f2726 	beq	r5,zero,d598 <__alt_data_end+0xfc00d598>
    d8fc:	2886703a 	and	r3,r5,r2
    d900:	5809883a 	mov	r4,r11
    d904:	183ec31e 	bne	r3,zero,d414 <__alt_data_end+0xfc00d414>
    d908:	294b883a 	add	r5,r5,r5
    d90c:	2886703a 	and	r3,r5,r2
    d910:	21000104 	addi	r4,r4,4
    d914:	183ffc26 	beq	r3,zero,d908 <__alt_data_end+0xfc00d908>
    d918:	003ebe06 	br	d414 <__alt_data_end+0xfc00d414>
    d91c:	00c05504 	movi	r3,340
    d920:	18801236 	bltu	r3,r2,d96c <_malloc_r+0x6f8>
    d924:	8804d3fa 	srli	r2,r17,15
    d928:	12001e04 	addi	r8,r2,120
    d92c:	11c01dc4 	addi	r7,r2,119
    d930:	4209883a 	add	r4,r8,r8
    d934:	003e6d06 	br	d2ec <__alt_data_end+0xfc00d2ec>
    d938:	00c40004 	movi	r3,4096
    d93c:	003f4606 	br	d658 <__alt_data_end+0xfc00d658>
    d940:	00800044 	movi	r2,1
    d944:	a0800115 	stw	r2,4(r20)
    d948:	003f7406 	br	d71c <__alt_data_end+0xfc00d71c>
    d94c:	1805d0ba 	srai	r2,r3,2
    d950:	01c00044 	movi	r7,1
    d954:	30c00117 	ldw	r3,4(r6)
    d958:	388e983a 	sll	r7,r7,r2
    d95c:	2805883a 	mov	r2,r5
    d960:	38c6b03a 	or	r3,r7,r3
    d964:	30c00115 	stw	r3,4(r6)
    d968:	003f9b06 	br	d7d8 <__alt_data_end+0xfc00d7d8>
    d96c:	00c15504 	movi	r3,1364
    d970:	18801a36 	bltu	r3,r2,d9dc <_malloc_r+0x768>
    d974:	8804d4ba 	srli	r2,r17,18
    d978:	12001f44 	addi	r8,r2,125
    d97c:	11c01f04 	addi	r7,r2,124
    d980:	4209883a 	add	r4,r8,r8
    d984:	003e5906 	br	d2ec <__alt_data_end+0xfc00d2ec>
    d988:	ad400404 	addi	r21,r21,16
    d98c:	003f1706 	br	d5ec <__alt_data_end+0xfc00d5ec>
    d990:	00c01504 	movi	r3,84
    d994:	18802336 	bltu	r3,r2,da24 <_malloc_r+0x7b0>
    d998:	3804d33a 	srli	r2,r7,12
    d99c:	11401bc4 	addi	r5,r2,111
    d9a0:	10c01b84 	addi	r3,r2,110
    d9a4:	294b883a 	add	r5,r5,r5
    d9a8:	003f7b06 	br	d798 <__alt_data_end+0xfc00d798>
    d9ac:	9c000217 	ldw	r16,8(r19)
    d9b0:	00bfff04 	movi	r2,-4
    d9b4:	80c00117 	ldw	r3,4(r16)
    d9b8:	1886703a 	and	r3,r3,r2
    d9bc:	003f5306 	br	d70c <__alt_data_end+0xfc00d70c>
    d9c0:	3083ffcc 	andi	r2,r6,4095
    d9c4:	103f181e 	bne	r2,zero,d628 <__alt_data_end+0xfc00d628>
    d9c8:	99000217 	ldw	r4,8(r19)
    d9cc:	b545883a 	add	r2,r22,r21
    d9d0:	10800054 	ori	r2,r2,1
    d9d4:	20800115 	stw	r2,4(r4)
    d9d8:	003f3e06 	br	d6d4 <__alt_data_end+0xfc00d6d4>
    d9dc:	01003f84 	movi	r4,254
    d9e0:	02001fc4 	movi	r8,127
    d9e4:	01c01f84 	movi	r7,126
    d9e8:	003e4006 	br	d2ec <__alt_data_end+0xfc00d2ec>
    d9ec:	008000f4 	movhi	r2,3
    d9f0:	10b29604 	addi	r2,r2,-13736
    d9f4:	15000015 	stw	r20,0(r2)
    d9f8:	003f1106 	br	d640 <__alt_data_end+0xfc00d640>
    d9fc:	00800044 	movi	r2,1
    da00:	002b883a 	mov	r21,zero
    da04:	003f1f06 	br	d684 <__alt_data_end+0xfc00d684>
    da08:	81400204 	addi	r5,r16,8
    da0c:	9009883a 	mov	r4,r18
    da10:	0014bd80 	call	14bd8 <_free_r>
    da14:	008000f4 	movhi	r2,3
    da18:	10bf7e04 	addi	r2,r2,-520
    da1c:	10c00017 	ldw	r3,0(r2)
    da20:	003f2c06 	br	d6d4 <__alt_data_end+0xfc00d6d4>
    da24:	00c05504 	movi	r3,340
    da28:	18800536 	bltu	r3,r2,da40 <_malloc_r+0x7cc>
    da2c:	3804d3fa 	srli	r2,r7,15
    da30:	11401e04 	addi	r5,r2,120
    da34:	10c01dc4 	addi	r3,r2,119
    da38:	294b883a 	add	r5,r5,r5
    da3c:	003f5606 	br	d798 <__alt_data_end+0xfc00d798>
    da40:	00c15504 	movi	r3,1364
    da44:	18800536 	bltu	r3,r2,da5c <_malloc_r+0x7e8>
    da48:	3804d4ba 	srli	r2,r7,18
    da4c:	11401f44 	addi	r5,r2,125
    da50:	10c01f04 	addi	r3,r2,124
    da54:	294b883a 	add	r5,r5,r5
    da58:	003f4f06 	br	d798 <__alt_data_end+0xfc00d798>
    da5c:	01403f84 	movi	r5,254
    da60:	00c01f84 	movi	r3,126
    da64:	003f4c06 	br	d798 <__alt_data_end+0xfc00d798>
    da68:	98800117 	ldw	r2,4(r19)
    da6c:	003fa006 	br	d8f0 <__alt_data_end+0xfc00d8f0>
    da70:	8808d0fa 	srli	r4,r17,3
    da74:	20800044 	addi	r2,r4,1
    da78:	1085883a 	add	r2,r2,r2
    da7c:	003e9006 	br	d4c0 <__alt_data_end+0xfc00d4c0>

0000da80 <memcpy>:
    da80:	defffd04 	addi	sp,sp,-12
    da84:	dfc00215 	stw	ra,8(sp)
    da88:	dc400115 	stw	r17,4(sp)
    da8c:	dc000015 	stw	r16,0(sp)
    da90:	00c003c4 	movi	r3,15
    da94:	2005883a 	mov	r2,r4
    da98:	1980452e 	bgeu	r3,r6,dbb0 <memcpy+0x130>
    da9c:	2906b03a 	or	r3,r5,r4
    daa0:	18c000cc 	andi	r3,r3,3
    daa4:	1800441e 	bne	r3,zero,dbb8 <memcpy+0x138>
    daa8:	347ffc04 	addi	r17,r6,-16
    daac:	8822d13a 	srli	r17,r17,4
    dab0:	28c00104 	addi	r3,r5,4
    dab4:	23400104 	addi	r13,r4,4
    dab8:	8820913a 	slli	r16,r17,4
    dabc:	2b000204 	addi	r12,r5,8
    dac0:	22c00204 	addi	r11,r4,8
    dac4:	84000504 	addi	r16,r16,20
    dac8:	2a800304 	addi	r10,r5,12
    dacc:	22400304 	addi	r9,r4,12
    dad0:	2c21883a 	add	r16,r5,r16
    dad4:	2811883a 	mov	r8,r5
    dad8:	200f883a 	mov	r7,r4
    dadc:	41000017 	ldw	r4,0(r8)
    dae0:	1fc00017 	ldw	ra,0(r3)
    dae4:	63c00017 	ldw	r15,0(r12)
    dae8:	39000015 	stw	r4,0(r7)
    daec:	53800017 	ldw	r14,0(r10)
    daf0:	6fc00015 	stw	ra,0(r13)
    daf4:	5bc00015 	stw	r15,0(r11)
    daf8:	4b800015 	stw	r14,0(r9)
    dafc:	18c00404 	addi	r3,r3,16
    db00:	39c00404 	addi	r7,r7,16
    db04:	42000404 	addi	r8,r8,16
    db08:	6b400404 	addi	r13,r13,16
    db0c:	63000404 	addi	r12,r12,16
    db10:	5ac00404 	addi	r11,r11,16
    db14:	52800404 	addi	r10,r10,16
    db18:	4a400404 	addi	r9,r9,16
    db1c:	1c3fef1e 	bne	r3,r16,dadc <__alt_data_end+0xfc00dadc>
    db20:	89c00044 	addi	r7,r17,1
    db24:	380e913a 	slli	r7,r7,4
    db28:	310003cc 	andi	r4,r6,15
    db2c:	02c000c4 	movi	r11,3
    db30:	11c7883a 	add	r3,r2,r7
    db34:	29cb883a 	add	r5,r5,r7
    db38:	5900212e 	bgeu	r11,r4,dbc0 <memcpy+0x140>
    db3c:	1813883a 	mov	r9,r3
    db40:	2811883a 	mov	r8,r5
    db44:	200f883a 	mov	r7,r4
    db48:	42800017 	ldw	r10,0(r8)
    db4c:	4a400104 	addi	r9,r9,4
    db50:	39ffff04 	addi	r7,r7,-4
    db54:	4abfff15 	stw	r10,-4(r9)
    db58:	42000104 	addi	r8,r8,4
    db5c:	59fffa36 	bltu	r11,r7,db48 <__alt_data_end+0xfc00db48>
    db60:	213fff04 	addi	r4,r4,-4
    db64:	2008d0ba 	srli	r4,r4,2
    db68:	318000cc 	andi	r6,r6,3
    db6c:	21000044 	addi	r4,r4,1
    db70:	2109883a 	add	r4,r4,r4
    db74:	2109883a 	add	r4,r4,r4
    db78:	1907883a 	add	r3,r3,r4
    db7c:	290b883a 	add	r5,r5,r4
    db80:	30000626 	beq	r6,zero,db9c <memcpy+0x11c>
    db84:	198d883a 	add	r6,r3,r6
    db88:	29c00003 	ldbu	r7,0(r5)
    db8c:	18c00044 	addi	r3,r3,1
    db90:	29400044 	addi	r5,r5,1
    db94:	19ffffc5 	stb	r7,-1(r3)
    db98:	19bffb1e 	bne	r3,r6,db88 <__alt_data_end+0xfc00db88>
    db9c:	dfc00217 	ldw	ra,8(sp)
    dba0:	dc400117 	ldw	r17,4(sp)
    dba4:	dc000017 	ldw	r16,0(sp)
    dba8:	dec00304 	addi	sp,sp,12
    dbac:	f800283a 	ret
    dbb0:	2007883a 	mov	r3,r4
    dbb4:	003ff206 	br	db80 <__alt_data_end+0xfc00db80>
    dbb8:	2007883a 	mov	r3,r4
    dbbc:	003ff106 	br	db84 <__alt_data_end+0xfc00db84>
    dbc0:	200d883a 	mov	r6,r4
    dbc4:	003fee06 	br	db80 <__alt_data_end+0xfc00db80>

0000dbc8 <memset>:
    dbc8:	20c000cc 	andi	r3,r4,3
    dbcc:	2005883a 	mov	r2,r4
    dbd0:	18004426 	beq	r3,zero,dce4 <memset+0x11c>
    dbd4:	31ffffc4 	addi	r7,r6,-1
    dbd8:	30004026 	beq	r6,zero,dcdc <memset+0x114>
    dbdc:	2813883a 	mov	r9,r5
    dbe0:	200d883a 	mov	r6,r4
    dbe4:	2007883a 	mov	r3,r4
    dbe8:	00000406 	br	dbfc <memset+0x34>
    dbec:	3a3fffc4 	addi	r8,r7,-1
    dbf0:	31800044 	addi	r6,r6,1
    dbf4:	38003926 	beq	r7,zero,dcdc <memset+0x114>
    dbf8:	400f883a 	mov	r7,r8
    dbfc:	18c00044 	addi	r3,r3,1
    dc00:	32400005 	stb	r9,0(r6)
    dc04:	1a0000cc 	andi	r8,r3,3
    dc08:	403ff81e 	bne	r8,zero,dbec <__alt_data_end+0xfc00dbec>
    dc0c:	010000c4 	movi	r4,3
    dc10:	21c02d2e 	bgeu	r4,r7,dcc8 <memset+0x100>
    dc14:	29003fcc 	andi	r4,r5,255
    dc18:	200c923a 	slli	r6,r4,8
    dc1c:	3108b03a 	or	r4,r6,r4
    dc20:	200c943a 	slli	r6,r4,16
    dc24:	218cb03a 	or	r6,r4,r6
    dc28:	010003c4 	movi	r4,15
    dc2c:	21c0182e 	bgeu	r4,r7,dc90 <memset+0xc8>
    dc30:	3b3ffc04 	addi	r12,r7,-16
    dc34:	6018d13a 	srli	r12,r12,4
    dc38:	1a000104 	addi	r8,r3,4
    dc3c:	1ac00204 	addi	r11,r3,8
    dc40:	6008913a 	slli	r4,r12,4
    dc44:	1a800304 	addi	r10,r3,12
    dc48:	1813883a 	mov	r9,r3
    dc4c:	21000504 	addi	r4,r4,20
    dc50:	1909883a 	add	r4,r3,r4
    dc54:	49800015 	stw	r6,0(r9)
    dc58:	41800015 	stw	r6,0(r8)
    dc5c:	59800015 	stw	r6,0(r11)
    dc60:	51800015 	stw	r6,0(r10)
    dc64:	42000404 	addi	r8,r8,16
    dc68:	4a400404 	addi	r9,r9,16
    dc6c:	5ac00404 	addi	r11,r11,16
    dc70:	52800404 	addi	r10,r10,16
    dc74:	413ff71e 	bne	r8,r4,dc54 <__alt_data_end+0xfc00dc54>
    dc78:	63000044 	addi	r12,r12,1
    dc7c:	6018913a 	slli	r12,r12,4
    dc80:	39c003cc 	andi	r7,r7,15
    dc84:	010000c4 	movi	r4,3
    dc88:	1b07883a 	add	r3,r3,r12
    dc8c:	21c00e2e 	bgeu	r4,r7,dcc8 <memset+0x100>
    dc90:	1813883a 	mov	r9,r3
    dc94:	3811883a 	mov	r8,r7
    dc98:	010000c4 	movi	r4,3
    dc9c:	49800015 	stw	r6,0(r9)
    dca0:	423fff04 	addi	r8,r8,-4
    dca4:	4a400104 	addi	r9,r9,4
    dca8:	223ffc36 	bltu	r4,r8,dc9c <__alt_data_end+0xfc00dc9c>
    dcac:	393fff04 	addi	r4,r7,-4
    dcb0:	2008d0ba 	srli	r4,r4,2
    dcb4:	39c000cc 	andi	r7,r7,3
    dcb8:	21000044 	addi	r4,r4,1
    dcbc:	2109883a 	add	r4,r4,r4
    dcc0:	2109883a 	add	r4,r4,r4
    dcc4:	1907883a 	add	r3,r3,r4
    dcc8:	38000526 	beq	r7,zero,dce0 <memset+0x118>
    dccc:	19cf883a 	add	r7,r3,r7
    dcd0:	19400005 	stb	r5,0(r3)
    dcd4:	18c00044 	addi	r3,r3,1
    dcd8:	38fffd1e 	bne	r7,r3,dcd0 <__alt_data_end+0xfc00dcd0>
    dcdc:	f800283a 	ret
    dce0:	f800283a 	ret
    dce4:	2007883a 	mov	r3,r4
    dce8:	300f883a 	mov	r7,r6
    dcec:	003fc706 	br	dc0c <__alt_data_end+0xfc00dc0c>

0000dcf0 <_printf_r>:
    dcf0:	defffd04 	addi	sp,sp,-12
    dcf4:	2805883a 	mov	r2,r5
    dcf8:	dfc00015 	stw	ra,0(sp)
    dcfc:	d9800115 	stw	r6,4(sp)
    dd00:	d9c00215 	stw	r7,8(sp)
    dd04:	21400217 	ldw	r5,8(r4)
    dd08:	d9c00104 	addi	r7,sp,4
    dd0c:	100d883a 	mov	r6,r2
    dd10:	00106a40 	call	106a4 <___vfprintf_internal_r>
    dd14:	dfc00017 	ldw	ra,0(sp)
    dd18:	dec00304 	addi	sp,sp,12
    dd1c:	f800283a 	ret

0000dd20 <printf>:
    dd20:	defffc04 	addi	sp,sp,-16
    dd24:	dfc00015 	stw	ra,0(sp)
    dd28:	d9400115 	stw	r5,4(sp)
    dd2c:	d9800215 	stw	r6,8(sp)
    dd30:	d9c00315 	stw	r7,12(sp)
    dd34:	008000f4 	movhi	r2,3
    dd38:	10b29504 	addi	r2,r2,-13740
    dd3c:	10800017 	ldw	r2,0(r2)
    dd40:	200b883a 	mov	r5,r4
    dd44:	d9800104 	addi	r6,sp,4
    dd48:	11000217 	ldw	r4,8(r2)
    dd4c:	00129800 	call	12980 <__vfprintf_internal>
    dd50:	dfc00017 	ldw	ra,0(sp)
    dd54:	dec00404 	addi	sp,sp,16
    dd58:	f800283a 	ret

0000dd5c <_putchar_r>:
    dd5c:	21800217 	ldw	r6,8(r4)
    dd60:	0016ac81 	jmpi	16ac8 <_putc_r>

0000dd64 <putchar>:
    dd64:	008000f4 	movhi	r2,3
    dd68:	10b29504 	addi	r2,r2,-13740
    dd6c:	200b883a 	mov	r5,r4
    dd70:	11000017 	ldw	r4,0(r2)
    dd74:	21800217 	ldw	r6,8(r4)
    dd78:	0016ac81 	jmpi	16ac8 <_putc_r>

0000dd7c <_puts_r>:
    dd7c:	defff604 	addi	sp,sp,-40
    dd80:	dc000715 	stw	r16,28(sp)
    dd84:	2021883a 	mov	r16,r4
    dd88:	2809883a 	mov	r4,r5
    dd8c:	dc400815 	stw	r17,32(sp)
    dd90:	dfc00915 	stw	ra,36(sp)
    dd94:	2823883a 	mov	r17,r5
    dd98:	000e3480 	call	e348 <strlen>
    dd9c:	10c00044 	addi	r3,r2,1
    dda0:	d8800115 	stw	r2,4(sp)
    dda4:	008000f4 	movhi	r2,3
    dda8:	10a55504 	addi	r2,r2,-27308
    ddac:	d8800215 	stw	r2,8(sp)
    ddb0:	00800044 	movi	r2,1
    ddb4:	d8800315 	stw	r2,12(sp)
    ddb8:	00800084 	movi	r2,2
    ddbc:	dc400015 	stw	r17,0(sp)
    ddc0:	d8c00615 	stw	r3,24(sp)
    ddc4:	dec00415 	stw	sp,16(sp)
    ddc8:	d8800515 	stw	r2,20(sp)
    ddcc:	80000226 	beq	r16,zero,ddd8 <_puts_r+0x5c>
    ddd0:	80800e17 	ldw	r2,56(r16)
    ddd4:	10001426 	beq	r2,zero,de28 <_puts_r+0xac>
    ddd8:	81400217 	ldw	r5,8(r16)
    dddc:	2880030b 	ldhu	r2,12(r5)
    dde0:	10c8000c 	andi	r3,r2,8192
    dde4:	1800061e 	bne	r3,zero,de00 <_puts_r+0x84>
    dde8:	29001917 	ldw	r4,100(r5)
    ddec:	00f7ffc4 	movi	r3,-8193
    ddf0:	10880014 	ori	r2,r2,8192
    ddf4:	20c6703a 	and	r3,r4,r3
    ddf8:	2880030d 	sth	r2,12(r5)
    ddfc:	28c01915 	stw	r3,100(r5)
    de00:	d9800404 	addi	r6,sp,16
    de04:	8009883a 	mov	r4,r16
    de08:	0014ee80 	call	14ee8 <__sfvwrite_r>
    de0c:	1000091e 	bne	r2,zero,de34 <_puts_r+0xb8>
    de10:	00800284 	movi	r2,10
    de14:	dfc00917 	ldw	ra,36(sp)
    de18:	dc400817 	ldw	r17,32(sp)
    de1c:	dc000717 	ldw	r16,28(sp)
    de20:	dec00a04 	addi	sp,sp,40
    de24:	f800283a 	ret
    de28:	8009883a 	mov	r4,r16
    de2c:	0014a640 	call	14a64 <__sinit>
    de30:	003fe906 	br	ddd8 <__alt_data_end+0xfc00ddd8>
    de34:	00bfffc4 	movi	r2,-1
    de38:	003ff606 	br	de14 <__alt_data_end+0xfc00de14>

0000de3c <puts>:
    de3c:	008000f4 	movhi	r2,3
    de40:	10b29504 	addi	r2,r2,-13740
    de44:	200b883a 	mov	r5,r4
    de48:	11000017 	ldw	r4,0(r2)
    de4c:	000dd7c1 	jmpi	dd7c <_puts_r>

0000de50 <_sbrk_r>:
    de50:	defffd04 	addi	sp,sp,-12
    de54:	dc000015 	stw	r16,0(sp)
    de58:	040000f4 	movhi	r16,3
    de5c:	dc400115 	stw	r17,4(sp)
    de60:	843f2704 	addi	r16,r16,-868
    de64:	2023883a 	mov	r17,r4
    de68:	2809883a 	mov	r4,r5
    de6c:	dfc00215 	stw	ra,8(sp)
    de70:	80000015 	stw	zero,0(r16)
    de74:	001e6c40 	call	1e6c4 <sbrk>
    de78:	00ffffc4 	movi	r3,-1
    de7c:	10c00526 	beq	r2,r3,de94 <_sbrk_r+0x44>
    de80:	dfc00217 	ldw	ra,8(sp)
    de84:	dc400117 	ldw	r17,4(sp)
    de88:	dc000017 	ldw	r16,0(sp)
    de8c:	dec00304 	addi	sp,sp,12
    de90:	f800283a 	ret
    de94:	80c00017 	ldw	r3,0(r16)
    de98:	183ff926 	beq	r3,zero,de80 <__alt_data_end+0xfc00de80>
    de9c:	88c00015 	stw	r3,0(r17)
    dea0:	003ff706 	br	de80 <__alt_data_end+0xfc00de80>

0000dea4 <_init_signal_r>:
    dea4:	2080b717 	ldw	r2,732(r4)
    dea8:	10000226 	beq	r2,zero,deb4 <_init_signal_r+0x10>
    deac:	0005883a 	mov	r2,zero
    deb0:	f800283a 	ret
    deb4:	defffe04 	addi	sp,sp,-8
    deb8:	01402004 	movi	r5,128
    debc:	dc000015 	stw	r16,0(sp)
    dec0:	dfc00115 	stw	ra,4(sp)
    dec4:	2021883a 	mov	r16,r4
    dec8:	000d2740 	call	d274 <_malloc_r>
    decc:	8080b715 	stw	r2,732(r16)
    ded0:	10000d26 	beq	r2,zero,df08 <_init_signal_r+0x64>
    ded4:	0007883a 	mov	r3,zero
    ded8:	01002004 	movi	r4,128
    dedc:	00000106 	br	dee4 <_init_signal_r+0x40>
    dee0:	8080b717 	ldw	r2,732(r16)
    dee4:	10c5883a 	add	r2,r2,r3
    dee8:	10000015 	stw	zero,0(r2)
    deec:	18c00104 	addi	r3,r3,4
    def0:	193ffb1e 	bne	r3,r4,dee0 <__alt_data_end+0xfc00dee0>
    def4:	0005883a 	mov	r2,zero
    def8:	dfc00117 	ldw	ra,4(sp)
    defc:	dc000017 	ldw	r16,0(sp)
    df00:	dec00204 	addi	sp,sp,8
    df04:	f800283a 	ret
    df08:	00bfffc4 	movi	r2,-1
    df0c:	003ffa06 	br	def8 <__alt_data_end+0xfc00def8>

0000df10 <_signal_r>:
    df10:	00c007c4 	movi	r3,31
    df14:	19401536 	bltu	r3,r5,df6c <_signal_r+0x5c>
    df18:	2080b717 	ldw	r2,732(r4)
    df1c:	defffc04 	addi	sp,sp,-16
    df20:	dc800215 	stw	r18,8(sp)
    df24:	dc400115 	stw	r17,4(sp)
    df28:	dc000015 	stw	r16,0(sp)
    df2c:	dfc00315 	stw	ra,12(sp)
    df30:	3023883a 	mov	r17,r6
    df34:	2021883a 	mov	r16,r4
    df38:	2825883a 	mov	r18,r5
    df3c:	10000f26 	beq	r2,zero,df7c <_signal_r+0x6c>
    df40:	948b883a 	add	r5,r18,r18
    df44:	294b883a 	add	r5,r5,r5
    df48:	114b883a 	add	r5,r2,r5
    df4c:	28800017 	ldw	r2,0(r5)
    df50:	2c400015 	stw	r17,0(r5)
    df54:	dfc00317 	ldw	ra,12(sp)
    df58:	dc800217 	ldw	r18,8(sp)
    df5c:	dc400117 	ldw	r17,4(sp)
    df60:	dc000017 	ldw	r16,0(sp)
    df64:	dec00404 	addi	sp,sp,16
    df68:	f800283a 	ret
    df6c:	00c00584 	movi	r3,22
    df70:	20c00015 	stw	r3,0(r4)
    df74:	00bfffc4 	movi	r2,-1
    df78:	f800283a 	ret
    df7c:	000dea40 	call	dea4 <_init_signal_r>
    df80:	1000021e 	bne	r2,zero,df8c <_signal_r+0x7c>
    df84:	8080b717 	ldw	r2,732(r16)
    df88:	003fed06 	br	df40 <__alt_data_end+0xfc00df40>
    df8c:	00bfffc4 	movi	r2,-1
    df90:	003ff006 	br	df54 <__alt_data_end+0xfc00df54>

0000df94 <_raise_r>:
    df94:	008007c4 	movi	r2,31
    df98:	11402936 	bltu	r2,r5,e040 <_raise_r+0xac>
    df9c:	20c0b717 	ldw	r3,732(r4)
    dfa0:	defffd04 	addi	sp,sp,-12
    dfa4:	dc400115 	stw	r17,4(sp)
    dfa8:	dc000015 	stw	r16,0(sp)
    dfac:	dfc00215 	stw	ra,8(sp)
    dfb0:	2021883a 	mov	r16,r4
    dfb4:	2823883a 	mov	r17,r5
    dfb8:	18001726 	beq	r3,zero,e018 <_raise_r+0x84>
    dfbc:	2945883a 	add	r2,r5,r5
    dfc0:	1085883a 	add	r2,r2,r2
    dfc4:	1887883a 	add	r3,r3,r2
    dfc8:	19800017 	ldw	r6,0(r3)
    dfcc:	30001226 	beq	r6,zero,e018 <_raise_r+0x84>
    dfd0:	00800044 	movi	r2,1
    dfd4:	30800e26 	beq	r6,r2,e010 <_raise_r+0x7c>
    dfd8:	013fffc4 	movi	r4,-1
    dfdc:	31000926 	beq	r6,r4,e004 <_raise_r+0x70>
    dfe0:	18000015 	stw	zero,0(r3)
    dfe4:	2809883a 	mov	r4,r5
    dfe8:	303ee83a 	callr	r6
    dfec:	0005883a 	mov	r2,zero
    dff0:	dfc00217 	ldw	ra,8(sp)
    dff4:	dc400117 	ldw	r17,4(sp)
    dff8:	dc000017 	ldw	r16,0(sp)
    dffc:	dec00304 	addi	sp,sp,12
    e000:	f800283a 	ret
    e004:	00c00584 	movi	r3,22
    e008:	80c00015 	stw	r3,0(r16)
    e00c:	003ff806 	br	dff0 <__alt_data_end+0xfc00dff0>
    e010:	0005883a 	mov	r2,zero
    e014:	003ff606 	br	dff0 <__alt_data_end+0xfc00dff0>
    e018:	8009883a 	mov	r4,r16
    e01c:	000e1a40 	call	e1a4 <_getpid_r>
    e020:	880d883a 	mov	r6,r17
    e024:	100b883a 	mov	r5,r2
    e028:	8009883a 	mov	r4,r16
    e02c:	dfc00217 	ldw	ra,8(sp)
    e030:	dc400117 	ldw	r17,4(sp)
    e034:	dc000017 	ldw	r16,0(sp)
    e038:	dec00304 	addi	sp,sp,12
    e03c:	000e1481 	jmpi	e148 <_kill_r>
    e040:	00800584 	movi	r2,22
    e044:	20800015 	stw	r2,0(r4)
    e048:	00bfffc4 	movi	r2,-1
    e04c:	f800283a 	ret

0000e050 <__sigtramp_r>:
    e050:	008007c4 	movi	r2,31
    e054:	11402436 	bltu	r2,r5,e0e8 <__sigtramp_r+0x98>
    e058:	20c0b717 	ldw	r3,732(r4)
    e05c:	defffd04 	addi	sp,sp,-12
    e060:	dc400115 	stw	r17,4(sp)
    e064:	dc000015 	stw	r16,0(sp)
    e068:	dfc00215 	stw	ra,8(sp)
    e06c:	2021883a 	mov	r16,r4
    e070:	2823883a 	mov	r17,r5
    e074:	18001826 	beq	r3,zero,e0d8 <__sigtramp_r+0x88>
    e078:	8c45883a 	add	r2,r17,r17
    e07c:	1085883a 	add	r2,r2,r2
    e080:	1885883a 	add	r2,r3,r2
    e084:	10c00017 	ldw	r3,0(r2)
    e088:	18001126 	beq	r3,zero,e0d0 <__sigtramp_r+0x80>
    e08c:	013fffc4 	movi	r4,-1
    e090:	19000d26 	beq	r3,r4,e0c8 <__sigtramp_r+0x78>
    e094:	01000044 	movi	r4,1
    e098:	19000926 	beq	r3,r4,e0c0 <__sigtramp_r+0x70>
    e09c:	10000015 	stw	zero,0(r2)
    e0a0:	8809883a 	mov	r4,r17
    e0a4:	183ee83a 	callr	r3
    e0a8:	0005883a 	mov	r2,zero
    e0ac:	dfc00217 	ldw	ra,8(sp)
    e0b0:	dc400117 	ldw	r17,4(sp)
    e0b4:	dc000017 	ldw	r16,0(sp)
    e0b8:	dec00304 	addi	sp,sp,12
    e0bc:	f800283a 	ret
    e0c0:	008000c4 	movi	r2,3
    e0c4:	003ff906 	br	e0ac <__alt_data_end+0xfc00e0ac>
    e0c8:	00800084 	movi	r2,2
    e0cc:	003ff706 	br	e0ac <__alt_data_end+0xfc00e0ac>
    e0d0:	00800044 	movi	r2,1
    e0d4:	003ff506 	br	e0ac <__alt_data_end+0xfc00e0ac>
    e0d8:	000dea40 	call	dea4 <_init_signal_r>
    e0dc:	1000041e 	bne	r2,zero,e0f0 <__sigtramp_r+0xa0>
    e0e0:	80c0b717 	ldw	r3,732(r16)
    e0e4:	003fe406 	br	e078 <__alt_data_end+0xfc00e078>
    e0e8:	00bfffc4 	movi	r2,-1
    e0ec:	f800283a 	ret
    e0f0:	00bfffc4 	movi	r2,-1
    e0f4:	003fed06 	br	e0ac <__alt_data_end+0xfc00e0ac>

0000e0f8 <raise>:
    e0f8:	008000f4 	movhi	r2,3
    e0fc:	10b29504 	addi	r2,r2,-13740
    e100:	200b883a 	mov	r5,r4
    e104:	11000017 	ldw	r4,0(r2)
    e108:	000df941 	jmpi	df94 <_raise_r>

0000e10c <signal>:
    e10c:	008000f4 	movhi	r2,3
    e110:	10b29504 	addi	r2,r2,-13740
    e114:	280d883a 	mov	r6,r5
    e118:	200b883a 	mov	r5,r4
    e11c:	11000017 	ldw	r4,0(r2)
    e120:	000df101 	jmpi	df10 <_signal_r>

0000e124 <_init_signal>:
    e124:	008000f4 	movhi	r2,3
    e128:	10b29504 	addi	r2,r2,-13740
    e12c:	11000017 	ldw	r4,0(r2)
    e130:	000dea41 	jmpi	dea4 <_init_signal_r>

0000e134 <__sigtramp>:
    e134:	008000f4 	movhi	r2,3
    e138:	10b29504 	addi	r2,r2,-13740
    e13c:	200b883a 	mov	r5,r4
    e140:	11000017 	ldw	r4,0(r2)
    e144:	000e0501 	jmpi	e050 <__sigtramp_r>

0000e148 <_kill_r>:
    e148:	defffd04 	addi	sp,sp,-12
    e14c:	2805883a 	mov	r2,r5
    e150:	dc000015 	stw	r16,0(sp)
    e154:	040000f4 	movhi	r16,3
    e158:	dc400115 	stw	r17,4(sp)
    e15c:	843f2704 	addi	r16,r16,-868
    e160:	2023883a 	mov	r17,r4
    e164:	300b883a 	mov	r5,r6
    e168:	1009883a 	mov	r4,r2
    e16c:	dfc00215 	stw	ra,8(sp)
    e170:	80000015 	stw	zero,0(r16)
    e174:	001e1080 	call	1e108 <kill>
    e178:	00ffffc4 	movi	r3,-1
    e17c:	10c00526 	beq	r2,r3,e194 <_kill_r+0x4c>
    e180:	dfc00217 	ldw	ra,8(sp)
    e184:	dc400117 	ldw	r17,4(sp)
    e188:	dc000017 	ldw	r16,0(sp)
    e18c:	dec00304 	addi	sp,sp,12
    e190:	f800283a 	ret
    e194:	80c00017 	ldw	r3,0(r16)
    e198:	183ff926 	beq	r3,zero,e180 <__alt_data_end+0xfc00e180>
    e19c:	88c00015 	stw	r3,0(r17)
    e1a0:	003ff706 	br	e180 <__alt_data_end+0xfc00e180>

0000e1a4 <_getpid_r>:
    e1a4:	001dfc41 	jmpi	1dfc4 <getpid>

0000e1a8 <_sprintf_r>:
    e1a8:	deffe404 	addi	sp,sp,-112
    e1ac:	2807883a 	mov	r3,r5
    e1b0:	dfc01a15 	stw	ra,104(sp)
    e1b4:	d9c01b15 	stw	r7,108(sp)
    e1b8:	00a00034 	movhi	r2,32768
    e1bc:	10bfffc4 	addi	r2,r2,-1
    e1c0:	02008204 	movi	r8,520
    e1c4:	d8800215 	stw	r2,8(sp)
    e1c8:	d8800515 	stw	r2,20(sp)
    e1cc:	d9c01b04 	addi	r7,sp,108
    e1d0:	d80b883a 	mov	r5,sp
    e1d4:	00bfffc4 	movi	r2,-1
    e1d8:	d8c00015 	stw	r3,0(sp)
    e1dc:	d8c00415 	stw	r3,16(sp)
    e1e0:	da00030d 	sth	r8,12(sp)
    e1e4:	d880038d 	sth	r2,14(sp)
    e1e8:	000e3e00 	call	e3e0 <___svfprintf_internal_r>
    e1ec:	d8c00017 	ldw	r3,0(sp)
    e1f0:	18000005 	stb	zero,0(r3)
    e1f4:	dfc01a17 	ldw	ra,104(sp)
    e1f8:	dec01c04 	addi	sp,sp,112
    e1fc:	f800283a 	ret

0000e200 <sprintf>:
    e200:	deffe304 	addi	sp,sp,-116
    e204:	2007883a 	mov	r3,r4
    e208:	dfc01a15 	stw	ra,104(sp)
    e20c:	d9801b15 	stw	r6,108(sp)
    e210:	d9c01c15 	stw	r7,112(sp)
    e214:	010000f4 	movhi	r4,3
    e218:	21329504 	addi	r4,r4,-13740
    e21c:	21000017 	ldw	r4,0(r4)
    e220:	00a00034 	movhi	r2,32768
    e224:	10bfffc4 	addi	r2,r2,-1
    e228:	280d883a 	mov	r6,r5
    e22c:	02008204 	movi	r8,520
    e230:	d8800215 	stw	r2,8(sp)
    e234:	d8800515 	stw	r2,20(sp)
    e238:	d9c01b04 	addi	r7,sp,108
    e23c:	d80b883a 	mov	r5,sp
    e240:	00bfffc4 	movi	r2,-1
    e244:	d8c00015 	stw	r3,0(sp)
    e248:	d8c00415 	stw	r3,16(sp)
    e24c:	da00030d 	sth	r8,12(sp)
    e250:	d880038d 	sth	r2,14(sp)
    e254:	000e3e00 	call	e3e0 <___svfprintf_internal_r>
    e258:	d8c00017 	ldw	r3,0(sp)
    e25c:	18000005 	stb	zero,0(r3)
    e260:	dfc01a17 	ldw	ra,104(sp)
    e264:	dec01d04 	addi	sp,sp,116
    e268:	f800283a 	ret

0000e26c <strcmp>:
    e26c:	2144b03a 	or	r2,r4,r5
    e270:	108000cc 	andi	r2,r2,3
    e274:	1000171e 	bne	r2,zero,e2d4 <strcmp+0x68>
    e278:	20800017 	ldw	r2,0(r4)
    e27c:	28c00017 	ldw	r3,0(r5)
    e280:	10c0141e 	bne	r2,r3,e2d4 <strcmp+0x68>
    e284:	027fbff4 	movhi	r9,65279
    e288:	4a7fbfc4 	addi	r9,r9,-257
    e28c:	0086303a 	nor	r3,zero,r2
    e290:	02202074 	movhi	r8,32897
    e294:	1245883a 	add	r2,r2,r9
    e298:	42202004 	addi	r8,r8,-32640
    e29c:	10c4703a 	and	r2,r2,r3
    e2a0:	1204703a 	and	r2,r2,r8
    e2a4:	10000226 	beq	r2,zero,e2b0 <strcmp+0x44>
    e2a8:	00002306 	br	e338 <strcmp+0xcc>
    e2ac:	1000221e 	bne	r2,zero,e338 <strcmp+0xcc>
    e2b0:	21000104 	addi	r4,r4,4
    e2b4:	20c00017 	ldw	r3,0(r4)
    e2b8:	29400104 	addi	r5,r5,4
    e2bc:	29800017 	ldw	r6,0(r5)
    e2c0:	1a4f883a 	add	r7,r3,r9
    e2c4:	00c4303a 	nor	r2,zero,r3
    e2c8:	3884703a 	and	r2,r7,r2
    e2cc:	1204703a 	and	r2,r2,r8
    e2d0:	19bff626 	beq	r3,r6,e2ac <__alt_data_end+0xfc00e2ac>
    e2d4:	20800003 	ldbu	r2,0(r4)
    e2d8:	10c03fcc 	andi	r3,r2,255
    e2dc:	18c0201c 	xori	r3,r3,128
    e2e0:	18ffe004 	addi	r3,r3,-128
    e2e4:	18000c26 	beq	r3,zero,e318 <strcmp+0xac>
    e2e8:	29800007 	ldb	r6,0(r5)
    e2ec:	19800326 	beq	r3,r6,e2fc <strcmp+0x90>
    e2f0:	00001306 	br	e340 <strcmp+0xd4>
    e2f4:	29800007 	ldb	r6,0(r5)
    e2f8:	11800b1e 	bne	r2,r6,e328 <strcmp+0xbc>
    e2fc:	21000044 	addi	r4,r4,1
    e300:	20c00003 	ldbu	r3,0(r4)
    e304:	29400044 	addi	r5,r5,1
    e308:	18803fcc 	andi	r2,r3,255
    e30c:	1080201c 	xori	r2,r2,128
    e310:	10bfe004 	addi	r2,r2,-128
    e314:	103ff71e 	bne	r2,zero,e2f4 <__alt_data_end+0xfc00e2f4>
    e318:	0007883a 	mov	r3,zero
    e31c:	28800003 	ldbu	r2,0(r5)
    e320:	1885c83a 	sub	r2,r3,r2
    e324:	f800283a 	ret
    e328:	28800003 	ldbu	r2,0(r5)
    e32c:	18c03fcc 	andi	r3,r3,255
    e330:	1885c83a 	sub	r2,r3,r2
    e334:	f800283a 	ret
    e338:	0005883a 	mov	r2,zero
    e33c:	f800283a 	ret
    e340:	10c03fcc 	andi	r3,r2,255
    e344:	003ff506 	br	e31c <__alt_data_end+0xfc00e31c>

0000e348 <strlen>:
    e348:	208000cc 	andi	r2,r4,3
    e34c:	10002026 	beq	r2,zero,e3d0 <strlen+0x88>
    e350:	20800007 	ldb	r2,0(r4)
    e354:	10002026 	beq	r2,zero,e3d8 <strlen+0x90>
    e358:	2005883a 	mov	r2,r4
    e35c:	00000206 	br	e368 <strlen+0x20>
    e360:	10c00007 	ldb	r3,0(r2)
    e364:	18001826 	beq	r3,zero,e3c8 <strlen+0x80>
    e368:	10800044 	addi	r2,r2,1
    e36c:	10c000cc 	andi	r3,r2,3
    e370:	183ffb1e 	bne	r3,zero,e360 <__alt_data_end+0xfc00e360>
    e374:	10c00017 	ldw	r3,0(r2)
    e378:	01ffbff4 	movhi	r7,65279
    e37c:	39ffbfc4 	addi	r7,r7,-257
    e380:	00ca303a 	nor	r5,zero,r3
    e384:	01a02074 	movhi	r6,32897
    e388:	19c7883a 	add	r3,r3,r7
    e38c:	31a02004 	addi	r6,r6,-32640
    e390:	1946703a 	and	r3,r3,r5
    e394:	1986703a 	and	r3,r3,r6
    e398:	1800091e 	bne	r3,zero,e3c0 <strlen+0x78>
    e39c:	10800104 	addi	r2,r2,4
    e3a0:	10c00017 	ldw	r3,0(r2)
    e3a4:	19cb883a 	add	r5,r3,r7
    e3a8:	00c6303a 	nor	r3,zero,r3
    e3ac:	28c6703a 	and	r3,r5,r3
    e3b0:	1986703a 	and	r3,r3,r6
    e3b4:	183ff926 	beq	r3,zero,e39c <__alt_data_end+0xfc00e39c>
    e3b8:	00000106 	br	e3c0 <strlen+0x78>
    e3bc:	10800044 	addi	r2,r2,1
    e3c0:	10c00007 	ldb	r3,0(r2)
    e3c4:	183ffd1e 	bne	r3,zero,e3bc <__alt_data_end+0xfc00e3bc>
    e3c8:	1105c83a 	sub	r2,r2,r4
    e3cc:	f800283a 	ret
    e3d0:	2005883a 	mov	r2,r4
    e3d4:	003fe706 	br	e374 <__alt_data_end+0xfc00e374>
    e3d8:	0005883a 	mov	r2,zero
    e3dc:	f800283a 	ret

0000e3e0 <___svfprintf_internal_r>:
    e3e0:	deffb704 	addi	sp,sp,-292
    e3e4:	dfc04815 	stw	ra,288(sp)
    e3e8:	ddc04615 	stw	r23,280(sp)
    e3ec:	d9402d15 	stw	r5,180(sp)
    e3f0:	d9003915 	stw	r4,228(sp)
    e3f4:	302f883a 	mov	r23,r6
    e3f8:	d9c02e15 	stw	r7,184(sp)
    e3fc:	df004715 	stw	fp,284(sp)
    e400:	dd804515 	stw	r22,276(sp)
    e404:	dd404415 	stw	r21,272(sp)
    e408:	dd004315 	stw	r20,268(sp)
    e40c:	dcc04215 	stw	r19,264(sp)
    e410:	dc804115 	stw	r18,260(sp)
    e414:	dc404015 	stw	r17,256(sp)
    e418:	dc003f15 	stw	r16,252(sp)
    e41c:	00155e40 	call	155e4 <_localeconv_r>
    e420:	10800017 	ldw	r2,0(r2)
    e424:	1009883a 	mov	r4,r2
    e428:	d8803415 	stw	r2,208(sp)
    e42c:	000e3480 	call	e348 <strlen>
    e430:	d8c02d17 	ldw	r3,180(sp)
    e434:	d8803815 	stw	r2,224(sp)
    e438:	1880030b 	ldhu	r2,12(r3)
    e43c:	1080200c 	andi	r2,r2,128
    e440:	10000226 	beq	r2,zero,e44c <___svfprintf_internal_r+0x6c>
    e444:	18800417 	ldw	r2,16(r3)
    e448:	1006b126 	beq	r2,zero,ff10 <___svfprintf_internal_r+0x1b30>
    e44c:	dcc03917 	ldw	r19,228(sp)
    e450:	d8c00404 	addi	r3,sp,16
    e454:	054000f4 	movhi	r21,3
    e458:	d9001e04 	addi	r4,sp,120
    e45c:	ad656684 	addi	r21,r21,-27238
    e460:	d8c01e15 	stw	r3,120(sp)
    e464:	d8002015 	stw	zero,128(sp)
    e468:	d8001f15 	stw	zero,124(sp)
    e46c:	d8003315 	stw	zero,204(sp)
    e470:	d8003615 	stw	zero,216(sp)
    e474:	d8003715 	stw	zero,220(sp)
    e478:	1811883a 	mov	r8,r3
    e47c:	d8003a15 	stw	zero,232(sp)
    e480:	d8003b15 	stw	zero,236(sp)
    e484:	d8002f15 	stw	zero,188(sp)
    e488:	d9002815 	stw	r4,160(sp)
    e48c:	b8800007 	ldb	r2,0(r23)
    e490:	10027726 	beq	r2,zero,ee70 <___svfprintf_internal_r+0xa90>
    e494:	00c00944 	movi	r3,37
    e498:	b823883a 	mov	r17,r23
    e49c:	10c0021e 	bne	r2,r3,e4a8 <___svfprintf_internal_r+0xc8>
    e4a0:	00001406 	br	e4f4 <___svfprintf_internal_r+0x114>
    e4a4:	10c00326 	beq	r2,r3,e4b4 <___svfprintf_internal_r+0xd4>
    e4a8:	8c400044 	addi	r17,r17,1
    e4ac:	88800007 	ldb	r2,0(r17)
    e4b0:	103ffc1e 	bne	r2,zero,e4a4 <__alt_data_end+0xfc00e4a4>
    e4b4:	8de1c83a 	sub	r16,r17,r23
    e4b8:	80000e26 	beq	r16,zero,e4f4 <___svfprintf_internal_r+0x114>
    e4bc:	d8c02017 	ldw	r3,128(sp)
    e4c0:	d8801f17 	ldw	r2,124(sp)
    e4c4:	45c00015 	stw	r23,0(r8)
    e4c8:	1c07883a 	add	r3,r3,r16
    e4cc:	10800044 	addi	r2,r2,1
    e4d0:	d8c02015 	stw	r3,128(sp)
    e4d4:	44000115 	stw	r16,4(r8)
    e4d8:	d8801f15 	stw	r2,124(sp)
    e4dc:	00c001c4 	movi	r3,7
    e4e0:	18809916 	blt	r3,r2,e748 <___svfprintf_internal_r+0x368>
    e4e4:	42000204 	addi	r8,r8,8
    e4e8:	d9402f17 	ldw	r5,188(sp)
    e4ec:	2c0b883a 	add	r5,r5,r16
    e4f0:	d9402f15 	stw	r5,188(sp)
    e4f4:	88800007 	ldb	r2,0(r17)
    e4f8:	10009a26 	beq	r2,zero,e764 <___svfprintf_internal_r+0x384>
    e4fc:	8dc00044 	addi	r23,r17,1
    e500:	8c400047 	ldb	r17,1(r17)
    e504:	0021883a 	mov	r16,zero
    e508:	00bfffc4 	movi	r2,-1
    e50c:	0025883a 	mov	r18,zero
    e510:	dc002905 	stb	r16,164(sp)
    e514:	d8002785 	stb	zero,158(sp)
    e518:	d8002b05 	stb	zero,172(sp)
    e51c:	d8802a15 	stw	r2,168(sp)
    e520:	d8003115 	stw	zero,196(sp)
    e524:	05001604 	movi	r20,88
    e528:	05800244 	movi	r22,9
    e52c:	4039883a 	mov	fp,r8
    e530:	9021883a 	mov	r16,r18
    e534:	bdc00044 	addi	r23,r23,1
    e538:	88bff804 	addi	r2,r17,-32
    e53c:	a0831e36 	bltu	r20,r2,f1b8 <___svfprintf_internal_r+0xdd8>
    e540:	100490ba 	slli	r2,r2,2
    e544:	00c00074 	movhi	r3,1
    e548:	18f95604 	addi	r3,r3,-6824
    e54c:	10c5883a 	add	r2,r2,r3
    e550:	10800017 	ldw	r2,0(r2)
    e554:	1000683a 	jmp	r2
    e558:	0000f100 	call	f10 <_ZN3USB10inTransferEhhPtPhh+0x64>
    e55c:	0000f1b8 	rdprs	zero,zero,966
    e560:	0000f1b8 	rdprs	zero,zero,966
    e564:	0000f0f4 	movhi	zero,963
    e568:	0000f1b8 	rdprs	zero,zero,966
    e56c:	0000f1b8 	rdprs	zero,zero,966
    e570:	0000f1b8 	rdprs	zero,zero,966
    e574:	0000f1b8 	rdprs	zero,zero,966
    e578:	0000f1b8 	rdprs	zero,zero,966
    e57c:	0000f1b8 	rdprs	zero,zero,966
    e580:	0000e7c0 	call	e7c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2e0>
    e584:	0000f004 	movi	zero,960
    e588:	0000f1b8 	rdprs	zero,zero,966
    e58c:	0000e6cc 	andi	zero,zero,923
    e590:	0000e7e4 	muli	zero,zero,927
    e594:	0000f1b8 	rdprs	zero,zero,966
    e598:	0000e870 	cmpltui	zero,zero,929
    e59c:	0000e834 	movhi	zero,928
    e5a0:	0000e834 	movhi	zero,928
    e5a4:	0000e834 	movhi	zero,928
    e5a8:	0000e834 	movhi	zero,928
    e5ac:	0000e834 	movhi	zero,928
    e5b0:	0000e834 	movhi	zero,928
    e5b4:	0000e834 	movhi	zero,928
    e5b8:	0000e834 	movhi	zero,928
    e5bc:	0000e834 	movhi	zero,928
    e5c0:	0000f1b8 	rdprs	zero,zero,966
    e5c4:	0000f1b8 	rdprs	zero,zero,966
    e5c8:	0000f1b8 	rdprs	zero,zero,966
    e5cc:	0000f1b8 	rdprs	zero,zero,966
    e5d0:	0000f1b8 	rdprs	zero,zero,966
    e5d4:	0000f1b8 	rdprs	zero,zero,966
    e5d8:	0000f1b8 	rdprs	zero,zero,966
    e5dc:	0000f1b8 	rdprs	zero,zero,966
    e5e0:	0000f1b8 	rdprs	zero,zero,966
    e5e4:	0000f1b8 	rdprs	zero,zero,966
    e5e8:	0000e934 	movhi	zero,932
    e5ec:	0000e87c 	xorhi	zero,zero,929
    e5f0:	0000f1b8 	rdprs	zero,zero,966
    e5f4:	0000e87c 	xorhi	zero,zero,929
    e5f8:	0000f1b8 	rdprs	zero,zero,966
    e5fc:	0000f1b8 	rdprs	zero,zero,966
    e600:	0000f1b8 	rdprs	zero,zero,966
    e604:	0000f1b8 	rdprs	zero,zero,966
    e608:	0000e928 	cmpgeui	zero,zero,932
    e60c:	0000f1b8 	rdprs	zero,zero,966
    e610:	0000f1b8 	rdprs	zero,zero,966
    e614:	0000e9fc 	xorhi	zero,zero,935
    e618:	0000f1b8 	rdprs	zero,zero,966
    e61c:	0000f1b8 	rdprs	zero,zero,966
    e620:	0000f1b8 	rdprs	zero,zero,966
    e624:	0000f1b8 	rdprs	zero,zero,966
    e628:	0000f1b8 	rdprs	zero,zero,966
    e62c:	0000ee78 	rdprs	zero,zero,953
    e630:	0000f1b8 	rdprs	zero,zero,966
    e634:	0000f1b8 	rdprs	zero,zero,966
    e638:	0000eee4 	muli	zero,zero,955
    e63c:	0000f1b8 	rdprs	zero,zero,966
    e640:	0000f1b8 	rdprs	zero,zero,966
    e644:	0000f1b8 	rdprs	zero,zero,966
    e648:	0000f1b8 	rdprs	zero,zero,966
    e64c:	0000f1b8 	rdprs	zero,zero,966
    e650:	0000f1b8 	rdprs	zero,zero,966
    e654:	0000f1b8 	rdprs	zero,zero,966
    e658:	0000f1b8 	rdprs	zero,zero,966
    e65c:	0000f1b8 	rdprs	zero,zero,966
    e660:	0000f1b8 	rdprs	zero,zero,966
    e664:	0000efa0 	cmpeqi	zero,zero,958
    e668:	0000f120 	cmpeqi	zero,zero,964
    e66c:	0000e87c 	xorhi	zero,zero,929
    e670:	0000e87c 	xorhi	zero,zero,929
    e674:	0000e87c 	xorhi	zero,zero,929
    e678:	0000f194 	movui	zero,966
    e67c:	0000f120 	cmpeqi	zero,zero,964
    e680:	0000f1b8 	rdprs	zero,zero,966
    e684:	0000f1b8 	rdprs	zero,zero,966
    e688:	0000f140 	call	f14 <_ZN3USB10inTransferEhhPtPhh+0x68>
    e68c:	0000f1b8 	rdprs	zero,zero,966
    e690:	0000f154 	movui	zero,965
    e694:	0000efe4 	muli	zero,zero,959
    e698:	0000e6d8 	cmpnei	zero,zero,923
    e69c:	0000f01c 	xori	zero,zero,960
    e6a0:	0000f1b8 	rdprs	zero,zero,966
    e6a4:	0000f028 	cmpgeui	zero,zero,960
    e6a8:	0000f1b8 	rdprs	zero,zero,966
    e6ac:	0000f08c 	andi	zero,zero,962
    e6b0:	0000f1b8 	rdprs	zero,zero,966
    e6b4:	0000f1b8 	rdprs	zero,zero,966
    e6b8:	0000f0ac 	andhi	zero,zero,962
    e6bc:	d8c03117 	ldw	r3,196(sp)
    e6c0:	d8802e15 	stw	r2,184(sp)
    e6c4:	00c7c83a 	sub	r3,zero,r3
    e6c8:	d8c03115 	stw	r3,196(sp)
    e6cc:	84000114 	ori	r16,r16,4
    e6d0:	bc400007 	ldb	r17,0(r23)
    e6d4:	003f9706 	br	e534 <__alt_data_end+0xfc00e534>
    e6d8:	00800c04 	movi	r2,48
    e6dc:	d8802705 	stb	r2,156(sp)
    e6e0:	00801e04 	movi	r2,120
    e6e4:	d8802745 	stb	r2,157(sp)
    e6e8:	d9002a17 	ldw	r4,168(sp)
    e6ec:	d8802e17 	ldw	r2,184(sp)
    e6f0:	d8002785 	stb	zero,158(sp)
    e6f4:	e011883a 	mov	r8,fp
    e6f8:	10c00104 	addi	r3,r2,4
    e6fc:	15000017 	ldw	r20,0(r2)
    e700:	002d883a 	mov	r22,zero
    e704:	80800094 	ori	r2,r16,2
    e708:	2002b616 	blt	r4,zero,f1e4 <___svfprintf_internal_r+0xe04>
    e70c:	00bfdfc4 	movi	r2,-129
    e710:	80a4703a 	and	r18,r16,r2
    e714:	d8c02e15 	stw	r3,184(sp)
    e718:	94800094 	ori	r18,r18,2
    e71c:	a002a01e 	bne	r20,zero,f1a0 <___svfprintf_internal_r+0xdc0>
    e720:	014000f4 	movhi	r5,3
    e724:	29655f04 	addi	r5,r5,-27268
    e728:	d9403a15 	stw	r5,232(sp)
    e72c:	04401e04 	movi	r17,120
    e730:	d8c02a17 	ldw	r3,168(sp)
    e734:	0039883a 	mov	fp,zero
    e738:	1801e626 	beq	r3,zero,eed4 <___svfprintf_internal_r+0xaf4>
    e73c:	0029883a 	mov	r20,zero
    e740:	002d883a 	mov	r22,zero
    e744:	00020506 	br	ef5c <___svfprintf_internal_r+0xb7c>
    e748:	d9402d17 	ldw	r5,180(sp)
    e74c:	d9801e04 	addi	r6,sp,120
    e750:	9809883a 	mov	r4,r19
    e754:	00173440 	call	17344 <__ssprint_r>
    e758:	1000081e 	bne	r2,zero,e77c <___svfprintf_internal_r+0x39c>
    e75c:	da000404 	addi	r8,sp,16
    e760:	003f6106 	br	e4e8 <__alt_data_end+0xfc00e4e8>
    e764:	d8802017 	ldw	r2,128(sp)
    e768:	10000426 	beq	r2,zero,e77c <___svfprintf_internal_r+0x39c>
    e76c:	d9402d17 	ldw	r5,180(sp)
    e770:	d9003917 	ldw	r4,228(sp)
    e774:	d9801e04 	addi	r6,sp,120
    e778:	00173440 	call	17344 <__ssprint_r>
    e77c:	d8802d17 	ldw	r2,180(sp)
    e780:	10c0030b 	ldhu	r3,12(r2)
    e784:	d8802f17 	ldw	r2,188(sp)
    e788:	18c0100c 	andi	r3,r3,64
    e78c:	1806251e 	bne	r3,zero,10024 <___svfprintf_internal_r+0x1c44>
    e790:	dfc04817 	ldw	ra,288(sp)
    e794:	df004717 	ldw	fp,284(sp)
    e798:	ddc04617 	ldw	r23,280(sp)
    e79c:	dd804517 	ldw	r22,276(sp)
    e7a0:	dd404417 	ldw	r21,272(sp)
    e7a4:	dd004317 	ldw	r20,268(sp)
    e7a8:	dcc04217 	ldw	r19,264(sp)
    e7ac:	dc804117 	ldw	r18,260(sp)
    e7b0:	dc404017 	ldw	r17,256(sp)
    e7b4:	dc003f17 	ldw	r16,252(sp)
    e7b8:	dec04904 	addi	sp,sp,292
    e7bc:	f800283a 	ret
    e7c0:	d9002e17 	ldw	r4,184(sp)
    e7c4:	d9402e17 	ldw	r5,184(sp)
    e7c8:	21000017 	ldw	r4,0(r4)
    e7cc:	28800104 	addi	r2,r5,4
    e7d0:	d9003115 	stw	r4,196(sp)
    e7d4:	203fb916 	blt	r4,zero,e6bc <__alt_data_end+0xfc00e6bc>
    e7d8:	d8802e15 	stw	r2,184(sp)
    e7dc:	bc400007 	ldb	r17,0(r23)
    e7e0:	003f5406 	br	e534 <__alt_data_end+0xfc00e534>
    e7e4:	bc400007 	ldb	r17,0(r23)
    e7e8:	01000a84 	movi	r4,42
    e7ec:	b8c00044 	addi	r3,r23,1
    e7f0:	89076926 	beq	r17,r4,10598 <___svfprintf_internal_r+0x21b8>
    e7f4:	8cbff404 	addi	r18,r17,-48
    e7f8:	b486b936 	bltu	r22,r18,102e0 <___svfprintf_internal_r+0x1f00>
    e7fc:	0009883a 	mov	r4,zero
    e800:	1823883a 	mov	r17,r3
    e804:	01400284 	movi	r5,10
    e808:	000cca00 	call	cca0 <__mulsi3>
    e80c:	88c00007 	ldb	r3,0(r17)
    e810:	1489883a 	add	r4,r2,r18
    e814:	8dc00044 	addi	r23,r17,1
    e818:	1cbff404 	addi	r18,r3,-48
    e81c:	b823883a 	mov	r17,r23
    e820:	b4bff82e 	bgeu	r22,r18,e804 <__alt_data_end+0xfc00e804>
    e824:	1823883a 	mov	r17,r3
    e828:	20060416 	blt	r4,zero,1003c <___svfprintf_internal_r+0x1c5c>
    e82c:	d9002a15 	stw	r4,168(sp)
    e830:	003f4106 	br	e538 <__alt_data_end+0xfc00e538>
    e834:	8cbff404 	addi	r18,r17,-48
    e838:	d8003115 	stw	zero,196(sp)
    e83c:	0009883a 	mov	r4,zero
    e840:	b823883a 	mov	r17,r23
    e844:	01400284 	movi	r5,10
    e848:	000cca00 	call	cca0 <__mulsi3>
    e84c:	88c00007 	ldb	r3,0(r17)
    e850:	9089883a 	add	r4,r18,r2
    e854:	bdc00044 	addi	r23,r23,1
    e858:	1cbff404 	addi	r18,r3,-48
    e85c:	b823883a 	mov	r17,r23
    e860:	b4bff82e 	bgeu	r22,r18,e844 <__alt_data_end+0xfc00e844>
    e864:	1823883a 	mov	r17,r3
    e868:	d9003115 	stw	r4,196(sp)
    e86c:	003f3206 	br	e538 <__alt_data_end+0xfc00e538>
    e870:	84002014 	ori	r16,r16,128
    e874:	bc400007 	ldb	r17,0(r23)
    e878:	003f2e06 	br	e534 <__alt_data_end+0xfc00e534>
    e87c:	8025883a 	mov	r18,r16
    e880:	dc002903 	ldbu	r16,164(sp)
    e884:	e011883a 	mov	r8,fp
    e888:	84003fcc 	andi	r16,r16,255
    e88c:	8007721e 	bne	r16,zero,10658 <___svfprintf_internal_r+0x2278>
    e890:	9080020c 	andi	r2,r18,8
    e894:	1004a526 	beq	r2,zero,fb2c <___svfprintf_internal_r+0x174c>
    e898:	d9002e17 	ldw	r4,184(sp)
    e89c:	d9402e17 	ldw	r5,184(sp)
    e8a0:	d8802e17 	ldw	r2,184(sp)
    e8a4:	21000017 	ldw	r4,0(r4)
    e8a8:	29400117 	ldw	r5,4(r5)
    e8ac:	10800204 	addi	r2,r2,8
    e8b0:	d9003615 	stw	r4,216(sp)
    e8b4:	d9403715 	stw	r5,220(sp)
    e8b8:	d8802e15 	stw	r2,184(sp)
    e8bc:	d9003617 	ldw	r4,216(sp)
    e8c0:	d9403717 	ldw	r5,220(sp)
    e8c4:	da003e15 	stw	r8,248(sp)
    e8c8:	04000044 	movi	r16,1
    e8cc:	00171940 	call	17194 <__fpclassifyd>
    e8d0:	da003e17 	ldw	r8,248(sp)
    e8d4:	1404731e 	bne	r2,r16,faa4 <___svfprintf_internal_r+0x16c4>
    e8d8:	d9003617 	ldw	r4,216(sp)
    e8dc:	d9403717 	ldw	r5,220(sp)
    e8e0:	000d883a 	mov	r6,zero
    e8e4:	000f883a 	mov	r7,zero
    e8e8:	001c8980 	call	1c898 <__ledf2>
    e8ec:	da003e17 	ldw	r8,248(sp)
    e8f0:	10061b16 	blt	r2,zero,10160 <___svfprintf_internal_r+0x1d80>
    e8f4:	df002783 	ldbu	fp,158(sp)
    e8f8:	008011c4 	movi	r2,71
    e8fc:	1445810e 	bge	r2,r17,ff04 <___svfprintf_internal_r+0x1b24>
    e900:	040000f4 	movhi	r16,3
    e904:	84255704 	addi	r16,r16,-27300
    e908:	00c000c4 	movi	r3,3
    e90c:	00bfdfc4 	movi	r2,-129
    e910:	d8c02915 	stw	r3,164(sp)
    e914:	90a4703a 	and	r18,r18,r2
    e918:	d8c02b15 	stw	r3,172(sp)
    e91c:	d8002a15 	stw	zero,168(sp)
    e920:	d8003215 	stw	zero,200(sp)
    e924:	00006c06 	br	ead8 <___svfprintf_internal_r+0x6f8>
    e928:	84000214 	ori	r16,r16,8
    e92c:	bc400007 	ldb	r17,0(r23)
    e930:	003f0006 	br	e534 <__alt_data_end+0xfc00e534>
    e934:	8025883a 	mov	r18,r16
    e938:	dc002903 	ldbu	r16,164(sp)
    e93c:	e011883a 	mov	r8,fp
    e940:	84003fcc 	andi	r16,r16,255
    e944:	80073f1e 	bne	r16,zero,10644 <___svfprintf_internal_r+0x2264>
    e948:	94800414 	ori	r18,r18,16
    e94c:	9080080c 	andi	r2,r18,32
    e950:	1003bb26 	beq	r2,zero,f840 <___svfprintf_internal_r+0x1460>
    e954:	d9002e17 	ldw	r4,184(sp)
    e958:	20800117 	ldw	r2,4(r4)
    e95c:	25000017 	ldw	r20,0(r4)
    e960:	21000204 	addi	r4,r4,8
    e964:	d9002e15 	stw	r4,184(sp)
    e968:	102d883a 	mov	r22,r2
    e96c:	1003bd16 	blt	r2,zero,f864 <___svfprintf_internal_r+0x1484>
    e970:	d9002a17 	ldw	r4,168(sp)
    e974:	df002783 	ldbu	fp,158(sp)
    e978:	2003d016 	blt	r4,zero,f8bc <___svfprintf_internal_r+0x14dc>
    e97c:	00ffdfc4 	movi	r3,-129
    e980:	a584b03a 	or	r2,r20,r22
    e984:	90e4703a 	and	r18,r18,r3
    e988:	10015026 	beq	r2,zero,eecc <___svfprintf_internal_r+0xaec>
    e98c:	b0037026 	beq	r22,zero,f750 <___svfprintf_internal_r+0x1370>
    e990:	dc402915 	stw	r17,164(sp)
    e994:	dc001e04 	addi	r16,sp,120
    e998:	b023883a 	mov	r17,r22
    e99c:	402d883a 	mov	r22,r8
    e9a0:	a009883a 	mov	r4,r20
    e9a4:	880b883a 	mov	r5,r17
    e9a8:	01800284 	movi	r6,10
    e9ac:	000f883a 	mov	r7,zero
    e9b0:	001aef40 	call	1aef4 <__umoddi3>
    e9b4:	10800c04 	addi	r2,r2,48
    e9b8:	843fffc4 	addi	r16,r16,-1
    e9bc:	a009883a 	mov	r4,r20
    e9c0:	880b883a 	mov	r5,r17
    e9c4:	80800005 	stb	r2,0(r16)
    e9c8:	01800284 	movi	r6,10
    e9cc:	000f883a 	mov	r7,zero
    e9d0:	001a8f80 	call	1a8f8 <__udivdi3>
    e9d4:	1029883a 	mov	r20,r2
    e9d8:	10c4b03a 	or	r2,r2,r3
    e9dc:	1823883a 	mov	r17,r3
    e9e0:	103fef1e 	bne	r2,zero,e9a0 <__alt_data_end+0xfc00e9a0>
    e9e4:	d8c02817 	ldw	r3,160(sp)
    e9e8:	dc402917 	ldw	r17,164(sp)
    e9ec:	b011883a 	mov	r8,r22
    e9f0:	1c07c83a 	sub	r3,r3,r16
    e9f4:	d8c02b15 	stw	r3,172(sp)
    e9f8:	00003106 	br	eac0 <___svfprintf_internal_r+0x6e0>
    e9fc:	8025883a 	mov	r18,r16
    ea00:	dc002903 	ldbu	r16,164(sp)
    ea04:	e011883a 	mov	r8,fp
    ea08:	84003fcc 	andi	r16,r16,255
    ea0c:	80070a1e 	bne	r16,zero,10638 <___svfprintf_internal_r+0x2258>
    ea10:	94800414 	ori	r18,r18,16
    ea14:	9080080c 	andi	r2,r18,32
    ea18:	1002f626 	beq	r2,zero,f5f4 <___svfprintf_internal_r+0x1214>
    ea1c:	d9002e17 	ldw	r4,184(sp)
    ea20:	d9402a17 	ldw	r5,168(sp)
    ea24:	d8002785 	stb	zero,158(sp)
    ea28:	20800204 	addi	r2,r4,8
    ea2c:	25000017 	ldw	r20,0(r4)
    ea30:	25800117 	ldw	r22,4(r4)
    ea34:	28043716 	blt	r5,zero,fb14 <___svfprintf_internal_r+0x1734>
    ea38:	013fdfc4 	movi	r4,-129
    ea3c:	a586b03a 	or	r3,r20,r22
    ea40:	d8802e15 	stw	r2,184(sp)
    ea44:	9124703a 	and	r18,r18,r4
    ea48:	1802f71e 	bne	r3,zero,f628 <___svfprintf_internal_r+0x1248>
    ea4c:	d9402a17 	ldw	r5,168(sp)
    ea50:	0039883a 	mov	fp,zero
    ea54:	2806df26 	beq	r5,zero,105d4 <___svfprintf_internal_r+0x21f4>
    ea58:	0029883a 	mov	r20,zero
    ea5c:	002d883a 	mov	r22,zero
    ea60:	dc001e04 	addi	r16,sp,120
    ea64:	a006d0fa 	srli	r3,r20,3
    ea68:	b008977a 	slli	r4,r22,29
    ea6c:	b02cd0fa 	srli	r22,r22,3
    ea70:	a50001cc 	andi	r20,r20,7
    ea74:	a0800c04 	addi	r2,r20,48
    ea78:	843fffc4 	addi	r16,r16,-1
    ea7c:	20e8b03a 	or	r20,r4,r3
    ea80:	80800005 	stb	r2,0(r16)
    ea84:	a586b03a 	or	r3,r20,r22
    ea88:	183ff61e 	bne	r3,zero,ea64 <__alt_data_end+0xfc00ea64>
    ea8c:	90c0004c 	andi	r3,r18,1
    ea90:	18013f26 	beq	r3,zero,ef90 <___svfprintf_internal_r+0xbb0>
    ea94:	10803fcc 	andi	r2,r2,255
    ea98:	1080201c 	xori	r2,r2,128
    ea9c:	10bfe004 	addi	r2,r2,-128
    eaa0:	00c00c04 	movi	r3,48
    eaa4:	10c13a26 	beq	r2,r3,ef90 <___svfprintf_internal_r+0xbb0>
    eaa8:	80ffffc5 	stb	r3,-1(r16)
    eaac:	d8c02817 	ldw	r3,160(sp)
    eab0:	80bfffc4 	addi	r2,r16,-1
    eab4:	1021883a 	mov	r16,r2
    eab8:	1887c83a 	sub	r3,r3,r2
    eabc:	d8c02b15 	stw	r3,172(sp)
    eac0:	d8802b17 	ldw	r2,172(sp)
    eac4:	d9002a17 	ldw	r4,168(sp)
    eac8:	1100010e 	bge	r2,r4,ead0 <___svfprintf_internal_r+0x6f0>
    eacc:	2005883a 	mov	r2,r4
    ead0:	d8802915 	stw	r2,164(sp)
    ead4:	d8003215 	stw	zero,200(sp)
    ead8:	e7003fcc 	andi	fp,fp,255
    eadc:	e700201c 	xori	fp,fp,128
    eae0:	e73fe004 	addi	fp,fp,-128
    eae4:	e0000326 	beq	fp,zero,eaf4 <___svfprintf_internal_r+0x714>
    eae8:	d8c02917 	ldw	r3,164(sp)
    eaec:	18c00044 	addi	r3,r3,1
    eaf0:	d8c02915 	stw	r3,164(sp)
    eaf4:	90c0008c 	andi	r3,r18,2
    eaf8:	d8c02c15 	stw	r3,176(sp)
    eafc:	18000326 	beq	r3,zero,eb0c <___svfprintf_internal_r+0x72c>
    eb00:	d8c02917 	ldw	r3,164(sp)
    eb04:	18c00084 	addi	r3,r3,2
    eb08:	d8c02915 	stw	r3,164(sp)
    eb0c:	90c0210c 	andi	r3,r18,132
    eb10:	d8c03015 	stw	r3,192(sp)
    eb14:	1801c31e 	bne	r3,zero,f224 <___svfprintf_internal_r+0xe44>
    eb18:	d9003117 	ldw	r4,196(sp)
    eb1c:	d8c02917 	ldw	r3,164(sp)
    eb20:	20e9c83a 	sub	r20,r4,r3
    eb24:	0501bf0e 	bge	zero,r20,f224 <___svfprintf_internal_r+0xe44>
    eb28:	02400404 	movi	r9,16
    eb2c:	d8c02017 	ldw	r3,128(sp)
    eb30:	d8801f17 	ldw	r2,124(sp)
    eb34:	4d053d0e 	bge	r9,r20,1002c <___svfprintf_internal_r+0x1c4c>
    eb38:	014000f4 	movhi	r5,3
    eb3c:	29656a84 	addi	r5,r5,-27222
    eb40:	dc403c15 	stw	r17,240(sp)
    eb44:	d9403515 	stw	r5,212(sp)
    eb48:	a023883a 	mov	r17,r20
    eb4c:	482d883a 	mov	r22,r9
    eb50:	9029883a 	mov	r20,r18
    eb54:	070001c4 	movi	fp,7
    eb58:	8025883a 	mov	r18,r16
    eb5c:	dc002d17 	ldw	r16,180(sp)
    eb60:	00000306 	br	eb70 <___svfprintf_internal_r+0x790>
    eb64:	8c7ffc04 	addi	r17,r17,-16
    eb68:	42000204 	addi	r8,r8,8
    eb6c:	b440130e 	bge	r22,r17,ebbc <___svfprintf_internal_r+0x7dc>
    eb70:	010000f4 	movhi	r4,3
    eb74:	18c00404 	addi	r3,r3,16
    eb78:	10800044 	addi	r2,r2,1
    eb7c:	21256a84 	addi	r4,r4,-27222
    eb80:	41000015 	stw	r4,0(r8)
    eb84:	45800115 	stw	r22,4(r8)
    eb88:	d8c02015 	stw	r3,128(sp)
    eb8c:	d8801f15 	stw	r2,124(sp)
    eb90:	e0bff40e 	bge	fp,r2,eb64 <__alt_data_end+0xfc00eb64>
    eb94:	d9801e04 	addi	r6,sp,120
    eb98:	800b883a 	mov	r5,r16
    eb9c:	9809883a 	mov	r4,r19
    eba0:	00173440 	call	17344 <__ssprint_r>
    eba4:	103ef51e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    eba8:	8c7ffc04 	addi	r17,r17,-16
    ebac:	d8c02017 	ldw	r3,128(sp)
    ebb0:	d8801f17 	ldw	r2,124(sp)
    ebb4:	da000404 	addi	r8,sp,16
    ebb8:	b47fed16 	blt	r22,r17,eb70 <__alt_data_end+0xfc00eb70>
    ebbc:	9021883a 	mov	r16,r18
    ebc0:	a025883a 	mov	r18,r20
    ebc4:	8829883a 	mov	r20,r17
    ebc8:	dc403c17 	ldw	r17,240(sp)
    ebcc:	d9403517 	ldw	r5,212(sp)
    ebd0:	a0c7883a 	add	r3,r20,r3
    ebd4:	10800044 	addi	r2,r2,1
    ebd8:	41400015 	stw	r5,0(r8)
    ebdc:	45000115 	stw	r20,4(r8)
    ebe0:	d8c02015 	stw	r3,128(sp)
    ebe4:	d8801f15 	stw	r2,124(sp)
    ebe8:	010001c4 	movi	r4,7
    ebec:	2082c116 	blt	r4,r2,f6f4 <___svfprintf_internal_r+0x1314>
    ebf0:	df002787 	ldb	fp,158(sp)
    ebf4:	42000204 	addi	r8,r8,8
    ebf8:	e0000c26 	beq	fp,zero,ec2c <___svfprintf_internal_r+0x84c>
    ebfc:	d8801f17 	ldw	r2,124(sp)
    ec00:	d9002784 	addi	r4,sp,158
    ec04:	18c00044 	addi	r3,r3,1
    ec08:	10800044 	addi	r2,r2,1
    ec0c:	41000015 	stw	r4,0(r8)
    ec10:	01000044 	movi	r4,1
    ec14:	41000115 	stw	r4,4(r8)
    ec18:	d8c02015 	stw	r3,128(sp)
    ec1c:	d8801f15 	stw	r2,124(sp)
    ec20:	010001c4 	movi	r4,7
    ec24:	20825a16 	blt	r4,r2,f590 <___svfprintf_internal_r+0x11b0>
    ec28:	42000204 	addi	r8,r8,8
    ec2c:	d8802c17 	ldw	r2,176(sp)
    ec30:	10000c26 	beq	r2,zero,ec64 <___svfprintf_internal_r+0x884>
    ec34:	d8801f17 	ldw	r2,124(sp)
    ec38:	d9002704 	addi	r4,sp,156
    ec3c:	18c00084 	addi	r3,r3,2
    ec40:	10800044 	addi	r2,r2,1
    ec44:	41000015 	stw	r4,0(r8)
    ec48:	01000084 	movi	r4,2
    ec4c:	41000115 	stw	r4,4(r8)
    ec50:	d8c02015 	stw	r3,128(sp)
    ec54:	d8801f15 	stw	r2,124(sp)
    ec58:	010001c4 	movi	r4,7
    ec5c:	20825416 	blt	r4,r2,f5b0 <___svfprintf_internal_r+0x11d0>
    ec60:	42000204 	addi	r8,r8,8
    ec64:	d9003017 	ldw	r4,192(sp)
    ec68:	00802004 	movi	r2,128
    ec6c:	2081b926 	beq	r4,r2,f354 <___svfprintf_internal_r+0xf74>
    ec70:	d9402a17 	ldw	r5,168(sp)
    ec74:	d8802b17 	ldw	r2,172(sp)
    ec78:	28adc83a 	sub	r22,r5,r2
    ec7c:	05802f0e 	bge	zero,r22,ed3c <___svfprintf_internal_r+0x95c>
    ec80:	07000404 	movi	fp,16
    ec84:	d8801f17 	ldw	r2,124(sp)
    ec88:	e583e20e 	bge	fp,r22,fc14 <___svfprintf_internal_r+0x1834>
    ec8c:	014000f4 	movhi	r5,3
    ec90:	29656684 	addi	r5,r5,-27238
    ec94:	dc402a15 	stw	r17,168(sp)
    ec98:	d9402c15 	stw	r5,176(sp)
    ec9c:	b023883a 	mov	r17,r22
    eca0:	050001c4 	movi	r20,7
    eca4:	902d883a 	mov	r22,r18
    eca8:	8025883a 	mov	r18,r16
    ecac:	dc002d17 	ldw	r16,180(sp)
    ecb0:	00000306 	br	ecc0 <___svfprintf_internal_r+0x8e0>
    ecb4:	8c7ffc04 	addi	r17,r17,-16
    ecb8:	42000204 	addi	r8,r8,8
    ecbc:	e440110e 	bge	fp,r17,ed04 <___svfprintf_internal_r+0x924>
    ecc0:	18c00404 	addi	r3,r3,16
    ecc4:	10800044 	addi	r2,r2,1
    ecc8:	45400015 	stw	r21,0(r8)
    eccc:	47000115 	stw	fp,4(r8)
    ecd0:	d8c02015 	stw	r3,128(sp)
    ecd4:	d8801f15 	stw	r2,124(sp)
    ecd8:	a0bff60e 	bge	r20,r2,ecb4 <__alt_data_end+0xfc00ecb4>
    ecdc:	d9801e04 	addi	r6,sp,120
    ece0:	800b883a 	mov	r5,r16
    ece4:	9809883a 	mov	r4,r19
    ece8:	00173440 	call	17344 <__ssprint_r>
    ecec:	103ea31e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    ecf0:	8c7ffc04 	addi	r17,r17,-16
    ecf4:	d8c02017 	ldw	r3,128(sp)
    ecf8:	d8801f17 	ldw	r2,124(sp)
    ecfc:	da000404 	addi	r8,sp,16
    ed00:	e47fef16 	blt	fp,r17,ecc0 <__alt_data_end+0xfc00ecc0>
    ed04:	9021883a 	mov	r16,r18
    ed08:	b025883a 	mov	r18,r22
    ed0c:	882d883a 	mov	r22,r17
    ed10:	dc402a17 	ldw	r17,168(sp)
    ed14:	d9002c17 	ldw	r4,176(sp)
    ed18:	1d87883a 	add	r3,r3,r22
    ed1c:	10800044 	addi	r2,r2,1
    ed20:	41000015 	stw	r4,0(r8)
    ed24:	45800115 	stw	r22,4(r8)
    ed28:	d8c02015 	stw	r3,128(sp)
    ed2c:	d8801f15 	stw	r2,124(sp)
    ed30:	010001c4 	movi	r4,7
    ed34:	20820e16 	blt	r4,r2,f570 <___svfprintf_internal_r+0x1190>
    ed38:	42000204 	addi	r8,r8,8
    ed3c:	9080400c 	andi	r2,r18,256
    ed40:	10013a1e 	bne	r2,zero,f22c <___svfprintf_internal_r+0xe4c>
    ed44:	d9402b17 	ldw	r5,172(sp)
    ed48:	d8801f17 	ldw	r2,124(sp)
    ed4c:	44000015 	stw	r16,0(r8)
    ed50:	1947883a 	add	r3,r3,r5
    ed54:	10800044 	addi	r2,r2,1
    ed58:	41400115 	stw	r5,4(r8)
    ed5c:	d8c02015 	stw	r3,128(sp)
    ed60:	d8801f15 	stw	r2,124(sp)
    ed64:	010001c4 	movi	r4,7
    ed68:	2081f316 	blt	r4,r2,f538 <___svfprintf_internal_r+0x1158>
    ed6c:	42000204 	addi	r8,r8,8
    ed70:	9480010c 	andi	r18,r18,4
    ed74:	90003226 	beq	r18,zero,ee40 <___svfprintf_internal_r+0xa60>
    ed78:	d9403117 	ldw	r5,196(sp)
    ed7c:	d8802917 	ldw	r2,164(sp)
    ed80:	28a1c83a 	sub	r16,r5,r2
    ed84:	04002e0e 	bge	zero,r16,ee40 <___svfprintf_internal_r+0xa60>
    ed88:	04400404 	movi	r17,16
    ed8c:	d8801f17 	ldw	r2,124(sp)
    ed90:	8c04db0e 	bge	r17,r16,10100 <___svfprintf_internal_r+0x1d20>
    ed94:	014000f4 	movhi	r5,3
    ed98:	29656a84 	addi	r5,r5,-27222
    ed9c:	d9403515 	stw	r5,212(sp)
    eda0:	048001c4 	movi	r18,7
    eda4:	dd002d17 	ldw	r20,180(sp)
    eda8:	00000306 	br	edb8 <___svfprintf_internal_r+0x9d8>
    edac:	843ffc04 	addi	r16,r16,-16
    edb0:	42000204 	addi	r8,r8,8
    edb4:	8c00130e 	bge	r17,r16,ee04 <___svfprintf_internal_r+0xa24>
    edb8:	010000f4 	movhi	r4,3
    edbc:	18c00404 	addi	r3,r3,16
    edc0:	10800044 	addi	r2,r2,1
    edc4:	21256a84 	addi	r4,r4,-27222
    edc8:	41000015 	stw	r4,0(r8)
    edcc:	44400115 	stw	r17,4(r8)
    edd0:	d8c02015 	stw	r3,128(sp)
    edd4:	d8801f15 	stw	r2,124(sp)
    edd8:	90bff40e 	bge	r18,r2,edac <__alt_data_end+0xfc00edac>
    eddc:	d9801e04 	addi	r6,sp,120
    ede0:	a00b883a 	mov	r5,r20
    ede4:	9809883a 	mov	r4,r19
    ede8:	00173440 	call	17344 <__ssprint_r>
    edec:	103e631e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    edf0:	843ffc04 	addi	r16,r16,-16
    edf4:	d8c02017 	ldw	r3,128(sp)
    edf8:	d8801f17 	ldw	r2,124(sp)
    edfc:	da000404 	addi	r8,sp,16
    ee00:	8c3fed16 	blt	r17,r16,edb8 <__alt_data_end+0xfc00edb8>
    ee04:	d9403517 	ldw	r5,212(sp)
    ee08:	1c07883a 	add	r3,r3,r16
    ee0c:	10800044 	addi	r2,r2,1
    ee10:	41400015 	stw	r5,0(r8)
    ee14:	44000115 	stw	r16,4(r8)
    ee18:	d8c02015 	stw	r3,128(sp)
    ee1c:	d8801f15 	stw	r2,124(sp)
    ee20:	010001c4 	movi	r4,7
    ee24:	2080060e 	bge	r4,r2,ee40 <___svfprintf_internal_r+0xa60>
    ee28:	d9402d17 	ldw	r5,180(sp)
    ee2c:	d9801e04 	addi	r6,sp,120
    ee30:	9809883a 	mov	r4,r19
    ee34:	00173440 	call	17344 <__ssprint_r>
    ee38:	103e501e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    ee3c:	d8c02017 	ldw	r3,128(sp)
    ee40:	d8803117 	ldw	r2,196(sp)
    ee44:	d9002917 	ldw	r4,164(sp)
    ee48:	1100010e 	bge	r2,r4,ee50 <___svfprintf_internal_r+0xa70>
    ee4c:	2005883a 	mov	r2,r4
    ee50:	d9402f17 	ldw	r5,188(sp)
    ee54:	288b883a 	add	r5,r5,r2
    ee58:	d9402f15 	stw	r5,188(sp)
    ee5c:	1801be1e 	bne	r3,zero,f558 <___svfprintf_internal_r+0x1178>
    ee60:	b8800007 	ldb	r2,0(r23)
    ee64:	d8001f15 	stw	zero,124(sp)
    ee68:	da000404 	addi	r8,sp,16
    ee6c:	103d891e 	bne	r2,zero,e494 <__alt_data_end+0xfc00e494>
    ee70:	b823883a 	mov	r17,r23
    ee74:	003d9f06 	br	e4f4 <__alt_data_end+0xfc00e4f4>
    ee78:	8025883a 	mov	r18,r16
    ee7c:	dc002903 	ldbu	r16,164(sp)
    ee80:	e011883a 	mov	r8,fp
    ee84:	84003fcc 	andi	r16,r16,255
    ee88:	8005e61e 	bne	r16,zero,10624 <___svfprintf_internal_r+0x2244>
    ee8c:	94800414 	ori	r18,r18,16
    ee90:	9080080c 	andi	r2,r18,32
    ee94:	10022026 	beq	r2,zero,f718 <___svfprintf_internal_r+0x1338>
    ee98:	d9002e17 	ldw	r4,184(sp)
    ee9c:	d9402a17 	ldw	r5,168(sp)
    eea0:	d8002785 	stb	zero,158(sp)
    eea4:	20c00204 	addi	r3,r4,8
    eea8:	25000017 	ldw	r20,0(r4)
    eeac:	25800117 	ldw	r22,4(r4)
    eeb0:	2803ad16 	blt	r5,zero,fd68 <___svfprintf_internal_r+0x1988>
    eeb4:	013fdfc4 	movi	r4,-129
    eeb8:	a584b03a 	or	r2,r20,r22
    eebc:	d8c02e15 	stw	r3,184(sp)
    eec0:	9124703a 	and	r18,r18,r4
    eec4:	0039883a 	mov	fp,zero
    eec8:	103eb01e 	bne	r2,zero,e98c <__alt_data_end+0xfc00e98c>
    eecc:	d8802a17 	ldw	r2,168(sp)
    eed0:	1002e71e 	bne	r2,zero,fa70 <___svfprintf_internal_r+0x1690>
    eed4:	d8002a15 	stw	zero,168(sp)
    eed8:	d8002b15 	stw	zero,172(sp)
    eedc:	dc001e04 	addi	r16,sp,120
    eee0:	003ef706 	br	eac0 <__alt_data_end+0xfc00eac0>
    eee4:	8025883a 	mov	r18,r16
    eee8:	dc002903 	ldbu	r16,164(sp)
    eeec:	e011883a 	mov	r8,fp
    eef0:	84003fcc 	andi	r16,r16,255
    eef4:	8005c81e 	bne	r16,zero,10618 <___svfprintf_internal_r+0x2238>
    eef8:	010000f4 	movhi	r4,3
    eefc:	21255a04 	addi	r4,r4,-27288
    ef00:	d9003a15 	stw	r4,232(sp)
    ef04:	9080080c 	andi	r2,r18,32
    ef08:	10007226 	beq	r2,zero,f0d4 <___svfprintf_internal_r+0xcf4>
    ef0c:	d9402e17 	ldw	r5,184(sp)
    ef10:	2d000017 	ldw	r20,0(r5)
    ef14:	2d800117 	ldw	r22,4(r5)
    ef18:	29400204 	addi	r5,r5,8
    ef1c:	d9402e15 	stw	r5,184(sp)
    ef20:	9080004c 	andi	r2,r18,1
    ef24:	1001aa26 	beq	r2,zero,f5d0 <___svfprintf_internal_r+0x11f0>
    ef28:	a584b03a 	or	r2,r20,r22
    ef2c:	10032526 	beq	r2,zero,fbc4 <___svfprintf_internal_r+0x17e4>
    ef30:	d8c02a17 	ldw	r3,168(sp)
    ef34:	00800c04 	movi	r2,48
    ef38:	d8802705 	stb	r2,156(sp)
    ef3c:	dc402745 	stb	r17,157(sp)
    ef40:	d8002785 	stb	zero,158(sp)
    ef44:	90800094 	ori	r2,r18,2
    ef48:	1804a316 	blt	r3,zero,101d8 <___svfprintf_internal_r+0x1df8>
    ef4c:	00bfdfc4 	movi	r2,-129
    ef50:	90a4703a 	and	r18,r18,r2
    ef54:	94800094 	ori	r18,r18,2
    ef58:	0039883a 	mov	fp,zero
    ef5c:	d9003a17 	ldw	r4,232(sp)
    ef60:	dc001e04 	addi	r16,sp,120
    ef64:	a08003cc 	andi	r2,r20,15
    ef68:	b006973a 	slli	r3,r22,28
    ef6c:	2085883a 	add	r2,r4,r2
    ef70:	a028d13a 	srli	r20,r20,4
    ef74:	10800003 	ldbu	r2,0(r2)
    ef78:	b02cd13a 	srli	r22,r22,4
    ef7c:	843fffc4 	addi	r16,r16,-1
    ef80:	1d28b03a 	or	r20,r3,r20
    ef84:	80800005 	stb	r2,0(r16)
    ef88:	a584b03a 	or	r2,r20,r22
    ef8c:	103ff51e 	bne	r2,zero,ef64 <__alt_data_end+0xfc00ef64>
    ef90:	d8c02817 	ldw	r3,160(sp)
    ef94:	1c07c83a 	sub	r3,r3,r16
    ef98:	d8c02b15 	stw	r3,172(sp)
    ef9c:	003ec806 	br	eac0 <__alt_data_end+0xfc00eac0>
    efa0:	d8c02e17 	ldw	r3,184(sp)
    efa4:	d9002e17 	ldw	r4,184(sp)
    efa8:	8025883a 	mov	r18,r16
    efac:	18800017 	ldw	r2,0(r3)
    efb0:	21000104 	addi	r4,r4,4
    efb4:	00c00044 	movi	r3,1
    efb8:	e011883a 	mov	r8,fp
    efbc:	d8c02915 	stw	r3,164(sp)
    efc0:	d8002785 	stb	zero,158(sp)
    efc4:	d8801405 	stb	r2,80(sp)
    efc8:	d9002e15 	stw	r4,184(sp)
    efcc:	d8c02b15 	stw	r3,172(sp)
    efd0:	d8002a15 	stw	zero,168(sp)
    efd4:	d8003215 	stw	zero,200(sp)
    efd8:	dc001404 	addi	r16,sp,80
    efdc:	0039883a 	mov	fp,zero
    efe0:	003ec406 	br	eaf4 <__alt_data_end+0xfc00eaf4>
    efe4:	8025883a 	mov	r18,r16
    efe8:	dc002903 	ldbu	r16,164(sp)
    efec:	e011883a 	mov	r8,fp
    eff0:	84003fcc 	andi	r16,r16,255
    eff4:	803e8726 	beq	r16,zero,ea14 <__alt_data_end+0xfc00ea14>
    eff8:	d8c02b03 	ldbu	r3,172(sp)
    effc:	d8c02785 	stb	r3,158(sp)
    f000:	003e8406 	br	ea14 <__alt_data_end+0xfc00ea14>
    f004:	00c00044 	movi	r3,1
    f008:	d8c02905 	stb	r3,164(sp)
    f00c:	00c00ac4 	movi	r3,43
    f010:	d8c02b05 	stb	r3,172(sp)
    f014:	bc400007 	ldb	r17,0(r23)
    f018:	003d4606 	br	e534 <__alt_data_end+0xfc00e534>
    f01c:	84000814 	ori	r16,r16,32
    f020:	bc400007 	ldb	r17,0(r23)
    f024:	003d4306 	br	e534 <__alt_data_end+0xfc00e534>
    f028:	d8802e17 	ldw	r2,184(sp)
    f02c:	8025883a 	mov	r18,r16
    f030:	d8002785 	stb	zero,158(sp)
    f034:	14000017 	ldw	r16,0(r2)
    f038:	e011883a 	mov	r8,fp
    f03c:	15000104 	addi	r20,r2,4
    f040:	80042126 	beq	r16,zero,100c8 <___svfprintf_internal_r+0x1ce8>
    f044:	d8c02a17 	ldw	r3,168(sp)
    f048:	1803ee16 	blt	r3,zero,10004 <___svfprintf_internal_r+0x1c24>
    f04c:	180d883a 	mov	r6,r3
    f050:	000b883a 	mov	r5,zero
    f054:	8009883a 	mov	r4,r16
    f058:	df003e15 	stw	fp,248(sp)
    f05c:	00157d00 	call	157d0 <memchr>
    f060:	da003e17 	ldw	r8,248(sp)
    f064:	10046a26 	beq	r2,zero,10210 <___svfprintf_internal_r+0x1e30>
    f068:	1405c83a 	sub	r2,r2,r16
    f06c:	d8802b15 	stw	r2,172(sp)
    f070:	1003ea16 	blt	r2,zero,1001c <___svfprintf_internal_r+0x1c3c>
    f074:	df002783 	ldbu	fp,158(sp)
    f078:	d8802915 	stw	r2,164(sp)
    f07c:	dd002e15 	stw	r20,184(sp)
    f080:	d8002a15 	stw	zero,168(sp)
    f084:	d8003215 	stw	zero,200(sp)
    f088:	003e9306 	br	ead8 <__alt_data_end+0xfc00ead8>
    f08c:	8025883a 	mov	r18,r16
    f090:	dc002903 	ldbu	r16,164(sp)
    f094:	e011883a 	mov	r8,fp
    f098:	84003fcc 	andi	r16,r16,255
    f09c:	803f7c26 	beq	r16,zero,ee90 <__alt_data_end+0xfc00ee90>
    f0a0:	d8c02b03 	ldbu	r3,172(sp)
    f0a4:	d8c02785 	stb	r3,158(sp)
    f0a8:	003f7906 	br	ee90 <__alt_data_end+0xfc00ee90>
    f0ac:	8025883a 	mov	r18,r16
    f0b0:	dc002903 	ldbu	r16,164(sp)
    f0b4:	e011883a 	mov	r8,fp
    f0b8:	84003fcc 	andi	r16,r16,255
    f0bc:	8005741e 	bne	r16,zero,10690 <___svfprintf_internal_r+0x22b0>
    f0c0:	010000f4 	movhi	r4,3
    f0c4:	21255f04 	addi	r4,r4,-27268
    f0c8:	d9003a15 	stw	r4,232(sp)
    f0cc:	9080080c 	andi	r2,r18,32
    f0d0:	103f8e1e 	bne	r2,zero,ef0c <__alt_data_end+0xfc00ef0c>
    f0d4:	9080040c 	andi	r2,r18,16
    f0d8:	1002a726 	beq	r2,zero,fb78 <___svfprintf_internal_r+0x1798>
    f0dc:	d8802e17 	ldw	r2,184(sp)
    f0e0:	002d883a 	mov	r22,zero
    f0e4:	15000017 	ldw	r20,0(r2)
    f0e8:	10800104 	addi	r2,r2,4
    f0ec:	d8802e15 	stw	r2,184(sp)
    f0f0:	003f8b06 	br	ef20 <__alt_data_end+0xfc00ef20>
    f0f4:	84000054 	ori	r16,r16,1
    f0f8:	bc400007 	ldb	r17,0(r23)
    f0fc:	003d0d06 	br	e534 <__alt_data_end+0xfc00e534>
    f100:	d8802b07 	ldb	r2,172(sp)
    f104:	1002a41e 	bne	r2,zero,fb98 <___svfprintf_internal_r+0x17b8>
    f108:	00c00044 	movi	r3,1
    f10c:	d8c02905 	stb	r3,164(sp)
    f110:	00c00804 	movi	r3,32
    f114:	d8c02b05 	stb	r3,172(sp)
    f118:	bc400007 	ldb	r17,0(r23)
    f11c:	003d0506 	br	e534 <__alt_data_end+0xfc00e534>
    f120:	8025883a 	mov	r18,r16
    f124:	dc002903 	ldbu	r16,164(sp)
    f128:	e011883a 	mov	r8,fp
    f12c:	84003fcc 	andi	r16,r16,255
    f130:	803e0626 	beq	r16,zero,e94c <__alt_data_end+0xfc00e94c>
    f134:	d8c02b03 	ldbu	r3,172(sp)
    f138:	d8c02785 	stb	r3,158(sp)
    f13c:	003e0306 	br	e94c <__alt_data_end+0xfc00e94c>
    f140:	bc400007 	ldb	r17,0(r23)
    f144:	00801b04 	movi	r2,108
    f148:	88830a26 	beq	r17,r2,fd74 <___svfprintf_internal_r+0x1994>
    f14c:	84000414 	ori	r16,r16,16
    f150:	003cf806 	br	e534 <__alt_data_end+0xfc00e534>
    f154:	8025883a 	mov	r18,r16
    f158:	dc002903 	ldbu	r16,164(sp)
    f15c:	e011883a 	mov	r8,fp
    f160:	84003fcc 	andi	r16,r16,255
    f164:	8005471e 	bne	r16,zero,10684 <___svfprintf_internal_r+0x22a4>
    f168:	9080080c 	andi	r2,r18,32
    f16c:	10028c26 	beq	r2,zero,fba0 <___svfprintf_internal_r+0x17c0>
    f170:	d9002e17 	ldw	r4,184(sp)
    f174:	d9402f17 	ldw	r5,188(sp)
    f178:	20800017 	ldw	r2,0(r4)
    f17c:	2807d7fa 	srai	r3,r5,31
    f180:	21000104 	addi	r4,r4,4
    f184:	d9002e15 	stw	r4,184(sp)
    f188:	11400015 	stw	r5,0(r2)
    f18c:	10c00115 	stw	r3,4(r2)
    f190:	003cbe06 	br	e48c <__alt_data_end+0xfc00e48c>
    f194:	84001014 	ori	r16,r16,64
    f198:	bc400007 	ldb	r17,0(r23)
    f19c:	003ce506 	br	e534 <__alt_data_end+0xfc00e534>
    f1a0:	010000f4 	movhi	r4,3
    f1a4:	21255f04 	addi	r4,r4,-27268
    f1a8:	0039883a 	mov	fp,zero
    f1ac:	d9003a15 	stw	r4,232(sp)
    f1b0:	04401e04 	movi	r17,120
    f1b4:	003f6906 	br	ef5c <__alt_data_end+0xfc00ef5c>
    f1b8:	8025883a 	mov	r18,r16
    f1bc:	dc002903 	ldbu	r16,164(sp)
    f1c0:	e011883a 	mov	r8,fp
    f1c4:	84003fcc 	andi	r16,r16,255
    f1c8:	8005261e 	bne	r16,zero,10664 <___svfprintf_internal_r+0x2284>
    f1cc:	883d6526 	beq	r17,zero,e764 <__alt_data_end+0xfc00e764>
    f1d0:	00c00044 	movi	r3,1
    f1d4:	d8c02915 	stw	r3,164(sp)
    f1d8:	dc401405 	stb	r17,80(sp)
    f1dc:	d8002785 	stb	zero,158(sp)
    f1e0:	003f7a06 	br	efcc <__alt_data_end+0xfc00efcc>
    f1e4:	010000f4 	movhi	r4,3
    f1e8:	21255f04 	addi	r4,r4,-27268
    f1ec:	d9003a15 	stw	r4,232(sp)
    f1f0:	d8c02e15 	stw	r3,184(sp)
    f1f4:	1025883a 	mov	r18,r2
    f1f8:	04401e04 	movi	r17,120
    f1fc:	a584b03a 	or	r2,r20,r22
    f200:	1000fa1e 	bne	r2,zero,f5ec <___svfprintf_internal_r+0x120c>
    f204:	0039883a 	mov	fp,zero
    f208:	00800084 	movi	r2,2
    f20c:	10803fcc 	andi	r2,r2,255
    f210:	00c00044 	movi	r3,1
    f214:	10c21626 	beq	r2,r3,fa70 <___svfprintf_internal_r+0x1690>
    f218:	00c00084 	movi	r3,2
    f21c:	10fe0e1e 	bne	r2,r3,ea58 <__alt_data_end+0xfc00ea58>
    f220:	003d4606 	br	e73c <__alt_data_end+0xfc00e73c>
    f224:	d8c02017 	ldw	r3,128(sp)
    f228:	003e7306 	br	ebf8 <__alt_data_end+0xfc00ebf8>
    f22c:	00801944 	movi	r2,101
    f230:	14407c0e 	bge	r2,r17,f424 <___svfprintf_internal_r+0x1044>
    f234:	d9003617 	ldw	r4,216(sp)
    f238:	d9403717 	ldw	r5,220(sp)
    f23c:	000d883a 	mov	r6,zero
    f240:	000f883a 	mov	r7,zero
    f244:	d8c03d15 	stw	r3,244(sp)
    f248:	da003e15 	stw	r8,248(sp)
    f24c:	001c7340 	call	1c734 <__eqdf2>
    f250:	d8c03d17 	ldw	r3,244(sp)
    f254:	da003e17 	ldw	r8,248(sp)
    f258:	1000f51e 	bne	r2,zero,f630 <___svfprintf_internal_r+0x1250>
    f25c:	d8801f17 	ldw	r2,124(sp)
    f260:	010000f4 	movhi	r4,3
    f264:	21256604 	addi	r4,r4,-27240
    f268:	18c00044 	addi	r3,r3,1
    f26c:	10800044 	addi	r2,r2,1
    f270:	41000015 	stw	r4,0(r8)
    f274:	01000044 	movi	r4,1
    f278:	41000115 	stw	r4,4(r8)
    f27c:	d8c02015 	stw	r3,128(sp)
    f280:	d8801f15 	stw	r2,124(sp)
    f284:	010001c4 	movi	r4,7
    f288:	20826616 	blt	r4,r2,fc24 <___svfprintf_internal_r+0x1844>
    f28c:	42000204 	addi	r8,r8,8
    f290:	d8802617 	ldw	r2,152(sp)
    f294:	d9403317 	ldw	r5,204(sp)
    f298:	11400216 	blt	r2,r5,f2a4 <___svfprintf_internal_r+0xec4>
    f29c:	9080004c 	andi	r2,r18,1
    f2a0:	103eb326 	beq	r2,zero,ed70 <__alt_data_end+0xfc00ed70>
    f2a4:	d8803817 	ldw	r2,224(sp)
    f2a8:	d9003417 	ldw	r4,208(sp)
    f2ac:	d9403817 	ldw	r5,224(sp)
    f2b0:	1887883a 	add	r3,r3,r2
    f2b4:	d8801f17 	ldw	r2,124(sp)
    f2b8:	41000015 	stw	r4,0(r8)
    f2bc:	41400115 	stw	r5,4(r8)
    f2c0:	10800044 	addi	r2,r2,1
    f2c4:	d8c02015 	stw	r3,128(sp)
    f2c8:	d8801f15 	stw	r2,124(sp)
    f2cc:	010001c4 	movi	r4,7
    f2d0:	2082af16 	blt	r4,r2,fd90 <___svfprintf_internal_r+0x19b0>
    f2d4:	42000204 	addi	r8,r8,8
    f2d8:	d8803317 	ldw	r2,204(sp)
    f2dc:	143fffc4 	addi	r16,r2,-1
    f2e0:	043ea30e 	bge	zero,r16,ed70 <__alt_data_end+0xfc00ed70>
    f2e4:	04400404 	movi	r17,16
    f2e8:	d8801f17 	ldw	r2,124(sp)
    f2ec:	8c00860e 	bge	r17,r16,f508 <___svfprintf_internal_r+0x1128>
    f2f0:	014000f4 	movhi	r5,3
    f2f4:	29656684 	addi	r5,r5,-27238
    f2f8:	d9402c15 	stw	r5,176(sp)
    f2fc:	058001c4 	movi	r22,7
    f300:	dd002d17 	ldw	r20,180(sp)
    f304:	00000306 	br	f314 <___svfprintf_internal_r+0xf34>
    f308:	42000204 	addi	r8,r8,8
    f30c:	843ffc04 	addi	r16,r16,-16
    f310:	8c00800e 	bge	r17,r16,f514 <___svfprintf_internal_r+0x1134>
    f314:	18c00404 	addi	r3,r3,16
    f318:	10800044 	addi	r2,r2,1
    f31c:	45400015 	stw	r21,0(r8)
    f320:	44400115 	stw	r17,4(r8)
    f324:	d8c02015 	stw	r3,128(sp)
    f328:	d8801f15 	stw	r2,124(sp)
    f32c:	b0bff60e 	bge	r22,r2,f308 <__alt_data_end+0xfc00f308>
    f330:	d9801e04 	addi	r6,sp,120
    f334:	a00b883a 	mov	r5,r20
    f338:	9809883a 	mov	r4,r19
    f33c:	00173440 	call	17344 <__ssprint_r>
    f340:	103d0e1e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f344:	d8c02017 	ldw	r3,128(sp)
    f348:	d8801f17 	ldw	r2,124(sp)
    f34c:	da000404 	addi	r8,sp,16
    f350:	003fee06 	br	f30c <__alt_data_end+0xfc00f30c>
    f354:	d9403117 	ldw	r5,196(sp)
    f358:	d8802917 	ldw	r2,164(sp)
    f35c:	28adc83a 	sub	r22,r5,r2
    f360:	05be430e 	bge	zero,r22,ec70 <__alt_data_end+0xfc00ec70>
    f364:	07000404 	movi	fp,16
    f368:	d8801f17 	ldw	r2,124(sp)
    f36c:	e583a20e 	bge	fp,r22,101f8 <___svfprintf_internal_r+0x1e18>
    f370:	014000f4 	movhi	r5,3
    f374:	29656684 	addi	r5,r5,-27238
    f378:	dc403015 	stw	r17,192(sp)
    f37c:	d9402c15 	stw	r5,176(sp)
    f380:	b023883a 	mov	r17,r22
    f384:	050001c4 	movi	r20,7
    f388:	902d883a 	mov	r22,r18
    f38c:	8025883a 	mov	r18,r16
    f390:	dc002d17 	ldw	r16,180(sp)
    f394:	00000306 	br	f3a4 <___svfprintf_internal_r+0xfc4>
    f398:	8c7ffc04 	addi	r17,r17,-16
    f39c:	42000204 	addi	r8,r8,8
    f3a0:	e440110e 	bge	fp,r17,f3e8 <___svfprintf_internal_r+0x1008>
    f3a4:	18c00404 	addi	r3,r3,16
    f3a8:	10800044 	addi	r2,r2,1
    f3ac:	45400015 	stw	r21,0(r8)
    f3b0:	47000115 	stw	fp,4(r8)
    f3b4:	d8c02015 	stw	r3,128(sp)
    f3b8:	d8801f15 	stw	r2,124(sp)
    f3bc:	a0bff60e 	bge	r20,r2,f398 <__alt_data_end+0xfc00f398>
    f3c0:	d9801e04 	addi	r6,sp,120
    f3c4:	800b883a 	mov	r5,r16
    f3c8:	9809883a 	mov	r4,r19
    f3cc:	00173440 	call	17344 <__ssprint_r>
    f3d0:	103cea1e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f3d4:	8c7ffc04 	addi	r17,r17,-16
    f3d8:	d8c02017 	ldw	r3,128(sp)
    f3dc:	d8801f17 	ldw	r2,124(sp)
    f3e0:	da000404 	addi	r8,sp,16
    f3e4:	e47fef16 	blt	fp,r17,f3a4 <__alt_data_end+0xfc00f3a4>
    f3e8:	9021883a 	mov	r16,r18
    f3ec:	b025883a 	mov	r18,r22
    f3f0:	882d883a 	mov	r22,r17
    f3f4:	dc403017 	ldw	r17,192(sp)
    f3f8:	d9002c17 	ldw	r4,176(sp)
    f3fc:	1d87883a 	add	r3,r3,r22
    f400:	10800044 	addi	r2,r2,1
    f404:	41000015 	stw	r4,0(r8)
    f408:	45800115 	stw	r22,4(r8)
    f40c:	d8c02015 	stw	r3,128(sp)
    f410:	d8801f15 	stw	r2,124(sp)
    f414:	010001c4 	movi	r4,7
    f418:	20819a16 	blt	r4,r2,fa84 <___svfprintf_internal_r+0x16a4>
    f41c:	42000204 	addi	r8,r8,8
    f420:	003e1306 	br	ec70 <__alt_data_end+0xfc00ec70>
    f424:	d9403317 	ldw	r5,204(sp)
    f428:	00800044 	movi	r2,1
    f42c:	18c00044 	addi	r3,r3,1
    f430:	1141710e 	bge	r2,r5,f9f8 <___svfprintf_internal_r+0x1618>
    f434:	dc401f17 	ldw	r17,124(sp)
    f438:	00800044 	movi	r2,1
    f43c:	40800115 	stw	r2,4(r8)
    f440:	8c400044 	addi	r17,r17,1
    f444:	44000015 	stw	r16,0(r8)
    f448:	d8c02015 	stw	r3,128(sp)
    f44c:	dc401f15 	stw	r17,124(sp)
    f450:	008001c4 	movi	r2,7
    f454:	14417416 	blt	r2,r17,fa28 <___svfprintf_internal_r+0x1648>
    f458:	42000204 	addi	r8,r8,8
    f45c:	d8803817 	ldw	r2,224(sp)
    f460:	d9003417 	ldw	r4,208(sp)
    f464:	8c400044 	addi	r17,r17,1
    f468:	10c7883a 	add	r3,r2,r3
    f46c:	40800115 	stw	r2,4(r8)
    f470:	41000015 	stw	r4,0(r8)
    f474:	d8c02015 	stw	r3,128(sp)
    f478:	dc401f15 	stw	r17,124(sp)
    f47c:	008001c4 	movi	r2,7
    f480:	14417216 	blt	r2,r17,fa4c <___svfprintf_internal_r+0x166c>
    f484:	45800204 	addi	r22,r8,8
    f488:	d9003617 	ldw	r4,216(sp)
    f48c:	d9403717 	ldw	r5,220(sp)
    f490:	000d883a 	mov	r6,zero
    f494:	000f883a 	mov	r7,zero
    f498:	d8c03d15 	stw	r3,244(sp)
    f49c:	001c7340 	call	1c734 <__eqdf2>
    f4a0:	d8c03d17 	ldw	r3,244(sp)
    f4a4:	1000b326 	beq	r2,zero,f774 <___svfprintf_internal_r+0x1394>
    f4a8:	d9403317 	ldw	r5,204(sp)
    f4ac:	84000044 	addi	r16,r16,1
    f4b0:	8c400044 	addi	r17,r17,1
    f4b4:	28bfffc4 	addi	r2,r5,-1
    f4b8:	1887883a 	add	r3,r3,r2
    f4bc:	b0800115 	stw	r2,4(r22)
    f4c0:	b4000015 	stw	r16,0(r22)
    f4c4:	d8c02015 	stw	r3,128(sp)
    f4c8:	dc401f15 	stw	r17,124(sp)
    f4cc:	008001c4 	movi	r2,7
    f4d0:	1440d216 	blt	r2,r17,f81c <___svfprintf_internal_r+0x143c>
    f4d4:	b5800204 	addi	r22,r22,8
    f4d8:	d9003b17 	ldw	r4,236(sp)
    f4dc:	df0022c4 	addi	fp,sp,139
    f4e0:	8c400044 	addi	r17,r17,1
    f4e4:	20c7883a 	add	r3,r4,r3
    f4e8:	b7000015 	stw	fp,0(r22)
    f4ec:	b1000115 	stw	r4,4(r22)
    f4f0:	d8c02015 	stw	r3,128(sp)
    f4f4:	dc401f15 	stw	r17,124(sp)
    f4f8:	008001c4 	movi	r2,7
    f4fc:	14400e16 	blt	r2,r17,f538 <___svfprintf_internal_r+0x1158>
    f500:	b2000204 	addi	r8,r22,8
    f504:	003e1a06 	br	ed70 <__alt_data_end+0xfc00ed70>
    f508:	010000f4 	movhi	r4,3
    f50c:	21256684 	addi	r4,r4,-27238
    f510:	d9002c15 	stw	r4,176(sp)
    f514:	d9002c17 	ldw	r4,176(sp)
    f518:	1c07883a 	add	r3,r3,r16
    f51c:	44000115 	stw	r16,4(r8)
    f520:	41000015 	stw	r4,0(r8)
    f524:	10800044 	addi	r2,r2,1
    f528:	d8c02015 	stw	r3,128(sp)
    f52c:	d8801f15 	stw	r2,124(sp)
    f530:	010001c4 	movi	r4,7
    f534:	20be0d0e 	bge	r4,r2,ed6c <__alt_data_end+0xfc00ed6c>
    f538:	d9402d17 	ldw	r5,180(sp)
    f53c:	d9801e04 	addi	r6,sp,120
    f540:	9809883a 	mov	r4,r19
    f544:	00173440 	call	17344 <__ssprint_r>
    f548:	103c8c1e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f54c:	d8c02017 	ldw	r3,128(sp)
    f550:	da000404 	addi	r8,sp,16
    f554:	003e0606 	br	ed70 <__alt_data_end+0xfc00ed70>
    f558:	d9402d17 	ldw	r5,180(sp)
    f55c:	d9801e04 	addi	r6,sp,120
    f560:	9809883a 	mov	r4,r19
    f564:	00173440 	call	17344 <__ssprint_r>
    f568:	103e3d26 	beq	r2,zero,ee60 <__alt_data_end+0xfc00ee60>
    f56c:	003c8306 	br	e77c <__alt_data_end+0xfc00e77c>
    f570:	d9402d17 	ldw	r5,180(sp)
    f574:	d9801e04 	addi	r6,sp,120
    f578:	9809883a 	mov	r4,r19
    f57c:	00173440 	call	17344 <__ssprint_r>
    f580:	103c7e1e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f584:	d8c02017 	ldw	r3,128(sp)
    f588:	da000404 	addi	r8,sp,16
    f58c:	003deb06 	br	ed3c <__alt_data_end+0xfc00ed3c>
    f590:	d9402d17 	ldw	r5,180(sp)
    f594:	d9801e04 	addi	r6,sp,120
    f598:	9809883a 	mov	r4,r19
    f59c:	00173440 	call	17344 <__ssprint_r>
    f5a0:	103c761e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f5a4:	d8c02017 	ldw	r3,128(sp)
    f5a8:	da000404 	addi	r8,sp,16
    f5ac:	003d9f06 	br	ec2c <__alt_data_end+0xfc00ec2c>
    f5b0:	d9402d17 	ldw	r5,180(sp)
    f5b4:	d9801e04 	addi	r6,sp,120
    f5b8:	9809883a 	mov	r4,r19
    f5bc:	00173440 	call	17344 <__ssprint_r>
    f5c0:	103c6e1e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f5c4:	d8c02017 	ldw	r3,128(sp)
    f5c8:	da000404 	addi	r8,sp,16
    f5cc:	003da506 	br	ec64 <__alt_data_end+0xfc00ec64>
    f5d0:	d9402a17 	ldw	r5,168(sp)
    f5d4:	d8002785 	stb	zero,158(sp)
    f5d8:	283f0816 	blt	r5,zero,f1fc <__alt_data_end+0xfc00f1fc>
    f5dc:	00ffdfc4 	movi	r3,-129
    f5e0:	a584b03a 	or	r2,r20,r22
    f5e4:	90e4703a 	and	r18,r18,r3
    f5e8:	103c5126 	beq	r2,zero,e730 <__alt_data_end+0xfc00e730>
    f5ec:	0039883a 	mov	fp,zero
    f5f0:	003e5a06 	br	ef5c <__alt_data_end+0xfc00ef5c>
    f5f4:	9080040c 	andi	r2,r18,16
    f5f8:	10013d26 	beq	r2,zero,faf0 <___svfprintf_internal_r+0x1710>
    f5fc:	d8c02e17 	ldw	r3,184(sp)
    f600:	d9002a17 	ldw	r4,168(sp)
    f604:	d8002785 	stb	zero,158(sp)
    f608:	18800104 	addi	r2,r3,4
    f60c:	1d000017 	ldw	r20,0(r3)
    f610:	002d883a 	mov	r22,zero
    f614:	20013f16 	blt	r4,zero,fb14 <___svfprintf_internal_r+0x1734>
    f618:	00ffdfc4 	movi	r3,-129
    f61c:	d8802e15 	stw	r2,184(sp)
    f620:	90e4703a 	and	r18,r18,r3
    f624:	a03d0926 	beq	r20,zero,ea4c <__alt_data_end+0xfc00ea4c>
    f628:	0039883a 	mov	fp,zero
    f62c:	003d0c06 	br	ea60 <__alt_data_end+0xfc00ea60>
    f630:	dc402617 	ldw	r17,152(sp)
    f634:	0441830e 	bge	zero,r17,fc44 <___svfprintf_internal_r+0x1864>
    f638:	dc403217 	ldw	r17,200(sp)
    f63c:	d8803317 	ldw	r2,204(sp)
    f640:	1440010e 	bge	r2,r17,f648 <___svfprintf_internal_r+0x1268>
    f644:	1023883a 	mov	r17,r2
    f648:	04400a0e 	bge	zero,r17,f674 <___svfprintf_internal_r+0x1294>
    f64c:	d8801f17 	ldw	r2,124(sp)
    f650:	1c47883a 	add	r3,r3,r17
    f654:	44000015 	stw	r16,0(r8)
    f658:	10800044 	addi	r2,r2,1
    f65c:	44400115 	stw	r17,4(r8)
    f660:	d8c02015 	stw	r3,128(sp)
    f664:	d8801f15 	stw	r2,124(sp)
    f668:	010001c4 	movi	r4,7
    f66c:	20827516 	blt	r4,r2,10044 <___svfprintf_internal_r+0x1c64>
    f670:	42000204 	addi	r8,r8,8
    f674:	88027b16 	blt	r17,zero,10064 <___svfprintf_internal_r+0x1c84>
    f678:	d9003217 	ldw	r4,200(sp)
    f67c:	2463c83a 	sub	r17,r4,r17
    f680:	0440990e 	bge	zero,r17,f8e8 <___svfprintf_internal_r+0x1508>
    f684:	05800404 	movi	r22,16
    f688:	d8801f17 	ldw	r2,124(sp)
    f68c:	b441530e 	bge	r22,r17,fbdc <___svfprintf_internal_r+0x17fc>
    f690:	010000f4 	movhi	r4,3
    f694:	21256684 	addi	r4,r4,-27238
    f698:	d9002c15 	stw	r4,176(sp)
    f69c:	070001c4 	movi	fp,7
    f6a0:	dd002d17 	ldw	r20,180(sp)
    f6a4:	00000306 	br	f6b4 <___svfprintf_internal_r+0x12d4>
    f6a8:	42000204 	addi	r8,r8,8
    f6ac:	8c7ffc04 	addi	r17,r17,-16
    f6b0:	b4414d0e 	bge	r22,r17,fbe8 <___svfprintf_internal_r+0x1808>
    f6b4:	18c00404 	addi	r3,r3,16
    f6b8:	10800044 	addi	r2,r2,1
    f6bc:	45400015 	stw	r21,0(r8)
    f6c0:	45800115 	stw	r22,4(r8)
    f6c4:	d8c02015 	stw	r3,128(sp)
    f6c8:	d8801f15 	stw	r2,124(sp)
    f6cc:	e0bff60e 	bge	fp,r2,f6a8 <__alt_data_end+0xfc00f6a8>
    f6d0:	d9801e04 	addi	r6,sp,120
    f6d4:	a00b883a 	mov	r5,r20
    f6d8:	9809883a 	mov	r4,r19
    f6dc:	00173440 	call	17344 <__ssprint_r>
    f6e0:	103c261e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f6e4:	d8c02017 	ldw	r3,128(sp)
    f6e8:	d8801f17 	ldw	r2,124(sp)
    f6ec:	da000404 	addi	r8,sp,16
    f6f0:	003fee06 	br	f6ac <__alt_data_end+0xfc00f6ac>
    f6f4:	d9402d17 	ldw	r5,180(sp)
    f6f8:	d9801e04 	addi	r6,sp,120
    f6fc:	9809883a 	mov	r4,r19
    f700:	00173440 	call	17344 <__ssprint_r>
    f704:	103c1d1e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f708:	d8c02017 	ldw	r3,128(sp)
    f70c:	df002787 	ldb	fp,158(sp)
    f710:	da000404 	addi	r8,sp,16
    f714:	003d3806 	br	ebf8 <__alt_data_end+0xfc00ebf8>
    f718:	9080040c 	andi	r2,r18,16
    f71c:	10005c26 	beq	r2,zero,f890 <___svfprintf_internal_r+0x14b0>
    f720:	d8c02e17 	ldw	r3,184(sp)
    f724:	d9002a17 	ldw	r4,168(sp)
    f728:	d8002785 	stb	zero,158(sp)
    f72c:	18800104 	addi	r2,r3,4
    f730:	1d000017 	ldw	r20,0(r3)
    f734:	002d883a 	mov	r22,zero
    f738:	20005e16 	blt	r4,zero,f8b4 <___svfprintf_internal_r+0x14d4>
    f73c:	00ffdfc4 	movi	r3,-129
    f740:	d8802e15 	stw	r2,184(sp)
    f744:	90e4703a 	and	r18,r18,r3
    f748:	0039883a 	mov	fp,zero
    f74c:	a03ddf26 	beq	r20,zero,eecc <__alt_data_end+0xfc00eecc>
    f750:	00800244 	movi	r2,9
    f754:	153c8e36 	bltu	r2,r20,e990 <__alt_data_end+0xfc00e990>
    f758:	a5000c04 	addi	r20,r20,48
    f75c:	dc001dc4 	addi	r16,sp,119
    f760:	dd001dc5 	stb	r20,119(sp)
    f764:	d8c02817 	ldw	r3,160(sp)
    f768:	1c07c83a 	sub	r3,r3,r16
    f76c:	d8c02b15 	stw	r3,172(sp)
    f770:	003cd306 	br	eac0 <__alt_data_end+0xfc00eac0>
    f774:	d8803317 	ldw	r2,204(sp)
    f778:	143fffc4 	addi	r16,r2,-1
    f77c:	043f560e 	bge	zero,r16,f4d8 <__alt_data_end+0xfc00f4d8>
    f780:	07000404 	movi	fp,16
    f784:	e403530e 	bge	fp,r16,104d4 <___svfprintf_internal_r+0x20f4>
    f788:	014000f4 	movhi	r5,3
    f78c:	29656684 	addi	r5,r5,-27238
    f790:	d9402c15 	stw	r5,176(sp)
    f794:	01c001c4 	movi	r7,7
    f798:	dd002d17 	ldw	r20,180(sp)
    f79c:	00000306 	br	f7ac <___svfprintf_internal_r+0x13cc>
    f7a0:	843ffc04 	addi	r16,r16,-16
    f7a4:	b5800204 	addi	r22,r22,8
    f7a8:	e400130e 	bge	fp,r16,f7f8 <___svfprintf_internal_r+0x1418>
    f7ac:	18c00404 	addi	r3,r3,16
    f7b0:	8c400044 	addi	r17,r17,1
    f7b4:	b5400015 	stw	r21,0(r22)
    f7b8:	b7000115 	stw	fp,4(r22)
    f7bc:	d8c02015 	stw	r3,128(sp)
    f7c0:	dc401f15 	stw	r17,124(sp)
    f7c4:	3c7ff60e 	bge	r7,r17,f7a0 <__alt_data_end+0xfc00f7a0>
    f7c8:	d9801e04 	addi	r6,sp,120
    f7cc:	a00b883a 	mov	r5,r20
    f7d0:	9809883a 	mov	r4,r19
    f7d4:	d9c03d15 	stw	r7,244(sp)
    f7d8:	00173440 	call	17344 <__ssprint_r>
    f7dc:	d9c03d17 	ldw	r7,244(sp)
    f7e0:	103be61e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f7e4:	843ffc04 	addi	r16,r16,-16
    f7e8:	d8c02017 	ldw	r3,128(sp)
    f7ec:	dc401f17 	ldw	r17,124(sp)
    f7f0:	dd800404 	addi	r22,sp,16
    f7f4:	e43fed16 	blt	fp,r16,f7ac <__alt_data_end+0xfc00f7ac>
    f7f8:	d8802c17 	ldw	r2,176(sp)
    f7fc:	1c07883a 	add	r3,r3,r16
    f800:	8c400044 	addi	r17,r17,1
    f804:	b0800015 	stw	r2,0(r22)
    f808:	b4000115 	stw	r16,4(r22)
    f80c:	d8c02015 	stw	r3,128(sp)
    f810:	dc401f15 	stw	r17,124(sp)
    f814:	008001c4 	movi	r2,7
    f818:	147f2e0e 	bge	r2,r17,f4d4 <__alt_data_end+0xfc00f4d4>
    f81c:	d9402d17 	ldw	r5,180(sp)
    f820:	d9801e04 	addi	r6,sp,120
    f824:	9809883a 	mov	r4,r19
    f828:	00173440 	call	17344 <__ssprint_r>
    f82c:	103bd31e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f830:	d8c02017 	ldw	r3,128(sp)
    f834:	dc401f17 	ldw	r17,124(sp)
    f838:	dd800404 	addi	r22,sp,16
    f83c:	003f2606 	br	f4d8 <__alt_data_end+0xfc00f4d8>
    f840:	9080040c 	andi	r2,r18,16
    f844:	1000c326 	beq	r2,zero,fb54 <___svfprintf_internal_r+0x1774>
    f848:	d9402e17 	ldw	r5,184(sp)
    f84c:	2d000017 	ldw	r20,0(r5)
    f850:	29400104 	addi	r5,r5,4
    f854:	d9402e15 	stw	r5,184(sp)
    f858:	a02dd7fa 	srai	r22,r20,31
    f85c:	b005883a 	mov	r2,r22
    f860:	103c430e 	bge	r2,zero,e970 <__alt_data_end+0xfc00e970>
    f864:	d9402a17 	ldw	r5,168(sp)
    f868:	0529c83a 	sub	r20,zero,r20
    f86c:	07000b44 	movi	fp,45
    f870:	a004c03a 	cmpne	r2,r20,zero
    f874:	05adc83a 	sub	r22,zero,r22
    f878:	df002785 	stb	fp,158(sp)
    f87c:	b0adc83a 	sub	r22,r22,r2
    f880:	28022e16 	blt	r5,zero,1013c <___svfprintf_internal_r+0x1d5c>
    f884:	00bfdfc4 	movi	r2,-129
    f888:	90a4703a 	and	r18,r18,r2
    f88c:	003c3f06 	br	e98c <__alt_data_end+0xfc00e98c>
    f890:	9080100c 	andi	r2,r18,64
    f894:	d8002785 	stb	zero,158(sp)
    f898:	10012526 	beq	r2,zero,fd30 <___svfprintf_internal_r+0x1950>
    f89c:	d9402e17 	ldw	r5,184(sp)
    f8a0:	d8c02a17 	ldw	r3,168(sp)
    f8a4:	002d883a 	mov	r22,zero
    f8a8:	28800104 	addi	r2,r5,4
    f8ac:	2d00000b 	ldhu	r20,0(r5)
    f8b0:	183fa20e 	bge	r3,zero,f73c <__alt_data_end+0xfc00f73c>
    f8b4:	d8802e15 	stw	r2,184(sp)
    f8b8:	0039883a 	mov	fp,zero
    f8bc:	a584b03a 	or	r2,r20,r22
    f8c0:	103c321e 	bne	r2,zero,e98c <__alt_data_end+0xfc00e98c>
    f8c4:	00800044 	movi	r2,1
    f8c8:	003e5006 	br	f20c <__alt_data_end+0xfc00f20c>
    f8cc:	d9402d17 	ldw	r5,180(sp)
    f8d0:	d9801e04 	addi	r6,sp,120
    f8d4:	9809883a 	mov	r4,r19
    f8d8:	00173440 	call	17344 <__ssprint_r>
    f8dc:	103ba71e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f8e0:	d8c02017 	ldw	r3,128(sp)
    f8e4:	da000404 	addi	r8,sp,16
    f8e8:	d9003217 	ldw	r4,200(sp)
    f8ec:	d8802617 	ldw	r2,152(sp)
    f8f0:	d9403317 	ldw	r5,204(sp)
    f8f4:	8123883a 	add	r17,r16,r4
    f8f8:	11400216 	blt	r2,r5,f904 <___svfprintf_internal_r+0x1524>
    f8fc:	9100004c 	andi	r4,r18,1
    f900:	20000d26 	beq	r4,zero,f938 <___svfprintf_internal_r+0x1558>
    f904:	d9003817 	ldw	r4,224(sp)
    f908:	d9403417 	ldw	r5,208(sp)
    f90c:	1907883a 	add	r3,r3,r4
    f910:	d9001f17 	ldw	r4,124(sp)
    f914:	41400015 	stw	r5,0(r8)
    f918:	d9403817 	ldw	r5,224(sp)
    f91c:	21000044 	addi	r4,r4,1
    f920:	d8c02015 	stw	r3,128(sp)
    f924:	41400115 	stw	r5,4(r8)
    f928:	d9001f15 	stw	r4,124(sp)
    f92c:	014001c4 	movi	r5,7
    f930:	2901dc16 	blt	r5,r4,100a4 <___svfprintf_internal_r+0x1cc4>
    f934:	42000204 	addi	r8,r8,8
    f938:	d9003317 	ldw	r4,204(sp)
    f93c:	8121883a 	add	r16,r16,r4
    f940:	2085c83a 	sub	r2,r4,r2
    f944:	8461c83a 	sub	r16,r16,r17
    f948:	1400010e 	bge	r2,r16,f950 <___svfprintf_internal_r+0x1570>
    f94c:	1021883a 	mov	r16,r2
    f950:	04000a0e 	bge	zero,r16,f97c <___svfprintf_internal_r+0x159c>
    f954:	d9001f17 	ldw	r4,124(sp)
    f958:	1c07883a 	add	r3,r3,r16
    f95c:	44400015 	stw	r17,0(r8)
    f960:	21000044 	addi	r4,r4,1
    f964:	44000115 	stw	r16,4(r8)
    f968:	d8c02015 	stw	r3,128(sp)
    f96c:	d9001f15 	stw	r4,124(sp)
    f970:	014001c4 	movi	r5,7
    f974:	2901e616 	blt	r5,r4,10110 <___svfprintf_internal_r+0x1d30>
    f978:	42000204 	addi	r8,r8,8
    f97c:	8001f616 	blt	r16,zero,10158 <___svfprintf_internal_r+0x1d78>
    f980:	1421c83a 	sub	r16,r2,r16
    f984:	043cfa0e 	bge	zero,r16,ed70 <__alt_data_end+0xfc00ed70>
    f988:	04400404 	movi	r17,16
    f98c:	d8801f17 	ldw	r2,124(sp)
    f990:	8c3edd0e 	bge	r17,r16,f508 <__alt_data_end+0xfc00f508>
    f994:	014000f4 	movhi	r5,3
    f998:	29656684 	addi	r5,r5,-27238
    f99c:	d9402c15 	stw	r5,176(sp)
    f9a0:	058001c4 	movi	r22,7
    f9a4:	dd002d17 	ldw	r20,180(sp)
    f9a8:	00000306 	br	f9b8 <___svfprintf_internal_r+0x15d8>
    f9ac:	42000204 	addi	r8,r8,8
    f9b0:	843ffc04 	addi	r16,r16,-16
    f9b4:	8c3ed70e 	bge	r17,r16,f514 <__alt_data_end+0xfc00f514>
    f9b8:	18c00404 	addi	r3,r3,16
    f9bc:	10800044 	addi	r2,r2,1
    f9c0:	45400015 	stw	r21,0(r8)
    f9c4:	44400115 	stw	r17,4(r8)
    f9c8:	d8c02015 	stw	r3,128(sp)
    f9cc:	d8801f15 	stw	r2,124(sp)
    f9d0:	b0bff60e 	bge	r22,r2,f9ac <__alt_data_end+0xfc00f9ac>
    f9d4:	d9801e04 	addi	r6,sp,120
    f9d8:	a00b883a 	mov	r5,r20
    f9dc:	9809883a 	mov	r4,r19
    f9e0:	00173440 	call	17344 <__ssprint_r>
    f9e4:	103b651e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    f9e8:	d8c02017 	ldw	r3,128(sp)
    f9ec:	d8801f17 	ldw	r2,124(sp)
    f9f0:	da000404 	addi	r8,sp,16
    f9f4:	003fee06 	br	f9b0 <__alt_data_end+0xfc00f9b0>
    f9f8:	9088703a 	and	r4,r18,r2
    f9fc:	203e8d1e 	bne	r4,zero,f434 <__alt_data_end+0xfc00f434>
    fa00:	dc401f17 	ldw	r17,124(sp)
    fa04:	40800115 	stw	r2,4(r8)
    fa08:	44000015 	stw	r16,0(r8)
    fa0c:	8c400044 	addi	r17,r17,1
    fa10:	d8c02015 	stw	r3,128(sp)
    fa14:	dc401f15 	stw	r17,124(sp)
    fa18:	008001c4 	movi	r2,7
    fa1c:	147f7f16 	blt	r2,r17,f81c <__alt_data_end+0xfc00f81c>
    fa20:	45800204 	addi	r22,r8,8
    fa24:	003eac06 	br	f4d8 <__alt_data_end+0xfc00f4d8>
    fa28:	d9402d17 	ldw	r5,180(sp)
    fa2c:	d9801e04 	addi	r6,sp,120
    fa30:	9809883a 	mov	r4,r19
    fa34:	00173440 	call	17344 <__ssprint_r>
    fa38:	103b501e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    fa3c:	d8c02017 	ldw	r3,128(sp)
    fa40:	dc401f17 	ldw	r17,124(sp)
    fa44:	da000404 	addi	r8,sp,16
    fa48:	003e8406 	br	f45c <__alt_data_end+0xfc00f45c>
    fa4c:	d9402d17 	ldw	r5,180(sp)
    fa50:	d9801e04 	addi	r6,sp,120
    fa54:	9809883a 	mov	r4,r19
    fa58:	00173440 	call	17344 <__ssprint_r>
    fa5c:	103b471e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    fa60:	d8c02017 	ldw	r3,128(sp)
    fa64:	dc401f17 	ldw	r17,124(sp)
    fa68:	dd800404 	addi	r22,sp,16
    fa6c:	003e8606 	br	f488 <__alt_data_end+0xfc00f488>
    fa70:	0029883a 	mov	r20,zero
    fa74:	a5000c04 	addi	r20,r20,48
    fa78:	dc001dc4 	addi	r16,sp,119
    fa7c:	dd001dc5 	stb	r20,119(sp)
    fa80:	003f3806 	br	f764 <__alt_data_end+0xfc00f764>
    fa84:	d9402d17 	ldw	r5,180(sp)
    fa88:	d9801e04 	addi	r6,sp,120
    fa8c:	9809883a 	mov	r4,r19
    fa90:	00173440 	call	17344 <__ssprint_r>
    fa94:	103b391e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    fa98:	d8c02017 	ldw	r3,128(sp)
    fa9c:	da000404 	addi	r8,sp,16
    faa0:	003c7306 	br	ec70 <__alt_data_end+0xfc00ec70>
    faa4:	d9003617 	ldw	r4,216(sp)
    faa8:	d9403717 	ldw	r5,220(sp)
    faac:	da003e15 	stw	r8,248(sp)
    fab0:	00171940 	call	17194 <__fpclassifyd>
    fab4:	da003e17 	ldw	r8,248(sp)
    fab8:	1000bd1e 	bne	r2,zero,fdb0 <___svfprintf_internal_r+0x19d0>
    fabc:	008011c4 	movi	r2,71
    fac0:	14411e0e 	bge	r2,r17,ff3c <___svfprintf_internal_r+0x1b5c>
    fac4:	040000f4 	movhi	r16,3
    fac8:	84255904 	addi	r16,r16,-27292
    facc:	00c000c4 	movi	r3,3
    fad0:	00bfdfc4 	movi	r2,-129
    fad4:	d8c02915 	stw	r3,164(sp)
    fad8:	90a4703a 	and	r18,r18,r2
    fadc:	df002783 	ldbu	fp,158(sp)
    fae0:	d8c02b15 	stw	r3,172(sp)
    fae4:	d8002a15 	stw	zero,168(sp)
    fae8:	d8003215 	stw	zero,200(sp)
    faec:	003bfa06 	br	ead8 <__alt_data_end+0xfc00ead8>
    faf0:	9080100c 	andi	r2,r18,64
    faf4:	d8002785 	stb	zero,158(sp)
    faf8:	10009426 	beq	r2,zero,fd4c <___svfprintf_internal_r+0x196c>
    fafc:	d9402e17 	ldw	r5,184(sp)
    fb00:	d8c02a17 	ldw	r3,168(sp)
    fb04:	002d883a 	mov	r22,zero
    fb08:	28800104 	addi	r2,r5,4
    fb0c:	2d00000b 	ldhu	r20,0(r5)
    fb10:	183ec10e 	bge	r3,zero,f618 <__alt_data_end+0xfc00f618>
    fb14:	a586b03a 	or	r3,r20,r22
    fb18:	d8802e15 	stw	r2,184(sp)
    fb1c:	183ec21e 	bne	r3,zero,f628 <__alt_data_end+0xfc00f628>
    fb20:	0039883a 	mov	fp,zero
    fb24:	0005883a 	mov	r2,zero
    fb28:	003db806 	br	f20c <__alt_data_end+0xfc00f20c>
    fb2c:	d8c02e17 	ldw	r3,184(sp)
    fb30:	d9002e17 	ldw	r4,184(sp)
    fb34:	d9402e17 	ldw	r5,184(sp)
    fb38:	18c00017 	ldw	r3,0(r3)
    fb3c:	21000117 	ldw	r4,4(r4)
    fb40:	29400204 	addi	r5,r5,8
    fb44:	d8c03615 	stw	r3,216(sp)
    fb48:	d9003715 	stw	r4,220(sp)
    fb4c:	d9402e15 	stw	r5,184(sp)
    fb50:	003b5a06 	br	e8bc <__alt_data_end+0xfc00e8bc>
    fb54:	9080100c 	andi	r2,r18,64
    fb58:	10010726 	beq	r2,zero,ff78 <___svfprintf_internal_r+0x1b98>
    fb5c:	d8802e17 	ldw	r2,184(sp)
    fb60:	1500000f 	ldh	r20,0(r2)
    fb64:	10800104 	addi	r2,r2,4
    fb68:	d8802e15 	stw	r2,184(sp)
    fb6c:	a02dd7fa 	srai	r22,r20,31
    fb70:	b005883a 	mov	r2,r22
    fb74:	003b7d06 	br	e96c <__alt_data_end+0xfc00e96c>
    fb78:	9080100c 	andi	r2,r18,64
    fb7c:	10010526 	beq	r2,zero,ff94 <___svfprintf_internal_r+0x1bb4>
    fb80:	d8c02e17 	ldw	r3,184(sp)
    fb84:	002d883a 	mov	r22,zero
    fb88:	1d00000b 	ldhu	r20,0(r3)
    fb8c:	18c00104 	addi	r3,r3,4
    fb90:	d8c02e15 	stw	r3,184(sp)
    fb94:	003ce206 	br	ef20 <__alt_data_end+0xfc00ef20>
    fb98:	bc400007 	ldb	r17,0(r23)
    fb9c:	003a6506 	br	e534 <__alt_data_end+0xfc00e534>
    fba0:	9080040c 	andi	r2,r18,16
    fba4:	10010126 	beq	r2,zero,ffac <___svfprintf_internal_r+0x1bcc>
    fba8:	d8c02e17 	ldw	r3,184(sp)
    fbac:	d9002f17 	ldw	r4,188(sp)
    fbb0:	18800017 	ldw	r2,0(r3)
    fbb4:	18c00104 	addi	r3,r3,4
    fbb8:	d8c02e15 	stw	r3,184(sp)
    fbbc:	11000015 	stw	r4,0(r2)
    fbc0:	003a3206 	br	e48c <__alt_data_end+0xfc00e48c>
    fbc4:	d9002a17 	ldw	r4,168(sp)
    fbc8:	d8002785 	stb	zero,158(sp)
    fbcc:	203d8d16 	blt	r4,zero,f204 <__alt_data_end+0xfc00f204>
    fbd0:	00bfdfc4 	movi	r2,-129
    fbd4:	90a4703a 	and	r18,r18,r2
    fbd8:	003ad506 	br	e730 <__alt_data_end+0xfc00e730>
    fbdc:	014000f4 	movhi	r5,3
    fbe0:	29656684 	addi	r5,r5,-27238
    fbe4:	d9402c15 	stw	r5,176(sp)
    fbe8:	d9402c17 	ldw	r5,176(sp)
    fbec:	1c47883a 	add	r3,r3,r17
    fbf0:	10800044 	addi	r2,r2,1
    fbf4:	41400015 	stw	r5,0(r8)
    fbf8:	44400115 	stw	r17,4(r8)
    fbfc:	d8c02015 	stw	r3,128(sp)
    fc00:	d8801f15 	stw	r2,124(sp)
    fc04:	010001c4 	movi	r4,7
    fc08:	20bf3016 	blt	r4,r2,f8cc <__alt_data_end+0xfc00f8cc>
    fc0c:	42000204 	addi	r8,r8,8
    fc10:	003f3506 	br	f8e8 <__alt_data_end+0xfc00f8e8>
    fc14:	010000f4 	movhi	r4,3
    fc18:	21256684 	addi	r4,r4,-27238
    fc1c:	d9002c15 	stw	r4,176(sp)
    fc20:	003c3c06 	br	ed14 <__alt_data_end+0xfc00ed14>
    fc24:	d9402d17 	ldw	r5,180(sp)
    fc28:	d9801e04 	addi	r6,sp,120
    fc2c:	9809883a 	mov	r4,r19
    fc30:	00173440 	call	17344 <__ssprint_r>
    fc34:	103ad11e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    fc38:	d8c02017 	ldw	r3,128(sp)
    fc3c:	da000404 	addi	r8,sp,16
    fc40:	003d9306 	br	f290 <__alt_data_end+0xfc00f290>
    fc44:	d8801f17 	ldw	r2,124(sp)
    fc48:	014000f4 	movhi	r5,3
    fc4c:	01000044 	movi	r4,1
    fc50:	18c00044 	addi	r3,r3,1
    fc54:	10800044 	addi	r2,r2,1
    fc58:	29656604 	addi	r5,r5,-27240
    fc5c:	41000115 	stw	r4,4(r8)
    fc60:	41400015 	stw	r5,0(r8)
    fc64:	d8c02015 	stw	r3,128(sp)
    fc68:	d8801f15 	stw	r2,124(sp)
    fc6c:	010001c4 	movi	r4,7
    fc70:	2080b516 	blt	r4,r2,ff48 <___svfprintf_internal_r+0x1b68>
    fc74:	42000204 	addi	r8,r8,8
    fc78:	8800041e 	bne	r17,zero,fc8c <___svfprintf_internal_r+0x18ac>
    fc7c:	d8803317 	ldw	r2,204(sp)
    fc80:	1000021e 	bne	r2,zero,fc8c <___svfprintf_internal_r+0x18ac>
    fc84:	9080004c 	andi	r2,r18,1
    fc88:	103c3926 	beq	r2,zero,ed70 <__alt_data_end+0xfc00ed70>
    fc8c:	d9003817 	ldw	r4,224(sp)
    fc90:	d8801f17 	ldw	r2,124(sp)
    fc94:	d9403417 	ldw	r5,208(sp)
    fc98:	20c7883a 	add	r3,r4,r3
    fc9c:	10800044 	addi	r2,r2,1
    fca0:	41000115 	stw	r4,4(r8)
    fca4:	41400015 	stw	r5,0(r8)
    fca8:	d8c02015 	stw	r3,128(sp)
    fcac:	d8801f15 	stw	r2,124(sp)
    fcb0:	010001c4 	movi	r4,7
    fcb4:	20818016 	blt	r4,r2,102b8 <___svfprintf_internal_r+0x1ed8>
    fcb8:	42000204 	addi	r8,r8,8
    fcbc:	0463c83a 	sub	r17,zero,r17
    fcc0:	0440cb0e 	bge	zero,r17,fff0 <___svfprintf_internal_r+0x1c10>
    fcc4:	05800404 	movi	r22,16
    fcc8:	b440e80e 	bge	r22,r17,1006c <___svfprintf_internal_r+0x1c8c>
    fccc:	014000f4 	movhi	r5,3
    fcd0:	29656684 	addi	r5,r5,-27238
    fcd4:	d9402c15 	stw	r5,176(sp)
    fcd8:	070001c4 	movi	fp,7
    fcdc:	dd002d17 	ldw	r20,180(sp)
    fce0:	00000306 	br	fcf0 <___svfprintf_internal_r+0x1910>
    fce4:	42000204 	addi	r8,r8,8
    fce8:	8c7ffc04 	addi	r17,r17,-16
    fcec:	b440e20e 	bge	r22,r17,10078 <___svfprintf_internal_r+0x1c98>
    fcf0:	18c00404 	addi	r3,r3,16
    fcf4:	10800044 	addi	r2,r2,1
    fcf8:	45400015 	stw	r21,0(r8)
    fcfc:	45800115 	stw	r22,4(r8)
    fd00:	d8c02015 	stw	r3,128(sp)
    fd04:	d8801f15 	stw	r2,124(sp)
    fd08:	e0bff60e 	bge	fp,r2,fce4 <__alt_data_end+0xfc00fce4>
    fd0c:	d9801e04 	addi	r6,sp,120
    fd10:	a00b883a 	mov	r5,r20
    fd14:	9809883a 	mov	r4,r19
    fd18:	00173440 	call	17344 <__ssprint_r>
    fd1c:	103a971e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    fd20:	d8c02017 	ldw	r3,128(sp)
    fd24:	d8801f17 	ldw	r2,124(sp)
    fd28:	da000404 	addi	r8,sp,16
    fd2c:	003fee06 	br	fce8 <__alt_data_end+0xfc00fce8>
    fd30:	d9002e17 	ldw	r4,184(sp)
    fd34:	d9402a17 	ldw	r5,168(sp)
    fd38:	002d883a 	mov	r22,zero
    fd3c:	20800104 	addi	r2,r4,4
    fd40:	25000017 	ldw	r20,0(r4)
    fd44:	283e7d0e 	bge	r5,zero,f73c <__alt_data_end+0xfc00f73c>
    fd48:	003eda06 	br	f8b4 <__alt_data_end+0xfc00f8b4>
    fd4c:	d9002e17 	ldw	r4,184(sp)
    fd50:	d9402a17 	ldw	r5,168(sp)
    fd54:	002d883a 	mov	r22,zero
    fd58:	20800104 	addi	r2,r4,4
    fd5c:	25000017 	ldw	r20,0(r4)
    fd60:	283e2d0e 	bge	r5,zero,f618 <__alt_data_end+0xfc00f618>
    fd64:	003f6b06 	br	fb14 <__alt_data_end+0xfc00fb14>
    fd68:	d8c02e15 	stw	r3,184(sp)
    fd6c:	0039883a 	mov	fp,zero
    fd70:	003ed206 	br	f8bc <__alt_data_end+0xfc00f8bc>
    fd74:	bc400043 	ldbu	r17,1(r23)
    fd78:	84000814 	ori	r16,r16,32
    fd7c:	bdc00044 	addi	r23,r23,1
    fd80:	8c403fcc 	andi	r17,r17,255
    fd84:	8c40201c 	xori	r17,r17,128
    fd88:	8c7fe004 	addi	r17,r17,-128
    fd8c:	0039e906 	br	e534 <__alt_data_end+0xfc00e534>
    fd90:	d9402d17 	ldw	r5,180(sp)
    fd94:	d9801e04 	addi	r6,sp,120
    fd98:	9809883a 	mov	r4,r19
    fd9c:	00173440 	call	17344 <__ssprint_r>
    fda0:	103a761e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    fda4:	d8c02017 	ldw	r3,128(sp)
    fda8:	da000404 	addi	r8,sp,16
    fdac:	003d4a06 	br	f2d8 <__alt_data_end+0xfc00f2d8>
    fdb0:	d9002a17 	ldw	r4,168(sp)
    fdb4:	05bff7c4 	movi	r22,-33
    fdb8:	00bfffc4 	movi	r2,-1
    fdbc:	8dac703a 	and	r22,r17,r22
    fdc0:	20806a26 	beq	r4,r2,ff6c <___svfprintf_internal_r+0x1b8c>
    fdc4:	008011c4 	movi	r2,71
    fdc8:	b0813726 	beq	r22,r2,102a8 <___svfprintf_internal_r+0x1ec8>
    fdcc:	d9003717 	ldw	r4,220(sp)
    fdd0:	90c04014 	ori	r3,r18,256
    fdd4:	d8c02c15 	stw	r3,176(sp)
    fdd8:	20015d16 	blt	r4,zero,10350 <___svfprintf_internal_r+0x1f70>
    fddc:	dd003717 	ldw	r20,220(sp)
    fde0:	d8002905 	stb	zero,164(sp)
    fde4:	00801984 	movi	r2,102
    fde8:	88814026 	beq	r17,r2,102ec <___svfprintf_internal_r+0x1f0c>
    fdec:	00801184 	movi	r2,70
    fdf0:	88817126 	beq	r17,r2,103b8 <___svfprintf_internal_r+0x1fd8>
    fdf4:	00801144 	movi	r2,69
    fdf8:	b0816226 	beq	r22,r2,10384 <___svfprintf_internal_r+0x1fa4>
    fdfc:	d8c02a17 	ldw	r3,168(sp)
    fe00:	d8802104 	addi	r2,sp,132
    fe04:	d8800315 	stw	r2,12(sp)
    fe08:	d9403617 	ldw	r5,216(sp)
    fe0c:	d8802504 	addi	r2,sp,148
    fe10:	d8800215 	stw	r2,8(sp)
    fe14:	d8802604 	addi	r2,sp,152
    fe18:	d8c00015 	stw	r3,0(sp)
    fe1c:	d8800115 	stw	r2,4(sp)
    fe20:	01c00084 	movi	r7,2
    fe24:	a00d883a 	mov	r6,r20
    fe28:	9809883a 	mov	r4,r19
    fe2c:	d8c03d15 	stw	r3,244(sp)
    fe30:	da003e15 	stw	r8,248(sp)
    fe34:	0012dd40 	call	12dd4 <_dtoa_r>
    fe38:	1021883a 	mov	r16,r2
    fe3c:	008019c4 	movi	r2,103
    fe40:	d8c03d17 	ldw	r3,244(sp)
    fe44:	da003e17 	ldw	r8,248(sp)
    fe48:	8880e726 	beq	r17,r2,101e8 <___svfprintf_internal_r+0x1e08>
    fe4c:	008011c4 	movi	r2,71
    fe50:	8880d426 	beq	r17,r2,101a4 <___svfprintf_internal_r+0x1dc4>
    fe54:	80f9883a 	add	fp,r16,r3
    fe58:	d9003617 	ldw	r4,216(sp)
    fe5c:	000d883a 	mov	r6,zero
    fe60:	000f883a 	mov	r7,zero
    fe64:	a00b883a 	mov	r5,r20
    fe68:	da003e15 	stw	r8,248(sp)
    fe6c:	001c7340 	call	1c734 <__eqdf2>
    fe70:	da003e17 	ldw	r8,248(sp)
    fe74:	1000e426 	beq	r2,zero,10208 <___svfprintf_internal_r+0x1e28>
    fe78:	d8802117 	ldw	r2,132(sp)
    fe7c:	1700062e 	bgeu	r2,fp,fe98 <___svfprintf_internal_r+0x1ab8>
    fe80:	01000c04 	movi	r4,48
    fe84:	10c00044 	addi	r3,r2,1
    fe88:	d8c02115 	stw	r3,132(sp)
    fe8c:	11000005 	stb	r4,0(r2)
    fe90:	d8802117 	ldw	r2,132(sp)
    fe94:	173ffb36 	bltu	r2,fp,fe84 <__alt_data_end+0xfc00fe84>
    fe98:	1405c83a 	sub	r2,r2,r16
    fe9c:	d8803315 	stw	r2,204(sp)
    fea0:	008011c4 	movi	r2,71
    fea4:	b080c526 	beq	r22,r2,101bc <___svfprintf_internal_r+0x1ddc>
    fea8:	00801944 	movi	r2,101
    feac:	1441d80e 	bge	r2,r17,10610 <___svfprintf_internal_r+0x2230>
    feb0:	d8c02617 	ldw	r3,152(sp)
    feb4:	00801984 	movi	r2,102
    feb8:	d8c03215 	stw	r3,200(sp)
    febc:	88813426 	beq	r17,r2,10390 <___svfprintf_internal_r+0x1fb0>
    fec0:	d8c03217 	ldw	r3,200(sp)
    fec4:	d9003317 	ldw	r4,204(sp)
    fec8:	19012516 	blt	r3,r4,10360 <___svfprintf_internal_r+0x1f80>
    fecc:	9480004c 	andi	r18,r18,1
    fed0:	9001841e 	bne	r18,zero,104e4 <___svfprintf_internal_r+0x2104>
    fed4:	1805883a 	mov	r2,r3
    fed8:	1801cb16 	blt	r3,zero,10608 <___svfprintf_internal_r+0x2228>
    fedc:	d8c03217 	ldw	r3,200(sp)
    fee0:	044019c4 	movi	r17,103
    fee4:	d8c02b15 	stw	r3,172(sp)
    fee8:	df002907 	ldb	fp,164(sp)
    feec:	e000a61e 	bne	fp,zero,10188 <___svfprintf_internal_r+0x1da8>
    fef0:	df002783 	ldbu	fp,158(sp)
    fef4:	d8802915 	stw	r2,164(sp)
    fef8:	dc802c17 	ldw	r18,176(sp)
    fefc:	d8002a15 	stw	zero,168(sp)
    ff00:	003af506 	br	ead8 <__alt_data_end+0xfc00ead8>
    ff04:	040000f4 	movhi	r16,3
    ff08:	84255604 	addi	r16,r16,-27304
    ff0c:	003a7e06 	br	e908 <__alt_data_end+0xfc00e908>
    ff10:	d9003917 	ldw	r4,228(sp)
    ff14:	04001004 	movi	r16,64
    ff18:	800b883a 	mov	r5,r16
    ff1c:	000d2740 	call	d274 <_malloc_r>
    ff20:	d9002d17 	ldw	r4,180(sp)
    ff24:	20800015 	stw	r2,0(r4)
    ff28:	20800415 	stw	r2,16(r4)
    ff2c:	1001d026 	beq	r2,zero,10670 <___svfprintf_internal_r+0x2290>
    ff30:	d8802d17 	ldw	r2,180(sp)
    ff34:	14000515 	stw	r16,20(r2)
    ff38:	00394406 	br	e44c <__alt_data_end+0xfc00e44c>
    ff3c:	040000f4 	movhi	r16,3
    ff40:	84255804 	addi	r16,r16,-27296
    ff44:	003ee106 	br	facc <__alt_data_end+0xfc00facc>
    ff48:	d9402d17 	ldw	r5,180(sp)
    ff4c:	d9801e04 	addi	r6,sp,120
    ff50:	9809883a 	mov	r4,r19
    ff54:	00173440 	call	17344 <__ssprint_r>
    ff58:	103a081e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    ff5c:	dc402617 	ldw	r17,152(sp)
    ff60:	d8c02017 	ldw	r3,128(sp)
    ff64:	da000404 	addi	r8,sp,16
    ff68:	003f4306 	br	fc78 <__alt_data_end+0xfc00fc78>
    ff6c:	01400184 	movi	r5,6
    ff70:	d9402a15 	stw	r5,168(sp)
    ff74:	003f9506 	br	fdcc <__alt_data_end+0xfc00fdcc>
    ff78:	d8c02e17 	ldw	r3,184(sp)
    ff7c:	1d000017 	ldw	r20,0(r3)
    ff80:	18c00104 	addi	r3,r3,4
    ff84:	d8c02e15 	stw	r3,184(sp)
    ff88:	a02dd7fa 	srai	r22,r20,31
    ff8c:	b005883a 	mov	r2,r22
    ff90:	003a7606 	br	e96c <__alt_data_end+0xfc00e96c>
    ff94:	d9002e17 	ldw	r4,184(sp)
    ff98:	002d883a 	mov	r22,zero
    ff9c:	25000017 	ldw	r20,0(r4)
    ffa0:	21000104 	addi	r4,r4,4
    ffa4:	d9002e15 	stw	r4,184(sp)
    ffa8:	003bdd06 	br	ef20 <__alt_data_end+0xfc00ef20>
    ffac:	9480100c 	andi	r18,r18,64
    ffb0:	90006e26 	beq	r18,zero,1016c <___svfprintf_internal_r+0x1d8c>
    ffb4:	d9402e17 	ldw	r5,184(sp)
    ffb8:	d8c02f17 	ldw	r3,188(sp)
    ffbc:	28800017 	ldw	r2,0(r5)
    ffc0:	29400104 	addi	r5,r5,4
    ffc4:	d9402e15 	stw	r5,184(sp)
    ffc8:	10c0000d 	sth	r3,0(r2)
    ffcc:	00392f06 	br	e48c <__alt_data_end+0xfc00e48c>
    ffd0:	d9402d17 	ldw	r5,180(sp)
    ffd4:	d9801e04 	addi	r6,sp,120
    ffd8:	9809883a 	mov	r4,r19
    ffdc:	00173440 	call	17344 <__ssprint_r>
    ffe0:	1039e61e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
    ffe4:	d8c02017 	ldw	r3,128(sp)
    ffe8:	d8801f17 	ldw	r2,124(sp)
    ffec:	da000404 	addi	r8,sp,16
    fff0:	d9403317 	ldw	r5,204(sp)
    fff4:	10800044 	addi	r2,r2,1
    fff8:	44000015 	stw	r16,0(r8)
    fffc:	28c7883a 	add	r3,r5,r3
   10000:	003b5506 	br	ed58 <__alt_data_end+0xfc00ed58>
   10004:	8009883a 	mov	r4,r16
   10008:	df003e15 	stw	fp,248(sp)
   1000c:	000e3480 	call	e348 <strlen>
   10010:	d8802b15 	stw	r2,172(sp)
   10014:	da003e17 	ldw	r8,248(sp)
   10018:	103c160e 	bge	r2,zero,f074 <__alt_data_end+0xfc00f074>
   1001c:	0005883a 	mov	r2,zero
   10020:	003c1406 	br	f074 <__alt_data_end+0xfc00f074>
   10024:	00bfffc4 	movi	r2,-1
   10028:	0039d906 	br	e790 <__alt_data_end+0xfc00e790>
   1002c:	010000f4 	movhi	r4,3
   10030:	21256a84 	addi	r4,r4,-27222
   10034:	d9003515 	stw	r4,212(sp)
   10038:	003ae406 	br	ebcc <__alt_data_end+0xfc00ebcc>
   1003c:	013fffc4 	movi	r4,-1
   10040:	0039fa06 	br	e82c <__alt_data_end+0xfc00e82c>
   10044:	d9402d17 	ldw	r5,180(sp)
   10048:	d9801e04 	addi	r6,sp,120
   1004c:	9809883a 	mov	r4,r19
   10050:	00173440 	call	17344 <__ssprint_r>
   10054:	1039c91e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
   10058:	d8c02017 	ldw	r3,128(sp)
   1005c:	da000404 	addi	r8,sp,16
   10060:	003d8406 	br	f674 <__alt_data_end+0xfc00f674>
   10064:	0023883a 	mov	r17,zero
   10068:	003d8306 	br	f678 <__alt_data_end+0xfc00f678>
   1006c:	010000f4 	movhi	r4,3
   10070:	21256684 	addi	r4,r4,-27238
   10074:	d9002c15 	stw	r4,176(sp)
   10078:	d9002c17 	ldw	r4,176(sp)
   1007c:	1c47883a 	add	r3,r3,r17
   10080:	10800044 	addi	r2,r2,1
   10084:	41000015 	stw	r4,0(r8)
   10088:	44400115 	stw	r17,4(r8)
   1008c:	d8c02015 	stw	r3,128(sp)
   10090:	d8801f15 	stw	r2,124(sp)
   10094:	010001c4 	movi	r4,7
   10098:	20bfcd16 	blt	r4,r2,ffd0 <__alt_data_end+0xfc00ffd0>
   1009c:	42000204 	addi	r8,r8,8
   100a0:	003fd306 	br	fff0 <__alt_data_end+0xfc00fff0>
   100a4:	d9402d17 	ldw	r5,180(sp)
   100a8:	d9801e04 	addi	r6,sp,120
   100ac:	9809883a 	mov	r4,r19
   100b0:	00173440 	call	17344 <__ssprint_r>
   100b4:	1039b11e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
   100b8:	d8802617 	ldw	r2,152(sp)
   100bc:	d8c02017 	ldw	r3,128(sp)
   100c0:	da000404 	addi	r8,sp,16
   100c4:	003e1c06 	br	f938 <__alt_data_end+0xfc00f938>
   100c8:	d8802a17 	ldw	r2,168(sp)
   100cc:	00c00184 	movi	r3,6
   100d0:	1880012e 	bgeu	r3,r2,100d8 <___svfprintf_internal_r+0x1cf8>
   100d4:	1805883a 	mov	r2,r3
   100d8:	d8802b15 	stw	r2,172(sp)
   100dc:	1000f316 	blt	r2,zero,104ac <___svfprintf_internal_r+0x20cc>
   100e0:	040000f4 	movhi	r16,3
   100e4:	d8802915 	stw	r2,164(sp)
   100e8:	dd002e15 	stw	r20,184(sp)
   100ec:	d8002a15 	stw	zero,168(sp)
   100f0:	d8003215 	stw	zero,200(sp)
   100f4:	84256404 	addi	r16,r16,-27248
   100f8:	0039883a 	mov	fp,zero
   100fc:	003a7d06 	br	eaf4 <__alt_data_end+0xfc00eaf4>
   10100:	010000f4 	movhi	r4,3
   10104:	21256a84 	addi	r4,r4,-27222
   10108:	d9003515 	stw	r4,212(sp)
   1010c:	003b3d06 	br	ee04 <__alt_data_end+0xfc00ee04>
   10110:	d9402d17 	ldw	r5,180(sp)
   10114:	d9801e04 	addi	r6,sp,120
   10118:	9809883a 	mov	r4,r19
   1011c:	00173440 	call	17344 <__ssprint_r>
   10120:	1039961e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
   10124:	d8802617 	ldw	r2,152(sp)
   10128:	d9403317 	ldw	r5,204(sp)
   1012c:	d8c02017 	ldw	r3,128(sp)
   10130:	da000404 	addi	r8,sp,16
   10134:	2885c83a 	sub	r2,r5,r2
   10138:	003e1006 	br	f97c <__alt_data_end+0xfc00f97c>
   1013c:	00800044 	movi	r2,1
   10140:	10803fcc 	andi	r2,r2,255
   10144:	00c00044 	movi	r3,1
   10148:	10fa1026 	beq	r2,r3,e98c <__alt_data_end+0xfc00e98c>
   1014c:	00c00084 	movi	r3,2
   10150:	10fb8226 	beq	r2,r3,ef5c <__alt_data_end+0xfc00ef5c>
   10154:	003a4206 	br	ea60 <__alt_data_end+0xfc00ea60>
   10158:	0021883a 	mov	r16,zero
   1015c:	003e0806 	br	f980 <__alt_data_end+0xfc00f980>
   10160:	07000b44 	movi	fp,45
   10164:	df002785 	stb	fp,158(sp)
   10168:	0039e306 	br	e8f8 <__alt_data_end+0xfc00e8f8>
   1016c:	d9002e17 	ldw	r4,184(sp)
   10170:	d9402f17 	ldw	r5,188(sp)
   10174:	20800017 	ldw	r2,0(r4)
   10178:	21000104 	addi	r4,r4,4
   1017c:	d9002e15 	stw	r4,184(sp)
   10180:	11400015 	stw	r5,0(r2)
   10184:	0038c106 	br	e48c <__alt_data_end+0xfc00e48c>
   10188:	00c00b44 	movi	r3,45
   1018c:	d8c02785 	stb	r3,158(sp)
   10190:	d8802915 	stw	r2,164(sp)
   10194:	dc802c17 	ldw	r18,176(sp)
   10198:	d8002a15 	stw	zero,168(sp)
   1019c:	07000b44 	movi	fp,45
   101a0:	003a5106 	br	eae8 <__alt_data_end+0xfc00eae8>
   101a4:	9080004c 	andi	r2,r18,1
   101a8:	1000941e 	bne	r2,zero,103fc <___svfprintf_internal_r+0x201c>
   101ac:	d8802117 	ldw	r2,132(sp)
   101b0:	1405c83a 	sub	r2,r2,r16
   101b4:	d8803315 	stw	r2,204(sp)
   101b8:	b441151e 	bne	r22,r17,10610 <___svfprintf_internal_r+0x2230>
   101bc:	dd802617 	ldw	r22,152(sp)
   101c0:	00bfff44 	movi	r2,-3
   101c4:	b0801a16 	blt	r22,r2,10230 <___svfprintf_internal_r+0x1e50>
   101c8:	d9402a17 	ldw	r5,168(sp)
   101cc:	2d801816 	blt	r5,r22,10230 <___svfprintf_internal_r+0x1e50>
   101d0:	dd803215 	stw	r22,200(sp)
   101d4:	003f3a06 	br	fec0 <__alt_data_end+0xfc00fec0>
   101d8:	1025883a 	mov	r18,r2
   101dc:	0039883a 	mov	fp,zero
   101e0:	00800084 	movi	r2,2
   101e4:	003fd606 	br	10140 <__alt_data_end+0xfc010140>
   101e8:	9080004c 	andi	r2,r18,1
   101ec:	103f191e 	bne	r2,zero,fe54 <__alt_data_end+0xfc00fe54>
   101f0:	d8802117 	ldw	r2,132(sp)
   101f4:	003f2806 	br	fe98 <__alt_data_end+0xfc00fe98>
   101f8:	010000f4 	movhi	r4,3
   101fc:	21256684 	addi	r4,r4,-27238
   10200:	d9002c15 	stw	r4,176(sp)
   10204:	003c7c06 	br	f3f8 <__alt_data_end+0xfc00f3f8>
   10208:	e005883a 	mov	r2,fp
   1020c:	003f2206 	br	fe98 <__alt_data_end+0xfc00fe98>
   10210:	d9002a17 	ldw	r4,168(sp)
   10214:	df002783 	ldbu	fp,158(sp)
   10218:	dd002e15 	stw	r20,184(sp)
   1021c:	d9002915 	stw	r4,164(sp)
   10220:	d9002b15 	stw	r4,172(sp)
   10224:	d8002a15 	stw	zero,168(sp)
   10228:	d8003215 	stw	zero,200(sp)
   1022c:	003a2a06 	br	ead8 <__alt_data_end+0xfc00ead8>
   10230:	8c7fff84 	addi	r17,r17,-2
   10234:	b5bfffc4 	addi	r22,r22,-1
   10238:	dd802615 	stw	r22,152(sp)
   1023c:	dc4022c5 	stb	r17,139(sp)
   10240:	b000c316 	blt	r22,zero,10550 <___svfprintf_internal_r+0x2170>
   10244:	00800ac4 	movi	r2,43
   10248:	d8802305 	stb	r2,140(sp)
   1024c:	00800244 	movi	r2,9
   10250:	15806e16 	blt	r2,r22,1040c <___svfprintf_internal_r+0x202c>
   10254:	00800c04 	movi	r2,48
   10258:	b5800c04 	addi	r22,r22,48
   1025c:	d8802345 	stb	r2,141(sp)
   10260:	dd802385 	stb	r22,142(sp)
   10264:	d88023c4 	addi	r2,sp,143
   10268:	df0022c4 	addi	fp,sp,139
   1026c:	d8c03317 	ldw	r3,204(sp)
   10270:	1739c83a 	sub	fp,r2,fp
   10274:	d9003317 	ldw	r4,204(sp)
   10278:	e0c7883a 	add	r3,fp,r3
   1027c:	df003b15 	stw	fp,236(sp)
   10280:	d8c02b15 	stw	r3,172(sp)
   10284:	00800044 	movi	r2,1
   10288:	1100b70e 	bge	r2,r4,10568 <___svfprintf_internal_r+0x2188>
   1028c:	d8c02b17 	ldw	r3,172(sp)
   10290:	18c00044 	addi	r3,r3,1
   10294:	d8c02b15 	stw	r3,172(sp)
   10298:	1805883a 	mov	r2,r3
   1029c:	1800b016 	blt	r3,zero,10560 <___svfprintf_internal_r+0x2180>
   102a0:	d8003215 	stw	zero,200(sp)
   102a4:	003f1006 	br	fee8 <__alt_data_end+0xfc00fee8>
   102a8:	d8802a17 	ldw	r2,168(sp)
   102ac:	103ec71e 	bne	r2,zero,fdcc <__alt_data_end+0xfc00fdcc>
   102b0:	dc002a15 	stw	r16,168(sp)
   102b4:	003ec506 	br	fdcc <__alt_data_end+0xfc00fdcc>
   102b8:	d9402d17 	ldw	r5,180(sp)
   102bc:	d9801e04 	addi	r6,sp,120
   102c0:	9809883a 	mov	r4,r19
   102c4:	00173440 	call	17344 <__ssprint_r>
   102c8:	10392c1e 	bne	r2,zero,e77c <__alt_data_end+0xfc00e77c>
   102cc:	dc402617 	ldw	r17,152(sp)
   102d0:	d8c02017 	ldw	r3,128(sp)
   102d4:	d8801f17 	ldw	r2,124(sp)
   102d8:	da000404 	addi	r8,sp,16
   102dc:	003e7706 	br	fcbc <__alt_data_end+0xfc00fcbc>
   102e0:	182f883a 	mov	r23,r3
   102e4:	d8002a15 	stw	zero,168(sp)
   102e8:	00389306 	br	e538 <__alt_data_end+0xfc00e538>
   102ec:	d8c02a17 	ldw	r3,168(sp)
   102f0:	d8802104 	addi	r2,sp,132
   102f4:	d8800315 	stw	r2,12(sp)
   102f8:	d9403617 	ldw	r5,216(sp)
   102fc:	d8802504 	addi	r2,sp,148
   10300:	d8800215 	stw	r2,8(sp)
   10304:	d8802604 	addi	r2,sp,152
   10308:	d8c00015 	stw	r3,0(sp)
   1030c:	9809883a 	mov	r4,r19
   10310:	d8800115 	stw	r2,4(sp)
   10314:	01c000c4 	movi	r7,3
   10318:	a00d883a 	mov	r6,r20
   1031c:	da003e15 	stw	r8,248(sp)
   10320:	0012dd40 	call	12dd4 <_dtoa_r>
   10324:	d9002a17 	ldw	r4,168(sp)
   10328:	da003e17 	ldw	r8,248(sp)
   1032c:	1021883a 	mov	r16,r2
   10330:	1139883a 	add	fp,r2,r4
   10334:	2007883a 	mov	r3,r4
   10338:	81000007 	ldb	r4,0(r16)
   1033c:	00800c04 	movi	r2,48
   10340:	20806f26 	beq	r4,r2,10500 <___svfprintf_internal_r+0x2120>
   10344:	d8c02617 	ldw	r3,152(sp)
   10348:	e0f9883a 	add	fp,fp,r3
   1034c:	003ec206 	br	fe58 <__alt_data_end+0xfc00fe58>
   10350:	00c00b44 	movi	r3,45
   10354:	2520003c 	xorhi	r20,r4,32768
   10358:	d8c02905 	stb	r3,164(sp)
   1035c:	003ea106 	br	fde4 <__alt_data_end+0xfc00fde4>
   10360:	d8c03217 	ldw	r3,200(sp)
   10364:	00c0890e 	bge	zero,r3,1058c <___svfprintf_internal_r+0x21ac>
   10368:	00800044 	movi	r2,1
   1036c:	d9003317 	ldw	r4,204(sp)
   10370:	1105883a 	add	r2,r2,r4
   10374:	d8802b15 	stw	r2,172(sp)
   10378:	10005f16 	blt	r2,zero,104f8 <___svfprintf_internal_r+0x2118>
   1037c:	044019c4 	movi	r17,103
   10380:	003ed906 	br	fee8 <__alt_data_end+0xfc00fee8>
   10384:	d9002a17 	ldw	r4,168(sp)
   10388:	20c00044 	addi	r3,r4,1
   1038c:	003e9c06 	br	fe00 <__alt_data_end+0xfc00fe00>
   10390:	d9002a17 	ldw	r4,168(sp)
   10394:	00c0680e 	bge	zero,r3,10538 <___svfprintf_internal_r+0x2158>
   10398:	2000461e 	bne	r4,zero,104b4 <___svfprintf_internal_r+0x20d4>
   1039c:	9480004c 	andi	r18,r18,1
   103a0:	9000441e 	bne	r18,zero,104b4 <___svfprintf_internal_r+0x20d4>
   103a4:	1805883a 	mov	r2,r3
   103a8:	1800a116 	blt	r3,zero,10630 <___svfprintf_internal_r+0x2250>
   103ac:	d8c03217 	ldw	r3,200(sp)
   103b0:	d8c02b15 	stw	r3,172(sp)
   103b4:	003ecc06 	br	fee8 <__alt_data_end+0xfc00fee8>
   103b8:	d9402a17 	ldw	r5,168(sp)
   103bc:	d8802104 	addi	r2,sp,132
   103c0:	d8800315 	stw	r2,12(sp)
   103c4:	d9400015 	stw	r5,0(sp)
   103c8:	d8802504 	addi	r2,sp,148
   103cc:	d9403617 	ldw	r5,216(sp)
   103d0:	d8800215 	stw	r2,8(sp)
   103d4:	d8802604 	addi	r2,sp,152
   103d8:	d8800115 	stw	r2,4(sp)
   103dc:	01c000c4 	movi	r7,3
   103e0:	a00d883a 	mov	r6,r20
   103e4:	9809883a 	mov	r4,r19
   103e8:	da003e15 	stw	r8,248(sp)
   103ec:	0012dd40 	call	12dd4 <_dtoa_r>
   103f0:	d8c02a17 	ldw	r3,168(sp)
   103f4:	da003e17 	ldw	r8,248(sp)
   103f8:	1021883a 	mov	r16,r2
   103fc:	00801184 	movi	r2,70
   10400:	80f9883a 	add	fp,r16,r3
   10404:	88bfcc26 	beq	r17,r2,10338 <__alt_data_end+0xfc010338>
   10408:	003e9306 	br	fe58 <__alt_data_end+0xfc00fe58>
   1040c:	df0022c4 	addi	fp,sp,139
   10410:	dc002a15 	stw	r16,168(sp)
   10414:	9829883a 	mov	r20,r19
   10418:	e021883a 	mov	r16,fp
   1041c:	4027883a 	mov	r19,r8
   10420:	b009883a 	mov	r4,r22
   10424:	01400284 	movi	r5,10
   10428:	000cb700 	call	cb70 <__modsi3>
   1042c:	10800c04 	addi	r2,r2,48
   10430:	843fffc4 	addi	r16,r16,-1
   10434:	b009883a 	mov	r4,r22
   10438:	01400284 	movi	r5,10
   1043c:	80800005 	stb	r2,0(r16)
   10440:	000caec0 	call	caec <__divsi3>
   10444:	102d883a 	mov	r22,r2
   10448:	00800244 	movi	r2,9
   1044c:	15bff416 	blt	r2,r22,10420 <__alt_data_end+0xfc010420>
   10450:	9811883a 	mov	r8,r19
   10454:	b0800c04 	addi	r2,r22,48
   10458:	a027883a 	mov	r19,r20
   1045c:	8029883a 	mov	r20,r16
   10460:	a17fffc4 	addi	r5,r20,-1
   10464:	a0bfffc5 	stb	r2,-1(r20)
   10468:	dc002a17 	ldw	r16,168(sp)
   1046c:	2f00782e 	bgeu	r5,fp,10650 <___svfprintf_internal_r+0x2270>
   10470:	d9c02384 	addi	r7,sp,142
   10474:	3d0fc83a 	sub	r7,r7,r20
   10478:	d9002344 	addi	r4,sp,141
   1047c:	e1cf883a 	add	r7,fp,r7
   10480:	00000106 	br	10488 <___svfprintf_internal_r+0x20a8>
   10484:	28800003 	ldbu	r2,0(r5)
   10488:	20800005 	stb	r2,0(r4)
   1048c:	21000044 	addi	r4,r4,1
   10490:	29400044 	addi	r5,r5,1
   10494:	21fffb1e 	bne	r4,r7,10484 <__alt_data_end+0xfc010484>
   10498:	d8802304 	addi	r2,sp,140
   1049c:	1505c83a 	sub	r2,r2,r20
   104a0:	d8c02344 	addi	r3,sp,141
   104a4:	1885883a 	add	r2,r3,r2
   104a8:	003f7006 	br	1026c <__alt_data_end+0xfc01026c>
   104ac:	0005883a 	mov	r2,zero
   104b0:	003f0b06 	br	100e0 <__alt_data_end+0xfc0100e0>
   104b4:	d9002a17 	ldw	r4,168(sp)
   104b8:	d8c03217 	ldw	r3,200(sp)
   104bc:	20800044 	addi	r2,r4,1
   104c0:	1885883a 	add	r2,r3,r2
   104c4:	d8802b15 	stw	r2,172(sp)
   104c8:	103e870e 	bge	r2,zero,fee8 <__alt_data_end+0xfc00fee8>
   104cc:	0005883a 	mov	r2,zero
   104d0:	003e8506 	br	fee8 <__alt_data_end+0xfc00fee8>
   104d4:	010000f4 	movhi	r4,3
   104d8:	21256684 	addi	r4,r4,-27238
   104dc:	d9002c15 	stw	r4,176(sp)
   104e0:	003cc506 	br	f7f8 <__alt_data_end+0xfc00f7f8>
   104e4:	d8c03217 	ldw	r3,200(sp)
   104e8:	18c00044 	addi	r3,r3,1
   104ec:	d8c02b15 	stw	r3,172(sp)
   104f0:	1805883a 	mov	r2,r3
   104f4:	183fa10e 	bge	r3,zero,1037c <__alt_data_end+0xfc01037c>
   104f8:	0005883a 	mov	r2,zero
   104fc:	003f9f06 	br	1037c <__alt_data_end+0xfc01037c>
   10500:	d9003617 	ldw	r4,216(sp)
   10504:	000d883a 	mov	r6,zero
   10508:	000f883a 	mov	r7,zero
   1050c:	a00b883a 	mov	r5,r20
   10510:	d8c03d15 	stw	r3,244(sp)
   10514:	da003e15 	stw	r8,248(sp)
   10518:	001c7340 	call	1c734 <__eqdf2>
   1051c:	d8c03d17 	ldw	r3,244(sp)
   10520:	da003e17 	ldw	r8,248(sp)
   10524:	103f8726 	beq	r2,zero,10344 <__alt_data_end+0xfc010344>
   10528:	00800044 	movi	r2,1
   1052c:	10c7c83a 	sub	r3,r2,r3
   10530:	d8c02615 	stw	r3,152(sp)
   10534:	003f8406 	br	10348 <__alt_data_end+0xfc010348>
   10538:	20000e1e 	bne	r4,zero,10574 <___svfprintf_internal_r+0x2194>
   1053c:	9480004c 	andi	r18,r18,1
   10540:	90000c1e 	bne	r18,zero,10574 <___svfprintf_internal_r+0x2194>
   10544:	00800044 	movi	r2,1
   10548:	d8802b15 	stw	r2,172(sp)
   1054c:	003e6606 	br	fee8 <__alt_data_end+0xfc00fee8>
   10550:	00800b44 	movi	r2,45
   10554:	05adc83a 	sub	r22,zero,r22
   10558:	d8802305 	stb	r2,140(sp)
   1055c:	003f3b06 	br	1024c <__alt_data_end+0xfc01024c>
   10560:	0005883a 	mov	r2,zero
   10564:	003f4e06 	br	102a0 <__alt_data_end+0xfc0102a0>
   10568:	90a4703a 	and	r18,r18,r2
   1056c:	903f4a26 	beq	r18,zero,10298 <__alt_data_end+0xfc010298>
   10570:	003f4606 	br	1028c <__alt_data_end+0xfc01028c>
   10574:	d8c02a17 	ldw	r3,168(sp)
   10578:	18c00084 	addi	r3,r3,2
   1057c:	d8c02b15 	stw	r3,172(sp)
   10580:	1805883a 	mov	r2,r3
   10584:	183e580e 	bge	r3,zero,fee8 <__alt_data_end+0xfc00fee8>
   10588:	003fd006 	br	104cc <__alt_data_end+0xfc0104cc>
   1058c:	00800084 	movi	r2,2
   10590:	10c5c83a 	sub	r2,r2,r3
   10594:	003f7506 	br	1036c <__alt_data_end+0xfc01036c>
   10598:	d9402e17 	ldw	r5,184(sp)
   1059c:	d9002e17 	ldw	r4,184(sp)
   105a0:	bc400043 	ldbu	r17,1(r23)
   105a4:	29400017 	ldw	r5,0(r5)
   105a8:	20800104 	addi	r2,r4,4
   105ac:	d8802e15 	stw	r2,184(sp)
   105b0:	d9402a15 	stw	r5,168(sp)
   105b4:	182f883a 	mov	r23,r3
   105b8:	283df10e 	bge	r5,zero,fd80 <__alt_data_end+0xfc00fd80>
   105bc:	8c403fcc 	andi	r17,r17,255
   105c0:	017fffc4 	movi	r5,-1
   105c4:	8c40201c 	xori	r17,r17,128
   105c8:	d9402a15 	stw	r5,168(sp)
   105cc:	8c7fe004 	addi	r17,r17,-128
   105d0:	0037d806 	br	e534 <__alt_data_end+0xfc00e534>
   105d4:	9080004c 	andi	r2,r18,1
   105d8:	0039883a 	mov	fp,zero
   105dc:	10000726 	beq	r2,zero,105fc <___svfprintf_internal_r+0x221c>
   105e0:	d8c02817 	ldw	r3,160(sp)
   105e4:	dc001dc4 	addi	r16,sp,119
   105e8:	00800c04 	movi	r2,48
   105ec:	1c07c83a 	sub	r3,r3,r16
   105f0:	d8801dc5 	stb	r2,119(sp)
   105f4:	d8c02b15 	stw	r3,172(sp)
   105f8:	00393106 	br	eac0 <__alt_data_end+0xfc00eac0>
   105fc:	d8002b15 	stw	zero,172(sp)
   10600:	dc001e04 	addi	r16,sp,120
   10604:	00392e06 	br	eac0 <__alt_data_end+0xfc00eac0>
   10608:	0005883a 	mov	r2,zero
   1060c:	003e3306 	br	fedc <__alt_data_end+0xfc00fedc>
   10610:	dd802617 	ldw	r22,152(sp)
   10614:	003f0706 	br	10234 <__alt_data_end+0xfc010234>
   10618:	d8c02b03 	ldbu	r3,172(sp)
   1061c:	d8c02785 	stb	r3,158(sp)
   10620:	003a3506 	br	eef8 <__alt_data_end+0xfc00eef8>
   10624:	d8c02b03 	ldbu	r3,172(sp)
   10628:	d8c02785 	stb	r3,158(sp)
   1062c:	003a1706 	br	ee8c <__alt_data_end+0xfc00ee8c>
   10630:	0005883a 	mov	r2,zero
   10634:	003f5d06 	br	103ac <__alt_data_end+0xfc0103ac>
   10638:	d8c02b03 	ldbu	r3,172(sp)
   1063c:	d8c02785 	stb	r3,158(sp)
   10640:	0038f306 	br	ea10 <__alt_data_end+0xfc00ea10>
   10644:	d8c02b03 	ldbu	r3,172(sp)
   10648:	d8c02785 	stb	r3,158(sp)
   1064c:	0038be06 	br	e948 <__alt_data_end+0xfc00e948>
   10650:	d8802344 	addi	r2,sp,141
   10654:	003f0506 	br	1026c <__alt_data_end+0xfc01026c>
   10658:	d8c02b03 	ldbu	r3,172(sp)
   1065c:	d8c02785 	stb	r3,158(sp)
   10660:	00388b06 	br	e890 <__alt_data_end+0xfc00e890>
   10664:	d8c02b03 	ldbu	r3,172(sp)
   10668:	d8c02785 	stb	r3,158(sp)
   1066c:	003ad706 	br	f1cc <__alt_data_end+0xfc00f1cc>
   10670:	d9403917 	ldw	r5,228(sp)
   10674:	00800304 	movi	r2,12
   10678:	28800015 	stw	r2,0(r5)
   1067c:	00bfffc4 	movi	r2,-1
   10680:	00384306 	br	e790 <__alt_data_end+0xfc00e790>
   10684:	d8c02b03 	ldbu	r3,172(sp)
   10688:	d8c02785 	stb	r3,158(sp)
   1068c:	003ab606 	br	f168 <__alt_data_end+0xfc00f168>
   10690:	d8c02b03 	ldbu	r3,172(sp)
   10694:	d8c02785 	stb	r3,158(sp)
   10698:	003a8906 	br	f0c0 <__alt_data_end+0xfc00f0c0>

0001069c <_times_r>:
   1069c:	2809883a 	mov	r4,r5
   106a0:	001e7b01 	jmpi	1e7b0 <times>

000106a4 <___vfprintf_internal_r>:
   106a4:	deffb804 	addi	sp,sp,-288
   106a8:	dfc04715 	stw	ra,284(sp)
   106ac:	ddc04515 	stw	r23,276(sp)
   106b0:	dd404315 	stw	r21,268(sp)
   106b4:	d9002d15 	stw	r4,180(sp)
   106b8:	282f883a 	mov	r23,r5
   106bc:	302b883a 	mov	r21,r6
   106c0:	d9c02e15 	stw	r7,184(sp)
   106c4:	df004615 	stw	fp,280(sp)
   106c8:	dd804415 	stw	r22,272(sp)
   106cc:	dd004215 	stw	r20,264(sp)
   106d0:	dcc04115 	stw	r19,260(sp)
   106d4:	dc804015 	stw	r18,256(sp)
   106d8:	dc403f15 	stw	r17,252(sp)
   106dc:	dc003e15 	stw	r16,248(sp)
   106e0:	00155e40 	call	155e4 <_localeconv_r>
   106e4:	10800017 	ldw	r2,0(r2)
   106e8:	1009883a 	mov	r4,r2
   106ec:	d8803415 	stw	r2,208(sp)
   106f0:	000e3480 	call	e348 <strlen>
   106f4:	d8803715 	stw	r2,220(sp)
   106f8:	d8802d17 	ldw	r2,180(sp)
   106fc:	10000226 	beq	r2,zero,10708 <___vfprintf_internal_r+0x64>
   10700:	10800e17 	ldw	r2,56(r2)
   10704:	1000fb26 	beq	r2,zero,10af4 <___vfprintf_internal_r+0x450>
   10708:	b880030b 	ldhu	r2,12(r23)
   1070c:	10c8000c 	andi	r3,r2,8192
   10710:	1800061e 	bne	r3,zero,1072c <___vfprintf_internal_r+0x88>
   10714:	b9001917 	ldw	r4,100(r23)
   10718:	00f7ffc4 	movi	r3,-8193
   1071c:	10880014 	ori	r2,r2,8192
   10720:	20c6703a 	and	r3,r4,r3
   10724:	b880030d 	sth	r2,12(r23)
   10728:	b8c01915 	stw	r3,100(r23)
   1072c:	10c0020c 	andi	r3,r2,8
   10730:	1800c326 	beq	r3,zero,10a40 <___vfprintf_internal_r+0x39c>
   10734:	b8c00417 	ldw	r3,16(r23)
   10738:	1800c126 	beq	r3,zero,10a40 <___vfprintf_internal_r+0x39c>
   1073c:	1080068c 	andi	r2,r2,26
   10740:	00c00284 	movi	r3,10
   10744:	10c0c626 	beq	r2,r3,10a60 <___vfprintf_internal_r+0x3bc>
   10748:	d8c00404 	addi	r3,sp,16
   1074c:	050000f4 	movhi	r20,3
   10750:	d9001e04 	addi	r4,sp,120
   10754:	a5256e84 	addi	r20,r20,-27206
   10758:	d8c01e15 	stw	r3,120(sp)
   1075c:	d8002015 	stw	zero,128(sp)
   10760:	d8001f15 	stw	zero,124(sp)
   10764:	d8003315 	stw	zero,204(sp)
   10768:	d8003615 	stw	zero,216(sp)
   1076c:	d8003815 	stw	zero,224(sp)
   10770:	1811883a 	mov	r8,r3
   10774:	d8003915 	stw	zero,228(sp)
   10778:	d8003a15 	stw	zero,232(sp)
   1077c:	d8002f15 	stw	zero,188(sp)
   10780:	d9002815 	stw	r4,160(sp)
   10784:	a8800007 	ldb	r2,0(r21)
   10788:	10028b26 	beq	r2,zero,111b8 <___vfprintf_internal_r+0xb14>
   1078c:	00c00944 	movi	r3,37
   10790:	a823883a 	mov	r17,r21
   10794:	10c0021e 	bne	r2,r3,107a0 <___vfprintf_internal_r+0xfc>
   10798:	00001406 	br	107ec <___vfprintf_internal_r+0x148>
   1079c:	10c00326 	beq	r2,r3,107ac <___vfprintf_internal_r+0x108>
   107a0:	8c400044 	addi	r17,r17,1
   107a4:	88800007 	ldb	r2,0(r17)
   107a8:	103ffc1e 	bne	r2,zero,1079c <__alt_data_end+0xfc01079c>
   107ac:	8d61c83a 	sub	r16,r17,r21
   107b0:	80000e26 	beq	r16,zero,107ec <___vfprintf_internal_r+0x148>
   107b4:	d8c02017 	ldw	r3,128(sp)
   107b8:	d8801f17 	ldw	r2,124(sp)
   107bc:	45400015 	stw	r21,0(r8)
   107c0:	1c07883a 	add	r3,r3,r16
   107c4:	10800044 	addi	r2,r2,1
   107c8:	d8c02015 	stw	r3,128(sp)
   107cc:	44000115 	stw	r16,4(r8)
   107d0:	d8801f15 	stw	r2,124(sp)
   107d4:	00c001c4 	movi	r3,7
   107d8:	1880a916 	blt	r3,r2,10a80 <___vfprintf_internal_r+0x3dc>
   107dc:	42000204 	addi	r8,r8,8
   107e0:	d9402f17 	ldw	r5,188(sp)
   107e4:	2c0b883a 	add	r5,r5,r16
   107e8:	d9402f15 	stw	r5,188(sp)
   107ec:	88800007 	ldb	r2,0(r17)
   107f0:	1000aa26 	beq	r2,zero,10a9c <___vfprintf_internal_r+0x3f8>
   107f4:	8d400044 	addi	r21,r17,1
   107f8:	8c400047 	ldb	r17,1(r17)
   107fc:	0021883a 	mov	r16,zero
   10800:	00bfffc4 	movi	r2,-1
   10804:	0025883a 	mov	r18,zero
   10808:	dc002905 	stb	r16,164(sp)
   1080c:	d8002785 	stb	zero,158(sp)
   10810:	d8002b05 	stb	zero,172(sp)
   10814:	d8802a15 	stw	r2,168(sp)
   10818:	d8003115 	stw	zero,196(sp)
   1081c:	04c01604 	movi	r19,88
   10820:	05800244 	movi	r22,9
   10824:	9021883a 	mov	r16,r18
   10828:	4039883a 	mov	fp,r8
   1082c:	ad400044 	addi	r21,r21,1
   10830:	88bff804 	addi	r2,r17,-32
   10834:	98833236 	bltu	r19,r2,11500 <___vfprintf_internal_r+0xe5c>
   10838:	100490ba 	slli	r2,r2,2
   1083c:	00c00074 	movhi	r3,1
   10840:	18c21404 	addi	r3,r3,2128
   10844:	10c5883a 	add	r2,r2,r3
   10848:	10800017 	ldw	r2,0(r2)
   1084c:	1000683a 	jmp	r2
   10850:	000113f8 	rdprs	zero,zero,1103
   10854:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10858:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   1085c:	00011418 	cmpnei	zero,zero,1104
   10860:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10864:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10868:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   1086c:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10870:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10874:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10878:	00010b00 	call	10b0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x11c>
   1087c:	00011308 	cmpgei	zero,zero,1100
   10880:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10884:	000109c4 	movi	zero,1063
   10888:	00010b24 	muli	zero,zero,1068
   1088c:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10890:	00010b74 	movhi	zero,1069
   10894:	00010b80 	call	10b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x124>
   10898:	00010b80 	call	10b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x124>
   1089c:	00010b80 	call	10b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x124>
   108a0:	00010b80 	call	10b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x124>
   108a4:	00010b80 	call	10b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x124>
   108a8:	00010b80 	call	10b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x124>
   108ac:	00010b80 	call	10b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x124>
   108b0:	00010b80 	call	10b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x124>
   108b4:	00010b80 	call	10b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x124>
   108b8:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108bc:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108c0:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108c4:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108c8:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108cc:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108d0:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108d4:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108d8:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108dc:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108e0:	00010bbc 	xorhi	zero,zero,1070
   108e4:	00010c84 	movi	zero,1074
   108e8:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108ec:	00010c84 	movi	zero,1074
   108f0:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108f4:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108f8:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   108fc:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10900:	00010d30 	cmpltui	zero,zero,1076
   10904:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10908:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   1090c:	00010d3c 	xorhi	zero,zero,1076
   10910:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10914:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10918:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   1091c:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10920:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10924:	000111c0 	call	111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
   10928:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   1092c:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10930:	0001122c 	andhi	zero,zero,1096
   10934:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10938:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   1093c:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10940:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10944:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10948:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   1094c:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10950:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10954:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10958:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   1095c:	000114a4 	muli	zero,zero,1106
   10960:	00011424 	muli	zero,zero,1104
   10964:	00010c84 	movi	zero,1074
   10968:	00010c84 	movi	zero,1074
   1096c:	00010c84 	movi	zero,1074
   10970:	00011444 	movi	zero,1105
   10974:	00011424 	muli	zero,zero,1104
   10978:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   1097c:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10980:	00011450 	cmplti	zero,zero,1105
   10984:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   10988:	00011464 	muli	zero,zero,1105
   1098c:	000112e8 	cmpgeui	zero,zero,1099
   10990:	000109d0 	cmplti	zero,zero,1063
   10994:	00011320 	cmpeqi	zero,zero,1100
   10998:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   1099c:	0001132c 	andhi	zero,zero,1100
   109a0:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   109a4:	00011390 	cmplti	zero,zero,1102
   109a8:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   109ac:	00011500 	call	1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   109b0:	000113b0 	cmpltui	zero,zero,1102
   109b4:	d8c03117 	ldw	r3,196(sp)
   109b8:	d8802e15 	stw	r2,184(sp)
   109bc:	00c7c83a 	sub	r3,zero,r3
   109c0:	d8c03115 	stw	r3,196(sp)
   109c4:	84000114 	ori	r16,r16,4
   109c8:	ac400007 	ldb	r17,0(r21)
   109cc:	003f9706 	br	1082c <__alt_data_end+0xfc01082c>
   109d0:	00800c04 	movi	r2,48
   109d4:	d8802705 	stb	r2,156(sp)
   109d8:	00801e04 	movi	r2,120
   109dc:	d8802745 	stb	r2,157(sp)
   109e0:	d9002a17 	ldw	r4,168(sp)
   109e4:	d8802e17 	ldw	r2,184(sp)
   109e8:	d8002785 	stb	zero,158(sp)
   109ec:	e011883a 	mov	r8,fp
   109f0:	10c00104 	addi	r3,r2,4
   109f4:	14c00017 	ldw	r19,0(r2)
   109f8:	002d883a 	mov	r22,zero
   109fc:	80800094 	ori	r2,r16,2
   10a00:	2002ca16 	blt	r4,zero,1152c <___vfprintf_internal_r+0xe88>
   10a04:	00bfdfc4 	movi	r2,-129
   10a08:	80a4703a 	and	r18,r16,r2
   10a0c:	d8c02e15 	stw	r3,184(sp)
   10a10:	94800094 	ori	r18,r18,2
   10a14:	9802b41e 	bne	r19,zero,114e8 <___vfprintf_internal_r+0xe44>
   10a18:	014000f4 	movhi	r5,3
   10a1c:	29655f04 	addi	r5,r5,-27268
   10a20:	d9403915 	stw	r5,228(sp)
   10a24:	04401e04 	movi	r17,120
   10a28:	d8802a17 	ldw	r2,168(sp)
   10a2c:	0039883a 	mov	fp,zero
   10a30:	1001fa26 	beq	r2,zero,1121c <___vfprintf_internal_r+0xb78>
   10a34:	0027883a 	mov	r19,zero
   10a38:	002d883a 	mov	r22,zero
   10a3c:	00021906 	br	112a4 <___vfprintf_internal_r+0xc00>
   10a40:	d9002d17 	ldw	r4,180(sp)
   10a44:	b80b883a 	mov	r5,r23
   10a48:	0012a580 	call	12a58 <__swsetup_r>
   10a4c:	1005dc1e 	bne	r2,zero,121c0 <___vfprintf_internal_r+0x1b1c>
   10a50:	b880030b 	ldhu	r2,12(r23)
   10a54:	00c00284 	movi	r3,10
   10a58:	1080068c 	andi	r2,r2,26
   10a5c:	10ff3a1e 	bne	r2,r3,10748 <__alt_data_end+0xfc010748>
   10a60:	b880038f 	ldh	r2,14(r23)
   10a64:	103f3816 	blt	r2,zero,10748 <__alt_data_end+0xfc010748>
   10a68:	d9c02e17 	ldw	r7,184(sp)
   10a6c:	d9002d17 	ldw	r4,180(sp)
   10a70:	a80d883a 	mov	r6,r21
   10a74:	b80b883a 	mov	r5,r23
   10a78:	001299c0 	call	1299c <__sbprintf>
   10a7c:	00001106 	br	10ac4 <___vfprintf_internal_r+0x420>
   10a80:	d9002d17 	ldw	r4,180(sp)
   10a84:	d9801e04 	addi	r6,sp,120
   10a88:	b80b883a 	mov	r5,r23
   10a8c:	00189b00 	call	189b0 <__sprint_r>
   10a90:	1000081e 	bne	r2,zero,10ab4 <___vfprintf_internal_r+0x410>
   10a94:	da000404 	addi	r8,sp,16
   10a98:	003f5106 	br	107e0 <__alt_data_end+0xfc0107e0>
   10a9c:	d8802017 	ldw	r2,128(sp)
   10aa0:	10000426 	beq	r2,zero,10ab4 <___vfprintf_internal_r+0x410>
   10aa4:	d9002d17 	ldw	r4,180(sp)
   10aa8:	d9801e04 	addi	r6,sp,120
   10aac:	b80b883a 	mov	r5,r23
   10ab0:	00189b00 	call	189b0 <__sprint_r>
   10ab4:	b880030b 	ldhu	r2,12(r23)
   10ab8:	1080100c 	andi	r2,r2,64
   10abc:	1005c01e 	bne	r2,zero,121c0 <___vfprintf_internal_r+0x1b1c>
   10ac0:	d8802f17 	ldw	r2,188(sp)
   10ac4:	dfc04717 	ldw	ra,284(sp)
   10ac8:	df004617 	ldw	fp,280(sp)
   10acc:	ddc04517 	ldw	r23,276(sp)
   10ad0:	dd804417 	ldw	r22,272(sp)
   10ad4:	dd404317 	ldw	r21,268(sp)
   10ad8:	dd004217 	ldw	r20,264(sp)
   10adc:	dcc04117 	ldw	r19,260(sp)
   10ae0:	dc804017 	ldw	r18,256(sp)
   10ae4:	dc403f17 	ldw	r17,252(sp)
   10ae8:	dc003e17 	ldw	r16,248(sp)
   10aec:	dec04804 	addi	sp,sp,288
   10af0:	f800283a 	ret
   10af4:	d9002d17 	ldw	r4,180(sp)
   10af8:	0014a640 	call	14a64 <__sinit>
   10afc:	003f0206 	br	10708 <__alt_data_end+0xfc010708>
   10b00:	d9002e17 	ldw	r4,184(sp)
   10b04:	d9402e17 	ldw	r5,184(sp)
   10b08:	21000017 	ldw	r4,0(r4)
   10b0c:	28800104 	addi	r2,r5,4
   10b10:	d9003115 	stw	r4,196(sp)
   10b14:	203fa716 	blt	r4,zero,109b4 <__alt_data_end+0xfc0109b4>
   10b18:	d8802e15 	stw	r2,184(sp)
   10b1c:	ac400007 	ldb	r17,0(r21)
   10b20:	003f4206 	br	1082c <__alt_data_end+0xfc01082c>
   10b24:	ac400007 	ldb	r17,0(r21)
   10b28:	01000a84 	movi	r4,42
   10b2c:	a8c00044 	addi	r3,r21,1
   10b30:	89075826 	beq	r17,r4,12894 <___vfprintf_internal_r+0x21f0>
   10b34:	8cbff404 	addi	r18,r17,-48
   10b38:	b486ae36 	bltu	r22,r18,125f4 <___vfprintf_internal_r+0x1f50>
   10b3c:	0009883a 	mov	r4,zero
   10b40:	1823883a 	mov	r17,r3
   10b44:	01400284 	movi	r5,10
   10b48:	000cca00 	call	cca0 <__mulsi3>
   10b4c:	88c00007 	ldb	r3,0(r17)
   10b50:	1489883a 	add	r4,r2,r18
   10b54:	8d400044 	addi	r21,r17,1
   10b58:	1cbff404 	addi	r18,r3,-48
   10b5c:	a823883a 	mov	r17,r21
   10b60:	b4bff82e 	bgeu	r22,r18,10b44 <__alt_data_end+0xfc010b44>
   10b64:	1823883a 	mov	r17,r3
   10b68:	2005f616 	blt	r4,zero,12344 <___vfprintf_internal_r+0x1ca0>
   10b6c:	d9002a15 	stw	r4,168(sp)
   10b70:	003f2f06 	br	10830 <__alt_data_end+0xfc010830>
   10b74:	84002014 	ori	r16,r16,128
   10b78:	ac400007 	ldb	r17,0(r21)
   10b7c:	003f2b06 	br	1082c <__alt_data_end+0xfc01082c>
   10b80:	8cbff404 	addi	r18,r17,-48
   10b84:	d8003115 	stw	zero,196(sp)
   10b88:	0009883a 	mov	r4,zero
   10b8c:	a823883a 	mov	r17,r21
   10b90:	01400284 	movi	r5,10
   10b94:	000cca00 	call	cca0 <__mulsi3>
   10b98:	88c00007 	ldb	r3,0(r17)
   10b9c:	9089883a 	add	r4,r18,r2
   10ba0:	ad400044 	addi	r21,r21,1
   10ba4:	1cbff404 	addi	r18,r3,-48
   10ba8:	a823883a 	mov	r17,r21
   10bac:	b4bff82e 	bgeu	r22,r18,10b90 <__alt_data_end+0xfc010b90>
   10bb0:	1823883a 	mov	r17,r3
   10bb4:	d9003115 	stw	r4,196(sp)
   10bb8:	003f1d06 	br	10830 <__alt_data_end+0xfc010830>
   10bbc:	8025883a 	mov	r18,r16
   10bc0:	dc002903 	ldbu	r16,164(sp)
   10bc4:	e011883a 	mov	r8,fp
   10bc8:	84003fcc 	andi	r16,r16,255
   10bcc:	8007531e 	bne	r16,zero,1291c <___vfprintf_internal_r+0x2278>
   10bd0:	94800414 	ori	r18,r18,16
   10bd4:	9080080c 	andi	r2,r18,32
   10bd8:	1003a326 	beq	r2,zero,11a68 <___vfprintf_internal_r+0x13c4>
   10bdc:	d9002e17 	ldw	r4,184(sp)
   10be0:	20800117 	ldw	r2,4(r4)
   10be4:	24c00017 	ldw	r19,0(r4)
   10be8:	21000204 	addi	r4,r4,8
   10bec:	d9002e15 	stw	r4,184(sp)
   10bf0:	102d883a 	mov	r22,r2
   10bf4:	10047316 	blt	r2,zero,11dc4 <___vfprintf_internal_r+0x1720>
   10bf8:	d9002a17 	ldw	r4,168(sp)
   10bfc:	df002783 	ldbu	fp,158(sp)
   10c00:	2003e416 	blt	r4,zero,11b94 <___vfprintf_internal_r+0x14f0>
   10c04:	00ffdfc4 	movi	r3,-129
   10c08:	9d84b03a 	or	r2,r19,r22
   10c0c:	90e4703a 	and	r18,r18,r3
   10c10:	10018026 	beq	r2,zero,11214 <___vfprintf_internal_r+0xb70>
   10c14:	b003ab26 	beq	r22,zero,11ac4 <___vfprintf_internal_r+0x1420>
   10c18:	dc402915 	stw	r17,164(sp)
   10c1c:	dc001e04 	addi	r16,sp,120
   10c20:	b023883a 	mov	r17,r22
   10c24:	402d883a 	mov	r22,r8
   10c28:	9809883a 	mov	r4,r19
   10c2c:	880b883a 	mov	r5,r17
   10c30:	01800284 	movi	r6,10
   10c34:	000f883a 	mov	r7,zero
   10c38:	001aef40 	call	1aef4 <__umoddi3>
   10c3c:	10800c04 	addi	r2,r2,48
   10c40:	843fffc4 	addi	r16,r16,-1
   10c44:	9809883a 	mov	r4,r19
   10c48:	880b883a 	mov	r5,r17
   10c4c:	80800005 	stb	r2,0(r16)
   10c50:	01800284 	movi	r6,10
   10c54:	000f883a 	mov	r7,zero
   10c58:	001a8f80 	call	1a8f8 <__udivdi3>
   10c5c:	1027883a 	mov	r19,r2
   10c60:	10c4b03a 	or	r2,r2,r3
   10c64:	1823883a 	mov	r17,r3
   10c68:	103fef1e 	bne	r2,zero,10c28 <__alt_data_end+0xfc010c28>
   10c6c:	d8c02817 	ldw	r3,160(sp)
   10c70:	dc402917 	ldw	r17,164(sp)
   10c74:	b011883a 	mov	r8,r22
   10c78:	1c07c83a 	sub	r3,r3,r16
   10c7c:	d8c02b15 	stw	r3,172(sp)
   10c80:	00005f06 	br	10e00 <___vfprintf_internal_r+0x75c>
   10c84:	8025883a 	mov	r18,r16
   10c88:	dc002903 	ldbu	r16,164(sp)
   10c8c:	e011883a 	mov	r8,fp
   10c90:	84003fcc 	andi	r16,r16,255
   10c94:	80071e1e 	bne	r16,zero,12910 <___vfprintf_internal_r+0x226c>
   10c98:	9080020c 	andi	r2,r18,8
   10c9c:	1004af26 	beq	r2,zero,11f5c <___vfprintf_internal_r+0x18b8>
   10ca0:	d9002e17 	ldw	r4,184(sp)
   10ca4:	d9402e17 	ldw	r5,184(sp)
   10ca8:	d8802e17 	ldw	r2,184(sp)
   10cac:	21000017 	ldw	r4,0(r4)
   10cb0:	29400117 	ldw	r5,4(r5)
   10cb4:	10800204 	addi	r2,r2,8
   10cb8:	d9003615 	stw	r4,216(sp)
   10cbc:	d9403815 	stw	r5,224(sp)
   10cc0:	d8802e15 	stw	r2,184(sp)
   10cc4:	d9003617 	ldw	r4,216(sp)
   10cc8:	d9403817 	ldw	r5,224(sp)
   10ccc:	da003d15 	stw	r8,244(sp)
   10cd0:	04000044 	movi	r16,1
   10cd4:	00171940 	call	17194 <__fpclassifyd>
   10cd8:	da003d17 	ldw	r8,244(sp)
   10cdc:	1404441e 	bne	r2,r16,11df0 <___vfprintf_internal_r+0x174c>
   10ce0:	d9003617 	ldw	r4,216(sp)
   10ce4:	d9403817 	ldw	r5,224(sp)
   10ce8:	000d883a 	mov	r6,zero
   10cec:	000f883a 	mov	r7,zero
   10cf0:	001c8980 	call	1c898 <__ledf2>
   10cf4:	da003d17 	ldw	r8,244(sp)
   10cf8:	1005e316 	blt	r2,zero,12488 <___vfprintf_internal_r+0x1de4>
   10cfc:	df002783 	ldbu	fp,158(sp)
   10d00:	008011c4 	movi	r2,71
   10d04:	1445580e 	bge	r2,r17,12268 <___vfprintf_internal_r+0x1bc4>
   10d08:	040000f4 	movhi	r16,3
   10d0c:	84255704 	addi	r16,r16,-27300
   10d10:	00c000c4 	movi	r3,3
   10d14:	00bfdfc4 	movi	r2,-129
   10d18:	d8c02915 	stw	r3,164(sp)
   10d1c:	90a4703a 	and	r18,r18,r2
   10d20:	d8c02b15 	stw	r3,172(sp)
   10d24:	d8002a15 	stw	zero,168(sp)
   10d28:	d8003215 	stw	zero,200(sp)
   10d2c:	00003a06 	br	10e18 <___vfprintf_internal_r+0x774>
   10d30:	84000214 	ori	r16,r16,8
   10d34:	ac400007 	ldb	r17,0(r21)
   10d38:	003ebc06 	br	1082c <__alt_data_end+0xfc01082c>
   10d3c:	8025883a 	mov	r18,r16
   10d40:	dc002903 	ldbu	r16,164(sp)
   10d44:	e011883a 	mov	r8,fp
   10d48:	84003fcc 	andi	r16,r16,255
   10d4c:	8007001e 	bne	r16,zero,12950 <___vfprintf_internal_r+0x22ac>
   10d50:	94800414 	ori	r18,r18,16
   10d54:	9080080c 	andi	r2,r18,32
   10d58:	1002fa26 	beq	r2,zero,11944 <___vfprintf_internal_r+0x12a0>
   10d5c:	d9002e17 	ldw	r4,184(sp)
   10d60:	d9402a17 	ldw	r5,168(sp)
   10d64:	d8002785 	stb	zero,158(sp)
   10d68:	20800204 	addi	r2,r4,8
   10d6c:	24c00017 	ldw	r19,0(r4)
   10d70:	25800117 	ldw	r22,4(r4)
   10d74:	2804b116 	blt	r5,zero,1203c <___vfprintf_internal_r+0x1998>
   10d78:	013fdfc4 	movi	r4,-129
   10d7c:	9d86b03a 	or	r3,r19,r22
   10d80:	d8802e15 	stw	r2,184(sp)
   10d84:	9124703a 	and	r18,r18,r4
   10d88:	1802fb1e 	bne	r3,zero,11978 <___vfprintf_internal_r+0x12d4>
   10d8c:	d8c02a17 	ldw	r3,168(sp)
   10d90:	0039883a 	mov	fp,zero
   10d94:	1805e526 	beq	r3,zero,1252c <___vfprintf_internal_r+0x1e88>
   10d98:	0027883a 	mov	r19,zero
   10d9c:	002d883a 	mov	r22,zero
   10da0:	dc001e04 	addi	r16,sp,120
   10da4:	9806d0fa 	srli	r3,r19,3
   10da8:	b008977a 	slli	r4,r22,29
   10dac:	b02cd0fa 	srli	r22,r22,3
   10db0:	9cc001cc 	andi	r19,r19,7
   10db4:	98800c04 	addi	r2,r19,48
   10db8:	843fffc4 	addi	r16,r16,-1
   10dbc:	20e6b03a 	or	r19,r4,r3
   10dc0:	80800005 	stb	r2,0(r16)
   10dc4:	9d86b03a 	or	r3,r19,r22
   10dc8:	183ff61e 	bne	r3,zero,10da4 <__alt_data_end+0xfc010da4>
   10dcc:	90c0004c 	andi	r3,r18,1
   10dd0:	18014126 	beq	r3,zero,112d8 <___vfprintf_internal_r+0xc34>
   10dd4:	10803fcc 	andi	r2,r2,255
   10dd8:	1080201c 	xori	r2,r2,128
   10ddc:	10bfe004 	addi	r2,r2,-128
   10de0:	00c00c04 	movi	r3,48
   10de4:	10c13c26 	beq	r2,r3,112d8 <___vfprintf_internal_r+0xc34>
   10de8:	80ffffc5 	stb	r3,-1(r16)
   10dec:	d8c02817 	ldw	r3,160(sp)
   10df0:	80bfffc4 	addi	r2,r16,-1
   10df4:	1021883a 	mov	r16,r2
   10df8:	1887c83a 	sub	r3,r3,r2
   10dfc:	d8c02b15 	stw	r3,172(sp)
   10e00:	d8802b17 	ldw	r2,172(sp)
   10e04:	d9002a17 	ldw	r4,168(sp)
   10e08:	1100010e 	bge	r2,r4,10e10 <___vfprintf_internal_r+0x76c>
   10e0c:	2005883a 	mov	r2,r4
   10e10:	d8802915 	stw	r2,164(sp)
   10e14:	d8003215 	stw	zero,200(sp)
   10e18:	e7003fcc 	andi	fp,fp,255
   10e1c:	e700201c 	xori	fp,fp,128
   10e20:	e73fe004 	addi	fp,fp,-128
   10e24:	e0000326 	beq	fp,zero,10e34 <___vfprintf_internal_r+0x790>
   10e28:	d8c02917 	ldw	r3,164(sp)
   10e2c:	18c00044 	addi	r3,r3,1
   10e30:	d8c02915 	stw	r3,164(sp)
   10e34:	90c0008c 	andi	r3,r18,2
   10e38:	d8c02c15 	stw	r3,176(sp)
   10e3c:	18000326 	beq	r3,zero,10e4c <___vfprintf_internal_r+0x7a8>
   10e40:	d8c02917 	ldw	r3,164(sp)
   10e44:	18c00084 	addi	r3,r3,2
   10e48:	d8c02915 	stw	r3,164(sp)
   10e4c:	90c0210c 	andi	r3,r18,132
   10e50:	d8c03015 	stw	r3,192(sp)
   10e54:	1801c51e 	bne	r3,zero,1156c <___vfprintf_internal_r+0xec8>
   10e58:	d9003117 	ldw	r4,196(sp)
   10e5c:	d8c02917 	ldw	r3,164(sp)
   10e60:	20e7c83a 	sub	r19,r4,r3
   10e64:	04c1c10e 	bge	zero,r19,1156c <___vfprintf_internal_r+0xec8>
   10e68:	02400404 	movi	r9,16
   10e6c:	d8c02017 	ldw	r3,128(sp)
   10e70:	d8801f17 	ldw	r2,124(sp)
   10e74:	4cc52f0e 	bge	r9,r19,12334 <___vfprintf_internal_r+0x1c90>
   10e78:	014000f4 	movhi	r5,3
   10e7c:	29657284 	addi	r5,r5,-27190
   10e80:	dc403b15 	stw	r17,236(sp)
   10e84:	d9403515 	stw	r5,212(sp)
   10e88:	9823883a 	mov	r17,r19
   10e8c:	482d883a 	mov	r22,r9
   10e90:	9027883a 	mov	r19,r18
   10e94:	070001c4 	movi	fp,7
   10e98:	8025883a 	mov	r18,r16
   10e9c:	dc002d17 	ldw	r16,180(sp)
   10ea0:	00000306 	br	10eb0 <___vfprintf_internal_r+0x80c>
   10ea4:	8c7ffc04 	addi	r17,r17,-16
   10ea8:	42000204 	addi	r8,r8,8
   10eac:	b440130e 	bge	r22,r17,10efc <___vfprintf_internal_r+0x858>
   10eb0:	010000f4 	movhi	r4,3
   10eb4:	18c00404 	addi	r3,r3,16
   10eb8:	10800044 	addi	r2,r2,1
   10ebc:	21257284 	addi	r4,r4,-27190
   10ec0:	41000015 	stw	r4,0(r8)
   10ec4:	45800115 	stw	r22,4(r8)
   10ec8:	d8c02015 	stw	r3,128(sp)
   10ecc:	d8801f15 	stw	r2,124(sp)
   10ed0:	e0bff40e 	bge	fp,r2,10ea4 <__alt_data_end+0xfc010ea4>
   10ed4:	d9801e04 	addi	r6,sp,120
   10ed8:	b80b883a 	mov	r5,r23
   10edc:	8009883a 	mov	r4,r16
   10ee0:	00189b00 	call	189b0 <__sprint_r>
   10ee4:	103ef31e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   10ee8:	8c7ffc04 	addi	r17,r17,-16
   10eec:	d8c02017 	ldw	r3,128(sp)
   10ef0:	d8801f17 	ldw	r2,124(sp)
   10ef4:	da000404 	addi	r8,sp,16
   10ef8:	b47fed16 	blt	r22,r17,10eb0 <__alt_data_end+0xfc010eb0>
   10efc:	9021883a 	mov	r16,r18
   10f00:	9825883a 	mov	r18,r19
   10f04:	8827883a 	mov	r19,r17
   10f08:	dc403b17 	ldw	r17,236(sp)
   10f0c:	d9403517 	ldw	r5,212(sp)
   10f10:	98c7883a 	add	r3,r19,r3
   10f14:	10800044 	addi	r2,r2,1
   10f18:	41400015 	stw	r5,0(r8)
   10f1c:	44c00115 	stw	r19,4(r8)
   10f20:	d8c02015 	stw	r3,128(sp)
   10f24:	d8801f15 	stw	r2,124(sp)
   10f28:	010001c4 	movi	r4,7
   10f2c:	2082c516 	blt	r4,r2,11a44 <___vfprintf_internal_r+0x13a0>
   10f30:	df002787 	ldb	fp,158(sp)
   10f34:	42000204 	addi	r8,r8,8
   10f38:	e0000c26 	beq	fp,zero,10f6c <___vfprintf_internal_r+0x8c8>
   10f3c:	d8801f17 	ldw	r2,124(sp)
   10f40:	d9002784 	addi	r4,sp,158
   10f44:	18c00044 	addi	r3,r3,1
   10f48:	10800044 	addi	r2,r2,1
   10f4c:	41000015 	stw	r4,0(r8)
   10f50:	01000044 	movi	r4,1
   10f54:	41000115 	stw	r4,4(r8)
   10f58:	d8c02015 	stw	r3,128(sp)
   10f5c:	d8801f15 	stw	r2,124(sp)
   10f60:	010001c4 	movi	r4,7
   10f64:	20825e16 	blt	r4,r2,118e0 <___vfprintf_internal_r+0x123c>
   10f68:	42000204 	addi	r8,r8,8
   10f6c:	d8802c17 	ldw	r2,176(sp)
   10f70:	10000c26 	beq	r2,zero,10fa4 <___vfprintf_internal_r+0x900>
   10f74:	d8801f17 	ldw	r2,124(sp)
   10f78:	d9002704 	addi	r4,sp,156
   10f7c:	18c00084 	addi	r3,r3,2
   10f80:	10800044 	addi	r2,r2,1
   10f84:	41000015 	stw	r4,0(r8)
   10f88:	01000084 	movi	r4,2
   10f8c:	41000115 	stw	r4,4(r8)
   10f90:	d8c02015 	stw	r3,128(sp)
   10f94:	d8801f15 	stw	r2,124(sp)
   10f98:	010001c4 	movi	r4,7
   10f9c:	20825816 	blt	r4,r2,11900 <___vfprintf_internal_r+0x125c>
   10fa0:	42000204 	addi	r8,r8,8
   10fa4:	d9003017 	ldw	r4,192(sp)
   10fa8:	00802004 	movi	r2,128
   10fac:	2081bb26 	beq	r4,r2,1169c <___vfprintf_internal_r+0xff8>
   10fb0:	d9402a17 	ldw	r5,168(sp)
   10fb4:	d8802b17 	ldw	r2,172(sp)
   10fb8:	28adc83a 	sub	r22,r5,r2
   10fbc:	0580310e 	bge	zero,r22,11084 <___vfprintf_internal_r+0x9e0>
   10fc0:	07000404 	movi	fp,16
   10fc4:	d8801f17 	ldw	r2,124(sp)
   10fc8:	e584360e 	bge	fp,r22,120a4 <___vfprintf_internal_r+0x1a00>
   10fcc:	014000f4 	movhi	r5,3
   10fd0:	29656e84 	addi	r5,r5,-27206
   10fd4:	dc402a15 	stw	r17,168(sp)
   10fd8:	d9402c15 	stw	r5,176(sp)
   10fdc:	b023883a 	mov	r17,r22
   10fe0:	04c001c4 	movi	r19,7
   10fe4:	a82d883a 	mov	r22,r21
   10fe8:	902b883a 	mov	r21,r18
   10fec:	8025883a 	mov	r18,r16
   10ff0:	dc002d17 	ldw	r16,180(sp)
   10ff4:	00000306 	br	11004 <___vfprintf_internal_r+0x960>
   10ff8:	8c7ffc04 	addi	r17,r17,-16
   10ffc:	42000204 	addi	r8,r8,8
   11000:	e440110e 	bge	fp,r17,11048 <___vfprintf_internal_r+0x9a4>
   11004:	18c00404 	addi	r3,r3,16
   11008:	10800044 	addi	r2,r2,1
   1100c:	45000015 	stw	r20,0(r8)
   11010:	47000115 	stw	fp,4(r8)
   11014:	d8c02015 	stw	r3,128(sp)
   11018:	d8801f15 	stw	r2,124(sp)
   1101c:	98bff60e 	bge	r19,r2,10ff8 <__alt_data_end+0xfc010ff8>
   11020:	d9801e04 	addi	r6,sp,120
   11024:	b80b883a 	mov	r5,r23
   11028:	8009883a 	mov	r4,r16
   1102c:	00189b00 	call	189b0 <__sprint_r>
   11030:	103ea01e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11034:	8c7ffc04 	addi	r17,r17,-16
   11038:	d8c02017 	ldw	r3,128(sp)
   1103c:	d8801f17 	ldw	r2,124(sp)
   11040:	da000404 	addi	r8,sp,16
   11044:	e47fef16 	blt	fp,r17,11004 <__alt_data_end+0xfc011004>
   11048:	9021883a 	mov	r16,r18
   1104c:	a825883a 	mov	r18,r21
   11050:	b02b883a 	mov	r21,r22
   11054:	882d883a 	mov	r22,r17
   11058:	dc402a17 	ldw	r17,168(sp)
   1105c:	d9002c17 	ldw	r4,176(sp)
   11060:	1d87883a 	add	r3,r3,r22
   11064:	10800044 	addi	r2,r2,1
   11068:	41000015 	stw	r4,0(r8)
   1106c:	45800115 	stw	r22,4(r8)
   11070:	d8c02015 	stw	r3,128(sp)
   11074:	d8801f15 	stw	r2,124(sp)
   11078:	010001c4 	movi	r4,7
   1107c:	20821016 	blt	r4,r2,118c0 <___vfprintf_internal_r+0x121c>
   11080:	42000204 	addi	r8,r8,8
   11084:	9080400c 	andi	r2,r18,256
   11088:	10013a1e 	bne	r2,zero,11574 <___vfprintf_internal_r+0xed0>
   1108c:	d9402b17 	ldw	r5,172(sp)
   11090:	d8801f17 	ldw	r2,124(sp)
   11094:	44000015 	stw	r16,0(r8)
   11098:	1947883a 	add	r3,r3,r5
   1109c:	10800044 	addi	r2,r2,1
   110a0:	41400115 	stw	r5,4(r8)
   110a4:	d8c02015 	stw	r3,128(sp)
   110a8:	d8801f15 	stw	r2,124(sp)
   110ac:	010001c4 	movi	r4,7
   110b0:	2081f516 	blt	r4,r2,11888 <___vfprintf_internal_r+0x11e4>
   110b4:	42000204 	addi	r8,r8,8
   110b8:	9480010c 	andi	r18,r18,4
   110bc:	90003226 	beq	r18,zero,11188 <___vfprintf_internal_r+0xae4>
   110c0:	d9403117 	ldw	r5,196(sp)
   110c4:	d8802917 	ldw	r2,164(sp)
   110c8:	28a1c83a 	sub	r16,r5,r2
   110cc:	04002e0e 	bge	zero,r16,11188 <___vfprintf_internal_r+0xae4>
   110d0:	04400404 	movi	r17,16
   110d4:	d8801f17 	ldw	r2,124(sp)
   110d8:	8c04c40e 	bge	r17,r16,123ec <___vfprintf_internal_r+0x1d48>
   110dc:	014000f4 	movhi	r5,3
   110e0:	29657284 	addi	r5,r5,-27190
   110e4:	d9403515 	stw	r5,212(sp)
   110e8:	048001c4 	movi	r18,7
   110ec:	dcc02d17 	ldw	r19,180(sp)
   110f0:	00000306 	br	11100 <___vfprintf_internal_r+0xa5c>
   110f4:	843ffc04 	addi	r16,r16,-16
   110f8:	42000204 	addi	r8,r8,8
   110fc:	8c00130e 	bge	r17,r16,1114c <___vfprintf_internal_r+0xaa8>
   11100:	010000f4 	movhi	r4,3
   11104:	18c00404 	addi	r3,r3,16
   11108:	10800044 	addi	r2,r2,1
   1110c:	21257284 	addi	r4,r4,-27190
   11110:	41000015 	stw	r4,0(r8)
   11114:	44400115 	stw	r17,4(r8)
   11118:	d8c02015 	stw	r3,128(sp)
   1111c:	d8801f15 	stw	r2,124(sp)
   11120:	90bff40e 	bge	r18,r2,110f4 <__alt_data_end+0xfc0110f4>
   11124:	d9801e04 	addi	r6,sp,120
   11128:	b80b883a 	mov	r5,r23
   1112c:	9809883a 	mov	r4,r19
   11130:	00189b00 	call	189b0 <__sprint_r>
   11134:	103e5f1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11138:	843ffc04 	addi	r16,r16,-16
   1113c:	d8c02017 	ldw	r3,128(sp)
   11140:	d8801f17 	ldw	r2,124(sp)
   11144:	da000404 	addi	r8,sp,16
   11148:	8c3fed16 	blt	r17,r16,11100 <__alt_data_end+0xfc011100>
   1114c:	d9403517 	ldw	r5,212(sp)
   11150:	1c07883a 	add	r3,r3,r16
   11154:	10800044 	addi	r2,r2,1
   11158:	41400015 	stw	r5,0(r8)
   1115c:	44000115 	stw	r16,4(r8)
   11160:	d8c02015 	stw	r3,128(sp)
   11164:	d8801f15 	stw	r2,124(sp)
   11168:	010001c4 	movi	r4,7
   1116c:	2080060e 	bge	r4,r2,11188 <___vfprintf_internal_r+0xae4>
   11170:	d9002d17 	ldw	r4,180(sp)
   11174:	d9801e04 	addi	r6,sp,120
   11178:	b80b883a 	mov	r5,r23
   1117c:	00189b00 	call	189b0 <__sprint_r>
   11180:	103e4c1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11184:	d8c02017 	ldw	r3,128(sp)
   11188:	d8803117 	ldw	r2,196(sp)
   1118c:	d9002917 	ldw	r4,164(sp)
   11190:	1100010e 	bge	r2,r4,11198 <___vfprintf_internal_r+0xaf4>
   11194:	2005883a 	mov	r2,r4
   11198:	d9402f17 	ldw	r5,188(sp)
   1119c:	288b883a 	add	r5,r5,r2
   111a0:	d9402f15 	stw	r5,188(sp)
   111a4:	1801c01e 	bne	r3,zero,118a8 <___vfprintf_internal_r+0x1204>
   111a8:	a8800007 	ldb	r2,0(r21)
   111ac:	d8001f15 	stw	zero,124(sp)
   111b0:	da000404 	addi	r8,sp,16
   111b4:	103d751e 	bne	r2,zero,1078c <__alt_data_end+0xfc01078c>
   111b8:	a823883a 	mov	r17,r21
   111bc:	003d8b06 	br	107ec <__alt_data_end+0xfc0107ec>
   111c0:	8025883a 	mov	r18,r16
   111c4:	dc002903 	ldbu	r16,164(sp)
   111c8:	e011883a 	mov	r8,fp
   111cc:	84003fcc 	andi	r16,r16,255
   111d0:	8005e51e 	bne	r16,zero,12968 <___vfprintf_internal_r+0x22c4>
   111d4:	94800414 	ori	r18,r18,16
   111d8:	9080080c 	andi	r2,r18,32
   111dc:	10022b26 	beq	r2,zero,11a8c <___vfprintf_internal_r+0x13e8>
   111e0:	d9002e17 	ldw	r4,184(sp)
   111e4:	d9402a17 	ldw	r5,168(sp)
   111e8:	d8002785 	stb	zero,158(sp)
   111ec:	20c00204 	addi	r3,r4,8
   111f0:	24c00017 	ldw	r19,0(r4)
   111f4:	25800117 	ldw	r22,4(r4)
   111f8:	28042e16 	blt	r5,zero,122b4 <___vfprintf_internal_r+0x1c10>
   111fc:	013fdfc4 	movi	r4,-129
   11200:	9d84b03a 	or	r2,r19,r22
   11204:	d8c02e15 	stw	r3,184(sp)
   11208:	9124703a 	and	r18,r18,r4
   1120c:	0039883a 	mov	fp,zero
   11210:	103e801e 	bne	r2,zero,10c14 <__alt_data_end+0xfc010c14>
   11214:	d9002a17 	ldw	r4,168(sp)
   11218:	2002e01e 	bne	r4,zero,11d9c <___vfprintf_internal_r+0x16f8>
   1121c:	d8002a15 	stw	zero,168(sp)
   11220:	d8002b15 	stw	zero,172(sp)
   11224:	dc001e04 	addi	r16,sp,120
   11228:	003ef506 	br	10e00 <__alt_data_end+0xfc010e00>
   1122c:	8025883a 	mov	r18,r16
   11230:	dc002903 	ldbu	r16,164(sp)
   11234:	e011883a 	mov	r8,fp
   11238:	84003fcc 	andi	r16,r16,255
   1123c:	8005ba1e 	bne	r16,zero,12928 <___vfprintf_internal_r+0x2284>
   11240:	010000f4 	movhi	r4,3
   11244:	21255a04 	addi	r4,r4,-27288
   11248:	d9003915 	stw	r4,228(sp)
   1124c:	9080080c 	andi	r2,r18,32
   11250:	10006126 	beq	r2,zero,113d8 <___vfprintf_internal_r+0xd34>
   11254:	d9402e17 	ldw	r5,184(sp)
   11258:	2cc00017 	ldw	r19,0(r5)
   1125c:	2d800117 	ldw	r22,4(r5)
   11260:	29400204 	addi	r5,r5,8
   11264:	d9402e15 	stw	r5,184(sp)
   11268:	9080004c 	andi	r2,r18,1
   1126c:	1001ac26 	beq	r2,zero,11920 <___vfprintf_internal_r+0x127c>
   11270:	9d84b03a 	or	r2,r19,r22
   11274:	10038526 	beq	r2,zero,1208c <___vfprintf_internal_r+0x19e8>
   11278:	d8c02a17 	ldw	r3,168(sp)
   1127c:	00800c04 	movi	r2,48
   11280:	d8802705 	stb	r2,156(sp)
   11284:	dc402745 	stb	r17,157(sp)
   11288:	d8002785 	stb	zero,158(sp)
   1128c:	90800094 	ori	r2,r18,2
   11290:	18047916 	blt	r3,zero,12478 <___vfprintf_internal_r+0x1dd4>
   11294:	00bfdfc4 	movi	r2,-129
   11298:	90a4703a 	and	r18,r18,r2
   1129c:	94800094 	ori	r18,r18,2
   112a0:	0039883a 	mov	fp,zero
   112a4:	d9003917 	ldw	r4,228(sp)
   112a8:	dc001e04 	addi	r16,sp,120
   112ac:	988003cc 	andi	r2,r19,15
   112b0:	b006973a 	slli	r3,r22,28
   112b4:	2085883a 	add	r2,r4,r2
   112b8:	9826d13a 	srli	r19,r19,4
   112bc:	10800003 	ldbu	r2,0(r2)
   112c0:	b02cd13a 	srli	r22,r22,4
   112c4:	843fffc4 	addi	r16,r16,-1
   112c8:	1ce6b03a 	or	r19,r3,r19
   112cc:	80800005 	stb	r2,0(r16)
   112d0:	9d84b03a 	or	r2,r19,r22
   112d4:	103ff51e 	bne	r2,zero,112ac <__alt_data_end+0xfc0112ac>
   112d8:	d8c02817 	ldw	r3,160(sp)
   112dc:	1c07c83a 	sub	r3,r3,r16
   112e0:	d8c02b15 	stw	r3,172(sp)
   112e4:	003ec606 	br	10e00 <__alt_data_end+0xfc010e00>
   112e8:	8025883a 	mov	r18,r16
   112ec:	dc002903 	ldbu	r16,164(sp)
   112f0:	e011883a 	mov	r8,fp
   112f4:	84003fcc 	andi	r16,r16,255
   112f8:	803e9626 	beq	r16,zero,10d54 <__alt_data_end+0xfc010d54>
   112fc:	d8c02b03 	ldbu	r3,172(sp)
   11300:	d8c02785 	stb	r3,158(sp)
   11304:	003e9306 	br	10d54 <__alt_data_end+0xfc010d54>
   11308:	00c00044 	movi	r3,1
   1130c:	d8c02905 	stb	r3,164(sp)
   11310:	00c00ac4 	movi	r3,43
   11314:	d8c02b05 	stb	r3,172(sp)
   11318:	ac400007 	ldb	r17,0(r21)
   1131c:	003d4306 	br	1082c <__alt_data_end+0xfc01082c>
   11320:	84000814 	ori	r16,r16,32
   11324:	ac400007 	ldb	r17,0(r21)
   11328:	003d4006 	br	1082c <__alt_data_end+0xfc01082c>
   1132c:	d8802e17 	ldw	r2,184(sp)
   11330:	8025883a 	mov	r18,r16
   11334:	d8002785 	stb	zero,158(sp)
   11338:	14000017 	ldw	r16,0(r2)
   1133c:	e011883a 	mov	r8,fp
   11340:	14c00104 	addi	r19,r2,4
   11344:	80042d26 	beq	r16,zero,123fc <___vfprintf_internal_r+0x1d58>
   11348:	d8c02a17 	ldw	r3,168(sp)
   1134c:	1803e416 	blt	r3,zero,122e0 <___vfprintf_internal_r+0x1c3c>
   11350:	180d883a 	mov	r6,r3
   11354:	000b883a 	mov	r5,zero
   11358:	8009883a 	mov	r4,r16
   1135c:	df003d15 	stw	fp,244(sp)
   11360:	00157d00 	call	157d0 <memchr>
   11364:	da003d17 	ldw	r8,244(sp)
   11368:	10046826 	beq	r2,zero,1250c <___vfprintf_internal_r+0x1e68>
   1136c:	1405c83a 	sub	r2,r2,r16
   11370:	d8802b15 	stw	r2,172(sp)
   11374:	1003e016 	blt	r2,zero,122f8 <___vfprintf_internal_r+0x1c54>
   11378:	df002783 	ldbu	fp,158(sp)
   1137c:	d8802915 	stw	r2,164(sp)
   11380:	dcc02e15 	stw	r19,184(sp)
   11384:	d8002a15 	stw	zero,168(sp)
   11388:	d8003215 	stw	zero,200(sp)
   1138c:	003ea206 	br	10e18 <__alt_data_end+0xfc010e18>
   11390:	8025883a 	mov	r18,r16
   11394:	dc002903 	ldbu	r16,164(sp)
   11398:	e011883a 	mov	r8,fp
   1139c:	84003fcc 	andi	r16,r16,255
   113a0:	803f8d26 	beq	r16,zero,111d8 <__alt_data_end+0xfc0111d8>
   113a4:	d8c02b03 	ldbu	r3,172(sp)
   113a8:	d8c02785 	stb	r3,158(sp)
   113ac:	003f8a06 	br	111d8 <__alt_data_end+0xfc0111d8>
   113b0:	8025883a 	mov	r18,r16
   113b4:	dc002903 	ldbu	r16,164(sp)
   113b8:	e011883a 	mov	r8,fp
   113bc:	84003fcc 	andi	r16,r16,255
   113c0:	8005661e 	bne	r16,zero,1295c <___vfprintf_internal_r+0x22b8>
   113c4:	010000f4 	movhi	r4,3
   113c8:	21255f04 	addi	r4,r4,-27268
   113cc:	d9003915 	stw	r4,228(sp)
   113d0:	9080080c 	andi	r2,r18,32
   113d4:	103f9f1e 	bne	r2,zero,11254 <__alt_data_end+0xfc011254>
   113d8:	9080040c 	andi	r2,r18,16
   113dc:	1002eb26 	beq	r2,zero,11f8c <___vfprintf_internal_r+0x18e8>
   113e0:	d8802e17 	ldw	r2,184(sp)
   113e4:	002d883a 	mov	r22,zero
   113e8:	14c00017 	ldw	r19,0(r2)
   113ec:	10800104 	addi	r2,r2,4
   113f0:	d8802e15 	stw	r2,184(sp)
   113f4:	003f9c06 	br	11268 <__alt_data_end+0xfc011268>
   113f8:	d8802b07 	ldb	r2,172(sp)
   113fc:	1002e11e 	bne	r2,zero,11f84 <___vfprintf_internal_r+0x18e0>
   11400:	00c00044 	movi	r3,1
   11404:	d8c02905 	stb	r3,164(sp)
   11408:	00c00804 	movi	r3,32
   1140c:	d8c02b05 	stb	r3,172(sp)
   11410:	ac400007 	ldb	r17,0(r21)
   11414:	003d0506 	br	1082c <__alt_data_end+0xfc01082c>
   11418:	84000054 	ori	r16,r16,1
   1141c:	ac400007 	ldb	r17,0(r21)
   11420:	003d0206 	br	1082c <__alt_data_end+0xfc01082c>
   11424:	8025883a 	mov	r18,r16
   11428:	dc002903 	ldbu	r16,164(sp)
   1142c:	e011883a 	mov	r8,fp
   11430:	84003fcc 	andi	r16,r16,255
   11434:	803de726 	beq	r16,zero,10bd4 <__alt_data_end+0xfc010bd4>
   11438:	d8c02b03 	ldbu	r3,172(sp)
   1143c:	d8c02785 	stb	r3,158(sp)
   11440:	003de406 	br	10bd4 <__alt_data_end+0xfc010bd4>
   11444:	84001014 	ori	r16,r16,64
   11448:	ac400007 	ldb	r17,0(r21)
   1144c:	003cf706 	br	1082c <__alt_data_end+0xfc01082c>
   11450:	ac400007 	ldb	r17,0(r21)
   11454:	00801b04 	movi	r2,108
   11458:	88838f26 	beq	r17,r2,12298 <___vfprintf_internal_r+0x1bf4>
   1145c:	84000414 	ori	r16,r16,16
   11460:	003cf206 	br	1082c <__alt_data_end+0xfc01082c>
   11464:	8025883a 	mov	r18,r16
   11468:	dc002903 	ldbu	r16,164(sp)
   1146c:	e011883a 	mov	r8,fp
   11470:	84003fcc 	andi	r16,r16,255
   11474:	80053f1e 	bne	r16,zero,12974 <___vfprintf_internal_r+0x22d0>
   11478:	9080080c 	andi	r2,r18,32
   1147c:	1002d226 	beq	r2,zero,11fc8 <___vfprintf_internal_r+0x1924>
   11480:	d9002e17 	ldw	r4,184(sp)
   11484:	d9402f17 	ldw	r5,188(sp)
   11488:	20800017 	ldw	r2,0(r4)
   1148c:	2807d7fa 	srai	r3,r5,31
   11490:	21000104 	addi	r4,r4,4
   11494:	d9002e15 	stw	r4,184(sp)
   11498:	11400015 	stw	r5,0(r2)
   1149c:	10c00115 	stw	r3,4(r2)
   114a0:	003cb806 	br	10784 <__alt_data_end+0xfc010784>
   114a4:	d8c02e17 	ldw	r3,184(sp)
   114a8:	d9002e17 	ldw	r4,184(sp)
   114ac:	8025883a 	mov	r18,r16
   114b0:	18800017 	ldw	r2,0(r3)
   114b4:	21000104 	addi	r4,r4,4
   114b8:	00c00044 	movi	r3,1
   114bc:	e011883a 	mov	r8,fp
   114c0:	d8c02915 	stw	r3,164(sp)
   114c4:	d8002785 	stb	zero,158(sp)
   114c8:	d8801405 	stb	r2,80(sp)
   114cc:	d9002e15 	stw	r4,184(sp)
   114d0:	d8c02b15 	stw	r3,172(sp)
   114d4:	d8002a15 	stw	zero,168(sp)
   114d8:	d8003215 	stw	zero,200(sp)
   114dc:	dc001404 	addi	r16,sp,80
   114e0:	0039883a 	mov	fp,zero
   114e4:	003e5306 	br	10e34 <__alt_data_end+0xfc010e34>
   114e8:	010000f4 	movhi	r4,3
   114ec:	21255f04 	addi	r4,r4,-27268
   114f0:	0039883a 	mov	fp,zero
   114f4:	d9003915 	stw	r4,228(sp)
   114f8:	04401e04 	movi	r17,120
   114fc:	003f6906 	br	112a4 <__alt_data_end+0xfc0112a4>
   11500:	8025883a 	mov	r18,r16
   11504:	dc002903 	ldbu	r16,164(sp)
   11508:	e011883a 	mov	r8,fp
   1150c:	84003fcc 	andi	r16,r16,255
   11510:	8005081e 	bne	r16,zero,12934 <___vfprintf_internal_r+0x2290>
   11514:	883d6126 	beq	r17,zero,10a9c <__alt_data_end+0xfc010a9c>
   11518:	00c00044 	movi	r3,1
   1151c:	d8c02915 	stw	r3,164(sp)
   11520:	dc401405 	stb	r17,80(sp)
   11524:	d8002785 	stb	zero,158(sp)
   11528:	003fe906 	br	114d0 <__alt_data_end+0xfc0114d0>
   1152c:	014000f4 	movhi	r5,3
   11530:	29655f04 	addi	r5,r5,-27268
   11534:	d9403915 	stw	r5,228(sp)
   11538:	d8c02e15 	stw	r3,184(sp)
   1153c:	1025883a 	mov	r18,r2
   11540:	04401e04 	movi	r17,120
   11544:	9d84b03a 	or	r2,r19,r22
   11548:	1000fc1e 	bne	r2,zero,1193c <___vfprintf_internal_r+0x1298>
   1154c:	0039883a 	mov	fp,zero
   11550:	00800084 	movi	r2,2
   11554:	10803fcc 	andi	r2,r2,255
   11558:	00c00044 	movi	r3,1
   1155c:	10c20f26 	beq	r2,r3,11d9c <___vfprintf_internal_r+0x16f8>
   11560:	00c00084 	movi	r3,2
   11564:	10fd3326 	beq	r2,r3,10a34 <__alt_data_end+0xfc010a34>
   11568:	003e0b06 	br	10d98 <__alt_data_end+0xfc010d98>
   1156c:	d8c02017 	ldw	r3,128(sp)
   11570:	003e7106 	br	10f38 <__alt_data_end+0xfc010f38>
   11574:	00801944 	movi	r2,101
   11578:	14407e0e 	bge	r2,r17,11774 <___vfprintf_internal_r+0x10d0>
   1157c:	d9003617 	ldw	r4,216(sp)
   11580:	d9403817 	ldw	r5,224(sp)
   11584:	000d883a 	mov	r6,zero
   11588:	000f883a 	mov	r7,zero
   1158c:	d8c03c15 	stw	r3,240(sp)
   11590:	da003d15 	stw	r8,244(sp)
   11594:	001c7340 	call	1c734 <__eqdf2>
   11598:	d8c03c17 	ldw	r3,240(sp)
   1159c:	da003d17 	ldw	r8,244(sp)
   115a0:	1000f71e 	bne	r2,zero,11980 <___vfprintf_internal_r+0x12dc>
   115a4:	d8801f17 	ldw	r2,124(sp)
   115a8:	010000f4 	movhi	r4,3
   115ac:	21256604 	addi	r4,r4,-27240
   115b0:	18c00044 	addi	r3,r3,1
   115b4:	10800044 	addi	r2,r2,1
   115b8:	41000015 	stw	r4,0(r8)
   115bc:	01000044 	movi	r4,1
   115c0:	41000115 	stw	r4,4(r8)
   115c4:	d8c02015 	stw	r3,128(sp)
   115c8:	d8801f15 	stw	r2,124(sp)
   115cc:	010001c4 	movi	r4,7
   115d0:	2082b816 	blt	r4,r2,120b4 <___vfprintf_internal_r+0x1a10>
   115d4:	42000204 	addi	r8,r8,8
   115d8:	d8802617 	ldw	r2,152(sp)
   115dc:	d9403317 	ldw	r5,204(sp)
   115e0:	11400216 	blt	r2,r5,115ec <___vfprintf_internal_r+0xf48>
   115e4:	9080004c 	andi	r2,r18,1
   115e8:	103eb326 	beq	r2,zero,110b8 <__alt_data_end+0xfc0110b8>
   115ec:	d8803717 	ldw	r2,220(sp)
   115f0:	d9003417 	ldw	r4,208(sp)
   115f4:	d9403717 	ldw	r5,220(sp)
   115f8:	1887883a 	add	r3,r3,r2
   115fc:	d8801f17 	ldw	r2,124(sp)
   11600:	41000015 	stw	r4,0(r8)
   11604:	41400115 	stw	r5,4(r8)
   11608:	10800044 	addi	r2,r2,1
   1160c:	d8c02015 	stw	r3,128(sp)
   11610:	d8801f15 	stw	r2,124(sp)
   11614:	010001c4 	movi	r4,7
   11618:	20832916 	blt	r4,r2,122c0 <___vfprintf_internal_r+0x1c1c>
   1161c:	42000204 	addi	r8,r8,8
   11620:	d8803317 	ldw	r2,204(sp)
   11624:	143fffc4 	addi	r16,r2,-1
   11628:	043ea30e 	bge	zero,r16,110b8 <__alt_data_end+0xfc0110b8>
   1162c:	04400404 	movi	r17,16
   11630:	d8801f17 	ldw	r2,124(sp)
   11634:	8c00880e 	bge	r17,r16,11858 <___vfprintf_internal_r+0x11b4>
   11638:	014000f4 	movhi	r5,3
   1163c:	29656e84 	addi	r5,r5,-27206
   11640:	d9402c15 	stw	r5,176(sp)
   11644:	058001c4 	movi	r22,7
   11648:	dcc02d17 	ldw	r19,180(sp)
   1164c:	00000306 	br	1165c <___vfprintf_internal_r+0xfb8>
   11650:	42000204 	addi	r8,r8,8
   11654:	843ffc04 	addi	r16,r16,-16
   11658:	8c00820e 	bge	r17,r16,11864 <___vfprintf_internal_r+0x11c0>
   1165c:	18c00404 	addi	r3,r3,16
   11660:	10800044 	addi	r2,r2,1
   11664:	45000015 	stw	r20,0(r8)
   11668:	44400115 	stw	r17,4(r8)
   1166c:	d8c02015 	stw	r3,128(sp)
   11670:	d8801f15 	stw	r2,124(sp)
   11674:	b0bff60e 	bge	r22,r2,11650 <__alt_data_end+0xfc011650>
   11678:	d9801e04 	addi	r6,sp,120
   1167c:	b80b883a 	mov	r5,r23
   11680:	9809883a 	mov	r4,r19
   11684:	00189b00 	call	189b0 <__sprint_r>
   11688:	103d0a1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   1168c:	d8c02017 	ldw	r3,128(sp)
   11690:	d8801f17 	ldw	r2,124(sp)
   11694:	da000404 	addi	r8,sp,16
   11698:	003fee06 	br	11654 <__alt_data_end+0xfc011654>
   1169c:	d9403117 	ldw	r5,196(sp)
   116a0:	d8802917 	ldw	r2,164(sp)
   116a4:	28adc83a 	sub	r22,r5,r2
   116a8:	05be410e 	bge	zero,r22,10fb0 <__alt_data_end+0xfc010fb0>
   116ac:	07000404 	movi	fp,16
   116b0:	d8801f17 	ldw	r2,124(sp)
   116b4:	e5838f0e 	bge	fp,r22,124f4 <___vfprintf_internal_r+0x1e50>
   116b8:	014000f4 	movhi	r5,3
   116bc:	29656e84 	addi	r5,r5,-27206
   116c0:	dc403015 	stw	r17,192(sp)
   116c4:	d9402c15 	stw	r5,176(sp)
   116c8:	b023883a 	mov	r17,r22
   116cc:	04c001c4 	movi	r19,7
   116d0:	a82d883a 	mov	r22,r21
   116d4:	902b883a 	mov	r21,r18
   116d8:	8025883a 	mov	r18,r16
   116dc:	dc002d17 	ldw	r16,180(sp)
   116e0:	00000306 	br	116f0 <___vfprintf_internal_r+0x104c>
   116e4:	8c7ffc04 	addi	r17,r17,-16
   116e8:	42000204 	addi	r8,r8,8
   116ec:	e440110e 	bge	fp,r17,11734 <___vfprintf_internal_r+0x1090>
   116f0:	18c00404 	addi	r3,r3,16
   116f4:	10800044 	addi	r2,r2,1
   116f8:	45000015 	stw	r20,0(r8)
   116fc:	47000115 	stw	fp,4(r8)
   11700:	d8c02015 	stw	r3,128(sp)
   11704:	d8801f15 	stw	r2,124(sp)
   11708:	98bff60e 	bge	r19,r2,116e4 <__alt_data_end+0xfc0116e4>
   1170c:	d9801e04 	addi	r6,sp,120
   11710:	b80b883a 	mov	r5,r23
   11714:	8009883a 	mov	r4,r16
   11718:	00189b00 	call	189b0 <__sprint_r>
   1171c:	103ce51e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11720:	8c7ffc04 	addi	r17,r17,-16
   11724:	d8c02017 	ldw	r3,128(sp)
   11728:	d8801f17 	ldw	r2,124(sp)
   1172c:	da000404 	addi	r8,sp,16
   11730:	e47fef16 	blt	fp,r17,116f0 <__alt_data_end+0xfc0116f0>
   11734:	9021883a 	mov	r16,r18
   11738:	a825883a 	mov	r18,r21
   1173c:	b02b883a 	mov	r21,r22
   11740:	882d883a 	mov	r22,r17
   11744:	dc403017 	ldw	r17,192(sp)
   11748:	d9002c17 	ldw	r4,176(sp)
   1174c:	1d87883a 	add	r3,r3,r22
   11750:	10800044 	addi	r2,r2,1
   11754:	41000015 	stw	r4,0(r8)
   11758:	45800115 	stw	r22,4(r8)
   1175c:	d8c02015 	stw	r3,128(sp)
   11760:	d8801f15 	stw	r2,124(sp)
   11764:	010001c4 	movi	r4,7
   11768:	20818e16 	blt	r4,r2,11da4 <___vfprintf_internal_r+0x1700>
   1176c:	42000204 	addi	r8,r8,8
   11770:	003e0f06 	br	10fb0 <__alt_data_end+0xfc010fb0>
   11774:	d9403317 	ldw	r5,204(sp)
   11778:	00800044 	movi	r2,1
   1177c:	18c00044 	addi	r3,r3,1
   11780:	1141530e 	bge	r2,r5,11cd0 <___vfprintf_internal_r+0x162c>
   11784:	dc401f17 	ldw	r17,124(sp)
   11788:	00800044 	movi	r2,1
   1178c:	40800115 	stw	r2,4(r8)
   11790:	8c400044 	addi	r17,r17,1
   11794:	44000015 	stw	r16,0(r8)
   11798:	d8c02015 	stw	r3,128(sp)
   1179c:	dc401f15 	stw	r17,124(sp)
   117a0:	008001c4 	movi	r2,7
   117a4:	14416b16 	blt	r2,r17,11d54 <___vfprintf_internal_r+0x16b0>
   117a8:	42000204 	addi	r8,r8,8
   117ac:	d8803717 	ldw	r2,220(sp)
   117b0:	d9003417 	ldw	r4,208(sp)
   117b4:	8c400044 	addi	r17,r17,1
   117b8:	10c7883a 	add	r3,r2,r3
   117bc:	40800115 	stw	r2,4(r8)
   117c0:	41000015 	stw	r4,0(r8)
   117c4:	d8c02015 	stw	r3,128(sp)
   117c8:	dc401f15 	stw	r17,124(sp)
   117cc:	008001c4 	movi	r2,7
   117d0:	14416916 	blt	r2,r17,11d78 <___vfprintf_internal_r+0x16d4>
   117d4:	45800204 	addi	r22,r8,8
   117d8:	d9003617 	ldw	r4,216(sp)
   117dc:	d9403817 	ldw	r5,224(sp)
   117e0:	000d883a 	mov	r6,zero
   117e4:	000f883a 	mov	r7,zero
   117e8:	d8c03c15 	stw	r3,240(sp)
   117ec:	001c7340 	call	1c734 <__eqdf2>
   117f0:	d8c03c17 	ldw	r3,240(sp)
   117f4:	1000bc26 	beq	r2,zero,11ae8 <___vfprintf_internal_r+0x1444>
   117f8:	d9403317 	ldw	r5,204(sp)
   117fc:	84000044 	addi	r16,r16,1
   11800:	8c400044 	addi	r17,r17,1
   11804:	28bfffc4 	addi	r2,r5,-1
   11808:	1887883a 	add	r3,r3,r2
   1180c:	b0800115 	stw	r2,4(r22)
   11810:	b4000015 	stw	r16,0(r22)
   11814:	d8c02015 	stw	r3,128(sp)
   11818:	dc401f15 	stw	r17,124(sp)
   1181c:	008001c4 	movi	r2,7
   11820:	14414316 	blt	r2,r17,11d30 <___vfprintf_internal_r+0x168c>
   11824:	b5800204 	addi	r22,r22,8
   11828:	d9003a17 	ldw	r4,232(sp)
   1182c:	df0022c4 	addi	fp,sp,139
   11830:	8c400044 	addi	r17,r17,1
   11834:	20c7883a 	add	r3,r4,r3
   11838:	b7000015 	stw	fp,0(r22)
   1183c:	b1000115 	stw	r4,4(r22)
   11840:	d8c02015 	stw	r3,128(sp)
   11844:	dc401f15 	stw	r17,124(sp)
   11848:	008001c4 	movi	r2,7
   1184c:	14400e16 	blt	r2,r17,11888 <___vfprintf_internal_r+0x11e4>
   11850:	b2000204 	addi	r8,r22,8
   11854:	003e1806 	br	110b8 <__alt_data_end+0xfc0110b8>
   11858:	010000f4 	movhi	r4,3
   1185c:	21256e84 	addi	r4,r4,-27206
   11860:	d9002c15 	stw	r4,176(sp)
   11864:	d9002c17 	ldw	r4,176(sp)
   11868:	1c07883a 	add	r3,r3,r16
   1186c:	44000115 	stw	r16,4(r8)
   11870:	41000015 	stw	r4,0(r8)
   11874:	10800044 	addi	r2,r2,1
   11878:	d8c02015 	stw	r3,128(sp)
   1187c:	d8801f15 	stw	r2,124(sp)
   11880:	010001c4 	movi	r4,7
   11884:	20be0b0e 	bge	r4,r2,110b4 <__alt_data_end+0xfc0110b4>
   11888:	d9002d17 	ldw	r4,180(sp)
   1188c:	d9801e04 	addi	r6,sp,120
   11890:	b80b883a 	mov	r5,r23
   11894:	00189b00 	call	189b0 <__sprint_r>
   11898:	103c861e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   1189c:	d8c02017 	ldw	r3,128(sp)
   118a0:	da000404 	addi	r8,sp,16
   118a4:	003e0406 	br	110b8 <__alt_data_end+0xfc0110b8>
   118a8:	d9002d17 	ldw	r4,180(sp)
   118ac:	d9801e04 	addi	r6,sp,120
   118b0:	b80b883a 	mov	r5,r23
   118b4:	00189b00 	call	189b0 <__sprint_r>
   118b8:	103e3b26 	beq	r2,zero,111a8 <__alt_data_end+0xfc0111a8>
   118bc:	003c7d06 	br	10ab4 <__alt_data_end+0xfc010ab4>
   118c0:	d9002d17 	ldw	r4,180(sp)
   118c4:	d9801e04 	addi	r6,sp,120
   118c8:	b80b883a 	mov	r5,r23
   118cc:	00189b00 	call	189b0 <__sprint_r>
   118d0:	103c781e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   118d4:	d8c02017 	ldw	r3,128(sp)
   118d8:	da000404 	addi	r8,sp,16
   118dc:	003de906 	br	11084 <__alt_data_end+0xfc011084>
   118e0:	d9002d17 	ldw	r4,180(sp)
   118e4:	d9801e04 	addi	r6,sp,120
   118e8:	b80b883a 	mov	r5,r23
   118ec:	00189b00 	call	189b0 <__sprint_r>
   118f0:	103c701e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   118f4:	d8c02017 	ldw	r3,128(sp)
   118f8:	da000404 	addi	r8,sp,16
   118fc:	003d9b06 	br	10f6c <__alt_data_end+0xfc010f6c>
   11900:	d9002d17 	ldw	r4,180(sp)
   11904:	d9801e04 	addi	r6,sp,120
   11908:	b80b883a 	mov	r5,r23
   1190c:	00189b00 	call	189b0 <__sprint_r>
   11910:	103c681e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11914:	d8c02017 	ldw	r3,128(sp)
   11918:	da000404 	addi	r8,sp,16
   1191c:	003da106 	br	10fa4 <__alt_data_end+0xfc010fa4>
   11920:	d9402a17 	ldw	r5,168(sp)
   11924:	d8002785 	stb	zero,158(sp)
   11928:	283f0616 	blt	r5,zero,11544 <__alt_data_end+0xfc011544>
   1192c:	00ffdfc4 	movi	r3,-129
   11930:	9d84b03a 	or	r2,r19,r22
   11934:	90e4703a 	and	r18,r18,r3
   11938:	103c3b26 	beq	r2,zero,10a28 <__alt_data_end+0xfc010a28>
   1193c:	0039883a 	mov	fp,zero
   11940:	003e5806 	br	112a4 <__alt_data_end+0xfc0112a4>
   11944:	9080040c 	andi	r2,r18,16
   11948:	1001b326 	beq	r2,zero,12018 <___vfprintf_internal_r+0x1974>
   1194c:	d8c02e17 	ldw	r3,184(sp)
   11950:	d9002a17 	ldw	r4,168(sp)
   11954:	d8002785 	stb	zero,158(sp)
   11958:	18800104 	addi	r2,r3,4
   1195c:	1cc00017 	ldw	r19,0(r3)
   11960:	002d883a 	mov	r22,zero
   11964:	2001b516 	blt	r4,zero,1203c <___vfprintf_internal_r+0x1998>
   11968:	00ffdfc4 	movi	r3,-129
   1196c:	d8802e15 	stw	r2,184(sp)
   11970:	90e4703a 	and	r18,r18,r3
   11974:	983d0526 	beq	r19,zero,10d8c <__alt_data_end+0xfc010d8c>
   11978:	0039883a 	mov	fp,zero
   1197c:	003d0806 	br	10da0 <__alt_data_end+0xfc010da0>
   11980:	dc402617 	ldw	r17,152(sp)
   11984:	0441d30e 	bge	zero,r17,120d4 <___vfprintf_internal_r+0x1a30>
   11988:	dc403217 	ldw	r17,200(sp)
   1198c:	d8803317 	ldw	r2,204(sp)
   11990:	1440010e 	bge	r2,r17,11998 <___vfprintf_internal_r+0x12f4>
   11994:	1023883a 	mov	r17,r2
   11998:	04400a0e 	bge	zero,r17,119c4 <___vfprintf_internal_r+0x1320>
   1199c:	d8801f17 	ldw	r2,124(sp)
   119a0:	1c47883a 	add	r3,r3,r17
   119a4:	44000015 	stw	r16,0(r8)
   119a8:	10800044 	addi	r2,r2,1
   119ac:	44400115 	stw	r17,4(r8)
   119b0:	d8c02015 	stw	r3,128(sp)
   119b4:	d8801f15 	stw	r2,124(sp)
   119b8:	010001c4 	movi	r4,7
   119bc:	20826516 	blt	r4,r2,12354 <___vfprintf_internal_r+0x1cb0>
   119c0:	42000204 	addi	r8,r8,8
   119c4:	88026116 	blt	r17,zero,1234c <___vfprintf_internal_r+0x1ca8>
   119c8:	d9003217 	ldw	r4,200(sp)
   119cc:	2463c83a 	sub	r17,r4,r17
   119d0:	04407b0e 	bge	zero,r17,11bc0 <___vfprintf_internal_r+0x151c>
   119d4:	05800404 	movi	r22,16
   119d8:	d8801f17 	ldw	r2,124(sp)
   119dc:	b4419d0e 	bge	r22,r17,12054 <___vfprintf_internal_r+0x19b0>
   119e0:	010000f4 	movhi	r4,3
   119e4:	21256e84 	addi	r4,r4,-27206
   119e8:	d9002c15 	stw	r4,176(sp)
   119ec:	070001c4 	movi	fp,7
   119f0:	dcc02d17 	ldw	r19,180(sp)
   119f4:	00000306 	br	11a04 <___vfprintf_internal_r+0x1360>
   119f8:	42000204 	addi	r8,r8,8
   119fc:	8c7ffc04 	addi	r17,r17,-16
   11a00:	b441970e 	bge	r22,r17,12060 <___vfprintf_internal_r+0x19bc>
   11a04:	18c00404 	addi	r3,r3,16
   11a08:	10800044 	addi	r2,r2,1
   11a0c:	45000015 	stw	r20,0(r8)
   11a10:	45800115 	stw	r22,4(r8)
   11a14:	d8c02015 	stw	r3,128(sp)
   11a18:	d8801f15 	stw	r2,124(sp)
   11a1c:	e0bff60e 	bge	fp,r2,119f8 <__alt_data_end+0xfc0119f8>
   11a20:	d9801e04 	addi	r6,sp,120
   11a24:	b80b883a 	mov	r5,r23
   11a28:	9809883a 	mov	r4,r19
   11a2c:	00189b00 	call	189b0 <__sprint_r>
   11a30:	103c201e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11a34:	d8c02017 	ldw	r3,128(sp)
   11a38:	d8801f17 	ldw	r2,124(sp)
   11a3c:	da000404 	addi	r8,sp,16
   11a40:	003fee06 	br	119fc <__alt_data_end+0xfc0119fc>
   11a44:	d9002d17 	ldw	r4,180(sp)
   11a48:	d9801e04 	addi	r6,sp,120
   11a4c:	b80b883a 	mov	r5,r23
   11a50:	00189b00 	call	189b0 <__sprint_r>
   11a54:	103c171e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11a58:	d8c02017 	ldw	r3,128(sp)
   11a5c:	df002787 	ldb	fp,158(sp)
   11a60:	da000404 	addi	r8,sp,16
   11a64:	003d3406 	br	10f38 <__alt_data_end+0xfc010f38>
   11a68:	9080040c 	andi	r2,r18,16
   11a6c:	10016126 	beq	r2,zero,11ff4 <___vfprintf_internal_r+0x1950>
   11a70:	d9402e17 	ldw	r5,184(sp)
   11a74:	2cc00017 	ldw	r19,0(r5)
   11a78:	29400104 	addi	r5,r5,4
   11a7c:	d9402e15 	stw	r5,184(sp)
   11a80:	982dd7fa 	srai	r22,r19,31
   11a84:	b005883a 	mov	r2,r22
   11a88:	003c5a06 	br	10bf4 <__alt_data_end+0xfc010bf4>
   11a8c:	9080040c 	andi	r2,r18,16
   11a90:	10003526 	beq	r2,zero,11b68 <___vfprintf_internal_r+0x14c4>
   11a94:	d8c02e17 	ldw	r3,184(sp)
   11a98:	d9002a17 	ldw	r4,168(sp)
   11a9c:	d8002785 	stb	zero,158(sp)
   11aa0:	18800104 	addi	r2,r3,4
   11aa4:	1cc00017 	ldw	r19,0(r3)
   11aa8:	002d883a 	mov	r22,zero
   11aac:	20003716 	blt	r4,zero,11b8c <___vfprintf_internal_r+0x14e8>
   11ab0:	00ffdfc4 	movi	r3,-129
   11ab4:	d8802e15 	stw	r2,184(sp)
   11ab8:	90e4703a 	and	r18,r18,r3
   11abc:	0039883a 	mov	fp,zero
   11ac0:	983dd426 	beq	r19,zero,11214 <__alt_data_end+0xfc011214>
   11ac4:	00800244 	movi	r2,9
   11ac8:	14fc5336 	bltu	r2,r19,10c18 <__alt_data_end+0xfc010c18>
   11acc:	d8c02817 	ldw	r3,160(sp)
   11ad0:	dc001dc4 	addi	r16,sp,119
   11ad4:	9cc00c04 	addi	r19,r19,48
   11ad8:	1c07c83a 	sub	r3,r3,r16
   11adc:	dcc01dc5 	stb	r19,119(sp)
   11ae0:	d8c02b15 	stw	r3,172(sp)
   11ae4:	003cc606 	br	10e00 <__alt_data_end+0xfc010e00>
   11ae8:	d8803317 	ldw	r2,204(sp)
   11aec:	143fffc4 	addi	r16,r2,-1
   11af0:	043f4d0e 	bge	zero,r16,11828 <__alt_data_end+0xfc011828>
   11af4:	07000404 	movi	fp,16
   11af8:	e400810e 	bge	fp,r16,11d00 <___vfprintf_internal_r+0x165c>
   11afc:	014000f4 	movhi	r5,3
   11b00:	29656e84 	addi	r5,r5,-27206
   11b04:	d9402c15 	stw	r5,176(sp)
   11b08:	01c001c4 	movi	r7,7
   11b0c:	dcc02d17 	ldw	r19,180(sp)
   11b10:	00000306 	br	11b20 <___vfprintf_internal_r+0x147c>
   11b14:	b5800204 	addi	r22,r22,8
   11b18:	843ffc04 	addi	r16,r16,-16
   11b1c:	e4007b0e 	bge	fp,r16,11d0c <___vfprintf_internal_r+0x1668>
   11b20:	18c00404 	addi	r3,r3,16
   11b24:	8c400044 	addi	r17,r17,1
   11b28:	b5000015 	stw	r20,0(r22)
   11b2c:	b7000115 	stw	fp,4(r22)
   11b30:	d8c02015 	stw	r3,128(sp)
   11b34:	dc401f15 	stw	r17,124(sp)
   11b38:	3c7ff60e 	bge	r7,r17,11b14 <__alt_data_end+0xfc011b14>
   11b3c:	d9801e04 	addi	r6,sp,120
   11b40:	b80b883a 	mov	r5,r23
   11b44:	9809883a 	mov	r4,r19
   11b48:	d9c03c15 	stw	r7,240(sp)
   11b4c:	00189b00 	call	189b0 <__sprint_r>
   11b50:	d9c03c17 	ldw	r7,240(sp)
   11b54:	103bd71e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11b58:	d8c02017 	ldw	r3,128(sp)
   11b5c:	dc401f17 	ldw	r17,124(sp)
   11b60:	dd800404 	addi	r22,sp,16
   11b64:	003fec06 	br	11b18 <__alt_data_end+0xfc011b18>
   11b68:	9080100c 	andi	r2,r18,64
   11b6c:	d8002785 	stb	zero,158(sp)
   11b70:	10010e26 	beq	r2,zero,11fac <___vfprintf_internal_r+0x1908>
   11b74:	d9402e17 	ldw	r5,184(sp)
   11b78:	d8c02a17 	ldw	r3,168(sp)
   11b7c:	002d883a 	mov	r22,zero
   11b80:	28800104 	addi	r2,r5,4
   11b84:	2cc0000b 	ldhu	r19,0(r5)
   11b88:	183fc90e 	bge	r3,zero,11ab0 <__alt_data_end+0xfc011ab0>
   11b8c:	d8802e15 	stw	r2,184(sp)
   11b90:	0039883a 	mov	fp,zero
   11b94:	9d84b03a 	or	r2,r19,r22
   11b98:	103c1e1e 	bne	r2,zero,10c14 <__alt_data_end+0xfc010c14>
   11b9c:	00800044 	movi	r2,1
   11ba0:	003e6c06 	br	11554 <__alt_data_end+0xfc011554>
   11ba4:	d9002d17 	ldw	r4,180(sp)
   11ba8:	d9801e04 	addi	r6,sp,120
   11bac:	b80b883a 	mov	r5,r23
   11bb0:	00189b00 	call	189b0 <__sprint_r>
   11bb4:	103bbf1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11bb8:	d8c02017 	ldw	r3,128(sp)
   11bbc:	da000404 	addi	r8,sp,16
   11bc0:	d9003217 	ldw	r4,200(sp)
   11bc4:	d8802617 	ldw	r2,152(sp)
   11bc8:	d9403317 	ldw	r5,204(sp)
   11bcc:	8123883a 	add	r17,r16,r4
   11bd0:	11400216 	blt	r2,r5,11bdc <___vfprintf_internal_r+0x1538>
   11bd4:	9100004c 	andi	r4,r18,1
   11bd8:	20000d26 	beq	r4,zero,11c10 <___vfprintf_internal_r+0x156c>
   11bdc:	d9003717 	ldw	r4,220(sp)
   11be0:	d9403417 	ldw	r5,208(sp)
   11be4:	1907883a 	add	r3,r3,r4
   11be8:	d9001f17 	ldw	r4,124(sp)
   11bec:	41400015 	stw	r5,0(r8)
   11bf0:	d9403717 	ldw	r5,220(sp)
   11bf4:	21000044 	addi	r4,r4,1
   11bf8:	d8c02015 	stw	r3,128(sp)
   11bfc:	41400115 	stw	r5,4(r8)
   11c00:	d9001f15 	stw	r4,124(sp)
   11c04:	014001c4 	movi	r5,7
   11c08:	2901e816 	blt	r5,r4,123ac <___vfprintf_internal_r+0x1d08>
   11c0c:	42000204 	addi	r8,r8,8
   11c10:	d9003317 	ldw	r4,204(sp)
   11c14:	8121883a 	add	r16,r16,r4
   11c18:	2085c83a 	sub	r2,r4,r2
   11c1c:	8461c83a 	sub	r16,r16,r17
   11c20:	1400010e 	bge	r2,r16,11c28 <___vfprintf_internal_r+0x1584>
   11c24:	1021883a 	mov	r16,r2
   11c28:	04000a0e 	bge	zero,r16,11c54 <___vfprintf_internal_r+0x15b0>
   11c2c:	d9001f17 	ldw	r4,124(sp)
   11c30:	1c07883a 	add	r3,r3,r16
   11c34:	44400015 	stw	r17,0(r8)
   11c38:	21000044 	addi	r4,r4,1
   11c3c:	44000115 	stw	r16,4(r8)
   11c40:	d8c02015 	stw	r3,128(sp)
   11c44:	d9001f15 	stw	r4,124(sp)
   11c48:	014001c4 	movi	r5,7
   11c4c:	2901fb16 	blt	r5,r4,1243c <___vfprintf_internal_r+0x1d98>
   11c50:	42000204 	addi	r8,r8,8
   11c54:	8001f716 	blt	r16,zero,12434 <___vfprintf_internal_r+0x1d90>
   11c58:	1421c83a 	sub	r16,r2,r16
   11c5c:	043d160e 	bge	zero,r16,110b8 <__alt_data_end+0xfc0110b8>
   11c60:	04400404 	movi	r17,16
   11c64:	d8801f17 	ldw	r2,124(sp)
   11c68:	8c3efb0e 	bge	r17,r16,11858 <__alt_data_end+0xfc011858>
   11c6c:	014000f4 	movhi	r5,3
   11c70:	29656e84 	addi	r5,r5,-27206
   11c74:	d9402c15 	stw	r5,176(sp)
   11c78:	058001c4 	movi	r22,7
   11c7c:	dcc02d17 	ldw	r19,180(sp)
   11c80:	00000306 	br	11c90 <___vfprintf_internal_r+0x15ec>
   11c84:	42000204 	addi	r8,r8,8
   11c88:	843ffc04 	addi	r16,r16,-16
   11c8c:	8c3ef50e 	bge	r17,r16,11864 <__alt_data_end+0xfc011864>
   11c90:	18c00404 	addi	r3,r3,16
   11c94:	10800044 	addi	r2,r2,1
   11c98:	45000015 	stw	r20,0(r8)
   11c9c:	44400115 	stw	r17,4(r8)
   11ca0:	d8c02015 	stw	r3,128(sp)
   11ca4:	d8801f15 	stw	r2,124(sp)
   11ca8:	b0bff60e 	bge	r22,r2,11c84 <__alt_data_end+0xfc011c84>
   11cac:	d9801e04 	addi	r6,sp,120
   11cb0:	b80b883a 	mov	r5,r23
   11cb4:	9809883a 	mov	r4,r19
   11cb8:	00189b00 	call	189b0 <__sprint_r>
   11cbc:	103b7d1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11cc0:	d8c02017 	ldw	r3,128(sp)
   11cc4:	d8801f17 	ldw	r2,124(sp)
   11cc8:	da000404 	addi	r8,sp,16
   11ccc:	003fee06 	br	11c88 <__alt_data_end+0xfc011c88>
   11cd0:	9088703a 	and	r4,r18,r2
   11cd4:	203eab1e 	bne	r4,zero,11784 <__alt_data_end+0xfc011784>
   11cd8:	dc401f17 	ldw	r17,124(sp)
   11cdc:	40800115 	stw	r2,4(r8)
   11ce0:	44000015 	stw	r16,0(r8)
   11ce4:	8c400044 	addi	r17,r17,1
   11ce8:	d8c02015 	stw	r3,128(sp)
   11cec:	dc401f15 	stw	r17,124(sp)
   11cf0:	008001c4 	movi	r2,7
   11cf4:	14400e16 	blt	r2,r17,11d30 <___vfprintf_internal_r+0x168c>
   11cf8:	45800204 	addi	r22,r8,8
   11cfc:	003eca06 	br	11828 <__alt_data_end+0xfc011828>
   11d00:	010000f4 	movhi	r4,3
   11d04:	21256e84 	addi	r4,r4,-27206
   11d08:	d9002c15 	stw	r4,176(sp)
   11d0c:	d8802c17 	ldw	r2,176(sp)
   11d10:	1c07883a 	add	r3,r3,r16
   11d14:	8c400044 	addi	r17,r17,1
   11d18:	b0800015 	stw	r2,0(r22)
   11d1c:	b4000115 	stw	r16,4(r22)
   11d20:	d8c02015 	stw	r3,128(sp)
   11d24:	dc401f15 	stw	r17,124(sp)
   11d28:	008001c4 	movi	r2,7
   11d2c:	147ebd0e 	bge	r2,r17,11824 <__alt_data_end+0xfc011824>
   11d30:	d9002d17 	ldw	r4,180(sp)
   11d34:	d9801e04 	addi	r6,sp,120
   11d38:	b80b883a 	mov	r5,r23
   11d3c:	00189b00 	call	189b0 <__sprint_r>
   11d40:	103b5c1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11d44:	d8c02017 	ldw	r3,128(sp)
   11d48:	dc401f17 	ldw	r17,124(sp)
   11d4c:	dd800404 	addi	r22,sp,16
   11d50:	003eb506 	br	11828 <__alt_data_end+0xfc011828>
   11d54:	d9002d17 	ldw	r4,180(sp)
   11d58:	d9801e04 	addi	r6,sp,120
   11d5c:	b80b883a 	mov	r5,r23
   11d60:	00189b00 	call	189b0 <__sprint_r>
   11d64:	103b531e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11d68:	d8c02017 	ldw	r3,128(sp)
   11d6c:	dc401f17 	ldw	r17,124(sp)
   11d70:	da000404 	addi	r8,sp,16
   11d74:	003e8d06 	br	117ac <__alt_data_end+0xfc0117ac>
   11d78:	d9002d17 	ldw	r4,180(sp)
   11d7c:	d9801e04 	addi	r6,sp,120
   11d80:	b80b883a 	mov	r5,r23
   11d84:	00189b00 	call	189b0 <__sprint_r>
   11d88:	103b4a1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11d8c:	d8c02017 	ldw	r3,128(sp)
   11d90:	dc401f17 	ldw	r17,124(sp)
   11d94:	dd800404 	addi	r22,sp,16
   11d98:	003e8f06 	br	117d8 <__alt_data_end+0xfc0117d8>
   11d9c:	0027883a 	mov	r19,zero
   11da0:	003f4a06 	br	11acc <__alt_data_end+0xfc011acc>
   11da4:	d9002d17 	ldw	r4,180(sp)
   11da8:	d9801e04 	addi	r6,sp,120
   11dac:	b80b883a 	mov	r5,r23
   11db0:	00189b00 	call	189b0 <__sprint_r>
   11db4:	103b3f1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   11db8:	d8c02017 	ldw	r3,128(sp)
   11dbc:	da000404 	addi	r8,sp,16
   11dc0:	003c7b06 	br	10fb0 <__alt_data_end+0xfc010fb0>
   11dc4:	d9402a17 	ldw	r5,168(sp)
   11dc8:	04e7c83a 	sub	r19,zero,r19
   11dcc:	07000b44 	movi	fp,45
   11dd0:	9804c03a 	cmpne	r2,r19,zero
   11dd4:	05adc83a 	sub	r22,zero,r22
   11dd8:	df002785 	stb	fp,158(sp)
   11ddc:	b0adc83a 	sub	r22,r22,r2
   11de0:	28017b16 	blt	r5,zero,123d0 <___vfprintf_internal_r+0x1d2c>
   11de4:	00bfdfc4 	movi	r2,-129
   11de8:	90a4703a 	and	r18,r18,r2
   11dec:	003b8906 	br	10c14 <__alt_data_end+0xfc010c14>
   11df0:	d9003617 	ldw	r4,216(sp)
   11df4:	d9403817 	ldw	r5,224(sp)
   11df8:	da003d15 	stw	r8,244(sp)
   11dfc:	00171940 	call	17194 <__fpclassifyd>
   11e00:	da003d17 	ldw	r8,244(sp)
   11e04:	1000f026 	beq	r2,zero,121c8 <___vfprintf_internal_r+0x1b24>
   11e08:	d9002a17 	ldw	r4,168(sp)
   11e0c:	05bff7c4 	movi	r22,-33
   11e10:	00bfffc4 	movi	r2,-1
   11e14:	8dac703a 	and	r22,r17,r22
   11e18:	20820026 	beq	r4,r2,1261c <___vfprintf_internal_r+0x1f78>
   11e1c:	008011c4 	movi	r2,71
   11e20:	b081f726 	beq	r22,r2,12600 <___vfprintf_internal_r+0x1f5c>
   11e24:	d9003817 	ldw	r4,224(sp)
   11e28:	90c04014 	ori	r3,r18,256
   11e2c:	d8c02c15 	stw	r3,176(sp)
   11e30:	20021516 	blt	r4,zero,12688 <___vfprintf_internal_r+0x1fe4>
   11e34:	dcc03817 	ldw	r19,224(sp)
   11e38:	d8002905 	stb	zero,164(sp)
   11e3c:	00801984 	movi	r2,102
   11e40:	8881f926 	beq	r17,r2,12628 <___vfprintf_internal_r+0x1f84>
   11e44:	00801184 	movi	r2,70
   11e48:	88821c26 	beq	r17,r2,126bc <___vfprintf_internal_r+0x2018>
   11e4c:	00801144 	movi	r2,69
   11e50:	b081ef26 	beq	r22,r2,12610 <___vfprintf_internal_r+0x1f6c>
   11e54:	d8c02a17 	ldw	r3,168(sp)
   11e58:	d8802104 	addi	r2,sp,132
   11e5c:	d8800315 	stw	r2,12(sp)
   11e60:	d9403617 	ldw	r5,216(sp)
   11e64:	d8802504 	addi	r2,sp,148
   11e68:	d9002d17 	ldw	r4,180(sp)
   11e6c:	d8800215 	stw	r2,8(sp)
   11e70:	d8802604 	addi	r2,sp,152
   11e74:	d8c00015 	stw	r3,0(sp)
   11e78:	d8800115 	stw	r2,4(sp)
   11e7c:	01c00084 	movi	r7,2
   11e80:	980d883a 	mov	r6,r19
   11e84:	d8c03c15 	stw	r3,240(sp)
   11e88:	da003d15 	stw	r8,244(sp)
   11e8c:	0012dd40 	call	12dd4 <_dtoa_r>
   11e90:	1021883a 	mov	r16,r2
   11e94:	008019c4 	movi	r2,103
   11e98:	d8c03c17 	ldw	r3,240(sp)
   11e9c:	da003d17 	ldw	r8,244(sp)
   11ea0:	88817126 	beq	r17,r2,12468 <___vfprintf_internal_r+0x1dc4>
   11ea4:	008011c4 	movi	r2,71
   11ea8:	88829126 	beq	r17,r2,128f0 <___vfprintf_internal_r+0x224c>
   11eac:	80f9883a 	add	fp,r16,r3
   11eb0:	d9003617 	ldw	r4,216(sp)
   11eb4:	000d883a 	mov	r6,zero
   11eb8:	000f883a 	mov	r7,zero
   11ebc:	980b883a 	mov	r5,r19
   11ec0:	da003d15 	stw	r8,244(sp)
   11ec4:	001c7340 	call	1c734 <__eqdf2>
   11ec8:	da003d17 	ldw	r8,244(sp)
   11ecc:	10018d26 	beq	r2,zero,12504 <___vfprintf_internal_r+0x1e60>
   11ed0:	d8802117 	ldw	r2,132(sp)
   11ed4:	1700062e 	bgeu	r2,fp,11ef0 <___vfprintf_internal_r+0x184c>
   11ed8:	01000c04 	movi	r4,48
   11edc:	10c00044 	addi	r3,r2,1
   11ee0:	d8c02115 	stw	r3,132(sp)
   11ee4:	11000005 	stb	r4,0(r2)
   11ee8:	d8802117 	ldw	r2,132(sp)
   11eec:	173ffb36 	bltu	r2,fp,11edc <__alt_data_end+0xfc011edc>
   11ef0:	1405c83a 	sub	r2,r2,r16
   11ef4:	d8803315 	stw	r2,204(sp)
   11ef8:	008011c4 	movi	r2,71
   11efc:	b0817626 	beq	r22,r2,124d8 <___vfprintf_internal_r+0x1e34>
   11f00:	00801944 	movi	r2,101
   11f04:	1442800e 	bge	r2,r17,12908 <___vfprintf_internal_r+0x2264>
   11f08:	d8c02617 	ldw	r3,152(sp)
   11f0c:	00801984 	movi	r2,102
   11f10:	d8c03215 	stw	r3,200(sp)
   11f14:	8881fe26 	beq	r17,r2,12710 <___vfprintf_internal_r+0x206c>
   11f18:	d8c03217 	ldw	r3,200(sp)
   11f1c:	d9003317 	ldw	r4,204(sp)
   11f20:	1901dd16 	blt	r3,r4,12698 <___vfprintf_internal_r+0x1ff4>
   11f24:	9480004c 	andi	r18,r18,1
   11f28:	90022b1e 	bne	r18,zero,127d8 <___vfprintf_internal_r+0x2134>
   11f2c:	1805883a 	mov	r2,r3
   11f30:	18028316 	blt	r3,zero,12940 <___vfprintf_internal_r+0x229c>
   11f34:	d8c03217 	ldw	r3,200(sp)
   11f38:	044019c4 	movi	r17,103
   11f3c:	d8c02b15 	stw	r3,172(sp)
   11f40:	df002907 	ldb	fp,164(sp)
   11f44:	e001531e 	bne	fp,zero,12494 <___vfprintf_internal_r+0x1df0>
   11f48:	df002783 	ldbu	fp,158(sp)
   11f4c:	d8802915 	stw	r2,164(sp)
   11f50:	dc802c17 	ldw	r18,176(sp)
   11f54:	d8002a15 	stw	zero,168(sp)
   11f58:	003baf06 	br	10e18 <__alt_data_end+0xfc010e18>
   11f5c:	d8c02e17 	ldw	r3,184(sp)
   11f60:	d9002e17 	ldw	r4,184(sp)
   11f64:	d9402e17 	ldw	r5,184(sp)
   11f68:	18c00017 	ldw	r3,0(r3)
   11f6c:	21000117 	ldw	r4,4(r4)
   11f70:	29400204 	addi	r5,r5,8
   11f74:	d8c03615 	stw	r3,216(sp)
   11f78:	d9003815 	stw	r4,224(sp)
   11f7c:	d9402e15 	stw	r5,184(sp)
   11f80:	003b5006 	br	10cc4 <__alt_data_end+0xfc010cc4>
   11f84:	ac400007 	ldb	r17,0(r21)
   11f88:	003a2806 	br	1082c <__alt_data_end+0xfc01082c>
   11f8c:	9080100c 	andi	r2,r18,64
   11f90:	1000a826 	beq	r2,zero,12234 <___vfprintf_internal_r+0x1b90>
   11f94:	d8c02e17 	ldw	r3,184(sp)
   11f98:	002d883a 	mov	r22,zero
   11f9c:	1cc0000b 	ldhu	r19,0(r3)
   11fa0:	18c00104 	addi	r3,r3,4
   11fa4:	d8c02e15 	stw	r3,184(sp)
   11fa8:	003caf06 	br	11268 <__alt_data_end+0xfc011268>
   11fac:	d9002e17 	ldw	r4,184(sp)
   11fb0:	d9402a17 	ldw	r5,168(sp)
   11fb4:	002d883a 	mov	r22,zero
   11fb8:	20800104 	addi	r2,r4,4
   11fbc:	24c00017 	ldw	r19,0(r4)
   11fc0:	283ebb0e 	bge	r5,zero,11ab0 <__alt_data_end+0xfc011ab0>
   11fc4:	003ef106 	br	11b8c <__alt_data_end+0xfc011b8c>
   11fc8:	9080040c 	andi	r2,r18,16
   11fcc:	1000921e 	bne	r2,zero,12218 <___vfprintf_internal_r+0x1b74>
   11fd0:	9480100c 	andi	r18,r18,64
   11fd4:	90013926 	beq	r18,zero,124bc <___vfprintf_internal_r+0x1e18>
   11fd8:	d9402e17 	ldw	r5,184(sp)
   11fdc:	d8c02f17 	ldw	r3,188(sp)
   11fe0:	28800017 	ldw	r2,0(r5)
   11fe4:	29400104 	addi	r5,r5,4
   11fe8:	d9402e15 	stw	r5,184(sp)
   11fec:	10c0000d 	sth	r3,0(r2)
   11ff0:	0039e406 	br	10784 <__alt_data_end+0xfc010784>
   11ff4:	9080100c 	andi	r2,r18,64
   11ff8:	10008026 	beq	r2,zero,121fc <___vfprintf_internal_r+0x1b58>
   11ffc:	d8802e17 	ldw	r2,184(sp)
   12000:	14c0000f 	ldh	r19,0(r2)
   12004:	10800104 	addi	r2,r2,4
   12008:	d8802e15 	stw	r2,184(sp)
   1200c:	982dd7fa 	srai	r22,r19,31
   12010:	b005883a 	mov	r2,r22
   12014:	003af706 	br	10bf4 <__alt_data_end+0xfc010bf4>
   12018:	9080100c 	andi	r2,r18,64
   1201c:	d8002785 	stb	zero,158(sp)
   12020:	10008a1e 	bne	r2,zero,1224c <___vfprintf_internal_r+0x1ba8>
   12024:	d9002e17 	ldw	r4,184(sp)
   12028:	d9402a17 	ldw	r5,168(sp)
   1202c:	002d883a 	mov	r22,zero
   12030:	20800104 	addi	r2,r4,4
   12034:	24c00017 	ldw	r19,0(r4)
   12038:	283e4b0e 	bge	r5,zero,11968 <__alt_data_end+0xfc011968>
   1203c:	9d86b03a 	or	r3,r19,r22
   12040:	d8802e15 	stw	r2,184(sp)
   12044:	183e4c1e 	bne	r3,zero,11978 <__alt_data_end+0xfc011978>
   12048:	0039883a 	mov	fp,zero
   1204c:	0005883a 	mov	r2,zero
   12050:	003d4006 	br	11554 <__alt_data_end+0xfc011554>
   12054:	014000f4 	movhi	r5,3
   12058:	29656e84 	addi	r5,r5,-27206
   1205c:	d9402c15 	stw	r5,176(sp)
   12060:	d9402c17 	ldw	r5,176(sp)
   12064:	1c47883a 	add	r3,r3,r17
   12068:	10800044 	addi	r2,r2,1
   1206c:	41400015 	stw	r5,0(r8)
   12070:	44400115 	stw	r17,4(r8)
   12074:	d8c02015 	stw	r3,128(sp)
   12078:	d8801f15 	stw	r2,124(sp)
   1207c:	010001c4 	movi	r4,7
   12080:	20bec816 	blt	r4,r2,11ba4 <__alt_data_end+0xfc011ba4>
   12084:	42000204 	addi	r8,r8,8
   12088:	003ecd06 	br	11bc0 <__alt_data_end+0xfc011bc0>
   1208c:	d9002a17 	ldw	r4,168(sp)
   12090:	d8002785 	stb	zero,158(sp)
   12094:	203d2d16 	blt	r4,zero,1154c <__alt_data_end+0xfc01154c>
   12098:	00bfdfc4 	movi	r2,-129
   1209c:	90a4703a 	and	r18,r18,r2
   120a0:	003a6106 	br	10a28 <__alt_data_end+0xfc010a28>
   120a4:	010000f4 	movhi	r4,3
   120a8:	21256e84 	addi	r4,r4,-27206
   120ac:	d9002c15 	stw	r4,176(sp)
   120b0:	003bea06 	br	1105c <__alt_data_end+0xfc01105c>
   120b4:	d9002d17 	ldw	r4,180(sp)
   120b8:	d9801e04 	addi	r6,sp,120
   120bc:	b80b883a 	mov	r5,r23
   120c0:	00189b00 	call	189b0 <__sprint_r>
   120c4:	103a7b1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   120c8:	d8c02017 	ldw	r3,128(sp)
   120cc:	da000404 	addi	r8,sp,16
   120d0:	003d4106 	br	115d8 <__alt_data_end+0xfc0115d8>
   120d4:	d8801f17 	ldw	r2,124(sp)
   120d8:	014000f4 	movhi	r5,3
   120dc:	01000044 	movi	r4,1
   120e0:	18c00044 	addi	r3,r3,1
   120e4:	10800044 	addi	r2,r2,1
   120e8:	29656604 	addi	r5,r5,-27240
   120ec:	41000115 	stw	r4,4(r8)
   120f0:	41400015 	stw	r5,0(r8)
   120f4:	d8c02015 	stw	r3,128(sp)
   120f8:	d8801f15 	stw	r2,124(sp)
   120fc:	010001c4 	movi	r4,7
   12100:	20805c16 	blt	r4,r2,12274 <___vfprintf_internal_r+0x1bd0>
   12104:	42000204 	addi	r8,r8,8
   12108:	8800041e 	bne	r17,zero,1211c <___vfprintf_internal_r+0x1a78>
   1210c:	d8803317 	ldw	r2,204(sp)
   12110:	1000021e 	bne	r2,zero,1211c <___vfprintf_internal_r+0x1a78>
   12114:	9080004c 	andi	r2,r18,1
   12118:	103be726 	beq	r2,zero,110b8 <__alt_data_end+0xfc0110b8>
   1211c:	d9003717 	ldw	r4,220(sp)
   12120:	d8801f17 	ldw	r2,124(sp)
   12124:	d9403417 	ldw	r5,208(sp)
   12128:	20c7883a 	add	r3,r4,r3
   1212c:	10800044 	addi	r2,r2,1
   12130:	41000115 	stw	r4,4(r8)
   12134:	41400015 	stw	r5,0(r8)
   12138:	d8c02015 	stw	r3,128(sp)
   1213c:	d8801f15 	stw	r2,124(sp)
   12140:	010001c4 	movi	r4,7
   12144:	20812116 	blt	r4,r2,125cc <___vfprintf_internal_r+0x1f28>
   12148:	42000204 	addi	r8,r8,8
   1214c:	0463c83a 	sub	r17,zero,r17
   12150:	0440730e 	bge	zero,r17,12320 <___vfprintf_internal_r+0x1c7c>
   12154:	05800404 	movi	r22,16
   12158:	b440860e 	bge	r22,r17,12374 <___vfprintf_internal_r+0x1cd0>
   1215c:	014000f4 	movhi	r5,3
   12160:	29656e84 	addi	r5,r5,-27206
   12164:	d9402c15 	stw	r5,176(sp)
   12168:	070001c4 	movi	fp,7
   1216c:	dcc02d17 	ldw	r19,180(sp)
   12170:	00000306 	br	12180 <___vfprintf_internal_r+0x1adc>
   12174:	42000204 	addi	r8,r8,8
   12178:	8c7ffc04 	addi	r17,r17,-16
   1217c:	b440800e 	bge	r22,r17,12380 <___vfprintf_internal_r+0x1cdc>
   12180:	18c00404 	addi	r3,r3,16
   12184:	10800044 	addi	r2,r2,1
   12188:	45000015 	stw	r20,0(r8)
   1218c:	45800115 	stw	r22,4(r8)
   12190:	d8c02015 	stw	r3,128(sp)
   12194:	d8801f15 	stw	r2,124(sp)
   12198:	e0bff60e 	bge	fp,r2,12174 <__alt_data_end+0xfc012174>
   1219c:	d9801e04 	addi	r6,sp,120
   121a0:	b80b883a 	mov	r5,r23
   121a4:	9809883a 	mov	r4,r19
   121a8:	00189b00 	call	189b0 <__sprint_r>
   121ac:	103a411e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   121b0:	d8c02017 	ldw	r3,128(sp)
   121b4:	d8801f17 	ldw	r2,124(sp)
   121b8:	da000404 	addi	r8,sp,16
   121bc:	003fee06 	br	12178 <__alt_data_end+0xfc012178>
   121c0:	00bfffc4 	movi	r2,-1
   121c4:	003a3f06 	br	10ac4 <__alt_data_end+0xfc010ac4>
   121c8:	008011c4 	movi	r2,71
   121cc:	1440b816 	blt	r2,r17,124b0 <___vfprintf_internal_r+0x1e0c>
   121d0:	040000f4 	movhi	r16,3
   121d4:	84255804 	addi	r16,r16,-27296
   121d8:	00c000c4 	movi	r3,3
   121dc:	00bfdfc4 	movi	r2,-129
   121e0:	d8c02915 	stw	r3,164(sp)
   121e4:	90a4703a 	and	r18,r18,r2
   121e8:	df002783 	ldbu	fp,158(sp)
   121ec:	d8c02b15 	stw	r3,172(sp)
   121f0:	d8002a15 	stw	zero,168(sp)
   121f4:	d8003215 	stw	zero,200(sp)
   121f8:	003b0706 	br	10e18 <__alt_data_end+0xfc010e18>
   121fc:	d8c02e17 	ldw	r3,184(sp)
   12200:	1cc00017 	ldw	r19,0(r3)
   12204:	18c00104 	addi	r3,r3,4
   12208:	d8c02e15 	stw	r3,184(sp)
   1220c:	982dd7fa 	srai	r22,r19,31
   12210:	b005883a 	mov	r2,r22
   12214:	003a7706 	br	10bf4 <__alt_data_end+0xfc010bf4>
   12218:	d8c02e17 	ldw	r3,184(sp)
   1221c:	d9002f17 	ldw	r4,188(sp)
   12220:	18800017 	ldw	r2,0(r3)
   12224:	18c00104 	addi	r3,r3,4
   12228:	d8c02e15 	stw	r3,184(sp)
   1222c:	11000015 	stw	r4,0(r2)
   12230:	00395406 	br	10784 <__alt_data_end+0xfc010784>
   12234:	d9002e17 	ldw	r4,184(sp)
   12238:	002d883a 	mov	r22,zero
   1223c:	24c00017 	ldw	r19,0(r4)
   12240:	21000104 	addi	r4,r4,4
   12244:	d9002e15 	stw	r4,184(sp)
   12248:	003c0706 	br	11268 <__alt_data_end+0xfc011268>
   1224c:	d9402e17 	ldw	r5,184(sp)
   12250:	d8c02a17 	ldw	r3,168(sp)
   12254:	002d883a 	mov	r22,zero
   12258:	28800104 	addi	r2,r5,4
   1225c:	2cc0000b 	ldhu	r19,0(r5)
   12260:	183dc10e 	bge	r3,zero,11968 <__alt_data_end+0xfc011968>
   12264:	003f7506 	br	1203c <__alt_data_end+0xfc01203c>
   12268:	040000f4 	movhi	r16,3
   1226c:	84255604 	addi	r16,r16,-27304
   12270:	003aa706 	br	10d10 <__alt_data_end+0xfc010d10>
   12274:	d9002d17 	ldw	r4,180(sp)
   12278:	d9801e04 	addi	r6,sp,120
   1227c:	b80b883a 	mov	r5,r23
   12280:	00189b00 	call	189b0 <__sprint_r>
   12284:	103a0b1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   12288:	dc402617 	ldw	r17,152(sp)
   1228c:	d8c02017 	ldw	r3,128(sp)
   12290:	da000404 	addi	r8,sp,16
   12294:	003f9c06 	br	12108 <__alt_data_end+0xfc012108>
   12298:	ac400043 	ldbu	r17,1(r21)
   1229c:	84000814 	ori	r16,r16,32
   122a0:	ad400044 	addi	r21,r21,1
   122a4:	8c403fcc 	andi	r17,r17,255
   122a8:	8c40201c 	xori	r17,r17,128
   122ac:	8c7fe004 	addi	r17,r17,-128
   122b0:	00395e06 	br	1082c <__alt_data_end+0xfc01082c>
   122b4:	d8c02e15 	stw	r3,184(sp)
   122b8:	0039883a 	mov	fp,zero
   122bc:	003e3506 	br	11b94 <__alt_data_end+0xfc011b94>
   122c0:	d9002d17 	ldw	r4,180(sp)
   122c4:	d9801e04 	addi	r6,sp,120
   122c8:	b80b883a 	mov	r5,r23
   122cc:	00189b00 	call	189b0 <__sprint_r>
   122d0:	1039f81e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   122d4:	d8c02017 	ldw	r3,128(sp)
   122d8:	da000404 	addi	r8,sp,16
   122dc:	003cd006 	br	11620 <__alt_data_end+0xfc011620>
   122e0:	8009883a 	mov	r4,r16
   122e4:	df003d15 	stw	fp,244(sp)
   122e8:	000e3480 	call	e348 <strlen>
   122ec:	d8802b15 	stw	r2,172(sp)
   122f0:	da003d17 	ldw	r8,244(sp)
   122f4:	103c200e 	bge	r2,zero,11378 <__alt_data_end+0xfc011378>
   122f8:	0005883a 	mov	r2,zero
   122fc:	003c1e06 	br	11378 <__alt_data_end+0xfc011378>
   12300:	d9002d17 	ldw	r4,180(sp)
   12304:	d9801e04 	addi	r6,sp,120
   12308:	b80b883a 	mov	r5,r23
   1230c:	00189b00 	call	189b0 <__sprint_r>
   12310:	1039e81e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   12314:	d8c02017 	ldw	r3,128(sp)
   12318:	d8801f17 	ldw	r2,124(sp)
   1231c:	da000404 	addi	r8,sp,16
   12320:	d9403317 	ldw	r5,204(sp)
   12324:	10800044 	addi	r2,r2,1
   12328:	44000015 	stw	r16,0(r8)
   1232c:	28c7883a 	add	r3,r5,r3
   12330:	003b5b06 	br	110a0 <__alt_data_end+0xfc0110a0>
   12334:	010000f4 	movhi	r4,3
   12338:	21257284 	addi	r4,r4,-27190
   1233c:	d9003515 	stw	r4,212(sp)
   12340:	003af206 	br	10f0c <__alt_data_end+0xfc010f0c>
   12344:	013fffc4 	movi	r4,-1
   12348:	003a0806 	br	10b6c <__alt_data_end+0xfc010b6c>
   1234c:	0023883a 	mov	r17,zero
   12350:	003d9d06 	br	119c8 <__alt_data_end+0xfc0119c8>
   12354:	d9002d17 	ldw	r4,180(sp)
   12358:	d9801e04 	addi	r6,sp,120
   1235c:	b80b883a 	mov	r5,r23
   12360:	00189b00 	call	189b0 <__sprint_r>
   12364:	1039d31e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   12368:	d8c02017 	ldw	r3,128(sp)
   1236c:	da000404 	addi	r8,sp,16
   12370:	003d9406 	br	119c4 <__alt_data_end+0xfc0119c4>
   12374:	010000f4 	movhi	r4,3
   12378:	21256e84 	addi	r4,r4,-27206
   1237c:	d9002c15 	stw	r4,176(sp)
   12380:	d9002c17 	ldw	r4,176(sp)
   12384:	1c47883a 	add	r3,r3,r17
   12388:	10800044 	addi	r2,r2,1
   1238c:	41000015 	stw	r4,0(r8)
   12390:	44400115 	stw	r17,4(r8)
   12394:	d8c02015 	stw	r3,128(sp)
   12398:	d8801f15 	stw	r2,124(sp)
   1239c:	010001c4 	movi	r4,7
   123a0:	20bfd716 	blt	r4,r2,12300 <__alt_data_end+0xfc012300>
   123a4:	42000204 	addi	r8,r8,8
   123a8:	003fdd06 	br	12320 <__alt_data_end+0xfc012320>
   123ac:	d9002d17 	ldw	r4,180(sp)
   123b0:	d9801e04 	addi	r6,sp,120
   123b4:	b80b883a 	mov	r5,r23
   123b8:	00189b00 	call	189b0 <__sprint_r>
   123bc:	1039bd1e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   123c0:	d8802617 	ldw	r2,152(sp)
   123c4:	d8c02017 	ldw	r3,128(sp)
   123c8:	da000404 	addi	r8,sp,16
   123cc:	003e1006 	br	11c10 <__alt_data_end+0xfc011c10>
   123d0:	00800044 	movi	r2,1
   123d4:	10803fcc 	andi	r2,r2,255
   123d8:	00c00044 	movi	r3,1
   123dc:	10fa0d26 	beq	r2,r3,10c14 <__alt_data_end+0xfc010c14>
   123e0:	00c00084 	movi	r3,2
   123e4:	10fbaf26 	beq	r2,r3,112a4 <__alt_data_end+0xfc0112a4>
   123e8:	003a6d06 	br	10da0 <__alt_data_end+0xfc010da0>
   123ec:	010000f4 	movhi	r4,3
   123f0:	21257284 	addi	r4,r4,-27190
   123f4:	d9003515 	stw	r4,212(sp)
   123f8:	003b5406 	br	1114c <__alt_data_end+0xfc01114c>
   123fc:	d8802a17 	ldw	r2,168(sp)
   12400:	00c00184 	movi	r3,6
   12404:	1880012e 	bgeu	r3,r2,1240c <___vfprintf_internal_r+0x1d68>
   12408:	1805883a 	mov	r2,r3
   1240c:	d8802b15 	stw	r2,172(sp)
   12410:	1000ef16 	blt	r2,zero,127d0 <___vfprintf_internal_r+0x212c>
   12414:	040000f4 	movhi	r16,3
   12418:	d8802915 	stw	r2,164(sp)
   1241c:	dcc02e15 	stw	r19,184(sp)
   12420:	d8002a15 	stw	zero,168(sp)
   12424:	d8003215 	stw	zero,200(sp)
   12428:	84256404 	addi	r16,r16,-27248
   1242c:	0039883a 	mov	fp,zero
   12430:	003a8006 	br	10e34 <__alt_data_end+0xfc010e34>
   12434:	0021883a 	mov	r16,zero
   12438:	003e0706 	br	11c58 <__alt_data_end+0xfc011c58>
   1243c:	d9002d17 	ldw	r4,180(sp)
   12440:	d9801e04 	addi	r6,sp,120
   12444:	b80b883a 	mov	r5,r23
   12448:	00189b00 	call	189b0 <__sprint_r>
   1244c:	1039991e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   12450:	d8802617 	ldw	r2,152(sp)
   12454:	d9403317 	ldw	r5,204(sp)
   12458:	d8c02017 	ldw	r3,128(sp)
   1245c:	da000404 	addi	r8,sp,16
   12460:	2885c83a 	sub	r2,r5,r2
   12464:	003dfb06 	br	11c54 <__alt_data_end+0xfc011c54>
   12468:	9080004c 	andi	r2,r18,1
   1246c:	103e8f1e 	bne	r2,zero,11eac <__alt_data_end+0xfc011eac>
   12470:	d8802117 	ldw	r2,132(sp)
   12474:	003e9e06 	br	11ef0 <__alt_data_end+0xfc011ef0>
   12478:	1025883a 	mov	r18,r2
   1247c:	0039883a 	mov	fp,zero
   12480:	00800084 	movi	r2,2
   12484:	003fd306 	br	123d4 <__alt_data_end+0xfc0123d4>
   12488:	07000b44 	movi	fp,45
   1248c:	df002785 	stb	fp,158(sp)
   12490:	003a1b06 	br	10d00 <__alt_data_end+0xfc010d00>
   12494:	00c00b44 	movi	r3,45
   12498:	d8c02785 	stb	r3,158(sp)
   1249c:	d8802915 	stw	r2,164(sp)
   124a0:	dc802c17 	ldw	r18,176(sp)
   124a4:	d8002a15 	stw	zero,168(sp)
   124a8:	07000b44 	movi	fp,45
   124ac:	003a5e06 	br	10e28 <__alt_data_end+0xfc010e28>
   124b0:	040000f4 	movhi	r16,3
   124b4:	84255904 	addi	r16,r16,-27292
   124b8:	003f4706 	br	121d8 <__alt_data_end+0xfc0121d8>
   124bc:	d9002e17 	ldw	r4,184(sp)
   124c0:	d9402f17 	ldw	r5,188(sp)
   124c4:	20800017 	ldw	r2,0(r4)
   124c8:	21000104 	addi	r4,r4,4
   124cc:	d9002e15 	stw	r4,184(sp)
   124d0:	11400015 	stw	r5,0(r2)
   124d4:	0038ab06 	br	10784 <__alt_data_end+0xfc010784>
   124d8:	dd802617 	ldw	r22,152(sp)
   124dc:	00bfff44 	movi	r2,-3
   124e0:	b0801c16 	blt	r22,r2,12554 <___vfprintf_internal_r+0x1eb0>
   124e4:	d9402a17 	ldw	r5,168(sp)
   124e8:	2d801a16 	blt	r5,r22,12554 <___vfprintf_internal_r+0x1eb0>
   124ec:	dd803215 	stw	r22,200(sp)
   124f0:	003e8906 	br	11f18 <__alt_data_end+0xfc011f18>
   124f4:	010000f4 	movhi	r4,3
   124f8:	21256e84 	addi	r4,r4,-27206
   124fc:	d9002c15 	stw	r4,176(sp)
   12500:	003c9106 	br	11748 <__alt_data_end+0xfc011748>
   12504:	e005883a 	mov	r2,fp
   12508:	003e7906 	br	11ef0 <__alt_data_end+0xfc011ef0>
   1250c:	d9002a17 	ldw	r4,168(sp)
   12510:	df002783 	ldbu	fp,158(sp)
   12514:	dcc02e15 	stw	r19,184(sp)
   12518:	d9002915 	stw	r4,164(sp)
   1251c:	d9002b15 	stw	r4,172(sp)
   12520:	d8002a15 	stw	zero,168(sp)
   12524:	d8003215 	stw	zero,200(sp)
   12528:	003a3b06 	br	10e18 <__alt_data_end+0xfc010e18>
   1252c:	9080004c 	andi	r2,r18,1
   12530:	0039883a 	mov	fp,zero
   12534:	10000426 	beq	r2,zero,12548 <___vfprintf_internal_r+0x1ea4>
   12538:	00800c04 	movi	r2,48
   1253c:	dc001dc4 	addi	r16,sp,119
   12540:	d8801dc5 	stb	r2,119(sp)
   12544:	003b6406 	br	112d8 <__alt_data_end+0xfc0112d8>
   12548:	d8002b15 	stw	zero,172(sp)
   1254c:	dc001e04 	addi	r16,sp,120
   12550:	003a2b06 	br	10e00 <__alt_data_end+0xfc010e00>
   12554:	8c7fff84 	addi	r17,r17,-2
   12558:	b5bfffc4 	addi	r22,r22,-1
   1255c:	dd802615 	stw	r22,152(sp)
   12560:	dc4022c5 	stb	r17,139(sp)
   12564:	b000bf16 	blt	r22,zero,12864 <___vfprintf_internal_r+0x21c0>
   12568:	00800ac4 	movi	r2,43
   1256c:	d8802305 	stb	r2,140(sp)
   12570:	00800244 	movi	r2,9
   12574:	15807016 	blt	r2,r22,12738 <___vfprintf_internal_r+0x2094>
   12578:	00800c04 	movi	r2,48
   1257c:	b5800c04 	addi	r22,r22,48
   12580:	d8802345 	stb	r2,141(sp)
   12584:	dd802385 	stb	r22,142(sp)
   12588:	d88023c4 	addi	r2,sp,143
   1258c:	df0022c4 	addi	fp,sp,139
   12590:	d8c03317 	ldw	r3,204(sp)
   12594:	1739c83a 	sub	fp,r2,fp
   12598:	d9003317 	ldw	r4,204(sp)
   1259c:	e0c7883a 	add	r3,fp,r3
   125a0:	df003a15 	stw	fp,232(sp)
   125a4:	d8c02b15 	stw	r3,172(sp)
   125a8:	00800044 	movi	r2,1
   125ac:	1100b30e 	bge	r2,r4,1287c <___vfprintf_internal_r+0x21d8>
   125b0:	d8c02b17 	ldw	r3,172(sp)
   125b4:	18c00044 	addi	r3,r3,1
   125b8:	d8c02b15 	stw	r3,172(sp)
   125bc:	1805883a 	mov	r2,r3
   125c0:	1800ac16 	blt	r3,zero,12874 <___vfprintf_internal_r+0x21d0>
   125c4:	d8003215 	stw	zero,200(sp)
   125c8:	003e5d06 	br	11f40 <__alt_data_end+0xfc011f40>
   125cc:	d9002d17 	ldw	r4,180(sp)
   125d0:	d9801e04 	addi	r6,sp,120
   125d4:	b80b883a 	mov	r5,r23
   125d8:	00189b00 	call	189b0 <__sprint_r>
   125dc:	1039351e 	bne	r2,zero,10ab4 <__alt_data_end+0xfc010ab4>
   125e0:	dc402617 	ldw	r17,152(sp)
   125e4:	d8c02017 	ldw	r3,128(sp)
   125e8:	d8801f17 	ldw	r2,124(sp)
   125ec:	da000404 	addi	r8,sp,16
   125f0:	003ed606 	br	1214c <__alt_data_end+0xfc01214c>
   125f4:	182b883a 	mov	r21,r3
   125f8:	d8002a15 	stw	zero,168(sp)
   125fc:	00388c06 	br	10830 <__alt_data_end+0xfc010830>
   12600:	d8802a17 	ldw	r2,168(sp)
   12604:	103e071e 	bne	r2,zero,11e24 <__alt_data_end+0xfc011e24>
   12608:	dc002a15 	stw	r16,168(sp)
   1260c:	003e0506 	br	11e24 <__alt_data_end+0xfc011e24>
   12610:	d9002a17 	ldw	r4,168(sp)
   12614:	20c00044 	addi	r3,r4,1
   12618:	003e0f06 	br	11e58 <__alt_data_end+0xfc011e58>
   1261c:	01400184 	movi	r5,6
   12620:	d9402a15 	stw	r5,168(sp)
   12624:	003dff06 	br	11e24 <__alt_data_end+0xfc011e24>
   12628:	d8802104 	addi	r2,sp,132
   1262c:	d8800315 	stw	r2,12(sp)
   12630:	d8802504 	addi	r2,sp,148
   12634:	d8800215 	stw	r2,8(sp)
   12638:	d8802604 	addi	r2,sp,152
   1263c:	d8800115 	stw	r2,4(sp)
   12640:	d8802a17 	ldw	r2,168(sp)
   12644:	d9403617 	ldw	r5,216(sp)
   12648:	d9002d17 	ldw	r4,180(sp)
   1264c:	d8800015 	stw	r2,0(sp)
   12650:	01c000c4 	movi	r7,3
   12654:	980d883a 	mov	r6,r19
   12658:	da003d15 	stw	r8,244(sp)
   1265c:	0012dd40 	call	12dd4 <_dtoa_r>
   12660:	d8c02a17 	ldw	r3,168(sp)
   12664:	da003d17 	ldw	r8,244(sp)
   12668:	1021883a 	mov	r16,r2
   1266c:	10f9883a 	add	fp,r2,r3
   12670:	81000007 	ldb	r4,0(r16)
   12674:	00800c04 	movi	r2,48
   12678:	20805e26 	beq	r4,r2,127f4 <___vfprintf_internal_r+0x2150>
   1267c:	d8c02617 	ldw	r3,152(sp)
   12680:	e0f9883a 	add	fp,fp,r3
   12684:	003e0a06 	br	11eb0 <__alt_data_end+0xfc011eb0>
   12688:	00c00b44 	movi	r3,45
   1268c:	24e0003c 	xorhi	r19,r4,32768
   12690:	d8c02905 	stb	r3,164(sp)
   12694:	003de906 	br	11e3c <__alt_data_end+0xfc011e3c>
   12698:	d8c03217 	ldw	r3,200(sp)
   1269c:	00c07a0e 	bge	zero,r3,12888 <___vfprintf_internal_r+0x21e4>
   126a0:	00800044 	movi	r2,1
   126a4:	d9003317 	ldw	r4,204(sp)
   126a8:	1105883a 	add	r2,r2,r4
   126ac:	d8802b15 	stw	r2,172(sp)
   126b0:	10004e16 	blt	r2,zero,127ec <___vfprintf_internal_r+0x2148>
   126b4:	044019c4 	movi	r17,103
   126b8:	003e2106 	br	11f40 <__alt_data_end+0xfc011f40>
   126bc:	d9002a17 	ldw	r4,168(sp)
   126c0:	d8802104 	addi	r2,sp,132
   126c4:	d8800315 	stw	r2,12(sp)
   126c8:	d9000015 	stw	r4,0(sp)
   126cc:	d8802504 	addi	r2,sp,148
   126d0:	d9403617 	ldw	r5,216(sp)
   126d4:	d9002d17 	ldw	r4,180(sp)
   126d8:	d8800215 	stw	r2,8(sp)
   126dc:	d8802604 	addi	r2,sp,152
   126e0:	d8800115 	stw	r2,4(sp)
   126e4:	01c000c4 	movi	r7,3
   126e8:	980d883a 	mov	r6,r19
   126ec:	da003d15 	stw	r8,244(sp)
   126f0:	0012dd40 	call	12dd4 <_dtoa_r>
   126f4:	d8c02a17 	ldw	r3,168(sp)
   126f8:	da003d17 	ldw	r8,244(sp)
   126fc:	1021883a 	mov	r16,r2
   12700:	00801184 	movi	r2,70
   12704:	80f9883a 	add	fp,r16,r3
   12708:	88bfd926 	beq	r17,r2,12670 <__alt_data_end+0xfc012670>
   1270c:	003de806 	br	11eb0 <__alt_data_end+0xfc011eb0>
   12710:	d9002a17 	ldw	r4,168(sp)
   12714:	00c04d0e 	bge	zero,r3,1284c <___vfprintf_internal_r+0x21a8>
   12718:	2000441e 	bne	r4,zero,1282c <___vfprintf_internal_r+0x2188>
   1271c:	9480004c 	andi	r18,r18,1
   12720:	9000421e 	bne	r18,zero,1282c <___vfprintf_internal_r+0x2188>
   12724:	1805883a 	mov	r2,r3
   12728:	18006f16 	blt	r3,zero,128e8 <___vfprintf_internal_r+0x2244>
   1272c:	d8c03217 	ldw	r3,200(sp)
   12730:	d8c02b15 	stw	r3,172(sp)
   12734:	003e0206 	br	11f40 <__alt_data_end+0xfc011f40>
   12738:	df0022c4 	addi	fp,sp,139
   1273c:	dc002a15 	stw	r16,168(sp)
   12740:	4027883a 	mov	r19,r8
   12744:	e021883a 	mov	r16,fp
   12748:	b009883a 	mov	r4,r22
   1274c:	01400284 	movi	r5,10
   12750:	000cb700 	call	cb70 <__modsi3>
   12754:	10800c04 	addi	r2,r2,48
   12758:	843fffc4 	addi	r16,r16,-1
   1275c:	b009883a 	mov	r4,r22
   12760:	01400284 	movi	r5,10
   12764:	80800005 	stb	r2,0(r16)
   12768:	000caec0 	call	caec <__divsi3>
   1276c:	102d883a 	mov	r22,r2
   12770:	00800244 	movi	r2,9
   12774:	15bff416 	blt	r2,r22,12748 <__alt_data_end+0xfc012748>
   12778:	9811883a 	mov	r8,r19
   1277c:	b0800c04 	addi	r2,r22,48
   12780:	8027883a 	mov	r19,r16
   12784:	997fffc4 	addi	r5,r19,-1
   12788:	98bfffc5 	stb	r2,-1(r19)
   1278c:	dc002a17 	ldw	r16,168(sp)
   12790:	2f006d2e 	bgeu	r5,fp,12948 <___vfprintf_internal_r+0x22a4>
   12794:	d9c02384 	addi	r7,sp,142
   12798:	3ccfc83a 	sub	r7,r7,r19
   1279c:	d9002344 	addi	r4,sp,141
   127a0:	e1cf883a 	add	r7,fp,r7
   127a4:	00000106 	br	127ac <___vfprintf_internal_r+0x2108>
   127a8:	28800003 	ldbu	r2,0(r5)
   127ac:	20800005 	stb	r2,0(r4)
   127b0:	21000044 	addi	r4,r4,1
   127b4:	29400044 	addi	r5,r5,1
   127b8:	393ffb1e 	bne	r7,r4,127a8 <__alt_data_end+0xfc0127a8>
   127bc:	d8802304 	addi	r2,sp,140
   127c0:	14c5c83a 	sub	r2,r2,r19
   127c4:	d8c02344 	addi	r3,sp,141
   127c8:	1885883a 	add	r2,r3,r2
   127cc:	003f7006 	br	12590 <__alt_data_end+0xfc012590>
   127d0:	0005883a 	mov	r2,zero
   127d4:	003f0f06 	br	12414 <__alt_data_end+0xfc012414>
   127d8:	d8c03217 	ldw	r3,200(sp)
   127dc:	18c00044 	addi	r3,r3,1
   127e0:	d8c02b15 	stw	r3,172(sp)
   127e4:	1805883a 	mov	r2,r3
   127e8:	183fb20e 	bge	r3,zero,126b4 <__alt_data_end+0xfc0126b4>
   127ec:	0005883a 	mov	r2,zero
   127f0:	003fb006 	br	126b4 <__alt_data_end+0xfc0126b4>
   127f4:	d9003617 	ldw	r4,216(sp)
   127f8:	000d883a 	mov	r6,zero
   127fc:	000f883a 	mov	r7,zero
   12800:	980b883a 	mov	r5,r19
   12804:	d8c03c15 	stw	r3,240(sp)
   12808:	da003d15 	stw	r8,244(sp)
   1280c:	001c7340 	call	1c734 <__eqdf2>
   12810:	d8c03c17 	ldw	r3,240(sp)
   12814:	da003d17 	ldw	r8,244(sp)
   12818:	103f9826 	beq	r2,zero,1267c <__alt_data_end+0xfc01267c>
   1281c:	00800044 	movi	r2,1
   12820:	10c7c83a 	sub	r3,r2,r3
   12824:	d8c02615 	stw	r3,152(sp)
   12828:	003f9506 	br	12680 <__alt_data_end+0xfc012680>
   1282c:	d9002a17 	ldw	r4,168(sp)
   12830:	d8c03217 	ldw	r3,200(sp)
   12834:	20800044 	addi	r2,r4,1
   12838:	1885883a 	add	r2,r3,r2
   1283c:	d8802b15 	stw	r2,172(sp)
   12840:	103dbf0e 	bge	r2,zero,11f40 <__alt_data_end+0xfc011f40>
   12844:	0005883a 	mov	r2,zero
   12848:	003dbd06 	br	11f40 <__alt_data_end+0xfc011f40>
   1284c:	2000201e 	bne	r4,zero,128d0 <___vfprintf_internal_r+0x222c>
   12850:	9480004c 	andi	r18,r18,1
   12854:	90001e1e 	bne	r18,zero,128d0 <___vfprintf_internal_r+0x222c>
   12858:	00800044 	movi	r2,1
   1285c:	d8802b15 	stw	r2,172(sp)
   12860:	003db706 	br	11f40 <__alt_data_end+0xfc011f40>
   12864:	00800b44 	movi	r2,45
   12868:	05adc83a 	sub	r22,zero,r22
   1286c:	d8802305 	stb	r2,140(sp)
   12870:	003f3f06 	br	12570 <__alt_data_end+0xfc012570>
   12874:	0005883a 	mov	r2,zero
   12878:	003f5206 	br	125c4 <__alt_data_end+0xfc0125c4>
   1287c:	90a4703a 	and	r18,r18,r2
   12880:	903f4e26 	beq	r18,zero,125bc <__alt_data_end+0xfc0125bc>
   12884:	003f4a06 	br	125b0 <__alt_data_end+0xfc0125b0>
   12888:	00800084 	movi	r2,2
   1288c:	10c5c83a 	sub	r2,r2,r3
   12890:	003f8406 	br	126a4 <__alt_data_end+0xfc0126a4>
   12894:	d9402e17 	ldw	r5,184(sp)
   12898:	d9002e17 	ldw	r4,184(sp)
   1289c:	ac400043 	ldbu	r17,1(r21)
   128a0:	29400017 	ldw	r5,0(r5)
   128a4:	20800104 	addi	r2,r4,4
   128a8:	d8802e15 	stw	r2,184(sp)
   128ac:	d9402a15 	stw	r5,168(sp)
   128b0:	182b883a 	mov	r21,r3
   128b4:	283e7b0e 	bge	r5,zero,122a4 <__alt_data_end+0xfc0122a4>
   128b8:	8c403fcc 	andi	r17,r17,255
   128bc:	017fffc4 	movi	r5,-1
   128c0:	8c40201c 	xori	r17,r17,128
   128c4:	d9402a15 	stw	r5,168(sp)
   128c8:	8c7fe004 	addi	r17,r17,-128
   128cc:	0037d706 	br	1082c <__alt_data_end+0xfc01082c>
   128d0:	d8c02a17 	ldw	r3,168(sp)
   128d4:	18c00084 	addi	r3,r3,2
   128d8:	d8c02b15 	stw	r3,172(sp)
   128dc:	1805883a 	mov	r2,r3
   128e0:	183d970e 	bge	r3,zero,11f40 <__alt_data_end+0xfc011f40>
   128e4:	003fd706 	br	12844 <__alt_data_end+0xfc012844>
   128e8:	0005883a 	mov	r2,zero
   128ec:	003f8f06 	br	1272c <__alt_data_end+0xfc01272c>
   128f0:	9080004c 	andi	r2,r18,1
   128f4:	103f821e 	bne	r2,zero,12700 <__alt_data_end+0xfc012700>
   128f8:	d8802117 	ldw	r2,132(sp)
   128fc:	1405c83a 	sub	r2,r2,r16
   12900:	d8803315 	stw	r2,204(sp)
   12904:	b47ef426 	beq	r22,r17,124d8 <__alt_data_end+0xfc0124d8>
   12908:	dd802617 	ldw	r22,152(sp)
   1290c:	003f1206 	br	12558 <__alt_data_end+0xfc012558>
   12910:	d8c02b03 	ldbu	r3,172(sp)
   12914:	d8c02785 	stb	r3,158(sp)
   12918:	0038df06 	br	10c98 <__alt_data_end+0xfc010c98>
   1291c:	d8c02b03 	ldbu	r3,172(sp)
   12920:	d8c02785 	stb	r3,158(sp)
   12924:	0038aa06 	br	10bd0 <__alt_data_end+0xfc010bd0>
   12928:	d8c02b03 	ldbu	r3,172(sp)
   1292c:	d8c02785 	stb	r3,158(sp)
   12930:	003a4306 	br	11240 <__alt_data_end+0xfc011240>
   12934:	d8c02b03 	ldbu	r3,172(sp)
   12938:	d8c02785 	stb	r3,158(sp)
   1293c:	003af506 	br	11514 <__alt_data_end+0xfc011514>
   12940:	0005883a 	mov	r2,zero
   12944:	003d7b06 	br	11f34 <__alt_data_end+0xfc011f34>
   12948:	d8802344 	addi	r2,sp,141
   1294c:	003f1006 	br	12590 <__alt_data_end+0xfc012590>
   12950:	d8c02b03 	ldbu	r3,172(sp)
   12954:	d8c02785 	stb	r3,158(sp)
   12958:	0038fd06 	br	10d50 <__alt_data_end+0xfc010d50>
   1295c:	d8c02b03 	ldbu	r3,172(sp)
   12960:	d8c02785 	stb	r3,158(sp)
   12964:	003a9706 	br	113c4 <__alt_data_end+0xfc0113c4>
   12968:	d8c02b03 	ldbu	r3,172(sp)
   1296c:	d8c02785 	stb	r3,158(sp)
   12970:	003a1806 	br	111d4 <__alt_data_end+0xfc0111d4>
   12974:	d8c02b03 	ldbu	r3,172(sp)
   12978:	d8c02785 	stb	r3,158(sp)
   1297c:	003abe06 	br	11478 <__alt_data_end+0xfc011478>

00012980 <__vfprintf_internal>:
   12980:	008000f4 	movhi	r2,3
   12984:	10b29504 	addi	r2,r2,-13740
   12988:	300f883a 	mov	r7,r6
   1298c:	280d883a 	mov	r6,r5
   12990:	200b883a 	mov	r5,r4
   12994:	11000017 	ldw	r4,0(r2)
   12998:	00106a41 	jmpi	106a4 <___vfprintf_internal_r>

0001299c <__sbprintf>:
   1299c:	2880030b 	ldhu	r2,12(r5)
   129a0:	2ac01917 	ldw	r11,100(r5)
   129a4:	2a80038b 	ldhu	r10,14(r5)
   129a8:	2a400717 	ldw	r9,28(r5)
   129ac:	2a000917 	ldw	r8,36(r5)
   129b0:	defee204 	addi	sp,sp,-1144
   129b4:	00c10004 	movi	r3,1024
   129b8:	dc011a15 	stw	r16,1128(sp)
   129bc:	10bfff4c 	andi	r2,r2,65533
   129c0:	2821883a 	mov	r16,r5
   129c4:	d8cb883a 	add	r5,sp,r3
   129c8:	dc811c15 	stw	r18,1136(sp)
   129cc:	dc411b15 	stw	r17,1132(sp)
   129d0:	dfc11d15 	stw	ra,1140(sp)
   129d4:	2025883a 	mov	r18,r4
   129d8:	d881030d 	sth	r2,1036(sp)
   129dc:	dac11915 	stw	r11,1124(sp)
   129e0:	da81038d 	sth	r10,1038(sp)
   129e4:	da410715 	stw	r9,1052(sp)
   129e8:	da010915 	stw	r8,1060(sp)
   129ec:	dec10015 	stw	sp,1024(sp)
   129f0:	dec10415 	stw	sp,1040(sp)
   129f4:	d8c10215 	stw	r3,1032(sp)
   129f8:	d8c10515 	stw	r3,1044(sp)
   129fc:	d8010615 	stw	zero,1048(sp)
   12a00:	00106a40 	call	106a4 <___vfprintf_internal_r>
   12a04:	1023883a 	mov	r17,r2
   12a08:	10000416 	blt	r2,zero,12a1c <__sbprintf+0x80>
   12a0c:	d9410004 	addi	r5,sp,1024
   12a10:	9009883a 	mov	r4,r18
   12a14:	00146780 	call	14678 <_fflush_r>
   12a18:	10000d1e 	bne	r2,zero,12a50 <__sbprintf+0xb4>
   12a1c:	d881030b 	ldhu	r2,1036(sp)
   12a20:	1080100c 	andi	r2,r2,64
   12a24:	10000326 	beq	r2,zero,12a34 <__sbprintf+0x98>
   12a28:	8080030b 	ldhu	r2,12(r16)
   12a2c:	10801014 	ori	r2,r2,64
   12a30:	8080030d 	sth	r2,12(r16)
   12a34:	8805883a 	mov	r2,r17
   12a38:	dfc11d17 	ldw	ra,1140(sp)
   12a3c:	dc811c17 	ldw	r18,1136(sp)
   12a40:	dc411b17 	ldw	r17,1132(sp)
   12a44:	dc011a17 	ldw	r16,1128(sp)
   12a48:	dec11e04 	addi	sp,sp,1144
   12a4c:	f800283a 	ret
   12a50:	047fffc4 	movi	r17,-1
   12a54:	003ff106 	br	12a1c <__alt_data_end+0xfc012a1c>

00012a58 <__swsetup_r>:
   12a58:	008000f4 	movhi	r2,3
   12a5c:	defffd04 	addi	sp,sp,-12
   12a60:	10b29504 	addi	r2,r2,-13740
   12a64:	dc400115 	stw	r17,4(sp)
   12a68:	2023883a 	mov	r17,r4
   12a6c:	11000017 	ldw	r4,0(r2)
   12a70:	dc000015 	stw	r16,0(sp)
   12a74:	dfc00215 	stw	ra,8(sp)
   12a78:	2821883a 	mov	r16,r5
   12a7c:	20000226 	beq	r4,zero,12a88 <__swsetup_r+0x30>
   12a80:	20800e17 	ldw	r2,56(r4)
   12a84:	10003126 	beq	r2,zero,12b4c <__swsetup_r+0xf4>
   12a88:	8080030b 	ldhu	r2,12(r16)
   12a8c:	10c0020c 	andi	r3,r2,8
   12a90:	1009883a 	mov	r4,r2
   12a94:	18000f26 	beq	r3,zero,12ad4 <__swsetup_r+0x7c>
   12a98:	80c00417 	ldw	r3,16(r16)
   12a9c:	18001526 	beq	r3,zero,12af4 <__swsetup_r+0x9c>
   12aa0:	1100004c 	andi	r4,r2,1
   12aa4:	20001c1e 	bne	r4,zero,12b18 <__swsetup_r+0xc0>
   12aa8:	1080008c 	andi	r2,r2,2
   12aac:	1000291e 	bne	r2,zero,12b54 <__swsetup_r+0xfc>
   12ab0:	80800517 	ldw	r2,20(r16)
   12ab4:	80800215 	stw	r2,8(r16)
   12ab8:	18001c26 	beq	r3,zero,12b2c <__swsetup_r+0xd4>
   12abc:	0005883a 	mov	r2,zero
   12ac0:	dfc00217 	ldw	ra,8(sp)
   12ac4:	dc400117 	ldw	r17,4(sp)
   12ac8:	dc000017 	ldw	r16,0(sp)
   12acc:	dec00304 	addi	sp,sp,12
   12ad0:	f800283a 	ret
   12ad4:	2080040c 	andi	r2,r4,16
   12ad8:	10002e26 	beq	r2,zero,12b94 <__swsetup_r+0x13c>
   12adc:	2080010c 	andi	r2,r4,4
   12ae0:	10001e1e 	bne	r2,zero,12b5c <__swsetup_r+0x104>
   12ae4:	80c00417 	ldw	r3,16(r16)
   12ae8:	20800214 	ori	r2,r4,8
   12aec:	8080030d 	sth	r2,12(r16)
   12af0:	183feb1e 	bne	r3,zero,12aa0 <__alt_data_end+0xfc012aa0>
   12af4:	1100a00c 	andi	r4,r2,640
   12af8:	01408004 	movi	r5,512
   12afc:	217fe826 	beq	r4,r5,12aa0 <__alt_data_end+0xfc012aa0>
   12b00:	800b883a 	mov	r5,r16
   12b04:	8809883a 	mov	r4,r17
   12b08:	00156140 	call	15614 <__smakebuf_r>
   12b0c:	8080030b 	ldhu	r2,12(r16)
   12b10:	80c00417 	ldw	r3,16(r16)
   12b14:	003fe206 	br	12aa0 <__alt_data_end+0xfc012aa0>
   12b18:	80800517 	ldw	r2,20(r16)
   12b1c:	80000215 	stw	zero,8(r16)
   12b20:	0085c83a 	sub	r2,zero,r2
   12b24:	80800615 	stw	r2,24(r16)
   12b28:	183fe41e 	bne	r3,zero,12abc <__alt_data_end+0xfc012abc>
   12b2c:	80c0030b 	ldhu	r3,12(r16)
   12b30:	0005883a 	mov	r2,zero
   12b34:	1900200c 	andi	r4,r3,128
   12b38:	203fe126 	beq	r4,zero,12ac0 <__alt_data_end+0xfc012ac0>
   12b3c:	18c01014 	ori	r3,r3,64
   12b40:	80c0030d 	sth	r3,12(r16)
   12b44:	00bfffc4 	movi	r2,-1
   12b48:	003fdd06 	br	12ac0 <__alt_data_end+0xfc012ac0>
   12b4c:	0014a640 	call	14a64 <__sinit>
   12b50:	003fcd06 	br	12a88 <__alt_data_end+0xfc012a88>
   12b54:	0005883a 	mov	r2,zero
   12b58:	003fd606 	br	12ab4 <__alt_data_end+0xfc012ab4>
   12b5c:	81400c17 	ldw	r5,48(r16)
   12b60:	28000626 	beq	r5,zero,12b7c <__swsetup_r+0x124>
   12b64:	80801004 	addi	r2,r16,64
   12b68:	28800326 	beq	r5,r2,12b78 <__swsetup_r+0x120>
   12b6c:	8809883a 	mov	r4,r17
   12b70:	0014bd80 	call	14bd8 <_free_r>
   12b74:	8100030b 	ldhu	r4,12(r16)
   12b78:	80000c15 	stw	zero,48(r16)
   12b7c:	80c00417 	ldw	r3,16(r16)
   12b80:	00bff6c4 	movi	r2,-37
   12b84:	1108703a 	and	r4,r2,r4
   12b88:	80000115 	stw	zero,4(r16)
   12b8c:	80c00015 	stw	r3,0(r16)
   12b90:	003fd506 	br	12ae8 <__alt_data_end+0xfc012ae8>
   12b94:	00800244 	movi	r2,9
   12b98:	88800015 	stw	r2,0(r17)
   12b9c:	20801014 	ori	r2,r4,64
   12ba0:	8080030d 	sth	r2,12(r16)
   12ba4:	00bfffc4 	movi	r2,-1
   12ba8:	003fc506 	br	12ac0 <__alt_data_end+0xfc012ac0>

00012bac <quorem>:
   12bac:	defff204 	addi	sp,sp,-56
   12bb0:	ddc00b15 	stw	r23,44(sp)
   12bb4:	20800417 	ldw	r2,16(r4)
   12bb8:	2dc00417 	ldw	r23,16(r5)
   12bbc:	dfc00d15 	stw	ra,52(sp)
   12bc0:	df000c15 	stw	fp,48(sp)
   12bc4:	dd800a15 	stw	r22,40(sp)
   12bc8:	dd400915 	stw	r21,36(sp)
   12bcc:	dd000815 	stw	r20,32(sp)
   12bd0:	dcc00715 	stw	r19,28(sp)
   12bd4:	dc800615 	stw	r18,24(sp)
   12bd8:	dc400515 	stw	r17,20(sp)
   12bdc:	dc000415 	stw	r16,16(sp)
   12be0:	15c07a16 	blt	r2,r23,12dcc <quorem+0x220>
   12be4:	bdffffc4 	addi	r23,r23,-1
   12be8:	bde9883a 	add	r20,r23,r23
   12bec:	28c00504 	addi	r3,r5,20
   12bf0:	a529883a 	add	r20,r20,r20
   12bf4:	1d39883a 	add	fp,r3,r20
   12bf8:	24c00504 	addi	r19,r4,20
   12bfc:	d9400215 	stw	r5,8(sp)
   12c00:	9d29883a 	add	r20,r19,r20
   12c04:	e1400017 	ldw	r5,0(fp)
   12c08:	d9000015 	stw	r4,0(sp)
   12c0c:	a1000017 	ldw	r4,0(r20)
   12c10:	29400044 	addi	r5,r5,1
   12c14:	d8c00115 	stw	r3,4(sp)
   12c18:	dd000315 	stw	r20,12(sp)
   12c1c:	000cbe40 	call	cbe4 <__udivsi3>
   12c20:	1025883a 	mov	r18,r2
   12c24:	10003026 	beq	r2,zero,12ce8 <quorem+0x13c>
   12c28:	dc400117 	ldw	r17,4(sp)
   12c2c:	9829883a 	mov	r20,r19
   12c30:	002d883a 	mov	r22,zero
   12c34:	0021883a 	mov	r16,zero
   12c38:	8d400017 	ldw	r21,0(r17)
   12c3c:	900b883a 	mov	r5,r18
   12c40:	8c400104 	addi	r17,r17,4
   12c44:	a93fffcc 	andi	r4,r21,65535
   12c48:	000cca00 	call	cca0 <__mulsi3>
   12c4c:	a808d43a 	srli	r4,r21,16
   12c50:	900b883a 	mov	r5,r18
   12c54:	15ad883a 	add	r22,r2,r22
   12c58:	000cca00 	call	cca0 <__mulsi3>
   12c5c:	a1000017 	ldw	r4,0(r20)
   12c60:	b00cd43a 	srli	r6,r22,16
   12c64:	b0ffffcc 	andi	r3,r22,65535
   12c68:	217fffcc 	andi	r5,r4,65535
   12c6c:	2c21883a 	add	r16,r5,r16
   12c70:	80c7c83a 	sub	r3,r16,r3
   12c74:	2008d43a 	srli	r4,r4,16
   12c78:	1185883a 	add	r2,r2,r6
   12c7c:	1821d43a 	srai	r16,r3,16
   12c80:	117fffcc 	andi	r5,r2,65535
   12c84:	2149c83a 	sub	r4,r4,r5
   12c88:	2421883a 	add	r16,r4,r16
   12c8c:	8008943a 	slli	r4,r16,16
   12c90:	18ffffcc 	andi	r3,r3,65535
   12c94:	102cd43a 	srli	r22,r2,16
   12c98:	20c8b03a 	or	r4,r4,r3
   12c9c:	a1000015 	stw	r4,0(r20)
   12ca0:	8021d43a 	srai	r16,r16,16
   12ca4:	a5000104 	addi	r20,r20,4
   12ca8:	e47fe32e 	bgeu	fp,r17,12c38 <__alt_data_end+0xfc012c38>
   12cac:	d8c00317 	ldw	r3,12(sp)
   12cb0:	18800017 	ldw	r2,0(r3)
   12cb4:	10000c1e 	bne	r2,zero,12ce8 <quorem+0x13c>
   12cb8:	18bfff04 	addi	r2,r3,-4
   12cbc:	9880082e 	bgeu	r19,r2,12ce0 <quorem+0x134>
   12cc0:	18ffff17 	ldw	r3,-4(r3)
   12cc4:	18000326 	beq	r3,zero,12cd4 <quorem+0x128>
   12cc8:	00000506 	br	12ce0 <quorem+0x134>
   12ccc:	10c00017 	ldw	r3,0(r2)
   12cd0:	1800031e 	bne	r3,zero,12ce0 <quorem+0x134>
   12cd4:	10bfff04 	addi	r2,r2,-4
   12cd8:	bdffffc4 	addi	r23,r23,-1
   12cdc:	98bffb36 	bltu	r19,r2,12ccc <__alt_data_end+0xfc012ccc>
   12ce0:	d8c00017 	ldw	r3,0(sp)
   12ce4:	1dc00415 	stw	r23,16(r3)
   12ce8:	d9400217 	ldw	r5,8(sp)
   12cec:	d9000017 	ldw	r4,0(sp)
   12cf0:	00163940 	call	16394 <__mcmp>
   12cf4:	10002816 	blt	r2,zero,12d98 <quorem+0x1ec>
   12cf8:	dc400117 	ldw	r17,4(sp)
   12cfc:	94800044 	addi	r18,r18,1
   12d00:	980d883a 	mov	r6,r19
   12d04:	0007883a 	mov	r3,zero
   12d08:	31000017 	ldw	r4,0(r6)
   12d0c:	89400017 	ldw	r5,0(r17)
   12d10:	31800104 	addi	r6,r6,4
   12d14:	20bfffcc 	andi	r2,r4,65535
   12d18:	10c7883a 	add	r3,r2,r3
   12d1c:	28bfffcc 	andi	r2,r5,65535
   12d20:	1885c83a 	sub	r2,r3,r2
   12d24:	280ad43a 	srli	r5,r5,16
   12d28:	2008d43a 	srli	r4,r4,16
   12d2c:	1007d43a 	srai	r3,r2,16
   12d30:	10bfffcc 	andi	r2,r2,65535
   12d34:	2149c83a 	sub	r4,r4,r5
   12d38:	20c9883a 	add	r4,r4,r3
   12d3c:	200a943a 	slli	r5,r4,16
   12d40:	8c400104 	addi	r17,r17,4
   12d44:	2007d43a 	srai	r3,r4,16
   12d48:	2884b03a 	or	r2,r5,r2
   12d4c:	30bfff15 	stw	r2,-4(r6)
   12d50:	e47fed2e 	bgeu	fp,r17,12d08 <__alt_data_end+0xfc012d08>
   12d54:	bdc5883a 	add	r2,r23,r23
   12d58:	1085883a 	add	r2,r2,r2
   12d5c:	9887883a 	add	r3,r19,r2
   12d60:	18800017 	ldw	r2,0(r3)
   12d64:	10000c1e 	bne	r2,zero,12d98 <quorem+0x1ec>
   12d68:	18bfff04 	addi	r2,r3,-4
   12d6c:	9880082e 	bgeu	r19,r2,12d90 <quorem+0x1e4>
   12d70:	18ffff17 	ldw	r3,-4(r3)
   12d74:	18000326 	beq	r3,zero,12d84 <quorem+0x1d8>
   12d78:	00000506 	br	12d90 <quorem+0x1e4>
   12d7c:	10c00017 	ldw	r3,0(r2)
   12d80:	1800031e 	bne	r3,zero,12d90 <quorem+0x1e4>
   12d84:	10bfff04 	addi	r2,r2,-4
   12d88:	bdffffc4 	addi	r23,r23,-1
   12d8c:	98bffb36 	bltu	r19,r2,12d7c <__alt_data_end+0xfc012d7c>
   12d90:	d8c00017 	ldw	r3,0(sp)
   12d94:	1dc00415 	stw	r23,16(r3)
   12d98:	9005883a 	mov	r2,r18
   12d9c:	dfc00d17 	ldw	ra,52(sp)
   12da0:	df000c17 	ldw	fp,48(sp)
   12da4:	ddc00b17 	ldw	r23,44(sp)
   12da8:	dd800a17 	ldw	r22,40(sp)
   12dac:	dd400917 	ldw	r21,36(sp)
   12db0:	dd000817 	ldw	r20,32(sp)
   12db4:	dcc00717 	ldw	r19,28(sp)
   12db8:	dc800617 	ldw	r18,24(sp)
   12dbc:	dc400517 	ldw	r17,20(sp)
   12dc0:	dc000417 	ldw	r16,16(sp)
   12dc4:	dec00e04 	addi	sp,sp,56
   12dc8:	f800283a 	ret
   12dcc:	0005883a 	mov	r2,zero
   12dd0:	003ff206 	br	12d9c <__alt_data_end+0xfc012d9c>

00012dd4 <_dtoa_r>:
   12dd4:	20801017 	ldw	r2,64(r4)
   12dd8:	deffde04 	addi	sp,sp,-136
   12ddc:	df002015 	stw	fp,128(sp)
   12de0:	dcc01b15 	stw	r19,108(sp)
   12de4:	dc801a15 	stw	r18,104(sp)
   12de8:	dc401915 	stw	r17,100(sp)
   12dec:	dc001815 	stw	r16,96(sp)
   12df0:	dfc02115 	stw	ra,132(sp)
   12df4:	ddc01f15 	stw	r23,124(sp)
   12df8:	dd801e15 	stw	r22,120(sp)
   12dfc:	dd401d15 	stw	r21,116(sp)
   12e00:	dd001c15 	stw	r20,112(sp)
   12e04:	d9c00315 	stw	r7,12(sp)
   12e08:	2039883a 	mov	fp,r4
   12e0c:	3023883a 	mov	r17,r6
   12e10:	2825883a 	mov	r18,r5
   12e14:	dc002417 	ldw	r16,144(sp)
   12e18:	3027883a 	mov	r19,r6
   12e1c:	10000826 	beq	r2,zero,12e40 <_dtoa_r+0x6c>
   12e20:	21801117 	ldw	r6,68(r4)
   12e24:	00c00044 	movi	r3,1
   12e28:	100b883a 	mov	r5,r2
   12e2c:	1986983a 	sll	r3,r3,r6
   12e30:	11800115 	stw	r6,4(r2)
   12e34:	10c00215 	stw	r3,8(r2)
   12e38:	0015ab80 	call	15ab8 <_Bfree>
   12e3c:	e0001015 	stw	zero,64(fp)
   12e40:	88002e16 	blt	r17,zero,12efc <_dtoa_r+0x128>
   12e44:	80000015 	stw	zero,0(r16)
   12e48:	889ffc2c 	andhi	r2,r17,32752
   12e4c:	00dffc34 	movhi	r3,32752
   12e50:	10c01c26 	beq	r2,r3,12ec4 <_dtoa_r+0xf0>
   12e54:	000d883a 	mov	r6,zero
   12e58:	000f883a 	mov	r7,zero
   12e5c:	9009883a 	mov	r4,r18
   12e60:	980b883a 	mov	r5,r19
   12e64:	001c7340 	call	1c734 <__eqdf2>
   12e68:	10002b1e 	bne	r2,zero,12f18 <_dtoa_r+0x144>
   12e6c:	d9c02317 	ldw	r7,140(sp)
   12e70:	00800044 	movi	r2,1
   12e74:	38800015 	stw	r2,0(r7)
   12e78:	d8802517 	ldw	r2,148(sp)
   12e7c:	10019e26 	beq	r2,zero,134f8 <_dtoa_r+0x724>
   12e80:	d8c02517 	ldw	r3,148(sp)
   12e84:	008000f4 	movhi	r2,3
   12e88:	10a56644 	addi	r2,r2,-27239
   12e8c:	18800015 	stw	r2,0(r3)
   12e90:	10bfffc4 	addi	r2,r2,-1
   12e94:	dfc02117 	ldw	ra,132(sp)
   12e98:	df002017 	ldw	fp,128(sp)
   12e9c:	ddc01f17 	ldw	r23,124(sp)
   12ea0:	dd801e17 	ldw	r22,120(sp)
   12ea4:	dd401d17 	ldw	r21,116(sp)
   12ea8:	dd001c17 	ldw	r20,112(sp)
   12eac:	dcc01b17 	ldw	r19,108(sp)
   12eb0:	dc801a17 	ldw	r18,104(sp)
   12eb4:	dc401917 	ldw	r17,100(sp)
   12eb8:	dc001817 	ldw	r16,96(sp)
   12ebc:	dec02204 	addi	sp,sp,136
   12ec0:	f800283a 	ret
   12ec4:	d8c02317 	ldw	r3,140(sp)
   12ec8:	0089c3c4 	movi	r2,9999
   12ecc:	18800015 	stw	r2,0(r3)
   12ed0:	90017726 	beq	r18,zero,134b0 <_dtoa_r+0x6dc>
   12ed4:	008000f4 	movhi	r2,3
   12ed8:	10a57a04 	addi	r2,r2,-27160
   12edc:	d9002517 	ldw	r4,148(sp)
   12ee0:	203fec26 	beq	r4,zero,12e94 <__alt_data_end+0xfc012e94>
   12ee4:	10c000c7 	ldb	r3,3(r2)
   12ee8:	1801781e 	bne	r3,zero,134cc <_dtoa_r+0x6f8>
   12eec:	10c000c4 	addi	r3,r2,3
   12ef0:	d9802517 	ldw	r6,148(sp)
   12ef4:	30c00015 	stw	r3,0(r6)
   12ef8:	003fe606 	br	12e94 <__alt_data_end+0xfc012e94>
   12efc:	04e00034 	movhi	r19,32768
   12f00:	9cffffc4 	addi	r19,r19,-1
   12f04:	00800044 	movi	r2,1
   12f08:	8ce6703a 	and	r19,r17,r19
   12f0c:	80800015 	stw	r2,0(r16)
   12f10:	9823883a 	mov	r17,r19
   12f14:	003fcc06 	br	12e48 <__alt_data_end+0xfc012e48>
   12f18:	d8800204 	addi	r2,sp,8
   12f1c:	d8800015 	stw	r2,0(sp)
   12f20:	d9c00104 	addi	r7,sp,4
   12f24:	900b883a 	mov	r5,r18
   12f28:	980d883a 	mov	r6,r19
   12f2c:	e009883a 	mov	r4,fp
   12f30:	8820d53a 	srli	r16,r17,20
   12f34:	00167600 	call	16760 <__d2b>
   12f38:	d8800915 	stw	r2,36(sp)
   12f3c:	8001651e 	bne	r16,zero,134d4 <_dtoa_r+0x700>
   12f40:	dd800217 	ldw	r22,8(sp)
   12f44:	dc000117 	ldw	r16,4(sp)
   12f48:	00800804 	movi	r2,32
   12f4c:	b421883a 	add	r16,r22,r16
   12f50:	80c10c84 	addi	r3,r16,1074
   12f54:	10c2d10e 	bge	r2,r3,13a9c <_dtoa_r+0xcc8>
   12f58:	00801004 	movi	r2,64
   12f5c:	81010484 	addi	r4,r16,1042
   12f60:	10c7c83a 	sub	r3,r2,r3
   12f64:	9108d83a 	srl	r4,r18,r4
   12f68:	88e2983a 	sll	r17,r17,r3
   12f6c:	2448b03a 	or	r4,r4,r17
   12f70:	001dc500 	call	1dc50 <__floatunsidf>
   12f74:	017f8434 	movhi	r5,65040
   12f78:	01800044 	movi	r6,1
   12f7c:	1009883a 	mov	r4,r2
   12f80:	194b883a 	add	r5,r3,r5
   12f84:	843fffc4 	addi	r16,r16,-1
   12f88:	d9801115 	stw	r6,68(sp)
   12f8c:	000d883a 	mov	r6,zero
   12f90:	01cffe34 	movhi	r7,16376
   12f94:	001d1f80 	call	1d1f8 <__subdf3>
   12f98:	0198dbf4 	movhi	r6,25455
   12f9c:	01cff4f4 	movhi	r7,16339
   12fa0:	3190d844 	addi	r6,r6,17249
   12fa4:	39e1e9c4 	addi	r7,r7,-30809
   12fa8:	1009883a 	mov	r4,r2
   12fac:	180b883a 	mov	r5,r3
   12fb0:	001c98c0 	call	1c98c <__muldf3>
   12fb4:	01a2d874 	movhi	r6,35681
   12fb8:	01cff1f4 	movhi	r7,16327
   12fbc:	31b22cc4 	addi	r6,r6,-14157
   12fc0:	39e28a04 	addi	r7,r7,-30168
   12fc4:	180b883a 	mov	r5,r3
   12fc8:	1009883a 	mov	r4,r2
   12fcc:	001b4b80 	call	1b4b8 <__adddf3>
   12fd0:	8009883a 	mov	r4,r16
   12fd4:	1029883a 	mov	r20,r2
   12fd8:	1823883a 	mov	r17,r3
   12fdc:	001db740 	call	1db74 <__floatsidf>
   12fe0:	019427f4 	movhi	r6,20639
   12fe4:	01cff4f4 	movhi	r7,16339
   12fe8:	319e7ec4 	addi	r6,r6,31227
   12fec:	39d104c4 	addi	r7,r7,17427
   12ff0:	1009883a 	mov	r4,r2
   12ff4:	180b883a 	mov	r5,r3
   12ff8:	001c98c0 	call	1c98c <__muldf3>
   12ffc:	100d883a 	mov	r6,r2
   13000:	180f883a 	mov	r7,r3
   13004:	a009883a 	mov	r4,r20
   13008:	880b883a 	mov	r5,r17
   1300c:	001b4b80 	call	1b4b8 <__adddf3>
   13010:	1009883a 	mov	r4,r2
   13014:	180b883a 	mov	r5,r3
   13018:	1029883a 	mov	r20,r2
   1301c:	1823883a 	mov	r17,r3
   13020:	001daf40 	call	1daf4 <__fixdfsi>
   13024:	000d883a 	mov	r6,zero
   13028:	000f883a 	mov	r7,zero
   1302c:	a009883a 	mov	r4,r20
   13030:	880b883a 	mov	r5,r17
   13034:	d8800515 	stw	r2,20(sp)
   13038:	001c8980 	call	1c898 <__ledf2>
   1303c:	10028716 	blt	r2,zero,13a5c <_dtoa_r+0xc88>
   13040:	d8c00517 	ldw	r3,20(sp)
   13044:	00800584 	movi	r2,22
   13048:	10c27536 	bltu	r2,r3,13a20 <_dtoa_r+0xc4c>
   1304c:	180490fa 	slli	r2,r3,3
   13050:	00c000f4 	movhi	r3,3
   13054:	18e59504 	addi	r3,r3,-27052
   13058:	1885883a 	add	r2,r3,r2
   1305c:	11000017 	ldw	r4,0(r2)
   13060:	11400117 	ldw	r5,4(r2)
   13064:	900d883a 	mov	r6,r18
   13068:	980f883a 	mov	r7,r19
   1306c:	001c7bc0 	call	1c7bc <__gedf2>
   13070:	00828d0e 	bge	zero,r2,13aa8 <_dtoa_r+0xcd4>
   13074:	d9000517 	ldw	r4,20(sp)
   13078:	d8000e15 	stw	zero,56(sp)
   1307c:	213fffc4 	addi	r4,r4,-1
   13080:	d9000515 	stw	r4,20(sp)
   13084:	b42dc83a 	sub	r22,r22,r16
   13088:	b5bfffc4 	addi	r22,r22,-1
   1308c:	b0026f16 	blt	r22,zero,13a4c <_dtoa_r+0xc78>
   13090:	d8000815 	stw	zero,32(sp)
   13094:	d9c00517 	ldw	r7,20(sp)
   13098:	38026416 	blt	r7,zero,13a2c <_dtoa_r+0xc58>
   1309c:	b1ed883a 	add	r22,r22,r7
   130a0:	d9c00d15 	stw	r7,52(sp)
   130a4:	d8000a15 	stw	zero,40(sp)
   130a8:	d9800317 	ldw	r6,12(sp)
   130ac:	00800244 	movi	r2,9
   130b0:	11811436 	bltu	r2,r6,13504 <_dtoa_r+0x730>
   130b4:	00800144 	movi	r2,5
   130b8:	1184e10e 	bge	r2,r6,14440 <_dtoa_r+0x166c>
   130bc:	31bfff04 	addi	r6,r6,-4
   130c0:	d9800315 	stw	r6,12(sp)
   130c4:	0023883a 	mov	r17,zero
   130c8:	d9800317 	ldw	r6,12(sp)
   130cc:	008000c4 	movi	r2,3
   130d0:	30836726 	beq	r6,r2,13e70 <_dtoa_r+0x109c>
   130d4:	1183410e 	bge	r2,r6,13ddc <_dtoa_r+0x1008>
   130d8:	d9c00317 	ldw	r7,12(sp)
   130dc:	00800104 	movi	r2,4
   130e0:	38827c26 	beq	r7,r2,13ad4 <_dtoa_r+0xd00>
   130e4:	00800144 	movi	r2,5
   130e8:	3884c41e 	bne	r7,r2,143fc <_dtoa_r+0x1628>
   130ec:	00800044 	movi	r2,1
   130f0:	d8800b15 	stw	r2,44(sp)
   130f4:	d8c00517 	ldw	r3,20(sp)
   130f8:	d9002217 	ldw	r4,136(sp)
   130fc:	1907883a 	add	r3,r3,r4
   13100:	19800044 	addi	r6,r3,1
   13104:	d8c00c15 	stw	r3,48(sp)
   13108:	d9800615 	stw	r6,24(sp)
   1310c:	0183a40e 	bge	zero,r6,13fa0 <_dtoa_r+0x11cc>
   13110:	d9800617 	ldw	r6,24(sp)
   13114:	3021883a 	mov	r16,r6
   13118:	e0001115 	stw	zero,68(fp)
   1311c:	008005c4 	movi	r2,23
   13120:	1184c92e 	bgeu	r2,r6,14448 <_dtoa_r+0x1674>
   13124:	00c00044 	movi	r3,1
   13128:	00800104 	movi	r2,4
   1312c:	1085883a 	add	r2,r2,r2
   13130:	11000504 	addi	r4,r2,20
   13134:	180b883a 	mov	r5,r3
   13138:	18c00044 	addi	r3,r3,1
   1313c:	313ffb2e 	bgeu	r6,r4,1312c <__alt_data_end+0xfc01312c>
   13140:	e1401115 	stw	r5,68(fp)
   13144:	e009883a 	mov	r4,fp
   13148:	0015a100 	call	15a10 <_Balloc>
   1314c:	d8800715 	stw	r2,28(sp)
   13150:	e0801015 	stw	r2,64(fp)
   13154:	00800384 	movi	r2,14
   13158:	1400f736 	bltu	r2,r16,13538 <_dtoa_r+0x764>
   1315c:	8800f626 	beq	r17,zero,13538 <_dtoa_r+0x764>
   13160:	d9c00517 	ldw	r7,20(sp)
   13164:	01c39a0e 	bge	zero,r7,13fd0 <_dtoa_r+0x11fc>
   13168:	388003cc 	andi	r2,r7,15
   1316c:	100490fa 	slli	r2,r2,3
   13170:	382bd13a 	srai	r21,r7,4
   13174:	00c000f4 	movhi	r3,3
   13178:	18e59504 	addi	r3,r3,-27052
   1317c:	1885883a 	add	r2,r3,r2
   13180:	a8c0040c 	andi	r3,r21,16
   13184:	12400017 	ldw	r9,0(r2)
   13188:	12000117 	ldw	r8,4(r2)
   1318c:	18037926 	beq	r3,zero,13f74 <_dtoa_r+0x11a0>
   13190:	008000f4 	movhi	r2,3
   13194:	10a58b04 	addi	r2,r2,-27092
   13198:	11800817 	ldw	r6,32(r2)
   1319c:	11c00917 	ldw	r7,36(r2)
   131a0:	9009883a 	mov	r4,r18
   131a4:	980b883a 	mov	r5,r19
   131a8:	da001715 	stw	r8,92(sp)
   131ac:	da401615 	stw	r9,88(sp)
   131b0:	001bd640 	call	1bd64 <__divdf3>
   131b4:	da001717 	ldw	r8,92(sp)
   131b8:	da401617 	ldw	r9,88(sp)
   131bc:	ad4003cc 	andi	r21,r21,15
   131c0:	040000c4 	movi	r16,3
   131c4:	1023883a 	mov	r17,r2
   131c8:	1829883a 	mov	r20,r3
   131cc:	a8001126 	beq	r21,zero,13214 <_dtoa_r+0x440>
   131d0:	05c000f4 	movhi	r23,3
   131d4:	bde58b04 	addi	r23,r23,-27092
   131d8:	4805883a 	mov	r2,r9
   131dc:	4007883a 	mov	r3,r8
   131e0:	a980004c 	andi	r6,r21,1
   131e4:	1009883a 	mov	r4,r2
   131e8:	a82bd07a 	srai	r21,r21,1
   131ec:	180b883a 	mov	r5,r3
   131f0:	30000426 	beq	r6,zero,13204 <_dtoa_r+0x430>
   131f4:	b9800017 	ldw	r6,0(r23)
   131f8:	b9c00117 	ldw	r7,4(r23)
   131fc:	84000044 	addi	r16,r16,1
   13200:	001c98c0 	call	1c98c <__muldf3>
   13204:	bdc00204 	addi	r23,r23,8
   13208:	a83ff51e 	bne	r21,zero,131e0 <__alt_data_end+0xfc0131e0>
   1320c:	1013883a 	mov	r9,r2
   13210:	1811883a 	mov	r8,r3
   13214:	480d883a 	mov	r6,r9
   13218:	400f883a 	mov	r7,r8
   1321c:	8809883a 	mov	r4,r17
   13220:	a00b883a 	mov	r5,r20
   13224:	001bd640 	call	1bd64 <__divdf3>
   13228:	d8800f15 	stw	r2,60(sp)
   1322c:	d8c01015 	stw	r3,64(sp)
   13230:	d8c00e17 	ldw	r3,56(sp)
   13234:	18000626 	beq	r3,zero,13250 <_dtoa_r+0x47c>
   13238:	d9000f17 	ldw	r4,60(sp)
   1323c:	d9401017 	ldw	r5,64(sp)
   13240:	000d883a 	mov	r6,zero
   13244:	01cffc34 	movhi	r7,16368
   13248:	001c8980 	call	1c898 <__ledf2>
   1324c:	10040b16 	blt	r2,zero,1427c <_dtoa_r+0x14a8>
   13250:	8009883a 	mov	r4,r16
   13254:	001db740 	call	1db74 <__floatsidf>
   13258:	d9800f17 	ldw	r6,60(sp)
   1325c:	d9c01017 	ldw	r7,64(sp)
   13260:	1009883a 	mov	r4,r2
   13264:	180b883a 	mov	r5,r3
   13268:	001c98c0 	call	1c98c <__muldf3>
   1326c:	000d883a 	mov	r6,zero
   13270:	01d00734 	movhi	r7,16412
   13274:	1009883a 	mov	r4,r2
   13278:	180b883a 	mov	r5,r3
   1327c:	001b4b80 	call	1b4b8 <__adddf3>
   13280:	1021883a 	mov	r16,r2
   13284:	d8800617 	ldw	r2,24(sp)
   13288:	047f3034 	movhi	r17,64704
   1328c:	1c63883a 	add	r17,r3,r17
   13290:	10031826 	beq	r2,zero,13ef4 <_dtoa_r+0x1120>
   13294:	d8c00517 	ldw	r3,20(sp)
   13298:	db000617 	ldw	r12,24(sp)
   1329c:	d8c01315 	stw	r3,76(sp)
   132a0:	d9000b17 	ldw	r4,44(sp)
   132a4:	20038f26 	beq	r4,zero,140e4 <_dtoa_r+0x1310>
   132a8:	60bfffc4 	addi	r2,r12,-1
   132ac:	100490fa 	slli	r2,r2,3
   132b0:	00c000f4 	movhi	r3,3
   132b4:	18e59504 	addi	r3,r3,-27052
   132b8:	1885883a 	add	r2,r3,r2
   132bc:	11800017 	ldw	r6,0(r2)
   132c0:	11c00117 	ldw	r7,4(r2)
   132c4:	d8800717 	ldw	r2,28(sp)
   132c8:	0009883a 	mov	r4,zero
   132cc:	014ff834 	movhi	r5,16352
   132d0:	db001615 	stw	r12,88(sp)
   132d4:	15c00044 	addi	r23,r2,1
   132d8:	001bd640 	call	1bd64 <__divdf3>
   132dc:	800d883a 	mov	r6,r16
   132e0:	880f883a 	mov	r7,r17
   132e4:	1009883a 	mov	r4,r2
   132e8:	180b883a 	mov	r5,r3
   132ec:	001d1f80 	call	1d1f8 <__subdf3>
   132f0:	d9401017 	ldw	r5,64(sp)
   132f4:	d9000f17 	ldw	r4,60(sp)
   132f8:	102b883a 	mov	r21,r2
   132fc:	d8c01215 	stw	r3,72(sp)
   13300:	001daf40 	call	1daf4 <__fixdfsi>
   13304:	1009883a 	mov	r4,r2
   13308:	1029883a 	mov	r20,r2
   1330c:	001db740 	call	1db74 <__floatsidf>
   13310:	d9000f17 	ldw	r4,60(sp)
   13314:	d9401017 	ldw	r5,64(sp)
   13318:	100d883a 	mov	r6,r2
   1331c:	180f883a 	mov	r7,r3
   13320:	001d1f80 	call	1d1f8 <__subdf3>
   13324:	1823883a 	mov	r17,r3
   13328:	d8c00717 	ldw	r3,28(sp)
   1332c:	d9401217 	ldw	r5,72(sp)
   13330:	a2000c04 	addi	r8,r20,48
   13334:	1021883a 	mov	r16,r2
   13338:	1a000005 	stb	r8,0(r3)
   1333c:	800d883a 	mov	r6,r16
   13340:	880f883a 	mov	r7,r17
   13344:	a809883a 	mov	r4,r21
   13348:	4029883a 	mov	r20,r8
   1334c:	001c7bc0 	call	1c7bc <__gedf2>
   13350:	00841d16 	blt	zero,r2,143c8 <_dtoa_r+0x15f4>
   13354:	800d883a 	mov	r6,r16
   13358:	880f883a 	mov	r7,r17
   1335c:	0009883a 	mov	r4,zero
   13360:	014ffc34 	movhi	r5,16368
   13364:	001d1f80 	call	1d1f8 <__subdf3>
   13368:	d9401217 	ldw	r5,72(sp)
   1336c:	100d883a 	mov	r6,r2
   13370:	180f883a 	mov	r7,r3
   13374:	a809883a 	mov	r4,r21
   13378:	001c7bc0 	call	1c7bc <__gedf2>
   1337c:	db001617 	ldw	r12,88(sp)
   13380:	00840e16 	blt	zero,r2,143bc <_dtoa_r+0x15e8>
   13384:	00800044 	movi	r2,1
   13388:	13006b0e 	bge	r2,r12,13538 <_dtoa_r+0x764>
   1338c:	d9000717 	ldw	r4,28(sp)
   13390:	dd800f15 	stw	r22,60(sp)
   13394:	dcc01015 	stw	r19,64(sp)
   13398:	2319883a 	add	r12,r4,r12
   1339c:	dcc01217 	ldw	r19,72(sp)
   133a0:	602d883a 	mov	r22,r12
   133a4:	dc801215 	stw	r18,72(sp)
   133a8:	b825883a 	mov	r18,r23
   133ac:	00000906 	br	133d4 <_dtoa_r+0x600>
   133b0:	001d1f80 	call	1d1f8 <__subdf3>
   133b4:	a80d883a 	mov	r6,r21
   133b8:	980f883a 	mov	r7,r19
   133bc:	1009883a 	mov	r4,r2
   133c0:	180b883a 	mov	r5,r3
   133c4:	001c8980 	call	1c898 <__ledf2>
   133c8:	1003e816 	blt	r2,zero,1436c <_dtoa_r+0x1598>
   133cc:	b825883a 	mov	r18,r23
   133d0:	bd83e926 	beq	r23,r22,14378 <_dtoa_r+0x15a4>
   133d4:	a809883a 	mov	r4,r21
   133d8:	980b883a 	mov	r5,r19
   133dc:	000d883a 	mov	r6,zero
   133e0:	01d00934 	movhi	r7,16420
   133e4:	001c98c0 	call	1c98c <__muldf3>
   133e8:	000d883a 	mov	r6,zero
   133ec:	01d00934 	movhi	r7,16420
   133f0:	8009883a 	mov	r4,r16
   133f4:	880b883a 	mov	r5,r17
   133f8:	102b883a 	mov	r21,r2
   133fc:	1827883a 	mov	r19,r3
   13400:	001c98c0 	call	1c98c <__muldf3>
   13404:	180b883a 	mov	r5,r3
   13408:	1009883a 	mov	r4,r2
   1340c:	1821883a 	mov	r16,r3
   13410:	1023883a 	mov	r17,r2
   13414:	001daf40 	call	1daf4 <__fixdfsi>
   13418:	1009883a 	mov	r4,r2
   1341c:	1029883a 	mov	r20,r2
   13420:	001db740 	call	1db74 <__floatsidf>
   13424:	8809883a 	mov	r4,r17
   13428:	800b883a 	mov	r5,r16
   1342c:	100d883a 	mov	r6,r2
   13430:	180f883a 	mov	r7,r3
   13434:	001d1f80 	call	1d1f8 <__subdf3>
   13438:	a5000c04 	addi	r20,r20,48
   1343c:	a80d883a 	mov	r6,r21
   13440:	980f883a 	mov	r7,r19
   13444:	1009883a 	mov	r4,r2
   13448:	180b883a 	mov	r5,r3
   1344c:	95000005 	stb	r20,0(r18)
   13450:	1021883a 	mov	r16,r2
   13454:	1823883a 	mov	r17,r3
   13458:	001c8980 	call	1c898 <__ledf2>
   1345c:	bdc00044 	addi	r23,r23,1
   13460:	800d883a 	mov	r6,r16
   13464:	880f883a 	mov	r7,r17
   13468:	0009883a 	mov	r4,zero
   1346c:	014ffc34 	movhi	r5,16368
   13470:	103fcf0e 	bge	r2,zero,133b0 <__alt_data_end+0xfc0133b0>
   13474:	d8c01317 	ldw	r3,76(sp)
   13478:	d8c00515 	stw	r3,20(sp)
   1347c:	d9400917 	ldw	r5,36(sp)
   13480:	e009883a 	mov	r4,fp
   13484:	0015ab80 	call	15ab8 <_Bfree>
   13488:	d9000517 	ldw	r4,20(sp)
   1348c:	d9802317 	ldw	r6,140(sp)
   13490:	d9c02517 	ldw	r7,148(sp)
   13494:	b8000005 	stb	zero,0(r23)
   13498:	20800044 	addi	r2,r4,1
   1349c:	30800015 	stw	r2,0(r6)
   134a0:	3802aa26 	beq	r7,zero,13f4c <_dtoa_r+0x1178>
   134a4:	3dc00015 	stw	r23,0(r7)
   134a8:	d8800717 	ldw	r2,28(sp)
   134ac:	003e7906 	br	12e94 <__alt_data_end+0xfc012e94>
   134b0:	00800434 	movhi	r2,16
   134b4:	10bfffc4 	addi	r2,r2,-1
   134b8:	88a2703a 	and	r17,r17,r2
   134bc:	883e851e 	bne	r17,zero,12ed4 <__alt_data_end+0xfc012ed4>
   134c0:	008000f4 	movhi	r2,3
   134c4:	10a57704 	addi	r2,r2,-27172
   134c8:	003e8406 	br	12edc <__alt_data_end+0xfc012edc>
   134cc:	10c00204 	addi	r3,r2,8
   134d0:	003e8706 	br	12ef0 <__alt_data_end+0xfc012ef0>
   134d4:	01400434 	movhi	r5,16
   134d8:	297fffc4 	addi	r5,r5,-1
   134dc:	994a703a 	and	r5,r19,r5
   134e0:	9009883a 	mov	r4,r18
   134e4:	843f0044 	addi	r16,r16,-1023
   134e8:	294ffc34 	orhi	r5,r5,16368
   134ec:	dd800217 	ldw	r22,8(sp)
   134f0:	d8001115 	stw	zero,68(sp)
   134f4:	003ea506 	br	12f8c <__alt_data_end+0xfc012f8c>
   134f8:	008000f4 	movhi	r2,3
   134fc:	10a56604 	addi	r2,r2,-27240
   13500:	003e6406 	br	12e94 <__alt_data_end+0xfc012e94>
   13504:	e0001115 	stw	zero,68(fp)
   13508:	000b883a 	mov	r5,zero
   1350c:	e009883a 	mov	r4,fp
   13510:	0015a100 	call	15a10 <_Balloc>
   13514:	01bfffc4 	movi	r6,-1
   13518:	01c00044 	movi	r7,1
   1351c:	d8800715 	stw	r2,28(sp)
   13520:	d9800c15 	stw	r6,48(sp)
   13524:	e0801015 	stw	r2,64(fp)
   13528:	d8000315 	stw	zero,12(sp)
   1352c:	d9c00b15 	stw	r7,44(sp)
   13530:	d9800615 	stw	r6,24(sp)
   13534:	d8002215 	stw	zero,136(sp)
   13538:	d8800117 	ldw	r2,4(sp)
   1353c:	10008916 	blt	r2,zero,13764 <_dtoa_r+0x990>
   13540:	d9000517 	ldw	r4,20(sp)
   13544:	00c00384 	movi	r3,14
   13548:	19008616 	blt	r3,r4,13764 <_dtoa_r+0x990>
   1354c:	200490fa 	slli	r2,r4,3
   13550:	00c000f4 	movhi	r3,3
   13554:	d9802217 	ldw	r6,136(sp)
   13558:	18e59504 	addi	r3,r3,-27052
   1355c:	1885883a 	add	r2,r3,r2
   13560:	14000017 	ldw	r16,0(r2)
   13564:	14400117 	ldw	r17,4(r2)
   13568:	30016316 	blt	r6,zero,13af8 <_dtoa_r+0xd24>
   1356c:	800d883a 	mov	r6,r16
   13570:	880f883a 	mov	r7,r17
   13574:	9009883a 	mov	r4,r18
   13578:	980b883a 	mov	r5,r19
   1357c:	001bd640 	call	1bd64 <__divdf3>
   13580:	180b883a 	mov	r5,r3
   13584:	1009883a 	mov	r4,r2
   13588:	001daf40 	call	1daf4 <__fixdfsi>
   1358c:	1009883a 	mov	r4,r2
   13590:	102b883a 	mov	r21,r2
   13594:	001db740 	call	1db74 <__floatsidf>
   13598:	800d883a 	mov	r6,r16
   1359c:	880f883a 	mov	r7,r17
   135a0:	1009883a 	mov	r4,r2
   135a4:	180b883a 	mov	r5,r3
   135a8:	001c98c0 	call	1c98c <__muldf3>
   135ac:	100d883a 	mov	r6,r2
   135b0:	180f883a 	mov	r7,r3
   135b4:	9009883a 	mov	r4,r18
   135b8:	980b883a 	mov	r5,r19
   135bc:	001d1f80 	call	1d1f8 <__subdf3>
   135c0:	d9c00717 	ldw	r7,28(sp)
   135c4:	1009883a 	mov	r4,r2
   135c8:	a8800c04 	addi	r2,r21,48
   135cc:	38800005 	stb	r2,0(r7)
   135d0:	3dc00044 	addi	r23,r7,1
   135d4:	d9c00617 	ldw	r7,24(sp)
   135d8:	01800044 	movi	r6,1
   135dc:	180b883a 	mov	r5,r3
   135e0:	2005883a 	mov	r2,r4
   135e4:	39803826 	beq	r7,r6,136c8 <_dtoa_r+0x8f4>
   135e8:	000d883a 	mov	r6,zero
   135ec:	01d00934 	movhi	r7,16420
   135f0:	001c98c0 	call	1c98c <__muldf3>
   135f4:	000d883a 	mov	r6,zero
   135f8:	000f883a 	mov	r7,zero
   135fc:	1009883a 	mov	r4,r2
   13600:	180b883a 	mov	r5,r3
   13604:	1025883a 	mov	r18,r2
   13608:	1827883a 	mov	r19,r3
   1360c:	001c7340 	call	1c734 <__eqdf2>
   13610:	103f9a26 	beq	r2,zero,1347c <__alt_data_end+0xfc01347c>
   13614:	d9c00617 	ldw	r7,24(sp)
   13618:	d8c00717 	ldw	r3,28(sp)
   1361c:	b829883a 	mov	r20,r23
   13620:	38bfffc4 	addi	r2,r7,-1
   13624:	18ad883a 	add	r22,r3,r2
   13628:	00000a06 	br	13654 <_dtoa_r+0x880>
   1362c:	001c98c0 	call	1c98c <__muldf3>
   13630:	000d883a 	mov	r6,zero
   13634:	000f883a 	mov	r7,zero
   13638:	1009883a 	mov	r4,r2
   1363c:	180b883a 	mov	r5,r3
   13640:	1025883a 	mov	r18,r2
   13644:	1827883a 	mov	r19,r3
   13648:	b829883a 	mov	r20,r23
   1364c:	001c7340 	call	1c734 <__eqdf2>
   13650:	103f8a26 	beq	r2,zero,1347c <__alt_data_end+0xfc01347c>
   13654:	800d883a 	mov	r6,r16
   13658:	880f883a 	mov	r7,r17
   1365c:	9009883a 	mov	r4,r18
   13660:	980b883a 	mov	r5,r19
   13664:	001bd640 	call	1bd64 <__divdf3>
   13668:	180b883a 	mov	r5,r3
   1366c:	1009883a 	mov	r4,r2
   13670:	001daf40 	call	1daf4 <__fixdfsi>
   13674:	1009883a 	mov	r4,r2
   13678:	102b883a 	mov	r21,r2
   1367c:	001db740 	call	1db74 <__floatsidf>
   13680:	800d883a 	mov	r6,r16
   13684:	880f883a 	mov	r7,r17
   13688:	1009883a 	mov	r4,r2
   1368c:	180b883a 	mov	r5,r3
   13690:	001c98c0 	call	1c98c <__muldf3>
   13694:	100d883a 	mov	r6,r2
   13698:	180f883a 	mov	r7,r3
   1369c:	9009883a 	mov	r4,r18
   136a0:	980b883a 	mov	r5,r19
   136a4:	001d1f80 	call	1d1f8 <__subdf3>
   136a8:	aa000c04 	addi	r8,r21,48
   136ac:	a2000005 	stb	r8,0(r20)
   136b0:	000d883a 	mov	r6,zero
   136b4:	01d00934 	movhi	r7,16420
   136b8:	1009883a 	mov	r4,r2
   136bc:	180b883a 	mov	r5,r3
   136c0:	a5c00044 	addi	r23,r20,1
   136c4:	b53fd91e 	bne	r22,r20,1362c <__alt_data_end+0xfc01362c>
   136c8:	100d883a 	mov	r6,r2
   136cc:	180f883a 	mov	r7,r3
   136d0:	1009883a 	mov	r4,r2
   136d4:	180b883a 	mov	r5,r3
   136d8:	001b4b80 	call	1b4b8 <__adddf3>
   136dc:	100d883a 	mov	r6,r2
   136e0:	180f883a 	mov	r7,r3
   136e4:	8009883a 	mov	r4,r16
   136e8:	880b883a 	mov	r5,r17
   136ec:	1027883a 	mov	r19,r2
   136f0:	1825883a 	mov	r18,r3
   136f4:	001c8980 	call	1c898 <__ledf2>
   136f8:	10000816 	blt	r2,zero,1371c <_dtoa_r+0x948>
   136fc:	980d883a 	mov	r6,r19
   13700:	900f883a 	mov	r7,r18
   13704:	8009883a 	mov	r4,r16
   13708:	880b883a 	mov	r5,r17
   1370c:	001c7340 	call	1c734 <__eqdf2>
   13710:	103f5a1e 	bne	r2,zero,1347c <__alt_data_end+0xfc01347c>
   13714:	ad40004c 	andi	r21,r21,1
   13718:	a83f5826 	beq	r21,zero,1347c <__alt_data_end+0xfc01347c>
   1371c:	bd3fffc3 	ldbu	r20,-1(r23)
   13720:	b8bfffc4 	addi	r2,r23,-1
   13724:	1007883a 	mov	r3,r2
   13728:	01400e44 	movi	r5,57
   1372c:	d9800717 	ldw	r6,28(sp)
   13730:	00000506 	br	13748 <_dtoa_r+0x974>
   13734:	18ffffc4 	addi	r3,r3,-1
   13738:	11824726 	beq	r2,r6,14058 <_dtoa_r+0x1284>
   1373c:	1d000003 	ldbu	r20,0(r3)
   13740:	102f883a 	mov	r23,r2
   13744:	10bfffc4 	addi	r2,r2,-1
   13748:	a1003fcc 	andi	r4,r20,255
   1374c:	2100201c 	xori	r4,r4,128
   13750:	213fe004 	addi	r4,r4,-128
   13754:	217ff726 	beq	r4,r5,13734 <__alt_data_end+0xfc013734>
   13758:	a2000044 	addi	r8,r20,1
   1375c:	12000005 	stb	r8,0(r2)
   13760:	003f4606 	br	1347c <__alt_data_end+0xfc01347c>
   13764:	d9000b17 	ldw	r4,44(sp)
   13768:	2000c826 	beq	r4,zero,13a8c <_dtoa_r+0xcb8>
   1376c:	d9800317 	ldw	r6,12(sp)
   13770:	00c00044 	movi	r3,1
   13774:	1980f90e 	bge	r3,r6,13b5c <_dtoa_r+0xd88>
   13778:	d8800617 	ldw	r2,24(sp)
   1377c:	d8c00a17 	ldw	r3,40(sp)
   13780:	157fffc4 	addi	r21,r2,-1
   13784:	1d41f316 	blt	r3,r21,13f54 <_dtoa_r+0x1180>
   13788:	1d6bc83a 	sub	r21,r3,r21
   1378c:	d9c00617 	ldw	r7,24(sp)
   13790:	3802aa16 	blt	r7,zero,1423c <_dtoa_r+0x1468>
   13794:	dd000817 	ldw	r20,32(sp)
   13798:	d8800617 	ldw	r2,24(sp)
   1379c:	d8c00817 	ldw	r3,32(sp)
   137a0:	01400044 	movi	r5,1
   137a4:	e009883a 	mov	r4,fp
   137a8:	1887883a 	add	r3,r3,r2
   137ac:	d8c00815 	stw	r3,32(sp)
   137b0:	b0ad883a 	add	r22,r22,r2
   137b4:	0015e440 	call	15e44 <__i2b>
   137b8:	1023883a 	mov	r17,r2
   137bc:	a0000826 	beq	r20,zero,137e0 <_dtoa_r+0xa0c>
   137c0:	0580070e 	bge	zero,r22,137e0 <_dtoa_r+0xa0c>
   137c4:	a005883a 	mov	r2,r20
   137c8:	b500b916 	blt	r22,r20,13ab0 <_dtoa_r+0xcdc>
   137cc:	d9000817 	ldw	r4,32(sp)
   137d0:	a0a9c83a 	sub	r20,r20,r2
   137d4:	b0adc83a 	sub	r22,r22,r2
   137d8:	2089c83a 	sub	r4,r4,r2
   137dc:	d9000815 	stw	r4,32(sp)
   137e0:	d9800a17 	ldw	r6,40(sp)
   137e4:	0181810e 	bge	zero,r6,13dec <_dtoa_r+0x1018>
   137e8:	d9c00b17 	ldw	r7,44(sp)
   137ec:	3800b326 	beq	r7,zero,13abc <_dtoa_r+0xce8>
   137f0:	a800b226 	beq	r21,zero,13abc <_dtoa_r+0xce8>
   137f4:	880b883a 	mov	r5,r17
   137f8:	a80d883a 	mov	r6,r21
   137fc:	e009883a 	mov	r4,fp
   13800:	001610c0 	call	1610c <__pow5mult>
   13804:	d9800917 	ldw	r6,36(sp)
   13808:	100b883a 	mov	r5,r2
   1380c:	e009883a 	mov	r4,fp
   13810:	1023883a 	mov	r17,r2
   13814:	0015e800 	call	15e80 <__multiply>
   13818:	1021883a 	mov	r16,r2
   1381c:	d8800a17 	ldw	r2,40(sp)
   13820:	d9400917 	ldw	r5,36(sp)
   13824:	e009883a 	mov	r4,fp
   13828:	1545c83a 	sub	r2,r2,r21
   1382c:	d8800a15 	stw	r2,40(sp)
   13830:	0015ab80 	call	15ab8 <_Bfree>
   13834:	d8c00a17 	ldw	r3,40(sp)
   13838:	18009f1e 	bne	r3,zero,13ab8 <_dtoa_r+0xce4>
   1383c:	05c00044 	movi	r23,1
   13840:	e009883a 	mov	r4,fp
   13844:	b80b883a 	mov	r5,r23
   13848:	0015e440 	call	15e44 <__i2b>
   1384c:	d9000d17 	ldw	r4,52(sp)
   13850:	102b883a 	mov	r21,r2
   13854:	2000ce26 	beq	r4,zero,13b90 <_dtoa_r+0xdbc>
   13858:	200d883a 	mov	r6,r4
   1385c:	100b883a 	mov	r5,r2
   13860:	e009883a 	mov	r4,fp
   13864:	001610c0 	call	1610c <__pow5mult>
   13868:	d9800317 	ldw	r6,12(sp)
   1386c:	102b883a 	mov	r21,r2
   13870:	b981810e 	bge	r23,r6,13e78 <_dtoa_r+0x10a4>
   13874:	0027883a 	mov	r19,zero
   13878:	a8800417 	ldw	r2,16(r21)
   1387c:	05c00804 	movi	r23,32
   13880:	10800104 	addi	r2,r2,4
   13884:	1085883a 	add	r2,r2,r2
   13888:	1085883a 	add	r2,r2,r2
   1388c:	a885883a 	add	r2,r21,r2
   13890:	11000017 	ldw	r4,0(r2)
   13894:	0015d2c0 	call	15d2c <__hi0bits>
   13898:	b885c83a 	sub	r2,r23,r2
   1389c:	1585883a 	add	r2,r2,r22
   138a0:	108007cc 	andi	r2,r2,31
   138a4:	1000b326 	beq	r2,zero,13b74 <_dtoa_r+0xda0>
   138a8:	00c00804 	movi	r3,32
   138ac:	1887c83a 	sub	r3,r3,r2
   138b0:	01000104 	movi	r4,4
   138b4:	20c2cd0e 	bge	r4,r3,143ec <_dtoa_r+0x1618>
   138b8:	00c00704 	movi	r3,28
   138bc:	1885c83a 	sub	r2,r3,r2
   138c0:	d8c00817 	ldw	r3,32(sp)
   138c4:	a0a9883a 	add	r20,r20,r2
   138c8:	b0ad883a 	add	r22,r22,r2
   138cc:	1887883a 	add	r3,r3,r2
   138d0:	d8c00815 	stw	r3,32(sp)
   138d4:	d9800817 	ldw	r6,32(sp)
   138d8:	0180040e 	bge	zero,r6,138ec <_dtoa_r+0xb18>
   138dc:	800b883a 	mov	r5,r16
   138e0:	e009883a 	mov	r4,fp
   138e4:	001624c0 	call	1624c <__lshift>
   138e8:	1021883a 	mov	r16,r2
   138ec:	0580050e 	bge	zero,r22,13904 <_dtoa_r+0xb30>
   138f0:	a80b883a 	mov	r5,r21
   138f4:	b00d883a 	mov	r6,r22
   138f8:	e009883a 	mov	r4,fp
   138fc:	001624c0 	call	1624c <__lshift>
   13900:	102b883a 	mov	r21,r2
   13904:	d9c00e17 	ldw	r7,56(sp)
   13908:	3801211e 	bne	r7,zero,13d90 <_dtoa_r+0xfbc>
   1390c:	d9800617 	ldw	r6,24(sp)
   13910:	0181380e 	bge	zero,r6,13df4 <_dtoa_r+0x1020>
   13914:	d8c00b17 	ldw	r3,44(sp)
   13918:	1800ab1e 	bne	r3,zero,13bc8 <_dtoa_r+0xdf4>
   1391c:	dc800717 	ldw	r18,28(sp)
   13920:	dcc00617 	ldw	r19,24(sp)
   13924:	9029883a 	mov	r20,r18
   13928:	00000206 	br	13934 <_dtoa_r+0xb60>
   1392c:	0015ae00 	call	15ae0 <__multadd>
   13930:	1021883a 	mov	r16,r2
   13934:	a80b883a 	mov	r5,r21
   13938:	8009883a 	mov	r4,r16
   1393c:	0012bac0 	call	12bac <quorem>
   13940:	10800c04 	addi	r2,r2,48
   13944:	90800005 	stb	r2,0(r18)
   13948:	94800044 	addi	r18,r18,1
   1394c:	9507c83a 	sub	r3,r18,r20
   13950:	000f883a 	mov	r7,zero
   13954:	01800284 	movi	r6,10
   13958:	800b883a 	mov	r5,r16
   1395c:	e009883a 	mov	r4,fp
   13960:	1cfff216 	blt	r3,r19,1392c <__alt_data_end+0xfc01392c>
   13964:	1011883a 	mov	r8,r2
   13968:	d8800617 	ldw	r2,24(sp)
   1396c:	0082370e 	bge	zero,r2,1424c <_dtoa_r+0x1478>
   13970:	d9000717 	ldw	r4,28(sp)
   13974:	0025883a 	mov	r18,zero
   13978:	20af883a 	add	r23,r4,r2
   1397c:	01800044 	movi	r6,1
   13980:	800b883a 	mov	r5,r16
   13984:	e009883a 	mov	r4,fp
   13988:	da001715 	stw	r8,92(sp)
   1398c:	001624c0 	call	1624c <__lshift>
   13990:	a80b883a 	mov	r5,r21
   13994:	1009883a 	mov	r4,r2
   13998:	d8800915 	stw	r2,36(sp)
   1399c:	00163940 	call	16394 <__mcmp>
   139a0:	da001717 	ldw	r8,92(sp)
   139a4:	0081800e 	bge	zero,r2,13fa8 <_dtoa_r+0x11d4>
   139a8:	b93fffc3 	ldbu	r4,-1(r23)
   139ac:	b8bfffc4 	addi	r2,r23,-1
   139b0:	1007883a 	mov	r3,r2
   139b4:	01800e44 	movi	r6,57
   139b8:	d9c00717 	ldw	r7,28(sp)
   139bc:	00000506 	br	139d4 <_dtoa_r+0xc00>
   139c0:	18ffffc4 	addi	r3,r3,-1
   139c4:	11c12326 	beq	r2,r7,13e54 <_dtoa_r+0x1080>
   139c8:	19000003 	ldbu	r4,0(r3)
   139cc:	102f883a 	mov	r23,r2
   139d0:	10bfffc4 	addi	r2,r2,-1
   139d4:	21403fcc 	andi	r5,r4,255
   139d8:	2940201c 	xori	r5,r5,128
   139dc:	297fe004 	addi	r5,r5,-128
   139e0:	29bff726 	beq	r5,r6,139c0 <__alt_data_end+0xfc0139c0>
   139e4:	21000044 	addi	r4,r4,1
   139e8:	11000005 	stb	r4,0(r2)
   139ec:	a80b883a 	mov	r5,r21
   139f0:	e009883a 	mov	r4,fp
   139f4:	0015ab80 	call	15ab8 <_Bfree>
   139f8:	883ea026 	beq	r17,zero,1347c <__alt_data_end+0xfc01347c>
   139fc:	90000426 	beq	r18,zero,13a10 <_dtoa_r+0xc3c>
   13a00:	94400326 	beq	r18,r17,13a10 <_dtoa_r+0xc3c>
   13a04:	900b883a 	mov	r5,r18
   13a08:	e009883a 	mov	r4,fp
   13a0c:	0015ab80 	call	15ab8 <_Bfree>
   13a10:	880b883a 	mov	r5,r17
   13a14:	e009883a 	mov	r4,fp
   13a18:	0015ab80 	call	15ab8 <_Bfree>
   13a1c:	003e9706 	br	1347c <__alt_data_end+0xfc01347c>
   13a20:	01800044 	movi	r6,1
   13a24:	d9800e15 	stw	r6,56(sp)
   13a28:	003d9606 	br	13084 <__alt_data_end+0xfc013084>
   13a2c:	d8800817 	ldw	r2,32(sp)
   13a30:	d8c00517 	ldw	r3,20(sp)
   13a34:	d8000d15 	stw	zero,52(sp)
   13a38:	10c5c83a 	sub	r2,r2,r3
   13a3c:	00c9c83a 	sub	r4,zero,r3
   13a40:	d8800815 	stw	r2,32(sp)
   13a44:	d9000a15 	stw	r4,40(sp)
   13a48:	003d9706 	br	130a8 <__alt_data_end+0xfc0130a8>
   13a4c:	05adc83a 	sub	r22,zero,r22
   13a50:	dd800815 	stw	r22,32(sp)
   13a54:	002d883a 	mov	r22,zero
   13a58:	003d8e06 	br	13094 <__alt_data_end+0xfc013094>
   13a5c:	d9000517 	ldw	r4,20(sp)
   13a60:	001db740 	call	1db74 <__floatsidf>
   13a64:	100d883a 	mov	r6,r2
   13a68:	180f883a 	mov	r7,r3
   13a6c:	a009883a 	mov	r4,r20
   13a70:	880b883a 	mov	r5,r17
   13a74:	001c7340 	call	1c734 <__eqdf2>
   13a78:	103d7126 	beq	r2,zero,13040 <__alt_data_end+0xfc013040>
   13a7c:	d9c00517 	ldw	r7,20(sp)
   13a80:	39ffffc4 	addi	r7,r7,-1
   13a84:	d9c00515 	stw	r7,20(sp)
   13a88:	003d6d06 	br	13040 <__alt_data_end+0xfc013040>
   13a8c:	dd400a17 	ldw	r21,40(sp)
   13a90:	dd000817 	ldw	r20,32(sp)
   13a94:	0023883a 	mov	r17,zero
   13a98:	003f4806 	br	137bc <__alt_data_end+0xfc0137bc>
   13a9c:	10e3c83a 	sub	r17,r2,r3
   13aa0:	9448983a 	sll	r4,r18,r17
   13aa4:	003d3206 	br	12f70 <__alt_data_end+0xfc012f70>
   13aa8:	d8000e15 	stw	zero,56(sp)
   13aac:	003d7506 	br	13084 <__alt_data_end+0xfc013084>
   13ab0:	b005883a 	mov	r2,r22
   13ab4:	003f4506 	br	137cc <__alt_data_end+0xfc0137cc>
   13ab8:	dc000915 	stw	r16,36(sp)
   13abc:	d9800a17 	ldw	r6,40(sp)
   13ac0:	d9400917 	ldw	r5,36(sp)
   13ac4:	e009883a 	mov	r4,fp
   13ac8:	001610c0 	call	1610c <__pow5mult>
   13acc:	1021883a 	mov	r16,r2
   13ad0:	003f5a06 	br	1383c <__alt_data_end+0xfc01383c>
   13ad4:	01c00044 	movi	r7,1
   13ad8:	d9c00b15 	stw	r7,44(sp)
   13adc:	d8802217 	ldw	r2,136(sp)
   13ae0:	0081280e 	bge	zero,r2,13f84 <_dtoa_r+0x11b0>
   13ae4:	100d883a 	mov	r6,r2
   13ae8:	1021883a 	mov	r16,r2
   13aec:	d8800c15 	stw	r2,48(sp)
   13af0:	d8800615 	stw	r2,24(sp)
   13af4:	003d8806 	br	13118 <__alt_data_end+0xfc013118>
   13af8:	d8800617 	ldw	r2,24(sp)
   13afc:	00be9b16 	blt	zero,r2,1356c <__alt_data_end+0xfc01356c>
   13b00:	10010f1e 	bne	r2,zero,13f40 <_dtoa_r+0x116c>
   13b04:	880b883a 	mov	r5,r17
   13b08:	000d883a 	mov	r6,zero
   13b0c:	01d00534 	movhi	r7,16404
   13b10:	8009883a 	mov	r4,r16
   13b14:	001c98c0 	call	1c98c <__muldf3>
   13b18:	900d883a 	mov	r6,r18
   13b1c:	980f883a 	mov	r7,r19
   13b20:	1009883a 	mov	r4,r2
   13b24:	180b883a 	mov	r5,r3
   13b28:	001c7bc0 	call	1c7bc <__gedf2>
   13b2c:	002b883a 	mov	r21,zero
   13b30:	0023883a 	mov	r17,zero
   13b34:	1000bf16 	blt	r2,zero,13e34 <_dtoa_r+0x1060>
   13b38:	d9802217 	ldw	r6,136(sp)
   13b3c:	ddc00717 	ldw	r23,28(sp)
   13b40:	018c303a 	nor	r6,zero,r6
   13b44:	d9800515 	stw	r6,20(sp)
   13b48:	a80b883a 	mov	r5,r21
   13b4c:	e009883a 	mov	r4,fp
   13b50:	0015ab80 	call	15ab8 <_Bfree>
   13b54:	883e4926 	beq	r17,zero,1347c <__alt_data_end+0xfc01347c>
   13b58:	003fad06 	br	13a10 <__alt_data_end+0xfc013a10>
   13b5c:	d9c01117 	ldw	r7,68(sp)
   13b60:	3801bc26 	beq	r7,zero,14254 <_dtoa_r+0x1480>
   13b64:	10810cc4 	addi	r2,r2,1075
   13b68:	dd400a17 	ldw	r21,40(sp)
   13b6c:	dd000817 	ldw	r20,32(sp)
   13b70:	003f0a06 	br	1379c <__alt_data_end+0xfc01379c>
   13b74:	00800704 	movi	r2,28
   13b78:	d9000817 	ldw	r4,32(sp)
   13b7c:	a0a9883a 	add	r20,r20,r2
   13b80:	b0ad883a 	add	r22,r22,r2
   13b84:	2089883a 	add	r4,r4,r2
   13b88:	d9000815 	stw	r4,32(sp)
   13b8c:	003f5106 	br	138d4 <__alt_data_end+0xfc0138d4>
   13b90:	d8c00317 	ldw	r3,12(sp)
   13b94:	b8c1fc0e 	bge	r23,r3,14388 <_dtoa_r+0x15b4>
   13b98:	0027883a 	mov	r19,zero
   13b9c:	b805883a 	mov	r2,r23
   13ba0:	003f3e06 	br	1389c <__alt_data_end+0xfc01389c>
   13ba4:	880b883a 	mov	r5,r17
   13ba8:	e009883a 	mov	r4,fp
   13bac:	000f883a 	mov	r7,zero
   13bb0:	01800284 	movi	r6,10
   13bb4:	0015ae00 	call	15ae0 <__multadd>
   13bb8:	d9000c17 	ldw	r4,48(sp)
   13bbc:	1023883a 	mov	r17,r2
   13bc0:	0102040e 	bge	zero,r4,143d4 <_dtoa_r+0x1600>
   13bc4:	d9000615 	stw	r4,24(sp)
   13bc8:	0500050e 	bge	zero,r20,13be0 <_dtoa_r+0xe0c>
   13bcc:	880b883a 	mov	r5,r17
   13bd0:	a00d883a 	mov	r6,r20
   13bd4:	e009883a 	mov	r4,fp
   13bd8:	001624c0 	call	1624c <__lshift>
   13bdc:	1023883a 	mov	r17,r2
   13be0:	9801241e 	bne	r19,zero,14074 <_dtoa_r+0x12a0>
   13be4:	8829883a 	mov	r20,r17
   13be8:	d9000617 	ldw	r4,24(sp)
   13bec:	dcc00717 	ldw	r19,28(sp)
   13bf0:	9480004c 	andi	r18,r18,1
   13bf4:	20bfffc4 	addi	r2,r4,-1
   13bf8:	9885883a 	add	r2,r19,r2
   13bfc:	d8800415 	stw	r2,16(sp)
   13c00:	dc800615 	stw	r18,24(sp)
   13c04:	a80b883a 	mov	r5,r21
   13c08:	8009883a 	mov	r4,r16
   13c0c:	0012bac0 	call	12bac <quorem>
   13c10:	880b883a 	mov	r5,r17
   13c14:	8009883a 	mov	r4,r16
   13c18:	102f883a 	mov	r23,r2
   13c1c:	00163940 	call	16394 <__mcmp>
   13c20:	a80b883a 	mov	r5,r21
   13c24:	a00d883a 	mov	r6,r20
   13c28:	e009883a 	mov	r4,fp
   13c2c:	102d883a 	mov	r22,r2
   13c30:	00163f40 	call	163f4 <__mdiff>
   13c34:	1007883a 	mov	r3,r2
   13c38:	10800317 	ldw	r2,12(r2)
   13c3c:	bc800c04 	addi	r18,r23,48
   13c40:	180b883a 	mov	r5,r3
   13c44:	10004e1e 	bne	r2,zero,13d80 <_dtoa_r+0xfac>
   13c48:	8009883a 	mov	r4,r16
   13c4c:	d8c01615 	stw	r3,88(sp)
   13c50:	00163940 	call	16394 <__mcmp>
   13c54:	d8c01617 	ldw	r3,88(sp)
   13c58:	e009883a 	mov	r4,fp
   13c5c:	d8801615 	stw	r2,88(sp)
   13c60:	180b883a 	mov	r5,r3
   13c64:	0015ab80 	call	15ab8 <_Bfree>
   13c68:	d8801617 	ldw	r2,88(sp)
   13c6c:	1000041e 	bne	r2,zero,13c80 <_dtoa_r+0xeac>
   13c70:	d9800317 	ldw	r6,12(sp)
   13c74:	3000021e 	bne	r6,zero,13c80 <_dtoa_r+0xeac>
   13c78:	d8c00617 	ldw	r3,24(sp)
   13c7c:	18003726 	beq	r3,zero,13d5c <_dtoa_r+0xf88>
   13c80:	b0002016 	blt	r22,zero,13d04 <_dtoa_r+0xf30>
   13c84:	b000041e 	bne	r22,zero,13c98 <_dtoa_r+0xec4>
   13c88:	d9000317 	ldw	r4,12(sp)
   13c8c:	2000021e 	bne	r4,zero,13c98 <_dtoa_r+0xec4>
   13c90:	d8c00617 	ldw	r3,24(sp)
   13c94:	18001b26 	beq	r3,zero,13d04 <_dtoa_r+0xf30>
   13c98:	00810716 	blt	zero,r2,140b8 <_dtoa_r+0x12e4>
   13c9c:	d8c00417 	ldw	r3,16(sp)
   13ca0:	9d800044 	addi	r22,r19,1
   13ca4:	9c800005 	stb	r18,0(r19)
   13ca8:	b02f883a 	mov	r23,r22
   13cac:	98c10626 	beq	r19,r3,140c8 <_dtoa_r+0x12f4>
   13cb0:	800b883a 	mov	r5,r16
   13cb4:	000f883a 	mov	r7,zero
   13cb8:	01800284 	movi	r6,10
   13cbc:	e009883a 	mov	r4,fp
   13cc0:	0015ae00 	call	15ae0 <__multadd>
   13cc4:	1021883a 	mov	r16,r2
   13cc8:	000f883a 	mov	r7,zero
   13ccc:	01800284 	movi	r6,10
   13cd0:	880b883a 	mov	r5,r17
   13cd4:	e009883a 	mov	r4,fp
   13cd8:	8d002526 	beq	r17,r20,13d70 <_dtoa_r+0xf9c>
   13cdc:	0015ae00 	call	15ae0 <__multadd>
   13ce0:	a00b883a 	mov	r5,r20
   13ce4:	000f883a 	mov	r7,zero
   13ce8:	01800284 	movi	r6,10
   13cec:	e009883a 	mov	r4,fp
   13cf0:	1023883a 	mov	r17,r2
   13cf4:	0015ae00 	call	15ae0 <__multadd>
   13cf8:	1029883a 	mov	r20,r2
   13cfc:	b027883a 	mov	r19,r22
   13d00:	003fc006 	br	13c04 <__alt_data_end+0xfc013c04>
   13d04:	9011883a 	mov	r8,r18
   13d08:	00800e0e 	bge	zero,r2,13d44 <_dtoa_r+0xf70>
   13d0c:	800b883a 	mov	r5,r16
   13d10:	01800044 	movi	r6,1
   13d14:	e009883a 	mov	r4,fp
   13d18:	da001715 	stw	r8,92(sp)
   13d1c:	001624c0 	call	1624c <__lshift>
   13d20:	a80b883a 	mov	r5,r21
   13d24:	1009883a 	mov	r4,r2
   13d28:	1021883a 	mov	r16,r2
   13d2c:	00163940 	call	16394 <__mcmp>
   13d30:	da001717 	ldw	r8,92(sp)
   13d34:	0081960e 	bge	zero,r2,14390 <_dtoa_r+0x15bc>
   13d38:	00800e44 	movi	r2,57
   13d3c:	40817026 	beq	r8,r2,14300 <_dtoa_r+0x152c>
   13d40:	ba000c44 	addi	r8,r23,49
   13d44:	8825883a 	mov	r18,r17
   13d48:	9dc00044 	addi	r23,r19,1
   13d4c:	9a000005 	stb	r8,0(r19)
   13d50:	a023883a 	mov	r17,r20
   13d54:	dc000915 	stw	r16,36(sp)
   13d58:	003f2406 	br	139ec <__alt_data_end+0xfc0139ec>
   13d5c:	00800e44 	movi	r2,57
   13d60:	9011883a 	mov	r8,r18
   13d64:	90816626 	beq	r18,r2,14300 <_dtoa_r+0x152c>
   13d68:	05bff516 	blt	zero,r22,13d40 <__alt_data_end+0xfc013d40>
   13d6c:	003ff506 	br	13d44 <__alt_data_end+0xfc013d44>
   13d70:	0015ae00 	call	15ae0 <__multadd>
   13d74:	1023883a 	mov	r17,r2
   13d78:	1029883a 	mov	r20,r2
   13d7c:	003fdf06 	br	13cfc <__alt_data_end+0xfc013cfc>
   13d80:	e009883a 	mov	r4,fp
   13d84:	0015ab80 	call	15ab8 <_Bfree>
   13d88:	00800044 	movi	r2,1
   13d8c:	003fbc06 	br	13c80 <__alt_data_end+0xfc013c80>
   13d90:	a80b883a 	mov	r5,r21
   13d94:	8009883a 	mov	r4,r16
   13d98:	00163940 	call	16394 <__mcmp>
   13d9c:	103edb0e 	bge	r2,zero,1390c <__alt_data_end+0xfc01390c>
   13da0:	800b883a 	mov	r5,r16
   13da4:	000f883a 	mov	r7,zero
   13da8:	01800284 	movi	r6,10
   13dac:	e009883a 	mov	r4,fp
   13db0:	0015ae00 	call	15ae0 <__multadd>
   13db4:	1021883a 	mov	r16,r2
   13db8:	d8800517 	ldw	r2,20(sp)
   13dbc:	d8c00b17 	ldw	r3,44(sp)
   13dc0:	10bfffc4 	addi	r2,r2,-1
   13dc4:	d8800515 	stw	r2,20(sp)
   13dc8:	183f761e 	bne	r3,zero,13ba4 <__alt_data_end+0xfc013ba4>
   13dcc:	d9000c17 	ldw	r4,48(sp)
   13dd0:	0101730e 	bge	zero,r4,143a0 <_dtoa_r+0x15cc>
   13dd4:	d9000615 	stw	r4,24(sp)
   13dd8:	003ed006 	br	1391c <__alt_data_end+0xfc01391c>
   13ddc:	00800084 	movi	r2,2
   13de0:	3081861e 	bne	r6,r2,143fc <_dtoa_r+0x1628>
   13de4:	d8000b15 	stw	zero,44(sp)
   13de8:	003f3c06 	br	13adc <__alt_data_end+0xfc013adc>
   13dec:	dc000917 	ldw	r16,36(sp)
   13df0:	003e9206 	br	1383c <__alt_data_end+0xfc01383c>
   13df4:	d9c00317 	ldw	r7,12(sp)
   13df8:	00800084 	movi	r2,2
   13dfc:	11fec50e 	bge	r2,r7,13914 <__alt_data_end+0xfc013914>
   13e00:	d9000617 	ldw	r4,24(sp)
   13e04:	20013c1e 	bne	r4,zero,142f8 <_dtoa_r+0x1524>
   13e08:	a80b883a 	mov	r5,r21
   13e0c:	000f883a 	mov	r7,zero
   13e10:	01800144 	movi	r6,5
   13e14:	e009883a 	mov	r4,fp
   13e18:	0015ae00 	call	15ae0 <__multadd>
   13e1c:	100b883a 	mov	r5,r2
   13e20:	8009883a 	mov	r4,r16
   13e24:	102b883a 	mov	r21,r2
   13e28:	00163940 	call	16394 <__mcmp>
   13e2c:	dc000915 	stw	r16,36(sp)
   13e30:	00bf410e 	bge	zero,r2,13b38 <__alt_data_end+0xfc013b38>
   13e34:	d9c00717 	ldw	r7,28(sp)
   13e38:	00800c44 	movi	r2,49
   13e3c:	38800005 	stb	r2,0(r7)
   13e40:	d8800517 	ldw	r2,20(sp)
   13e44:	3dc00044 	addi	r23,r7,1
   13e48:	10800044 	addi	r2,r2,1
   13e4c:	d8800515 	stw	r2,20(sp)
   13e50:	003f3d06 	br	13b48 <__alt_data_end+0xfc013b48>
   13e54:	d9800517 	ldw	r6,20(sp)
   13e58:	d9c00717 	ldw	r7,28(sp)
   13e5c:	00800c44 	movi	r2,49
   13e60:	31800044 	addi	r6,r6,1
   13e64:	d9800515 	stw	r6,20(sp)
   13e68:	38800005 	stb	r2,0(r7)
   13e6c:	003edf06 	br	139ec <__alt_data_end+0xfc0139ec>
   13e70:	d8000b15 	stw	zero,44(sp)
   13e74:	003c9f06 	br	130f4 <__alt_data_end+0xfc0130f4>
   13e78:	903e7e1e 	bne	r18,zero,13874 <__alt_data_end+0xfc013874>
   13e7c:	00800434 	movhi	r2,16
   13e80:	10bfffc4 	addi	r2,r2,-1
   13e84:	9884703a 	and	r2,r19,r2
   13e88:	1000ea1e 	bne	r2,zero,14234 <_dtoa_r+0x1460>
   13e8c:	9cdffc2c 	andhi	r19,r19,32752
   13e90:	9800e826 	beq	r19,zero,14234 <_dtoa_r+0x1460>
   13e94:	d9c00817 	ldw	r7,32(sp)
   13e98:	b5800044 	addi	r22,r22,1
   13e9c:	04c00044 	movi	r19,1
   13ea0:	39c00044 	addi	r7,r7,1
   13ea4:	d9c00815 	stw	r7,32(sp)
   13ea8:	d8800d17 	ldw	r2,52(sp)
   13eac:	103e721e 	bne	r2,zero,13878 <__alt_data_end+0xfc013878>
   13eb0:	00800044 	movi	r2,1
   13eb4:	003e7906 	br	1389c <__alt_data_end+0xfc01389c>
   13eb8:	8009883a 	mov	r4,r16
   13ebc:	001db740 	call	1db74 <__floatsidf>
   13ec0:	d9800f17 	ldw	r6,60(sp)
   13ec4:	d9c01017 	ldw	r7,64(sp)
   13ec8:	1009883a 	mov	r4,r2
   13ecc:	180b883a 	mov	r5,r3
   13ed0:	001c98c0 	call	1c98c <__muldf3>
   13ed4:	000d883a 	mov	r6,zero
   13ed8:	01d00734 	movhi	r7,16412
   13edc:	1009883a 	mov	r4,r2
   13ee0:	180b883a 	mov	r5,r3
   13ee4:	001b4b80 	call	1b4b8 <__adddf3>
   13ee8:	047f3034 	movhi	r17,64704
   13eec:	1021883a 	mov	r16,r2
   13ef0:	1c63883a 	add	r17,r3,r17
   13ef4:	d9000f17 	ldw	r4,60(sp)
   13ef8:	d9401017 	ldw	r5,64(sp)
   13efc:	000d883a 	mov	r6,zero
   13f00:	01d00534 	movhi	r7,16404
   13f04:	001d1f80 	call	1d1f8 <__subdf3>
   13f08:	800d883a 	mov	r6,r16
   13f0c:	880f883a 	mov	r7,r17
   13f10:	1009883a 	mov	r4,r2
   13f14:	180b883a 	mov	r5,r3
   13f18:	102b883a 	mov	r21,r2
   13f1c:	1829883a 	mov	r20,r3
   13f20:	001c7bc0 	call	1c7bc <__gedf2>
   13f24:	00806c16 	blt	zero,r2,140d8 <_dtoa_r+0x1304>
   13f28:	89e0003c 	xorhi	r7,r17,32768
   13f2c:	800d883a 	mov	r6,r16
   13f30:	a809883a 	mov	r4,r21
   13f34:	a00b883a 	mov	r5,r20
   13f38:	001c8980 	call	1c898 <__ledf2>
   13f3c:	103d7e0e 	bge	r2,zero,13538 <__alt_data_end+0xfc013538>
   13f40:	002b883a 	mov	r21,zero
   13f44:	0023883a 	mov	r17,zero
   13f48:	003efb06 	br	13b38 <__alt_data_end+0xfc013b38>
   13f4c:	d8800717 	ldw	r2,28(sp)
   13f50:	003bd006 	br	12e94 <__alt_data_end+0xfc012e94>
   13f54:	d9000a17 	ldw	r4,40(sp)
   13f58:	d9800d17 	ldw	r6,52(sp)
   13f5c:	dd400a15 	stw	r21,40(sp)
   13f60:	a905c83a 	sub	r2,r21,r4
   13f64:	308d883a 	add	r6,r6,r2
   13f68:	d9800d15 	stw	r6,52(sp)
   13f6c:	002b883a 	mov	r21,zero
   13f70:	003e0606 	br	1378c <__alt_data_end+0xfc01378c>
   13f74:	9023883a 	mov	r17,r18
   13f78:	9829883a 	mov	r20,r19
   13f7c:	04000084 	movi	r16,2
   13f80:	003c9206 	br	131cc <__alt_data_end+0xfc0131cc>
   13f84:	04000044 	movi	r16,1
   13f88:	dc000c15 	stw	r16,48(sp)
   13f8c:	dc000615 	stw	r16,24(sp)
   13f90:	dc002215 	stw	r16,136(sp)
   13f94:	e0001115 	stw	zero,68(fp)
   13f98:	000b883a 	mov	r5,zero
   13f9c:	003c6906 	br	13144 <__alt_data_end+0xfc013144>
   13fa0:	3021883a 	mov	r16,r6
   13fa4:	003ffb06 	br	13f94 <__alt_data_end+0xfc013f94>
   13fa8:	1000021e 	bne	r2,zero,13fb4 <_dtoa_r+0x11e0>
   13fac:	4200004c 	andi	r8,r8,1
   13fb0:	403e7d1e 	bne	r8,zero,139a8 <__alt_data_end+0xfc0139a8>
   13fb4:	01000c04 	movi	r4,48
   13fb8:	00000106 	br	13fc0 <_dtoa_r+0x11ec>
   13fbc:	102f883a 	mov	r23,r2
   13fc0:	b8bfffc4 	addi	r2,r23,-1
   13fc4:	10c00007 	ldb	r3,0(r2)
   13fc8:	193ffc26 	beq	r3,r4,13fbc <__alt_data_end+0xfc013fbc>
   13fcc:	003e8706 	br	139ec <__alt_data_end+0xfc0139ec>
   13fd0:	d8800517 	ldw	r2,20(sp)
   13fd4:	00a3c83a 	sub	r17,zero,r2
   13fd8:	8800a426 	beq	r17,zero,1426c <_dtoa_r+0x1498>
   13fdc:	888003cc 	andi	r2,r17,15
   13fe0:	100490fa 	slli	r2,r2,3
   13fe4:	00c000f4 	movhi	r3,3
   13fe8:	18e59504 	addi	r3,r3,-27052
   13fec:	1885883a 	add	r2,r3,r2
   13ff0:	11800017 	ldw	r6,0(r2)
   13ff4:	11c00117 	ldw	r7,4(r2)
   13ff8:	9009883a 	mov	r4,r18
   13ffc:	980b883a 	mov	r5,r19
   14000:	8823d13a 	srai	r17,r17,4
   14004:	001c98c0 	call	1c98c <__muldf3>
   14008:	d8800f15 	stw	r2,60(sp)
   1400c:	d8c01015 	stw	r3,64(sp)
   14010:	8800e826 	beq	r17,zero,143b4 <_dtoa_r+0x15e0>
   14014:	050000f4 	movhi	r20,3
   14018:	a5258b04 	addi	r20,r20,-27092
   1401c:	04000084 	movi	r16,2
   14020:	8980004c 	andi	r6,r17,1
   14024:	1009883a 	mov	r4,r2
   14028:	8823d07a 	srai	r17,r17,1
   1402c:	180b883a 	mov	r5,r3
   14030:	30000426 	beq	r6,zero,14044 <_dtoa_r+0x1270>
   14034:	a1800017 	ldw	r6,0(r20)
   14038:	a1c00117 	ldw	r7,4(r20)
   1403c:	84000044 	addi	r16,r16,1
   14040:	001c98c0 	call	1c98c <__muldf3>
   14044:	a5000204 	addi	r20,r20,8
   14048:	883ff51e 	bne	r17,zero,14020 <__alt_data_end+0xfc014020>
   1404c:	d8800f15 	stw	r2,60(sp)
   14050:	d8c01015 	stw	r3,64(sp)
   14054:	003c7606 	br	13230 <__alt_data_end+0xfc013230>
   14058:	00c00c04 	movi	r3,48
   1405c:	10c00005 	stb	r3,0(r2)
   14060:	d8c00517 	ldw	r3,20(sp)
   14064:	bd3fffc3 	ldbu	r20,-1(r23)
   14068:	18c00044 	addi	r3,r3,1
   1406c:	d8c00515 	stw	r3,20(sp)
   14070:	003db906 	br	13758 <__alt_data_end+0xfc013758>
   14074:	89400117 	ldw	r5,4(r17)
   14078:	e009883a 	mov	r4,fp
   1407c:	0015a100 	call	15a10 <_Balloc>
   14080:	89800417 	ldw	r6,16(r17)
   14084:	89400304 	addi	r5,r17,12
   14088:	11000304 	addi	r4,r2,12
   1408c:	31800084 	addi	r6,r6,2
   14090:	318d883a 	add	r6,r6,r6
   14094:	318d883a 	add	r6,r6,r6
   14098:	1027883a 	mov	r19,r2
   1409c:	000da800 	call	da80 <memcpy>
   140a0:	01800044 	movi	r6,1
   140a4:	980b883a 	mov	r5,r19
   140a8:	e009883a 	mov	r4,fp
   140ac:	001624c0 	call	1624c <__lshift>
   140b0:	1029883a 	mov	r20,r2
   140b4:	003ecc06 	br	13be8 <__alt_data_end+0xfc013be8>
   140b8:	00800e44 	movi	r2,57
   140bc:	90809026 	beq	r18,r2,14300 <_dtoa_r+0x152c>
   140c0:	92000044 	addi	r8,r18,1
   140c4:	003f1f06 	br	13d44 <__alt_data_end+0xfc013d44>
   140c8:	9011883a 	mov	r8,r18
   140cc:	8825883a 	mov	r18,r17
   140d0:	a023883a 	mov	r17,r20
   140d4:	003e2906 	br	1397c <__alt_data_end+0xfc01397c>
   140d8:	002b883a 	mov	r21,zero
   140dc:	0023883a 	mov	r17,zero
   140e0:	003f5406 	br	13e34 <__alt_data_end+0xfc013e34>
   140e4:	61bfffc4 	addi	r6,r12,-1
   140e8:	300490fa 	slli	r2,r6,3
   140ec:	00c000f4 	movhi	r3,3
   140f0:	18e59504 	addi	r3,r3,-27052
   140f4:	1885883a 	add	r2,r3,r2
   140f8:	11000017 	ldw	r4,0(r2)
   140fc:	11400117 	ldw	r5,4(r2)
   14100:	d8800717 	ldw	r2,28(sp)
   14104:	880f883a 	mov	r7,r17
   14108:	d9801215 	stw	r6,72(sp)
   1410c:	800d883a 	mov	r6,r16
   14110:	db001615 	stw	r12,88(sp)
   14114:	15c00044 	addi	r23,r2,1
   14118:	001c98c0 	call	1c98c <__muldf3>
   1411c:	d9401017 	ldw	r5,64(sp)
   14120:	d9000f17 	ldw	r4,60(sp)
   14124:	d8c01515 	stw	r3,84(sp)
   14128:	d8801415 	stw	r2,80(sp)
   1412c:	001daf40 	call	1daf4 <__fixdfsi>
   14130:	1009883a 	mov	r4,r2
   14134:	1021883a 	mov	r16,r2
   14138:	001db740 	call	1db74 <__floatsidf>
   1413c:	d9000f17 	ldw	r4,60(sp)
   14140:	d9401017 	ldw	r5,64(sp)
   14144:	100d883a 	mov	r6,r2
   14148:	180f883a 	mov	r7,r3
   1414c:	001d1f80 	call	1d1f8 <__subdf3>
   14150:	1829883a 	mov	r20,r3
   14154:	d8c00717 	ldw	r3,28(sp)
   14158:	84000c04 	addi	r16,r16,48
   1415c:	1023883a 	mov	r17,r2
   14160:	1c000005 	stb	r16,0(r3)
   14164:	db001617 	ldw	r12,88(sp)
   14168:	00800044 	movi	r2,1
   1416c:	60802226 	beq	r12,r2,141f8 <_dtoa_r+0x1424>
   14170:	d9c00717 	ldw	r7,28(sp)
   14174:	8805883a 	mov	r2,r17
   14178:	b82b883a 	mov	r21,r23
   1417c:	3b19883a 	add	r12,r7,r12
   14180:	6023883a 	mov	r17,r12
   14184:	a007883a 	mov	r3,r20
   14188:	dc800f15 	stw	r18,60(sp)
   1418c:	000d883a 	mov	r6,zero
   14190:	01d00934 	movhi	r7,16420
   14194:	1009883a 	mov	r4,r2
   14198:	180b883a 	mov	r5,r3
   1419c:	001c98c0 	call	1c98c <__muldf3>
   141a0:	180b883a 	mov	r5,r3
   141a4:	1009883a 	mov	r4,r2
   141a8:	1829883a 	mov	r20,r3
   141ac:	1025883a 	mov	r18,r2
   141b0:	001daf40 	call	1daf4 <__fixdfsi>
   141b4:	1009883a 	mov	r4,r2
   141b8:	1021883a 	mov	r16,r2
   141bc:	001db740 	call	1db74 <__floatsidf>
   141c0:	100d883a 	mov	r6,r2
   141c4:	180f883a 	mov	r7,r3
   141c8:	9009883a 	mov	r4,r18
   141cc:	a00b883a 	mov	r5,r20
   141d0:	84000c04 	addi	r16,r16,48
   141d4:	001d1f80 	call	1d1f8 <__subdf3>
   141d8:	ad400044 	addi	r21,r21,1
   141dc:	ac3fffc5 	stb	r16,-1(r21)
   141e0:	ac7fea1e 	bne	r21,r17,1418c <__alt_data_end+0xfc01418c>
   141e4:	1023883a 	mov	r17,r2
   141e8:	d8801217 	ldw	r2,72(sp)
   141ec:	dc800f17 	ldw	r18,60(sp)
   141f0:	1829883a 	mov	r20,r3
   141f4:	b8af883a 	add	r23,r23,r2
   141f8:	d9001417 	ldw	r4,80(sp)
   141fc:	d9401517 	ldw	r5,84(sp)
   14200:	000d883a 	mov	r6,zero
   14204:	01cff834 	movhi	r7,16352
   14208:	001b4b80 	call	1b4b8 <__adddf3>
   1420c:	880d883a 	mov	r6,r17
   14210:	a00f883a 	mov	r7,r20
   14214:	1009883a 	mov	r4,r2
   14218:	180b883a 	mov	r5,r3
   1421c:	001c8980 	call	1c898 <__ledf2>
   14220:	10003e0e 	bge	r2,zero,1431c <_dtoa_r+0x1548>
   14224:	d9001317 	ldw	r4,76(sp)
   14228:	bd3fffc3 	ldbu	r20,-1(r23)
   1422c:	d9000515 	stw	r4,20(sp)
   14230:	003d3b06 	br	13720 <__alt_data_end+0xfc013720>
   14234:	0027883a 	mov	r19,zero
   14238:	003f1b06 	br	13ea8 <__alt_data_end+0xfc013ea8>
   1423c:	d8800817 	ldw	r2,32(sp)
   14240:	11e9c83a 	sub	r20,r2,r7
   14244:	0005883a 	mov	r2,zero
   14248:	003d5406 	br	1379c <__alt_data_end+0xfc01379c>
   1424c:	00800044 	movi	r2,1
   14250:	003dc706 	br	13970 <__alt_data_end+0xfc013970>
   14254:	d8c00217 	ldw	r3,8(sp)
   14258:	00800d84 	movi	r2,54
   1425c:	dd400a17 	ldw	r21,40(sp)
   14260:	10c5c83a 	sub	r2,r2,r3
   14264:	dd000817 	ldw	r20,32(sp)
   14268:	003d4c06 	br	1379c <__alt_data_end+0xfc01379c>
   1426c:	dc800f15 	stw	r18,60(sp)
   14270:	dcc01015 	stw	r19,64(sp)
   14274:	04000084 	movi	r16,2
   14278:	003bed06 	br	13230 <__alt_data_end+0xfc013230>
   1427c:	d9000617 	ldw	r4,24(sp)
   14280:	203f0d26 	beq	r4,zero,13eb8 <__alt_data_end+0xfc013eb8>
   14284:	d9800c17 	ldw	r6,48(sp)
   14288:	01bcab0e 	bge	zero,r6,13538 <__alt_data_end+0xfc013538>
   1428c:	d9401017 	ldw	r5,64(sp)
   14290:	d9000f17 	ldw	r4,60(sp)
   14294:	000d883a 	mov	r6,zero
   14298:	01d00934 	movhi	r7,16420
   1429c:	001c98c0 	call	1c98c <__muldf3>
   142a0:	81000044 	addi	r4,r16,1
   142a4:	d8800f15 	stw	r2,60(sp)
   142a8:	d8c01015 	stw	r3,64(sp)
   142ac:	001db740 	call	1db74 <__floatsidf>
   142b0:	d9800f17 	ldw	r6,60(sp)
   142b4:	d9c01017 	ldw	r7,64(sp)
   142b8:	1009883a 	mov	r4,r2
   142bc:	180b883a 	mov	r5,r3
   142c0:	001c98c0 	call	1c98c <__muldf3>
   142c4:	01d00734 	movhi	r7,16412
   142c8:	000d883a 	mov	r6,zero
   142cc:	1009883a 	mov	r4,r2
   142d0:	180b883a 	mov	r5,r3
   142d4:	001b4b80 	call	1b4b8 <__adddf3>
   142d8:	d9c00517 	ldw	r7,20(sp)
   142dc:	047f3034 	movhi	r17,64704
   142e0:	1021883a 	mov	r16,r2
   142e4:	39ffffc4 	addi	r7,r7,-1
   142e8:	d9c01315 	stw	r7,76(sp)
   142ec:	1c63883a 	add	r17,r3,r17
   142f0:	db000c17 	ldw	r12,48(sp)
   142f4:	003bea06 	br	132a0 <__alt_data_end+0xfc0132a0>
   142f8:	dc000915 	stw	r16,36(sp)
   142fc:	003e0e06 	br	13b38 <__alt_data_end+0xfc013b38>
   14300:	01000e44 	movi	r4,57
   14304:	8825883a 	mov	r18,r17
   14308:	9dc00044 	addi	r23,r19,1
   1430c:	99000005 	stb	r4,0(r19)
   14310:	a023883a 	mov	r17,r20
   14314:	dc000915 	stw	r16,36(sp)
   14318:	003da406 	br	139ac <__alt_data_end+0xfc0139ac>
   1431c:	d9801417 	ldw	r6,80(sp)
   14320:	d9c01517 	ldw	r7,84(sp)
   14324:	0009883a 	mov	r4,zero
   14328:	014ff834 	movhi	r5,16352
   1432c:	001d1f80 	call	1d1f8 <__subdf3>
   14330:	880d883a 	mov	r6,r17
   14334:	a00f883a 	mov	r7,r20
   14338:	1009883a 	mov	r4,r2
   1433c:	180b883a 	mov	r5,r3
   14340:	001c7bc0 	call	1c7bc <__gedf2>
   14344:	00bc7c0e 	bge	zero,r2,13538 <__alt_data_end+0xfc013538>
   14348:	01000c04 	movi	r4,48
   1434c:	00000106 	br	14354 <_dtoa_r+0x1580>
   14350:	102f883a 	mov	r23,r2
   14354:	b8bfffc4 	addi	r2,r23,-1
   14358:	10c00007 	ldb	r3,0(r2)
   1435c:	193ffc26 	beq	r3,r4,14350 <__alt_data_end+0xfc014350>
   14360:	d9801317 	ldw	r6,76(sp)
   14364:	d9800515 	stw	r6,20(sp)
   14368:	003c4406 	br	1347c <__alt_data_end+0xfc01347c>
   1436c:	d9801317 	ldw	r6,76(sp)
   14370:	d9800515 	stw	r6,20(sp)
   14374:	003cea06 	br	13720 <__alt_data_end+0xfc013720>
   14378:	dd800f17 	ldw	r22,60(sp)
   1437c:	dcc01017 	ldw	r19,64(sp)
   14380:	dc801217 	ldw	r18,72(sp)
   14384:	003c6c06 	br	13538 <__alt_data_end+0xfc013538>
   14388:	903e031e 	bne	r18,zero,13b98 <__alt_data_end+0xfc013b98>
   1438c:	003ebb06 	br	13e7c <__alt_data_end+0xfc013e7c>
   14390:	103e6c1e 	bne	r2,zero,13d44 <__alt_data_end+0xfc013d44>
   14394:	4080004c 	andi	r2,r8,1
   14398:	103e6a26 	beq	r2,zero,13d44 <__alt_data_end+0xfc013d44>
   1439c:	003e6606 	br	13d38 <__alt_data_end+0xfc013d38>
   143a0:	d8c00317 	ldw	r3,12(sp)
   143a4:	00800084 	movi	r2,2
   143a8:	10c02916 	blt	r2,r3,14450 <_dtoa_r+0x167c>
   143ac:	d9000c17 	ldw	r4,48(sp)
   143b0:	003e8806 	br	13dd4 <__alt_data_end+0xfc013dd4>
   143b4:	04000084 	movi	r16,2
   143b8:	003b9d06 	br	13230 <__alt_data_end+0xfc013230>
   143bc:	d9001317 	ldw	r4,76(sp)
   143c0:	d9000515 	stw	r4,20(sp)
   143c4:	003cd606 	br	13720 <__alt_data_end+0xfc013720>
   143c8:	d8801317 	ldw	r2,76(sp)
   143cc:	d8800515 	stw	r2,20(sp)
   143d0:	003c2a06 	br	1347c <__alt_data_end+0xfc01347c>
   143d4:	d9800317 	ldw	r6,12(sp)
   143d8:	00800084 	movi	r2,2
   143dc:	11801516 	blt	r2,r6,14434 <_dtoa_r+0x1660>
   143e0:	d9c00c17 	ldw	r7,48(sp)
   143e4:	d9c00615 	stw	r7,24(sp)
   143e8:	003df706 	br	13bc8 <__alt_data_end+0xfc013bc8>
   143ec:	193d3926 	beq	r3,r4,138d4 <__alt_data_end+0xfc0138d4>
   143f0:	00c00f04 	movi	r3,60
   143f4:	1885c83a 	sub	r2,r3,r2
   143f8:	003ddf06 	br	13b78 <__alt_data_end+0xfc013b78>
   143fc:	e009883a 	mov	r4,fp
   14400:	e0001115 	stw	zero,68(fp)
   14404:	000b883a 	mov	r5,zero
   14408:	0015a100 	call	15a10 <_Balloc>
   1440c:	d8800715 	stw	r2,28(sp)
   14410:	d8c00717 	ldw	r3,28(sp)
   14414:	00bfffc4 	movi	r2,-1
   14418:	01000044 	movi	r4,1
   1441c:	d8800c15 	stw	r2,48(sp)
   14420:	e0c01015 	stw	r3,64(fp)
   14424:	d9000b15 	stw	r4,44(sp)
   14428:	d8800615 	stw	r2,24(sp)
   1442c:	d8002215 	stw	zero,136(sp)
   14430:	003c4106 	br	13538 <__alt_data_end+0xfc013538>
   14434:	d8c00c17 	ldw	r3,48(sp)
   14438:	d8c00615 	stw	r3,24(sp)
   1443c:	003e7006 	br	13e00 <__alt_data_end+0xfc013e00>
   14440:	04400044 	movi	r17,1
   14444:	003b2006 	br	130c8 <__alt_data_end+0xfc0130c8>
   14448:	000b883a 	mov	r5,zero
   1444c:	003b3d06 	br	13144 <__alt_data_end+0xfc013144>
   14450:	d8800c17 	ldw	r2,48(sp)
   14454:	d8800615 	stw	r2,24(sp)
   14458:	003e6906 	br	13e00 <__alt_data_end+0xfc013e00>

0001445c <__sflush_r>:
   1445c:	2880030b 	ldhu	r2,12(r5)
   14460:	defffb04 	addi	sp,sp,-20
   14464:	dcc00315 	stw	r19,12(sp)
   14468:	dc400115 	stw	r17,4(sp)
   1446c:	dfc00415 	stw	ra,16(sp)
   14470:	dc800215 	stw	r18,8(sp)
   14474:	dc000015 	stw	r16,0(sp)
   14478:	10c0020c 	andi	r3,r2,8
   1447c:	2823883a 	mov	r17,r5
   14480:	2027883a 	mov	r19,r4
   14484:	1800311e 	bne	r3,zero,1454c <__sflush_r+0xf0>
   14488:	28c00117 	ldw	r3,4(r5)
   1448c:	10820014 	ori	r2,r2,2048
   14490:	2880030d 	sth	r2,12(r5)
   14494:	00c04b0e 	bge	zero,r3,145c4 <__sflush_r+0x168>
   14498:	8a000a17 	ldw	r8,40(r17)
   1449c:	40002326 	beq	r8,zero,1452c <__sflush_r+0xd0>
   144a0:	9c000017 	ldw	r16,0(r19)
   144a4:	10c4000c 	andi	r3,r2,4096
   144a8:	98000015 	stw	zero,0(r19)
   144ac:	18004826 	beq	r3,zero,145d0 <__sflush_r+0x174>
   144b0:	89801417 	ldw	r6,80(r17)
   144b4:	10c0010c 	andi	r3,r2,4
   144b8:	18000626 	beq	r3,zero,144d4 <__sflush_r+0x78>
   144bc:	88c00117 	ldw	r3,4(r17)
   144c0:	88800c17 	ldw	r2,48(r17)
   144c4:	30cdc83a 	sub	r6,r6,r3
   144c8:	10000226 	beq	r2,zero,144d4 <__sflush_r+0x78>
   144cc:	88800f17 	ldw	r2,60(r17)
   144d0:	308dc83a 	sub	r6,r6,r2
   144d4:	89400717 	ldw	r5,28(r17)
   144d8:	000f883a 	mov	r7,zero
   144dc:	9809883a 	mov	r4,r19
   144e0:	403ee83a 	callr	r8
   144e4:	00ffffc4 	movi	r3,-1
   144e8:	10c04426 	beq	r2,r3,145fc <__sflush_r+0x1a0>
   144ec:	88c0030b 	ldhu	r3,12(r17)
   144f0:	89000417 	ldw	r4,16(r17)
   144f4:	88000115 	stw	zero,4(r17)
   144f8:	197dffcc 	andi	r5,r3,63487
   144fc:	8940030d 	sth	r5,12(r17)
   14500:	89000015 	stw	r4,0(r17)
   14504:	18c4000c 	andi	r3,r3,4096
   14508:	18002c1e 	bne	r3,zero,145bc <__sflush_r+0x160>
   1450c:	89400c17 	ldw	r5,48(r17)
   14510:	9c000015 	stw	r16,0(r19)
   14514:	28000526 	beq	r5,zero,1452c <__sflush_r+0xd0>
   14518:	88801004 	addi	r2,r17,64
   1451c:	28800226 	beq	r5,r2,14528 <__sflush_r+0xcc>
   14520:	9809883a 	mov	r4,r19
   14524:	0014bd80 	call	14bd8 <_free_r>
   14528:	88000c15 	stw	zero,48(r17)
   1452c:	0005883a 	mov	r2,zero
   14530:	dfc00417 	ldw	ra,16(sp)
   14534:	dcc00317 	ldw	r19,12(sp)
   14538:	dc800217 	ldw	r18,8(sp)
   1453c:	dc400117 	ldw	r17,4(sp)
   14540:	dc000017 	ldw	r16,0(sp)
   14544:	dec00504 	addi	sp,sp,20
   14548:	f800283a 	ret
   1454c:	2c800417 	ldw	r18,16(r5)
   14550:	903ff626 	beq	r18,zero,1452c <__alt_data_end+0xfc01452c>
   14554:	2c000017 	ldw	r16,0(r5)
   14558:	108000cc 	andi	r2,r2,3
   1455c:	2c800015 	stw	r18,0(r5)
   14560:	84a1c83a 	sub	r16,r16,r18
   14564:	1000131e 	bne	r2,zero,145b4 <__sflush_r+0x158>
   14568:	28800517 	ldw	r2,20(r5)
   1456c:	88800215 	stw	r2,8(r17)
   14570:	04000316 	blt	zero,r16,14580 <__sflush_r+0x124>
   14574:	003fed06 	br	1452c <__alt_data_end+0xfc01452c>
   14578:	90a5883a 	add	r18,r18,r2
   1457c:	043feb0e 	bge	zero,r16,1452c <__alt_data_end+0xfc01452c>
   14580:	88800917 	ldw	r2,36(r17)
   14584:	89400717 	ldw	r5,28(r17)
   14588:	800f883a 	mov	r7,r16
   1458c:	900d883a 	mov	r6,r18
   14590:	9809883a 	mov	r4,r19
   14594:	103ee83a 	callr	r2
   14598:	80a1c83a 	sub	r16,r16,r2
   1459c:	00bff616 	blt	zero,r2,14578 <__alt_data_end+0xfc014578>
   145a0:	88c0030b 	ldhu	r3,12(r17)
   145a4:	00bfffc4 	movi	r2,-1
   145a8:	18c01014 	ori	r3,r3,64
   145ac:	88c0030d 	sth	r3,12(r17)
   145b0:	003fdf06 	br	14530 <__alt_data_end+0xfc014530>
   145b4:	0005883a 	mov	r2,zero
   145b8:	003fec06 	br	1456c <__alt_data_end+0xfc01456c>
   145bc:	88801415 	stw	r2,80(r17)
   145c0:	003fd206 	br	1450c <__alt_data_end+0xfc01450c>
   145c4:	28c00f17 	ldw	r3,60(r5)
   145c8:	00ffb316 	blt	zero,r3,14498 <__alt_data_end+0xfc014498>
   145cc:	003fd706 	br	1452c <__alt_data_end+0xfc01452c>
   145d0:	89400717 	ldw	r5,28(r17)
   145d4:	000d883a 	mov	r6,zero
   145d8:	01c00044 	movi	r7,1
   145dc:	9809883a 	mov	r4,r19
   145e0:	403ee83a 	callr	r8
   145e4:	100d883a 	mov	r6,r2
   145e8:	00bfffc4 	movi	r2,-1
   145ec:	30801426 	beq	r6,r2,14640 <__sflush_r+0x1e4>
   145f0:	8880030b 	ldhu	r2,12(r17)
   145f4:	8a000a17 	ldw	r8,40(r17)
   145f8:	003fae06 	br	144b4 <__alt_data_end+0xfc0144b4>
   145fc:	98c00017 	ldw	r3,0(r19)
   14600:	183fba26 	beq	r3,zero,144ec <__alt_data_end+0xfc0144ec>
   14604:	01000744 	movi	r4,29
   14608:	19000626 	beq	r3,r4,14624 <__sflush_r+0x1c8>
   1460c:	01000584 	movi	r4,22
   14610:	19000426 	beq	r3,r4,14624 <__sflush_r+0x1c8>
   14614:	88c0030b 	ldhu	r3,12(r17)
   14618:	18c01014 	ori	r3,r3,64
   1461c:	88c0030d 	sth	r3,12(r17)
   14620:	003fc306 	br	14530 <__alt_data_end+0xfc014530>
   14624:	8880030b 	ldhu	r2,12(r17)
   14628:	88c00417 	ldw	r3,16(r17)
   1462c:	88000115 	stw	zero,4(r17)
   14630:	10bdffcc 	andi	r2,r2,63487
   14634:	8880030d 	sth	r2,12(r17)
   14638:	88c00015 	stw	r3,0(r17)
   1463c:	003fb306 	br	1450c <__alt_data_end+0xfc01450c>
   14640:	98800017 	ldw	r2,0(r19)
   14644:	103fea26 	beq	r2,zero,145f0 <__alt_data_end+0xfc0145f0>
   14648:	00c00744 	movi	r3,29
   1464c:	10c00226 	beq	r2,r3,14658 <__sflush_r+0x1fc>
   14650:	00c00584 	movi	r3,22
   14654:	10c0031e 	bne	r2,r3,14664 <__sflush_r+0x208>
   14658:	9c000015 	stw	r16,0(r19)
   1465c:	0005883a 	mov	r2,zero
   14660:	003fb306 	br	14530 <__alt_data_end+0xfc014530>
   14664:	88c0030b 	ldhu	r3,12(r17)
   14668:	3005883a 	mov	r2,r6
   1466c:	18c01014 	ori	r3,r3,64
   14670:	88c0030d 	sth	r3,12(r17)
   14674:	003fae06 	br	14530 <__alt_data_end+0xfc014530>

00014678 <_fflush_r>:
   14678:	defffd04 	addi	sp,sp,-12
   1467c:	dc000115 	stw	r16,4(sp)
   14680:	dfc00215 	stw	ra,8(sp)
   14684:	2021883a 	mov	r16,r4
   14688:	20000226 	beq	r4,zero,14694 <_fflush_r+0x1c>
   1468c:	20800e17 	ldw	r2,56(r4)
   14690:	10000c26 	beq	r2,zero,146c4 <_fflush_r+0x4c>
   14694:	2880030f 	ldh	r2,12(r5)
   14698:	1000051e 	bne	r2,zero,146b0 <_fflush_r+0x38>
   1469c:	0005883a 	mov	r2,zero
   146a0:	dfc00217 	ldw	ra,8(sp)
   146a4:	dc000117 	ldw	r16,4(sp)
   146a8:	dec00304 	addi	sp,sp,12
   146ac:	f800283a 	ret
   146b0:	8009883a 	mov	r4,r16
   146b4:	dfc00217 	ldw	ra,8(sp)
   146b8:	dc000117 	ldw	r16,4(sp)
   146bc:	dec00304 	addi	sp,sp,12
   146c0:	001445c1 	jmpi	1445c <__sflush_r>
   146c4:	d9400015 	stw	r5,0(sp)
   146c8:	0014a640 	call	14a64 <__sinit>
   146cc:	d9400017 	ldw	r5,0(sp)
   146d0:	003ff006 	br	14694 <__alt_data_end+0xfc014694>

000146d4 <fflush>:
   146d4:	20000526 	beq	r4,zero,146ec <fflush+0x18>
   146d8:	008000f4 	movhi	r2,3
   146dc:	10b29504 	addi	r2,r2,-13740
   146e0:	200b883a 	mov	r5,r4
   146e4:	11000017 	ldw	r4,0(r2)
   146e8:	00146781 	jmpi	14678 <_fflush_r>
   146ec:	008000f4 	movhi	r2,3
   146f0:	10b29404 	addi	r2,r2,-13744
   146f4:	11000017 	ldw	r4,0(r2)
   146f8:	01400074 	movhi	r5,1
   146fc:	29519e04 	addi	r5,r5,18040
   14700:	00154741 	jmpi	15474 <_fwalk_reent>

00014704 <__fp_unlock>:
   14704:	0005883a 	mov	r2,zero
   14708:	f800283a 	ret

0001470c <_cleanup_r>:
   1470c:	014000b4 	movhi	r5,2
   14710:	2968a504 	addi	r5,r5,-23916
   14714:	00154741 	jmpi	15474 <_fwalk_reent>

00014718 <__sinit.part.1>:
   14718:	defff704 	addi	sp,sp,-36
   1471c:	00c00074 	movhi	r3,1
   14720:	dfc00815 	stw	ra,32(sp)
   14724:	ddc00715 	stw	r23,28(sp)
   14728:	dd800615 	stw	r22,24(sp)
   1472c:	dd400515 	stw	r21,20(sp)
   14730:	dd000415 	stw	r20,16(sp)
   14734:	dcc00315 	stw	r19,12(sp)
   14738:	dc800215 	stw	r18,8(sp)
   1473c:	dc400115 	stw	r17,4(sp)
   14740:	dc000015 	stw	r16,0(sp)
   14744:	18d1c304 	addi	r3,r3,18188
   14748:	24000117 	ldw	r16,4(r4)
   1474c:	20c00f15 	stw	r3,60(r4)
   14750:	2080bb04 	addi	r2,r4,748
   14754:	00c000c4 	movi	r3,3
   14758:	20c0b915 	stw	r3,740(r4)
   1475c:	2080ba15 	stw	r2,744(r4)
   14760:	2000b815 	stw	zero,736(r4)
   14764:	05c00204 	movi	r23,8
   14768:	00800104 	movi	r2,4
   1476c:	2025883a 	mov	r18,r4
   14770:	b80d883a 	mov	r6,r23
   14774:	81001704 	addi	r4,r16,92
   14778:	000b883a 	mov	r5,zero
   1477c:	80000015 	stw	zero,0(r16)
   14780:	80000115 	stw	zero,4(r16)
   14784:	80000215 	stw	zero,8(r16)
   14788:	8080030d 	sth	r2,12(r16)
   1478c:	80001915 	stw	zero,100(r16)
   14790:	8000038d 	sth	zero,14(r16)
   14794:	80000415 	stw	zero,16(r16)
   14798:	80000515 	stw	zero,20(r16)
   1479c:	80000615 	stw	zero,24(r16)
   147a0:	000dbc80 	call	dbc8 <memset>
   147a4:	05800074 	movhi	r22,1
   147a8:	94400217 	ldw	r17,8(r18)
   147ac:	05400074 	movhi	r21,1
   147b0:	05000074 	movhi	r20,1
   147b4:	04c00074 	movhi	r19,1
   147b8:	b59c8204 	addi	r22,r22,29192
   147bc:	ad5c9904 	addi	r21,r21,29284
   147c0:	a51cb804 	addi	r20,r20,29408
   147c4:	9cdccf04 	addi	r19,r19,29500
   147c8:	85800815 	stw	r22,32(r16)
   147cc:	85400915 	stw	r21,36(r16)
   147d0:	85000a15 	stw	r20,40(r16)
   147d4:	84c00b15 	stw	r19,44(r16)
   147d8:	84000715 	stw	r16,28(r16)
   147dc:	00800284 	movi	r2,10
   147e0:	8880030d 	sth	r2,12(r17)
   147e4:	00800044 	movi	r2,1
   147e8:	b80d883a 	mov	r6,r23
   147ec:	89001704 	addi	r4,r17,92
   147f0:	000b883a 	mov	r5,zero
   147f4:	88000015 	stw	zero,0(r17)
   147f8:	88000115 	stw	zero,4(r17)
   147fc:	88000215 	stw	zero,8(r17)
   14800:	88001915 	stw	zero,100(r17)
   14804:	8880038d 	sth	r2,14(r17)
   14808:	88000415 	stw	zero,16(r17)
   1480c:	88000515 	stw	zero,20(r17)
   14810:	88000615 	stw	zero,24(r17)
   14814:	000dbc80 	call	dbc8 <memset>
   14818:	94000317 	ldw	r16,12(r18)
   1481c:	00800484 	movi	r2,18
   14820:	8c400715 	stw	r17,28(r17)
   14824:	8d800815 	stw	r22,32(r17)
   14828:	8d400915 	stw	r21,36(r17)
   1482c:	8d000a15 	stw	r20,40(r17)
   14830:	8cc00b15 	stw	r19,44(r17)
   14834:	8080030d 	sth	r2,12(r16)
   14838:	00800084 	movi	r2,2
   1483c:	80000015 	stw	zero,0(r16)
   14840:	80000115 	stw	zero,4(r16)
   14844:	80000215 	stw	zero,8(r16)
   14848:	80001915 	stw	zero,100(r16)
   1484c:	8080038d 	sth	r2,14(r16)
   14850:	80000415 	stw	zero,16(r16)
   14854:	80000515 	stw	zero,20(r16)
   14858:	80000615 	stw	zero,24(r16)
   1485c:	b80d883a 	mov	r6,r23
   14860:	000b883a 	mov	r5,zero
   14864:	81001704 	addi	r4,r16,92
   14868:	000dbc80 	call	dbc8 <memset>
   1486c:	00800044 	movi	r2,1
   14870:	84000715 	stw	r16,28(r16)
   14874:	85800815 	stw	r22,32(r16)
   14878:	85400915 	stw	r21,36(r16)
   1487c:	85000a15 	stw	r20,40(r16)
   14880:	84c00b15 	stw	r19,44(r16)
   14884:	90800e15 	stw	r2,56(r18)
   14888:	dfc00817 	ldw	ra,32(sp)
   1488c:	ddc00717 	ldw	r23,28(sp)
   14890:	dd800617 	ldw	r22,24(sp)
   14894:	dd400517 	ldw	r21,20(sp)
   14898:	dd000417 	ldw	r20,16(sp)
   1489c:	dcc00317 	ldw	r19,12(sp)
   148a0:	dc800217 	ldw	r18,8(sp)
   148a4:	dc400117 	ldw	r17,4(sp)
   148a8:	dc000017 	ldw	r16,0(sp)
   148ac:	dec00904 	addi	sp,sp,36
   148b0:	f800283a 	ret

000148b4 <__fp_lock>:
   148b4:	0005883a 	mov	r2,zero
   148b8:	f800283a 	ret

000148bc <__sfmoreglue>:
   148bc:	defffc04 	addi	sp,sp,-16
   148c0:	dc800215 	stw	r18,8(sp)
   148c4:	2825883a 	mov	r18,r5
   148c8:	dc000015 	stw	r16,0(sp)
   148cc:	01401a04 	movi	r5,104
   148d0:	2021883a 	mov	r16,r4
   148d4:	913fffc4 	addi	r4,r18,-1
   148d8:	dfc00315 	stw	ra,12(sp)
   148dc:	dc400115 	stw	r17,4(sp)
   148e0:	000cca00 	call	cca0 <__mulsi3>
   148e4:	8009883a 	mov	r4,r16
   148e8:	11401d04 	addi	r5,r2,116
   148ec:	1023883a 	mov	r17,r2
   148f0:	000d2740 	call	d274 <_malloc_r>
   148f4:	1021883a 	mov	r16,r2
   148f8:	10000726 	beq	r2,zero,14918 <__sfmoreglue+0x5c>
   148fc:	11000304 	addi	r4,r2,12
   14900:	10000015 	stw	zero,0(r2)
   14904:	14800115 	stw	r18,4(r2)
   14908:	11000215 	stw	r4,8(r2)
   1490c:	89801a04 	addi	r6,r17,104
   14910:	000b883a 	mov	r5,zero
   14914:	000dbc80 	call	dbc8 <memset>
   14918:	8005883a 	mov	r2,r16
   1491c:	dfc00317 	ldw	ra,12(sp)
   14920:	dc800217 	ldw	r18,8(sp)
   14924:	dc400117 	ldw	r17,4(sp)
   14928:	dc000017 	ldw	r16,0(sp)
   1492c:	dec00404 	addi	sp,sp,16
   14930:	f800283a 	ret

00014934 <__sfp>:
   14934:	defffb04 	addi	sp,sp,-20
   14938:	dc000015 	stw	r16,0(sp)
   1493c:	040000f4 	movhi	r16,3
   14940:	84329404 	addi	r16,r16,-13744
   14944:	dcc00315 	stw	r19,12(sp)
   14948:	2027883a 	mov	r19,r4
   1494c:	81000017 	ldw	r4,0(r16)
   14950:	dfc00415 	stw	ra,16(sp)
   14954:	dc800215 	stw	r18,8(sp)
   14958:	20800e17 	ldw	r2,56(r4)
   1495c:	dc400115 	stw	r17,4(sp)
   14960:	1000021e 	bne	r2,zero,1496c <__sfp+0x38>
   14964:	00147180 	call	14718 <__sinit.part.1>
   14968:	81000017 	ldw	r4,0(r16)
   1496c:	2480b804 	addi	r18,r4,736
   14970:	047fffc4 	movi	r17,-1
   14974:	91000117 	ldw	r4,4(r18)
   14978:	94000217 	ldw	r16,8(r18)
   1497c:	213fffc4 	addi	r4,r4,-1
   14980:	20000a16 	blt	r4,zero,149ac <__sfp+0x78>
   14984:	8080030f 	ldh	r2,12(r16)
   14988:	10000c26 	beq	r2,zero,149bc <__sfp+0x88>
   1498c:	80c01d04 	addi	r3,r16,116
   14990:	00000206 	br	1499c <__sfp+0x68>
   14994:	18bfe60f 	ldh	r2,-104(r3)
   14998:	10000826 	beq	r2,zero,149bc <__sfp+0x88>
   1499c:	213fffc4 	addi	r4,r4,-1
   149a0:	1c3ffd04 	addi	r16,r3,-12
   149a4:	18c01a04 	addi	r3,r3,104
   149a8:	247ffa1e 	bne	r4,r17,14994 <__alt_data_end+0xfc014994>
   149ac:	90800017 	ldw	r2,0(r18)
   149b0:	10001d26 	beq	r2,zero,14a28 <__sfp+0xf4>
   149b4:	1025883a 	mov	r18,r2
   149b8:	003fee06 	br	14974 <__alt_data_end+0xfc014974>
   149bc:	00bfffc4 	movi	r2,-1
   149c0:	8080038d 	sth	r2,14(r16)
   149c4:	00800044 	movi	r2,1
   149c8:	8080030d 	sth	r2,12(r16)
   149cc:	80001915 	stw	zero,100(r16)
   149d0:	80000015 	stw	zero,0(r16)
   149d4:	80000215 	stw	zero,8(r16)
   149d8:	80000115 	stw	zero,4(r16)
   149dc:	80000415 	stw	zero,16(r16)
   149e0:	80000515 	stw	zero,20(r16)
   149e4:	80000615 	stw	zero,24(r16)
   149e8:	01800204 	movi	r6,8
   149ec:	000b883a 	mov	r5,zero
   149f0:	81001704 	addi	r4,r16,92
   149f4:	000dbc80 	call	dbc8 <memset>
   149f8:	8005883a 	mov	r2,r16
   149fc:	80000c15 	stw	zero,48(r16)
   14a00:	80000d15 	stw	zero,52(r16)
   14a04:	80001115 	stw	zero,68(r16)
   14a08:	80001215 	stw	zero,72(r16)
   14a0c:	dfc00417 	ldw	ra,16(sp)
   14a10:	dcc00317 	ldw	r19,12(sp)
   14a14:	dc800217 	ldw	r18,8(sp)
   14a18:	dc400117 	ldw	r17,4(sp)
   14a1c:	dc000017 	ldw	r16,0(sp)
   14a20:	dec00504 	addi	sp,sp,20
   14a24:	f800283a 	ret
   14a28:	01400104 	movi	r5,4
   14a2c:	9809883a 	mov	r4,r19
   14a30:	00148bc0 	call	148bc <__sfmoreglue>
   14a34:	90800015 	stw	r2,0(r18)
   14a38:	103fde1e 	bne	r2,zero,149b4 <__alt_data_end+0xfc0149b4>
   14a3c:	00800304 	movi	r2,12
   14a40:	98800015 	stw	r2,0(r19)
   14a44:	0005883a 	mov	r2,zero
   14a48:	003ff006 	br	14a0c <__alt_data_end+0xfc014a0c>

00014a4c <_cleanup>:
   14a4c:	008000f4 	movhi	r2,3
   14a50:	10b29404 	addi	r2,r2,-13744
   14a54:	11000017 	ldw	r4,0(r2)
   14a58:	014000b4 	movhi	r5,2
   14a5c:	2968a504 	addi	r5,r5,-23916
   14a60:	00154741 	jmpi	15474 <_fwalk_reent>

00014a64 <__sinit>:
   14a64:	20800e17 	ldw	r2,56(r4)
   14a68:	10000126 	beq	r2,zero,14a70 <__sinit+0xc>
   14a6c:	f800283a 	ret
   14a70:	00147181 	jmpi	14718 <__sinit.part.1>

00014a74 <__sfp_lock_acquire>:
   14a74:	f800283a 	ret

00014a78 <__sfp_lock_release>:
   14a78:	f800283a 	ret

00014a7c <__sinit_lock_acquire>:
   14a7c:	f800283a 	ret

00014a80 <__sinit_lock_release>:
   14a80:	f800283a 	ret

00014a84 <__fp_lock_all>:
   14a84:	008000f4 	movhi	r2,3
   14a88:	10b29504 	addi	r2,r2,-13740
   14a8c:	11000017 	ldw	r4,0(r2)
   14a90:	01400074 	movhi	r5,1
   14a94:	29522d04 	addi	r5,r5,18612
   14a98:	00153b01 	jmpi	153b0 <_fwalk>

00014a9c <__fp_unlock_all>:
   14a9c:	008000f4 	movhi	r2,3
   14aa0:	10b29504 	addi	r2,r2,-13740
   14aa4:	11000017 	ldw	r4,0(r2)
   14aa8:	01400074 	movhi	r5,1
   14aac:	2951c104 	addi	r5,r5,18180
   14ab0:	00153b01 	jmpi	153b0 <_fwalk>

00014ab4 <_malloc_trim_r>:
   14ab4:	defffb04 	addi	sp,sp,-20
   14ab8:	dcc00315 	stw	r19,12(sp)
   14abc:	04c000f4 	movhi	r19,3
   14ac0:	dc800215 	stw	r18,8(sp)
   14ac4:	dc400115 	stw	r17,4(sp)
   14ac8:	dc000015 	stw	r16,0(sp)
   14acc:	dfc00415 	stw	ra,16(sp)
   14ad0:	2821883a 	mov	r16,r5
   14ad4:	9ce73804 	addi	r19,r19,-25376
   14ad8:	2025883a 	mov	r18,r4
   14adc:	001e4b80 	call	1e4b8 <__malloc_lock>
   14ae0:	98800217 	ldw	r2,8(r19)
   14ae4:	14400117 	ldw	r17,4(r2)
   14ae8:	00bfff04 	movi	r2,-4
   14aec:	88a2703a 	and	r17,r17,r2
   14af0:	8c21c83a 	sub	r16,r17,r16
   14af4:	8403fbc4 	addi	r16,r16,4079
   14af8:	8020d33a 	srli	r16,r16,12
   14afc:	0083ffc4 	movi	r2,4095
   14b00:	843fffc4 	addi	r16,r16,-1
   14b04:	8020933a 	slli	r16,r16,12
   14b08:	1400060e 	bge	r2,r16,14b24 <_malloc_trim_r+0x70>
   14b0c:	000b883a 	mov	r5,zero
   14b10:	9009883a 	mov	r4,r18
   14b14:	000de500 	call	de50 <_sbrk_r>
   14b18:	98c00217 	ldw	r3,8(r19)
   14b1c:	1c47883a 	add	r3,r3,r17
   14b20:	10c00a26 	beq	r2,r3,14b4c <_malloc_trim_r+0x98>
   14b24:	9009883a 	mov	r4,r18
   14b28:	001e4dc0 	call	1e4dc <__malloc_unlock>
   14b2c:	0005883a 	mov	r2,zero
   14b30:	dfc00417 	ldw	ra,16(sp)
   14b34:	dcc00317 	ldw	r19,12(sp)
   14b38:	dc800217 	ldw	r18,8(sp)
   14b3c:	dc400117 	ldw	r17,4(sp)
   14b40:	dc000017 	ldw	r16,0(sp)
   14b44:	dec00504 	addi	sp,sp,20
   14b48:	f800283a 	ret
   14b4c:	040bc83a 	sub	r5,zero,r16
   14b50:	9009883a 	mov	r4,r18
   14b54:	000de500 	call	de50 <_sbrk_r>
   14b58:	00ffffc4 	movi	r3,-1
   14b5c:	10c00d26 	beq	r2,r3,14b94 <_malloc_trim_r+0xe0>
   14b60:	00c000f4 	movhi	r3,3
   14b64:	18ff7e04 	addi	r3,r3,-520
   14b68:	18800017 	ldw	r2,0(r3)
   14b6c:	99000217 	ldw	r4,8(r19)
   14b70:	8c23c83a 	sub	r17,r17,r16
   14b74:	8c400054 	ori	r17,r17,1
   14b78:	1421c83a 	sub	r16,r2,r16
   14b7c:	24400115 	stw	r17,4(r4)
   14b80:	9009883a 	mov	r4,r18
   14b84:	1c000015 	stw	r16,0(r3)
   14b88:	001e4dc0 	call	1e4dc <__malloc_unlock>
   14b8c:	00800044 	movi	r2,1
   14b90:	003fe706 	br	14b30 <__alt_data_end+0xfc014b30>
   14b94:	000b883a 	mov	r5,zero
   14b98:	9009883a 	mov	r4,r18
   14b9c:	000de500 	call	de50 <_sbrk_r>
   14ba0:	99000217 	ldw	r4,8(r19)
   14ba4:	014003c4 	movi	r5,15
   14ba8:	1107c83a 	sub	r3,r2,r4
   14bac:	28ffdd0e 	bge	r5,r3,14b24 <__alt_data_end+0xfc014b24>
   14bb0:	014000f4 	movhi	r5,3
   14bb4:	29729604 	addi	r5,r5,-13736
   14bb8:	29400017 	ldw	r5,0(r5)
   14bbc:	18c00054 	ori	r3,r3,1
   14bc0:	20c00115 	stw	r3,4(r4)
   14bc4:	00c000f4 	movhi	r3,3
   14bc8:	1145c83a 	sub	r2,r2,r5
   14bcc:	18ff7e04 	addi	r3,r3,-520
   14bd0:	18800015 	stw	r2,0(r3)
   14bd4:	003fd306 	br	14b24 <__alt_data_end+0xfc014b24>

00014bd8 <_free_r>:
   14bd8:	28004126 	beq	r5,zero,14ce0 <_free_r+0x108>
   14bdc:	defffd04 	addi	sp,sp,-12
   14be0:	dc400115 	stw	r17,4(sp)
   14be4:	dc000015 	stw	r16,0(sp)
   14be8:	2023883a 	mov	r17,r4
   14bec:	2821883a 	mov	r16,r5
   14bf0:	dfc00215 	stw	ra,8(sp)
   14bf4:	001e4b80 	call	1e4b8 <__malloc_lock>
   14bf8:	81ffff17 	ldw	r7,-4(r16)
   14bfc:	00bfff84 	movi	r2,-2
   14c00:	010000f4 	movhi	r4,3
   14c04:	81bffe04 	addi	r6,r16,-8
   14c08:	3884703a 	and	r2,r7,r2
   14c0c:	21273804 	addi	r4,r4,-25376
   14c10:	308b883a 	add	r5,r6,r2
   14c14:	2a400117 	ldw	r9,4(r5)
   14c18:	22000217 	ldw	r8,8(r4)
   14c1c:	00ffff04 	movi	r3,-4
   14c20:	48c6703a 	and	r3,r9,r3
   14c24:	2a005726 	beq	r5,r8,14d84 <_free_r+0x1ac>
   14c28:	28c00115 	stw	r3,4(r5)
   14c2c:	39c0004c 	andi	r7,r7,1
   14c30:	3800091e 	bne	r7,zero,14c58 <_free_r+0x80>
   14c34:	823ffe17 	ldw	r8,-8(r16)
   14c38:	22400204 	addi	r9,r4,8
   14c3c:	320dc83a 	sub	r6,r6,r8
   14c40:	31c00217 	ldw	r7,8(r6)
   14c44:	1205883a 	add	r2,r2,r8
   14c48:	3a406526 	beq	r7,r9,14de0 <_free_r+0x208>
   14c4c:	32000317 	ldw	r8,12(r6)
   14c50:	3a000315 	stw	r8,12(r7)
   14c54:	41c00215 	stw	r7,8(r8)
   14c58:	28cf883a 	add	r7,r5,r3
   14c5c:	39c00117 	ldw	r7,4(r7)
   14c60:	39c0004c 	andi	r7,r7,1
   14c64:	38003a26 	beq	r7,zero,14d50 <_free_r+0x178>
   14c68:	10c00054 	ori	r3,r2,1
   14c6c:	30c00115 	stw	r3,4(r6)
   14c70:	3087883a 	add	r3,r6,r2
   14c74:	18800015 	stw	r2,0(r3)
   14c78:	00c07fc4 	movi	r3,511
   14c7c:	18801936 	bltu	r3,r2,14ce4 <_free_r+0x10c>
   14c80:	1004d0fa 	srli	r2,r2,3
   14c84:	01c00044 	movi	r7,1
   14c88:	21400117 	ldw	r5,4(r4)
   14c8c:	10c00044 	addi	r3,r2,1
   14c90:	18c7883a 	add	r3,r3,r3
   14c94:	1005d0ba 	srai	r2,r2,2
   14c98:	18c7883a 	add	r3,r3,r3
   14c9c:	18c7883a 	add	r3,r3,r3
   14ca0:	1907883a 	add	r3,r3,r4
   14ca4:	3884983a 	sll	r2,r7,r2
   14ca8:	19c00017 	ldw	r7,0(r3)
   14cac:	1a3ffe04 	addi	r8,r3,-8
   14cb0:	1144b03a 	or	r2,r2,r5
   14cb4:	32000315 	stw	r8,12(r6)
   14cb8:	31c00215 	stw	r7,8(r6)
   14cbc:	20800115 	stw	r2,4(r4)
   14cc0:	19800015 	stw	r6,0(r3)
   14cc4:	39800315 	stw	r6,12(r7)
   14cc8:	8809883a 	mov	r4,r17
   14ccc:	dfc00217 	ldw	ra,8(sp)
   14cd0:	dc400117 	ldw	r17,4(sp)
   14cd4:	dc000017 	ldw	r16,0(sp)
   14cd8:	dec00304 	addi	sp,sp,12
   14cdc:	001e4dc1 	jmpi	1e4dc <__malloc_unlock>
   14ce0:	f800283a 	ret
   14ce4:	100ad27a 	srli	r5,r2,9
   14ce8:	00c00104 	movi	r3,4
   14cec:	19404a36 	bltu	r3,r5,14e18 <_free_r+0x240>
   14cf0:	100ad1ba 	srli	r5,r2,6
   14cf4:	28c00e44 	addi	r3,r5,57
   14cf8:	18c7883a 	add	r3,r3,r3
   14cfc:	29400e04 	addi	r5,r5,56
   14d00:	18c7883a 	add	r3,r3,r3
   14d04:	18c7883a 	add	r3,r3,r3
   14d08:	1909883a 	add	r4,r3,r4
   14d0c:	20c00017 	ldw	r3,0(r4)
   14d10:	01c000f4 	movhi	r7,3
   14d14:	213ffe04 	addi	r4,r4,-8
   14d18:	39e73804 	addi	r7,r7,-25376
   14d1c:	20c04426 	beq	r4,r3,14e30 <_free_r+0x258>
   14d20:	01ffff04 	movi	r7,-4
   14d24:	19400117 	ldw	r5,4(r3)
   14d28:	29ca703a 	and	r5,r5,r7
   14d2c:	1140022e 	bgeu	r2,r5,14d38 <_free_r+0x160>
   14d30:	18c00217 	ldw	r3,8(r3)
   14d34:	20fffb1e 	bne	r4,r3,14d24 <__alt_data_end+0xfc014d24>
   14d38:	19000317 	ldw	r4,12(r3)
   14d3c:	31000315 	stw	r4,12(r6)
   14d40:	30c00215 	stw	r3,8(r6)
   14d44:	21800215 	stw	r6,8(r4)
   14d48:	19800315 	stw	r6,12(r3)
   14d4c:	003fde06 	br	14cc8 <__alt_data_end+0xfc014cc8>
   14d50:	29c00217 	ldw	r7,8(r5)
   14d54:	10c5883a 	add	r2,r2,r3
   14d58:	00c000f4 	movhi	r3,3
   14d5c:	18e73a04 	addi	r3,r3,-25368
   14d60:	38c03b26 	beq	r7,r3,14e50 <_free_r+0x278>
   14d64:	2a000317 	ldw	r8,12(r5)
   14d68:	11400054 	ori	r5,r2,1
   14d6c:	3087883a 	add	r3,r6,r2
   14d70:	3a000315 	stw	r8,12(r7)
   14d74:	41c00215 	stw	r7,8(r8)
   14d78:	31400115 	stw	r5,4(r6)
   14d7c:	18800015 	stw	r2,0(r3)
   14d80:	003fbd06 	br	14c78 <__alt_data_end+0xfc014c78>
   14d84:	39c0004c 	andi	r7,r7,1
   14d88:	10c5883a 	add	r2,r2,r3
   14d8c:	3800071e 	bne	r7,zero,14dac <_free_r+0x1d4>
   14d90:	81fffe17 	ldw	r7,-8(r16)
   14d94:	31cdc83a 	sub	r6,r6,r7
   14d98:	30c00317 	ldw	r3,12(r6)
   14d9c:	31400217 	ldw	r5,8(r6)
   14da0:	11c5883a 	add	r2,r2,r7
   14da4:	28c00315 	stw	r3,12(r5)
   14da8:	19400215 	stw	r5,8(r3)
   14dac:	10c00054 	ori	r3,r2,1
   14db0:	30c00115 	stw	r3,4(r6)
   14db4:	00c000f4 	movhi	r3,3
   14db8:	18f29704 	addi	r3,r3,-13732
   14dbc:	18c00017 	ldw	r3,0(r3)
   14dc0:	21800215 	stw	r6,8(r4)
   14dc4:	10ffc036 	bltu	r2,r3,14cc8 <__alt_data_end+0xfc014cc8>
   14dc8:	008000f4 	movhi	r2,3
   14dcc:	10bf2604 	addi	r2,r2,-872
   14dd0:	11400017 	ldw	r5,0(r2)
   14dd4:	8809883a 	mov	r4,r17
   14dd8:	0014ab40 	call	14ab4 <_malloc_trim_r>
   14ddc:	003fba06 	br	14cc8 <__alt_data_end+0xfc014cc8>
   14de0:	28c9883a 	add	r4,r5,r3
   14de4:	21000117 	ldw	r4,4(r4)
   14de8:	2100004c 	andi	r4,r4,1
   14dec:	2000391e 	bne	r4,zero,14ed4 <_free_r+0x2fc>
   14df0:	29c00217 	ldw	r7,8(r5)
   14df4:	29000317 	ldw	r4,12(r5)
   14df8:	1885883a 	add	r2,r3,r2
   14dfc:	10c00054 	ori	r3,r2,1
   14e00:	39000315 	stw	r4,12(r7)
   14e04:	21c00215 	stw	r7,8(r4)
   14e08:	30c00115 	stw	r3,4(r6)
   14e0c:	308d883a 	add	r6,r6,r2
   14e10:	30800015 	stw	r2,0(r6)
   14e14:	003fac06 	br	14cc8 <__alt_data_end+0xfc014cc8>
   14e18:	00c00504 	movi	r3,20
   14e1c:	19401536 	bltu	r3,r5,14e74 <_free_r+0x29c>
   14e20:	28c01704 	addi	r3,r5,92
   14e24:	18c7883a 	add	r3,r3,r3
   14e28:	294016c4 	addi	r5,r5,91
   14e2c:	003fb406 	br	14d00 <__alt_data_end+0xfc014d00>
   14e30:	280bd0ba 	srai	r5,r5,2
   14e34:	00c00044 	movi	r3,1
   14e38:	38800117 	ldw	r2,4(r7)
   14e3c:	194a983a 	sll	r5,r3,r5
   14e40:	2007883a 	mov	r3,r4
   14e44:	2884b03a 	or	r2,r5,r2
   14e48:	38800115 	stw	r2,4(r7)
   14e4c:	003fbb06 	br	14d3c <__alt_data_end+0xfc014d3c>
   14e50:	21800515 	stw	r6,20(r4)
   14e54:	21800415 	stw	r6,16(r4)
   14e58:	10c00054 	ori	r3,r2,1
   14e5c:	31c00315 	stw	r7,12(r6)
   14e60:	31c00215 	stw	r7,8(r6)
   14e64:	30c00115 	stw	r3,4(r6)
   14e68:	308d883a 	add	r6,r6,r2
   14e6c:	30800015 	stw	r2,0(r6)
   14e70:	003f9506 	br	14cc8 <__alt_data_end+0xfc014cc8>
   14e74:	00c01504 	movi	r3,84
   14e78:	19400536 	bltu	r3,r5,14e90 <_free_r+0x2b8>
   14e7c:	100ad33a 	srli	r5,r2,12
   14e80:	28c01bc4 	addi	r3,r5,111
   14e84:	18c7883a 	add	r3,r3,r3
   14e88:	29401b84 	addi	r5,r5,110
   14e8c:	003f9c06 	br	14d00 <__alt_data_end+0xfc014d00>
   14e90:	00c05504 	movi	r3,340
   14e94:	19400536 	bltu	r3,r5,14eac <_free_r+0x2d4>
   14e98:	100ad3fa 	srli	r5,r2,15
   14e9c:	28c01e04 	addi	r3,r5,120
   14ea0:	18c7883a 	add	r3,r3,r3
   14ea4:	29401dc4 	addi	r5,r5,119
   14ea8:	003f9506 	br	14d00 <__alt_data_end+0xfc014d00>
   14eac:	00c15504 	movi	r3,1364
   14eb0:	19400536 	bltu	r3,r5,14ec8 <_free_r+0x2f0>
   14eb4:	100ad4ba 	srli	r5,r2,18
   14eb8:	28c01f44 	addi	r3,r5,125
   14ebc:	18c7883a 	add	r3,r3,r3
   14ec0:	29401f04 	addi	r5,r5,124
   14ec4:	003f8e06 	br	14d00 <__alt_data_end+0xfc014d00>
   14ec8:	00c03f84 	movi	r3,254
   14ecc:	01401f84 	movi	r5,126
   14ed0:	003f8b06 	br	14d00 <__alt_data_end+0xfc014d00>
   14ed4:	10c00054 	ori	r3,r2,1
   14ed8:	30c00115 	stw	r3,4(r6)
   14edc:	308d883a 	add	r6,r6,r2
   14ee0:	30800015 	stw	r2,0(r6)
   14ee4:	003f7806 	br	14cc8 <__alt_data_end+0xfc014cc8>

00014ee8 <__sfvwrite_r>:
   14ee8:	30800217 	ldw	r2,8(r6)
   14eec:	10006726 	beq	r2,zero,1508c <__sfvwrite_r+0x1a4>
   14ef0:	28c0030b 	ldhu	r3,12(r5)
   14ef4:	defff404 	addi	sp,sp,-48
   14ef8:	dd400715 	stw	r21,28(sp)
   14efc:	dd000615 	stw	r20,24(sp)
   14f00:	dc000215 	stw	r16,8(sp)
   14f04:	dfc00b15 	stw	ra,44(sp)
   14f08:	df000a15 	stw	fp,40(sp)
   14f0c:	ddc00915 	stw	r23,36(sp)
   14f10:	dd800815 	stw	r22,32(sp)
   14f14:	dcc00515 	stw	r19,20(sp)
   14f18:	dc800415 	stw	r18,16(sp)
   14f1c:	dc400315 	stw	r17,12(sp)
   14f20:	1880020c 	andi	r2,r3,8
   14f24:	2821883a 	mov	r16,r5
   14f28:	202b883a 	mov	r21,r4
   14f2c:	3029883a 	mov	r20,r6
   14f30:	10002726 	beq	r2,zero,14fd0 <__sfvwrite_r+0xe8>
   14f34:	28800417 	ldw	r2,16(r5)
   14f38:	10002526 	beq	r2,zero,14fd0 <__sfvwrite_r+0xe8>
   14f3c:	1880008c 	andi	r2,r3,2
   14f40:	a4400017 	ldw	r17,0(r20)
   14f44:	10002a26 	beq	r2,zero,14ff0 <__sfvwrite_r+0x108>
   14f48:	05a00034 	movhi	r22,32768
   14f4c:	0027883a 	mov	r19,zero
   14f50:	0025883a 	mov	r18,zero
   14f54:	b5bf0004 	addi	r22,r22,-1024
   14f58:	980d883a 	mov	r6,r19
   14f5c:	a809883a 	mov	r4,r21
   14f60:	90004626 	beq	r18,zero,1507c <__sfvwrite_r+0x194>
   14f64:	900f883a 	mov	r7,r18
   14f68:	b480022e 	bgeu	r22,r18,14f74 <__sfvwrite_r+0x8c>
   14f6c:	01e00034 	movhi	r7,32768
   14f70:	39ff0004 	addi	r7,r7,-1024
   14f74:	80800917 	ldw	r2,36(r16)
   14f78:	81400717 	ldw	r5,28(r16)
   14f7c:	103ee83a 	callr	r2
   14f80:	00805a0e 	bge	zero,r2,150ec <__sfvwrite_r+0x204>
   14f84:	a0c00217 	ldw	r3,8(r20)
   14f88:	98a7883a 	add	r19,r19,r2
   14f8c:	90a5c83a 	sub	r18,r18,r2
   14f90:	1885c83a 	sub	r2,r3,r2
   14f94:	a0800215 	stw	r2,8(r20)
   14f98:	103fef1e 	bne	r2,zero,14f58 <__alt_data_end+0xfc014f58>
   14f9c:	0005883a 	mov	r2,zero
   14fa0:	dfc00b17 	ldw	ra,44(sp)
   14fa4:	df000a17 	ldw	fp,40(sp)
   14fa8:	ddc00917 	ldw	r23,36(sp)
   14fac:	dd800817 	ldw	r22,32(sp)
   14fb0:	dd400717 	ldw	r21,28(sp)
   14fb4:	dd000617 	ldw	r20,24(sp)
   14fb8:	dcc00517 	ldw	r19,20(sp)
   14fbc:	dc800417 	ldw	r18,16(sp)
   14fc0:	dc400317 	ldw	r17,12(sp)
   14fc4:	dc000217 	ldw	r16,8(sp)
   14fc8:	dec00c04 	addi	sp,sp,48
   14fcc:	f800283a 	ret
   14fd0:	800b883a 	mov	r5,r16
   14fd4:	a809883a 	mov	r4,r21
   14fd8:	0012a580 	call	12a58 <__swsetup_r>
   14fdc:	1000ee1e 	bne	r2,zero,15398 <__sfvwrite_r+0x4b0>
   14fe0:	80c0030b 	ldhu	r3,12(r16)
   14fe4:	a4400017 	ldw	r17,0(r20)
   14fe8:	1880008c 	andi	r2,r3,2
   14fec:	103fd61e 	bne	r2,zero,14f48 <__alt_data_end+0xfc014f48>
   14ff0:	1880004c 	andi	r2,r3,1
   14ff4:	1000421e 	bne	r2,zero,15100 <__sfvwrite_r+0x218>
   14ff8:	0039883a 	mov	fp,zero
   14ffc:	0025883a 	mov	r18,zero
   15000:	90001a26 	beq	r18,zero,1506c <__sfvwrite_r+0x184>
   15004:	1880800c 	andi	r2,r3,512
   15008:	84c00217 	ldw	r19,8(r16)
   1500c:	10002126 	beq	r2,zero,15094 <__sfvwrite_r+0x1ac>
   15010:	982f883a 	mov	r23,r19
   15014:	94c09636 	bltu	r18,r19,15270 <__sfvwrite_r+0x388>
   15018:	1881200c 	andi	r2,r3,1152
   1501c:	1000a11e 	bne	r2,zero,152a4 <__sfvwrite_r+0x3bc>
   15020:	81000017 	ldw	r4,0(r16)
   15024:	b80d883a 	mov	r6,r23
   15028:	e00b883a 	mov	r5,fp
   1502c:	00158b40 	call	158b4 <memmove>
   15030:	80c00217 	ldw	r3,8(r16)
   15034:	81000017 	ldw	r4,0(r16)
   15038:	9005883a 	mov	r2,r18
   1503c:	1ce7c83a 	sub	r19,r3,r19
   15040:	25cf883a 	add	r7,r4,r23
   15044:	84c00215 	stw	r19,8(r16)
   15048:	81c00015 	stw	r7,0(r16)
   1504c:	a0c00217 	ldw	r3,8(r20)
   15050:	e0b9883a 	add	fp,fp,r2
   15054:	90a5c83a 	sub	r18,r18,r2
   15058:	18a7c83a 	sub	r19,r3,r2
   1505c:	a4c00215 	stw	r19,8(r20)
   15060:	983fce26 	beq	r19,zero,14f9c <__alt_data_end+0xfc014f9c>
   15064:	80c0030b 	ldhu	r3,12(r16)
   15068:	903fe61e 	bne	r18,zero,15004 <__alt_data_end+0xfc015004>
   1506c:	8f000017 	ldw	fp,0(r17)
   15070:	8c800117 	ldw	r18,4(r17)
   15074:	8c400204 	addi	r17,r17,8
   15078:	003fe106 	br	15000 <__alt_data_end+0xfc015000>
   1507c:	8cc00017 	ldw	r19,0(r17)
   15080:	8c800117 	ldw	r18,4(r17)
   15084:	8c400204 	addi	r17,r17,8
   15088:	003fb306 	br	14f58 <__alt_data_end+0xfc014f58>
   1508c:	0005883a 	mov	r2,zero
   15090:	f800283a 	ret
   15094:	81000017 	ldw	r4,0(r16)
   15098:	80800417 	ldw	r2,16(r16)
   1509c:	11005a36 	bltu	r2,r4,15208 <__sfvwrite_r+0x320>
   150a0:	85c00517 	ldw	r23,20(r16)
   150a4:	95c05836 	bltu	r18,r23,15208 <__sfvwrite_r+0x320>
   150a8:	00a00034 	movhi	r2,32768
   150ac:	10bfffc4 	addi	r2,r2,-1
   150b0:	9009883a 	mov	r4,r18
   150b4:	1480012e 	bgeu	r2,r18,150bc <__sfvwrite_r+0x1d4>
   150b8:	1009883a 	mov	r4,r2
   150bc:	b80b883a 	mov	r5,r23
   150c0:	000caec0 	call	caec <__divsi3>
   150c4:	b80b883a 	mov	r5,r23
   150c8:	1009883a 	mov	r4,r2
   150cc:	000cca00 	call	cca0 <__mulsi3>
   150d0:	81400717 	ldw	r5,28(r16)
   150d4:	80c00917 	ldw	r3,36(r16)
   150d8:	100f883a 	mov	r7,r2
   150dc:	e00d883a 	mov	r6,fp
   150e0:	a809883a 	mov	r4,r21
   150e4:	183ee83a 	callr	r3
   150e8:	00bfd816 	blt	zero,r2,1504c <__alt_data_end+0xfc01504c>
   150ec:	8080030b 	ldhu	r2,12(r16)
   150f0:	10801014 	ori	r2,r2,64
   150f4:	8080030d 	sth	r2,12(r16)
   150f8:	00bfffc4 	movi	r2,-1
   150fc:	003fa806 	br	14fa0 <__alt_data_end+0xfc014fa0>
   15100:	0027883a 	mov	r19,zero
   15104:	0011883a 	mov	r8,zero
   15108:	0039883a 	mov	fp,zero
   1510c:	0025883a 	mov	r18,zero
   15110:	90001f26 	beq	r18,zero,15190 <__sfvwrite_r+0x2a8>
   15114:	40005a26 	beq	r8,zero,15280 <__sfvwrite_r+0x398>
   15118:	982d883a 	mov	r22,r19
   1511c:	94c0012e 	bgeu	r18,r19,15124 <__sfvwrite_r+0x23c>
   15120:	902d883a 	mov	r22,r18
   15124:	81000017 	ldw	r4,0(r16)
   15128:	80800417 	ldw	r2,16(r16)
   1512c:	b02f883a 	mov	r23,r22
   15130:	81c00517 	ldw	r7,20(r16)
   15134:	1100032e 	bgeu	r2,r4,15144 <__sfvwrite_r+0x25c>
   15138:	80c00217 	ldw	r3,8(r16)
   1513c:	38c7883a 	add	r3,r7,r3
   15140:	1d801816 	blt	r3,r22,151a4 <__sfvwrite_r+0x2bc>
   15144:	b1c03e16 	blt	r22,r7,15240 <__sfvwrite_r+0x358>
   15148:	80800917 	ldw	r2,36(r16)
   1514c:	81400717 	ldw	r5,28(r16)
   15150:	e00d883a 	mov	r6,fp
   15154:	da000115 	stw	r8,4(sp)
   15158:	a809883a 	mov	r4,r21
   1515c:	103ee83a 	callr	r2
   15160:	102f883a 	mov	r23,r2
   15164:	da000117 	ldw	r8,4(sp)
   15168:	00bfe00e 	bge	zero,r2,150ec <__alt_data_end+0xfc0150ec>
   1516c:	9de7c83a 	sub	r19,r19,r23
   15170:	98001f26 	beq	r19,zero,151f0 <__sfvwrite_r+0x308>
   15174:	a0800217 	ldw	r2,8(r20)
   15178:	e5f9883a 	add	fp,fp,r23
   1517c:	95e5c83a 	sub	r18,r18,r23
   15180:	15efc83a 	sub	r23,r2,r23
   15184:	a5c00215 	stw	r23,8(r20)
   15188:	b83f8426 	beq	r23,zero,14f9c <__alt_data_end+0xfc014f9c>
   1518c:	903fe11e 	bne	r18,zero,15114 <__alt_data_end+0xfc015114>
   15190:	8f000017 	ldw	fp,0(r17)
   15194:	8c800117 	ldw	r18,4(r17)
   15198:	0011883a 	mov	r8,zero
   1519c:	8c400204 	addi	r17,r17,8
   151a0:	003fdb06 	br	15110 <__alt_data_end+0xfc015110>
   151a4:	180d883a 	mov	r6,r3
   151a8:	e00b883a 	mov	r5,fp
   151ac:	da000115 	stw	r8,4(sp)
   151b0:	d8c00015 	stw	r3,0(sp)
   151b4:	00158b40 	call	158b4 <memmove>
   151b8:	d8c00017 	ldw	r3,0(sp)
   151bc:	80800017 	ldw	r2,0(r16)
   151c0:	800b883a 	mov	r5,r16
   151c4:	a809883a 	mov	r4,r21
   151c8:	10c5883a 	add	r2,r2,r3
   151cc:	80800015 	stw	r2,0(r16)
   151d0:	d8c00015 	stw	r3,0(sp)
   151d4:	00146780 	call	14678 <_fflush_r>
   151d8:	d8c00017 	ldw	r3,0(sp)
   151dc:	da000117 	ldw	r8,4(sp)
   151e0:	103fc21e 	bne	r2,zero,150ec <__alt_data_end+0xfc0150ec>
   151e4:	182f883a 	mov	r23,r3
   151e8:	9de7c83a 	sub	r19,r19,r23
   151ec:	983fe11e 	bne	r19,zero,15174 <__alt_data_end+0xfc015174>
   151f0:	800b883a 	mov	r5,r16
   151f4:	a809883a 	mov	r4,r21
   151f8:	00146780 	call	14678 <_fflush_r>
   151fc:	103fbb1e 	bne	r2,zero,150ec <__alt_data_end+0xfc0150ec>
   15200:	0011883a 	mov	r8,zero
   15204:	003fdb06 	br	15174 <__alt_data_end+0xfc015174>
   15208:	94c0012e 	bgeu	r18,r19,15210 <__sfvwrite_r+0x328>
   1520c:	9027883a 	mov	r19,r18
   15210:	980d883a 	mov	r6,r19
   15214:	e00b883a 	mov	r5,fp
   15218:	00158b40 	call	158b4 <memmove>
   1521c:	80800217 	ldw	r2,8(r16)
   15220:	80c00017 	ldw	r3,0(r16)
   15224:	14c5c83a 	sub	r2,r2,r19
   15228:	1cc7883a 	add	r3,r3,r19
   1522c:	80800215 	stw	r2,8(r16)
   15230:	80c00015 	stw	r3,0(r16)
   15234:	10004326 	beq	r2,zero,15344 <__sfvwrite_r+0x45c>
   15238:	9805883a 	mov	r2,r19
   1523c:	003f8306 	br	1504c <__alt_data_end+0xfc01504c>
   15240:	b00d883a 	mov	r6,r22
   15244:	e00b883a 	mov	r5,fp
   15248:	da000115 	stw	r8,4(sp)
   1524c:	00158b40 	call	158b4 <memmove>
   15250:	80800217 	ldw	r2,8(r16)
   15254:	80c00017 	ldw	r3,0(r16)
   15258:	da000117 	ldw	r8,4(sp)
   1525c:	1585c83a 	sub	r2,r2,r22
   15260:	1dad883a 	add	r22,r3,r22
   15264:	80800215 	stw	r2,8(r16)
   15268:	85800015 	stw	r22,0(r16)
   1526c:	003fbf06 	br	1516c <__alt_data_end+0xfc01516c>
   15270:	81000017 	ldw	r4,0(r16)
   15274:	9027883a 	mov	r19,r18
   15278:	902f883a 	mov	r23,r18
   1527c:	003f6906 	br	15024 <__alt_data_end+0xfc015024>
   15280:	900d883a 	mov	r6,r18
   15284:	01400284 	movi	r5,10
   15288:	e009883a 	mov	r4,fp
   1528c:	00157d00 	call	157d0 <memchr>
   15290:	10003e26 	beq	r2,zero,1538c <__sfvwrite_r+0x4a4>
   15294:	10800044 	addi	r2,r2,1
   15298:	1727c83a 	sub	r19,r2,fp
   1529c:	02000044 	movi	r8,1
   152a0:	003f9d06 	br	15118 <__alt_data_end+0xfc015118>
   152a4:	80800517 	ldw	r2,20(r16)
   152a8:	81400417 	ldw	r5,16(r16)
   152ac:	81c00017 	ldw	r7,0(r16)
   152b0:	10a7883a 	add	r19,r2,r2
   152b4:	9885883a 	add	r2,r19,r2
   152b8:	1026d7fa 	srli	r19,r2,31
   152bc:	396dc83a 	sub	r22,r7,r5
   152c0:	b1000044 	addi	r4,r22,1
   152c4:	9885883a 	add	r2,r19,r2
   152c8:	1027d07a 	srai	r19,r2,1
   152cc:	2485883a 	add	r2,r4,r18
   152d0:	980d883a 	mov	r6,r19
   152d4:	9880022e 	bgeu	r19,r2,152e0 <__sfvwrite_r+0x3f8>
   152d8:	1027883a 	mov	r19,r2
   152dc:	100d883a 	mov	r6,r2
   152e0:	18c1000c 	andi	r3,r3,1024
   152e4:	18001c26 	beq	r3,zero,15358 <__sfvwrite_r+0x470>
   152e8:	300b883a 	mov	r5,r6
   152ec:	a809883a 	mov	r4,r21
   152f0:	000d2740 	call	d274 <_malloc_r>
   152f4:	102f883a 	mov	r23,r2
   152f8:	10002926 	beq	r2,zero,153a0 <__sfvwrite_r+0x4b8>
   152fc:	81400417 	ldw	r5,16(r16)
   15300:	b00d883a 	mov	r6,r22
   15304:	1009883a 	mov	r4,r2
   15308:	000da800 	call	da80 <memcpy>
   1530c:	8080030b 	ldhu	r2,12(r16)
   15310:	00fedfc4 	movi	r3,-1153
   15314:	10c4703a 	and	r2,r2,r3
   15318:	10802014 	ori	r2,r2,128
   1531c:	8080030d 	sth	r2,12(r16)
   15320:	bd89883a 	add	r4,r23,r22
   15324:	9d8fc83a 	sub	r7,r19,r22
   15328:	85c00415 	stw	r23,16(r16)
   1532c:	84c00515 	stw	r19,20(r16)
   15330:	81000015 	stw	r4,0(r16)
   15334:	9027883a 	mov	r19,r18
   15338:	81c00215 	stw	r7,8(r16)
   1533c:	902f883a 	mov	r23,r18
   15340:	003f3806 	br	15024 <__alt_data_end+0xfc015024>
   15344:	800b883a 	mov	r5,r16
   15348:	a809883a 	mov	r4,r21
   1534c:	00146780 	call	14678 <_fflush_r>
   15350:	103fb926 	beq	r2,zero,15238 <__alt_data_end+0xfc015238>
   15354:	003f6506 	br	150ec <__alt_data_end+0xfc0150ec>
   15358:	a809883a 	mov	r4,r21
   1535c:	0016c300 	call	16c30 <_realloc_r>
   15360:	102f883a 	mov	r23,r2
   15364:	103fee1e 	bne	r2,zero,15320 <__alt_data_end+0xfc015320>
   15368:	81400417 	ldw	r5,16(r16)
   1536c:	a809883a 	mov	r4,r21
   15370:	0014bd80 	call	14bd8 <_free_r>
   15374:	8080030b 	ldhu	r2,12(r16)
   15378:	00ffdfc4 	movi	r3,-129
   1537c:	1884703a 	and	r2,r3,r2
   15380:	00c00304 	movi	r3,12
   15384:	a8c00015 	stw	r3,0(r21)
   15388:	003f5906 	br	150f0 <__alt_data_end+0xfc0150f0>
   1538c:	94c00044 	addi	r19,r18,1
   15390:	02000044 	movi	r8,1
   15394:	003f6006 	br	15118 <__alt_data_end+0xfc015118>
   15398:	00bfffc4 	movi	r2,-1
   1539c:	003f0006 	br	14fa0 <__alt_data_end+0xfc014fa0>
   153a0:	00800304 	movi	r2,12
   153a4:	a8800015 	stw	r2,0(r21)
   153a8:	8080030b 	ldhu	r2,12(r16)
   153ac:	003f5006 	br	150f0 <__alt_data_end+0xfc0150f0>

000153b0 <_fwalk>:
   153b0:	defff704 	addi	sp,sp,-36
   153b4:	dd000415 	stw	r20,16(sp)
   153b8:	dfc00815 	stw	ra,32(sp)
   153bc:	ddc00715 	stw	r23,28(sp)
   153c0:	dd800615 	stw	r22,24(sp)
   153c4:	dd400515 	stw	r21,20(sp)
   153c8:	dcc00315 	stw	r19,12(sp)
   153cc:	dc800215 	stw	r18,8(sp)
   153d0:	dc400115 	stw	r17,4(sp)
   153d4:	dc000015 	stw	r16,0(sp)
   153d8:	2500b804 	addi	r20,r4,736
   153dc:	a0002326 	beq	r20,zero,1546c <_fwalk+0xbc>
   153e0:	282b883a 	mov	r21,r5
   153e4:	002f883a 	mov	r23,zero
   153e8:	05800044 	movi	r22,1
   153ec:	04ffffc4 	movi	r19,-1
   153f0:	a4400117 	ldw	r17,4(r20)
   153f4:	a4800217 	ldw	r18,8(r20)
   153f8:	8c7fffc4 	addi	r17,r17,-1
   153fc:	88000d16 	blt	r17,zero,15434 <_fwalk+0x84>
   15400:	94000304 	addi	r16,r18,12
   15404:	94800384 	addi	r18,r18,14
   15408:	8080000b 	ldhu	r2,0(r16)
   1540c:	8c7fffc4 	addi	r17,r17,-1
   15410:	813ffd04 	addi	r4,r16,-12
   15414:	b080042e 	bgeu	r22,r2,15428 <_fwalk+0x78>
   15418:	9080000f 	ldh	r2,0(r18)
   1541c:	14c00226 	beq	r2,r19,15428 <_fwalk+0x78>
   15420:	a83ee83a 	callr	r21
   15424:	b8aeb03a 	or	r23,r23,r2
   15428:	84001a04 	addi	r16,r16,104
   1542c:	94801a04 	addi	r18,r18,104
   15430:	8cfff51e 	bne	r17,r19,15408 <__alt_data_end+0xfc015408>
   15434:	a5000017 	ldw	r20,0(r20)
   15438:	a03fed1e 	bne	r20,zero,153f0 <__alt_data_end+0xfc0153f0>
   1543c:	b805883a 	mov	r2,r23
   15440:	dfc00817 	ldw	ra,32(sp)
   15444:	ddc00717 	ldw	r23,28(sp)
   15448:	dd800617 	ldw	r22,24(sp)
   1544c:	dd400517 	ldw	r21,20(sp)
   15450:	dd000417 	ldw	r20,16(sp)
   15454:	dcc00317 	ldw	r19,12(sp)
   15458:	dc800217 	ldw	r18,8(sp)
   1545c:	dc400117 	ldw	r17,4(sp)
   15460:	dc000017 	ldw	r16,0(sp)
   15464:	dec00904 	addi	sp,sp,36
   15468:	f800283a 	ret
   1546c:	002f883a 	mov	r23,zero
   15470:	003ff206 	br	1543c <__alt_data_end+0xfc01543c>

00015474 <_fwalk_reent>:
   15474:	defff704 	addi	sp,sp,-36
   15478:	dd000415 	stw	r20,16(sp)
   1547c:	dfc00815 	stw	ra,32(sp)
   15480:	ddc00715 	stw	r23,28(sp)
   15484:	dd800615 	stw	r22,24(sp)
   15488:	dd400515 	stw	r21,20(sp)
   1548c:	dcc00315 	stw	r19,12(sp)
   15490:	dc800215 	stw	r18,8(sp)
   15494:	dc400115 	stw	r17,4(sp)
   15498:	dc000015 	stw	r16,0(sp)
   1549c:	2500b804 	addi	r20,r4,736
   154a0:	a0002326 	beq	r20,zero,15530 <_fwalk_reent+0xbc>
   154a4:	282b883a 	mov	r21,r5
   154a8:	2027883a 	mov	r19,r4
   154ac:	002f883a 	mov	r23,zero
   154b0:	05800044 	movi	r22,1
   154b4:	04bfffc4 	movi	r18,-1
   154b8:	a4400117 	ldw	r17,4(r20)
   154bc:	a4000217 	ldw	r16,8(r20)
   154c0:	8c7fffc4 	addi	r17,r17,-1
   154c4:	88000c16 	blt	r17,zero,154f8 <_fwalk_reent+0x84>
   154c8:	84000304 	addi	r16,r16,12
   154cc:	8080000b 	ldhu	r2,0(r16)
   154d0:	8c7fffc4 	addi	r17,r17,-1
   154d4:	817ffd04 	addi	r5,r16,-12
   154d8:	b080052e 	bgeu	r22,r2,154f0 <_fwalk_reent+0x7c>
   154dc:	8080008f 	ldh	r2,2(r16)
   154e0:	9809883a 	mov	r4,r19
   154e4:	14800226 	beq	r2,r18,154f0 <_fwalk_reent+0x7c>
   154e8:	a83ee83a 	callr	r21
   154ec:	b8aeb03a 	or	r23,r23,r2
   154f0:	84001a04 	addi	r16,r16,104
   154f4:	8cbff51e 	bne	r17,r18,154cc <__alt_data_end+0xfc0154cc>
   154f8:	a5000017 	ldw	r20,0(r20)
   154fc:	a03fee1e 	bne	r20,zero,154b8 <__alt_data_end+0xfc0154b8>
   15500:	b805883a 	mov	r2,r23
   15504:	dfc00817 	ldw	ra,32(sp)
   15508:	ddc00717 	ldw	r23,28(sp)
   1550c:	dd800617 	ldw	r22,24(sp)
   15510:	dd400517 	ldw	r21,20(sp)
   15514:	dd000417 	ldw	r20,16(sp)
   15518:	dcc00317 	ldw	r19,12(sp)
   1551c:	dc800217 	ldw	r18,8(sp)
   15520:	dc400117 	ldw	r17,4(sp)
   15524:	dc000017 	ldw	r16,0(sp)
   15528:	dec00904 	addi	sp,sp,36
   1552c:	f800283a 	ret
   15530:	002f883a 	mov	r23,zero
   15534:	003ff206 	br	15500 <__alt_data_end+0xfc015500>

00015538 <_setlocale_r>:
   15538:	30001b26 	beq	r6,zero,155a8 <_setlocale_r+0x70>
   1553c:	014000f4 	movhi	r5,3
   15540:	defffe04 	addi	sp,sp,-8
   15544:	29657b04 	addi	r5,r5,-27156
   15548:	3009883a 	mov	r4,r6
   1554c:	dc000015 	stw	r16,0(sp)
   15550:	dfc00115 	stw	ra,4(sp)
   15554:	3021883a 	mov	r16,r6
   15558:	000e26c0 	call	e26c <strcmp>
   1555c:	1000061e 	bne	r2,zero,15578 <_setlocale_r+0x40>
   15560:	008000f4 	movhi	r2,3
   15564:	10a55404 	addi	r2,r2,-27312
   15568:	dfc00117 	ldw	ra,4(sp)
   1556c:	dc000017 	ldw	r16,0(sp)
   15570:	dec00204 	addi	sp,sp,8
   15574:	f800283a 	ret
   15578:	014000f4 	movhi	r5,3
   1557c:	29655404 	addi	r5,r5,-27312
   15580:	8009883a 	mov	r4,r16
   15584:	000e26c0 	call	e26c <strcmp>
   15588:	103ff526 	beq	r2,zero,15560 <__alt_data_end+0xfc015560>
   1558c:	014000f4 	movhi	r5,3
   15590:	29655e04 	addi	r5,r5,-27272
   15594:	8009883a 	mov	r4,r16
   15598:	000e26c0 	call	e26c <strcmp>
   1559c:	103ff026 	beq	r2,zero,15560 <__alt_data_end+0xfc015560>
   155a0:	0005883a 	mov	r2,zero
   155a4:	003ff006 	br	15568 <__alt_data_end+0xfc015568>
   155a8:	008000f4 	movhi	r2,3
   155ac:	10a55404 	addi	r2,r2,-27312
   155b0:	f800283a 	ret

000155b4 <__locale_charset>:
   155b4:	008000f4 	movhi	r2,3
   155b8:	10a84204 	addi	r2,r2,-24312
   155bc:	f800283a 	ret

000155c0 <__locale_mb_cur_max>:
   155c0:	008000f4 	movhi	r2,3
   155c4:	10b29804 	addi	r2,r2,-13728
   155c8:	10800017 	ldw	r2,0(r2)
   155cc:	f800283a 	ret

000155d0 <__locale_msgcharset>:
   155d0:	008000f4 	movhi	r2,3
   155d4:	10a83a04 	addi	r2,r2,-24344
   155d8:	f800283a 	ret

000155dc <__locale_cjk_lang>:
   155dc:	0005883a 	mov	r2,zero
   155e0:	f800283a 	ret

000155e4 <_localeconv_r>:
   155e4:	008000f4 	movhi	r2,3
   155e8:	10a84a04 	addi	r2,r2,-24280
   155ec:	f800283a 	ret

000155f0 <setlocale>:
   155f0:	008000f4 	movhi	r2,3
   155f4:	10b29504 	addi	r2,r2,-13740
   155f8:	280d883a 	mov	r6,r5
   155fc:	200b883a 	mov	r5,r4
   15600:	11000017 	ldw	r4,0(r2)
   15604:	00155381 	jmpi	15538 <_setlocale_r>

00015608 <localeconv>:
   15608:	008000f4 	movhi	r2,3
   1560c:	10a84a04 	addi	r2,r2,-24280
   15610:	f800283a 	ret

00015614 <__smakebuf_r>:
   15614:	2880030b 	ldhu	r2,12(r5)
   15618:	10c0008c 	andi	r3,r2,2
   1561c:	1800411e 	bne	r3,zero,15724 <__smakebuf_r+0x110>
   15620:	deffec04 	addi	sp,sp,-80
   15624:	dc000f15 	stw	r16,60(sp)
   15628:	2821883a 	mov	r16,r5
   1562c:	2940038f 	ldh	r5,14(r5)
   15630:	dc401015 	stw	r17,64(sp)
   15634:	dfc01315 	stw	ra,76(sp)
   15638:	dcc01215 	stw	r19,72(sp)
   1563c:	dc801115 	stw	r18,68(sp)
   15640:	2023883a 	mov	r17,r4
   15644:	28001c16 	blt	r5,zero,156b8 <__smakebuf_r+0xa4>
   15648:	d80d883a 	mov	r6,sp
   1564c:	001a5a00 	call	1a5a0 <_fstat_r>
   15650:	10001816 	blt	r2,zero,156b4 <__smakebuf_r+0xa0>
   15654:	d8800117 	ldw	r2,4(sp)
   15658:	00e00014 	movui	r3,32768
   1565c:	10bc000c 	andi	r2,r2,61440
   15660:	14c80020 	cmpeqi	r19,r2,8192
   15664:	10c03726 	beq	r2,r3,15744 <__smakebuf_r+0x130>
   15668:	80c0030b 	ldhu	r3,12(r16)
   1566c:	18c20014 	ori	r3,r3,2048
   15670:	80c0030d 	sth	r3,12(r16)
   15674:	00c80004 	movi	r3,8192
   15678:	10c0521e 	bne	r2,r3,157c4 <__smakebuf_r+0x1b0>
   1567c:	8140038f 	ldh	r5,14(r16)
   15680:	8809883a 	mov	r4,r17
   15684:	001a5fc0 	call	1a5fc <_isatty_r>
   15688:	10004c26 	beq	r2,zero,157bc <__smakebuf_r+0x1a8>
   1568c:	8080030b 	ldhu	r2,12(r16)
   15690:	80c010c4 	addi	r3,r16,67
   15694:	80c00015 	stw	r3,0(r16)
   15698:	10800054 	ori	r2,r2,1
   1569c:	8080030d 	sth	r2,12(r16)
   156a0:	00800044 	movi	r2,1
   156a4:	80c00415 	stw	r3,16(r16)
   156a8:	80800515 	stw	r2,20(r16)
   156ac:	04810004 	movi	r18,1024
   156b0:	00000706 	br	156d0 <__smakebuf_r+0xbc>
   156b4:	8080030b 	ldhu	r2,12(r16)
   156b8:	10c0200c 	andi	r3,r2,128
   156bc:	18001f1e 	bne	r3,zero,1573c <__smakebuf_r+0x128>
   156c0:	04810004 	movi	r18,1024
   156c4:	10820014 	ori	r2,r2,2048
   156c8:	8080030d 	sth	r2,12(r16)
   156cc:	0027883a 	mov	r19,zero
   156d0:	900b883a 	mov	r5,r18
   156d4:	8809883a 	mov	r4,r17
   156d8:	000d2740 	call	d274 <_malloc_r>
   156dc:	10002c26 	beq	r2,zero,15790 <__smakebuf_r+0x17c>
   156e0:	80c0030b 	ldhu	r3,12(r16)
   156e4:	01000074 	movhi	r4,1
   156e8:	2111c304 	addi	r4,r4,18188
   156ec:	89000f15 	stw	r4,60(r17)
   156f0:	18c02014 	ori	r3,r3,128
   156f4:	80c0030d 	sth	r3,12(r16)
   156f8:	80800015 	stw	r2,0(r16)
   156fc:	80800415 	stw	r2,16(r16)
   15700:	84800515 	stw	r18,20(r16)
   15704:	98001a1e 	bne	r19,zero,15770 <__smakebuf_r+0x15c>
   15708:	dfc01317 	ldw	ra,76(sp)
   1570c:	dcc01217 	ldw	r19,72(sp)
   15710:	dc801117 	ldw	r18,68(sp)
   15714:	dc401017 	ldw	r17,64(sp)
   15718:	dc000f17 	ldw	r16,60(sp)
   1571c:	dec01404 	addi	sp,sp,80
   15720:	f800283a 	ret
   15724:	288010c4 	addi	r2,r5,67
   15728:	28800015 	stw	r2,0(r5)
   1572c:	28800415 	stw	r2,16(r5)
   15730:	00800044 	movi	r2,1
   15734:	28800515 	stw	r2,20(r5)
   15738:	f800283a 	ret
   1573c:	04801004 	movi	r18,64
   15740:	003fe006 	br	156c4 <__alt_data_end+0xfc0156c4>
   15744:	81000a17 	ldw	r4,40(r16)
   15748:	00c00074 	movhi	r3,1
   1574c:	18dcb804 	addi	r3,r3,29408
   15750:	20ffc51e 	bne	r4,r3,15668 <__alt_data_end+0xfc015668>
   15754:	8080030b 	ldhu	r2,12(r16)
   15758:	04810004 	movi	r18,1024
   1575c:	84801315 	stw	r18,76(r16)
   15760:	1484b03a 	or	r2,r2,r18
   15764:	8080030d 	sth	r2,12(r16)
   15768:	0027883a 	mov	r19,zero
   1576c:	003fd806 	br	156d0 <__alt_data_end+0xfc0156d0>
   15770:	8140038f 	ldh	r5,14(r16)
   15774:	8809883a 	mov	r4,r17
   15778:	001a5fc0 	call	1a5fc <_isatty_r>
   1577c:	103fe226 	beq	r2,zero,15708 <__alt_data_end+0xfc015708>
   15780:	8080030b 	ldhu	r2,12(r16)
   15784:	10800054 	ori	r2,r2,1
   15788:	8080030d 	sth	r2,12(r16)
   1578c:	003fde06 	br	15708 <__alt_data_end+0xfc015708>
   15790:	8080030b 	ldhu	r2,12(r16)
   15794:	10c0800c 	andi	r3,r2,512
   15798:	183fdb1e 	bne	r3,zero,15708 <__alt_data_end+0xfc015708>
   1579c:	10800094 	ori	r2,r2,2
   157a0:	80c010c4 	addi	r3,r16,67
   157a4:	8080030d 	sth	r2,12(r16)
   157a8:	00800044 	movi	r2,1
   157ac:	80c00015 	stw	r3,0(r16)
   157b0:	80c00415 	stw	r3,16(r16)
   157b4:	80800515 	stw	r2,20(r16)
   157b8:	003fd306 	br	15708 <__alt_data_end+0xfc015708>
   157bc:	04810004 	movi	r18,1024
   157c0:	003fc306 	br	156d0 <__alt_data_end+0xfc0156d0>
   157c4:	0027883a 	mov	r19,zero
   157c8:	04810004 	movi	r18,1024
   157cc:	003fc006 	br	156d0 <__alt_data_end+0xfc0156d0>

000157d0 <memchr>:
   157d0:	208000cc 	andi	r2,r4,3
   157d4:	280f883a 	mov	r7,r5
   157d8:	10003426 	beq	r2,zero,158ac <memchr+0xdc>
   157dc:	30bfffc4 	addi	r2,r6,-1
   157e0:	30001a26 	beq	r6,zero,1584c <memchr+0x7c>
   157e4:	20c00003 	ldbu	r3,0(r4)
   157e8:	29803fcc 	andi	r6,r5,255
   157ec:	30c0051e 	bne	r6,r3,15804 <memchr+0x34>
   157f0:	00001806 	br	15854 <memchr+0x84>
   157f4:	10001526 	beq	r2,zero,1584c <memchr+0x7c>
   157f8:	20c00003 	ldbu	r3,0(r4)
   157fc:	10bfffc4 	addi	r2,r2,-1
   15800:	30c01426 	beq	r6,r3,15854 <memchr+0x84>
   15804:	21000044 	addi	r4,r4,1
   15808:	20c000cc 	andi	r3,r4,3
   1580c:	183ff91e 	bne	r3,zero,157f4 <__alt_data_end+0xfc0157f4>
   15810:	020000c4 	movi	r8,3
   15814:	40801136 	bltu	r8,r2,1585c <memchr+0x8c>
   15818:	10000c26 	beq	r2,zero,1584c <memchr+0x7c>
   1581c:	20c00003 	ldbu	r3,0(r4)
   15820:	29403fcc 	andi	r5,r5,255
   15824:	28c00b26 	beq	r5,r3,15854 <memchr+0x84>
   15828:	20c00044 	addi	r3,r4,1
   1582c:	39803fcc 	andi	r6,r7,255
   15830:	2089883a 	add	r4,r4,r2
   15834:	00000306 	br	15844 <memchr+0x74>
   15838:	18c00044 	addi	r3,r3,1
   1583c:	197fffc3 	ldbu	r5,-1(r3)
   15840:	31400526 	beq	r6,r5,15858 <memchr+0x88>
   15844:	1805883a 	mov	r2,r3
   15848:	20fffb1e 	bne	r4,r3,15838 <__alt_data_end+0xfc015838>
   1584c:	0005883a 	mov	r2,zero
   15850:	f800283a 	ret
   15854:	2005883a 	mov	r2,r4
   15858:	f800283a 	ret
   1585c:	28c03fcc 	andi	r3,r5,255
   15860:	1812923a 	slli	r9,r3,8
   15864:	02ffbff4 	movhi	r11,65279
   15868:	02a02074 	movhi	r10,32897
   1586c:	48d2b03a 	or	r9,r9,r3
   15870:	4806943a 	slli	r3,r9,16
   15874:	5affbfc4 	addi	r11,r11,-257
   15878:	52a02004 	addi	r10,r10,-32640
   1587c:	48d2b03a 	or	r9,r9,r3
   15880:	20c00017 	ldw	r3,0(r4)
   15884:	48c6f03a 	xor	r3,r9,r3
   15888:	1acd883a 	add	r6,r3,r11
   1588c:	00c6303a 	nor	r3,zero,r3
   15890:	30c6703a 	and	r3,r6,r3
   15894:	1a86703a 	and	r3,r3,r10
   15898:	183fe01e 	bne	r3,zero,1581c <__alt_data_end+0xfc01581c>
   1589c:	10bfff04 	addi	r2,r2,-4
   158a0:	21000104 	addi	r4,r4,4
   158a4:	40bff636 	bltu	r8,r2,15880 <__alt_data_end+0xfc015880>
   158a8:	003fdb06 	br	15818 <__alt_data_end+0xfc015818>
   158ac:	3005883a 	mov	r2,r6
   158b0:	003fd706 	br	15810 <__alt_data_end+0xfc015810>

000158b4 <memmove>:
   158b4:	2005883a 	mov	r2,r4
   158b8:	29000b2e 	bgeu	r5,r4,158e8 <memmove+0x34>
   158bc:	298f883a 	add	r7,r5,r6
   158c0:	21c0092e 	bgeu	r4,r7,158e8 <memmove+0x34>
   158c4:	2187883a 	add	r3,r4,r6
   158c8:	198bc83a 	sub	r5,r3,r6
   158cc:	30004826 	beq	r6,zero,159f0 <memmove+0x13c>
   158d0:	39ffffc4 	addi	r7,r7,-1
   158d4:	39000003 	ldbu	r4,0(r7)
   158d8:	18ffffc4 	addi	r3,r3,-1
   158dc:	19000005 	stb	r4,0(r3)
   158e0:	28fffb1e 	bne	r5,r3,158d0 <__alt_data_end+0xfc0158d0>
   158e4:	f800283a 	ret
   158e8:	00c003c4 	movi	r3,15
   158ec:	1980412e 	bgeu	r3,r6,159f4 <memmove+0x140>
   158f0:	2886b03a 	or	r3,r5,r2
   158f4:	18c000cc 	andi	r3,r3,3
   158f8:	1800401e 	bne	r3,zero,159fc <memmove+0x148>
   158fc:	33fffc04 	addi	r15,r6,-16
   15900:	781ed13a 	srli	r15,r15,4
   15904:	28c00104 	addi	r3,r5,4
   15908:	13400104 	addi	r13,r2,4
   1590c:	781c913a 	slli	r14,r15,4
   15910:	2b000204 	addi	r12,r5,8
   15914:	12c00204 	addi	r11,r2,8
   15918:	73800504 	addi	r14,r14,20
   1591c:	2a800304 	addi	r10,r5,12
   15920:	12400304 	addi	r9,r2,12
   15924:	2b9d883a 	add	r14,r5,r14
   15928:	2811883a 	mov	r8,r5
   1592c:	100f883a 	mov	r7,r2
   15930:	41000017 	ldw	r4,0(r8)
   15934:	39c00404 	addi	r7,r7,16
   15938:	18c00404 	addi	r3,r3,16
   1593c:	393ffc15 	stw	r4,-16(r7)
   15940:	193ffc17 	ldw	r4,-16(r3)
   15944:	6b400404 	addi	r13,r13,16
   15948:	5ac00404 	addi	r11,r11,16
   1594c:	693ffc15 	stw	r4,-16(r13)
   15950:	61000017 	ldw	r4,0(r12)
   15954:	4a400404 	addi	r9,r9,16
   15958:	42000404 	addi	r8,r8,16
   1595c:	593ffc15 	stw	r4,-16(r11)
   15960:	51000017 	ldw	r4,0(r10)
   15964:	63000404 	addi	r12,r12,16
   15968:	52800404 	addi	r10,r10,16
   1596c:	493ffc15 	stw	r4,-16(r9)
   15970:	1bbfef1e 	bne	r3,r14,15930 <__alt_data_end+0xfc015930>
   15974:	79000044 	addi	r4,r15,1
   15978:	2008913a 	slli	r4,r4,4
   1597c:	328003cc 	andi	r10,r6,15
   15980:	02c000c4 	movi	r11,3
   15984:	1107883a 	add	r3,r2,r4
   15988:	290b883a 	add	r5,r5,r4
   1598c:	5a801e2e 	bgeu	r11,r10,15a08 <memmove+0x154>
   15990:	1813883a 	mov	r9,r3
   15994:	2811883a 	mov	r8,r5
   15998:	500f883a 	mov	r7,r10
   1599c:	41000017 	ldw	r4,0(r8)
   159a0:	4a400104 	addi	r9,r9,4
   159a4:	39ffff04 	addi	r7,r7,-4
   159a8:	493fff15 	stw	r4,-4(r9)
   159ac:	42000104 	addi	r8,r8,4
   159b0:	59fffa36 	bltu	r11,r7,1599c <__alt_data_end+0xfc01599c>
   159b4:	513fff04 	addi	r4,r10,-4
   159b8:	2008d0ba 	srli	r4,r4,2
   159bc:	318000cc 	andi	r6,r6,3
   159c0:	21000044 	addi	r4,r4,1
   159c4:	2109883a 	add	r4,r4,r4
   159c8:	2109883a 	add	r4,r4,r4
   159cc:	1907883a 	add	r3,r3,r4
   159d0:	290b883a 	add	r5,r5,r4
   159d4:	30000b26 	beq	r6,zero,15a04 <memmove+0x150>
   159d8:	198d883a 	add	r6,r3,r6
   159dc:	29c00003 	ldbu	r7,0(r5)
   159e0:	18c00044 	addi	r3,r3,1
   159e4:	29400044 	addi	r5,r5,1
   159e8:	19ffffc5 	stb	r7,-1(r3)
   159ec:	19bffb1e 	bne	r3,r6,159dc <__alt_data_end+0xfc0159dc>
   159f0:	f800283a 	ret
   159f4:	1007883a 	mov	r3,r2
   159f8:	003ff606 	br	159d4 <__alt_data_end+0xfc0159d4>
   159fc:	1007883a 	mov	r3,r2
   15a00:	003ff506 	br	159d8 <__alt_data_end+0xfc0159d8>
   15a04:	f800283a 	ret
   15a08:	500d883a 	mov	r6,r10
   15a0c:	003ff106 	br	159d4 <__alt_data_end+0xfc0159d4>

00015a10 <_Balloc>:
   15a10:	20801317 	ldw	r2,76(r4)
   15a14:	defffc04 	addi	sp,sp,-16
   15a18:	dc400115 	stw	r17,4(sp)
   15a1c:	dc000015 	stw	r16,0(sp)
   15a20:	dfc00315 	stw	ra,12(sp)
   15a24:	dc800215 	stw	r18,8(sp)
   15a28:	2023883a 	mov	r17,r4
   15a2c:	2821883a 	mov	r16,r5
   15a30:	10000f26 	beq	r2,zero,15a70 <_Balloc+0x60>
   15a34:	8407883a 	add	r3,r16,r16
   15a38:	18c7883a 	add	r3,r3,r3
   15a3c:	10c7883a 	add	r3,r2,r3
   15a40:	18800017 	ldw	r2,0(r3)
   15a44:	10001126 	beq	r2,zero,15a8c <_Balloc+0x7c>
   15a48:	11000017 	ldw	r4,0(r2)
   15a4c:	19000015 	stw	r4,0(r3)
   15a50:	10000415 	stw	zero,16(r2)
   15a54:	10000315 	stw	zero,12(r2)
   15a58:	dfc00317 	ldw	ra,12(sp)
   15a5c:	dc800217 	ldw	r18,8(sp)
   15a60:	dc400117 	ldw	r17,4(sp)
   15a64:	dc000017 	ldw	r16,0(sp)
   15a68:	dec00404 	addi	sp,sp,16
   15a6c:	f800283a 	ret
   15a70:	01800844 	movi	r6,33
   15a74:	01400104 	movi	r5,4
   15a78:	001a1b80 	call	1a1b8 <_calloc_r>
   15a7c:	88801315 	stw	r2,76(r17)
   15a80:	103fec1e 	bne	r2,zero,15a34 <__alt_data_end+0xfc015a34>
   15a84:	0005883a 	mov	r2,zero
   15a88:	003ff306 	br	15a58 <__alt_data_end+0xfc015a58>
   15a8c:	01400044 	movi	r5,1
   15a90:	2c24983a 	sll	r18,r5,r16
   15a94:	8809883a 	mov	r4,r17
   15a98:	91800144 	addi	r6,r18,5
   15a9c:	318d883a 	add	r6,r6,r6
   15aa0:	318d883a 	add	r6,r6,r6
   15aa4:	001a1b80 	call	1a1b8 <_calloc_r>
   15aa8:	103ff626 	beq	r2,zero,15a84 <__alt_data_end+0xfc015a84>
   15aac:	14000115 	stw	r16,4(r2)
   15ab0:	14800215 	stw	r18,8(r2)
   15ab4:	003fe606 	br	15a50 <__alt_data_end+0xfc015a50>

00015ab8 <_Bfree>:
   15ab8:	28000826 	beq	r5,zero,15adc <_Bfree+0x24>
   15abc:	28c00117 	ldw	r3,4(r5)
   15ac0:	20801317 	ldw	r2,76(r4)
   15ac4:	18c7883a 	add	r3,r3,r3
   15ac8:	18c7883a 	add	r3,r3,r3
   15acc:	10c5883a 	add	r2,r2,r3
   15ad0:	10c00017 	ldw	r3,0(r2)
   15ad4:	28c00015 	stw	r3,0(r5)
   15ad8:	11400015 	stw	r5,0(r2)
   15adc:	f800283a 	ret

00015ae0 <__multadd>:
   15ae0:	defff704 	addi	sp,sp,-36
   15ae4:	dc800215 	stw	r18,8(sp)
   15ae8:	2c800417 	ldw	r18,16(r5)
   15aec:	dd800615 	stw	r22,24(sp)
   15af0:	dd400515 	stw	r21,20(sp)
   15af4:	dd000415 	stw	r20,16(sp)
   15af8:	dcc00315 	stw	r19,12(sp)
   15afc:	dc400115 	stw	r17,4(sp)
   15b00:	dc000015 	stw	r16,0(sp)
   15b04:	dfc00815 	stw	ra,32(sp)
   15b08:	ddc00715 	stw	r23,28(sp)
   15b0c:	2827883a 	mov	r19,r5
   15b10:	2029883a 	mov	r20,r4
   15b14:	3023883a 	mov	r17,r6
   15b18:	3821883a 	mov	r16,r7
   15b1c:	2d400504 	addi	r21,r5,20
   15b20:	002d883a 	mov	r22,zero
   15b24:	adc00017 	ldw	r23,0(r21)
   15b28:	880b883a 	mov	r5,r17
   15b2c:	ad400104 	addi	r21,r21,4
   15b30:	b93fffcc 	andi	r4,r23,65535
   15b34:	000cca00 	call	cca0 <__mulsi3>
   15b38:	b808d43a 	srli	r4,r23,16
   15b3c:	880b883a 	mov	r5,r17
   15b40:	1421883a 	add	r16,r2,r16
   15b44:	000cca00 	call	cca0 <__mulsi3>
   15b48:	800ed43a 	srli	r7,r16,16
   15b4c:	80ffffcc 	andi	r3,r16,65535
   15b50:	b5800044 	addi	r22,r22,1
   15b54:	11c5883a 	add	r2,r2,r7
   15b58:	100e943a 	slli	r7,r2,16
   15b5c:	1020d43a 	srli	r16,r2,16
   15b60:	38c7883a 	add	r3,r7,r3
   15b64:	a8ffff15 	stw	r3,-4(r21)
   15b68:	b4bfee16 	blt	r22,r18,15b24 <__alt_data_end+0xfc015b24>
   15b6c:	80000926 	beq	r16,zero,15b94 <__multadd+0xb4>
   15b70:	98800217 	ldw	r2,8(r19)
   15b74:	9080130e 	bge	r18,r2,15bc4 <__multadd+0xe4>
   15b78:	90800144 	addi	r2,r18,5
   15b7c:	1085883a 	add	r2,r2,r2
   15b80:	1085883a 	add	r2,r2,r2
   15b84:	9885883a 	add	r2,r19,r2
   15b88:	14000015 	stw	r16,0(r2)
   15b8c:	94800044 	addi	r18,r18,1
   15b90:	9c800415 	stw	r18,16(r19)
   15b94:	9805883a 	mov	r2,r19
   15b98:	dfc00817 	ldw	ra,32(sp)
   15b9c:	ddc00717 	ldw	r23,28(sp)
   15ba0:	dd800617 	ldw	r22,24(sp)
   15ba4:	dd400517 	ldw	r21,20(sp)
   15ba8:	dd000417 	ldw	r20,16(sp)
   15bac:	dcc00317 	ldw	r19,12(sp)
   15bb0:	dc800217 	ldw	r18,8(sp)
   15bb4:	dc400117 	ldw	r17,4(sp)
   15bb8:	dc000017 	ldw	r16,0(sp)
   15bbc:	dec00904 	addi	sp,sp,36
   15bc0:	f800283a 	ret
   15bc4:	99400117 	ldw	r5,4(r19)
   15bc8:	a009883a 	mov	r4,r20
   15bcc:	29400044 	addi	r5,r5,1
   15bd0:	0015a100 	call	15a10 <_Balloc>
   15bd4:	99800417 	ldw	r6,16(r19)
   15bd8:	99400304 	addi	r5,r19,12
   15bdc:	11000304 	addi	r4,r2,12
   15be0:	31800084 	addi	r6,r6,2
   15be4:	318d883a 	add	r6,r6,r6
   15be8:	318d883a 	add	r6,r6,r6
   15bec:	1023883a 	mov	r17,r2
   15bf0:	000da800 	call	da80 <memcpy>
   15bf4:	98000a26 	beq	r19,zero,15c20 <__multadd+0x140>
   15bf8:	98c00117 	ldw	r3,4(r19)
   15bfc:	a0801317 	ldw	r2,76(r20)
   15c00:	18c7883a 	add	r3,r3,r3
   15c04:	18c7883a 	add	r3,r3,r3
   15c08:	10c5883a 	add	r2,r2,r3
   15c0c:	10c00017 	ldw	r3,0(r2)
   15c10:	98c00015 	stw	r3,0(r19)
   15c14:	14c00015 	stw	r19,0(r2)
   15c18:	8827883a 	mov	r19,r17
   15c1c:	003fd606 	br	15b78 <__alt_data_end+0xfc015b78>
   15c20:	8827883a 	mov	r19,r17
   15c24:	003fd406 	br	15b78 <__alt_data_end+0xfc015b78>

00015c28 <__s2b>:
   15c28:	defff904 	addi	sp,sp,-28
   15c2c:	dc400115 	stw	r17,4(sp)
   15c30:	dc000015 	stw	r16,0(sp)
   15c34:	2023883a 	mov	r17,r4
   15c38:	2821883a 	mov	r16,r5
   15c3c:	39000204 	addi	r4,r7,8
   15c40:	01400244 	movi	r5,9
   15c44:	dcc00315 	stw	r19,12(sp)
   15c48:	dc800215 	stw	r18,8(sp)
   15c4c:	dfc00615 	stw	ra,24(sp)
   15c50:	dd400515 	stw	r21,20(sp)
   15c54:	dd000415 	stw	r20,16(sp)
   15c58:	3825883a 	mov	r18,r7
   15c5c:	3027883a 	mov	r19,r6
   15c60:	000caec0 	call	caec <__divsi3>
   15c64:	00c00044 	movi	r3,1
   15c68:	000b883a 	mov	r5,zero
   15c6c:	1880030e 	bge	r3,r2,15c7c <__s2b+0x54>
   15c70:	18c7883a 	add	r3,r3,r3
   15c74:	29400044 	addi	r5,r5,1
   15c78:	18bffd16 	blt	r3,r2,15c70 <__alt_data_end+0xfc015c70>
   15c7c:	8809883a 	mov	r4,r17
   15c80:	0015a100 	call	15a10 <_Balloc>
   15c84:	d8c00717 	ldw	r3,28(sp)
   15c88:	10c00515 	stw	r3,20(r2)
   15c8c:	00c00044 	movi	r3,1
   15c90:	10c00415 	stw	r3,16(r2)
   15c94:	00c00244 	movi	r3,9
   15c98:	1cc0210e 	bge	r3,r19,15d20 <__s2b+0xf8>
   15c9c:	80eb883a 	add	r21,r16,r3
   15ca0:	a829883a 	mov	r20,r21
   15ca4:	84e1883a 	add	r16,r16,r19
   15ca8:	a1c00007 	ldb	r7,0(r20)
   15cac:	01800284 	movi	r6,10
   15cb0:	a5000044 	addi	r20,r20,1
   15cb4:	100b883a 	mov	r5,r2
   15cb8:	39fff404 	addi	r7,r7,-48
   15cbc:	8809883a 	mov	r4,r17
   15cc0:	0015ae00 	call	15ae0 <__multadd>
   15cc4:	a43ff81e 	bne	r20,r16,15ca8 <__alt_data_end+0xfc015ca8>
   15cc8:	ace1883a 	add	r16,r21,r19
   15ccc:	843ffe04 	addi	r16,r16,-8
   15cd0:	9c800a0e 	bge	r19,r18,15cfc <__s2b+0xd4>
   15cd4:	94e5c83a 	sub	r18,r18,r19
   15cd8:	84a5883a 	add	r18,r16,r18
   15cdc:	81c00007 	ldb	r7,0(r16)
   15ce0:	01800284 	movi	r6,10
   15ce4:	84000044 	addi	r16,r16,1
   15ce8:	100b883a 	mov	r5,r2
   15cec:	39fff404 	addi	r7,r7,-48
   15cf0:	8809883a 	mov	r4,r17
   15cf4:	0015ae00 	call	15ae0 <__multadd>
   15cf8:	84bff81e 	bne	r16,r18,15cdc <__alt_data_end+0xfc015cdc>
   15cfc:	dfc00617 	ldw	ra,24(sp)
   15d00:	dd400517 	ldw	r21,20(sp)
   15d04:	dd000417 	ldw	r20,16(sp)
   15d08:	dcc00317 	ldw	r19,12(sp)
   15d0c:	dc800217 	ldw	r18,8(sp)
   15d10:	dc400117 	ldw	r17,4(sp)
   15d14:	dc000017 	ldw	r16,0(sp)
   15d18:	dec00704 	addi	sp,sp,28
   15d1c:	f800283a 	ret
   15d20:	84000284 	addi	r16,r16,10
   15d24:	1827883a 	mov	r19,r3
   15d28:	003fe906 	br	15cd0 <__alt_data_end+0xfc015cd0>

00015d2c <__hi0bits>:
   15d2c:	20bfffec 	andhi	r2,r4,65535
   15d30:	1000141e 	bne	r2,zero,15d84 <__hi0bits+0x58>
   15d34:	2008943a 	slli	r4,r4,16
   15d38:	00800404 	movi	r2,16
   15d3c:	20ffc02c 	andhi	r3,r4,65280
   15d40:	1800021e 	bne	r3,zero,15d4c <__hi0bits+0x20>
   15d44:	2008923a 	slli	r4,r4,8
   15d48:	10800204 	addi	r2,r2,8
   15d4c:	20fc002c 	andhi	r3,r4,61440
   15d50:	1800021e 	bne	r3,zero,15d5c <__hi0bits+0x30>
   15d54:	2008913a 	slli	r4,r4,4
   15d58:	10800104 	addi	r2,r2,4
   15d5c:	20f0002c 	andhi	r3,r4,49152
   15d60:	1800031e 	bne	r3,zero,15d70 <__hi0bits+0x44>
   15d64:	2109883a 	add	r4,r4,r4
   15d68:	10800084 	addi	r2,r2,2
   15d6c:	2109883a 	add	r4,r4,r4
   15d70:	20000316 	blt	r4,zero,15d80 <__hi0bits+0x54>
   15d74:	2110002c 	andhi	r4,r4,16384
   15d78:	2000041e 	bne	r4,zero,15d8c <__hi0bits+0x60>
   15d7c:	00800804 	movi	r2,32
   15d80:	f800283a 	ret
   15d84:	0005883a 	mov	r2,zero
   15d88:	003fec06 	br	15d3c <__alt_data_end+0xfc015d3c>
   15d8c:	10800044 	addi	r2,r2,1
   15d90:	f800283a 	ret

00015d94 <__lo0bits>:
   15d94:	20c00017 	ldw	r3,0(r4)
   15d98:	188001cc 	andi	r2,r3,7
   15d9c:	10000826 	beq	r2,zero,15dc0 <__lo0bits+0x2c>
   15da0:	1880004c 	andi	r2,r3,1
   15da4:	1000211e 	bne	r2,zero,15e2c <__lo0bits+0x98>
   15da8:	1880008c 	andi	r2,r3,2
   15dac:	1000211e 	bne	r2,zero,15e34 <__lo0bits+0xa0>
   15db0:	1806d0ba 	srli	r3,r3,2
   15db4:	00800084 	movi	r2,2
   15db8:	20c00015 	stw	r3,0(r4)
   15dbc:	f800283a 	ret
   15dc0:	18bfffcc 	andi	r2,r3,65535
   15dc4:	10001326 	beq	r2,zero,15e14 <__lo0bits+0x80>
   15dc8:	0005883a 	mov	r2,zero
   15dcc:	19403fcc 	andi	r5,r3,255
   15dd0:	2800021e 	bne	r5,zero,15ddc <__lo0bits+0x48>
   15dd4:	1806d23a 	srli	r3,r3,8
   15dd8:	10800204 	addi	r2,r2,8
   15ddc:	194003cc 	andi	r5,r3,15
   15de0:	2800021e 	bne	r5,zero,15dec <__lo0bits+0x58>
   15de4:	1806d13a 	srli	r3,r3,4
   15de8:	10800104 	addi	r2,r2,4
   15dec:	194000cc 	andi	r5,r3,3
   15df0:	2800021e 	bne	r5,zero,15dfc <__lo0bits+0x68>
   15df4:	1806d0ba 	srli	r3,r3,2
   15df8:	10800084 	addi	r2,r2,2
   15dfc:	1940004c 	andi	r5,r3,1
   15e00:	2800081e 	bne	r5,zero,15e24 <__lo0bits+0x90>
   15e04:	1806d07a 	srli	r3,r3,1
   15e08:	1800051e 	bne	r3,zero,15e20 <__lo0bits+0x8c>
   15e0c:	00800804 	movi	r2,32
   15e10:	f800283a 	ret
   15e14:	1806d43a 	srli	r3,r3,16
   15e18:	00800404 	movi	r2,16
   15e1c:	003feb06 	br	15dcc <__alt_data_end+0xfc015dcc>
   15e20:	10800044 	addi	r2,r2,1
   15e24:	20c00015 	stw	r3,0(r4)
   15e28:	f800283a 	ret
   15e2c:	0005883a 	mov	r2,zero
   15e30:	f800283a 	ret
   15e34:	1806d07a 	srli	r3,r3,1
   15e38:	00800044 	movi	r2,1
   15e3c:	20c00015 	stw	r3,0(r4)
   15e40:	f800283a 	ret

00015e44 <__i2b>:
   15e44:	defffd04 	addi	sp,sp,-12
   15e48:	dc000015 	stw	r16,0(sp)
   15e4c:	04000044 	movi	r16,1
   15e50:	dc400115 	stw	r17,4(sp)
   15e54:	2823883a 	mov	r17,r5
   15e58:	800b883a 	mov	r5,r16
   15e5c:	dfc00215 	stw	ra,8(sp)
   15e60:	0015a100 	call	15a10 <_Balloc>
   15e64:	14400515 	stw	r17,20(r2)
   15e68:	14000415 	stw	r16,16(r2)
   15e6c:	dfc00217 	ldw	ra,8(sp)
   15e70:	dc400117 	ldw	r17,4(sp)
   15e74:	dc000017 	ldw	r16,0(sp)
   15e78:	dec00304 	addi	sp,sp,12
   15e7c:	f800283a 	ret

00015e80 <__multiply>:
   15e80:	deffef04 	addi	sp,sp,-68
   15e84:	dc400815 	stw	r17,32(sp)
   15e88:	dc000715 	stw	r16,28(sp)
   15e8c:	34400417 	ldw	r17,16(r6)
   15e90:	2c000417 	ldw	r16,16(r5)
   15e94:	dd800d15 	stw	r22,52(sp)
   15e98:	dc800915 	stw	r18,36(sp)
   15e9c:	dfc01015 	stw	ra,64(sp)
   15ea0:	df000f15 	stw	fp,60(sp)
   15ea4:	ddc00e15 	stw	r23,56(sp)
   15ea8:	dd400c15 	stw	r21,48(sp)
   15eac:	dd000b15 	stw	r20,44(sp)
   15eb0:	dcc00a15 	stw	r19,40(sp)
   15eb4:	2825883a 	mov	r18,r5
   15eb8:	302d883a 	mov	r22,r6
   15ebc:	8440050e 	bge	r16,r17,15ed4 <__multiply+0x54>
   15ec0:	8007883a 	mov	r3,r16
   15ec4:	3025883a 	mov	r18,r6
   15ec8:	8821883a 	mov	r16,r17
   15ecc:	282d883a 	mov	r22,r5
   15ed0:	1823883a 	mov	r17,r3
   15ed4:	90800217 	ldw	r2,8(r18)
   15ed8:	8447883a 	add	r3,r16,r17
   15edc:	d8c00215 	stw	r3,8(sp)
   15ee0:	91400117 	ldw	r5,4(r18)
   15ee4:	10c0010e 	bge	r2,r3,15eec <__multiply+0x6c>
   15ee8:	29400044 	addi	r5,r5,1
   15eec:	0015a100 	call	15a10 <_Balloc>
   15ef0:	d8c00217 	ldw	r3,8(sp)
   15ef4:	d8800615 	stw	r2,24(sp)
   15ef8:	18eb883a 	add	r21,r3,r3
   15efc:	ad6b883a 	add	r21,r21,r21
   15f00:	10c00504 	addi	r3,r2,20
   15f04:	1d6b883a 	add	r21,r3,r21
   15f08:	d8c00115 	stw	r3,4(sp)
   15f0c:	dd400315 	stw	r21,12(sp)
   15f10:	1805883a 	mov	r2,r3
   15f14:	1d40042e 	bgeu	r3,r21,15f28 <__multiply+0xa8>
   15f18:	d8c00317 	ldw	r3,12(sp)
   15f1c:	10000015 	stw	zero,0(r2)
   15f20:	10800104 	addi	r2,r2,4
   15f24:	10fffc36 	bltu	r2,r3,15f18 <__alt_data_end+0xfc015f18>
   15f28:	8c63883a 	add	r17,r17,r17
   15f2c:	b5800504 	addi	r22,r22,20
   15f30:	8c63883a 	add	r17,r17,r17
   15f34:	94800504 	addi	r18,r18,20
   15f38:	8421883a 	add	r16,r16,r16
   15f3c:	b463883a 	add	r17,r22,r17
   15f40:	8421883a 	add	r16,r16,r16
   15f44:	dd800015 	stw	r22,0(sp)
   15f48:	dc800415 	stw	r18,16(sp)
   15f4c:	dc400515 	stw	r17,20(sp)
   15f50:	9429883a 	add	r20,r18,r16
   15f54:	b4404f2e 	bgeu	r22,r17,16094 <__multiply+0x214>
   15f58:	d8c00017 	ldw	r3,0(sp)
   15f5c:	1c800017 	ldw	r18,0(r3)
   15f60:	947fffcc 	andi	r17,r18,65535
   15f64:	88001e26 	beq	r17,zero,15fe0 <__multiply+0x160>
   15f68:	dd800117 	ldw	r22,4(sp)
   15f6c:	dd400417 	ldw	r21,16(sp)
   15f70:	0027883a 	mov	r19,zero
   15f74:	ac800017 	ldw	r18,0(r21)
   15f78:	b4000017 	ldw	r16,0(r22)
   15f7c:	880b883a 	mov	r5,r17
   15f80:	913fffcc 	andi	r4,r18,65535
   15f84:	000cca00 	call	cca0 <__mulsi3>
   15f88:	9008d43a 	srli	r4,r18,16
   15f8c:	84bfffcc 	andi	r18,r16,65535
   15f90:	1485883a 	add	r2,r2,r18
   15f94:	14e5883a 	add	r18,r2,r19
   15f98:	8020d43a 	srli	r16,r16,16
   15f9c:	9026d43a 	srli	r19,r18,16
   15fa0:	880b883a 	mov	r5,r17
   15fa4:	000cca00 	call	cca0 <__mulsi3>
   15fa8:	1405883a 	add	r2,r2,r16
   15fac:	14e1883a 	add	r16,r2,r19
   15fb0:	90ffffcc 	andi	r3,r18,65535
   15fb4:	8024943a 	slli	r18,r16,16
   15fb8:	ad400104 	addi	r21,r21,4
   15fbc:	b005883a 	mov	r2,r22
   15fc0:	90c6b03a 	or	r3,r18,r3
   15fc4:	b0c00015 	stw	r3,0(r22)
   15fc8:	8026d43a 	srli	r19,r16,16
   15fcc:	b5800104 	addi	r22,r22,4
   15fd0:	ad3fe836 	bltu	r21,r20,15f74 <__alt_data_end+0xfc015f74>
   15fd4:	d8c00017 	ldw	r3,0(sp)
   15fd8:	14c00115 	stw	r19,4(r2)
   15fdc:	1c800017 	ldw	r18,0(r3)
   15fe0:	9024d43a 	srli	r18,r18,16
   15fe4:	90002226 	beq	r18,zero,16070 <__multiply+0x1f0>
   15fe8:	d8c00117 	ldw	r3,4(sp)
   15fec:	dd800417 	ldw	r22,16(sp)
   15ff0:	002f883a 	mov	r23,zero
   15ff4:	1f000017 	ldw	fp,0(r3)
   15ff8:	1823883a 	mov	r17,r3
   15ffc:	182b883a 	mov	r21,r3
   16000:	e021883a 	mov	r16,fp
   16004:	00000106 	br	1600c <__multiply+0x18c>
   16008:	982b883a 	mov	r21,r19
   1600c:	b100000b 	ldhu	r4,0(r22)
   16010:	8020d43a 	srli	r16,r16,16
   16014:	900b883a 	mov	r5,r18
   16018:	000cca00 	call	cca0 <__mulsi3>
   1601c:	1405883a 	add	r2,r2,r16
   16020:	15ef883a 	add	r23,r2,r23
   16024:	b804943a 	slli	r2,r23,16
   16028:	e0ffffcc 	andi	r3,fp,65535
   1602c:	8c400104 	addi	r17,r17,4
   16030:	10c6b03a 	or	r3,r2,r3
   16034:	88ffff15 	stw	r3,-4(r17)
   16038:	b5800104 	addi	r22,r22,4
   1603c:	b13fff17 	ldw	r4,-4(r22)
   16040:	acc00104 	addi	r19,r21,4
   16044:	900b883a 	mov	r5,r18
   16048:	2008d43a 	srli	r4,r4,16
   1604c:	9c000017 	ldw	r16,0(r19)
   16050:	000cca00 	call	cca0 <__mulsi3>
   16054:	b806d43a 	srli	r3,r23,16
   16058:	813fffcc 	andi	r4,r16,65535
   1605c:	1105883a 	add	r2,r2,r4
   16060:	10f9883a 	add	fp,r2,r3
   16064:	e02ed43a 	srli	r23,fp,16
   16068:	b53fe736 	bltu	r22,r20,16008 <__alt_data_end+0xfc016008>
   1606c:	af000115 	stw	fp,4(r21)
   16070:	d8c00017 	ldw	r3,0(sp)
   16074:	d9000517 	ldw	r4,20(sp)
   16078:	18c00104 	addi	r3,r3,4
   1607c:	d8c00015 	stw	r3,0(sp)
   16080:	d8c00117 	ldw	r3,4(sp)
   16084:	18c00104 	addi	r3,r3,4
   16088:	d8c00115 	stw	r3,4(sp)
   1608c:	d8c00017 	ldw	r3,0(sp)
   16090:	193fb136 	bltu	r3,r4,15f58 <__alt_data_end+0xfc015f58>
   16094:	d8c00217 	ldw	r3,8(sp)
   16098:	00c00c0e 	bge	zero,r3,160cc <__multiply+0x24c>
   1609c:	d8c00317 	ldw	r3,12(sp)
   160a0:	18bfff17 	ldw	r2,-4(r3)
   160a4:	1d7fff04 	addi	r21,r3,-4
   160a8:	10000326 	beq	r2,zero,160b8 <__multiply+0x238>
   160ac:	00000706 	br	160cc <__multiply+0x24c>
   160b0:	a8800017 	ldw	r2,0(r21)
   160b4:	1000051e 	bne	r2,zero,160cc <__multiply+0x24c>
   160b8:	d8c00217 	ldw	r3,8(sp)
   160bc:	ad7fff04 	addi	r21,r21,-4
   160c0:	18ffffc4 	addi	r3,r3,-1
   160c4:	d8c00215 	stw	r3,8(sp)
   160c8:	183ff91e 	bne	r3,zero,160b0 <__alt_data_end+0xfc0160b0>
   160cc:	d8c00617 	ldw	r3,24(sp)
   160d0:	d9000217 	ldw	r4,8(sp)
   160d4:	1805883a 	mov	r2,r3
   160d8:	19000415 	stw	r4,16(r3)
   160dc:	dfc01017 	ldw	ra,64(sp)
   160e0:	df000f17 	ldw	fp,60(sp)
   160e4:	ddc00e17 	ldw	r23,56(sp)
   160e8:	dd800d17 	ldw	r22,52(sp)
   160ec:	dd400c17 	ldw	r21,48(sp)
   160f0:	dd000b17 	ldw	r20,44(sp)
   160f4:	dcc00a17 	ldw	r19,40(sp)
   160f8:	dc800917 	ldw	r18,36(sp)
   160fc:	dc400817 	ldw	r17,32(sp)
   16100:	dc000717 	ldw	r16,28(sp)
   16104:	dec01104 	addi	sp,sp,68
   16108:	f800283a 	ret

0001610c <__pow5mult>:
   1610c:	defffa04 	addi	sp,sp,-24
   16110:	dcc00315 	stw	r19,12(sp)
   16114:	dc000015 	stw	r16,0(sp)
   16118:	dfc00515 	stw	ra,20(sp)
   1611c:	dd000415 	stw	r20,16(sp)
   16120:	dc800215 	stw	r18,8(sp)
   16124:	dc400115 	stw	r17,4(sp)
   16128:	308000cc 	andi	r2,r6,3
   1612c:	3021883a 	mov	r16,r6
   16130:	2027883a 	mov	r19,r4
   16134:	10002f1e 	bne	r2,zero,161f4 <__pow5mult+0xe8>
   16138:	2825883a 	mov	r18,r5
   1613c:	8021d0ba 	srai	r16,r16,2
   16140:	80001a26 	beq	r16,zero,161ac <__pow5mult+0xa0>
   16144:	9c401217 	ldw	r17,72(r19)
   16148:	8800061e 	bne	r17,zero,16164 <__pow5mult+0x58>
   1614c:	00003406 	br	16220 <__pow5mult+0x114>
   16150:	8021d07a 	srai	r16,r16,1
   16154:	80001526 	beq	r16,zero,161ac <__pow5mult+0xa0>
   16158:	88800017 	ldw	r2,0(r17)
   1615c:	10001c26 	beq	r2,zero,161d0 <__pow5mult+0xc4>
   16160:	1023883a 	mov	r17,r2
   16164:	8080004c 	andi	r2,r16,1
   16168:	103ff926 	beq	r2,zero,16150 <__alt_data_end+0xfc016150>
   1616c:	880d883a 	mov	r6,r17
   16170:	900b883a 	mov	r5,r18
   16174:	9809883a 	mov	r4,r19
   16178:	0015e800 	call	15e80 <__multiply>
   1617c:	90001b26 	beq	r18,zero,161ec <__pow5mult+0xe0>
   16180:	91000117 	ldw	r4,4(r18)
   16184:	98c01317 	ldw	r3,76(r19)
   16188:	8021d07a 	srai	r16,r16,1
   1618c:	2109883a 	add	r4,r4,r4
   16190:	2109883a 	add	r4,r4,r4
   16194:	1907883a 	add	r3,r3,r4
   16198:	19000017 	ldw	r4,0(r3)
   1619c:	91000015 	stw	r4,0(r18)
   161a0:	1c800015 	stw	r18,0(r3)
   161a4:	1025883a 	mov	r18,r2
   161a8:	803feb1e 	bne	r16,zero,16158 <__alt_data_end+0xfc016158>
   161ac:	9005883a 	mov	r2,r18
   161b0:	dfc00517 	ldw	ra,20(sp)
   161b4:	dd000417 	ldw	r20,16(sp)
   161b8:	dcc00317 	ldw	r19,12(sp)
   161bc:	dc800217 	ldw	r18,8(sp)
   161c0:	dc400117 	ldw	r17,4(sp)
   161c4:	dc000017 	ldw	r16,0(sp)
   161c8:	dec00604 	addi	sp,sp,24
   161cc:	f800283a 	ret
   161d0:	880d883a 	mov	r6,r17
   161d4:	880b883a 	mov	r5,r17
   161d8:	9809883a 	mov	r4,r19
   161dc:	0015e800 	call	15e80 <__multiply>
   161e0:	88800015 	stw	r2,0(r17)
   161e4:	10000015 	stw	zero,0(r2)
   161e8:	003fdd06 	br	16160 <__alt_data_end+0xfc016160>
   161ec:	1025883a 	mov	r18,r2
   161f0:	003fd706 	br	16150 <__alt_data_end+0xfc016150>
   161f4:	10bfffc4 	addi	r2,r2,-1
   161f8:	1085883a 	add	r2,r2,r2
   161fc:	00c000f4 	movhi	r3,3
   16200:	18e57e04 	addi	r3,r3,-27144
   16204:	1085883a 	add	r2,r2,r2
   16208:	1885883a 	add	r2,r3,r2
   1620c:	11800017 	ldw	r6,0(r2)
   16210:	000f883a 	mov	r7,zero
   16214:	0015ae00 	call	15ae0 <__multadd>
   16218:	1025883a 	mov	r18,r2
   1621c:	003fc706 	br	1613c <__alt_data_end+0xfc01613c>
   16220:	05000044 	movi	r20,1
   16224:	a00b883a 	mov	r5,r20
   16228:	9809883a 	mov	r4,r19
   1622c:	0015a100 	call	15a10 <_Balloc>
   16230:	1023883a 	mov	r17,r2
   16234:	00809c44 	movi	r2,625
   16238:	88800515 	stw	r2,20(r17)
   1623c:	8d000415 	stw	r20,16(r17)
   16240:	9c401215 	stw	r17,72(r19)
   16244:	88000015 	stw	zero,0(r17)
   16248:	003fc606 	br	16164 <__alt_data_end+0xfc016164>

0001624c <__lshift>:
   1624c:	defff904 	addi	sp,sp,-28
   16250:	dd400515 	stw	r21,20(sp)
   16254:	dcc00315 	stw	r19,12(sp)
   16258:	302bd17a 	srai	r21,r6,5
   1625c:	2cc00417 	ldw	r19,16(r5)
   16260:	28800217 	ldw	r2,8(r5)
   16264:	dd000415 	stw	r20,16(sp)
   16268:	ace7883a 	add	r19,r21,r19
   1626c:	dc800215 	stw	r18,8(sp)
   16270:	dc400115 	stw	r17,4(sp)
   16274:	dc000015 	stw	r16,0(sp)
   16278:	dfc00615 	stw	ra,24(sp)
   1627c:	9c000044 	addi	r16,r19,1
   16280:	2823883a 	mov	r17,r5
   16284:	3029883a 	mov	r20,r6
   16288:	2025883a 	mov	r18,r4
   1628c:	29400117 	ldw	r5,4(r5)
   16290:	1400030e 	bge	r2,r16,162a0 <__lshift+0x54>
   16294:	1085883a 	add	r2,r2,r2
   16298:	29400044 	addi	r5,r5,1
   1629c:	143ffd16 	blt	r2,r16,16294 <__alt_data_end+0xfc016294>
   162a0:	9009883a 	mov	r4,r18
   162a4:	0015a100 	call	15a10 <_Balloc>
   162a8:	10c00504 	addi	r3,r2,20
   162ac:	0540070e 	bge	zero,r21,162cc <__lshift+0x80>
   162b0:	ad6b883a 	add	r21,r21,r21
   162b4:	ad6b883a 	add	r21,r21,r21
   162b8:	1809883a 	mov	r4,r3
   162bc:	1d47883a 	add	r3,r3,r21
   162c0:	20000015 	stw	zero,0(r4)
   162c4:	21000104 	addi	r4,r4,4
   162c8:	193ffd1e 	bne	r3,r4,162c0 <__alt_data_end+0xfc0162c0>
   162cc:	8a000417 	ldw	r8,16(r17)
   162d0:	89000504 	addi	r4,r17,20
   162d4:	a18007cc 	andi	r6,r20,31
   162d8:	4211883a 	add	r8,r8,r8
   162dc:	4211883a 	add	r8,r8,r8
   162e0:	2211883a 	add	r8,r4,r8
   162e4:	30002326 	beq	r6,zero,16374 <__lshift+0x128>
   162e8:	02400804 	movi	r9,32
   162ec:	4993c83a 	sub	r9,r9,r6
   162f0:	000b883a 	mov	r5,zero
   162f4:	21c00017 	ldw	r7,0(r4)
   162f8:	1815883a 	mov	r10,r3
   162fc:	18c00104 	addi	r3,r3,4
   16300:	398e983a 	sll	r7,r7,r6
   16304:	21000104 	addi	r4,r4,4
   16308:	394ab03a 	or	r5,r7,r5
   1630c:	197fff15 	stw	r5,-4(r3)
   16310:	217fff17 	ldw	r5,-4(r4)
   16314:	2a4ad83a 	srl	r5,r5,r9
   16318:	223ff636 	bltu	r4,r8,162f4 <__alt_data_end+0xfc0162f4>
   1631c:	51400115 	stw	r5,4(r10)
   16320:	28001a1e 	bne	r5,zero,1638c <__lshift+0x140>
   16324:	843fffc4 	addi	r16,r16,-1
   16328:	14000415 	stw	r16,16(r2)
   1632c:	88000826 	beq	r17,zero,16350 <__lshift+0x104>
   16330:	89000117 	ldw	r4,4(r17)
   16334:	90c01317 	ldw	r3,76(r18)
   16338:	2109883a 	add	r4,r4,r4
   1633c:	2109883a 	add	r4,r4,r4
   16340:	1907883a 	add	r3,r3,r4
   16344:	19000017 	ldw	r4,0(r3)
   16348:	89000015 	stw	r4,0(r17)
   1634c:	1c400015 	stw	r17,0(r3)
   16350:	dfc00617 	ldw	ra,24(sp)
   16354:	dd400517 	ldw	r21,20(sp)
   16358:	dd000417 	ldw	r20,16(sp)
   1635c:	dcc00317 	ldw	r19,12(sp)
   16360:	dc800217 	ldw	r18,8(sp)
   16364:	dc400117 	ldw	r17,4(sp)
   16368:	dc000017 	ldw	r16,0(sp)
   1636c:	dec00704 	addi	sp,sp,28
   16370:	f800283a 	ret
   16374:	21400017 	ldw	r5,0(r4)
   16378:	18c00104 	addi	r3,r3,4
   1637c:	21000104 	addi	r4,r4,4
   16380:	197fff15 	stw	r5,-4(r3)
   16384:	223ffb36 	bltu	r4,r8,16374 <__alt_data_end+0xfc016374>
   16388:	003fe606 	br	16324 <__alt_data_end+0xfc016324>
   1638c:	9c000084 	addi	r16,r19,2
   16390:	003fe406 	br	16324 <__alt_data_end+0xfc016324>

00016394 <__mcmp>:
   16394:	20800417 	ldw	r2,16(r4)
   16398:	28c00417 	ldw	r3,16(r5)
   1639c:	10c5c83a 	sub	r2,r2,r3
   163a0:	1000111e 	bne	r2,zero,163e8 <__mcmp+0x54>
   163a4:	18c7883a 	add	r3,r3,r3
   163a8:	18c7883a 	add	r3,r3,r3
   163ac:	21000504 	addi	r4,r4,20
   163b0:	29400504 	addi	r5,r5,20
   163b4:	20c5883a 	add	r2,r4,r3
   163b8:	28cb883a 	add	r5,r5,r3
   163bc:	00000106 	br	163c4 <__mcmp+0x30>
   163c0:	20800a2e 	bgeu	r4,r2,163ec <__mcmp+0x58>
   163c4:	10bfff04 	addi	r2,r2,-4
   163c8:	297fff04 	addi	r5,r5,-4
   163cc:	11800017 	ldw	r6,0(r2)
   163d0:	28c00017 	ldw	r3,0(r5)
   163d4:	30fffa26 	beq	r6,r3,163c0 <__alt_data_end+0xfc0163c0>
   163d8:	30c00236 	bltu	r6,r3,163e4 <__mcmp+0x50>
   163dc:	00800044 	movi	r2,1
   163e0:	f800283a 	ret
   163e4:	00bfffc4 	movi	r2,-1
   163e8:	f800283a 	ret
   163ec:	0005883a 	mov	r2,zero
   163f0:	f800283a 	ret

000163f4 <__mdiff>:
   163f4:	28c00417 	ldw	r3,16(r5)
   163f8:	30800417 	ldw	r2,16(r6)
   163fc:	defffa04 	addi	sp,sp,-24
   16400:	dcc00315 	stw	r19,12(sp)
   16404:	dc800215 	stw	r18,8(sp)
   16408:	dfc00515 	stw	ra,20(sp)
   1640c:	dd000415 	stw	r20,16(sp)
   16410:	dc400115 	stw	r17,4(sp)
   16414:	dc000015 	stw	r16,0(sp)
   16418:	1887c83a 	sub	r3,r3,r2
   1641c:	2825883a 	mov	r18,r5
   16420:	3027883a 	mov	r19,r6
   16424:	1800141e 	bne	r3,zero,16478 <__mdiff+0x84>
   16428:	1085883a 	add	r2,r2,r2
   1642c:	1085883a 	add	r2,r2,r2
   16430:	2a000504 	addi	r8,r5,20
   16434:	34000504 	addi	r16,r6,20
   16438:	4087883a 	add	r3,r8,r2
   1643c:	8085883a 	add	r2,r16,r2
   16440:	00000106 	br	16448 <__mdiff+0x54>
   16444:	40c0592e 	bgeu	r8,r3,165ac <__mdiff+0x1b8>
   16448:	18ffff04 	addi	r3,r3,-4
   1644c:	10bfff04 	addi	r2,r2,-4
   16450:	19c00017 	ldw	r7,0(r3)
   16454:	11400017 	ldw	r5,0(r2)
   16458:	397ffa26 	beq	r7,r5,16444 <__alt_data_end+0xfc016444>
   1645c:	3940592e 	bgeu	r7,r5,165c4 <__mdiff+0x1d0>
   16460:	9005883a 	mov	r2,r18
   16464:	4023883a 	mov	r17,r8
   16468:	9825883a 	mov	r18,r19
   1646c:	05000044 	movi	r20,1
   16470:	1027883a 	mov	r19,r2
   16474:	00000406 	br	16488 <__mdiff+0x94>
   16478:	18005616 	blt	r3,zero,165d4 <__mdiff+0x1e0>
   1647c:	34400504 	addi	r17,r6,20
   16480:	2c000504 	addi	r16,r5,20
   16484:	0029883a 	mov	r20,zero
   16488:	91400117 	ldw	r5,4(r18)
   1648c:	0015a100 	call	15a10 <_Balloc>
   16490:	92400417 	ldw	r9,16(r18)
   16494:	9b000417 	ldw	r12,16(r19)
   16498:	12c00504 	addi	r11,r2,20
   1649c:	4a51883a 	add	r8,r9,r9
   164a0:	6319883a 	add	r12,r12,r12
   164a4:	4211883a 	add	r8,r8,r8
   164a8:	6319883a 	add	r12,r12,r12
   164ac:	15000315 	stw	r20,12(r2)
   164b0:	8211883a 	add	r8,r16,r8
   164b4:	8b19883a 	add	r12,r17,r12
   164b8:	0007883a 	mov	r3,zero
   164bc:	81400017 	ldw	r5,0(r16)
   164c0:	89c00017 	ldw	r7,0(r17)
   164c4:	59800104 	addi	r6,r11,4
   164c8:	293fffcc 	andi	r4,r5,65535
   164cc:	20c7883a 	add	r3,r4,r3
   164d0:	393fffcc 	andi	r4,r7,65535
   164d4:	1909c83a 	sub	r4,r3,r4
   164d8:	280ad43a 	srli	r5,r5,16
   164dc:	380ed43a 	srli	r7,r7,16
   164e0:	2007d43a 	srai	r3,r4,16
   164e4:	213fffcc 	andi	r4,r4,65535
   164e8:	29cbc83a 	sub	r5,r5,r7
   164ec:	28c7883a 	add	r3,r5,r3
   164f0:	180a943a 	slli	r5,r3,16
   164f4:	8c400104 	addi	r17,r17,4
   164f8:	84000104 	addi	r16,r16,4
   164fc:	2908b03a 	or	r4,r5,r4
   16500:	59000015 	stw	r4,0(r11)
   16504:	1807d43a 	srai	r3,r3,16
   16508:	3015883a 	mov	r10,r6
   1650c:	3017883a 	mov	r11,r6
   16510:	8b3fea36 	bltu	r17,r12,164bc <__alt_data_end+0xfc0164bc>
   16514:	8200162e 	bgeu	r16,r8,16570 <__mdiff+0x17c>
   16518:	8017883a 	mov	r11,r16
   1651c:	59400017 	ldw	r5,0(r11)
   16520:	31800104 	addi	r6,r6,4
   16524:	5ac00104 	addi	r11,r11,4
   16528:	293fffcc 	andi	r4,r5,65535
   1652c:	20c7883a 	add	r3,r4,r3
   16530:	280ed43a 	srli	r7,r5,16
   16534:	180bd43a 	srai	r5,r3,16
   16538:	193fffcc 	andi	r4,r3,65535
   1653c:	3947883a 	add	r3,r7,r5
   16540:	180a943a 	slli	r5,r3,16
   16544:	1807d43a 	srai	r3,r3,16
   16548:	2908b03a 	or	r4,r5,r4
   1654c:	313fff15 	stw	r4,-4(r6)
   16550:	5a3ff236 	bltu	r11,r8,1651c <__alt_data_end+0xfc01651c>
   16554:	0406303a 	nor	r3,zero,r16
   16558:	1a07883a 	add	r3,r3,r8
   1655c:	1806d0ba 	srli	r3,r3,2
   16560:	18c00044 	addi	r3,r3,1
   16564:	18c7883a 	add	r3,r3,r3
   16568:	18c7883a 	add	r3,r3,r3
   1656c:	50d5883a 	add	r10,r10,r3
   16570:	50ffff04 	addi	r3,r10,-4
   16574:	2000041e 	bne	r4,zero,16588 <__mdiff+0x194>
   16578:	18ffff04 	addi	r3,r3,-4
   1657c:	19000017 	ldw	r4,0(r3)
   16580:	4a7fffc4 	addi	r9,r9,-1
   16584:	203ffc26 	beq	r4,zero,16578 <__alt_data_end+0xfc016578>
   16588:	12400415 	stw	r9,16(r2)
   1658c:	dfc00517 	ldw	ra,20(sp)
   16590:	dd000417 	ldw	r20,16(sp)
   16594:	dcc00317 	ldw	r19,12(sp)
   16598:	dc800217 	ldw	r18,8(sp)
   1659c:	dc400117 	ldw	r17,4(sp)
   165a0:	dc000017 	ldw	r16,0(sp)
   165a4:	dec00604 	addi	sp,sp,24
   165a8:	f800283a 	ret
   165ac:	000b883a 	mov	r5,zero
   165b0:	0015a100 	call	15a10 <_Balloc>
   165b4:	00c00044 	movi	r3,1
   165b8:	10c00415 	stw	r3,16(r2)
   165bc:	10000515 	stw	zero,20(r2)
   165c0:	003ff206 	br	1658c <__alt_data_end+0xfc01658c>
   165c4:	8023883a 	mov	r17,r16
   165c8:	0029883a 	mov	r20,zero
   165cc:	4021883a 	mov	r16,r8
   165d0:	003fad06 	br	16488 <__alt_data_end+0xfc016488>
   165d4:	9005883a 	mov	r2,r18
   165d8:	94400504 	addi	r17,r18,20
   165dc:	9c000504 	addi	r16,r19,20
   165e0:	9825883a 	mov	r18,r19
   165e4:	05000044 	movi	r20,1
   165e8:	1027883a 	mov	r19,r2
   165ec:	003fa606 	br	16488 <__alt_data_end+0xfc016488>

000165f0 <__ulp>:
   165f0:	295ffc2c 	andhi	r5,r5,32752
   165f4:	00bf3034 	movhi	r2,64704
   165f8:	2887883a 	add	r3,r5,r2
   165fc:	00c0020e 	bge	zero,r3,16608 <__ulp+0x18>
   16600:	0005883a 	mov	r2,zero
   16604:	f800283a 	ret
   16608:	00c7c83a 	sub	r3,zero,r3
   1660c:	1807d53a 	srai	r3,r3,20
   16610:	008004c4 	movi	r2,19
   16614:	10c00b0e 	bge	r2,r3,16644 <__ulp+0x54>
   16618:	18bffb04 	addi	r2,r3,-20
   1661c:	01000784 	movi	r4,30
   16620:	0007883a 	mov	r3,zero
   16624:	20800516 	blt	r4,r2,1663c <__ulp+0x4c>
   16628:	010007c4 	movi	r4,31
   1662c:	2089c83a 	sub	r4,r4,r2
   16630:	00800044 	movi	r2,1
   16634:	1104983a 	sll	r2,r2,r4
   16638:	f800283a 	ret
   1663c:	00800044 	movi	r2,1
   16640:	f800283a 	ret
   16644:	01400234 	movhi	r5,8
   16648:	28c7d83a 	sra	r3,r5,r3
   1664c:	0005883a 	mov	r2,zero
   16650:	f800283a 	ret

00016654 <__b2d>:
   16654:	defffa04 	addi	sp,sp,-24
   16658:	dc000015 	stw	r16,0(sp)
   1665c:	24000417 	ldw	r16,16(r4)
   16660:	dc400115 	stw	r17,4(sp)
   16664:	24400504 	addi	r17,r4,20
   16668:	8421883a 	add	r16,r16,r16
   1666c:	8421883a 	add	r16,r16,r16
   16670:	8c21883a 	add	r16,r17,r16
   16674:	dc800215 	stw	r18,8(sp)
   16678:	84bfff17 	ldw	r18,-4(r16)
   1667c:	dd000415 	stw	r20,16(sp)
   16680:	dcc00315 	stw	r19,12(sp)
   16684:	9009883a 	mov	r4,r18
   16688:	2829883a 	mov	r20,r5
   1668c:	dfc00515 	stw	ra,20(sp)
   16690:	0015d2c0 	call	15d2c <__hi0bits>
   16694:	00c00804 	movi	r3,32
   16698:	1889c83a 	sub	r4,r3,r2
   1669c:	a1000015 	stw	r4,0(r20)
   166a0:	01000284 	movi	r4,10
   166a4:	84ffff04 	addi	r19,r16,-4
   166a8:	20801216 	blt	r4,r2,166f4 <__b2d+0xa0>
   166ac:	018002c4 	movi	r6,11
   166b0:	308dc83a 	sub	r6,r6,r2
   166b4:	9186d83a 	srl	r3,r18,r6
   166b8:	18cffc34 	orhi	r3,r3,16368
   166bc:	8cc0212e 	bgeu	r17,r19,16744 <__b2d+0xf0>
   166c0:	813ffe17 	ldw	r4,-8(r16)
   166c4:	218cd83a 	srl	r6,r4,r6
   166c8:	10800544 	addi	r2,r2,21
   166cc:	9084983a 	sll	r2,r18,r2
   166d0:	1184b03a 	or	r2,r2,r6
   166d4:	dfc00517 	ldw	ra,20(sp)
   166d8:	dd000417 	ldw	r20,16(sp)
   166dc:	dcc00317 	ldw	r19,12(sp)
   166e0:	dc800217 	ldw	r18,8(sp)
   166e4:	dc400117 	ldw	r17,4(sp)
   166e8:	dc000017 	ldw	r16,0(sp)
   166ec:	dec00604 	addi	sp,sp,24
   166f0:	f800283a 	ret
   166f4:	8cc00f2e 	bgeu	r17,r19,16734 <__b2d+0xe0>
   166f8:	117ffd44 	addi	r5,r2,-11
   166fc:	80bffe17 	ldw	r2,-8(r16)
   16700:	28000e26 	beq	r5,zero,1673c <__b2d+0xe8>
   16704:	1949c83a 	sub	r4,r3,r5
   16708:	9164983a 	sll	r18,r18,r5
   1670c:	1106d83a 	srl	r3,r2,r4
   16710:	81bffe04 	addi	r6,r16,-8
   16714:	948ffc34 	orhi	r18,r18,16368
   16718:	90c6b03a 	or	r3,r18,r3
   1671c:	89800e2e 	bgeu	r17,r6,16758 <__b2d+0x104>
   16720:	81bffd17 	ldw	r6,-12(r16)
   16724:	1144983a 	sll	r2,r2,r5
   16728:	310ad83a 	srl	r5,r6,r4
   1672c:	2884b03a 	or	r2,r5,r2
   16730:	003fe806 	br	166d4 <__alt_data_end+0xfc0166d4>
   16734:	10bffd44 	addi	r2,r2,-11
   16738:	1000041e 	bne	r2,zero,1674c <__b2d+0xf8>
   1673c:	90cffc34 	orhi	r3,r18,16368
   16740:	003fe406 	br	166d4 <__alt_data_end+0xfc0166d4>
   16744:	000d883a 	mov	r6,zero
   16748:	003fdf06 	br	166c8 <__alt_data_end+0xfc0166c8>
   1674c:	90a4983a 	sll	r18,r18,r2
   16750:	0005883a 	mov	r2,zero
   16754:	003ff906 	br	1673c <__alt_data_end+0xfc01673c>
   16758:	1144983a 	sll	r2,r2,r5
   1675c:	003fdd06 	br	166d4 <__alt_data_end+0xfc0166d4>

00016760 <__d2b>:
   16760:	defff804 	addi	sp,sp,-32
   16764:	dc000215 	stw	r16,8(sp)
   16768:	3021883a 	mov	r16,r6
   1676c:	dc400315 	stw	r17,12(sp)
   16770:	8022907a 	slli	r17,r16,1
   16774:	dd000615 	stw	r20,24(sp)
   16778:	2829883a 	mov	r20,r5
   1677c:	01400044 	movi	r5,1
   16780:	dcc00515 	stw	r19,20(sp)
   16784:	dc800415 	stw	r18,16(sp)
   16788:	dfc00715 	stw	ra,28(sp)
   1678c:	3825883a 	mov	r18,r7
   16790:	8822d57a 	srli	r17,r17,21
   16794:	0015a100 	call	15a10 <_Balloc>
   16798:	1027883a 	mov	r19,r2
   1679c:	00800434 	movhi	r2,16
   167a0:	10bfffc4 	addi	r2,r2,-1
   167a4:	808c703a 	and	r6,r16,r2
   167a8:	88000126 	beq	r17,zero,167b0 <__d2b+0x50>
   167ac:	31800434 	orhi	r6,r6,16
   167b0:	d9800015 	stw	r6,0(sp)
   167b4:	a0002426 	beq	r20,zero,16848 <__d2b+0xe8>
   167b8:	d9000104 	addi	r4,sp,4
   167bc:	dd000115 	stw	r20,4(sp)
   167c0:	0015d940 	call	15d94 <__lo0bits>
   167c4:	d8c00017 	ldw	r3,0(sp)
   167c8:	10002f1e 	bne	r2,zero,16888 <__d2b+0x128>
   167cc:	d9000117 	ldw	r4,4(sp)
   167d0:	99000515 	stw	r4,20(r19)
   167d4:	1821003a 	cmpeq	r16,r3,zero
   167d8:	01000084 	movi	r4,2
   167dc:	2421c83a 	sub	r16,r4,r16
   167e0:	98c00615 	stw	r3,24(r19)
   167e4:	9c000415 	stw	r16,16(r19)
   167e8:	88001f1e 	bne	r17,zero,16868 <__d2b+0x108>
   167ec:	10bef384 	addi	r2,r2,-1074
   167f0:	90800015 	stw	r2,0(r18)
   167f4:	00900034 	movhi	r2,16384
   167f8:	10bfffc4 	addi	r2,r2,-1
   167fc:	8085883a 	add	r2,r16,r2
   16800:	1085883a 	add	r2,r2,r2
   16804:	1085883a 	add	r2,r2,r2
   16808:	9885883a 	add	r2,r19,r2
   1680c:	11000517 	ldw	r4,20(r2)
   16810:	8020917a 	slli	r16,r16,5
   16814:	0015d2c0 	call	15d2c <__hi0bits>
   16818:	d8c00817 	ldw	r3,32(sp)
   1681c:	8085c83a 	sub	r2,r16,r2
   16820:	18800015 	stw	r2,0(r3)
   16824:	9805883a 	mov	r2,r19
   16828:	dfc00717 	ldw	ra,28(sp)
   1682c:	dd000617 	ldw	r20,24(sp)
   16830:	dcc00517 	ldw	r19,20(sp)
   16834:	dc800417 	ldw	r18,16(sp)
   16838:	dc400317 	ldw	r17,12(sp)
   1683c:	dc000217 	ldw	r16,8(sp)
   16840:	dec00804 	addi	sp,sp,32
   16844:	f800283a 	ret
   16848:	d809883a 	mov	r4,sp
   1684c:	0015d940 	call	15d94 <__lo0bits>
   16850:	d8c00017 	ldw	r3,0(sp)
   16854:	04000044 	movi	r16,1
   16858:	9c000415 	stw	r16,16(r19)
   1685c:	98c00515 	stw	r3,20(r19)
   16860:	10800804 	addi	r2,r2,32
   16864:	883fe126 	beq	r17,zero,167ec <__alt_data_end+0xfc0167ec>
   16868:	00c00d44 	movi	r3,53
   1686c:	8c7ef344 	addi	r17,r17,-1075
   16870:	88a3883a 	add	r17,r17,r2
   16874:	1885c83a 	sub	r2,r3,r2
   16878:	d8c00817 	ldw	r3,32(sp)
   1687c:	94400015 	stw	r17,0(r18)
   16880:	18800015 	stw	r2,0(r3)
   16884:	003fe706 	br	16824 <__alt_data_end+0xfc016824>
   16888:	01000804 	movi	r4,32
   1688c:	2089c83a 	sub	r4,r4,r2
   16890:	1908983a 	sll	r4,r3,r4
   16894:	d9400117 	ldw	r5,4(sp)
   16898:	1886d83a 	srl	r3,r3,r2
   1689c:	2148b03a 	or	r4,r4,r5
   168a0:	99000515 	stw	r4,20(r19)
   168a4:	d8c00015 	stw	r3,0(sp)
   168a8:	003fca06 	br	167d4 <__alt_data_end+0xfc0167d4>

000168ac <__ratio>:
   168ac:	defff904 	addi	sp,sp,-28
   168b0:	dc400315 	stw	r17,12(sp)
   168b4:	2823883a 	mov	r17,r5
   168b8:	d9400104 	addi	r5,sp,4
   168bc:	dfc00615 	stw	ra,24(sp)
   168c0:	dcc00515 	stw	r19,20(sp)
   168c4:	dc800415 	stw	r18,16(sp)
   168c8:	2027883a 	mov	r19,r4
   168cc:	dc000215 	stw	r16,8(sp)
   168d0:	00166540 	call	16654 <__b2d>
   168d4:	d80b883a 	mov	r5,sp
   168d8:	8809883a 	mov	r4,r17
   168dc:	1025883a 	mov	r18,r2
   168e0:	1821883a 	mov	r16,r3
   168e4:	00166540 	call	16654 <__b2d>
   168e8:	8a000417 	ldw	r8,16(r17)
   168ec:	99000417 	ldw	r4,16(r19)
   168f0:	d9400117 	ldw	r5,4(sp)
   168f4:	2209c83a 	sub	r4,r4,r8
   168f8:	2010917a 	slli	r8,r4,5
   168fc:	d9000017 	ldw	r4,0(sp)
   16900:	2909c83a 	sub	r4,r5,r4
   16904:	4109883a 	add	r4,r8,r4
   16908:	01000e0e 	bge	zero,r4,16944 <__ratio+0x98>
   1690c:	2008953a 	slli	r4,r4,20
   16910:	2421883a 	add	r16,r4,r16
   16914:	100d883a 	mov	r6,r2
   16918:	180f883a 	mov	r7,r3
   1691c:	9009883a 	mov	r4,r18
   16920:	800b883a 	mov	r5,r16
   16924:	001bd640 	call	1bd64 <__divdf3>
   16928:	dfc00617 	ldw	ra,24(sp)
   1692c:	dcc00517 	ldw	r19,20(sp)
   16930:	dc800417 	ldw	r18,16(sp)
   16934:	dc400317 	ldw	r17,12(sp)
   16938:	dc000217 	ldw	r16,8(sp)
   1693c:	dec00704 	addi	sp,sp,28
   16940:	f800283a 	ret
   16944:	2008953a 	slli	r4,r4,20
   16948:	1907c83a 	sub	r3,r3,r4
   1694c:	003ff106 	br	16914 <__alt_data_end+0xfc016914>

00016950 <_mprec_log10>:
   16950:	defffe04 	addi	sp,sp,-8
   16954:	dc000015 	stw	r16,0(sp)
   16958:	dfc00115 	stw	ra,4(sp)
   1695c:	008005c4 	movi	r2,23
   16960:	2021883a 	mov	r16,r4
   16964:	11000d0e 	bge	r2,r4,1699c <_mprec_log10+0x4c>
   16968:	0005883a 	mov	r2,zero
   1696c:	00cffc34 	movhi	r3,16368
   16970:	843fffc4 	addi	r16,r16,-1
   16974:	000d883a 	mov	r6,zero
   16978:	01d00934 	movhi	r7,16420
   1697c:	1009883a 	mov	r4,r2
   16980:	180b883a 	mov	r5,r3
   16984:	001c98c0 	call	1c98c <__muldf3>
   16988:	803ff91e 	bne	r16,zero,16970 <__alt_data_end+0xfc016970>
   1698c:	dfc00117 	ldw	ra,4(sp)
   16990:	dc000017 	ldw	r16,0(sp)
   16994:	dec00204 	addi	sp,sp,8
   16998:	f800283a 	ret
   1699c:	202090fa 	slli	r16,r4,3
   169a0:	008000f4 	movhi	r2,3
   169a4:	10a59504 	addi	r2,r2,-27052
   169a8:	1421883a 	add	r16,r2,r16
   169ac:	80800017 	ldw	r2,0(r16)
   169b0:	80c00117 	ldw	r3,4(r16)
   169b4:	dfc00117 	ldw	ra,4(sp)
   169b8:	dc000017 	ldw	r16,0(sp)
   169bc:	dec00204 	addi	sp,sp,8
   169c0:	f800283a 	ret

000169c4 <__copybits>:
   169c4:	297fffc4 	addi	r5,r5,-1
   169c8:	280fd17a 	srai	r7,r5,5
   169cc:	30c00417 	ldw	r3,16(r6)
   169d0:	30800504 	addi	r2,r6,20
   169d4:	39c00044 	addi	r7,r7,1
   169d8:	18c7883a 	add	r3,r3,r3
   169dc:	39cf883a 	add	r7,r7,r7
   169e0:	18c7883a 	add	r3,r3,r3
   169e4:	39cf883a 	add	r7,r7,r7
   169e8:	10c7883a 	add	r3,r2,r3
   169ec:	21cf883a 	add	r7,r4,r7
   169f0:	10c00d2e 	bgeu	r2,r3,16a28 <__copybits+0x64>
   169f4:	200b883a 	mov	r5,r4
   169f8:	12000017 	ldw	r8,0(r2)
   169fc:	29400104 	addi	r5,r5,4
   16a00:	10800104 	addi	r2,r2,4
   16a04:	2a3fff15 	stw	r8,-4(r5)
   16a08:	10fffb36 	bltu	r2,r3,169f8 <__alt_data_end+0xfc0169f8>
   16a0c:	1985c83a 	sub	r2,r3,r6
   16a10:	10bffac4 	addi	r2,r2,-21
   16a14:	1004d0ba 	srli	r2,r2,2
   16a18:	10800044 	addi	r2,r2,1
   16a1c:	1085883a 	add	r2,r2,r2
   16a20:	1085883a 	add	r2,r2,r2
   16a24:	2089883a 	add	r4,r4,r2
   16a28:	21c0032e 	bgeu	r4,r7,16a38 <__copybits+0x74>
   16a2c:	20000015 	stw	zero,0(r4)
   16a30:	21000104 	addi	r4,r4,4
   16a34:	21fffd36 	bltu	r4,r7,16a2c <__alt_data_end+0xfc016a2c>
   16a38:	f800283a 	ret

00016a3c <__any_on>:
   16a3c:	20c00417 	ldw	r3,16(r4)
   16a40:	2805d17a 	srai	r2,r5,5
   16a44:	21000504 	addi	r4,r4,20
   16a48:	18800d0e 	bge	r3,r2,16a80 <__any_on+0x44>
   16a4c:	18c7883a 	add	r3,r3,r3
   16a50:	18c7883a 	add	r3,r3,r3
   16a54:	20c7883a 	add	r3,r4,r3
   16a58:	20c0192e 	bgeu	r4,r3,16ac0 <__any_on+0x84>
   16a5c:	18bfff17 	ldw	r2,-4(r3)
   16a60:	18ffff04 	addi	r3,r3,-4
   16a64:	1000041e 	bne	r2,zero,16a78 <__any_on+0x3c>
   16a68:	20c0142e 	bgeu	r4,r3,16abc <__any_on+0x80>
   16a6c:	18ffff04 	addi	r3,r3,-4
   16a70:	19400017 	ldw	r5,0(r3)
   16a74:	283ffc26 	beq	r5,zero,16a68 <__alt_data_end+0xfc016a68>
   16a78:	00800044 	movi	r2,1
   16a7c:	f800283a 	ret
   16a80:	10c00a0e 	bge	r2,r3,16aac <__any_on+0x70>
   16a84:	1085883a 	add	r2,r2,r2
   16a88:	1085883a 	add	r2,r2,r2
   16a8c:	294007cc 	andi	r5,r5,31
   16a90:	2087883a 	add	r3,r4,r2
   16a94:	283ff026 	beq	r5,zero,16a58 <__alt_data_end+0xfc016a58>
   16a98:	19800017 	ldw	r6,0(r3)
   16a9c:	3144d83a 	srl	r2,r6,r5
   16aa0:	114a983a 	sll	r5,r2,r5
   16aa4:	317ff41e 	bne	r6,r5,16a78 <__alt_data_end+0xfc016a78>
   16aa8:	003feb06 	br	16a58 <__alt_data_end+0xfc016a58>
   16aac:	1085883a 	add	r2,r2,r2
   16ab0:	1085883a 	add	r2,r2,r2
   16ab4:	2087883a 	add	r3,r4,r2
   16ab8:	003fe706 	br	16a58 <__alt_data_end+0xfc016a58>
   16abc:	f800283a 	ret
   16ac0:	0005883a 	mov	r2,zero
   16ac4:	f800283a 	ret

00016ac8 <_putc_r>:
   16ac8:	defffc04 	addi	sp,sp,-16
   16acc:	dc000215 	stw	r16,8(sp)
   16ad0:	dfc00315 	stw	ra,12(sp)
   16ad4:	2021883a 	mov	r16,r4
   16ad8:	20000226 	beq	r4,zero,16ae4 <_putc_r+0x1c>
   16adc:	20800e17 	ldw	r2,56(r4)
   16ae0:	10001b26 	beq	r2,zero,16b50 <_putc_r+0x88>
   16ae4:	30800217 	ldw	r2,8(r6)
   16ae8:	10bfffc4 	addi	r2,r2,-1
   16aec:	30800215 	stw	r2,8(r6)
   16af0:	10000a16 	blt	r2,zero,16b1c <_putc_r+0x54>
   16af4:	30800017 	ldw	r2,0(r6)
   16af8:	11400005 	stb	r5,0(r2)
   16afc:	30800017 	ldw	r2,0(r6)
   16b00:	10c00044 	addi	r3,r2,1
   16b04:	30c00015 	stw	r3,0(r6)
   16b08:	10800003 	ldbu	r2,0(r2)
   16b0c:	dfc00317 	ldw	ra,12(sp)
   16b10:	dc000217 	ldw	r16,8(sp)
   16b14:	dec00404 	addi	sp,sp,16
   16b18:	f800283a 	ret
   16b1c:	30c00617 	ldw	r3,24(r6)
   16b20:	10c00616 	blt	r2,r3,16b3c <_putc_r+0x74>
   16b24:	30800017 	ldw	r2,0(r6)
   16b28:	00c00284 	movi	r3,10
   16b2c:	11400005 	stb	r5,0(r2)
   16b30:	30800017 	ldw	r2,0(r6)
   16b34:	11400003 	ldbu	r5,0(r2)
   16b38:	28fff11e 	bne	r5,r3,16b00 <__alt_data_end+0xfc016b00>
   16b3c:	8009883a 	mov	r4,r16
   16b40:	dfc00317 	ldw	ra,12(sp)
   16b44:	dc000217 	ldw	r16,8(sp)
   16b48:	dec00404 	addi	sp,sp,16
   16b4c:	0019fac1 	jmpi	19fac <__swbuf_r>
   16b50:	d9400015 	stw	r5,0(sp)
   16b54:	d9800115 	stw	r6,4(sp)
   16b58:	0014a640 	call	14a64 <__sinit>
   16b5c:	d9800117 	ldw	r6,4(sp)
   16b60:	d9400017 	ldw	r5,0(sp)
   16b64:	003fdf06 	br	16ae4 <__alt_data_end+0xfc016ae4>

00016b68 <putc>:
   16b68:	008000f4 	movhi	r2,3
   16b6c:	defffc04 	addi	sp,sp,-16
   16b70:	10b29504 	addi	r2,r2,-13740
   16b74:	dc000115 	stw	r16,4(sp)
   16b78:	14000017 	ldw	r16,0(r2)
   16b7c:	dc400215 	stw	r17,8(sp)
   16b80:	dfc00315 	stw	ra,12(sp)
   16b84:	2023883a 	mov	r17,r4
   16b88:	80000226 	beq	r16,zero,16b94 <putc+0x2c>
   16b8c:	80800e17 	ldw	r2,56(r16)
   16b90:	10001a26 	beq	r2,zero,16bfc <putc+0x94>
   16b94:	28800217 	ldw	r2,8(r5)
   16b98:	10bfffc4 	addi	r2,r2,-1
   16b9c:	28800215 	stw	r2,8(r5)
   16ba0:	10000b16 	blt	r2,zero,16bd0 <putc+0x68>
   16ba4:	28800017 	ldw	r2,0(r5)
   16ba8:	14400005 	stb	r17,0(r2)
   16bac:	28800017 	ldw	r2,0(r5)
   16bb0:	10c00044 	addi	r3,r2,1
   16bb4:	28c00015 	stw	r3,0(r5)
   16bb8:	10800003 	ldbu	r2,0(r2)
   16bbc:	dfc00317 	ldw	ra,12(sp)
   16bc0:	dc400217 	ldw	r17,8(sp)
   16bc4:	dc000117 	ldw	r16,4(sp)
   16bc8:	dec00404 	addi	sp,sp,16
   16bcc:	f800283a 	ret
   16bd0:	28c00617 	ldw	r3,24(r5)
   16bd4:	10c00e16 	blt	r2,r3,16c10 <putc+0xa8>
   16bd8:	28800017 	ldw	r2,0(r5)
   16bdc:	01000284 	movi	r4,10
   16be0:	14400005 	stb	r17,0(r2)
   16be4:	28800017 	ldw	r2,0(r5)
   16be8:	10c00003 	ldbu	r3,0(r2)
   16bec:	193ff01e 	bne	r3,r4,16bb0 <__alt_data_end+0xfc016bb0>
   16bf0:	280d883a 	mov	r6,r5
   16bf4:	180b883a 	mov	r5,r3
   16bf8:	00000706 	br	16c18 <putc+0xb0>
   16bfc:	8009883a 	mov	r4,r16
   16c00:	d9400015 	stw	r5,0(sp)
   16c04:	0014a640 	call	14a64 <__sinit>
   16c08:	d9400017 	ldw	r5,0(sp)
   16c0c:	003fe106 	br	16b94 <__alt_data_end+0xfc016b94>
   16c10:	280d883a 	mov	r6,r5
   16c14:	880b883a 	mov	r5,r17
   16c18:	8009883a 	mov	r4,r16
   16c1c:	dfc00317 	ldw	ra,12(sp)
   16c20:	dc400217 	ldw	r17,8(sp)
   16c24:	dc000117 	ldw	r16,4(sp)
   16c28:	dec00404 	addi	sp,sp,16
   16c2c:	0019fac1 	jmpi	19fac <__swbuf_r>

00016c30 <_realloc_r>:
   16c30:	defff604 	addi	sp,sp,-40
   16c34:	dc800215 	stw	r18,8(sp)
   16c38:	dfc00915 	stw	ra,36(sp)
   16c3c:	df000815 	stw	fp,32(sp)
   16c40:	ddc00715 	stw	r23,28(sp)
   16c44:	dd800615 	stw	r22,24(sp)
   16c48:	dd400515 	stw	r21,20(sp)
   16c4c:	dd000415 	stw	r20,16(sp)
   16c50:	dcc00315 	stw	r19,12(sp)
   16c54:	dc400115 	stw	r17,4(sp)
   16c58:	dc000015 	stw	r16,0(sp)
   16c5c:	3025883a 	mov	r18,r6
   16c60:	2800b726 	beq	r5,zero,16f40 <_realloc_r+0x310>
   16c64:	282b883a 	mov	r21,r5
   16c68:	2029883a 	mov	r20,r4
   16c6c:	001e4b80 	call	1e4b8 <__malloc_lock>
   16c70:	a8bfff17 	ldw	r2,-4(r21)
   16c74:	043fff04 	movi	r16,-4
   16c78:	90c002c4 	addi	r3,r18,11
   16c7c:	01000584 	movi	r4,22
   16c80:	acfffe04 	addi	r19,r21,-8
   16c84:	1420703a 	and	r16,r2,r16
   16c88:	20c0332e 	bgeu	r4,r3,16d58 <_realloc_r+0x128>
   16c8c:	047ffe04 	movi	r17,-8
   16c90:	1c62703a 	and	r17,r3,r17
   16c94:	8807883a 	mov	r3,r17
   16c98:	88005816 	blt	r17,zero,16dfc <_realloc_r+0x1cc>
   16c9c:	8c805736 	bltu	r17,r18,16dfc <_realloc_r+0x1cc>
   16ca0:	80c0300e 	bge	r16,r3,16d64 <_realloc_r+0x134>
   16ca4:	070000f4 	movhi	fp,3
   16ca8:	e7273804 	addi	fp,fp,-25376
   16cac:	e1c00217 	ldw	r7,8(fp)
   16cb0:	9c09883a 	add	r4,r19,r16
   16cb4:	22000117 	ldw	r8,4(r4)
   16cb8:	21c06326 	beq	r4,r7,16e48 <_realloc_r+0x218>
   16cbc:	017fff84 	movi	r5,-2
   16cc0:	414a703a 	and	r5,r8,r5
   16cc4:	214b883a 	add	r5,r4,r5
   16cc8:	29800117 	ldw	r6,4(r5)
   16ccc:	3180004c 	andi	r6,r6,1
   16cd0:	30003f26 	beq	r6,zero,16dd0 <_realloc_r+0x1a0>
   16cd4:	1080004c 	andi	r2,r2,1
   16cd8:	10008326 	beq	r2,zero,16ee8 <_realloc_r+0x2b8>
   16cdc:	900b883a 	mov	r5,r18
   16ce0:	a009883a 	mov	r4,r20
   16ce4:	000d2740 	call	d274 <_malloc_r>
   16ce8:	1025883a 	mov	r18,r2
   16cec:	10011e26 	beq	r2,zero,17168 <_realloc_r+0x538>
   16cf0:	a93fff17 	ldw	r4,-4(r21)
   16cf4:	10fffe04 	addi	r3,r2,-8
   16cf8:	00bfff84 	movi	r2,-2
   16cfc:	2084703a 	and	r2,r4,r2
   16d00:	9885883a 	add	r2,r19,r2
   16d04:	1880ee26 	beq	r3,r2,170c0 <_realloc_r+0x490>
   16d08:	81bfff04 	addi	r6,r16,-4
   16d0c:	00800904 	movi	r2,36
   16d10:	1180b836 	bltu	r2,r6,16ff4 <_realloc_r+0x3c4>
   16d14:	00c004c4 	movi	r3,19
   16d18:	19809636 	bltu	r3,r6,16f74 <_realloc_r+0x344>
   16d1c:	9005883a 	mov	r2,r18
   16d20:	a807883a 	mov	r3,r21
   16d24:	19000017 	ldw	r4,0(r3)
   16d28:	11000015 	stw	r4,0(r2)
   16d2c:	19000117 	ldw	r4,4(r3)
   16d30:	11000115 	stw	r4,4(r2)
   16d34:	18c00217 	ldw	r3,8(r3)
   16d38:	10c00215 	stw	r3,8(r2)
   16d3c:	a80b883a 	mov	r5,r21
   16d40:	a009883a 	mov	r4,r20
   16d44:	0014bd80 	call	14bd8 <_free_r>
   16d48:	a009883a 	mov	r4,r20
   16d4c:	001e4dc0 	call	1e4dc <__malloc_unlock>
   16d50:	9005883a 	mov	r2,r18
   16d54:	00001206 	br	16da0 <_realloc_r+0x170>
   16d58:	00c00404 	movi	r3,16
   16d5c:	1823883a 	mov	r17,r3
   16d60:	003fce06 	br	16c9c <__alt_data_end+0xfc016c9c>
   16d64:	a825883a 	mov	r18,r21
   16d68:	8445c83a 	sub	r2,r16,r17
   16d6c:	00c003c4 	movi	r3,15
   16d70:	18802636 	bltu	r3,r2,16e0c <_realloc_r+0x1dc>
   16d74:	99800117 	ldw	r6,4(r19)
   16d78:	9c07883a 	add	r3,r19,r16
   16d7c:	3180004c 	andi	r6,r6,1
   16d80:	3420b03a 	or	r16,r6,r16
   16d84:	9c000115 	stw	r16,4(r19)
   16d88:	18800117 	ldw	r2,4(r3)
   16d8c:	10800054 	ori	r2,r2,1
   16d90:	18800115 	stw	r2,4(r3)
   16d94:	a009883a 	mov	r4,r20
   16d98:	001e4dc0 	call	1e4dc <__malloc_unlock>
   16d9c:	9005883a 	mov	r2,r18
   16da0:	dfc00917 	ldw	ra,36(sp)
   16da4:	df000817 	ldw	fp,32(sp)
   16da8:	ddc00717 	ldw	r23,28(sp)
   16dac:	dd800617 	ldw	r22,24(sp)
   16db0:	dd400517 	ldw	r21,20(sp)
   16db4:	dd000417 	ldw	r20,16(sp)
   16db8:	dcc00317 	ldw	r19,12(sp)
   16dbc:	dc800217 	ldw	r18,8(sp)
   16dc0:	dc400117 	ldw	r17,4(sp)
   16dc4:	dc000017 	ldw	r16,0(sp)
   16dc8:	dec00a04 	addi	sp,sp,40
   16dcc:	f800283a 	ret
   16dd0:	017fff04 	movi	r5,-4
   16dd4:	414a703a 	and	r5,r8,r5
   16dd8:	814d883a 	add	r6,r16,r5
   16ddc:	30c01f16 	blt	r6,r3,16e5c <_realloc_r+0x22c>
   16de0:	20800317 	ldw	r2,12(r4)
   16de4:	20c00217 	ldw	r3,8(r4)
   16de8:	a825883a 	mov	r18,r21
   16dec:	3021883a 	mov	r16,r6
   16df0:	18800315 	stw	r2,12(r3)
   16df4:	10c00215 	stw	r3,8(r2)
   16df8:	003fdb06 	br	16d68 <__alt_data_end+0xfc016d68>
   16dfc:	00800304 	movi	r2,12
   16e00:	a0800015 	stw	r2,0(r20)
   16e04:	0005883a 	mov	r2,zero
   16e08:	003fe506 	br	16da0 <__alt_data_end+0xfc016da0>
   16e0c:	98c00117 	ldw	r3,4(r19)
   16e10:	9c4b883a 	add	r5,r19,r17
   16e14:	11000054 	ori	r4,r2,1
   16e18:	18c0004c 	andi	r3,r3,1
   16e1c:	1c62b03a 	or	r17,r3,r17
   16e20:	9c400115 	stw	r17,4(r19)
   16e24:	29000115 	stw	r4,4(r5)
   16e28:	2885883a 	add	r2,r5,r2
   16e2c:	10c00117 	ldw	r3,4(r2)
   16e30:	29400204 	addi	r5,r5,8
   16e34:	a009883a 	mov	r4,r20
   16e38:	18c00054 	ori	r3,r3,1
   16e3c:	10c00115 	stw	r3,4(r2)
   16e40:	0014bd80 	call	14bd8 <_free_r>
   16e44:	003fd306 	br	16d94 <__alt_data_end+0xfc016d94>
   16e48:	017fff04 	movi	r5,-4
   16e4c:	414a703a 	and	r5,r8,r5
   16e50:	89800404 	addi	r6,r17,16
   16e54:	8151883a 	add	r8,r16,r5
   16e58:	4180590e 	bge	r8,r6,16fc0 <_realloc_r+0x390>
   16e5c:	1080004c 	andi	r2,r2,1
   16e60:	103f9e1e 	bne	r2,zero,16cdc <__alt_data_end+0xfc016cdc>
   16e64:	adbffe17 	ldw	r22,-8(r21)
   16e68:	00bfff04 	movi	r2,-4
   16e6c:	9dadc83a 	sub	r22,r19,r22
   16e70:	b1800117 	ldw	r6,4(r22)
   16e74:	3084703a 	and	r2,r6,r2
   16e78:	20002026 	beq	r4,zero,16efc <_realloc_r+0x2cc>
   16e7c:	80af883a 	add	r23,r16,r2
   16e80:	b96f883a 	add	r23,r23,r5
   16e84:	21c05f26 	beq	r4,r7,17004 <_realloc_r+0x3d4>
   16e88:	b8c01c16 	blt	r23,r3,16efc <_realloc_r+0x2cc>
   16e8c:	20800317 	ldw	r2,12(r4)
   16e90:	20c00217 	ldw	r3,8(r4)
   16e94:	81bfff04 	addi	r6,r16,-4
   16e98:	01000904 	movi	r4,36
   16e9c:	18800315 	stw	r2,12(r3)
   16ea0:	10c00215 	stw	r3,8(r2)
   16ea4:	b0c00217 	ldw	r3,8(r22)
   16ea8:	b0800317 	ldw	r2,12(r22)
   16eac:	b4800204 	addi	r18,r22,8
   16eb0:	18800315 	stw	r2,12(r3)
   16eb4:	10c00215 	stw	r3,8(r2)
   16eb8:	21801b36 	bltu	r4,r6,16f28 <_realloc_r+0x2f8>
   16ebc:	008004c4 	movi	r2,19
   16ec0:	1180352e 	bgeu	r2,r6,16f98 <_realloc_r+0x368>
   16ec4:	a8800017 	ldw	r2,0(r21)
   16ec8:	b0800215 	stw	r2,8(r22)
   16ecc:	a8800117 	ldw	r2,4(r21)
   16ed0:	b0800315 	stw	r2,12(r22)
   16ed4:	008006c4 	movi	r2,27
   16ed8:	11807f36 	bltu	r2,r6,170d8 <_realloc_r+0x4a8>
   16edc:	b0800404 	addi	r2,r22,16
   16ee0:	ad400204 	addi	r21,r21,8
   16ee4:	00002d06 	br	16f9c <_realloc_r+0x36c>
   16ee8:	adbffe17 	ldw	r22,-8(r21)
   16eec:	00bfff04 	movi	r2,-4
   16ef0:	9dadc83a 	sub	r22,r19,r22
   16ef4:	b1000117 	ldw	r4,4(r22)
   16ef8:	2084703a 	and	r2,r4,r2
   16efc:	b03f7726 	beq	r22,zero,16cdc <__alt_data_end+0xfc016cdc>
   16f00:	80af883a 	add	r23,r16,r2
   16f04:	b8ff7516 	blt	r23,r3,16cdc <__alt_data_end+0xfc016cdc>
   16f08:	b0800317 	ldw	r2,12(r22)
   16f0c:	b0c00217 	ldw	r3,8(r22)
   16f10:	81bfff04 	addi	r6,r16,-4
   16f14:	01000904 	movi	r4,36
   16f18:	18800315 	stw	r2,12(r3)
   16f1c:	10c00215 	stw	r3,8(r2)
   16f20:	b4800204 	addi	r18,r22,8
   16f24:	21bfe52e 	bgeu	r4,r6,16ebc <__alt_data_end+0xfc016ebc>
   16f28:	a80b883a 	mov	r5,r21
   16f2c:	9009883a 	mov	r4,r18
   16f30:	00158b40 	call	158b4 <memmove>
   16f34:	b821883a 	mov	r16,r23
   16f38:	b027883a 	mov	r19,r22
   16f3c:	003f8a06 	br	16d68 <__alt_data_end+0xfc016d68>
   16f40:	300b883a 	mov	r5,r6
   16f44:	dfc00917 	ldw	ra,36(sp)
   16f48:	df000817 	ldw	fp,32(sp)
   16f4c:	ddc00717 	ldw	r23,28(sp)
   16f50:	dd800617 	ldw	r22,24(sp)
   16f54:	dd400517 	ldw	r21,20(sp)
   16f58:	dd000417 	ldw	r20,16(sp)
   16f5c:	dcc00317 	ldw	r19,12(sp)
   16f60:	dc800217 	ldw	r18,8(sp)
   16f64:	dc400117 	ldw	r17,4(sp)
   16f68:	dc000017 	ldw	r16,0(sp)
   16f6c:	dec00a04 	addi	sp,sp,40
   16f70:	000d2741 	jmpi	d274 <_malloc_r>
   16f74:	a8c00017 	ldw	r3,0(r21)
   16f78:	90c00015 	stw	r3,0(r18)
   16f7c:	a8c00117 	ldw	r3,4(r21)
   16f80:	90c00115 	stw	r3,4(r18)
   16f84:	00c006c4 	movi	r3,27
   16f88:	19804536 	bltu	r3,r6,170a0 <_realloc_r+0x470>
   16f8c:	90800204 	addi	r2,r18,8
   16f90:	a8c00204 	addi	r3,r21,8
   16f94:	003f6306 	br	16d24 <__alt_data_end+0xfc016d24>
   16f98:	9005883a 	mov	r2,r18
   16f9c:	a8c00017 	ldw	r3,0(r21)
   16fa0:	b821883a 	mov	r16,r23
   16fa4:	b027883a 	mov	r19,r22
   16fa8:	10c00015 	stw	r3,0(r2)
   16fac:	a8c00117 	ldw	r3,4(r21)
   16fb0:	10c00115 	stw	r3,4(r2)
   16fb4:	a8c00217 	ldw	r3,8(r21)
   16fb8:	10c00215 	stw	r3,8(r2)
   16fbc:	003f6a06 	br	16d68 <__alt_data_end+0xfc016d68>
   16fc0:	9c67883a 	add	r19,r19,r17
   16fc4:	4445c83a 	sub	r2,r8,r17
   16fc8:	e4c00215 	stw	r19,8(fp)
   16fcc:	10800054 	ori	r2,r2,1
   16fd0:	98800115 	stw	r2,4(r19)
   16fd4:	a8bfff17 	ldw	r2,-4(r21)
   16fd8:	a009883a 	mov	r4,r20
   16fdc:	1080004c 	andi	r2,r2,1
   16fe0:	1462b03a 	or	r17,r2,r17
   16fe4:	ac7fff15 	stw	r17,-4(r21)
   16fe8:	001e4dc0 	call	1e4dc <__malloc_unlock>
   16fec:	a805883a 	mov	r2,r21
   16ff0:	003f6b06 	br	16da0 <__alt_data_end+0xfc016da0>
   16ff4:	a80b883a 	mov	r5,r21
   16ff8:	9009883a 	mov	r4,r18
   16ffc:	00158b40 	call	158b4 <memmove>
   17000:	003f4e06 	br	16d3c <__alt_data_end+0xfc016d3c>
   17004:	89000404 	addi	r4,r17,16
   17008:	b93fbc16 	blt	r23,r4,16efc <__alt_data_end+0xfc016efc>
   1700c:	b0800317 	ldw	r2,12(r22)
   17010:	b0c00217 	ldw	r3,8(r22)
   17014:	81bfff04 	addi	r6,r16,-4
   17018:	01000904 	movi	r4,36
   1701c:	18800315 	stw	r2,12(r3)
   17020:	10c00215 	stw	r3,8(r2)
   17024:	b4800204 	addi	r18,r22,8
   17028:	21804336 	bltu	r4,r6,17138 <_realloc_r+0x508>
   1702c:	008004c4 	movi	r2,19
   17030:	11803f2e 	bgeu	r2,r6,17130 <_realloc_r+0x500>
   17034:	a8800017 	ldw	r2,0(r21)
   17038:	b0800215 	stw	r2,8(r22)
   1703c:	a8800117 	ldw	r2,4(r21)
   17040:	b0800315 	stw	r2,12(r22)
   17044:	008006c4 	movi	r2,27
   17048:	11803f36 	bltu	r2,r6,17148 <_realloc_r+0x518>
   1704c:	b0800404 	addi	r2,r22,16
   17050:	ad400204 	addi	r21,r21,8
   17054:	a8c00017 	ldw	r3,0(r21)
   17058:	10c00015 	stw	r3,0(r2)
   1705c:	a8c00117 	ldw	r3,4(r21)
   17060:	10c00115 	stw	r3,4(r2)
   17064:	a8c00217 	ldw	r3,8(r21)
   17068:	10c00215 	stw	r3,8(r2)
   1706c:	b447883a 	add	r3,r22,r17
   17070:	bc45c83a 	sub	r2,r23,r17
   17074:	e0c00215 	stw	r3,8(fp)
   17078:	10800054 	ori	r2,r2,1
   1707c:	18800115 	stw	r2,4(r3)
   17080:	b0800117 	ldw	r2,4(r22)
   17084:	a009883a 	mov	r4,r20
   17088:	1080004c 	andi	r2,r2,1
   1708c:	1462b03a 	or	r17,r2,r17
   17090:	b4400115 	stw	r17,4(r22)
   17094:	001e4dc0 	call	1e4dc <__malloc_unlock>
   17098:	9005883a 	mov	r2,r18
   1709c:	003f4006 	br	16da0 <__alt_data_end+0xfc016da0>
   170a0:	a8c00217 	ldw	r3,8(r21)
   170a4:	90c00215 	stw	r3,8(r18)
   170a8:	a8c00317 	ldw	r3,12(r21)
   170ac:	90c00315 	stw	r3,12(r18)
   170b0:	30801126 	beq	r6,r2,170f8 <_realloc_r+0x4c8>
   170b4:	90800404 	addi	r2,r18,16
   170b8:	a8c00404 	addi	r3,r21,16
   170bc:	003f1906 	br	16d24 <__alt_data_end+0xfc016d24>
   170c0:	90ffff17 	ldw	r3,-4(r18)
   170c4:	00bfff04 	movi	r2,-4
   170c8:	a825883a 	mov	r18,r21
   170cc:	1884703a 	and	r2,r3,r2
   170d0:	80a1883a 	add	r16,r16,r2
   170d4:	003f2406 	br	16d68 <__alt_data_end+0xfc016d68>
   170d8:	a8800217 	ldw	r2,8(r21)
   170dc:	b0800415 	stw	r2,16(r22)
   170e0:	a8800317 	ldw	r2,12(r21)
   170e4:	b0800515 	stw	r2,20(r22)
   170e8:	31000a26 	beq	r6,r4,17114 <_realloc_r+0x4e4>
   170ec:	b0800604 	addi	r2,r22,24
   170f0:	ad400404 	addi	r21,r21,16
   170f4:	003fa906 	br	16f9c <__alt_data_end+0xfc016f9c>
   170f8:	a9000417 	ldw	r4,16(r21)
   170fc:	90800604 	addi	r2,r18,24
   17100:	a8c00604 	addi	r3,r21,24
   17104:	91000415 	stw	r4,16(r18)
   17108:	a9000517 	ldw	r4,20(r21)
   1710c:	91000515 	stw	r4,20(r18)
   17110:	003f0406 	br	16d24 <__alt_data_end+0xfc016d24>
   17114:	a8c00417 	ldw	r3,16(r21)
   17118:	ad400604 	addi	r21,r21,24
   1711c:	b0800804 	addi	r2,r22,32
   17120:	b0c00615 	stw	r3,24(r22)
   17124:	a8ffff17 	ldw	r3,-4(r21)
   17128:	b0c00715 	stw	r3,28(r22)
   1712c:	003f9b06 	br	16f9c <__alt_data_end+0xfc016f9c>
   17130:	9005883a 	mov	r2,r18
   17134:	003fc706 	br	17054 <__alt_data_end+0xfc017054>
   17138:	a80b883a 	mov	r5,r21
   1713c:	9009883a 	mov	r4,r18
   17140:	00158b40 	call	158b4 <memmove>
   17144:	003fc906 	br	1706c <__alt_data_end+0xfc01706c>
   17148:	a8800217 	ldw	r2,8(r21)
   1714c:	b0800415 	stw	r2,16(r22)
   17150:	a8800317 	ldw	r2,12(r21)
   17154:	b0800515 	stw	r2,20(r22)
   17158:	31000726 	beq	r6,r4,17178 <_realloc_r+0x548>
   1715c:	b0800604 	addi	r2,r22,24
   17160:	ad400404 	addi	r21,r21,16
   17164:	003fbb06 	br	17054 <__alt_data_end+0xfc017054>
   17168:	a009883a 	mov	r4,r20
   1716c:	001e4dc0 	call	1e4dc <__malloc_unlock>
   17170:	0005883a 	mov	r2,zero
   17174:	003f0a06 	br	16da0 <__alt_data_end+0xfc016da0>
   17178:	a8c00417 	ldw	r3,16(r21)
   1717c:	ad400604 	addi	r21,r21,24
   17180:	b0800804 	addi	r2,r22,32
   17184:	b0c00615 	stw	r3,24(r22)
   17188:	a8ffff17 	ldw	r3,-4(r21)
   1718c:	b0c00715 	stw	r3,28(r22)
   17190:	003fb006 	br	17054 <__alt_data_end+0xfc017054>

00017194 <__fpclassifyd>:
   17194:	00a00034 	movhi	r2,32768
   17198:	10bfffc4 	addi	r2,r2,-1
   1719c:	2884703a 	and	r2,r5,r2
   171a0:	10000726 	beq	r2,zero,171c0 <__fpclassifyd+0x2c>
   171a4:	00fffc34 	movhi	r3,65520
   171a8:	019ff834 	movhi	r6,32736
   171ac:	28c7883a 	add	r3,r5,r3
   171b0:	31bfffc4 	addi	r6,r6,-1
   171b4:	30c00536 	bltu	r6,r3,171cc <__fpclassifyd+0x38>
   171b8:	00800104 	movi	r2,4
   171bc:	f800283a 	ret
   171c0:	2000021e 	bne	r4,zero,171cc <__fpclassifyd+0x38>
   171c4:	00800084 	movi	r2,2
   171c8:	f800283a 	ret
   171cc:	00dffc34 	movhi	r3,32752
   171d0:	019ff834 	movhi	r6,32736
   171d4:	28cb883a 	add	r5,r5,r3
   171d8:	31bfffc4 	addi	r6,r6,-1
   171dc:	317ff62e 	bgeu	r6,r5,171b8 <__alt_data_end+0xfc0171b8>
   171e0:	01400434 	movhi	r5,16
   171e4:	297fffc4 	addi	r5,r5,-1
   171e8:	28800236 	bltu	r5,r2,171f4 <__fpclassifyd+0x60>
   171ec:	008000c4 	movi	r2,3
   171f0:	f800283a 	ret
   171f4:	10c00226 	beq	r2,r3,17200 <__fpclassifyd+0x6c>
   171f8:	0005883a 	mov	r2,zero
   171fc:	f800283a 	ret
   17200:	2005003a 	cmpeq	r2,r4,zero
   17204:	f800283a 	ret

00017208 <__sread>:
   17208:	defffe04 	addi	sp,sp,-8
   1720c:	dc000015 	stw	r16,0(sp)
   17210:	2821883a 	mov	r16,r5
   17214:	2940038f 	ldh	r5,14(r5)
   17218:	dfc00115 	stw	ra,4(sp)
   1721c:	001a6b00 	call	1a6b0 <_read_r>
   17220:	10000716 	blt	r2,zero,17240 <__sread+0x38>
   17224:	80c01417 	ldw	r3,80(r16)
   17228:	1887883a 	add	r3,r3,r2
   1722c:	80c01415 	stw	r3,80(r16)
   17230:	dfc00117 	ldw	ra,4(sp)
   17234:	dc000017 	ldw	r16,0(sp)
   17238:	dec00204 	addi	sp,sp,8
   1723c:	f800283a 	ret
   17240:	80c0030b 	ldhu	r3,12(r16)
   17244:	18fbffcc 	andi	r3,r3,61439
   17248:	80c0030d 	sth	r3,12(r16)
   1724c:	dfc00117 	ldw	ra,4(sp)
   17250:	dc000017 	ldw	r16,0(sp)
   17254:	dec00204 	addi	sp,sp,8
   17258:	f800283a 	ret

0001725c <__seofread>:
   1725c:	0005883a 	mov	r2,zero
   17260:	f800283a 	ret

00017264 <__swrite>:
   17264:	2880030b 	ldhu	r2,12(r5)
   17268:	defffb04 	addi	sp,sp,-20
   1726c:	dcc00315 	stw	r19,12(sp)
   17270:	dc800215 	stw	r18,8(sp)
   17274:	dc400115 	stw	r17,4(sp)
   17278:	dc000015 	stw	r16,0(sp)
   1727c:	dfc00415 	stw	ra,16(sp)
   17280:	10c0400c 	andi	r3,r2,256
   17284:	2821883a 	mov	r16,r5
   17288:	2023883a 	mov	r17,r4
   1728c:	3025883a 	mov	r18,r6
   17290:	3827883a 	mov	r19,r7
   17294:	18000526 	beq	r3,zero,172ac <__swrite+0x48>
   17298:	2940038f 	ldh	r5,14(r5)
   1729c:	01c00084 	movi	r7,2
   172a0:	000d883a 	mov	r6,zero
   172a4:	001a6500 	call	1a650 <_lseek_r>
   172a8:	8080030b 	ldhu	r2,12(r16)
   172ac:	8140038f 	ldh	r5,14(r16)
   172b0:	10bbffcc 	andi	r2,r2,61439
   172b4:	980f883a 	mov	r7,r19
   172b8:	900d883a 	mov	r6,r18
   172bc:	8809883a 	mov	r4,r17
   172c0:	8080030d 	sth	r2,12(r16)
   172c4:	dfc00417 	ldw	ra,16(sp)
   172c8:	dcc00317 	ldw	r19,12(sp)
   172cc:	dc800217 	ldw	r18,8(sp)
   172d0:	dc400117 	ldw	r17,4(sp)
   172d4:	dc000017 	ldw	r16,0(sp)
   172d8:	dec00504 	addi	sp,sp,20
   172dc:	001a1041 	jmpi	1a104 <_write_r>

000172e0 <__sseek>:
   172e0:	defffe04 	addi	sp,sp,-8
   172e4:	dc000015 	stw	r16,0(sp)
   172e8:	2821883a 	mov	r16,r5
   172ec:	2940038f 	ldh	r5,14(r5)
   172f0:	dfc00115 	stw	ra,4(sp)
   172f4:	001a6500 	call	1a650 <_lseek_r>
   172f8:	00ffffc4 	movi	r3,-1
   172fc:	10c00826 	beq	r2,r3,17320 <__sseek+0x40>
   17300:	80c0030b 	ldhu	r3,12(r16)
   17304:	80801415 	stw	r2,80(r16)
   17308:	18c40014 	ori	r3,r3,4096
   1730c:	80c0030d 	sth	r3,12(r16)
   17310:	dfc00117 	ldw	ra,4(sp)
   17314:	dc000017 	ldw	r16,0(sp)
   17318:	dec00204 	addi	sp,sp,8
   1731c:	f800283a 	ret
   17320:	80c0030b 	ldhu	r3,12(r16)
   17324:	18fbffcc 	andi	r3,r3,61439
   17328:	80c0030d 	sth	r3,12(r16)
   1732c:	dfc00117 	ldw	ra,4(sp)
   17330:	dc000017 	ldw	r16,0(sp)
   17334:	dec00204 	addi	sp,sp,8
   17338:	f800283a 	ret

0001733c <__sclose>:
   1733c:	2940038f 	ldh	r5,14(r5)
   17340:	001a1641 	jmpi	1a164 <_close_r>

00017344 <__ssprint_r>:
   17344:	30800217 	ldw	r2,8(r6)
   17348:	defff604 	addi	sp,sp,-40
   1734c:	dc800215 	stw	r18,8(sp)
   17350:	dfc00915 	stw	ra,36(sp)
   17354:	df000815 	stw	fp,32(sp)
   17358:	ddc00715 	stw	r23,28(sp)
   1735c:	dd800615 	stw	r22,24(sp)
   17360:	dd400515 	stw	r21,20(sp)
   17364:	dd000415 	stw	r20,16(sp)
   17368:	dcc00315 	stw	r19,12(sp)
   1736c:	dc400115 	stw	r17,4(sp)
   17370:	dc000015 	stw	r16,0(sp)
   17374:	3025883a 	mov	r18,r6
   17378:	10005826 	beq	r2,zero,174dc <__ssprint_r+0x198>
   1737c:	2027883a 	mov	r19,r4
   17380:	35c00017 	ldw	r23,0(r6)
   17384:	29000017 	ldw	r4,0(r5)
   17388:	28800217 	ldw	r2,8(r5)
   1738c:	2823883a 	mov	r17,r5
   17390:	0039883a 	mov	fp,zero
   17394:	0021883a 	mov	r16,zero
   17398:	80003926 	beq	r16,zero,17480 <__ssprint_r+0x13c>
   1739c:	102b883a 	mov	r21,r2
   173a0:	102d883a 	mov	r22,r2
   173a4:	80803a36 	bltu	r16,r2,17490 <__ssprint_r+0x14c>
   173a8:	88c0030b 	ldhu	r3,12(r17)
   173ac:	1881200c 	andi	r2,r3,1152
   173b0:	10002626 	beq	r2,zero,1744c <__ssprint_r+0x108>
   173b4:	88800517 	ldw	r2,20(r17)
   173b8:	89400417 	ldw	r5,16(r17)
   173bc:	81800044 	addi	r6,r16,1
   173c0:	108f883a 	add	r7,r2,r2
   173c4:	3885883a 	add	r2,r7,r2
   173c8:	100ed7fa 	srli	r7,r2,31
   173cc:	216dc83a 	sub	r22,r4,r5
   173d0:	3589883a 	add	r4,r6,r22
   173d4:	3885883a 	add	r2,r7,r2
   173d8:	102bd07a 	srai	r21,r2,1
   173dc:	a80d883a 	mov	r6,r21
   173e0:	a900022e 	bgeu	r21,r4,173ec <__ssprint_r+0xa8>
   173e4:	202b883a 	mov	r21,r4
   173e8:	200d883a 	mov	r6,r4
   173ec:	18c1000c 	andi	r3,r3,1024
   173f0:	18002a26 	beq	r3,zero,1749c <__ssprint_r+0x158>
   173f4:	300b883a 	mov	r5,r6
   173f8:	9809883a 	mov	r4,r19
   173fc:	000d2740 	call	d274 <_malloc_r>
   17400:	1029883a 	mov	r20,r2
   17404:	10002c26 	beq	r2,zero,174b8 <__ssprint_r+0x174>
   17408:	89400417 	ldw	r5,16(r17)
   1740c:	b00d883a 	mov	r6,r22
   17410:	1009883a 	mov	r4,r2
   17414:	000da800 	call	da80 <memcpy>
   17418:	8880030b 	ldhu	r2,12(r17)
   1741c:	00fedfc4 	movi	r3,-1153
   17420:	10c4703a 	and	r2,r2,r3
   17424:	10802014 	ori	r2,r2,128
   17428:	8880030d 	sth	r2,12(r17)
   1742c:	a589883a 	add	r4,r20,r22
   17430:	adadc83a 	sub	r22,r21,r22
   17434:	8d400515 	stw	r21,20(r17)
   17438:	8d800215 	stw	r22,8(r17)
   1743c:	8d000415 	stw	r20,16(r17)
   17440:	89000015 	stw	r4,0(r17)
   17444:	802b883a 	mov	r21,r16
   17448:	802d883a 	mov	r22,r16
   1744c:	b00d883a 	mov	r6,r22
   17450:	e00b883a 	mov	r5,fp
   17454:	00158b40 	call	158b4 <memmove>
   17458:	88800217 	ldw	r2,8(r17)
   1745c:	89000017 	ldw	r4,0(r17)
   17460:	90c00217 	ldw	r3,8(r18)
   17464:	1545c83a 	sub	r2,r2,r21
   17468:	2589883a 	add	r4,r4,r22
   1746c:	88800215 	stw	r2,8(r17)
   17470:	89000015 	stw	r4,0(r17)
   17474:	1c21c83a 	sub	r16,r3,r16
   17478:	94000215 	stw	r16,8(r18)
   1747c:	80001726 	beq	r16,zero,174dc <__ssprint_r+0x198>
   17480:	bf000017 	ldw	fp,0(r23)
   17484:	bc000117 	ldw	r16,4(r23)
   17488:	bdc00204 	addi	r23,r23,8
   1748c:	003fc206 	br	17398 <__alt_data_end+0xfc017398>
   17490:	802b883a 	mov	r21,r16
   17494:	802d883a 	mov	r22,r16
   17498:	003fec06 	br	1744c <__alt_data_end+0xfc01744c>
   1749c:	9809883a 	mov	r4,r19
   174a0:	0016c300 	call	16c30 <_realloc_r>
   174a4:	1029883a 	mov	r20,r2
   174a8:	103fe01e 	bne	r2,zero,1742c <__alt_data_end+0xfc01742c>
   174ac:	89400417 	ldw	r5,16(r17)
   174b0:	9809883a 	mov	r4,r19
   174b4:	0014bd80 	call	14bd8 <_free_r>
   174b8:	88c0030b 	ldhu	r3,12(r17)
   174bc:	00800304 	movi	r2,12
   174c0:	98800015 	stw	r2,0(r19)
   174c4:	18c01014 	ori	r3,r3,64
   174c8:	88c0030d 	sth	r3,12(r17)
   174cc:	00bfffc4 	movi	r2,-1
   174d0:	90000215 	stw	zero,8(r18)
   174d4:	90000115 	stw	zero,4(r18)
   174d8:	00000206 	br	174e4 <__ssprint_r+0x1a0>
   174dc:	90000115 	stw	zero,4(r18)
   174e0:	0005883a 	mov	r2,zero
   174e4:	dfc00917 	ldw	ra,36(sp)
   174e8:	df000817 	ldw	fp,32(sp)
   174ec:	ddc00717 	ldw	r23,28(sp)
   174f0:	dd800617 	ldw	r22,24(sp)
   174f4:	dd400517 	ldw	r21,20(sp)
   174f8:	dd000417 	ldw	r20,16(sp)
   174fc:	dcc00317 	ldw	r19,12(sp)
   17500:	dc800217 	ldw	r18,8(sp)
   17504:	dc400117 	ldw	r17,4(sp)
   17508:	dc000017 	ldw	r16,0(sp)
   1750c:	dec00a04 	addi	sp,sp,40
   17510:	f800283a 	ret

00017514 <___svfiprintf_internal_r>:
   17514:	2880030b 	ldhu	r2,12(r5)
   17518:	deffc804 	addi	sp,sp,-224
   1751c:	dcc03115 	stw	r19,196(sp)
   17520:	dfc03715 	stw	ra,220(sp)
   17524:	df003615 	stw	fp,216(sp)
   17528:	ddc03515 	stw	r23,212(sp)
   1752c:	dd803415 	stw	r22,208(sp)
   17530:	dd403315 	stw	r21,204(sp)
   17534:	dd003215 	stw	r20,200(sp)
   17538:	dc803015 	stw	r18,192(sp)
   1753c:	dc402f15 	stw	r17,188(sp)
   17540:	dc002e15 	stw	r16,184(sp)
   17544:	d9402315 	stw	r5,140(sp)
   17548:	d9002715 	stw	r4,156(sp)
   1754c:	1080200c 	andi	r2,r2,128
   17550:	d9c02415 	stw	r7,144(sp)
   17554:	3027883a 	mov	r19,r6
   17558:	10000226 	beq	r2,zero,17564 <___svfiprintf_internal_r+0x50>
   1755c:	28800417 	ldw	r2,16(r5)
   17560:	10046d26 	beq	r2,zero,18718 <___svfiprintf_internal_r+0x1204>
   17564:	d8801a04 	addi	r2,sp,104
   17568:	d8c019c4 	addi	r3,sp,103
   1756c:	058000f4 	movhi	r22,3
   17570:	10c9c83a 	sub	r4,r2,r3
   17574:	b5a5c704 	addi	r22,r22,-26852
   17578:	d8801e15 	stw	r2,120(sp)
   1757c:	d8c01f15 	stw	r3,124(sp)
   17580:	dec01a15 	stw	sp,104(sp)
   17584:	d8001c15 	stw	zero,112(sp)
   17588:	d8001b15 	stw	zero,108(sp)
   1758c:	d811883a 	mov	r8,sp
   17590:	d8002915 	stw	zero,164(sp)
   17594:	d8002615 	stw	zero,152(sp)
   17598:	d9002c15 	stw	r4,176(sp)
   1759c:	98800007 	ldb	r2,0(r19)
   175a0:	10031426 	beq	r2,zero,181f4 <___svfiprintf_internal_r+0xce0>
   175a4:	00c00944 	movi	r3,37
   175a8:	9825883a 	mov	r18,r19
   175ac:	10c0021e 	bne	r2,r3,175b8 <___svfiprintf_internal_r+0xa4>
   175b0:	00001406 	br	17604 <___svfiprintf_internal_r+0xf0>
   175b4:	10c00326 	beq	r2,r3,175c4 <___svfiprintf_internal_r+0xb0>
   175b8:	94800044 	addi	r18,r18,1
   175bc:	90800007 	ldb	r2,0(r18)
   175c0:	103ffc1e 	bne	r2,zero,175b4 <__alt_data_end+0xfc0175b4>
   175c4:	94e1c83a 	sub	r16,r18,r19
   175c8:	80000e26 	beq	r16,zero,17604 <___svfiprintf_internal_r+0xf0>
   175cc:	d8c01c17 	ldw	r3,112(sp)
   175d0:	d8801b17 	ldw	r2,108(sp)
   175d4:	44c00015 	stw	r19,0(r8)
   175d8:	1c07883a 	add	r3,r3,r16
   175dc:	10800044 	addi	r2,r2,1
   175e0:	d8c01c15 	stw	r3,112(sp)
   175e4:	44000115 	stw	r16,4(r8)
   175e8:	d8801b15 	stw	r2,108(sp)
   175ec:	00c001c4 	movi	r3,7
   175f0:	18835c16 	blt	r3,r2,18364 <___svfiprintf_internal_r+0xe50>
   175f4:	42000204 	addi	r8,r8,8
   175f8:	d9402617 	ldw	r5,152(sp)
   175fc:	2c0b883a 	add	r5,r5,r16
   17600:	d9402615 	stw	r5,152(sp)
   17604:	90800007 	ldb	r2,0(r18)
   17608:	1002fc26 	beq	r2,zero,181fc <___svfiprintf_internal_r+0xce8>
   1760c:	0023883a 	mov	r17,zero
   17610:	00bfffc4 	movi	r2,-1
   17614:	0021883a 	mov	r16,zero
   17618:	94c00044 	addi	r19,r18,1
   1761c:	90c00047 	ldb	r3,1(r18)
   17620:	dc402105 	stb	r17,132(sp)
   17624:	d8001d85 	stb	zero,118(sp)
   17628:	002b883a 	mov	r21,zero
   1762c:	d8802015 	stw	r2,128(sp)
   17630:	d8002515 	stw	zero,148(sp)
   17634:	04801604 	movi	r18,88
   17638:	05000244 	movi	r20,9
   1763c:	402f883a 	mov	r23,r8
   17640:	8023883a 	mov	r17,r16
   17644:	9cc00044 	addi	r19,r19,1
   17648:	18bff804 	addi	r2,r3,-32
   1764c:	9081fb36 	bltu	r18,r2,17e3c <___svfiprintf_internal_r+0x928>
   17650:	100490ba 	slli	r2,r2,2
   17654:	01000074 	movhi	r4,1
   17658:	211d9a04 	addi	r4,r4,30312
   1765c:	1105883a 	add	r2,r2,r4
   17660:	10800017 	ldw	r2,0(r2)
   17664:	1000683a 	jmp	r2
   17668:	00017868 	cmpgeui	zero,zero,1505
   1766c:	00017e3c 	xorhi	zero,zero,1528
   17670:	00017e3c 	xorhi	zero,zero,1528
   17674:	0001785c 	xori	zero,zero,1505
   17678:	00017e3c 	xorhi	zero,zero,1528
   1767c:	00017e3c 	xorhi	zero,zero,1528
   17680:	00017e3c 	xorhi	zero,zero,1528
   17684:	00017e3c 	xorhi	zero,zero,1528
   17688:	00017e3c 	xorhi	zero,zero,1528
   1768c:	00017e3c 	xorhi	zero,zero,1528
   17690:	000177cc 	andi	zero,zero,1503
   17694:	000179c8 	cmpgei	zero,zero,1511
   17698:	00017e3c 	xorhi	zero,zero,1528
   1769c:	000177f4 	movhi	zero,1503
   176a0:	00017e78 	rdprs	zero,zero,1529
   176a4:	00017e3c 	xorhi	zero,zero,1528
   176a8:	00017e6c 	andhi	zero,zero,1529
   176ac:	00017e00 	call	17e0 <_ZN3USB11dispatchPktEhht+0x144>
   176b0:	00017e00 	call	17e0 <_ZN3USB11dispatchPktEhht+0x144>
   176b4:	00017e00 	call	17e0 <_ZN3USB11dispatchPktEhht+0x144>
   176b8:	00017e00 	call	17e0 <_ZN3USB11dispatchPktEhht+0x144>
   176bc:	00017e00 	call	17e0 <_ZN3USB11dispatchPktEhht+0x144>
   176c0:	00017e00 	call	17e0 <_ZN3USB11dispatchPktEhht+0x144>
   176c4:	00017e00 	call	17e0 <_ZN3USB11dispatchPktEhht+0x144>
   176c8:	00017e00 	call	17e0 <_ZN3USB11dispatchPktEhht+0x144>
   176cc:	00017e00 	call	17e0 <_ZN3USB11dispatchPktEhht+0x144>
   176d0:	00017e3c 	xorhi	zero,zero,1528
   176d4:	00017e3c 	xorhi	zero,zero,1528
   176d8:	00017e3c 	xorhi	zero,zero,1528
   176dc:	00017e3c 	xorhi	zero,zero,1528
   176e0:	00017e3c 	xorhi	zero,zero,1528
   176e4:	00017e3c 	xorhi	zero,zero,1528
   176e8:	00017e3c 	xorhi	zero,zero,1528
   176ec:	00017e3c 	xorhi	zero,zero,1528
   176f0:	00017e3c 	xorhi	zero,zero,1528
   176f4:	00017e3c 	xorhi	zero,zero,1528
   176f8:	00017d84 	movi	zero,1526
   176fc:	00017e3c 	xorhi	zero,zero,1528
   17700:	00017e3c 	xorhi	zero,zero,1528
   17704:	00017e3c 	xorhi	zero,zero,1528
   17708:	00017e3c 	xorhi	zero,zero,1528
   1770c:	00017e3c 	xorhi	zero,zero,1528
   17710:	00017e3c 	xorhi	zero,zero,1528
   17714:	00017e3c 	xorhi	zero,zero,1528
   17718:	00017e3c 	xorhi	zero,zero,1528
   1771c:	00017e3c 	xorhi	zero,zero,1528
   17720:	00017e3c 	xorhi	zero,zero,1528
   17724:	00017f34 	movhi	zero,1532
   17728:	00017e3c 	xorhi	zero,zero,1528
   1772c:	00017e3c 	xorhi	zero,zero,1528
   17730:	00017e3c 	xorhi	zero,zero,1528
   17734:	00017e3c 	xorhi	zero,zero,1528
   17738:	00017e3c 	xorhi	zero,zero,1528
   1773c:	00017ec0 	call	17ec <_ZN3USB11dispatchPktEhht+0x150>
   17740:	00017e3c 	xorhi	zero,zero,1528
   17744:	00017e3c 	xorhi	zero,zero,1528
   17748:	00017bc0 	call	17bc <_ZN3USB11dispatchPktEhht+0x120>
   1774c:	00017e3c 	xorhi	zero,zero,1528
   17750:	00017e3c 	xorhi	zero,zero,1528
   17754:	00017e3c 	xorhi	zero,zero,1528
   17758:	00017e3c 	xorhi	zero,zero,1528
   1775c:	00017e3c 	xorhi	zero,zero,1528
   17760:	00017e3c 	xorhi	zero,zero,1528
   17764:	00017e3c 	xorhi	zero,zero,1528
   17768:	00017e3c 	xorhi	zero,zero,1528
   1776c:	00017e3c 	xorhi	zero,zero,1528
   17770:	00017e3c 	xorhi	zero,zero,1528
   17774:	00017a8c 	andi	zero,zero,1514
   17778:	00017c70 	cmpltui	zero,zero,1521
   1777c:	00017e3c 	xorhi	zero,zero,1528
   17780:	00017e3c 	xorhi	zero,zero,1528
   17784:	00017e3c 	xorhi	zero,zero,1528
   17788:	00017c64 	muli	zero,zero,1521
   1778c:	00017c70 	cmpltui	zero,zero,1521
   17790:	00017e3c 	xorhi	zero,zero,1528
   17794:	00017e3c 	xorhi	zero,zero,1528
   17798:	00017c50 	cmplti	zero,zero,1521
   1779c:	00017e3c 	xorhi	zero,zero,1528
   177a0:	00017c10 	cmplti	zero,zero,1520
   177a4:	000179dc 	xori	zero,zero,1511
   177a8:	00017800 	call	1780 <_ZN3USB11dispatchPktEhht+0xe4>
   177ac:	00017d78 	rdprs	zero,zero,1525
   177b0:	00017e3c 	xorhi	zero,zero,1528
   177b4:	00017d24 	muli	zero,zero,1524
   177b8:	00017e3c 	xorhi	zero,zero,1528
   177bc:	00017940 	call	1794 <_ZN3USB11dispatchPktEhht+0xf8>
   177c0:	00017e3c 	xorhi	zero,zero,1528
   177c4:	00017e3c 	xorhi	zero,zero,1528
   177c8:	0001788c 	andi	zero,zero,1506
   177cc:	d9002417 	ldw	r4,144(sp)
   177d0:	d9402417 	ldw	r5,144(sp)
   177d4:	21000017 	ldw	r4,0(r4)
   177d8:	28800104 	addi	r2,r5,4
   177dc:	d9002515 	stw	r4,148(sp)
   177e0:	20032b0e 	bge	r4,zero,18490 <___svfiprintf_internal_r+0xf7c>
   177e4:	d8c02517 	ldw	r3,148(sp)
   177e8:	d8802415 	stw	r2,144(sp)
   177ec:	00c7c83a 	sub	r3,zero,r3
   177f0:	d8c02515 	stw	r3,148(sp)
   177f4:	8c400114 	ori	r17,r17,4
   177f8:	98c00007 	ldb	r3,0(r19)
   177fc:	003f9106 	br	17644 <__alt_data_end+0xfc017644>
   17800:	00800c04 	movi	r2,48
   17804:	d9402417 	ldw	r5,144(sp)
   17808:	d9002017 	ldw	r4,128(sp)
   1780c:	d8801d05 	stb	r2,116(sp)
   17810:	00801e04 	movi	r2,120
   17814:	d8801d45 	stb	r2,117(sp)
   17818:	d8001d85 	stb	zero,118(sp)
   1781c:	b811883a 	mov	r8,r23
   17820:	28c00104 	addi	r3,r5,4
   17824:	2c800017 	ldw	r18,0(r5)
   17828:	0029883a 	mov	r20,zero
   1782c:	88800094 	ori	r2,r17,2
   17830:	20036316 	blt	r4,zero,185c0 <___svfiprintf_internal_r+0x10ac>
   17834:	00bfdfc4 	movi	r2,-129
   17838:	88a0703a 	and	r16,r17,r2
   1783c:	d8c02415 	stw	r3,144(sp)
   17840:	84000094 	ori	r16,r16,2
   17844:	90031c26 	beq	r18,zero,184b8 <___svfiprintf_internal_r+0xfa4>
   17848:	014000f4 	movhi	r5,3
   1784c:	29655f04 	addi	r5,r5,-27268
   17850:	002b883a 	mov	r21,zero
   17854:	d9402915 	stw	r5,164(sp)
   17858:	00002906 	br	17900 <___svfiprintf_internal_r+0x3ec>
   1785c:	8c400054 	ori	r17,r17,1
   17860:	98c00007 	ldb	r3,0(r19)
   17864:	003f7706 	br	17644 <__alt_data_end+0xfc017644>
   17868:	a8803fcc 	andi	r2,r21,255
   1786c:	1080201c 	xori	r2,r2,128
   17870:	10bfe004 	addi	r2,r2,-128
   17874:	10032a1e 	bne	r2,zero,18520 <___svfiprintf_internal_r+0x100c>
   17878:	00c00044 	movi	r3,1
   1787c:	d8c02105 	stb	r3,132(sp)
   17880:	05400804 	movi	r21,32
   17884:	98c00007 	ldb	r3,0(r19)
   17888:	003f6e06 	br	17644 <__alt_data_end+0xfc017644>
   1788c:	8821883a 	mov	r16,r17
   17890:	dc402103 	ldbu	r17,132(sp)
   17894:	b811883a 	mov	r8,r23
   17898:	8c403fcc 	andi	r17,r17,255
   1789c:	8803f01e 	bne	r17,zero,18860 <___svfiprintf_internal_r+0x134c>
   178a0:	008000f4 	movhi	r2,3
   178a4:	10a55f04 	addi	r2,r2,-27268
   178a8:	d8802915 	stw	r2,164(sp)
   178ac:	8080080c 	andi	r2,r16,32
   178b0:	1000cd26 	beq	r2,zero,17be8 <___svfiprintf_internal_r+0x6d4>
   178b4:	d9002417 	ldw	r4,144(sp)
   178b8:	24800017 	ldw	r18,0(r4)
   178bc:	25000117 	ldw	r20,4(r4)
   178c0:	21000204 	addi	r4,r4,8
   178c4:	d9002415 	stw	r4,144(sp)
   178c8:	8080004c 	andi	r2,r16,1
   178cc:	1002c726 	beq	r2,zero,183ec <___svfiprintf_internal_r+0xed8>
   178d0:	9504b03a 	or	r2,r18,r20
   178d4:	1003061e 	bne	r2,zero,184f0 <___svfiprintf_internal_r+0xfdc>
   178d8:	d9002017 	ldw	r4,128(sp)
   178dc:	d8001d85 	stb	zero,118(sp)
   178e0:	20033e16 	blt	r4,zero,185dc <___svfiprintf_internal_r+0x10c8>
   178e4:	00bfdfc4 	movi	r2,-129
   178e8:	80a0703a 	and	r16,r16,r2
   178ec:	d9402017 	ldw	r5,128(sp)
   178f0:	002b883a 	mov	r21,zero
   178f4:	28002826 	beq	r5,zero,17998 <___svfiprintf_internal_r+0x484>
   178f8:	0025883a 	mov	r18,zero
   178fc:	0029883a 	mov	r20,zero
   17900:	d9002917 	ldw	r4,164(sp)
   17904:	dc401a04 	addi	r17,sp,104
   17908:	908003cc 	andi	r2,r18,15
   1790c:	a006973a 	slli	r3,r20,28
   17910:	2085883a 	add	r2,r4,r2
   17914:	9024d13a 	srli	r18,r18,4
   17918:	10800003 	ldbu	r2,0(r2)
   1791c:	a028d13a 	srli	r20,r20,4
   17920:	8c7fffc4 	addi	r17,r17,-1
   17924:	1ca4b03a 	or	r18,r3,r18
   17928:	88800005 	stb	r2,0(r17)
   1792c:	9504b03a 	or	r2,r18,r20
   17930:	103ff51e 	bne	r2,zero,17908 <__alt_data_end+0xfc017908>
   17934:	d8801e17 	ldw	r2,120(sp)
   17938:	1469c83a 	sub	r20,r2,r17
   1793c:	00001906 	br	179a4 <___svfiprintf_internal_r+0x490>
   17940:	8821883a 	mov	r16,r17
   17944:	dc402103 	ldbu	r17,132(sp)
   17948:	b811883a 	mov	r8,r23
   1794c:	8c403fcc 	andi	r17,r17,255
   17950:	8803d01e 	bne	r17,zero,18894 <___svfiprintf_internal_r+0x1380>
   17954:	8080080c 	andi	r2,r16,32
   17958:	10016126 	beq	r2,zero,17ee0 <___svfiprintf_internal_r+0x9cc>
   1795c:	d9002417 	ldw	r4,144(sp)
   17960:	d9402017 	ldw	r5,128(sp)
   17964:	d8001d85 	stb	zero,118(sp)
   17968:	20c00204 	addi	r3,r4,8
   1796c:	24800017 	ldw	r18,0(r4)
   17970:	25000117 	ldw	r20,4(r4)
   17974:	28030f16 	blt	r5,zero,185b4 <___svfiprintf_internal_r+0x10a0>
   17978:	013fdfc4 	movi	r4,-129
   1797c:	9504b03a 	or	r2,r18,r20
   17980:	d8c02415 	stw	r3,144(sp)
   17984:	8120703a 	and	r16,r16,r4
   17988:	002b883a 	mov	r21,zero
   1798c:	1000cd1e 	bne	r2,zero,17cc4 <___svfiprintf_internal_r+0x7b0>
   17990:	d8c02017 	ldw	r3,128(sp)
   17994:	1803141e 	bne	r3,zero,185e8 <___svfiprintf_internal_r+0x10d4>
   17998:	d8002015 	stw	zero,128(sp)
   1799c:	0029883a 	mov	r20,zero
   179a0:	dc401a04 	addi	r17,sp,104
   179a4:	dc802017 	ldw	r18,128(sp)
   179a8:	9500010e 	bge	r18,r20,179b0 <___svfiprintf_internal_r+0x49c>
   179ac:	a025883a 	mov	r18,r20
   179b0:	ad403fcc 	andi	r21,r21,255
   179b4:	ad40201c 	xori	r21,r21,128
   179b8:	ad7fe004 	addi	r21,r21,-128
   179bc:	a8003f26 	beq	r21,zero,17abc <___svfiprintf_internal_r+0x5a8>
   179c0:	94800044 	addi	r18,r18,1
   179c4:	00003d06 	br	17abc <___svfiprintf_internal_r+0x5a8>
   179c8:	00c00044 	movi	r3,1
   179cc:	d8c02105 	stb	r3,132(sp)
   179d0:	05400ac4 	movi	r21,43
   179d4:	98c00007 	ldb	r3,0(r19)
   179d8:	003f1a06 	br	17644 <__alt_data_end+0xfc017644>
   179dc:	8821883a 	mov	r16,r17
   179e0:	dc402103 	ldbu	r17,132(sp)
   179e4:	b811883a 	mov	r8,r23
   179e8:	8c403fcc 	andi	r17,r17,255
   179ec:	8803a71e 	bne	r17,zero,1888c <___svfiprintf_internal_r+0x1378>
   179f0:	8080080c 	andi	r2,r16,32
   179f4:	10015726 	beq	r2,zero,17f54 <___svfiprintf_internal_r+0xa40>
   179f8:	d8c02417 	ldw	r3,144(sp)
   179fc:	d9002017 	ldw	r4,128(sp)
   17a00:	d8001d85 	stb	zero,118(sp)
   17a04:	18800204 	addi	r2,r3,8
   17a08:	1c800017 	ldw	r18,0(r3)
   17a0c:	1d000117 	ldw	r20,4(r3)
   17a10:	2002db16 	blt	r4,zero,18580 <___svfiprintf_internal_r+0x106c>
   17a14:	013fdfc4 	movi	r4,-129
   17a18:	9506b03a 	or	r3,r18,r20
   17a1c:	d8802415 	stw	r2,144(sp)
   17a20:	8120703a 	and	r16,r16,r4
   17a24:	18015826 	beq	r3,zero,17f88 <___svfiprintf_internal_r+0xa74>
   17a28:	002b883a 	mov	r21,zero
   17a2c:	dc401a04 	addi	r17,sp,104
   17a30:	9006d0fa 	srli	r3,r18,3
   17a34:	a008977a 	slli	r4,r20,29
   17a38:	a028d0fa 	srli	r20,r20,3
   17a3c:	948001cc 	andi	r18,r18,7
   17a40:	90800c04 	addi	r2,r18,48
   17a44:	8c7fffc4 	addi	r17,r17,-1
   17a48:	20e4b03a 	or	r18,r4,r3
   17a4c:	88800005 	stb	r2,0(r17)
   17a50:	9506b03a 	or	r3,r18,r20
   17a54:	183ff61e 	bne	r3,zero,17a30 <__alt_data_end+0xfc017a30>
   17a58:	80c0004c 	andi	r3,r16,1
   17a5c:	18028926 	beq	r3,zero,18484 <___svfiprintf_internal_r+0xf70>
   17a60:	10803fcc 	andi	r2,r2,255
   17a64:	1080201c 	xori	r2,r2,128
   17a68:	10bfe004 	addi	r2,r2,-128
   17a6c:	00c00c04 	movi	r3,48
   17a70:	10ffb026 	beq	r2,r3,17934 <__alt_data_end+0xfc017934>
   17a74:	88ffffc5 	stb	r3,-1(r17)
   17a78:	d8c01e17 	ldw	r3,120(sp)
   17a7c:	88bfffc4 	addi	r2,r17,-1
   17a80:	1023883a 	mov	r17,r2
   17a84:	18a9c83a 	sub	r20,r3,r2
   17a88:	003fc606 	br	179a4 <__alt_data_end+0xfc0179a4>
   17a8c:	d8c02417 	ldw	r3,144(sp)
   17a90:	04800044 	movi	r18,1
   17a94:	8821883a 	mov	r16,r17
   17a98:	18800017 	ldw	r2,0(r3)
   17a9c:	18c00104 	addi	r3,r3,4
   17aa0:	b811883a 	mov	r8,r23
   17aa4:	d8001d85 	stb	zero,118(sp)
   17aa8:	d8801005 	stb	r2,64(sp)
   17aac:	d8c02415 	stw	r3,144(sp)
   17ab0:	9029883a 	mov	r20,r18
   17ab4:	dc401004 	addi	r17,sp,64
   17ab8:	d8002015 	stw	zero,128(sp)
   17abc:	80c0008c 	andi	r3,r16,2
   17ac0:	d8c02115 	stw	r3,132(sp)
   17ac4:	18000126 	beq	r3,zero,17acc <___svfiprintf_internal_r+0x5b8>
   17ac8:	94800084 	addi	r18,r18,2
   17acc:	80c0210c 	andi	r3,r16,132
   17ad0:	d8c02215 	stw	r3,136(sp)
   17ad4:	1801321e 	bne	r3,zero,17fa0 <___svfiprintf_internal_r+0xa8c>
   17ad8:	d9002517 	ldw	r4,148(sp)
   17adc:	24b9c83a 	sub	fp,r4,r18
   17ae0:	07012f0e 	bge	zero,fp,17fa0 <___svfiprintf_internal_r+0xa8c>
   17ae4:	02400404 	movi	r9,16
   17ae8:	d8c01c17 	ldw	r3,112(sp)
   17aec:	d8801b17 	ldw	r2,108(sp)
   17af0:	4f03250e 	bge	r9,fp,18788 <___svfiprintf_internal_r+0x1274>
   17af4:	010000f4 	movhi	r4,3
   17af8:	2125cb04 	addi	r4,r4,-26836
   17afc:	dc002a15 	stw	r16,168(sp)
   17b00:	dc402b15 	stw	r17,172(sp)
   17b04:	d9002815 	stw	r4,160(sp)
   17b08:	e023883a 	mov	r17,fp
   17b0c:	482f883a 	mov	r23,r9
   17b10:	9839883a 	mov	fp,r19
   17b14:	054001c4 	movi	r21,7
   17b18:	9027883a 	mov	r19,r18
   17b1c:	dc002717 	ldw	r16,156(sp)
   17b20:	dc802317 	ldw	r18,140(sp)
   17b24:	00000306 	br	17b34 <___svfiprintf_internal_r+0x620>
   17b28:	8c7ffc04 	addi	r17,r17,-16
   17b2c:	42000204 	addi	r8,r8,8
   17b30:	bc40130e 	bge	r23,r17,17b80 <___svfiprintf_internal_r+0x66c>
   17b34:	014000f4 	movhi	r5,3
   17b38:	18c00404 	addi	r3,r3,16
   17b3c:	10800044 	addi	r2,r2,1
   17b40:	2965cb04 	addi	r5,r5,-26836
   17b44:	41400015 	stw	r5,0(r8)
   17b48:	45c00115 	stw	r23,4(r8)
   17b4c:	d8c01c15 	stw	r3,112(sp)
   17b50:	d8801b15 	stw	r2,108(sp)
   17b54:	a8bff40e 	bge	r21,r2,17b28 <__alt_data_end+0xfc017b28>
   17b58:	d9801a04 	addi	r6,sp,104
   17b5c:	900b883a 	mov	r5,r18
   17b60:	8009883a 	mov	r4,r16
   17b64:	00173440 	call	17344 <__ssprint_r>
   17b68:	1001aa1e 	bne	r2,zero,18214 <___svfiprintf_internal_r+0xd00>
   17b6c:	8c7ffc04 	addi	r17,r17,-16
   17b70:	d8c01c17 	ldw	r3,112(sp)
   17b74:	d8801b17 	ldw	r2,108(sp)
   17b78:	d811883a 	mov	r8,sp
   17b7c:	bc7fed16 	blt	r23,r17,17b34 <__alt_data_end+0xfc017b34>
   17b80:	9825883a 	mov	r18,r19
   17b84:	dc002a17 	ldw	r16,168(sp)
   17b88:	e027883a 	mov	r19,fp
   17b8c:	8839883a 	mov	fp,r17
   17b90:	dc402b17 	ldw	r17,172(sp)
   17b94:	d9002817 	ldw	r4,160(sp)
   17b98:	e0c7883a 	add	r3,fp,r3
   17b9c:	10800044 	addi	r2,r2,1
   17ba0:	41000015 	stw	r4,0(r8)
   17ba4:	47000115 	stw	fp,4(r8)
   17ba8:	d8c01c15 	stw	r3,112(sp)
   17bac:	d8801b15 	stw	r2,108(sp)
   17bb0:	010001c4 	movi	r4,7
   17bb4:	20821616 	blt	r4,r2,18410 <___svfiprintf_internal_r+0xefc>
   17bb8:	42000204 	addi	r8,r8,8
   17bbc:	0000fa06 	br	17fa8 <___svfiprintf_internal_r+0xa94>
   17bc0:	8821883a 	mov	r16,r17
   17bc4:	dc402103 	ldbu	r17,132(sp)
   17bc8:	b811883a 	mov	r8,r23
   17bcc:	8c403fcc 	andi	r17,r17,255
   17bd0:	8803361e 	bne	r17,zero,188ac <___svfiprintf_internal_r+0x1398>
   17bd4:	014000f4 	movhi	r5,3
   17bd8:	29655a04 	addi	r5,r5,-27288
   17bdc:	d9402915 	stw	r5,164(sp)
   17be0:	8080080c 	andi	r2,r16,32
   17be4:	103f331e 	bne	r2,zero,178b4 <__alt_data_end+0xfc0178b4>
   17be8:	8080040c 	andi	r2,r16,16
   17bec:	1002551e 	bne	r2,zero,18544 <___svfiprintf_internal_r+0x1030>
   17bf0:	8080100c 	andi	r2,r16,64
   17bf4:	1002a626 	beq	r2,zero,18690 <___svfiprintf_internal_r+0x117c>
   17bf8:	d8802417 	ldw	r2,144(sp)
   17bfc:	0029883a 	mov	r20,zero
   17c00:	1480000b 	ldhu	r18,0(r2)
   17c04:	10800104 	addi	r2,r2,4
   17c08:	d8802415 	stw	r2,144(sp)
   17c0c:	003f2e06 	br	178c8 <__alt_data_end+0xfc0178c8>
   17c10:	8821883a 	mov	r16,r17
   17c14:	dc402103 	ldbu	r17,132(sp)
   17c18:	b811883a 	mov	r8,r23
   17c1c:	8c403fcc 	andi	r17,r17,255
   17c20:	88030b1e 	bne	r17,zero,18850 <___svfiprintf_internal_r+0x133c>
   17c24:	8080080c 	andi	r2,r16,32
   17c28:	1002271e 	bne	r2,zero,184c8 <___svfiprintf_internal_r+0xfb4>
   17c2c:	8080040c 	andi	r2,r16,16
   17c30:	10028e26 	beq	r2,zero,1866c <___svfiprintf_internal_r+0x1158>
   17c34:	d8c02417 	ldw	r3,144(sp)
   17c38:	d9002617 	ldw	r4,152(sp)
   17c3c:	18800017 	ldw	r2,0(r3)
   17c40:	18c00104 	addi	r3,r3,4
   17c44:	d8c02415 	stw	r3,144(sp)
   17c48:	11000015 	stw	r4,0(r2)
   17c4c:	003e5306 	br	1759c <__alt_data_end+0xfc01759c>
   17c50:	98c00007 	ldb	r3,0(r19)
   17c54:	01401b04 	movi	r5,108
   17c58:	19424f26 	beq	r3,r5,18598 <___svfiprintf_internal_r+0x1084>
   17c5c:	8c400414 	ori	r17,r17,16
   17c60:	003e7806 	br	17644 <__alt_data_end+0xfc017644>
   17c64:	8c401014 	ori	r17,r17,64
   17c68:	98c00007 	ldb	r3,0(r19)
   17c6c:	003e7506 	br	17644 <__alt_data_end+0xfc017644>
   17c70:	8821883a 	mov	r16,r17
   17c74:	dc402103 	ldbu	r17,132(sp)
   17c78:	b811883a 	mov	r8,r23
   17c7c:	8c403fcc 	andi	r17,r17,255
   17c80:	8802fe1e 	bne	r17,zero,1887c <___svfiprintf_internal_r+0x1368>
   17c84:	8080080c 	andi	r2,r16,32
   17c88:	10004626 	beq	r2,zero,17da4 <___svfiprintf_internal_r+0x890>
   17c8c:	d9002417 	ldw	r4,144(sp)
   17c90:	20800117 	ldw	r2,4(r4)
   17c94:	24800017 	ldw	r18,0(r4)
   17c98:	21000204 	addi	r4,r4,8
   17c9c:	d9002415 	stw	r4,144(sp)
   17ca0:	1029883a 	mov	r20,r2
   17ca4:	10004a16 	blt	r2,zero,17dd0 <___svfiprintf_internal_r+0x8bc>
   17ca8:	d9002017 	ldw	r4,128(sp)
   17cac:	dd401d83 	ldbu	r21,118(sp)
   17cb0:	2001eb16 	blt	r4,zero,18460 <___svfiprintf_internal_r+0xf4c>
   17cb4:	00ffdfc4 	movi	r3,-129
   17cb8:	9504b03a 	or	r2,r18,r20
   17cbc:	80e0703a 	and	r16,r16,r3
   17cc0:	103f3326 	beq	r2,zero,17990 <__alt_data_end+0xfc017990>
   17cc4:	a0009426 	beq	r20,zero,17f18 <___svfiprintf_internal_r+0xa04>
   17cc8:	dc401a04 	addi	r17,sp,104
   17ccc:	402f883a 	mov	r23,r8
   17cd0:	9009883a 	mov	r4,r18
   17cd4:	a00b883a 	mov	r5,r20
   17cd8:	01800284 	movi	r6,10
   17cdc:	000f883a 	mov	r7,zero
   17ce0:	001aef40 	call	1aef4 <__umoddi3>
   17ce4:	10800c04 	addi	r2,r2,48
   17ce8:	8c7fffc4 	addi	r17,r17,-1
   17cec:	9009883a 	mov	r4,r18
   17cf0:	a00b883a 	mov	r5,r20
   17cf4:	88800005 	stb	r2,0(r17)
   17cf8:	01800284 	movi	r6,10
   17cfc:	000f883a 	mov	r7,zero
   17d00:	001a8f80 	call	1a8f8 <__udivdi3>
   17d04:	1025883a 	mov	r18,r2
   17d08:	10c4b03a 	or	r2,r2,r3
   17d0c:	1829883a 	mov	r20,r3
   17d10:	103fef1e 	bne	r2,zero,17cd0 <__alt_data_end+0xfc017cd0>
   17d14:	d9001e17 	ldw	r4,120(sp)
   17d18:	b811883a 	mov	r8,r23
   17d1c:	2469c83a 	sub	r20,r4,r17
   17d20:	003f2006 	br	179a4 <__alt_data_end+0xfc0179a4>
   17d24:	d8802417 	ldw	r2,144(sp)
   17d28:	8821883a 	mov	r16,r17
   17d2c:	d8001d85 	stb	zero,118(sp)
   17d30:	14400017 	ldw	r17,0(r2)
   17d34:	b811883a 	mov	r8,r23
   17d38:	15c00104 	addi	r23,r2,4
   17d3c:	88026c26 	beq	r17,zero,186f0 <___svfiprintf_internal_r+0x11dc>
   17d40:	d8c02017 	ldw	r3,128(sp)
   17d44:	18025f16 	blt	r3,zero,186c4 <___svfiprintf_internal_r+0x11b0>
   17d48:	180d883a 	mov	r6,r3
   17d4c:	000b883a 	mov	r5,zero
   17d50:	8809883a 	mov	r4,r17
   17d54:	da002d15 	stw	r8,180(sp)
   17d58:	00157d00 	call	157d0 <memchr>
   17d5c:	da002d17 	ldw	r8,180(sp)
   17d60:	1002a526 	beq	r2,zero,187f8 <___svfiprintf_internal_r+0x12e4>
   17d64:	1469c83a 	sub	r20,r2,r17
   17d68:	dd401d83 	ldbu	r21,118(sp)
   17d6c:	ddc02415 	stw	r23,144(sp)
   17d70:	d8002015 	stw	zero,128(sp)
   17d74:	003f0b06 	br	179a4 <__alt_data_end+0xfc0179a4>
   17d78:	8c400814 	ori	r17,r17,32
   17d7c:	98c00007 	ldb	r3,0(r19)
   17d80:	003e3006 	br	17644 <__alt_data_end+0xfc017644>
   17d84:	8821883a 	mov	r16,r17
   17d88:	dc402103 	ldbu	r17,132(sp)
   17d8c:	b811883a 	mov	r8,r23
   17d90:	8c403fcc 	andi	r17,r17,255
   17d94:	8802b01e 	bne	r17,zero,18858 <___svfiprintf_internal_r+0x1344>
   17d98:	84000414 	ori	r16,r16,16
   17d9c:	8080080c 	andi	r2,r16,32
   17da0:	103fba1e 	bne	r2,zero,17c8c <__alt_data_end+0xfc017c8c>
   17da4:	8080040c 	andi	r2,r16,16
   17da8:	1001df1e 	bne	r2,zero,18528 <___svfiprintf_internal_r+0x1014>
   17dac:	8080100c 	andi	r2,r16,64
   17db0:	10023d26 	beq	r2,zero,186a8 <___svfiprintf_internal_r+0x1194>
   17db4:	d8802417 	ldw	r2,144(sp)
   17db8:	1480000f 	ldh	r18,0(r2)
   17dbc:	10800104 	addi	r2,r2,4
   17dc0:	d8802415 	stw	r2,144(sp)
   17dc4:	9029d7fa 	srai	r20,r18,31
   17dc8:	a005883a 	mov	r2,r20
   17dcc:	103fb60e 	bge	r2,zero,17ca8 <__alt_data_end+0xfc017ca8>
   17dd0:	d9402017 	ldw	r5,128(sp)
   17dd4:	04a5c83a 	sub	r18,zero,r18
   17dd8:	05400b44 	movi	r21,45
   17ddc:	9004c03a 	cmpne	r2,r18,zero
   17de0:	0529c83a 	sub	r20,zero,r20
   17de4:	dd401d85 	stb	r21,118(sp)
   17de8:	a0a9c83a 	sub	r20,r20,r2
   17dec:	28026c16 	blt	r5,zero,187a0 <___svfiprintf_internal_r+0x128c>
   17df0:	00bfdfc4 	movi	r2,-129
   17df4:	80a0703a 	and	r16,r16,r2
   17df8:	a03fb31e 	bne	r20,zero,17cc8 <__alt_data_end+0xfc017cc8>
   17dfc:	00004606 	br	17f18 <___svfiprintf_internal_r+0xa04>
   17e00:	9839883a 	mov	fp,r19
   17e04:	d8002515 	stw	zero,148(sp)
   17e08:	1c3ff404 	addi	r16,r3,-48
   17e0c:	0009883a 	mov	r4,zero
   17e10:	01400284 	movi	r5,10
   17e14:	000cca00 	call	cca0 <__mulsi3>
   17e18:	e0c00007 	ldb	r3,0(fp)
   17e1c:	8089883a 	add	r4,r16,r2
   17e20:	9cc00044 	addi	r19,r19,1
   17e24:	1c3ff404 	addi	r16,r3,-48
   17e28:	9839883a 	mov	fp,r19
   17e2c:	a43ff82e 	bgeu	r20,r16,17e10 <__alt_data_end+0xfc017e10>
   17e30:	d9002515 	stw	r4,148(sp)
   17e34:	18bff804 	addi	r2,r3,-32
   17e38:	90be052e 	bgeu	r18,r2,17650 <__alt_data_end+0xfc017650>
   17e3c:	8821883a 	mov	r16,r17
   17e40:	dc402103 	ldbu	r17,132(sp)
   17e44:	b811883a 	mov	r8,r23
   17e48:	8c403fcc 	andi	r17,r17,255
   17e4c:	88028d1e 	bne	r17,zero,18884 <___svfiprintf_internal_r+0x1370>
   17e50:	1800ea26 	beq	r3,zero,181fc <___svfiprintf_internal_r+0xce8>
   17e54:	04800044 	movi	r18,1
   17e58:	d8c01005 	stb	r3,64(sp)
   17e5c:	d8001d85 	stb	zero,118(sp)
   17e60:	9029883a 	mov	r20,r18
   17e64:	dc401004 	addi	r17,sp,64
   17e68:	003f1306 	br	17ab8 <__alt_data_end+0xfc017ab8>
   17e6c:	8c402014 	ori	r17,r17,128
   17e70:	98c00007 	ldb	r3,0(r19)
   17e74:	003df306 	br	17644 <__alt_data_end+0xfc017644>
   17e78:	98c00007 	ldb	r3,0(r19)
   17e7c:	01000a84 	movi	r4,42
   17e80:	9f000044 	addi	fp,r19,1
   17e84:	19026326 	beq	r3,r4,18814 <___svfiprintf_internal_r+0x1300>
   17e88:	1c3ff404 	addi	r16,r3,-48
   17e8c:	0009883a 	mov	r4,zero
   17e90:	a4025636 	bltu	r20,r16,187ec <___svfiprintf_internal_r+0x12d8>
   17e94:	01400284 	movi	r5,10
   17e98:	000cca00 	call	cca0 <__mulsi3>
   17e9c:	e0c00007 	ldb	r3,0(fp)
   17ea0:	1409883a 	add	r4,r2,r16
   17ea4:	e4c00044 	addi	r19,fp,1
   17ea8:	1c3ff404 	addi	r16,r3,-48
   17eac:	9839883a 	mov	fp,r19
   17eb0:	a43ff82e 	bgeu	r20,r16,17e94 <__alt_data_end+0xfc017e94>
   17eb4:	20020c16 	blt	r4,zero,186e8 <___svfiprintf_internal_r+0x11d4>
   17eb8:	d9002015 	stw	r4,128(sp)
   17ebc:	003de206 	br	17648 <__alt_data_end+0xfc017648>
   17ec0:	8821883a 	mov	r16,r17
   17ec4:	dc402103 	ldbu	r17,132(sp)
   17ec8:	b811883a 	mov	r8,r23
   17ecc:	8c403fcc 	andi	r17,r17,255
   17ed0:	8802721e 	bne	r17,zero,1889c <___svfiprintf_internal_r+0x1388>
   17ed4:	84000414 	ori	r16,r16,16
   17ed8:	8080080c 	andi	r2,r16,32
   17edc:	103e9f1e 	bne	r2,zero,1795c <__alt_data_end+0xfc01795c>
   17ee0:	8080040c 	andi	r2,r16,16
   17ee4:	10015326 	beq	r2,zero,18434 <___svfiprintf_internal_r+0xf20>
   17ee8:	d8c02417 	ldw	r3,144(sp)
   17eec:	d9002017 	ldw	r4,128(sp)
   17ef0:	d8001d85 	stb	zero,118(sp)
   17ef4:	18800104 	addi	r2,r3,4
   17ef8:	1c800017 	ldw	r18,0(r3)
   17efc:	0029883a 	mov	r20,zero
   17f00:	20015516 	blt	r4,zero,18458 <___svfiprintf_internal_r+0xf44>
   17f04:	00ffdfc4 	movi	r3,-129
   17f08:	d8802415 	stw	r2,144(sp)
   17f0c:	80e0703a 	and	r16,r16,r3
   17f10:	002b883a 	mov	r21,zero
   17f14:	903e9e26 	beq	r18,zero,17990 <__alt_data_end+0xfc017990>
   17f18:	00800244 	movi	r2,9
   17f1c:	14bf6a36 	bltu	r2,r18,17cc8 <__alt_data_end+0xfc017cc8>
   17f20:	94800c04 	addi	r18,r18,48
   17f24:	dc8019c5 	stb	r18,103(sp)
   17f28:	dd002c17 	ldw	r20,176(sp)
   17f2c:	dc4019c4 	addi	r17,sp,103
   17f30:	003e9c06 	br	179a4 <__alt_data_end+0xfc0179a4>
   17f34:	8821883a 	mov	r16,r17
   17f38:	dc402103 	ldbu	r17,132(sp)
   17f3c:	b811883a 	mov	r8,r23
   17f40:	8c403fcc 	andi	r17,r17,255
   17f44:	8802571e 	bne	r17,zero,188a4 <___svfiprintf_internal_r+0x1390>
   17f48:	84000414 	ori	r16,r16,16
   17f4c:	8080080c 	andi	r2,r16,32
   17f50:	103ea91e 	bne	r2,zero,179f8 <__alt_data_end+0xfc0179f8>
   17f54:	8080040c 	andi	r2,r16,16
   17f58:	10018026 	beq	r2,zero,1855c <___svfiprintf_internal_r+0x1048>
   17f5c:	d9402417 	ldw	r5,144(sp)
   17f60:	d8c02017 	ldw	r3,128(sp)
   17f64:	d8001d85 	stb	zero,118(sp)
   17f68:	28800104 	addi	r2,r5,4
   17f6c:	2c800017 	ldw	r18,0(r5)
   17f70:	0029883a 	mov	r20,zero
   17f74:	18018216 	blt	r3,zero,18580 <___svfiprintf_internal_r+0x106c>
   17f78:	00ffdfc4 	movi	r3,-129
   17f7c:	d8802415 	stw	r2,144(sp)
   17f80:	80e0703a 	and	r16,r16,r3
   17f84:	903ea81e 	bne	r18,zero,17a28 <__alt_data_end+0xfc017a28>
   17f88:	d8802017 	ldw	r2,128(sp)
   17f8c:	002b883a 	mov	r21,zero
   17f90:	1001f226 	beq	r2,zero,1875c <___svfiprintf_internal_r+0x1248>
   17f94:	0025883a 	mov	r18,zero
   17f98:	0029883a 	mov	r20,zero
   17f9c:	003ea306 	br	17a2c <__alt_data_end+0xfc017a2c>
   17fa0:	d8c01c17 	ldw	r3,112(sp)
   17fa4:	d8801b17 	ldw	r2,108(sp)
   17fa8:	d9001d87 	ldb	r4,118(sp)
   17fac:	20000b26 	beq	r4,zero,17fdc <___svfiprintf_internal_r+0xac8>
   17fb0:	d9001d84 	addi	r4,sp,118
   17fb4:	18c00044 	addi	r3,r3,1
   17fb8:	10800044 	addi	r2,r2,1
   17fbc:	41000015 	stw	r4,0(r8)
   17fc0:	01000044 	movi	r4,1
   17fc4:	41000115 	stw	r4,4(r8)
   17fc8:	d8c01c15 	stw	r3,112(sp)
   17fcc:	d8801b15 	stw	r2,108(sp)
   17fd0:	010001c4 	movi	r4,7
   17fd4:	2080f316 	blt	r4,r2,183a4 <___svfiprintf_internal_r+0xe90>
   17fd8:	42000204 	addi	r8,r8,8
   17fdc:	d9402117 	ldw	r5,132(sp)
   17fe0:	28000b26 	beq	r5,zero,18010 <___svfiprintf_internal_r+0xafc>
   17fe4:	d9001d04 	addi	r4,sp,116
   17fe8:	18c00084 	addi	r3,r3,2
   17fec:	10800044 	addi	r2,r2,1
   17ff0:	41000015 	stw	r4,0(r8)
   17ff4:	01000084 	movi	r4,2
   17ff8:	41000115 	stw	r4,4(r8)
   17ffc:	d8c01c15 	stw	r3,112(sp)
   18000:	d8801b15 	stw	r2,108(sp)
   18004:	010001c4 	movi	r4,7
   18008:	2080ef16 	blt	r4,r2,183c8 <___svfiprintf_internal_r+0xeb4>
   1800c:	42000204 	addi	r8,r8,8
   18010:	d9402217 	ldw	r5,136(sp)
   18014:	01002004 	movi	r4,128
   18018:	29008f26 	beq	r5,r4,18258 <___svfiprintf_internal_r+0xd44>
   1801c:	d9002017 	ldw	r4,128(sp)
   18020:	252fc83a 	sub	r23,r4,r20
   18024:	05c0310e 	bge	zero,r23,180ec <___svfiprintf_internal_r+0xbd8>
   18028:	07000404 	movi	fp,16
   1802c:	e5c17d0e 	bge	fp,r23,18624 <___svfiprintf_internal_r+0x1110>
   18030:	010000f4 	movhi	r4,3
   18034:	2125c704 	addi	r4,r4,-26852
   18038:	dc002015 	stw	r16,128(sp)
   1803c:	dc402215 	stw	r17,136(sp)
   18040:	d9002115 	stw	r4,132(sp)
   18044:	b823883a 	mov	r17,r23
   18048:	054001c4 	movi	r21,7
   1804c:	982f883a 	mov	r23,r19
   18050:	dc002717 	ldw	r16,156(sp)
   18054:	9027883a 	mov	r19,r18
   18058:	dc802317 	ldw	r18,140(sp)
   1805c:	00000306 	br	1806c <___svfiprintf_internal_r+0xb58>
   18060:	8c7ffc04 	addi	r17,r17,-16
   18064:	42000204 	addi	r8,r8,8
   18068:	e440110e 	bge	fp,r17,180b0 <___svfiprintf_internal_r+0xb9c>
   1806c:	18c00404 	addi	r3,r3,16
   18070:	10800044 	addi	r2,r2,1
   18074:	45800015 	stw	r22,0(r8)
   18078:	47000115 	stw	fp,4(r8)
   1807c:	d8c01c15 	stw	r3,112(sp)
   18080:	d8801b15 	stw	r2,108(sp)
   18084:	a8bff60e 	bge	r21,r2,18060 <__alt_data_end+0xfc018060>
   18088:	d9801a04 	addi	r6,sp,104
   1808c:	900b883a 	mov	r5,r18
   18090:	8009883a 	mov	r4,r16
   18094:	00173440 	call	17344 <__ssprint_r>
   18098:	10005e1e 	bne	r2,zero,18214 <___svfiprintf_internal_r+0xd00>
   1809c:	8c7ffc04 	addi	r17,r17,-16
   180a0:	d8c01c17 	ldw	r3,112(sp)
   180a4:	d8801b17 	ldw	r2,108(sp)
   180a8:	d811883a 	mov	r8,sp
   180ac:	e47fef16 	blt	fp,r17,1806c <__alt_data_end+0xfc01806c>
   180b0:	9825883a 	mov	r18,r19
   180b4:	dc002017 	ldw	r16,128(sp)
   180b8:	b827883a 	mov	r19,r23
   180bc:	882f883a 	mov	r23,r17
   180c0:	dc402217 	ldw	r17,136(sp)
   180c4:	d9402117 	ldw	r5,132(sp)
   180c8:	1dc7883a 	add	r3,r3,r23
   180cc:	10800044 	addi	r2,r2,1
   180d0:	41400015 	stw	r5,0(r8)
   180d4:	45c00115 	stw	r23,4(r8)
   180d8:	d8c01c15 	stw	r3,112(sp)
   180dc:	d8801b15 	stw	r2,108(sp)
   180e0:	010001c4 	movi	r4,7
   180e4:	2080a616 	blt	r4,r2,18380 <___svfiprintf_internal_r+0xe6c>
   180e8:	42000204 	addi	r8,r8,8
   180ec:	a0c7883a 	add	r3,r20,r3
   180f0:	10800044 	addi	r2,r2,1
   180f4:	44400015 	stw	r17,0(r8)
   180f8:	45000115 	stw	r20,4(r8)
   180fc:	d8c01c15 	stw	r3,112(sp)
   18100:	d8801b15 	stw	r2,108(sp)
   18104:	010001c4 	movi	r4,7
   18108:	20808816 	blt	r4,r2,1832c <___svfiprintf_internal_r+0xe18>
   1810c:	42000204 	addi	r8,r8,8
   18110:	8400010c 	andi	r16,r16,4
   18114:	80002c26 	beq	r16,zero,181c8 <___svfiprintf_internal_r+0xcb4>
   18118:	d8802517 	ldw	r2,148(sp)
   1811c:	14a1c83a 	sub	r16,r2,r18
   18120:	0400290e 	bge	zero,r16,181c8 <___svfiprintf_internal_r+0xcb4>
   18124:	04400404 	movi	r17,16
   18128:	d8801b17 	ldw	r2,108(sp)
   1812c:	8c01a70e 	bge	r17,r16,187cc <___svfiprintf_internal_r+0x12b8>
   18130:	014000f4 	movhi	r5,3
   18134:	2965cb04 	addi	r5,r5,-26836
   18138:	d9402815 	stw	r5,160(sp)
   1813c:	050001c4 	movi	r20,7
   18140:	dd402717 	ldw	r21,156(sp)
   18144:	ddc02317 	ldw	r23,140(sp)
   18148:	00000306 	br	18158 <___svfiprintf_internal_r+0xc44>
   1814c:	843ffc04 	addi	r16,r16,-16
   18150:	42000204 	addi	r8,r8,8
   18154:	8c00130e 	bge	r17,r16,181a4 <___svfiprintf_internal_r+0xc90>
   18158:	010000f4 	movhi	r4,3
   1815c:	18c00404 	addi	r3,r3,16
   18160:	10800044 	addi	r2,r2,1
   18164:	2125cb04 	addi	r4,r4,-26836
   18168:	41000015 	stw	r4,0(r8)
   1816c:	44400115 	stw	r17,4(r8)
   18170:	d8c01c15 	stw	r3,112(sp)
   18174:	d8801b15 	stw	r2,108(sp)
   18178:	a0bff40e 	bge	r20,r2,1814c <__alt_data_end+0xfc01814c>
   1817c:	d9801a04 	addi	r6,sp,104
   18180:	b80b883a 	mov	r5,r23
   18184:	a809883a 	mov	r4,r21
   18188:	00173440 	call	17344 <__ssprint_r>
   1818c:	1000211e 	bne	r2,zero,18214 <___svfiprintf_internal_r+0xd00>
   18190:	843ffc04 	addi	r16,r16,-16
   18194:	d8c01c17 	ldw	r3,112(sp)
   18198:	d8801b17 	ldw	r2,108(sp)
   1819c:	d811883a 	mov	r8,sp
   181a0:	8c3fed16 	blt	r17,r16,18158 <__alt_data_end+0xfc018158>
   181a4:	d9402817 	ldw	r5,160(sp)
   181a8:	1c07883a 	add	r3,r3,r16
   181ac:	10800044 	addi	r2,r2,1
   181b0:	41400015 	stw	r5,0(r8)
   181b4:	44000115 	stw	r16,4(r8)
   181b8:	d8c01c15 	stw	r3,112(sp)
   181bc:	d8801b15 	stw	r2,108(sp)
   181c0:	010001c4 	movi	r4,7
   181c4:	2080b516 	blt	r4,r2,1849c <___svfiprintf_internal_r+0xf88>
   181c8:	d8802517 	ldw	r2,148(sp)
   181cc:	1480010e 	bge	r2,r18,181d4 <___svfiprintf_internal_r+0xcc0>
   181d0:	9005883a 	mov	r2,r18
   181d4:	d9002617 	ldw	r4,152(sp)
   181d8:	2089883a 	add	r4,r4,r2
   181dc:	d9002615 	stw	r4,152(sp)
   181e0:	18005a1e 	bne	r3,zero,1834c <___svfiprintf_internal_r+0xe38>
   181e4:	98800007 	ldb	r2,0(r19)
   181e8:	d8001b15 	stw	zero,108(sp)
   181ec:	d811883a 	mov	r8,sp
   181f0:	103cec1e 	bne	r2,zero,175a4 <__alt_data_end+0xfc0175a4>
   181f4:	9825883a 	mov	r18,r19
   181f8:	003d0206 	br	17604 <__alt_data_end+0xfc017604>
   181fc:	d8801c17 	ldw	r2,112(sp)
   18200:	10000426 	beq	r2,zero,18214 <___svfiprintf_internal_r+0xd00>
   18204:	d9402317 	ldw	r5,140(sp)
   18208:	d9002717 	ldw	r4,156(sp)
   1820c:	d9801a04 	addi	r6,sp,104
   18210:	00173440 	call	17344 <__ssprint_r>
   18214:	d9402317 	ldw	r5,140(sp)
   18218:	d8802617 	ldw	r2,152(sp)
   1821c:	28c0030b 	ldhu	r3,12(r5)
   18220:	18c0100c 	andi	r3,r3,64
   18224:	18015c1e 	bne	r3,zero,18798 <___svfiprintf_internal_r+0x1284>
   18228:	dfc03717 	ldw	ra,220(sp)
   1822c:	df003617 	ldw	fp,216(sp)
   18230:	ddc03517 	ldw	r23,212(sp)
   18234:	dd803417 	ldw	r22,208(sp)
   18238:	dd403317 	ldw	r21,204(sp)
   1823c:	dd003217 	ldw	r20,200(sp)
   18240:	dcc03117 	ldw	r19,196(sp)
   18244:	dc803017 	ldw	r18,192(sp)
   18248:	dc402f17 	ldw	r17,188(sp)
   1824c:	dc002e17 	ldw	r16,184(sp)
   18250:	dec03804 	addi	sp,sp,224
   18254:	f800283a 	ret
   18258:	d9002517 	ldw	r4,148(sp)
   1825c:	24afc83a 	sub	r23,r4,r18
   18260:	05ff6e0e 	bge	zero,r23,1801c <__alt_data_end+0xfc01801c>
   18264:	07000404 	movi	fp,16
   18268:	e5c15c0e 	bge	fp,r23,187dc <___svfiprintf_internal_r+0x12c8>
   1826c:	010000f4 	movhi	r4,3
   18270:	2125c704 	addi	r4,r4,-26852
   18274:	dc002215 	stw	r16,136(sp)
   18278:	dc402815 	stw	r17,160(sp)
   1827c:	d9002115 	stw	r4,132(sp)
   18280:	b823883a 	mov	r17,r23
   18284:	054001c4 	movi	r21,7
   18288:	982f883a 	mov	r23,r19
   1828c:	dc002717 	ldw	r16,156(sp)
   18290:	9027883a 	mov	r19,r18
   18294:	dc802317 	ldw	r18,140(sp)
   18298:	00000306 	br	182a8 <___svfiprintf_internal_r+0xd94>
   1829c:	8c7ffc04 	addi	r17,r17,-16
   182a0:	42000204 	addi	r8,r8,8
   182a4:	e440110e 	bge	fp,r17,182ec <___svfiprintf_internal_r+0xdd8>
   182a8:	18c00404 	addi	r3,r3,16
   182ac:	10800044 	addi	r2,r2,1
   182b0:	45800015 	stw	r22,0(r8)
   182b4:	47000115 	stw	fp,4(r8)
   182b8:	d8c01c15 	stw	r3,112(sp)
   182bc:	d8801b15 	stw	r2,108(sp)
   182c0:	a8bff60e 	bge	r21,r2,1829c <__alt_data_end+0xfc01829c>
   182c4:	d9801a04 	addi	r6,sp,104
   182c8:	900b883a 	mov	r5,r18
   182cc:	8009883a 	mov	r4,r16
   182d0:	00173440 	call	17344 <__ssprint_r>
   182d4:	103fcf1e 	bne	r2,zero,18214 <__alt_data_end+0xfc018214>
   182d8:	8c7ffc04 	addi	r17,r17,-16
   182dc:	d8c01c17 	ldw	r3,112(sp)
   182e0:	d8801b17 	ldw	r2,108(sp)
   182e4:	d811883a 	mov	r8,sp
   182e8:	e47fef16 	blt	fp,r17,182a8 <__alt_data_end+0xfc0182a8>
   182ec:	9825883a 	mov	r18,r19
   182f0:	dc002217 	ldw	r16,136(sp)
   182f4:	b827883a 	mov	r19,r23
   182f8:	882f883a 	mov	r23,r17
   182fc:	dc402817 	ldw	r17,160(sp)
   18300:	d9402117 	ldw	r5,132(sp)
   18304:	1dc7883a 	add	r3,r3,r23
   18308:	10800044 	addi	r2,r2,1
   1830c:	41400015 	stw	r5,0(r8)
   18310:	45c00115 	stw	r23,4(r8)
   18314:	d8c01c15 	stw	r3,112(sp)
   18318:	d8801b15 	stw	r2,108(sp)
   1831c:	010001c4 	movi	r4,7
   18320:	2080b716 	blt	r4,r2,18600 <___svfiprintf_internal_r+0x10ec>
   18324:	42000204 	addi	r8,r8,8
   18328:	003f3c06 	br	1801c <__alt_data_end+0xfc01801c>
   1832c:	d9402317 	ldw	r5,140(sp)
   18330:	d9002717 	ldw	r4,156(sp)
   18334:	d9801a04 	addi	r6,sp,104
   18338:	00173440 	call	17344 <__ssprint_r>
   1833c:	103fb51e 	bne	r2,zero,18214 <__alt_data_end+0xfc018214>
   18340:	d8c01c17 	ldw	r3,112(sp)
   18344:	d811883a 	mov	r8,sp
   18348:	003f7106 	br	18110 <__alt_data_end+0xfc018110>
   1834c:	d9402317 	ldw	r5,140(sp)
   18350:	d9002717 	ldw	r4,156(sp)
   18354:	d9801a04 	addi	r6,sp,104
   18358:	00173440 	call	17344 <__ssprint_r>
   1835c:	103fa126 	beq	r2,zero,181e4 <__alt_data_end+0xfc0181e4>
   18360:	003fac06 	br	18214 <__alt_data_end+0xfc018214>
   18364:	d9402317 	ldw	r5,140(sp)
   18368:	d9002717 	ldw	r4,156(sp)
   1836c:	d9801a04 	addi	r6,sp,104
   18370:	00173440 	call	17344 <__ssprint_r>
   18374:	103fa71e 	bne	r2,zero,18214 <__alt_data_end+0xfc018214>
   18378:	d811883a 	mov	r8,sp
   1837c:	003c9e06 	br	175f8 <__alt_data_end+0xfc0175f8>
   18380:	d9402317 	ldw	r5,140(sp)
   18384:	d9002717 	ldw	r4,156(sp)
   18388:	d9801a04 	addi	r6,sp,104
   1838c:	00173440 	call	17344 <__ssprint_r>
   18390:	103fa01e 	bne	r2,zero,18214 <__alt_data_end+0xfc018214>
   18394:	d8c01c17 	ldw	r3,112(sp)
   18398:	d8801b17 	ldw	r2,108(sp)
   1839c:	d811883a 	mov	r8,sp
   183a0:	003f5206 	br	180ec <__alt_data_end+0xfc0180ec>
   183a4:	d9402317 	ldw	r5,140(sp)
   183a8:	d9002717 	ldw	r4,156(sp)
   183ac:	d9801a04 	addi	r6,sp,104
   183b0:	00173440 	call	17344 <__ssprint_r>
   183b4:	103f971e 	bne	r2,zero,18214 <__alt_data_end+0xfc018214>
   183b8:	d8c01c17 	ldw	r3,112(sp)
   183bc:	d8801b17 	ldw	r2,108(sp)
   183c0:	d811883a 	mov	r8,sp
   183c4:	003f0506 	br	17fdc <__alt_data_end+0xfc017fdc>
   183c8:	d9402317 	ldw	r5,140(sp)
   183cc:	d9002717 	ldw	r4,156(sp)
   183d0:	d9801a04 	addi	r6,sp,104
   183d4:	00173440 	call	17344 <__ssprint_r>
   183d8:	103f8e1e 	bne	r2,zero,18214 <__alt_data_end+0xfc018214>
   183dc:	d8c01c17 	ldw	r3,112(sp)
   183e0:	d8801b17 	ldw	r2,108(sp)
   183e4:	d811883a 	mov	r8,sp
   183e8:	003f0906 	br	18010 <__alt_data_end+0xfc018010>
   183ec:	d9402017 	ldw	r5,128(sp)
   183f0:	d8001d85 	stb	zero,118(sp)
   183f4:	28007716 	blt	r5,zero,185d4 <___svfiprintf_internal_r+0x10c0>
   183f8:	00ffdfc4 	movi	r3,-129
   183fc:	9504b03a 	or	r2,r18,r20
   18400:	80e0703a 	and	r16,r16,r3
   18404:	103d3926 	beq	r2,zero,178ec <__alt_data_end+0xfc0178ec>
   18408:	002b883a 	mov	r21,zero
   1840c:	003d3c06 	br	17900 <__alt_data_end+0xfc017900>
   18410:	d9402317 	ldw	r5,140(sp)
   18414:	d9002717 	ldw	r4,156(sp)
   18418:	d9801a04 	addi	r6,sp,104
   1841c:	00173440 	call	17344 <__ssprint_r>
   18420:	103f7c1e 	bne	r2,zero,18214 <__alt_data_end+0xfc018214>
   18424:	d8c01c17 	ldw	r3,112(sp)
   18428:	d8801b17 	ldw	r2,108(sp)
   1842c:	d811883a 	mov	r8,sp
   18430:	003edd06 	br	17fa8 <__alt_data_end+0xfc017fa8>
   18434:	8080100c 	andi	r2,r16,64
   18438:	d8001d85 	stb	zero,118(sp)
   1843c:	10008426 	beq	r2,zero,18650 <___svfiprintf_internal_r+0x113c>
   18440:	d9402417 	ldw	r5,144(sp)
   18444:	d8c02017 	ldw	r3,128(sp)
   18448:	0029883a 	mov	r20,zero
   1844c:	28800104 	addi	r2,r5,4
   18450:	2c80000b 	ldhu	r18,0(r5)
   18454:	183eab0e 	bge	r3,zero,17f04 <__alt_data_end+0xfc017f04>
   18458:	d8802415 	stw	r2,144(sp)
   1845c:	002b883a 	mov	r21,zero
   18460:	9504b03a 	or	r2,r18,r20
   18464:	103e171e 	bne	r2,zero,17cc4 <__alt_data_end+0xfc017cc4>
   18468:	00800044 	movi	r2,1
   1846c:	10803fcc 	andi	r2,r2,255
   18470:	00c00044 	movi	r3,1
   18474:	10c05c26 	beq	r2,r3,185e8 <___svfiprintf_internal_r+0x10d4>
   18478:	00c00084 	movi	r3,2
   1847c:	10fd1e26 	beq	r2,r3,178f8 <__alt_data_end+0xfc0178f8>
   18480:	003ec406 	br	17f94 <__alt_data_end+0xfc017f94>
   18484:	d9401e17 	ldw	r5,120(sp)
   18488:	2c69c83a 	sub	r20,r5,r17
   1848c:	003d4506 	br	179a4 <__alt_data_end+0xfc0179a4>
   18490:	d8802415 	stw	r2,144(sp)
   18494:	98c00007 	ldb	r3,0(r19)
   18498:	003c6a06 	br	17644 <__alt_data_end+0xfc017644>
   1849c:	d9402317 	ldw	r5,140(sp)
   184a0:	d9002717 	ldw	r4,156(sp)
   184a4:	d9801a04 	addi	r6,sp,104
   184a8:	00173440 	call	17344 <__ssprint_r>
   184ac:	103f591e 	bne	r2,zero,18214 <__alt_data_end+0xfc018214>
   184b0:	d8c01c17 	ldw	r3,112(sp)
   184b4:	003f4406 	br	181c8 <__alt_data_end+0xfc0181c8>
   184b8:	014000f4 	movhi	r5,3
   184bc:	29655f04 	addi	r5,r5,-27268
   184c0:	d9402915 	stw	r5,164(sp)
   184c4:	003d0906 	br	178ec <__alt_data_end+0xfc0178ec>
   184c8:	d8c02417 	ldw	r3,144(sp)
   184cc:	d9002617 	ldw	r4,152(sp)
   184d0:	d9402417 	ldw	r5,144(sp)
   184d4:	18800017 	ldw	r2,0(r3)
   184d8:	2007d7fa 	srai	r3,r4,31
   184dc:	29400104 	addi	r5,r5,4
   184e0:	d9402415 	stw	r5,144(sp)
   184e4:	11000015 	stw	r4,0(r2)
   184e8:	10c00115 	stw	r3,4(r2)
   184ec:	003c2b06 	br	1759c <__alt_data_end+0xfc01759c>
   184f0:	d8c01d45 	stb	r3,117(sp)
   184f4:	d8c02017 	ldw	r3,128(sp)
   184f8:	00800c04 	movi	r2,48
   184fc:	d8801d05 	stb	r2,116(sp)
   18500:	d8001d85 	stb	zero,118(sp)
   18504:	80800094 	ori	r2,r16,2
   18508:	1800ac16 	blt	r3,zero,187bc <___svfiprintf_internal_r+0x12a8>
   1850c:	00bfdfc4 	movi	r2,-129
   18510:	80a0703a 	and	r16,r16,r2
   18514:	84000094 	ori	r16,r16,2
   18518:	002b883a 	mov	r21,zero
   1851c:	003cf806 	br	17900 <__alt_data_end+0xfc017900>
   18520:	98c00007 	ldb	r3,0(r19)
   18524:	003c4706 	br	17644 <__alt_data_end+0xfc017644>
   18528:	d9402417 	ldw	r5,144(sp)
   1852c:	2c800017 	ldw	r18,0(r5)
   18530:	29400104 	addi	r5,r5,4
   18534:	d9402415 	stw	r5,144(sp)
   18538:	9029d7fa 	srai	r20,r18,31
   1853c:	a005883a 	mov	r2,r20
   18540:	003dd806 	br	17ca4 <__alt_data_end+0xfc017ca4>
   18544:	d9402417 	ldw	r5,144(sp)
   18548:	0029883a 	mov	r20,zero
   1854c:	2c800017 	ldw	r18,0(r5)
   18550:	29400104 	addi	r5,r5,4
   18554:	d9402415 	stw	r5,144(sp)
   18558:	003cdb06 	br	178c8 <__alt_data_end+0xfc0178c8>
   1855c:	8080100c 	andi	r2,r16,64
   18560:	d8001d85 	stb	zero,118(sp)
   18564:	10003326 	beq	r2,zero,18634 <___svfiprintf_internal_r+0x1120>
   18568:	d9002417 	ldw	r4,144(sp)
   1856c:	d9402017 	ldw	r5,128(sp)
   18570:	0029883a 	mov	r20,zero
   18574:	20800104 	addi	r2,r4,4
   18578:	2480000b 	ldhu	r18,0(r4)
   1857c:	283e7e0e 	bge	r5,zero,17f78 <__alt_data_end+0xfc017f78>
   18580:	9506b03a 	or	r3,r18,r20
   18584:	d8802415 	stw	r2,144(sp)
   18588:	183d271e 	bne	r3,zero,17a28 <__alt_data_end+0xfc017a28>
   1858c:	002b883a 	mov	r21,zero
   18590:	0005883a 	mov	r2,zero
   18594:	003fb506 	br	1846c <__alt_data_end+0xfc01846c>
   18598:	98c00043 	ldbu	r3,1(r19)
   1859c:	8c400814 	ori	r17,r17,32
   185a0:	9cc00044 	addi	r19,r19,1
   185a4:	18c03fcc 	andi	r3,r3,255
   185a8:	18c0201c 	xori	r3,r3,128
   185ac:	18ffe004 	addi	r3,r3,-128
   185b0:	003c2406 	br	17644 <__alt_data_end+0xfc017644>
   185b4:	d8c02415 	stw	r3,144(sp)
   185b8:	002b883a 	mov	r21,zero
   185bc:	003fa806 	br	18460 <__alt_data_end+0xfc018460>
   185c0:	010000f4 	movhi	r4,3
   185c4:	21255f04 	addi	r4,r4,-27268
   185c8:	d9002915 	stw	r4,164(sp)
   185cc:	d8c02415 	stw	r3,144(sp)
   185d0:	1021883a 	mov	r16,r2
   185d4:	9504b03a 	or	r2,r18,r20
   185d8:	103f8b1e 	bne	r2,zero,18408 <__alt_data_end+0xfc018408>
   185dc:	002b883a 	mov	r21,zero
   185e0:	00800084 	movi	r2,2
   185e4:	003fa106 	br	1846c <__alt_data_end+0xfc01846c>
   185e8:	0025883a 	mov	r18,zero
   185ec:	94800c04 	addi	r18,r18,48
   185f0:	dc8019c5 	stb	r18,103(sp)
   185f4:	dd002c17 	ldw	r20,176(sp)
   185f8:	dc4019c4 	addi	r17,sp,103
   185fc:	003ce906 	br	179a4 <__alt_data_end+0xfc0179a4>
   18600:	d9402317 	ldw	r5,140(sp)
   18604:	d9002717 	ldw	r4,156(sp)
   18608:	d9801a04 	addi	r6,sp,104
   1860c:	00173440 	call	17344 <__ssprint_r>
   18610:	103f001e 	bne	r2,zero,18214 <__alt_data_end+0xfc018214>
   18614:	d8c01c17 	ldw	r3,112(sp)
   18618:	d8801b17 	ldw	r2,108(sp)
   1861c:	d811883a 	mov	r8,sp
   18620:	003e7e06 	br	1801c <__alt_data_end+0xfc01801c>
   18624:	014000f4 	movhi	r5,3
   18628:	2965c704 	addi	r5,r5,-26852
   1862c:	d9402115 	stw	r5,132(sp)
   18630:	003ea406 	br	180c4 <__alt_data_end+0xfc0180c4>
   18634:	d8c02417 	ldw	r3,144(sp)
   18638:	d9002017 	ldw	r4,128(sp)
   1863c:	0029883a 	mov	r20,zero
   18640:	18800104 	addi	r2,r3,4
   18644:	1c800017 	ldw	r18,0(r3)
   18648:	203e4b0e 	bge	r4,zero,17f78 <__alt_data_end+0xfc017f78>
   1864c:	003fcc06 	br	18580 <__alt_data_end+0xfc018580>
   18650:	d9002417 	ldw	r4,144(sp)
   18654:	d9402017 	ldw	r5,128(sp)
   18658:	0029883a 	mov	r20,zero
   1865c:	20800104 	addi	r2,r4,4
   18660:	24800017 	ldw	r18,0(r4)
   18664:	283e270e 	bge	r5,zero,17f04 <__alt_data_end+0xfc017f04>
   18668:	003f7b06 	br	18458 <__alt_data_end+0xfc018458>
   1866c:	8400100c 	andi	r16,r16,64
   18670:	80003326 	beq	r16,zero,18740 <___svfiprintf_internal_r+0x122c>
   18674:	d9402417 	ldw	r5,144(sp)
   18678:	d8c02617 	ldw	r3,152(sp)
   1867c:	28800017 	ldw	r2,0(r5)
   18680:	29400104 	addi	r5,r5,4
   18684:	d9402415 	stw	r5,144(sp)
   18688:	10c0000d 	sth	r3,0(r2)
   1868c:	003bc306 	br	1759c <__alt_data_end+0xfc01759c>
   18690:	d9002417 	ldw	r4,144(sp)
   18694:	0029883a 	mov	r20,zero
   18698:	24800017 	ldw	r18,0(r4)
   1869c:	21000104 	addi	r4,r4,4
   186a0:	d9002415 	stw	r4,144(sp)
   186a4:	003c8806 	br	178c8 <__alt_data_end+0xfc0178c8>
   186a8:	d8c02417 	ldw	r3,144(sp)
   186ac:	1c800017 	ldw	r18,0(r3)
   186b0:	18c00104 	addi	r3,r3,4
   186b4:	d8c02415 	stw	r3,144(sp)
   186b8:	9029d7fa 	srai	r20,r18,31
   186bc:	a005883a 	mov	r2,r20
   186c0:	003d7806 	br	17ca4 <__alt_data_end+0xfc017ca4>
   186c4:	8809883a 	mov	r4,r17
   186c8:	da002d15 	stw	r8,180(sp)
   186cc:	000e3480 	call	e348 <strlen>
   186d0:	1029883a 	mov	r20,r2
   186d4:	dd401d83 	ldbu	r21,118(sp)
   186d8:	ddc02415 	stw	r23,144(sp)
   186dc:	d8002015 	stw	zero,128(sp)
   186e0:	da002d17 	ldw	r8,180(sp)
   186e4:	003caf06 	br	179a4 <__alt_data_end+0xfc0179a4>
   186e8:	013fffc4 	movi	r4,-1
   186ec:	003df206 	br	17eb8 <__alt_data_end+0xfc017eb8>
   186f0:	dd002017 	ldw	r20,128(sp)
   186f4:	00800184 	movi	r2,6
   186f8:	1500012e 	bgeu	r2,r20,18700 <___svfiprintf_internal_r+0x11ec>
   186fc:	1029883a 	mov	r20,r2
   18700:	a025883a 	mov	r18,r20
   18704:	a0004116 	blt	r20,zero,1880c <___svfiprintf_internal_r+0x12f8>
   18708:	044000f4 	movhi	r17,3
   1870c:	ddc02415 	stw	r23,144(sp)
   18710:	8c656404 	addi	r17,r17,-27248
   18714:	003ce806 	br	17ab8 <__alt_data_end+0xfc017ab8>
   18718:	04001004 	movi	r16,64
   1871c:	800b883a 	mov	r5,r16
   18720:	000d2740 	call	d274 <_malloc_r>
   18724:	d8c02317 	ldw	r3,140(sp)
   18728:	18800015 	stw	r2,0(r3)
   1872c:	18800415 	stw	r2,16(r3)
   18730:	10004d26 	beq	r2,zero,18868 <___svfiprintf_internal_r+0x1354>
   18734:	d9402317 	ldw	r5,140(sp)
   18738:	2c000515 	stw	r16,20(r5)
   1873c:	003b8906 	br	17564 <__alt_data_end+0xfc017564>
   18740:	d9002417 	ldw	r4,144(sp)
   18744:	d9402617 	ldw	r5,152(sp)
   18748:	20800017 	ldw	r2,0(r4)
   1874c:	21000104 	addi	r4,r4,4
   18750:	d9002415 	stw	r4,144(sp)
   18754:	11400015 	stw	r5,0(r2)
   18758:	003b9006 	br	1759c <__alt_data_end+0xfc01759c>
   1875c:	8080004c 	andi	r2,r16,1
   18760:	002b883a 	mov	r21,zero
   18764:	10000526 	beq	r2,zero,1877c <___svfiprintf_internal_r+0x1268>
   18768:	00800c04 	movi	r2,48
   1876c:	d88019c5 	stb	r2,103(sp)
   18770:	dd002c17 	ldw	r20,176(sp)
   18774:	dc4019c4 	addi	r17,sp,103
   18778:	003c8a06 	br	179a4 <__alt_data_end+0xfc0179a4>
   1877c:	0029883a 	mov	r20,zero
   18780:	dc401a04 	addi	r17,sp,104
   18784:	003c8706 	br	179a4 <__alt_data_end+0xfc0179a4>
   18788:	014000f4 	movhi	r5,3
   1878c:	2965cb04 	addi	r5,r5,-26836
   18790:	d9402815 	stw	r5,160(sp)
   18794:	003cff06 	br	17b94 <__alt_data_end+0xfc017b94>
   18798:	00bfffc4 	movi	r2,-1
   1879c:	003ea206 	br	18228 <__alt_data_end+0xfc018228>
   187a0:	00800044 	movi	r2,1
   187a4:	10803fcc 	andi	r2,r2,255
   187a8:	00c00044 	movi	r3,1
   187ac:	10fd4526 	beq	r2,r3,17cc4 <__alt_data_end+0xfc017cc4>
   187b0:	00c00084 	movi	r3,2
   187b4:	10fc5226 	beq	r2,r3,17900 <__alt_data_end+0xfc017900>
   187b8:	003c9c06 	br	17a2c <__alt_data_end+0xfc017a2c>
   187bc:	1021883a 	mov	r16,r2
   187c0:	002b883a 	mov	r21,zero
   187c4:	00800084 	movi	r2,2
   187c8:	003ff606 	br	187a4 <__alt_data_end+0xfc0187a4>
   187cc:	010000f4 	movhi	r4,3
   187d0:	2125cb04 	addi	r4,r4,-26836
   187d4:	d9002815 	stw	r4,160(sp)
   187d8:	003e7206 	br	181a4 <__alt_data_end+0xfc0181a4>
   187dc:	014000f4 	movhi	r5,3
   187e0:	2965c704 	addi	r5,r5,-26852
   187e4:	d9402115 	stw	r5,132(sp)
   187e8:	003ec506 	br	18300 <__alt_data_end+0xfc018300>
   187ec:	e027883a 	mov	r19,fp
   187f0:	d8002015 	stw	zero,128(sp)
   187f4:	003b9406 	br	17648 <__alt_data_end+0xfc017648>
   187f8:	dd002017 	ldw	r20,128(sp)
   187fc:	dd401d83 	ldbu	r21,118(sp)
   18800:	ddc02415 	stw	r23,144(sp)
   18804:	d8002015 	stw	zero,128(sp)
   18808:	003c6606 	br	179a4 <__alt_data_end+0xfc0179a4>
   1880c:	0025883a 	mov	r18,zero
   18810:	003fbd06 	br	18708 <__alt_data_end+0xfc018708>
   18814:	d9402417 	ldw	r5,144(sp)
   18818:	d8c02417 	ldw	r3,144(sp)
   1881c:	29400017 	ldw	r5,0(r5)
   18820:	19000104 	addi	r4,r3,4
   18824:	d9002415 	stw	r4,144(sp)
   18828:	d9402015 	stw	r5,128(sp)
   1882c:	98c00043 	ldbu	r3,1(r19)
   18830:	e027883a 	mov	r19,fp
   18834:	283f5b0e 	bge	r5,zero,185a4 <__alt_data_end+0xfc0185a4>
   18838:	18c03fcc 	andi	r3,r3,255
   1883c:	013fffc4 	movi	r4,-1
   18840:	18c0201c 	xori	r3,r3,128
   18844:	d9002015 	stw	r4,128(sp)
   18848:	18ffe004 	addi	r3,r3,-128
   1884c:	003b7d06 	br	17644 <__alt_data_end+0xfc017644>
   18850:	dd401d85 	stb	r21,118(sp)
   18854:	003cf306 	br	17c24 <__alt_data_end+0xfc017c24>
   18858:	dd401d85 	stb	r21,118(sp)
   1885c:	003d4e06 	br	17d98 <__alt_data_end+0xfc017d98>
   18860:	dd401d85 	stb	r21,118(sp)
   18864:	003c0e06 	br	178a0 <__alt_data_end+0xfc0178a0>
   18868:	d9002717 	ldw	r4,156(sp)
   1886c:	00800304 	movi	r2,12
   18870:	20800015 	stw	r2,0(r4)
   18874:	00bfffc4 	movi	r2,-1
   18878:	003e6b06 	br	18228 <__alt_data_end+0xfc018228>
   1887c:	dd401d85 	stb	r21,118(sp)
   18880:	003d0006 	br	17c84 <__alt_data_end+0xfc017c84>
   18884:	dd401d85 	stb	r21,118(sp)
   18888:	003d7106 	br	17e50 <__alt_data_end+0xfc017e50>
   1888c:	dd401d85 	stb	r21,118(sp)
   18890:	003c5706 	br	179f0 <__alt_data_end+0xfc0179f0>
   18894:	dd401d85 	stb	r21,118(sp)
   18898:	003c2e06 	br	17954 <__alt_data_end+0xfc017954>
   1889c:	dd401d85 	stb	r21,118(sp)
   188a0:	003d8c06 	br	17ed4 <__alt_data_end+0xfc017ed4>
   188a4:	dd401d85 	stb	r21,118(sp)
   188a8:	003da706 	br	17f48 <__alt_data_end+0xfc017f48>
   188ac:	dd401d85 	stb	r21,118(sp)
   188b0:	003cc806 	br	17bd4 <__alt_data_end+0xfc017bd4>

000188b4 <__sprint_r.part.0>:
   188b4:	28801917 	ldw	r2,100(r5)
   188b8:	defff604 	addi	sp,sp,-40
   188bc:	dd400515 	stw	r21,20(sp)
   188c0:	dfc00915 	stw	ra,36(sp)
   188c4:	df000815 	stw	fp,32(sp)
   188c8:	ddc00715 	stw	r23,28(sp)
   188cc:	dd800615 	stw	r22,24(sp)
   188d0:	dd000415 	stw	r20,16(sp)
   188d4:	dcc00315 	stw	r19,12(sp)
   188d8:	dc800215 	stw	r18,8(sp)
   188dc:	dc400115 	stw	r17,4(sp)
   188e0:	dc000015 	stw	r16,0(sp)
   188e4:	1088000c 	andi	r2,r2,8192
   188e8:	302b883a 	mov	r21,r6
   188ec:	10002e26 	beq	r2,zero,189a8 <__sprint_r.part.0+0xf4>
   188f0:	30800217 	ldw	r2,8(r6)
   188f4:	35800017 	ldw	r22,0(r6)
   188f8:	10002926 	beq	r2,zero,189a0 <__sprint_r.part.0+0xec>
   188fc:	2827883a 	mov	r19,r5
   18900:	2029883a 	mov	r20,r4
   18904:	b5c00104 	addi	r23,r22,4
   18908:	04bfffc4 	movi	r18,-1
   1890c:	bc400017 	ldw	r17,0(r23)
   18910:	b4000017 	ldw	r16,0(r22)
   18914:	0039883a 	mov	fp,zero
   18918:	8822d0ba 	srli	r17,r17,2
   1891c:	8800031e 	bne	r17,zero,1892c <__sprint_r.part.0+0x78>
   18920:	00001806 	br	18984 <__sprint_r.part.0+0xd0>
   18924:	84000104 	addi	r16,r16,4
   18928:	8f001526 	beq	r17,fp,18980 <__sprint_r.part.0+0xcc>
   1892c:	81400017 	ldw	r5,0(r16)
   18930:	980d883a 	mov	r6,r19
   18934:	a009883a 	mov	r4,r20
   18938:	001a4fc0 	call	1a4fc <_fputwc_r>
   1893c:	e7000044 	addi	fp,fp,1
   18940:	14bff81e 	bne	r2,r18,18924 <__alt_data_end+0xfc018924>
   18944:	9005883a 	mov	r2,r18
   18948:	a8000215 	stw	zero,8(r21)
   1894c:	a8000115 	stw	zero,4(r21)
   18950:	dfc00917 	ldw	ra,36(sp)
   18954:	df000817 	ldw	fp,32(sp)
   18958:	ddc00717 	ldw	r23,28(sp)
   1895c:	dd800617 	ldw	r22,24(sp)
   18960:	dd400517 	ldw	r21,20(sp)
   18964:	dd000417 	ldw	r20,16(sp)
   18968:	dcc00317 	ldw	r19,12(sp)
   1896c:	dc800217 	ldw	r18,8(sp)
   18970:	dc400117 	ldw	r17,4(sp)
   18974:	dc000017 	ldw	r16,0(sp)
   18978:	dec00a04 	addi	sp,sp,40
   1897c:	f800283a 	ret
   18980:	a8800217 	ldw	r2,8(r21)
   18984:	8c63883a 	add	r17,r17,r17
   18988:	8c63883a 	add	r17,r17,r17
   1898c:	1445c83a 	sub	r2,r2,r17
   18990:	a8800215 	stw	r2,8(r21)
   18994:	b5800204 	addi	r22,r22,8
   18998:	bdc00204 	addi	r23,r23,8
   1899c:	103fdb1e 	bne	r2,zero,1890c <__alt_data_end+0xfc01890c>
   189a0:	0005883a 	mov	r2,zero
   189a4:	003fe806 	br	18948 <__alt_data_end+0xfc018948>
   189a8:	0014ee80 	call	14ee8 <__sfvwrite_r>
   189ac:	003fe606 	br	18948 <__alt_data_end+0xfc018948>

000189b0 <__sprint_r>:
   189b0:	30c00217 	ldw	r3,8(r6)
   189b4:	18000126 	beq	r3,zero,189bc <__sprint_r+0xc>
   189b8:	00188b41 	jmpi	188b4 <__sprint_r.part.0>
   189bc:	30000115 	stw	zero,4(r6)
   189c0:	0005883a 	mov	r2,zero
   189c4:	f800283a 	ret

000189c8 <___vfiprintf_internal_r>:
   189c8:	deffca04 	addi	sp,sp,-216
   189cc:	dd403115 	stw	r21,196(sp)
   189d0:	dfc03515 	stw	ra,212(sp)
   189d4:	df003415 	stw	fp,208(sp)
   189d8:	ddc03315 	stw	r23,204(sp)
   189dc:	dd803215 	stw	r22,200(sp)
   189e0:	dd003015 	stw	r20,192(sp)
   189e4:	dcc02f15 	stw	r19,188(sp)
   189e8:	dc802e15 	stw	r18,184(sp)
   189ec:	dc402d15 	stw	r17,180(sp)
   189f0:	dc002c15 	stw	r16,176(sp)
   189f4:	d9002115 	stw	r4,132(sp)
   189f8:	d9402015 	stw	r5,128(sp)
   189fc:	d9c02215 	stw	r7,136(sp)
   18a00:	302b883a 	mov	r21,r6
   18a04:	20000226 	beq	r4,zero,18a10 <___vfiprintf_internal_r+0x48>
   18a08:	20800e17 	ldw	r2,56(r4)
   18a0c:	1000cf26 	beq	r2,zero,18d4c <___vfiprintf_internal_r+0x384>
   18a10:	d8c02017 	ldw	r3,128(sp)
   18a14:	1880030b 	ldhu	r2,12(r3)
   18a18:	10c8000c 	andi	r3,r2,8192
   18a1c:	1800071e 	bne	r3,zero,18a3c <___vfiprintf_internal_r+0x74>
   18a20:	d9402017 	ldw	r5,128(sp)
   18a24:	00f7ffc4 	movi	r3,-8193
   18a28:	10880014 	ori	r2,r2,8192
   18a2c:	29001917 	ldw	r4,100(r5)
   18a30:	2880030d 	sth	r2,12(r5)
   18a34:	20c6703a 	and	r3,r4,r3
   18a38:	28c01915 	stw	r3,100(r5)
   18a3c:	10c0020c 	andi	r3,r2,8
   18a40:	1800a526 	beq	r3,zero,18cd8 <___vfiprintf_internal_r+0x310>
   18a44:	d9002017 	ldw	r4,128(sp)
   18a48:	20c00417 	ldw	r3,16(r4)
   18a4c:	1800a226 	beq	r3,zero,18cd8 <___vfiprintf_internal_r+0x310>
   18a50:	1080068c 	andi	r2,r2,26
   18a54:	00c00284 	movi	r3,10
   18a58:	10c0a826 	beq	r2,r3,18cfc <___vfiprintf_internal_r+0x334>
   18a5c:	d9001a04 	addi	r4,sp,104
   18a60:	d94019c4 	addi	r5,sp,103
   18a64:	048000f4 	movhi	r18,3
   18a68:	2145c83a 	sub	r2,r4,r5
   18a6c:	94a5cf04 	addi	r18,r18,-26820
   18a70:	d9001e15 	stw	r4,120(sp)
   18a74:	d9401f15 	stw	r5,124(sp)
   18a78:	dec01a15 	stw	sp,104(sp)
   18a7c:	d8001c15 	stw	zero,112(sp)
   18a80:	d8001b15 	stw	zero,108(sp)
   18a84:	d811883a 	mov	r8,sp
   18a88:	d8002615 	stw	zero,152(sp)
   18a8c:	d8002415 	stw	zero,144(sp)
   18a90:	d8802815 	stw	r2,160(sp)
   18a94:	a82d883a 	mov	r22,r21
   18a98:	b0800007 	ldb	r2,0(r22)
   18a9c:	10040d26 	beq	r2,zero,19ad4 <___vfiprintf_internal_r+0x110c>
   18aa0:	00c00944 	movi	r3,37
   18aa4:	b029883a 	mov	r20,r22
   18aa8:	10c0021e 	bne	r2,r3,18ab4 <___vfiprintf_internal_r+0xec>
   18aac:	00001606 	br	18b08 <___vfiprintf_internal_r+0x140>
   18ab0:	10c00326 	beq	r2,r3,18ac0 <___vfiprintf_internal_r+0xf8>
   18ab4:	a5000044 	addi	r20,r20,1
   18ab8:	a0800007 	ldb	r2,0(r20)
   18abc:	103ffc1e 	bne	r2,zero,18ab0 <__alt_data_end+0xfc018ab0>
   18ac0:	a5a1c83a 	sub	r16,r20,r22
   18ac4:	80001026 	beq	r16,zero,18b08 <___vfiprintf_internal_r+0x140>
   18ac8:	d8c01c17 	ldw	r3,112(sp)
   18acc:	d8801b17 	ldw	r2,108(sp)
   18ad0:	45800015 	stw	r22,0(r8)
   18ad4:	80c7883a 	add	r3,r16,r3
   18ad8:	10800044 	addi	r2,r2,1
   18adc:	44000115 	stw	r16,4(r8)
   18ae0:	d8c01c15 	stw	r3,112(sp)
   18ae4:	d8801b15 	stw	r2,108(sp)
   18ae8:	010001c4 	movi	r4,7
   18aec:	2080750e 	bge	r4,r2,18cc4 <___vfiprintf_internal_r+0x2fc>
   18af0:	1803951e 	bne	r3,zero,19948 <___vfiprintf_internal_r+0xf80>
   18af4:	d8c02417 	ldw	r3,144(sp)
   18af8:	d8001b15 	stw	zero,108(sp)
   18afc:	d811883a 	mov	r8,sp
   18b00:	1c07883a 	add	r3,r3,r16
   18b04:	d8c02415 	stw	r3,144(sp)
   18b08:	a0800007 	ldb	r2,0(r20)
   18b0c:	1002e026 	beq	r2,zero,19690 <___vfiprintf_internal_r+0xcc8>
   18b10:	a5800044 	addi	r22,r20,1
   18b14:	a0c00047 	ldb	r3,1(r20)
   18b18:	d8001d85 	stb	zero,118(sp)
   18b1c:	0027883a 	mov	r19,zero
   18b20:	d8002305 	stb	zero,140(sp)
   18b24:	043fffc4 	movi	r16,-1
   18b28:	d8002515 	stw	zero,148(sp)
   18b2c:	0023883a 	mov	r17,zero
   18b30:	05001604 	movi	r20,88
   18b34:	05400244 	movi	r21,9
   18b38:	402f883a 	mov	r23,r8
   18b3c:	b5800044 	addi	r22,r22,1
   18b40:	18bff804 	addi	r2,r3,-32
   18b44:	a0827736 	bltu	r20,r2,19524 <___vfiprintf_internal_r+0xb5c>
   18b48:	100490ba 	slli	r2,r2,2
   18b4c:	010000b4 	movhi	r4,2
   18b50:	2122d804 	addi	r4,r4,-29856
   18b54:	1105883a 	add	r2,r2,r4
   18b58:	10800017 	ldw	r2,0(r2)
   18b5c:	1000683a 	jmp	r2
   18b60:	00019224 	muli	zero,zero,1608
   18b64:	00019524 	muli	zero,zero,1620
   18b68:	00019524 	muli	zero,zero,1620
   18b6c:	00019240 	call	1924 <_ZN3USB4TaskEv+0x108>
   18b70:	00019524 	muli	zero,zero,1620
   18b74:	00019524 	muli	zero,zero,1620
   18b78:	00019524 	muli	zero,zero,1620
   18b7c:	00019524 	muli	zero,zero,1620
   18b80:	00019524 	muli	zero,zero,1620
   18b84:	00019524 	muli	zero,zero,1620
   18b88:	00019448 	cmpgei	zero,zero,1617
   18b8c:	0001946c 	andhi	zero,zero,1617
   18b90:	00019524 	muli	zero,zero,1620
   18b94:	00018d64 	muli	zero,zero,1589
   18b98:	00019480 	call	1948 <_ZN3USB4TaskEv+0x12c>
   18b9c:	00019524 	muli	zero,zero,1620
   18ba0:	0001924c 	andi	zero,zero,1609
   18ba4:	00019258 	cmpnei	zero,zero,1609
   18ba8:	00019258 	cmpnei	zero,zero,1609
   18bac:	00019258 	cmpnei	zero,zero,1609
   18bb0:	00019258 	cmpnei	zero,zero,1609
   18bb4:	00019258 	cmpnei	zero,zero,1609
   18bb8:	00019258 	cmpnei	zero,zero,1609
   18bbc:	00019258 	cmpnei	zero,zero,1609
   18bc0:	00019258 	cmpnei	zero,zero,1609
   18bc4:	00019258 	cmpnei	zero,zero,1609
   18bc8:	00019524 	muli	zero,zero,1620
   18bcc:	00019524 	muli	zero,zero,1620
   18bd0:	00019524 	muli	zero,zero,1620
   18bd4:	00019524 	muli	zero,zero,1620
   18bd8:	00019524 	muli	zero,zero,1620
   18bdc:	00019524 	muli	zero,zero,1620
   18be0:	00019524 	muli	zero,zero,1620
   18be4:	00019524 	muli	zero,zero,1620
   18be8:	00019524 	muli	zero,zero,1620
   18bec:	00019524 	muli	zero,zero,1620
   18bf0:	00019298 	cmpnei	zero,zero,1610
   18bf4:	00019524 	muli	zero,zero,1620
   18bf8:	00019524 	muli	zero,zero,1620
   18bfc:	00019524 	muli	zero,zero,1620
   18c00:	00019524 	muli	zero,zero,1620
   18c04:	00019524 	muli	zero,zero,1620
   18c08:	00019524 	muli	zero,zero,1620
   18c0c:	00019524 	muli	zero,zero,1620
   18c10:	00019524 	muli	zero,zero,1620
   18c14:	00019524 	muli	zero,zero,1620
   18c18:	00019524 	muli	zero,zero,1620
   18c1c:	000192d4 	movui	zero,1611
   18c20:	00019524 	muli	zero,zero,1620
   18c24:	00019524 	muli	zero,zero,1620
   18c28:	00019524 	muli	zero,zero,1620
   18c2c:	00019524 	muli	zero,zero,1620
   18c30:	00019524 	muli	zero,zero,1620
   18c34:	00019330 	cmpltui	zero,zero,1612
   18c38:	00019524 	muli	zero,zero,1620
   18c3c:	00019524 	muli	zero,zero,1620
   18c40:	000193a4 	muli	zero,zero,1614
   18c44:	00019524 	muli	zero,zero,1620
   18c48:	00019524 	muli	zero,zero,1620
   18c4c:	00019524 	muli	zero,zero,1620
   18c50:	00019524 	muli	zero,zero,1620
   18c54:	00019524 	muli	zero,zero,1620
   18c58:	00019524 	muli	zero,zero,1620
   18c5c:	00019524 	muli	zero,zero,1620
   18c60:	00019524 	muli	zero,zero,1620
   18c64:	00019524 	muli	zero,zero,1620
   18c68:	00019524 	muli	zero,zero,1620
   18c6c:	0001914c 	andi	zero,zero,1605
   18c70:	0001917c 	xorhi	zero,zero,1605
   18c74:	00019524 	muli	zero,zero,1620
   18c78:	00019524 	muli	zero,zero,1620
   18c7c:	00019524 	muli	zero,zero,1620
   18c80:	000194cc 	andi	zero,zero,1619
   18c84:	0001917c 	xorhi	zero,zero,1605
   18c88:	00019524 	muli	zero,zero,1620
   18c8c:	00019524 	muli	zero,zero,1620
   18c90:	00019024 	muli	zero,zero,1600
   18c94:	00019524 	muli	zero,zero,1620
   18c98:	00019038 	rdprs	zero,zero,1600
   18c9c:	00019070 	cmpltui	zero,zero,1601
   18ca0:	00018d70 	cmpltui	zero,zero,1589
   18ca4:	00019018 	cmpnei	zero,zero,1600
   18ca8:	00019524 	muli	zero,zero,1620
   18cac:	000193e4 	muli	zero,zero,1615
   18cb0:	00019524 	muli	zero,zero,1620
   18cb4:	00019430 	cmpltui	zero,zero,1616
   18cb8:	00019524 	muli	zero,zero,1620
   18cbc:	00019524 	muli	zero,zero,1620
   18cc0:	000190f4 	movhi	zero,1603
   18cc4:	42000204 	addi	r8,r8,8
   18cc8:	d8c02417 	ldw	r3,144(sp)
   18ccc:	1c07883a 	add	r3,r3,r16
   18cd0:	d8c02415 	stw	r3,144(sp)
   18cd4:	003f8c06 	br	18b08 <__alt_data_end+0xfc018b08>
   18cd8:	d9402017 	ldw	r5,128(sp)
   18cdc:	d9002117 	ldw	r4,132(sp)
   18ce0:	0012a580 	call	12a58 <__swsetup_r>
   18ce4:	1003c11e 	bne	r2,zero,19bec <___vfiprintf_internal_r+0x1224>
   18ce8:	d9402017 	ldw	r5,128(sp)
   18cec:	00c00284 	movi	r3,10
   18cf0:	2880030b 	ldhu	r2,12(r5)
   18cf4:	1080068c 	andi	r2,r2,26
   18cf8:	10ff581e 	bne	r2,r3,18a5c <__alt_data_end+0xfc018a5c>
   18cfc:	d8c02017 	ldw	r3,128(sp)
   18d00:	1880038f 	ldh	r2,14(r3)
   18d04:	103f5516 	blt	r2,zero,18a5c <__alt_data_end+0xfc018a5c>
   18d08:	d9c02217 	ldw	r7,136(sp)
   18d0c:	d9002117 	ldw	r4,132(sp)
   18d10:	a80d883a 	mov	r6,r21
   18d14:	180b883a 	mov	r5,r3
   18d18:	0019ef00 	call	19ef0 <__sbprintf>
   18d1c:	dfc03517 	ldw	ra,212(sp)
   18d20:	df003417 	ldw	fp,208(sp)
   18d24:	ddc03317 	ldw	r23,204(sp)
   18d28:	dd803217 	ldw	r22,200(sp)
   18d2c:	dd403117 	ldw	r21,196(sp)
   18d30:	dd003017 	ldw	r20,192(sp)
   18d34:	dcc02f17 	ldw	r19,188(sp)
   18d38:	dc802e17 	ldw	r18,184(sp)
   18d3c:	dc402d17 	ldw	r17,180(sp)
   18d40:	dc002c17 	ldw	r16,176(sp)
   18d44:	dec03604 	addi	sp,sp,216
   18d48:	f800283a 	ret
   18d4c:	0014a640 	call	14a64 <__sinit>
   18d50:	003f2f06 	br	18a10 <__alt_data_end+0xfc018a10>
   18d54:	d8c02517 	ldw	r3,148(sp)
   18d58:	d8802215 	stw	r2,136(sp)
   18d5c:	00c7c83a 	sub	r3,zero,r3
   18d60:	d8c02515 	stw	r3,148(sp)
   18d64:	8c400114 	ori	r17,r17,4
   18d68:	b0c00007 	ldb	r3,0(r22)
   18d6c:	003f7306 	br	18b3c <__alt_data_end+0xfc018b3c>
   18d70:	00800c04 	movi	r2,48
   18d74:	d9402217 	ldw	r5,136(sp)
   18d78:	d8801d05 	stb	r2,116(sp)
   18d7c:	00801e04 	movi	r2,120
   18d80:	d8801d45 	stb	r2,117(sp)
   18d84:	d8001d85 	stb	zero,118(sp)
   18d88:	b811883a 	mov	r8,r23
   18d8c:	28c00104 	addi	r3,r5,4
   18d90:	2cc00017 	ldw	r19,0(r5)
   18d94:	0029883a 	mov	r20,zero
   18d98:	88800094 	ori	r2,r17,2
   18d9c:	80032516 	blt	r16,zero,19a34 <___vfiprintf_internal_r+0x106c>
   18da0:	00bfdfc4 	movi	r2,-129
   18da4:	88a2703a 	and	r17,r17,r2
   18da8:	d8c02215 	stw	r3,136(sp)
   18dac:	8c400094 	ori	r17,r17,2
   18db0:	98032a1e 	bne	r19,zero,19a5c <___vfiprintf_internal_r+0x1094>
   18db4:	008000f4 	movhi	r2,3
   18db8:	10a55f04 	addi	r2,r2,-27268
   18dbc:	d8802615 	stw	r2,152(sp)
   18dc0:	002b883a 	mov	r21,zero
   18dc4:	8001741e 	bne	r16,zero,19398 <___vfiprintf_internal_r+0x9d0>
   18dc8:	0021883a 	mov	r16,zero
   18dcc:	0029883a 	mov	r20,zero
   18dd0:	ddc01a04 	addi	r23,sp,104
   18dd4:	8027883a 	mov	r19,r16
   18dd8:	8500010e 	bge	r16,r20,18de0 <___vfiprintf_internal_r+0x418>
   18ddc:	a027883a 	mov	r19,r20
   18de0:	ad403fcc 	andi	r21,r21,255
   18de4:	ad40201c 	xori	r21,r21,128
   18de8:	ad7fe004 	addi	r21,r21,-128
   18dec:	a8000126 	beq	r21,zero,18df4 <___vfiprintf_internal_r+0x42c>
   18df0:	9cc00044 	addi	r19,r19,1
   18df4:	89c0008c 	andi	r7,r17,2
   18df8:	38000126 	beq	r7,zero,18e00 <___vfiprintf_internal_r+0x438>
   18dfc:	9cc00084 	addi	r19,r19,2
   18e00:	88c0210c 	andi	r3,r17,132
   18e04:	1801dd1e 	bne	r3,zero,1957c <___vfiprintf_internal_r+0xbb4>
   18e08:	d9402517 	ldw	r5,148(sp)
   18e0c:	2cebc83a 	sub	r21,r5,r19
   18e10:	0541da0e 	bge	zero,r21,1957c <___vfiprintf_internal_r+0xbb4>
   18e14:	07000404 	movi	fp,16
   18e18:	d8801c17 	ldw	r2,112(sp)
   18e1c:	e543be0e 	bge	fp,r21,19d18 <___vfiprintf_internal_r+0x1350>
   18e20:	014000f4 	movhi	r5,3
   18e24:	2965d304 	addi	r5,r5,-26804
   18e28:	dc002715 	stw	r16,156(sp)
   18e2c:	d9801b17 	ldw	r6,108(sp)
   18e30:	a821883a 	mov	r16,r21
   18e34:	d9402315 	stw	r5,140(sp)
   18e38:	028001c4 	movi	r10,7
   18e3c:	d9c02915 	stw	r7,164(sp)
   18e40:	182b883a 	mov	r21,r3
   18e44:	00000506 	br	18e5c <___vfiprintf_internal_r+0x494>
   18e48:	31000084 	addi	r4,r6,2
   18e4c:	42000204 	addi	r8,r8,8
   18e50:	180d883a 	mov	r6,r3
   18e54:	843ffc04 	addi	r16,r16,-16
   18e58:	e4000f0e 	bge	fp,r16,18e98 <___vfiprintf_internal_r+0x4d0>
   18e5c:	010000f4 	movhi	r4,3
   18e60:	10800404 	addi	r2,r2,16
   18e64:	30c00044 	addi	r3,r6,1
   18e68:	2125d304 	addi	r4,r4,-26804
   18e6c:	41000015 	stw	r4,0(r8)
   18e70:	47000115 	stw	fp,4(r8)
   18e74:	d8801c15 	stw	r2,112(sp)
   18e78:	d8c01b15 	stw	r3,108(sp)
   18e7c:	50fff20e 	bge	r10,r3,18e48 <__alt_data_end+0xfc018e48>
   18e80:	1001b21e 	bne	r2,zero,1954c <___vfiprintf_internal_r+0xb84>
   18e84:	843ffc04 	addi	r16,r16,-16
   18e88:	000d883a 	mov	r6,zero
   18e8c:	01000044 	movi	r4,1
   18e90:	d811883a 	mov	r8,sp
   18e94:	e43ff116 	blt	fp,r16,18e5c <__alt_data_end+0xfc018e5c>
   18e98:	a807883a 	mov	r3,r21
   18e9c:	d9c02917 	ldw	r7,164(sp)
   18ea0:	802b883a 	mov	r21,r16
   18ea4:	dc002717 	ldw	r16,156(sp)
   18ea8:	d9402317 	ldw	r5,140(sp)
   18eac:	a885883a 	add	r2,r21,r2
   18eb0:	45400115 	stw	r21,4(r8)
   18eb4:	41400015 	stw	r5,0(r8)
   18eb8:	d8801c15 	stw	r2,112(sp)
   18ebc:	d9001b15 	stw	r4,108(sp)
   18ec0:	014001c4 	movi	r5,7
   18ec4:	29026216 	blt	r5,r4,19850 <___vfiprintf_internal_r+0xe88>
   18ec8:	d9801d87 	ldb	r6,118(sp)
   18ecc:	42000204 	addi	r8,r8,8
   18ed0:	21400044 	addi	r5,r4,1
   18ed4:	3001ae1e 	bne	r6,zero,19590 <___vfiprintf_internal_r+0xbc8>
   18ed8:	3801bb26 	beq	r7,zero,195c8 <___vfiprintf_internal_r+0xc00>
   18edc:	d9001d04 	addi	r4,sp,116
   18ee0:	10800084 	addi	r2,r2,2
   18ee4:	41000015 	stw	r4,0(r8)
   18ee8:	01000084 	movi	r4,2
   18eec:	41000115 	stw	r4,4(r8)
   18ef0:	d8801c15 	stw	r2,112(sp)
   18ef4:	d9401b15 	stw	r5,108(sp)
   18ef8:	010001c4 	movi	r4,7
   18efc:	2142680e 	bge	r4,r5,198a0 <___vfiprintf_internal_r+0xed8>
   18f00:	1002b11e 	bne	r2,zero,199c8 <___vfiprintf_internal_r+0x1000>
   18f04:	01802004 	movi	r6,128
   18f08:	01400044 	movi	r5,1
   18f0c:	0009883a 	mov	r4,zero
   18f10:	d811883a 	mov	r8,sp
   18f14:	1981ae1e 	bne	r3,r6,195d0 <___vfiprintf_internal_r+0xc08>
   18f18:	d8c02517 	ldw	r3,148(sp)
   18f1c:	1cf9c83a 	sub	fp,r3,r19
   18f20:	0701ab0e 	bge	zero,fp,195d0 <___vfiprintf_internal_r+0xc08>
   18f24:	05400404 	movi	r21,16
   18f28:	af03a90e 	bge	r21,fp,19dd0 <___vfiprintf_internal_r+0x1408>
   18f2c:	014000f4 	movhi	r5,3
   18f30:	2965cf04 	addi	r5,r5,-26820
   18f34:	d9402315 	stw	r5,140(sp)
   18f38:	01c001c4 	movi	r7,7
   18f3c:	00000506 	br	18f54 <___vfiprintf_internal_r+0x58c>
   18f40:	21800084 	addi	r6,r4,2
   18f44:	42000204 	addi	r8,r8,8
   18f48:	1809883a 	mov	r4,r3
   18f4c:	e73ffc04 	addi	fp,fp,-16
   18f50:	af000d0e 	bge	r21,fp,18f88 <___vfiprintf_internal_r+0x5c0>
   18f54:	10800404 	addi	r2,r2,16
   18f58:	20c00044 	addi	r3,r4,1
   18f5c:	44800015 	stw	r18,0(r8)
   18f60:	45400115 	stw	r21,4(r8)
   18f64:	d8801c15 	stw	r2,112(sp)
   18f68:	d8c01b15 	stw	r3,108(sp)
   18f6c:	38fff40e 	bge	r7,r3,18f40 <__alt_data_end+0xfc018f40>
   18f70:	10022b1e 	bne	r2,zero,19820 <___vfiprintf_internal_r+0xe58>
   18f74:	e73ffc04 	addi	fp,fp,-16
   18f78:	01800044 	movi	r6,1
   18f7c:	0009883a 	mov	r4,zero
   18f80:	d811883a 	mov	r8,sp
   18f84:	af3ff316 	blt	r21,fp,18f54 <__alt_data_end+0xfc018f54>
   18f88:	d8c02317 	ldw	r3,140(sp)
   18f8c:	1705883a 	add	r2,r2,fp
   18f90:	47000115 	stw	fp,4(r8)
   18f94:	40c00015 	stw	r3,0(r8)
   18f98:	d8801c15 	stw	r2,112(sp)
   18f9c:	d9801b15 	stw	r6,108(sp)
   18fa0:	00c001c4 	movi	r3,7
   18fa4:	19829416 	blt	r3,r6,199f8 <___vfiprintf_internal_r+0x1030>
   18fa8:	8521c83a 	sub	r16,r16,r20
   18fac:	42000204 	addi	r8,r8,8
   18fb0:	31400044 	addi	r5,r6,1
   18fb4:	3009883a 	mov	r4,r6
   18fb8:	04018716 	blt	zero,r16,195d8 <___vfiprintf_internal_r+0xc10>
   18fbc:	a085883a 	add	r2,r20,r2
   18fc0:	45c00015 	stw	r23,0(r8)
   18fc4:	45000115 	stw	r20,4(r8)
   18fc8:	d8801c15 	stw	r2,112(sp)
   18fcc:	d9401b15 	stw	r5,108(sp)
   18fd0:	00c001c4 	movi	r3,7
   18fd4:	1941c20e 	bge	r3,r5,196e0 <___vfiprintf_internal_r+0xd18>
   18fd8:	1002531e 	bne	r2,zero,19928 <___vfiprintf_internal_r+0xf60>
   18fdc:	d8001b15 	stw	zero,108(sp)
   18fe0:	8c40010c 	andi	r17,r17,4
   18fe4:	88023226 	beq	r17,zero,198b0 <___vfiprintf_internal_r+0xee8>
   18fe8:	d9002517 	ldw	r4,148(sp)
   18fec:	24e3c83a 	sub	r17,r4,r19
   18ff0:	04432916 	blt	zero,r17,19c98 <___vfiprintf_internal_r+0x12d0>
   18ff4:	d8802517 	ldw	r2,148(sp)
   18ff8:	14c0010e 	bge	r2,r19,19000 <___vfiprintf_internal_r+0x638>
   18ffc:	9805883a 	mov	r2,r19
   19000:	d8c02417 	ldw	r3,144(sp)
   19004:	1887883a 	add	r3,r3,r2
   19008:	d8c02415 	stw	r3,144(sp)
   1900c:	d8001b15 	stw	zero,108(sp)
   19010:	d811883a 	mov	r8,sp
   19014:	003ea006 	br	18a98 <__alt_data_end+0xfc018a98>
   19018:	8c400814 	ori	r17,r17,32
   1901c:	b0c00007 	ldb	r3,0(r22)
   19020:	003ec606 	br	18b3c <__alt_data_end+0xfc018b3c>
   19024:	b0c00007 	ldb	r3,0(r22)
   19028:	00801b04 	movi	r2,108
   1902c:	18832026 	beq	r3,r2,19cb0 <___vfiprintf_internal_r+0x12e8>
   19030:	8c400414 	ori	r17,r17,16
   19034:	003ec106 	br	18b3c <__alt_data_end+0xfc018b3c>
   19038:	9cc03fcc 	andi	r19,r19,255
   1903c:	b811883a 	mov	r8,r23
   19040:	9803981e 	bne	r19,zero,19ea4 <___vfiprintf_internal_r+0x14dc>
   19044:	8880080c 	andi	r2,r17,32
   19048:	1002be26 	beq	r2,zero,19b44 <___vfiprintf_internal_r+0x117c>
   1904c:	d9002217 	ldw	r4,136(sp)
   19050:	d9402417 	ldw	r5,144(sp)
   19054:	20800017 	ldw	r2,0(r4)
   19058:	2807d7fa 	srai	r3,r5,31
   1905c:	21000104 	addi	r4,r4,4
   19060:	d9002215 	stw	r4,136(sp)
   19064:	11400015 	stw	r5,0(r2)
   19068:	10c00115 	stw	r3,4(r2)
   1906c:	003e8a06 	br	18a98 <__alt_data_end+0xfc018a98>
   19070:	9cc03fcc 	andi	r19,r19,255
   19074:	b811883a 	mov	r8,r23
   19078:	9803871e 	bne	r19,zero,19e98 <___vfiprintf_internal_r+0x14d0>
   1907c:	8880080c 	andi	r2,r17,32
   19080:	10009a26 	beq	r2,zero,192ec <___vfiprintf_internal_r+0x924>
   19084:	d9002217 	ldw	r4,136(sp)
   19088:	d8001d85 	stb	zero,118(sp)
   1908c:	20800204 	addi	r2,r4,8
   19090:	24c00017 	ldw	r19,0(r4)
   19094:	25000117 	ldw	r20,4(r4)
   19098:	8002a416 	blt	r16,zero,19b2c <___vfiprintf_internal_r+0x1164>
   1909c:	013fdfc4 	movi	r4,-129
   190a0:	9d06b03a 	or	r3,r19,r20
   190a4:	d8802215 	stw	r2,136(sp)
   190a8:	8922703a 	and	r17,r17,r4
   190ac:	18009b26 	beq	r3,zero,1931c <___vfiprintf_internal_r+0x954>
   190b0:	002b883a 	mov	r21,zero
   190b4:	ddc01a04 	addi	r23,sp,104
   190b8:	9806d0fa 	srli	r3,r19,3
   190bc:	a008977a 	slli	r4,r20,29
   190c0:	a028d0fa 	srli	r20,r20,3
   190c4:	9cc001cc 	andi	r19,r19,7
   190c8:	98800c04 	addi	r2,r19,48
   190cc:	bdffffc4 	addi	r23,r23,-1
   190d0:	20e6b03a 	or	r19,r4,r3
   190d4:	b8800005 	stb	r2,0(r23)
   190d8:	9d06b03a 	or	r3,r19,r20
   190dc:	183ff61e 	bne	r3,zero,190b8 <__alt_data_end+0xfc0190b8>
   190e0:	88c0004c 	andi	r3,r17,1
   190e4:	18021f1e 	bne	r3,zero,19964 <___vfiprintf_internal_r+0xf9c>
   190e8:	d9401e17 	ldw	r5,120(sp)
   190ec:	2de9c83a 	sub	r20,r5,r23
   190f0:	003f3806 	br	18dd4 <__alt_data_end+0xfc018dd4>
   190f4:	9cc03fcc 	andi	r19,r19,255
   190f8:	b811883a 	mov	r8,r23
   190fc:	98034f1e 	bne	r19,zero,19e3c <___vfiprintf_internal_r+0x1474>
   19100:	008000f4 	movhi	r2,3
   19104:	10a55f04 	addi	r2,r2,-27268
   19108:	d8802615 	stw	r2,152(sp)
   1910c:	8880080c 	andi	r2,r17,32
   19110:	1000ac26 	beq	r2,zero,193c4 <___vfiprintf_internal_r+0x9fc>
   19114:	d9002217 	ldw	r4,136(sp)
   19118:	24c00017 	ldw	r19,0(r4)
   1911c:	25000117 	ldw	r20,4(r4)
   19120:	21000204 	addi	r4,r4,8
   19124:	d9002215 	stw	r4,136(sp)
   19128:	8880004c 	andi	r2,r17,1
   1912c:	1001e726 	beq	r2,zero,198cc <___vfiprintf_internal_r+0xf04>
   19130:	9d04b03a 	or	r2,r19,r20
   19134:	10025c1e 	bne	r2,zero,19aa8 <___vfiprintf_internal_r+0x10e0>
   19138:	d8001d85 	stb	zero,118(sp)
   1913c:	80024416 	blt	r16,zero,19a50 <___vfiprintf_internal_r+0x1088>
   19140:	00bfdfc4 	movi	r2,-129
   19144:	88a2703a 	and	r17,r17,r2
   19148:	003f1d06 	br	18dc0 <__alt_data_end+0xfc018dc0>
   1914c:	d8c02217 	ldw	r3,136(sp)
   19150:	04c00044 	movi	r19,1
   19154:	b811883a 	mov	r8,r23
   19158:	18800017 	ldw	r2,0(r3)
   1915c:	18c00104 	addi	r3,r3,4
   19160:	d8001d85 	stb	zero,118(sp)
   19164:	d8801005 	stb	r2,64(sp)
   19168:	d8c02215 	stw	r3,136(sp)
   1916c:	9829883a 	mov	r20,r19
   19170:	ddc01004 	addi	r23,sp,64
   19174:	0021883a 	mov	r16,zero
   19178:	003f1e06 	br	18df4 <__alt_data_end+0xfc018df4>
   1917c:	9cc03fcc 	andi	r19,r19,255
   19180:	b811883a 	mov	r8,r23
   19184:	9803331e 	bne	r19,zero,19e54 <___vfiprintf_internal_r+0x148c>
   19188:	8880080c 	andi	r2,r17,32
   1918c:	10004826 	beq	r2,zero,192b0 <___vfiprintf_internal_r+0x8e8>
   19190:	d9002217 	ldw	r4,136(sp)
   19194:	20800117 	ldw	r2,4(r4)
   19198:	24c00017 	ldw	r19,0(r4)
   1919c:	21000204 	addi	r4,r4,8
   191a0:	d9002215 	stw	r4,136(sp)
   191a4:	1029883a 	mov	r20,r2
   191a8:	10024c16 	blt	r2,zero,19adc <___vfiprintf_internal_r+0x1114>
   191ac:	dd401d83 	ldbu	r21,118(sp)
   191b0:	80007116 	blt	r16,zero,19378 <___vfiprintf_internal_r+0x9b0>
   191b4:	00ffdfc4 	movi	r3,-129
   191b8:	9d04b03a 	or	r2,r19,r20
   191bc:	88e2703a 	and	r17,r17,r3
   191c0:	1000d126 	beq	r2,zero,19508 <___vfiprintf_internal_r+0xb40>
   191c4:	a0023526 	beq	r20,zero,19a9c <___vfiprintf_internal_r+0x10d4>
   191c8:	ddc01a04 	addi	r23,sp,104
   191cc:	4039883a 	mov	fp,r8
   191d0:	9809883a 	mov	r4,r19
   191d4:	a00b883a 	mov	r5,r20
   191d8:	01800284 	movi	r6,10
   191dc:	000f883a 	mov	r7,zero
   191e0:	001aef40 	call	1aef4 <__umoddi3>
   191e4:	10800c04 	addi	r2,r2,48
   191e8:	bdffffc4 	addi	r23,r23,-1
   191ec:	9809883a 	mov	r4,r19
   191f0:	a00b883a 	mov	r5,r20
   191f4:	b8800005 	stb	r2,0(r23)
   191f8:	01800284 	movi	r6,10
   191fc:	000f883a 	mov	r7,zero
   19200:	001a8f80 	call	1a8f8 <__udivdi3>
   19204:	1027883a 	mov	r19,r2
   19208:	10c4b03a 	or	r2,r2,r3
   1920c:	1829883a 	mov	r20,r3
   19210:	103fef1e 	bne	r2,zero,191d0 <__alt_data_end+0xfc0191d0>
   19214:	d9001e17 	ldw	r4,120(sp)
   19218:	e011883a 	mov	r8,fp
   1921c:	25e9c83a 	sub	r20,r4,r23
   19220:	003eec06 	br	18dd4 <__alt_data_end+0xfc018dd4>
   19224:	d8802307 	ldb	r2,140(sp)
   19228:	1002361e 	bne	r2,zero,19b04 <___vfiprintf_internal_r+0x113c>
   1922c:	00c00804 	movi	r3,32
   19230:	d8c02305 	stb	r3,140(sp)
   19234:	04c00044 	movi	r19,1
   19238:	b0c00007 	ldb	r3,0(r22)
   1923c:	003e3f06 	br	18b3c <__alt_data_end+0xfc018b3c>
   19240:	8c400054 	ori	r17,r17,1
   19244:	b0c00007 	ldb	r3,0(r22)
   19248:	003e3c06 	br	18b3c <__alt_data_end+0xfc018b3c>
   1924c:	8c402014 	ori	r17,r17,128
   19250:	b0c00007 	ldb	r3,0(r22)
   19254:	003e3906 	br	18b3c <__alt_data_end+0xfc018b3c>
   19258:	dc002715 	stw	r16,156(sp)
   1925c:	d8002515 	stw	zero,148(sp)
   19260:	1f3ff404 	addi	fp,r3,-48
   19264:	0009883a 	mov	r4,zero
   19268:	b021883a 	mov	r16,r22
   1926c:	01400284 	movi	r5,10
   19270:	000cca00 	call	cca0 <__mulsi3>
   19274:	80c00007 	ldb	r3,0(r16)
   19278:	e089883a 	add	r4,fp,r2
   1927c:	b5800044 	addi	r22,r22,1
   19280:	1f3ff404 	addi	fp,r3,-48
   19284:	b021883a 	mov	r16,r22
   19288:	af3ff82e 	bgeu	r21,fp,1926c <__alt_data_end+0xfc01926c>
   1928c:	d9002515 	stw	r4,148(sp)
   19290:	dc002717 	ldw	r16,156(sp)
   19294:	003e2a06 	br	18b40 <__alt_data_end+0xfc018b40>
   19298:	9cc03fcc 	andi	r19,r19,255
   1929c:	b811883a 	mov	r8,r23
   192a0:	9802e91e 	bne	r19,zero,19e48 <___vfiprintf_internal_r+0x1480>
   192a4:	8c400414 	ori	r17,r17,16
   192a8:	8880080c 	andi	r2,r17,32
   192ac:	103fb81e 	bne	r2,zero,19190 <__alt_data_end+0xfc019190>
   192b0:	8880040c 	andi	r2,r17,16
   192b4:	10022e26 	beq	r2,zero,19b70 <___vfiprintf_internal_r+0x11a8>
   192b8:	d9402217 	ldw	r5,136(sp)
   192bc:	2cc00017 	ldw	r19,0(r5)
   192c0:	29400104 	addi	r5,r5,4
   192c4:	d9402215 	stw	r5,136(sp)
   192c8:	9829d7fa 	srai	r20,r19,31
   192cc:	a005883a 	mov	r2,r20
   192d0:	003fb506 	br	191a8 <__alt_data_end+0xfc0191a8>
   192d4:	9cc03fcc 	andi	r19,r19,255
   192d8:	b811883a 	mov	r8,r23
   192dc:	9802fa1e 	bne	r19,zero,19ec8 <___vfiprintf_internal_r+0x1500>
   192e0:	8c400414 	ori	r17,r17,16
   192e4:	8880080c 	andi	r2,r17,32
   192e8:	103f661e 	bne	r2,zero,19084 <__alt_data_end+0xfc019084>
   192ec:	8880040c 	andi	r2,r17,16
   192f0:	10020626 	beq	r2,zero,19b0c <___vfiprintf_internal_r+0x1144>
   192f4:	d9402217 	ldw	r5,136(sp)
   192f8:	d8001d85 	stb	zero,118(sp)
   192fc:	0029883a 	mov	r20,zero
   19300:	28800104 	addi	r2,r5,4
   19304:	2cc00017 	ldw	r19,0(r5)
   19308:	80020816 	blt	r16,zero,19b2c <___vfiprintf_internal_r+0x1164>
   1930c:	00ffdfc4 	movi	r3,-129
   19310:	d8802215 	stw	r2,136(sp)
   19314:	88e2703a 	and	r17,r17,r3
   19318:	983f651e 	bne	r19,zero,190b0 <__alt_data_end+0xfc0190b0>
   1931c:	002b883a 	mov	r21,zero
   19320:	8002cf26 	beq	r16,zero,19e60 <___vfiprintf_internal_r+0x1498>
   19324:	0027883a 	mov	r19,zero
   19328:	0029883a 	mov	r20,zero
   1932c:	003f6106 	br	190b4 <__alt_data_end+0xfc0190b4>
   19330:	9cc03fcc 	andi	r19,r19,255
   19334:	b811883a 	mov	r8,r23
   19338:	9802e01e 	bne	r19,zero,19ebc <___vfiprintf_internal_r+0x14f4>
   1933c:	8c400414 	ori	r17,r17,16
   19340:	8880080c 	andi	r2,r17,32
   19344:	1000641e 	bne	r2,zero,194d8 <___vfiprintf_internal_r+0xb10>
   19348:	8880040c 	andi	r2,r17,16
   1934c:	1001c81e 	bne	r2,zero,19a70 <___vfiprintf_internal_r+0x10a8>
   19350:	8880100c 	andi	r2,r17,64
   19354:	d8001d85 	stb	zero,118(sp)
   19358:	1002281e 	bne	r2,zero,19bfc <___vfiprintf_internal_r+0x1234>
   1935c:	d9002217 	ldw	r4,136(sp)
   19360:	0029883a 	mov	r20,zero
   19364:	20800104 	addi	r2,r4,4
   19368:	24c00017 	ldw	r19,0(r4)
   1936c:	8001c60e 	bge	r16,zero,19a88 <___vfiprintf_internal_r+0x10c0>
   19370:	d8802215 	stw	r2,136(sp)
   19374:	002b883a 	mov	r21,zero
   19378:	9d04b03a 	or	r2,r19,r20
   1937c:	103f911e 	bne	r2,zero,191c4 <__alt_data_end+0xfc0191c4>
   19380:	00800044 	movi	r2,1
   19384:	10803fcc 	andi	r2,r2,255
   19388:	00c00044 	movi	r3,1
   1938c:	10c05f26 	beq	r2,r3,1950c <___vfiprintf_internal_r+0xb44>
   19390:	00c00084 	movi	r3,2
   19394:	10ffe31e 	bne	r2,r3,19324 <__alt_data_end+0xfc019324>
   19398:	0027883a 	mov	r19,zero
   1939c:	0029883a 	mov	r20,zero
   193a0:	00015106 	br	198e8 <___vfiprintf_internal_r+0xf20>
   193a4:	9cc03fcc 	andi	r19,r19,255
   193a8:	b811883a 	mov	r8,r23
   193ac:	9802c01e 	bne	r19,zero,19eb0 <___vfiprintf_internal_r+0x14e8>
   193b0:	014000f4 	movhi	r5,3
   193b4:	29655a04 	addi	r5,r5,-27288
   193b8:	d9402615 	stw	r5,152(sp)
   193bc:	8880080c 	andi	r2,r17,32
   193c0:	103f541e 	bne	r2,zero,19114 <__alt_data_end+0xfc019114>
   193c4:	8880040c 	andi	r2,r17,16
   193c8:	1001f226 	beq	r2,zero,19b94 <___vfiprintf_internal_r+0x11cc>
   193cc:	d9402217 	ldw	r5,136(sp)
   193d0:	0029883a 	mov	r20,zero
   193d4:	2cc00017 	ldw	r19,0(r5)
   193d8:	29400104 	addi	r5,r5,4
   193dc:	d9402215 	stw	r5,136(sp)
   193e0:	003f5106 	br	19128 <__alt_data_end+0xfc019128>
   193e4:	d8c02217 	ldw	r3,136(sp)
   193e8:	b811883a 	mov	r8,r23
   193ec:	d8001d85 	stb	zero,118(sp)
   193f0:	1dc00017 	ldw	r23,0(r3)
   193f4:	1f000104 	addi	fp,r3,4
   193f8:	b8025926 	beq	r23,zero,19d60 <___vfiprintf_internal_r+0x1398>
   193fc:	80023316 	blt	r16,zero,19ccc <___vfiprintf_internal_r+0x1304>
   19400:	800d883a 	mov	r6,r16
   19404:	000b883a 	mov	r5,zero
   19408:	b809883a 	mov	r4,r23
   1940c:	da002a15 	stw	r8,168(sp)
   19410:	00157d00 	call	157d0 <memchr>
   19414:	da002a17 	ldw	r8,168(sp)
   19418:	10026826 	beq	r2,zero,19dbc <___vfiprintf_internal_r+0x13f4>
   1941c:	15e9c83a 	sub	r20,r2,r23
   19420:	dd401d83 	ldbu	r21,118(sp)
   19424:	df002215 	stw	fp,136(sp)
   19428:	0021883a 	mov	r16,zero
   1942c:	003e6906 	br	18dd4 <__alt_data_end+0xfc018dd4>
   19430:	9cc03fcc 	andi	r19,r19,255
   19434:	b811883a 	mov	r8,r23
   19438:	983fc126 	beq	r19,zero,19340 <__alt_data_end+0xfc019340>
   1943c:	d8c02303 	ldbu	r3,140(sp)
   19440:	d8c01d85 	stb	r3,118(sp)
   19444:	003fbe06 	br	19340 <__alt_data_end+0xfc019340>
   19448:	d9002217 	ldw	r4,136(sp)
   1944c:	d9402217 	ldw	r5,136(sp)
   19450:	21000017 	ldw	r4,0(r4)
   19454:	28800104 	addi	r2,r5,4
   19458:	d9002515 	stw	r4,148(sp)
   1945c:	203e3d16 	blt	r4,zero,18d54 <__alt_data_end+0xfc018d54>
   19460:	d8802215 	stw	r2,136(sp)
   19464:	b0c00007 	ldb	r3,0(r22)
   19468:	003db406 	br	18b3c <__alt_data_end+0xfc018b3c>
   1946c:	00c00ac4 	movi	r3,43
   19470:	d8c02305 	stb	r3,140(sp)
   19474:	04c00044 	movi	r19,1
   19478:	b0c00007 	ldb	r3,0(r22)
   1947c:	003daf06 	br	18b3c <__alt_data_end+0xfc018b3c>
   19480:	b0c00007 	ldb	r3,0(r22)
   19484:	01000a84 	movi	r4,42
   19488:	b4000044 	addi	r16,r22,1
   1948c:	19025e26 	beq	r3,r4,19e08 <___vfiprintf_internal_r+0x1440>
   19490:	1f3ff404 	addi	fp,r3,-48
   19494:	0009883a 	mov	r4,zero
   19498:	af025236 	bltu	r21,fp,19de4 <___vfiprintf_internal_r+0x141c>
   1949c:	01400284 	movi	r5,10
   194a0:	000cca00 	call	cca0 <__mulsi3>
   194a4:	80c00007 	ldb	r3,0(r16)
   194a8:	1709883a 	add	r4,r2,fp
   194ac:	85800044 	addi	r22,r16,1
   194b0:	1f3ff404 	addi	fp,r3,-48
   194b4:	b021883a 	mov	r16,r22
   194b8:	af3ff82e 	bgeu	r21,fp,1949c <__alt_data_end+0xfc01949c>
   194bc:	2021883a 	mov	r16,r4
   194c0:	203d9f0e 	bge	r4,zero,18b40 <__alt_data_end+0xfc018b40>
   194c4:	043fffc4 	movi	r16,-1
   194c8:	003d9d06 	br	18b40 <__alt_data_end+0xfc018b40>
   194cc:	8c401014 	ori	r17,r17,64
   194d0:	b0c00007 	ldb	r3,0(r22)
   194d4:	003d9906 	br	18b3c <__alt_data_end+0xfc018b3c>
   194d8:	d9002217 	ldw	r4,136(sp)
   194dc:	d8001d85 	stb	zero,118(sp)
   194e0:	20c00204 	addi	r3,r4,8
   194e4:	24c00017 	ldw	r19,0(r4)
   194e8:	25000117 	ldw	r20,4(r4)
   194ec:	8001e716 	blt	r16,zero,19c8c <___vfiprintf_internal_r+0x12c4>
   194f0:	013fdfc4 	movi	r4,-129
   194f4:	9d04b03a 	or	r2,r19,r20
   194f8:	d8c02215 	stw	r3,136(sp)
   194fc:	8922703a 	and	r17,r17,r4
   19500:	002b883a 	mov	r21,zero
   19504:	103f2f1e 	bne	r2,zero,191c4 <__alt_data_end+0xfc0191c4>
   19508:	803e2f26 	beq	r16,zero,18dc8 <__alt_data_end+0xfc018dc8>
   1950c:	0027883a 	mov	r19,zero
   19510:	9cc00c04 	addi	r19,r19,48
   19514:	dcc019c5 	stb	r19,103(sp)
   19518:	dd002817 	ldw	r20,160(sp)
   1951c:	ddc019c4 	addi	r23,sp,103
   19520:	003e2c06 	br	18dd4 <__alt_data_end+0xfc018dd4>
   19524:	9cc03fcc 	andi	r19,r19,255
   19528:	b811883a 	mov	r8,r23
   1952c:	9802571e 	bne	r19,zero,19e8c <___vfiprintf_internal_r+0x14c4>
   19530:	18005726 	beq	r3,zero,19690 <___vfiprintf_internal_r+0xcc8>
   19534:	04c00044 	movi	r19,1
   19538:	d8c01005 	stb	r3,64(sp)
   1953c:	d8001d85 	stb	zero,118(sp)
   19540:	9829883a 	mov	r20,r19
   19544:	ddc01004 	addi	r23,sp,64
   19548:	003f0a06 	br	19174 <__alt_data_end+0xfc019174>
   1954c:	d9402017 	ldw	r5,128(sp)
   19550:	d9002117 	ldw	r4,132(sp)
   19554:	d9801a04 	addi	r6,sp,104
   19558:	da802a15 	stw	r10,168(sp)
   1955c:	00188b40 	call	188b4 <__sprint_r.part.0>
   19560:	da802a17 	ldw	r10,168(sp)
   19564:	1000501e 	bne	r2,zero,196a8 <___vfiprintf_internal_r+0xce0>
   19568:	d9801b17 	ldw	r6,108(sp)
   1956c:	d8801c17 	ldw	r2,112(sp)
   19570:	d811883a 	mov	r8,sp
   19574:	31000044 	addi	r4,r6,1
   19578:	003e3606 	br	18e54 <__alt_data_end+0xfc018e54>
   1957c:	d9001b17 	ldw	r4,108(sp)
   19580:	d8801c17 	ldw	r2,112(sp)
   19584:	21400044 	addi	r5,r4,1
   19588:	d9801d87 	ldb	r6,118(sp)
   1958c:	303e5226 	beq	r6,zero,18ed8 <__alt_data_end+0xfc018ed8>
   19590:	01800044 	movi	r6,1
   19594:	d9001d84 	addi	r4,sp,118
   19598:	1185883a 	add	r2,r2,r6
   1959c:	41000015 	stw	r4,0(r8)
   195a0:	41800115 	stw	r6,4(r8)
   195a4:	d8801c15 	stw	r2,112(sp)
   195a8:	d9401b15 	stw	r5,108(sp)
   195ac:	010001c4 	movi	r4,7
   195b0:	2140b00e 	bge	r4,r5,19874 <___vfiprintf_internal_r+0xeac>
   195b4:	1000f61e 	bne	r2,zero,19990 <___vfiprintf_internal_r+0xfc8>
   195b8:	3800b31e 	bne	r7,zero,19888 <___vfiprintf_internal_r+0xec0>
   195bc:	0009883a 	mov	r4,zero
   195c0:	300b883a 	mov	r5,r6
   195c4:	d811883a 	mov	r8,sp
   195c8:	01802004 	movi	r6,128
   195cc:	19be5226 	beq	r3,r6,18f18 <__alt_data_end+0xfc018f18>
   195d0:	8521c83a 	sub	r16,r16,r20
   195d4:	043e790e 	bge	zero,r16,18fbc <__alt_data_end+0xfc018fbc>
   195d8:	05400404 	movi	r21,16
   195dc:	ac01b00e 	bge	r21,r16,19ca0 <___vfiprintf_internal_r+0x12d8>
   195e0:	014000f4 	movhi	r5,3
   195e4:	2965cf04 	addi	r5,r5,-26820
   195e8:	d9402315 	stw	r5,140(sp)
   195ec:	070001c4 	movi	fp,7
   195f0:	00000506 	br	19608 <___vfiprintf_internal_r+0xc40>
   195f4:	21400084 	addi	r5,r4,2
   195f8:	42000204 	addi	r8,r8,8
   195fc:	1809883a 	mov	r4,r3
   19600:	843ffc04 	addi	r16,r16,-16
   19604:	ac000d0e 	bge	r21,r16,1963c <___vfiprintf_internal_r+0xc74>
   19608:	10800404 	addi	r2,r2,16
   1960c:	20c00044 	addi	r3,r4,1
   19610:	44800015 	stw	r18,0(r8)
   19614:	45400115 	stw	r21,4(r8)
   19618:	d8801c15 	stw	r2,112(sp)
   1961c:	d8c01b15 	stw	r3,108(sp)
   19620:	e0fff40e 	bge	fp,r3,195f4 <__alt_data_end+0xfc0195f4>
   19624:	1000101e 	bne	r2,zero,19668 <___vfiprintf_internal_r+0xca0>
   19628:	843ffc04 	addi	r16,r16,-16
   1962c:	01400044 	movi	r5,1
   19630:	0009883a 	mov	r4,zero
   19634:	d811883a 	mov	r8,sp
   19638:	ac3ff316 	blt	r21,r16,19608 <__alt_data_end+0xfc019608>
   1963c:	d8c02317 	ldw	r3,140(sp)
   19640:	1405883a 	add	r2,r2,r16
   19644:	44000115 	stw	r16,4(r8)
   19648:	40c00015 	stw	r3,0(r8)
   1964c:	d8801c15 	stw	r2,112(sp)
   19650:	d9401b15 	stw	r5,108(sp)
   19654:	00c001c4 	movi	r3,7
   19658:	19401916 	blt	r3,r5,196c0 <___vfiprintf_internal_r+0xcf8>
   1965c:	42000204 	addi	r8,r8,8
   19660:	29400044 	addi	r5,r5,1
   19664:	003e5506 	br	18fbc <__alt_data_end+0xfc018fbc>
   19668:	d9402017 	ldw	r5,128(sp)
   1966c:	d9002117 	ldw	r4,132(sp)
   19670:	d9801a04 	addi	r6,sp,104
   19674:	00188b40 	call	188b4 <__sprint_r.part.0>
   19678:	10000b1e 	bne	r2,zero,196a8 <___vfiprintf_internal_r+0xce0>
   1967c:	d9001b17 	ldw	r4,108(sp)
   19680:	d8801c17 	ldw	r2,112(sp)
   19684:	d811883a 	mov	r8,sp
   19688:	21400044 	addi	r5,r4,1
   1968c:	003fdc06 	br	19600 <__alt_data_end+0xfc019600>
   19690:	d8801c17 	ldw	r2,112(sp)
   19694:	10000426 	beq	r2,zero,196a8 <___vfiprintf_internal_r+0xce0>
   19698:	d9402017 	ldw	r5,128(sp)
   1969c:	d9002117 	ldw	r4,132(sp)
   196a0:	d9801a04 	addi	r6,sp,104
   196a4:	00188b40 	call	188b4 <__sprint_r.part.0>
   196a8:	d9402017 	ldw	r5,128(sp)
   196ac:	2880030b 	ldhu	r2,12(r5)
   196b0:	1080100c 	andi	r2,r2,64
   196b4:	10014d1e 	bne	r2,zero,19bec <___vfiprintf_internal_r+0x1224>
   196b8:	d8802417 	ldw	r2,144(sp)
   196bc:	003d9706 	br	18d1c <__alt_data_end+0xfc018d1c>
   196c0:	1000d21e 	bne	r2,zero,19a0c <___vfiprintf_internal_r+0x1044>
   196c4:	00c00044 	movi	r3,1
   196c8:	a005883a 	mov	r2,r20
   196cc:	ddc00015 	stw	r23,0(sp)
   196d0:	dd000115 	stw	r20,4(sp)
   196d4:	dd001c15 	stw	r20,112(sp)
   196d8:	d8c01b15 	stw	r3,108(sp)
   196dc:	d811883a 	mov	r8,sp
   196e0:	42000204 	addi	r8,r8,8
   196e4:	8c40010c 	andi	r17,r17,4
   196e8:	88004026 	beq	r17,zero,197ec <___vfiprintf_internal_r+0xe24>
   196ec:	d9002517 	ldw	r4,148(sp)
   196f0:	24e3c83a 	sub	r17,r4,r19
   196f4:	04403d0e 	bge	zero,r17,197ec <___vfiprintf_internal_r+0xe24>
   196f8:	04000404 	movi	r16,16
   196fc:	8441a90e 	bge	r16,r17,19da4 <___vfiprintf_internal_r+0x13dc>
   19700:	00c000f4 	movhi	r3,3
   19704:	18e5d304 	addi	r3,r3,-26804
   19708:	d9001b17 	ldw	r4,108(sp)
   1970c:	d8c02315 	stw	r3,140(sp)
   19710:	050001c4 	movi	r20,7
   19714:	dd402117 	ldw	r21,132(sp)
   19718:	ddc02017 	ldw	r23,128(sp)
   1971c:	00000506 	br	19734 <___vfiprintf_internal_r+0xd6c>
   19720:	21400084 	addi	r5,r4,2
   19724:	42000204 	addi	r8,r8,8
   19728:	1809883a 	mov	r4,r3
   1972c:	8c7ffc04 	addi	r17,r17,-16
   19730:	84400f0e 	bge	r16,r17,19770 <___vfiprintf_internal_r+0xda8>
   19734:	014000f4 	movhi	r5,3
   19738:	10800404 	addi	r2,r2,16
   1973c:	20c00044 	addi	r3,r4,1
   19740:	2965d304 	addi	r5,r5,-26804
   19744:	41400015 	stw	r5,0(r8)
   19748:	44000115 	stw	r16,4(r8)
   1974c:	d8801c15 	stw	r2,112(sp)
   19750:	d8c01b15 	stw	r3,108(sp)
   19754:	a0fff20e 	bge	r20,r3,19720 <__alt_data_end+0xfc019720>
   19758:	1000141e 	bne	r2,zero,197ac <___vfiprintf_internal_r+0xde4>
   1975c:	8c7ffc04 	addi	r17,r17,-16
   19760:	01400044 	movi	r5,1
   19764:	0009883a 	mov	r4,zero
   19768:	d811883a 	mov	r8,sp
   1976c:	847ff116 	blt	r16,r17,19734 <__alt_data_end+0xfc019734>
   19770:	d8c02317 	ldw	r3,140(sp)
   19774:	1445883a 	add	r2,r2,r17
   19778:	44400115 	stw	r17,4(r8)
   1977c:	40c00015 	stw	r3,0(r8)
   19780:	d8801c15 	stw	r2,112(sp)
   19784:	d9401b15 	stw	r5,108(sp)
   19788:	00c001c4 	movi	r3,7
   1978c:	1940170e 	bge	r3,r5,197ec <___vfiprintf_internal_r+0xe24>
   19790:	1000101e 	bne	r2,zero,197d4 <___vfiprintf_internal_r+0xe0c>
   19794:	d8802517 	ldw	r2,148(sp)
   19798:	14c11616 	blt	r2,r19,19bf4 <___vfiprintf_internal_r+0x122c>
   1979c:	d9002417 	ldw	r4,144(sp)
   197a0:	2089883a 	add	r4,r4,r2
   197a4:	d9002415 	stw	r4,144(sp)
   197a8:	003e1806 	br	1900c <__alt_data_end+0xfc01900c>
   197ac:	d9801a04 	addi	r6,sp,104
   197b0:	b80b883a 	mov	r5,r23
   197b4:	a809883a 	mov	r4,r21
   197b8:	00188b40 	call	188b4 <__sprint_r.part.0>
   197bc:	103fba1e 	bne	r2,zero,196a8 <__alt_data_end+0xfc0196a8>
   197c0:	d9001b17 	ldw	r4,108(sp)
   197c4:	d8801c17 	ldw	r2,112(sp)
   197c8:	d811883a 	mov	r8,sp
   197cc:	21400044 	addi	r5,r4,1
   197d0:	003fd606 	br	1972c <__alt_data_end+0xfc01972c>
   197d4:	d9402017 	ldw	r5,128(sp)
   197d8:	d9002117 	ldw	r4,132(sp)
   197dc:	d9801a04 	addi	r6,sp,104
   197e0:	00188b40 	call	188b4 <__sprint_r.part.0>
   197e4:	103fb01e 	bne	r2,zero,196a8 <__alt_data_end+0xfc0196a8>
   197e8:	d8801c17 	ldw	r2,112(sp)
   197ec:	d8c02517 	ldw	r3,148(sp)
   197f0:	1cc0010e 	bge	r3,r19,197f8 <___vfiprintf_internal_r+0xe30>
   197f4:	9807883a 	mov	r3,r19
   197f8:	d9002417 	ldw	r4,144(sp)
   197fc:	20c9883a 	add	r4,r4,r3
   19800:	d9002415 	stw	r4,144(sp)
   19804:	103e0126 	beq	r2,zero,1900c <__alt_data_end+0xfc01900c>
   19808:	d9402017 	ldw	r5,128(sp)
   1980c:	d9002117 	ldw	r4,132(sp)
   19810:	d9801a04 	addi	r6,sp,104
   19814:	00188b40 	call	188b4 <__sprint_r.part.0>
   19818:	103dfc26 	beq	r2,zero,1900c <__alt_data_end+0xfc01900c>
   1981c:	003fa206 	br	196a8 <__alt_data_end+0xfc0196a8>
   19820:	d9402017 	ldw	r5,128(sp)
   19824:	d9002117 	ldw	r4,132(sp)
   19828:	d9801a04 	addi	r6,sp,104
   1982c:	d9c02b15 	stw	r7,172(sp)
   19830:	00188b40 	call	188b4 <__sprint_r.part.0>
   19834:	d9c02b17 	ldw	r7,172(sp)
   19838:	103f9b1e 	bne	r2,zero,196a8 <__alt_data_end+0xfc0196a8>
   1983c:	d9001b17 	ldw	r4,108(sp)
   19840:	d8801c17 	ldw	r2,112(sp)
   19844:	d811883a 	mov	r8,sp
   19848:	21800044 	addi	r6,r4,1
   1984c:	003dbf06 	br	18f4c <__alt_data_end+0xfc018f4c>
   19850:	1000d81e 	bne	r2,zero,19bb4 <___vfiprintf_internal_r+0x11ec>
   19854:	d9001d87 	ldb	r4,118(sp)
   19858:	20000a26 	beq	r4,zero,19884 <___vfiprintf_internal_r+0xebc>
   1985c:	00800044 	movi	r2,1
   19860:	d9001d84 	addi	r4,sp,118
   19864:	100b883a 	mov	r5,r2
   19868:	d9000015 	stw	r4,0(sp)
   1986c:	d8800115 	stw	r2,4(sp)
   19870:	d811883a 	mov	r8,sp
   19874:	2809883a 	mov	r4,r5
   19878:	42000204 	addi	r8,r8,8
   1987c:	29400044 	addi	r5,r5,1
   19880:	003d9506 	br	18ed8 <__alt_data_end+0xfc018ed8>
   19884:	3800fd26 	beq	r7,zero,19c7c <___vfiprintf_internal_r+0x12b4>
   19888:	00800084 	movi	r2,2
   1988c:	d9001d04 	addi	r4,sp,116
   19890:	d9000015 	stw	r4,0(sp)
   19894:	d8800115 	stw	r2,4(sp)
   19898:	01400044 	movi	r5,1
   1989c:	d811883a 	mov	r8,sp
   198a0:	2809883a 	mov	r4,r5
   198a4:	42000204 	addi	r8,r8,8
   198a8:	29400044 	addi	r5,r5,1
   198ac:	003f4606 	br	195c8 <__alt_data_end+0xfc0195c8>
   198b0:	d8802517 	ldw	r2,148(sp)
   198b4:	14c0010e 	bge	r2,r19,198bc <___vfiprintf_internal_r+0xef4>
   198b8:	9805883a 	mov	r2,r19
   198bc:	d9402417 	ldw	r5,144(sp)
   198c0:	288b883a 	add	r5,r5,r2
   198c4:	d9402415 	stw	r5,144(sp)
   198c8:	003dd006 	br	1900c <__alt_data_end+0xfc01900c>
   198cc:	d8001d85 	stb	zero,118(sp)
   198d0:	80005d16 	blt	r16,zero,19a48 <___vfiprintf_internal_r+0x1080>
   198d4:	00ffdfc4 	movi	r3,-129
   198d8:	9d04b03a 	or	r2,r19,r20
   198dc:	88e2703a 	and	r17,r17,r3
   198e0:	103d3726 	beq	r2,zero,18dc0 <__alt_data_end+0xfc018dc0>
   198e4:	002b883a 	mov	r21,zero
   198e8:	d9002617 	ldw	r4,152(sp)
   198ec:	ddc01a04 	addi	r23,sp,104
   198f0:	988003cc 	andi	r2,r19,15
   198f4:	a006973a 	slli	r3,r20,28
   198f8:	2085883a 	add	r2,r4,r2
   198fc:	9826d13a 	srli	r19,r19,4
   19900:	10800003 	ldbu	r2,0(r2)
   19904:	a028d13a 	srli	r20,r20,4
   19908:	bdffffc4 	addi	r23,r23,-1
   1990c:	1ce6b03a 	or	r19,r3,r19
   19910:	b8800005 	stb	r2,0(r23)
   19914:	9d04b03a 	or	r2,r19,r20
   19918:	103ff51e 	bne	r2,zero,198f0 <__alt_data_end+0xfc0198f0>
   1991c:	d8801e17 	ldw	r2,120(sp)
   19920:	15e9c83a 	sub	r20,r2,r23
   19924:	003d2b06 	br	18dd4 <__alt_data_end+0xfc018dd4>
   19928:	d9402017 	ldw	r5,128(sp)
   1992c:	d9002117 	ldw	r4,132(sp)
   19930:	d9801a04 	addi	r6,sp,104
   19934:	00188b40 	call	188b4 <__sprint_r.part.0>
   19938:	103f5b1e 	bne	r2,zero,196a8 <__alt_data_end+0xfc0196a8>
   1993c:	d8801c17 	ldw	r2,112(sp)
   19940:	d811883a 	mov	r8,sp
   19944:	003f6706 	br	196e4 <__alt_data_end+0xfc0196e4>
   19948:	d9402017 	ldw	r5,128(sp)
   1994c:	d9002117 	ldw	r4,132(sp)
   19950:	d9801a04 	addi	r6,sp,104
   19954:	00188b40 	call	188b4 <__sprint_r.part.0>
   19958:	103f531e 	bne	r2,zero,196a8 <__alt_data_end+0xfc0196a8>
   1995c:	d811883a 	mov	r8,sp
   19960:	003cd906 	br	18cc8 <__alt_data_end+0xfc018cc8>
   19964:	10803fcc 	andi	r2,r2,255
   19968:	1080201c 	xori	r2,r2,128
   1996c:	10bfe004 	addi	r2,r2,-128
   19970:	00c00c04 	movi	r3,48
   19974:	10ffe926 	beq	r2,r3,1991c <__alt_data_end+0xfc01991c>
   19978:	b8ffffc5 	stb	r3,-1(r23)
   1997c:	d8c01e17 	ldw	r3,120(sp)
   19980:	b8bfffc4 	addi	r2,r23,-1
   19984:	102f883a 	mov	r23,r2
   19988:	18a9c83a 	sub	r20,r3,r2
   1998c:	003d1106 	br	18dd4 <__alt_data_end+0xfc018dd4>
   19990:	d9402017 	ldw	r5,128(sp)
   19994:	d9002117 	ldw	r4,132(sp)
   19998:	d9801a04 	addi	r6,sp,104
   1999c:	d8c02a15 	stw	r3,168(sp)
   199a0:	d9c02b15 	stw	r7,172(sp)
   199a4:	00188b40 	call	188b4 <__sprint_r.part.0>
   199a8:	d8c02a17 	ldw	r3,168(sp)
   199ac:	d9c02b17 	ldw	r7,172(sp)
   199b0:	103f3d1e 	bne	r2,zero,196a8 <__alt_data_end+0xfc0196a8>
   199b4:	d9001b17 	ldw	r4,108(sp)
   199b8:	d8801c17 	ldw	r2,112(sp)
   199bc:	d811883a 	mov	r8,sp
   199c0:	21400044 	addi	r5,r4,1
   199c4:	003d4406 	br	18ed8 <__alt_data_end+0xfc018ed8>
   199c8:	d9402017 	ldw	r5,128(sp)
   199cc:	d9002117 	ldw	r4,132(sp)
   199d0:	d9801a04 	addi	r6,sp,104
   199d4:	d8c02a15 	stw	r3,168(sp)
   199d8:	00188b40 	call	188b4 <__sprint_r.part.0>
   199dc:	d8c02a17 	ldw	r3,168(sp)
   199e0:	103f311e 	bne	r2,zero,196a8 <__alt_data_end+0xfc0196a8>
   199e4:	d9001b17 	ldw	r4,108(sp)
   199e8:	d8801c17 	ldw	r2,112(sp)
   199ec:	d811883a 	mov	r8,sp
   199f0:	21400044 	addi	r5,r4,1
   199f4:	003ef406 	br	195c8 <__alt_data_end+0xfc0195c8>
   199f8:	1000bd1e 	bne	r2,zero,19cf0 <___vfiprintf_internal_r+0x1328>
   199fc:	01400044 	movi	r5,1
   19a00:	0009883a 	mov	r4,zero
   19a04:	d811883a 	mov	r8,sp
   19a08:	003ef106 	br	195d0 <__alt_data_end+0xfc0195d0>
   19a0c:	d9402017 	ldw	r5,128(sp)
   19a10:	d9002117 	ldw	r4,132(sp)
   19a14:	d9801a04 	addi	r6,sp,104
   19a18:	00188b40 	call	188b4 <__sprint_r.part.0>
   19a1c:	103f221e 	bne	r2,zero,196a8 <__alt_data_end+0xfc0196a8>
   19a20:	d9401b17 	ldw	r5,108(sp)
   19a24:	d8801c17 	ldw	r2,112(sp)
   19a28:	d811883a 	mov	r8,sp
   19a2c:	29400044 	addi	r5,r5,1
   19a30:	003d6206 	br	18fbc <__alt_data_end+0xfc018fbc>
   19a34:	014000f4 	movhi	r5,3
   19a38:	29655f04 	addi	r5,r5,-27268
   19a3c:	d9402615 	stw	r5,152(sp)
   19a40:	d8c02215 	stw	r3,136(sp)
   19a44:	1023883a 	mov	r17,r2
   19a48:	9d04b03a 	or	r2,r19,r20
   19a4c:	103fa51e 	bne	r2,zero,198e4 <__alt_data_end+0xfc0198e4>
   19a50:	002b883a 	mov	r21,zero
   19a54:	00800084 	movi	r2,2
   19a58:	003e4a06 	br	19384 <__alt_data_end+0xfc019384>
   19a5c:	014000f4 	movhi	r5,3
   19a60:	29655f04 	addi	r5,r5,-27268
   19a64:	002b883a 	mov	r21,zero
   19a68:	d9402615 	stw	r5,152(sp)
   19a6c:	003f9e06 	br	198e8 <__alt_data_end+0xfc0198e8>
   19a70:	d9402217 	ldw	r5,136(sp)
   19a74:	d8001d85 	stb	zero,118(sp)
   19a78:	0029883a 	mov	r20,zero
   19a7c:	28800104 	addi	r2,r5,4
   19a80:	2cc00017 	ldw	r19,0(r5)
   19a84:	803e3a16 	blt	r16,zero,19370 <__alt_data_end+0xfc019370>
   19a88:	00ffdfc4 	movi	r3,-129
   19a8c:	d8802215 	stw	r2,136(sp)
   19a90:	88e2703a 	and	r17,r17,r3
   19a94:	002b883a 	mov	r21,zero
   19a98:	983e9b26 	beq	r19,zero,19508 <__alt_data_end+0xfc019508>
   19a9c:	00800244 	movi	r2,9
   19aa0:	14fdc936 	bltu	r2,r19,191c8 <__alt_data_end+0xfc0191c8>
   19aa4:	003e9a06 	br	19510 <__alt_data_end+0xfc019510>
   19aa8:	00800c04 	movi	r2,48
   19aac:	d8c01d45 	stb	r3,117(sp)
   19ab0:	d8801d05 	stb	r2,116(sp)
   19ab4:	d8001d85 	stb	zero,118(sp)
   19ab8:	88c00094 	ori	r3,r17,2
   19abc:	80009c16 	blt	r16,zero,19d30 <___vfiprintf_internal_r+0x1368>
   19ac0:	00bfdfc4 	movi	r2,-129
   19ac4:	88a2703a 	and	r17,r17,r2
   19ac8:	8c400094 	ori	r17,r17,2
   19acc:	002b883a 	mov	r21,zero
   19ad0:	003f8506 	br	198e8 <__alt_data_end+0xfc0198e8>
   19ad4:	b029883a 	mov	r20,r22
   19ad8:	003c0b06 	br	18b08 <__alt_data_end+0xfc018b08>
   19adc:	04e7c83a 	sub	r19,zero,r19
   19ae0:	05400b44 	movi	r21,45
   19ae4:	9804c03a 	cmpne	r2,r19,zero
   19ae8:	0529c83a 	sub	r20,zero,r20
   19aec:	dd401d85 	stb	r21,118(sp)
   19af0:	a0a9c83a 	sub	r20,r20,r2
   19af4:	80009716 	blt	r16,zero,19d54 <___vfiprintf_internal_r+0x138c>
   19af8:	00bfdfc4 	movi	r2,-129
   19afc:	88a2703a 	and	r17,r17,r2
   19b00:	003db006 	br	191c4 <__alt_data_end+0xfc0191c4>
   19b04:	b0c00007 	ldb	r3,0(r22)
   19b08:	003c0c06 	br	18b3c <__alt_data_end+0xfc018b3c>
   19b0c:	8880100c 	andi	r2,r17,64
   19b10:	d8001d85 	stb	zero,118(sp)
   19b14:	1000461e 	bne	r2,zero,19c30 <___vfiprintf_internal_r+0x1268>
   19b18:	d9002217 	ldw	r4,136(sp)
   19b1c:	0029883a 	mov	r20,zero
   19b20:	20800104 	addi	r2,r4,4
   19b24:	24c00017 	ldw	r19,0(r4)
   19b28:	803df80e 	bge	r16,zero,1930c <__alt_data_end+0xfc01930c>
   19b2c:	9d06b03a 	or	r3,r19,r20
   19b30:	d8802215 	stw	r2,136(sp)
   19b34:	183d5e1e 	bne	r3,zero,190b0 <__alt_data_end+0xfc0190b0>
   19b38:	002b883a 	mov	r21,zero
   19b3c:	0005883a 	mov	r2,zero
   19b40:	003e1006 	br	19384 <__alt_data_end+0xfc019384>
   19b44:	8880040c 	andi	r2,r17,16
   19b48:	1000321e 	bne	r2,zero,19c14 <___vfiprintf_internal_r+0x124c>
   19b4c:	8c40100c 	andi	r17,r17,64
   19b50:	88008d26 	beq	r17,zero,19d88 <___vfiprintf_internal_r+0x13c0>
   19b54:	d9402217 	ldw	r5,136(sp)
   19b58:	d8c02417 	ldw	r3,144(sp)
   19b5c:	28800017 	ldw	r2,0(r5)
   19b60:	29400104 	addi	r5,r5,4
   19b64:	d9402215 	stw	r5,136(sp)
   19b68:	10c0000d 	sth	r3,0(r2)
   19b6c:	003bca06 	br	18a98 <__alt_data_end+0xfc018a98>
   19b70:	8880100c 	andi	r2,r17,64
   19b74:	10003a26 	beq	r2,zero,19c60 <___vfiprintf_internal_r+0x1298>
   19b78:	d8802217 	ldw	r2,136(sp)
   19b7c:	14c0000f 	ldh	r19,0(r2)
   19b80:	10800104 	addi	r2,r2,4
   19b84:	d8802215 	stw	r2,136(sp)
   19b88:	9829d7fa 	srai	r20,r19,31
   19b8c:	a005883a 	mov	r2,r20
   19b90:	003d8506 	br	191a8 <__alt_data_end+0xfc0191a8>
   19b94:	8880100c 	andi	r2,r17,64
   19b98:	10002b26 	beq	r2,zero,19c48 <___vfiprintf_internal_r+0x1280>
   19b9c:	d8802217 	ldw	r2,136(sp)
   19ba0:	0029883a 	mov	r20,zero
   19ba4:	14c0000b 	ldhu	r19,0(r2)
   19ba8:	10800104 	addi	r2,r2,4
   19bac:	d8802215 	stw	r2,136(sp)
   19bb0:	003d5d06 	br	19128 <__alt_data_end+0xfc019128>
   19bb4:	d9402017 	ldw	r5,128(sp)
   19bb8:	d9002117 	ldw	r4,132(sp)
   19bbc:	d9801a04 	addi	r6,sp,104
   19bc0:	d8c02a15 	stw	r3,168(sp)
   19bc4:	d9c02b15 	stw	r7,172(sp)
   19bc8:	00188b40 	call	188b4 <__sprint_r.part.0>
   19bcc:	d8c02a17 	ldw	r3,168(sp)
   19bd0:	d9c02b17 	ldw	r7,172(sp)
   19bd4:	103eb41e 	bne	r2,zero,196a8 <__alt_data_end+0xfc0196a8>
   19bd8:	d9001b17 	ldw	r4,108(sp)
   19bdc:	d8801c17 	ldw	r2,112(sp)
   19be0:	d811883a 	mov	r8,sp
   19be4:	21400044 	addi	r5,r4,1
   19be8:	003e6706 	br	19588 <__alt_data_end+0xfc019588>
   19bec:	00bfffc4 	movi	r2,-1
   19bf0:	003c4a06 	br	18d1c <__alt_data_end+0xfc018d1c>
   19bf4:	9805883a 	mov	r2,r19
   19bf8:	003ee806 	br	1979c <__alt_data_end+0xfc01979c>
   19bfc:	d8c02217 	ldw	r3,136(sp)
   19c00:	0029883a 	mov	r20,zero
   19c04:	18800104 	addi	r2,r3,4
   19c08:	1cc0000b 	ldhu	r19,0(r3)
   19c0c:	803f9e0e 	bge	r16,zero,19a88 <__alt_data_end+0xfc019a88>
   19c10:	003dd706 	br	19370 <__alt_data_end+0xfc019370>
   19c14:	d8c02217 	ldw	r3,136(sp)
   19c18:	d9002417 	ldw	r4,144(sp)
   19c1c:	18800017 	ldw	r2,0(r3)
   19c20:	18c00104 	addi	r3,r3,4
   19c24:	d8c02215 	stw	r3,136(sp)
   19c28:	11000015 	stw	r4,0(r2)
   19c2c:	003b9a06 	br	18a98 <__alt_data_end+0xfc018a98>
   19c30:	d8c02217 	ldw	r3,136(sp)
   19c34:	0029883a 	mov	r20,zero
   19c38:	18800104 	addi	r2,r3,4
   19c3c:	1cc0000b 	ldhu	r19,0(r3)
   19c40:	803db20e 	bge	r16,zero,1930c <__alt_data_end+0xfc01930c>
   19c44:	003fb906 	br	19b2c <__alt_data_end+0xfc019b2c>
   19c48:	d9002217 	ldw	r4,136(sp)
   19c4c:	0029883a 	mov	r20,zero
   19c50:	24c00017 	ldw	r19,0(r4)
   19c54:	21000104 	addi	r4,r4,4
   19c58:	d9002215 	stw	r4,136(sp)
   19c5c:	003d3206 	br	19128 <__alt_data_end+0xfc019128>
   19c60:	d8c02217 	ldw	r3,136(sp)
   19c64:	1cc00017 	ldw	r19,0(r3)
   19c68:	18c00104 	addi	r3,r3,4
   19c6c:	d8c02215 	stw	r3,136(sp)
   19c70:	9829d7fa 	srai	r20,r19,31
   19c74:	a005883a 	mov	r2,r20
   19c78:	003d4b06 	br	191a8 <__alt_data_end+0xfc0191a8>
   19c7c:	0009883a 	mov	r4,zero
   19c80:	01400044 	movi	r5,1
   19c84:	d811883a 	mov	r8,sp
   19c88:	003e4f06 	br	195c8 <__alt_data_end+0xfc0195c8>
   19c8c:	d8c02215 	stw	r3,136(sp)
   19c90:	002b883a 	mov	r21,zero
   19c94:	003db806 	br	19378 <__alt_data_end+0xfc019378>
   19c98:	d811883a 	mov	r8,sp
   19c9c:	003e9606 	br	196f8 <__alt_data_end+0xfc0196f8>
   19ca0:	010000f4 	movhi	r4,3
   19ca4:	2125cf04 	addi	r4,r4,-26820
   19ca8:	d9002315 	stw	r4,140(sp)
   19cac:	003e6306 	br	1963c <__alt_data_end+0xfc01963c>
   19cb0:	b0c00043 	ldbu	r3,1(r22)
   19cb4:	8c400814 	ori	r17,r17,32
   19cb8:	b5800044 	addi	r22,r22,1
   19cbc:	18c03fcc 	andi	r3,r3,255
   19cc0:	18c0201c 	xori	r3,r3,128
   19cc4:	18ffe004 	addi	r3,r3,-128
   19cc8:	003b9c06 	br	18b3c <__alt_data_end+0xfc018b3c>
   19ccc:	b809883a 	mov	r4,r23
   19cd0:	da002a15 	stw	r8,168(sp)
   19cd4:	000e3480 	call	e348 <strlen>
   19cd8:	1029883a 	mov	r20,r2
   19cdc:	dd401d83 	ldbu	r21,118(sp)
   19ce0:	df002215 	stw	fp,136(sp)
   19ce4:	0021883a 	mov	r16,zero
   19ce8:	da002a17 	ldw	r8,168(sp)
   19cec:	003c3906 	br	18dd4 <__alt_data_end+0xfc018dd4>
   19cf0:	d9402017 	ldw	r5,128(sp)
   19cf4:	d9002117 	ldw	r4,132(sp)
   19cf8:	d9801a04 	addi	r6,sp,104
   19cfc:	00188b40 	call	188b4 <__sprint_r.part.0>
   19d00:	103e691e 	bne	r2,zero,196a8 <__alt_data_end+0xfc0196a8>
   19d04:	d9001b17 	ldw	r4,108(sp)
   19d08:	d8801c17 	ldw	r2,112(sp)
   19d0c:	d811883a 	mov	r8,sp
   19d10:	21400044 	addi	r5,r4,1
   19d14:	003e2e06 	br	195d0 <__alt_data_end+0xfc0195d0>
   19d18:	010000f4 	movhi	r4,3
   19d1c:	2125d304 	addi	r4,r4,-26804
   19d20:	d9002315 	stw	r4,140(sp)
   19d24:	d9001b17 	ldw	r4,108(sp)
   19d28:	21000044 	addi	r4,r4,1
   19d2c:	003c5e06 	br	18ea8 <__alt_data_end+0xfc018ea8>
   19d30:	002b883a 	mov	r21,zero
   19d34:	00800084 	movi	r2,2
   19d38:	10803fcc 	andi	r2,r2,255
   19d3c:	01000044 	movi	r4,1
   19d40:	11002b26 	beq	r2,r4,19df0 <___vfiprintf_internal_r+0x1428>
   19d44:	01000084 	movi	r4,2
   19d48:	11002b1e 	bne	r2,r4,19df8 <___vfiprintf_internal_r+0x1430>
   19d4c:	1823883a 	mov	r17,r3
   19d50:	003ee506 	br	198e8 <__alt_data_end+0xfc0198e8>
   19d54:	8807883a 	mov	r3,r17
   19d58:	00800044 	movi	r2,1
   19d5c:	003ff606 	br	19d38 <__alt_data_end+0xfc019d38>
   19d60:	00800184 	movi	r2,6
   19d64:	1400012e 	bgeu	r2,r16,19d6c <___vfiprintf_internal_r+0x13a4>
   19d68:	1021883a 	mov	r16,r2
   19d6c:	8029883a 	mov	r20,r16
   19d70:	8027883a 	mov	r19,r16
   19d74:	80002216 	blt	r16,zero,19e00 <___vfiprintf_internal_r+0x1438>
   19d78:	05c000f4 	movhi	r23,3
   19d7c:	df002215 	stw	fp,136(sp)
   19d80:	bde56404 	addi	r23,r23,-27248
   19d84:	003cfb06 	br	19174 <__alt_data_end+0xfc019174>
   19d88:	d9002217 	ldw	r4,136(sp)
   19d8c:	d9402417 	ldw	r5,144(sp)
   19d90:	20800017 	ldw	r2,0(r4)
   19d94:	21000104 	addi	r4,r4,4
   19d98:	d9002215 	stw	r4,136(sp)
   19d9c:	11400015 	stw	r5,0(r2)
   19da0:	003b3d06 	br	18a98 <__alt_data_end+0xfc018a98>
   19da4:	014000f4 	movhi	r5,3
   19da8:	2965d304 	addi	r5,r5,-26804
   19dac:	d9402315 	stw	r5,140(sp)
   19db0:	d9401b17 	ldw	r5,108(sp)
   19db4:	29400044 	addi	r5,r5,1
   19db8:	003e6d06 	br	19770 <__alt_data_end+0xfc019770>
   19dbc:	8029883a 	mov	r20,r16
   19dc0:	dd401d83 	ldbu	r21,118(sp)
   19dc4:	df002215 	stw	fp,136(sp)
   19dc8:	0021883a 	mov	r16,zero
   19dcc:	003c0106 	br	18dd4 <__alt_data_end+0xfc018dd4>
   19dd0:	00c000f4 	movhi	r3,3
   19dd4:	18e5cf04 	addi	r3,r3,-26820
   19dd8:	d8c02315 	stw	r3,140(sp)
   19ddc:	280d883a 	mov	r6,r5
   19de0:	003c6906 	br	18f88 <__alt_data_end+0xfc018f88>
   19de4:	802d883a 	mov	r22,r16
   19de8:	0021883a 	mov	r16,zero
   19dec:	003b5406 	br	18b40 <__alt_data_end+0xfc018b40>
   19df0:	1823883a 	mov	r17,r3
   19df4:	003cf306 	br	191c4 <__alt_data_end+0xfc0191c4>
   19df8:	1823883a 	mov	r17,r3
   19dfc:	003cad06 	br	190b4 <__alt_data_end+0xfc0190b4>
   19e00:	0027883a 	mov	r19,zero
   19e04:	003fdc06 	br	19d78 <__alt_data_end+0xfc019d78>
   19e08:	d9402217 	ldw	r5,136(sp)
   19e0c:	8005883a 	mov	r2,r16
   19e10:	b0c00043 	ldbu	r3,1(r22)
   19e14:	2c000017 	ldw	r16,0(r5)
   19e18:	29000104 	addi	r4,r5,4
   19e1c:	d9002215 	stw	r4,136(sp)
   19e20:	102d883a 	mov	r22,r2
   19e24:	803fa50e 	bge	r16,zero,19cbc <__alt_data_end+0xfc019cbc>
   19e28:	18c03fcc 	andi	r3,r3,255
   19e2c:	18c0201c 	xori	r3,r3,128
   19e30:	043fffc4 	movi	r16,-1
   19e34:	18ffe004 	addi	r3,r3,-128
   19e38:	003b4006 	br	18b3c <__alt_data_end+0xfc018b3c>
   19e3c:	d9402303 	ldbu	r5,140(sp)
   19e40:	d9401d85 	stb	r5,118(sp)
   19e44:	003cae06 	br	19100 <__alt_data_end+0xfc019100>
   19e48:	d8c02303 	ldbu	r3,140(sp)
   19e4c:	d8c01d85 	stb	r3,118(sp)
   19e50:	003d1406 	br	192a4 <__alt_data_end+0xfc0192a4>
   19e54:	d8c02303 	ldbu	r3,140(sp)
   19e58:	d8c01d85 	stb	r3,118(sp)
   19e5c:	003cca06 	br	19188 <__alt_data_end+0xfc019188>
   19e60:	8880004c 	andi	r2,r17,1
   19e64:	002b883a 	mov	r21,zero
   19e68:	10000526 	beq	r2,zero,19e80 <___vfiprintf_internal_r+0x14b8>
   19e6c:	00800c04 	movi	r2,48
   19e70:	d88019c5 	stb	r2,103(sp)
   19e74:	dd002817 	ldw	r20,160(sp)
   19e78:	ddc019c4 	addi	r23,sp,103
   19e7c:	003bd506 	br	18dd4 <__alt_data_end+0xfc018dd4>
   19e80:	0029883a 	mov	r20,zero
   19e84:	ddc01a04 	addi	r23,sp,104
   19e88:	003bd206 	br	18dd4 <__alt_data_end+0xfc018dd4>
   19e8c:	d9002303 	ldbu	r4,140(sp)
   19e90:	d9001d85 	stb	r4,118(sp)
   19e94:	003da606 	br	19530 <__alt_data_end+0xfc019530>
   19e98:	d8c02303 	ldbu	r3,140(sp)
   19e9c:	d8c01d85 	stb	r3,118(sp)
   19ea0:	003c7606 	br	1907c <__alt_data_end+0xfc01907c>
   19ea4:	d8c02303 	ldbu	r3,140(sp)
   19ea8:	d8c01d85 	stb	r3,118(sp)
   19eac:	003c6506 	br	19044 <__alt_data_end+0xfc019044>
   19eb0:	d9002303 	ldbu	r4,140(sp)
   19eb4:	d9001d85 	stb	r4,118(sp)
   19eb8:	003d3d06 	br	193b0 <__alt_data_end+0xfc0193b0>
   19ebc:	d8c02303 	ldbu	r3,140(sp)
   19ec0:	d8c01d85 	stb	r3,118(sp)
   19ec4:	003d1d06 	br	1933c <__alt_data_end+0xfc01933c>
   19ec8:	d8c02303 	ldbu	r3,140(sp)
   19ecc:	d8c01d85 	stb	r3,118(sp)
   19ed0:	003d0306 	br	192e0 <__alt_data_end+0xfc0192e0>

00019ed4 <__vfiprintf_internal>:
   19ed4:	008000f4 	movhi	r2,3
   19ed8:	10b29504 	addi	r2,r2,-13740
   19edc:	300f883a 	mov	r7,r6
   19ee0:	280d883a 	mov	r6,r5
   19ee4:	200b883a 	mov	r5,r4
   19ee8:	11000017 	ldw	r4,0(r2)
   19eec:	00189c81 	jmpi	189c8 <___vfiprintf_internal_r>

00019ef0 <__sbprintf>:
   19ef0:	2880030b 	ldhu	r2,12(r5)
   19ef4:	2ac01917 	ldw	r11,100(r5)
   19ef8:	2a80038b 	ldhu	r10,14(r5)
   19efc:	2a400717 	ldw	r9,28(r5)
   19f00:	2a000917 	ldw	r8,36(r5)
   19f04:	defee204 	addi	sp,sp,-1144
   19f08:	00c10004 	movi	r3,1024
   19f0c:	dc011a15 	stw	r16,1128(sp)
   19f10:	10bfff4c 	andi	r2,r2,65533
   19f14:	2821883a 	mov	r16,r5
   19f18:	d8cb883a 	add	r5,sp,r3
   19f1c:	dc811c15 	stw	r18,1136(sp)
   19f20:	dc411b15 	stw	r17,1132(sp)
   19f24:	dfc11d15 	stw	ra,1140(sp)
   19f28:	2025883a 	mov	r18,r4
   19f2c:	d881030d 	sth	r2,1036(sp)
   19f30:	dac11915 	stw	r11,1124(sp)
   19f34:	da81038d 	sth	r10,1038(sp)
   19f38:	da410715 	stw	r9,1052(sp)
   19f3c:	da010915 	stw	r8,1060(sp)
   19f40:	dec10015 	stw	sp,1024(sp)
   19f44:	dec10415 	stw	sp,1040(sp)
   19f48:	d8c10215 	stw	r3,1032(sp)
   19f4c:	d8c10515 	stw	r3,1044(sp)
   19f50:	d8010615 	stw	zero,1048(sp)
   19f54:	00189c80 	call	189c8 <___vfiprintf_internal_r>
   19f58:	1023883a 	mov	r17,r2
   19f5c:	10000416 	blt	r2,zero,19f70 <__sbprintf+0x80>
   19f60:	d9410004 	addi	r5,sp,1024
   19f64:	9009883a 	mov	r4,r18
   19f68:	00146780 	call	14678 <_fflush_r>
   19f6c:	10000d1e 	bne	r2,zero,19fa4 <__sbprintf+0xb4>
   19f70:	d881030b 	ldhu	r2,1036(sp)
   19f74:	1080100c 	andi	r2,r2,64
   19f78:	10000326 	beq	r2,zero,19f88 <__sbprintf+0x98>
   19f7c:	8080030b 	ldhu	r2,12(r16)
   19f80:	10801014 	ori	r2,r2,64
   19f84:	8080030d 	sth	r2,12(r16)
   19f88:	8805883a 	mov	r2,r17
   19f8c:	dfc11d17 	ldw	ra,1140(sp)
   19f90:	dc811c17 	ldw	r18,1136(sp)
   19f94:	dc411b17 	ldw	r17,1132(sp)
   19f98:	dc011a17 	ldw	r16,1128(sp)
   19f9c:	dec11e04 	addi	sp,sp,1144
   19fa0:	f800283a 	ret
   19fa4:	047fffc4 	movi	r17,-1
   19fa8:	003ff106 	br	19f70 <__alt_data_end+0xfc019f70>

00019fac <__swbuf_r>:
   19fac:	defffb04 	addi	sp,sp,-20
   19fb0:	dcc00315 	stw	r19,12(sp)
   19fb4:	dc800215 	stw	r18,8(sp)
   19fb8:	dc000015 	stw	r16,0(sp)
   19fbc:	dfc00415 	stw	ra,16(sp)
   19fc0:	dc400115 	stw	r17,4(sp)
   19fc4:	2025883a 	mov	r18,r4
   19fc8:	2827883a 	mov	r19,r5
   19fcc:	3021883a 	mov	r16,r6
   19fd0:	20000226 	beq	r4,zero,19fdc <__swbuf_r+0x30>
   19fd4:	20800e17 	ldw	r2,56(r4)
   19fd8:	10004226 	beq	r2,zero,1a0e4 <__swbuf_r+0x138>
   19fdc:	80800617 	ldw	r2,24(r16)
   19fe0:	8100030b 	ldhu	r4,12(r16)
   19fe4:	80800215 	stw	r2,8(r16)
   19fe8:	2080020c 	andi	r2,r4,8
   19fec:	10003626 	beq	r2,zero,1a0c8 <__swbuf_r+0x11c>
   19ff0:	80c00417 	ldw	r3,16(r16)
   19ff4:	18003426 	beq	r3,zero,1a0c8 <__swbuf_r+0x11c>
   19ff8:	2088000c 	andi	r2,r4,8192
   19ffc:	9c403fcc 	andi	r17,r19,255
   1a000:	10001a26 	beq	r2,zero,1a06c <__swbuf_r+0xc0>
   1a004:	80800017 	ldw	r2,0(r16)
   1a008:	81000517 	ldw	r4,20(r16)
   1a00c:	10c7c83a 	sub	r3,r2,r3
   1a010:	1900200e 	bge	r3,r4,1a094 <__swbuf_r+0xe8>
   1a014:	18c00044 	addi	r3,r3,1
   1a018:	81000217 	ldw	r4,8(r16)
   1a01c:	11400044 	addi	r5,r2,1
   1a020:	81400015 	stw	r5,0(r16)
   1a024:	213fffc4 	addi	r4,r4,-1
   1a028:	81000215 	stw	r4,8(r16)
   1a02c:	14c00005 	stb	r19,0(r2)
   1a030:	80800517 	ldw	r2,20(r16)
   1a034:	10c01e26 	beq	r2,r3,1a0b0 <__swbuf_r+0x104>
   1a038:	8080030b 	ldhu	r2,12(r16)
   1a03c:	1080004c 	andi	r2,r2,1
   1a040:	10000226 	beq	r2,zero,1a04c <__swbuf_r+0xa0>
   1a044:	00800284 	movi	r2,10
   1a048:	88801926 	beq	r17,r2,1a0b0 <__swbuf_r+0x104>
   1a04c:	8805883a 	mov	r2,r17
   1a050:	dfc00417 	ldw	ra,16(sp)
   1a054:	dcc00317 	ldw	r19,12(sp)
   1a058:	dc800217 	ldw	r18,8(sp)
   1a05c:	dc400117 	ldw	r17,4(sp)
   1a060:	dc000017 	ldw	r16,0(sp)
   1a064:	dec00504 	addi	sp,sp,20
   1a068:	f800283a 	ret
   1a06c:	81401917 	ldw	r5,100(r16)
   1a070:	00b7ffc4 	movi	r2,-8193
   1a074:	21080014 	ori	r4,r4,8192
   1a078:	2884703a 	and	r2,r5,r2
   1a07c:	80801915 	stw	r2,100(r16)
   1a080:	80800017 	ldw	r2,0(r16)
   1a084:	8100030d 	sth	r4,12(r16)
   1a088:	81000517 	ldw	r4,20(r16)
   1a08c:	10c7c83a 	sub	r3,r2,r3
   1a090:	193fe016 	blt	r3,r4,1a014 <__alt_data_end+0xfc01a014>
   1a094:	800b883a 	mov	r5,r16
   1a098:	9009883a 	mov	r4,r18
   1a09c:	00146780 	call	14678 <_fflush_r>
   1a0a0:	1000071e 	bne	r2,zero,1a0c0 <__swbuf_r+0x114>
   1a0a4:	80800017 	ldw	r2,0(r16)
   1a0a8:	00c00044 	movi	r3,1
   1a0ac:	003fda06 	br	1a018 <__alt_data_end+0xfc01a018>
   1a0b0:	800b883a 	mov	r5,r16
   1a0b4:	9009883a 	mov	r4,r18
   1a0b8:	00146780 	call	14678 <_fflush_r>
   1a0bc:	103fe326 	beq	r2,zero,1a04c <__alt_data_end+0xfc01a04c>
   1a0c0:	00bfffc4 	movi	r2,-1
   1a0c4:	003fe206 	br	1a050 <__alt_data_end+0xfc01a050>
   1a0c8:	800b883a 	mov	r5,r16
   1a0cc:	9009883a 	mov	r4,r18
   1a0d0:	0012a580 	call	12a58 <__swsetup_r>
   1a0d4:	103ffa1e 	bne	r2,zero,1a0c0 <__alt_data_end+0xfc01a0c0>
   1a0d8:	8100030b 	ldhu	r4,12(r16)
   1a0dc:	80c00417 	ldw	r3,16(r16)
   1a0e0:	003fc506 	br	19ff8 <__alt_data_end+0xfc019ff8>
   1a0e4:	0014a640 	call	14a64 <__sinit>
   1a0e8:	003fbc06 	br	19fdc <__alt_data_end+0xfc019fdc>

0001a0ec <__swbuf>:
   1a0ec:	008000f4 	movhi	r2,3
   1a0f0:	10b29504 	addi	r2,r2,-13740
   1a0f4:	280d883a 	mov	r6,r5
   1a0f8:	200b883a 	mov	r5,r4
   1a0fc:	11000017 	ldw	r4,0(r2)
   1a100:	0019fac1 	jmpi	19fac <__swbuf_r>

0001a104 <_write_r>:
   1a104:	defffd04 	addi	sp,sp,-12
   1a108:	2805883a 	mov	r2,r5
   1a10c:	dc000015 	stw	r16,0(sp)
   1a110:	040000f4 	movhi	r16,3
   1a114:	dc400115 	stw	r17,4(sp)
   1a118:	300b883a 	mov	r5,r6
   1a11c:	843f2704 	addi	r16,r16,-868
   1a120:	2023883a 	mov	r17,r4
   1a124:	380d883a 	mov	r6,r7
   1a128:	1009883a 	mov	r4,r2
   1a12c:	dfc00215 	stw	ra,8(sp)
   1a130:	80000015 	stw	zero,0(r16)
   1a134:	001e8940 	call	1e894 <write>
   1a138:	00ffffc4 	movi	r3,-1
   1a13c:	10c00526 	beq	r2,r3,1a154 <_write_r+0x50>
   1a140:	dfc00217 	ldw	ra,8(sp)
   1a144:	dc400117 	ldw	r17,4(sp)
   1a148:	dc000017 	ldw	r16,0(sp)
   1a14c:	dec00304 	addi	sp,sp,12
   1a150:	f800283a 	ret
   1a154:	80c00017 	ldw	r3,0(r16)
   1a158:	183ff926 	beq	r3,zero,1a140 <__alt_data_end+0xfc01a140>
   1a15c:	88c00015 	stw	r3,0(r17)
   1a160:	003ff706 	br	1a140 <__alt_data_end+0xfc01a140>

0001a164 <_close_r>:
   1a164:	defffd04 	addi	sp,sp,-12
   1a168:	dc000015 	stw	r16,0(sp)
   1a16c:	040000f4 	movhi	r16,3
   1a170:	dc400115 	stw	r17,4(sp)
   1a174:	843f2704 	addi	r16,r16,-868
   1a178:	2023883a 	mov	r17,r4
   1a17c:	2809883a 	mov	r4,r5
   1a180:	dfc00215 	stw	ra,8(sp)
   1a184:	80000015 	stw	zero,0(r16)
   1a188:	001dd980 	call	1dd98 <close>
   1a18c:	00ffffc4 	movi	r3,-1
   1a190:	10c00526 	beq	r2,r3,1a1a8 <_close_r+0x44>
   1a194:	dfc00217 	ldw	ra,8(sp)
   1a198:	dc400117 	ldw	r17,4(sp)
   1a19c:	dc000017 	ldw	r16,0(sp)
   1a1a0:	dec00304 	addi	sp,sp,12
   1a1a4:	f800283a 	ret
   1a1a8:	80c00017 	ldw	r3,0(r16)
   1a1ac:	183ff926 	beq	r3,zero,1a194 <__alt_data_end+0xfc01a194>
   1a1b0:	88c00015 	stw	r3,0(r17)
   1a1b4:	003ff706 	br	1a194 <__alt_data_end+0xfc01a194>

0001a1b8 <_calloc_r>:
   1a1b8:	defffe04 	addi	sp,sp,-8
   1a1bc:	2805883a 	mov	r2,r5
   1a1c0:	dc000015 	stw	r16,0(sp)
   1a1c4:	300b883a 	mov	r5,r6
   1a1c8:	2021883a 	mov	r16,r4
   1a1cc:	1009883a 	mov	r4,r2
   1a1d0:	dfc00115 	stw	ra,4(sp)
   1a1d4:	000cca00 	call	cca0 <__mulsi3>
   1a1d8:	100b883a 	mov	r5,r2
   1a1dc:	8009883a 	mov	r4,r16
   1a1e0:	000d2740 	call	d274 <_malloc_r>
   1a1e4:	10002926 	beq	r2,zero,1a28c <_calloc_r+0xd4>
   1a1e8:	11bfff17 	ldw	r6,-4(r2)
   1a1ec:	1021883a 	mov	r16,r2
   1a1f0:	00bfff04 	movi	r2,-4
   1a1f4:	308c703a 	and	r6,r6,r2
   1a1f8:	00c00904 	movi	r3,36
   1a1fc:	308d883a 	add	r6,r6,r2
   1a200:	19801636 	bltu	r3,r6,1a25c <_calloc_r+0xa4>
   1a204:	008004c4 	movi	r2,19
   1a208:	11800b2e 	bgeu	r2,r6,1a238 <_calloc_r+0x80>
   1a20c:	80000015 	stw	zero,0(r16)
   1a210:	80000115 	stw	zero,4(r16)
   1a214:	008006c4 	movi	r2,27
   1a218:	11801a2e 	bgeu	r2,r6,1a284 <_calloc_r+0xcc>
   1a21c:	80000215 	stw	zero,8(r16)
   1a220:	80000315 	stw	zero,12(r16)
   1a224:	30c0151e 	bne	r6,r3,1a27c <_calloc_r+0xc4>
   1a228:	80000415 	stw	zero,16(r16)
   1a22c:	80800604 	addi	r2,r16,24
   1a230:	80000515 	stw	zero,20(r16)
   1a234:	00000106 	br	1a23c <_calloc_r+0x84>
   1a238:	8005883a 	mov	r2,r16
   1a23c:	10000015 	stw	zero,0(r2)
   1a240:	10000115 	stw	zero,4(r2)
   1a244:	10000215 	stw	zero,8(r2)
   1a248:	8005883a 	mov	r2,r16
   1a24c:	dfc00117 	ldw	ra,4(sp)
   1a250:	dc000017 	ldw	r16,0(sp)
   1a254:	dec00204 	addi	sp,sp,8
   1a258:	f800283a 	ret
   1a25c:	000b883a 	mov	r5,zero
   1a260:	8009883a 	mov	r4,r16
   1a264:	000dbc80 	call	dbc8 <memset>
   1a268:	8005883a 	mov	r2,r16
   1a26c:	dfc00117 	ldw	ra,4(sp)
   1a270:	dc000017 	ldw	r16,0(sp)
   1a274:	dec00204 	addi	sp,sp,8
   1a278:	f800283a 	ret
   1a27c:	80800404 	addi	r2,r16,16
   1a280:	003fee06 	br	1a23c <__alt_data_end+0xfc01a23c>
   1a284:	80800204 	addi	r2,r16,8
   1a288:	003fec06 	br	1a23c <__alt_data_end+0xfc01a23c>
   1a28c:	0005883a 	mov	r2,zero
   1a290:	003fee06 	br	1a24c <__alt_data_end+0xfc01a24c>

0001a294 <_fclose_r>:
   1a294:	28003926 	beq	r5,zero,1a37c <_fclose_r+0xe8>
   1a298:	defffc04 	addi	sp,sp,-16
   1a29c:	dc400115 	stw	r17,4(sp)
   1a2a0:	dc000015 	stw	r16,0(sp)
   1a2a4:	dfc00315 	stw	ra,12(sp)
   1a2a8:	dc800215 	stw	r18,8(sp)
   1a2ac:	2023883a 	mov	r17,r4
   1a2b0:	2821883a 	mov	r16,r5
   1a2b4:	20000226 	beq	r4,zero,1a2c0 <_fclose_r+0x2c>
   1a2b8:	20800e17 	ldw	r2,56(r4)
   1a2bc:	10002726 	beq	r2,zero,1a35c <_fclose_r+0xc8>
   1a2c0:	8080030f 	ldh	r2,12(r16)
   1a2c4:	1000071e 	bne	r2,zero,1a2e4 <_fclose_r+0x50>
   1a2c8:	0005883a 	mov	r2,zero
   1a2cc:	dfc00317 	ldw	ra,12(sp)
   1a2d0:	dc800217 	ldw	r18,8(sp)
   1a2d4:	dc400117 	ldw	r17,4(sp)
   1a2d8:	dc000017 	ldw	r16,0(sp)
   1a2dc:	dec00404 	addi	sp,sp,16
   1a2e0:	f800283a 	ret
   1a2e4:	800b883a 	mov	r5,r16
   1a2e8:	8809883a 	mov	r4,r17
   1a2ec:	001445c0 	call	1445c <__sflush_r>
   1a2f0:	1025883a 	mov	r18,r2
   1a2f4:	80800b17 	ldw	r2,44(r16)
   1a2f8:	10000426 	beq	r2,zero,1a30c <_fclose_r+0x78>
   1a2fc:	81400717 	ldw	r5,28(r16)
   1a300:	8809883a 	mov	r4,r17
   1a304:	103ee83a 	callr	r2
   1a308:	10001616 	blt	r2,zero,1a364 <_fclose_r+0xd0>
   1a30c:	8080030b 	ldhu	r2,12(r16)
   1a310:	1080200c 	andi	r2,r2,128
   1a314:	1000151e 	bne	r2,zero,1a36c <_fclose_r+0xd8>
   1a318:	81400c17 	ldw	r5,48(r16)
   1a31c:	28000526 	beq	r5,zero,1a334 <_fclose_r+0xa0>
   1a320:	80801004 	addi	r2,r16,64
   1a324:	28800226 	beq	r5,r2,1a330 <_fclose_r+0x9c>
   1a328:	8809883a 	mov	r4,r17
   1a32c:	0014bd80 	call	14bd8 <_free_r>
   1a330:	80000c15 	stw	zero,48(r16)
   1a334:	81401117 	ldw	r5,68(r16)
   1a338:	28000326 	beq	r5,zero,1a348 <_fclose_r+0xb4>
   1a33c:	8809883a 	mov	r4,r17
   1a340:	0014bd80 	call	14bd8 <_free_r>
   1a344:	80001115 	stw	zero,68(r16)
   1a348:	0014a740 	call	14a74 <__sfp_lock_acquire>
   1a34c:	8000030d 	sth	zero,12(r16)
   1a350:	0014a780 	call	14a78 <__sfp_lock_release>
   1a354:	9005883a 	mov	r2,r18
   1a358:	003fdc06 	br	1a2cc <__alt_data_end+0xfc01a2cc>
   1a35c:	0014a640 	call	14a64 <__sinit>
   1a360:	003fd706 	br	1a2c0 <__alt_data_end+0xfc01a2c0>
   1a364:	04bfffc4 	movi	r18,-1
   1a368:	003fe806 	br	1a30c <__alt_data_end+0xfc01a30c>
   1a36c:	81400417 	ldw	r5,16(r16)
   1a370:	8809883a 	mov	r4,r17
   1a374:	0014bd80 	call	14bd8 <_free_r>
   1a378:	003fe706 	br	1a318 <__alt_data_end+0xfc01a318>
   1a37c:	0005883a 	mov	r2,zero
   1a380:	f800283a 	ret

0001a384 <fclose>:
   1a384:	008000f4 	movhi	r2,3
   1a388:	10b29504 	addi	r2,r2,-13740
   1a38c:	200b883a 	mov	r5,r4
   1a390:	11000017 	ldw	r4,0(r2)
   1a394:	001a2941 	jmpi	1a294 <_fclose_r>

0001a398 <__fputwc>:
   1a398:	defff804 	addi	sp,sp,-32
   1a39c:	dcc00415 	stw	r19,16(sp)
   1a3a0:	dc800315 	stw	r18,12(sp)
   1a3a4:	dc000115 	stw	r16,4(sp)
   1a3a8:	dfc00715 	stw	ra,28(sp)
   1a3ac:	dd400615 	stw	r21,24(sp)
   1a3b0:	dd000515 	stw	r20,20(sp)
   1a3b4:	dc400215 	stw	r17,8(sp)
   1a3b8:	2027883a 	mov	r19,r4
   1a3bc:	2825883a 	mov	r18,r5
   1a3c0:	3021883a 	mov	r16,r6
   1a3c4:	00155c00 	call	155c0 <__locale_mb_cur_max>
   1a3c8:	00c00044 	movi	r3,1
   1a3cc:	10c03e26 	beq	r2,r3,1a4c8 <__fputwc+0x130>
   1a3d0:	81c01704 	addi	r7,r16,92
   1a3d4:	900d883a 	mov	r6,r18
   1a3d8:	d80b883a 	mov	r5,sp
   1a3dc:	9809883a 	mov	r4,r19
   1a3e0:	001a7100 	call	1a710 <_wcrtomb_r>
   1a3e4:	1029883a 	mov	r20,r2
   1a3e8:	00bfffc4 	movi	r2,-1
   1a3ec:	a0802026 	beq	r20,r2,1a470 <__fputwc+0xd8>
   1a3f0:	d9400003 	ldbu	r5,0(sp)
   1a3f4:	a0001c26 	beq	r20,zero,1a468 <__fputwc+0xd0>
   1a3f8:	0023883a 	mov	r17,zero
   1a3fc:	05400284 	movi	r21,10
   1a400:	00000906 	br	1a428 <__fputwc+0x90>
   1a404:	80800017 	ldw	r2,0(r16)
   1a408:	11400005 	stb	r5,0(r2)
   1a40c:	80c00017 	ldw	r3,0(r16)
   1a410:	18c00044 	addi	r3,r3,1
   1a414:	80c00015 	stw	r3,0(r16)
   1a418:	8c400044 	addi	r17,r17,1
   1a41c:	dc45883a 	add	r2,sp,r17
   1a420:	8d00112e 	bgeu	r17,r20,1a468 <__fputwc+0xd0>
   1a424:	11400003 	ldbu	r5,0(r2)
   1a428:	80c00217 	ldw	r3,8(r16)
   1a42c:	18ffffc4 	addi	r3,r3,-1
   1a430:	80c00215 	stw	r3,8(r16)
   1a434:	183ff30e 	bge	r3,zero,1a404 <__alt_data_end+0xfc01a404>
   1a438:	80800617 	ldw	r2,24(r16)
   1a43c:	18801916 	blt	r3,r2,1a4a4 <__fputwc+0x10c>
   1a440:	80800017 	ldw	r2,0(r16)
   1a444:	11400005 	stb	r5,0(r2)
   1a448:	80800017 	ldw	r2,0(r16)
   1a44c:	10c00003 	ldbu	r3,0(r2)
   1a450:	10800044 	addi	r2,r2,1
   1a454:	1d402326 	beq	r3,r21,1a4e4 <__fputwc+0x14c>
   1a458:	80800015 	stw	r2,0(r16)
   1a45c:	8c400044 	addi	r17,r17,1
   1a460:	dc45883a 	add	r2,sp,r17
   1a464:	8d3fef36 	bltu	r17,r20,1a424 <__alt_data_end+0xfc01a424>
   1a468:	9005883a 	mov	r2,r18
   1a46c:	00000406 	br	1a480 <__fputwc+0xe8>
   1a470:	80c0030b 	ldhu	r3,12(r16)
   1a474:	a005883a 	mov	r2,r20
   1a478:	18c01014 	ori	r3,r3,64
   1a47c:	80c0030d 	sth	r3,12(r16)
   1a480:	dfc00717 	ldw	ra,28(sp)
   1a484:	dd400617 	ldw	r21,24(sp)
   1a488:	dd000517 	ldw	r20,20(sp)
   1a48c:	dcc00417 	ldw	r19,16(sp)
   1a490:	dc800317 	ldw	r18,12(sp)
   1a494:	dc400217 	ldw	r17,8(sp)
   1a498:	dc000117 	ldw	r16,4(sp)
   1a49c:	dec00804 	addi	sp,sp,32
   1a4a0:	f800283a 	ret
   1a4a4:	800d883a 	mov	r6,r16
   1a4a8:	29403fcc 	andi	r5,r5,255
   1a4ac:	9809883a 	mov	r4,r19
   1a4b0:	0019fac0 	call	19fac <__swbuf_r>
   1a4b4:	10bfffe0 	cmpeqi	r2,r2,-1
   1a4b8:	10803fcc 	andi	r2,r2,255
   1a4bc:	103fd626 	beq	r2,zero,1a418 <__alt_data_end+0xfc01a418>
   1a4c0:	00bfffc4 	movi	r2,-1
   1a4c4:	003fee06 	br	1a480 <__alt_data_end+0xfc01a480>
   1a4c8:	90ffffc4 	addi	r3,r18,-1
   1a4cc:	01003f84 	movi	r4,254
   1a4d0:	20ffbf36 	bltu	r4,r3,1a3d0 <__alt_data_end+0xfc01a3d0>
   1a4d4:	900b883a 	mov	r5,r18
   1a4d8:	dc800005 	stb	r18,0(sp)
   1a4dc:	1029883a 	mov	r20,r2
   1a4e0:	003fc506 	br	1a3f8 <__alt_data_end+0xfc01a3f8>
   1a4e4:	800d883a 	mov	r6,r16
   1a4e8:	a80b883a 	mov	r5,r21
   1a4ec:	9809883a 	mov	r4,r19
   1a4f0:	0019fac0 	call	19fac <__swbuf_r>
   1a4f4:	10bfffe0 	cmpeqi	r2,r2,-1
   1a4f8:	003fef06 	br	1a4b8 <__alt_data_end+0xfc01a4b8>

0001a4fc <_fputwc_r>:
   1a4fc:	3080030b 	ldhu	r2,12(r6)
   1a500:	10c8000c 	andi	r3,r2,8192
   1a504:	1800051e 	bne	r3,zero,1a51c <_fputwc_r+0x20>
   1a508:	30c01917 	ldw	r3,100(r6)
   1a50c:	10880014 	ori	r2,r2,8192
   1a510:	3080030d 	sth	r2,12(r6)
   1a514:	18880014 	ori	r2,r3,8192
   1a518:	30801915 	stw	r2,100(r6)
   1a51c:	001a3981 	jmpi	1a398 <__fputwc>

0001a520 <fputwc>:
   1a520:	008000f4 	movhi	r2,3
   1a524:	defffc04 	addi	sp,sp,-16
   1a528:	10b29504 	addi	r2,r2,-13740
   1a52c:	dc000115 	stw	r16,4(sp)
   1a530:	14000017 	ldw	r16,0(r2)
   1a534:	dc400215 	stw	r17,8(sp)
   1a538:	dfc00315 	stw	ra,12(sp)
   1a53c:	2023883a 	mov	r17,r4
   1a540:	80000226 	beq	r16,zero,1a54c <fputwc+0x2c>
   1a544:	80800e17 	ldw	r2,56(r16)
   1a548:	10001026 	beq	r2,zero,1a58c <fputwc+0x6c>
   1a54c:	2880030b 	ldhu	r2,12(r5)
   1a550:	10c8000c 	andi	r3,r2,8192
   1a554:	1800051e 	bne	r3,zero,1a56c <fputwc+0x4c>
   1a558:	28c01917 	ldw	r3,100(r5)
   1a55c:	10880014 	ori	r2,r2,8192
   1a560:	2880030d 	sth	r2,12(r5)
   1a564:	18880014 	ori	r2,r3,8192
   1a568:	28801915 	stw	r2,100(r5)
   1a56c:	280d883a 	mov	r6,r5
   1a570:	8009883a 	mov	r4,r16
   1a574:	880b883a 	mov	r5,r17
   1a578:	dfc00317 	ldw	ra,12(sp)
   1a57c:	dc400217 	ldw	r17,8(sp)
   1a580:	dc000117 	ldw	r16,4(sp)
   1a584:	dec00404 	addi	sp,sp,16
   1a588:	001a3981 	jmpi	1a398 <__fputwc>
   1a58c:	8009883a 	mov	r4,r16
   1a590:	d9400015 	stw	r5,0(sp)
   1a594:	0014a640 	call	14a64 <__sinit>
   1a598:	d9400017 	ldw	r5,0(sp)
   1a59c:	003feb06 	br	1a54c <__alt_data_end+0xfc01a54c>

0001a5a0 <_fstat_r>:
   1a5a0:	defffd04 	addi	sp,sp,-12
   1a5a4:	2805883a 	mov	r2,r5
   1a5a8:	dc000015 	stw	r16,0(sp)
   1a5ac:	040000f4 	movhi	r16,3
   1a5b0:	dc400115 	stw	r17,4(sp)
   1a5b4:	843f2704 	addi	r16,r16,-868
   1a5b8:	2023883a 	mov	r17,r4
   1a5bc:	300b883a 	mov	r5,r6
   1a5c0:	1009883a 	mov	r4,r2
   1a5c4:	dfc00215 	stw	ra,8(sp)
   1a5c8:	80000015 	stw	zero,0(r16)
   1a5cc:	001df0c0 	call	1df0c <fstat>
   1a5d0:	00ffffc4 	movi	r3,-1
   1a5d4:	10c00526 	beq	r2,r3,1a5ec <_fstat_r+0x4c>
   1a5d8:	dfc00217 	ldw	ra,8(sp)
   1a5dc:	dc400117 	ldw	r17,4(sp)
   1a5e0:	dc000017 	ldw	r16,0(sp)
   1a5e4:	dec00304 	addi	sp,sp,12
   1a5e8:	f800283a 	ret
   1a5ec:	80c00017 	ldw	r3,0(r16)
   1a5f0:	183ff926 	beq	r3,zero,1a5d8 <__alt_data_end+0xfc01a5d8>
   1a5f4:	88c00015 	stw	r3,0(r17)
   1a5f8:	003ff706 	br	1a5d8 <__alt_data_end+0xfc01a5d8>

0001a5fc <_isatty_r>:
   1a5fc:	defffd04 	addi	sp,sp,-12
   1a600:	dc000015 	stw	r16,0(sp)
   1a604:	040000f4 	movhi	r16,3
   1a608:	dc400115 	stw	r17,4(sp)
   1a60c:	843f2704 	addi	r16,r16,-868
   1a610:	2023883a 	mov	r17,r4
   1a614:	2809883a 	mov	r4,r5
   1a618:	dfc00215 	stw	ra,8(sp)
   1a61c:	80000015 	stw	zero,0(r16)
   1a620:	001e0200 	call	1e020 <isatty>
   1a624:	00ffffc4 	movi	r3,-1
   1a628:	10c00526 	beq	r2,r3,1a640 <_isatty_r+0x44>
   1a62c:	dfc00217 	ldw	ra,8(sp)
   1a630:	dc400117 	ldw	r17,4(sp)
   1a634:	dc000017 	ldw	r16,0(sp)
   1a638:	dec00304 	addi	sp,sp,12
   1a63c:	f800283a 	ret
   1a640:	80c00017 	ldw	r3,0(r16)
   1a644:	183ff926 	beq	r3,zero,1a62c <__alt_data_end+0xfc01a62c>
   1a648:	88c00015 	stw	r3,0(r17)
   1a64c:	003ff706 	br	1a62c <__alt_data_end+0xfc01a62c>

0001a650 <_lseek_r>:
   1a650:	defffd04 	addi	sp,sp,-12
   1a654:	2805883a 	mov	r2,r5
   1a658:	dc000015 	stw	r16,0(sp)
   1a65c:	040000f4 	movhi	r16,3
   1a660:	dc400115 	stw	r17,4(sp)
   1a664:	300b883a 	mov	r5,r6
   1a668:	843f2704 	addi	r16,r16,-868
   1a66c:	2023883a 	mov	r17,r4
   1a670:	380d883a 	mov	r6,r7
   1a674:	1009883a 	mov	r4,r2
   1a678:	dfc00215 	stw	ra,8(sp)
   1a67c:	80000015 	stw	zero,0(r16)
   1a680:	001e3600 	call	1e360 <lseek>
   1a684:	00ffffc4 	movi	r3,-1
   1a688:	10c00526 	beq	r2,r3,1a6a0 <_lseek_r+0x50>
   1a68c:	dfc00217 	ldw	ra,8(sp)
   1a690:	dc400117 	ldw	r17,4(sp)
   1a694:	dc000017 	ldw	r16,0(sp)
   1a698:	dec00304 	addi	sp,sp,12
   1a69c:	f800283a 	ret
   1a6a0:	80c00017 	ldw	r3,0(r16)
   1a6a4:	183ff926 	beq	r3,zero,1a68c <__alt_data_end+0xfc01a68c>
   1a6a8:	88c00015 	stw	r3,0(r17)
   1a6ac:	003ff706 	br	1a68c <__alt_data_end+0xfc01a68c>

0001a6b0 <_read_r>:
   1a6b0:	defffd04 	addi	sp,sp,-12
   1a6b4:	2805883a 	mov	r2,r5
   1a6b8:	dc000015 	stw	r16,0(sp)
   1a6bc:	040000f4 	movhi	r16,3
   1a6c0:	dc400115 	stw	r17,4(sp)
   1a6c4:	300b883a 	mov	r5,r6
   1a6c8:	843f2704 	addi	r16,r16,-868
   1a6cc:	2023883a 	mov	r17,r4
   1a6d0:	380d883a 	mov	r6,r7
   1a6d4:	1009883a 	mov	r4,r2
   1a6d8:	dfc00215 	stw	ra,8(sp)
   1a6dc:	80000015 	stw	zero,0(r16)
   1a6e0:	001e53c0 	call	1e53c <read>
   1a6e4:	00ffffc4 	movi	r3,-1
   1a6e8:	10c00526 	beq	r2,r3,1a700 <_read_r+0x50>
   1a6ec:	dfc00217 	ldw	ra,8(sp)
   1a6f0:	dc400117 	ldw	r17,4(sp)
   1a6f4:	dc000017 	ldw	r16,0(sp)
   1a6f8:	dec00304 	addi	sp,sp,12
   1a6fc:	f800283a 	ret
   1a700:	80c00017 	ldw	r3,0(r16)
   1a704:	183ff926 	beq	r3,zero,1a6ec <__alt_data_end+0xfc01a6ec>
   1a708:	88c00015 	stw	r3,0(r17)
   1a70c:	003ff706 	br	1a6ec <__alt_data_end+0xfc01a6ec>

0001a710 <_wcrtomb_r>:
   1a710:	defff604 	addi	sp,sp,-40
   1a714:	008000f4 	movhi	r2,3
   1a718:	dc800815 	stw	r18,32(sp)
   1a71c:	dc400715 	stw	r17,28(sp)
   1a720:	dc000615 	stw	r16,24(sp)
   1a724:	10b29904 	addi	r2,r2,-13724
   1a728:	dfc00915 	stw	ra,36(sp)
   1a72c:	2021883a 	mov	r16,r4
   1a730:	3823883a 	mov	r17,r7
   1a734:	14800017 	ldw	r18,0(r2)
   1a738:	28001426 	beq	r5,zero,1a78c <_wcrtomb_r+0x7c>
   1a73c:	d9400415 	stw	r5,16(sp)
   1a740:	d9800515 	stw	r6,20(sp)
   1a744:	00155b40 	call	155b4 <__locale_charset>
   1a748:	d9800517 	ldw	r6,20(sp)
   1a74c:	d9400417 	ldw	r5,16(sp)
   1a750:	100f883a 	mov	r7,r2
   1a754:	dc400015 	stw	r17,0(sp)
   1a758:	8009883a 	mov	r4,r16
   1a75c:	903ee83a 	callr	r18
   1a760:	00ffffc4 	movi	r3,-1
   1a764:	10c0031e 	bne	r2,r3,1a774 <_wcrtomb_r+0x64>
   1a768:	88000015 	stw	zero,0(r17)
   1a76c:	00c02284 	movi	r3,138
   1a770:	80c00015 	stw	r3,0(r16)
   1a774:	dfc00917 	ldw	ra,36(sp)
   1a778:	dc800817 	ldw	r18,32(sp)
   1a77c:	dc400717 	ldw	r17,28(sp)
   1a780:	dc000617 	ldw	r16,24(sp)
   1a784:	dec00a04 	addi	sp,sp,40
   1a788:	f800283a 	ret
   1a78c:	00155b40 	call	155b4 <__locale_charset>
   1a790:	100f883a 	mov	r7,r2
   1a794:	dc400015 	stw	r17,0(sp)
   1a798:	000d883a 	mov	r6,zero
   1a79c:	d9400104 	addi	r5,sp,4
   1a7a0:	8009883a 	mov	r4,r16
   1a7a4:	903ee83a 	callr	r18
   1a7a8:	003fed06 	br	1a760 <__alt_data_end+0xfc01a760>

0001a7ac <wcrtomb>:
   1a7ac:	defff604 	addi	sp,sp,-40
   1a7b0:	008000f4 	movhi	r2,3
   1a7b4:	dc800615 	stw	r18,24(sp)
   1a7b8:	dc400515 	stw	r17,20(sp)
   1a7bc:	10b29504 	addi	r2,r2,-13740
   1a7c0:	dfc00915 	stw	ra,36(sp)
   1a7c4:	dd000815 	stw	r20,32(sp)
   1a7c8:	dcc00715 	stw	r19,28(sp)
   1a7cc:	dc000415 	stw	r16,16(sp)
   1a7d0:	3025883a 	mov	r18,r6
   1a7d4:	14400017 	ldw	r17,0(r2)
   1a7d8:	20001926 	beq	r4,zero,1a840 <wcrtomb+0x94>
   1a7dc:	008000f4 	movhi	r2,3
   1a7e0:	10b29904 	addi	r2,r2,-13724
   1a7e4:	15000017 	ldw	r20,0(r2)
   1a7e8:	2021883a 	mov	r16,r4
   1a7ec:	2827883a 	mov	r19,r5
   1a7f0:	00155b40 	call	155b4 <__locale_charset>
   1a7f4:	100f883a 	mov	r7,r2
   1a7f8:	dc800015 	stw	r18,0(sp)
   1a7fc:	980d883a 	mov	r6,r19
   1a800:	800b883a 	mov	r5,r16
   1a804:	8809883a 	mov	r4,r17
   1a808:	a03ee83a 	callr	r20
   1a80c:	00ffffc4 	movi	r3,-1
   1a810:	10c0031e 	bne	r2,r3,1a820 <wcrtomb+0x74>
   1a814:	90000015 	stw	zero,0(r18)
   1a818:	00c02284 	movi	r3,138
   1a81c:	88c00015 	stw	r3,0(r17)
   1a820:	dfc00917 	ldw	ra,36(sp)
   1a824:	dd000817 	ldw	r20,32(sp)
   1a828:	dcc00717 	ldw	r19,28(sp)
   1a82c:	dc800617 	ldw	r18,24(sp)
   1a830:	dc400517 	ldw	r17,20(sp)
   1a834:	dc000417 	ldw	r16,16(sp)
   1a838:	dec00a04 	addi	sp,sp,40
   1a83c:	f800283a 	ret
   1a840:	008000f4 	movhi	r2,3
   1a844:	10b29904 	addi	r2,r2,-13724
   1a848:	14000017 	ldw	r16,0(r2)
   1a84c:	00155b40 	call	155b4 <__locale_charset>
   1a850:	100f883a 	mov	r7,r2
   1a854:	dc800015 	stw	r18,0(sp)
   1a858:	000d883a 	mov	r6,zero
   1a85c:	d9400104 	addi	r5,sp,4
   1a860:	8809883a 	mov	r4,r17
   1a864:	803ee83a 	callr	r16
   1a868:	003fe806 	br	1a80c <__alt_data_end+0xfc01a80c>

0001a86c <__ascii_wctomb>:
   1a86c:	28000526 	beq	r5,zero,1a884 <__ascii_wctomb+0x18>
   1a870:	00803fc4 	movi	r2,255
   1a874:	11800536 	bltu	r2,r6,1a88c <__ascii_wctomb+0x20>
   1a878:	29800005 	stb	r6,0(r5)
   1a87c:	00800044 	movi	r2,1
   1a880:	f800283a 	ret
   1a884:	0005883a 	mov	r2,zero
   1a888:	f800283a 	ret
   1a88c:	00802284 	movi	r2,138
   1a890:	20800015 	stw	r2,0(r4)
   1a894:	00bfffc4 	movi	r2,-1
   1a898:	f800283a 	ret

0001a89c <_wctomb_r>:
   1a89c:	008000f4 	movhi	r2,3
   1a8a0:	defff904 	addi	sp,sp,-28
   1a8a4:	10b29904 	addi	r2,r2,-13724
   1a8a8:	dfc00615 	stw	ra,24(sp)
   1a8ac:	dc400515 	stw	r17,20(sp)
   1a8b0:	dc000415 	stw	r16,16(sp)
   1a8b4:	3823883a 	mov	r17,r7
   1a8b8:	14000017 	ldw	r16,0(r2)
   1a8bc:	d9000115 	stw	r4,4(sp)
   1a8c0:	d9400215 	stw	r5,8(sp)
   1a8c4:	d9800315 	stw	r6,12(sp)
   1a8c8:	00155b40 	call	155b4 <__locale_charset>
   1a8cc:	d9800317 	ldw	r6,12(sp)
   1a8d0:	d9400217 	ldw	r5,8(sp)
   1a8d4:	d9000117 	ldw	r4,4(sp)
   1a8d8:	100f883a 	mov	r7,r2
   1a8dc:	dc400015 	stw	r17,0(sp)
   1a8e0:	803ee83a 	callr	r16
   1a8e4:	dfc00617 	ldw	ra,24(sp)
   1a8e8:	dc400517 	ldw	r17,20(sp)
   1a8ec:	dc000417 	ldw	r16,16(sp)
   1a8f0:	dec00704 	addi	sp,sp,28
   1a8f4:	f800283a 	ret

0001a8f8 <__udivdi3>:
   1a8f8:	defff404 	addi	sp,sp,-48
   1a8fc:	dcc00515 	stw	r19,20(sp)
   1a900:	dc000215 	stw	r16,8(sp)
   1a904:	dfc00b15 	stw	ra,44(sp)
   1a908:	df000a15 	stw	fp,40(sp)
   1a90c:	ddc00915 	stw	r23,36(sp)
   1a910:	dd800815 	stw	r22,32(sp)
   1a914:	dd400715 	stw	r21,28(sp)
   1a918:	dd000615 	stw	r20,24(sp)
   1a91c:	dc800415 	stw	r18,16(sp)
   1a920:	dc400315 	stw	r17,12(sp)
   1a924:	2027883a 	mov	r19,r4
   1a928:	2821883a 	mov	r16,r5
   1a92c:	3800461e 	bne	r7,zero,1aa48 <__udivdi3+0x150>
   1a930:	3023883a 	mov	r17,r6
   1a934:	2025883a 	mov	r18,r4
   1a938:	2980572e 	bgeu	r5,r6,1aa98 <__udivdi3+0x1a0>
   1a93c:	00bfffd4 	movui	r2,65535
   1a940:	282d883a 	mov	r22,r5
   1a944:	1180b236 	bltu	r2,r6,1ac10 <__udivdi3+0x318>
   1a948:	00803fc4 	movi	r2,255
   1a94c:	1185803a 	cmpltu	r2,r2,r6
   1a950:	100490fa 	slli	r2,r2,3
   1a954:	3086d83a 	srl	r3,r6,r2
   1a958:	010000f4 	movhi	r4,3
   1a95c:	2125d704 	addi	r4,r4,-26788
   1a960:	20c7883a 	add	r3,r4,r3
   1a964:	18c00003 	ldbu	r3,0(r3)
   1a968:	1885883a 	add	r2,r3,r2
   1a96c:	00c00804 	movi	r3,32
   1a970:	1887c83a 	sub	r3,r3,r2
   1a974:	18000526 	beq	r3,zero,1a98c <__udivdi3+0x94>
   1a978:	80e0983a 	sll	r16,r16,r3
   1a97c:	9884d83a 	srl	r2,r19,r2
   1a980:	30e2983a 	sll	r17,r6,r3
   1a984:	98e4983a 	sll	r18,r19,r3
   1a988:	142cb03a 	or	r22,r2,r16
   1a98c:	882ad43a 	srli	r21,r17,16
   1a990:	b009883a 	mov	r4,r22
   1a994:	8d3fffcc 	andi	r20,r17,65535
   1a998:	a80b883a 	mov	r5,r21
   1a99c:	000cc480 	call	cc48 <__umodsi3>
   1a9a0:	b009883a 	mov	r4,r22
   1a9a4:	a80b883a 	mov	r5,r21
   1a9a8:	1027883a 	mov	r19,r2
   1a9ac:	000cbe40 	call	cbe4 <__udivsi3>
   1a9b0:	100b883a 	mov	r5,r2
   1a9b4:	a009883a 	mov	r4,r20
   1a9b8:	102d883a 	mov	r22,r2
   1a9bc:	000cca00 	call	cca0 <__mulsi3>
   1a9c0:	9826943a 	slli	r19,r19,16
   1a9c4:	9006d43a 	srli	r3,r18,16
   1a9c8:	1cc6b03a 	or	r3,r3,r19
   1a9cc:	1880052e 	bgeu	r3,r2,1a9e4 <__udivdi3+0xec>
   1a9d0:	1c47883a 	add	r3,r3,r17
   1a9d4:	b13fffc4 	addi	r4,r22,-1
   1a9d8:	1c400136 	bltu	r3,r17,1a9e0 <__udivdi3+0xe8>
   1a9dc:	18814236 	bltu	r3,r2,1aee8 <__udivdi3+0x5f0>
   1a9e0:	202d883a 	mov	r22,r4
   1a9e4:	18a1c83a 	sub	r16,r3,r2
   1a9e8:	8009883a 	mov	r4,r16
   1a9ec:	a80b883a 	mov	r5,r21
   1a9f0:	000cc480 	call	cc48 <__umodsi3>
   1a9f4:	1027883a 	mov	r19,r2
   1a9f8:	8009883a 	mov	r4,r16
   1a9fc:	a80b883a 	mov	r5,r21
   1aa00:	9826943a 	slli	r19,r19,16
   1aa04:	000cbe40 	call	cbe4 <__udivsi3>
   1aa08:	100b883a 	mov	r5,r2
   1aa0c:	a009883a 	mov	r4,r20
   1aa10:	94bfffcc 	andi	r18,r18,65535
   1aa14:	1021883a 	mov	r16,r2
   1aa18:	94e4b03a 	or	r18,r18,r19
   1aa1c:	000cca00 	call	cca0 <__mulsi3>
   1aa20:	9080052e 	bgeu	r18,r2,1aa38 <__udivdi3+0x140>
   1aa24:	8ca5883a 	add	r18,r17,r18
   1aa28:	80ffffc4 	addi	r3,r16,-1
   1aa2c:	94410c36 	bltu	r18,r17,1ae60 <__udivdi3+0x568>
   1aa30:	90810b2e 	bgeu	r18,r2,1ae60 <__udivdi3+0x568>
   1aa34:	843fff84 	addi	r16,r16,-2
   1aa38:	b004943a 	slli	r2,r22,16
   1aa3c:	0007883a 	mov	r3,zero
   1aa40:	1404b03a 	or	r2,r2,r16
   1aa44:	00005e06 	br	1abc0 <__udivdi3+0x2c8>
   1aa48:	29c05b36 	bltu	r5,r7,1abb8 <__udivdi3+0x2c0>
   1aa4c:	00bfffd4 	movui	r2,65535
   1aa50:	11c0672e 	bgeu	r2,r7,1abf0 <__udivdi3+0x2f8>
   1aa54:	00804034 	movhi	r2,256
   1aa58:	10bfffc4 	addi	r2,r2,-1
   1aa5c:	11c10a36 	bltu	r2,r7,1ae88 <__udivdi3+0x590>
   1aa60:	00800404 	movi	r2,16
   1aa64:	3886d83a 	srl	r3,r7,r2
   1aa68:	010000f4 	movhi	r4,3
   1aa6c:	2125d704 	addi	r4,r4,-26788
   1aa70:	20c7883a 	add	r3,r4,r3
   1aa74:	18c00003 	ldbu	r3,0(r3)
   1aa78:	05c00804 	movi	r23,32
   1aa7c:	1885883a 	add	r2,r3,r2
   1aa80:	b8afc83a 	sub	r23,r23,r2
   1aa84:	b800671e 	bne	r23,zero,1ac24 <__udivdi3+0x32c>
   1aa88:	3c010536 	bltu	r7,r16,1aea0 <__udivdi3+0x5a8>
   1aa8c:	9985403a 	cmpgeu	r2,r19,r6
   1aa90:	0007883a 	mov	r3,zero
   1aa94:	00004a06 	br	1abc0 <__udivdi3+0x2c8>
   1aa98:	3000041e 	bne	r6,zero,1aaac <__udivdi3+0x1b4>
   1aa9c:	000b883a 	mov	r5,zero
   1aaa0:	01000044 	movi	r4,1
   1aaa4:	000cbe40 	call	cbe4 <__udivsi3>
   1aaa8:	1023883a 	mov	r17,r2
   1aaac:	00bfffd4 	movui	r2,65535
   1aab0:	1440532e 	bgeu	r2,r17,1ac00 <__udivdi3+0x308>
   1aab4:	00804034 	movhi	r2,256
   1aab8:	10bfffc4 	addi	r2,r2,-1
   1aabc:	1440f436 	bltu	r2,r17,1ae90 <__udivdi3+0x598>
   1aac0:	00800404 	movi	r2,16
   1aac4:	8886d83a 	srl	r3,r17,r2
   1aac8:	010000f4 	movhi	r4,3
   1aacc:	2125d704 	addi	r4,r4,-26788
   1aad0:	20c7883a 	add	r3,r4,r3
   1aad4:	18c00003 	ldbu	r3,0(r3)
   1aad8:	1885883a 	add	r2,r3,r2
   1aadc:	00c00804 	movi	r3,32
   1aae0:	1887c83a 	sub	r3,r3,r2
   1aae4:	1800a51e 	bne	r3,zero,1ad7c <__udivdi3+0x484>
   1aae8:	882ad43a 	srli	r21,r17,16
   1aaec:	8461c83a 	sub	r16,r16,r17
   1aaf0:	8d3fffcc 	andi	r20,r17,65535
   1aaf4:	00c00044 	movi	r3,1
   1aaf8:	a80b883a 	mov	r5,r21
   1aafc:	8009883a 	mov	r4,r16
   1ab00:	d8c00115 	stw	r3,4(sp)
   1ab04:	000cc480 	call	cc48 <__umodsi3>
   1ab08:	a80b883a 	mov	r5,r21
   1ab0c:	8009883a 	mov	r4,r16
   1ab10:	1027883a 	mov	r19,r2
   1ab14:	000cbe40 	call	cbe4 <__udivsi3>
   1ab18:	a00b883a 	mov	r5,r20
   1ab1c:	1009883a 	mov	r4,r2
   1ab20:	102d883a 	mov	r22,r2
   1ab24:	000cca00 	call	cca0 <__mulsi3>
   1ab28:	9826943a 	slli	r19,r19,16
   1ab2c:	900ed43a 	srli	r7,r18,16
   1ab30:	d8c00117 	ldw	r3,4(sp)
   1ab34:	3cceb03a 	or	r7,r7,r19
   1ab38:	3880052e 	bgeu	r7,r2,1ab50 <__udivdi3+0x258>
   1ab3c:	3c4f883a 	add	r7,r7,r17
   1ab40:	b13fffc4 	addi	r4,r22,-1
   1ab44:	3c400136 	bltu	r7,r17,1ab4c <__udivdi3+0x254>
   1ab48:	3880e436 	bltu	r7,r2,1aedc <__udivdi3+0x5e4>
   1ab4c:	202d883a 	mov	r22,r4
   1ab50:	38a1c83a 	sub	r16,r7,r2
   1ab54:	8009883a 	mov	r4,r16
   1ab58:	a80b883a 	mov	r5,r21
   1ab5c:	d8c00115 	stw	r3,4(sp)
   1ab60:	000cc480 	call	cc48 <__umodsi3>
   1ab64:	1027883a 	mov	r19,r2
   1ab68:	8009883a 	mov	r4,r16
   1ab6c:	a80b883a 	mov	r5,r21
   1ab70:	9826943a 	slli	r19,r19,16
   1ab74:	000cbe40 	call	cbe4 <__udivsi3>
   1ab78:	a00b883a 	mov	r5,r20
   1ab7c:	1009883a 	mov	r4,r2
   1ab80:	94bfffcc 	andi	r18,r18,65535
   1ab84:	1021883a 	mov	r16,r2
   1ab88:	94e4b03a 	or	r18,r18,r19
   1ab8c:	000cca00 	call	cca0 <__mulsi3>
   1ab90:	d8c00117 	ldw	r3,4(sp)
   1ab94:	9080052e 	bgeu	r18,r2,1abac <__udivdi3+0x2b4>
   1ab98:	8ca5883a 	add	r18,r17,r18
   1ab9c:	813fffc4 	addi	r4,r16,-1
   1aba0:	9440ad36 	bltu	r18,r17,1ae58 <__udivdi3+0x560>
   1aba4:	9080ac2e 	bgeu	r18,r2,1ae58 <__udivdi3+0x560>
   1aba8:	843fff84 	addi	r16,r16,-2
   1abac:	b004943a 	slli	r2,r22,16
   1abb0:	1404b03a 	or	r2,r2,r16
   1abb4:	00000206 	br	1abc0 <__udivdi3+0x2c8>
   1abb8:	0007883a 	mov	r3,zero
   1abbc:	0005883a 	mov	r2,zero
   1abc0:	dfc00b17 	ldw	ra,44(sp)
   1abc4:	df000a17 	ldw	fp,40(sp)
   1abc8:	ddc00917 	ldw	r23,36(sp)
   1abcc:	dd800817 	ldw	r22,32(sp)
   1abd0:	dd400717 	ldw	r21,28(sp)
   1abd4:	dd000617 	ldw	r20,24(sp)
   1abd8:	dcc00517 	ldw	r19,20(sp)
   1abdc:	dc800417 	ldw	r18,16(sp)
   1abe0:	dc400317 	ldw	r17,12(sp)
   1abe4:	dc000217 	ldw	r16,8(sp)
   1abe8:	dec00c04 	addi	sp,sp,48
   1abec:	f800283a 	ret
   1abf0:	00803fc4 	movi	r2,255
   1abf4:	11c5803a 	cmpltu	r2,r2,r7
   1abf8:	100490fa 	slli	r2,r2,3
   1abfc:	003f9906 	br	1aa64 <__alt_data_end+0xfc01aa64>
   1ac00:	00803fc4 	movi	r2,255
   1ac04:	1445803a 	cmpltu	r2,r2,r17
   1ac08:	100490fa 	slli	r2,r2,3
   1ac0c:	003fad06 	br	1aac4 <__alt_data_end+0xfc01aac4>
   1ac10:	00804034 	movhi	r2,256
   1ac14:	10bfffc4 	addi	r2,r2,-1
   1ac18:	11809f36 	bltu	r2,r6,1ae98 <__udivdi3+0x5a0>
   1ac1c:	00800404 	movi	r2,16
   1ac20:	003f4c06 	br	1a954 <__alt_data_end+0xfc01a954>
   1ac24:	3dce983a 	sll	r7,r7,r23
   1ac28:	30b8d83a 	srl	fp,r6,r2
   1ac2c:	80a2d83a 	srl	r17,r16,r2
   1ac30:	35cc983a 	sll	r6,r6,r23
   1ac34:	3f38b03a 	or	fp,r7,fp
   1ac38:	e024d43a 	srli	r18,fp,16
   1ac3c:	9884d83a 	srl	r2,r19,r2
   1ac40:	85e0983a 	sll	r16,r16,r23
   1ac44:	8809883a 	mov	r4,r17
   1ac48:	900b883a 	mov	r5,r18
   1ac4c:	d9800015 	stw	r6,0(sp)
   1ac50:	1420b03a 	or	r16,r2,r16
   1ac54:	000cc480 	call	cc48 <__umodsi3>
   1ac58:	900b883a 	mov	r5,r18
   1ac5c:	8809883a 	mov	r4,r17
   1ac60:	1029883a 	mov	r20,r2
   1ac64:	e5bfffcc 	andi	r22,fp,65535
   1ac68:	000cbe40 	call	cbe4 <__udivsi3>
   1ac6c:	100b883a 	mov	r5,r2
   1ac70:	b009883a 	mov	r4,r22
   1ac74:	102b883a 	mov	r21,r2
   1ac78:	000cca00 	call	cca0 <__mulsi3>
   1ac7c:	a028943a 	slli	r20,r20,16
   1ac80:	8006d43a 	srli	r3,r16,16
   1ac84:	1d06b03a 	or	r3,r3,r20
   1ac88:	1880042e 	bgeu	r3,r2,1ac9c <__udivdi3+0x3a4>
   1ac8c:	1f07883a 	add	r3,r3,fp
   1ac90:	a93fffc4 	addi	r4,r21,-1
   1ac94:	1f00892e 	bgeu	r3,fp,1aebc <__udivdi3+0x5c4>
   1ac98:	202b883a 	mov	r21,r4
   1ac9c:	18a3c83a 	sub	r17,r3,r2
   1aca0:	8809883a 	mov	r4,r17
   1aca4:	900b883a 	mov	r5,r18
   1aca8:	000cc480 	call	cc48 <__umodsi3>
   1acac:	1029883a 	mov	r20,r2
   1acb0:	8809883a 	mov	r4,r17
   1acb4:	900b883a 	mov	r5,r18
   1acb8:	a028943a 	slli	r20,r20,16
   1acbc:	000cbe40 	call	cbe4 <__udivsi3>
   1acc0:	100b883a 	mov	r5,r2
   1acc4:	b009883a 	mov	r4,r22
   1acc8:	843fffcc 	andi	r16,r16,65535
   1accc:	1023883a 	mov	r17,r2
   1acd0:	8520b03a 	or	r16,r16,r20
   1acd4:	000cca00 	call	cca0 <__mulsi3>
   1acd8:	8080042e 	bgeu	r16,r2,1acec <__udivdi3+0x3f4>
   1acdc:	8721883a 	add	r16,r16,fp
   1ace0:	88ffffc4 	addi	r3,r17,-1
   1ace4:	8700712e 	bgeu	r16,fp,1aeac <__udivdi3+0x5b4>
   1ace8:	1823883a 	mov	r17,r3
   1acec:	a80e943a 	slli	r7,r21,16
   1acf0:	d8c00017 	ldw	r3,0(sp)
   1acf4:	80a1c83a 	sub	r16,r16,r2
   1acf8:	3c64b03a 	or	r18,r7,r17
   1acfc:	1d3fffcc 	andi	r20,r3,65535
   1ad00:	9022d43a 	srli	r17,r18,16
   1ad04:	95bfffcc 	andi	r22,r18,65535
   1ad08:	a00b883a 	mov	r5,r20
   1ad0c:	b009883a 	mov	r4,r22
   1ad10:	182ad43a 	srli	r21,r3,16
   1ad14:	000cca00 	call	cca0 <__mulsi3>
   1ad18:	a00b883a 	mov	r5,r20
   1ad1c:	8809883a 	mov	r4,r17
   1ad20:	1039883a 	mov	fp,r2
   1ad24:	000cca00 	call	cca0 <__mulsi3>
   1ad28:	8809883a 	mov	r4,r17
   1ad2c:	a80b883a 	mov	r5,r21
   1ad30:	1029883a 	mov	r20,r2
   1ad34:	000cca00 	call	cca0 <__mulsi3>
   1ad38:	a80b883a 	mov	r5,r21
   1ad3c:	b009883a 	mov	r4,r22
   1ad40:	1023883a 	mov	r17,r2
   1ad44:	000cca00 	call	cca0 <__mulsi3>
   1ad48:	e006d43a 	srli	r3,fp,16
   1ad4c:	1505883a 	add	r2,r2,r20
   1ad50:	1887883a 	add	r3,r3,r2
   1ad54:	1d00022e 	bgeu	r3,r20,1ad60 <__udivdi3+0x468>
   1ad58:	00800074 	movhi	r2,1
   1ad5c:	88a3883a 	add	r17,r17,r2
   1ad60:	1804d43a 	srli	r2,r3,16
   1ad64:	1463883a 	add	r17,r2,r17
   1ad68:	84404436 	bltu	r16,r17,1ae7c <__udivdi3+0x584>
   1ad6c:	84403e26 	beq	r16,r17,1ae68 <__udivdi3+0x570>
   1ad70:	9005883a 	mov	r2,r18
   1ad74:	0007883a 	mov	r3,zero
   1ad78:	003f9106 	br	1abc0 <__alt_data_end+0xfc01abc0>
   1ad7c:	88e2983a 	sll	r17,r17,r3
   1ad80:	80aed83a 	srl	r23,r16,r2
   1ad84:	80e0983a 	sll	r16,r16,r3
   1ad88:	882ad43a 	srli	r21,r17,16
   1ad8c:	9884d83a 	srl	r2,r19,r2
   1ad90:	b809883a 	mov	r4,r23
   1ad94:	a80b883a 	mov	r5,r21
   1ad98:	98e4983a 	sll	r18,r19,r3
   1ad9c:	142cb03a 	or	r22,r2,r16
   1ada0:	000cc480 	call	cc48 <__umodsi3>
   1ada4:	b809883a 	mov	r4,r23
   1ada8:	a80b883a 	mov	r5,r21
   1adac:	1027883a 	mov	r19,r2
   1adb0:	8d3fffcc 	andi	r20,r17,65535
   1adb4:	000cbe40 	call	cbe4 <__udivsi3>
   1adb8:	a009883a 	mov	r4,r20
   1adbc:	100b883a 	mov	r5,r2
   1adc0:	102f883a 	mov	r23,r2
   1adc4:	000cca00 	call	cca0 <__mulsi3>
   1adc8:	9826943a 	slli	r19,r19,16
   1adcc:	b008d43a 	srli	r4,r22,16
   1add0:	24c8b03a 	or	r4,r4,r19
   1add4:	2080062e 	bgeu	r4,r2,1adf0 <__udivdi3+0x4f8>
   1add8:	2449883a 	add	r4,r4,r17
   1addc:	b8ffffc4 	addi	r3,r23,-1
   1ade0:	24403c36 	bltu	r4,r17,1aed4 <__udivdi3+0x5dc>
   1ade4:	20803b2e 	bgeu	r4,r2,1aed4 <__udivdi3+0x5dc>
   1ade8:	bdffff84 	addi	r23,r23,-2
   1adec:	2449883a 	add	r4,r4,r17
   1adf0:	20a1c83a 	sub	r16,r4,r2
   1adf4:	a80b883a 	mov	r5,r21
   1adf8:	8009883a 	mov	r4,r16
   1adfc:	000cc480 	call	cc48 <__umodsi3>
   1ae00:	a80b883a 	mov	r5,r21
   1ae04:	8009883a 	mov	r4,r16
   1ae08:	1027883a 	mov	r19,r2
   1ae0c:	000cbe40 	call	cbe4 <__udivsi3>
   1ae10:	a009883a 	mov	r4,r20
   1ae14:	100b883a 	mov	r5,r2
   1ae18:	9826943a 	slli	r19,r19,16
   1ae1c:	1039883a 	mov	fp,r2
   1ae20:	000cca00 	call	cca0 <__mulsi3>
   1ae24:	b13fffcc 	andi	r4,r22,65535
   1ae28:	24c8b03a 	or	r4,r4,r19
   1ae2c:	2080062e 	bgeu	r4,r2,1ae48 <__udivdi3+0x550>
   1ae30:	2449883a 	add	r4,r4,r17
   1ae34:	e0ffffc4 	addi	r3,fp,-1
   1ae38:	24402436 	bltu	r4,r17,1aecc <__udivdi3+0x5d4>
   1ae3c:	2080232e 	bgeu	r4,r2,1aecc <__udivdi3+0x5d4>
   1ae40:	e73fff84 	addi	fp,fp,-2
   1ae44:	2449883a 	add	r4,r4,r17
   1ae48:	b82e943a 	slli	r23,r23,16
   1ae4c:	20a1c83a 	sub	r16,r4,r2
   1ae50:	bf06b03a 	or	r3,r23,fp
   1ae54:	003f2806 	br	1aaf8 <__alt_data_end+0xfc01aaf8>
   1ae58:	2021883a 	mov	r16,r4
   1ae5c:	003f5306 	br	1abac <__alt_data_end+0xfc01abac>
   1ae60:	1821883a 	mov	r16,r3
   1ae64:	003ef406 	br	1aa38 <__alt_data_end+0xfc01aa38>
   1ae68:	1806943a 	slli	r3,r3,16
   1ae6c:	9de6983a 	sll	r19,r19,r23
   1ae70:	e73fffcc 	andi	fp,fp,65535
   1ae74:	1f07883a 	add	r3,r3,fp
   1ae78:	98ffbd2e 	bgeu	r19,r3,1ad70 <__alt_data_end+0xfc01ad70>
   1ae7c:	90bfffc4 	addi	r2,r18,-1
   1ae80:	0007883a 	mov	r3,zero
   1ae84:	003f4e06 	br	1abc0 <__alt_data_end+0xfc01abc0>
   1ae88:	00800604 	movi	r2,24
   1ae8c:	003ef506 	br	1aa64 <__alt_data_end+0xfc01aa64>
   1ae90:	00800604 	movi	r2,24
   1ae94:	003f0b06 	br	1aac4 <__alt_data_end+0xfc01aac4>
   1ae98:	00800604 	movi	r2,24
   1ae9c:	003ead06 	br	1a954 <__alt_data_end+0xfc01a954>
   1aea0:	0007883a 	mov	r3,zero
   1aea4:	00800044 	movi	r2,1
   1aea8:	003f4506 	br	1abc0 <__alt_data_end+0xfc01abc0>
   1aeac:	80bf8e2e 	bgeu	r16,r2,1ace8 <__alt_data_end+0xfc01ace8>
   1aeb0:	8c7fff84 	addi	r17,r17,-2
   1aeb4:	8721883a 	add	r16,r16,fp
   1aeb8:	003f8c06 	br	1acec <__alt_data_end+0xfc01acec>
   1aebc:	18bf762e 	bgeu	r3,r2,1ac98 <__alt_data_end+0xfc01ac98>
   1aec0:	ad7fff84 	addi	r21,r21,-2
   1aec4:	1f07883a 	add	r3,r3,fp
   1aec8:	003f7406 	br	1ac9c <__alt_data_end+0xfc01ac9c>
   1aecc:	1839883a 	mov	fp,r3
   1aed0:	003fdd06 	br	1ae48 <__alt_data_end+0xfc01ae48>
   1aed4:	182f883a 	mov	r23,r3
   1aed8:	003fc506 	br	1adf0 <__alt_data_end+0xfc01adf0>
   1aedc:	b5bfff84 	addi	r22,r22,-2
   1aee0:	3c4f883a 	add	r7,r7,r17
   1aee4:	003f1a06 	br	1ab50 <__alt_data_end+0xfc01ab50>
   1aee8:	b5bfff84 	addi	r22,r22,-2
   1aeec:	1c47883a 	add	r3,r3,r17
   1aef0:	003ebc06 	br	1a9e4 <__alt_data_end+0xfc01a9e4>

0001aef4 <__umoddi3>:
   1aef4:	defff304 	addi	sp,sp,-52
   1aef8:	df000b15 	stw	fp,44(sp)
   1aefc:	dc400415 	stw	r17,16(sp)
   1af00:	dc000315 	stw	r16,12(sp)
   1af04:	dfc00c15 	stw	ra,48(sp)
   1af08:	ddc00a15 	stw	r23,40(sp)
   1af0c:	dd800915 	stw	r22,36(sp)
   1af10:	dd400815 	stw	r21,32(sp)
   1af14:	dd000715 	stw	r20,28(sp)
   1af18:	dcc00615 	stw	r19,24(sp)
   1af1c:	dc800515 	stw	r18,20(sp)
   1af20:	2021883a 	mov	r16,r4
   1af24:	2823883a 	mov	r17,r5
   1af28:	2839883a 	mov	fp,r5
   1af2c:	3800401e 	bne	r7,zero,1b030 <__umoddi3+0x13c>
   1af30:	3027883a 	mov	r19,r6
   1af34:	2029883a 	mov	r20,r4
   1af38:	2980552e 	bgeu	r5,r6,1b090 <__umoddi3+0x19c>
   1af3c:	00bfffd4 	movui	r2,65535
   1af40:	1180a236 	bltu	r2,r6,1b1cc <__umoddi3+0x2d8>
   1af44:	01003fc4 	movi	r4,255
   1af48:	2189803a 	cmpltu	r4,r4,r6
   1af4c:	200890fa 	slli	r4,r4,3
   1af50:	3104d83a 	srl	r2,r6,r4
   1af54:	00c000f4 	movhi	r3,3
   1af58:	18e5d704 	addi	r3,r3,-26788
   1af5c:	1885883a 	add	r2,r3,r2
   1af60:	10c00003 	ldbu	r3,0(r2)
   1af64:	00800804 	movi	r2,32
   1af68:	1909883a 	add	r4,r3,r4
   1af6c:	1125c83a 	sub	r18,r2,r4
   1af70:	90000526 	beq	r18,zero,1af88 <__umoddi3+0x94>
   1af74:	8ca2983a 	sll	r17,r17,r18
   1af78:	8108d83a 	srl	r4,r16,r4
   1af7c:	34a6983a 	sll	r19,r6,r18
   1af80:	84a8983a 	sll	r20,r16,r18
   1af84:	2478b03a 	or	fp,r4,r17
   1af88:	982cd43a 	srli	r22,r19,16
   1af8c:	e009883a 	mov	r4,fp
   1af90:	9dffffcc 	andi	r23,r19,65535
   1af94:	b00b883a 	mov	r5,r22
   1af98:	000cc480 	call	cc48 <__umodsi3>
   1af9c:	b00b883a 	mov	r5,r22
   1afa0:	e009883a 	mov	r4,fp
   1afa4:	102b883a 	mov	r21,r2
   1afa8:	000cbe40 	call	cbe4 <__udivsi3>
   1afac:	100b883a 	mov	r5,r2
   1afb0:	b809883a 	mov	r4,r23
   1afb4:	000cca00 	call	cca0 <__mulsi3>
   1afb8:	a82a943a 	slli	r21,r21,16
   1afbc:	a006d43a 	srli	r3,r20,16
   1afc0:	1d46b03a 	or	r3,r3,r21
   1afc4:	1880032e 	bgeu	r3,r2,1afd4 <__umoddi3+0xe0>
   1afc8:	1cc7883a 	add	r3,r3,r19
   1afcc:	1cc00136 	bltu	r3,r19,1afd4 <__umoddi3+0xe0>
   1afd0:	18813136 	bltu	r3,r2,1b498 <__umoddi3+0x5a4>
   1afd4:	18a1c83a 	sub	r16,r3,r2
   1afd8:	b00b883a 	mov	r5,r22
   1afdc:	8009883a 	mov	r4,r16
   1afe0:	000cc480 	call	cc48 <__umodsi3>
   1afe4:	b00b883a 	mov	r5,r22
   1afe8:	8009883a 	mov	r4,r16
   1afec:	1023883a 	mov	r17,r2
   1aff0:	000cbe40 	call	cbe4 <__udivsi3>
   1aff4:	100b883a 	mov	r5,r2
   1aff8:	b809883a 	mov	r4,r23
   1affc:	8822943a 	slli	r17,r17,16
   1b000:	000cca00 	call	cca0 <__mulsi3>
   1b004:	a0ffffcc 	andi	r3,r20,65535
   1b008:	1c46b03a 	or	r3,r3,r17
   1b00c:	1880042e 	bgeu	r3,r2,1b020 <__umoddi3+0x12c>
   1b010:	1cc7883a 	add	r3,r3,r19
   1b014:	1cc00236 	bltu	r3,r19,1b020 <__umoddi3+0x12c>
   1b018:	1880012e 	bgeu	r3,r2,1b020 <__umoddi3+0x12c>
   1b01c:	1cc7883a 	add	r3,r3,r19
   1b020:	1885c83a 	sub	r2,r3,r2
   1b024:	1484d83a 	srl	r2,r2,r18
   1b028:	0007883a 	mov	r3,zero
   1b02c:	00005306 	br	1b17c <__umoddi3+0x288>
   1b030:	29c05036 	bltu	r5,r7,1b174 <__umoddi3+0x280>
   1b034:	00bfffd4 	movui	r2,65535
   1b038:	11c05c2e 	bgeu	r2,r7,1b1ac <__umoddi3+0x2b8>
   1b03c:	00804034 	movhi	r2,256
   1b040:	10bfffc4 	addi	r2,r2,-1
   1b044:	11c10636 	bltu	r2,r7,1b460 <__umoddi3+0x56c>
   1b048:	01000404 	movi	r4,16
   1b04c:	3904d83a 	srl	r2,r7,r4
   1b050:	00c000f4 	movhi	r3,3
   1b054:	18e5d704 	addi	r3,r3,-26788
   1b058:	1885883a 	add	r2,r3,r2
   1b05c:	14c00003 	ldbu	r19,0(r2)
   1b060:	00c00804 	movi	r3,32
   1b064:	9927883a 	add	r19,r19,r4
   1b068:	1ce9c83a 	sub	r20,r3,r19
   1b06c:	a0005c1e 	bne	r20,zero,1b1e0 <__umoddi3+0x2ec>
   1b070:	3c400136 	bltu	r7,r17,1b078 <__umoddi3+0x184>
   1b074:	81810a36 	bltu	r16,r6,1b4a0 <__umoddi3+0x5ac>
   1b078:	8185c83a 	sub	r2,r16,r6
   1b07c:	89e3c83a 	sub	r17,r17,r7
   1b080:	8089803a 	cmpltu	r4,r16,r2
   1b084:	8939c83a 	sub	fp,r17,r4
   1b088:	e007883a 	mov	r3,fp
   1b08c:	00003b06 	br	1b17c <__umoddi3+0x288>
   1b090:	3000041e 	bne	r6,zero,1b0a4 <__umoddi3+0x1b0>
   1b094:	000b883a 	mov	r5,zero
   1b098:	01000044 	movi	r4,1
   1b09c:	000cbe40 	call	cbe4 <__udivsi3>
   1b0a0:	1027883a 	mov	r19,r2
   1b0a4:	00bfffd4 	movui	r2,65535
   1b0a8:	14c0442e 	bgeu	r2,r19,1b1bc <__umoddi3+0x2c8>
   1b0ac:	00804034 	movhi	r2,256
   1b0b0:	10bfffc4 	addi	r2,r2,-1
   1b0b4:	14c0ec36 	bltu	r2,r19,1b468 <__umoddi3+0x574>
   1b0b8:	00800404 	movi	r2,16
   1b0bc:	9886d83a 	srl	r3,r19,r2
   1b0c0:	010000f4 	movhi	r4,3
   1b0c4:	2125d704 	addi	r4,r4,-26788
   1b0c8:	20c7883a 	add	r3,r4,r3
   1b0cc:	18c00003 	ldbu	r3,0(r3)
   1b0d0:	1887883a 	add	r3,r3,r2
   1b0d4:	00800804 	movi	r2,32
   1b0d8:	10e5c83a 	sub	r18,r2,r3
   1b0dc:	9000ab1e 	bne	r18,zero,1b38c <__umoddi3+0x498>
   1b0e0:	982cd43a 	srli	r22,r19,16
   1b0e4:	8ce3c83a 	sub	r17,r17,r19
   1b0e8:	9dffffcc 	andi	r23,r19,65535
   1b0ec:	b00b883a 	mov	r5,r22
   1b0f0:	8809883a 	mov	r4,r17
   1b0f4:	000cc480 	call	cc48 <__umodsi3>
   1b0f8:	b00b883a 	mov	r5,r22
   1b0fc:	8809883a 	mov	r4,r17
   1b100:	102b883a 	mov	r21,r2
   1b104:	000cbe40 	call	cbe4 <__udivsi3>
   1b108:	b80b883a 	mov	r5,r23
   1b10c:	1009883a 	mov	r4,r2
   1b110:	000cca00 	call	cca0 <__mulsi3>
   1b114:	a82a943a 	slli	r21,r21,16
   1b118:	a006d43a 	srli	r3,r20,16
   1b11c:	1d46b03a 	or	r3,r3,r21
   1b120:	1880042e 	bgeu	r3,r2,1b134 <__umoddi3+0x240>
   1b124:	1cc7883a 	add	r3,r3,r19
   1b128:	1cc00236 	bltu	r3,r19,1b134 <__umoddi3+0x240>
   1b12c:	1880012e 	bgeu	r3,r2,1b134 <__umoddi3+0x240>
   1b130:	1cc7883a 	add	r3,r3,r19
   1b134:	18a1c83a 	sub	r16,r3,r2
   1b138:	b00b883a 	mov	r5,r22
   1b13c:	8009883a 	mov	r4,r16
   1b140:	000cc480 	call	cc48 <__umodsi3>
   1b144:	1023883a 	mov	r17,r2
   1b148:	b00b883a 	mov	r5,r22
   1b14c:	8009883a 	mov	r4,r16
   1b150:	000cbe40 	call	cbe4 <__udivsi3>
   1b154:	8822943a 	slli	r17,r17,16
   1b158:	b80b883a 	mov	r5,r23
   1b15c:	1009883a 	mov	r4,r2
   1b160:	000cca00 	call	cca0 <__mulsi3>
   1b164:	a53fffcc 	andi	r20,r20,65535
   1b168:	a446b03a 	or	r3,r20,r17
   1b16c:	18bfac2e 	bgeu	r3,r2,1b020 <__alt_data_end+0xfc01b020>
   1b170:	003fa706 	br	1b010 <__alt_data_end+0xfc01b010>
   1b174:	2005883a 	mov	r2,r4
   1b178:	2807883a 	mov	r3,r5
   1b17c:	dfc00c17 	ldw	ra,48(sp)
   1b180:	df000b17 	ldw	fp,44(sp)
   1b184:	ddc00a17 	ldw	r23,40(sp)
   1b188:	dd800917 	ldw	r22,36(sp)
   1b18c:	dd400817 	ldw	r21,32(sp)
   1b190:	dd000717 	ldw	r20,28(sp)
   1b194:	dcc00617 	ldw	r19,24(sp)
   1b198:	dc800517 	ldw	r18,20(sp)
   1b19c:	dc400417 	ldw	r17,16(sp)
   1b1a0:	dc000317 	ldw	r16,12(sp)
   1b1a4:	dec00d04 	addi	sp,sp,52
   1b1a8:	f800283a 	ret
   1b1ac:	04c03fc4 	movi	r19,255
   1b1b0:	99c9803a 	cmpltu	r4,r19,r7
   1b1b4:	200890fa 	slli	r4,r4,3
   1b1b8:	003fa406 	br	1b04c <__alt_data_end+0xfc01b04c>
   1b1bc:	00803fc4 	movi	r2,255
   1b1c0:	14c5803a 	cmpltu	r2,r2,r19
   1b1c4:	100490fa 	slli	r2,r2,3
   1b1c8:	003fbc06 	br	1b0bc <__alt_data_end+0xfc01b0bc>
   1b1cc:	00804034 	movhi	r2,256
   1b1d0:	10bfffc4 	addi	r2,r2,-1
   1b1d4:	1180a636 	bltu	r2,r6,1b470 <__umoddi3+0x57c>
   1b1d8:	01000404 	movi	r4,16
   1b1dc:	003f5c06 	br	1af50 <__alt_data_end+0xfc01af50>
   1b1e0:	3d0e983a 	sll	r7,r7,r20
   1b1e4:	34ead83a 	srl	r21,r6,r19
   1b1e8:	8cc6d83a 	srl	r3,r17,r19
   1b1ec:	8d10983a 	sll	r8,r17,r20
   1b1f0:	3d6ab03a 	or	r21,r7,r21
   1b1f4:	a82cd43a 	srli	r22,r21,16
   1b1f8:	84e2d83a 	srl	r17,r16,r19
   1b1fc:	1809883a 	mov	r4,r3
   1b200:	b00b883a 	mov	r5,r22
   1b204:	8a22b03a 	or	r17,r17,r8
   1b208:	3524983a 	sll	r18,r6,r20
   1b20c:	dc400015 	stw	r17,0(sp)
   1b210:	d8c00115 	stw	r3,4(sp)
   1b214:	000cc480 	call	cc48 <__umodsi3>
   1b218:	d8c00117 	ldw	r3,4(sp)
   1b21c:	b00b883a 	mov	r5,r22
   1b220:	1039883a 	mov	fp,r2
   1b224:	1809883a 	mov	r4,r3
   1b228:	000cbe40 	call	cbe4 <__udivsi3>
   1b22c:	adffffcc 	andi	r23,r21,65535
   1b230:	100b883a 	mov	r5,r2
   1b234:	b809883a 	mov	r4,r23
   1b238:	1023883a 	mov	r17,r2
   1b23c:	000cca00 	call	cca0 <__mulsi3>
   1b240:	d9400017 	ldw	r5,0(sp)
   1b244:	e008943a 	slli	r4,fp,16
   1b248:	8520983a 	sll	r16,r16,r20
   1b24c:	2806d43a 	srli	r3,r5,16
   1b250:	1906b03a 	or	r3,r3,r4
   1b254:	1880042e 	bgeu	r3,r2,1b268 <__umoddi3+0x374>
   1b258:	1d47883a 	add	r3,r3,r21
   1b25c:	893fffc4 	addi	r4,r17,-1
   1b260:	1d40892e 	bgeu	r3,r21,1b488 <__umoddi3+0x594>
   1b264:	2023883a 	mov	r17,r4
   1b268:	18b9c83a 	sub	fp,r3,r2
   1b26c:	b00b883a 	mov	r5,r22
   1b270:	e009883a 	mov	r4,fp
   1b274:	000cc480 	call	cc48 <__umodsi3>
   1b278:	b00b883a 	mov	r5,r22
   1b27c:	e009883a 	mov	r4,fp
   1b280:	d8800215 	stw	r2,8(sp)
   1b284:	000cbe40 	call	cbe4 <__udivsi3>
   1b288:	100b883a 	mov	r5,r2
   1b28c:	b809883a 	mov	r4,r23
   1b290:	102d883a 	mov	r22,r2
   1b294:	000cca00 	call	cca0 <__mulsi3>
   1b298:	d9800217 	ldw	r6,8(sp)
   1b29c:	d8c00017 	ldw	r3,0(sp)
   1b2a0:	300c943a 	slli	r6,r6,16
   1b2a4:	1a3fffcc 	andi	r8,r3,65535
   1b2a8:	4190b03a 	or	r8,r8,r6
   1b2ac:	4080042e 	bgeu	r8,r2,1b2c0 <__umoddi3+0x3cc>
   1b2b0:	4551883a 	add	r8,r8,r21
   1b2b4:	b0ffffc4 	addi	r3,r22,-1
   1b2b8:	45406f2e 	bgeu	r8,r21,1b478 <__umoddi3+0x584>
   1b2bc:	182d883a 	mov	r22,r3
   1b2c0:	880e943a 	slli	r7,r17,16
   1b2c4:	9006d43a 	srli	r3,r18,16
   1b2c8:	91bfffcc 	andi	r6,r18,65535
   1b2cc:	3dacb03a 	or	r22,r7,r22
   1b2d0:	b02ed43a 	srli	r23,r22,16
   1b2d4:	b5bfffcc 	andi	r22,r22,65535
   1b2d8:	300b883a 	mov	r5,r6
   1b2dc:	b009883a 	mov	r4,r22
   1b2e0:	40a3c83a 	sub	r17,r8,r2
   1b2e4:	d8c00115 	stw	r3,4(sp)
   1b2e8:	d9800215 	stw	r6,8(sp)
   1b2ec:	000cca00 	call	cca0 <__mulsi3>
   1b2f0:	d9800217 	ldw	r6,8(sp)
   1b2f4:	b809883a 	mov	r4,r23
   1b2f8:	1039883a 	mov	fp,r2
   1b2fc:	300b883a 	mov	r5,r6
   1b300:	000cca00 	call	cca0 <__mulsi3>
   1b304:	d8c00117 	ldw	r3,4(sp)
   1b308:	b809883a 	mov	r4,r23
   1b30c:	d8800215 	stw	r2,8(sp)
   1b310:	180b883a 	mov	r5,r3
   1b314:	000cca00 	call	cca0 <__mulsi3>
   1b318:	d8c00117 	ldw	r3,4(sp)
   1b31c:	b009883a 	mov	r4,r22
   1b320:	102f883a 	mov	r23,r2
   1b324:	180b883a 	mov	r5,r3
   1b328:	000cca00 	call	cca0 <__mulsi3>
   1b32c:	d9800217 	ldw	r6,8(sp)
   1b330:	e006d43a 	srli	r3,fp,16
   1b334:	1185883a 	add	r2,r2,r6
   1b338:	1885883a 	add	r2,r3,r2
   1b33c:	1180022e 	bgeu	r2,r6,1b348 <__umoddi3+0x454>
   1b340:	00c00074 	movhi	r3,1
   1b344:	b8ef883a 	add	r23,r23,r3
   1b348:	1006d43a 	srli	r3,r2,16
   1b34c:	1004943a 	slli	r2,r2,16
   1b350:	e73fffcc 	andi	fp,fp,65535
   1b354:	1dc7883a 	add	r3,r3,r23
   1b358:	1739883a 	add	fp,r2,fp
   1b35c:	88c03a36 	bltu	r17,r3,1b448 <__umoddi3+0x554>
   1b360:	88c05126 	beq	r17,r3,1b4a8 <__umoddi3+0x5b4>
   1b364:	88c9c83a 	sub	r4,r17,r3
   1b368:	e00f883a 	mov	r7,fp
   1b36c:	81cfc83a 	sub	r7,r16,r7
   1b370:	81c7803a 	cmpltu	r3,r16,r7
   1b374:	20c7c83a 	sub	r3,r4,r3
   1b378:	1cc4983a 	sll	r2,r3,r19
   1b37c:	3d0ed83a 	srl	r7,r7,r20
   1b380:	1d06d83a 	srl	r3,r3,r20
   1b384:	11c4b03a 	or	r2,r2,r7
   1b388:	003f7c06 	br	1b17c <__alt_data_end+0xfc01b17c>
   1b38c:	9ca6983a 	sll	r19,r19,r18
   1b390:	88f8d83a 	srl	fp,r17,r3
   1b394:	80c4d83a 	srl	r2,r16,r3
   1b398:	982cd43a 	srli	r22,r19,16
   1b39c:	8ca2983a 	sll	r17,r17,r18
   1b3a0:	e009883a 	mov	r4,fp
   1b3a4:	b00b883a 	mov	r5,r22
   1b3a8:	146ab03a 	or	r21,r2,r17
   1b3ac:	000cc480 	call	cc48 <__umodsi3>
   1b3b0:	b00b883a 	mov	r5,r22
   1b3b4:	e009883a 	mov	r4,fp
   1b3b8:	1029883a 	mov	r20,r2
   1b3bc:	9dffffcc 	andi	r23,r19,65535
   1b3c0:	000cbe40 	call	cbe4 <__udivsi3>
   1b3c4:	b809883a 	mov	r4,r23
   1b3c8:	100b883a 	mov	r5,r2
   1b3cc:	000cca00 	call	cca0 <__mulsi3>
   1b3d0:	a008943a 	slli	r4,r20,16
   1b3d4:	a806d43a 	srli	r3,r21,16
   1b3d8:	84a8983a 	sll	r20,r16,r18
   1b3dc:	1906b03a 	or	r3,r3,r4
   1b3e0:	1880042e 	bgeu	r3,r2,1b3f4 <__umoddi3+0x500>
   1b3e4:	1cc7883a 	add	r3,r3,r19
   1b3e8:	1cc00236 	bltu	r3,r19,1b3f4 <__umoddi3+0x500>
   1b3ec:	1880012e 	bgeu	r3,r2,1b3f4 <__umoddi3+0x500>
   1b3f0:	1cc7883a 	add	r3,r3,r19
   1b3f4:	18a3c83a 	sub	r17,r3,r2
   1b3f8:	b00b883a 	mov	r5,r22
   1b3fc:	8809883a 	mov	r4,r17
   1b400:	000cc480 	call	cc48 <__umodsi3>
   1b404:	b00b883a 	mov	r5,r22
   1b408:	8809883a 	mov	r4,r17
   1b40c:	1021883a 	mov	r16,r2
   1b410:	000cbe40 	call	cbe4 <__udivsi3>
   1b414:	100b883a 	mov	r5,r2
   1b418:	b809883a 	mov	r4,r23
   1b41c:	8020943a 	slli	r16,r16,16
   1b420:	000cca00 	call	cca0 <__mulsi3>
   1b424:	a8ffffcc 	andi	r3,r21,65535
   1b428:	1c06b03a 	or	r3,r3,r16
   1b42c:	1880042e 	bgeu	r3,r2,1b440 <__umoddi3+0x54c>
   1b430:	1cc7883a 	add	r3,r3,r19
   1b434:	1cc00236 	bltu	r3,r19,1b440 <__umoddi3+0x54c>
   1b438:	1880012e 	bgeu	r3,r2,1b440 <__umoddi3+0x54c>
   1b43c:	1cc7883a 	add	r3,r3,r19
   1b440:	18a3c83a 	sub	r17,r3,r2
   1b444:	003f2906 	br	1b0ec <__alt_data_end+0xfc01b0ec>
   1b448:	e48fc83a 	sub	r7,fp,r18
   1b44c:	1d49c83a 	sub	r4,r3,r21
   1b450:	e1f9803a 	cmpltu	fp,fp,r7
   1b454:	2739c83a 	sub	fp,r4,fp
   1b458:	8f09c83a 	sub	r4,r17,fp
   1b45c:	003fc306 	br	1b36c <__alt_data_end+0xfc01b36c>
   1b460:	01000604 	movi	r4,24
   1b464:	003ef906 	br	1b04c <__alt_data_end+0xfc01b04c>
   1b468:	00800604 	movi	r2,24
   1b46c:	003f1306 	br	1b0bc <__alt_data_end+0xfc01b0bc>
   1b470:	01000604 	movi	r4,24
   1b474:	003eb606 	br	1af50 <__alt_data_end+0xfc01af50>
   1b478:	40bf902e 	bgeu	r8,r2,1b2bc <__alt_data_end+0xfc01b2bc>
   1b47c:	b5bfff84 	addi	r22,r22,-2
   1b480:	4551883a 	add	r8,r8,r21
   1b484:	003f8e06 	br	1b2c0 <__alt_data_end+0xfc01b2c0>
   1b488:	18bf762e 	bgeu	r3,r2,1b264 <__alt_data_end+0xfc01b264>
   1b48c:	8c7fff84 	addi	r17,r17,-2
   1b490:	1d47883a 	add	r3,r3,r21
   1b494:	003f7406 	br	1b268 <__alt_data_end+0xfc01b268>
   1b498:	1cc7883a 	add	r3,r3,r19
   1b49c:	003ecd06 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1b4a0:	8005883a 	mov	r2,r16
   1b4a4:	003ef806 	br	1b088 <__alt_data_end+0xfc01b088>
   1b4a8:	873fe736 	bltu	r16,fp,1b448 <__alt_data_end+0xfc01b448>
   1b4ac:	e00f883a 	mov	r7,fp
   1b4b0:	0009883a 	mov	r4,zero
   1b4b4:	003fad06 	br	1b36c <__alt_data_end+0xfc01b36c>

0001b4b8 <__adddf3>:
   1b4b8:	02c00434 	movhi	r11,16
   1b4bc:	5affffc4 	addi	r11,r11,-1
   1b4c0:	2806d7fa 	srli	r3,r5,31
   1b4c4:	2ad4703a 	and	r10,r5,r11
   1b4c8:	3ad2703a 	and	r9,r7,r11
   1b4cc:	3804d53a 	srli	r2,r7,20
   1b4d0:	3018d77a 	srli	r12,r6,29
   1b4d4:	280ad53a 	srli	r5,r5,20
   1b4d8:	501490fa 	slli	r10,r10,3
   1b4dc:	2010d77a 	srli	r8,r4,29
   1b4e0:	481290fa 	slli	r9,r9,3
   1b4e4:	380ed7fa 	srli	r7,r7,31
   1b4e8:	defffb04 	addi	sp,sp,-20
   1b4ec:	dc800215 	stw	r18,8(sp)
   1b4f0:	dc400115 	stw	r17,4(sp)
   1b4f4:	dc000015 	stw	r16,0(sp)
   1b4f8:	dfc00415 	stw	ra,16(sp)
   1b4fc:	dcc00315 	stw	r19,12(sp)
   1b500:	1c803fcc 	andi	r18,r3,255
   1b504:	2c01ffcc 	andi	r16,r5,2047
   1b508:	5210b03a 	or	r8,r10,r8
   1b50c:	202290fa 	slli	r17,r4,3
   1b510:	1081ffcc 	andi	r2,r2,2047
   1b514:	4b12b03a 	or	r9,r9,r12
   1b518:	300c90fa 	slli	r6,r6,3
   1b51c:	91c07526 	beq	r18,r7,1b6f4 <__adddf3+0x23c>
   1b520:	8087c83a 	sub	r3,r16,r2
   1b524:	00c0ab0e 	bge	zero,r3,1b7d4 <__adddf3+0x31c>
   1b528:	10002a1e 	bne	r2,zero,1b5d4 <__adddf3+0x11c>
   1b52c:	4984b03a 	or	r2,r9,r6
   1b530:	1000961e 	bne	r2,zero,1b78c <__adddf3+0x2d4>
   1b534:	888001cc 	andi	r2,r17,7
   1b538:	10000726 	beq	r2,zero,1b558 <__adddf3+0xa0>
   1b53c:	888003cc 	andi	r2,r17,15
   1b540:	00c00104 	movi	r3,4
   1b544:	10c00426 	beq	r2,r3,1b558 <__adddf3+0xa0>
   1b548:	88c7883a 	add	r3,r17,r3
   1b54c:	1c63803a 	cmpltu	r17,r3,r17
   1b550:	4451883a 	add	r8,r8,r17
   1b554:	1823883a 	mov	r17,r3
   1b558:	4080202c 	andhi	r2,r8,128
   1b55c:	10005926 	beq	r2,zero,1b6c4 <__adddf3+0x20c>
   1b560:	84000044 	addi	r16,r16,1
   1b564:	0081ffc4 	movi	r2,2047
   1b568:	8080ba26 	beq	r16,r2,1b854 <__adddf3+0x39c>
   1b56c:	00bfe034 	movhi	r2,65408
   1b570:	10bfffc4 	addi	r2,r2,-1
   1b574:	4090703a 	and	r8,r8,r2
   1b578:	4004977a 	slli	r2,r8,29
   1b57c:	4010927a 	slli	r8,r8,9
   1b580:	8822d0fa 	srli	r17,r17,3
   1b584:	8401ffcc 	andi	r16,r16,2047
   1b588:	4010d33a 	srli	r8,r8,12
   1b58c:	9007883a 	mov	r3,r18
   1b590:	1444b03a 	or	r2,r2,r17
   1b594:	8401ffcc 	andi	r16,r16,2047
   1b598:	8020953a 	slli	r16,r16,20
   1b59c:	18c03fcc 	andi	r3,r3,255
   1b5a0:	01000434 	movhi	r4,16
   1b5a4:	213fffc4 	addi	r4,r4,-1
   1b5a8:	180697fa 	slli	r3,r3,31
   1b5ac:	4110703a 	and	r8,r8,r4
   1b5b0:	4410b03a 	or	r8,r8,r16
   1b5b4:	40c6b03a 	or	r3,r8,r3
   1b5b8:	dfc00417 	ldw	ra,16(sp)
   1b5bc:	dcc00317 	ldw	r19,12(sp)
   1b5c0:	dc800217 	ldw	r18,8(sp)
   1b5c4:	dc400117 	ldw	r17,4(sp)
   1b5c8:	dc000017 	ldw	r16,0(sp)
   1b5cc:	dec00504 	addi	sp,sp,20
   1b5d0:	f800283a 	ret
   1b5d4:	0081ffc4 	movi	r2,2047
   1b5d8:	80bfd626 	beq	r16,r2,1b534 <__alt_data_end+0xfc01b534>
   1b5dc:	4a402034 	orhi	r9,r9,128
   1b5e0:	00800e04 	movi	r2,56
   1b5e4:	10c09f16 	blt	r2,r3,1b864 <__adddf3+0x3ac>
   1b5e8:	008007c4 	movi	r2,31
   1b5ec:	10c0c216 	blt	r2,r3,1b8f8 <__adddf3+0x440>
   1b5f0:	00800804 	movi	r2,32
   1b5f4:	10c5c83a 	sub	r2,r2,r3
   1b5f8:	488a983a 	sll	r5,r9,r2
   1b5fc:	30c8d83a 	srl	r4,r6,r3
   1b600:	3084983a 	sll	r2,r6,r2
   1b604:	48c6d83a 	srl	r3,r9,r3
   1b608:	290cb03a 	or	r6,r5,r4
   1b60c:	1004c03a 	cmpne	r2,r2,zero
   1b610:	308cb03a 	or	r6,r6,r2
   1b614:	898dc83a 	sub	r6,r17,r6
   1b618:	89a3803a 	cmpltu	r17,r17,r6
   1b61c:	40d1c83a 	sub	r8,r8,r3
   1b620:	4451c83a 	sub	r8,r8,r17
   1b624:	3023883a 	mov	r17,r6
   1b628:	4080202c 	andhi	r2,r8,128
   1b62c:	10002326 	beq	r2,zero,1b6bc <__adddf3+0x204>
   1b630:	04c02034 	movhi	r19,128
   1b634:	9cffffc4 	addi	r19,r19,-1
   1b638:	44e6703a 	and	r19,r8,r19
   1b63c:	98007626 	beq	r19,zero,1b818 <__adddf3+0x360>
   1b640:	9809883a 	mov	r4,r19
   1b644:	001dcf80 	call	1dcf8 <__clzsi2>
   1b648:	10fffe04 	addi	r3,r2,-8
   1b64c:	010007c4 	movi	r4,31
   1b650:	20c07716 	blt	r4,r3,1b830 <__adddf3+0x378>
   1b654:	00800804 	movi	r2,32
   1b658:	10c5c83a 	sub	r2,r2,r3
   1b65c:	8884d83a 	srl	r2,r17,r2
   1b660:	98d0983a 	sll	r8,r19,r3
   1b664:	88e2983a 	sll	r17,r17,r3
   1b668:	1204b03a 	or	r2,r2,r8
   1b66c:	1c007416 	blt	r3,r16,1b840 <__adddf3+0x388>
   1b670:	1c21c83a 	sub	r16,r3,r16
   1b674:	82000044 	addi	r8,r16,1
   1b678:	00c007c4 	movi	r3,31
   1b67c:	1a009116 	blt	r3,r8,1b8c4 <__adddf3+0x40c>
   1b680:	00c00804 	movi	r3,32
   1b684:	1a07c83a 	sub	r3,r3,r8
   1b688:	8a08d83a 	srl	r4,r17,r8
   1b68c:	88e2983a 	sll	r17,r17,r3
   1b690:	10c6983a 	sll	r3,r2,r3
   1b694:	1210d83a 	srl	r8,r2,r8
   1b698:	8804c03a 	cmpne	r2,r17,zero
   1b69c:	1906b03a 	or	r3,r3,r4
   1b6a0:	18a2b03a 	or	r17,r3,r2
   1b6a4:	0021883a 	mov	r16,zero
   1b6a8:	003fa206 	br	1b534 <__alt_data_end+0xfc01b534>
   1b6ac:	1890b03a 	or	r8,r3,r2
   1b6b0:	40017d26 	beq	r8,zero,1bca8 <__adddf3+0x7f0>
   1b6b4:	1011883a 	mov	r8,r2
   1b6b8:	1823883a 	mov	r17,r3
   1b6bc:	888001cc 	andi	r2,r17,7
   1b6c0:	103f9e1e 	bne	r2,zero,1b53c <__alt_data_end+0xfc01b53c>
   1b6c4:	4004977a 	slli	r2,r8,29
   1b6c8:	8822d0fa 	srli	r17,r17,3
   1b6cc:	4010d0fa 	srli	r8,r8,3
   1b6d0:	9007883a 	mov	r3,r18
   1b6d4:	1444b03a 	or	r2,r2,r17
   1b6d8:	0101ffc4 	movi	r4,2047
   1b6dc:	81002426 	beq	r16,r4,1b770 <__adddf3+0x2b8>
   1b6e0:	8120703a 	and	r16,r16,r4
   1b6e4:	01000434 	movhi	r4,16
   1b6e8:	213fffc4 	addi	r4,r4,-1
   1b6ec:	4110703a 	and	r8,r8,r4
   1b6f0:	003fa806 	br	1b594 <__alt_data_end+0xfc01b594>
   1b6f4:	8089c83a 	sub	r4,r16,r2
   1b6f8:	01005e0e 	bge	zero,r4,1b874 <__adddf3+0x3bc>
   1b6fc:	10002b26 	beq	r2,zero,1b7ac <__adddf3+0x2f4>
   1b700:	0081ffc4 	movi	r2,2047
   1b704:	80bf8b26 	beq	r16,r2,1b534 <__alt_data_end+0xfc01b534>
   1b708:	4a402034 	orhi	r9,r9,128
   1b70c:	00800e04 	movi	r2,56
   1b710:	1100a40e 	bge	r2,r4,1b9a4 <__adddf3+0x4ec>
   1b714:	498cb03a 	or	r6,r9,r6
   1b718:	300ac03a 	cmpne	r5,r6,zero
   1b71c:	0013883a 	mov	r9,zero
   1b720:	2c4b883a 	add	r5,r5,r17
   1b724:	2c63803a 	cmpltu	r17,r5,r17
   1b728:	4a11883a 	add	r8,r9,r8
   1b72c:	8a11883a 	add	r8,r17,r8
   1b730:	2823883a 	mov	r17,r5
   1b734:	4080202c 	andhi	r2,r8,128
   1b738:	103fe026 	beq	r2,zero,1b6bc <__alt_data_end+0xfc01b6bc>
   1b73c:	84000044 	addi	r16,r16,1
   1b740:	0081ffc4 	movi	r2,2047
   1b744:	8080d226 	beq	r16,r2,1ba90 <__adddf3+0x5d8>
   1b748:	00bfe034 	movhi	r2,65408
   1b74c:	10bfffc4 	addi	r2,r2,-1
   1b750:	4090703a 	and	r8,r8,r2
   1b754:	880ad07a 	srli	r5,r17,1
   1b758:	400897fa 	slli	r4,r8,31
   1b75c:	88c0004c 	andi	r3,r17,1
   1b760:	28e2b03a 	or	r17,r5,r3
   1b764:	4010d07a 	srli	r8,r8,1
   1b768:	2462b03a 	or	r17,r4,r17
   1b76c:	003f7106 	br	1b534 <__alt_data_end+0xfc01b534>
   1b770:	4088b03a 	or	r4,r8,r2
   1b774:	20014526 	beq	r4,zero,1bc8c <__adddf3+0x7d4>
   1b778:	01000434 	movhi	r4,16
   1b77c:	42000234 	orhi	r8,r8,8
   1b780:	213fffc4 	addi	r4,r4,-1
   1b784:	4110703a 	and	r8,r8,r4
   1b788:	003f8206 	br	1b594 <__alt_data_end+0xfc01b594>
   1b78c:	18ffffc4 	addi	r3,r3,-1
   1b790:	1800491e 	bne	r3,zero,1b8b8 <__adddf3+0x400>
   1b794:	898bc83a 	sub	r5,r17,r6
   1b798:	8963803a 	cmpltu	r17,r17,r5
   1b79c:	4251c83a 	sub	r8,r8,r9
   1b7a0:	4451c83a 	sub	r8,r8,r17
   1b7a4:	2823883a 	mov	r17,r5
   1b7a8:	003f9f06 	br	1b628 <__alt_data_end+0xfc01b628>
   1b7ac:	4984b03a 	or	r2,r9,r6
   1b7b0:	103f6026 	beq	r2,zero,1b534 <__alt_data_end+0xfc01b534>
   1b7b4:	213fffc4 	addi	r4,r4,-1
   1b7b8:	2000931e 	bne	r4,zero,1ba08 <__adddf3+0x550>
   1b7bc:	898d883a 	add	r6,r17,r6
   1b7c0:	3463803a 	cmpltu	r17,r6,r17
   1b7c4:	4251883a 	add	r8,r8,r9
   1b7c8:	8a11883a 	add	r8,r17,r8
   1b7cc:	3023883a 	mov	r17,r6
   1b7d0:	003fd806 	br	1b734 <__alt_data_end+0xfc01b734>
   1b7d4:	1800541e 	bne	r3,zero,1b928 <__adddf3+0x470>
   1b7d8:	80800044 	addi	r2,r16,1
   1b7dc:	1081ffcc 	andi	r2,r2,2047
   1b7e0:	00c00044 	movi	r3,1
   1b7e4:	1880a00e 	bge	r3,r2,1ba68 <__adddf3+0x5b0>
   1b7e8:	8989c83a 	sub	r4,r17,r6
   1b7ec:	8905803a 	cmpltu	r2,r17,r4
   1b7f0:	4267c83a 	sub	r19,r8,r9
   1b7f4:	98a7c83a 	sub	r19,r19,r2
   1b7f8:	9880202c 	andhi	r2,r19,128
   1b7fc:	10006326 	beq	r2,zero,1b98c <__adddf3+0x4d4>
   1b800:	3463c83a 	sub	r17,r6,r17
   1b804:	4a07c83a 	sub	r3,r9,r8
   1b808:	344d803a 	cmpltu	r6,r6,r17
   1b80c:	19a7c83a 	sub	r19,r3,r6
   1b810:	3825883a 	mov	r18,r7
   1b814:	983f8a1e 	bne	r19,zero,1b640 <__alt_data_end+0xfc01b640>
   1b818:	8809883a 	mov	r4,r17
   1b81c:	001dcf80 	call	1dcf8 <__clzsi2>
   1b820:	10800804 	addi	r2,r2,32
   1b824:	10fffe04 	addi	r3,r2,-8
   1b828:	010007c4 	movi	r4,31
   1b82c:	20ff890e 	bge	r4,r3,1b654 <__alt_data_end+0xfc01b654>
   1b830:	10bff604 	addi	r2,r2,-40
   1b834:	8884983a 	sll	r2,r17,r2
   1b838:	0023883a 	mov	r17,zero
   1b83c:	1c3f8c0e 	bge	r3,r16,1b670 <__alt_data_end+0xfc01b670>
   1b840:	023fe034 	movhi	r8,65408
   1b844:	423fffc4 	addi	r8,r8,-1
   1b848:	80e1c83a 	sub	r16,r16,r3
   1b84c:	1210703a 	and	r8,r2,r8
   1b850:	003f3806 	br	1b534 <__alt_data_end+0xfc01b534>
   1b854:	9007883a 	mov	r3,r18
   1b858:	0011883a 	mov	r8,zero
   1b85c:	0005883a 	mov	r2,zero
   1b860:	003f4c06 	br	1b594 <__alt_data_end+0xfc01b594>
   1b864:	498cb03a 	or	r6,r9,r6
   1b868:	300cc03a 	cmpne	r6,r6,zero
   1b86c:	0007883a 	mov	r3,zero
   1b870:	003f6806 	br	1b614 <__alt_data_end+0xfc01b614>
   1b874:	20009c1e 	bne	r4,zero,1bae8 <__adddf3+0x630>
   1b878:	80800044 	addi	r2,r16,1
   1b87c:	1141ffcc 	andi	r5,r2,2047
   1b880:	01000044 	movi	r4,1
   1b884:	2140670e 	bge	r4,r5,1ba24 <__adddf3+0x56c>
   1b888:	0101ffc4 	movi	r4,2047
   1b88c:	11007f26 	beq	r2,r4,1ba8c <__adddf3+0x5d4>
   1b890:	898d883a 	add	r6,r17,r6
   1b894:	4247883a 	add	r3,r8,r9
   1b898:	3451803a 	cmpltu	r8,r6,r17
   1b89c:	40d1883a 	add	r8,r8,r3
   1b8a0:	402297fa 	slli	r17,r8,31
   1b8a4:	300cd07a 	srli	r6,r6,1
   1b8a8:	4010d07a 	srli	r8,r8,1
   1b8ac:	1021883a 	mov	r16,r2
   1b8b0:	89a2b03a 	or	r17,r17,r6
   1b8b4:	003f1f06 	br	1b534 <__alt_data_end+0xfc01b534>
   1b8b8:	0081ffc4 	movi	r2,2047
   1b8bc:	80bf481e 	bne	r16,r2,1b5e0 <__alt_data_end+0xfc01b5e0>
   1b8c0:	003f1c06 	br	1b534 <__alt_data_end+0xfc01b534>
   1b8c4:	843ff844 	addi	r16,r16,-31
   1b8c8:	01000804 	movi	r4,32
   1b8cc:	1406d83a 	srl	r3,r2,r16
   1b8d0:	41005026 	beq	r8,r4,1ba14 <__adddf3+0x55c>
   1b8d4:	01001004 	movi	r4,64
   1b8d8:	2211c83a 	sub	r8,r4,r8
   1b8dc:	1204983a 	sll	r2,r2,r8
   1b8e0:	88a2b03a 	or	r17,r17,r2
   1b8e4:	8822c03a 	cmpne	r17,r17,zero
   1b8e8:	1c62b03a 	or	r17,r3,r17
   1b8ec:	0011883a 	mov	r8,zero
   1b8f0:	0021883a 	mov	r16,zero
   1b8f4:	003f7106 	br	1b6bc <__alt_data_end+0xfc01b6bc>
   1b8f8:	193ff804 	addi	r4,r3,-32
   1b8fc:	00800804 	movi	r2,32
   1b900:	4908d83a 	srl	r4,r9,r4
   1b904:	18804526 	beq	r3,r2,1ba1c <__adddf3+0x564>
   1b908:	00801004 	movi	r2,64
   1b90c:	10c5c83a 	sub	r2,r2,r3
   1b910:	4886983a 	sll	r3,r9,r2
   1b914:	198cb03a 	or	r6,r3,r6
   1b918:	300cc03a 	cmpne	r6,r6,zero
   1b91c:	218cb03a 	or	r6,r4,r6
   1b920:	0007883a 	mov	r3,zero
   1b924:	003f3b06 	br	1b614 <__alt_data_end+0xfc01b614>
   1b928:	80002a26 	beq	r16,zero,1b9d4 <__adddf3+0x51c>
   1b92c:	0101ffc4 	movi	r4,2047
   1b930:	11006826 	beq	r2,r4,1bad4 <__adddf3+0x61c>
   1b934:	00c7c83a 	sub	r3,zero,r3
   1b938:	42002034 	orhi	r8,r8,128
   1b93c:	01000e04 	movi	r4,56
   1b940:	20c07c16 	blt	r4,r3,1bb34 <__adddf3+0x67c>
   1b944:	010007c4 	movi	r4,31
   1b948:	20c0da16 	blt	r4,r3,1bcb4 <__adddf3+0x7fc>
   1b94c:	01000804 	movi	r4,32
   1b950:	20c9c83a 	sub	r4,r4,r3
   1b954:	4114983a 	sll	r10,r8,r4
   1b958:	88cad83a 	srl	r5,r17,r3
   1b95c:	8908983a 	sll	r4,r17,r4
   1b960:	40c6d83a 	srl	r3,r8,r3
   1b964:	5162b03a 	or	r17,r10,r5
   1b968:	2008c03a 	cmpne	r4,r4,zero
   1b96c:	8922b03a 	or	r17,r17,r4
   1b970:	3463c83a 	sub	r17,r6,r17
   1b974:	48c7c83a 	sub	r3,r9,r3
   1b978:	344d803a 	cmpltu	r6,r6,r17
   1b97c:	1991c83a 	sub	r8,r3,r6
   1b980:	1021883a 	mov	r16,r2
   1b984:	3825883a 	mov	r18,r7
   1b988:	003f2706 	br	1b628 <__alt_data_end+0xfc01b628>
   1b98c:	24d0b03a 	or	r8,r4,r19
   1b990:	40001b1e 	bne	r8,zero,1ba00 <__adddf3+0x548>
   1b994:	0005883a 	mov	r2,zero
   1b998:	0007883a 	mov	r3,zero
   1b99c:	0021883a 	mov	r16,zero
   1b9a0:	003f4d06 	br	1b6d8 <__alt_data_end+0xfc01b6d8>
   1b9a4:	008007c4 	movi	r2,31
   1b9a8:	11003c16 	blt	r2,r4,1ba9c <__adddf3+0x5e4>
   1b9ac:	00800804 	movi	r2,32
   1b9b0:	1105c83a 	sub	r2,r2,r4
   1b9b4:	488e983a 	sll	r7,r9,r2
   1b9b8:	310ad83a 	srl	r5,r6,r4
   1b9bc:	3084983a 	sll	r2,r6,r2
   1b9c0:	4912d83a 	srl	r9,r9,r4
   1b9c4:	394ab03a 	or	r5,r7,r5
   1b9c8:	1004c03a 	cmpne	r2,r2,zero
   1b9cc:	288ab03a 	or	r5,r5,r2
   1b9d0:	003f5306 	br	1b720 <__alt_data_end+0xfc01b720>
   1b9d4:	4448b03a 	or	r4,r8,r17
   1b9d8:	20003e26 	beq	r4,zero,1bad4 <__adddf3+0x61c>
   1b9dc:	00c6303a 	nor	r3,zero,r3
   1b9e0:	18003a1e 	bne	r3,zero,1bacc <__adddf3+0x614>
   1b9e4:	3463c83a 	sub	r17,r6,r17
   1b9e8:	4a07c83a 	sub	r3,r9,r8
   1b9ec:	344d803a 	cmpltu	r6,r6,r17
   1b9f0:	1991c83a 	sub	r8,r3,r6
   1b9f4:	1021883a 	mov	r16,r2
   1b9f8:	3825883a 	mov	r18,r7
   1b9fc:	003f0a06 	br	1b628 <__alt_data_end+0xfc01b628>
   1ba00:	2023883a 	mov	r17,r4
   1ba04:	003f0d06 	br	1b63c <__alt_data_end+0xfc01b63c>
   1ba08:	0081ffc4 	movi	r2,2047
   1ba0c:	80bf3f1e 	bne	r16,r2,1b70c <__alt_data_end+0xfc01b70c>
   1ba10:	003ec806 	br	1b534 <__alt_data_end+0xfc01b534>
   1ba14:	0005883a 	mov	r2,zero
   1ba18:	003fb106 	br	1b8e0 <__alt_data_end+0xfc01b8e0>
   1ba1c:	0007883a 	mov	r3,zero
   1ba20:	003fbc06 	br	1b914 <__alt_data_end+0xfc01b914>
   1ba24:	4444b03a 	or	r2,r8,r17
   1ba28:	8000871e 	bne	r16,zero,1bc48 <__adddf3+0x790>
   1ba2c:	1000ba26 	beq	r2,zero,1bd18 <__adddf3+0x860>
   1ba30:	4984b03a 	or	r2,r9,r6
   1ba34:	103ebf26 	beq	r2,zero,1b534 <__alt_data_end+0xfc01b534>
   1ba38:	8985883a 	add	r2,r17,r6
   1ba3c:	4247883a 	add	r3,r8,r9
   1ba40:	1451803a 	cmpltu	r8,r2,r17
   1ba44:	40d1883a 	add	r8,r8,r3
   1ba48:	40c0202c 	andhi	r3,r8,128
   1ba4c:	1023883a 	mov	r17,r2
   1ba50:	183f1a26 	beq	r3,zero,1b6bc <__alt_data_end+0xfc01b6bc>
   1ba54:	00bfe034 	movhi	r2,65408
   1ba58:	10bfffc4 	addi	r2,r2,-1
   1ba5c:	2021883a 	mov	r16,r4
   1ba60:	4090703a 	and	r8,r8,r2
   1ba64:	003eb306 	br	1b534 <__alt_data_end+0xfc01b534>
   1ba68:	4444b03a 	or	r2,r8,r17
   1ba6c:	8000291e 	bne	r16,zero,1bb14 <__adddf3+0x65c>
   1ba70:	10004b1e 	bne	r2,zero,1bba0 <__adddf3+0x6e8>
   1ba74:	4990b03a 	or	r8,r9,r6
   1ba78:	40008b26 	beq	r8,zero,1bca8 <__adddf3+0x7f0>
   1ba7c:	4811883a 	mov	r8,r9
   1ba80:	3023883a 	mov	r17,r6
   1ba84:	3825883a 	mov	r18,r7
   1ba88:	003eaa06 	br	1b534 <__alt_data_end+0xfc01b534>
   1ba8c:	1021883a 	mov	r16,r2
   1ba90:	0011883a 	mov	r8,zero
   1ba94:	0005883a 	mov	r2,zero
   1ba98:	003f0f06 	br	1b6d8 <__alt_data_end+0xfc01b6d8>
   1ba9c:	217ff804 	addi	r5,r4,-32
   1baa0:	00800804 	movi	r2,32
   1baa4:	494ad83a 	srl	r5,r9,r5
   1baa8:	20807d26 	beq	r4,r2,1bca0 <__adddf3+0x7e8>
   1baac:	00801004 	movi	r2,64
   1bab0:	1109c83a 	sub	r4,r2,r4
   1bab4:	4912983a 	sll	r9,r9,r4
   1bab8:	498cb03a 	or	r6,r9,r6
   1babc:	300cc03a 	cmpne	r6,r6,zero
   1bac0:	298ab03a 	or	r5,r5,r6
   1bac4:	0013883a 	mov	r9,zero
   1bac8:	003f1506 	br	1b720 <__alt_data_end+0xfc01b720>
   1bacc:	0101ffc4 	movi	r4,2047
   1bad0:	113f9a1e 	bne	r2,r4,1b93c <__alt_data_end+0xfc01b93c>
   1bad4:	4811883a 	mov	r8,r9
   1bad8:	3023883a 	mov	r17,r6
   1badc:	1021883a 	mov	r16,r2
   1bae0:	3825883a 	mov	r18,r7
   1bae4:	003e9306 	br	1b534 <__alt_data_end+0xfc01b534>
   1bae8:	8000161e 	bne	r16,zero,1bb44 <__adddf3+0x68c>
   1baec:	444ab03a 	or	r5,r8,r17
   1baf0:	28005126 	beq	r5,zero,1bc38 <__adddf3+0x780>
   1baf4:	0108303a 	nor	r4,zero,r4
   1baf8:	20004d1e 	bne	r4,zero,1bc30 <__adddf3+0x778>
   1bafc:	89a3883a 	add	r17,r17,r6
   1bb00:	4253883a 	add	r9,r8,r9
   1bb04:	898d803a 	cmpltu	r6,r17,r6
   1bb08:	3251883a 	add	r8,r6,r9
   1bb0c:	1021883a 	mov	r16,r2
   1bb10:	003f0806 	br	1b734 <__alt_data_end+0xfc01b734>
   1bb14:	1000301e 	bne	r2,zero,1bbd8 <__adddf3+0x720>
   1bb18:	4984b03a 	or	r2,r9,r6
   1bb1c:	10007126 	beq	r2,zero,1bce4 <__adddf3+0x82c>
   1bb20:	4811883a 	mov	r8,r9
   1bb24:	3023883a 	mov	r17,r6
   1bb28:	3825883a 	mov	r18,r7
   1bb2c:	0401ffc4 	movi	r16,2047
   1bb30:	003e8006 	br	1b534 <__alt_data_end+0xfc01b534>
   1bb34:	4462b03a 	or	r17,r8,r17
   1bb38:	8822c03a 	cmpne	r17,r17,zero
   1bb3c:	0007883a 	mov	r3,zero
   1bb40:	003f8b06 	br	1b970 <__alt_data_end+0xfc01b970>
   1bb44:	0141ffc4 	movi	r5,2047
   1bb48:	11403b26 	beq	r2,r5,1bc38 <__adddf3+0x780>
   1bb4c:	0109c83a 	sub	r4,zero,r4
   1bb50:	42002034 	orhi	r8,r8,128
   1bb54:	01400e04 	movi	r5,56
   1bb58:	29006716 	blt	r5,r4,1bcf8 <__adddf3+0x840>
   1bb5c:	014007c4 	movi	r5,31
   1bb60:	29007016 	blt	r5,r4,1bd24 <__adddf3+0x86c>
   1bb64:	01400804 	movi	r5,32
   1bb68:	290bc83a 	sub	r5,r5,r4
   1bb6c:	4154983a 	sll	r10,r8,r5
   1bb70:	890ed83a 	srl	r7,r17,r4
   1bb74:	894a983a 	sll	r5,r17,r5
   1bb78:	4108d83a 	srl	r4,r8,r4
   1bb7c:	51e2b03a 	or	r17,r10,r7
   1bb80:	280ac03a 	cmpne	r5,r5,zero
   1bb84:	8962b03a 	or	r17,r17,r5
   1bb88:	89a3883a 	add	r17,r17,r6
   1bb8c:	2253883a 	add	r9,r4,r9
   1bb90:	898d803a 	cmpltu	r6,r17,r6
   1bb94:	3251883a 	add	r8,r6,r9
   1bb98:	1021883a 	mov	r16,r2
   1bb9c:	003ee506 	br	1b734 <__alt_data_end+0xfc01b734>
   1bba0:	4984b03a 	or	r2,r9,r6
   1bba4:	103e6326 	beq	r2,zero,1b534 <__alt_data_end+0xfc01b534>
   1bba8:	8987c83a 	sub	r3,r17,r6
   1bbac:	88c9803a 	cmpltu	r4,r17,r3
   1bbb0:	4245c83a 	sub	r2,r8,r9
   1bbb4:	1105c83a 	sub	r2,r2,r4
   1bbb8:	1100202c 	andhi	r4,r2,128
   1bbbc:	203ebb26 	beq	r4,zero,1b6ac <__alt_data_end+0xfc01b6ac>
   1bbc0:	3463c83a 	sub	r17,r6,r17
   1bbc4:	4a07c83a 	sub	r3,r9,r8
   1bbc8:	344d803a 	cmpltu	r6,r6,r17
   1bbcc:	1991c83a 	sub	r8,r3,r6
   1bbd0:	3825883a 	mov	r18,r7
   1bbd4:	003e5706 	br	1b534 <__alt_data_end+0xfc01b534>
   1bbd8:	4984b03a 	or	r2,r9,r6
   1bbdc:	10002e26 	beq	r2,zero,1bc98 <__adddf3+0x7e0>
   1bbe0:	4004d0fa 	srli	r2,r8,3
   1bbe4:	8822d0fa 	srli	r17,r17,3
   1bbe8:	4010977a 	slli	r8,r8,29
   1bbec:	10c0022c 	andhi	r3,r2,8
   1bbf0:	4462b03a 	or	r17,r8,r17
   1bbf4:	18000826 	beq	r3,zero,1bc18 <__adddf3+0x760>
   1bbf8:	4808d0fa 	srli	r4,r9,3
   1bbfc:	20c0022c 	andhi	r3,r4,8
   1bc00:	1800051e 	bne	r3,zero,1bc18 <__adddf3+0x760>
   1bc04:	300cd0fa 	srli	r6,r6,3
   1bc08:	4806977a 	slli	r3,r9,29
   1bc0c:	2005883a 	mov	r2,r4
   1bc10:	3825883a 	mov	r18,r7
   1bc14:	19a2b03a 	or	r17,r3,r6
   1bc18:	8810d77a 	srli	r8,r17,29
   1bc1c:	100490fa 	slli	r2,r2,3
   1bc20:	882290fa 	slli	r17,r17,3
   1bc24:	0401ffc4 	movi	r16,2047
   1bc28:	4090b03a 	or	r8,r8,r2
   1bc2c:	003e4106 	br	1b534 <__alt_data_end+0xfc01b534>
   1bc30:	0141ffc4 	movi	r5,2047
   1bc34:	117fc71e 	bne	r2,r5,1bb54 <__alt_data_end+0xfc01bb54>
   1bc38:	4811883a 	mov	r8,r9
   1bc3c:	3023883a 	mov	r17,r6
   1bc40:	1021883a 	mov	r16,r2
   1bc44:	003e3b06 	br	1b534 <__alt_data_end+0xfc01b534>
   1bc48:	10002f26 	beq	r2,zero,1bd08 <__adddf3+0x850>
   1bc4c:	4984b03a 	or	r2,r9,r6
   1bc50:	10001126 	beq	r2,zero,1bc98 <__adddf3+0x7e0>
   1bc54:	4004d0fa 	srli	r2,r8,3
   1bc58:	8822d0fa 	srli	r17,r17,3
   1bc5c:	4010977a 	slli	r8,r8,29
   1bc60:	10c0022c 	andhi	r3,r2,8
   1bc64:	4462b03a 	or	r17,r8,r17
   1bc68:	183feb26 	beq	r3,zero,1bc18 <__alt_data_end+0xfc01bc18>
   1bc6c:	4808d0fa 	srli	r4,r9,3
   1bc70:	20c0022c 	andhi	r3,r4,8
   1bc74:	183fe81e 	bne	r3,zero,1bc18 <__alt_data_end+0xfc01bc18>
   1bc78:	300cd0fa 	srli	r6,r6,3
   1bc7c:	4806977a 	slli	r3,r9,29
   1bc80:	2005883a 	mov	r2,r4
   1bc84:	19a2b03a 	or	r17,r3,r6
   1bc88:	003fe306 	br	1bc18 <__alt_data_end+0xfc01bc18>
   1bc8c:	0011883a 	mov	r8,zero
   1bc90:	0005883a 	mov	r2,zero
   1bc94:	003e3f06 	br	1b594 <__alt_data_end+0xfc01b594>
   1bc98:	0401ffc4 	movi	r16,2047
   1bc9c:	003e2506 	br	1b534 <__alt_data_end+0xfc01b534>
   1bca0:	0013883a 	mov	r9,zero
   1bca4:	003f8406 	br	1bab8 <__alt_data_end+0xfc01bab8>
   1bca8:	0005883a 	mov	r2,zero
   1bcac:	0007883a 	mov	r3,zero
   1bcb0:	003e8906 	br	1b6d8 <__alt_data_end+0xfc01b6d8>
   1bcb4:	197ff804 	addi	r5,r3,-32
   1bcb8:	01000804 	movi	r4,32
   1bcbc:	414ad83a 	srl	r5,r8,r5
   1bcc0:	19002426 	beq	r3,r4,1bd54 <__adddf3+0x89c>
   1bcc4:	01001004 	movi	r4,64
   1bcc8:	20c7c83a 	sub	r3,r4,r3
   1bccc:	40c6983a 	sll	r3,r8,r3
   1bcd0:	1c46b03a 	or	r3,r3,r17
   1bcd4:	1806c03a 	cmpne	r3,r3,zero
   1bcd8:	28e2b03a 	or	r17,r5,r3
   1bcdc:	0007883a 	mov	r3,zero
   1bce0:	003f2306 	br	1b970 <__alt_data_end+0xfc01b970>
   1bce4:	0007883a 	mov	r3,zero
   1bce8:	5811883a 	mov	r8,r11
   1bcec:	00bfffc4 	movi	r2,-1
   1bcf0:	0401ffc4 	movi	r16,2047
   1bcf4:	003e7806 	br	1b6d8 <__alt_data_end+0xfc01b6d8>
   1bcf8:	4462b03a 	or	r17,r8,r17
   1bcfc:	8822c03a 	cmpne	r17,r17,zero
   1bd00:	0009883a 	mov	r4,zero
   1bd04:	003fa006 	br	1bb88 <__alt_data_end+0xfc01bb88>
   1bd08:	4811883a 	mov	r8,r9
   1bd0c:	3023883a 	mov	r17,r6
   1bd10:	0401ffc4 	movi	r16,2047
   1bd14:	003e0706 	br	1b534 <__alt_data_end+0xfc01b534>
   1bd18:	4811883a 	mov	r8,r9
   1bd1c:	3023883a 	mov	r17,r6
   1bd20:	003e0406 	br	1b534 <__alt_data_end+0xfc01b534>
   1bd24:	21fff804 	addi	r7,r4,-32
   1bd28:	01400804 	movi	r5,32
   1bd2c:	41ced83a 	srl	r7,r8,r7
   1bd30:	21400a26 	beq	r4,r5,1bd5c <__adddf3+0x8a4>
   1bd34:	01401004 	movi	r5,64
   1bd38:	2909c83a 	sub	r4,r5,r4
   1bd3c:	4108983a 	sll	r4,r8,r4
   1bd40:	2448b03a 	or	r4,r4,r17
   1bd44:	2008c03a 	cmpne	r4,r4,zero
   1bd48:	3922b03a 	or	r17,r7,r4
   1bd4c:	0009883a 	mov	r4,zero
   1bd50:	003f8d06 	br	1bb88 <__alt_data_end+0xfc01bb88>
   1bd54:	0007883a 	mov	r3,zero
   1bd58:	003fdd06 	br	1bcd0 <__alt_data_end+0xfc01bcd0>
   1bd5c:	0009883a 	mov	r4,zero
   1bd60:	003ff706 	br	1bd40 <__alt_data_end+0xfc01bd40>

0001bd64 <__divdf3>:
   1bd64:	defff004 	addi	sp,sp,-64
   1bd68:	dc800815 	stw	r18,32(sp)
   1bd6c:	2824d53a 	srli	r18,r5,20
   1bd70:	dd800c15 	stw	r22,48(sp)
   1bd74:	282cd7fa 	srli	r22,r5,31
   1bd78:	dc000615 	stw	r16,24(sp)
   1bd7c:	04000434 	movhi	r16,16
   1bd80:	843fffc4 	addi	r16,r16,-1
   1bd84:	dfc00f15 	stw	ra,60(sp)
   1bd88:	df000e15 	stw	fp,56(sp)
   1bd8c:	ddc00d15 	stw	r23,52(sp)
   1bd90:	dd400b15 	stw	r21,44(sp)
   1bd94:	dd000a15 	stw	r20,40(sp)
   1bd98:	dcc00915 	stw	r19,36(sp)
   1bd9c:	dc400715 	stw	r17,28(sp)
   1bda0:	9481ffcc 	andi	r18,r18,2047
   1bda4:	2c20703a 	and	r16,r5,r16
   1bda8:	b2003fcc 	andi	r8,r22,255
   1bdac:	90006126 	beq	r18,zero,1bf34 <__divdf3+0x1d0>
   1bdb0:	0081ffc4 	movi	r2,2047
   1bdb4:	202b883a 	mov	r21,r4
   1bdb8:	90803726 	beq	r18,r2,1be98 <__divdf3+0x134>
   1bdbc:	80800434 	orhi	r2,r16,16
   1bdc0:	100490fa 	slli	r2,r2,3
   1bdc4:	2020d77a 	srli	r16,r4,29
   1bdc8:	202a90fa 	slli	r21,r4,3
   1bdcc:	94bf0044 	addi	r18,r18,-1023
   1bdd0:	80a0b03a 	or	r16,r16,r2
   1bdd4:	0013883a 	mov	r9,zero
   1bdd8:	000b883a 	mov	r5,zero
   1bddc:	3806d53a 	srli	r3,r7,20
   1bde0:	382ed7fa 	srli	r23,r7,31
   1bde4:	04400434 	movhi	r17,16
   1bde8:	8c7fffc4 	addi	r17,r17,-1
   1bdec:	18c1ffcc 	andi	r3,r3,2047
   1bdf0:	3029883a 	mov	r20,r6
   1bdf4:	3c62703a 	and	r17,r7,r17
   1bdf8:	bf003fcc 	andi	fp,r23,255
   1bdfc:	18006e26 	beq	r3,zero,1bfb8 <__divdf3+0x254>
   1be00:	0081ffc4 	movi	r2,2047
   1be04:	18806626 	beq	r3,r2,1bfa0 <__divdf3+0x23c>
   1be08:	88800434 	orhi	r2,r17,16
   1be0c:	100490fa 	slli	r2,r2,3
   1be10:	3022d77a 	srli	r17,r6,29
   1be14:	302890fa 	slli	r20,r6,3
   1be18:	18ff0044 	addi	r3,r3,-1023
   1be1c:	88a2b03a 	or	r17,r17,r2
   1be20:	000f883a 	mov	r7,zero
   1be24:	b5e6f03a 	xor	r19,r22,r23
   1be28:	3a4cb03a 	or	r6,r7,r9
   1be2c:	008003c4 	movi	r2,15
   1be30:	9809883a 	mov	r4,r19
   1be34:	90c7c83a 	sub	r3,r18,r3
   1be38:	9cc03fcc 	andi	r19,r19,255
   1be3c:	11809636 	bltu	r2,r6,1c098 <__divdf3+0x334>
   1be40:	300c90ba 	slli	r6,r6,2
   1be44:	008000b4 	movhi	r2,2
   1be48:	10af9604 	addi	r2,r2,-16808
   1be4c:	308d883a 	add	r6,r6,r2
   1be50:	30800017 	ldw	r2,0(r6)
   1be54:	1000683a 	jmp	r2
   1be58:	0001c098 	cmpnei	zero,zero,1794
   1be5c:	0001bed0 	cmplti	zero,zero,1787
   1be60:	0001c088 	cmpgei	zero,zero,1794
   1be64:	0001bec4 	movi	zero,1787
   1be68:	0001c088 	cmpgei	zero,zero,1794
   1be6c:	0001c05c 	xori	zero,zero,1793
   1be70:	0001c088 	cmpgei	zero,zero,1794
   1be74:	0001bec4 	movi	zero,1787
   1be78:	0001bed0 	cmplti	zero,zero,1787
   1be7c:	0001bed0 	cmplti	zero,zero,1787
   1be80:	0001c05c 	xori	zero,zero,1793
   1be84:	0001bec4 	movi	zero,1787
   1be88:	0001beb4 	movhi	zero,1786
   1be8c:	0001beb4 	movhi	zero,1786
   1be90:	0001beb4 	movhi	zero,1786
   1be94:	0001c420 	cmpeqi	zero,zero,1808
   1be98:	2404b03a 	or	r2,r4,r16
   1be9c:	10006c1e 	bne	r2,zero,1c050 <__divdf3+0x2ec>
   1bea0:	02400204 	movi	r9,8
   1bea4:	0021883a 	mov	r16,zero
   1bea8:	002b883a 	mov	r21,zero
   1beac:	01400084 	movi	r5,2
   1beb0:	003fca06 	br	1bddc <__alt_data_end+0xfc01bddc>
   1beb4:	8023883a 	mov	r17,r16
   1beb8:	a829883a 	mov	r20,r21
   1bebc:	4039883a 	mov	fp,r8
   1bec0:	280f883a 	mov	r7,r5
   1bec4:	00800084 	movi	r2,2
   1bec8:	3881601e 	bne	r7,r2,1c44c <__divdf3+0x6e8>
   1becc:	e027883a 	mov	r19,fp
   1bed0:	9900004c 	andi	r4,r19,1
   1bed4:	0081ffc4 	movi	r2,2047
   1bed8:	0021883a 	mov	r16,zero
   1bedc:	002b883a 	mov	r21,zero
   1bee0:	1004953a 	slli	r2,r2,20
   1bee4:	20c03fcc 	andi	r3,r4,255
   1bee8:	01400434 	movhi	r5,16
   1beec:	297fffc4 	addi	r5,r5,-1
   1bef0:	180697fa 	slli	r3,r3,31
   1bef4:	8160703a 	and	r16,r16,r5
   1bef8:	80a0b03a 	or	r16,r16,r2
   1befc:	80c6b03a 	or	r3,r16,r3
   1bf00:	a805883a 	mov	r2,r21
   1bf04:	dfc00f17 	ldw	ra,60(sp)
   1bf08:	df000e17 	ldw	fp,56(sp)
   1bf0c:	ddc00d17 	ldw	r23,52(sp)
   1bf10:	dd800c17 	ldw	r22,48(sp)
   1bf14:	dd400b17 	ldw	r21,44(sp)
   1bf18:	dd000a17 	ldw	r20,40(sp)
   1bf1c:	dcc00917 	ldw	r19,36(sp)
   1bf20:	dc800817 	ldw	r18,32(sp)
   1bf24:	dc400717 	ldw	r17,28(sp)
   1bf28:	dc000617 	ldw	r16,24(sp)
   1bf2c:	dec01004 	addi	sp,sp,64
   1bf30:	f800283a 	ret
   1bf34:	2404b03a 	or	r2,r4,r16
   1bf38:	2023883a 	mov	r17,r4
   1bf3c:	10003f26 	beq	r2,zero,1c03c <__divdf3+0x2d8>
   1bf40:	80015e26 	beq	r16,zero,1c4bc <__divdf3+0x758>
   1bf44:	8009883a 	mov	r4,r16
   1bf48:	d9800215 	stw	r6,8(sp)
   1bf4c:	d9c00515 	stw	r7,20(sp)
   1bf50:	da000415 	stw	r8,16(sp)
   1bf54:	001dcf80 	call	1dcf8 <__clzsi2>
   1bf58:	d9800217 	ldw	r6,8(sp)
   1bf5c:	d9c00517 	ldw	r7,20(sp)
   1bf60:	da000417 	ldw	r8,16(sp)
   1bf64:	113ffd44 	addi	r4,r2,-11
   1bf68:	00c00704 	movi	r3,28
   1bf6c:	19014f16 	blt	r3,r4,1c4ac <__divdf3+0x748>
   1bf70:	00c00744 	movi	r3,29
   1bf74:	157ffe04 	addi	r21,r2,-8
   1bf78:	1907c83a 	sub	r3,r3,r4
   1bf7c:	8560983a 	sll	r16,r16,r21
   1bf80:	88c6d83a 	srl	r3,r17,r3
   1bf84:	8d6a983a 	sll	r21,r17,r21
   1bf88:	1c20b03a 	or	r16,r3,r16
   1bf8c:	1080fcc4 	addi	r2,r2,1011
   1bf90:	00a5c83a 	sub	r18,zero,r2
   1bf94:	0013883a 	mov	r9,zero
   1bf98:	000b883a 	mov	r5,zero
   1bf9c:	003f8f06 	br	1bddc <__alt_data_end+0xfc01bddc>
   1bfa0:	3444b03a 	or	r2,r6,r17
   1bfa4:	1000231e 	bne	r2,zero,1c034 <__divdf3+0x2d0>
   1bfa8:	0023883a 	mov	r17,zero
   1bfac:	0029883a 	mov	r20,zero
   1bfb0:	01c00084 	movi	r7,2
   1bfb4:	003f9b06 	br	1be24 <__alt_data_end+0xfc01be24>
   1bfb8:	3444b03a 	or	r2,r6,r17
   1bfbc:	10001926 	beq	r2,zero,1c024 <__divdf3+0x2c0>
   1bfc0:	88014b26 	beq	r17,zero,1c4f0 <__divdf3+0x78c>
   1bfc4:	8809883a 	mov	r4,r17
   1bfc8:	d9400115 	stw	r5,4(sp)
   1bfcc:	d9800215 	stw	r6,8(sp)
   1bfd0:	da000415 	stw	r8,16(sp)
   1bfd4:	da400315 	stw	r9,12(sp)
   1bfd8:	001dcf80 	call	1dcf8 <__clzsi2>
   1bfdc:	d9400117 	ldw	r5,4(sp)
   1bfe0:	d9800217 	ldw	r6,8(sp)
   1bfe4:	da000417 	ldw	r8,16(sp)
   1bfe8:	da400317 	ldw	r9,12(sp)
   1bfec:	113ffd44 	addi	r4,r2,-11
   1bff0:	00c00704 	movi	r3,28
   1bff4:	19013a16 	blt	r3,r4,1c4e0 <__divdf3+0x77c>
   1bff8:	00c00744 	movi	r3,29
   1bffc:	153ffe04 	addi	r20,r2,-8
   1c000:	1907c83a 	sub	r3,r3,r4
   1c004:	8d22983a 	sll	r17,r17,r20
   1c008:	30c6d83a 	srl	r3,r6,r3
   1c00c:	3528983a 	sll	r20,r6,r20
   1c010:	1c62b03a 	or	r17,r3,r17
   1c014:	1080fcc4 	addi	r2,r2,1011
   1c018:	0087c83a 	sub	r3,zero,r2
   1c01c:	000f883a 	mov	r7,zero
   1c020:	003f8006 	br	1be24 <__alt_data_end+0xfc01be24>
   1c024:	0023883a 	mov	r17,zero
   1c028:	0029883a 	mov	r20,zero
   1c02c:	01c00044 	movi	r7,1
   1c030:	003f7c06 	br	1be24 <__alt_data_end+0xfc01be24>
   1c034:	01c000c4 	movi	r7,3
   1c038:	003f7a06 	br	1be24 <__alt_data_end+0xfc01be24>
   1c03c:	02400104 	movi	r9,4
   1c040:	0021883a 	mov	r16,zero
   1c044:	002b883a 	mov	r21,zero
   1c048:	01400044 	movi	r5,1
   1c04c:	003f6306 	br	1bddc <__alt_data_end+0xfc01bddc>
   1c050:	02400304 	movi	r9,12
   1c054:	014000c4 	movi	r5,3
   1c058:	003f6006 	br	1bddc <__alt_data_end+0xfc01bddc>
   1c05c:	04000434 	movhi	r16,16
   1c060:	0009883a 	mov	r4,zero
   1c064:	843fffc4 	addi	r16,r16,-1
   1c068:	057fffc4 	movi	r21,-1
   1c06c:	0081ffc4 	movi	r2,2047
   1c070:	003f9b06 	br	1bee0 <__alt_data_end+0xfc01bee0>
   1c074:	00c00044 	movi	r3,1
   1c078:	1887c83a 	sub	r3,r3,r2
   1c07c:	01000e04 	movi	r4,56
   1c080:	20c1530e 	bge	r4,r3,1c5d0 <__divdf3+0x86c>
   1c084:	9900004c 	andi	r4,r19,1
   1c088:	0005883a 	mov	r2,zero
   1c08c:	0021883a 	mov	r16,zero
   1c090:	002b883a 	mov	r21,zero
   1c094:	003f9206 	br	1bee0 <__alt_data_end+0xfc01bee0>
   1c098:	8c012e36 	bltu	r17,r16,1c554 <__divdf3+0x7f0>
   1c09c:	84412c26 	beq	r16,r17,1c550 <__divdf3+0x7ec>
   1c0a0:	a82f883a 	mov	r23,r21
   1c0a4:	18ffffc4 	addi	r3,r3,-1
   1c0a8:	002b883a 	mov	r21,zero
   1c0ac:	a004d63a 	srli	r2,r20,24
   1c0b0:	8822923a 	slli	r17,r17,8
   1c0b4:	a028923a 	slli	r20,r20,8
   1c0b8:	8009883a 	mov	r4,r16
   1c0bc:	88acb03a 	or	r22,r17,r2
   1c0c0:	dd000015 	stw	r20,0(sp)
   1c0c4:	b028d43a 	srli	r20,r22,16
   1c0c8:	d8c00215 	stw	r3,8(sp)
   1c0cc:	b4bfffcc 	andi	r18,r22,65535
   1c0d0:	a00b883a 	mov	r5,r20
   1c0d4:	000cbe40 	call	cbe4 <__udivsi3>
   1c0d8:	100b883a 	mov	r5,r2
   1c0dc:	9009883a 	mov	r4,r18
   1c0e0:	1023883a 	mov	r17,r2
   1c0e4:	000cca00 	call	cca0 <__mulsi3>
   1c0e8:	8009883a 	mov	r4,r16
   1c0ec:	a00b883a 	mov	r5,r20
   1c0f0:	1039883a 	mov	fp,r2
   1c0f4:	000cc480 	call	cc48 <__umodsi3>
   1c0f8:	1004943a 	slli	r2,r2,16
   1c0fc:	b808d43a 	srli	r4,r23,16
   1c100:	d8c00217 	ldw	r3,8(sp)
   1c104:	2084b03a 	or	r2,r4,r2
   1c108:	1700062e 	bgeu	r2,fp,1c124 <__divdf3+0x3c0>
   1c10c:	1585883a 	add	r2,r2,r22
   1c110:	893fffc4 	addi	r4,r17,-1
   1c114:	15811d36 	bltu	r2,r22,1c58c <__divdf3+0x828>
   1c118:	17011c2e 	bgeu	r2,fp,1c58c <__divdf3+0x828>
   1c11c:	8c7fff84 	addi	r17,r17,-2
   1c120:	1585883a 	add	r2,r2,r22
   1c124:	1739c83a 	sub	fp,r2,fp
   1c128:	a00b883a 	mov	r5,r20
   1c12c:	e009883a 	mov	r4,fp
   1c130:	d8c00215 	stw	r3,8(sp)
   1c134:	000cbe40 	call	cbe4 <__udivsi3>
   1c138:	100b883a 	mov	r5,r2
   1c13c:	9009883a 	mov	r4,r18
   1c140:	1021883a 	mov	r16,r2
   1c144:	000cca00 	call	cca0 <__mulsi3>
   1c148:	a00b883a 	mov	r5,r20
   1c14c:	e009883a 	mov	r4,fp
   1c150:	d8800415 	stw	r2,16(sp)
   1c154:	000cc480 	call	cc48 <__umodsi3>
   1c158:	1004943a 	slli	r2,r2,16
   1c15c:	da000417 	ldw	r8,16(sp)
   1c160:	bdffffcc 	andi	r23,r23,65535
   1c164:	b884b03a 	or	r2,r23,r2
   1c168:	d8c00217 	ldw	r3,8(sp)
   1c16c:	1200062e 	bgeu	r2,r8,1c188 <__divdf3+0x424>
   1c170:	1585883a 	add	r2,r2,r22
   1c174:	813fffc4 	addi	r4,r16,-1
   1c178:	15810236 	bltu	r2,r22,1c584 <__divdf3+0x820>
   1c17c:	1201012e 	bgeu	r2,r8,1c584 <__divdf3+0x820>
   1c180:	843fff84 	addi	r16,r16,-2
   1c184:	1585883a 	add	r2,r2,r22
   1c188:	8822943a 	slli	r17,r17,16
   1c18c:	d9800017 	ldw	r6,0(sp)
   1c190:	1211c83a 	sub	r8,r2,r8
   1c194:	8c22b03a 	or	r17,r17,r16
   1c198:	373fffcc 	andi	fp,r6,65535
   1c19c:	8abfffcc 	andi	r10,r17,65535
   1c1a0:	8820d43a 	srli	r16,r17,16
   1c1a4:	5009883a 	mov	r4,r10
   1c1a8:	e00b883a 	mov	r5,fp
   1c1ac:	302ed43a 	srli	r23,r6,16
   1c1b0:	d8c00215 	stw	r3,8(sp)
   1c1b4:	da000415 	stw	r8,16(sp)
   1c1b8:	da800115 	stw	r10,4(sp)
   1c1bc:	000cca00 	call	cca0 <__mulsi3>
   1c1c0:	800b883a 	mov	r5,r16
   1c1c4:	e009883a 	mov	r4,fp
   1c1c8:	d8800515 	stw	r2,20(sp)
   1c1cc:	000cca00 	call	cca0 <__mulsi3>
   1c1d0:	8009883a 	mov	r4,r16
   1c1d4:	b80b883a 	mov	r5,r23
   1c1d8:	d8800315 	stw	r2,12(sp)
   1c1dc:	000cca00 	call	cca0 <__mulsi3>
   1c1e0:	da800117 	ldw	r10,4(sp)
   1c1e4:	b80b883a 	mov	r5,r23
   1c1e8:	1021883a 	mov	r16,r2
   1c1ec:	5009883a 	mov	r4,r10
   1c1f0:	000cca00 	call	cca0 <__mulsi3>
   1c1f4:	d9c00517 	ldw	r7,20(sp)
   1c1f8:	da400317 	ldw	r9,12(sp)
   1c1fc:	d8c00217 	ldw	r3,8(sp)
   1c200:	3808d43a 	srli	r4,r7,16
   1c204:	1245883a 	add	r2,r2,r9
   1c208:	da000417 	ldw	r8,16(sp)
   1c20c:	2085883a 	add	r2,r4,r2
   1c210:	1240022e 	bgeu	r2,r9,1c21c <__divdf3+0x4b8>
   1c214:	01000074 	movhi	r4,1
   1c218:	8121883a 	add	r16,r16,r4
   1c21c:	1008d43a 	srli	r4,r2,16
   1c220:	1004943a 	slli	r2,r2,16
   1c224:	39ffffcc 	andi	r7,r7,65535
   1c228:	2409883a 	add	r4,r4,r16
   1c22c:	11c5883a 	add	r2,r2,r7
   1c230:	4100bb36 	bltu	r8,r4,1c520 <__divdf3+0x7bc>
   1c234:	4100d726 	beq	r8,r4,1c594 <__divdf3+0x830>
   1c238:	4109c83a 	sub	r4,r8,r4
   1c23c:	a8a1c83a 	sub	r16,r21,r2
   1c240:	ac2b803a 	cmpltu	r21,r21,r16
   1c244:	256bc83a 	sub	r21,r4,r21
   1c248:	b540d926 	beq	r22,r21,1c5b0 <__divdf3+0x84c>
   1c24c:	a00b883a 	mov	r5,r20
   1c250:	a809883a 	mov	r4,r21
   1c254:	d8c00215 	stw	r3,8(sp)
   1c258:	000cbe40 	call	cbe4 <__udivsi3>
   1c25c:	100b883a 	mov	r5,r2
   1c260:	9009883a 	mov	r4,r18
   1c264:	d8800515 	stw	r2,20(sp)
   1c268:	000cca00 	call	cca0 <__mulsi3>
   1c26c:	a809883a 	mov	r4,r21
   1c270:	a00b883a 	mov	r5,r20
   1c274:	d8800415 	stw	r2,16(sp)
   1c278:	000cc480 	call	cc48 <__umodsi3>
   1c27c:	1004943a 	slli	r2,r2,16
   1c280:	8008d43a 	srli	r4,r16,16
   1c284:	da000417 	ldw	r8,16(sp)
   1c288:	d8c00217 	ldw	r3,8(sp)
   1c28c:	2084b03a 	or	r2,r4,r2
   1c290:	d9c00517 	ldw	r7,20(sp)
   1c294:	1200062e 	bgeu	r2,r8,1c2b0 <__divdf3+0x54c>
   1c298:	1585883a 	add	r2,r2,r22
   1c29c:	393fffc4 	addi	r4,r7,-1
   1c2a0:	1580c536 	bltu	r2,r22,1c5b8 <__divdf3+0x854>
   1c2a4:	1200c42e 	bgeu	r2,r8,1c5b8 <__divdf3+0x854>
   1c2a8:	39ffff84 	addi	r7,r7,-2
   1c2ac:	1585883a 	add	r2,r2,r22
   1c2b0:	122bc83a 	sub	r21,r2,r8
   1c2b4:	a00b883a 	mov	r5,r20
   1c2b8:	a809883a 	mov	r4,r21
   1c2bc:	d8c00215 	stw	r3,8(sp)
   1c2c0:	d9c00515 	stw	r7,20(sp)
   1c2c4:	000cbe40 	call	cbe4 <__udivsi3>
   1c2c8:	9009883a 	mov	r4,r18
   1c2cc:	100b883a 	mov	r5,r2
   1c2d0:	d8800415 	stw	r2,16(sp)
   1c2d4:	000cca00 	call	cca0 <__mulsi3>
   1c2d8:	a809883a 	mov	r4,r21
   1c2dc:	a00b883a 	mov	r5,r20
   1c2e0:	1025883a 	mov	r18,r2
   1c2e4:	000cc480 	call	cc48 <__umodsi3>
   1c2e8:	1004943a 	slli	r2,r2,16
   1c2ec:	813fffcc 	andi	r4,r16,65535
   1c2f0:	d8c00217 	ldw	r3,8(sp)
   1c2f4:	20a0b03a 	or	r16,r4,r2
   1c2f8:	d9c00517 	ldw	r7,20(sp)
   1c2fc:	da000417 	ldw	r8,16(sp)
   1c300:	8480062e 	bgeu	r16,r18,1c31c <__divdf3+0x5b8>
   1c304:	85a1883a 	add	r16,r16,r22
   1c308:	40bfffc4 	addi	r2,r8,-1
   1c30c:	8580ac36 	bltu	r16,r22,1c5c0 <__divdf3+0x85c>
   1c310:	8480ab2e 	bgeu	r16,r18,1c5c0 <__divdf3+0x85c>
   1c314:	423fff84 	addi	r8,r8,-2
   1c318:	85a1883a 	add	r16,r16,r22
   1c31c:	3804943a 	slli	r2,r7,16
   1c320:	84a1c83a 	sub	r16,r16,r18
   1c324:	e009883a 	mov	r4,fp
   1c328:	1228b03a 	or	r20,r2,r8
   1c32c:	a1ffffcc 	andi	r7,r20,65535
   1c330:	a024d43a 	srli	r18,r20,16
   1c334:	380b883a 	mov	r5,r7
   1c338:	d8c00215 	stw	r3,8(sp)
   1c33c:	d9c00515 	stw	r7,20(sp)
   1c340:	000cca00 	call	cca0 <__mulsi3>
   1c344:	900b883a 	mov	r5,r18
   1c348:	e009883a 	mov	r4,fp
   1c34c:	102b883a 	mov	r21,r2
   1c350:	000cca00 	call	cca0 <__mulsi3>
   1c354:	900b883a 	mov	r5,r18
   1c358:	b809883a 	mov	r4,r23
   1c35c:	1039883a 	mov	fp,r2
   1c360:	000cca00 	call	cca0 <__mulsi3>
   1c364:	d9c00517 	ldw	r7,20(sp)
   1c368:	b80b883a 	mov	r5,r23
   1c36c:	1025883a 	mov	r18,r2
   1c370:	3809883a 	mov	r4,r7
   1c374:	000cca00 	call	cca0 <__mulsi3>
   1c378:	a808d43a 	srli	r4,r21,16
   1c37c:	1705883a 	add	r2,r2,fp
   1c380:	d8c00217 	ldw	r3,8(sp)
   1c384:	2085883a 	add	r2,r4,r2
   1c388:	1700022e 	bgeu	r2,fp,1c394 <__divdf3+0x630>
   1c38c:	01000074 	movhi	r4,1
   1c390:	9125883a 	add	r18,r18,r4
   1c394:	1008d43a 	srli	r4,r2,16
   1c398:	1004943a 	slli	r2,r2,16
   1c39c:	ad7fffcc 	andi	r21,r21,65535
   1c3a0:	2489883a 	add	r4,r4,r18
   1c3a4:	1545883a 	add	r2,r2,r21
   1c3a8:	81003836 	bltu	r16,r4,1c48c <__divdf3+0x728>
   1c3ac:	81003626 	beq	r16,r4,1c488 <__divdf3+0x724>
   1c3b0:	a5000054 	ori	r20,r20,1
   1c3b4:	1880ffc4 	addi	r2,r3,1023
   1c3b8:	00bf2e0e 	bge	zero,r2,1c074 <__alt_data_end+0xfc01c074>
   1c3bc:	a10001cc 	andi	r4,r20,7
   1c3c0:	20000726 	beq	r4,zero,1c3e0 <__divdf3+0x67c>
   1c3c4:	a10003cc 	andi	r4,r20,15
   1c3c8:	01400104 	movi	r5,4
   1c3cc:	21400426 	beq	r4,r5,1c3e0 <__divdf3+0x67c>
   1c3d0:	a149883a 	add	r4,r20,r5
   1c3d4:	2529803a 	cmpltu	r20,r4,r20
   1c3d8:	8d23883a 	add	r17,r17,r20
   1c3dc:	2029883a 	mov	r20,r4
   1c3e0:	8900402c 	andhi	r4,r17,256
   1c3e4:	20000426 	beq	r4,zero,1c3f8 <__divdf3+0x694>
   1c3e8:	18810004 	addi	r2,r3,1024
   1c3ec:	00ffc034 	movhi	r3,65280
   1c3f0:	18ffffc4 	addi	r3,r3,-1
   1c3f4:	88e2703a 	and	r17,r17,r3
   1c3f8:	00c1ff84 	movi	r3,2046
   1c3fc:	18beb416 	blt	r3,r2,1bed0 <__alt_data_end+0xfc01bed0>
   1c400:	a028d0fa 	srli	r20,r20,3
   1c404:	882a977a 	slli	r21,r17,29
   1c408:	8820927a 	slli	r16,r17,9
   1c40c:	1081ffcc 	andi	r2,r2,2047
   1c410:	ad2ab03a 	or	r21,r21,r20
   1c414:	8020d33a 	srli	r16,r16,12
   1c418:	9900004c 	andi	r4,r19,1
   1c41c:	003eb006 	br	1bee0 <__alt_data_end+0xfc01bee0>
   1c420:	8080022c 	andhi	r2,r16,8
   1c424:	10001226 	beq	r2,zero,1c470 <__divdf3+0x70c>
   1c428:	8880022c 	andhi	r2,r17,8
   1c42c:	1000101e 	bne	r2,zero,1c470 <__divdf3+0x70c>
   1c430:	00800434 	movhi	r2,16
   1c434:	8c000234 	orhi	r16,r17,8
   1c438:	10bfffc4 	addi	r2,r2,-1
   1c43c:	b809883a 	mov	r4,r23
   1c440:	80a0703a 	and	r16,r16,r2
   1c444:	a02b883a 	mov	r21,r20
   1c448:	003f0806 	br	1c06c <__alt_data_end+0xfc01c06c>
   1c44c:	008000c4 	movi	r2,3
   1c450:	3880b126 	beq	r7,r2,1c718 <__divdf3+0x9b4>
   1c454:	00800044 	movi	r2,1
   1c458:	38805b1e 	bne	r7,r2,1c5c8 <__divdf3+0x864>
   1c45c:	e009883a 	mov	r4,fp
   1c460:	0005883a 	mov	r2,zero
   1c464:	0021883a 	mov	r16,zero
   1c468:	002b883a 	mov	r21,zero
   1c46c:	003e9c06 	br	1bee0 <__alt_data_end+0xfc01bee0>
   1c470:	00800434 	movhi	r2,16
   1c474:	84000234 	orhi	r16,r16,8
   1c478:	10bfffc4 	addi	r2,r2,-1
   1c47c:	b009883a 	mov	r4,r22
   1c480:	80a0703a 	and	r16,r16,r2
   1c484:	003ef906 	br	1c06c <__alt_data_end+0xfc01c06c>
   1c488:	103fca26 	beq	r2,zero,1c3b4 <__alt_data_end+0xfc01c3b4>
   1c48c:	b421883a 	add	r16,r22,r16
   1c490:	a17fffc4 	addi	r5,r20,-1
   1c494:	8580422e 	bgeu	r16,r22,1c5a0 <__divdf3+0x83c>
   1c498:	2829883a 	mov	r20,r5
   1c49c:	813fc41e 	bne	r16,r4,1c3b0 <__alt_data_end+0xfc01c3b0>
   1c4a0:	d9800017 	ldw	r6,0(sp)
   1c4a4:	30bfc21e 	bne	r6,r2,1c3b0 <__alt_data_end+0xfc01c3b0>
   1c4a8:	003fc206 	br	1c3b4 <__alt_data_end+0xfc01c3b4>
   1c4ac:	143ff604 	addi	r16,r2,-40
   1c4b0:	8c20983a 	sll	r16,r17,r16
   1c4b4:	002b883a 	mov	r21,zero
   1c4b8:	003eb406 	br	1bf8c <__alt_data_end+0xfc01bf8c>
   1c4bc:	d9800215 	stw	r6,8(sp)
   1c4c0:	d9c00515 	stw	r7,20(sp)
   1c4c4:	da000415 	stw	r8,16(sp)
   1c4c8:	001dcf80 	call	1dcf8 <__clzsi2>
   1c4cc:	10800804 	addi	r2,r2,32
   1c4d0:	da000417 	ldw	r8,16(sp)
   1c4d4:	d9c00517 	ldw	r7,20(sp)
   1c4d8:	d9800217 	ldw	r6,8(sp)
   1c4dc:	003ea106 	br	1bf64 <__alt_data_end+0xfc01bf64>
   1c4e0:	147ff604 	addi	r17,r2,-40
   1c4e4:	3462983a 	sll	r17,r6,r17
   1c4e8:	0029883a 	mov	r20,zero
   1c4ec:	003ec906 	br	1c014 <__alt_data_end+0xfc01c014>
   1c4f0:	3009883a 	mov	r4,r6
   1c4f4:	d9400115 	stw	r5,4(sp)
   1c4f8:	d9800215 	stw	r6,8(sp)
   1c4fc:	da000415 	stw	r8,16(sp)
   1c500:	da400315 	stw	r9,12(sp)
   1c504:	001dcf80 	call	1dcf8 <__clzsi2>
   1c508:	10800804 	addi	r2,r2,32
   1c50c:	da400317 	ldw	r9,12(sp)
   1c510:	da000417 	ldw	r8,16(sp)
   1c514:	d9800217 	ldw	r6,8(sp)
   1c518:	d9400117 	ldw	r5,4(sp)
   1c51c:	003eb306 	br	1bfec <__alt_data_end+0xfc01bfec>
   1c520:	d9800017 	ldw	r6,0(sp)
   1c524:	a9ab883a 	add	r21,r21,r6
   1c528:	a98b803a 	cmpltu	r5,r21,r6
   1c52c:	2d8b883a 	add	r5,r5,r22
   1c530:	2a11883a 	add	r8,r5,r8
   1c534:	897fffc4 	addi	r5,r17,-1
   1c538:	b2000c2e 	bgeu	r22,r8,1c56c <__divdf3+0x808>
   1c53c:	41003f36 	bltu	r8,r4,1c63c <__divdf3+0x8d8>
   1c540:	22006c26 	beq	r4,r8,1c6f4 <__divdf3+0x990>
   1c544:	4109c83a 	sub	r4,r8,r4
   1c548:	2823883a 	mov	r17,r5
   1c54c:	003f3b06 	br	1c23c <__alt_data_end+0xfc01c23c>
   1c550:	ad3ed336 	bltu	r21,r20,1c0a0 <__alt_data_end+0xfc01c0a0>
   1c554:	a804d07a 	srli	r2,r21,1
   1c558:	802e97fa 	slli	r23,r16,31
   1c55c:	a82a97fa 	slli	r21,r21,31
   1c560:	8020d07a 	srli	r16,r16,1
   1c564:	b8aeb03a 	or	r23,r23,r2
   1c568:	003ed006 	br	1c0ac <__alt_data_end+0xfc01c0ac>
   1c56c:	b23ff51e 	bne	r22,r8,1c544 <__alt_data_end+0xfc01c544>
   1c570:	d9800017 	ldw	r6,0(sp)
   1c574:	a9bff12e 	bgeu	r21,r6,1c53c <__alt_data_end+0xfc01c53c>
   1c578:	b109c83a 	sub	r4,r22,r4
   1c57c:	2823883a 	mov	r17,r5
   1c580:	003f2e06 	br	1c23c <__alt_data_end+0xfc01c23c>
   1c584:	2021883a 	mov	r16,r4
   1c588:	003eff06 	br	1c188 <__alt_data_end+0xfc01c188>
   1c58c:	2023883a 	mov	r17,r4
   1c590:	003ee406 	br	1c124 <__alt_data_end+0xfc01c124>
   1c594:	a8bfe236 	bltu	r21,r2,1c520 <__alt_data_end+0xfc01c520>
   1c598:	0009883a 	mov	r4,zero
   1c59c:	003f2706 	br	1c23c <__alt_data_end+0xfc01c23c>
   1c5a0:	81002d36 	bltu	r16,r4,1c658 <__divdf3+0x8f4>
   1c5a4:	24005626 	beq	r4,r16,1c700 <__divdf3+0x99c>
   1c5a8:	2829883a 	mov	r20,r5
   1c5ac:	003f8006 	br	1c3b0 <__alt_data_end+0xfc01c3b0>
   1c5b0:	053fffc4 	movi	r20,-1
   1c5b4:	003f7f06 	br	1c3b4 <__alt_data_end+0xfc01c3b4>
   1c5b8:	200f883a 	mov	r7,r4
   1c5bc:	003f3c06 	br	1c2b0 <__alt_data_end+0xfc01c2b0>
   1c5c0:	1011883a 	mov	r8,r2
   1c5c4:	003f5506 	br	1c31c <__alt_data_end+0xfc01c31c>
   1c5c8:	e027883a 	mov	r19,fp
   1c5cc:	003f7906 	br	1c3b4 <__alt_data_end+0xfc01c3b4>
   1c5d0:	010007c4 	movi	r4,31
   1c5d4:	20c02816 	blt	r4,r3,1c678 <__divdf3+0x914>
   1c5d8:	00800804 	movi	r2,32
   1c5dc:	10c5c83a 	sub	r2,r2,r3
   1c5e0:	888a983a 	sll	r5,r17,r2
   1c5e4:	a0c8d83a 	srl	r4,r20,r3
   1c5e8:	a084983a 	sll	r2,r20,r2
   1c5ec:	88e2d83a 	srl	r17,r17,r3
   1c5f0:	2906b03a 	or	r3,r5,r4
   1c5f4:	1004c03a 	cmpne	r2,r2,zero
   1c5f8:	1886b03a 	or	r3,r3,r2
   1c5fc:	188001cc 	andi	r2,r3,7
   1c600:	10000726 	beq	r2,zero,1c620 <__divdf3+0x8bc>
   1c604:	188003cc 	andi	r2,r3,15
   1c608:	01000104 	movi	r4,4
   1c60c:	11000426 	beq	r2,r4,1c620 <__divdf3+0x8bc>
   1c610:	1805883a 	mov	r2,r3
   1c614:	10c00104 	addi	r3,r2,4
   1c618:	1885803a 	cmpltu	r2,r3,r2
   1c61c:	88a3883a 	add	r17,r17,r2
   1c620:	8880202c 	andhi	r2,r17,128
   1c624:	10002926 	beq	r2,zero,1c6cc <__divdf3+0x968>
   1c628:	9900004c 	andi	r4,r19,1
   1c62c:	00800044 	movi	r2,1
   1c630:	0021883a 	mov	r16,zero
   1c634:	002b883a 	mov	r21,zero
   1c638:	003e2906 	br	1bee0 <__alt_data_end+0xfc01bee0>
   1c63c:	d9800017 	ldw	r6,0(sp)
   1c640:	8c7fff84 	addi	r17,r17,-2
   1c644:	a9ab883a 	add	r21,r21,r6
   1c648:	a98b803a 	cmpltu	r5,r21,r6
   1c64c:	2d8b883a 	add	r5,r5,r22
   1c650:	2a11883a 	add	r8,r5,r8
   1c654:	003ef806 	br	1c238 <__alt_data_end+0xfc01c238>
   1c658:	d9800017 	ldw	r6,0(sp)
   1c65c:	318f883a 	add	r7,r6,r6
   1c660:	398b803a 	cmpltu	r5,r7,r6
   1c664:	2d8d883a 	add	r6,r5,r22
   1c668:	81a1883a 	add	r16,r16,r6
   1c66c:	a17fff84 	addi	r5,r20,-2
   1c670:	d9c00015 	stw	r7,0(sp)
   1c674:	003f8806 	br	1c498 <__alt_data_end+0xfc01c498>
   1c678:	013ff844 	movi	r4,-31
   1c67c:	2085c83a 	sub	r2,r4,r2
   1c680:	8888d83a 	srl	r4,r17,r2
   1c684:	00800804 	movi	r2,32
   1c688:	18802126 	beq	r3,r2,1c710 <__divdf3+0x9ac>
   1c68c:	04001004 	movi	r16,64
   1c690:	80c7c83a 	sub	r3,r16,r3
   1c694:	88e0983a 	sll	r16,r17,r3
   1c698:	8504b03a 	or	r2,r16,r20
   1c69c:	1004c03a 	cmpne	r2,r2,zero
   1c6a0:	2084b03a 	or	r2,r4,r2
   1c6a4:	144001cc 	andi	r17,r2,7
   1c6a8:	88000d1e 	bne	r17,zero,1c6e0 <__divdf3+0x97c>
   1c6ac:	0021883a 	mov	r16,zero
   1c6b0:	102ad0fa 	srli	r21,r2,3
   1c6b4:	9900004c 	andi	r4,r19,1
   1c6b8:	0005883a 	mov	r2,zero
   1c6bc:	ac6ab03a 	or	r21,r21,r17
   1c6c0:	003e0706 	br	1bee0 <__alt_data_end+0xfc01bee0>
   1c6c4:	1007883a 	mov	r3,r2
   1c6c8:	0023883a 	mov	r17,zero
   1c6cc:	8820927a 	slli	r16,r17,9
   1c6d0:	1805883a 	mov	r2,r3
   1c6d4:	8822977a 	slli	r17,r17,29
   1c6d8:	8020d33a 	srli	r16,r16,12
   1c6dc:	003ff406 	br	1c6b0 <__alt_data_end+0xfc01c6b0>
   1c6e0:	10c003cc 	andi	r3,r2,15
   1c6e4:	01000104 	movi	r4,4
   1c6e8:	193ff626 	beq	r3,r4,1c6c4 <__alt_data_end+0xfc01c6c4>
   1c6ec:	0023883a 	mov	r17,zero
   1c6f0:	003fc806 	br	1c614 <__alt_data_end+0xfc01c614>
   1c6f4:	a8bfd136 	bltu	r21,r2,1c63c <__alt_data_end+0xfc01c63c>
   1c6f8:	2823883a 	mov	r17,r5
   1c6fc:	003fa606 	br	1c598 <__alt_data_end+0xfc01c598>
   1c700:	d9800017 	ldw	r6,0(sp)
   1c704:	30bfd436 	bltu	r6,r2,1c658 <__alt_data_end+0xfc01c658>
   1c708:	2829883a 	mov	r20,r5
   1c70c:	003f6406 	br	1c4a0 <__alt_data_end+0xfc01c4a0>
   1c710:	0021883a 	mov	r16,zero
   1c714:	003fe006 	br	1c698 <__alt_data_end+0xfc01c698>
   1c718:	00800434 	movhi	r2,16
   1c71c:	8c000234 	orhi	r16,r17,8
   1c720:	10bfffc4 	addi	r2,r2,-1
   1c724:	e009883a 	mov	r4,fp
   1c728:	80a0703a 	and	r16,r16,r2
   1c72c:	a02b883a 	mov	r21,r20
   1c730:	003e4e06 	br	1c06c <__alt_data_end+0xfc01c06c>

0001c734 <__eqdf2>:
   1c734:	2804d53a 	srli	r2,r5,20
   1c738:	3806d53a 	srli	r3,r7,20
   1c73c:	02000434 	movhi	r8,16
   1c740:	423fffc4 	addi	r8,r8,-1
   1c744:	1081ffcc 	andi	r2,r2,2047
   1c748:	0281ffc4 	movi	r10,2047
   1c74c:	2a12703a 	and	r9,r5,r8
   1c750:	18c1ffcc 	andi	r3,r3,2047
   1c754:	3a10703a 	and	r8,r7,r8
   1c758:	280ad7fa 	srli	r5,r5,31
   1c75c:	380ed7fa 	srli	r7,r7,31
   1c760:	12801026 	beq	r2,r10,1c7a4 <__eqdf2+0x70>
   1c764:	0281ffc4 	movi	r10,2047
   1c768:	1a800a26 	beq	r3,r10,1c794 <__eqdf2+0x60>
   1c76c:	10c00226 	beq	r2,r3,1c778 <__eqdf2+0x44>
   1c770:	00800044 	movi	r2,1
   1c774:	f800283a 	ret
   1c778:	4a3ffd1e 	bne	r9,r8,1c770 <__alt_data_end+0xfc01c770>
   1c77c:	21bffc1e 	bne	r4,r6,1c770 <__alt_data_end+0xfc01c770>
   1c780:	29c00c26 	beq	r5,r7,1c7b4 <__eqdf2+0x80>
   1c784:	103ffa1e 	bne	r2,zero,1c770 <__alt_data_end+0xfc01c770>
   1c788:	2244b03a 	or	r2,r4,r9
   1c78c:	1004c03a 	cmpne	r2,r2,zero
   1c790:	f800283a 	ret
   1c794:	3214b03a 	or	r10,r6,r8
   1c798:	503ff426 	beq	r10,zero,1c76c <__alt_data_end+0xfc01c76c>
   1c79c:	00800044 	movi	r2,1
   1c7a0:	f800283a 	ret
   1c7a4:	2254b03a 	or	r10,r4,r9
   1c7a8:	503fee26 	beq	r10,zero,1c764 <__alt_data_end+0xfc01c764>
   1c7ac:	00800044 	movi	r2,1
   1c7b0:	f800283a 	ret
   1c7b4:	0005883a 	mov	r2,zero
   1c7b8:	f800283a 	ret

0001c7bc <__gedf2>:
   1c7bc:	2804d53a 	srli	r2,r5,20
   1c7c0:	3806d53a 	srli	r3,r7,20
   1c7c4:	02000434 	movhi	r8,16
   1c7c8:	423fffc4 	addi	r8,r8,-1
   1c7cc:	1081ffcc 	andi	r2,r2,2047
   1c7d0:	0241ffc4 	movi	r9,2047
   1c7d4:	2a14703a 	and	r10,r5,r8
   1c7d8:	18c1ffcc 	andi	r3,r3,2047
   1c7dc:	3a10703a 	and	r8,r7,r8
   1c7e0:	280ad7fa 	srli	r5,r5,31
   1c7e4:	380ed7fa 	srli	r7,r7,31
   1c7e8:	12401d26 	beq	r2,r9,1c860 <__gedf2+0xa4>
   1c7ec:	0241ffc4 	movi	r9,2047
   1c7f0:	1a401226 	beq	r3,r9,1c83c <__gedf2+0x80>
   1c7f4:	1000081e 	bne	r2,zero,1c818 <__gedf2+0x5c>
   1c7f8:	2296b03a 	or	r11,r4,r10
   1c7fc:	5813003a 	cmpeq	r9,r11,zero
   1c800:	1800091e 	bne	r3,zero,1c828 <__gedf2+0x6c>
   1c804:	3218b03a 	or	r12,r6,r8
   1c808:	6000071e 	bne	r12,zero,1c828 <__gedf2+0x6c>
   1c80c:	0005883a 	mov	r2,zero
   1c810:	5800101e 	bne	r11,zero,1c854 <__gedf2+0x98>
   1c814:	f800283a 	ret
   1c818:	18000c1e 	bne	r3,zero,1c84c <__gedf2+0x90>
   1c81c:	3212b03a 	or	r9,r6,r8
   1c820:	48000c26 	beq	r9,zero,1c854 <__gedf2+0x98>
   1c824:	0013883a 	mov	r9,zero
   1c828:	39c03fcc 	andi	r7,r7,255
   1c82c:	48000826 	beq	r9,zero,1c850 <__gedf2+0x94>
   1c830:	38000926 	beq	r7,zero,1c858 <__gedf2+0x9c>
   1c834:	00800044 	movi	r2,1
   1c838:	f800283a 	ret
   1c83c:	3212b03a 	or	r9,r6,r8
   1c840:	483fec26 	beq	r9,zero,1c7f4 <__alt_data_end+0xfc01c7f4>
   1c844:	00bfff84 	movi	r2,-2
   1c848:	f800283a 	ret
   1c84c:	39c03fcc 	andi	r7,r7,255
   1c850:	29c00626 	beq	r5,r7,1c86c <__gedf2+0xb0>
   1c854:	283ff726 	beq	r5,zero,1c834 <__alt_data_end+0xfc01c834>
   1c858:	00bfffc4 	movi	r2,-1
   1c85c:	f800283a 	ret
   1c860:	2292b03a 	or	r9,r4,r10
   1c864:	483fe126 	beq	r9,zero,1c7ec <__alt_data_end+0xfc01c7ec>
   1c868:	003ff606 	br	1c844 <__alt_data_end+0xfc01c844>
   1c86c:	18bff916 	blt	r3,r2,1c854 <__alt_data_end+0xfc01c854>
   1c870:	10c00316 	blt	r2,r3,1c880 <__gedf2+0xc4>
   1c874:	42bff736 	bltu	r8,r10,1c854 <__alt_data_end+0xfc01c854>
   1c878:	52000326 	beq	r10,r8,1c888 <__gedf2+0xcc>
   1c87c:	5200042e 	bgeu	r10,r8,1c890 <__gedf2+0xd4>
   1c880:	283fec1e 	bne	r5,zero,1c834 <__alt_data_end+0xfc01c834>
   1c884:	003ff406 	br	1c858 <__alt_data_end+0xfc01c858>
   1c888:	313ff236 	bltu	r6,r4,1c854 <__alt_data_end+0xfc01c854>
   1c88c:	21bffc36 	bltu	r4,r6,1c880 <__alt_data_end+0xfc01c880>
   1c890:	0005883a 	mov	r2,zero
   1c894:	f800283a 	ret

0001c898 <__ledf2>:
   1c898:	2804d53a 	srli	r2,r5,20
   1c89c:	3810d53a 	srli	r8,r7,20
   1c8a0:	00c00434 	movhi	r3,16
   1c8a4:	18ffffc4 	addi	r3,r3,-1
   1c8a8:	1081ffcc 	andi	r2,r2,2047
   1c8ac:	0241ffc4 	movi	r9,2047
   1c8b0:	28d4703a 	and	r10,r5,r3
   1c8b4:	4201ffcc 	andi	r8,r8,2047
   1c8b8:	38c6703a 	and	r3,r7,r3
   1c8bc:	280ad7fa 	srli	r5,r5,31
   1c8c0:	380ed7fa 	srli	r7,r7,31
   1c8c4:	12401f26 	beq	r2,r9,1c944 <__ledf2+0xac>
   1c8c8:	0241ffc4 	movi	r9,2047
   1c8cc:	42401426 	beq	r8,r9,1c920 <__ledf2+0x88>
   1c8d0:	1000091e 	bne	r2,zero,1c8f8 <__ledf2+0x60>
   1c8d4:	2296b03a 	or	r11,r4,r10
   1c8d8:	5813003a 	cmpeq	r9,r11,zero
   1c8dc:	29403fcc 	andi	r5,r5,255
   1c8e0:	40000a1e 	bne	r8,zero,1c90c <__ledf2+0x74>
   1c8e4:	30d8b03a 	or	r12,r6,r3
   1c8e8:	6000081e 	bne	r12,zero,1c90c <__ledf2+0x74>
   1c8ec:	0005883a 	mov	r2,zero
   1c8f0:	5800111e 	bne	r11,zero,1c938 <__ledf2+0xa0>
   1c8f4:	f800283a 	ret
   1c8f8:	29403fcc 	andi	r5,r5,255
   1c8fc:	40000c1e 	bne	r8,zero,1c930 <__ledf2+0x98>
   1c900:	30d2b03a 	or	r9,r6,r3
   1c904:	48000c26 	beq	r9,zero,1c938 <__ledf2+0xa0>
   1c908:	0013883a 	mov	r9,zero
   1c90c:	39c03fcc 	andi	r7,r7,255
   1c910:	48000826 	beq	r9,zero,1c934 <__ledf2+0x9c>
   1c914:	38001126 	beq	r7,zero,1c95c <__ledf2+0xc4>
   1c918:	00800044 	movi	r2,1
   1c91c:	f800283a 	ret
   1c920:	30d2b03a 	or	r9,r6,r3
   1c924:	483fea26 	beq	r9,zero,1c8d0 <__alt_data_end+0xfc01c8d0>
   1c928:	00800084 	movi	r2,2
   1c92c:	f800283a 	ret
   1c930:	39c03fcc 	andi	r7,r7,255
   1c934:	39400726 	beq	r7,r5,1c954 <__ledf2+0xbc>
   1c938:	2800081e 	bne	r5,zero,1c95c <__ledf2+0xc4>
   1c93c:	00800044 	movi	r2,1
   1c940:	f800283a 	ret
   1c944:	2292b03a 	or	r9,r4,r10
   1c948:	483fdf26 	beq	r9,zero,1c8c8 <__alt_data_end+0xfc01c8c8>
   1c94c:	00800084 	movi	r2,2
   1c950:	f800283a 	ret
   1c954:	4080030e 	bge	r8,r2,1c964 <__ledf2+0xcc>
   1c958:	383fef26 	beq	r7,zero,1c918 <__alt_data_end+0xfc01c918>
   1c95c:	00bfffc4 	movi	r2,-1
   1c960:	f800283a 	ret
   1c964:	123feb16 	blt	r2,r8,1c914 <__alt_data_end+0xfc01c914>
   1c968:	1abff336 	bltu	r3,r10,1c938 <__alt_data_end+0xfc01c938>
   1c96c:	50c00326 	beq	r10,r3,1c97c <__ledf2+0xe4>
   1c970:	50c0042e 	bgeu	r10,r3,1c984 <__ledf2+0xec>
   1c974:	283fe81e 	bne	r5,zero,1c918 <__alt_data_end+0xfc01c918>
   1c978:	003ff806 	br	1c95c <__alt_data_end+0xfc01c95c>
   1c97c:	313fee36 	bltu	r6,r4,1c938 <__alt_data_end+0xfc01c938>
   1c980:	21bffc36 	bltu	r4,r6,1c974 <__alt_data_end+0xfc01c974>
   1c984:	0005883a 	mov	r2,zero
   1c988:	f800283a 	ret

0001c98c <__muldf3>:
   1c98c:	deffee04 	addi	sp,sp,-72
   1c990:	dd000c15 	stw	r20,48(sp)
   1c994:	2828d53a 	srli	r20,r5,20
   1c998:	ddc00f15 	stw	r23,60(sp)
   1c99c:	282ed7fa 	srli	r23,r5,31
   1c9a0:	dc000815 	stw	r16,32(sp)
   1c9a4:	04000434 	movhi	r16,16
   1c9a8:	dcc00b15 	stw	r19,44(sp)
   1c9ac:	843fffc4 	addi	r16,r16,-1
   1c9b0:	dfc01115 	stw	ra,68(sp)
   1c9b4:	df001015 	stw	fp,64(sp)
   1c9b8:	dd800e15 	stw	r22,56(sp)
   1c9bc:	dd400d15 	stw	r21,52(sp)
   1c9c0:	dc800a15 	stw	r18,40(sp)
   1c9c4:	dc400915 	stw	r17,36(sp)
   1c9c8:	a501ffcc 	andi	r20,r20,2047
   1c9cc:	2c20703a 	and	r16,r5,r16
   1c9d0:	b827883a 	mov	r19,r23
   1c9d4:	ba403fcc 	andi	r9,r23,255
   1c9d8:	a0006026 	beq	r20,zero,1cb5c <__muldf3+0x1d0>
   1c9dc:	0081ffc4 	movi	r2,2047
   1c9e0:	202d883a 	mov	r22,r4
   1c9e4:	a0803626 	beq	r20,r2,1cac0 <__muldf3+0x134>
   1c9e8:	84000434 	orhi	r16,r16,16
   1c9ec:	200ad77a 	srli	r5,r4,29
   1c9f0:	800490fa 	slli	r2,r16,3
   1c9f4:	202c90fa 	slli	r22,r4,3
   1c9f8:	a53f0044 	addi	r20,r20,-1023
   1c9fc:	28a0b03a 	or	r16,r5,r2
   1ca00:	002b883a 	mov	r21,zero
   1ca04:	000b883a 	mov	r5,zero
   1ca08:	3804d53a 	srli	r2,r7,20
   1ca0c:	3838d7fa 	srli	fp,r7,31
   1ca10:	04400434 	movhi	r17,16
   1ca14:	8c7fffc4 	addi	r17,r17,-1
   1ca18:	1081ffcc 	andi	r2,r2,2047
   1ca1c:	3025883a 	mov	r18,r6
   1ca20:	3c62703a 	and	r17,r7,r17
   1ca24:	e2803fcc 	andi	r10,fp,255
   1ca28:	10006d26 	beq	r2,zero,1cbe0 <__muldf3+0x254>
   1ca2c:	00c1ffc4 	movi	r3,2047
   1ca30:	10c06526 	beq	r2,r3,1cbc8 <__muldf3+0x23c>
   1ca34:	8c400434 	orhi	r17,r17,16
   1ca38:	300ed77a 	srli	r7,r6,29
   1ca3c:	880690fa 	slli	r3,r17,3
   1ca40:	302490fa 	slli	r18,r6,3
   1ca44:	10bf0044 	addi	r2,r2,-1023
   1ca48:	38e2b03a 	or	r17,r7,r3
   1ca4c:	000f883a 	mov	r7,zero
   1ca50:	a087883a 	add	r3,r20,r2
   1ca54:	010003c4 	movi	r4,15
   1ca58:	3d44b03a 	or	r2,r7,r21
   1ca5c:	e5ccf03a 	xor	r6,fp,r23
   1ca60:	1a000044 	addi	r8,r3,1
   1ca64:	20809b36 	bltu	r4,r2,1ccd4 <__muldf3+0x348>
   1ca68:	100490ba 	slli	r2,r2,2
   1ca6c:	010000b4 	movhi	r4,2
   1ca70:	2132a004 	addi	r4,r4,-13696
   1ca74:	1105883a 	add	r2,r2,r4
   1ca78:	10800017 	ldw	r2,0(r2)
   1ca7c:	1000683a 	jmp	r2
   1ca80:	0001ccd4 	movui	zero,1843
   1ca84:	0001cae0 	cmpeqi	zero,zero,1835
   1ca88:	0001cae0 	cmpeqi	zero,zero,1835
   1ca8c:	0001cadc 	xori	zero,zero,1835
   1ca90:	0001ccb0 	cmpltui	zero,zero,1842
   1ca94:	0001ccb0 	cmpltui	zero,zero,1842
   1ca98:	0001cc98 	cmpnei	zero,zero,1842
   1ca9c:	0001cadc 	xori	zero,zero,1835
   1caa0:	0001ccb0 	cmpltui	zero,zero,1842
   1caa4:	0001cc98 	cmpnei	zero,zero,1842
   1caa8:	0001ccb0 	cmpltui	zero,zero,1842
   1caac:	0001cadc 	xori	zero,zero,1835
   1cab0:	0001ccc0 	call	1ccc <_ZN3USB17DefaultAddressingEhhb+0xc0>
   1cab4:	0001ccc0 	call	1ccc <_ZN3USB17DefaultAddressingEhhb+0xc0>
   1cab8:	0001ccc0 	call	1ccc <_ZN3USB17DefaultAddressingEhhb+0xc0>
   1cabc:	0001d020 	cmpeqi	zero,zero,1856
   1cac0:	2404b03a 	or	r2,r4,r16
   1cac4:	1000711e 	bne	r2,zero,1cc8c <__muldf3+0x300>
   1cac8:	05400204 	movi	r21,8
   1cacc:	0021883a 	mov	r16,zero
   1cad0:	002d883a 	mov	r22,zero
   1cad4:	01400084 	movi	r5,2
   1cad8:	003fcb06 	br	1ca08 <__alt_data_end+0xfc01ca08>
   1cadc:	500d883a 	mov	r6,r10
   1cae0:	00800084 	movi	r2,2
   1cae4:	38805926 	beq	r7,r2,1cc4c <__muldf3+0x2c0>
   1cae8:	008000c4 	movi	r2,3
   1caec:	3881bb26 	beq	r7,r2,1d1dc <__muldf3+0x850>
   1caf0:	00800044 	movi	r2,1
   1caf4:	3881961e 	bne	r7,r2,1d150 <__muldf3+0x7c4>
   1caf8:	3027883a 	mov	r19,r6
   1cafc:	0005883a 	mov	r2,zero
   1cb00:	0021883a 	mov	r16,zero
   1cb04:	002d883a 	mov	r22,zero
   1cb08:	1004953a 	slli	r2,r2,20
   1cb0c:	98c03fcc 	andi	r3,r19,255
   1cb10:	04400434 	movhi	r17,16
   1cb14:	8c7fffc4 	addi	r17,r17,-1
   1cb18:	180697fa 	slli	r3,r3,31
   1cb1c:	8460703a 	and	r16,r16,r17
   1cb20:	80a0b03a 	or	r16,r16,r2
   1cb24:	80c6b03a 	or	r3,r16,r3
   1cb28:	b005883a 	mov	r2,r22
   1cb2c:	dfc01117 	ldw	ra,68(sp)
   1cb30:	df001017 	ldw	fp,64(sp)
   1cb34:	ddc00f17 	ldw	r23,60(sp)
   1cb38:	dd800e17 	ldw	r22,56(sp)
   1cb3c:	dd400d17 	ldw	r21,52(sp)
   1cb40:	dd000c17 	ldw	r20,48(sp)
   1cb44:	dcc00b17 	ldw	r19,44(sp)
   1cb48:	dc800a17 	ldw	r18,40(sp)
   1cb4c:	dc400917 	ldw	r17,36(sp)
   1cb50:	dc000817 	ldw	r16,32(sp)
   1cb54:	dec01204 	addi	sp,sp,72
   1cb58:	f800283a 	ret
   1cb5c:	2404b03a 	or	r2,r4,r16
   1cb60:	202b883a 	mov	r21,r4
   1cb64:	10004426 	beq	r2,zero,1cc78 <__muldf3+0x2ec>
   1cb68:	80015126 	beq	r16,zero,1d0b0 <__muldf3+0x724>
   1cb6c:	8009883a 	mov	r4,r16
   1cb70:	d9800715 	stw	r6,28(sp)
   1cb74:	d9c00215 	stw	r7,8(sp)
   1cb78:	da400415 	stw	r9,16(sp)
   1cb7c:	001dcf80 	call	1dcf8 <__clzsi2>
   1cb80:	d9800717 	ldw	r6,28(sp)
   1cb84:	d9c00217 	ldw	r7,8(sp)
   1cb88:	da400417 	ldw	r9,16(sp)
   1cb8c:	113ffd44 	addi	r4,r2,-11
   1cb90:	00c00704 	movi	r3,28
   1cb94:	19014216 	blt	r3,r4,1d0a0 <__muldf3+0x714>
   1cb98:	00c00744 	movi	r3,29
   1cb9c:	15bffe04 	addi	r22,r2,-8
   1cba0:	1907c83a 	sub	r3,r3,r4
   1cba4:	85a0983a 	sll	r16,r16,r22
   1cba8:	a8c6d83a 	srl	r3,r21,r3
   1cbac:	adac983a 	sll	r22,r21,r22
   1cbb0:	1c20b03a 	or	r16,r3,r16
   1cbb4:	1080fcc4 	addi	r2,r2,1011
   1cbb8:	00a9c83a 	sub	r20,zero,r2
   1cbbc:	002b883a 	mov	r21,zero
   1cbc0:	000b883a 	mov	r5,zero
   1cbc4:	003f9006 	br	1ca08 <__alt_data_end+0xfc01ca08>
   1cbc8:	3446b03a 	or	r3,r6,r17
   1cbcc:	1800281e 	bne	r3,zero,1cc70 <__muldf3+0x2e4>
   1cbd0:	0023883a 	mov	r17,zero
   1cbd4:	0025883a 	mov	r18,zero
   1cbd8:	01c00084 	movi	r7,2
   1cbdc:	003f9c06 	br	1ca50 <__alt_data_end+0xfc01ca50>
   1cbe0:	3446b03a 	or	r3,r6,r17
   1cbe4:	18001e26 	beq	r3,zero,1cc60 <__muldf3+0x2d4>
   1cbe8:	88012126 	beq	r17,zero,1d070 <__muldf3+0x6e4>
   1cbec:	8809883a 	mov	r4,r17
   1cbf0:	d9400215 	stw	r5,8(sp)
   1cbf4:	d9800715 	stw	r6,28(sp)
   1cbf8:	da400415 	stw	r9,16(sp)
   1cbfc:	da800315 	stw	r10,12(sp)
   1cc00:	001dcf80 	call	1dcf8 <__clzsi2>
   1cc04:	d9400217 	ldw	r5,8(sp)
   1cc08:	d9800717 	ldw	r6,28(sp)
   1cc0c:	da400417 	ldw	r9,16(sp)
   1cc10:	da800317 	ldw	r10,12(sp)
   1cc14:	113ffd44 	addi	r4,r2,-11
   1cc18:	00c00704 	movi	r3,28
   1cc1c:	19011016 	blt	r3,r4,1d060 <__muldf3+0x6d4>
   1cc20:	00c00744 	movi	r3,29
   1cc24:	14bffe04 	addi	r18,r2,-8
   1cc28:	1907c83a 	sub	r3,r3,r4
   1cc2c:	8ca2983a 	sll	r17,r17,r18
   1cc30:	30c6d83a 	srl	r3,r6,r3
   1cc34:	34a4983a 	sll	r18,r6,r18
   1cc38:	1c62b03a 	or	r17,r3,r17
   1cc3c:	1080fcc4 	addi	r2,r2,1011
   1cc40:	0085c83a 	sub	r2,zero,r2
   1cc44:	000f883a 	mov	r7,zero
   1cc48:	003f8106 	br	1ca50 <__alt_data_end+0xfc01ca50>
   1cc4c:	3027883a 	mov	r19,r6
   1cc50:	0081ffc4 	movi	r2,2047
   1cc54:	0021883a 	mov	r16,zero
   1cc58:	002d883a 	mov	r22,zero
   1cc5c:	003faa06 	br	1cb08 <__alt_data_end+0xfc01cb08>
   1cc60:	0023883a 	mov	r17,zero
   1cc64:	0025883a 	mov	r18,zero
   1cc68:	01c00044 	movi	r7,1
   1cc6c:	003f7806 	br	1ca50 <__alt_data_end+0xfc01ca50>
   1cc70:	01c000c4 	movi	r7,3
   1cc74:	003f7606 	br	1ca50 <__alt_data_end+0xfc01ca50>
   1cc78:	05400104 	movi	r21,4
   1cc7c:	0021883a 	mov	r16,zero
   1cc80:	002d883a 	mov	r22,zero
   1cc84:	01400044 	movi	r5,1
   1cc88:	003f5f06 	br	1ca08 <__alt_data_end+0xfc01ca08>
   1cc8c:	05400304 	movi	r21,12
   1cc90:	014000c4 	movi	r5,3
   1cc94:	003f5c06 	br	1ca08 <__alt_data_end+0xfc01ca08>
   1cc98:	04000434 	movhi	r16,16
   1cc9c:	0027883a 	mov	r19,zero
   1cca0:	843fffc4 	addi	r16,r16,-1
   1cca4:	05bfffc4 	movi	r22,-1
   1cca8:	0081ffc4 	movi	r2,2047
   1ccac:	003f9606 	br	1cb08 <__alt_data_end+0xfc01cb08>
   1ccb0:	8023883a 	mov	r17,r16
   1ccb4:	b025883a 	mov	r18,r22
   1ccb8:	280f883a 	mov	r7,r5
   1ccbc:	003f8806 	br	1cae0 <__alt_data_end+0xfc01cae0>
   1ccc0:	8023883a 	mov	r17,r16
   1ccc4:	b025883a 	mov	r18,r22
   1ccc8:	480d883a 	mov	r6,r9
   1cccc:	280f883a 	mov	r7,r5
   1ccd0:	003f8306 	br	1cae0 <__alt_data_end+0xfc01cae0>
   1ccd4:	b026d43a 	srli	r19,r22,16
   1ccd8:	902ed43a 	srli	r23,r18,16
   1ccdc:	b5bfffcc 	andi	r22,r22,65535
   1cce0:	94bfffcc 	andi	r18,r18,65535
   1cce4:	b00b883a 	mov	r5,r22
   1cce8:	9009883a 	mov	r4,r18
   1ccec:	d8c00515 	stw	r3,20(sp)
   1ccf0:	d9800715 	stw	r6,28(sp)
   1ccf4:	da000615 	stw	r8,24(sp)
   1ccf8:	000cca00 	call	cca0 <__mulsi3>
   1ccfc:	980b883a 	mov	r5,r19
   1cd00:	9009883a 	mov	r4,r18
   1cd04:	1029883a 	mov	r20,r2
   1cd08:	000cca00 	call	cca0 <__mulsi3>
   1cd0c:	b80b883a 	mov	r5,r23
   1cd10:	9809883a 	mov	r4,r19
   1cd14:	102b883a 	mov	r21,r2
   1cd18:	000cca00 	call	cca0 <__mulsi3>
   1cd1c:	b809883a 	mov	r4,r23
   1cd20:	b00b883a 	mov	r5,r22
   1cd24:	1039883a 	mov	fp,r2
   1cd28:	000cca00 	call	cca0 <__mulsi3>
   1cd2c:	a008d43a 	srli	r4,r20,16
   1cd30:	1545883a 	add	r2,r2,r21
   1cd34:	d8c00517 	ldw	r3,20(sp)
   1cd38:	2085883a 	add	r2,r4,r2
   1cd3c:	d9800717 	ldw	r6,28(sp)
   1cd40:	da000617 	ldw	r8,24(sp)
   1cd44:	1540022e 	bgeu	r2,r21,1cd50 <__muldf3+0x3c4>
   1cd48:	01000074 	movhi	r4,1
   1cd4c:	e139883a 	add	fp,fp,r4
   1cd50:	100e943a 	slli	r7,r2,16
   1cd54:	1004d43a 	srli	r2,r2,16
   1cd58:	882ad43a 	srli	r21,r17,16
   1cd5c:	a53fffcc 	andi	r20,r20,65535
   1cd60:	8c7fffcc 	andi	r17,r17,65535
   1cd64:	3d29883a 	add	r20,r7,r20
   1cd68:	b00b883a 	mov	r5,r22
   1cd6c:	8809883a 	mov	r4,r17
   1cd70:	d8c00515 	stw	r3,20(sp)
   1cd74:	d9800715 	stw	r6,28(sp)
   1cd78:	da000615 	stw	r8,24(sp)
   1cd7c:	dd000115 	stw	r20,4(sp)
   1cd80:	d8800015 	stw	r2,0(sp)
   1cd84:	000cca00 	call	cca0 <__mulsi3>
   1cd88:	980b883a 	mov	r5,r19
   1cd8c:	8809883a 	mov	r4,r17
   1cd90:	d8800215 	stw	r2,8(sp)
   1cd94:	000cca00 	call	cca0 <__mulsi3>
   1cd98:	9809883a 	mov	r4,r19
   1cd9c:	a80b883a 	mov	r5,r21
   1cda0:	1029883a 	mov	r20,r2
   1cda4:	000cca00 	call	cca0 <__mulsi3>
   1cda8:	b00b883a 	mov	r5,r22
   1cdac:	a809883a 	mov	r4,r21
   1cdb0:	d8800415 	stw	r2,16(sp)
   1cdb4:	000cca00 	call	cca0 <__mulsi3>
   1cdb8:	d9c00217 	ldw	r7,8(sp)
   1cdbc:	1505883a 	add	r2,r2,r20
   1cdc0:	d8c00517 	ldw	r3,20(sp)
   1cdc4:	3826d43a 	srli	r19,r7,16
   1cdc8:	d9800717 	ldw	r6,28(sp)
   1cdcc:	da000617 	ldw	r8,24(sp)
   1cdd0:	9885883a 	add	r2,r19,r2
   1cdd4:	da400417 	ldw	r9,16(sp)
   1cdd8:	1500022e 	bgeu	r2,r20,1cde4 <__muldf3+0x458>
   1cddc:	01000074 	movhi	r4,1
   1cde0:	4913883a 	add	r9,r9,r4
   1cde4:	1028d43a 	srli	r20,r2,16
   1cde8:	1004943a 	slli	r2,r2,16
   1cdec:	802cd43a 	srli	r22,r16,16
   1cdf0:	843fffcc 	andi	r16,r16,65535
   1cdf4:	3cffffcc 	andi	r19,r7,65535
   1cdf8:	9009883a 	mov	r4,r18
   1cdfc:	800b883a 	mov	r5,r16
   1ce00:	a269883a 	add	r20,r20,r9
   1ce04:	d8c00515 	stw	r3,20(sp)
   1ce08:	d9800715 	stw	r6,28(sp)
   1ce0c:	da000615 	stw	r8,24(sp)
   1ce10:	14e7883a 	add	r19,r2,r19
   1ce14:	000cca00 	call	cca0 <__mulsi3>
   1ce18:	9009883a 	mov	r4,r18
   1ce1c:	b00b883a 	mov	r5,r22
   1ce20:	d8800315 	stw	r2,12(sp)
   1ce24:	000cca00 	call	cca0 <__mulsi3>
   1ce28:	b809883a 	mov	r4,r23
   1ce2c:	b00b883a 	mov	r5,r22
   1ce30:	d8800215 	stw	r2,8(sp)
   1ce34:	000cca00 	call	cca0 <__mulsi3>
   1ce38:	b80b883a 	mov	r5,r23
   1ce3c:	8009883a 	mov	r4,r16
   1ce40:	d8800415 	stw	r2,16(sp)
   1ce44:	000cca00 	call	cca0 <__mulsi3>
   1ce48:	da800317 	ldw	r10,12(sp)
   1ce4c:	d9c00217 	ldw	r7,8(sp)
   1ce50:	d9000017 	ldw	r4,0(sp)
   1ce54:	502ed43a 	srli	r23,r10,16
   1ce58:	11c5883a 	add	r2,r2,r7
   1ce5c:	24e5883a 	add	r18,r4,r19
   1ce60:	b885883a 	add	r2,r23,r2
   1ce64:	d8c00517 	ldw	r3,20(sp)
   1ce68:	d9800717 	ldw	r6,28(sp)
   1ce6c:	da000617 	ldw	r8,24(sp)
   1ce70:	da400417 	ldw	r9,16(sp)
   1ce74:	11c0022e 	bgeu	r2,r7,1ce80 <__muldf3+0x4f4>
   1ce78:	01000074 	movhi	r4,1
   1ce7c:	4913883a 	add	r9,r9,r4
   1ce80:	100ed43a 	srli	r7,r2,16
   1ce84:	1004943a 	slli	r2,r2,16
   1ce88:	55ffffcc 	andi	r23,r10,65535
   1ce8c:	3a53883a 	add	r9,r7,r9
   1ce90:	8809883a 	mov	r4,r17
   1ce94:	800b883a 	mov	r5,r16
   1ce98:	d8c00515 	stw	r3,20(sp)
   1ce9c:	d9800715 	stw	r6,28(sp)
   1cea0:	da000615 	stw	r8,24(sp)
   1cea4:	da400415 	stw	r9,16(sp)
   1cea8:	15ef883a 	add	r23,r2,r23
   1ceac:	000cca00 	call	cca0 <__mulsi3>
   1ceb0:	8809883a 	mov	r4,r17
   1ceb4:	b00b883a 	mov	r5,r22
   1ceb8:	d8800215 	stw	r2,8(sp)
   1cebc:	000cca00 	call	cca0 <__mulsi3>
   1cec0:	b00b883a 	mov	r5,r22
   1cec4:	a809883a 	mov	r4,r21
   1cec8:	d8800315 	stw	r2,12(sp)
   1cecc:	000cca00 	call	cca0 <__mulsi3>
   1ced0:	8009883a 	mov	r4,r16
   1ced4:	a80b883a 	mov	r5,r21
   1ced8:	1023883a 	mov	r17,r2
   1cedc:	000cca00 	call	cca0 <__mulsi3>
   1cee0:	d9c00217 	ldw	r7,8(sp)
   1cee4:	da800317 	ldw	r10,12(sp)
   1cee8:	d8c00517 	ldw	r3,20(sp)
   1ceec:	3808d43a 	srli	r4,r7,16
   1cef0:	1285883a 	add	r2,r2,r10
   1cef4:	d9800717 	ldw	r6,28(sp)
   1cef8:	2085883a 	add	r2,r4,r2
   1cefc:	da000617 	ldw	r8,24(sp)
   1cf00:	da400417 	ldw	r9,16(sp)
   1cf04:	1280022e 	bgeu	r2,r10,1cf10 <__muldf3+0x584>
   1cf08:	01000074 	movhi	r4,1
   1cf0c:	8923883a 	add	r17,r17,r4
   1cf10:	1008943a 	slli	r4,r2,16
   1cf14:	39ffffcc 	andi	r7,r7,65535
   1cf18:	e4b9883a 	add	fp,fp,r18
   1cf1c:	21cf883a 	add	r7,r4,r7
   1cf20:	e4e7803a 	cmpltu	r19,fp,r19
   1cf24:	3d0f883a 	add	r7,r7,r20
   1cf28:	bf39883a 	add	fp,r23,fp
   1cf2c:	99c9883a 	add	r4,r19,r7
   1cf30:	e5ef803a 	cmpltu	r23,fp,r23
   1cf34:	490b883a 	add	r5,r9,r4
   1cf38:	1004d43a 	srli	r2,r2,16
   1cf3c:	b965883a 	add	r18,r23,r5
   1cf40:	24c9803a 	cmpltu	r4,r4,r19
   1cf44:	3d29803a 	cmpltu	r20,r7,r20
   1cf48:	a128b03a 	or	r20,r20,r4
   1cf4c:	95ef803a 	cmpltu	r23,r18,r23
   1cf50:	2a53803a 	cmpltu	r9,r5,r9
   1cf54:	a0a9883a 	add	r20,r20,r2
   1cf58:	4deeb03a 	or	r23,r9,r23
   1cf5c:	a5ef883a 	add	r23,r20,r23
   1cf60:	bc63883a 	add	r17,r23,r17
   1cf64:	e004927a 	slli	r2,fp,9
   1cf68:	d9000117 	ldw	r4,4(sp)
   1cf6c:	882e927a 	slli	r23,r17,9
   1cf70:	9022d5fa 	srli	r17,r18,23
   1cf74:	e038d5fa 	srli	fp,fp,23
   1cf78:	1104b03a 	or	r2,r2,r4
   1cf7c:	9024927a 	slli	r18,r18,9
   1cf80:	1004c03a 	cmpne	r2,r2,zero
   1cf84:	bc62b03a 	or	r17,r23,r17
   1cf88:	1738b03a 	or	fp,r2,fp
   1cf8c:	8880402c 	andhi	r2,r17,256
   1cf90:	e4a4b03a 	or	r18,fp,r18
   1cf94:	10000726 	beq	r2,zero,1cfb4 <__muldf3+0x628>
   1cf98:	9006d07a 	srli	r3,r18,1
   1cf9c:	880497fa 	slli	r2,r17,31
   1cfa0:	9480004c 	andi	r18,r18,1
   1cfa4:	8822d07a 	srli	r17,r17,1
   1cfa8:	1ca4b03a 	or	r18,r3,r18
   1cfac:	14a4b03a 	or	r18,r2,r18
   1cfb0:	4007883a 	mov	r3,r8
   1cfb4:	1880ffc4 	addi	r2,r3,1023
   1cfb8:	0080460e 	bge	zero,r2,1d0d4 <__muldf3+0x748>
   1cfbc:	910001cc 	andi	r4,r18,7
   1cfc0:	20000726 	beq	r4,zero,1cfe0 <__muldf3+0x654>
   1cfc4:	910003cc 	andi	r4,r18,15
   1cfc8:	01400104 	movi	r5,4
   1cfcc:	21400426 	beq	r4,r5,1cfe0 <__muldf3+0x654>
   1cfd0:	9149883a 	add	r4,r18,r5
   1cfd4:	24a5803a 	cmpltu	r18,r4,r18
   1cfd8:	8ca3883a 	add	r17,r17,r18
   1cfdc:	2025883a 	mov	r18,r4
   1cfe0:	8900402c 	andhi	r4,r17,256
   1cfe4:	20000426 	beq	r4,zero,1cff8 <__muldf3+0x66c>
   1cfe8:	18810004 	addi	r2,r3,1024
   1cfec:	00ffc034 	movhi	r3,65280
   1cff0:	18ffffc4 	addi	r3,r3,-1
   1cff4:	88e2703a 	and	r17,r17,r3
   1cff8:	00c1ff84 	movi	r3,2046
   1cffc:	18bf1316 	blt	r3,r2,1cc4c <__alt_data_end+0xfc01cc4c>
   1d000:	882c977a 	slli	r22,r17,29
   1d004:	9024d0fa 	srli	r18,r18,3
   1d008:	8822927a 	slli	r17,r17,9
   1d00c:	1081ffcc 	andi	r2,r2,2047
   1d010:	b4acb03a 	or	r22,r22,r18
   1d014:	8820d33a 	srli	r16,r17,12
   1d018:	3027883a 	mov	r19,r6
   1d01c:	003eba06 	br	1cb08 <__alt_data_end+0xfc01cb08>
   1d020:	8080022c 	andhi	r2,r16,8
   1d024:	10000926 	beq	r2,zero,1d04c <__muldf3+0x6c0>
   1d028:	8880022c 	andhi	r2,r17,8
   1d02c:	1000071e 	bne	r2,zero,1d04c <__muldf3+0x6c0>
   1d030:	00800434 	movhi	r2,16
   1d034:	8c000234 	orhi	r16,r17,8
   1d038:	10bfffc4 	addi	r2,r2,-1
   1d03c:	e027883a 	mov	r19,fp
   1d040:	80a0703a 	and	r16,r16,r2
   1d044:	902d883a 	mov	r22,r18
   1d048:	003f1706 	br	1cca8 <__alt_data_end+0xfc01cca8>
   1d04c:	00800434 	movhi	r2,16
   1d050:	84000234 	orhi	r16,r16,8
   1d054:	10bfffc4 	addi	r2,r2,-1
   1d058:	80a0703a 	and	r16,r16,r2
   1d05c:	003f1206 	br	1cca8 <__alt_data_end+0xfc01cca8>
   1d060:	147ff604 	addi	r17,r2,-40
   1d064:	3462983a 	sll	r17,r6,r17
   1d068:	0025883a 	mov	r18,zero
   1d06c:	003ef306 	br	1cc3c <__alt_data_end+0xfc01cc3c>
   1d070:	3009883a 	mov	r4,r6
   1d074:	d9400215 	stw	r5,8(sp)
   1d078:	d9800715 	stw	r6,28(sp)
   1d07c:	da400415 	stw	r9,16(sp)
   1d080:	da800315 	stw	r10,12(sp)
   1d084:	001dcf80 	call	1dcf8 <__clzsi2>
   1d088:	10800804 	addi	r2,r2,32
   1d08c:	da800317 	ldw	r10,12(sp)
   1d090:	da400417 	ldw	r9,16(sp)
   1d094:	d9800717 	ldw	r6,28(sp)
   1d098:	d9400217 	ldw	r5,8(sp)
   1d09c:	003edd06 	br	1cc14 <__alt_data_end+0xfc01cc14>
   1d0a0:	143ff604 	addi	r16,r2,-40
   1d0a4:	ac20983a 	sll	r16,r21,r16
   1d0a8:	002d883a 	mov	r22,zero
   1d0ac:	003ec106 	br	1cbb4 <__alt_data_end+0xfc01cbb4>
   1d0b0:	d9800715 	stw	r6,28(sp)
   1d0b4:	d9c00215 	stw	r7,8(sp)
   1d0b8:	da400415 	stw	r9,16(sp)
   1d0bc:	001dcf80 	call	1dcf8 <__clzsi2>
   1d0c0:	10800804 	addi	r2,r2,32
   1d0c4:	da400417 	ldw	r9,16(sp)
   1d0c8:	d9c00217 	ldw	r7,8(sp)
   1d0cc:	d9800717 	ldw	r6,28(sp)
   1d0d0:	003eae06 	br	1cb8c <__alt_data_end+0xfc01cb8c>
   1d0d4:	00c00044 	movi	r3,1
   1d0d8:	1887c83a 	sub	r3,r3,r2
   1d0dc:	01000e04 	movi	r4,56
   1d0e0:	20fe8516 	blt	r4,r3,1caf8 <__alt_data_end+0xfc01caf8>
   1d0e4:	010007c4 	movi	r4,31
   1d0e8:	20c01b16 	blt	r4,r3,1d158 <__muldf3+0x7cc>
   1d0ec:	00800804 	movi	r2,32
   1d0f0:	10c5c83a 	sub	r2,r2,r3
   1d0f4:	888a983a 	sll	r5,r17,r2
   1d0f8:	90c8d83a 	srl	r4,r18,r3
   1d0fc:	9084983a 	sll	r2,r18,r2
   1d100:	88e2d83a 	srl	r17,r17,r3
   1d104:	2906b03a 	or	r3,r5,r4
   1d108:	1004c03a 	cmpne	r2,r2,zero
   1d10c:	1886b03a 	or	r3,r3,r2
   1d110:	188001cc 	andi	r2,r3,7
   1d114:	10000726 	beq	r2,zero,1d134 <__muldf3+0x7a8>
   1d118:	188003cc 	andi	r2,r3,15
   1d11c:	01000104 	movi	r4,4
   1d120:	11000426 	beq	r2,r4,1d134 <__muldf3+0x7a8>
   1d124:	1805883a 	mov	r2,r3
   1d128:	10c00104 	addi	r3,r2,4
   1d12c:	1885803a 	cmpltu	r2,r3,r2
   1d130:	88a3883a 	add	r17,r17,r2
   1d134:	8880202c 	andhi	r2,r17,128
   1d138:	10001c26 	beq	r2,zero,1d1ac <__muldf3+0x820>
   1d13c:	3027883a 	mov	r19,r6
   1d140:	00800044 	movi	r2,1
   1d144:	0021883a 	mov	r16,zero
   1d148:	002d883a 	mov	r22,zero
   1d14c:	003e6e06 	br	1cb08 <__alt_data_end+0xfc01cb08>
   1d150:	4007883a 	mov	r3,r8
   1d154:	003f9706 	br	1cfb4 <__alt_data_end+0xfc01cfb4>
   1d158:	017ff844 	movi	r5,-31
   1d15c:	2885c83a 	sub	r2,r5,r2
   1d160:	888ad83a 	srl	r5,r17,r2
   1d164:	00800804 	movi	r2,32
   1d168:	18801a26 	beq	r3,r2,1d1d4 <__muldf3+0x848>
   1d16c:	01001004 	movi	r4,64
   1d170:	20c7c83a 	sub	r3,r4,r3
   1d174:	88e2983a 	sll	r17,r17,r3
   1d178:	8ca4b03a 	or	r18,r17,r18
   1d17c:	9004c03a 	cmpne	r2,r18,zero
   1d180:	2884b03a 	or	r2,r5,r2
   1d184:	144001cc 	andi	r17,r2,7
   1d188:	88000d1e 	bne	r17,zero,1d1c0 <__muldf3+0x834>
   1d18c:	0021883a 	mov	r16,zero
   1d190:	102cd0fa 	srli	r22,r2,3
   1d194:	3027883a 	mov	r19,r6
   1d198:	0005883a 	mov	r2,zero
   1d19c:	b46cb03a 	or	r22,r22,r17
   1d1a0:	003e5906 	br	1cb08 <__alt_data_end+0xfc01cb08>
   1d1a4:	1007883a 	mov	r3,r2
   1d1a8:	0023883a 	mov	r17,zero
   1d1ac:	8820927a 	slli	r16,r17,9
   1d1b0:	1805883a 	mov	r2,r3
   1d1b4:	8822977a 	slli	r17,r17,29
   1d1b8:	8020d33a 	srli	r16,r16,12
   1d1bc:	003ff406 	br	1d190 <__alt_data_end+0xfc01d190>
   1d1c0:	10c003cc 	andi	r3,r2,15
   1d1c4:	01000104 	movi	r4,4
   1d1c8:	193ff626 	beq	r3,r4,1d1a4 <__alt_data_end+0xfc01d1a4>
   1d1cc:	0023883a 	mov	r17,zero
   1d1d0:	003fd506 	br	1d128 <__alt_data_end+0xfc01d128>
   1d1d4:	0023883a 	mov	r17,zero
   1d1d8:	003fe706 	br	1d178 <__alt_data_end+0xfc01d178>
   1d1dc:	00800434 	movhi	r2,16
   1d1e0:	8c000234 	orhi	r16,r17,8
   1d1e4:	10bfffc4 	addi	r2,r2,-1
   1d1e8:	3027883a 	mov	r19,r6
   1d1ec:	80a0703a 	and	r16,r16,r2
   1d1f0:	902d883a 	mov	r22,r18
   1d1f4:	003eac06 	br	1cca8 <__alt_data_end+0xfc01cca8>

0001d1f8 <__subdf3>:
   1d1f8:	02000434 	movhi	r8,16
   1d1fc:	423fffc4 	addi	r8,r8,-1
   1d200:	defffb04 	addi	sp,sp,-20
   1d204:	2a14703a 	and	r10,r5,r8
   1d208:	3812d53a 	srli	r9,r7,20
   1d20c:	3a10703a 	and	r8,r7,r8
   1d210:	2006d77a 	srli	r3,r4,29
   1d214:	3004d77a 	srli	r2,r6,29
   1d218:	dc000015 	stw	r16,0(sp)
   1d21c:	501490fa 	slli	r10,r10,3
   1d220:	2820d53a 	srli	r16,r5,20
   1d224:	401090fa 	slli	r8,r8,3
   1d228:	dc800215 	stw	r18,8(sp)
   1d22c:	dc400115 	stw	r17,4(sp)
   1d230:	dfc00415 	stw	ra,16(sp)
   1d234:	202290fa 	slli	r17,r4,3
   1d238:	dcc00315 	stw	r19,12(sp)
   1d23c:	4a41ffcc 	andi	r9,r9,2047
   1d240:	0101ffc4 	movi	r4,2047
   1d244:	2824d7fa 	srli	r18,r5,31
   1d248:	8401ffcc 	andi	r16,r16,2047
   1d24c:	50c6b03a 	or	r3,r10,r3
   1d250:	380ed7fa 	srli	r7,r7,31
   1d254:	408ab03a 	or	r5,r8,r2
   1d258:	300c90fa 	slli	r6,r6,3
   1d25c:	49009626 	beq	r9,r4,1d4b8 <__subdf3+0x2c0>
   1d260:	39c0005c 	xori	r7,r7,1
   1d264:	8245c83a 	sub	r2,r16,r9
   1d268:	3c807426 	beq	r7,r18,1d43c <__subdf3+0x244>
   1d26c:	0080af0e 	bge	zero,r2,1d52c <__subdf3+0x334>
   1d270:	48002a1e 	bne	r9,zero,1d31c <__subdf3+0x124>
   1d274:	2988b03a 	or	r4,r5,r6
   1d278:	20009a1e 	bne	r4,zero,1d4e4 <__subdf3+0x2ec>
   1d27c:	888001cc 	andi	r2,r17,7
   1d280:	10000726 	beq	r2,zero,1d2a0 <__subdf3+0xa8>
   1d284:	888003cc 	andi	r2,r17,15
   1d288:	01000104 	movi	r4,4
   1d28c:	11000426 	beq	r2,r4,1d2a0 <__subdf3+0xa8>
   1d290:	890b883a 	add	r5,r17,r4
   1d294:	2c63803a 	cmpltu	r17,r5,r17
   1d298:	1c47883a 	add	r3,r3,r17
   1d29c:	2823883a 	mov	r17,r5
   1d2a0:	1880202c 	andhi	r2,r3,128
   1d2a4:	10005926 	beq	r2,zero,1d40c <__subdf3+0x214>
   1d2a8:	84000044 	addi	r16,r16,1
   1d2ac:	0081ffc4 	movi	r2,2047
   1d2b0:	8080be26 	beq	r16,r2,1d5ac <__subdf3+0x3b4>
   1d2b4:	017fe034 	movhi	r5,65408
   1d2b8:	297fffc4 	addi	r5,r5,-1
   1d2bc:	1946703a 	and	r3,r3,r5
   1d2c0:	1804977a 	slli	r2,r3,29
   1d2c4:	1806927a 	slli	r3,r3,9
   1d2c8:	8822d0fa 	srli	r17,r17,3
   1d2cc:	8401ffcc 	andi	r16,r16,2047
   1d2d0:	180ad33a 	srli	r5,r3,12
   1d2d4:	9100004c 	andi	r4,r18,1
   1d2d8:	1444b03a 	or	r2,r2,r17
   1d2dc:	80c1ffcc 	andi	r3,r16,2047
   1d2e0:	1820953a 	slli	r16,r3,20
   1d2e4:	20c03fcc 	andi	r3,r4,255
   1d2e8:	180897fa 	slli	r4,r3,31
   1d2ec:	00c00434 	movhi	r3,16
   1d2f0:	18ffffc4 	addi	r3,r3,-1
   1d2f4:	28c6703a 	and	r3,r5,r3
   1d2f8:	1c06b03a 	or	r3,r3,r16
   1d2fc:	1906b03a 	or	r3,r3,r4
   1d300:	dfc00417 	ldw	ra,16(sp)
   1d304:	dcc00317 	ldw	r19,12(sp)
   1d308:	dc800217 	ldw	r18,8(sp)
   1d30c:	dc400117 	ldw	r17,4(sp)
   1d310:	dc000017 	ldw	r16,0(sp)
   1d314:	dec00504 	addi	sp,sp,20
   1d318:	f800283a 	ret
   1d31c:	0101ffc4 	movi	r4,2047
   1d320:	813fd626 	beq	r16,r4,1d27c <__alt_data_end+0xfc01d27c>
   1d324:	29402034 	orhi	r5,r5,128
   1d328:	01000e04 	movi	r4,56
   1d32c:	2080a316 	blt	r4,r2,1d5bc <__subdf3+0x3c4>
   1d330:	010007c4 	movi	r4,31
   1d334:	2080c616 	blt	r4,r2,1d650 <__subdf3+0x458>
   1d338:	01000804 	movi	r4,32
   1d33c:	2089c83a 	sub	r4,r4,r2
   1d340:	2910983a 	sll	r8,r5,r4
   1d344:	308ed83a 	srl	r7,r6,r2
   1d348:	3108983a 	sll	r4,r6,r4
   1d34c:	2884d83a 	srl	r2,r5,r2
   1d350:	41ccb03a 	or	r6,r8,r7
   1d354:	2008c03a 	cmpne	r4,r4,zero
   1d358:	310cb03a 	or	r6,r6,r4
   1d35c:	898dc83a 	sub	r6,r17,r6
   1d360:	89a3803a 	cmpltu	r17,r17,r6
   1d364:	1887c83a 	sub	r3,r3,r2
   1d368:	1c47c83a 	sub	r3,r3,r17
   1d36c:	3023883a 	mov	r17,r6
   1d370:	1880202c 	andhi	r2,r3,128
   1d374:	10002326 	beq	r2,zero,1d404 <__subdf3+0x20c>
   1d378:	04c02034 	movhi	r19,128
   1d37c:	9cffffc4 	addi	r19,r19,-1
   1d380:	1ce6703a 	and	r19,r3,r19
   1d384:	98007a26 	beq	r19,zero,1d570 <__subdf3+0x378>
   1d388:	9809883a 	mov	r4,r19
   1d38c:	001dcf80 	call	1dcf8 <__clzsi2>
   1d390:	113ffe04 	addi	r4,r2,-8
   1d394:	00c007c4 	movi	r3,31
   1d398:	19007b16 	blt	r3,r4,1d588 <__subdf3+0x390>
   1d39c:	00800804 	movi	r2,32
   1d3a0:	1105c83a 	sub	r2,r2,r4
   1d3a4:	8884d83a 	srl	r2,r17,r2
   1d3a8:	9906983a 	sll	r3,r19,r4
   1d3ac:	8922983a 	sll	r17,r17,r4
   1d3b0:	10c4b03a 	or	r2,r2,r3
   1d3b4:	24007816 	blt	r4,r16,1d598 <__subdf3+0x3a0>
   1d3b8:	2421c83a 	sub	r16,r4,r16
   1d3bc:	80c00044 	addi	r3,r16,1
   1d3c0:	010007c4 	movi	r4,31
   1d3c4:	20c09516 	blt	r4,r3,1d61c <__subdf3+0x424>
   1d3c8:	01400804 	movi	r5,32
   1d3cc:	28cbc83a 	sub	r5,r5,r3
   1d3d0:	88c8d83a 	srl	r4,r17,r3
   1d3d4:	8962983a 	sll	r17,r17,r5
   1d3d8:	114a983a 	sll	r5,r2,r5
   1d3dc:	10c6d83a 	srl	r3,r2,r3
   1d3e0:	8804c03a 	cmpne	r2,r17,zero
   1d3e4:	290ab03a 	or	r5,r5,r4
   1d3e8:	28a2b03a 	or	r17,r5,r2
   1d3ec:	0021883a 	mov	r16,zero
   1d3f0:	003fa206 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d3f4:	2090b03a 	or	r8,r4,r2
   1d3f8:	40018e26 	beq	r8,zero,1da34 <__subdf3+0x83c>
   1d3fc:	1007883a 	mov	r3,r2
   1d400:	2023883a 	mov	r17,r4
   1d404:	888001cc 	andi	r2,r17,7
   1d408:	103f9e1e 	bne	r2,zero,1d284 <__alt_data_end+0xfc01d284>
   1d40c:	1804977a 	slli	r2,r3,29
   1d410:	8822d0fa 	srli	r17,r17,3
   1d414:	1810d0fa 	srli	r8,r3,3
   1d418:	9100004c 	andi	r4,r18,1
   1d41c:	1444b03a 	or	r2,r2,r17
   1d420:	00c1ffc4 	movi	r3,2047
   1d424:	80c02826 	beq	r16,r3,1d4c8 <__subdf3+0x2d0>
   1d428:	01400434 	movhi	r5,16
   1d42c:	297fffc4 	addi	r5,r5,-1
   1d430:	80e0703a 	and	r16,r16,r3
   1d434:	414a703a 	and	r5,r8,r5
   1d438:	003fa806 	br	1d2dc <__alt_data_end+0xfc01d2dc>
   1d43c:	0080630e 	bge	zero,r2,1d5cc <__subdf3+0x3d4>
   1d440:	48003026 	beq	r9,zero,1d504 <__subdf3+0x30c>
   1d444:	0101ffc4 	movi	r4,2047
   1d448:	813f8c26 	beq	r16,r4,1d27c <__alt_data_end+0xfc01d27c>
   1d44c:	29402034 	orhi	r5,r5,128
   1d450:	01000e04 	movi	r4,56
   1d454:	2080a90e 	bge	r4,r2,1d6fc <__subdf3+0x504>
   1d458:	298cb03a 	or	r6,r5,r6
   1d45c:	3012c03a 	cmpne	r9,r6,zero
   1d460:	0005883a 	mov	r2,zero
   1d464:	4c53883a 	add	r9,r9,r17
   1d468:	4c63803a 	cmpltu	r17,r9,r17
   1d46c:	10c7883a 	add	r3,r2,r3
   1d470:	88c7883a 	add	r3,r17,r3
   1d474:	4823883a 	mov	r17,r9
   1d478:	1880202c 	andhi	r2,r3,128
   1d47c:	1000d026 	beq	r2,zero,1d7c0 <__subdf3+0x5c8>
   1d480:	84000044 	addi	r16,r16,1
   1d484:	0081ffc4 	movi	r2,2047
   1d488:	8080fe26 	beq	r16,r2,1d884 <__subdf3+0x68c>
   1d48c:	00bfe034 	movhi	r2,65408
   1d490:	10bfffc4 	addi	r2,r2,-1
   1d494:	1886703a 	and	r3,r3,r2
   1d498:	880ad07a 	srli	r5,r17,1
   1d49c:	180497fa 	slli	r2,r3,31
   1d4a0:	8900004c 	andi	r4,r17,1
   1d4a4:	2922b03a 	or	r17,r5,r4
   1d4a8:	1806d07a 	srli	r3,r3,1
   1d4ac:	1462b03a 	or	r17,r2,r17
   1d4b0:	3825883a 	mov	r18,r7
   1d4b4:	003f7106 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d4b8:	2984b03a 	or	r2,r5,r6
   1d4bc:	103f6826 	beq	r2,zero,1d260 <__alt_data_end+0xfc01d260>
   1d4c0:	39c03fcc 	andi	r7,r7,255
   1d4c4:	003f6706 	br	1d264 <__alt_data_end+0xfc01d264>
   1d4c8:	4086b03a 	or	r3,r8,r2
   1d4cc:	18015226 	beq	r3,zero,1da18 <__subdf3+0x820>
   1d4d0:	00c00434 	movhi	r3,16
   1d4d4:	41400234 	orhi	r5,r8,8
   1d4d8:	18ffffc4 	addi	r3,r3,-1
   1d4dc:	28ca703a 	and	r5,r5,r3
   1d4e0:	003f7e06 	br	1d2dc <__alt_data_end+0xfc01d2dc>
   1d4e4:	10bfffc4 	addi	r2,r2,-1
   1d4e8:	1000491e 	bne	r2,zero,1d610 <__subdf3+0x418>
   1d4ec:	898fc83a 	sub	r7,r17,r6
   1d4f0:	89e3803a 	cmpltu	r17,r17,r7
   1d4f4:	1947c83a 	sub	r3,r3,r5
   1d4f8:	1c47c83a 	sub	r3,r3,r17
   1d4fc:	3823883a 	mov	r17,r7
   1d500:	003f9b06 	br	1d370 <__alt_data_end+0xfc01d370>
   1d504:	2988b03a 	or	r4,r5,r6
   1d508:	203f5c26 	beq	r4,zero,1d27c <__alt_data_end+0xfc01d27c>
   1d50c:	10bfffc4 	addi	r2,r2,-1
   1d510:	1000931e 	bne	r2,zero,1d760 <__subdf3+0x568>
   1d514:	898d883a 	add	r6,r17,r6
   1d518:	3463803a 	cmpltu	r17,r6,r17
   1d51c:	1947883a 	add	r3,r3,r5
   1d520:	88c7883a 	add	r3,r17,r3
   1d524:	3023883a 	mov	r17,r6
   1d528:	003fd306 	br	1d478 <__alt_data_end+0xfc01d478>
   1d52c:	1000541e 	bne	r2,zero,1d680 <__subdf3+0x488>
   1d530:	80800044 	addi	r2,r16,1
   1d534:	1081ffcc 	andi	r2,r2,2047
   1d538:	01000044 	movi	r4,1
   1d53c:	2080a20e 	bge	r4,r2,1d7c8 <__subdf3+0x5d0>
   1d540:	8989c83a 	sub	r4,r17,r6
   1d544:	8905803a 	cmpltu	r2,r17,r4
   1d548:	1967c83a 	sub	r19,r3,r5
   1d54c:	98a7c83a 	sub	r19,r19,r2
   1d550:	9880202c 	andhi	r2,r19,128
   1d554:	10006326 	beq	r2,zero,1d6e4 <__subdf3+0x4ec>
   1d558:	3463c83a 	sub	r17,r6,r17
   1d55c:	28c7c83a 	sub	r3,r5,r3
   1d560:	344d803a 	cmpltu	r6,r6,r17
   1d564:	19a7c83a 	sub	r19,r3,r6
   1d568:	3825883a 	mov	r18,r7
   1d56c:	983f861e 	bne	r19,zero,1d388 <__alt_data_end+0xfc01d388>
   1d570:	8809883a 	mov	r4,r17
   1d574:	001dcf80 	call	1dcf8 <__clzsi2>
   1d578:	10800804 	addi	r2,r2,32
   1d57c:	113ffe04 	addi	r4,r2,-8
   1d580:	00c007c4 	movi	r3,31
   1d584:	193f850e 	bge	r3,r4,1d39c <__alt_data_end+0xfc01d39c>
   1d588:	10bff604 	addi	r2,r2,-40
   1d58c:	8884983a 	sll	r2,r17,r2
   1d590:	0023883a 	mov	r17,zero
   1d594:	243f880e 	bge	r4,r16,1d3b8 <__alt_data_end+0xfc01d3b8>
   1d598:	00ffe034 	movhi	r3,65408
   1d59c:	18ffffc4 	addi	r3,r3,-1
   1d5a0:	8121c83a 	sub	r16,r16,r4
   1d5a4:	10c6703a 	and	r3,r2,r3
   1d5a8:	003f3406 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d5ac:	9100004c 	andi	r4,r18,1
   1d5b0:	000b883a 	mov	r5,zero
   1d5b4:	0005883a 	mov	r2,zero
   1d5b8:	003f4806 	br	1d2dc <__alt_data_end+0xfc01d2dc>
   1d5bc:	298cb03a 	or	r6,r5,r6
   1d5c0:	300cc03a 	cmpne	r6,r6,zero
   1d5c4:	0005883a 	mov	r2,zero
   1d5c8:	003f6406 	br	1d35c <__alt_data_end+0xfc01d35c>
   1d5cc:	10009a1e 	bne	r2,zero,1d838 <__subdf3+0x640>
   1d5d0:	82400044 	addi	r9,r16,1
   1d5d4:	4881ffcc 	andi	r2,r9,2047
   1d5d8:	02800044 	movi	r10,1
   1d5dc:	5080670e 	bge	r10,r2,1d77c <__subdf3+0x584>
   1d5e0:	0081ffc4 	movi	r2,2047
   1d5e4:	4880af26 	beq	r9,r2,1d8a4 <__subdf3+0x6ac>
   1d5e8:	898d883a 	add	r6,r17,r6
   1d5ec:	1945883a 	add	r2,r3,r5
   1d5f0:	3447803a 	cmpltu	r3,r6,r17
   1d5f4:	1887883a 	add	r3,r3,r2
   1d5f8:	182297fa 	slli	r17,r3,31
   1d5fc:	300cd07a 	srli	r6,r6,1
   1d600:	1806d07a 	srli	r3,r3,1
   1d604:	4821883a 	mov	r16,r9
   1d608:	89a2b03a 	or	r17,r17,r6
   1d60c:	003f1b06 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d610:	0101ffc4 	movi	r4,2047
   1d614:	813f441e 	bne	r16,r4,1d328 <__alt_data_end+0xfc01d328>
   1d618:	003f1806 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d61c:	843ff844 	addi	r16,r16,-31
   1d620:	01400804 	movi	r5,32
   1d624:	1408d83a 	srl	r4,r2,r16
   1d628:	19405026 	beq	r3,r5,1d76c <__subdf3+0x574>
   1d62c:	01401004 	movi	r5,64
   1d630:	28c7c83a 	sub	r3,r5,r3
   1d634:	10c4983a 	sll	r2,r2,r3
   1d638:	88a2b03a 	or	r17,r17,r2
   1d63c:	8822c03a 	cmpne	r17,r17,zero
   1d640:	2462b03a 	or	r17,r4,r17
   1d644:	0007883a 	mov	r3,zero
   1d648:	0021883a 	mov	r16,zero
   1d64c:	003f6d06 	br	1d404 <__alt_data_end+0xfc01d404>
   1d650:	11fff804 	addi	r7,r2,-32
   1d654:	01000804 	movi	r4,32
   1d658:	29ced83a 	srl	r7,r5,r7
   1d65c:	11004526 	beq	r2,r4,1d774 <__subdf3+0x57c>
   1d660:	01001004 	movi	r4,64
   1d664:	2089c83a 	sub	r4,r4,r2
   1d668:	2904983a 	sll	r2,r5,r4
   1d66c:	118cb03a 	or	r6,r2,r6
   1d670:	300cc03a 	cmpne	r6,r6,zero
   1d674:	398cb03a 	or	r6,r7,r6
   1d678:	0005883a 	mov	r2,zero
   1d67c:	003f3706 	br	1d35c <__alt_data_end+0xfc01d35c>
   1d680:	80002a26 	beq	r16,zero,1d72c <__subdf3+0x534>
   1d684:	0101ffc4 	movi	r4,2047
   1d688:	49006626 	beq	r9,r4,1d824 <__subdf3+0x62c>
   1d68c:	0085c83a 	sub	r2,zero,r2
   1d690:	18c02034 	orhi	r3,r3,128
   1d694:	01000e04 	movi	r4,56
   1d698:	20807e16 	blt	r4,r2,1d894 <__subdf3+0x69c>
   1d69c:	010007c4 	movi	r4,31
   1d6a0:	2080e716 	blt	r4,r2,1da40 <__subdf3+0x848>
   1d6a4:	01000804 	movi	r4,32
   1d6a8:	2089c83a 	sub	r4,r4,r2
   1d6ac:	1914983a 	sll	r10,r3,r4
   1d6b0:	8890d83a 	srl	r8,r17,r2
   1d6b4:	8908983a 	sll	r4,r17,r4
   1d6b8:	1884d83a 	srl	r2,r3,r2
   1d6bc:	5222b03a 	or	r17,r10,r8
   1d6c0:	2006c03a 	cmpne	r3,r4,zero
   1d6c4:	88e2b03a 	or	r17,r17,r3
   1d6c8:	3463c83a 	sub	r17,r6,r17
   1d6cc:	2885c83a 	sub	r2,r5,r2
   1d6d0:	344d803a 	cmpltu	r6,r6,r17
   1d6d4:	1187c83a 	sub	r3,r2,r6
   1d6d8:	4821883a 	mov	r16,r9
   1d6dc:	3825883a 	mov	r18,r7
   1d6e0:	003f2306 	br	1d370 <__alt_data_end+0xfc01d370>
   1d6e4:	24d0b03a 	or	r8,r4,r19
   1d6e8:	40001b1e 	bne	r8,zero,1d758 <__subdf3+0x560>
   1d6ec:	0005883a 	mov	r2,zero
   1d6f0:	0009883a 	mov	r4,zero
   1d6f4:	0021883a 	mov	r16,zero
   1d6f8:	003f4906 	br	1d420 <__alt_data_end+0xfc01d420>
   1d6fc:	010007c4 	movi	r4,31
   1d700:	20803a16 	blt	r4,r2,1d7ec <__subdf3+0x5f4>
   1d704:	01000804 	movi	r4,32
   1d708:	2089c83a 	sub	r4,r4,r2
   1d70c:	2912983a 	sll	r9,r5,r4
   1d710:	3090d83a 	srl	r8,r6,r2
   1d714:	3108983a 	sll	r4,r6,r4
   1d718:	2884d83a 	srl	r2,r5,r2
   1d71c:	4a12b03a 	or	r9,r9,r8
   1d720:	2008c03a 	cmpne	r4,r4,zero
   1d724:	4912b03a 	or	r9,r9,r4
   1d728:	003f4e06 	br	1d464 <__alt_data_end+0xfc01d464>
   1d72c:	1c48b03a 	or	r4,r3,r17
   1d730:	20003c26 	beq	r4,zero,1d824 <__subdf3+0x62c>
   1d734:	0084303a 	nor	r2,zero,r2
   1d738:	1000381e 	bne	r2,zero,1d81c <__subdf3+0x624>
   1d73c:	3463c83a 	sub	r17,r6,r17
   1d740:	28c5c83a 	sub	r2,r5,r3
   1d744:	344d803a 	cmpltu	r6,r6,r17
   1d748:	1187c83a 	sub	r3,r2,r6
   1d74c:	4821883a 	mov	r16,r9
   1d750:	3825883a 	mov	r18,r7
   1d754:	003f0606 	br	1d370 <__alt_data_end+0xfc01d370>
   1d758:	2023883a 	mov	r17,r4
   1d75c:	003f0906 	br	1d384 <__alt_data_end+0xfc01d384>
   1d760:	0101ffc4 	movi	r4,2047
   1d764:	813f3a1e 	bne	r16,r4,1d450 <__alt_data_end+0xfc01d450>
   1d768:	003ec406 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d76c:	0005883a 	mov	r2,zero
   1d770:	003fb106 	br	1d638 <__alt_data_end+0xfc01d638>
   1d774:	0005883a 	mov	r2,zero
   1d778:	003fbc06 	br	1d66c <__alt_data_end+0xfc01d66c>
   1d77c:	1c44b03a 	or	r2,r3,r17
   1d780:	80008e1e 	bne	r16,zero,1d9bc <__subdf3+0x7c4>
   1d784:	1000c826 	beq	r2,zero,1daa8 <__subdf3+0x8b0>
   1d788:	2984b03a 	or	r2,r5,r6
   1d78c:	103ebb26 	beq	r2,zero,1d27c <__alt_data_end+0xfc01d27c>
   1d790:	8989883a 	add	r4,r17,r6
   1d794:	1945883a 	add	r2,r3,r5
   1d798:	2447803a 	cmpltu	r3,r4,r17
   1d79c:	1887883a 	add	r3,r3,r2
   1d7a0:	1880202c 	andhi	r2,r3,128
   1d7a4:	2023883a 	mov	r17,r4
   1d7a8:	103f1626 	beq	r2,zero,1d404 <__alt_data_end+0xfc01d404>
   1d7ac:	00bfe034 	movhi	r2,65408
   1d7b0:	10bfffc4 	addi	r2,r2,-1
   1d7b4:	5021883a 	mov	r16,r10
   1d7b8:	1886703a 	and	r3,r3,r2
   1d7bc:	003eaf06 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d7c0:	3825883a 	mov	r18,r7
   1d7c4:	003f0f06 	br	1d404 <__alt_data_end+0xfc01d404>
   1d7c8:	1c44b03a 	or	r2,r3,r17
   1d7cc:	8000251e 	bne	r16,zero,1d864 <__subdf3+0x66c>
   1d7d0:	1000661e 	bne	r2,zero,1d96c <__subdf3+0x774>
   1d7d4:	2990b03a 	or	r8,r5,r6
   1d7d8:	40009626 	beq	r8,zero,1da34 <__subdf3+0x83c>
   1d7dc:	2807883a 	mov	r3,r5
   1d7e0:	3023883a 	mov	r17,r6
   1d7e4:	3825883a 	mov	r18,r7
   1d7e8:	003ea406 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d7ec:	127ff804 	addi	r9,r2,-32
   1d7f0:	01000804 	movi	r4,32
   1d7f4:	2a52d83a 	srl	r9,r5,r9
   1d7f8:	11008c26 	beq	r2,r4,1da2c <__subdf3+0x834>
   1d7fc:	01001004 	movi	r4,64
   1d800:	2085c83a 	sub	r2,r4,r2
   1d804:	2884983a 	sll	r2,r5,r2
   1d808:	118cb03a 	or	r6,r2,r6
   1d80c:	300cc03a 	cmpne	r6,r6,zero
   1d810:	4992b03a 	or	r9,r9,r6
   1d814:	0005883a 	mov	r2,zero
   1d818:	003f1206 	br	1d464 <__alt_data_end+0xfc01d464>
   1d81c:	0101ffc4 	movi	r4,2047
   1d820:	493f9c1e 	bne	r9,r4,1d694 <__alt_data_end+0xfc01d694>
   1d824:	2807883a 	mov	r3,r5
   1d828:	3023883a 	mov	r17,r6
   1d82c:	4821883a 	mov	r16,r9
   1d830:	3825883a 	mov	r18,r7
   1d834:	003e9106 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d838:	80001f1e 	bne	r16,zero,1d8b8 <__subdf3+0x6c0>
   1d83c:	1c48b03a 	or	r4,r3,r17
   1d840:	20005a26 	beq	r4,zero,1d9ac <__subdf3+0x7b4>
   1d844:	0084303a 	nor	r2,zero,r2
   1d848:	1000561e 	bne	r2,zero,1d9a4 <__subdf3+0x7ac>
   1d84c:	89a3883a 	add	r17,r17,r6
   1d850:	1945883a 	add	r2,r3,r5
   1d854:	898d803a 	cmpltu	r6,r17,r6
   1d858:	3087883a 	add	r3,r6,r2
   1d85c:	4821883a 	mov	r16,r9
   1d860:	003f0506 	br	1d478 <__alt_data_end+0xfc01d478>
   1d864:	10002b1e 	bne	r2,zero,1d914 <__subdf3+0x71c>
   1d868:	2984b03a 	or	r2,r5,r6
   1d86c:	10008026 	beq	r2,zero,1da70 <__subdf3+0x878>
   1d870:	2807883a 	mov	r3,r5
   1d874:	3023883a 	mov	r17,r6
   1d878:	3825883a 	mov	r18,r7
   1d87c:	0401ffc4 	movi	r16,2047
   1d880:	003e7e06 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d884:	3809883a 	mov	r4,r7
   1d888:	0011883a 	mov	r8,zero
   1d88c:	0005883a 	mov	r2,zero
   1d890:	003ee306 	br	1d420 <__alt_data_end+0xfc01d420>
   1d894:	1c62b03a 	or	r17,r3,r17
   1d898:	8822c03a 	cmpne	r17,r17,zero
   1d89c:	0005883a 	mov	r2,zero
   1d8a0:	003f8906 	br	1d6c8 <__alt_data_end+0xfc01d6c8>
   1d8a4:	3809883a 	mov	r4,r7
   1d8a8:	4821883a 	mov	r16,r9
   1d8ac:	0011883a 	mov	r8,zero
   1d8b0:	0005883a 	mov	r2,zero
   1d8b4:	003eda06 	br	1d420 <__alt_data_end+0xfc01d420>
   1d8b8:	0101ffc4 	movi	r4,2047
   1d8bc:	49003b26 	beq	r9,r4,1d9ac <__subdf3+0x7b4>
   1d8c0:	0085c83a 	sub	r2,zero,r2
   1d8c4:	18c02034 	orhi	r3,r3,128
   1d8c8:	01000e04 	movi	r4,56
   1d8cc:	20806e16 	blt	r4,r2,1da88 <__subdf3+0x890>
   1d8d0:	010007c4 	movi	r4,31
   1d8d4:	20807716 	blt	r4,r2,1dab4 <__subdf3+0x8bc>
   1d8d8:	01000804 	movi	r4,32
   1d8dc:	2089c83a 	sub	r4,r4,r2
   1d8e0:	1914983a 	sll	r10,r3,r4
   1d8e4:	8890d83a 	srl	r8,r17,r2
   1d8e8:	8908983a 	sll	r4,r17,r4
   1d8ec:	1884d83a 	srl	r2,r3,r2
   1d8f0:	5222b03a 	or	r17,r10,r8
   1d8f4:	2006c03a 	cmpne	r3,r4,zero
   1d8f8:	88e2b03a 	or	r17,r17,r3
   1d8fc:	89a3883a 	add	r17,r17,r6
   1d900:	1145883a 	add	r2,r2,r5
   1d904:	898d803a 	cmpltu	r6,r17,r6
   1d908:	3087883a 	add	r3,r6,r2
   1d90c:	4821883a 	mov	r16,r9
   1d910:	003ed906 	br	1d478 <__alt_data_end+0xfc01d478>
   1d914:	2984b03a 	or	r2,r5,r6
   1d918:	10004226 	beq	r2,zero,1da24 <__subdf3+0x82c>
   1d91c:	1808d0fa 	srli	r4,r3,3
   1d920:	8822d0fa 	srli	r17,r17,3
   1d924:	1806977a 	slli	r3,r3,29
   1d928:	2080022c 	andhi	r2,r4,8
   1d92c:	1c62b03a 	or	r17,r3,r17
   1d930:	10000826 	beq	r2,zero,1d954 <__subdf3+0x75c>
   1d934:	2812d0fa 	srli	r9,r5,3
   1d938:	4880022c 	andhi	r2,r9,8
   1d93c:	1000051e 	bne	r2,zero,1d954 <__subdf3+0x75c>
   1d940:	300cd0fa 	srli	r6,r6,3
   1d944:	2804977a 	slli	r2,r5,29
   1d948:	4809883a 	mov	r4,r9
   1d94c:	3825883a 	mov	r18,r7
   1d950:	11a2b03a 	or	r17,r2,r6
   1d954:	8806d77a 	srli	r3,r17,29
   1d958:	200890fa 	slli	r4,r4,3
   1d95c:	882290fa 	slli	r17,r17,3
   1d960:	0401ffc4 	movi	r16,2047
   1d964:	1906b03a 	or	r3,r3,r4
   1d968:	003e4406 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d96c:	2984b03a 	or	r2,r5,r6
   1d970:	103e4226 	beq	r2,zero,1d27c <__alt_data_end+0xfc01d27c>
   1d974:	8989c83a 	sub	r4,r17,r6
   1d978:	8911803a 	cmpltu	r8,r17,r4
   1d97c:	1945c83a 	sub	r2,r3,r5
   1d980:	1205c83a 	sub	r2,r2,r8
   1d984:	1200202c 	andhi	r8,r2,128
   1d988:	403e9a26 	beq	r8,zero,1d3f4 <__alt_data_end+0xfc01d3f4>
   1d98c:	3463c83a 	sub	r17,r6,r17
   1d990:	28c5c83a 	sub	r2,r5,r3
   1d994:	344d803a 	cmpltu	r6,r6,r17
   1d998:	1187c83a 	sub	r3,r2,r6
   1d99c:	3825883a 	mov	r18,r7
   1d9a0:	003e3606 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d9a4:	0101ffc4 	movi	r4,2047
   1d9a8:	493fc71e 	bne	r9,r4,1d8c8 <__alt_data_end+0xfc01d8c8>
   1d9ac:	2807883a 	mov	r3,r5
   1d9b0:	3023883a 	mov	r17,r6
   1d9b4:	4821883a 	mov	r16,r9
   1d9b8:	003e3006 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d9bc:	10003626 	beq	r2,zero,1da98 <__subdf3+0x8a0>
   1d9c0:	2984b03a 	or	r2,r5,r6
   1d9c4:	10001726 	beq	r2,zero,1da24 <__subdf3+0x82c>
   1d9c8:	1808d0fa 	srli	r4,r3,3
   1d9cc:	8822d0fa 	srli	r17,r17,3
   1d9d0:	1806977a 	slli	r3,r3,29
   1d9d4:	2080022c 	andhi	r2,r4,8
   1d9d8:	1c62b03a 	or	r17,r3,r17
   1d9dc:	10000726 	beq	r2,zero,1d9fc <__subdf3+0x804>
   1d9e0:	2812d0fa 	srli	r9,r5,3
   1d9e4:	4880022c 	andhi	r2,r9,8
   1d9e8:	1000041e 	bne	r2,zero,1d9fc <__subdf3+0x804>
   1d9ec:	300cd0fa 	srli	r6,r6,3
   1d9f0:	2804977a 	slli	r2,r5,29
   1d9f4:	4809883a 	mov	r4,r9
   1d9f8:	11a2b03a 	or	r17,r2,r6
   1d9fc:	8806d77a 	srli	r3,r17,29
   1da00:	200890fa 	slli	r4,r4,3
   1da04:	882290fa 	slli	r17,r17,3
   1da08:	3825883a 	mov	r18,r7
   1da0c:	1906b03a 	or	r3,r3,r4
   1da10:	0401ffc4 	movi	r16,2047
   1da14:	003e1906 	br	1d27c <__alt_data_end+0xfc01d27c>
   1da18:	000b883a 	mov	r5,zero
   1da1c:	0005883a 	mov	r2,zero
   1da20:	003e2e06 	br	1d2dc <__alt_data_end+0xfc01d2dc>
   1da24:	0401ffc4 	movi	r16,2047
   1da28:	003e1406 	br	1d27c <__alt_data_end+0xfc01d27c>
   1da2c:	0005883a 	mov	r2,zero
   1da30:	003f7506 	br	1d808 <__alt_data_end+0xfc01d808>
   1da34:	0005883a 	mov	r2,zero
   1da38:	0009883a 	mov	r4,zero
   1da3c:	003e7806 	br	1d420 <__alt_data_end+0xfc01d420>
   1da40:	123ff804 	addi	r8,r2,-32
   1da44:	01000804 	movi	r4,32
   1da48:	1a10d83a 	srl	r8,r3,r8
   1da4c:	11002526 	beq	r2,r4,1dae4 <__subdf3+0x8ec>
   1da50:	01001004 	movi	r4,64
   1da54:	2085c83a 	sub	r2,r4,r2
   1da58:	1884983a 	sll	r2,r3,r2
   1da5c:	1444b03a 	or	r2,r2,r17
   1da60:	1004c03a 	cmpne	r2,r2,zero
   1da64:	40a2b03a 	or	r17,r8,r2
   1da68:	0005883a 	mov	r2,zero
   1da6c:	003f1606 	br	1d6c8 <__alt_data_end+0xfc01d6c8>
   1da70:	02000434 	movhi	r8,16
   1da74:	0009883a 	mov	r4,zero
   1da78:	423fffc4 	addi	r8,r8,-1
   1da7c:	00bfffc4 	movi	r2,-1
   1da80:	0401ffc4 	movi	r16,2047
   1da84:	003e6606 	br	1d420 <__alt_data_end+0xfc01d420>
   1da88:	1c62b03a 	or	r17,r3,r17
   1da8c:	8822c03a 	cmpne	r17,r17,zero
   1da90:	0005883a 	mov	r2,zero
   1da94:	003f9906 	br	1d8fc <__alt_data_end+0xfc01d8fc>
   1da98:	2807883a 	mov	r3,r5
   1da9c:	3023883a 	mov	r17,r6
   1daa0:	0401ffc4 	movi	r16,2047
   1daa4:	003df506 	br	1d27c <__alt_data_end+0xfc01d27c>
   1daa8:	2807883a 	mov	r3,r5
   1daac:	3023883a 	mov	r17,r6
   1dab0:	003df206 	br	1d27c <__alt_data_end+0xfc01d27c>
   1dab4:	123ff804 	addi	r8,r2,-32
   1dab8:	01000804 	movi	r4,32
   1dabc:	1a10d83a 	srl	r8,r3,r8
   1dac0:	11000a26 	beq	r2,r4,1daec <__subdf3+0x8f4>
   1dac4:	01001004 	movi	r4,64
   1dac8:	2085c83a 	sub	r2,r4,r2
   1dacc:	1884983a 	sll	r2,r3,r2
   1dad0:	1444b03a 	or	r2,r2,r17
   1dad4:	1004c03a 	cmpne	r2,r2,zero
   1dad8:	40a2b03a 	or	r17,r8,r2
   1dadc:	0005883a 	mov	r2,zero
   1dae0:	003f8606 	br	1d8fc <__alt_data_end+0xfc01d8fc>
   1dae4:	0005883a 	mov	r2,zero
   1dae8:	003fdc06 	br	1da5c <__alt_data_end+0xfc01da5c>
   1daec:	0005883a 	mov	r2,zero
   1daf0:	003ff706 	br	1dad0 <__alt_data_end+0xfc01dad0>

0001daf4 <__fixdfsi>:
   1daf4:	280cd53a 	srli	r6,r5,20
   1daf8:	00c00434 	movhi	r3,16
   1dafc:	18ffffc4 	addi	r3,r3,-1
   1db00:	3181ffcc 	andi	r6,r6,2047
   1db04:	01c0ff84 	movi	r7,1022
   1db08:	28c6703a 	and	r3,r5,r3
   1db0c:	280ad7fa 	srli	r5,r5,31
   1db10:	3980120e 	bge	r7,r6,1db5c <__fixdfsi+0x68>
   1db14:	00810744 	movi	r2,1053
   1db18:	11800c16 	blt	r2,r6,1db4c <__fixdfsi+0x58>
   1db1c:	00810cc4 	movi	r2,1075
   1db20:	1185c83a 	sub	r2,r2,r6
   1db24:	01c007c4 	movi	r7,31
   1db28:	18c00434 	orhi	r3,r3,16
   1db2c:	38800d16 	blt	r7,r2,1db64 <__fixdfsi+0x70>
   1db30:	31befb44 	addi	r6,r6,-1043
   1db34:	2084d83a 	srl	r2,r4,r2
   1db38:	1986983a 	sll	r3,r3,r6
   1db3c:	1884b03a 	or	r2,r3,r2
   1db40:	28000726 	beq	r5,zero,1db60 <__fixdfsi+0x6c>
   1db44:	0085c83a 	sub	r2,zero,r2
   1db48:	f800283a 	ret
   1db4c:	00a00034 	movhi	r2,32768
   1db50:	10bfffc4 	addi	r2,r2,-1
   1db54:	2885883a 	add	r2,r5,r2
   1db58:	f800283a 	ret
   1db5c:	0005883a 	mov	r2,zero
   1db60:	f800283a 	ret
   1db64:	008104c4 	movi	r2,1043
   1db68:	1185c83a 	sub	r2,r2,r6
   1db6c:	1884d83a 	srl	r2,r3,r2
   1db70:	003ff306 	br	1db40 <__alt_data_end+0xfc01db40>

0001db74 <__floatsidf>:
   1db74:	defffd04 	addi	sp,sp,-12
   1db78:	dfc00215 	stw	ra,8(sp)
   1db7c:	dc400115 	stw	r17,4(sp)
   1db80:	dc000015 	stw	r16,0(sp)
   1db84:	20002b26 	beq	r4,zero,1dc34 <__floatsidf+0xc0>
   1db88:	2023883a 	mov	r17,r4
   1db8c:	2020d7fa 	srli	r16,r4,31
   1db90:	20002d16 	blt	r4,zero,1dc48 <__floatsidf+0xd4>
   1db94:	8809883a 	mov	r4,r17
   1db98:	001dcf80 	call	1dcf8 <__clzsi2>
   1db9c:	01410784 	movi	r5,1054
   1dba0:	288bc83a 	sub	r5,r5,r2
   1dba4:	01010cc4 	movi	r4,1075
   1dba8:	2149c83a 	sub	r4,r4,r5
   1dbac:	00c007c4 	movi	r3,31
   1dbb0:	1900160e 	bge	r3,r4,1dc0c <__floatsidf+0x98>
   1dbb4:	00c104c4 	movi	r3,1043
   1dbb8:	1947c83a 	sub	r3,r3,r5
   1dbbc:	88c6983a 	sll	r3,r17,r3
   1dbc0:	00800434 	movhi	r2,16
   1dbc4:	10bfffc4 	addi	r2,r2,-1
   1dbc8:	1886703a 	and	r3,r3,r2
   1dbcc:	2941ffcc 	andi	r5,r5,2047
   1dbd0:	800d883a 	mov	r6,r16
   1dbd4:	0005883a 	mov	r2,zero
   1dbd8:	280a953a 	slli	r5,r5,20
   1dbdc:	31803fcc 	andi	r6,r6,255
   1dbe0:	01000434 	movhi	r4,16
   1dbe4:	300c97fa 	slli	r6,r6,31
   1dbe8:	213fffc4 	addi	r4,r4,-1
   1dbec:	1906703a 	and	r3,r3,r4
   1dbf0:	1946b03a 	or	r3,r3,r5
   1dbf4:	1986b03a 	or	r3,r3,r6
   1dbf8:	dfc00217 	ldw	ra,8(sp)
   1dbfc:	dc400117 	ldw	r17,4(sp)
   1dc00:	dc000017 	ldw	r16,0(sp)
   1dc04:	dec00304 	addi	sp,sp,12
   1dc08:	f800283a 	ret
   1dc0c:	00c002c4 	movi	r3,11
   1dc10:	1887c83a 	sub	r3,r3,r2
   1dc14:	88c6d83a 	srl	r3,r17,r3
   1dc18:	8904983a 	sll	r2,r17,r4
   1dc1c:	01000434 	movhi	r4,16
   1dc20:	213fffc4 	addi	r4,r4,-1
   1dc24:	2941ffcc 	andi	r5,r5,2047
   1dc28:	1906703a 	and	r3,r3,r4
   1dc2c:	800d883a 	mov	r6,r16
   1dc30:	003fe906 	br	1dbd8 <__alt_data_end+0xfc01dbd8>
   1dc34:	000d883a 	mov	r6,zero
   1dc38:	000b883a 	mov	r5,zero
   1dc3c:	0007883a 	mov	r3,zero
   1dc40:	0005883a 	mov	r2,zero
   1dc44:	003fe406 	br	1dbd8 <__alt_data_end+0xfc01dbd8>
   1dc48:	0123c83a 	sub	r17,zero,r4
   1dc4c:	003fd106 	br	1db94 <__alt_data_end+0xfc01db94>

0001dc50 <__floatunsidf>:
   1dc50:	defffe04 	addi	sp,sp,-8
   1dc54:	dc000015 	stw	r16,0(sp)
   1dc58:	dfc00115 	stw	ra,4(sp)
   1dc5c:	2021883a 	mov	r16,r4
   1dc60:	20002226 	beq	r4,zero,1dcec <__floatunsidf+0x9c>
   1dc64:	001dcf80 	call	1dcf8 <__clzsi2>
   1dc68:	01010784 	movi	r4,1054
   1dc6c:	2089c83a 	sub	r4,r4,r2
   1dc70:	01810cc4 	movi	r6,1075
   1dc74:	310dc83a 	sub	r6,r6,r4
   1dc78:	00c007c4 	movi	r3,31
   1dc7c:	1980120e 	bge	r3,r6,1dcc8 <__floatunsidf+0x78>
   1dc80:	00c104c4 	movi	r3,1043
   1dc84:	1907c83a 	sub	r3,r3,r4
   1dc88:	80ca983a 	sll	r5,r16,r3
   1dc8c:	00800434 	movhi	r2,16
   1dc90:	10bfffc4 	addi	r2,r2,-1
   1dc94:	2101ffcc 	andi	r4,r4,2047
   1dc98:	0021883a 	mov	r16,zero
   1dc9c:	288a703a 	and	r5,r5,r2
   1dca0:	2008953a 	slli	r4,r4,20
   1dca4:	00c00434 	movhi	r3,16
   1dca8:	18ffffc4 	addi	r3,r3,-1
   1dcac:	28c6703a 	and	r3,r5,r3
   1dcb0:	8005883a 	mov	r2,r16
   1dcb4:	1906b03a 	or	r3,r3,r4
   1dcb8:	dfc00117 	ldw	ra,4(sp)
   1dcbc:	dc000017 	ldw	r16,0(sp)
   1dcc0:	dec00204 	addi	sp,sp,8
   1dcc4:	f800283a 	ret
   1dcc8:	00c002c4 	movi	r3,11
   1dccc:	188bc83a 	sub	r5,r3,r2
   1dcd0:	814ad83a 	srl	r5,r16,r5
   1dcd4:	00c00434 	movhi	r3,16
   1dcd8:	18ffffc4 	addi	r3,r3,-1
   1dcdc:	81a0983a 	sll	r16,r16,r6
   1dce0:	2101ffcc 	andi	r4,r4,2047
   1dce4:	28ca703a 	and	r5,r5,r3
   1dce8:	003fed06 	br	1dca0 <__alt_data_end+0xfc01dca0>
   1dcec:	0009883a 	mov	r4,zero
   1dcf0:	000b883a 	mov	r5,zero
   1dcf4:	003fea06 	br	1dca0 <__alt_data_end+0xfc01dca0>

0001dcf8 <__clzsi2>:
   1dcf8:	00bfffd4 	movui	r2,65535
   1dcfc:	11000536 	bltu	r2,r4,1dd14 <__clzsi2+0x1c>
   1dd00:	00803fc4 	movi	r2,255
   1dd04:	11000f36 	bltu	r2,r4,1dd44 <__clzsi2+0x4c>
   1dd08:	00800804 	movi	r2,32
   1dd0c:	0007883a 	mov	r3,zero
   1dd10:	00000506 	br	1dd28 <__clzsi2+0x30>
   1dd14:	00804034 	movhi	r2,256
   1dd18:	10bfffc4 	addi	r2,r2,-1
   1dd1c:	11000c2e 	bgeu	r2,r4,1dd50 <__clzsi2+0x58>
   1dd20:	00800204 	movi	r2,8
   1dd24:	00c00604 	movi	r3,24
   1dd28:	20c8d83a 	srl	r4,r4,r3
   1dd2c:	00c000f4 	movhi	r3,3
   1dd30:	18e5d704 	addi	r3,r3,-26788
   1dd34:	1909883a 	add	r4,r3,r4
   1dd38:	20c00003 	ldbu	r3,0(r4)
   1dd3c:	10c5c83a 	sub	r2,r2,r3
   1dd40:	f800283a 	ret
   1dd44:	00800604 	movi	r2,24
   1dd48:	00c00204 	movi	r3,8
   1dd4c:	003ff606 	br	1dd28 <__alt_data_end+0xfc01dd28>
   1dd50:	00800404 	movi	r2,16
   1dd54:	1007883a 	mov	r3,r2
   1dd58:	003ff306 	br	1dd28 <__alt_data_end+0xfc01dd28>

0001dd5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1dd5c:	defffe04 	addi	sp,sp,-8
   1dd60:	dfc00115 	stw	ra,4(sp)
   1dd64:	df000015 	stw	fp,0(sp)
   1dd68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1dd6c:	d0a5b717 	ldw	r2,-26916(gp)
   1dd70:	10000326 	beq	r2,zero,1dd80 <alt_get_errno+0x24>
   1dd74:	d0a5b717 	ldw	r2,-26916(gp)
   1dd78:	103ee83a 	callr	r2
   1dd7c:	00000106 	br	1dd84 <alt_get_errno+0x28>
   1dd80:	d0b23f04 	addi	r2,gp,-14084
}
   1dd84:	e037883a 	mov	sp,fp
   1dd88:	dfc00117 	ldw	ra,4(sp)
   1dd8c:	df000017 	ldw	fp,0(sp)
   1dd90:	dec00204 	addi	sp,sp,8
   1dd94:	f800283a 	ret

0001dd98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1dd98:	defffb04 	addi	sp,sp,-20
   1dd9c:	dfc00415 	stw	ra,16(sp)
   1dda0:	df000315 	stw	fp,12(sp)
   1dda4:	df000304 	addi	fp,sp,12
   1dda8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1ddac:	e0bfff17 	ldw	r2,-4(fp)
   1ddb0:	10000816 	blt	r2,zero,1ddd4 <close+0x3c>
   1ddb4:	01400304 	movi	r5,12
   1ddb8:	e13fff17 	ldw	r4,-4(fp)
   1ddbc:	000cca00 	call	cca0 <__mulsi3>
   1ddc0:	1007883a 	mov	r3,r2
   1ddc4:	008000f4 	movhi	r2,3
   1ddc8:	10a86204 	addi	r2,r2,-24184
   1ddcc:	1885883a 	add	r2,r3,r2
   1ddd0:	00000106 	br	1ddd8 <close+0x40>
   1ddd4:	0005883a 	mov	r2,zero
   1ddd8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1dddc:	e0bffd17 	ldw	r2,-12(fp)
   1dde0:	10001926 	beq	r2,zero,1de48 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1dde4:	e0bffd17 	ldw	r2,-12(fp)
   1dde8:	10800017 	ldw	r2,0(r2)
   1ddec:	10800417 	ldw	r2,16(r2)
   1ddf0:	10000626 	beq	r2,zero,1de0c <close+0x74>
   1ddf4:	e0bffd17 	ldw	r2,-12(fp)
   1ddf8:	10800017 	ldw	r2,0(r2)
   1ddfc:	10800417 	ldw	r2,16(r2)
   1de00:	e13ffd17 	ldw	r4,-12(fp)
   1de04:	103ee83a 	callr	r2
   1de08:	00000106 	br	1de10 <close+0x78>
   1de0c:	0005883a 	mov	r2,zero
   1de10:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1de14:	e13fff17 	ldw	r4,-4(fp)
   1de18:	001e6400 	call	1e640 <alt_release_fd>
    if (rval < 0)
   1de1c:	e0bffe17 	ldw	r2,-8(fp)
   1de20:	1000070e 	bge	r2,zero,1de40 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1de24:	001dd5c0 	call	1dd5c <alt_get_errno>
   1de28:	1007883a 	mov	r3,r2
   1de2c:	e0bffe17 	ldw	r2,-8(fp)
   1de30:	0085c83a 	sub	r2,zero,r2
   1de34:	18800015 	stw	r2,0(r3)
      return -1;
   1de38:	00bfffc4 	movi	r2,-1
   1de3c:	00000706 	br	1de5c <close+0xc4>
    }
    return 0;
   1de40:	0005883a 	mov	r2,zero
   1de44:	00000506 	br	1de5c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1de48:	001dd5c0 	call	1dd5c <alt_get_errno>
   1de4c:	1007883a 	mov	r3,r2
   1de50:	00801444 	movi	r2,81
   1de54:	18800015 	stw	r2,0(r3)
    return -1;
   1de58:	00bfffc4 	movi	r2,-1
  }
}
   1de5c:	e037883a 	mov	sp,fp
   1de60:	dfc00117 	ldw	ra,4(sp)
   1de64:	df000017 	ldw	fp,0(sp)
   1de68:	dec00204 	addi	sp,sp,8
   1de6c:	f800283a 	ret

0001de70 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1de70:	defffc04 	addi	sp,sp,-16
   1de74:	df000315 	stw	fp,12(sp)
   1de78:	df000304 	addi	fp,sp,12
   1de7c:	e13ffd15 	stw	r4,-12(fp)
   1de80:	e17ffe15 	stw	r5,-8(fp)
   1de84:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1de88:	e0bfff17 	ldw	r2,-4(fp)
}
   1de8c:	e037883a 	mov	sp,fp
   1de90:	df000017 	ldw	fp,0(sp)
   1de94:	dec00104 	addi	sp,sp,4
   1de98:	f800283a 	ret

0001de9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1de9c:	defffd04 	addi	sp,sp,-12
   1dea0:	df000215 	stw	fp,8(sp)
   1dea4:	df000204 	addi	fp,sp,8
   1dea8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1deac:	0001883a 	nop
   1deb0:	e0bfff17 	ldw	r2,-4(fp)
   1deb4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1deb8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1debc:	10000226 	beq	r2,zero,1dec8 <_exit+0x2c>
    ALT_SIM_FAIL();
   1dec0:	002af070 	cmpltui	zero,zero,43969
   1dec4:	00000106 	br	1decc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1dec8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1decc:	003fff06 	br	1decc <__alt_data_end+0xfc01decc>

0001ded0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ded0:	defffe04 	addi	sp,sp,-8
   1ded4:	dfc00115 	stw	ra,4(sp)
   1ded8:	df000015 	stw	fp,0(sp)
   1dedc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1dee0:	d0a5b717 	ldw	r2,-26916(gp)
   1dee4:	10000326 	beq	r2,zero,1def4 <alt_get_errno+0x24>
   1dee8:	d0a5b717 	ldw	r2,-26916(gp)
   1deec:	103ee83a 	callr	r2
   1def0:	00000106 	br	1def8 <alt_get_errno+0x28>
   1def4:	d0b23f04 	addi	r2,gp,-14084
}
   1def8:	e037883a 	mov	sp,fp
   1defc:	dfc00117 	ldw	ra,4(sp)
   1df00:	df000017 	ldw	fp,0(sp)
   1df04:	dec00204 	addi	sp,sp,8
   1df08:	f800283a 	ret

0001df0c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1df0c:	defffb04 	addi	sp,sp,-20
   1df10:	dfc00415 	stw	ra,16(sp)
   1df14:	df000315 	stw	fp,12(sp)
   1df18:	df000304 	addi	fp,sp,12
   1df1c:	e13ffe15 	stw	r4,-8(fp)
   1df20:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1df24:	e0bffe17 	ldw	r2,-8(fp)
   1df28:	10000816 	blt	r2,zero,1df4c <fstat+0x40>
   1df2c:	01400304 	movi	r5,12
   1df30:	e13ffe17 	ldw	r4,-8(fp)
   1df34:	000cca00 	call	cca0 <__mulsi3>
   1df38:	1007883a 	mov	r3,r2
   1df3c:	008000f4 	movhi	r2,3
   1df40:	10a86204 	addi	r2,r2,-24184
   1df44:	1885883a 	add	r2,r3,r2
   1df48:	00000106 	br	1df50 <fstat+0x44>
   1df4c:	0005883a 	mov	r2,zero
   1df50:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1df54:	e0bffd17 	ldw	r2,-12(fp)
   1df58:	10001026 	beq	r2,zero,1df9c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1df5c:	e0bffd17 	ldw	r2,-12(fp)
   1df60:	10800017 	ldw	r2,0(r2)
   1df64:	10800817 	ldw	r2,32(r2)
   1df68:	10000726 	beq	r2,zero,1df88 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1df6c:	e0bffd17 	ldw	r2,-12(fp)
   1df70:	10800017 	ldw	r2,0(r2)
   1df74:	10800817 	ldw	r2,32(r2)
   1df78:	e17fff17 	ldw	r5,-4(fp)
   1df7c:	e13ffd17 	ldw	r4,-12(fp)
   1df80:	103ee83a 	callr	r2
   1df84:	00000a06 	br	1dfb0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1df88:	e0bfff17 	ldw	r2,-4(fp)
   1df8c:	00c80004 	movi	r3,8192
   1df90:	10c00115 	stw	r3,4(r2)
      return 0;
   1df94:	0005883a 	mov	r2,zero
   1df98:	00000506 	br	1dfb0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1df9c:	001ded00 	call	1ded0 <alt_get_errno>
   1dfa0:	1007883a 	mov	r3,r2
   1dfa4:	00801444 	movi	r2,81
   1dfa8:	18800015 	stw	r2,0(r3)
    return -1;
   1dfac:	00bfffc4 	movi	r2,-1
  }
}
   1dfb0:	e037883a 	mov	sp,fp
   1dfb4:	dfc00117 	ldw	ra,4(sp)
   1dfb8:	df000017 	ldw	fp,0(sp)
   1dfbc:	dec00204 	addi	sp,sp,8
   1dfc0:	f800283a 	ret

0001dfc4 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1dfc4:	deffff04 	addi	sp,sp,-4
   1dfc8:	df000015 	stw	fp,0(sp)
   1dfcc:	d839883a 	mov	fp,sp
  return 0;
   1dfd0:	0005883a 	mov	r2,zero
}
   1dfd4:	e037883a 	mov	sp,fp
   1dfd8:	df000017 	ldw	fp,0(sp)
   1dfdc:	dec00104 	addi	sp,sp,4
   1dfe0:	f800283a 	ret

0001dfe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1dfe4:	defffe04 	addi	sp,sp,-8
   1dfe8:	dfc00115 	stw	ra,4(sp)
   1dfec:	df000015 	stw	fp,0(sp)
   1dff0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1dff4:	d0a5b717 	ldw	r2,-26916(gp)
   1dff8:	10000326 	beq	r2,zero,1e008 <alt_get_errno+0x24>
   1dffc:	d0a5b717 	ldw	r2,-26916(gp)
   1e000:	103ee83a 	callr	r2
   1e004:	00000106 	br	1e00c <alt_get_errno+0x28>
   1e008:	d0b23f04 	addi	r2,gp,-14084
}
   1e00c:	e037883a 	mov	sp,fp
   1e010:	dfc00117 	ldw	ra,4(sp)
   1e014:	df000017 	ldw	fp,0(sp)
   1e018:	dec00204 	addi	sp,sp,8
   1e01c:	f800283a 	ret

0001e020 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1e020:	deffed04 	addi	sp,sp,-76
   1e024:	dfc01215 	stw	ra,72(sp)
   1e028:	df001115 	stw	fp,68(sp)
   1e02c:	df001104 	addi	fp,sp,68
   1e030:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1e034:	e0bfff17 	ldw	r2,-4(fp)
   1e038:	10000816 	blt	r2,zero,1e05c <isatty+0x3c>
   1e03c:	01400304 	movi	r5,12
   1e040:	e13fff17 	ldw	r4,-4(fp)
   1e044:	000cca00 	call	cca0 <__mulsi3>
   1e048:	1007883a 	mov	r3,r2
   1e04c:	008000f4 	movhi	r2,3
   1e050:	10a86204 	addi	r2,r2,-24184
   1e054:	1885883a 	add	r2,r3,r2
   1e058:	00000106 	br	1e060 <isatty+0x40>
   1e05c:	0005883a 	mov	r2,zero
   1e060:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1e064:	e0bfef17 	ldw	r2,-68(fp)
   1e068:	10000e26 	beq	r2,zero,1e0a4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1e06c:	e0bfef17 	ldw	r2,-68(fp)
   1e070:	10800017 	ldw	r2,0(r2)
   1e074:	10800817 	ldw	r2,32(r2)
   1e078:	1000021e 	bne	r2,zero,1e084 <isatty+0x64>
    {
      return 1;
   1e07c:	00800044 	movi	r2,1
   1e080:	00000d06 	br	1e0b8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1e084:	e0bff004 	addi	r2,fp,-64
   1e088:	100b883a 	mov	r5,r2
   1e08c:	e13fff17 	ldw	r4,-4(fp)
   1e090:	001df0c0 	call	1df0c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1e094:	e0bff117 	ldw	r2,-60(fp)
   1e098:	10880020 	cmpeqi	r2,r2,8192
   1e09c:	10803fcc 	andi	r2,r2,255
   1e0a0:	00000506 	br	1e0b8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1e0a4:	001dfe40 	call	1dfe4 <alt_get_errno>
   1e0a8:	1007883a 	mov	r3,r2
   1e0ac:	00801444 	movi	r2,81
   1e0b0:	18800015 	stw	r2,0(r3)
    return 0;
   1e0b4:	0005883a 	mov	r2,zero
  }
}
   1e0b8:	e037883a 	mov	sp,fp
   1e0bc:	dfc00117 	ldw	ra,4(sp)
   1e0c0:	df000017 	ldw	fp,0(sp)
   1e0c4:	dec00204 	addi	sp,sp,8
   1e0c8:	f800283a 	ret

0001e0cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e0cc:	defffe04 	addi	sp,sp,-8
   1e0d0:	dfc00115 	stw	ra,4(sp)
   1e0d4:	df000015 	stw	fp,0(sp)
   1e0d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e0dc:	d0a5b717 	ldw	r2,-26916(gp)
   1e0e0:	10000326 	beq	r2,zero,1e0f0 <alt_get_errno+0x24>
   1e0e4:	d0a5b717 	ldw	r2,-26916(gp)
   1e0e8:	103ee83a 	callr	r2
   1e0ec:	00000106 	br	1e0f4 <alt_get_errno+0x28>
   1e0f0:	d0b23f04 	addi	r2,gp,-14084
}
   1e0f4:	e037883a 	mov	sp,fp
   1e0f8:	dfc00117 	ldw	ra,4(sp)
   1e0fc:	df000017 	ldw	fp,0(sp)
   1e100:	dec00204 	addi	sp,sp,8
   1e104:	f800283a 	ret

0001e108 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1e108:	defffb04 	addi	sp,sp,-20
   1e10c:	dfc00415 	stw	ra,16(sp)
   1e110:	df000315 	stw	fp,12(sp)
   1e114:	df000304 	addi	fp,sp,12
   1e118:	e13ffe15 	stw	r4,-8(fp)
   1e11c:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   1e120:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   1e124:	e0bffe17 	ldw	r2,-8(fp)
   1e128:	00802f16 	blt	zero,r2,1e1e8 <kill+0xe0>
  {
    switch (sig)
   1e12c:	e0bfff17 	ldw	r2,-4(fp)
   1e130:	10800828 	cmpgeui	r2,r2,32
   1e134:	1000291e 	bne	r2,zero,1e1dc <kill+0xd4>
   1e138:	e0bfff17 	ldw	r2,-4(fp)
   1e13c:	100690ba 	slli	r3,r2,2
   1e140:	008000b4 	movhi	r2,2
   1e144:	10b85504 	addi	r2,r2,-7852
   1e148:	1885883a 	add	r2,r3,r2
   1e14c:	10800017 	ldw	r2,0(r2)
   1e150:	1000683a 	jmp	r2
   1e154:	0001e1fc 	xorhi	zero,zero,1927
   1e158:	0001e1dc 	xori	zero,zero,1927
   1e15c:	0001e1dc 	xori	zero,zero,1927
   1e160:	0001e1d4 	movui	zero,1927
   1e164:	0001e1d4 	movui	zero,1927
   1e168:	0001e1d4 	movui	zero,1927
   1e16c:	0001e1d4 	movui	zero,1927
   1e170:	0001e1dc 	xori	zero,zero,1927
   1e174:	0001e1d4 	movui	zero,1927
   1e178:	0001e1d4 	movui	zero,1927
   1e17c:	0001e1d4 	movui	zero,1927
   1e180:	0001e1d4 	movui	zero,1927
   1e184:	0001e1d4 	movui	zero,1927
   1e188:	0001e1d4 	movui	zero,1927
   1e18c:	0001e1d4 	movui	zero,1927
   1e190:	0001e1d4 	movui	zero,1927
   1e194:	0001e1fc 	xorhi	zero,zero,1927
   1e198:	0001e1dc 	xori	zero,zero,1927
   1e19c:	0001e1dc 	xori	zero,zero,1927
   1e1a0:	0001e1dc 	xori	zero,zero,1927
   1e1a4:	0001e1fc 	xorhi	zero,zero,1927
   1e1a8:	0001e1dc 	xori	zero,zero,1927
   1e1ac:	0001e1dc 	xori	zero,zero,1927
   1e1b0:	0001e1d4 	movui	zero,1927
   1e1b4:	0001e1d4 	movui	zero,1927
   1e1b8:	0001e1d4 	movui	zero,1927
   1e1bc:	0001e1d4 	movui	zero,1927
   1e1c0:	0001e1d4 	movui	zero,1927
   1e1c4:	0001e1dc 	xori	zero,zero,1927
   1e1c8:	0001e1dc 	xori	zero,zero,1927
   1e1cc:	0001e1d4 	movui	zero,1927
   1e1d0:	0001e1d4 	movui	zero,1927
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1e1d4:	0009883a 	mov	r4,zero
   1e1d8:	001de9c0 	call	1de9c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1e1dc:	00800584 	movi	r2,22
   1e1e0:	e0bffd15 	stw	r2,-12(fp)
   1e1e4:	00000606 	br	1e200 <kill+0xf8>
    }
  }

  else if (pid > 0)
   1e1e8:	e0bffe17 	ldw	r2,-8(fp)
   1e1ec:	0080040e 	bge	zero,r2,1e200 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1e1f0:	008000c4 	movi	r2,3
   1e1f4:	e0bffd15 	stw	r2,-12(fp)
   1e1f8:	00000106 	br	1e200 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   1e1fc:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   1e200:	e0bffd17 	ldw	r2,-12(fp)
   1e204:	10000626 	beq	r2,zero,1e220 <kill+0x118>
  {
    ALT_ERRNO = status;
   1e208:	001e0cc0 	call	1e0cc <alt_get_errno>
   1e20c:	1007883a 	mov	r3,r2
   1e210:	e0bffd17 	ldw	r2,-12(fp)
   1e214:	18800015 	stw	r2,0(r3)
    return -1;
   1e218:	00bfffc4 	movi	r2,-1
   1e21c:	00000106 	br	1e224 <kill+0x11c>
  }

  return 0;
   1e220:	0005883a 	mov	r2,zero
}
   1e224:	e037883a 	mov	sp,fp
   1e228:	dfc00117 	ldw	ra,4(sp)
   1e22c:	df000017 	ldw	fp,0(sp)
   1e230:	dec00204 	addi	sp,sp,8
   1e234:	f800283a 	ret

0001e238 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1e238:	defffc04 	addi	sp,sp,-16
   1e23c:	df000315 	stw	fp,12(sp)
   1e240:	df000304 	addi	fp,sp,12
   1e244:	e13ffd15 	stw	r4,-12(fp)
   1e248:	e17ffe15 	stw	r5,-8(fp)
   1e24c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1e250:	e0fffe17 	ldw	r3,-8(fp)
   1e254:	e0bffd17 	ldw	r2,-12(fp)
   1e258:	18800c26 	beq	r3,r2,1e28c <alt_load_section+0x54>
  {
    while( to != end )
   1e25c:	00000806 	br	1e280 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1e260:	e0bffe17 	ldw	r2,-8(fp)
   1e264:	10c00104 	addi	r3,r2,4
   1e268:	e0fffe15 	stw	r3,-8(fp)
   1e26c:	e0fffd17 	ldw	r3,-12(fp)
   1e270:	19000104 	addi	r4,r3,4
   1e274:	e13ffd15 	stw	r4,-12(fp)
   1e278:	18c00017 	ldw	r3,0(r3)
   1e27c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1e280:	e0fffe17 	ldw	r3,-8(fp)
   1e284:	e0bfff17 	ldw	r2,-4(fp)
   1e288:	18bff51e 	bne	r3,r2,1e260 <__alt_data_end+0xfc01e260>
    {
      *to++ = *from++;
    }
  }
}
   1e28c:	0001883a 	nop
   1e290:	e037883a 	mov	sp,fp
   1e294:	df000017 	ldw	fp,0(sp)
   1e298:	dec00104 	addi	sp,sp,4
   1e29c:	f800283a 	ret

0001e2a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1e2a0:	defffe04 	addi	sp,sp,-8
   1e2a4:	dfc00115 	stw	ra,4(sp)
   1e2a8:	df000015 	stw	fp,0(sp)
   1e2ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1e2b0:	018000f4 	movhi	r6,3
   1e2b4:	31b2a604 	addi	r6,r6,-13672
   1e2b8:	014000f4 	movhi	r5,3
   1e2bc:	29662f04 	addi	r5,r5,-26436
   1e2c0:	010000f4 	movhi	r4,3
   1e2c4:	2132a604 	addi	r4,r4,-13672
   1e2c8:	001e2380 	call	1e238 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1e2cc:	01800034 	movhi	r6,0
   1e2d0:	31808c04 	addi	r6,r6,560
   1e2d4:	01400034 	movhi	r5,0
   1e2d8:	29400804 	addi	r5,r5,32
   1e2dc:	01000034 	movhi	r4,0
   1e2e0:	21000804 	addi	r4,r4,32
   1e2e4:	001e2380 	call	1e238 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1e2e8:	018000f4 	movhi	r6,3
   1e2ec:	31a62f04 	addi	r6,r6,-26436
   1e2f0:	014000b4 	movhi	r5,2
   1e2f4:	294a6504 	addi	r5,r5,10644
   1e2f8:	010000b4 	movhi	r4,2
   1e2fc:	210a6504 	addi	r4,r4,10644
   1e300:	001e2380 	call	1e238 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1e304:	00216680 	call	21668 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1e308:	00218b80 	call	218b8 <alt_icache_flush_all>
}
   1e30c:	0001883a 	nop
   1e310:	e037883a 	mov	sp,fp
   1e314:	dfc00117 	ldw	ra,4(sp)
   1e318:	df000017 	ldw	fp,0(sp)
   1e31c:	dec00204 	addi	sp,sp,8
   1e320:	f800283a 	ret

0001e324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e324:	defffe04 	addi	sp,sp,-8
   1e328:	dfc00115 	stw	ra,4(sp)
   1e32c:	df000015 	stw	fp,0(sp)
   1e330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e334:	d0a5b717 	ldw	r2,-26916(gp)
   1e338:	10000326 	beq	r2,zero,1e348 <alt_get_errno+0x24>
   1e33c:	d0a5b717 	ldw	r2,-26916(gp)
   1e340:	103ee83a 	callr	r2
   1e344:	00000106 	br	1e34c <alt_get_errno+0x28>
   1e348:	d0b23f04 	addi	r2,gp,-14084
}
   1e34c:	e037883a 	mov	sp,fp
   1e350:	dfc00117 	ldw	ra,4(sp)
   1e354:	df000017 	ldw	fp,0(sp)
   1e358:	dec00204 	addi	sp,sp,8
   1e35c:	f800283a 	ret

0001e360 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1e360:	defff904 	addi	sp,sp,-28
   1e364:	dfc00615 	stw	ra,24(sp)
   1e368:	df000515 	stw	fp,20(sp)
   1e36c:	df000504 	addi	fp,sp,20
   1e370:	e13ffd15 	stw	r4,-12(fp)
   1e374:	e17ffe15 	stw	r5,-8(fp)
   1e378:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1e37c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1e380:	e0bffd17 	ldw	r2,-12(fp)
   1e384:	10000816 	blt	r2,zero,1e3a8 <lseek+0x48>
   1e388:	01400304 	movi	r5,12
   1e38c:	e13ffd17 	ldw	r4,-12(fp)
   1e390:	000cca00 	call	cca0 <__mulsi3>
   1e394:	1007883a 	mov	r3,r2
   1e398:	008000f4 	movhi	r2,3
   1e39c:	10a86204 	addi	r2,r2,-24184
   1e3a0:	1885883a 	add	r2,r3,r2
   1e3a4:	00000106 	br	1e3ac <lseek+0x4c>
   1e3a8:	0005883a 	mov	r2,zero
   1e3ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1e3b0:	e0bffc17 	ldw	r2,-16(fp)
   1e3b4:	10001026 	beq	r2,zero,1e3f8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1e3b8:	e0bffc17 	ldw	r2,-16(fp)
   1e3bc:	10800017 	ldw	r2,0(r2)
   1e3c0:	10800717 	ldw	r2,28(r2)
   1e3c4:	10000926 	beq	r2,zero,1e3ec <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1e3c8:	e0bffc17 	ldw	r2,-16(fp)
   1e3cc:	10800017 	ldw	r2,0(r2)
   1e3d0:	10800717 	ldw	r2,28(r2)
   1e3d4:	e1bfff17 	ldw	r6,-4(fp)
   1e3d8:	e17ffe17 	ldw	r5,-8(fp)
   1e3dc:	e13ffc17 	ldw	r4,-16(fp)
   1e3e0:	103ee83a 	callr	r2
   1e3e4:	e0bffb15 	stw	r2,-20(fp)
   1e3e8:	00000506 	br	1e400 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1e3ec:	00bfde84 	movi	r2,-134
   1e3f0:	e0bffb15 	stw	r2,-20(fp)
   1e3f4:	00000206 	br	1e400 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1e3f8:	00bfebc4 	movi	r2,-81
   1e3fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1e400:	e0bffb17 	ldw	r2,-20(fp)
   1e404:	1000070e 	bge	r2,zero,1e424 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1e408:	001e3240 	call	1e324 <alt_get_errno>
   1e40c:	1007883a 	mov	r3,r2
   1e410:	e0bffb17 	ldw	r2,-20(fp)
   1e414:	0085c83a 	sub	r2,zero,r2
   1e418:	18800015 	stw	r2,0(r3)
    rc = -1;
   1e41c:	00bfffc4 	movi	r2,-1
   1e420:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1e424:	e0bffb17 	ldw	r2,-20(fp)
}
   1e428:	e037883a 	mov	sp,fp
   1e42c:	dfc00117 	ldw	ra,4(sp)
   1e430:	df000017 	ldw	fp,0(sp)
   1e434:	dec00204 	addi	sp,sp,8
   1e438:	f800283a 	ret

0001e43c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1e43c:	defffd04 	addi	sp,sp,-12
   1e440:	dfc00215 	stw	ra,8(sp)
   1e444:	df000115 	stw	fp,4(sp)
   1e448:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1e44c:	0009883a 	mov	r4,zero
   1e450:	001e9c80 	call	1e9c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1e454:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1e458:	001ea000 	call	1ea00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1e45c:	018000f4 	movhi	r6,3
   1e460:	31a61a04 	addi	r6,r6,-26520
   1e464:	014000f4 	movhi	r5,3
   1e468:	29661a04 	addi	r5,r5,-26520
   1e46c:	010000f4 	movhi	r4,3
   1e470:	21261a04 	addi	r4,r4,-26520
   1e474:	0021c5c0 	call	21c5c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1e478:	00217680 	call	21768 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1e47c:	010000b4 	movhi	r4,2
   1e480:	2105f204 	addi	r4,r4,6088
   1e484:	00225f40 	call	225f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1e488:	d0b24317 	ldw	r2,-14068(gp)
   1e48c:	d0f24417 	ldw	r3,-14064(gp)
   1e490:	d1324517 	ldw	r4,-14060(gp)
   1e494:	200d883a 	mov	r6,r4
   1e498:	180b883a 	mov	r5,r3
   1e49c:	1009883a 	mov	r4,r2
   1e4a0:	000a0c40 	call	a0c4 <main>
   1e4a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1e4a8:	01000044 	movi	r4,1
   1e4ac:	001dd980 	call	1dd98 <close>
  exit (result);
   1e4b0:	e13fff17 	ldw	r4,-4(fp)
   1e4b4:	00226080 	call	22608 <exit>

0001e4b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1e4b8:	defffe04 	addi	sp,sp,-8
   1e4bc:	df000115 	stw	fp,4(sp)
   1e4c0:	df000104 	addi	fp,sp,4
   1e4c4:	e13fff15 	stw	r4,-4(fp)
}
   1e4c8:	0001883a 	nop
   1e4cc:	e037883a 	mov	sp,fp
   1e4d0:	df000017 	ldw	fp,0(sp)
   1e4d4:	dec00104 	addi	sp,sp,4
   1e4d8:	f800283a 	ret

0001e4dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1e4dc:	defffe04 	addi	sp,sp,-8
   1e4e0:	df000115 	stw	fp,4(sp)
   1e4e4:	df000104 	addi	fp,sp,4
   1e4e8:	e13fff15 	stw	r4,-4(fp)
}
   1e4ec:	0001883a 	nop
   1e4f0:	e037883a 	mov	sp,fp
   1e4f4:	df000017 	ldw	fp,0(sp)
   1e4f8:	dec00104 	addi	sp,sp,4
   1e4fc:	f800283a 	ret

0001e500 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e500:	defffe04 	addi	sp,sp,-8
   1e504:	dfc00115 	stw	ra,4(sp)
   1e508:	df000015 	stw	fp,0(sp)
   1e50c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e510:	d0a5b717 	ldw	r2,-26916(gp)
   1e514:	10000326 	beq	r2,zero,1e524 <alt_get_errno+0x24>
   1e518:	d0a5b717 	ldw	r2,-26916(gp)
   1e51c:	103ee83a 	callr	r2
   1e520:	00000106 	br	1e528 <alt_get_errno+0x28>
   1e524:	d0b23f04 	addi	r2,gp,-14084
}
   1e528:	e037883a 	mov	sp,fp
   1e52c:	dfc00117 	ldw	ra,4(sp)
   1e530:	df000017 	ldw	fp,0(sp)
   1e534:	dec00204 	addi	sp,sp,8
   1e538:	f800283a 	ret

0001e53c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1e53c:	defff904 	addi	sp,sp,-28
   1e540:	dfc00615 	stw	ra,24(sp)
   1e544:	df000515 	stw	fp,20(sp)
   1e548:	df000504 	addi	fp,sp,20
   1e54c:	e13ffd15 	stw	r4,-12(fp)
   1e550:	e17ffe15 	stw	r5,-8(fp)
   1e554:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1e558:	e0bffd17 	ldw	r2,-12(fp)
   1e55c:	10000816 	blt	r2,zero,1e580 <read+0x44>
   1e560:	01400304 	movi	r5,12
   1e564:	e13ffd17 	ldw	r4,-12(fp)
   1e568:	000cca00 	call	cca0 <__mulsi3>
   1e56c:	1007883a 	mov	r3,r2
   1e570:	008000f4 	movhi	r2,3
   1e574:	10a86204 	addi	r2,r2,-24184
   1e578:	1885883a 	add	r2,r3,r2
   1e57c:	00000106 	br	1e584 <read+0x48>
   1e580:	0005883a 	mov	r2,zero
   1e584:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1e588:	e0bffb17 	ldw	r2,-20(fp)
   1e58c:	10002226 	beq	r2,zero,1e618 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1e590:	e0bffb17 	ldw	r2,-20(fp)
   1e594:	10800217 	ldw	r2,8(r2)
   1e598:	108000cc 	andi	r2,r2,3
   1e59c:	10800060 	cmpeqi	r2,r2,1
   1e5a0:	1000181e 	bne	r2,zero,1e604 <read+0xc8>
        (fd->dev->read))
   1e5a4:	e0bffb17 	ldw	r2,-20(fp)
   1e5a8:	10800017 	ldw	r2,0(r2)
   1e5ac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1e5b0:	10001426 	beq	r2,zero,1e604 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1e5b4:	e0bffb17 	ldw	r2,-20(fp)
   1e5b8:	10800017 	ldw	r2,0(r2)
   1e5bc:	10800517 	ldw	r2,20(r2)
   1e5c0:	e0ffff17 	ldw	r3,-4(fp)
   1e5c4:	180d883a 	mov	r6,r3
   1e5c8:	e17ffe17 	ldw	r5,-8(fp)
   1e5cc:	e13ffb17 	ldw	r4,-20(fp)
   1e5d0:	103ee83a 	callr	r2
   1e5d4:	e0bffc15 	stw	r2,-16(fp)
   1e5d8:	e0bffc17 	ldw	r2,-16(fp)
   1e5dc:	1000070e 	bge	r2,zero,1e5fc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1e5e0:	001e5000 	call	1e500 <alt_get_errno>
   1e5e4:	1007883a 	mov	r3,r2
   1e5e8:	e0bffc17 	ldw	r2,-16(fp)
   1e5ec:	0085c83a 	sub	r2,zero,r2
   1e5f0:	18800015 	stw	r2,0(r3)
          return -1;
   1e5f4:	00bfffc4 	movi	r2,-1
   1e5f8:	00000c06 	br	1e62c <read+0xf0>
        }
        return rval;
   1e5fc:	e0bffc17 	ldw	r2,-16(fp)
   1e600:	00000a06 	br	1e62c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1e604:	001e5000 	call	1e500 <alt_get_errno>
   1e608:	1007883a 	mov	r3,r2
   1e60c:	00800344 	movi	r2,13
   1e610:	18800015 	stw	r2,0(r3)
   1e614:	00000406 	br	1e628 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1e618:	001e5000 	call	1e500 <alt_get_errno>
   1e61c:	1007883a 	mov	r3,r2
   1e620:	00801444 	movi	r2,81
   1e624:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1e628:	00bfffc4 	movi	r2,-1
}
   1e62c:	e037883a 	mov	sp,fp
   1e630:	dfc00117 	ldw	ra,4(sp)
   1e634:	df000017 	ldw	fp,0(sp)
   1e638:	dec00204 	addi	sp,sp,8
   1e63c:	f800283a 	ret

0001e640 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1e640:	defffc04 	addi	sp,sp,-16
   1e644:	dfc00315 	stw	ra,12(sp)
   1e648:	df000215 	stw	fp,8(sp)
   1e64c:	dc000115 	stw	r16,4(sp)
   1e650:	df000204 	addi	fp,sp,8
   1e654:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1e658:	e0bffe17 	ldw	r2,-8(fp)
   1e65c:	108000d0 	cmplti	r2,r2,3
   1e660:	1000111e 	bne	r2,zero,1e6a8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1e664:	040000f4 	movhi	r16,3
   1e668:	84286204 	addi	r16,r16,-24184
   1e66c:	e0bffe17 	ldw	r2,-8(fp)
   1e670:	01400304 	movi	r5,12
   1e674:	1009883a 	mov	r4,r2
   1e678:	000cca00 	call	cca0 <__mulsi3>
   1e67c:	8085883a 	add	r2,r16,r2
   1e680:	10800204 	addi	r2,r2,8
   1e684:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1e688:	040000f4 	movhi	r16,3
   1e68c:	84286204 	addi	r16,r16,-24184
   1e690:	e0bffe17 	ldw	r2,-8(fp)
   1e694:	01400304 	movi	r5,12
   1e698:	1009883a 	mov	r4,r2
   1e69c:	000cca00 	call	cca0 <__mulsi3>
   1e6a0:	8085883a 	add	r2,r16,r2
   1e6a4:	10000015 	stw	zero,0(r2)
  }
}
   1e6a8:	0001883a 	nop
   1e6ac:	e6ffff04 	addi	sp,fp,-4
   1e6b0:	dfc00217 	ldw	ra,8(sp)
   1e6b4:	df000117 	ldw	fp,4(sp)
   1e6b8:	dc000017 	ldw	r16,0(sp)
   1e6bc:	dec00304 	addi	sp,sp,12
   1e6c0:	f800283a 	ret

0001e6c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1e6c4:	defff904 	addi	sp,sp,-28
   1e6c8:	df000615 	stw	fp,24(sp)
   1e6cc:	df000604 	addi	fp,sp,24
   1e6d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e6d4:	0005303a 	rdctl	r2,status
   1e6d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e6dc:	e0fffe17 	ldw	r3,-8(fp)
   1e6e0:	00bfff84 	movi	r2,-2
   1e6e4:	1884703a 	and	r2,r3,r2
   1e6e8:	1001703a 	wrctl	status,r2
  
  return context;
   1e6ec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1e6f0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1e6f4:	d0a5b817 	ldw	r2,-26912(gp)
   1e6f8:	10c000c4 	addi	r3,r2,3
   1e6fc:	00bfff04 	movi	r2,-4
   1e700:	1884703a 	and	r2,r3,r2
   1e704:	d0a5b815 	stw	r2,-26912(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1e708:	d0e5b817 	ldw	r3,-26912(gp)
   1e70c:	e0bfff17 	ldw	r2,-4(fp)
   1e710:	1887883a 	add	r3,r3,r2
   1e714:	00810034 	movhi	r2,1024
   1e718:	10800004 	addi	r2,r2,0
   1e71c:	10c0062e 	bgeu	r2,r3,1e738 <sbrk+0x74>
   1e720:	e0bffb17 	ldw	r2,-20(fp)
   1e724:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e728:	e0bffa17 	ldw	r2,-24(fp)
   1e72c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1e730:	00bfffc4 	movi	r2,-1
   1e734:	00000b06 	br	1e764 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1e738:	d0a5b817 	ldw	r2,-26912(gp)
   1e73c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1e740:	d0e5b817 	ldw	r3,-26912(gp)
   1e744:	e0bfff17 	ldw	r2,-4(fp)
   1e748:	1885883a 	add	r2,r3,r2
   1e74c:	d0a5b815 	stw	r2,-26912(gp)
   1e750:	e0bffb17 	ldw	r2,-20(fp)
   1e754:	e0bffc15 	stw	r2,-16(fp)
   1e758:	e0bffc17 	ldw	r2,-16(fp)
   1e75c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1e760:	e0bffd17 	ldw	r2,-12(fp)
} 
   1e764:	e037883a 	mov	sp,fp
   1e768:	df000017 	ldw	fp,0(sp)
   1e76c:	dec00104 	addi	sp,sp,4
   1e770:	f800283a 	ret

0001e774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e774:	defffe04 	addi	sp,sp,-8
   1e778:	dfc00115 	stw	ra,4(sp)
   1e77c:	df000015 	stw	fp,0(sp)
   1e780:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e784:	d0a5b717 	ldw	r2,-26916(gp)
   1e788:	10000326 	beq	r2,zero,1e798 <alt_get_errno+0x24>
   1e78c:	d0a5b717 	ldw	r2,-26916(gp)
   1e790:	103ee83a 	callr	r2
   1e794:	00000106 	br	1e79c <alt_get_errno+0x28>
   1e798:	d0b23f04 	addi	r2,gp,-14084
}
   1e79c:	e037883a 	mov	sp,fp
   1e7a0:	dfc00117 	ldw	ra,4(sp)
   1e7a4:	df000017 	ldw	fp,0(sp)
   1e7a8:	dec00204 	addi	sp,sp,8
   1e7ac:	f800283a 	ret

0001e7b0 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1e7b0:	defffc04 	addi	sp,sp,-16
   1e7b4:	dfc00315 	stw	ra,12(sp)
   1e7b8:	df000215 	stw	fp,8(sp)
   1e7bc:	df000204 	addi	fp,sp,8
   1e7c0:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1e7c4:	d0b24817 	ldw	r2,-14048(gp)
  clock_t ticks = alt_nticks(); 
   1e7c8:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1e7cc:	d0b24717 	ldw	r2,-14052(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1e7d0:	1000061e 	bne	r2,zero,1e7ec <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   1e7d4:	001e7740 	call	1e774 <alt_get_errno>
   1e7d8:	1007883a 	mov	r3,r2
   1e7dc:	00801604 	movi	r2,88
   1e7e0:	18800015 	stw	r2,0(r3)
    return 0;
   1e7e4:	0005883a 	mov	r2,zero
   1e7e8:	00000a06 	br	1e814 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   1e7ec:	e0bfff17 	ldw	r2,-4(fp)
   1e7f0:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   1e7f4:	e0bfff17 	ldw	r2,-4(fp)
   1e7f8:	e0fffe17 	ldw	r3,-8(fp)
   1e7fc:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   1e800:	e0bfff17 	ldw	r2,-4(fp)
   1e804:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1e808:	e0bfff17 	ldw	r2,-4(fp)
   1e80c:	10000315 	stw	zero,12(r2)

  return ticks;
   1e810:	e0bffe17 	ldw	r2,-8(fp)
}
   1e814:	e037883a 	mov	sp,fp
   1e818:	dfc00117 	ldw	ra,4(sp)
   1e81c:	df000017 	ldw	fp,0(sp)
   1e820:	dec00204 	addi	sp,sp,8
   1e824:	f800283a 	ret

0001e828 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1e828:	defffd04 	addi	sp,sp,-12
   1e82c:	dfc00215 	stw	ra,8(sp)
   1e830:	df000115 	stw	fp,4(sp)
   1e834:	df000104 	addi	fp,sp,4
   1e838:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1e83c:	e13fff17 	ldw	r4,-4(fp)
   1e840:	00215100 	call	21510 <alt_busy_sleep>
}
   1e844:	e037883a 	mov	sp,fp
   1e848:	dfc00117 	ldw	ra,4(sp)
   1e84c:	df000017 	ldw	fp,0(sp)
   1e850:	dec00204 	addi	sp,sp,8
   1e854:	f800283a 	ret

0001e858 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e858:	defffe04 	addi	sp,sp,-8
   1e85c:	dfc00115 	stw	ra,4(sp)
   1e860:	df000015 	stw	fp,0(sp)
   1e864:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e868:	d0a5b717 	ldw	r2,-26916(gp)
   1e86c:	10000326 	beq	r2,zero,1e87c <alt_get_errno+0x24>
   1e870:	d0a5b717 	ldw	r2,-26916(gp)
   1e874:	103ee83a 	callr	r2
   1e878:	00000106 	br	1e880 <alt_get_errno+0x28>
   1e87c:	d0b23f04 	addi	r2,gp,-14084
}
   1e880:	e037883a 	mov	sp,fp
   1e884:	dfc00117 	ldw	ra,4(sp)
   1e888:	df000017 	ldw	fp,0(sp)
   1e88c:	dec00204 	addi	sp,sp,8
   1e890:	f800283a 	ret

0001e894 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1e894:	defff904 	addi	sp,sp,-28
   1e898:	dfc00615 	stw	ra,24(sp)
   1e89c:	df000515 	stw	fp,20(sp)
   1e8a0:	df000504 	addi	fp,sp,20
   1e8a4:	e13ffd15 	stw	r4,-12(fp)
   1e8a8:	e17ffe15 	stw	r5,-8(fp)
   1e8ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1e8b0:	e0bffd17 	ldw	r2,-12(fp)
   1e8b4:	10000816 	blt	r2,zero,1e8d8 <write+0x44>
   1e8b8:	01400304 	movi	r5,12
   1e8bc:	e13ffd17 	ldw	r4,-12(fp)
   1e8c0:	000cca00 	call	cca0 <__mulsi3>
   1e8c4:	1007883a 	mov	r3,r2
   1e8c8:	008000f4 	movhi	r2,3
   1e8cc:	10a86204 	addi	r2,r2,-24184
   1e8d0:	1885883a 	add	r2,r3,r2
   1e8d4:	00000106 	br	1e8dc <write+0x48>
   1e8d8:	0005883a 	mov	r2,zero
   1e8dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1e8e0:	e0bffb17 	ldw	r2,-20(fp)
   1e8e4:	10002126 	beq	r2,zero,1e96c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1e8e8:	e0bffb17 	ldw	r2,-20(fp)
   1e8ec:	10800217 	ldw	r2,8(r2)
   1e8f0:	108000cc 	andi	r2,r2,3
   1e8f4:	10001826 	beq	r2,zero,1e958 <write+0xc4>
   1e8f8:	e0bffb17 	ldw	r2,-20(fp)
   1e8fc:	10800017 	ldw	r2,0(r2)
   1e900:	10800617 	ldw	r2,24(r2)
   1e904:	10001426 	beq	r2,zero,1e958 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1e908:	e0bffb17 	ldw	r2,-20(fp)
   1e90c:	10800017 	ldw	r2,0(r2)
   1e910:	10800617 	ldw	r2,24(r2)
   1e914:	e0ffff17 	ldw	r3,-4(fp)
   1e918:	180d883a 	mov	r6,r3
   1e91c:	e17ffe17 	ldw	r5,-8(fp)
   1e920:	e13ffb17 	ldw	r4,-20(fp)
   1e924:	103ee83a 	callr	r2
   1e928:	e0bffc15 	stw	r2,-16(fp)
   1e92c:	e0bffc17 	ldw	r2,-16(fp)
   1e930:	1000070e 	bge	r2,zero,1e950 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1e934:	001e8580 	call	1e858 <alt_get_errno>
   1e938:	1007883a 	mov	r3,r2
   1e93c:	e0bffc17 	ldw	r2,-16(fp)
   1e940:	0085c83a 	sub	r2,zero,r2
   1e944:	18800015 	stw	r2,0(r3)
        return -1;
   1e948:	00bfffc4 	movi	r2,-1
   1e94c:	00000c06 	br	1e980 <write+0xec>
      }
      return rval;
   1e950:	e0bffc17 	ldw	r2,-16(fp)
   1e954:	00000a06 	br	1e980 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1e958:	001e8580 	call	1e858 <alt_get_errno>
   1e95c:	1007883a 	mov	r3,r2
   1e960:	00800344 	movi	r2,13
   1e964:	18800015 	stw	r2,0(r3)
   1e968:	00000406 	br	1e97c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1e96c:	001e8580 	call	1e858 <alt_get_errno>
   1e970:	1007883a 	mov	r3,r2
   1e974:	00801444 	movi	r2,81
   1e978:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1e97c:	00bfffc4 	movi	r2,-1
}
   1e980:	e037883a 	mov	sp,fp
   1e984:	dfc00117 	ldw	ra,4(sp)
   1e988:	df000017 	ldw	fp,0(sp)
   1e98c:	dec00204 	addi	sp,sp,8
   1e990:	f800283a 	ret

0001e994 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1e994:	defffd04 	addi	sp,sp,-12
   1e998:	dfc00215 	stw	ra,8(sp)
   1e99c:	df000115 	stw	fp,4(sp)
   1e9a0:	df000104 	addi	fp,sp,4
   1e9a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1e9a8:	d165b404 	addi	r5,gp,-26928
   1e9ac:	e13fff17 	ldw	r4,-4(fp)
   1e9b0:	00216c40 	call	216c4 <alt_dev_llist_insert>
}
   1e9b4:	e037883a 	mov	sp,fp
   1e9b8:	dfc00117 	ldw	ra,4(sp)
   1e9bc:	df000017 	ldw	fp,0(sp)
   1e9c0:	dec00204 	addi	sp,sp,8
   1e9c4:	f800283a 	ret

0001e9c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1e9c8:	defffd04 	addi	sp,sp,-12
   1e9cc:	dfc00215 	stw	ra,8(sp)
   1e9d0:	df000115 	stw	fp,4(sp)
   1e9d4:	df000104 	addi	fp,sp,4
   1e9d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   1e9dc:	00223680 	call	22368 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1e9e0:	00800044 	movi	r2,1
   1e9e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1e9e8:	0001883a 	nop
   1e9ec:	e037883a 	mov	sp,fp
   1e9f0:	dfc00117 	ldw	ra,4(sp)
   1e9f4:	df000017 	ldw	fp,0(sp)
   1e9f8:	dec00204 	addi	sp,sp,8
   1e9fc:	f800283a 	ret

0001ea00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1ea00:	defffe04 	addi	sp,sp,-8
   1ea04:	dfc00115 	stw	ra,4(sp)
   1ea08:	df000015 	stw	fp,0(sp)
   1ea0c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1ea10:	01c0fa04 	movi	r7,1000
   1ea14:	01800084 	movi	r6,2
   1ea18:	000b883a 	mov	r5,zero
   1ea1c:	01010034 	movhi	r4,1024
   1ea20:	21042004 	addi	r4,r4,4224
   1ea24:	00213680 	call	21368 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   1ea28:	010000f4 	movhi	r4,3
   1ea2c:	2128c204 	addi	r4,r4,-23800
   1ea30:	001ecc40 	call	1ecc4 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1ea34:	01800044 	movi	r6,1
   1ea38:	000b883a 	mov	r5,zero
   1ea3c:	010000f4 	movhi	r4,3
   1ea40:	2128da04 	addi	r4,r4,-23704
   1ea44:	00207f00 	call	207f0 <altera_avalon_jtag_uart_init>
   1ea48:	010000f4 	movhi	r4,3
   1ea4c:	2128d004 	addi	r4,r4,-23744
   1ea50:	001e9940 	call	1e994 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   1ea54:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1ea58:	0001883a 	nop
}
   1ea5c:	0001883a 	nop
   1ea60:	e037883a 	mov	sp,fp
   1ea64:	dfc00117 	ldw	ra,4(sp)
   1ea68:	df000017 	ldw	fp,0(sp)
   1ea6c:	dec00204 	addi	sp,sp,8
   1ea70:	f800283a 	ret

0001ea74 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   1ea74:	defff904 	addi	sp,sp,-28
   1ea78:	dfc00615 	stw	ra,24(sp)
   1ea7c:	df000515 	stw	fp,20(sp)
   1ea80:	df000504 	addi	fp,sp,20
   1ea84:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   1ea88:	008000b4 	movhi	r2,2
   1ea8c:	10a1a804 	addi	r2,r2,-31072
   1ea90:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   1ea94:	e0bfff17 	ldw	r2,-4(fp)
   1ea98:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   1ea9c:	e0bffc17 	ldw	r2,-16(fp)
   1eaa0:	10800717 	ldw	r2,28(r2)
   1eaa4:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   1eaa8:	e0bffd17 	ldw	r2,-12(fp)
   1eaac:	10800217 	ldw	r2,8(r2)
   1eab0:	10800098 	cmpnei	r2,r2,2
   1eab4:	1000251e 	bne	r2,zero,1eb4c <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   1eab8:	e0bffd17 	ldw	r2,-12(fp)
   1eabc:	10c00017 	ldw	r3,0(r2)
   1eac0:	e0bffd17 	ldw	r2,-12(fp)
   1eac4:	10800117 	ldw	r2,4(r2)
   1eac8:	e13ffe04 	addi	r4,fp,-8
   1eacc:	200f883a 	mov	r7,r4
   1ead0:	100d883a 	mov	r6,r2
   1ead4:	180b883a 	mov	r5,r3
   1ead8:	e13ffc17 	ldw	r4,-16(fp)
   1eadc:	001f2240 	call	1f224 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   1eae0:	e0bffd17 	ldw	r2,-12(fp)
   1eae4:	10c00117 	ldw	r3,4(r2)
   1eae8:	e0bffe17 	ldw	r2,-8(fp)
   1eaec:	1887c83a 	sub	r3,r3,r2
   1eaf0:	e0bffd17 	ldw	r2,-12(fp)
   1eaf4:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   1eaf8:	e0bffd17 	ldw	r2,-12(fp)
   1eafc:	10c00017 	ldw	r3,0(r2)
   1eb00:	e0bffe17 	ldw	r2,-8(fp)
   1eb04:	1887883a 	add	r3,r3,r2
   1eb08:	e0bffd17 	ldw	r2,-12(fp)
   1eb0c:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   1eb10:	e0bffd17 	ldw	r2,-12(fp)
   1eb14:	10800117 	ldw	r2,4(r2)
   1eb18:	10000c26 	beq	r2,zero,1eb4c <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1eb1c:	01400704 	movi	r5,28
   1eb20:	e13ffc17 	ldw	r4,-16(fp)
   1eb24:	00203dc0 	call	203dc <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   1eb28:	01400084 	movi	r5,2
   1eb2c:	e13ffc17 	ldw	r4,-16(fp)
   1eb30:	00204800 	call	20480 <alt_avalon_i2c_int_enable>
   1eb34:	00000e06 	br	1eb70 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   1eb38:	e0bffb17 	ldw	r2,-20(fp)
   1eb3c:	10bfffc4 	addi	r2,r2,-1
   1eb40:	e0bffb15 	stw	r2,-20(fp)
   1eb44:	e0bffb17 	ldw	r2,-20(fp)
   1eb48:	10000426 	beq	r2,zero,1eb5c <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   1eb4c:	e13ffc17 	ldw	r4,-16(fp)
   1eb50:	001f1e00 	call	1f1e0 <alt_avalon_i2c_is_busy>
   1eb54:	103ff81e 	bne	r2,zero,1eb38 <__alt_data_end+0xfc01eb38>
   1eb58:	00000106 	br	1eb60 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   1eb5c:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   1eb60:	e13ffc17 	ldw	r4,-16(fp)
   1eb64:	001ee880 	call	1ee88 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   1eb68:	e0bffd17 	ldw	r2,-12(fp)
   1eb6c:	10000215 	stw	zero,8(r2)
}
   1eb70:	e037883a 	mov	sp,fp
   1eb74:	dfc00117 	ldw	ra,4(sp)
   1eb78:	df000017 	ldw	fp,0(sp)
   1eb7c:	dec00204 	addi	sp,sp,8
   1eb80:	f800283a 	ret

0001eb84 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   1eb84:	defffc04 	addi	sp,sp,-16
   1eb88:	dfc00315 	stw	ra,12(sp)
   1eb8c:	df000215 	stw	fp,8(sp)
   1eb90:	df000204 	addi	fp,sp,8
   1eb94:	e13ffe15 	stw	r4,-8(fp)
   1eb98:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   1eb9c:	e0bfff17 	ldw	r2,-4(fp)
   1eba0:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   1eba4:	e1ffff17 	ldw	r7,-4(fp)
   1eba8:	000d883a 	mov	r6,zero
   1ebac:	014000b4 	movhi	r5,2
   1ebb0:	297a9d04 	addi	r5,r5,-5516
   1ebb4:	e13ffe17 	ldw	r4,-8(fp)
   1ebb8:	001ec700 	call	1ec70 <alt_avalon_i2c_register_callback>
}
   1ebbc:	0001883a 	nop
   1ebc0:	e037883a 	mov	sp,fp
   1ebc4:	dfc00117 	ldw	ra,4(sp)
   1ebc8:	df000017 	ldw	fp,0(sp)
   1ebcc:	dec00204 	addi	sp,sp,8
   1ebd0:	f800283a 	ret

0001ebd4 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   1ebd4:	defff904 	addi	sp,sp,-28
   1ebd8:	dfc00615 	stw	ra,24(sp)
   1ebdc:	df000515 	stw	fp,20(sp)
   1ebe0:	df000504 	addi	fp,sp,20
   1ebe4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   1ebe8:	e0bfff17 	ldw	r2,-4(fp)
   1ebec:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1ebf0:	014007c4 	movi	r5,31
   1ebf4:	e13ffb17 	ldw	r4,-20(fp)
   1ebf8:	00204180 	call	20418 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1ebfc:	01400704 	movi	r5,28
   1ec00:	e13ffb17 	ldw	r4,-20(fp)
   1ec04:	00203dc0 	call	203dc <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   1ec08:	e0bffb17 	ldw	r2,-20(fp)
   1ec0c:	10800617 	ldw	r2,24(r2)
   1ec10:	10001126 	beq	r2,zero,1ec58 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ec14:	0005303a 	rdctl	r2,status
   1ec18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ec1c:	e0fffd17 	ldw	r3,-12(fp)
   1ec20:	00bfff84 	movi	r2,-2
   1ec24:	1884703a 	and	r2,r3,r2
   1ec28:	1001703a 	wrctl	status,r2
  
  return context;
   1ec2c:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   1ec30:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   1ec34:	e0bffb17 	ldw	r2,-20(fp)
   1ec38:	10800617 	ldw	r2,24(r2)
   1ec3c:	e13ffb17 	ldw	r4,-20(fp)
   1ec40:	103ee83a 	callr	r2
   1ec44:	e0bffc17 	ldw	r2,-16(fp)
   1ec48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ec4c:	e0bffe17 	ldw	r2,-8(fp)
   1ec50:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   1ec54:	0001883a 	nop
   1ec58:	0001883a 	nop
}
   1ec5c:	e037883a 	mov	sp,fp
   1ec60:	dfc00117 	ldw	ra,4(sp)
   1ec64:	df000017 	ldw	fp,0(sp)
   1ec68:	dec00204 	addi	sp,sp,8
   1ec6c:	f800283a 	ret

0001ec70 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   1ec70:	defffb04 	addi	sp,sp,-20
   1ec74:	df000415 	stw	fp,16(sp)
   1ec78:	df000404 	addi	fp,sp,16
   1ec7c:	e13ffc15 	stw	r4,-16(fp)
   1ec80:	e17ffd15 	stw	r5,-12(fp)
   1ec84:	e1bffe15 	stw	r6,-8(fp)
   1ec88:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   1ec8c:	e0bffc17 	ldw	r2,-16(fp)
   1ec90:	e0fffd17 	ldw	r3,-12(fp)
   1ec94:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   1ec98:	e0bffc17 	ldw	r2,-16(fp)
   1ec9c:	e0ffff17 	ldw	r3,-4(fp)
   1eca0:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   1eca4:	e0bffc17 	ldw	r2,-16(fp)
   1eca8:	e0fffe17 	ldw	r3,-8(fp)
   1ecac:	10c00815 	stw	r3,32(r2)

    return ;
   1ecb0:	0001883a 	nop
}
   1ecb4:	e037883a 	mov	sp,fp
   1ecb8:	df000017 	ldw	fp,0(sp)
   1ecbc:	dec00104 	addi	sp,sp,4
   1ecc0:	f800283a 	ret

0001ecc4 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   1ecc4:	defff704 	addi	sp,sp,-36
   1ecc8:	dfc00815 	stw	ra,32(sp)
   1eccc:	df000715 	stw	fp,28(sp)
   1ecd0:	df000704 	addi	fp,sp,28
   1ecd4:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   1ecd8:	e13fff17 	ldw	r4,-4(fp)
   1ecdc:	001ee880 	call	1ee88 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1ece0:	014007c4 	movi	r5,31
   1ece4:	e13fff17 	ldw	r4,-4(fp)
   1ece8:	00204180 	call	20418 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1ecec:	01400704 	movi	r5,28
   1ecf0:	e13fff17 	ldw	r4,-4(fp)
   1ecf4:	00203dc0 	call	203dc <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   1ecf8:	014000c4 	movi	r5,3
   1ecfc:	e13fff17 	ldw	r4,-4(fp)
   1ed00:	00206240 	call	20624 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   1ed04:	014000c4 	movi	r5,3
   1ed08:	e13fff17 	ldw	r4,-4(fp)
   1ed0c:	00205740 	call	20574 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   1ed10:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   1ed14:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   1ed18:	e0bffb04 	addi	r2,fp,-20
   1ed1c:	018000b4 	movhi	r6,2
   1ed20:	31a1a804 	addi	r6,r6,-31072
   1ed24:	100b883a 	mov	r5,r2
   1ed28:	e13fff17 	ldw	r4,-4(fp)
   1ed2c:	001f0e40 	call	1f0e4 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   1ed30:	e0bffb04 	addi	r2,fp,-20
   1ed34:	100b883a 	mov	r5,r2
   1ed38:	e13fff17 	ldw	r4,-4(fp)
   1ed3c:	001ef840 	call	1ef84 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   1ed40:	d165b904 	addi	r5,gp,-26908
   1ed44:	e13fff17 	ldw	r4,-4(fp)
   1ed48:	00216c40 	call	216c4 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1ed4c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   1ed50:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   1ed54:	e0bffa17 	ldw	r2,-24(fp)
   1ed58:	10000c1e 	bne	r2,zero,1ed8c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   1ed5c:	e0bfff17 	ldw	r2,-4(fp)
   1ed60:	10c00417 	ldw	r3,16(r2)
   1ed64:	e0bfff17 	ldw	r2,-4(fp)
   1ed68:	10800517 	ldw	r2,20(r2)
   1ed6c:	d8000015 	stw	zero,0(sp)
   1ed70:	e1ffff17 	ldw	r7,-4(fp)
   1ed74:	018000b4 	movhi	r6,2
   1ed78:	31baf504 	addi	r6,r6,-5164
   1ed7c:	100b883a 	mov	r5,r2
   1ed80:	1809883a 	mov	r4,r3
   1ed84:	00218d80 	call	218d8 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   1ed88:	00000406 	br	1ed9c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   1ed8c:	010000f4 	movhi	r4,3
   1ed90:	21262704 	addi	r4,r4,-26468
   1ed94:	0021f5c0 	call	21f5c <alt_printf>
    }

    return;
   1ed98:	0001883a 	nop

}
   1ed9c:	e037883a 	mov	sp,fp
   1eda0:	dfc00117 	ldw	ra,4(sp)
   1eda4:	df000017 	ldw	fp,0(sp)
   1eda8:	dec00204 	addi	sp,sp,8
   1edac:	f800283a 	ret

0001edb0 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   1edb0:	defffc04 	addi	sp,sp,-16
   1edb4:	dfc00315 	stw	ra,12(sp)
   1edb8:	df000215 	stw	fp,8(sp)
   1edbc:	df000204 	addi	fp,sp,8
   1edc0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   1edc4:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   1edc8:	d165b904 	addi	r5,gp,-26908
   1edcc:	e13fff17 	ldw	r4,-4(fp)
   1edd0:	00218280 	call	21828 <alt_find_dev>
   1edd4:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   1edd8:	e0bffe17 	ldw	r2,-8(fp)
}
   1eddc:	e037883a 	mov	sp,fp
   1ede0:	dfc00117 	ldw	ra,4(sp)
   1ede4:	df000017 	ldw	fp,0(sp)
   1ede8:	dec00204 	addi	sp,sp,8
   1edec:	f800283a 	ret

0001edf0 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1edf0:	defffc04 	addi	sp,sp,-16
   1edf4:	df000315 	stw	fp,12(sp)
   1edf8:	df000304 	addi	fp,sp,12
   1edfc:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1ee00:	e0bfff17 	ldw	r2,-4(fp)
   1ee04:	10800717 	ldw	r2,28(r2)
   1ee08:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   1ee0c:	e0bfff17 	ldw	r2,-4(fp)
   1ee10:	10800317 	ldw	r2,12(r2)
   1ee14:	10800204 	addi	r2,r2,8
   1ee18:	10800037 	ldwio	r2,0(r2)
   1ee1c:	1080004c 	andi	r2,r2,1
   1ee20:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   1ee24:	e0bffe17 	ldw	r2,-8(fp)
   1ee28:	10000226 	beq	r2,zero,1ee34 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   1ee2c:	00bffe44 	movi	r2,-7
   1ee30:	00001106 	br	1ee78 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   1ee34:	e0bfff17 	ldw	r2,-4(fp)
   1ee38:	10c00617 	ldw	r3,24(r2)
   1ee3c:	008000b4 	movhi	r2,2
   1ee40:	10ba9d04 	addi	r2,r2,-5516
   1ee44:	1880021e 	bne	r3,r2,1ee50 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   1ee48:	e0bffd17 	ldw	r2,-12(fp)
   1ee4c:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   1ee50:	e0bfff17 	ldw	r2,-4(fp)
   1ee54:	10800317 	ldw	r2,12(r2)
   1ee58:	10800204 	addi	r2,r2,8
   1ee5c:	e0ffff17 	ldw	r3,-4(fp)
   1ee60:	18c00317 	ldw	r3,12(r3)
   1ee64:	18c00204 	addi	r3,r3,8
   1ee68:	18c00037 	ldwio	r3,0(r3)
   1ee6c:	18c00054 	ori	r3,r3,1
   1ee70:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   1ee74:	0005883a 	mov	r2,zero
}
   1ee78:	e037883a 	mov	sp,fp
   1ee7c:	df000017 	ldw	fp,0(sp)
   1ee80:	dec00104 	addi	sp,sp,4
   1ee84:	f800283a 	ret

0001ee88 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1ee88:	defffe04 	addi	sp,sp,-8
   1ee8c:	df000115 	stw	fp,4(sp)
   1ee90:	df000104 	addi	fp,sp,4
   1ee94:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   1ee98:	e0bfff17 	ldw	r2,-4(fp)
   1ee9c:	10800317 	ldw	r2,12(r2)
   1eea0:	10800204 	addi	r2,r2,8
   1eea4:	e0ffff17 	ldw	r3,-4(fp)
   1eea8:	18c00317 	ldw	r3,12(r3)
   1eeac:	18c00204 	addi	r3,r3,8
   1eeb0:	19000037 	ldwio	r4,0(r3)
   1eeb4:	00ffff84 	movi	r3,-2
   1eeb8:	20c6703a 	and	r3,r4,r3
   1eebc:	10c00035 	stwio	r3,0(r2)

}
   1eec0:	0001883a 	nop
   1eec4:	e037883a 	mov	sp,fp
   1eec8:	df000017 	ldw	fp,0(sp)
   1eecc:	dec00104 	addi	sp,sp,4
   1eed0:	f800283a 	ret

0001eed4 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1eed4:	defffd04 	addi	sp,sp,-12
   1eed8:	df000215 	stw	fp,8(sp)
   1eedc:	df000204 	addi	fp,sp,8
   1eee0:	e13ffe15 	stw	r4,-8(fp)
   1eee4:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   1eee8:	e0bffe17 	ldw	r2,-8(fp)
   1eeec:	10c00d17 	ldw	r3,52(r2)
   1eef0:	e0bfff17 	ldw	r2,-4(fp)
   1eef4:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   1eef8:	e0bffe17 	ldw	r2,-8(fp)
   1eefc:	10800317 	ldw	r2,12(r2)
   1ef00:	10800204 	addi	r2,r2,8
   1ef04:	10800037 	ldwio	r2,0(r2)
   1ef08:	1080008c 	andi	r2,r2,2
   1ef0c:	1005d07a 	srai	r2,r2,1
   1ef10:	1007883a 	mov	r3,r2
   1ef14:	e0bfff17 	ldw	r2,-4(fp)
   1ef18:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   1ef1c:	e0bffe17 	ldw	r2,-8(fp)
   1ef20:	10800317 	ldw	r2,12(r2)
   1ef24:	10800904 	addi	r2,r2,36
   1ef28:	10800037 	ldwio	r2,0(r2)
   1ef2c:	1007883a 	mov	r3,r2
   1ef30:	e0bfff17 	ldw	r2,-4(fp)
   1ef34:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   1ef38:	e0bffe17 	ldw	r2,-8(fp)
   1ef3c:	10800317 	ldw	r2,12(r2)
   1ef40:	10800804 	addi	r2,r2,32
   1ef44:	10800037 	ldwio	r2,0(r2)
   1ef48:	1007883a 	mov	r3,r2
   1ef4c:	e0bfff17 	ldw	r2,-4(fp)
   1ef50:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   1ef54:	e0bffe17 	ldw	r2,-8(fp)
   1ef58:	10800317 	ldw	r2,12(r2)
   1ef5c:	10800a04 	addi	r2,r2,40
   1ef60:	10800037 	ldwio	r2,0(r2)
   1ef64:	1007883a 	mov	r3,r2
   1ef68:	e0bfff17 	ldw	r2,-4(fp)
   1ef6c:	10c0030d 	sth	r3,12(r2)
}
   1ef70:	0001883a 	nop
   1ef74:	e037883a 	mov	sp,fp
   1ef78:	df000017 	ldw	fp,0(sp)
   1ef7c:	dec00104 	addi	sp,sp,4
   1ef80:	f800283a 	ret

0001ef84 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1ef84:	defffd04 	addi	sp,sp,-12
   1ef88:	df000215 	stw	fp,8(sp)
   1ef8c:	df000204 	addi	fp,sp,8
   1ef90:	e13ffe15 	stw	r4,-8(fp)
   1ef94:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   1ef98:	e0bfff17 	ldw	r2,-4(fp)
   1ef9c:	10c00017 	ldw	r3,0(r2)
   1efa0:	e0bffe17 	ldw	r2,-8(fp)
   1efa4:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   1efa8:	e0bffe17 	ldw	r2,-8(fp)
   1efac:	10800317 	ldw	r2,12(r2)
   1efb0:	10c00204 	addi	r3,r2,8
   1efb4:	e0bffe17 	ldw	r2,-8(fp)
   1efb8:	10800317 	ldw	r2,12(r2)
   1efbc:	10800204 	addi	r2,r2,8
   1efc0:	10800037 	ldwio	r2,0(r2)
   1efc4:	1009883a 	mov	r4,r2
   1efc8:	00bfff44 	movi	r2,-3
   1efcc:	2088703a 	and	r4,r4,r2
   1efd0:	e0bfff17 	ldw	r2,-4(fp)
   1efd4:	10800117 	ldw	r2,4(r2)
   1efd8:	1085883a 	add	r2,r2,r2
   1efdc:	1080008c 	andi	r2,r2,2
   1efe0:	2084b03a 	or	r2,r4,r2
   1efe4:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   1efe8:	e0bffe17 	ldw	r2,-8(fp)
   1efec:	10800317 	ldw	r2,12(r2)
   1eff0:	10800904 	addi	r2,r2,36
   1eff4:	e0ffff17 	ldw	r3,-4(fp)
   1eff8:	18c0020b 	ldhu	r3,8(r3)
   1effc:	18ffffcc 	andi	r3,r3,65535
   1f000:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   1f004:	e0bffe17 	ldw	r2,-8(fp)
   1f008:	10800317 	ldw	r2,12(r2)
   1f00c:	10800804 	addi	r2,r2,32
   1f010:	e0ffff17 	ldw	r3,-4(fp)
   1f014:	18c0028b 	ldhu	r3,10(r3)
   1f018:	18ffffcc 	andi	r3,r3,65535
   1f01c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   1f020:	e0bffe17 	ldw	r2,-8(fp)
   1f024:	10800317 	ldw	r2,12(r2)
   1f028:	10800a04 	addi	r2,r2,40
   1f02c:	e0ffff17 	ldw	r3,-4(fp)
   1f030:	18c0030b 	ldhu	r3,12(r3)
   1f034:	18ffffcc 	andi	r3,r3,65535
   1f038:	10c00035 	stwio	r3,0(r2)
}
   1f03c:	0001883a 	nop
   1f040:	e037883a 	mov	sp,fp
   1f044:	df000017 	ldw	fp,0(sp)
   1f048:	dec00104 	addi	sp,sp,4
   1f04c:	f800283a 	ret

0001f050 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   1f050:	defffb04 	addi	sp,sp,-20
   1f054:	dfc00415 	stw	ra,16(sp)
   1f058:	df000315 	stw	fp,12(sp)
   1f05c:	df000304 	addi	fp,sp,12
   1f060:	e13ffd15 	stw	r4,-12(fp)
   1f064:	e17ffe15 	stw	r5,-8(fp)
   1f068:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   1f06c:	e0bffe17 	ldw	r2,-8(fp)
   1f070:	1080028b 	ldhu	r2,10(r2)
   1f074:	10bfffcc 	andi	r2,r2,65535
   1f078:	10000426 	beq	r2,zero,1f08c <alt_avalon_i2c_master_config_speed_get+0x3c>
   1f07c:	e0bffe17 	ldw	r2,-8(fp)
   1f080:	1080020b 	ldhu	r2,8(r2)
   1f084:	10bfffcc 	andi	r2,r2,65535
   1f088:	1000021e 	bne	r2,zero,1f094 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   1f08c:	00bfff44 	movi	r2,-3
   1f090:	00000f06 	br	1f0d0 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   1f094:	e0bffd17 	ldw	r2,-12(fp)
   1f098:	11000c17 	ldw	r4,48(r2)
   1f09c:	e0bffe17 	ldw	r2,-8(fp)
   1f0a0:	1080028b 	ldhu	r2,10(r2)
   1f0a4:	10ffffcc 	andi	r3,r2,65535
   1f0a8:	e0bffe17 	ldw	r2,-8(fp)
   1f0ac:	1080020b 	ldhu	r2,8(r2)
   1f0b0:	10bfffcc 	andi	r2,r2,65535
   1f0b4:	1885883a 	add	r2,r3,r2
   1f0b8:	100b883a 	mov	r5,r2
   1f0bc:	000cbe40 	call	cbe4 <__udivsi3>
   1f0c0:	1007883a 	mov	r3,r2
   1f0c4:	e0bfff17 	ldw	r2,-4(fp)
   1f0c8:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   1f0cc:	0005883a 	mov	r2,zero
}
   1f0d0:	e037883a 	mov	sp,fp
   1f0d4:	dfc00117 	ldw	ra,4(sp)
   1f0d8:	df000017 	ldw	fp,0(sp)
   1f0dc:	dec00204 	addi	sp,sp,8
   1f0e0:	f800283a 	ret

0001f0e4 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   1f0e4:	defff904 	addi	sp,sp,-28
   1f0e8:	dfc00615 	stw	ra,24(sp)
   1f0ec:	df000515 	stw	fp,20(sp)
   1f0f0:	df000504 	addi	fp,sp,20
   1f0f4:	e13ffd15 	stw	r4,-12(fp)
   1f0f8:	e17ffe15 	stw	r5,-8(fp)
   1f0fc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   1f100:	e0ffff17 	ldw	r3,-4(fp)
   1f104:	008001b4 	movhi	r2,6
   1f108:	1086a004 	addi	r2,r2,6784
   1f10c:	10c00436 	bltu	r2,r3,1f120 <alt_avalon_i2c_master_config_speed_set+0x3c>
   1f110:	e0bfff17 	ldw	r2,-4(fp)
   1f114:	10000226 	beq	r2,zero,1f120 <alt_avalon_i2c_master_config_speed_set+0x3c>
   1f118:	e0bfff17 	ldw	r2,-4(fp)
   1f11c:	1000021e 	bne	r2,zero,1f128 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   1f120:	00bfff04 	movi	r2,-4
   1f124:	00002906 	br	1f1cc <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   1f128:	e0bffd17 	ldw	r2,-12(fp)
   1f12c:	10c00c17 	ldw	r3,48(r2)
   1f130:	e0bfff17 	ldw	r2,-4(fp)
   1f134:	1085883a 	add	r2,r2,r2
   1f138:	100b883a 	mov	r5,r2
   1f13c:	1809883a 	mov	r4,r3
   1f140:	000cbe40 	call	cbe4 <__udivsi3>
   1f144:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   1f148:	e0bffb17 	ldw	r2,-20(fp)
   1f14c:	10800f04 	addi	r2,r2,60
   1f150:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   1f154:	e0bffb17 	ldw	r2,-20(fp)
   1f158:	10bff104 	addi	r2,r2,-60
   1f15c:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   1f160:	e0ffff17 	ldw	r3,-4(fp)
   1f164:	008000b4 	movhi	r2,2
   1f168:	10a1a804 	addi	r2,r2,-31072
   1f16c:	10c0042e 	bgeu	r2,r3,1f180 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   1f170:	e0bffe17 	ldw	r2,-8(fp)
   1f174:	00c00044 	movi	r3,1
   1f178:	10c00115 	stw	r3,4(r2)
   1f17c:	00000206 	br	1f188 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   1f180:	e0bffe17 	ldw	r2,-8(fp)
   1f184:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   1f188:	e0bffb17 	ldw	r2,-20(fp)
   1f18c:	1007883a 	mov	r3,r2
   1f190:	e0bffe17 	ldw	r2,-8(fp)
   1f194:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   1f198:	e0bffc17 	ldw	r2,-16(fp)
   1f19c:	1007883a 	mov	r3,r2
   1f1a0:	e0bffe17 	ldw	r2,-8(fp)
   1f1a4:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   1f1a8:	e0bffb17 	ldw	r2,-20(fp)
   1f1ac:	1007883a 	mov	r3,r2
   1f1b0:	e0bffb17 	ldw	r2,-20(fp)
   1f1b4:	1004d07a 	srli	r2,r2,1
   1f1b8:	1885c83a 	sub	r2,r3,r2
   1f1bc:	1007883a 	mov	r3,r2
   1f1c0:	e0bffe17 	ldw	r2,-8(fp)
   1f1c4:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   1f1c8:	0005883a 	mov	r2,zero

}
   1f1cc:	e037883a 	mov	sp,fp
   1f1d0:	dfc00117 	ldw	ra,4(sp)
   1f1d4:	df000017 	ldw	fp,0(sp)
   1f1d8:	dec00204 	addi	sp,sp,8
   1f1dc:	f800283a 	ret

0001f1e0 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1f1e0:	defffe04 	addi	sp,sp,-8
   1f1e4:	df000115 	stw	fp,4(sp)
   1f1e8:	df000104 	addi	fp,sp,4
   1f1ec:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   1f1f0:	e0bfff17 	ldw	r2,-4(fp)
   1f1f4:	10800317 	ldw	r2,12(r2)
   1f1f8:	10800504 	addi	r2,r2,20
   1f1fc:	10800037 	ldwio	r2,0(r2)
   1f200:	1080004c 	andi	r2,r2,1
   1f204:	10000226 	beq	r2,zero,1f210 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   1f208:	00800044 	movi	r2,1
   1f20c:	00000106 	br	1f214 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   1f210:	0005883a 	mov	r2,zero
}
   1f214:	e037883a 	mov	sp,fp
   1f218:	df000017 	ldw	fp,0(sp)
   1f21c:	dec00104 	addi	sp,sp,4
   1f220:	f800283a 	ret

0001f224 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   1f224:	defffb04 	addi	sp,sp,-20
   1f228:	df000415 	stw	fp,16(sp)
   1f22c:	df000404 	addi	fp,sp,16
   1f230:	e13ffc15 	stw	r4,-16(fp)
   1f234:	e17ffd15 	stw	r5,-12(fp)
   1f238:	e1bffe15 	stw	r6,-8(fp)
   1f23c:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   1f240:	e0bfff17 	ldw	r2,-4(fp)
   1f244:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   1f248:	00001406 	br	1f29c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   1f24c:	e0bfff17 	ldw	r2,-4(fp)
   1f250:	10800017 	ldw	r2,0(r2)
   1f254:	e0fffd17 	ldw	r3,-12(fp)
   1f258:	1885883a 	add	r2,r3,r2
   1f25c:	e0fffc17 	ldw	r3,-16(fp)
   1f260:	18c00317 	ldw	r3,12(r3)
   1f264:	18c00104 	addi	r3,r3,4
   1f268:	18c00037 	ldwio	r3,0(r3)
   1f26c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   1f270:	e0bfff17 	ldw	r2,-4(fp)
   1f274:	10800017 	ldw	r2,0(r2)
   1f278:	10c00044 	addi	r3,r2,1
   1f27c:	e0bfff17 	ldw	r2,-4(fp)
   1f280:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   1f284:	e0bfff17 	ldw	r2,-4(fp)
   1f288:	10c00017 	ldw	r3,0(r2)
   1f28c:	e0bffe17 	ldw	r2,-8(fp)
   1f290:	1880021e 	bne	r3,r2,1f29c <alt_avalon_i2c_rx_read_available+0x78>
   1f294:	e0bffe17 	ldw	r2,-8(fp)
   1f298:	1000061e 	bne	r2,zero,1f2b4 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   1f29c:	e0bffc17 	ldw	r2,-16(fp)
   1f2a0:	10800317 	ldw	r2,12(r2)
   1f2a4:	10800704 	addi	r2,r2,28
   1f2a8:	10800037 	ldwio	r2,0(r2)
   1f2ac:	103fe71e 	bne	r2,zero,1f24c <__alt_data_end+0xfc01f24c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   1f2b0:	00000106 	br	1f2b8 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   1f2b4:	0001883a 	nop
    }
}
   1f2b8:	0001883a 	nop
   1f2bc:	e037883a 	mov	sp,fp
   1f2c0:	df000017 	ldw	fp,0(sp)
   1f2c4:	dec00104 	addi	sp,sp,4
   1f2c8:	f800283a 	ret

0001f2cc <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   1f2cc:	defffa04 	addi	sp,sp,-24
   1f2d0:	dfc00515 	stw	ra,20(sp)
   1f2d4:	df000415 	stw	fp,16(sp)
   1f2d8:	df000404 	addi	fp,sp,16
   1f2dc:	e13ffe15 	stw	r4,-8(fp)
   1f2e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   1f2e4:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   1f2e8:	008000b4 	movhi	r2,2
   1f2ec:	10a1a804 	addi	r2,r2,-31072
   1f2f0:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   1f2f4:	00000d06 	br	1f32c <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   1f2f8:	e0bffd17 	ldw	r2,-12(fp)
   1f2fc:	108002a8 	cmpgeui	r2,r2,10
   1f300:	1000021e 	bne	r2,zero,1f30c <alt_avalon_i2c_rx_read+0x40>
   1f304:	0109c404 	movi	r4,10000
   1f308:	00215100 	call	21510 <alt_busy_sleep>
      if (--timeout == 0)
   1f30c:	e0bffd17 	ldw	r2,-12(fp)
   1f310:	10bfffc4 	addi	r2,r2,-1
   1f314:	e0bffd15 	stw	r2,-12(fp)
   1f318:	e0bffd17 	ldw	r2,-12(fp)
   1f31c:	1000031e 	bne	r2,zero,1f32c <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   1f320:	00bfff84 	movi	r2,-2
   1f324:	e0bffc15 	stw	r2,-16(fp)
        break;
   1f328:	00000506 	br	1f340 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   1f32c:	e0bffe17 	ldw	r2,-8(fp)
   1f330:	10800317 	ldw	r2,12(r2)
   1f334:	10800704 	addi	r2,r2,28
   1f338:	10800037 	ldwio	r2,0(r2)
   1f33c:	103fee26 	beq	r2,zero,1f2f8 <__alt_data_end+0xfc01f2f8>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   1f340:	e0bffe17 	ldw	r2,-8(fp)
   1f344:	10800317 	ldw	r2,12(r2)
   1f348:	10800104 	addi	r2,r2,4
   1f34c:	10800037 	ldwio	r2,0(r2)
   1f350:	1007883a 	mov	r3,r2
   1f354:	e0bfff17 	ldw	r2,-4(fp)
   1f358:	10c00005 	stb	r3,0(r2)
        
    return status;
   1f35c:	e0bffc17 	ldw	r2,-16(fp)
}
   1f360:	e037883a 	mov	sp,fp
   1f364:	dfc00117 	ldw	ra,4(sp)
   1f368:	df000017 	ldw	fp,0(sp)
   1f36c:	dec00204 	addi	sp,sp,8
   1f370:	f800283a 	ret

0001f374 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   1f374:	defff804 	addi	sp,sp,-32
   1f378:	dfc00715 	stw	ra,28(sp)
   1f37c:	df000615 	stw	fp,24(sp)
   1f380:	df000604 	addi	fp,sp,24
   1f384:	e13ffc15 	stw	r4,-16(fp)
   1f388:	2809883a 	mov	r4,r5
   1f38c:	3007883a 	mov	r3,r6
   1f390:	3805883a 	mov	r2,r7
   1f394:	e13ffd05 	stb	r4,-12(fp)
   1f398:	e0fffe05 	stb	r3,-8(fp)
   1f39c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   1f3a0:	0089c404 	movi	r2,10000
   1f3a4:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1f3a8:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   1f3ac:	00000c06 	br	1f3e0 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   1f3b0:	e0bffa17 	ldw	r2,-24(fp)
   1f3b4:	108002a8 	cmpgeui	r2,r2,10
   1f3b8:	1000021e 	bne	r2,zero,1f3c4 <alt_avalon_i2c_cmd_write+0x50>
   1f3bc:	0109c404 	movi	r4,10000
   1f3c0:	00215100 	call	21510 <alt_busy_sleep>
      if (--timeout == 0)
   1f3c4:	e0bffa17 	ldw	r2,-24(fp)
   1f3c8:	10bfffc4 	addi	r2,r2,-1
   1f3cc:	e0bffa15 	stw	r2,-24(fp)
   1f3d0:	e0bffa17 	ldw	r2,-24(fp)
   1f3d4:	1000021e 	bne	r2,zero,1f3e0 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   1f3d8:	00bfff84 	movi	r2,-2
   1f3dc:	00001906 	br	1f444 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   1f3e0:	e0bffc17 	ldw	r2,-16(fp)
   1f3e4:	10800317 	ldw	r2,12(r2)
   1f3e8:	10800404 	addi	r2,r2,16
   1f3ec:	10800037 	ldwio	r2,0(r2)
   1f3f0:	1080004c 	andi	r2,r2,1
   1f3f4:	103fee26 	beq	r2,zero,1f3b0 <__alt_data_end+0xfc01f3b0>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   1f3f8:	e0bffc17 	ldw	r2,-16(fp)
   1f3fc:	10800317 	ldw	r2,12(r2)
   1f400:	e13ffd03 	ldbu	r4,-12(fp)
   1f404:	e0fffe03 	ldbu	r3,-8(fp)
   1f408:	1806927a 	slli	r3,r3,9
   1f40c:	20c8b03a 	or	r4,r4,r3
   1f410:	e0ffff03 	ldbu	r3,-4(fp)
   1f414:	1806923a 	slli	r3,r3,8
   1f418:	20c6b03a 	or	r3,r4,r3
   1f41c:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   1f420:	e0bffb04 	addi	r2,fp,-20
   1f424:	100b883a 	mov	r5,r2
   1f428:	e13ffc17 	ldw	r4,-16(fp)
   1f42c:	001f5b40 	call	1f5b4 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   1f430:	e0bffb04 	addi	r2,fp,-20
   1f434:	100b883a 	mov	r5,r2
   1f438:	e13ffc17 	ldw	r4,-16(fp)
   1f43c:	001f6000 	call	1f600 <alt_avalon_i2c_check_arblost>
    
    return status;
   1f440:	e0bffb17 	ldw	r2,-20(fp)
}
   1f444:	e037883a 	mov	sp,fp
   1f448:	dfc00117 	ldw	ra,4(sp)
   1f44c:	df000017 	ldw	fp,0(sp)
   1f450:	dec00204 	addi	sp,sp,8
   1f454:	f800283a 	ret

0001f458 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   1f458:	defffa04 	addi	sp,sp,-24
   1f45c:	dfc00515 	stw	ra,20(sp)
   1f460:	df000415 	stw	fp,16(sp)
   1f464:	df000404 	addi	fp,sp,16
   1f468:	e13ffd15 	stw	r4,-12(fp)
   1f46c:	e17ffe15 	stw	r5,-8(fp)
   1f470:	3005883a 	mov	r2,r6
   1f474:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   1f478:	e0bffd17 	ldw	r2,-12(fp)
   1f47c:	10800d17 	ldw	r2,52(r2)
   1f480:	10800058 	cmpnei	r2,r2,1
   1f484:	10001c1e 	bne	r2,zero,1f4f8 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   1f488:	e0bffd17 	ldw	r2,-12(fp)
   1f48c:	10800917 	ldw	r2,36(r2)
   1f490:	109e0014 	ori	r2,r2,30720
   1f494:	1004d1fa 	srli	r2,r2,7
   1f498:	1007883a 	mov	r3,r2
   1f49c:	00bfff84 	movi	r2,-2
   1f4a0:	1884703a 	and	r2,r3,r2
   1f4a4:	1007883a 	mov	r3,r2
   1f4a8:	e0bffe17 	ldw	r2,-8(fp)
   1f4ac:	1884b03a 	or	r2,r3,r2
   1f4b0:	10803fcc 	andi	r2,r2,255
   1f4b4:	e0ffff03 	ldbu	r3,-4(fp)
   1f4b8:	000f883a 	mov	r7,zero
   1f4bc:	180d883a 	mov	r6,r3
   1f4c0:	100b883a 	mov	r5,r2
   1f4c4:	e13ffd17 	ldw	r4,-12(fp)
   1f4c8:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   1f4cc:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   1f4d0:	e0bffd17 	ldw	r2,-12(fp)
   1f4d4:	10800917 	ldw	r2,36(r2)
   1f4d8:	10803fcc 	andi	r2,r2,255
   1f4dc:	000f883a 	mov	r7,zero
   1f4e0:	000d883a 	mov	r6,zero
   1f4e4:	100b883a 	mov	r5,r2
   1f4e8:	e13ffd17 	ldw	r4,-12(fp)
   1f4ec:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   1f4f0:	e0bffc15 	stw	r2,-16(fp)
   1f4f4:	00000e06 	br	1f530 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   1f4f8:	e0bffd17 	ldw	r2,-12(fp)
   1f4fc:	10800917 	ldw	r2,36(r2)
   1f500:	1085883a 	add	r2,r2,r2
   1f504:	1007883a 	mov	r3,r2
   1f508:	e0bffe17 	ldw	r2,-8(fp)
   1f50c:	1884b03a 	or	r2,r3,r2
   1f510:	10803fcc 	andi	r2,r2,255
   1f514:	e0ffff03 	ldbu	r3,-4(fp)
   1f518:	000f883a 	mov	r7,zero
   1f51c:	180d883a 	mov	r6,r3
   1f520:	100b883a 	mov	r5,r2
   1f524:	e13ffd17 	ldw	r4,-12(fp)
   1f528:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   1f52c:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   1f530:	e0bffc17 	ldw	r2,-16(fp)
}
   1f534:	e037883a 	mov	sp,fp
   1f538:	dfc00117 	ldw	ra,4(sp)
   1f53c:	df000017 	ldw	fp,0(sp)
   1f540:	dec00204 	addi	sp,sp,8
   1f544:	f800283a 	ret

0001f548 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   1f548:	defffd04 	addi	sp,sp,-12
   1f54c:	df000215 	stw	fp,8(sp)
   1f550:	df000204 	addi	fp,sp,8
   1f554:	e13ffe15 	stw	r4,-8(fp)
   1f558:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   1f55c:	e0bffe17 	ldw	r2,-8(fp)
   1f560:	10c00917 	ldw	r3,36(r2)
   1f564:	e0bfff17 	ldw	r2,-4(fp)
   1f568:	10c00015 	stw	r3,0(r2)
}
   1f56c:	0001883a 	nop
   1f570:	e037883a 	mov	sp,fp
   1f574:	df000017 	ldw	fp,0(sp)
   1f578:	dec00104 	addi	sp,sp,4
   1f57c:	f800283a 	ret

0001f580 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   1f580:	defffd04 	addi	sp,sp,-12
   1f584:	df000215 	stw	fp,8(sp)
   1f588:	df000204 	addi	fp,sp,8
   1f58c:	e13ffe15 	stw	r4,-8(fp)
   1f590:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   1f594:	e0bffe17 	ldw	r2,-8(fp)
   1f598:	e0ffff17 	ldw	r3,-4(fp)
   1f59c:	10c00915 	stw	r3,36(r2)
}
   1f5a0:	0001883a 	nop
   1f5a4:	e037883a 	mov	sp,fp
   1f5a8:	df000017 	ldw	fp,0(sp)
   1f5ac:	dec00104 	addi	sp,sp,4
   1f5b0:	f800283a 	ret

0001f5b4 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   1f5b4:	defffd04 	addi	sp,sp,-12
   1f5b8:	df000215 	stw	fp,8(sp)
   1f5bc:	df000204 	addi	fp,sp,8
   1f5c0:	e13ffe15 	stw	r4,-8(fp)
   1f5c4:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   1f5c8:	e0bffe17 	ldw	r2,-8(fp)
   1f5cc:	10800317 	ldw	r2,12(r2)
   1f5d0:	10800404 	addi	r2,r2,16
   1f5d4:	10800037 	ldwio	r2,0(r2)
   1f5d8:	1080010c 	andi	r2,r2,4
   1f5dc:	10000326 	beq	r2,zero,1f5ec <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   1f5e0:	e0bfff17 	ldw	r2,-4(fp)
   1f5e4:	00fffec4 	movi	r3,-5
   1f5e8:	10c00015 	stw	r3,0(r2)
    }
}
   1f5ec:	0001883a 	nop
   1f5f0:	e037883a 	mov	sp,fp
   1f5f4:	df000017 	ldw	fp,0(sp)
   1f5f8:	dec00104 	addi	sp,sp,4
   1f5fc:	f800283a 	ret

0001f600 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   1f600:	defffd04 	addi	sp,sp,-12
   1f604:	df000215 	stw	fp,8(sp)
   1f608:	df000204 	addi	fp,sp,8
   1f60c:	e13ffe15 	stw	r4,-8(fp)
   1f610:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   1f614:	e0bffe17 	ldw	r2,-8(fp)
   1f618:	10800317 	ldw	r2,12(r2)
   1f61c:	10800404 	addi	r2,r2,16
   1f620:	10800037 	ldwio	r2,0(r2)
   1f624:	1080020c 	andi	r2,r2,8
   1f628:	10000326 	beq	r2,zero,1f638 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   1f62c:	e0bfff17 	ldw	r2,-4(fp)
   1f630:	00fffe84 	movi	r3,-6
   1f634:	10c00015 	stw	r3,0(r2)
    }
}
   1f638:	0001883a 	nop
   1f63c:	e037883a 	mov	sp,fp
   1f640:	df000017 	ldw	fp,0(sp)
   1f644:	dec00104 	addi	sp,sp,4
   1f648:	f800283a 	ret

0001f64c <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1f64c:	defff804 	addi	sp,sp,-32
   1f650:	dfc00715 	stw	ra,28(sp)
   1f654:	df000615 	stw	fp,24(sp)
   1f658:	df000604 	addi	fp,sp,24
   1f65c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1f660:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1f664:	e0bfff17 	ldw	r2,-4(fp)
   1f668:	10800717 	ldw	r2,28(r2)
   1f66c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   1f670:	e0bffb17 	ldw	r2,-20(fp)
   1f674:	10800117 	ldw	r2,4(r2)
   1f678:	10800044 	addi	r2,r2,1
   1f67c:	0149c404 	movi	r5,10000
   1f680:	1009883a 	mov	r4,r2
   1f684:	000cca00 	call	cca0 <__mulsi3>
   1f688:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   1f68c:	e0bffd04 	addi	r2,fp,-12
   1f690:	100b883a 	mov	r5,r2
   1f694:	e13fff17 	ldw	r4,-4(fp)
   1f698:	00204e40 	call	204e4 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   1f69c:	e0bffd17 	ldw	r2,-12(fp)
   1f6a0:	100b883a 	mov	r5,r2
   1f6a4:	e13fff17 	ldw	r4,-4(fp)
   1f6a8:	00204180 	call	20418 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   1f6ac:	e0bffc04 	addi	r2,fp,-16
   1f6b0:	100b883a 	mov	r5,r2
   1f6b4:	e13fff17 	ldw	r4,-4(fp)
   1f6b8:	001f5b40 	call	1f5b4 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   1f6bc:	e0bffc17 	ldw	r2,-16(fp)
   1f6c0:	10002226 	beq	r2,zero,1f74c <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   1f6c4:	e0bffb17 	ldw	r2,-20(fp)
   1f6c8:	10800217 	ldw	r2,8(r2)
   1f6cc:	10001d26 	beq	r2,zero,1f744 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   1f6d0:	00000d06 	br	1f708 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   1f6d4:	e0bffa17 	ldw	r2,-24(fp)
   1f6d8:	108002a8 	cmpgeui	r2,r2,10
   1f6dc:	1000021e 	bne	r2,zero,1f6e8 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   1f6e0:	0109c404 	movi	r4,10000
   1f6e4:	00215100 	call	21510 <alt_busy_sleep>
              if (--timeout == 0)
   1f6e8:	e0bffa17 	ldw	r2,-24(fp)
   1f6ec:	10bfffc4 	addi	r2,r2,-1
   1f6f0:	e0bffa15 	stw	r2,-24(fp)
   1f6f4:	e0bffa17 	ldw	r2,-24(fp)
   1f6f8:	1000031e 	bne	r2,zero,1f708 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   1f6fc:	00bfff84 	movi	r2,-2
   1f700:	e0bffc15 	stw	r2,-16(fp)
                 break;
   1f704:	00000306 	br	1f714 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   1f708:	e13fff17 	ldw	r4,-4(fp)
   1f70c:	001f1e00 	call	1f1e0 <alt_avalon_i2c_is_busy>
   1f710:	103ff01e 	bne	r2,zero,1f6d4 <__alt_data_end+0xfc01f6d4>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   1f714:	e0bffb17 	ldw	r2,-20(fp)
   1f718:	10800017 	ldw	r2,0(r2)
   1f71c:	e0fffe04 	addi	r3,fp,-8
   1f720:	180f883a 	mov	r7,r3
   1f724:	000d883a 	mov	r6,zero
   1f728:	100b883a 	mov	r5,r2
   1f72c:	e13fff17 	ldw	r4,-4(fp)
   1f730:	001f2240 	call	1f224 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   1f734:	e13fff17 	ldw	r4,-4(fp)
   1f738:	001ee880 	call	1ee88 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   1f73c:	e0bffb17 	ldw	r2,-20(fp)
   1f740:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   1f744:	e0bffc17 	ldw	r2,-16(fp)
   1f748:	00000a06 	br	1f774 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   1f74c:	e0bffb17 	ldw	r2,-20(fp)
   1f750:	10800217 	ldw	r2,8(r2)
   1f754:	10000626 	beq	r2,zero,1f770 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   1f758:	e0bffd17 	ldw	r2,-12(fp)
   1f75c:	100b883a 	mov	r5,r2
   1f760:	e13fff17 	ldw	r4,-4(fp)
   1f764:	00204800 	call	20480 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   1f768:	00bffe44 	movi	r2,-7
   1f76c:	00000106 	br	1f774 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   1f770:	0005883a 	mov	r2,zero
}
   1f774:	e037883a 	mov	sp,fp
   1f778:	dfc00117 	ldw	ra,4(sp)
   1f77c:	df000017 	ldw	fp,0(sp)
   1f780:	dec00204 	addi	sp,sp,8
   1f784:	f800283a 	ret

0001f788 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   1f788:	defff704 	addi	sp,sp,-36
   1f78c:	dfc00815 	stw	ra,32(sp)
   1f790:	df000715 	stw	fp,28(sp)
   1f794:	df000704 	addi	fp,sp,28
   1f798:	e13ffc15 	stw	r4,-16(fp)
   1f79c:	e17ffd15 	stw	r5,-12(fp)
   1f7a0:	e1bffe15 	stw	r6,-8(fp)
   1f7a4:	3805883a 	mov	r2,r7
   1f7a8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   1f7ac:	0089c404 	movi	r2,10000
   1f7b0:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   1f7b4:	00002206 	br	1f840 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   1f7b8:	e0bffb17 	ldw	r2,-20(fp)
   1f7bc:	108002a8 	cmpgeui	r2,r2,10
   1f7c0:	1000021e 	bne	r2,zero,1f7cc <alt_avalon_i2c_master_tx+0x44>
   1f7c4:	0109c404 	movi	r4,10000
   1f7c8:	00215100 	call	21510 <alt_busy_sleep>
      if (use_interrupts)
   1f7cc:	e0bfff03 	ldbu	r2,-4(fp)
   1f7d0:	10000926 	beq	r2,zero,1f7f8 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   1f7d4:	00800044 	movi	r2,1
   1f7d8:	d8800015 	stw	r2,0(sp)
   1f7dc:	000f883a 	mov	r7,zero
   1f7e0:	e1bffe17 	ldw	r6,-8(fp)
   1f7e4:	e17ffd17 	ldw	r5,-12(fp)
   1f7e8:	e13ffc17 	ldw	r4,-16(fp)
   1f7ec:	001fd340 	call	1fd34 <alt_avalon_i2c_master_transmit_using_interrupts>
   1f7f0:	e0bffa15 	stw	r2,-24(fp)
   1f7f4:	00000806 	br	1f818 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   1f7f8:	00800044 	movi	r2,1
   1f7fc:	d8800015 	stw	r2,0(sp)
   1f800:	000f883a 	mov	r7,zero
   1f804:	e1bffe17 	ldw	r6,-8(fp)
   1f808:	e17ffd17 	ldw	r5,-12(fp)
   1f80c:	e13ffc17 	ldw	r4,-16(fp)
   1f810:	001fb740 	call	1fb74 <alt_avalon_i2c_master_transmit>
   1f814:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1f818:	e0bffa17 	ldw	r2,-24(fp)
   1f81c:	10bffea0 	cmpeqi	r2,r2,-6
   1f820:	1000061e 	bne	r2,zero,1f83c <alt_avalon_i2c_master_tx+0xb4>
   1f824:	e0bffa17 	ldw	r2,-24(fp)
   1f828:	10bffee0 	cmpeqi	r2,r2,-5
   1f82c:	1000031e 	bne	r2,zero,1f83c <alt_avalon_i2c_master_tx+0xb4>
   1f830:	e0bffa17 	ldw	r2,-24(fp)
   1f834:	10bffe58 	cmpnei	r2,r2,-7
   1f838:	1000061e 	bne	r2,zero,1f854 <alt_avalon_i2c_master_tx+0xcc>
   1f83c:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   1f840:	e0bffb17 	ldw	r2,-20(fp)
   1f844:	10ffffc4 	addi	r3,r2,-1
   1f848:	e0fffb15 	stw	r3,-20(fp)
   1f84c:	103fda1e 	bne	r2,zero,1f7b8 <__alt_data_end+0xfc01f7b8>
   1f850:	00000106 	br	1f858 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   1f854:	0001883a 	nop
    }

    return status;
   1f858:	e0bffa17 	ldw	r2,-24(fp)
}        
   1f85c:	e037883a 	mov	sp,fp
   1f860:	dfc00117 	ldw	ra,4(sp)
   1f864:	df000017 	ldw	fp,0(sp)
   1f868:	dec00204 	addi	sp,sp,8
   1f86c:	f800283a 	ret

0001f870 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   1f870:	defff704 	addi	sp,sp,-36
   1f874:	dfc00815 	stw	ra,32(sp)
   1f878:	df000715 	stw	fp,28(sp)
   1f87c:	df000704 	addi	fp,sp,28
   1f880:	e13ffc15 	stw	r4,-16(fp)
   1f884:	e17ffd15 	stw	r5,-12(fp)
   1f888:	e1bffe15 	stw	r6,-8(fp)
   1f88c:	3805883a 	mov	r2,r7
   1f890:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   1f894:	0089c404 	movi	r2,10000
   1f898:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   1f89c:	e0bfff03 	ldbu	r2,-4(fp)
   1f8a0:	10003426 	beq	r2,zero,1f974 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   1f8a4:	00001706 	br	1f904 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   1f8a8:	e0bffb17 	ldw	r2,-20(fp)
   1f8ac:	108002a8 	cmpgeui	r2,r2,10
   1f8b0:	1000021e 	bne	r2,zero,1f8bc <alt_avalon_i2c_master_rx+0x4c>
   1f8b4:	0109c404 	movi	r4,10000
   1f8b8:	00215100 	call	21510 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   1f8bc:	00800044 	movi	r2,1
   1f8c0:	d8800015 	stw	r2,0(sp)
   1f8c4:	000f883a 	mov	r7,zero
   1f8c8:	e1bffe17 	ldw	r6,-8(fp)
   1f8cc:	e17ffd17 	ldw	r5,-12(fp)
   1f8d0:	e13ffc17 	ldw	r4,-16(fp)
   1f8d4:	00201500 	call	20150 <alt_avalon_i2c_master_receive_using_interrupts>
   1f8d8:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1f8dc:	e0bffa17 	ldw	r2,-24(fp)
   1f8e0:	10bffea0 	cmpeqi	r2,r2,-6
   1f8e4:	1000061e 	bne	r2,zero,1f900 <alt_avalon_i2c_master_rx+0x90>
   1f8e8:	e0bffa17 	ldw	r2,-24(fp)
   1f8ec:	10bffee0 	cmpeqi	r2,r2,-5
   1f8f0:	1000031e 	bne	r2,zero,1f900 <alt_avalon_i2c_master_rx+0x90>
   1f8f4:	e0bffa17 	ldw	r2,-24(fp)
   1f8f8:	10bffe58 	cmpnei	r2,r2,-7
   1f8fc:	1000221e 	bne	r2,zero,1f988 <alt_avalon_i2c_master_rx+0x118>
   1f900:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   1f904:	e0bffb17 	ldw	r2,-20(fp)
   1f908:	10ffffc4 	addi	r3,r2,-1
   1f90c:	e0fffb15 	stw	r3,-20(fp)
   1f910:	103fe51e 	bne	r2,zero,1f8a8 <__alt_data_end+0xfc01f8a8>
   1f914:	00001f06 	br	1f994 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   1f918:	e0bffb17 	ldw	r2,-20(fp)
   1f91c:	108002a8 	cmpgeui	r2,r2,10
   1f920:	1000021e 	bne	r2,zero,1f92c <alt_avalon_i2c_master_rx+0xbc>
   1f924:	0109c404 	movi	r4,10000
   1f928:	00215100 	call	21510 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   1f92c:	00800044 	movi	r2,1
   1f930:	d8800015 	stw	r2,0(sp)
   1f934:	000f883a 	mov	r7,zero
   1f938:	e1bffe17 	ldw	r6,-8(fp)
   1f93c:	e17ffd17 	ldw	r5,-12(fp)
   1f940:	e13ffc17 	ldw	r4,-16(fp)
   1f944:	001ff400 	call	1ff40 <alt_avalon_i2c_master_receive>
   1f948:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1f94c:	e0bffa17 	ldw	r2,-24(fp)
   1f950:	10bffea0 	cmpeqi	r2,r2,-6
   1f954:	1000061e 	bne	r2,zero,1f970 <alt_avalon_i2c_master_rx+0x100>
   1f958:	e0bffa17 	ldw	r2,-24(fp)
   1f95c:	10bffee0 	cmpeqi	r2,r2,-5
   1f960:	1000031e 	bne	r2,zero,1f970 <alt_avalon_i2c_master_rx+0x100>
   1f964:	e0bffa17 	ldw	r2,-24(fp)
   1f968:	10bffe58 	cmpnei	r2,r2,-7
   1f96c:	1000081e 	bne	r2,zero,1f990 <alt_avalon_i2c_master_rx+0x120>
   1f970:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   1f974:	e0bffb17 	ldw	r2,-20(fp)
   1f978:	10ffffc4 	addi	r3,r2,-1
   1f97c:	e0fffb15 	stw	r3,-20(fp)
   1f980:	103fe51e 	bne	r2,zero,1f918 <__alt_data_end+0xfc01f918>
   1f984:	00000306 	br	1f994 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   1f988:	0001883a 	nop
   1f98c:	00000106 	br	1f994 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   1f990:	0001883a 	nop
      }
    }
    
    return status;
   1f994:	e0bffa17 	ldw	r2,-24(fp)
}        
   1f998:	e037883a 	mov	sp,fp
   1f99c:	dfc00117 	ldw	ra,4(sp)
   1f9a0:	df000017 	ldw	fp,0(sp)
   1f9a4:	dec00204 	addi	sp,sp,8
   1f9a8:	f800283a 	ret

0001f9ac <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   1f9ac:	defff604 	addi	sp,sp,-40
   1f9b0:	dfc00915 	stw	ra,36(sp)
   1f9b4:	df000815 	stw	fp,32(sp)
   1f9b8:	df000804 	addi	fp,sp,32
   1f9bc:	e13ffb15 	stw	r4,-20(fp)
   1f9c0:	e17ffc15 	stw	r5,-16(fp)
   1f9c4:	e1bffd15 	stw	r6,-12(fp)
   1f9c8:	e1fffe15 	stw	r7,-8(fp)
   1f9cc:	e0800317 	ldw	r2,12(fp)
   1f9d0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   1f9d4:	0089c404 	movi	r2,10000
   1f9d8:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   1f9dc:	e0bfff03 	ldbu	r2,-4(fp)
   1f9e0:	10005626 	beq	r2,zero,1fb3c <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   1f9e4:	00002806 	br	1fa88 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   1f9e8:	e0bffa17 	ldw	r2,-24(fp)
   1f9ec:	108002a8 	cmpgeui	r2,r2,10
   1f9f0:	1000021e 	bne	r2,zero,1f9fc <alt_avalon_i2c_master_tx_rx+0x50>
   1f9f4:	0109c404 	movi	r4,10000
   1f9f8:	00215100 	call	21510 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   1f9fc:	d8000015 	stw	zero,0(sp)
   1fa00:	000f883a 	mov	r7,zero
   1fa04:	e1bffd17 	ldw	r6,-12(fp)
   1fa08:	e17ffc17 	ldw	r5,-16(fp)
   1fa0c:	e13ffb17 	ldw	r4,-20(fp)
   1fa10:	001fd340 	call	1fd34 <alt_avalon_i2c_master_transmit_using_interrupts>
   1fa14:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1fa18:	e0bff917 	ldw	r2,-28(fp)
   1fa1c:	10bffea0 	cmpeqi	r2,r2,-6
   1fa20:	1000191e 	bne	r2,zero,1fa88 <alt_avalon_i2c_master_tx_rx+0xdc>
   1fa24:	e0bff917 	ldw	r2,-28(fp)
   1fa28:	10bffee0 	cmpeqi	r2,r2,-5
   1fa2c:	1000161e 	bne	r2,zero,1fa88 <alt_avalon_i2c_master_tx_rx+0xdc>
   1fa30:	e0bff917 	ldw	r2,-28(fp)
   1fa34:	10bffe58 	cmpnei	r2,r2,-7
   1fa38:	1000011e 	bne	r2,zero,1fa40 <alt_avalon_i2c_master_tx_rx+0x94>
   1fa3c:	00001206 	br	1fa88 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   1fa40:	00800044 	movi	r2,1
   1fa44:	d8800015 	stw	r2,0(sp)
   1fa48:	01c00044 	movi	r7,1
   1fa4c:	e1800217 	ldw	r6,8(fp)
   1fa50:	e17ffe17 	ldw	r5,-8(fp)
   1fa54:	e13ffb17 	ldw	r4,-20(fp)
   1fa58:	00201500 	call	20150 <alt_avalon_i2c_master_receive_using_interrupts>
   1fa5c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1fa60:	e0bff917 	ldw	r2,-28(fp)
   1fa64:	10bffea0 	cmpeqi	r2,r2,-6
   1fa68:	1000061e 	bne	r2,zero,1fa84 <alt_avalon_i2c_master_tx_rx+0xd8>
   1fa6c:	e0bff917 	ldw	r2,-28(fp)
   1fa70:	10bffee0 	cmpeqi	r2,r2,-5
   1fa74:	1000031e 	bne	r2,zero,1fa84 <alt_avalon_i2c_master_tx_rx+0xd8>
   1fa78:	e0bff917 	ldw	r2,-28(fp)
   1fa7c:	10bffe58 	cmpnei	r2,r2,-7
   1fa80:	1000331e 	bne	r2,zero,1fb50 <alt_avalon_i2c_master_tx_rx+0x1a4>
   1fa84:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   1fa88:	e0bffa17 	ldw	r2,-24(fp)
   1fa8c:	10ffffc4 	addi	r3,r2,-1
   1fa90:	e0fffa15 	stw	r3,-24(fp)
   1fa94:	103fd41e 	bne	r2,zero,1f9e8 <__alt_data_end+0xfc01f9e8>
   1fa98:	00003006 	br	1fb5c <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   1fa9c:	e0bffa17 	ldw	r2,-24(fp)
   1faa0:	108002a8 	cmpgeui	r2,r2,10
   1faa4:	1000021e 	bne	r2,zero,1fab0 <alt_avalon_i2c_master_tx_rx+0x104>
   1faa8:	0109c404 	movi	r4,10000
   1faac:	00215100 	call	21510 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   1fab0:	d8000015 	stw	zero,0(sp)
   1fab4:	000f883a 	mov	r7,zero
   1fab8:	e1bffd17 	ldw	r6,-12(fp)
   1fabc:	e17ffc17 	ldw	r5,-16(fp)
   1fac0:	e13ffb17 	ldw	r4,-20(fp)
   1fac4:	001fb740 	call	1fb74 <alt_avalon_i2c_master_transmit>
   1fac8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1facc:	e0bff917 	ldw	r2,-28(fp)
   1fad0:	10bffea0 	cmpeqi	r2,r2,-6
   1fad4:	1000191e 	bne	r2,zero,1fb3c <alt_avalon_i2c_master_tx_rx+0x190>
   1fad8:	e0bff917 	ldw	r2,-28(fp)
   1fadc:	10bffee0 	cmpeqi	r2,r2,-5
   1fae0:	1000161e 	bne	r2,zero,1fb3c <alt_avalon_i2c_master_tx_rx+0x190>
   1fae4:	e0bff917 	ldw	r2,-28(fp)
   1fae8:	10bffe58 	cmpnei	r2,r2,-7
   1faec:	1000011e 	bne	r2,zero,1faf4 <alt_avalon_i2c_master_tx_rx+0x148>
   1faf0:	00001206 	br	1fb3c <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   1faf4:	00800044 	movi	r2,1
   1faf8:	d8800015 	stw	r2,0(sp)
   1fafc:	01c00044 	movi	r7,1
   1fb00:	e1800217 	ldw	r6,8(fp)
   1fb04:	e17ffe17 	ldw	r5,-8(fp)
   1fb08:	e13ffb17 	ldw	r4,-20(fp)
   1fb0c:	001ff400 	call	1ff40 <alt_avalon_i2c_master_receive>
   1fb10:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1fb14:	e0bff917 	ldw	r2,-28(fp)
   1fb18:	10bffea0 	cmpeqi	r2,r2,-6
   1fb1c:	1000061e 	bne	r2,zero,1fb38 <alt_avalon_i2c_master_tx_rx+0x18c>
   1fb20:	e0bff917 	ldw	r2,-28(fp)
   1fb24:	10bffee0 	cmpeqi	r2,r2,-5
   1fb28:	1000031e 	bne	r2,zero,1fb38 <alt_avalon_i2c_master_tx_rx+0x18c>
   1fb2c:	e0bff917 	ldw	r2,-28(fp)
   1fb30:	10bffe58 	cmpnei	r2,r2,-7
   1fb34:	1000081e 	bne	r2,zero,1fb58 <alt_avalon_i2c_master_tx_rx+0x1ac>
   1fb38:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   1fb3c:	e0bffa17 	ldw	r2,-24(fp)
   1fb40:	10ffffc4 	addi	r3,r2,-1
   1fb44:	e0fffa15 	stw	r3,-24(fp)
   1fb48:	103fd41e 	bne	r2,zero,1fa9c <__alt_data_end+0xfc01fa9c>
   1fb4c:	00000306 	br	1fb5c <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   1fb50:	0001883a 	nop
   1fb54:	00000106 	br	1fb5c <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   1fb58:	0001883a 	nop
      }
    }
    
    return status;
   1fb5c:	e0bff917 	ldw	r2,-28(fp)
}                                       
   1fb60:	e037883a 	mov	sp,fp
   1fb64:	dfc00117 	ldw	ra,4(sp)
   1fb68:	df000017 	ldw	fp,0(sp)
   1fb6c:	dec00204 	addi	sp,sp,8
   1fb70:	f800283a 	ret

0001fb74 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1fb74:	defff704 	addi	sp,sp,-36
   1fb78:	dfc00815 	stw	ra,32(sp)
   1fb7c:	df000715 	stw	fp,28(sp)
   1fb80:	df000704 	addi	fp,sp,28
   1fb84:	e13ffb15 	stw	r4,-20(fp)
   1fb88:	e17ffc15 	stw	r5,-16(fp)
   1fb8c:	e1bffd15 	stw	r6,-12(fp)
   1fb90:	3807883a 	mov	r3,r7
   1fb94:	e0800217 	ldw	r2,8(fp)
   1fb98:	e0fffe05 	stb	r3,-8(fp)
   1fb9c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1fba0:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   1fba4:	0149c404 	movi	r5,10000
   1fba8:	e13ffd17 	ldw	r4,-12(fp)
   1fbac:	000cca00 	call	cca0 <__mulsi3>
   1fbb0:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   1fbb4:	e0bffd17 	ldw	r2,-12(fp)
   1fbb8:	1000021e 	bne	r2,zero,1fbc4 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   1fbbc:	0005883a 	mov	r2,zero
   1fbc0:	00005706 	br	1fd20 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   1fbc4:	e0bffe03 	ldbu	r2,-8(fp)
   1fbc8:	10000a1e 	bne	r2,zero,1fbf4 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1fbcc:	e13ffb17 	ldw	r4,-20(fp)
   1fbd0:	001edf00 	call	1edf0 <alt_avalon_i2c_enable>
   1fbd4:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   1fbd8:	e0bffa17 	ldw	r2,-24(fp)
   1fbdc:	10000226 	beq	r2,zero,1fbe8 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   1fbe0:	e0bffa17 	ldw	r2,-24(fp)
   1fbe4:	00004e06 	br	1fd20 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fbe8:	01400704 	movi	r5,28
   1fbec:	e13ffb17 	ldw	r4,-20(fp)
   1fbf0:	00203dc0 	call	203dc <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   1fbf4:	e0bffe03 	ldbu	r2,-8(fp)
   1fbf8:	100d883a 	mov	r6,r2
   1fbfc:	000b883a 	mov	r5,zero
   1fc00:	e13ffb17 	ldw	r4,-20(fp)
   1fc04:	001f4580 	call	1f458 <alt_avalon_i2c_send_address>
   1fc08:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   1fc0c:	e0bffa17 	ldw	r2,-24(fp)
   1fc10:	1000271e 	bne	r2,zero,1fcb0 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1fc14:	00000f06 	br	1fc54 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   1fc18:	e0bffc17 	ldw	r2,-16(fp)
   1fc1c:	10800003 	ldbu	r2,0(r2)
   1fc20:	10803fcc 	andi	r2,r2,255
   1fc24:	000f883a 	mov	r7,zero
   1fc28:	000d883a 	mov	r6,zero
   1fc2c:	100b883a 	mov	r5,r2
   1fc30:	e13ffb17 	ldw	r4,-20(fp)
   1fc34:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   1fc38:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   1fc3c:	e0bffc17 	ldw	r2,-16(fp)
   1fc40:	10800044 	addi	r2,r2,1
   1fc44:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1fc48:	e0bffd17 	ldw	r2,-12(fp)
   1fc4c:	10bfffc4 	addi	r2,r2,-1
   1fc50:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1fc54:	e0bffd17 	ldw	r2,-12(fp)
   1fc58:	108000b0 	cmpltui	r2,r2,2
   1fc5c:	1000021e 	bne	r2,zero,1fc68 <alt_avalon_i2c_master_transmit+0xf4>
   1fc60:	e0bffa17 	ldw	r2,-24(fp)
   1fc64:	103fec26 	beq	r2,zero,1fc18 <__alt_data_end+0xfc01fc18>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   1fc68:	e0bffa17 	ldw	r2,-24(fp)
   1fc6c:	1000101e 	bne	r2,zero,1fcb0 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   1fc70:	e0bffc17 	ldw	r2,-16(fp)
   1fc74:	10800003 	ldbu	r2,0(r2)
   1fc78:	10803fcc 	andi	r2,r2,255
   1fc7c:	e0ffff03 	ldbu	r3,-4(fp)
   1fc80:	180f883a 	mov	r7,r3
   1fc84:	000d883a 	mov	r6,zero
   1fc88:	100b883a 	mov	r5,r2
   1fc8c:	e13ffb17 	ldw	r4,-20(fp)
   1fc90:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   1fc94:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   1fc98:	e0bffc17 	ldw	r2,-16(fp)
   1fc9c:	10800044 	addi	r2,r2,1
   1fca0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1fca4:	e0bffd17 	ldw	r2,-12(fp)
   1fca8:	10bfffc4 	addi	r2,r2,-1
   1fcac:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   1fcb0:	e0bfff03 	ldbu	r2,-4(fp)
   1fcb4:	1000101e 	bne	r2,zero,1fcf8 <alt_avalon_i2c_master_transmit+0x184>
   1fcb8:	e0bffa17 	ldw	r2,-24(fp)
   1fcbc:	10001726 	beq	r2,zero,1fd1c <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1fcc0:	00000d06 	br	1fcf8 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   1fcc4:	e0bff917 	ldw	r2,-28(fp)
   1fcc8:	108002a8 	cmpgeui	r2,r2,10
   1fccc:	1000021e 	bne	r2,zero,1fcd8 <alt_avalon_i2c_master_transmit+0x164>
   1fcd0:	0109c404 	movi	r4,10000
   1fcd4:	00215100 	call	21510 <alt_busy_sleep>
            if (--timeout == 0)
   1fcd8:	e0bff917 	ldw	r2,-28(fp)
   1fcdc:	10bfffc4 	addi	r2,r2,-1
   1fce0:	e0bff915 	stw	r2,-28(fp)
   1fce4:	e0bff917 	ldw	r2,-28(fp)
   1fce8:	1000031e 	bne	r2,zero,1fcf8 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   1fcec:	00bfff84 	movi	r2,-2
   1fcf0:	e0bffa15 	stw	r2,-24(fp)
               break;
   1fcf4:	00000306 	br	1fd04 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1fcf8:	e13ffb17 	ldw	r4,-20(fp)
   1fcfc:	001f1e00 	call	1f1e0 <alt_avalon_i2c_is_busy>
   1fd00:	103ff01e 	bne	r2,zero,1fcc4 <__alt_data_end+0xfc01fcc4>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   1fd04:	e0bffa04 	addi	r2,fp,-24
   1fd08:	100b883a 	mov	r5,r2
   1fd0c:	e13ffb17 	ldw	r4,-20(fp)
   1fd10:	001f5b40 	call	1f5b4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   1fd14:	e13ffb17 	ldw	r4,-20(fp)
   1fd18:	001ee880 	call	1ee88 <alt_avalon_i2c_disable>
    }


    return status;
   1fd1c:	e0bffa17 	ldw	r2,-24(fp)
}
   1fd20:	e037883a 	mov	sp,fp
   1fd24:	dfc00117 	ldw	ra,4(sp)
   1fd28:	df000017 	ldw	fp,0(sp)
   1fd2c:	dec00204 	addi	sp,sp,8
   1fd30:	f800283a 	ret

0001fd34 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1fd34:	defff604 	addi	sp,sp,-40
   1fd38:	dfc00915 	stw	ra,36(sp)
   1fd3c:	df000815 	stw	fp,32(sp)
   1fd40:	df000804 	addi	fp,sp,32
   1fd44:	e13ffb15 	stw	r4,-20(fp)
   1fd48:	e17ffc15 	stw	r5,-16(fp)
   1fd4c:	e1bffd15 	stw	r6,-12(fp)
   1fd50:	3807883a 	mov	r3,r7
   1fd54:	e0800217 	ldw	r2,8(fp)
   1fd58:	e0fffe05 	stb	r3,-8(fp)
   1fd5c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1fd60:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   1fd64:	0149c404 	movi	r5,10000
   1fd68:	e13ffd17 	ldw	r4,-12(fp)
   1fd6c:	000cca00 	call	cca0 <__mulsi3>
   1fd70:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   1fd74:	e0bffb17 	ldw	r2,-20(fp)
   1fd78:	10800717 	ldw	r2,28(r2)
   1fd7c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   1fd80:	e0bffd17 	ldw	r2,-12(fp)
   1fd84:	1000021e 	bne	r2,zero,1fd90 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   1fd88:	0005883a 	mov	r2,zero
   1fd8c:	00006706 	br	1ff2c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   1fd90:	e0bffb17 	ldw	r2,-20(fp)
   1fd94:	10c00617 	ldw	r3,24(r2)
   1fd98:	008000b4 	movhi	r2,2
   1fd9c:	10ba9d04 	addi	r2,r2,-5516
   1fda0:	18800226 	beq	r3,r2,1fdac <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   1fda4:	00bfff44 	movi	r2,-3
   1fda8:	00006006 	br	1ff2c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   1fdac:	e0bffe03 	ldbu	r2,-8(fp)
   1fdb0:	10000a1e 	bne	r2,zero,1fddc <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1fdb4:	e13ffb17 	ldw	r4,-20(fp)
   1fdb8:	001edf00 	call	1edf0 <alt_avalon_i2c_enable>
   1fdbc:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   1fdc0:	e0bff817 	ldw	r2,-32(fp)
   1fdc4:	10000226 	beq	r2,zero,1fdd0 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   1fdc8:	e0bff817 	ldw	r2,-32(fp)
   1fdcc:	00005706 	br	1ff2c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fdd0:	01400704 	movi	r5,28
   1fdd4:	e13ffb17 	ldw	r4,-20(fp)
   1fdd8:	00203dc0 	call	203dc <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   1fddc:	e0bffe03 	ldbu	r2,-8(fp)
   1fde0:	100d883a 	mov	r6,r2
   1fde4:	000b883a 	mov	r5,zero
   1fde8:	e13ffb17 	ldw	r4,-20(fp)
   1fdec:	001f4580 	call	1f458 <alt_avalon_i2c_send_address>
   1fdf0:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   1fdf4:	e0bff817 	ldw	r2,-32(fp)
   1fdf8:	1000271e 	bne	r2,zero,1fe98 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1fdfc:	00000f06 	br	1fe3c <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   1fe00:	e0bffc17 	ldw	r2,-16(fp)
   1fe04:	10800003 	ldbu	r2,0(r2)
   1fe08:	10803fcc 	andi	r2,r2,255
   1fe0c:	000f883a 	mov	r7,zero
   1fe10:	000d883a 	mov	r6,zero
   1fe14:	100b883a 	mov	r5,r2
   1fe18:	e13ffb17 	ldw	r4,-20(fp)
   1fe1c:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   1fe20:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   1fe24:	e0bffc17 	ldw	r2,-16(fp)
   1fe28:	10800044 	addi	r2,r2,1
   1fe2c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1fe30:	e0bffd17 	ldw	r2,-12(fp)
   1fe34:	10bfffc4 	addi	r2,r2,-1
   1fe38:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1fe3c:	e0bffd17 	ldw	r2,-12(fp)
   1fe40:	108000b0 	cmpltui	r2,r2,2
   1fe44:	1000021e 	bne	r2,zero,1fe50 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   1fe48:	e0bff817 	ldw	r2,-32(fp)
   1fe4c:	103fec26 	beq	r2,zero,1fe00 <__alt_data_end+0xfc01fe00>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   1fe50:	e0bff817 	ldw	r2,-32(fp)
   1fe54:	1000101e 	bne	r2,zero,1fe98 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   1fe58:	e0bffc17 	ldw	r2,-16(fp)
   1fe5c:	10800003 	ldbu	r2,0(r2)
   1fe60:	10803fcc 	andi	r2,r2,255
   1fe64:	e0ffff03 	ldbu	r3,-4(fp)
   1fe68:	180f883a 	mov	r7,r3
   1fe6c:	000d883a 	mov	r6,zero
   1fe70:	100b883a 	mov	r5,r2
   1fe74:	e13ffb17 	ldw	r4,-20(fp)
   1fe78:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   1fe7c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   1fe80:	e0bffc17 	ldw	r2,-16(fp)
   1fe84:	10800044 	addi	r2,r2,1
   1fe88:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1fe8c:	e0bffd17 	ldw	r2,-12(fp)
   1fe90:	10bfffc4 	addi	r2,r2,-1
   1fe94:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   1fe98:	e0bff817 	ldw	r2,-32(fp)
   1fe9c:	10001426 	beq	r2,zero,1fef0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1fea0:	00000d06 	br	1fed8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   1fea4:	e0bff917 	ldw	r2,-28(fp)
   1fea8:	108002a8 	cmpgeui	r2,r2,10
   1feac:	1000021e 	bne	r2,zero,1feb8 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   1feb0:	0109c404 	movi	r4,10000
   1feb4:	00215100 	call	21510 <alt_busy_sleep>
            if (--timeout == 0)
   1feb8:	e0bff917 	ldw	r2,-28(fp)
   1febc:	10bfffc4 	addi	r2,r2,-1
   1fec0:	e0bff915 	stw	r2,-28(fp)
   1fec4:	e0bff917 	ldw	r2,-28(fp)
   1fec8:	1000031e 	bne	r2,zero,1fed8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   1fecc:	00bfff84 	movi	r2,-2
   1fed0:	e0bff815 	stw	r2,-32(fp)
               break;
   1fed4:	00000306 	br	1fee4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1fed8:	e13ffb17 	ldw	r4,-20(fp)
   1fedc:	001f1e00 	call	1f1e0 <alt_avalon_i2c_is_busy>
   1fee0:	103ff01e 	bne	r2,zero,1fea4 <__alt_data_end+0xfc01fea4>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   1fee4:	e13ffb17 	ldw	r4,-20(fp)
   1fee8:	001ee880 	call	1ee88 <alt_avalon_i2c_disable>
   1feec:	00000e06 	br	1ff28 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   1fef0:	e0bfff03 	ldbu	r2,-4(fp)
   1fef4:	10000c26 	beq	r2,zero,1ff28 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fef8:	01400704 	movi	r5,28
   1fefc:	e13ffb17 	ldw	r4,-20(fp)
   1ff00:	00203dc0 	call	203dc <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   1ff04:	000b883a 	mov	r5,zero
   1ff08:	e13ffb17 	ldw	r4,-20(fp)
   1ff0c:	00206240 	call	20624 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   1ff10:	e0bffa17 	ldw	r2,-24(fp)
   1ff14:	00c00044 	movi	r3,1
   1ff18:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   1ff1c:	01400044 	movi	r5,1
   1ff20:	e13ffb17 	ldw	r4,-20(fp)
   1ff24:	00204800 	call	20480 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   1ff28:	e0bff817 	ldw	r2,-32(fp)
}
   1ff2c:	e037883a 	mov	sp,fp
   1ff30:	dfc00117 	ldw	ra,4(sp)
   1ff34:	df000017 	ldw	fp,0(sp)
   1ff38:	dec00204 	addi	sp,sp,8
   1ff3c:	f800283a 	ret

0001ff40 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   1ff40:	defff404 	addi	sp,sp,-48
   1ff44:	dfc00b15 	stw	ra,44(sp)
   1ff48:	df000a15 	stw	fp,40(sp)
   1ff4c:	df000a04 	addi	fp,sp,40
   1ff50:	e13ffb15 	stw	r4,-20(fp)
   1ff54:	e17ffc15 	stw	r5,-16(fp)
   1ff58:	e1bffd15 	stw	r6,-12(fp)
   1ff5c:	3807883a 	mov	r3,r7
   1ff60:	e0800217 	ldw	r2,8(fp)
   1ff64:	e0fffe05 	stb	r3,-8(fp)
   1ff68:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1ff6c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   1ff70:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   1ff74:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   1ff78:	e0bffd17 	ldw	r2,-12(fp)
   1ff7c:	1000021e 	bne	r2,zero,1ff88 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   1ff80:	0005883a 	mov	r2,zero
   1ff84:	00006d06 	br	2013c <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   1ff88:	e0bffe03 	ldbu	r2,-8(fp)
   1ff8c:	10000a1e 	bne	r2,zero,1ffb8 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1ff90:	e13ffb17 	ldw	r4,-20(fp)
   1ff94:	001edf00 	call	1edf0 <alt_avalon_i2c_enable>
   1ff98:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   1ff9c:	e0bff917 	ldw	r2,-28(fp)
   1ffa0:	10000226 	beq	r2,zero,1ffac <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   1ffa4:	e0bff917 	ldw	r2,-28(fp)
   1ffa8:	00006406 	br	2013c <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1ffac:	01400704 	movi	r5,28
   1ffb0:	e13ffb17 	ldw	r4,-20(fp)
   1ffb4:	00203dc0 	call	203dc <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   1ffb8:	e0bffe03 	ldbu	r2,-8(fp)
   1ffbc:	100d883a 	mov	r6,r2
   1ffc0:	01400044 	movi	r5,1
   1ffc4:	e13ffb17 	ldw	r4,-20(fp)
   1ffc8:	001f4580 	call	1f458 <alt_avalon_i2c_send_address>
   1ffcc:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   1ffd0:	e0bff917 	ldw	r2,-28(fp)
   1ffd4:	1000341e 	bne	r2,zero,200a8 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   1ffd8:	00001906 	br	20040 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   1ffdc:	000f883a 	mov	r7,zero
   1ffe0:	000d883a 	mov	r6,zero
   1ffe4:	000b883a 	mov	r5,zero
   1ffe8:	e13ffb17 	ldw	r4,-20(fp)
   1ffec:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   1fff0:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   1fff4:	e0bff817 	ldw	r2,-32(fp)
   1fff8:	10800044 	addi	r2,r2,1
   1fffc:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   20000:	e0bff917 	ldw	r2,-28(fp)
   20004:	10000e1e 	bne	r2,zero,20040 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   20008:	e0bffa04 	addi	r2,fp,-24
   2000c:	100f883a 	mov	r7,r2
   20010:	000d883a 	mov	r6,zero
   20014:	e17ffc17 	ldw	r5,-16(fp)
   20018:	e13ffb17 	ldw	r4,-20(fp)
   2001c:	001f2240 	call	1f224 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   20020:	e0bffa17 	ldw	r2,-24(fp)
   20024:	e0fffc17 	ldw	r3,-16(fp)
   20028:	1885883a 	add	r2,r3,r2
   2002c:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   20030:	e0bffa17 	ldw	r2,-24(fp)
   20034:	e0fff717 	ldw	r3,-36(fp)
   20038:	1885883a 	add	r2,r3,r2
   2003c:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20040:	e0bffd17 	ldw	r2,-12(fp)
   20044:	10bfffc4 	addi	r2,r2,-1
   20048:	e0fff817 	ldw	r3,-32(fp)
   2004c:	1880022e 	bgeu	r3,r2,20058 <alt_avalon_i2c_master_receive+0x118>
   20050:	e0bff917 	ldw	r2,-28(fp)
   20054:	103fe126 	beq	r2,zero,1ffdc <__alt_data_end+0xfc01ffdc>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20058:	e0bff917 	ldw	r2,-28(fp)
   2005c:	1000121e 	bne	r2,zero,200a8 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20060:	e0bfff03 	ldbu	r2,-4(fp)
   20064:	100f883a 	mov	r7,r2
   20068:	000d883a 	mov	r6,zero
   2006c:	000b883a 	mov	r5,zero
   20070:	e13ffb17 	ldw	r4,-20(fp)
   20074:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   20078:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2007c:	00000a06 	br	200a8 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   20080:	e17ffc17 	ldw	r5,-16(fp)
   20084:	e13ffb17 	ldw	r4,-20(fp)
   20088:	001f2cc0 	call	1f2cc <alt_avalon_i2c_rx_read>
   2008c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   20090:	e0bffc17 	ldw	r2,-16(fp)
   20094:	10800044 	addi	r2,r2,1
   20098:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   2009c:	e0bff717 	ldw	r2,-36(fp)
   200a0:	10800044 	addi	r2,r2,1
   200a4:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   200a8:	e0fff717 	ldw	r3,-36(fp)
   200ac:	e0bffd17 	ldw	r2,-12(fp)
   200b0:	1880022e 	bgeu	r3,r2,200bc <alt_avalon_i2c_master_receive+0x17c>
   200b4:	e0bff917 	ldw	r2,-28(fp)
   200b8:	103ff126 	beq	r2,zero,20080 <__alt_data_end+0xfc020080>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   200bc:	e0bfff03 	ldbu	r2,-4(fp)
   200c0:	1000021e 	bne	r2,zero,200cc <alt_avalon_i2c_master_receive+0x18c>
   200c4:	e0bff917 	ldw	r2,-28(fp)
   200c8:	10001b26 	beq	r2,zero,20138 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   200cc:	0149c404 	movi	r5,10000
   200d0:	e13ffd17 	ldw	r4,-12(fp)
   200d4:	000cca00 	call	cca0 <__mulsi3>
   200d8:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   200dc:	00000d06 	br	20114 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   200e0:	e0bff617 	ldw	r2,-40(fp)
   200e4:	108002a8 	cmpgeui	r2,r2,10
   200e8:	1000021e 	bne	r2,zero,200f4 <alt_avalon_i2c_master_receive+0x1b4>
   200ec:	0109c404 	movi	r4,10000
   200f0:	00215100 	call	21510 <alt_busy_sleep>
            if (--timeout == 0)
   200f4:	e0bff617 	ldw	r2,-40(fp)
   200f8:	10bfffc4 	addi	r2,r2,-1
   200fc:	e0bff615 	stw	r2,-40(fp)
   20100:	e0bff617 	ldw	r2,-40(fp)
   20104:	1000031e 	bne	r2,zero,20114 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20108:	00bfff84 	movi	r2,-2
   2010c:	e0bff915 	stw	r2,-28(fp)
               break;
   20110:	00000306 	br	20120 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20114:	e13ffb17 	ldw	r4,-20(fp)
   20118:	001f1e00 	call	1f1e0 <alt_avalon_i2c_is_busy>
   2011c:	103ff01e 	bne	r2,zero,200e0 <__alt_data_end+0xfc0200e0>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   20120:	e0bff904 	addi	r2,fp,-28
   20124:	100b883a 	mov	r5,r2
   20128:	e13ffb17 	ldw	r4,-20(fp)
   2012c:	001f5b40 	call	1f5b4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20130:	e13ffb17 	ldw	r4,-20(fp)
   20134:	001ee880 	call	1ee88 <alt_avalon_i2c_disable>
    }

    return status;
   20138:	e0bff917 	ldw	r2,-28(fp)
}
   2013c:	e037883a 	mov	sp,fp
   20140:	dfc00117 	ldw	ra,4(sp)
   20144:	df000017 	ldw	fp,0(sp)
   20148:	dec00204 	addi	sp,sp,8
   2014c:	f800283a 	ret

00020150 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   20150:	defff504 	addi	sp,sp,-44
   20154:	dfc00a15 	stw	ra,40(sp)
   20158:	df000915 	stw	fp,36(sp)
   2015c:	df000904 	addi	fp,sp,36
   20160:	e13ffb15 	stw	r4,-20(fp)
   20164:	e17ffc15 	stw	r5,-16(fp)
   20168:	e1bffd15 	stw	r6,-12(fp)
   2016c:	3807883a 	mov	r3,r7
   20170:	e0800217 	ldw	r2,8(fp)
   20174:	e0fffe05 	stb	r3,-8(fp)
   20178:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2017c:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   20180:	e0bffb17 	ldw	r2,-20(fp)
   20184:	10800717 	ldw	r2,28(r2)
   20188:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   2018c:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   20190:	e0bffd17 	ldw	r2,-12(fp)
   20194:	1000021e 	bne	r2,zero,201a0 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20198:	0005883a 	mov	r2,zero
   2019c:	00006306 	br	2032c <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   201a0:	e0bffb17 	ldw	r2,-20(fp)
   201a4:	10c00617 	ldw	r3,24(r2)
   201a8:	008000b4 	movhi	r2,2
   201ac:	10ba9d04 	addi	r2,r2,-5516
   201b0:	18800226 	beq	r3,r2,201bc <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   201b4:	00bfff44 	movi	r2,-3
   201b8:	00005c06 	br	2032c <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   201bc:	e0bffe03 	ldbu	r2,-8(fp)
   201c0:	10000a1e 	bne	r2,zero,201ec <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   201c4:	e13ffb17 	ldw	r4,-20(fp)
   201c8:	001edf00 	call	1edf0 <alt_avalon_i2c_enable>
   201cc:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   201d0:	e0bff717 	ldw	r2,-36(fp)
   201d4:	10000226 	beq	r2,zero,201e0 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   201d8:	e0bff717 	ldw	r2,-36(fp)
   201dc:	00005306 	br	2032c <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   201e0:	01400704 	movi	r5,28
   201e4:	e13ffb17 	ldw	r4,-20(fp)
   201e8:	00203dc0 	call	203dc <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   201ec:	e0bffe03 	ldbu	r2,-8(fp)
   201f0:	100d883a 	mov	r6,r2
   201f4:	01400044 	movi	r5,1
   201f8:	e13ffb17 	ldw	r4,-20(fp)
   201fc:	001f4580 	call	1f458 <alt_avalon_i2c_send_address>
   20200:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   20204:	e0bff717 	ldw	r2,-36(fp)
   20208:	1000191e 	bne	r2,zero,20270 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2020c:	00000906 	br	20234 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20210:	000f883a 	mov	r7,zero
   20214:	000d883a 	mov	r6,zero
   20218:	000b883a 	mov	r5,zero
   2021c:	e13ffb17 	ldw	r4,-20(fp)
   20220:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   20224:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   20228:	e0bff917 	ldw	r2,-28(fp)
   2022c:	10800044 	addi	r2,r2,1
   20230:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20234:	e0bffd17 	ldw	r2,-12(fp)
   20238:	10bfffc4 	addi	r2,r2,-1
   2023c:	e0fff917 	ldw	r3,-28(fp)
   20240:	1880022e 	bgeu	r3,r2,2024c <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   20244:	e0bff717 	ldw	r2,-36(fp)
   20248:	103ff126 	beq	r2,zero,20210 <__alt_data_end+0xfc020210>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2024c:	e0bff717 	ldw	r2,-36(fp)
   20250:	1000071e 	bne	r2,zero,20270 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20254:	e0bfff03 	ldbu	r2,-4(fp)
   20258:	100f883a 	mov	r7,r2
   2025c:	000d883a 	mov	r6,zero
   20260:	000b883a 	mov	r5,zero
   20264:	e13ffb17 	ldw	r4,-20(fp)
   20268:	001f3740 	call	1f374 <alt_avalon_i2c_cmd_write>
   2026c:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   20270:	e0bff717 	ldw	r2,-36(fp)
   20274:	10001826 	beq	r2,zero,202d8 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   20278:	0149c404 	movi	r5,10000
   2027c:	e13ffd17 	ldw	r4,-12(fp)
   20280:	000cca00 	call	cca0 <__mulsi3>
   20284:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20288:	00000d06 	br	202c0 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2028c:	e0bff817 	ldw	r2,-32(fp)
   20290:	108002a8 	cmpgeui	r2,r2,10
   20294:	1000021e 	bne	r2,zero,202a0 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   20298:	0109c404 	movi	r4,10000
   2029c:	00215100 	call	21510 <alt_busy_sleep>
            if (--timeout == 0)
   202a0:	e0bff817 	ldw	r2,-32(fp)
   202a4:	10bfffc4 	addi	r2,r2,-1
   202a8:	e0bff815 	stw	r2,-32(fp)
   202ac:	e0bff817 	ldw	r2,-32(fp)
   202b0:	1000031e 	bne	r2,zero,202c0 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   202b4:	00bfff84 	movi	r2,-2
   202b8:	e0bff715 	stw	r2,-36(fp)
               break;
   202bc:	00000306 	br	202cc <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   202c0:	e13ffb17 	ldw	r4,-20(fp)
   202c4:	001f1e00 	call	1f1e0 <alt_avalon_i2c_is_busy>
   202c8:	103ff01e 	bne	r2,zero,2028c <__alt_data_end+0xfc02028c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   202cc:	e13ffb17 	ldw	r4,-20(fp)
   202d0:	001ee880 	call	1ee88 <alt_avalon_i2c_disable>
   202d4:	00001406 	br	20328 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   202d8:	e0bfff03 	ldbu	r2,-4(fp)
   202dc:	10001226 	beq	r2,zero,20328 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   202e0:	01400704 	movi	r5,28
   202e4:	e13ffb17 	ldw	r4,-20(fp)
   202e8:	00203dc0 	call	203dc <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   202ec:	000b883a 	mov	r5,zero
   202f0:	e13ffb17 	ldw	r4,-20(fp)
   202f4:	00205740 	call	20574 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   202f8:	e0bffa17 	ldw	r2,-24(fp)
   202fc:	00c00084 	movi	r3,2
   20300:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   20304:	e0bffa17 	ldw	r2,-24(fp)
   20308:	e0fffc17 	ldw	r3,-16(fp)
   2030c:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   20310:	e0bffa17 	ldw	r2,-24(fp)
   20314:	e0fffd17 	ldw	r3,-12(fp)
   20318:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   2031c:	01400084 	movi	r5,2
   20320:	e13ffb17 	ldw	r4,-20(fp)
   20324:	00204800 	call	20480 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   20328:	e0bff717 	ldw	r2,-36(fp)
}
   2032c:	e037883a 	mov	sp,fp
   20330:	dfc00117 	ldw	ra,4(sp)
   20334:	df000017 	ldw	fp,0(sp)
   20338:	dec00204 	addi	sp,sp,8
   2033c:	f800283a 	ret

00020340 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   20340:	defffd04 	addi	sp,sp,-12
   20344:	df000215 	stw	fp,8(sp)
   20348:	df000204 	addi	fp,sp,8
   2034c:	e13ffe15 	stw	r4,-8(fp)
   20350:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   20354:	e0bffe17 	ldw	r2,-8(fp)
   20358:	10800317 	ldw	r2,12(r2)
   2035c:	10800404 	addi	r2,r2,16
   20360:	10c00037 	ldwio	r3,0(r2)
   20364:	e0bffe17 	ldw	r2,-8(fp)
   20368:	10800317 	ldw	r2,12(r2)
   2036c:	10800304 	addi	r2,r2,12
   20370:	10800037 	ldwio	r2,0(r2)
   20374:	1884703a 	and	r2,r3,r2
   20378:	1007883a 	mov	r3,r2
   2037c:	e0bfff17 	ldw	r2,-4(fp)
   20380:	10c00015 	stw	r3,0(r2)
}
   20384:	0001883a 	nop
   20388:	e037883a 	mov	sp,fp
   2038c:	df000017 	ldw	fp,0(sp)
   20390:	dec00104 	addi	sp,sp,4
   20394:	f800283a 	ret

00020398 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   20398:	defffd04 	addi	sp,sp,-12
   2039c:	df000215 	stw	fp,8(sp)
   203a0:	df000204 	addi	fp,sp,8
   203a4:	e13ffe15 	stw	r4,-8(fp)
   203a8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   203ac:	e0bffe17 	ldw	r2,-8(fp)
   203b0:	10800317 	ldw	r2,12(r2)
   203b4:	10800404 	addi	r2,r2,16
   203b8:	10800037 	ldwio	r2,0(r2)
   203bc:	1007883a 	mov	r3,r2
   203c0:	e0bfff17 	ldw	r2,-4(fp)
   203c4:	10c00015 	stw	r3,0(r2)
}
   203c8:	0001883a 	nop
   203cc:	e037883a 	mov	sp,fp
   203d0:	df000017 	ldw	fp,0(sp)
   203d4:	dec00104 	addi	sp,sp,4
   203d8:	f800283a 	ret

000203dc <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   203dc:	defffd04 	addi	sp,sp,-12
   203e0:	df000215 	stw	fp,8(sp)
   203e4:	df000204 	addi	fp,sp,8
   203e8:	e13ffe15 	stw	r4,-8(fp)
   203ec:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   203f0:	e0bffe17 	ldw	r2,-8(fp)
   203f4:	10800317 	ldw	r2,12(r2)
   203f8:	10800404 	addi	r2,r2,16
   203fc:	e0ffff17 	ldw	r3,-4(fp)
   20400:	10c00035 	stwio	r3,0(r2)
}
   20404:	0001883a 	nop
   20408:	e037883a 	mov	sp,fp
   2040c:	df000017 	ldw	fp,0(sp)
   20410:	dec00104 	addi	sp,sp,4
   20414:	f800283a 	ret

00020418 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   20418:	defffb04 	addi	sp,sp,-20
   2041c:	dfc00415 	stw	ra,16(sp)
   20420:	df000315 	stw	fp,12(sp)
   20424:	df000304 	addi	fp,sp,12
   20428:	e13ffe15 	stw	r4,-8(fp)
   2042c:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   20430:	e17ffd04 	addi	r5,fp,-12
   20434:	e13ffe17 	ldw	r4,-8(fp)
   20438:	00204e40 	call	204e4 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   2043c:	e0bfff17 	ldw	r2,-4(fp)
   20440:	0086303a 	nor	r3,zero,r2
   20444:	e0bffd17 	ldw	r2,-12(fp)
   20448:	1884703a 	and	r2,r3,r2
   2044c:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   20450:	e0bffe17 	ldw	r2,-8(fp)
   20454:	10800317 	ldw	r2,12(r2)
   20458:	10800304 	addi	r2,r2,12
   2045c:	e0fffd17 	ldw	r3,-12(fp)
   20460:	18c007cc 	andi	r3,r3,31
   20464:	10c00035 	stwio	r3,0(r2)
}
   20468:	0001883a 	nop
   2046c:	e037883a 	mov	sp,fp
   20470:	dfc00117 	ldw	ra,4(sp)
   20474:	df000017 	ldw	fp,0(sp)
   20478:	dec00204 	addi	sp,sp,8
   2047c:	f800283a 	ret

00020480 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   20480:	defffb04 	addi	sp,sp,-20
   20484:	dfc00415 	stw	ra,16(sp)
   20488:	df000315 	stw	fp,12(sp)
   2048c:	df000304 	addi	fp,sp,12
   20490:	e13ffe15 	stw	r4,-8(fp)
   20494:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   20498:	e17ffd04 	addi	r5,fp,-12
   2049c:	e13ffe17 	ldw	r4,-8(fp)
   204a0:	00204e40 	call	204e4 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   204a4:	e0fffd17 	ldw	r3,-12(fp)
   204a8:	e0bfff17 	ldw	r2,-4(fp)
   204ac:	1884b03a 	or	r2,r3,r2
   204b0:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   204b4:	e0bffe17 	ldw	r2,-8(fp)
   204b8:	10800317 	ldw	r2,12(r2)
   204bc:	10800304 	addi	r2,r2,12
   204c0:	e0fffd17 	ldw	r3,-12(fp)
   204c4:	18c007cc 	andi	r3,r3,31
   204c8:	10c00035 	stwio	r3,0(r2)
}
   204cc:	0001883a 	nop
   204d0:	e037883a 	mov	sp,fp
   204d4:	dfc00117 	ldw	ra,4(sp)
   204d8:	df000017 	ldw	fp,0(sp)
   204dc:	dec00204 	addi	sp,sp,8
   204e0:	f800283a 	ret

000204e4 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   204e4:	defffd04 	addi	sp,sp,-12
   204e8:	df000215 	stw	fp,8(sp)
   204ec:	df000204 	addi	fp,sp,8
   204f0:	e13ffe15 	stw	r4,-8(fp)
   204f4:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   204f8:	e0bffe17 	ldw	r2,-8(fp)
   204fc:	10800317 	ldw	r2,12(r2)
   20500:	10800304 	addi	r2,r2,12
   20504:	10800037 	ldwio	r2,0(r2)
   20508:	10c007cc 	andi	r3,r2,31
   2050c:	e0bfff17 	ldw	r2,-4(fp)
   20510:	10c00015 	stw	r3,0(r2)
}
   20514:	0001883a 	nop
   20518:	e037883a 	mov	sp,fp
   2051c:	df000017 	ldw	fp,0(sp)
   20520:	dec00104 	addi	sp,sp,4
   20524:	f800283a 	ret

00020528 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   20528:	defffd04 	addi	sp,sp,-12
   2052c:	df000215 	stw	fp,8(sp)
   20530:	df000204 	addi	fp,sp,8
   20534:	e13ffe15 	stw	r4,-8(fp)
   20538:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   2053c:	e0bffe17 	ldw	r2,-8(fp)
   20540:	10800317 	ldw	r2,12(r2)
   20544:	10800204 	addi	r2,r2,8
   20548:	10800037 	ldwio	r2,0(r2)
   2054c:	10800c0c 	andi	r2,r2,48
   20550:	1005d13a 	srai	r2,r2,4
   20554:	1007883a 	mov	r3,r2
   20558:	e0bfff17 	ldw	r2,-4(fp)
   2055c:	10c00015 	stw	r3,0(r2)
}
   20560:	0001883a 	nop
   20564:	e037883a 	mov	sp,fp
   20568:	df000017 	ldw	fp,0(sp)
   2056c:	dec00104 	addi	sp,sp,4
   20570:	f800283a 	ret

00020574 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   20574:	defffd04 	addi	sp,sp,-12
   20578:	df000215 	stw	fp,8(sp)
   2057c:	df000204 	addi	fp,sp,8
   20580:	e13ffe15 	stw	r4,-8(fp)
   20584:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   20588:	e0bffe17 	ldw	r2,-8(fp)
   2058c:	10800317 	ldw	r2,12(r2)
   20590:	10800204 	addi	r2,r2,8
   20594:	e0fffe17 	ldw	r3,-8(fp)
   20598:	18c00317 	ldw	r3,12(r3)
   2059c:	18c00204 	addi	r3,r3,8
   205a0:	18c00037 	ldwio	r3,0(r3)
   205a4:	1809883a 	mov	r4,r3
   205a8:	00fff3c4 	movi	r3,-49
   205ac:	20c8703a 	and	r4,r4,r3
   205b0:	e0ffff17 	ldw	r3,-4(fp)
   205b4:	1806913a 	slli	r3,r3,4
   205b8:	18c00c0c 	andi	r3,r3,48
   205bc:	20c6b03a 	or	r3,r4,r3
   205c0:	10c00035 	stwio	r3,0(r2)
}
   205c4:	0001883a 	nop
   205c8:	e037883a 	mov	sp,fp
   205cc:	df000017 	ldw	fp,0(sp)
   205d0:	dec00104 	addi	sp,sp,4
   205d4:	f800283a 	ret

000205d8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   205d8:	defffd04 	addi	sp,sp,-12
   205dc:	df000215 	stw	fp,8(sp)
   205e0:	df000204 	addi	fp,sp,8
   205e4:	e13ffe15 	stw	r4,-8(fp)
   205e8:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   205ec:	e0bffe17 	ldw	r2,-8(fp)
   205f0:	10800317 	ldw	r2,12(r2)
   205f4:	10800204 	addi	r2,r2,8
   205f8:	10800037 	ldwio	r2,0(r2)
   205fc:	1080030c 	andi	r2,r2,12
   20600:	1005d0ba 	srai	r2,r2,2
   20604:	1007883a 	mov	r3,r2
   20608:	e0bfff17 	ldw	r2,-4(fp)
   2060c:	10c00015 	stw	r3,0(r2)
}
   20610:	0001883a 	nop
   20614:	e037883a 	mov	sp,fp
   20618:	df000017 	ldw	fp,0(sp)
   2061c:	dec00104 	addi	sp,sp,4
   20620:	f800283a 	ret

00020624 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   20624:	defffd04 	addi	sp,sp,-12
   20628:	df000215 	stw	fp,8(sp)
   2062c:	df000204 	addi	fp,sp,8
   20630:	e13ffe15 	stw	r4,-8(fp)
   20634:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   20638:	e0bffe17 	ldw	r2,-8(fp)
   2063c:	10800317 	ldw	r2,12(r2)
   20640:	10c00204 	addi	r3,r2,8
   20644:	e0bffe17 	ldw	r2,-8(fp)
   20648:	10800317 	ldw	r2,12(r2)
   2064c:	10800204 	addi	r2,r2,8
   20650:	10800037 	ldwio	r2,0(r2)
   20654:	1009883a 	mov	r4,r2
   20658:	00bffcc4 	movi	r2,-13
   2065c:	2088703a 	and	r4,r4,r2
   20660:	e0bfff17 	ldw	r2,-4(fp)
   20664:	1085883a 	add	r2,r2,r2
   20668:	1085883a 	add	r2,r2,r2
   2066c:	1080030c 	andi	r2,r2,12
   20670:	2084b03a 	or	r2,r4,r2
   20674:	18800035 	stwio	r2,0(r3)
}
   20678:	0001883a 	nop
   2067c:	e037883a 	mov	sp,fp
   20680:	df000017 	ldw	fp,0(sp)
   20684:	dec00104 	addi	sp,sp,4
   20688:	f800283a 	ret

0002068c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2068c:	defffa04 	addi	sp,sp,-24
   20690:	dfc00515 	stw	ra,20(sp)
   20694:	df000415 	stw	fp,16(sp)
   20698:	df000404 	addi	fp,sp,16
   2069c:	e13ffd15 	stw	r4,-12(fp)
   206a0:	e17ffe15 	stw	r5,-8(fp)
   206a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   206a8:	e0bffd17 	ldw	r2,-12(fp)
   206ac:	10800017 	ldw	r2,0(r2)
   206b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   206b4:	e0bffc17 	ldw	r2,-16(fp)
   206b8:	10c00a04 	addi	r3,r2,40
   206bc:	e0bffd17 	ldw	r2,-12(fp)
   206c0:	10800217 	ldw	r2,8(r2)
   206c4:	100f883a 	mov	r7,r2
   206c8:	e1bfff17 	ldw	r6,-4(fp)
   206cc:	e17ffe17 	ldw	r5,-8(fp)
   206d0:	1809883a 	mov	r4,r3
   206d4:	0020cb40 	call	20cb4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   206d8:	e037883a 	mov	sp,fp
   206dc:	dfc00117 	ldw	ra,4(sp)
   206e0:	df000017 	ldw	fp,0(sp)
   206e4:	dec00204 	addi	sp,sp,8
   206e8:	f800283a 	ret

000206ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   206ec:	defffa04 	addi	sp,sp,-24
   206f0:	dfc00515 	stw	ra,20(sp)
   206f4:	df000415 	stw	fp,16(sp)
   206f8:	df000404 	addi	fp,sp,16
   206fc:	e13ffd15 	stw	r4,-12(fp)
   20700:	e17ffe15 	stw	r5,-8(fp)
   20704:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20708:	e0bffd17 	ldw	r2,-12(fp)
   2070c:	10800017 	ldw	r2,0(r2)
   20710:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   20714:	e0bffc17 	ldw	r2,-16(fp)
   20718:	10c00a04 	addi	r3,r2,40
   2071c:	e0bffd17 	ldw	r2,-12(fp)
   20720:	10800217 	ldw	r2,8(r2)
   20724:	100f883a 	mov	r7,r2
   20728:	e1bfff17 	ldw	r6,-4(fp)
   2072c:	e17ffe17 	ldw	r5,-8(fp)
   20730:	1809883a 	mov	r4,r3
   20734:	0020ed00 	call	20ed0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   20738:	e037883a 	mov	sp,fp
   2073c:	dfc00117 	ldw	ra,4(sp)
   20740:	df000017 	ldw	fp,0(sp)
   20744:	dec00204 	addi	sp,sp,8
   20748:	f800283a 	ret

0002074c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2074c:	defffc04 	addi	sp,sp,-16
   20750:	dfc00315 	stw	ra,12(sp)
   20754:	df000215 	stw	fp,8(sp)
   20758:	df000204 	addi	fp,sp,8
   2075c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20760:	e0bfff17 	ldw	r2,-4(fp)
   20764:	10800017 	ldw	r2,0(r2)
   20768:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2076c:	e0bffe17 	ldw	r2,-8(fp)
   20770:	10c00a04 	addi	r3,r2,40
   20774:	e0bfff17 	ldw	r2,-4(fp)
   20778:	10800217 	ldw	r2,8(r2)
   2077c:	100b883a 	mov	r5,r2
   20780:	1809883a 	mov	r4,r3
   20784:	0020b5c0 	call	20b5c <altera_avalon_jtag_uart_close>
}
   20788:	e037883a 	mov	sp,fp
   2078c:	dfc00117 	ldw	ra,4(sp)
   20790:	df000017 	ldw	fp,0(sp)
   20794:	dec00204 	addi	sp,sp,8
   20798:	f800283a 	ret

0002079c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2079c:	defffa04 	addi	sp,sp,-24
   207a0:	dfc00515 	stw	ra,20(sp)
   207a4:	df000415 	stw	fp,16(sp)
   207a8:	df000404 	addi	fp,sp,16
   207ac:	e13ffd15 	stw	r4,-12(fp)
   207b0:	e17ffe15 	stw	r5,-8(fp)
   207b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   207b8:	e0bffd17 	ldw	r2,-12(fp)
   207bc:	10800017 	ldw	r2,0(r2)
   207c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   207c4:	e0bffc17 	ldw	r2,-16(fp)
   207c8:	10800a04 	addi	r2,r2,40
   207cc:	e1bfff17 	ldw	r6,-4(fp)
   207d0:	e17ffe17 	ldw	r5,-8(fp)
   207d4:	1009883a 	mov	r4,r2
   207d8:	0020bc40 	call	20bc4 <altera_avalon_jtag_uart_ioctl>
}
   207dc:	e037883a 	mov	sp,fp
   207e0:	dfc00117 	ldw	ra,4(sp)
   207e4:	df000017 	ldw	fp,0(sp)
   207e8:	dec00204 	addi	sp,sp,8
   207ec:	f800283a 	ret

000207f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   207f0:	defffa04 	addi	sp,sp,-24
   207f4:	dfc00515 	stw	ra,20(sp)
   207f8:	df000415 	stw	fp,16(sp)
   207fc:	df000404 	addi	fp,sp,16
   20800:	e13ffd15 	stw	r4,-12(fp)
   20804:	e17ffe15 	stw	r5,-8(fp)
   20808:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2080c:	e0bffd17 	ldw	r2,-12(fp)
   20810:	00c00044 	movi	r3,1
   20814:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   20818:	e0bffd17 	ldw	r2,-12(fp)
   2081c:	10800017 	ldw	r2,0(r2)
   20820:	10800104 	addi	r2,r2,4
   20824:	1007883a 	mov	r3,r2
   20828:	e0bffd17 	ldw	r2,-12(fp)
   2082c:	10800817 	ldw	r2,32(r2)
   20830:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   20834:	e0bffe17 	ldw	r2,-8(fp)
   20838:	e0ffff17 	ldw	r3,-4(fp)
   2083c:	d8000015 	stw	zero,0(sp)
   20840:	e1fffd17 	ldw	r7,-12(fp)
   20844:	018000b4 	movhi	r6,2
   20848:	31822c04 	addi	r6,r6,2224
   2084c:	180b883a 	mov	r5,r3
   20850:	1009883a 	mov	r4,r2
   20854:	00218d80 	call	218d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   20858:	e0bffd17 	ldw	r2,-12(fp)
   2085c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   20860:	e0bffd17 	ldw	r2,-12(fp)
   20864:	10800204 	addi	r2,r2,8
   20868:	d0f24717 	ldw	r3,-14052(gp)
   2086c:	e1fffd17 	ldw	r7,-12(fp)
   20870:	018000b4 	movhi	r6,2
   20874:	3182af04 	addi	r6,r6,2748
   20878:	180b883a 	mov	r5,r3
   2087c:	1009883a 	mov	r4,r2
   20880:	00213e40 	call	213e4 <alt_alarm_start>
   20884:	1000040e 	bge	r2,zero,20898 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   20888:	e0fffd17 	ldw	r3,-12(fp)
   2088c:	00a00034 	movhi	r2,32768
   20890:	10bfffc4 	addi	r2,r2,-1
   20894:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   20898:	0001883a 	nop
   2089c:	e037883a 	mov	sp,fp
   208a0:	dfc00117 	ldw	ra,4(sp)
   208a4:	df000017 	ldw	fp,0(sp)
   208a8:	dec00204 	addi	sp,sp,8
   208ac:	f800283a 	ret

000208b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   208b0:	defff804 	addi	sp,sp,-32
   208b4:	df000715 	stw	fp,28(sp)
   208b8:	df000704 	addi	fp,sp,28
   208bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   208c0:	e0bfff17 	ldw	r2,-4(fp)
   208c4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   208c8:	e0bffb17 	ldw	r2,-20(fp)
   208cc:	10800017 	ldw	r2,0(r2)
   208d0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   208d4:	e0bffc17 	ldw	r2,-16(fp)
   208d8:	10800104 	addi	r2,r2,4
   208dc:	10800037 	ldwio	r2,0(r2)
   208e0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   208e4:	e0bffd17 	ldw	r2,-12(fp)
   208e8:	1080c00c 	andi	r2,r2,768
   208ec:	10006d26 	beq	r2,zero,20aa4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   208f0:	e0bffd17 	ldw	r2,-12(fp)
   208f4:	1080400c 	andi	r2,r2,256
   208f8:	10003526 	beq	r2,zero,209d0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   208fc:	00800074 	movhi	r2,1
   20900:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20904:	e0bffb17 	ldw	r2,-20(fp)
   20908:	10800a17 	ldw	r2,40(r2)
   2090c:	10800044 	addi	r2,r2,1
   20910:	1081ffcc 	andi	r2,r2,2047
   20914:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   20918:	e0bffb17 	ldw	r2,-20(fp)
   2091c:	10c00b17 	ldw	r3,44(r2)
   20920:	e0bffe17 	ldw	r2,-8(fp)
   20924:	18801526 	beq	r3,r2,2097c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   20928:	e0bffc17 	ldw	r2,-16(fp)
   2092c:	10800037 	ldwio	r2,0(r2)
   20930:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   20934:	e0bff917 	ldw	r2,-28(fp)
   20938:	10a0000c 	andi	r2,r2,32768
   2093c:	10001126 	beq	r2,zero,20984 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   20940:	e0bffb17 	ldw	r2,-20(fp)
   20944:	10800a17 	ldw	r2,40(r2)
   20948:	e0fff917 	ldw	r3,-28(fp)
   2094c:	1809883a 	mov	r4,r3
   20950:	e0fffb17 	ldw	r3,-20(fp)
   20954:	1885883a 	add	r2,r3,r2
   20958:	10800e04 	addi	r2,r2,56
   2095c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20960:	e0bffb17 	ldw	r2,-20(fp)
   20964:	10800a17 	ldw	r2,40(r2)
   20968:	10800044 	addi	r2,r2,1
   2096c:	10c1ffcc 	andi	r3,r2,2047
   20970:	e0bffb17 	ldw	r2,-20(fp)
   20974:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   20978:	003fe206 	br	20904 <__alt_data_end+0xfc020904>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2097c:	0001883a 	nop
   20980:	00000106 	br	20988 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   20984:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   20988:	e0bff917 	ldw	r2,-28(fp)
   2098c:	10bfffec 	andhi	r2,r2,65535
   20990:	10000f26 	beq	r2,zero,209d0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20994:	e0bffb17 	ldw	r2,-20(fp)
   20998:	10c00817 	ldw	r3,32(r2)
   2099c:	00bfff84 	movi	r2,-2
   209a0:	1886703a 	and	r3,r3,r2
   209a4:	e0bffb17 	ldw	r2,-20(fp)
   209a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   209ac:	e0bffc17 	ldw	r2,-16(fp)
   209b0:	10800104 	addi	r2,r2,4
   209b4:	1007883a 	mov	r3,r2
   209b8:	e0bffb17 	ldw	r2,-20(fp)
   209bc:	10800817 	ldw	r2,32(r2)
   209c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   209c4:	e0bffc17 	ldw	r2,-16(fp)
   209c8:	10800104 	addi	r2,r2,4
   209cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   209d0:	e0bffd17 	ldw	r2,-12(fp)
   209d4:	1080800c 	andi	r2,r2,512
   209d8:	103fbe26 	beq	r2,zero,208d4 <__alt_data_end+0xfc0208d4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   209dc:	e0bffd17 	ldw	r2,-12(fp)
   209e0:	1004d43a 	srli	r2,r2,16
   209e4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   209e8:	00001406 	br	20a3c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   209ec:	e0bffc17 	ldw	r2,-16(fp)
   209f0:	e0fffb17 	ldw	r3,-20(fp)
   209f4:	18c00d17 	ldw	r3,52(r3)
   209f8:	e13ffb17 	ldw	r4,-20(fp)
   209fc:	20c7883a 	add	r3,r4,r3
   20a00:	18c20e04 	addi	r3,r3,2104
   20a04:	18c00003 	ldbu	r3,0(r3)
   20a08:	18c03fcc 	andi	r3,r3,255
   20a0c:	18c0201c 	xori	r3,r3,128
   20a10:	18ffe004 	addi	r3,r3,-128
   20a14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20a18:	e0bffb17 	ldw	r2,-20(fp)
   20a1c:	10800d17 	ldw	r2,52(r2)
   20a20:	10800044 	addi	r2,r2,1
   20a24:	10c1ffcc 	andi	r3,r2,2047
   20a28:	e0bffb17 	ldw	r2,-20(fp)
   20a2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   20a30:	e0bffa17 	ldw	r2,-24(fp)
   20a34:	10bfffc4 	addi	r2,r2,-1
   20a38:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   20a3c:	e0bffa17 	ldw	r2,-24(fp)
   20a40:	10000526 	beq	r2,zero,20a58 <altera_avalon_jtag_uart_irq+0x1a8>
   20a44:	e0bffb17 	ldw	r2,-20(fp)
   20a48:	10c00d17 	ldw	r3,52(r2)
   20a4c:	e0bffb17 	ldw	r2,-20(fp)
   20a50:	10800c17 	ldw	r2,48(r2)
   20a54:	18bfe51e 	bne	r3,r2,209ec <__alt_data_end+0xfc0209ec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   20a58:	e0bffa17 	ldw	r2,-24(fp)
   20a5c:	103f9d26 	beq	r2,zero,208d4 <__alt_data_end+0xfc0208d4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20a60:	e0bffb17 	ldw	r2,-20(fp)
   20a64:	10c00817 	ldw	r3,32(r2)
   20a68:	00bfff44 	movi	r2,-3
   20a6c:	1886703a 	and	r3,r3,r2
   20a70:	e0bffb17 	ldw	r2,-20(fp)
   20a74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20a78:	e0bffb17 	ldw	r2,-20(fp)
   20a7c:	10800017 	ldw	r2,0(r2)
   20a80:	10800104 	addi	r2,r2,4
   20a84:	1007883a 	mov	r3,r2
   20a88:	e0bffb17 	ldw	r2,-20(fp)
   20a8c:	10800817 	ldw	r2,32(r2)
   20a90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20a94:	e0bffc17 	ldw	r2,-16(fp)
   20a98:	10800104 	addi	r2,r2,4
   20a9c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   20aa0:	003f8c06 	br	208d4 <__alt_data_end+0xfc0208d4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   20aa4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   20aa8:	0001883a 	nop
   20aac:	e037883a 	mov	sp,fp
   20ab0:	df000017 	ldw	fp,0(sp)
   20ab4:	dec00104 	addi	sp,sp,4
   20ab8:	f800283a 	ret

00020abc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   20abc:	defff804 	addi	sp,sp,-32
   20ac0:	df000715 	stw	fp,28(sp)
   20ac4:	df000704 	addi	fp,sp,28
   20ac8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   20acc:	e0bffb17 	ldw	r2,-20(fp)
   20ad0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   20ad4:	e0bff917 	ldw	r2,-28(fp)
   20ad8:	10800017 	ldw	r2,0(r2)
   20adc:	10800104 	addi	r2,r2,4
   20ae0:	10800037 	ldwio	r2,0(r2)
   20ae4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   20ae8:	e0bffa17 	ldw	r2,-24(fp)
   20aec:	1081000c 	andi	r2,r2,1024
   20af0:	10000b26 	beq	r2,zero,20b20 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   20af4:	e0bff917 	ldw	r2,-28(fp)
   20af8:	10800017 	ldw	r2,0(r2)
   20afc:	10800104 	addi	r2,r2,4
   20b00:	1007883a 	mov	r3,r2
   20b04:	e0bff917 	ldw	r2,-28(fp)
   20b08:	10800817 	ldw	r2,32(r2)
   20b0c:	10810014 	ori	r2,r2,1024
   20b10:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   20b14:	e0bff917 	ldw	r2,-28(fp)
   20b18:	10000915 	stw	zero,36(r2)
   20b1c:	00000a06 	br	20b48 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   20b20:	e0bff917 	ldw	r2,-28(fp)
   20b24:	10c00917 	ldw	r3,36(r2)
   20b28:	00a00034 	movhi	r2,32768
   20b2c:	10bfff04 	addi	r2,r2,-4
   20b30:	10c00536 	bltu	r2,r3,20b48 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   20b34:	e0bff917 	ldw	r2,-28(fp)
   20b38:	10800917 	ldw	r2,36(r2)
   20b3c:	10c00044 	addi	r3,r2,1
   20b40:	e0bff917 	ldw	r2,-28(fp)
   20b44:	10c00915 	stw	r3,36(r2)
   20b48:	d0b24717 	ldw	r2,-14052(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   20b4c:	e037883a 	mov	sp,fp
   20b50:	df000017 	ldw	fp,0(sp)
   20b54:	dec00104 	addi	sp,sp,4
   20b58:	f800283a 	ret

00020b5c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   20b5c:	defffd04 	addi	sp,sp,-12
   20b60:	df000215 	stw	fp,8(sp)
   20b64:	df000204 	addi	fp,sp,8
   20b68:	e13ffe15 	stw	r4,-8(fp)
   20b6c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20b70:	00000506 	br	20b88 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   20b74:	e0bfff17 	ldw	r2,-4(fp)
   20b78:	1090000c 	andi	r2,r2,16384
   20b7c:	10000226 	beq	r2,zero,20b88 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   20b80:	00bffd44 	movi	r2,-11
   20b84:	00000b06 	br	20bb4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20b88:	e0bffe17 	ldw	r2,-8(fp)
   20b8c:	10c00d17 	ldw	r3,52(r2)
   20b90:	e0bffe17 	ldw	r2,-8(fp)
   20b94:	10800c17 	ldw	r2,48(r2)
   20b98:	18800526 	beq	r3,r2,20bb0 <altera_avalon_jtag_uart_close+0x54>
   20b9c:	e0bffe17 	ldw	r2,-8(fp)
   20ba0:	10c00917 	ldw	r3,36(r2)
   20ba4:	e0bffe17 	ldw	r2,-8(fp)
   20ba8:	10800117 	ldw	r2,4(r2)
   20bac:	18bff136 	bltu	r3,r2,20b74 <__alt_data_end+0xfc020b74>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   20bb0:	0005883a 	mov	r2,zero
}
   20bb4:	e037883a 	mov	sp,fp
   20bb8:	df000017 	ldw	fp,0(sp)
   20bbc:	dec00104 	addi	sp,sp,4
   20bc0:	f800283a 	ret

00020bc4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   20bc4:	defffa04 	addi	sp,sp,-24
   20bc8:	df000515 	stw	fp,20(sp)
   20bcc:	df000504 	addi	fp,sp,20
   20bd0:	e13ffd15 	stw	r4,-12(fp)
   20bd4:	e17ffe15 	stw	r5,-8(fp)
   20bd8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   20bdc:	00bff9c4 	movi	r2,-25
   20be0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   20be4:	e0bffe17 	ldw	r2,-8(fp)
   20be8:	10da8060 	cmpeqi	r3,r2,27137
   20bec:	1800031e 	bne	r3,zero,20bfc <altera_avalon_jtag_uart_ioctl+0x38>
   20bf0:	109a80a0 	cmpeqi	r2,r2,27138
   20bf4:	1000181e 	bne	r2,zero,20c58 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   20bf8:	00002906 	br	20ca0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   20bfc:	e0bffd17 	ldw	r2,-12(fp)
   20c00:	10c00117 	ldw	r3,4(r2)
   20c04:	00a00034 	movhi	r2,32768
   20c08:	10bfffc4 	addi	r2,r2,-1
   20c0c:	18802126 	beq	r3,r2,20c94 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   20c10:	e0bfff17 	ldw	r2,-4(fp)
   20c14:	10800017 	ldw	r2,0(r2)
   20c18:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   20c1c:	e0bffc17 	ldw	r2,-16(fp)
   20c20:	10800090 	cmplti	r2,r2,2
   20c24:	1000061e 	bne	r2,zero,20c40 <altera_avalon_jtag_uart_ioctl+0x7c>
   20c28:	e0fffc17 	ldw	r3,-16(fp)
   20c2c:	00a00034 	movhi	r2,32768
   20c30:	10bfffc4 	addi	r2,r2,-1
   20c34:	18800226 	beq	r3,r2,20c40 <altera_avalon_jtag_uart_ioctl+0x7c>
   20c38:	e0bffc17 	ldw	r2,-16(fp)
   20c3c:	00000206 	br	20c48 <altera_avalon_jtag_uart_ioctl+0x84>
   20c40:	00a00034 	movhi	r2,32768
   20c44:	10bfff84 	addi	r2,r2,-2
   20c48:	e0fffd17 	ldw	r3,-12(fp)
   20c4c:	18800115 	stw	r2,4(r3)
      rc = 0;
   20c50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20c54:	00000f06 	br	20c94 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   20c58:	e0bffd17 	ldw	r2,-12(fp)
   20c5c:	10c00117 	ldw	r3,4(r2)
   20c60:	00a00034 	movhi	r2,32768
   20c64:	10bfffc4 	addi	r2,r2,-1
   20c68:	18800c26 	beq	r3,r2,20c9c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   20c6c:	e0bffd17 	ldw	r2,-12(fp)
   20c70:	10c00917 	ldw	r3,36(r2)
   20c74:	e0bffd17 	ldw	r2,-12(fp)
   20c78:	10800117 	ldw	r2,4(r2)
   20c7c:	1885803a 	cmpltu	r2,r3,r2
   20c80:	10c03fcc 	andi	r3,r2,255
   20c84:	e0bfff17 	ldw	r2,-4(fp)
   20c88:	10c00015 	stw	r3,0(r2)
      rc = 0;
   20c8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20c90:	00000206 	br	20c9c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   20c94:	0001883a 	nop
   20c98:	00000106 	br	20ca0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   20c9c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   20ca0:	e0bffb17 	ldw	r2,-20(fp)
}
   20ca4:	e037883a 	mov	sp,fp
   20ca8:	df000017 	ldw	fp,0(sp)
   20cac:	dec00104 	addi	sp,sp,4
   20cb0:	f800283a 	ret

00020cb4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   20cb4:	defff304 	addi	sp,sp,-52
   20cb8:	dfc00c15 	stw	ra,48(sp)
   20cbc:	df000b15 	stw	fp,44(sp)
   20cc0:	df000b04 	addi	fp,sp,44
   20cc4:	e13ffc15 	stw	r4,-16(fp)
   20cc8:	e17ffd15 	stw	r5,-12(fp)
   20ccc:	e1bffe15 	stw	r6,-8(fp)
   20cd0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   20cd4:	e0bffd17 	ldw	r2,-12(fp)
   20cd8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20cdc:	00004706 	br	20dfc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   20ce0:	e0bffc17 	ldw	r2,-16(fp)
   20ce4:	10800a17 	ldw	r2,40(r2)
   20ce8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   20cec:	e0bffc17 	ldw	r2,-16(fp)
   20cf0:	10800b17 	ldw	r2,44(r2)
   20cf4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   20cf8:	e0fff717 	ldw	r3,-36(fp)
   20cfc:	e0bff817 	ldw	r2,-32(fp)
   20d00:	18800536 	bltu	r3,r2,20d18 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   20d04:	e0fff717 	ldw	r3,-36(fp)
   20d08:	e0bff817 	ldw	r2,-32(fp)
   20d0c:	1885c83a 	sub	r2,r3,r2
   20d10:	e0bff615 	stw	r2,-40(fp)
   20d14:	00000406 	br	20d28 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   20d18:	00c20004 	movi	r3,2048
   20d1c:	e0bff817 	ldw	r2,-32(fp)
   20d20:	1885c83a 	sub	r2,r3,r2
   20d24:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   20d28:	e0bff617 	ldw	r2,-40(fp)
   20d2c:	10001e26 	beq	r2,zero,20da8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   20d30:	e0fffe17 	ldw	r3,-8(fp)
   20d34:	e0bff617 	ldw	r2,-40(fp)
   20d38:	1880022e 	bgeu	r3,r2,20d44 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   20d3c:	e0bffe17 	ldw	r2,-8(fp)
   20d40:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   20d44:	e0bffc17 	ldw	r2,-16(fp)
   20d48:	10c00e04 	addi	r3,r2,56
   20d4c:	e0bff817 	ldw	r2,-32(fp)
   20d50:	1885883a 	add	r2,r3,r2
   20d54:	e1bff617 	ldw	r6,-40(fp)
   20d58:	100b883a 	mov	r5,r2
   20d5c:	e13ff517 	ldw	r4,-44(fp)
   20d60:	000da800 	call	da80 <memcpy>
      ptr   += n;
   20d64:	e0fff517 	ldw	r3,-44(fp)
   20d68:	e0bff617 	ldw	r2,-40(fp)
   20d6c:	1885883a 	add	r2,r3,r2
   20d70:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   20d74:	e0fffe17 	ldw	r3,-8(fp)
   20d78:	e0bff617 	ldw	r2,-40(fp)
   20d7c:	1885c83a 	sub	r2,r3,r2
   20d80:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20d84:	e0fff817 	ldw	r3,-32(fp)
   20d88:	e0bff617 	ldw	r2,-40(fp)
   20d8c:	1885883a 	add	r2,r3,r2
   20d90:	10c1ffcc 	andi	r3,r2,2047
   20d94:	e0bffc17 	ldw	r2,-16(fp)
   20d98:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   20d9c:	e0bffe17 	ldw	r2,-8(fp)
   20da0:	00bfcf16 	blt	zero,r2,20ce0 <__alt_data_end+0xfc020ce0>
   20da4:	00000106 	br	20dac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   20da8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   20dac:	e0fff517 	ldw	r3,-44(fp)
   20db0:	e0bffd17 	ldw	r2,-12(fp)
   20db4:	1880141e 	bne	r3,r2,20e08 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   20db8:	e0bfff17 	ldw	r2,-4(fp)
   20dbc:	1090000c 	andi	r2,r2,16384
   20dc0:	1000131e 	bne	r2,zero,20e10 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   20dc4:	0001883a 	nop
   20dc8:	e0bffc17 	ldw	r2,-16(fp)
   20dcc:	10c00a17 	ldw	r3,40(r2)
   20dd0:	e0bff717 	ldw	r2,-36(fp)
   20dd4:	1880051e 	bne	r3,r2,20dec <altera_avalon_jtag_uart_read+0x138>
   20dd8:	e0bffc17 	ldw	r2,-16(fp)
   20ddc:	10c00917 	ldw	r3,36(r2)
   20de0:	e0bffc17 	ldw	r2,-16(fp)
   20de4:	10800117 	ldw	r2,4(r2)
   20de8:	18bff736 	bltu	r3,r2,20dc8 <__alt_data_end+0xfc020dc8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   20dec:	e0bffc17 	ldw	r2,-16(fp)
   20df0:	10c00a17 	ldw	r3,40(r2)
   20df4:	e0bff717 	ldw	r2,-36(fp)
   20df8:	18800726 	beq	r3,r2,20e18 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20dfc:	e0bffe17 	ldw	r2,-8(fp)
   20e00:	00bfb716 	blt	zero,r2,20ce0 <__alt_data_end+0xfc020ce0>
   20e04:	00000506 	br	20e1c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   20e08:	0001883a 	nop
   20e0c:	00000306 	br	20e1c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   20e10:	0001883a 	nop
   20e14:	00000106 	br	20e1c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   20e18:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   20e1c:	e0fff517 	ldw	r3,-44(fp)
   20e20:	e0bffd17 	ldw	r2,-12(fp)
   20e24:	18801826 	beq	r3,r2,20e88 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20e28:	0005303a 	rdctl	r2,status
   20e2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20e30:	e0fffb17 	ldw	r3,-20(fp)
   20e34:	00bfff84 	movi	r2,-2
   20e38:	1884703a 	and	r2,r3,r2
   20e3c:	1001703a 	wrctl	status,r2
  
  return context;
   20e40:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   20e44:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20e48:	e0bffc17 	ldw	r2,-16(fp)
   20e4c:	10800817 	ldw	r2,32(r2)
   20e50:	10c00054 	ori	r3,r2,1
   20e54:	e0bffc17 	ldw	r2,-16(fp)
   20e58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20e5c:	e0bffc17 	ldw	r2,-16(fp)
   20e60:	10800017 	ldw	r2,0(r2)
   20e64:	10800104 	addi	r2,r2,4
   20e68:	1007883a 	mov	r3,r2
   20e6c:	e0bffc17 	ldw	r2,-16(fp)
   20e70:	10800817 	ldw	r2,32(r2)
   20e74:	18800035 	stwio	r2,0(r3)
   20e78:	e0bffa17 	ldw	r2,-24(fp)
   20e7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20e80:	e0bff917 	ldw	r2,-28(fp)
   20e84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   20e88:	e0fff517 	ldw	r3,-44(fp)
   20e8c:	e0bffd17 	ldw	r2,-12(fp)
   20e90:	18800426 	beq	r3,r2,20ea4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   20e94:	e0fff517 	ldw	r3,-44(fp)
   20e98:	e0bffd17 	ldw	r2,-12(fp)
   20e9c:	1885c83a 	sub	r2,r3,r2
   20ea0:	00000606 	br	20ebc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   20ea4:	e0bfff17 	ldw	r2,-4(fp)
   20ea8:	1090000c 	andi	r2,r2,16384
   20eac:	10000226 	beq	r2,zero,20eb8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   20eb0:	00bffd44 	movi	r2,-11
   20eb4:	00000106 	br	20ebc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   20eb8:	00bffec4 	movi	r2,-5
}
   20ebc:	e037883a 	mov	sp,fp
   20ec0:	dfc00117 	ldw	ra,4(sp)
   20ec4:	df000017 	ldw	fp,0(sp)
   20ec8:	dec00204 	addi	sp,sp,8
   20ecc:	f800283a 	ret

00020ed0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20ed0:	defff304 	addi	sp,sp,-52
   20ed4:	dfc00c15 	stw	ra,48(sp)
   20ed8:	df000b15 	stw	fp,44(sp)
   20edc:	df000b04 	addi	fp,sp,44
   20ee0:	e13ffc15 	stw	r4,-16(fp)
   20ee4:	e17ffd15 	stw	r5,-12(fp)
   20ee8:	e1bffe15 	stw	r6,-8(fp)
   20eec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   20ef0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   20ef4:	e0bffd17 	ldw	r2,-12(fp)
   20ef8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   20efc:	00003706 	br	20fdc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   20f00:	e0bffc17 	ldw	r2,-16(fp)
   20f04:	10800c17 	ldw	r2,48(r2)
   20f08:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   20f0c:	e0bffc17 	ldw	r2,-16(fp)
   20f10:	10800d17 	ldw	r2,52(r2)
   20f14:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   20f18:	e0fff917 	ldw	r3,-28(fp)
   20f1c:	e0bff517 	ldw	r2,-44(fp)
   20f20:	1880062e 	bgeu	r3,r2,20f3c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   20f24:	e0fff517 	ldw	r3,-44(fp)
   20f28:	e0bff917 	ldw	r2,-28(fp)
   20f2c:	1885c83a 	sub	r2,r3,r2
   20f30:	10bfffc4 	addi	r2,r2,-1
   20f34:	e0bff615 	stw	r2,-40(fp)
   20f38:	00000b06 	br	20f68 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   20f3c:	e0bff517 	ldw	r2,-44(fp)
   20f40:	10000526 	beq	r2,zero,20f58 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   20f44:	00c20004 	movi	r3,2048
   20f48:	e0bff917 	ldw	r2,-28(fp)
   20f4c:	1885c83a 	sub	r2,r3,r2
   20f50:	e0bff615 	stw	r2,-40(fp)
   20f54:	00000406 	br	20f68 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   20f58:	00c1ffc4 	movi	r3,2047
   20f5c:	e0bff917 	ldw	r2,-28(fp)
   20f60:	1885c83a 	sub	r2,r3,r2
   20f64:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   20f68:	e0bff617 	ldw	r2,-40(fp)
   20f6c:	10001e26 	beq	r2,zero,20fe8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   20f70:	e0fffe17 	ldw	r3,-8(fp)
   20f74:	e0bff617 	ldw	r2,-40(fp)
   20f78:	1880022e 	bgeu	r3,r2,20f84 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   20f7c:	e0bffe17 	ldw	r2,-8(fp)
   20f80:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   20f84:	e0bffc17 	ldw	r2,-16(fp)
   20f88:	10c20e04 	addi	r3,r2,2104
   20f8c:	e0bff917 	ldw	r2,-28(fp)
   20f90:	1885883a 	add	r2,r3,r2
   20f94:	e1bff617 	ldw	r6,-40(fp)
   20f98:	e17ffd17 	ldw	r5,-12(fp)
   20f9c:	1009883a 	mov	r4,r2
   20fa0:	000da800 	call	da80 <memcpy>
      ptr   += n;
   20fa4:	e0fffd17 	ldw	r3,-12(fp)
   20fa8:	e0bff617 	ldw	r2,-40(fp)
   20fac:	1885883a 	add	r2,r3,r2
   20fb0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   20fb4:	e0fffe17 	ldw	r3,-8(fp)
   20fb8:	e0bff617 	ldw	r2,-40(fp)
   20fbc:	1885c83a 	sub	r2,r3,r2
   20fc0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20fc4:	e0fff917 	ldw	r3,-28(fp)
   20fc8:	e0bff617 	ldw	r2,-40(fp)
   20fcc:	1885883a 	add	r2,r3,r2
   20fd0:	10c1ffcc 	andi	r3,r2,2047
   20fd4:	e0bffc17 	ldw	r2,-16(fp)
   20fd8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   20fdc:	e0bffe17 	ldw	r2,-8(fp)
   20fe0:	00bfc716 	blt	zero,r2,20f00 <__alt_data_end+0xfc020f00>
   20fe4:	00000106 	br	20fec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   20fe8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20fec:	0005303a 	rdctl	r2,status
   20ff0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20ff4:	e0fffb17 	ldw	r3,-20(fp)
   20ff8:	00bfff84 	movi	r2,-2
   20ffc:	1884703a 	and	r2,r3,r2
   21000:	1001703a 	wrctl	status,r2
  
  return context;
   21004:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   21008:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2100c:	e0bffc17 	ldw	r2,-16(fp)
   21010:	10800817 	ldw	r2,32(r2)
   21014:	10c00094 	ori	r3,r2,2
   21018:	e0bffc17 	ldw	r2,-16(fp)
   2101c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21020:	e0bffc17 	ldw	r2,-16(fp)
   21024:	10800017 	ldw	r2,0(r2)
   21028:	10800104 	addi	r2,r2,4
   2102c:	1007883a 	mov	r3,r2
   21030:	e0bffc17 	ldw	r2,-16(fp)
   21034:	10800817 	ldw	r2,32(r2)
   21038:	18800035 	stwio	r2,0(r3)
   2103c:	e0bffa17 	ldw	r2,-24(fp)
   21040:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21044:	e0bff817 	ldw	r2,-32(fp)
   21048:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2104c:	e0bffe17 	ldw	r2,-8(fp)
   21050:	0080100e 	bge	zero,r2,21094 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   21054:	e0bfff17 	ldw	r2,-4(fp)
   21058:	1090000c 	andi	r2,r2,16384
   2105c:	1000101e 	bne	r2,zero,210a0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   21060:	0001883a 	nop
   21064:	e0bffc17 	ldw	r2,-16(fp)
   21068:	10c00d17 	ldw	r3,52(r2)
   2106c:	e0bff517 	ldw	r2,-44(fp)
   21070:	1880051e 	bne	r3,r2,21088 <altera_avalon_jtag_uart_write+0x1b8>
   21074:	e0bffc17 	ldw	r2,-16(fp)
   21078:	10c00917 	ldw	r3,36(r2)
   2107c:	e0bffc17 	ldw	r2,-16(fp)
   21080:	10800117 	ldw	r2,4(r2)
   21084:	18bff736 	bltu	r3,r2,21064 <__alt_data_end+0xfc021064>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   21088:	e0bffc17 	ldw	r2,-16(fp)
   2108c:	10800917 	ldw	r2,36(r2)
   21090:	1000051e 	bne	r2,zero,210a8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   21094:	e0bffe17 	ldw	r2,-8(fp)
   21098:	00bfd016 	blt	zero,r2,20fdc <__alt_data_end+0xfc020fdc>
   2109c:	00000306 	br	210ac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   210a0:	0001883a 	nop
   210a4:	00000106 	br	210ac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   210a8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   210ac:	e0fffd17 	ldw	r3,-12(fp)
   210b0:	e0bff717 	ldw	r2,-36(fp)
   210b4:	18800426 	beq	r3,r2,210c8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   210b8:	e0fffd17 	ldw	r3,-12(fp)
   210bc:	e0bff717 	ldw	r2,-36(fp)
   210c0:	1885c83a 	sub	r2,r3,r2
   210c4:	00000606 	br	210e0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   210c8:	e0bfff17 	ldw	r2,-4(fp)
   210cc:	1090000c 	andi	r2,r2,16384
   210d0:	10000226 	beq	r2,zero,210dc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   210d4:	00bffd44 	movi	r2,-11
   210d8:	00000106 	br	210e0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   210dc:	00bffec4 	movi	r2,-5
}
   210e0:	e037883a 	mov	sp,fp
   210e4:	dfc00117 	ldw	ra,4(sp)
   210e8:	df000017 	ldw	fp,0(sp)
   210ec:	dec00204 	addi	sp,sp,8
   210f0:	f800283a 	ret

000210f4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   210f4:	defff404 	addi	sp,sp,-48
   210f8:	df000b15 	stw	fp,44(sp)
   210fc:	df000b04 	addi	fp,sp,44
   21100:	e13ffc15 	stw	r4,-16(fp)
   21104:	e17ffd15 	stw	r5,-12(fp)
   21108:	e1bffe15 	stw	r6,-8(fp)
   2110c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   21110:	e0ffff17 	ldw	r3,-4(fp)
   21114:	e0bffe17 	ldw	r2,-8(fp)
   21118:	1885883a 	add	r2,r3,r2
   2111c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   21120:	e0c00217 	ldw	r3,8(fp)
   21124:	e0800117 	ldw	r2,4(fp)
   21128:	1885883a 	add	r2,r3,r2
   2112c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   21130:	e0800117 	ldw	r2,4(fp)
   21134:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   21138:	e0bffe17 	ldw	r2,-8(fp)
   2113c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   21140:	00800044 	movi	r2,1
   21144:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   21148:	e0bffc17 	ldw	r2,-16(fp)
   2114c:	10800504 	addi	r2,r2,20
   21150:	1009883a 	mov	r4,r2
   21154:	00c00044 	movi	r3,1
   21158:	e0bffd17 	ldw	r2,-12(fp)
   2115c:	1884983a 	sll	r2,r3,r2
   21160:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   21164:	e0800317 	ldw	r2,12(fp)
   21168:	1080008c 	andi	r2,r2,2
   2116c:	1000051e 	bne	r2,zero,21184 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   21170:	e0bffc17 	ldw	r2,-16(fp)
   21174:	10800304 	addi	r2,r2,12
   21178:	1007883a 	mov	r3,r2
   2117c:	00810004 	movi	r2,1024
   21180:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   21184:	e0bffc17 	ldw	r2,-16(fp)
   21188:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   2118c:	e0bffc17 	ldw	r2,-16(fp)
   21190:	10800204 	addi	r2,r2,8
   21194:	10800037 	ldwio	r2,0(r2)
   21198:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   2119c:	e0bffa17 	ldw	r2,-24(fp)
   211a0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   211a4:	10000226 	beq	r2,zero,211b0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   211a8:	e0bff717 	ldw	r2,-36(fp)
   211ac:	1000031e 	bne	r2,zero,211bc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   211b0:	e0bffa17 	ldw	r2,-24(fp)
   211b4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   211b8:	103ff426 	beq	r2,zero,2118c <__alt_data_end+0xfc02118c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   211bc:	e0bffa17 	ldw	r2,-24(fp)
   211c0:	1080100c 	andi	r2,r2,64
   211c4:	10001e26 	beq	r2,zero,21240 <alt_avalon_spi_command+0x14c>
   211c8:	e0bff717 	ldw	r2,-36(fp)
   211cc:	00801c0e 	bge	zero,r2,21240 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   211d0:	e0bff717 	ldw	r2,-36(fp)
   211d4:	10bfffc4 	addi	r2,r2,-1
   211d8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   211dc:	e0ffff17 	ldw	r3,-4(fp)
   211e0:	e0bff817 	ldw	r2,-32(fp)
   211e4:	18800a2e 	bgeu	r3,r2,21210 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   211e8:	e0bffc17 	ldw	r2,-16(fp)
   211ec:	10800104 	addi	r2,r2,4
   211f0:	1009883a 	mov	r4,r2
   211f4:	e0bfff17 	ldw	r2,-4(fp)
   211f8:	10c00044 	addi	r3,r2,1
   211fc:	e0ffff15 	stw	r3,-4(fp)
   21200:	10800003 	ldbu	r2,0(r2)
   21204:	10803fcc 	andi	r2,r2,255
   21208:	20800035 	stwio	r2,0(r4)
   2120c:	00000c06 	br	21240 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   21210:	e0bff517 	ldw	r2,-44(fp)
   21214:	10000826 	beq	r2,zero,21238 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   21218:	e0bff517 	ldw	r2,-44(fp)
   2121c:	10bfffc4 	addi	r2,r2,-1
   21220:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   21224:	e0bffc17 	ldw	r2,-16(fp)
   21228:	10800104 	addi	r2,r2,4
   2122c:	0007883a 	mov	r3,zero
   21230:	10c00035 	stwio	r3,0(r2)
   21234:	00000206 	br	21240 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   21238:	00bf0004 	movi	r2,-1024
   2123c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   21240:	e0bffa17 	ldw	r2,-24(fp)
   21244:	1080200c 	andi	r2,r2,128
   21248:	103fd026 	beq	r2,zero,2118c <__alt_data_end+0xfc02118c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   2124c:	e0bffc17 	ldw	r2,-16(fp)
   21250:	10800037 	ldwio	r2,0(r2)
   21254:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   21258:	e0bff617 	ldw	r2,-40(fp)
   2125c:	10000426 	beq	r2,zero,21270 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   21260:	e0bff617 	ldw	r2,-40(fp)
   21264:	10bfffc4 	addi	r2,r2,-1
   21268:	e0bff615 	stw	r2,-40(fp)
   2126c:	00000506 	br	21284 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   21270:	e0800217 	ldw	r2,8(fp)
   21274:	10c00044 	addi	r3,r2,1
   21278:	e0c00215 	stw	r3,8(fp)
   2127c:	e0fffb17 	ldw	r3,-20(fp)
   21280:	10c00005 	stb	r3,0(r2)
      credits++;
   21284:	e0bff717 	ldw	r2,-36(fp)
   21288:	10800044 	addi	r2,r2,1
   2128c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   21290:	e0bff617 	ldw	r2,-40(fp)
   21294:	103fbd1e 	bne	r2,zero,2118c <__alt_data_end+0xfc02118c>
   21298:	e0c00217 	ldw	r3,8(fp)
   2129c:	e0bff917 	ldw	r2,-28(fp)
   212a0:	18bfba1e 	bne	r3,r2,2118c <__alt_data_end+0xfc02118c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   212a4:	e0bffc17 	ldw	r2,-16(fp)
   212a8:	10800204 	addi	r2,r2,8
   212ac:	10800037 	ldwio	r2,0(r2)
   212b0:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   212b4:	e0bffa17 	ldw	r2,-24(fp)
   212b8:	1080080c 	andi	r2,r2,32
   212bc:	103ff926 	beq	r2,zero,212a4 <__alt_data_end+0xfc0212a4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   212c0:	e0800317 	ldw	r2,12(fp)
   212c4:	1080004c 	andi	r2,r2,1
   212c8:	1000041e 	bne	r2,zero,212dc <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   212cc:	e0bffc17 	ldw	r2,-16(fp)
   212d0:	10800304 	addi	r2,r2,12
   212d4:	0007883a 	mov	r3,zero
   212d8:	10c00035 	stwio	r3,0(r2)

  return read_length;
   212dc:	e0800117 	ldw	r2,4(fp)
}
   212e0:	e037883a 	mov	sp,fp
   212e4:	df000017 	ldw	fp,0(sp)
   212e8:	dec00104 	addi	sp,sp,4
   212ec:	f800283a 	ret

000212f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   212f0:	defffa04 	addi	sp,sp,-24
   212f4:	dfc00515 	stw	ra,20(sp)
   212f8:	df000415 	stw	fp,16(sp)
   212fc:	df000404 	addi	fp,sp,16
   21300:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   21304:	0007883a 	mov	r3,zero
   21308:	e0bfff17 	ldw	r2,-4(fp)
   2130c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   21310:	e0bfff17 	ldw	r2,-4(fp)
   21314:	10800104 	addi	r2,r2,4
   21318:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2131c:	0005303a 	rdctl	r2,status
   21320:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21324:	e0fffd17 	ldw	r3,-12(fp)
   21328:	00bfff84 	movi	r2,-2
   2132c:	1884703a 	and	r2,r3,r2
   21330:	1001703a 	wrctl	status,r2
  
  return context;
   21334:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   21338:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2133c:	00222600 	call	22260 <alt_tick>
   21340:	e0bffc17 	ldw	r2,-16(fp)
   21344:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21348:	e0bffe17 	ldw	r2,-8(fp)
   2134c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   21350:	0001883a 	nop
   21354:	e037883a 	mov	sp,fp
   21358:	dfc00117 	ldw	ra,4(sp)
   2135c:	df000017 	ldw	fp,0(sp)
   21360:	dec00204 	addi	sp,sp,8
   21364:	f800283a 	ret

00021368 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   21368:	defff804 	addi	sp,sp,-32
   2136c:	dfc00715 	stw	ra,28(sp)
   21370:	df000615 	stw	fp,24(sp)
   21374:	df000604 	addi	fp,sp,24
   21378:	e13ffc15 	stw	r4,-16(fp)
   2137c:	e17ffd15 	stw	r5,-12(fp)
   21380:	e1bffe15 	stw	r6,-8(fp)
   21384:	e1ffff15 	stw	r7,-4(fp)
   21388:	e0bfff17 	ldw	r2,-4(fp)
   2138c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   21390:	d0b24717 	ldw	r2,-14052(gp)
   21394:	1000021e 	bne	r2,zero,213a0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   21398:	e0bffb17 	ldw	r2,-20(fp)
   2139c:	d0b24715 	stw	r2,-14052(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   213a0:	e0bffc17 	ldw	r2,-16(fp)
   213a4:	10800104 	addi	r2,r2,4
   213a8:	00c001c4 	movi	r3,7
   213ac:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   213b0:	d8000015 	stw	zero,0(sp)
   213b4:	e1fffc17 	ldw	r7,-16(fp)
   213b8:	018000b4 	movhi	r6,2
   213bc:	3184bc04 	addi	r6,r6,4848
   213c0:	e17ffe17 	ldw	r5,-8(fp)
   213c4:	e13ffd17 	ldw	r4,-12(fp)
   213c8:	00218d80 	call	218d8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   213cc:	0001883a 	nop
   213d0:	e037883a 	mov	sp,fp
   213d4:	dfc00117 	ldw	ra,4(sp)
   213d8:	df000017 	ldw	fp,0(sp)
   213dc:	dec00204 	addi	sp,sp,8
   213e0:	f800283a 	ret

000213e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   213e4:	defff504 	addi	sp,sp,-44
   213e8:	df000a15 	stw	fp,40(sp)
   213ec:	df000a04 	addi	fp,sp,40
   213f0:	e13ffc15 	stw	r4,-16(fp)
   213f4:	e17ffd15 	stw	r5,-12(fp)
   213f8:	e1bffe15 	stw	r6,-8(fp)
   213fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   21400:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21404:	d0b24717 	ldw	r2,-14052(gp)
  
  if (alt_ticks_per_second ())
   21408:	10003c26 	beq	r2,zero,214fc <alt_alarm_start+0x118>
  {
    if (alarm)
   2140c:	e0bffc17 	ldw	r2,-16(fp)
   21410:	10003826 	beq	r2,zero,214f4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   21414:	e0bffc17 	ldw	r2,-16(fp)
   21418:	e0fffe17 	ldw	r3,-8(fp)
   2141c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   21420:	e0bffc17 	ldw	r2,-16(fp)
   21424:	e0ffff17 	ldw	r3,-4(fp)
   21428:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2142c:	0005303a 	rdctl	r2,status
   21430:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21434:	e0fff917 	ldw	r3,-28(fp)
   21438:	00bfff84 	movi	r2,-2
   2143c:	1884703a 	and	r2,r3,r2
   21440:	1001703a 	wrctl	status,r2
  
  return context;
   21444:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   21448:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2144c:	d0b24817 	ldw	r2,-14048(gp)
      
      current_nticks = alt_nticks();
   21450:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   21454:	e0fffd17 	ldw	r3,-12(fp)
   21458:	e0bff617 	ldw	r2,-40(fp)
   2145c:	1885883a 	add	r2,r3,r2
   21460:	10c00044 	addi	r3,r2,1
   21464:	e0bffc17 	ldw	r2,-16(fp)
   21468:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2146c:	e0bffc17 	ldw	r2,-16(fp)
   21470:	10c00217 	ldw	r3,8(r2)
   21474:	e0bff617 	ldw	r2,-40(fp)
   21478:	1880042e 	bgeu	r3,r2,2148c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2147c:	e0bffc17 	ldw	r2,-16(fp)
   21480:	00c00044 	movi	r3,1
   21484:	10c00405 	stb	r3,16(r2)
   21488:	00000206 	br	21494 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2148c:	e0bffc17 	ldw	r2,-16(fp)
   21490:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   21494:	e0bffc17 	ldw	r2,-16(fp)
   21498:	d0e5bc04 	addi	r3,gp,-26896
   2149c:	e0fffa15 	stw	r3,-24(fp)
   214a0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   214a4:	e0bffb17 	ldw	r2,-20(fp)
   214a8:	e0fffa17 	ldw	r3,-24(fp)
   214ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   214b0:	e0bffa17 	ldw	r2,-24(fp)
   214b4:	10c00017 	ldw	r3,0(r2)
   214b8:	e0bffb17 	ldw	r2,-20(fp)
   214bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   214c0:	e0bffa17 	ldw	r2,-24(fp)
   214c4:	10800017 	ldw	r2,0(r2)
   214c8:	e0fffb17 	ldw	r3,-20(fp)
   214cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   214d0:	e0bffa17 	ldw	r2,-24(fp)
   214d4:	e0fffb17 	ldw	r3,-20(fp)
   214d8:	10c00015 	stw	r3,0(r2)
   214dc:	e0bff817 	ldw	r2,-32(fp)
   214e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   214e4:	e0bff717 	ldw	r2,-36(fp)
   214e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   214ec:	0005883a 	mov	r2,zero
   214f0:	00000306 	br	21500 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   214f4:	00bffa84 	movi	r2,-22
   214f8:	00000106 	br	21500 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   214fc:	00bfde84 	movi	r2,-134
  }
}
   21500:	e037883a 	mov	sp,fp
   21504:	df000017 	ldw	fp,0(sp)
   21508:	dec00104 	addi	sp,sp,4
   2150c:	f800283a 	ret

00021510 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   21510:	defffa04 	addi	sp,sp,-24
   21514:	dfc00515 	stw	ra,20(sp)
   21518:	df000415 	stw	fp,16(sp)
   2151c:	df000404 	addi	fp,sp,16
   21520:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   21524:	00800244 	movi	r2,9
   21528:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2152c:	014003f4 	movhi	r5,15
   21530:	29509004 	addi	r5,r5,16960
   21534:	e13ffd17 	ldw	r4,-12(fp)
   21538:	000cca00 	call	cca0 <__mulsi3>
   2153c:	100b883a 	mov	r5,r2
   21540:	01017db4 	movhi	r4,1526
   21544:	21384004 	addi	r4,r4,-7936
   21548:	000cbe40 	call	cbe4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2154c:	100b883a 	mov	r5,r2
   21550:	01200034 	movhi	r4,32768
   21554:	213fffc4 	addi	r4,r4,-1
   21558:	000cbe40 	call	cbe4 <__udivsi3>
   2155c:	100b883a 	mov	r5,r2
   21560:	e13fff17 	ldw	r4,-4(fp)
   21564:	000cbe40 	call	cbe4 <__udivsi3>
   21568:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2156c:	e0bffe17 	ldw	r2,-8(fp)
   21570:	10002a26 	beq	r2,zero,2161c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   21574:	e03ffc15 	stw	zero,-16(fp)
   21578:	00001706 	br	215d8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2157c:	00a00034 	movhi	r2,32768
   21580:	10bfffc4 	addi	r2,r2,-1
   21584:	10bfffc4 	addi	r2,r2,-1
   21588:	103ffe1e 	bne	r2,zero,21584 <__alt_data_end+0xfc021584>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2158c:	014003f4 	movhi	r5,15
   21590:	29509004 	addi	r5,r5,16960
   21594:	e13ffd17 	ldw	r4,-12(fp)
   21598:	000cca00 	call	cca0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2159c:	100b883a 	mov	r5,r2
   215a0:	01017db4 	movhi	r4,1526
   215a4:	21384004 	addi	r4,r4,-7936
   215a8:	000cbe40 	call	cbe4 <__udivsi3>
   215ac:	100b883a 	mov	r5,r2
   215b0:	01200034 	movhi	r4,32768
   215b4:	213fffc4 	addi	r4,r4,-1
   215b8:	000cbe40 	call	cbe4 <__udivsi3>
   215bc:	1007883a 	mov	r3,r2
   215c0:	e0bfff17 	ldw	r2,-4(fp)
   215c4:	10c5c83a 	sub	r2,r2,r3
   215c8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   215cc:	e0bffc17 	ldw	r2,-16(fp)
   215d0:	10800044 	addi	r2,r2,1
   215d4:	e0bffc15 	stw	r2,-16(fp)
   215d8:	e0fffc17 	ldw	r3,-16(fp)
   215dc:	e0bffe17 	ldw	r2,-8(fp)
   215e0:	18bfe616 	blt	r3,r2,2157c <__alt_data_end+0xfc02157c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   215e4:	014003f4 	movhi	r5,15
   215e8:	29509004 	addi	r5,r5,16960
   215ec:	e13ffd17 	ldw	r4,-12(fp)
   215f0:	000cca00 	call	cca0 <__mulsi3>
   215f4:	100b883a 	mov	r5,r2
   215f8:	01017db4 	movhi	r4,1526
   215fc:	21384004 	addi	r4,r4,-7936
   21600:	000cbe40 	call	cbe4 <__udivsi3>
   21604:	e17fff17 	ldw	r5,-4(fp)
   21608:	1009883a 	mov	r4,r2
   2160c:	000cca00 	call	cca0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   21610:	10bfffc4 	addi	r2,r2,-1
   21614:	103ffe1e 	bne	r2,zero,21610 <__alt_data_end+0xfc021610>
   21618:	00000d06 	br	21650 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2161c:	014003f4 	movhi	r5,15
   21620:	29509004 	addi	r5,r5,16960
   21624:	e13ffd17 	ldw	r4,-12(fp)
   21628:	000cca00 	call	cca0 <__mulsi3>
   2162c:	100b883a 	mov	r5,r2
   21630:	01017db4 	movhi	r4,1526
   21634:	21384004 	addi	r4,r4,-7936
   21638:	000cbe40 	call	cbe4 <__udivsi3>
   2163c:	e17fff17 	ldw	r5,-4(fp)
   21640:	1009883a 	mov	r4,r2
   21644:	000cca00 	call	cca0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   21648:	10bfffc4 	addi	r2,r2,-1
   2164c:	00bffe16 	blt	zero,r2,21648 <__alt_data_end+0xfc021648>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   21650:	0005883a 	mov	r2,zero
}
   21654:	e037883a 	mov	sp,fp
   21658:	dfc00117 	ldw	ra,4(sp)
   2165c:	df000017 	ldw	fp,0(sp)
   21660:	dec00204 	addi	sp,sp,8
   21664:	f800283a 	ret

00021668 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21668:	deffff04 	addi	sp,sp,-4
   2166c:	df000015 	stw	fp,0(sp)
   21670:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   21674:	0001883a 	nop
   21678:	e037883a 	mov	sp,fp
   2167c:	df000017 	ldw	fp,0(sp)
   21680:	dec00104 	addi	sp,sp,4
   21684:	f800283a 	ret

00021688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21688:	defffe04 	addi	sp,sp,-8
   2168c:	dfc00115 	stw	ra,4(sp)
   21690:	df000015 	stw	fp,0(sp)
   21694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21698:	d0a5b717 	ldw	r2,-26916(gp)
   2169c:	10000326 	beq	r2,zero,216ac <alt_get_errno+0x24>
   216a0:	d0a5b717 	ldw	r2,-26916(gp)
   216a4:	103ee83a 	callr	r2
   216a8:	00000106 	br	216b0 <alt_get_errno+0x28>
   216ac:	d0b23f04 	addi	r2,gp,-14084
}
   216b0:	e037883a 	mov	sp,fp
   216b4:	dfc00117 	ldw	ra,4(sp)
   216b8:	df000017 	ldw	fp,0(sp)
   216bc:	dec00204 	addi	sp,sp,8
   216c0:	f800283a 	ret

000216c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   216c4:	defffa04 	addi	sp,sp,-24
   216c8:	dfc00515 	stw	ra,20(sp)
   216cc:	df000415 	stw	fp,16(sp)
   216d0:	df000404 	addi	fp,sp,16
   216d4:	e13ffe15 	stw	r4,-8(fp)
   216d8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   216dc:	e0bffe17 	ldw	r2,-8(fp)
   216e0:	10000326 	beq	r2,zero,216f0 <alt_dev_llist_insert+0x2c>
   216e4:	e0bffe17 	ldw	r2,-8(fp)
   216e8:	10800217 	ldw	r2,8(r2)
   216ec:	1000061e 	bne	r2,zero,21708 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   216f0:	00216880 	call	21688 <alt_get_errno>
   216f4:	1007883a 	mov	r3,r2
   216f8:	00800584 	movi	r2,22
   216fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   21700:	00bffa84 	movi	r2,-22
   21704:	00001306 	br	21754 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   21708:	e0bffe17 	ldw	r2,-8(fp)
   2170c:	e0ffff17 	ldw	r3,-4(fp)
   21710:	e0fffc15 	stw	r3,-16(fp)
   21714:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21718:	e0bffd17 	ldw	r2,-12(fp)
   2171c:	e0fffc17 	ldw	r3,-16(fp)
   21720:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21724:	e0bffc17 	ldw	r2,-16(fp)
   21728:	10c00017 	ldw	r3,0(r2)
   2172c:	e0bffd17 	ldw	r2,-12(fp)
   21730:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21734:	e0bffc17 	ldw	r2,-16(fp)
   21738:	10800017 	ldw	r2,0(r2)
   2173c:	e0fffd17 	ldw	r3,-12(fp)
   21740:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21744:	e0bffc17 	ldw	r2,-16(fp)
   21748:	e0fffd17 	ldw	r3,-12(fp)
   2174c:	10c00015 	stw	r3,0(r2)

  return 0;  
   21750:	0005883a 	mov	r2,zero
}
   21754:	e037883a 	mov	sp,fp
   21758:	dfc00117 	ldw	ra,4(sp)
   2175c:	df000017 	ldw	fp,0(sp)
   21760:	dec00204 	addi	sp,sp,8
   21764:	f800283a 	ret

00021768 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   21768:	defffd04 	addi	sp,sp,-12
   2176c:	dfc00215 	stw	ra,8(sp)
   21770:	df000115 	stw	fp,4(sp)
   21774:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   21778:	008000b4 	movhi	r2,2
   2177c:	108a6404 	addi	r2,r2,10640
   21780:	e0bfff15 	stw	r2,-4(fp)
   21784:	00000606 	br	217a0 <_do_ctors+0x38>
        (*ctor) (); 
   21788:	e0bfff17 	ldw	r2,-4(fp)
   2178c:	10800017 	ldw	r2,0(r2)
   21790:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   21794:	e0bfff17 	ldw	r2,-4(fp)
   21798:	10bfff04 	addi	r2,r2,-4
   2179c:	e0bfff15 	stw	r2,-4(fp)
   217a0:	e0ffff17 	ldw	r3,-4(fp)
   217a4:	008000b4 	movhi	r2,2
   217a8:	108a6304 	addi	r2,r2,10636
   217ac:	18bff62e 	bgeu	r3,r2,21788 <__alt_data_end+0xfc021788>
        (*ctor) (); 
}
   217b0:	0001883a 	nop
   217b4:	e037883a 	mov	sp,fp
   217b8:	dfc00117 	ldw	ra,4(sp)
   217bc:	df000017 	ldw	fp,0(sp)
   217c0:	dec00204 	addi	sp,sp,8
   217c4:	f800283a 	ret

000217c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   217c8:	defffd04 	addi	sp,sp,-12
   217cc:	dfc00215 	stw	ra,8(sp)
   217d0:	df000115 	stw	fp,4(sp)
   217d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   217d8:	008000b4 	movhi	r2,2
   217dc:	108a6404 	addi	r2,r2,10640
   217e0:	e0bfff15 	stw	r2,-4(fp)
   217e4:	00000606 	br	21800 <_do_dtors+0x38>
        (*dtor) (); 
   217e8:	e0bfff17 	ldw	r2,-4(fp)
   217ec:	10800017 	ldw	r2,0(r2)
   217f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   217f4:	e0bfff17 	ldw	r2,-4(fp)
   217f8:	10bfff04 	addi	r2,r2,-4
   217fc:	e0bfff15 	stw	r2,-4(fp)
   21800:	e0ffff17 	ldw	r3,-4(fp)
   21804:	008000b4 	movhi	r2,2
   21808:	108a6504 	addi	r2,r2,10644
   2180c:	18bff62e 	bgeu	r3,r2,217e8 <__alt_data_end+0xfc0217e8>
        (*dtor) (); 
}
   21810:	0001883a 	nop
   21814:	e037883a 	mov	sp,fp
   21818:	dfc00117 	ldw	ra,4(sp)
   2181c:	df000017 	ldw	fp,0(sp)
   21820:	dec00204 	addi	sp,sp,8
   21824:	f800283a 	ret

00021828 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   21828:	defffa04 	addi	sp,sp,-24
   2182c:	dfc00515 	stw	ra,20(sp)
   21830:	df000415 	stw	fp,16(sp)
   21834:	df000404 	addi	fp,sp,16
   21838:	e13ffe15 	stw	r4,-8(fp)
   2183c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   21840:	e0bfff17 	ldw	r2,-4(fp)
   21844:	10800017 	ldw	r2,0(r2)
   21848:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2184c:	e13ffe17 	ldw	r4,-8(fp)
   21850:	000e3480 	call	e348 <strlen>
   21854:	10800044 	addi	r2,r2,1
   21858:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2185c:	00000d06 	br	21894 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   21860:	e0bffc17 	ldw	r2,-16(fp)
   21864:	10800217 	ldw	r2,8(r2)
   21868:	e0fffd17 	ldw	r3,-12(fp)
   2186c:	180d883a 	mov	r6,r3
   21870:	e17ffe17 	ldw	r5,-8(fp)
   21874:	1009883a 	mov	r4,r2
   21878:	00226400 	call	22640 <memcmp>
   2187c:	1000021e 	bne	r2,zero,21888 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   21880:	e0bffc17 	ldw	r2,-16(fp)
   21884:	00000706 	br	218a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   21888:	e0bffc17 	ldw	r2,-16(fp)
   2188c:	10800017 	ldw	r2,0(r2)
   21890:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   21894:	e0fffc17 	ldw	r3,-16(fp)
   21898:	e0bfff17 	ldw	r2,-4(fp)
   2189c:	18bff01e 	bne	r3,r2,21860 <__alt_data_end+0xfc021860>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   218a0:	0005883a 	mov	r2,zero
}
   218a4:	e037883a 	mov	sp,fp
   218a8:	dfc00117 	ldw	ra,4(sp)
   218ac:	df000017 	ldw	fp,0(sp)
   218b0:	dec00204 	addi	sp,sp,8
   218b4:	f800283a 	ret

000218b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   218b8:	deffff04 	addi	sp,sp,-4
   218bc:	df000015 	stw	fp,0(sp)
   218c0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   218c4:	0001883a 	nop
   218c8:	e037883a 	mov	sp,fp
   218cc:	df000017 	ldw	fp,0(sp)
   218d0:	dec00104 	addi	sp,sp,4
   218d4:	f800283a 	ret

000218d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   218d8:	defff904 	addi	sp,sp,-28
   218dc:	dfc00615 	stw	ra,24(sp)
   218e0:	df000515 	stw	fp,20(sp)
   218e4:	df000504 	addi	fp,sp,20
   218e8:	e13ffc15 	stw	r4,-16(fp)
   218ec:	e17ffd15 	stw	r5,-12(fp)
   218f0:	e1bffe15 	stw	r6,-8(fp)
   218f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   218f8:	e0800217 	ldw	r2,8(fp)
   218fc:	d8800015 	stw	r2,0(sp)
   21900:	e1ffff17 	ldw	r7,-4(fp)
   21904:	e1bffe17 	ldw	r6,-8(fp)
   21908:	e17ffd17 	ldw	r5,-12(fp)
   2190c:	e13ffc17 	ldw	r4,-16(fp)
   21910:	0021a880 	call	21a88 <alt_iic_isr_register>
}  
   21914:	e037883a 	mov	sp,fp
   21918:	dfc00117 	ldw	ra,4(sp)
   2191c:	df000017 	ldw	fp,0(sp)
   21920:	dec00204 	addi	sp,sp,8
   21924:	f800283a 	ret

00021928 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   21928:	defff904 	addi	sp,sp,-28
   2192c:	df000615 	stw	fp,24(sp)
   21930:	df000604 	addi	fp,sp,24
   21934:	e13ffe15 	stw	r4,-8(fp)
   21938:	e17fff15 	stw	r5,-4(fp)
   2193c:	e0bfff17 	ldw	r2,-4(fp)
   21940:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21944:	0005303a 	rdctl	r2,status
   21948:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2194c:	e0fffb17 	ldw	r3,-20(fp)
   21950:	00bfff84 	movi	r2,-2
   21954:	1884703a 	and	r2,r3,r2
   21958:	1001703a 	wrctl	status,r2
  
  return context;
   2195c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   21960:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   21964:	00c00044 	movi	r3,1
   21968:	e0bffa17 	ldw	r2,-24(fp)
   2196c:	1884983a 	sll	r2,r3,r2
   21970:	1007883a 	mov	r3,r2
   21974:	d0b24617 	ldw	r2,-14056(gp)
   21978:	1884b03a 	or	r2,r3,r2
   2197c:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21980:	d0b24617 	ldw	r2,-14056(gp)
   21984:	100170fa 	wrctl	ienable,r2
   21988:	e0bffc17 	ldw	r2,-16(fp)
   2198c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21990:	e0bffd17 	ldw	r2,-12(fp)
   21994:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21998:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2199c:	0001883a 	nop
}
   219a0:	e037883a 	mov	sp,fp
   219a4:	df000017 	ldw	fp,0(sp)
   219a8:	dec00104 	addi	sp,sp,4
   219ac:	f800283a 	ret

000219b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   219b0:	defff904 	addi	sp,sp,-28
   219b4:	df000615 	stw	fp,24(sp)
   219b8:	df000604 	addi	fp,sp,24
   219bc:	e13ffe15 	stw	r4,-8(fp)
   219c0:	e17fff15 	stw	r5,-4(fp)
   219c4:	e0bfff17 	ldw	r2,-4(fp)
   219c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   219cc:	0005303a 	rdctl	r2,status
   219d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   219d4:	e0fffb17 	ldw	r3,-20(fp)
   219d8:	00bfff84 	movi	r2,-2
   219dc:	1884703a 	and	r2,r3,r2
   219e0:	1001703a 	wrctl	status,r2
  
  return context;
   219e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   219e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   219ec:	00c00044 	movi	r3,1
   219f0:	e0bffa17 	ldw	r2,-24(fp)
   219f4:	1884983a 	sll	r2,r3,r2
   219f8:	0084303a 	nor	r2,zero,r2
   219fc:	1007883a 	mov	r3,r2
   21a00:	d0b24617 	ldw	r2,-14056(gp)
   21a04:	1884703a 	and	r2,r3,r2
   21a08:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21a0c:	d0b24617 	ldw	r2,-14056(gp)
   21a10:	100170fa 	wrctl	ienable,r2
   21a14:	e0bffc17 	ldw	r2,-16(fp)
   21a18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21a1c:	e0bffd17 	ldw	r2,-12(fp)
   21a20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21a24:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   21a28:	0001883a 	nop
}
   21a2c:	e037883a 	mov	sp,fp
   21a30:	df000017 	ldw	fp,0(sp)
   21a34:	dec00104 	addi	sp,sp,4
   21a38:	f800283a 	ret

00021a3c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   21a3c:	defffc04 	addi	sp,sp,-16
   21a40:	df000315 	stw	fp,12(sp)
   21a44:	df000304 	addi	fp,sp,12
   21a48:	e13ffe15 	stw	r4,-8(fp)
   21a4c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   21a50:	000530fa 	rdctl	r2,ienable
   21a54:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   21a58:	00c00044 	movi	r3,1
   21a5c:	e0bfff17 	ldw	r2,-4(fp)
   21a60:	1884983a 	sll	r2,r3,r2
   21a64:	1007883a 	mov	r3,r2
   21a68:	e0bffd17 	ldw	r2,-12(fp)
   21a6c:	1884703a 	and	r2,r3,r2
   21a70:	1004c03a 	cmpne	r2,r2,zero
   21a74:	10803fcc 	andi	r2,r2,255
}
   21a78:	e037883a 	mov	sp,fp
   21a7c:	df000017 	ldw	fp,0(sp)
   21a80:	dec00104 	addi	sp,sp,4
   21a84:	f800283a 	ret

00021a88 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21a88:	defff504 	addi	sp,sp,-44
   21a8c:	dfc00a15 	stw	ra,40(sp)
   21a90:	df000915 	stw	fp,36(sp)
   21a94:	df000904 	addi	fp,sp,36
   21a98:	e13ffc15 	stw	r4,-16(fp)
   21a9c:	e17ffd15 	stw	r5,-12(fp)
   21aa0:	e1bffe15 	stw	r6,-8(fp)
   21aa4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   21aa8:	00bffa84 	movi	r2,-22
   21aac:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   21ab0:	e0bffd17 	ldw	r2,-12(fp)
   21ab4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   21ab8:	e0bff817 	ldw	r2,-32(fp)
   21abc:	10800808 	cmpgei	r2,r2,32
   21ac0:	1000271e 	bne	r2,zero,21b60 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21ac4:	0005303a 	rdctl	r2,status
   21ac8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21acc:	e0fffb17 	ldw	r3,-20(fp)
   21ad0:	00bfff84 	movi	r2,-2
   21ad4:	1884703a 	and	r2,r3,r2
   21ad8:	1001703a 	wrctl	status,r2
  
  return context;
   21adc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   21ae0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   21ae4:	008000f4 	movhi	r2,3
   21ae8:	10bf8804 	addi	r2,r2,-480
   21aec:	e0fff817 	ldw	r3,-32(fp)
   21af0:	180690fa 	slli	r3,r3,3
   21af4:	10c5883a 	add	r2,r2,r3
   21af8:	e0fffe17 	ldw	r3,-8(fp)
   21afc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   21b00:	008000f4 	movhi	r2,3
   21b04:	10bf8804 	addi	r2,r2,-480
   21b08:	e0fff817 	ldw	r3,-32(fp)
   21b0c:	180690fa 	slli	r3,r3,3
   21b10:	10c5883a 	add	r2,r2,r3
   21b14:	10800104 	addi	r2,r2,4
   21b18:	e0ffff17 	ldw	r3,-4(fp)
   21b1c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   21b20:	e0bffe17 	ldw	r2,-8(fp)
   21b24:	10000526 	beq	r2,zero,21b3c <alt_iic_isr_register+0xb4>
   21b28:	e0bff817 	ldw	r2,-32(fp)
   21b2c:	100b883a 	mov	r5,r2
   21b30:	e13ffc17 	ldw	r4,-16(fp)
   21b34:	00219280 	call	21928 <alt_ic_irq_enable>
   21b38:	00000406 	br	21b4c <alt_iic_isr_register+0xc4>
   21b3c:	e0bff817 	ldw	r2,-32(fp)
   21b40:	100b883a 	mov	r5,r2
   21b44:	e13ffc17 	ldw	r4,-16(fp)
   21b48:	00219b00 	call	219b0 <alt_ic_irq_disable>
   21b4c:	e0bff715 	stw	r2,-36(fp)
   21b50:	e0bffa17 	ldw	r2,-24(fp)
   21b54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21b58:	e0bff917 	ldw	r2,-28(fp)
   21b5c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   21b60:	e0bff717 	ldw	r2,-36(fp)
}
   21b64:	e037883a 	mov	sp,fp
   21b68:	dfc00117 	ldw	ra,4(sp)
   21b6c:	df000017 	ldw	fp,0(sp)
   21b70:	dec00204 	addi	sp,sp,8
   21b74:	f800283a 	ret

00021b78 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   21b78:	defff804 	addi	sp,sp,-32
   21b7c:	dfc00715 	stw	ra,28(sp)
   21b80:	df000615 	stw	fp,24(sp)
   21b84:	dc000515 	stw	r16,20(sp)
   21b88:	df000604 	addi	fp,sp,24
   21b8c:	e13ffb15 	stw	r4,-20(fp)
   21b90:	e17ffc15 	stw	r5,-16(fp)
   21b94:	e1bffd15 	stw	r6,-12(fp)
   21b98:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   21b9c:	e1bffe17 	ldw	r6,-8(fp)
   21ba0:	e17ffd17 	ldw	r5,-12(fp)
   21ba4:	e13ffc17 	ldw	r4,-16(fp)
   21ba8:	0021e000 	call	21e00 <open>
   21bac:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   21bb0:	e0bffa17 	ldw	r2,-24(fp)
   21bb4:	10002216 	blt	r2,zero,21c40 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   21bb8:	040000f4 	movhi	r16,3
   21bbc:	84286204 	addi	r16,r16,-24184
   21bc0:	e0bffa17 	ldw	r2,-24(fp)
   21bc4:	01400304 	movi	r5,12
   21bc8:	1009883a 	mov	r4,r2
   21bcc:	000cca00 	call	cca0 <__mulsi3>
   21bd0:	8085883a 	add	r2,r16,r2
   21bd4:	10c00017 	ldw	r3,0(r2)
   21bd8:	e0bffb17 	ldw	r2,-20(fp)
   21bdc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   21be0:	040000f4 	movhi	r16,3
   21be4:	84286204 	addi	r16,r16,-24184
   21be8:	e0bffa17 	ldw	r2,-24(fp)
   21bec:	01400304 	movi	r5,12
   21bf0:	1009883a 	mov	r4,r2
   21bf4:	000cca00 	call	cca0 <__mulsi3>
   21bf8:	8085883a 	add	r2,r16,r2
   21bfc:	10800104 	addi	r2,r2,4
   21c00:	10c00017 	ldw	r3,0(r2)
   21c04:	e0bffb17 	ldw	r2,-20(fp)
   21c08:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   21c0c:	040000f4 	movhi	r16,3
   21c10:	84286204 	addi	r16,r16,-24184
   21c14:	e0bffa17 	ldw	r2,-24(fp)
   21c18:	01400304 	movi	r5,12
   21c1c:	1009883a 	mov	r4,r2
   21c20:	000cca00 	call	cca0 <__mulsi3>
   21c24:	8085883a 	add	r2,r16,r2
   21c28:	10800204 	addi	r2,r2,8
   21c2c:	10c00017 	ldw	r3,0(r2)
   21c30:	e0bffb17 	ldw	r2,-20(fp)
   21c34:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   21c38:	e13ffa17 	ldw	r4,-24(fp)
   21c3c:	001e6400 	call	1e640 <alt_release_fd>
  }
} 
   21c40:	0001883a 	nop
   21c44:	e6ffff04 	addi	sp,fp,-4
   21c48:	dfc00217 	ldw	ra,8(sp)
   21c4c:	df000117 	ldw	fp,4(sp)
   21c50:	dc000017 	ldw	r16,0(sp)
   21c54:	dec00304 	addi	sp,sp,12
   21c58:	f800283a 	ret

00021c5c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   21c5c:	defffb04 	addi	sp,sp,-20
   21c60:	dfc00415 	stw	ra,16(sp)
   21c64:	df000315 	stw	fp,12(sp)
   21c68:	df000304 	addi	fp,sp,12
   21c6c:	e13ffd15 	stw	r4,-12(fp)
   21c70:	e17ffe15 	stw	r5,-8(fp)
   21c74:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   21c78:	01c07fc4 	movi	r7,511
   21c7c:	01800044 	movi	r6,1
   21c80:	e17ffd17 	ldw	r5,-12(fp)
   21c84:	010000f4 	movhi	r4,3
   21c88:	21286504 	addi	r4,r4,-24172
   21c8c:	0021b780 	call	21b78 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   21c90:	01c07fc4 	movi	r7,511
   21c94:	000d883a 	mov	r6,zero
   21c98:	e17ffe17 	ldw	r5,-8(fp)
   21c9c:	010000f4 	movhi	r4,3
   21ca0:	21286204 	addi	r4,r4,-24184
   21ca4:	0021b780 	call	21b78 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   21ca8:	01c07fc4 	movi	r7,511
   21cac:	01800044 	movi	r6,1
   21cb0:	e17fff17 	ldw	r5,-4(fp)
   21cb4:	010000f4 	movhi	r4,3
   21cb8:	21286804 	addi	r4,r4,-24160
   21cbc:	0021b780 	call	21b78 <alt_open_fd>
}  
   21cc0:	0001883a 	nop
   21cc4:	e037883a 	mov	sp,fp
   21cc8:	dfc00117 	ldw	ra,4(sp)
   21ccc:	df000017 	ldw	fp,0(sp)
   21cd0:	dec00204 	addi	sp,sp,8
   21cd4:	f800283a 	ret

00021cd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21cd8:	defffe04 	addi	sp,sp,-8
   21cdc:	dfc00115 	stw	ra,4(sp)
   21ce0:	df000015 	stw	fp,0(sp)
   21ce4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21ce8:	d0a5b717 	ldw	r2,-26916(gp)
   21cec:	10000326 	beq	r2,zero,21cfc <alt_get_errno+0x24>
   21cf0:	d0a5b717 	ldw	r2,-26916(gp)
   21cf4:	103ee83a 	callr	r2
   21cf8:	00000106 	br	21d00 <alt_get_errno+0x28>
   21cfc:	d0b23f04 	addi	r2,gp,-14084
}
   21d00:	e037883a 	mov	sp,fp
   21d04:	dfc00117 	ldw	ra,4(sp)
   21d08:	df000017 	ldw	fp,0(sp)
   21d0c:	dec00204 	addi	sp,sp,8
   21d10:	f800283a 	ret

00021d14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   21d14:	defffb04 	addi	sp,sp,-20
   21d18:	dfc00415 	stw	ra,16(sp)
   21d1c:	df000315 	stw	fp,12(sp)
   21d20:	dc000215 	stw	r16,8(sp)
   21d24:	df000304 	addi	fp,sp,12
   21d28:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   21d2c:	e0bffe17 	ldw	r2,-8(fp)
   21d30:	10800217 	ldw	r2,8(r2)
   21d34:	10d00034 	orhi	r3,r2,16384
   21d38:	e0bffe17 	ldw	r2,-8(fp)
   21d3c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21d40:	e03ffd15 	stw	zero,-12(fp)
   21d44:	00002306 	br	21dd4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21d48:	040000f4 	movhi	r16,3
   21d4c:	84286204 	addi	r16,r16,-24184
   21d50:	e0bffd17 	ldw	r2,-12(fp)
   21d54:	01400304 	movi	r5,12
   21d58:	1009883a 	mov	r4,r2
   21d5c:	000cca00 	call	cca0 <__mulsi3>
   21d60:	8085883a 	add	r2,r16,r2
   21d64:	10c00017 	ldw	r3,0(r2)
   21d68:	e0bffe17 	ldw	r2,-8(fp)
   21d6c:	10800017 	ldw	r2,0(r2)
   21d70:	1880151e 	bne	r3,r2,21dc8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21d74:	040000f4 	movhi	r16,3
   21d78:	84286204 	addi	r16,r16,-24184
   21d7c:	e0bffd17 	ldw	r2,-12(fp)
   21d80:	01400304 	movi	r5,12
   21d84:	1009883a 	mov	r4,r2
   21d88:	000cca00 	call	cca0 <__mulsi3>
   21d8c:	8085883a 	add	r2,r16,r2
   21d90:	10800204 	addi	r2,r2,8
   21d94:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21d98:	10000b0e 	bge	r2,zero,21dc8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   21d9c:	01400304 	movi	r5,12
   21da0:	e13ffd17 	ldw	r4,-12(fp)
   21da4:	000cca00 	call	cca0 <__mulsi3>
   21da8:	1007883a 	mov	r3,r2
   21dac:	008000f4 	movhi	r2,3
   21db0:	10a86204 	addi	r2,r2,-24184
   21db4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21db8:	e0bffe17 	ldw	r2,-8(fp)
   21dbc:	18800226 	beq	r3,r2,21dc8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   21dc0:	00bffcc4 	movi	r2,-13
   21dc4:	00000806 	br	21de8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21dc8:	e0bffd17 	ldw	r2,-12(fp)
   21dcc:	10800044 	addi	r2,r2,1
   21dd0:	e0bffd15 	stw	r2,-12(fp)
   21dd4:	d0a5b617 	ldw	r2,-26920(gp)
   21dd8:	1007883a 	mov	r3,r2
   21ddc:	e0bffd17 	ldw	r2,-12(fp)
   21de0:	18bfd92e 	bgeu	r3,r2,21d48 <__alt_data_end+0xfc021d48>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   21de4:	0005883a 	mov	r2,zero
}
   21de8:	e6ffff04 	addi	sp,fp,-4
   21dec:	dfc00217 	ldw	ra,8(sp)
   21df0:	df000117 	ldw	fp,4(sp)
   21df4:	dc000017 	ldw	r16,0(sp)
   21df8:	dec00304 	addi	sp,sp,12
   21dfc:	f800283a 	ret

00021e00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   21e00:	defff604 	addi	sp,sp,-40
   21e04:	dfc00915 	stw	ra,36(sp)
   21e08:	df000815 	stw	fp,32(sp)
   21e0c:	df000804 	addi	fp,sp,32
   21e10:	e13ffd15 	stw	r4,-12(fp)
   21e14:	e17ffe15 	stw	r5,-8(fp)
   21e18:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   21e1c:	00bfffc4 	movi	r2,-1
   21e20:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   21e24:	00bffb44 	movi	r2,-19
   21e28:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   21e2c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   21e30:	d165b404 	addi	r5,gp,-26928
   21e34:	e13ffd17 	ldw	r4,-12(fp)
   21e38:	00218280 	call	21828 <alt_find_dev>
   21e3c:	e0bff815 	stw	r2,-32(fp)
   21e40:	e0bff817 	ldw	r2,-32(fp)
   21e44:	1000051e 	bne	r2,zero,21e5c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   21e48:	e13ffd17 	ldw	r4,-12(fp)
   21e4c:	002238c0 	call	2238c <alt_find_file>
   21e50:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   21e54:	00800044 	movi	r2,1
   21e58:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   21e5c:	e0bff817 	ldw	r2,-32(fp)
   21e60:	10002b26 	beq	r2,zero,21f10 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   21e64:	e13ff817 	ldw	r4,-32(fp)
   21e68:	00224940 	call	22494 <alt_get_fd>
   21e6c:	e0bff915 	stw	r2,-28(fp)
   21e70:	e0bff917 	ldw	r2,-28(fp)
   21e74:	1000030e 	bge	r2,zero,21e84 <open+0x84>
    {
      status = index;
   21e78:	e0bff917 	ldw	r2,-28(fp)
   21e7c:	e0bffa15 	stw	r2,-24(fp)
   21e80:	00002506 	br	21f18 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   21e84:	01400304 	movi	r5,12
   21e88:	e13ff917 	ldw	r4,-28(fp)
   21e8c:	000cca00 	call	cca0 <__mulsi3>
   21e90:	1007883a 	mov	r3,r2
   21e94:	008000f4 	movhi	r2,3
   21e98:	10a86204 	addi	r2,r2,-24184
   21e9c:	1885883a 	add	r2,r3,r2
   21ea0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   21ea4:	e0fffe17 	ldw	r3,-8(fp)
   21ea8:	00900034 	movhi	r2,16384
   21eac:	10bfffc4 	addi	r2,r2,-1
   21eb0:	1886703a 	and	r3,r3,r2
   21eb4:	e0bffc17 	ldw	r2,-16(fp)
   21eb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   21ebc:	e0bffb17 	ldw	r2,-20(fp)
   21ec0:	1000051e 	bne	r2,zero,21ed8 <open+0xd8>
   21ec4:	e13ffc17 	ldw	r4,-16(fp)
   21ec8:	0021d140 	call	21d14 <alt_file_locked>
   21ecc:	e0bffa15 	stw	r2,-24(fp)
   21ed0:	e0bffa17 	ldw	r2,-24(fp)
   21ed4:	10001016 	blt	r2,zero,21f18 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   21ed8:	e0bff817 	ldw	r2,-32(fp)
   21edc:	10800317 	ldw	r2,12(r2)
   21ee0:	10000826 	beq	r2,zero,21f04 <open+0x104>
   21ee4:	e0bff817 	ldw	r2,-32(fp)
   21ee8:	10800317 	ldw	r2,12(r2)
   21eec:	e1ffff17 	ldw	r7,-4(fp)
   21ef0:	e1bffe17 	ldw	r6,-8(fp)
   21ef4:	e17ffd17 	ldw	r5,-12(fp)
   21ef8:	e13ffc17 	ldw	r4,-16(fp)
   21efc:	103ee83a 	callr	r2
   21f00:	00000106 	br	21f08 <open+0x108>
   21f04:	0005883a 	mov	r2,zero
   21f08:	e0bffa15 	stw	r2,-24(fp)
   21f0c:	00000206 	br	21f18 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   21f10:	00bffb44 	movi	r2,-19
   21f14:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   21f18:	e0bffa17 	ldw	r2,-24(fp)
   21f1c:	1000090e 	bge	r2,zero,21f44 <open+0x144>
  {
    alt_release_fd (index);  
   21f20:	e13ff917 	ldw	r4,-28(fp)
   21f24:	001e6400 	call	1e640 <alt_release_fd>
    ALT_ERRNO = -status;
   21f28:	0021cd80 	call	21cd8 <alt_get_errno>
   21f2c:	1007883a 	mov	r3,r2
   21f30:	e0bffa17 	ldw	r2,-24(fp)
   21f34:	0085c83a 	sub	r2,zero,r2
   21f38:	18800015 	stw	r2,0(r3)
    return -1;
   21f3c:	00bfffc4 	movi	r2,-1
   21f40:	00000106 	br	21f48 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   21f44:	e0bff917 	ldw	r2,-28(fp)
}
   21f48:	e037883a 	mov	sp,fp
   21f4c:	dfc00117 	ldw	ra,4(sp)
   21f50:	df000017 	ldw	fp,0(sp)
   21f54:	dec00204 	addi	sp,sp,8
   21f58:	f800283a 	ret

00021f5c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   21f5c:	defff204 	addi	sp,sp,-56
   21f60:	dfc00a15 	stw	ra,40(sp)
   21f64:	df000915 	stw	fp,36(sp)
   21f68:	df000904 	addi	fp,sp,36
   21f6c:	e13fff15 	stw	r4,-4(fp)
   21f70:	e1400215 	stw	r5,8(fp)
   21f74:	e1800315 	stw	r6,12(fp)
   21f78:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   21f7c:	e0800204 	addi	r2,fp,8
   21f80:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   21f84:	e0bfff17 	ldw	r2,-4(fp)
   21f88:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   21f8c:	00006f06 	br	2214c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   21f90:	e0bff807 	ldb	r2,-32(fp)
   21f94:	10800960 	cmpeqi	r2,r2,37
   21f98:	1000041e 	bne	r2,zero,21fac <alt_printf+0x50>
        {
            alt_putchar(c);
   21f9c:	e0bff807 	ldb	r2,-32(fp)
   21fa0:	1009883a 	mov	r4,r2
   21fa4:	00221880 	call	22188 <alt_putchar>
   21fa8:	00006806 	br	2214c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   21fac:	e0bff717 	ldw	r2,-36(fp)
   21fb0:	10c00044 	addi	r3,r2,1
   21fb4:	e0fff715 	stw	r3,-36(fp)
   21fb8:	10800003 	ldbu	r2,0(r2)
   21fbc:	e0bff805 	stb	r2,-32(fp)
   21fc0:	e0bff807 	ldb	r2,-32(fp)
   21fc4:	10006926 	beq	r2,zero,2216c <alt_printf+0x210>
            {
                if (c == '%')
   21fc8:	e0bff807 	ldb	r2,-32(fp)
   21fcc:	10800958 	cmpnei	r2,r2,37
   21fd0:	1000041e 	bne	r2,zero,21fe4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   21fd4:	e0bff807 	ldb	r2,-32(fp)
   21fd8:	1009883a 	mov	r4,r2
   21fdc:	00221880 	call	22188 <alt_putchar>
   21fe0:	00005a06 	br	2214c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   21fe4:	e0bff807 	ldb	r2,-32(fp)
   21fe8:	108018d8 	cmpnei	r2,r2,99
   21fec:	1000081e 	bne	r2,zero,22010 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   21ff0:	e0bffe17 	ldw	r2,-8(fp)
   21ff4:	10c00104 	addi	r3,r2,4
   21ff8:	e0fffe15 	stw	r3,-8(fp)
   21ffc:	10800017 	ldw	r2,0(r2)
   22000:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   22004:	e13ffd17 	ldw	r4,-12(fp)
   22008:	00221880 	call	22188 <alt_putchar>
   2200c:	00004f06 	br	2214c <alt_printf+0x1f0>
                }
                else if (c == 'x')
   22010:	e0bff807 	ldb	r2,-32(fp)
   22014:	10801e18 	cmpnei	r2,r2,120
   22018:	1000341e 	bne	r2,zero,220ec <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   2201c:	e0bffe17 	ldw	r2,-8(fp)
   22020:	10c00104 	addi	r3,r2,4
   22024:	e0fffe15 	stw	r3,-8(fp)
   22028:	10800017 	ldw	r2,0(r2)
   2202c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   22030:	e0bffb17 	ldw	r2,-20(fp)
   22034:	1000031e 	bne	r2,zero,22044 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   22038:	01000c04 	movi	r4,48
   2203c:	00221880 	call	22188 <alt_putchar>
                        continue;
   22040:	00004206 	br	2214c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   22044:	00800704 	movi	r2,28
   22048:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   2204c:	00000306 	br	2205c <alt_printf+0x100>
                        digit_shift -= 4;
   22050:	e0bff917 	ldw	r2,-28(fp)
   22054:	10bfff04 	addi	r2,r2,-4
   22058:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   2205c:	00c003c4 	movi	r3,15
   22060:	e0bff917 	ldw	r2,-28(fp)
   22064:	1884983a 	sll	r2,r3,r2
   22068:	1007883a 	mov	r3,r2
   2206c:	e0bffb17 	ldw	r2,-20(fp)
   22070:	1884703a 	and	r2,r3,r2
   22074:	103ff626 	beq	r2,zero,22050 <__alt_data_end+0xfc022050>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   22078:	00001906 	br	220e0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   2207c:	00c003c4 	movi	r3,15
   22080:	e0bff917 	ldw	r2,-28(fp)
   22084:	1884983a 	sll	r2,r3,r2
   22088:	1007883a 	mov	r3,r2
   2208c:	e0bffb17 	ldw	r2,-20(fp)
   22090:	1886703a 	and	r3,r3,r2
   22094:	e0bff917 	ldw	r2,-28(fp)
   22098:	1884d83a 	srl	r2,r3,r2
   2209c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   220a0:	e0bffc17 	ldw	r2,-16(fp)
   220a4:	108002a8 	cmpgeui	r2,r2,10
   220a8:	1000041e 	bne	r2,zero,220bc <alt_printf+0x160>
                            c = '0' + digit;
   220ac:	e0bffc17 	ldw	r2,-16(fp)
   220b0:	10800c04 	addi	r2,r2,48
   220b4:	e0bff805 	stb	r2,-32(fp)
   220b8:	00000306 	br	220c8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   220bc:	e0bffc17 	ldw	r2,-16(fp)
   220c0:	108015c4 	addi	r2,r2,87
   220c4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   220c8:	e0bff807 	ldb	r2,-32(fp)
   220cc:	1009883a 	mov	r4,r2
   220d0:	00221880 	call	22188 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   220d4:	e0bff917 	ldw	r2,-28(fp)
   220d8:	10bfff04 	addi	r2,r2,-4
   220dc:	e0bff915 	stw	r2,-28(fp)
   220e0:	e0bff917 	ldw	r2,-28(fp)
   220e4:	103fe50e 	bge	r2,zero,2207c <__alt_data_end+0xfc02207c>
   220e8:	00001806 	br	2214c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   220ec:	e0bff807 	ldb	r2,-32(fp)
   220f0:	10801cd8 	cmpnei	r2,r2,115
   220f4:	1000151e 	bne	r2,zero,2214c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   220f8:	e0bffe17 	ldw	r2,-8(fp)
   220fc:	10c00104 	addi	r3,r2,4
   22100:	e0fffe15 	stw	r3,-8(fp)
   22104:	10800017 	ldw	r2,0(r2)
   22108:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   2210c:	00000906 	br	22134 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   22110:	e0bffa17 	ldw	r2,-24(fp)
   22114:	10c00044 	addi	r3,r2,1
   22118:	e0fffa15 	stw	r3,-24(fp)
   2211c:	10800003 	ldbu	r2,0(r2)
   22120:	10803fcc 	andi	r2,r2,255
   22124:	1080201c 	xori	r2,r2,128
   22128:	10bfe004 	addi	r2,r2,-128
   2212c:	1009883a 	mov	r4,r2
   22130:	00221880 	call	22188 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   22134:	e0bffa17 	ldw	r2,-24(fp)
   22138:	10800003 	ldbu	r2,0(r2)
   2213c:	10803fcc 	andi	r2,r2,255
   22140:	1080201c 	xori	r2,r2,128
   22144:	10bfe004 	addi	r2,r2,-128
   22148:	103ff11e 	bne	r2,zero,22110 <__alt_data_end+0xfc022110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   2214c:	e0bff717 	ldw	r2,-36(fp)
   22150:	10c00044 	addi	r3,r2,1
   22154:	e0fff715 	stw	r3,-36(fp)
   22158:	10800003 	ldbu	r2,0(r2)
   2215c:	e0bff805 	stb	r2,-32(fp)
   22160:	e0bff807 	ldb	r2,-32(fp)
   22164:	103f8a1e 	bne	r2,zero,21f90 <__alt_data_end+0xfc021f90>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   22168:	00000106 	br	22170 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   2216c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   22170:	0001883a 	nop
   22174:	e037883a 	mov	sp,fp
   22178:	dfc00117 	ldw	ra,4(sp)
   2217c:	df000017 	ldw	fp,0(sp)
   22180:	dec00504 	addi	sp,sp,20
   22184:	f800283a 	ret

00022188 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   22188:	defffd04 	addi	sp,sp,-12
   2218c:	dfc00215 	stw	ra,8(sp)
   22190:	df000115 	stw	fp,4(sp)
   22194:	df000104 	addi	fp,sp,4
   22198:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   2219c:	d0a5ad17 	ldw	r2,-26956(gp)
   221a0:	10800217 	ldw	r2,8(r2)
   221a4:	100b883a 	mov	r5,r2
   221a8:	e13fff17 	ldw	r4,-4(fp)
   221ac:	0016b680 	call	16b68 <putc>
#endif
#endif
}
   221b0:	e037883a 	mov	sp,fp
   221b4:	dfc00117 	ldw	ra,4(sp)
   221b8:	df000017 	ldw	fp,0(sp)
   221bc:	dec00204 	addi	sp,sp,8
   221c0:	f800283a 	ret

000221c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   221c4:	defffa04 	addi	sp,sp,-24
   221c8:	df000515 	stw	fp,20(sp)
   221cc:	df000504 	addi	fp,sp,20
   221d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   221d4:	0005303a 	rdctl	r2,status
   221d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   221dc:	e0fffc17 	ldw	r3,-16(fp)
   221e0:	00bfff84 	movi	r2,-2
   221e4:	1884703a 	and	r2,r3,r2
   221e8:	1001703a 	wrctl	status,r2
  
  return context;
   221ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   221f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   221f4:	e0bfff17 	ldw	r2,-4(fp)
   221f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   221fc:	e0bffd17 	ldw	r2,-12(fp)
   22200:	10800017 	ldw	r2,0(r2)
   22204:	e0fffd17 	ldw	r3,-12(fp)
   22208:	18c00117 	ldw	r3,4(r3)
   2220c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   22210:	e0bffd17 	ldw	r2,-12(fp)
   22214:	10800117 	ldw	r2,4(r2)
   22218:	e0fffd17 	ldw	r3,-12(fp)
   2221c:	18c00017 	ldw	r3,0(r3)
   22220:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   22224:	e0bffd17 	ldw	r2,-12(fp)
   22228:	e0fffd17 	ldw	r3,-12(fp)
   2222c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   22230:	e0bffd17 	ldw	r2,-12(fp)
   22234:	e0fffd17 	ldw	r3,-12(fp)
   22238:	10c00015 	stw	r3,0(r2)
   2223c:	e0bffb17 	ldw	r2,-20(fp)
   22240:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22244:	e0bffe17 	ldw	r2,-8(fp)
   22248:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2224c:	0001883a 	nop
   22250:	e037883a 	mov	sp,fp
   22254:	df000017 	ldw	fp,0(sp)
   22258:	dec00104 	addi	sp,sp,4
   2225c:	f800283a 	ret

00022260 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   22260:	defffb04 	addi	sp,sp,-20
   22264:	dfc00415 	stw	ra,16(sp)
   22268:	df000315 	stw	fp,12(sp)
   2226c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   22270:	d0a5bc17 	ldw	r2,-26896(gp)
   22274:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   22278:	d0b24817 	ldw	r2,-14048(gp)
   2227c:	10800044 	addi	r2,r2,1
   22280:	d0b24815 	stw	r2,-14048(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22284:	00002e06 	br	22340 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   22288:	e0bffd17 	ldw	r2,-12(fp)
   2228c:	10800017 	ldw	r2,0(r2)
   22290:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   22294:	e0bffd17 	ldw	r2,-12(fp)
   22298:	10800403 	ldbu	r2,16(r2)
   2229c:	10803fcc 	andi	r2,r2,255
   222a0:	10000426 	beq	r2,zero,222b4 <alt_tick+0x54>
   222a4:	d0b24817 	ldw	r2,-14048(gp)
   222a8:	1000021e 	bne	r2,zero,222b4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   222ac:	e0bffd17 	ldw	r2,-12(fp)
   222b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   222b4:	e0bffd17 	ldw	r2,-12(fp)
   222b8:	10800217 	ldw	r2,8(r2)
   222bc:	d0f24817 	ldw	r3,-14048(gp)
   222c0:	18801d36 	bltu	r3,r2,22338 <alt_tick+0xd8>
   222c4:	e0bffd17 	ldw	r2,-12(fp)
   222c8:	10800403 	ldbu	r2,16(r2)
   222cc:	10803fcc 	andi	r2,r2,255
   222d0:	1000191e 	bne	r2,zero,22338 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   222d4:	e0bffd17 	ldw	r2,-12(fp)
   222d8:	10800317 	ldw	r2,12(r2)
   222dc:	e0fffd17 	ldw	r3,-12(fp)
   222e0:	18c00517 	ldw	r3,20(r3)
   222e4:	1809883a 	mov	r4,r3
   222e8:	103ee83a 	callr	r2
   222ec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   222f0:	e0bfff17 	ldw	r2,-4(fp)
   222f4:	1000031e 	bne	r2,zero,22304 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   222f8:	e13ffd17 	ldw	r4,-12(fp)
   222fc:	00221c40 	call	221c4 <alt_alarm_stop>
   22300:	00000d06 	br	22338 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   22304:	e0bffd17 	ldw	r2,-12(fp)
   22308:	10c00217 	ldw	r3,8(r2)
   2230c:	e0bfff17 	ldw	r2,-4(fp)
   22310:	1887883a 	add	r3,r3,r2
   22314:	e0bffd17 	ldw	r2,-12(fp)
   22318:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2231c:	e0bffd17 	ldw	r2,-12(fp)
   22320:	10c00217 	ldw	r3,8(r2)
   22324:	d0b24817 	ldw	r2,-14048(gp)
   22328:	1880032e 	bgeu	r3,r2,22338 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2232c:	e0bffd17 	ldw	r2,-12(fp)
   22330:	00c00044 	movi	r3,1
   22334:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   22338:	e0bffe17 	ldw	r2,-8(fp)
   2233c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22340:	e0fffd17 	ldw	r3,-12(fp)
   22344:	d0a5bc04 	addi	r2,gp,-26896
   22348:	18bfcf1e 	bne	r3,r2,22288 <__alt_data_end+0xfc022288>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2234c:	0001883a 	nop
}
   22350:	0001883a 	nop
   22354:	e037883a 	mov	sp,fp
   22358:	dfc00117 	ldw	ra,4(sp)
   2235c:	df000017 	ldw	fp,0(sp)
   22360:	dec00204 	addi	sp,sp,8
   22364:	f800283a 	ret

00022368 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   22368:	deffff04 	addi	sp,sp,-4
   2236c:	df000015 	stw	fp,0(sp)
   22370:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   22374:	000170fa 	wrctl	ienable,zero
}
   22378:	0001883a 	nop
   2237c:	e037883a 	mov	sp,fp
   22380:	df000017 	ldw	fp,0(sp)
   22384:	dec00104 	addi	sp,sp,4
   22388:	f800283a 	ret

0002238c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2238c:	defffb04 	addi	sp,sp,-20
   22390:	dfc00415 	stw	ra,16(sp)
   22394:	df000315 	stw	fp,12(sp)
   22398:	df000304 	addi	fp,sp,12
   2239c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   223a0:	d0a5b217 	ldw	r2,-26936(gp)
   223a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   223a8:	00003106 	br	22470 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   223ac:	e0bffd17 	ldw	r2,-12(fp)
   223b0:	10800217 	ldw	r2,8(r2)
   223b4:	1009883a 	mov	r4,r2
   223b8:	000e3480 	call	e348 <strlen>
   223bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   223c0:	e0bffd17 	ldw	r2,-12(fp)
   223c4:	10c00217 	ldw	r3,8(r2)
   223c8:	e0bffe17 	ldw	r2,-8(fp)
   223cc:	10bfffc4 	addi	r2,r2,-1
   223d0:	1885883a 	add	r2,r3,r2
   223d4:	10800003 	ldbu	r2,0(r2)
   223d8:	10803fcc 	andi	r2,r2,255
   223dc:	1080201c 	xori	r2,r2,128
   223e0:	10bfe004 	addi	r2,r2,-128
   223e4:	10800bd8 	cmpnei	r2,r2,47
   223e8:	1000031e 	bne	r2,zero,223f8 <alt_find_file+0x6c>
    {
      len -= 1;
   223ec:	e0bffe17 	ldw	r2,-8(fp)
   223f0:	10bfffc4 	addi	r2,r2,-1
   223f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   223f8:	e0bffe17 	ldw	r2,-8(fp)
   223fc:	e0ffff17 	ldw	r3,-4(fp)
   22400:	1885883a 	add	r2,r3,r2
   22404:	10800003 	ldbu	r2,0(r2)
   22408:	10803fcc 	andi	r2,r2,255
   2240c:	1080201c 	xori	r2,r2,128
   22410:	10bfe004 	addi	r2,r2,-128
   22414:	10800be0 	cmpeqi	r2,r2,47
   22418:	1000081e 	bne	r2,zero,2243c <alt_find_file+0xb0>
   2241c:	e0bffe17 	ldw	r2,-8(fp)
   22420:	e0ffff17 	ldw	r3,-4(fp)
   22424:	1885883a 	add	r2,r3,r2
   22428:	10800003 	ldbu	r2,0(r2)
   2242c:	10803fcc 	andi	r2,r2,255
   22430:	1080201c 	xori	r2,r2,128
   22434:	10bfe004 	addi	r2,r2,-128
   22438:	10000a1e 	bne	r2,zero,22464 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   2243c:	e0bffd17 	ldw	r2,-12(fp)
   22440:	10800217 	ldw	r2,8(r2)
   22444:	e0fffe17 	ldw	r3,-8(fp)
   22448:	180d883a 	mov	r6,r3
   2244c:	e17fff17 	ldw	r5,-4(fp)
   22450:	1009883a 	mov	r4,r2
   22454:	00226400 	call	22640 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22458:	1000021e 	bne	r2,zero,22464 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2245c:	e0bffd17 	ldw	r2,-12(fp)
   22460:	00000706 	br	22480 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   22464:	e0bffd17 	ldw	r2,-12(fp)
   22468:	10800017 	ldw	r2,0(r2)
   2246c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22470:	e0fffd17 	ldw	r3,-12(fp)
   22474:	d0a5b204 	addi	r2,gp,-26936
   22478:	18bfcc1e 	bne	r3,r2,223ac <__alt_data_end+0xfc0223ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2247c:	0005883a 	mov	r2,zero
}
   22480:	e037883a 	mov	sp,fp
   22484:	dfc00117 	ldw	ra,4(sp)
   22488:	df000017 	ldw	fp,0(sp)
   2248c:	dec00204 	addi	sp,sp,8
   22490:	f800283a 	ret

00022494 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   22494:	defffa04 	addi	sp,sp,-24
   22498:	dfc00515 	stw	ra,20(sp)
   2249c:	df000415 	stw	fp,16(sp)
   224a0:	dc000315 	stw	r16,12(sp)
   224a4:	df000404 	addi	fp,sp,16
   224a8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   224ac:	00bffa04 	movi	r2,-24
   224b0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   224b4:	e03ffc15 	stw	zero,-16(fp)
   224b8:	00001d06 	br	22530 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   224bc:	040000f4 	movhi	r16,3
   224c0:	84286204 	addi	r16,r16,-24184
   224c4:	e0bffc17 	ldw	r2,-16(fp)
   224c8:	01400304 	movi	r5,12
   224cc:	1009883a 	mov	r4,r2
   224d0:	000cca00 	call	cca0 <__mulsi3>
   224d4:	8085883a 	add	r2,r16,r2
   224d8:	10800017 	ldw	r2,0(r2)
   224dc:	1000111e 	bne	r2,zero,22524 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   224e0:	040000f4 	movhi	r16,3
   224e4:	84286204 	addi	r16,r16,-24184
   224e8:	e0bffc17 	ldw	r2,-16(fp)
   224ec:	01400304 	movi	r5,12
   224f0:	1009883a 	mov	r4,r2
   224f4:	000cca00 	call	cca0 <__mulsi3>
   224f8:	8085883a 	add	r2,r16,r2
   224fc:	e0fffe17 	ldw	r3,-8(fp)
   22500:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   22504:	d0e5b617 	ldw	r3,-26920(gp)
   22508:	e0bffc17 	ldw	r2,-16(fp)
   2250c:	1880020e 	bge	r3,r2,22518 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   22510:	e0bffc17 	ldw	r2,-16(fp)
   22514:	d0a5b615 	stw	r2,-26920(gp)
      }
      rc = i;
   22518:	e0bffc17 	ldw	r2,-16(fp)
   2251c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   22520:	00000606 	br	2253c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22524:	e0bffc17 	ldw	r2,-16(fp)
   22528:	10800044 	addi	r2,r2,1
   2252c:	e0bffc15 	stw	r2,-16(fp)
   22530:	e0bffc17 	ldw	r2,-16(fp)
   22534:	10800810 	cmplti	r2,r2,32
   22538:	103fe01e 	bne	r2,zero,224bc <__alt_data_end+0xfc0224bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2253c:	e0bffd17 	ldw	r2,-12(fp)
}
   22540:	e6ffff04 	addi	sp,fp,-4
   22544:	dfc00217 	ldw	ra,8(sp)
   22548:	df000117 	ldw	fp,4(sp)
   2254c:	dc000017 	ldw	r16,0(sp)
   22550:	dec00304 	addi	sp,sp,12
   22554:	f800283a 	ret

00022558 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   22558:	defffe04 	addi	sp,sp,-8
   2255c:	df000115 	stw	fp,4(sp)
   22560:	df000104 	addi	fp,sp,4
   22564:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   22568:	e0bfff17 	ldw	r2,-4(fp)
   2256c:	10bffe84 	addi	r2,r2,-6
   22570:	10c00428 	cmpgeui	r3,r2,16
   22574:	18001a1e 	bne	r3,zero,225e0 <alt_exception_cause_generated_bad_addr+0x88>
   22578:	100690ba 	slli	r3,r2,2
   2257c:	008000b4 	movhi	r2,2
   22580:	10896404 	addi	r2,r2,9616
   22584:	1885883a 	add	r2,r3,r2
   22588:	10800017 	ldw	r2,0(r2)
   2258c:	1000683a 	jmp	r2
   22590:	000225d0 	cmplti	zero,zero,2199
   22594:	000225d0 	cmplti	zero,zero,2199
   22598:	000225e0 	cmpeqi	zero,zero,2199
   2259c:	000225e0 	cmpeqi	zero,zero,2199
   225a0:	000225e0 	cmpeqi	zero,zero,2199
   225a4:	000225d0 	cmplti	zero,zero,2199
   225a8:	000225d8 	cmpnei	zero,zero,2199
   225ac:	000225e0 	cmpeqi	zero,zero,2199
   225b0:	000225d0 	cmplti	zero,zero,2199
   225b4:	000225d0 	cmplti	zero,zero,2199
   225b8:	000225e0 	cmpeqi	zero,zero,2199
   225bc:	000225d0 	cmplti	zero,zero,2199
   225c0:	000225d8 	cmpnei	zero,zero,2199
   225c4:	000225e0 	cmpeqi	zero,zero,2199
   225c8:	000225e0 	cmpeqi	zero,zero,2199
   225cc:	000225d0 	cmplti	zero,zero,2199
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   225d0:	00800044 	movi	r2,1
   225d4:	00000306 	br	225e4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   225d8:	0005883a 	mov	r2,zero
   225dc:	00000106 	br	225e4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   225e0:	0005883a 	mov	r2,zero
  }
}
   225e4:	e037883a 	mov	sp,fp
   225e8:	df000017 	ldw	fp,0(sp)
   225ec:	dec00104 	addi	sp,sp,4
   225f0:	f800283a 	ret

000225f4 <atexit>:
   225f4:	200b883a 	mov	r5,r4
   225f8:	000f883a 	mov	r7,zero
   225fc:	000d883a 	mov	r6,zero
   22600:	0009883a 	mov	r4,zero
   22604:	00226bc1 	jmpi	226bc <__register_exitproc>

00022608 <exit>:
   22608:	defffe04 	addi	sp,sp,-8
   2260c:	000b883a 	mov	r5,zero
   22610:	dc000015 	stw	r16,0(sp)
   22614:	dfc00115 	stw	ra,4(sp)
   22618:	2021883a 	mov	r16,r4
   2261c:	00227d40 	call	227d4 <__call_exitprocs>
   22620:	008000f4 	movhi	r2,3
   22624:	10b29404 	addi	r2,r2,-13744
   22628:	11000017 	ldw	r4,0(r2)
   2262c:	20800f17 	ldw	r2,60(r4)
   22630:	10000126 	beq	r2,zero,22638 <exit+0x30>
   22634:	103ee83a 	callr	r2
   22638:	8009883a 	mov	r4,r16
   2263c:	001de9c0 	call	1de9c <_exit>

00022640 <memcmp>:
   22640:	01c000c4 	movi	r7,3
   22644:	3980192e 	bgeu	r7,r6,226ac <memcmp+0x6c>
   22648:	2144b03a 	or	r2,r4,r5
   2264c:	11c4703a 	and	r2,r2,r7
   22650:	10000f26 	beq	r2,zero,22690 <memcmp+0x50>
   22654:	20800003 	ldbu	r2,0(r4)
   22658:	28c00003 	ldbu	r3,0(r5)
   2265c:	10c0151e 	bne	r2,r3,226b4 <memcmp+0x74>
   22660:	31bfff84 	addi	r6,r6,-2
   22664:	01ffffc4 	movi	r7,-1
   22668:	00000406 	br	2267c <memcmp+0x3c>
   2266c:	20800003 	ldbu	r2,0(r4)
   22670:	28c00003 	ldbu	r3,0(r5)
   22674:	31bfffc4 	addi	r6,r6,-1
   22678:	10c00e1e 	bne	r2,r3,226b4 <memcmp+0x74>
   2267c:	21000044 	addi	r4,r4,1
   22680:	29400044 	addi	r5,r5,1
   22684:	31fff91e 	bne	r6,r7,2266c <__alt_data_end+0xfc02266c>
   22688:	0005883a 	mov	r2,zero
   2268c:	f800283a 	ret
   22690:	20c00017 	ldw	r3,0(r4)
   22694:	28800017 	ldw	r2,0(r5)
   22698:	18bfee1e 	bne	r3,r2,22654 <__alt_data_end+0xfc022654>
   2269c:	31bfff04 	addi	r6,r6,-4
   226a0:	21000104 	addi	r4,r4,4
   226a4:	29400104 	addi	r5,r5,4
   226a8:	39bff936 	bltu	r7,r6,22690 <__alt_data_end+0xfc022690>
   226ac:	303fe91e 	bne	r6,zero,22654 <__alt_data_end+0xfc022654>
   226b0:	003ff506 	br	22688 <__alt_data_end+0xfc022688>
   226b4:	10c5c83a 	sub	r2,r2,r3
   226b8:	f800283a 	ret

000226bc <__register_exitproc>:
   226bc:	defffa04 	addi	sp,sp,-24
   226c0:	dc000315 	stw	r16,12(sp)
   226c4:	040000f4 	movhi	r16,3
   226c8:	84329404 	addi	r16,r16,-13744
   226cc:	80c00017 	ldw	r3,0(r16)
   226d0:	dc400415 	stw	r17,16(sp)
   226d4:	dfc00515 	stw	ra,20(sp)
   226d8:	18805217 	ldw	r2,328(r3)
   226dc:	2023883a 	mov	r17,r4
   226e0:	10003726 	beq	r2,zero,227c0 <__register_exitproc+0x104>
   226e4:	10c00117 	ldw	r3,4(r2)
   226e8:	010007c4 	movi	r4,31
   226ec:	20c00e16 	blt	r4,r3,22728 <__register_exitproc+0x6c>
   226f0:	1a000044 	addi	r8,r3,1
   226f4:	8800221e 	bne	r17,zero,22780 <__register_exitproc+0xc4>
   226f8:	18c00084 	addi	r3,r3,2
   226fc:	18c7883a 	add	r3,r3,r3
   22700:	18c7883a 	add	r3,r3,r3
   22704:	12000115 	stw	r8,4(r2)
   22708:	10c7883a 	add	r3,r2,r3
   2270c:	19400015 	stw	r5,0(r3)
   22710:	0005883a 	mov	r2,zero
   22714:	dfc00517 	ldw	ra,20(sp)
   22718:	dc400417 	ldw	r17,16(sp)
   2271c:	dc000317 	ldw	r16,12(sp)
   22720:	dec00604 	addi	sp,sp,24
   22724:	f800283a 	ret
   22728:	00800074 	movhi	r2,1
   2272c:	10b49304 	addi	r2,r2,-11700
   22730:	10002626 	beq	r2,zero,227cc <__register_exitproc+0x110>
   22734:	01006404 	movi	r4,400
   22738:	d9400015 	stw	r5,0(sp)
   2273c:	d9800115 	stw	r6,4(sp)
   22740:	d9c00215 	stw	r7,8(sp)
   22744:	000d24c0 	call	d24c <malloc>
   22748:	d9400017 	ldw	r5,0(sp)
   2274c:	d9800117 	ldw	r6,4(sp)
   22750:	d9c00217 	ldw	r7,8(sp)
   22754:	10001d26 	beq	r2,zero,227cc <__register_exitproc+0x110>
   22758:	81000017 	ldw	r4,0(r16)
   2275c:	10000115 	stw	zero,4(r2)
   22760:	02000044 	movi	r8,1
   22764:	22405217 	ldw	r9,328(r4)
   22768:	0007883a 	mov	r3,zero
   2276c:	12400015 	stw	r9,0(r2)
   22770:	20805215 	stw	r2,328(r4)
   22774:	10006215 	stw	zero,392(r2)
   22778:	10006315 	stw	zero,396(r2)
   2277c:	883fde26 	beq	r17,zero,226f8 <__alt_data_end+0xfc0226f8>
   22780:	18c9883a 	add	r4,r3,r3
   22784:	2109883a 	add	r4,r4,r4
   22788:	1109883a 	add	r4,r2,r4
   2278c:	21802215 	stw	r6,136(r4)
   22790:	01800044 	movi	r6,1
   22794:	12406217 	ldw	r9,392(r2)
   22798:	30cc983a 	sll	r6,r6,r3
   2279c:	4992b03a 	or	r9,r9,r6
   227a0:	12406215 	stw	r9,392(r2)
   227a4:	21c04215 	stw	r7,264(r4)
   227a8:	01000084 	movi	r4,2
   227ac:	893fd21e 	bne	r17,r4,226f8 <__alt_data_end+0xfc0226f8>
   227b0:	11006317 	ldw	r4,396(r2)
   227b4:	218cb03a 	or	r6,r4,r6
   227b8:	11806315 	stw	r6,396(r2)
   227bc:	003fce06 	br	226f8 <__alt_data_end+0xfc0226f8>
   227c0:	18805304 	addi	r2,r3,332
   227c4:	18805215 	stw	r2,328(r3)
   227c8:	003fc606 	br	226e4 <__alt_data_end+0xfc0226e4>
   227cc:	00bfffc4 	movi	r2,-1
   227d0:	003fd006 	br	22714 <__alt_data_end+0xfc022714>

000227d4 <__call_exitprocs>:
   227d4:	defff504 	addi	sp,sp,-44
   227d8:	df000915 	stw	fp,36(sp)
   227dc:	dd400615 	stw	r21,24(sp)
   227e0:	dc800315 	stw	r18,12(sp)
   227e4:	dfc00a15 	stw	ra,40(sp)
   227e8:	ddc00815 	stw	r23,32(sp)
   227ec:	dd800715 	stw	r22,28(sp)
   227f0:	dd000515 	stw	r20,20(sp)
   227f4:	dcc00415 	stw	r19,16(sp)
   227f8:	dc400215 	stw	r17,8(sp)
   227fc:	dc000115 	stw	r16,4(sp)
   22800:	d9000015 	stw	r4,0(sp)
   22804:	2839883a 	mov	fp,r5
   22808:	04800044 	movi	r18,1
   2280c:	057fffc4 	movi	r21,-1
   22810:	008000f4 	movhi	r2,3
   22814:	10b29404 	addi	r2,r2,-13744
   22818:	12000017 	ldw	r8,0(r2)
   2281c:	45005217 	ldw	r20,328(r8)
   22820:	44c05204 	addi	r19,r8,328
   22824:	a0001c26 	beq	r20,zero,22898 <__call_exitprocs+0xc4>
   22828:	a0800117 	ldw	r2,4(r20)
   2282c:	15ffffc4 	addi	r23,r2,-1
   22830:	b8000d16 	blt	r23,zero,22868 <__call_exitprocs+0x94>
   22834:	14000044 	addi	r16,r2,1
   22838:	8421883a 	add	r16,r16,r16
   2283c:	8421883a 	add	r16,r16,r16
   22840:	84402004 	addi	r17,r16,128
   22844:	a463883a 	add	r17,r20,r17
   22848:	a421883a 	add	r16,r20,r16
   2284c:	e0001e26 	beq	fp,zero,228c8 <__call_exitprocs+0xf4>
   22850:	80804017 	ldw	r2,256(r16)
   22854:	e0801c26 	beq	fp,r2,228c8 <__call_exitprocs+0xf4>
   22858:	bdffffc4 	addi	r23,r23,-1
   2285c:	843fff04 	addi	r16,r16,-4
   22860:	8c7fff04 	addi	r17,r17,-4
   22864:	bd7ff91e 	bne	r23,r21,2284c <__alt_data_end+0xfc02284c>
   22868:	00800074 	movhi	r2,1
   2286c:	10b49804 	addi	r2,r2,-11680
   22870:	10000926 	beq	r2,zero,22898 <__call_exitprocs+0xc4>
   22874:	a0800117 	ldw	r2,4(r20)
   22878:	1000301e 	bne	r2,zero,2293c <__call_exitprocs+0x168>
   2287c:	a0800017 	ldw	r2,0(r20)
   22880:	10003226 	beq	r2,zero,2294c <__call_exitprocs+0x178>
   22884:	a009883a 	mov	r4,r20
   22888:	98800015 	stw	r2,0(r19)
   2288c:	000d2600 	call	d260 <free>
   22890:	9d000017 	ldw	r20,0(r19)
   22894:	a03fe41e 	bne	r20,zero,22828 <__alt_data_end+0xfc022828>
   22898:	dfc00a17 	ldw	ra,40(sp)
   2289c:	df000917 	ldw	fp,36(sp)
   228a0:	ddc00817 	ldw	r23,32(sp)
   228a4:	dd800717 	ldw	r22,28(sp)
   228a8:	dd400617 	ldw	r21,24(sp)
   228ac:	dd000517 	ldw	r20,20(sp)
   228b0:	dcc00417 	ldw	r19,16(sp)
   228b4:	dc800317 	ldw	r18,12(sp)
   228b8:	dc400217 	ldw	r17,8(sp)
   228bc:	dc000117 	ldw	r16,4(sp)
   228c0:	dec00b04 	addi	sp,sp,44
   228c4:	f800283a 	ret
   228c8:	a0800117 	ldw	r2,4(r20)
   228cc:	80c00017 	ldw	r3,0(r16)
   228d0:	10bfffc4 	addi	r2,r2,-1
   228d4:	15c01426 	beq	r2,r23,22928 <__call_exitprocs+0x154>
   228d8:	80000015 	stw	zero,0(r16)
   228dc:	183fde26 	beq	r3,zero,22858 <__alt_data_end+0xfc022858>
   228e0:	95c8983a 	sll	r4,r18,r23
   228e4:	a0806217 	ldw	r2,392(r20)
   228e8:	a5800117 	ldw	r22,4(r20)
   228ec:	2084703a 	and	r2,r4,r2
   228f0:	10000b26 	beq	r2,zero,22920 <__call_exitprocs+0x14c>
   228f4:	a0806317 	ldw	r2,396(r20)
   228f8:	2088703a 	and	r4,r4,r2
   228fc:	20000c1e 	bne	r4,zero,22930 <__call_exitprocs+0x15c>
   22900:	89400017 	ldw	r5,0(r17)
   22904:	d9000017 	ldw	r4,0(sp)
   22908:	183ee83a 	callr	r3
   2290c:	a0800117 	ldw	r2,4(r20)
   22910:	15bfbf1e 	bne	r2,r22,22810 <__alt_data_end+0xfc022810>
   22914:	98800017 	ldw	r2,0(r19)
   22918:	153fcf26 	beq	r2,r20,22858 <__alt_data_end+0xfc022858>
   2291c:	003fbc06 	br	22810 <__alt_data_end+0xfc022810>
   22920:	183ee83a 	callr	r3
   22924:	003ff906 	br	2290c <__alt_data_end+0xfc02290c>
   22928:	a5c00115 	stw	r23,4(r20)
   2292c:	003feb06 	br	228dc <__alt_data_end+0xfc0228dc>
   22930:	89000017 	ldw	r4,0(r17)
   22934:	183ee83a 	callr	r3
   22938:	003ff406 	br	2290c <__alt_data_end+0xfc02290c>
   2293c:	a0800017 	ldw	r2,0(r20)
   22940:	a027883a 	mov	r19,r20
   22944:	1029883a 	mov	r20,r2
   22948:	003fb606 	br	22824 <__alt_data_end+0xfc022824>
   2294c:	0005883a 	mov	r2,zero
   22950:	003ffb06 	br	22940 <__alt_data_end+0xfc022940>
   22954:	01110bff 	0x1110bff
   22958:	01010004 	movi	r4,1024
   2295c:	7f000105 	stb	fp,4(r15)
   22960:	007d0000 	call	7d000 <_gp+0x49c60>
   22964:	00000000 	call	0 <__alt_mem_sdram>
   22968:	01883a00 	call	1883a0 <_gp+0x155000>
   2296c:	010d0bff 	0x10d0bff
   22970:	01010002 	0x1010002
	...
   2297c:	010d0bff 	0x10d0bff
   22980:	01010004 	movi	r4,1024
   22984:	00000100 	call	10 <__alt_mem_sdram+0x10>
   22988:	00000000 	call	0 <__alt_mem_sdram>
   2298c:	0000a214 	movui	zero,648
   22990:	0000c9e8 	cmpgeui	zero,zero,807
