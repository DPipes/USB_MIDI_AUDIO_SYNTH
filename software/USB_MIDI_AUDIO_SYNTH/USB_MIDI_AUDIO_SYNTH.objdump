
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002a668 memsz 0x0002a668 flags r-x
    LOAD off    0x0002b688 vaddr 0x0002a688 paddr 0x0002d86c align 2**12
         filesz 0x000031e4 memsz 0x000031e4 flags rw-
    LOAD off    0x0002ea50 vaddr 0x00030a50 paddr 0x00030a50 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00023304  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00007154  00023534  00023534  00024534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031e4  0002a688  0002d86c  0002b688  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  00030a50  00030a50  0002ea50  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00030cfc  00030cfc  0002e86c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002e86c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001a58  00000000  00000000  0002e890  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00052fb8  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010b39  00000000  00000000  000832a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000154ba  00000000  00000000  00093dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005948  00000000  00000000  000a9294  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000fe50  00000000  00000000  000aebdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00023a55  00000000  00000000  000bea2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e2484  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002b80  00000000  00000000  000e24f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000fda22  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000fda25  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000fda2a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000fda2b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000fda2c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000fda30  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000fda34  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000fda38  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000fda43  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000fda4e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  000fda59  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  000fda6d  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  000fda98  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fb7b  00000000  00000000  00102f1f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00023534 l    d  .rodata	00000000 .rodata
0002a688 l    d  .rwdata	00000000 .rwdata
00030a50 l    d  .bss	00000000 .bss
00030cfc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002c16c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c16d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c16e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c16f l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002c170 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c171 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c172 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c173 l     O .rwdata	00000001 _ZL9SPI_MODE3
00030a50 l     O .bss	00000001 _ZL9usb_error
00030a51 l     O .bss	00000001 _ZL14usb_task_state
00030a54 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002c17c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c17d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c17e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c17f l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c180 l     O .rwdata	00000006 _ZL9XBOX_LEDS
0002363e l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003900 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
0002c1a0 l     O .rwdata	00000004 _ZL5synth
00000000 l    df *ABS*	00000000 hidboot.cpp
0002c1a4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c1a5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c1a6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c1a7 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c1a8 l     O .rwdata	00000002 _ZL9pstrSpace
0002c1ac l     O .rwdata	00000003 _ZL8pstrCRLF
0002c1b0 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002c1b4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002c1b8 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002c1bc l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
0002396c l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00023980 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
0002398c l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00023998 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000239a4 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
000239b0 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
000239c0 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002c1c4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002c1cc l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002c1d4 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002c1dc l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
000239cc l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
000239d8 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002c1e0 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002c1e4 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000239e4 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000239f4 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002c1ec l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002c1f4 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00023a04 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002c1fc l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00023a14 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002c204 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00023a2c l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002c208 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00023a38 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00023a44 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002c210 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002c218 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00023a50 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00023a5c l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002c220 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002c228 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00023a68 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00023a78 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002c230 l     O .rwdata	00000002 _ZL10pstrUsageX
0002c234 l     O .rwdata	00000002 _ZL10pstrUsageY
0002c238 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002c23c l     O .rwdata	00000003 _ZL11pstrUsageRx
0002c240 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002c244 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002c248 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002c250 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002c258 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00023a8c l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00023a98 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00023aa4 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00023ab0 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002c260 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002c268 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002c26c l     O .rwdata	00000003 _ZL11pstrUsageVx
0002c270 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002c274 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002c278 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002c280 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002c288 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002c290 l     O .rwdata	00000004 _ZL12pstrUsageVno
00023ac0 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00023ad0 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00023adc l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00023ae8 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00023af8 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00023b04 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00023b10 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00023b24 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00023b34 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00023b44 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00023b54 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00023b64 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00023b74 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00023b84 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00023b94 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00023ba0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00023bb0 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00023bc4 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00023bd8 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00023be4 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00023bf0 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00023bfc l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00023c08 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00023c14 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00023c20 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00023c2c l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00023c38 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00023c44 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00023c50 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00023c5c l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00023c6c l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00023c78 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00023c88 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00023c98 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00023ca8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00023cb8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00023cc8 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00023ce0 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00023cf8 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00023d10 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00023d20 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00023d30 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00023d40 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00023d50 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00023d60 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00023d70 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00023d80 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00023d90 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00023da0 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00023db0 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00023dc8 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00023dd8 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00023dec l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00023dfc l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00023e08 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00023e14 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00023e20 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002c294 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00023e2c l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00023e3c l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00023e50 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00023e64 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00023e74 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00023e84 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00023e90 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00023ea4 l     O .rodata	00000009 _ZL17pstrUsageElevator
00023eb0 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002c29c l     O .rwdata	00000007 _ZL15pstrUsageRudder
00023ec0 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00023ecc l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00023ed8 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00023ee8 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00023ef8 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002c2a4 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00023f04 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00023f10 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00023f1c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002c2ac l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002c2b4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002c2bc l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002c2c4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00023f28 l     O .rodata	00000009 _ZL17pstrUsageSteering
00023f34 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00023f40 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00023f4c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002c2cc l     O .rwdata	00000008 _ZL16pstrUsageBallast
00023f58 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00023f68 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00023f74 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00023f80 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002c2d4 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00023f8c l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002c2dc l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002c2e4 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00023f98 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00023fa4 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00023fb0 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00023fbc l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002c2ec l     O .rwdata	00000005 _ZL13pstrUsageVest
00023fc8 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00023fd4 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00023fe0 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00023ff0 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00024000 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0002400c l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00024018 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002c2f4 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002c2f8 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002c300 l     O .rwdata	00000005 _ZL13pstrUsageRate
00024024 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00024030 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00024040 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00024050 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00024060 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
0002406c l     O .rodata	0000000b _ZL18pstrUsageStickType
00024078 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002c308 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002c310 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002c318 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002c320 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002c328 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002c330 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002c338 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002c340 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002c348 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002c350 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002c358 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002c360 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00024084 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00024090 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
0002409c l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002c368 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002c370 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002c378 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002c380 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002c388 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000240a8 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000240b8 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002c390 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002c398 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000240c4 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000240d4 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000240e4 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000240f4 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00024104 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00024114 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00024124 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00024134 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00024144 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002c39c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00024154 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002c3a4 l     O .rwdata	00000005 _ZL13pstrUsageBump
00024164 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00024170 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002c3ac l     O .rwdata	00000007 _ZL15pstrUsagePlayer
0002417c l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00024188 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002c3b4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00024194 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
000241a4 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
000241b0 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000241bc l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000241c8 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000241dc l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000241ec l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000241fc l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00024208 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00024214 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
0002422c l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00024240 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00024258 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
0002426c l     O .rodata	00000009 _ZL16pstrUsageNumLock
00024278 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00024284 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002c3bc l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002c3c4 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002c3cc l     O .rwdata	00000004 _ZL14pstrUsagePower
0002c3d0 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002c3d8 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002c3dc l     O .rwdata	00000005 _ZL13pstrUsageMute
00024290 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
0002429c l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
000242ac l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002c3e4 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
000242bc l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
000242cc l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002c3ec l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002c3f4 l     O .rwdata	00000007 _ZL15pstrUsageStereo
000242d8 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
000242ec l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002c3fc l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002c400 l     O .rwdata	00000004 _ZL12pstrUsageCLV
000242f8 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
0002430c l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002c404 l     O .rwdata	00000005 _ZL13pstrUsageRing
00024318 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00024324 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002c40c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002c414 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002c41c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002c424 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00024330 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002c42c l     O .rwdata	00000005 _ZL13pstrUsageHold
0002c434 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
0002433c l     O .rodata	00000009 _ZL17pstrUsageCoverage
00024348 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00024354 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00024360 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002c438 l     O .rwdata	00000005 _ZL19pstrUsageConference
0002436c l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002c440 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002c448 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002c450 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00024378 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002c458 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002c460 l     O .rwdata	00000006 _ZL14pstrUsageReady
00024384 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00024390 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002c468 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002c470 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002c474 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002c478 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002c480 l     O .rwdata	00000007 _ZL15pstrUsageRewind
0002439c l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002c488 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002c490 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002c498 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002c49c l     O .rwdata	00000006 _ZL14pstrUsageError
000243a8 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
000243b8 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
000243cc l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002c4a4 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000243e4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
000243f0 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00024400 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002c4ac l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00024410 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00024420 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00024434 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00024448 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
0002445c l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00024470 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002c4b4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00024480 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
0002448c l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002c4bc l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00024498 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
000244a4 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002c4c4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
000244b4 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
000244c0 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002c4cc l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002c4d4 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
000244cc l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
000244d8 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002c4dc l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002c4e4 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002c4ec l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002c4f4 l     O .rwdata	00000007 _ZL15pstrUsageRedial
000244e4 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002c4fc l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002c504 l     O .rwdata	00000005 _ZL13pstrUsagePark
000244f0 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
000244fc l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002c50c l     O .rwdata	00000005 _ZL13pstrUsageLine
00024508 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00024514 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00024520 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
0002452c l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00024538 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002c514 l     O .rwdata	00000005 _ZL13pstrUsageSend
00024544 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00024550 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
0002455c l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00024568 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00024574 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00024580 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002c51c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00024590 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
000245a0 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
000245b4 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
000245c8 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
000245dc l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
000245f0 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00024600 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00024610 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00024624 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00024634 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00024644 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00024654 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00024660 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
0002466c l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00024678 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002c520 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002c528 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002c52c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002c530 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002c534 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002c538 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002c53c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002c540 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002c544 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002c548 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002c54c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002c550 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002c554 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002c558 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002c55c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002c560 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002c564 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
0002468c l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
0002469c l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
000246a8 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
000246b4 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002c568 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002c56c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002c574 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002c57c l     O .rwdata	00000006 _ZL14pstrUsageReset
0002c584 l     O .rwdata	00000006 _ZL14pstrUsageSleep
000246c0 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
000246cc l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002c58c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
000246d8 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002c594 l     O .rwdata	00000005 _ZL13pstrUsageMenu
000246e4 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002c59c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
000246f0 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
000246fc l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00024708 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00024714 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00024720 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00024730 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00024740 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
0002474c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00024758 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002c5a4 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00024768 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00024778 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002c5ac l     O .rwdata	00000006 _ZL14pstrUsageStill
0002c5b4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00024784 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00024790 l     O .rodata	0000000a _ZL17pstrUsageModeStep
0002479c l     O .rodata	0000000c _ZL19pstrUsageRecallLast
000247a8 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
000247b8 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002c5b8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002c5c0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
000247c4 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
000247d4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
000247e0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
000247ec l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
000247f8 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00024804 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00024810 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
0002481c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
0002482c l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00024838 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00024844 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00024850 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002c5c8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002c5d0 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00024860 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00024870 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
0002487c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00024888 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00024898 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
000248a8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002c5d8 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002c5e0 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
000248b8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002c5e8 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002c5f0 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002c5f8 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002c600 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002c608 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
000248c4 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
000248d0 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002c610 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002c618 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
000248dc l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000248e8 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000248f4 l     O .rodata	00000009 _ZL17pstrUsageTracking
00024900 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
0002490c l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002c620 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00024918 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002c628 l     O .rwdata	00000005 _ZL13pstrUsageMark
00024924 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00024930 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
0002493c l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00024948 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00024958 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
0002496c l     O .rodata	0000000e _ZL21pstrUsageCounterReset
0002497c l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0002498c l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00024998 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
000249a4 l     O .rodata	0000000b _ZL18pstrUsageStopEject
000249b0 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
000249bc l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002c630 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002c634 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002c63c l     O .rwdata	00000005 _ZL13pstrUsageBass
0002c644 l     O .rwdata	00000007 _ZL15pstrUsageTreble
000249c8 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
000249d4 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002c64c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002c654 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002c658 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002c660 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002c668 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000249e0 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000249ec l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000249f8 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00024a04 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002c670 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00024a10 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00024a1c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00024a28 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00024a34 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00024a44 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00024a54 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00024a60 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00024a6c l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00024a78 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002c678 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002c680 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00024a84 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00024a90 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002c688 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00024a9c l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00024aac l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00024abc l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00024ac8 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00024ad4 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00024ae0 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002c690 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002c698 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00024aec l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00024af8 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00024b04 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00024b10 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002c6a0 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00024b20 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00024b2c l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002c6a8 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002c6b0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002c6b8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00024b3c l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00024b48 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00024b54 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00024b60 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00024b6c l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00024b7c l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00024b90 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00024b9c l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00024bb0 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00024bc0 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00024bcc l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00024bdc l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00024bec l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00024bfc l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00024c08 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00024c18 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00024c24 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00024c34 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00024c44 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00024c54 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00024c64 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00024c78 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002c6c0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00024c88 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00024c9c l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00024cb0 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00024cc0 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00024cd0 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00024ce0 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00024cec l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00024cf8 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00024d04 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00024d10 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00024d1c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00024d2c l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00024d44 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00024d50 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00024d5c l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00024d68 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00024d74 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00024d80 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00024d8c l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00024da0 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002c6c8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00024dac l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002c6d0 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00024db8 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00024dc4 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00024dd4 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00024de0 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00024df0 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00024e00 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00024e10 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00024e1c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00024e28 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00024e34 l     O .rodata	00000009 _ZL16pstrUsageALClock
00024e40 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00024e50 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00024e5c l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00024e68 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00024e74 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00024e80 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00024e94 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00024ea4 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00024eb0 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00024ec4 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00024ed0 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00024ee0 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00024ef4 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00024f08 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00024f1c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00024f2c l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00024f44 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00024f58 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00024f68 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00024f78 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002c6d8 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002c6e0 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00024f8c l     O .rodata	00000009 _ZL16pstrUsageACClose
0002c6e8 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002c6f0 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002c6f8 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002c700 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00024f98 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002c708 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002c710 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002c718 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002c720 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00024fa4 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00024fb0 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002c728 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00024fbc l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00024fcc l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002c730 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002c738 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002c740 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002c748 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002c750 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00024fd8 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00024fe4 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00024ff4 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00025004 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002c758 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00025010 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002501c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00025028 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002c760 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00025034 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00025040 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00025050 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0002505c l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0002506c l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0002507c l     O .rodata	0000000a _ZL17pstrUsageACScroll
00025088 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00025094 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002c768 l     O .rwdata	00000007 _ZL14pstrUsageACPan
000250a4 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
000250b0 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000250c0 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002c770 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002c778 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002c780 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002c788 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000250d0 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000250dc l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002c790 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000250e8 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000250f4 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00025100 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0002510c l     O .rodata	0000000a _ZL17pstrUsageACResize
00025118 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00025124 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00025130 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0002513c l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00025148 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00025154 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00025160 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0002516c l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0002517c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0002518c l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0002519c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
000251ac l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
000251b8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000251c8 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000251d4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000251e4 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000251f4 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00025204 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00025210 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002521c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00025228 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00025234 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002c798 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002c7a0 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00025240 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002c7a8 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002c7b0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002524c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002c7b8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00025258 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00025268 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00025274 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00025284 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00025294 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
000252a4 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002c7c0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002c7c8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
000252b0 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002c7d0 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
000252bc l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
000252c8 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000252d8 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000252e4 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
000252f4 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00025300 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0002530c l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00025318 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00025324 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00025330 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0002533c l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002c7d8 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002c7e0 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00025348 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00025354 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002c7e8 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00025364 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00025370 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0002537c l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0002538c l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0002539c l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
000253a8 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
000253b4 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
000253c0 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002c7f0 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
000253cc l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000253d8 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000253e4 l     O .rodata	00000009 _ZL16pstrUsageACReply
000253f0 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00025400 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002c7f8 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0002540c l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002c800 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002c808 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00025418 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00025424 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00025430 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0002543c l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00025448 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00025454 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00025460 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0002546c l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00025478 l     O .rodata	0000000a _ZL17pstrUsageACRename
00025484 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00025490 l     O .rodata	00000009 _ZL16pstrUsageACSplit
0002549c l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
000254a8 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
000254b4 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002c810 l     O .rwdata	00000004 _ZL12pstrUsagePen
000254c0 l     O .rodata	0000000a _ZL17pstrUsageLightPen
000254cc l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
000254d8 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
000254e4 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
000254f0 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002c814 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00025500 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002c81c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0002550c l     O .rodata	00000009 _ZL17pstrUsageArmature
00025518 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0002552c l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002c824 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002c82c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002c834 l     O .rwdata	00000007 _ZL15pstrUsageFinger
0002553c l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00025548 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00025554 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002c83c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002c844 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002c84c l     O .rwdata	00000004 _ZL12pstrUsageTap
0002c850 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00025560 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0002556c l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0002557c l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002558c l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002c858 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002c860 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002c868 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002c870 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002559c l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002c878 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002c880 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
000255a8 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002c888 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002c890 l     O .rwdata	00000007 _ZL15pstrUsageEraser
000255b4 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
000255c0 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
000255d0 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
000255dc l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
000255ec l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
000255f8 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00025608 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00025614 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00025624 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00025630 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00025640 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00025650 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0002565c l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00025668 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00025674 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00025680 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002568c l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00025698 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
000256a4 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
000256b4 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
000256c4 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002c898 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002c89c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002c8a0 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002c8a8 l     O .rwdata	00000005 _ZL16pstrUsageColumns
000256d0 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
000256dc l     O .rodata	00000009 _ZL19pstrUsageCursorMode
000256e8 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
000256f4 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002c8b0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00025700 l     O .rodata	00000009 _ZL17pstrUsageFontData
0002570c l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00025718 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00025724 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00025734 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00025744 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00025754 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00025760 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002576c l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00025778 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00025784 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00025790 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002579c l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
000257a8 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
000257b4 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
000257c0 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
000257d0 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
000257e0 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
000257f0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
000257fc l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00025808 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00025818 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002c8b8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00025824 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00025834 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00025844 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00025850 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002585c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002586c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002587c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002588c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002589c l     O .rodata	0000000a _ZL17pstrUsageBlitData
000258a8 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
000258b4 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
000258c0 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
000258d0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
000258e0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
000258f0 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00025900 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002c8c0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002c8c8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00025910 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002c8d0 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002c8d8 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002c8e0 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002c8e8 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002591c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002c8f0 l     O .rwdata	00000005 _ZL13pstrUsageCine
00025928 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002c8f8 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002c900 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00025934 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00025944 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00025954 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00025964 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00025970 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002597c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00025990 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
000259a4 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
000259b8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
000259cc l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
000259dc l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000259ec l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000259f8 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00025a04 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00025a14 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002c914 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c915 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c916 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c917 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002c91c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c91d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c91e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c91f l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002c920 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c921 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c922 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c923 l     O .rwdata	00000001 _ZL9SPI_MODE3
00025c5c l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00025c6c l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008a48 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002c92c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c92d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c92e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c92f l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c930 l     O .rwdata	00000002 _ZL9pstrSpace
0002c934 l     O .rwdata	00000003 _ZL8pstrCRLF
0002c938 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002c93c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002c940 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002c944 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00025d34 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00025d48 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00025d54 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00025d60 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00025d6c l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00025d78 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00025d88 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002c94c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002c954 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002c95c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002c964 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00025d94 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00025da0 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002c968 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002c96c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00025dac l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00025dbc l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002c974 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002c97c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00025dcc l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002c984 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00025ddc l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002c98c l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00025df4 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002c990 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00025e00 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00025e0c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002c998 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002c9a0 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00025e18 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00025e24 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002c9a8 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002c9b0 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00025e30 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00025e40 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002c9b8 l     O .rwdata	00000002 _ZL10pstrUsageX
0002c9bc l     O .rwdata	00000002 _ZL10pstrUsageY
0002c9c0 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002c9c4 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002c9c8 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002c9cc l     O .rwdata	00000003 _ZL11pstrUsageRz
0002c9d0 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002c9d8 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002c9e0 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00025e54 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00025e60 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00025e6c l     O .rodata	0000000b _ZL18pstrUsageByteCount
00025e78 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002c9e8 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002c9f0 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002c9f4 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002c9f8 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002c9fc l     O .rwdata	00000003 _ZL11pstrUsageVz
0002ca00 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002ca08 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002ca10 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002ca18 l     O .rwdata	00000004 _ZL12pstrUsageVno
00025e88 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00025e98 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00025ea4 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00025eb0 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00025ec0 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00025ecc l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00025ed8 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00025eec l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00025efc l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00025f0c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00025f1c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00025f2c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00025f3c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00025f4c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00025f5c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00025f68 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00025f78 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00025f8c l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00025fa0 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00025fac l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00025fb8 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00025fc4 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00025fd0 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00025fdc l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00025fe8 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00025ff4 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00026000 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0002600c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00026018 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00026024 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00026034 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00026040 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00026050 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00026060 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00026070 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00026080 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00026090 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000260a8 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000260c0 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000260d8 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000260e8 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000260f8 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00026108 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00026118 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00026128 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00026138 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00026148 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00026158 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00026168 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00026178 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00026190 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000261a0 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000261b4 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000261c4 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000261d0 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000261dc l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000261e8 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002ca1c l     O .rwdata	00000008 _ZL16pstrUsageAileron
000261f4 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00026204 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00026218 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0002622c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0002623c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0002624c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00026258 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
0002626c l     O .rodata	00000009 _ZL17pstrUsageElevator
00026278 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002ca24 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00026288 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00026294 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000262a0 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000262b0 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000262c0 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002ca2c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000262cc l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000262d8 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
000262e4 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002ca34 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002ca3c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002ca44 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002ca4c l     O .rwdata	00000008 _ZL16pstrUsageShifter
000262f0 l     O .rodata	00000009 _ZL17pstrUsageSteering
000262fc l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00026308 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00026314 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002ca54 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00026320 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00026330 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0002633c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00026348 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002ca5c l     O .rwdata	00000005 _ZL13pstrUsageBelt
00026354 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002ca64 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002ca6c l     O .rwdata	00000006 _ZL14pstrUsageGlove
00026360 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
0002636c l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00026378 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00026384 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002ca74 l     O .rwdata	00000005 _ZL13pstrUsageVest
00026390 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
0002639c l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000263a8 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000263b8 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000263c8 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000263d4 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000263e0 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002ca7c l     O .rwdata	00000004 _ZL12pstrUsageOar
0002ca80 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002ca88 l     O .rwdata	00000005 _ZL13pstrUsageRate
000263ec l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000263f8 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00026408 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00026418 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00026428 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00026434 l     O .rodata	0000000b _ZL18pstrUsageStickType
00026440 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002ca90 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002ca98 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002caa0 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002caa8 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002cab0 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002cab8 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002cac0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002cac8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002cad0 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002cad8 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002cae0 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002cae8 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
0002644c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00026458 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00026464 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002caf0 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002caf8 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002cb00 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002cb08 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002cb10 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00026470 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00026480 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002cb18 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002cb20 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
0002648c l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
0002649c l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000264ac l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000264bc l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000264cc l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
000264dc l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
000264ec l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
000264fc l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
0002650c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002cb24 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
0002651c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002cb2c l     O .rwdata	00000005 _ZL13pstrUsageBump
0002652c l     O .rodata	00000009 _ZL16pstrUsageNewGame
00026538 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002cb34 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00026544 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00026550 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002cb3c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
0002655c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
0002656c l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00026578 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00026584 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00026590 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000265a4 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000265b4 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000265c4 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000265d0 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
000265dc l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
000265f4 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00026608 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00026620 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00026634 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00026640 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
0002664c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002cb44 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002cb4c l     O .rwdata	00000005 _ZL13pstrUsageKana
0002cb54 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002cb58 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002cb60 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002cb64 l     O .rwdata	00000005 _ZL13pstrUsageMute
00026658 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00026664 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00026674 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002cb6c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00026684 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00026694 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002cb74 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002cb7c l     O .rwdata	00000007 _ZL15pstrUsageStereo
000266a0 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
000266b4 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002cb84 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002cb88 l     O .rwdata	00000004 _ZL12pstrUsageCLV
000266c0 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
000266d4 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002cb8c l     O .rwdata	00000005 _ZL13pstrUsageRing
000266e0 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
000266ec l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002cb94 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002cb9c l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002cba4 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002cbac l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
000266f8 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002cbb4 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002cbbc l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00026704 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00026710 l     O .rodata	0000000b _ZL18pstrUsageNightMode
0002671c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00026728 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002cbc0 l     O .rwdata	00000005 _ZL19pstrUsageConference
00026734 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002cbc8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002cbd0 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002cbd8 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00026740 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002cbe0 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002cbe8 l     O .rwdata	00000006 _ZL14pstrUsageReady
0002674c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00026758 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002cbf0 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002cbf8 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002cbfc l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002cc00 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002cc08 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00026764 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002cc10 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002cc18 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002cc20 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002cc24 l     O .rwdata	00000006 _ZL14pstrUsageError
00026770 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00026780 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00026794 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002cc2c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000267ac l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
000267b8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
000267c8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002cc34 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
000267d8 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
000267e8 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
000267fc l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00026810 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00026824 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00026838 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002cc3c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00026848 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00026854 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002cc44 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00026860 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
0002686c l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002cc4c l     O .rwdata	00000006 _ZL14pstrUsagePhone
0002687c l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00026888 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002cc54 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002cc5c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00026894 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
000268a0 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002cc64 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002cc6c l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002cc74 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002cc7c l     O .rwdata	00000007 _ZL15pstrUsageRedial
000268ac l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002cc84 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002cc8c l     O .rwdata	00000005 _ZL13pstrUsagePark
000268b8 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
000268c4 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002cc94 l     O .rwdata	00000005 _ZL13pstrUsageLine
000268d0 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
000268dc l     O .rodata	0000000a _ZL19pstrUsageRingEnable
000268e8 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
000268f4 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00026900 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002cc9c l     O .rwdata	00000005 _ZL13pstrUsageSend
0002690c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00026918 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00026924 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00026930 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
0002693c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00026948 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002cca4 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00026958 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00026968 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
0002697c l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00026990 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
000269a4 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
000269b8 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
000269c8 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
000269d8 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
000269ec l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
000269fc l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00026a0c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00026a1c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00026a28 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00026a34 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00026a40 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002cca8 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002ccb0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002ccb4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002ccb8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002ccbc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002ccc0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002ccc4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002ccc8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002cccc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002ccd0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002ccd4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002ccd8 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002ccdc l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002cce0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002cce4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002cce8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002ccec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00026a54 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00026a64 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00026a70 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00026a7c l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002ccf0 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002ccf4 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002ccfc l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002cd04 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002cd0c l     O .rwdata	00000006 _ZL14pstrUsageSleep
00026a88 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00026a94 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002cd14 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00026aa0 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002cd1c l     O .rwdata	00000005 _ZL13pstrUsageMenu
00026aac l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002cd24 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00026ab8 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00026ac4 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00026ad0 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00026adc l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00026ae8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00026af8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00026b08 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00026b14 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00026b20 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002cd2c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00026b30 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00026b40 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002cd34 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002cd3c l     O .rwdata	00000004 _ZL18pstrUsageSelection
00026b4c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00026b58 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00026b64 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00026b70 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00026b80 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002cd40 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002cd48 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00026b8c l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00026b9c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00026ba8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00026bb4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00026bc0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00026bcc l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00026bd8 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00026be4 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00026bf4 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00026c00 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00026c0c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00026c18 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002cd50 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002cd58 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00026c28 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00026c38 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00026c44 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00026c50 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00026c60 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00026c70 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002cd60 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002cd68 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00026c80 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002cd70 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002cd78 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002cd80 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002cd88 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002cd90 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00026c8c l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00026c98 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002cd98 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002cda0 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00026ca4 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00026cb0 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00026cbc l     O .rodata	00000009 _ZL17pstrUsageTracking
00026cc8 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00026cd4 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002cda8 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00026ce0 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002cdb0 l     O .rwdata	00000005 _ZL13pstrUsageMark
00026cec l     O .rodata	00000009 _ZL18pstrUsageClearMark
00026cf8 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00026d04 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00026d10 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00026d20 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00026d34 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00026d44 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00026d54 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00026d60 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00026d6c l     O .rodata	0000000b _ZL18pstrUsageStopEject
00026d78 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00026d84 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002cdb8 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002cdbc l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002cdc4 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002cdcc l     O .rwdata	00000007 _ZL15pstrUsageTreble
00026d90 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00026d9c l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002cdd4 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002cddc l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002cde0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002cde8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002cdf0 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00026da8 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00026db4 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00026dc0 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00026dcc l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002cdf8 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00026dd8 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00026de4 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00026df0 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00026dfc l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00026e0c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00026e1c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00026e28 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00026e34 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00026e40 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002ce00 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002ce08 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00026e4c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00026e58 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002ce10 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00026e64 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00026e74 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00026e84 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00026e90 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00026e9c l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00026ea8 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002ce18 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002ce20 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00026eb4 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00026ec0 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00026ecc l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00026ed8 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002ce28 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00026ee8 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00026ef4 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002ce30 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002ce38 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002ce40 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00026f04 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00026f10 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00026f1c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00026f28 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00026f34 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00026f44 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00026f58 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00026f64 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00026f78 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00026f88 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00026f94 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00026fa4 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00026fb4 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00026fc4 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00026fd0 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00026fe0 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00026fec l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00026ffc l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0002700c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002701c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0002702c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00027040 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002ce48 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00027050 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00027064 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00027078 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00027088 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00027098 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000270a8 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000270b4 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000270c0 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000270cc l     O .rodata	00000009 _ZL16pstrUsageALLogon
000270d8 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
000270e4 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000270f4 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0002710c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00027118 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00027124 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00027130 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0002713c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00027148 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00027154 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00027168 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002ce50 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00027174 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002ce58 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00027180 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0002718c l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0002719c l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000271a8 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000271b8 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000271c8 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000271d8 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
000271e4 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000271f0 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000271fc l     O .rodata	00000009 _ZL16pstrUsageALClock
00027208 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00027218 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00027224 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00027230 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0002723c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00027248 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0002725c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0002726c l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00027278 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0002728c l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00027298 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000272a8 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000272bc l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000272d0 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
000272e4 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000272f4 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0002730c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00027320 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00027330 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00027340 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002ce60 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002ce68 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00027354 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002ce70 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002ce78 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002ce80 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002ce88 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00027360 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002ce90 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002ce98 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002cea0 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002cea8 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0002736c l     O .rodata	00000009 _ZL16pstrUsageACPaste
00027378 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002ceb0 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00027384 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00027394 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002ceb8 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002cec0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002cec8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002ced0 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002ced8 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000273a0 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000273ac l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000273bc l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000273cc l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002cee0 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000273d8 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
000273e4 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000273f0 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002cee8 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
000273fc l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00027408 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00027418 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00027424 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00027434 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00027444 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00027450 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0002745c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002cef0 l     O .rwdata	00000007 _ZL14pstrUsageACPan
0002746c l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00027478 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00027488 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002cef8 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002cf00 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002cf08 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002cf10 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00027498 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000274a4 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002cf18 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000274b0 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000274bc l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000274c8 l     O .rodata	0000000a _ZL17pstrUsageACRotate
000274d4 l     O .rodata	0000000a _ZL17pstrUsageACResize
000274e0 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
000274ec l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
000274f8 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00027504 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00027510 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0002751c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00027528 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00027534 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00027544 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00027554 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00027564 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00027574 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00027580 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00027590 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
0002759c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000275ac l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000275bc l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000275cc l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
000275d8 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
000275e4 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
000275f0 l     O .rodata	0000000b _ZL18pstrUsageACPromote
000275fc l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002cf20 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002cf28 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00027608 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002cf30 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002cf38 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00027614 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002cf40 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00027620 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00027630 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0002763c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0002764c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0002765c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0002766c l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002cf48 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002cf50 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00027678 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002cf58 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00027684 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00027690 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000276a0 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000276ac l     O .rodata	0000000d _ZL22pstrUsageACViewComment
000276bc l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
000276c8 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
000276d4 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
000276e0 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
000276ec l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
000276f8 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00027704 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002cf60 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002cf68 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00027710 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0002771c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002cf70 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0002772c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00027738 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00027744 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00027754 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00027764 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00027770 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0002777c l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00027788 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002cf78 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00027794 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000277a0 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000277ac l     O .rodata	00000009 _ZL16pstrUsageACReply
000277b8 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
000277c8 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002cf80 l     O .rwdata	00000007 _ZL15pstrUsageACSend
000277d4 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002cf88 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002cf90 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
000277e0 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
000277ec l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
000277f8 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00027804 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00027810 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0002781c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00027828 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00027834 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00027840 l     O .rodata	0000000a _ZL17pstrUsageACRename
0002784c l     O .rodata	00000009 _ZL16pstrUsageACMerge
00027858 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00027864 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00027870 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0002787c l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002cf98 l     O .rwdata	00000004 _ZL12pstrUsagePen
00027888 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00027894 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
000278a0 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
000278ac l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
000278b8 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002cf9c l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
000278c8 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002cfa4 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
000278d4 l     O .rodata	00000009 _ZL17pstrUsageArmature
000278e0 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
000278f4 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002cfac l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002cfb4 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002cfbc l     O .rwdata	00000007 _ZL15pstrUsageFinger
00027904 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00027910 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0002791c l     O .rodata	00000009 _ZL16pstrUsageInRange
0002cfc4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002cfcc l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002cfd4 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002cfd8 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00027928 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00027934 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00027944 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00027954 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002cfe0 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002cfe8 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002cff0 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002cff8 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00027964 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002d000 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002d008 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00027970 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002d010 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002d018 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0002797c l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00027988 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00027998 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
000279a4 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
000279b4 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
000279c0 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
000279d0 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
000279dc l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
000279ec l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
000279f8 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00027a08 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00027a18 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00027a24 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00027a30 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00027a3c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00027a48 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00027a54 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00027a60 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00027a6c l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00027a7c l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00027a8c l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002d020 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002d024 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002d028 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002d030 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00027a98 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00027aa4 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00027ab0 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00027abc l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002d038 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00027ac8 l     O .rodata	00000009 _ZL17pstrUsageFontData
00027ad4 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00027ae0 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00027aec l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00027afc l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00027b0c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00027b1c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00027b28 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00027b34 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00027b40 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00027b4c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00027b58 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00027b64 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00027b70 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00027b7c l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00027b88 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00027b98 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00027ba8 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00027bb8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00027bc4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00027bd0 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00027be0 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002d040 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00027bec l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00027bfc l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00027c0c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00027c18 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00027c24 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00027c34 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00027c44 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00027c54 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00027c64 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00027c70 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00027c7c l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00027c88 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00027c98 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00027ca8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00027cb8 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00027cc8 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002d048 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002d050 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00027cd8 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002d058 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002d060 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002d068 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002d070 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00027ce4 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002d078 l     O .rwdata	00000005 _ZL13pstrUsageCine
00027cf0 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002d080 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002d088 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00027cfc l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00027d0c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00027d1c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00027d2c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00027d38 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00027d44 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00027d58 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00027d6c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00027d80 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00027d94 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00027da4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00027db4 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00027dc0 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00027dcc l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00027ddc l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002d08e l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d08f l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d090 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d091 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002d094 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d095 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d096 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d097 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d098 l     O .rwdata	00000002 _ZL9pstrSpace
0002d09c l     O .rwdata	00000003 _ZL8pstrCRLF
0002d0a0 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d0a4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d0a8 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d0ac l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00027ebc l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00027ed0 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00027edc l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00027ee8 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00027ef4 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00027f00 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00027f10 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d0b4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d0bc l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d0c4 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d0cc l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00027f1c l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00027f28 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d0d0 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d0d4 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00027f34 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00027f44 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d0dc l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d0e4 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00027f54 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d0ec l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00027f64 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d0f4 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00027f7c l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d0f8 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00027f88 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00027f94 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002d100 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002d108 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00027fa0 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00027fac l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002d110 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002d118 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00027fb8 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00027fc8 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002d120 l     O .rwdata	00000002 _ZL10pstrUsageX
0002d124 l     O .rwdata	00000002 _ZL10pstrUsageY
0002d128 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002d12c l     O .rwdata	00000003 _ZL11pstrUsageRx
0002d130 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002d134 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002d138 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002d140 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002d148 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00027fdc l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00027fe8 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00027ff4 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00028000 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002d150 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002d158 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002d15c l     O .rwdata	00000003 _ZL11pstrUsageVx
0002d160 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002d164 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002d168 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002d170 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d178 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d180 l     O .rwdata	00000004 _ZL12pstrUsageVno
00028010 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00028020 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0002802c l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00028038 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00028048 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00028054 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00028060 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00028074 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00028084 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00028094 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
000280a4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000280b4 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000280c4 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000280d4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000280e4 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000280f0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00028100 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00028114 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00028128 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00028134 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00028140 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
0002814c l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00028158 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00028164 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00028170 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
0002817c l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00028188 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00028194 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
000281a0 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
000281ac l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
000281bc l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000281c8 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000281d8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000281e8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000281f8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00028208 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00028218 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00028230 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00028248 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00028260 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00028270 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00028280 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00028290 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
000282a0 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000282b0 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000282c0 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000282d0 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000282e0 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000282f0 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00028300 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00028318 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00028328 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
0002833c l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0002834c l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00028358 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00028364 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00028370 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d184 l     O .rwdata	00000008 _ZL16pstrUsageAileron
0002837c l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
0002838c l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
000283a0 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
000283b4 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000283c4 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
000283d4 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000283e0 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000283f4 l     O .rodata	00000009 _ZL17pstrUsageElevator
00028400 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d18c l     O .rwdata	00000007 _ZL15pstrUsageRudder
00028410 l     O .rodata	00000009 _ZL17pstrUsageThrottle
0002841c l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00028428 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00028438 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00028448 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d194 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00028454 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00028460 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0002846c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d19c l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d1a4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d1ac l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d1b4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00028478 l     O .rodata	00000009 _ZL17pstrUsageSteering
00028484 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00028490 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0002849c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d1bc l     O .rwdata	00000008 _ZL16pstrUsageBallast
000284a8 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
000284b8 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
000284c4 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
000284d0 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d1c4 l     O .rwdata	00000005 _ZL13pstrUsageBelt
000284dc l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d1cc l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d1d4 l     O .rwdata	00000006 _ZL14pstrUsageGlove
000284e8 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000284f4 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00028500 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
0002850c l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d1dc l     O .rwdata	00000005 _ZL13pstrUsageVest
00028518 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00028524 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00028530 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00028540 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00028550 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0002855c l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00028568 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d1e4 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d1e8 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d1f0 l     O .rwdata	00000005 _ZL13pstrUsageRate
00028574 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00028580 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00028590 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
000285a0 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
000285b0 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
000285bc l     O .rodata	0000000b _ZL18pstrUsageStickType
000285c8 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d1f8 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d200 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d208 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d210 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d218 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d220 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d228 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d230 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d238 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d240 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d248 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d250 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
000285d4 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
000285e0 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000285ec l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d258 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d260 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d268 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d270 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d278 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000285f8 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00028608 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d280 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d288 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00028614 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00028624 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00028634 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00028644 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00028654 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00028664 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00028674 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00028684 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00028694 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d28c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
000286a4 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d294 l     O .rwdata	00000005 _ZL13pstrUsageBump
000286b4 l     O .rodata	00000009 _ZL16pstrUsageNewGame
000286c0 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d29c l     O .rwdata	00000007 _ZL15pstrUsagePlayer
000286cc l     O .rodata	00000009 _ZL16pstrUsageGunBolt
000286d8 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d2a4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
000286e4 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
000286f4 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00028700 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
0002870c l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00028718 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
0002872c l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
0002873c l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
0002874c l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00028758 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00028764 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
0002877c l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00028790 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
000287a8 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
000287bc l     O .rodata	00000009 _ZL16pstrUsageNumLock
000287c8 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
000287d4 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d2ac l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d2b4 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d2bc l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d2c0 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d2c8 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d2cc l     O .rwdata	00000005 _ZL13pstrUsageMute
000287e0 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
000287ec l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
000287fc l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d2d4 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
0002880c l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
0002881c l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d2dc l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d2e4 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00028828 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
0002883c l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d2ec l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d2f0 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00028848 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
0002885c l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d2f4 l     O .rwdata	00000005 _ZL13pstrUsageRing
00028868 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00028874 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d2fc l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d304 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d30c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d314 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00028880 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d31c l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d324 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
0002888c l     O .rodata	00000009 _ZL17pstrUsageCoverage
00028898 l     O .rodata	0000000b _ZL18pstrUsageNightMode
000288a4 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
000288b0 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d328 l     O .rwdata	00000005 _ZL19pstrUsageConference
000288bc l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d330 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d338 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d340 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
000288c8 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d348 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d350 l     O .rwdata	00000006 _ZL14pstrUsageReady
000288d4 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
000288e0 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d358 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d360 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d364 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d368 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d370 l     O .rwdata	00000007 _ZL15pstrUsageRewind
000288ec l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d378 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d380 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d388 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d38c l     O .rwdata	00000006 _ZL14pstrUsageError
000288f8 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00028908 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
0002891c l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d394 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00028934 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00028940 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00028950 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d39c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00028960 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00028970 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00028984 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00028998 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
000289ac l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
000289c0 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d3a4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
000289d0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
000289dc l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d3ac l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
000289e8 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
000289f4 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d3b4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00028a04 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00028a10 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d3bc l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d3c4 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00028a1c l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00028a28 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d3cc l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d3d4 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d3dc l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d3e4 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00028a34 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d3ec l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d3f4 l     O .rwdata	00000005 _ZL13pstrUsagePark
00028a40 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00028a4c l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d3fc l     O .rwdata	00000005 _ZL13pstrUsageLine
00028a58 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00028a64 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00028a70 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00028a7c l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00028a88 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d404 l     O .rwdata	00000005 _ZL13pstrUsageSend
00028a94 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00028aa0 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00028aac l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00028ab8 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00028ac4 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00028ad0 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d40c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00028ae0 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00028af0 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00028b04 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00028b18 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00028b2c l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00028b40 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00028b50 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00028b60 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00028b74 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00028b84 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00028b94 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00028ba4 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00028bb0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00028bbc l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00028bc8 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d410 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d418 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d41c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d420 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d424 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d428 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d42c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d430 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d434 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d438 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002d43c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002d440 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002d444 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002d448 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002d44c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002d450 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002d454 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00028bdc l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00028bec l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00028bf8 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00028c04 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002d458 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002d45c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002d464 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002d46c l     O .rwdata	00000006 _ZL14pstrUsageReset
0002d474 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00028c10 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00028c1c l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002d47c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00028c28 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002d484 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00028c34 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002d48c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00028c40 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00028c4c l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00028c58 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00028c64 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00028c70 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00028c80 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00028c90 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00028c9c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00028ca8 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002d494 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00028cb8 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00028cc8 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002d49c l     O .rwdata	00000006 _ZL14pstrUsageStill
0002d4a4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00028cd4 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00028ce0 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00028cec l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00028cf8 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00028d08 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002d4a8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002d4b0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00028d14 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00028d24 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00028d30 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00028d3c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00028d48 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00028d54 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00028d60 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00028d6c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00028d7c l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00028d88 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00028d94 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00028da0 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002d4b8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002d4c0 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00028db0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00028dc0 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00028dcc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00028dd8 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00028de8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00028df8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002d4c8 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002d4d0 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00028e08 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002d4d8 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002d4e0 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002d4e8 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002d4f0 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002d4f8 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00028e14 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00028e20 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002d500 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002d508 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00028e2c l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00028e38 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00028e44 l     O .rodata	00000009 _ZL17pstrUsageTracking
00028e50 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00028e5c l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002d510 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00028e68 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002d518 l     O .rwdata	00000005 _ZL13pstrUsageMark
00028e74 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00028e80 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00028e8c l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00028e98 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00028ea8 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00028ebc l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00028ecc l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00028edc l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00028ee8 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00028ef4 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00028f00 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00028f0c l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002d520 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002d524 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002d52c l     O .rwdata	00000005 _ZL13pstrUsageBass
0002d534 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00028f18 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00028f24 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002d53c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002d544 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002d548 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002d550 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002d558 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00028f30 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00028f3c l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00028f48 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00028f54 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002d560 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00028f60 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00028f6c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00028f78 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00028f84 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00028f94 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00028fa4 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00028fb0 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00028fbc l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00028fc8 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002d568 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002d570 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00028fd4 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00028fe0 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002d578 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00028fec l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00028ffc l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0002900c l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00029018 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00029024 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00029030 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002d580 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002d588 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0002903c l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00029048 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00029054 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00029060 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002d590 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00029070 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
0002907c l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002d598 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002d5a0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002d5a8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
0002908c l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00029098 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
000290a4 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
000290b0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
000290bc l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
000290cc l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
000290e0 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
000290ec l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00029100 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00029110 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0002911c l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0002912c l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0002913c l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0002914c l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00029158 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00029168 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00029174 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00029184 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00029194 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
000291a4 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
000291b4 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
000291c8 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002d5b0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
000291d8 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000291ec l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00029200 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00029210 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00029220 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00029230 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0002923c l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00029248 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00029254 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00029260 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0002926c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0002927c l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00029294 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
000292a0 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
000292ac l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
000292b8 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
000292c4 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
000292d0 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
000292dc l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000292f0 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002d5b8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
000292fc l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002d5c0 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00029308 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00029314 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00029324 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00029330 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00029340 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00029350 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00029360 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0002936c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00029378 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00029384 l     O .rodata	00000009 _ZL16pstrUsageALClock
00029390 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
000293a0 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
000293ac l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
000293b8 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
000293c4 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
000293d0 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
000293e4 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
000293f4 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00029400 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00029414 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00029420 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00029430 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00029444 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00029458 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0002946c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0002947c l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00029494 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
000294a8 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
000294b8 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
000294c8 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002d5c8 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002d5d0 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
000294dc l     O .rodata	00000009 _ZL16pstrUsageACClose
0002d5d8 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002d5e0 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002d5e8 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002d5f0 l     O .rwdata	00000008 _ZL15pstrUsageACSave
000294e8 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002d5f8 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002d600 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002d608 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002d610 l     O .rwdata	00000007 _ZL14pstrUsageACCut
000294f4 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00029500 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002d618 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0002950c l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0002951c l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002d620 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002d628 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002d630 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002d638 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002d640 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00029528 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00029534 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00029544 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00029554 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002d648 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00029560 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002956c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00029578 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002d650 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00029584 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00029590 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
000295a0 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
000295ac l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
000295bc l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
000295cc l     O .rodata	0000000a _ZL17pstrUsageACScroll
000295d8 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
000295e4 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002d658 l     O .rwdata	00000007 _ZL14pstrUsageACPan
000295f4 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00029600 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00029610 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002d660 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002d668 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002d670 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002d678 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00029620 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0002962c l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002d680 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00029638 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00029644 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00029650 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0002965c l     O .rodata	0000000a _ZL17pstrUsageACResize
00029668 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00029674 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00029680 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0002968c l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00029698 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
000296a4 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
000296b0 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
000296bc l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
000296cc l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
000296dc l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
000296ec l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
000296fc l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00029708 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00029718 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00029724 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00029734 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00029744 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00029754 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00029760 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002976c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00029778 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00029784 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002d688 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002d690 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00029790 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002d698 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002d6a0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002979c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002d6a8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
000297a8 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
000297b8 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
000297c4 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
000297d4 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
000297e4 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
000297f4 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002d6b0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002d6b8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00029800 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002d6c0 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0002980c l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00029818 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00029828 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00029834 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00029844 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00029850 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0002985c l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00029868 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00029874 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00029880 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0002988c l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002d6c8 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002d6d0 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00029898 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
000298a4 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002d6d8 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
000298b4 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
000298c0 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
000298cc l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
000298dc l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
000298ec l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
000298f8 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00029904 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00029910 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002d6e0 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0002991c l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00029928 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00029934 l     O .rodata	00000009 _ZL16pstrUsageACReply
00029940 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00029950 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002d6e8 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0002995c l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002d6f0 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002d6f8 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00029968 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00029974 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00029980 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0002998c l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00029998 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
000299a4 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
000299b0 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
000299bc l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
000299c8 l     O .rodata	0000000a _ZL17pstrUsageACRename
000299d4 l     O .rodata	00000009 _ZL16pstrUsageACMerge
000299e0 l     O .rodata	00000009 _ZL16pstrUsageACSplit
000299ec l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
000299f8 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00029a04 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002d700 l     O .rwdata	00000004 _ZL12pstrUsagePen
00029a10 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00029a1c l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00029a28 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00029a34 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00029a40 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002d704 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00029a50 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002d70c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00029a5c l     O .rodata	00000009 _ZL17pstrUsageArmature
00029a68 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00029a7c l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002d714 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002d71c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002d724 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00029a8c l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00029a98 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00029aa4 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002d72c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002d734 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002d73c l     O .rwdata	00000004 _ZL12pstrUsageTap
0002d740 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00029ab0 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00029abc l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00029acc l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00029adc l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002d748 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002d750 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002d758 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002d760 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00029aec l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002d768 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002d770 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00029af8 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002d778 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002d780 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00029b04 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00029b10 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00029b20 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00029b2c l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00029b3c l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00029b48 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00029b58 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00029b64 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00029b74 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00029b80 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00029b90 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00029ba0 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00029bac l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00029bb8 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00029bc4 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00029bd0 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00029bdc l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00029be8 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00029bf4 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00029c04 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00029c14 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002d788 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002d78c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002d790 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002d798 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00029c20 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00029c2c l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00029c38 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00029c44 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002d7a0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00029c50 l     O .rodata	00000009 _ZL17pstrUsageFontData
00029c5c l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00029c68 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00029c74 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00029c84 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00029c94 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00029ca4 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00029cb0 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00029cbc l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00029cc8 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00029cd4 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00029ce0 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00029cec l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00029cf8 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00029d04 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00029d10 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00029d20 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00029d30 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00029d40 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00029d4c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00029d58 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00029d68 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002d7a8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00029d74 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00029d84 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00029d94 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00029da0 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00029dac l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00029dbc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00029dcc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00029ddc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00029dec l     O .rodata	0000000a _ZL17pstrUsageBlitData
00029df8 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00029e04 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00029e10 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00029e20 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00029e30 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00029e40 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00029e50 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002d7b0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002d7b8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00029e60 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002d7c0 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002d7c8 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002d7d0 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002d7d8 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00029e6c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002d7e0 l     O .rwdata	00000005 _ZL13pstrUsageCine
00029e78 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002d7e8 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002d7f0 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00029e84 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00029e94 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00029ea4 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00029eb4 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00029ec0 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00029ecc l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00029ee0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00029ef4 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00029f08 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00029f1c l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00029f2c l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00029f3c l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00029f48 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00029f54 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00029f64 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00029f72 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00029f82 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0002d7f8 l     O .rwdata	00000004 _ZL5synth
0000a2ac l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000a314 l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000b548 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000b5ec l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000b7f8 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000b84c l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000b8d8 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000ba0c l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000ba94 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000bcc0 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000c598 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000c880 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
00030bc4 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000c938 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000cae8 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00030a60 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000d868 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00030a68 l     O .bss	00000004 fc_static
0000d980 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000da40 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0002a688 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002a466 l     O .rodata	00000010 zeroes.4389
0002a476 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002a486 l     O .rodata	00000010 zeroes.4404
000135a0 l     F .text	000000bc __sbprintf
0002a496 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000137b0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00015308 l     F .text	00000008 __fp_unlock
0001531c l     F .text	0000019c __sinit.part.1
000154b8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002aed4 l     O .rwdata	00000020 lc_ctype_charset
0002aeb4 l     O .rwdata	00000020 lc_message_charset
0002aef4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002a4c4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002a5e8 l     O .rodata	00000010 zeroes.4333
0002a5f8 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
000194b8 l     F .text	000000fc __sprint_r.part.0
0002a608 l     O .rodata	00000010 zeroes.4349
0001aaf4 l     F .text	000000bc __sbprintf
0002a618 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001e8fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001ea10 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001ea70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001eb84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001ec6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001edd8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001eec4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001f0a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002d854 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0001f314 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001f3f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001f534 l     F .text	00000034 alt_dev_reg
0002b0d4 l     O .rwdata	00000038 i2c_0
0002b10c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0001f614 l     F .text	00000110 optional_irq_callback
0001f774 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00021450 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002165c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00021e90 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00022228 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00022718 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00022878 l     F .text	0000003c alt_get_errno
000228b4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00030aa0 g     O .bss	00000004 alt_instruction_exception_handler
0000ca40 g     F .text	00000028 __cxa_free_exception
000236a4  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000e968 g     F .text	00000018 putchar
0000b09c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00017554 g     F .text	00000074 _mprec_log10
0000443c  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000b4e8 g     F .text	00000018 _ZSt10unexpectedv
00017640 g     F .text	0000008c __any_on
0001b200 g     F .text	00000054 _isatty_r
0002a4d0 g     O .rodata	00000028 __mprec_tinytens
0001efdc g     F .text	0000007c alt_main
000068cc g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000e980 g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
00006d28 g     F .text	000000b0 _Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh
00030bfc g     O .bss	00000100 alt_irq
0000cbdc g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00009254 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001b254 g     F .text	00000060 _lseek_r
0000dafc g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002d86c g       *ABS*	00000000 __flash_rwdata_start
0000626c g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001d338 g     F .text	00000088 .hidden __eqdf2
0000443c  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000024c8 g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000c66c g     F .text	00000084 __cxa_rethrow
0000da88 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000b524 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006b10 g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000daec g     F .text	00000010 .hidden _Unwind_GetIP
00030cfc g       *ABS*	00000000 __alt_heap_start
00008b94  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0000ed4c g     F .text	0000005c _kill_r
00006dd8 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000e924 g     F .text	0000003c printf
000236c8  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001b314 g     F .text	0000009c _wcrtomb_r
0000eb14 g     F .text	00000084 _signal_r
00005ff4  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
00017ee4 g     F .text	0000005c __sseek
00015668 g     F .text	00000010 __sinit
0001abb0 g     F .text	00000140 __swbuf_r
000098c8 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000cabc g     F .text	0000002c __cxa_free_dependent_exception
0000a3f0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000043dc  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
0001613c g     F .text	0000007c _setlocale_r
0002a0ac  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
000154c0 g     F .text	00000078 __sfmoreglue
0001fe6c g     F .text	000000a8 alt_avalon_i2c_rx_read
0001f07c g     F .text	00000024 __malloc_unlock
000051b0 g     F .text	00000080 _Z8set_notehh
0000cbdc g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
000084e4 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000ae24 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00008c7c  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
00001ffc g     F .text	0000030c _ZN3USB11ConfiguringEhhb
0000c860 g     F .text	00000020 _ZSt18uncaught_exceptionv
00021084 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001d6c g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
00009c9c g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0000b118 g     F .text	00000020 __cxa_deleted_virtual
0001fbf0 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002938  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
00008d40 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
000096d8 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
000164b8 g     F .text	0000015c memmove
00005d10  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000cbb4 g     F .text	00000004 _ZNSt9exceptionD2Ev
00015650 g     F .text	00000018 _cleanup
000208d4 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00016614 g     F .text	000000a8 _Balloc
0000d7f8 g     F .text	00000070 .hidden __fixsfsi
00003a3c g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001d3c0 g     F .text	000000dc .hidden __gtdf2
00003b00 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0002a2e0  w    O .rodata	00000014 _ZTVSt13bad_exception
00022f08 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001f350 g     F .text	00000078 times
00008bfc  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000db38 g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002c188  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008468 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004908  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001b1a4 g     F .text	0000005c _fstat_r
000093a4 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
00030a78 g     O .bss	00000004 errno
00005a50 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
00017e60 g     F .text	00000008 __seofread
00008f50 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
00018118 g     F .text	000013a0 ___svfiprintf_internal_r
0000dd14 g     F .text	00000074 .hidden _Unwind_Backtrace
00030a8c g     O .bss	00000004 alt_argv
000030c8 g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
0003416c g       *ABS*	00000000 _gp
0001f3c8 g     F .text	00000030 usleep
000210c8 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000d314 g     F .text	000004e4 .hidden __subsf3
00007df4 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002c924  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0001eb64 g     F .text	00000020 getpid
0000c368 g     F .text	00000230 __cxa_call_unexpected
0000c6f0 g     F .text	00000008 __cxa_get_exception_ptr
0001fd80 g     F .text	00000044 alt_avalon_i2c_is_busy
0002af54 g     O .rwdata	00000180 alt_fd_list
00009100 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00023614  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
00006dd8 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
00004214 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000e960 g     F .text	00000008 _putchar_r
0000dc28 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0001fb24 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c0c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000dab8 g     F .text	00000018 .hidden _Unwind_GetCFA
0000b500 g     F .text	00000014 _ZSt13set_terminatePFvvE
000223c8 g     F .text	00000090 alt_find_dev
00023608  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
000112a0 g     F .text	00000008 _times_r
0000e684 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00005dd8  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000ca68 g     F .text	00000054 __cxa_allocate_dependent_exception
00015310 g     F .text	0000000c _cleanup_r
0000b1b0 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001e778 g     F .text	000000dc .hidden __floatsidf
000236bc  w    O .rodata	0000000c _ZTV13USBReadParser
000227fc g     F .text	0000007c alt_io_redirect
0001d49c g     F .text	000000f4 .hidden __ltdf2
0000475c  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00023534 g       *ABS*	00000000 __DTOR_END__
0000b1c8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00020714 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0000ea40 g     F .text	00000014 puts
0002a134  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
000230f8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007e7c g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
00009188 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00017d98 g     F .text	00000074 __fpclassifyd
00009e24 g     F .text	00000324 _Z9MIDI_pollv
000174b0 g     F .text	000000a4 __ratio
0001aad8 g     F .text	0000001c __vfiprintf_internal
000078f8 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00021854 g     F .text	0000021c altera_avalon_jtag_uart_read
0000de50 g     F .text	00000014 malloc
0000e8f4 g     F .text	00000030 _printf_r
0000cd44 g     F .text	00000064 .hidden __udivsi3
0001ebc0 g     F .text	000000ac isatty
0000eb98 g     F .text	000000bc _raise_r
00009344 g     F .text	0000003c _ZN8MAX3421eC2Ev
0002a520 g     O .rodata	000000c8 __mprec_tens
00006b7c g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
000161b8 g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004714  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0001f990 g     F .text	00000098 alt_avalon_i2c_enable
00030a74 g     O .bss	00000004 __malloc_top_pad
0000eda8 g     F .text	00000004 _getpid_r
00020fb8 g     F .text	00000068 alt_avalon_i2c_int_disable
00030a58 g     O .bss	00000001 usb_task_state
0002d834 g     O .rwdata	00000004 __mb_cur_max
000161e8 g     F .text	0000000c _localeconv_r
0000a6b4 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003a6c g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
00006f58 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
00016a48 g     F .text	0000003c __i2b
00015aec g     F .text	000004c8 __sfvwrite_r
0000b348 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0000ec54 g     F .text	000000a8 __sigtramp_r
000081b0 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
000029f0  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0000ea54 g     F .text	00000054 _sbrk_r
0002a17c  w    O .rodata	00000020 _ZTVSt9type_info
0000480c  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
00008fe8 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001b2b4 g     F .text	00000060 _read_r
0000cbbc g     F .text	0000000c _ZNKSt9exception4whatEv
00005230 g     F .text	0000004c _Z8set_adsrhm
0002d84c g     O .rwdata	00000004 alt_max_fd
000060c4 g     F .text	00000050 _Z9E_Notifycci
000082f0 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001ae98 g     F .text	000000f0 _fclose_r
000152d8 g     F .text	00000030 fflush
00009d34 g     F .text	00000078 _Z6onInitv
00030a70 g     O .bss	00000004 __malloc_max_sbrked_mem
00009650 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
00020ae0 g     F .text	00000210 alt_avalon_i2c_master_receive
00025cf0  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001c0bc g     F .text	000008ac .hidden __adddf3
0002a0e0  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004838  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008a48 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00017258 g     F .text	0000010c __b2d
0001baf8 g     F .text	000005c4 .hidden __umoddi3
0001ef00 g     F .text	000000dc lseek
00005e00  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000b20c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0000621c g     F .text	00000028 _Z8E_Notifyhi
0000b0f4 g     F .text	00000004 _ZdlPv
00021020 g     F .text	00000064 alt_avalon_i2c_int_enable
0002d824 g     O .rwdata	00000004 _global_impure_ptr
0000a6c4 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00017834 g     F .text	00000564 _realloc_r
00030cfc g       *ABS*	00000000 __bss_end
00022628 g     F .text	000000f0 alt_iic_isr_register
00022e00 g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000da70 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001b4fc g     F .text	000005fc .hidden __udivdi3
00020ee0 g     F .text	00000058 alt_avalon_i2c_int_status_get
0001b100 g     F .text	00000024 _fputwc_r
0002a4f8 g     O .rodata	00000028 __mprec_bigtens
0001682c g     F .text	00000104 __s2b
0000ddec g     F .text	00000018 abort
0001e854 g     F .text	000000a8 .hidden __floatunsidf
00025ac8  w    O .rodata	00000014 _ZTS17MouseReportParser
00016f98 g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
00008cb8  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
000032ac g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000c7ac g     F .text	000000b4 __cxa_end_catch
0000907c g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00015688 g     F .text	00000018 __fp_lock_all
00023700  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
000225dc g     F .text	0000004c alt_ic_irq_enabled
0000cbb8 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00002cbc  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
00005db0  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
00022d64 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00025c7c  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0001f810 g     F .text	00000054 alt_avalon_i2c_register_callback
00030a94 g     O .bss	00000004 alt_irq_active
0001f864 g     F .text	000000ec alt_avalon_i2c_init
0000b4c0 g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002af2c g     O .rwdata	00000028 alt_dev_null
0000a6f8 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00006028  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000cbe4 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004ab8  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
00002e68  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002790 g     F .text	00000084 _ZN3USB7setConfEhhh
00008b8c g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002a1d8  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
00022208 g     F .text	00000020 alt_dcache_flush_all
00016930 g     F .text	00000068 __hi0bits
00025cfc  w    O .rodata	0000000c _ZTI14MidiDescParser
000098a0 g     F .text	00000028 _Z10Vbus_powerb
0002d80c  w    O .rwdata	00000008 _ZTISt9exception
0001e6f8 g     F .text	00000080 .hidden __fixdfsi
00025adc  w    O .rodata	00000012 _ZTS15HIDReportParser
0000a344  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002d86c g       *ABS*	00000000 __ram_rwdata_end
0000b098 g     F .text	00000004 _ZNSt9type_infoD1Ev
0002d844 g     O .rwdata	00000008 alt_dev_list
0000cbe4 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0001f434 g     F .text	00000100 write
000176cc g     F .text	000000a0 _putc_r
00009d10 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
000201a0 g     F .text	0000004c alt_avalon_i2c_check_arblost
0000b0ac g     F .text	00000004 _ZNSt9type_infoD0Ev
00004930  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0000ce28 g     F .text	000000bc .hidden __gtsf2
00020f7c g     F .text	0000003c alt_avalon_i2c_int_clear
00008d14  w    F .text	0000002c _Z10D_PrintHexItEvT_i
000235f4  w    O .rodata	00000014 _ZTV11AddressPool
0002a688 g       *ABS*	00000000 __ram_rodata_end
0001eaac g     F .text	000000b8 fstat
0000286c  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0001eca8 g     F .text	00000130 kill
000060a0  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001d49c g     F .text	000000f4 .hidden __ledf2
00023728  w    O .rodata	00000020 _ZTI7XBOXONE
0002d858 g     O .rwdata	00000008 alt_avalon_i2c_list
0000469c  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00025a22 g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
00016d10 g     F .text	00000140 __pow5mult
00004c84  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
000195cc g     F .text	0000150c ___vfiprintf_internal_r
00030a84 g     O .bss	00000004 __nlocale_changed
0000cda8 g     F .text	00000058 .hidden __umodsi3
0000b0a4 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00004478  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
00009dac g     F .text	00000078 _Z10MIDI_setupv
00002308 g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000b514 g     F .text	00000010 _ZSt13get_terminatev
00030cfc g       *ABS*	00000000 end
000236b0  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004a84  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
00009564 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
00005fc0  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000dcfc g     F .text	00000018 .hidden _Unwind_DeleteException
00021390 g     F .text	000000c0 altera_avalon_jtag_uart_init
00005d88  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001f950 g     F .text	00000040 alt_avalon_i2c_open
00025a38 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0000b278 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000a6b4 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002c918 g     O .rwdata	00000004 UsbDEBUGlvl
0002352c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00020328 g     F .text	000000e8 alt_avalon_i2c_master_tx
00021f08 g     F .text	0000007c alt_avalon_timer_sc_init
0000dd88 g     F .text	00000064 .hidden __clzsi2
0000b138 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00021a70 g     F .text	00000224 altera_avalon_jtag_uart_write
00015678 g     F .text	00000004 __sfp_lock_acquire
0002a268  w    O .rodata	00000012 _ZTSSt13bad_exception
000163d4 g     F .text	000000e4 memchr
000112a8 g     F .text	000022dc ___vfprintf_internal_r
0000edac g     F .text	00000058 _sprintf_r
000043dc  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
000157dc g     F .text	00000310 _free_r
00022afc g     F .text	0000022c alt_printf
000161c4 g     F .text	00000010 __locale_mb_cur_max
00023374 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
00030a80 g     O .bss	00000004 __mlocale_changed
0001f724 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002d82c g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003a44 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00030a98 g     O .bss	00000004 _alt_tick_rate
0002a16c  w    O .rodata	0000000d _ZTSSt9type_info
00020cf0 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000b0f8 g     F .text	00000020 __cxa_pure_virtual
000235e0  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00023768  w    O .rodata	00000010 _ZTS13USBReadParser
00021114 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00016e50 g     F .text	00000148 __lshift
00021c94 g     F .text	000001fc alt_avalon_spi_command
00030a9c g     O .bss	00000004 _alt_nticks
0000ed10 g     F .text	00000018 signal
0001f0dc g     F .text	00000104 read
00005578 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0001f5a0 g     F .text	00000074 alt_sys_init
00023664  w    O .rodata	00000040 _ZTV7XBOXONE
00017f48 g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
0002325c g     F .text	00000118 __register_exitproc
000026fc g     F .text	00000094 _ZN3USB7setAddrEhhh
00006114 g     F .text	00000084 _Z8E_NotifyPKci
00025cb8  w    O .rodata	0000000c _ZTV14MidiDescParser
00008c24  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00002efc  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000a434 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00005f8c  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
000048c8  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002054c g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00016a84 g     F .text	0000028c __multiply
00002654 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002c906 g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
000216fc g     F .text	00000068 altera_avalon_jtag_uart_close
0000286c  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000ce00 g     F .text	00000028 .hidden __mulsi3
0002a688 g       *ABS*	00000000 __ram_rwdata_start
0000db58 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
00023534 g       *ABS*	00000000 __ram_rodata_start
00030bd4 g     O .bss	00000028 __malloc_current_mallinfo
00004b20  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000dc6c g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00017364 g     F .text	0000014c __d2b
0002a308  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000b098 g     F .text	00000004 _ZNSt9type_infoD2Ev
00008bd4  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004534  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002c174  w    O .rwdata	00000008 _ZTI11AddressPool
0000cbe8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000a630 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00025d08  w    O .rodata	00000011 _ZTS14MidiDescParser
0002a10c  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
0002122c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00023034 g     F .text	000000c4 alt_get_fd
00005794 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
000220b0 g     F .text	00000158 alt_busy_sleep
0000666c g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002d81c  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001ad68 g     F .text	00000054 _close_r
000231e0 g     F .text	0000007c memcmp
0001fdc4 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
000212ec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000079cc g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
00030cfc g       *ABS*	00000000 __alt_stack_base
0002133c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000a3f0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00007c34 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004174 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
0001365c g     F .text	00000154 __swsetup_r
0000dcb0 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00030a5c g     O .bss	00000004 i2c_dev
0001c968 g     F .text	000009d0 .hidden __divdf3
0000a394  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00015538 g     F .text	00000118 __sfp
000175c8 g     F .text	00000078 __copybits
0000b09c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0002aaac g     O .rwdata	00000408 __malloc_av_
000044f8  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00015684 g     F .text	00000004 __sinit_lock_release
0001d590 g     F .text	0000086c .hidden __muldf3
00017e0c g     F .text	00000054 __sread
00004aec  w    F .text	00000034 _ZN13USBReadParserC2Ev
0002a2cc  w    O .rodata	00000014 _ZTVSt9exception
0000cbe0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002838  w    F .text	00000034 _ZN11AddressPoolC2Ev
00022f2c g     F .text	00000108 alt_find_file
000047e0  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
00022264 g     F .text	000000a4 alt_dev_llist_insert
0001f058 g     F .text	00000024 __malloc_lock
0001f264 g     F .text	000000b0 sbrk
0000efe4 g     F .text	000022bc ___svfprintf_internal_r
000201ec g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00020154 g     F .text	0000004c alt_avalon_i2c_check_nack
0002a208  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000c5dc g     F .text	00000090 __cxa_throw
0001527c g     F .text	0000005c _fflush_r
0000db1c g     F .text	00000010 .hidden _Unwind_SetIP
00006a78 g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001adbc g     F .text	000000dc _calloc_r
00023754  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
00006244 g     F .text	00000028 _Z8E_Notifydi
000077f0 g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
00030a50 g       *ABS*	00000000 __bss_start
0002c198  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000e7cc g     F .text	00000128 memset
000082f0 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00004d00  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000a148 g     F .text	00000164 main
000095d8 g     F .text	00000078 _ZN8MAX3421e5regRdEh
000097d4 g     F .text	000000cc _ZN8MAX3421e5resetEv
00020120 g     F .text	00000034 alt_avalon_i2c_master_target_set
00030a90 g     O .bss	00000004 alt_envp
00023778  w    O .rodata	00000012 _ZTS15USBDeviceConfig
00030a6c g     O .bss	00000004 __malloc_max_total_mem
0002128c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00030a59 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001acf0 g     F .text	00000018 __swbuf
0000cb9c g     F .text	0000000c __cxa_get_globals_fast
00020f38 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00009344 g     F .text	0000003c _ZN8MAX3421eC1Ev
00004ab8  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002814  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
00017f40 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001af88 g     F .text	00000014 fclose
0000a3bc  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
00004048 g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
00006198 g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
000139d8 g     F .text	00001688 _dtoa_r
0000de78 g     F .text	0000080c _malloc_r
0001b470 g     F .text	00000030 __ascii_wctomb
0000cbc8 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002d850 g     O .rwdata	00000004 alt_errno
00025abc  w    O .rodata	0000000c _ZTI17MouseReportParser
0000ed28 g     F .text	00000010 _init_signal
0000255c g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
00006824 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0002a1fc  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000042b8 g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
00015fb4 g     F .text	000000c4 _fwalk
00009380 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00002e00  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000cbb8 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
0001776c g     F .text	000000c8 putc
0000cc4c g     F .text	00000084 .hidden __divsi3
00025d1c  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
000156b8 g     F .text	00000124 _malloc_trim_r
00023534 g       *ABS*	00000000 __CTOR_END__
0000cee4 g     F .text	00000430 .hidden __mulsf3
000046d8  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
00008ce0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00025a70  w    O .rodata	00000028 _ZTV17MouseReportParser
0000ee70 g     F .text	000000dc strcmp
000030c8 g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00023534 g       *ABS*	00000000 __flash_rodata_start
0002a2f4  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000a36c  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00023534 g       *ABS*	00000000 __DTOR_LIST__
00025cc4  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001d338 g     F .text	00000088 .hidden __nedf2
0001f568 g     F .text	00000038 alt_irq_init
0001f1e0 g     F .text	00000084 alt_release_fd
0000a400 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00023748  w    O .rodata	00000009 _ZTS7XBOXONE
0000ee04 g     F .text	0000006c sprintf
0002a31c g     O .rodata	00000100 .hidden __clz_tab
00030a7c g     O .bss	00000004 _PathLocale
00023194 g     F .text	00000014 atexit
0000ce28 g     F .text	000000bc .hidden __gesf2
0001ad08 g     F .text	00000060 _write_r
00002440 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
000029c4  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
000161f4 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00025a44  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00009758 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000db50 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002a140  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000cb44 g     F .text	00000058 __cxa_call_terminate
0002d828 g     O .rwdata	00000004 _impure_ptr
0002d814  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00023630  w    O .rodata	0000000e _ZTS11AddressPool
00030a88 g     O .bss	00000004 alt_argc
00003000  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
00015060 g     F .text	0000021c __sflush_r
00008ce0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00002c50  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
00022368 g     F .text	00000060 _do_dtors
00030b60 g     O .bss	00000064 Midi
000161e0 g     F .text	00000008 __locale_cjk_lang
000200e8 g     F .text	00000038 alt_avalon_i2c_master_target_get
0001fff8 g     F .text	000000f0 alt_avalon_i2c_send_address
0000b538 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002838  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
0000527c g     F .text	000002fc _Z9calc_adsrttttff
000171f4 g     F .text	00000064 __ulp
0000db40 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
000156a0 g     F .text	00000018 __fp_unlock_all
00004b20  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
00004138 g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004780  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002d83c g     O .rwdata	00000008 alt_fs_list
0002a2a8  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00025aa4  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004aec  w    F .text	00000034 _ZN13USBReadParserC1Ev
0000db2c g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
000047ac  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000c6f8 g     F .text	000000b4 __cxa_begin_catch
00004330 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0000b1c8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000b4d8 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00005d60  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001620c g     F .text	0000000c localeconv
00009ac4 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004958  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000cbd8 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
000211c4 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002d808 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
00008de0 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00022478 g     F .text	00000050 alt_ic_isr_register
0001fa28 g     F .text	0000004c alt_avalon_i2c_disable
0000c9e0 g     F .text	00000060 __cxa_allocate_exception
0002a0d4  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002d86c g       *ABS*	00000000 _edata
00004a84  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
00030cfc g       *ABS*	00000000 _end
0000a820 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000bd68 g     F .text	00000600 __gxx_personality_sj0
0001af9c g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	000003f0 _ZN3USB4TaskEv
00021764 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002c190  w    O .rwdata	00000008 _ZTI13USBReadParser
0001fa74 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000cbb4 g     F .text	00000004 _ZNSt9exceptionD1Ev
00022550 g     F .text	0000008c alt_ic_irq_disable
00005ce8  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
00017e68 g     F .text	0000007c __swrite
0002d830 g     O .rwdata	00000004 __malloc_trim_threshold
000161d4 g     F .text	0000000c __locale_msgcharset
000231a8 g     F .text	00000038 exit
0000dad0 g     F .text	0000001c .hidden _Unwind_SetGR
00005d38  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
00016078 g     F .text	000000c4 _fwalk_reent
0000a594 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00016ff8 g     F .text	000001fc __mdiff
0000b400 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000ccd0 g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0001567c g     F .text	00000004 __sfp_lock_release
0002a27c  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
00006050  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00003bf8 g     F .text	000003c8 _ZN7XBOXONE10readReportEv
0001fc84 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
000099ac g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
0001ff14 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00025cd0  w    O .rodata	00000020 _ZTI9USBH_MIDI
00003fc0 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0000cbec g     F .text	00000060 .hidden __fixunssfsi
00007778 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
0001ea3c g     F .text	00000034 _exit
00021f84 g     F .text	0000012c alt_alarm_start
00025a98  w    O .rodata	0000000c _ZTI20KeyboardReportParser
00007d90 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000da9c g     F .text	0000001c .hidden _Unwind_GetGR
0000cba8 g     F .text	0000000c __cxa_get_globals
00006374 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
00016218 g     F .text	000001bc __smakebuf_r
0002d804 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004738  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0000ef4c g     F .text	00000098 strlen
0000eaa8 g     F .text	0000006c _init_signal_r
0002d7fc  w    O .rwdata	00000008 _ZTISt9type_info
000229a0 g     F .text	0000015c open
0001d3c0 g     F .text	000000dc .hidden __gedf2
00022d28 g     F .text	0000003c alt_putchar
0002a258  w    O .rodata	0000000d _ZTSSt9exception
0000de04 g     F .text	0000004c clock
00006078  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
00009c38 g     F .text	00000064 _ZN8MAX3421e4TaskEv
00025a2c g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
00009430 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002d838 g     O .rwdata	00000004 __wctomb
0000cbd4 g     F .text	00000004 _ZNSt9exceptionD0Ev
000195b4 g     F .text	00000018 __sprint_r
00022458 g     F .text	00000020 alt_icache_flush_all
0000db48 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00030aa4 g     O .bss	000000bc Usb
0002d860 g     O .rwdata	00000004 alt_priority_mask
000044f8  w    F .text	0000003c _ZN11ByteSkipperC2Ev
000224c8 g     F .text	00000088 alt_ic_irq_enable
00013584 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001b4a0 g     F .text	0000005c _wctomb_r
0001ddfc g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003900 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00016998 g     F .text	000000b0 __lo0bits
0002d864 g     O .rwdata	00000008 alt_alarm_list
00022308 g     F .text	00000060 _do_ctors
000236f4  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0000ed38 g     F .text	00000014 __sigtramp
00008e98 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001b3b0 g     F .text	000000c0 wcrtomb
0001e938 g     F .text	000000d8 close
00021178 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002a288  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0001ee40 g     F .text	00000084 alt_load
00020410 g     F .text	0000013c alt_avalon_i2c_master_rx
0000b0b0 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0000459c  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001b124 g     F .text	00000080 fputwc
0000ecfc g     F .text	00000014 raise
0002c90c  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000de64 g     F .text	00000014 free
00015680 g     F .text	00000004 __sinit_lock_acquire
000166e4 g     F .text	00000148 __multadd
0000b1d8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
000166bc g     F .text	00000028 _Bfree
000065c8 g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	1082ff04 	addi	r2,r2,3068
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	1082ff04 	addi	r2,r2,3068
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b24d17 	ldw	r2,-14028(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b24d17 	ldw	r2,-14028(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d6905b14 	ori	gp,gp,16748
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     244:	10829414 	ori	r2,r2,2640

    movhi r3, %hi(__bss_end)
     248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     24c:	18c33f14 	ori	r3,r3,3324

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	001ee400 	call	1ee40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001efdc0 	call	1efdc <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	210d4d04 	addi	r4,r4,13620
     28c:	000ea400 	call	ea40 <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	210d5004 	addi	r4,r4,13632
     2d0:	000ea400 	call	ea40 <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	210d5504 	addi	r4,r4,13652
     304:	000ea400 	call	ea40 <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	210d5804 	addi	r4,r4,13664
     340:	000ea400 	call	ea40 <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	210d5c04 	addi	r4,r4,13680
     374:	000ea400 	call	ea40 <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	210d6004 	addi	r4,r4,13696
     3b0:	000ea400 	call	ea40 <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	210d6304 	addi	r4,r4,13708
     3ec:	000ea400 	call	ea40 <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	210d6604 	addi	r4,r4,13720
     428:	000ea400 	call	ea40 <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	210d6904 	addi	r4,r4,13732
     464:	000ea400 	call	ea40 <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	210d6c04 	addi	r4,r4,13744
     4a0:	000ea400 	call	ea40 <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	210d7004 	addi	r4,r4,13760
     4dc:	000ea400 	call	ea40 <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	210d7404 	addi	r4,r4,13776
     510:	000ea400 	call	ea40 <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000ce000 	call	ce00 <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000cd440 	call	cd44 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000cd440 	call	cd44 <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000cd440 	call	cd44 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000ce000 	call	ce00 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000cd440 	call	cd44 <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000cd440 	call	cd44 <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000ce000 	call	ce00 <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000cd440 	call	cd44 <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000ce000 	call	ce00 <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000ce000 	call	ce00 <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000cd440 	call	cd44 <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000ce000 	call	ce00 <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000de040 	call	de04 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000de040 	call	de04 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000de040 	call	de04 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	00093440 	call	9344 <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	000286c0 	call	286c <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b23945 	stb	r2,-14107(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b23943 	ldbu	r2,-14107(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b23945 	stb	r2,-14107(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	00094300 	call	9430 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	00096500 	call	9650 <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	00094300 	call	9430 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	0009c380 	call	9c38 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	00093800 	call	9380 <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b23945 	stb	r2,-14107(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b23943 	ldbu	r2,-14107(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b23945 	stb	r2,-14107(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b23943 	ldbu	r2,-14107(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b23a15 	stw	r2,-14104(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b23945 	stb	r2,-14107(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b23943 	ldbu	r2,-14107(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	18008e1e 	bne	r3,zero,1bc8 <_ZN3USB4TaskEv+0x3ac>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	00009406 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00008f06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	18006e1e 	bne	r3,zero,1b78 <_ZN3USB4TaskEv+0x35c>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18008b1e 	bne	r3,zero,1bf4 <_ZN3USB4TaskEv+0x3d8>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00008606 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b23945 	stb	r2,-14107(gp)
                        break;
    1a7c:	00005d06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b23a17 	ldw	r2,-14104(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10004c26 	beq	r2,zero,1bd0 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b23945 	stb	r2,-14107(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b23945 	stb	r2,-14107(gp)
                        break;
    1ac0:	00004c06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10003d26 	beq	r2,zero,1bd8 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b23945 	stb	r2,-14107(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00003006 	br	1bd8 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10002a26 	beq	r2,zero,1be0 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b23945 	stb	r2,-14107(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b23a15 	stw	r2,-14104(gp)
                        }
                        break;
    1b4c:	00002406 	br	1be0 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b23a17 	ldw	r2,-14104(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10001e26 	beq	r2,zero,1be8 <_ZN3USB4TaskEv+0x3cc>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b23945 	stb	r2,-14107(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
    1b78:	e0bffc03 	ldbu	r2,-16(fp)
    1b7c:	100f883a 	mov	r7,r2
    1b80:	000d883a 	mov	r6,zero
    1b84:	000b883a 	mov	r5,zero
    1b88:	e13ffe17 	ldw	r4,-8(fp)
    1b8c:	0001ffc0 	call	1ffc <_ZN3USB11ConfiguringEhhb>
    1b90:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
    1b94:	e0bffd03 	ldbu	r2,-12(fp)
    1b98:	10000826 	beq	r2,zero,1bbc <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1b9c:	e0bffd03 	ldbu	r2,-12(fp)
    1ba0:	108034a0 	cmpeqi	r2,r2,210
    1ba4:	1000121e 	bne	r2,zero,1bf0 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
    1ba8:	e0bffd03 	ldbu	r2,-12(fp)
    1bac:	d0b23905 	stb	r2,-14108(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1bb0:	00bfe804 	movi	r2,-96
    1bb4:	d0b23945 	stb	r2,-14107(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bb8:	00000d06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bbc:	00bfe404 	movi	r2,-112
    1bc0:	d0b23945 	stb	r2,-14107(gp)
                        break;
    1bc4:	00000a06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1bc8:	0001883a 	nop
    1bcc:	00000906 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1bd0:	0001883a 	nop
    1bd4:	00000706 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1bd8:	0001883a 	nop
    1bdc:	00000506 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1be0:	0001883a 	nop
    1be4:	00000306 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1be8:	0001883a 	nop
    1bec:	00000106 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bf0:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1bf4:	0001883a 	nop
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	dfc00117 	ldw	ra,4(sp)
    1c00:	df000017 	ldw	fp,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c0c:	defff704 	addi	sp,sp,-36
    1c10:	dfc00815 	stw	ra,32(sp)
    1c14:	df000715 	stw	fp,28(sp)
    1c18:	df000704 	addi	fp,sp,28
    1c1c:	e13ffc15 	stw	r4,-16(fp)
    1c20:	2809883a 	mov	r4,r5
    1c24:	3007883a 	mov	r3,r6
    1c28:	3805883a 	mov	r2,r7
    1c2c:	e13ffd05 	stb	r4,-12(fp)
    1c30:	e0fffe05 	stb	r3,-8(fp)
    1c34:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c38:	e03ff915 	stw	zero,-28(fp)
    1c3c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	000b883a 	mov	r5,zero
    1c48:	1009883a 	mov	r4,r2
    1c4c:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c50:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c54:	e0bff917 	ldw	r2,-28(fp)
    1c58:	1000021e 	bne	r2,zero,1c64 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c5c:	00bff584 	movi	r2,-42
    1c60:	00003d06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1c64:	e0bff917 	ldw	r2,-28(fp)
    1c68:	10c00003 	ldbu	r3,0(r2)
    1c6c:	11000043 	ldbu	r4,1(r2)
    1c70:	2008923a 	slli	r4,r4,8
    1c74:	20c6b03a 	or	r3,r4,r3
    1c78:	11000083 	ldbu	r4,2(r2)
    1c7c:	2008943a 	slli	r4,r4,16
    1c80:	20c6b03a 	or	r3,r4,r3
    1c84:	108000c3 	ldbu	r2,3(r2)
    1c88:	1004963a 	slli	r2,r2,24
    1c8c:	10c4b03a 	or	r2,r2,r3
    1c90:	1000021e 	bne	r2,zero,1c9c <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1c94:	00bff5c4 	movi	r2,-41
    1c98:	00002f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1c9c:	e0bff917 	ldw	r2,-28(fp)
    1ca0:	e0ffff03 	ldbu	r3,-4(fp)
    1ca4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	e0fffd03 	ldbu	r3,-12(fp)
    1cb0:	e13ffe03 	ldbu	r4,-8(fp)
    1cb4:	200f883a 	mov	r7,r4
    1cb8:	000d883a 	mov	r6,zero
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	00029f00 	call	29f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1cc8:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1ccc:	e0bffb03 	ldbu	r2,-20(fp)
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1cd4:	00bff504 	movi	r2,-44
    1cd8:	00001f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	e0fffb03 	ldbu	r3,-20(fp)
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	1009883a 	mov	r4,r2
    1cec:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1cf0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1cf4:	e0bffa17 	ldw	r2,-24(fp)
    1cf8:	1000021e 	bne	r2,zero,1d04 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1cfc:	00bff584 	movi	r2,-42
    1d00:	00001506 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d04:	e0bffa17 	ldw	r2,-24(fp)
    1d08:	e0ffff03 	ldbu	r3,-4(fp)
    1d0c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d10:	e0bffb03 	ldbu	r2,-20(fp)
    1d14:	100f883a 	mov	r7,r2
    1d18:	000d883a 	mov	r6,zero
    1d1c:	000b883a 	mov	r5,zero
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    1d28:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d2c:	e0bffb43 	ldbu	r2,-19(fp)
    1d30:	10000826 	beq	r2,zero,1d54 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0fffb03 	ldbu	r3,-20(fp)
    1d3c:	180b883a 	mov	r5,r3
    1d40:	1009883a 	mov	r4,r2
    1d44:	0002c500 	call	2c50 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d48:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d4c:	e0bffb43 	ldbu	r2,-19(fp)
    1d50:	00000106 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d54:	0005883a 	mov	r2,zero
};
    1d58:	e037883a 	mov	sp,fp
    1d5c:	dfc00117 	ldw	ra,4(sp)
    1d60:	df000017 	ldw	fp,0(sp)
    1d64:	dec00204 	addi	sp,sp,8
    1d68:	f800283a 	ret

00001d6c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1d6c:	defff804 	addi	sp,sp,-32
    1d70:	dfc00715 	stw	ra,28(sp)
    1d74:	df000615 	stw	fp,24(sp)
    1d78:	df000604 	addi	fp,sp,24
    1d7c:	e13ffb15 	stw	r4,-20(fp)
    1d80:	3009883a 	mov	r4,r6
    1d84:	3807883a 	mov	r3,r7
    1d88:	e0800217 	ldw	r2,8(fp)
    1d8c:	e17ffc05 	stb	r5,-16(fp)
    1d90:	e13ffd05 	stb	r4,-12(fp)
    1d94:	e0fffe05 	stb	r3,-8(fp)
    1d98:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1d9c:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1da0:	e0bffc03 	ldbu	r2,-16(fp)
    1da4:	e0fffb17 	ldw	r3,-20(fp)
    1da8:	10800784 	addi	r2,r2,30
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	10800017 	ldw	r2,0(r2)
    1dbc:	10800017 	ldw	r2,0(r2)
    1dc0:	10800104 	addi	r2,r2,4
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	e0bffc03 	ldbu	r2,-16(fp)
    1dcc:	e13ffb17 	ldw	r4,-20(fp)
    1dd0:	10800784 	addi	r2,r2,30
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1085883a 	add	r2,r2,r2
    1ddc:	2085883a 	add	r2,r4,r2
    1de0:	10800017 	ldw	r2,0(r2)
    1de4:	e13ffd03 	ldbu	r4,-12(fp)
    1de8:	e17ffe03 	ldbu	r5,-8(fp)
    1dec:	e1bfff03 	ldbu	r6,-4(fp)
    1df0:	300f883a 	mov	r7,r6
    1df4:	280d883a 	mov	r6,r5
    1df8:	200b883a 	mov	r5,r4
    1dfc:	1009883a 	mov	r4,r2
    1e00:	183ee83a 	callr	r3
    1e04:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e08:	e0bffa43 	ldbu	r2,-23(fp)
    1e0c:	10803818 	cmpnei	r2,r2,224
    1e10:	10001f1e 	bne	r2,zero,1e90 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e14:	e0bffd03 	ldbu	r2,-12(fp)
    1e18:	1000071e 	bne	r2,zero,1e38 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e1c:	01800044 	movi	r6,1
    1e20:	01403a04 	movi	r5,232
    1e24:	e13ffb17 	ldw	r4,-20(fp)
    1e28:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e2c:	01001984 	movi	r4,102
    1e30:	00006840 	call	684 <_Z5delaym>
    1e34:	00002606 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e38:	e0bffd03 	ldbu	r2,-12(fp)
    1e3c:	e0fffb17 	ldw	r3,-20(fp)
    1e40:	10800784 	addi	r2,r2,30
    1e44:	1085883a 	add	r2,r2,r2
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1885883a 	add	r2,r3,r2
    1e50:	10800017 	ldw	r2,0(r2)
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	10800504 	addi	r2,r2,20
    1e5c:	10c00017 	ldw	r3,0(r2)
    1e60:	e0bffd03 	ldbu	r2,-12(fp)
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	10800784 	addi	r2,r2,30
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	2085883a 	add	r2,r4,r2
    1e78:	10800017 	ldw	r2,0(r2)
    1e7c:	e13ffe03 	ldbu	r4,-8(fp)
    1e80:	200b883a 	mov	r5,r4
    1e84:	1009883a 	mov	r4,r2
    1e88:	183ee83a 	callr	r3
    1e8c:	00001006 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1e90:	e0bffa43 	ldbu	r2,-23(fp)
    1e94:	10800358 	cmpnei	r2,r2,13
    1e98:	1000091e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1e9c:	e0bffa03 	ldbu	r2,-24(fp)
    1ea0:	108000e8 	cmpgeui	r2,r2,3
    1ea4:	1000061e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ea8:	01001904 	movi	r4,100
    1eac:	00006840 	call	684 <_Z5delaym>
                retries++;
    1eb0:	e0bffa03 	ldbu	r2,-24(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1ebc:	003fb806 	br	1da0 <__alt_data_end+0xfc001da0>
        } else if(rcode)
    1ec0:	e0bffa43 	ldbu	r2,-23(fp)
    1ec4:	10000226 	beq	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1ec8:	e0bffa43 	ldbu	r2,-23(fp)
    1ecc:	00004606 	br	1fe8 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1ed0:	e0bffc03 	ldbu	r2,-16(fp)
    1ed4:	e0fffb17 	ldw	r3,-20(fp)
    1ed8:	10800784 	addi	r2,r2,30
    1edc:	1085883a 	add	r2,r2,r2
    1ee0:	1085883a 	add	r2,r2,r2
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	10800017 	ldw	r2,0(r2)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bffc03 	ldbu	r2,-16(fp)
    1ef8:	e13ffb17 	ldw	r4,-20(fp)
    1efc:	10800784 	addi	r2,r2,30
    1f00:	1085883a 	add	r2,r2,r2
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	2085883a 	add	r2,r4,r2
    1f0c:	10800017 	ldw	r2,0(r2)
    1f10:	e13ffd03 	ldbu	r4,-12(fp)
    1f14:	e17ffe03 	ldbu	r5,-8(fp)
    1f18:	e1bfff03 	ldbu	r6,-4(fp)
    1f1c:	300f883a 	mov	r7,r6
    1f20:	280d883a 	mov	r6,r5
    1f24:	200b883a 	mov	r5,r4
    1f28:	1009883a 	mov	r4,r2
    1f2c:	183ee83a 	callr	r3
    1f30:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f34:	e0bffa43 	ldbu	r2,-23(fp)
    1f38:	10800358 	cmpnei	r2,r2,13
    1f3c:	1000091e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f40:	e0bffa03 	ldbu	r2,-24(fp)
    1f44:	108000e8 	cmpgeui	r2,r2,3
    1f48:	1000061e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f4c:	01001904 	movi	r4,100
    1f50:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f54:	e0bffa03 	ldbu	r2,-24(fp)
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1f60:	003f8f06 	br	1da0 <__alt_data_end+0xfc001da0>
        }
        if(rcode) {
    1f64:	e0bffa43 	ldbu	r2,-23(fp)
    1f68:	10001e26 	beq	r2,zero,1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1f6c:	e0bffd03 	ldbu	r2,-12(fp)
    1f70:	1000071e 	bne	r2,zero,1f90 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1f74:	01800044 	movi	r6,1
    1f78:	01403a04 	movi	r5,232
    1f7c:	e13ffb17 	ldw	r4,-20(fp)
    1f80:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1f84:	01001984 	movi	r4,102
    1f88:	00006840 	call	684 <_Z5delaym>
    1f8c:	00001506 	br	1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1f90:	e0bffd03 	ldbu	r2,-12(fp)
    1f94:	e0fffb17 	ldw	r3,-20(fp)
    1f98:	10800784 	addi	r2,r2,30
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	10800017 	ldw	r2,0(r2)
    1fb0:	10800504 	addi	r2,r2,20
    1fb4:	10c00017 	ldw	r3,0(r2)
    1fb8:	e0bffd03 	ldbu	r2,-12(fp)
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	10800784 	addi	r2,r2,30
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1085883a 	add	r2,r2,r2
    1fcc:	2085883a 	add	r2,r4,r2
    1fd0:	10800017 	ldw	r2,0(r2)
    1fd4:	e13ffe03 	ldbu	r4,-8(fp)
    1fd8:	200b883a 	mov	r5,r4
    1fdc:	1009883a 	mov	r4,r2
    1fe0:	183ee83a 	callr	r3
                }
        }
        return rcode;
    1fe4:	e0bffa43 	ldbu	r2,-23(fp)
}
    1fe8:	e037883a 	mov	sp,fp
    1fec:	dfc00117 	ldw	ra,4(sp)
    1ff0:	df000017 	ldw	fp,0(sp)
    1ff4:	dec00204 	addi	sp,sp,8
    1ff8:	f800283a 	ret

00001ffc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    1ffc:	deffed04 	addi	sp,sp,-76
    2000:	dfc01215 	stw	ra,72(sp)
    2004:	df001115 	stw	fp,68(sp)
    2008:	df001104 	addi	fp,sp,68
    200c:	e13ffc15 	stw	r4,-16(fp)
    2010:	2809883a 	mov	r4,r5
    2014:	3007883a 	mov	r3,r6
    2018:	3805883a 	mov	r2,r7
    201c:	e13ffd05 	stb	r4,-12(fp)
    2020:	e0fffe05 	stb	r3,-8(fp)
    2024:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2028:	e03ff005 	stb	zero,-64(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    202c:	e0bff684 	addi	r2,fp,-38
    2030:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2034:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2038:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    203c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    2040:	00800204 	movi	r2,8
    2044:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    2048:	e0fffb83 	ldbu	r3,-18(fp)
    204c:	00bfff84 	movi	r2,-2
    2050:	1884703a 	and	r2,r3,r2
    2054:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    2058:	e0fffb83 	ldbu	r3,-18(fp)
    205c:	00bfff44 	movi	r2,-3
    2060:	1884703a 	and	r2,r3,r2
    2064:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    2068:	e0bffb83 	ldbu	r2,-18(fp)
    206c:	108000cc 	andi	r2,r2,3
    2070:	10800f14 	ori	r2,r2,60
    2074:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    2078:	e13ffc17 	ldw	r4,-16(fp)
    207c:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    2080:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    2084:	e0bff417 	ldw	r2,-48(fp)
    2088:	10800017 	ldw	r2,0(r2)
    208c:	10800017 	ldw	r2,0(r2)
    2090:	000b883a 	mov	r5,zero
    2094:	e13ff417 	ldw	r4,-48(fp)
    2098:	103ee83a 	callr	r2
    209c:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20a0:	e0bff217 	ldw	r2,-56(fp)
    20a4:	1000021e 	bne	r2,zero,20b0 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    20a8:	00bff584 	movi	r2,-42
    20ac:	00009106 	br	22f4 <_ZN3USB11ConfiguringEhhb+0x2f8>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    20b0:	e0bff217 	ldw	r2,-56(fp)
    20b4:	10c00003 	ldbu	r3,0(r2)
    20b8:	11000043 	ldbu	r4,1(r2)
    20bc:	2008923a 	slli	r4,r4,8
    20c0:	20c6b03a 	or	r3,r4,r3
    20c4:	11000083 	ldbu	r4,2(r2)
    20c8:	2008943a 	slli	r4,r4,16
    20cc:	20c6b03a 	or	r3,r4,r3
    20d0:	108000c3 	ldbu	r2,3(r2)
    20d4:	1004963a 	slli	r2,r2,24
    20d8:	10c4b03a 	or	r2,r2,r3
    20dc:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    20e0:	e0bff217 	ldw	r2,-56(fp)
    20e4:	e0fffb04 	addi	r3,fp,-20
    20e8:	19803fcc 	andi	r6,r3,255
    20ec:	11000003 	ldbu	r4,0(r2)
    20f0:	2008703a 	and	r4,r4,zero
    20f4:	200b883a 	mov	r5,r4
    20f8:	3009883a 	mov	r4,r6
    20fc:	2908b03a 	or	r4,r5,r4
    2100:	11000005 	stb	r4,0(r2)
    2104:	1808d23a 	srli	r4,r3,8
    2108:	21803fcc 	andi	r6,r4,255
    210c:	11000043 	ldbu	r4,1(r2)
    2110:	2008703a 	and	r4,r4,zero
    2114:	200b883a 	mov	r5,r4
    2118:	3009883a 	mov	r4,r6
    211c:	2908b03a 	or	r4,r5,r4
    2120:	11000045 	stb	r4,1(r2)
    2124:	1808d43a 	srli	r4,r3,16
    2128:	21803fcc 	andi	r6,r4,255
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008703a 	and	r4,r4,zero
    2134:	200b883a 	mov	r5,r4
    2138:	3009883a 	mov	r4,r6
    213c:	2908b03a 	or	r4,r5,r4
    2140:	11000085 	stb	r4,2(r2)
    2144:	180ad63a 	srli	r5,r3,24
    2148:	10c000c3 	ldbu	r3,3(r2)
    214c:	1806703a 	and	r3,r3,zero
    2150:	1809883a 	mov	r4,r3
    2154:	2807883a 	mov	r3,r5
    2158:	20c6b03a 	or	r3,r4,r3
    215c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    2160:	e0bff217 	ldw	r2,-56(fp)
    2164:	e0ffff03 	ldbu	r3,-4(fp)
    2168:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    216c:	00800484 	movi	r2,18
    2170:	10ffffcc 	andi	r3,r2,65535
    2174:	e0bff684 	addi	r2,fp,-38
    2178:	d8800015 	stw	r2,0(sp)
    217c:	180f883a 	mov	r7,r3
    2180:	000d883a 	mov	r6,zero
    2184:	000b883a 	mov	r5,zero
    2188:	e13ffc17 	ldw	r4,-16(fp)
    218c:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    2190:	e0bff005 	stb	r2,-64(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    2194:	e0bff217 	ldw	r2,-56(fp)
    2198:	e0fff317 	ldw	r3,-52(fp)
    219c:	19403fcc 	andi	r5,r3,255
    21a0:	10c00003 	ldbu	r3,0(r2)
    21a4:	1806703a 	and	r3,r3,zero
    21a8:	1809883a 	mov	r4,r3
    21ac:	2807883a 	mov	r3,r5
    21b0:	20c6b03a 	or	r3,r4,r3
    21b4:	10c00005 	stb	r3,0(r2)
    21b8:	e0fff317 	ldw	r3,-52(fp)
    21bc:	1806d23a 	srli	r3,r3,8
    21c0:	19403fcc 	andi	r5,r3,255
    21c4:	10c00043 	ldbu	r3,1(r2)
    21c8:	1806703a 	and	r3,r3,zero
    21cc:	1809883a 	mov	r4,r3
    21d0:	2807883a 	mov	r3,r5
    21d4:	20c6b03a 	or	r3,r4,r3
    21d8:	10c00045 	stb	r3,1(r2)
    21dc:	e0fff317 	ldw	r3,-52(fp)
    21e0:	1806d43a 	srli	r3,r3,16
    21e4:	19403fcc 	andi	r5,r3,255
    21e8:	10c00083 	ldbu	r3,2(r2)
    21ec:	1806703a 	and	r3,r3,zero
    21f0:	1809883a 	mov	r4,r3
    21f4:	2807883a 	mov	r3,r5
    21f8:	20c6b03a 	or	r3,r4,r3
    21fc:	10c00085 	stb	r3,2(r2)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	180ad63a 	srli	r5,r3,24
    2208:	10c000c3 	ldbu	r3,3(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2220:	e0bff003 	ldbu	r2,-64(fp)
    2224:	10000226 	beq	r2,zero,2230 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
    2228:	e0bff003 	ldbu	r2,-64(fp)
    222c:	00003106 	br	22f4 <_ZN3USB11ConfiguringEhhb+0x2f8>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    2230:	e0bff117 	ldw	r2,-60(fp)
    2234:	10c00203 	ldbu	r3,8(r2)
    2238:	10800243 	ldbu	r2,9(r2)
    223c:	1004923a 	slli	r2,r2,8
    2240:	10c4b03a 	or	r2,r2,r3
    2244:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    2248:	e0bff117 	ldw	r2,-60(fp)
    224c:	10c00283 	ldbu	r3,10(r2)
    2250:	108002c3 	ldbu	r2,11(r2)
    2254:	1004923a 	slli	r2,r2,8
    2258:	10c4b03a 	or	r2,r2,r3
    225c:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    2260:	e0bff117 	ldw	r2,-60(fp)
    2264:	10800103 	ldbu	r2,4(r2)
    2268:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    226c:	e0bff117 	ldw	r2,-60(fp)
    2270:	10800143 	ldbu	r2,5(r2)
    2274:	e0bff645 	stb	r2,-39(fp)

        devConfig[0]->GetAddress();
    2278:	e0bffc17 	ldw	r2,-16(fp)
    227c:	10801e17 	ldw	r2,120(r2)
    2280:	10800017 	ldw	r2,0(r2)
    2284:	10800404 	addi	r2,r2,16
    2288:	10800017 	ldw	r2,0(r2)
    228c:	e0fffc17 	ldw	r3,-16(fp)
    2290:	18c01e17 	ldw	r3,120(r3)
    2294:	1809883a 	mov	r4,r3
    2298:	103ee83a 	callr	r2
        devConfig[0]->DEVSUBCLASSOK(subklass);
    229c:	e0bffc17 	ldw	r2,-16(fp)
    22a0:	10801e17 	ldw	r2,120(r2)
    22a4:	10800017 	ldw	r2,0(r2)
    22a8:	10800804 	addi	r2,r2,32
    22ac:	10800017 	ldw	r2,0(r2)
    22b0:	e0fffc17 	ldw	r3,-16(fp)
    22b4:	18c01e17 	ldw	r3,120(r3)
    22b8:	e13ff643 	ldbu	r4,-39(fp)
    22bc:	200b883a 	mov	r5,r4
    22c0:	1809883a 	mov	r4,r3
    22c4:	103ee83a 	callr	r2
        rcode = AttemptConfig(0, parent, port, lowspeed);
    22c8:	e0fffd03 	ldbu	r3,-12(fp)
    22cc:	e13ffe03 	ldbu	r4,-8(fp)
    22d0:	e0bfff03 	ldbu	r2,-4(fp)
    22d4:	d8800015 	stw	r2,0(sp)
    22d8:	200f883a 	mov	r7,r4
    22dc:	180d883a 	mov	r6,r3
    22e0:	000b883a 	mov	r5,zero
    22e4:	e13ffc17 	ldw	r4,-16(fp)
    22e8:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    22ec:	e0bff005 	stb	r2,-64(fp)
        return rcode;
    22f0:	e0bff003 	ldbu	r2,-64(fp)
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);

        return rcode;
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	dfc00117 	ldw	ra,4(sp)
    22fc:	df000017 	ldw	fp,0(sp)
    2300:	dec00204 	addi	sp,sp,8
    2304:	f800283a 	ret

00002308 <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    2308:	defffb04 	addi	sp,sp,-20
    230c:	dfc00415 	stw	ra,16(sp)
    2310:	df000315 	stw	fp,12(sp)
    2314:	df000304 	addi	fp,sp,12
    2318:	e13ffe15 	stw	r4,-8(fp)
    231c:	2805883a 	mov	r2,r5
    2320:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2324:	e0bfff03 	ldbu	r2,-4(fp)
    2328:	1000021e 	bne	r2,zero,2334 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    232c:	0005883a 	mov	r2,zero
    2330:	00003e06 	br	242c <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2334:	e03ffd05 	stb	zero,-12(fp)
    2338:	e0bffd03 	ldbu	r2,-12(fp)
    233c:	10800428 	cmpgeui	r2,r2,16
    2340:	1000391e 	bne	r2,zero,2428 <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2344:	e0bffd03 	ldbu	r2,-12(fp)
    2348:	e0fffe17 	ldw	r3,-8(fp)
    234c:	10800784 	addi	r2,r2,30
    2350:	1085883a 	add	r2,r2,r2
    2354:	1085883a 	add	r2,r2,r2
    2358:	1885883a 	add	r2,r3,r2
    235c:	10800017 	ldw	r2,0(r2)
    2360:	10002c26 	beq	r2,zero,2414 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2364:	e0bffd03 	ldbu	r2,-12(fp)
    2368:	e0fffe17 	ldw	r3,-8(fp)
    236c:	10800784 	addi	r2,r2,30
    2370:	1085883a 	add	r2,r2,r2
    2374:	1085883a 	add	r2,r2,r2
    2378:	1885883a 	add	r2,r3,r2
    237c:	10800017 	ldw	r2,0(r2)
    2380:	10800017 	ldw	r2,0(r2)
    2384:	10800404 	addi	r2,r2,16
    2388:	10c00017 	ldw	r3,0(r2)
    238c:	e0bffd03 	ldbu	r2,-12(fp)
    2390:	e13ffe17 	ldw	r4,-8(fp)
    2394:	10800784 	addi	r2,r2,30
    2398:	1085883a 	add	r2,r2,r2
    239c:	1085883a 	add	r2,r2,r2
    23a0:	2085883a 	add	r2,r4,r2
    23a4:	10800017 	ldw	r2,0(r2)
    23a8:	1009883a 	mov	r4,r2
    23ac:	183ee83a 	callr	r3
    23b0:	10c03fcc 	andi	r3,r2,255
    23b4:	e0bfff03 	ldbu	r2,-4(fp)
    23b8:	1885003a 	cmpeq	r2,r3,r2
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	10001526 	beq	r2,zero,2418 <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    23c4:	e0bffd03 	ldbu	r2,-12(fp)
    23c8:	e0fffe17 	ldw	r3,-8(fp)
    23cc:	10800784 	addi	r2,r2,30
    23d0:	1085883a 	add	r2,r2,r2
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1885883a 	add	r2,r3,r2
    23dc:	10800017 	ldw	r2,0(r2)
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10800204 	addi	r2,r2,8
    23e8:	10c00017 	ldw	r3,0(r2)
    23ec:	e0bffd03 	ldbu	r2,-12(fp)
    23f0:	e13ffe17 	ldw	r4,-8(fp)
    23f4:	10800784 	addi	r2,r2,30
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	1085883a 	add	r2,r2,r2
    2400:	2085883a 	add	r2,r4,r2
    2404:	10800017 	ldw	r2,0(r2)
    2408:	1009883a 	mov	r4,r2
    240c:	183ee83a 	callr	r3
    2410:	00000606 	br	242c <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    2414:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2418:	e0bffd03 	ldbu	r2,-12(fp)
    241c:	10800044 	addi	r2,r2,1
    2420:	e0bffd05 	stb	r2,-12(fp)
    2424:	003fc406 	br	2338 <__alt_data_end+0xfc002338>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    2428:	0005883a 	mov	r2,zero
        printf("END\n");
}
    242c:	e037883a 	mov	sp,fp
    2430:	dfc00117 	ldw	ra,4(sp)
    2434:	df000017 	ldw	fp,0(sp)
    2438:	dec00204 	addi	sp,sp,8
    243c:	f800283a 	ret

00002440 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2440:	defff204 	addi	sp,sp,-56
    2444:	dfc00d15 	stw	ra,52(sp)
    2448:	df000c15 	stw	fp,48(sp)
    244c:	df000c04 	addi	fp,sp,48
    2450:	e13ffc15 	stw	r4,-16(fp)
    2454:	2809883a 	mov	r4,r5
    2458:	3007883a 	mov	r3,r6
    245c:	3805883a 	mov	r2,r7
    2460:	e13ffd05 	stb	r4,-12(fp)
    2464:	e0fffe05 	stb	r3,-8(fp)
    2468:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    246c:	e17ffd03 	ldbu	r5,-12(fp)
    2470:	e1bffe03 	ldbu	r6,-8(fp)
    2474:	e0bfff0b 	ldhu	r2,-4(fp)
    2478:	e0ffff0b 	ldhu	r3,-4(fp)
    247c:	d8000715 	stw	zero,28(sp)
    2480:	e1000217 	ldw	r4,8(fp)
    2484:	d9000615 	stw	r4,24(sp)
    2488:	d8c00515 	stw	r3,20(sp)
    248c:	d8800415 	stw	r2,16(sp)
    2490:	d8000315 	stw	zero,12(sp)
    2494:	00800044 	movi	r2,1
    2498:	d8800215 	stw	r2,8(sp)
    249c:	d8000115 	stw	zero,4(sp)
    24a0:	00800184 	movi	r2,6
    24a4:	d8800015 	stw	r2,0(sp)
    24a8:	01c02004 	movi	r7,128
    24ac:	e13ffc17 	ldw	r4,-16(fp)
    24b0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    24b4:	e037883a 	mov	sp,fp
    24b8:	dfc00117 	ldw	ra,4(sp)
    24bc:	df000017 	ldw	fp,0(sp)
    24c0:	dec00204 	addi	sp,sp,8
    24c4:	f800283a 	ret

000024c8 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    24c8:	defff104 	addi	sp,sp,-60
    24cc:	dfc00e15 	stw	ra,56(sp)
    24d0:	df000d15 	stw	fp,52(sp)
    24d4:	df000d04 	addi	fp,sp,52
    24d8:	e13ffb15 	stw	r4,-20(fp)
    24dc:	3009883a 	mov	r4,r6
    24e0:	3807883a 	mov	r3,r7
    24e4:	e0800217 	ldw	r2,8(fp)
    24e8:	e17ffc05 	stb	r5,-16(fp)
    24ec:	e13ffd05 	stb	r4,-12(fp)
    24f0:	e0fffe0d 	sth	r3,-8(fp)
    24f4:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    24f8:	e23ffc03 	ldbu	r8,-16(fp)
    24fc:	e1bffd03 	ldbu	r6,-12(fp)
    2500:	e0bfff03 	ldbu	r2,-4(fp)
    2504:	e0fffe0b 	ldhu	r3,-8(fp)
    2508:	e13ffe0b 	ldhu	r4,-8(fp)
    250c:	d8000715 	stw	zero,28(sp)
    2510:	e1400317 	ldw	r5,12(fp)
    2514:	d9400615 	stw	r5,24(sp)
    2518:	d9000515 	stw	r4,20(sp)
    251c:	d8c00415 	stw	r3,16(sp)
    2520:	d8000315 	stw	zero,12(sp)
    2524:	00c00084 	movi	r3,2
    2528:	d8c00215 	stw	r3,8(sp)
    252c:	d8800115 	stw	r2,4(sp)
    2530:	00800184 	movi	r2,6
    2534:	d8800015 	stw	r2,0(sp)
    2538:	01c02004 	movi	r7,128
    253c:	400b883a 	mov	r5,r8
    2540:	e13ffb17 	ldw	r4,-20(fp)
    2544:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2548:	e037883a 	mov	sp,fp
    254c:	dfc00117 	ldw	ra,4(sp)
    2550:	df000017 	ldw	fp,0(sp)
    2554:	dec00204 	addi	sp,sp,8
    2558:	f800283a 	ret

0000255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    255c:	deffdf04 	addi	sp,sp,-132
    2560:	dfc02015 	stw	ra,128(sp)
    2564:	df001f15 	stw	fp,124(sp)
    2568:	df001f04 	addi	fp,sp,124
    256c:	e13ffc15 	stw	r4,-16(fp)
    2570:	2809883a 	mov	r4,r5
    2574:	3007883a 	mov	r3,r6
    2578:	3805883a 	mov	r2,r7
    257c:	e13ffd05 	stb	r4,-12(fp)
    2580:	e0fffe05 	stb	r3,-8(fp)
    2584:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    2588:	00801004 	movi	r2,64
    258c:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    2590:	e0bfec04 	addi	r2,fp,-80
    2594:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    2598:	e13ffd03 	ldbu	r4,-12(fp)
    259c:	e17ffe03 	ldbu	r5,-8(fp)
    25a0:	e0bfff03 	ldbu	r2,-4(fp)
    25a4:	e0ffec04 	addi	r3,fp,-80
    25a8:	d8c00115 	stw	r3,4(sp)
    25ac:	d8800015 	stw	r2,0(sp)
    25b0:	01c00244 	movi	r7,9
    25b4:	280d883a 	mov	r6,r5
    25b8:	200b883a 	mov	r5,r4
    25bc:	e13ffc17 	ldw	r4,-16(fp)
    25c0:	00024c80 	call	24c8 <_ZN3USB12getConfDescrEhhthPh>
    25c4:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    25c8:	e0bfeb03 	ldbu	r2,-84(fp)
    25cc:	10000226 	beq	r2,zero,25d8 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    25d0:	e0bfeb03 	ldbu	r2,-84(fp)
    25d4:	00001a06 	br	2640 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    25d8:	e0bfea17 	ldw	r2,-88(fp)
    25dc:	10c00083 	ldbu	r3,2(r2)
    25e0:	108000c3 	ldbu	r2,3(r2)
    25e4:	1004923a 	slli	r2,r2,8
    25e8:	10c4b03a 	or	r2,r2,r3
    25ec:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    25f0:	e17ffd03 	ldbu	r5,-12(fp)
    25f4:	e1bffe03 	ldbu	r6,-8(fp)
    25f8:	e0bfff03 	ldbu	r2,-4(fp)
    25fc:	e0ffeb8b 	ldhu	r3,-82(fp)
    2600:	e1000217 	ldw	r4,8(fp)
    2604:	d9000715 	stw	r4,28(sp)
    2608:	e13fec04 	addi	r4,fp,-80
    260c:	d9000615 	stw	r4,24(sp)
    2610:	01001004 	movi	r4,64
    2614:	d9000515 	stw	r4,20(sp)
    2618:	d8c00415 	stw	r3,16(sp)
    261c:	d8000315 	stw	zero,12(sp)
    2620:	00c00084 	movi	r3,2
    2624:	d8c00215 	stw	r3,8(sp)
    2628:	d8800115 	stw	r2,4(sp)
    262c:	00800184 	movi	r2,6
    2630:	d8800015 	stw	r2,0(sp)
    2634:	01c02004 	movi	r7,128
    2638:	e13ffc17 	ldw	r4,-16(fp)
    263c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2640:	e037883a 	mov	sp,fp
    2644:	dfc00117 	ldw	ra,4(sp)
    2648:	df000017 	ldw	fp,0(sp)
    264c:	dec00204 	addi	sp,sp,8
    2650:	f800283a 	ret

00002654 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2654:	defff004 	addi	sp,sp,-64
    2658:	dfc00f15 	stw	ra,60(sp)
    265c:	df000e15 	stw	fp,56(sp)
    2660:	df000e04 	addi	fp,sp,56
    2664:	e13ffa15 	stw	r4,-24(fp)
    2668:	2811883a 	mov	r8,r5
    266c:	300b883a 	mov	r5,r6
    2670:	3809883a 	mov	r4,r7
    2674:	e0c00217 	ldw	r3,8(fp)
    2678:	e0800317 	ldw	r2,12(fp)
    267c:	e23ffb05 	stb	r8,-20(fp)
    2680:	e17ffc05 	stb	r5,-16(fp)
    2684:	e13ffd0d 	sth	r4,-12(fp)
    2688:	e0fffe05 	stb	r3,-8(fp)
    268c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2690:	e23ffb03 	ldbu	r8,-20(fp)
    2694:	e27ffc03 	ldbu	r9,-16(fp)
    2698:	e0bffe03 	ldbu	r2,-8(fp)
    269c:	e0ffff0b 	ldhu	r3,-4(fp)
    26a0:	e13ffd0b 	ldhu	r4,-12(fp)
    26a4:	e17ffd0b 	ldhu	r5,-12(fp)
    26a8:	d8000715 	stw	zero,28(sp)
    26ac:	e1800417 	ldw	r6,16(fp)
    26b0:	d9800615 	stw	r6,24(sp)
    26b4:	d9400515 	stw	r5,20(sp)
    26b8:	d9000415 	stw	r4,16(sp)
    26bc:	d8c00315 	stw	r3,12(sp)
    26c0:	00c000c4 	movi	r3,3
    26c4:	d8c00215 	stw	r3,8(sp)
    26c8:	d8800115 	stw	r2,4(sp)
    26cc:	00800184 	movi	r2,6
    26d0:	d8800015 	stw	r2,0(sp)
    26d4:	01c02004 	movi	r7,128
    26d8:	480d883a 	mov	r6,r9
    26dc:	400b883a 	mov	r5,r8
    26e0:	e13ffa17 	ldw	r4,-24(fp)
    26e4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    26e8:	e037883a 	mov	sp,fp
    26ec:	dfc00117 	ldw	ra,4(sp)
    26f0:	df000017 	ldw	fp,0(sp)
    26f4:	dec00204 	addi	sp,sp,8
    26f8:	f800283a 	ret

000026fc <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    26fc:	defff104 	addi	sp,sp,-60
    2700:	dfc00e15 	stw	ra,56(sp)
    2704:	df000d15 	stw	fp,52(sp)
    2708:	df000d04 	addi	fp,sp,52
    270c:	e13ffc15 	stw	r4,-16(fp)
    2710:	2809883a 	mov	r4,r5
    2714:	3007883a 	mov	r3,r6
    2718:	3805883a 	mov	r2,r7
    271c:	e13ffd05 	stb	r4,-12(fp)
    2720:	e0fffe05 	stb	r3,-8(fp)
    2724:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2728:	e0fffd03 	ldbu	r3,-12(fp)
    272c:	e13ffe03 	ldbu	r4,-8(fp)
    2730:	e0bfff03 	ldbu	r2,-4(fp)
    2734:	d8000715 	stw	zero,28(sp)
    2738:	d8000615 	stw	zero,24(sp)
    273c:	d8000515 	stw	zero,20(sp)
    2740:	d8000415 	stw	zero,16(sp)
    2744:	d8000315 	stw	zero,12(sp)
    2748:	d8000215 	stw	zero,8(sp)
    274c:	d8800115 	stw	r2,4(sp)
    2750:	00800144 	movi	r2,5
    2754:	d8800015 	stw	r2,0(sp)
    2758:	000f883a 	mov	r7,zero
    275c:	200d883a 	mov	r6,r4
    2760:	180b883a 	mov	r5,r3
    2764:	e13ffc17 	ldw	r4,-16(fp)
    2768:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    276c:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2770:	01004b04 	movi	r4,300
    2774:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2778:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    277c:	e037883a 	mov	sp,fp
    2780:	dfc00117 	ldw	ra,4(sp)
    2784:	df000017 	ldw	fp,0(sp)
    2788:	dec00204 	addi	sp,sp,8
    278c:	f800283a 	ret

00002790 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2790:	defff204 	addi	sp,sp,-56
    2794:	dfc00d15 	stw	ra,52(sp)
    2798:	df000c15 	stw	fp,48(sp)
    279c:	df000c04 	addi	fp,sp,48
    27a0:	e13ffc15 	stw	r4,-16(fp)
    27a4:	2809883a 	mov	r4,r5
    27a8:	3007883a 	mov	r3,r6
    27ac:	3805883a 	mov	r2,r7
    27b0:	e13ffd05 	stb	r4,-12(fp)
    27b4:	e0fffe05 	stb	r3,-8(fp)
    27b8:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    27bc:	e0fffd03 	ldbu	r3,-12(fp)
    27c0:	e13ffe03 	ldbu	r4,-8(fp)
    27c4:	e0bfff03 	ldbu	r2,-4(fp)
    27c8:	d8000715 	stw	zero,28(sp)
    27cc:	d8000615 	stw	zero,24(sp)
    27d0:	d8000515 	stw	zero,20(sp)
    27d4:	d8000415 	stw	zero,16(sp)
    27d8:	d8000315 	stw	zero,12(sp)
    27dc:	d8000215 	stw	zero,8(sp)
    27e0:	d8800115 	stw	r2,4(sp)
    27e4:	00800244 	movi	r2,9
    27e8:	d8800015 	stw	r2,0(sp)
    27ec:	000f883a 	mov	r7,zero
    27f0:	200d883a 	mov	r6,r4
    27f4:	180b883a 	mov	r5,r3
    27f8:	e13ffc17 	ldw	r4,-16(fp)
    27fc:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2800:	e037883a 	mov	sp,fp
    2804:	dfc00117 	ldw	ra,4(sp)
    2808:	df000017 	ldw	fp,0(sp)
    280c:	dec00204 	addi	sp,sp,8
    2810:	f800283a 	ret

00002814 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2814:	defffe04 	addi	sp,sp,-8
    2818:	df000115 	stw	fp,4(sp)
    281c:	df000104 	addi	fp,sp,4
    2820:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2824:	e0bfff17 	ldw	r2,-4(fp)
        };
    2828:	e037883a 	mov	sp,fp
    282c:	df000017 	ldw	fp,0(sp)
    2830:	dec00104 	addi	sp,sp,4
    2834:	f800283a 	ret

00002838 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2838:	defffe04 	addi	sp,sp,-8
    283c:	df000115 	stw	fp,4(sp)
    2840:	df000104 	addi	fp,sp,4
    2844:	e13fff15 	stw	r4,-4(fp)
    2848:	008000b4 	movhi	r2,2
    284c:	108d7f04 	addi	r2,r2,13820
    2850:	e0ffff17 	ldw	r3,-4(fp)
    2854:	18800015 	stw	r2,0(r3)
    2858:	0001883a 	nop
    285c:	e037883a 	mov	sp,fp
    2860:	df000017 	ldw	fp,0(sp)
    2864:	dec00104 	addi	sp,sp,4
    2868:	f800283a 	ret

0000286c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    286c:	defffd04 	addi	sp,sp,-12
    2870:	dfc00215 	stw	ra,8(sp)
    2874:	df000115 	stw	fp,4(sp)
    2878:	df000104 	addi	fp,sp,4
    287c:	e13fff15 	stw	r4,-4(fp)
    2880:	e0bfff17 	ldw	r2,-4(fp)
    2884:	1009883a 	mov	r4,r2
    2888:	00028380 	call	2838 <_ZN11AddressPoolC1Ev>
    288c:	008000b4 	movhi	r2,2
    2890:	108d7a04 	addi	r2,r2,13800
    2894:	e0ffff17 	ldw	r3,-4(fp)
    2898:	18800015 	stw	r2,0(r3)
    289c:	e0bfff17 	ldw	r2,-4(fp)
    28a0:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    28a4:	000b883a 	mov	r5,zero
    28a8:	e13fff17 	ldw	r4,-4(fp)
    28ac:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    28b0:	e0bfff17 	ldw	r2,-4(fp)
    28b4:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    28b8:	e0bfff17 	ldw	r2,-4(fp)
    28bc:	10c00104 	addi	r3,r2,4
    28c0:	e0bfff17 	ldw	r2,-4(fp)
    28c4:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    28c8:	e0bfff17 	ldw	r2,-4(fp)
    28cc:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    28d0:	e0bfff17 	ldw	r2,-4(fp)
    28d4:	00c00204 	movi	r3,8
    28d8:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    28dc:	e0bfff17 	ldw	r2,-4(fp)
    28e0:	11000183 	ldbu	r4,6(r2)
    28e4:	00ffff84 	movi	r3,-2
    28e8:	20c6703a 	and	r3,r4,r3
    28ec:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    28f0:	e0bfff17 	ldw	r2,-4(fp)
    28f4:	11000183 	ldbu	r4,6(r2)
    28f8:	00ffff44 	movi	r3,-3
    28fc:	20c6703a 	and	r3,r4,r3
    2900:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2904:	e0bfff17 	ldw	r2,-4(fp)
    2908:	10c00183 	ldbu	r3,6(r2)
    290c:	18c000cc 	andi	r3,r3,3
    2910:	18c00f14 	ori	r3,r3,60
    2914:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2918:	e13fff17 	ldw	r4,-4(fp)
    291c:	0002e000 	call	2e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2920:	0001883a 	nop
    2924:	e037883a 	mov	sp,fp
    2928:	dfc00117 	ldw	ra,4(sp)
    292c:	df000017 	ldw	fp,0(sp)
    2930:	dec00204 	addi	sp,sp,8
    2934:	f800283a 	ret

00002938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2938:	defffa04 	addi	sp,sp,-24
    293c:	dfc00515 	stw	ra,20(sp)
    2940:	df000415 	stw	fp,16(sp)
    2944:	dc000315 	stw	r16,12(sp)
    2948:	df000404 	addi	fp,sp,16
    294c:	e13ffd15 	stw	r4,-12(fp)
    2950:	2805883a 	mov	r2,r5
    2954:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2958:	e0bffe03 	ldbu	r2,-8(fp)
    295c:	1000031e 	bne	r2,zero,296c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2960:	e0bffd17 	ldw	r2,-12(fp)
    2964:	10800204 	addi	r2,r2,8
    2968:	00001006 	br	29ac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    296c:	e0bffe03 	ldbu	r2,-8(fp)
    2970:	100b883a 	mov	r5,r2
    2974:	e13ffd17 	ldw	r4,-12(fp)
    2978:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    297c:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2980:	e0bffc03 	ldbu	r2,-16(fp)
    2984:	10000826 	beq	r2,zero,29a8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2988:	e0bffd17 	ldw	r2,-12(fp)
    298c:	14000204 	addi	r16,r2,8
    2990:	e0bffc03 	ldbu	r2,-16(fp)
    2994:	014001c4 	movi	r5,7
    2998:	1009883a 	mov	r4,r2
    299c:	000ce000 	call	ce00 <__mulsi3>
    29a0:	8085883a 	add	r2,r16,r2
    29a4:	00000106 	br	29ac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    29a8:	0005883a 	mov	r2,zero
        };
    29ac:	e6ffff04 	addi	sp,fp,-4
    29b0:	dfc00217 	ldw	ra,8(sp)
    29b4:	df000117 	ldw	fp,4(sp)
    29b8:	dc000017 	ldw	r16,0(sp)
    29bc:	dec00304 	addi	sp,sp,12
    29c0:	f800283a 	ret

000029c4 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    29c4:	defffd04 	addi	sp,sp,-12
    29c8:	df000215 	stw	fp,8(sp)
    29cc:	df000204 	addi	fp,sp,8
    29d0:	2005883a 	mov	r2,r4
    29d4:	e17fff15 	stw	r5,-4(fp)
    29d8:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    29dc:	0001883a 	nop
    29e0:	e037883a 	mov	sp,fp
    29e4:	df000017 	ldw	fp,0(sp)
    29e8:	dec00104 	addi	sp,sp,4
    29ec:	f800283a 	ret

000029f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    29f0:	defff804 	addi	sp,sp,-32
    29f4:	dfc00715 	stw	ra,28(sp)
    29f8:	df000615 	stw	fp,24(sp)
    29fc:	dc000515 	stw	r16,20(sp)
    2a00:	df000604 	addi	fp,sp,24
    2a04:	e13ffb15 	stw	r4,-20(fp)
    2a08:	2809883a 	mov	r4,r5
    2a0c:	3007883a 	mov	r3,r6
    2a10:	3805883a 	mov	r2,r7
    2a14:	e13ffc05 	stb	r4,-16(fp)
    2a18:	e0fffd05 	stb	r3,-12(fp)
    2a1c:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2a20:	e0bffc03 	ldbu	r2,-16(fp)
    2a24:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2a28:	e0fffa43 	ldbu	r3,-23(fp)
    2a2c:	00bfe004 	movi	r2,-128
    2a30:	1884703a 	and	r2,r3,r2
    2a34:	10803fcc 	andi	r2,r2,255
    2a38:	1000031e 	bne	r2,zero,2a48 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2a3c:	e0bffe03 	ldbu	r2,-8(fp)
    2a40:	10800230 	cmpltui	r2,r2,8
    2a44:	1000021e 	bne	r2,zero,2a50 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2a48:	0005883a 	mov	r2,zero
    2a4c:	00007a06 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2a50:	e0bffd03 	ldbu	r2,-12(fp)
    2a54:	10000726 	beq	r2,zero,2a74 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2a58:	e0bffb17 	ldw	r2,-20(fp)
    2a5c:	108001c3 	ldbu	r2,7(r2)
    2a60:	10803fcc 	andi	r2,r2,255
    2a64:	108001d8 	cmpnei	r2,r2,7
    2a68:	1000021e 	bne	r2,zero,2a74 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2a6c:	0005883a 	mov	r2,zero
    2a70:	00007106 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2a74:	000b883a 	mov	r5,zero
    2a78:	e13ffb17 	ldw	r4,-20(fp)
    2a7c:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2a80:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2a84:	e0bffa03 	ldbu	r2,-24(fp)
    2a88:	1000021e 	bne	r2,zero,2a94 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2a8c:	0005883a 	mov	r2,zero
    2a90:	00006906 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2a94:	e0bffa43 	ldbu	r2,-23(fp)
    2a98:	10803fcc 	andi	r2,r2,255
    2a9c:	1000241e 	bne	r2,zero,2b30 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2aa0:	e0bffd03 	ldbu	r2,-12(fp)
    2aa4:	10001026 	beq	r2,zero,2ae8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2aa8:	e0bffa03 	ldbu	r2,-24(fp)
    2aac:	e43ffb17 	ldw	r16,-20(fp)
    2ab0:	014001c4 	movi	r5,7
    2ab4:	1009883a 	mov	r4,r2
    2ab8:	000ce000 	call	ce00 <__mulsi3>
    2abc:	8085883a 	add	r2,r16,r2
    2ac0:	10800304 	addi	r2,r2,12
    2ac4:	00c01044 	movi	r3,65
    2ac8:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2acc:	e0bffb17 	ldw	r2,-20(fp)
    2ad0:	108001c3 	ldbu	r2,7(r2)
    2ad4:	10800044 	addi	r2,r2,1
    2ad8:	1007883a 	mov	r3,r2
    2adc:	e0bffb17 	ldw	r2,-20(fp)
    2ae0:	10c001c5 	stb	r3,7(r2)
    2ae4:	00000906 	br	2b0c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2ae8:	e0bffa03 	ldbu	r2,-24(fp)
    2aec:	e43ffb17 	ldw	r16,-20(fp)
    2af0:	014001c4 	movi	r5,7
    2af4:	1009883a 	mov	r4,r2
    2af8:	000ce000 	call	ce00 <__mulsi3>
    2afc:	8085883a 	add	r2,r16,r2
    2b00:	10800304 	addi	r2,r2,12
    2b04:	00c00044 	movi	r3,1
    2b08:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2b0c:	e0bffa03 	ldbu	r2,-24(fp)
    2b10:	e43ffb17 	ldw	r16,-20(fp)
    2b14:	014001c4 	movi	r5,7
    2b18:	1009883a 	mov	r4,r2
    2b1c:	000ce000 	call	ce00 <__mulsi3>
    2b20:	8085883a 	add	r2,r16,r2
    2b24:	10800304 	addi	r2,r2,12
    2b28:	10800003 	ldbu	r2,0(r2)
    2b2c:	00004206 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2b30:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2b34:	e0bffa43 	ldbu	r2,-23(fp)
    2b38:	108001cc 	andi	r2,r2,7
    2b3c:	108001cc 	andi	r2,r2,7
    2b40:	100890fa 	slli	r4,r2,3
    2b44:	e0fffa83 	ldbu	r3,-22(fp)
    2b48:	00bff1c4 	movi	r2,-57
    2b4c:	1884703a 	and	r2,r3,r2
    2b50:	1007883a 	mov	r3,r2
    2b54:	2005883a 	mov	r2,r4
    2b58:	1884b03a 	or	r2,r3,r2
    2b5c:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2b60:	e0bffd03 	ldbu	r2,-12(fp)
    2b64:	10001526 	beq	r2,zero,2bbc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2b68:	e0bffa83 	ldbu	r2,-22(fp)
    2b6c:	10801014 	ori	r2,r2,64
    2b70:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2b74:	e0bffb17 	ldw	r2,-20(fp)
    2b78:	108001c3 	ldbu	r2,7(r2)
    2b7c:	10800044 	addi	r2,r2,1
    2b80:	1007883a 	mov	r3,r2
    2b84:	e0bffb17 	ldw	r2,-20(fp)
    2b88:	10c001c5 	stb	r3,7(r2)
    2b8c:	e0bffb17 	ldw	r2,-20(fp)
    2b90:	108001c3 	ldbu	r2,7(r2)
    2b94:	108001cc 	andi	r2,r2,7
    2b98:	110001cc 	andi	r4,r2,7
    2b9c:	e0fffa83 	ldbu	r3,-22(fp)
    2ba0:	00bffe04 	movi	r2,-8
    2ba4:	1884703a 	and	r2,r3,r2
    2ba8:	1007883a 	mov	r3,r2
    2bac:	2005883a 	mov	r2,r4
    2bb0:	1884b03a 	or	r2,r3,r2
    2bb4:	e0bffa85 	stb	r2,-22(fp)
    2bb8:	00000e06 	br	2bf4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    2bbc:	e0fffa83 	ldbu	r3,-22(fp)
    2bc0:	00bfefc4 	movi	r2,-65
    2bc4:	1884703a 	and	r2,r3,r2
    2bc8:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    2bcc:	e0bffe03 	ldbu	r2,-8(fp)
    2bd0:	108001cc 	andi	r2,r2,7
    2bd4:	110001cc 	andi	r4,r2,7
    2bd8:	e0fffa83 	ldbu	r3,-22(fp)
    2bdc:	00bffe04 	movi	r2,-8
    2be0:	1884703a 	and	r2,r3,r2
    2be4:	1007883a 	mov	r3,r2
    2be8:	2005883a 	mov	r2,r4
    2bec:	1884b03a 	or	r2,r3,r2
    2bf0:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    2bf4:	e0bffa03 	ldbu	r2,-24(fp)
    2bf8:	e43ffb17 	ldw	r16,-20(fp)
    2bfc:	014001c4 	movi	r5,7
    2c00:	1009883a 	mov	r4,r2
    2c04:	000ce000 	call	ce00 <__mulsi3>
    2c08:	8085883a 	add	r2,r16,r2
    2c0c:	10800304 	addi	r2,r2,12
    2c10:	e0fffa83 	ldbu	r3,-22(fp)
    2c14:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    2c18:	e0bffa03 	ldbu	r2,-24(fp)
    2c1c:	e43ffb17 	ldw	r16,-20(fp)
    2c20:	014001c4 	movi	r5,7
    2c24:	1009883a 	mov	r4,r2
    2c28:	000ce000 	call	ce00 <__mulsi3>
    2c2c:	8085883a 	add	r2,r16,r2
    2c30:	10800304 	addi	r2,r2,12
    2c34:	10800003 	ldbu	r2,0(r2)
        };
    2c38:	e6ffff04 	addi	sp,fp,-4
    2c3c:	dfc00217 	ldw	ra,8(sp)
    2c40:	df000117 	ldw	fp,4(sp)
    2c44:	dc000017 	ldw	r16,0(sp)
    2c48:	dec00304 	addi	sp,sp,12
    2c4c:	f800283a 	ret

00002c50 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    2c50:	defffb04 	addi	sp,sp,-20
    2c54:	dfc00415 	stw	ra,16(sp)
    2c58:	df000315 	stw	fp,12(sp)
    2c5c:	df000304 	addi	fp,sp,12
    2c60:	e13ffe15 	stw	r4,-8(fp)
    2c64:	2805883a 	mov	r2,r5
    2c68:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    2c6c:	e0bfff03 	ldbu	r2,-4(fp)
    2c70:	10801058 	cmpnei	r2,r2,65
    2c74:	1000031e 	bne	r2,zero,2c84 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    2c78:	e13ffe17 	ldw	r4,-8(fp)
    2c7c:	0002e000 	call	2e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    2c80:	00000906 	br	2ca8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    2c84:	e0bfff03 	ldbu	r2,-4(fp)
    2c88:	100b883a 	mov	r5,r2
    2c8c:	e13ffe17 	ldw	r4,-8(fp)
    2c90:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2c94:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    2c98:	e0bffd03 	ldbu	r2,-12(fp)
    2c9c:	100b883a 	mov	r5,r2
    2ca0:	e13ffe17 	ldw	r4,-8(fp)
    2ca4:	0002efc0 	call	2efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    2ca8:	e037883a 	mov	sp,fp
    2cac:	dfc00117 	ldw	ra,4(sp)
    2cb0:	df000017 	ldw	fp,0(sp)
    2cb4:	dec00204 	addi	sp,sp,8
    2cb8:	f800283a 	ret

00002cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    2cbc:	defffa04 	addi	sp,sp,-24
    2cc0:	dfc00515 	stw	ra,20(sp)
    2cc4:	df000415 	stw	fp,16(sp)
    2cc8:	dc400315 	stw	r17,12(sp)
    2ccc:	dc000215 	stw	r16,8(sp)
    2cd0:	df000404 	addi	fp,sp,16
    2cd4:	e13ffc15 	stw	r4,-16(fp)
    2cd8:	2805883a 	mov	r2,r5
    2cdc:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    2ce0:	e0bffd03 	ldbu	r2,-12(fp)
    2ce4:	e43ffc17 	ldw	r16,-16(fp)
    2ce8:	014001c4 	movi	r5,7
    2cec:	1009883a 	mov	r4,r2
    2cf0:	000ce000 	call	ce00 <__mulsi3>
    2cf4:	8085883a 	add	r2,r16,r2
    2cf8:	10800304 	addi	r2,r2,12
    2cfc:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    2d00:	e0bffd03 	ldbu	r2,-12(fp)
    2d04:	e43ffc17 	ldw	r16,-16(fp)
    2d08:	014001c4 	movi	r5,7
    2d0c:	1009883a 	mov	r4,r2
    2d10:	000ce000 	call	ce00 <__mulsi3>
    2d14:	8085883a 	add	r2,r16,r2
    2d18:	10800344 	addi	r2,r2,13
    2d1c:	00c00044 	movi	r3,1
    2d20:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    2d24:	e0bffd03 	ldbu	r2,-12(fp)
    2d28:	e43ffc17 	ldw	r16,-16(fp)
    2d2c:	014001c4 	movi	r5,7
    2d30:	1009883a 	mov	r4,r2
    2d34:	000ce000 	call	ce00 <__mulsi3>
    2d38:	8085883a 	add	r2,r16,r2
    2d3c:	10800384 	addi	r2,r2,14
    2d40:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    2d44:	e0fffd03 	ldbu	r3,-12(fp)
    2d48:	e0bffc17 	ldw	r2,-16(fp)
    2d4c:	14000104 	addi	r16,r2,4
    2d50:	e47ffc17 	ldw	r17,-16(fp)
    2d54:	014001c4 	movi	r5,7
    2d58:	1809883a 	mov	r4,r3
    2d5c:	000ce000 	call	ce00 <__mulsi3>
    2d60:	8885883a 	add	r2,r17,r2
    2d64:	10800204 	addi	r2,r2,8
    2d68:	81403fcc 	andi	r5,r16,255
    2d6c:	10c00003 	ldbu	r3,0(r2)
    2d70:	1806703a 	and	r3,r3,zero
    2d74:	1809883a 	mov	r4,r3
    2d78:	2807883a 	mov	r3,r5
    2d7c:	20c6b03a 	or	r3,r4,r3
    2d80:	10c00005 	stb	r3,0(r2)
    2d84:	8006d23a 	srli	r3,r16,8
    2d88:	19403fcc 	andi	r5,r3,255
    2d8c:	10c00043 	ldbu	r3,1(r2)
    2d90:	1806703a 	and	r3,r3,zero
    2d94:	1809883a 	mov	r4,r3
    2d98:	2807883a 	mov	r3,r5
    2d9c:	20c6b03a 	or	r3,r4,r3
    2da0:	10c00045 	stb	r3,1(r2)
    2da4:	8006d43a 	srli	r3,r16,16
    2da8:	19403fcc 	andi	r5,r3,255
    2dac:	10c00083 	ldbu	r3,2(r2)
    2db0:	1806703a 	and	r3,r3,zero
    2db4:	1809883a 	mov	r4,r3
    2db8:	2807883a 	mov	r3,r5
    2dbc:	20c6b03a 	or	r3,r4,r3
    2dc0:	10c00085 	stb	r3,2(r2)
    2dc4:	800ad63a 	srli	r5,r16,24
    2dc8:	10c000c3 	ldbu	r3,3(r2)
    2dcc:	1806703a 	and	r3,r3,zero
    2dd0:	1809883a 	mov	r4,r3
    2dd4:	2807883a 	mov	r3,r5
    2dd8:	20c6b03a 	or	r3,r4,r3
    2ddc:	10c000c5 	stb	r3,3(r2)
        };
    2de0:	0001883a 	nop
    2de4:	e6fffe04 	addi	sp,fp,-8
    2de8:	dfc00317 	ldw	ra,12(sp)
    2dec:	df000217 	ldw	fp,8(sp)
    2df0:	dc400117 	ldw	r17,4(sp)
    2df4:	dc000017 	ldw	r16,0(sp)
    2df8:	dec00404 	addi	sp,sp,16
    2dfc:	f800283a 	ret

00002e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    2e00:	defffc04 	addi	sp,sp,-16
    2e04:	dfc00315 	stw	ra,12(sp)
    2e08:	df000215 	stw	fp,8(sp)
    2e0c:	df000204 	addi	fp,sp,8
    2e10:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    2e14:	00800044 	movi	r2,1
    2e18:	e0bffe05 	stb	r2,-8(fp)
    2e1c:	e0bffe03 	ldbu	r2,-8(fp)
    2e20:	10800428 	cmpgeui	r2,r2,16
    2e24:	1000081e 	bne	r2,zero,2e48 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    2e28:	e0bffe03 	ldbu	r2,-8(fp)
    2e2c:	100b883a 	mov	r5,r2
    2e30:	e13fff17 	ldw	r4,-4(fp)
    2e34:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    2e38:	e0bffe03 	ldbu	r2,-8(fp)
    2e3c:	10800044 	addi	r2,r2,1
    2e40:	e0bffe05 	stb	r2,-8(fp)
    2e44:	003ff506 	br	2e1c <__alt_data_end+0xfc002e1c>
                        InitEntry(i);

                hubCounter = 0;
    2e48:	e0bfff17 	ldw	r2,-4(fp)
    2e4c:	100001c5 	stb	zero,7(r2)
        };
    2e50:	0001883a 	nop
    2e54:	e037883a 	mov	sp,fp
    2e58:	dfc00117 	ldw	ra,4(sp)
    2e5c:	df000017 	ldw	fp,0(sp)
    2e60:	dec00204 	addi	sp,sp,8
    2e64:	f800283a 	ret

00002e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    2e68:	defffa04 	addi	sp,sp,-24
    2e6c:	dfc00515 	stw	ra,20(sp)
    2e70:	df000415 	stw	fp,16(sp)
    2e74:	dc000315 	stw	r16,12(sp)
    2e78:	df000404 	addi	fp,sp,16
    2e7c:	e13ffd15 	stw	r4,-12(fp)
    2e80:	2805883a 	mov	r2,r5
    2e84:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    2e88:	00800044 	movi	r2,1
    2e8c:	e0bffc05 	stb	r2,-16(fp)
    2e90:	e0bffc03 	ldbu	r2,-16(fp)
    2e94:	10800428 	cmpgeui	r2,r2,16
    2e98:	1000111e 	bne	r2,zero,2ee0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    2e9c:	e0bffc03 	ldbu	r2,-16(fp)
    2ea0:	e43ffd17 	ldw	r16,-12(fp)
    2ea4:	014001c4 	movi	r5,7
    2ea8:	1009883a 	mov	r4,r2
    2eac:	000ce000 	call	ce00 <__mulsi3>
    2eb0:	8085883a 	add	r2,r16,r2
    2eb4:	10800304 	addi	r2,r2,12
    2eb8:	10800003 	ldbu	r2,0(r2)
    2ebc:	10c03fcc 	andi	r3,r2,255
    2ec0:	e0bffe03 	ldbu	r2,-8(fp)
    2ec4:	1880021e 	bne	r3,r2,2ed0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    2ec8:	e0bffc03 	ldbu	r2,-16(fp)
    2ecc:	00000506 	br	2ee4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    2ed0:	e0bffc03 	ldbu	r2,-16(fp)
    2ed4:	10800044 	addi	r2,r2,1
    2ed8:	e0bffc05 	stb	r2,-16(fp)
    2edc:	003fec06 	br	2e90 <__alt_data_end+0xfc002e90>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    2ee0:	0005883a 	mov	r2,zero
        };
    2ee4:	e6ffff04 	addi	sp,fp,-4
    2ee8:	dfc00217 	ldw	ra,8(sp)
    2eec:	df000117 	ldw	fp,4(sp)
    2ef0:	dc000017 	ldw	r16,0(sp)
    2ef4:	dec00304 	addi	sp,sp,12
    2ef8:	f800283a 	ret

00002efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    2efc:	defffa04 	addi	sp,sp,-24
    2f00:	dfc00515 	stw	ra,20(sp)
    2f04:	df000415 	stw	fp,16(sp)
    2f08:	dc000315 	stw	r16,12(sp)
    2f0c:	df000404 	addi	fp,sp,16
    2f10:	e13ffd15 	stw	r4,-12(fp)
    2f14:	2805883a 	mov	r2,r5
    2f18:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    2f1c:	e0bffe03 	ldbu	r2,-8(fp)
    2f20:	10003026 	beq	r2,zero,2fe4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    2f24:	e0bffe03 	ldbu	r2,-8(fp)
    2f28:	e43ffd17 	ldw	r16,-12(fp)
    2f2c:	014001c4 	movi	r5,7
    2f30:	1009883a 	mov	r4,r2
    2f34:	000ce000 	call	ce00 <__mulsi3>
    2f38:	8085883a 	add	r2,r16,r2
    2f3c:	10800304 	addi	r2,r2,12
    2f40:	10800003 	ldbu	r2,0(r2)
    2f44:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    2f48:	e0bffc43 	ldbu	r2,-15(fp)
    2f4c:	1080100c 	andi	r2,r2,64
    2f50:	10803fcc 	andi	r2,r2,255
    2f54:	10001e26 	beq	r2,zero,2fd0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    2f58:	00800044 	movi	r2,1
    2f5c:	e0bffc05 	stb	r2,-16(fp)
    2f60:	e0bffc03 	ldbu	r2,-16(fp)
    2f64:	100d883a 	mov	r6,r2
    2f68:	e17ffc43 	ldbu	r5,-15(fp)
    2f6c:	e13ffd17 	ldw	r4,-12(fp)
    2f70:	00030000 	call	3000 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    2f74:	e0bffc05 	stb	r2,-16(fp)
    2f78:	e0bffc03 	ldbu	r2,-16(fp)
    2f7c:	1004c03a 	cmpne	r2,r2,zero
    2f80:	10803fcc 	andi	r2,r2,255
    2f84:	10000526 	beq	r2,zero,2f9c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    2f88:	e0bffc03 	ldbu	r2,-16(fp)
    2f8c:	100b883a 	mov	r5,r2
    2f90:	e13ffd17 	ldw	r4,-12(fp)
    2f94:	0002efc0 	call	2efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    2f98:	003ff106 	br	2f60 <__alt_data_end+0xfc002f60>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    2f9c:	e0bffd17 	ldw	r2,-12(fp)
    2fa0:	10c001c3 	ldbu	r3,7(r2)
    2fa4:	e0bffc43 	ldbu	r2,-15(fp)
    2fa8:	108001cc 	andi	r2,r2,7
    2fac:	18c03fcc 	andi	r3,r3,255
    2fb0:	10803fcc 	andi	r2,r2,255
    2fb4:	1880061e 	bne	r3,r2,2fd0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    2fb8:	e0bffd17 	ldw	r2,-12(fp)
    2fbc:	108001c3 	ldbu	r2,7(r2)
    2fc0:	10bfffc4 	addi	r2,r2,-1
    2fc4:	1007883a 	mov	r3,r2
    2fc8:	e0bffd17 	ldw	r2,-12(fp)
    2fcc:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    2fd0:	e0bffe03 	ldbu	r2,-8(fp)
    2fd4:	100b883a 	mov	r5,r2
    2fd8:	e13ffd17 	ldw	r4,-12(fp)
    2fdc:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    2fe0:	00000106 	br	2fe8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    2fe4:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    2fe8:	e6ffff04 	addi	sp,fp,-4
    2fec:	dfc00217 	ldw	ra,8(sp)
    2ff0:	df000117 	ldw	fp,4(sp)
    2ff4:	dc000017 	ldw	r16,0(sp)
    2ff8:	dec00304 	addi	sp,sp,12
    2ffc:	f800283a 	ret

00003000 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    3000:	defff904 	addi	sp,sp,-28
    3004:	dfc00615 	stw	ra,24(sp)
    3008:	df000515 	stw	fp,20(sp)
    300c:	dc000415 	stw	r16,16(sp)
    3010:	df000504 	addi	fp,sp,20
    3014:	e13ffc15 	stw	r4,-16(fp)
    3018:	e17ffd05 	stb	r5,-12(fp)
    301c:	3005883a 	mov	r2,r6
    3020:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3024:	e0bffe03 	ldbu	r2,-8(fp)
    3028:	10000526 	beq	r2,zero,3040 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    302c:	e0bffe03 	ldbu	r2,-8(fp)
    3030:	10800428 	cmpgeui	r2,r2,16
    3034:	1000021e 	bne	r2,zero,3040 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3038:	e0bffe03 	ldbu	r2,-8(fp)
    303c:	00000106 	br	3044 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3040:	00800044 	movi	r2,1
    3044:	e0bffb05 	stb	r2,-20(fp)
    3048:	e0bffb03 	ldbu	r2,-20(fp)
    304c:	10800428 	cmpgeui	r2,r2,16
    3050:	1000161e 	bne	r2,zero,30ac <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3054:	e0bffb03 	ldbu	r2,-20(fp)
    3058:	e43ffc17 	ldw	r16,-16(fp)
    305c:	014001c4 	movi	r5,7
    3060:	1009883a 	mov	r4,r2
    3064:	000ce000 	call	ce00 <__mulsi3>
    3068:	8085883a 	add	r2,r16,r2
    306c:	10800304 	addi	r2,r2,12
    3070:	10800003 	ldbu	r2,0(r2)
    3074:	1004d0fa 	srli	r2,r2,3
    3078:	108001cc 	andi	r2,r2,7
    307c:	1007883a 	mov	r3,r2
    3080:	e0bffd03 	ldbu	r2,-12(fp)
    3084:	108001cc 	andi	r2,r2,7
    3088:	18c03fcc 	andi	r3,r3,255
    308c:	10803fcc 	andi	r2,r2,255
    3090:	1880021e 	bne	r3,r2,309c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3094:	e0bffb03 	ldbu	r2,-20(fp)
    3098:	00000506 	br	30b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    309c:	e0bffb03 	ldbu	r2,-20(fp)
    30a0:	10800044 	addi	r2,r2,1
    30a4:	e0bffb05 	stb	r2,-20(fp)
    30a8:	003fe706 	br	3048 <__alt_data_end+0xfc003048>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    30ac:	0005883a 	mov	r2,zero
        };
    30b0:	e6ffff04 	addi	sp,fp,-4
    30b4:	dfc00217 	ldw	ra,8(sp)
    30b8:	df000117 	ldw	fp,4(sp)
    30bc:	dc000017 	ldw	r16,0(sp)
    30c0:	dec00304 	addi	sp,sp,12
    30c4:	f800283a 	ret

000030c8 <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    30c8:	defffb04 	addi	sp,sp,-20
    30cc:	dfc00415 	stw	ra,16(sp)
    30d0:	df000315 	stw	fp,12(sp)
    30d4:	df000304 	addi	fp,sp,12
    30d8:	e13ffe15 	stw	r4,-8(fp)
    30dc:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    30e0:	e0bffe17 	ldw	r2,-8(fp)
    30e4:	1009883a 	mov	r4,r2
    30e8:	0004a840 	call	4a84 <_ZN15USBDeviceConfigC1Ev>
    30ec:	e0bffe17 	ldw	r2,-8(fp)
    30f0:	10800104 	addi	r2,r2,4
    30f4:	1009883a 	mov	r4,r2
    30f8:	0004ab80 	call	4ab8 <_ZN17UsbConfigXtracterC1Ev>
    30fc:	008000b4 	movhi	r2,2
    3100:	108d9b04 	addi	r2,r2,13932
    3104:	e0fffe17 	ldw	r3,-8(fp)
    3108:	18800015 	stw	r2,0(r3)
    310c:	008000b4 	movhi	r2,2
    3110:	108da804 	addi	r2,r2,13984
    3114:	e0fffe17 	ldw	r3,-8(fp)
    3118:	18800115 	stw	r2,4(r3)
    311c:	e0bffe17 	ldw	r2,-8(fp)
    3120:	e0ffff17 	ldw	r3,-4(fp)
    3124:	10c00315 	stw	r3,12(r2)
    3128:	e0bffe17 	ldw	r2,-8(fp)
    312c:	10000405 	stb	zero,16(r2)
    3130:	e0bffe17 	ldw	r2,-8(fp)
    3134:	00c00044 	movi	r3,1
    3138:	10c006c5 	stb	r3,27(r2)
    313c:	e0bffe17 	ldw	r2,-8(fp)
    3140:	10000715 	stw	zero,28(r2)
    3144:	e0bffe17 	ldw	r2,-8(fp)
    3148:	10000905 	stb	zero,36(r2)
    314c:	e0bffe17 	ldw	r2,-8(fp)
    3150:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3154:	e03ffd05 	stb	zero,-12(fp)
    3158:	e0bffd03 	ldbu	r2,-12(fp)
    315c:	108000e8 	cmpgeui	r2,r2,3
    3160:	1000431e 	bne	r2,zero,3270 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3164:	e0fffd03 	ldbu	r3,-12(fp)
    3168:	e13ffe17 	ldw	r4,-8(fp)
    316c:	1805883a 	mov	r2,r3
    3170:	1085883a 	add	r2,r2,r2
    3174:	10c5883a 	add	r2,r2,r3
    3178:	2085883a 	add	r2,r4,r2
    317c:	10800444 	addi	r2,r2,17
    3180:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3184:	e13ffd03 	ldbu	r4,-12(fp)
    3188:	e0bffd03 	ldbu	r2,-12(fp)
    318c:	10000226 	beq	r2,zero,3198 <_ZN7XBOXONEC1EP3USB+0xd0>
    3190:	0007883a 	mov	r3,zero
    3194:	00000106 	br	319c <_ZN7XBOXONEC1EP3USB+0xd4>
    3198:	00c00204 	movi	r3,8
    319c:	e17ffe17 	ldw	r5,-8(fp)
    31a0:	2005883a 	mov	r2,r4
    31a4:	1085883a 	add	r2,r2,r2
    31a8:	1105883a 	add	r2,r2,r4
    31ac:	2885883a 	add	r2,r5,r2
    31b0:	10800484 	addi	r2,r2,18
    31b4:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    31b8:	e0fffd03 	ldbu	r3,-12(fp)
    31bc:	e13ffe17 	ldw	r4,-8(fp)
    31c0:	1805883a 	mov	r2,r3
    31c4:	1085883a 	add	r2,r2,r2
    31c8:	10c5883a 	add	r2,r2,r3
    31cc:	2085883a 	add	r2,r4,r2
    31d0:	10800404 	addi	r2,r2,16
    31d4:	110000c3 	ldbu	r4,3(r2)
    31d8:	00ffff84 	movi	r3,-2
    31dc:	20c6703a 	and	r3,r4,r3
    31e0:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    31e4:	e0fffd03 	ldbu	r3,-12(fp)
    31e8:	e13ffe17 	ldw	r4,-8(fp)
    31ec:	1805883a 	mov	r2,r3
    31f0:	1085883a 	add	r2,r2,r2
    31f4:	10c5883a 	add	r2,r2,r3
    31f8:	2085883a 	add	r2,r4,r2
    31fc:	10800404 	addi	r2,r2,16
    3200:	110000c3 	ldbu	r4,3(r2)
    3204:	00ffff44 	movi	r3,-3
    3208:	20c6703a 	and	r3,r4,r3
    320c:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    3210:	e13ffd03 	ldbu	r4,-12(fp)
    3214:	e0bffd03 	ldbu	r2,-12(fp)
    3218:	10000226 	beq	r2,zero,3224 <_ZN7XBOXONEC1EP3USB+0x15c>
    321c:	00c00044 	movi	r3,1
    3220:	00000106 	br	3228 <_ZN7XBOXONEC1EP3USB+0x160>
    3224:	00c003c4 	movi	r3,15
    3228:	e17ffe17 	ldw	r5,-8(fp)
    322c:	2005883a 	mov	r2,r4
    3230:	1085883a 	add	r2,r2,r2
    3234:	1105883a 	add	r2,r2,r4
    3238:	2885883a 	add	r2,r5,r2
    323c:	10800404 	addi	r2,r2,16
    3240:	18c7883a 	add	r3,r3,r3
    3244:	18cb883a 	add	r5,r3,r3
    3248:	10c000c3 	ldbu	r3,3(r2)
    324c:	18c000cc 	andi	r3,r3,3
    3250:	1809883a 	mov	r4,r3
    3254:	2807883a 	mov	r3,r5
    3258:	20c6b03a 	or	r3,r4,r3
    325c:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3260:	e0bffd03 	ldbu	r2,-12(fp)
    3264:	10800044 	addi	r2,r2,1
    3268:	e0bffd05 	stb	r2,-12(fp)
    326c:	003fba06 	br	3158 <__alt_data_end+0xfc003158>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    3270:	e0bffe17 	ldw	r2,-8(fp)
    3274:	10800317 	ldw	r2,12(r2)
    3278:	10000626 	beq	r2,zero,3294 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    327c:	e0bffe17 	ldw	r2,-8(fp)
    3280:	10800317 	ldw	r2,12(r2)
    3284:	e0fffe17 	ldw	r3,-8(fp)
    3288:	180b883a 	mov	r5,r3
    328c:	1009883a 	mov	r4,r2
    3290:	00048380 	call	4838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3294:	0001883a 	nop
    3298:	e037883a 	mov	sp,fp
    329c:	dfc00117 	ldw	ra,4(sp)
    32a0:	df000017 	ldw	fp,0(sp)
    32a4:	dec00204 	addi	sp,sp,8
    32a8:	f800283a 	ret

000032ac <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    32ac:	deffde04 	addi	sp,sp,-136
    32b0:	dfc02115 	stw	ra,132(sp)
    32b4:	df002015 	stw	fp,128(sp)
    32b8:	df002004 	addi	fp,sp,128
    32bc:	e13ffc15 	stw	r4,-16(fp)
    32c0:	2809883a 	mov	r4,r5
    32c4:	3007883a 	mov	r3,r6
    32c8:	3805883a 	mov	r2,r7
    32cc:	e13ffd05 	stb	r4,-12(fp)
    32d0:	e0fffe05 	stb	r3,-8(fp)
    32d4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    32d8:	e0bfe744 	addi	r2,fp,-99
    32dc:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    32e0:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    32e4:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    32e8:	e0bffc17 	ldw	r2,-16(fp)
    32ec:	10800317 	ldw	r2,12(r2)
    32f0:	1009883a 	mov	r4,r2
    32f4:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    32f8:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    32fc:	e0bffc17 	ldw	r2,-16(fp)
    3300:	10800403 	ldbu	r2,16(r2)
    3304:	10803fcc 	andi	r2,r2,255
    3308:	10000226 	beq	r2,zero,3314 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    330c:	00bff644 	movi	r2,-39
    3310:	00017606 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    3314:	e0bfe517 	ldw	r2,-108(fp)
    3318:	10800017 	ldw	r2,0(r2)
    331c:	10800017 	ldw	r2,0(r2)
    3320:	000b883a 	mov	r5,zero
    3324:	e13fe517 	ldw	r4,-108(fp)
    3328:	103ee83a 	callr	r2
    332c:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3330:	e0bfe317 	ldw	r2,-116(fp)
    3334:	1000021e 	bne	r2,zero,3340 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3338:	00bff584 	movi	r2,-42
    333c:	00016b06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3340:	e0bfe317 	ldw	r2,-116(fp)
    3344:	10c00003 	ldbu	r3,0(r2)
    3348:	11000043 	ldbu	r4,1(r2)
    334c:	2008923a 	slli	r4,r4,8
    3350:	20c6b03a 	or	r3,r4,r3
    3354:	11000083 	ldbu	r4,2(r2)
    3358:	2008943a 	slli	r4,r4,16
    335c:	20c6b03a 	or	r3,r4,r3
    3360:	108000c3 	ldbu	r2,3(r2)
    3364:	1004963a 	slli	r2,r2,24
    3368:	10c4b03a 	or	r2,r2,r3
    336c:	1000021e 	bne	r2,zero,3378 <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    3370:	00bff5c4 	movi	r2,-41
    3374:	00015d06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    3378:	e0bfe317 	ldw	r2,-116(fp)
    337c:	10c00003 	ldbu	r3,0(r2)
    3380:	11000043 	ldbu	r4,1(r2)
    3384:	2008923a 	slli	r4,r4,8
    3388:	20c6b03a 	or	r3,r4,r3
    338c:	11000083 	ldbu	r4,2(r2)
    3390:	2008943a 	slli	r4,r4,16
    3394:	20c6b03a 	or	r3,r4,r3
    3398:	108000c3 	ldbu	r2,3(r2)
    339c:	1004963a 	slli	r2,r2,24
    33a0:	10c4b03a 	or	r2,r2,r3
    33a4:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    33a8:	e0bffc17 	ldw	r2,-16(fp)
    33ac:	10c00444 	addi	r3,r2,17
    33b0:	e0bfe317 	ldw	r2,-116(fp)
    33b4:	19803fcc 	andi	r6,r3,255
    33b8:	11000003 	ldbu	r4,0(r2)
    33bc:	2008703a 	and	r4,r4,zero
    33c0:	200b883a 	mov	r5,r4
    33c4:	3009883a 	mov	r4,r6
    33c8:	2908b03a 	or	r4,r5,r4
    33cc:	11000005 	stb	r4,0(r2)
    33d0:	1808d23a 	srli	r4,r3,8
    33d4:	21803fcc 	andi	r6,r4,255
    33d8:	11000043 	ldbu	r4,1(r2)
    33dc:	2008703a 	and	r4,r4,zero
    33e0:	200b883a 	mov	r5,r4
    33e4:	3009883a 	mov	r4,r6
    33e8:	2908b03a 	or	r4,r5,r4
    33ec:	11000045 	stb	r4,1(r2)
    33f0:	1808d43a 	srli	r4,r3,16
    33f4:	21803fcc 	andi	r6,r4,255
    33f8:	11000083 	ldbu	r4,2(r2)
    33fc:	2008703a 	and	r4,r4,zero
    3400:	200b883a 	mov	r5,r4
    3404:	3009883a 	mov	r4,r6
    3408:	2908b03a 	or	r4,r5,r4
    340c:	11000085 	stb	r4,2(r2)
    3410:	180ad63a 	srli	r5,r3,24
    3414:	10c000c3 	ldbu	r3,3(r2)
    3418:	1806703a 	and	r3,r3,zero
    341c:	1809883a 	mov	r4,r3
    3420:	2807883a 	mov	r3,r5
    3424:	20c6b03a 	or	r3,r4,r3
    3428:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    342c:	e0bfe317 	ldw	r2,-116(fp)
    3430:	e0ffff03 	ldbu	r3,-4(fp)
    3434:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    3438:	e0bffc17 	ldw	r2,-16(fp)
    343c:	10c00317 	ldw	r3,12(r2)
    3440:	00800484 	movi	r2,18
    3444:	113fffcc 	andi	r4,r2,65535
    3448:	e0bfe744 	addi	r2,fp,-99
    344c:	d8800015 	stw	r2,0(sp)
    3450:	200f883a 	mov	r7,r4
    3454:	000d883a 	mov	r6,zero
    3458:	000b883a 	mov	r5,zero
    345c:	1809883a 	mov	r4,r3
    3460:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    3464:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    3468:	e0bfe317 	ldw	r2,-116(fp)
    346c:	e0ffe417 	ldw	r3,-112(fp)
    3470:	19403fcc 	andi	r5,r3,255
    3474:	10c00003 	ldbu	r3,0(r2)
    3478:	1806703a 	and	r3,r3,zero
    347c:	1809883a 	mov	r4,r3
    3480:	2807883a 	mov	r3,r5
    3484:	20c6b03a 	or	r3,r4,r3
    3488:	10c00005 	stb	r3,0(r2)
    348c:	e0ffe417 	ldw	r3,-112(fp)
    3490:	1806d23a 	srli	r3,r3,8
    3494:	19403fcc 	andi	r5,r3,255
    3498:	10c00043 	ldbu	r3,1(r2)
    349c:	1806703a 	and	r3,r3,zero
    34a0:	1809883a 	mov	r4,r3
    34a4:	2807883a 	mov	r3,r5
    34a8:	20c6b03a 	or	r3,r4,r3
    34ac:	10c00045 	stb	r3,1(r2)
    34b0:	e0ffe417 	ldw	r3,-112(fp)
    34b4:	1806d43a 	srli	r3,r3,16
    34b8:	19403fcc 	andi	r5,r3,255
    34bc:	10c00083 	ldbu	r3,2(r2)
    34c0:	1806703a 	and	r3,r3,zero
    34c4:	1809883a 	mov	r4,r3
    34c8:	2807883a 	mov	r3,r5
    34cc:	20c6b03a 	or	r3,r4,r3
    34d0:	10c00085 	stb	r3,2(r2)
    34d4:	e0ffe417 	ldw	r3,-112(fp)
    34d8:	180ad63a 	srli	r5,r3,24
    34dc:	10c000c3 	ldbu	r3,3(r2)
    34e0:	1806703a 	and	r3,r3,zero
    34e4:	1809883a 	mov	r4,r3
    34e8:	2807883a 	mov	r3,r5
    34ec:	20c6b03a 	or	r3,r4,r3
    34f0:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    34f4:	e0bfe103 	ldbu	r2,-124(fp)
    34f8:	1000e61e 	bne	r2,zero,3894 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    34fc:	e0bfe217 	ldw	r2,-120(fp)
    3500:	10c00203 	ldbu	r3,8(r2)
    3504:	10800243 	ldbu	r2,9(r2)
    3508:	1004923a 	slli	r2,r2,8
    350c:	10c4b03a 	or	r2,r2,r3
    3510:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    3514:	e0bfe217 	ldw	r2,-120(fp)
    3518:	10c00283 	ldbu	r3,10(r2)
    351c:	108002c3 	ldbu	r2,11(r2)
    3520:	1004923a 	slli	r2,r2,8
    3524:	10c4b03a 	or	r2,r2,r3
    3528:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    352c:	e0bffc17 	ldw	r2,-16(fp)
    3530:	10800017 	ldw	r2,0(r2)
    3534:	10800604 	addi	r2,r2,24
    3538:	10800017 	ldw	r2,0(r2)
    353c:	e0ffe60b 	ldhu	r3,-104(fp)
    3540:	e13fe68b 	ldhu	r4,-102(fp)
    3544:	200d883a 	mov	r6,r4
    3548:	180b883a 	mov	r5,r3
    354c:	e13ffc17 	ldw	r4,-16(fp)
    3550:	103ee83a 	callr	r2
    3554:	1080005c 	xori	r2,r2,1
    3558:	10803fcc 	andi	r2,r2,255
    355c:	1000d51e 	bne	r2,zero,38b4 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    3560:	e0bfe517 	ldw	r2,-108(fp)
    3564:	10800017 	ldw	r2,0(r2)
    3568:	10800104 	addi	r2,r2,4
    356c:	10800017 	ldw	r2,0(r2)
    3570:	e0fffd03 	ldbu	r3,-12(fp)
    3574:	e13ffe03 	ldbu	r4,-8(fp)
    3578:	200f883a 	mov	r7,r4
    357c:	000d883a 	mov	r6,zero
    3580:	180b883a 	mov	r5,r3
    3584:	e13fe517 	ldw	r4,-108(fp)
    3588:	103ee83a 	callr	r2
    358c:	1007883a 	mov	r3,r2
    3590:	e0bffc17 	ldw	r2,-16(fp)
    3594:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    3598:	e0bffc17 	ldw	r2,-16(fp)
    359c:	10800403 	ldbu	r2,16(r2)
    35a0:	10803fcc 	andi	r2,r2,255
    35a4:	1000021e 	bne	r2,zero,35b0 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    35a8:	00bff504 	movi	r2,-44
    35ac:	0000cf06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    35b0:	e0bfe217 	ldw	r2,-120(fp)
    35b4:	10c001c3 	ldbu	r3,7(r2)
    35b8:	e0bffc17 	ldw	r2,-16(fp)
    35bc:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    35c0:	e0bffc17 	ldw	r2,-16(fp)
    35c4:	10c00317 	ldw	r3,12(r2)
    35c8:	e0bffc17 	ldw	r2,-16(fp)
    35cc:	10800403 	ldbu	r2,16(r2)
    35d0:	10803fcc 	andi	r2,r2,255
    35d4:	100f883a 	mov	r7,r2
    35d8:	000d883a 	mov	r6,zero
    35dc:	000b883a 	mov	r5,zero
    35e0:	1809883a 	mov	r4,r3
    35e4:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    35e8:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    35ec:	e0bfe103 	ldbu	r2,-124(fp)
    35f0:	10001026 	beq	r2,zero,3634 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    35f4:	e0bfe317 	ldw	r2,-116(fp)
    35f8:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    35fc:	e0bfe517 	ldw	r2,-108(fp)
    3600:	10800017 	ldw	r2,0(r2)
    3604:	10800204 	addi	r2,r2,8
    3608:	10800017 	ldw	r2,0(r2)
    360c:	e0fffc17 	ldw	r3,-16(fp)
    3610:	18c00403 	ldbu	r3,16(r3)
    3614:	18c03fcc 	andi	r3,r3,255
    3618:	180b883a 	mov	r5,r3
    361c:	e13fe517 	ldw	r4,-108(fp)
    3620:	103ee83a 	callr	r2
                bAddress = 0;
    3624:	e0bffc17 	ldw	r2,-16(fp)
    3628:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    362c:	e0bfe103 	ldbu	r2,-124(fp)
    3630:	0000ae06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3634:	e0bfe317 	ldw	r2,-116(fp)
    3638:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    363c:	e0bfe517 	ldw	r2,-108(fp)
    3640:	10800017 	ldw	r2,0(r2)
    3644:	10800017 	ldw	r2,0(r2)
    3648:	e0fffc17 	ldw	r3,-16(fp)
    364c:	18c00403 	ldbu	r3,16(r3)
    3650:	18c03fcc 	andi	r3,r3,255
    3654:	180b883a 	mov	r5,r3
    3658:	e13fe517 	ldw	r4,-108(fp)
    365c:	103ee83a 	callr	r2
    3660:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3664:	e0bfe317 	ldw	r2,-116(fp)
    3668:	1000021e 	bne	r2,zero,3674 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    366c:	00bff584 	movi	r2,-42
    3670:	00009e06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3674:	e0bfe317 	ldw	r2,-116(fp)
    3678:	e0ffff03 	ldbu	r3,-4(fp)
    367c:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3680:	e0bffc17 	ldw	r2,-16(fp)
    3684:	10c00317 	ldw	r3,12(r2)
    3688:	e0bffc17 	ldw	r2,-16(fp)
    368c:	10800403 	ldbu	r2,16(r2)
    3690:	11003fcc 	andi	r4,r2,255
    3694:	e0bffc17 	ldw	r2,-16(fp)
    3698:	10800444 	addi	r2,r2,17
    369c:	100f883a 	mov	r7,r2
    36a0:	01800044 	movi	r6,1
    36a4:	200b883a 	mov	r5,r4
    36a8:	1809883a 	mov	r4,r3
    36ac:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    36b0:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    36b4:	e0bfe103 	ldbu	r2,-124(fp)
    36b8:	1000781e 	bne	r2,zero,389c <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    36bc:	e0bfe217 	ldw	r2,-120(fp)
    36c0:	10800443 	ldbu	r2,17(r2)
    36c4:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    36c8:	e0bfe703 	ldbu	r2,-100(fp)
    36cc:	01402004 	movi	r5,128
    36d0:	1009883a 	mov	r4,r2
    36d4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    36d8:	e03fe145 	stb	zero,-123(fp)
    36dc:	e0ffe143 	ldbu	r3,-123(fp)
    36e0:	e0bfe703 	ldbu	r2,-100(fp)
    36e4:	1880222e 	bgeu	r3,r2,3770 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    36e8:	e0bffc17 	ldw	r2,-16(fp)
    36ec:	10c00104 	addi	r3,r2,4
    36f0:	e0bfed04 	addi	r2,fp,-76
    36f4:	180b883a 	mov	r5,r3
    36f8:	1009883a 	mov	r4,r2
    36fc:	0004b200 	call	4b20 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	10c00317 	ldw	r3,12(r2)
    3708:	e0bffc17 	ldw	r2,-16(fp)
    370c:	10800403 	ldbu	r2,16(r2)
    3710:	11003fcc 	andi	r4,r2,255
    3714:	e17fe143 	ldbu	r5,-123(fp)
    3718:	e0bfed04 	addi	r2,fp,-76
    371c:	d8800015 	stw	r2,0(sp)
    3720:	280f883a 	mov	r7,r5
    3724:	000d883a 	mov	r6,zero
    3728:	200b883a 	mov	r5,r4
    372c:	1809883a 	mov	r4,r3
    3730:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3734:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3738:	e0bfe103 	ldbu	r2,-124(fp)
    373c:	10000226 	beq	r2,zero,3748 <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3740:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3744:	00006206 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3748:	e0bffc17 	ldw	r2,-16(fp)
    374c:	108006c3 	ldbu	r2,27(r2)
    3750:	10803fcc 	andi	r2,r2,255
    3754:	108000f0 	cmpltui	r2,r2,3
    3758:	10000426 	beq	r2,zero,376c <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    375c:	e0bfe143 	ldbu	r2,-123(fp)
    3760:	10800044 	addi	r2,r2,1
    3764:	e0bfe145 	stb	r2,-123(fp)
    3768:	003fdc06 	br	36dc <__alt_data_end+0xfc0036dc>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    376c:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3770:	e0bffc17 	ldw	r2,-16(fp)
    3774:	108006c3 	ldbu	r2,27(r2)
    3778:	10803fcc 	andi	r2,r2,255
    377c:	108000e8 	cmpgeui	r2,r2,3
    3780:	10004e26 	beq	r2,zero,38bc <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3784:	e0bffc17 	ldw	r2,-16(fp)
    3788:	10c00317 	ldw	r3,12(r2)
    378c:	e0bffc17 	ldw	r2,-16(fp)
    3790:	10800403 	ldbu	r2,16(r2)
    3794:	11003fcc 	andi	r4,r2,255
    3798:	e0bffc17 	ldw	r2,-16(fp)
    379c:	108006c3 	ldbu	r2,27(r2)
    37a0:	11403fcc 	andi	r5,r2,255
    37a4:	e0bffc17 	ldw	r2,-16(fp)
    37a8:	10800444 	addi	r2,r2,17
    37ac:	100f883a 	mov	r7,r2
    37b0:	280d883a 	mov	r6,r5
    37b4:	200b883a 	mov	r5,r4
    37b8:	1809883a 	mov	r4,r3
    37bc:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    37c0:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    37c4:	e0bfe103 	ldbu	r2,-124(fp)
    37c8:	1000361e 	bne	r2,zero,38a4 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    37cc:	01003204 	movi	r4,200
    37d0:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    37d4:	e0bffc17 	ldw	r2,-16(fp)
    37d8:	10c00317 	ldw	r3,12(r2)
    37dc:	e0bffc17 	ldw	r2,-16(fp)
    37e0:	10800403 	ldbu	r2,16(r2)
    37e4:	11003fcc 	andi	r4,r2,255
    37e8:	e0bffc17 	ldw	r2,-16(fp)
    37ec:	10800443 	ldbu	r2,17(r2)
    37f0:	11403fcc 	andi	r5,r2,255
    37f4:	e0bffc17 	ldw	r2,-16(fp)
    37f8:	10800683 	ldbu	r2,26(r2)
    37fc:	10803fcc 	andi	r2,r2,255
    3800:	100f883a 	mov	r7,r2
    3804:	280d883a 	mov	r6,r5
    3808:	200b883a 	mov	r5,r4
    380c:	1809883a 	mov	r4,r3
    3810:	00027900 	call	2790 <_ZN3USB7setConfEhhh>
    3814:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3818:	e0bfe103 	ldbu	r2,-124(fp)
    381c:	1000231e 	bne	r2,zero,38ac <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3820:	01003204 	movi	r4,200
    3824:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3828:	e0bffc17 	ldw	r2,-16(fp)
    382c:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3830:	00800144 	movi	r2,5
    3834:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3838:	00800804 	movi	r2,32
    383c:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3840:	00800044 	movi	r2,1
    3844:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3848:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    384c:	e0bfebc4 	addi	r2,fp,-81
    3850:	01800144 	movi	r6,5
    3854:	100b883a 	mov	r5,r2
    3858:	e13ffc17 	ldw	r4,-16(fp)
    385c:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
    3860:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3864:	e0bfe103 	ldbu	r2,-124(fp)
    3868:	1000181e 	bne	r2,zero,38cc <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    386c:	e13ffc17 	ldw	r4,-16(fp)
    3870:	00042140 	call	4214 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3874:	e0bffc17 	ldw	r2,-16(fp)
    3878:	00c00044 	movi	r3,1
    387c:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3880:	e0bffc17 	ldw	r2,-16(fp)
    3884:	00c00044 	movi	r3,1
    3888:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    388c:	0005883a 	mov	r2,zero
    3890:	00001606 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3894:	0001883a 	nop
    3898:	00000d06 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    389c:	0001883a 	nop
    38a0:	00000b06 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    38a4:	0001883a 	nop
    38a8:	00000906 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    38ac:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    38b0:	00000706 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    38b4:	0001883a 	nop
    38b8:	00000106 	br	38c0 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    38bc:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    38c0:	00bff444 	movi	r2,-47
    38c4:	e0bfe105 	stb	r2,-124(fp)
    38c8:	00000106 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    38cc:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    38d0:	e0bffc17 	ldw	r2,-16(fp)
    38d4:	10800017 	ldw	r2,0(r2)
    38d8:	10800204 	addi	r2,r2,8
    38dc:	10800017 	ldw	r2,0(r2)
    38e0:	e13ffc17 	ldw	r4,-16(fp)
    38e4:	103ee83a 	callr	r2
        return rcode;
    38e8:	e0bfe103 	ldbu	r2,-124(fp)
}
    38ec:	e037883a 	mov	sp,fp
    38f0:	dfc00117 	ldw	ra,4(sp)
    38f4:	df000017 	ldw	fp,0(sp)
    38f8:	dec00204 	addi	sp,sp,8
    38fc:	f800283a 	ret

00003900 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3900:	defff904 	addi	sp,sp,-28
    3904:	df000615 	stw	fp,24(sp)
    3908:	df000604 	addi	fp,sp,24
    390c:	e13ffb15 	stw	r4,-20(fp)
    3910:	3009883a 	mov	r4,r6
    3914:	3807883a 	mov	r3,r7
    3918:	e0800117 	ldw	r2,4(fp)
    391c:	e17ffc05 	stb	r5,-16(fp)
    3920:	e13ffd05 	stb	r4,-12(fp)
    3924:	e0fffe05 	stb	r3,-8(fp)
    3928:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    392c:	e0bffb17 	ldw	r2,-20(fp)
    3930:	e0fffc03 	ldbu	r3,-16(fp)
    3934:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3938:	e0800217 	ldw	r2,8(fp)
    393c:	108000c3 	ldbu	r2,3(r2)
    3940:	10803fcc 	andi	r2,r2,255
    3944:	108000cc 	andi	r2,r2,3
    3948:	108000d8 	cmpnei	r2,r2,3
    394c:	1000361e 	bne	r2,zero,3a28 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3950:	e0800217 	ldw	r2,8(fp)
    3954:	10800083 	ldbu	r2,2(r2)
    3958:	10803fcc 	andi	r2,r2,255
    395c:	1080201c 	xori	r2,r2,128
    3960:	10bfe004 	addi	r2,r2,-128
    3964:	1000020e 	bge	r2,zero,3970 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3968:	00800084 	movi	r2,2
    396c:	00000106 	br	3974 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3970:	00800044 	movi	r2,1
    3974:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3978:	e0fffa03 	ldbu	r3,-24(fp)
    397c:	e0800217 	ldw	r2,8(fp)
    3980:	10800083 	ldbu	r2,2(r2)
    3984:	108003cc 	andi	r2,r2,15
    3988:	100b883a 	mov	r5,r2
    398c:	e13ffb17 	ldw	r4,-20(fp)
    3990:	1805883a 	mov	r2,r3
    3994:	1085883a 	add	r2,r2,r2
    3998:	10c5883a 	add	r2,r2,r3
    399c:	2085883a 	add	r2,r4,r2
    39a0:	10800444 	addi	r2,r2,17
    39a4:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    39a8:	e0fffa03 	ldbu	r3,-24(fp)
    39ac:	e0800217 	ldw	r2,8(fp)
    39b0:	11000103 	ldbu	r4,4(r2)
    39b4:	10800143 	ldbu	r2,5(r2)
    39b8:	1004923a 	slli	r2,r2,8
    39bc:	1104b03a 	or	r2,r2,r4
    39c0:	100b883a 	mov	r5,r2
    39c4:	e13ffb17 	ldw	r4,-20(fp)
    39c8:	1805883a 	mov	r2,r3
    39cc:	1085883a 	add	r2,r2,r2
    39d0:	10c5883a 	add	r2,r2,r3
    39d4:	2085883a 	add	r2,r4,r2
    39d8:	10800484 	addi	r2,r2,18
    39dc:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    39e0:	e0bffb17 	ldw	r2,-20(fp)
    39e4:	10c00903 	ldbu	r3,36(r2)
    39e8:	e0800217 	ldw	r2,8(fp)
    39ec:	10800183 	ldbu	r2,6(r2)
    39f0:	18c03fcc 	andi	r3,r3,255
    39f4:	10803fcc 	andi	r2,r2,255
    39f8:	1880042e 	bgeu	r3,r2,3a0c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    39fc:	e0800217 	ldw	r2,8(fp)
    3a00:	10c00183 	ldbu	r3,6(r2)
    3a04:	e0bffb17 	ldw	r2,-20(fp)
    3a08:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3a0c:	e0bffb17 	ldw	r2,-20(fp)
    3a10:	108006c3 	ldbu	r2,27(r2)
    3a14:	10800044 	addi	r2,r2,1
    3a18:	1007883a 	mov	r3,r2
    3a1c:	e0bffb17 	ldw	r2,-20(fp)
    3a20:	10c006c5 	stb	r3,27(r2)
    3a24:	00000106 	br	3a2c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3a28:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3a2c:	e037883a 	mov	sp,fp
    3a30:	df000017 	ldw	fp,0(sp)
    3a34:	dec00104 	addi	sp,sp,4
    3a38:	f800283a 	ret

00003a3c <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3a3c:	213fff04 	addi	r4,r4,-4
    3a40:	00039001 	jmpi	3900 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003a44 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3a44:	defffd04 	addi	sp,sp,-12
    3a48:	df000215 	stw	fp,8(sp)
    3a4c:	df000204 	addi	fp,sp,8
    3a50:	e13ffe15 	stw	r4,-8(fp)
    3a54:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3a58:	0001883a 	nop
    3a5c:	e037883a 	mov	sp,fp
    3a60:	df000017 	ldw	fp,0(sp)
    3a64:	dec00104 	addi	sp,sp,4
    3a68:	f800283a 	ret

00003a6c <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3a6c:	defffd04 	addi	sp,sp,-12
    3a70:	dfc00215 	stw	ra,8(sp)
    3a74:	df000115 	stw	fp,4(sp)
    3a78:	df000104 	addi	fp,sp,4
    3a7c:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3a80:	e0bfff17 	ldw	r2,-4(fp)
    3a84:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3a88:	e0bfff17 	ldw	r2,-4(fp)
    3a8c:	10800317 	ldw	r2,12(r2)
    3a90:	1009883a 	mov	r4,r2
    3a94:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    3a98:	1009883a 	mov	r4,r2
    3a9c:	20800017 	ldw	r2,0(r4)
    3aa0:	10800204 	addi	r2,r2,8
    3aa4:	10800017 	ldw	r2,0(r2)
    3aa8:	e0ffff17 	ldw	r3,-4(fp)
    3aac:	18c00403 	ldbu	r3,16(r3)
    3ab0:	18c03fcc 	andi	r3,r3,255
    3ab4:	180b883a 	mov	r5,r3
    3ab8:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3abc:	e0bfff17 	ldw	r2,-4(fp)
    3ac0:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3ac4:	e0bfff17 	ldw	r2,-4(fp)
    3ac8:	00c00044 	movi	r3,1
    3acc:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3ad0:	e0bfff17 	ldw	r2,-4(fp)
    3ad4:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3ad8:	e0bfff17 	ldw	r2,-4(fp)
    3adc:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3ae0:	e0bfff17 	ldw	r2,-4(fp)
    3ae4:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3ae8:	0005883a 	mov	r2,zero
}
    3aec:	e037883a 	mov	sp,fp
    3af0:	dfc00117 	ldw	ra,4(sp)
    3af4:	df000017 	ldw	fp,0(sp)
    3af8:	dec00204 	addi	sp,sp,8
    3afc:	f800283a 	ret

00003b00 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3b00:	defffa04 	addi	sp,sp,-24
    3b04:	dfc00515 	stw	ra,20(sp)
    3b08:	df000415 	stw	fp,16(sp)
    3b0c:	df000404 	addi	fp,sp,16
    3b10:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3b14:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3b18:	e0bfff17 	ldw	r2,-4(fp)
    3b1c:	10800943 	ldbu	r2,37(r2)
    3b20:	1080005c 	xori	r2,r2,1
    3b24:	10803fcc 	andi	r2,r2,255
    3b28:	10000226 	beq	r2,zero,3b34 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3b2c:	0005883a 	mov	r2,zero
    3b30:	00002c06 	br	3be4 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3b34:	00006dc0 	call	6dc <_Z6millisv>
    3b38:	1007883a 	mov	r3,r2
    3b3c:	e0bfff17 	ldw	r2,-4(fp)
    3b40:	10800717 	ldw	r2,28(r2)
    3b44:	1885c83a 	sub	r2,r3,r2
    3b48:	0084303a 	nor	r2,zero,r2
    3b4c:	1004d7fa 	srli	r2,r2,31
    3b50:	10803fcc 	andi	r2,r2,255
    3b54:	10002226 	beq	r2,zero,3be0 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3b58:	00006dc0 	call	6dc <_Z6millisv>
    3b5c:	1007883a 	mov	r3,r2
    3b60:	e0bfff17 	ldw	r2,-4(fp)
    3b64:	10800903 	ldbu	r2,36(r2)
    3b68:	10803fcc 	andi	r2,r2,255
    3b6c:	1887883a 	add	r3,r3,r2
    3b70:	e0bfff17 	ldw	r2,-4(fp)
    3b74:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3b78:	e0bfff17 	ldw	r2,-4(fp)
    3b7c:	10800603 	ldbu	r2,24(r2)
    3b80:	10803fcc 	andi	r2,r2,255
    3b84:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3b88:	e0bfff17 	ldw	r2,-4(fp)
    3b8c:	11000317 	ldw	r4,12(r2)
    3b90:	e0bfff17 	ldw	r2,-4(fp)
    3b94:	10800403 	ldbu	r2,16(r2)
    3b98:	11403fcc 	andi	r5,r2,255
    3b9c:	e0bfff17 	ldw	r2,-4(fp)
    3ba0:	108005c3 	ldbu	r2,23(r2)
    3ba4:	11803fcc 	andi	r6,r2,255
    3ba8:	e0bfff17 	ldw	r2,-4(fp)
    3bac:	10800f84 	addi	r2,r2,62
    3bb0:	e0ffff17 	ldw	r3,-4(fp)
    3bb4:	18c00903 	ldbu	r3,36(r3)
    3bb8:	18c03fcc 	andi	r3,r3,255
    3bbc:	e1fffe84 	addi	r7,fp,-6
    3bc0:	d8c00115 	stw	r3,4(sp)
    3bc4:	d8800015 	stw	r2,0(sp)
    3bc8:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    3bcc:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    3bd0:	e0bffe43 	ldbu	r2,-7(fp)
    3bd4:	1000021e 	bne	r2,zero,3be0 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    3bd8:	e13fff17 	ldw	r4,-4(fp)
    3bdc:	0003bf80 	call	3bf8 <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    3be0:	e0bffe03 	ldbu	r2,-8(fp)
}
    3be4:	e037883a 	mov	sp,fp
    3be8:	dfc00117 	ldw	ra,4(sp)
    3bec:	df000017 	ldw	fp,0(sp)
    3bf0:	dec00204 	addi	sp,sp,8
    3bf4:	f800283a 	ret

00003bf8 <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    3bf8:	defffd04 	addi	sp,sp,-12
    3bfc:	df000215 	stw	fp,8(sp)
    3c00:	df000204 	addi	fp,sp,8
    3c04:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    3c08:	e0bfff17 	ldw	r2,-4(fp)
    3c0c:	10800f83 	ldbu	r2,62(r2)
    3c10:	10803fcc 	andi	r2,r2,255
    3c14:	108001d8 	cmpnei	r2,r2,7
    3c18:	10002f1e 	bne	r2,zero,3cd8 <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    3c1c:	e0bfff17 	ldw	r2,-4(fp)
    3c20:	10801083 	ldbu	r2,66(r2)
    3c24:	10803fcc 	andi	r2,r2,255
    3c28:	10800058 	cmpnei	r2,r2,1
    3c2c:	10000a1e 	bne	r2,zero,3c58 <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    3c30:	e0bfff17 	ldw	r2,-4(fp)
    3c34:	10c0098b 	ldhu	r3,38(r2)
    3c38:	008000b4 	movhi	r2,2
    3c3c:	108d9784 	addi	r2,r2,13918
    3c40:	1080000b 	ldhu	r2,0(r2)
    3c44:	1884b03a 	or	r2,r3,r2
    3c48:	1007883a 	mov	r3,r2
    3c4c:	e0bfff17 	ldw	r2,-4(fp)
    3c50:	10c0098d 	sth	r3,38(r2)
    3c54:	00000b06 	br	3c84 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    3c58:	e0bfff17 	ldw	r2,-4(fp)
    3c5c:	1080098b 	ldhu	r2,38(r2)
    3c60:	1007883a 	mov	r3,r2
    3c64:	008000b4 	movhi	r2,2
    3c68:	108d9784 	addi	r2,r2,13918
    3c6c:	1080000b 	ldhu	r2,0(r2)
    3c70:	0084303a 	nor	r2,zero,r2
    3c74:	1884703a 	and	r2,r3,r2
    3c78:	1007883a 	mov	r3,r2
    3c7c:	e0bfff17 	ldw	r2,-4(fp)
    3c80:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    3c84:	e0bfff17 	ldw	r2,-4(fp)
    3c88:	10c0098b 	ldhu	r3,38(r2)
    3c8c:	e0bfff17 	ldw	r2,-4(fp)
    3c90:	10800a0b 	ldhu	r2,40(r2)
    3c94:	18ffffcc 	andi	r3,r3,65535
    3c98:	10bfffcc 	andi	r2,r2,65535
    3c9c:	18800e26 	beq	r3,r2,3cd8 <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    3ca0:	e0bfff17 	ldw	r2,-4(fp)
    3ca4:	1080098b 	ldhu	r2,38(r2)
    3ca8:	1007883a 	mov	r3,r2
    3cac:	e0bfff17 	ldw	r2,-4(fp)
    3cb0:	10800a0b 	ldhu	r2,40(r2)
    3cb4:	0084303a 	nor	r2,zero,r2
    3cb8:	1884703a 	and	r2,r3,r2
    3cbc:	1007883a 	mov	r3,r2
    3cc0:	e0bfff17 	ldw	r2,-4(fp)
    3cc4:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    3cc8:	e0bfff17 	ldw	r2,-4(fp)
    3ccc:	10c0098b 	ldhu	r3,38(r2)
    3cd0:	e0bfff17 	ldw	r2,-4(fp)
    3cd4:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    3cd8:	e0bfff17 	ldw	r2,-4(fp)
    3cdc:	10800f83 	ldbu	r2,62(r2)
    3ce0:	10803fcc 	andi	r2,r2,255
    3ce4:	10800820 	cmpeqi	r2,r2,32
    3ce8:	1000b026 	beq	r2,zero,3fac <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    3cec:	e0bfff17 	ldw	r2,-4(fp)
    3cf0:	10c0098b 	ldhu	r3,38(r2)
    3cf4:	008000b4 	movhi	r2,2
    3cf8:	108d9784 	addi	r2,r2,13918
    3cfc:	1080000b 	ldhu	r2,0(r2)
    3d00:	1884703a 	and	r2,r3,r2
    3d04:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    3d08:	e0bfff17 	ldw	r2,-4(fp)
    3d0c:	108010c3 	ldbu	r2,67(r2)
    3d10:	10803fcc 	andi	r2,r2,255
    3d14:	108003cc 	andi	r2,r2,15
    3d18:	1004923a 	slli	r2,r2,8
    3d1c:	1007883a 	mov	r3,r2
    3d20:	e0bffe0b 	ldhu	r2,-8(fp)
    3d24:	1884b03a 	or	r2,r3,r2
    3d28:	1007883a 	mov	r3,r2
    3d2c:	e0bfff17 	ldw	r2,-4(fp)
    3d30:	10801083 	ldbu	r2,66(r2)
    3d34:	10803fcc 	andi	r2,r2,255
    3d38:	10803c0c 	andi	r2,r2,240
    3d3c:	1884b03a 	or	r2,r3,r2
    3d40:	1007883a 	mov	r3,r2
    3d44:	e0bfff17 	ldw	r2,-4(fp)
    3d48:	10801083 	ldbu	r2,66(r2)
    3d4c:	10803fcc 	andi	r2,r2,255
    3d50:	1080030c 	andi	r2,r2,12
    3d54:	100492ba 	slli	r2,r2,10
    3d58:	1884b03a 	or	r2,r3,r2
    3d5c:	1007883a 	mov	r3,r2
    3d60:	e0bfff17 	ldw	r2,-4(fp)
    3d64:	10801083 	ldbu	r2,66(r2)
    3d68:	10803fcc 	andi	r2,r2,255
    3d6c:	1080004c 	andi	r2,r2,1
    3d70:	100490fa 	slli	r2,r2,3
    3d74:	1884b03a 	or	r2,r3,r2
    3d78:	1007883a 	mov	r3,r2
    3d7c:	e0bfff17 	ldw	r2,-4(fp)
    3d80:	108010c3 	ldbu	r2,67(r2)
    3d84:	10803fcc 	andi	r2,r2,255
    3d88:	1080300c 	andi	r2,r2,192
    3d8c:	1004923a 	slli	r2,r2,8
    3d90:	1884b03a 	or	r2,r3,r2
    3d94:	1007883a 	mov	r3,r2
    3d98:	e0bfff17 	ldw	r2,-4(fp)
    3d9c:	108010c3 	ldbu	r2,67(r2)
    3da0:	10803fcc 	andi	r2,r2,255
    3da4:	10800c0c 	andi	r2,r2,48
    3da8:	1005d13a 	srai	r2,r2,4
    3dac:	1884b03a 	or	r2,r3,r2
    3db0:	1007883a 	mov	r3,r2
    3db4:	e0bfff17 	ldw	r2,-4(fp)
    3db8:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    3dbc:	e0bfff17 	ldw	r2,-4(fp)
    3dc0:	10801143 	ldbu	r2,69(r2)
    3dc4:	10803fcc 	andi	r2,r2,255
    3dc8:	1004923a 	slli	r2,r2,8
    3dcc:	1007883a 	mov	r3,r2
    3dd0:	e0bfff17 	ldw	r2,-4(fp)
    3dd4:	10801103 	ldbu	r2,68(r2)
    3dd8:	10803fcc 	andi	r2,r2,255
    3ddc:	1884b03a 	or	r2,r3,r2
    3de0:	1007883a 	mov	r3,r2
    3de4:	e0bfff17 	ldw	r2,-4(fp)
    3de8:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    3dec:	e0bfff17 	ldw	r2,-4(fp)
    3df0:	108011c3 	ldbu	r2,71(r2)
    3df4:	10803fcc 	andi	r2,r2,255
    3df8:	1004923a 	slli	r2,r2,8
    3dfc:	1007883a 	mov	r3,r2
    3e00:	e0bfff17 	ldw	r2,-4(fp)
    3e04:	10801183 	ldbu	r2,70(r2)
    3e08:	10803fcc 	andi	r2,r2,255
    3e0c:	1884b03a 	or	r2,r3,r2
    3e10:	1007883a 	mov	r3,r2
    3e14:	e0bfff17 	ldw	r2,-4(fp)
    3e18:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    3e1c:	e0bfff17 	ldw	r2,-4(fp)
    3e20:	10801243 	ldbu	r2,73(r2)
    3e24:	10803fcc 	andi	r2,r2,255
    3e28:	1004923a 	slli	r2,r2,8
    3e2c:	1007883a 	mov	r3,r2
    3e30:	e0bfff17 	ldw	r2,-4(fp)
    3e34:	10801203 	ldbu	r2,72(r2)
    3e38:	10803fcc 	andi	r2,r2,255
    3e3c:	1884b03a 	or	r2,r3,r2
    3e40:	1007883a 	mov	r3,r2
    3e44:	e0bfff17 	ldw	r2,-4(fp)
    3e48:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    3e4c:	e0bfff17 	ldw	r2,-4(fp)
    3e50:	108012c3 	ldbu	r2,75(r2)
    3e54:	10803fcc 	andi	r2,r2,255
    3e58:	1004923a 	slli	r2,r2,8
    3e5c:	1007883a 	mov	r3,r2
    3e60:	e0bfff17 	ldw	r2,-4(fp)
    3e64:	10801283 	ldbu	r2,74(r2)
    3e68:	10803fcc 	andi	r2,r2,255
    3e6c:	1884b03a 	or	r2,r3,r2
    3e70:	1007883a 	mov	r3,r2
    3e74:	e0bfff17 	ldw	r2,-4(fp)
    3e78:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    3e7c:	e0bfff17 	ldw	r2,-4(fp)
    3e80:	10801343 	ldbu	r2,77(r2)
    3e84:	10803fcc 	andi	r2,r2,255
    3e88:	1004923a 	slli	r2,r2,8
    3e8c:	1007883a 	mov	r3,r2
    3e90:	e0bfff17 	ldw	r2,-4(fp)
    3e94:	10801303 	ldbu	r2,76(r2)
    3e98:	10803fcc 	andi	r2,r2,255
    3e9c:	1884b03a 	or	r2,r3,r2
    3ea0:	1007883a 	mov	r3,r2
    3ea4:	e0bfff17 	ldw	r2,-4(fp)
    3ea8:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    3eac:	e0bfff17 	ldw	r2,-4(fp)
    3eb0:	108013c3 	ldbu	r2,79(r2)
    3eb4:	10803fcc 	andi	r2,r2,255
    3eb8:	1004923a 	slli	r2,r2,8
    3ebc:	1007883a 	mov	r3,r2
    3ec0:	e0bfff17 	ldw	r2,-4(fp)
    3ec4:	10801383 	ldbu	r2,78(r2)
    3ec8:	10803fcc 	andi	r2,r2,255
    3ecc:	1884b03a 	or	r2,r3,r2
    3ed0:	1007883a 	mov	r3,r2
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
    3ed8:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10c0098b 	ldhu	r3,38(r2)
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	10800a0b 	ldhu	r2,40(r2)
    3eec:	18ffffcc 	andi	r3,r3,65535
    3ef0:	10bfffcc 	andi	r2,r2,65535
    3ef4:	18800e26 	beq	r3,r2,3f30 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    3ef8:	e0bfff17 	ldw	r2,-4(fp)
    3efc:	1080098b 	ldhu	r2,38(r2)
    3f00:	1007883a 	mov	r3,r2
    3f04:	e0bfff17 	ldw	r2,-4(fp)
    3f08:	10800a0b 	ldhu	r2,40(r2)
    3f0c:	0084303a 	nor	r2,zero,r2
    3f10:	1884703a 	and	r2,r3,r2
    3f14:	1007883a 	mov	r3,r2
    3f18:	e0bfff17 	ldw	r2,-4(fp)
    3f1c:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    3f20:	e0bfff17 	ldw	r2,-4(fp)
    3f24:	10c0098b 	ldhu	r3,38(r2)
    3f28:	e0bfff17 	ldw	r2,-4(fp)
    3f2c:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    3f30:	e0bfff17 	ldw	r2,-4(fp)
    3f34:	10800d0b 	ldhu	r2,52(r2)
    3f38:	10bfffcc 	andi	r2,r2,65535
    3f3c:	10000726 	beq	r2,zero,3f5c <_ZN7XBOXONE10readReportEv+0x364>
    3f40:	e0bfff17 	ldw	r2,-4(fp)
    3f44:	10800e0b 	ldhu	r2,56(r2)
    3f48:	10bfffcc 	andi	r2,r2,65535
    3f4c:	1000031e 	bne	r2,zero,3f5c <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    3f50:	e0bfff17 	ldw	r2,-4(fp)
    3f54:	00c00044 	movi	r3,1
    3f58:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    3f5c:	e0bfff17 	ldw	r2,-4(fp)
    3f60:	10c00d0b 	ldhu	r3,52(r2)
    3f64:	e0bfff17 	ldw	r2,-4(fp)
    3f68:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    3f6c:	e0bfff17 	ldw	r2,-4(fp)
    3f70:	10800d8b 	ldhu	r2,54(r2)
    3f74:	10bfffcc 	andi	r2,r2,65535
    3f78:	10000726 	beq	r2,zero,3f98 <_ZN7XBOXONE10readReportEv+0x3a0>
    3f7c:	e0bfff17 	ldw	r2,-4(fp)
    3f80:	10800e8b 	ldhu	r2,58(r2)
    3f84:	10bfffcc 	andi	r2,r2,65535
    3f88:	1000031e 	bne	r2,zero,3f98 <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    3f8c:	e0bfff17 	ldw	r2,-4(fp)
    3f90:	00c00044 	movi	r3,1
    3f94:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    3f98:	e0bfff17 	ldw	r2,-4(fp)
    3f9c:	10c00d8b 	ldhu	r3,54(r2)
    3fa0:	e0bfff17 	ldw	r2,-4(fp)
    3fa4:	10c00e8d 	sth	r3,58(r2)
    3fa8:	00000106 	br	3fb0 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    3fac:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    3fb0:	e037883a 	mov	sp,fp
    3fb4:	df000017 	ldw	fp,0(sp)
    3fb8:	dec00104 	addi	sp,sp,4
    3fbc:	f800283a 	ret

00003fc0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    3fc0:	defffd04 	addi	sp,sp,-12
    3fc4:	df000215 	stw	fp,8(sp)
    3fc8:	df000204 	addi	fp,sp,8
    3fcc:	e13ffe15 	stw	r4,-8(fp)
    3fd0:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    3fd4:	e0bfff17 	ldw	r2,-4(fp)
    3fd8:	10800218 	cmpnei	r2,r2,8
    3fdc:	1000031e 	bne	r2,zero,3fec <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    3fe0:	e0bffe17 	ldw	r2,-8(fp)
    3fe4:	10800d0b 	ldhu	r2,52(r2)
    3fe8:	00001306 	br	4038 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    3fec:	e0bfff17 	ldw	r2,-4(fp)
    3ff0:	10800258 	cmpnei	r2,r2,9
    3ff4:	1000031e 	bne	r2,zero,4004 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    3ff8:	e0bffe17 	ldw	r2,-8(fp)
    3ffc:	10800d8b 	ldhu	r2,54(r2)
    4000:	00000d06 	br	4038 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    4004:	e0bffe17 	ldw	r2,-8(fp)
    4008:	10c0098b 	ldhu	r3,38(r2)
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10803fcc 	andi	r2,r2,255
    4014:	1089883a 	add	r4,r2,r2
    4018:	008000b4 	movhi	r2,2
    401c:	108d8f84 	addi	r2,r2,13886
    4020:	2085883a 	add	r2,r4,r2
    4024:	1080000b 	ldhu	r2,0(r2)
    4028:	1884703a 	and	r2,r3,r2
    402c:	10bfffcc 	andi	r2,r2,65535
    4030:	1004c03a 	cmpne	r2,r2,zero
    4034:	10803fcc 	andi	r2,r2,255
}
    4038:	e037883a 	mov	sp,fp
    403c:	df000017 	ldw	fp,0(sp)
    4040:	dec00104 	addi	sp,sp,4
    4044:	f800283a 	ret

00004048 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    4048:	defffc04 	addi	sp,sp,-16
    404c:	df000315 	stw	fp,12(sp)
    4050:	df000304 	addi	fp,sp,12
    4054:	e13ffe15 	stw	r4,-8(fp)
    4058:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    405c:	e0bfff17 	ldw	r2,-4(fp)
    4060:	10800218 	cmpnei	r2,r2,8
    4064:	10000a1e 	bne	r2,zero,4090 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    4068:	e0bffe17 	ldw	r2,-8(fp)
    406c:	10800f03 	ldbu	r2,60(r2)
    4070:	10803fcc 	andi	r2,r2,255
    4074:	10000426 	beq	r2,zero,4088 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    4078:	e0bffe17 	ldw	r2,-8(fp)
    407c:	10000f05 	stb	zero,60(r2)
                        return true;
    4080:	00800044 	movi	r2,1
    4084:	00002806 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    4088:	0005883a 	mov	r2,zero
    408c:	00002606 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    4090:	e0bfff17 	ldw	r2,-4(fp)
    4094:	10800258 	cmpnei	r2,r2,9
    4098:	10000a1e 	bne	r2,zero,40c4 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    409c:	e0bffe17 	ldw	r2,-8(fp)
    40a0:	10800f43 	ldbu	r2,61(r2)
    40a4:	10803fcc 	andi	r2,r2,255
    40a8:	10000426 	beq	r2,zero,40bc <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    40ac:	e0bffe17 	ldw	r2,-8(fp)
    40b0:	10000f45 	stb	zero,61(r2)
                        return true;
    40b4:	00800044 	movi	r2,1
    40b8:	00001b06 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    40bc:	0005883a 	mov	r2,zero
    40c0:	00001906 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10803fcc 	andi	r2,r2,255
    40cc:	1087883a 	add	r3,r2,r2
    40d0:	008000b4 	movhi	r2,2
    40d4:	108d8f84 	addi	r2,r2,13886
    40d8:	1885883a 	add	r2,r3,r2
    40dc:	1080000b 	ldhu	r2,0(r2)
    40e0:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    40e4:	e0bffe17 	ldw	r2,-8(fp)
    40e8:	10c00a8b 	ldhu	r3,42(r2)
    40ec:	e0bffd0b 	ldhu	r2,-12(fp)
    40f0:	1884703a 	and	r2,r3,r2
    40f4:	10bfffcc 	andi	r2,r2,65535
    40f8:	1004c03a 	cmpne	r2,r2,zero
    40fc:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    4100:	e0bffe17 	ldw	r2,-8(fp)
    4104:	10800a8b 	ldhu	r2,42(r2)
    4108:	1007883a 	mov	r3,r2
    410c:	e0bffd0b 	ldhu	r2,-12(fp)
    4110:	0084303a 	nor	r2,zero,r2
    4114:	1884703a 	and	r2,r3,r2
    4118:	1007883a 	mov	r3,r2
    411c:	e0bffe17 	ldw	r2,-8(fp)
    4120:	10c00a8d 	sth	r3,42(r2)
        return click;
    4124:	e0bffd83 	ldbu	r2,-10(fp)
}
    4128:	e037883a 	mov	sp,fp
    412c:	df000017 	ldw	fp,0(sp)
    4130:	dec00104 	addi	sp,sp,4
    4134:	f800283a 	ret

00004138 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    4138:	defffd04 	addi	sp,sp,-12
    413c:	df000215 	stw	fp,8(sp)
    4140:	df000204 	addi	fp,sp,8
    4144:	e13ffe15 	stw	r4,-8(fp)
    4148:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    414c:	e0bfff17 	ldw	r2,-4(fp)
    4150:	e0fffe17 	ldw	r3,-8(fp)
    4154:	10800584 	addi	r2,r2,22
    4158:	1085883a 	add	r2,r2,r2
    415c:	1885883a 	add	r2,r3,r2
    4160:	1080000b 	ldhu	r2,0(r2)
}
    4164:	e037883a 	mov	sp,fp
    4168:	df000017 	ldw	fp,0(sp)
    416c:	dec00104 	addi	sp,sp,4
    4170:	f800283a 	ret

00004174 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4174:	defff904 	addi	sp,sp,-28
    4178:	dfc00615 	stw	ra,24(sp)
    417c:	df000515 	stw	fp,20(sp)
    4180:	df000504 	addi	fp,sp,20
    4184:	e13ffd15 	stw	r4,-12(fp)
    4188:	e17ffe15 	stw	r5,-8(fp)
    418c:	3005883a 	mov	r2,r6
    4190:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4194:	e0bffe17 	ldw	r2,-8(fp)
    4198:	10c00084 	addi	r3,r2,2
    419c:	e0bffd17 	ldw	r2,-12(fp)
    41a0:	10801f83 	ldbu	r2,126(r2)
    41a4:	11000044 	addi	r4,r2,1
    41a8:	200b883a 	mov	r5,r4
    41ac:	e13ffd17 	ldw	r4,-12(fp)
    41b0:	21401f85 	stb	r5,126(r4)
    41b4:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    41b8:	e0bffd17 	ldw	r2,-12(fp)
    41bc:	10c00317 	ldw	r3,12(r2)
    41c0:	e0bffd17 	ldw	r2,-12(fp)
    41c4:	10800403 	ldbu	r2,16(r2)
    41c8:	11003fcc 	andi	r4,r2,255
    41cc:	e0bffd17 	ldw	r2,-12(fp)
    41d0:	10800503 	ldbu	r2,20(r2)
    41d4:	11403fcc 	andi	r5,r2,255
    41d8:	e1bfff0b 	ldhu	r6,-4(fp)
    41dc:	e0bffe17 	ldw	r2,-8(fp)
    41e0:	d8800015 	stw	r2,0(sp)
    41e4:	300f883a 	mov	r7,r6
    41e8:	280d883a 	mov	r6,r5
    41ec:	200b883a 	mov	r5,r4
    41f0:	1809883a 	mov	r4,r3
    41f4:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    41f8:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    41fc:	e0bffc03 	ldbu	r2,-16(fp)
}
    4200:	e037883a 	mov	sp,fp
    4204:	dfc00117 	ldw	ra,4(sp)
    4208:	df000017 	ldw	fp,0(sp)
    420c:	dec00204 	addi	sp,sp,8
    4210:	f800283a 	ret

00004214 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    4214:	defff904 	addi	sp,sp,-28
    4218:	dfc00615 	stw	ra,24(sp)
    421c:	df000515 	stw	fp,20(sp)
    4220:	df000504 	addi	fp,sp,20
    4224:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4228:	00800244 	movi	r2,9
    422c:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4230:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4234:	00800244 	movi	r2,9
    4238:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    423c:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4240:	008003c4 	movi	r2,15
    4244:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    4248:	00800104 	movi	r2,4
    424c:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    4250:	00800104 	movi	r2,4
    4254:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    4258:	00800804 	movi	r2,32
    425c:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    4260:	00800804 	movi	r2,32
    4264:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    4268:	00bfe004 	movi	r2,-128
    426c:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4270:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4274:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4278:	01800344 	movi	r6,13
    427c:	e17ffb04 	addi	r5,fp,-20
    4280:	e13fff17 	ldw	r4,-4(fp)
    4284:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	10800817 	ldw	r2,32(r2)
    4290:	10000326 	beq	r2,zero,42a0 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	10800817 	ldw	r2,32(r2)
    429c:	103ee83a 	callr	r2
}
    42a0:	0001883a 	nop
    42a4:	e037883a 	mov	sp,fp
    42a8:	dfc00117 	ldw	ra,4(sp)
    42ac:	df000017 	ldw	fp,0(sp)
    42b0:	dec00204 	addi	sp,sp,8
    42b4:	f800283a 	ret

000042b8 <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    42b8:	defff904 	addi	sp,sp,-28
    42bc:	dfc00615 	stw	ra,24(sp)
    42c0:	df000515 	stw	fp,20(sp)
    42c4:	df000504 	addi	fp,sp,20
    42c8:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    42cc:	00800244 	movi	r2,9
    42d0:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    42d4:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    42d8:	00800244 	movi	r2,9
    42dc:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    42e0:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    42e4:	008003c4 	movi	r2,15
    42e8:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    42ec:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    42f0:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    42f4:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    42f8:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    42fc:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4300:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4304:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4308:	01800344 	movi	r6,13
    430c:	e17ffb04 	addi	r5,fp,-20
    4310:	e13fff17 	ldw	r4,-4(fp)
    4314:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
}
    4318:	0001883a 	nop
    431c:	e037883a 	mov	sp,fp
    4320:	dfc00117 	ldw	ra,4(sp)
    4324:	df000017 	ldw	fp,0(sp)
    4328:	dec00204 	addi	sp,sp,8
    432c:	f800283a 	ret

00004330 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4330:	defff504 	addi	sp,sp,-44
    4334:	dfc00a15 	stw	ra,40(sp)
    4338:	df000915 	stw	fp,36(sp)
    433c:	df000904 	addi	fp,sp,36
    4340:	e13ffb15 	stw	r4,-20(fp)
    4344:	3009883a 	mov	r4,r6
    4348:	3807883a 	mov	r3,r7
    434c:	e0800217 	ldw	r2,8(fp)
    4350:	e17ffc05 	stb	r5,-16(fp)
    4354:	e13ffd05 	stb	r4,-12(fp)
    4358:	e0fffe05 	stb	r3,-8(fp)
    435c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4360:	00800244 	movi	r2,9
    4364:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    4368:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    436c:	00800244 	movi	r2,9
    4370:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4374:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4378:	008003c4 	movi	r2,15
    437c:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    4380:	e0bffc03 	ldbu	r2,-16(fp)
    4384:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    4388:	e0bffd03 	ldbu	r2,-12(fp)
    438c:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    4390:	e0bffe03 	ldbu	r2,-8(fp)
    4394:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    4398:	e0bfff03 	ldbu	r2,-4(fp)
    439c:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    43a0:	00bfffc4 	movi	r2,-1
    43a4:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    43a8:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    43ac:	00bfffc4 	movi	r2,-1
    43b0:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    43b4:	01800344 	movi	r6,13
    43b8:	e17ff704 	addi	r5,fp,-36
    43bc:	e13ffb17 	ldw	r4,-20(fp)
    43c0:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
}
    43c4:	0001883a 	nop
    43c8:	e037883a 	mov	sp,fp
    43cc:	dfc00117 	ldw	ra,4(sp)
    43d0:	df000017 	ldw	fp,0(sp)
    43d4:	dec00204 	addi	sp,sp,8
    43d8:	f800283a 	ret

000043dc <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    43dc:	defffe04 	addi	sp,sp,-8
    43e0:	df000115 	stw	fp,4(sp)
    43e4:	df000104 	addi	fp,sp,4
    43e8:	e13fff15 	stw	r4,-4(fp)
    43ec:	e0bfff17 	ldw	r2,-4(fp)
    43f0:	10000005 	stb	zero,0(r2)
    43f4:	e0bfff17 	ldw	r2,-4(fp)
    43f8:	10c00043 	ldbu	r3,1(r2)
    43fc:	1806703a 	and	r3,r3,zero
    4400:	10c00045 	stb	r3,1(r2)
    4404:	10c00083 	ldbu	r3,2(r2)
    4408:	1806703a 	and	r3,r3,zero
    440c:	10c00085 	stb	r3,2(r2)
    4410:	10c000c3 	ldbu	r3,3(r2)
    4414:	1806703a 	and	r3,r3,zero
    4418:	10c000c5 	stb	r3,3(r2)
    441c:	10c00103 	ldbu	r3,4(r2)
    4420:	1806703a 	and	r3,r3,zero
    4424:	10c00105 	stb	r3,4(r2)
        };
    4428:	0001883a 	nop
    442c:	e037883a 	mov	sp,fp
    4430:	df000017 	ldw	fp,0(sp)
    4434:	dec00104 	addi	sp,sp,4
    4438:	f800283a 	ret

0000443c <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    443c:	defffe04 	addi	sp,sp,-8
    4440:	df000115 	stw	fp,4(sp)
    4444:	df000104 	addi	fp,sp,4
    4448:	e13fff15 	stw	r4,-4(fp)
    444c:	e0bfff17 	ldw	r2,-4(fp)
    4450:	10000015 	stw	zero,0(r2)
    4454:	e0bfff17 	ldw	r2,-4(fp)
    4458:	10000105 	stb	zero,4(r2)
    445c:	e0bfff17 	ldw	r2,-4(fp)
    4460:	10000145 	stb	zero,5(r2)
        };
    4464:	0001883a 	nop
    4468:	e037883a 	mov	sp,fp
    446c:	df000017 	ldw	fp,0(sp)
    4470:	dec00104 	addi	sp,sp,4
    4474:	f800283a 	ret

00004478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    4478:	defffd04 	addi	sp,sp,-12
    447c:	df000215 	stw	fp,8(sp)
    4480:	df000204 	addi	fp,sp,8
    4484:	e13ffe15 	stw	r4,-8(fp)
    4488:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    448c:	e0bfff17 	ldw	r2,-4(fp)
    4490:	10c00043 	ldbu	r3,1(r2)
    4494:	11000083 	ldbu	r4,2(r2)
    4498:	2008923a 	slli	r4,r4,8
    449c:	20c6b03a 	or	r3,r4,r3
    44a0:	110000c3 	ldbu	r4,3(r2)
    44a4:	2008943a 	slli	r4,r4,16
    44a8:	20c6b03a 	or	r3,r4,r3
    44ac:	10800103 	ldbu	r2,4(r2)
    44b0:	1004963a 	slli	r2,r2,24
    44b4:	10c4b03a 	or	r2,r2,r3
    44b8:	1007883a 	mov	r3,r2
    44bc:	e0bffe17 	ldw	r2,-8(fp)
    44c0:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    44c4:	e0bfff17 	ldw	r2,-4(fp)
    44c8:	10c00003 	ldbu	r3,0(r2)
    44cc:	e0bffe17 	ldw	r2,-8(fp)
    44d0:	10c00145 	stb	r3,5(r2)
    44d4:	e0bffe17 	ldw	r2,-8(fp)
    44d8:	10c00143 	ldbu	r3,5(r2)
    44dc:	e0bffe17 	ldw	r2,-8(fp)
    44e0:	10c00105 	stb	r3,4(r2)
        };
    44e4:	0001883a 	nop
    44e8:	e037883a 	mov	sp,fp
    44ec:	df000017 	ldw	fp,0(sp)
    44f0:	dec00104 	addi	sp,sp,4
    44f4:	f800283a 	ret

000044f8 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    44f8:	defffe04 	addi	sp,sp,-8
    44fc:	df000115 	stw	fp,4(sp)
    4500:	df000104 	addi	fp,sp,4
    4504:	e13fff15 	stw	r4,-4(fp)
    4508:	e0bfff17 	ldw	r2,-4(fp)
    450c:	10000015 	stw	zero,0(r2)
    4510:	e0bfff17 	ldw	r2,-4(fp)
    4514:	10000105 	stb	zero,4(r2)
    4518:	e0bfff17 	ldw	r2,-4(fp)
    451c:	1000018d 	sth	zero,6(r2)
        };
    4520:	0001883a 	nop
    4524:	e037883a 	mov	sp,fp
    4528:	df000017 	ldw	fp,0(sp)
    452c:	dec00104 	addi	sp,sp,4
    4530:	f800283a 	ret

00004534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4534:	defffd04 	addi	sp,sp,-12
    4538:	df000215 	stw	fp,8(sp)
    453c:	df000204 	addi	fp,sp,8
    4540:	e13ffe15 	stw	r4,-8(fp)
    4544:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4548:	e0bfff17 	ldw	r2,-4(fp)
    454c:	10c00043 	ldbu	r3,1(r2)
    4550:	11000083 	ldbu	r4,2(r2)
    4554:	2008923a 	slli	r4,r4,8
    4558:	20c6b03a 	or	r3,r4,r3
    455c:	110000c3 	ldbu	r4,3(r2)
    4560:	2008943a 	slli	r4,r4,16
    4564:	20c6b03a 	or	r3,r4,r3
    4568:	10800103 	ldbu	r2,4(r2)
    456c:	1004963a 	slli	r2,r2,24
    4570:	10c4b03a 	or	r2,r2,r3
    4574:	1007883a 	mov	r3,r2
    4578:	e0bffe17 	ldw	r2,-8(fp)
    457c:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    4580:	e0bffe17 	ldw	r2,-8(fp)
    4584:	1000018d 	sth	zero,6(r2)
        };
    4588:	0001883a 	nop
    458c:	e037883a 	mov	sp,fp
    4590:	df000017 	ldw	fp,0(sp)
    4594:	dec00104 	addi	sp,sp,4
    4598:	f800283a 	ret

0000459c <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    459c:	defffb04 	addi	sp,sp,-20
    45a0:	df000415 	stw	fp,16(sp)
    45a4:	df000404 	addi	fp,sp,16
    45a8:	e13ffc15 	stw	r4,-16(fp)
    45ac:	e17ffd15 	stw	r5,-12(fp)
    45b0:	e1bffe15 	stw	r6,-8(fp)
    45b4:	3805883a 	mov	r2,r7
    45b8:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    45bc:	e0bffc17 	ldw	r2,-16(fp)
    45c0:	10800103 	ldbu	r2,4(r2)
    45c4:	10803fcc 	andi	r2,r2,255
    45c8:	10000326 	beq	r2,zero,45d8 <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    45cc:	10800060 	cmpeqi	r2,r2,1
    45d0:	10000a1e 	bne	r2,zero,45fc <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    45d4:	00002906 	br	467c <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    45d8:	e0bffc17 	ldw	r2,-16(fp)
    45dc:	e0ffff0b 	ldhu	r3,-4(fp)
    45e0:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    45e4:	e0bffc17 	ldw	r2,-16(fp)
    45e8:	10800103 	ldbu	r2,4(r2)
    45ec:	10800044 	addi	r2,r2,1
    45f0:	1007883a 	mov	r3,r2
    45f4:	e0bffc17 	ldw	r2,-16(fp)
    45f8:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    45fc:	e0bffc17 	ldw	r2,-16(fp)
    4600:	1080018b 	ldhu	r2,6(r2)
    4604:	10bfffcc 	andi	r2,r2,65535
    4608:	10001626 	beq	r2,zero,4664 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    460c:	e0bffe17 	ldw	r2,-8(fp)
    4610:	1080000b 	ldhu	r2,0(r2)
    4614:	10bfffcc 	andi	r2,r2,65535
    4618:	10001226 	beq	r2,zero,4664 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    461c:	e0bffc17 	ldw	r2,-16(fp)
    4620:	1080018b 	ldhu	r2,6(r2)
    4624:	10bfffc4 	addi	r2,r2,-1
    4628:	1007883a 	mov	r3,r2
    462c:	e0bffc17 	ldw	r2,-16(fp)
    4630:	10c0018d 	sth	r3,6(r2)
    4634:	e0bffd17 	ldw	r2,-12(fp)
    4638:	10800017 	ldw	r2,0(r2)
    463c:	10c00044 	addi	r3,r2,1
    4640:	e0bffd17 	ldw	r2,-12(fp)
    4644:	10c00015 	stw	r3,0(r2)
    4648:	e0bffe17 	ldw	r2,-8(fp)
    464c:	1080000b 	ldhu	r2,0(r2)
    4650:	10bfffc4 	addi	r2,r2,-1
    4654:	1007883a 	mov	r3,r2
    4658:	e0bffe17 	ldw	r2,-8(fp)
    465c:	10c0000d 	sth	r3,0(r2)
    4660:	003fe606 	br	45fc <__alt_data_end+0xfc0045fc>

                                if(!countDown)
    4664:	e0bffc17 	ldw	r2,-16(fp)
    4668:	1080018b 	ldhu	r2,6(r2)
    466c:	10bfffcc 	andi	r2,r2,65535
    4670:	1000021e 	bne	r2,zero,467c <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4674:	e0bffc17 	ldw	r2,-16(fp)
    4678:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    467c:	e0bffc17 	ldw	r2,-16(fp)
    4680:	1080018b 	ldhu	r2,6(r2)
    4684:	10bfffcc 	andi	r2,r2,65535
    4688:	1005003a 	cmpeq	r2,r2,zero
        };
    468c:	e037883a 	mov	sp,fp
    4690:	df000017 	ldw	fp,0(sp)
    4694:	dec00104 	addi	sp,sp,4
    4698:	f800283a 	ret

0000469c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    469c:	defffb04 	addi	sp,sp,-20
    46a0:	df000415 	stw	fp,16(sp)
    46a4:	df000404 	addi	fp,sp,16
    46a8:	e13ffc15 	stw	r4,-16(fp)
    46ac:	2809883a 	mov	r4,r5
    46b0:	3007883a 	mov	r3,r6
    46b4:	3805883a 	mov	r2,r7
    46b8:	e13ffd05 	stb	r4,-12(fp)
    46bc:	e0fffe05 	stb	r3,-8(fp)
    46c0:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    46c4:	0005883a 	mov	r2,zero
        }
    46c8:	e037883a 	mov	sp,fp
    46cc:	df000017 	ldw	fp,0(sp)
    46d0:	dec00104 	addi	sp,sp,4
    46d4:	f800283a 	ret

000046d8 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    46d8:	defffb04 	addi	sp,sp,-20
    46dc:	df000415 	stw	fp,16(sp)
    46e0:	df000404 	addi	fp,sp,16
    46e4:	e13ffc15 	stw	r4,-16(fp)
    46e8:	2809883a 	mov	r4,r5
    46ec:	3007883a 	mov	r3,r6
    46f0:	3805883a 	mov	r2,r7
    46f4:	e13ffd05 	stb	r4,-12(fp)
    46f8:	e0fffe05 	stb	r3,-8(fp)
    46fc:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4700:	0005883a 	mov	r2,zero
        }
    4704:	e037883a 	mov	sp,fp
    4708:	df000017 	ldw	fp,0(sp)
    470c:	dec00104 	addi	sp,sp,4
    4710:	f800283a 	ret

00004714 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4714:	defffe04 	addi	sp,sp,-8
    4718:	df000115 	stw	fp,4(sp)
    471c:	df000104 	addi	fp,sp,4
    4720:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4724:	0005883a 	mov	r2,zero
        }
    4728:	e037883a 	mov	sp,fp
    472c:	df000017 	ldw	fp,0(sp)
    4730:	dec00104 	addi	sp,sp,4
    4734:	f800283a 	ret

00004738 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4738:	defffe04 	addi	sp,sp,-8
    473c:	df000115 	stw	fp,4(sp)
    4740:	df000104 	addi	fp,sp,4
    4744:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4748:	0005883a 	mov	r2,zero
        }
    474c:	e037883a 	mov	sp,fp
    4750:	df000017 	ldw	fp,0(sp)
    4754:	dec00104 	addi	sp,sp,4
    4758:	f800283a 	ret

0000475c <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    475c:	defffe04 	addi	sp,sp,-8
    4760:	df000115 	stw	fp,4(sp)
    4764:	df000104 	addi	fp,sp,4
    4768:	e13fff15 	stw	r4,-4(fp)
                return 0;
    476c:	0005883a 	mov	r2,zero
        }
    4770:	e037883a 	mov	sp,fp
    4774:	df000017 	ldw	fp,0(sp)
    4778:	dec00104 	addi	sp,sp,4
    477c:	f800283a 	ret

00004780 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4780:	defffd04 	addi	sp,sp,-12
    4784:	df000215 	stw	fp,8(sp)
    4788:	df000204 	addi	fp,sp,8
    478c:	e13ffe15 	stw	r4,-8(fp)
    4790:	2805883a 	mov	r2,r5
    4794:	e0bfff05 	stb	r2,-4(fp)
                return;
    4798:	0001883a 	nop
        } // Note used for hubs only!
    479c:	e037883a 	mov	sp,fp
    47a0:	df000017 	ldw	fp,0(sp)
    47a4:	dec00104 	addi	sp,sp,4
    47a8:	f800283a 	ret

000047ac <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    47ac:	defffc04 	addi	sp,sp,-16
    47b0:	df000315 	stw	fp,12(sp)
    47b4:	df000304 	addi	fp,sp,12
    47b8:	e13ffd15 	stw	r4,-12(fp)
    47bc:	2807883a 	mov	r3,r5
    47c0:	3005883a 	mov	r2,r6
    47c4:	e0fffe0d 	sth	r3,-8(fp)
    47c8:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    47cc:	0005883a 	mov	r2,zero
        }
    47d0:	e037883a 	mov	sp,fp
    47d4:	df000017 	ldw	fp,0(sp)
    47d8:	dec00104 	addi	sp,sp,4
    47dc:	f800283a 	ret

000047e0 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    47e0:	defffd04 	addi	sp,sp,-12
    47e4:	df000215 	stw	fp,8(sp)
    47e8:	df000204 	addi	fp,sp,8
    47ec:	e13ffe15 	stw	r4,-8(fp)
    47f0:	2805883a 	mov	r2,r5
    47f4:	e0bfff05 	stb	r2,-4(fp)
                return false;
    47f8:	0005883a 	mov	r2,zero
        }
    47fc:	e037883a 	mov	sp,fp
    4800:	df000017 	ldw	fp,0(sp)
    4804:	dec00104 	addi	sp,sp,4
    4808:	f800283a 	ret

0000480c <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    480c:	defffd04 	addi	sp,sp,-12
    4810:	df000215 	stw	fp,8(sp)
    4814:	df000204 	addi	fp,sp,8
    4818:	e13ffe15 	stw	r4,-8(fp)
    481c:	2805883a 	mov	r2,r5
    4820:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4824:	00800044 	movi	r2,1
        }
    4828:	e037883a 	mov	sp,fp
    482c:	df000017 	ldw	fp,0(sp)
    4830:	dec00104 	addi	sp,sp,4
    4834:	f800283a 	ret

00004838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4838:	defffc04 	addi	sp,sp,-16
    483c:	df000315 	stw	fp,12(sp)
    4840:	df000304 	addi	fp,sp,12
    4844:	e13ffe15 	stw	r4,-8(fp)
    4848:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    484c:	e03ffd05 	stb	zero,-12(fp)
    4850:	e0bffd03 	ldbu	r2,-12(fp)
    4854:	10800428 	cmpgeui	r2,r2,16
    4858:	1000161e 	bne	r2,zero,48b4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    485c:	e0bffd03 	ldbu	r2,-12(fp)
    4860:	e0fffe17 	ldw	r3,-8(fp)
    4864:	10800784 	addi	r2,r2,30
    4868:	1085883a 	add	r2,r2,r2
    486c:	1085883a 	add	r2,r2,r2
    4870:	1885883a 	add	r2,r3,r2
    4874:	10800017 	ldw	r2,0(r2)
    4878:	10000a1e 	bne	r2,zero,48a4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    487c:	e0bffd03 	ldbu	r2,-12(fp)
    4880:	e0fffe17 	ldw	r3,-8(fp)
    4884:	10800784 	addi	r2,r2,30
    4888:	1085883a 	add	r2,r2,r2
    488c:	1085883a 	add	r2,r2,r2
    4890:	1885883a 	add	r2,r3,r2
    4894:	e0ffff17 	ldw	r3,-4(fp)
    4898:	10c00015 	stw	r3,0(r2)
                                return 0;
    489c:	0005883a 	mov	r2,zero
    48a0:	00000506 	br	48b8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    48a4:	e0bffd03 	ldbu	r2,-12(fp)
    48a8:	10800044 	addi	r2,r2,1
    48ac:	e0bffd05 	stb	r2,-12(fp)
    48b0:	003fe706 	br	4850 <__alt_data_end+0xfc004850>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    48b4:	00bff4c4 	movi	r2,-45
        };
    48b8:	e037883a 	mov	sp,fp
    48bc:	df000017 	ldw	fp,0(sp)
    48c0:	dec00104 	addi	sp,sp,4
    48c4:	f800283a 	ret

000048c8 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    48c8:	defffa04 	addi	sp,sp,-24
    48cc:	df000515 	stw	fp,20(sp)
    48d0:	df000504 	addi	fp,sp,20
    48d4:	e13ffb15 	stw	r4,-20(fp)
    48d8:	3009883a 	mov	r4,r6
    48dc:	3807883a 	mov	r3,r7
    48e0:	e0800117 	ldw	r2,4(fp)
    48e4:	e17ffc05 	stb	r5,-16(fp)
    48e8:	e13ffd05 	stb	r4,-12(fp)
    48ec:	e0fffe05 	stb	r3,-8(fp)
    48f0:	e0bfff05 	stb	r2,-4(fp)
        };
    48f4:	0001883a 	nop
    48f8:	e037883a 	mov	sp,fp
    48fc:	df000017 	ldw	fp,0(sp)
    4900:	dec00104 	addi	sp,sp,4
    4904:	f800283a 	ret

00004908 <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4908:	defffe04 	addi	sp,sp,-8
    490c:	df000115 	stw	fp,4(sp)
    4910:	df000104 	addi	fp,sp,4
    4914:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4918:	e0bfff17 	ldw	r2,-4(fp)
    491c:	10800403 	ldbu	r2,16(r2)
        };
    4920:	e037883a 	mov	sp,fp
    4924:	df000017 	ldw	fp,0(sp)
    4928:	dec00104 	addi	sp,sp,4
    492c:	f800283a 	ret

00004930 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4930:	defffe04 	addi	sp,sp,-8
    4934:	df000115 	stw	fp,4(sp)
    4938:	df000104 	addi	fp,sp,4
    493c:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4940:	e0bfff17 	ldw	r2,-4(fp)
    4944:	10800943 	ldbu	r2,37(r2)
        };
    4948:	e037883a 	mov	sp,fp
    494c:	df000017 	ldw	fp,0(sp)
    4950:	dec00104 	addi	sp,sp,4
    4954:	f800283a 	ret

00004958 <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4958:	defffc04 	addi	sp,sp,-16
    495c:	df000315 	stw	fp,12(sp)
    4960:	df000304 	addi	fp,sp,12
    4964:	e13ffd15 	stw	r4,-12(fp)
    4968:	2807883a 	mov	r3,r5
    496c:	3005883a 	mov	r2,r6
    4970:	e0fffe0d 	sth	r3,-8(fp)
    4974:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4978:	e0bffe0b 	ldhu	r2,-8(fp)
    497c:	108117a0 	cmpeqi	r2,r2,1118
    4980:	10000f1e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4984:	e0bffe0b 	ldhu	r2,-8(fp)
    4988:	1081ce20 	cmpeqi	r2,r2,1848
    498c:	10000c1e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4990:	e0bffe0b 	ldhu	r2,-8(fp)
    4994:	10839be0 	cmpeqi	r2,r2,3695
    4998:	1000091e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    499c:	e0bffe0b 	ldhu	r2,-8(fp)
    49a0:	1083c360 	cmpeqi	r2,r2,3853
    49a4:	1000061e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    49a8:	e0bffe0b 	ldhu	r2,-8(fp)
    49ac:	10854ca0 	cmpeqi	r2,r2,5426
    49b0:	1000031e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    49b4:	e0bffe0b 	ldhu	r2,-8(fp)
    49b8:	10893198 	cmpnei	r2,r2,9414
    49bc:	10002c1e 	bne	r2,zero,4a70 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    49c0:	e0bfff0b 	ldhu	r2,-4(fp)
    49c4:	1080b460 	cmpeqi	r2,r2,721
    49c8:	1000271e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    49cc:	e0bfff0b 	ldhu	r2,-4(fp)
    49d0:	1080b760 	cmpeqi	r2,r2,733
    49d4:	1000241e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49d8:	e0bfff0b 	ldhu	r2,-4(fp)
    49dc:	1080b8e0 	cmpeqi	r2,r2,739
    49e0:	1000211e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49e4:	e0bfff0b 	ldhu	r2,-4(fp)
    49e8:	1080baa0 	cmpeqi	r2,r2,746
    49ec:	10001e1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49f0:	e0bfff0b 	ldhu	r2,-4(fp)
    49f4:	10928060 	cmpeqi	r2,r2,18945
    49f8:	10001b1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    49fc:	e0bfff0b 	ldhu	r2,-4(fp)
    4a00:	10804e60 	cmpeqi	r2,r2,313
    4a04:	1000181e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a08:	e0bfff0b 	ldhu	r2,-4(fp)
    4a0c:	108051a0 	cmpeqi	r2,r2,326
    4a10:	1000151e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a14:	e0bfff0b 	ldhu	r2,-4(fp)
    4a18:	108019e0 	cmpeqi	r2,r2,103
    4a1c:	1000121e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a20:	e0bfff0b 	ldhu	r2,-4(fp)
    4a24:	108280e0 	cmpeqi	r2,r2,2563
    4a28:	10000f1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4a2c:	e0bfff0b 	ldhu	r2,-4(fp)
    4a30:	109506a0 	cmpeqi	r2,r2,21530
    4a34:	10000c1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a38:	e0bfff0b 	ldhu	r2,-4(fp)
    4a3c:	10950aa0 	cmpeqi	r2,r2,21546
    4a40:	1000091e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a44:	e0bfff0b 	ldhu	r2,-4(fp)
    4a48:	10950ea0 	cmpeqi	r2,r2,21562
    4a4c:	1000061e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a50:	e0bfff0b 	ldhu	r2,-4(fp)
    4a54:	1082c2a0 	cmpeqi	r2,r2,2826
    4a58:	1000031e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4a5c:	e0bfff0b 	ldhu	r2,-4(fp)
    4a60:	1082c498 	cmpnei	r2,r2,2834
    4a64:	1000021e 	bne	r2,zero,4a70 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4a68:	00800044 	movi	r2,1
    4a6c:	00000106 	br	4a74 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4a70:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4a74:	e037883a 	mov	sp,fp
    4a78:	df000017 	ldw	fp,0(sp)
    4a7c:	dec00104 	addi	sp,sp,4
    4a80:	f800283a 	ret

00004a84 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4a84:	defffe04 	addi	sp,sp,-8
    4a88:	df000115 	stw	fp,4(sp)
    4a8c:	df000104 	addi	fp,sp,4
    4a90:	e13fff15 	stw	r4,-4(fp)
    4a94:	008000b4 	movhi	r2,2
    4a98:	108db404 	addi	r2,r2,14032
    4a9c:	e0ffff17 	ldw	r3,-4(fp)
    4aa0:	18800015 	stw	r2,0(r3)
    4aa4:	0001883a 	nop
    4aa8:	e037883a 	mov	sp,fp
    4aac:	df000017 	ldw	fp,0(sp)
    4ab0:	dec00104 	addi	sp,sp,4
    4ab4:	f800283a 	ret

00004ab8 <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4ab8:	defffe04 	addi	sp,sp,-8
    4abc:	df000115 	stw	fp,4(sp)
    4ac0:	df000104 	addi	fp,sp,4
    4ac4:	e13fff15 	stw	r4,-4(fp)
    4ac8:	008000b4 	movhi	r2,2
    4acc:	108dae04 	addi	r2,r2,14008
    4ad0:	e0ffff17 	ldw	r3,-4(fp)
    4ad4:	18800015 	stw	r2,0(r3)
    4ad8:	0001883a 	nop
    4adc:	e037883a 	mov	sp,fp
    4ae0:	df000017 	ldw	fp,0(sp)
    4ae4:	dec00104 	addi	sp,sp,4
    4ae8:	f800283a 	ret

00004aec <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4aec:	defffe04 	addi	sp,sp,-8
    4af0:	df000115 	stw	fp,4(sp)
    4af4:	df000104 	addi	fp,sp,4
    4af8:	e13fff15 	stw	r4,-4(fp)
    4afc:	008000b4 	movhi	r2,2
    4b00:	108db104 	addi	r2,r2,14020
    4b04:	e0ffff17 	ldw	r3,-4(fp)
    4b08:	18800015 	stw	r2,0(r3)
    4b0c:	0001883a 	nop
    4b10:	e037883a 	mov	sp,fp
    4b14:	df000017 	ldw	fp,0(sp)
    4b18:	dec00104 	addi	sp,sp,4
    4b1c:	f800283a 	ret

00004b20 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4b20:	defffc04 	addi	sp,sp,-16
    4b24:	dfc00315 	stw	ra,12(sp)
    4b28:	df000215 	stw	fp,8(sp)
    4b2c:	df000204 	addi	fp,sp,8
    4b30:	e13ffe15 	stw	r4,-8(fp)
    4b34:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4b38:	e0bffe17 	ldw	r2,-8(fp)
    4b3c:	1009883a 	mov	r4,r2
    4b40:	0004aec0 	call	4aec <_ZN13USBReadParserC1Ev>
    4b44:	008000b4 	movhi	r2,2
    4b48:	108dab04 	addi	r2,r2,13996
    4b4c:	e0fffe17 	ldw	r3,-8(fp)
    4b50:	18800015 	stw	r2,0(r3)
    4b54:	e0bffe17 	ldw	r2,-8(fp)
    4b58:	e0ffff17 	ldw	r3,-4(fp)
    4b5c:	10c00115 	stw	r3,4(r2)
    4b60:	e0bffe17 	ldw	r2,-8(fp)
    4b64:	10800204 	addi	r2,r2,8
    4b68:	1009883a 	mov	r4,r2
    4b6c:	00043dc0 	call	43dc <_ZN16MultiValueBufferC1Ev>
    4b70:	e0bffe17 	ldw	r2,-8(fp)
    4b74:	10800404 	addi	r2,r2,16
    4b78:	1009883a 	mov	r4,r2
    4b7c:	000443c0 	call	443c <_ZN20MultiByteValueParserC1Ev>
    4b80:	e0bffe17 	ldw	r2,-8(fp)
    4b84:	10800604 	addi	r2,r2,24
    4b88:	1009883a 	mov	r4,r2
    4b8c:	00044f80 	call	44f8 <_ZN11ByteSkipperC1Ev>
    4b90:	e0bffe17 	ldw	r2,-8(fp)
    4b94:	10000c05 	stb	zero,48(r2)
    4b98:	e0bffe17 	ldw	r2,-8(fp)
    4b9c:	10000c45 	stb	zero,49(r2)
    4ba0:	e0bffe17 	ldw	r2,-8(fp)
    4ba4:	10000c85 	stb	zero,50(r2)
    4ba8:	e0bffe17 	ldw	r2,-8(fp)
    4bac:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    4bb0:	e0bffe17 	ldw	r2,-8(fp)
    4bb4:	10c00804 	addi	r3,r2,32
    4bb8:	e0bffe17 	ldw	r2,-8(fp)
    4bbc:	19803fcc 	andi	r6,r3,255
    4bc0:	11000243 	ldbu	r4,9(r2)
    4bc4:	2008703a 	and	r4,r4,zero
    4bc8:	200b883a 	mov	r5,r4
    4bcc:	3009883a 	mov	r4,r6
    4bd0:	2908b03a 	or	r4,r5,r4
    4bd4:	11000245 	stb	r4,9(r2)
    4bd8:	1808d23a 	srli	r4,r3,8
    4bdc:	21803fcc 	andi	r6,r4,255
    4be0:	11000283 	ldbu	r4,10(r2)
    4be4:	2008703a 	and	r4,r4,zero
    4be8:	200b883a 	mov	r5,r4
    4bec:	3009883a 	mov	r4,r6
    4bf0:	2908b03a 	or	r4,r5,r4
    4bf4:	11000285 	stb	r4,10(r2)
    4bf8:	1808d43a 	srli	r4,r3,16
    4bfc:	21803fcc 	andi	r6,r4,255
    4c00:	110002c3 	ldbu	r4,11(r2)
    4c04:	2008703a 	and	r4,r4,zero
    4c08:	200b883a 	mov	r5,r4
    4c0c:	3009883a 	mov	r4,r6
    4c10:	2908b03a 	or	r4,r5,r4
    4c14:	110002c5 	stb	r4,11(r2)
    4c18:	180ad63a 	srli	r5,r3,24
    4c1c:	10c00303 	ldbu	r3,12(r2)
    4c20:	1806703a 	and	r3,r3,zero
    4c24:	1809883a 	mov	r4,r3
    4c28:	2807883a 	mov	r3,r5
    4c2c:	20c6b03a 	or	r3,r4,r3
    4c30:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    4c34:	e0bffe17 	ldw	r2,-8(fp)
    4c38:	10c00404 	addi	r3,r2,16
    4c3c:	e0bffe17 	ldw	r2,-8(fp)
    4c40:	10800204 	addi	r2,r2,8
    4c44:	100b883a 	mov	r5,r2
    4c48:	1809883a 	mov	r4,r3
    4c4c:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    4c50:	e0bffe17 	ldw	r2,-8(fp)
    4c54:	10c00604 	addi	r3,r2,24
    4c58:	e0bffe17 	ldw	r2,-8(fp)
    4c5c:	10800204 	addi	r2,r2,8
    4c60:	100b883a 	mov	r5,r2
    4c64:	1809883a 	mov	r4,r3
    4c68:	00045340 	call	4534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    4c6c:	0001883a 	nop
    4c70:	e037883a 	mov	sp,fp
    4c74:	dfc00117 	ldw	ra,4(sp)
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00204 	addi	sp,sp,8
    4c80:	f800283a 	ret

00004c84 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    4c84:	defff804 	addi	sp,sp,-32
    4c88:	dfc00715 	stw	ra,28(sp)
    4c8c:	df000615 	stw	fp,24(sp)
    4c90:	df000604 	addi	fp,sp,24
    4c94:	e13ffc15 	stw	r4,-16(fp)
    4c98:	2805883a 	mov	r2,r5
    4c9c:	e1bffe15 	stw	r6,-8(fp)
    4ca0:	e1ffff15 	stw	r7,-4(fp)
    4ca4:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    4ca8:	e0bffd0b 	ldhu	r2,-12(fp)
    4cac:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    4cb0:	e0bffe17 	ldw	r2,-8(fp)
    4cb4:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    4cb8:	e0bffa0b 	ldhu	r2,-24(fp)
    4cbc:	10bfffcc 	andi	r2,r2,65535
    4cc0:	10000a26 	beq	r2,zero,4cec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    4cc4:	e0bffb04 	addi	r2,fp,-20
    4cc8:	e1bffa04 	addi	r6,fp,-24
    4ccc:	100b883a 	mov	r5,r2
    4cd0:	e13ffc17 	ldw	r4,-16(fp)
    4cd4:	0004d000 	call	4d00 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    4cd8:	1080005c 	xori	r2,r2,1
    4cdc:	10803fcc 	andi	r2,r2,255
    4ce0:	1000011e 	bne	r2,zero,4ce8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    4ce4:	003ff406 	br	4cb8 <__alt_data_end+0xfc004cb8>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    4ce8:	0001883a 	nop
}
    4cec:	e037883a 	mov	sp,fp
    4cf0:	dfc00117 	ldw	ra,4(sp)
    4cf4:	df000017 	ldw	fp,0(sp)
    4cf8:	dec00204 	addi	sp,sp,8
    4cfc:	f800283a 	ret

00004d00 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    4d00:	defff604 	addi	sp,sp,-40
    4d04:	dfc00915 	stw	ra,36(sp)
    4d08:	df000815 	stw	fp,32(sp)
    4d0c:	df000804 	addi	fp,sp,32
    4d10:	e13ffc15 	stw	r4,-16(fp)
    4d14:	e17ffd15 	stw	r5,-12(fp)
    4d18:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	10800804 	addi	r2,r2,32
    4d24:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    4d28:	e0bffc17 	ldw	r2,-16(fp)
    4d2c:	10800804 	addi	r2,r2,32
    4d30:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    4d34:	e0bffc17 	ldw	r2,-16(fp)
    4d38:	10800c03 	ldbu	r2,48(r2)
    4d3c:	10803fcc 	andi	r2,r2,255
    4d40:	10c00168 	cmpgeui	r3,r2,5
    4d44:	1801141e 	bne	r3,zero,5198 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    4d48:	100690ba 	slli	r3,r2,2
    4d4c:	00800034 	movhi	r2,0
    4d50:	10935804 	addi	r2,r2,19808
    4d54:	1885883a 	add	r2,r3,r2
    4d58:	10800017 	ldw	r2,0(r2)
    4d5c:	1000683a 	jmp	r2
    4d60:	00004d74 	movhi	zero,309
    4d64:	00004da8 	cmpgeui	zero,zero,310
    4d68:	00004e30 	cmpltui	zero,zero,312
    4d6c:	00004ec4 	movi	zero,315
    4d70:	00004f30 	cmpltui	zero,zero,316
                case 0:
                        theBuffer.valueSize = 2;
    4d74:	e0bffc17 	ldw	r2,-16(fp)
    4d78:	00c00084 	movi	r3,2
    4d7c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    4d80:	e0bffc17 	ldw	r2,-16(fp)
    4d84:	10c00404 	addi	r3,r2,16
    4d88:	e0bffc17 	ldw	r2,-16(fp)
    4d8c:	10800204 	addi	r2,r2,8
    4d90:	100b883a 	mov	r5,r2
    4d94:	1809883a 	mov	r4,r3
    4d98:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    4d9c:	e0bffc17 	ldw	r2,-16(fp)
    4da0:	00c00044 	movi	r3,1
    4da4:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    4da8:	e0bffc17 	ldw	r2,-16(fp)
    4dac:	10800404 	addi	r2,r2,16
    4db0:	e1bffe17 	ldw	r6,-8(fp)
    4db4:	e17ffd17 	ldw	r5,-12(fp)
    4db8:	1009883a 	mov	r4,r2
    4dbc:	000626c0 	call	626c <_ZN20MultiByteValueParser5ParseEPPhPt>
    4dc0:	1080005c 	xori	r2,r2,1
    4dc4:	10803fcc 	andi	r2,r2,255
    4dc8:	10000226 	beq	r2,zero,4dd4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    4dcc:	0005883a 	mov	r2,zero
    4dd0:	0000f206 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    4dd4:	e0bffc17 	ldw	r2,-16(fp)
    4dd8:	10c00217 	ldw	r3,8(r2)
    4ddc:	1806d23a 	srli	r3,r3,8
    4de0:	10800317 	ldw	r2,12(r2)
    4de4:	10803fcc 	andi	r2,r2,255
    4de8:	1004963a 	slli	r2,r2,24
    4dec:	10c4b03a 	or	r2,r2,r3
    4df0:	10c00003 	ldbu	r3,0(r2)
    4df4:	e0bffc17 	ldw	r2,-16(fp)
    4df8:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    4dfc:	e0bffc17 	ldw	r2,-16(fp)
    4e00:	10c00217 	ldw	r3,8(r2)
    4e04:	1806d23a 	srli	r3,r3,8
    4e08:	10800317 	ldw	r2,12(r2)
    4e0c:	10803fcc 	andi	r2,r2,255
    4e10:	1004963a 	slli	r2,r2,24
    4e14:	10c4b03a 	or	r2,r2,r3
    4e18:	10c00043 	ldbu	r3,1(r2)
    4e1c:	e0bffc17 	ldw	r2,-16(fp)
    4e20:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    4e24:	e0bffc17 	ldw	r2,-16(fp)
    4e28:	00c00084 	movi	r3,2
    4e2c:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    4e30:	e0bffc17 	ldw	r2,-16(fp)
    4e34:	10800804 	addi	r2,r2,32
    4e38:	10c00084 	addi	r3,r2,2
    4e3c:	e0bffc17 	ldw	r2,-16(fp)
    4e40:	19803fcc 	andi	r6,r3,255
    4e44:	11000243 	ldbu	r4,9(r2)
    4e48:	2008703a 	and	r4,r4,zero
    4e4c:	200b883a 	mov	r5,r4
    4e50:	3009883a 	mov	r4,r6
    4e54:	2908b03a 	or	r4,r5,r4
    4e58:	11000245 	stb	r4,9(r2)
    4e5c:	1808d23a 	srli	r4,r3,8
    4e60:	21803fcc 	andi	r6,r4,255
    4e64:	11000283 	ldbu	r4,10(r2)
    4e68:	2008703a 	and	r4,r4,zero
    4e6c:	200b883a 	mov	r5,r4
    4e70:	3009883a 	mov	r4,r6
    4e74:	2908b03a 	or	r4,r5,r4
    4e78:	11000285 	stb	r4,10(r2)
    4e7c:	1808d43a 	srli	r4,r3,16
    4e80:	21803fcc 	andi	r6,r4,255
    4e84:	110002c3 	ldbu	r4,11(r2)
    4e88:	2008703a 	and	r4,r4,zero
    4e8c:	200b883a 	mov	r5,r4
    4e90:	3009883a 	mov	r4,r6
    4e94:	2908b03a 	or	r4,r5,r4
    4e98:	110002c5 	stb	r4,11(r2)
    4e9c:	180ad63a 	srli	r5,r3,24
    4ea0:	10c00303 	ldbu	r3,12(r2)
    4ea4:	1806703a 	and	r3,r3,zero
    4ea8:	1809883a 	mov	r4,r3
    4eac:	2807883a 	mov	r3,r5
    4eb0:	20c6b03a 	or	r3,r4,r3
    4eb4:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    4eb8:	e0bffc17 	ldw	r2,-16(fp)
    4ebc:	00c000c4 	movi	r3,3
    4ec0:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    4ec4:	e0bffc17 	ldw	r2,-16(fp)
    4ec8:	10800c83 	ldbu	r2,50(r2)
    4ecc:	10803fcc 	andi	r2,r2,255
    4ed0:	10c00120 	cmpeqi	r3,r2,4
    4ed4:	1800021e 	bne	r3,zero,4ee0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    4ed8:	10800148 	cmpgei	r2,r2,5
    4edc:	00000306 	br	4eec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    4ee0:	e0bffc17 	ldw	r2,-16(fp)
    4ee4:	10000cc5 	stb	zero,51(r2)
                                        break;
    4ee8:	00000106 	br	4ef0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    4eec:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    4ef0:	e0bffc17 	ldw	r2,-16(fp)
    4ef4:	10800c43 	ldbu	r2,49(r2)
    4ef8:	10bfff84 	addi	r2,r2,-2
    4efc:	1007883a 	mov	r3,r2
    4f00:	e0bffc17 	ldw	r2,-16(fp)
    4f04:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    4f08:	e0bffc17 	ldw	r2,-16(fp)
    4f0c:	10c00404 	addi	r3,r2,16
    4f10:	e0bffc17 	ldw	r2,-16(fp)
    4f14:	10800204 	addi	r2,r2,8
    4f18:	100b883a 	mov	r5,r2
    4f1c:	1809883a 	mov	r4,r3
    4f20:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    4f24:	e0bffc17 	ldw	r2,-16(fp)
    4f28:	00c00104 	movi	r3,4
    4f2c:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    4f30:	e0bffc17 	ldw	r2,-16(fp)
    4f34:	10800c83 	ldbu	r2,50(r2)
    4f38:	10803fcc 	andi	r2,r2,255
    4f3c:	10c00120 	cmpeqi	r3,r2,4
    4f40:	1800141e 	bne	r3,zero,4f94 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    4f44:	10c00160 	cmpeqi	r3,r2,5
    4f48:	1800311e 	bne	r3,zero,5010 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    4f4c:	108000a0 	cmpeqi	r2,r2,2
    4f50:	10005a26 	beq	r2,zero,50bc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    4f54:	e0bffc17 	ldw	r2,-16(fp)
    4f58:	10800404 	addi	r2,r2,16
    4f5c:	e1bffe17 	ldw	r6,-8(fp)
    4f60:	e17ffd17 	ldw	r5,-12(fp)
    4f64:	1009883a 	mov	r4,r2
    4f68:	000626c0 	call	626c <_ZN20MultiByteValueParser5ParseEPPhPt>
    4f6c:	1080005c 	xori	r2,r2,1
    4f70:	10803fcc 	andi	r2,r2,255
    4f74:	10000226 	beq	r2,zero,4f80 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    4f78:	0005883a 	mov	r2,zero
    4f7c:	00008706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    4f80:	e0bffa17 	ldw	r2,-24(fp)
    4f84:	10c00143 	ldbu	r3,5(r2)
    4f88:	e0bffc17 	ldw	r2,-16(fp)
    4f8c:	10c00d05 	stb	r3,52(r2)
                                        break;
    4f90:	00005e06 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    4f94:	e0bffc17 	ldw	r2,-16(fp)
    4f98:	10800404 	addi	r2,r2,16
    4f9c:	e1bffe17 	ldw	r6,-8(fp)
    4fa0:	e17ffd17 	ldw	r5,-12(fp)
    4fa4:	1009883a 	mov	r4,r2
    4fa8:	000626c0 	call	626c <_ZN20MultiByteValueParser5ParseEPPhPt>
    4fac:	1080005c 	xori	r2,r2,1
    4fb0:	10803fcc 	andi	r2,r2,255
    4fb4:	10000226 	beq	r2,zero,4fc0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    4fb8:	0005883a 	mov	r2,zero
    4fbc:	00007706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    4fc0:	e0bffc17 	ldw	r2,-16(fp)
    4fc4:	10800e03 	ldbu	r2,56(r2)
    4fc8:	10803fcc 	andi	r2,r2,255
    4fcc:	10004c1e 	bne	r2,zero,5100 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    4fd0:	e0bffc17 	ldw	r2,-16(fp)
    4fd4:	00c00044 	movi	r3,1
    4fd8:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    4fdc:	e0bffb17 	ldw	r2,-20(fp)
    4fe0:	10c00083 	ldbu	r3,2(r2)
    4fe4:	e0bffc17 	ldw	r2,-16(fp)
    4fe8:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    4fec:	e0bffb17 	ldw	r2,-20(fp)
    4ff0:	10c000c3 	ldbu	r3,3(r2)
    4ff4:	e0bffc17 	ldw	r2,-16(fp)
    4ff8:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    4ffc:	e0bffb17 	ldw	r2,-20(fp)
    5000:	10c001c3 	ldbu	r3,7(r2)
    5004:	e0bffc17 	ldw	r2,-16(fp)
    5008:	10c00d45 	stb	r3,53(r2)
                                        break;
    500c:	00003f06 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    5010:	e0bffc17 	ldw	r2,-16(fp)
    5014:	10800404 	addi	r2,r2,16
    5018:	e1bffe17 	ldw	r6,-8(fp)
    501c:	e17ffd17 	ldw	r5,-12(fp)
    5020:	1009883a 	mov	r4,r2
    5024:	000626c0 	call	626c <_ZN20MultiByteValueParser5ParseEPPhPt>
    5028:	1080005c 	xori	r2,r2,1
    502c:	10803fcc 	andi	r2,r2,255
    5030:	10000226 	beq	r2,zero,503c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5034:	0005883a 	mov	r2,zero
    5038:	00005806 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    503c:	e0bffc17 	ldw	r2,-16(fp)
    5040:	10800cc3 	ldbu	r2,51(r2)
    5044:	10803fcc 	andi	r2,r2,255
    5048:	10002f26 	beq	r2,zero,5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    504c:	e0bffc17 	ldw	r2,-16(fp)
    5050:	10800117 	ldw	r2,4(r2)
    5054:	10002c26 	beq	r2,zero,5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    5058:	e0bffc17 	ldw	r2,-16(fp)
    505c:	10800117 	ldw	r2,4(r2)
    5060:	10800017 	ldw	r2,0(r2)
    5064:	10800017 	ldw	r2,0(r2)
    5068:	e0fffc17 	ldw	r3,-16(fp)
    506c:	1a000117 	ldw	r8,4(r3)
    5070:	e0fffc17 	ldw	r3,-16(fp)
    5074:	18c00d03 	ldbu	r3,52(r3)
    5078:	19403fcc 	andi	r5,r3,255
    507c:	e0fffc17 	ldw	r3,-16(fp)
    5080:	18c00d83 	ldbu	r3,54(r3)
    5084:	19803fcc 	andi	r6,r3,255
    5088:	e0fffc17 	ldw	r3,-16(fp)
    508c:	18c00dc3 	ldbu	r3,55(r3)
    5090:	19c03fcc 	andi	r7,r3,255
    5094:	e0fffc17 	ldw	r3,-16(fp)
    5098:	18c00d43 	ldbu	r3,53(r3)
    509c:	18c03fcc 	andi	r3,r3,255
    50a0:	e13ffc17 	ldw	r4,-16(fp)
    50a4:	21000804 	addi	r4,r4,32
    50a8:	d9000115 	stw	r4,4(sp)
    50ac:	d8c00015 	stw	r3,0(sp)
    50b0:	4009883a 	mov	r4,r8
    50b4:	103ee83a 	callr	r2
                                        break;
    50b8:	00001306 	br	5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    50bc:	e0bffc17 	ldw	r2,-16(fp)
    50c0:	10c00604 	addi	r3,r2,24
    50c4:	e0bffc17 	ldw	r2,-16(fp)
    50c8:	10800c43 	ldbu	r2,49(r2)
    50cc:	10803fcc 	andi	r2,r2,255
    50d0:	10bfff84 	addi	r2,r2,-2
    50d4:	10bfffcc 	andi	r2,r2,65535
    50d8:	100f883a 	mov	r7,r2
    50dc:	e1bffe17 	ldw	r6,-8(fp)
    50e0:	e17ffd17 	ldw	r5,-12(fp)
    50e4:	1809883a 	mov	r4,r3
    50e8:	000459c0 	call	459c <_ZN11ByteSkipper4SkipEPPhPtt>
    50ec:	1080005c 	xori	r2,r2,1
    50f0:	10803fcc 	andi	r2,r2,255
    50f4:	10000526 	beq	r2,zero,510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    50f8:	0005883a 	mov	r2,zero
    50fc:	00002706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    5100:	0001883a 	nop
    5104:	00000106 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    5108:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    510c:	e0bffc17 	ldw	r2,-16(fp)
    5110:	10c00804 	addi	r3,r2,32
    5114:	e0bffc17 	ldw	r2,-16(fp)
    5118:	19803fcc 	andi	r6,r3,255
    511c:	11000243 	ldbu	r4,9(r2)
    5120:	2008703a 	and	r4,r4,zero
    5124:	200b883a 	mov	r5,r4
    5128:	3009883a 	mov	r4,r6
    512c:	2908b03a 	or	r4,r5,r4
    5130:	11000245 	stb	r4,9(r2)
    5134:	1808d23a 	srli	r4,r3,8
    5138:	21803fcc 	andi	r6,r4,255
    513c:	11000283 	ldbu	r4,10(r2)
    5140:	2008703a 	and	r4,r4,zero
    5144:	200b883a 	mov	r5,r4
    5148:	3009883a 	mov	r4,r6
    514c:	2908b03a 	or	r4,r5,r4
    5150:	11000285 	stb	r4,10(r2)
    5154:	1808d43a 	srli	r4,r3,16
    5158:	21803fcc 	andi	r6,r4,255
    515c:	110002c3 	ldbu	r4,11(r2)
    5160:	2008703a 	and	r4,r4,zero
    5164:	200b883a 	mov	r5,r4
    5168:	3009883a 	mov	r4,r6
    516c:	2908b03a 	or	r4,r5,r4
    5170:	110002c5 	stb	r4,11(r2)
    5174:	180ad63a 	srli	r5,r3,24
    5178:	10c00303 	ldbu	r3,12(r2)
    517c:	1806703a 	and	r3,r3,zero
    5180:	1809883a 	mov	r4,r3
    5184:	2807883a 	mov	r3,r5
    5188:	20c6b03a 	or	r3,r4,r3
    518c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    5190:	e0bffc17 	ldw	r2,-16(fp)
    5194:	10000c05 	stb	zero,48(r2)
        }
        return true;
    5198:	00800044 	movi	r2,1
}
    519c:	e037883a 	mov	sp,fp
    51a0:	dfc00117 	ldw	ra,4(sp)
    51a4:	df000017 	ldw	fp,0(sp)
    51a8:	dec00204 	addi	sp,sp,8
    51ac:	f800283a 	ret

000051b0 <_Z8set_notehh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 note, alt_u8 vel) {
    51b0:	defffc04 	addi	sp,sp,-16
    51b4:	df000315 	stw	fp,12(sp)
    51b8:	df000304 	addi	fp,sp,12
    51bc:	2007883a 	mov	r3,r4
    51c0:	2805883a 	mov	r2,r5
    51c4:	e0fffe05 	stb	r3,-8(fp)
    51c8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(vel == 0x00) {
    51cc:	e0bfff03 	ldbu	r2,-4(fp)
    51d0:	1000081e 	bne	r2,zero,51f4 <_Z8set_notehh+0x44>
		set_val = synth->KEY[note];
    51d4:	d0e00d17 	ldw	r3,-32716(gp)
    51d8:	e0bffe03 	ldbu	r2,-8(fp)
    51dc:	1085883a 	add	r2,r2,r2
    51e0:	1085883a 	add	r2,r2,r2
    51e4:	1885883a 	add	r2,r3,r2
    51e8:	10800017 	ldw	r2,0(r2)
    51ec:	e0bffd15 	stw	r2,-12(fp)
    51f0:	00000306 	br	5200 <_Z8set_notehh+0x50>
	}
	else {
		set_val = 0x80 + vel;
    51f4:	e0bfff03 	ldbu	r2,-4(fp)
    51f8:	10802004 	addi	r2,r2,128
    51fc:	e0bffd15 	stw	r2,-12(fp)
	}

	synth->KEY[note] = set_val;
    5200:	d0e00d17 	ldw	r3,-32716(gp)
    5204:	e0bffe03 	ldbu	r2,-8(fp)
    5208:	1085883a 	add	r2,r2,r2
    520c:	1085883a 	add	r2,r2,r2
    5210:	1885883a 	add	r2,r3,r2
    5214:	e0fffd17 	ldw	r3,-12(fp)
    5218:	10c00015 	stw	r3,0(r2)
}
    521c:	0001883a 	nop
    5220:	e037883a 	mov	sp,fp
    5224:	df000017 	ldw	fp,0(sp)
    5228:	dec00104 	addi	sp,sp,4
    522c:	f800283a 	ret

00005230 <_Z8set_adsrhm>:

void set_adsr(alt_u8 par, alt_u32 val) {
    5230:	defffd04 	addi	sp,sp,-12
    5234:	df000215 	stw	fp,8(sp)
    5238:	df000204 	addi	fp,sp,8
    523c:	2005883a 	mov	r2,r4
    5240:	e17fff15 	stw	r5,-4(fp)
    5244:	e0bffe05 	stb	r2,-8(fp)
	synth->ADSR[par] = val;
    5248:	d0e00d17 	ldw	r3,-32716(gp)
    524c:	e0bffe03 	ldbu	r2,-8(fp)
    5250:	10802004 	addi	r2,r2,128
    5254:	1085883a 	add	r2,r2,r2
    5258:	1085883a 	add	r2,r2,r2
    525c:	1885883a 	add	r2,r3,r2
    5260:	e0ffff17 	ldw	r3,-4(fp)
    5264:	10c00015 	stw	r3,0(r2)
}
    5268:	0001883a 	nop
    526c:	e037883a 	mov	sp,fp
    5270:	df000017 	ldw	fp,0(sp)
    5274:	dec00104 	addi	sp,sp,4
    5278:	f800283a 	ret

0000527c <_Z9calc_adsrttttff>:

void calc_adsr(alt_u16 att_m_seconds, alt_u16 dec_m_seconds, alt_u16 sus_m_seconds, alt_u16 rel_m_seconds, float peak_att, float peak_sus) {
    527c:	defff004 	addi	sp,sp,-64
    5280:	dfc00f15 	stw	ra,60(sp)
    5284:	df000e15 	stw	fp,56(sp)
    5288:	df000e04 	addi	fp,sp,56
    528c:	2011883a 	mov	r8,r4
    5290:	2809883a 	mov	r4,r5
    5294:	3007883a 	mov	r3,r6
    5298:	3805883a 	mov	r2,r7
    529c:	e23ffc0d 	sth	r8,-16(fp)
    52a0:	e13ffd0d 	sth	r4,-12(fp)
    52a4:	e0fffe0d 	sth	r3,-8(fp)
    52a8:	e0bfff0d 	sth	r2,-4(fp)

	alt_u32 PEAK_ATT, PEAK_SUS, ATT_STEP, DEC_STEP, SUS_STEP, REL_STEP;
	alt_u32 ATT_LEN, DEC_LEN, SUS_LEN, REL_LEN;

	if (att_m_seconds > 5000) {
    52ac:	e0bffc0b 	ldhu	r2,-16(fp)
    52b0:	1084e270 	cmpltui	r2,r2,5001
    52b4:	1000041e 	bne	r2,zero,52c8 <_Z9calc_adsrttttff+0x4c>
		printf("ERROR: Requested attack length is too long.\n");
    52b8:	010000b4 	movhi	r4,2
    52bc:	210de304 	addi	r4,r4,14220
    52c0:	000ea400 	call	ea40 <puts>
		return;
    52c4:	0000a706 	br	5564 <_Z9calc_adsrttttff+0x2e8>
	}
	if (dec_m_seconds > 5000) {
    52c8:	e0bffd0b 	ldhu	r2,-12(fp)
    52cc:	1084e270 	cmpltui	r2,r2,5001
    52d0:	1000041e 	bne	r2,zero,52e4 <_Z9calc_adsrttttff+0x68>
		printf("ERROR: Requested decay length is too long.\n");
    52d4:	010000b4 	movhi	r4,2
    52d8:	210dee04 	addi	r4,r4,14264
    52dc:	000ea400 	call	ea40 <puts>
		return;
    52e0:	0000a006 	br	5564 <_Z9calc_adsrttttff+0x2e8>
	}
	if (sus_m_seconds > 20000) {
    52e4:	e0bffe0b 	ldhu	r2,-8(fp)
    52e8:	10938870 	cmpltui	r2,r2,20001
    52ec:	1000041e 	bne	r2,zero,5300 <_Z9calc_adsrttttff+0x84>
		printf("ERROR: Requested sustain length is too long.\n");
    52f0:	010000b4 	movhi	r4,2
    52f4:	210df904 	addi	r4,r4,14308
    52f8:	000ea400 	call	ea40 <puts>
		return;
    52fc:	00009906 	br	5564 <_Z9calc_adsrttttff+0x2e8>
	}
	if (sus_m_seconds < rel_m_seconds) {
    5300:	e0fffe0b 	ldhu	r3,-8(fp)
    5304:	e0bfff0b 	ldhu	r2,-4(fp)
    5308:	1880042e 	bgeu	r3,r2,531c <_Z9calc_adsrttttff+0xa0>
		printf("ERROR: Requested sustain length must be longer than release length.\n");
    530c:	010000b4 	movhi	r4,2
    5310:	210e0504 	addi	r4,r4,14356
    5314:	000ea400 	call	ea40 <puts>
		return;
    5318:	00009206 	br	5564 <_Z9calc_adsrttttff+0x2e8>
	}
	if (rel_m_seconds > 10000) {
    531c:	e0bfff0b 	ldhu	r2,-4(fp)
    5320:	1089c470 	cmpltui	r2,r2,10001
    5324:	1000041e 	bne	r2,zero,5338 <_Z9calc_adsrttttff+0xbc>
		printf("ERROR: Requested release length is too long.\n");
    5328:	010000b4 	movhi	r4,2
    532c:	210e1604 	addi	r4,r4,14424
    5330:	000ea400 	call	ea40 <puts>
		return;
    5334:	00008b06 	br	5564 <_Z9calc_adsrttttff+0x2e8>
	}
	if (peak_att > (float) 1.9) {
    5338:	014ffcf4 	movhi	r5,16371
    533c:	294cccc4 	addi	r5,r5,13107
    5340:	e1000217 	ldw	r4,8(fp)
    5344:	000ce280 	call	ce28 <__gesf2>
    5348:	0080040e 	bge	zero,r2,535c <_Z9calc_adsrttttff+0xe0>
		printf("ERROR: Requested peak attack amplitude is too large.\n");
    534c:	010000b4 	movhi	r4,2
    5350:	210e2204 	addi	r4,r4,14472
    5354:	000ea400 	call	ea40 <puts>
		return;
    5358:	00008206 	br	5564 <_Z9calc_adsrttttff+0x2e8>
	}
	if (peak_sus >= peak_att) {
    535c:	e1400217 	ldw	r5,8(fp)
    5360:	e1000317 	ldw	r4,12(fp)
    5364:	000ce280 	call	ce28 <__gesf2>
    5368:	10000416 	blt	r2,zero,537c <_Z9calc_adsrttttff+0x100>
		printf("ERROR: Requested sustain amplitude is too large.\n");
    536c:	010000b4 	movhi	r4,2
    5370:	210e3004 	addi	r4,r4,14528
    5374:	000ea400 	call	ea40 <puts>
		return;
    5378:	00007a06 	br	5564 <_Z9calc_adsrttttff+0x2e8>
	}

	PEAK_ATT = peak_att * (alt_u32) 0x80000;
    537c:	01524034 	movhi	r5,18688
    5380:	e1000217 	ldw	r4,8(fp)
    5384:	000cee40 	call	cee4 <__mulsf3>
    5388:	1007883a 	mov	r3,r2
    538c:	1805883a 	mov	r2,r3
    5390:	1009883a 	mov	r4,r2
    5394:	000cbec0 	call	cbec <__fixunssfsi>
    5398:	e0bff215 	stw	r2,-56(fp)
	PEAK_SUS = peak_sus * (alt_u32) 0x80000;
    539c:	01524034 	movhi	r5,18688
    53a0:	e1000317 	ldw	r4,12(fp)
    53a4:	000cee40 	call	cee4 <__mulsf3>
    53a8:	1007883a 	mov	r3,r2
    53ac:	1805883a 	mov	r2,r3
    53b0:	1009883a 	mov	r4,r2
    53b4:	000cbec0 	call	cbec <__fixunssfsi>
    53b8:	e0bff315 	stw	r2,-52(fp)
	ATT_LEN = (att_m_seconds * F_S) / 1000;
    53bc:	e0bffc0b 	ldhu	r2,-16(fp)
    53c0:	016b1114 	movui	r5,44100
    53c4:	1009883a 	mov	r4,r2
    53c8:	000ce000 	call	ce00 <__mulsi3>
    53cc:	0140fa04 	movi	r5,1000
    53d0:	1009883a 	mov	r4,r2
    53d4:	000cc4c0 	call	cc4c <__divsi3>
    53d8:	e0bff415 	stw	r2,-48(fp)
	ATT_STEP = PEAK_ATT / ATT_LEN;
    53dc:	e17ff417 	ldw	r5,-48(fp)
    53e0:	e13ff217 	ldw	r4,-56(fp)
    53e4:	000cd440 	call	cd44 <__udivsi3>
    53e8:	e0bff515 	stw	r2,-44(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
    53ec:	e0bffd0b 	ldhu	r2,-12(fp)
    53f0:	016b1114 	movui	r5,44100
    53f4:	1009883a 	mov	r4,r2
    53f8:	000ce000 	call	ce00 <__mulsi3>
    53fc:	0140fa04 	movi	r5,1000
    5400:	1009883a 	mov	r4,r2
    5404:	000cc4c0 	call	cc4c <__divsi3>
    5408:	e0bff615 	stw	r2,-40(fp)
	DEC_STEP = (PEAK_ATT - PEAK_SUS) / DEC_LEN;
    540c:	e0fff217 	ldw	r3,-56(fp)
    5410:	e0bff317 	ldw	r2,-52(fp)
    5414:	1885c83a 	sub	r2,r3,r2
    5418:	e17ff617 	ldw	r5,-40(fp)
    541c:	1009883a 	mov	r4,r2
    5420:	000cd440 	call	cd44 <__udivsi3>
    5424:	e0bff715 	stw	r2,-36(fp)
	SUS_LEN = (sus_m_seconds * F_S) / 1000;
    5428:	e0bffe0b 	ldhu	r2,-8(fp)
    542c:	016b1114 	movui	r5,44100
    5430:	1009883a 	mov	r4,r2
    5434:	000ce000 	call	ce00 <__mulsi3>
    5438:	0140fa04 	movi	r5,1000
    543c:	1009883a 	mov	r4,r2
    5440:	000cc4c0 	call	cc4c <__divsi3>
    5444:	e0bff815 	stw	r2,-32(fp)
	SUS_STEP = PEAK_SUS / SUS_LEN;
    5448:	e17ff817 	ldw	r5,-32(fp)
    544c:	e13ff317 	ldw	r4,-52(fp)
    5450:	000cd440 	call	cd44 <__udivsi3>
    5454:	e0bff915 	stw	r2,-28(fp)
	REL_LEN = (rel_m_seconds * F_S) / 1000;
    5458:	e0bfff0b 	ldhu	r2,-4(fp)
    545c:	016b1114 	movui	r5,44100
    5460:	1009883a 	mov	r4,r2
    5464:	000ce000 	call	ce00 <__mulsi3>
    5468:	0140fa04 	movi	r5,1000
    546c:	1009883a 	mov	r4,r2
    5470:	000cc4c0 	call	cc4c <__divsi3>
    5474:	e0bffa15 	stw	r2,-24(fp)
	REL_STEP = PEAK_SUS / REL_LEN;
    5478:	e17ffa17 	ldw	r5,-24(fp)
    547c:	e13ff317 	ldw	r4,-52(fp)
    5480:	000cd440 	call	cd44 <__udivsi3>
    5484:	e0bffb15 	stw	r2,-20(fp)

	set_adsr(PEAK_A, PEAK_ATT);
    5488:	e17ff217 	ldw	r5,-56(fp)
    548c:	0009883a 	mov	r4,zero
    5490:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("PEAK_ATT Set:  %X\n", synth->ADSR[PEAK_A]);
    5494:	d0a00d17 	ldw	r2,-32716(gp)
    5498:	10808017 	ldw	r2,512(r2)
    549c:	100b883a 	mov	r5,r2
    54a0:	010000b4 	movhi	r4,2
    54a4:	210e3d04 	addi	r4,r4,14580
    54a8:	000e9240 	call	e924 <printf>
	set_adsr(ATT_S, ATT_STEP);
    54ac:	e17ff517 	ldw	r5,-44(fp)
    54b0:	01000044 	movi	r4,1
    54b4:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("ATT_STEP Set:  %X\n", synth->ADSR[ATT_S]);
    54b8:	d0a00d17 	ldw	r2,-32716(gp)
    54bc:	10808117 	ldw	r2,516(r2)
    54c0:	100b883a 	mov	r5,r2
    54c4:	010000b4 	movhi	r4,2
    54c8:	210e4204 	addi	r4,r4,14600
    54cc:	000e9240 	call	e924 <printf>
	set_adsr(DEC_S, DEC_STEP);
    54d0:	e17ff717 	ldw	r5,-36(fp)
    54d4:	01000084 	movi	r4,2
    54d8:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("DEC_STEP Set:  %X\n", synth->ADSR[DEC_S]);
    54dc:	d0a00d17 	ldw	r2,-32716(gp)
    54e0:	10808217 	ldw	r2,520(r2)
    54e4:	100b883a 	mov	r5,r2
    54e8:	010000b4 	movhi	r4,2
    54ec:	210e4704 	addi	r4,r4,14620
    54f0:	000e9240 	call	e924 <printf>
	set_adsr(PEAK_S, PEAK_SUS);
    54f4:	e17ff317 	ldw	r5,-52(fp)
    54f8:	010000c4 	movi	r4,3
    54fc:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("PEAK_S Set:  %X\n", synth->ADSR[PEAK_S]);
    5500:	d0a00d17 	ldw	r2,-32716(gp)
    5504:	10808317 	ldw	r2,524(r2)
    5508:	100b883a 	mov	r5,r2
    550c:	010000b4 	movhi	r4,2
    5510:	210e4c04 	addi	r4,r4,14640
    5514:	000e9240 	call	e924 <printf>
	set_adsr(SUS_S, SUS_STEP);
    5518:	e17ff917 	ldw	r5,-28(fp)
    551c:	01000104 	movi	r4,4
    5520:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("SUS_STEP Set:  %X\n", synth->ADSR[SUS_S]);
    5524:	d0a00d17 	ldw	r2,-32716(gp)
    5528:	10808417 	ldw	r2,528(r2)
    552c:	100b883a 	mov	r5,r2
    5530:	010000b4 	movhi	r4,2
    5534:	210e5104 	addi	r4,r4,14660
    5538:	000e9240 	call	e924 <printf>
	set_adsr(REL_S, REL_STEP);
    553c:	e17ffb17 	ldw	r5,-20(fp)
    5540:	01000144 	movi	r4,5
    5544:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("REL_STEP Set:  %X\n", synth->ADSR[REL_S]);
    5548:	d0a00d17 	ldw	r2,-32716(gp)
    554c:	10808517 	ldw	r2,532(r2)
    5550:	100b883a 	mov	r5,r2
    5554:	010000b4 	movhi	r4,2
    5558:	210e5604 	addi	r4,r4,14680
    555c:	000e9240 	call	e924 <printf>

	return;
    5560:	0001883a 	nop
}
    5564:	e037883a 	mov	sp,fp
    5568:	dfc00117 	ldw	ra,4(sp)
    556c:	df000017 	ldw	fp,0(sp)
    5570:	dec00204 	addi	sp,sp,8
    5574:	f800283a 	ret

00005578 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5578:	defff904 	addi	sp,sp,-28
    557c:	dfc00615 	stw	ra,24(sp)
    5580:	df000515 	stw	fp,20(sp)
    5584:	df000504 	addi	fp,sp,20
    5588:	e13ffc15 	stw	r4,-16(fp)
    558c:	e17ffd15 	stw	r5,-12(fp)
    5590:	3007883a 	mov	r3,r6
    5594:	3805883a 	mov	r2,r7
    5598:	e0fffe05 	stb	r3,-8(fp)
    559c:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    55a0:	e0800217 	ldw	r2,8(fp)
    55a4:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    55a8:	e0bffc17 	ldw	r2,-16(fp)
    55ac:	10800117 	ldw	r2,4(r2)
    55b0:	1080004c 	andi	r2,r2,1
    55b4:	1007883a 	mov	r3,r2
    55b8:	e0bffb17 	ldw	r2,-20(fp)
    55bc:	10800003 	ldbu	r2,0(r2)
    55c0:	1080004c 	andi	r2,r2,1
    55c4:	18c03fcc 	andi	r3,r3,255
    55c8:	10803fcc 	andi	r2,r2,255
    55cc:	18801426 	beq	r3,r2,5620 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    55d0:	e0bffb17 	ldw	r2,-20(fp)
    55d4:	10800003 	ldbu	r2,0(r2)
    55d8:	1080004c 	andi	r2,r2,1
    55dc:	10803fcc 	andi	r2,r2,255
    55e0:	10000826 	beq	r2,zero,5604 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    55e4:	e0bffc17 	ldw	r2,-16(fp)
    55e8:	10800017 	ldw	r2,0(r2)
    55ec:	10800304 	addi	r2,r2,12
    55f0:	10800017 	ldw	r2,0(r2)
    55f4:	e17ffb17 	ldw	r5,-20(fp)
    55f8:	e13ffc17 	ldw	r4,-16(fp)
    55fc:	103ee83a 	callr	r2
    5600:	00000706 	br	5620 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    5604:	e0bffc17 	ldw	r2,-16(fp)
    5608:	10800017 	ldw	r2,0(r2)
    560c:	10800204 	addi	r2,r2,8
    5610:	10800017 	ldw	r2,0(r2)
    5614:	e17ffb17 	ldw	r5,-20(fp)
    5618:	e13ffc17 	ldw	r4,-16(fp)
    561c:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    5620:	e0bffc17 	ldw	r2,-16(fp)
    5624:	10800117 	ldw	r2,4(r2)
    5628:	1004d07a 	srli	r2,r2,1
    562c:	1080004c 	andi	r2,r2,1
    5630:	1007883a 	mov	r3,r2
    5634:	e0bffb17 	ldw	r2,-20(fp)
    5638:	10800003 	ldbu	r2,0(r2)
    563c:	1004d07a 	srli	r2,r2,1
    5640:	1080004c 	andi	r2,r2,1
    5644:	18c03fcc 	andi	r3,r3,255
    5648:	10803fcc 	andi	r2,r2,255
    564c:	18801426 	beq	r3,r2,56a0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    5650:	e0bffb17 	ldw	r2,-20(fp)
    5654:	10800003 	ldbu	r2,0(r2)
    5658:	1080008c 	andi	r2,r2,2
    565c:	10803fcc 	andi	r2,r2,255
    5660:	10000826 	beq	r2,zero,5684 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    5664:	e0bffc17 	ldw	r2,-16(fp)
    5668:	10800017 	ldw	r2,0(r2)
    566c:	10800504 	addi	r2,r2,20
    5670:	10800017 	ldw	r2,0(r2)
    5674:	e17ffb17 	ldw	r5,-20(fp)
    5678:	e13ffc17 	ldw	r4,-16(fp)
    567c:	103ee83a 	callr	r2
    5680:	00000706 	br	56a0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    5684:	e0bffc17 	ldw	r2,-16(fp)
    5688:	10800017 	ldw	r2,0(r2)
    568c:	10800404 	addi	r2,r2,16
    5690:	10800017 	ldw	r2,0(r2)
    5694:	e17ffb17 	ldw	r5,-20(fp)
    5698:	e13ffc17 	ldw	r4,-16(fp)
    569c:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    56a0:	e0bffc17 	ldw	r2,-16(fp)
    56a4:	10800117 	ldw	r2,4(r2)
    56a8:	1004d0ba 	srli	r2,r2,2
    56ac:	1080004c 	andi	r2,r2,1
    56b0:	1007883a 	mov	r3,r2
    56b4:	e0bffb17 	ldw	r2,-20(fp)
    56b8:	10800003 	ldbu	r2,0(r2)
    56bc:	1004d0ba 	srli	r2,r2,2
    56c0:	1080004c 	andi	r2,r2,1
    56c4:	18c03fcc 	andi	r3,r3,255
    56c8:	10803fcc 	andi	r2,r2,255
    56cc:	18801426 	beq	r3,r2,5720 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    56d0:	e0bffb17 	ldw	r2,-20(fp)
    56d4:	10800003 	ldbu	r2,0(r2)
    56d8:	1080010c 	andi	r2,r2,4
    56dc:	10803fcc 	andi	r2,r2,255
    56e0:	10000826 	beq	r2,zero,5704 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    56e4:	e0bffc17 	ldw	r2,-16(fp)
    56e8:	10800017 	ldw	r2,0(r2)
    56ec:	10800704 	addi	r2,r2,28
    56f0:	10800017 	ldw	r2,0(r2)
    56f4:	e17ffb17 	ldw	r5,-20(fp)
    56f8:	e13ffc17 	ldw	r4,-16(fp)
    56fc:	103ee83a 	callr	r2
    5700:	00000706 	br	5720 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    5704:	e0bffc17 	ldw	r2,-16(fp)
    5708:	10800017 	ldw	r2,0(r2)
    570c:	10800604 	addi	r2,r2,24
    5710:	10800017 	ldw	r2,0(r2)
    5714:	e17ffb17 	ldw	r5,-20(fp)
    5718:	e13ffc17 	ldw	r4,-16(fp)
    571c:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    5720:	e0bffb17 	ldw	r2,-20(fp)
    5724:	10800043 	ldbu	r2,1(r2)
    5728:	10803fcc 	andi	r2,r2,255
    572c:	1080201c 	xori	r2,r2,128
    5730:	10bfe004 	addi	r2,r2,-128
    5734:	1000061e 	bne	r2,zero,5750 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    5738:	e0bffb17 	ldw	r2,-20(fp)
    573c:	10800083 	ldbu	r2,2(r2)
    5740:	10803fcc 	andi	r2,r2,255
    5744:	1080201c 	xori	r2,r2,128
    5748:	10bfe004 	addi	r2,r2,-128
    574c:	10000726 	beq	r2,zero,576c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    5750:	e0bffc17 	ldw	r2,-16(fp)
    5754:	10800017 	ldw	r2,0(r2)
    5758:	10800104 	addi	r2,r2,4
    575c:	10800017 	ldw	r2,0(r2)
    5760:	e17ffb17 	ldw	r5,-20(fp)
    5764:	e13ffc17 	ldw	r4,-16(fp)
    5768:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    576c:	e0800217 	ldw	r2,8(fp)
    5770:	10c00003 	ldbu	r3,0(r2)
    5774:	e0bffc17 	ldw	r2,-16(fp)
    5778:	10c00105 	stb	r3,4(r2)
#endif

};
    577c:	0001883a 	nop
    5780:	e037883a 	mov	sp,fp
    5784:	dfc00117 	ldw	ra,4(sp)
    5788:	df000017 	ldw	fp,0(sp)
    578c:	dec00204 	addi	sp,sp,8
    5790:	f800283a 	ret

00005794 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5794:	defff804 	addi	sp,sp,-32
    5798:	dfc00715 	stw	ra,28(sp)
    579c:	df000615 	stw	fp,24(sp)
    57a0:	df000604 	addi	fp,sp,24
    57a4:	e13ffc15 	stw	r4,-16(fp)
    57a8:	e17ffd15 	stw	r5,-12(fp)
    57ac:	3007883a 	mov	r3,r6
    57b0:	3805883a 	mov	r2,r7
    57b4:	e0fffe05 	stb	r3,-8(fp)
    57b8:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    57bc:	e0800217 	ldw	r2,8(fp)
    57c0:	10800084 	addi	r2,r2,2
    57c4:	10800003 	ldbu	r2,0(r2)
    57c8:	10803fcc 	andi	r2,r2,255
    57cc:	10800058 	cmpnei	r2,r2,1
    57d0:	10009926 	beq	r2,zero,5a38 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    57d4:	e0bffc17 	ldw	r2,-16(fp)
    57d8:	10c00103 	ldbu	r3,4(r2)
    57dc:	e0800217 	ldw	r2,8(fp)
    57e0:	10800003 	ldbu	r2,0(r2)
    57e4:	18c03fcc 	andi	r3,r3,255
    57e8:	10803fcc 	andi	r2,r2,255
    57ec:	18800e26 	beq	r3,r2,5828 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    57f0:	e0bffc17 	ldw	r2,-16(fp)
    57f4:	10800017 	ldw	r2,0(r2)
    57f8:	10800204 	addi	r2,r2,8
    57fc:	10800017 	ldw	r2,0(r2)
    5800:	e0fffc17 	ldw	r3,-16(fp)
    5804:	18c00103 	ldbu	r3,4(r3)
    5808:	19003fcc 	andi	r4,r3,255
    580c:	e0c00217 	ldw	r3,8(fp)
    5810:	18c00003 	ldbu	r3,0(r3)
    5814:	18c03fcc 	andi	r3,r3,255
    5818:	180d883a 	mov	r6,r3
    581c:	200b883a 	mov	r5,r4
    5820:	e13ffc17 	ldw	r4,-16(fp)
    5824:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    5828:	00800084 	movi	r2,2
    582c:	e0bffa05 	stb	r2,-24(fp)
    5830:	e0bffa03 	ldbu	r2,-24(fp)
    5834:	10800228 	cmpgeui	r2,r2,8
    5838:	10006e1e 	bne	r2,zero,59f4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    583c:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    5840:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    5844:	00800084 	movi	r2,2
    5848:	e0bffac5 	stb	r2,-21(fp)
    584c:	e0bffac3 	ldbu	r2,-21(fp)
    5850:	10800228 	cmpgeui	r2,r2,8
    5854:	10002f1e 	bne	r2,zero,5914 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    5858:	e0bffa03 	ldbu	r2,-24(fp)
    585c:	e0c00217 	ldw	r3,8(fp)
    5860:	1885883a 	add	r2,r3,r2
    5864:	11000003 	ldbu	r4,0(r2)
    5868:	e0bffac3 	ldbu	r2,-21(fp)
    586c:	e0fffc17 	ldw	r3,-16(fp)
    5870:	1885883a 	add	r2,r3,r2
    5874:	10800104 	addi	r2,r2,4
    5878:	10800003 	ldbu	r2,0(r2)
    587c:	20c03fcc 	andi	r3,r4,255
    5880:	10803fcc 	andi	r2,r2,255
    5884:	1880091e 	bne	r3,r2,58ac <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    5888:	e0bffa03 	ldbu	r2,-24(fp)
    588c:	e0c00217 	ldw	r3,8(fp)
    5890:	1885883a 	add	r2,r3,r2
    5894:	10800003 	ldbu	r2,0(r2)
    5898:	10803fcc 	andi	r2,r2,255
    589c:	10800060 	cmpeqi	r2,r2,1
    58a0:	1000021e 	bne	r2,zero,58ac <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    58a4:	00800044 	movi	r2,1
    58a8:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    58ac:	e0bffac3 	ldbu	r2,-21(fp)
    58b0:	e0c00217 	ldw	r3,8(fp)
    58b4:	1885883a 	add	r2,r3,r2
    58b8:	11000003 	ldbu	r4,0(r2)
    58bc:	e0bffa03 	ldbu	r2,-24(fp)
    58c0:	e0fffc17 	ldw	r3,-16(fp)
    58c4:	1885883a 	add	r2,r3,r2
    58c8:	10800104 	addi	r2,r2,4
    58cc:	10800003 	ldbu	r2,0(r2)
    58d0:	20c03fcc 	andi	r3,r4,255
    58d4:	10803fcc 	andi	r2,r2,255
    58d8:	18800a1e 	bne	r3,r2,5904 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    58dc:	e0bffa03 	ldbu	r2,-24(fp)
    58e0:	e0fffc17 	ldw	r3,-16(fp)
    58e4:	1885883a 	add	r2,r3,r2
    58e8:	10800104 	addi	r2,r2,4
    58ec:	10800003 	ldbu	r2,0(r2)
    58f0:	10803fcc 	andi	r2,r2,255
    58f4:	10800060 	cmpeqi	r2,r2,1
    58f8:	1000021e 	bne	r2,zero,5904 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    58fc:	00800044 	movi	r2,1
    5900:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    5904:	e0bffac3 	ldbu	r2,-21(fp)
    5908:	10800044 	addi	r2,r2,1
    590c:	e0bffac5 	stb	r2,-21(fp)
    5910:	003fce06 	br	584c <__alt_data_end+0xfc00584c>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    5914:	e0bffa43 	ldbu	r2,-23(fp)
    5918:	1080005c 	xori	r2,r2,1
    591c:	10803fcc 	andi	r2,r2,255
    5920:	10001c26 	beq	r2,zero,5994 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    5924:	e0bffc17 	ldw	r2,-16(fp)
    5928:	10800017 	ldw	r2,0(r2)
    592c:	10800104 	addi	r2,r2,4
    5930:	10800017 	ldw	r2,0(r2)
    5934:	e0fffa03 	ldbu	r3,-24(fp)
    5938:	e1000217 	ldw	r4,8(fp)
    593c:	20c7883a 	add	r3,r4,r3
    5940:	18c00003 	ldbu	r3,0(r3)
    5944:	18c03fcc 	andi	r3,r3,255
    5948:	180d883a 	mov	r6,r3
    594c:	e17ffd17 	ldw	r5,-12(fp)
    5950:	e13ffc17 	ldw	r4,-16(fp)
    5954:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    5958:	e0bffc17 	ldw	r2,-16(fp)
    595c:	10800017 	ldw	r2,0(r2)
    5960:	10800304 	addi	r2,r2,12
    5964:	10800017 	ldw	r2,0(r2)
    5968:	e0c00217 	ldw	r3,8(fp)
    596c:	18c00003 	ldbu	r3,0(r3)
    5970:	19403fcc 	andi	r5,r3,255
    5974:	e0fffa03 	ldbu	r3,-24(fp)
    5978:	e1000217 	ldw	r4,8(fp)
    597c:	20c7883a 	add	r3,r4,r3
    5980:	18c00003 	ldbu	r3,0(r3)
    5984:	18c03fcc 	andi	r3,r3,255
    5988:	180d883a 	mov	r6,r3
    598c:	e13ffc17 	ldw	r4,-16(fp)
    5990:	103ee83a 	callr	r2
                }
                if (!up)
    5994:	e0bffa83 	ldbu	r2,-22(fp)
    5998:	1080005c 	xori	r2,r2,1
    599c:	10803fcc 	andi	r2,r2,255
    59a0:	10001026 	beq	r2,zero,59e4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    59a4:	e0bffc17 	ldw	r2,-16(fp)
    59a8:	10800017 	ldw	r2,0(r2)
    59ac:	10800404 	addi	r2,r2,16
    59b0:	10800017 	ldw	r2,0(r2)
    59b4:	e0fffc17 	ldw	r3,-16(fp)
    59b8:	18c00103 	ldbu	r3,4(r3)
    59bc:	19403fcc 	andi	r5,r3,255
    59c0:	e0fffa03 	ldbu	r3,-24(fp)
    59c4:	e13ffc17 	ldw	r4,-16(fp)
    59c8:	20c7883a 	add	r3,r4,r3
    59cc:	18c00104 	addi	r3,r3,4
    59d0:	18c00003 	ldbu	r3,0(r3)
    59d4:	18c03fcc 	andi	r3,r3,255
    59d8:	180d883a 	mov	r6,r3
    59dc:	e13ffc17 	ldw	r4,-16(fp)
    59e0:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    59e4:	e0bffa03 	ldbu	r2,-24(fp)
    59e8:	10800044 	addi	r2,r2,1
    59ec:	e0bffa05 	stb	r2,-24(fp)
    59f0:	003f8f06 	br	5830 <__alt_data_end+0xfc005830>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    59f4:	e03ffb05 	stb	zero,-20(fp)
    59f8:	e0bffb03 	ldbu	r2,-20(fp)
    59fc:	10800228 	cmpgeui	r2,r2,8
    5a00:	10000e1e 	bne	r2,zero,5a3c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    5a04:	e0bffb03 	ldbu	r2,-20(fp)
    5a08:	e0fffb03 	ldbu	r3,-20(fp)
    5a0c:	e1000217 	ldw	r4,8(fp)
    5a10:	20c7883a 	add	r3,r4,r3
    5a14:	18c00003 	ldbu	r3,0(r3)
    5a18:	e13ffc17 	ldw	r4,-16(fp)
    5a1c:	2085883a 	add	r2,r4,r2
    5a20:	10800104 	addi	r2,r2,4
    5a24:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5a28:	e0bffb03 	ldbu	r2,-20(fp)
    5a2c:	10800044 	addi	r2,r2,1
    5a30:	e0bffb05 	stb	r2,-20(fp)
    5a34:	003ff006 	br	59f8 <__alt_data_end+0xfc0059f8>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5a38:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5a3c:	e037883a 	mov	sp,fp
    5a40:	dfc00117 	ldw	ra,4(sp)
    5a44:	df000017 	ldw	fp,0(sp)
    5a48:	dec00204 	addi	sp,sp,8
    5a4c:	f800283a 	ret

00005a50 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5a50:	defffa04 	addi	sp,sp,-24
    5a54:	dfc00515 	stw	ra,20(sp)
    5a58:	df000415 	stw	fp,16(sp)
    5a5c:	df000404 	addi	fp,sp,16
    5a60:	e13ffd15 	stw	r4,-12(fp)
    5a64:	2807883a 	mov	r3,r5
    5a68:	3005883a 	mov	r2,r6
    5a6c:	e0fffe05 	stb	r3,-8(fp)
    5a70:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5a74:	e0bffe03 	ldbu	r2,-8(fp)
    5a78:	1080088c 	andi	r2,r2,34
    5a7c:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5a80:	e0bfff03 	ldbu	r2,-4(fp)
    5a84:	10800130 	cmpltui	r2,r2,4
    5a88:	1000151e 	bne	r2,zero,5ae0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5a8c:	e0bfff03 	ldbu	r2,-4(fp)
    5a90:	108007a8 	cmpgeui	r2,r2,30
    5a94:	1000121e 	bne	r2,zero,5ae0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5a98:	e0bffd17 	ldw	r2,-12(fp)
    5a9c:	10800317 	ldw	r2,12(r2)
    5aa0:	1080008c 	andi	r2,r2,2
    5aa4:	1000021e 	bne	r2,zero,5ab0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5aa8:	e0bffc03 	ldbu	r2,-16(fp)
    5aac:	1000061e 	bne	r2,zero,5ac8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5ab0:	e0bffd17 	ldw	r2,-12(fp)
    5ab4:	10800317 	ldw	r2,12(r2)
    5ab8:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5abc:	10000526 	beq	r2,zero,5ad4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5ac0:	e0bffc03 	ldbu	r2,-16(fp)
    5ac4:	1000031e 	bne	r2,zero,5ad4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5ac8:	e0bfff03 	ldbu	r2,-4(fp)
    5acc:	10800f44 	addi	r2,r2,61
    5ad0:	00008006 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5ad4:	e0bfff03 	ldbu	r2,-4(fp)
    5ad8:	10801744 	addi	r2,r2,93
    5adc:	00007d06 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5ae0:	e0bfff03 	ldbu	r2,-4(fp)
    5ae4:	108007b0 	cmpltui	r2,r2,30
    5ae8:	1000191e 	bne	r2,zero,5b50 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5aec:	e0bfff03 	ldbu	r2,-4(fp)
    5af0:	10800a28 	cmpgeui	r2,r2,40
    5af4:	1000161e 	bne	r2,zero,5b50 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5af8:	e0bffc03 	ldbu	r2,-16(fp)
    5afc:	10000c26 	beq	r2,zero,5b30 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5b00:	e0bffd17 	ldw	r2,-12(fp)
    5b04:	10800017 	ldw	r2,0(r2)
    5b08:	10800504 	addi	r2,r2,20
    5b0c:	10800017 	ldw	r2,0(r2)
    5b10:	e13ffd17 	ldw	r4,-12(fp)
    5b14:	103ee83a 	callr	r2
    5b18:	1007883a 	mov	r3,r2
    5b1c:	e0bfff03 	ldbu	r2,-4(fp)
    5b20:	10bff884 	addi	r2,r2,-30
    5b24:	1885883a 	add	r2,r3,r2
    5b28:	10800003 	ldbu	r2,0(r2)
    5b2c:	00006906 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5b30:	e0bfff03 	ldbu	r2,-4(fp)
    5b34:	108009e0 	cmpeqi	r2,r2,39
    5b38:	1000031e 	bne	r2,zero,5b48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5b3c:	e0bfff03 	ldbu	r2,-4(fp)
    5b40:	108004c4 	addi	r2,r2,19
    5b44:	00006306 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5b48:	00800c04 	movi	r2,48
    5b4c:	00006106 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5b50:	e0bfff03 	ldbu	r2,-4(fp)
    5b54:	10801670 	cmpltui	r2,r2,89
    5b58:	10000a1e 	bne	r2,zero,5b84 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5b5c:	e0bfff03 	ldbu	r2,-4(fp)
    5b60:	108018a8 	cmpgeui	r2,r2,98
    5b64:	1000071e 	bne	r2,zero,5b84 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5b68:	e0bffd17 	ldw	r2,-12(fp)
    5b6c:	10800317 	ldw	r2,12(r2)
    5b70:	1080004c 	andi	r2,r2,1
    5b74:	10005626 	beq	r2,zero,5cd0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5b78:	e0bfff03 	ldbu	r2,-4(fp)
    5b7c:	10bff604 	addi	r2,r2,-40
    5b80:	00005406 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    5b84:	e0bfff03 	ldbu	r2,-4(fp)
    5b88:	10800b70 	cmpltui	r2,r2,45
    5b8c:	10001d1e 	bne	r2,zero,5c04 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    5b90:	e0bfff03 	ldbu	r2,-4(fp)
    5b94:	10800e68 	cmpgeui	r2,r2,57
    5b98:	10001a1e 	bne	r2,zero,5c04 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    5b9c:	e0bffc03 	ldbu	r2,-16(fp)
    5ba0:	10000c26 	beq	r2,zero,5bd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    5ba4:	e0bffd17 	ldw	r2,-12(fp)
    5ba8:	10800017 	ldw	r2,0(r2)
    5bac:	10800604 	addi	r2,r2,24
    5bb0:	10800017 	ldw	r2,0(r2)
    5bb4:	e13ffd17 	ldw	r4,-12(fp)
    5bb8:	103ee83a 	callr	r2
    5bbc:	1007883a 	mov	r3,r2
    5bc0:	e0bfff03 	ldbu	r2,-4(fp)
    5bc4:	10bff4c4 	addi	r2,r2,-45
    5bc8:	1885883a 	add	r2,r3,r2
    5bcc:	10800003 	ldbu	r2,0(r2)
    5bd0:	00004006 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5bd4:	e0bffd17 	ldw	r2,-12(fp)
    5bd8:	10800017 	ldw	r2,0(r2)
    5bdc:	10800704 	addi	r2,r2,28
    5be0:	10800017 	ldw	r2,0(r2)
    5be4:	e13ffd17 	ldw	r4,-12(fp)
    5be8:	103ee83a 	callr	r2
    5bec:	1007883a 	mov	r3,r2
    5bf0:	e0bfff03 	ldbu	r2,-4(fp)
    5bf4:	10bff4c4 	addi	r2,r2,-45
    5bf8:	1885883a 	add	r2,r3,r2
    5bfc:	10800003 	ldbu	r2,0(r2)
    5c00:	00003406 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    5c04:	e0bfff03 	ldbu	r2,-4(fp)
    5c08:	10801530 	cmpltui	r2,r2,84
    5c0c:	10000f1e 	bne	r2,zero,5c4c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    5c10:	e0bfff03 	ldbu	r2,-4(fp)
    5c14:	10801668 	cmpgeui	r2,r2,89
    5c18:	10000c1e 	bne	r2,zero,5c4c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    5c1c:	e0bffd17 	ldw	r2,-12(fp)
    5c20:	10800017 	ldw	r2,0(r2)
    5c24:	10800804 	addi	r2,r2,32
    5c28:	10800017 	ldw	r2,0(r2)
    5c2c:	e13ffd17 	ldw	r4,-12(fp)
    5c30:	103ee83a 	callr	r2
    5c34:	1007883a 	mov	r3,r2
    5c38:	e0bfff03 	ldbu	r2,-4(fp)
    5c3c:	10bfeb04 	addi	r2,r2,-84
    5c40:	1885883a 	add	r2,r3,r2
    5c44:	10800003 	ldbu	r2,0(r2)
    5c48:	00002206 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    5c4c:	e0bfff03 	ldbu	r2,-4(fp)
    5c50:	10c00b20 	cmpeqi	r3,r2,44
    5c54:	18000a1e 	bne	r3,zero,5c80 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    5c58:	10c00b48 	cmpgei	r3,r2,45
    5c5c:	1800031e 	bne	r3,zero,5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    5c60:	10800a20 	cmpeqi	r2,r2,40
    5c64:	1000081e 	bne	r2,zero,5c88 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    5c68:	00001906 	br	5cd0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    5c6c:	10c018a0 	cmpeqi	r3,r2,98
    5c70:	1800071e 	bne	r3,zero,5c90 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    5c74:	108018e0 	cmpeqi	r2,r2,99
    5c78:	10000d1e 	bne	r2,zero,5cb0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    5c7c:	00001406 	br	5cd0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    5c80:	00800804 	movi	r2,32
    5c84:	00001306 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    5c88:	00800344 	movi	r2,13
    5c8c:	00001106 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    5c90:	e0bffd17 	ldw	r2,-12(fp)
    5c94:	10800317 	ldw	r2,12(r2)
    5c98:	1080004c 	andi	r2,r2,1
    5c9c:	10000226 	beq	r2,zero,5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    5ca0:	00800c04 	movi	r2,48
    5ca4:	00000b06 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5ca8:	0005883a 	mov	r2,zero
    5cac:	00000906 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    5cb0:	e0bffd17 	ldw	r2,-12(fp)
    5cb4:	10800317 	ldw	r2,12(r2)
    5cb8:	1080004c 	andi	r2,r2,1
    5cbc:	10000226 	beq	r2,zero,5cc8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    5cc0:	00800b84 	movi	r2,46
    5cc4:	00000306 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5cc8:	0005883a 	mov	r2,zero
    5ccc:	00000106 	br	5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    5cd0:	0005883a 	mov	r2,zero
}
    5cd4:	e037883a 	mov	sp,fp
    5cd8:	dfc00117 	ldw	ra,4(sp)
    5cdc:	df000017 	ldw	fp,0(sp)
    5ce0:	dec00204 	addi	sp,sp,8
    5ce4:	f800283a 	ret

00005ce8 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    5ce8:	defffd04 	addi	sp,sp,-12
    5cec:	df000215 	stw	fp,8(sp)
    5cf0:	df000204 	addi	fp,sp,8
    5cf4:	e13ffe15 	stw	r4,-8(fp)
    5cf8:	e17fff15 	stw	r5,-4(fp)
        };
    5cfc:	0001883a 	nop
    5d00:	e037883a 	mov	sp,fp
    5d04:	df000017 	ldw	fp,0(sp)
    5d08:	dec00104 	addi	sp,sp,4
    5d0c:	f800283a 	ret

00005d10 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5d10:	defffd04 	addi	sp,sp,-12
    5d14:	df000215 	stw	fp,8(sp)
    5d18:	df000204 	addi	fp,sp,8
    5d1c:	e13ffe15 	stw	r4,-8(fp)
    5d20:	e17fff15 	stw	r5,-4(fp)
        };
    5d24:	0001883a 	nop
    5d28:	e037883a 	mov	sp,fp
    5d2c:	df000017 	ldw	fp,0(sp)
    5d30:	dec00104 	addi	sp,sp,4
    5d34:	f800283a 	ret

00005d38 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5d38:	defffd04 	addi	sp,sp,-12
    5d3c:	df000215 	stw	fp,8(sp)
    5d40:	df000204 	addi	fp,sp,8
    5d44:	e13ffe15 	stw	r4,-8(fp)
    5d48:	e17fff15 	stw	r5,-4(fp)
        };
    5d4c:	0001883a 	nop
    5d50:	e037883a 	mov	sp,fp
    5d54:	df000017 	ldw	fp,0(sp)
    5d58:	dec00104 	addi	sp,sp,4
    5d5c:	f800283a 	ret

00005d60 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5d60:	defffd04 	addi	sp,sp,-12
    5d64:	df000215 	stw	fp,8(sp)
    5d68:	df000204 	addi	fp,sp,8
    5d6c:	e13ffe15 	stw	r4,-8(fp)
    5d70:	e17fff15 	stw	r5,-4(fp)
        };
    5d74:	0001883a 	nop
    5d78:	e037883a 	mov	sp,fp
    5d7c:	df000017 	ldw	fp,0(sp)
    5d80:	dec00104 	addi	sp,sp,4
    5d84:	f800283a 	ret

00005d88 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5d88:	defffd04 	addi	sp,sp,-12
    5d8c:	df000215 	stw	fp,8(sp)
    5d90:	df000204 	addi	fp,sp,8
    5d94:	e13ffe15 	stw	r4,-8(fp)
    5d98:	e17fff15 	stw	r5,-4(fp)
        };
    5d9c:	0001883a 	nop
    5da0:	e037883a 	mov	sp,fp
    5da4:	df000017 	ldw	fp,0(sp)
    5da8:	dec00104 	addi	sp,sp,4
    5dac:	f800283a 	ret

00005db0 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5db0:	defffd04 	addi	sp,sp,-12
    5db4:	df000215 	stw	fp,8(sp)
    5db8:	df000204 	addi	fp,sp,8
    5dbc:	e13ffe15 	stw	r4,-8(fp)
    5dc0:	e17fff15 	stw	r5,-4(fp)
        };
    5dc4:	0001883a 	nop
    5dc8:	e037883a 	mov	sp,fp
    5dcc:	df000017 	ldw	fp,0(sp)
    5dd0:	dec00104 	addi	sp,sp,4
    5dd4:	f800283a 	ret

00005dd8 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5dd8:	defffd04 	addi	sp,sp,-12
    5ddc:	df000215 	stw	fp,8(sp)
    5de0:	df000204 	addi	fp,sp,8
    5de4:	e13ffe15 	stw	r4,-8(fp)
    5de8:	e17fff15 	stw	r5,-4(fp)
        };
    5dec:	0001883a 	nop
    5df0:	e037883a 	mov	sp,fp
    5df4:	df000017 	ldw	fp,0(sp)
    5df8:	dec00104 	addi	sp,sp,4
    5dfc:	f800283a 	ret

00005e00 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    5e00:	defff704 	addi	sp,sp,-36
    5e04:	dfc00815 	stw	ra,32(sp)
    5e08:	df000715 	stw	fp,28(sp)
    5e0c:	df000704 	addi	fp,sp,28
    5e10:	e13ffd15 	stw	r4,-12(fp)
    5e14:	e17ffe15 	stw	r5,-8(fp)
    5e18:	3005883a 	mov	r2,r6
    5e1c:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    5e20:	e0bffd17 	ldw	r2,-12(fp)
    5e24:	10800303 	ldbu	r2,12(r2)
    5e28:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    5e2c:	e0bfff03 	ldbu	r2,-4(fp)
    5e30:	10c011e0 	cmpeqi	r3,r2,71
    5e34:	1800271e 	bne	r3,zero,5ed4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    5e38:	10c014e0 	cmpeqi	r3,r2,83
    5e3c:	1800031e 	bne	r3,zero,5e4c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    5e40:	10800e60 	cmpeqi	r2,r2,57
    5e44:	1000111e 	bne	r2,zero,5e8c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    5e48:	00003506 	br	5f20 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    5e4c:	e0bffd17 	ldw	r2,-12(fp)
    5e50:	10800317 	ldw	r2,12(r2)
    5e54:	1080004c 	andi	r2,r2,1
    5e58:	0084303a 	nor	r2,zero,r2
    5e5c:	1080004c 	andi	r2,r2,1
    5e60:	1007883a 	mov	r3,r2
    5e64:	e0bffd17 	ldw	r2,-12(fp)
    5e68:	1940004c 	andi	r5,r3,1
    5e6c:	11000303 	ldbu	r4,12(r2)
    5e70:	00ffff84 	movi	r3,-2
    5e74:	20c6703a 	and	r3,r4,r3
    5e78:	1809883a 	mov	r4,r3
    5e7c:	2807883a 	mov	r3,r5
    5e80:	20c6b03a 	or	r3,r4,r3
    5e84:	10c00305 	stb	r3,12(r2)
                                break;
    5e88:	00002506 	br	5f20 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    5e8c:	e0bffd17 	ldw	r2,-12(fp)
    5e90:	10800317 	ldw	r2,12(r2)
    5e94:	1004d07a 	srli	r2,r2,1
    5e98:	1080004c 	andi	r2,r2,1
    5e9c:	0084303a 	nor	r2,zero,r2
    5ea0:	1080004c 	andi	r2,r2,1
    5ea4:	1007883a 	mov	r3,r2
    5ea8:	e0bffd17 	ldw	r2,-12(fp)
    5eac:	18c0004c 	andi	r3,r3,1
    5eb0:	18cb883a 	add	r5,r3,r3
    5eb4:	11000303 	ldbu	r4,12(r2)
    5eb8:	00ffff44 	movi	r3,-3
    5ebc:	20c6703a 	and	r3,r4,r3
    5ec0:	1809883a 	mov	r4,r3
    5ec4:	2807883a 	mov	r3,r5
    5ec8:	20c6b03a 	or	r3,r4,r3
    5ecc:	10c00305 	stb	r3,12(r2)
                                break;
    5ed0:	00001306 	br	5f20 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    5ed4:	e0bffd17 	ldw	r2,-12(fp)
    5ed8:	10800317 	ldw	r2,12(r2)
    5edc:	1004d0ba 	srli	r2,r2,2
    5ee0:	1080004c 	andi	r2,r2,1
    5ee4:	0084303a 	nor	r2,zero,r2
    5ee8:	1080004c 	andi	r2,r2,1
    5eec:	1007883a 	mov	r3,r2
    5ef0:	e0bffd17 	ldw	r2,-12(fp)
    5ef4:	18c0004c 	andi	r3,r3,1
    5ef8:	18c7883a 	add	r3,r3,r3
    5efc:	18cb883a 	add	r5,r3,r3
    5f00:	11000303 	ldbu	r4,12(r2)
    5f04:	00fffec4 	movi	r3,-5
    5f08:	20c6703a 	and	r3,r4,r3
    5f0c:	1809883a 	mov	r4,r3
    5f10:	2807883a 	mov	r3,r5
    5f14:	20c6b03a 	or	r3,r4,r3
    5f18:	10c00305 	stb	r3,12(r2)
                                break;
    5f1c:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    5f20:	e0bffd17 	ldw	r2,-12(fp)
    5f24:	10800303 	ldbu	r2,12(r2)
    5f28:	10c03fcc 	andi	r3,r2,255
    5f2c:	e0bffc03 	ldbu	r2,-16(fp)
    5f30:	18801026 	beq	r3,r2,5f74 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    5f34:	e0bffe17 	ldw	r2,-8(fp)
    5f38:	10000e26 	beq	r2,zero,5f74 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    5f3c:	e0bffd17 	ldw	r2,-12(fp)
    5f40:	10800303 	ldbu	r2,12(r2)
    5f44:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    5f48:	e0bffc44 	addi	r2,fp,-15
    5f4c:	d8800215 	stw	r2,8(sp)
    5f50:	00800044 	movi	r2,1
    5f54:	d8800115 	stw	r2,4(sp)
    5f58:	d8000015 	stw	zero,0(sp)
    5f5c:	01c00084 	movi	r7,2
    5f60:	000d883a 	mov	r6,zero
    5f64:	000b883a 	mov	r5,zero
    5f68:	e13ffe17 	ldw	r4,-8(fp)
    5f6c:	0008de00 	call	8de0 <_ZN6USBHID9SetReportEhhhhtPh>
    5f70:	00000106 	br	5f78 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    5f74:	0005883a 	mov	r2,zero
        };
    5f78:	e037883a 	mov	sp,fp
    5f7c:	dfc00117 	ldw	ra,4(sp)
    5f80:	df000017 	ldw	fp,0(sp)
    5f84:	dec00204 	addi	sp,sp,8
    5f88:	f800283a 	ret

00005f8c <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    5f8c:	defffc04 	addi	sp,sp,-16
    5f90:	df000315 	stw	fp,12(sp)
    5f94:	df000304 	addi	fp,sp,12
    5f98:	e13ffd15 	stw	r4,-12(fp)
    5f9c:	2807883a 	mov	r3,r5
    5fa0:	3005883a 	mov	r2,r6
    5fa4:	e0fffe05 	stb	r3,-8(fp)
    5fa8:	e0bfff05 	stb	r2,-4(fp)
        };
    5fac:	0001883a 	nop
    5fb0:	e037883a 	mov	sp,fp
    5fb4:	df000017 	ldw	fp,0(sp)
    5fb8:	dec00104 	addi	sp,sp,4
    5fbc:	f800283a 	ret

00005fc0 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    5fc0:	defffc04 	addi	sp,sp,-16
    5fc4:	df000315 	stw	fp,12(sp)
    5fc8:	df000304 	addi	fp,sp,12
    5fcc:	e13ffd15 	stw	r4,-12(fp)
    5fd0:	2807883a 	mov	r3,r5
    5fd4:	3005883a 	mov	r2,r6
    5fd8:	e0fffe05 	stb	r3,-8(fp)
    5fdc:	e0bfff05 	stb	r2,-4(fp)
        };
    5fe0:	0001883a 	nop
    5fe4:	e037883a 	mov	sp,fp
    5fe8:	df000017 	ldw	fp,0(sp)
    5fec:	dec00104 	addi	sp,sp,4
    5ff0:	f800283a 	ret

00005ff4 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    5ff4:	defffc04 	addi	sp,sp,-16
    5ff8:	df000315 	stw	fp,12(sp)
    5ffc:	df000304 	addi	fp,sp,12
    6000:	e13ffd15 	stw	r4,-12(fp)
    6004:	2807883a 	mov	r3,r5
    6008:	3005883a 	mov	r2,r6
    600c:	e0fffe05 	stb	r3,-8(fp)
    6010:	e0bfff05 	stb	r2,-4(fp)
        };
    6014:	0001883a 	nop
    6018:	e037883a 	mov	sp,fp
    601c:	df000017 	ldw	fp,0(sp)
    6020:	dec00104 	addi	sp,sp,4
    6024:	f800283a 	ret

00006028 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    6028:	defffe04 	addi	sp,sp,-8
    602c:	df000115 	stw	fp,4(sp)
    6030:	df000104 	addi	fp,sp,4
    6034:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    6038:	008000b4 	movhi	r2,2
    603c:	10968884 	addi	r2,r2,23074
        };
    6040:	e037883a 	mov	sp,fp
    6044:	df000017 	ldw	fp,0(sp)
    6048:	dec00104 	addi	sp,sp,4
    604c:	f800283a 	ret

00006050 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    6050:	defffe04 	addi	sp,sp,-8
    6054:	df000115 	stw	fp,4(sp)
    6058:	df000104 	addi	fp,sp,4
    605c:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    6060:	008000b4 	movhi	r2,2
    6064:	10968b04 	addi	r2,r2,23084
        };
    6068:	e037883a 	mov	sp,fp
    606c:	df000017 	ldw	fp,0(sp)
    6070:	dec00104 	addi	sp,sp,4
    6074:	f800283a 	ret

00006078 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    6078:	defffe04 	addi	sp,sp,-8
    607c:	df000115 	stw	fp,4(sp)
    6080:	df000104 	addi	fp,sp,4
    6084:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    6088:	008000b4 	movhi	r2,2
    608c:	10968e04 	addi	r2,r2,23096
        };
    6090:	e037883a 	mov	sp,fp
    6094:	df000017 	ldw	fp,0(sp)
    6098:	dec00104 	addi	sp,sp,4
    609c:	f800283a 	ret

000060a0 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    60a0:	defffe04 	addi	sp,sp,-8
    60a4:	df000115 	stw	fp,4(sp)
    60a8:	df000104 	addi	fp,sp,4
    60ac:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    60b0:	d0a1e684 	addi	r2,gp,-30822
        };
    60b4:	e037883a 	mov	sp,fp
    60b8:	df000017 	ldw	fp,0(sp)
    60bc:	dec00104 	addi	sp,sp,4
    60c0:	f800283a 	ret

000060c4 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    60c4:	defffc04 	addi	sp,sp,-16
    60c8:	dfc00315 	stw	ra,12(sp)
    60cc:	df000215 	stw	fp,8(sp)
    60d0:	df000204 	addi	fp,sp,8
    60d4:	2005883a 	mov	r2,r4
    60d8:	e17fff15 	stw	r5,-4(fp)
    60dc:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    60e0:	d0e1eb17 	ldw	r3,-30804(gp)
    60e4:	e0bfff17 	ldw	r2,-4(fp)
    60e8:	18800416 	blt	r3,r2,60fc <_Z9E_Notifycci+0x38>
        printf("%c", c);
    60ec:	e0bffe07 	ldb	r2,-8(fp)
    60f0:	1009883a 	mov	r4,r2
    60f4:	000e9680 	call	e968 <putchar>
    60f8:	00000106 	br	6100 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    60fc:	0001883a 	nop
        printf("%c", c);
}
    6100:	e037883a 	mov	sp,fp
    6104:	dfc00117 	ldw	ra,4(sp)
    6108:	df000017 	ldw	fp,0(sp)
    610c:	dec00204 	addi	sp,sp,8
    6110:	f800283a 	ret

00006114 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    6114:	defffb04 	addi	sp,sp,-20
    6118:	dfc00415 	stw	ra,16(sp)
    611c:	df000315 	stw	fp,12(sp)
    6120:	df000304 	addi	fp,sp,12
    6124:	e13ffe15 	stw	r4,-8(fp)
    6128:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    612c:	d0e1eb17 	ldw	r3,-30804(gp)
    6130:	e0bfff17 	ldw	r2,-4(fp)
    6134:	18801016 	blt	r3,r2,6178 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    6138:	e0bffe17 	ldw	r2,-8(fp)
    613c:	10001026 	beq	r2,zero,6180 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    6140:	e0bffe17 	ldw	r2,-8(fp)
    6144:	10c00044 	addi	r3,r2,1
    6148:	e0fffe15 	stw	r3,-8(fp)
    614c:	10800003 	ldbu	r2,0(r2)
    6150:	e0bffd05 	stb	r2,-12(fp)
    6154:	e0bffd07 	ldb	r2,-12(fp)
    6158:	1004c03a 	cmpne	r2,r2,zero
    615c:	10803fcc 	andi	r2,r2,255
    6160:	10000826 	beq	r2,zero,6184 <_Z8E_NotifyPKci+0x70>
    6164:	e0bffd07 	ldb	r2,-12(fp)
    6168:	e17fff17 	ldw	r5,-4(fp)
    616c:	1009883a 	mov	r4,r2
    6170:	00060c40 	call	60c4 <_Z9E_Notifycci>
    6174:	003ff206 	br	6140 <__alt_data_end+0xfc006140>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6178:	0001883a 	nop
    617c:	00000106 	br	6184 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    6180:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    6184:	e037883a 	mov	sp,fp
    6188:	dfc00117 	ldw	ra,4(sp)
    618c:	df000017 	ldw	fp,0(sp)
    6190:	dec00204 	addi	sp,sp,8
    6194:	f800283a 	ret

00006198 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    6198:	defffb04 	addi	sp,sp,-20
    619c:	dfc00415 	stw	ra,16(sp)
    61a0:	df000315 	stw	fp,12(sp)
    61a4:	df000304 	addi	fp,sp,12
    61a8:	e13ffe15 	stw	r4,-8(fp)
    61ac:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    61b0:	d0e1eb17 	ldw	r3,-30804(gp)
    61b4:	e0bfff17 	ldw	r2,-4(fp)
    61b8:	18801016 	blt	r3,r2,61fc <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    61bc:	e0bffe17 	ldw	r2,-8(fp)
    61c0:	10001026 	beq	r2,zero,6204 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    61c4:	e0bffe17 	ldw	r2,-8(fp)
    61c8:	10c00044 	addi	r3,r2,1
    61cc:	e0fffe15 	stw	r3,-8(fp)
    61d0:	10800003 	ldbu	r2,0(r2)
    61d4:	e0bffd05 	stb	r2,-12(fp)
    61d8:	e0bffd07 	ldb	r2,-12(fp)
    61dc:	1004c03a 	cmpne	r2,r2,zero
    61e0:	10803fcc 	andi	r2,r2,255
    61e4:	10000826 	beq	r2,zero,6208 <_Z11E_NotifyStrPKci+0x70>
    61e8:	e0bffd07 	ldb	r2,-12(fp)
    61ec:	e17fff17 	ldw	r5,-4(fp)
    61f0:	1009883a 	mov	r4,r2
    61f4:	00060c40 	call	60c4 <_Z9E_Notifycci>
    61f8:	003ff206 	br	61c4 <__alt_data_end+0xfc0061c4>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    61fc:	0001883a 	nop
    6200:	00000106 	br	6208 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    6204:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    6208:	e037883a 	mov	sp,fp
    620c:	dfc00117 	ldw	ra,4(sp)
    6210:	df000017 	ldw	fp,0(sp)
    6214:	dec00204 	addi	sp,sp,8
    6218:	f800283a 	ret

0000621c <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    621c:	defffd04 	addi	sp,sp,-12
    6220:	df000215 	stw	fp,8(sp)
    6224:	df000204 	addi	fp,sp,8
    6228:	2005883a 	mov	r2,r4
    622c:	e17fff15 	stw	r5,-4(fp)
    6230:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    6234:	e037883a 	mov	sp,fp
    6238:	df000017 	ldw	fp,0(sp)
    623c:	dec00104 	addi	sp,sp,4
    6240:	f800283a 	ret

00006244 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    6244:	defffc04 	addi	sp,sp,-16
    6248:	df000315 	stw	fp,12(sp)
    624c:	df000304 	addi	fp,sp,12
    6250:	e13ffd15 	stw	r4,-12(fp)
    6254:	e17ffe15 	stw	r5,-8(fp)
    6258:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    625c:	e037883a 	mov	sp,fp
    6260:	df000017 	ldw	fp,0(sp)
    6264:	dec00104 	addi	sp,sp,4
    6268:	f800283a 	ret

0000626c <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    626c:	defffc04 	addi	sp,sp,-16
    6270:	df000315 	stw	fp,12(sp)
    6274:	df000304 	addi	fp,sp,12
    6278:	e13ffd15 	stw	r4,-12(fp)
    627c:	e17ffe15 	stw	r5,-8(fp)
    6280:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    6284:	e0bffd17 	ldw	r2,-12(fp)
    6288:	10800017 	ldw	r2,0(r2)
    628c:	1000021e 	bne	r2,zero,6298 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    6290:	0005883a 	mov	r2,zero
    6294:	00003306 	br	6364 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    6298:	e0bffd17 	ldw	r2,-12(fp)
    629c:	10800103 	ldbu	r2,4(r2)
    62a0:	10803fcc 	andi	r2,r2,255
    62a4:	10002426 	beq	r2,zero,6338 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    62a8:	e0bfff17 	ldw	r2,-4(fp)
    62ac:	1080000b 	ldhu	r2,0(r2)
    62b0:	10bfffcc 	andi	r2,r2,65535
    62b4:	10002026 	beq	r2,zero,6338 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    62b8:	e0bffd17 	ldw	r2,-12(fp)
    62bc:	10800017 	ldw	r2,0(r2)
    62c0:	e0fffd17 	ldw	r3,-12(fp)
    62c4:	18c00143 	ldbu	r3,5(r3)
    62c8:	19003fcc 	andi	r4,r3,255
    62cc:	e0fffd17 	ldw	r3,-12(fp)
    62d0:	18c00103 	ldbu	r3,4(r3)
    62d4:	18c03fcc 	andi	r3,r3,255
    62d8:	20c7c83a 	sub	r3,r4,r3
    62dc:	10c5883a 	add	r2,r2,r3
    62e0:	e0fffe17 	ldw	r3,-8(fp)
    62e4:	18c00017 	ldw	r3,0(r3)
    62e8:	18c00003 	ldbu	r3,0(r3)
    62ec:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    62f0:	e0bffd17 	ldw	r2,-12(fp)
    62f4:	10800103 	ldbu	r2,4(r2)
    62f8:	10bfffc4 	addi	r2,r2,-1
    62fc:	1007883a 	mov	r3,r2
    6300:	e0bffd17 	ldw	r2,-12(fp)
    6304:	10c00105 	stb	r3,4(r2)
    6308:	e0bfff17 	ldw	r2,-4(fp)
    630c:	1080000b 	ldhu	r2,0(r2)
    6310:	10bfffc4 	addi	r2,r2,-1
    6314:	1007883a 	mov	r3,r2
    6318:	e0bfff17 	ldw	r2,-4(fp)
    631c:	10c0000d 	sth	r3,0(r2)
    6320:	e0bffe17 	ldw	r2,-8(fp)
    6324:	10800017 	ldw	r2,0(r2)
    6328:	10c00044 	addi	r3,r2,1
    632c:	e0bffe17 	ldw	r2,-8(fp)
    6330:	10c00015 	stw	r3,0(r2)
    6334:	003fd806 	br	6298 <__alt_data_end+0xfc006298>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    6338:	e0bffd17 	ldw	r2,-12(fp)
    633c:	10800103 	ldbu	r2,4(r2)
    6340:	10803fcc 	andi	r2,r2,255
    6344:	10000226 	beq	r2,zero,6350 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    6348:	0005883a 	mov	r2,zero
    634c:	00000506 	br	6364 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    6350:	e0bffd17 	ldw	r2,-12(fp)
    6354:	10c00143 	ldbu	r3,5(r2)
    6358:	e0bffd17 	ldw	r2,-12(fp)
    635c:	10c00105 	stb	r3,4(r2)
        return true;
    6360:	00800044 	movi	r2,1
}
    6364:	e037883a 	mov	sp,fp
    6368:	df000017 	ldw	fp,0(sp)
    636c:	dec00104 	addi	sp,sp,4
    6370:	f800283a 	ret

00006374 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    6374:	defffa04 	addi	sp,sp,-24
    6378:	dfc00515 	stw	ra,20(sp)
    637c:	df000415 	stw	fp,16(sp)
    6380:	df000404 	addi	fp,sp,16
    6384:	e13ffc15 	stw	r4,-16(fp)
    6388:	e17ffd15 	stw	r5,-12(fp)
    638c:	e1bffe15 	stw	r6,-8(fp)
    6390:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    6394:	e0bffc17 	ldw	r2,-16(fp)
    6398:	10800003 	ldbu	r2,0(r2)
    639c:	10803fcc 	andi	r2,r2,255
    63a0:	10c00060 	cmpeqi	r3,r2,1
    63a4:	1800181e 	bne	r3,zero,6408 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    63a8:	10c00088 	cmpgei	r3,r2,2
    63ac:	1800021e 	bne	r3,zero,63b8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    63b0:	10000626 	beq	r2,zero,63cc <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    63b4:	00007e06 	br	65b0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    63b8:	10c000a0 	cmpeqi	r3,r2,2
    63bc:	18004a1e 	bne	r3,zero,64e8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    63c0:	108000e0 	cmpeqi	r2,r2,3
    63c4:	1000571e 	bne	r2,zero,6524 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    63c8:	00007906 	br	65b0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    63cc:	e0bffc17 	ldw	r2,-16(fp)
    63d0:	10800417 	ldw	r2,16(r2)
    63d4:	e0fffc17 	ldw	r3,-16(fp)
    63d8:	18c00303 	ldbu	r3,12(r3)
    63dc:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    63e0:	e0bffc17 	ldw	r2,-16(fp)
    63e4:	10c00504 	addi	r3,r2,20
    63e8:	e0bffc17 	ldw	r2,-16(fp)
    63ec:	10800417 	ldw	r2,16(r2)
    63f0:	100b883a 	mov	r5,r2
    63f4:	1809883a 	mov	r4,r3
    63f8:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    63fc:	e0bffc17 	ldw	r2,-16(fp)
    6400:	00c00044 	movi	r3,1
    6404:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    6408:	e0bffc17 	ldw	r2,-16(fp)
    640c:	10800504 	addi	r2,r2,20
    6410:	e1bffe17 	ldw	r6,-8(fp)
    6414:	e17ffd17 	ldw	r5,-12(fp)
    6418:	1009883a 	mov	r4,r2
    641c:	000626c0 	call	626c <_ZN20MultiByteValueParser5ParseEPPhPt>
    6420:	1080005c 	xori	r2,r2,1
    6424:	10803fcc 	andi	r2,r2,255
    6428:	10000226 	beq	r2,zero,6434 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    642c:	0005883a 	mov	r2,zero
    6430:	00006006 	br	65b4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    6434:	e0bffc17 	ldw	r2,-16(fp)
    6438:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    643c:	e0bffc17 	ldw	r2,-16(fp)
    6440:	10800417 	ldw	r2,16(r2)
    6444:	10800003 	ldbu	r2,0(r2)
    6448:	10803fcc 	andi	r2,r2,255
    644c:	10800130 	cmpltui	r2,r2,4
    6450:	10000e1e 	bne	r2,zero,648c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    6454:	e0bffc17 	ldw	r2,-16(fp)
    6458:	10800417 	ldw	r2,16(r2)
    645c:	10c00043 	ldbu	r3,1(r2)
    6460:	11000083 	ldbu	r4,2(r2)
    6464:	2008923a 	slli	r4,r4,8
    6468:	20c6b03a 	or	r3,r4,r3
    646c:	110000c3 	ldbu	r4,3(r2)
    6470:	2008943a 	slli	r4,r4,16
    6474:	20c6b03a 	or	r3,r4,r3
    6478:	10800103 	ldbu	r2,4(r2)
    647c:	1004963a 	slli	r2,r2,24
    6480:	10c4b03a 	or	r2,r2,r3
    6484:	10800017 	ldw	r2,0(r2)
    6488:	00000e06 	br	64c4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    648c:	e0bffc17 	ldw	r2,-16(fp)
    6490:	10800417 	ldw	r2,16(r2)
    6494:	10c00043 	ldbu	r3,1(r2)
    6498:	11000083 	ldbu	r4,2(r2)
    649c:	2008923a 	slli	r4,r4,8
    64a0:	20c6b03a 	or	r3,r4,r3
    64a4:	110000c3 	ldbu	r4,3(r2)
    64a8:	2008943a 	slli	r4,r4,16
    64ac:	20c6b03a 	or	r3,r4,r3
    64b0:	10800103 	ldbu	r2,4(r2)
    64b4:	1004963a 	slli	r2,r2,24
    64b8:	10c4b03a 	or	r2,r2,r3
    64bc:	1080000b 	ldhu	r2,0(r2)
    64c0:	10bfffcc 	andi	r2,r2,65535
    64c4:	e0fffc17 	ldw	r3,-16(fp)
    64c8:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    64cc:	e0bffc17 	ldw	r2,-16(fp)
    64d0:	10c00117 	ldw	r3,4(r2)
    64d4:	e0bffc17 	ldw	r2,-16(fp)
    64d8:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    64dc:	e0bffc17 	ldw	r2,-16(fp)
    64e0:	00c00084 	movi	r3,2
    64e4:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    64e8:	e0bffc17 	ldw	r2,-16(fp)
    64ec:	10800417 	ldw	r2,16(r2)
    64f0:	e0fffc17 	ldw	r3,-16(fp)
    64f4:	18c00343 	ldbu	r3,13(r3)
    64f8:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    64fc:	e0bffc17 	ldw	r2,-16(fp)
    6500:	10c00504 	addi	r3,r2,20
    6504:	e0bffc17 	ldw	r2,-16(fp)
    6508:	10800417 	ldw	r2,16(r2)
    650c:	100b883a 	mov	r5,r2
    6510:	1809883a 	mov	r4,r3
    6514:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    6518:	e0bffc17 	ldw	r2,-16(fp)
    651c:	00c000c4 	movi	r3,3
    6520:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6524:	e0bffc17 	ldw	r2,-16(fp)
    6528:	10800217 	ldw	r2,8(r2)
    652c:	10001e26 	beq	r2,zero,65a8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    6530:	e0bffc17 	ldw	r2,-16(fp)
    6534:	10800504 	addi	r2,r2,20
    6538:	e1bffe17 	ldw	r6,-8(fp)
    653c:	e17ffd17 	ldw	r5,-12(fp)
    6540:	1009883a 	mov	r4,r2
    6544:	000626c0 	call	626c <_ZN20MultiByteValueParser5ParseEPPhPt>
    6548:	1080005c 	xori	r2,r2,1
    654c:	10803fcc 	andi	r2,r2,255
    6550:	10000226 	beq	r2,zero,655c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    6554:	0005883a 	mov	r2,zero
    6558:	00001606 	br	65b4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    655c:	e0bfff17 	ldw	r2,-4(fp)
    6560:	10000b26 	beq	r2,zero,6590 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    6564:	e0bffc17 	ldw	r2,-16(fp)
    6568:	11000417 	ldw	r4,16(r2)
    656c:	e0bffc17 	ldw	r2,-16(fp)
    6570:	10c00117 	ldw	r3,4(r2)
    6574:	e0bffc17 	ldw	r2,-16(fp)
    6578:	10800217 	ldw	r2,8(r2)
    657c:	1887c83a 	sub	r3,r3,r2
    6580:	e0bfff17 	ldw	r2,-4(fp)
    6584:	e1800217 	ldw	r6,8(fp)
    6588:	180b883a 	mov	r5,r3
    658c:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6590:	e0bffc17 	ldw	r2,-16(fp)
    6594:	10800217 	ldw	r2,8(r2)
    6598:	10ffffc4 	addi	r3,r2,-1
    659c:	e0bffc17 	ldw	r2,-16(fp)
    65a0:	10c00215 	stw	r3,8(r2)
    65a4:	003fdf06 	br	6524 <__alt_data_end+0xfc006524>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    65a8:	e0bffc17 	ldw	r2,-16(fp)
    65ac:	10000005 	stb	zero,0(r2)
        }
        return true;
    65b0:	00800044 	movi	r2,1
}
    65b4:	e037883a 	mov	sp,fp
    65b8:	dfc00117 	ldw	ra,4(sp)
    65bc:	df000017 	ldw	fp,0(sp)
    65c0:	dec00204 	addi	sp,sp,8
    65c4:	f800283a 	ret

000065c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    65c8:	defff904 	addi	sp,sp,-28
    65cc:	dfc00615 	stw	ra,24(sp)
    65d0:	df000515 	stw	fp,20(sp)
    65d4:	df000504 	addi	fp,sp,20
    65d8:	e13ffd15 	stw	r4,-12(fp)
    65dc:	2807883a 	mov	r3,r5
    65e0:	3005883a 	mov	r2,r6
    65e4:	e0fffe05 	stb	r3,-8(fp)
    65e8:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    65ec:	e0bfff0b 	ldhu	r2,-4(fp)
    65f0:	1005d23a 	srai	r2,r2,8
    65f4:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    65f8:	e0bfff0b 	ldhu	r2,-4(fp)
    65fc:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    6600:	e03ffb8d 	sth	zero,-18(fp)
    6604:	e03ffc0d 	sth	zero,-16(fp)
    6608:	e0bffe03 	ldbu	r2,-8(fp)
    660c:	e0bffbc5 	stb	r2,-17(fp)
    6610:	e0bffb03 	ldbu	r2,-20(fp)
    6614:	e0bffc05 	stb	r2,-16(fp)
    6618:	e0bffb43 	ldbu	r2,-19(fp)
    661c:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6620:	e0bffb84 	addi	r2,fp,-18
    6624:	000f883a 	mov	r7,zero
    6628:	01800104 	movi	r6,4
    662c:	100b883a 	mov	r5,r2
    6630:	e13ffd17 	ldw	r4,-12(fp)
    6634:	00203280 	call	20328 <alt_avalon_i2c_master_tx>
    6638:	1004c03a 	cmpne	r2,r2,zero
    663c:	10803fcc 	andi	r2,r2,255
    6640:	10000426 	beq	r2,zero,6654 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    6644:	010000b4 	movhi	r4,2
    6648:	2116bc04 	addi	r4,r4,23280
    664c:	000e9240 	call	e924 <printf>
	}
	return;
    6650:	0001883a 	nop
    6654:	0001883a 	nop
}
    6658:	e037883a 	mov	sp,fp
    665c:	dfc00117 	ldw	ra,4(sp)
    6660:	df000017 	ldw	fp,0(sp)
    6664:	dec00204 	addi	sp,sp,8
    6668:	f800283a 	ret

0000666c <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    666c:	defff604 	addi	sp,sp,-40
    6670:	dfc00915 	stw	ra,36(sp)
    6674:	df000815 	stw	fp,32(sp)
    6678:	dc000715 	stw	r16,28(sp)
    667c:	df000804 	addi	fp,sp,32
    6680:	e13ffb15 	stw	r4,-20(fp)
    6684:	3009883a 	mov	r4,r6
    6688:	e1fffe15 	stw	r7,-8(fp)
    668c:	e17ffc05 	stb	r5,-16(fp)
    6690:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    6694:	d809883a 	mov	r4,sp
    6698:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    669c:	e13ffd03 	ldbu	r4,-12(fp)
    66a0:	21000044 	addi	r4,r4,1
    66a4:	2109883a 	add	r4,r4,r4
    66a8:	213fffc4 	addi	r4,r4,-1
    66ac:	e13ff915 	stw	r4,-28(fp)
    66b0:	200b883a 	mov	r5,r4
    66b4:	29400044 	addi	r5,r5,1
    66b8:	2819883a 	mov	r12,r5
    66bc:	001b883a 	mov	r13,zero
    66c0:	600ad77a 	srli	r5,r12,29
    66c4:	681290fa 	slli	r9,r13,3
    66c8:	2a52b03a 	or	r9,r5,r9
    66cc:	601090fa 	slli	r8,r12,3
    66d0:	200b883a 	mov	r5,r4
    66d4:	29400044 	addi	r5,r5,1
    66d8:	2815883a 	mov	r10,r5
    66dc:	0017883a 	mov	r11,zero
    66e0:	500ad77a 	srli	r5,r10,29
    66e4:	580690fa 	slli	r3,r11,3
    66e8:	28c6b03a 	or	r3,r5,r3
    66ec:	500490fa 	slli	r2,r10,3
    66f0:	2005883a 	mov	r2,r4
    66f4:	10800044 	addi	r2,r2,1
    66f8:	108000c4 	addi	r2,r2,3
    66fc:	1004d0ba 	srli	r2,r2,2
    6700:	1085883a 	add	r2,r2,r2
    6704:	1085883a 	add	r2,r2,r2
    6708:	d8b7c83a 	sub	sp,sp,r2
    670c:	d805883a 	mov	r2,sp
    6710:	1005883a 	mov	r2,r2
    6714:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    6718:	e0bffa17 	ldw	r2,-24(fp)
    671c:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    6720:	e0bffa17 	ldw	r2,-24(fp)
    6724:	e0fffc03 	ldbu	r3,-16(fp)
    6728:	10c00045 	stb	r3,1(r2)
	int i = 0;
    672c:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    6730:	e03ff815 	stw	zero,-32(fp)
    6734:	e0bffd03 	ldbu	r2,-12(fp)
    6738:	e0fff817 	ldw	r3,-32(fp)
    673c:	18801e0e 	bge	r3,r2,67b8 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    6740:	e0bff817 	ldw	r2,-32(fp)
    6744:	10c00084 	addi	r3,r2,2
    6748:	e0bff817 	ldw	r2,-32(fp)
    674c:	1085883a 	add	r2,r2,r2
    6750:	1009883a 	mov	r4,r2
    6754:	e0bffe17 	ldw	r2,-8(fp)
    6758:	1105883a 	add	r2,r2,r4
    675c:	1080000b 	ldhu	r2,0(r2)
    6760:	10bfffcc 	andi	r2,r2,65535
    6764:	1005d23a 	srai	r2,r2,8
    6768:	1009883a 	mov	r4,r2
    676c:	e0bffa17 	ldw	r2,-24(fp)
    6770:	10c5883a 	add	r2,r2,r3
    6774:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    6778:	e0bff817 	ldw	r2,-32(fp)
    677c:	10c000c4 	addi	r3,r2,3
    6780:	e0bff817 	ldw	r2,-32(fp)
    6784:	1085883a 	add	r2,r2,r2
    6788:	1009883a 	mov	r4,r2
    678c:	e0bffe17 	ldw	r2,-8(fp)
    6790:	1105883a 	add	r2,r2,r4
    6794:	1080000b 	ldhu	r2,0(r2)
    6798:	1009883a 	mov	r4,r2
    679c:	e0bffa17 	ldw	r2,-24(fp)
    67a0:	10c5883a 	add	r2,r2,r3
    67a4:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    67a8:	e0bff817 	ldw	r2,-32(fp)
    67ac:	10800044 	addi	r2,r2,1
    67b0:	e0bff815 	stw	r2,-32(fp)
    67b4:	003fdf06 	br	6734 <__alt_data_end+0xfc006734>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    67b8:	e0fffa17 	ldw	r3,-24(fp)
    67bc:	e0bffd03 	ldbu	r2,-12(fp)
    67c0:	10800044 	addi	r2,r2,1
    67c4:	1085883a 	add	r2,r2,r2
    67c8:	000f883a 	mov	r7,zero
    67cc:	100d883a 	mov	r6,r2
    67d0:	180b883a 	mov	r5,r3
    67d4:	e13ffb17 	ldw	r4,-20(fp)
    67d8:	00203280 	call	20328 <alt_avalon_i2c_master_tx>
    67dc:	1004c03a 	cmpne	r2,r2,zero
    67e0:	10803fcc 	andi	r2,r2,255
    67e4:	10000326 	beq	r2,zero,67f4 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    67e8:	010000b4 	movhi	r4,2
    67ec:	2116c304 	addi	r4,r4,23308
    67f0:	000e9240 	call	e924 <printf>
	}
	return (data+nwords);
    67f4:	e0bffd03 	ldbu	r2,-12(fp)
    67f8:	1085883a 	add	r2,r2,r2
    67fc:	1007883a 	mov	r3,r2
    6800:	e0bffe17 	ldw	r2,-8(fp)
    6804:	10c5883a 	add	r2,r2,r3
    6808:	8037883a 	mov	sp,r16
}
    680c:	e6ffff04 	addi	sp,fp,-4
    6810:	dfc00217 	ldw	ra,8(sp)
    6814:	df000117 	ldw	fp,4(sp)
    6818:	dc000017 	ldw	r16,0(sp)
    681c:	dec00304 	addi	sp,sp,12
    6820:	f800283a 	ret

00006824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    6824:	defff804 	addi	sp,sp,-32
    6828:	dfc00715 	stw	ra,28(sp)
    682c:	df000615 	stw	fp,24(sp)
    6830:	df000604 	addi	fp,sp,24
    6834:	e13ffe15 	stw	r4,-8(fp)
    6838:	2805883a 	mov	r2,r5
    683c:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    6840:	e03ffc8d 	sth	zero,-14(fp)
    6844:	e0bfff03 	ldbu	r2,-4(fp)
    6848:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    684c:	e03ffd05 	stb	zero,-12(fp)
    6850:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6854:	e13ffd04 	addi	r4,fp,-12
    6858:	e0fffc84 	addi	r3,fp,-14
    685c:	d8000115 	stw	zero,4(sp)
    6860:	00800084 	movi	r2,2
    6864:	d8800015 	stw	r2,0(sp)
    6868:	200f883a 	mov	r7,r4
    686c:	01800084 	movi	r6,2
    6870:	180b883a 	mov	r5,r3
    6874:	e13ffe17 	ldw	r4,-8(fp)
    6878:	002054c0 	call	2054c <alt_avalon_i2c_master_tx_rx>
    687c:	1004c03a 	cmpne	r2,r2,zero
    6880:	10803fcc 	andi	r2,r2,255
    6884:	10000326 	beq	r2,zero,6894 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    6888:	010000b4 	movhi	r4,2
    688c:	2116c904 	addi	r4,r4,23332
    6890:	000e9240 	call	e924 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    6894:	e0bffd03 	ldbu	r2,-12(fp)
    6898:	10803fcc 	andi	r2,r2,255
    689c:	1004923a 	slli	r2,r2,8
    68a0:	1007883a 	mov	r3,r2
    68a4:	e0bffd43 	ldbu	r2,-11(fp)
    68a8:	10803fcc 	andi	r2,r2,255
    68ac:	1884b03a 	or	r2,r3,r2
    68b0:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    68b4:	e0bffc0b 	ldhu	r2,-16(fp)
}
    68b8:	e037883a 	mov	sp,fp
    68bc:	dfc00117 	ldw	ra,4(sp)
    68c0:	df000017 	ldw	fp,0(sp)
    68c4:	dec00204 	addi	sp,sp,8
    68c8:	f800283a 	ret

000068cc <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    68cc:	defff304 	addi	sp,sp,-52
    68d0:	dfc00c15 	stw	ra,48(sp)
    68d4:	df000b15 	stw	fp,44(sp)
    68d8:	dc000a15 	stw	r16,40(sp)
    68dc:	df000b04 	addi	fp,sp,44
    68e0:	e13ffb15 	stw	r4,-20(fp)
    68e4:	3009883a 	mov	r4,r6
    68e8:	e1fffe15 	stw	r7,-8(fp)
    68ec:	e17ffc05 	stb	r5,-16(fp)
    68f0:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    68f4:	d809883a 	mov	r4,sp
    68f8:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    68fc:	e03ffa0d 	sth	zero,-24(fp)
    6900:	e13ffc03 	ldbu	r4,-16(fp)
    6904:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    6908:	e13ffd03 	ldbu	r4,-12(fp)
    690c:	2109883a 	add	r4,r4,r4
    6910:	213fffc4 	addi	r4,r4,-1
    6914:	e13ff815 	stw	r4,-32(fp)
    6918:	200b883a 	mov	r5,r4
    691c:	29400044 	addi	r5,r5,1
    6920:	2819883a 	mov	r12,r5
    6924:	001b883a 	mov	r13,zero
    6928:	600ad77a 	srli	r5,r12,29
    692c:	681290fa 	slli	r9,r13,3
    6930:	2a52b03a 	or	r9,r5,r9
    6934:	601090fa 	slli	r8,r12,3
    6938:	200b883a 	mov	r5,r4
    693c:	29400044 	addi	r5,r5,1
    6940:	2815883a 	mov	r10,r5
    6944:	0017883a 	mov	r11,zero
    6948:	500ad77a 	srli	r5,r10,29
    694c:	580690fa 	slli	r3,r11,3
    6950:	28c6b03a 	or	r3,r5,r3
    6954:	500490fa 	slli	r2,r10,3
    6958:	2005883a 	mov	r2,r4
    695c:	10800044 	addi	r2,r2,1
    6960:	108000c4 	addi	r2,r2,3
    6964:	1004d0ba 	srli	r2,r2,2
    6968:	1085883a 	add	r2,r2,r2
    696c:	1085883a 	add	r2,r2,r2
    6970:	d8b7c83a 	sub	sp,sp,r2
    6974:	d8800204 	addi	r2,sp,8
    6978:	1005883a 	mov	r2,r2
    697c:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    6980:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    6984:	e0fff917 	ldw	r3,-28(fp)
    6988:	e0bffd03 	ldbu	r2,-12(fp)
    698c:	1085883a 	add	r2,r2,r2
    6990:	1009883a 	mov	r4,r2
    6994:	e0bffa04 	addi	r2,fp,-24
    6998:	d8000115 	stw	zero,4(sp)
    699c:	d9000015 	stw	r4,0(sp)
    69a0:	180f883a 	mov	r7,r3
    69a4:	01800084 	movi	r6,2
    69a8:	100b883a 	mov	r5,r2
    69ac:	e13ffb17 	ldw	r4,-20(fp)
    69b0:	002054c0 	call	2054c <alt_avalon_i2c_master_tx_rx>
    69b4:	1004c03a 	cmpne	r2,r2,zero
    69b8:	10803fcc 	andi	r2,r2,255
    69bc:	10000326 	beq	r2,zero,69cc <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    69c0:	010000b4 	movhi	r4,2
    69c4:	2116cf04 	addi	r4,r4,23356
    69c8:	000e9240 	call	e924 <printf>
	}
	for(i = 0; i < nwords; i++) {
    69cc:	e03ff715 	stw	zero,-36(fp)
    69d0:	e0bffd03 	ldbu	r2,-12(fp)
    69d4:	e0fff717 	ldw	r3,-36(fp)
    69d8:	18801b0e 	bge	r3,r2,6a48 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    69dc:	e0bff717 	ldw	r2,-36(fp)
    69e0:	1085883a 	add	r2,r2,r2
    69e4:	1007883a 	mov	r3,r2
    69e8:	e0bffe17 	ldw	r2,-8(fp)
    69ec:	10c7883a 	add	r3,r2,r3
    69f0:	e0bff717 	ldw	r2,-36(fp)
    69f4:	1085883a 	add	r2,r2,r2
    69f8:	1009883a 	mov	r4,r2
    69fc:	e0bff917 	ldw	r2,-28(fp)
    6a00:	1105883a 	add	r2,r2,r4
    6a04:	10800003 	ldbu	r2,0(r2)
    6a08:	10803fcc 	andi	r2,r2,255
    6a0c:	1004923a 	slli	r2,r2,8
    6a10:	100b883a 	mov	r5,r2
    6a14:	e0bff717 	ldw	r2,-36(fp)
    6a18:	1085883a 	add	r2,r2,r2
    6a1c:	10800044 	addi	r2,r2,1
    6a20:	e13ff917 	ldw	r4,-28(fp)
    6a24:	2085883a 	add	r2,r4,r2
    6a28:	10800003 	ldbu	r2,0(r2)
    6a2c:	10803fcc 	andi	r2,r2,255
    6a30:	2884b03a 	or	r2,r5,r2
    6a34:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6a38:	e0bff717 	ldw	r2,-36(fp)
    6a3c:	10800044 	addi	r2,r2,1
    6a40:	e0bff715 	stw	r2,-36(fp)
    6a44:	003fe206 	br	69d0 <__alt_data_end+0xfc0069d0>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6a48:	e0bffd03 	ldbu	r2,-12(fp)
    6a4c:	1085883a 	add	r2,r2,r2
    6a50:	1007883a 	mov	r3,r2
    6a54:	e0bffe17 	ldw	r2,-8(fp)
    6a58:	10c5883a 	add	r2,r2,r3
    6a5c:	8037883a 	mov	sp,r16
}
    6a60:	e6ffff04 	addi	sp,fp,-4
    6a64:	dfc00217 	ldw	ra,8(sp)
    6a68:	df000117 	ldw	fp,4(sp)
    6a6c:	dc000017 	ldw	r16,0(sp)
    6a70:	dec00304 	addi	sp,sp,12
    6a74:	f800283a 	ret

00006a78 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6a78:	defffd04 	addi	sp,sp,-12
    6a7c:	dfc00215 	stw	ra,8(sp)
    6a80:	df000115 	stw	fp,4(sp)
    6a84:	df000104 	addi	fp,sp,4
    6a88:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6a8c:	01400284 	movi	r5,10
    6a90:	e13fff17 	ldw	r4,-4(fp)
    6a94:	00201200 	call	20120 <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6a98:	01902f04 	movi	r6,16572
    6a9c:	01400c04 	movi	r5,48
    6aa0:	e13fff17 	ldw	r4,-4(fp)
    6aa4:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6aa8:	01801384 	movi	r6,78
    6aac:	01400a04 	movi	r5,40
    6ab0:	e13fff17 	ldw	r4,-4(fp)
    6ab4:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6ab8:	01800844 	movi	r6,33
    6abc:	01400084 	movi	r5,2
    6ac0:	e13fff17 	ldw	r4,-4(fp)
    6ac4:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6ac8:	01800104 	movi	r6,4
    6acc:	01400104 	movi	r5,4
    6ad0:	e13fff17 	ldw	r4,-4(fp)
    6ad4:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_32);
    6ad8:	000d883a 	mov	r6,zero
    6adc:	01400184 	movi	r5,6
    6ae0:	e13fff17 	ldw	r4,-4(fp)
    6ae4:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6ae8:	01800404 	movi	r6,16
    6aec:	01400284 	movi	r5,10
    6af0:	e13fff17 	ldw	r4,-4(fp)
    6af4:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6af8:	0001883a 	nop
    6afc:	e037883a 	mov	sp,fp
    6b00:	dfc00117 	ldw	ra,4(sp)
    6b04:	df000017 	ldw	fp,0(sp)
    6b08:	dec00204 	addi	sp,sp,8
    6b0c:	f800283a 	ret

00006b10 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6b10:	defffd04 	addi	sp,sp,-12
    6b14:	dfc00215 	stw	ra,8(sp)
    6b18:	df000115 	stw	fp,4(sp)
    6b1c:	df000104 	addi	fp,sp,4
    6b20:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6b24:	01901004 	movi	r6,16448
    6b28:	01400884 	movi	r5,34
    6b2c:	e13fff17 	ldw	r4,-4(fp)
    6b30:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6b34:	019c1c04 	movi	r6,28784
    6b38:	01400404 	movi	r5,16
    6b3c:	e13fff17 	ldw	r4,-4(fp)
    6b40:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6b44:	01808004 	movi	r6,512
    6b48:	01400384 	movi	r5,14
    6b4c:	e13fff17 	ldw	r4,-4(fp)
    6b50:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    6b54:	01804044 	movi	r6,257
    6b58:	01400904 	movi	r5,36
    6b5c:	e13fff17 	ldw	r4,-4(fp)
    6b60:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6b64:	0001883a 	nop
    6b68:	e037883a 	mov	sp,fp
    6b6c:	dfc00117 	ldw	ra,4(sp)
    6b70:	df000017 	ldw	fp,0(sp)
    6b74:	dec00204 	addi	sp,sp,8
    6b78:	f800283a 	ret

00006b7c <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    6b7c:	defffd04 	addi	sp,sp,-12
    6b80:	dfc00215 	stw	ra,8(sp)
    6b84:	df000115 	stw	fp,4(sp)
    6b88:	df000104 	addi	fp,sp,4
    6b8c:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    6b90:	000b883a 	mov	r5,zero
    6b94:	e13fff17 	ldw	r4,-4(fp)
    6b98:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6b9c:	10bfffcc 	andi	r2,r2,65535
    6ba0:	100b883a 	mov	r5,r2
    6ba4:	010000b4 	movhi	r4,2
    6ba8:	2116d504 	addi	r4,r4,23380
    6bac:	000e9240 	call	e924 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    6bb0:	01400084 	movi	r5,2
    6bb4:	e13fff17 	ldw	r4,-4(fp)
    6bb8:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bbc:	10bfffcc 	andi	r2,r2,65535
    6bc0:	100b883a 	mov	r5,r2
    6bc4:	010000b4 	movhi	r4,2
    6bc8:	2116d804 	addi	r4,r4,23392
    6bcc:	000e9240 	call	e924 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    6bd0:	01400104 	movi	r5,4
    6bd4:	e13fff17 	ldw	r4,-4(fp)
    6bd8:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bdc:	10bfffcc 	andi	r2,r2,65535
    6be0:	100b883a 	mov	r5,r2
    6be4:	010000b4 	movhi	r4,2
    6be8:	2116dd04 	addi	r4,r4,23412
    6bec:	000e9240 	call	e924 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    6bf0:	01400184 	movi	r5,6
    6bf4:	e13fff17 	ldw	r4,-4(fp)
    6bf8:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bfc:	10bfffcc 	andi	r2,r2,65535
    6c00:	100b883a 	mov	r5,r2
    6c04:	010000b4 	movhi	r4,2
    6c08:	2116e204 	addi	r4,r4,23432
    6c0c:	000e9240 	call	e924 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    6c10:	01400284 	movi	r5,10
    6c14:	e13fff17 	ldw	r4,-4(fp)
    6c18:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c1c:	10bfffcc 	andi	r2,r2,65535
    6c20:	100b883a 	mov	r5,r2
    6c24:	010000b4 	movhi	r4,2
    6c28:	2116e704 	addi	r4,r4,23452
    6c2c:	000e9240 	call	e924 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    6c30:	01400c04 	movi	r5,48
    6c34:	e13fff17 	ldw	r4,-4(fp)
    6c38:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c3c:	10bfffcc 	andi	r2,r2,65535
    6c40:	100b883a 	mov	r5,r2
    6c44:	010000b4 	movhi	r4,2
    6c48:	2116ec04 	addi	r4,r4,23472
    6c4c:	000e9240 	call	e924 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    6c50:	01400384 	movi	r5,14
    6c54:	e13fff17 	ldw	r4,-4(fp)
    6c58:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c5c:	10bfffcc 	andi	r2,r2,65535
    6c60:	100b883a 	mov	r5,r2
    6c64:	010000b4 	movhi	r4,2
    6c68:	2116f104 	addi	r4,r4,23492
    6c6c:	000e9240 	call	e924 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    6c70:	01400904 	movi	r5,36
    6c74:	e13fff17 	ldw	r4,-4(fp)
    6c78:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c7c:	10bfffcc 	andi	r2,r2,65535
    6c80:	100b883a 	mov	r5,r2
    6c84:	010000b4 	movhi	r4,2
    6c88:	2116f604 	addi	r4,r4,23512
    6c8c:	000e9240 	call	e924 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    6c90:	01400e04 	movi	r5,56
    6c94:	e13fff17 	ldw	r4,-4(fp)
    6c98:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c9c:	10bfffcc 	andi	r2,r2,65535
    6ca0:	100b883a 	mov	r5,r2
    6ca4:	010000b4 	movhi	r4,2
    6ca8:	2116fb04 	addi	r4,r4,23532
    6cac:	000e9240 	call	e924 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    6cb0:	01400804 	movi	r5,32
    6cb4:	e13fff17 	ldw	r4,-4(fp)
    6cb8:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cbc:	10bfffcc 	andi	r2,r2,65535
    6cc0:	100b883a 	mov	r5,r2
    6cc4:	010000b4 	movhi	r4,2
    6cc8:	21170004 	addi	r4,r4,23552
    6ccc:	000e9240 	call	e924 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    6cd0:	01400404 	movi	r5,16
    6cd4:	e13fff17 	ldw	r4,-4(fp)
    6cd8:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cdc:	10bfffcc 	andi	r2,r2,65535
    6ce0:	100b883a 	mov	r5,r2
    6ce4:	010000b4 	movhi	r4,2
    6ce8:	21170504 	addi	r4,r4,23572
    6cec:	000e9240 	call	e924 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    6cf0:	01400884 	movi	r5,34
    6cf4:	e13fff17 	ldw	r4,-4(fp)
    6cf8:	00068240 	call	6824 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cfc:	10bfffcc 	andi	r2,r2,65535
    6d00:	100b883a 	mov	r5,r2
    6d04:	010000b4 	movhi	r4,2
    6d08:	21170a04 	addi	r4,r4,23592
    6d0c:	000e9240 	call	e924 <printf>
}
    6d10:	0001883a 	nop
    6d14:	e037883a 	mov	sp,fp
    6d18:	dfc00117 	ldw	ra,4(sp)
    6d1c:	df000017 	ldw	fp,0(sp)
    6d20:	dec00204 	addi	sp,sp,8
    6d24:	f800283a 	ret

00006d28 <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>:

void SGTL5000vol_change(ALT_AVALON_I2C_DEV_t* dev, alt_u8 vol) {
    6d28:	defffa04 	addi	sp,sp,-24
    6d2c:	dfc00515 	stw	ra,20(sp)
    6d30:	df000415 	stw	fp,16(sp)
    6d34:	df000404 	addi	fp,sp,16
    6d38:	e13ffe15 	stw	r4,-8(fp)
    6d3c:	2805883a 	mov	r2,r5
    6d40:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 new_vol = DAC_MIN_VOL - ((vol * DAC_VOL_RANGE) / 0x7F);
    6d44:	e0bfff03 	ldbu	r2,-4(fp)
    6d48:	01402d04 	movi	r5,180
    6d4c:	1009883a 	mov	r4,r2
    6d50:	000ce000 	call	ce00 <__mulsi3>
    6d54:	01401fc4 	movi	r5,127
    6d58:	1009883a 	mov	r4,r2
    6d5c:	000cc4c0 	call	cc4c <__divsi3>
    6d60:	1007883a 	mov	r3,r2
    6d64:	00803c04 	movi	r2,240
    6d68:	10c5c83a 	sub	r2,r2,r3
    6d6c:	e0bffc15 	stw	r2,-16(fp)
	alt_u16 set_vol = ((new_vol << 8) | new_vol);
    6d70:	e0bffc17 	ldw	r2,-16(fp)
    6d74:	1004923a 	slli	r2,r2,8
    6d78:	1007883a 	mov	r3,r2
    6d7c:	e0bffc17 	ldw	r2,-16(fp)
    6d80:	1884b03a 	or	r2,r3,r2
    6d84:	e0bffd0d 	sth	r2,-12(fp)
	I2Creg_wr(dev, DAC_VOL, set_vol);
    6d88:	e0bffd0b 	ldhu	r2,-12(fp)
    6d8c:	100d883a 	mov	r6,r2
    6d90:	01400404 	movi	r5,16
    6d94:	e13ffe17 	ldw	r4,-8(fp)
    6d98:	00065c80 	call	65c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	printf("New Volume:\t%x\n", new_vol);
    6d9c:	e17ffc17 	ldw	r5,-16(fp)
    6da0:	010000b4 	movhi	r4,2
    6da4:	21170f04 	addi	r4,r4,23612
    6da8:	000e9240 	call	e924 <printf>
	printf("Set Volume:\t%x\n", set_vol);
    6dac:	e0bffd0b 	ldhu	r2,-12(fp)
    6db0:	100b883a 	mov	r5,r2
    6db4:	010000b4 	movhi	r4,2
    6db8:	21171304 	addi	r4,r4,23628
    6dbc:	000e9240 	call	e924 <printf>
}
    6dc0:	0001883a 	nop
    6dc4:	e037883a 	mov	sp,fp
    6dc8:	dfc00117 	ldw	ra,4(sp)
    6dcc:	df000017 	ldw	fp,0(sp)
    6dd0:	dec00204 	addi	sp,sp,8
    6dd4:	f800283a 	ret

00006dd8 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    6dd8:	defffb04 	addi	sp,sp,-20
    6ddc:	dfc00415 	stw	ra,16(sp)
    6de0:	df000315 	stw	fp,12(sp)
    6de4:	df000304 	addi	fp,sp,12
    6de8:	e13ffe15 	stw	r4,-8(fp)
    6dec:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    6df0:	e0bffe17 	ldw	r2,-8(fp)
    6df4:	1009883a 	mov	r4,r2
    6df8:	0004a840 	call	4a84 <_ZN15USBDeviceConfigC1Ev>
    6dfc:	e0bffe17 	ldw	r2,-8(fp)
    6e00:	10800104 	addi	r2,r2,4
    6e04:	1009883a 	mov	r4,r2
    6e08:	0008ce00 	call	8ce0 <_ZN21UsbMidiConfigXtracterC1Ev>
    6e0c:	008000b4 	movhi	r2,2
    6e10:	10972104 	addi	r2,r2,23684
    6e14:	e0fffe17 	ldw	r3,-8(fp)
    6e18:	18800015 	stw	r2,0(r3)
    6e1c:	008000b4 	movhi	r2,2
    6e20:	10972d04 	addi	r2,r2,23732
    6e24:	e0fffe17 	ldw	r3,-8(fp)
    6e28:	18800115 	stw	r2,4(r3)
    6e2c:	e0bffe17 	ldw	r2,-8(fp)
    6e30:	e0ffff17 	ldw	r3,-4(fp)
    6e34:	10c00215 	stw	r3,8(r2)
    6e38:	e0bffe17 	ldw	r2,-8(fp)
    6e3c:	10000305 	stb	zero,12(r2)
    6e40:	e0bffe17 	ldw	r2,-8(fp)
    6e44:	10000345 	stb	zero,13(r2)
    6e48:	e0bffe17 	ldw	r2,-8(fp)
    6e4c:	10001705 	stb	zero,92(r2)
    6e50:	e0bffe17 	ldw	r2,-8(fp)
    6e54:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6e58:	e03ffd05 	stb	zero,-12(fp)
    6e5c:	e0bffd03 	ldbu	r2,-12(fp)
    6e60:	108000e8 	cmpgeui	r2,r2,3
    6e64:	10002d1e 	bne	r2,zero,6f1c <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    6e68:	e0fffd03 	ldbu	r3,-12(fp)
    6e6c:	e13ffe17 	ldw	r4,-8(fp)
    6e70:	1805883a 	mov	r2,r3
    6e74:	1085883a 	add	r2,r2,r2
    6e78:	10c5883a 	add	r2,r2,r3
    6e7c:	2085883a 	add	r2,r4,r2
    6e80:	108004c4 	addi	r2,r2,19
    6e84:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    6e88:	e13ffd03 	ldbu	r4,-12(fp)
    6e8c:	e0bffd03 	ldbu	r2,-12(fp)
    6e90:	10000226 	beq	r2,zero,6e9c <_ZN9USBH_MIDIC1EP3USB+0xc4>
    6e94:	0007883a 	mov	r3,zero
    6e98:	00000106 	br	6ea0 <_ZN9USBH_MIDIC1EP3USB+0xc8>
    6e9c:	00c00204 	movi	r3,8
    6ea0:	e17ffe17 	ldw	r5,-8(fp)
    6ea4:	2005883a 	mov	r2,r4
    6ea8:	1085883a 	add	r2,r2,r2
    6eac:	1105883a 	add	r2,r2,r4
    6eb0:	2885883a 	add	r2,r5,r2
    6eb4:	10800504 	addi	r2,r2,20
    6eb8:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    6ebc:	e13ffd03 	ldbu	r4,-12(fp)
    6ec0:	e0bffd03 	ldbu	r2,-12(fp)
    6ec4:	10000226 	beq	r2,zero,6ed0 <_ZN9USBH_MIDIC1EP3USB+0xf8>
    6ec8:	00c00044 	movi	r3,1
    6ecc:	00000106 	br	6ed4 <_ZN9USBH_MIDIC1EP3USB+0xfc>
    6ed0:	00c003c4 	movi	r3,15
    6ed4:	e17ffe17 	ldw	r5,-8(fp)
    6ed8:	2005883a 	mov	r2,r4
    6edc:	1085883a 	add	r2,r2,r2
    6ee0:	1105883a 	add	r2,r2,r4
    6ee4:	2885883a 	add	r2,r5,r2
    6ee8:	10800404 	addi	r2,r2,16
    6eec:	18c7883a 	add	r3,r3,r3
    6ef0:	18cb883a 	add	r5,r3,r3
    6ef4:	10c00143 	ldbu	r3,5(r2)
    6ef8:	18c000cc 	andi	r3,r3,3
    6efc:	1809883a 	mov	r4,r3
    6f00:	2807883a 	mov	r3,r5
    6f04:	20c6b03a 	or	r3,r4,r3
    6f08:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6f0c:	e0bffd03 	ldbu	r2,-12(fp)
    6f10:	10800044 	addi	r2,r2,1
    6f14:	e0bffd05 	stb	r2,-12(fp)
    6f18:	003fd006 	br	6e5c <__alt_data_end+0xfc006e5c>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    6f1c:	e0bffe17 	ldw	r2,-8(fp)
    6f20:	10800217 	ldw	r2,8(r2)
    6f24:	10000626 	beq	r2,zero,6f40 <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    6f28:	e0bffe17 	ldw	r2,-8(fp)
    6f2c:	10800217 	ldw	r2,8(r2)
    6f30:	e0fffe17 	ldw	r3,-8(fp)
    6f34:	180b883a 	mov	r5,r3
    6f38:	1009883a 	mov	r4,r2
    6f3c:	00048380 	call	4838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    6f40:	0001883a 	nop
    6f44:	e037883a 	mov	sp,fp
    6f48:	dfc00117 	ldw	ra,4(sp)
    6f4c:	df000017 	ldw	fp,0(sp)
    6f50:	dec00204 	addi	sp,sp,8
    6f54:	f800283a 	ret

00006f58 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    6f58:	deffe004 	addi	sp,sp,-128
    6f5c:	dfc01f15 	stw	ra,124(sp)
    6f60:	df001e15 	stw	fp,120(sp)
    6f64:	df001e04 	addi	fp,sp,120
    6f68:	e13ffc15 	stw	r4,-16(fp)
    6f6c:	2809883a 	mov	r4,r5
    6f70:	3007883a 	mov	r3,r6
    6f74:	3805883a 	mov	r2,r7
    6f78:	e13ffd05 	stb	r4,-12(fp)
    6f7c:	e0fffe05 	stb	r3,-8(fp)
    6f80:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    6f84:	e0bfe944 	addi	r2,fp,-91
    6f88:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    6f8c:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    6f90:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    6f94:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    6f98:	00800044 	movi	r2,1
    6f9c:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    6fa0:	00800044 	movi	r2,1
    6fa4:	e0bfe3c5 	stb	r2,-113(fp)
    6fa8:	e0bfe3c3 	ldbu	r2,-113(fp)
    6fac:	108000e8 	cmpgeui	r2,r2,3
    6fb0:	10001a1e 	bne	r2,zero,701c <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    6fb4:	e0ffe3c3 	ldbu	r3,-113(fp)
    6fb8:	e13ffc17 	ldw	r4,-16(fp)
    6fbc:	1805883a 	mov	r2,r3
    6fc0:	1085883a 	add	r2,r2,r2
    6fc4:	10c5883a 	add	r2,r2,r3
    6fc8:	2085883a 	add	r2,r4,r2
    6fcc:	10800404 	addi	r2,r2,16
    6fd0:	11000143 	ldbu	r4,5(r2)
    6fd4:	00ffff84 	movi	r3,-2
    6fd8:	20c6703a 	and	r3,r4,r3
    6fdc:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    6fe0:	e0ffe3c3 	ldbu	r3,-113(fp)
    6fe4:	e13ffc17 	ldw	r4,-16(fp)
    6fe8:	1805883a 	mov	r2,r3
    6fec:	1085883a 	add	r2,r2,r2
    6ff0:	10c5883a 	add	r2,r2,r3
    6ff4:	2085883a 	add	r2,r4,r2
    6ff8:	10800404 	addi	r2,r2,16
    6ffc:	11000143 	ldbu	r4,5(r2)
    7000:	00ffff44 	movi	r3,-3
    7004:	20c6703a 	and	r3,r4,r3
    7008:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    700c:	e0bfe3c3 	ldbu	r2,-113(fp)
    7010:	10800044 	addi	r2,r2,1
    7014:	e0bfe3c5 	stb	r2,-113(fp)
    7018:	003fe306 	br	6fa8 <__alt_data_end+0xfc006fa8>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    701c:	e0bffc17 	ldw	r2,-16(fp)
    7020:	10800217 	ldw	r2,8(r2)
    7024:	1009883a 	mov	r4,r2
    7028:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    702c:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    7030:	e0bffc17 	ldw	r2,-16(fp)
    7034:	10800303 	ldbu	r2,12(r2)
    7038:	10803fcc 	andi	r2,r2,255
    703c:	10000226 	beq	r2,zero,7048 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    7040:	00bff644 	movi	r2,-39
    7044:	0001c706 	br	7764 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    7048:	e0bfe817 	ldw	r2,-96(fp)
    704c:	10800017 	ldw	r2,0(r2)
    7050:	10800017 	ldw	r2,0(r2)
    7054:	e0fffc17 	ldw	r3,-16(fp)
    7058:	18c00303 	ldbu	r3,12(r3)
    705c:	18c03fcc 	andi	r3,r3,255
    7060:	180b883a 	mov	r5,r3
    7064:	e13fe817 	ldw	r4,-96(fp)
    7068:	103ee83a 	callr	r2
    706c:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7070:	e0bfe617 	ldw	r2,-104(fp)
    7074:	1000021e 	bne	r2,zero,7080 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7078:	00bff584 	movi	r2,-42
    707c:	0001b906 	br	7764 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    7080:	e0bfe617 	ldw	r2,-104(fp)
    7084:	10c00003 	ldbu	r3,0(r2)
    7088:	11000043 	ldbu	r4,1(r2)
    708c:	2008923a 	slli	r4,r4,8
    7090:	20c6b03a 	or	r3,r4,r3
    7094:	11000083 	ldbu	r4,2(r2)
    7098:	2008943a 	slli	r4,r4,16
    709c:	20c6b03a 	or	r3,r4,r3
    70a0:	108000c3 	ldbu	r2,3(r2)
    70a4:	1004963a 	slli	r2,r2,24
    70a8:	10c4b03a 	or	r2,r2,r3
    70ac:	1000021e 	bne	r2,zero,70b8 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    70b0:	00bff5c4 	movi	r2,-41
    70b4:	0001ab06 	br	7764 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    70b8:	e0bfe617 	ldw	r2,-104(fp)
    70bc:	10c00003 	ldbu	r3,0(r2)
    70c0:	11000043 	ldbu	r4,1(r2)
    70c4:	2008923a 	slli	r4,r4,8
    70c8:	20c6b03a 	or	r3,r4,r3
    70cc:	11000083 	ldbu	r4,2(r2)
    70d0:	2008943a 	slli	r4,r4,16
    70d4:	20c6b03a 	or	r3,r4,r3
    70d8:	108000c3 	ldbu	r2,3(r2)
    70dc:	1004963a 	slli	r2,r2,24
    70e0:	10c4b03a 	or	r2,r2,r3
    70e4:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    70e8:	e0bffc17 	ldw	r2,-16(fp)
    70ec:	10c004c4 	addi	r3,r2,19
    70f0:	e0bfe617 	ldw	r2,-104(fp)
    70f4:	19803fcc 	andi	r6,r3,255
    70f8:	11000003 	ldbu	r4,0(r2)
    70fc:	2008703a 	and	r4,r4,zero
    7100:	200b883a 	mov	r5,r4
    7104:	3009883a 	mov	r4,r6
    7108:	2908b03a 	or	r4,r5,r4
    710c:	11000005 	stb	r4,0(r2)
    7110:	1808d23a 	srli	r4,r3,8
    7114:	21803fcc 	andi	r6,r4,255
    7118:	11000043 	ldbu	r4,1(r2)
    711c:	2008703a 	and	r4,r4,zero
    7120:	200b883a 	mov	r5,r4
    7124:	3009883a 	mov	r4,r6
    7128:	2908b03a 	or	r4,r5,r4
    712c:	11000045 	stb	r4,1(r2)
    7130:	1808d43a 	srli	r4,r3,16
    7134:	21803fcc 	andi	r6,r4,255
    7138:	11000083 	ldbu	r4,2(r2)
    713c:	2008703a 	and	r4,r4,zero
    7140:	200b883a 	mov	r5,r4
    7144:	3009883a 	mov	r4,r6
    7148:	2908b03a 	or	r4,r5,r4
    714c:	11000085 	stb	r4,2(r2)
    7150:	180ad63a 	srli	r5,r3,24
    7154:	10c000c3 	ldbu	r3,3(r2)
    7158:	1806703a 	and	r3,r3,zero
    715c:	1809883a 	mov	r4,r3
    7160:	2807883a 	mov	r3,r5
    7164:	20c6b03a 	or	r3,r4,r3
    7168:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    716c:	e0bfe617 	ldw	r2,-104(fp)
    7170:	e0ffff03 	ldbu	r3,-4(fp)
    7174:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    7178:	e0bffc17 	ldw	r2,-16(fp)
    717c:	10c00217 	ldw	r3,8(r2)
    7180:	e0bfe944 	addi	r2,fp,-91
    7184:	d8800015 	stw	r2,0(sp)
    7188:	01c00204 	movi	r7,8
    718c:	000d883a 	mov	r6,zero
    7190:	000b883a 	mov	r5,zero
    7194:	1809883a 	mov	r4,r3
    7198:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    719c:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    71a0:	e0bfe617 	ldw	r2,-104(fp)
    71a4:	e0ffe717 	ldw	r3,-100(fp)
    71a8:	19403fcc 	andi	r5,r3,255
    71ac:	10c00003 	ldbu	r3,0(r2)
    71b0:	1806703a 	and	r3,r3,zero
    71b4:	1809883a 	mov	r4,r3
    71b8:	2807883a 	mov	r3,r5
    71bc:	20c6b03a 	or	r3,r4,r3
    71c0:	10c00005 	stb	r3,0(r2)
    71c4:	e0ffe717 	ldw	r3,-100(fp)
    71c8:	1806d23a 	srli	r3,r3,8
    71cc:	19403fcc 	andi	r5,r3,255
    71d0:	10c00043 	ldbu	r3,1(r2)
    71d4:	1806703a 	and	r3,r3,zero
    71d8:	1809883a 	mov	r4,r3
    71dc:	2807883a 	mov	r3,r5
    71e0:	20c6b03a 	or	r3,r4,r3
    71e4:	10c00045 	stb	r3,1(r2)
    71e8:	e0ffe717 	ldw	r3,-100(fp)
    71ec:	1806d43a 	srli	r3,r3,16
    71f0:	19403fcc 	andi	r5,r3,255
    71f4:	10c00083 	ldbu	r3,2(r2)
    71f8:	1806703a 	and	r3,r3,zero
    71fc:	1809883a 	mov	r4,r3
    7200:	2807883a 	mov	r3,r5
    7204:	20c6b03a 	or	r3,r4,r3
    7208:	10c00085 	stb	r3,2(r2)
    720c:	e0ffe717 	ldw	r3,-100(fp)
    7210:	180ad63a 	srli	r5,r3,24
    7214:	10c000c3 	ldbu	r3,3(r2)
    7218:	1806703a 	and	r3,r3,zero
    721c:	1809883a 	mov	r4,r3
    7220:	2807883a 	mov	r3,r5
    7224:	20c6b03a 	or	r3,r4,r3
    7228:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    722c:	e0bfe303 	ldbu	r2,-116(fp)
    7230:	10013a1e 	bne	r2,zero,771c <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    7234:	e0bfe817 	ldw	r2,-96(fp)
    7238:	10800017 	ldw	r2,0(r2)
    723c:	10800104 	addi	r2,r2,4
    7240:	10800017 	ldw	r2,0(r2)
    7244:	e0fffd03 	ldbu	r3,-12(fp)
    7248:	e13ffe03 	ldbu	r4,-8(fp)
    724c:	200f883a 	mov	r7,r4
    7250:	000d883a 	mov	r6,zero
    7254:	180b883a 	mov	r5,r3
    7258:	e13fe817 	ldw	r4,-96(fp)
    725c:	103ee83a 	callr	r2
    7260:	1007883a 	mov	r3,r2
    7264:	e0bffc17 	ldw	r2,-16(fp)
    7268:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    726c:	e0bffc17 	ldw	r2,-16(fp)
    7270:	10800303 	ldbu	r2,12(r2)
    7274:	10803fcc 	andi	r2,r2,255
    7278:	1000021e 	bne	r2,zero,7284 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    727c:	00bff504 	movi	r2,-44
    7280:	00013806 	br	7764 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    7284:	e0bfe517 	ldw	r2,-108(fp)
    7288:	10c001c3 	ldbu	r3,7(r2)
    728c:	e0bffc17 	ldw	r2,-16(fp)
    7290:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    7294:	e0bffc17 	ldw	r2,-16(fp)
    7298:	10c00217 	ldw	r3,8(r2)
    729c:	e0bffc17 	ldw	r2,-16(fp)
    72a0:	10800303 	ldbu	r2,12(r2)
    72a4:	10803fcc 	andi	r2,r2,255
    72a8:	100f883a 	mov	r7,r2
    72ac:	000d883a 	mov	r6,zero
    72b0:	000b883a 	mov	r5,zero
    72b4:	1809883a 	mov	r4,r3
    72b8:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    72bc:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    72c0:	e0bfe303 	ldbu	r2,-116(fp)
    72c4:	10001026 	beq	r2,zero,7308 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    72c8:	e0bfe617 	ldw	r2,-104(fp)
    72cc:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    72d0:	e0bfe817 	ldw	r2,-96(fp)
    72d4:	10800017 	ldw	r2,0(r2)
    72d8:	10800204 	addi	r2,r2,8
    72dc:	10800017 	ldw	r2,0(r2)
    72e0:	e0fffc17 	ldw	r3,-16(fp)
    72e4:	18c00303 	ldbu	r3,12(r3)
    72e8:	18c03fcc 	andi	r3,r3,255
    72ec:	180b883a 	mov	r5,r3
    72f0:	e13fe817 	ldw	r4,-96(fp)
    72f4:	103ee83a 	callr	r2
                bAddress = 0;
    72f8:	e0bffc17 	ldw	r2,-16(fp)
    72fc:	10000305 	stb	zero,12(r2)
                return rcode;
    7300:	e0bfe303 	ldbu	r2,-116(fp)
    7304:	00011706 	br	7764 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    7308:	e0bffc17 	ldw	r2,-16(fp)
    730c:	10800303 	ldbu	r2,12(r2)
    7310:	10803fcc 	andi	r2,r2,255
    7314:	01402004 	movi	r5,128
    7318:	1009883a 	mov	r4,r2
    731c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    7320:	e0bfe617 	ldw	r2,-104(fp)
    7324:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    7328:	e0bfe817 	ldw	r2,-96(fp)
    732c:	10800017 	ldw	r2,0(r2)
    7330:	10800017 	ldw	r2,0(r2)
    7334:	e0fffc17 	ldw	r3,-16(fp)
    7338:	18c00303 	ldbu	r3,12(r3)
    733c:	18c03fcc 	andi	r3,r3,255
    7340:	180b883a 	mov	r5,r3
    7344:	e13fe817 	ldw	r4,-96(fp)
    7348:	103ee83a 	callr	r2
    734c:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7350:	e0bfe617 	ldw	r2,-104(fp)
    7354:	1000021e 	bne	r2,zero,7360 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7358:	00bff584 	movi	r2,-42
    735c:	00010106 	br	7764 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    7360:	e0bfe617 	ldw	r2,-104(fp)
    7364:	e0ffff03 	ldbu	r3,-4(fp)
    7368:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    736c:	e0bffc17 	ldw	r2,-16(fp)
    7370:	10c00217 	ldw	r3,8(r2)
    7374:	e0bffc17 	ldw	r2,-16(fp)
    7378:	10800303 	ldbu	r2,12(r2)
    737c:	11003fcc 	andi	r4,r2,255
    7380:	00800484 	movi	r2,18
    7384:	117fffcc 	andi	r5,r2,65535
    7388:	e0bfe944 	addi	r2,fp,-91
    738c:	d8800015 	stw	r2,0(sp)
    7390:	280f883a 	mov	r7,r5
    7394:	000d883a 	mov	r6,zero
    7398:	200b883a 	mov	r5,r4
    739c:	1809883a 	mov	r4,r3
    73a0:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    73a4:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    73a8:	e0bfe303 	ldbu	r2,-116(fp)
    73ac:	1000dd1e 	bne	r2,zero,7724 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    73b0:	e0bfe517 	ldw	r2,-108(fp)
    73b4:	10c00203 	ldbu	r3,8(r2)
    73b8:	10800243 	ldbu	r2,9(r2)
    73bc:	1004923a 	slli	r2,r2,8
    73c0:	10c4b03a 	or	r2,r2,r3
    73c4:	1007883a 	mov	r3,r2
    73c8:	e0bffc17 	ldw	r2,-16(fp)
    73cc:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    73d0:	e0bfe517 	ldw	r2,-108(fp)
    73d4:	10c00283 	ldbu	r3,10(r2)
    73d8:	108002c3 	ldbu	r2,11(r2)
    73dc:	1004923a 	slli	r2,r2,8
    73e0:	10c4b03a 	or	r2,r2,r3
    73e4:	1007883a 	mov	r3,r2
    73e8:	e0bffc17 	ldw	r2,-16(fp)
    73ec:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    73f0:	e0bfe517 	ldw	r2,-108(fp)
    73f4:	10800443 	ldbu	r2,17(r2)
    73f8:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    73fc:	e0bffc17 	ldw	r2,-16(fp)
    7400:	10c00217 	ldw	r3,8(r2)
    7404:	e0bffc17 	ldw	r2,-16(fp)
    7408:	10800303 	ldbu	r2,12(r2)
    740c:	11003fcc 	andi	r4,r2,255
    7410:	e0bffc17 	ldw	r2,-16(fp)
    7414:	108004c4 	addi	r2,r2,19
    7418:	100f883a 	mov	r7,r2
    741c:	01800044 	movi	r6,1
    7420:	200b883a 	mov	r5,r4
    7424:	1809883a 	mov	r4,r3
    7428:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    742c:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    7430:	e0bfe303 	ldbu	r2,-116(fp)
    7434:	1000bd1e 	bne	r2,zero,772c <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    7438:	e0bffc17 	ldw	r2,-16(fp)
    743c:	1080040b 	ldhu	r2,16(r2)
    7440:	10bfffcc 	andi	r2,r2,65535
    7444:	01402004 	movi	r5,128
    7448:	1009883a 	mov	r4,r2
    744c:	0008d140 	call	8d14 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    7450:	e0bffc17 	ldw	r2,-16(fp)
    7454:	1080038b 	ldhu	r2,14(r2)
    7458:	10bfffcc 	andi	r2,r2,65535
    745c:	01402004 	movi	r5,128
    7460:	1009883a 	mov	r4,r2
    7464:	0008d140 	call	8d14 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    7468:	e0bfe903 	ldbu	r2,-92(fp)
    746c:	01402004 	movi	r5,128
    7470:	1009883a 	mov	r4,r2
    7474:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    7478:	e0bffc17 	ldw	r2,-16(fp)
    747c:	00c000c4 	movi	r3,3
    7480:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    7484:	e13ffc17 	ldw	r4,-16(fp)
    7488:	00077f00 	call	77f0 <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    748c:	e03fe405 	stb	zero,-112(fp)
    7490:	e0ffe403 	ldbu	r3,-112(fp)
    7494:	e0bfe903 	ldbu	r2,-92(fp)
    7498:	18802a2e 	bgeu	r3,r2,7544 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    749c:	e0bffc17 	ldw	r2,-16(fp)
    74a0:	10c00104 	addi	r3,r2,4
    74a4:	e0bfee04 	addi	r2,fp,-72
    74a8:	01800044 	movi	r6,1
    74ac:	180b883a 	mov	r5,r3
    74b0:	1009883a 	mov	r4,r2
    74b4:	00082f00 	call	82f0 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    74b8:	e0bffc17 	ldw	r2,-16(fp)
    74bc:	10c00217 	ldw	r3,8(r2)
    74c0:	e0bffc17 	ldw	r2,-16(fp)
    74c4:	10800303 	ldbu	r2,12(r2)
    74c8:	11003fcc 	andi	r4,r2,255
    74cc:	e17fe403 	ldbu	r5,-112(fp)
    74d0:	e0bfee04 	addi	r2,fp,-72
    74d4:	d8800015 	stw	r2,0(sp)
    74d8:	280f883a 	mov	r7,r5
    74dc:	000d883a 	mov	r6,zero
    74e0:	200b883a 	mov	r5,r4
    74e4:	1809883a 	mov	r4,r3
    74e8:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    74ec:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    74f0:	e0bfe303 	ldbu	r2,-116(fp)
    74f4:	10008f1e 	bne	r2,zero,7734 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    74f8:	e0bfee04 	addi	r2,fp,-72
    74fc:	1009883a 	mov	r4,r2
    7500:	0008bfc0 	call	8bfc <_ZN14MidiDescParser9getNumEPsEv>
    7504:	1007883a 	mov	r3,r2
    7508:	e0bfe383 	ldbu	r2,-114(fp)
    750c:	10c5883a 	add	r2,r2,r3
    7510:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    7514:	e0bfe383 	ldbu	r2,-114(fp)
    7518:	108000b0 	cmpltui	r2,r2,2
    751c:	1000051e 	bne	r2,zero,7534 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    7520:	e0bfee04 	addi	r2,fp,-72
    7524:	1009883a 	mov	r4,r2
    7528:	0008bd40 	call	8bd4 <_ZN14MidiDescParser12getConfValueEv>
    752c:	e0bfe345 	stb	r2,-115(fp)
    7530:	00000406 	br	7544 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    7534:	e0bfe403 	ldbu	r2,-112(fp)
    7538:	10800044 	addi	r2,r2,1
    753c:	e0bfe405 	stb	r2,-112(fp)
    7540:	003fd306 	br	7490 <__alt_data_end+0xfc007490>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    7544:	e0bfe383 	ldbu	r2,-114(fp)
    7548:	01402004 	movi	r5,128
    754c:	1009883a 	mov	r4,r2
    7550:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    7554:	e0bfe383 	ldbu	r2,-114(fp)
    7558:	10800058 	cmpnei	r2,r2,1
    755c:	1000321e 	bne	r2,zero,7628 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7560:	e03fe445 	stb	zero,-111(fp)
    7564:	e0ffe443 	ldbu	r3,-111(fp)
    7568:	e0bfe903 	ldbu	r2,-92(fp)
    756c:	18802a2e 	bgeu	r3,r2,7618 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    7570:	e0bffc17 	ldw	r2,-16(fp)
    7574:	10c00104 	addi	r3,r2,4
    7578:	e0bfee04 	addi	r2,fp,-72
    757c:	000d883a 	mov	r6,zero
    7580:	180b883a 	mov	r5,r3
    7584:	1009883a 	mov	r4,r2
    7588:	00082f00 	call	82f0 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    758c:	e0bffc17 	ldw	r2,-16(fp)
    7590:	10c00217 	ldw	r3,8(r2)
    7594:	e0bffc17 	ldw	r2,-16(fp)
    7598:	10800303 	ldbu	r2,12(r2)
    759c:	11003fcc 	andi	r4,r2,255
    75a0:	e17fe443 	ldbu	r5,-111(fp)
    75a4:	e0bfee04 	addi	r2,fp,-72
    75a8:	d8800015 	stw	r2,0(sp)
    75ac:	280f883a 	mov	r7,r5
    75b0:	000d883a 	mov	r6,zero
    75b4:	200b883a 	mov	r5,r4
    75b8:	1809883a 	mov	r4,r3
    75bc:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    75c0:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    75c4:	e0bfe303 	ldbu	r2,-116(fp)
    75c8:	10005c1e 	bne	r2,zero,773c <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    75cc:	e0bfee04 	addi	r2,fp,-72
    75d0:	1009883a 	mov	r4,r2
    75d4:	0008bfc0 	call	8bfc <_ZN14MidiDescParser9getNumEPsEv>
    75d8:	1007883a 	mov	r3,r2
    75dc:	e0bfe383 	ldbu	r2,-114(fp)
    75e0:	10c5883a 	add	r2,r2,r3
    75e4:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    75e8:	e0bfe383 	ldbu	r2,-114(fp)
    75ec:	108000b0 	cmpltui	r2,r2,2
    75f0:	1000051e 	bne	r2,zero,7608 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    75f4:	e0bfee04 	addi	r2,fp,-72
    75f8:	1009883a 	mov	r4,r2
    75fc:	0008bd40 	call	8bd4 <_ZN14MidiDescParser12getConfValueEv>
    7600:	e0bfe345 	stb	r2,-115(fp)
    7604:	00000406 	br	7618 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7608:	e0bfe443 	ldbu	r2,-111(fp)
    760c:	10800044 	addi	r2,r2,1
    7610:	e0bfe445 	stb	r2,-111(fp)
    7614:	003fd306 	br	7564 <__alt_data_end+0xfc007564>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    7618:	e0bfe383 	ldbu	r2,-114(fp)
    761c:	01402004 	movi	r5,128
    7620:	1009883a 	mov	r4,r2
    7624:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    7628:	e0bfe383 	ldbu	r2,-114(fp)
    762c:	108000a8 	cmpgeui	r2,r2,2
    7630:	1000031e 	bne	r2,zero,7640 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    7634:	00bfffc4 	movi	r2,-1
    7638:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    763c:	00004206 	br	7748 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    7640:	e0bffc17 	ldw	r2,-16(fp)
    7644:	10c00217 	ldw	r3,8(r2)
    7648:	e0bffc17 	ldw	r2,-16(fp)
    764c:	10800303 	ldbu	r2,12(r2)
    7650:	11003fcc 	andi	r4,r2,255
    7654:	e0bffc17 	ldw	r2,-16(fp)
    7658:	108004c4 	addi	r2,r2,19
    765c:	100f883a 	mov	r7,r2
    7660:	018000c4 	movi	r6,3
    7664:	200b883a 	mov	r5,r4
    7668:	1809883a 	mov	r4,r3
    766c:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7670:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    7674:	e0bfe343 	ldbu	r2,-115(fp)
    7678:	01402004 	movi	r5,128
    767c:	1009883a 	mov	r4,r2
    7680:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    7684:	e0bffc17 	ldw	r2,-16(fp)
    7688:	10800583 	ldbu	r2,22(r2)
    768c:	10bfe004 	addi	r2,r2,-128
    7690:	10803fcc 	andi	r2,r2,255
    7694:	01402004 	movi	r5,128
    7698:	1009883a 	mov	r4,r2
    769c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    76a0:	e0bffc17 	ldw	r2,-16(fp)
    76a4:	10800643 	ldbu	r2,25(r2)
    76a8:	10803fcc 	andi	r2,r2,255
    76ac:	01402004 	movi	r5,128
    76b0:	1009883a 	mov	r4,r2
    76b4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    76b8:	e0bffc17 	ldw	r2,-16(fp)
    76bc:	10c00217 	ldw	r3,8(r2)
    76c0:	e0bffc17 	ldw	r2,-16(fp)
    76c4:	10800303 	ldbu	r2,12(r2)
    76c8:	10803fcc 	andi	r2,r2,255
    76cc:	e13fe343 	ldbu	r4,-115(fp)
    76d0:	200f883a 	mov	r7,r4
    76d4:	000d883a 	mov	r6,zero
    76d8:	100b883a 	mov	r5,r2
    76dc:	1809883a 	mov	r4,r3
    76e0:	00027900 	call	2790 <_ZN3USB7setConfEhhh>
    76e4:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    76e8:	e0bfe303 	ldbu	r2,-116(fp)
    76ec:	1000151e 	bne	r2,zero,7744 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    76f0:	e0bffc17 	ldw	r2,-16(fp)
    76f4:	10801817 	ldw	r2,96(r2)
    76f8:	10000326 	beq	r2,zero,7708 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    76fc:	e0bffc17 	ldw	r2,-16(fp)
    7700:	10801817 	ldw	r2,96(r2)
    7704:	103ee83a 	callr	r2

        bPollEnable = true;
    7708:	e0bffc17 	ldw	r2,-16(fp)
    770c:	00c00044 	movi	r3,1
    7710:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    7714:	0005883a 	mov	r2,zero
    7718:	00001206 	br	7764 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    771c:	0001883a 	nop
    7720:	00000906 	br	7748 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    7724:	0001883a 	nop
    7728:	00000706 	br	7748 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    772c:	0001883a 	nop
    7730:	00000506 	br	7748 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    7734:	0001883a 	nop
    7738:	00000306 	br	7748 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    773c:	0001883a 	nop
    7740:	00000106 	br	7748 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    7744:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    7748:	e0bffc17 	ldw	r2,-16(fp)
    774c:	10800017 	ldw	r2,0(r2)
    7750:	10800204 	addi	r2,r2,8
    7754:	10800017 	ldw	r2,0(r2)
    7758:	e13ffc17 	ldw	r4,-16(fp)
    775c:	103ee83a 	callr	r2
        return rcode;
    7760:	e0bfe303 	ldbu	r2,-116(fp)
}
    7764:	e037883a 	mov	sp,fp
    7768:	dfc00117 	ldw	ra,4(sp)
    776c:	df000017 	ldw	fp,0(sp)
    7770:	dec00204 	addi	sp,sp,8
    7774:	f800283a 	ret

00007778 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    7778:	defffd04 	addi	sp,sp,-12
    777c:	dfc00215 	stw	ra,8(sp)
    7780:	df000115 	stw	fp,4(sp)
    7784:	df000104 	addi	fp,sp,4
    7788:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    778c:	e0bfff17 	ldw	r2,-4(fp)
    7790:	10800217 	ldw	r2,8(r2)
    7794:	1009883a 	mov	r4,r2
    7798:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    779c:	1009883a 	mov	r4,r2
    77a0:	20800017 	ldw	r2,0(r4)
    77a4:	10800204 	addi	r2,r2,8
    77a8:	10800017 	ldw	r2,0(r2)
    77ac:	e0ffff17 	ldw	r3,-4(fp)
    77b0:	18c00303 	ldbu	r3,12(r3)
    77b4:	18c03fcc 	andi	r3,r3,255
    77b8:	180b883a 	mov	r5,r3
    77bc:	103ee83a 	callr	r2
        bAddress     = 0;
    77c0:	e0bfff17 	ldw	r2,-4(fp)
    77c4:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    77c8:	e0bfff17 	ldw	r2,-4(fp)
    77cc:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    77d0:	e0bfff17 	ldw	r2,-4(fp)
    77d4:	10001705 	stb	zero,92(r2)
        return 0;
    77d8:	0005883a 	mov	r2,zero
}
    77dc:	e037883a 	mov	sp,fp
    77e0:	dfc00117 	ldw	ra,4(sp)
    77e4:	df000017 	ldw	fp,0(sp)
    77e8:	dec00204 	addi	sp,sp,8
    77ec:	f800283a 	ret

000077f0 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    77f0:	defffe04 	addi	sp,sp,-8
    77f4:	df000115 	stw	fp,4(sp)
    77f8:	df000104 	addi	fp,sp,4
    77fc:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    7800:	e0bfff17 	ldw	r2,-4(fp)
    7804:	1080040b 	ldhu	r2,16(r2)
    7808:	10bfffcc 	andi	r2,r2,65535
    780c:	10848d58 	cmpnei	r2,r2,4661
    7810:	1000351e 	bne	r2,zero,78e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    7814:	e0bfff17 	ldw	r2,-4(fp)
    7818:	1080038b 	ldhu	r2,14(r2)
    781c:	10bfffcc 	andi	r2,r2,65535
    7820:	10800820 	cmpeqi	r2,r2,32
    7824:	10000f1e 	bne	r2,zero,7864 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7828:	e0bfff17 	ldw	r2,-4(fp)
    782c:	1080038b 	ldhu	r2,14(r2)
    7830:	10bfffcc 	andi	r2,r2,65535
    7834:	10800da0 	cmpeqi	r2,r2,54
    7838:	10000a1e 	bne	r2,zero,7864 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    783c:	e0bfff17 	ldw	r2,-4(fp)
    7840:	1080038b 	ldhu	r2,14(r2)
    7844:	10bfffcc 	andi	r2,r2,65535
    7848:	10801460 	cmpeqi	r2,r2,81
    784c:	1000051e 	bne	r2,zero,7864 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7850:	e0bfff17 	ldw	r2,-4(fp)
    7854:	1080038b 	ldhu	r2,14(r2)
    7858:	10bfffcc 	andi	r2,r2,65535
    785c:	10801a58 	cmpnei	r2,r2,105
    7860:	1000041e 	bne	r2,zero,7874 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    7864:	e0bfff17 	ldw	r2,-4(fp)
    7868:	00c00084 	movi	r3,2
    786c:	10c00485 	stb	r3,18(r2)
                        return;
    7870:	00001d06 	br	78e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    7874:	e0bfff17 	ldw	r2,-4(fp)
    7878:	1080038b 	ldhu	r2,14(r2)
    787c:	10bfffcc 	andi	r2,r2,65535
    7880:	10800c30 	cmpltui	r2,r2,48
    7884:	1000051e 	bne	r2,zero,789c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    7888:	e0bfff17 	ldw	r2,-4(fp)
    788c:	1080038b 	ldhu	r2,14(r2)
    7890:	10bfffcc 	andi	r2,r2,65535
    7894:	10800cf0 	cmpltui	r2,r2,51
    7898:	10000f1e 	bne	r2,zero,78d8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    789c:	e0bfff17 	ldw	r2,-4(fp)
    78a0:	1080038b 	ldhu	r2,14(r2)
    78a4:	10bfffcc 	andi	r2,r2,65535
    78a8:	10800d60 	cmpeqi	r2,r2,53
    78ac:	10000a1e 	bne	r2,zero,78d8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    78b0:	e0bfff17 	ldw	r2,-4(fp)
    78b4:	1080038b 	ldhu	r2,14(r2)
    78b8:	10bfffcc 	andi	r2,r2,65535
    78bc:	10801ef0 	cmpltui	r2,r2,123
    78c0:	1000091e 	bne	r2,zero,78e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    78c4:	e0bfff17 	ldw	r2,-4(fp)
    78c8:	1080038b 	ldhu	r2,14(r2)
    78cc:	10bfffcc 	andi	r2,r2,65535
    78d0:	10801fa8 	cmpgeui	r2,r2,126
    78d4:	1000041e 	bne	r2,zero,78e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    78d8:	e0bfff17 	ldw	r2,-4(fp)
    78dc:	00c00084 	movi	r3,2
    78e0:	10c00485 	stb	r3,18(r2)
                        return;
    78e4:	0001883a 	nop
                }
        }
}
    78e8:	e037883a 	mov	sp,fp
    78ec:	df000017 	ldw	fp,0(sp)
    78f0:	dec00104 	addi	sp,sp,4
    78f4:	f800283a 	ret

000078f8 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    78f8:	defff804 	addi	sp,sp,-32
    78fc:	dfc00715 	stw	ra,28(sp)
    7900:	df000615 	stw	fp,24(sp)
    7904:	df000604 	addi	fp,sp,24
    7908:	e13ffd15 	stw	r4,-12(fp)
    790c:	e17ffe15 	stw	r5,-8(fp)
    7910:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    7914:	e0bffd17 	ldw	r2,-12(fp)
    7918:	108005c3 	ldbu	r2,23(r2)
    791c:	10c03fcc 	andi	r3,r2,255
    7920:	e0bffe17 	ldw	r2,-8(fp)
    7924:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7928:	e0bffd17 	ldw	r2,-12(fp)
    792c:	10c00217 	ldw	r3,8(r2)
    7930:	e0bffd17 	ldw	r2,-12(fp)
    7934:	10800303 	ldbu	r2,12(r2)
    7938:	11003fcc 	andi	r4,r2,255
    793c:	e0bffd17 	ldw	r2,-12(fp)
    7940:	10800583 	ldbu	r2,22(r2)
    7944:	11403fcc 	andi	r5,r2,255
    7948:	d8000115 	stw	zero,4(sp)
    794c:	e0bfff17 	ldw	r2,-4(fp)
    7950:	d8800015 	stw	r2,0(sp)
    7954:	e1fffe17 	ldw	r7,-8(fp)
    7958:	280d883a 	mov	r6,r5
    795c:	200b883a 	mov	r5,r4
    7960:	1809883a 	mov	r4,r3
    7964:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    7968:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    796c:	e0bffe17 	ldw	r2,-8(fp)
    7970:	1080000b 	ldhu	r2,0(r2)
    7974:	10bfffcc 	andi	r2,r2,65535
    7978:	10800f28 	cmpgeui	r2,r2,60
    797c:	10000d1e 	bne	r2,zero,79b4 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    7980:	e0bffe17 	ldw	r2,-8(fp)
    7984:	1080000b 	ldhu	r2,0(r2)
    7988:	10bfffcc 	andi	r2,r2,65535
    798c:	e0ffff17 	ldw	r3,-4(fp)
    7990:	1885883a 	add	r2,r3,r2
    7994:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7998:	e0bffe17 	ldw	r2,-8(fp)
    799c:	1080000b 	ldhu	r2,0(r2)
    79a0:	10bfffcc 	andi	r2,r2,65535
    79a4:	10800044 	addi	r2,r2,1
    79a8:	e0ffff17 	ldw	r3,-4(fp)
    79ac:	1885883a 	add	r2,r3,r2
    79b0:	10000005 	stb	zero,0(r2)
        }
        return r;
    79b4:	e0bffc03 	ldbu	r2,-16(fp)
}
    79b8:	e037883a 	mov	sp,fp
    79bc:	dfc00117 	ldw	ra,4(sp)
    79c0:	df000017 	ldw	fp,0(sp)
    79c4:	dec00204 	addi	sp,sp,8
    79c8:	f800283a 	ret

000079cc <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    79cc:	defff904 	addi	sp,sp,-28
    79d0:	dfc00615 	stw	ra,24(sp)
    79d4:	df000515 	stw	fp,20(sp)
    79d8:	df000504 	addi	fp,sp,20
    79dc:	e13ffd15 	stw	r4,-12(fp)
    79e0:	e17ffe15 	stw	r5,-8(fp)
    79e4:	3005883a 	mov	r2,r6
    79e8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    79ec:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    79f0:	e0bffd17 	ldw	r2,-12(fp)
    79f4:	10800343 	ldbu	r2,13(r2)
    79f8:	1080005c 	xori	r2,r2,1
    79fc:	10803fcc 	andi	r2,r2,255
    7a00:	10000226 	beq	r2,zero,7a0c <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7a04:	0005883a 	mov	r2,zero
    7a08:	00008506 	br	7c20 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7a0c:	e0bffd17 	ldw	r2,-12(fp)
    7a10:	10801703 	ldbu	r2,92(r2)
    7a14:	10803fcc 	andi	r2,r2,255
    7a18:	10001826 	beq	r2,zero,7a7c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7a1c:	e0bffd17 	ldw	r2,-12(fp)
    7a20:	10801703 	ldbu	r2,92(r2)
    7a24:	10803fcc 	andi	r2,r2,255
    7a28:	10801028 	cmpgeui	r2,r2,64
    7a2c:	1000131e 	bne	r2,zero,7a7c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7a30:	e0bffd17 	ldw	r2,-12(fp)
    7a34:	10801703 	ldbu	r2,92(r2)
    7a38:	10803fcc 	andi	r2,r2,255
    7a3c:	e0fffd17 	ldw	r3,-12(fp)
    7a40:	1885883a 	add	r2,r3,r2
    7a44:	10800704 	addi	r2,r2,28
    7a48:	10800003 	ldbu	r2,0(r2)
    7a4c:	10803fcc 	andi	r2,r2,255
    7a50:	10002a1e 	bne	r2,zero,7afc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7a54:	e0bffd17 	ldw	r2,-12(fp)
    7a58:	10801703 	ldbu	r2,92(r2)
    7a5c:	10803fcc 	andi	r2,r2,255
    7a60:	10800044 	addi	r2,r2,1
    7a64:	e0fffd17 	ldw	r3,-12(fp)
    7a68:	1885883a 	add	r2,r3,r2
    7a6c:	10800704 	addi	r2,r2,28
    7a70:	10800003 	ldbu	r2,0(r2)
    7a74:	10803fcc 	andi	r2,r2,255
    7a78:	1000201e 	bne	r2,zero,7afc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7a7c:	e0bffd17 	ldw	r2,-12(fp)
    7a80:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7a84:	e0bffd17 	ldw	r2,-12(fp)
    7a88:	10c00704 	addi	r3,r2,28
    7a8c:	e0bffc04 	addi	r2,fp,-16
    7a90:	180d883a 	mov	r6,r3
    7a94:	100b883a 	mov	r5,r2
    7a98:	e13ffd17 	ldw	r4,-12(fp)
    7a9c:	00078f80 	call	78f8 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7aa0:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7aa4:	e0bffb03 	ldbu	r2,-20(fp)
    7aa8:	10000226 	beq	r2,zero,7ab4 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7aac:	0005883a 	mov	r2,zero
    7ab0:	00005b06 	br	7c20 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7ab4:	e0bffd17 	ldw	r2,-12(fp)
    7ab8:	10800703 	ldbu	r2,28(r2)
    7abc:	10803fcc 	andi	r2,r2,255
    7ac0:	10000e1e 	bne	r2,zero,7afc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7ac4:	e0bffd17 	ldw	r2,-12(fp)
    7ac8:	10800743 	ldbu	r2,29(r2)
    7acc:	10803fcc 	andi	r2,r2,255
    7ad0:	10000a1e 	bne	r2,zero,7afc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7ad4:	e0bffd17 	ldw	r2,-12(fp)
    7ad8:	10800783 	ldbu	r2,30(r2)
    7adc:	10803fcc 	andi	r2,r2,255
    7ae0:	1000061e 	bne	r2,zero,7afc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7ae4:	e0bffd17 	ldw	r2,-12(fp)
    7ae8:	108007c3 	ldbu	r2,31(r2)
    7aec:	10803fcc 	andi	r2,r2,255
    7af0:	1000021e 	bne	r2,zero,7afc <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    7af4:	0005883a 	mov	r2,zero
    7af8:	00004906 	br	7c20 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    7afc:	e0bffd17 	ldw	r2,-12(fp)
    7b00:	10801703 	ldbu	r2,92(r2)
    7b04:	10803fcc 	andi	r2,r2,255
    7b08:	e0fffd17 	ldw	r3,-12(fp)
    7b0c:	1885883a 	add	r2,r3,r2
    7b10:	10800704 	addi	r2,r2,28
    7b14:	10800003 	ldbu	r2,0(r2)
    7b18:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    7b1c:	e0bfff03 	ldbu	r2,-4(fp)
    7b20:	10000526 	beq	r2,zero,7b38 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    7b24:	e0bffe17 	ldw	r2,-8(fp)
    7b28:	10c00044 	addi	r3,r2,1
    7b2c:	e0fffe15 	stw	r3,-8(fp)
    7b30:	e0fffb43 	ldbu	r3,-19(fp)
    7b34:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    7b38:	e0bffd17 	ldw	r2,-12(fp)
    7b3c:	10801703 	ldbu	r2,92(r2)
    7b40:	10800044 	addi	r2,r2,1
    7b44:	1007883a 	mov	r3,r2
    7b48:	e0bffd17 	ldw	r2,-12(fp)
    7b4c:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    7b50:	e0bffe17 	ldw	r2,-8(fp)
    7b54:	10c00044 	addi	r3,r2,1
    7b58:	e0fffe15 	stw	r3,-8(fp)
    7b5c:	e0fffd17 	ldw	r3,-12(fp)
    7b60:	18c01703 	ldbu	r3,92(r3)
    7b64:	19000044 	addi	r4,r3,1
    7b68:	200b883a 	mov	r5,r4
    7b6c:	e13ffd17 	ldw	r4,-12(fp)
    7b70:	21401705 	stb	r5,92(r4)
    7b74:	18c03fcc 	andi	r3,r3,255
    7b78:	e13ffd17 	ldw	r4,-12(fp)
    7b7c:	20c7883a 	add	r3,r4,r3
    7b80:	18c00704 	addi	r3,r3,28
    7b84:	18c00003 	ldbu	r3,0(r3)
    7b88:	e0fffb85 	stb	r3,-18(fp)
    7b8c:	e0fffb83 	ldbu	r3,-18(fp)
    7b90:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7b94:	e0bffe17 	ldw	r2,-8(fp)
    7b98:	10c00044 	addi	r3,r2,1
    7b9c:	e0fffe15 	stw	r3,-8(fp)
    7ba0:	e0fffd17 	ldw	r3,-12(fp)
    7ba4:	18c01703 	ldbu	r3,92(r3)
    7ba8:	19000044 	addi	r4,r3,1
    7bac:	200b883a 	mov	r5,r4
    7bb0:	e13ffd17 	ldw	r4,-12(fp)
    7bb4:	21401705 	stb	r5,92(r4)
    7bb8:	18c03fcc 	andi	r3,r3,255
    7bbc:	e13ffd17 	ldw	r4,-12(fp)
    7bc0:	20c7883a 	add	r3,r4,r3
    7bc4:	18c00704 	addi	r3,r3,28
    7bc8:	18c00003 	ldbu	r3,0(r3)
    7bcc:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7bd0:	e0bffe17 	ldw	r2,-8(fp)
    7bd4:	10c00044 	addi	r3,r2,1
    7bd8:	e0fffe15 	stw	r3,-8(fp)
    7bdc:	e0fffd17 	ldw	r3,-12(fp)
    7be0:	18c01703 	ldbu	r3,92(r3)
    7be4:	19000044 	addi	r4,r3,1
    7be8:	200b883a 	mov	r5,r4
    7bec:	e13ffd17 	ldw	r4,-12(fp)
    7bf0:	21401705 	stb	r5,92(r4)
    7bf4:	18c03fcc 	andi	r3,r3,255
    7bf8:	e13ffd17 	ldw	r4,-12(fp)
    7bfc:	20c7883a 	add	r3,r4,r3
    7c00:	18c00704 	addi	r3,r3,28
    7c04:	18c00003 	ldbu	r3,0(r3)
    7c08:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    7c0c:	e0bffb43 	ldbu	r2,-19(fp)
    7c10:	108003cc 	andi	r2,r2,15
    7c14:	100b883a 	mov	r5,r2
    7c18:	e13ffd17 	ldw	r4,-12(fp)
    7c1c:	0008c7c0 	call	8c7c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7c20:	e037883a 	mov	sp,fp
    7c24:	dfc00117 	ldw	ra,4(sp)
    7c28:	df000017 	ldw	fp,0(sp)
    7c2c:	dec00204 	addi	sp,sp,8
    7c30:	f800283a 	ret

00007c34 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    7c34:	defff804 	addi	sp,sp,-32
    7c38:	dfc00715 	stw	ra,28(sp)
    7c3c:	df000615 	stw	fp,24(sp)
    7c40:	df000604 	addi	fp,sp,24
    7c44:	e13ffd15 	stw	r4,-12(fp)
    7c48:	e17ffe15 	stw	r5,-8(fp)
    7c4c:	3005883a 	mov	r2,r6
    7c50:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    7c54:	e0bffe17 	ldw	r2,-8(fp)
    7c58:	10800003 	ldbu	r2,0(r2)
    7c5c:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    7c60:	e0bffb03 	ldbu	r2,-20(fp)
    7c64:	100b883a 	mov	r5,r2
    7c68:	e13ffd17 	ldw	r4,-12(fp)
    7c6c:	0008c240 	call	8c24 <_ZN9USBH_MIDI17convertStatus2CinEh>
    7c70:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    7c74:	e0bffb03 	ldbu	r2,-20(fp)
    7c78:	10803c18 	cmpnei	r2,r2,240
    7c7c:	10000b1e 	bne	r2,zero,7cac <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    7c80:	e17ffe17 	ldw	r5,-8(fp)
    7c84:	e13ffd17 	ldw	r4,-12(fp)
    7c88:	0007df40 	call	7df4 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    7c8c:	10bfffcc 	andi	r2,r2,65535
    7c90:	e0ffff03 	ldbu	r3,-4(fp)
    7c94:	180f883a 	mov	r7,r3
    7c98:	100d883a 	mov	r6,r2
    7c9c:	e17ffe17 	ldw	r5,-8(fp)
    7ca0:	e13ffd17 	ldw	r4,-12(fp)
    7ca4:	0007e7c0 	call	7e7c <_ZN9USBH_MIDI9SendSysExEPhth>
    7ca8:	00003406 	br	7d7c <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    7cac:	e0bfff03 	ldbu	r2,-4(fp)
    7cb0:	1004913a 	slli	r2,r2,4
    7cb4:	1007883a 	mov	r3,r2
    7cb8:	e0bffb43 	ldbu	r2,-19(fp)
    7cbc:	1884b03a 	or	r2,r3,r2
    7cc0:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    7cc4:	e0bffe17 	ldw	r2,-8(fp)
    7cc8:	10800003 	ldbu	r2,0(r2)
    7ccc:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    7cd0:	e0bffb43 	ldbu	r2,-19(fp)
    7cd4:	100b883a 	mov	r5,r2
    7cd8:	e13ffd17 	ldw	r4,-12(fp)
    7cdc:	0008c7c0 	call	8c7c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    7ce0:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    7ce4:	e0bffb83 	ldbu	r2,-18(fp)
    7ce8:	10c000a0 	cmpeqi	r3,r2,2
    7cec:	18000c1e 	bne	r3,zero,7d20 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    7cf0:	10c000e0 	cmpeqi	r3,r2,3
    7cf4:	1800031e 	bne	r3,zero,7d04 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    7cf8:	10800060 	cmpeqi	r2,r2,1
    7cfc:	10000d1e 	bne	r2,zero,7d34 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    7d00:	00000f06 	br	7d40 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    7d04:	e0bffe17 	ldw	r2,-8(fp)
    7d08:	10800043 	ldbu	r2,1(r2)
    7d0c:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    7d10:	e0bffe17 	ldw	r2,-8(fp)
    7d14:	10800083 	ldbu	r2,2(r2)
    7d18:	e0bffc85 	stb	r2,-14(fp)
                break;
    7d1c:	00000806 	br	7d40 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    7d20:	e0bffe17 	ldw	r2,-8(fp)
    7d24:	10800043 	ldbu	r2,1(r2)
    7d28:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    7d2c:	e03ffc85 	stb	zero,-14(fp)
                break;
    7d30:	00000306 	br	7d40 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    7d34:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    7d38:	e03ffc85 	stb	zero,-14(fp)
                break;
    7d3c:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    7d40:	e0bffd17 	ldw	r2,-12(fp)
    7d44:	10c00217 	ldw	r3,8(r2)
    7d48:	e0bffd17 	ldw	r2,-12(fp)
    7d4c:	10800303 	ldbu	r2,12(r2)
    7d50:	11003fcc 	andi	r4,r2,255
    7d54:	e0bffd17 	ldw	r2,-12(fp)
    7d58:	10800643 	ldbu	r2,25(r2)
    7d5c:	11403fcc 	andi	r5,r2,255
    7d60:	e0bffbc4 	addi	r2,fp,-17
    7d64:	d8800015 	stw	r2,0(sp)
    7d68:	01c00104 	movi	r7,4
    7d6c:	280d883a 	mov	r6,r5
    7d70:	200b883a 	mov	r5,r4
    7d74:	1809883a 	mov	r4,r3
    7d78:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    7d7c:	e037883a 	mov	sp,fp
    7d80:	dfc00117 	ldw	ra,4(sp)
    7d84:	df000017 	ldw	fp,0(sp)
    7d88:	dec00204 	addi	sp,sp,8
    7d8c:	f800283a 	ret

00007d90 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    7d90:	defffb04 	addi	sp,sp,-20
    7d94:	dfc00415 	stw	ra,16(sp)
    7d98:	df000315 	stw	fp,12(sp)
    7d9c:	df000304 	addi	fp,sp,12
    7da0:	e13ffd15 	stw	r4,-12(fp)
    7da4:	2807883a 	mov	r3,r5
    7da8:	3005883a 	mov	r2,r6
    7dac:	e0fffe05 	stb	r3,-8(fp)
    7db0:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    7db4:	e0bfff03 	ldbu	r2,-4(fp)
    7db8:	1000051e 	bne	r2,zero,7dd0 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    7dbc:	e0bffe03 	ldbu	r2,-8(fp)
    7dc0:	100b883a 	mov	r5,r2
    7dc4:	e13ffd17 	ldw	r4,-12(fp)
    7dc8:	0008c240 	call	8c24 <_ZN9USBH_MIDI17convertStatus2CinEh>
    7dcc:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    7dd0:	e0bfff03 	ldbu	r2,-4(fp)
    7dd4:	100b883a 	mov	r5,r2
    7dd8:	e13ffd17 	ldw	r4,-12(fp)
    7ddc:	0008c7c0 	call	8c7c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7de0:	e037883a 	mov	sp,fp
    7de4:	dfc00117 	ldw	ra,4(sp)
    7de8:	df000017 	ldw	fp,0(sp)
    7dec:	dec00204 	addi	sp,sp,8
    7df0:	f800283a 	ret

00007df4 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    7df4:	defffc04 	addi	sp,sp,-16
    7df8:	df000315 	stw	fp,12(sp)
    7dfc:	df000304 	addi	fp,sp,12
    7e00:	e13ffe15 	stw	r4,-8(fp)
    7e04:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    7e08:	00800044 	movi	r2,1
    7e0c:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    7e10:	e0bfff17 	ldw	r2,-4(fp)
    7e14:	10800003 	ldbu	r2,0(r2)
    7e18:	10803fcc 	andi	r2,r2,255
    7e1c:	10803c20 	cmpeqi	r2,r2,240
    7e20:	1000021e 	bne	r2,zero,7e2c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    7e24:	0005883a 	mov	r2,zero
    7e28:	00001006 	br	7e6c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    7e2c:	e0bfff17 	ldw	r2,-4(fp)
    7e30:	10800003 	ldbu	r2,0(r2)
    7e34:	10803fcc 	andi	r2,r2,255
    7e38:	10803de0 	cmpeqi	r2,r2,247
    7e3c:	10000a1e 	bne	r2,zero,7e68 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    7e40:	e0bfff17 	ldw	r2,-4(fp)
    7e44:	10800044 	addi	r2,r2,1
    7e48:	e0bfff15 	stw	r2,-4(fp)
                c++;
    7e4c:	e0bffd0b 	ldhu	r2,-12(fp)
    7e50:	10800044 	addi	r2,r2,1
    7e54:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    7e58:	e0bffd0b 	ldhu	r2,-12(fp)
    7e5c:	10804070 	cmpltui	r2,r2,257
    7e60:	103ff21e 	bne	r2,zero,7e2c <__alt_data_end+0xfc007e2c>
                        c = 0;
    7e64:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    7e68:	e0bffd0b 	ldhu	r2,-12(fp)
}
    7e6c:	e037883a 	mov	sp,fp
    7e70:	df000017 	ldw	fp,0(sp)
    7e74:	dec00104 	addi	sp,sp,4
    7e78:	f800283a 	ret

00007e7c <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    7e7c:	deffe704 	addi	sp,sp,-100
    7e80:	dfc01815 	stw	ra,96(sp)
    7e84:	df001715 	stw	fp,92(sp)
    7e88:	df001704 	addi	fp,sp,92
    7e8c:	e13ffc15 	stw	r4,-16(fp)
    7e90:	e17ffd15 	stw	r5,-12(fp)
    7e94:	3007883a 	mov	r3,r6
    7e98:	3805883a 	mov	r2,r7
    7e9c:	e0fffe0d 	sth	r3,-8(fp)
    7ea0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    7ea4:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    7ea8:	e0bffe0b 	ldhu	r2,-8(fp)
    7eac:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    7eb0:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    7eb4:	e0bffc17 	ldw	r2,-16(fp)
    7eb8:	108005c3 	ldbu	r2,23(r2)
    7ebc:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    7ec0:	e0bffe0b 	ldhu	r2,-8(fp)
    7ec4:	01402004 	movi	r5,128
    7ec8:	1009883a 	mov	r4,r2
    7ecc:	0008d140 	call	8d14 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    7ed0:	e0bfea8b 	ldhu	r2,-86(fp)
    7ed4:	1000b026 	beq	r2,zero,8198 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    7ed8:	e0bfeb03 	ldbu	r2,-84(fp)
    7edc:	e0ffff03 	ldbu	r3,-4(fp)
    7ee0:	1806913a 	slli	r3,r3,4
    7ee4:	18c00114 	ori	r3,r3,4
    7ee8:	1809883a 	mov	r4,r3
    7eec:	e0ffeb84 	addi	r3,fp,-82
    7ef0:	1885883a 	add	r2,r3,r2
    7ef4:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    7ef8:	e0bfea8b 	ldhu	r2,-86(fp)
    7efc:	10c000a0 	cmpeqi	r3,r2,2
    7f00:	18002a1e 	bne	r3,zero,7fac <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    7f04:	10c000e0 	cmpeqi	r3,r2,3
    7f08:	1800521e 	bne	r3,zero,8054 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    7f0c:	10800060 	cmpeqi	r2,r2,1
    7f10:	10005826 	beq	r2,zero,8074 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    7f14:	e0bfeb03 	ldbu	r2,-84(fp)
    7f18:	10c00044 	addi	r3,r2,1
    7f1c:	e0ffeb05 	stb	r3,-84(fp)
    7f20:	10803fcc 	andi	r2,r2,255
    7f24:	e0ffff03 	ldbu	r3,-4(fp)
    7f28:	1806913a 	slli	r3,r3,4
    7f2c:	18c00154 	ori	r3,r3,5
    7f30:	1809883a 	mov	r4,r3
    7f34:	e0ffeb84 	addi	r3,fp,-82
    7f38:	1885883a 	add	r2,r3,r2
    7f3c:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    7f40:	e0bfeb03 	ldbu	r2,-84(fp)
    7f44:	10c00044 	addi	r3,r2,1
    7f48:	e0ffeb05 	stb	r3,-84(fp)
    7f4c:	11003fcc 	andi	r4,r2,255
    7f50:	e0bffd17 	ldw	r2,-12(fp)
    7f54:	10c00044 	addi	r3,r2,1
    7f58:	e0fffd15 	stw	r3,-12(fp)
    7f5c:	10c00003 	ldbu	r3,0(r2)
    7f60:	e0bfeb84 	addi	r2,fp,-82
    7f64:	1105883a 	add	r2,r2,r4
    7f68:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    7f6c:	e0bfeb03 	ldbu	r2,-84(fp)
    7f70:	10c00044 	addi	r3,r2,1
    7f74:	e0ffeb05 	stb	r3,-84(fp)
    7f78:	10803fcc 	andi	r2,r2,255
    7f7c:	e0ffeb84 	addi	r3,fp,-82
    7f80:	1885883a 	add	r2,r3,r2
    7f84:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    7f88:	e0bfeb03 	ldbu	r2,-84(fp)
    7f8c:	10c00044 	addi	r3,r2,1
    7f90:	e0ffeb05 	stb	r3,-84(fp)
    7f94:	10803fcc 	andi	r2,r2,255
    7f98:	e0ffeb84 	addi	r3,fp,-82
    7f9c:	1885883a 	add	r2,r3,r2
    7fa0:	10000005 	stb	zero,0(r2)
                        n = 0;
    7fa4:	e03fea8d 	sth	zero,-86(fp)
                        break;
    7fa8:	00005a06 	br	8114 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    7fac:	e0bfeb03 	ldbu	r2,-84(fp)
    7fb0:	10c00044 	addi	r3,r2,1
    7fb4:	e0ffeb05 	stb	r3,-84(fp)
    7fb8:	10803fcc 	andi	r2,r2,255
    7fbc:	e0ffff03 	ldbu	r3,-4(fp)
    7fc0:	1806913a 	slli	r3,r3,4
    7fc4:	18c00194 	ori	r3,r3,6
    7fc8:	1809883a 	mov	r4,r3
    7fcc:	e0ffeb84 	addi	r3,fp,-82
    7fd0:	1885883a 	add	r2,r3,r2
    7fd4:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    7fd8:	e0bfeb03 	ldbu	r2,-84(fp)
    7fdc:	10c00044 	addi	r3,r2,1
    7fe0:	e0ffeb05 	stb	r3,-84(fp)
    7fe4:	11003fcc 	andi	r4,r2,255
    7fe8:	e0bffd17 	ldw	r2,-12(fp)
    7fec:	10c00044 	addi	r3,r2,1
    7ff0:	e0fffd15 	stw	r3,-12(fp)
    7ff4:	10c00003 	ldbu	r3,0(r2)
    7ff8:	e0bfeb84 	addi	r2,fp,-82
    7ffc:	1105883a 	add	r2,r2,r4
    8000:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8004:	e0bfeb03 	ldbu	r2,-84(fp)
    8008:	10c00044 	addi	r3,r2,1
    800c:	e0ffeb05 	stb	r3,-84(fp)
    8010:	11003fcc 	andi	r4,r2,255
    8014:	e0bffd17 	ldw	r2,-12(fp)
    8018:	10c00044 	addi	r3,r2,1
    801c:	e0fffd15 	stw	r3,-12(fp)
    8020:	10c00003 	ldbu	r3,0(r2)
    8024:	e0bfeb84 	addi	r2,fp,-82
    8028:	1105883a 	add	r2,r2,r4
    802c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8030:	e0bfeb03 	ldbu	r2,-84(fp)
    8034:	10c00044 	addi	r3,r2,1
    8038:	e0ffeb05 	stb	r3,-84(fp)
    803c:	10803fcc 	andi	r2,r2,255
    8040:	e0ffeb84 	addi	r3,fp,-82
    8044:	1885883a 	add	r2,r3,r2
    8048:	10000005 	stb	zero,0(r2)
                        n = 0;
    804c:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8050:	00003006 	br	8114 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    8054:	e0bfeb03 	ldbu	r2,-84(fp)
    8058:	e0ffff03 	ldbu	r3,-4(fp)
    805c:	1806913a 	slli	r3,r3,4
    8060:	18c001d4 	ori	r3,r3,7
    8064:	1809883a 	mov	r4,r3
    8068:	e0ffeb84 	addi	r3,fp,-82
    806c:	1885883a 	add	r2,r3,r2
    8070:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    8074:	e0bfeb03 	ldbu	r2,-84(fp)
    8078:	10800044 	addi	r2,r2,1
    807c:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    8080:	e0bfeb03 	ldbu	r2,-84(fp)
    8084:	10c00044 	addi	r3,r2,1
    8088:	e0ffeb05 	stb	r3,-84(fp)
    808c:	11003fcc 	andi	r4,r2,255
    8090:	e0bffd17 	ldw	r2,-12(fp)
    8094:	10c00044 	addi	r3,r2,1
    8098:	e0fffd15 	stw	r3,-12(fp)
    809c:	10c00003 	ldbu	r3,0(r2)
    80a0:	e0bfeb84 	addi	r2,fp,-82
    80a4:	1105883a 	add	r2,r2,r4
    80a8:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    80ac:	e0bfeb03 	ldbu	r2,-84(fp)
    80b0:	10c00044 	addi	r3,r2,1
    80b4:	e0ffeb05 	stb	r3,-84(fp)
    80b8:	11003fcc 	andi	r4,r2,255
    80bc:	e0bffd17 	ldw	r2,-12(fp)
    80c0:	10c00044 	addi	r3,r2,1
    80c4:	e0fffd15 	stw	r3,-12(fp)
    80c8:	10c00003 	ldbu	r3,0(r2)
    80cc:	e0bfeb84 	addi	r2,fp,-82
    80d0:	1105883a 	add	r2,r2,r4
    80d4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    80d8:	e0bfeb03 	ldbu	r2,-84(fp)
    80dc:	10c00044 	addi	r3,r2,1
    80e0:	e0ffeb05 	stb	r3,-84(fp)
    80e4:	11003fcc 	andi	r4,r2,255
    80e8:	e0bffd17 	ldw	r2,-12(fp)
    80ec:	10c00044 	addi	r3,r2,1
    80f0:	e0fffd15 	stw	r3,-12(fp)
    80f4:	10c00003 	ldbu	r3,0(r2)
    80f8:	e0bfeb84 	addi	r2,fp,-82
    80fc:	1105883a 	add	r2,r2,r4
    8100:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    8104:	e0bfea8b 	ldhu	r2,-86(fp)
    8108:	10bfff44 	addi	r2,r2,-3
    810c:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    8110:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    8114:	e0ffeb03 	ldbu	r3,-84(fp)
    8118:	e0bfeb43 	ldbu	r2,-83(fp)
    811c:	1880022e 	bgeu	r3,r2,8128 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    8120:	e0bfea8b 	ldhu	r2,-86(fp)
    8124:	103f6a1e 	bne	r2,zero,7ed0 <__alt_data_end+0xfc007ed0>
                        USBTRACE2(" wptr:\t", wptr);
    8128:	e0bfeb03 	ldbu	r2,-84(fp)
    812c:	01402004 	movi	r5,128
    8130:	1009883a 	mov	r4,r2
    8134:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    8138:	e0bffc17 	ldw	r2,-16(fp)
    813c:	10c00217 	ldw	r3,8(r2)
    8140:	e0bffc17 	ldw	r2,-16(fp)
    8144:	10800303 	ldbu	r2,12(r2)
    8148:	11003fcc 	andi	r4,r2,255
    814c:	e0bffc17 	ldw	r2,-16(fp)
    8150:	10800643 	ldbu	r2,25(r2)
    8154:	11403fcc 	andi	r5,r2,255
    8158:	e1bfeb03 	ldbu	r6,-84(fp)
    815c:	e0bfeb84 	addi	r2,fp,-82
    8160:	d8800015 	stw	r2,0(sp)
    8164:	300f883a 	mov	r7,r6
    8168:	280d883a 	mov	r6,r5
    816c:	200b883a 	mov	r5,r4
    8170:	1809883a 	mov	r4,r3
    8174:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    8178:	e0bfea05 	stb	r2,-88(fp)
    817c:	e0bfea03 	ldbu	r2,-88(fp)
    8180:	1004c03a 	cmpne	r2,r2,zero
    8184:	10803fcc 	andi	r2,r2,255
    8188:	1000021e 	bne	r2,zero,8194 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    818c:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    8190:	003f4f06 	br	7ed0 <__alt_data_end+0xfc007ed0>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    8194:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    8198:	e0bfea03 	ldbu	r2,-88(fp)
}
    819c:	e037883a 	mov	sp,fp
    81a0:	dfc00117 	ldw	ra,4(sp)
    81a4:	df000017 	ldw	fp,0(sp)
    81a8:	dec00204 	addi	sp,sp,8
    81ac:	f800283a 	ret

000081b0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    81b0:	defffb04 	addi	sp,sp,-20
    81b4:	df000415 	stw	fp,16(sp)
    81b8:	df000404 	addi	fp,sp,16
    81bc:	e13ffd15 	stw	r4,-12(fp)
    81c0:	e17ffe15 	stw	r5,-8(fp)
    81c4:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    81c8:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    81cc:	e0bffe17 	ldw	r2,-8(fp)
    81d0:	10800003 	ldbu	r2,0(r2)
    81d4:	108003cc 	andi	r2,r2,15
    81d8:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    81dc:	e0bffc43 	ldbu	r2,-15(fp)
    81e0:	1080030c 	andi	r2,r2,12
    81e4:	10800120 	cmpeqi	r2,r2,4
    81e8:	1000021e 	bne	r2,zero,81f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    81ec:	e0bffc03 	ldbu	r2,-16(fp)
    81f0:	00003b06 	br	82e0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    81f4:	e0bffc43 	ldbu	r2,-15(fp)
    81f8:	10c00160 	cmpeqi	r3,r2,5
    81fc:	18002e1e 	bne	r3,zero,82b8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    8200:	10c00188 	cmpgei	r3,r2,6
    8204:	1800031e 	bne	r3,zero,8214 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    8208:	10800120 	cmpeqi	r2,r2,4
    820c:	1000061e 	bne	r2,zero,8228 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8210:	00003206 	br	82dc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    8214:	10c001a0 	cmpeqi	r3,r2,6
    8218:	1800181e 	bne	r3,zero,827c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    821c:	108001e0 	cmpeqi	r2,r2,7
    8220:	1000011e 	bne	r2,zero,8228 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8224:	00002d06 	br	82dc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    8228:	e0bfff17 	ldw	r2,-4(fp)
    822c:	10c00044 	addi	r3,r2,1
    8230:	e0ffff15 	stw	r3,-4(fp)
    8234:	e0fffe17 	ldw	r3,-8(fp)
    8238:	18c00043 	ldbu	r3,1(r3)
    823c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    8240:	e0bfff17 	ldw	r2,-4(fp)
    8244:	10c00044 	addi	r3,r2,1
    8248:	e0ffff15 	stw	r3,-4(fp)
    824c:	e0fffe17 	ldw	r3,-8(fp)
    8250:	18c00083 	ldbu	r3,2(r3)
    8254:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    8258:	e0bfff17 	ldw	r2,-4(fp)
    825c:	10c00044 	addi	r3,r2,1
    8260:	e0ffff15 	stw	r3,-4(fp)
    8264:	e0fffe17 	ldw	r3,-8(fp)
    8268:	18c000c3 	ldbu	r3,3(r3)
    826c:	10c00005 	stb	r3,0(r2)
                rc = 3;
    8270:	008000c4 	movi	r2,3
    8274:	e0bffc05 	stb	r2,-16(fp)
                break;
    8278:	00001806 	br	82dc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    827c:	e0bfff17 	ldw	r2,-4(fp)
    8280:	10c00044 	addi	r3,r2,1
    8284:	e0ffff15 	stw	r3,-4(fp)
    8288:	e0fffe17 	ldw	r3,-8(fp)
    828c:	18c00043 	ldbu	r3,1(r3)
    8290:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    8294:	e0bfff17 	ldw	r2,-4(fp)
    8298:	10c00044 	addi	r3,r2,1
    829c:	e0ffff15 	stw	r3,-4(fp)
    82a0:	e0fffe17 	ldw	r3,-8(fp)
    82a4:	18c00083 	ldbu	r3,2(r3)
    82a8:	10c00005 	stb	r3,0(r2)
                rc = 2;
    82ac:	00800084 	movi	r2,2
    82b0:	e0bffc05 	stb	r2,-16(fp)
                break;
    82b4:	00000906 	br	82dc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    82b8:	e0bfff17 	ldw	r2,-4(fp)
    82bc:	10c00044 	addi	r3,r2,1
    82c0:	e0ffff15 	stw	r3,-4(fp)
    82c4:	e0fffe17 	ldw	r3,-8(fp)
    82c8:	18c00043 	ldbu	r3,1(r3)
    82cc:	10c00005 	stb	r3,0(r2)
                rc = 1;
    82d0:	00800044 	movi	r2,1
    82d4:	e0bffc05 	stb	r2,-16(fp)
                break;
    82d8:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    82dc:	e0bffc03 	ldbu	r2,-16(fp)
}
    82e0:	e037883a 	mov	sp,fp
    82e4:	df000017 	ldw	fp,0(sp)
    82e8:	dec00104 	addi	sp,sp,4
    82ec:	f800283a 	ret

000082f0 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    82f0:	defffb04 	addi	sp,sp,-20
    82f4:	dfc00415 	stw	ra,16(sp)
    82f8:	df000315 	stw	fp,12(sp)
    82fc:	df000304 	addi	fp,sp,12
    8300:	e13ffd15 	stw	r4,-12(fp)
    8304:	e17ffe15 	stw	r5,-8(fp)
    8308:	3005883a 	mov	r2,r6
    830c:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    8310:	e0bffd17 	ldw	r2,-12(fp)
    8314:	1009883a 	mov	r4,r2
    8318:	0004aec0 	call	4aec <_ZN13USBReadParserC1Ev>
    831c:	008000b4 	movhi	r2,2
    8320:	10973004 	addi	r2,r2,23744
    8324:	e0fffd17 	ldw	r3,-12(fp)
    8328:	18800015 	stw	r2,0(r3)
    832c:	e0bffd17 	ldw	r2,-12(fp)
    8330:	e0fffe17 	ldw	r3,-8(fp)
    8334:	10c00115 	stw	r3,4(r2)
    8338:	e0bffd17 	ldw	r2,-12(fp)
    833c:	10800204 	addi	r2,r2,8
    8340:	1009883a 	mov	r4,r2
    8344:	00043dc0 	call	43dc <_ZN16MultiValueBufferC1Ev>
    8348:	e0bffd17 	ldw	r2,-12(fp)
    834c:	10800404 	addi	r2,r2,16
    8350:	1009883a 	mov	r4,r2
    8354:	000443c0 	call	443c <_ZN20MultiByteValueParserC1Ev>
    8358:	e0bffd17 	ldw	r2,-12(fp)
    835c:	10800604 	addi	r2,r2,24
    8360:	1009883a 	mov	r4,r2
    8364:	00044f80 	call	44f8 <_ZN11ByteSkipperC1Ev>
    8368:	e0bffd17 	ldw	r2,-12(fp)
    836c:	10000c05 	stb	zero,48(r2)
    8370:	e0bffd17 	ldw	r2,-12(fp)
    8374:	10000c45 	stb	zero,49(r2)
    8378:	e0bffd17 	ldw	r2,-12(fp)
    837c:	10000c85 	stb	zero,50(r2)
    8380:	e0bffd17 	ldw	r2,-12(fp)
    8384:	10000cc5 	stb	zero,51(r2)
    8388:	e0bffd17 	ldw	r2,-12(fp)
    838c:	e0ffff03 	ldbu	r3,-4(fp)
    8390:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    8394:	e0bffd17 	ldw	r2,-12(fp)
    8398:	10c00804 	addi	r3,r2,32
    839c:	e0bffd17 	ldw	r2,-12(fp)
    83a0:	19803fcc 	andi	r6,r3,255
    83a4:	11000243 	ldbu	r4,9(r2)
    83a8:	2008703a 	and	r4,r4,zero
    83ac:	200b883a 	mov	r5,r4
    83b0:	3009883a 	mov	r4,r6
    83b4:	2908b03a 	or	r4,r5,r4
    83b8:	11000245 	stb	r4,9(r2)
    83bc:	1808d23a 	srli	r4,r3,8
    83c0:	21803fcc 	andi	r6,r4,255
    83c4:	11000283 	ldbu	r4,10(r2)
    83c8:	2008703a 	and	r4,r4,zero
    83cc:	200b883a 	mov	r5,r4
    83d0:	3009883a 	mov	r4,r6
    83d4:	2908b03a 	or	r4,r5,r4
    83d8:	11000285 	stb	r4,10(r2)
    83dc:	1808d43a 	srli	r4,r3,16
    83e0:	21803fcc 	andi	r6,r4,255
    83e4:	110002c3 	ldbu	r4,11(r2)
    83e8:	2008703a 	and	r4,r4,zero
    83ec:	200b883a 	mov	r5,r4
    83f0:	3009883a 	mov	r4,r6
    83f4:	2908b03a 	or	r4,r5,r4
    83f8:	110002c5 	stb	r4,11(r2)
    83fc:	180ad63a 	srli	r5,r3,24
    8400:	10c00303 	ldbu	r3,12(r2)
    8404:	1806703a 	and	r3,r3,zero
    8408:	1809883a 	mov	r4,r3
    840c:	2807883a 	mov	r3,r5
    8410:	20c6b03a 	or	r3,r4,r3
    8414:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    8418:	e0bffd17 	ldw	r2,-12(fp)
    841c:	10c00404 	addi	r3,r2,16
    8420:	e0bffd17 	ldw	r2,-12(fp)
    8424:	10800204 	addi	r2,r2,8
    8428:	100b883a 	mov	r5,r2
    842c:	1809883a 	mov	r4,r3
    8430:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    8434:	e0bffd17 	ldw	r2,-12(fp)
    8438:	10c00604 	addi	r3,r2,24
    843c:	e0bffd17 	ldw	r2,-12(fp)
    8440:	10800204 	addi	r2,r2,8
    8444:	100b883a 	mov	r5,r2
    8448:	1809883a 	mov	r4,r3
    844c:	00045340 	call	4534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    8450:	0001883a 	nop
    8454:	e037883a 	mov	sp,fp
    8458:	dfc00117 	ldw	ra,4(sp)
    845c:	df000017 	ldw	fp,0(sp)
    8460:	dec00204 	addi	sp,sp,8
    8464:	f800283a 	ret

00008468 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    8468:	defff804 	addi	sp,sp,-32
    846c:	dfc00715 	stw	ra,28(sp)
    8470:	df000615 	stw	fp,24(sp)
    8474:	df000604 	addi	fp,sp,24
    8478:	e13ffc15 	stw	r4,-16(fp)
    847c:	2805883a 	mov	r2,r5
    8480:	e1bffe15 	stw	r6,-8(fp)
    8484:	e1ffff15 	stw	r7,-4(fp)
    8488:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    848c:	e0bffd0b 	ldhu	r2,-12(fp)
    8490:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    8494:	e0bffe17 	ldw	r2,-8(fp)
    8498:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    849c:	e0bffa0b 	ldhu	r2,-24(fp)
    84a0:	10bfffcc 	andi	r2,r2,65535
    84a4:	10000a26 	beq	r2,zero,84d0 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    84a8:	e0bffb04 	addi	r2,fp,-20
    84ac:	e1bffa04 	addi	r6,fp,-24
    84b0:	100b883a 	mov	r5,r2
    84b4:	e13ffc17 	ldw	r4,-16(fp)
    84b8:	00084e40 	call	84e4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    84bc:	1080005c 	xori	r2,r2,1
    84c0:	10803fcc 	andi	r2,r2,255
    84c4:	1000011e 	bne	r2,zero,84cc <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    84c8:	003ff406 	br	849c <__alt_data_end+0xfc00849c>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    84cc:	0001883a 	nop
}
    84d0:	e037883a 	mov	sp,fp
    84d4:	dfc00117 	ldw	ra,4(sp)
    84d8:	df000017 	ldw	fp,0(sp)
    84dc:	dec00204 	addi	sp,sp,8
    84e0:	f800283a 	ret

000084e4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    84e4:	defff604 	addi	sp,sp,-40
    84e8:	dfc00915 	stw	ra,36(sp)
    84ec:	df000815 	stw	fp,32(sp)
    84f0:	df000804 	addi	fp,sp,32
    84f4:	e13ffc15 	stw	r4,-16(fp)
    84f8:	e17ffd15 	stw	r5,-12(fp)
    84fc:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    8500:	e0bffc17 	ldw	r2,-16(fp)
    8504:	10800804 	addi	r2,r2,32
    8508:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    850c:	e0bffc17 	ldw	r2,-16(fp)
    8510:	10800804 	addi	r2,r2,32
    8514:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    8518:	e0bffc17 	ldw	r2,-16(fp)
    851c:	10800c03 	ldbu	r2,48(r2)
    8520:	10803fcc 	andi	r2,r2,255
    8524:	10c00168 	cmpgeui	r3,r2,5
    8528:	1801411e 	bne	r3,zero,8a30 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    852c:	100690ba 	slli	r3,r2,2
    8530:	00800074 	movhi	r2,1
    8534:	10a15104 	addi	r2,r2,-31420
    8538:	1885883a 	add	r2,r3,r2
    853c:	10800017 	ldw	r2,0(r2)
    8540:	1000683a 	jmp	r2
    8544:	00008558 	cmpnei	zero,zero,533
    8548:	0000858c 	andi	zero,zero,534
    854c:	00008614 	movui	zero,536
    8550:	000086a8 	cmpgeui	zero,zero,538
    8554:	00008714 	movui	zero,540
                case 0:
                        theBuffer.valueSize = 2;
    8558:	e0bffc17 	ldw	r2,-16(fp)
    855c:	00c00084 	movi	r3,2
    8560:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8564:	e0bffc17 	ldw	r2,-16(fp)
    8568:	10c00404 	addi	r3,r2,16
    856c:	e0bffc17 	ldw	r2,-16(fp)
    8570:	10800204 	addi	r2,r2,8
    8574:	100b883a 	mov	r5,r2
    8578:	1809883a 	mov	r4,r3
    857c:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    8580:	e0bffc17 	ldw	r2,-16(fp)
    8584:	00c00044 	movi	r3,1
    8588:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    858c:	e0bffc17 	ldw	r2,-16(fp)
    8590:	10800404 	addi	r2,r2,16
    8594:	e1bffe17 	ldw	r6,-8(fp)
    8598:	e17ffd17 	ldw	r5,-12(fp)
    859c:	1009883a 	mov	r4,r2
    85a0:	000626c0 	call	626c <_ZN20MultiByteValueParser5ParseEPPhPt>
    85a4:	1080005c 	xori	r2,r2,1
    85a8:	10803fcc 	andi	r2,r2,255
    85ac:	10000226 	beq	r2,zero,85b8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    85b0:	0005883a 	mov	r2,zero
    85b4:	00011f06 	br	8a34 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    85b8:	e0bffc17 	ldw	r2,-16(fp)
    85bc:	10c00217 	ldw	r3,8(r2)
    85c0:	1806d23a 	srli	r3,r3,8
    85c4:	10800317 	ldw	r2,12(r2)
    85c8:	10803fcc 	andi	r2,r2,255
    85cc:	1004963a 	slli	r2,r2,24
    85d0:	10c4b03a 	or	r2,r2,r3
    85d4:	10c00003 	ldbu	r3,0(r2)
    85d8:	e0bffc17 	ldw	r2,-16(fp)
    85dc:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    85e0:	e0bffc17 	ldw	r2,-16(fp)
    85e4:	10c00217 	ldw	r3,8(r2)
    85e8:	1806d23a 	srli	r3,r3,8
    85ec:	10800317 	ldw	r2,12(r2)
    85f0:	10803fcc 	andi	r2,r2,255
    85f4:	1004963a 	slli	r2,r2,24
    85f8:	10c4b03a 	or	r2,r2,r3
    85fc:	10c00043 	ldbu	r3,1(r2)
    8600:	e0bffc17 	ldw	r2,-16(fp)
    8604:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    8608:	e0bffc17 	ldw	r2,-16(fp)
    860c:	00c00084 	movi	r3,2
    8610:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    8614:	e0bffc17 	ldw	r2,-16(fp)
    8618:	10800804 	addi	r2,r2,32
    861c:	10c00084 	addi	r3,r2,2
    8620:	e0bffc17 	ldw	r2,-16(fp)
    8624:	19803fcc 	andi	r6,r3,255
    8628:	11000243 	ldbu	r4,9(r2)
    862c:	2008703a 	and	r4,r4,zero
    8630:	200b883a 	mov	r5,r4
    8634:	3009883a 	mov	r4,r6
    8638:	2908b03a 	or	r4,r5,r4
    863c:	11000245 	stb	r4,9(r2)
    8640:	1808d23a 	srli	r4,r3,8
    8644:	21803fcc 	andi	r6,r4,255
    8648:	11000283 	ldbu	r4,10(r2)
    864c:	2008703a 	and	r4,r4,zero
    8650:	200b883a 	mov	r5,r4
    8654:	3009883a 	mov	r4,r6
    8658:	2908b03a 	or	r4,r5,r4
    865c:	11000285 	stb	r4,10(r2)
    8660:	1808d43a 	srli	r4,r3,16
    8664:	21803fcc 	andi	r6,r4,255
    8668:	110002c3 	ldbu	r4,11(r2)
    866c:	2008703a 	and	r4,r4,zero
    8670:	200b883a 	mov	r5,r4
    8674:	3009883a 	mov	r4,r6
    8678:	2908b03a 	or	r4,r5,r4
    867c:	110002c5 	stb	r4,11(r2)
    8680:	180ad63a 	srli	r5,r3,24
    8684:	10c00303 	ldbu	r3,12(r2)
    8688:	1806703a 	and	r3,r3,zero
    868c:	1809883a 	mov	r4,r3
    8690:	2807883a 	mov	r3,r5
    8694:	20c6b03a 	or	r3,r4,r3
    8698:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    869c:	e0bffc17 	ldw	r2,-16(fp)
    86a0:	00c000c4 	movi	r3,3
    86a4:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    86a8:	e0bffc17 	ldw	r2,-16(fp)
    86ac:	10800c83 	ldbu	r2,50(r2)
    86b0:	10803fcc 	andi	r2,r2,255
    86b4:	10c00120 	cmpeqi	r3,r2,4
    86b8:	1800021e 	bne	r3,zero,86c4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    86bc:	10800148 	cmpgei	r2,r2,5
    86c0:	00000306 	br	86d0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    86c4:	e0bffc17 	ldw	r2,-16(fp)
    86c8:	10000d45 	stb	zero,53(r2)
                                        break;
    86cc:	00000106 	br	86d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    86d0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    86d4:	e0bffc17 	ldw	r2,-16(fp)
    86d8:	10800c43 	ldbu	r2,49(r2)
    86dc:	10bfff84 	addi	r2,r2,-2
    86e0:	1007883a 	mov	r3,r2
    86e4:	e0bffc17 	ldw	r2,-16(fp)
    86e8:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    86ec:	e0bffc17 	ldw	r2,-16(fp)
    86f0:	10c00404 	addi	r3,r2,16
    86f4:	e0bffc17 	ldw	r2,-16(fp)
    86f8:	10800204 	addi	r2,r2,8
    86fc:	100b883a 	mov	r5,r2
    8700:	1809883a 	mov	r4,r3
    8704:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    8708:	e0bffc17 	ldw	r2,-16(fp)
    870c:	00c00104 	movi	r3,4
    8710:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    8714:	e0bffc17 	ldw	r2,-16(fp)
    8718:	10800c83 	ldbu	r2,50(r2)
    871c:	10803fcc 	andi	r2,r2,255
    8720:	10c00120 	cmpeqi	r3,r2,4
    8724:	1800141e 	bne	r3,zero,8778 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    8728:	10c00160 	cmpeqi	r3,r2,5
    872c:	18005a1e 	bne	r3,zero,8898 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    8730:	108000a0 	cmpeqi	r2,r2,2
    8734:	10008526 	beq	r2,zero,894c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    8738:	e0bffc17 	ldw	r2,-16(fp)
    873c:	10800404 	addi	r2,r2,16
    8740:	e1bffe17 	ldw	r6,-8(fp)
    8744:	e17ffd17 	ldw	r5,-12(fp)
    8748:	1009883a 	mov	r4,r2
    874c:	000626c0 	call	626c <_ZN20MultiByteValueParser5ParseEPPhPt>
    8750:	1080005c 	xori	r2,r2,1
    8754:	10803fcc 	andi	r2,r2,255
    8758:	10000226 	beq	r2,zero,8764 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    875c:	0005883a 	mov	r2,zero
    8760:	0000b406 	br	8a34 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    8764:	e0bffa17 	ldw	r2,-24(fp)
    8768:	10c00143 	ldbu	r3,5(r2)
    876c:	e0bffc17 	ldw	r2,-16(fp)
    8770:	10c00d85 	stb	r3,54(r2)
                                        break;
    8774:	00008b06 	br	89a4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    8778:	e0bffc17 	ldw	r2,-16(fp)
    877c:	10800404 	addi	r2,r2,16
    8780:	e1bffe17 	ldw	r6,-8(fp)
    8784:	e17ffd17 	ldw	r5,-12(fp)
    8788:	1009883a 	mov	r4,r2
    878c:	000626c0 	call	626c <_ZN20MultiByteValueParser5ParseEPPhPt>
    8790:	1080005c 	xori	r2,r2,1
    8794:	10803fcc 	andi	r2,r2,255
    8798:	10000226 	beq	r2,zero,87a4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    879c:	0005883a 	mov	r2,zero
    87a0:	0000a406 	br	8a34 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    87a4:	e0bffb17 	ldw	r2,-20(fp)
    87a8:	10800083 	ldbu	r2,2(r2)
    87ac:	10803fcc 	andi	r2,r2,255
    87b0:	01402004 	movi	r5,128
    87b4:	1009883a 	mov	r4,r2
    87b8:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    87bc:	e0bffb17 	ldw	r2,-20(fp)
    87c0:	108000c3 	ldbu	r2,3(r2)
    87c4:	10803fcc 	andi	r2,r2,255
    87c8:	01402004 	movi	r5,128
    87cc:	1009883a 	mov	r4,r2
    87d0:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    87d4:	e0bffb17 	ldw	r2,-20(fp)
    87d8:	10800103 	ldbu	r2,4(r2)
    87dc:	10803fcc 	andi	r2,r2,255
    87e0:	01402004 	movi	r5,128
    87e4:	1009883a 	mov	r4,r2
    87e8:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    87ec:	e0bffb17 	ldw	r2,-20(fp)
    87f0:	10800143 	ldbu	r2,5(r2)
    87f4:	10803fcc 	andi	r2,r2,255
    87f8:	01402004 	movi	r5,128
    87fc:	1009883a 	mov	r4,r2
    8800:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    8804:	e0bffb17 	ldw	r2,-20(fp)
    8808:	10800183 	ldbu	r2,6(r2)
    880c:	10803fcc 	andi	r2,r2,255
    8810:	01402004 	movi	r5,128
    8814:	1009883a 	mov	r4,r2
    8818:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    881c:	e0bffb17 	ldw	r2,-20(fp)
    8820:	108001c3 	ldbu	r2,7(r2)
    8824:	10803fcc 	andi	r2,r2,255
    8828:	01402004 	movi	r5,128
    882c:	1009883a 	mov	r4,r2
    8830:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    8834:	e0bffc17 	ldw	r2,-16(fp)
    8838:	10800d03 	ldbu	r2,52(r2)
    883c:	10803fcc 	andi	r2,r2,255
    8840:	10000a26 	beq	r2,zero,886c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    8844:	e0bffb17 	ldw	r2,-20(fp)
    8848:	10800143 	ldbu	r2,5(r2)
    884c:	10803fcc 	andi	r2,r2,255
    8850:	10800058 	cmpnei	r2,r2,1
    8854:	10004e1e 	bne	r2,zero,8990 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    8858:	e0bffb17 	ldw	r2,-20(fp)
    885c:	10800183 	ldbu	r2,6(r2)
    8860:	10803fcc 	andi	r2,r2,255
    8864:	108000d8 	cmpnei	r2,r2,3
    8868:	1000491e 	bne	r2,zero,8990 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    886c:	e0bffc17 	ldw	r2,-16(fp)
    8870:	00c00044 	movi	r3,1
    8874:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    8878:	e0bffc17 	ldw	r2,-16(fp)
    887c:	10800cc3 	ldbu	r2,51(r2)
    8880:	10803fcc 	andi	r2,r2,255
    8884:	108000a8 	cmpgeui	r2,r2,2
    8888:	1000431e 	bne	r2,zero,8998 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    888c:	e0bffc17 	ldw	r2,-16(fp)
    8890:	10000cc5 	stb	zero,51(r2)
                                        break;
    8894:	00004006 	br	8998 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    8898:	e0bffc17 	ldw	r2,-16(fp)
    889c:	10800404 	addi	r2,r2,16
    88a0:	e1bffe17 	ldw	r6,-8(fp)
    88a4:	e17ffd17 	ldw	r5,-12(fp)
    88a8:	1009883a 	mov	r4,r2
    88ac:	000626c0 	call	626c <_ZN20MultiByteValueParser5ParseEPPhPt>
    88b0:	1080005c 	xori	r2,r2,1
    88b4:	10803fcc 	andi	r2,r2,255
    88b8:	10000226 	beq	r2,zero,88c4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    88bc:	0005883a 	mov	r2,zero
    88c0:	00005c06 	br	8a34 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    88c4:	e0bffc17 	ldw	r2,-16(fp)
    88c8:	10800d43 	ldbu	r2,53(r2)
    88cc:	10803fcc 	andi	r2,r2,255
    88d0:	10003326 	beq	r2,zero,89a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    88d4:	e0bffc17 	ldw	r2,-16(fp)
    88d8:	10800cc3 	ldbu	r2,51(r2)
    88dc:	10803fcc 	andi	r2,r2,255
    88e0:	108000a8 	cmpgeui	r2,r2,2
    88e4:	10002e1e 	bne	r2,zero,89a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    88e8:	e0bffc17 	ldw	r2,-16(fp)
    88ec:	10800117 	ldw	r2,4(r2)
    88f0:	10800017 	ldw	r2,0(r2)
    88f4:	10800017 	ldw	r2,0(r2)
    88f8:	e0fffc17 	ldw	r3,-16(fp)
    88fc:	19000117 	ldw	r4,4(r3)
    8900:	e0fffc17 	ldw	r3,-16(fp)
    8904:	18c00d83 	ldbu	r3,54(r3)
    8908:	19403fcc 	andi	r5,r3,255
    890c:	e0fffc17 	ldw	r3,-16(fp)
    8910:	18c00804 	addi	r3,r3,32
    8914:	d8c00115 	stw	r3,4(sp)
    8918:	d8000015 	stw	zero,0(sp)
    891c:	000f883a 	mov	r7,zero
    8920:	000d883a 	mov	r6,zero
    8924:	103ee83a 	callr	r2
    8928:	10803fcc 	andi	r2,r2,255
    892c:	10001c26 	beq	r2,zero,89a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    8930:	e0bffc17 	ldw	r2,-16(fp)
    8934:	10800cc3 	ldbu	r2,51(r2)
    8938:	10800044 	addi	r2,r2,1
    893c:	1007883a 	mov	r3,r2
    8940:	e0bffc17 	ldw	r2,-16(fp)
    8944:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8948:	00001506 	br	89a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    894c:	e0bffc17 	ldw	r2,-16(fp)
    8950:	10c00604 	addi	r3,r2,24
    8954:	e0bffc17 	ldw	r2,-16(fp)
    8958:	10800c43 	ldbu	r2,49(r2)
    895c:	10803fcc 	andi	r2,r2,255
    8960:	10bfff84 	addi	r2,r2,-2
    8964:	10bfffcc 	andi	r2,r2,65535
    8968:	100f883a 	mov	r7,r2
    896c:	e1bffe17 	ldw	r6,-8(fp)
    8970:	e17ffd17 	ldw	r5,-12(fp)
    8974:	1809883a 	mov	r4,r3
    8978:	000459c0 	call	459c <_ZN11ByteSkipper4SkipEPPhPtt>
    897c:	1080005c 	xori	r2,r2,1
    8980:	10803fcc 	andi	r2,r2,255
    8984:	10000726 	beq	r2,zero,89a4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8988:	0005883a 	mov	r2,zero
    898c:	00002906 	br	8a34 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8990:	0001883a 	nop
    8994:	00000306 	br	89a4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8998:	0001883a 	nop
    899c:	00000106 	br	89a4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    89a0:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    89a4:	e0bffc17 	ldw	r2,-16(fp)
    89a8:	10c00804 	addi	r3,r2,32
    89ac:	e0bffc17 	ldw	r2,-16(fp)
    89b0:	19803fcc 	andi	r6,r3,255
    89b4:	11000243 	ldbu	r4,9(r2)
    89b8:	2008703a 	and	r4,r4,zero
    89bc:	200b883a 	mov	r5,r4
    89c0:	3009883a 	mov	r4,r6
    89c4:	2908b03a 	or	r4,r5,r4
    89c8:	11000245 	stb	r4,9(r2)
    89cc:	1808d23a 	srli	r4,r3,8
    89d0:	21803fcc 	andi	r6,r4,255
    89d4:	11000283 	ldbu	r4,10(r2)
    89d8:	2008703a 	and	r4,r4,zero
    89dc:	200b883a 	mov	r5,r4
    89e0:	3009883a 	mov	r4,r6
    89e4:	2908b03a 	or	r4,r5,r4
    89e8:	11000285 	stb	r4,10(r2)
    89ec:	1808d43a 	srli	r4,r3,16
    89f0:	21803fcc 	andi	r6,r4,255
    89f4:	110002c3 	ldbu	r4,11(r2)
    89f8:	2008703a 	and	r4,r4,zero
    89fc:	200b883a 	mov	r5,r4
    8a00:	3009883a 	mov	r4,r6
    8a04:	2908b03a 	or	r4,r5,r4
    8a08:	110002c5 	stb	r4,11(r2)
    8a0c:	180ad63a 	srli	r5,r3,24
    8a10:	10c00303 	ldbu	r3,12(r2)
    8a14:	1806703a 	and	r3,r3,zero
    8a18:	1809883a 	mov	r4,r3
    8a1c:	2807883a 	mov	r3,r5
    8a20:	20c6b03a 	or	r3,r4,r3
    8a24:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8a28:	e0bffc17 	ldw	r2,-16(fp)
    8a2c:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8a30:	00800044 	movi	r2,1
}
    8a34:	e037883a 	mov	sp,fp
    8a38:	dfc00117 	ldw	ra,4(sp)
    8a3c:	df000017 	ldw	fp,0(sp)
    8a40:	dec00204 	addi	sp,sp,8
    8a44:	f800283a 	ret

00008a48 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8a48:	defff904 	addi	sp,sp,-28
    8a4c:	df000615 	stw	fp,24(sp)
    8a50:	df000604 	addi	fp,sp,24
    8a54:	e13ffb15 	stw	r4,-20(fp)
    8a58:	3009883a 	mov	r4,r6
    8a5c:	3807883a 	mov	r3,r7
    8a60:	e0800117 	ldw	r2,4(fp)
    8a64:	e17ffc05 	stb	r5,-16(fp)
    8a68:	e13ffd05 	stb	r4,-12(fp)
    8a6c:	e0fffe05 	stb	r3,-8(fp)
    8a70:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8a74:	e0800217 	ldw	r2,8(fp)
    8a78:	10c000c3 	ldbu	r3,3(r2)
    8a7c:	e0bffb17 	ldw	r2,-20(fp)
    8a80:	10800483 	ldbu	r2,18(r2)
    8a84:	1884703a 	and	r2,r3,r2
    8a88:	10803fcc 	andi	r2,r2,255
    8a8c:	10800098 	cmpnei	r2,r2,2
    8a90:	10001f1e 	bne	r2,zero,8b10 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8a94:	e0800217 	ldw	r2,8(fp)
    8a98:	10800083 	ldbu	r2,2(r2)
    8a9c:	10803fcc 	andi	r2,r2,255
    8aa0:	1080201c 	xori	r2,r2,128
    8aa4:	10bfe004 	addi	r2,r2,-128
    8aa8:	1000020e 	bge	r2,zero,8ab4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8aac:	00800044 	movi	r2,1
    8ab0:	00000106 	br	8ab8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8ab4:	00800084 	movi	r2,2
    8ab8:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8abc:	e0fffa03 	ldbu	r3,-24(fp)
    8ac0:	e0800217 	ldw	r2,8(fp)
    8ac4:	10800083 	ldbu	r2,2(r2)
    8ac8:	108003cc 	andi	r2,r2,15
    8acc:	100b883a 	mov	r5,r2
    8ad0:	e13ffb17 	ldw	r4,-20(fp)
    8ad4:	1805883a 	mov	r2,r3
    8ad8:	1085883a 	add	r2,r2,r2
    8adc:	10c5883a 	add	r2,r2,r3
    8ae0:	2085883a 	add	r2,r4,r2
    8ae4:	108004c4 	addi	r2,r2,19
    8ae8:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    8aec:	e0800217 	ldw	r2,8(fp)
    8af0:	10c00103 	ldbu	r3,4(r2)
    8af4:	10800143 	ldbu	r2,5(r2)
    8af8:	1004923a 	slli	r2,r2,8
    8afc:	10c4b03a 	or	r2,r2,r3
    8b00:	10bfffcc 	andi	r2,r2,65535
    8b04:	10801070 	cmpltui	r2,r2,65
    8b08:	10000d1e 	bne	r2,zero,8b40 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    8b0c:	00000206 	br	8b18 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    8b10:	0005883a 	mov	r2,zero
    8b14:	00001906 	br	8b7c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    8b18:	e0fffa03 	ldbu	r3,-24(fp)
    8b1c:	e13ffb17 	ldw	r4,-20(fp)
    8b20:	1805883a 	mov	r2,r3
    8b24:	1085883a 	add	r2,r2,r2
    8b28:	10c5883a 	add	r2,r2,r3
    8b2c:	2085883a 	add	r2,r4,r2
    8b30:	10800504 	addi	r2,r2,20
    8b34:	00c01004 	movi	r3,64
    8b38:	10c00005 	stb	r3,0(r2)
    8b3c:	00000e06 	br	8b78 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    8b40:	e0fffa03 	ldbu	r3,-24(fp)
    8b44:	e0800217 	ldw	r2,8(fp)
    8b48:	11000103 	ldbu	r4,4(r2)
    8b4c:	10800143 	ldbu	r2,5(r2)
    8b50:	1004923a 	slli	r2,r2,8
    8b54:	1104b03a 	or	r2,r2,r4
    8b58:	100b883a 	mov	r5,r2
    8b5c:	e13ffb17 	ldw	r4,-20(fp)
    8b60:	1805883a 	mov	r2,r3
    8b64:	1085883a 	add	r2,r2,r2
    8b68:	10c5883a 	add	r2,r2,r3
    8b6c:	2085883a 	add	r2,r4,r2
    8b70:	10800504 	addi	r2,r2,20
    8b74:	11400005 	stb	r5,0(r2)
        }

        return true;
    8b78:	00800044 	movi	r2,1
}
    8b7c:	e037883a 	mov	sp,fp
    8b80:	df000017 	ldw	fp,0(sp)
    8b84:	dec00104 	addi	sp,sp,4
    8b88:	f800283a 	ret

00008b8c <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    8b8c:	213fff04 	addi	r4,r4,-4
    8b90:	0008a481 	jmpi	8a48 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00008b94 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    8b94:	defffa04 	addi	sp,sp,-24
    8b98:	df000515 	stw	fp,20(sp)
    8b9c:	df000504 	addi	fp,sp,20
    8ba0:	e13ffb15 	stw	r4,-20(fp)
    8ba4:	3009883a 	mov	r4,r6
    8ba8:	3807883a 	mov	r3,r7
    8bac:	e0800117 	ldw	r2,4(fp)
    8bb0:	e17ffc05 	stb	r5,-16(fp)
    8bb4:	e13ffd05 	stb	r4,-12(fp)
    8bb8:	e0fffe05 	stb	r3,-8(fp)
    8bbc:	e0bfff05 	stb	r2,-4(fp)
                return true;
    8bc0:	00800044 	movi	r2,1
        };
    8bc4:	e037883a 	mov	sp,fp
    8bc8:	df000017 	ldw	fp,0(sp)
    8bcc:	dec00104 	addi	sp,sp,4
    8bd0:	f800283a 	ret

00008bd4 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    8bd4:	defffe04 	addi	sp,sp,-8
    8bd8:	df000115 	stw	fp,4(sp)
    8bdc:	df000104 	addi	fp,sp,4
    8be0:	e13fff15 	stw	r4,-4(fp)
    8be4:	e0bfff17 	ldw	r2,-4(fp)
    8be8:	10800d83 	ldbu	r2,54(r2)
    8bec:	e037883a 	mov	sp,fp
    8bf0:	df000017 	ldw	fp,0(sp)
    8bf4:	dec00104 	addi	sp,sp,4
    8bf8:	f800283a 	ret

00008bfc <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    8bfc:	defffe04 	addi	sp,sp,-8
    8c00:	df000115 	stw	fp,4(sp)
    8c04:	df000104 	addi	fp,sp,4
    8c08:	e13fff15 	stw	r4,-4(fp)
    8c0c:	e0bfff17 	ldw	r2,-4(fp)
    8c10:	10800cc3 	ldbu	r2,51(r2)
    8c14:	e037883a 	mov	sp,fp
    8c18:	df000017 	ldw	fp,0(sp)
    8c1c:	dec00104 	addi	sp,sp,4
    8c20:	f800283a 	ret

00008c24 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    8c24:	defffd04 	addi	sp,sp,-12
    8c28:	df000215 	stw	fp,8(sp)
    8c2c:	df000204 	addi	fp,sp,8
    8c30:	e13ffe15 	stw	r4,-8(fp)
    8c34:	2805883a 	mov	r2,r5
    8c38:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    8c3c:	e0bfff03 	ldbu	r2,-4(fp)
    8c40:	10803c28 	cmpgeui	r2,r2,240
    8c44:	1000031e 	bne	r2,zero,8c54 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    8c48:	e0bfff03 	ldbu	r2,-4(fp)
    8c4c:	1004d13a 	srli	r2,r2,4
    8c50:	00000606 	br	8c6c <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    8c54:	e0bfff03 	ldbu	r2,-4(fp)
    8c58:	10c003cc 	andi	r3,r2,15
    8c5c:	008000b4 	movhi	r2,2
    8c60:	10971b04 	addi	r2,r2,23660
    8c64:	1885883a 	add	r2,r3,r2
    8c68:	10800003 	ldbu	r2,0(r2)
        };
    8c6c:	e037883a 	mov	sp,fp
    8c70:	df000017 	ldw	fp,0(sp)
    8c74:	dec00104 	addi	sp,sp,4
    8c78:	f800283a 	ret

00008c7c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    8c7c:	defffd04 	addi	sp,sp,-12
    8c80:	df000215 	stw	fp,8(sp)
    8c84:	df000204 	addi	fp,sp,8
    8c88:	e13ffe15 	stw	r4,-8(fp)
    8c8c:	2805883a 	mov	r2,r5
    8c90:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    8c94:	e0ffff03 	ldbu	r3,-4(fp)
    8c98:	008000b4 	movhi	r2,2
    8c9c:	10971704 	addi	r2,r2,23644
    8ca0:	1885883a 	add	r2,r3,r2
    8ca4:	10800003 	ldbu	r2,0(r2)
        };
    8ca8:	e037883a 	mov	sp,fp
    8cac:	df000017 	ldw	fp,0(sp)
    8cb0:	dec00104 	addi	sp,sp,4
    8cb4:	f800283a 	ret

00008cb8 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    8cb8:	defffe04 	addi	sp,sp,-8
    8cbc:	df000115 	stw	fp,4(sp)
    8cc0:	df000104 	addi	fp,sp,4
    8cc4:	e13fff15 	stw	r4,-4(fp)
    8cc8:	e0bfff17 	ldw	r2,-4(fp)
    8ccc:	10800303 	ldbu	r2,12(r2)
    8cd0:	e037883a 	mov	sp,fp
    8cd4:	df000017 	ldw	fp,0(sp)
    8cd8:	dec00104 	addi	sp,sp,4
    8cdc:	f800283a 	ret

00008ce0 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    8ce0:	defffe04 	addi	sp,sp,-8
    8ce4:	df000115 	stw	fp,4(sp)
    8ce8:	df000104 	addi	fp,sp,4
    8cec:	e13fff15 	stw	r4,-4(fp)
    8cf0:	008000b4 	movhi	r2,2
    8cf4:	10973304 	addi	r2,r2,23756
    8cf8:	e0ffff17 	ldw	r3,-4(fp)
    8cfc:	18800015 	stw	r2,0(r3)
    8d00:	0001883a 	nop
    8d04:	e037883a 	mov	sp,fp
    8d08:	df000017 	ldw	fp,0(sp)
    8d0c:	dec00104 	addi	sp,sp,4
    8d10:	f800283a 	ret

00008d14 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    8d14:	defffd04 	addi	sp,sp,-12
    8d18:	df000215 	stw	fp,8(sp)
    8d1c:	df000204 	addi	fp,sp,8
    8d20:	2005883a 	mov	r2,r4
    8d24:	e17fff15 	stw	r5,-4(fp)
    8d28:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    8d2c:	0001883a 	nop
    8d30:	e037883a 	mov	sp,fp
    8d34:	df000017 	ldw	fp,0(sp)
    8d38:	dec00104 	addi	sp,sp,4
    8d3c:	f800283a 	ret

00008d40 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    8d40:	deffe204 	addi	sp,sp,-120
    8d44:	dfc01d15 	stw	ra,116(sp)
    8d48:	df001c15 	stw	fp,112(sp)
    8d4c:	df001c04 	addi	fp,sp,112
    8d50:	e13ffd15 	stw	r4,-12(fp)
    8d54:	2805883a 	mov	r2,r5
    8d58:	e1bfff15 	stw	r6,-4(fp)
    8d5c:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    8d60:	00801004 	movi	r2,64
    8d64:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    8d68:	e0bffd17 	ldw	r2,-12(fp)
    8d6c:	11000217 	ldw	r4,8(r2)
    8d70:	e0bffd17 	ldw	r2,-12(fp)
    8d74:	10800303 	ldbu	r2,12(r2)
    8d78:	11403fcc 	andi	r5,r2,255
    8d7c:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    8d80:	e0ffff17 	ldw	r3,-4(fp)
    8d84:	d8c00715 	stw	r3,28(sp)
    8d88:	e0ffec84 	addi	r3,fp,-78
    8d8c:	d8c00615 	stw	r3,24(sp)
    8d90:	00c01004 	movi	r3,64
    8d94:	d8c00515 	stw	r3,20(sp)
    8d98:	00c02004 	movi	r3,128
    8d9c:	d8c00415 	stw	r3,16(sp)
    8da0:	d8800315 	stw	r2,12(sp)
    8da4:	00800884 	movi	r2,34
    8da8:	d8800215 	stw	r2,8(sp)
    8dac:	d8000115 	stw	zero,4(sp)
    8db0:	00800184 	movi	r2,6
    8db4:	d8800015 	stw	r2,0(sp)
    8db8:	01c02044 	movi	r7,129
    8dbc:	000d883a 	mov	r6,zero
    8dc0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    8dc4:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    8dc8:	e0bfec43 	ldbu	r2,-79(fp)
}
    8dcc:	e037883a 	mov	sp,fp
    8dd0:	dfc00117 	ldw	ra,4(sp)
    8dd4:	df000017 	ldw	fp,0(sp)
    8dd8:	dec00204 	addi	sp,sp,8
    8ddc:	f800283a 	ret

00008de0 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8de0:	defff004 	addi	sp,sp,-64
    8de4:	dfc00f15 	stw	ra,60(sp)
    8de8:	df000e15 	stw	fp,56(sp)
    8dec:	df000e04 	addi	fp,sp,56
    8df0:	e13ffa15 	stw	r4,-24(fp)
    8df4:	2811883a 	mov	r8,r5
    8df8:	300b883a 	mov	r5,r6
    8dfc:	3809883a 	mov	r4,r7
    8e00:	e0c00217 	ldw	r3,8(fp)
    8e04:	e0800317 	ldw	r2,12(fp)
    8e08:	e23ffb05 	stb	r8,-20(fp)
    8e0c:	e17ffc05 	stb	r5,-16(fp)
    8e10:	e13ffd05 	stb	r4,-12(fp)
    8e14:	e0fffe05 	stb	r3,-8(fp)
    8e18:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8e1c:	e0bffa17 	ldw	r2,-24(fp)
    8e20:	12000217 	ldw	r8,8(r2)
    8e24:	e0bffa17 	ldw	r2,-24(fp)
    8e28:	10800303 	ldbu	r2,12(r2)
    8e2c:	12403fcc 	andi	r9,r2,255
    8e30:	e2bffb03 	ldbu	r10,-20(fp)
    8e34:	e0bffe03 	ldbu	r2,-8(fp)
    8e38:	e0fffd03 	ldbu	r3,-12(fp)
    8e3c:	e13ffc03 	ldbu	r4,-16(fp)
    8e40:	e17fff0b 	ldhu	r5,-4(fp)
    8e44:	e1bfff0b 	ldhu	r6,-4(fp)
    8e48:	d8000715 	stw	zero,28(sp)
    8e4c:	e1c00417 	ldw	r7,16(fp)
    8e50:	d9c00615 	stw	r7,24(sp)
    8e54:	d9800515 	stw	r6,20(sp)
    8e58:	d9400415 	stw	r5,16(sp)
    8e5c:	d9000315 	stw	r4,12(sp)
    8e60:	d8c00215 	stw	r3,8(sp)
    8e64:	d8800115 	stw	r2,4(sp)
    8e68:	00800244 	movi	r2,9
    8e6c:	d8800015 	stw	r2,0(sp)
    8e70:	01c00844 	movi	r7,33
    8e74:	500d883a 	mov	r6,r10
    8e78:	480b883a 	mov	r5,r9
    8e7c:	4009883a 	mov	r4,r8
    8e80:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8e84:	e037883a 	mov	sp,fp
    8e88:	dfc00117 	ldw	ra,4(sp)
    8e8c:	df000017 	ldw	fp,0(sp)
    8e90:	dec00204 	addi	sp,sp,8
    8e94:	f800283a 	ret

00008e98 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8e98:	defff004 	addi	sp,sp,-64
    8e9c:	dfc00f15 	stw	ra,60(sp)
    8ea0:	df000e15 	stw	fp,56(sp)
    8ea4:	df000e04 	addi	fp,sp,56
    8ea8:	e13ffa15 	stw	r4,-24(fp)
    8eac:	2811883a 	mov	r8,r5
    8eb0:	300b883a 	mov	r5,r6
    8eb4:	3809883a 	mov	r4,r7
    8eb8:	e0c00217 	ldw	r3,8(fp)
    8ebc:	e0800317 	ldw	r2,12(fp)
    8ec0:	e23ffb05 	stb	r8,-20(fp)
    8ec4:	e17ffc05 	stb	r5,-16(fp)
    8ec8:	e13ffd05 	stb	r4,-12(fp)
    8ecc:	e0fffe05 	stb	r3,-8(fp)
    8ed0:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8ed4:	e0bffa17 	ldw	r2,-24(fp)
    8ed8:	12000217 	ldw	r8,8(r2)
    8edc:	e0bffa17 	ldw	r2,-24(fp)
    8ee0:	10800303 	ldbu	r2,12(r2)
    8ee4:	12403fcc 	andi	r9,r2,255
    8ee8:	e2bffb03 	ldbu	r10,-20(fp)
    8eec:	e0bffe03 	ldbu	r2,-8(fp)
    8ef0:	e0fffd03 	ldbu	r3,-12(fp)
    8ef4:	e13ffc03 	ldbu	r4,-16(fp)
    8ef8:	e17fff0b 	ldhu	r5,-4(fp)
    8efc:	e1bfff0b 	ldhu	r6,-4(fp)
    8f00:	d8000715 	stw	zero,28(sp)
    8f04:	e1c00417 	ldw	r7,16(fp)
    8f08:	d9c00615 	stw	r7,24(sp)
    8f0c:	d9800515 	stw	r6,20(sp)
    8f10:	d9400415 	stw	r5,16(sp)
    8f14:	d9000315 	stw	r4,12(sp)
    8f18:	d8c00215 	stw	r3,8(sp)
    8f1c:	d8800115 	stw	r2,4(sp)
    8f20:	00800044 	movi	r2,1
    8f24:	d8800015 	stw	r2,0(sp)
    8f28:	01c02844 	movi	r7,161
    8f2c:	500d883a 	mov	r6,r10
    8f30:	480b883a 	mov	r5,r9
    8f34:	4009883a 	mov	r4,r8
    8f38:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8f3c:	e037883a 	mov	sp,fp
    8f40:	dfc00117 	ldw	ra,4(sp)
    8f44:	df000017 	ldw	fp,0(sp)
    8f48:	dec00204 	addi	sp,sp,8
    8f4c:	f800283a 	ret

00008f50 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    8f50:	defff204 	addi	sp,sp,-56
    8f54:	dfc00d15 	stw	ra,52(sp)
    8f58:	df000c15 	stw	fp,48(sp)
    8f5c:	df000c04 	addi	fp,sp,48
    8f60:	e13ffc15 	stw	r4,-16(fp)
    8f64:	2807883a 	mov	r3,r5
    8f68:	3005883a 	mov	r2,r6
    8f6c:	e1ffff15 	stw	r7,-4(fp)
    8f70:	e0fffd05 	stb	r3,-12(fp)
    8f74:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    8f78:	e0bffc17 	ldw	r2,-16(fp)
    8f7c:	12000217 	ldw	r8,8(r2)
    8f80:	e0bffc17 	ldw	r2,-16(fp)
    8f84:	10800303 	ldbu	r2,12(r2)
    8f88:	11403fcc 	andi	r5,r2,255
    8f8c:	e0bffe03 	ldbu	r2,-8(fp)
    8f90:	e0fffd03 	ldbu	r3,-12(fp)
    8f94:	d8000715 	stw	zero,28(sp)
    8f98:	e13fff17 	ldw	r4,-4(fp)
    8f9c:	d9000615 	stw	r4,24(sp)
    8fa0:	01000044 	movi	r4,1
    8fa4:	d9000515 	stw	r4,20(sp)
    8fa8:	01000044 	movi	r4,1
    8fac:	d9000415 	stw	r4,16(sp)
    8fb0:	d8c00315 	stw	r3,12(sp)
    8fb4:	d8000215 	stw	zero,8(sp)
    8fb8:	d8800115 	stw	r2,4(sp)
    8fbc:	00800084 	movi	r2,2
    8fc0:	d8800015 	stw	r2,0(sp)
    8fc4:	01c02844 	movi	r7,161
    8fc8:	000d883a 	mov	r6,zero
    8fcc:	4009883a 	mov	r4,r8
    8fd0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8fd4:	e037883a 	mov	sp,fp
    8fd8:	dfc00117 	ldw	ra,4(sp)
    8fdc:	df000017 	ldw	fp,0(sp)
    8fe0:	dec00204 	addi	sp,sp,8
    8fe4:	f800283a 	ret

00008fe8 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    8fe8:	defff204 	addi	sp,sp,-56
    8fec:	dfc00d15 	stw	ra,52(sp)
    8ff0:	df000c15 	stw	fp,48(sp)
    8ff4:	df000c04 	addi	fp,sp,48
    8ff8:	e13ffc15 	stw	r4,-16(fp)
    8ffc:	2809883a 	mov	r4,r5
    9000:	3007883a 	mov	r3,r6
    9004:	3805883a 	mov	r2,r7
    9008:	e13ffd05 	stb	r4,-12(fp)
    900c:	e0fffe05 	stb	r3,-8(fp)
    9010:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    9014:	e0bffc17 	ldw	r2,-16(fp)
    9018:	12000217 	ldw	r8,8(r2)
    901c:	e0bffc17 	ldw	r2,-16(fp)
    9020:	10800303 	ldbu	r2,12(r2)
    9024:	11403fcc 	andi	r5,r2,255
    9028:	e0bffe03 	ldbu	r2,-8(fp)
    902c:	e0ffff03 	ldbu	r3,-4(fp)
    9030:	e13ffd03 	ldbu	r4,-12(fp)
    9034:	d8000715 	stw	zero,28(sp)
    9038:	d8000615 	stw	zero,24(sp)
    903c:	d8000515 	stw	zero,20(sp)
    9040:	d8000415 	stw	zero,16(sp)
    9044:	d9000315 	stw	r4,12(sp)
    9048:	d8c00215 	stw	r3,8(sp)
    904c:	d8800115 	stw	r2,4(sp)
    9050:	00800284 	movi	r2,10
    9054:	d8800015 	stw	r2,0(sp)
    9058:	01c00844 	movi	r7,33
    905c:	000d883a 	mov	r6,zero
    9060:	4009883a 	mov	r4,r8
    9064:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9068:	e037883a 	mov	sp,fp
    906c:	dfc00117 	ldw	ra,4(sp)
    9070:	df000017 	ldw	fp,0(sp)
    9074:	dec00204 	addi	sp,sp,8
    9078:	f800283a 	ret

0000907c <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    907c:	defff304 	addi	sp,sp,-52
    9080:	dfc00c15 	stw	ra,48(sp)
    9084:	df000b15 	stw	fp,44(sp)
    9088:	df000b04 	addi	fp,sp,44
    908c:	e13ffd15 	stw	r4,-12(fp)
    9090:	2807883a 	mov	r3,r5
    9094:	3005883a 	mov	r2,r6
    9098:	e0fffe05 	stb	r3,-8(fp)
    909c:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    90a0:	e0bffd17 	ldw	r2,-12(fp)
    90a4:	11000217 	ldw	r4,8(r2)
    90a8:	e0bffd17 	ldw	r2,-12(fp)
    90ac:	10800303 	ldbu	r2,12(r2)
    90b0:	11403fcc 	andi	r5,r2,255
    90b4:	e0bfff03 	ldbu	r2,-4(fp)
    90b8:	e0fffe03 	ldbu	r3,-8(fp)
    90bc:	d8000715 	stw	zero,28(sp)
    90c0:	d8000615 	stw	zero,24(sp)
    90c4:	d8000515 	stw	zero,20(sp)
    90c8:	d8000415 	stw	zero,16(sp)
    90cc:	d8c00315 	stw	r3,12(sp)
    90d0:	d8000215 	stw	zero,8(sp)
    90d4:	d8800115 	stw	r2,4(sp)
    90d8:	008002c4 	movi	r2,11
    90dc:	d8800015 	stw	r2,0(sp)
    90e0:	01c00844 	movi	r7,33
    90e4:	000d883a 	mov	r6,zero
    90e8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    90ec:	e037883a 	mov	sp,fp
    90f0:	dfc00117 	ldw	ra,4(sp)
    90f4:	df000017 	ldw	fp,0(sp)
    90f8:	dec00204 	addi	sp,sp,8
    90fc:	f800283a 	ret

00009100 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    9100:	defff304 	addi	sp,sp,-52
    9104:	dfc00c15 	stw	ra,48(sp)
    9108:	df000b15 	stw	fp,44(sp)
    910c:	df000b04 	addi	fp,sp,44
    9110:	e13ffd15 	stw	r4,-12(fp)
    9114:	2805883a 	mov	r2,r5
    9118:	e1bfff15 	stw	r6,-4(fp)
    911c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    9120:	e0bffd17 	ldw	r2,-12(fp)
    9124:	11000217 	ldw	r4,8(r2)
    9128:	e0bffd17 	ldw	r2,-12(fp)
    912c:	10800303 	ldbu	r2,12(r2)
    9130:	11403fcc 	andi	r5,r2,255
    9134:	e0bffe03 	ldbu	r2,-8(fp)
    9138:	d8000715 	stw	zero,28(sp)
    913c:	e0ffff17 	ldw	r3,-4(fp)
    9140:	d8c00615 	stw	r3,24(sp)
    9144:	00c00044 	movi	r3,1
    9148:	d8c00515 	stw	r3,20(sp)
    914c:	00c00044 	movi	r3,1
    9150:	d8c00415 	stw	r3,16(sp)
    9154:	d8800315 	stw	r2,12(sp)
    9158:	d8000215 	stw	zero,8(sp)
    915c:	d8000115 	stw	zero,4(sp)
    9160:	008000c4 	movi	r2,3
    9164:	d8800015 	stw	r2,0(sp)
    9168:	01c02844 	movi	r7,161
    916c:	000d883a 	mov	r6,zero
    9170:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9174:	e037883a 	mov	sp,fp
    9178:	dfc00117 	ldw	ra,4(sp)
    917c:	df000017 	ldw	fp,0(sp)
    9180:	dec00204 	addi	sp,sp,8
    9184:	f800283a 	ret

00009188 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    9188:	defffc04 	addi	sp,sp,-16
    918c:	dfc00315 	stw	ra,12(sp)
    9190:	df000215 	stw	fp,8(sp)
    9194:	df000204 	addi	fp,sp,8
    9198:	e13ffe15 	stw	r4,-8(fp)
    919c:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    91a0:	e0bfff17 	ldw	r2,-4(fp)
    91a4:	10800003 	ldbu	r2,0(r2)
    91a8:	10803fcc 	andi	r2,r2,255
    91ac:	01402004 	movi	r5,128
    91b0:	1009883a 	mov	r4,r2
    91b4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    91b8:	e0bfff17 	ldw	r2,-4(fp)
    91bc:	10800043 	ldbu	r2,1(r2)
    91c0:	10803fcc 	andi	r2,r2,255
    91c4:	01402004 	movi	r5,128
    91c8:	1009883a 	mov	r4,r2
    91cc:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    91d0:	e0bfff17 	ldw	r2,-4(fp)
    91d4:	10800083 	ldbu	r2,2(r2)
    91d8:	10803fcc 	andi	r2,r2,255
    91dc:	01402004 	movi	r5,128
    91e0:	1009883a 	mov	r4,r2
    91e4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    91e8:	e0bfff17 	ldw	r2,-4(fp)
    91ec:	108000c3 	ldbu	r2,3(r2)
    91f0:	10803fcc 	andi	r2,r2,255
    91f4:	01402004 	movi	r5,128
    91f8:	1009883a 	mov	r4,r2
    91fc:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    9200:	e0bfff17 	ldw	r2,-4(fp)
    9204:	10c00103 	ldbu	r3,4(r2)
    9208:	10800143 	ldbu	r2,5(r2)
    920c:	1004923a 	slli	r2,r2,8
    9210:	10c4b03a 	or	r2,r2,r3
    9214:	10bfffcc 	andi	r2,r2,65535
    9218:	01402004 	movi	r5,128
    921c:	1009883a 	mov	r4,r2
    9220:	0008d140 	call	8d14 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    9224:	e0bfff17 	ldw	r2,-4(fp)
    9228:	10800183 	ldbu	r2,6(r2)
    922c:	10803fcc 	andi	r2,r2,255
    9230:	01402004 	movi	r5,128
    9234:	1009883a 	mov	r4,r2
    9238:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
}
    923c:	0001883a 	nop
    9240:	e037883a 	mov	sp,fp
    9244:	dfc00117 	ldw	ra,4(sp)
    9248:	df000017 	ldw	fp,0(sp)
    924c:	dec00204 	addi	sp,sp,8
    9250:	f800283a 	ret

00009254 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    9254:	defffc04 	addi	sp,sp,-16
    9258:	dfc00315 	stw	ra,12(sp)
    925c:	df000215 	stw	fp,8(sp)
    9260:	df000204 	addi	fp,sp,8
    9264:	e13ffe15 	stw	r4,-8(fp)
    9268:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    926c:	e0bfff17 	ldw	r2,-4(fp)
    9270:	10800003 	ldbu	r2,0(r2)
    9274:	10803fcc 	andi	r2,r2,255
    9278:	01402004 	movi	r5,128
    927c:	1009883a 	mov	r4,r2
    9280:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    9284:	e0bfff17 	ldw	r2,-4(fp)
    9288:	10800043 	ldbu	r2,1(r2)
    928c:	10803fcc 	andi	r2,r2,255
    9290:	01402004 	movi	r5,128
    9294:	1009883a 	mov	r4,r2
    9298:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    929c:	e0bfff17 	ldw	r2,-4(fp)
    92a0:	10c00083 	ldbu	r3,2(r2)
    92a4:	108000c3 	ldbu	r2,3(r2)
    92a8:	1004923a 	slli	r2,r2,8
    92ac:	10c4b03a 	or	r2,r2,r3
    92b0:	10bfffcc 	andi	r2,r2,65535
    92b4:	01402004 	movi	r5,128
    92b8:	1009883a 	mov	r4,r2
    92bc:	0008d140 	call	8d14 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    92c0:	e0bfff17 	ldw	r2,-4(fp)
    92c4:	10800103 	ldbu	r2,4(r2)
    92c8:	10803fcc 	andi	r2,r2,255
    92cc:	01402004 	movi	r5,128
    92d0:	1009883a 	mov	r4,r2
    92d4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    92d8:	e0bfff17 	ldw	r2,-4(fp)
    92dc:	10800143 	ldbu	r2,5(r2)
    92e0:	10803fcc 	andi	r2,r2,255
    92e4:	01402004 	movi	r5,128
    92e8:	1009883a 	mov	r4,r2
    92ec:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    92f0:	e0bfff17 	ldw	r2,-4(fp)
    92f4:	10800183 	ldbu	r2,6(r2)
    92f8:	10803fcc 	andi	r2,r2,255
    92fc:	01402004 	movi	r5,128
    9300:	1009883a 	mov	r4,r2
    9304:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    9308:	e0bfff17 	ldw	r2,-4(fp)
    930c:	10c001c3 	ldbu	r3,7(r2)
    9310:	10800203 	ldbu	r2,8(r2)
    9314:	1004923a 	slli	r2,r2,8
    9318:	10c4b03a 	or	r2,r2,r3
    931c:	10bfffcc 	andi	r2,r2,65535
    9320:	01402004 	movi	r5,128
    9324:	1009883a 	mov	r4,r2
    9328:	0008d140 	call	8d14 <_Z10D_PrintHexItEvT_i>
}
    932c:	0001883a 	nop
    9330:	e037883a 	mov	sp,fp
    9334:	dfc00117 	ldw	ra,4(sp)
    9338:	df000017 	ldw	fp,0(sp)
    933c:	dec00204 	addi	sp,sp,8
    9340:	f800283a 	ret

00009344 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    9344:	defffd04 	addi	sp,sp,-12
    9348:	dfc00215 	stw	ra,8(sp)
    934c:	df000115 	stw	fp,4(sp)
    9350:	df000104 	addi	fp,sp,4
    9354:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    9358:	010000b4 	movhi	r4,2
    935c:	211f7b04 	addi	r4,r4,32236
    9360:	000ea400 	call	ea40 <puts>
	vbusState = 0;
    9364:	d0323b45 	stb	zero,-14099(gp)
};
    9368:	0001883a 	nop
    936c:	e037883a 	mov	sp,fp
    9370:	dfc00117 	ldw	ra,4(sp)
    9374:	df000017 	ldw	fp,0(sp)
    9378:	dec00204 	addi	sp,sp,8
    937c:	f800283a 	ret

00009380 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    9380:	defffe04 	addi	sp,sp,-8
    9384:	df000115 	stw	fp,4(sp)
    9388:	df000104 	addi	fp,sp,4
    938c:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    9390:	d0b23b43 	ldbu	r2,-14099(gp)
};
    9394:	e037883a 	mov	sp,fp
    9398:	df000017 	ldw	fp,0(sp)
    939c:	dec00104 	addi	sp,sp,4
    93a0:	f800283a 	ret

000093a4 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    93a4:	defff704 	addi	sp,sp,-36
    93a8:	dfc00815 	stw	ra,32(sp)
    93ac:	df000715 	stw	fp,28(sp)
    93b0:	df000704 	addi	fp,sp,28
    93b4:	e13ffd15 	stw	r4,-12(fp)
    93b8:	2807883a 	mov	r3,r5
    93bc:	3005883a 	mov	r2,r6
    93c0:	e0fffe05 	stb	r3,-8(fp)
    93c4:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    93c8:	e03ffc45 	stb	zero,-15(fp)
    93cc:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    93d0:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    93d4:	e0bffe03 	ldbu	r2,-8(fp)
    93d8:	10800084 	addi	r2,r2,2
    93dc:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    93e0:	e0bfff03 	ldbu	r2,-4(fp)
    93e4:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    93e8:	e0fffc44 	addi	r3,fp,-15
    93ec:	d8000215 	stw	zero,8(sp)
    93f0:	e0bffcc4 	addi	r2,fp,-13
    93f4:	d8800115 	stw	r2,4(sp)
    93f8:	d8000015 	stw	zero,0(sp)
    93fc:	180f883a 	mov	r7,r3
    9400:	01800084 	movi	r6,2
    9404:	000b883a 	mov	r5,zero
    9408:	01010034 	movhi	r4,1024
    940c:	21044804 	addi	r4,r4,4384
    9410:	0021c940 	call	21c94 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    9414:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    9418:	0001883a 	nop
    941c:	e037883a 	mov	sp,fp
    9420:	dfc00117 	ldw	ra,4(sp)
    9424:	df000017 	ldw	fp,0(sp)
    9428:	dec00204 	addi	sp,sp,8
    942c:	f800283a 	ret

00009430 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9430:	defff304 	addi	sp,sp,-52
    9434:	dfc00c15 	stw	ra,48(sp)
    9438:	df000b15 	stw	fp,44(sp)
    943c:	dc000a15 	stw	r16,40(sp)
    9440:	df000b04 	addi	fp,sp,44
    9444:	e13ffb15 	stw	r4,-20(fp)
    9448:	3009883a 	mov	r4,r6
    944c:	e1fffe15 	stw	r7,-8(fp)
    9450:	e17ffc05 	stb	r5,-16(fp)
    9454:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9458:	d809883a 	mov	r4,sp
    945c:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    9460:	e13ffd03 	ldbu	r4,-12(fp)
    9464:	e13ff815 	stw	r4,-32(fp)
    9468:	200b883a 	mov	r5,r4
    946c:	29400044 	addi	r5,r5,1
    9470:	2819883a 	mov	r12,r5
    9474:	001b883a 	mov	r13,zero
    9478:	600ad77a 	srli	r5,r12,29
    947c:	681290fa 	slli	r9,r13,3
    9480:	2a52b03a 	or	r9,r5,r9
    9484:	601090fa 	slli	r8,r12,3
    9488:	200b883a 	mov	r5,r4
    948c:	29400044 	addi	r5,r5,1
    9490:	2815883a 	mov	r10,r5
    9494:	0017883a 	mov	r11,zero
    9498:	500ad77a 	srli	r5,r10,29
    949c:	580690fa 	slli	r3,r11,3
    94a0:	28c6b03a 	or	r3,r5,r3
    94a4:	500490fa 	slli	r2,r10,3
    94a8:	2005883a 	mov	r2,r4
    94ac:	10800044 	addi	r2,r2,1
    94b0:	108000c4 	addi	r2,r2,3
    94b4:	1004d0ba 	srli	r2,r2,2
    94b8:	1085883a 	add	r2,r2,r2
    94bc:	1085883a 	add	r2,r2,r2
    94c0:	d8b7c83a 	sub	sp,sp,r2
    94c4:	d8800304 	addi	r2,sp,12
    94c8:	1005883a 	mov	r2,r2
    94cc:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    94d0:	e0bffc03 	ldbu	r2,-16(fp)
    94d4:	10800084 	addi	r2,r2,2
    94d8:	1007883a 	mov	r3,r2
    94dc:	e0bff917 	ldw	r2,-28(fp)
    94e0:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    94e4:	e0bff917 	ldw	r2,-28(fp)
    94e8:	10800044 	addi	r2,r2,1
    94ec:	e0fffd03 	ldbu	r3,-12(fp)
    94f0:	180d883a 	mov	r6,r3
    94f4:	e17ffe17 	ldw	r5,-8(fp)
    94f8:	1009883a 	mov	r4,r2
    94fc:	000e6840 	call	e684 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    9500:	e0bffd03 	ldbu	r2,-12(fp)
    9504:	10800044 	addi	r2,r2,1
    9508:	1009883a 	mov	r4,r2
    950c:	e0fff917 	ldw	r3,-28(fp)
    9510:	d8000215 	stw	zero,8(sp)
    9514:	e0bffa44 	addi	r2,fp,-23
    9518:	d8800115 	stw	r2,4(sp)
    951c:	d8000015 	stw	zero,0(sp)
    9520:	180f883a 	mov	r7,r3
    9524:	200d883a 	mov	r6,r4
    9528:	000b883a 	mov	r5,zero
    952c:	01010034 	movhi	r4,1024
    9530:	21044804 	addi	r4,r4,4384
    9534:	0021c940 	call	21c94 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    9538:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    953c:	e0bffd03 	ldbu	r2,-12(fp)
    9540:	e0fffe17 	ldw	r3,-8(fp)
    9544:	1885883a 	add	r2,r3,r2
    9548:	8037883a 	mov	sp,r16
}
    954c:	e6ffff04 	addi	sp,fp,-4
    9550:	dfc00217 	ldw	ra,8(sp)
    9554:	df000117 	ldw	fp,4(sp)
    9558:	dc000017 	ldw	r16,0(sp)
    955c:	dec00304 	addi	sp,sp,12
    9560:	f800283a 	ret

00009564 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    9564:	defffc04 	addi	sp,sp,-16
    9568:	dfc00315 	stw	ra,12(sp)
    956c:	df000215 	stw	fp,8(sp)
    9570:	df000204 	addi	fp,sp,8
    9574:	e13ffe15 	stw	r4,-8(fp)
    9578:	2805883a 	mov	r2,r5
    957c:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    9580:	010000b4 	movhi	r4,2
    9584:	211f8104 	addi	r4,r4,32260
    9588:	000ea400 	call	ea40 <puts>
	regWr(rIOPINS1, data);
    958c:	e0bfff03 	ldbu	r2,-4(fp)
    9590:	100d883a 	mov	r6,r2
    9594:	01402804 	movi	r5,160
    9598:	e13ffe17 	ldw	r4,-8(fp)
    959c:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    95a0:	e0bfff03 	ldbu	r2,-4(fp)
    95a4:	1005d13a 	srai	r2,r2,4
    95a8:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    95ac:	e0bfff03 	ldbu	r2,-4(fp)
    95b0:	100d883a 	mov	r6,r2
    95b4:	01402a04 	movi	r5,168
    95b8:	e13ffe17 	ldw	r4,-8(fp)
    95bc:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
	return;
    95c0:	0001883a 	nop
}
    95c4:	e037883a 	mov	sp,fp
    95c8:	dfc00117 	ldw	ra,4(sp)
    95cc:	df000017 	ldw	fp,0(sp)
    95d0:	dec00204 	addi	sp,sp,8
    95d4:	f800283a 	ret

000095d8 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    95d8:	defff804 	addi	sp,sp,-32
    95dc:	dfc00715 	stw	ra,28(sp)
    95e0:	df000615 	stw	fp,24(sp)
    95e4:	df000604 	addi	fp,sp,24
    95e8:	e13ffe15 	stw	r4,-8(fp)
    95ec:	2805883a 	mov	r2,r5
    95f0:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    95f4:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    95f8:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    95fc:	e0bfff03 	ldbu	r2,-4(fp)
    9600:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9604:	e0fffd44 	addi	r3,fp,-11
    9608:	d8000215 	stw	zero,8(sp)
    960c:	e0bffd84 	addi	r2,fp,-10
    9610:	d8800115 	stw	r2,4(sp)
    9614:	00800044 	movi	r2,1
    9618:	d8800015 	stw	r2,0(sp)
    961c:	180f883a 	mov	r7,r3
    9620:	01800044 	movi	r6,1
    9624:	000b883a 	mov	r5,zero
    9628:	01010034 	movhi	r4,1024
    962c:	21044804 	addi	r4,r4,4384
    9630:	0021c940 	call	21c94 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    9634:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    9638:	e0bffd83 	ldbu	r2,-10(fp)
}
    963c:	e037883a 	mov	sp,fp
    9640:	dfc00117 	ldw	ra,4(sp)
    9644:	df000017 	ldw	fp,0(sp)
    9648:	dec00204 	addi	sp,sp,8
    964c:	f800283a 	ret

00009650 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9650:	defff604 	addi	sp,sp,-40
    9654:	dfc00915 	stw	ra,36(sp)
    9658:	df000815 	stw	fp,32(sp)
    965c:	df000804 	addi	fp,sp,32
    9660:	e13ffc15 	stw	r4,-16(fp)
    9664:	2807883a 	mov	r3,r5
    9668:	3005883a 	mov	r2,r6
    966c:	e1ffff15 	stw	r7,-4(fp)
    9670:	e0fffd05 	stb	r3,-12(fp)
    9674:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9678:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    967c:	e0bffd03 	ldbu	r2,-12(fp)
    9680:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9684:	e0bffe03 	ldbu	r2,-8(fp)
    9688:	e13ffb44 	addi	r4,fp,-19
    968c:	d8000215 	stw	zero,8(sp)
    9690:	e0ffff17 	ldw	r3,-4(fp)
    9694:	d8c00115 	stw	r3,4(sp)
    9698:	d8800015 	stw	r2,0(sp)
    969c:	200f883a 	mov	r7,r4
    96a0:	01800044 	movi	r6,1
    96a4:	000b883a 	mov	r5,zero
    96a8:	01010034 	movhi	r4,1024
    96ac:	21044804 	addi	r4,r4,4384
    96b0:	0021c940 	call	21c94 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    96b4:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    96b8:	e0bffe03 	ldbu	r2,-8(fp)
    96bc:	e0ffff17 	ldw	r3,-4(fp)
    96c0:	1885883a 	add	r2,r3,r2
}
    96c4:	e037883a 	mov	sp,fp
    96c8:	dfc00117 	ldw	ra,4(sp)
    96cc:	df000017 	ldw	fp,0(sp)
    96d0:	dec00204 	addi	sp,sp,8
    96d4:	f800283a 	ret

000096d8 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    96d8:	defffc04 	addi	sp,sp,-16
    96dc:	dfc00315 	stw	ra,12(sp)
    96e0:	df000215 	stw	fp,8(sp)
    96e4:	df000204 	addi	fp,sp,8
    96e8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    96ec:	010000b4 	movhi	r4,2
    96f0:	211f8504 	addi	r4,r4,32276
    96f4:	000ea400 	call	ea40 <puts>
	uint8_t gpin = 0;
    96f8:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    96fc:	01402a04 	movi	r5,168
    9700:	e13fff17 	ldw	r4,-4(fp)
    9704:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    9708:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    970c:	e0fffe03 	ldbu	r3,-8(fp)
    9710:	00bffc04 	movi	r2,-16
    9714:	1884703a 	and	r2,r3,r2
    9718:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    971c:	01402804 	movi	r5,160
    9720:	e13fff17 	ldw	r4,-4(fp)
    9724:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    9728:	10803fcc 	andi	r2,r2,255
    972c:	1005d13a 	srai	r2,r2,4
    9730:	1007883a 	mov	r3,r2
    9734:	e0bffe03 	ldbu	r2,-8(fp)
    9738:	1884b03a 	or	r2,r3,r2
    973c:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    9740:	e0bffe03 	ldbu	r2,-8(fp)
}
    9744:	e037883a 	mov	sp,fp
    9748:	dfc00117 	ldw	ra,4(sp)
    974c:	df000017 	ldw	fp,0(sp)
    9750:	dec00204 	addi	sp,sp,8
    9754:	f800283a 	ret

00009758 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    9758:	defffc04 	addi	sp,sp,-16
    975c:	dfc00315 	stw	ra,12(sp)
    9760:	df000215 	stw	fp,8(sp)
    9764:	df000204 	addi	fp,sp,8
    9768:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    976c:	010000b4 	movhi	r4,2
    9770:	211f8904 	addi	r4,r4,32292
    9774:	000ea400 	call	ea40 <puts>
	uint8_t gpout = 0;
    9778:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    977c:	01402804 	movi	r5,160
    9780:	e13fff17 	ldw	r4,-4(fp)
    9784:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    9788:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    978c:	e0bffe03 	ldbu	r2,-8(fp)
    9790:	108003cc 	andi	r2,r2,15
    9794:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    9798:	01402a04 	movi	r5,168
    979c:	e13fff17 	ldw	r4,-4(fp)
    97a0:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    97a4:	10803fcc 	andi	r2,r2,255
    97a8:	1004913a 	slli	r2,r2,4
    97ac:	1007883a 	mov	r3,r2
    97b0:	e0bffe03 	ldbu	r2,-8(fp)
    97b4:	1884b03a 	or	r2,r3,r2
    97b8:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    97bc:	e0bffe03 	ldbu	r2,-8(fp)
}
    97c0:	e037883a 	mov	sp,fp
    97c4:	dfc00117 	ldw	ra,4(sp)
    97c8:	df000017 	ldw	fp,0(sp)
    97cc:	dec00204 	addi	sp,sp,8
    97d0:	f800283a 	ret

000097d4 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    97d4:	defffc04 	addi	sp,sp,-16
    97d8:	dfc00315 	stw	ra,12(sp)
    97dc:	df000215 	stw	fp,8(sp)
    97e0:	df000204 	addi	fp,sp,8
    97e4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    97e8:	010000b4 	movhi	r4,2
    97ec:	211f8f04 	addi	r4,r4,32316
    97f0:	000ea400 	call	ea40 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    97f4:	0007883a 	mov	r3,zero
    97f8:	00810034 	movhi	r2,1024
    97fc:	10847404 	addi	r2,r2,4560
    9800:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    9804:	010003f4 	movhi	r4,15
    9808:	21109004 	addi	r4,r4,16960
    980c:	001f3c80 	call	1f3c8 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    9810:	00c00044 	movi	r3,1
    9814:	00810034 	movhi	r2,1024
    9818:	10847404 	addi	r2,r2,4560
    981c:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9820:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    9824:	01800804 	movi	r6,32
    9828:	01401e04 	movi	r5,120
    982c:	e13fff17 	ldw	r4,-4(fp)
    9830:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    9834:	000d883a 	mov	r6,zero
    9838:	01401e04 	movi	r5,120
    983c:	e13fff17 	ldw	r4,-4(fp)
    9840:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    9844:	e0bffe0b 	ldhu	r2,-8(fp)
    9848:	10800044 	addi	r2,r2,1
    984c:	e0bffe0d 	sth	r2,-8(fp)
    9850:	e0bffe0b 	ldhu	r2,-8(fp)
    9854:	1004c03a 	cmpne	r2,r2,zero
    9858:	10803fcc 	andi	r2,r2,255
    985c:	10000a26 	beq	r2,zero,9888 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    9860:	01401a04 	movi	r5,104
    9864:	e13fff17 	ldw	r4,-4(fp)
    9868:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    986c:	10803fcc 	andi	r2,r2,255
    9870:	1080004c 	andi	r2,r2,1
    9874:	1004c03a 	cmpne	r2,r2,zero
    9878:	10803fcc 	andi	r2,r2,255
    987c:	1000011e 	bne	r2,zero,9884 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    9880:	003ff006 	br	9844 <__alt_data_end+0xfc009844>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    9884:	0001883a 	nop
		}
	}
	return ( i);
    9888:	e0bffe0b 	ldhu	r2,-8(fp)
}
    988c:	e037883a 	mov	sp,fp
    9890:	dfc00117 	ldw	ra,4(sp)
    9894:	df000017 	ldw	fp,0(sp)
    9898:	dec00204 	addi	sp,sp,8
    989c:	f800283a 	ret

000098a0 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    98a0:	defffe04 	addi	sp,sp,-8
    98a4:	df000115 	stw	fp,4(sp)
    98a8:	df000104 	addi	fp,sp,4
    98ac:	2005883a 	mov	r2,r4
    98b0:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    98b4:	00800044 	movi	r2,1
}
    98b8:	e037883a 	mov	sp,fp
    98bc:	df000017 	ldw	fp,0(sp)
    98c0:	dec00104 	addi	sp,sp,4
    98c4:	f800283a 	ret

000098c8 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    98c8:	defffd04 	addi	sp,sp,-12
    98cc:	dfc00215 	stw	ra,8(sp)
    98d0:	df000115 	stw	fp,4(sp)
    98d4:	df000104 	addi	fp,sp,4
    98d8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    98dc:	010000b4 	movhi	r4,2
    98e0:	211f9304 	addi	r4,r4,32332
    98e4:	000ea400 	call	ea40 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    98e8:	01800604 	movi	r6,24
    98ec:	01402204 	movi	r5,136
    98f0:	e13fff17 	ldw	r4,-4(fp)
    98f4:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    98f8:	e13fff17 	ldw	r4,-4(fp)
    98fc:	00097d40 	call	97d4 <_ZN8MAX3421e5resetEv>
    9900:	10bfffcc 	andi	r2,r2,65535
    9904:	1005003a 	cmpeq	r2,r2,zero
    9908:	10803fcc 	andi	r2,r2,255
    990c:	10000226 	beq	r2,zero,9918 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    9910:	00bfffc4 	movi	r2,-1
    9914:	00002006 	br	9998 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9918:	01803044 	movi	r6,193
    991c:	01403604 	movi	r5,216
    9920:	e13fff17 	ldw	r4,-4(fp)
    9924:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9928:	01801804 	movi	r6,96
    992c:	01403404 	movi	r5,208
    9930:	e13fff17 	ldw	r4,-4(fp)
    9934:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9938:	01800104 	movi	r6,4
    993c:	01403a04 	movi	r5,232
    9940:	e13fff17 	ldw	r4,-4(fp)
    9944:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9948:	01403a04 	movi	r5,232
    994c:	e13fff17 	ldw	r4,-4(fp)
    9950:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    9954:	10803fcc 	andi	r2,r2,255
    9958:	1080010c 	andi	r2,r2,4
    995c:	1005003a 	cmpeq	r2,r2,zero
    9960:	10803fcc 	andi	r2,r2,255
    9964:	10000126 	beq	r2,zero,996c <_ZN8MAX3421e4InitEv+0xa4>
    9968:	003ff706 	br	9948 <__alt_data_end+0xfc009948>

	busprobe(); //check if anything is connected
    996c:	e13fff17 	ldw	r4,-4(fp)
    9970:	0009ac40 	call	9ac4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9974:	01800804 	movi	r6,32
    9978:	01403204 	movi	r5,200
    997c:	e13fff17 	ldw	r4,-4(fp)
    9980:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9984:	01800044 	movi	r6,1
    9988:	01402004 	movi	r5,128
    998c:	e13fff17 	ldw	r4,-4(fp)
    9990:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9994:	0005883a 	mov	r2,zero
}
    9998:	e037883a 	mov	sp,fp
    999c:	dfc00117 	ldw	ra,4(sp)
    99a0:	df000017 	ldw	fp,0(sp)
    99a4:	dec00204 	addi	sp,sp,8
    99a8:	f800283a 	ret

000099ac <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    99ac:	defffc04 	addi	sp,sp,-16
    99b0:	dfc00315 	stw	ra,12(sp)
    99b4:	df000215 	stw	fp,8(sp)
    99b8:	df000204 	addi	fp,sp,8
    99bc:	e13ffe15 	stw	r4,-8(fp)
    99c0:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    99c4:	010000b4 	movhi	r4,2
    99c8:	211f9704 	addi	r4,r4,32348
    99cc:	000ea400 	call	ea40 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    99d0:	01800644 	movi	r6,25
    99d4:	01402204 	movi	r5,136
    99d8:	e13ffe17 	ldw	r4,-8(fp)
    99dc:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    99e0:	e13ffe17 	ldw	r4,-8(fp)
    99e4:	00097d40 	call	97d4 <_ZN8MAX3421e5resetEv>
    99e8:	10bfffcc 	andi	r2,r2,65535
    99ec:	1005003a 	cmpeq	r2,r2,zero
    99f0:	10803fcc 	andi	r2,r2,255
    99f4:	10000226 	beq	r2,zero,9a00 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    99f8:	00bfffc4 	movi	r2,-1
    99fc:	00002c06 	br	9ab0 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9a00:	e0bfff17 	ldw	r2,-4(fp)
    9a04:	1080fa08 	cmpgei	r2,r2,1000
    9a08:	1000021e 	bne	r2,zero,9a14 <_ZN8MAX3421e4InitEi+0x68>
    9a0c:	0080fa04 	movi	r2,1000
    9a10:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9a14:	e0bfff17 	ldw	r2,-4(fp)
    9a18:	1009883a 	mov	r4,r2
    9a1c:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9a20:	01803044 	movi	r6,193
    9a24:	01403604 	movi	r5,216
    9a28:	e13ffe17 	ldw	r4,-8(fp)
    9a2c:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9a30:	01801804 	movi	r6,96
    9a34:	01403404 	movi	r5,208
    9a38:	e13ffe17 	ldw	r4,-8(fp)
    9a3c:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9a40:	01800104 	movi	r6,4
    9a44:	01403a04 	movi	r5,232
    9a48:	e13ffe17 	ldw	r4,-8(fp)
    9a4c:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9a50:	01403a04 	movi	r5,232
    9a54:	e13ffe17 	ldw	r4,-8(fp)
    9a58:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    9a5c:	10803fcc 	andi	r2,r2,255
    9a60:	1080010c 	andi	r2,r2,4
    9a64:	1005003a 	cmpeq	r2,r2,zero
    9a68:	10803fcc 	andi	r2,r2,255
    9a6c:	10000126 	beq	r2,zero,9a74 <_ZN8MAX3421e4InitEi+0xc8>
    9a70:	003ff706 	br	9a50 <__alt_data_end+0xfc009a50>

	busprobe(); //check if anything is connected
    9a74:	e13ffe17 	ldw	r4,-8(fp)
    9a78:	0009ac40 	call	9ac4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9a7c:	01800804 	movi	r6,32
    9a80:	01403204 	movi	r5,200
    9a84:	e13ffe17 	ldw	r4,-8(fp)
    9a88:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9a8c:	01800044 	movi	r6,1
    9a90:	01402004 	movi	r5,128
    9a94:	e13ffe17 	ldw	r4,-8(fp)
    9a98:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9a9c:	01800604 	movi	r6,24
    9aa0:	01402204 	movi	r5,136
    9aa4:	e13ffe17 	ldw	r4,-8(fp)
    9aa8:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9aac:	0005883a 	mov	r2,zero
}
    9ab0:	e037883a 	mov	sp,fp
    9ab4:	dfc00117 	ldw	ra,4(sp)
    9ab8:	df000017 	ldw	fp,0(sp)
    9abc:	dec00204 	addi	sp,sp,8
    9ac0:	f800283a 	ret

00009ac4 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9ac4:	defffc04 	addi	sp,sp,-16
    9ac8:	dfc00315 	stw	ra,12(sp)
    9acc:	df000215 	stw	fp,8(sp)
    9ad0:	df000204 	addi	fp,sp,8
    9ad4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9ad8:	010000b4 	movhi	r4,2
    9adc:	211f9d04 	addi	r4,r4,32372
    9ae0:	000ea400 	call	ea40 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9ae4:	01403e04 	movi	r5,248
    9ae8:	e13fff17 	ldw	r4,-4(fp)
    9aec:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    9af0:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    9af4:	e0fffe03 	ldbu	r3,-8(fp)
    9af8:	00bff004 	movi	r2,-64
    9afc:	1884703a 	and	r2,r3,r2
    9b00:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    9b04:	e0bffe03 	ldbu	r2,-8(fp)
    9b08:	10c01020 	cmpeqi	r3,r2,64
    9b0c:	1800251e 	bne	r3,zero,9ba4 <_ZN8MAX3421e8busprobeEv+0xe0>
    9b10:	10c01048 	cmpgei	r3,r2,65
    9b14:	1800021e 	bne	r3,zero,9b20 <_ZN8MAX3421e8busprobeEv+0x5c>
    9b18:	10003b26 	beq	r2,zero,9c08 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9b1c:	00004006 	br	9c20 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    9b20:	10c02020 	cmpeqi	r3,r2,128
    9b24:	1800031e 	bne	r3,zero,9b34 <_ZN8MAX3421e8busprobeEv+0x70>
    9b28:	10803020 	cmpeqi	r2,r2,192
    9b2c:	1000331e 	bne	r2,zero,9bfc <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9b30:	00003b06 	br	9c20 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9b34:	01403604 	movi	r5,216
    9b38:	e13fff17 	ldw	r4,-4(fp)
    9b3c:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    9b40:	10803fcc 	andi	r2,r2,255
    9b44:	1080008c 	andi	r2,r2,2
    9b48:	1005003a 	cmpeq	r2,r2,zero
    9b4c:	10803fcc 	andi	r2,r2,255
    9b50:	10000a26 	beq	r2,zero,9b7c <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    9b54:	010000b4 	movhi	r4,2
    9b58:	211fa204 	addi	r4,r4,32392
    9b5c:	000ea400 	call	ea40 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9b60:	01803244 	movi	r6,201
    9b64:	01403604 	movi	r5,216
    9b68:	e13fff17 	ldw	r4,-4(fp)
    9b6c:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9b70:	00800084 	movi	r2,2
    9b74:	d0b23b45 	stb	r2,-14099(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    9b78:	00002906 	br	9c20 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    9b7c:	010000b4 	movhi	r4,2
    9b80:	211fa904 	addi	r4,r4,32420
    9b84:	000ea400 	call	ea40 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9b88:	018032c4 	movi	r6,203
    9b8c:	01403604 	movi	r5,216
    9b90:	e13fff17 	ldw	r4,-4(fp)
    9b94:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9b98:	008000c4 	movi	r2,3
    9b9c:	d0b23b45 	stb	r2,-14099(gp)
			}
			break;
    9ba0:	00001f06 	br	9c20 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9ba4:	01403604 	movi	r5,216
    9ba8:	e13fff17 	ldw	r4,-4(fp)
    9bac:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    9bb0:	10803fcc 	andi	r2,r2,255
    9bb4:	1080008c 	andi	r2,r2,2
    9bb8:	1005003a 	cmpeq	r2,r2,zero
    9bbc:	10803fcc 	andi	r2,r2,255
    9bc0:	10000726 	beq	r2,zero,9be0 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9bc4:	018032c4 	movi	r6,203
    9bc8:	01403604 	movi	r5,216
    9bcc:	e13fff17 	ldw	r4,-4(fp)
    9bd0:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9bd4:	008000c4 	movi	r2,3
    9bd8:	d0b23b45 	stb	r2,-14099(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    9bdc:	00001006 	br	9c20 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9be0:	01803244 	movi	r6,201
    9be4:	01403604 	movi	r5,216
    9be8:	e13fff17 	ldw	r4,-4(fp)
    9bec:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9bf0:	00800084 	movi	r2,2
    9bf4:	d0b23b45 	stb	r2,-14099(gp)
			}
			break;
    9bf8:	00000906 	br	9c20 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    9bfc:	00800044 	movi	r2,1
    9c00:	d0b23b45 	stb	r2,-14099(gp)
			break;
    9c04:	00000606 	br	9c20 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    9c08:	01803444 	movi	r6,209
    9c0c:	01403604 	movi	r5,216
    9c10:	e13fff17 	ldw	r4,-4(fp)
    9c14:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    9c18:	d0323b45 	stb	zero,-14099(gp)
			break;
    9c1c:	0001883a 	nop
	}//end switch( bus_sample )
}
    9c20:	0001883a 	nop
    9c24:	e037883a 	mov	sp,fp
    9c28:	dfc00117 	ldw	ra,4(sp)
    9c2c:	df000017 	ldw	fp,0(sp)
    9c30:	dec00204 	addi	sp,sp,8
    9c34:	f800283a 	ret

00009c38 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    9c38:	defffc04 	addi	sp,sp,-16
    9c3c:	dfc00315 	stw	ra,12(sp)
    9c40:	df000215 	stw	fp,8(sp)
    9c44:	df000204 	addi	fp,sp,8
    9c48:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    9c4c:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    9c50:	00810034 	movhi	r2,1024
    9c54:	10847c04 	addi	r2,r2,4592
    9c58:	10800003 	ldbu	r2,0(r2)
    9c5c:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    9c60:	00810034 	movhi	r2,1024
    9c64:	10847c04 	addi	r2,r2,4592
    9c68:	10800037 	ldwio	r2,0(r2)
    9c6c:	1005003a 	cmpeq	r2,r2,zero
    9c70:	10803fcc 	andi	r2,r2,255
    9c74:	10000326 	beq	r2,zero,9c84 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    9c78:	e13fff17 	ldw	r4,-4(fp)
    9c7c:	0009c9c0 	call	9c9c <_ZN8MAX3421e10IntHandlerEv>
    9c80:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    9c84:	e0bffe03 	ldbu	r2,-8(fp)
}
    9c88:	e037883a 	mov	sp,fp
    9c8c:	dfc00117 	ldw	ra,4(sp)
    9c90:	df000017 	ldw	fp,0(sp)
    9c94:	dec00204 	addi	sp,sp,8
    9c98:	f800283a 	ret

00009c9c <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    9c9c:	defffc04 	addi	sp,sp,-16
    9ca0:	dfc00315 	stw	ra,12(sp)
    9ca4:	df000215 	stw	fp,8(sp)
    9ca8:	df000204 	addi	fp,sp,8
    9cac:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    9cb0:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    9cb4:	01403204 	movi	r5,200
    9cb8:	e13fff17 	ldw	r4,-4(fp)
    9cbc:	00095d80 	call	95d8 <_ZN8MAX3421e5regRdEh>
    9cc0:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    9cc4:	e0bffe43 	ldbu	r2,-7(fp)
    9cc8:	1080080c 	andi	r2,r2,32
    9ccc:	10000526 	beq	r2,zero,9ce4 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    9cd0:	e13fff17 	ldw	r4,-4(fp)
    9cd4:	0009ac40 	call	9ac4 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    9cd8:	e0bffe03 	ldbu	r2,-8(fp)
    9cdc:	10800814 	ori	r2,r2,32
    9ce0:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    9ce4:	e0bffe03 	ldbu	r2,-8(fp)
    9ce8:	100d883a 	mov	r6,r2
    9cec:	01403204 	movi	r5,200
    9cf0:	e13fff17 	ldw	r4,-4(fp)
    9cf4:	00093a40 	call	93a4 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    9cf8:	e0bffe03 	ldbu	r2,-8(fp)
}
    9cfc:	e037883a 	mov	sp,fp
    9d00:	dfc00117 	ldw	ra,4(sp)
    9d04:	df000017 	ldw	fp,0(sp)
    9d08:	dec00204 	addi	sp,sp,8
    9d0c:	f800283a 	ret

00009d10 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    9d10:	defffe04 	addi	sp,sp,-8
    9d14:	df000115 	stw	fp,4(sp)
    9d18:	df000104 	addi	fp,sp,4
    9d1c:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    9d20:	0005883a 	mov	r2,zero
}
    9d24:	e037883a 	mov	sp,fp
    9d28:	df000017 	ldw	fp,0(sp)
    9d2c:	dec00104 	addi	sp,sp,4
    9d30:	f800283a 	ret

00009d34 <_Z6onInitv>:
ALT_AVALON_I2C_DEV_t *i2c_dev;

void MIDI_poll();

void onInit()
{
    9d34:	defff804 	addi	sp,sp,-32
    9d38:	dfc00715 	stw	ra,28(sp)
    9d3c:	df000615 	stw	fp,24(sp)
    9d40:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    9d44:	010000f4 	movhi	r4,3
    9d48:	2102d804 	addi	r4,r4,2912
    9d4c:	000a36c0 	call	a36c <_ZN9USBH_MIDI8idVendorEv>
    9d50:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    9d54:	010000f4 	movhi	r4,3
    9d58:	2102d804 	addi	r4,r4,2912
    9d5c:	000a3940 	call	a394 <_ZN9USBH_MIDI9idProductEv>
    9d60:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    9d64:	e0fffa0b 	ldhu	r3,-24(fp)
    9d68:	e13ffa8b 	ldhu	r4,-22(fp)
    9d6c:	e0bffb04 	addi	r2,fp,-20
    9d70:	200f883a 	mov	r7,r4
    9d74:	180d883a 	mov	r6,r3
    9d78:	014000f4 	movhi	r5,3
    9d7c:	2967e504 	addi	r5,r5,-24684
    9d80:	1009883a 	mov	r4,r2
    9d84:	000ee040 	call	ee04 <sprintf>
  printf("%s\n", buf);
    9d88:	e0bffb04 	addi	r2,fp,-20
    9d8c:	1009883a 	mov	r4,r2
    9d90:	000ea400 	call	ea40 <puts>
}
    9d94:	0001883a 	nop
    9d98:	e037883a 	mov	sp,fp
    9d9c:	dfc00117 	ldw	ra,4(sp)
    9da0:	df000017 	ldw	fp,0(sp)
    9da4:	dec00204 	addi	sp,sp,8
    9da8:	f800283a 	ret

00009dac <_Z10MIDI_setupv>:

void MIDI_setup()
{
    9dac:	defffe04 	addi	sp,sp,-8
    9db0:	dfc00115 	stw	ra,4(sp)
    9db4:	df000015 	stw	fp,0(sp)
    9db8:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    9dbc:	010000f4 	movhi	r4,3
    9dc0:	2102a904 	addi	r4,r4,2724
    9dc4:	00098c80 	call	98c8 <_ZN8MAX3421e4InitEv>
    9dc8:	10803fcc 	andi	r2,r2,255
    9dcc:	1080201c 	xori	r2,r2,128
    9dd0:	10bfe004 	addi	r2,r2,-128
    9dd4:	10bfffe0 	cmpeqi	r2,r2,-1
    9dd8:	10803fcc 	andi	r2,r2,255
    9ddc:	10000326 	beq	r2,zero,9dec <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    9de0:	010000f4 	movhi	r4,3
    9de4:	2127ea04 	addi	r4,r4,-24664
    9de8:	000e9240 	call	e924 <printf>
	printf ("USB Started\n\r");
    9dec:	010000f4 	movhi	r4,3
    9df0:	2127ec04 	addi	r4,r4,-24656
    9df4:	000e9240 	call	e924 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    9df8:	01400074 	movhi	r5,1
    9dfc:	29674d04 	addi	r5,r5,-25292
    9e00:	010000f4 	movhi	r4,3
    9e04:	2102d804 	addi	r4,r4,2912
    9e08:	000a3bc0 	call	a3bc <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    9e0c:	0001883a 	nop
    9e10:	e037883a 	mov	sp,fp
    9e14:	dfc00117 	ldw	ra,4(sp)
    9e18:	df000017 	ldw	fp,0(sp)
    9e1c:	dec00204 	addi	sp,sp,8
    9e20:	f800283a 	ret

00009e24 <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to synthesizer
void MIDI_poll()
{
    9e24:	deffea04 	addi	sp,sp,-88
    9e28:	dfc01515 	stw	ra,84(sp)
    9e2c:	df001415 	stw	fp,80(sp)
    9e30:	df001404 	addi	fp,sp,80
  uint8_t note, vel, ctrl, par;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    9e34:	e0ffef04 	addi	r3,fp,-68
    9e38:	e0bfff04 	addi	r2,fp,-4
    9e3c:	180d883a 	mov	r6,r3
    9e40:	100b883a 	mov	r5,r2
    9e44:	010000f4 	movhi	r4,3
    9e48:	2102d804 	addi	r4,r4,2912
    9e4c:	00078f80 	call	78f8 <_ZN9USBH_MIDI8RecvDataEPtPh>
    9e50:	10803fcc 	andi	r2,r2,255
    9e54:	1005003a 	cmpeq	r2,r2,zero
    9e58:	10803fcc 	andi	r2,r2,255
    9e5c:	1000b426 	beq	r2,zero,a130 <_Z9MIDI_pollv+0x30c>
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    9e60:	e03fec15 	stw	zero,-80(fp)
    9e64:	e0bfec17 	ldw	r2,-80(fp)
    9e68:	10801008 	cmpgei	r2,r2,64
    9e6c:	1000ae1e 	bne	r2,zero,a128 <_Z9MIDI_pollv+0x304>
    	switch (bufMidi[i] & 0xF0) {
    9e70:	e0ffef04 	addi	r3,fp,-68
    9e74:	e0bfec17 	ldw	r2,-80(fp)
    9e78:	1885883a 	add	r2,r3,r2
    9e7c:	10800003 	ldbu	r2,0(r2)
    9e80:	10803fcc 	andi	r2,r2,255
    9e84:	10803c0c 	andi	r2,r2,240
    9e88:	10c02420 	cmpeqi	r3,r2,144
    9e8c:	18000a1e 	bne	r3,zero,9eb8 <_Z9MIDI_pollv+0x94>
    9e90:	10c02448 	cmpgei	r3,r2,145
    9e94:	1800031e 	bne	r3,zero,9ea4 <_Z9MIDI_pollv+0x80>
    9e98:	10802020 	cmpeqi	r2,r2,128
    9e9c:	1000061e 	bne	r2,zero,9eb8 <_Z9MIDI_pollv+0x94>
				printf("%X\t", bufMidi[i]);
				printf("%X\t", bufMidi[i+1]);
				printf("%X\n", bufMidi[i+2]);
				break;
			default:
				break;
    9ea0:	00009d06 	br	a118 <_Z9MIDI_pollv+0x2f4>
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    	switch (bufMidi[i] & 0xF0) {
    9ea4:	10c02c20 	cmpeqi	r3,r2,176
    9ea8:	1800451e 	bne	r3,zero,9fc0 <_Z9MIDI_pollv+0x19c>
    9eac:	10803820 	cmpeqi	r2,r2,224
    9eb0:	1000771e 	bne	r2,zero,a090 <_Z9MIDI_pollv+0x26c>
				printf("%X\t", bufMidi[i]);
				printf("%X\t", bufMidi[i+1]);
				printf("%X\n", bufMidi[i+2]);
				break;
			default:
				break;
    9eb4:	00009806 	br	a118 <_Z9MIDI_pollv+0x2f4>
  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    	switch (bufMidi[i] & 0xF0) {
			case NOTE_OFF:
			case NOTE_ON:
				note = bufMidi[i+1];
    9eb8:	e0bfec17 	ldw	r2,-80(fp)
    9ebc:	10800044 	addi	r2,r2,1
    9ec0:	e0ffef04 	addi	r3,fp,-68
    9ec4:	1885883a 	add	r2,r3,r2
    9ec8:	10800003 	ldbu	r2,0(r2)
    9ecc:	e0bfed05 	stb	r2,-76(fp)
				vel = bufMidi[i+2];
    9ed0:	e0bfec17 	ldw	r2,-80(fp)
    9ed4:	10800084 	addi	r2,r2,2
    9ed8:	e0ffef04 	addi	r3,fp,-68
    9edc:	1885883a 	add	r2,r3,r2
    9ee0:	10800003 	ldbu	r2,0(r2)
    9ee4:	e0bfed45 	stb	r2,-75(fp)
				if(!(bufMidi[i] & 0x0F)) {
    9ee8:	e0ffef04 	addi	r3,fp,-68
    9eec:	e0bfec17 	ldw	r2,-80(fp)
    9ef0:	1885883a 	add	r2,r3,r2
    9ef4:	10800003 	ldbu	r2,0(r2)
    9ef8:	10803fcc 	andi	r2,r2,255
    9efc:	108003cc 	andi	r2,r2,15
    9f00:	1000841e 	bne	r2,zero,a114 <_Z9MIDI_pollv+0x2f0>
					if (vel) printf("Note On\t");
    9f04:	e0bfed43 	ldbu	r2,-75(fp)
    9f08:	10000426 	beq	r2,zero,9f1c <_Z9MIDI_pollv+0xf8>
    9f0c:	010000f4 	movhi	r4,3
    9f10:	2127f004 	addi	r4,r4,-24640
    9f14:	000e9240 	call	e924 <printf>
    9f18:	00000306 	br	9f28 <_Z9MIDI_pollv+0x104>
					else printf("Note Off\t");
    9f1c:	010000f4 	movhi	r4,3
    9f20:	2127f304 	addi	r4,r4,-24628
    9f24:	000e9240 	call	e924 <printf>
					printf("%X\t", bufMidi[i]);
    9f28:	e0ffef04 	addi	r3,fp,-68
    9f2c:	e0bfec17 	ldw	r2,-80(fp)
    9f30:	1885883a 	add	r2,r3,r2
    9f34:	10800003 	ldbu	r2,0(r2)
    9f38:	10803fcc 	andi	r2,r2,255
    9f3c:	100b883a 	mov	r5,r2
    9f40:	010000f4 	movhi	r4,3
    9f44:	2127f604 	addi	r4,r4,-24616
    9f48:	000e9240 	call	e924 <printf>
					printf("%X\t", bufMidi[i+1]);
    9f4c:	e0bfec17 	ldw	r2,-80(fp)
    9f50:	10800044 	addi	r2,r2,1
    9f54:	e0ffef04 	addi	r3,fp,-68
    9f58:	1885883a 	add	r2,r3,r2
    9f5c:	10800003 	ldbu	r2,0(r2)
    9f60:	10803fcc 	andi	r2,r2,255
    9f64:	100b883a 	mov	r5,r2
    9f68:	010000f4 	movhi	r4,3
    9f6c:	2127f604 	addi	r4,r4,-24616
    9f70:	000e9240 	call	e924 <printf>
					printf("%X\n", bufMidi[i+2]);
    9f74:	e0bfec17 	ldw	r2,-80(fp)
    9f78:	10800084 	addi	r2,r2,2
    9f7c:	e0ffef04 	addi	r3,fp,-68
    9f80:	1885883a 	add	r2,r3,r2
    9f84:	10800003 	ldbu	r2,0(r2)
    9f88:	10803fcc 	andi	r2,r2,255
    9f8c:	100b883a 	mov	r5,r2
    9f90:	010000f4 	movhi	r4,3
    9f94:	2127f704 	addi	r4,r4,-24612
    9f98:	000e9240 	call	e924 <printf>
					i += 2;
    9f9c:	e0bfec17 	ldw	r2,-80(fp)
    9fa0:	10800084 	addi	r2,r2,2
    9fa4:	e0bfec15 	stw	r2,-80(fp)
					set_note(note, vel);
    9fa8:	e0bfed03 	ldbu	r2,-76(fp)
    9fac:	e0ffed43 	ldbu	r3,-75(fp)
    9fb0:	180b883a 	mov	r5,r3
    9fb4:	1009883a 	mov	r4,r2
    9fb8:	00051b00 	call	51b0 <_Z8set_notehh>
				}
				break;
    9fbc:	00005506 	br	a114 <_Z9MIDI_pollv+0x2f0>
			case CONTROL_CHANGE:
				//PEDAL CONTROLS HERE
				ctrl = bufMidi[i+1];
    9fc0:	e0bfec17 	ldw	r2,-80(fp)
    9fc4:	10800044 	addi	r2,r2,1
    9fc8:	e0ffef04 	addi	r3,fp,-68
    9fcc:	1885883a 	add	r2,r3,r2
    9fd0:	10800003 	ldbu	r2,0(r2)
    9fd4:	e0bfed85 	stb	r2,-74(fp)
				par = bufMidi[i+2];
    9fd8:	e0bfec17 	ldw	r2,-80(fp)
    9fdc:	10800084 	addi	r2,r2,2
    9fe0:	e0ffef04 	addi	r3,fp,-68
    9fe4:	1885883a 	add	r2,r3,r2
    9fe8:	10800003 	ldbu	r2,0(r2)
    9fec:	e0bfedc5 	stb	r2,-73(fp)
				long_par = par;
    9ff0:	e0bfedc3 	ldbu	r2,-73(fp)
    9ff4:	e0bfee15 	stw	r2,-72(fp)
				switch(ctrl) {
    9ff8:	e0bfed83 	ldbu	r2,-74(fp)
    9ffc:	10c00060 	cmpeqi	r3,r2,1
    a000:	1800061e 	bne	r3,zero,a01c <_Z9MIDI_pollv+0x1f8>
    a004:	10801020 	cmpeqi	r2,r2,64
    a008:	10000f26 	beq	r2,zero,a048 <_Z9MIDI_pollv+0x224>
					case SUSTAIN_PEDAL:
						set_adsr(SUS, long_par);
    a00c:	e17fee17 	ldw	r5,-72(fp)
    a010:	01000184 	movi	r4,6
    a014:	00052300 	call	5230 <_Z8set_adsrhm>
						break;
    a018:	00001906 	br	a080 <_Z9MIDI_pollv+0x25c>
					case MOD_WHEEL:
						//printf("Mod Wheel\t");
						//printf("%X\t", ctrl);
						printf("%X\n", par);
    a01c:	e0bfedc3 	ldbu	r2,-73(fp)
    a020:	100b883a 	mov	r5,r2
    a024:	010000f4 	movhi	r4,3
    a028:	2127f704 	addi	r4,r4,-24612
    a02c:	000e9240 	call	e924 <printf>
						SGTL5000vol_change(i2c_dev, par);
    a030:	d0b23c17 	ldw	r2,-14096(gp)
    a034:	e0ffedc3 	ldbu	r3,-73(fp)
    a038:	180b883a 	mov	r5,r3
    a03c:	1009883a 	mov	r4,r2
    a040:	0006d280 	call	6d28 <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>
						break;
    a044:	00000e06 	br	a080 <_Z9MIDI_pollv+0x25c>
					default:
						printf("Other Control Change\t");
    a048:	010000f4 	movhi	r4,3
    a04c:	2127f804 	addi	r4,r4,-24608
    a050:	000e9240 	call	e924 <printf>
						printf("%X\t", ctrl);
    a054:	e0bfed83 	ldbu	r2,-74(fp)
    a058:	100b883a 	mov	r5,r2
    a05c:	010000f4 	movhi	r4,3
    a060:	2127f604 	addi	r4,r4,-24616
    a064:	000e9240 	call	e924 <printf>
						printf("%X\n", par);
    a068:	e0bfedc3 	ldbu	r2,-73(fp)
    a06c:	100b883a 	mov	r5,r2
    a070:	010000f4 	movhi	r4,3
    a074:	2127f704 	addi	r4,r4,-24612
    a078:	000e9240 	call	e924 <printf>
						break;
    a07c:	0001883a 	nop
				}
				i += 2;
    a080:	e0bfec17 	ldw	r2,-80(fp)
    a084:	10800084 	addi	r2,r2,2
    a088:	e0bfec15 	stw	r2,-80(fp)
				break;
    a08c:	00002206 	br	a118 <_Z9MIDI_pollv+0x2f4>
			case PITCH_BEND:
				//PITCH WHEEL CONTROLS HERE
				printf("Pitch Bend\t");
    a090:	010000f4 	movhi	r4,3
    a094:	2127fe04 	addi	r4,r4,-24584
    a098:	000e9240 	call	e924 <printf>
				printf("%X\t", bufMidi[i]);
    a09c:	e0ffef04 	addi	r3,fp,-68
    a0a0:	e0bfec17 	ldw	r2,-80(fp)
    a0a4:	1885883a 	add	r2,r3,r2
    a0a8:	10800003 	ldbu	r2,0(r2)
    a0ac:	10803fcc 	andi	r2,r2,255
    a0b0:	100b883a 	mov	r5,r2
    a0b4:	010000f4 	movhi	r4,3
    a0b8:	2127f604 	addi	r4,r4,-24616
    a0bc:	000e9240 	call	e924 <printf>
				printf("%X\t", bufMidi[i+1]);
    a0c0:	e0bfec17 	ldw	r2,-80(fp)
    a0c4:	10800044 	addi	r2,r2,1
    a0c8:	e0ffef04 	addi	r3,fp,-68
    a0cc:	1885883a 	add	r2,r3,r2
    a0d0:	10800003 	ldbu	r2,0(r2)
    a0d4:	10803fcc 	andi	r2,r2,255
    a0d8:	100b883a 	mov	r5,r2
    a0dc:	010000f4 	movhi	r4,3
    a0e0:	2127f604 	addi	r4,r4,-24616
    a0e4:	000e9240 	call	e924 <printf>
				printf("%X\n", bufMidi[i+2]);
    a0e8:	e0bfec17 	ldw	r2,-80(fp)
    a0ec:	10800084 	addi	r2,r2,2
    a0f0:	e0ffef04 	addi	r3,fp,-68
    a0f4:	1885883a 	add	r2,r3,r2
    a0f8:	10800003 	ldbu	r2,0(r2)
    a0fc:	10803fcc 	andi	r2,r2,255
    a100:	100b883a 	mov	r5,r2
    a104:	010000f4 	movhi	r4,3
    a108:	2127f704 	addi	r4,r4,-24612
    a10c:	000e9240 	call	e924 <printf>
				break;
    a110:	00000106 	br	a118 <_Z9MIDI_pollv+0x2f4>
					printf("%X\t", bufMidi[i+1]);
					printf("%X\n", bufMidi[i+2]);
					i += 2;
					set_note(note, vel);
				}
				break;
    a114:	0001883a 	nop
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    a118:	e0bfec17 	ldw	r2,-80(fp)
    a11c:	10800044 	addi	r2,r2,1
    a120:	e0bfec15 	stw	r2,-80(fp)
    a124:	003f4f06 	br	9e64 <__alt_data_end+0xfc009e64>
				break;
			default:
				break;
    	}
    }
    printf("\n");
    a128:	01000284 	movi	r4,10
    a12c:	000e9680 	call	e968 <putchar>
  }
}
    a130:	0001883a 	nop
    a134:	e037883a 	mov	sp,fp
    a138:	dfc00117 	ldw	ra,4(sp)
    a13c:	df000017 	ldw	fp,0(sp)
    a140:	dec00204 	addi	sp,sp,8
    a144:	f800283a 	ret

0000a148 <main>:

int main() {
    a148:	defff804 	addi	sp,sp,-32
    a14c:	dfc00715 	stw	ra,28(sp)
    a150:	df000615 	stw	fp,24(sp)
    a154:	df000604 	addi	fp,sp,24

	//Initial ADSR values
	alt_u16 att_m_seconds = 10;
    a158:	00800284 	movi	r2,10
    a15c:	e0bffc0d 	sth	r2,-16(fp)
	alt_u16 dec_m_seconds = 30;
    a160:	00800784 	movi	r2,30
    a164:	e0bffc8d 	sth	r2,-14(fp)
	alt_u16 sus_m_seconds = 3000;
    a168:	0082ee04 	movi	r2,3000
    a16c:	e0bffd0d 	sth	r2,-12(fp)
	alt_u16 rel_m_seconds = 80;
    a170:	00801404 	movi	r2,80
    a174:	e0bffd8d 	sth	r2,-10(fp)
	float peak_att = 1.9;
    a178:	008ffcf4 	movhi	r2,16371
    a17c:	108cccc4 	addi	r2,r2,13107
    a180:	e0bffe15 	stw	r2,-8(fp)
	float peak_sus = 0.9;
    a184:	008fd9b4 	movhi	r2,16230
    a188:	10999984 	addi	r2,r2,26214
    a18c:	e0bfff15 	stw	r2,-4(fp)

	printf("Initializing SGTL5000...\n");
    a190:	010000f4 	movhi	r4,3
    a194:	21280104 	addi	r4,r4,-24572
    a198:	000ea400 	call	ea40 <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    a19c:	010000f4 	movhi	r4,3
    a1a0:	21280804 	addi	r4,r4,-24544
    a1a4:	001f9500 	call	1f950 <alt_avalon_i2c_open>
    a1a8:	d0b23c15 	stw	r2,-14096(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    a1ac:	d0b23c17 	ldw	r2,-14096(gp)
    a1b0:	1000031e 	bne	r2,zero,a1c0 <main+0x78>
    a1b4:	010000f4 	movhi	r4,3
    a1b8:	21280b04 	addi	r4,r4,-24532
    a1bc:	000ea400 	call	ea40 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    a1c0:	d0b23c17 	ldw	r2,-14096(gp)
    a1c4:	1009883a 	mov	r4,r2
    a1c8:	0006a780 	call	6a78 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    a1cc:	010000f4 	movhi	r4,3
    a1d0:	21281304 	addi	r4,r4,-24500
    a1d4:	000ea400 	call	ea40 <puts>
	SGTL5000audio_on(i2c_dev);
    a1d8:	d0b23c17 	ldw	r2,-14096(gp)
    a1dc:	1009883a 	mov	r4,r2
    a1e0:	0006b100 	call	6b10 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	SGTL5000status(i2c_dev);
    a1e4:	d0b23c17 	ldw	r2,-14096(gp)
    a1e8:	1009883a 	mov	r4,r2
    a1ec:	0006b7c0 	call	6b7c <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>
	printf("Audio running\n");
    a1f0:	010000f4 	movhi	r4,3
    a1f4:	21281804 	addi	r4,r4,-24480
    a1f8:	000ea400 	call	ea40 <puts>

	printf("Initializing ADSR...\n");
    a1fc:	010000f4 	movhi	r4,3
    a200:	21281c04 	addi	r4,r4,-24464
    a204:	000ea400 	call	ea40 <puts>
	calc_adsr(att_m_seconds, dec_m_seconds, sus_m_seconds, rel_m_seconds, peak_att, peak_sus);
    a208:	e0fffc0b 	ldhu	r3,-16(fp)
    a20c:	e13ffc8b 	ldhu	r4,-14(fp)
    a210:	e17ffd0b 	ldhu	r5,-12(fp)
    a214:	e1bffd8b 	ldhu	r6,-10(fp)
    a218:	e0bfff17 	ldw	r2,-4(fp)
    a21c:	d8800115 	stw	r2,4(sp)
    a220:	e0bffe17 	ldw	r2,-8(fp)
    a224:	d8800015 	stw	r2,0(sp)
    a228:	300f883a 	mov	r7,r6
    a22c:	280d883a 	mov	r6,r5
    a230:	200b883a 	mov	r5,r4
    a234:	1809883a 	mov	r4,r3
    a238:	000527c0 	call	527c <_Z9calc_adsrttttff>
	printf("ADSR set\n");
    a23c:	010000f4 	movhi	r4,3
    a240:	21282204 	addi	r4,r4,-24440
    a244:	000ea400 	call	ea40 <puts>

	MIDI_setup();
    a248:	0009dac0 	call	9dac <_Z10MIDI_setupv>
	printf("MIDI set\n");
    a24c:	010000f4 	movhi	r4,3
    a250:	21282504 	addi	r4,r4,-24428
    a254:	000ea400 	call	ea40 <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a258:	010000f4 	movhi	r4,3
    a25c:	2102a904 	addi	r4,r4,2724
    a260:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a264:	10803fcc 	andi	r2,r2,255
    a268:	10802418 	cmpnei	r2,r2,144
    a26c:	10803fcc 	andi	r2,r2,255
    a270:	10000426 	beq	r2,zero,a284 <main+0x13c>
		Usb.Task();
    a274:	010000f4 	movhi	r4,3
    a278:	2102a904 	addi	r4,r4,2724
    a27c:	000181c0 	call	181c <_ZN3USB4TaskEv>
	printf("ADSR set\n");

	MIDI_setup();
	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a280:	003ff506 	br	a258 <__alt_data_end+0xfc00a258>
		Usb.Task();
	}
	printf("USB running\n");
    a284:	010000f4 	movhi	r4,3
    a288:	21282804 	addi	r4,r4,-24416
    a28c:	000ea400 	call	ea40 <puts>

	while(1) {
		if ( Midi ) {
    a290:	010000f4 	movhi	r4,3
    a294:	2102d804 	addi	r4,r4,2912
    a298:	000a3440 	call	a344 <_ZN9USBH_MIDIcvbEv>
    a29c:	10803fcc 	andi	r2,r2,255
    a2a0:	103ffb26 	beq	r2,zero,a290 <__alt_data_end+0xfc00a290>
			MIDI_poll();
    a2a4:	0009e240 	call	9e24 <_Z9MIDI_pollv>
	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
		Usb.Task();
	}
	printf("USB running\n");

	while(1) {
    a2a8:	003ff906 	br	a290 <__alt_data_end+0xfc00a290>

0000a2ac <_Z41__static_initialization_and_destruction_0ii>:
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
    a2ac:	defffc04 	addi	sp,sp,-16
    a2b0:	dfc00315 	stw	ra,12(sp)
    a2b4:	df000215 	stw	fp,8(sp)
    a2b8:	df000204 	addi	fp,sp,8
    a2bc:	e13ffe15 	stw	r4,-8(fp)
    a2c0:	e17fff15 	stw	r5,-4(fp)
    a2c4:	e0bffe17 	ldw	r2,-8(fp)
    a2c8:	10800058 	cmpnei	r2,r2,1
    a2cc:	10000b1e 	bne	r2,zero,a2fc <_Z41__static_initialization_and_destruction_0ii+0x50>
    a2d0:	e0ffff17 	ldw	r3,-4(fp)
    a2d4:	00bfffd4 	movui	r2,65535
    a2d8:	1880081e 	bne	r3,r2,a2fc <_Z41__static_initialization_and_destruction_0ii+0x50>
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif
#include "include/SPI.h"

USB Usb;
    a2dc:	010000f4 	movhi	r4,3
    a2e0:	2102a904 	addi	r4,r4,2724
    a2e4:	00007040 	call	704 <_ZN3USBC1Ev>
USBH_MIDI  Midi(&Usb);
    a2e8:	014000f4 	movhi	r5,3
    a2ec:	2942a904 	addi	r5,r5,2724
    a2f0:	010000f4 	movhi	r4,3
    a2f4:	2102d804 	addi	r4,r4,2912
    a2f8:	0006dd80 	call	6dd8 <_ZN9USBH_MIDIC1EP3USB>
	while(1) {
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
    a2fc:	0001883a 	nop
    a300:	e037883a 	mov	sp,fp
    a304:	dfc00117 	ldw	ra,4(sp)
    a308:	df000017 	ldw	fp,0(sp)
    a30c:	dec00204 	addi	sp,sp,8
    a310:	f800283a 	ret

0000a314 <_GLOBAL__sub_I_Usb>:
    a314:	defffe04 	addi	sp,sp,-8
    a318:	dfc00115 	stw	ra,4(sp)
    a31c:	df000015 	stw	fp,0(sp)
    a320:	d839883a 	mov	fp,sp
    a324:	017fffd4 	movui	r5,65535
    a328:	01000044 	movi	r4,1
    a32c:	000a2ac0 	call	a2ac <_Z41__static_initialization_and_destruction_0ii>
    a330:	e037883a 	mov	sp,fp
    a334:	dfc00117 	ldw	ra,4(sp)
    a338:	df000017 	ldw	fp,0(sp)
    a33c:	dec00204 	addi	sp,sp,8
    a340:	f800283a 	ret

0000a344 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    a344:	defffe04 	addi	sp,sp,-8
    a348:	df000115 	stw	fp,4(sp)
    a34c:	df000104 	addi	fp,sp,4
    a350:	e13fff15 	stw	r4,-4(fp)
    a354:	e0bfff17 	ldw	r2,-4(fp)
    a358:	10800343 	ldbu	r2,13(r2)
    a35c:	e037883a 	mov	sp,fp
    a360:	df000017 	ldw	fp,0(sp)
    a364:	dec00104 	addi	sp,sp,4
    a368:	f800283a 	ret

0000a36c <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    a36c:	defffe04 	addi	sp,sp,-8
    a370:	df000115 	stw	fp,4(sp)
    a374:	df000104 	addi	fp,sp,4
    a378:	e13fff15 	stw	r4,-4(fp)
    a37c:	e0bfff17 	ldw	r2,-4(fp)
    a380:	1080040b 	ldhu	r2,16(r2)
    a384:	e037883a 	mov	sp,fp
    a388:	df000017 	ldw	fp,0(sp)
    a38c:	dec00104 	addi	sp,sp,4
    a390:	f800283a 	ret

0000a394 <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    a394:	defffe04 	addi	sp,sp,-8
    a398:	df000115 	stw	fp,4(sp)
    a39c:	df000104 	addi	fp,sp,4
    a3a0:	e13fff15 	stw	r4,-4(fp)
    a3a4:	e0bfff17 	ldw	r2,-4(fp)
    a3a8:	1080038b 	ldhu	r2,14(r2)
    a3ac:	e037883a 	mov	sp,fp
    a3b0:	df000017 	ldw	fp,0(sp)
    a3b4:	dec00104 	addi	sp,sp,4
    a3b8:	f800283a 	ret

0000a3bc <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    a3bc:	defffd04 	addi	sp,sp,-12
    a3c0:	df000215 	stw	fp,8(sp)
    a3c4:	df000204 	addi	fp,sp,8
    a3c8:	e13ffe15 	stw	r4,-8(fp)
    a3cc:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    a3d0:	e0bffe17 	ldw	r2,-8(fp)
    a3d4:	e0ffff17 	ldw	r3,-4(fp)
    a3d8:	10c01815 	stw	r3,96(r2)
        };
    a3dc:	0001883a 	nop
    a3e0:	e037883a 	mov	sp,fp
    a3e4:	df000017 	ldw	fp,0(sp)
    a3e8:	dec00104 	addi	sp,sp,4
    a3ec:	f800283a 	ret

0000a3f0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    a3f0:	008000f4 	movhi	r2,3
    a3f4:	10a83a04 	addi	r2,r2,-24344
    a3f8:	20800015 	stw	r2,0(r4)
    a3fc:	000b1c81 	jmpi	b1c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a400 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    a400:	defffe04 	addi	sp,sp,-8
    a404:	008000f4 	movhi	r2,3
    a408:	dc000015 	stw	r16,0(sp)
    a40c:	dfc00115 	stw	ra,4(sp)
    a410:	10a83a04 	addi	r2,r2,-24344
    a414:	20800015 	stw	r2,0(r4)
    a418:	2021883a 	mov	r16,r4
    a41c:	000b1c80 	call	b1c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a420:	8009883a 	mov	r4,r16
    a424:	dfc00117 	ldw	ra,4(sp)
    a428:	dc000017 	ldw	r16,0(sp)
    a42c:	dec00204 	addi	sp,sp,8
    a430:	000b0f41 	jmpi	b0f4 <_ZdlPv>

0000a434 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a434:	defff504 	addi	sp,sp,-44
    a438:	dc000115 	stw	r16,4(sp)
    a43c:	38800117 	ldw	r2,4(r7)
    a440:	24000117 	ldw	r16,4(r4)
    a444:	df000915 	stw	fp,36(sp)
    a448:	ddc00815 	stw	r23,32(sp)
    a44c:	dd800715 	stw	r22,28(sp)
    a450:	dcc00415 	stw	r19,16(sp)
    a454:	dc800315 	stw	r18,12(sp)
    a458:	dc400215 	stw	r17,8(sp)
    a45c:	dfc00a15 	stw	ra,40(sp)
    a460:	dd400615 	stw	r21,24(sp)
    a464:	dd000515 	stw	r20,20(sp)
    a468:	2823883a 	mov	r17,r5
    a46c:	3039883a 	mov	fp,r6
    a470:	dcc00b17 	ldw	r19,44(sp)
    a474:	ddc00c17 	ldw	r23,48(sp)
    a478:	dd800d17 	ldw	r22,52(sp)
    a47c:	dc800e17 	ldw	r18,56(sp)
    a480:	80800b26 	beq	r16,r2,a4b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    a484:	80c00007 	ldb	r3,0(r16)
    a488:	2029883a 	mov	r20,r4
    a48c:	01000a84 	movi	r4,42
    a490:	382b883a 	mov	r21,r7
    a494:	19001a26 	beq	r3,r4,a500 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a498:	100b883a 	mov	r5,r2
    a49c:	8009883a 	mov	r4,r16
    a4a0:	d8c00015 	stw	r3,0(sp)
    a4a4:	000ee700 	call	ee70 <strcmp>
    a4a8:	d8c00017 	ldw	r3,0(sp)
    a4ac:	1000141e 	bne	r2,zero,a500 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a4b0:	94c00015 	stw	r19,0(r18)
    a4b4:	97000115 	stw	fp,4(r18)
    a4b8:	88002816 	blt	r17,zero,a55c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    a4bc:	9c63883a 	add	r17,r19,r17
    a4c0:	b4403226 	beq	r22,r17,a58c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    a4c4:	00800044 	movi	r2,1
    a4c8:	90800315 	stw	r2,12(r18)
    a4cc:	0005883a 	mov	r2,zero
    a4d0:	dfc00a17 	ldw	ra,40(sp)
    a4d4:	df000917 	ldw	fp,36(sp)
    a4d8:	ddc00817 	ldw	r23,32(sp)
    a4dc:	dd800717 	ldw	r22,28(sp)
    a4e0:	dd400617 	ldw	r21,24(sp)
    a4e4:	dd000517 	ldw	r20,20(sp)
    a4e8:	dcc00417 	ldw	r19,16(sp)
    a4ec:	dc800317 	ldw	r18,12(sp)
    a4f0:	dc400217 	ldw	r17,8(sp)
    a4f4:	dc000117 	ldw	r16,4(sp)
    a4f8:	dec00b04 	addi	sp,sp,44
    a4fc:	f800283a 	ret
    a500:	9d801926 	beq	r19,r22,a568 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    a504:	a1000217 	ldw	r4,8(r20)
    a508:	a80f883a 	mov	r7,r21
    a50c:	e00d883a 	mov	r6,fp
    a510:	20800017 	ldw	r2,0(r4)
    a514:	dc800e15 	stw	r18,56(sp)
    a518:	dd800d15 	stw	r22,52(sp)
    a51c:	ddc00c15 	stw	r23,48(sp)
    a520:	dcc00b15 	stw	r19,44(sp)
    a524:	10800717 	ldw	r2,28(r2)
    a528:	880b883a 	mov	r5,r17
    a52c:	dfc00a17 	ldw	ra,40(sp)
    a530:	df000917 	ldw	fp,36(sp)
    a534:	ddc00817 	ldw	r23,32(sp)
    a538:	dd800717 	ldw	r22,28(sp)
    a53c:	dd400617 	ldw	r21,24(sp)
    a540:	dd000517 	ldw	r20,20(sp)
    a544:	dcc00417 	ldw	r19,16(sp)
    a548:	dc800317 	ldw	r18,12(sp)
    a54c:	dc400217 	ldw	r17,8(sp)
    a550:	dc000117 	ldw	r16,4(sp)
    a554:	dec00b04 	addi	sp,sp,44
    a558:	1000683a 	jmp	r2
    a55c:	00bfff84 	movi	r2,-2
    a560:	88bfda1e 	bne	r17,r2,a4cc <__alt_data_end+0xfc00a4cc>
    a564:	003fd706 	br	a4c4 <__alt_data_end+0xfc00a4c4>
    a568:	b9400117 	ldw	r5,4(r23)
    a56c:	81400526 	beq	r16,r5,a584 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    a570:	00800a84 	movi	r2,42
    a574:	18bfe326 	beq	r3,r2,a504 <__alt_data_end+0xfc00a504>
    a578:	8009883a 	mov	r4,r16
    a57c:	000ee700 	call	ee70 <strcmp>
    a580:	103fe01e 	bne	r2,zero,a504 <__alt_data_end+0xfc00a504>
    a584:	97000215 	stw	fp,8(r18)
    a588:	003fd006 	br	a4cc <__alt_data_end+0xfc00a4cc>
    a58c:	00800184 	movi	r2,6
    a590:	003fcd06 	br	a4c8 <__alt_data_end+0xfc00a4c8>

0000a594 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a594:	defffa04 	addi	sp,sp,-24
    a598:	dc000215 	stw	r16,8(sp)
    a59c:	dc000617 	ldw	r16,24(sp)
    a5a0:	dc800415 	stw	r18,16(sp)
    a5a4:	dc400315 	stw	r17,12(sp)
    a5a8:	dfc00515 	stw	ra,20(sp)
    a5ac:	2023883a 	mov	r17,r4
    a5b0:	2825883a 	mov	r18,r5
    a5b4:	81800b26 	beq	r16,r6,a5e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    a5b8:	89000217 	ldw	r4,8(r17)
    a5bc:	900b883a 	mov	r5,r18
    a5c0:	20800017 	ldw	r2,0(r4)
    a5c4:	dc000615 	stw	r16,24(sp)
    a5c8:	10800817 	ldw	r2,32(r2)
    a5cc:	dfc00517 	ldw	ra,20(sp)
    a5d0:	dc800417 	ldw	r18,16(sp)
    a5d4:	dc400317 	ldw	r17,12(sp)
    a5d8:	dc000217 	ldw	r16,8(sp)
    a5dc:	dec00604 	addi	sp,sp,24
    a5e0:	1000683a 	jmp	r2
    a5e4:	21000117 	ldw	r4,4(r4)
    a5e8:	39400117 	ldw	r5,4(r7)
    a5ec:	21400926 	beq	r4,r5,a614 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    a5f0:	20c00007 	ldb	r3,0(r4)
    a5f4:	00800a84 	movi	r2,42
    a5f8:	18bfef26 	beq	r3,r2,a5b8 <__alt_data_end+0xfc00a5b8>
    a5fc:	d9800015 	stw	r6,0(sp)
    a600:	d9c00115 	stw	r7,4(sp)
    a604:	000ee700 	call	ee70 <strcmp>
    a608:	d9800017 	ldw	r6,0(sp)
    a60c:	d9c00117 	ldw	r7,4(sp)
    a610:	103fe91e 	bne	r2,zero,a5b8 <__alt_data_end+0xfc00a5b8>
    a614:	00800184 	movi	r2,6
    a618:	dfc00517 	ldw	ra,20(sp)
    a61c:	dc800417 	ldw	r18,16(sp)
    a620:	dc400317 	ldw	r17,12(sp)
    a624:	dc000217 	ldw	r16,8(sp)
    a628:	dec00604 	addi	sp,sp,24
    a62c:	f800283a 	ret

0000a630 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    a630:	defffb04 	addi	sp,sp,-20
    a634:	dcc00315 	stw	r19,12(sp)
    a638:	dc800215 	stw	r18,8(sp)
    a63c:	dc400115 	stw	r17,4(sp)
    a640:	dc000015 	stw	r16,0(sp)
    a644:	dfc00415 	stw	ra,16(sp)
    a648:	2027883a 	mov	r19,r4
    a64c:	2821883a 	mov	r16,r5
    a650:	3023883a 	mov	r17,r6
    a654:	3825883a 	mov	r18,r7
    a658:	000b20c0 	call	b20c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    a65c:	10c03fcc 	andi	r3,r2,255
    a660:	18000726 	beq	r3,zero,a680 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    a664:	dfc00417 	ldw	ra,16(sp)
    a668:	dcc00317 	ldw	r19,12(sp)
    a66c:	dc800217 	ldw	r18,8(sp)
    a670:	dc400117 	ldw	r17,4(sp)
    a674:	dc000017 	ldw	r16,0(sp)
    a678:	dec00504 	addi	sp,sp,20
    a67c:	f800283a 	ret
    a680:	99000217 	ldw	r4,8(r19)
    a684:	900f883a 	mov	r7,r18
    a688:	880d883a 	mov	r6,r17
    a68c:	20800017 	ldw	r2,0(r4)
    a690:	800b883a 	mov	r5,r16
    a694:	10800617 	ldw	r2,24(r2)
    a698:	dfc00417 	ldw	ra,16(sp)
    a69c:	dcc00317 	ldw	r19,12(sp)
    a6a0:	dc800217 	ldw	r18,8(sp)
    a6a4:	dc400117 	ldw	r17,4(sp)
    a6a8:	dc000017 	ldw	r16,0(sp)
    a6ac:	dec00504 	addi	sp,sp,20
    a6b0:	1000683a 	jmp	r2

0000a6b4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    a6b4:	008000f4 	movhi	r2,3
    a6b8:	10a85204 	addi	r2,r2,-24248
    a6bc:	20800015 	stw	r2,0(r4)
    a6c0:	000b1c81 	jmpi	b1c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a6c4 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    a6c4:	defffe04 	addi	sp,sp,-8
    a6c8:	008000f4 	movhi	r2,3
    a6cc:	dc000015 	stw	r16,0(sp)
    a6d0:	dfc00115 	stw	ra,4(sp)
    a6d4:	10a85204 	addi	r2,r2,-24248
    a6d8:	20800015 	stw	r2,0(r4)
    a6dc:	2021883a 	mov	r16,r4
    a6e0:	000b1c80 	call	b1c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a6e4:	8009883a 	mov	r4,r16
    a6e8:	dfc00117 	ldw	ra,4(sp)
    a6ec:	dc000017 	ldw	r16,0(sp)
    a6f0:	dec00204 	addi	sp,sp,8
    a6f4:	000b0f41 	jmpi	b0f4 <_ZdlPv>

0000a6f8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a6f8:	defff504 	addi	sp,sp,-44
    a6fc:	dc400215 	stw	r17,8(sp)
    a700:	dc400b17 	ldw	r17,44(sp)
    a704:	df000915 	stw	fp,36(sp)
    a708:	ddc00815 	stw	r23,32(sp)
    a70c:	dd800715 	stw	r22,28(sp)
    a710:	dc000115 	stw	r16,4(sp)
    a714:	dfc00a15 	stw	ra,40(sp)
    a718:	dd400615 	stw	r21,24(sp)
    a71c:	dd000515 	stw	r20,20(sp)
    a720:	dcc00415 	stw	r19,16(sp)
    a724:	dc800315 	stw	r18,12(sp)
    a728:	3039883a 	mov	fp,r6
    a72c:	2021883a 	mov	r16,r4
    a730:	282d883a 	mov	r22,r5
    a734:	382f883a 	mov	r23,r7
    a738:	34402c26 	beq	r6,r17,a7ec <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    a73c:	85000317 	ldw	r20,12(r16)
    a740:	048000c4 	movi	r18,3
    a744:	04ffff44 	movi	r19,-3
    a748:	a484983a 	sll	r2,r20,r18
    a74c:	b80f883a 	mov	r7,r23
    a750:	b00b883a 	mov	r5,r22
    a754:	10800304 	addi	r2,r2,12
    a758:	80a1883a 	add	r16,r16,r2
    a75c:	a0001626 	beq	r20,zero,a7b8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    a760:	81800017 	ldw	r6,0(r16)
    a764:	a53fffc4 	addi	r20,r20,-1
    a768:	3080008c 	andi	r2,r6,2
    a76c:	3540004c 	andi	r21,r6,1
    a770:	10000d26 	beq	r2,zero,a7a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a774:	300dd23a 	srai	r6,r6,8
    a778:	a8000426 	beq	r21,zero,a78c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    a77c:	b4c00a26 	beq	r22,r19,a7a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a780:	e0800017 	ldw	r2,0(fp)
    a784:	118d883a 	add	r6,r2,r6
    a788:	31800017 	ldw	r6,0(r6)
    a78c:	813fff17 	ldw	r4,-4(r16)
    a790:	e18d883a 	add	r6,fp,r6
    a794:	20800017 	ldw	r2,0(r4)
    a798:	dc400015 	stw	r17,0(sp)
    a79c:	10800817 	ldw	r2,32(r2)
    a7a0:	103ee83a 	callr	r2
    a7a4:	90801b16 	blt	r18,r2,a814 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    a7a8:	843ffe04 	addi	r16,r16,-8
    a7ac:	b80f883a 	mov	r7,r23
    a7b0:	b00b883a 	mov	r5,r22
    a7b4:	a03fea1e 	bne	r20,zero,a760 <__alt_data_end+0xfc00a760>
    a7b8:	00800044 	movi	r2,1
    a7bc:	dfc00a17 	ldw	ra,40(sp)
    a7c0:	df000917 	ldw	fp,36(sp)
    a7c4:	ddc00817 	ldw	r23,32(sp)
    a7c8:	dd800717 	ldw	r22,28(sp)
    a7cc:	dd400617 	ldw	r21,24(sp)
    a7d0:	dd000517 	ldw	r20,20(sp)
    a7d4:	dcc00417 	ldw	r19,16(sp)
    a7d8:	dc800317 	ldw	r18,12(sp)
    a7dc:	dc400217 	ldw	r17,8(sp)
    a7e0:	dc000117 	ldw	r16,4(sp)
    a7e4:	dec00b04 	addi	sp,sp,44
    a7e8:	f800283a 	ret
    a7ec:	21000117 	ldw	r4,4(r4)
    a7f0:	39400117 	ldw	r5,4(r7)
    a7f4:	21400526 	beq	r4,r5,a80c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    a7f8:	20c00007 	ldb	r3,0(r4)
    a7fc:	00800a84 	movi	r2,42
    a800:	18bfce26 	beq	r3,r2,a73c <__alt_data_end+0xfc00a73c>
    a804:	000ee700 	call	ee70 <strcmp>
    a808:	103fcc1e 	bne	r2,zero,a73c <__alt_data_end+0xfc00a73c>
    a80c:	00800184 	movi	r2,6
    a810:	003fea06 	br	a7bc <__alt_data_end+0xfc00a7bc>
    a814:	a83fe926 	beq	r21,zero,a7bc <__alt_data_end+0xfc00a7bc>
    a818:	10800054 	ori	r2,r2,1
    a81c:	003fe706 	br	a7bc <__alt_data_end+0xfc00a7bc>

0000a820 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a820:	deffe804 	addi	sp,sp,-96
    a824:	df001615 	stw	fp,88(sp)
    a828:	df001b17 	ldw	fp,108(sp)
    a82c:	ddc01515 	stw	r23,84(sp)
    a830:	dd001215 	stw	r20,72(sp)
    a834:	e0800417 	ldw	r2,16(fp)
    a838:	dcc01115 	stw	r19,68(sp)
    a83c:	dfc01715 	stw	ra,92(sp)
    a840:	dd801415 	stw	r22,80(sp)
    a844:	dd401315 	stw	r21,76(sp)
    a848:	dc801015 	stw	r18,64(sp)
    a84c:	dc400f15 	stw	r17,60(sp)
    a850:	dc000e15 	stw	r16,56(sp)
    a854:	d9000b15 	stw	r4,44(sp)
    a858:	d9c00915 	stw	r7,36(sp)
    a85c:	1080040c 	andi	r2,r2,16
    a860:	282f883a 	mov	r23,r5
    a864:	3027883a 	mov	r19,r6
    a868:	dd001817 	ldw	r20,96(sp)
    a86c:	10000226 	beq	r2,zero,a878 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    a870:	20800217 	ldw	r2,8(r4)
    a874:	e0800415 	stw	r2,16(fp)
    a878:	d8c01a17 	ldw	r3,104(sp)
    a87c:	a0c0cb26 	beq	r20,r3,abac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    a880:	d8c00b17 	ldw	r3,44(sp)
    a884:	1c000117 	ldw	r16,4(r3)
    a888:	d8c00917 	ldw	r3,36(sp)
    a88c:	19400117 	ldw	r5,4(r3)
    a890:	2c000626 	beq	r5,r16,a8ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    a894:	80c00007 	ldb	r3,0(r16)
    a898:	00800a84 	movi	r2,42
    a89c:	18801b26 	beq	r3,r2,a90c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a8a0:	8009883a 	mov	r4,r16
    a8a4:	000ee700 	call	ee70 <strcmp>
    a8a8:	1000181e 	bne	r2,zero,a90c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a8ac:	e5000015 	stw	r20,0(fp)
    a8b0:	e4c00115 	stw	r19,4(fp)
    a8b4:	b8010916 	blt	r23,zero,acdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    a8b8:	d8c01a17 	ldw	r3,104(sp)
    a8bc:	a5d9883a 	add	r12,r20,r23
    a8c0:	1b014126 	beq	r3,r12,adc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    a8c4:	00800044 	movi	r2,1
    a8c8:	e0800315 	stw	r2,12(fp)
    a8cc:	0005883a 	mov	r2,zero
    a8d0:	dfc01717 	ldw	ra,92(sp)
    a8d4:	df001617 	ldw	fp,88(sp)
    a8d8:	ddc01517 	ldw	r23,84(sp)
    a8dc:	dd801417 	ldw	r22,80(sp)
    a8e0:	dd401317 	ldw	r21,76(sp)
    a8e4:	dd001217 	ldw	r20,72(sp)
    a8e8:	dcc01117 	ldw	r19,68(sp)
    a8ec:	dc801017 	ldw	r18,64(sp)
    a8f0:	dc400f17 	ldw	r17,60(sp)
    a8f4:	dc000e17 	ldw	r16,56(sp)
    a8f8:	dec01804 	addi	sp,sp,96
    a8fc:	f800283a 	ret
    a900:	d8c00917 	ldw	r3,36(sp)
    a904:	18800117 	ldw	r2,4(r3)
    a908:	80bfe826 	beq	r16,r2,a8ac <__alt_data_end+0xfc00a8ac>
    a90c:	b800ef16 	blt	r23,zero,accc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    a910:	d8c01a17 	ldw	r3,104(sp)
    a914:	1dedc83a 	sub	r22,r3,r23
    a918:	e005883a 	mov	r2,fp
    a91c:	00c00044 	movi	r3,1
    a920:	b039883a 	mov	fp,r22
    a924:	0021883a 	mov	r16,zero
    a928:	a02d883a 	mov	r22,r20
    a92c:	d8000a45 	stb	zero,41(sp)
    a930:	d8c00a05 	stb	r3,40(sp)
    a934:	048000c4 	movi	r18,3
    a938:	1029883a 	mov	r20,r2
    a93c:	d8c00b17 	ldw	r3,44(sp)
    a940:	b805883a 	mov	r2,r23
    a944:	1ac00317 	ldw	r11,12(r3)
    a948:	581490fa 	slli	r10,r11,3
    a94c:	52800304 	addi	r10,r10,12
    a950:	1aab883a 	add	r21,r3,r10
    a954:	b007883a 	mov	r3,r22
    a958:	582d883a 	mov	r22,r11
    a95c:	a82f883a 	mov	r23,r21
    a960:	1823883a 	mov	r17,r3
    a964:	102b883a 	mov	r21,r2
    a968:	b0005526 	beq	r22,zero,aac0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    a96c:	b8800017 	ldw	r2,0(r23)
    a970:	a1400417 	ldw	r5,16(r20)
    a974:	d8000415 	stw	zero,16(sp)
    a978:	d8000515 	stw	zero,20(sp)
    a97c:	d8000615 	stw	zero,24(sp)
    a980:	d8000715 	stw	zero,28(sp)
    a984:	d9400815 	stw	r5,32(sp)
    a988:	1100004c 	andi	r4,r2,1
    a98c:	1007d23a 	srai	r3,r2,8
    a990:	20007526 	beq	r4,zero,ab68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    a994:	89000017 	ldw	r4,0(r17)
    a998:	99800054 	ori	r6,r19,1
    a99c:	20c7883a 	add	r3,r4,r3
    a9a0:	18c00017 	ldw	r3,0(r3)
    a9a4:	88c7883a 	add	r3,r17,r3
    a9a8:	e0000326 	beq	fp,zero,a9b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    a9ac:	d9c00a03 	ldbu	r7,40(sp)
    a9b0:	e0c9803a 	cmpltu	r4,fp,r3
    a9b4:	21c07226 	beq	r4,r7,ab80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    a9b8:	1080008c 	andi	r2,r2,2
    a9bc:	1000041e 	bne	r2,zero,a9d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    a9c0:	013fff84 	movi	r4,-2
    a9c4:	a9007126 	beq	r21,r4,ab8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    a9c8:	00bfff44 	movi	r2,-3
    a9cc:	308c703a 	and	r6,r6,r2
    a9d0:	b93fff17 	ldw	r4,-4(r23)
    a9d4:	d9400404 	addi	r5,sp,16
    a9d8:	d9c00917 	ldw	r7,36(sp)
    a9dc:	20800017 	ldw	r2,0(r4)
    a9e0:	d9400315 	stw	r5,12(sp)
    a9e4:	d9401a17 	ldw	r5,104(sp)
    a9e8:	d8c00015 	stw	r3,0(sp)
    a9ec:	d9400215 	stw	r5,8(sp)
    a9f0:	d9401917 	ldw	r5,100(sp)
    a9f4:	d9400115 	stw	r5,4(sp)
    a9f8:	10800717 	ldw	r2,28(r2)
    a9fc:	a80b883a 	mov	r5,r21
    aa00:	103ee83a 	callr	r2
    aa04:	a1400217 	ldw	r5,8(r20)
    aa08:	d9000617 	ldw	r4,24(sp)
    aa0c:	d8c00717 	ldw	r3,28(sp)
    aa10:	2908b03a 	or	r4,r5,r4
    aa14:	a1000215 	stw	r4,8(r20)
    aa18:	01400184 	movi	r5,6
    aa1c:	1940a426 	beq	r3,r5,acb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    aa20:	01400084 	movi	r5,2
    aa24:	1940a226 	beq	r3,r5,acb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    aa28:	81403fcc 	andi	r5,r16,255
    aa2c:	a1800017 	ldw	r6,0(r20)
    aa30:	28004f1e 	bne	r5,zero,ab70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    aa34:	30007926 	beq	r6,zero,ac1c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    aa38:	d9400417 	ldw	r5,16(sp)
    aa3c:	29806926 	beq	r5,r6,abe4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    aa40:	28006d26 	beq	r5,zero,abf8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    aa44:	a2800317 	ldw	r10,12(r20)
    aa48:	9100250e 	bge	r18,r4,aae0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    aa4c:	2100004c 	andi	r4,r4,1
    aa50:	20000326 	beq	r4,zero,aa60 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    aa54:	a0800417 	ldw	r2,16(r20)
    aa58:	1080008c 	andi	r2,r2,2
    aa5c:	1000201e 	bne	r2,zero,aae0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    aa60:	50004d1e 	bne	r10,zero,ab98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    aa64:	18002626 	beq	r3,zero,ab00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    aa68:	02800044 	movi	r10,1
    aa6c:	181b883a 	mov	r13,r3
    aa70:	1a84f03a 	xor	r2,r3,r10
    aa74:	501f883a 	mov	r15,r10
    aa78:	90801f0e 	bge	r18,r2,aaf8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    aa7c:	90c0880e 	bge	r18,r3,aca0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    aa80:	d9400417 	ldw	r5,16(sp)
    aa84:	1880008c 	andi	r2,r3,2
    aa88:	d9000517 	ldw	r4,20(sp)
    aa8c:	a1400015 	stw	r5,0(r20)
    aa90:	0021883a 	mov	r16,zero
    aa94:	a1000115 	stw	r4,4(r20)
    aa98:	a0c00315 	stw	r3,12(r20)
    aa9c:	10004f1e 	bne	r2,zero,abdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    aaa0:	6b40004c 	andi	r13,r13,1
    aaa4:	68004d26 	beq	r13,zero,abdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    aaa8:	a1000217 	ldw	r4,8(r20)
    aaac:	01400104 	movi	r5,4
    aab0:	21408826 	beq	r4,r5,acd4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    aab4:	b5bfffc4 	addi	r22,r22,-1
    aab8:	bdfffe04 	addi	r23,r23,-8
    aabc:	b03fab1e 	bne	r22,zero,a96c <__alt_data_end+0xfc00a96c>
    aac0:	d8800a43 	ldbu	r2,41(sp)
    aac4:	a82f883a 	mov	r23,r21
    aac8:	882d883a 	mov	r22,r17
    aacc:	10008126 	beq	r2,zero,acd4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    aad0:	dd400a03 	ldbu	r21,40(sp)
    aad4:	a8007f26 	beq	r21,zero,acd4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    aad8:	d8000a05 	stb	zero,40(sp)
    aadc:	003f9706 	br	a93c <__alt_data_end+0xfc00a93c>
    aae0:	501f883a 	mov	r15,r10
    aae4:	181b883a 	mov	r13,r3
    aae8:	02800b0e 	bge	zero,r10,ab18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    aaec:	00c0570e 	bge	zero,r3,ac4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    aaf0:	1a84f03a 	xor	r2,r3,r10
    aaf4:	90bfe116 	blt	r18,r2,aa7c <__alt_data_end+0xfc00aa7c>
    aaf8:	1bc6703a 	and	r3,r3,r15
    aafc:	90c09916 	blt	r18,r3,ad64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    ab00:	01000044 	movi	r4,1
    ab04:	a1000315 	stw	r4,12(r20)
    ab08:	a0000015 	stw	zero,0(r20)
    ab0c:	a1000217 	ldw	r4,8(r20)
    ab10:	04000044 	movi	r16,1
    ab14:	003fe506 	br	aaac <__alt_data_end+0xfc00aaac>
    ab18:	90c00a0e 	bge	r18,r3,ab44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    ab1c:	1880004c 	andi	r2,r3,1
    ab20:	10000426 	beq	r2,zero,ab34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    ab24:	d9000b17 	ldw	r4,44(sp)
    ab28:	20800217 	ldw	r2,8(r4)
    ab2c:	1080008c 	andi	r2,r2,2
    ab30:	1000041e 	bne	r2,zero,ab44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    ab34:	1880005c 	xori	r2,r3,1
    ab38:	90bfd216 	blt	r18,r2,aa84 <__alt_data_end+0xfc00aa84>
    ab3c:	03c00044 	movi	r15,1
    ab40:	003fed06 	br	aaf8 <__alt_data_end+0xfc00aaf8>
    ab44:	a8006e16 	blt	r21,zero,ad00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    ab48:	d8801a17 	ldw	r2,104(sp)
    ab4c:	354d883a 	add	r6,r6,r21
    ab50:	11805026 	beq	r2,r6,ac94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    ab54:	00c0a50e 	bge	zero,r3,adec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    ab58:	03c00044 	movi	r15,1
    ab5c:	1bc4f03a 	xor	r2,r3,r15
    ab60:	7815883a 	mov	r10,r15
    ab64:	003fc406 	br	aa78 <__alt_data_end+0xfc00aa78>
    ab68:	980d883a 	mov	r6,r19
    ab6c:	003f8d06 	br	a9a4 <__alt_data_end+0xfc00a9a4>
    ab70:	303fb11e 	bne	r6,zero,aa38 <__alt_data_end+0xfc00aa38>
    ab74:	d9400417 	ldw	r5,16(sp)
    ab78:	283fb21e 	bne	r5,zero,aa44 <__alt_data_end+0xfc00aa44>
    ab7c:	003fcb06 	br	aaac <__alt_data_end+0xfc00aaac>
    ab80:	00c00044 	movi	r3,1
    ab84:	d8c00a45 	stb	r3,41(sp)
    ab88:	003fca06 	br	aab4 <__alt_data_end+0xfc00aab4>
    ab8c:	294000cc 	andi	r5,r5,3
    ab90:	283fc826 	beq	r5,zero,aab4 <__alt_data_end+0xfc00aab4>
    ab94:	003f8c06 	br	a9c8 <__alt_data_end+0xfc00a9c8>
    ab98:	18001a26 	beq	r3,zero,ac04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    ab9c:	181b883a 	mov	r13,r3
    aba0:	501f883a 	mov	r15,r10
    aba4:	50c4f03a 	xor	r2,r10,r3
    aba8:	003fb306 	br	aa78 <__alt_data_end+0xfc00aa78>
    abac:	d8c00b17 	ldw	r3,44(sp)
    abb0:	1c000117 	ldw	r16,4(r3)
    abb4:	d8c01917 	ldw	r3,100(sp)
    abb8:	19400117 	ldw	r5,4(r3)
    abbc:	81400626 	beq	r16,r5,abd8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    abc0:	80c00007 	ldb	r3,0(r16)
    abc4:	00800a84 	movi	r2,42
    abc8:	18bf4d26 	beq	r3,r2,a900 <__alt_data_end+0xfc00a900>
    abcc:	8009883a 	mov	r4,r16
    abd0:	000ee700 	call	ee70 <strcmp>
    abd4:	10005c1e 	bne	r2,zero,ad48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    abd8:	e4c00215 	stw	r19,8(fp)
    abdc:	0005883a 	mov	r2,zero
    abe0:	003f3b06 	br	a8d0 <__alt_data_end+0xfc00a8d0>
    abe4:	a0c00117 	ldw	r3,4(r20)
    abe8:	d8800517 	ldw	r2,20(sp)
    abec:	1884b03a 	or	r2,r3,r2
    abf0:	a0800115 	stw	r2,4(r20)
    abf4:	003fad06 	br	aaac <__alt_data_end+0xfc00aaac>
    abf8:	10803fcc 	andi	r2,r2,255
    abfc:	103f911e 	bne	r2,zero,aa44 <__alt_data_end+0xfc00aa44>
    ac00:	003faa06 	br	aaac <__alt_data_end+0xfc00aaac>
    ac04:	501b883a 	mov	r13,r10
    ac08:	5080005c 	xori	r2,r10,1
    ac0c:	5007883a 	mov	r3,r10
    ac10:	90bfbb0e 	bge	r18,r2,ab00 <__alt_data_end+0xfc00ab00>
    ac14:	6880008c 	andi	r2,r13,2
    ac18:	003f9f06 	br	aa98 <__alt_data_end+0xfc00aa98>
    ac1c:	d8c00417 	ldw	r3,16(sp)
    ac20:	d9400517 	ldw	r5,20(sp)
    ac24:	a0c00015 	stw	r3,0(r20)
    ac28:	a1400115 	stw	r5,4(r20)
    ac2c:	18000526 	beq	r3,zero,ac44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    ac30:	20001626 	beq	r4,zero,ac8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    ac34:	d9400b17 	ldw	r5,44(sp)
    ac38:	28c00217 	ldw	r3,8(r5)
    ac3c:	18c0004c 	andi	r3,r3,1
    ac40:	183f2326 	beq	r3,zero,a8d0 <__alt_data_end+0xfc00a8d0>
    ac44:	1021883a 	mov	r16,r2
    ac48:	003f9806 	br	aaac <__alt_data_end+0xfc00aaac>
    ac4c:	9280060e 	bge	r18,r10,ac68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    ac50:	5080004c 	andi	r2,r10,1
    ac54:	10002426 	beq	r2,zero,ace8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    ac58:	d8c00b17 	ldw	r3,44(sp)
    ac5c:	18800217 	ldw	r2,8(r3)
    ac60:	1080008c 	andi	r2,r2,2
    ac64:	10003c26 	beq	r2,zero,ad58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    ac68:	d9400417 	ldw	r5,16(sp)
    ac6c:	a8004216 	blt	r21,zero,ad78 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    ac70:	d8c01a17 	ldw	r3,104(sp)
    ac74:	2d45883a 	add	r2,r5,r21
    ac78:	18805726 	beq	r3,r2,add8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    ac7c:	7880005c 	xori	r2,r15,1
    ac80:	781b883a 	mov	r13,r15
    ac84:	5007883a 	mov	r3,r10
    ac88:	003fe106 	br	ac10 <__alt_data_end+0xfc00ac10>
    ac8c:	1021883a 	mov	r16,r2
    ac90:	003f8806 	br	aab4 <__alt_data_end+0xfc00aab4>
    ac94:	03c00184 	movi	r15,6
    ac98:	00ffb016 	blt	zero,r3,ab5c <__alt_data_end+0xfc00ab5c>
    ac9c:	7815883a 	mov	r10,r15
    aca0:	7880008c 	andi	r2,r15,2
    aca4:	781b883a 	mov	r13,r15
    aca8:	5007883a 	mov	r3,r10
    acac:	003f7a06 	br	aa98 <__alt_data_end+0xfc00aa98>
    acb0:	a039883a 	mov	fp,r20
    acb4:	e0c00315 	stw	r3,12(fp)
    acb8:	d8c00417 	ldw	r3,16(sp)
    acbc:	a0c00015 	stw	r3,0(r20)
    acc0:	d8c00517 	ldw	r3,20(sp)
    acc4:	a0c00115 	stw	r3,4(r20)
    acc8:	003f0106 	br	a8d0 <__alt_data_end+0xfc00a8d0>
    accc:	002d883a 	mov	r22,zero
    acd0:	003f1106 	br	a918 <__alt_data_end+0xfc00a918>
    acd4:	8005883a 	mov	r2,r16
    acd8:	003efd06 	br	a8d0 <__alt_data_end+0xfc00a8d0>
    acdc:	00bfff84 	movi	r2,-2
    ace0:	b8bfbe1e 	bne	r23,r2,abdc <__alt_data_end+0xfc00abdc>
    ace4:	003ef706 	br	a8c4 <__alt_data_end+0xfc00a8c4>
    ace8:	5080005c 	xori	r2,r10,1
    acec:	90bf840e 	bge	r18,r2,ab00 <__alt_data_end+0xfc00ab00>
    acf0:	501b883a 	mov	r13,r10
    acf4:	5080008c 	andi	r2,r10,2
    acf8:	5007883a 	mov	r3,r10
    acfc:	003f6606 	br	aa98 <__alt_data_end+0xfc00aa98>
    ad00:	013fff84 	movi	r4,-2
    ad04:	a9003226 	beq	r21,r4,add0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    ad08:	d9400917 	ldw	r5,36(sp)
    ad0c:	d9001a17 	ldw	r4,104(sp)
    ad10:	d9c01917 	ldw	r7,100(sp)
    ad14:	28800017 	ldw	r2,0(r5)
    ad18:	d9000015 	stw	r4,0(sp)
    ad1c:	d9000917 	ldw	r4,36(sp)
    ad20:	10800817 	ldw	r2,32(r2)
    ad24:	a80b883a 	mov	r5,r21
    ad28:	d8c00d15 	stw	r3,52(sp)
    ad2c:	db400c15 	stw	r13,48(sp)
    ad30:	103ee83a 	callr	r2
    ad34:	1015883a 	mov	r10,r2
    ad38:	101f883a 	mov	r15,r2
    ad3c:	db400c17 	ldw	r13,48(sp)
    ad40:	d8c00d17 	ldw	r3,52(sp)
    ad44:	003f6906 	br	aaec <__alt_data_end+0xfc00aaec>
    ad48:	d8c00917 	ldw	r3,36(sp)
    ad4c:	19400117 	ldw	r5,4(r3)
    ad50:	817ed31e 	bne	r16,r5,a8a0 <__alt_data_end+0xfc00a8a0>
    ad54:	003ed506 	br	a8ac <__alt_data_end+0xfc00a8ac>
    ad58:	5080005c 	xori	r2,r10,1
    ad5c:	90bfe416 	blt	r18,r2,acf0 <__alt_data_end+0xfc00acf0>
    ad60:	003f6706 	br	ab00 <__alt_data_end+0xfc00ab00>
    ad64:	00800084 	movi	r2,2
    ad68:	a0800315 	stw	r2,12(r20)
    ad6c:	a0000015 	stw	zero,0(r20)
    ad70:	00800044 	movi	r2,1
    ad74:	003ed606 	br	a8d0 <__alt_data_end+0xfc00a8d0>
    ad78:	013fff84 	movi	r4,-2
    ad7c:	a9002526 	beq	r21,r4,ae14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    ad80:	d8c00917 	ldw	r3,36(sp)
    ad84:	d9c01917 	ldw	r7,100(sp)
    ad88:	d9000917 	ldw	r4,36(sp)
    ad8c:	18800017 	ldw	r2,0(r3)
    ad90:	d8c01a17 	ldw	r3,104(sp)
    ad94:	280d883a 	mov	r6,r5
    ad98:	a80b883a 	mov	r5,r21
    ad9c:	d8c00015 	stw	r3,0(sp)
    ada0:	10800817 	ldw	r2,32(r2)
    ada4:	da800c15 	stw	r10,48(sp)
    ada8:	dbc00d15 	stw	r15,52(sp)
    adac:	103ee83a 	callr	r2
    adb0:	da800c17 	ldw	r10,48(sp)
    adb4:	1007883a 	mov	r3,r2
    adb8:	101b883a 	mov	r13,r2
    adbc:	dbc00d17 	ldw	r15,52(sp)
    adc0:	1284f03a 	xor	r2,r2,r10
    adc4:	003f2c06 	br	aa78 <__alt_data_end+0xfc00aa78>
    adc8:	00800184 	movi	r2,6
    adcc:	003ebe06 	br	a8c8 <__alt_data_end+0xfc00a8c8>
    add0:	00ff4b0e 	bge	zero,r3,ab00 <__alt_data_end+0xfc00ab00>
    add4:	003f6006 	br	ab58 <__alt_data_end+0xfc00ab58>
    add8:	5080019c 	xori	r2,r10,6
    addc:	90800916 	blt	r18,r2,ae04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    ade0:	50c0018c 	andi	r3,r10,6
    ade4:	90ff460e 	bge	r18,r3,ab00 <__alt_data_end+0xfc00ab00>
    ade8:	003fde06 	br	ad64 <__alt_data_end+0xfc00ad64>
    adec:	d8c01a17 	ldw	r3,104(sp)
    adf0:	2d45883a 	add	r2,r5,r21
    adf4:	18800326 	beq	r3,r2,ae04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    adf8:	02800044 	movi	r10,1
    adfc:	501f883a 	mov	r15,r10
    ae00:	003f9e06 	br	ac7c <__alt_data_end+0xfc00ac7c>
    ae04:	03400184 	movi	r13,6
    ae08:	00800084 	movi	r2,2
    ae0c:	6807883a 	mov	r3,r13
    ae10:	003f1d06 	br	aa88 <__alt_data_end+0xfc00aa88>
    ae14:	501b883a 	mov	r13,r10
    ae18:	5080005c 	xori	r2,r10,1
    ae1c:	5007883a 	mov	r3,r10
    ae20:	003f7b06 	br	ac10 <__alt_data_end+0xfc00ac10>

0000ae24 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    ae24:	deffef04 	addi	sp,sp,-68
    ae28:	ddc00e15 	stw	r23,56(sp)
    ae2c:	dd000b15 	stw	r20,44(sp)
    ae30:	dc400815 	stw	r17,32(sp)
    ae34:	3029883a 	mov	r20,r6
    ae38:	dfc01015 	stw	ra,64(sp)
    ae3c:	df000f15 	stw	fp,60(sp)
    ae40:	dd800d15 	stw	r22,52(sp)
    ae44:	dd400c15 	stw	r21,48(sp)
    ae48:	dcc00a15 	stw	r19,40(sp)
    ae4c:	dc800915 	stw	r18,36(sp)
    ae50:	dc000715 	stw	r16,28(sp)
    ae54:	d9000515 	stw	r4,20(sp)
    ae58:	2823883a 	mov	r17,r5
    ae5c:	382f883a 	mov	r23,r7
    ae60:	000b20c0 	call	b20c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    ae64:	100d883a 	mov	r6,r2
    ae68:	10803fcc 	andi	r2,r2,255
    ae6c:	1000441e 	bne	r2,zero,af80 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    ae70:	bc000217 	ldw	r16,8(r23)
    ae74:	8080040c 	andi	r2,r16,16
    ae78:	10000226 	beq	r2,zero,ae84 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    ae7c:	d8c00517 	ldw	r3,20(sp)
    ae80:	1c000217 	ldw	r16,8(r3)
    ae84:	d8c00517 	ldw	r3,20(sp)
    ae88:	d8800517 	ldw	r2,20(sp)
    ae8c:	1f000317 	ldw	fp,12(r3)
    ae90:	e01090fa 	slli	r8,fp,3
    ae94:	40c00304 	addi	r3,r8,12
    ae98:	10ed883a 	add	r22,r2,r3
    ae9c:	80c0004c 	andi	r3,r16,1
    aea0:	42000204 	addi	r8,r8,8
    aea4:	d8c00415 	stw	r3,16(sp)
    aea8:	122b883a 	add	r21,r2,r8
    aeac:	e0003226 	beq	fp,zero,af78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    aeb0:	b1800017 	ldw	r6,0(r22)
    aeb4:	d8000015 	stw	zero,0(sp)
    aeb8:	d8000115 	stw	zero,4(sp)
    aebc:	dc000215 	stw	r16,8(sp)
    aec0:	d8000315 	stw	zero,12(sp)
    aec4:	34c0008c 	andi	r19,r6,2
    aec8:	3480004c 	andi	r18,r6,1
    aecc:	9800021e 	bne	r19,zero,aed8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    aed0:	d8c00417 	ldw	r3,16(sp)
    aed4:	18002426 	beq	r3,zero,af68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    aed8:	a0003626 	beq	r20,zero,afb4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    aedc:	300dd23a 	srai	r6,r6,8
    aee0:	90000326 	beq	r18,zero,aef0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    aee4:	a0800017 	ldw	r2,0(r20)
    aee8:	118d883a 	add	r6,r2,r6
    aeec:	31800017 	ldw	r6,0(r6)
    aef0:	a18d883a 	add	r6,r20,r6
    aef4:	a9000017 	ldw	r4,0(r21)
    aef8:	d80f883a 	mov	r7,sp
    aefc:	880b883a 	mov	r5,r17
    af00:	20800017 	ldw	r2,0(r4)
    af04:	10800617 	ldw	r2,24(r2)
    af08:	103ee83a 	callr	r2
    af0c:	100d883a 	mov	r6,r2
    af10:	10803fcc 	andi	r2,r2,255
    af14:	10001426 	beq	r2,zero,af68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    af18:	d8800317 	ldw	r2,12(sp)
    af1c:	00c00204 	movi	r3,8
    af20:	10c02626 	beq	r2,r3,afbc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    af24:	d8800117 	ldw	r2,4(sp)
    af28:	00c000c4 	movi	r3,3
    af2c:	1880040e 	bge	r3,r2,af40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    af30:	9800031e 	bne	r19,zero,af40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    af34:	00ffff44 	movi	r3,-3
    af38:	10c4703a 	and	r2,r2,r3
    af3c:	d8800115 	stw	r2,4(sp)
    af40:	b9400317 	ldw	r5,12(r23)
    af44:	28002126 	beq	r5,zero,afcc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    af48:	b8800017 	ldw	r2,0(r23)
    af4c:	d9000017 	ldw	r4,0(sp)
    af50:	11004d1e 	bne	r2,r4,b088 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    af54:	10003126 	beq	r2,zero,b01c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    af58:	b9000117 	ldw	r4,4(r23)
    af5c:	d8800117 	ldw	r2,4(sp)
    af60:	2084b03a 	or	r2,r4,r2
    af64:	b8800115 	stw	r2,4(r23)
    af68:	e73fffc4 	addi	fp,fp,-1
    af6c:	b5bffe04 	addi	r22,r22,-8
    af70:	ad7ffe04 	addi	r21,r21,-8
    af74:	e03fce1e 	bne	fp,zero,aeb0 <__alt_data_end+0xfc00aeb0>
    af78:	b9800117 	ldw	r6,4(r23)
    af7c:	300cc03a 	cmpne	r6,r6,zero
    af80:	3005883a 	mov	r2,r6
    af84:	dfc01017 	ldw	ra,64(sp)
    af88:	df000f17 	ldw	fp,60(sp)
    af8c:	ddc00e17 	ldw	r23,56(sp)
    af90:	dd800d17 	ldw	r22,52(sp)
    af94:	dd400c17 	ldw	r21,48(sp)
    af98:	dd000b17 	ldw	r20,44(sp)
    af9c:	dcc00a17 	ldw	r19,40(sp)
    afa0:	dc800917 	ldw	r18,36(sp)
    afa4:	dc400817 	ldw	r17,32(sp)
    afa8:	dc000717 	ldw	r16,28(sp)
    afac:	dec01104 	addi	sp,sp,68
    afb0:	f800283a 	ret
    afb4:	000d883a 	mov	r6,zero
    afb8:	003fce06 	br	aef4 <__alt_data_end+0xfc00aef4>
    afbc:	903fd926 	beq	r18,zero,af24 <__alt_data_end+0xfc00af24>
    afc0:	a8800017 	ldw	r2,0(r21)
    afc4:	d8800315 	stw	r2,12(sp)
    afc8:	003fd606 	br	af24 <__alt_data_end+0xfc00af24>
    afcc:	d9000017 	ldw	r4,0(sp)
    afd0:	d8800117 	ldw	r2,4(sp)
    afd4:	00c000c4 	movi	r3,3
    afd8:	b9000015 	stw	r4,0(r23)
    afdc:	d9000217 	ldw	r4,8(sp)
    afe0:	b8800115 	stw	r2,4(r23)
    afe4:	b9000215 	stw	r4,8(r23)
    afe8:	d9000317 	ldw	r4,12(sp)
    afec:	b9000315 	stw	r4,12(r23)
    aff0:	18bfe30e 	bge	r3,r2,af80 <__alt_data_end+0xfc00af80>
    aff4:	1100008c 	andi	r4,r2,2
    aff8:	20001926 	beq	r4,zero,b060 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    affc:	d8c00517 	ldw	r3,20(sp)
    b000:	18800217 	ldw	r2,8(r3)
    b004:	1080004c 	andi	r2,r2,1
    b008:	103fdd26 	beq	r2,zero,af80 <__alt_data_end+0xfc00af80>
    b00c:	e73fffc4 	addi	fp,fp,-1
    b010:	b5bffe04 	addi	r22,r22,-8
    b014:	ad7ffe04 	addi	r21,r21,-8
    b018:	003fd606 	br	af74 <__alt_data_end+0xfc00af74>
    b01c:	d8800317 	ldw	r2,12(sp)
    b020:	00c00204 	movi	r3,8
    b024:	10c00b26 	beq	r2,r3,b054 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b028:	28c00a26 	beq	r5,r3,b054 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b02c:	11000117 	ldw	r4,4(r2)
    b030:	29400117 	ldw	r5,4(r5)
    b034:	217fc826 	beq	r4,r5,af58 <__alt_data_end+0xfc00af58>
    b038:	20800007 	ldb	r2,0(r4)
    b03c:	00c00a84 	movi	r3,42
    b040:	10c00426 	beq	r2,r3,b054 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b044:	d9800615 	stw	r6,24(sp)
    b048:	000ee700 	call	ee70 <strcmp>
    b04c:	d9800617 	ldw	r6,24(sp)
    b050:	103fc126 	beq	r2,zero,af58 <__alt_data_end+0xfc00af58>
    b054:	00800084 	movi	r2,2
    b058:	b8800115 	stw	r2,4(r23)
    b05c:	003fc806 	br	af80 <__alt_data_end+0xfc00af80>
    b060:	1080004c 	andi	r2,r2,1
    b064:	103fc626 	beq	r2,zero,af80 <__alt_data_end+0xfc00af80>
    b068:	d8c00517 	ldw	r3,20(sp)
    b06c:	18800217 	ldw	r2,8(r3)
    b070:	1080008c 	andi	r2,r2,2
    b074:	103fc226 	beq	r2,zero,af80 <__alt_data_end+0xfc00af80>
    b078:	e73fffc4 	addi	fp,fp,-1
    b07c:	b5bffe04 	addi	r22,r22,-8
    b080:	ad7ffe04 	addi	r21,r21,-8
    b084:	003fbb06 	br	af74 <__alt_data_end+0xfc00af74>
    b088:	00800084 	movi	r2,2
    b08c:	b8000015 	stw	zero,0(r23)
    b090:	b8800115 	stw	r2,4(r23)
    b094:	003fba06 	br	af80 <__alt_data_end+0xfc00af80>

0000b098 <_ZNSt9type_infoD1Ev>:
    b098:	f800283a 	ret

0000b09c <_ZNKSt9type_info14__is_pointer_pEv>:
    b09c:	0005883a 	mov	r2,zero
    b0a0:	f800283a 	ret

0000b0a4 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    b0a4:	0005883a 	mov	r2,zero
    b0a8:	f800283a 	ret

0000b0ac <_ZNSt9type_infoD0Ev>:
    b0ac:	000b0f41 	jmpi	b0f4 <_ZdlPv>

0000b0b0 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    b0b0:	21000117 	ldw	r4,4(r4)
    b0b4:	29400117 	ldw	r5,4(r5)
    b0b8:	21400c26 	beq	r4,r5,b0ec <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    b0bc:	20c00007 	ldb	r3,0(r4)
    b0c0:	00800a84 	movi	r2,42
    b0c4:	18800726 	beq	r3,r2,b0e4 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    b0c8:	deffff04 	addi	sp,sp,-4
    b0cc:	dfc00015 	stw	ra,0(sp)
    b0d0:	000ee700 	call	ee70 <strcmp>
    b0d4:	1005003a 	cmpeq	r2,r2,zero
    b0d8:	dfc00017 	ldw	ra,0(sp)
    b0dc:	dec00104 	addi	sp,sp,4
    b0e0:	f800283a 	ret
    b0e4:	0005883a 	mov	r2,zero
    b0e8:	f800283a 	ret
    b0ec:	00800044 	movi	r2,1
    b0f0:	f800283a 	ret

0000b0f4 <_ZdlPv>:
    b0f4:	000de641 	jmpi	de64 <free>

0000b0f8 <__cxa_pure_virtual>:
    b0f8:	014000f4 	movhi	r5,3
    b0fc:	deffff04 	addi	sp,sp,-4
    b100:	29686704 	addi	r5,r5,-24164
    b104:	018006c4 	movi	r6,27
    b108:	01000084 	movi	r4,2
    b10c:	dfc00015 	stw	ra,0(sp)
    b110:	001f4340 	call	1f434 <write>
    b114:	000b4c00 	call	b4c0 <_ZSt9terminatev>

0000b118 <__cxa_deleted_virtual>:
    b118:	014000f4 	movhi	r5,3
    b11c:	deffff04 	addi	sp,sp,-4
    b120:	29686e04 	addi	r5,r5,-24136
    b124:	01800784 	movi	r6,30
    b128:	01000084 	movi	r4,2
    b12c:	dfc00015 	stw	ra,0(sp)
    b130:	001f4340 	call	1f434 <write>
    b134:	000b4c00 	call	b4c0 <_ZSt9terminatev>

0000b138 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    b138:	20800017 	ldw	r2,0(r4)
    b13c:	defffa04 	addi	sp,sp,-24
    b140:	dc000415 	stw	r16,16(sp)
    b144:	10800617 	ldw	r2,24(r2)
    b148:	3021883a 	mov	r16,r6
    b14c:	31800017 	ldw	r6,0(r6)
    b150:	00c00404 	movi	r3,16
    b154:	d8c00215 	stw	r3,8(sp)
    b158:	dfc00515 	stw	ra,20(sp)
    b15c:	d8000015 	stw	zero,0(sp)
    b160:	d8000115 	stw	zero,4(sp)
    b164:	d8000315 	stw	zero,12(sp)
    b168:	d80f883a 	mov	r7,sp
    b16c:	103ee83a 	callr	r2
    b170:	d8800117 	ldw	r2,4(sp)
    b174:	00c00184 	movi	r3,6
    b178:	1080018c 	andi	r2,r2,6
    b17c:	10c00526 	beq	r2,r3,b194 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    b180:	0005883a 	mov	r2,zero
    b184:	dfc00517 	ldw	ra,20(sp)
    b188:	dc000417 	ldw	r16,16(sp)
    b18c:	dec00604 	addi	sp,sp,24
    b190:	f800283a 	ret
    b194:	d8c00017 	ldw	r3,0(sp)
    b198:	00800044 	movi	r2,1
    b19c:	80c00015 	stw	r3,0(r16)
    b1a0:	dfc00517 	ldw	ra,20(sp)
    b1a4:	dc000417 	ldw	r16,16(sp)
    b1a8:	dec00604 	addi	sp,sp,24
    b1ac:	f800283a 	ret

0000b1b0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    b1b0:	d8800017 	ldw	r2,0(sp)
    b1b4:	11800226 	beq	r2,r6,b1c0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    b1b8:	00800044 	movi	r2,1
    b1bc:	f800283a 	ret
    b1c0:	00800184 	movi	r2,6
    b1c4:	f800283a 	ret

0000b1c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    b1c8:	008000f4 	movhi	r2,3
    b1cc:	10a88404 	addi	r2,r2,-24048
    b1d0:	20800015 	stw	r2,0(r4)
    b1d4:	000b0981 	jmpi	b098 <_ZNSt9type_infoD1Ev>

0000b1d8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    b1d8:	defffe04 	addi	sp,sp,-8
    b1dc:	008000f4 	movhi	r2,3
    b1e0:	dc000015 	stw	r16,0(sp)
    b1e4:	dfc00115 	stw	ra,4(sp)
    b1e8:	10a88404 	addi	r2,r2,-24048
    b1ec:	20800015 	stw	r2,0(r4)
    b1f0:	2021883a 	mov	r16,r4
    b1f4:	000b0980 	call	b098 <_ZNSt9type_infoD1Ev>
    b1f8:	8009883a 	mov	r4,r16
    b1fc:	dfc00117 	ldw	ra,4(sp)
    b200:	dc000017 	ldw	r16,0(sp)
    b204:	dec00204 	addi	sp,sp,8
    b208:	000b0f41 	jmpi	b0f4 <_ZdlPv>

0000b20c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    b20c:	21000117 	ldw	r4,4(r4)
    b210:	29400117 	ldw	r5,4(r5)
    b214:	defffd04 	addi	sp,sp,-12
    b218:	dc400115 	stw	r17,4(sp)
    b21c:	dc000015 	stw	r16,0(sp)
    b220:	dfc00215 	stw	ra,8(sp)
    b224:	3023883a 	mov	r17,r6
    b228:	3821883a 	mov	r16,r7
    b22c:	21400526 	beq	r4,r5,b244 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    b230:	20c00007 	ldb	r3,0(r4)
    b234:	00800a84 	movi	r2,42
    b238:	18800d26 	beq	r3,r2,b270 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b23c:	000ee700 	call	ee70 <strcmp>
    b240:	10000b1e 	bne	r2,zero,b270 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b244:	00800204 	movi	r2,8
    b248:	80800315 	stw	r2,12(r16)
    b24c:	00800184 	movi	r2,6
    b250:	80800115 	stw	r2,4(r16)
    b254:	84400015 	stw	r17,0(r16)
    b258:	00800044 	movi	r2,1
    b25c:	dfc00217 	ldw	ra,8(sp)
    b260:	dc400117 	ldw	r17,4(sp)
    b264:	dc000017 	ldw	r16,0(sp)
    b268:	dec00304 	addi	sp,sp,12
    b26c:	f800283a 	ret
    b270:	0005883a 	mov	r2,zero
    b274:	003ff906 	br	b25c <__alt_data_end+0xfc00b25c>

0000b278 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    b278:	defffa04 	addi	sp,sp,-24
    b27c:	dc800415 	stw	r18,16(sp)
    b280:	d8800817 	ldw	r2,32(sp)
    b284:	dc800617 	ldw	r18,24(sp)
    b288:	dc400315 	stw	r17,12(sp)
    b28c:	dc000215 	stw	r16,8(sp)
    b290:	dfc00515 	stw	ra,20(sp)
    b294:	dc400917 	ldw	r17,36(sp)
    b298:	24000117 	ldw	r16,4(r4)
    b29c:	90801526 	beq	r18,r2,b2f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    b2a0:	39400117 	ldw	r5,4(r7)
    b2a4:	2c000826 	beq	r5,r16,b2c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    b2a8:	80c00007 	ldb	r3,0(r16)
    b2ac:	00800a84 	movi	r2,42
    b2b0:	18800926 	beq	r3,r2,b2d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b2b4:	8009883a 	mov	r4,r16
    b2b8:	d9800115 	stw	r6,4(sp)
    b2bc:	000ee700 	call	ee70 <strcmp>
    b2c0:	d9800117 	ldw	r6,4(sp)
    b2c4:	1000041e 	bne	r2,zero,b2d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b2c8:	00800044 	movi	r2,1
    b2cc:	8c800015 	stw	r18,0(r17)
    b2d0:	89800115 	stw	r6,4(r17)
    b2d4:	88800315 	stw	r2,12(r17)
    b2d8:	0005883a 	mov	r2,zero
    b2dc:	dfc00517 	ldw	ra,20(sp)
    b2e0:	dc800417 	ldw	r18,16(sp)
    b2e4:	dc400317 	ldw	r17,12(sp)
    b2e8:	dc000217 	ldw	r16,8(sp)
    b2ec:	dec00604 	addi	sp,sp,24
    b2f0:	f800283a 	ret
    b2f4:	d8800717 	ldw	r2,28(sp)
    b2f8:	11400117 	ldw	r5,4(r2)
    b2fc:	81400a26 	beq	r16,r5,b328 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    b300:	80c00007 	ldb	r3,0(r16)
    b304:	00800a84 	movi	r2,42
    b308:	18800c26 	beq	r3,r2,b33c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    b30c:	8009883a 	mov	r4,r16
    b310:	d9800115 	stw	r6,4(sp)
    b314:	d9c00015 	stw	r7,0(sp)
    b318:	000ee700 	call	ee70 <strcmp>
    b31c:	d9800117 	ldw	r6,4(sp)
    b320:	d9c00017 	ldw	r7,0(sp)
    b324:	1000021e 	bne	r2,zero,b330 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    b328:	89800215 	stw	r6,8(r17)
    b32c:	003fea06 	br	b2d8 <__alt_data_end+0xfc00b2d8>
    b330:	39400117 	ldw	r5,4(r7)
    b334:	817fdf1e 	bne	r16,r5,b2b4 <__alt_data_end+0xfc00b2b4>
    b338:	003fe306 	br	b2c8 <__alt_data_end+0xfc00b2c8>
    b33c:	38800117 	ldw	r2,4(r7)
    b340:	80bfe51e 	bne	r16,r2,b2d8 <__alt_data_end+0xfc00b2d8>
    b344:	003fe006 	br	b2c8 <__alt_data_end+0xfc00b2c8>

0000b348 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    b348:	20800117 	ldw	r2,4(r4)
    b34c:	28c00117 	ldw	r3,4(r5)
    b350:	10c02926 	beq	r2,r3,b3f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    b354:	defffb04 	addi	sp,sp,-20
    b358:	dcc00315 	stw	r19,12(sp)
    b35c:	dc800215 	stw	r18,8(sp)
    b360:	dc400115 	stw	r17,4(sp)
    b364:	dc000015 	stw	r16,0(sp)
    b368:	dfc00415 	stw	ra,16(sp)
    b36c:	2821883a 	mov	r16,r5
    b370:	11400007 	ldb	r5,0(r2)
    b374:	2025883a 	mov	r18,r4
    b378:	01000a84 	movi	r4,42
    b37c:	3823883a 	mov	r17,r7
    b380:	3027883a 	mov	r19,r6
    b384:	29000626 	beq	r5,r4,b3a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b388:	180b883a 	mov	r5,r3
    b38c:	1009883a 	mov	r4,r2
    b390:	000ee700 	call	ee70 <strcmp>
    b394:	1000021e 	bne	r2,zero,b3a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b398:	00800044 	movi	r2,1
    b39c:	00000306 	br	b3ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    b3a0:	008000c4 	movi	r2,3
    b3a4:	1440082e 	bgeu	r2,r17,b3c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    b3a8:	0005883a 	mov	r2,zero
    b3ac:	dfc00417 	ldw	ra,16(sp)
    b3b0:	dcc00317 	ldw	r19,12(sp)
    b3b4:	dc800217 	ldw	r18,8(sp)
    b3b8:	dc400117 	ldw	r17,4(sp)
    b3bc:	dc000017 	ldw	r16,0(sp)
    b3c0:	dec00504 	addi	sp,sp,20
    b3c4:	f800283a 	ret
    b3c8:	80800017 	ldw	r2,0(r16)
    b3cc:	980d883a 	mov	r6,r19
    b3d0:	900b883a 	mov	r5,r18
    b3d4:	10800517 	ldw	r2,20(r2)
    b3d8:	8009883a 	mov	r4,r16
    b3dc:	dfc00417 	ldw	ra,16(sp)
    b3e0:	dcc00317 	ldw	r19,12(sp)
    b3e4:	dc800217 	ldw	r18,8(sp)
    b3e8:	dc400117 	ldw	r17,4(sp)
    b3ec:	dc000017 	ldw	r16,0(sp)
    b3f0:	dec00504 	addi	sp,sp,20
    b3f4:	1000683a 	jmp	r2
    b3f8:	00800044 	movi	r2,1
    b3fc:	f800283a 	ret

0000b400 <_ZN10__cxxabiv111__terminateEPFvvE>:
    b400:	00800074 	movhi	r2,1
    b404:	deffef04 	addi	sp,sp,-68
    b408:	10af5a04 	addi	r2,r2,-17048
    b40c:	d8800615 	stw	r2,24(sp)
    b410:	008000b4 	movhi	r2,2
    b414:	108d3d04 	addi	r2,r2,13556
    b418:	d8800715 	stw	r2,28(sp)
    b41c:	00800074 	movhi	r2,1
    b420:	10ad1604 	addi	r2,r2,-19368
    b424:	d9000d15 	stw	r4,52(sp)
    b428:	d809883a 	mov	r4,sp
    b42c:	d8800915 	stw	r2,36(sp)
    b430:	dfc01015 	stw	ra,64(sp)
    b434:	df000f15 	stw	fp,60(sp)
    b438:	dec00815 	stw	sp,32(sp)
    b43c:	dec00a15 	stw	sp,40(sp)
    b440:	000da700 	call	da70 <_Unwind_SjLj_Register>
    b444:	00800044 	movi	r2,1
    b448:	d8800115 	stw	r2,4(sp)
    b44c:	d8800d17 	ldw	r2,52(sp)
    b450:	103ee83a 	callr	r2
    b454:	000ddec0 	call	ddec <abort>
    b458:	d8c00217 	ldw	r3,8(sp)
    b45c:	d8800117 	ldw	r2,4(sp)
    b460:	d8c00d15 	stw	r3,52(sp)
    b464:	d8c00317 	ldw	r3,12(sp)
    b468:	d8c00e15 	stw	r3,56(sp)
    b46c:	10000b26 	beq	r2,zero,b49c <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    b470:	10bfffc4 	addi	r2,r2,-1
    b474:	10000126 	beq	r2,zero,b47c <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    b478:	003b68fa 	trap	3
    b47c:	d8000115 	stw	zero,4(sp)
    b480:	000c7ac0 	call	c7ac <__cxa_end_catch>
    b484:	d8c00e17 	ldw	r3,56(sp)
    b488:	00bfffc4 	movi	r2,-1
    b48c:	18800826 	beq	r3,r2,b4b0 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    b490:	d9000d17 	ldw	r4,52(sp)
    b494:	d8800115 	stw	r2,4(sp)
    b498:	000dc6c0 	call	dc6c <_Unwind_SjLj_Resume>
    b49c:	d9000d17 	ldw	r4,52(sp)
    b4a0:	000c6f80 	call	c6f8 <__cxa_begin_catch>
    b4a4:	00800084 	movi	r2,2
    b4a8:	d8800115 	stw	r2,4(sp)
    b4ac:	000ddec0 	call	ddec <abort>
    b4b0:	d8800e17 	ldw	r2,56(sp)
    b4b4:	d9000d17 	ldw	r4,52(sp)
    b4b8:	d8800115 	stw	r2,4(sp)
    b4bc:	000c3680 	call	c368 <__cxa_call_unexpected>

0000b4c0 <_ZSt9terminatev>:
    b4c0:	008000f4 	movhi	r2,3
    b4c4:	10b60204 	addi	r2,r2,-10232
    b4c8:	11000017 	ldw	r4,0(r2)
    b4cc:	deffff04 	addi	sp,sp,-4
    b4d0:	dfc00015 	stw	ra,0(sp)
    b4d4:	000b4000 	call	b400 <_ZN10__cxxabiv111__terminateEPFvvE>

0000b4d8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    b4d8:	deffff04 	addi	sp,sp,-4
    b4dc:	dfc00015 	stw	ra,0(sp)
    b4e0:	203ee83a 	callr	r4
    b4e4:	000b4c00 	call	b4c0 <_ZSt9terminatev>

0000b4e8 <_ZSt10unexpectedv>:
    b4e8:	008000f4 	movhi	r2,3
    b4ec:	10b60104 	addi	r2,r2,-10236
    b4f0:	11000017 	ldw	r4,0(r2)
    b4f4:	deffff04 	addi	sp,sp,-4
    b4f8:	dfc00015 	stw	ra,0(sp)
    b4fc:	000b4d80 	call	b4d8 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000b500 <_ZSt13set_terminatePFvvE>:
    b500:	00c000f4 	movhi	r3,3
    b504:	18f60204 	addi	r3,r3,-10232
    b508:	18800017 	ldw	r2,0(r3)
    b50c:	19000015 	stw	r4,0(r3)
    b510:	f800283a 	ret

0000b514 <_ZSt13get_terminatev>:
    b514:	008000f4 	movhi	r2,3
    b518:	10b60204 	addi	r2,r2,-10232
    b51c:	10800017 	ldw	r2,0(r2)
    b520:	f800283a 	ret

0000b524 <_ZSt14set_unexpectedPFvvE>:
    b524:	00c000f4 	movhi	r3,3
    b528:	18f60104 	addi	r3,r3,-10236
    b52c:	18800017 	ldw	r2,0(r3)
    b530:	19000015 	stw	r4,0(r3)
    b534:	f800283a 	ret

0000b538 <_ZSt14get_unexpectedv>:
    b538:	008000f4 	movhi	r2,3
    b53c:	10b60104 	addi	r2,r2,-10236
    b540:	10800017 	ldw	r2,0(r2)
    b544:	f800283a 	ret

0000b548 <_ZL21size_of_encoded_valueh>:
    b548:	deffff04 	addi	sp,sp,-4
    b54c:	dfc00015 	stw	ra,0(sp)
    b550:	20c03fcc 	andi	r3,r4,255
    b554:	00803fc4 	movi	r2,255
    b558:	18802026 	beq	r3,r2,b5dc <_ZL21size_of_encoded_valueh+0x94>
    b55c:	210001cc 	andi	r4,r4,7
    b560:	00800144 	movi	r2,5
    b564:	11001c36 	bltu	r2,r4,b5d8 <_ZL21size_of_encoded_valueh+0x90>
    b568:	200890ba 	slli	r4,r4,2
    b56c:	00800074 	movhi	r2,1
    b570:	10ad6004 	addi	r2,r2,-19072
    b574:	2089883a 	add	r4,r4,r2
    b578:	20800017 	ldw	r2,0(r4)
    b57c:	1000683a 	jmp	r2
    b580:	0000b598 	cmpnei	zero,zero,726
    b584:	0000b5d8 	cmpnei	zero,zero,727
    b588:	0000b5a8 	cmpgeui	zero,zero,726
    b58c:	0000b598 	cmpnei	zero,zero,726
    b590:	0000b5c8 	cmpgei	zero,zero,727
    b594:	0000b5b8 	rdprs	zero,zero,726
    b598:	00800104 	movi	r2,4
    b59c:	dfc00017 	ldw	ra,0(sp)
    b5a0:	dec00104 	addi	sp,sp,4
    b5a4:	f800283a 	ret
    b5a8:	00800084 	movi	r2,2
    b5ac:	dfc00017 	ldw	ra,0(sp)
    b5b0:	dec00104 	addi	sp,sp,4
    b5b4:	f800283a 	ret
    b5b8:	00800044 	movi	r2,1
    b5bc:	dfc00017 	ldw	ra,0(sp)
    b5c0:	dec00104 	addi	sp,sp,4
    b5c4:	f800283a 	ret
    b5c8:	00800204 	movi	r2,8
    b5cc:	dfc00017 	ldw	ra,0(sp)
    b5d0:	dec00104 	addi	sp,sp,4
    b5d4:	f800283a 	ret
    b5d8:	000ddec0 	call	ddec <abort>
    b5dc:	0005883a 	mov	r2,zero
    b5e0:	dfc00017 	ldw	ra,0(sp)
    b5e4:	dec00104 	addi	sp,sp,4
    b5e8:	f800283a 	ret

0000b5ec <_ZL28read_encoded_value_with_basehjPKhPj>:
    b5ec:	deffff04 	addi	sp,sp,-4
    b5f0:	dfc00015 	stw	ra,0(sp)
    b5f4:	20c03fcc 	andi	r3,r4,255
    b5f8:	00801404 	movi	r2,80
    b5fc:	18807326 	beq	r3,r2,b7cc <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    b600:	20c003cc 	andi	r3,r4,15
    b604:	00800304 	movi	r2,12
    b608:	10c06f36 	bltu	r2,r3,b7c8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    b60c:	180690ba 	slli	r3,r3,2
    b610:	02000074 	movhi	r8,1
    b614:	422d8904 	addi	r8,r8,-18908
    b618:	1a07883a 	add	r3,r3,r8
    b61c:	18800017 	ldw	r2,0(r3)
    b620:	1000683a 	jmp	r2
    b624:	0000b658 	cmpnei	zero,zero,729
    b628:	0000b774 	movhi	zero,733
    b62c:	0000b7b0 	cmpltui	zero,zero,734
    b630:	0000b658 	cmpnei	zero,zero,729
    b634:	0000b6bc 	xorhi	zero,zero,730
    b638:	0000b710 	cmplti	zero,zero,732
    b63c:	0000b7c8 	cmpgei	zero,zero,735
    b640:	0000b7c8 	cmpgei	zero,zero,735
    b644:	0000b7c8 	cmpgei	zero,zero,735
    b648:	0000b71c 	xori	zero,zero,732
    b64c:	0000b6ec 	andhi	zero,zero,731
    b650:	0000b658 	cmpnei	zero,zero,729
    b654:	0000b6bc 	xorhi	zero,zero,730
    b658:	30800043 	ldbu	r2,1(r6)
    b65c:	30c00083 	ldbu	r3,2(r6)
    b660:	324000c3 	ldbu	r9,3(r6)
    b664:	32000003 	ldbu	r8,0(r6)
    b668:	1004923a 	slli	r2,r2,8
    b66c:	1806943a 	slli	r3,r3,16
    b670:	4812963a 	slli	r9,r9,24
    b674:	1204b03a 	or	r2,r2,r8
    b678:	1884b03a 	or	r2,r3,r2
    b67c:	4886b03a 	or	r3,r9,r2
    b680:	30800104 	addi	r2,r6,4
    b684:	18000926 	beq	r3,zero,b6ac <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b688:	22001c0c 	andi	r8,r4,112
    b68c:	02400404 	movi	r9,16
    b690:	42405726 	beq	r8,r9,b7f0 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    b694:	21003fcc 	andi	r4,r4,255
    b698:	2100201c 	xori	r4,r4,128
    b69c:	213fe004 	addi	r4,r4,-128
    b6a0:	1947883a 	add	r3,r3,r5
    b6a4:	2000010e 	bge	r4,zero,b6ac <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b6a8:	18c00017 	ldw	r3,0(r3)
    b6ac:	38c00015 	stw	r3,0(r7)
    b6b0:	dfc00017 	ldw	ra,0(sp)
    b6b4:	dec00104 	addi	sp,sp,4
    b6b8:	f800283a 	ret
    b6bc:	30800043 	ldbu	r2,1(r6)
    b6c0:	30c00083 	ldbu	r3,2(r6)
    b6c4:	324000c3 	ldbu	r9,3(r6)
    b6c8:	32000003 	ldbu	r8,0(r6)
    b6cc:	1004923a 	slli	r2,r2,8
    b6d0:	1806943a 	slli	r3,r3,16
    b6d4:	4812963a 	slli	r9,r9,24
    b6d8:	1204b03a 	or	r2,r2,r8
    b6dc:	1884b03a 	or	r2,r3,r2
    b6e0:	4886b03a 	or	r3,r9,r2
    b6e4:	30800204 	addi	r2,r6,8
    b6e8:	003fe606 	br	b684 <__alt_data_end+0xfc00b684>
    b6ec:	30c00043 	ldbu	r3,1(r6)
    b6f0:	32000003 	ldbu	r8,0(r6)
    b6f4:	30800084 	addi	r2,r6,2
    b6f8:	1806923a 	slli	r3,r3,8
    b6fc:	1a06b03a 	or	r3,r3,r8
    b700:	18ffffcc 	andi	r3,r3,65535
    b704:	18e0001c 	xori	r3,r3,32768
    b708:	18e00004 	addi	r3,r3,-32768
    b70c:	003fdd06 	br	b684 <__alt_data_end+0xfc00b684>
    b710:	30c00003 	ldbu	r3,0(r6)
    b714:	30800044 	addi	r2,r6,1
    b718:	003fda06 	br	b684 <__alt_data_end+0xfc00b684>
    b71c:	3017883a 	mov	r11,r6
    b720:	0007883a 	mov	r3,zero
    b724:	0013883a 	mov	r9,zero
    b728:	5a800003 	ldbu	r10,0(r11)
    b72c:	58800044 	addi	r2,r11,1
    b730:	1017883a 	mov	r11,r2
    b734:	52001fcc 	andi	r8,r10,127
    b738:	4250983a 	sll	r8,r8,r9
    b73c:	53003fcc 	andi	r12,r10,255
    b740:	6300201c 	xori	r12,r12,128
    b744:	633fe004 	addi	r12,r12,-128
    b748:	1a06b03a 	or	r3,r3,r8
    b74c:	4a4001c4 	addi	r9,r9,7
    b750:	603ff516 	blt	r12,zero,b728 <__alt_data_end+0xfc00b728>
    b754:	020007c4 	movi	r8,31
    b758:	427fca36 	bltu	r8,r9,b684 <__alt_data_end+0xfc00b684>
    b75c:	5280100c 	andi	r10,r10,64
    b760:	503fc826 	beq	r10,zero,b684 <__alt_data_end+0xfc00b684>
    b764:	023fffc4 	movi	r8,-1
    b768:	4252983a 	sll	r9,r8,r9
    b76c:	1a46b03a 	or	r3,r3,r9
    b770:	003fc506 	br	b688 <__alt_data_end+0xfc00b688>
    b774:	3017883a 	mov	r11,r6
    b778:	0007883a 	mov	r3,zero
    b77c:	0015883a 	mov	r10,zero
    b780:	5a000003 	ldbu	r8,0(r11)
    b784:	58800044 	addi	r2,r11,1
    b788:	1017883a 	mov	r11,r2
    b78c:	42401fcc 	andi	r9,r8,127
    b790:	4a92983a 	sll	r9,r9,r10
    b794:	42003fcc 	andi	r8,r8,255
    b798:	4200201c 	xori	r8,r8,128
    b79c:	423fe004 	addi	r8,r8,-128
    b7a0:	1a46b03a 	or	r3,r3,r9
    b7a4:	528001c4 	addi	r10,r10,7
    b7a8:	403ff516 	blt	r8,zero,b780 <__alt_data_end+0xfc00b780>
    b7ac:	003fb506 	br	b684 <__alt_data_end+0xfc00b684>
    b7b0:	30c00043 	ldbu	r3,1(r6)
    b7b4:	32000003 	ldbu	r8,0(r6)
    b7b8:	30800084 	addi	r2,r6,2
    b7bc:	1806923a 	slli	r3,r3,8
    b7c0:	1a06b03a 	or	r3,r3,r8
    b7c4:	003faf06 	br	b684 <__alt_data_end+0xfc00b684>
    b7c8:	000ddec0 	call	ddec <abort>
    b7cc:	308000c4 	addi	r2,r6,3
    b7d0:	00ffff04 	movi	r3,-4
    b7d4:	10c4703a 	and	r2,r2,r3
    b7d8:	10c00017 	ldw	r3,0(r2)
    b7dc:	10800104 	addi	r2,r2,4
    b7e0:	38c00015 	stw	r3,0(r7)
    b7e4:	dfc00017 	ldw	ra,0(sp)
    b7e8:	dec00104 	addi	sp,sp,4
    b7ec:	f800283a 	ret
    b7f0:	300b883a 	mov	r5,r6
    b7f4:	003fa706 	br	b694 <__alt_data_end+0xfc00b694>

0000b7f8 <_ZL15get_ttype_entryP16lsda_header_infom>:
    b7f8:	defffc04 	addi	sp,sp,-16
    b7fc:	dfc00315 	stw	ra,12(sp)
    b800:	dc000215 	stw	r16,8(sp)
    b804:	2021883a 	mov	r16,r4
    b808:	21000503 	ldbu	r4,20(r4)
    b80c:	d9400115 	stw	r5,4(sp)
    b810:	000b5480 	call	b548 <_ZL21size_of_encoded_valueh>
    b814:	d9400117 	ldw	r5,4(sp)
    b818:	1009883a 	mov	r4,r2
    b81c:	000ce000 	call	ce00 <__mulsi3>
    b820:	81800317 	ldw	r6,12(r16)
    b824:	81400217 	ldw	r5,8(r16)
    b828:	81000503 	ldbu	r4,20(r16)
    b82c:	d80f883a 	mov	r7,sp
    b830:	308dc83a 	sub	r6,r6,r2
    b834:	000b5ec0 	call	b5ec <_ZL28read_encoded_value_with_basehjPKhPj>
    b838:	d8800017 	ldw	r2,0(sp)
    b83c:	dfc00317 	ldw	ra,12(sp)
    b840:	dc000217 	ldw	r16,8(sp)
    b844:	dec00404 	addi	sp,sp,16
    b848:	f800283a 	ret

0000b84c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    b84c:	deffff04 	addi	sp,sp,-4
    b850:	dfc00015 	stw	ra,0(sp)
    b854:	20c03fcc 	andi	r3,r4,255
    b858:	00803fc4 	movi	r2,255
    b85c:	18800e26 	beq	r3,r2,b898 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b860:	20801c0c 	andi	r2,r4,112
    b864:	00c00804 	movi	r3,32
    b868:	10c01726 	beq	r2,r3,b8c8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    b86c:	18800e2e 	bgeu	r3,r2,b8a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    b870:	00c01004 	movi	r3,64
    b874:	10c01026 	beq	r2,r3,b8b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    b878:	00c01404 	movi	r3,80
    b87c:	10c00626 	beq	r2,r3,b898 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b880:	00c00c04 	movi	r3,48
    b884:	10c00b1e 	bne	r2,r3,b8b4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    b888:	2809883a 	mov	r4,r5
    b88c:	dfc00017 	ldw	ra,0(sp)
    b890:	dec00104 	addi	sp,sp,4
    b894:	000db481 	jmpi	db48 <_Unwind_GetDataRelBase>
    b898:	0005883a 	mov	r2,zero
    b89c:	dfc00017 	ldw	ra,0(sp)
    b8a0:	dec00104 	addi	sp,sp,4
    b8a4:	f800283a 	ret
    b8a8:	103ffb26 	beq	r2,zero,b898 <__alt_data_end+0xfc00b898>
    b8ac:	00c00404 	movi	r3,16
    b8b0:	10fff926 	beq	r2,r3,b898 <__alt_data_end+0xfc00b898>
    b8b4:	000ddec0 	call	ddec <abort>
    b8b8:	2809883a 	mov	r4,r5
    b8bc:	dfc00017 	ldw	ra,0(sp)
    b8c0:	dec00104 	addi	sp,sp,4
    b8c4:	000db381 	jmpi	db38 <_Unwind_GetRegionStart>
    b8c8:	2809883a 	mov	r4,r5
    b8cc:	dfc00017 	ldw	ra,0(sp)
    b8d0:	dec00104 	addi	sp,sp,4
    b8d4:	000db501 	jmpi	db50 <_Unwind_GetTextRelBase>

0000b8d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    b8d8:	defffb04 	addi	sp,sp,-20
    b8dc:	dcc00315 	stw	r19,12(sp)
    b8e0:	dc400115 	stw	r17,4(sp)
    b8e4:	dc000015 	stw	r16,0(sp)
    b8e8:	dfc00415 	stw	ra,16(sp)
    b8ec:	dc800215 	stw	r18,8(sp)
    b8f0:	2027883a 	mov	r19,r4
    b8f4:	2821883a 	mov	r16,r5
    b8f8:	3023883a 	mov	r17,r6
    b8fc:	20003f26 	beq	r4,zero,b9fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    b900:	000db380 	call	db38 <_Unwind_GetRegionStart>
    b904:	88800015 	stw	r2,0(r17)
    b908:	84800003 	ldbu	r18,0(r16)
    b90c:	00c03fc4 	movi	r3,255
    b910:	84000044 	addi	r16,r16,1
    b914:	90c03726 	beq	r18,r3,b9f4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    b918:	980b883a 	mov	r5,r19
    b91c:	9009883a 	mov	r4,r18
    b920:	000b84c0 	call	b84c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b924:	800d883a 	mov	r6,r16
    b928:	89c00104 	addi	r7,r17,4
    b92c:	100b883a 	mov	r5,r2
    b930:	9009883a 	mov	r4,r18
    b934:	000b5ec0 	call	b5ec <_ZL28read_encoded_value_with_basehjPKhPj>
    b938:	1021883a 	mov	r16,r2
    b93c:	80c00003 	ldbu	r3,0(r16)
    b940:	01003fc4 	movi	r4,255
    b944:	80800044 	addi	r2,r16,1
    b948:	88c00505 	stb	r3,20(r17)
    b94c:	18c03fcc 	andi	r3,r3,255
    b950:	19002c26 	beq	r3,r4,ba04 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    b954:	100f883a 	mov	r7,r2
    b958:	000d883a 	mov	r6,zero
    b95c:	000b883a 	mov	r5,zero
    b960:	38c00003 	ldbu	r3,0(r7)
    b964:	10800044 	addi	r2,r2,1
    b968:	100f883a 	mov	r7,r2
    b96c:	19001fcc 	andi	r4,r3,127
    b970:	2148983a 	sll	r4,r4,r5
    b974:	18c03fcc 	andi	r3,r3,255
    b978:	18c0201c 	xori	r3,r3,128
    b97c:	18ffe004 	addi	r3,r3,-128
    b980:	310cb03a 	or	r6,r6,r4
    b984:	294001c4 	addi	r5,r5,7
    b988:	183ff516 	blt	r3,zero,b960 <__alt_data_end+0xfc00b960>
    b98c:	118d883a 	add	r6,r2,r6
    b990:	89800315 	stw	r6,12(r17)
    b994:	10c00003 	ldbu	r3,0(r2)
    b998:	000d883a 	mov	r6,zero
    b99c:	10800044 	addi	r2,r2,1
    b9a0:	88c00545 	stb	r3,21(r17)
    b9a4:	000b883a 	mov	r5,zero
    b9a8:	10c00003 	ldbu	r3,0(r2)
    b9ac:	10800044 	addi	r2,r2,1
    b9b0:	19001fcc 	andi	r4,r3,127
    b9b4:	2148983a 	sll	r4,r4,r5
    b9b8:	18c03fcc 	andi	r3,r3,255
    b9bc:	18c0201c 	xori	r3,r3,128
    b9c0:	18ffe004 	addi	r3,r3,-128
    b9c4:	310cb03a 	or	r6,r6,r4
    b9c8:	294001c4 	addi	r5,r5,7
    b9cc:	183ff616 	blt	r3,zero,b9a8 <__alt_data_end+0xfc00b9a8>
    b9d0:	118d883a 	add	r6,r2,r6
    b9d4:	89800415 	stw	r6,16(r17)
    b9d8:	dfc00417 	ldw	ra,16(sp)
    b9dc:	dcc00317 	ldw	r19,12(sp)
    b9e0:	dc800217 	ldw	r18,8(sp)
    b9e4:	dc400117 	ldw	r17,4(sp)
    b9e8:	dc000017 	ldw	r16,0(sp)
    b9ec:	dec00504 	addi	sp,sp,20
    b9f0:	f800283a 	ret
    b9f4:	88800115 	stw	r2,4(r17)
    b9f8:	003fd006 	br	b93c <__alt_data_end+0xfc00b93c>
    b9fc:	0005883a 	mov	r2,zero
    ba00:	003fc006 	br	b904 <__alt_data_end+0xfc00b904>
    ba04:	88000315 	stw	zero,12(r17)
    ba08:	003fe206 	br	b994 <__alt_data_end+0xfc00b994>

0000ba0c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    ba0c:	28800017 	ldw	r2,0(r5)
    ba10:	30c00017 	ldw	r3,0(r6)
    ba14:	defffb04 	addi	sp,sp,-20
    ba18:	10800217 	ldw	r2,8(r2)
    ba1c:	dc400315 	stw	r17,12(sp)
    ba20:	dc000215 	stw	r16,8(sp)
    ba24:	d9400115 	stw	r5,4(sp)
    ba28:	dfc00415 	stw	ra,16(sp)
    ba2c:	2021883a 	mov	r16,r4
    ba30:	d8c00015 	stw	r3,0(sp)
    ba34:	2809883a 	mov	r4,r5
    ba38:	3023883a 	mov	r17,r6
    ba3c:	103ee83a 	callr	r2
    ba40:	10803fcc 	andi	r2,r2,255
    ba44:	d9400117 	ldw	r5,4(sp)
    ba48:	10000326 	beq	r2,zero,ba58 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    ba4c:	d8800017 	ldw	r2,0(sp)
    ba50:	10800017 	ldw	r2,0(r2)
    ba54:	d8800015 	stw	r2,0(sp)
    ba58:	80800017 	ldw	r2,0(r16)
    ba5c:	01c00044 	movi	r7,1
    ba60:	d80d883a 	mov	r6,sp
    ba64:	10800417 	ldw	r2,16(r2)
    ba68:	8009883a 	mov	r4,r16
    ba6c:	103ee83a 	callr	r2
    ba70:	10c03fcc 	andi	r3,r2,255
    ba74:	18000226 	beq	r3,zero,ba80 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    ba78:	d8c00017 	ldw	r3,0(sp)
    ba7c:	88c00015 	stw	r3,0(r17)
    ba80:	dfc00417 	ldw	ra,16(sp)
    ba84:	dc400317 	ldw	r17,12(sp)
    ba88:	dc000217 	ldw	r16,8(sp)
    ba8c:	dec00504 	addi	sp,sp,20
    ba90:	f800283a 	ret

0000ba94 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    ba94:	defff304 	addi	sp,sp,-52
    ba98:	dc800615 	stw	r18,24(sp)
    ba9c:	3825d23a 	srai	r18,r7,8
    baa0:	dd000815 	stw	r20,32(sp)
    baa4:	dcc00715 	stw	r19,28(sp)
    baa8:	dfc00c15 	stw	ra,48(sp)
    baac:	ddc00b15 	stw	r23,44(sp)
    bab0:	dd800a15 	stw	r22,40(sp)
    bab4:	dd400915 	stw	r21,36(sp)
    bab8:	dc400515 	stw	r17,20(sp)
    babc:	dc000415 	stw	r16,16(sp)
    bac0:	d9400215 	stw	r5,8(sp)
    bac4:	3827883a 	mov	r19,r7
    bac8:	2029883a 	mov	r20,r4
    bacc:	9000010e 	bge	r18,zero,bad4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    bad0:	04a5c83a 	sub	r18,zero,r18
    bad4:	000b883a 	mov	r5,zero
    bad8:	01000144 	movi	r4,5
    badc:	d9800315 	stw	r6,12(sp)
    bae0:	000b84c0 	call	b84c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bae4:	d9800317 	ldw	r6,12(sp)
    bae8:	d9c00104 	addi	r7,sp,4
    baec:	100b883a 	mov	r5,r2
    baf0:	01000144 	movi	r4,5
    baf4:	000b5ec0 	call	b5ec <_ZL28read_encoded_value_with_basehjPKhPj>
    baf8:	017ffe44 	movi	r5,-7
    bafc:	1009883a 	mov	r4,r2
    bb00:	1021883a 	mov	r16,r2
    bb04:	000ce000 	call	ce00 <__mulsi3>
    bb08:	102d883a 	mov	r22,r2
    bb0c:	0023883a 	mov	r17,zero
    bb10:	85400003 	ldbu	r21,0(r16)
    bb14:	8009883a 	mov	r4,r16
    bb18:	014001c4 	movi	r5,7
    bb1c:	000ce000 	call	ce00 <__mulsi3>
    bb20:	a8c01fcc 	andi	r3,r21,127
    bb24:	1585883a 	add	r2,r2,r22
    bb28:	1886983a 	sll	r3,r3,r2
    bb2c:	ad403fcc 	andi	r21,r21,255
    bb30:	ad40201c 	xori	r21,r21,128
    bb34:	ad7fe004 	addi	r21,r21,-128
    bb38:	84000044 	addi	r16,r16,1
    bb3c:	88e2b03a 	or	r17,r17,r3
    bb40:	a83ff316 	blt	r21,zero,bb10 <__alt_data_end+0xfc00bb10>
    bb44:	8461883a 	add	r16,r16,r17
    bb48:	017ffe44 	movi	r5,-7
    bb4c:	8009883a 	mov	r4,r16
    bb50:	000ce000 	call	ce00 <__mulsi3>
    bb54:	102d883a 	mov	r22,r2
    bb58:	002b883a 	mov	r21,zero
    bb5c:	84400003 	ldbu	r17,0(r16)
    bb60:	8009883a 	mov	r4,r16
    bb64:	014001c4 	movi	r5,7
    bb68:	000ce000 	call	ce00 <__mulsi3>
    bb6c:	88c01fcc 	andi	r3,r17,127
    bb70:	1585883a 	add	r2,r2,r22
    bb74:	1886983a 	sll	r3,r3,r2
    bb78:	8c403fcc 	andi	r17,r17,255
    bb7c:	8c40201c 	xori	r17,r17,128
    bb80:	8c7fe004 	addi	r17,r17,-128
    bb84:	84000044 	addi	r16,r16,1
    bb88:	a8eab03a 	or	r21,r21,r3
    bb8c:	883ff316 	blt	r17,zero,bb5c <__alt_data_end+0xfc00bb5c>
    bb90:	94403fcc 	andi	r17,r18,255
    bb94:	8c7fffc4 	addi	r17,r17,-1
    bb98:	8463883a 	add	r17,r16,r17
    bb9c:	ad4000c4 	addi	r21,r21,3
    bba0:	00bfff04 	movi	r2,-4
    bba4:	ac21883a 	add	r16,r21,r16
    bba8:	017ffe44 	movi	r5,-7
    bbac:	8809883a 	mov	r4,r17
    bbb0:	80a0703a 	and	r16,r16,r2
    bbb4:	000ce000 	call	ce00 <__mulsi3>
    bbb8:	0025883a 	mov	r18,zero
    bbbc:	102f883a 	mov	r23,r2
    bbc0:	8d800003 	ldbu	r22,0(r17)
    bbc4:	8809883a 	mov	r4,r17
    bbc8:	014001c4 	movi	r5,7
    bbcc:	000ce000 	call	ce00 <__mulsi3>
    bbd0:	b0c01fcc 	andi	r3,r22,127
    bbd4:	15c5883a 	add	r2,r2,r23
    bbd8:	1886983a 	sll	r3,r3,r2
    bbdc:	b5803fcc 	andi	r22,r22,255
    bbe0:	b580201c 	xori	r22,r22,128
    bbe4:	8d400044 	addi	r21,r17,1
    bbe8:	b5bfe004 	addi	r22,r22,-128
    bbec:	90e4b03a 	or	r18,r18,r3
    bbf0:	a823883a 	mov	r17,r21
    bbf4:	b03ff216 	blt	r22,zero,bbc0 <__alt_data_end+0xfc00bbc0>
    bbf8:	9cc03fcc 	andi	r19,r19,255
    bbfc:	90002426 	beq	r18,zero,bc90 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    bc00:	9809883a 	mov	r4,r19
    bc04:	000b5480 	call	b548 <_ZL21size_of_encoded_valueh>
    bc08:	100b883a 	mov	r5,r2
    bc0c:	913fffc4 	addi	r4,r18,-1
    bc10:	000ce000 	call	ce00 <__mulsi3>
    bc14:	d9400d17 	ldw	r5,52(sp)
    bc18:	d80f883a 	mov	r7,sp
    bc1c:	9809883a 	mov	r4,r19
    bc20:	140d883a 	add	r6,r2,r16
    bc24:	000b5ec0 	call	b5ec <_ZL28read_encoded_value_with_basehjPKhPj>
    bc28:	d9000017 	ldw	r4,0(sp)
    bc2c:	d9800204 	addi	r6,sp,8
    bc30:	a00b883a 	mov	r5,r20
    bc34:	000ba0c0 	call	ba0c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bc38:	10c03fcc 	andi	r3,r2,255
    bc3c:	1800151e 	bne	r3,zero,bc94 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    bc40:	a809883a 	mov	r4,r21
    bc44:	017ffe44 	movi	r5,-7
    bc48:	000ce000 	call	ce00 <__mulsi3>
    bc4c:	102d883a 	mov	r22,r2
    bc50:	a809883a 	mov	r4,r21
    bc54:	0025883a 	mov	r18,zero
    bc58:	24400003 	ldbu	r17,0(r4)
    bc5c:	014001c4 	movi	r5,7
    bc60:	000ce000 	call	ce00 <__mulsi3>
    bc64:	88c01fcc 	andi	r3,r17,127
    bc68:	1585883a 	add	r2,r2,r22
    bc6c:	1886983a 	sll	r3,r3,r2
    bc70:	8c403fcc 	andi	r17,r17,255
    bc74:	8c40201c 	xori	r17,r17,128
    bc78:	ad400044 	addi	r21,r21,1
    bc7c:	8c7fe004 	addi	r17,r17,-128
    bc80:	90e4b03a 	or	r18,r18,r3
    bc84:	a809883a 	mov	r4,r21
    bc88:	883ff316 	blt	r17,zero,bc58 <__alt_data_end+0xfc00bc58>
    bc8c:	003fdb06 	br	bbfc <__alt_data_end+0xfc00bbfc>
    bc90:	0005883a 	mov	r2,zero
    bc94:	dfc00c17 	ldw	ra,48(sp)
    bc98:	ddc00b17 	ldw	r23,44(sp)
    bc9c:	dd800a17 	ldw	r22,40(sp)
    bca0:	dd400917 	ldw	r21,36(sp)
    bca4:	dd000817 	ldw	r20,32(sp)
    bca8:	dcc00717 	ldw	r19,28(sp)
    bcac:	dc800617 	ldw	r18,24(sp)
    bcb0:	dc400517 	ldw	r17,20(sp)
    bcb4:	dc000417 	ldw	r16,16(sp)
    bcb8:	dec00d04 	addi	sp,sp,52
    bcbc:	f800283a 	ret

0000bcc0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    bcc0:	defffb04 	addi	sp,sp,-20
    bcc4:	dc000115 	stw	r16,4(sp)
    bcc8:	24000317 	ldw	r16,12(r4)
    bccc:	01ce303a 	nor	r7,zero,r7
    bcd0:	dc800315 	stw	r18,12(sp)
    bcd4:	dc400215 	stw	r17,8(sp)
    bcd8:	dfc00415 	stw	ra,16(sp)
    bcdc:	2023883a 	mov	r17,r4
    bce0:	2825883a 	mov	r18,r5
    bce4:	d9800015 	stw	r6,0(sp)
    bce8:	81e1883a 	add	r16,r16,r7
    bcec:	800d883a 	mov	r6,r16
    bcf0:	000b883a 	mov	r5,zero
    bcf4:	0009883a 	mov	r4,zero
    bcf8:	30800003 	ldbu	r2,0(r6)
    bcfc:	84000044 	addi	r16,r16,1
    bd00:	800d883a 	mov	r6,r16
    bd04:	10c01fcc 	andi	r3,r2,127
    bd08:	1906983a 	sll	r3,r3,r4
    bd0c:	10803fcc 	andi	r2,r2,255
    bd10:	1080201c 	xori	r2,r2,128
    bd14:	10bfe004 	addi	r2,r2,-128
    bd18:	28cab03a 	or	r5,r5,r3
    bd1c:	210001c4 	addi	r4,r4,7
    bd20:	103ff516 	blt	r2,zero,bcf8 <__alt_data_end+0xfc00bcf8>
    bd24:	28000e26 	beq	r5,zero,bd60 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    bd28:	8809883a 	mov	r4,r17
    bd2c:	000b7f80 	call	b7f8 <_ZL15get_ttype_entryP16lsda_header_infom>
    bd30:	d80d883a 	mov	r6,sp
    bd34:	900b883a 	mov	r5,r18
    bd38:	1009883a 	mov	r4,r2
    bd3c:	000ba0c0 	call	ba0c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bd40:	10c03fcc 	andi	r3,r2,255
    bd44:	183fe926 	beq	r3,zero,bcec <__alt_data_end+0xfc00bcec>
    bd48:	dfc00417 	ldw	ra,16(sp)
    bd4c:	dc800317 	ldw	r18,12(sp)
    bd50:	dc400217 	ldw	r17,8(sp)
    bd54:	dc000117 	ldw	r16,4(sp)
    bd58:	dec00504 	addi	sp,sp,20
    bd5c:	f800283a 	ret
    bd60:	0005883a 	mov	r2,zero
    bd64:	003ff806 	br	bd48 <__alt_data_end+0xfc00bd48>

0000bd68 <__gxx_personality_sj0>:
    bd68:	00800074 	movhi	r2,1
    bd6c:	deffdd04 	addi	sp,sp,-140
    bd70:	10af5a04 	addi	r2,r2,-17048
    bd74:	d8800e15 	stw	r2,56(sp)
    bd78:	008000b4 	movhi	r2,2
    bd7c:	108d4304 	addi	r2,r2,13580
    bd80:	d8800f15 	stw	r2,60(sp)
    bd84:	00800074 	movhi	r2,1
    bd88:	10b0d004 	addi	r2,r2,-15552
    bd8c:	d9001515 	stw	r4,84(sp)
    bd90:	d9000804 	addi	r4,sp,32
    bd94:	d8801115 	stw	r2,68(sp)
    bd98:	dfc02215 	stw	ra,136(sp)
    bd9c:	df002115 	stw	fp,132(sp)
    bda0:	dec01015 	stw	sp,64(sp)
    bda4:	dec01215 	stw	sp,72(sp)
    bda8:	d9401915 	stw	r5,100(sp)
    bdac:	d9801615 	stw	r6,88(sp)
    bdb0:	d9c01715 	stw	r7,92(sp)
    bdb4:	000da700 	call	da70 <_Unwind_SjLj_Register>
    bdb8:	d8c01517 	ldw	r3,84(sp)
    bdbc:	d8000715 	stw	zero,28(sp)
    bdc0:	d8000615 	stw	zero,24(sp)
    bdc4:	00800044 	movi	r2,1
    bdc8:	18800926 	beq	r3,r2,bdf0 <__gxx_personality_sj0+0x88>
    bdcc:	01c000c4 	movi	r7,3
    bdd0:	d9c01515 	stw	r7,84(sp)
    bdd4:	d9000804 	addi	r4,sp,32
    bdd8:	000da880 	call	da88 <_Unwind_SjLj_Unregister>
    bddc:	d8801517 	ldw	r2,84(sp)
    bde0:	dfc02217 	ldw	ra,136(sp)
    bde4:	df002117 	ldw	fp,132(sp)
    bde8:	dec02304 	addi	sp,sp,140
    bdec:	f800283a 	ret
    bdf0:	d9001617 	ldw	r4,88(sp)
    bdf4:	00af3574 	movhi	r2,48341
    bdf8:	d9c01717 	ldw	r7,92(sp)
    bdfc:	10b54004 	addi	r2,r2,-11008
    be00:	00ee2cb4 	movhi	r3,47282
    be04:	2085883a 	add	r2,r4,r2
    be08:	18eaaf04 	addi	r3,r3,-21828
    be0c:	d8801b15 	stw	r2,108(sp)
    be10:	38c7883a 	add	r3,r7,r3
    be14:	1105803a 	cmpltu	r2,r2,r4
    be18:	10c7883a 	add	r3,r2,r3
    be1c:	d8c01c15 	stw	r3,112(sp)
    be20:	d8c01917 	ldw	r3,100(sp)
    be24:	00800184 	movi	r2,6
    be28:	18805426 	beq	r3,r2,bf7c <__gxx_personality_sj0+0x214>
    be2c:	d9002417 	ldw	r4,144(sp)
    be30:	00bfffc4 	movi	r2,-1
    be34:	d8800915 	stw	r2,36(sp)
    be38:	000db2c0 	call	db2c <_Unwind_GetLanguageSpecificData>
    be3c:	d8801a15 	stw	r2,104(sp)
    be40:	1000c926 	beq	r2,zero,c168 <__gxx_personality_sj0+0x400>
    be44:	d9002417 	ldw	r4,144(sp)
    be48:	d80d883a 	mov	r6,sp
    be4c:	100b883a 	mov	r5,r2
    be50:	000b8d80 	call	b8d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    be54:	d9402417 	ldw	r5,144(sp)
    be58:	d9000503 	ldbu	r4,20(sp)
    be5c:	d8801515 	stw	r2,84(sp)
    be60:	000b84c0 	call	b84c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    be64:	d9002417 	ldw	r4,144(sp)
    be68:	d9400604 	addi	r5,sp,24
    be6c:	d8800215 	stw	r2,8(sp)
    be70:	000dafc0 	call	dafc <_Unwind_GetIPInfo>
    be74:	d8c00617 	ldw	r3,24(sp)
    be78:	18006126 	beq	r3,zero,c000 <__gxx_personality_sj0+0x298>
    be7c:	1000ba16 	blt	r2,zero,c168 <__gxx_personality_sj0+0x400>
    be80:	10002f1e 	bne	r2,zero,bf40 <__gxx_personality_sj0+0x1d8>
    be84:	d8001515 	stw	zero,84(sp)
    be88:	d8001f15 	stw	zero,124(sp)
    be8c:	d8001815 	stw	zero,96(sp)
    be90:	00c00044 	movi	r3,1
    be94:	d9001917 	ldw	r4,100(sp)
    be98:	2080004c 	andi	r2,r4,1
    be9c:	1000b51e 	bne	r2,zero,c174 <__gxx_personality_sj0+0x40c>
    bea0:	d9001917 	ldw	r4,100(sp)
    bea4:	2080020c 	andi	r2,r4,8
    bea8:	1000b71e 	bne	r2,zero,c188 <__gxx_personality_sj0+0x420>
    beac:	d9c01c17 	ldw	r7,112(sp)
    beb0:	3800b826 	beq	r7,zero,c194 <__gxx_personality_sj0+0x42c>
    beb4:	00800044 	movi	r2,1
    beb8:	1880b526 	beq	r3,r2,c190 <__gxx_personality_sj0+0x428>
    bebc:	d9c01517 	ldw	r7,84(sp)
    bec0:	3800f516 	blt	r7,zero,c298 <__gxx_personality_sj0+0x530>
    bec4:	d9002417 	ldw	r4,144(sp)
    bec8:	d9802317 	ldw	r6,140(sp)
    becc:	00bfffc4 	movi	r2,-1
    bed0:	000b883a 	mov	r5,zero
    bed4:	d8800915 	stw	r2,36(sp)
    bed8:	000dad00 	call	dad0 <_Unwind_SetGR>
    bedc:	d9801517 	ldw	r6,84(sp)
    bee0:	d9002417 	ldw	r4,144(sp)
    bee4:	01400044 	movi	r5,1
    bee8:	000dad00 	call	dad0 <_Unwind_SetGR>
    beec:	d9002417 	ldw	r4,144(sp)
    bef0:	d9401f17 	ldw	r5,124(sp)
    bef4:	000db1c0 	call	db1c <_Unwind_SetIP>
    bef8:	010001c4 	movi	r4,7
    befc:	d9001515 	stw	r4,84(sp)
    bf00:	003fb406 	br	bdd4 <__alt_data_end+0xfc00bdd4>
    bf04:	000f883a 	mov	r7,zero
    bf08:	000d883a 	mov	r6,zero
    bf0c:	19000003 	ldbu	r4,0(r3)
    bf10:	18c00044 	addi	r3,r3,1
    bf14:	d8c01515 	stw	r3,84(sp)
    bf18:	21401fcc 	andi	r5,r4,127
    bf1c:	298a983a 	sll	r5,r5,r6
    bf20:	21003fcc 	andi	r4,r4,255
    bf24:	2100201c 	xori	r4,r4,128
    bf28:	213fe004 	addi	r4,r4,-128
    bf2c:	394eb03a 	or	r7,r7,r5
    bf30:	318001c4 	addi	r6,r6,7
    bf34:	203ff516 	blt	r4,zero,bf0c <__alt_data_end+0xfc00bf0c>
    bf38:	10bfffc4 	addi	r2,r2,-1
    bf3c:	10003226 	beq	r2,zero,c008 <__gxx_personality_sj0+0x2a0>
    bf40:	d9c01517 	ldw	r7,84(sp)
    bf44:	0011883a 	mov	r8,zero
    bf48:	000d883a 	mov	r6,zero
    bf4c:	39000003 	ldbu	r4,0(r7)
    bf50:	38c00044 	addi	r3,r7,1
    bf54:	180f883a 	mov	r7,r3
    bf58:	21401fcc 	andi	r5,r4,127
    bf5c:	298a983a 	sll	r5,r5,r6
    bf60:	21003fcc 	andi	r4,r4,255
    bf64:	2100201c 	xori	r4,r4,128
    bf68:	213fe004 	addi	r4,r4,-128
    bf6c:	4150b03a 	or	r8,r8,r5
    bf70:	318001c4 	addi	r6,r6,7
    bf74:	203ff516 	blt	r4,zero,bf4c <__alt_data_end+0xfc00bf4c>
    bf78:	003fe206 	br	bf04 <__alt_data_end+0xfc00bf04>
    bf7c:	d9001c17 	ldw	r4,112(sp)
    bf80:	203faa1e 	bne	r4,zero,be2c <__alt_data_end+0xfc00be2c>
    bf84:	d9c01517 	ldw	r7,84(sp)
    bf88:	d8801b17 	ldw	r2,108(sp)
    bf8c:	38bfa736 	bltu	r7,r2,be2c <__alt_data_end+0xfc00be2c>
    bf90:	d8c02317 	ldw	r3,140(sp)
    bf94:	18fffe17 	ldw	r3,-8(r3)
    bf98:	d8c01f15 	stw	r3,124(sp)
    bf9c:	18008226 	beq	r3,zero,c1a8 <__gxx_personality_sj0+0x440>
    bfa0:	d9002317 	ldw	r4,140(sp)
    bfa4:	d9c02317 	ldw	r7,140(sp)
    bfa8:	213ffb17 	ldw	r4,-20(r4)
    bfac:	39fffd17 	ldw	r7,-12(r7)
    bfb0:	d9001515 	stw	r4,84(sp)
    bfb4:	d9c01a15 	stw	r7,104(sp)
    bfb8:	d8801517 	ldw	r2,84(sp)
    bfbc:	103fc10e 	bge	r2,zero,bec4 <__alt_data_end+0xfc00bec4>
    bfc0:	d9002417 	ldw	r4,144(sp)
    bfc4:	d9401a17 	ldw	r5,104(sp)
    bfc8:	d80d883a 	mov	r6,sp
    bfcc:	00bfffc4 	movi	r2,-1
    bfd0:	d8800915 	stw	r2,36(sp)
    bfd4:	000b8d80 	call	b8d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    bfd8:	d9402417 	ldw	r5,144(sp)
    bfdc:	d9000503 	ldbu	r4,20(sp)
    bfe0:	000b84c0 	call	b84c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bfe4:	d9000503 	ldbu	r4,20(sp)
    bfe8:	d9402417 	ldw	r5,144(sp)
    bfec:	d8800215 	stw	r2,8(sp)
    bff0:	000b84c0 	call	b84c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bff4:	d8c02317 	ldw	r3,140(sp)
    bff8:	18bffe15 	stw	r2,-8(r3)
    bffc:	003fb106 	br	bec4 <__alt_data_end+0xfc00bec4>
    c000:	10bfffc4 	addi	r2,r2,-1
    c004:	003f9d06 	br	be7c <__alt_data_end+0xfc00be7c>
    c008:	42000044 	addi	r8,r8,1
    c00c:	da001f15 	stw	r8,124(sp)
    c010:	38005326 	beq	r7,zero,c160 <__gxx_personality_sj0+0x3f8>
    c014:	d8800417 	ldw	r2,16(sp)
    c018:	39ffffc4 	addi	r7,r7,-1
    c01c:	11c5883a 	add	r2,r2,r7
    c020:	d8801815 	stw	r2,96(sp)
    c024:	40005026 	beq	r8,zero,c168 <__gxx_personality_sj0+0x400>
    c028:	10007426 	beq	r2,zero,c1fc <__gxx_personality_sj0+0x494>
    c02c:	d8801917 	ldw	r2,100(sp)
    c030:	1080020c 	andi	r2,r2,8
    c034:	d8802015 	stw	r2,128(sp)
    c038:	1000a21e 	bne	r2,zero,c2c4 <__gxx_personality_sj0+0x55c>
    c03c:	d8c01c17 	ldw	r3,112(sp)
    c040:	1800b026 	beq	r3,zero,c304 <__gxx_personality_sj0+0x59c>
    c044:	01c000f4 	movhi	r7,3
    c048:	39f60704 	addi	r7,r7,-10212
    c04c:	d9c01e15 	stw	r7,120(sp)
    c050:	d8001d05 	stb	zero,116(sp)
    c054:	d8c01817 	ldw	r3,96(sp)
    c058:	d8001515 	stw	zero,84(sp)
    c05c:	0009883a 	mov	r4,zero
    c060:	19400003 	ldbu	r5,0(r3)
    c064:	18800044 	addi	r2,r3,1
    c068:	d9c01517 	ldw	r7,84(sp)
    c06c:	28c01fcc 	andi	r3,r5,127
    c070:	1906983a 	sll	r3,r3,r4
    c074:	29803fcc 	andi	r6,r5,255
    c078:	3180201c 	xori	r6,r6,128
    c07c:	38ceb03a 	or	r7,r7,r3
    c080:	d8801715 	stw	r2,92(sp)
    c084:	31bfe004 	addi	r6,r6,-128
    c088:	d9c01515 	stw	r7,84(sp)
    c08c:	210001c4 	addi	r4,r4,7
    c090:	1007883a 	mov	r3,r2
    c094:	303ff216 	blt	r6,zero,c060 <__alt_data_end+0xfc00c060>
    c098:	00c007c4 	movi	r3,31
    c09c:	19000836 	bltu	r3,r4,c0c0 <__gxx_personality_sj0+0x358>
    c0a0:	2940100c 	andi	r5,r5,64
    c0a4:	28000626 	beq	r5,zero,c0c0 <__gxx_personality_sj0+0x358>
    c0a8:	01c00044 	movi	r7,1
    c0ac:	3908983a 	sll	r4,r7,r4
    c0b0:	d8c01517 	ldw	r3,84(sp)
    c0b4:	0109c83a 	sub	r4,zero,r4
    c0b8:	1906b03a 	or	r3,r3,r4
    c0bc:	d8c01515 	stw	r3,84(sp)
    c0c0:	d8001615 	stw	zero,88(sp)
    c0c4:	0009883a 	mov	r4,zero
    c0c8:	11400003 	ldbu	r5,0(r2)
    c0cc:	d9c01617 	ldw	r7,88(sp)
    c0d0:	10800044 	addi	r2,r2,1
    c0d4:	28c01fcc 	andi	r3,r5,127
    c0d8:	1906983a 	sll	r3,r3,r4
    c0dc:	29803fcc 	andi	r6,r5,255
    c0e0:	3180201c 	xori	r6,r6,128
    c0e4:	38ceb03a 	or	r7,r7,r3
    c0e8:	31bfe004 	addi	r6,r6,-128
    c0ec:	d9c01615 	stw	r7,88(sp)
    c0f0:	210001c4 	addi	r4,r4,7
    c0f4:	303ff416 	blt	r6,zero,c0c8 <__alt_data_end+0xfc00c0c8>
    c0f8:	008007c4 	movi	r2,31
    c0fc:	11000736 	bltu	r2,r4,c11c <__gxx_personality_sj0+0x3b4>
    c100:	2940100c 	andi	r5,r5,64
    c104:	28000526 	beq	r5,zero,c11c <__gxx_personality_sj0+0x3b4>
    c108:	00c00044 	movi	r3,1
    c10c:	1908983a 	sll	r4,r3,r4
    c110:	0109c83a 	sub	r4,zero,r4
    c114:	390eb03a 	or	r7,r7,r4
    c118:	d9c01615 	stw	r7,88(sp)
    c11c:	d9001517 	ldw	r4,84(sp)
    c120:	20003c26 	beq	r4,zero,c214 <__gxx_personality_sj0+0x4ac>
    c124:	01003e0e 	bge	zero,r4,c220 <__gxx_personality_sj0+0x4b8>
    c128:	01ffffc4 	movi	r7,-1
    c12c:	200b883a 	mov	r5,r4
    c130:	d809883a 	mov	r4,sp
    c134:	d9c00915 	stw	r7,36(sp)
    c138:	000b7f80 	call	b7f8 <_ZL15get_ttype_entryP16lsda_header_infom>
    c13c:	10005f26 	beq	r2,zero,c2bc <__gxx_personality_sj0+0x554>
    c140:	d8c01e17 	ldw	r3,120(sp)
    c144:	1800571e 	bne	r3,zero,c2a4 <__gxx_personality_sj0+0x53c>
    c148:	d9001617 	ldw	r4,88(sp)
    c14c:	20002926 	beq	r4,zero,c1f4 <__gxx_personality_sj0+0x48c>
    c150:	d9c01717 	ldw	r7,92(sp)
    c154:	390f883a 	add	r7,r7,r4
    c158:	d9c01815 	stw	r7,96(sp)
    c15c:	003fbd06 	br	c054 <__alt_data_end+0xfc00c054>
    c160:	d8c01f17 	ldw	r3,124(sp)
    c164:	1800251e 	bne	r3,zero,c1fc <__gxx_personality_sj0+0x494>
    c168:	01000204 	movi	r4,8
    c16c:	d9001515 	stw	r4,84(sp)
    c170:	003f1806 	br	bdd4 <__alt_data_end+0xfc00bdd4>
    c174:	d8801c17 	ldw	r2,112(sp)
    c178:	10000d26 	beq	r2,zero,c1b0 <__gxx_personality_sj0+0x448>
    c17c:	00800184 	movi	r2,6
    c180:	d8801515 	stw	r2,84(sp)
    c184:	003f1306 	br	bdd4 <__alt_data_end+0xfc00bdd4>
    c188:	00800044 	movi	r2,1
    c18c:	18bf4d1e 	bne	r3,r2,bec4 <__alt_data_end+0xfc00bec4>
    c190:	000b4c00 	call	b4c0 <_ZSt9terminatev>
    c194:	d9001b17 	ldw	r4,108(sp)
    c198:	00800044 	movi	r2,1
    c19c:	113f4536 	bltu	r2,r4,beb4 <__alt_data_end+0xfc00beb4>
    c1a0:	00800044 	movi	r2,1
    c1a4:	18bf841e 	bne	r3,r2,bfb8 <__alt_data_end+0xfc00bfb8>
    c1a8:	d9002317 	ldw	r4,140(sp)
    c1ac:	000cb440 	call	cb44 <__cxa_call_terminate>
    c1b0:	d8c01b17 	ldw	r3,108(sp)
    c1b4:	00800044 	movi	r2,1
    c1b8:	10fff036 	bltu	r2,r3,c17c <__alt_data_end+0xfc00c17c>
    c1bc:	d9002317 	ldw	r4,140(sp)
    c1c0:	d8801817 	ldw	r2,96(sp)
    c1c4:	d9c01517 	ldw	r7,84(sp)
    c1c8:	d8c01a17 	ldw	r3,104(sp)
    c1cc:	20bffc15 	stw	r2,-16(r4)
    c1d0:	d8800717 	ldw	r2,28(sp)
    c1d4:	21fffb15 	stw	r7,-20(r4)
    c1d8:	d9c01f17 	ldw	r7,124(sp)
    c1dc:	20bfff15 	stw	r2,-4(r4)
    c1e0:	00800184 	movi	r2,6
    c1e4:	20fffd15 	stw	r3,-12(r4)
    c1e8:	21fffe15 	stw	r7,-8(r4)
    c1ec:	d8801515 	stw	r2,84(sp)
    c1f0:	003ef806 	br	bdd4 <__alt_data_end+0xfc00bdd4>
    c1f4:	d8801d03 	ldbu	r2,116(sp)
    c1f8:	103fdb26 	beq	r2,zero,c168 <__alt_data_end+0xfc00c168>
    c1fc:	d8c01917 	ldw	r3,100(sp)
    c200:	1880004c 	andi	r2,r3,1
    c204:	103fd81e 	bne	r2,zero,c168 <__alt_data_end+0xfc00c168>
    c208:	d8001515 	stw	zero,84(sp)
    c20c:	00c00084 	movi	r3,2
    c210:	003f2306 	br	bea0 <__alt_data_end+0xfc00bea0>
    c214:	00c00044 	movi	r3,1
    c218:	d8c01d05 	stb	r3,116(sp)
    c21c:	003fca06 	br	c148 <__alt_data_end+0xfc00c148>
    c220:	d9001e17 	ldw	r4,120(sp)
    c224:	20000426 	beq	r4,zero,c238 <__gxx_personality_sj0+0x4d0>
    c228:	d9c02017 	ldw	r7,128(sp)
    c22c:	3800021e 	bne	r7,zero,c238 <__gxx_personality_sj0+0x4d0>
    c230:	d8801c17 	ldw	r2,112(sp)
    c234:	10002726 	beq	r2,zero,c2d4 <__gxx_personality_sj0+0x56c>
    c238:	d8801517 	ldw	r2,84(sp)
    c23c:	000d883a 	mov	r6,zero
    c240:	000b883a 	mov	r5,zero
    c244:	0088303a 	nor	r4,zero,r2
    c248:	d8800317 	ldw	r2,12(sp)
    c24c:	1109883a 	add	r4,r2,r4
    c250:	20800003 	ldbu	r2,0(r4)
    c254:	21000044 	addi	r4,r4,1
    c258:	10c01fcc 	andi	r3,r2,127
    c25c:	1946983a 	sll	r3,r3,r5
    c260:	10803fcc 	andi	r2,r2,255
    c264:	1080201c 	xori	r2,r2,128
    c268:	10bfe004 	addi	r2,r2,-128
    c26c:	30ccb03a 	or	r6,r6,r3
    c270:	294001c4 	addi	r5,r5,7
    c274:	103ff616 	blt	r2,zero,c250 <__alt_data_end+0xfc00c250>
    c278:	3005003a 	cmpeq	r2,r6,zero
    c27c:	10803fcc 	andi	r2,r2,255
    c280:	103fb126 	beq	r2,zero,c148 <__alt_data_end+0xfc00c148>
    c284:	d9c01917 	ldw	r7,100(sp)
    c288:	3880004c 	andi	r2,r7,1
    c28c:	103fb91e 	bne	r2,zero,c174 <__alt_data_end+0xfc00c174>
    c290:	d8802017 	ldw	r2,128(sp)
    c294:	10002d26 	beq	r2,zero,c34c <__gxx_personality_sj0+0x5e4>
    c298:	00800044 	movi	r2,1
    c29c:	d8800915 	stw	r2,36(sp)
    c2a0:	000b4e80 	call	b4e8 <_ZSt10unexpectedv>
    c2a4:	d9800704 	addi	r6,sp,28
    c2a8:	180b883a 	mov	r5,r3
    c2ac:	1009883a 	mov	r4,r2
    c2b0:	000ba0c0 	call	ba0c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c2b4:	10803fcc 	andi	r2,r2,255
    c2b8:	103fa326 	beq	r2,zero,c148 <__alt_data_end+0xfc00c148>
    c2bc:	00c000c4 	movi	r3,3
    c2c0:	003ef406 	br	be94 <__alt_data_end+0xfc00be94>
    c2c4:	010000f4 	movhi	r4,3
    c2c8:	21360504 	addi	r4,r4,-10220
    c2cc:	d9001e15 	stw	r4,120(sp)
    c2d0:	003f5f06 	br	c050 <__alt_data_end+0xfc00c050>
    c2d4:	d9001b17 	ldw	r4,108(sp)
    c2d8:	00c00044 	movi	r3,1
    c2dc:	193fd636 	bltu	r3,r4,c238 <__alt_data_end+0xfc00c238>
    c2e0:	01ffffc4 	movi	r7,-1
    c2e4:	d9c00915 	stw	r7,36(sp)
    c2e8:	d9800717 	ldw	r6,28(sp)
    c2ec:	d9c01517 	ldw	r7,84(sp)
    c2f0:	d9401e17 	ldw	r5,120(sp)
    c2f4:	d809883a 	mov	r4,sp
    c2f8:	000bcc00 	call	bcc0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c2fc:	1080005c 	xori	r2,r2,1
    c300:	003fde06 	br	c27c <__alt_data_end+0xfc00c27c>
    c304:	d9001b17 	ldw	r4,108(sp)
    c308:	00800044 	movi	r2,1
    c30c:	113f4d36 	bltu	r2,r4,c044 <__alt_data_end+0xfc00c044>
    c310:	d9c02317 	ldw	r7,140(sp)
    c314:	38800017 	ldw	r2,0(r7)
    c318:	1080004c 	andi	r2,r2,1
    c31c:	1000061e 	bne	r2,zero,c338 <__gxx_personality_sj0+0x5d0>
    c320:	d8c02317 	ldw	r3,140(sp)
    c324:	18800504 	addi	r2,r3,20
    c328:	d8800715 	stw	r2,28(sp)
    c32c:	10bff017 	ldw	r2,-64(r2)
    c330:	d8801e15 	stw	r2,120(sp)
    c334:	003f4606 	br	c050 <__alt_data_end+0xfc00c050>
    c338:	38bff517 	ldw	r2,-44(r7)
    c33c:	003ffa06 	br	c328 <__alt_data_end+0xfc00c328>
    c340:	d9000a17 	ldw	r4,40(sp)
    c344:	000c6f80 	call	c6f8 <__cxa_begin_catch>
    c348:	003f9106 	br	c190 <__alt_data_end+0xfc00c190>
    c34c:	d9c01c17 	ldw	r7,112(sp)
    c350:	383eda1e 	bne	r7,zero,bebc <__alt_data_end+0xfc00bebc>
    c354:	d8c01b17 	ldw	r3,108(sp)
    c358:	00800044 	movi	r2,1
    c35c:	10fed736 	bltu	r2,r3,bebc <__alt_data_end+0xfc00bebc>
    c360:	00c000c4 	movi	r3,3
    c364:	003f8e06 	br	c1a0 <__alt_data_end+0xfc00c1a0>

0000c368 <__cxa_call_unexpected>:
    c368:	00800074 	movhi	r2,1
    c36c:	deffe604 	addi	sp,sp,-104
    c370:	10af5a04 	addi	r2,r2,-17048
    c374:	d8800d15 	stw	r2,52(sp)
    c378:	008000b4 	movhi	r2,2
    c37c:	108d4704 	addi	r2,r2,13596
    c380:	d8800e15 	stw	r2,56(sp)
    c384:	d8800104 	addi	r2,sp,4
    c388:	d8800f15 	stw	r2,60(sp)
    c38c:	00800074 	movhi	r2,1
    c390:	10b0fd04 	addi	r2,r2,-15372
    c394:	d9001415 	stw	r4,80(sp)
    c398:	d9000704 	addi	r4,sp,28
    c39c:	dfc01915 	stw	ra,100(sp)
    c3a0:	d8801015 	stw	r2,64(sp)
    c3a4:	df001815 	stw	fp,96(sp)
    c3a8:	dec01115 	stw	sp,68(sp)
    c3ac:	000da700 	call	da70 <_Unwind_SjLj_Register>
    c3b0:	d9001417 	ldw	r4,80(sp)
    c3b4:	000c6f80 	call	c6f8 <__cxa_begin_catch>
    c3b8:	d8c01417 	ldw	r3,80(sp)
    c3bc:	18bffe17 	ldw	r2,-8(r3)
    c3c0:	193ff717 	ldw	r4,-36(r3)
    c3c4:	18fffd17 	ldw	r3,-12(r3)
    c3c8:	d8800315 	stw	r2,12(sp)
    c3cc:	d8c01615 	stw	r3,88(sp)
    c3d0:	d8c01417 	ldw	r3,80(sp)
    c3d4:	18fffb17 	ldw	r3,-20(r3)
    c3d8:	d8c01515 	stw	r3,84(sp)
    c3dc:	d8c01417 	ldw	r3,80(sp)
    c3e0:	18fff817 	ldw	r3,-32(r3)
    c3e4:	d8c01415 	stw	r3,80(sp)
    c3e8:	00c00044 	movi	r3,1
    c3ec:	d8c00815 	stw	r3,32(sp)
    c3f0:	000b4d80 	call	b4d8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    c3f4:	d8c00917 	ldw	r3,36(sp)
    c3f8:	d8800817 	ldw	r2,32(sp)
    c3fc:	d8c01715 	stw	r3,92(sp)
    c400:	10000a26 	beq	r2,zero,c42c <__cxa_call_unexpected+0xc4>
    c404:	10bfffc4 	addi	r2,r2,-1
    c408:	10000126 	beq	r2,zero,c410 <__cxa_call_unexpected+0xa8>
    c40c:	003b68fa 	trap	3
    c410:	d8000815 	stw	zero,32(sp)
    c414:	000c7ac0 	call	c7ac <__cxa_end_catch>
    c418:	000c7ac0 	call	c7ac <__cxa_end_catch>
    c41c:	d9001717 	ldw	r4,92(sp)
    c420:	00bfffc4 	movi	r2,-1
    c424:	d8800815 	stw	r2,32(sp)
    c428:	000dc6c0 	call	dc6c <_Unwind_SjLj_Resume>
    c42c:	d9001717 	ldw	r4,92(sp)
    c430:	000c6f80 	call	c6f8 <__cxa_begin_catch>
    c434:	000cb9c0 	call	cb9c <__cxa_get_globals_fast>
    c438:	10800017 	ldw	r2,0(r2)
    c43c:	10c00b17 	ldw	r3,44(r2)
    c440:	18c0004c 	andi	r3,r3,1
    c444:	18001e26 	beq	r3,zero,c4c0 <__cxa_call_unexpected+0x158>
    c448:	10800017 	ldw	r2,0(r2)
    c44c:	d8801715 	stw	r2,92(sp)
    c450:	d8801517 	ldw	r2,84(sp)
    c454:	00802b0e 	bge	zero,r2,c504 <__cxa_call_unexpected+0x19c>
    c458:	d8c01717 	ldw	r3,92(sp)
    c45c:	d8800317 	ldw	r2,12(sp)
    c460:	d9c01517 	ldw	r7,84(sp)
    c464:	193ff017 	ldw	r4,-64(r3)
    c468:	d9801617 	ldw	r6,88(sp)
    c46c:	d8800015 	stw	r2,0(sp)
    c470:	180b883a 	mov	r5,r3
    c474:	00800084 	movi	r2,2
    c478:	d8800815 	stw	r2,32(sp)
    c47c:	000ba940 	call	ba94 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c480:	10803fcc 	andi	r2,r2,255
    c484:	10001e1e 	bne	r2,zero,c500 <__cxa_call_unexpected+0x198>
    c488:	d8800317 	ldw	r2,12(sp)
    c48c:	d9c01517 	ldw	r7,84(sp)
    c490:	d9801617 	ldw	r6,88(sp)
    c494:	010000f4 	movhi	r4,3
    c498:	d8800015 	stw	r2,0(sp)
    c49c:	21289f04 	addi	r4,r4,-23940
    c4a0:	00800084 	movi	r2,2
    c4a4:	000b883a 	mov	r5,zero
    c4a8:	d8800815 	stw	r2,32(sp)
    c4ac:	000ba940 	call	ba94 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c4b0:	10803fcc 	andi	r2,r2,255
    c4b4:	1000051e 	bne	r2,zero,c4cc <__cxa_call_unexpected+0x164>
    c4b8:	d9001417 	ldw	r4,80(sp)
    c4bc:	000b4000 	call	b400 <_ZN10__cxxabiv111__terminateEPFvvE>
    c4c0:	10801004 	addi	r2,r2,64
    c4c4:	d8801715 	stw	r2,92(sp)
    c4c8:	003fe106 	br	c450 <__alt_data_end+0xfc00c450>
    c4cc:	01000104 	movi	r4,4
    c4d0:	000c9e00 	call	c9e0 <__cxa_allocate_exception>
    c4d4:	00c000f4 	movhi	r3,3
    c4d8:	18e8ba04 	addi	r3,r3,-23832
    c4dc:	01800074 	movhi	r6,1
    c4e0:	014000f4 	movhi	r5,3
    c4e4:	10c00015 	stw	r3,0(r2)
    c4e8:	31b2ee04 	addi	r6,r6,-13384
    c4ec:	00c00084 	movi	r3,2
    c4f0:	29689f04 	addi	r5,r5,-23940
    c4f4:	1009883a 	mov	r4,r2
    c4f8:	d8c00815 	stw	r3,32(sp)
    c4fc:	000c5dc0 	call	c5dc <__cxa_throw>
    c500:	000c66c0 	call	c66c <__cxa_rethrow>
    c504:	d9401617 	ldw	r5,88(sp)
    c508:	00800084 	movi	r2,2
    c50c:	d9800104 	addi	r6,sp,4
    c510:	0009883a 	mov	r4,zero
    c514:	d8800815 	stw	r2,32(sp)
    c518:	000b8d80 	call	b8d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c51c:	d9801717 	ldw	r6,92(sp)
    c520:	d9c01517 	ldw	r7,84(sp)
    c524:	d9000104 	addi	r4,sp,4
    c528:	317ff017 	ldw	r5,-64(r6)
    c52c:	000bcc00 	call	bcc0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c530:	10803fcc 	andi	r2,r2,255
    c534:	1000171e 	bne	r2,zero,c594 <__cxa_call_unexpected+0x22c>
    c538:	d9c01517 	ldw	r7,84(sp)
    c53c:	014000f4 	movhi	r5,3
    c540:	00800084 	movi	r2,2
    c544:	29689f04 	addi	r5,r5,-23940
    c548:	000d883a 	mov	r6,zero
    c54c:	d9000104 	addi	r4,sp,4
    c550:	d8800815 	stw	r2,32(sp)
    c554:	000bcc00 	call	bcc0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c558:	10803fcc 	andi	r2,r2,255
    c55c:	103fd626 	beq	r2,zero,c4b8 <__alt_data_end+0xfc00c4b8>
    c560:	01000104 	movi	r4,4
    c564:	000c9e00 	call	c9e0 <__cxa_allocate_exception>
    c568:	00c000f4 	movhi	r3,3
    c56c:	18e8ba04 	addi	r3,r3,-23832
    c570:	01800074 	movhi	r6,1
    c574:	014000f4 	movhi	r5,3
    c578:	10c00015 	stw	r3,0(r2)
    c57c:	31b2ee04 	addi	r6,r6,-13384
    c580:	00c00084 	movi	r3,2
    c584:	29689f04 	addi	r5,r5,-23940
    c588:	1009883a 	mov	r4,r2
    c58c:	d8c00815 	stw	r3,32(sp)
    c590:	000c5dc0 	call	c5dc <__cxa_throw>
    c594:	000c66c0 	call	c66c <__cxa_rethrow>

0000c598 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    c598:	defffe04 	addi	sp,sp,-8
    c59c:	dfc00115 	stw	ra,4(sp)
    c5a0:	dc000015 	stw	r16,0(sp)
    c5a4:	00800044 	movi	r2,1
    c5a8:	11000a36 	bltu	r2,r4,c5d4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    c5ac:	28bff617 	ldw	r2,-40(r5)
    c5b0:	2c000504 	addi	r16,r5,20
    c5b4:	10000226 	beq	r2,zero,c5c0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    c5b8:	8009883a 	mov	r4,r16
    c5bc:	103ee83a 	callr	r2
    c5c0:	8009883a 	mov	r4,r16
    c5c4:	dfc00117 	ldw	ra,4(sp)
    c5c8:	dc000017 	ldw	r16,0(sp)
    c5cc:	dec00204 	addi	sp,sp,8
    c5d0:	000ca401 	jmpi	ca40 <__cxa_free_exception>
    c5d4:	293ff817 	ldw	r4,-32(r5)
    c5d8:	000b4000 	call	b400 <_ZN10__cxxabiv111__terminateEPFvvE>

0000c5dc <__cxa_throw>:
    c5dc:	defffb04 	addi	sp,sp,-20
    c5e0:	dfc00415 	stw	ra,16(sp)
    c5e4:	dcc00315 	stw	r19,12(sp)
    c5e8:	dc800215 	stw	r18,8(sp)
    c5ec:	2827883a 	mov	r19,r5
    c5f0:	3025883a 	mov	r18,r6
    c5f4:	dc400115 	stw	r17,4(sp)
    c5f8:	dc000015 	stw	r16,0(sp)
    c5fc:	2021883a 	mov	r16,r4
    c600:	000cba80 	call	cba8 <__cxa_get_globals>
    c604:	10c00117 	ldw	r3,4(r2)
    c608:	847ffb04 	addi	r17,r16,-20
    c60c:	18c00044 	addi	r3,r3,1
    c610:	10c00115 	stw	r3,4(r2)
    c614:	00800044 	movi	r2,1
    c618:	80bfef15 	stw	r2,-68(r16)
    c61c:	84fff015 	stw	r19,-64(r16)
    c620:	84bff115 	stw	r18,-60(r16)
    c624:	000b5380 	call	b538 <_ZSt14get_unexpectedv>
    c628:	80bff215 	stw	r2,-56(r16)
    c62c:	000b5140 	call	b514 <_ZSt13get_terminatev>
    c630:	80bff315 	stw	r2,-52(r16)
    c634:	0090caf4 	movhi	r2,17195
    c638:	108ac004 	addi	r2,r2,11008
    c63c:	80bffb15 	stw	r2,-20(r16)
    c640:	0091d3b4 	movhi	r2,18254
    c644:	109550c4 	addi	r2,r2,21827
    c648:	80bffc15 	stw	r2,-16(r16)
    c64c:	00800074 	movhi	r2,1
    c650:	10b16604 	addi	r2,r2,-14952
    c654:	8809883a 	mov	r4,r17
    c658:	80bffd15 	stw	r2,-12(r16)
    c65c:	000db580 	call	db58 <_Unwind_SjLj_RaiseException>
    c660:	8809883a 	mov	r4,r17
    c664:	000c6f80 	call	c6f8 <__cxa_begin_catch>
    c668:	000b4c00 	call	b4c0 <_ZSt9terminatev>

0000c66c <__cxa_rethrow>:
    c66c:	defffe04 	addi	sp,sp,-8
    c670:	dfc00115 	stw	ra,4(sp)
    c674:	dc000015 	stw	r16,0(sp)
    c678:	000cba80 	call	cba8 <__cxa_get_globals>
    c67c:	10c00117 	ldw	r3,4(r2)
    c680:	11000017 	ldw	r4,0(r2)
    c684:	18c00044 	addi	r3,r3,1
    c688:	10c00115 	stw	r3,4(r2)
    c68c:	20001126 	beq	r4,zero,c6d4 <__cxa_rethrow+0x68>
    c690:	21400b17 	ldw	r5,44(r4)
    c694:	01ef3574 	movhi	r7,48341
    c698:	39f54004 	addi	r7,r7,-11008
    c69c:	29cf883a 	add	r7,r5,r7
    c6a0:	20c00c17 	ldw	r3,48(r4)
    c6a4:	394d803a 	cmpltu	r6,r7,r5
    c6a8:	016e2cb4 	movhi	r5,47282
    c6ac:	296aaf04 	addi	r5,r5,-21828
    c6b0:	1947883a 	add	r3,r3,r5
    c6b4:	30c7883a 	add	r3,r6,r3
    c6b8:	18000726 	beq	r3,zero,c6d8 <__cxa_rethrow+0x6c>
    c6bc:	10000015 	stw	zero,0(r2)
    c6c0:	24000b04 	addi	r16,r4,44
    c6c4:	8009883a 	mov	r4,r16
    c6c8:	000dcb00 	call	dcb0 <_Unwind_SjLj_Resume_or_Rethrow>
    c6cc:	8009883a 	mov	r4,r16
    c6d0:	000c6f80 	call	c6f8 <__cxa_begin_catch>
    c6d4:	000b4c00 	call	b4c0 <_ZSt9terminatev>
    c6d8:	00c00044 	movi	r3,1
    c6dc:	19fff736 	bltu	r3,r7,c6bc <__alt_data_end+0xfc00c6bc>
    c6e0:	20800517 	ldw	r2,20(r4)
    c6e4:	0085c83a 	sub	r2,zero,r2
    c6e8:	20800515 	stw	r2,20(r4)
    c6ec:	003ff406 	br	c6c0 <__alt_data_end+0xfc00c6c0>

0000c6f0 <__cxa_get_exception_ptr>:
    c6f0:	20bfff17 	ldw	r2,-4(r4)
    c6f4:	f800283a 	ret

0000c6f8 <__cxa_begin_catch>:
    c6f8:	defffe04 	addi	sp,sp,-8
    c6fc:	dc000015 	stw	r16,0(sp)
    c700:	dfc00115 	stw	ra,4(sp)
    c704:	2021883a 	mov	r16,r4
    c708:	000cba80 	call	cba8 <__cxa_get_globals>
    c70c:	81000017 	ldw	r4,0(r16)
    c710:	80c00117 	ldw	r3,4(r16)
    c714:	01af3574 	movhi	r6,48341
    c718:	31b54004 	addi	r6,r6,-11008
    c71c:	016e2cb4 	movhi	r5,47282
    c720:	296aaf04 	addi	r5,r5,-21828
    c724:	218d883a 	add	r6,r4,r6
    c728:	3109803a 	cmpltu	r4,r6,r4
    c72c:	1947883a 	add	r3,r3,r5
    c730:	20c7883a 	add	r3,r4,r3
    c734:	817ff504 	addi	r5,r16,-44
    c738:	11000017 	ldw	r4,0(r2)
    c73c:	18000726 	beq	r3,zero,c75c <__cxa_begin_catch+0x64>
    c740:	2000191e 	bne	r4,zero,c7a8 <__cxa_begin_catch+0xb0>
    c744:	11400015 	stw	r5,0(r2)
    c748:	0005883a 	mov	r2,zero
    c74c:	dfc00117 	ldw	ra,4(sp)
    c750:	dc000017 	ldw	r16,0(sp)
    c754:	dec00204 	addi	sp,sp,8
    c758:	f800283a 	ret
    c75c:	01c00044 	movi	r7,1
    c760:	39bff736 	bltu	r7,r6,c740 <__alt_data_end+0xfc00c740>
    c764:	80fffa17 	ldw	r3,-24(r16)
    c768:	18000d16 	blt	r3,zero,c7a0 <__cxa_begin_catch+0xa8>
    c76c:	18c00044 	addi	r3,r3,1
    c770:	11800117 	ldw	r6,4(r2)
    c774:	80fffa15 	stw	r3,-24(r16)
    c778:	30ffffc4 	addi	r3,r6,-1
    c77c:	10c00115 	stw	r3,4(r2)
    c780:	21400226 	beq	r4,r5,c78c <__cxa_begin_catch+0x94>
    c784:	813ff915 	stw	r4,-28(r16)
    c788:	11400015 	stw	r5,0(r2)
    c78c:	80bfff17 	ldw	r2,-4(r16)
    c790:	dfc00117 	ldw	ra,4(sp)
    c794:	dc000017 	ldw	r16,0(sp)
    c798:	dec00204 	addi	sp,sp,8
    c79c:	f800283a 	ret
    c7a0:	38c7c83a 	sub	r3,r7,r3
    c7a4:	003ff206 	br	c770 <__alt_data_end+0xfc00c770>
    c7a8:	000b4c00 	call	b4c0 <_ZSt9terminatev>

0000c7ac <__cxa_end_catch>:
    c7ac:	deffff04 	addi	sp,sp,-4
    c7b0:	dfc00015 	stw	ra,0(sp)
    c7b4:	000cb9c0 	call	cb9c <__cxa_get_globals_fast>
    c7b8:	11000017 	ldw	r4,0(r2)
    c7bc:	20001426 	beq	r4,zero,c810 <__cxa_end_catch+0x64>
    c7c0:	21400b17 	ldw	r5,44(r4)
    c7c4:	01ef3574 	movhi	r7,48341
    c7c8:	39f54004 	addi	r7,r7,-11008
    c7cc:	29cf883a 	add	r7,r5,r7
    c7d0:	20c00c17 	ldw	r3,48(r4)
    c7d4:	394d803a 	cmpltu	r6,r7,r5
    c7d8:	016e2cb4 	movhi	r5,47282
    c7dc:	296aaf04 	addi	r5,r5,-21828
    c7e0:	1947883a 	add	r3,r3,r5
    c7e4:	30c7883a 	add	r3,r6,r3
    c7e8:	18000c1e 	bne	r3,zero,c81c <__cxa_end_catch+0x70>
    c7ec:	00c00044 	movi	r3,1
    c7f0:	19c00a36 	bltu	r3,r7,c81c <__cxa_end_catch+0x70>
    c7f4:	20c00517 	ldw	r3,20(r4)
    c7f8:	18000d16 	blt	r3,zero,c830 <__cxa_end_catch+0x84>
    c7fc:	18ffffc4 	addi	r3,r3,-1
    c800:	18001026 	beq	r3,zero,c844 <__cxa_end_catch+0x98>
    c804:	00bfffc4 	movi	r2,-1
    c808:	18801426 	beq	r3,r2,c85c <__cxa_end_catch+0xb0>
    c80c:	20c00515 	stw	r3,20(r4)
    c810:	dfc00017 	ldw	ra,0(sp)
    c814:	dec00104 	addi	sp,sp,4
    c818:	f800283a 	ret
    c81c:	21000b04 	addi	r4,r4,44
    c820:	10000015 	stw	zero,0(r2)
    c824:	dfc00017 	ldw	ra,0(sp)
    c828:	dec00104 	addi	sp,sp,4
    c82c:	000dcfc1 	jmpi	dcfc <_Unwind_DeleteException>
    c830:	18c00044 	addi	r3,r3,1
    c834:	183ff51e 	bne	r3,zero,c80c <__alt_data_end+0xfc00c80c>
    c838:	21400417 	ldw	r5,16(r4)
    c83c:	11400015 	stw	r5,0(r2)
    c840:	003ff206 	br	c80c <__alt_data_end+0xfc00c80c>
    c844:	20c00417 	ldw	r3,16(r4)
    c848:	21000b04 	addi	r4,r4,44
    c84c:	10c00015 	stw	r3,0(r2)
    c850:	dfc00017 	ldw	ra,0(sp)
    c854:	dec00104 	addi	sp,sp,4
    c858:	000dcfc1 	jmpi	dcfc <_Unwind_DeleteException>
    c85c:	000b4c00 	call	b4c0 <_ZSt9terminatev>

0000c860 <_ZSt18uncaught_exceptionv>:
    c860:	deffff04 	addi	sp,sp,-4
    c864:	dfc00015 	stw	ra,0(sp)
    c868:	000cba80 	call	cba8 <__cxa_get_globals>
    c86c:	10800117 	ldw	r2,4(r2)
    c870:	1004c03a 	cmpne	r2,r2,zero
    c874:	dfc00017 	ldw	ra,0(sp)
    c878:	dec00104 	addi	sp,sp,4
    c87c:	f800283a 	ret

0000c880 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    c880:	018000f4 	movhi	r6,3
    c884:	3182f104 	addi	r6,r6,3012
    c888:	31400117 	ldw	r5,4(r6)
    c88c:	223fff04 	addi	r8,r4,-4
    c890:	227fff17 	ldw	r9,-4(r4)
    c894:	28001326 	beq	r5,zero,c8e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    c898:	424f883a 	add	r7,r8,r9
    c89c:	29c01426 	beq	r5,r7,c8f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    c8a0:	28c00117 	ldw	r3,4(r5)
    c8a4:	18001c26 	beq	r3,zero,c918 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    c8a8:	38c00336 	bltu	r7,r3,c8b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    c8ac:	00001e06 	br	c928 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    c8b0:	3880052e 	bgeu	r7,r2,c8c8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    c8b4:	1007883a 	mov	r3,r2
    c8b8:	18800117 	ldw	r2,4(r3)
    c8bc:	29800104 	addi	r6,r5,4
    c8c0:	180b883a 	mov	r5,r3
    c8c4:	103ffa1e 	bne	r2,zero,c8b0 <__alt_data_end+0xfc00c8b0>
    c8c8:	19400017 	ldw	r5,0(r3)
    c8cc:	194f883a 	add	r7,r3,r5
    c8d0:	41c00e26 	beq	r8,r7,c90c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    c8d4:	20800015 	stw	r2,0(r4)
    c8d8:	30800017 	ldw	r2,0(r6)
    c8dc:	12000115 	stw	r8,4(r2)
    c8e0:	f800283a 	ret
    c8e4:	20000015 	stw	zero,0(r4)
    c8e8:	32000115 	stw	r8,4(r6)
    c8ec:	f800283a 	ret
    c8f0:	28c00017 	ldw	r3,0(r5)
    c8f4:	28800117 	ldw	r2,4(r5)
    c8f8:	1a53883a 	add	r9,r3,r9
    c8fc:	227fff15 	stw	r9,-4(r4)
    c900:	20800015 	stw	r2,0(r4)
    c904:	32000115 	stw	r8,4(r6)
    c908:	f800283a 	ret
    c90c:	494b883a 	add	r5,r9,r5
    c910:	19400015 	stw	r5,0(r3)
    c914:	f800283a 	ret
    c918:	0005883a 	mov	r2,zero
    c91c:	2807883a 	mov	r3,r5
    c920:	31800104 	addi	r6,r6,4
    c924:	003fe806 	br	c8c8 <__alt_data_end+0xfc00c8c8>
    c928:	1805883a 	mov	r2,r3
    c92c:	31800104 	addi	r6,r6,4
    c930:	2807883a 	mov	r3,r5
    c934:	003fe406 	br	c8c8 <__alt_data_end+0xfc00c8c8>

0000c938 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    c938:	20800104 	addi	r2,r4,4
    c93c:	00c001c4 	movi	r3,7
    c940:	1880112e 	bgeu	r3,r2,c988 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    c944:	20c9883a 	add	r4,r4,r3
    c948:	00bfff04 	movi	r2,-4
    c94c:	208a703a 	and	r5,r4,r2
    c950:	018000f4 	movhi	r6,3
    c954:	3182f104 	addi	r6,r6,3012
    c958:	30c00117 	ldw	r3,4(r6)
    c95c:	18000826 	beq	r3,zero,c980 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    c960:	19000017 	ldw	r4,0(r3)
    c964:	21400436 	bltu	r4,r5,c978 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    c968:	00001a06 	br	c9d4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    c96c:	11000017 	ldw	r4,0(r2)
    c970:	2140072e 	bgeu	r4,r5,c990 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    c974:	1007883a 	mov	r3,r2
    c978:	18800117 	ldw	r2,4(r3)
    c97c:	103ffb1e 	bne	r2,zero,c96c <__alt_data_end+0xfc00c96c>
    c980:	0005883a 	mov	r2,zero
    c984:	f800283a 	ret
    c988:	01400204 	movi	r5,8
    c98c:	003ff006 	br	c950 <__alt_data_end+0xfc00c950>
    c990:	18c00104 	addi	r3,r3,4
    c994:	2149c83a 	sub	r4,r4,r5
    c998:	018001c4 	movi	r6,7
    c99c:	3100092e 	bgeu	r6,r4,c9c4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    c9a0:	11c00117 	ldw	r7,4(r2)
    c9a4:	114d883a 	add	r6,r2,r5
    c9a8:	31000015 	stw	r4,0(r6)
    c9ac:	31c00115 	stw	r7,4(r6)
    c9b0:	18800017 	ldw	r2,0(r3)
    c9b4:	11400015 	stw	r5,0(r2)
    c9b8:	19800015 	stw	r6,0(r3)
    c9bc:	10800104 	addi	r2,r2,4
    c9c0:	f800283a 	ret
    c9c4:	11000117 	ldw	r4,4(r2)
    c9c8:	10800104 	addi	r2,r2,4
    c9cc:	19000015 	stw	r4,0(r3)
    c9d0:	f800283a 	ret
    c9d4:	1805883a 	mov	r2,r3
    c9d8:	30c00104 	addi	r3,r6,4
    c9dc:	003fed06 	br	c994 <__alt_data_end+0xfc00c994>

0000c9e0 <__cxa_allocate_exception>:
    c9e0:	defffd04 	addi	sp,sp,-12
    c9e4:	dc400115 	stw	r17,4(sp)
    c9e8:	24401104 	addi	r17,r4,68
    c9ec:	8809883a 	mov	r4,r17
    c9f0:	dc000015 	stw	r16,0(sp)
    c9f4:	dfc00215 	stw	ra,8(sp)
    c9f8:	000de500 	call	de50 <malloc>
    c9fc:	1021883a 	mov	r16,r2
    ca00:	10000a26 	beq	r2,zero,ca2c <__cxa_allocate_exception+0x4c>
    ca04:	01801104 	movi	r6,68
    ca08:	000b883a 	mov	r5,zero
    ca0c:	8009883a 	mov	r4,r16
    ca10:	000e7cc0 	call	e7cc <memset>
    ca14:	80801104 	addi	r2,r16,68
    ca18:	dfc00217 	ldw	ra,8(sp)
    ca1c:	dc400117 	ldw	r17,4(sp)
    ca20:	dc000017 	ldw	r16,0(sp)
    ca24:	dec00304 	addi	sp,sp,12
    ca28:	f800283a 	ret
    ca2c:	8809883a 	mov	r4,r17
    ca30:	000c9380 	call	c938 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    ca34:	1021883a 	mov	r16,r2
    ca38:	103ff21e 	bne	r2,zero,ca04 <__alt_data_end+0xfc00ca04>
    ca3c:	000b4c00 	call	b4c0 <_ZSt9terminatev>

0000ca40 <__cxa_free_exception>:
    ca40:	00c000f4 	movhi	r3,3
    ca44:	18c2f104 	addi	r3,r3,3012
    ca48:	18800217 	ldw	r2,8(r3)
    ca4c:	213fef04 	addi	r4,r4,-68
    ca50:	1100042e 	bgeu	r2,r4,ca64 <__cxa_free_exception+0x24>
    ca54:	18c00317 	ldw	r3,12(r3)
    ca58:	10c5883a 	add	r2,r2,r3
    ca5c:	2080012e 	bgeu	r4,r2,ca64 <__cxa_free_exception+0x24>
    ca60:	000c8801 	jmpi	c880 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    ca64:	000de641 	jmpi	de64 <free>

0000ca68 <__cxa_allocate_dependent_exception>:
    ca68:	defffe04 	addi	sp,sp,-8
    ca6c:	01001004 	movi	r4,64
    ca70:	dc000015 	stw	r16,0(sp)
    ca74:	dfc00115 	stw	ra,4(sp)
    ca78:	000de500 	call	de50 <malloc>
    ca7c:	1021883a 	mov	r16,r2
    ca80:	10000926 	beq	r2,zero,caa8 <__cxa_allocate_dependent_exception+0x40>
    ca84:	01801004 	movi	r6,64
    ca88:	000b883a 	mov	r5,zero
    ca8c:	8009883a 	mov	r4,r16
    ca90:	000e7cc0 	call	e7cc <memset>
    ca94:	8005883a 	mov	r2,r16
    ca98:	dfc00117 	ldw	ra,4(sp)
    ca9c:	dc000017 	ldw	r16,0(sp)
    caa0:	dec00204 	addi	sp,sp,8
    caa4:	f800283a 	ret
    caa8:	01001004 	movi	r4,64
    caac:	000c9380 	call	c938 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    cab0:	1021883a 	mov	r16,r2
    cab4:	103ff31e 	bne	r2,zero,ca84 <__alt_data_end+0xfc00ca84>
    cab8:	000b4c00 	call	b4c0 <_ZSt9terminatev>

0000cabc <__cxa_free_dependent_exception>:
    cabc:	014000f4 	movhi	r5,3
    cac0:	2942f104 	addi	r5,r5,3012
    cac4:	28c00217 	ldw	r3,8(r5)
    cac8:	2005883a 	mov	r2,r4
    cacc:	1900042e 	bgeu	r3,r4,cae0 <__cxa_free_dependent_exception+0x24>
    cad0:	29400317 	ldw	r5,12(r5)
    cad4:	1947883a 	add	r3,r3,r5
    cad8:	20c0012e 	bgeu	r4,r3,cae0 <__cxa_free_dependent_exception+0x24>
    cadc:	000c8801 	jmpi	c880 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    cae0:	1009883a 	mov	r4,r2
    cae4:	000de641 	jmpi	de64 <free>

0000cae8 <_GLOBAL__sub_I___cxa_allocate_exception>:
    cae8:	defffd04 	addi	sp,sp,-12
    caec:	dc400115 	stw	r17,4(sp)
    caf0:	dc000015 	stw	r16,0(sp)
    caf4:	04424004 	movi	r17,2304
    caf8:	040000f4 	movhi	r16,3
    cafc:	8402f104 	addi	r16,r16,3012
    cb00:	8809883a 	mov	r4,r17
    cb04:	dfc00215 	stw	ra,8(sp)
    cb08:	84400315 	stw	r17,12(r16)
    cb0c:	000de500 	call	de50 <malloc>
    cb10:	80800215 	stw	r2,8(r16)
    cb14:	10000826 	beq	r2,zero,cb38 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    cb18:	80800115 	stw	r2,4(r16)
    cb1c:	14400015 	stw	r17,0(r2)
    cb20:	10000115 	stw	zero,4(r2)
    cb24:	dfc00217 	ldw	ra,8(sp)
    cb28:	dc400117 	ldw	r17,4(sp)
    cb2c:	dc000017 	ldw	r16,0(sp)
    cb30:	dec00304 	addi	sp,sp,12
    cb34:	f800283a 	ret
    cb38:	80000315 	stw	zero,12(r16)
    cb3c:	80000115 	stw	zero,4(r16)
    cb40:	003ff806 	br	cb24 <__alt_data_end+0xfc00cb24>

0000cb44 <__cxa_call_terminate>:
    cb44:	defffe04 	addi	sp,sp,-8
    cb48:	dfc00115 	stw	ra,4(sp)
    cb4c:	dc000015 	stw	r16,0(sp)
    cb50:	20000d26 	beq	r4,zero,cb88 <__cxa_call_terminate+0x44>
    cb54:	2021883a 	mov	r16,r4
    cb58:	000c6f80 	call	c6f8 <__cxa_begin_catch>
    cb5c:	80c00017 	ldw	r3,0(r16)
    cb60:	016f3574 	movhi	r5,48341
    cb64:	29754004 	addi	r5,r5,-11008
    cb68:	194b883a 	add	r5,r3,r5
    cb6c:	80800117 	ldw	r2,4(r16)
    cb70:	28c9803a 	cmpltu	r4,r5,r3
    cb74:	00ee2cb4 	movhi	r3,47282
    cb78:	18eaaf04 	addi	r3,r3,-21828
    cb7c:	10c5883a 	add	r2,r2,r3
    cb80:	2085883a 	add	r2,r4,r2
    cb84:	10000126 	beq	r2,zero,cb8c <__cxa_call_terminate+0x48>
    cb88:	000b4c00 	call	b4c0 <_ZSt9terminatev>
    cb8c:	00800044 	movi	r2,1
    cb90:	117ffd36 	bltu	r2,r5,cb88 <__alt_data_end+0xfc00cb88>
    cb94:	813ff817 	ldw	r4,-32(r16)
    cb98:	000b4000 	call	b400 <_ZN10__cxxabiv111__terminateEPFvvE>

0000cb9c <__cxa_get_globals_fast>:
    cb9c:	008000f4 	movhi	r2,3
    cba0:	10829804 	addi	r2,r2,2656
    cba4:	f800283a 	ret

0000cba8 <__cxa_get_globals>:
    cba8:	008000f4 	movhi	r2,3
    cbac:	10829804 	addi	r2,r2,2656
    cbb0:	f800283a 	ret

0000cbb4 <_ZNSt9exceptionD1Ev>:
    cbb4:	f800283a 	ret

0000cbb8 <_ZNSt13bad_exceptionD1Ev>:
    cbb8:	f800283a 	ret

0000cbbc <_ZNKSt9exception4whatEv>:
    cbbc:	008000f4 	movhi	r2,3
    cbc0:	10a88d04 	addi	r2,r2,-24012
    cbc4:	f800283a 	ret

0000cbc8 <_ZNKSt13bad_exception4whatEv>:
    cbc8:	008000f4 	movhi	r2,3
    cbcc:	10a89104 	addi	r2,r2,-23996
    cbd0:	f800283a 	ret

0000cbd4 <_ZNSt9exceptionD0Ev>:
    cbd4:	000b0f41 	jmpi	b0f4 <_ZdlPv>

0000cbd8 <_ZNSt13bad_exceptionD0Ev>:
    cbd8:	000b0f41 	jmpi	b0f4 <_ZdlPv>

0000cbdc <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    cbdc:	f800283a 	ret

0000cbe0 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    cbe0:	000b0f41 	jmpi	b0f4 <_ZdlPv>

0000cbe4 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    cbe4:	f800283a 	ret

0000cbe8 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    cbe8:	000b0f41 	jmpi	b0f4 <_ZdlPv>

0000cbec <__fixunssfsi>:
    cbec:	defffd04 	addi	sp,sp,-12
    cbf0:	dc000015 	stw	r16,0(sp)
    cbf4:	0413c034 	movhi	r16,20224
    cbf8:	800b883a 	mov	r5,r16
    cbfc:	dc400115 	stw	r17,4(sp)
    cc00:	dfc00215 	stw	ra,8(sp)
    cc04:	2023883a 	mov	r17,r4
    cc08:	000ce280 	call	ce28 <__gesf2>
    cc0c:	1000070e 	bge	r2,zero,cc2c <__fixunssfsi+0x40>
    cc10:	8809883a 	mov	r4,r17
    cc14:	000d7f80 	call	d7f8 <__fixsfsi>
    cc18:	dfc00217 	ldw	ra,8(sp)
    cc1c:	dc400117 	ldw	r17,4(sp)
    cc20:	dc000017 	ldw	r16,0(sp)
    cc24:	dec00304 	addi	sp,sp,12
    cc28:	f800283a 	ret
    cc2c:	800b883a 	mov	r5,r16
    cc30:	8809883a 	mov	r4,r17
    cc34:	000d3140 	call	d314 <__subsf3>
    cc38:	1009883a 	mov	r4,r2
    cc3c:	000d7f80 	call	d7f8 <__fixsfsi>
    cc40:	00e00034 	movhi	r3,32768
    cc44:	10c5883a 	add	r2,r2,r3
    cc48:	003ff306 	br	cc18 <__alt_data_end+0xfc00cc18>

0000cc4c <__divsi3>:
    cc4c:	20001b16 	blt	r4,zero,ccbc <__divsi3+0x70>
    cc50:	000f883a 	mov	r7,zero
    cc54:	28001616 	blt	r5,zero,ccb0 <__divsi3+0x64>
    cc58:	200d883a 	mov	r6,r4
    cc5c:	29001a2e 	bgeu	r5,r4,ccc8 <__divsi3+0x7c>
    cc60:	00800804 	movi	r2,32
    cc64:	00c00044 	movi	r3,1
    cc68:	00000106 	br	cc70 <__divsi3+0x24>
    cc6c:	10000d26 	beq	r2,zero,cca4 <__divsi3+0x58>
    cc70:	294b883a 	add	r5,r5,r5
    cc74:	10bfffc4 	addi	r2,r2,-1
    cc78:	18c7883a 	add	r3,r3,r3
    cc7c:	293ffb36 	bltu	r5,r4,cc6c <__alt_data_end+0xfc00cc6c>
    cc80:	0005883a 	mov	r2,zero
    cc84:	18000726 	beq	r3,zero,cca4 <__divsi3+0x58>
    cc88:	0005883a 	mov	r2,zero
    cc8c:	31400236 	bltu	r6,r5,cc98 <__divsi3+0x4c>
    cc90:	314dc83a 	sub	r6,r6,r5
    cc94:	10c4b03a 	or	r2,r2,r3
    cc98:	1806d07a 	srli	r3,r3,1
    cc9c:	280ad07a 	srli	r5,r5,1
    cca0:	183ffa1e 	bne	r3,zero,cc8c <__alt_data_end+0xfc00cc8c>
    cca4:	38000126 	beq	r7,zero,ccac <__divsi3+0x60>
    cca8:	0085c83a 	sub	r2,zero,r2
    ccac:	f800283a 	ret
    ccb0:	014bc83a 	sub	r5,zero,r5
    ccb4:	39c0005c 	xori	r7,r7,1
    ccb8:	003fe706 	br	cc58 <__alt_data_end+0xfc00cc58>
    ccbc:	0109c83a 	sub	r4,zero,r4
    ccc0:	01c00044 	movi	r7,1
    ccc4:	003fe306 	br	cc54 <__alt_data_end+0xfc00cc54>
    ccc8:	00c00044 	movi	r3,1
    cccc:	003fee06 	br	cc88 <__alt_data_end+0xfc00cc88>

0000ccd0 <__modsi3>:
    ccd0:	20001716 	blt	r4,zero,cd30 <__modsi3+0x60>
    ccd4:	000f883a 	mov	r7,zero
    ccd8:	2005883a 	mov	r2,r4
    ccdc:	28001216 	blt	r5,zero,cd28 <__modsi3+0x58>
    cce0:	2900162e 	bgeu	r5,r4,cd3c <__modsi3+0x6c>
    cce4:	01800804 	movi	r6,32
    cce8:	00c00044 	movi	r3,1
    ccec:	00000106 	br	ccf4 <__modsi3+0x24>
    ccf0:	30000a26 	beq	r6,zero,cd1c <__modsi3+0x4c>
    ccf4:	294b883a 	add	r5,r5,r5
    ccf8:	31bfffc4 	addi	r6,r6,-1
    ccfc:	18c7883a 	add	r3,r3,r3
    cd00:	293ffb36 	bltu	r5,r4,ccf0 <__alt_data_end+0xfc00ccf0>
    cd04:	18000526 	beq	r3,zero,cd1c <__modsi3+0x4c>
    cd08:	1806d07a 	srli	r3,r3,1
    cd0c:	11400136 	bltu	r2,r5,cd14 <__modsi3+0x44>
    cd10:	1145c83a 	sub	r2,r2,r5
    cd14:	280ad07a 	srli	r5,r5,1
    cd18:	183ffb1e 	bne	r3,zero,cd08 <__alt_data_end+0xfc00cd08>
    cd1c:	38000126 	beq	r7,zero,cd24 <__modsi3+0x54>
    cd20:	0085c83a 	sub	r2,zero,r2
    cd24:	f800283a 	ret
    cd28:	014bc83a 	sub	r5,zero,r5
    cd2c:	003fec06 	br	cce0 <__alt_data_end+0xfc00cce0>
    cd30:	0109c83a 	sub	r4,zero,r4
    cd34:	01c00044 	movi	r7,1
    cd38:	003fe706 	br	ccd8 <__alt_data_end+0xfc00ccd8>
    cd3c:	00c00044 	movi	r3,1
    cd40:	003ff106 	br	cd08 <__alt_data_end+0xfc00cd08>

0000cd44 <__udivsi3>:
    cd44:	200d883a 	mov	r6,r4
    cd48:	2900152e 	bgeu	r5,r4,cda0 <__udivsi3+0x5c>
    cd4c:	28001416 	blt	r5,zero,cda0 <__udivsi3+0x5c>
    cd50:	00800804 	movi	r2,32
    cd54:	00c00044 	movi	r3,1
    cd58:	00000206 	br	cd64 <__udivsi3+0x20>
    cd5c:	10000e26 	beq	r2,zero,cd98 <__udivsi3+0x54>
    cd60:	28000516 	blt	r5,zero,cd78 <__udivsi3+0x34>
    cd64:	294b883a 	add	r5,r5,r5
    cd68:	10bfffc4 	addi	r2,r2,-1
    cd6c:	18c7883a 	add	r3,r3,r3
    cd70:	293ffa36 	bltu	r5,r4,cd5c <__alt_data_end+0xfc00cd5c>
    cd74:	18000826 	beq	r3,zero,cd98 <__udivsi3+0x54>
    cd78:	0005883a 	mov	r2,zero
    cd7c:	31400236 	bltu	r6,r5,cd88 <__udivsi3+0x44>
    cd80:	314dc83a 	sub	r6,r6,r5
    cd84:	10c4b03a 	or	r2,r2,r3
    cd88:	1806d07a 	srli	r3,r3,1
    cd8c:	280ad07a 	srli	r5,r5,1
    cd90:	183ffa1e 	bne	r3,zero,cd7c <__alt_data_end+0xfc00cd7c>
    cd94:	f800283a 	ret
    cd98:	0005883a 	mov	r2,zero
    cd9c:	f800283a 	ret
    cda0:	00c00044 	movi	r3,1
    cda4:	003ff406 	br	cd78 <__alt_data_end+0xfc00cd78>

0000cda8 <__umodsi3>:
    cda8:	2005883a 	mov	r2,r4
    cdac:	2900122e 	bgeu	r5,r4,cdf8 <__umodsi3+0x50>
    cdb0:	28001116 	blt	r5,zero,cdf8 <__umodsi3+0x50>
    cdb4:	01800804 	movi	r6,32
    cdb8:	00c00044 	movi	r3,1
    cdbc:	00000206 	br	cdc8 <__umodsi3+0x20>
    cdc0:	30000c26 	beq	r6,zero,cdf4 <__umodsi3+0x4c>
    cdc4:	28000516 	blt	r5,zero,cddc <__umodsi3+0x34>
    cdc8:	294b883a 	add	r5,r5,r5
    cdcc:	31bfffc4 	addi	r6,r6,-1
    cdd0:	18c7883a 	add	r3,r3,r3
    cdd4:	293ffa36 	bltu	r5,r4,cdc0 <__alt_data_end+0xfc00cdc0>
    cdd8:	18000626 	beq	r3,zero,cdf4 <__umodsi3+0x4c>
    cddc:	1806d07a 	srli	r3,r3,1
    cde0:	11400136 	bltu	r2,r5,cde8 <__umodsi3+0x40>
    cde4:	1145c83a 	sub	r2,r2,r5
    cde8:	280ad07a 	srli	r5,r5,1
    cdec:	183ffb1e 	bne	r3,zero,cddc <__alt_data_end+0xfc00cddc>
    cdf0:	f800283a 	ret
    cdf4:	f800283a 	ret
    cdf8:	00c00044 	movi	r3,1
    cdfc:	003ff706 	br	cddc <__alt_data_end+0xfc00cddc>

0000ce00 <__mulsi3>:
    ce00:	0005883a 	mov	r2,zero
    ce04:	20000726 	beq	r4,zero,ce24 <__mulsi3+0x24>
    ce08:	20c0004c 	andi	r3,r4,1
    ce0c:	2008d07a 	srli	r4,r4,1
    ce10:	18000126 	beq	r3,zero,ce18 <__mulsi3+0x18>
    ce14:	1145883a 	add	r2,r2,r5
    ce18:	294b883a 	add	r5,r5,r5
    ce1c:	203ffa1e 	bne	r4,zero,ce08 <__alt_data_end+0xfc00ce08>
    ce20:	f800283a 	ret
    ce24:	f800283a 	ret

0000ce28 <__gesf2>:
    ce28:	2004d5fa 	srli	r2,r4,23
    ce2c:	2806d5fa 	srli	r3,r5,23
    ce30:	01802034 	movhi	r6,128
    ce34:	31bfffc4 	addi	r6,r6,-1
    ce38:	10803fcc 	andi	r2,r2,255
    ce3c:	01c03fc4 	movi	r7,255
    ce40:	3110703a 	and	r8,r6,r4
    ce44:	18c03fcc 	andi	r3,r3,255
    ce48:	314c703a 	and	r6,r6,r5
    ce4c:	2008d7fa 	srli	r4,r4,31
    ce50:	280ad7fa 	srli	r5,r5,31
    ce54:	11c01926 	beq	r2,r7,cebc <__gesf2+0x94>
    ce58:	01c03fc4 	movi	r7,255
    ce5c:	19c00f26 	beq	r3,r7,ce9c <__gesf2+0x74>
    ce60:	1000061e 	bne	r2,zero,ce7c <__gesf2+0x54>
    ce64:	400f003a 	cmpeq	r7,r8,zero
    ce68:	1800071e 	bne	r3,zero,ce88 <__gesf2+0x60>
    ce6c:	3000061e 	bne	r6,zero,ce88 <__gesf2+0x60>
    ce70:	0005883a 	mov	r2,zero
    ce74:	40000e1e 	bne	r8,zero,ceb0 <__gesf2+0x88>
    ce78:	f800283a 	ret
    ce7c:	18000a1e 	bne	r3,zero,cea8 <__gesf2+0x80>
    ce80:	30000b26 	beq	r6,zero,ceb0 <__gesf2+0x88>
    ce84:	000f883a 	mov	r7,zero
    ce88:	29403fcc 	andi	r5,r5,255
    ce8c:	38000726 	beq	r7,zero,ceac <__gesf2+0x84>
    ce90:	28000826 	beq	r5,zero,ceb4 <__gesf2+0x8c>
    ce94:	00800044 	movi	r2,1
    ce98:	f800283a 	ret
    ce9c:	303ff026 	beq	r6,zero,ce60 <__alt_data_end+0xfc00ce60>
    cea0:	00bfff84 	movi	r2,-2
    cea4:	f800283a 	ret
    cea8:	29403fcc 	andi	r5,r5,255
    ceac:	21400526 	beq	r4,r5,cec4 <__gesf2+0x9c>
    ceb0:	203ff826 	beq	r4,zero,ce94 <__alt_data_end+0xfc00ce94>
    ceb4:	00bfffc4 	movi	r2,-1
    ceb8:	f800283a 	ret
    cebc:	403fe626 	beq	r8,zero,ce58 <__alt_data_end+0xfc00ce58>
    cec0:	003ff706 	br	cea0 <__alt_data_end+0xfc00cea0>
    cec4:	18bffa16 	blt	r3,r2,ceb0 <__alt_data_end+0xfc00ceb0>
    cec8:	10c00216 	blt	r2,r3,ced4 <__gesf2+0xac>
    cecc:	323ff836 	bltu	r6,r8,ceb0 <__alt_data_end+0xfc00ceb0>
    ced0:	4180022e 	bgeu	r8,r6,cedc <__gesf2+0xb4>
    ced4:	203fef1e 	bne	r4,zero,ce94 <__alt_data_end+0xfc00ce94>
    ced8:	003ff606 	br	ceb4 <__alt_data_end+0xfc00ceb4>
    cedc:	0005883a 	mov	r2,zero
    cee0:	f800283a 	ret

0000cee4 <__mulsf3>:
    cee4:	defff504 	addi	sp,sp,-44
    cee8:	dc000115 	stw	r16,4(sp)
    ceec:	2020d5fa 	srli	r16,r4,23
    cef0:	dd400615 	stw	r21,24(sp)
    cef4:	202ad7fa 	srli	r21,r4,31
    cef8:	dc800315 	stw	r18,12(sp)
    cefc:	04802034 	movhi	r18,128
    cf00:	df000915 	stw	fp,36(sp)
    cf04:	dd000515 	stw	r20,20(sp)
    cf08:	94bfffc4 	addi	r18,r18,-1
    cf0c:	dfc00a15 	stw	ra,40(sp)
    cf10:	ddc00815 	stw	r23,32(sp)
    cf14:	dd800715 	stw	r22,28(sp)
    cf18:	dcc00415 	stw	r19,16(sp)
    cf1c:	dc400215 	stw	r17,8(sp)
    cf20:	84003fcc 	andi	r16,r16,255
    cf24:	9124703a 	and	r18,r18,r4
    cf28:	a829883a 	mov	r20,r21
    cf2c:	af003fcc 	andi	fp,r21,255
    cf30:	80005426 	beq	r16,zero,d084 <__mulsf3+0x1a0>
    cf34:	00803fc4 	movi	r2,255
    cf38:	80802f26 	beq	r16,r2,cff8 <__mulsf3+0x114>
    cf3c:	91002034 	orhi	r4,r18,128
    cf40:	202490fa 	slli	r18,r4,3
    cf44:	843fe044 	addi	r16,r16,-127
    cf48:	0023883a 	mov	r17,zero
    cf4c:	002f883a 	mov	r23,zero
    cf50:	2804d5fa 	srli	r2,r5,23
    cf54:	282cd7fa 	srli	r22,r5,31
    cf58:	01002034 	movhi	r4,128
    cf5c:	213fffc4 	addi	r4,r4,-1
    cf60:	10803fcc 	andi	r2,r2,255
    cf64:	2166703a 	and	r19,r4,r5
    cf68:	b1803fcc 	andi	r6,r22,255
    cf6c:	10004c26 	beq	r2,zero,d0a0 <__mulsf3+0x1bc>
    cf70:	00c03fc4 	movi	r3,255
    cf74:	10c04726 	beq	r2,r3,d094 <__mulsf3+0x1b0>
    cf78:	99002034 	orhi	r4,r19,128
    cf7c:	202690fa 	slli	r19,r4,3
    cf80:	10bfe044 	addi	r2,r2,-127
    cf84:	0007883a 	mov	r3,zero
    cf88:	80a1883a 	add	r16,r16,r2
    cf8c:	010003c4 	movi	r4,15
    cf90:	1c44b03a 	or	r2,r3,r17
    cf94:	b56af03a 	xor	r21,r22,r21
    cf98:	81c00044 	addi	r7,r16,1
    cf9c:	20806b36 	bltu	r4,r2,d14c <__mulsf3+0x268>
    cfa0:	100490ba 	slli	r2,r2,2
    cfa4:	01000074 	movhi	r4,1
    cfa8:	2133ee04 	addi	r4,r4,-12360
    cfac:	1105883a 	add	r2,r2,r4
    cfb0:	10800017 	ldw	r2,0(r2)
    cfb4:	1000683a 	jmp	r2
    cfb8:	0000d14c 	andi	zero,zero,837
    cfbc:	0000d00c 	andi	zero,zero,832
    cfc0:	0000d00c 	andi	zero,zero,832
    cfc4:	0000d008 	cmpgei	zero,zero,832
    cfc8:	0000d130 	cmpltui	zero,zero,836
    cfcc:	0000d130 	cmpltui	zero,zero,836
    cfd0:	0000d11c 	xori	zero,zero,836
    cfd4:	0000d008 	cmpgei	zero,zero,832
    cfd8:	0000d130 	cmpltui	zero,zero,836
    cfdc:	0000d11c 	xori	zero,zero,836
    cfe0:	0000d130 	cmpltui	zero,zero,836
    cfe4:	0000d008 	cmpgei	zero,zero,832
    cfe8:	0000d13c 	xorhi	zero,zero,836
    cfec:	0000d13c 	xorhi	zero,zero,836
    cff0:	0000d13c 	xorhi	zero,zero,836
    cff4:	0000d24c 	andi	zero,zero,841
    cff8:	90003b1e 	bne	r18,zero,d0e8 <__mulsf3+0x204>
    cffc:	04400204 	movi	r17,8
    d000:	05c00084 	movi	r23,2
    d004:	003fd206 	br	cf50 <__alt_data_end+0xfc00cf50>
    d008:	302b883a 	mov	r21,r6
    d00c:	00800084 	movi	r2,2
    d010:	18802626 	beq	r3,r2,d0ac <__mulsf3+0x1c8>
    d014:	008000c4 	movi	r2,3
    d018:	1880b826 	beq	r3,r2,d2fc <__mulsf3+0x418>
    d01c:	00800044 	movi	r2,1
    d020:	1880af1e 	bne	r3,r2,d2e0 <__mulsf3+0x3fc>
    d024:	a829883a 	mov	r20,r21
    d028:	0007883a 	mov	r3,zero
    d02c:	0009883a 	mov	r4,zero
    d030:	18803fcc 	andi	r2,r3,255
    d034:	100695fa 	slli	r3,r2,23
    d038:	a0803fcc 	andi	r2,r20,255
    d03c:	100a97fa 	slli	r5,r2,31
    d040:	00802034 	movhi	r2,128
    d044:	10bfffc4 	addi	r2,r2,-1
    d048:	2084703a 	and	r2,r4,r2
    d04c:	10c4b03a 	or	r2,r2,r3
    d050:	1144b03a 	or	r2,r2,r5
    d054:	dfc00a17 	ldw	ra,40(sp)
    d058:	df000917 	ldw	fp,36(sp)
    d05c:	ddc00817 	ldw	r23,32(sp)
    d060:	dd800717 	ldw	r22,28(sp)
    d064:	dd400617 	ldw	r21,24(sp)
    d068:	dd000517 	ldw	r20,20(sp)
    d06c:	dcc00417 	ldw	r19,16(sp)
    d070:	dc800317 	ldw	r18,12(sp)
    d074:	dc400217 	ldw	r17,8(sp)
    d078:	dc000117 	ldw	r16,4(sp)
    d07c:	dec00b04 	addi	sp,sp,44
    d080:	f800283a 	ret
    d084:	90000d1e 	bne	r18,zero,d0bc <__mulsf3+0x1d8>
    d088:	04400104 	movi	r17,4
    d08c:	05c00044 	movi	r23,1
    d090:	003faf06 	br	cf50 <__alt_data_end+0xfc00cf50>
    d094:	9806c03a 	cmpne	r3,r19,zero
    d098:	18c00084 	addi	r3,r3,2
    d09c:	003fba06 	br	cf88 <__alt_data_end+0xfc00cf88>
    d0a0:	9800141e 	bne	r19,zero,d0f4 <__mulsf3+0x210>
    d0a4:	00c00044 	movi	r3,1
    d0a8:	003fb706 	br	cf88 <__alt_data_end+0xfc00cf88>
    d0ac:	a829883a 	mov	r20,r21
    d0b0:	00ffffc4 	movi	r3,-1
    d0b4:	0009883a 	mov	r4,zero
    d0b8:	003fdd06 	br	d030 <__alt_data_end+0xfc00d030>
    d0bc:	9009883a 	mov	r4,r18
    d0c0:	d9400015 	stw	r5,0(sp)
    d0c4:	000dd880 	call	dd88 <__clzsi2>
    d0c8:	10fffec4 	addi	r3,r2,-5
    d0cc:	10801d84 	addi	r2,r2,118
    d0d0:	90e4983a 	sll	r18,r18,r3
    d0d4:	00a1c83a 	sub	r16,zero,r2
    d0d8:	0023883a 	mov	r17,zero
    d0dc:	002f883a 	mov	r23,zero
    d0e0:	d9400017 	ldw	r5,0(sp)
    d0e4:	003f9a06 	br	cf50 <__alt_data_end+0xfc00cf50>
    d0e8:	04400304 	movi	r17,12
    d0ec:	05c000c4 	movi	r23,3
    d0f0:	003f9706 	br	cf50 <__alt_data_end+0xfc00cf50>
    d0f4:	9809883a 	mov	r4,r19
    d0f8:	d9800015 	stw	r6,0(sp)
    d0fc:	000dd880 	call	dd88 <__clzsi2>
    d100:	10fffec4 	addi	r3,r2,-5
    d104:	10801d84 	addi	r2,r2,118
    d108:	98e6983a 	sll	r19,r19,r3
    d10c:	0085c83a 	sub	r2,zero,r2
    d110:	0007883a 	mov	r3,zero
    d114:	d9800017 	ldw	r6,0(sp)
    d118:	003f9b06 	br	cf88 <__alt_data_end+0xfc00cf88>
    d11c:	01002034 	movhi	r4,128
    d120:	0029883a 	mov	r20,zero
    d124:	213fffc4 	addi	r4,r4,-1
    d128:	00ffffc4 	movi	r3,-1
    d12c:	003fc006 	br	d030 <__alt_data_end+0xfc00d030>
    d130:	9027883a 	mov	r19,r18
    d134:	b807883a 	mov	r3,r23
    d138:	003fb406 	br	d00c <__alt_data_end+0xfc00d00c>
    d13c:	9027883a 	mov	r19,r18
    d140:	e02b883a 	mov	r21,fp
    d144:	b807883a 	mov	r3,r23
    d148:	003fb006 	br	d00c <__alt_data_end+0xfc00d00c>
    d14c:	9028d43a 	srli	r20,r18,16
    d150:	982cd43a 	srli	r22,r19,16
    d154:	94bfffcc 	andi	r18,r18,65535
    d158:	9cffffcc 	andi	r19,r19,65535
    d15c:	980b883a 	mov	r5,r19
    d160:	9009883a 	mov	r4,r18
    d164:	d9c00015 	stw	r7,0(sp)
    d168:	000ce000 	call	ce00 <__mulsi3>
    d16c:	a00b883a 	mov	r5,r20
    d170:	9809883a 	mov	r4,r19
    d174:	1023883a 	mov	r17,r2
    d178:	000ce000 	call	ce00 <__mulsi3>
    d17c:	a009883a 	mov	r4,r20
    d180:	b00b883a 	mov	r5,r22
    d184:	1027883a 	mov	r19,r2
    d188:	000ce000 	call	ce00 <__mulsi3>
    d18c:	b00b883a 	mov	r5,r22
    d190:	9009883a 	mov	r4,r18
    d194:	1029883a 	mov	r20,r2
    d198:	000ce000 	call	ce00 <__mulsi3>
    d19c:	8806d43a 	srli	r3,r17,16
    d1a0:	14c5883a 	add	r2,r2,r19
    d1a4:	d9c00017 	ldw	r7,0(sp)
    d1a8:	1885883a 	add	r2,r3,r2
    d1ac:	14c0022e 	bgeu	r2,r19,d1b8 <__mulsf3+0x2d4>
    d1b0:	00c00074 	movhi	r3,1
    d1b4:	a0e9883a 	add	r20,r20,r3
    d1b8:	1026943a 	slli	r19,r2,16
    d1bc:	8c7fffcc 	andi	r17,r17,65535
    d1c0:	1004d43a 	srli	r2,r2,16
    d1c4:	9c63883a 	add	r17,r19,r17
    d1c8:	882691ba 	slli	r19,r17,6
    d1cc:	1505883a 	add	r2,r2,r20
    d1d0:	8822d6ba 	srli	r17,r17,26
    d1d4:	100891ba 	slli	r4,r2,6
    d1d8:	9826c03a 	cmpne	r19,r19,zero
    d1dc:	9c62b03a 	or	r17,r19,r17
    d1e0:	8926b03a 	or	r19,r17,r4
    d1e4:	9882002c 	andhi	r2,r19,2048
    d1e8:	10000426 	beq	r2,zero,d1fc <__mulsf3+0x318>
    d1ec:	9804d07a 	srli	r2,r19,1
    d1f0:	9900004c 	andi	r4,r19,1
    d1f4:	3821883a 	mov	r16,r7
    d1f8:	1126b03a 	or	r19,r2,r4
    d1fc:	80c01fc4 	addi	r3,r16,127
    d200:	00c0210e 	bge	zero,r3,d288 <__mulsf3+0x3a4>
    d204:	988001cc 	andi	r2,r19,7
    d208:	10000426 	beq	r2,zero,d21c <__mulsf3+0x338>
    d20c:	988003cc 	andi	r2,r19,15
    d210:	01000104 	movi	r4,4
    d214:	11000126 	beq	r2,r4,d21c <__mulsf3+0x338>
    d218:	9927883a 	add	r19,r19,r4
    d21c:	9882002c 	andhi	r2,r19,2048
    d220:	10000426 	beq	r2,zero,d234 <__mulsf3+0x350>
    d224:	00be0034 	movhi	r2,63488
    d228:	10bfffc4 	addi	r2,r2,-1
    d22c:	80c02004 	addi	r3,r16,128
    d230:	98a6703a 	and	r19,r19,r2
    d234:	00803f84 	movi	r2,254
    d238:	10ff9c16 	blt	r2,r3,d0ac <__alt_data_end+0xfc00d0ac>
    d23c:	980891ba 	slli	r4,r19,6
    d240:	a829883a 	mov	r20,r21
    d244:	2008d27a 	srli	r4,r4,9
    d248:	003f7906 	br	d030 <__alt_data_end+0xfc00d030>
    d24c:	9080102c 	andhi	r2,r18,64
    d250:	10000826 	beq	r2,zero,d274 <__mulsf3+0x390>
    d254:	9880102c 	andhi	r2,r19,64
    d258:	1000061e 	bne	r2,zero,d274 <__mulsf3+0x390>
    d25c:	00802034 	movhi	r2,128
    d260:	99001034 	orhi	r4,r19,64
    d264:	10bfffc4 	addi	r2,r2,-1
    d268:	b029883a 	mov	r20,r22
    d26c:	2088703a 	and	r4,r4,r2
    d270:	003fad06 	br	d128 <__alt_data_end+0xfc00d128>
    d274:	00802034 	movhi	r2,128
    d278:	91001034 	orhi	r4,r18,64
    d27c:	10bfffc4 	addi	r2,r2,-1
    d280:	2088703a 	and	r4,r4,r2
    d284:	003fa806 	br	d128 <__alt_data_end+0xfc00d128>
    d288:	00800044 	movi	r2,1
    d28c:	10c7c83a 	sub	r3,r2,r3
    d290:	008006c4 	movi	r2,27
    d294:	10ff6316 	blt	r2,r3,d024 <__alt_data_end+0xfc00d024>
    d298:	00800804 	movi	r2,32
    d29c:	10c5c83a 	sub	r2,r2,r3
    d2a0:	9884983a 	sll	r2,r19,r2
    d2a4:	98c6d83a 	srl	r3,r19,r3
    d2a8:	1004c03a 	cmpne	r2,r2,zero
    d2ac:	1884b03a 	or	r2,r3,r2
    d2b0:	10c001cc 	andi	r3,r2,7
    d2b4:	18000426 	beq	r3,zero,d2c8 <__mulsf3+0x3e4>
    d2b8:	10c003cc 	andi	r3,r2,15
    d2bc:	01000104 	movi	r4,4
    d2c0:	19000126 	beq	r3,r4,d2c8 <__mulsf3+0x3e4>
    d2c4:	1105883a 	add	r2,r2,r4
    d2c8:	10c1002c 	andhi	r3,r2,1024
    d2cc:	18000626 	beq	r3,zero,d2e8 <__mulsf3+0x404>
    d2d0:	a829883a 	mov	r20,r21
    d2d4:	00c00044 	movi	r3,1
    d2d8:	0009883a 	mov	r4,zero
    d2dc:	003f5406 	br	d030 <__alt_data_end+0xfc00d030>
    d2e0:	3821883a 	mov	r16,r7
    d2e4:	003fc506 	br	d1fc <__alt_data_end+0xfc00d1fc>
    d2e8:	100491ba 	slli	r2,r2,6
    d2ec:	a829883a 	mov	r20,r21
    d2f0:	0007883a 	mov	r3,zero
    d2f4:	1008d27a 	srli	r4,r2,9
    d2f8:	003f4d06 	br	d030 <__alt_data_end+0xfc00d030>
    d2fc:	00802034 	movhi	r2,128
    d300:	99001034 	orhi	r4,r19,64
    d304:	10bfffc4 	addi	r2,r2,-1
    d308:	a829883a 	mov	r20,r21
    d30c:	2088703a 	and	r4,r4,r2
    d310:	003f8506 	br	d128 <__alt_data_end+0xfc00d128>

0000d314 <__subsf3>:
    d314:	defffc04 	addi	sp,sp,-16
    d318:	280cd5fa 	srli	r6,r5,23
    d31c:	dc000015 	stw	r16,0(sp)
    d320:	01c02034 	movhi	r7,128
    d324:	2020d5fa 	srli	r16,r4,23
    d328:	39ffffc4 	addi	r7,r7,-1
    d32c:	3906703a 	and	r3,r7,r4
    d330:	dc400115 	stw	r17,4(sp)
    d334:	394e703a 	and	r7,r7,r5
    d338:	2022d7fa 	srli	r17,r4,31
    d33c:	dfc00315 	stw	ra,12(sp)
    d340:	dc800215 	stw	r18,8(sp)
    d344:	31803fcc 	andi	r6,r6,255
    d348:	01003fc4 	movi	r4,255
    d34c:	84003fcc 	andi	r16,r16,255
    d350:	180690fa 	slli	r3,r3,3
    d354:	2804d7fa 	srli	r2,r5,31
    d358:	380e90fa 	slli	r7,r7,3
    d35c:	31006d26 	beq	r6,r4,d514 <__subsf3+0x200>
    d360:	1080005c 	xori	r2,r2,1
    d364:	8189c83a 	sub	r4,r16,r6
    d368:	14404f26 	beq	r2,r17,d4a8 <__subsf3+0x194>
    d36c:	0100770e 	bge	zero,r4,d54c <__subsf3+0x238>
    d370:	30001e1e 	bne	r6,zero,d3ec <__subsf3+0xd8>
    d374:	38006a1e 	bne	r7,zero,d520 <__subsf3+0x20c>
    d378:	188001cc 	andi	r2,r3,7
    d37c:	10000426 	beq	r2,zero,d390 <__subsf3+0x7c>
    d380:	188003cc 	andi	r2,r3,15
    d384:	01000104 	movi	r4,4
    d388:	11000126 	beq	r2,r4,d390 <__subsf3+0x7c>
    d38c:	1907883a 	add	r3,r3,r4
    d390:	1881002c 	andhi	r2,r3,1024
    d394:	10003926 	beq	r2,zero,d47c <__subsf3+0x168>
    d398:	84000044 	addi	r16,r16,1
    d39c:	00803fc4 	movi	r2,255
    d3a0:	80807526 	beq	r16,r2,d578 <__subsf3+0x264>
    d3a4:	180691ba 	slli	r3,r3,6
    d3a8:	8880004c 	andi	r2,r17,1
    d3ac:	180ad27a 	srli	r5,r3,9
    d3b0:	84003fcc 	andi	r16,r16,255
    d3b4:	800695fa 	slli	r3,r16,23
    d3b8:	10803fcc 	andi	r2,r2,255
    d3bc:	01002034 	movhi	r4,128
    d3c0:	213fffc4 	addi	r4,r4,-1
    d3c4:	100497fa 	slli	r2,r2,31
    d3c8:	2920703a 	and	r16,r5,r4
    d3cc:	80e0b03a 	or	r16,r16,r3
    d3d0:	8084b03a 	or	r2,r16,r2
    d3d4:	dfc00317 	ldw	ra,12(sp)
    d3d8:	dc800217 	ldw	r18,8(sp)
    d3dc:	dc400117 	ldw	r17,4(sp)
    d3e0:	dc000017 	ldw	r16,0(sp)
    d3e4:	dec00404 	addi	sp,sp,16
    d3e8:	f800283a 	ret
    d3ec:	00803fc4 	movi	r2,255
    d3f0:	80bfe126 	beq	r16,r2,d378 <__alt_data_end+0xfc00d378>
    d3f4:	39c10034 	orhi	r7,r7,1024
    d3f8:	008006c4 	movi	r2,27
    d3fc:	11007416 	blt	r2,r4,d5d0 <__subsf3+0x2bc>
    d400:	00800804 	movi	r2,32
    d404:	1105c83a 	sub	r2,r2,r4
    d408:	3884983a 	sll	r2,r7,r2
    d40c:	390ed83a 	srl	r7,r7,r4
    d410:	1008c03a 	cmpne	r4,r2,zero
    d414:	390eb03a 	or	r7,r7,r4
    d418:	19c7c83a 	sub	r3,r3,r7
    d41c:	1881002c 	andhi	r2,r3,1024
    d420:	10001426 	beq	r2,zero,d474 <__subsf3+0x160>
    d424:	04810034 	movhi	r18,1024
    d428:	94bfffc4 	addi	r18,r18,-1
    d42c:	1ca4703a 	and	r18,r3,r18
    d430:	9009883a 	mov	r4,r18
    d434:	000dd880 	call	dd88 <__clzsi2>
    d438:	10bffec4 	addi	r2,r2,-5
    d43c:	90a4983a 	sll	r18,r18,r2
    d440:	14005116 	blt	r2,r16,d588 <__subsf3+0x274>
    d444:	1405c83a 	sub	r2,r2,r16
    d448:	10c00044 	addi	r3,r2,1
    d44c:	00800804 	movi	r2,32
    d450:	10c5c83a 	sub	r2,r2,r3
    d454:	9084983a 	sll	r2,r18,r2
    d458:	90e4d83a 	srl	r18,r18,r3
    d45c:	0021883a 	mov	r16,zero
    d460:	1006c03a 	cmpne	r3,r2,zero
    d464:	90c6b03a 	or	r3,r18,r3
    d468:	003fc306 	br	d378 <__alt_data_end+0xfc00d378>
    d46c:	2000e026 	beq	r4,zero,d7f0 <__subsf3+0x4dc>
    d470:	2007883a 	mov	r3,r4
    d474:	188001cc 	andi	r2,r3,7
    d478:	103fc11e 	bne	r2,zero,d380 <__alt_data_end+0xfc00d380>
    d47c:	180ad0fa 	srli	r5,r3,3
    d480:	00c03fc4 	movi	r3,255
    d484:	8880004c 	andi	r2,r17,1
    d488:	80c0031e 	bne	r16,r3,d498 <__subsf3+0x184>
    d48c:	28006d26 	beq	r5,zero,d644 <__subsf3+0x330>
    d490:	29401034 	orhi	r5,r5,64
    d494:	043fffc4 	movi	r16,-1
    d498:	00c02034 	movhi	r3,128
    d49c:	18ffffc4 	addi	r3,r3,-1
    d4a0:	28ca703a 	and	r5,r5,r3
    d4a4:	003fc206 	br	d3b0 <__alt_data_end+0xfc00d3b0>
    d4a8:	01003c0e 	bge	zero,r4,d59c <__subsf3+0x288>
    d4ac:	30002126 	beq	r6,zero,d534 <__subsf3+0x220>
    d4b0:	01403fc4 	movi	r5,255
    d4b4:	817fb026 	beq	r16,r5,d378 <__alt_data_end+0xfc00d378>
    d4b8:	39c10034 	orhi	r7,r7,1024
    d4bc:	014006c4 	movi	r5,27
    d4c0:	29007416 	blt	r5,r4,d694 <__subsf3+0x380>
    d4c4:	01400804 	movi	r5,32
    d4c8:	290bc83a 	sub	r5,r5,r4
    d4cc:	394a983a 	sll	r5,r7,r5
    d4d0:	390ed83a 	srl	r7,r7,r4
    d4d4:	2808c03a 	cmpne	r4,r5,zero
    d4d8:	390eb03a 	or	r7,r7,r4
    d4dc:	19c7883a 	add	r3,r3,r7
    d4e0:	1901002c 	andhi	r4,r3,1024
    d4e4:	20003826 	beq	r4,zero,d5c8 <__subsf3+0x2b4>
    d4e8:	84000044 	addi	r16,r16,1
    d4ec:	01003fc4 	movi	r4,255
    d4f0:	81005426 	beq	r16,r4,d644 <__subsf3+0x330>
    d4f4:	1023883a 	mov	r17,r2
    d4f8:	00bf0034 	movhi	r2,64512
    d4fc:	10bfffc4 	addi	r2,r2,-1
    d500:	1900004c 	andi	r4,r3,1
    d504:	1886703a 	and	r3,r3,r2
    d508:	1806d07a 	srli	r3,r3,1
    d50c:	1906b03a 	or	r3,r3,r4
    d510:	003f9906 	br	d378 <__alt_data_end+0xfc00d378>
    d514:	383f9226 	beq	r7,zero,d360 <__alt_data_end+0xfc00d360>
    d518:	10803fcc 	andi	r2,r2,255
    d51c:	003f9106 	br	d364 <__alt_data_end+0xfc00d364>
    d520:	213fffc4 	addi	r4,r4,-1
    d524:	203fbc26 	beq	r4,zero,d418 <__alt_data_end+0xfc00d418>
    d528:	00803fc4 	movi	r2,255
    d52c:	80bfb21e 	bne	r16,r2,d3f8 <__alt_data_end+0xfc00d3f8>
    d530:	003f9106 	br	d378 <__alt_data_end+0xfc00d378>
    d534:	383f9026 	beq	r7,zero,d378 <__alt_data_end+0xfc00d378>
    d538:	213fffc4 	addi	r4,r4,-1
    d53c:	203fe726 	beq	r4,zero,d4dc <__alt_data_end+0xfc00d4dc>
    d540:	01403fc4 	movi	r5,255
    d544:	817fdd1e 	bne	r16,r5,d4bc <__alt_data_end+0xfc00d4bc>
    d548:	003f8b06 	br	d378 <__alt_data_end+0xfc00d378>
    d54c:	2000221e 	bne	r4,zero,d5d8 <__subsf3+0x2c4>
    d550:	81000044 	addi	r4,r16,1
    d554:	21003fcc 	andi	r4,r4,255
    d558:	01400044 	movi	r5,1
    d55c:	2900470e 	bge	r5,r4,d67c <__subsf3+0x368>
    d560:	19e5c83a 	sub	r18,r3,r7
    d564:	9141002c 	andhi	r5,r18,1024
    d568:	28002d26 	beq	r5,zero,d620 <__subsf3+0x30c>
    d56c:	38e5c83a 	sub	r18,r7,r3
    d570:	1023883a 	mov	r17,r2
    d574:	003fae06 	br	d430 <__alt_data_end+0xfc00d430>
    d578:	8880004c 	andi	r2,r17,1
    d57c:	043fffc4 	movi	r16,-1
    d580:	000b883a 	mov	r5,zero
    d584:	003f8a06 	br	d3b0 <__alt_data_end+0xfc00d3b0>
    d588:	00ff0034 	movhi	r3,64512
    d58c:	18ffffc4 	addi	r3,r3,-1
    d590:	80a1c83a 	sub	r16,r16,r2
    d594:	90c6703a 	and	r3,r18,r3
    d598:	003f7706 	br	d378 <__alt_data_end+0xfc00d378>
    d59c:	2000431e 	bne	r4,zero,d6ac <__subsf3+0x398>
    d5a0:	81000044 	addi	r4,r16,1
    d5a4:	21803fcc 	andi	r6,r4,255
    d5a8:	01400044 	movi	r5,1
    d5ac:	2980280e 	bge	r5,r6,d650 <__subsf3+0x33c>
    d5b0:	01403fc4 	movi	r5,255
    d5b4:	21402326 	beq	r4,r5,d644 <__subsf3+0x330>
    d5b8:	19c7883a 	add	r3,r3,r7
    d5bc:	1806d07a 	srli	r3,r3,1
    d5c0:	2021883a 	mov	r16,r4
    d5c4:	003f6c06 	br	d378 <__alt_data_end+0xfc00d378>
    d5c8:	1023883a 	mov	r17,r2
    d5cc:	003fa906 	br	d474 <__alt_data_end+0xfc00d474>
    d5d0:	01c00044 	movi	r7,1
    d5d4:	003f9006 	br	d418 <__alt_data_end+0xfc00d418>
    d5d8:	8000151e 	bne	r16,zero,d630 <__subsf3+0x31c>
    d5dc:	18002f26 	beq	r3,zero,d69c <__subsf3+0x388>
    d5e0:	0108303a 	nor	r4,zero,r4
    d5e4:	20000a26 	beq	r4,zero,d610 <__subsf3+0x2fc>
    d5e8:	01403fc4 	movi	r5,255
    d5ec:	31402b26 	beq	r6,r5,d69c <__subsf3+0x388>
    d5f0:	014006c4 	movi	r5,27
    d5f4:	29006e16 	blt	r5,r4,d7b0 <__subsf3+0x49c>
    d5f8:	01400804 	movi	r5,32
    d5fc:	290bc83a 	sub	r5,r5,r4
    d600:	194a983a 	sll	r5,r3,r5
    d604:	1908d83a 	srl	r4,r3,r4
    d608:	2806c03a 	cmpne	r3,r5,zero
    d60c:	20c6b03a 	or	r3,r4,r3
    d610:	38c7c83a 	sub	r3,r7,r3
    d614:	3021883a 	mov	r16,r6
    d618:	1023883a 	mov	r17,r2
    d61c:	003f7f06 	br	d41c <__alt_data_end+0xfc00d41c>
    d620:	903f831e 	bne	r18,zero,d430 <__alt_data_end+0xfc00d430>
    d624:	0005883a 	mov	r2,zero
    d628:	0021883a 	mov	r16,zero
    d62c:	003f9a06 	br	d498 <__alt_data_end+0xfc00d498>
    d630:	01403fc4 	movi	r5,255
    d634:	31401926 	beq	r6,r5,d69c <__subsf3+0x388>
    d638:	0109c83a 	sub	r4,zero,r4
    d63c:	18c10034 	orhi	r3,r3,1024
    d640:	003feb06 	br	d5f0 <__alt_data_end+0xfc00d5f0>
    d644:	043fffc4 	movi	r16,-1
    d648:	000b883a 	mov	r5,zero
    d64c:	003f5806 	br	d3b0 <__alt_data_end+0xfc00d3b0>
    d650:	8000481e 	bne	r16,zero,d774 <__subsf3+0x460>
    d654:	18006226 	beq	r3,zero,d7e0 <__subsf3+0x4cc>
    d658:	383f4726 	beq	r7,zero,d378 <__alt_data_end+0xfc00d378>
    d65c:	19c7883a 	add	r3,r3,r7
    d660:	1881002c 	andhi	r2,r3,1024
    d664:	103f8326 	beq	r2,zero,d474 <__alt_data_end+0xfc00d474>
    d668:	00bf0034 	movhi	r2,64512
    d66c:	10bfffc4 	addi	r2,r2,-1
    d670:	2821883a 	mov	r16,r5
    d674:	1886703a 	and	r3,r3,r2
    d678:	003f3f06 	br	d378 <__alt_data_end+0xfc00d378>
    d67c:	80001c1e 	bne	r16,zero,d6f0 <__subsf3+0x3dc>
    d680:	1800261e 	bne	r3,zero,d71c <__subsf3+0x408>
    d684:	38004c26 	beq	r7,zero,d7b8 <__subsf3+0x4a4>
    d688:	3807883a 	mov	r3,r7
    d68c:	1023883a 	mov	r17,r2
    d690:	003f3906 	br	d378 <__alt_data_end+0xfc00d378>
    d694:	01c00044 	movi	r7,1
    d698:	003f9006 	br	d4dc <__alt_data_end+0xfc00d4dc>
    d69c:	3807883a 	mov	r3,r7
    d6a0:	3021883a 	mov	r16,r6
    d6a4:	1023883a 	mov	r17,r2
    d6a8:	003f3306 	br	d378 <__alt_data_end+0xfc00d378>
    d6ac:	8000161e 	bne	r16,zero,d708 <__subsf3+0x3f4>
    d6b0:	18002d26 	beq	r3,zero,d768 <__subsf3+0x454>
    d6b4:	0108303a 	nor	r4,zero,r4
    d6b8:	20000a26 	beq	r4,zero,d6e4 <__subsf3+0x3d0>
    d6bc:	01403fc4 	movi	r5,255
    d6c0:	31402926 	beq	r6,r5,d768 <__subsf3+0x454>
    d6c4:	014006c4 	movi	r5,27
    d6c8:	29004716 	blt	r5,r4,d7e8 <__subsf3+0x4d4>
    d6cc:	01400804 	movi	r5,32
    d6d0:	290bc83a 	sub	r5,r5,r4
    d6d4:	194a983a 	sll	r5,r3,r5
    d6d8:	1908d83a 	srl	r4,r3,r4
    d6dc:	2806c03a 	cmpne	r3,r5,zero
    d6e0:	20c6b03a 	or	r3,r4,r3
    d6e4:	19c7883a 	add	r3,r3,r7
    d6e8:	3021883a 	mov	r16,r6
    d6ec:	003f7c06 	br	d4e0 <__alt_data_end+0xfc00d4e0>
    d6f0:	1800111e 	bne	r3,zero,d738 <__subsf3+0x424>
    d6f4:	38003326 	beq	r7,zero,d7c4 <__subsf3+0x4b0>
    d6f8:	3807883a 	mov	r3,r7
    d6fc:	1023883a 	mov	r17,r2
    d700:	04003fc4 	movi	r16,255
    d704:	003f1c06 	br	d378 <__alt_data_end+0xfc00d378>
    d708:	01403fc4 	movi	r5,255
    d70c:	31401626 	beq	r6,r5,d768 <__subsf3+0x454>
    d710:	0109c83a 	sub	r4,zero,r4
    d714:	18c10034 	orhi	r3,r3,1024
    d718:	003fea06 	br	d6c4 <__alt_data_end+0xfc00d6c4>
    d71c:	383f1626 	beq	r7,zero,d378 <__alt_data_end+0xfc00d378>
    d720:	19c9c83a 	sub	r4,r3,r7
    d724:	2141002c 	andhi	r5,r4,1024
    d728:	283f5026 	beq	r5,zero,d46c <__alt_data_end+0xfc00d46c>
    d72c:	38c7c83a 	sub	r3,r7,r3
    d730:	1023883a 	mov	r17,r2
    d734:	003f1006 	br	d378 <__alt_data_end+0xfc00d378>
    d738:	38001b26 	beq	r7,zero,d7a8 <__subsf3+0x494>
    d73c:	1806d0fa 	srli	r3,r3,3
    d740:	1900102c 	andhi	r4,r3,64
    d744:	20000526 	beq	r4,zero,d75c <__subsf3+0x448>
    d748:	380ed0fa 	srli	r7,r7,3
    d74c:	3900102c 	andhi	r4,r7,64
    d750:	2000021e 	bne	r4,zero,d75c <__subsf3+0x448>
    d754:	3807883a 	mov	r3,r7
    d758:	1023883a 	mov	r17,r2
    d75c:	180690fa 	slli	r3,r3,3
    d760:	04003fc4 	movi	r16,255
    d764:	003f0406 	br	d378 <__alt_data_end+0xfc00d378>
    d768:	3807883a 	mov	r3,r7
    d76c:	3021883a 	mov	r16,r6
    d770:	003f0106 	br	d378 <__alt_data_end+0xfc00d378>
    d774:	18001726 	beq	r3,zero,d7d4 <__subsf3+0x4c0>
    d778:	38000b26 	beq	r7,zero,d7a8 <__subsf3+0x494>
    d77c:	1806d0fa 	srli	r3,r3,3
    d780:	1900102c 	andhi	r4,r3,64
    d784:	20000426 	beq	r4,zero,d798 <__subsf3+0x484>
    d788:	380ed0fa 	srli	r7,r7,3
    d78c:	3900102c 	andhi	r4,r7,64
    d790:	2000011e 	bne	r4,zero,d798 <__subsf3+0x484>
    d794:	3807883a 	mov	r3,r7
    d798:	180690fa 	slli	r3,r3,3
    d79c:	1023883a 	mov	r17,r2
    d7a0:	04003fc4 	movi	r16,255
    d7a4:	003ef406 	br	d378 <__alt_data_end+0xfc00d378>
    d7a8:	04003fc4 	movi	r16,255
    d7ac:	003ef206 	br	d378 <__alt_data_end+0xfc00d378>
    d7b0:	00c00044 	movi	r3,1
    d7b4:	003f9606 	br	d610 <__alt_data_end+0xfc00d610>
    d7b8:	000b883a 	mov	r5,zero
    d7bc:	0005883a 	mov	r2,zero
    d7c0:	003f3506 	br	d498 <__alt_data_end+0xfc00d498>
    d7c4:	01402034 	movhi	r5,128
    d7c8:	297fffc4 	addi	r5,r5,-1
    d7cc:	0005883a 	mov	r2,zero
    d7d0:	003f2f06 	br	d490 <__alt_data_end+0xfc00d490>
    d7d4:	3807883a 	mov	r3,r7
    d7d8:	04003fc4 	movi	r16,255
    d7dc:	003ee606 	br	d378 <__alt_data_end+0xfc00d378>
    d7e0:	3807883a 	mov	r3,r7
    d7e4:	003ee406 	br	d378 <__alt_data_end+0xfc00d378>
    d7e8:	00c00044 	movi	r3,1
    d7ec:	003fbd06 	br	d6e4 <__alt_data_end+0xfc00d6e4>
    d7f0:	0005883a 	mov	r2,zero
    d7f4:	003f2806 	br	d498 <__alt_data_end+0xfc00d498>

0000d7f8 <__fixsfsi>:
    d7f8:	200ad5fa 	srli	r5,r4,23
    d7fc:	00c02034 	movhi	r3,128
    d800:	18ffffc4 	addi	r3,r3,-1
    d804:	29403fcc 	andi	r5,r5,255
    d808:	00801f84 	movi	r2,126
    d80c:	1906703a 	and	r3,r3,r4
    d810:	2008d7fa 	srli	r4,r4,31
    d814:	11400e0e 	bge	r2,r5,d850 <__fixsfsi+0x58>
    d818:	00802744 	movi	r2,157
    d81c:	11400816 	blt	r2,r5,d840 <__fixsfsi+0x48>
    d820:	00802544 	movi	r2,149
    d824:	18c02034 	orhi	r3,r3,128
    d828:	11400b0e 	bge	r2,r5,d858 <__fixsfsi+0x60>
    d82c:	28bfda84 	addi	r2,r5,-150
    d830:	1884983a 	sll	r2,r3,r2
    d834:	20000726 	beq	r4,zero,d854 <__fixsfsi+0x5c>
    d838:	0085c83a 	sub	r2,zero,r2
    d83c:	f800283a 	ret
    d840:	00a00034 	movhi	r2,32768
    d844:	10bfffc4 	addi	r2,r2,-1
    d848:	2085883a 	add	r2,r4,r2
    d84c:	f800283a 	ret
    d850:	0005883a 	mov	r2,zero
    d854:	f800283a 	ret
    d858:	00802584 	movi	r2,150
    d85c:	1145c83a 	sub	r2,r2,r5
    d860:	1884d83a 	srl	r2,r3,r2
    d864:	003ff306 	br	d834 <__alt_data_end+0xfc00d834>

0000d868 <_Unwind_ForcedUnwind_Phase2>:
    d868:	defff404 	addi	sp,sp,-48
    d86c:	dd800915 	stw	r22,36(sp)
    d870:	058000f4 	movhi	r22,3
    d874:	ddc00a15 	stw	r23,40(sp)
    d878:	dd400815 	stw	r21,32(sp)
    d87c:	dd000715 	stw	r20,28(sp)
    d880:	dcc00615 	stw	r19,24(sp)
    d884:	dc400415 	stw	r17,16(sp)
    d888:	dc000315 	stw	r16,12(sp)
    d88c:	dfc00b15 	stw	ra,44(sp)
    d890:	dc800515 	stw	r18,20(sp)
    d894:	2021883a 	mov	r16,r4
    d898:	2823883a 	mov	r17,r5
    d89c:	24c00317 	ldw	r19,12(r4)
    d8a0:	25000417 	ldw	r20,16(r4)
    d8a4:	28c00017 	ldw	r3,0(r5)
    d8a8:	b5829a04 	addi	r22,r22,2664
    d8ac:	054001c4 	movi	r21,7
    d8b0:	05c00204 	movi	r23,8
    d8b4:	00001606 	br	d910 <_Unwind_ForcedUnwind_Phase2+0xa8>
    d8b8:	81800017 	ldw	r6,0(r16)
    d8bc:	81c00117 	ldw	r7,4(r16)
    d8c0:	1c800617 	ldw	r18,24(r3)
    d8c4:	dd000215 	stw	r20,8(sp)
    d8c8:	dc400115 	stw	r17,4(sp)
    d8cc:	dc000015 	stw	r16,0(sp)
    d8d0:	983ee83a 	callr	r19
    d8d4:	01400284 	movi	r5,10
    d8d8:	01000044 	movi	r4,1
    d8dc:	1000241e 	bne	r2,zero,d970 <_Unwind_ForcedUnwind_Phase2+0x108>
    d8e0:	90000726 	beq	r18,zero,d900 <_Unwind_ForcedUnwind_Phase2+0x98>
    d8e4:	81800017 	ldw	r6,0(r16)
    d8e8:	81c00117 	ldw	r7,4(r16)
    d8ec:	dc400115 	stw	r17,4(sp)
    d8f0:	dc000015 	stw	r16,0(sp)
    d8f4:	903ee83a 	callr	r18
    d8f8:	15401f26 	beq	r2,r21,d978 <_Unwind_ForcedUnwind_Phase2+0x110>
    d8fc:	15c01c1e 	bne	r2,r23,d970 <_Unwind_ForcedUnwind_Phase2+0x108>
    d900:	88800017 	ldw	r2,0(r17)
    d904:	10c00017 	ldw	r3,0(r2)
    d908:	b0c00015 	stw	r3,0(r22)
    d90c:	88c00015 	stw	r3,0(r17)
    d910:	01400284 	movi	r5,10
    d914:	01000044 	movi	r4,1
    d918:	183fe71e 	bne	r3,zero,d8b8 <__alt_data_end+0xfc00d8b8>
    d91c:	81800017 	ldw	r6,0(r16)
    d920:	81c00117 	ldw	r7,4(r16)
    d924:	01400684 	movi	r5,26
    d928:	dd000215 	stw	r20,8(sp)
    d92c:	dc400115 	stw	r17,4(sp)
    d930:	dc000015 	stw	r16,0(sp)
    d934:	01000044 	movi	r4,1
    d938:	983ee83a 	callr	r19
    d93c:	10000c1e 	bne	r2,zero,d970 <_Unwind_ForcedUnwind_Phase2+0x108>
    d940:	00800144 	movi	r2,5
    d944:	dfc00b17 	ldw	ra,44(sp)
    d948:	ddc00a17 	ldw	r23,40(sp)
    d94c:	dd800917 	ldw	r22,36(sp)
    d950:	dd400817 	ldw	r21,32(sp)
    d954:	dd000717 	ldw	r20,28(sp)
    d958:	dcc00617 	ldw	r19,24(sp)
    d95c:	dc800517 	ldw	r18,20(sp)
    d960:	dc400417 	ldw	r17,16(sp)
    d964:	dc000317 	ldw	r16,12(sp)
    d968:	dec00c04 	addi	sp,sp,48
    d96c:	f800283a 	ret
    d970:	00800084 	movi	r2,2
    d974:	003ff306 	br	d944 <__alt_data_end+0xfc00d944>
    d978:	a805883a 	mov	r2,r21
    d97c:	003ff106 	br	d944 <__alt_data_end+0xfc00d944>

0000d980 <_Unwind_RaiseException_Phase2>:
    d980:	28c00017 	ldw	r3,0(r5)
    d984:	defff804 	addi	sp,sp,-32
    d988:	dcc00515 	stw	r19,20(sp)
    d98c:	dc800415 	stw	r18,16(sp)
    d990:	dc400315 	stw	r17,12(sp)
    d994:	dc000215 	stw	r16,8(sp)
    d998:	dfc00715 	stw	ra,28(sp)
    d99c:	dd000615 	stw	r20,24(sp)
    d9a0:	2823883a 	mov	r17,r5
    d9a4:	2021883a 	mov	r16,r4
    d9a8:	048001c4 	movi	r18,7
    d9ac:	04c00204 	movi	r19,8
    d9b0:	18001326 	beq	r3,zero,da00 <_Unwind_RaiseException_Phase2+0x80>
    d9b4:	81000417 	ldw	r4,16(r16)
    d9b8:	1a000617 	ldw	r8,24(r3)
    d9bc:	19001926 	beq	r3,r4,da24 <_Unwind_RaiseException_Phase2+0xa4>
    d9c0:	40000c26 	beq	r8,zero,d9f4 <_Unwind_RaiseException_Phase2+0x74>
    d9c4:	01400084 	movi	r5,2
    d9c8:	0029883a 	mov	r20,zero
    d9cc:	81800017 	ldw	r6,0(r16)
    d9d0:	81c00117 	ldw	r7,4(r16)
    d9d4:	01000044 	movi	r4,1
    d9d8:	dc400115 	stw	r17,4(sp)
    d9dc:	dc000015 	stw	r16,0(sp)
    d9e0:	403ee83a 	callr	r8
    d9e4:	14801326 	beq	r2,r18,da34 <_Unwind_RaiseException_Phase2+0xb4>
    d9e8:	14c0051e 	bne	r2,r19,da00 <_Unwind_RaiseException_Phase2+0x80>
    d9ec:	a000131e 	bne	r20,zero,da3c <_Unwind_RaiseException_Phase2+0xbc>
    d9f0:	88c00017 	ldw	r3,0(r17)
    d9f4:	18c00017 	ldw	r3,0(r3)
    d9f8:	88c00015 	stw	r3,0(r17)
    d9fc:	183fed1e 	bne	r3,zero,d9b4 <__alt_data_end+0xfc00d9b4>
    da00:	00800084 	movi	r2,2
    da04:	dfc00717 	ldw	ra,28(sp)
    da08:	dd000617 	ldw	r20,24(sp)
    da0c:	dcc00517 	ldw	r19,20(sp)
    da10:	dc800417 	ldw	r18,16(sp)
    da14:	dc400317 	ldw	r17,12(sp)
    da18:	dc000217 	ldw	r16,8(sp)
    da1c:	dec00804 	addi	sp,sp,32
    da20:	f800283a 	ret
    da24:	40000526 	beq	r8,zero,da3c <_Unwind_RaiseException_Phase2+0xbc>
    da28:	01400184 	movi	r5,6
    da2c:	05000104 	movi	r20,4
    da30:	003fe606 	br	d9cc <__alt_data_end+0xfc00d9cc>
    da34:	9005883a 	mov	r2,r18
    da38:	003ff206 	br	da04 <__alt_data_end+0xfc00da04>
    da3c:	000ddec0 	call	ddec <abort>

0000da40 <uw_install_context.isra.1>:
    da40:	20c00017 	ldw	r3,0(r4)
    da44:	deffff04 	addi	sp,sp,-4
    da48:	014000f4 	movhi	r5,3
    da4c:	19000917 	ldw	r4,36(r3)
    da50:	df000015 	stw	fp,0(sp)
    da54:	18800804 	addi	r2,r3,32
    da58:	d839883a 	mov	fp,sp
    da5c:	29429a04 	addi	r5,r5,2664
    da60:	28c00015 	stw	r3,0(r5)
    da64:	17000017 	ldw	fp,0(r2)
    da68:	1ec00a17 	ldw	sp,40(r3)
    da6c:	2000683a 	jmp	r4

0000da70 <_Unwind_SjLj_Register>:
    da70:	008000f4 	movhi	r2,3
    da74:	10829a04 	addi	r2,r2,2664
    da78:	10c00017 	ldw	r3,0(r2)
    da7c:	11000015 	stw	r4,0(r2)
    da80:	20c00015 	stw	r3,0(r4)
    da84:	f800283a 	ret

0000da88 <_Unwind_SjLj_Unregister>:
    da88:	20c00017 	ldw	r3,0(r4)
    da8c:	008000f4 	movhi	r2,3
    da90:	10829a04 	addi	r2,r2,2664
    da94:	10c00015 	stw	r3,0(r2)
    da98:	f800283a 	ret

0000da9c <_Unwind_GetGR>:
    da9c:	20800017 	ldw	r2,0(r4)
    daa0:	29400084 	addi	r5,r5,2
    daa4:	294b883a 	add	r5,r5,r5
    daa8:	294b883a 	add	r5,r5,r5
    daac:	114b883a 	add	r5,r2,r5
    dab0:	28800017 	ldw	r2,0(r5)
    dab4:	f800283a 	ret

0000dab8 <_Unwind_GetCFA>:
    dab8:	20800017 	ldw	r2,0(r4)
    dabc:	10000226 	beq	r2,zero,dac8 <_Unwind_GetCFA+0x10>
    dac0:	10800a17 	ldw	r2,40(r2)
    dac4:	f800283a 	ret
    dac8:	0005883a 	mov	r2,zero
    dacc:	f800283a 	ret

0000dad0 <_Unwind_SetGR>:
    dad0:	20800017 	ldw	r2,0(r4)
    dad4:	29400084 	addi	r5,r5,2
    dad8:	294b883a 	add	r5,r5,r5
    dadc:	294b883a 	add	r5,r5,r5
    dae0:	114b883a 	add	r5,r2,r5
    dae4:	29800015 	stw	r6,0(r5)
    dae8:	f800283a 	ret

0000daec <_Unwind_GetIP>:
    daec:	20800017 	ldw	r2,0(r4)
    daf0:	10800117 	ldw	r2,4(r2)
    daf4:	10800044 	addi	r2,r2,1
    daf8:	f800283a 	ret

0000dafc <_Unwind_GetIPInfo>:
    dafc:	20800017 	ldw	r2,0(r4)
    db00:	28000015 	stw	zero,0(r5)
    db04:	10000326 	beq	r2,zero,db14 <_Unwind_GetIPInfo+0x18>
    db08:	10800117 	ldw	r2,4(r2)
    db0c:	10800044 	addi	r2,r2,1
    db10:	f800283a 	ret
    db14:	0005883a 	mov	r2,zero
    db18:	f800283a 	ret

0000db1c <_Unwind_SetIP>:
    db1c:	20800017 	ldw	r2,0(r4)
    db20:	297fffc4 	addi	r5,r5,-1
    db24:	11400115 	stw	r5,4(r2)
    db28:	f800283a 	ret

0000db2c <_Unwind_GetLanguageSpecificData>:
    db2c:	20800017 	ldw	r2,0(r4)
    db30:	10800717 	ldw	r2,28(r2)
    db34:	f800283a 	ret

0000db38 <_Unwind_GetRegionStart>:
    db38:	0005883a 	mov	r2,zero
    db3c:	f800283a 	ret

0000db40 <_Unwind_FindEnclosingFunction>:
    db40:	0005883a 	mov	r2,zero
    db44:	f800283a 	ret

0000db48 <_Unwind_GetDataRelBase>:
    db48:	0005883a 	mov	r2,zero
    db4c:	f800283a 	ret

0000db50 <_Unwind_GetTextRelBase>:
    db50:	0005883a 	mov	r2,zero
    db54:	f800283a 	ret

0000db58 <_Unwind_SjLj_RaiseException>:
    db58:	008000f4 	movhi	r2,3
    db5c:	defff804 	addi	sp,sp,-32
    db60:	10829a04 	addi	r2,r2,2664
    db64:	dc800515 	stw	r18,20(sp)
    db68:	14800017 	ldw	r18,0(r2)
    db6c:	dfc00715 	stw	ra,28(sp)
    db70:	dcc00615 	stw	r19,24(sp)
    db74:	dc400415 	stw	r17,16(sp)
    db78:	dc000315 	stw	r16,12(sp)
    db7c:	dc800215 	stw	r18,8(sp)
    db80:	90001426 	beq	r18,zero,dbd4 <_Unwind_SjLj_RaiseException+0x7c>
    db84:	2021883a 	mov	r16,r4
    db88:	9005883a 	mov	r2,r18
    db8c:	04400184 	movi	r17,6
    db90:	04c00204 	movi	r19,8
    db94:	10800617 	ldw	r2,24(r2)
    db98:	10000a26 	beq	r2,zero,dbc4 <_Unwind_SjLj_RaiseException+0x6c>
    db9c:	81800017 	ldw	r6,0(r16)
    dba0:	81c00117 	ldw	r7,4(r16)
    dba4:	01400044 	movi	r5,1
    dba8:	d8c00204 	addi	r3,sp,8
    dbac:	d8c00115 	stw	r3,4(sp)
    dbb0:	dc000015 	stw	r16,0(sp)
    dbb4:	2809883a 	mov	r4,r5
    dbb8:	103ee83a 	callr	r2
    dbbc:	14400d26 	beq	r2,r17,dbf4 <_Unwind_SjLj_RaiseException+0x9c>
    dbc0:	14c0171e 	bne	r2,r19,dc20 <_Unwind_SjLj_RaiseException+0xc8>
    dbc4:	d8800217 	ldw	r2,8(sp)
    dbc8:	10800017 	ldw	r2,0(r2)
    dbcc:	d8800215 	stw	r2,8(sp)
    dbd0:	103ff01e 	bne	r2,zero,db94 <__alt_data_end+0xfc00db94>
    dbd4:	00800144 	movi	r2,5
    dbd8:	dfc00717 	ldw	ra,28(sp)
    dbdc:	dcc00617 	ldw	r19,24(sp)
    dbe0:	dc800517 	ldw	r18,20(sp)
    dbe4:	dc400417 	ldw	r17,16(sp)
    dbe8:	dc000317 	ldw	r16,12(sp)
    dbec:	dec00804 	addi	sp,sp,32
    dbf0:	f800283a 	ret
    dbf4:	d8800217 	ldw	r2,8(sp)
    dbf8:	80000315 	stw	zero,12(r16)
    dbfc:	d9400204 	addi	r5,sp,8
    dc00:	80800415 	stw	r2,16(r16)
    dc04:	8009883a 	mov	r4,r16
    dc08:	dc800215 	stw	r18,8(sp)
    dc0c:	000d9800 	call	d980 <_Unwind_RaiseException_Phase2>
    dc10:	00c001c4 	movi	r3,7
    dc14:	10fff01e 	bne	r2,r3,dbd8 <__alt_data_end+0xfc00dbd8>
    dc18:	d9000204 	addi	r4,sp,8
    dc1c:	000da400 	call	da40 <uw_install_context.isra.1>
    dc20:	008000c4 	movi	r2,3
    dc24:	003fec06 	br	dbd8 <__alt_data_end+0xfc00dbd8>

0000dc28 <_Unwind_SjLj_ForcedUnwind>:
    dc28:	00c000f4 	movhi	r3,3
    dc2c:	18c29a04 	addi	r3,r3,2664
    dc30:	defffe04 	addi	sp,sp,-8
    dc34:	18c00017 	ldw	r3,0(r3)
    dc38:	dfc00115 	stw	ra,4(sp)
    dc3c:	21400315 	stw	r5,12(r4)
    dc40:	21800415 	stw	r6,16(r4)
    dc44:	d80b883a 	mov	r5,sp
    dc48:	d8c00015 	stw	r3,0(sp)
    dc4c:	000d8680 	call	d868 <_Unwind_ForcedUnwind_Phase2>
    dc50:	00c001c4 	movi	r3,7
    dc54:	10c00326 	beq	r2,r3,dc64 <_Unwind_SjLj_ForcedUnwind+0x3c>
    dc58:	dfc00117 	ldw	ra,4(sp)
    dc5c:	dec00204 	addi	sp,sp,8
    dc60:	f800283a 	ret
    dc64:	d809883a 	mov	r4,sp
    dc68:	000da400 	call	da40 <uw_install_context.isra.1>

0000dc6c <_Unwind_SjLj_Resume>:
    dc6c:	00c000f4 	movhi	r3,3
    dc70:	18c29a04 	addi	r3,r3,2664
    dc74:	18c00017 	ldw	r3,0(r3)
    dc78:	20800317 	ldw	r2,12(r4)
    dc7c:	defffe04 	addi	sp,sp,-8
    dc80:	dfc00115 	stw	ra,4(sp)
    dc84:	d8c00015 	stw	r3,0(sp)
    dc88:	d80b883a 	mov	r5,sp
    dc8c:	1000041e 	bne	r2,zero,dca0 <_Unwind_SjLj_Resume+0x34>
    dc90:	000d9800 	call	d980 <_Unwind_RaiseException_Phase2>
    dc94:	00c001c4 	movi	r3,7
    dc98:	10c00326 	beq	r2,r3,dca8 <_Unwind_SjLj_Resume+0x3c>
    dc9c:	000ddec0 	call	ddec <abort>
    dca0:	000d8680 	call	d868 <_Unwind_ForcedUnwind_Phase2>
    dca4:	003ffb06 	br	dc94 <__alt_data_end+0xfc00dc94>
    dca8:	d809883a 	mov	r4,sp
    dcac:	000da400 	call	da40 <uw_install_context.isra.1>

0000dcb0 <_Unwind_SjLj_Resume_or_Rethrow>:
    dcb0:	20800317 	ldw	r2,12(r4)
    dcb4:	defffe04 	addi	sp,sp,-8
    dcb8:	dfc00115 	stw	ra,4(sp)
    dcbc:	1000041e 	bne	r2,zero,dcd0 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    dcc0:	000db580 	call	db58 <_Unwind_SjLj_RaiseException>
    dcc4:	dfc00117 	ldw	ra,4(sp)
    dcc8:	dec00204 	addi	sp,sp,8
    dccc:	f800283a 	ret
    dcd0:	008000f4 	movhi	r2,3
    dcd4:	10829a04 	addi	r2,r2,2664
    dcd8:	10800017 	ldw	r2,0(r2)
    dcdc:	d80b883a 	mov	r5,sp
    dce0:	d8800015 	stw	r2,0(sp)
    dce4:	000d8680 	call	d868 <_Unwind_ForcedUnwind_Phase2>
    dce8:	00c001c4 	movi	r3,7
    dcec:	10c00126 	beq	r2,r3,dcf4 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    dcf0:	000ddec0 	call	ddec <abort>
    dcf4:	d809883a 	mov	r4,sp
    dcf8:	000da400 	call	da40 <uw_install_context.isra.1>

0000dcfc <_Unwind_DeleteException>:
    dcfc:	20800217 	ldw	r2,8(r4)
    dd00:	10000326 	beq	r2,zero,dd10 <_Unwind_DeleteException+0x14>
    dd04:	200b883a 	mov	r5,r4
    dd08:	01000044 	movi	r4,1
    dd0c:	1000683a 	jmp	r2
    dd10:	f800283a 	ret

0000dd14 <_Unwind_Backtrace>:
    dd14:	008000f4 	movhi	r2,3
    dd18:	10829a04 	addi	r2,r2,2664
    dd1c:	10800017 	ldw	r2,0(r2)
    dd20:	defffc04 	addi	sp,sp,-16
    dd24:	dc400215 	stw	r17,8(sp)
    dd28:	dc000115 	stw	r16,4(sp)
    dd2c:	dfc00315 	stw	ra,12(sp)
    dd30:	2023883a 	mov	r17,r4
    dd34:	2821883a 	mov	r16,r5
    dd38:	d8800015 	stw	r2,0(sp)
    dd3c:	00000506 	br	dd54 <_Unwind_Backtrace+0x40>
    dd40:	883ee83a 	callr	r17
    dd44:	10000e1e 	bne	r2,zero,dd80 <_Unwind_Backtrace+0x6c>
    dd48:	d8800017 	ldw	r2,0(sp)
    dd4c:	10800017 	ldw	r2,0(r2)
    dd50:	d8800015 	stw	r2,0(sp)
    dd54:	800b883a 	mov	r5,r16
    dd58:	d809883a 	mov	r4,sp
    dd5c:	103ff81e 	bne	r2,zero,dd40 <__alt_data_end+0xfc00dd40>
    dd60:	883ee83a 	callr	r17
    dd64:	1000061e 	bne	r2,zero,dd80 <_Unwind_Backtrace+0x6c>
    dd68:	00800144 	movi	r2,5
    dd6c:	dfc00317 	ldw	ra,12(sp)
    dd70:	dc400217 	ldw	r17,8(sp)
    dd74:	dc000117 	ldw	r16,4(sp)
    dd78:	dec00404 	addi	sp,sp,16
    dd7c:	f800283a 	ret
    dd80:	008000c4 	movi	r2,3
    dd84:	003ff906 	br	dd6c <__alt_data_end+0xfc00dd6c>

0000dd88 <__clzsi2>:
    dd88:	00bfffd4 	movui	r2,65535
    dd8c:	11000536 	bltu	r2,r4,dda4 <__clzsi2+0x1c>
    dd90:	00803fc4 	movi	r2,255
    dd94:	11000f36 	bltu	r2,r4,ddd4 <__clzsi2+0x4c>
    dd98:	00800804 	movi	r2,32
    dd9c:	0007883a 	mov	r3,zero
    dda0:	00000506 	br	ddb8 <__clzsi2+0x30>
    dda4:	00804034 	movhi	r2,256
    dda8:	10bfffc4 	addi	r2,r2,-1
    ddac:	11000c2e 	bgeu	r2,r4,dde0 <__clzsi2+0x58>
    ddb0:	00800204 	movi	r2,8
    ddb4:	00c00604 	movi	r3,24
    ddb8:	20c8d83a 	srl	r4,r4,r3
    ddbc:	00c000f4 	movhi	r3,3
    ddc0:	18e8c704 	addi	r3,r3,-23780
    ddc4:	1909883a 	add	r4,r3,r4
    ddc8:	20c00003 	ldbu	r3,0(r4)
    ddcc:	10c5c83a 	sub	r2,r2,r3
    ddd0:	f800283a 	ret
    ddd4:	00800604 	movi	r2,24
    ddd8:	00c00204 	movi	r3,8
    dddc:	003ff606 	br	ddb8 <__alt_data_end+0xfc00ddb8>
    dde0:	00800404 	movi	r2,16
    dde4:	1007883a 	mov	r3,r2
    dde8:	003ff306 	br	ddb8 <__alt_data_end+0xfc00ddb8>

0000ddec <abort>:
    ddec:	deffff04 	addi	sp,sp,-4
    ddf0:	01000184 	movi	r4,6
    ddf4:	dfc00015 	stw	ra,0(sp)
    ddf8:	000ecfc0 	call	ecfc <raise>
    ddfc:	01000044 	movi	r4,1
    de00:	001ea3c0 	call	1ea3c <_exit>

0000de04 <clock>:
    de04:	008000f4 	movhi	r2,3
    de08:	10b60a04 	addi	r2,r2,-10200
    de0c:	11000017 	ldw	r4,0(r2)
    de10:	defffb04 	addi	sp,sp,-20
    de14:	d80b883a 	mov	r5,sp
    de18:	dfc00415 	stw	ra,16(sp)
    de1c:	00112a00 	call	112a0 <_times_r>
    de20:	00ffffc4 	movi	r3,-1
    de24:	10c00726 	beq	r2,r3,de44 <clock+0x40>
    de28:	d8c00017 	ldw	r3,0(sp)
    de2c:	d8800117 	ldw	r2,4(sp)
    de30:	1885883a 	add	r2,r3,r2
    de34:	d8c00217 	ldw	r3,8(sp)
    de38:	10c7883a 	add	r3,r2,r3
    de3c:	d8800317 	ldw	r2,12(sp)
    de40:	1885883a 	add	r2,r3,r2
    de44:	dfc00417 	ldw	ra,16(sp)
    de48:	dec00504 	addi	sp,sp,20
    de4c:	f800283a 	ret

0000de50 <malloc>:
    de50:	008000f4 	movhi	r2,3
    de54:	10b60a04 	addi	r2,r2,-10200
    de58:	200b883a 	mov	r5,r4
    de5c:	11000017 	ldw	r4,0(r2)
    de60:	000de781 	jmpi	de78 <_malloc_r>

0000de64 <free>:
    de64:	008000f4 	movhi	r2,3
    de68:	10b60a04 	addi	r2,r2,-10200
    de6c:	200b883a 	mov	r5,r4
    de70:	11000017 	ldw	r4,0(r2)
    de74:	00157dc1 	jmpi	157dc <_free_r>

0000de78 <_malloc_r>:
    de78:	defff504 	addi	sp,sp,-44
    de7c:	dc800315 	stw	r18,12(sp)
    de80:	dfc00a15 	stw	ra,40(sp)
    de84:	df000915 	stw	fp,36(sp)
    de88:	ddc00815 	stw	r23,32(sp)
    de8c:	dd800715 	stw	r22,28(sp)
    de90:	dd400615 	stw	r21,24(sp)
    de94:	dd000515 	stw	r20,20(sp)
    de98:	dcc00415 	stw	r19,16(sp)
    de9c:	dc400215 	stw	r17,8(sp)
    dea0:	dc000115 	stw	r16,4(sp)
    dea4:	288002c4 	addi	r2,r5,11
    dea8:	00c00584 	movi	r3,22
    deac:	2025883a 	mov	r18,r4
    deb0:	18807f2e 	bgeu	r3,r2,e0b0 <_malloc_r+0x238>
    deb4:	047ffe04 	movi	r17,-8
    deb8:	1462703a 	and	r17,r2,r17
    debc:	8800a316 	blt	r17,zero,e14c <_malloc_r+0x2d4>
    dec0:	8940a236 	bltu	r17,r5,e14c <_malloc_r+0x2d4>
    dec4:	001f0580 	call	1f058 <__malloc_lock>
    dec8:	00807dc4 	movi	r2,503
    decc:	1441e92e 	bgeu	r2,r17,e674 <_malloc_r+0x7fc>
    ded0:	8804d27a 	srli	r2,r17,9
    ded4:	1000a126 	beq	r2,zero,e15c <_malloc_r+0x2e4>
    ded8:	00c00104 	movi	r3,4
    dedc:	18811e36 	bltu	r3,r2,e358 <_malloc_r+0x4e0>
    dee0:	8804d1ba 	srli	r2,r17,6
    dee4:	12000e44 	addi	r8,r2,57
    dee8:	11c00e04 	addi	r7,r2,56
    deec:	4209883a 	add	r4,r8,r8
    def0:	04c000f4 	movhi	r19,3
    def4:	2109883a 	add	r4,r4,r4
    def8:	9ceaab04 	addi	r19,r19,-21844
    defc:	2109883a 	add	r4,r4,r4
    df00:	9909883a 	add	r4,r19,r4
    df04:	24000117 	ldw	r16,4(r4)
    df08:	213ffe04 	addi	r4,r4,-8
    df0c:	24009726 	beq	r4,r16,e16c <_malloc_r+0x2f4>
    df10:	80800117 	ldw	r2,4(r16)
    df14:	01bfff04 	movi	r6,-4
    df18:	014003c4 	movi	r5,15
    df1c:	1184703a 	and	r2,r2,r6
    df20:	1447c83a 	sub	r3,r2,r17
    df24:	28c00716 	blt	r5,r3,df44 <_malloc_r+0xcc>
    df28:	1800920e 	bge	r3,zero,e174 <_malloc_r+0x2fc>
    df2c:	84000317 	ldw	r16,12(r16)
    df30:	24008e26 	beq	r4,r16,e16c <_malloc_r+0x2f4>
    df34:	80800117 	ldw	r2,4(r16)
    df38:	1184703a 	and	r2,r2,r6
    df3c:	1447c83a 	sub	r3,r2,r17
    df40:	28fff90e 	bge	r5,r3,df28 <__alt_data_end+0xfc00df28>
    df44:	3809883a 	mov	r4,r7
    df48:	018000f4 	movhi	r6,3
    df4c:	9c000417 	ldw	r16,16(r19)
    df50:	31aaab04 	addi	r6,r6,-21844
    df54:	32000204 	addi	r8,r6,8
    df58:	82013426 	beq	r16,r8,e42c <_malloc_r+0x5b4>
    df5c:	80c00117 	ldw	r3,4(r16)
    df60:	00bfff04 	movi	r2,-4
    df64:	188e703a 	and	r7,r3,r2
    df68:	3c45c83a 	sub	r2,r7,r17
    df6c:	00c003c4 	movi	r3,15
    df70:	18811f16 	blt	r3,r2,e3f0 <_malloc_r+0x578>
    df74:	32000515 	stw	r8,20(r6)
    df78:	32000415 	stw	r8,16(r6)
    df7c:	10007f0e 	bge	r2,zero,e17c <_malloc_r+0x304>
    df80:	00807fc4 	movi	r2,511
    df84:	11c0fd36 	bltu	r2,r7,e37c <_malloc_r+0x504>
    df88:	3806d0fa 	srli	r3,r7,3
    df8c:	01c00044 	movi	r7,1
    df90:	30800117 	ldw	r2,4(r6)
    df94:	19400044 	addi	r5,r3,1
    df98:	294b883a 	add	r5,r5,r5
    df9c:	1807d0ba 	srai	r3,r3,2
    dfa0:	294b883a 	add	r5,r5,r5
    dfa4:	294b883a 	add	r5,r5,r5
    dfa8:	298b883a 	add	r5,r5,r6
    dfac:	38c6983a 	sll	r3,r7,r3
    dfb0:	29c00017 	ldw	r7,0(r5)
    dfb4:	2a7ffe04 	addi	r9,r5,-8
    dfb8:	1886b03a 	or	r3,r3,r2
    dfbc:	82400315 	stw	r9,12(r16)
    dfc0:	81c00215 	stw	r7,8(r16)
    dfc4:	30c00115 	stw	r3,4(r6)
    dfc8:	2c000015 	stw	r16,0(r5)
    dfcc:	3c000315 	stw	r16,12(r7)
    dfd0:	2005d0ba 	srai	r2,r4,2
    dfd4:	01400044 	movi	r5,1
    dfd8:	288a983a 	sll	r5,r5,r2
    dfdc:	19406f36 	bltu	r3,r5,e19c <_malloc_r+0x324>
    dfe0:	28c4703a 	and	r2,r5,r3
    dfe4:	10000a1e 	bne	r2,zero,e010 <_malloc_r+0x198>
    dfe8:	00bfff04 	movi	r2,-4
    dfec:	294b883a 	add	r5,r5,r5
    dff0:	2088703a 	and	r4,r4,r2
    dff4:	28c4703a 	and	r2,r5,r3
    dff8:	21000104 	addi	r4,r4,4
    dffc:	1000041e 	bne	r2,zero,e010 <_malloc_r+0x198>
    e000:	294b883a 	add	r5,r5,r5
    e004:	28c4703a 	and	r2,r5,r3
    e008:	21000104 	addi	r4,r4,4
    e00c:	103ffc26 	beq	r2,zero,e000 <__alt_data_end+0xfc00e000>
    e010:	02bfff04 	movi	r10,-4
    e014:	024003c4 	movi	r9,15
    e018:	21800044 	addi	r6,r4,1
    e01c:	318d883a 	add	r6,r6,r6
    e020:	318d883a 	add	r6,r6,r6
    e024:	318d883a 	add	r6,r6,r6
    e028:	998d883a 	add	r6,r19,r6
    e02c:	333ffe04 	addi	r12,r6,-8
    e030:	2017883a 	mov	r11,r4
    e034:	31800104 	addi	r6,r6,4
    e038:	34000017 	ldw	r16,0(r6)
    e03c:	31fffd04 	addi	r7,r6,-12
    e040:	81c0041e 	bne	r16,r7,e054 <_malloc_r+0x1dc>
    e044:	0000fb06 	br	e434 <_malloc_r+0x5bc>
    e048:	1801030e 	bge	r3,zero,e458 <_malloc_r+0x5e0>
    e04c:	84000317 	ldw	r16,12(r16)
    e050:	81c0f826 	beq	r16,r7,e434 <_malloc_r+0x5bc>
    e054:	80800117 	ldw	r2,4(r16)
    e058:	1284703a 	and	r2,r2,r10
    e05c:	1447c83a 	sub	r3,r2,r17
    e060:	48fff90e 	bge	r9,r3,e048 <__alt_data_end+0xfc00e048>
    e064:	80800317 	ldw	r2,12(r16)
    e068:	81000217 	ldw	r4,8(r16)
    e06c:	89400054 	ori	r5,r17,1
    e070:	81400115 	stw	r5,4(r16)
    e074:	20800315 	stw	r2,12(r4)
    e078:	11000215 	stw	r4,8(r2)
    e07c:	8463883a 	add	r17,r16,r17
    e080:	9c400515 	stw	r17,20(r19)
    e084:	9c400415 	stw	r17,16(r19)
    e088:	18800054 	ori	r2,r3,1
    e08c:	88800115 	stw	r2,4(r17)
    e090:	8a000315 	stw	r8,12(r17)
    e094:	8a000215 	stw	r8,8(r17)
    e098:	88e3883a 	add	r17,r17,r3
    e09c:	88c00015 	stw	r3,0(r17)
    e0a0:	9009883a 	mov	r4,r18
    e0a4:	001f07c0 	call	1f07c <__malloc_unlock>
    e0a8:	80800204 	addi	r2,r16,8
    e0ac:	00001b06 	br	e11c <_malloc_r+0x2a4>
    e0b0:	04400404 	movi	r17,16
    e0b4:	89402536 	bltu	r17,r5,e14c <_malloc_r+0x2d4>
    e0b8:	001f0580 	call	1f058 <__malloc_lock>
    e0bc:	00800184 	movi	r2,6
    e0c0:	01000084 	movi	r4,2
    e0c4:	04c000f4 	movhi	r19,3
    e0c8:	1085883a 	add	r2,r2,r2
    e0cc:	9ceaab04 	addi	r19,r19,-21844
    e0d0:	1085883a 	add	r2,r2,r2
    e0d4:	9885883a 	add	r2,r19,r2
    e0d8:	14000117 	ldw	r16,4(r2)
    e0dc:	10fffe04 	addi	r3,r2,-8
    e0e0:	80c0d926 	beq	r16,r3,e448 <_malloc_r+0x5d0>
    e0e4:	80c00117 	ldw	r3,4(r16)
    e0e8:	81000317 	ldw	r4,12(r16)
    e0ec:	00bfff04 	movi	r2,-4
    e0f0:	1884703a 	and	r2,r3,r2
    e0f4:	81400217 	ldw	r5,8(r16)
    e0f8:	8085883a 	add	r2,r16,r2
    e0fc:	10c00117 	ldw	r3,4(r2)
    e100:	29000315 	stw	r4,12(r5)
    e104:	21400215 	stw	r5,8(r4)
    e108:	18c00054 	ori	r3,r3,1
    e10c:	10c00115 	stw	r3,4(r2)
    e110:	9009883a 	mov	r4,r18
    e114:	001f07c0 	call	1f07c <__malloc_unlock>
    e118:	80800204 	addi	r2,r16,8
    e11c:	dfc00a17 	ldw	ra,40(sp)
    e120:	df000917 	ldw	fp,36(sp)
    e124:	ddc00817 	ldw	r23,32(sp)
    e128:	dd800717 	ldw	r22,28(sp)
    e12c:	dd400617 	ldw	r21,24(sp)
    e130:	dd000517 	ldw	r20,20(sp)
    e134:	dcc00417 	ldw	r19,16(sp)
    e138:	dc800317 	ldw	r18,12(sp)
    e13c:	dc400217 	ldw	r17,8(sp)
    e140:	dc000117 	ldw	r16,4(sp)
    e144:	dec00b04 	addi	sp,sp,44
    e148:	f800283a 	ret
    e14c:	00800304 	movi	r2,12
    e150:	90800015 	stw	r2,0(r18)
    e154:	0005883a 	mov	r2,zero
    e158:	003ff006 	br	e11c <__alt_data_end+0xfc00e11c>
    e15c:	01002004 	movi	r4,128
    e160:	02001004 	movi	r8,64
    e164:	01c00fc4 	movi	r7,63
    e168:	003f6106 	br	def0 <__alt_data_end+0xfc00def0>
    e16c:	4009883a 	mov	r4,r8
    e170:	003f7506 	br	df48 <__alt_data_end+0xfc00df48>
    e174:	81000317 	ldw	r4,12(r16)
    e178:	003fde06 	br	e0f4 <__alt_data_end+0xfc00e0f4>
    e17c:	81c5883a 	add	r2,r16,r7
    e180:	11400117 	ldw	r5,4(r2)
    e184:	9009883a 	mov	r4,r18
    e188:	29400054 	ori	r5,r5,1
    e18c:	11400115 	stw	r5,4(r2)
    e190:	001f07c0 	call	1f07c <__malloc_unlock>
    e194:	80800204 	addi	r2,r16,8
    e198:	003fe006 	br	e11c <__alt_data_end+0xfc00e11c>
    e19c:	9c000217 	ldw	r16,8(r19)
    e1a0:	00bfff04 	movi	r2,-4
    e1a4:	85800117 	ldw	r22,4(r16)
    e1a8:	b0ac703a 	and	r22,r22,r2
    e1ac:	b4400336 	bltu	r22,r17,e1bc <_malloc_r+0x344>
    e1b0:	b445c83a 	sub	r2,r22,r17
    e1b4:	00c003c4 	movi	r3,15
    e1b8:	18805d16 	blt	r3,r2,e330 <_malloc_r+0x4b8>
    e1bc:	05c000f4 	movhi	r23,3
    e1c0:	008000f4 	movhi	r2,3
    e1c4:	10829d04 	addi	r2,r2,2676
    e1c8:	bdf60b04 	addi	r23,r23,-10196
    e1cc:	15400017 	ldw	r21,0(r2)
    e1d0:	b8c00017 	ldw	r3,0(r23)
    e1d4:	00bfffc4 	movi	r2,-1
    e1d8:	858d883a 	add	r6,r16,r22
    e1dc:	8d6b883a 	add	r21,r17,r21
    e1e0:	1880ea26 	beq	r3,r2,e58c <_malloc_r+0x714>
    e1e4:	ad4403c4 	addi	r21,r21,4111
    e1e8:	00bc0004 	movi	r2,-4096
    e1ec:	a8aa703a 	and	r21,r21,r2
    e1f0:	a80b883a 	mov	r5,r21
    e1f4:	9009883a 	mov	r4,r18
    e1f8:	d9800015 	stw	r6,0(sp)
    e1fc:	000ea540 	call	ea54 <_sbrk_r>
    e200:	1029883a 	mov	r20,r2
    e204:	00bfffc4 	movi	r2,-1
    e208:	d9800017 	ldw	r6,0(sp)
    e20c:	a080e826 	beq	r20,r2,e5b0 <_malloc_r+0x738>
    e210:	a180a636 	bltu	r20,r6,e4ac <_malloc_r+0x634>
    e214:	070000f4 	movhi	fp,3
    e218:	e702f504 	addi	fp,fp,3028
    e21c:	e0800017 	ldw	r2,0(fp)
    e220:	a887883a 	add	r3,r21,r2
    e224:	e0c00015 	stw	r3,0(fp)
    e228:	3500e626 	beq	r6,r20,e5c4 <_malloc_r+0x74c>
    e22c:	b9000017 	ldw	r4,0(r23)
    e230:	00bfffc4 	movi	r2,-1
    e234:	2080ee26 	beq	r4,r2,e5f0 <_malloc_r+0x778>
    e238:	a185c83a 	sub	r2,r20,r6
    e23c:	10c5883a 	add	r2,r2,r3
    e240:	e0800015 	stw	r2,0(fp)
    e244:	a0c001cc 	andi	r3,r20,7
    e248:	1800bc26 	beq	r3,zero,e53c <_malloc_r+0x6c4>
    e24c:	a0e9c83a 	sub	r20,r20,r3
    e250:	00840204 	movi	r2,4104
    e254:	a5000204 	addi	r20,r20,8
    e258:	10c7c83a 	sub	r3,r2,r3
    e25c:	a545883a 	add	r2,r20,r21
    e260:	1083ffcc 	andi	r2,r2,4095
    e264:	18abc83a 	sub	r21,r3,r2
    e268:	a80b883a 	mov	r5,r21
    e26c:	9009883a 	mov	r4,r18
    e270:	000ea540 	call	ea54 <_sbrk_r>
    e274:	00ffffc4 	movi	r3,-1
    e278:	10c0e126 	beq	r2,r3,e600 <_malloc_r+0x788>
    e27c:	1505c83a 	sub	r2,r2,r20
    e280:	1545883a 	add	r2,r2,r21
    e284:	10800054 	ori	r2,r2,1
    e288:	e0c00017 	ldw	r3,0(fp)
    e28c:	9d000215 	stw	r20,8(r19)
    e290:	a0800115 	stw	r2,4(r20)
    e294:	a8c7883a 	add	r3,r21,r3
    e298:	e0c00015 	stw	r3,0(fp)
    e29c:	84c00e26 	beq	r16,r19,e2d8 <_malloc_r+0x460>
    e2a0:	018003c4 	movi	r6,15
    e2a4:	3580a72e 	bgeu	r6,r22,e544 <_malloc_r+0x6cc>
    e2a8:	81400117 	ldw	r5,4(r16)
    e2ac:	013ffe04 	movi	r4,-8
    e2b0:	b0bffd04 	addi	r2,r22,-12
    e2b4:	1104703a 	and	r2,r2,r4
    e2b8:	2900004c 	andi	r4,r5,1
    e2bc:	2088b03a 	or	r4,r4,r2
    e2c0:	81000115 	stw	r4,4(r16)
    e2c4:	01400144 	movi	r5,5
    e2c8:	8089883a 	add	r4,r16,r2
    e2cc:	21400115 	stw	r5,4(r4)
    e2d0:	21400215 	stw	r5,8(r4)
    e2d4:	3080cd36 	bltu	r6,r2,e60c <_malloc_r+0x794>
    e2d8:	008000f4 	movhi	r2,3
    e2dc:	10829c04 	addi	r2,r2,2672
    e2e0:	11000017 	ldw	r4,0(r2)
    e2e4:	20c0012e 	bgeu	r4,r3,e2ec <_malloc_r+0x474>
    e2e8:	10c00015 	stw	r3,0(r2)
    e2ec:	008000f4 	movhi	r2,3
    e2f0:	10829b04 	addi	r2,r2,2668
    e2f4:	11000017 	ldw	r4,0(r2)
    e2f8:	9c000217 	ldw	r16,8(r19)
    e2fc:	20c0012e 	bgeu	r4,r3,e304 <_malloc_r+0x48c>
    e300:	10c00015 	stw	r3,0(r2)
    e304:	80c00117 	ldw	r3,4(r16)
    e308:	00bfff04 	movi	r2,-4
    e30c:	1886703a 	and	r3,r3,r2
    e310:	1c45c83a 	sub	r2,r3,r17
    e314:	1c400236 	bltu	r3,r17,e320 <_malloc_r+0x4a8>
    e318:	00c003c4 	movi	r3,15
    e31c:	18800416 	blt	r3,r2,e330 <_malloc_r+0x4b8>
    e320:	9009883a 	mov	r4,r18
    e324:	001f07c0 	call	1f07c <__malloc_unlock>
    e328:	0005883a 	mov	r2,zero
    e32c:	003f7b06 	br	e11c <__alt_data_end+0xfc00e11c>
    e330:	88c00054 	ori	r3,r17,1
    e334:	80c00115 	stw	r3,4(r16)
    e338:	8463883a 	add	r17,r16,r17
    e33c:	10800054 	ori	r2,r2,1
    e340:	9c400215 	stw	r17,8(r19)
    e344:	88800115 	stw	r2,4(r17)
    e348:	9009883a 	mov	r4,r18
    e34c:	001f07c0 	call	1f07c <__malloc_unlock>
    e350:	80800204 	addi	r2,r16,8
    e354:	003f7106 	br	e11c <__alt_data_end+0xfc00e11c>
    e358:	00c00504 	movi	r3,20
    e35c:	18804a2e 	bgeu	r3,r2,e488 <_malloc_r+0x610>
    e360:	00c01504 	movi	r3,84
    e364:	18806e36 	bltu	r3,r2,e520 <_malloc_r+0x6a8>
    e368:	8804d33a 	srli	r2,r17,12
    e36c:	12001bc4 	addi	r8,r2,111
    e370:	11c01b84 	addi	r7,r2,110
    e374:	4209883a 	add	r4,r8,r8
    e378:	003edd06 	br	def0 <__alt_data_end+0xfc00def0>
    e37c:	3804d27a 	srli	r2,r7,9
    e380:	00c00104 	movi	r3,4
    e384:	1880442e 	bgeu	r3,r2,e498 <_malloc_r+0x620>
    e388:	00c00504 	movi	r3,20
    e38c:	18808136 	bltu	r3,r2,e594 <_malloc_r+0x71c>
    e390:	11401704 	addi	r5,r2,92
    e394:	10c016c4 	addi	r3,r2,91
    e398:	294b883a 	add	r5,r5,r5
    e39c:	294b883a 	add	r5,r5,r5
    e3a0:	294b883a 	add	r5,r5,r5
    e3a4:	994b883a 	add	r5,r19,r5
    e3a8:	28800017 	ldw	r2,0(r5)
    e3ac:	018000f4 	movhi	r6,3
    e3b0:	297ffe04 	addi	r5,r5,-8
    e3b4:	31aaab04 	addi	r6,r6,-21844
    e3b8:	28806526 	beq	r5,r2,e550 <_malloc_r+0x6d8>
    e3bc:	01bfff04 	movi	r6,-4
    e3c0:	10c00117 	ldw	r3,4(r2)
    e3c4:	1986703a 	and	r3,r3,r6
    e3c8:	38c0022e 	bgeu	r7,r3,e3d4 <_malloc_r+0x55c>
    e3cc:	10800217 	ldw	r2,8(r2)
    e3d0:	28bffb1e 	bne	r5,r2,e3c0 <__alt_data_end+0xfc00e3c0>
    e3d4:	11400317 	ldw	r5,12(r2)
    e3d8:	98c00117 	ldw	r3,4(r19)
    e3dc:	81400315 	stw	r5,12(r16)
    e3e0:	80800215 	stw	r2,8(r16)
    e3e4:	2c000215 	stw	r16,8(r5)
    e3e8:	14000315 	stw	r16,12(r2)
    e3ec:	003ef806 	br	dfd0 <__alt_data_end+0xfc00dfd0>
    e3f0:	88c00054 	ori	r3,r17,1
    e3f4:	80c00115 	stw	r3,4(r16)
    e3f8:	8463883a 	add	r17,r16,r17
    e3fc:	34400515 	stw	r17,20(r6)
    e400:	34400415 	stw	r17,16(r6)
    e404:	10c00054 	ori	r3,r2,1
    e408:	8a000315 	stw	r8,12(r17)
    e40c:	8a000215 	stw	r8,8(r17)
    e410:	88c00115 	stw	r3,4(r17)
    e414:	88a3883a 	add	r17,r17,r2
    e418:	88800015 	stw	r2,0(r17)
    e41c:	9009883a 	mov	r4,r18
    e420:	001f07c0 	call	1f07c <__malloc_unlock>
    e424:	80800204 	addi	r2,r16,8
    e428:	003f3c06 	br	e11c <__alt_data_end+0xfc00e11c>
    e42c:	30c00117 	ldw	r3,4(r6)
    e430:	003ee706 	br	dfd0 <__alt_data_end+0xfc00dfd0>
    e434:	5ac00044 	addi	r11,r11,1
    e438:	588000cc 	andi	r2,r11,3
    e43c:	31800204 	addi	r6,r6,8
    e440:	103efd1e 	bne	r2,zero,e038 <__alt_data_end+0xfc00e038>
    e444:	00002406 	br	e4d8 <_malloc_r+0x660>
    e448:	14000317 	ldw	r16,12(r2)
    e44c:	143f251e 	bne	r2,r16,e0e4 <__alt_data_end+0xfc00e0e4>
    e450:	21000084 	addi	r4,r4,2
    e454:	003ebc06 	br	df48 <__alt_data_end+0xfc00df48>
    e458:	8085883a 	add	r2,r16,r2
    e45c:	10c00117 	ldw	r3,4(r2)
    e460:	81000317 	ldw	r4,12(r16)
    e464:	81400217 	ldw	r5,8(r16)
    e468:	18c00054 	ori	r3,r3,1
    e46c:	10c00115 	stw	r3,4(r2)
    e470:	29000315 	stw	r4,12(r5)
    e474:	21400215 	stw	r5,8(r4)
    e478:	9009883a 	mov	r4,r18
    e47c:	001f07c0 	call	1f07c <__malloc_unlock>
    e480:	80800204 	addi	r2,r16,8
    e484:	003f2506 	br	e11c <__alt_data_end+0xfc00e11c>
    e488:	12001704 	addi	r8,r2,92
    e48c:	11c016c4 	addi	r7,r2,91
    e490:	4209883a 	add	r4,r8,r8
    e494:	003e9606 	br	def0 <__alt_data_end+0xfc00def0>
    e498:	3804d1ba 	srli	r2,r7,6
    e49c:	11400e44 	addi	r5,r2,57
    e4a0:	10c00e04 	addi	r3,r2,56
    e4a4:	294b883a 	add	r5,r5,r5
    e4a8:	003fbc06 	br	e39c <__alt_data_end+0xfc00e39c>
    e4ac:	84ff5926 	beq	r16,r19,e214 <__alt_data_end+0xfc00e214>
    e4b0:	008000f4 	movhi	r2,3
    e4b4:	10aaab04 	addi	r2,r2,-21844
    e4b8:	14000217 	ldw	r16,8(r2)
    e4bc:	00bfff04 	movi	r2,-4
    e4c0:	80c00117 	ldw	r3,4(r16)
    e4c4:	1886703a 	and	r3,r3,r2
    e4c8:	003f9106 	br	e310 <__alt_data_end+0xfc00e310>
    e4cc:	60800217 	ldw	r2,8(r12)
    e4d0:	213fffc4 	addi	r4,r4,-1
    e4d4:	1300651e 	bne	r2,r12,e66c <_malloc_r+0x7f4>
    e4d8:	208000cc 	andi	r2,r4,3
    e4dc:	633ffe04 	addi	r12,r12,-8
    e4e0:	103ffa1e 	bne	r2,zero,e4cc <__alt_data_end+0xfc00e4cc>
    e4e4:	98800117 	ldw	r2,4(r19)
    e4e8:	0146303a 	nor	r3,zero,r5
    e4ec:	1884703a 	and	r2,r3,r2
    e4f0:	98800115 	stw	r2,4(r19)
    e4f4:	294b883a 	add	r5,r5,r5
    e4f8:	117f2836 	bltu	r2,r5,e19c <__alt_data_end+0xfc00e19c>
    e4fc:	283f2726 	beq	r5,zero,e19c <__alt_data_end+0xfc00e19c>
    e500:	2886703a 	and	r3,r5,r2
    e504:	5809883a 	mov	r4,r11
    e508:	183ec31e 	bne	r3,zero,e018 <__alt_data_end+0xfc00e018>
    e50c:	294b883a 	add	r5,r5,r5
    e510:	2886703a 	and	r3,r5,r2
    e514:	21000104 	addi	r4,r4,4
    e518:	183ffc26 	beq	r3,zero,e50c <__alt_data_end+0xfc00e50c>
    e51c:	003ebe06 	br	e018 <__alt_data_end+0xfc00e018>
    e520:	00c05504 	movi	r3,340
    e524:	18801236 	bltu	r3,r2,e570 <_malloc_r+0x6f8>
    e528:	8804d3fa 	srli	r2,r17,15
    e52c:	12001e04 	addi	r8,r2,120
    e530:	11c01dc4 	addi	r7,r2,119
    e534:	4209883a 	add	r4,r8,r8
    e538:	003e6d06 	br	def0 <__alt_data_end+0xfc00def0>
    e53c:	00c40004 	movi	r3,4096
    e540:	003f4606 	br	e25c <__alt_data_end+0xfc00e25c>
    e544:	00800044 	movi	r2,1
    e548:	a0800115 	stw	r2,4(r20)
    e54c:	003f7406 	br	e320 <__alt_data_end+0xfc00e320>
    e550:	1805d0ba 	srai	r2,r3,2
    e554:	01c00044 	movi	r7,1
    e558:	30c00117 	ldw	r3,4(r6)
    e55c:	388e983a 	sll	r7,r7,r2
    e560:	2805883a 	mov	r2,r5
    e564:	38c6b03a 	or	r3,r7,r3
    e568:	30c00115 	stw	r3,4(r6)
    e56c:	003f9b06 	br	e3dc <__alt_data_end+0xfc00e3dc>
    e570:	00c15504 	movi	r3,1364
    e574:	18801a36 	bltu	r3,r2,e5e0 <_malloc_r+0x768>
    e578:	8804d4ba 	srli	r2,r17,18
    e57c:	12001f44 	addi	r8,r2,125
    e580:	11c01f04 	addi	r7,r2,124
    e584:	4209883a 	add	r4,r8,r8
    e588:	003e5906 	br	def0 <__alt_data_end+0xfc00def0>
    e58c:	ad400404 	addi	r21,r21,16
    e590:	003f1706 	br	e1f0 <__alt_data_end+0xfc00e1f0>
    e594:	00c01504 	movi	r3,84
    e598:	18802336 	bltu	r3,r2,e628 <_malloc_r+0x7b0>
    e59c:	3804d33a 	srli	r2,r7,12
    e5a0:	11401bc4 	addi	r5,r2,111
    e5a4:	10c01b84 	addi	r3,r2,110
    e5a8:	294b883a 	add	r5,r5,r5
    e5ac:	003f7b06 	br	e39c <__alt_data_end+0xfc00e39c>
    e5b0:	9c000217 	ldw	r16,8(r19)
    e5b4:	00bfff04 	movi	r2,-4
    e5b8:	80c00117 	ldw	r3,4(r16)
    e5bc:	1886703a 	and	r3,r3,r2
    e5c0:	003f5306 	br	e310 <__alt_data_end+0xfc00e310>
    e5c4:	3083ffcc 	andi	r2,r6,4095
    e5c8:	103f181e 	bne	r2,zero,e22c <__alt_data_end+0xfc00e22c>
    e5cc:	99000217 	ldw	r4,8(r19)
    e5d0:	b545883a 	add	r2,r22,r21
    e5d4:	10800054 	ori	r2,r2,1
    e5d8:	20800115 	stw	r2,4(r4)
    e5dc:	003f3e06 	br	e2d8 <__alt_data_end+0xfc00e2d8>
    e5e0:	01003f84 	movi	r4,254
    e5e4:	02001fc4 	movi	r8,127
    e5e8:	01c01f84 	movi	r7,126
    e5ec:	003e4006 	br	def0 <__alt_data_end+0xfc00def0>
    e5f0:	008000f4 	movhi	r2,3
    e5f4:	10b60b04 	addi	r2,r2,-10196
    e5f8:	15000015 	stw	r20,0(r2)
    e5fc:	003f1106 	br	e244 <__alt_data_end+0xfc00e244>
    e600:	00800044 	movi	r2,1
    e604:	002b883a 	mov	r21,zero
    e608:	003f1f06 	br	e288 <__alt_data_end+0xfc00e288>
    e60c:	81400204 	addi	r5,r16,8
    e610:	9009883a 	mov	r4,r18
    e614:	00157dc0 	call	157dc <_free_r>
    e618:	008000f4 	movhi	r2,3
    e61c:	1082f504 	addi	r2,r2,3028
    e620:	10c00017 	ldw	r3,0(r2)
    e624:	003f2c06 	br	e2d8 <__alt_data_end+0xfc00e2d8>
    e628:	00c05504 	movi	r3,340
    e62c:	18800536 	bltu	r3,r2,e644 <_malloc_r+0x7cc>
    e630:	3804d3fa 	srli	r2,r7,15
    e634:	11401e04 	addi	r5,r2,120
    e638:	10c01dc4 	addi	r3,r2,119
    e63c:	294b883a 	add	r5,r5,r5
    e640:	003f5606 	br	e39c <__alt_data_end+0xfc00e39c>
    e644:	00c15504 	movi	r3,1364
    e648:	18800536 	bltu	r3,r2,e660 <_malloc_r+0x7e8>
    e64c:	3804d4ba 	srli	r2,r7,18
    e650:	11401f44 	addi	r5,r2,125
    e654:	10c01f04 	addi	r3,r2,124
    e658:	294b883a 	add	r5,r5,r5
    e65c:	003f4f06 	br	e39c <__alt_data_end+0xfc00e39c>
    e660:	01403f84 	movi	r5,254
    e664:	00c01f84 	movi	r3,126
    e668:	003f4c06 	br	e39c <__alt_data_end+0xfc00e39c>
    e66c:	98800117 	ldw	r2,4(r19)
    e670:	003fa006 	br	e4f4 <__alt_data_end+0xfc00e4f4>
    e674:	8808d0fa 	srli	r4,r17,3
    e678:	20800044 	addi	r2,r4,1
    e67c:	1085883a 	add	r2,r2,r2
    e680:	003e9006 	br	e0c4 <__alt_data_end+0xfc00e0c4>

0000e684 <memcpy>:
    e684:	defffd04 	addi	sp,sp,-12
    e688:	dfc00215 	stw	ra,8(sp)
    e68c:	dc400115 	stw	r17,4(sp)
    e690:	dc000015 	stw	r16,0(sp)
    e694:	00c003c4 	movi	r3,15
    e698:	2005883a 	mov	r2,r4
    e69c:	1980452e 	bgeu	r3,r6,e7b4 <memcpy+0x130>
    e6a0:	2906b03a 	or	r3,r5,r4
    e6a4:	18c000cc 	andi	r3,r3,3
    e6a8:	1800441e 	bne	r3,zero,e7bc <memcpy+0x138>
    e6ac:	347ffc04 	addi	r17,r6,-16
    e6b0:	8822d13a 	srli	r17,r17,4
    e6b4:	28c00104 	addi	r3,r5,4
    e6b8:	23400104 	addi	r13,r4,4
    e6bc:	8820913a 	slli	r16,r17,4
    e6c0:	2b000204 	addi	r12,r5,8
    e6c4:	22c00204 	addi	r11,r4,8
    e6c8:	84000504 	addi	r16,r16,20
    e6cc:	2a800304 	addi	r10,r5,12
    e6d0:	22400304 	addi	r9,r4,12
    e6d4:	2c21883a 	add	r16,r5,r16
    e6d8:	2811883a 	mov	r8,r5
    e6dc:	200f883a 	mov	r7,r4
    e6e0:	41000017 	ldw	r4,0(r8)
    e6e4:	1fc00017 	ldw	ra,0(r3)
    e6e8:	63c00017 	ldw	r15,0(r12)
    e6ec:	39000015 	stw	r4,0(r7)
    e6f0:	53800017 	ldw	r14,0(r10)
    e6f4:	6fc00015 	stw	ra,0(r13)
    e6f8:	5bc00015 	stw	r15,0(r11)
    e6fc:	4b800015 	stw	r14,0(r9)
    e700:	18c00404 	addi	r3,r3,16
    e704:	39c00404 	addi	r7,r7,16
    e708:	42000404 	addi	r8,r8,16
    e70c:	6b400404 	addi	r13,r13,16
    e710:	63000404 	addi	r12,r12,16
    e714:	5ac00404 	addi	r11,r11,16
    e718:	52800404 	addi	r10,r10,16
    e71c:	4a400404 	addi	r9,r9,16
    e720:	1c3fef1e 	bne	r3,r16,e6e0 <__alt_data_end+0xfc00e6e0>
    e724:	89c00044 	addi	r7,r17,1
    e728:	380e913a 	slli	r7,r7,4
    e72c:	310003cc 	andi	r4,r6,15
    e730:	02c000c4 	movi	r11,3
    e734:	11c7883a 	add	r3,r2,r7
    e738:	29cb883a 	add	r5,r5,r7
    e73c:	5900212e 	bgeu	r11,r4,e7c4 <memcpy+0x140>
    e740:	1813883a 	mov	r9,r3
    e744:	2811883a 	mov	r8,r5
    e748:	200f883a 	mov	r7,r4
    e74c:	42800017 	ldw	r10,0(r8)
    e750:	4a400104 	addi	r9,r9,4
    e754:	39ffff04 	addi	r7,r7,-4
    e758:	4abfff15 	stw	r10,-4(r9)
    e75c:	42000104 	addi	r8,r8,4
    e760:	59fffa36 	bltu	r11,r7,e74c <__alt_data_end+0xfc00e74c>
    e764:	213fff04 	addi	r4,r4,-4
    e768:	2008d0ba 	srli	r4,r4,2
    e76c:	318000cc 	andi	r6,r6,3
    e770:	21000044 	addi	r4,r4,1
    e774:	2109883a 	add	r4,r4,r4
    e778:	2109883a 	add	r4,r4,r4
    e77c:	1907883a 	add	r3,r3,r4
    e780:	290b883a 	add	r5,r5,r4
    e784:	30000626 	beq	r6,zero,e7a0 <memcpy+0x11c>
    e788:	198d883a 	add	r6,r3,r6
    e78c:	29c00003 	ldbu	r7,0(r5)
    e790:	18c00044 	addi	r3,r3,1
    e794:	29400044 	addi	r5,r5,1
    e798:	19ffffc5 	stb	r7,-1(r3)
    e79c:	19bffb1e 	bne	r3,r6,e78c <__alt_data_end+0xfc00e78c>
    e7a0:	dfc00217 	ldw	ra,8(sp)
    e7a4:	dc400117 	ldw	r17,4(sp)
    e7a8:	dc000017 	ldw	r16,0(sp)
    e7ac:	dec00304 	addi	sp,sp,12
    e7b0:	f800283a 	ret
    e7b4:	2007883a 	mov	r3,r4
    e7b8:	003ff206 	br	e784 <__alt_data_end+0xfc00e784>
    e7bc:	2007883a 	mov	r3,r4
    e7c0:	003ff106 	br	e788 <__alt_data_end+0xfc00e788>
    e7c4:	200d883a 	mov	r6,r4
    e7c8:	003fee06 	br	e784 <__alt_data_end+0xfc00e784>

0000e7cc <memset>:
    e7cc:	20c000cc 	andi	r3,r4,3
    e7d0:	2005883a 	mov	r2,r4
    e7d4:	18004426 	beq	r3,zero,e8e8 <memset+0x11c>
    e7d8:	31ffffc4 	addi	r7,r6,-1
    e7dc:	30004026 	beq	r6,zero,e8e0 <memset+0x114>
    e7e0:	2813883a 	mov	r9,r5
    e7e4:	200d883a 	mov	r6,r4
    e7e8:	2007883a 	mov	r3,r4
    e7ec:	00000406 	br	e800 <memset+0x34>
    e7f0:	3a3fffc4 	addi	r8,r7,-1
    e7f4:	31800044 	addi	r6,r6,1
    e7f8:	38003926 	beq	r7,zero,e8e0 <memset+0x114>
    e7fc:	400f883a 	mov	r7,r8
    e800:	18c00044 	addi	r3,r3,1
    e804:	32400005 	stb	r9,0(r6)
    e808:	1a0000cc 	andi	r8,r3,3
    e80c:	403ff81e 	bne	r8,zero,e7f0 <__alt_data_end+0xfc00e7f0>
    e810:	010000c4 	movi	r4,3
    e814:	21c02d2e 	bgeu	r4,r7,e8cc <memset+0x100>
    e818:	29003fcc 	andi	r4,r5,255
    e81c:	200c923a 	slli	r6,r4,8
    e820:	3108b03a 	or	r4,r6,r4
    e824:	200c943a 	slli	r6,r4,16
    e828:	218cb03a 	or	r6,r4,r6
    e82c:	010003c4 	movi	r4,15
    e830:	21c0182e 	bgeu	r4,r7,e894 <memset+0xc8>
    e834:	3b3ffc04 	addi	r12,r7,-16
    e838:	6018d13a 	srli	r12,r12,4
    e83c:	1a000104 	addi	r8,r3,4
    e840:	1ac00204 	addi	r11,r3,8
    e844:	6008913a 	slli	r4,r12,4
    e848:	1a800304 	addi	r10,r3,12
    e84c:	1813883a 	mov	r9,r3
    e850:	21000504 	addi	r4,r4,20
    e854:	1909883a 	add	r4,r3,r4
    e858:	49800015 	stw	r6,0(r9)
    e85c:	41800015 	stw	r6,0(r8)
    e860:	59800015 	stw	r6,0(r11)
    e864:	51800015 	stw	r6,0(r10)
    e868:	42000404 	addi	r8,r8,16
    e86c:	4a400404 	addi	r9,r9,16
    e870:	5ac00404 	addi	r11,r11,16
    e874:	52800404 	addi	r10,r10,16
    e878:	413ff71e 	bne	r8,r4,e858 <__alt_data_end+0xfc00e858>
    e87c:	63000044 	addi	r12,r12,1
    e880:	6018913a 	slli	r12,r12,4
    e884:	39c003cc 	andi	r7,r7,15
    e888:	010000c4 	movi	r4,3
    e88c:	1b07883a 	add	r3,r3,r12
    e890:	21c00e2e 	bgeu	r4,r7,e8cc <memset+0x100>
    e894:	1813883a 	mov	r9,r3
    e898:	3811883a 	mov	r8,r7
    e89c:	010000c4 	movi	r4,3
    e8a0:	49800015 	stw	r6,0(r9)
    e8a4:	423fff04 	addi	r8,r8,-4
    e8a8:	4a400104 	addi	r9,r9,4
    e8ac:	223ffc36 	bltu	r4,r8,e8a0 <__alt_data_end+0xfc00e8a0>
    e8b0:	393fff04 	addi	r4,r7,-4
    e8b4:	2008d0ba 	srli	r4,r4,2
    e8b8:	39c000cc 	andi	r7,r7,3
    e8bc:	21000044 	addi	r4,r4,1
    e8c0:	2109883a 	add	r4,r4,r4
    e8c4:	2109883a 	add	r4,r4,r4
    e8c8:	1907883a 	add	r3,r3,r4
    e8cc:	38000526 	beq	r7,zero,e8e4 <memset+0x118>
    e8d0:	19cf883a 	add	r7,r3,r7
    e8d4:	19400005 	stb	r5,0(r3)
    e8d8:	18c00044 	addi	r3,r3,1
    e8dc:	38fffd1e 	bne	r7,r3,e8d4 <__alt_data_end+0xfc00e8d4>
    e8e0:	f800283a 	ret
    e8e4:	f800283a 	ret
    e8e8:	2007883a 	mov	r3,r4
    e8ec:	300f883a 	mov	r7,r6
    e8f0:	003fc706 	br	e810 <__alt_data_end+0xfc00e810>

0000e8f4 <_printf_r>:
    e8f4:	defffd04 	addi	sp,sp,-12
    e8f8:	2805883a 	mov	r2,r5
    e8fc:	dfc00015 	stw	ra,0(sp)
    e900:	d9800115 	stw	r6,4(sp)
    e904:	d9c00215 	stw	r7,8(sp)
    e908:	21400217 	ldw	r5,8(r4)
    e90c:	d9c00104 	addi	r7,sp,4
    e910:	100d883a 	mov	r6,r2
    e914:	00112a80 	call	112a8 <___vfprintf_internal_r>
    e918:	dfc00017 	ldw	ra,0(sp)
    e91c:	dec00304 	addi	sp,sp,12
    e920:	f800283a 	ret

0000e924 <printf>:
    e924:	defffc04 	addi	sp,sp,-16
    e928:	dfc00015 	stw	ra,0(sp)
    e92c:	d9400115 	stw	r5,4(sp)
    e930:	d9800215 	stw	r6,8(sp)
    e934:	d9c00315 	stw	r7,12(sp)
    e938:	008000f4 	movhi	r2,3
    e93c:	10b60a04 	addi	r2,r2,-10200
    e940:	10800017 	ldw	r2,0(r2)
    e944:	200b883a 	mov	r5,r4
    e948:	d9800104 	addi	r6,sp,4
    e94c:	11000217 	ldw	r4,8(r2)
    e950:	00135840 	call	13584 <__vfprintf_internal>
    e954:	dfc00017 	ldw	ra,0(sp)
    e958:	dec00404 	addi	sp,sp,16
    e95c:	f800283a 	ret

0000e960 <_putchar_r>:
    e960:	21800217 	ldw	r6,8(r4)
    e964:	00176cc1 	jmpi	176cc <_putc_r>

0000e968 <putchar>:
    e968:	008000f4 	movhi	r2,3
    e96c:	10b60a04 	addi	r2,r2,-10200
    e970:	200b883a 	mov	r5,r4
    e974:	11000017 	ldw	r4,0(r2)
    e978:	21800217 	ldw	r6,8(r4)
    e97c:	00176cc1 	jmpi	176cc <_putc_r>

0000e980 <_puts_r>:
    e980:	defff604 	addi	sp,sp,-40
    e984:	dc000715 	stw	r16,28(sp)
    e988:	2021883a 	mov	r16,r4
    e98c:	2809883a 	mov	r4,r5
    e990:	dc400815 	stw	r17,32(sp)
    e994:	dfc00915 	stw	ra,36(sp)
    e998:	2823883a 	mov	r17,r5
    e99c:	000ef4c0 	call	ef4c <strlen>
    e9a0:	10c00044 	addi	r3,r2,1
    e9a4:	d8800115 	stw	r2,4(sp)
    e9a8:	008000f4 	movhi	r2,3
    e9ac:	10a90804 	addi	r2,r2,-23520
    e9b0:	d8800215 	stw	r2,8(sp)
    e9b4:	00800044 	movi	r2,1
    e9b8:	d8800315 	stw	r2,12(sp)
    e9bc:	00800084 	movi	r2,2
    e9c0:	dc400015 	stw	r17,0(sp)
    e9c4:	d8c00615 	stw	r3,24(sp)
    e9c8:	dec00415 	stw	sp,16(sp)
    e9cc:	d8800515 	stw	r2,20(sp)
    e9d0:	80000226 	beq	r16,zero,e9dc <_puts_r+0x5c>
    e9d4:	80800e17 	ldw	r2,56(r16)
    e9d8:	10001426 	beq	r2,zero,ea2c <_puts_r+0xac>
    e9dc:	81400217 	ldw	r5,8(r16)
    e9e0:	2880030b 	ldhu	r2,12(r5)
    e9e4:	10c8000c 	andi	r3,r2,8192
    e9e8:	1800061e 	bne	r3,zero,ea04 <_puts_r+0x84>
    e9ec:	29001917 	ldw	r4,100(r5)
    e9f0:	00f7ffc4 	movi	r3,-8193
    e9f4:	10880014 	ori	r2,r2,8192
    e9f8:	20c6703a 	and	r3,r4,r3
    e9fc:	2880030d 	sth	r2,12(r5)
    ea00:	28c01915 	stw	r3,100(r5)
    ea04:	d9800404 	addi	r6,sp,16
    ea08:	8009883a 	mov	r4,r16
    ea0c:	0015aec0 	call	15aec <__sfvwrite_r>
    ea10:	1000091e 	bne	r2,zero,ea38 <_puts_r+0xb8>
    ea14:	00800284 	movi	r2,10
    ea18:	dfc00917 	ldw	ra,36(sp)
    ea1c:	dc400817 	ldw	r17,32(sp)
    ea20:	dc000717 	ldw	r16,28(sp)
    ea24:	dec00a04 	addi	sp,sp,40
    ea28:	f800283a 	ret
    ea2c:	8009883a 	mov	r4,r16
    ea30:	00156680 	call	15668 <__sinit>
    ea34:	003fe906 	br	e9dc <__alt_data_end+0xfc00e9dc>
    ea38:	00bfffc4 	movi	r2,-1
    ea3c:	003ff606 	br	ea18 <__alt_data_end+0xfc00ea18>

0000ea40 <puts>:
    ea40:	008000f4 	movhi	r2,3
    ea44:	10b60a04 	addi	r2,r2,-10200
    ea48:	200b883a 	mov	r5,r4
    ea4c:	11000017 	ldw	r4,0(r2)
    ea50:	000e9801 	jmpi	e980 <_puts_r>

0000ea54 <_sbrk_r>:
    ea54:	defffd04 	addi	sp,sp,-12
    ea58:	dc000015 	stw	r16,0(sp)
    ea5c:	040000f4 	movhi	r16,3
    ea60:	dc400115 	stw	r17,4(sp)
    ea64:	84029e04 	addi	r16,r16,2680
    ea68:	2023883a 	mov	r17,r4
    ea6c:	2809883a 	mov	r4,r5
    ea70:	dfc00215 	stw	ra,8(sp)
    ea74:	80000015 	stw	zero,0(r16)
    ea78:	001f2640 	call	1f264 <sbrk>
    ea7c:	00ffffc4 	movi	r3,-1
    ea80:	10c00526 	beq	r2,r3,ea98 <_sbrk_r+0x44>
    ea84:	dfc00217 	ldw	ra,8(sp)
    ea88:	dc400117 	ldw	r17,4(sp)
    ea8c:	dc000017 	ldw	r16,0(sp)
    ea90:	dec00304 	addi	sp,sp,12
    ea94:	f800283a 	ret
    ea98:	80c00017 	ldw	r3,0(r16)
    ea9c:	183ff926 	beq	r3,zero,ea84 <__alt_data_end+0xfc00ea84>
    eaa0:	88c00015 	stw	r3,0(r17)
    eaa4:	003ff706 	br	ea84 <__alt_data_end+0xfc00ea84>

0000eaa8 <_init_signal_r>:
    eaa8:	2080b717 	ldw	r2,732(r4)
    eaac:	10000226 	beq	r2,zero,eab8 <_init_signal_r+0x10>
    eab0:	0005883a 	mov	r2,zero
    eab4:	f800283a 	ret
    eab8:	defffe04 	addi	sp,sp,-8
    eabc:	01402004 	movi	r5,128
    eac0:	dc000015 	stw	r16,0(sp)
    eac4:	dfc00115 	stw	ra,4(sp)
    eac8:	2021883a 	mov	r16,r4
    eacc:	000de780 	call	de78 <_malloc_r>
    ead0:	8080b715 	stw	r2,732(r16)
    ead4:	10000d26 	beq	r2,zero,eb0c <_init_signal_r+0x64>
    ead8:	0007883a 	mov	r3,zero
    eadc:	01002004 	movi	r4,128
    eae0:	00000106 	br	eae8 <_init_signal_r+0x40>
    eae4:	8080b717 	ldw	r2,732(r16)
    eae8:	10c5883a 	add	r2,r2,r3
    eaec:	10000015 	stw	zero,0(r2)
    eaf0:	18c00104 	addi	r3,r3,4
    eaf4:	193ffb1e 	bne	r3,r4,eae4 <__alt_data_end+0xfc00eae4>
    eaf8:	0005883a 	mov	r2,zero
    eafc:	dfc00117 	ldw	ra,4(sp)
    eb00:	dc000017 	ldw	r16,0(sp)
    eb04:	dec00204 	addi	sp,sp,8
    eb08:	f800283a 	ret
    eb0c:	00bfffc4 	movi	r2,-1
    eb10:	003ffa06 	br	eafc <__alt_data_end+0xfc00eafc>

0000eb14 <_signal_r>:
    eb14:	00c007c4 	movi	r3,31
    eb18:	19401536 	bltu	r3,r5,eb70 <_signal_r+0x5c>
    eb1c:	2080b717 	ldw	r2,732(r4)
    eb20:	defffc04 	addi	sp,sp,-16
    eb24:	dc800215 	stw	r18,8(sp)
    eb28:	dc400115 	stw	r17,4(sp)
    eb2c:	dc000015 	stw	r16,0(sp)
    eb30:	dfc00315 	stw	ra,12(sp)
    eb34:	3023883a 	mov	r17,r6
    eb38:	2021883a 	mov	r16,r4
    eb3c:	2825883a 	mov	r18,r5
    eb40:	10000f26 	beq	r2,zero,eb80 <_signal_r+0x6c>
    eb44:	948b883a 	add	r5,r18,r18
    eb48:	294b883a 	add	r5,r5,r5
    eb4c:	114b883a 	add	r5,r2,r5
    eb50:	28800017 	ldw	r2,0(r5)
    eb54:	2c400015 	stw	r17,0(r5)
    eb58:	dfc00317 	ldw	ra,12(sp)
    eb5c:	dc800217 	ldw	r18,8(sp)
    eb60:	dc400117 	ldw	r17,4(sp)
    eb64:	dc000017 	ldw	r16,0(sp)
    eb68:	dec00404 	addi	sp,sp,16
    eb6c:	f800283a 	ret
    eb70:	00c00584 	movi	r3,22
    eb74:	20c00015 	stw	r3,0(r4)
    eb78:	00bfffc4 	movi	r2,-1
    eb7c:	f800283a 	ret
    eb80:	000eaa80 	call	eaa8 <_init_signal_r>
    eb84:	1000021e 	bne	r2,zero,eb90 <_signal_r+0x7c>
    eb88:	8080b717 	ldw	r2,732(r16)
    eb8c:	003fed06 	br	eb44 <__alt_data_end+0xfc00eb44>
    eb90:	00bfffc4 	movi	r2,-1
    eb94:	003ff006 	br	eb58 <__alt_data_end+0xfc00eb58>

0000eb98 <_raise_r>:
    eb98:	008007c4 	movi	r2,31
    eb9c:	11402936 	bltu	r2,r5,ec44 <_raise_r+0xac>
    eba0:	20c0b717 	ldw	r3,732(r4)
    eba4:	defffd04 	addi	sp,sp,-12
    eba8:	dc400115 	stw	r17,4(sp)
    ebac:	dc000015 	stw	r16,0(sp)
    ebb0:	dfc00215 	stw	ra,8(sp)
    ebb4:	2021883a 	mov	r16,r4
    ebb8:	2823883a 	mov	r17,r5
    ebbc:	18001726 	beq	r3,zero,ec1c <_raise_r+0x84>
    ebc0:	2945883a 	add	r2,r5,r5
    ebc4:	1085883a 	add	r2,r2,r2
    ebc8:	1887883a 	add	r3,r3,r2
    ebcc:	19800017 	ldw	r6,0(r3)
    ebd0:	30001226 	beq	r6,zero,ec1c <_raise_r+0x84>
    ebd4:	00800044 	movi	r2,1
    ebd8:	30800e26 	beq	r6,r2,ec14 <_raise_r+0x7c>
    ebdc:	013fffc4 	movi	r4,-1
    ebe0:	31000926 	beq	r6,r4,ec08 <_raise_r+0x70>
    ebe4:	18000015 	stw	zero,0(r3)
    ebe8:	2809883a 	mov	r4,r5
    ebec:	303ee83a 	callr	r6
    ebf0:	0005883a 	mov	r2,zero
    ebf4:	dfc00217 	ldw	ra,8(sp)
    ebf8:	dc400117 	ldw	r17,4(sp)
    ebfc:	dc000017 	ldw	r16,0(sp)
    ec00:	dec00304 	addi	sp,sp,12
    ec04:	f800283a 	ret
    ec08:	00c00584 	movi	r3,22
    ec0c:	80c00015 	stw	r3,0(r16)
    ec10:	003ff806 	br	ebf4 <__alt_data_end+0xfc00ebf4>
    ec14:	0005883a 	mov	r2,zero
    ec18:	003ff606 	br	ebf4 <__alt_data_end+0xfc00ebf4>
    ec1c:	8009883a 	mov	r4,r16
    ec20:	000eda80 	call	eda8 <_getpid_r>
    ec24:	880d883a 	mov	r6,r17
    ec28:	100b883a 	mov	r5,r2
    ec2c:	8009883a 	mov	r4,r16
    ec30:	dfc00217 	ldw	ra,8(sp)
    ec34:	dc400117 	ldw	r17,4(sp)
    ec38:	dc000017 	ldw	r16,0(sp)
    ec3c:	dec00304 	addi	sp,sp,12
    ec40:	000ed4c1 	jmpi	ed4c <_kill_r>
    ec44:	00800584 	movi	r2,22
    ec48:	20800015 	stw	r2,0(r4)
    ec4c:	00bfffc4 	movi	r2,-1
    ec50:	f800283a 	ret

0000ec54 <__sigtramp_r>:
    ec54:	008007c4 	movi	r2,31
    ec58:	11402436 	bltu	r2,r5,ecec <__sigtramp_r+0x98>
    ec5c:	20c0b717 	ldw	r3,732(r4)
    ec60:	defffd04 	addi	sp,sp,-12
    ec64:	dc400115 	stw	r17,4(sp)
    ec68:	dc000015 	stw	r16,0(sp)
    ec6c:	dfc00215 	stw	ra,8(sp)
    ec70:	2021883a 	mov	r16,r4
    ec74:	2823883a 	mov	r17,r5
    ec78:	18001826 	beq	r3,zero,ecdc <__sigtramp_r+0x88>
    ec7c:	8c45883a 	add	r2,r17,r17
    ec80:	1085883a 	add	r2,r2,r2
    ec84:	1885883a 	add	r2,r3,r2
    ec88:	10c00017 	ldw	r3,0(r2)
    ec8c:	18001126 	beq	r3,zero,ecd4 <__sigtramp_r+0x80>
    ec90:	013fffc4 	movi	r4,-1
    ec94:	19000d26 	beq	r3,r4,eccc <__sigtramp_r+0x78>
    ec98:	01000044 	movi	r4,1
    ec9c:	19000926 	beq	r3,r4,ecc4 <__sigtramp_r+0x70>
    eca0:	10000015 	stw	zero,0(r2)
    eca4:	8809883a 	mov	r4,r17
    eca8:	183ee83a 	callr	r3
    ecac:	0005883a 	mov	r2,zero
    ecb0:	dfc00217 	ldw	ra,8(sp)
    ecb4:	dc400117 	ldw	r17,4(sp)
    ecb8:	dc000017 	ldw	r16,0(sp)
    ecbc:	dec00304 	addi	sp,sp,12
    ecc0:	f800283a 	ret
    ecc4:	008000c4 	movi	r2,3
    ecc8:	003ff906 	br	ecb0 <__alt_data_end+0xfc00ecb0>
    eccc:	00800084 	movi	r2,2
    ecd0:	003ff706 	br	ecb0 <__alt_data_end+0xfc00ecb0>
    ecd4:	00800044 	movi	r2,1
    ecd8:	003ff506 	br	ecb0 <__alt_data_end+0xfc00ecb0>
    ecdc:	000eaa80 	call	eaa8 <_init_signal_r>
    ece0:	1000041e 	bne	r2,zero,ecf4 <__sigtramp_r+0xa0>
    ece4:	80c0b717 	ldw	r3,732(r16)
    ece8:	003fe406 	br	ec7c <__alt_data_end+0xfc00ec7c>
    ecec:	00bfffc4 	movi	r2,-1
    ecf0:	f800283a 	ret
    ecf4:	00bfffc4 	movi	r2,-1
    ecf8:	003fed06 	br	ecb0 <__alt_data_end+0xfc00ecb0>

0000ecfc <raise>:
    ecfc:	008000f4 	movhi	r2,3
    ed00:	10b60a04 	addi	r2,r2,-10200
    ed04:	200b883a 	mov	r5,r4
    ed08:	11000017 	ldw	r4,0(r2)
    ed0c:	000eb981 	jmpi	eb98 <_raise_r>

0000ed10 <signal>:
    ed10:	008000f4 	movhi	r2,3
    ed14:	10b60a04 	addi	r2,r2,-10200
    ed18:	280d883a 	mov	r6,r5
    ed1c:	200b883a 	mov	r5,r4
    ed20:	11000017 	ldw	r4,0(r2)
    ed24:	000eb141 	jmpi	eb14 <_signal_r>

0000ed28 <_init_signal>:
    ed28:	008000f4 	movhi	r2,3
    ed2c:	10b60a04 	addi	r2,r2,-10200
    ed30:	11000017 	ldw	r4,0(r2)
    ed34:	000eaa81 	jmpi	eaa8 <_init_signal_r>

0000ed38 <__sigtramp>:
    ed38:	008000f4 	movhi	r2,3
    ed3c:	10b60a04 	addi	r2,r2,-10200
    ed40:	200b883a 	mov	r5,r4
    ed44:	11000017 	ldw	r4,0(r2)
    ed48:	000ec541 	jmpi	ec54 <__sigtramp_r>

0000ed4c <_kill_r>:
    ed4c:	defffd04 	addi	sp,sp,-12
    ed50:	2805883a 	mov	r2,r5
    ed54:	dc000015 	stw	r16,0(sp)
    ed58:	040000f4 	movhi	r16,3
    ed5c:	dc400115 	stw	r17,4(sp)
    ed60:	84029e04 	addi	r16,r16,2680
    ed64:	2023883a 	mov	r17,r4
    ed68:	300b883a 	mov	r5,r6
    ed6c:	1009883a 	mov	r4,r2
    ed70:	dfc00215 	stw	ra,8(sp)
    ed74:	80000015 	stw	zero,0(r16)
    ed78:	001eca80 	call	1eca8 <kill>
    ed7c:	00ffffc4 	movi	r3,-1
    ed80:	10c00526 	beq	r2,r3,ed98 <_kill_r+0x4c>
    ed84:	dfc00217 	ldw	ra,8(sp)
    ed88:	dc400117 	ldw	r17,4(sp)
    ed8c:	dc000017 	ldw	r16,0(sp)
    ed90:	dec00304 	addi	sp,sp,12
    ed94:	f800283a 	ret
    ed98:	80c00017 	ldw	r3,0(r16)
    ed9c:	183ff926 	beq	r3,zero,ed84 <__alt_data_end+0xfc00ed84>
    eda0:	88c00015 	stw	r3,0(r17)
    eda4:	003ff706 	br	ed84 <__alt_data_end+0xfc00ed84>

0000eda8 <_getpid_r>:
    eda8:	001eb641 	jmpi	1eb64 <getpid>

0000edac <_sprintf_r>:
    edac:	deffe404 	addi	sp,sp,-112
    edb0:	2807883a 	mov	r3,r5
    edb4:	dfc01a15 	stw	ra,104(sp)
    edb8:	d9c01b15 	stw	r7,108(sp)
    edbc:	00a00034 	movhi	r2,32768
    edc0:	10bfffc4 	addi	r2,r2,-1
    edc4:	02008204 	movi	r8,520
    edc8:	d8800215 	stw	r2,8(sp)
    edcc:	d8800515 	stw	r2,20(sp)
    edd0:	d9c01b04 	addi	r7,sp,108
    edd4:	d80b883a 	mov	r5,sp
    edd8:	00bfffc4 	movi	r2,-1
    eddc:	d8c00015 	stw	r3,0(sp)
    ede0:	d8c00415 	stw	r3,16(sp)
    ede4:	da00030d 	sth	r8,12(sp)
    ede8:	d880038d 	sth	r2,14(sp)
    edec:	000efe40 	call	efe4 <___svfprintf_internal_r>
    edf0:	d8c00017 	ldw	r3,0(sp)
    edf4:	18000005 	stb	zero,0(r3)
    edf8:	dfc01a17 	ldw	ra,104(sp)
    edfc:	dec01c04 	addi	sp,sp,112
    ee00:	f800283a 	ret

0000ee04 <sprintf>:
    ee04:	deffe304 	addi	sp,sp,-116
    ee08:	2007883a 	mov	r3,r4
    ee0c:	dfc01a15 	stw	ra,104(sp)
    ee10:	d9801b15 	stw	r6,108(sp)
    ee14:	d9c01c15 	stw	r7,112(sp)
    ee18:	010000f4 	movhi	r4,3
    ee1c:	21360a04 	addi	r4,r4,-10200
    ee20:	21000017 	ldw	r4,0(r4)
    ee24:	00a00034 	movhi	r2,32768
    ee28:	10bfffc4 	addi	r2,r2,-1
    ee2c:	280d883a 	mov	r6,r5
    ee30:	02008204 	movi	r8,520
    ee34:	d8800215 	stw	r2,8(sp)
    ee38:	d8800515 	stw	r2,20(sp)
    ee3c:	d9c01b04 	addi	r7,sp,108
    ee40:	d80b883a 	mov	r5,sp
    ee44:	00bfffc4 	movi	r2,-1
    ee48:	d8c00015 	stw	r3,0(sp)
    ee4c:	d8c00415 	stw	r3,16(sp)
    ee50:	da00030d 	sth	r8,12(sp)
    ee54:	d880038d 	sth	r2,14(sp)
    ee58:	000efe40 	call	efe4 <___svfprintf_internal_r>
    ee5c:	d8c00017 	ldw	r3,0(sp)
    ee60:	18000005 	stb	zero,0(r3)
    ee64:	dfc01a17 	ldw	ra,104(sp)
    ee68:	dec01d04 	addi	sp,sp,116
    ee6c:	f800283a 	ret

0000ee70 <strcmp>:
    ee70:	2144b03a 	or	r2,r4,r5
    ee74:	108000cc 	andi	r2,r2,3
    ee78:	1000171e 	bne	r2,zero,eed8 <strcmp+0x68>
    ee7c:	20800017 	ldw	r2,0(r4)
    ee80:	28c00017 	ldw	r3,0(r5)
    ee84:	10c0141e 	bne	r2,r3,eed8 <strcmp+0x68>
    ee88:	027fbff4 	movhi	r9,65279
    ee8c:	4a7fbfc4 	addi	r9,r9,-257
    ee90:	0086303a 	nor	r3,zero,r2
    ee94:	02202074 	movhi	r8,32897
    ee98:	1245883a 	add	r2,r2,r9
    ee9c:	42202004 	addi	r8,r8,-32640
    eea0:	10c4703a 	and	r2,r2,r3
    eea4:	1204703a 	and	r2,r2,r8
    eea8:	10000226 	beq	r2,zero,eeb4 <strcmp+0x44>
    eeac:	00002306 	br	ef3c <strcmp+0xcc>
    eeb0:	1000221e 	bne	r2,zero,ef3c <strcmp+0xcc>
    eeb4:	21000104 	addi	r4,r4,4
    eeb8:	20c00017 	ldw	r3,0(r4)
    eebc:	29400104 	addi	r5,r5,4
    eec0:	29800017 	ldw	r6,0(r5)
    eec4:	1a4f883a 	add	r7,r3,r9
    eec8:	00c4303a 	nor	r2,zero,r3
    eecc:	3884703a 	and	r2,r7,r2
    eed0:	1204703a 	and	r2,r2,r8
    eed4:	19bff626 	beq	r3,r6,eeb0 <__alt_data_end+0xfc00eeb0>
    eed8:	20800003 	ldbu	r2,0(r4)
    eedc:	10c03fcc 	andi	r3,r2,255
    eee0:	18c0201c 	xori	r3,r3,128
    eee4:	18ffe004 	addi	r3,r3,-128
    eee8:	18000c26 	beq	r3,zero,ef1c <strcmp+0xac>
    eeec:	29800007 	ldb	r6,0(r5)
    eef0:	19800326 	beq	r3,r6,ef00 <strcmp+0x90>
    eef4:	00001306 	br	ef44 <strcmp+0xd4>
    eef8:	29800007 	ldb	r6,0(r5)
    eefc:	11800b1e 	bne	r2,r6,ef2c <strcmp+0xbc>
    ef00:	21000044 	addi	r4,r4,1
    ef04:	20c00003 	ldbu	r3,0(r4)
    ef08:	29400044 	addi	r5,r5,1
    ef0c:	18803fcc 	andi	r2,r3,255
    ef10:	1080201c 	xori	r2,r2,128
    ef14:	10bfe004 	addi	r2,r2,-128
    ef18:	103ff71e 	bne	r2,zero,eef8 <__alt_data_end+0xfc00eef8>
    ef1c:	0007883a 	mov	r3,zero
    ef20:	28800003 	ldbu	r2,0(r5)
    ef24:	1885c83a 	sub	r2,r3,r2
    ef28:	f800283a 	ret
    ef2c:	28800003 	ldbu	r2,0(r5)
    ef30:	18c03fcc 	andi	r3,r3,255
    ef34:	1885c83a 	sub	r2,r3,r2
    ef38:	f800283a 	ret
    ef3c:	0005883a 	mov	r2,zero
    ef40:	f800283a 	ret
    ef44:	10c03fcc 	andi	r3,r2,255
    ef48:	003ff506 	br	ef20 <__alt_data_end+0xfc00ef20>

0000ef4c <strlen>:
    ef4c:	208000cc 	andi	r2,r4,3
    ef50:	10002026 	beq	r2,zero,efd4 <strlen+0x88>
    ef54:	20800007 	ldb	r2,0(r4)
    ef58:	10002026 	beq	r2,zero,efdc <strlen+0x90>
    ef5c:	2005883a 	mov	r2,r4
    ef60:	00000206 	br	ef6c <strlen+0x20>
    ef64:	10c00007 	ldb	r3,0(r2)
    ef68:	18001826 	beq	r3,zero,efcc <strlen+0x80>
    ef6c:	10800044 	addi	r2,r2,1
    ef70:	10c000cc 	andi	r3,r2,3
    ef74:	183ffb1e 	bne	r3,zero,ef64 <__alt_data_end+0xfc00ef64>
    ef78:	10c00017 	ldw	r3,0(r2)
    ef7c:	01ffbff4 	movhi	r7,65279
    ef80:	39ffbfc4 	addi	r7,r7,-257
    ef84:	00ca303a 	nor	r5,zero,r3
    ef88:	01a02074 	movhi	r6,32897
    ef8c:	19c7883a 	add	r3,r3,r7
    ef90:	31a02004 	addi	r6,r6,-32640
    ef94:	1946703a 	and	r3,r3,r5
    ef98:	1986703a 	and	r3,r3,r6
    ef9c:	1800091e 	bne	r3,zero,efc4 <strlen+0x78>
    efa0:	10800104 	addi	r2,r2,4
    efa4:	10c00017 	ldw	r3,0(r2)
    efa8:	19cb883a 	add	r5,r3,r7
    efac:	00c6303a 	nor	r3,zero,r3
    efb0:	28c6703a 	and	r3,r5,r3
    efb4:	1986703a 	and	r3,r3,r6
    efb8:	183ff926 	beq	r3,zero,efa0 <__alt_data_end+0xfc00efa0>
    efbc:	00000106 	br	efc4 <strlen+0x78>
    efc0:	10800044 	addi	r2,r2,1
    efc4:	10c00007 	ldb	r3,0(r2)
    efc8:	183ffd1e 	bne	r3,zero,efc0 <__alt_data_end+0xfc00efc0>
    efcc:	1105c83a 	sub	r2,r2,r4
    efd0:	f800283a 	ret
    efd4:	2005883a 	mov	r2,r4
    efd8:	003fe706 	br	ef78 <__alt_data_end+0xfc00ef78>
    efdc:	0005883a 	mov	r2,zero
    efe0:	f800283a 	ret

0000efe4 <___svfprintf_internal_r>:
    efe4:	deffb704 	addi	sp,sp,-292
    efe8:	dfc04815 	stw	ra,288(sp)
    efec:	ddc04615 	stw	r23,280(sp)
    eff0:	d9402d15 	stw	r5,180(sp)
    eff4:	d9003915 	stw	r4,228(sp)
    eff8:	302f883a 	mov	r23,r6
    effc:	d9c02e15 	stw	r7,184(sp)
    f000:	df004715 	stw	fp,284(sp)
    f004:	dd804515 	stw	r22,276(sp)
    f008:	dd404415 	stw	r21,272(sp)
    f00c:	dd004315 	stw	r20,268(sp)
    f010:	dcc04215 	stw	r19,264(sp)
    f014:	dc804115 	stw	r18,260(sp)
    f018:	dc404015 	stw	r17,256(sp)
    f01c:	dc003f15 	stw	r16,252(sp)
    f020:	00161e80 	call	161e8 <_localeconv_r>
    f024:	10800017 	ldw	r2,0(r2)
    f028:	1009883a 	mov	r4,r2
    f02c:	d8803415 	stw	r2,208(sp)
    f030:	000ef4c0 	call	ef4c <strlen>
    f034:	d8c02d17 	ldw	r3,180(sp)
    f038:	d8803815 	stw	r2,224(sp)
    f03c:	1880030b 	ldhu	r2,12(r3)
    f040:	1080200c 	andi	r2,r2,128
    f044:	10000226 	beq	r2,zero,f050 <___svfprintf_internal_r+0x6c>
    f048:	18800417 	ldw	r2,16(r3)
    f04c:	1006b126 	beq	r2,zero,10b14 <___svfprintf_internal_r+0x1b30>
    f050:	dcc03917 	ldw	r19,228(sp)
    f054:	d8c00404 	addi	r3,sp,16
    f058:	054000f4 	movhi	r21,3
    f05c:	d9001e04 	addi	r4,sp,120
    f060:	ad691984 	addi	r21,r21,-23450
    f064:	d8c01e15 	stw	r3,120(sp)
    f068:	d8002015 	stw	zero,128(sp)
    f06c:	d8001f15 	stw	zero,124(sp)
    f070:	d8003315 	stw	zero,204(sp)
    f074:	d8003615 	stw	zero,216(sp)
    f078:	d8003715 	stw	zero,220(sp)
    f07c:	1811883a 	mov	r8,r3
    f080:	d8003a15 	stw	zero,232(sp)
    f084:	d8003b15 	stw	zero,236(sp)
    f088:	d8002f15 	stw	zero,188(sp)
    f08c:	d9002815 	stw	r4,160(sp)
    f090:	b8800007 	ldb	r2,0(r23)
    f094:	10027726 	beq	r2,zero,fa74 <___svfprintf_internal_r+0xa90>
    f098:	00c00944 	movi	r3,37
    f09c:	b823883a 	mov	r17,r23
    f0a0:	10c0021e 	bne	r2,r3,f0ac <___svfprintf_internal_r+0xc8>
    f0a4:	00001406 	br	f0f8 <___svfprintf_internal_r+0x114>
    f0a8:	10c00326 	beq	r2,r3,f0b8 <___svfprintf_internal_r+0xd4>
    f0ac:	8c400044 	addi	r17,r17,1
    f0b0:	88800007 	ldb	r2,0(r17)
    f0b4:	103ffc1e 	bne	r2,zero,f0a8 <__alt_data_end+0xfc00f0a8>
    f0b8:	8de1c83a 	sub	r16,r17,r23
    f0bc:	80000e26 	beq	r16,zero,f0f8 <___svfprintf_internal_r+0x114>
    f0c0:	d8c02017 	ldw	r3,128(sp)
    f0c4:	d8801f17 	ldw	r2,124(sp)
    f0c8:	45c00015 	stw	r23,0(r8)
    f0cc:	1c07883a 	add	r3,r3,r16
    f0d0:	10800044 	addi	r2,r2,1
    f0d4:	d8c02015 	stw	r3,128(sp)
    f0d8:	44000115 	stw	r16,4(r8)
    f0dc:	d8801f15 	stw	r2,124(sp)
    f0e0:	00c001c4 	movi	r3,7
    f0e4:	18809916 	blt	r3,r2,f34c <___svfprintf_internal_r+0x368>
    f0e8:	42000204 	addi	r8,r8,8
    f0ec:	d9402f17 	ldw	r5,188(sp)
    f0f0:	2c0b883a 	add	r5,r5,r16
    f0f4:	d9402f15 	stw	r5,188(sp)
    f0f8:	88800007 	ldb	r2,0(r17)
    f0fc:	10009a26 	beq	r2,zero,f368 <___svfprintf_internal_r+0x384>
    f100:	8dc00044 	addi	r23,r17,1
    f104:	8c400047 	ldb	r17,1(r17)
    f108:	0021883a 	mov	r16,zero
    f10c:	00bfffc4 	movi	r2,-1
    f110:	0025883a 	mov	r18,zero
    f114:	dc002905 	stb	r16,164(sp)
    f118:	d8002785 	stb	zero,158(sp)
    f11c:	d8002b05 	stb	zero,172(sp)
    f120:	d8802a15 	stw	r2,168(sp)
    f124:	d8003115 	stw	zero,196(sp)
    f128:	05001604 	movi	r20,88
    f12c:	05800244 	movi	r22,9
    f130:	4039883a 	mov	fp,r8
    f134:	9021883a 	mov	r16,r18
    f138:	bdc00044 	addi	r23,r23,1
    f13c:	88bff804 	addi	r2,r17,-32
    f140:	a0831e36 	bltu	r20,r2,fdbc <___svfprintf_internal_r+0xdd8>
    f144:	100490ba 	slli	r2,r2,2
    f148:	00c00074 	movhi	r3,1
    f14c:	18fc5704 	addi	r3,r3,-3748
    f150:	10c5883a 	add	r2,r2,r3
    f154:	10800017 	ldw	r2,0(r2)
    f158:	1000683a 	jmp	r2
    f15c:	0000fd04 	movi	zero,1012
    f160:	0000fdbc 	xorhi	zero,zero,1014
    f164:	0000fdbc 	xorhi	zero,zero,1014
    f168:	0000fcf8 	rdprs	zero,zero,1011
    f16c:	0000fdbc 	xorhi	zero,zero,1014
    f170:	0000fdbc 	xorhi	zero,zero,1014
    f174:	0000fdbc 	xorhi	zero,zero,1014
    f178:	0000fdbc 	xorhi	zero,zero,1014
    f17c:	0000fdbc 	xorhi	zero,zero,1014
    f180:	0000fdbc 	xorhi	zero,zero,1014
    f184:	0000f3c4 	movi	zero,975
    f188:	0000fc08 	cmpgei	zero,zero,1008
    f18c:	0000fdbc 	xorhi	zero,zero,1014
    f190:	0000f2d0 	cmplti	zero,zero,971
    f194:	0000f3e8 	cmpgeui	zero,zero,975
    f198:	0000fdbc 	xorhi	zero,zero,1014
    f19c:	0000f474 	movhi	zero,977
    f1a0:	0000f438 	rdprs	zero,zero,976
    f1a4:	0000f438 	rdprs	zero,zero,976
    f1a8:	0000f438 	rdprs	zero,zero,976
    f1ac:	0000f438 	rdprs	zero,zero,976
    f1b0:	0000f438 	rdprs	zero,zero,976
    f1b4:	0000f438 	rdprs	zero,zero,976
    f1b8:	0000f438 	rdprs	zero,zero,976
    f1bc:	0000f438 	rdprs	zero,zero,976
    f1c0:	0000f438 	rdprs	zero,zero,976
    f1c4:	0000fdbc 	xorhi	zero,zero,1014
    f1c8:	0000fdbc 	xorhi	zero,zero,1014
    f1cc:	0000fdbc 	xorhi	zero,zero,1014
    f1d0:	0000fdbc 	xorhi	zero,zero,1014
    f1d4:	0000fdbc 	xorhi	zero,zero,1014
    f1d8:	0000fdbc 	xorhi	zero,zero,1014
    f1dc:	0000fdbc 	xorhi	zero,zero,1014
    f1e0:	0000fdbc 	xorhi	zero,zero,1014
    f1e4:	0000fdbc 	xorhi	zero,zero,1014
    f1e8:	0000fdbc 	xorhi	zero,zero,1014
    f1ec:	0000f538 	rdprs	zero,zero,980
    f1f0:	0000f480 	call	f48 <_ZN3USB10inTransferEhhPtPhh+0x9c>
    f1f4:	0000fdbc 	xorhi	zero,zero,1014
    f1f8:	0000f480 	call	f48 <_ZN3USB10inTransferEhhPtPhh+0x9c>
    f1fc:	0000fdbc 	xorhi	zero,zero,1014
    f200:	0000fdbc 	xorhi	zero,zero,1014
    f204:	0000fdbc 	xorhi	zero,zero,1014
    f208:	0000fdbc 	xorhi	zero,zero,1014
    f20c:	0000f52c 	andhi	zero,zero,980
    f210:	0000fdbc 	xorhi	zero,zero,1014
    f214:	0000fdbc 	xorhi	zero,zero,1014
    f218:	0000f600 	call	f60 <_ZN3USB10inTransferEhhPtPhh+0xb4>
    f21c:	0000fdbc 	xorhi	zero,zero,1014
    f220:	0000fdbc 	xorhi	zero,zero,1014
    f224:	0000fdbc 	xorhi	zero,zero,1014
    f228:	0000fdbc 	xorhi	zero,zero,1014
    f22c:	0000fdbc 	xorhi	zero,zero,1014
    f230:	0000fa7c 	xorhi	zero,zero,1001
    f234:	0000fdbc 	xorhi	zero,zero,1014
    f238:	0000fdbc 	xorhi	zero,zero,1014
    f23c:	0000fae8 	cmpgeui	zero,zero,1003
    f240:	0000fdbc 	xorhi	zero,zero,1014
    f244:	0000fdbc 	xorhi	zero,zero,1014
    f248:	0000fdbc 	xorhi	zero,zero,1014
    f24c:	0000fdbc 	xorhi	zero,zero,1014
    f250:	0000fdbc 	xorhi	zero,zero,1014
    f254:	0000fdbc 	xorhi	zero,zero,1014
    f258:	0000fdbc 	xorhi	zero,zero,1014
    f25c:	0000fdbc 	xorhi	zero,zero,1014
    f260:	0000fdbc 	xorhi	zero,zero,1014
    f264:	0000fdbc 	xorhi	zero,zero,1014
    f268:	0000fba4 	muli	zero,zero,1006
    f26c:	0000fd24 	muli	zero,zero,1012
    f270:	0000f480 	call	f48 <_ZN3USB10inTransferEhhPtPhh+0x9c>
    f274:	0000f480 	call	f48 <_ZN3USB10inTransferEhhPtPhh+0x9c>
    f278:	0000f480 	call	f48 <_ZN3USB10inTransferEhhPtPhh+0x9c>
    f27c:	0000fd98 	cmpnei	zero,zero,1014
    f280:	0000fd24 	muli	zero,zero,1012
    f284:	0000fdbc 	xorhi	zero,zero,1014
    f288:	0000fdbc 	xorhi	zero,zero,1014
    f28c:	0000fd44 	movi	zero,1013
    f290:	0000fdbc 	xorhi	zero,zero,1014
    f294:	0000fd58 	cmpnei	zero,zero,1013
    f298:	0000fbe8 	cmpgeui	zero,zero,1007
    f29c:	0000f2dc 	xori	zero,zero,971
    f2a0:	0000fc20 	cmpeqi	zero,zero,1008
    f2a4:	0000fdbc 	xorhi	zero,zero,1014
    f2a8:	0000fc2c 	andhi	zero,zero,1008
    f2ac:	0000fdbc 	xorhi	zero,zero,1014
    f2b0:	0000fc90 	cmplti	zero,zero,1010
    f2b4:	0000fdbc 	xorhi	zero,zero,1014
    f2b8:	0000fdbc 	xorhi	zero,zero,1014
    f2bc:	0000fcb0 	cmpltui	zero,zero,1010
    f2c0:	d8c03117 	ldw	r3,196(sp)
    f2c4:	d8802e15 	stw	r2,184(sp)
    f2c8:	00c7c83a 	sub	r3,zero,r3
    f2cc:	d8c03115 	stw	r3,196(sp)
    f2d0:	84000114 	ori	r16,r16,4
    f2d4:	bc400007 	ldb	r17,0(r23)
    f2d8:	003f9706 	br	f138 <__alt_data_end+0xfc00f138>
    f2dc:	00800c04 	movi	r2,48
    f2e0:	d8802705 	stb	r2,156(sp)
    f2e4:	00801e04 	movi	r2,120
    f2e8:	d8802745 	stb	r2,157(sp)
    f2ec:	d9002a17 	ldw	r4,168(sp)
    f2f0:	d8802e17 	ldw	r2,184(sp)
    f2f4:	d8002785 	stb	zero,158(sp)
    f2f8:	e011883a 	mov	r8,fp
    f2fc:	10c00104 	addi	r3,r2,4
    f300:	15000017 	ldw	r20,0(r2)
    f304:	002d883a 	mov	r22,zero
    f308:	80800094 	ori	r2,r16,2
    f30c:	2002b616 	blt	r4,zero,fde8 <___svfprintf_internal_r+0xe04>
    f310:	00bfdfc4 	movi	r2,-129
    f314:	80a4703a 	and	r18,r16,r2
    f318:	d8c02e15 	stw	r3,184(sp)
    f31c:	94800094 	ori	r18,r18,2
    f320:	a002a01e 	bne	r20,zero,fda4 <___svfprintf_internal_r+0xdc0>
    f324:	014000f4 	movhi	r5,3
    f328:	29691204 	addi	r5,r5,-23480
    f32c:	d9403a15 	stw	r5,232(sp)
    f330:	04401e04 	movi	r17,120
    f334:	d8c02a17 	ldw	r3,168(sp)
    f338:	0039883a 	mov	fp,zero
    f33c:	1801e626 	beq	r3,zero,fad8 <___svfprintf_internal_r+0xaf4>
    f340:	0029883a 	mov	r20,zero
    f344:	002d883a 	mov	r22,zero
    f348:	00020506 	br	fb60 <___svfprintf_internal_r+0xb7c>
    f34c:	d9402d17 	ldw	r5,180(sp)
    f350:	d9801e04 	addi	r6,sp,120
    f354:	9809883a 	mov	r4,r19
    f358:	0017f480 	call	17f48 <__ssprint_r>
    f35c:	1000081e 	bne	r2,zero,f380 <___svfprintf_internal_r+0x39c>
    f360:	da000404 	addi	r8,sp,16
    f364:	003f6106 	br	f0ec <__alt_data_end+0xfc00f0ec>
    f368:	d8802017 	ldw	r2,128(sp)
    f36c:	10000426 	beq	r2,zero,f380 <___svfprintf_internal_r+0x39c>
    f370:	d9402d17 	ldw	r5,180(sp)
    f374:	d9003917 	ldw	r4,228(sp)
    f378:	d9801e04 	addi	r6,sp,120
    f37c:	0017f480 	call	17f48 <__ssprint_r>
    f380:	d8802d17 	ldw	r2,180(sp)
    f384:	10c0030b 	ldhu	r3,12(r2)
    f388:	d8802f17 	ldw	r2,188(sp)
    f38c:	18c0100c 	andi	r3,r3,64
    f390:	1806251e 	bne	r3,zero,10c28 <___svfprintf_internal_r+0x1c44>
    f394:	dfc04817 	ldw	ra,288(sp)
    f398:	df004717 	ldw	fp,284(sp)
    f39c:	ddc04617 	ldw	r23,280(sp)
    f3a0:	dd804517 	ldw	r22,276(sp)
    f3a4:	dd404417 	ldw	r21,272(sp)
    f3a8:	dd004317 	ldw	r20,268(sp)
    f3ac:	dcc04217 	ldw	r19,264(sp)
    f3b0:	dc804117 	ldw	r18,260(sp)
    f3b4:	dc404017 	ldw	r17,256(sp)
    f3b8:	dc003f17 	ldw	r16,252(sp)
    f3bc:	dec04904 	addi	sp,sp,292
    f3c0:	f800283a 	ret
    f3c4:	d9002e17 	ldw	r4,184(sp)
    f3c8:	d9402e17 	ldw	r5,184(sp)
    f3cc:	21000017 	ldw	r4,0(r4)
    f3d0:	28800104 	addi	r2,r5,4
    f3d4:	d9003115 	stw	r4,196(sp)
    f3d8:	203fb916 	blt	r4,zero,f2c0 <__alt_data_end+0xfc00f2c0>
    f3dc:	d8802e15 	stw	r2,184(sp)
    f3e0:	bc400007 	ldb	r17,0(r23)
    f3e4:	003f5406 	br	f138 <__alt_data_end+0xfc00f138>
    f3e8:	bc400007 	ldb	r17,0(r23)
    f3ec:	01000a84 	movi	r4,42
    f3f0:	b8c00044 	addi	r3,r23,1
    f3f4:	89076926 	beq	r17,r4,1119c <___svfprintf_internal_r+0x21b8>
    f3f8:	8cbff404 	addi	r18,r17,-48
    f3fc:	b486b936 	bltu	r22,r18,10ee4 <___svfprintf_internal_r+0x1f00>
    f400:	0009883a 	mov	r4,zero
    f404:	1823883a 	mov	r17,r3
    f408:	01400284 	movi	r5,10
    f40c:	000ce000 	call	ce00 <__mulsi3>
    f410:	88c00007 	ldb	r3,0(r17)
    f414:	1489883a 	add	r4,r2,r18
    f418:	8dc00044 	addi	r23,r17,1
    f41c:	1cbff404 	addi	r18,r3,-48
    f420:	b823883a 	mov	r17,r23
    f424:	b4bff82e 	bgeu	r22,r18,f408 <__alt_data_end+0xfc00f408>
    f428:	1823883a 	mov	r17,r3
    f42c:	20060416 	blt	r4,zero,10c40 <___svfprintf_internal_r+0x1c5c>
    f430:	d9002a15 	stw	r4,168(sp)
    f434:	003f4106 	br	f13c <__alt_data_end+0xfc00f13c>
    f438:	8cbff404 	addi	r18,r17,-48
    f43c:	d8003115 	stw	zero,196(sp)
    f440:	0009883a 	mov	r4,zero
    f444:	b823883a 	mov	r17,r23
    f448:	01400284 	movi	r5,10
    f44c:	000ce000 	call	ce00 <__mulsi3>
    f450:	88c00007 	ldb	r3,0(r17)
    f454:	9089883a 	add	r4,r18,r2
    f458:	bdc00044 	addi	r23,r23,1
    f45c:	1cbff404 	addi	r18,r3,-48
    f460:	b823883a 	mov	r17,r23
    f464:	b4bff82e 	bgeu	r22,r18,f448 <__alt_data_end+0xfc00f448>
    f468:	1823883a 	mov	r17,r3
    f46c:	d9003115 	stw	r4,196(sp)
    f470:	003f3206 	br	f13c <__alt_data_end+0xfc00f13c>
    f474:	84002014 	ori	r16,r16,128
    f478:	bc400007 	ldb	r17,0(r23)
    f47c:	003f2e06 	br	f138 <__alt_data_end+0xfc00f138>
    f480:	8025883a 	mov	r18,r16
    f484:	dc002903 	ldbu	r16,164(sp)
    f488:	e011883a 	mov	r8,fp
    f48c:	84003fcc 	andi	r16,r16,255
    f490:	8007721e 	bne	r16,zero,1125c <___svfprintf_internal_r+0x2278>
    f494:	9080020c 	andi	r2,r18,8
    f498:	1004a526 	beq	r2,zero,10730 <___svfprintf_internal_r+0x174c>
    f49c:	d9002e17 	ldw	r4,184(sp)
    f4a0:	d9402e17 	ldw	r5,184(sp)
    f4a4:	d8802e17 	ldw	r2,184(sp)
    f4a8:	21000017 	ldw	r4,0(r4)
    f4ac:	29400117 	ldw	r5,4(r5)
    f4b0:	10800204 	addi	r2,r2,8
    f4b4:	d9003615 	stw	r4,216(sp)
    f4b8:	d9403715 	stw	r5,220(sp)
    f4bc:	d8802e15 	stw	r2,184(sp)
    f4c0:	d9003617 	ldw	r4,216(sp)
    f4c4:	d9403717 	ldw	r5,220(sp)
    f4c8:	da003e15 	stw	r8,248(sp)
    f4cc:	04000044 	movi	r16,1
    f4d0:	0017d980 	call	17d98 <__fpclassifyd>
    f4d4:	da003e17 	ldw	r8,248(sp)
    f4d8:	1404731e 	bne	r2,r16,106a8 <___svfprintf_internal_r+0x16c4>
    f4dc:	d9003617 	ldw	r4,216(sp)
    f4e0:	d9403717 	ldw	r5,220(sp)
    f4e4:	000d883a 	mov	r6,zero
    f4e8:	000f883a 	mov	r7,zero
    f4ec:	001d49c0 	call	1d49c <__ledf2>
    f4f0:	da003e17 	ldw	r8,248(sp)
    f4f4:	10061b16 	blt	r2,zero,10d64 <___svfprintf_internal_r+0x1d80>
    f4f8:	df002783 	ldbu	fp,158(sp)
    f4fc:	008011c4 	movi	r2,71
    f500:	1445810e 	bge	r2,r17,10b08 <___svfprintf_internal_r+0x1b24>
    f504:	040000f4 	movhi	r16,3
    f508:	84290a04 	addi	r16,r16,-23512
    f50c:	00c000c4 	movi	r3,3
    f510:	00bfdfc4 	movi	r2,-129
    f514:	d8c02915 	stw	r3,164(sp)
    f518:	90a4703a 	and	r18,r18,r2
    f51c:	d8c02b15 	stw	r3,172(sp)
    f520:	d8002a15 	stw	zero,168(sp)
    f524:	d8003215 	stw	zero,200(sp)
    f528:	00006c06 	br	f6dc <___svfprintf_internal_r+0x6f8>
    f52c:	84000214 	ori	r16,r16,8
    f530:	bc400007 	ldb	r17,0(r23)
    f534:	003f0006 	br	f138 <__alt_data_end+0xfc00f138>
    f538:	8025883a 	mov	r18,r16
    f53c:	dc002903 	ldbu	r16,164(sp)
    f540:	e011883a 	mov	r8,fp
    f544:	84003fcc 	andi	r16,r16,255
    f548:	80073f1e 	bne	r16,zero,11248 <___svfprintf_internal_r+0x2264>
    f54c:	94800414 	ori	r18,r18,16
    f550:	9080080c 	andi	r2,r18,32
    f554:	1003bb26 	beq	r2,zero,10444 <___svfprintf_internal_r+0x1460>
    f558:	d9002e17 	ldw	r4,184(sp)
    f55c:	20800117 	ldw	r2,4(r4)
    f560:	25000017 	ldw	r20,0(r4)
    f564:	21000204 	addi	r4,r4,8
    f568:	d9002e15 	stw	r4,184(sp)
    f56c:	102d883a 	mov	r22,r2
    f570:	1003bd16 	blt	r2,zero,10468 <___svfprintf_internal_r+0x1484>
    f574:	d9002a17 	ldw	r4,168(sp)
    f578:	df002783 	ldbu	fp,158(sp)
    f57c:	2003d016 	blt	r4,zero,104c0 <___svfprintf_internal_r+0x14dc>
    f580:	00ffdfc4 	movi	r3,-129
    f584:	a584b03a 	or	r2,r20,r22
    f588:	90e4703a 	and	r18,r18,r3
    f58c:	10015026 	beq	r2,zero,fad0 <___svfprintf_internal_r+0xaec>
    f590:	b0037026 	beq	r22,zero,10354 <___svfprintf_internal_r+0x1370>
    f594:	dc402915 	stw	r17,164(sp)
    f598:	dc001e04 	addi	r16,sp,120
    f59c:	b023883a 	mov	r17,r22
    f5a0:	402d883a 	mov	r22,r8
    f5a4:	a009883a 	mov	r4,r20
    f5a8:	880b883a 	mov	r5,r17
    f5ac:	01800284 	movi	r6,10
    f5b0:	000f883a 	mov	r7,zero
    f5b4:	001baf80 	call	1baf8 <__umoddi3>
    f5b8:	10800c04 	addi	r2,r2,48
    f5bc:	843fffc4 	addi	r16,r16,-1
    f5c0:	a009883a 	mov	r4,r20
    f5c4:	880b883a 	mov	r5,r17
    f5c8:	80800005 	stb	r2,0(r16)
    f5cc:	01800284 	movi	r6,10
    f5d0:	000f883a 	mov	r7,zero
    f5d4:	001b4fc0 	call	1b4fc <__udivdi3>
    f5d8:	1029883a 	mov	r20,r2
    f5dc:	10c4b03a 	or	r2,r2,r3
    f5e0:	1823883a 	mov	r17,r3
    f5e4:	103fef1e 	bne	r2,zero,f5a4 <__alt_data_end+0xfc00f5a4>
    f5e8:	d8c02817 	ldw	r3,160(sp)
    f5ec:	dc402917 	ldw	r17,164(sp)
    f5f0:	b011883a 	mov	r8,r22
    f5f4:	1c07c83a 	sub	r3,r3,r16
    f5f8:	d8c02b15 	stw	r3,172(sp)
    f5fc:	00003106 	br	f6c4 <___svfprintf_internal_r+0x6e0>
    f600:	8025883a 	mov	r18,r16
    f604:	dc002903 	ldbu	r16,164(sp)
    f608:	e011883a 	mov	r8,fp
    f60c:	84003fcc 	andi	r16,r16,255
    f610:	80070a1e 	bne	r16,zero,1123c <___svfprintf_internal_r+0x2258>
    f614:	94800414 	ori	r18,r18,16
    f618:	9080080c 	andi	r2,r18,32
    f61c:	1002f626 	beq	r2,zero,101f8 <___svfprintf_internal_r+0x1214>
    f620:	d9002e17 	ldw	r4,184(sp)
    f624:	d9402a17 	ldw	r5,168(sp)
    f628:	d8002785 	stb	zero,158(sp)
    f62c:	20800204 	addi	r2,r4,8
    f630:	25000017 	ldw	r20,0(r4)
    f634:	25800117 	ldw	r22,4(r4)
    f638:	28043716 	blt	r5,zero,10718 <___svfprintf_internal_r+0x1734>
    f63c:	013fdfc4 	movi	r4,-129
    f640:	a586b03a 	or	r3,r20,r22
    f644:	d8802e15 	stw	r2,184(sp)
    f648:	9124703a 	and	r18,r18,r4
    f64c:	1802f71e 	bne	r3,zero,1022c <___svfprintf_internal_r+0x1248>
    f650:	d9402a17 	ldw	r5,168(sp)
    f654:	0039883a 	mov	fp,zero
    f658:	2806df26 	beq	r5,zero,111d8 <___svfprintf_internal_r+0x21f4>
    f65c:	0029883a 	mov	r20,zero
    f660:	002d883a 	mov	r22,zero
    f664:	dc001e04 	addi	r16,sp,120
    f668:	a006d0fa 	srli	r3,r20,3
    f66c:	b008977a 	slli	r4,r22,29
    f670:	b02cd0fa 	srli	r22,r22,3
    f674:	a50001cc 	andi	r20,r20,7
    f678:	a0800c04 	addi	r2,r20,48
    f67c:	843fffc4 	addi	r16,r16,-1
    f680:	20e8b03a 	or	r20,r4,r3
    f684:	80800005 	stb	r2,0(r16)
    f688:	a586b03a 	or	r3,r20,r22
    f68c:	183ff61e 	bne	r3,zero,f668 <__alt_data_end+0xfc00f668>
    f690:	90c0004c 	andi	r3,r18,1
    f694:	18013f26 	beq	r3,zero,fb94 <___svfprintf_internal_r+0xbb0>
    f698:	10803fcc 	andi	r2,r2,255
    f69c:	1080201c 	xori	r2,r2,128
    f6a0:	10bfe004 	addi	r2,r2,-128
    f6a4:	00c00c04 	movi	r3,48
    f6a8:	10c13a26 	beq	r2,r3,fb94 <___svfprintf_internal_r+0xbb0>
    f6ac:	80ffffc5 	stb	r3,-1(r16)
    f6b0:	d8c02817 	ldw	r3,160(sp)
    f6b4:	80bfffc4 	addi	r2,r16,-1
    f6b8:	1021883a 	mov	r16,r2
    f6bc:	1887c83a 	sub	r3,r3,r2
    f6c0:	d8c02b15 	stw	r3,172(sp)
    f6c4:	d8802b17 	ldw	r2,172(sp)
    f6c8:	d9002a17 	ldw	r4,168(sp)
    f6cc:	1100010e 	bge	r2,r4,f6d4 <___svfprintf_internal_r+0x6f0>
    f6d0:	2005883a 	mov	r2,r4
    f6d4:	d8802915 	stw	r2,164(sp)
    f6d8:	d8003215 	stw	zero,200(sp)
    f6dc:	e7003fcc 	andi	fp,fp,255
    f6e0:	e700201c 	xori	fp,fp,128
    f6e4:	e73fe004 	addi	fp,fp,-128
    f6e8:	e0000326 	beq	fp,zero,f6f8 <___svfprintf_internal_r+0x714>
    f6ec:	d8c02917 	ldw	r3,164(sp)
    f6f0:	18c00044 	addi	r3,r3,1
    f6f4:	d8c02915 	stw	r3,164(sp)
    f6f8:	90c0008c 	andi	r3,r18,2
    f6fc:	d8c02c15 	stw	r3,176(sp)
    f700:	18000326 	beq	r3,zero,f710 <___svfprintf_internal_r+0x72c>
    f704:	d8c02917 	ldw	r3,164(sp)
    f708:	18c00084 	addi	r3,r3,2
    f70c:	d8c02915 	stw	r3,164(sp)
    f710:	90c0210c 	andi	r3,r18,132
    f714:	d8c03015 	stw	r3,192(sp)
    f718:	1801c31e 	bne	r3,zero,fe28 <___svfprintf_internal_r+0xe44>
    f71c:	d9003117 	ldw	r4,196(sp)
    f720:	d8c02917 	ldw	r3,164(sp)
    f724:	20e9c83a 	sub	r20,r4,r3
    f728:	0501bf0e 	bge	zero,r20,fe28 <___svfprintf_internal_r+0xe44>
    f72c:	02400404 	movi	r9,16
    f730:	d8c02017 	ldw	r3,128(sp)
    f734:	d8801f17 	ldw	r2,124(sp)
    f738:	4d053d0e 	bge	r9,r20,10c30 <___svfprintf_internal_r+0x1c4c>
    f73c:	014000f4 	movhi	r5,3
    f740:	29691d84 	addi	r5,r5,-23434
    f744:	dc403c15 	stw	r17,240(sp)
    f748:	d9403515 	stw	r5,212(sp)
    f74c:	a023883a 	mov	r17,r20
    f750:	482d883a 	mov	r22,r9
    f754:	9029883a 	mov	r20,r18
    f758:	070001c4 	movi	fp,7
    f75c:	8025883a 	mov	r18,r16
    f760:	dc002d17 	ldw	r16,180(sp)
    f764:	00000306 	br	f774 <___svfprintf_internal_r+0x790>
    f768:	8c7ffc04 	addi	r17,r17,-16
    f76c:	42000204 	addi	r8,r8,8
    f770:	b440130e 	bge	r22,r17,f7c0 <___svfprintf_internal_r+0x7dc>
    f774:	010000f4 	movhi	r4,3
    f778:	18c00404 	addi	r3,r3,16
    f77c:	10800044 	addi	r2,r2,1
    f780:	21291d84 	addi	r4,r4,-23434
    f784:	41000015 	stw	r4,0(r8)
    f788:	45800115 	stw	r22,4(r8)
    f78c:	d8c02015 	stw	r3,128(sp)
    f790:	d8801f15 	stw	r2,124(sp)
    f794:	e0bff40e 	bge	fp,r2,f768 <__alt_data_end+0xfc00f768>
    f798:	d9801e04 	addi	r6,sp,120
    f79c:	800b883a 	mov	r5,r16
    f7a0:	9809883a 	mov	r4,r19
    f7a4:	0017f480 	call	17f48 <__ssprint_r>
    f7a8:	103ef51e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
    f7ac:	8c7ffc04 	addi	r17,r17,-16
    f7b0:	d8c02017 	ldw	r3,128(sp)
    f7b4:	d8801f17 	ldw	r2,124(sp)
    f7b8:	da000404 	addi	r8,sp,16
    f7bc:	b47fed16 	blt	r22,r17,f774 <__alt_data_end+0xfc00f774>
    f7c0:	9021883a 	mov	r16,r18
    f7c4:	a025883a 	mov	r18,r20
    f7c8:	8829883a 	mov	r20,r17
    f7cc:	dc403c17 	ldw	r17,240(sp)
    f7d0:	d9403517 	ldw	r5,212(sp)
    f7d4:	a0c7883a 	add	r3,r20,r3
    f7d8:	10800044 	addi	r2,r2,1
    f7dc:	41400015 	stw	r5,0(r8)
    f7e0:	45000115 	stw	r20,4(r8)
    f7e4:	d8c02015 	stw	r3,128(sp)
    f7e8:	d8801f15 	stw	r2,124(sp)
    f7ec:	010001c4 	movi	r4,7
    f7f0:	2082c116 	blt	r4,r2,102f8 <___svfprintf_internal_r+0x1314>
    f7f4:	df002787 	ldb	fp,158(sp)
    f7f8:	42000204 	addi	r8,r8,8
    f7fc:	e0000c26 	beq	fp,zero,f830 <___svfprintf_internal_r+0x84c>
    f800:	d8801f17 	ldw	r2,124(sp)
    f804:	d9002784 	addi	r4,sp,158
    f808:	18c00044 	addi	r3,r3,1
    f80c:	10800044 	addi	r2,r2,1
    f810:	41000015 	stw	r4,0(r8)
    f814:	01000044 	movi	r4,1
    f818:	41000115 	stw	r4,4(r8)
    f81c:	d8c02015 	stw	r3,128(sp)
    f820:	d8801f15 	stw	r2,124(sp)
    f824:	010001c4 	movi	r4,7
    f828:	20825a16 	blt	r4,r2,10194 <___svfprintf_internal_r+0x11b0>
    f82c:	42000204 	addi	r8,r8,8
    f830:	d8802c17 	ldw	r2,176(sp)
    f834:	10000c26 	beq	r2,zero,f868 <___svfprintf_internal_r+0x884>
    f838:	d8801f17 	ldw	r2,124(sp)
    f83c:	d9002704 	addi	r4,sp,156
    f840:	18c00084 	addi	r3,r3,2
    f844:	10800044 	addi	r2,r2,1
    f848:	41000015 	stw	r4,0(r8)
    f84c:	01000084 	movi	r4,2
    f850:	41000115 	stw	r4,4(r8)
    f854:	d8c02015 	stw	r3,128(sp)
    f858:	d8801f15 	stw	r2,124(sp)
    f85c:	010001c4 	movi	r4,7
    f860:	20825416 	blt	r4,r2,101b4 <___svfprintf_internal_r+0x11d0>
    f864:	42000204 	addi	r8,r8,8
    f868:	d9003017 	ldw	r4,192(sp)
    f86c:	00802004 	movi	r2,128
    f870:	2081b926 	beq	r4,r2,ff58 <___svfprintf_internal_r+0xf74>
    f874:	d9402a17 	ldw	r5,168(sp)
    f878:	d8802b17 	ldw	r2,172(sp)
    f87c:	28adc83a 	sub	r22,r5,r2
    f880:	05802f0e 	bge	zero,r22,f940 <___svfprintf_internal_r+0x95c>
    f884:	07000404 	movi	fp,16
    f888:	d8801f17 	ldw	r2,124(sp)
    f88c:	e583e20e 	bge	fp,r22,10818 <___svfprintf_internal_r+0x1834>
    f890:	014000f4 	movhi	r5,3
    f894:	29691984 	addi	r5,r5,-23450
    f898:	dc402a15 	stw	r17,168(sp)
    f89c:	d9402c15 	stw	r5,176(sp)
    f8a0:	b023883a 	mov	r17,r22
    f8a4:	050001c4 	movi	r20,7
    f8a8:	902d883a 	mov	r22,r18
    f8ac:	8025883a 	mov	r18,r16
    f8b0:	dc002d17 	ldw	r16,180(sp)
    f8b4:	00000306 	br	f8c4 <___svfprintf_internal_r+0x8e0>
    f8b8:	8c7ffc04 	addi	r17,r17,-16
    f8bc:	42000204 	addi	r8,r8,8
    f8c0:	e440110e 	bge	fp,r17,f908 <___svfprintf_internal_r+0x924>
    f8c4:	18c00404 	addi	r3,r3,16
    f8c8:	10800044 	addi	r2,r2,1
    f8cc:	45400015 	stw	r21,0(r8)
    f8d0:	47000115 	stw	fp,4(r8)
    f8d4:	d8c02015 	stw	r3,128(sp)
    f8d8:	d8801f15 	stw	r2,124(sp)
    f8dc:	a0bff60e 	bge	r20,r2,f8b8 <__alt_data_end+0xfc00f8b8>
    f8e0:	d9801e04 	addi	r6,sp,120
    f8e4:	800b883a 	mov	r5,r16
    f8e8:	9809883a 	mov	r4,r19
    f8ec:	0017f480 	call	17f48 <__ssprint_r>
    f8f0:	103ea31e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
    f8f4:	8c7ffc04 	addi	r17,r17,-16
    f8f8:	d8c02017 	ldw	r3,128(sp)
    f8fc:	d8801f17 	ldw	r2,124(sp)
    f900:	da000404 	addi	r8,sp,16
    f904:	e47fef16 	blt	fp,r17,f8c4 <__alt_data_end+0xfc00f8c4>
    f908:	9021883a 	mov	r16,r18
    f90c:	b025883a 	mov	r18,r22
    f910:	882d883a 	mov	r22,r17
    f914:	dc402a17 	ldw	r17,168(sp)
    f918:	d9002c17 	ldw	r4,176(sp)
    f91c:	1d87883a 	add	r3,r3,r22
    f920:	10800044 	addi	r2,r2,1
    f924:	41000015 	stw	r4,0(r8)
    f928:	45800115 	stw	r22,4(r8)
    f92c:	d8c02015 	stw	r3,128(sp)
    f930:	d8801f15 	stw	r2,124(sp)
    f934:	010001c4 	movi	r4,7
    f938:	20820e16 	blt	r4,r2,10174 <___svfprintf_internal_r+0x1190>
    f93c:	42000204 	addi	r8,r8,8
    f940:	9080400c 	andi	r2,r18,256
    f944:	10013a1e 	bne	r2,zero,fe30 <___svfprintf_internal_r+0xe4c>
    f948:	d9402b17 	ldw	r5,172(sp)
    f94c:	d8801f17 	ldw	r2,124(sp)
    f950:	44000015 	stw	r16,0(r8)
    f954:	1947883a 	add	r3,r3,r5
    f958:	10800044 	addi	r2,r2,1
    f95c:	41400115 	stw	r5,4(r8)
    f960:	d8c02015 	stw	r3,128(sp)
    f964:	d8801f15 	stw	r2,124(sp)
    f968:	010001c4 	movi	r4,7
    f96c:	2081f316 	blt	r4,r2,1013c <___svfprintf_internal_r+0x1158>
    f970:	42000204 	addi	r8,r8,8
    f974:	9480010c 	andi	r18,r18,4
    f978:	90003226 	beq	r18,zero,fa44 <___svfprintf_internal_r+0xa60>
    f97c:	d9403117 	ldw	r5,196(sp)
    f980:	d8802917 	ldw	r2,164(sp)
    f984:	28a1c83a 	sub	r16,r5,r2
    f988:	04002e0e 	bge	zero,r16,fa44 <___svfprintf_internal_r+0xa60>
    f98c:	04400404 	movi	r17,16
    f990:	d8801f17 	ldw	r2,124(sp)
    f994:	8c04db0e 	bge	r17,r16,10d04 <___svfprintf_internal_r+0x1d20>
    f998:	014000f4 	movhi	r5,3
    f99c:	29691d84 	addi	r5,r5,-23434
    f9a0:	d9403515 	stw	r5,212(sp)
    f9a4:	048001c4 	movi	r18,7
    f9a8:	dd002d17 	ldw	r20,180(sp)
    f9ac:	00000306 	br	f9bc <___svfprintf_internal_r+0x9d8>
    f9b0:	843ffc04 	addi	r16,r16,-16
    f9b4:	42000204 	addi	r8,r8,8
    f9b8:	8c00130e 	bge	r17,r16,fa08 <___svfprintf_internal_r+0xa24>
    f9bc:	010000f4 	movhi	r4,3
    f9c0:	18c00404 	addi	r3,r3,16
    f9c4:	10800044 	addi	r2,r2,1
    f9c8:	21291d84 	addi	r4,r4,-23434
    f9cc:	41000015 	stw	r4,0(r8)
    f9d0:	44400115 	stw	r17,4(r8)
    f9d4:	d8c02015 	stw	r3,128(sp)
    f9d8:	d8801f15 	stw	r2,124(sp)
    f9dc:	90bff40e 	bge	r18,r2,f9b0 <__alt_data_end+0xfc00f9b0>
    f9e0:	d9801e04 	addi	r6,sp,120
    f9e4:	a00b883a 	mov	r5,r20
    f9e8:	9809883a 	mov	r4,r19
    f9ec:	0017f480 	call	17f48 <__ssprint_r>
    f9f0:	103e631e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
    f9f4:	843ffc04 	addi	r16,r16,-16
    f9f8:	d8c02017 	ldw	r3,128(sp)
    f9fc:	d8801f17 	ldw	r2,124(sp)
    fa00:	da000404 	addi	r8,sp,16
    fa04:	8c3fed16 	blt	r17,r16,f9bc <__alt_data_end+0xfc00f9bc>
    fa08:	d9403517 	ldw	r5,212(sp)
    fa0c:	1c07883a 	add	r3,r3,r16
    fa10:	10800044 	addi	r2,r2,1
    fa14:	41400015 	stw	r5,0(r8)
    fa18:	44000115 	stw	r16,4(r8)
    fa1c:	d8c02015 	stw	r3,128(sp)
    fa20:	d8801f15 	stw	r2,124(sp)
    fa24:	010001c4 	movi	r4,7
    fa28:	2080060e 	bge	r4,r2,fa44 <___svfprintf_internal_r+0xa60>
    fa2c:	d9402d17 	ldw	r5,180(sp)
    fa30:	d9801e04 	addi	r6,sp,120
    fa34:	9809883a 	mov	r4,r19
    fa38:	0017f480 	call	17f48 <__ssprint_r>
    fa3c:	103e501e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
    fa40:	d8c02017 	ldw	r3,128(sp)
    fa44:	d8803117 	ldw	r2,196(sp)
    fa48:	d9002917 	ldw	r4,164(sp)
    fa4c:	1100010e 	bge	r2,r4,fa54 <___svfprintf_internal_r+0xa70>
    fa50:	2005883a 	mov	r2,r4
    fa54:	d9402f17 	ldw	r5,188(sp)
    fa58:	288b883a 	add	r5,r5,r2
    fa5c:	d9402f15 	stw	r5,188(sp)
    fa60:	1801be1e 	bne	r3,zero,1015c <___svfprintf_internal_r+0x1178>
    fa64:	b8800007 	ldb	r2,0(r23)
    fa68:	d8001f15 	stw	zero,124(sp)
    fa6c:	da000404 	addi	r8,sp,16
    fa70:	103d891e 	bne	r2,zero,f098 <__alt_data_end+0xfc00f098>
    fa74:	b823883a 	mov	r17,r23
    fa78:	003d9f06 	br	f0f8 <__alt_data_end+0xfc00f0f8>
    fa7c:	8025883a 	mov	r18,r16
    fa80:	dc002903 	ldbu	r16,164(sp)
    fa84:	e011883a 	mov	r8,fp
    fa88:	84003fcc 	andi	r16,r16,255
    fa8c:	8005e61e 	bne	r16,zero,11228 <___svfprintf_internal_r+0x2244>
    fa90:	94800414 	ori	r18,r18,16
    fa94:	9080080c 	andi	r2,r18,32
    fa98:	10022026 	beq	r2,zero,1031c <___svfprintf_internal_r+0x1338>
    fa9c:	d9002e17 	ldw	r4,184(sp)
    faa0:	d9402a17 	ldw	r5,168(sp)
    faa4:	d8002785 	stb	zero,158(sp)
    faa8:	20c00204 	addi	r3,r4,8
    faac:	25000017 	ldw	r20,0(r4)
    fab0:	25800117 	ldw	r22,4(r4)
    fab4:	2803ad16 	blt	r5,zero,1096c <___svfprintf_internal_r+0x1988>
    fab8:	013fdfc4 	movi	r4,-129
    fabc:	a584b03a 	or	r2,r20,r22
    fac0:	d8c02e15 	stw	r3,184(sp)
    fac4:	9124703a 	and	r18,r18,r4
    fac8:	0039883a 	mov	fp,zero
    facc:	103eb01e 	bne	r2,zero,f590 <__alt_data_end+0xfc00f590>
    fad0:	d8802a17 	ldw	r2,168(sp)
    fad4:	1002e71e 	bne	r2,zero,10674 <___svfprintf_internal_r+0x1690>
    fad8:	d8002a15 	stw	zero,168(sp)
    fadc:	d8002b15 	stw	zero,172(sp)
    fae0:	dc001e04 	addi	r16,sp,120
    fae4:	003ef706 	br	f6c4 <__alt_data_end+0xfc00f6c4>
    fae8:	8025883a 	mov	r18,r16
    faec:	dc002903 	ldbu	r16,164(sp)
    faf0:	e011883a 	mov	r8,fp
    faf4:	84003fcc 	andi	r16,r16,255
    faf8:	8005c81e 	bne	r16,zero,1121c <___svfprintf_internal_r+0x2238>
    fafc:	010000f4 	movhi	r4,3
    fb00:	21290d04 	addi	r4,r4,-23500
    fb04:	d9003a15 	stw	r4,232(sp)
    fb08:	9080080c 	andi	r2,r18,32
    fb0c:	10007226 	beq	r2,zero,fcd8 <___svfprintf_internal_r+0xcf4>
    fb10:	d9402e17 	ldw	r5,184(sp)
    fb14:	2d000017 	ldw	r20,0(r5)
    fb18:	2d800117 	ldw	r22,4(r5)
    fb1c:	29400204 	addi	r5,r5,8
    fb20:	d9402e15 	stw	r5,184(sp)
    fb24:	9080004c 	andi	r2,r18,1
    fb28:	1001aa26 	beq	r2,zero,101d4 <___svfprintf_internal_r+0x11f0>
    fb2c:	a584b03a 	or	r2,r20,r22
    fb30:	10032526 	beq	r2,zero,107c8 <___svfprintf_internal_r+0x17e4>
    fb34:	d8c02a17 	ldw	r3,168(sp)
    fb38:	00800c04 	movi	r2,48
    fb3c:	d8802705 	stb	r2,156(sp)
    fb40:	dc402745 	stb	r17,157(sp)
    fb44:	d8002785 	stb	zero,158(sp)
    fb48:	90800094 	ori	r2,r18,2
    fb4c:	1804a316 	blt	r3,zero,10ddc <___svfprintf_internal_r+0x1df8>
    fb50:	00bfdfc4 	movi	r2,-129
    fb54:	90a4703a 	and	r18,r18,r2
    fb58:	94800094 	ori	r18,r18,2
    fb5c:	0039883a 	mov	fp,zero
    fb60:	d9003a17 	ldw	r4,232(sp)
    fb64:	dc001e04 	addi	r16,sp,120
    fb68:	a08003cc 	andi	r2,r20,15
    fb6c:	b006973a 	slli	r3,r22,28
    fb70:	2085883a 	add	r2,r4,r2
    fb74:	a028d13a 	srli	r20,r20,4
    fb78:	10800003 	ldbu	r2,0(r2)
    fb7c:	b02cd13a 	srli	r22,r22,4
    fb80:	843fffc4 	addi	r16,r16,-1
    fb84:	1d28b03a 	or	r20,r3,r20
    fb88:	80800005 	stb	r2,0(r16)
    fb8c:	a584b03a 	or	r2,r20,r22
    fb90:	103ff51e 	bne	r2,zero,fb68 <__alt_data_end+0xfc00fb68>
    fb94:	d8c02817 	ldw	r3,160(sp)
    fb98:	1c07c83a 	sub	r3,r3,r16
    fb9c:	d8c02b15 	stw	r3,172(sp)
    fba0:	003ec806 	br	f6c4 <__alt_data_end+0xfc00f6c4>
    fba4:	d8c02e17 	ldw	r3,184(sp)
    fba8:	d9002e17 	ldw	r4,184(sp)
    fbac:	8025883a 	mov	r18,r16
    fbb0:	18800017 	ldw	r2,0(r3)
    fbb4:	21000104 	addi	r4,r4,4
    fbb8:	00c00044 	movi	r3,1
    fbbc:	e011883a 	mov	r8,fp
    fbc0:	d8c02915 	stw	r3,164(sp)
    fbc4:	d8002785 	stb	zero,158(sp)
    fbc8:	d8801405 	stb	r2,80(sp)
    fbcc:	d9002e15 	stw	r4,184(sp)
    fbd0:	d8c02b15 	stw	r3,172(sp)
    fbd4:	d8002a15 	stw	zero,168(sp)
    fbd8:	d8003215 	stw	zero,200(sp)
    fbdc:	dc001404 	addi	r16,sp,80
    fbe0:	0039883a 	mov	fp,zero
    fbe4:	003ec406 	br	f6f8 <__alt_data_end+0xfc00f6f8>
    fbe8:	8025883a 	mov	r18,r16
    fbec:	dc002903 	ldbu	r16,164(sp)
    fbf0:	e011883a 	mov	r8,fp
    fbf4:	84003fcc 	andi	r16,r16,255
    fbf8:	803e8726 	beq	r16,zero,f618 <__alt_data_end+0xfc00f618>
    fbfc:	d8c02b03 	ldbu	r3,172(sp)
    fc00:	d8c02785 	stb	r3,158(sp)
    fc04:	003e8406 	br	f618 <__alt_data_end+0xfc00f618>
    fc08:	00c00044 	movi	r3,1
    fc0c:	d8c02905 	stb	r3,164(sp)
    fc10:	00c00ac4 	movi	r3,43
    fc14:	d8c02b05 	stb	r3,172(sp)
    fc18:	bc400007 	ldb	r17,0(r23)
    fc1c:	003d4606 	br	f138 <__alt_data_end+0xfc00f138>
    fc20:	84000814 	ori	r16,r16,32
    fc24:	bc400007 	ldb	r17,0(r23)
    fc28:	003d4306 	br	f138 <__alt_data_end+0xfc00f138>
    fc2c:	d8802e17 	ldw	r2,184(sp)
    fc30:	8025883a 	mov	r18,r16
    fc34:	d8002785 	stb	zero,158(sp)
    fc38:	14000017 	ldw	r16,0(r2)
    fc3c:	e011883a 	mov	r8,fp
    fc40:	15000104 	addi	r20,r2,4
    fc44:	80042126 	beq	r16,zero,10ccc <___svfprintf_internal_r+0x1ce8>
    fc48:	d8c02a17 	ldw	r3,168(sp)
    fc4c:	1803ee16 	blt	r3,zero,10c08 <___svfprintf_internal_r+0x1c24>
    fc50:	180d883a 	mov	r6,r3
    fc54:	000b883a 	mov	r5,zero
    fc58:	8009883a 	mov	r4,r16
    fc5c:	df003e15 	stw	fp,248(sp)
    fc60:	00163d40 	call	163d4 <memchr>
    fc64:	da003e17 	ldw	r8,248(sp)
    fc68:	10046a26 	beq	r2,zero,10e14 <___svfprintf_internal_r+0x1e30>
    fc6c:	1405c83a 	sub	r2,r2,r16
    fc70:	d8802b15 	stw	r2,172(sp)
    fc74:	1003ea16 	blt	r2,zero,10c20 <___svfprintf_internal_r+0x1c3c>
    fc78:	df002783 	ldbu	fp,158(sp)
    fc7c:	d8802915 	stw	r2,164(sp)
    fc80:	dd002e15 	stw	r20,184(sp)
    fc84:	d8002a15 	stw	zero,168(sp)
    fc88:	d8003215 	stw	zero,200(sp)
    fc8c:	003e9306 	br	f6dc <__alt_data_end+0xfc00f6dc>
    fc90:	8025883a 	mov	r18,r16
    fc94:	dc002903 	ldbu	r16,164(sp)
    fc98:	e011883a 	mov	r8,fp
    fc9c:	84003fcc 	andi	r16,r16,255
    fca0:	803f7c26 	beq	r16,zero,fa94 <__alt_data_end+0xfc00fa94>
    fca4:	d8c02b03 	ldbu	r3,172(sp)
    fca8:	d8c02785 	stb	r3,158(sp)
    fcac:	003f7906 	br	fa94 <__alt_data_end+0xfc00fa94>
    fcb0:	8025883a 	mov	r18,r16
    fcb4:	dc002903 	ldbu	r16,164(sp)
    fcb8:	e011883a 	mov	r8,fp
    fcbc:	84003fcc 	andi	r16,r16,255
    fcc0:	8005741e 	bne	r16,zero,11294 <___svfprintf_internal_r+0x22b0>
    fcc4:	010000f4 	movhi	r4,3
    fcc8:	21291204 	addi	r4,r4,-23480
    fccc:	d9003a15 	stw	r4,232(sp)
    fcd0:	9080080c 	andi	r2,r18,32
    fcd4:	103f8e1e 	bne	r2,zero,fb10 <__alt_data_end+0xfc00fb10>
    fcd8:	9080040c 	andi	r2,r18,16
    fcdc:	1002a726 	beq	r2,zero,1077c <___svfprintf_internal_r+0x1798>
    fce0:	d8802e17 	ldw	r2,184(sp)
    fce4:	002d883a 	mov	r22,zero
    fce8:	15000017 	ldw	r20,0(r2)
    fcec:	10800104 	addi	r2,r2,4
    fcf0:	d8802e15 	stw	r2,184(sp)
    fcf4:	003f8b06 	br	fb24 <__alt_data_end+0xfc00fb24>
    fcf8:	84000054 	ori	r16,r16,1
    fcfc:	bc400007 	ldb	r17,0(r23)
    fd00:	003d0d06 	br	f138 <__alt_data_end+0xfc00f138>
    fd04:	d8802b07 	ldb	r2,172(sp)
    fd08:	1002a41e 	bne	r2,zero,1079c <___svfprintf_internal_r+0x17b8>
    fd0c:	00c00044 	movi	r3,1
    fd10:	d8c02905 	stb	r3,164(sp)
    fd14:	00c00804 	movi	r3,32
    fd18:	d8c02b05 	stb	r3,172(sp)
    fd1c:	bc400007 	ldb	r17,0(r23)
    fd20:	003d0506 	br	f138 <__alt_data_end+0xfc00f138>
    fd24:	8025883a 	mov	r18,r16
    fd28:	dc002903 	ldbu	r16,164(sp)
    fd2c:	e011883a 	mov	r8,fp
    fd30:	84003fcc 	andi	r16,r16,255
    fd34:	803e0626 	beq	r16,zero,f550 <__alt_data_end+0xfc00f550>
    fd38:	d8c02b03 	ldbu	r3,172(sp)
    fd3c:	d8c02785 	stb	r3,158(sp)
    fd40:	003e0306 	br	f550 <__alt_data_end+0xfc00f550>
    fd44:	bc400007 	ldb	r17,0(r23)
    fd48:	00801b04 	movi	r2,108
    fd4c:	88830a26 	beq	r17,r2,10978 <___svfprintf_internal_r+0x1994>
    fd50:	84000414 	ori	r16,r16,16
    fd54:	003cf806 	br	f138 <__alt_data_end+0xfc00f138>
    fd58:	8025883a 	mov	r18,r16
    fd5c:	dc002903 	ldbu	r16,164(sp)
    fd60:	e011883a 	mov	r8,fp
    fd64:	84003fcc 	andi	r16,r16,255
    fd68:	8005471e 	bne	r16,zero,11288 <___svfprintf_internal_r+0x22a4>
    fd6c:	9080080c 	andi	r2,r18,32
    fd70:	10028c26 	beq	r2,zero,107a4 <___svfprintf_internal_r+0x17c0>
    fd74:	d9002e17 	ldw	r4,184(sp)
    fd78:	d9402f17 	ldw	r5,188(sp)
    fd7c:	20800017 	ldw	r2,0(r4)
    fd80:	2807d7fa 	srai	r3,r5,31
    fd84:	21000104 	addi	r4,r4,4
    fd88:	d9002e15 	stw	r4,184(sp)
    fd8c:	11400015 	stw	r5,0(r2)
    fd90:	10c00115 	stw	r3,4(r2)
    fd94:	003cbe06 	br	f090 <__alt_data_end+0xfc00f090>
    fd98:	84001014 	ori	r16,r16,64
    fd9c:	bc400007 	ldb	r17,0(r23)
    fda0:	003ce506 	br	f138 <__alt_data_end+0xfc00f138>
    fda4:	010000f4 	movhi	r4,3
    fda8:	21291204 	addi	r4,r4,-23480
    fdac:	0039883a 	mov	fp,zero
    fdb0:	d9003a15 	stw	r4,232(sp)
    fdb4:	04401e04 	movi	r17,120
    fdb8:	003f6906 	br	fb60 <__alt_data_end+0xfc00fb60>
    fdbc:	8025883a 	mov	r18,r16
    fdc0:	dc002903 	ldbu	r16,164(sp)
    fdc4:	e011883a 	mov	r8,fp
    fdc8:	84003fcc 	andi	r16,r16,255
    fdcc:	8005261e 	bne	r16,zero,11268 <___svfprintf_internal_r+0x2284>
    fdd0:	883d6526 	beq	r17,zero,f368 <__alt_data_end+0xfc00f368>
    fdd4:	00c00044 	movi	r3,1
    fdd8:	d8c02915 	stw	r3,164(sp)
    fddc:	dc401405 	stb	r17,80(sp)
    fde0:	d8002785 	stb	zero,158(sp)
    fde4:	003f7a06 	br	fbd0 <__alt_data_end+0xfc00fbd0>
    fde8:	010000f4 	movhi	r4,3
    fdec:	21291204 	addi	r4,r4,-23480
    fdf0:	d9003a15 	stw	r4,232(sp)
    fdf4:	d8c02e15 	stw	r3,184(sp)
    fdf8:	1025883a 	mov	r18,r2
    fdfc:	04401e04 	movi	r17,120
    fe00:	a584b03a 	or	r2,r20,r22
    fe04:	1000fa1e 	bne	r2,zero,101f0 <___svfprintf_internal_r+0x120c>
    fe08:	0039883a 	mov	fp,zero
    fe0c:	00800084 	movi	r2,2
    fe10:	10803fcc 	andi	r2,r2,255
    fe14:	00c00044 	movi	r3,1
    fe18:	10c21626 	beq	r2,r3,10674 <___svfprintf_internal_r+0x1690>
    fe1c:	00c00084 	movi	r3,2
    fe20:	10fe0e1e 	bne	r2,r3,f65c <__alt_data_end+0xfc00f65c>
    fe24:	003d4606 	br	f340 <__alt_data_end+0xfc00f340>
    fe28:	d8c02017 	ldw	r3,128(sp)
    fe2c:	003e7306 	br	f7fc <__alt_data_end+0xfc00f7fc>
    fe30:	00801944 	movi	r2,101
    fe34:	14407c0e 	bge	r2,r17,10028 <___svfprintf_internal_r+0x1044>
    fe38:	d9003617 	ldw	r4,216(sp)
    fe3c:	d9403717 	ldw	r5,220(sp)
    fe40:	000d883a 	mov	r6,zero
    fe44:	000f883a 	mov	r7,zero
    fe48:	d8c03d15 	stw	r3,244(sp)
    fe4c:	da003e15 	stw	r8,248(sp)
    fe50:	001d3380 	call	1d338 <__eqdf2>
    fe54:	d8c03d17 	ldw	r3,244(sp)
    fe58:	da003e17 	ldw	r8,248(sp)
    fe5c:	1000f51e 	bne	r2,zero,10234 <___svfprintf_internal_r+0x1250>
    fe60:	d8801f17 	ldw	r2,124(sp)
    fe64:	010000f4 	movhi	r4,3
    fe68:	21291904 	addi	r4,r4,-23452
    fe6c:	18c00044 	addi	r3,r3,1
    fe70:	10800044 	addi	r2,r2,1
    fe74:	41000015 	stw	r4,0(r8)
    fe78:	01000044 	movi	r4,1
    fe7c:	41000115 	stw	r4,4(r8)
    fe80:	d8c02015 	stw	r3,128(sp)
    fe84:	d8801f15 	stw	r2,124(sp)
    fe88:	010001c4 	movi	r4,7
    fe8c:	20826616 	blt	r4,r2,10828 <___svfprintf_internal_r+0x1844>
    fe90:	42000204 	addi	r8,r8,8
    fe94:	d8802617 	ldw	r2,152(sp)
    fe98:	d9403317 	ldw	r5,204(sp)
    fe9c:	11400216 	blt	r2,r5,fea8 <___svfprintf_internal_r+0xec4>
    fea0:	9080004c 	andi	r2,r18,1
    fea4:	103eb326 	beq	r2,zero,f974 <__alt_data_end+0xfc00f974>
    fea8:	d8803817 	ldw	r2,224(sp)
    feac:	d9003417 	ldw	r4,208(sp)
    feb0:	d9403817 	ldw	r5,224(sp)
    feb4:	1887883a 	add	r3,r3,r2
    feb8:	d8801f17 	ldw	r2,124(sp)
    febc:	41000015 	stw	r4,0(r8)
    fec0:	41400115 	stw	r5,4(r8)
    fec4:	10800044 	addi	r2,r2,1
    fec8:	d8c02015 	stw	r3,128(sp)
    fecc:	d8801f15 	stw	r2,124(sp)
    fed0:	010001c4 	movi	r4,7
    fed4:	2082af16 	blt	r4,r2,10994 <___svfprintf_internal_r+0x19b0>
    fed8:	42000204 	addi	r8,r8,8
    fedc:	d8803317 	ldw	r2,204(sp)
    fee0:	143fffc4 	addi	r16,r2,-1
    fee4:	043ea30e 	bge	zero,r16,f974 <__alt_data_end+0xfc00f974>
    fee8:	04400404 	movi	r17,16
    feec:	d8801f17 	ldw	r2,124(sp)
    fef0:	8c00860e 	bge	r17,r16,1010c <___svfprintf_internal_r+0x1128>
    fef4:	014000f4 	movhi	r5,3
    fef8:	29691984 	addi	r5,r5,-23450
    fefc:	d9402c15 	stw	r5,176(sp)
    ff00:	058001c4 	movi	r22,7
    ff04:	dd002d17 	ldw	r20,180(sp)
    ff08:	00000306 	br	ff18 <___svfprintf_internal_r+0xf34>
    ff0c:	42000204 	addi	r8,r8,8
    ff10:	843ffc04 	addi	r16,r16,-16
    ff14:	8c00800e 	bge	r17,r16,10118 <___svfprintf_internal_r+0x1134>
    ff18:	18c00404 	addi	r3,r3,16
    ff1c:	10800044 	addi	r2,r2,1
    ff20:	45400015 	stw	r21,0(r8)
    ff24:	44400115 	stw	r17,4(r8)
    ff28:	d8c02015 	stw	r3,128(sp)
    ff2c:	d8801f15 	stw	r2,124(sp)
    ff30:	b0bff60e 	bge	r22,r2,ff0c <__alt_data_end+0xfc00ff0c>
    ff34:	d9801e04 	addi	r6,sp,120
    ff38:	a00b883a 	mov	r5,r20
    ff3c:	9809883a 	mov	r4,r19
    ff40:	0017f480 	call	17f48 <__ssprint_r>
    ff44:	103d0e1e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
    ff48:	d8c02017 	ldw	r3,128(sp)
    ff4c:	d8801f17 	ldw	r2,124(sp)
    ff50:	da000404 	addi	r8,sp,16
    ff54:	003fee06 	br	ff10 <__alt_data_end+0xfc00ff10>
    ff58:	d9403117 	ldw	r5,196(sp)
    ff5c:	d8802917 	ldw	r2,164(sp)
    ff60:	28adc83a 	sub	r22,r5,r2
    ff64:	05be430e 	bge	zero,r22,f874 <__alt_data_end+0xfc00f874>
    ff68:	07000404 	movi	fp,16
    ff6c:	d8801f17 	ldw	r2,124(sp)
    ff70:	e583a20e 	bge	fp,r22,10dfc <___svfprintf_internal_r+0x1e18>
    ff74:	014000f4 	movhi	r5,3
    ff78:	29691984 	addi	r5,r5,-23450
    ff7c:	dc403015 	stw	r17,192(sp)
    ff80:	d9402c15 	stw	r5,176(sp)
    ff84:	b023883a 	mov	r17,r22
    ff88:	050001c4 	movi	r20,7
    ff8c:	902d883a 	mov	r22,r18
    ff90:	8025883a 	mov	r18,r16
    ff94:	dc002d17 	ldw	r16,180(sp)
    ff98:	00000306 	br	ffa8 <___svfprintf_internal_r+0xfc4>
    ff9c:	8c7ffc04 	addi	r17,r17,-16
    ffa0:	42000204 	addi	r8,r8,8
    ffa4:	e440110e 	bge	fp,r17,ffec <___svfprintf_internal_r+0x1008>
    ffa8:	18c00404 	addi	r3,r3,16
    ffac:	10800044 	addi	r2,r2,1
    ffb0:	45400015 	stw	r21,0(r8)
    ffb4:	47000115 	stw	fp,4(r8)
    ffb8:	d8c02015 	stw	r3,128(sp)
    ffbc:	d8801f15 	stw	r2,124(sp)
    ffc0:	a0bff60e 	bge	r20,r2,ff9c <__alt_data_end+0xfc00ff9c>
    ffc4:	d9801e04 	addi	r6,sp,120
    ffc8:	800b883a 	mov	r5,r16
    ffcc:	9809883a 	mov	r4,r19
    ffd0:	0017f480 	call	17f48 <__ssprint_r>
    ffd4:	103cea1e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
    ffd8:	8c7ffc04 	addi	r17,r17,-16
    ffdc:	d8c02017 	ldw	r3,128(sp)
    ffe0:	d8801f17 	ldw	r2,124(sp)
    ffe4:	da000404 	addi	r8,sp,16
    ffe8:	e47fef16 	blt	fp,r17,ffa8 <__alt_data_end+0xfc00ffa8>
    ffec:	9021883a 	mov	r16,r18
    fff0:	b025883a 	mov	r18,r22
    fff4:	882d883a 	mov	r22,r17
    fff8:	dc403017 	ldw	r17,192(sp)
    fffc:	d9002c17 	ldw	r4,176(sp)
   10000:	1d87883a 	add	r3,r3,r22
   10004:	10800044 	addi	r2,r2,1
   10008:	41000015 	stw	r4,0(r8)
   1000c:	45800115 	stw	r22,4(r8)
   10010:	d8c02015 	stw	r3,128(sp)
   10014:	d8801f15 	stw	r2,124(sp)
   10018:	010001c4 	movi	r4,7
   1001c:	20819a16 	blt	r4,r2,10688 <___svfprintf_internal_r+0x16a4>
   10020:	42000204 	addi	r8,r8,8
   10024:	003e1306 	br	f874 <__alt_data_end+0xfc00f874>
   10028:	d9403317 	ldw	r5,204(sp)
   1002c:	00800044 	movi	r2,1
   10030:	18c00044 	addi	r3,r3,1
   10034:	1141710e 	bge	r2,r5,105fc <___svfprintf_internal_r+0x1618>
   10038:	dc401f17 	ldw	r17,124(sp)
   1003c:	00800044 	movi	r2,1
   10040:	40800115 	stw	r2,4(r8)
   10044:	8c400044 	addi	r17,r17,1
   10048:	44000015 	stw	r16,0(r8)
   1004c:	d8c02015 	stw	r3,128(sp)
   10050:	dc401f15 	stw	r17,124(sp)
   10054:	008001c4 	movi	r2,7
   10058:	14417416 	blt	r2,r17,1062c <___svfprintf_internal_r+0x1648>
   1005c:	42000204 	addi	r8,r8,8
   10060:	d8803817 	ldw	r2,224(sp)
   10064:	d9003417 	ldw	r4,208(sp)
   10068:	8c400044 	addi	r17,r17,1
   1006c:	10c7883a 	add	r3,r2,r3
   10070:	40800115 	stw	r2,4(r8)
   10074:	41000015 	stw	r4,0(r8)
   10078:	d8c02015 	stw	r3,128(sp)
   1007c:	dc401f15 	stw	r17,124(sp)
   10080:	008001c4 	movi	r2,7
   10084:	14417216 	blt	r2,r17,10650 <___svfprintf_internal_r+0x166c>
   10088:	45800204 	addi	r22,r8,8
   1008c:	d9003617 	ldw	r4,216(sp)
   10090:	d9403717 	ldw	r5,220(sp)
   10094:	000d883a 	mov	r6,zero
   10098:	000f883a 	mov	r7,zero
   1009c:	d8c03d15 	stw	r3,244(sp)
   100a0:	001d3380 	call	1d338 <__eqdf2>
   100a4:	d8c03d17 	ldw	r3,244(sp)
   100a8:	1000b326 	beq	r2,zero,10378 <___svfprintf_internal_r+0x1394>
   100ac:	d9403317 	ldw	r5,204(sp)
   100b0:	84000044 	addi	r16,r16,1
   100b4:	8c400044 	addi	r17,r17,1
   100b8:	28bfffc4 	addi	r2,r5,-1
   100bc:	1887883a 	add	r3,r3,r2
   100c0:	b0800115 	stw	r2,4(r22)
   100c4:	b4000015 	stw	r16,0(r22)
   100c8:	d8c02015 	stw	r3,128(sp)
   100cc:	dc401f15 	stw	r17,124(sp)
   100d0:	008001c4 	movi	r2,7
   100d4:	1440d216 	blt	r2,r17,10420 <___svfprintf_internal_r+0x143c>
   100d8:	b5800204 	addi	r22,r22,8
   100dc:	d9003b17 	ldw	r4,236(sp)
   100e0:	df0022c4 	addi	fp,sp,139
   100e4:	8c400044 	addi	r17,r17,1
   100e8:	20c7883a 	add	r3,r4,r3
   100ec:	b7000015 	stw	fp,0(r22)
   100f0:	b1000115 	stw	r4,4(r22)
   100f4:	d8c02015 	stw	r3,128(sp)
   100f8:	dc401f15 	stw	r17,124(sp)
   100fc:	008001c4 	movi	r2,7
   10100:	14400e16 	blt	r2,r17,1013c <___svfprintf_internal_r+0x1158>
   10104:	b2000204 	addi	r8,r22,8
   10108:	003e1a06 	br	f974 <__alt_data_end+0xfc00f974>
   1010c:	010000f4 	movhi	r4,3
   10110:	21291984 	addi	r4,r4,-23450
   10114:	d9002c15 	stw	r4,176(sp)
   10118:	d9002c17 	ldw	r4,176(sp)
   1011c:	1c07883a 	add	r3,r3,r16
   10120:	44000115 	stw	r16,4(r8)
   10124:	41000015 	stw	r4,0(r8)
   10128:	10800044 	addi	r2,r2,1
   1012c:	d8c02015 	stw	r3,128(sp)
   10130:	d8801f15 	stw	r2,124(sp)
   10134:	010001c4 	movi	r4,7
   10138:	20be0d0e 	bge	r4,r2,f970 <__alt_data_end+0xfc00f970>
   1013c:	d9402d17 	ldw	r5,180(sp)
   10140:	d9801e04 	addi	r6,sp,120
   10144:	9809883a 	mov	r4,r19
   10148:	0017f480 	call	17f48 <__ssprint_r>
   1014c:	103c8c1e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10150:	d8c02017 	ldw	r3,128(sp)
   10154:	da000404 	addi	r8,sp,16
   10158:	003e0606 	br	f974 <__alt_data_end+0xfc00f974>
   1015c:	d9402d17 	ldw	r5,180(sp)
   10160:	d9801e04 	addi	r6,sp,120
   10164:	9809883a 	mov	r4,r19
   10168:	0017f480 	call	17f48 <__ssprint_r>
   1016c:	103e3d26 	beq	r2,zero,fa64 <__alt_data_end+0xfc00fa64>
   10170:	003c8306 	br	f380 <__alt_data_end+0xfc00f380>
   10174:	d9402d17 	ldw	r5,180(sp)
   10178:	d9801e04 	addi	r6,sp,120
   1017c:	9809883a 	mov	r4,r19
   10180:	0017f480 	call	17f48 <__ssprint_r>
   10184:	103c7e1e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10188:	d8c02017 	ldw	r3,128(sp)
   1018c:	da000404 	addi	r8,sp,16
   10190:	003deb06 	br	f940 <__alt_data_end+0xfc00f940>
   10194:	d9402d17 	ldw	r5,180(sp)
   10198:	d9801e04 	addi	r6,sp,120
   1019c:	9809883a 	mov	r4,r19
   101a0:	0017f480 	call	17f48 <__ssprint_r>
   101a4:	103c761e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   101a8:	d8c02017 	ldw	r3,128(sp)
   101ac:	da000404 	addi	r8,sp,16
   101b0:	003d9f06 	br	f830 <__alt_data_end+0xfc00f830>
   101b4:	d9402d17 	ldw	r5,180(sp)
   101b8:	d9801e04 	addi	r6,sp,120
   101bc:	9809883a 	mov	r4,r19
   101c0:	0017f480 	call	17f48 <__ssprint_r>
   101c4:	103c6e1e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   101c8:	d8c02017 	ldw	r3,128(sp)
   101cc:	da000404 	addi	r8,sp,16
   101d0:	003da506 	br	f868 <__alt_data_end+0xfc00f868>
   101d4:	d9402a17 	ldw	r5,168(sp)
   101d8:	d8002785 	stb	zero,158(sp)
   101dc:	283f0816 	blt	r5,zero,fe00 <__alt_data_end+0xfc00fe00>
   101e0:	00ffdfc4 	movi	r3,-129
   101e4:	a584b03a 	or	r2,r20,r22
   101e8:	90e4703a 	and	r18,r18,r3
   101ec:	103c5126 	beq	r2,zero,f334 <__alt_data_end+0xfc00f334>
   101f0:	0039883a 	mov	fp,zero
   101f4:	003e5a06 	br	fb60 <__alt_data_end+0xfc00fb60>
   101f8:	9080040c 	andi	r2,r18,16
   101fc:	10013d26 	beq	r2,zero,106f4 <___svfprintf_internal_r+0x1710>
   10200:	d8c02e17 	ldw	r3,184(sp)
   10204:	d9002a17 	ldw	r4,168(sp)
   10208:	d8002785 	stb	zero,158(sp)
   1020c:	18800104 	addi	r2,r3,4
   10210:	1d000017 	ldw	r20,0(r3)
   10214:	002d883a 	mov	r22,zero
   10218:	20013f16 	blt	r4,zero,10718 <___svfprintf_internal_r+0x1734>
   1021c:	00ffdfc4 	movi	r3,-129
   10220:	d8802e15 	stw	r2,184(sp)
   10224:	90e4703a 	and	r18,r18,r3
   10228:	a03d0926 	beq	r20,zero,f650 <__alt_data_end+0xfc00f650>
   1022c:	0039883a 	mov	fp,zero
   10230:	003d0c06 	br	f664 <__alt_data_end+0xfc00f664>
   10234:	dc402617 	ldw	r17,152(sp)
   10238:	0441830e 	bge	zero,r17,10848 <___svfprintf_internal_r+0x1864>
   1023c:	dc403217 	ldw	r17,200(sp)
   10240:	d8803317 	ldw	r2,204(sp)
   10244:	1440010e 	bge	r2,r17,1024c <___svfprintf_internal_r+0x1268>
   10248:	1023883a 	mov	r17,r2
   1024c:	04400a0e 	bge	zero,r17,10278 <___svfprintf_internal_r+0x1294>
   10250:	d8801f17 	ldw	r2,124(sp)
   10254:	1c47883a 	add	r3,r3,r17
   10258:	44000015 	stw	r16,0(r8)
   1025c:	10800044 	addi	r2,r2,1
   10260:	44400115 	stw	r17,4(r8)
   10264:	d8c02015 	stw	r3,128(sp)
   10268:	d8801f15 	stw	r2,124(sp)
   1026c:	010001c4 	movi	r4,7
   10270:	20827516 	blt	r4,r2,10c48 <___svfprintf_internal_r+0x1c64>
   10274:	42000204 	addi	r8,r8,8
   10278:	88027b16 	blt	r17,zero,10c68 <___svfprintf_internal_r+0x1c84>
   1027c:	d9003217 	ldw	r4,200(sp)
   10280:	2463c83a 	sub	r17,r4,r17
   10284:	0440990e 	bge	zero,r17,104ec <___svfprintf_internal_r+0x1508>
   10288:	05800404 	movi	r22,16
   1028c:	d8801f17 	ldw	r2,124(sp)
   10290:	b441530e 	bge	r22,r17,107e0 <___svfprintf_internal_r+0x17fc>
   10294:	010000f4 	movhi	r4,3
   10298:	21291984 	addi	r4,r4,-23450
   1029c:	d9002c15 	stw	r4,176(sp)
   102a0:	070001c4 	movi	fp,7
   102a4:	dd002d17 	ldw	r20,180(sp)
   102a8:	00000306 	br	102b8 <___svfprintf_internal_r+0x12d4>
   102ac:	42000204 	addi	r8,r8,8
   102b0:	8c7ffc04 	addi	r17,r17,-16
   102b4:	b4414d0e 	bge	r22,r17,107ec <___svfprintf_internal_r+0x1808>
   102b8:	18c00404 	addi	r3,r3,16
   102bc:	10800044 	addi	r2,r2,1
   102c0:	45400015 	stw	r21,0(r8)
   102c4:	45800115 	stw	r22,4(r8)
   102c8:	d8c02015 	stw	r3,128(sp)
   102cc:	d8801f15 	stw	r2,124(sp)
   102d0:	e0bff60e 	bge	fp,r2,102ac <__alt_data_end+0xfc0102ac>
   102d4:	d9801e04 	addi	r6,sp,120
   102d8:	a00b883a 	mov	r5,r20
   102dc:	9809883a 	mov	r4,r19
   102e0:	0017f480 	call	17f48 <__ssprint_r>
   102e4:	103c261e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   102e8:	d8c02017 	ldw	r3,128(sp)
   102ec:	d8801f17 	ldw	r2,124(sp)
   102f0:	da000404 	addi	r8,sp,16
   102f4:	003fee06 	br	102b0 <__alt_data_end+0xfc0102b0>
   102f8:	d9402d17 	ldw	r5,180(sp)
   102fc:	d9801e04 	addi	r6,sp,120
   10300:	9809883a 	mov	r4,r19
   10304:	0017f480 	call	17f48 <__ssprint_r>
   10308:	103c1d1e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   1030c:	d8c02017 	ldw	r3,128(sp)
   10310:	df002787 	ldb	fp,158(sp)
   10314:	da000404 	addi	r8,sp,16
   10318:	003d3806 	br	f7fc <__alt_data_end+0xfc00f7fc>
   1031c:	9080040c 	andi	r2,r18,16
   10320:	10005c26 	beq	r2,zero,10494 <___svfprintf_internal_r+0x14b0>
   10324:	d8c02e17 	ldw	r3,184(sp)
   10328:	d9002a17 	ldw	r4,168(sp)
   1032c:	d8002785 	stb	zero,158(sp)
   10330:	18800104 	addi	r2,r3,4
   10334:	1d000017 	ldw	r20,0(r3)
   10338:	002d883a 	mov	r22,zero
   1033c:	20005e16 	blt	r4,zero,104b8 <___svfprintf_internal_r+0x14d4>
   10340:	00ffdfc4 	movi	r3,-129
   10344:	d8802e15 	stw	r2,184(sp)
   10348:	90e4703a 	and	r18,r18,r3
   1034c:	0039883a 	mov	fp,zero
   10350:	a03ddf26 	beq	r20,zero,fad0 <__alt_data_end+0xfc00fad0>
   10354:	00800244 	movi	r2,9
   10358:	153c8e36 	bltu	r2,r20,f594 <__alt_data_end+0xfc00f594>
   1035c:	a5000c04 	addi	r20,r20,48
   10360:	dc001dc4 	addi	r16,sp,119
   10364:	dd001dc5 	stb	r20,119(sp)
   10368:	d8c02817 	ldw	r3,160(sp)
   1036c:	1c07c83a 	sub	r3,r3,r16
   10370:	d8c02b15 	stw	r3,172(sp)
   10374:	003cd306 	br	f6c4 <__alt_data_end+0xfc00f6c4>
   10378:	d8803317 	ldw	r2,204(sp)
   1037c:	143fffc4 	addi	r16,r2,-1
   10380:	043f560e 	bge	zero,r16,100dc <__alt_data_end+0xfc0100dc>
   10384:	07000404 	movi	fp,16
   10388:	e403530e 	bge	fp,r16,110d8 <___svfprintf_internal_r+0x20f4>
   1038c:	014000f4 	movhi	r5,3
   10390:	29691984 	addi	r5,r5,-23450
   10394:	d9402c15 	stw	r5,176(sp)
   10398:	01c001c4 	movi	r7,7
   1039c:	dd002d17 	ldw	r20,180(sp)
   103a0:	00000306 	br	103b0 <___svfprintf_internal_r+0x13cc>
   103a4:	843ffc04 	addi	r16,r16,-16
   103a8:	b5800204 	addi	r22,r22,8
   103ac:	e400130e 	bge	fp,r16,103fc <___svfprintf_internal_r+0x1418>
   103b0:	18c00404 	addi	r3,r3,16
   103b4:	8c400044 	addi	r17,r17,1
   103b8:	b5400015 	stw	r21,0(r22)
   103bc:	b7000115 	stw	fp,4(r22)
   103c0:	d8c02015 	stw	r3,128(sp)
   103c4:	dc401f15 	stw	r17,124(sp)
   103c8:	3c7ff60e 	bge	r7,r17,103a4 <__alt_data_end+0xfc0103a4>
   103cc:	d9801e04 	addi	r6,sp,120
   103d0:	a00b883a 	mov	r5,r20
   103d4:	9809883a 	mov	r4,r19
   103d8:	d9c03d15 	stw	r7,244(sp)
   103dc:	0017f480 	call	17f48 <__ssprint_r>
   103e0:	d9c03d17 	ldw	r7,244(sp)
   103e4:	103be61e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   103e8:	843ffc04 	addi	r16,r16,-16
   103ec:	d8c02017 	ldw	r3,128(sp)
   103f0:	dc401f17 	ldw	r17,124(sp)
   103f4:	dd800404 	addi	r22,sp,16
   103f8:	e43fed16 	blt	fp,r16,103b0 <__alt_data_end+0xfc0103b0>
   103fc:	d8802c17 	ldw	r2,176(sp)
   10400:	1c07883a 	add	r3,r3,r16
   10404:	8c400044 	addi	r17,r17,1
   10408:	b0800015 	stw	r2,0(r22)
   1040c:	b4000115 	stw	r16,4(r22)
   10410:	d8c02015 	stw	r3,128(sp)
   10414:	dc401f15 	stw	r17,124(sp)
   10418:	008001c4 	movi	r2,7
   1041c:	147f2e0e 	bge	r2,r17,100d8 <__alt_data_end+0xfc0100d8>
   10420:	d9402d17 	ldw	r5,180(sp)
   10424:	d9801e04 	addi	r6,sp,120
   10428:	9809883a 	mov	r4,r19
   1042c:	0017f480 	call	17f48 <__ssprint_r>
   10430:	103bd31e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10434:	d8c02017 	ldw	r3,128(sp)
   10438:	dc401f17 	ldw	r17,124(sp)
   1043c:	dd800404 	addi	r22,sp,16
   10440:	003f2606 	br	100dc <__alt_data_end+0xfc0100dc>
   10444:	9080040c 	andi	r2,r18,16
   10448:	1000c326 	beq	r2,zero,10758 <___svfprintf_internal_r+0x1774>
   1044c:	d9402e17 	ldw	r5,184(sp)
   10450:	2d000017 	ldw	r20,0(r5)
   10454:	29400104 	addi	r5,r5,4
   10458:	d9402e15 	stw	r5,184(sp)
   1045c:	a02dd7fa 	srai	r22,r20,31
   10460:	b005883a 	mov	r2,r22
   10464:	103c430e 	bge	r2,zero,f574 <__alt_data_end+0xfc00f574>
   10468:	d9402a17 	ldw	r5,168(sp)
   1046c:	0529c83a 	sub	r20,zero,r20
   10470:	07000b44 	movi	fp,45
   10474:	a004c03a 	cmpne	r2,r20,zero
   10478:	05adc83a 	sub	r22,zero,r22
   1047c:	df002785 	stb	fp,158(sp)
   10480:	b0adc83a 	sub	r22,r22,r2
   10484:	28022e16 	blt	r5,zero,10d40 <___svfprintf_internal_r+0x1d5c>
   10488:	00bfdfc4 	movi	r2,-129
   1048c:	90a4703a 	and	r18,r18,r2
   10490:	003c3f06 	br	f590 <__alt_data_end+0xfc00f590>
   10494:	9080100c 	andi	r2,r18,64
   10498:	d8002785 	stb	zero,158(sp)
   1049c:	10012526 	beq	r2,zero,10934 <___svfprintf_internal_r+0x1950>
   104a0:	d9402e17 	ldw	r5,184(sp)
   104a4:	d8c02a17 	ldw	r3,168(sp)
   104a8:	002d883a 	mov	r22,zero
   104ac:	28800104 	addi	r2,r5,4
   104b0:	2d00000b 	ldhu	r20,0(r5)
   104b4:	183fa20e 	bge	r3,zero,10340 <__alt_data_end+0xfc010340>
   104b8:	d8802e15 	stw	r2,184(sp)
   104bc:	0039883a 	mov	fp,zero
   104c0:	a584b03a 	or	r2,r20,r22
   104c4:	103c321e 	bne	r2,zero,f590 <__alt_data_end+0xfc00f590>
   104c8:	00800044 	movi	r2,1
   104cc:	003e5006 	br	fe10 <__alt_data_end+0xfc00fe10>
   104d0:	d9402d17 	ldw	r5,180(sp)
   104d4:	d9801e04 	addi	r6,sp,120
   104d8:	9809883a 	mov	r4,r19
   104dc:	0017f480 	call	17f48 <__ssprint_r>
   104e0:	103ba71e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   104e4:	d8c02017 	ldw	r3,128(sp)
   104e8:	da000404 	addi	r8,sp,16
   104ec:	d9003217 	ldw	r4,200(sp)
   104f0:	d8802617 	ldw	r2,152(sp)
   104f4:	d9403317 	ldw	r5,204(sp)
   104f8:	8123883a 	add	r17,r16,r4
   104fc:	11400216 	blt	r2,r5,10508 <___svfprintf_internal_r+0x1524>
   10500:	9100004c 	andi	r4,r18,1
   10504:	20000d26 	beq	r4,zero,1053c <___svfprintf_internal_r+0x1558>
   10508:	d9003817 	ldw	r4,224(sp)
   1050c:	d9403417 	ldw	r5,208(sp)
   10510:	1907883a 	add	r3,r3,r4
   10514:	d9001f17 	ldw	r4,124(sp)
   10518:	41400015 	stw	r5,0(r8)
   1051c:	d9403817 	ldw	r5,224(sp)
   10520:	21000044 	addi	r4,r4,1
   10524:	d8c02015 	stw	r3,128(sp)
   10528:	41400115 	stw	r5,4(r8)
   1052c:	d9001f15 	stw	r4,124(sp)
   10530:	014001c4 	movi	r5,7
   10534:	2901dc16 	blt	r5,r4,10ca8 <___svfprintf_internal_r+0x1cc4>
   10538:	42000204 	addi	r8,r8,8
   1053c:	d9003317 	ldw	r4,204(sp)
   10540:	8121883a 	add	r16,r16,r4
   10544:	2085c83a 	sub	r2,r4,r2
   10548:	8461c83a 	sub	r16,r16,r17
   1054c:	1400010e 	bge	r2,r16,10554 <___svfprintf_internal_r+0x1570>
   10550:	1021883a 	mov	r16,r2
   10554:	04000a0e 	bge	zero,r16,10580 <___svfprintf_internal_r+0x159c>
   10558:	d9001f17 	ldw	r4,124(sp)
   1055c:	1c07883a 	add	r3,r3,r16
   10560:	44400015 	stw	r17,0(r8)
   10564:	21000044 	addi	r4,r4,1
   10568:	44000115 	stw	r16,4(r8)
   1056c:	d8c02015 	stw	r3,128(sp)
   10570:	d9001f15 	stw	r4,124(sp)
   10574:	014001c4 	movi	r5,7
   10578:	2901e616 	blt	r5,r4,10d14 <___svfprintf_internal_r+0x1d30>
   1057c:	42000204 	addi	r8,r8,8
   10580:	8001f616 	blt	r16,zero,10d5c <___svfprintf_internal_r+0x1d78>
   10584:	1421c83a 	sub	r16,r2,r16
   10588:	043cfa0e 	bge	zero,r16,f974 <__alt_data_end+0xfc00f974>
   1058c:	04400404 	movi	r17,16
   10590:	d8801f17 	ldw	r2,124(sp)
   10594:	8c3edd0e 	bge	r17,r16,1010c <__alt_data_end+0xfc01010c>
   10598:	014000f4 	movhi	r5,3
   1059c:	29691984 	addi	r5,r5,-23450
   105a0:	d9402c15 	stw	r5,176(sp)
   105a4:	058001c4 	movi	r22,7
   105a8:	dd002d17 	ldw	r20,180(sp)
   105ac:	00000306 	br	105bc <___svfprintf_internal_r+0x15d8>
   105b0:	42000204 	addi	r8,r8,8
   105b4:	843ffc04 	addi	r16,r16,-16
   105b8:	8c3ed70e 	bge	r17,r16,10118 <__alt_data_end+0xfc010118>
   105bc:	18c00404 	addi	r3,r3,16
   105c0:	10800044 	addi	r2,r2,1
   105c4:	45400015 	stw	r21,0(r8)
   105c8:	44400115 	stw	r17,4(r8)
   105cc:	d8c02015 	stw	r3,128(sp)
   105d0:	d8801f15 	stw	r2,124(sp)
   105d4:	b0bff60e 	bge	r22,r2,105b0 <__alt_data_end+0xfc0105b0>
   105d8:	d9801e04 	addi	r6,sp,120
   105dc:	a00b883a 	mov	r5,r20
   105e0:	9809883a 	mov	r4,r19
   105e4:	0017f480 	call	17f48 <__ssprint_r>
   105e8:	103b651e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   105ec:	d8c02017 	ldw	r3,128(sp)
   105f0:	d8801f17 	ldw	r2,124(sp)
   105f4:	da000404 	addi	r8,sp,16
   105f8:	003fee06 	br	105b4 <__alt_data_end+0xfc0105b4>
   105fc:	9088703a 	and	r4,r18,r2
   10600:	203e8d1e 	bne	r4,zero,10038 <__alt_data_end+0xfc010038>
   10604:	dc401f17 	ldw	r17,124(sp)
   10608:	40800115 	stw	r2,4(r8)
   1060c:	44000015 	stw	r16,0(r8)
   10610:	8c400044 	addi	r17,r17,1
   10614:	d8c02015 	stw	r3,128(sp)
   10618:	dc401f15 	stw	r17,124(sp)
   1061c:	008001c4 	movi	r2,7
   10620:	147f7f16 	blt	r2,r17,10420 <__alt_data_end+0xfc010420>
   10624:	45800204 	addi	r22,r8,8
   10628:	003eac06 	br	100dc <__alt_data_end+0xfc0100dc>
   1062c:	d9402d17 	ldw	r5,180(sp)
   10630:	d9801e04 	addi	r6,sp,120
   10634:	9809883a 	mov	r4,r19
   10638:	0017f480 	call	17f48 <__ssprint_r>
   1063c:	103b501e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10640:	d8c02017 	ldw	r3,128(sp)
   10644:	dc401f17 	ldw	r17,124(sp)
   10648:	da000404 	addi	r8,sp,16
   1064c:	003e8406 	br	10060 <__alt_data_end+0xfc010060>
   10650:	d9402d17 	ldw	r5,180(sp)
   10654:	d9801e04 	addi	r6,sp,120
   10658:	9809883a 	mov	r4,r19
   1065c:	0017f480 	call	17f48 <__ssprint_r>
   10660:	103b471e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10664:	d8c02017 	ldw	r3,128(sp)
   10668:	dc401f17 	ldw	r17,124(sp)
   1066c:	dd800404 	addi	r22,sp,16
   10670:	003e8606 	br	1008c <__alt_data_end+0xfc01008c>
   10674:	0029883a 	mov	r20,zero
   10678:	a5000c04 	addi	r20,r20,48
   1067c:	dc001dc4 	addi	r16,sp,119
   10680:	dd001dc5 	stb	r20,119(sp)
   10684:	003f3806 	br	10368 <__alt_data_end+0xfc010368>
   10688:	d9402d17 	ldw	r5,180(sp)
   1068c:	d9801e04 	addi	r6,sp,120
   10690:	9809883a 	mov	r4,r19
   10694:	0017f480 	call	17f48 <__ssprint_r>
   10698:	103b391e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   1069c:	d8c02017 	ldw	r3,128(sp)
   106a0:	da000404 	addi	r8,sp,16
   106a4:	003c7306 	br	f874 <__alt_data_end+0xfc00f874>
   106a8:	d9003617 	ldw	r4,216(sp)
   106ac:	d9403717 	ldw	r5,220(sp)
   106b0:	da003e15 	stw	r8,248(sp)
   106b4:	0017d980 	call	17d98 <__fpclassifyd>
   106b8:	da003e17 	ldw	r8,248(sp)
   106bc:	1000bd1e 	bne	r2,zero,109b4 <___svfprintf_internal_r+0x19d0>
   106c0:	008011c4 	movi	r2,71
   106c4:	14411e0e 	bge	r2,r17,10b40 <___svfprintf_internal_r+0x1b5c>
   106c8:	040000f4 	movhi	r16,3
   106cc:	84290c04 	addi	r16,r16,-23504
   106d0:	00c000c4 	movi	r3,3
   106d4:	00bfdfc4 	movi	r2,-129
   106d8:	d8c02915 	stw	r3,164(sp)
   106dc:	90a4703a 	and	r18,r18,r2
   106e0:	df002783 	ldbu	fp,158(sp)
   106e4:	d8c02b15 	stw	r3,172(sp)
   106e8:	d8002a15 	stw	zero,168(sp)
   106ec:	d8003215 	stw	zero,200(sp)
   106f0:	003bfa06 	br	f6dc <__alt_data_end+0xfc00f6dc>
   106f4:	9080100c 	andi	r2,r18,64
   106f8:	d8002785 	stb	zero,158(sp)
   106fc:	10009426 	beq	r2,zero,10950 <___svfprintf_internal_r+0x196c>
   10700:	d9402e17 	ldw	r5,184(sp)
   10704:	d8c02a17 	ldw	r3,168(sp)
   10708:	002d883a 	mov	r22,zero
   1070c:	28800104 	addi	r2,r5,4
   10710:	2d00000b 	ldhu	r20,0(r5)
   10714:	183ec10e 	bge	r3,zero,1021c <__alt_data_end+0xfc01021c>
   10718:	a586b03a 	or	r3,r20,r22
   1071c:	d8802e15 	stw	r2,184(sp)
   10720:	183ec21e 	bne	r3,zero,1022c <__alt_data_end+0xfc01022c>
   10724:	0039883a 	mov	fp,zero
   10728:	0005883a 	mov	r2,zero
   1072c:	003db806 	br	fe10 <__alt_data_end+0xfc00fe10>
   10730:	d8c02e17 	ldw	r3,184(sp)
   10734:	d9002e17 	ldw	r4,184(sp)
   10738:	d9402e17 	ldw	r5,184(sp)
   1073c:	18c00017 	ldw	r3,0(r3)
   10740:	21000117 	ldw	r4,4(r4)
   10744:	29400204 	addi	r5,r5,8
   10748:	d8c03615 	stw	r3,216(sp)
   1074c:	d9003715 	stw	r4,220(sp)
   10750:	d9402e15 	stw	r5,184(sp)
   10754:	003b5a06 	br	f4c0 <__alt_data_end+0xfc00f4c0>
   10758:	9080100c 	andi	r2,r18,64
   1075c:	10010726 	beq	r2,zero,10b7c <___svfprintf_internal_r+0x1b98>
   10760:	d8802e17 	ldw	r2,184(sp)
   10764:	1500000f 	ldh	r20,0(r2)
   10768:	10800104 	addi	r2,r2,4
   1076c:	d8802e15 	stw	r2,184(sp)
   10770:	a02dd7fa 	srai	r22,r20,31
   10774:	b005883a 	mov	r2,r22
   10778:	003b7d06 	br	f570 <__alt_data_end+0xfc00f570>
   1077c:	9080100c 	andi	r2,r18,64
   10780:	10010526 	beq	r2,zero,10b98 <___svfprintf_internal_r+0x1bb4>
   10784:	d8c02e17 	ldw	r3,184(sp)
   10788:	002d883a 	mov	r22,zero
   1078c:	1d00000b 	ldhu	r20,0(r3)
   10790:	18c00104 	addi	r3,r3,4
   10794:	d8c02e15 	stw	r3,184(sp)
   10798:	003ce206 	br	fb24 <__alt_data_end+0xfc00fb24>
   1079c:	bc400007 	ldb	r17,0(r23)
   107a0:	003a6506 	br	f138 <__alt_data_end+0xfc00f138>
   107a4:	9080040c 	andi	r2,r18,16
   107a8:	10010126 	beq	r2,zero,10bb0 <___svfprintf_internal_r+0x1bcc>
   107ac:	d8c02e17 	ldw	r3,184(sp)
   107b0:	d9002f17 	ldw	r4,188(sp)
   107b4:	18800017 	ldw	r2,0(r3)
   107b8:	18c00104 	addi	r3,r3,4
   107bc:	d8c02e15 	stw	r3,184(sp)
   107c0:	11000015 	stw	r4,0(r2)
   107c4:	003a3206 	br	f090 <__alt_data_end+0xfc00f090>
   107c8:	d9002a17 	ldw	r4,168(sp)
   107cc:	d8002785 	stb	zero,158(sp)
   107d0:	203d8d16 	blt	r4,zero,fe08 <__alt_data_end+0xfc00fe08>
   107d4:	00bfdfc4 	movi	r2,-129
   107d8:	90a4703a 	and	r18,r18,r2
   107dc:	003ad506 	br	f334 <__alt_data_end+0xfc00f334>
   107e0:	014000f4 	movhi	r5,3
   107e4:	29691984 	addi	r5,r5,-23450
   107e8:	d9402c15 	stw	r5,176(sp)
   107ec:	d9402c17 	ldw	r5,176(sp)
   107f0:	1c47883a 	add	r3,r3,r17
   107f4:	10800044 	addi	r2,r2,1
   107f8:	41400015 	stw	r5,0(r8)
   107fc:	44400115 	stw	r17,4(r8)
   10800:	d8c02015 	stw	r3,128(sp)
   10804:	d8801f15 	stw	r2,124(sp)
   10808:	010001c4 	movi	r4,7
   1080c:	20bf3016 	blt	r4,r2,104d0 <__alt_data_end+0xfc0104d0>
   10810:	42000204 	addi	r8,r8,8
   10814:	003f3506 	br	104ec <__alt_data_end+0xfc0104ec>
   10818:	010000f4 	movhi	r4,3
   1081c:	21291984 	addi	r4,r4,-23450
   10820:	d9002c15 	stw	r4,176(sp)
   10824:	003c3c06 	br	f918 <__alt_data_end+0xfc00f918>
   10828:	d9402d17 	ldw	r5,180(sp)
   1082c:	d9801e04 	addi	r6,sp,120
   10830:	9809883a 	mov	r4,r19
   10834:	0017f480 	call	17f48 <__ssprint_r>
   10838:	103ad11e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   1083c:	d8c02017 	ldw	r3,128(sp)
   10840:	da000404 	addi	r8,sp,16
   10844:	003d9306 	br	fe94 <__alt_data_end+0xfc00fe94>
   10848:	d8801f17 	ldw	r2,124(sp)
   1084c:	014000f4 	movhi	r5,3
   10850:	01000044 	movi	r4,1
   10854:	18c00044 	addi	r3,r3,1
   10858:	10800044 	addi	r2,r2,1
   1085c:	29691904 	addi	r5,r5,-23452
   10860:	41000115 	stw	r4,4(r8)
   10864:	41400015 	stw	r5,0(r8)
   10868:	d8c02015 	stw	r3,128(sp)
   1086c:	d8801f15 	stw	r2,124(sp)
   10870:	010001c4 	movi	r4,7
   10874:	2080b516 	blt	r4,r2,10b4c <___svfprintf_internal_r+0x1b68>
   10878:	42000204 	addi	r8,r8,8
   1087c:	8800041e 	bne	r17,zero,10890 <___svfprintf_internal_r+0x18ac>
   10880:	d8803317 	ldw	r2,204(sp)
   10884:	1000021e 	bne	r2,zero,10890 <___svfprintf_internal_r+0x18ac>
   10888:	9080004c 	andi	r2,r18,1
   1088c:	103c3926 	beq	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10890:	d9003817 	ldw	r4,224(sp)
   10894:	d8801f17 	ldw	r2,124(sp)
   10898:	d9403417 	ldw	r5,208(sp)
   1089c:	20c7883a 	add	r3,r4,r3
   108a0:	10800044 	addi	r2,r2,1
   108a4:	41000115 	stw	r4,4(r8)
   108a8:	41400015 	stw	r5,0(r8)
   108ac:	d8c02015 	stw	r3,128(sp)
   108b0:	d8801f15 	stw	r2,124(sp)
   108b4:	010001c4 	movi	r4,7
   108b8:	20818016 	blt	r4,r2,10ebc <___svfprintf_internal_r+0x1ed8>
   108bc:	42000204 	addi	r8,r8,8
   108c0:	0463c83a 	sub	r17,zero,r17
   108c4:	0440cb0e 	bge	zero,r17,10bf4 <___svfprintf_internal_r+0x1c10>
   108c8:	05800404 	movi	r22,16
   108cc:	b440e80e 	bge	r22,r17,10c70 <___svfprintf_internal_r+0x1c8c>
   108d0:	014000f4 	movhi	r5,3
   108d4:	29691984 	addi	r5,r5,-23450
   108d8:	d9402c15 	stw	r5,176(sp)
   108dc:	070001c4 	movi	fp,7
   108e0:	dd002d17 	ldw	r20,180(sp)
   108e4:	00000306 	br	108f4 <___svfprintf_internal_r+0x1910>
   108e8:	42000204 	addi	r8,r8,8
   108ec:	8c7ffc04 	addi	r17,r17,-16
   108f0:	b440e20e 	bge	r22,r17,10c7c <___svfprintf_internal_r+0x1c98>
   108f4:	18c00404 	addi	r3,r3,16
   108f8:	10800044 	addi	r2,r2,1
   108fc:	45400015 	stw	r21,0(r8)
   10900:	45800115 	stw	r22,4(r8)
   10904:	d8c02015 	stw	r3,128(sp)
   10908:	d8801f15 	stw	r2,124(sp)
   1090c:	e0bff60e 	bge	fp,r2,108e8 <__alt_data_end+0xfc0108e8>
   10910:	d9801e04 	addi	r6,sp,120
   10914:	a00b883a 	mov	r5,r20
   10918:	9809883a 	mov	r4,r19
   1091c:	0017f480 	call	17f48 <__ssprint_r>
   10920:	103a971e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10924:	d8c02017 	ldw	r3,128(sp)
   10928:	d8801f17 	ldw	r2,124(sp)
   1092c:	da000404 	addi	r8,sp,16
   10930:	003fee06 	br	108ec <__alt_data_end+0xfc0108ec>
   10934:	d9002e17 	ldw	r4,184(sp)
   10938:	d9402a17 	ldw	r5,168(sp)
   1093c:	002d883a 	mov	r22,zero
   10940:	20800104 	addi	r2,r4,4
   10944:	25000017 	ldw	r20,0(r4)
   10948:	283e7d0e 	bge	r5,zero,10340 <__alt_data_end+0xfc010340>
   1094c:	003eda06 	br	104b8 <__alt_data_end+0xfc0104b8>
   10950:	d9002e17 	ldw	r4,184(sp)
   10954:	d9402a17 	ldw	r5,168(sp)
   10958:	002d883a 	mov	r22,zero
   1095c:	20800104 	addi	r2,r4,4
   10960:	25000017 	ldw	r20,0(r4)
   10964:	283e2d0e 	bge	r5,zero,1021c <__alt_data_end+0xfc01021c>
   10968:	003f6b06 	br	10718 <__alt_data_end+0xfc010718>
   1096c:	d8c02e15 	stw	r3,184(sp)
   10970:	0039883a 	mov	fp,zero
   10974:	003ed206 	br	104c0 <__alt_data_end+0xfc0104c0>
   10978:	bc400043 	ldbu	r17,1(r23)
   1097c:	84000814 	ori	r16,r16,32
   10980:	bdc00044 	addi	r23,r23,1
   10984:	8c403fcc 	andi	r17,r17,255
   10988:	8c40201c 	xori	r17,r17,128
   1098c:	8c7fe004 	addi	r17,r17,-128
   10990:	0039e906 	br	f138 <__alt_data_end+0xfc00f138>
   10994:	d9402d17 	ldw	r5,180(sp)
   10998:	d9801e04 	addi	r6,sp,120
   1099c:	9809883a 	mov	r4,r19
   109a0:	0017f480 	call	17f48 <__ssprint_r>
   109a4:	103a761e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   109a8:	d8c02017 	ldw	r3,128(sp)
   109ac:	da000404 	addi	r8,sp,16
   109b0:	003d4a06 	br	fedc <__alt_data_end+0xfc00fedc>
   109b4:	d9002a17 	ldw	r4,168(sp)
   109b8:	05bff7c4 	movi	r22,-33
   109bc:	00bfffc4 	movi	r2,-1
   109c0:	8dac703a 	and	r22,r17,r22
   109c4:	20806a26 	beq	r4,r2,10b70 <___svfprintf_internal_r+0x1b8c>
   109c8:	008011c4 	movi	r2,71
   109cc:	b0813726 	beq	r22,r2,10eac <___svfprintf_internal_r+0x1ec8>
   109d0:	d9003717 	ldw	r4,220(sp)
   109d4:	90c04014 	ori	r3,r18,256
   109d8:	d8c02c15 	stw	r3,176(sp)
   109dc:	20015d16 	blt	r4,zero,10f54 <___svfprintf_internal_r+0x1f70>
   109e0:	dd003717 	ldw	r20,220(sp)
   109e4:	d8002905 	stb	zero,164(sp)
   109e8:	00801984 	movi	r2,102
   109ec:	88814026 	beq	r17,r2,10ef0 <___svfprintf_internal_r+0x1f0c>
   109f0:	00801184 	movi	r2,70
   109f4:	88817126 	beq	r17,r2,10fbc <___svfprintf_internal_r+0x1fd8>
   109f8:	00801144 	movi	r2,69
   109fc:	b0816226 	beq	r22,r2,10f88 <___svfprintf_internal_r+0x1fa4>
   10a00:	d8c02a17 	ldw	r3,168(sp)
   10a04:	d8802104 	addi	r2,sp,132
   10a08:	d8800315 	stw	r2,12(sp)
   10a0c:	d9403617 	ldw	r5,216(sp)
   10a10:	d8802504 	addi	r2,sp,148
   10a14:	d8800215 	stw	r2,8(sp)
   10a18:	d8802604 	addi	r2,sp,152
   10a1c:	d8c00015 	stw	r3,0(sp)
   10a20:	d8800115 	stw	r2,4(sp)
   10a24:	01c00084 	movi	r7,2
   10a28:	a00d883a 	mov	r6,r20
   10a2c:	9809883a 	mov	r4,r19
   10a30:	d8c03d15 	stw	r3,244(sp)
   10a34:	da003e15 	stw	r8,248(sp)
   10a38:	00139d80 	call	139d8 <_dtoa_r>
   10a3c:	1021883a 	mov	r16,r2
   10a40:	008019c4 	movi	r2,103
   10a44:	d8c03d17 	ldw	r3,244(sp)
   10a48:	da003e17 	ldw	r8,248(sp)
   10a4c:	8880e726 	beq	r17,r2,10dec <___svfprintf_internal_r+0x1e08>
   10a50:	008011c4 	movi	r2,71
   10a54:	8880d426 	beq	r17,r2,10da8 <___svfprintf_internal_r+0x1dc4>
   10a58:	80f9883a 	add	fp,r16,r3
   10a5c:	d9003617 	ldw	r4,216(sp)
   10a60:	000d883a 	mov	r6,zero
   10a64:	000f883a 	mov	r7,zero
   10a68:	a00b883a 	mov	r5,r20
   10a6c:	da003e15 	stw	r8,248(sp)
   10a70:	001d3380 	call	1d338 <__eqdf2>
   10a74:	da003e17 	ldw	r8,248(sp)
   10a78:	1000e426 	beq	r2,zero,10e0c <___svfprintf_internal_r+0x1e28>
   10a7c:	d8802117 	ldw	r2,132(sp)
   10a80:	1700062e 	bgeu	r2,fp,10a9c <___svfprintf_internal_r+0x1ab8>
   10a84:	01000c04 	movi	r4,48
   10a88:	10c00044 	addi	r3,r2,1
   10a8c:	d8c02115 	stw	r3,132(sp)
   10a90:	11000005 	stb	r4,0(r2)
   10a94:	d8802117 	ldw	r2,132(sp)
   10a98:	173ffb36 	bltu	r2,fp,10a88 <__alt_data_end+0xfc010a88>
   10a9c:	1405c83a 	sub	r2,r2,r16
   10aa0:	d8803315 	stw	r2,204(sp)
   10aa4:	008011c4 	movi	r2,71
   10aa8:	b080c526 	beq	r22,r2,10dc0 <___svfprintf_internal_r+0x1ddc>
   10aac:	00801944 	movi	r2,101
   10ab0:	1441d80e 	bge	r2,r17,11214 <___svfprintf_internal_r+0x2230>
   10ab4:	d8c02617 	ldw	r3,152(sp)
   10ab8:	00801984 	movi	r2,102
   10abc:	d8c03215 	stw	r3,200(sp)
   10ac0:	88813426 	beq	r17,r2,10f94 <___svfprintf_internal_r+0x1fb0>
   10ac4:	d8c03217 	ldw	r3,200(sp)
   10ac8:	d9003317 	ldw	r4,204(sp)
   10acc:	19012516 	blt	r3,r4,10f64 <___svfprintf_internal_r+0x1f80>
   10ad0:	9480004c 	andi	r18,r18,1
   10ad4:	9001841e 	bne	r18,zero,110e8 <___svfprintf_internal_r+0x2104>
   10ad8:	1805883a 	mov	r2,r3
   10adc:	1801cb16 	blt	r3,zero,1120c <___svfprintf_internal_r+0x2228>
   10ae0:	d8c03217 	ldw	r3,200(sp)
   10ae4:	044019c4 	movi	r17,103
   10ae8:	d8c02b15 	stw	r3,172(sp)
   10aec:	df002907 	ldb	fp,164(sp)
   10af0:	e000a61e 	bne	fp,zero,10d8c <___svfprintf_internal_r+0x1da8>
   10af4:	df002783 	ldbu	fp,158(sp)
   10af8:	d8802915 	stw	r2,164(sp)
   10afc:	dc802c17 	ldw	r18,176(sp)
   10b00:	d8002a15 	stw	zero,168(sp)
   10b04:	003af506 	br	f6dc <__alt_data_end+0xfc00f6dc>
   10b08:	040000f4 	movhi	r16,3
   10b0c:	84290904 	addi	r16,r16,-23516
   10b10:	003a7e06 	br	f50c <__alt_data_end+0xfc00f50c>
   10b14:	d9003917 	ldw	r4,228(sp)
   10b18:	04001004 	movi	r16,64
   10b1c:	800b883a 	mov	r5,r16
   10b20:	000de780 	call	de78 <_malloc_r>
   10b24:	d9002d17 	ldw	r4,180(sp)
   10b28:	20800015 	stw	r2,0(r4)
   10b2c:	20800415 	stw	r2,16(r4)
   10b30:	1001d026 	beq	r2,zero,11274 <___svfprintf_internal_r+0x2290>
   10b34:	d8802d17 	ldw	r2,180(sp)
   10b38:	14000515 	stw	r16,20(r2)
   10b3c:	00394406 	br	f050 <__alt_data_end+0xfc00f050>
   10b40:	040000f4 	movhi	r16,3
   10b44:	84290b04 	addi	r16,r16,-23508
   10b48:	003ee106 	br	106d0 <__alt_data_end+0xfc0106d0>
   10b4c:	d9402d17 	ldw	r5,180(sp)
   10b50:	d9801e04 	addi	r6,sp,120
   10b54:	9809883a 	mov	r4,r19
   10b58:	0017f480 	call	17f48 <__ssprint_r>
   10b5c:	103a081e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10b60:	dc402617 	ldw	r17,152(sp)
   10b64:	d8c02017 	ldw	r3,128(sp)
   10b68:	da000404 	addi	r8,sp,16
   10b6c:	003f4306 	br	1087c <__alt_data_end+0xfc01087c>
   10b70:	01400184 	movi	r5,6
   10b74:	d9402a15 	stw	r5,168(sp)
   10b78:	003f9506 	br	109d0 <__alt_data_end+0xfc0109d0>
   10b7c:	d8c02e17 	ldw	r3,184(sp)
   10b80:	1d000017 	ldw	r20,0(r3)
   10b84:	18c00104 	addi	r3,r3,4
   10b88:	d8c02e15 	stw	r3,184(sp)
   10b8c:	a02dd7fa 	srai	r22,r20,31
   10b90:	b005883a 	mov	r2,r22
   10b94:	003a7606 	br	f570 <__alt_data_end+0xfc00f570>
   10b98:	d9002e17 	ldw	r4,184(sp)
   10b9c:	002d883a 	mov	r22,zero
   10ba0:	25000017 	ldw	r20,0(r4)
   10ba4:	21000104 	addi	r4,r4,4
   10ba8:	d9002e15 	stw	r4,184(sp)
   10bac:	003bdd06 	br	fb24 <__alt_data_end+0xfc00fb24>
   10bb0:	9480100c 	andi	r18,r18,64
   10bb4:	90006e26 	beq	r18,zero,10d70 <___svfprintf_internal_r+0x1d8c>
   10bb8:	d9402e17 	ldw	r5,184(sp)
   10bbc:	d8c02f17 	ldw	r3,188(sp)
   10bc0:	28800017 	ldw	r2,0(r5)
   10bc4:	29400104 	addi	r5,r5,4
   10bc8:	d9402e15 	stw	r5,184(sp)
   10bcc:	10c0000d 	sth	r3,0(r2)
   10bd0:	00392f06 	br	f090 <__alt_data_end+0xfc00f090>
   10bd4:	d9402d17 	ldw	r5,180(sp)
   10bd8:	d9801e04 	addi	r6,sp,120
   10bdc:	9809883a 	mov	r4,r19
   10be0:	0017f480 	call	17f48 <__ssprint_r>
   10be4:	1039e61e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10be8:	d8c02017 	ldw	r3,128(sp)
   10bec:	d8801f17 	ldw	r2,124(sp)
   10bf0:	da000404 	addi	r8,sp,16
   10bf4:	d9403317 	ldw	r5,204(sp)
   10bf8:	10800044 	addi	r2,r2,1
   10bfc:	44000015 	stw	r16,0(r8)
   10c00:	28c7883a 	add	r3,r5,r3
   10c04:	003b5506 	br	f95c <__alt_data_end+0xfc00f95c>
   10c08:	8009883a 	mov	r4,r16
   10c0c:	df003e15 	stw	fp,248(sp)
   10c10:	000ef4c0 	call	ef4c <strlen>
   10c14:	d8802b15 	stw	r2,172(sp)
   10c18:	da003e17 	ldw	r8,248(sp)
   10c1c:	103c160e 	bge	r2,zero,fc78 <__alt_data_end+0xfc00fc78>
   10c20:	0005883a 	mov	r2,zero
   10c24:	003c1406 	br	fc78 <__alt_data_end+0xfc00fc78>
   10c28:	00bfffc4 	movi	r2,-1
   10c2c:	0039d906 	br	f394 <__alt_data_end+0xfc00f394>
   10c30:	010000f4 	movhi	r4,3
   10c34:	21291d84 	addi	r4,r4,-23434
   10c38:	d9003515 	stw	r4,212(sp)
   10c3c:	003ae406 	br	f7d0 <__alt_data_end+0xfc00f7d0>
   10c40:	013fffc4 	movi	r4,-1
   10c44:	0039fa06 	br	f430 <__alt_data_end+0xfc00f430>
   10c48:	d9402d17 	ldw	r5,180(sp)
   10c4c:	d9801e04 	addi	r6,sp,120
   10c50:	9809883a 	mov	r4,r19
   10c54:	0017f480 	call	17f48 <__ssprint_r>
   10c58:	1039c91e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10c5c:	d8c02017 	ldw	r3,128(sp)
   10c60:	da000404 	addi	r8,sp,16
   10c64:	003d8406 	br	10278 <__alt_data_end+0xfc010278>
   10c68:	0023883a 	mov	r17,zero
   10c6c:	003d8306 	br	1027c <__alt_data_end+0xfc01027c>
   10c70:	010000f4 	movhi	r4,3
   10c74:	21291984 	addi	r4,r4,-23450
   10c78:	d9002c15 	stw	r4,176(sp)
   10c7c:	d9002c17 	ldw	r4,176(sp)
   10c80:	1c47883a 	add	r3,r3,r17
   10c84:	10800044 	addi	r2,r2,1
   10c88:	41000015 	stw	r4,0(r8)
   10c8c:	44400115 	stw	r17,4(r8)
   10c90:	d8c02015 	stw	r3,128(sp)
   10c94:	d8801f15 	stw	r2,124(sp)
   10c98:	010001c4 	movi	r4,7
   10c9c:	20bfcd16 	blt	r4,r2,10bd4 <__alt_data_end+0xfc010bd4>
   10ca0:	42000204 	addi	r8,r8,8
   10ca4:	003fd306 	br	10bf4 <__alt_data_end+0xfc010bf4>
   10ca8:	d9402d17 	ldw	r5,180(sp)
   10cac:	d9801e04 	addi	r6,sp,120
   10cb0:	9809883a 	mov	r4,r19
   10cb4:	0017f480 	call	17f48 <__ssprint_r>
   10cb8:	1039b11e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10cbc:	d8802617 	ldw	r2,152(sp)
   10cc0:	d8c02017 	ldw	r3,128(sp)
   10cc4:	da000404 	addi	r8,sp,16
   10cc8:	003e1c06 	br	1053c <__alt_data_end+0xfc01053c>
   10ccc:	d8802a17 	ldw	r2,168(sp)
   10cd0:	00c00184 	movi	r3,6
   10cd4:	1880012e 	bgeu	r3,r2,10cdc <___svfprintf_internal_r+0x1cf8>
   10cd8:	1805883a 	mov	r2,r3
   10cdc:	d8802b15 	stw	r2,172(sp)
   10ce0:	1000f316 	blt	r2,zero,110b0 <___svfprintf_internal_r+0x20cc>
   10ce4:	040000f4 	movhi	r16,3
   10ce8:	d8802915 	stw	r2,164(sp)
   10cec:	dd002e15 	stw	r20,184(sp)
   10cf0:	d8002a15 	stw	zero,168(sp)
   10cf4:	d8003215 	stw	zero,200(sp)
   10cf8:	84291704 	addi	r16,r16,-23460
   10cfc:	0039883a 	mov	fp,zero
   10d00:	003a7d06 	br	f6f8 <__alt_data_end+0xfc00f6f8>
   10d04:	010000f4 	movhi	r4,3
   10d08:	21291d84 	addi	r4,r4,-23434
   10d0c:	d9003515 	stw	r4,212(sp)
   10d10:	003b3d06 	br	fa08 <__alt_data_end+0xfc00fa08>
   10d14:	d9402d17 	ldw	r5,180(sp)
   10d18:	d9801e04 	addi	r6,sp,120
   10d1c:	9809883a 	mov	r4,r19
   10d20:	0017f480 	call	17f48 <__ssprint_r>
   10d24:	1039961e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10d28:	d8802617 	ldw	r2,152(sp)
   10d2c:	d9403317 	ldw	r5,204(sp)
   10d30:	d8c02017 	ldw	r3,128(sp)
   10d34:	da000404 	addi	r8,sp,16
   10d38:	2885c83a 	sub	r2,r5,r2
   10d3c:	003e1006 	br	10580 <__alt_data_end+0xfc010580>
   10d40:	00800044 	movi	r2,1
   10d44:	10803fcc 	andi	r2,r2,255
   10d48:	00c00044 	movi	r3,1
   10d4c:	10fa1026 	beq	r2,r3,f590 <__alt_data_end+0xfc00f590>
   10d50:	00c00084 	movi	r3,2
   10d54:	10fb8226 	beq	r2,r3,fb60 <__alt_data_end+0xfc00fb60>
   10d58:	003a4206 	br	f664 <__alt_data_end+0xfc00f664>
   10d5c:	0021883a 	mov	r16,zero
   10d60:	003e0806 	br	10584 <__alt_data_end+0xfc010584>
   10d64:	07000b44 	movi	fp,45
   10d68:	df002785 	stb	fp,158(sp)
   10d6c:	0039e306 	br	f4fc <__alt_data_end+0xfc00f4fc>
   10d70:	d9002e17 	ldw	r4,184(sp)
   10d74:	d9402f17 	ldw	r5,188(sp)
   10d78:	20800017 	ldw	r2,0(r4)
   10d7c:	21000104 	addi	r4,r4,4
   10d80:	d9002e15 	stw	r4,184(sp)
   10d84:	11400015 	stw	r5,0(r2)
   10d88:	0038c106 	br	f090 <__alt_data_end+0xfc00f090>
   10d8c:	00c00b44 	movi	r3,45
   10d90:	d8c02785 	stb	r3,158(sp)
   10d94:	d8802915 	stw	r2,164(sp)
   10d98:	dc802c17 	ldw	r18,176(sp)
   10d9c:	d8002a15 	stw	zero,168(sp)
   10da0:	07000b44 	movi	fp,45
   10da4:	003a5106 	br	f6ec <__alt_data_end+0xfc00f6ec>
   10da8:	9080004c 	andi	r2,r18,1
   10dac:	1000941e 	bne	r2,zero,11000 <___svfprintf_internal_r+0x201c>
   10db0:	d8802117 	ldw	r2,132(sp)
   10db4:	1405c83a 	sub	r2,r2,r16
   10db8:	d8803315 	stw	r2,204(sp)
   10dbc:	b441151e 	bne	r22,r17,11214 <___svfprintf_internal_r+0x2230>
   10dc0:	dd802617 	ldw	r22,152(sp)
   10dc4:	00bfff44 	movi	r2,-3
   10dc8:	b0801a16 	blt	r22,r2,10e34 <___svfprintf_internal_r+0x1e50>
   10dcc:	d9402a17 	ldw	r5,168(sp)
   10dd0:	2d801816 	blt	r5,r22,10e34 <___svfprintf_internal_r+0x1e50>
   10dd4:	dd803215 	stw	r22,200(sp)
   10dd8:	003f3a06 	br	10ac4 <__alt_data_end+0xfc010ac4>
   10ddc:	1025883a 	mov	r18,r2
   10de0:	0039883a 	mov	fp,zero
   10de4:	00800084 	movi	r2,2
   10de8:	003fd606 	br	10d44 <__alt_data_end+0xfc010d44>
   10dec:	9080004c 	andi	r2,r18,1
   10df0:	103f191e 	bne	r2,zero,10a58 <__alt_data_end+0xfc010a58>
   10df4:	d8802117 	ldw	r2,132(sp)
   10df8:	003f2806 	br	10a9c <__alt_data_end+0xfc010a9c>
   10dfc:	010000f4 	movhi	r4,3
   10e00:	21291984 	addi	r4,r4,-23450
   10e04:	d9002c15 	stw	r4,176(sp)
   10e08:	003c7c06 	br	fffc <__alt_data_end+0xfc00fffc>
   10e0c:	e005883a 	mov	r2,fp
   10e10:	003f2206 	br	10a9c <__alt_data_end+0xfc010a9c>
   10e14:	d9002a17 	ldw	r4,168(sp)
   10e18:	df002783 	ldbu	fp,158(sp)
   10e1c:	dd002e15 	stw	r20,184(sp)
   10e20:	d9002915 	stw	r4,164(sp)
   10e24:	d9002b15 	stw	r4,172(sp)
   10e28:	d8002a15 	stw	zero,168(sp)
   10e2c:	d8003215 	stw	zero,200(sp)
   10e30:	003a2a06 	br	f6dc <__alt_data_end+0xfc00f6dc>
   10e34:	8c7fff84 	addi	r17,r17,-2
   10e38:	b5bfffc4 	addi	r22,r22,-1
   10e3c:	dd802615 	stw	r22,152(sp)
   10e40:	dc4022c5 	stb	r17,139(sp)
   10e44:	b000c316 	blt	r22,zero,11154 <___svfprintf_internal_r+0x2170>
   10e48:	00800ac4 	movi	r2,43
   10e4c:	d8802305 	stb	r2,140(sp)
   10e50:	00800244 	movi	r2,9
   10e54:	15806e16 	blt	r2,r22,11010 <___svfprintf_internal_r+0x202c>
   10e58:	00800c04 	movi	r2,48
   10e5c:	b5800c04 	addi	r22,r22,48
   10e60:	d8802345 	stb	r2,141(sp)
   10e64:	dd802385 	stb	r22,142(sp)
   10e68:	d88023c4 	addi	r2,sp,143
   10e6c:	df0022c4 	addi	fp,sp,139
   10e70:	d8c03317 	ldw	r3,204(sp)
   10e74:	1739c83a 	sub	fp,r2,fp
   10e78:	d9003317 	ldw	r4,204(sp)
   10e7c:	e0c7883a 	add	r3,fp,r3
   10e80:	df003b15 	stw	fp,236(sp)
   10e84:	d8c02b15 	stw	r3,172(sp)
   10e88:	00800044 	movi	r2,1
   10e8c:	1100b70e 	bge	r2,r4,1116c <___svfprintf_internal_r+0x2188>
   10e90:	d8c02b17 	ldw	r3,172(sp)
   10e94:	18c00044 	addi	r3,r3,1
   10e98:	d8c02b15 	stw	r3,172(sp)
   10e9c:	1805883a 	mov	r2,r3
   10ea0:	1800b016 	blt	r3,zero,11164 <___svfprintf_internal_r+0x2180>
   10ea4:	d8003215 	stw	zero,200(sp)
   10ea8:	003f1006 	br	10aec <__alt_data_end+0xfc010aec>
   10eac:	d8802a17 	ldw	r2,168(sp)
   10eb0:	103ec71e 	bne	r2,zero,109d0 <__alt_data_end+0xfc0109d0>
   10eb4:	dc002a15 	stw	r16,168(sp)
   10eb8:	003ec506 	br	109d0 <__alt_data_end+0xfc0109d0>
   10ebc:	d9402d17 	ldw	r5,180(sp)
   10ec0:	d9801e04 	addi	r6,sp,120
   10ec4:	9809883a 	mov	r4,r19
   10ec8:	0017f480 	call	17f48 <__ssprint_r>
   10ecc:	10392c1e 	bne	r2,zero,f380 <__alt_data_end+0xfc00f380>
   10ed0:	dc402617 	ldw	r17,152(sp)
   10ed4:	d8c02017 	ldw	r3,128(sp)
   10ed8:	d8801f17 	ldw	r2,124(sp)
   10edc:	da000404 	addi	r8,sp,16
   10ee0:	003e7706 	br	108c0 <__alt_data_end+0xfc0108c0>
   10ee4:	182f883a 	mov	r23,r3
   10ee8:	d8002a15 	stw	zero,168(sp)
   10eec:	00389306 	br	f13c <__alt_data_end+0xfc00f13c>
   10ef0:	d8c02a17 	ldw	r3,168(sp)
   10ef4:	d8802104 	addi	r2,sp,132
   10ef8:	d8800315 	stw	r2,12(sp)
   10efc:	d9403617 	ldw	r5,216(sp)
   10f00:	d8802504 	addi	r2,sp,148
   10f04:	d8800215 	stw	r2,8(sp)
   10f08:	d8802604 	addi	r2,sp,152
   10f0c:	d8c00015 	stw	r3,0(sp)
   10f10:	9809883a 	mov	r4,r19
   10f14:	d8800115 	stw	r2,4(sp)
   10f18:	01c000c4 	movi	r7,3
   10f1c:	a00d883a 	mov	r6,r20
   10f20:	da003e15 	stw	r8,248(sp)
   10f24:	00139d80 	call	139d8 <_dtoa_r>
   10f28:	d9002a17 	ldw	r4,168(sp)
   10f2c:	da003e17 	ldw	r8,248(sp)
   10f30:	1021883a 	mov	r16,r2
   10f34:	1139883a 	add	fp,r2,r4
   10f38:	2007883a 	mov	r3,r4
   10f3c:	81000007 	ldb	r4,0(r16)
   10f40:	00800c04 	movi	r2,48
   10f44:	20806f26 	beq	r4,r2,11104 <___svfprintf_internal_r+0x2120>
   10f48:	d8c02617 	ldw	r3,152(sp)
   10f4c:	e0f9883a 	add	fp,fp,r3
   10f50:	003ec206 	br	10a5c <__alt_data_end+0xfc010a5c>
   10f54:	00c00b44 	movi	r3,45
   10f58:	2520003c 	xorhi	r20,r4,32768
   10f5c:	d8c02905 	stb	r3,164(sp)
   10f60:	003ea106 	br	109e8 <__alt_data_end+0xfc0109e8>
   10f64:	d8c03217 	ldw	r3,200(sp)
   10f68:	00c0890e 	bge	zero,r3,11190 <___svfprintf_internal_r+0x21ac>
   10f6c:	00800044 	movi	r2,1
   10f70:	d9003317 	ldw	r4,204(sp)
   10f74:	1105883a 	add	r2,r2,r4
   10f78:	d8802b15 	stw	r2,172(sp)
   10f7c:	10005f16 	blt	r2,zero,110fc <___svfprintf_internal_r+0x2118>
   10f80:	044019c4 	movi	r17,103
   10f84:	003ed906 	br	10aec <__alt_data_end+0xfc010aec>
   10f88:	d9002a17 	ldw	r4,168(sp)
   10f8c:	20c00044 	addi	r3,r4,1
   10f90:	003e9c06 	br	10a04 <__alt_data_end+0xfc010a04>
   10f94:	d9002a17 	ldw	r4,168(sp)
   10f98:	00c0680e 	bge	zero,r3,1113c <___svfprintf_internal_r+0x2158>
   10f9c:	2000461e 	bne	r4,zero,110b8 <___svfprintf_internal_r+0x20d4>
   10fa0:	9480004c 	andi	r18,r18,1
   10fa4:	9000441e 	bne	r18,zero,110b8 <___svfprintf_internal_r+0x20d4>
   10fa8:	1805883a 	mov	r2,r3
   10fac:	1800a116 	blt	r3,zero,11234 <___svfprintf_internal_r+0x2250>
   10fb0:	d8c03217 	ldw	r3,200(sp)
   10fb4:	d8c02b15 	stw	r3,172(sp)
   10fb8:	003ecc06 	br	10aec <__alt_data_end+0xfc010aec>
   10fbc:	d9402a17 	ldw	r5,168(sp)
   10fc0:	d8802104 	addi	r2,sp,132
   10fc4:	d8800315 	stw	r2,12(sp)
   10fc8:	d9400015 	stw	r5,0(sp)
   10fcc:	d8802504 	addi	r2,sp,148
   10fd0:	d9403617 	ldw	r5,216(sp)
   10fd4:	d8800215 	stw	r2,8(sp)
   10fd8:	d8802604 	addi	r2,sp,152
   10fdc:	d8800115 	stw	r2,4(sp)
   10fe0:	01c000c4 	movi	r7,3
   10fe4:	a00d883a 	mov	r6,r20
   10fe8:	9809883a 	mov	r4,r19
   10fec:	da003e15 	stw	r8,248(sp)
   10ff0:	00139d80 	call	139d8 <_dtoa_r>
   10ff4:	d8c02a17 	ldw	r3,168(sp)
   10ff8:	da003e17 	ldw	r8,248(sp)
   10ffc:	1021883a 	mov	r16,r2
   11000:	00801184 	movi	r2,70
   11004:	80f9883a 	add	fp,r16,r3
   11008:	88bfcc26 	beq	r17,r2,10f3c <__alt_data_end+0xfc010f3c>
   1100c:	003e9306 	br	10a5c <__alt_data_end+0xfc010a5c>
   11010:	df0022c4 	addi	fp,sp,139
   11014:	dc002a15 	stw	r16,168(sp)
   11018:	9829883a 	mov	r20,r19
   1101c:	e021883a 	mov	r16,fp
   11020:	4027883a 	mov	r19,r8
   11024:	b009883a 	mov	r4,r22
   11028:	01400284 	movi	r5,10
   1102c:	000ccd00 	call	ccd0 <__modsi3>
   11030:	10800c04 	addi	r2,r2,48
   11034:	843fffc4 	addi	r16,r16,-1
   11038:	b009883a 	mov	r4,r22
   1103c:	01400284 	movi	r5,10
   11040:	80800005 	stb	r2,0(r16)
   11044:	000cc4c0 	call	cc4c <__divsi3>
   11048:	102d883a 	mov	r22,r2
   1104c:	00800244 	movi	r2,9
   11050:	15bff416 	blt	r2,r22,11024 <__alt_data_end+0xfc011024>
   11054:	9811883a 	mov	r8,r19
   11058:	b0800c04 	addi	r2,r22,48
   1105c:	a027883a 	mov	r19,r20
   11060:	8029883a 	mov	r20,r16
   11064:	a17fffc4 	addi	r5,r20,-1
   11068:	a0bfffc5 	stb	r2,-1(r20)
   1106c:	dc002a17 	ldw	r16,168(sp)
   11070:	2f00782e 	bgeu	r5,fp,11254 <___svfprintf_internal_r+0x2270>
   11074:	d9c02384 	addi	r7,sp,142
   11078:	3d0fc83a 	sub	r7,r7,r20
   1107c:	d9002344 	addi	r4,sp,141
   11080:	e1cf883a 	add	r7,fp,r7
   11084:	00000106 	br	1108c <___svfprintf_internal_r+0x20a8>
   11088:	28800003 	ldbu	r2,0(r5)
   1108c:	20800005 	stb	r2,0(r4)
   11090:	21000044 	addi	r4,r4,1
   11094:	29400044 	addi	r5,r5,1
   11098:	21fffb1e 	bne	r4,r7,11088 <__alt_data_end+0xfc011088>
   1109c:	d8802304 	addi	r2,sp,140
   110a0:	1505c83a 	sub	r2,r2,r20
   110a4:	d8c02344 	addi	r3,sp,141
   110a8:	1885883a 	add	r2,r3,r2
   110ac:	003f7006 	br	10e70 <__alt_data_end+0xfc010e70>
   110b0:	0005883a 	mov	r2,zero
   110b4:	003f0b06 	br	10ce4 <__alt_data_end+0xfc010ce4>
   110b8:	d9002a17 	ldw	r4,168(sp)
   110bc:	d8c03217 	ldw	r3,200(sp)
   110c0:	20800044 	addi	r2,r4,1
   110c4:	1885883a 	add	r2,r3,r2
   110c8:	d8802b15 	stw	r2,172(sp)
   110cc:	103e870e 	bge	r2,zero,10aec <__alt_data_end+0xfc010aec>
   110d0:	0005883a 	mov	r2,zero
   110d4:	003e8506 	br	10aec <__alt_data_end+0xfc010aec>
   110d8:	010000f4 	movhi	r4,3
   110dc:	21291984 	addi	r4,r4,-23450
   110e0:	d9002c15 	stw	r4,176(sp)
   110e4:	003cc506 	br	103fc <__alt_data_end+0xfc0103fc>
   110e8:	d8c03217 	ldw	r3,200(sp)
   110ec:	18c00044 	addi	r3,r3,1
   110f0:	d8c02b15 	stw	r3,172(sp)
   110f4:	1805883a 	mov	r2,r3
   110f8:	183fa10e 	bge	r3,zero,10f80 <__alt_data_end+0xfc010f80>
   110fc:	0005883a 	mov	r2,zero
   11100:	003f9f06 	br	10f80 <__alt_data_end+0xfc010f80>
   11104:	d9003617 	ldw	r4,216(sp)
   11108:	000d883a 	mov	r6,zero
   1110c:	000f883a 	mov	r7,zero
   11110:	a00b883a 	mov	r5,r20
   11114:	d8c03d15 	stw	r3,244(sp)
   11118:	da003e15 	stw	r8,248(sp)
   1111c:	001d3380 	call	1d338 <__eqdf2>
   11120:	d8c03d17 	ldw	r3,244(sp)
   11124:	da003e17 	ldw	r8,248(sp)
   11128:	103f8726 	beq	r2,zero,10f48 <__alt_data_end+0xfc010f48>
   1112c:	00800044 	movi	r2,1
   11130:	10c7c83a 	sub	r3,r2,r3
   11134:	d8c02615 	stw	r3,152(sp)
   11138:	003f8406 	br	10f4c <__alt_data_end+0xfc010f4c>
   1113c:	20000e1e 	bne	r4,zero,11178 <___svfprintf_internal_r+0x2194>
   11140:	9480004c 	andi	r18,r18,1
   11144:	90000c1e 	bne	r18,zero,11178 <___svfprintf_internal_r+0x2194>
   11148:	00800044 	movi	r2,1
   1114c:	d8802b15 	stw	r2,172(sp)
   11150:	003e6606 	br	10aec <__alt_data_end+0xfc010aec>
   11154:	00800b44 	movi	r2,45
   11158:	05adc83a 	sub	r22,zero,r22
   1115c:	d8802305 	stb	r2,140(sp)
   11160:	003f3b06 	br	10e50 <__alt_data_end+0xfc010e50>
   11164:	0005883a 	mov	r2,zero
   11168:	003f4e06 	br	10ea4 <__alt_data_end+0xfc010ea4>
   1116c:	90a4703a 	and	r18,r18,r2
   11170:	903f4a26 	beq	r18,zero,10e9c <__alt_data_end+0xfc010e9c>
   11174:	003f4606 	br	10e90 <__alt_data_end+0xfc010e90>
   11178:	d8c02a17 	ldw	r3,168(sp)
   1117c:	18c00084 	addi	r3,r3,2
   11180:	d8c02b15 	stw	r3,172(sp)
   11184:	1805883a 	mov	r2,r3
   11188:	183e580e 	bge	r3,zero,10aec <__alt_data_end+0xfc010aec>
   1118c:	003fd006 	br	110d0 <__alt_data_end+0xfc0110d0>
   11190:	00800084 	movi	r2,2
   11194:	10c5c83a 	sub	r2,r2,r3
   11198:	003f7506 	br	10f70 <__alt_data_end+0xfc010f70>
   1119c:	d9402e17 	ldw	r5,184(sp)
   111a0:	d9002e17 	ldw	r4,184(sp)
   111a4:	bc400043 	ldbu	r17,1(r23)
   111a8:	29400017 	ldw	r5,0(r5)
   111ac:	20800104 	addi	r2,r4,4
   111b0:	d8802e15 	stw	r2,184(sp)
   111b4:	d9402a15 	stw	r5,168(sp)
   111b8:	182f883a 	mov	r23,r3
   111bc:	283df10e 	bge	r5,zero,10984 <__alt_data_end+0xfc010984>
   111c0:	8c403fcc 	andi	r17,r17,255
   111c4:	017fffc4 	movi	r5,-1
   111c8:	8c40201c 	xori	r17,r17,128
   111cc:	d9402a15 	stw	r5,168(sp)
   111d0:	8c7fe004 	addi	r17,r17,-128
   111d4:	0037d806 	br	f138 <__alt_data_end+0xfc00f138>
   111d8:	9080004c 	andi	r2,r18,1
   111dc:	0039883a 	mov	fp,zero
   111e0:	10000726 	beq	r2,zero,11200 <___svfprintf_internal_r+0x221c>
   111e4:	d8c02817 	ldw	r3,160(sp)
   111e8:	dc001dc4 	addi	r16,sp,119
   111ec:	00800c04 	movi	r2,48
   111f0:	1c07c83a 	sub	r3,r3,r16
   111f4:	d8801dc5 	stb	r2,119(sp)
   111f8:	d8c02b15 	stw	r3,172(sp)
   111fc:	00393106 	br	f6c4 <__alt_data_end+0xfc00f6c4>
   11200:	d8002b15 	stw	zero,172(sp)
   11204:	dc001e04 	addi	r16,sp,120
   11208:	00392e06 	br	f6c4 <__alt_data_end+0xfc00f6c4>
   1120c:	0005883a 	mov	r2,zero
   11210:	003e3306 	br	10ae0 <__alt_data_end+0xfc010ae0>
   11214:	dd802617 	ldw	r22,152(sp)
   11218:	003f0706 	br	10e38 <__alt_data_end+0xfc010e38>
   1121c:	d8c02b03 	ldbu	r3,172(sp)
   11220:	d8c02785 	stb	r3,158(sp)
   11224:	003a3506 	br	fafc <__alt_data_end+0xfc00fafc>
   11228:	d8c02b03 	ldbu	r3,172(sp)
   1122c:	d8c02785 	stb	r3,158(sp)
   11230:	003a1706 	br	fa90 <__alt_data_end+0xfc00fa90>
   11234:	0005883a 	mov	r2,zero
   11238:	003f5d06 	br	10fb0 <__alt_data_end+0xfc010fb0>
   1123c:	d8c02b03 	ldbu	r3,172(sp)
   11240:	d8c02785 	stb	r3,158(sp)
   11244:	0038f306 	br	f614 <__alt_data_end+0xfc00f614>
   11248:	d8c02b03 	ldbu	r3,172(sp)
   1124c:	d8c02785 	stb	r3,158(sp)
   11250:	0038be06 	br	f54c <__alt_data_end+0xfc00f54c>
   11254:	d8802344 	addi	r2,sp,141
   11258:	003f0506 	br	10e70 <__alt_data_end+0xfc010e70>
   1125c:	d8c02b03 	ldbu	r3,172(sp)
   11260:	d8c02785 	stb	r3,158(sp)
   11264:	00388b06 	br	f494 <__alt_data_end+0xfc00f494>
   11268:	d8c02b03 	ldbu	r3,172(sp)
   1126c:	d8c02785 	stb	r3,158(sp)
   11270:	003ad706 	br	fdd0 <__alt_data_end+0xfc00fdd0>
   11274:	d9403917 	ldw	r5,228(sp)
   11278:	00800304 	movi	r2,12
   1127c:	28800015 	stw	r2,0(r5)
   11280:	00bfffc4 	movi	r2,-1
   11284:	00384306 	br	f394 <__alt_data_end+0xfc00f394>
   11288:	d8c02b03 	ldbu	r3,172(sp)
   1128c:	d8c02785 	stb	r3,158(sp)
   11290:	003ab606 	br	fd6c <__alt_data_end+0xfc00fd6c>
   11294:	d8c02b03 	ldbu	r3,172(sp)
   11298:	d8c02785 	stb	r3,158(sp)
   1129c:	003a8906 	br	fcc4 <__alt_data_end+0xfc00fcc4>

000112a0 <_times_r>:
   112a0:	2809883a 	mov	r4,r5
   112a4:	001f3501 	jmpi	1f350 <times>

000112a8 <___vfprintf_internal_r>:
   112a8:	deffb804 	addi	sp,sp,-288
   112ac:	dfc04715 	stw	ra,284(sp)
   112b0:	ddc04515 	stw	r23,276(sp)
   112b4:	dd404315 	stw	r21,268(sp)
   112b8:	d9002d15 	stw	r4,180(sp)
   112bc:	282f883a 	mov	r23,r5
   112c0:	302b883a 	mov	r21,r6
   112c4:	d9c02e15 	stw	r7,184(sp)
   112c8:	df004615 	stw	fp,280(sp)
   112cc:	dd804415 	stw	r22,272(sp)
   112d0:	dd004215 	stw	r20,264(sp)
   112d4:	dcc04115 	stw	r19,260(sp)
   112d8:	dc804015 	stw	r18,256(sp)
   112dc:	dc403f15 	stw	r17,252(sp)
   112e0:	dc003e15 	stw	r16,248(sp)
   112e4:	00161e80 	call	161e8 <_localeconv_r>
   112e8:	10800017 	ldw	r2,0(r2)
   112ec:	1009883a 	mov	r4,r2
   112f0:	d8803415 	stw	r2,208(sp)
   112f4:	000ef4c0 	call	ef4c <strlen>
   112f8:	d8803715 	stw	r2,220(sp)
   112fc:	d8802d17 	ldw	r2,180(sp)
   11300:	10000226 	beq	r2,zero,1130c <___vfprintf_internal_r+0x64>
   11304:	10800e17 	ldw	r2,56(r2)
   11308:	1000fb26 	beq	r2,zero,116f8 <___vfprintf_internal_r+0x450>
   1130c:	b880030b 	ldhu	r2,12(r23)
   11310:	10c8000c 	andi	r3,r2,8192
   11314:	1800061e 	bne	r3,zero,11330 <___vfprintf_internal_r+0x88>
   11318:	b9001917 	ldw	r4,100(r23)
   1131c:	00f7ffc4 	movi	r3,-8193
   11320:	10880014 	ori	r2,r2,8192
   11324:	20c6703a 	and	r3,r4,r3
   11328:	b880030d 	sth	r2,12(r23)
   1132c:	b8c01915 	stw	r3,100(r23)
   11330:	10c0020c 	andi	r3,r2,8
   11334:	1800c326 	beq	r3,zero,11644 <___vfprintf_internal_r+0x39c>
   11338:	b8c00417 	ldw	r3,16(r23)
   1133c:	1800c126 	beq	r3,zero,11644 <___vfprintf_internal_r+0x39c>
   11340:	1080068c 	andi	r2,r2,26
   11344:	00c00284 	movi	r3,10
   11348:	10c0c626 	beq	r2,r3,11664 <___vfprintf_internal_r+0x3bc>
   1134c:	d8c00404 	addi	r3,sp,16
   11350:	050000f4 	movhi	r20,3
   11354:	d9001e04 	addi	r4,sp,120
   11358:	a5292184 	addi	r20,r20,-23418
   1135c:	d8c01e15 	stw	r3,120(sp)
   11360:	d8002015 	stw	zero,128(sp)
   11364:	d8001f15 	stw	zero,124(sp)
   11368:	d8003315 	stw	zero,204(sp)
   1136c:	d8003615 	stw	zero,216(sp)
   11370:	d8003815 	stw	zero,224(sp)
   11374:	1811883a 	mov	r8,r3
   11378:	d8003915 	stw	zero,228(sp)
   1137c:	d8003a15 	stw	zero,232(sp)
   11380:	d8002f15 	stw	zero,188(sp)
   11384:	d9002815 	stw	r4,160(sp)
   11388:	a8800007 	ldb	r2,0(r21)
   1138c:	10028b26 	beq	r2,zero,11dbc <___vfprintf_internal_r+0xb14>
   11390:	00c00944 	movi	r3,37
   11394:	a823883a 	mov	r17,r21
   11398:	10c0021e 	bne	r2,r3,113a4 <___vfprintf_internal_r+0xfc>
   1139c:	00001406 	br	113f0 <___vfprintf_internal_r+0x148>
   113a0:	10c00326 	beq	r2,r3,113b0 <___vfprintf_internal_r+0x108>
   113a4:	8c400044 	addi	r17,r17,1
   113a8:	88800007 	ldb	r2,0(r17)
   113ac:	103ffc1e 	bne	r2,zero,113a0 <__alt_data_end+0xfc0113a0>
   113b0:	8d61c83a 	sub	r16,r17,r21
   113b4:	80000e26 	beq	r16,zero,113f0 <___vfprintf_internal_r+0x148>
   113b8:	d8c02017 	ldw	r3,128(sp)
   113bc:	d8801f17 	ldw	r2,124(sp)
   113c0:	45400015 	stw	r21,0(r8)
   113c4:	1c07883a 	add	r3,r3,r16
   113c8:	10800044 	addi	r2,r2,1
   113cc:	d8c02015 	stw	r3,128(sp)
   113d0:	44000115 	stw	r16,4(r8)
   113d4:	d8801f15 	stw	r2,124(sp)
   113d8:	00c001c4 	movi	r3,7
   113dc:	1880a916 	blt	r3,r2,11684 <___vfprintf_internal_r+0x3dc>
   113e0:	42000204 	addi	r8,r8,8
   113e4:	d9402f17 	ldw	r5,188(sp)
   113e8:	2c0b883a 	add	r5,r5,r16
   113ec:	d9402f15 	stw	r5,188(sp)
   113f0:	88800007 	ldb	r2,0(r17)
   113f4:	1000aa26 	beq	r2,zero,116a0 <___vfprintf_internal_r+0x3f8>
   113f8:	8d400044 	addi	r21,r17,1
   113fc:	8c400047 	ldb	r17,1(r17)
   11400:	0021883a 	mov	r16,zero
   11404:	00bfffc4 	movi	r2,-1
   11408:	0025883a 	mov	r18,zero
   1140c:	dc002905 	stb	r16,164(sp)
   11410:	d8002785 	stb	zero,158(sp)
   11414:	d8002b05 	stb	zero,172(sp)
   11418:	d8802a15 	stw	r2,168(sp)
   1141c:	d8003115 	stw	zero,196(sp)
   11420:	04c01604 	movi	r19,88
   11424:	05800244 	movi	r22,9
   11428:	9021883a 	mov	r16,r18
   1142c:	4039883a 	mov	fp,r8
   11430:	ad400044 	addi	r21,r21,1
   11434:	88bff804 	addi	r2,r17,-32
   11438:	98833236 	bltu	r19,r2,12104 <___vfprintf_internal_r+0xe5c>
   1143c:	100490ba 	slli	r2,r2,2
   11440:	00c00074 	movhi	r3,1
   11444:	18c51504 	addi	r3,r3,5204
   11448:	10c5883a 	add	r2,r2,r3
   1144c:	10800017 	ldw	r2,0(r2)
   11450:	1000683a 	jmp	r2
   11454:	00011ffc 	xorhi	zero,zero,1151
   11458:	00012104 	movi	zero,1156
   1145c:	00012104 	movi	zero,1156
   11460:	0001201c 	xori	zero,zero,1152
   11464:	00012104 	movi	zero,1156
   11468:	00012104 	movi	zero,1156
   1146c:	00012104 	movi	zero,1156
   11470:	00012104 	movi	zero,1156
   11474:	00012104 	movi	zero,1156
   11478:	00012104 	movi	zero,1156
   1147c:	00011704 	movi	zero,1116
   11480:	00011f0c 	andi	zero,zero,1148
   11484:	00012104 	movi	zero,1156
   11488:	000115c8 	cmpgei	zero,zero,1111
   1148c:	00011728 	cmpgeui	zero,zero,1116
   11490:	00012104 	movi	zero,1156
   11494:	00011778 	rdprs	zero,zero,1117
   11498:	00011784 	movi	zero,1118
   1149c:	00011784 	movi	zero,1118
   114a0:	00011784 	movi	zero,1118
   114a4:	00011784 	movi	zero,1118
   114a8:	00011784 	movi	zero,1118
   114ac:	00011784 	movi	zero,1118
   114b0:	00011784 	movi	zero,1118
   114b4:	00011784 	movi	zero,1118
   114b8:	00011784 	movi	zero,1118
   114bc:	00012104 	movi	zero,1156
   114c0:	00012104 	movi	zero,1156
   114c4:	00012104 	movi	zero,1156
   114c8:	00012104 	movi	zero,1156
   114cc:	00012104 	movi	zero,1156
   114d0:	00012104 	movi	zero,1156
   114d4:	00012104 	movi	zero,1156
   114d8:	00012104 	movi	zero,1156
   114dc:	00012104 	movi	zero,1156
   114e0:	00012104 	movi	zero,1156
   114e4:	000117c0 	call	117c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1e8>
   114e8:	00011888 	cmpgei	zero,zero,1122
   114ec:	00012104 	movi	zero,1156
   114f0:	00011888 	cmpgei	zero,zero,1122
   114f4:	00012104 	movi	zero,1156
   114f8:	00012104 	movi	zero,1156
   114fc:	00012104 	movi	zero,1156
   11500:	00012104 	movi	zero,1156
   11504:	00011934 	movhi	zero,1124
   11508:	00012104 	movi	zero,1156
   1150c:	00012104 	movi	zero,1156
   11510:	00011940 	call	1194 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x200>
   11514:	00012104 	movi	zero,1156
   11518:	00012104 	movi	zero,1156
   1151c:	00012104 	movi	zero,1156
   11520:	00012104 	movi	zero,1156
   11524:	00012104 	movi	zero,1156
   11528:	00011dc4 	movi	zero,1143
   1152c:	00012104 	movi	zero,1156
   11530:	00012104 	movi	zero,1156
   11534:	00011e30 	cmpltui	zero,zero,1144
   11538:	00012104 	movi	zero,1156
   1153c:	00012104 	movi	zero,1156
   11540:	00012104 	movi	zero,1156
   11544:	00012104 	movi	zero,1156
   11548:	00012104 	movi	zero,1156
   1154c:	00012104 	movi	zero,1156
   11550:	00012104 	movi	zero,1156
   11554:	00012104 	movi	zero,1156
   11558:	00012104 	movi	zero,1156
   1155c:	00012104 	movi	zero,1156
   11560:	000120a8 	cmpgeui	zero,zero,1154
   11564:	00012028 	cmpgeui	zero,zero,1152
   11568:	00011888 	cmpgei	zero,zero,1122
   1156c:	00011888 	cmpgei	zero,zero,1122
   11570:	00011888 	cmpgei	zero,zero,1122
   11574:	00012048 	cmpgei	zero,zero,1153
   11578:	00012028 	cmpgeui	zero,zero,1152
   1157c:	00012104 	movi	zero,1156
   11580:	00012104 	movi	zero,1156
   11584:	00012054 	movui	zero,1153
   11588:	00012104 	movi	zero,1156
   1158c:	00012068 	cmpgeui	zero,zero,1153
   11590:	00011eec 	andhi	zero,zero,1147
   11594:	000115d4 	movui	zero,1111
   11598:	00011f24 	muli	zero,zero,1148
   1159c:	00012104 	movi	zero,1156
   115a0:	00011f30 	cmpltui	zero,zero,1148
   115a4:	00012104 	movi	zero,1156
   115a8:	00011f94 	movui	zero,1150
   115ac:	00012104 	movi	zero,1156
   115b0:	00012104 	movi	zero,1156
   115b4:	00011fb4 	movhi	zero,1150
   115b8:	d8c03117 	ldw	r3,196(sp)
   115bc:	d8802e15 	stw	r2,184(sp)
   115c0:	00c7c83a 	sub	r3,zero,r3
   115c4:	d8c03115 	stw	r3,196(sp)
   115c8:	84000114 	ori	r16,r16,4
   115cc:	ac400007 	ldb	r17,0(r21)
   115d0:	003f9706 	br	11430 <__alt_data_end+0xfc011430>
   115d4:	00800c04 	movi	r2,48
   115d8:	d8802705 	stb	r2,156(sp)
   115dc:	00801e04 	movi	r2,120
   115e0:	d8802745 	stb	r2,157(sp)
   115e4:	d9002a17 	ldw	r4,168(sp)
   115e8:	d8802e17 	ldw	r2,184(sp)
   115ec:	d8002785 	stb	zero,158(sp)
   115f0:	e011883a 	mov	r8,fp
   115f4:	10c00104 	addi	r3,r2,4
   115f8:	14c00017 	ldw	r19,0(r2)
   115fc:	002d883a 	mov	r22,zero
   11600:	80800094 	ori	r2,r16,2
   11604:	2002ca16 	blt	r4,zero,12130 <___vfprintf_internal_r+0xe88>
   11608:	00bfdfc4 	movi	r2,-129
   1160c:	80a4703a 	and	r18,r16,r2
   11610:	d8c02e15 	stw	r3,184(sp)
   11614:	94800094 	ori	r18,r18,2
   11618:	9802b41e 	bne	r19,zero,120ec <___vfprintf_internal_r+0xe44>
   1161c:	014000f4 	movhi	r5,3
   11620:	29691204 	addi	r5,r5,-23480
   11624:	d9403915 	stw	r5,228(sp)
   11628:	04401e04 	movi	r17,120
   1162c:	d8802a17 	ldw	r2,168(sp)
   11630:	0039883a 	mov	fp,zero
   11634:	1001fa26 	beq	r2,zero,11e20 <___vfprintf_internal_r+0xb78>
   11638:	0027883a 	mov	r19,zero
   1163c:	002d883a 	mov	r22,zero
   11640:	00021906 	br	11ea8 <___vfprintf_internal_r+0xc00>
   11644:	d9002d17 	ldw	r4,180(sp)
   11648:	b80b883a 	mov	r5,r23
   1164c:	001365c0 	call	1365c <__swsetup_r>
   11650:	1005dc1e 	bne	r2,zero,12dc4 <___vfprintf_internal_r+0x1b1c>
   11654:	b880030b 	ldhu	r2,12(r23)
   11658:	00c00284 	movi	r3,10
   1165c:	1080068c 	andi	r2,r2,26
   11660:	10ff3a1e 	bne	r2,r3,1134c <__alt_data_end+0xfc01134c>
   11664:	b880038f 	ldh	r2,14(r23)
   11668:	103f3816 	blt	r2,zero,1134c <__alt_data_end+0xfc01134c>
   1166c:	d9c02e17 	ldw	r7,184(sp)
   11670:	d9002d17 	ldw	r4,180(sp)
   11674:	a80d883a 	mov	r6,r21
   11678:	b80b883a 	mov	r5,r23
   1167c:	00135a00 	call	135a0 <__sbprintf>
   11680:	00001106 	br	116c8 <___vfprintf_internal_r+0x420>
   11684:	d9002d17 	ldw	r4,180(sp)
   11688:	d9801e04 	addi	r6,sp,120
   1168c:	b80b883a 	mov	r5,r23
   11690:	00195b40 	call	195b4 <__sprint_r>
   11694:	1000081e 	bne	r2,zero,116b8 <___vfprintf_internal_r+0x410>
   11698:	da000404 	addi	r8,sp,16
   1169c:	003f5106 	br	113e4 <__alt_data_end+0xfc0113e4>
   116a0:	d8802017 	ldw	r2,128(sp)
   116a4:	10000426 	beq	r2,zero,116b8 <___vfprintf_internal_r+0x410>
   116a8:	d9002d17 	ldw	r4,180(sp)
   116ac:	d9801e04 	addi	r6,sp,120
   116b0:	b80b883a 	mov	r5,r23
   116b4:	00195b40 	call	195b4 <__sprint_r>
   116b8:	b880030b 	ldhu	r2,12(r23)
   116bc:	1080100c 	andi	r2,r2,64
   116c0:	1005c01e 	bne	r2,zero,12dc4 <___vfprintf_internal_r+0x1b1c>
   116c4:	d8802f17 	ldw	r2,188(sp)
   116c8:	dfc04717 	ldw	ra,284(sp)
   116cc:	df004617 	ldw	fp,280(sp)
   116d0:	ddc04517 	ldw	r23,276(sp)
   116d4:	dd804417 	ldw	r22,272(sp)
   116d8:	dd404317 	ldw	r21,268(sp)
   116dc:	dd004217 	ldw	r20,264(sp)
   116e0:	dcc04117 	ldw	r19,260(sp)
   116e4:	dc804017 	ldw	r18,256(sp)
   116e8:	dc403f17 	ldw	r17,252(sp)
   116ec:	dc003e17 	ldw	r16,248(sp)
   116f0:	dec04804 	addi	sp,sp,288
   116f4:	f800283a 	ret
   116f8:	d9002d17 	ldw	r4,180(sp)
   116fc:	00156680 	call	15668 <__sinit>
   11700:	003f0206 	br	1130c <__alt_data_end+0xfc01130c>
   11704:	d9002e17 	ldw	r4,184(sp)
   11708:	d9402e17 	ldw	r5,184(sp)
   1170c:	21000017 	ldw	r4,0(r4)
   11710:	28800104 	addi	r2,r5,4
   11714:	d9003115 	stw	r4,196(sp)
   11718:	203fa716 	blt	r4,zero,115b8 <__alt_data_end+0xfc0115b8>
   1171c:	d8802e15 	stw	r2,184(sp)
   11720:	ac400007 	ldb	r17,0(r21)
   11724:	003f4206 	br	11430 <__alt_data_end+0xfc011430>
   11728:	ac400007 	ldb	r17,0(r21)
   1172c:	01000a84 	movi	r4,42
   11730:	a8c00044 	addi	r3,r21,1
   11734:	89075826 	beq	r17,r4,13498 <___vfprintf_internal_r+0x21f0>
   11738:	8cbff404 	addi	r18,r17,-48
   1173c:	b486ae36 	bltu	r22,r18,131f8 <___vfprintf_internal_r+0x1f50>
   11740:	0009883a 	mov	r4,zero
   11744:	1823883a 	mov	r17,r3
   11748:	01400284 	movi	r5,10
   1174c:	000ce000 	call	ce00 <__mulsi3>
   11750:	88c00007 	ldb	r3,0(r17)
   11754:	1489883a 	add	r4,r2,r18
   11758:	8d400044 	addi	r21,r17,1
   1175c:	1cbff404 	addi	r18,r3,-48
   11760:	a823883a 	mov	r17,r21
   11764:	b4bff82e 	bgeu	r22,r18,11748 <__alt_data_end+0xfc011748>
   11768:	1823883a 	mov	r17,r3
   1176c:	2005f616 	blt	r4,zero,12f48 <___vfprintf_internal_r+0x1ca0>
   11770:	d9002a15 	stw	r4,168(sp)
   11774:	003f2f06 	br	11434 <__alt_data_end+0xfc011434>
   11778:	84002014 	ori	r16,r16,128
   1177c:	ac400007 	ldb	r17,0(r21)
   11780:	003f2b06 	br	11430 <__alt_data_end+0xfc011430>
   11784:	8cbff404 	addi	r18,r17,-48
   11788:	d8003115 	stw	zero,196(sp)
   1178c:	0009883a 	mov	r4,zero
   11790:	a823883a 	mov	r17,r21
   11794:	01400284 	movi	r5,10
   11798:	000ce000 	call	ce00 <__mulsi3>
   1179c:	88c00007 	ldb	r3,0(r17)
   117a0:	9089883a 	add	r4,r18,r2
   117a4:	ad400044 	addi	r21,r21,1
   117a8:	1cbff404 	addi	r18,r3,-48
   117ac:	a823883a 	mov	r17,r21
   117b0:	b4bff82e 	bgeu	r22,r18,11794 <__alt_data_end+0xfc011794>
   117b4:	1823883a 	mov	r17,r3
   117b8:	d9003115 	stw	r4,196(sp)
   117bc:	003f1d06 	br	11434 <__alt_data_end+0xfc011434>
   117c0:	8025883a 	mov	r18,r16
   117c4:	dc002903 	ldbu	r16,164(sp)
   117c8:	e011883a 	mov	r8,fp
   117cc:	84003fcc 	andi	r16,r16,255
   117d0:	8007531e 	bne	r16,zero,13520 <___vfprintf_internal_r+0x2278>
   117d4:	94800414 	ori	r18,r18,16
   117d8:	9080080c 	andi	r2,r18,32
   117dc:	1003a326 	beq	r2,zero,1266c <___vfprintf_internal_r+0x13c4>
   117e0:	d9002e17 	ldw	r4,184(sp)
   117e4:	20800117 	ldw	r2,4(r4)
   117e8:	24c00017 	ldw	r19,0(r4)
   117ec:	21000204 	addi	r4,r4,8
   117f0:	d9002e15 	stw	r4,184(sp)
   117f4:	102d883a 	mov	r22,r2
   117f8:	10047316 	blt	r2,zero,129c8 <___vfprintf_internal_r+0x1720>
   117fc:	d9002a17 	ldw	r4,168(sp)
   11800:	df002783 	ldbu	fp,158(sp)
   11804:	2003e416 	blt	r4,zero,12798 <___vfprintf_internal_r+0x14f0>
   11808:	00ffdfc4 	movi	r3,-129
   1180c:	9d84b03a 	or	r2,r19,r22
   11810:	90e4703a 	and	r18,r18,r3
   11814:	10018026 	beq	r2,zero,11e18 <___vfprintf_internal_r+0xb70>
   11818:	b003ab26 	beq	r22,zero,126c8 <___vfprintf_internal_r+0x1420>
   1181c:	dc402915 	stw	r17,164(sp)
   11820:	dc001e04 	addi	r16,sp,120
   11824:	b023883a 	mov	r17,r22
   11828:	402d883a 	mov	r22,r8
   1182c:	9809883a 	mov	r4,r19
   11830:	880b883a 	mov	r5,r17
   11834:	01800284 	movi	r6,10
   11838:	000f883a 	mov	r7,zero
   1183c:	001baf80 	call	1baf8 <__umoddi3>
   11840:	10800c04 	addi	r2,r2,48
   11844:	843fffc4 	addi	r16,r16,-1
   11848:	9809883a 	mov	r4,r19
   1184c:	880b883a 	mov	r5,r17
   11850:	80800005 	stb	r2,0(r16)
   11854:	01800284 	movi	r6,10
   11858:	000f883a 	mov	r7,zero
   1185c:	001b4fc0 	call	1b4fc <__udivdi3>
   11860:	1027883a 	mov	r19,r2
   11864:	10c4b03a 	or	r2,r2,r3
   11868:	1823883a 	mov	r17,r3
   1186c:	103fef1e 	bne	r2,zero,1182c <__alt_data_end+0xfc01182c>
   11870:	d8c02817 	ldw	r3,160(sp)
   11874:	dc402917 	ldw	r17,164(sp)
   11878:	b011883a 	mov	r8,r22
   1187c:	1c07c83a 	sub	r3,r3,r16
   11880:	d8c02b15 	stw	r3,172(sp)
   11884:	00005f06 	br	11a04 <___vfprintf_internal_r+0x75c>
   11888:	8025883a 	mov	r18,r16
   1188c:	dc002903 	ldbu	r16,164(sp)
   11890:	e011883a 	mov	r8,fp
   11894:	84003fcc 	andi	r16,r16,255
   11898:	80071e1e 	bne	r16,zero,13514 <___vfprintf_internal_r+0x226c>
   1189c:	9080020c 	andi	r2,r18,8
   118a0:	1004af26 	beq	r2,zero,12b60 <___vfprintf_internal_r+0x18b8>
   118a4:	d9002e17 	ldw	r4,184(sp)
   118a8:	d9402e17 	ldw	r5,184(sp)
   118ac:	d8802e17 	ldw	r2,184(sp)
   118b0:	21000017 	ldw	r4,0(r4)
   118b4:	29400117 	ldw	r5,4(r5)
   118b8:	10800204 	addi	r2,r2,8
   118bc:	d9003615 	stw	r4,216(sp)
   118c0:	d9403815 	stw	r5,224(sp)
   118c4:	d8802e15 	stw	r2,184(sp)
   118c8:	d9003617 	ldw	r4,216(sp)
   118cc:	d9403817 	ldw	r5,224(sp)
   118d0:	da003d15 	stw	r8,244(sp)
   118d4:	04000044 	movi	r16,1
   118d8:	0017d980 	call	17d98 <__fpclassifyd>
   118dc:	da003d17 	ldw	r8,244(sp)
   118e0:	1404441e 	bne	r2,r16,129f4 <___vfprintf_internal_r+0x174c>
   118e4:	d9003617 	ldw	r4,216(sp)
   118e8:	d9403817 	ldw	r5,224(sp)
   118ec:	000d883a 	mov	r6,zero
   118f0:	000f883a 	mov	r7,zero
   118f4:	001d49c0 	call	1d49c <__ledf2>
   118f8:	da003d17 	ldw	r8,244(sp)
   118fc:	1005e316 	blt	r2,zero,1308c <___vfprintf_internal_r+0x1de4>
   11900:	df002783 	ldbu	fp,158(sp)
   11904:	008011c4 	movi	r2,71
   11908:	1445580e 	bge	r2,r17,12e6c <___vfprintf_internal_r+0x1bc4>
   1190c:	040000f4 	movhi	r16,3
   11910:	84290a04 	addi	r16,r16,-23512
   11914:	00c000c4 	movi	r3,3
   11918:	00bfdfc4 	movi	r2,-129
   1191c:	d8c02915 	stw	r3,164(sp)
   11920:	90a4703a 	and	r18,r18,r2
   11924:	d8c02b15 	stw	r3,172(sp)
   11928:	d8002a15 	stw	zero,168(sp)
   1192c:	d8003215 	stw	zero,200(sp)
   11930:	00003a06 	br	11a1c <___vfprintf_internal_r+0x774>
   11934:	84000214 	ori	r16,r16,8
   11938:	ac400007 	ldb	r17,0(r21)
   1193c:	003ebc06 	br	11430 <__alt_data_end+0xfc011430>
   11940:	8025883a 	mov	r18,r16
   11944:	dc002903 	ldbu	r16,164(sp)
   11948:	e011883a 	mov	r8,fp
   1194c:	84003fcc 	andi	r16,r16,255
   11950:	8007001e 	bne	r16,zero,13554 <___vfprintf_internal_r+0x22ac>
   11954:	94800414 	ori	r18,r18,16
   11958:	9080080c 	andi	r2,r18,32
   1195c:	1002fa26 	beq	r2,zero,12548 <___vfprintf_internal_r+0x12a0>
   11960:	d9002e17 	ldw	r4,184(sp)
   11964:	d9402a17 	ldw	r5,168(sp)
   11968:	d8002785 	stb	zero,158(sp)
   1196c:	20800204 	addi	r2,r4,8
   11970:	24c00017 	ldw	r19,0(r4)
   11974:	25800117 	ldw	r22,4(r4)
   11978:	2804b116 	blt	r5,zero,12c40 <___vfprintf_internal_r+0x1998>
   1197c:	013fdfc4 	movi	r4,-129
   11980:	9d86b03a 	or	r3,r19,r22
   11984:	d8802e15 	stw	r2,184(sp)
   11988:	9124703a 	and	r18,r18,r4
   1198c:	1802fb1e 	bne	r3,zero,1257c <___vfprintf_internal_r+0x12d4>
   11990:	d8c02a17 	ldw	r3,168(sp)
   11994:	0039883a 	mov	fp,zero
   11998:	1805e526 	beq	r3,zero,13130 <___vfprintf_internal_r+0x1e88>
   1199c:	0027883a 	mov	r19,zero
   119a0:	002d883a 	mov	r22,zero
   119a4:	dc001e04 	addi	r16,sp,120
   119a8:	9806d0fa 	srli	r3,r19,3
   119ac:	b008977a 	slli	r4,r22,29
   119b0:	b02cd0fa 	srli	r22,r22,3
   119b4:	9cc001cc 	andi	r19,r19,7
   119b8:	98800c04 	addi	r2,r19,48
   119bc:	843fffc4 	addi	r16,r16,-1
   119c0:	20e6b03a 	or	r19,r4,r3
   119c4:	80800005 	stb	r2,0(r16)
   119c8:	9d86b03a 	or	r3,r19,r22
   119cc:	183ff61e 	bne	r3,zero,119a8 <__alt_data_end+0xfc0119a8>
   119d0:	90c0004c 	andi	r3,r18,1
   119d4:	18014126 	beq	r3,zero,11edc <___vfprintf_internal_r+0xc34>
   119d8:	10803fcc 	andi	r2,r2,255
   119dc:	1080201c 	xori	r2,r2,128
   119e0:	10bfe004 	addi	r2,r2,-128
   119e4:	00c00c04 	movi	r3,48
   119e8:	10c13c26 	beq	r2,r3,11edc <___vfprintf_internal_r+0xc34>
   119ec:	80ffffc5 	stb	r3,-1(r16)
   119f0:	d8c02817 	ldw	r3,160(sp)
   119f4:	80bfffc4 	addi	r2,r16,-1
   119f8:	1021883a 	mov	r16,r2
   119fc:	1887c83a 	sub	r3,r3,r2
   11a00:	d8c02b15 	stw	r3,172(sp)
   11a04:	d8802b17 	ldw	r2,172(sp)
   11a08:	d9002a17 	ldw	r4,168(sp)
   11a0c:	1100010e 	bge	r2,r4,11a14 <___vfprintf_internal_r+0x76c>
   11a10:	2005883a 	mov	r2,r4
   11a14:	d8802915 	stw	r2,164(sp)
   11a18:	d8003215 	stw	zero,200(sp)
   11a1c:	e7003fcc 	andi	fp,fp,255
   11a20:	e700201c 	xori	fp,fp,128
   11a24:	e73fe004 	addi	fp,fp,-128
   11a28:	e0000326 	beq	fp,zero,11a38 <___vfprintf_internal_r+0x790>
   11a2c:	d8c02917 	ldw	r3,164(sp)
   11a30:	18c00044 	addi	r3,r3,1
   11a34:	d8c02915 	stw	r3,164(sp)
   11a38:	90c0008c 	andi	r3,r18,2
   11a3c:	d8c02c15 	stw	r3,176(sp)
   11a40:	18000326 	beq	r3,zero,11a50 <___vfprintf_internal_r+0x7a8>
   11a44:	d8c02917 	ldw	r3,164(sp)
   11a48:	18c00084 	addi	r3,r3,2
   11a4c:	d8c02915 	stw	r3,164(sp)
   11a50:	90c0210c 	andi	r3,r18,132
   11a54:	d8c03015 	stw	r3,192(sp)
   11a58:	1801c51e 	bne	r3,zero,12170 <___vfprintf_internal_r+0xec8>
   11a5c:	d9003117 	ldw	r4,196(sp)
   11a60:	d8c02917 	ldw	r3,164(sp)
   11a64:	20e7c83a 	sub	r19,r4,r3
   11a68:	04c1c10e 	bge	zero,r19,12170 <___vfprintf_internal_r+0xec8>
   11a6c:	02400404 	movi	r9,16
   11a70:	d8c02017 	ldw	r3,128(sp)
   11a74:	d8801f17 	ldw	r2,124(sp)
   11a78:	4cc52f0e 	bge	r9,r19,12f38 <___vfprintf_internal_r+0x1c90>
   11a7c:	014000f4 	movhi	r5,3
   11a80:	29692584 	addi	r5,r5,-23402
   11a84:	dc403b15 	stw	r17,236(sp)
   11a88:	d9403515 	stw	r5,212(sp)
   11a8c:	9823883a 	mov	r17,r19
   11a90:	482d883a 	mov	r22,r9
   11a94:	9027883a 	mov	r19,r18
   11a98:	070001c4 	movi	fp,7
   11a9c:	8025883a 	mov	r18,r16
   11aa0:	dc002d17 	ldw	r16,180(sp)
   11aa4:	00000306 	br	11ab4 <___vfprintf_internal_r+0x80c>
   11aa8:	8c7ffc04 	addi	r17,r17,-16
   11aac:	42000204 	addi	r8,r8,8
   11ab0:	b440130e 	bge	r22,r17,11b00 <___vfprintf_internal_r+0x858>
   11ab4:	010000f4 	movhi	r4,3
   11ab8:	18c00404 	addi	r3,r3,16
   11abc:	10800044 	addi	r2,r2,1
   11ac0:	21292584 	addi	r4,r4,-23402
   11ac4:	41000015 	stw	r4,0(r8)
   11ac8:	45800115 	stw	r22,4(r8)
   11acc:	d8c02015 	stw	r3,128(sp)
   11ad0:	d8801f15 	stw	r2,124(sp)
   11ad4:	e0bff40e 	bge	fp,r2,11aa8 <__alt_data_end+0xfc011aa8>
   11ad8:	d9801e04 	addi	r6,sp,120
   11adc:	b80b883a 	mov	r5,r23
   11ae0:	8009883a 	mov	r4,r16
   11ae4:	00195b40 	call	195b4 <__sprint_r>
   11ae8:	103ef31e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   11aec:	8c7ffc04 	addi	r17,r17,-16
   11af0:	d8c02017 	ldw	r3,128(sp)
   11af4:	d8801f17 	ldw	r2,124(sp)
   11af8:	da000404 	addi	r8,sp,16
   11afc:	b47fed16 	blt	r22,r17,11ab4 <__alt_data_end+0xfc011ab4>
   11b00:	9021883a 	mov	r16,r18
   11b04:	9825883a 	mov	r18,r19
   11b08:	8827883a 	mov	r19,r17
   11b0c:	dc403b17 	ldw	r17,236(sp)
   11b10:	d9403517 	ldw	r5,212(sp)
   11b14:	98c7883a 	add	r3,r19,r3
   11b18:	10800044 	addi	r2,r2,1
   11b1c:	41400015 	stw	r5,0(r8)
   11b20:	44c00115 	stw	r19,4(r8)
   11b24:	d8c02015 	stw	r3,128(sp)
   11b28:	d8801f15 	stw	r2,124(sp)
   11b2c:	010001c4 	movi	r4,7
   11b30:	2082c516 	blt	r4,r2,12648 <___vfprintf_internal_r+0x13a0>
   11b34:	df002787 	ldb	fp,158(sp)
   11b38:	42000204 	addi	r8,r8,8
   11b3c:	e0000c26 	beq	fp,zero,11b70 <___vfprintf_internal_r+0x8c8>
   11b40:	d8801f17 	ldw	r2,124(sp)
   11b44:	d9002784 	addi	r4,sp,158
   11b48:	18c00044 	addi	r3,r3,1
   11b4c:	10800044 	addi	r2,r2,1
   11b50:	41000015 	stw	r4,0(r8)
   11b54:	01000044 	movi	r4,1
   11b58:	41000115 	stw	r4,4(r8)
   11b5c:	d8c02015 	stw	r3,128(sp)
   11b60:	d8801f15 	stw	r2,124(sp)
   11b64:	010001c4 	movi	r4,7
   11b68:	20825e16 	blt	r4,r2,124e4 <___vfprintf_internal_r+0x123c>
   11b6c:	42000204 	addi	r8,r8,8
   11b70:	d8802c17 	ldw	r2,176(sp)
   11b74:	10000c26 	beq	r2,zero,11ba8 <___vfprintf_internal_r+0x900>
   11b78:	d8801f17 	ldw	r2,124(sp)
   11b7c:	d9002704 	addi	r4,sp,156
   11b80:	18c00084 	addi	r3,r3,2
   11b84:	10800044 	addi	r2,r2,1
   11b88:	41000015 	stw	r4,0(r8)
   11b8c:	01000084 	movi	r4,2
   11b90:	41000115 	stw	r4,4(r8)
   11b94:	d8c02015 	stw	r3,128(sp)
   11b98:	d8801f15 	stw	r2,124(sp)
   11b9c:	010001c4 	movi	r4,7
   11ba0:	20825816 	blt	r4,r2,12504 <___vfprintf_internal_r+0x125c>
   11ba4:	42000204 	addi	r8,r8,8
   11ba8:	d9003017 	ldw	r4,192(sp)
   11bac:	00802004 	movi	r2,128
   11bb0:	2081bb26 	beq	r4,r2,122a0 <___vfprintf_internal_r+0xff8>
   11bb4:	d9402a17 	ldw	r5,168(sp)
   11bb8:	d8802b17 	ldw	r2,172(sp)
   11bbc:	28adc83a 	sub	r22,r5,r2
   11bc0:	0580310e 	bge	zero,r22,11c88 <___vfprintf_internal_r+0x9e0>
   11bc4:	07000404 	movi	fp,16
   11bc8:	d8801f17 	ldw	r2,124(sp)
   11bcc:	e584360e 	bge	fp,r22,12ca8 <___vfprintf_internal_r+0x1a00>
   11bd0:	014000f4 	movhi	r5,3
   11bd4:	29692184 	addi	r5,r5,-23418
   11bd8:	dc402a15 	stw	r17,168(sp)
   11bdc:	d9402c15 	stw	r5,176(sp)
   11be0:	b023883a 	mov	r17,r22
   11be4:	04c001c4 	movi	r19,7
   11be8:	a82d883a 	mov	r22,r21
   11bec:	902b883a 	mov	r21,r18
   11bf0:	8025883a 	mov	r18,r16
   11bf4:	dc002d17 	ldw	r16,180(sp)
   11bf8:	00000306 	br	11c08 <___vfprintf_internal_r+0x960>
   11bfc:	8c7ffc04 	addi	r17,r17,-16
   11c00:	42000204 	addi	r8,r8,8
   11c04:	e440110e 	bge	fp,r17,11c4c <___vfprintf_internal_r+0x9a4>
   11c08:	18c00404 	addi	r3,r3,16
   11c0c:	10800044 	addi	r2,r2,1
   11c10:	45000015 	stw	r20,0(r8)
   11c14:	47000115 	stw	fp,4(r8)
   11c18:	d8c02015 	stw	r3,128(sp)
   11c1c:	d8801f15 	stw	r2,124(sp)
   11c20:	98bff60e 	bge	r19,r2,11bfc <__alt_data_end+0xfc011bfc>
   11c24:	d9801e04 	addi	r6,sp,120
   11c28:	b80b883a 	mov	r5,r23
   11c2c:	8009883a 	mov	r4,r16
   11c30:	00195b40 	call	195b4 <__sprint_r>
   11c34:	103ea01e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   11c38:	8c7ffc04 	addi	r17,r17,-16
   11c3c:	d8c02017 	ldw	r3,128(sp)
   11c40:	d8801f17 	ldw	r2,124(sp)
   11c44:	da000404 	addi	r8,sp,16
   11c48:	e47fef16 	blt	fp,r17,11c08 <__alt_data_end+0xfc011c08>
   11c4c:	9021883a 	mov	r16,r18
   11c50:	a825883a 	mov	r18,r21
   11c54:	b02b883a 	mov	r21,r22
   11c58:	882d883a 	mov	r22,r17
   11c5c:	dc402a17 	ldw	r17,168(sp)
   11c60:	d9002c17 	ldw	r4,176(sp)
   11c64:	1d87883a 	add	r3,r3,r22
   11c68:	10800044 	addi	r2,r2,1
   11c6c:	41000015 	stw	r4,0(r8)
   11c70:	45800115 	stw	r22,4(r8)
   11c74:	d8c02015 	stw	r3,128(sp)
   11c78:	d8801f15 	stw	r2,124(sp)
   11c7c:	010001c4 	movi	r4,7
   11c80:	20821016 	blt	r4,r2,124c4 <___vfprintf_internal_r+0x121c>
   11c84:	42000204 	addi	r8,r8,8
   11c88:	9080400c 	andi	r2,r18,256
   11c8c:	10013a1e 	bne	r2,zero,12178 <___vfprintf_internal_r+0xed0>
   11c90:	d9402b17 	ldw	r5,172(sp)
   11c94:	d8801f17 	ldw	r2,124(sp)
   11c98:	44000015 	stw	r16,0(r8)
   11c9c:	1947883a 	add	r3,r3,r5
   11ca0:	10800044 	addi	r2,r2,1
   11ca4:	41400115 	stw	r5,4(r8)
   11ca8:	d8c02015 	stw	r3,128(sp)
   11cac:	d8801f15 	stw	r2,124(sp)
   11cb0:	010001c4 	movi	r4,7
   11cb4:	2081f516 	blt	r4,r2,1248c <___vfprintf_internal_r+0x11e4>
   11cb8:	42000204 	addi	r8,r8,8
   11cbc:	9480010c 	andi	r18,r18,4
   11cc0:	90003226 	beq	r18,zero,11d8c <___vfprintf_internal_r+0xae4>
   11cc4:	d9403117 	ldw	r5,196(sp)
   11cc8:	d8802917 	ldw	r2,164(sp)
   11ccc:	28a1c83a 	sub	r16,r5,r2
   11cd0:	04002e0e 	bge	zero,r16,11d8c <___vfprintf_internal_r+0xae4>
   11cd4:	04400404 	movi	r17,16
   11cd8:	d8801f17 	ldw	r2,124(sp)
   11cdc:	8c04c40e 	bge	r17,r16,12ff0 <___vfprintf_internal_r+0x1d48>
   11ce0:	014000f4 	movhi	r5,3
   11ce4:	29692584 	addi	r5,r5,-23402
   11ce8:	d9403515 	stw	r5,212(sp)
   11cec:	048001c4 	movi	r18,7
   11cf0:	dcc02d17 	ldw	r19,180(sp)
   11cf4:	00000306 	br	11d04 <___vfprintf_internal_r+0xa5c>
   11cf8:	843ffc04 	addi	r16,r16,-16
   11cfc:	42000204 	addi	r8,r8,8
   11d00:	8c00130e 	bge	r17,r16,11d50 <___vfprintf_internal_r+0xaa8>
   11d04:	010000f4 	movhi	r4,3
   11d08:	18c00404 	addi	r3,r3,16
   11d0c:	10800044 	addi	r2,r2,1
   11d10:	21292584 	addi	r4,r4,-23402
   11d14:	41000015 	stw	r4,0(r8)
   11d18:	44400115 	stw	r17,4(r8)
   11d1c:	d8c02015 	stw	r3,128(sp)
   11d20:	d8801f15 	stw	r2,124(sp)
   11d24:	90bff40e 	bge	r18,r2,11cf8 <__alt_data_end+0xfc011cf8>
   11d28:	d9801e04 	addi	r6,sp,120
   11d2c:	b80b883a 	mov	r5,r23
   11d30:	9809883a 	mov	r4,r19
   11d34:	00195b40 	call	195b4 <__sprint_r>
   11d38:	103e5f1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   11d3c:	843ffc04 	addi	r16,r16,-16
   11d40:	d8c02017 	ldw	r3,128(sp)
   11d44:	d8801f17 	ldw	r2,124(sp)
   11d48:	da000404 	addi	r8,sp,16
   11d4c:	8c3fed16 	blt	r17,r16,11d04 <__alt_data_end+0xfc011d04>
   11d50:	d9403517 	ldw	r5,212(sp)
   11d54:	1c07883a 	add	r3,r3,r16
   11d58:	10800044 	addi	r2,r2,1
   11d5c:	41400015 	stw	r5,0(r8)
   11d60:	44000115 	stw	r16,4(r8)
   11d64:	d8c02015 	stw	r3,128(sp)
   11d68:	d8801f15 	stw	r2,124(sp)
   11d6c:	010001c4 	movi	r4,7
   11d70:	2080060e 	bge	r4,r2,11d8c <___vfprintf_internal_r+0xae4>
   11d74:	d9002d17 	ldw	r4,180(sp)
   11d78:	d9801e04 	addi	r6,sp,120
   11d7c:	b80b883a 	mov	r5,r23
   11d80:	00195b40 	call	195b4 <__sprint_r>
   11d84:	103e4c1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   11d88:	d8c02017 	ldw	r3,128(sp)
   11d8c:	d8803117 	ldw	r2,196(sp)
   11d90:	d9002917 	ldw	r4,164(sp)
   11d94:	1100010e 	bge	r2,r4,11d9c <___vfprintf_internal_r+0xaf4>
   11d98:	2005883a 	mov	r2,r4
   11d9c:	d9402f17 	ldw	r5,188(sp)
   11da0:	288b883a 	add	r5,r5,r2
   11da4:	d9402f15 	stw	r5,188(sp)
   11da8:	1801c01e 	bne	r3,zero,124ac <___vfprintf_internal_r+0x1204>
   11dac:	a8800007 	ldb	r2,0(r21)
   11db0:	d8001f15 	stw	zero,124(sp)
   11db4:	da000404 	addi	r8,sp,16
   11db8:	103d751e 	bne	r2,zero,11390 <__alt_data_end+0xfc011390>
   11dbc:	a823883a 	mov	r17,r21
   11dc0:	003d8b06 	br	113f0 <__alt_data_end+0xfc0113f0>
   11dc4:	8025883a 	mov	r18,r16
   11dc8:	dc002903 	ldbu	r16,164(sp)
   11dcc:	e011883a 	mov	r8,fp
   11dd0:	84003fcc 	andi	r16,r16,255
   11dd4:	8005e51e 	bne	r16,zero,1356c <___vfprintf_internal_r+0x22c4>
   11dd8:	94800414 	ori	r18,r18,16
   11ddc:	9080080c 	andi	r2,r18,32
   11de0:	10022b26 	beq	r2,zero,12690 <___vfprintf_internal_r+0x13e8>
   11de4:	d9002e17 	ldw	r4,184(sp)
   11de8:	d9402a17 	ldw	r5,168(sp)
   11dec:	d8002785 	stb	zero,158(sp)
   11df0:	20c00204 	addi	r3,r4,8
   11df4:	24c00017 	ldw	r19,0(r4)
   11df8:	25800117 	ldw	r22,4(r4)
   11dfc:	28042e16 	blt	r5,zero,12eb8 <___vfprintf_internal_r+0x1c10>
   11e00:	013fdfc4 	movi	r4,-129
   11e04:	9d84b03a 	or	r2,r19,r22
   11e08:	d8c02e15 	stw	r3,184(sp)
   11e0c:	9124703a 	and	r18,r18,r4
   11e10:	0039883a 	mov	fp,zero
   11e14:	103e801e 	bne	r2,zero,11818 <__alt_data_end+0xfc011818>
   11e18:	d9002a17 	ldw	r4,168(sp)
   11e1c:	2002e01e 	bne	r4,zero,129a0 <___vfprintf_internal_r+0x16f8>
   11e20:	d8002a15 	stw	zero,168(sp)
   11e24:	d8002b15 	stw	zero,172(sp)
   11e28:	dc001e04 	addi	r16,sp,120
   11e2c:	003ef506 	br	11a04 <__alt_data_end+0xfc011a04>
   11e30:	8025883a 	mov	r18,r16
   11e34:	dc002903 	ldbu	r16,164(sp)
   11e38:	e011883a 	mov	r8,fp
   11e3c:	84003fcc 	andi	r16,r16,255
   11e40:	8005ba1e 	bne	r16,zero,1352c <___vfprintf_internal_r+0x2284>
   11e44:	010000f4 	movhi	r4,3
   11e48:	21290d04 	addi	r4,r4,-23500
   11e4c:	d9003915 	stw	r4,228(sp)
   11e50:	9080080c 	andi	r2,r18,32
   11e54:	10006126 	beq	r2,zero,11fdc <___vfprintf_internal_r+0xd34>
   11e58:	d9402e17 	ldw	r5,184(sp)
   11e5c:	2cc00017 	ldw	r19,0(r5)
   11e60:	2d800117 	ldw	r22,4(r5)
   11e64:	29400204 	addi	r5,r5,8
   11e68:	d9402e15 	stw	r5,184(sp)
   11e6c:	9080004c 	andi	r2,r18,1
   11e70:	1001ac26 	beq	r2,zero,12524 <___vfprintf_internal_r+0x127c>
   11e74:	9d84b03a 	or	r2,r19,r22
   11e78:	10038526 	beq	r2,zero,12c90 <___vfprintf_internal_r+0x19e8>
   11e7c:	d8c02a17 	ldw	r3,168(sp)
   11e80:	00800c04 	movi	r2,48
   11e84:	d8802705 	stb	r2,156(sp)
   11e88:	dc402745 	stb	r17,157(sp)
   11e8c:	d8002785 	stb	zero,158(sp)
   11e90:	90800094 	ori	r2,r18,2
   11e94:	18047916 	blt	r3,zero,1307c <___vfprintf_internal_r+0x1dd4>
   11e98:	00bfdfc4 	movi	r2,-129
   11e9c:	90a4703a 	and	r18,r18,r2
   11ea0:	94800094 	ori	r18,r18,2
   11ea4:	0039883a 	mov	fp,zero
   11ea8:	d9003917 	ldw	r4,228(sp)
   11eac:	dc001e04 	addi	r16,sp,120
   11eb0:	988003cc 	andi	r2,r19,15
   11eb4:	b006973a 	slli	r3,r22,28
   11eb8:	2085883a 	add	r2,r4,r2
   11ebc:	9826d13a 	srli	r19,r19,4
   11ec0:	10800003 	ldbu	r2,0(r2)
   11ec4:	b02cd13a 	srli	r22,r22,4
   11ec8:	843fffc4 	addi	r16,r16,-1
   11ecc:	1ce6b03a 	or	r19,r3,r19
   11ed0:	80800005 	stb	r2,0(r16)
   11ed4:	9d84b03a 	or	r2,r19,r22
   11ed8:	103ff51e 	bne	r2,zero,11eb0 <__alt_data_end+0xfc011eb0>
   11edc:	d8c02817 	ldw	r3,160(sp)
   11ee0:	1c07c83a 	sub	r3,r3,r16
   11ee4:	d8c02b15 	stw	r3,172(sp)
   11ee8:	003ec606 	br	11a04 <__alt_data_end+0xfc011a04>
   11eec:	8025883a 	mov	r18,r16
   11ef0:	dc002903 	ldbu	r16,164(sp)
   11ef4:	e011883a 	mov	r8,fp
   11ef8:	84003fcc 	andi	r16,r16,255
   11efc:	803e9626 	beq	r16,zero,11958 <__alt_data_end+0xfc011958>
   11f00:	d8c02b03 	ldbu	r3,172(sp)
   11f04:	d8c02785 	stb	r3,158(sp)
   11f08:	003e9306 	br	11958 <__alt_data_end+0xfc011958>
   11f0c:	00c00044 	movi	r3,1
   11f10:	d8c02905 	stb	r3,164(sp)
   11f14:	00c00ac4 	movi	r3,43
   11f18:	d8c02b05 	stb	r3,172(sp)
   11f1c:	ac400007 	ldb	r17,0(r21)
   11f20:	003d4306 	br	11430 <__alt_data_end+0xfc011430>
   11f24:	84000814 	ori	r16,r16,32
   11f28:	ac400007 	ldb	r17,0(r21)
   11f2c:	003d4006 	br	11430 <__alt_data_end+0xfc011430>
   11f30:	d8802e17 	ldw	r2,184(sp)
   11f34:	8025883a 	mov	r18,r16
   11f38:	d8002785 	stb	zero,158(sp)
   11f3c:	14000017 	ldw	r16,0(r2)
   11f40:	e011883a 	mov	r8,fp
   11f44:	14c00104 	addi	r19,r2,4
   11f48:	80042d26 	beq	r16,zero,13000 <___vfprintf_internal_r+0x1d58>
   11f4c:	d8c02a17 	ldw	r3,168(sp)
   11f50:	1803e416 	blt	r3,zero,12ee4 <___vfprintf_internal_r+0x1c3c>
   11f54:	180d883a 	mov	r6,r3
   11f58:	000b883a 	mov	r5,zero
   11f5c:	8009883a 	mov	r4,r16
   11f60:	df003d15 	stw	fp,244(sp)
   11f64:	00163d40 	call	163d4 <memchr>
   11f68:	da003d17 	ldw	r8,244(sp)
   11f6c:	10046826 	beq	r2,zero,13110 <___vfprintf_internal_r+0x1e68>
   11f70:	1405c83a 	sub	r2,r2,r16
   11f74:	d8802b15 	stw	r2,172(sp)
   11f78:	1003e016 	blt	r2,zero,12efc <___vfprintf_internal_r+0x1c54>
   11f7c:	df002783 	ldbu	fp,158(sp)
   11f80:	d8802915 	stw	r2,164(sp)
   11f84:	dcc02e15 	stw	r19,184(sp)
   11f88:	d8002a15 	stw	zero,168(sp)
   11f8c:	d8003215 	stw	zero,200(sp)
   11f90:	003ea206 	br	11a1c <__alt_data_end+0xfc011a1c>
   11f94:	8025883a 	mov	r18,r16
   11f98:	dc002903 	ldbu	r16,164(sp)
   11f9c:	e011883a 	mov	r8,fp
   11fa0:	84003fcc 	andi	r16,r16,255
   11fa4:	803f8d26 	beq	r16,zero,11ddc <__alt_data_end+0xfc011ddc>
   11fa8:	d8c02b03 	ldbu	r3,172(sp)
   11fac:	d8c02785 	stb	r3,158(sp)
   11fb0:	003f8a06 	br	11ddc <__alt_data_end+0xfc011ddc>
   11fb4:	8025883a 	mov	r18,r16
   11fb8:	dc002903 	ldbu	r16,164(sp)
   11fbc:	e011883a 	mov	r8,fp
   11fc0:	84003fcc 	andi	r16,r16,255
   11fc4:	8005661e 	bne	r16,zero,13560 <___vfprintf_internal_r+0x22b8>
   11fc8:	010000f4 	movhi	r4,3
   11fcc:	21291204 	addi	r4,r4,-23480
   11fd0:	d9003915 	stw	r4,228(sp)
   11fd4:	9080080c 	andi	r2,r18,32
   11fd8:	103f9f1e 	bne	r2,zero,11e58 <__alt_data_end+0xfc011e58>
   11fdc:	9080040c 	andi	r2,r18,16
   11fe0:	1002eb26 	beq	r2,zero,12b90 <___vfprintf_internal_r+0x18e8>
   11fe4:	d8802e17 	ldw	r2,184(sp)
   11fe8:	002d883a 	mov	r22,zero
   11fec:	14c00017 	ldw	r19,0(r2)
   11ff0:	10800104 	addi	r2,r2,4
   11ff4:	d8802e15 	stw	r2,184(sp)
   11ff8:	003f9c06 	br	11e6c <__alt_data_end+0xfc011e6c>
   11ffc:	d8802b07 	ldb	r2,172(sp)
   12000:	1002e11e 	bne	r2,zero,12b88 <___vfprintf_internal_r+0x18e0>
   12004:	00c00044 	movi	r3,1
   12008:	d8c02905 	stb	r3,164(sp)
   1200c:	00c00804 	movi	r3,32
   12010:	d8c02b05 	stb	r3,172(sp)
   12014:	ac400007 	ldb	r17,0(r21)
   12018:	003d0506 	br	11430 <__alt_data_end+0xfc011430>
   1201c:	84000054 	ori	r16,r16,1
   12020:	ac400007 	ldb	r17,0(r21)
   12024:	003d0206 	br	11430 <__alt_data_end+0xfc011430>
   12028:	8025883a 	mov	r18,r16
   1202c:	dc002903 	ldbu	r16,164(sp)
   12030:	e011883a 	mov	r8,fp
   12034:	84003fcc 	andi	r16,r16,255
   12038:	803de726 	beq	r16,zero,117d8 <__alt_data_end+0xfc0117d8>
   1203c:	d8c02b03 	ldbu	r3,172(sp)
   12040:	d8c02785 	stb	r3,158(sp)
   12044:	003de406 	br	117d8 <__alt_data_end+0xfc0117d8>
   12048:	84001014 	ori	r16,r16,64
   1204c:	ac400007 	ldb	r17,0(r21)
   12050:	003cf706 	br	11430 <__alt_data_end+0xfc011430>
   12054:	ac400007 	ldb	r17,0(r21)
   12058:	00801b04 	movi	r2,108
   1205c:	88838f26 	beq	r17,r2,12e9c <___vfprintf_internal_r+0x1bf4>
   12060:	84000414 	ori	r16,r16,16
   12064:	003cf206 	br	11430 <__alt_data_end+0xfc011430>
   12068:	8025883a 	mov	r18,r16
   1206c:	dc002903 	ldbu	r16,164(sp)
   12070:	e011883a 	mov	r8,fp
   12074:	84003fcc 	andi	r16,r16,255
   12078:	80053f1e 	bne	r16,zero,13578 <___vfprintf_internal_r+0x22d0>
   1207c:	9080080c 	andi	r2,r18,32
   12080:	1002d226 	beq	r2,zero,12bcc <___vfprintf_internal_r+0x1924>
   12084:	d9002e17 	ldw	r4,184(sp)
   12088:	d9402f17 	ldw	r5,188(sp)
   1208c:	20800017 	ldw	r2,0(r4)
   12090:	2807d7fa 	srai	r3,r5,31
   12094:	21000104 	addi	r4,r4,4
   12098:	d9002e15 	stw	r4,184(sp)
   1209c:	11400015 	stw	r5,0(r2)
   120a0:	10c00115 	stw	r3,4(r2)
   120a4:	003cb806 	br	11388 <__alt_data_end+0xfc011388>
   120a8:	d8c02e17 	ldw	r3,184(sp)
   120ac:	d9002e17 	ldw	r4,184(sp)
   120b0:	8025883a 	mov	r18,r16
   120b4:	18800017 	ldw	r2,0(r3)
   120b8:	21000104 	addi	r4,r4,4
   120bc:	00c00044 	movi	r3,1
   120c0:	e011883a 	mov	r8,fp
   120c4:	d8c02915 	stw	r3,164(sp)
   120c8:	d8002785 	stb	zero,158(sp)
   120cc:	d8801405 	stb	r2,80(sp)
   120d0:	d9002e15 	stw	r4,184(sp)
   120d4:	d8c02b15 	stw	r3,172(sp)
   120d8:	d8002a15 	stw	zero,168(sp)
   120dc:	d8003215 	stw	zero,200(sp)
   120e0:	dc001404 	addi	r16,sp,80
   120e4:	0039883a 	mov	fp,zero
   120e8:	003e5306 	br	11a38 <__alt_data_end+0xfc011a38>
   120ec:	010000f4 	movhi	r4,3
   120f0:	21291204 	addi	r4,r4,-23480
   120f4:	0039883a 	mov	fp,zero
   120f8:	d9003915 	stw	r4,228(sp)
   120fc:	04401e04 	movi	r17,120
   12100:	003f6906 	br	11ea8 <__alt_data_end+0xfc011ea8>
   12104:	8025883a 	mov	r18,r16
   12108:	dc002903 	ldbu	r16,164(sp)
   1210c:	e011883a 	mov	r8,fp
   12110:	84003fcc 	andi	r16,r16,255
   12114:	8005081e 	bne	r16,zero,13538 <___vfprintf_internal_r+0x2290>
   12118:	883d6126 	beq	r17,zero,116a0 <__alt_data_end+0xfc0116a0>
   1211c:	00c00044 	movi	r3,1
   12120:	d8c02915 	stw	r3,164(sp)
   12124:	dc401405 	stb	r17,80(sp)
   12128:	d8002785 	stb	zero,158(sp)
   1212c:	003fe906 	br	120d4 <__alt_data_end+0xfc0120d4>
   12130:	014000f4 	movhi	r5,3
   12134:	29691204 	addi	r5,r5,-23480
   12138:	d9403915 	stw	r5,228(sp)
   1213c:	d8c02e15 	stw	r3,184(sp)
   12140:	1025883a 	mov	r18,r2
   12144:	04401e04 	movi	r17,120
   12148:	9d84b03a 	or	r2,r19,r22
   1214c:	1000fc1e 	bne	r2,zero,12540 <___vfprintf_internal_r+0x1298>
   12150:	0039883a 	mov	fp,zero
   12154:	00800084 	movi	r2,2
   12158:	10803fcc 	andi	r2,r2,255
   1215c:	00c00044 	movi	r3,1
   12160:	10c20f26 	beq	r2,r3,129a0 <___vfprintf_internal_r+0x16f8>
   12164:	00c00084 	movi	r3,2
   12168:	10fd3326 	beq	r2,r3,11638 <__alt_data_end+0xfc011638>
   1216c:	003e0b06 	br	1199c <__alt_data_end+0xfc01199c>
   12170:	d8c02017 	ldw	r3,128(sp)
   12174:	003e7106 	br	11b3c <__alt_data_end+0xfc011b3c>
   12178:	00801944 	movi	r2,101
   1217c:	14407e0e 	bge	r2,r17,12378 <___vfprintf_internal_r+0x10d0>
   12180:	d9003617 	ldw	r4,216(sp)
   12184:	d9403817 	ldw	r5,224(sp)
   12188:	000d883a 	mov	r6,zero
   1218c:	000f883a 	mov	r7,zero
   12190:	d8c03c15 	stw	r3,240(sp)
   12194:	da003d15 	stw	r8,244(sp)
   12198:	001d3380 	call	1d338 <__eqdf2>
   1219c:	d8c03c17 	ldw	r3,240(sp)
   121a0:	da003d17 	ldw	r8,244(sp)
   121a4:	1000f71e 	bne	r2,zero,12584 <___vfprintf_internal_r+0x12dc>
   121a8:	d8801f17 	ldw	r2,124(sp)
   121ac:	010000f4 	movhi	r4,3
   121b0:	21291904 	addi	r4,r4,-23452
   121b4:	18c00044 	addi	r3,r3,1
   121b8:	10800044 	addi	r2,r2,1
   121bc:	41000015 	stw	r4,0(r8)
   121c0:	01000044 	movi	r4,1
   121c4:	41000115 	stw	r4,4(r8)
   121c8:	d8c02015 	stw	r3,128(sp)
   121cc:	d8801f15 	stw	r2,124(sp)
   121d0:	010001c4 	movi	r4,7
   121d4:	2082b816 	blt	r4,r2,12cb8 <___vfprintf_internal_r+0x1a10>
   121d8:	42000204 	addi	r8,r8,8
   121dc:	d8802617 	ldw	r2,152(sp)
   121e0:	d9403317 	ldw	r5,204(sp)
   121e4:	11400216 	blt	r2,r5,121f0 <___vfprintf_internal_r+0xf48>
   121e8:	9080004c 	andi	r2,r18,1
   121ec:	103eb326 	beq	r2,zero,11cbc <__alt_data_end+0xfc011cbc>
   121f0:	d8803717 	ldw	r2,220(sp)
   121f4:	d9003417 	ldw	r4,208(sp)
   121f8:	d9403717 	ldw	r5,220(sp)
   121fc:	1887883a 	add	r3,r3,r2
   12200:	d8801f17 	ldw	r2,124(sp)
   12204:	41000015 	stw	r4,0(r8)
   12208:	41400115 	stw	r5,4(r8)
   1220c:	10800044 	addi	r2,r2,1
   12210:	d8c02015 	stw	r3,128(sp)
   12214:	d8801f15 	stw	r2,124(sp)
   12218:	010001c4 	movi	r4,7
   1221c:	20832916 	blt	r4,r2,12ec4 <___vfprintf_internal_r+0x1c1c>
   12220:	42000204 	addi	r8,r8,8
   12224:	d8803317 	ldw	r2,204(sp)
   12228:	143fffc4 	addi	r16,r2,-1
   1222c:	043ea30e 	bge	zero,r16,11cbc <__alt_data_end+0xfc011cbc>
   12230:	04400404 	movi	r17,16
   12234:	d8801f17 	ldw	r2,124(sp)
   12238:	8c00880e 	bge	r17,r16,1245c <___vfprintf_internal_r+0x11b4>
   1223c:	014000f4 	movhi	r5,3
   12240:	29692184 	addi	r5,r5,-23418
   12244:	d9402c15 	stw	r5,176(sp)
   12248:	058001c4 	movi	r22,7
   1224c:	dcc02d17 	ldw	r19,180(sp)
   12250:	00000306 	br	12260 <___vfprintf_internal_r+0xfb8>
   12254:	42000204 	addi	r8,r8,8
   12258:	843ffc04 	addi	r16,r16,-16
   1225c:	8c00820e 	bge	r17,r16,12468 <___vfprintf_internal_r+0x11c0>
   12260:	18c00404 	addi	r3,r3,16
   12264:	10800044 	addi	r2,r2,1
   12268:	45000015 	stw	r20,0(r8)
   1226c:	44400115 	stw	r17,4(r8)
   12270:	d8c02015 	stw	r3,128(sp)
   12274:	d8801f15 	stw	r2,124(sp)
   12278:	b0bff60e 	bge	r22,r2,12254 <__alt_data_end+0xfc012254>
   1227c:	d9801e04 	addi	r6,sp,120
   12280:	b80b883a 	mov	r5,r23
   12284:	9809883a 	mov	r4,r19
   12288:	00195b40 	call	195b4 <__sprint_r>
   1228c:	103d0a1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12290:	d8c02017 	ldw	r3,128(sp)
   12294:	d8801f17 	ldw	r2,124(sp)
   12298:	da000404 	addi	r8,sp,16
   1229c:	003fee06 	br	12258 <__alt_data_end+0xfc012258>
   122a0:	d9403117 	ldw	r5,196(sp)
   122a4:	d8802917 	ldw	r2,164(sp)
   122a8:	28adc83a 	sub	r22,r5,r2
   122ac:	05be410e 	bge	zero,r22,11bb4 <__alt_data_end+0xfc011bb4>
   122b0:	07000404 	movi	fp,16
   122b4:	d8801f17 	ldw	r2,124(sp)
   122b8:	e5838f0e 	bge	fp,r22,130f8 <___vfprintf_internal_r+0x1e50>
   122bc:	014000f4 	movhi	r5,3
   122c0:	29692184 	addi	r5,r5,-23418
   122c4:	dc403015 	stw	r17,192(sp)
   122c8:	d9402c15 	stw	r5,176(sp)
   122cc:	b023883a 	mov	r17,r22
   122d0:	04c001c4 	movi	r19,7
   122d4:	a82d883a 	mov	r22,r21
   122d8:	902b883a 	mov	r21,r18
   122dc:	8025883a 	mov	r18,r16
   122e0:	dc002d17 	ldw	r16,180(sp)
   122e4:	00000306 	br	122f4 <___vfprintf_internal_r+0x104c>
   122e8:	8c7ffc04 	addi	r17,r17,-16
   122ec:	42000204 	addi	r8,r8,8
   122f0:	e440110e 	bge	fp,r17,12338 <___vfprintf_internal_r+0x1090>
   122f4:	18c00404 	addi	r3,r3,16
   122f8:	10800044 	addi	r2,r2,1
   122fc:	45000015 	stw	r20,0(r8)
   12300:	47000115 	stw	fp,4(r8)
   12304:	d8c02015 	stw	r3,128(sp)
   12308:	d8801f15 	stw	r2,124(sp)
   1230c:	98bff60e 	bge	r19,r2,122e8 <__alt_data_end+0xfc0122e8>
   12310:	d9801e04 	addi	r6,sp,120
   12314:	b80b883a 	mov	r5,r23
   12318:	8009883a 	mov	r4,r16
   1231c:	00195b40 	call	195b4 <__sprint_r>
   12320:	103ce51e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12324:	8c7ffc04 	addi	r17,r17,-16
   12328:	d8c02017 	ldw	r3,128(sp)
   1232c:	d8801f17 	ldw	r2,124(sp)
   12330:	da000404 	addi	r8,sp,16
   12334:	e47fef16 	blt	fp,r17,122f4 <__alt_data_end+0xfc0122f4>
   12338:	9021883a 	mov	r16,r18
   1233c:	a825883a 	mov	r18,r21
   12340:	b02b883a 	mov	r21,r22
   12344:	882d883a 	mov	r22,r17
   12348:	dc403017 	ldw	r17,192(sp)
   1234c:	d9002c17 	ldw	r4,176(sp)
   12350:	1d87883a 	add	r3,r3,r22
   12354:	10800044 	addi	r2,r2,1
   12358:	41000015 	stw	r4,0(r8)
   1235c:	45800115 	stw	r22,4(r8)
   12360:	d8c02015 	stw	r3,128(sp)
   12364:	d8801f15 	stw	r2,124(sp)
   12368:	010001c4 	movi	r4,7
   1236c:	20818e16 	blt	r4,r2,129a8 <___vfprintf_internal_r+0x1700>
   12370:	42000204 	addi	r8,r8,8
   12374:	003e0f06 	br	11bb4 <__alt_data_end+0xfc011bb4>
   12378:	d9403317 	ldw	r5,204(sp)
   1237c:	00800044 	movi	r2,1
   12380:	18c00044 	addi	r3,r3,1
   12384:	1141530e 	bge	r2,r5,128d4 <___vfprintf_internal_r+0x162c>
   12388:	dc401f17 	ldw	r17,124(sp)
   1238c:	00800044 	movi	r2,1
   12390:	40800115 	stw	r2,4(r8)
   12394:	8c400044 	addi	r17,r17,1
   12398:	44000015 	stw	r16,0(r8)
   1239c:	d8c02015 	stw	r3,128(sp)
   123a0:	dc401f15 	stw	r17,124(sp)
   123a4:	008001c4 	movi	r2,7
   123a8:	14416b16 	blt	r2,r17,12958 <___vfprintf_internal_r+0x16b0>
   123ac:	42000204 	addi	r8,r8,8
   123b0:	d8803717 	ldw	r2,220(sp)
   123b4:	d9003417 	ldw	r4,208(sp)
   123b8:	8c400044 	addi	r17,r17,1
   123bc:	10c7883a 	add	r3,r2,r3
   123c0:	40800115 	stw	r2,4(r8)
   123c4:	41000015 	stw	r4,0(r8)
   123c8:	d8c02015 	stw	r3,128(sp)
   123cc:	dc401f15 	stw	r17,124(sp)
   123d0:	008001c4 	movi	r2,7
   123d4:	14416916 	blt	r2,r17,1297c <___vfprintf_internal_r+0x16d4>
   123d8:	45800204 	addi	r22,r8,8
   123dc:	d9003617 	ldw	r4,216(sp)
   123e0:	d9403817 	ldw	r5,224(sp)
   123e4:	000d883a 	mov	r6,zero
   123e8:	000f883a 	mov	r7,zero
   123ec:	d8c03c15 	stw	r3,240(sp)
   123f0:	001d3380 	call	1d338 <__eqdf2>
   123f4:	d8c03c17 	ldw	r3,240(sp)
   123f8:	1000bc26 	beq	r2,zero,126ec <___vfprintf_internal_r+0x1444>
   123fc:	d9403317 	ldw	r5,204(sp)
   12400:	84000044 	addi	r16,r16,1
   12404:	8c400044 	addi	r17,r17,1
   12408:	28bfffc4 	addi	r2,r5,-1
   1240c:	1887883a 	add	r3,r3,r2
   12410:	b0800115 	stw	r2,4(r22)
   12414:	b4000015 	stw	r16,0(r22)
   12418:	d8c02015 	stw	r3,128(sp)
   1241c:	dc401f15 	stw	r17,124(sp)
   12420:	008001c4 	movi	r2,7
   12424:	14414316 	blt	r2,r17,12934 <___vfprintf_internal_r+0x168c>
   12428:	b5800204 	addi	r22,r22,8
   1242c:	d9003a17 	ldw	r4,232(sp)
   12430:	df0022c4 	addi	fp,sp,139
   12434:	8c400044 	addi	r17,r17,1
   12438:	20c7883a 	add	r3,r4,r3
   1243c:	b7000015 	stw	fp,0(r22)
   12440:	b1000115 	stw	r4,4(r22)
   12444:	d8c02015 	stw	r3,128(sp)
   12448:	dc401f15 	stw	r17,124(sp)
   1244c:	008001c4 	movi	r2,7
   12450:	14400e16 	blt	r2,r17,1248c <___vfprintf_internal_r+0x11e4>
   12454:	b2000204 	addi	r8,r22,8
   12458:	003e1806 	br	11cbc <__alt_data_end+0xfc011cbc>
   1245c:	010000f4 	movhi	r4,3
   12460:	21292184 	addi	r4,r4,-23418
   12464:	d9002c15 	stw	r4,176(sp)
   12468:	d9002c17 	ldw	r4,176(sp)
   1246c:	1c07883a 	add	r3,r3,r16
   12470:	44000115 	stw	r16,4(r8)
   12474:	41000015 	stw	r4,0(r8)
   12478:	10800044 	addi	r2,r2,1
   1247c:	d8c02015 	stw	r3,128(sp)
   12480:	d8801f15 	stw	r2,124(sp)
   12484:	010001c4 	movi	r4,7
   12488:	20be0b0e 	bge	r4,r2,11cb8 <__alt_data_end+0xfc011cb8>
   1248c:	d9002d17 	ldw	r4,180(sp)
   12490:	d9801e04 	addi	r6,sp,120
   12494:	b80b883a 	mov	r5,r23
   12498:	00195b40 	call	195b4 <__sprint_r>
   1249c:	103c861e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   124a0:	d8c02017 	ldw	r3,128(sp)
   124a4:	da000404 	addi	r8,sp,16
   124a8:	003e0406 	br	11cbc <__alt_data_end+0xfc011cbc>
   124ac:	d9002d17 	ldw	r4,180(sp)
   124b0:	d9801e04 	addi	r6,sp,120
   124b4:	b80b883a 	mov	r5,r23
   124b8:	00195b40 	call	195b4 <__sprint_r>
   124bc:	103e3b26 	beq	r2,zero,11dac <__alt_data_end+0xfc011dac>
   124c0:	003c7d06 	br	116b8 <__alt_data_end+0xfc0116b8>
   124c4:	d9002d17 	ldw	r4,180(sp)
   124c8:	d9801e04 	addi	r6,sp,120
   124cc:	b80b883a 	mov	r5,r23
   124d0:	00195b40 	call	195b4 <__sprint_r>
   124d4:	103c781e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   124d8:	d8c02017 	ldw	r3,128(sp)
   124dc:	da000404 	addi	r8,sp,16
   124e0:	003de906 	br	11c88 <__alt_data_end+0xfc011c88>
   124e4:	d9002d17 	ldw	r4,180(sp)
   124e8:	d9801e04 	addi	r6,sp,120
   124ec:	b80b883a 	mov	r5,r23
   124f0:	00195b40 	call	195b4 <__sprint_r>
   124f4:	103c701e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   124f8:	d8c02017 	ldw	r3,128(sp)
   124fc:	da000404 	addi	r8,sp,16
   12500:	003d9b06 	br	11b70 <__alt_data_end+0xfc011b70>
   12504:	d9002d17 	ldw	r4,180(sp)
   12508:	d9801e04 	addi	r6,sp,120
   1250c:	b80b883a 	mov	r5,r23
   12510:	00195b40 	call	195b4 <__sprint_r>
   12514:	103c681e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12518:	d8c02017 	ldw	r3,128(sp)
   1251c:	da000404 	addi	r8,sp,16
   12520:	003da106 	br	11ba8 <__alt_data_end+0xfc011ba8>
   12524:	d9402a17 	ldw	r5,168(sp)
   12528:	d8002785 	stb	zero,158(sp)
   1252c:	283f0616 	blt	r5,zero,12148 <__alt_data_end+0xfc012148>
   12530:	00ffdfc4 	movi	r3,-129
   12534:	9d84b03a 	or	r2,r19,r22
   12538:	90e4703a 	and	r18,r18,r3
   1253c:	103c3b26 	beq	r2,zero,1162c <__alt_data_end+0xfc01162c>
   12540:	0039883a 	mov	fp,zero
   12544:	003e5806 	br	11ea8 <__alt_data_end+0xfc011ea8>
   12548:	9080040c 	andi	r2,r18,16
   1254c:	1001b326 	beq	r2,zero,12c1c <___vfprintf_internal_r+0x1974>
   12550:	d8c02e17 	ldw	r3,184(sp)
   12554:	d9002a17 	ldw	r4,168(sp)
   12558:	d8002785 	stb	zero,158(sp)
   1255c:	18800104 	addi	r2,r3,4
   12560:	1cc00017 	ldw	r19,0(r3)
   12564:	002d883a 	mov	r22,zero
   12568:	2001b516 	blt	r4,zero,12c40 <___vfprintf_internal_r+0x1998>
   1256c:	00ffdfc4 	movi	r3,-129
   12570:	d8802e15 	stw	r2,184(sp)
   12574:	90e4703a 	and	r18,r18,r3
   12578:	983d0526 	beq	r19,zero,11990 <__alt_data_end+0xfc011990>
   1257c:	0039883a 	mov	fp,zero
   12580:	003d0806 	br	119a4 <__alt_data_end+0xfc0119a4>
   12584:	dc402617 	ldw	r17,152(sp)
   12588:	0441d30e 	bge	zero,r17,12cd8 <___vfprintf_internal_r+0x1a30>
   1258c:	dc403217 	ldw	r17,200(sp)
   12590:	d8803317 	ldw	r2,204(sp)
   12594:	1440010e 	bge	r2,r17,1259c <___vfprintf_internal_r+0x12f4>
   12598:	1023883a 	mov	r17,r2
   1259c:	04400a0e 	bge	zero,r17,125c8 <___vfprintf_internal_r+0x1320>
   125a0:	d8801f17 	ldw	r2,124(sp)
   125a4:	1c47883a 	add	r3,r3,r17
   125a8:	44000015 	stw	r16,0(r8)
   125ac:	10800044 	addi	r2,r2,1
   125b0:	44400115 	stw	r17,4(r8)
   125b4:	d8c02015 	stw	r3,128(sp)
   125b8:	d8801f15 	stw	r2,124(sp)
   125bc:	010001c4 	movi	r4,7
   125c0:	20826516 	blt	r4,r2,12f58 <___vfprintf_internal_r+0x1cb0>
   125c4:	42000204 	addi	r8,r8,8
   125c8:	88026116 	blt	r17,zero,12f50 <___vfprintf_internal_r+0x1ca8>
   125cc:	d9003217 	ldw	r4,200(sp)
   125d0:	2463c83a 	sub	r17,r4,r17
   125d4:	04407b0e 	bge	zero,r17,127c4 <___vfprintf_internal_r+0x151c>
   125d8:	05800404 	movi	r22,16
   125dc:	d8801f17 	ldw	r2,124(sp)
   125e0:	b4419d0e 	bge	r22,r17,12c58 <___vfprintf_internal_r+0x19b0>
   125e4:	010000f4 	movhi	r4,3
   125e8:	21292184 	addi	r4,r4,-23418
   125ec:	d9002c15 	stw	r4,176(sp)
   125f0:	070001c4 	movi	fp,7
   125f4:	dcc02d17 	ldw	r19,180(sp)
   125f8:	00000306 	br	12608 <___vfprintf_internal_r+0x1360>
   125fc:	42000204 	addi	r8,r8,8
   12600:	8c7ffc04 	addi	r17,r17,-16
   12604:	b441970e 	bge	r22,r17,12c64 <___vfprintf_internal_r+0x19bc>
   12608:	18c00404 	addi	r3,r3,16
   1260c:	10800044 	addi	r2,r2,1
   12610:	45000015 	stw	r20,0(r8)
   12614:	45800115 	stw	r22,4(r8)
   12618:	d8c02015 	stw	r3,128(sp)
   1261c:	d8801f15 	stw	r2,124(sp)
   12620:	e0bff60e 	bge	fp,r2,125fc <__alt_data_end+0xfc0125fc>
   12624:	d9801e04 	addi	r6,sp,120
   12628:	b80b883a 	mov	r5,r23
   1262c:	9809883a 	mov	r4,r19
   12630:	00195b40 	call	195b4 <__sprint_r>
   12634:	103c201e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12638:	d8c02017 	ldw	r3,128(sp)
   1263c:	d8801f17 	ldw	r2,124(sp)
   12640:	da000404 	addi	r8,sp,16
   12644:	003fee06 	br	12600 <__alt_data_end+0xfc012600>
   12648:	d9002d17 	ldw	r4,180(sp)
   1264c:	d9801e04 	addi	r6,sp,120
   12650:	b80b883a 	mov	r5,r23
   12654:	00195b40 	call	195b4 <__sprint_r>
   12658:	103c171e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   1265c:	d8c02017 	ldw	r3,128(sp)
   12660:	df002787 	ldb	fp,158(sp)
   12664:	da000404 	addi	r8,sp,16
   12668:	003d3406 	br	11b3c <__alt_data_end+0xfc011b3c>
   1266c:	9080040c 	andi	r2,r18,16
   12670:	10016126 	beq	r2,zero,12bf8 <___vfprintf_internal_r+0x1950>
   12674:	d9402e17 	ldw	r5,184(sp)
   12678:	2cc00017 	ldw	r19,0(r5)
   1267c:	29400104 	addi	r5,r5,4
   12680:	d9402e15 	stw	r5,184(sp)
   12684:	982dd7fa 	srai	r22,r19,31
   12688:	b005883a 	mov	r2,r22
   1268c:	003c5a06 	br	117f8 <__alt_data_end+0xfc0117f8>
   12690:	9080040c 	andi	r2,r18,16
   12694:	10003526 	beq	r2,zero,1276c <___vfprintf_internal_r+0x14c4>
   12698:	d8c02e17 	ldw	r3,184(sp)
   1269c:	d9002a17 	ldw	r4,168(sp)
   126a0:	d8002785 	stb	zero,158(sp)
   126a4:	18800104 	addi	r2,r3,4
   126a8:	1cc00017 	ldw	r19,0(r3)
   126ac:	002d883a 	mov	r22,zero
   126b0:	20003716 	blt	r4,zero,12790 <___vfprintf_internal_r+0x14e8>
   126b4:	00ffdfc4 	movi	r3,-129
   126b8:	d8802e15 	stw	r2,184(sp)
   126bc:	90e4703a 	and	r18,r18,r3
   126c0:	0039883a 	mov	fp,zero
   126c4:	983dd426 	beq	r19,zero,11e18 <__alt_data_end+0xfc011e18>
   126c8:	00800244 	movi	r2,9
   126cc:	14fc5336 	bltu	r2,r19,1181c <__alt_data_end+0xfc01181c>
   126d0:	d8c02817 	ldw	r3,160(sp)
   126d4:	dc001dc4 	addi	r16,sp,119
   126d8:	9cc00c04 	addi	r19,r19,48
   126dc:	1c07c83a 	sub	r3,r3,r16
   126e0:	dcc01dc5 	stb	r19,119(sp)
   126e4:	d8c02b15 	stw	r3,172(sp)
   126e8:	003cc606 	br	11a04 <__alt_data_end+0xfc011a04>
   126ec:	d8803317 	ldw	r2,204(sp)
   126f0:	143fffc4 	addi	r16,r2,-1
   126f4:	043f4d0e 	bge	zero,r16,1242c <__alt_data_end+0xfc01242c>
   126f8:	07000404 	movi	fp,16
   126fc:	e400810e 	bge	fp,r16,12904 <___vfprintf_internal_r+0x165c>
   12700:	014000f4 	movhi	r5,3
   12704:	29692184 	addi	r5,r5,-23418
   12708:	d9402c15 	stw	r5,176(sp)
   1270c:	01c001c4 	movi	r7,7
   12710:	dcc02d17 	ldw	r19,180(sp)
   12714:	00000306 	br	12724 <___vfprintf_internal_r+0x147c>
   12718:	b5800204 	addi	r22,r22,8
   1271c:	843ffc04 	addi	r16,r16,-16
   12720:	e4007b0e 	bge	fp,r16,12910 <___vfprintf_internal_r+0x1668>
   12724:	18c00404 	addi	r3,r3,16
   12728:	8c400044 	addi	r17,r17,1
   1272c:	b5000015 	stw	r20,0(r22)
   12730:	b7000115 	stw	fp,4(r22)
   12734:	d8c02015 	stw	r3,128(sp)
   12738:	dc401f15 	stw	r17,124(sp)
   1273c:	3c7ff60e 	bge	r7,r17,12718 <__alt_data_end+0xfc012718>
   12740:	d9801e04 	addi	r6,sp,120
   12744:	b80b883a 	mov	r5,r23
   12748:	9809883a 	mov	r4,r19
   1274c:	d9c03c15 	stw	r7,240(sp)
   12750:	00195b40 	call	195b4 <__sprint_r>
   12754:	d9c03c17 	ldw	r7,240(sp)
   12758:	103bd71e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   1275c:	d8c02017 	ldw	r3,128(sp)
   12760:	dc401f17 	ldw	r17,124(sp)
   12764:	dd800404 	addi	r22,sp,16
   12768:	003fec06 	br	1271c <__alt_data_end+0xfc01271c>
   1276c:	9080100c 	andi	r2,r18,64
   12770:	d8002785 	stb	zero,158(sp)
   12774:	10010e26 	beq	r2,zero,12bb0 <___vfprintf_internal_r+0x1908>
   12778:	d9402e17 	ldw	r5,184(sp)
   1277c:	d8c02a17 	ldw	r3,168(sp)
   12780:	002d883a 	mov	r22,zero
   12784:	28800104 	addi	r2,r5,4
   12788:	2cc0000b 	ldhu	r19,0(r5)
   1278c:	183fc90e 	bge	r3,zero,126b4 <__alt_data_end+0xfc0126b4>
   12790:	d8802e15 	stw	r2,184(sp)
   12794:	0039883a 	mov	fp,zero
   12798:	9d84b03a 	or	r2,r19,r22
   1279c:	103c1e1e 	bne	r2,zero,11818 <__alt_data_end+0xfc011818>
   127a0:	00800044 	movi	r2,1
   127a4:	003e6c06 	br	12158 <__alt_data_end+0xfc012158>
   127a8:	d9002d17 	ldw	r4,180(sp)
   127ac:	d9801e04 	addi	r6,sp,120
   127b0:	b80b883a 	mov	r5,r23
   127b4:	00195b40 	call	195b4 <__sprint_r>
   127b8:	103bbf1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   127bc:	d8c02017 	ldw	r3,128(sp)
   127c0:	da000404 	addi	r8,sp,16
   127c4:	d9003217 	ldw	r4,200(sp)
   127c8:	d8802617 	ldw	r2,152(sp)
   127cc:	d9403317 	ldw	r5,204(sp)
   127d0:	8123883a 	add	r17,r16,r4
   127d4:	11400216 	blt	r2,r5,127e0 <___vfprintf_internal_r+0x1538>
   127d8:	9100004c 	andi	r4,r18,1
   127dc:	20000d26 	beq	r4,zero,12814 <___vfprintf_internal_r+0x156c>
   127e0:	d9003717 	ldw	r4,220(sp)
   127e4:	d9403417 	ldw	r5,208(sp)
   127e8:	1907883a 	add	r3,r3,r4
   127ec:	d9001f17 	ldw	r4,124(sp)
   127f0:	41400015 	stw	r5,0(r8)
   127f4:	d9403717 	ldw	r5,220(sp)
   127f8:	21000044 	addi	r4,r4,1
   127fc:	d8c02015 	stw	r3,128(sp)
   12800:	41400115 	stw	r5,4(r8)
   12804:	d9001f15 	stw	r4,124(sp)
   12808:	014001c4 	movi	r5,7
   1280c:	2901e816 	blt	r5,r4,12fb0 <___vfprintf_internal_r+0x1d08>
   12810:	42000204 	addi	r8,r8,8
   12814:	d9003317 	ldw	r4,204(sp)
   12818:	8121883a 	add	r16,r16,r4
   1281c:	2085c83a 	sub	r2,r4,r2
   12820:	8461c83a 	sub	r16,r16,r17
   12824:	1400010e 	bge	r2,r16,1282c <___vfprintf_internal_r+0x1584>
   12828:	1021883a 	mov	r16,r2
   1282c:	04000a0e 	bge	zero,r16,12858 <___vfprintf_internal_r+0x15b0>
   12830:	d9001f17 	ldw	r4,124(sp)
   12834:	1c07883a 	add	r3,r3,r16
   12838:	44400015 	stw	r17,0(r8)
   1283c:	21000044 	addi	r4,r4,1
   12840:	44000115 	stw	r16,4(r8)
   12844:	d8c02015 	stw	r3,128(sp)
   12848:	d9001f15 	stw	r4,124(sp)
   1284c:	014001c4 	movi	r5,7
   12850:	2901fb16 	blt	r5,r4,13040 <___vfprintf_internal_r+0x1d98>
   12854:	42000204 	addi	r8,r8,8
   12858:	8001f716 	blt	r16,zero,13038 <___vfprintf_internal_r+0x1d90>
   1285c:	1421c83a 	sub	r16,r2,r16
   12860:	043d160e 	bge	zero,r16,11cbc <__alt_data_end+0xfc011cbc>
   12864:	04400404 	movi	r17,16
   12868:	d8801f17 	ldw	r2,124(sp)
   1286c:	8c3efb0e 	bge	r17,r16,1245c <__alt_data_end+0xfc01245c>
   12870:	014000f4 	movhi	r5,3
   12874:	29692184 	addi	r5,r5,-23418
   12878:	d9402c15 	stw	r5,176(sp)
   1287c:	058001c4 	movi	r22,7
   12880:	dcc02d17 	ldw	r19,180(sp)
   12884:	00000306 	br	12894 <___vfprintf_internal_r+0x15ec>
   12888:	42000204 	addi	r8,r8,8
   1288c:	843ffc04 	addi	r16,r16,-16
   12890:	8c3ef50e 	bge	r17,r16,12468 <__alt_data_end+0xfc012468>
   12894:	18c00404 	addi	r3,r3,16
   12898:	10800044 	addi	r2,r2,1
   1289c:	45000015 	stw	r20,0(r8)
   128a0:	44400115 	stw	r17,4(r8)
   128a4:	d8c02015 	stw	r3,128(sp)
   128a8:	d8801f15 	stw	r2,124(sp)
   128ac:	b0bff60e 	bge	r22,r2,12888 <__alt_data_end+0xfc012888>
   128b0:	d9801e04 	addi	r6,sp,120
   128b4:	b80b883a 	mov	r5,r23
   128b8:	9809883a 	mov	r4,r19
   128bc:	00195b40 	call	195b4 <__sprint_r>
   128c0:	103b7d1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   128c4:	d8c02017 	ldw	r3,128(sp)
   128c8:	d8801f17 	ldw	r2,124(sp)
   128cc:	da000404 	addi	r8,sp,16
   128d0:	003fee06 	br	1288c <__alt_data_end+0xfc01288c>
   128d4:	9088703a 	and	r4,r18,r2
   128d8:	203eab1e 	bne	r4,zero,12388 <__alt_data_end+0xfc012388>
   128dc:	dc401f17 	ldw	r17,124(sp)
   128e0:	40800115 	stw	r2,4(r8)
   128e4:	44000015 	stw	r16,0(r8)
   128e8:	8c400044 	addi	r17,r17,1
   128ec:	d8c02015 	stw	r3,128(sp)
   128f0:	dc401f15 	stw	r17,124(sp)
   128f4:	008001c4 	movi	r2,7
   128f8:	14400e16 	blt	r2,r17,12934 <___vfprintf_internal_r+0x168c>
   128fc:	45800204 	addi	r22,r8,8
   12900:	003eca06 	br	1242c <__alt_data_end+0xfc01242c>
   12904:	010000f4 	movhi	r4,3
   12908:	21292184 	addi	r4,r4,-23418
   1290c:	d9002c15 	stw	r4,176(sp)
   12910:	d8802c17 	ldw	r2,176(sp)
   12914:	1c07883a 	add	r3,r3,r16
   12918:	8c400044 	addi	r17,r17,1
   1291c:	b0800015 	stw	r2,0(r22)
   12920:	b4000115 	stw	r16,4(r22)
   12924:	d8c02015 	stw	r3,128(sp)
   12928:	dc401f15 	stw	r17,124(sp)
   1292c:	008001c4 	movi	r2,7
   12930:	147ebd0e 	bge	r2,r17,12428 <__alt_data_end+0xfc012428>
   12934:	d9002d17 	ldw	r4,180(sp)
   12938:	d9801e04 	addi	r6,sp,120
   1293c:	b80b883a 	mov	r5,r23
   12940:	00195b40 	call	195b4 <__sprint_r>
   12944:	103b5c1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12948:	d8c02017 	ldw	r3,128(sp)
   1294c:	dc401f17 	ldw	r17,124(sp)
   12950:	dd800404 	addi	r22,sp,16
   12954:	003eb506 	br	1242c <__alt_data_end+0xfc01242c>
   12958:	d9002d17 	ldw	r4,180(sp)
   1295c:	d9801e04 	addi	r6,sp,120
   12960:	b80b883a 	mov	r5,r23
   12964:	00195b40 	call	195b4 <__sprint_r>
   12968:	103b531e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   1296c:	d8c02017 	ldw	r3,128(sp)
   12970:	dc401f17 	ldw	r17,124(sp)
   12974:	da000404 	addi	r8,sp,16
   12978:	003e8d06 	br	123b0 <__alt_data_end+0xfc0123b0>
   1297c:	d9002d17 	ldw	r4,180(sp)
   12980:	d9801e04 	addi	r6,sp,120
   12984:	b80b883a 	mov	r5,r23
   12988:	00195b40 	call	195b4 <__sprint_r>
   1298c:	103b4a1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12990:	d8c02017 	ldw	r3,128(sp)
   12994:	dc401f17 	ldw	r17,124(sp)
   12998:	dd800404 	addi	r22,sp,16
   1299c:	003e8f06 	br	123dc <__alt_data_end+0xfc0123dc>
   129a0:	0027883a 	mov	r19,zero
   129a4:	003f4a06 	br	126d0 <__alt_data_end+0xfc0126d0>
   129a8:	d9002d17 	ldw	r4,180(sp)
   129ac:	d9801e04 	addi	r6,sp,120
   129b0:	b80b883a 	mov	r5,r23
   129b4:	00195b40 	call	195b4 <__sprint_r>
   129b8:	103b3f1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   129bc:	d8c02017 	ldw	r3,128(sp)
   129c0:	da000404 	addi	r8,sp,16
   129c4:	003c7b06 	br	11bb4 <__alt_data_end+0xfc011bb4>
   129c8:	d9402a17 	ldw	r5,168(sp)
   129cc:	04e7c83a 	sub	r19,zero,r19
   129d0:	07000b44 	movi	fp,45
   129d4:	9804c03a 	cmpne	r2,r19,zero
   129d8:	05adc83a 	sub	r22,zero,r22
   129dc:	df002785 	stb	fp,158(sp)
   129e0:	b0adc83a 	sub	r22,r22,r2
   129e4:	28017b16 	blt	r5,zero,12fd4 <___vfprintf_internal_r+0x1d2c>
   129e8:	00bfdfc4 	movi	r2,-129
   129ec:	90a4703a 	and	r18,r18,r2
   129f0:	003b8906 	br	11818 <__alt_data_end+0xfc011818>
   129f4:	d9003617 	ldw	r4,216(sp)
   129f8:	d9403817 	ldw	r5,224(sp)
   129fc:	da003d15 	stw	r8,244(sp)
   12a00:	0017d980 	call	17d98 <__fpclassifyd>
   12a04:	da003d17 	ldw	r8,244(sp)
   12a08:	1000f026 	beq	r2,zero,12dcc <___vfprintf_internal_r+0x1b24>
   12a0c:	d9002a17 	ldw	r4,168(sp)
   12a10:	05bff7c4 	movi	r22,-33
   12a14:	00bfffc4 	movi	r2,-1
   12a18:	8dac703a 	and	r22,r17,r22
   12a1c:	20820026 	beq	r4,r2,13220 <___vfprintf_internal_r+0x1f78>
   12a20:	008011c4 	movi	r2,71
   12a24:	b081f726 	beq	r22,r2,13204 <___vfprintf_internal_r+0x1f5c>
   12a28:	d9003817 	ldw	r4,224(sp)
   12a2c:	90c04014 	ori	r3,r18,256
   12a30:	d8c02c15 	stw	r3,176(sp)
   12a34:	20021516 	blt	r4,zero,1328c <___vfprintf_internal_r+0x1fe4>
   12a38:	dcc03817 	ldw	r19,224(sp)
   12a3c:	d8002905 	stb	zero,164(sp)
   12a40:	00801984 	movi	r2,102
   12a44:	8881f926 	beq	r17,r2,1322c <___vfprintf_internal_r+0x1f84>
   12a48:	00801184 	movi	r2,70
   12a4c:	88821c26 	beq	r17,r2,132c0 <___vfprintf_internal_r+0x2018>
   12a50:	00801144 	movi	r2,69
   12a54:	b081ef26 	beq	r22,r2,13214 <___vfprintf_internal_r+0x1f6c>
   12a58:	d8c02a17 	ldw	r3,168(sp)
   12a5c:	d8802104 	addi	r2,sp,132
   12a60:	d8800315 	stw	r2,12(sp)
   12a64:	d9403617 	ldw	r5,216(sp)
   12a68:	d8802504 	addi	r2,sp,148
   12a6c:	d9002d17 	ldw	r4,180(sp)
   12a70:	d8800215 	stw	r2,8(sp)
   12a74:	d8802604 	addi	r2,sp,152
   12a78:	d8c00015 	stw	r3,0(sp)
   12a7c:	d8800115 	stw	r2,4(sp)
   12a80:	01c00084 	movi	r7,2
   12a84:	980d883a 	mov	r6,r19
   12a88:	d8c03c15 	stw	r3,240(sp)
   12a8c:	da003d15 	stw	r8,244(sp)
   12a90:	00139d80 	call	139d8 <_dtoa_r>
   12a94:	1021883a 	mov	r16,r2
   12a98:	008019c4 	movi	r2,103
   12a9c:	d8c03c17 	ldw	r3,240(sp)
   12aa0:	da003d17 	ldw	r8,244(sp)
   12aa4:	88817126 	beq	r17,r2,1306c <___vfprintf_internal_r+0x1dc4>
   12aa8:	008011c4 	movi	r2,71
   12aac:	88829126 	beq	r17,r2,134f4 <___vfprintf_internal_r+0x224c>
   12ab0:	80f9883a 	add	fp,r16,r3
   12ab4:	d9003617 	ldw	r4,216(sp)
   12ab8:	000d883a 	mov	r6,zero
   12abc:	000f883a 	mov	r7,zero
   12ac0:	980b883a 	mov	r5,r19
   12ac4:	da003d15 	stw	r8,244(sp)
   12ac8:	001d3380 	call	1d338 <__eqdf2>
   12acc:	da003d17 	ldw	r8,244(sp)
   12ad0:	10018d26 	beq	r2,zero,13108 <___vfprintf_internal_r+0x1e60>
   12ad4:	d8802117 	ldw	r2,132(sp)
   12ad8:	1700062e 	bgeu	r2,fp,12af4 <___vfprintf_internal_r+0x184c>
   12adc:	01000c04 	movi	r4,48
   12ae0:	10c00044 	addi	r3,r2,1
   12ae4:	d8c02115 	stw	r3,132(sp)
   12ae8:	11000005 	stb	r4,0(r2)
   12aec:	d8802117 	ldw	r2,132(sp)
   12af0:	173ffb36 	bltu	r2,fp,12ae0 <__alt_data_end+0xfc012ae0>
   12af4:	1405c83a 	sub	r2,r2,r16
   12af8:	d8803315 	stw	r2,204(sp)
   12afc:	008011c4 	movi	r2,71
   12b00:	b0817626 	beq	r22,r2,130dc <___vfprintf_internal_r+0x1e34>
   12b04:	00801944 	movi	r2,101
   12b08:	1442800e 	bge	r2,r17,1350c <___vfprintf_internal_r+0x2264>
   12b0c:	d8c02617 	ldw	r3,152(sp)
   12b10:	00801984 	movi	r2,102
   12b14:	d8c03215 	stw	r3,200(sp)
   12b18:	8881fe26 	beq	r17,r2,13314 <___vfprintf_internal_r+0x206c>
   12b1c:	d8c03217 	ldw	r3,200(sp)
   12b20:	d9003317 	ldw	r4,204(sp)
   12b24:	1901dd16 	blt	r3,r4,1329c <___vfprintf_internal_r+0x1ff4>
   12b28:	9480004c 	andi	r18,r18,1
   12b2c:	90022b1e 	bne	r18,zero,133dc <___vfprintf_internal_r+0x2134>
   12b30:	1805883a 	mov	r2,r3
   12b34:	18028316 	blt	r3,zero,13544 <___vfprintf_internal_r+0x229c>
   12b38:	d8c03217 	ldw	r3,200(sp)
   12b3c:	044019c4 	movi	r17,103
   12b40:	d8c02b15 	stw	r3,172(sp)
   12b44:	df002907 	ldb	fp,164(sp)
   12b48:	e001531e 	bne	fp,zero,13098 <___vfprintf_internal_r+0x1df0>
   12b4c:	df002783 	ldbu	fp,158(sp)
   12b50:	d8802915 	stw	r2,164(sp)
   12b54:	dc802c17 	ldw	r18,176(sp)
   12b58:	d8002a15 	stw	zero,168(sp)
   12b5c:	003baf06 	br	11a1c <__alt_data_end+0xfc011a1c>
   12b60:	d8c02e17 	ldw	r3,184(sp)
   12b64:	d9002e17 	ldw	r4,184(sp)
   12b68:	d9402e17 	ldw	r5,184(sp)
   12b6c:	18c00017 	ldw	r3,0(r3)
   12b70:	21000117 	ldw	r4,4(r4)
   12b74:	29400204 	addi	r5,r5,8
   12b78:	d8c03615 	stw	r3,216(sp)
   12b7c:	d9003815 	stw	r4,224(sp)
   12b80:	d9402e15 	stw	r5,184(sp)
   12b84:	003b5006 	br	118c8 <__alt_data_end+0xfc0118c8>
   12b88:	ac400007 	ldb	r17,0(r21)
   12b8c:	003a2806 	br	11430 <__alt_data_end+0xfc011430>
   12b90:	9080100c 	andi	r2,r18,64
   12b94:	1000a826 	beq	r2,zero,12e38 <___vfprintf_internal_r+0x1b90>
   12b98:	d8c02e17 	ldw	r3,184(sp)
   12b9c:	002d883a 	mov	r22,zero
   12ba0:	1cc0000b 	ldhu	r19,0(r3)
   12ba4:	18c00104 	addi	r3,r3,4
   12ba8:	d8c02e15 	stw	r3,184(sp)
   12bac:	003caf06 	br	11e6c <__alt_data_end+0xfc011e6c>
   12bb0:	d9002e17 	ldw	r4,184(sp)
   12bb4:	d9402a17 	ldw	r5,168(sp)
   12bb8:	002d883a 	mov	r22,zero
   12bbc:	20800104 	addi	r2,r4,4
   12bc0:	24c00017 	ldw	r19,0(r4)
   12bc4:	283ebb0e 	bge	r5,zero,126b4 <__alt_data_end+0xfc0126b4>
   12bc8:	003ef106 	br	12790 <__alt_data_end+0xfc012790>
   12bcc:	9080040c 	andi	r2,r18,16
   12bd0:	1000921e 	bne	r2,zero,12e1c <___vfprintf_internal_r+0x1b74>
   12bd4:	9480100c 	andi	r18,r18,64
   12bd8:	90013926 	beq	r18,zero,130c0 <___vfprintf_internal_r+0x1e18>
   12bdc:	d9402e17 	ldw	r5,184(sp)
   12be0:	d8c02f17 	ldw	r3,188(sp)
   12be4:	28800017 	ldw	r2,0(r5)
   12be8:	29400104 	addi	r5,r5,4
   12bec:	d9402e15 	stw	r5,184(sp)
   12bf0:	10c0000d 	sth	r3,0(r2)
   12bf4:	0039e406 	br	11388 <__alt_data_end+0xfc011388>
   12bf8:	9080100c 	andi	r2,r18,64
   12bfc:	10008026 	beq	r2,zero,12e00 <___vfprintf_internal_r+0x1b58>
   12c00:	d8802e17 	ldw	r2,184(sp)
   12c04:	14c0000f 	ldh	r19,0(r2)
   12c08:	10800104 	addi	r2,r2,4
   12c0c:	d8802e15 	stw	r2,184(sp)
   12c10:	982dd7fa 	srai	r22,r19,31
   12c14:	b005883a 	mov	r2,r22
   12c18:	003af706 	br	117f8 <__alt_data_end+0xfc0117f8>
   12c1c:	9080100c 	andi	r2,r18,64
   12c20:	d8002785 	stb	zero,158(sp)
   12c24:	10008a1e 	bne	r2,zero,12e50 <___vfprintf_internal_r+0x1ba8>
   12c28:	d9002e17 	ldw	r4,184(sp)
   12c2c:	d9402a17 	ldw	r5,168(sp)
   12c30:	002d883a 	mov	r22,zero
   12c34:	20800104 	addi	r2,r4,4
   12c38:	24c00017 	ldw	r19,0(r4)
   12c3c:	283e4b0e 	bge	r5,zero,1256c <__alt_data_end+0xfc01256c>
   12c40:	9d86b03a 	or	r3,r19,r22
   12c44:	d8802e15 	stw	r2,184(sp)
   12c48:	183e4c1e 	bne	r3,zero,1257c <__alt_data_end+0xfc01257c>
   12c4c:	0039883a 	mov	fp,zero
   12c50:	0005883a 	mov	r2,zero
   12c54:	003d4006 	br	12158 <__alt_data_end+0xfc012158>
   12c58:	014000f4 	movhi	r5,3
   12c5c:	29692184 	addi	r5,r5,-23418
   12c60:	d9402c15 	stw	r5,176(sp)
   12c64:	d9402c17 	ldw	r5,176(sp)
   12c68:	1c47883a 	add	r3,r3,r17
   12c6c:	10800044 	addi	r2,r2,1
   12c70:	41400015 	stw	r5,0(r8)
   12c74:	44400115 	stw	r17,4(r8)
   12c78:	d8c02015 	stw	r3,128(sp)
   12c7c:	d8801f15 	stw	r2,124(sp)
   12c80:	010001c4 	movi	r4,7
   12c84:	20bec816 	blt	r4,r2,127a8 <__alt_data_end+0xfc0127a8>
   12c88:	42000204 	addi	r8,r8,8
   12c8c:	003ecd06 	br	127c4 <__alt_data_end+0xfc0127c4>
   12c90:	d9002a17 	ldw	r4,168(sp)
   12c94:	d8002785 	stb	zero,158(sp)
   12c98:	203d2d16 	blt	r4,zero,12150 <__alt_data_end+0xfc012150>
   12c9c:	00bfdfc4 	movi	r2,-129
   12ca0:	90a4703a 	and	r18,r18,r2
   12ca4:	003a6106 	br	1162c <__alt_data_end+0xfc01162c>
   12ca8:	010000f4 	movhi	r4,3
   12cac:	21292184 	addi	r4,r4,-23418
   12cb0:	d9002c15 	stw	r4,176(sp)
   12cb4:	003bea06 	br	11c60 <__alt_data_end+0xfc011c60>
   12cb8:	d9002d17 	ldw	r4,180(sp)
   12cbc:	d9801e04 	addi	r6,sp,120
   12cc0:	b80b883a 	mov	r5,r23
   12cc4:	00195b40 	call	195b4 <__sprint_r>
   12cc8:	103a7b1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12ccc:	d8c02017 	ldw	r3,128(sp)
   12cd0:	da000404 	addi	r8,sp,16
   12cd4:	003d4106 	br	121dc <__alt_data_end+0xfc0121dc>
   12cd8:	d8801f17 	ldw	r2,124(sp)
   12cdc:	014000f4 	movhi	r5,3
   12ce0:	01000044 	movi	r4,1
   12ce4:	18c00044 	addi	r3,r3,1
   12ce8:	10800044 	addi	r2,r2,1
   12cec:	29691904 	addi	r5,r5,-23452
   12cf0:	41000115 	stw	r4,4(r8)
   12cf4:	41400015 	stw	r5,0(r8)
   12cf8:	d8c02015 	stw	r3,128(sp)
   12cfc:	d8801f15 	stw	r2,124(sp)
   12d00:	010001c4 	movi	r4,7
   12d04:	20805c16 	blt	r4,r2,12e78 <___vfprintf_internal_r+0x1bd0>
   12d08:	42000204 	addi	r8,r8,8
   12d0c:	8800041e 	bne	r17,zero,12d20 <___vfprintf_internal_r+0x1a78>
   12d10:	d8803317 	ldw	r2,204(sp)
   12d14:	1000021e 	bne	r2,zero,12d20 <___vfprintf_internal_r+0x1a78>
   12d18:	9080004c 	andi	r2,r18,1
   12d1c:	103be726 	beq	r2,zero,11cbc <__alt_data_end+0xfc011cbc>
   12d20:	d9003717 	ldw	r4,220(sp)
   12d24:	d8801f17 	ldw	r2,124(sp)
   12d28:	d9403417 	ldw	r5,208(sp)
   12d2c:	20c7883a 	add	r3,r4,r3
   12d30:	10800044 	addi	r2,r2,1
   12d34:	41000115 	stw	r4,4(r8)
   12d38:	41400015 	stw	r5,0(r8)
   12d3c:	d8c02015 	stw	r3,128(sp)
   12d40:	d8801f15 	stw	r2,124(sp)
   12d44:	010001c4 	movi	r4,7
   12d48:	20812116 	blt	r4,r2,131d0 <___vfprintf_internal_r+0x1f28>
   12d4c:	42000204 	addi	r8,r8,8
   12d50:	0463c83a 	sub	r17,zero,r17
   12d54:	0440730e 	bge	zero,r17,12f24 <___vfprintf_internal_r+0x1c7c>
   12d58:	05800404 	movi	r22,16
   12d5c:	b440860e 	bge	r22,r17,12f78 <___vfprintf_internal_r+0x1cd0>
   12d60:	014000f4 	movhi	r5,3
   12d64:	29692184 	addi	r5,r5,-23418
   12d68:	d9402c15 	stw	r5,176(sp)
   12d6c:	070001c4 	movi	fp,7
   12d70:	dcc02d17 	ldw	r19,180(sp)
   12d74:	00000306 	br	12d84 <___vfprintf_internal_r+0x1adc>
   12d78:	42000204 	addi	r8,r8,8
   12d7c:	8c7ffc04 	addi	r17,r17,-16
   12d80:	b440800e 	bge	r22,r17,12f84 <___vfprintf_internal_r+0x1cdc>
   12d84:	18c00404 	addi	r3,r3,16
   12d88:	10800044 	addi	r2,r2,1
   12d8c:	45000015 	stw	r20,0(r8)
   12d90:	45800115 	stw	r22,4(r8)
   12d94:	d8c02015 	stw	r3,128(sp)
   12d98:	d8801f15 	stw	r2,124(sp)
   12d9c:	e0bff60e 	bge	fp,r2,12d78 <__alt_data_end+0xfc012d78>
   12da0:	d9801e04 	addi	r6,sp,120
   12da4:	b80b883a 	mov	r5,r23
   12da8:	9809883a 	mov	r4,r19
   12dac:	00195b40 	call	195b4 <__sprint_r>
   12db0:	103a411e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12db4:	d8c02017 	ldw	r3,128(sp)
   12db8:	d8801f17 	ldw	r2,124(sp)
   12dbc:	da000404 	addi	r8,sp,16
   12dc0:	003fee06 	br	12d7c <__alt_data_end+0xfc012d7c>
   12dc4:	00bfffc4 	movi	r2,-1
   12dc8:	003a3f06 	br	116c8 <__alt_data_end+0xfc0116c8>
   12dcc:	008011c4 	movi	r2,71
   12dd0:	1440b816 	blt	r2,r17,130b4 <___vfprintf_internal_r+0x1e0c>
   12dd4:	040000f4 	movhi	r16,3
   12dd8:	84290b04 	addi	r16,r16,-23508
   12ddc:	00c000c4 	movi	r3,3
   12de0:	00bfdfc4 	movi	r2,-129
   12de4:	d8c02915 	stw	r3,164(sp)
   12de8:	90a4703a 	and	r18,r18,r2
   12dec:	df002783 	ldbu	fp,158(sp)
   12df0:	d8c02b15 	stw	r3,172(sp)
   12df4:	d8002a15 	stw	zero,168(sp)
   12df8:	d8003215 	stw	zero,200(sp)
   12dfc:	003b0706 	br	11a1c <__alt_data_end+0xfc011a1c>
   12e00:	d8c02e17 	ldw	r3,184(sp)
   12e04:	1cc00017 	ldw	r19,0(r3)
   12e08:	18c00104 	addi	r3,r3,4
   12e0c:	d8c02e15 	stw	r3,184(sp)
   12e10:	982dd7fa 	srai	r22,r19,31
   12e14:	b005883a 	mov	r2,r22
   12e18:	003a7706 	br	117f8 <__alt_data_end+0xfc0117f8>
   12e1c:	d8c02e17 	ldw	r3,184(sp)
   12e20:	d9002f17 	ldw	r4,188(sp)
   12e24:	18800017 	ldw	r2,0(r3)
   12e28:	18c00104 	addi	r3,r3,4
   12e2c:	d8c02e15 	stw	r3,184(sp)
   12e30:	11000015 	stw	r4,0(r2)
   12e34:	00395406 	br	11388 <__alt_data_end+0xfc011388>
   12e38:	d9002e17 	ldw	r4,184(sp)
   12e3c:	002d883a 	mov	r22,zero
   12e40:	24c00017 	ldw	r19,0(r4)
   12e44:	21000104 	addi	r4,r4,4
   12e48:	d9002e15 	stw	r4,184(sp)
   12e4c:	003c0706 	br	11e6c <__alt_data_end+0xfc011e6c>
   12e50:	d9402e17 	ldw	r5,184(sp)
   12e54:	d8c02a17 	ldw	r3,168(sp)
   12e58:	002d883a 	mov	r22,zero
   12e5c:	28800104 	addi	r2,r5,4
   12e60:	2cc0000b 	ldhu	r19,0(r5)
   12e64:	183dc10e 	bge	r3,zero,1256c <__alt_data_end+0xfc01256c>
   12e68:	003f7506 	br	12c40 <__alt_data_end+0xfc012c40>
   12e6c:	040000f4 	movhi	r16,3
   12e70:	84290904 	addi	r16,r16,-23516
   12e74:	003aa706 	br	11914 <__alt_data_end+0xfc011914>
   12e78:	d9002d17 	ldw	r4,180(sp)
   12e7c:	d9801e04 	addi	r6,sp,120
   12e80:	b80b883a 	mov	r5,r23
   12e84:	00195b40 	call	195b4 <__sprint_r>
   12e88:	103a0b1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12e8c:	dc402617 	ldw	r17,152(sp)
   12e90:	d8c02017 	ldw	r3,128(sp)
   12e94:	da000404 	addi	r8,sp,16
   12e98:	003f9c06 	br	12d0c <__alt_data_end+0xfc012d0c>
   12e9c:	ac400043 	ldbu	r17,1(r21)
   12ea0:	84000814 	ori	r16,r16,32
   12ea4:	ad400044 	addi	r21,r21,1
   12ea8:	8c403fcc 	andi	r17,r17,255
   12eac:	8c40201c 	xori	r17,r17,128
   12eb0:	8c7fe004 	addi	r17,r17,-128
   12eb4:	00395e06 	br	11430 <__alt_data_end+0xfc011430>
   12eb8:	d8c02e15 	stw	r3,184(sp)
   12ebc:	0039883a 	mov	fp,zero
   12ec0:	003e3506 	br	12798 <__alt_data_end+0xfc012798>
   12ec4:	d9002d17 	ldw	r4,180(sp)
   12ec8:	d9801e04 	addi	r6,sp,120
   12ecc:	b80b883a 	mov	r5,r23
   12ed0:	00195b40 	call	195b4 <__sprint_r>
   12ed4:	1039f81e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12ed8:	d8c02017 	ldw	r3,128(sp)
   12edc:	da000404 	addi	r8,sp,16
   12ee0:	003cd006 	br	12224 <__alt_data_end+0xfc012224>
   12ee4:	8009883a 	mov	r4,r16
   12ee8:	df003d15 	stw	fp,244(sp)
   12eec:	000ef4c0 	call	ef4c <strlen>
   12ef0:	d8802b15 	stw	r2,172(sp)
   12ef4:	da003d17 	ldw	r8,244(sp)
   12ef8:	103c200e 	bge	r2,zero,11f7c <__alt_data_end+0xfc011f7c>
   12efc:	0005883a 	mov	r2,zero
   12f00:	003c1e06 	br	11f7c <__alt_data_end+0xfc011f7c>
   12f04:	d9002d17 	ldw	r4,180(sp)
   12f08:	d9801e04 	addi	r6,sp,120
   12f0c:	b80b883a 	mov	r5,r23
   12f10:	00195b40 	call	195b4 <__sprint_r>
   12f14:	1039e81e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12f18:	d8c02017 	ldw	r3,128(sp)
   12f1c:	d8801f17 	ldw	r2,124(sp)
   12f20:	da000404 	addi	r8,sp,16
   12f24:	d9403317 	ldw	r5,204(sp)
   12f28:	10800044 	addi	r2,r2,1
   12f2c:	44000015 	stw	r16,0(r8)
   12f30:	28c7883a 	add	r3,r5,r3
   12f34:	003b5b06 	br	11ca4 <__alt_data_end+0xfc011ca4>
   12f38:	010000f4 	movhi	r4,3
   12f3c:	21292584 	addi	r4,r4,-23402
   12f40:	d9003515 	stw	r4,212(sp)
   12f44:	003af206 	br	11b10 <__alt_data_end+0xfc011b10>
   12f48:	013fffc4 	movi	r4,-1
   12f4c:	003a0806 	br	11770 <__alt_data_end+0xfc011770>
   12f50:	0023883a 	mov	r17,zero
   12f54:	003d9d06 	br	125cc <__alt_data_end+0xfc0125cc>
   12f58:	d9002d17 	ldw	r4,180(sp)
   12f5c:	d9801e04 	addi	r6,sp,120
   12f60:	b80b883a 	mov	r5,r23
   12f64:	00195b40 	call	195b4 <__sprint_r>
   12f68:	1039d31e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12f6c:	d8c02017 	ldw	r3,128(sp)
   12f70:	da000404 	addi	r8,sp,16
   12f74:	003d9406 	br	125c8 <__alt_data_end+0xfc0125c8>
   12f78:	010000f4 	movhi	r4,3
   12f7c:	21292184 	addi	r4,r4,-23418
   12f80:	d9002c15 	stw	r4,176(sp)
   12f84:	d9002c17 	ldw	r4,176(sp)
   12f88:	1c47883a 	add	r3,r3,r17
   12f8c:	10800044 	addi	r2,r2,1
   12f90:	41000015 	stw	r4,0(r8)
   12f94:	44400115 	stw	r17,4(r8)
   12f98:	d8c02015 	stw	r3,128(sp)
   12f9c:	d8801f15 	stw	r2,124(sp)
   12fa0:	010001c4 	movi	r4,7
   12fa4:	20bfd716 	blt	r4,r2,12f04 <__alt_data_end+0xfc012f04>
   12fa8:	42000204 	addi	r8,r8,8
   12fac:	003fdd06 	br	12f24 <__alt_data_end+0xfc012f24>
   12fb0:	d9002d17 	ldw	r4,180(sp)
   12fb4:	d9801e04 	addi	r6,sp,120
   12fb8:	b80b883a 	mov	r5,r23
   12fbc:	00195b40 	call	195b4 <__sprint_r>
   12fc0:	1039bd1e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   12fc4:	d8802617 	ldw	r2,152(sp)
   12fc8:	d8c02017 	ldw	r3,128(sp)
   12fcc:	da000404 	addi	r8,sp,16
   12fd0:	003e1006 	br	12814 <__alt_data_end+0xfc012814>
   12fd4:	00800044 	movi	r2,1
   12fd8:	10803fcc 	andi	r2,r2,255
   12fdc:	00c00044 	movi	r3,1
   12fe0:	10fa0d26 	beq	r2,r3,11818 <__alt_data_end+0xfc011818>
   12fe4:	00c00084 	movi	r3,2
   12fe8:	10fbaf26 	beq	r2,r3,11ea8 <__alt_data_end+0xfc011ea8>
   12fec:	003a6d06 	br	119a4 <__alt_data_end+0xfc0119a4>
   12ff0:	010000f4 	movhi	r4,3
   12ff4:	21292584 	addi	r4,r4,-23402
   12ff8:	d9003515 	stw	r4,212(sp)
   12ffc:	003b5406 	br	11d50 <__alt_data_end+0xfc011d50>
   13000:	d8802a17 	ldw	r2,168(sp)
   13004:	00c00184 	movi	r3,6
   13008:	1880012e 	bgeu	r3,r2,13010 <___vfprintf_internal_r+0x1d68>
   1300c:	1805883a 	mov	r2,r3
   13010:	d8802b15 	stw	r2,172(sp)
   13014:	1000ef16 	blt	r2,zero,133d4 <___vfprintf_internal_r+0x212c>
   13018:	040000f4 	movhi	r16,3
   1301c:	d8802915 	stw	r2,164(sp)
   13020:	dcc02e15 	stw	r19,184(sp)
   13024:	d8002a15 	stw	zero,168(sp)
   13028:	d8003215 	stw	zero,200(sp)
   1302c:	84291704 	addi	r16,r16,-23460
   13030:	0039883a 	mov	fp,zero
   13034:	003a8006 	br	11a38 <__alt_data_end+0xfc011a38>
   13038:	0021883a 	mov	r16,zero
   1303c:	003e0706 	br	1285c <__alt_data_end+0xfc01285c>
   13040:	d9002d17 	ldw	r4,180(sp)
   13044:	d9801e04 	addi	r6,sp,120
   13048:	b80b883a 	mov	r5,r23
   1304c:	00195b40 	call	195b4 <__sprint_r>
   13050:	1039991e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   13054:	d8802617 	ldw	r2,152(sp)
   13058:	d9403317 	ldw	r5,204(sp)
   1305c:	d8c02017 	ldw	r3,128(sp)
   13060:	da000404 	addi	r8,sp,16
   13064:	2885c83a 	sub	r2,r5,r2
   13068:	003dfb06 	br	12858 <__alt_data_end+0xfc012858>
   1306c:	9080004c 	andi	r2,r18,1
   13070:	103e8f1e 	bne	r2,zero,12ab0 <__alt_data_end+0xfc012ab0>
   13074:	d8802117 	ldw	r2,132(sp)
   13078:	003e9e06 	br	12af4 <__alt_data_end+0xfc012af4>
   1307c:	1025883a 	mov	r18,r2
   13080:	0039883a 	mov	fp,zero
   13084:	00800084 	movi	r2,2
   13088:	003fd306 	br	12fd8 <__alt_data_end+0xfc012fd8>
   1308c:	07000b44 	movi	fp,45
   13090:	df002785 	stb	fp,158(sp)
   13094:	003a1b06 	br	11904 <__alt_data_end+0xfc011904>
   13098:	00c00b44 	movi	r3,45
   1309c:	d8c02785 	stb	r3,158(sp)
   130a0:	d8802915 	stw	r2,164(sp)
   130a4:	dc802c17 	ldw	r18,176(sp)
   130a8:	d8002a15 	stw	zero,168(sp)
   130ac:	07000b44 	movi	fp,45
   130b0:	003a5e06 	br	11a2c <__alt_data_end+0xfc011a2c>
   130b4:	040000f4 	movhi	r16,3
   130b8:	84290c04 	addi	r16,r16,-23504
   130bc:	003f4706 	br	12ddc <__alt_data_end+0xfc012ddc>
   130c0:	d9002e17 	ldw	r4,184(sp)
   130c4:	d9402f17 	ldw	r5,188(sp)
   130c8:	20800017 	ldw	r2,0(r4)
   130cc:	21000104 	addi	r4,r4,4
   130d0:	d9002e15 	stw	r4,184(sp)
   130d4:	11400015 	stw	r5,0(r2)
   130d8:	0038ab06 	br	11388 <__alt_data_end+0xfc011388>
   130dc:	dd802617 	ldw	r22,152(sp)
   130e0:	00bfff44 	movi	r2,-3
   130e4:	b0801c16 	blt	r22,r2,13158 <___vfprintf_internal_r+0x1eb0>
   130e8:	d9402a17 	ldw	r5,168(sp)
   130ec:	2d801a16 	blt	r5,r22,13158 <___vfprintf_internal_r+0x1eb0>
   130f0:	dd803215 	stw	r22,200(sp)
   130f4:	003e8906 	br	12b1c <__alt_data_end+0xfc012b1c>
   130f8:	010000f4 	movhi	r4,3
   130fc:	21292184 	addi	r4,r4,-23418
   13100:	d9002c15 	stw	r4,176(sp)
   13104:	003c9106 	br	1234c <__alt_data_end+0xfc01234c>
   13108:	e005883a 	mov	r2,fp
   1310c:	003e7906 	br	12af4 <__alt_data_end+0xfc012af4>
   13110:	d9002a17 	ldw	r4,168(sp)
   13114:	df002783 	ldbu	fp,158(sp)
   13118:	dcc02e15 	stw	r19,184(sp)
   1311c:	d9002915 	stw	r4,164(sp)
   13120:	d9002b15 	stw	r4,172(sp)
   13124:	d8002a15 	stw	zero,168(sp)
   13128:	d8003215 	stw	zero,200(sp)
   1312c:	003a3b06 	br	11a1c <__alt_data_end+0xfc011a1c>
   13130:	9080004c 	andi	r2,r18,1
   13134:	0039883a 	mov	fp,zero
   13138:	10000426 	beq	r2,zero,1314c <___vfprintf_internal_r+0x1ea4>
   1313c:	00800c04 	movi	r2,48
   13140:	dc001dc4 	addi	r16,sp,119
   13144:	d8801dc5 	stb	r2,119(sp)
   13148:	003b6406 	br	11edc <__alt_data_end+0xfc011edc>
   1314c:	d8002b15 	stw	zero,172(sp)
   13150:	dc001e04 	addi	r16,sp,120
   13154:	003a2b06 	br	11a04 <__alt_data_end+0xfc011a04>
   13158:	8c7fff84 	addi	r17,r17,-2
   1315c:	b5bfffc4 	addi	r22,r22,-1
   13160:	dd802615 	stw	r22,152(sp)
   13164:	dc4022c5 	stb	r17,139(sp)
   13168:	b000bf16 	blt	r22,zero,13468 <___vfprintf_internal_r+0x21c0>
   1316c:	00800ac4 	movi	r2,43
   13170:	d8802305 	stb	r2,140(sp)
   13174:	00800244 	movi	r2,9
   13178:	15807016 	blt	r2,r22,1333c <___vfprintf_internal_r+0x2094>
   1317c:	00800c04 	movi	r2,48
   13180:	b5800c04 	addi	r22,r22,48
   13184:	d8802345 	stb	r2,141(sp)
   13188:	dd802385 	stb	r22,142(sp)
   1318c:	d88023c4 	addi	r2,sp,143
   13190:	df0022c4 	addi	fp,sp,139
   13194:	d8c03317 	ldw	r3,204(sp)
   13198:	1739c83a 	sub	fp,r2,fp
   1319c:	d9003317 	ldw	r4,204(sp)
   131a0:	e0c7883a 	add	r3,fp,r3
   131a4:	df003a15 	stw	fp,232(sp)
   131a8:	d8c02b15 	stw	r3,172(sp)
   131ac:	00800044 	movi	r2,1
   131b0:	1100b30e 	bge	r2,r4,13480 <___vfprintf_internal_r+0x21d8>
   131b4:	d8c02b17 	ldw	r3,172(sp)
   131b8:	18c00044 	addi	r3,r3,1
   131bc:	d8c02b15 	stw	r3,172(sp)
   131c0:	1805883a 	mov	r2,r3
   131c4:	1800ac16 	blt	r3,zero,13478 <___vfprintf_internal_r+0x21d0>
   131c8:	d8003215 	stw	zero,200(sp)
   131cc:	003e5d06 	br	12b44 <__alt_data_end+0xfc012b44>
   131d0:	d9002d17 	ldw	r4,180(sp)
   131d4:	d9801e04 	addi	r6,sp,120
   131d8:	b80b883a 	mov	r5,r23
   131dc:	00195b40 	call	195b4 <__sprint_r>
   131e0:	1039351e 	bne	r2,zero,116b8 <__alt_data_end+0xfc0116b8>
   131e4:	dc402617 	ldw	r17,152(sp)
   131e8:	d8c02017 	ldw	r3,128(sp)
   131ec:	d8801f17 	ldw	r2,124(sp)
   131f0:	da000404 	addi	r8,sp,16
   131f4:	003ed606 	br	12d50 <__alt_data_end+0xfc012d50>
   131f8:	182b883a 	mov	r21,r3
   131fc:	d8002a15 	stw	zero,168(sp)
   13200:	00388c06 	br	11434 <__alt_data_end+0xfc011434>
   13204:	d8802a17 	ldw	r2,168(sp)
   13208:	103e071e 	bne	r2,zero,12a28 <__alt_data_end+0xfc012a28>
   1320c:	dc002a15 	stw	r16,168(sp)
   13210:	003e0506 	br	12a28 <__alt_data_end+0xfc012a28>
   13214:	d9002a17 	ldw	r4,168(sp)
   13218:	20c00044 	addi	r3,r4,1
   1321c:	003e0f06 	br	12a5c <__alt_data_end+0xfc012a5c>
   13220:	01400184 	movi	r5,6
   13224:	d9402a15 	stw	r5,168(sp)
   13228:	003dff06 	br	12a28 <__alt_data_end+0xfc012a28>
   1322c:	d8802104 	addi	r2,sp,132
   13230:	d8800315 	stw	r2,12(sp)
   13234:	d8802504 	addi	r2,sp,148
   13238:	d8800215 	stw	r2,8(sp)
   1323c:	d8802604 	addi	r2,sp,152
   13240:	d8800115 	stw	r2,4(sp)
   13244:	d8802a17 	ldw	r2,168(sp)
   13248:	d9403617 	ldw	r5,216(sp)
   1324c:	d9002d17 	ldw	r4,180(sp)
   13250:	d8800015 	stw	r2,0(sp)
   13254:	01c000c4 	movi	r7,3
   13258:	980d883a 	mov	r6,r19
   1325c:	da003d15 	stw	r8,244(sp)
   13260:	00139d80 	call	139d8 <_dtoa_r>
   13264:	d8c02a17 	ldw	r3,168(sp)
   13268:	da003d17 	ldw	r8,244(sp)
   1326c:	1021883a 	mov	r16,r2
   13270:	10f9883a 	add	fp,r2,r3
   13274:	81000007 	ldb	r4,0(r16)
   13278:	00800c04 	movi	r2,48
   1327c:	20805e26 	beq	r4,r2,133f8 <___vfprintf_internal_r+0x2150>
   13280:	d8c02617 	ldw	r3,152(sp)
   13284:	e0f9883a 	add	fp,fp,r3
   13288:	003e0a06 	br	12ab4 <__alt_data_end+0xfc012ab4>
   1328c:	00c00b44 	movi	r3,45
   13290:	24e0003c 	xorhi	r19,r4,32768
   13294:	d8c02905 	stb	r3,164(sp)
   13298:	003de906 	br	12a40 <__alt_data_end+0xfc012a40>
   1329c:	d8c03217 	ldw	r3,200(sp)
   132a0:	00c07a0e 	bge	zero,r3,1348c <___vfprintf_internal_r+0x21e4>
   132a4:	00800044 	movi	r2,1
   132a8:	d9003317 	ldw	r4,204(sp)
   132ac:	1105883a 	add	r2,r2,r4
   132b0:	d8802b15 	stw	r2,172(sp)
   132b4:	10004e16 	blt	r2,zero,133f0 <___vfprintf_internal_r+0x2148>
   132b8:	044019c4 	movi	r17,103
   132bc:	003e2106 	br	12b44 <__alt_data_end+0xfc012b44>
   132c0:	d9002a17 	ldw	r4,168(sp)
   132c4:	d8802104 	addi	r2,sp,132
   132c8:	d8800315 	stw	r2,12(sp)
   132cc:	d9000015 	stw	r4,0(sp)
   132d0:	d8802504 	addi	r2,sp,148
   132d4:	d9403617 	ldw	r5,216(sp)
   132d8:	d9002d17 	ldw	r4,180(sp)
   132dc:	d8800215 	stw	r2,8(sp)
   132e0:	d8802604 	addi	r2,sp,152
   132e4:	d8800115 	stw	r2,4(sp)
   132e8:	01c000c4 	movi	r7,3
   132ec:	980d883a 	mov	r6,r19
   132f0:	da003d15 	stw	r8,244(sp)
   132f4:	00139d80 	call	139d8 <_dtoa_r>
   132f8:	d8c02a17 	ldw	r3,168(sp)
   132fc:	da003d17 	ldw	r8,244(sp)
   13300:	1021883a 	mov	r16,r2
   13304:	00801184 	movi	r2,70
   13308:	80f9883a 	add	fp,r16,r3
   1330c:	88bfd926 	beq	r17,r2,13274 <__alt_data_end+0xfc013274>
   13310:	003de806 	br	12ab4 <__alt_data_end+0xfc012ab4>
   13314:	d9002a17 	ldw	r4,168(sp)
   13318:	00c04d0e 	bge	zero,r3,13450 <___vfprintf_internal_r+0x21a8>
   1331c:	2000441e 	bne	r4,zero,13430 <___vfprintf_internal_r+0x2188>
   13320:	9480004c 	andi	r18,r18,1
   13324:	9000421e 	bne	r18,zero,13430 <___vfprintf_internal_r+0x2188>
   13328:	1805883a 	mov	r2,r3
   1332c:	18006f16 	blt	r3,zero,134ec <___vfprintf_internal_r+0x2244>
   13330:	d8c03217 	ldw	r3,200(sp)
   13334:	d8c02b15 	stw	r3,172(sp)
   13338:	003e0206 	br	12b44 <__alt_data_end+0xfc012b44>
   1333c:	df0022c4 	addi	fp,sp,139
   13340:	dc002a15 	stw	r16,168(sp)
   13344:	4027883a 	mov	r19,r8
   13348:	e021883a 	mov	r16,fp
   1334c:	b009883a 	mov	r4,r22
   13350:	01400284 	movi	r5,10
   13354:	000ccd00 	call	ccd0 <__modsi3>
   13358:	10800c04 	addi	r2,r2,48
   1335c:	843fffc4 	addi	r16,r16,-1
   13360:	b009883a 	mov	r4,r22
   13364:	01400284 	movi	r5,10
   13368:	80800005 	stb	r2,0(r16)
   1336c:	000cc4c0 	call	cc4c <__divsi3>
   13370:	102d883a 	mov	r22,r2
   13374:	00800244 	movi	r2,9
   13378:	15bff416 	blt	r2,r22,1334c <__alt_data_end+0xfc01334c>
   1337c:	9811883a 	mov	r8,r19
   13380:	b0800c04 	addi	r2,r22,48
   13384:	8027883a 	mov	r19,r16
   13388:	997fffc4 	addi	r5,r19,-1
   1338c:	98bfffc5 	stb	r2,-1(r19)
   13390:	dc002a17 	ldw	r16,168(sp)
   13394:	2f006d2e 	bgeu	r5,fp,1354c <___vfprintf_internal_r+0x22a4>
   13398:	d9c02384 	addi	r7,sp,142
   1339c:	3ccfc83a 	sub	r7,r7,r19
   133a0:	d9002344 	addi	r4,sp,141
   133a4:	e1cf883a 	add	r7,fp,r7
   133a8:	00000106 	br	133b0 <___vfprintf_internal_r+0x2108>
   133ac:	28800003 	ldbu	r2,0(r5)
   133b0:	20800005 	stb	r2,0(r4)
   133b4:	21000044 	addi	r4,r4,1
   133b8:	29400044 	addi	r5,r5,1
   133bc:	393ffb1e 	bne	r7,r4,133ac <__alt_data_end+0xfc0133ac>
   133c0:	d8802304 	addi	r2,sp,140
   133c4:	14c5c83a 	sub	r2,r2,r19
   133c8:	d8c02344 	addi	r3,sp,141
   133cc:	1885883a 	add	r2,r3,r2
   133d0:	003f7006 	br	13194 <__alt_data_end+0xfc013194>
   133d4:	0005883a 	mov	r2,zero
   133d8:	003f0f06 	br	13018 <__alt_data_end+0xfc013018>
   133dc:	d8c03217 	ldw	r3,200(sp)
   133e0:	18c00044 	addi	r3,r3,1
   133e4:	d8c02b15 	stw	r3,172(sp)
   133e8:	1805883a 	mov	r2,r3
   133ec:	183fb20e 	bge	r3,zero,132b8 <__alt_data_end+0xfc0132b8>
   133f0:	0005883a 	mov	r2,zero
   133f4:	003fb006 	br	132b8 <__alt_data_end+0xfc0132b8>
   133f8:	d9003617 	ldw	r4,216(sp)
   133fc:	000d883a 	mov	r6,zero
   13400:	000f883a 	mov	r7,zero
   13404:	980b883a 	mov	r5,r19
   13408:	d8c03c15 	stw	r3,240(sp)
   1340c:	da003d15 	stw	r8,244(sp)
   13410:	001d3380 	call	1d338 <__eqdf2>
   13414:	d8c03c17 	ldw	r3,240(sp)
   13418:	da003d17 	ldw	r8,244(sp)
   1341c:	103f9826 	beq	r2,zero,13280 <__alt_data_end+0xfc013280>
   13420:	00800044 	movi	r2,1
   13424:	10c7c83a 	sub	r3,r2,r3
   13428:	d8c02615 	stw	r3,152(sp)
   1342c:	003f9506 	br	13284 <__alt_data_end+0xfc013284>
   13430:	d9002a17 	ldw	r4,168(sp)
   13434:	d8c03217 	ldw	r3,200(sp)
   13438:	20800044 	addi	r2,r4,1
   1343c:	1885883a 	add	r2,r3,r2
   13440:	d8802b15 	stw	r2,172(sp)
   13444:	103dbf0e 	bge	r2,zero,12b44 <__alt_data_end+0xfc012b44>
   13448:	0005883a 	mov	r2,zero
   1344c:	003dbd06 	br	12b44 <__alt_data_end+0xfc012b44>
   13450:	2000201e 	bne	r4,zero,134d4 <___vfprintf_internal_r+0x222c>
   13454:	9480004c 	andi	r18,r18,1
   13458:	90001e1e 	bne	r18,zero,134d4 <___vfprintf_internal_r+0x222c>
   1345c:	00800044 	movi	r2,1
   13460:	d8802b15 	stw	r2,172(sp)
   13464:	003db706 	br	12b44 <__alt_data_end+0xfc012b44>
   13468:	00800b44 	movi	r2,45
   1346c:	05adc83a 	sub	r22,zero,r22
   13470:	d8802305 	stb	r2,140(sp)
   13474:	003f3f06 	br	13174 <__alt_data_end+0xfc013174>
   13478:	0005883a 	mov	r2,zero
   1347c:	003f5206 	br	131c8 <__alt_data_end+0xfc0131c8>
   13480:	90a4703a 	and	r18,r18,r2
   13484:	903f4e26 	beq	r18,zero,131c0 <__alt_data_end+0xfc0131c0>
   13488:	003f4a06 	br	131b4 <__alt_data_end+0xfc0131b4>
   1348c:	00800084 	movi	r2,2
   13490:	10c5c83a 	sub	r2,r2,r3
   13494:	003f8406 	br	132a8 <__alt_data_end+0xfc0132a8>
   13498:	d9402e17 	ldw	r5,184(sp)
   1349c:	d9002e17 	ldw	r4,184(sp)
   134a0:	ac400043 	ldbu	r17,1(r21)
   134a4:	29400017 	ldw	r5,0(r5)
   134a8:	20800104 	addi	r2,r4,4
   134ac:	d8802e15 	stw	r2,184(sp)
   134b0:	d9402a15 	stw	r5,168(sp)
   134b4:	182b883a 	mov	r21,r3
   134b8:	283e7b0e 	bge	r5,zero,12ea8 <__alt_data_end+0xfc012ea8>
   134bc:	8c403fcc 	andi	r17,r17,255
   134c0:	017fffc4 	movi	r5,-1
   134c4:	8c40201c 	xori	r17,r17,128
   134c8:	d9402a15 	stw	r5,168(sp)
   134cc:	8c7fe004 	addi	r17,r17,-128
   134d0:	0037d706 	br	11430 <__alt_data_end+0xfc011430>
   134d4:	d8c02a17 	ldw	r3,168(sp)
   134d8:	18c00084 	addi	r3,r3,2
   134dc:	d8c02b15 	stw	r3,172(sp)
   134e0:	1805883a 	mov	r2,r3
   134e4:	183d970e 	bge	r3,zero,12b44 <__alt_data_end+0xfc012b44>
   134e8:	003fd706 	br	13448 <__alt_data_end+0xfc013448>
   134ec:	0005883a 	mov	r2,zero
   134f0:	003f8f06 	br	13330 <__alt_data_end+0xfc013330>
   134f4:	9080004c 	andi	r2,r18,1
   134f8:	103f821e 	bne	r2,zero,13304 <__alt_data_end+0xfc013304>
   134fc:	d8802117 	ldw	r2,132(sp)
   13500:	1405c83a 	sub	r2,r2,r16
   13504:	d8803315 	stw	r2,204(sp)
   13508:	b47ef426 	beq	r22,r17,130dc <__alt_data_end+0xfc0130dc>
   1350c:	dd802617 	ldw	r22,152(sp)
   13510:	003f1206 	br	1315c <__alt_data_end+0xfc01315c>
   13514:	d8c02b03 	ldbu	r3,172(sp)
   13518:	d8c02785 	stb	r3,158(sp)
   1351c:	0038df06 	br	1189c <__alt_data_end+0xfc01189c>
   13520:	d8c02b03 	ldbu	r3,172(sp)
   13524:	d8c02785 	stb	r3,158(sp)
   13528:	0038aa06 	br	117d4 <__alt_data_end+0xfc0117d4>
   1352c:	d8c02b03 	ldbu	r3,172(sp)
   13530:	d8c02785 	stb	r3,158(sp)
   13534:	003a4306 	br	11e44 <__alt_data_end+0xfc011e44>
   13538:	d8c02b03 	ldbu	r3,172(sp)
   1353c:	d8c02785 	stb	r3,158(sp)
   13540:	003af506 	br	12118 <__alt_data_end+0xfc012118>
   13544:	0005883a 	mov	r2,zero
   13548:	003d7b06 	br	12b38 <__alt_data_end+0xfc012b38>
   1354c:	d8802344 	addi	r2,sp,141
   13550:	003f1006 	br	13194 <__alt_data_end+0xfc013194>
   13554:	d8c02b03 	ldbu	r3,172(sp)
   13558:	d8c02785 	stb	r3,158(sp)
   1355c:	0038fd06 	br	11954 <__alt_data_end+0xfc011954>
   13560:	d8c02b03 	ldbu	r3,172(sp)
   13564:	d8c02785 	stb	r3,158(sp)
   13568:	003a9706 	br	11fc8 <__alt_data_end+0xfc011fc8>
   1356c:	d8c02b03 	ldbu	r3,172(sp)
   13570:	d8c02785 	stb	r3,158(sp)
   13574:	003a1806 	br	11dd8 <__alt_data_end+0xfc011dd8>
   13578:	d8c02b03 	ldbu	r3,172(sp)
   1357c:	d8c02785 	stb	r3,158(sp)
   13580:	003abe06 	br	1207c <__alt_data_end+0xfc01207c>

00013584 <__vfprintf_internal>:
   13584:	008000f4 	movhi	r2,3
   13588:	10b60a04 	addi	r2,r2,-10200
   1358c:	300f883a 	mov	r7,r6
   13590:	280d883a 	mov	r6,r5
   13594:	200b883a 	mov	r5,r4
   13598:	11000017 	ldw	r4,0(r2)
   1359c:	00112a81 	jmpi	112a8 <___vfprintf_internal_r>

000135a0 <__sbprintf>:
   135a0:	2880030b 	ldhu	r2,12(r5)
   135a4:	2ac01917 	ldw	r11,100(r5)
   135a8:	2a80038b 	ldhu	r10,14(r5)
   135ac:	2a400717 	ldw	r9,28(r5)
   135b0:	2a000917 	ldw	r8,36(r5)
   135b4:	defee204 	addi	sp,sp,-1144
   135b8:	00c10004 	movi	r3,1024
   135bc:	dc011a15 	stw	r16,1128(sp)
   135c0:	10bfff4c 	andi	r2,r2,65533
   135c4:	2821883a 	mov	r16,r5
   135c8:	d8cb883a 	add	r5,sp,r3
   135cc:	dc811c15 	stw	r18,1136(sp)
   135d0:	dc411b15 	stw	r17,1132(sp)
   135d4:	dfc11d15 	stw	ra,1140(sp)
   135d8:	2025883a 	mov	r18,r4
   135dc:	d881030d 	sth	r2,1036(sp)
   135e0:	dac11915 	stw	r11,1124(sp)
   135e4:	da81038d 	sth	r10,1038(sp)
   135e8:	da410715 	stw	r9,1052(sp)
   135ec:	da010915 	stw	r8,1060(sp)
   135f0:	dec10015 	stw	sp,1024(sp)
   135f4:	dec10415 	stw	sp,1040(sp)
   135f8:	d8c10215 	stw	r3,1032(sp)
   135fc:	d8c10515 	stw	r3,1044(sp)
   13600:	d8010615 	stw	zero,1048(sp)
   13604:	00112a80 	call	112a8 <___vfprintf_internal_r>
   13608:	1023883a 	mov	r17,r2
   1360c:	10000416 	blt	r2,zero,13620 <__sbprintf+0x80>
   13610:	d9410004 	addi	r5,sp,1024
   13614:	9009883a 	mov	r4,r18
   13618:	001527c0 	call	1527c <_fflush_r>
   1361c:	10000d1e 	bne	r2,zero,13654 <__sbprintf+0xb4>
   13620:	d881030b 	ldhu	r2,1036(sp)
   13624:	1080100c 	andi	r2,r2,64
   13628:	10000326 	beq	r2,zero,13638 <__sbprintf+0x98>
   1362c:	8080030b 	ldhu	r2,12(r16)
   13630:	10801014 	ori	r2,r2,64
   13634:	8080030d 	sth	r2,12(r16)
   13638:	8805883a 	mov	r2,r17
   1363c:	dfc11d17 	ldw	ra,1140(sp)
   13640:	dc811c17 	ldw	r18,1136(sp)
   13644:	dc411b17 	ldw	r17,1132(sp)
   13648:	dc011a17 	ldw	r16,1128(sp)
   1364c:	dec11e04 	addi	sp,sp,1144
   13650:	f800283a 	ret
   13654:	047fffc4 	movi	r17,-1
   13658:	003ff106 	br	13620 <__alt_data_end+0xfc013620>

0001365c <__swsetup_r>:
   1365c:	008000f4 	movhi	r2,3
   13660:	defffd04 	addi	sp,sp,-12
   13664:	10b60a04 	addi	r2,r2,-10200
   13668:	dc400115 	stw	r17,4(sp)
   1366c:	2023883a 	mov	r17,r4
   13670:	11000017 	ldw	r4,0(r2)
   13674:	dc000015 	stw	r16,0(sp)
   13678:	dfc00215 	stw	ra,8(sp)
   1367c:	2821883a 	mov	r16,r5
   13680:	20000226 	beq	r4,zero,1368c <__swsetup_r+0x30>
   13684:	20800e17 	ldw	r2,56(r4)
   13688:	10003126 	beq	r2,zero,13750 <__swsetup_r+0xf4>
   1368c:	8080030b 	ldhu	r2,12(r16)
   13690:	10c0020c 	andi	r3,r2,8
   13694:	1009883a 	mov	r4,r2
   13698:	18000f26 	beq	r3,zero,136d8 <__swsetup_r+0x7c>
   1369c:	80c00417 	ldw	r3,16(r16)
   136a0:	18001526 	beq	r3,zero,136f8 <__swsetup_r+0x9c>
   136a4:	1100004c 	andi	r4,r2,1
   136a8:	20001c1e 	bne	r4,zero,1371c <__swsetup_r+0xc0>
   136ac:	1080008c 	andi	r2,r2,2
   136b0:	1000291e 	bne	r2,zero,13758 <__swsetup_r+0xfc>
   136b4:	80800517 	ldw	r2,20(r16)
   136b8:	80800215 	stw	r2,8(r16)
   136bc:	18001c26 	beq	r3,zero,13730 <__swsetup_r+0xd4>
   136c0:	0005883a 	mov	r2,zero
   136c4:	dfc00217 	ldw	ra,8(sp)
   136c8:	dc400117 	ldw	r17,4(sp)
   136cc:	dc000017 	ldw	r16,0(sp)
   136d0:	dec00304 	addi	sp,sp,12
   136d4:	f800283a 	ret
   136d8:	2080040c 	andi	r2,r4,16
   136dc:	10002e26 	beq	r2,zero,13798 <__swsetup_r+0x13c>
   136e0:	2080010c 	andi	r2,r4,4
   136e4:	10001e1e 	bne	r2,zero,13760 <__swsetup_r+0x104>
   136e8:	80c00417 	ldw	r3,16(r16)
   136ec:	20800214 	ori	r2,r4,8
   136f0:	8080030d 	sth	r2,12(r16)
   136f4:	183feb1e 	bne	r3,zero,136a4 <__alt_data_end+0xfc0136a4>
   136f8:	1100a00c 	andi	r4,r2,640
   136fc:	01408004 	movi	r5,512
   13700:	217fe826 	beq	r4,r5,136a4 <__alt_data_end+0xfc0136a4>
   13704:	800b883a 	mov	r5,r16
   13708:	8809883a 	mov	r4,r17
   1370c:	00162180 	call	16218 <__smakebuf_r>
   13710:	8080030b 	ldhu	r2,12(r16)
   13714:	80c00417 	ldw	r3,16(r16)
   13718:	003fe206 	br	136a4 <__alt_data_end+0xfc0136a4>
   1371c:	80800517 	ldw	r2,20(r16)
   13720:	80000215 	stw	zero,8(r16)
   13724:	0085c83a 	sub	r2,zero,r2
   13728:	80800615 	stw	r2,24(r16)
   1372c:	183fe41e 	bne	r3,zero,136c0 <__alt_data_end+0xfc0136c0>
   13730:	80c0030b 	ldhu	r3,12(r16)
   13734:	0005883a 	mov	r2,zero
   13738:	1900200c 	andi	r4,r3,128
   1373c:	203fe126 	beq	r4,zero,136c4 <__alt_data_end+0xfc0136c4>
   13740:	18c01014 	ori	r3,r3,64
   13744:	80c0030d 	sth	r3,12(r16)
   13748:	00bfffc4 	movi	r2,-1
   1374c:	003fdd06 	br	136c4 <__alt_data_end+0xfc0136c4>
   13750:	00156680 	call	15668 <__sinit>
   13754:	003fcd06 	br	1368c <__alt_data_end+0xfc01368c>
   13758:	0005883a 	mov	r2,zero
   1375c:	003fd606 	br	136b8 <__alt_data_end+0xfc0136b8>
   13760:	81400c17 	ldw	r5,48(r16)
   13764:	28000626 	beq	r5,zero,13780 <__swsetup_r+0x124>
   13768:	80801004 	addi	r2,r16,64
   1376c:	28800326 	beq	r5,r2,1377c <__swsetup_r+0x120>
   13770:	8809883a 	mov	r4,r17
   13774:	00157dc0 	call	157dc <_free_r>
   13778:	8100030b 	ldhu	r4,12(r16)
   1377c:	80000c15 	stw	zero,48(r16)
   13780:	80c00417 	ldw	r3,16(r16)
   13784:	00bff6c4 	movi	r2,-37
   13788:	1108703a 	and	r4,r2,r4
   1378c:	80000115 	stw	zero,4(r16)
   13790:	80c00015 	stw	r3,0(r16)
   13794:	003fd506 	br	136ec <__alt_data_end+0xfc0136ec>
   13798:	00800244 	movi	r2,9
   1379c:	88800015 	stw	r2,0(r17)
   137a0:	20801014 	ori	r2,r4,64
   137a4:	8080030d 	sth	r2,12(r16)
   137a8:	00bfffc4 	movi	r2,-1
   137ac:	003fc506 	br	136c4 <__alt_data_end+0xfc0136c4>

000137b0 <quorem>:
   137b0:	defff204 	addi	sp,sp,-56
   137b4:	ddc00b15 	stw	r23,44(sp)
   137b8:	20800417 	ldw	r2,16(r4)
   137bc:	2dc00417 	ldw	r23,16(r5)
   137c0:	dfc00d15 	stw	ra,52(sp)
   137c4:	df000c15 	stw	fp,48(sp)
   137c8:	dd800a15 	stw	r22,40(sp)
   137cc:	dd400915 	stw	r21,36(sp)
   137d0:	dd000815 	stw	r20,32(sp)
   137d4:	dcc00715 	stw	r19,28(sp)
   137d8:	dc800615 	stw	r18,24(sp)
   137dc:	dc400515 	stw	r17,20(sp)
   137e0:	dc000415 	stw	r16,16(sp)
   137e4:	15c07a16 	blt	r2,r23,139d0 <quorem+0x220>
   137e8:	bdffffc4 	addi	r23,r23,-1
   137ec:	bde9883a 	add	r20,r23,r23
   137f0:	28c00504 	addi	r3,r5,20
   137f4:	a529883a 	add	r20,r20,r20
   137f8:	1d39883a 	add	fp,r3,r20
   137fc:	24c00504 	addi	r19,r4,20
   13800:	d9400215 	stw	r5,8(sp)
   13804:	9d29883a 	add	r20,r19,r20
   13808:	e1400017 	ldw	r5,0(fp)
   1380c:	d9000015 	stw	r4,0(sp)
   13810:	a1000017 	ldw	r4,0(r20)
   13814:	29400044 	addi	r5,r5,1
   13818:	d8c00115 	stw	r3,4(sp)
   1381c:	dd000315 	stw	r20,12(sp)
   13820:	000cd440 	call	cd44 <__udivsi3>
   13824:	1025883a 	mov	r18,r2
   13828:	10003026 	beq	r2,zero,138ec <quorem+0x13c>
   1382c:	dc400117 	ldw	r17,4(sp)
   13830:	9829883a 	mov	r20,r19
   13834:	002d883a 	mov	r22,zero
   13838:	0021883a 	mov	r16,zero
   1383c:	8d400017 	ldw	r21,0(r17)
   13840:	900b883a 	mov	r5,r18
   13844:	8c400104 	addi	r17,r17,4
   13848:	a93fffcc 	andi	r4,r21,65535
   1384c:	000ce000 	call	ce00 <__mulsi3>
   13850:	a808d43a 	srli	r4,r21,16
   13854:	900b883a 	mov	r5,r18
   13858:	15ad883a 	add	r22,r2,r22
   1385c:	000ce000 	call	ce00 <__mulsi3>
   13860:	a1000017 	ldw	r4,0(r20)
   13864:	b00cd43a 	srli	r6,r22,16
   13868:	b0ffffcc 	andi	r3,r22,65535
   1386c:	217fffcc 	andi	r5,r4,65535
   13870:	2c21883a 	add	r16,r5,r16
   13874:	80c7c83a 	sub	r3,r16,r3
   13878:	2008d43a 	srli	r4,r4,16
   1387c:	1185883a 	add	r2,r2,r6
   13880:	1821d43a 	srai	r16,r3,16
   13884:	117fffcc 	andi	r5,r2,65535
   13888:	2149c83a 	sub	r4,r4,r5
   1388c:	2421883a 	add	r16,r4,r16
   13890:	8008943a 	slli	r4,r16,16
   13894:	18ffffcc 	andi	r3,r3,65535
   13898:	102cd43a 	srli	r22,r2,16
   1389c:	20c8b03a 	or	r4,r4,r3
   138a0:	a1000015 	stw	r4,0(r20)
   138a4:	8021d43a 	srai	r16,r16,16
   138a8:	a5000104 	addi	r20,r20,4
   138ac:	e47fe32e 	bgeu	fp,r17,1383c <__alt_data_end+0xfc01383c>
   138b0:	d8c00317 	ldw	r3,12(sp)
   138b4:	18800017 	ldw	r2,0(r3)
   138b8:	10000c1e 	bne	r2,zero,138ec <quorem+0x13c>
   138bc:	18bfff04 	addi	r2,r3,-4
   138c0:	9880082e 	bgeu	r19,r2,138e4 <quorem+0x134>
   138c4:	18ffff17 	ldw	r3,-4(r3)
   138c8:	18000326 	beq	r3,zero,138d8 <quorem+0x128>
   138cc:	00000506 	br	138e4 <quorem+0x134>
   138d0:	10c00017 	ldw	r3,0(r2)
   138d4:	1800031e 	bne	r3,zero,138e4 <quorem+0x134>
   138d8:	10bfff04 	addi	r2,r2,-4
   138dc:	bdffffc4 	addi	r23,r23,-1
   138e0:	98bffb36 	bltu	r19,r2,138d0 <__alt_data_end+0xfc0138d0>
   138e4:	d8c00017 	ldw	r3,0(sp)
   138e8:	1dc00415 	stw	r23,16(r3)
   138ec:	d9400217 	ldw	r5,8(sp)
   138f0:	d9000017 	ldw	r4,0(sp)
   138f4:	0016f980 	call	16f98 <__mcmp>
   138f8:	10002816 	blt	r2,zero,1399c <quorem+0x1ec>
   138fc:	dc400117 	ldw	r17,4(sp)
   13900:	94800044 	addi	r18,r18,1
   13904:	980d883a 	mov	r6,r19
   13908:	0007883a 	mov	r3,zero
   1390c:	31000017 	ldw	r4,0(r6)
   13910:	89400017 	ldw	r5,0(r17)
   13914:	31800104 	addi	r6,r6,4
   13918:	20bfffcc 	andi	r2,r4,65535
   1391c:	10c7883a 	add	r3,r2,r3
   13920:	28bfffcc 	andi	r2,r5,65535
   13924:	1885c83a 	sub	r2,r3,r2
   13928:	280ad43a 	srli	r5,r5,16
   1392c:	2008d43a 	srli	r4,r4,16
   13930:	1007d43a 	srai	r3,r2,16
   13934:	10bfffcc 	andi	r2,r2,65535
   13938:	2149c83a 	sub	r4,r4,r5
   1393c:	20c9883a 	add	r4,r4,r3
   13940:	200a943a 	slli	r5,r4,16
   13944:	8c400104 	addi	r17,r17,4
   13948:	2007d43a 	srai	r3,r4,16
   1394c:	2884b03a 	or	r2,r5,r2
   13950:	30bfff15 	stw	r2,-4(r6)
   13954:	e47fed2e 	bgeu	fp,r17,1390c <__alt_data_end+0xfc01390c>
   13958:	bdc5883a 	add	r2,r23,r23
   1395c:	1085883a 	add	r2,r2,r2
   13960:	9887883a 	add	r3,r19,r2
   13964:	18800017 	ldw	r2,0(r3)
   13968:	10000c1e 	bne	r2,zero,1399c <quorem+0x1ec>
   1396c:	18bfff04 	addi	r2,r3,-4
   13970:	9880082e 	bgeu	r19,r2,13994 <quorem+0x1e4>
   13974:	18ffff17 	ldw	r3,-4(r3)
   13978:	18000326 	beq	r3,zero,13988 <quorem+0x1d8>
   1397c:	00000506 	br	13994 <quorem+0x1e4>
   13980:	10c00017 	ldw	r3,0(r2)
   13984:	1800031e 	bne	r3,zero,13994 <quorem+0x1e4>
   13988:	10bfff04 	addi	r2,r2,-4
   1398c:	bdffffc4 	addi	r23,r23,-1
   13990:	98bffb36 	bltu	r19,r2,13980 <__alt_data_end+0xfc013980>
   13994:	d8c00017 	ldw	r3,0(sp)
   13998:	1dc00415 	stw	r23,16(r3)
   1399c:	9005883a 	mov	r2,r18
   139a0:	dfc00d17 	ldw	ra,52(sp)
   139a4:	df000c17 	ldw	fp,48(sp)
   139a8:	ddc00b17 	ldw	r23,44(sp)
   139ac:	dd800a17 	ldw	r22,40(sp)
   139b0:	dd400917 	ldw	r21,36(sp)
   139b4:	dd000817 	ldw	r20,32(sp)
   139b8:	dcc00717 	ldw	r19,28(sp)
   139bc:	dc800617 	ldw	r18,24(sp)
   139c0:	dc400517 	ldw	r17,20(sp)
   139c4:	dc000417 	ldw	r16,16(sp)
   139c8:	dec00e04 	addi	sp,sp,56
   139cc:	f800283a 	ret
   139d0:	0005883a 	mov	r2,zero
   139d4:	003ff206 	br	139a0 <__alt_data_end+0xfc0139a0>

000139d8 <_dtoa_r>:
   139d8:	20801017 	ldw	r2,64(r4)
   139dc:	deffde04 	addi	sp,sp,-136
   139e0:	df002015 	stw	fp,128(sp)
   139e4:	dcc01b15 	stw	r19,108(sp)
   139e8:	dc801a15 	stw	r18,104(sp)
   139ec:	dc401915 	stw	r17,100(sp)
   139f0:	dc001815 	stw	r16,96(sp)
   139f4:	dfc02115 	stw	ra,132(sp)
   139f8:	ddc01f15 	stw	r23,124(sp)
   139fc:	dd801e15 	stw	r22,120(sp)
   13a00:	dd401d15 	stw	r21,116(sp)
   13a04:	dd001c15 	stw	r20,112(sp)
   13a08:	d9c00315 	stw	r7,12(sp)
   13a0c:	2039883a 	mov	fp,r4
   13a10:	3023883a 	mov	r17,r6
   13a14:	2825883a 	mov	r18,r5
   13a18:	dc002417 	ldw	r16,144(sp)
   13a1c:	3027883a 	mov	r19,r6
   13a20:	10000826 	beq	r2,zero,13a44 <_dtoa_r+0x6c>
   13a24:	21801117 	ldw	r6,68(r4)
   13a28:	00c00044 	movi	r3,1
   13a2c:	100b883a 	mov	r5,r2
   13a30:	1986983a 	sll	r3,r3,r6
   13a34:	11800115 	stw	r6,4(r2)
   13a38:	10c00215 	stw	r3,8(r2)
   13a3c:	00166bc0 	call	166bc <_Bfree>
   13a40:	e0001015 	stw	zero,64(fp)
   13a44:	88002e16 	blt	r17,zero,13b00 <_dtoa_r+0x128>
   13a48:	80000015 	stw	zero,0(r16)
   13a4c:	889ffc2c 	andhi	r2,r17,32752
   13a50:	00dffc34 	movhi	r3,32752
   13a54:	10c01c26 	beq	r2,r3,13ac8 <_dtoa_r+0xf0>
   13a58:	000d883a 	mov	r6,zero
   13a5c:	000f883a 	mov	r7,zero
   13a60:	9009883a 	mov	r4,r18
   13a64:	980b883a 	mov	r5,r19
   13a68:	001d3380 	call	1d338 <__eqdf2>
   13a6c:	10002b1e 	bne	r2,zero,13b1c <_dtoa_r+0x144>
   13a70:	d9c02317 	ldw	r7,140(sp)
   13a74:	00800044 	movi	r2,1
   13a78:	38800015 	stw	r2,0(r7)
   13a7c:	d8802517 	ldw	r2,148(sp)
   13a80:	10019e26 	beq	r2,zero,140fc <_dtoa_r+0x724>
   13a84:	d8c02517 	ldw	r3,148(sp)
   13a88:	008000f4 	movhi	r2,3
   13a8c:	10a91944 	addi	r2,r2,-23451
   13a90:	18800015 	stw	r2,0(r3)
   13a94:	10bfffc4 	addi	r2,r2,-1
   13a98:	dfc02117 	ldw	ra,132(sp)
   13a9c:	df002017 	ldw	fp,128(sp)
   13aa0:	ddc01f17 	ldw	r23,124(sp)
   13aa4:	dd801e17 	ldw	r22,120(sp)
   13aa8:	dd401d17 	ldw	r21,116(sp)
   13aac:	dd001c17 	ldw	r20,112(sp)
   13ab0:	dcc01b17 	ldw	r19,108(sp)
   13ab4:	dc801a17 	ldw	r18,104(sp)
   13ab8:	dc401917 	ldw	r17,100(sp)
   13abc:	dc001817 	ldw	r16,96(sp)
   13ac0:	dec02204 	addi	sp,sp,136
   13ac4:	f800283a 	ret
   13ac8:	d8c02317 	ldw	r3,140(sp)
   13acc:	0089c3c4 	movi	r2,9999
   13ad0:	18800015 	stw	r2,0(r3)
   13ad4:	90017726 	beq	r18,zero,140b4 <_dtoa_r+0x6dc>
   13ad8:	008000f4 	movhi	r2,3
   13adc:	10a92d04 	addi	r2,r2,-23372
   13ae0:	d9002517 	ldw	r4,148(sp)
   13ae4:	203fec26 	beq	r4,zero,13a98 <__alt_data_end+0xfc013a98>
   13ae8:	10c000c7 	ldb	r3,3(r2)
   13aec:	1801781e 	bne	r3,zero,140d0 <_dtoa_r+0x6f8>
   13af0:	10c000c4 	addi	r3,r2,3
   13af4:	d9802517 	ldw	r6,148(sp)
   13af8:	30c00015 	stw	r3,0(r6)
   13afc:	003fe606 	br	13a98 <__alt_data_end+0xfc013a98>
   13b00:	04e00034 	movhi	r19,32768
   13b04:	9cffffc4 	addi	r19,r19,-1
   13b08:	00800044 	movi	r2,1
   13b0c:	8ce6703a 	and	r19,r17,r19
   13b10:	80800015 	stw	r2,0(r16)
   13b14:	9823883a 	mov	r17,r19
   13b18:	003fcc06 	br	13a4c <__alt_data_end+0xfc013a4c>
   13b1c:	d8800204 	addi	r2,sp,8
   13b20:	d8800015 	stw	r2,0(sp)
   13b24:	d9c00104 	addi	r7,sp,4
   13b28:	900b883a 	mov	r5,r18
   13b2c:	980d883a 	mov	r6,r19
   13b30:	e009883a 	mov	r4,fp
   13b34:	8820d53a 	srli	r16,r17,20
   13b38:	00173640 	call	17364 <__d2b>
   13b3c:	d8800915 	stw	r2,36(sp)
   13b40:	8001651e 	bne	r16,zero,140d8 <_dtoa_r+0x700>
   13b44:	dd800217 	ldw	r22,8(sp)
   13b48:	dc000117 	ldw	r16,4(sp)
   13b4c:	00800804 	movi	r2,32
   13b50:	b421883a 	add	r16,r22,r16
   13b54:	80c10c84 	addi	r3,r16,1074
   13b58:	10c2d10e 	bge	r2,r3,146a0 <_dtoa_r+0xcc8>
   13b5c:	00801004 	movi	r2,64
   13b60:	81010484 	addi	r4,r16,1042
   13b64:	10c7c83a 	sub	r3,r2,r3
   13b68:	9108d83a 	srl	r4,r18,r4
   13b6c:	88e2983a 	sll	r17,r17,r3
   13b70:	2448b03a 	or	r4,r4,r17
   13b74:	001e8540 	call	1e854 <__floatunsidf>
   13b78:	017f8434 	movhi	r5,65040
   13b7c:	01800044 	movi	r6,1
   13b80:	1009883a 	mov	r4,r2
   13b84:	194b883a 	add	r5,r3,r5
   13b88:	843fffc4 	addi	r16,r16,-1
   13b8c:	d9801115 	stw	r6,68(sp)
   13b90:	000d883a 	mov	r6,zero
   13b94:	01cffe34 	movhi	r7,16376
   13b98:	001ddfc0 	call	1ddfc <__subdf3>
   13b9c:	0198dbf4 	movhi	r6,25455
   13ba0:	01cff4f4 	movhi	r7,16339
   13ba4:	3190d844 	addi	r6,r6,17249
   13ba8:	39e1e9c4 	addi	r7,r7,-30809
   13bac:	1009883a 	mov	r4,r2
   13bb0:	180b883a 	mov	r5,r3
   13bb4:	001d5900 	call	1d590 <__muldf3>
   13bb8:	01a2d874 	movhi	r6,35681
   13bbc:	01cff1f4 	movhi	r7,16327
   13bc0:	31b22cc4 	addi	r6,r6,-14157
   13bc4:	39e28a04 	addi	r7,r7,-30168
   13bc8:	180b883a 	mov	r5,r3
   13bcc:	1009883a 	mov	r4,r2
   13bd0:	001c0bc0 	call	1c0bc <__adddf3>
   13bd4:	8009883a 	mov	r4,r16
   13bd8:	1029883a 	mov	r20,r2
   13bdc:	1823883a 	mov	r17,r3
   13be0:	001e7780 	call	1e778 <__floatsidf>
   13be4:	019427f4 	movhi	r6,20639
   13be8:	01cff4f4 	movhi	r7,16339
   13bec:	319e7ec4 	addi	r6,r6,31227
   13bf0:	39d104c4 	addi	r7,r7,17427
   13bf4:	1009883a 	mov	r4,r2
   13bf8:	180b883a 	mov	r5,r3
   13bfc:	001d5900 	call	1d590 <__muldf3>
   13c00:	100d883a 	mov	r6,r2
   13c04:	180f883a 	mov	r7,r3
   13c08:	a009883a 	mov	r4,r20
   13c0c:	880b883a 	mov	r5,r17
   13c10:	001c0bc0 	call	1c0bc <__adddf3>
   13c14:	1009883a 	mov	r4,r2
   13c18:	180b883a 	mov	r5,r3
   13c1c:	1029883a 	mov	r20,r2
   13c20:	1823883a 	mov	r17,r3
   13c24:	001e6f80 	call	1e6f8 <__fixdfsi>
   13c28:	000d883a 	mov	r6,zero
   13c2c:	000f883a 	mov	r7,zero
   13c30:	a009883a 	mov	r4,r20
   13c34:	880b883a 	mov	r5,r17
   13c38:	d8800515 	stw	r2,20(sp)
   13c3c:	001d49c0 	call	1d49c <__ledf2>
   13c40:	10028716 	blt	r2,zero,14660 <_dtoa_r+0xc88>
   13c44:	d8c00517 	ldw	r3,20(sp)
   13c48:	00800584 	movi	r2,22
   13c4c:	10c27536 	bltu	r2,r3,14624 <_dtoa_r+0xc4c>
   13c50:	180490fa 	slli	r2,r3,3
   13c54:	00c000f4 	movhi	r3,3
   13c58:	18e94804 	addi	r3,r3,-23264
   13c5c:	1885883a 	add	r2,r3,r2
   13c60:	11000017 	ldw	r4,0(r2)
   13c64:	11400117 	ldw	r5,4(r2)
   13c68:	900d883a 	mov	r6,r18
   13c6c:	980f883a 	mov	r7,r19
   13c70:	001d3c00 	call	1d3c0 <__gedf2>
   13c74:	00828d0e 	bge	zero,r2,146ac <_dtoa_r+0xcd4>
   13c78:	d9000517 	ldw	r4,20(sp)
   13c7c:	d8000e15 	stw	zero,56(sp)
   13c80:	213fffc4 	addi	r4,r4,-1
   13c84:	d9000515 	stw	r4,20(sp)
   13c88:	b42dc83a 	sub	r22,r22,r16
   13c8c:	b5bfffc4 	addi	r22,r22,-1
   13c90:	b0026f16 	blt	r22,zero,14650 <_dtoa_r+0xc78>
   13c94:	d8000815 	stw	zero,32(sp)
   13c98:	d9c00517 	ldw	r7,20(sp)
   13c9c:	38026416 	blt	r7,zero,14630 <_dtoa_r+0xc58>
   13ca0:	b1ed883a 	add	r22,r22,r7
   13ca4:	d9c00d15 	stw	r7,52(sp)
   13ca8:	d8000a15 	stw	zero,40(sp)
   13cac:	d9800317 	ldw	r6,12(sp)
   13cb0:	00800244 	movi	r2,9
   13cb4:	11811436 	bltu	r2,r6,14108 <_dtoa_r+0x730>
   13cb8:	00800144 	movi	r2,5
   13cbc:	1184e10e 	bge	r2,r6,15044 <_dtoa_r+0x166c>
   13cc0:	31bfff04 	addi	r6,r6,-4
   13cc4:	d9800315 	stw	r6,12(sp)
   13cc8:	0023883a 	mov	r17,zero
   13ccc:	d9800317 	ldw	r6,12(sp)
   13cd0:	008000c4 	movi	r2,3
   13cd4:	30836726 	beq	r6,r2,14a74 <_dtoa_r+0x109c>
   13cd8:	1183410e 	bge	r2,r6,149e0 <_dtoa_r+0x1008>
   13cdc:	d9c00317 	ldw	r7,12(sp)
   13ce0:	00800104 	movi	r2,4
   13ce4:	38827c26 	beq	r7,r2,146d8 <_dtoa_r+0xd00>
   13ce8:	00800144 	movi	r2,5
   13cec:	3884c41e 	bne	r7,r2,15000 <_dtoa_r+0x1628>
   13cf0:	00800044 	movi	r2,1
   13cf4:	d8800b15 	stw	r2,44(sp)
   13cf8:	d8c00517 	ldw	r3,20(sp)
   13cfc:	d9002217 	ldw	r4,136(sp)
   13d00:	1907883a 	add	r3,r3,r4
   13d04:	19800044 	addi	r6,r3,1
   13d08:	d8c00c15 	stw	r3,48(sp)
   13d0c:	d9800615 	stw	r6,24(sp)
   13d10:	0183a40e 	bge	zero,r6,14ba4 <_dtoa_r+0x11cc>
   13d14:	d9800617 	ldw	r6,24(sp)
   13d18:	3021883a 	mov	r16,r6
   13d1c:	e0001115 	stw	zero,68(fp)
   13d20:	008005c4 	movi	r2,23
   13d24:	1184c92e 	bgeu	r2,r6,1504c <_dtoa_r+0x1674>
   13d28:	00c00044 	movi	r3,1
   13d2c:	00800104 	movi	r2,4
   13d30:	1085883a 	add	r2,r2,r2
   13d34:	11000504 	addi	r4,r2,20
   13d38:	180b883a 	mov	r5,r3
   13d3c:	18c00044 	addi	r3,r3,1
   13d40:	313ffb2e 	bgeu	r6,r4,13d30 <__alt_data_end+0xfc013d30>
   13d44:	e1401115 	stw	r5,68(fp)
   13d48:	e009883a 	mov	r4,fp
   13d4c:	00166140 	call	16614 <_Balloc>
   13d50:	d8800715 	stw	r2,28(sp)
   13d54:	e0801015 	stw	r2,64(fp)
   13d58:	00800384 	movi	r2,14
   13d5c:	1400f736 	bltu	r2,r16,1413c <_dtoa_r+0x764>
   13d60:	8800f626 	beq	r17,zero,1413c <_dtoa_r+0x764>
   13d64:	d9c00517 	ldw	r7,20(sp)
   13d68:	01c39a0e 	bge	zero,r7,14bd4 <_dtoa_r+0x11fc>
   13d6c:	388003cc 	andi	r2,r7,15
   13d70:	100490fa 	slli	r2,r2,3
   13d74:	382bd13a 	srai	r21,r7,4
   13d78:	00c000f4 	movhi	r3,3
   13d7c:	18e94804 	addi	r3,r3,-23264
   13d80:	1885883a 	add	r2,r3,r2
   13d84:	a8c0040c 	andi	r3,r21,16
   13d88:	12400017 	ldw	r9,0(r2)
   13d8c:	12000117 	ldw	r8,4(r2)
   13d90:	18037926 	beq	r3,zero,14b78 <_dtoa_r+0x11a0>
   13d94:	008000f4 	movhi	r2,3
   13d98:	10a93e04 	addi	r2,r2,-23304
   13d9c:	11800817 	ldw	r6,32(r2)
   13da0:	11c00917 	ldw	r7,36(r2)
   13da4:	9009883a 	mov	r4,r18
   13da8:	980b883a 	mov	r5,r19
   13dac:	da001715 	stw	r8,92(sp)
   13db0:	da401615 	stw	r9,88(sp)
   13db4:	001c9680 	call	1c968 <__divdf3>
   13db8:	da001717 	ldw	r8,92(sp)
   13dbc:	da401617 	ldw	r9,88(sp)
   13dc0:	ad4003cc 	andi	r21,r21,15
   13dc4:	040000c4 	movi	r16,3
   13dc8:	1023883a 	mov	r17,r2
   13dcc:	1829883a 	mov	r20,r3
   13dd0:	a8001126 	beq	r21,zero,13e18 <_dtoa_r+0x440>
   13dd4:	05c000f4 	movhi	r23,3
   13dd8:	bde93e04 	addi	r23,r23,-23304
   13ddc:	4805883a 	mov	r2,r9
   13de0:	4007883a 	mov	r3,r8
   13de4:	a980004c 	andi	r6,r21,1
   13de8:	1009883a 	mov	r4,r2
   13dec:	a82bd07a 	srai	r21,r21,1
   13df0:	180b883a 	mov	r5,r3
   13df4:	30000426 	beq	r6,zero,13e08 <_dtoa_r+0x430>
   13df8:	b9800017 	ldw	r6,0(r23)
   13dfc:	b9c00117 	ldw	r7,4(r23)
   13e00:	84000044 	addi	r16,r16,1
   13e04:	001d5900 	call	1d590 <__muldf3>
   13e08:	bdc00204 	addi	r23,r23,8
   13e0c:	a83ff51e 	bne	r21,zero,13de4 <__alt_data_end+0xfc013de4>
   13e10:	1013883a 	mov	r9,r2
   13e14:	1811883a 	mov	r8,r3
   13e18:	480d883a 	mov	r6,r9
   13e1c:	400f883a 	mov	r7,r8
   13e20:	8809883a 	mov	r4,r17
   13e24:	a00b883a 	mov	r5,r20
   13e28:	001c9680 	call	1c968 <__divdf3>
   13e2c:	d8800f15 	stw	r2,60(sp)
   13e30:	d8c01015 	stw	r3,64(sp)
   13e34:	d8c00e17 	ldw	r3,56(sp)
   13e38:	18000626 	beq	r3,zero,13e54 <_dtoa_r+0x47c>
   13e3c:	d9000f17 	ldw	r4,60(sp)
   13e40:	d9401017 	ldw	r5,64(sp)
   13e44:	000d883a 	mov	r6,zero
   13e48:	01cffc34 	movhi	r7,16368
   13e4c:	001d49c0 	call	1d49c <__ledf2>
   13e50:	10040b16 	blt	r2,zero,14e80 <_dtoa_r+0x14a8>
   13e54:	8009883a 	mov	r4,r16
   13e58:	001e7780 	call	1e778 <__floatsidf>
   13e5c:	d9800f17 	ldw	r6,60(sp)
   13e60:	d9c01017 	ldw	r7,64(sp)
   13e64:	1009883a 	mov	r4,r2
   13e68:	180b883a 	mov	r5,r3
   13e6c:	001d5900 	call	1d590 <__muldf3>
   13e70:	000d883a 	mov	r6,zero
   13e74:	01d00734 	movhi	r7,16412
   13e78:	1009883a 	mov	r4,r2
   13e7c:	180b883a 	mov	r5,r3
   13e80:	001c0bc0 	call	1c0bc <__adddf3>
   13e84:	1021883a 	mov	r16,r2
   13e88:	d8800617 	ldw	r2,24(sp)
   13e8c:	047f3034 	movhi	r17,64704
   13e90:	1c63883a 	add	r17,r3,r17
   13e94:	10031826 	beq	r2,zero,14af8 <_dtoa_r+0x1120>
   13e98:	d8c00517 	ldw	r3,20(sp)
   13e9c:	db000617 	ldw	r12,24(sp)
   13ea0:	d8c01315 	stw	r3,76(sp)
   13ea4:	d9000b17 	ldw	r4,44(sp)
   13ea8:	20038f26 	beq	r4,zero,14ce8 <_dtoa_r+0x1310>
   13eac:	60bfffc4 	addi	r2,r12,-1
   13eb0:	100490fa 	slli	r2,r2,3
   13eb4:	00c000f4 	movhi	r3,3
   13eb8:	18e94804 	addi	r3,r3,-23264
   13ebc:	1885883a 	add	r2,r3,r2
   13ec0:	11800017 	ldw	r6,0(r2)
   13ec4:	11c00117 	ldw	r7,4(r2)
   13ec8:	d8800717 	ldw	r2,28(sp)
   13ecc:	0009883a 	mov	r4,zero
   13ed0:	014ff834 	movhi	r5,16352
   13ed4:	db001615 	stw	r12,88(sp)
   13ed8:	15c00044 	addi	r23,r2,1
   13edc:	001c9680 	call	1c968 <__divdf3>
   13ee0:	800d883a 	mov	r6,r16
   13ee4:	880f883a 	mov	r7,r17
   13ee8:	1009883a 	mov	r4,r2
   13eec:	180b883a 	mov	r5,r3
   13ef0:	001ddfc0 	call	1ddfc <__subdf3>
   13ef4:	d9401017 	ldw	r5,64(sp)
   13ef8:	d9000f17 	ldw	r4,60(sp)
   13efc:	102b883a 	mov	r21,r2
   13f00:	d8c01215 	stw	r3,72(sp)
   13f04:	001e6f80 	call	1e6f8 <__fixdfsi>
   13f08:	1009883a 	mov	r4,r2
   13f0c:	1029883a 	mov	r20,r2
   13f10:	001e7780 	call	1e778 <__floatsidf>
   13f14:	d9000f17 	ldw	r4,60(sp)
   13f18:	d9401017 	ldw	r5,64(sp)
   13f1c:	100d883a 	mov	r6,r2
   13f20:	180f883a 	mov	r7,r3
   13f24:	001ddfc0 	call	1ddfc <__subdf3>
   13f28:	1823883a 	mov	r17,r3
   13f2c:	d8c00717 	ldw	r3,28(sp)
   13f30:	d9401217 	ldw	r5,72(sp)
   13f34:	a2000c04 	addi	r8,r20,48
   13f38:	1021883a 	mov	r16,r2
   13f3c:	1a000005 	stb	r8,0(r3)
   13f40:	800d883a 	mov	r6,r16
   13f44:	880f883a 	mov	r7,r17
   13f48:	a809883a 	mov	r4,r21
   13f4c:	4029883a 	mov	r20,r8
   13f50:	001d3c00 	call	1d3c0 <__gedf2>
   13f54:	00841d16 	blt	zero,r2,14fcc <_dtoa_r+0x15f4>
   13f58:	800d883a 	mov	r6,r16
   13f5c:	880f883a 	mov	r7,r17
   13f60:	0009883a 	mov	r4,zero
   13f64:	014ffc34 	movhi	r5,16368
   13f68:	001ddfc0 	call	1ddfc <__subdf3>
   13f6c:	d9401217 	ldw	r5,72(sp)
   13f70:	100d883a 	mov	r6,r2
   13f74:	180f883a 	mov	r7,r3
   13f78:	a809883a 	mov	r4,r21
   13f7c:	001d3c00 	call	1d3c0 <__gedf2>
   13f80:	db001617 	ldw	r12,88(sp)
   13f84:	00840e16 	blt	zero,r2,14fc0 <_dtoa_r+0x15e8>
   13f88:	00800044 	movi	r2,1
   13f8c:	13006b0e 	bge	r2,r12,1413c <_dtoa_r+0x764>
   13f90:	d9000717 	ldw	r4,28(sp)
   13f94:	dd800f15 	stw	r22,60(sp)
   13f98:	dcc01015 	stw	r19,64(sp)
   13f9c:	2319883a 	add	r12,r4,r12
   13fa0:	dcc01217 	ldw	r19,72(sp)
   13fa4:	602d883a 	mov	r22,r12
   13fa8:	dc801215 	stw	r18,72(sp)
   13fac:	b825883a 	mov	r18,r23
   13fb0:	00000906 	br	13fd8 <_dtoa_r+0x600>
   13fb4:	001ddfc0 	call	1ddfc <__subdf3>
   13fb8:	a80d883a 	mov	r6,r21
   13fbc:	980f883a 	mov	r7,r19
   13fc0:	1009883a 	mov	r4,r2
   13fc4:	180b883a 	mov	r5,r3
   13fc8:	001d49c0 	call	1d49c <__ledf2>
   13fcc:	1003e816 	blt	r2,zero,14f70 <_dtoa_r+0x1598>
   13fd0:	b825883a 	mov	r18,r23
   13fd4:	bd83e926 	beq	r23,r22,14f7c <_dtoa_r+0x15a4>
   13fd8:	a809883a 	mov	r4,r21
   13fdc:	980b883a 	mov	r5,r19
   13fe0:	000d883a 	mov	r6,zero
   13fe4:	01d00934 	movhi	r7,16420
   13fe8:	001d5900 	call	1d590 <__muldf3>
   13fec:	000d883a 	mov	r6,zero
   13ff0:	01d00934 	movhi	r7,16420
   13ff4:	8009883a 	mov	r4,r16
   13ff8:	880b883a 	mov	r5,r17
   13ffc:	102b883a 	mov	r21,r2
   14000:	1827883a 	mov	r19,r3
   14004:	001d5900 	call	1d590 <__muldf3>
   14008:	180b883a 	mov	r5,r3
   1400c:	1009883a 	mov	r4,r2
   14010:	1821883a 	mov	r16,r3
   14014:	1023883a 	mov	r17,r2
   14018:	001e6f80 	call	1e6f8 <__fixdfsi>
   1401c:	1009883a 	mov	r4,r2
   14020:	1029883a 	mov	r20,r2
   14024:	001e7780 	call	1e778 <__floatsidf>
   14028:	8809883a 	mov	r4,r17
   1402c:	800b883a 	mov	r5,r16
   14030:	100d883a 	mov	r6,r2
   14034:	180f883a 	mov	r7,r3
   14038:	001ddfc0 	call	1ddfc <__subdf3>
   1403c:	a5000c04 	addi	r20,r20,48
   14040:	a80d883a 	mov	r6,r21
   14044:	980f883a 	mov	r7,r19
   14048:	1009883a 	mov	r4,r2
   1404c:	180b883a 	mov	r5,r3
   14050:	95000005 	stb	r20,0(r18)
   14054:	1021883a 	mov	r16,r2
   14058:	1823883a 	mov	r17,r3
   1405c:	001d49c0 	call	1d49c <__ledf2>
   14060:	bdc00044 	addi	r23,r23,1
   14064:	800d883a 	mov	r6,r16
   14068:	880f883a 	mov	r7,r17
   1406c:	0009883a 	mov	r4,zero
   14070:	014ffc34 	movhi	r5,16368
   14074:	103fcf0e 	bge	r2,zero,13fb4 <__alt_data_end+0xfc013fb4>
   14078:	d8c01317 	ldw	r3,76(sp)
   1407c:	d8c00515 	stw	r3,20(sp)
   14080:	d9400917 	ldw	r5,36(sp)
   14084:	e009883a 	mov	r4,fp
   14088:	00166bc0 	call	166bc <_Bfree>
   1408c:	d9000517 	ldw	r4,20(sp)
   14090:	d9802317 	ldw	r6,140(sp)
   14094:	d9c02517 	ldw	r7,148(sp)
   14098:	b8000005 	stb	zero,0(r23)
   1409c:	20800044 	addi	r2,r4,1
   140a0:	30800015 	stw	r2,0(r6)
   140a4:	3802aa26 	beq	r7,zero,14b50 <_dtoa_r+0x1178>
   140a8:	3dc00015 	stw	r23,0(r7)
   140ac:	d8800717 	ldw	r2,28(sp)
   140b0:	003e7906 	br	13a98 <__alt_data_end+0xfc013a98>
   140b4:	00800434 	movhi	r2,16
   140b8:	10bfffc4 	addi	r2,r2,-1
   140bc:	88a2703a 	and	r17,r17,r2
   140c0:	883e851e 	bne	r17,zero,13ad8 <__alt_data_end+0xfc013ad8>
   140c4:	008000f4 	movhi	r2,3
   140c8:	10a92a04 	addi	r2,r2,-23384
   140cc:	003e8406 	br	13ae0 <__alt_data_end+0xfc013ae0>
   140d0:	10c00204 	addi	r3,r2,8
   140d4:	003e8706 	br	13af4 <__alt_data_end+0xfc013af4>
   140d8:	01400434 	movhi	r5,16
   140dc:	297fffc4 	addi	r5,r5,-1
   140e0:	994a703a 	and	r5,r19,r5
   140e4:	9009883a 	mov	r4,r18
   140e8:	843f0044 	addi	r16,r16,-1023
   140ec:	294ffc34 	orhi	r5,r5,16368
   140f0:	dd800217 	ldw	r22,8(sp)
   140f4:	d8001115 	stw	zero,68(sp)
   140f8:	003ea506 	br	13b90 <__alt_data_end+0xfc013b90>
   140fc:	008000f4 	movhi	r2,3
   14100:	10a91904 	addi	r2,r2,-23452
   14104:	003e6406 	br	13a98 <__alt_data_end+0xfc013a98>
   14108:	e0001115 	stw	zero,68(fp)
   1410c:	000b883a 	mov	r5,zero
   14110:	e009883a 	mov	r4,fp
   14114:	00166140 	call	16614 <_Balloc>
   14118:	01bfffc4 	movi	r6,-1
   1411c:	01c00044 	movi	r7,1
   14120:	d8800715 	stw	r2,28(sp)
   14124:	d9800c15 	stw	r6,48(sp)
   14128:	e0801015 	stw	r2,64(fp)
   1412c:	d8000315 	stw	zero,12(sp)
   14130:	d9c00b15 	stw	r7,44(sp)
   14134:	d9800615 	stw	r6,24(sp)
   14138:	d8002215 	stw	zero,136(sp)
   1413c:	d8800117 	ldw	r2,4(sp)
   14140:	10008916 	blt	r2,zero,14368 <_dtoa_r+0x990>
   14144:	d9000517 	ldw	r4,20(sp)
   14148:	00c00384 	movi	r3,14
   1414c:	19008616 	blt	r3,r4,14368 <_dtoa_r+0x990>
   14150:	200490fa 	slli	r2,r4,3
   14154:	00c000f4 	movhi	r3,3
   14158:	d9802217 	ldw	r6,136(sp)
   1415c:	18e94804 	addi	r3,r3,-23264
   14160:	1885883a 	add	r2,r3,r2
   14164:	14000017 	ldw	r16,0(r2)
   14168:	14400117 	ldw	r17,4(r2)
   1416c:	30016316 	blt	r6,zero,146fc <_dtoa_r+0xd24>
   14170:	800d883a 	mov	r6,r16
   14174:	880f883a 	mov	r7,r17
   14178:	9009883a 	mov	r4,r18
   1417c:	980b883a 	mov	r5,r19
   14180:	001c9680 	call	1c968 <__divdf3>
   14184:	180b883a 	mov	r5,r3
   14188:	1009883a 	mov	r4,r2
   1418c:	001e6f80 	call	1e6f8 <__fixdfsi>
   14190:	1009883a 	mov	r4,r2
   14194:	102b883a 	mov	r21,r2
   14198:	001e7780 	call	1e778 <__floatsidf>
   1419c:	800d883a 	mov	r6,r16
   141a0:	880f883a 	mov	r7,r17
   141a4:	1009883a 	mov	r4,r2
   141a8:	180b883a 	mov	r5,r3
   141ac:	001d5900 	call	1d590 <__muldf3>
   141b0:	100d883a 	mov	r6,r2
   141b4:	180f883a 	mov	r7,r3
   141b8:	9009883a 	mov	r4,r18
   141bc:	980b883a 	mov	r5,r19
   141c0:	001ddfc0 	call	1ddfc <__subdf3>
   141c4:	d9c00717 	ldw	r7,28(sp)
   141c8:	1009883a 	mov	r4,r2
   141cc:	a8800c04 	addi	r2,r21,48
   141d0:	38800005 	stb	r2,0(r7)
   141d4:	3dc00044 	addi	r23,r7,1
   141d8:	d9c00617 	ldw	r7,24(sp)
   141dc:	01800044 	movi	r6,1
   141e0:	180b883a 	mov	r5,r3
   141e4:	2005883a 	mov	r2,r4
   141e8:	39803826 	beq	r7,r6,142cc <_dtoa_r+0x8f4>
   141ec:	000d883a 	mov	r6,zero
   141f0:	01d00934 	movhi	r7,16420
   141f4:	001d5900 	call	1d590 <__muldf3>
   141f8:	000d883a 	mov	r6,zero
   141fc:	000f883a 	mov	r7,zero
   14200:	1009883a 	mov	r4,r2
   14204:	180b883a 	mov	r5,r3
   14208:	1025883a 	mov	r18,r2
   1420c:	1827883a 	mov	r19,r3
   14210:	001d3380 	call	1d338 <__eqdf2>
   14214:	103f9a26 	beq	r2,zero,14080 <__alt_data_end+0xfc014080>
   14218:	d9c00617 	ldw	r7,24(sp)
   1421c:	d8c00717 	ldw	r3,28(sp)
   14220:	b829883a 	mov	r20,r23
   14224:	38bfffc4 	addi	r2,r7,-1
   14228:	18ad883a 	add	r22,r3,r2
   1422c:	00000a06 	br	14258 <_dtoa_r+0x880>
   14230:	001d5900 	call	1d590 <__muldf3>
   14234:	000d883a 	mov	r6,zero
   14238:	000f883a 	mov	r7,zero
   1423c:	1009883a 	mov	r4,r2
   14240:	180b883a 	mov	r5,r3
   14244:	1025883a 	mov	r18,r2
   14248:	1827883a 	mov	r19,r3
   1424c:	b829883a 	mov	r20,r23
   14250:	001d3380 	call	1d338 <__eqdf2>
   14254:	103f8a26 	beq	r2,zero,14080 <__alt_data_end+0xfc014080>
   14258:	800d883a 	mov	r6,r16
   1425c:	880f883a 	mov	r7,r17
   14260:	9009883a 	mov	r4,r18
   14264:	980b883a 	mov	r5,r19
   14268:	001c9680 	call	1c968 <__divdf3>
   1426c:	180b883a 	mov	r5,r3
   14270:	1009883a 	mov	r4,r2
   14274:	001e6f80 	call	1e6f8 <__fixdfsi>
   14278:	1009883a 	mov	r4,r2
   1427c:	102b883a 	mov	r21,r2
   14280:	001e7780 	call	1e778 <__floatsidf>
   14284:	800d883a 	mov	r6,r16
   14288:	880f883a 	mov	r7,r17
   1428c:	1009883a 	mov	r4,r2
   14290:	180b883a 	mov	r5,r3
   14294:	001d5900 	call	1d590 <__muldf3>
   14298:	100d883a 	mov	r6,r2
   1429c:	180f883a 	mov	r7,r3
   142a0:	9009883a 	mov	r4,r18
   142a4:	980b883a 	mov	r5,r19
   142a8:	001ddfc0 	call	1ddfc <__subdf3>
   142ac:	aa000c04 	addi	r8,r21,48
   142b0:	a2000005 	stb	r8,0(r20)
   142b4:	000d883a 	mov	r6,zero
   142b8:	01d00934 	movhi	r7,16420
   142bc:	1009883a 	mov	r4,r2
   142c0:	180b883a 	mov	r5,r3
   142c4:	a5c00044 	addi	r23,r20,1
   142c8:	b53fd91e 	bne	r22,r20,14230 <__alt_data_end+0xfc014230>
   142cc:	100d883a 	mov	r6,r2
   142d0:	180f883a 	mov	r7,r3
   142d4:	1009883a 	mov	r4,r2
   142d8:	180b883a 	mov	r5,r3
   142dc:	001c0bc0 	call	1c0bc <__adddf3>
   142e0:	100d883a 	mov	r6,r2
   142e4:	180f883a 	mov	r7,r3
   142e8:	8009883a 	mov	r4,r16
   142ec:	880b883a 	mov	r5,r17
   142f0:	1027883a 	mov	r19,r2
   142f4:	1825883a 	mov	r18,r3
   142f8:	001d49c0 	call	1d49c <__ledf2>
   142fc:	10000816 	blt	r2,zero,14320 <_dtoa_r+0x948>
   14300:	980d883a 	mov	r6,r19
   14304:	900f883a 	mov	r7,r18
   14308:	8009883a 	mov	r4,r16
   1430c:	880b883a 	mov	r5,r17
   14310:	001d3380 	call	1d338 <__eqdf2>
   14314:	103f5a1e 	bne	r2,zero,14080 <__alt_data_end+0xfc014080>
   14318:	ad40004c 	andi	r21,r21,1
   1431c:	a83f5826 	beq	r21,zero,14080 <__alt_data_end+0xfc014080>
   14320:	bd3fffc3 	ldbu	r20,-1(r23)
   14324:	b8bfffc4 	addi	r2,r23,-1
   14328:	1007883a 	mov	r3,r2
   1432c:	01400e44 	movi	r5,57
   14330:	d9800717 	ldw	r6,28(sp)
   14334:	00000506 	br	1434c <_dtoa_r+0x974>
   14338:	18ffffc4 	addi	r3,r3,-1
   1433c:	11824726 	beq	r2,r6,14c5c <_dtoa_r+0x1284>
   14340:	1d000003 	ldbu	r20,0(r3)
   14344:	102f883a 	mov	r23,r2
   14348:	10bfffc4 	addi	r2,r2,-1
   1434c:	a1003fcc 	andi	r4,r20,255
   14350:	2100201c 	xori	r4,r4,128
   14354:	213fe004 	addi	r4,r4,-128
   14358:	217ff726 	beq	r4,r5,14338 <__alt_data_end+0xfc014338>
   1435c:	a2000044 	addi	r8,r20,1
   14360:	12000005 	stb	r8,0(r2)
   14364:	003f4606 	br	14080 <__alt_data_end+0xfc014080>
   14368:	d9000b17 	ldw	r4,44(sp)
   1436c:	2000c826 	beq	r4,zero,14690 <_dtoa_r+0xcb8>
   14370:	d9800317 	ldw	r6,12(sp)
   14374:	00c00044 	movi	r3,1
   14378:	1980f90e 	bge	r3,r6,14760 <_dtoa_r+0xd88>
   1437c:	d8800617 	ldw	r2,24(sp)
   14380:	d8c00a17 	ldw	r3,40(sp)
   14384:	157fffc4 	addi	r21,r2,-1
   14388:	1d41f316 	blt	r3,r21,14b58 <_dtoa_r+0x1180>
   1438c:	1d6bc83a 	sub	r21,r3,r21
   14390:	d9c00617 	ldw	r7,24(sp)
   14394:	3802aa16 	blt	r7,zero,14e40 <_dtoa_r+0x1468>
   14398:	dd000817 	ldw	r20,32(sp)
   1439c:	d8800617 	ldw	r2,24(sp)
   143a0:	d8c00817 	ldw	r3,32(sp)
   143a4:	01400044 	movi	r5,1
   143a8:	e009883a 	mov	r4,fp
   143ac:	1887883a 	add	r3,r3,r2
   143b0:	d8c00815 	stw	r3,32(sp)
   143b4:	b0ad883a 	add	r22,r22,r2
   143b8:	0016a480 	call	16a48 <__i2b>
   143bc:	1023883a 	mov	r17,r2
   143c0:	a0000826 	beq	r20,zero,143e4 <_dtoa_r+0xa0c>
   143c4:	0580070e 	bge	zero,r22,143e4 <_dtoa_r+0xa0c>
   143c8:	a005883a 	mov	r2,r20
   143cc:	b500b916 	blt	r22,r20,146b4 <_dtoa_r+0xcdc>
   143d0:	d9000817 	ldw	r4,32(sp)
   143d4:	a0a9c83a 	sub	r20,r20,r2
   143d8:	b0adc83a 	sub	r22,r22,r2
   143dc:	2089c83a 	sub	r4,r4,r2
   143e0:	d9000815 	stw	r4,32(sp)
   143e4:	d9800a17 	ldw	r6,40(sp)
   143e8:	0181810e 	bge	zero,r6,149f0 <_dtoa_r+0x1018>
   143ec:	d9c00b17 	ldw	r7,44(sp)
   143f0:	3800b326 	beq	r7,zero,146c0 <_dtoa_r+0xce8>
   143f4:	a800b226 	beq	r21,zero,146c0 <_dtoa_r+0xce8>
   143f8:	880b883a 	mov	r5,r17
   143fc:	a80d883a 	mov	r6,r21
   14400:	e009883a 	mov	r4,fp
   14404:	0016d100 	call	16d10 <__pow5mult>
   14408:	d9800917 	ldw	r6,36(sp)
   1440c:	100b883a 	mov	r5,r2
   14410:	e009883a 	mov	r4,fp
   14414:	1023883a 	mov	r17,r2
   14418:	0016a840 	call	16a84 <__multiply>
   1441c:	1021883a 	mov	r16,r2
   14420:	d8800a17 	ldw	r2,40(sp)
   14424:	d9400917 	ldw	r5,36(sp)
   14428:	e009883a 	mov	r4,fp
   1442c:	1545c83a 	sub	r2,r2,r21
   14430:	d8800a15 	stw	r2,40(sp)
   14434:	00166bc0 	call	166bc <_Bfree>
   14438:	d8c00a17 	ldw	r3,40(sp)
   1443c:	18009f1e 	bne	r3,zero,146bc <_dtoa_r+0xce4>
   14440:	05c00044 	movi	r23,1
   14444:	e009883a 	mov	r4,fp
   14448:	b80b883a 	mov	r5,r23
   1444c:	0016a480 	call	16a48 <__i2b>
   14450:	d9000d17 	ldw	r4,52(sp)
   14454:	102b883a 	mov	r21,r2
   14458:	2000ce26 	beq	r4,zero,14794 <_dtoa_r+0xdbc>
   1445c:	200d883a 	mov	r6,r4
   14460:	100b883a 	mov	r5,r2
   14464:	e009883a 	mov	r4,fp
   14468:	0016d100 	call	16d10 <__pow5mult>
   1446c:	d9800317 	ldw	r6,12(sp)
   14470:	102b883a 	mov	r21,r2
   14474:	b981810e 	bge	r23,r6,14a7c <_dtoa_r+0x10a4>
   14478:	0027883a 	mov	r19,zero
   1447c:	a8800417 	ldw	r2,16(r21)
   14480:	05c00804 	movi	r23,32
   14484:	10800104 	addi	r2,r2,4
   14488:	1085883a 	add	r2,r2,r2
   1448c:	1085883a 	add	r2,r2,r2
   14490:	a885883a 	add	r2,r21,r2
   14494:	11000017 	ldw	r4,0(r2)
   14498:	00169300 	call	16930 <__hi0bits>
   1449c:	b885c83a 	sub	r2,r23,r2
   144a0:	1585883a 	add	r2,r2,r22
   144a4:	108007cc 	andi	r2,r2,31
   144a8:	1000b326 	beq	r2,zero,14778 <_dtoa_r+0xda0>
   144ac:	00c00804 	movi	r3,32
   144b0:	1887c83a 	sub	r3,r3,r2
   144b4:	01000104 	movi	r4,4
   144b8:	20c2cd0e 	bge	r4,r3,14ff0 <_dtoa_r+0x1618>
   144bc:	00c00704 	movi	r3,28
   144c0:	1885c83a 	sub	r2,r3,r2
   144c4:	d8c00817 	ldw	r3,32(sp)
   144c8:	a0a9883a 	add	r20,r20,r2
   144cc:	b0ad883a 	add	r22,r22,r2
   144d0:	1887883a 	add	r3,r3,r2
   144d4:	d8c00815 	stw	r3,32(sp)
   144d8:	d9800817 	ldw	r6,32(sp)
   144dc:	0180040e 	bge	zero,r6,144f0 <_dtoa_r+0xb18>
   144e0:	800b883a 	mov	r5,r16
   144e4:	e009883a 	mov	r4,fp
   144e8:	0016e500 	call	16e50 <__lshift>
   144ec:	1021883a 	mov	r16,r2
   144f0:	0580050e 	bge	zero,r22,14508 <_dtoa_r+0xb30>
   144f4:	a80b883a 	mov	r5,r21
   144f8:	b00d883a 	mov	r6,r22
   144fc:	e009883a 	mov	r4,fp
   14500:	0016e500 	call	16e50 <__lshift>
   14504:	102b883a 	mov	r21,r2
   14508:	d9c00e17 	ldw	r7,56(sp)
   1450c:	3801211e 	bne	r7,zero,14994 <_dtoa_r+0xfbc>
   14510:	d9800617 	ldw	r6,24(sp)
   14514:	0181380e 	bge	zero,r6,149f8 <_dtoa_r+0x1020>
   14518:	d8c00b17 	ldw	r3,44(sp)
   1451c:	1800ab1e 	bne	r3,zero,147cc <_dtoa_r+0xdf4>
   14520:	dc800717 	ldw	r18,28(sp)
   14524:	dcc00617 	ldw	r19,24(sp)
   14528:	9029883a 	mov	r20,r18
   1452c:	00000206 	br	14538 <_dtoa_r+0xb60>
   14530:	00166e40 	call	166e4 <__multadd>
   14534:	1021883a 	mov	r16,r2
   14538:	a80b883a 	mov	r5,r21
   1453c:	8009883a 	mov	r4,r16
   14540:	00137b00 	call	137b0 <quorem>
   14544:	10800c04 	addi	r2,r2,48
   14548:	90800005 	stb	r2,0(r18)
   1454c:	94800044 	addi	r18,r18,1
   14550:	9507c83a 	sub	r3,r18,r20
   14554:	000f883a 	mov	r7,zero
   14558:	01800284 	movi	r6,10
   1455c:	800b883a 	mov	r5,r16
   14560:	e009883a 	mov	r4,fp
   14564:	1cfff216 	blt	r3,r19,14530 <__alt_data_end+0xfc014530>
   14568:	1011883a 	mov	r8,r2
   1456c:	d8800617 	ldw	r2,24(sp)
   14570:	0082370e 	bge	zero,r2,14e50 <_dtoa_r+0x1478>
   14574:	d9000717 	ldw	r4,28(sp)
   14578:	0025883a 	mov	r18,zero
   1457c:	20af883a 	add	r23,r4,r2
   14580:	01800044 	movi	r6,1
   14584:	800b883a 	mov	r5,r16
   14588:	e009883a 	mov	r4,fp
   1458c:	da001715 	stw	r8,92(sp)
   14590:	0016e500 	call	16e50 <__lshift>
   14594:	a80b883a 	mov	r5,r21
   14598:	1009883a 	mov	r4,r2
   1459c:	d8800915 	stw	r2,36(sp)
   145a0:	0016f980 	call	16f98 <__mcmp>
   145a4:	da001717 	ldw	r8,92(sp)
   145a8:	0081800e 	bge	zero,r2,14bac <_dtoa_r+0x11d4>
   145ac:	b93fffc3 	ldbu	r4,-1(r23)
   145b0:	b8bfffc4 	addi	r2,r23,-1
   145b4:	1007883a 	mov	r3,r2
   145b8:	01800e44 	movi	r6,57
   145bc:	d9c00717 	ldw	r7,28(sp)
   145c0:	00000506 	br	145d8 <_dtoa_r+0xc00>
   145c4:	18ffffc4 	addi	r3,r3,-1
   145c8:	11c12326 	beq	r2,r7,14a58 <_dtoa_r+0x1080>
   145cc:	19000003 	ldbu	r4,0(r3)
   145d0:	102f883a 	mov	r23,r2
   145d4:	10bfffc4 	addi	r2,r2,-1
   145d8:	21403fcc 	andi	r5,r4,255
   145dc:	2940201c 	xori	r5,r5,128
   145e0:	297fe004 	addi	r5,r5,-128
   145e4:	29bff726 	beq	r5,r6,145c4 <__alt_data_end+0xfc0145c4>
   145e8:	21000044 	addi	r4,r4,1
   145ec:	11000005 	stb	r4,0(r2)
   145f0:	a80b883a 	mov	r5,r21
   145f4:	e009883a 	mov	r4,fp
   145f8:	00166bc0 	call	166bc <_Bfree>
   145fc:	883ea026 	beq	r17,zero,14080 <__alt_data_end+0xfc014080>
   14600:	90000426 	beq	r18,zero,14614 <_dtoa_r+0xc3c>
   14604:	94400326 	beq	r18,r17,14614 <_dtoa_r+0xc3c>
   14608:	900b883a 	mov	r5,r18
   1460c:	e009883a 	mov	r4,fp
   14610:	00166bc0 	call	166bc <_Bfree>
   14614:	880b883a 	mov	r5,r17
   14618:	e009883a 	mov	r4,fp
   1461c:	00166bc0 	call	166bc <_Bfree>
   14620:	003e9706 	br	14080 <__alt_data_end+0xfc014080>
   14624:	01800044 	movi	r6,1
   14628:	d9800e15 	stw	r6,56(sp)
   1462c:	003d9606 	br	13c88 <__alt_data_end+0xfc013c88>
   14630:	d8800817 	ldw	r2,32(sp)
   14634:	d8c00517 	ldw	r3,20(sp)
   14638:	d8000d15 	stw	zero,52(sp)
   1463c:	10c5c83a 	sub	r2,r2,r3
   14640:	00c9c83a 	sub	r4,zero,r3
   14644:	d8800815 	stw	r2,32(sp)
   14648:	d9000a15 	stw	r4,40(sp)
   1464c:	003d9706 	br	13cac <__alt_data_end+0xfc013cac>
   14650:	05adc83a 	sub	r22,zero,r22
   14654:	dd800815 	stw	r22,32(sp)
   14658:	002d883a 	mov	r22,zero
   1465c:	003d8e06 	br	13c98 <__alt_data_end+0xfc013c98>
   14660:	d9000517 	ldw	r4,20(sp)
   14664:	001e7780 	call	1e778 <__floatsidf>
   14668:	100d883a 	mov	r6,r2
   1466c:	180f883a 	mov	r7,r3
   14670:	a009883a 	mov	r4,r20
   14674:	880b883a 	mov	r5,r17
   14678:	001d3380 	call	1d338 <__eqdf2>
   1467c:	103d7126 	beq	r2,zero,13c44 <__alt_data_end+0xfc013c44>
   14680:	d9c00517 	ldw	r7,20(sp)
   14684:	39ffffc4 	addi	r7,r7,-1
   14688:	d9c00515 	stw	r7,20(sp)
   1468c:	003d6d06 	br	13c44 <__alt_data_end+0xfc013c44>
   14690:	dd400a17 	ldw	r21,40(sp)
   14694:	dd000817 	ldw	r20,32(sp)
   14698:	0023883a 	mov	r17,zero
   1469c:	003f4806 	br	143c0 <__alt_data_end+0xfc0143c0>
   146a0:	10e3c83a 	sub	r17,r2,r3
   146a4:	9448983a 	sll	r4,r18,r17
   146a8:	003d3206 	br	13b74 <__alt_data_end+0xfc013b74>
   146ac:	d8000e15 	stw	zero,56(sp)
   146b0:	003d7506 	br	13c88 <__alt_data_end+0xfc013c88>
   146b4:	b005883a 	mov	r2,r22
   146b8:	003f4506 	br	143d0 <__alt_data_end+0xfc0143d0>
   146bc:	dc000915 	stw	r16,36(sp)
   146c0:	d9800a17 	ldw	r6,40(sp)
   146c4:	d9400917 	ldw	r5,36(sp)
   146c8:	e009883a 	mov	r4,fp
   146cc:	0016d100 	call	16d10 <__pow5mult>
   146d0:	1021883a 	mov	r16,r2
   146d4:	003f5a06 	br	14440 <__alt_data_end+0xfc014440>
   146d8:	01c00044 	movi	r7,1
   146dc:	d9c00b15 	stw	r7,44(sp)
   146e0:	d8802217 	ldw	r2,136(sp)
   146e4:	0081280e 	bge	zero,r2,14b88 <_dtoa_r+0x11b0>
   146e8:	100d883a 	mov	r6,r2
   146ec:	1021883a 	mov	r16,r2
   146f0:	d8800c15 	stw	r2,48(sp)
   146f4:	d8800615 	stw	r2,24(sp)
   146f8:	003d8806 	br	13d1c <__alt_data_end+0xfc013d1c>
   146fc:	d8800617 	ldw	r2,24(sp)
   14700:	00be9b16 	blt	zero,r2,14170 <__alt_data_end+0xfc014170>
   14704:	10010f1e 	bne	r2,zero,14b44 <_dtoa_r+0x116c>
   14708:	880b883a 	mov	r5,r17
   1470c:	000d883a 	mov	r6,zero
   14710:	01d00534 	movhi	r7,16404
   14714:	8009883a 	mov	r4,r16
   14718:	001d5900 	call	1d590 <__muldf3>
   1471c:	900d883a 	mov	r6,r18
   14720:	980f883a 	mov	r7,r19
   14724:	1009883a 	mov	r4,r2
   14728:	180b883a 	mov	r5,r3
   1472c:	001d3c00 	call	1d3c0 <__gedf2>
   14730:	002b883a 	mov	r21,zero
   14734:	0023883a 	mov	r17,zero
   14738:	1000bf16 	blt	r2,zero,14a38 <_dtoa_r+0x1060>
   1473c:	d9802217 	ldw	r6,136(sp)
   14740:	ddc00717 	ldw	r23,28(sp)
   14744:	018c303a 	nor	r6,zero,r6
   14748:	d9800515 	stw	r6,20(sp)
   1474c:	a80b883a 	mov	r5,r21
   14750:	e009883a 	mov	r4,fp
   14754:	00166bc0 	call	166bc <_Bfree>
   14758:	883e4926 	beq	r17,zero,14080 <__alt_data_end+0xfc014080>
   1475c:	003fad06 	br	14614 <__alt_data_end+0xfc014614>
   14760:	d9c01117 	ldw	r7,68(sp)
   14764:	3801bc26 	beq	r7,zero,14e58 <_dtoa_r+0x1480>
   14768:	10810cc4 	addi	r2,r2,1075
   1476c:	dd400a17 	ldw	r21,40(sp)
   14770:	dd000817 	ldw	r20,32(sp)
   14774:	003f0a06 	br	143a0 <__alt_data_end+0xfc0143a0>
   14778:	00800704 	movi	r2,28
   1477c:	d9000817 	ldw	r4,32(sp)
   14780:	a0a9883a 	add	r20,r20,r2
   14784:	b0ad883a 	add	r22,r22,r2
   14788:	2089883a 	add	r4,r4,r2
   1478c:	d9000815 	stw	r4,32(sp)
   14790:	003f5106 	br	144d8 <__alt_data_end+0xfc0144d8>
   14794:	d8c00317 	ldw	r3,12(sp)
   14798:	b8c1fc0e 	bge	r23,r3,14f8c <_dtoa_r+0x15b4>
   1479c:	0027883a 	mov	r19,zero
   147a0:	b805883a 	mov	r2,r23
   147a4:	003f3e06 	br	144a0 <__alt_data_end+0xfc0144a0>
   147a8:	880b883a 	mov	r5,r17
   147ac:	e009883a 	mov	r4,fp
   147b0:	000f883a 	mov	r7,zero
   147b4:	01800284 	movi	r6,10
   147b8:	00166e40 	call	166e4 <__multadd>
   147bc:	d9000c17 	ldw	r4,48(sp)
   147c0:	1023883a 	mov	r17,r2
   147c4:	0102040e 	bge	zero,r4,14fd8 <_dtoa_r+0x1600>
   147c8:	d9000615 	stw	r4,24(sp)
   147cc:	0500050e 	bge	zero,r20,147e4 <_dtoa_r+0xe0c>
   147d0:	880b883a 	mov	r5,r17
   147d4:	a00d883a 	mov	r6,r20
   147d8:	e009883a 	mov	r4,fp
   147dc:	0016e500 	call	16e50 <__lshift>
   147e0:	1023883a 	mov	r17,r2
   147e4:	9801241e 	bne	r19,zero,14c78 <_dtoa_r+0x12a0>
   147e8:	8829883a 	mov	r20,r17
   147ec:	d9000617 	ldw	r4,24(sp)
   147f0:	dcc00717 	ldw	r19,28(sp)
   147f4:	9480004c 	andi	r18,r18,1
   147f8:	20bfffc4 	addi	r2,r4,-1
   147fc:	9885883a 	add	r2,r19,r2
   14800:	d8800415 	stw	r2,16(sp)
   14804:	dc800615 	stw	r18,24(sp)
   14808:	a80b883a 	mov	r5,r21
   1480c:	8009883a 	mov	r4,r16
   14810:	00137b00 	call	137b0 <quorem>
   14814:	880b883a 	mov	r5,r17
   14818:	8009883a 	mov	r4,r16
   1481c:	102f883a 	mov	r23,r2
   14820:	0016f980 	call	16f98 <__mcmp>
   14824:	a80b883a 	mov	r5,r21
   14828:	a00d883a 	mov	r6,r20
   1482c:	e009883a 	mov	r4,fp
   14830:	102d883a 	mov	r22,r2
   14834:	0016ff80 	call	16ff8 <__mdiff>
   14838:	1007883a 	mov	r3,r2
   1483c:	10800317 	ldw	r2,12(r2)
   14840:	bc800c04 	addi	r18,r23,48
   14844:	180b883a 	mov	r5,r3
   14848:	10004e1e 	bne	r2,zero,14984 <_dtoa_r+0xfac>
   1484c:	8009883a 	mov	r4,r16
   14850:	d8c01615 	stw	r3,88(sp)
   14854:	0016f980 	call	16f98 <__mcmp>
   14858:	d8c01617 	ldw	r3,88(sp)
   1485c:	e009883a 	mov	r4,fp
   14860:	d8801615 	stw	r2,88(sp)
   14864:	180b883a 	mov	r5,r3
   14868:	00166bc0 	call	166bc <_Bfree>
   1486c:	d8801617 	ldw	r2,88(sp)
   14870:	1000041e 	bne	r2,zero,14884 <_dtoa_r+0xeac>
   14874:	d9800317 	ldw	r6,12(sp)
   14878:	3000021e 	bne	r6,zero,14884 <_dtoa_r+0xeac>
   1487c:	d8c00617 	ldw	r3,24(sp)
   14880:	18003726 	beq	r3,zero,14960 <_dtoa_r+0xf88>
   14884:	b0002016 	blt	r22,zero,14908 <_dtoa_r+0xf30>
   14888:	b000041e 	bne	r22,zero,1489c <_dtoa_r+0xec4>
   1488c:	d9000317 	ldw	r4,12(sp)
   14890:	2000021e 	bne	r4,zero,1489c <_dtoa_r+0xec4>
   14894:	d8c00617 	ldw	r3,24(sp)
   14898:	18001b26 	beq	r3,zero,14908 <_dtoa_r+0xf30>
   1489c:	00810716 	blt	zero,r2,14cbc <_dtoa_r+0x12e4>
   148a0:	d8c00417 	ldw	r3,16(sp)
   148a4:	9d800044 	addi	r22,r19,1
   148a8:	9c800005 	stb	r18,0(r19)
   148ac:	b02f883a 	mov	r23,r22
   148b0:	98c10626 	beq	r19,r3,14ccc <_dtoa_r+0x12f4>
   148b4:	800b883a 	mov	r5,r16
   148b8:	000f883a 	mov	r7,zero
   148bc:	01800284 	movi	r6,10
   148c0:	e009883a 	mov	r4,fp
   148c4:	00166e40 	call	166e4 <__multadd>
   148c8:	1021883a 	mov	r16,r2
   148cc:	000f883a 	mov	r7,zero
   148d0:	01800284 	movi	r6,10
   148d4:	880b883a 	mov	r5,r17
   148d8:	e009883a 	mov	r4,fp
   148dc:	8d002526 	beq	r17,r20,14974 <_dtoa_r+0xf9c>
   148e0:	00166e40 	call	166e4 <__multadd>
   148e4:	a00b883a 	mov	r5,r20
   148e8:	000f883a 	mov	r7,zero
   148ec:	01800284 	movi	r6,10
   148f0:	e009883a 	mov	r4,fp
   148f4:	1023883a 	mov	r17,r2
   148f8:	00166e40 	call	166e4 <__multadd>
   148fc:	1029883a 	mov	r20,r2
   14900:	b027883a 	mov	r19,r22
   14904:	003fc006 	br	14808 <__alt_data_end+0xfc014808>
   14908:	9011883a 	mov	r8,r18
   1490c:	00800e0e 	bge	zero,r2,14948 <_dtoa_r+0xf70>
   14910:	800b883a 	mov	r5,r16
   14914:	01800044 	movi	r6,1
   14918:	e009883a 	mov	r4,fp
   1491c:	da001715 	stw	r8,92(sp)
   14920:	0016e500 	call	16e50 <__lshift>
   14924:	a80b883a 	mov	r5,r21
   14928:	1009883a 	mov	r4,r2
   1492c:	1021883a 	mov	r16,r2
   14930:	0016f980 	call	16f98 <__mcmp>
   14934:	da001717 	ldw	r8,92(sp)
   14938:	0081960e 	bge	zero,r2,14f94 <_dtoa_r+0x15bc>
   1493c:	00800e44 	movi	r2,57
   14940:	40817026 	beq	r8,r2,14f04 <_dtoa_r+0x152c>
   14944:	ba000c44 	addi	r8,r23,49
   14948:	8825883a 	mov	r18,r17
   1494c:	9dc00044 	addi	r23,r19,1
   14950:	9a000005 	stb	r8,0(r19)
   14954:	a023883a 	mov	r17,r20
   14958:	dc000915 	stw	r16,36(sp)
   1495c:	003f2406 	br	145f0 <__alt_data_end+0xfc0145f0>
   14960:	00800e44 	movi	r2,57
   14964:	9011883a 	mov	r8,r18
   14968:	90816626 	beq	r18,r2,14f04 <_dtoa_r+0x152c>
   1496c:	05bff516 	blt	zero,r22,14944 <__alt_data_end+0xfc014944>
   14970:	003ff506 	br	14948 <__alt_data_end+0xfc014948>
   14974:	00166e40 	call	166e4 <__multadd>
   14978:	1023883a 	mov	r17,r2
   1497c:	1029883a 	mov	r20,r2
   14980:	003fdf06 	br	14900 <__alt_data_end+0xfc014900>
   14984:	e009883a 	mov	r4,fp
   14988:	00166bc0 	call	166bc <_Bfree>
   1498c:	00800044 	movi	r2,1
   14990:	003fbc06 	br	14884 <__alt_data_end+0xfc014884>
   14994:	a80b883a 	mov	r5,r21
   14998:	8009883a 	mov	r4,r16
   1499c:	0016f980 	call	16f98 <__mcmp>
   149a0:	103edb0e 	bge	r2,zero,14510 <__alt_data_end+0xfc014510>
   149a4:	800b883a 	mov	r5,r16
   149a8:	000f883a 	mov	r7,zero
   149ac:	01800284 	movi	r6,10
   149b0:	e009883a 	mov	r4,fp
   149b4:	00166e40 	call	166e4 <__multadd>
   149b8:	1021883a 	mov	r16,r2
   149bc:	d8800517 	ldw	r2,20(sp)
   149c0:	d8c00b17 	ldw	r3,44(sp)
   149c4:	10bfffc4 	addi	r2,r2,-1
   149c8:	d8800515 	stw	r2,20(sp)
   149cc:	183f761e 	bne	r3,zero,147a8 <__alt_data_end+0xfc0147a8>
   149d0:	d9000c17 	ldw	r4,48(sp)
   149d4:	0101730e 	bge	zero,r4,14fa4 <_dtoa_r+0x15cc>
   149d8:	d9000615 	stw	r4,24(sp)
   149dc:	003ed006 	br	14520 <__alt_data_end+0xfc014520>
   149e0:	00800084 	movi	r2,2
   149e4:	3081861e 	bne	r6,r2,15000 <_dtoa_r+0x1628>
   149e8:	d8000b15 	stw	zero,44(sp)
   149ec:	003f3c06 	br	146e0 <__alt_data_end+0xfc0146e0>
   149f0:	dc000917 	ldw	r16,36(sp)
   149f4:	003e9206 	br	14440 <__alt_data_end+0xfc014440>
   149f8:	d9c00317 	ldw	r7,12(sp)
   149fc:	00800084 	movi	r2,2
   14a00:	11fec50e 	bge	r2,r7,14518 <__alt_data_end+0xfc014518>
   14a04:	d9000617 	ldw	r4,24(sp)
   14a08:	20013c1e 	bne	r4,zero,14efc <_dtoa_r+0x1524>
   14a0c:	a80b883a 	mov	r5,r21
   14a10:	000f883a 	mov	r7,zero
   14a14:	01800144 	movi	r6,5
   14a18:	e009883a 	mov	r4,fp
   14a1c:	00166e40 	call	166e4 <__multadd>
   14a20:	100b883a 	mov	r5,r2
   14a24:	8009883a 	mov	r4,r16
   14a28:	102b883a 	mov	r21,r2
   14a2c:	0016f980 	call	16f98 <__mcmp>
   14a30:	dc000915 	stw	r16,36(sp)
   14a34:	00bf410e 	bge	zero,r2,1473c <__alt_data_end+0xfc01473c>
   14a38:	d9c00717 	ldw	r7,28(sp)
   14a3c:	00800c44 	movi	r2,49
   14a40:	38800005 	stb	r2,0(r7)
   14a44:	d8800517 	ldw	r2,20(sp)
   14a48:	3dc00044 	addi	r23,r7,1
   14a4c:	10800044 	addi	r2,r2,1
   14a50:	d8800515 	stw	r2,20(sp)
   14a54:	003f3d06 	br	1474c <__alt_data_end+0xfc01474c>
   14a58:	d9800517 	ldw	r6,20(sp)
   14a5c:	d9c00717 	ldw	r7,28(sp)
   14a60:	00800c44 	movi	r2,49
   14a64:	31800044 	addi	r6,r6,1
   14a68:	d9800515 	stw	r6,20(sp)
   14a6c:	38800005 	stb	r2,0(r7)
   14a70:	003edf06 	br	145f0 <__alt_data_end+0xfc0145f0>
   14a74:	d8000b15 	stw	zero,44(sp)
   14a78:	003c9f06 	br	13cf8 <__alt_data_end+0xfc013cf8>
   14a7c:	903e7e1e 	bne	r18,zero,14478 <__alt_data_end+0xfc014478>
   14a80:	00800434 	movhi	r2,16
   14a84:	10bfffc4 	addi	r2,r2,-1
   14a88:	9884703a 	and	r2,r19,r2
   14a8c:	1000ea1e 	bne	r2,zero,14e38 <_dtoa_r+0x1460>
   14a90:	9cdffc2c 	andhi	r19,r19,32752
   14a94:	9800e826 	beq	r19,zero,14e38 <_dtoa_r+0x1460>
   14a98:	d9c00817 	ldw	r7,32(sp)
   14a9c:	b5800044 	addi	r22,r22,1
   14aa0:	04c00044 	movi	r19,1
   14aa4:	39c00044 	addi	r7,r7,1
   14aa8:	d9c00815 	stw	r7,32(sp)
   14aac:	d8800d17 	ldw	r2,52(sp)
   14ab0:	103e721e 	bne	r2,zero,1447c <__alt_data_end+0xfc01447c>
   14ab4:	00800044 	movi	r2,1
   14ab8:	003e7906 	br	144a0 <__alt_data_end+0xfc0144a0>
   14abc:	8009883a 	mov	r4,r16
   14ac0:	001e7780 	call	1e778 <__floatsidf>
   14ac4:	d9800f17 	ldw	r6,60(sp)
   14ac8:	d9c01017 	ldw	r7,64(sp)
   14acc:	1009883a 	mov	r4,r2
   14ad0:	180b883a 	mov	r5,r3
   14ad4:	001d5900 	call	1d590 <__muldf3>
   14ad8:	000d883a 	mov	r6,zero
   14adc:	01d00734 	movhi	r7,16412
   14ae0:	1009883a 	mov	r4,r2
   14ae4:	180b883a 	mov	r5,r3
   14ae8:	001c0bc0 	call	1c0bc <__adddf3>
   14aec:	047f3034 	movhi	r17,64704
   14af0:	1021883a 	mov	r16,r2
   14af4:	1c63883a 	add	r17,r3,r17
   14af8:	d9000f17 	ldw	r4,60(sp)
   14afc:	d9401017 	ldw	r5,64(sp)
   14b00:	000d883a 	mov	r6,zero
   14b04:	01d00534 	movhi	r7,16404
   14b08:	001ddfc0 	call	1ddfc <__subdf3>
   14b0c:	800d883a 	mov	r6,r16
   14b10:	880f883a 	mov	r7,r17
   14b14:	1009883a 	mov	r4,r2
   14b18:	180b883a 	mov	r5,r3
   14b1c:	102b883a 	mov	r21,r2
   14b20:	1829883a 	mov	r20,r3
   14b24:	001d3c00 	call	1d3c0 <__gedf2>
   14b28:	00806c16 	blt	zero,r2,14cdc <_dtoa_r+0x1304>
   14b2c:	89e0003c 	xorhi	r7,r17,32768
   14b30:	800d883a 	mov	r6,r16
   14b34:	a809883a 	mov	r4,r21
   14b38:	a00b883a 	mov	r5,r20
   14b3c:	001d49c0 	call	1d49c <__ledf2>
   14b40:	103d7e0e 	bge	r2,zero,1413c <__alt_data_end+0xfc01413c>
   14b44:	002b883a 	mov	r21,zero
   14b48:	0023883a 	mov	r17,zero
   14b4c:	003efb06 	br	1473c <__alt_data_end+0xfc01473c>
   14b50:	d8800717 	ldw	r2,28(sp)
   14b54:	003bd006 	br	13a98 <__alt_data_end+0xfc013a98>
   14b58:	d9000a17 	ldw	r4,40(sp)
   14b5c:	d9800d17 	ldw	r6,52(sp)
   14b60:	dd400a15 	stw	r21,40(sp)
   14b64:	a905c83a 	sub	r2,r21,r4
   14b68:	308d883a 	add	r6,r6,r2
   14b6c:	d9800d15 	stw	r6,52(sp)
   14b70:	002b883a 	mov	r21,zero
   14b74:	003e0606 	br	14390 <__alt_data_end+0xfc014390>
   14b78:	9023883a 	mov	r17,r18
   14b7c:	9829883a 	mov	r20,r19
   14b80:	04000084 	movi	r16,2
   14b84:	003c9206 	br	13dd0 <__alt_data_end+0xfc013dd0>
   14b88:	04000044 	movi	r16,1
   14b8c:	dc000c15 	stw	r16,48(sp)
   14b90:	dc000615 	stw	r16,24(sp)
   14b94:	dc002215 	stw	r16,136(sp)
   14b98:	e0001115 	stw	zero,68(fp)
   14b9c:	000b883a 	mov	r5,zero
   14ba0:	003c6906 	br	13d48 <__alt_data_end+0xfc013d48>
   14ba4:	3021883a 	mov	r16,r6
   14ba8:	003ffb06 	br	14b98 <__alt_data_end+0xfc014b98>
   14bac:	1000021e 	bne	r2,zero,14bb8 <_dtoa_r+0x11e0>
   14bb0:	4200004c 	andi	r8,r8,1
   14bb4:	403e7d1e 	bne	r8,zero,145ac <__alt_data_end+0xfc0145ac>
   14bb8:	01000c04 	movi	r4,48
   14bbc:	00000106 	br	14bc4 <_dtoa_r+0x11ec>
   14bc0:	102f883a 	mov	r23,r2
   14bc4:	b8bfffc4 	addi	r2,r23,-1
   14bc8:	10c00007 	ldb	r3,0(r2)
   14bcc:	193ffc26 	beq	r3,r4,14bc0 <__alt_data_end+0xfc014bc0>
   14bd0:	003e8706 	br	145f0 <__alt_data_end+0xfc0145f0>
   14bd4:	d8800517 	ldw	r2,20(sp)
   14bd8:	00a3c83a 	sub	r17,zero,r2
   14bdc:	8800a426 	beq	r17,zero,14e70 <_dtoa_r+0x1498>
   14be0:	888003cc 	andi	r2,r17,15
   14be4:	100490fa 	slli	r2,r2,3
   14be8:	00c000f4 	movhi	r3,3
   14bec:	18e94804 	addi	r3,r3,-23264
   14bf0:	1885883a 	add	r2,r3,r2
   14bf4:	11800017 	ldw	r6,0(r2)
   14bf8:	11c00117 	ldw	r7,4(r2)
   14bfc:	9009883a 	mov	r4,r18
   14c00:	980b883a 	mov	r5,r19
   14c04:	8823d13a 	srai	r17,r17,4
   14c08:	001d5900 	call	1d590 <__muldf3>
   14c0c:	d8800f15 	stw	r2,60(sp)
   14c10:	d8c01015 	stw	r3,64(sp)
   14c14:	8800e826 	beq	r17,zero,14fb8 <_dtoa_r+0x15e0>
   14c18:	050000f4 	movhi	r20,3
   14c1c:	a5293e04 	addi	r20,r20,-23304
   14c20:	04000084 	movi	r16,2
   14c24:	8980004c 	andi	r6,r17,1
   14c28:	1009883a 	mov	r4,r2
   14c2c:	8823d07a 	srai	r17,r17,1
   14c30:	180b883a 	mov	r5,r3
   14c34:	30000426 	beq	r6,zero,14c48 <_dtoa_r+0x1270>
   14c38:	a1800017 	ldw	r6,0(r20)
   14c3c:	a1c00117 	ldw	r7,4(r20)
   14c40:	84000044 	addi	r16,r16,1
   14c44:	001d5900 	call	1d590 <__muldf3>
   14c48:	a5000204 	addi	r20,r20,8
   14c4c:	883ff51e 	bne	r17,zero,14c24 <__alt_data_end+0xfc014c24>
   14c50:	d8800f15 	stw	r2,60(sp)
   14c54:	d8c01015 	stw	r3,64(sp)
   14c58:	003c7606 	br	13e34 <__alt_data_end+0xfc013e34>
   14c5c:	00c00c04 	movi	r3,48
   14c60:	10c00005 	stb	r3,0(r2)
   14c64:	d8c00517 	ldw	r3,20(sp)
   14c68:	bd3fffc3 	ldbu	r20,-1(r23)
   14c6c:	18c00044 	addi	r3,r3,1
   14c70:	d8c00515 	stw	r3,20(sp)
   14c74:	003db906 	br	1435c <__alt_data_end+0xfc01435c>
   14c78:	89400117 	ldw	r5,4(r17)
   14c7c:	e009883a 	mov	r4,fp
   14c80:	00166140 	call	16614 <_Balloc>
   14c84:	89800417 	ldw	r6,16(r17)
   14c88:	89400304 	addi	r5,r17,12
   14c8c:	11000304 	addi	r4,r2,12
   14c90:	31800084 	addi	r6,r6,2
   14c94:	318d883a 	add	r6,r6,r6
   14c98:	318d883a 	add	r6,r6,r6
   14c9c:	1027883a 	mov	r19,r2
   14ca0:	000e6840 	call	e684 <memcpy>
   14ca4:	01800044 	movi	r6,1
   14ca8:	980b883a 	mov	r5,r19
   14cac:	e009883a 	mov	r4,fp
   14cb0:	0016e500 	call	16e50 <__lshift>
   14cb4:	1029883a 	mov	r20,r2
   14cb8:	003ecc06 	br	147ec <__alt_data_end+0xfc0147ec>
   14cbc:	00800e44 	movi	r2,57
   14cc0:	90809026 	beq	r18,r2,14f04 <_dtoa_r+0x152c>
   14cc4:	92000044 	addi	r8,r18,1
   14cc8:	003f1f06 	br	14948 <__alt_data_end+0xfc014948>
   14ccc:	9011883a 	mov	r8,r18
   14cd0:	8825883a 	mov	r18,r17
   14cd4:	a023883a 	mov	r17,r20
   14cd8:	003e2906 	br	14580 <__alt_data_end+0xfc014580>
   14cdc:	002b883a 	mov	r21,zero
   14ce0:	0023883a 	mov	r17,zero
   14ce4:	003f5406 	br	14a38 <__alt_data_end+0xfc014a38>
   14ce8:	61bfffc4 	addi	r6,r12,-1
   14cec:	300490fa 	slli	r2,r6,3
   14cf0:	00c000f4 	movhi	r3,3
   14cf4:	18e94804 	addi	r3,r3,-23264
   14cf8:	1885883a 	add	r2,r3,r2
   14cfc:	11000017 	ldw	r4,0(r2)
   14d00:	11400117 	ldw	r5,4(r2)
   14d04:	d8800717 	ldw	r2,28(sp)
   14d08:	880f883a 	mov	r7,r17
   14d0c:	d9801215 	stw	r6,72(sp)
   14d10:	800d883a 	mov	r6,r16
   14d14:	db001615 	stw	r12,88(sp)
   14d18:	15c00044 	addi	r23,r2,1
   14d1c:	001d5900 	call	1d590 <__muldf3>
   14d20:	d9401017 	ldw	r5,64(sp)
   14d24:	d9000f17 	ldw	r4,60(sp)
   14d28:	d8c01515 	stw	r3,84(sp)
   14d2c:	d8801415 	stw	r2,80(sp)
   14d30:	001e6f80 	call	1e6f8 <__fixdfsi>
   14d34:	1009883a 	mov	r4,r2
   14d38:	1021883a 	mov	r16,r2
   14d3c:	001e7780 	call	1e778 <__floatsidf>
   14d40:	d9000f17 	ldw	r4,60(sp)
   14d44:	d9401017 	ldw	r5,64(sp)
   14d48:	100d883a 	mov	r6,r2
   14d4c:	180f883a 	mov	r7,r3
   14d50:	001ddfc0 	call	1ddfc <__subdf3>
   14d54:	1829883a 	mov	r20,r3
   14d58:	d8c00717 	ldw	r3,28(sp)
   14d5c:	84000c04 	addi	r16,r16,48
   14d60:	1023883a 	mov	r17,r2
   14d64:	1c000005 	stb	r16,0(r3)
   14d68:	db001617 	ldw	r12,88(sp)
   14d6c:	00800044 	movi	r2,1
   14d70:	60802226 	beq	r12,r2,14dfc <_dtoa_r+0x1424>
   14d74:	d9c00717 	ldw	r7,28(sp)
   14d78:	8805883a 	mov	r2,r17
   14d7c:	b82b883a 	mov	r21,r23
   14d80:	3b19883a 	add	r12,r7,r12
   14d84:	6023883a 	mov	r17,r12
   14d88:	a007883a 	mov	r3,r20
   14d8c:	dc800f15 	stw	r18,60(sp)
   14d90:	000d883a 	mov	r6,zero
   14d94:	01d00934 	movhi	r7,16420
   14d98:	1009883a 	mov	r4,r2
   14d9c:	180b883a 	mov	r5,r3
   14da0:	001d5900 	call	1d590 <__muldf3>
   14da4:	180b883a 	mov	r5,r3
   14da8:	1009883a 	mov	r4,r2
   14dac:	1829883a 	mov	r20,r3
   14db0:	1025883a 	mov	r18,r2
   14db4:	001e6f80 	call	1e6f8 <__fixdfsi>
   14db8:	1009883a 	mov	r4,r2
   14dbc:	1021883a 	mov	r16,r2
   14dc0:	001e7780 	call	1e778 <__floatsidf>
   14dc4:	100d883a 	mov	r6,r2
   14dc8:	180f883a 	mov	r7,r3
   14dcc:	9009883a 	mov	r4,r18
   14dd0:	a00b883a 	mov	r5,r20
   14dd4:	84000c04 	addi	r16,r16,48
   14dd8:	001ddfc0 	call	1ddfc <__subdf3>
   14ddc:	ad400044 	addi	r21,r21,1
   14de0:	ac3fffc5 	stb	r16,-1(r21)
   14de4:	ac7fea1e 	bne	r21,r17,14d90 <__alt_data_end+0xfc014d90>
   14de8:	1023883a 	mov	r17,r2
   14dec:	d8801217 	ldw	r2,72(sp)
   14df0:	dc800f17 	ldw	r18,60(sp)
   14df4:	1829883a 	mov	r20,r3
   14df8:	b8af883a 	add	r23,r23,r2
   14dfc:	d9001417 	ldw	r4,80(sp)
   14e00:	d9401517 	ldw	r5,84(sp)
   14e04:	000d883a 	mov	r6,zero
   14e08:	01cff834 	movhi	r7,16352
   14e0c:	001c0bc0 	call	1c0bc <__adddf3>
   14e10:	880d883a 	mov	r6,r17
   14e14:	a00f883a 	mov	r7,r20
   14e18:	1009883a 	mov	r4,r2
   14e1c:	180b883a 	mov	r5,r3
   14e20:	001d49c0 	call	1d49c <__ledf2>
   14e24:	10003e0e 	bge	r2,zero,14f20 <_dtoa_r+0x1548>
   14e28:	d9001317 	ldw	r4,76(sp)
   14e2c:	bd3fffc3 	ldbu	r20,-1(r23)
   14e30:	d9000515 	stw	r4,20(sp)
   14e34:	003d3b06 	br	14324 <__alt_data_end+0xfc014324>
   14e38:	0027883a 	mov	r19,zero
   14e3c:	003f1b06 	br	14aac <__alt_data_end+0xfc014aac>
   14e40:	d8800817 	ldw	r2,32(sp)
   14e44:	11e9c83a 	sub	r20,r2,r7
   14e48:	0005883a 	mov	r2,zero
   14e4c:	003d5406 	br	143a0 <__alt_data_end+0xfc0143a0>
   14e50:	00800044 	movi	r2,1
   14e54:	003dc706 	br	14574 <__alt_data_end+0xfc014574>
   14e58:	d8c00217 	ldw	r3,8(sp)
   14e5c:	00800d84 	movi	r2,54
   14e60:	dd400a17 	ldw	r21,40(sp)
   14e64:	10c5c83a 	sub	r2,r2,r3
   14e68:	dd000817 	ldw	r20,32(sp)
   14e6c:	003d4c06 	br	143a0 <__alt_data_end+0xfc0143a0>
   14e70:	dc800f15 	stw	r18,60(sp)
   14e74:	dcc01015 	stw	r19,64(sp)
   14e78:	04000084 	movi	r16,2
   14e7c:	003bed06 	br	13e34 <__alt_data_end+0xfc013e34>
   14e80:	d9000617 	ldw	r4,24(sp)
   14e84:	203f0d26 	beq	r4,zero,14abc <__alt_data_end+0xfc014abc>
   14e88:	d9800c17 	ldw	r6,48(sp)
   14e8c:	01bcab0e 	bge	zero,r6,1413c <__alt_data_end+0xfc01413c>
   14e90:	d9401017 	ldw	r5,64(sp)
   14e94:	d9000f17 	ldw	r4,60(sp)
   14e98:	000d883a 	mov	r6,zero
   14e9c:	01d00934 	movhi	r7,16420
   14ea0:	001d5900 	call	1d590 <__muldf3>
   14ea4:	81000044 	addi	r4,r16,1
   14ea8:	d8800f15 	stw	r2,60(sp)
   14eac:	d8c01015 	stw	r3,64(sp)
   14eb0:	001e7780 	call	1e778 <__floatsidf>
   14eb4:	d9800f17 	ldw	r6,60(sp)
   14eb8:	d9c01017 	ldw	r7,64(sp)
   14ebc:	1009883a 	mov	r4,r2
   14ec0:	180b883a 	mov	r5,r3
   14ec4:	001d5900 	call	1d590 <__muldf3>
   14ec8:	01d00734 	movhi	r7,16412
   14ecc:	000d883a 	mov	r6,zero
   14ed0:	1009883a 	mov	r4,r2
   14ed4:	180b883a 	mov	r5,r3
   14ed8:	001c0bc0 	call	1c0bc <__adddf3>
   14edc:	d9c00517 	ldw	r7,20(sp)
   14ee0:	047f3034 	movhi	r17,64704
   14ee4:	1021883a 	mov	r16,r2
   14ee8:	39ffffc4 	addi	r7,r7,-1
   14eec:	d9c01315 	stw	r7,76(sp)
   14ef0:	1c63883a 	add	r17,r3,r17
   14ef4:	db000c17 	ldw	r12,48(sp)
   14ef8:	003bea06 	br	13ea4 <__alt_data_end+0xfc013ea4>
   14efc:	dc000915 	stw	r16,36(sp)
   14f00:	003e0e06 	br	1473c <__alt_data_end+0xfc01473c>
   14f04:	01000e44 	movi	r4,57
   14f08:	8825883a 	mov	r18,r17
   14f0c:	9dc00044 	addi	r23,r19,1
   14f10:	99000005 	stb	r4,0(r19)
   14f14:	a023883a 	mov	r17,r20
   14f18:	dc000915 	stw	r16,36(sp)
   14f1c:	003da406 	br	145b0 <__alt_data_end+0xfc0145b0>
   14f20:	d9801417 	ldw	r6,80(sp)
   14f24:	d9c01517 	ldw	r7,84(sp)
   14f28:	0009883a 	mov	r4,zero
   14f2c:	014ff834 	movhi	r5,16352
   14f30:	001ddfc0 	call	1ddfc <__subdf3>
   14f34:	880d883a 	mov	r6,r17
   14f38:	a00f883a 	mov	r7,r20
   14f3c:	1009883a 	mov	r4,r2
   14f40:	180b883a 	mov	r5,r3
   14f44:	001d3c00 	call	1d3c0 <__gedf2>
   14f48:	00bc7c0e 	bge	zero,r2,1413c <__alt_data_end+0xfc01413c>
   14f4c:	01000c04 	movi	r4,48
   14f50:	00000106 	br	14f58 <_dtoa_r+0x1580>
   14f54:	102f883a 	mov	r23,r2
   14f58:	b8bfffc4 	addi	r2,r23,-1
   14f5c:	10c00007 	ldb	r3,0(r2)
   14f60:	193ffc26 	beq	r3,r4,14f54 <__alt_data_end+0xfc014f54>
   14f64:	d9801317 	ldw	r6,76(sp)
   14f68:	d9800515 	stw	r6,20(sp)
   14f6c:	003c4406 	br	14080 <__alt_data_end+0xfc014080>
   14f70:	d9801317 	ldw	r6,76(sp)
   14f74:	d9800515 	stw	r6,20(sp)
   14f78:	003cea06 	br	14324 <__alt_data_end+0xfc014324>
   14f7c:	dd800f17 	ldw	r22,60(sp)
   14f80:	dcc01017 	ldw	r19,64(sp)
   14f84:	dc801217 	ldw	r18,72(sp)
   14f88:	003c6c06 	br	1413c <__alt_data_end+0xfc01413c>
   14f8c:	903e031e 	bne	r18,zero,1479c <__alt_data_end+0xfc01479c>
   14f90:	003ebb06 	br	14a80 <__alt_data_end+0xfc014a80>
   14f94:	103e6c1e 	bne	r2,zero,14948 <__alt_data_end+0xfc014948>
   14f98:	4080004c 	andi	r2,r8,1
   14f9c:	103e6a26 	beq	r2,zero,14948 <__alt_data_end+0xfc014948>
   14fa0:	003e6606 	br	1493c <__alt_data_end+0xfc01493c>
   14fa4:	d8c00317 	ldw	r3,12(sp)
   14fa8:	00800084 	movi	r2,2
   14fac:	10c02916 	blt	r2,r3,15054 <_dtoa_r+0x167c>
   14fb0:	d9000c17 	ldw	r4,48(sp)
   14fb4:	003e8806 	br	149d8 <__alt_data_end+0xfc0149d8>
   14fb8:	04000084 	movi	r16,2
   14fbc:	003b9d06 	br	13e34 <__alt_data_end+0xfc013e34>
   14fc0:	d9001317 	ldw	r4,76(sp)
   14fc4:	d9000515 	stw	r4,20(sp)
   14fc8:	003cd606 	br	14324 <__alt_data_end+0xfc014324>
   14fcc:	d8801317 	ldw	r2,76(sp)
   14fd0:	d8800515 	stw	r2,20(sp)
   14fd4:	003c2a06 	br	14080 <__alt_data_end+0xfc014080>
   14fd8:	d9800317 	ldw	r6,12(sp)
   14fdc:	00800084 	movi	r2,2
   14fe0:	11801516 	blt	r2,r6,15038 <_dtoa_r+0x1660>
   14fe4:	d9c00c17 	ldw	r7,48(sp)
   14fe8:	d9c00615 	stw	r7,24(sp)
   14fec:	003df706 	br	147cc <__alt_data_end+0xfc0147cc>
   14ff0:	193d3926 	beq	r3,r4,144d8 <__alt_data_end+0xfc0144d8>
   14ff4:	00c00f04 	movi	r3,60
   14ff8:	1885c83a 	sub	r2,r3,r2
   14ffc:	003ddf06 	br	1477c <__alt_data_end+0xfc01477c>
   15000:	e009883a 	mov	r4,fp
   15004:	e0001115 	stw	zero,68(fp)
   15008:	000b883a 	mov	r5,zero
   1500c:	00166140 	call	16614 <_Balloc>
   15010:	d8800715 	stw	r2,28(sp)
   15014:	d8c00717 	ldw	r3,28(sp)
   15018:	00bfffc4 	movi	r2,-1
   1501c:	01000044 	movi	r4,1
   15020:	d8800c15 	stw	r2,48(sp)
   15024:	e0c01015 	stw	r3,64(fp)
   15028:	d9000b15 	stw	r4,44(sp)
   1502c:	d8800615 	stw	r2,24(sp)
   15030:	d8002215 	stw	zero,136(sp)
   15034:	003c4106 	br	1413c <__alt_data_end+0xfc01413c>
   15038:	d8c00c17 	ldw	r3,48(sp)
   1503c:	d8c00615 	stw	r3,24(sp)
   15040:	003e7006 	br	14a04 <__alt_data_end+0xfc014a04>
   15044:	04400044 	movi	r17,1
   15048:	003b2006 	br	13ccc <__alt_data_end+0xfc013ccc>
   1504c:	000b883a 	mov	r5,zero
   15050:	003b3d06 	br	13d48 <__alt_data_end+0xfc013d48>
   15054:	d8800c17 	ldw	r2,48(sp)
   15058:	d8800615 	stw	r2,24(sp)
   1505c:	003e6906 	br	14a04 <__alt_data_end+0xfc014a04>

00015060 <__sflush_r>:
   15060:	2880030b 	ldhu	r2,12(r5)
   15064:	defffb04 	addi	sp,sp,-20
   15068:	dcc00315 	stw	r19,12(sp)
   1506c:	dc400115 	stw	r17,4(sp)
   15070:	dfc00415 	stw	ra,16(sp)
   15074:	dc800215 	stw	r18,8(sp)
   15078:	dc000015 	stw	r16,0(sp)
   1507c:	10c0020c 	andi	r3,r2,8
   15080:	2823883a 	mov	r17,r5
   15084:	2027883a 	mov	r19,r4
   15088:	1800311e 	bne	r3,zero,15150 <__sflush_r+0xf0>
   1508c:	28c00117 	ldw	r3,4(r5)
   15090:	10820014 	ori	r2,r2,2048
   15094:	2880030d 	sth	r2,12(r5)
   15098:	00c04b0e 	bge	zero,r3,151c8 <__sflush_r+0x168>
   1509c:	8a000a17 	ldw	r8,40(r17)
   150a0:	40002326 	beq	r8,zero,15130 <__sflush_r+0xd0>
   150a4:	9c000017 	ldw	r16,0(r19)
   150a8:	10c4000c 	andi	r3,r2,4096
   150ac:	98000015 	stw	zero,0(r19)
   150b0:	18004826 	beq	r3,zero,151d4 <__sflush_r+0x174>
   150b4:	89801417 	ldw	r6,80(r17)
   150b8:	10c0010c 	andi	r3,r2,4
   150bc:	18000626 	beq	r3,zero,150d8 <__sflush_r+0x78>
   150c0:	88c00117 	ldw	r3,4(r17)
   150c4:	88800c17 	ldw	r2,48(r17)
   150c8:	30cdc83a 	sub	r6,r6,r3
   150cc:	10000226 	beq	r2,zero,150d8 <__sflush_r+0x78>
   150d0:	88800f17 	ldw	r2,60(r17)
   150d4:	308dc83a 	sub	r6,r6,r2
   150d8:	89400717 	ldw	r5,28(r17)
   150dc:	000f883a 	mov	r7,zero
   150e0:	9809883a 	mov	r4,r19
   150e4:	403ee83a 	callr	r8
   150e8:	00ffffc4 	movi	r3,-1
   150ec:	10c04426 	beq	r2,r3,15200 <__sflush_r+0x1a0>
   150f0:	88c0030b 	ldhu	r3,12(r17)
   150f4:	89000417 	ldw	r4,16(r17)
   150f8:	88000115 	stw	zero,4(r17)
   150fc:	197dffcc 	andi	r5,r3,63487
   15100:	8940030d 	sth	r5,12(r17)
   15104:	89000015 	stw	r4,0(r17)
   15108:	18c4000c 	andi	r3,r3,4096
   1510c:	18002c1e 	bne	r3,zero,151c0 <__sflush_r+0x160>
   15110:	89400c17 	ldw	r5,48(r17)
   15114:	9c000015 	stw	r16,0(r19)
   15118:	28000526 	beq	r5,zero,15130 <__sflush_r+0xd0>
   1511c:	88801004 	addi	r2,r17,64
   15120:	28800226 	beq	r5,r2,1512c <__sflush_r+0xcc>
   15124:	9809883a 	mov	r4,r19
   15128:	00157dc0 	call	157dc <_free_r>
   1512c:	88000c15 	stw	zero,48(r17)
   15130:	0005883a 	mov	r2,zero
   15134:	dfc00417 	ldw	ra,16(sp)
   15138:	dcc00317 	ldw	r19,12(sp)
   1513c:	dc800217 	ldw	r18,8(sp)
   15140:	dc400117 	ldw	r17,4(sp)
   15144:	dc000017 	ldw	r16,0(sp)
   15148:	dec00504 	addi	sp,sp,20
   1514c:	f800283a 	ret
   15150:	2c800417 	ldw	r18,16(r5)
   15154:	903ff626 	beq	r18,zero,15130 <__alt_data_end+0xfc015130>
   15158:	2c000017 	ldw	r16,0(r5)
   1515c:	108000cc 	andi	r2,r2,3
   15160:	2c800015 	stw	r18,0(r5)
   15164:	84a1c83a 	sub	r16,r16,r18
   15168:	1000131e 	bne	r2,zero,151b8 <__sflush_r+0x158>
   1516c:	28800517 	ldw	r2,20(r5)
   15170:	88800215 	stw	r2,8(r17)
   15174:	04000316 	blt	zero,r16,15184 <__sflush_r+0x124>
   15178:	003fed06 	br	15130 <__alt_data_end+0xfc015130>
   1517c:	90a5883a 	add	r18,r18,r2
   15180:	043feb0e 	bge	zero,r16,15130 <__alt_data_end+0xfc015130>
   15184:	88800917 	ldw	r2,36(r17)
   15188:	89400717 	ldw	r5,28(r17)
   1518c:	800f883a 	mov	r7,r16
   15190:	900d883a 	mov	r6,r18
   15194:	9809883a 	mov	r4,r19
   15198:	103ee83a 	callr	r2
   1519c:	80a1c83a 	sub	r16,r16,r2
   151a0:	00bff616 	blt	zero,r2,1517c <__alt_data_end+0xfc01517c>
   151a4:	88c0030b 	ldhu	r3,12(r17)
   151a8:	00bfffc4 	movi	r2,-1
   151ac:	18c01014 	ori	r3,r3,64
   151b0:	88c0030d 	sth	r3,12(r17)
   151b4:	003fdf06 	br	15134 <__alt_data_end+0xfc015134>
   151b8:	0005883a 	mov	r2,zero
   151bc:	003fec06 	br	15170 <__alt_data_end+0xfc015170>
   151c0:	88801415 	stw	r2,80(r17)
   151c4:	003fd206 	br	15110 <__alt_data_end+0xfc015110>
   151c8:	28c00f17 	ldw	r3,60(r5)
   151cc:	00ffb316 	blt	zero,r3,1509c <__alt_data_end+0xfc01509c>
   151d0:	003fd706 	br	15130 <__alt_data_end+0xfc015130>
   151d4:	89400717 	ldw	r5,28(r17)
   151d8:	000d883a 	mov	r6,zero
   151dc:	01c00044 	movi	r7,1
   151e0:	9809883a 	mov	r4,r19
   151e4:	403ee83a 	callr	r8
   151e8:	100d883a 	mov	r6,r2
   151ec:	00bfffc4 	movi	r2,-1
   151f0:	30801426 	beq	r6,r2,15244 <__sflush_r+0x1e4>
   151f4:	8880030b 	ldhu	r2,12(r17)
   151f8:	8a000a17 	ldw	r8,40(r17)
   151fc:	003fae06 	br	150b8 <__alt_data_end+0xfc0150b8>
   15200:	98c00017 	ldw	r3,0(r19)
   15204:	183fba26 	beq	r3,zero,150f0 <__alt_data_end+0xfc0150f0>
   15208:	01000744 	movi	r4,29
   1520c:	19000626 	beq	r3,r4,15228 <__sflush_r+0x1c8>
   15210:	01000584 	movi	r4,22
   15214:	19000426 	beq	r3,r4,15228 <__sflush_r+0x1c8>
   15218:	88c0030b 	ldhu	r3,12(r17)
   1521c:	18c01014 	ori	r3,r3,64
   15220:	88c0030d 	sth	r3,12(r17)
   15224:	003fc306 	br	15134 <__alt_data_end+0xfc015134>
   15228:	8880030b 	ldhu	r2,12(r17)
   1522c:	88c00417 	ldw	r3,16(r17)
   15230:	88000115 	stw	zero,4(r17)
   15234:	10bdffcc 	andi	r2,r2,63487
   15238:	8880030d 	sth	r2,12(r17)
   1523c:	88c00015 	stw	r3,0(r17)
   15240:	003fb306 	br	15110 <__alt_data_end+0xfc015110>
   15244:	98800017 	ldw	r2,0(r19)
   15248:	103fea26 	beq	r2,zero,151f4 <__alt_data_end+0xfc0151f4>
   1524c:	00c00744 	movi	r3,29
   15250:	10c00226 	beq	r2,r3,1525c <__sflush_r+0x1fc>
   15254:	00c00584 	movi	r3,22
   15258:	10c0031e 	bne	r2,r3,15268 <__sflush_r+0x208>
   1525c:	9c000015 	stw	r16,0(r19)
   15260:	0005883a 	mov	r2,zero
   15264:	003fb306 	br	15134 <__alt_data_end+0xfc015134>
   15268:	88c0030b 	ldhu	r3,12(r17)
   1526c:	3005883a 	mov	r2,r6
   15270:	18c01014 	ori	r3,r3,64
   15274:	88c0030d 	sth	r3,12(r17)
   15278:	003fae06 	br	15134 <__alt_data_end+0xfc015134>

0001527c <_fflush_r>:
   1527c:	defffd04 	addi	sp,sp,-12
   15280:	dc000115 	stw	r16,4(sp)
   15284:	dfc00215 	stw	ra,8(sp)
   15288:	2021883a 	mov	r16,r4
   1528c:	20000226 	beq	r4,zero,15298 <_fflush_r+0x1c>
   15290:	20800e17 	ldw	r2,56(r4)
   15294:	10000c26 	beq	r2,zero,152c8 <_fflush_r+0x4c>
   15298:	2880030f 	ldh	r2,12(r5)
   1529c:	1000051e 	bne	r2,zero,152b4 <_fflush_r+0x38>
   152a0:	0005883a 	mov	r2,zero
   152a4:	dfc00217 	ldw	ra,8(sp)
   152a8:	dc000117 	ldw	r16,4(sp)
   152ac:	dec00304 	addi	sp,sp,12
   152b0:	f800283a 	ret
   152b4:	8009883a 	mov	r4,r16
   152b8:	dfc00217 	ldw	ra,8(sp)
   152bc:	dc000117 	ldw	r16,4(sp)
   152c0:	dec00304 	addi	sp,sp,12
   152c4:	00150601 	jmpi	15060 <__sflush_r>
   152c8:	d9400015 	stw	r5,0(sp)
   152cc:	00156680 	call	15668 <__sinit>
   152d0:	d9400017 	ldw	r5,0(sp)
   152d4:	003ff006 	br	15298 <__alt_data_end+0xfc015298>

000152d8 <fflush>:
   152d8:	20000526 	beq	r4,zero,152f0 <fflush+0x18>
   152dc:	008000f4 	movhi	r2,3
   152e0:	10b60a04 	addi	r2,r2,-10200
   152e4:	200b883a 	mov	r5,r4
   152e8:	11000017 	ldw	r4,0(r2)
   152ec:	001527c1 	jmpi	1527c <_fflush_r>
   152f0:	008000f4 	movhi	r2,3
   152f4:	10b60904 	addi	r2,r2,-10204
   152f8:	11000017 	ldw	r4,0(r2)
   152fc:	01400074 	movhi	r5,1
   15300:	29549f04 	addi	r5,r5,21116
   15304:	00160781 	jmpi	16078 <_fwalk_reent>

00015308 <__fp_unlock>:
   15308:	0005883a 	mov	r2,zero
   1530c:	f800283a 	ret

00015310 <_cleanup_r>:
   15310:	014000b4 	movhi	r5,2
   15314:	296ba604 	addi	r5,r5,-20840
   15318:	00160781 	jmpi	16078 <_fwalk_reent>

0001531c <__sinit.part.1>:
   1531c:	defff704 	addi	sp,sp,-36
   15320:	00c00074 	movhi	r3,1
   15324:	dfc00815 	stw	ra,32(sp)
   15328:	ddc00715 	stw	r23,28(sp)
   1532c:	dd800615 	stw	r22,24(sp)
   15330:	dd400515 	stw	r21,20(sp)
   15334:	dd000415 	stw	r20,16(sp)
   15338:	dcc00315 	stw	r19,12(sp)
   1533c:	dc800215 	stw	r18,8(sp)
   15340:	dc400115 	stw	r17,4(sp)
   15344:	dc000015 	stw	r16,0(sp)
   15348:	18d4c404 	addi	r3,r3,21264
   1534c:	24000117 	ldw	r16,4(r4)
   15350:	20c00f15 	stw	r3,60(r4)
   15354:	2080bb04 	addi	r2,r4,748
   15358:	00c000c4 	movi	r3,3
   1535c:	20c0b915 	stw	r3,740(r4)
   15360:	2080ba15 	stw	r2,744(r4)
   15364:	2000b815 	stw	zero,736(r4)
   15368:	05c00204 	movi	r23,8
   1536c:	00800104 	movi	r2,4
   15370:	2025883a 	mov	r18,r4
   15374:	b80d883a 	mov	r6,r23
   15378:	81001704 	addi	r4,r16,92
   1537c:	000b883a 	mov	r5,zero
   15380:	80000015 	stw	zero,0(r16)
   15384:	80000115 	stw	zero,4(r16)
   15388:	80000215 	stw	zero,8(r16)
   1538c:	8080030d 	sth	r2,12(r16)
   15390:	80001915 	stw	zero,100(r16)
   15394:	8000038d 	sth	zero,14(r16)
   15398:	80000415 	stw	zero,16(r16)
   1539c:	80000515 	stw	zero,20(r16)
   153a0:	80000615 	stw	zero,24(r16)
   153a4:	000e7cc0 	call	e7cc <memset>
   153a8:	05800074 	movhi	r22,1
   153ac:	94400217 	ldw	r17,8(r18)
   153b0:	05400074 	movhi	r21,1
   153b4:	05000074 	movhi	r20,1
   153b8:	04c00074 	movhi	r19,1
   153bc:	b59f8304 	addi	r22,r22,32268
   153c0:	ad5f9a04 	addi	r21,r21,32360
   153c4:	a51fb904 	addi	r20,r20,32484
   153c8:	9cdfd004 	addi	r19,r19,32576
   153cc:	85800815 	stw	r22,32(r16)
   153d0:	85400915 	stw	r21,36(r16)
   153d4:	85000a15 	stw	r20,40(r16)
   153d8:	84c00b15 	stw	r19,44(r16)
   153dc:	84000715 	stw	r16,28(r16)
   153e0:	00800284 	movi	r2,10
   153e4:	8880030d 	sth	r2,12(r17)
   153e8:	00800044 	movi	r2,1
   153ec:	b80d883a 	mov	r6,r23
   153f0:	89001704 	addi	r4,r17,92
   153f4:	000b883a 	mov	r5,zero
   153f8:	88000015 	stw	zero,0(r17)
   153fc:	88000115 	stw	zero,4(r17)
   15400:	88000215 	stw	zero,8(r17)
   15404:	88001915 	stw	zero,100(r17)
   15408:	8880038d 	sth	r2,14(r17)
   1540c:	88000415 	stw	zero,16(r17)
   15410:	88000515 	stw	zero,20(r17)
   15414:	88000615 	stw	zero,24(r17)
   15418:	000e7cc0 	call	e7cc <memset>
   1541c:	94000317 	ldw	r16,12(r18)
   15420:	00800484 	movi	r2,18
   15424:	8c400715 	stw	r17,28(r17)
   15428:	8d800815 	stw	r22,32(r17)
   1542c:	8d400915 	stw	r21,36(r17)
   15430:	8d000a15 	stw	r20,40(r17)
   15434:	8cc00b15 	stw	r19,44(r17)
   15438:	8080030d 	sth	r2,12(r16)
   1543c:	00800084 	movi	r2,2
   15440:	80000015 	stw	zero,0(r16)
   15444:	80000115 	stw	zero,4(r16)
   15448:	80000215 	stw	zero,8(r16)
   1544c:	80001915 	stw	zero,100(r16)
   15450:	8080038d 	sth	r2,14(r16)
   15454:	80000415 	stw	zero,16(r16)
   15458:	80000515 	stw	zero,20(r16)
   1545c:	80000615 	stw	zero,24(r16)
   15460:	b80d883a 	mov	r6,r23
   15464:	000b883a 	mov	r5,zero
   15468:	81001704 	addi	r4,r16,92
   1546c:	000e7cc0 	call	e7cc <memset>
   15470:	00800044 	movi	r2,1
   15474:	84000715 	stw	r16,28(r16)
   15478:	85800815 	stw	r22,32(r16)
   1547c:	85400915 	stw	r21,36(r16)
   15480:	85000a15 	stw	r20,40(r16)
   15484:	84c00b15 	stw	r19,44(r16)
   15488:	90800e15 	stw	r2,56(r18)
   1548c:	dfc00817 	ldw	ra,32(sp)
   15490:	ddc00717 	ldw	r23,28(sp)
   15494:	dd800617 	ldw	r22,24(sp)
   15498:	dd400517 	ldw	r21,20(sp)
   1549c:	dd000417 	ldw	r20,16(sp)
   154a0:	dcc00317 	ldw	r19,12(sp)
   154a4:	dc800217 	ldw	r18,8(sp)
   154a8:	dc400117 	ldw	r17,4(sp)
   154ac:	dc000017 	ldw	r16,0(sp)
   154b0:	dec00904 	addi	sp,sp,36
   154b4:	f800283a 	ret

000154b8 <__fp_lock>:
   154b8:	0005883a 	mov	r2,zero
   154bc:	f800283a 	ret

000154c0 <__sfmoreglue>:
   154c0:	defffc04 	addi	sp,sp,-16
   154c4:	dc800215 	stw	r18,8(sp)
   154c8:	2825883a 	mov	r18,r5
   154cc:	dc000015 	stw	r16,0(sp)
   154d0:	01401a04 	movi	r5,104
   154d4:	2021883a 	mov	r16,r4
   154d8:	913fffc4 	addi	r4,r18,-1
   154dc:	dfc00315 	stw	ra,12(sp)
   154e0:	dc400115 	stw	r17,4(sp)
   154e4:	000ce000 	call	ce00 <__mulsi3>
   154e8:	8009883a 	mov	r4,r16
   154ec:	11401d04 	addi	r5,r2,116
   154f0:	1023883a 	mov	r17,r2
   154f4:	000de780 	call	de78 <_malloc_r>
   154f8:	1021883a 	mov	r16,r2
   154fc:	10000726 	beq	r2,zero,1551c <__sfmoreglue+0x5c>
   15500:	11000304 	addi	r4,r2,12
   15504:	10000015 	stw	zero,0(r2)
   15508:	14800115 	stw	r18,4(r2)
   1550c:	11000215 	stw	r4,8(r2)
   15510:	89801a04 	addi	r6,r17,104
   15514:	000b883a 	mov	r5,zero
   15518:	000e7cc0 	call	e7cc <memset>
   1551c:	8005883a 	mov	r2,r16
   15520:	dfc00317 	ldw	ra,12(sp)
   15524:	dc800217 	ldw	r18,8(sp)
   15528:	dc400117 	ldw	r17,4(sp)
   1552c:	dc000017 	ldw	r16,0(sp)
   15530:	dec00404 	addi	sp,sp,16
   15534:	f800283a 	ret

00015538 <__sfp>:
   15538:	defffb04 	addi	sp,sp,-20
   1553c:	dc000015 	stw	r16,0(sp)
   15540:	040000f4 	movhi	r16,3
   15544:	84360904 	addi	r16,r16,-10204
   15548:	dcc00315 	stw	r19,12(sp)
   1554c:	2027883a 	mov	r19,r4
   15550:	81000017 	ldw	r4,0(r16)
   15554:	dfc00415 	stw	ra,16(sp)
   15558:	dc800215 	stw	r18,8(sp)
   1555c:	20800e17 	ldw	r2,56(r4)
   15560:	dc400115 	stw	r17,4(sp)
   15564:	1000021e 	bne	r2,zero,15570 <__sfp+0x38>
   15568:	001531c0 	call	1531c <__sinit.part.1>
   1556c:	81000017 	ldw	r4,0(r16)
   15570:	2480b804 	addi	r18,r4,736
   15574:	047fffc4 	movi	r17,-1
   15578:	91000117 	ldw	r4,4(r18)
   1557c:	94000217 	ldw	r16,8(r18)
   15580:	213fffc4 	addi	r4,r4,-1
   15584:	20000a16 	blt	r4,zero,155b0 <__sfp+0x78>
   15588:	8080030f 	ldh	r2,12(r16)
   1558c:	10000c26 	beq	r2,zero,155c0 <__sfp+0x88>
   15590:	80c01d04 	addi	r3,r16,116
   15594:	00000206 	br	155a0 <__sfp+0x68>
   15598:	18bfe60f 	ldh	r2,-104(r3)
   1559c:	10000826 	beq	r2,zero,155c0 <__sfp+0x88>
   155a0:	213fffc4 	addi	r4,r4,-1
   155a4:	1c3ffd04 	addi	r16,r3,-12
   155a8:	18c01a04 	addi	r3,r3,104
   155ac:	247ffa1e 	bne	r4,r17,15598 <__alt_data_end+0xfc015598>
   155b0:	90800017 	ldw	r2,0(r18)
   155b4:	10001d26 	beq	r2,zero,1562c <__sfp+0xf4>
   155b8:	1025883a 	mov	r18,r2
   155bc:	003fee06 	br	15578 <__alt_data_end+0xfc015578>
   155c0:	00bfffc4 	movi	r2,-1
   155c4:	8080038d 	sth	r2,14(r16)
   155c8:	00800044 	movi	r2,1
   155cc:	8080030d 	sth	r2,12(r16)
   155d0:	80001915 	stw	zero,100(r16)
   155d4:	80000015 	stw	zero,0(r16)
   155d8:	80000215 	stw	zero,8(r16)
   155dc:	80000115 	stw	zero,4(r16)
   155e0:	80000415 	stw	zero,16(r16)
   155e4:	80000515 	stw	zero,20(r16)
   155e8:	80000615 	stw	zero,24(r16)
   155ec:	01800204 	movi	r6,8
   155f0:	000b883a 	mov	r5,zero
   155f4:	81001704 	addi	r4,r16,92
   155f8:	000e7cc0 	call	e7cc <memset>
   155fc:	8005883a 	mov	r2,r16
   15600:	80000c15 	stw	zero,48(r16)
   15604:	80000d15 	stw	zero,52(r16)
   15608:	80001115 	stw	zero,68(r16)
   1560c:	80001215 	stw	zero,72(r16)
   15610:	dfc00417 	ldw	ra,16(sp)
   15614:	dcc00317 	ldw	r19,12(sp)
   15618:	dc800217 	ldw	r18,8(sp)
   1561c:	dc400117 	ldw	r17,4(sp)
   15620:	dc000017 	ldw	r16,0(sp)
   15624:	dec00504 	addi	sp,sp,20
   15628:	f800283a 	ret
   1562c:	01400104 	movi	r5,4
   15630:	9809883a 	mov	r4,r19
   15634:	00154c00 	call	154c0 <__sfmoreglue>
   15638:	90800015 	stw	r2,0(r18)
   1563c:	103fde1e 	bne	r2,zero,155b8 <__alt_data_end+0xfc0155b8>
   15640:	00800304 	movi	r2,12
   15644:	98800015 	stw	r2,0(r19)
   15648:	0005883a 	mov	r2,zero
   1564c:	003ff006 	br	15610 <__alt_data_end+0xfc015610>

00015650 <_cleanup>:
   15650:	008000f4 	movhi	r2,3
   15654:	10b60904 	addi	r2,r2,-10204
   15658:	11000017 	ldw	r4,0(r2)
   1565c:	014000b4 	movhi	r5,2
   15660:	296ba604 	addi	r5,r5,-20840
   15664:	00160781 	jmpi	16078 <_fwalk_reent>

00015668 <__sinit>:
   15668:	20800e17 	ldw	r2,56(r4)
   1566c:	10000126 	beq	r2,zero,15674 <__sinit+0xc>
   15670:	f800283a 	ret
   15674:	001531c1 	jmpi	1531c <__sinit.part.1>

00015678 <__sfp_lock_acquire>:
   15678:	f800283a 	ret

0001567c <__sfp_lock_release>:
   1567c:	f800283a 	ret

00015680 <__sinit_lock_acquire>:
   15680:	f800283a 	ret

00015684 <__sinit_lock_release>:
   15684:	f800283a 	ret

00015688 <__fp_lock_all>:
   15688:	008000f4 	movhi	r2,3
   1568c:	10b60a04 	addi	r2,r2,-10200
   15690:	11000017 	ldw	r4,0(r2)
   15694:	01400074 	movhi	r5,1
   15698:	29552e04 	addi	r5,r5,21688
   1569c:	0015fb41 	jmpi	15fb4 <_fwalk>

000156a0 <__fp_unlock_all>:
   156a0:	008000f4 	movhi	r2,3
   156a4:	10b60a04 	addi	r2,r2,-10200
   156a8:	11000017 	ldw	r4,0(r2)
   156ac:	01400074 	movhi	r5,1
   156b0:	2954c204 	addi	r5,r5,21256
   156b4:	0015fb41 	jmpi	15fb4 <_fwalk>

000156b8 <_malloc_trim_r>:
   156b8:	defffb04 	addi	sp,sp,-20
   156bc:	dcc00315 	stw	r19,12(sp)
   156c0:	04c000f4 	movhi	r19,3
   156c4:	dc800215 	stw	r18,8(sp)
   156c8:	dc400115 	stw	r17,4(sp)
   156cc:	dc000015 	stw	r16,0(sp)
   156d0:	dfc00415 	stw	ra,16(sp)
   156d4:	2821883a 	mov	r16,r5
   156d8:	9ceaab04 	addi	r19,r19,-21844
   156dc:	2025883a 	mov	r18,r4
   156e0:	001f0580 	call	1f058 <__malloc_lock>
   156e4:	98800217 	ldw	r2,8(r19)
   156e8:	14400117 	ldw	r17,4(r2)
   156ec:	00bfff04 	movi	r2,-4
   156f0:	88a2703a 	and	r17,r17,r2
   156f4:	8c21c83a 	sub	r16,r17,r16
   156f8:	8403fbc4 	addi	r16,r16,4079
   156fc:	8020d33a 	srli	r16,r16,12
   15700:	0083ffc4 	movi	r2,4095
   15704:	843fffc4 	addi	r16,r16,-1
   15708:	8020933a 	slli	r16,r16,12
   1570c:	1400060e 	bge	r2,r16,15728 <_malloc_trim_r+0x70>
   15710:	000b883a 	mov	r5,zero
   15714:	9009883a 	mov	r4,r18
   15718:	000ea540 	call	ea54 <_sbrk_r>
   1571c:	98c00217 	ldw	r3,8(r19)
   15720:	1c47883a 	add	r3,r3,r17
   15724:	10c00a26 	beq	r2,r3,15750 <_malloc_trim_r+0x98>
   15728:	9009883a 	mov	r4,r18
   1572c:	001f07c0 	call	1f07c <__malloc_unlock>
   15730:	0005883a 	mov	r2,zero
   15734:	dfc00417 	ldw	ra,16(sp)
   15738:	dcc00317 	ldw	r19,12(sp)
   1573c:	dc800217 	ldw	r18,8(sp)
   15740:	dc400117 	ldw	r17,4(sp)
   15744:	dc000017 	ldw	r16,0(sp)
   15748:	dec00504 	addi	sp,sp,20
   1574c:	f800283a 	ret
   15750:	040bc83a 	sub	r5,zero,r16
   15754:	9009883a 	mov	r4,r18
   15758:	000ea540 	call	ea54 <_sbrk_r>
   1575c:	00ffffc4 	movi	r3,-1
   15760:	10c00d26 	beq	r2,r3,15798 <_malloc_trim_r+0xe0>
   15764:	00c000f4 	movhi	r3,3
   15768:	18c2f504 	addi	r3,r3,3028
   1576c:	18800017 	ldw	r2,0(r3)
   15770:	99000217 	ldw	r4,8(r19)
   15774:	8c23c83a 	sub	r17,r17,r16
   15778:	8c400054 	ori	r17,r17,1
   1577c:	1421c83a 	sub	r16,r2,r16
   15780:	24400115 	stw	r17,4(r4)
   15784:	9009883a 	mov	r4,r18
   15788:	1c000015 	stw	r16,0(r3)
   1578c:	001f07c0 	call	1f07c <__malloc_unlock>
   15790:	00800044 	movi	r2,1
   15794:	003fe706 	br	15734 <__alt_data_end+0xfc015734>
   15798:	000b883a 	mov	r5,zero
   1579c:	9009883a 	mov	r4,r18
   157a0:	000ea540 	call	ea54 <_sbrk_r>
   157a4:	99000217 	ldw	r4,8(r19)
   157a8:	014003c4 	movi	r5,15
   157ac:	1107c83a 	sub	r3,r2,r4
   157b0:	28ffdd0e 	bge	r5,r3,15728 <__alt_data_end+0xfc015728>
   157b4:	014000f4 	movhi	r5,3
   157b8:	29760b04 	addi	r5,r5,-10196
   157bc:	29400017 	ldw	r5,0(r5)
   157c0:	18c00054 	ori	r3,r3,1
   157c4:	20c00115 	stw	r3,4(r4)
   157c8:	00c000f4 	movhi	r3,3
   157cc:	1145c83a 	sub	r2,r2,r5
   157d0:	18c2f504 	addi	r3,r3,3028
   157d4:	18800015 	stw	r2,0(r3)
   157d8:	003fd306 	br	15728 <__alt_data_end+0xfc015728>

000157dc <_free_r>:
   157dc:	28004126 	beq	r5,zero,158e4 <_free_r+0x108>
   157e0:	defffd04 	addi	sp,sp,-12
   157e4:	dc400115 	stw	r17,4(sp)
   157e8:	dc000015 	stw	r16,0(sp)
   157ec:	2023883a 	mov	r17,r4
   157f0:	2821883a 	mov	r16,r5
   157f4:	dfc00215 	stw	ra,8(sp)
   157f8:	001f0580 	call	1f058 <__malloc_lock>
   157fc:	81ffff17 	ldw	r7,-4(r16)
   15800:	00bfff84 	movi	r2,-2
   15804:	010000f4 	movhi	r4,3
   15808:	81bffe04 	addi	r6,r16,-8
   1580c:	3884703a 	and	r2,r7,r2
   15810:	212aab04 	addi	r4,r4,-21844
   15814:	308b883a 	add	r5,r6,r2
   15818:	2a400117 	ldw	r9,4(r5)
   1581c:	22000217 	ldw	r8,8(r4)
   15820:	00ffff04 	movi	r3,-4
   15824:	48c6703a 	and	r3,r9,r3
   15828:	2a005726 	beq	r5,r8,15988 <_free_r+0x1ac>
   1582c:	28c00115 	stw	r3,4(r5)
   15830:	39c0004c 	andi	r7,r7,1
   15834:	3800091e 	bne	r7,zero,1585c <_free_r+0x80>
   15838:	823ffe17 	ldw	r8,-8(r16)
   1583c:	22400204 	addi	r9,r4,8
   15840:	320dc83a 	sub	r6,r6,r8
   15844:	31c00217 	ldw	r7,8(r6)
   15848:	1205883a 	add	r2,r2,r8
   1584c:	3a406526 	beq	r7,r9,159e4 <_free_r+0x208>
   15850:	32000317 	ldw	r8,12(r6)
   15854:	3a000315 	stw	r8,12(r7)
   15858:	41c00215 	stw	r7,8(r8)
   1585c:	28cf883a 	add	r7,r5,r3
   15860:	39c00117 	ldw	r7,4(r7)
   15864:	39c0004c 	andi	r7,r7,1
   15868:	38003a26 	beq	r7,zero,15954 <_free_r+0x178>
   1586c:	10c00054 	ori	r3,r2,1
   15870:	30c00115 	stw	r3,4(r6)
   15874:	3087883a 	add	r3,r6,r2
   15878:	18800015 	stw	r2,0(r3)
   1587c:	00c07fc4 	movi	r3,511
   15880:	18801936 	bltu	r3,r2,158e8 <_free_r+0x10c>
   15884:	1004d0fa 	srli	r2,r2,3
   15888:	01c00044 	movi	r7,1
   1588c:	21400117 	ldw	r5,4(r4)
   15890:	10c00044 	addi	r3,r2,1
   15894:	18c7883a 	add	r3,r3,r3
   15898:	1005d0ba 	srai	r2,r2,2
   1589c:	18c7883a 	add	r3,r3,r3
   158a0:	18c7883a 	add	r3,r3,r3
   158a4:	1907883a 	add	r3,r3,r4
   158a8:	3884983a 	sll	r2,r7,r2
   158ac:	19c00017 	ldw	r7,0(r3)
   158b0:	1a3ffe04 	addi	r8,r3,-8
   158b4:	1144b03a 	or	r2,r2,r5
   158b8:	32000315 	stw	r8,12(r6)
   158bc:	31c00215 	stw	r7,8(r6)
   158c0:	20800115 	stw	r2,4(r4)
   158c4:	19800015 	stw	r6,0(r3)
   158c8:	39800315 	stw	r6,12(r7)
   158cc:	8809883a 	mov	r4,r17
   158d0:	dfc00217 	ldw	ra,8(sp)
   158d4:	dc400117 	ldw	r17,4(sp)
   158d8:	dc000017 	ldw	r16,0(sp)
   158dc:	dec00304 	addi	sp,sp,12
   158e0:	001f07c1 	jmpi	1f07c <__malloc_unlock>
   158e4:	f800283a 	ret
   158e8:	100ad27a 	srli	r5,r2,9
   158ec:	00c00104 	movi	r3,4
   158f0:	19404a36 	bltu	r3,r5,15a1c <_free_r+0x240>
   158f4:	100ad1ba 	srli	r5,r2,6
   158f8:	28c00e44 	addi	r3,r5,57
   158fc:	18c7883a 	add	r3,r3,r3
   15900:	29400e04 	addi	r5,r5,56
   15904:	18c7883a 	add	r3,r3,r3
   15908:	18c7883a 	add	r3,r3,r3
   1590c:	1909883a 	add	r4,r3,r4
   15910:	20c00017 	ldw	r3,0(r4)
   15914:	01c000f4 	movhi	r7,3
   15918:	213ffe04 	addi	r4,r4,-8
   1591c:	39eaab04 	addi	r7,r7,-21844
   15920:	20c04426 	beq	r4,r3,15a34 <_free_r+0x258>
   15924:	01ffff04 	movi	r7,-4
   15928:	19400117 	ldw	r5,4(r3)
   1592c:	29ca703a 	and	r5,r5,r7
   15930:	1140022e 	bgeu	r2,r5,1593c <_free_r+0x160>
   15934:	18c00217 	ldw	r3,8(r3)
   15938:	20fffb1e 	bne	r4,r3,15928 <__alt_data_end+0xfc015928>
   1593c:	19000317 	ldw	r4,12(r3)
   15940:	31000315 	stw	r4,12(r6)
   15944:	30c00215 	stw	r3,8(r6)
   15948:	21800215 	stw	r6,8(r4)
   1594c:	19800315 	stw	r6,12(r3)
   15950:	003fde06 	br	158cc <__alt_data_end+0xfc0158cc>
   15954:	29c00217 	ldw	r7,8(r5)
   15958:	10c5883a 	add	r2,r2,r3
   1595c:	00c000f4 	movhi	r3,3
   15960:	18eaad04 	addi	r3,r3,-21836
   15964:	38c03b26 	beq	r7,r3,15a54 <_free_r+0x278>
   15968:	2a000317 	ldw	r8,12(r5)
   1596c:	11400054 	ori	r5,r2,1
   15970:	3087883a 	add	r3,r6,r2
   15974:	3a000315 	stw	r8,12(r7)
   15978:	41c00215 	stw	r7,8(r8)
   1597c:	31400115 	stw	r5,4(r6)
   15980:	18800015 	stw	r2,0(r3)
   15984:	003fbd06 	br	1587c <__alt_data_end+0xfc01587c>
   15988:	39c0004c 	andi	r7,r7,1
   1598c:	10c5883a 	add	r2,r2,r3
   15990:	3800071e 	bne	r7,zero,159b0 <_free_r+0x1d4>
   15994:	81fffe17 	ldw	r7,-8(r16)
   15998:	31cdc83a 	sub	r6,r6,r7
   1599c:	30c00317 	ldw	r3,12(r6)
   159a0:	31400217 	ldw	r5,8(r6)
   159a4:	11c5883a 	add	r2,r2,r7
   159a8:	28c00315 	stw	r3,12(r5)
   159ac:	19400215 	stw	r5,8(r3)
   159b0:	10c00054 	ori	r3,r2,1
   159b4:	30c00115 	stw	r3,4(r6)
   159b8:	00c000f4 	movhi	r3,3
   159bc:	18f60c04 	addi	r3,r3,-10192
   159c0:	18c00017 	ldw	r3,0(r3)
   159c4:	21800215 	stw	r6,8(r4)
   159c8:	10ffc036 	bltu	r2,r3,158cc <__alt_data_end+0xfc0158cc>
   159cc:	008000f4 	movhi	r2,3
   159d0:	10829d04 	addi	r2,r2,2676
   159d4:	11400017 	ldw	r5,0(r2)
   159d8:	8809883a 	mov	r4,r17
   159dc:	00156b80 	call	156b8 <_malloc_trim_r>
   159e0:	003fba06 	br	158cc <__alt_data_end+0xfc0158cc>
   159e4:	28c9883a 	add	r4,r5,r3
   159e8:	21000117 	ldw	r4,4(r4)
   159ec:	2100004c 	andi	r4,r4,1
   159f0:	2000391e 	bne	r4,zero,15ad8 <_free_r+0x2fc>
   159f4:	29c00217 	ldw	r7,8(r5)
   159f8:	29000317 	ldw	r4,12(r5)
   159fc:	1885883a 	add	r2,r3,r2
   15a00:	10c00054 	ori	r3,r2,1
   15a04:	39000315 	stw	r4,12(r7)
   15a08:	21c00215 	stw	r7,8(r4)
   15a0c:	30c00115 	stw	r3,4(r6)
   15a10:	308d883a 	add	r6,r6,r2
   15a14:	30800015 	stw	r2,0(r6)
   15a18:	003fac06 	br	158cc <__alt_data_end+0xfc0158cc>
   15a1c:	00c00504 	movi	r3,20
   15a20:	19401536 	bltu	r3,r5,15a78 <_free_r+0x29c>
   15a24:	28c01704 	addi	r3,r5,92
   15a28:	18c7883a 	add	r3,r3,r3
   15a2c:	294016c4 	addi	r5,r5,91
   15a30:	003fb406 	br	15904 <__alt_data_end+0xfc015904>
   15a34:	280bd0ba 	srai	r5,r5,2
   15a38:	00c00044 	movi	r3,1
   15a3c:	38800117 	ldw	r2,4(r7)
   15a40:	194a983a 	sll	r5,r3,r5
   15a44:	2007883a 	mov	r3,r4
   15a48:	2884b03a 	or	r2,r5,r2
   15a4c:	38800115 	stw	r2,4(r7)
   15a50:	003fbb06 	br	15940 <__alt_data_end+0xfc015940>
   15a54:	21800515 	stw	r6,20(r4)
   15a58:	21800415 	stw	r6,16(r4)
   15a5c:	10c00054 	ori	r3,r2,1
   15a60:	31c00315 	stw	r7,12(r6)
   15a64:	31c00215 	stw	r7,8(r6)
   15a68:	30c00115 	stw	r3,4(r6)
   15a6c:	308d883a 	add	r6,r6,r2
   15a70:	30800015 	stw	r2,0(r6)
   15a74:	003f9506 	br	158cc <__alt_data_end+0xfc0158cc>
   15a78:	00c01504 	movi	r3,84
   15a7c:	19400536 	bltu	r3,r5,15a94 <_free_r+0x2b8>
   15a80:	100ad33a 	srli	r5,r2,12
   15a84:	28c01bc4 	addi	r3,r5,111
   15a88:	18c7883a 	add	r3,r3,r3
   15a8c:	29401b84 	addi	r5,r5,110
   15a90:	003f9c06 	br	15904 <__alt_data_end+0xfc015904>
   15a94:	00c05504 	movi	r3,340
   15a98:	19400536 	bltu	r3,r5,15ab0 <_free_r+0x2d4>
   15a9c:	100ad3fa 	srli	r5,r2,15
   15aa0:	28c01e04 	addi	r3,r5,120
   15aa4:	18c7883a 	add	r3,r3,r3
   15aa8:	29401dc4 	addi	r5,r5,119
   15aac:	003f9506 	br	15904 <__alt_data_end+0xfc015904>
   15ab0:	00c15504 	movi	r3,1364
   15ab4:	19400536 	bltu	r3,r5,15acc <_free_r+0x2f0>
   15ab8:	100ad4ba 	srli	r5,r2,18
   15abc:	28c01f44 	addi	r3,r5,125
   15ac0:	18c7883a 	add	r3,r3,r3
   15ac4:	29401f04 	addi	r5,r5,124
   15ac8:	003f8e06 	br	15904 <__alt_data_end+0xfc015904>
   15acc:	00c03f84 	movi	r3,254
   15ad0:	01401f84 	movi	r5,126
   15ad4:	003f8b06 	br	15904 <__alt_data_end+0xfc015904>
   15ad8:	10c00054 	ori	r3,r2,1
   15adc:	30c00115 	stw	r3,4(r6)
   15ae0:	308d883a 	add	r6,r6,r2
   15ae4:	30800015 	stw	r2,0(r6)
   15ae8:	003f7806 	br	158cc <__alt_data_end+0xfc0158cc>

00015aec <__sfvwrite_r>:
   15aec:	30800217 	ldw	r2,8(r6)
   15af0:	10006726 	beq	r2,zero,15c90 <__sfvwrite_r+0x1a4>
   15af4:	28c0030b 	ldhu	r3,12(r5)
   15af8:	defff404 	addi	sp,sp,-48
   15afc:	dd400715 	stw	r21,28(sp)
   15b00:	dd000615 	stw	r20,24(sp)
   15b04:	dc000215 	stw	r16,8(sp)
   15b08:	dfc00b15 	stw	ra,44(sp)
   15b0c:	df000a15 	stw	fp,40(sp)
   15b10:	ddc00915 	stw	r23,36(sp)
   15b14:	dd800815 	stw	r22,32(sp)
   15b18:	dcc00515 	stw	r19,20(sp)
   15b1c:	dc800415 	stw	r18,16(sp)
   15b20:	dc400315 	stw	r17,12(sp)
   15b24:	1880020c 	andi	r2,r3,8
   15b28:	2821883a 	mov	r16,r5
   15b2c:	202b883a 	mov	r21,r4
   15b30:	3029883a 	mov	r20,r6
   15b34:	10002726 	beq	r2,zero,15bd4 <__sfvwrite_r+0xe8>
   15b38:	28800417 	ldw	r2,16(r5)
   15b3c:	10002526 	beq	r2,zero,15bd4 <__sfvwrite_r+0xe8>
   15b40:	1880008c 	andi	r2,r3,2
   15b44:	a4400017 	ldw	r17,0(r20)
   15b48:	10002a26 	beq	r2,zero,15bf4 <__sfvwrite_r+0x108>
   15b4c:	05a00034 	movhi	r22,32768
   15b50:	0027883a 	mov	r19,zero
   15b54:	0025883a 	mov	r18,zero
   15b58:	b5bf0004 	addi	r22,r22,-1024
   15b5c:	980d883a 	mov	r6,r19
   15b60:	a809883a 	mov	r4,r21
   15b64:	90004626 	beq	r18,zero,15c80 <__sfvwrite_r+0x194>
   15b68:	900f883a 	mov	r7,r18
   15b6c:	b480022e 	bgeu	r22,r18,15b78 <__sfvwrite_r+0x8c>
   15b70:	01e00034 	movhi	r7,32768
   15b74:	39ff0004 	addi	r7,r7,-1024
   15b78:	80800917 	ldw	r2,36(r16)
   15b7c:	81400717 	ldw	r5,28(r16)
   15b80:	103ee83a 	callr	r2
   15b84:	00805a0e 	bge	zero,r2,15cf0 <__sfvwrite_r+0x204>
   15b88:	a0c00217 	ldw	r3,8(r20)
   15b8c:	98a7883a 	add	r19,r19,r2
   15b90:	90a5c83a 	sub	r18,r18,r2
   15b94:	1885c83a 	sub	r2,r3,r2
   15b98:	a0800215 	stw	r2,8(r20)
   15b9c:	103fef1e 	bne	r2,zero,15b5c <__alt_data_end+0xfc015b5c>
   15ba0:	0005883a 	mov	r2,zero
   15ba4:	dfc00b17 	ldw	ra,44(sp)
   15ba8:	df000a17 	ldw	fp,40(sp)
   15bac:	ddc00917 	ldw	r23,36(sp)
   15bb0:	dd800817 	ldw	r22,32(sp)
   15bb4:	dd400717 	ldw	r21,28(sp)
   15bb8:	dd000617 	ldw	r20,24(sp)
   15bbc:	dcc00517 	ldw	r19,20(sp)
   15bc0:	dc800417 	ldw	r18,16(sp)
   15bc4:	dc400317 	ldw	r17,12(sp)
   15bc8:	dc000217 	ldw	r16,8(sp)
   15bcc:	dec00c04 	addi	sp,sp,48
   15bd0:	f800283a 	ret
   15bd4:	800b883a 	mov	r5,r16
   15bd8:	a809883a 	mov	r4,r21
   15bdc:	001365c0 	call	1365c <__swsetup_r>
   15be0:	1000ee1e 	bne	r2,zero,15f9c <__sfvwrite_r+0x4b0>
   15be4:	80c0030b 	ldhu	r3,12(r16)
   15be8:	a4400017 	ldw	r17,0(r20)
   15bec:	1880008c 	andi	r2,r3,2
   15bf0:	103fd61e 	bne	r2,zero,15b4c <__alt_data_end+0xfc015b4c>
   15bf4:	1880004c 	andi	r2,r3,1
   15bf8:	1000421e 	bne	r2,zero,15d04 <__sfvwrite_r+0x218>
   15bfc:	0039883a 	mov	fp,zero
   15c00:	0025883a 	mov	r18,zero
   15c04:	90001a26 	beq	r18,zero,15c70 <__sfvwrite_r+0x184>
   15c08:	1880800c 	andi	r2,r3,512
   15c0c:	84c00217 	ldw	r19,8(r16)
   15c10:	10002126 	beq	r2,zero,15c98 <__sfvwrite_r+0x1ac>
   15c14:	982f883a 	mov	r23,r19
   15c18:	94c09636 	bltu	r18,r19,15e74 <__sfvwrite_r+0x388>
   15c1c:	1881200c 	andi	r2,r3,1152
   15c20:	1000a11e 	bne	r2,zero,15ea8 <__sfvwrite_r+0x3bc>
   15c24:	81000017 	ldw	r4,0(r16)
   15c28:	b80d883a 	mov	r6,r23
   15c2c:	e00b883a 	mov	r5,fp
   15c30:	00164b80 	call	164b8 <memmove>
   15c34:	80c00217 	ldw	r3,8(r16)
   15c38:	81000017 	ldw	r4,0(r16)
   15c3c:	9005883a 	mov	r2,r18
   15c40:	1ce7c83a 	sub	r19,r3,r19
   15c44:	25cf883a 	add	r7,r4,r23
   15c48:	84c00215 	stw	r19,8(r16)
   15c4c:	81c00015 	stw	r7,0(r16)
   15c50:	a0c00217 	ldw	r3,8(r20)
   15c54:	e0b9883a 	add	fp,fp,r2
   15c58:	90a5c83a 	sub	r18,r18,r2
   15c5c:	18a7c83a 	sub	r19,r3,r2
   15c60:	a4c00215 	stw	r19,8(r20)
   15c64:	983fce26 	beq	r19,zero,15ba0 <__alt_data_end+0xfc015ba0>
   15c68:	80c0030b 	ldhu	r3,12(r16)
   15c6c:	903fe61e 	bne	r18,zero,15c08 <__alt_data_end+0xfc015c08>
   15c70:	8f000017 	ldw	fp,0(r17)
   15c74:	8c800117 	ldw	r18,4(r17)
   15c78:	8c400204 	addi	r17,r17,8
   15c7c:	003fe106 	br	15c04 <__alt_data_end+0xfc015c04>
   15c80:	8cc00017 	ldw	r19,0(r17)
   15c84:	8c800117 	ldw	r18,4(r17)
   15c88:	8c400204 	addi	r17,r17,8
   15c8c:	003fb306 	br	15b5c <__alt_data_end+0xfc015b5c>
   15c90:	0005883a 	mov	r2,zero
   15c94:	f800283a 	ret
   15c98:	81000017 	ldw	r4,0(r16)
   15c9c:	80800417 	ldw	r2,16(r16)
   15ca0:	11005a36 	bltu	r2,r4,15e0c <__sfvwrite_r+0x320>
   15ca4:	85c00517 	ldw	r23,20(r16)
   15ca8:	95c05836 	bltu	r18,r23,15e0c <__sfvwrite_r+0x320>
   15cac:	00a00034 	movhi	r2,32768
   15cb0:	10bfffc4 	addi	r2,r2,-1
   15cb4:	9009883a 	mov	r4,r18
   15cb8:	1480012e 	bgeu	r2,r18,15cc0 <__sfvwrite_r+0x1d4>
   15cbc:	1009883a 	mov	r4,r2
   15cc0:	b80b883a 	mov	r5,r23
   15cc4:	000cc4c0 	call	cc4c <__divsi3>
   15cc8:	b80b883a 	mov	r5,r23
   15ccc:	1009883a 	mov	r4,r2
   15cd0:	000ce000 	call	ce00 <__mulsi3>
   15cd4:	81400717 	ldw	r5,28(r16)
   15cd8:	80c00917 	ldw	r3,36(r16)
   15cdc:	100f883a 	mov	r7,r2
   15ce0:	e00d883a 	mov	r6,fp
   15ce4:	a809883a 	mov	r4,r21
   15ce8:	183ee83a 	callr	r3
   15cec:	00bfd816 	blt	zero,r2,15c50 <__alt_data_end+0xfc015c50>
   15cf0:	8080030b 	ldhu	r2,12(r16)
   15cf4:	10801014 	ori	r2,r2,64
   15cf8:	8080030d 	sth	r2,12(r16)
   15cfc:	00bfffc4 	movi	r2,-1
   15d00:	003fa806 	br	15ba4 <__alt_data_end+0xfc015ba4>
   15d04:	0027883a 	mov	r19,zero
   15d08:	0011883a 	mov	r8,zero
   15d0c:	0039883a 	mov	fp,zero
   15d10:	0025883a 	mov	r18,zero
   15d14:	90001f26 	beq	r18,zero,15d94 <__sfvwrite_r+0x2a8>
   15d18:	40005a26 	beq	r8,zero,15e84 <__sfvwrite_r+0x398>
   15d1c:	982d883a 	mov	r22,r19
   15d20:	94c0012e 	bgeu	r18,r19,15d28 <__sfvwrite_r+0x23c>
   15d24:	902d883a 	mov	r22,r18
   15d28:	81000017 	ldw	r4,0(r16)
   15d2c:	80800417 	ldw	r2,16(r16)
   15d30:	b02f883a 	mov	r23,r22
   15d34:	81c00517 	ldw	r7,20(r16)
   15d38:	1100032e 	bgeu	r2,r4,15d48 <__sfvwrite_r+0x25c>
   15d3c:	80c00217 	ldw	r3,8(r16)
   15d40:	38c7883a 	add	r3,r7,r3
   15d44:	1d801816 	blt	r3,r22,15da8 <__sfvwrite_r+0x2bc>
   15d48:	b1c03e16 	blt	r22,r7,15e44 <__sfvwrite_r+0x358>
   15d4c:	80800917 	ldw	r2,36(r16)
   15d50:	81400717 	ldw	r5,28(r16)
   15d54:	e00d883a 	mov	r6,fp
   15d58:	da000115 	stw	r8,4(sp)
   15d5c:	a809883a 	mov	r4,r21
   15d60:	103ee83a 	callr	r2
   15d64:	102f883a 	mov	r23,r2
   15d68:	da000117 	ldw	r8,4(sp)
   15d6c:	00bfe00e 	bge	zero,r2,15cf0 <__alt_data_end+0xfc015cf0>
   15d70:	9de7c83a 	sub	r19,r19,r23
   15d74:	98001f26 	beq	r19,zero,15df4 <__sfvwrite_r+0x308>
   15d78:	a0800217 	ldw	r2,8(r20)
   15d7c:	e5f9883a 	add	fp,fp,r23
   15d80:	95e5c83a 	sub	r18,r18,r23
   15d84:	15efc83a 	sub	r23,r2,r23
   15d88:	a5c00215 	stw	r23,8(r20)
   15d8c:	b83f8426 	beq	r23,zero,15ba0 <__alt_data_end+0xfc015ba0>
   15d90:	903fe11e 	bne	r18,zero,15d18 <__alt_data_end+0xfc015d18>
   15d94:	8f000017 	ldw	fp,0(r17)
   15d98:	8c800117 	ldw	r18,4(r17)
   15d9c:	0011883a 	mov	r8,zero
   15da0:	8c400204 	addi	r17,r17,8
   15da4:	003fdb06 	br	15d14 <__alt_data_end+0xfc015d14>
   15da8:	180d883a 	mov	r6,r3
   15dac:	e00b883a 	mov	r5,fp
   15db0:	da000115 	stw	r8,4(sp)
   15db4:	d8c00015 	stw	r3,0(sp)
   15db8:	00164b80 	call	164b8 <memmove>
   15dbc:	d8c00017 	ldw	r3,0(sp)
   15dc0:	80800017 	ldw	r2,0(r16)
   15dc4:	800b883a 	mov	r5,r16
   15dc8:	a809883a 	mov	r4,r21
   15dcc:	10c5883a 	add	r2,r2,r3
   15dd0:	80800015 	stw	r2,0(r16)
   15dd4:	d8c00015 	stw	r3,0(sp)
   15dd8:	001527c0 	call	1527c <_fflush_r>
   15ddc:	d8c00017 	ldw	r3,0(sp)
   15de0:	da000117 	ldw	r8,4(sp)
   15de4:	103fc21e 	bne	r2,zero,15cf0 <__alt_data_end+0xfc015cf0>
   15de8:	182f883a 	mov	r23,r3
   15dec:	9de7c83a 	sub	r19,r19,r23
   15df0:	983fe11e 	bne	r19,zero,15d78 <__alt_data_end+0xfc015d78>
   15df4:	800b883a 	mov	r5,r16
   15df8:	a809883a 	mov	r4,r21
   15dfc:	001527c0 	call	1527c <_fflush_r>
   15e00:	103fbb1e 	bne	r2,zero,15cf0 <__alt_data_end+0xfc015cf0>
   15e04:	0011883a 	mov	r8,zero
   15e08:	003fdb06 	br	15d78 <__alt_data_end+0xfc015d78>
   15e0c:	94c0012e 	bgeu	r18,r19,15e14 <__sfvwrite_r+0x328>
   15e10:	9027883a 	mov	r19,r18
   15e14:	980d883a 	mov	r6,r19
   15e18:	e00b883a 	mov	r5,fp
   15e1c:	00164b80 	call	164b8 <memmove>
   15e20:	80800217 	ldw	r2,8(r16)
   15e24:	80c00017 	ldw	r3,0(r16)
   15e28:	14c5c83a 	sub	r2,r2,r19
   15e2c:	1cc7883a 	add	r3,r3,r19
   15e30:	80800215 	stw	r2,8(r16)
   15e34:	80c00015 	stw	r3,0(r16)
   15e38:	10004326 	beq	r2,zero,15f48 <__sfvwrite_r+0x45c>
   15e3c:	9805883a 	mov	r2,r19
   15e40:	003f8306 	br	15c50 <__alt_data_end+0xfc015c50>
   15e44:	b00d883a 	mov	r6,r22
   15e48:	e00b883a 	mov	r5,fp
   15e4c:	da000115 	stw	r8,4(sp)
   15e50:	00164b80 	call	164b8 <memmove>
   15e54:	80800217 	ldw	r2,8(r16)
   15e58:	80c00017 	ldw	r3,0(r16)
   15e5c:	da000117 	ldw	r8,4(sp)
   15e60:	1585c83a 	sub	r2,r2,r22
   15e64:	1dad883a 	add	r22,r3,r22
   15e68:	80800215 	stw	r2,8(r16)
   15e6c:	85800015 	stw	r22,0(r16)
   15e70:	003fbf06 	br	15d70 <__alt_data_end+0xfc015d70>
   15e74:	81000017 	ldw	r4,0(r16)
   15e78:	9027883a 	mov	r19,r18
   15e7c:	902f883a 	mov	r23,r18
   15e80:	003f6906 	br	15c28 <__alt_data_end+0xfc015c28>
   15e84:	900d883a 	mov	r6,r18
   15e88:	01400284 	movi	r5,10
   15e8c:	e009883a 	mov	r4,fp
   15e90:	00163d40 	call	163d4 <memchr>
   15e94:	10003e26 	beq	r2,zero,15f90 <__sfvwrite_r+0x4a4>
   15e98:	10800044 	addi	r2,r2,1
   15e9c:	1727c83a 	sub	r19,r2,fp
   15ea0:	02000044 	movi	r8,1
   15ea4:	003f9d06 	br	15d1c <__alt_data_end+0xfc015d1c>
   15ea8:	80800517 	ldw	r2,20(r16)
   15eac:	81400417 	ldw	r5,16(r16)
   15eb0:	81c00017 	ldw	r7,0(r16)
   15eb4:	10a7883a 	add	r19,r2,r2
   15eb8:	9885883a 	add	r2,r19,r2
   15ebc:	1026d7fa 	srli	r19,r2,31
   15ec0:	396dc83a 	sub	r22,r7,r5
   15ec4:	b1000044 	addi	r4,r22,1
   15ec8:	9885883a 	add	r2,r19,r2
   15ecc:	1027d07a 	srai	r19,r2,1
   15ed0:	2485883a 	add	r2,r4,r18
   15ed4:	980d883a 	mov	r6,r19
   15ed8:	9880022e 	bgeu	r19,r2,15ee4 <__sfvwrite_r+0x3f8>
   15edc:	1027883a 	mov	r19,r2
   15ee0:	100d883a 	mov	r6,r2
   15ee4:	18c1000c 	andi	r3,r3,1024
   15ee8:	18001c26 	beq	r3,zero,15f5c <__sfvwrite_r+0x470>
   15eec:	300b883a 	mov	r5,r6
   15ef0:	a809883a 	mov	r4,r21
   15ef4:	000de780 	call	de78 <_malloc_r>
   15ef8:	102f883a 	mov	r23,r2
   15efc:	10002926 	beq	r2,zero,15fa4 <__sfvwrite_r+0x4b8>
   15f00:	81400417 	ldw	r5,16(r16)
   15f04:	b00d883a 	mov	r6,r22
   15f08:	1009883a 	mov	r4,r2
   15f0c:	000e6840 	call	e684 <memcpy>
   15f10:	8080030b 	ldhu	r2,12(r16)
   15f14:	00fedfc4 	movi	r3,-1153
   15f18:	10c4703a 	and	r2,r2,r3
   15f1c:	10802014 	ori	r2,r2,128
   15f20:	8080030d 	sth	r2,12(r16)
   15f24:	bd89883a 	add	r4,r23,r22
   15f28:	9d8fc83a 	sub	r7,r19,r22
   15f2c:	85c00415 	stw	r23,16(r16)
   15f30:	84c00515 	stw	r19,20(r16)
   15f34:	81000015 	stw	r4,0(r16)
   15f38:	9027883a 	mov	r19,r18
   15f3c:	81c00215 	stw	r7,8(r16)
   15f40:	902f883a 	mov	r23,r18
   15f44:	003f3806 	br	15c28 <__alt_data_end+0xfc015c28>
   15f48:	800b883a 	mov	r5,r16
   15f4c:	a809883a 	mov	r4,r21
   15f50:	001527c0 	call	1527c <_fflush_r>
   15f54:	103fb926 	beq	r2,zero,15e3c <__alt_data_end+0xfc015e3c>
   15f58:	003f6506 	br	15cf0 <__alt_data_end+0xfc015cf0>
   15f5c:	a809883a 	mov	r4,r21
   15f60:	00178340 	call	17834 <_realloc_r>
   15f64:	102f883a 	mov	r23,r2
   15f68:	103fee1e 	bne	r2,zero,15f24 <__alt_data_end+0xfc015f24>
   15f6c:	81400417 	ldw	r5,16(r16)
   15f70:	a809883a 	mov	r4,r21
   15f74:	00157dc0 	call	157dc <_free_r>
   15f78:	8080030b 	ldhu	r2,12(r16)
   15f7c:	00ffdfc4 	movi	r3,-129
   15f80:	1884703a 	and	r2,r3,r2
   15f84:	00c00304 	movi	r3,12
   15f88:	a8c00015 	stw	r3,0(r21)
   15f8c:	003f5906 	br	15cf4 <__alt_data_end+0xfc015cf4>
   15f90:	94c00044 	addi	r19,r18,1
   15f94:	02000044 	movi	r8,1
   15f98:	003f6006 	br	15d1c <__alt_data_end+0xfc015d1c>
   15f9c:	00bfffc4 	movi	r2,-1
   15fa0:	003f0006 	br	15ba4 <__alt_data_end+0xfc015ba4>
   15fa4:	00800304 	movi	r2,12
   15fa8:	a8800015 	stw	r2,0(r21)
   15fac:	8080030b 	ldhu	r2,12(r16)
   15fb0:	003f5006 	br	15cf4 <__alt_data_end+0xfc015cf4>

00015fb4 <_fwalk>:
   15fb4:	defff704 	addi	sp,sp,-36
   15fb8:	dd000415 	stw	r20,16(sp)
   15fbc:	dfc00815 	stw	ra,32(sp)
   15fc0:	ddc00715 	stw	r23,28(sp)
   15fc4:	dd800615 	stw	r22,24(sp)
   15fc8:	dd400515 	stw	r21,20(sp)
   15fcc:	dcc00315 	stw	r19,12(sp)
   15fd0:	dc800215 	stw	r18,8(sp)
   15fd4:	dc400115 	stw	r17,4(sp)
   15fd8:	dc000015 	stw	r16,0(sp)
   15fdc:	2500b804 	addi	r20,r4,736
   15fe0:	a0002326 	beq	r20,zero,16070 <_fwalk+0xbc>
   15fe4:	282b883a 	mov	r21,r5
   15fe8:	002f883a 	mov	r23,zero
   15fec:	05800044 	movi	r22,1
   15ff0:	04ffffc4 	movi	r19,-1
   15ff4:	a4400117 	ldw	r17,4(r20)
   15ff8:	a4800217 	ldw	r18,8(r20)
   15ffc:	8c7fffc4 	addi	r17,r17,-1
   16000:	88000d16 	blt	r17,zero,16038 <_fwalk+0x84>
   16004:	94000304 	addi	r16,r18,12
   16008:	94800384 	addi	r18,r18,14
   1600c:	8080000b 	ldhu	r2,0(r16)
   16010:	8c7fffc4 	addi	r17,r17,-1
   16014:	813ffd04 	addi	r4,r16,-12
   16018:	b080042e 	bgeu	r22,r2,1602c <_fwalk+0x78>
   1601c:	9080000f 	ldh	r2,0(r18)
   16020:	14c00226 	beq	r2,r19,1602c <_fwalk+0x78>
   16024:	a83ee83a 	callr	r21
   16028:	b8aeb03a 	or	r23,r23,r2
   1602c:	84001a04 	addi	r16,r16,104
   16030:	94801a04 	addi	r18,r18,104
   16034:	8cfff51e 	bne	r17,r19,1600c <__alt_data_end+0xfc01600c>
   16038:	a5000017 	ldw	r20,0(r20)
   1603c:	a03fed1e 	bne	r20,zero,15ff4 <__alt_data_end+0xfc015ff4>
   16040:	b805883a 	mov	r2,r23
   16044:	dfc00817 	ldw	ra,32(sp)
   16048:	ddc00717 	ldw	r23,28(sp)
   1604c:	dd800617 	ldw	r22,24(sp)
   16050:	dd400517 	ldw	r21,20(sp)
   16054:	dd000417 	ldw	r20,16(sp)
   16058:	dcc00317 	ldw	r19,12(sp)
   1605c:	dc800217 	ldw	r18,8(sp)
   16060:	dc400117 	ldw	r17,4(sp)
   16064:	dc000017 	ldw	r16,0(sp)
   16068:	dec00904 	addi	sp,sp,36
   1606c:	f800283a 	ret
   16070:	002f883a 	mov	r23,zero
   16074:	003ff206 	br	16040 <__alt_data_end+0xfc016040>

00016078 <_fwalk_reent>:
   16078:	defff704 	addi	sp,sp,-36
   1607c:	dd000415 	stw	r20,16(sp)
   16080:	dfc00815 	stw	ra,32(sp)
   16084:	ddc00715 	stw	r23,28(sp)
   16088:	dd800615 	stw	r22,24(sp)
   1608c:	dd400515 	stw	r21,20(sp)
   16090:	dcc00315 	stw	r19,12(sp)
   16094:	dc800215 	stw	r18,8(sp)
   16098:	dc400115 	stw	r17,4(sp)
   1609c:	dc000015 	stw	r16,0(sp)
   160a0:	2500b804 	addi	r20,r4,736
   160a4:	a0002326 	beq	r20,zero,16134 <_fwalk_reent+0xbc>
   160a8:	282b883a 	mov	r21,r5
   160ac:	2027883a 	mov	r19,r4
   160b0:	002f883a 	mov	r23,zero
   160b4:	05800044 	movi	r22,1
   160b8:	04bfffc4 	movi	r18,-1
   160bc:	a4400117 	ldw	r17,4(r20)
   160c0:	a4000217 	ldw	r16,8(r20)
   160c4:	8c7fffc4 	addi	r17,r17,-1
   160c8:	88000c16 	blt	r17,zero,160fc <_fwalk_reent+0x84>
   160cc:	84000304 	addi	r16,r16,12
   160d0:	8080000b 	ldhu	r2,0(r16)
   160d4:	8c7fffc4 	addi	r17,r17,-1
   160d8:	817ffd04 	addi	r5,r16,-12
   160dc:	b080052e 	bgeu	r22,r2,160f4 <_fwalk_reent+0x7c>
   160e0:	8080008f 	ldh	r2,2(r16)
   160e4:	9809883a 	mov	r4,r19
   160e8:	14800226 	beq	r2,r18,160f4 <_fwalk_reent+0x7c>
   160ec:	a83ee83a 	callr	r21
   160f0:	b8aeb03a 	or	r23,r23,r2
   160f4:	84001a04 	addi	r16,r16,104
   160f8:	8cbff51e 	bne	r17,r18,160d0 <__alt_data_end+0xfc0160d0>
   160fc:	a5000017 	ldw	r20,0(r20)
   16100:	a03fee1e 	bne	r20,zero,160bc <__alt_data_end+0xfc0160bc>
   16104:	b805883a 	mov	r2,r23
   16108:	dfc00817 	ldw	ra,32(sp)
   1610c:	ddc00717 	ldw	r23,28(sp)
   16110:	dd800617 	ldw	r22,24(sp)
   16114:	dd400517 	ldw	r21,20(sp)
   16118:	dd000417 	ldw	r20,16(sp)
   1611c:	dcc00317 	ldw	r19,12(sp)
   16120:	dc800217 	ldw	r18,8(sp)
   16124:	dc400117 	ldw	r17,4(sp)
   16128:	dc000017 	ldw	r16,0(sp)
   1612c:	dec00904 	addi	sp,sp,36
   16130:	f800283a 	ret
   16134:	002f883a 	mov	r23,zero
   16138:	003ff206 	br	16104 <__alt_data_end+0xfc016104>

0001613c <_setlocale_r>:
   1613c:	30001b26 	beq	r6,zero,161ac <_setlocale_r+0x70>
   16140:	014000f4 	movhi	r5,3
   16144:	defffe04 	addi	sp,sp,-8
   16148:	29692e04 	addi	r5,r5,-23368
   1614c:	3009883a 	mov	r4,r6
   16150:	dc000015 	stw	r16,0(sp)
   16154:	dfc00115 	stw	ra,4(sp)
   16158:	3021883a 	mov	r16,r6
   1615c:	000ee700 	call	ee70 <strcmp>
   16160:	1000061e 	bne	r2,zero,1617c <_setlocale_r+0x40>
   16164:	008000f4 	movhi	r2,3
   16168:	10a90704 	addi	r2,r2,-23524
   1616c:	dfc00117 	ldw	ra,4(sp)
   16170:	dc000017 	ldw	r16,0(sp)
   16174:	dec00204 	addi	sp,sp,8
   16178:	f800283a 	ret
   1617c:	014000f4 	movhi	r5,3
   16180:	29690704 	addi	r5,r5,-23524
   16184:	8009883a 	mov	r4,r16
   16188:	000ee700 	call	ee70 <strcmp>
   1618c:	103ff526 	beq	r2,zero,16164 <__alt_data_end+0xfc016164>
   16190:	014000f4 	movhi	r5,3
   16194:	29691104 	addi	r5,r5,-23484
   16198:	8009883a 	mov	r4,r16
   1619c:	000ee700 	call	ee70 <strcmp>
   161a0:	103ff026 	beq	r2,zero,16164 <__alt_data_end+0xfc016164>
   161a4:	0005883a 	mov	r2,zero
   161a8:	003ff006 	br	1616c <__alt_data_end+0xfc01616c>
   161ac:	008000f4 	movhi	r2,3
   161b0:	10a90704 	addi	r2,r2,-23524
   161b4:	f800283a 	ret

000161b8 <__locale_charset>:
   161b8:	008000f4 	movhi	r2,3
   161bc:	10abb504 	addi	r2,r2,-20780
   161c0:	f800283a 	ret

000161c4 <__locale_mb_cur_max>:
   161c4:	008000f4 	movhi	r2,3
   161c8:	10b60d04 	addi	r2,r2,-10188
   161cc:	10800017 	ldw	r2,0(r2)
   161d0:	f800283a 	ret

000161d4 <__locale_msgcharset>:
   161d4:	008000f4 	movhi	r2,3
   161d8:	10abad04 	addi	r2,r2,-20812
   161dc:	f800283a 	ret

000161e0 <__locale_cjk_lang>:
   161e0:	0005883a 	mov	r2,zero
   161e4:	f800283a 	ret

000161e8 <_localeconv_r>:
   161e8:	008000f4 	movhi	r2,3
   161ec:	10abbd04 	addi	r2,r2,-20748
   161f0:	f800283a 	ret

000161f4 <setlocale>:
   161f4:	008000f4 	movhi	r2,3
   161f8:	10b60a04 	addi	r2,r2,-10200
   161fc:	280d883a 	mov	r6,r5
   16200:	200b883a 	mov	r5,r4
   16204:	11000017 	ldw	r4,0(r2)
   16208:	001613c1 	jmpi	1613c <_setlocale_r>

0001620c <localeconv>:
   1620c:	008000f4 	movhi	r2,3
   16210:	10abbd04 	addi	r2,r2,-20748
   16214:	f800283a 	ret

00016218 <__smakebuf_r>:
   16218:	2880030b 	ldhu	r2,12(r5)
   1621c:	10c0008c 	andi	r3,r2,2
   16220:	1800411e 	bne	r3,zero,16328 <__smakebuf_r+0x110>
   16224:	deffec04 	addi	sp,sp,-80
   16228:	dc000f15 	stw	r16,60(sp)
   1622c:	2821883a 	mov	r16,r5
   16230:	2940038f 	ldh	r5,14(r5)
   16234:	dc401015 	stw	r17,64(sp)
   16238:	dfc01315 	stw	ra,76(sp)
   1623c:	dcc01215 	stw	r19,72(sp)
   16240:	dc801115 	stw	r18,68(sp)
   16244:	2023883a 	mov	r17,r4
   16248:	28001c16 	blt	r5,zero,162bc <__smakebuf_r+0xa4>
   1624c:	d80d883a 	mov	r6,sp
   16250:	001b1a40 	call	1b1a4 <_fstat_r>
   16254:	10001816 	blt	r2,zero,162b8 <__smakebuf_r+0xa0>
   16258:	d8800117 	ldw	r2,4(sp)
   1625c:	00e00014 	movui	r3,32768
   16260:	10bc000c 	andi	r2,r2,61440
   16264:	14c80020 	cmpeqi	r19,r2,8192
   16268:	10c03726 	beq	r2,r3,16348 <__smakebuf_r+0x130>
   1626c:	80c0030b 	ldhu	r3,12(r16)
   16270:	18c20014 	ori	r3,r3,2048
   16274:	80c0030d 	sth	r3,12(r16)
   16278:	00c80004 	movi	r3,8192
   1627c:	10c0521e 	bne	r2,r3,163c8 <__smakebuf_r+0x1b0>
   16280:	8140038f 	ldh	r5,14(r16)
   16284:	8809883a 	mov	r4,r17
   16288:	001b2000 	call	1b200 <_isatty_r>
   1628c:	10004c26 	beq	r2,zero,163c0 <__smakebuf_r+0x1a8>
   16290:	8080030b 	ldhu	r2,12(r16)
   16294:	80c010c4 	addi	r3,r16,67
   16298:	80c00015 	stw	r3,0(r16)
   1629c:	10800054 	ori	r2,r2,1
   162a0:	8080030d 	sth	r2,12(r16)
   162a4:	00800044 	movi	r2,1
   162a8:	80c00415 	stw	r3,16(r16)
   162ac:	80800515 	stw	r2,20(r16)
   162b0:	04810004 	movi	r18,1024
   162b4:	00000706 	br	162d4 <__smakebuf_r+0xbc>
   162b8:	8080030b 	ldhu	r2,12(r16)
   162bc:	10c0200c 	andi	r3,r2,128
   162c0:	18001f1e 	bne	r3,zero,16340 <__smakebuf_r+0x128>
   162c4:	04810004 	movi	r18,1024
   162c8:	10820014 	ori	r2,r2,2048
   162cc:	8080030d 	sth	r2,12(r16)
   162d0:	0027883a 	mov	r19,zero
   162d4:	900b883a 	mov	r5,r18
   162d8:	8809883a 	mov	r4,r17
   162dc:	000de780 	call	de78 <_malloc_r>
   162e0:	10002c26 	beq	r2,zero,16394 <__smakebuf_r+0x17c>
   162e4:	80c0030b 	ldhu	r3,12(r16)
   162e8:	01000074 	movhi	r4,1
   162ec:	2114c404 	addi	r4,r4,21264
   162f0:	89000f15 	stw	r4,60(r17)
   162f4:	18c02014 	ori	r3,r3,128
   162f8:	80c0030d 	sth	r3,12(r16)
   162fc:	80800015 	stw	r2,0(r16)
   16300:	80800415 	stw	r2,16(r16)
   16304:	84800515 	stw	r18,20(r16)
   16308:	98001a1e 	bne	r19,zero,16374 <__smakebuf_r+0x15c>
   1630c:	dfc01317 	ldw	ra,76(sp)
   16310:	dcc01217 	ldw	r19,72(sp)
   16314:	dc801117 	ldw	r18,68(sp)
   16318:	dc401017 	ldw	r17,64(sp)
   1631c:	dc000f17 	ldw	r16,60(sp)
   16320:	dec01404 	addi	sp,sp,80
   16324:	f800283a 	ret
   16328:	288010c4 	addi	r2,r5,67
   1632c:	28800015 	stw	r2,0(r5)
   16330:	28800415 	stw	r2,16(r5)
   16334:	00800044 	movi	r2,1
   16338:	28800515 	stw	r2,20(r5)
   1633c:	f800283a 	ret
   16340:	04801004 	movi	r18,64
   16344:	003fe006 	br	162c8 <__alt_data_end+0xfc0162c8>
   16348:	81000a17 	ldw	r4,40(r16)
   1634c:	00c00074 	movhi	r3,1
   16350:	18dfb904 	addi	r3,r3,32484
   16354:	20ffc51e 	bne	r4,r3,1626c <__alt_data_end+0xfc01626c>
   16358:	8080030b 	ldhu	r2,12(r16)
   1635c:	04810004 	movi	r18,1024
   16360:	84801315 	stw	r18,76(r16)
   16364:	1484b03a 	or	r2,r2,r18
   16368:	8080030d 	sth	r2,12(r16)
   1636c:	0027883a 	mov	r19,zero
   16370:	003fd806 	br	162d4 <__alt_data_end+0xfc0162d4>
   16374:	8140038f 	ldh	r5,14(r16)
   16378:	8809883a 	mov	r4,r17
   1637c:	001b2000 	call	1b200 <_isatty_r>
   16380:	103fe226 	beq	r2,zero,1630c <__alt_data_end+0xfc01630c>
   16384:	8080030b 	ldhu	r2,12(r16)
   16388:	10800054 	ori	r2,r2,1
   1638c:	8080030d 	sth	r2,12(r16)
   16390:	003fde06 	br	1630c <__alt_data_end+0xfc01630c>
   16394:	8080030b 	ldhu	r2,12(r16)
   16398:	10c0800c 	andi	r3,r2,512
   1639c:	183fdb1e 	bne	r3,zero,1630c <__alt_data_end+0xfc01630c>
   163a0:	10800094 	ori	r2,r2,2
   163a4:	80c010c4 	addi	r3,r16,67
   163a8:	8080030d 	sth	r2,12(r16)
   163ac:	00800044 	movi	r2,1
   163b0:	80c00015 	stw	r3,0(r16)
   163b4:	80c00415 	stw	r3,16(r16)
   163b8:	80800515 	stw	r2,20(r16)
   163bc:	003fd306 	br	1630c <__alt_data_end+0xfc01630c>
   163c0:	04810004 	movi	r18,1024
   163c4:	003fc306 	br	162d4 <__alt_data_end+0xfc0162d4>
   163c8:	0027883a 	mov	r19,zero
   163cc:	04810004 	movi	r18,1024
   163d0:	003fc006 	br	162d4 <__alt_data_end+0xfc0162d4>

000163d4 <memchr>:
   163d4:	208000cc 	andi	r2,r4,3
   163d8:	280f883a 	mov	r7,r5
   163dc:	10003426 	beq	r2,zero,164b0 <memchr+0xdc>
   163e0:	30bfffc4 	addi	r2,r6,-1
   163e4:	30001a26 	beq	r6,zero,16450 <memchr+0x7c>
   163e8:	20c00003 	ldbu	r3,0(r4)
   163ec:	29803fcc 	andi	r6,r5,255
   163f0:	30c0051e 	bne	r6,r3,16408 <memchr+0x34>
   163f4:	00001806 	br	16458 <memchr+0x84>
   163f8:	10001526 	beq	r2,zero,16450 <memchr+0x7c>
   163fc:	20c00003 	ldbu	r3,0(r4)
   16400:	10bfffc4 	addi	r2,r2,-1
   16404:	30c01426 	beq	r6,r3,16458 <memchr+0x84>
   16408:	21000044 	addi	r4,r4,1
   1640c:	20c000cc 	andi	r3,r4,3
   16410:	183ff91e 	bne	r3,zero,163f8 <__alt_data_end+0xfc0163f8>
   16414:	020000c4 	movi	r8,3
   16418:	40801136 	bltu	r8,r2,16460 <memchr+0x8c>
   1641c:	10000c26 	beq	r2,zero,16450 <memchr+0x7c>
   16420:	20c00003 	ldbu	r3,0(r4)
   16424:	29403fcc 	andi	r5,r5,255
   16428:	28c00b26 	beq	r5,r3,16458 <memchr+0x84>
   1642c:	20c00044 	addi	r3,r4,1
   16430:	39803fcc 	andi	r6,r7,255
   16434:	2089883a 	add	r4,r4,r2
   16438:	00000306 	br	16448 <memchr+0x74>
   1643c:	18c00044 	addi	r3,r3,1
   16440:	197fffc3 	ldbu	r5,-1(r3)
   16444:	31400526 	beq	r6,r5,1645c <memchr+0x88>
   16448:	1805883a 	mov	r2,r3
   1644c:	20fffb1e 	bne	r4,r3,1643c <__alt_data_end+0xfc01643c>
   16450:	0005883a 	mov	r2,zero
   16454:	f800283a 	ret
   16458:	2005883a 	mov	r2,r4
   1645c:	f800283a 	ret
   16460:	28c03fcc 	andi	r3,r5,255
   16464:	1812923a 	slli	r9,r3,8
   16468:	02ffbff4 	movhi	r11,65279
   1646c:	02a02074 	movhi	r10,32897
   16470:	48d2b03a 	or	r9,r9,r3
   16474:	4806943a 	slli	r3,r9,16
   16478:	5affbfc4 	addi	r11,r11,-257
   1647c:	52a02004 	addi	r10,r10,-32640
   16480:	48d2b03a 	or	r9,r9,r3
   16484:	20c00017 	ldw	r3,0(r4)
   16488:	48c6f03a 	xor	r3,r9,r3
   1648c:	1acd883a 	add	r6,r3,r11
   16490:	00c6303a 	nor	r3,zero,r3
   16494:	30c6703a 	and	r3,r6,r3
   16498:	1a86703a 	and	r3,r3,r10
   1649c:	183fe01e 	bne	r3,zero,16420 <__alt_data_end+0xfc016420>
   164a0:	10bfff04 	addi	r2,r2,-4
   164a4:	21000104 	addi	r4,r4,4
   164a8:	40bff636 	bltu	r8,r2,16484 <__alt_data_end+0xfc016484>
   164ac:	003fdb06 	br	1641c <__alt_data_end+0xfc01641c>
   164b0:	3005883a 	mov	r2,r6
   164b4:	003fd706 	br	16414 <__alt_data_end+0xfc016414>

000164b8 <memmove>:
   164b8:	2005883a 	mov	r2,r4
   164bc:	29000b2e 	bgeu	r5,r4,164ec <memmove+0x34>
   164c0:	298f883a 	add	r7,r5,r6
   164c4:	21c0092e 	bgeu	r4,r7,164ec <memmove+0x34>
   164c8:	2187883a 	add	r3,r4,r6
   164cc:	198bc83a 	sub	r5,r3,r6
   164d0:	30004826 	beq	r6,zero,165f4 <memmove+0x13c>
   164d4:	39ffffc4 	addi	r7,r7,-1
   164d8:	39000003 	ldbu	r4,0(r7)
   164dc:	18ffffc4 	addi	r3,r3,-1
   164e0:	19000005 	stb	r4,0(r3)
   164e4:	28fffb1e 	bne	r5,r3,164d4 <__alt_data_end+0xfc0164d4>
   164e8:	f800283a 	ret
   164ec:	00c003c4 	movi	r3,15
   164f0:	1980412e 	bgeu	r3,r6,165f8 <memmove+0x140>
   164f4:	2886b03a 	or	r3,r5,r2
   164f8:	18c000cc 	andi	r3,r3,3
   164fc:	1800401e 	bne	r3,zero,16600 <memmove+0x148>
   16500:	33fffc04 	addi	r15,r6,-16
   16504:	781ed13a 	srli	r15,r15,4
   16508:	28c00104 	addi	r3,r5,4
   1650c:	13400104 	addi	r13,r2,4
   16510:	781c913a 	slli	r14,r15,4
   16514:	2b000204 	addi	r12,r5,8
   16518:	12c00204 	addi	r11,r2,8
   1651c:	73800504 	addi	r14,r14,20
   16520:	2a800304 	addi	r10,r5,12
   16524:	12400304 	addi	r9,r2,12
   16528:	2b9d883a 	add	r14,r5,r14
   1652c:	2811883a 	mov	r8,r5
   16530:	100f883a 	mov	r7,r2
   16534:	41000017 	ldw	r4,0(r8)
   16538:	39c00404 	addi	r7,r7,16
   1653c:	18c00404 	addi	r3,r3,16
   16540:	393ffc15 	stw	r4,-16(r7)
   16544:	193ffc17 	ldw	r4,-16(r3)
   16548:	6b400404 	addi	r13,r13,16
   1654c:	5ac00404 	addi	r11,r11,16
   16550:	693ffc15 	stw	r4,-16(r13)
   16554:	61000017 	ldw	r4,0(r12)
   16558:	4a400404 	addi	r9,r9,16
   1655c:	42000404 	addi	r8,r8,16
   16560:	593ffc15 	stw	r4,-16(r11)
   16564:	51000017 	ldw	r4,0(r10)
   16568:	63000404 	addi	r12,r12,16
   1656c:	52800404 	addi	r10,r10,16
   16570:	493ffc15 	stw	r4,-16(r9)
   16574:	1bbfef1e 	bne	r3,r14,16534 <__alt_data_end+0xfc016534>
   16578:	79000044 	addi	r4,r15,1
   1657c:	2008913a 	slli	r4,r4,4
   16580:	328003cc 	andi	r10,r6,15
   16584:	02c000c4 	movi	r11,3
   16588:	1107883a 	add	r3,r2,r4
   1658c:	290b883a 	add	r5,r5,r4
   16590:	5a801e2e 	bgeu	r11,r10,1660c <memmove+0x154>
   16594:	1813883a 	mov	r9,r3
   16598:	2811883a 	mov	r8,r5
   1659c:	500f883a 	mov	r7,r10
   165a0:	41000017 	ldw	r4,0(r8)
   165a4:	4a400104 	addi	r9,r9,4
   165a8:	39ffff04 	addi	r7,r7,-4
   165ac:	493fff15 	stw	r4,-4(r9)
   165b0:	42000104 	addi	r8,r8,4
   165b4:	59fffa36 	bltu	r11,r7,165a0 <__alt_data_end+0xfc0165a0>
   165b8:	513fff04 	addi	r4,r10,-4
   165bc:	2008d0ba 	srli	r4,r4,2
   165c0:	318000cc 	andi	r6,r6,3
   165c4:	21000044 	addi	r4,r4,1
   165c8:	2109883a 	add	r4,r4,r4
   165cc:	2109883a 	add	r4,r4,r4
   165d0:	1907883a 	add	r3,r3,r4
   165d4:	290b883a 	add	r5,r5,r4
   165d8:	30000b26 	beq	r6,zero,16608 <memmove+0x150>
   165dc:	198d883a 	add	r6,r3,r6
   165e0:	29c00003 	ldbu	r7,0(r5)
   165e4:	18c00044 	addi	r3,r3,1
   165e8:	29400044 	addi	r5,r5,1
   165ec:	19ffffc5 	stb	r7,-1(r3)
   165f0:	19bffb1e 	bne	r3,r6,165e0 <__alt_data_end+0xfc0165e0>
   165f4:	f800283a 	ret
   165f8:	1007883a 	mov	r3,r2
   165fc:	003ff606 	br	165d8 <__alt_data_end+0xfc0165d8>
   16600:	1007883a 	mov	r3,r2
   16604:	003ff506 	br	165dc <__alt_data_end+0xfc0165dc>
   16608:	f800283a 	ret
   1660c:	500d883a 	mov	r6,r10
   16610:	003ff106 	br	165d8 <__alt_data_end+0xfc0165d8>

00016614 <_Balloc>:
   16614:	20801317 	ldw	r2,76(r4)
   16618:	defffc04 	addi	sp,sp,-16
   1661c:	dc400115 	stw	r17,4(sp)
   16620:	dc000015 	stw	r16,0(sp)
   16624:	dfc00315 	stw	ra,12(sp)
   16628:	dc800215 	stw	r18,8(sp)
   1662c:	2023883a 	mov	r17,r4
   16630:	2821883a 	mov	r16,r5
   16634:	10000f26 	beq	r2,zero,16674 <_Balloc+0x60>
   16638:	8407883a 	add	r3,r16,r16
   1663c:	18c7883a 	add	r3,r3,r3
   16640:	10c7883a 	add	r3,r2,r3
   16644:	18800017 	ldw	r2,0(r3)
   16648:	10001126 	beq	r2,zero,16690 <_Balloc+0x7c>
   1664c:	11000017 	ldw	r4,0(r2)
   16650:	19000015 	stw	r4,0(r3)
   16654:	10000415 	stw	zero,16(r2)
   16658:	10000315 	stw	zero,12(r2)
   1665c:	dfc00317 	ldw	ra,12(sp)
   16660:	dc800217 	ldw	r18,8(sp)
   16664:	dc400117 	ldw	r17,4(sp)
   16668:	dc000017 	ldw	r16,0(sp)
   1666c:	dec00404 	addi	sp,sp,16
   16670:	f800283a 	ret
   16674:	01800844 	movi	r6,33
   16678:	01400104 	movi	r5,4
   1667c:	001adbc0 	call	1adbc <_calloc_r>
   16680:	88801315 	stw	r2,76(r17)
   16684:	103fec1e 	bne	r2,zero,16638 <__alt_data_end+0xfc016638>
   16688:	0005883a 	mov	r2,zero
   1668c:	003ff306 	br	1665c <__alt_data_end+0xfc01665c>
   16690:	01400044 	movi	r5,1
   16694:	2c24983a 	sll	r18,r5,r16
   16698:	8809883a 	mov	r4,r17
   1669c:	91800144 	addi	r6,r18,5
   166a0:	318d883a 	add	r6,r6,r6
   166a4:	318d883a 	add	r6,r6,r6
   166a8:	001adbc0 	call	1adbc <_calloc_r>
   166ac:	103ff626 	beq	r2,zero,16688 <__alt_data_end+0xfc016688>
   166b0:	14000115 	stw	r16,4(r2)
   166b4:	14800215 	stw	r18,8(r2)
   166b8:	003fe606 	br	16654 <__alt_data_end+0xfc016654>

000166bc <_Bfree>:
   166bc:	28000826 	beq	r5,zero,166e0 <_Bfree+0x24>
   166c0:	28c00117 	ldw	r3,4(r5)
   166c4:	20801317 	ldw	r2,76(r4)
   166c8:	18c7883a 	add	r3,r3,r3
   166cc:	18c7883a 	add	r3,r3,r3
   166d0:	10c5883a 	add	r2,r2,r3
   166d4:	10c00017 	ldw	r3,0(r2)
   166d8:	28c00015 	stw	r3,0(r5)
   166dc:	11400015 	stw	r5,0(r2)
   166e0:	f800283a 	ret

000166e4 <__multadd>:
   166e4:	defff704 	addi	sp,sp,-36
   166e8:	dc800215 	stw	r18,8(sp)
   166ec:	2c800417 	ldw	r18,16(r5)
   166f0:	dd800615 	stw	r22,24(sp)
   166f4:	dd400515 	stw	r21,20(sp)
   166f8:	dd000415 	stw	r20,16(sp)
   166fc:	dcc00315 	stw	r19,12(sp)
   16700:	dc400115 	stw	r17,4(sp)
   16704:	dc000015 	stw	r16,0(sp)
   16708:	dfc00815 	stw	ra,32(sp)
   1670c:	ddc00715 	stw	r23,28(sp)
   16710:	2827883a 	mov	r19,r5
   16714:	2029883a 	mov	r20,r4
   16718:	3023883a 	mov	r17,r6
   1671c:	3821883a 	mov	r16,r7
   16720:	2d400504 	addi	r21,r5,20
   16724:	002d883a 	mov	r22,zero
   16728:	adc00017 	ldw	r23,0(r21)
   1672c:	880b883a 	mov	r5,r17
   16730:	ad400104 	addi	r21,r21,4
   16734:	b93fffcc 	andi	r4,r23,65535
   16738:	000ce000 	call	ce00 <__mulsi3>
   1673c:	b808d43a 	srli	r4,r23,16
   16740:	880b883a 	mov	r5,r17
   16744:	1421883a 	add	r16,r2,r16
   16748:	000ce000 	call	ce00 <__mulsi3>
   1674c:	800ed43a 	srli	r7,r16,16
   16750:	80ffffcc 	andi	r3,r16,65535
   16754:	b5800044 	addi	r22,r22,1
   16758:	11c5883a 	add	r2,r2,r7
   1675c:	100e943a 	slli	r7,r2,16
   16760:	1020d43a 	srli	r16,r2,16
   16764:	38c7883a 	add	r3,r7,r3
   16768:	a8ffff15 	stw	r3,-4(r21)
   1676c:	b4bfee16 	blt	r22,r18,16728 <__alt_data_end+0xfc016728>
   16770:	80000926 	beq	r16,zero,16798 <__multadd+0xb4>
   16774:	98800217 	ldw	r2,8(r19)
   16778:	9080130e 	bge	r18,r2,167c8 <__multadd+0xe4>
   1677c:	90800144 	addi	r2,r18,5
   16780:	1085883a 	add	r2,r2,r2
   16784:	1085883a 	add	r2,r2,r2
   16788:	9885883a 	add	r2,r19,r2
   1678c:	14000015 	stw	r16,0(r2)
   16790:	94800044 	addi	r18,r18,1
   16794:	9c800415 	stw	r18,16(r19)
   16798:	9805883a 	mov	r2,r19
   1679c:	dfc00817 	ldw	ra,32(sp)
   167a0:	ddc00717 	ldw	r23,28(sp)
   167a4:	dd800617 	ldw	r22,24(sp)
   167a8:	dd400517 	ldw	r21,20(sp)
   167ac:	dd000417 	ldw	r20,16(sp)
   167b0:	dcc00317 	ldw	r19,12(sp)
   167b4:	dc800217 	ldw	r18,8(sp)
   167b8:	dc400117 	ldw	r17,4(sp)
   167bc:	dc000017 	ldw	r16,0(sp)
   167c0:	dec00904 	addi	sp,sp,36
   167c4:	f800283a 	ret
   167c8:	99400117 	ldw	r5,4(r19)
   167cc:	a009883a 	mov	r4,r20
   167d0:	29400044 	addi	r5,r5,1
   167d4:	00166140 	call	16614 <_Balloc>
   167d8:	99800417 	ldw	r6,16(r19)
   167dc:	99400304 	addi	r5,r19,12
   167e0:	11000304 	addi	r4,r2,12
   167e4:	31800084 	addi	r6,r6,2
   167e8:	318d883a 	add	r6,r6,r6
   167ec:	318d883a 	add	r6,r6,r6
   167f0:	1023883a 	mov	r17,r2
   167f4:	000e6840 	call	e684 <memcpy>
   167f8:	98000a26 	beq	r19,zero,16824 <__multadd+0x140>
   167fc:	98c00117 	ldw	r3,4(r19)
   16800:	a0801317 	ldw	r2,76(r20)
   16804:	18c7883a 	add	r3,r3,r3
   16808:	18c7883a 	add	r3,r3,r3
   1680c:	10c5883a 	add	r2,r2,r3
   16810:	10c00017 	ldw	r3,0(r2)
   16814:	98c00015 	stw	r3,0(r19)
   16818:	14c00015 	stw	r19,0(r2)
   1681c:	8827883a 	mov	r19,r17
   16820:	003fd606 	br	1677c <__alt_data_end+0xfc01677c>
   16824:	8827883a 	mov	r19,r17
   16828:	003fd406 	br	1677c <__alt_data_end+0xfc01677c>

0001682c <__s2b>:
   1682c:	defff904 	addi	sp,sp,-28
   16830:	dc400115 	stw	r17,4(sp)
   16834:	dc000015 	stw	r16,0(sp)
   16838:	2023883a 	mov	r17,r4
   1683c:	2821883a 	mov	r16,r5
   16840:	39000204 	addi	r4,r7,8
   16844:	01400244 	movi	r5,9
   16848:	dcc00315 	stw	r19,12(sp)
   1684c:	dc800215 	stw	r18,8(sp)
   16850:	dfc00615 	stw	ra,24(sp)
   16854:	dd400515 	stw	r21,20(sp)
   16858:	dd000415 	stw	r20,16(sp)
   1685c:	3825883a 	mov	r18,r7
   16860:	3027883a 	mov	r19,r6
   16864:	000cc4c0 	call	cc4c <__divsi3>
   16868:	00c00044 	movi	r3,1
   1686c:	000b883a 	mov	r5,zero
   16870:	1880030e 	bge	r3,r2,16880 <__s2b+0x54>
   16874:	18c7883a 	add	r3,r3,r3
   16878:	29400044 	addi	r5,r5,1
   1687c:	18bffd16 	blt	r3,r2,16874 <__alt_data_end+0xfc016874>
   16880:	8809883a 	mov	r4,r17
   16884:	00166140 	call	16614 <_Balloc>
   16888:	d8c00717 	ldw	r3,28(sp)
   1688c:	10c00515 	stw	r3,20(r2)
   16890:	00c00044 	movi	r3,1
   16894:	10c00415 	stw	r3,16(r2)
   16898:	00c00244 	movi	r3,9
   1689c:	1cc0210e 	bge	r3,r19,16924 <__s2b+0xf8>
   168a0:	80eb883a 	add	r21,r16,r3
   168a4:	a829883a 	mov	r20,r21
   168a8:	84e1883a 	add	r16,r16,r19
   168ac:	a1c00007 	ldb	r7,0(r20)
   168b0:	01800284 	movi	r6,10
   168b4:	a5000044 	addi	r20,r20,1
   168b8:	100b883a 	mov	r5,r2
   168bc:	39fff404 	addi	r7,r7,-48
   168c0:	8809883a 	mov	r4,r17
   168c4:	00166e40 	call	166e4 <__multadd>
   168c8:	a43ff81e 	bne	r20,r16,168ac <__alt_data_end+0xfc0168ac>
   168cc:	ace1883a 	add	r16,r21,r19
   168d0:	843ffe04 	addi	r16,r16,-8
   168d4:	9c800a0e 	bge	r19,r18,16900 <__s2b+0xd4>
   168d8:	94e5c83a 	sub	r18,r18,r19
   168dc:	84a5883a 	add	r18,r16,r18
   168e0:	81c00007 	ldb	r7,0(r16)
   168e4:	01800284 	movi	r6,10
   168e8:	84000044 	addi	r16,r16,1
   168ec:	100b883a 	mov	r5,r2
   168f0:	39fff404 	addi	r7,r7,-48
   168f4:	8809883a 	mov	r4,r17
   168f8:	00166e40 	call	166e4 <__multadd>
   168fc:	84bff81e 	bne	r16,r18,168e0 <__alt_data_end+0xfc0168e0>
   16900:	dfc00617 	ldw	ra,24(sp)
   16904:	dd400517 	ldw	r21,20(sp)
   16908:	dd000417 	ldw	r20,16(sp)
   1690c:	dcc00317 	ldw	r19,12(sp)
   16910:	dc800217 	ldw	r18,8(sp)
   16914:	dc400117 	ldw	r17,4(sp)
   16918:	dc000017 	ldw	r16,0(sp)
   1691c:	dec00704 	addi	sp,sp,28
   16920:	f800283a 	ret
   16924:	84000284 	addi	r16,r16,10
   16928:	1827883a 	mov	r19,r3
   1692c:	003fe906 	br	168d4 <__alt_data_end+0xfc0168d4>

00016930 <__hi0bits>:
   16930:	20bfffec 	andhi	r2,r4,65535
   16934:	1000141e 	bne	r2,zero,16988 <__hi0bits+0x58>
   16938:	2008943a 	slli	r4,r4,16
   1693c:	00800404 	movi	r2,16
   16940:	20ffc02c 	andhi	r3,r4,65280
   16944:	1800021e 	bne	r3,zero,16950 <__hi0bits+0x20>
   16948:	2008923a 	slli	r4,r4,8
   1694c:	10800204 	addi	r2,r2,8
   16950:	20fc002c 	andhi	r3,r4,61440
   16954:	1800021e 	bne	r3,zero,16960 <__hi0bits+0x30>
   16958:	2008913a 	slli	r4,r4,4
   1695c:	10800104 	addi	r2,r2,4
   16960:	20f0002c 	andhi	r3,r4,49152
   16964:	1800031e 	bne	r3,zero,16974 <__hi0bits+0x44>
   16968:	2109883a 	add	r4,r4,r4
   1696c:	10800084 	addi	r2,r2,2
   16970:	2109883a 	add	r4,r4,r4
   16974:	20000316 	blt	r4,zero,16984 <__hi0bits+0x54>
   16978:	2110002c 	andhi	r4,r4,16384
   1697c:	2000041e 	bne	r4,zero,16990 <__hi0bits+0x60>
   16980:	00800804 	movi	r2,32
   16984:	f800283a 	ret
   16988:	0005883a 	mov	r2,zero
   1698c:	003fec06 	br	16940 <__alt_data_end+0xfc016940>
   16990:	10800044 	addi	r2,r2,1
   16994:	f800283a 	ret

00016998 <__lo0bits>:
   16998:	20c00017 	ldw	r3,0(r4)
   1699c:	188001cc 	andi	r2,r3,7
   169a0:	10000826 	beq	r2,zero,169c4 <__lo0bits+0x2c>
   169a4:	1880004c 	andi	r2,r3,1
   169a8:	1000211e 	bne	r2,zero,16a30 <__lo0bits+0x98>
   169ac:	1880008c 	andi	r2,r3,2
   169b0:	1000211e 	bne	r2,zero,16a38 <__lo0bits+0xa0>
   169b4:	1806d0ba 	srli	r3,r3,2
   169b8:	00800084 	movi	r2,2
   169bc:	20c00015 	stw	r3,0(r4)
   169c0:	f800283a 	ret
   169c4:	18bfffcc 	andi	r2,r3,65535
   169c8:	10001326 	beq	r2,zero,16a18 <__lo0bits+0x80>
   169cc:	0005883a 	mov	r2,zero
   169d0:	19403fcc 	andi	r5,r3,255
   169d4:	2800021e 	bne	r5,zero,169e0 <__lo0bits+0x48>
   169d8:	1806d23a 	srli	r3,r3,8
   169dc:	10800204 	addi	r2,r2,8
   169e0:	194003cc 	andi	r5,r3,15
   169e4:	2800021e 	bne	r5,zero,169f0 <__lo0bits+0x58>
   169e8:	1806d13a 	srli	r3,r3,4
   169ec:	10800104 	addi	r2,r2,4
   169f0:	194000cc 	andi	r5,r3,3
   169f4:	2800021e 	bne	r5,zero,16a00 <__lo0bits+0x68>
   169f8:	1806d0ba 	srli	r3,r3,2
   169fc:	10800084 	addi	r2,r2,2
   16a00:	1940004c 	andi	r5,r3,1
   16a04:	2800081e 	bne	r5,zero,16a28 <__lo0bits+0x90>
   16a08:	1806d07a 	srli	r3,r3,1
   16a0c:	1800051e 	bne	r3,zero,16a24 <__lo0bits+0x8c>
   16a10:	00800804 	movi	r2,32
   16a14:	f800283a 	ret
   16a18:	1806d43a 	srli	r3,r3,16
   16a1c:	00800404 	movi	r2,16
   16a20:	003feb06 	br	169d0 <__alt_data_end+0xfc0169d0>
   16a24:	10800044 	addi	r2,r2,1
   16a28:	20c00015 	stw	r3,0(r4)
   16a2c:	f800283a 	ret
   16a30:	0005883a 	mov	r2,zero
   16a34:	f800283a 	ret
   16a38:	1806d07a 	srli	r3,r3,1
   16a3c:	00800044 	movi	r2,1
   16a40:	20c00015 	stw	r3,0(r4)
   16a44:	f800283a 	ret

00016a48 <__i2b>:
   16a48:	defffd04 	addi	sp,sp,-12
   16a4c:	dc000015 	stw	r16,0(sp)
   16a50:	04000044 	movi	r16,1
   16a54:	dc400115 	stw	r17,4(sp)
   16a58:	2823883a 	mov	r17,r5
   16a5c:	800b883a 	mov	r5,r16
   16a60:	dfc00215 	stw	ra,8(sp)
   16a64:	00166140 	call	16614 <_Balloc>
   16a68:	14400515 	stw	r17,20(r2)
   16a6c:	14000415 	stw	r16,16(r2)
   16a70:	dfc00217 	ldw	ra,8(sp)
   16a74:	dc400117 	ldw	r17,4(sp)
   16a78:	dc000017 	ldw	r16,0(sp)
   16a7c:	dec00304 	addi	sp,sp,12
   16a80:	f800283a 	ret

00016a84 <__multiply>:
   16a84:	deffef04 	addi	sp,sp,-68
   16a88:	dc400815 	stw	r17,32(sp)
   16a8c:	dc000715 	stw	r16,28(sp)
   16a90:	34400417 	ldw	r17,16(r6)
   16a94:	2c000417 	ldw	r16,16(r5)
   16a98:	dd800d15 	stw	r22,52(sp)
   16a9c:	dc800915 	stw	r18,36(sp)
   16aa0:	dfc01015 	stw	ra,64(sp)
   16aa4:	df000f15 	stw	fp,60(sp)
   16aa8:	ddc00e15 	stw	r23,56(sp)
   16aac:	dd400c15 	stw	r21,48(sp)
   16ab0:	dd000b15 	stw	r20,44(sp)
   16ab4:	dcc00a15 	stw	r19,40(sp)
   16ab8:	2825883a 	mov	r18,r5
   16abc:	302d883a 	mov	r22,r6
   16ac0:	8440050e 	bge	r16,r17,16ad8 <__multiply+0x54>
   16ac4:	8007883a 	mov	r3,r16
   16ac8:	3025883a 	mov	r18,r6
   16acc:	8821883a 	mov	r16,r17
   16ad0:	282d883a 	mov	r22,r5
   16ad4:	1823883a 	mov	r17,r3
   16ad8:	90800217 	ldw	r2,8(r18)
   16adc:	8447883a 	add	r3,r16,r17
   16ae0:	d8c00215 	stw	r3,8(sp)
   16ae4:	91400117 	ldw	r5,4(r18)
   16ae8:	10c0010e 	bge	r2,r3,16af0 <__multiply+0x6c>
   16aec:	29400044 	addi	r5,r5,1
   16af0:	00166140 	call	16614 <_Balloc>
   16af4:	d8c00217 	ldw	r3,8(sp)
   16af8:	d8800615 	stw	r2,24(sp)
   16afc:	18eb883a 	add	r21,r3,r3
   16b00:	ad6b883a 	add	r21,r21,r21
   16b04:	10c00504 	addi	r3,r2,20
   16b08:	1d6b883a 	add	r21,r3,r21
   16b0c:	d8c00115 	stw	r3,4(sp)
   16b10:	dd400315 	stw	r21,12(sp)
   16b14:	1805883a 	mov	r2,r3
   16b18:	1d40042e 	bgeu	r3,r21,16b2c <__multiply+0xa8>
   16b1c:	d8c00317 	ldw	r3,12(sp)
   16b20:	10000015 	stw	zero,0(r2)
   16b24:	10800104 	addi	r2,r2,4
   16b28:	10fffc36 	bltu	r2,r3,16b1c <__alt_data_end+0xfc016b1c>
   16b2c:	8c63883a 	add	r17,r17,r17
   16b30:	b5800504 	addi	r22,r22,20
   16b34:	8c63883a 	add	r17,r17,r17
   16b38:	94800504 	addi	r18,r18,20
   16b3c:	8421883a 	add	r16,r16,r16
   16b40:	b463883a 	add	r17,r22,r17
   16b44:	8421883a 	add	r16,r16,r16
   16b48:	dd800015 	stw	r22,0(sp)
   16b4c:	dc800415 	stw	r18,16(sp)
   16b50:	dc400515 	stw	r17,20(sp)
   16b54:	9429883a 	add	r20,r18,r16
   16b58:	b4404f2e 	bgeu	r22,r17,16c98 <__multiply+0x214>
   16b5c:	d8c00017 	ldw	r3,0(sp)
   16b60:	1c800017 	ldw	r18,0(r3)
   16b64:	947fffcc 	andi	r17,r18,65535
   16b68:	88001e26 	beq	r17,zero,16be4 <__multiply+0x160>
   16b6c:	dd800117 	ldw	r22,4(sp)
   16b70:	dd400417 	ldw	r21,16(sp)
   16b74:	0027883a 	mov	r19,zero
   16b78:	ac800017 	ldw	r18,0(r21)
   16b7c:	b4000017 	ldw	r16,0(r22)
   16b80:	880b883a 	mov	r5,r17
   16b84:	913fffcc 	andi	r4,r18,65535
   16b88:	000ce000 	call	ce00 <__mulsi3>
   16b8c:	9008d43a 	srli	r4,r18,16
   16b90:	84bfffcc 	andi	r18,r16,65535
   16b94:	1485883a 	add	r2,r2,r18
   16b98:	14e5883a 	add	r18,r2,r19
   16b9c:	8020d43a 	srli	r16,r16,16
   16ba0:	9026d43a 	srli	r19,r18,16
   16ba4:	880b883a 	mov	r5,r17
   16ba8:	000ce000 	call	ce00 <__mulsi3>
   16bac:	1405883a 	add	r2,r2,r16
   16bb0:	14e1883a 	add	r16,r2,r19
   16bb4:	90ffffcc 	andi	r3,r18,65535
   16bb8:	8024943a 	slli	r18,r16,16
   16bbc:	ad400104 	addi	r21,r21,4
   16bc0:	b005883a 	mov	r2,r22
   16bc4:	90c6b03a 	or	r3,r18,r3
   16bc8:	b0c00015 	stw	r3,0(r22)
   16bcc:	8026d43a 	srli	r19,r16,16
   16bd0:	b5800104 	addi	r22,r22,4
   16bd4:	ad3fe836 	bltu	r21,r20,16b78 <__alt_data_end+0xfc016b78>
   16bd8:	d8c00017 	ldw	r3,0(sp)
   16bdc:	14c00115 	stw	r19,4(r2)
   16be0:	1c800017 	ldw	r18,0(r3)
   16be4:	9024d43a 	srli	r18,r18,16
   16be8:	90002226 	beq	r18,zero,16c74 <__multiply+0x1f0>
   16bec:	d8c00117 	ldw	r3,4(sp)
   16bf0:	dd800417 	ldw	r22,16(sp)
   16bf4:	002f883a 	mov	r23,zero
   16bf8:	1f000017 	ldw	fp,0(r3)
   16bfc:	1823883a 	mov	r17,r3
   16c00:	182b883a 	mov	r21,r3
   16c04:	e021883a 	mov	r16,fp
   16c08:	00000106 	br	16c10 <__multiply+0x18c>
   16c0c:	982b883a 	mov	r21,r19
   16c10:	b100000b 	ldhu	r4,0(r22)
   16c14:	8020d43a 	srli	r16,r16,16
   16c18:	900b883a 	mov	r5,r18
   16c1c:	000ce000 	call	ce00 <__mulsi3>
   16c20:	1405883a 	add	r2,r2,r16
   16c24:	15ef883a 	add	r23,r2,r23
   16c28:	b804943a 	slli	r2,r23,16
   16c2c:	e0ffffcc 	andi	r3,fp,65535
   16c30:	8c400104 	addi	r17,r17,4
   16c34:	10c6b03a 	or	r3,r2,r3
   16c38:	88ffff15 	stw	r3,-4(r17)
   16c3c:	b5800104 	addi	r22,r22,4
   16c40:	b13fff17 	ldw	r4,-4(r22)
   16c44:	acc00104 	addi	r19,r21,4
   16c48:	900b883a 	mov	r5,r18
   16c4c:	2008d43a 	srli	r4,r4,16
   16c50:	9c000017 	ldw	r16,0(r19)
   16c54:	000ce000 	call	ce00 <__mulsi3>
   16c58:	b806d43a 	srli	r3,r23,16
   16c5c:	813fffcc 	andi	r4,r16,65535
   16c60:	1105883a 	add	r2,r2,r4
   16c64:	10f9883a 	add	fp,r2,r3
   16c68:	e02ed43a 	srli	r23,fp,16
   16c6c:	b53fe736 	bltu	r22,r20,16c0c <__alt_data_end+0xfc016c0c>
   16c70:	af000115 	stw	fp,4(r21)
   16c74:	d8c00017 	ldw	r3,0(sp)
   16c78:	d9000517 	ldw	r4,20(sp)
   16c7c:	18c00104 	addi	r3,r3,4
   16c80:	d8c00015 	stw	r3,0(sp)
   16c84:	d8c00117 	ldw	r3,4(sp)
   16c88:	18c00104 	addi	r3,r3,4
   16c8c:	d8c00115 	stw	r3,4(sp)
   16c90:	d8c00017 	ldw	r3,0(sp)
   16c94:	193fb136 	bltu	r3,r4,16b5c <__alt_data_end+0xfc016b5c>
   16c98:	d8c00217 	ldw	r3,8(sp)
   16c9c:	00c00c0e 	bge	zero,r3,16cd0 <__multiply+0x24c>
   16ca0:	d8c00317 	ldw	r3,12(sp)
   16ca4:	18bfff17 	ldw	r2,-4(r3)
   16ca8:	1d7fff04 	addi	r21,r3,-4
   16cac:	10000326 	beq	r2,zero,16cbc <__multiply+0x238>
   16cb0:	00000706 	br	16cd0 <__multiply+0x24c>
   16cb4:	a8800017 	ldw	r2,0(r21)
   16cb8:	1000051e 	bne	r2,zero,16cd0 <__multiply+0x24c>
   16cbc:	d8c00217 	ldw	r3,8(sp)
   16cc0:	ad7fff04 	addi	r21,r21,-4
   16cc4:	18ffffc4 	addi	r3,r3,-1
   16cc8:	d8c00215 	stw	r3,8(sp)
   16ccc:	183ff91e 	bne	r3,zero,16cb4 <__alt_data_end+0xfc016cb4>
   16cd0:	d8c00617 	ldw	r3,24(sp)
   16cd4:	d9000217 	ldw	r4,8(sp)
   16cd8:	1805883a 	mov	r2,r3
   16cdc:	19000415 	stw	r4,16(r3)
   16ce0:	dfc01017 	ldw	ra,64(sp)
   16ce4:	df000f17 	ldw	fp,60(sp)
   16ce8:	ddc00e17 	ldw	r23,56(sp)
   16cec:	dd800d17 	ldw	r22,52(sp)
   16cf0:	dd400c17 	ldw	r21,48(sp)
   16cf4:	dd000b17 	ldw	r20,44(sp)
   16cf8:	dcc00a17 	ldw	r19,40(sp)
   16cfc:	dc800917 	ldw	r18,36(sp)
   16d00:	dc400817 	ldw	r17,32(sp)
   16d04:	dc000717 	ldw	r16,28(sp)
   16d08:	dec01104 	addi	sp,sp,68
   16d0c:	f800283a 	ret

00016d10 <__pow5mult>:
   16d10:	defffa04 	addi	sp,sp,-24
   16d14:	dcc00315 	stw	r19,12(sp)
   16d18:	dc000015 	stw	r16,0(sp)
   16d1c:	dfc00515 	stw	ra,20(sp)
   16d20:	dd000415 	stw	r20,16(sp)
   16d24:	dc800215 	stw	r18,8(sp)
   16d28:	dc400115 	stw	r17,4(sp)
   16d2c:	308000cc 	andi	r2,r6,3
   16d30:	3021883a 	mov	r16,r6
   16d34:	2027883a 	mov	r19,r4
   16d38:	10002f1e 	bne	r2,zero,16df8 <__pow5mult+0xe8>
   16d3c:	2825883a 	mov	r18,r5
   16d40:	8021d0ba 	srai	r16,r16,2
   16d44:	80001a26 	beq	r16,zero,16db0 <__pow5mult+0xa0>
   16d48:	9c401217 	ldw	r17,72(r19)
   16d4c:	8800061e 	bne	r17,zero,16d68 <__pow5mult+0x58>
   16d50:	00003406 	br	16e24 <__pow5mult+0x114>
   16d54:	8021d07a 	srai	r16,r16,1
   16d58:	80001526 	beq	r16,zero,16db0 <__pow5mult+0xa0>
   16d5c:	88800017 	ldw	r2,0(r17)
   16d60:	10001c26 	beq	r2,zero,16dd4 <__pow5mult+0xc4>
   16d64:	1023883a 	mov	r17,r2
   16d68:	8080004c 	andi	r2,r16,1
   16d6c:	103ff926 	beq	r2,zero,16d54 <__alt_data_end+0xfc016d54>
   16d70:	880d883a 	mov	r6,r17
   16d74:	900b883a 	mov	r5,r18
   16d78:	9809883a 	mov	r4,r19
   16d7c:	0016a840 	call	16a84 <__multiply>
   16d80:	90001b26 	beq	r18,zero,16df0 <__pow5mult+0xe0>
   16d84:	91000117 	ldw	r4,4(r18)
   16d88:	98c01317 	ldw	r3,76(r19)
   16d8c:	8021d07a 	srai	r16,r16,1
   16d90:	2109883a 	add	r4,r4,r4
   16d94:	2109883a 	add	r4,r4,r4
   16d98:	1907883a 	add	r3,r3,r4
   16d9c:	19000017 	ldw	r4,0(r3)
   16da0:	91000015 	stw	r4,0(r18)
   16da4:	1c800015 	stw	r18,0(r3)
   16da8:	1025883a 	mov	r18,r2
   16dac:	803feb1e 	bne	r16,zero,16d5c <__alt_data_end+0xfc016d5c>
   16db0:	9005883a 	mov	r2,r18
   16db4:	dfc00517 	ldw	ra,20(sp)
   16db8:	dd000417 	ldw	r20,16(sp)
   16dbc:	dcc00317 	ldw	r19,12(sp)
   16dc0:	dc800217 	ldw	r18,8(sp)
   16dc4:	dc400117 	ldw	r17,4(sp)
   16dc8:	dc000017 	ldw	r16,0(sp)
   16dcc:	dec00604 	addi	sp,sp,24
   16dd0:	f800283a 	ret
   16dd4:	880d883a 	mov	r6,r17
   16dd8:	880b883a 	mov	r5,r17
   16ddc:	9809883a 	mov	r4,r19
   16de0:	0016a840 	call	16a84 <__multiply>
   16de4:	88800015 	stw	r2,0(r17)
   16de8:	10000015 	stw	zero,0(r2)
   16dec:	003fdd06 	br	16d64 <__alt_data_end+0xfc016d64>
   16df0:	1025883a 	mov	r18,r2
   16df4:	003fd706 	br	16d54 <__alt_data_end+0xfc016d54>
   16df8:	10bfffc4 	addi	r2,r2,-1
   16dfc:	1085883a 	add	r2,r2,r2
   16e00:	00c000f4 	movhi	r3,3
   16e04:	18e93104 	addi	r3,r3,-23356
   16e08:	1085883a 	add	r2,r2,r2
   16e0c:	1885883a 	add	r2,r3,r2
   16e10:	11800017 	ldw	r6,0(r2)
   16e14:	000f883a 	mov	r7,zero
   16e18:	00166e40 	call	166e4 <__multadd>
   16e1c:	1025883a 	mov	r18,r2
   16e20:	003fc706 	br	16d40 <__alt_data_end+0xfc016d40>
   16e24:	05000044 	movi	r20,1
   16e28:	a00b883a 	mov	r5,r20
   16e2c:	9809883a 	mov	r4,r19
   16e30:	00166140 	call	16614 <_Balloc>
   16e34:	1023883a 	mov	r17,r2
   16e38:	00809c44 	movi	r2,625
   16e3c:	88800515 	stw	r2,20(r17)
   16e40:	8d000415 	stw	r20,16(r17)
   16e44:	9c401215 	stw	r17,72(r19)
   16e48:	88000015 	stw	zero,0(r17)
   16e4c:	003fc606 	br	16d68 <__alt_data_end+0xfc016d68>

00016e50 <__lshift>:
   16e50:	defff904 	addi	sp,sp,-28
   16e54:	dd400515 	stw	r21,20(sp)
   16e58:	dcc00315 	stw	r19,12(sp)
   16e5c:	302bd17a 	srai	r21,r6,5
   16e60:	2cc00417 	ldw	r19,16(r5)
   16e64:	28800217 	ldw	r2,8(r5)
   16e68:	dd000415 	stw	r20,16(sp)
   16e6c:	ace7883a 	add	r19,r21,r19
   16e70:	dc800215 	stw	r18,8(sp)
   16e74:	dc400115 	stw	r17,4(sp)
   16e78:	dc000015 	stw	r16,0(sp)
   16e7c:	dfc00615 	stw	ra,24(sp)
   16e80:	9c000044 	addi	r16,r19,1
   16e84:	2823883a 	mov	r17,r5
   16e88:	3029883a 	mov	r20,r6
   16e8c:	2025883a 	mov	r18,r4
   16e90:	29400117 	ldw	r5,4(r5)
   16e94:	1400030e 	bge	r2,r16,16ea4 <__lshift+0x54>
   16e98:	1085883a 	add	r2,r2,r2
   16e9c:	29400044 	addi	r5,r5,1
   16ea0:	143ffd16 	blt	r2,r16,16e98 <__alt_data_end+0xfc016e98>
   16ea4:	9009883a 	mov	r4,r18
   16ea8:	00166140 	call	16614 <_Balloc>
   16eac:	10c00504 	addi	r3,r2,20
   16eb0:	0540070e 	bge	zero,r21,16ed0 <__lshift+0x80>
   16eb4:	ad6b883a 	add	r21,r21,r21
   16eb8:	ad6b883a 	add	r21,r21,r21
   16ebc:	1809883a 	mov	r4,r3
   16ec0:	1d47883a 	add	r3,r3,r21
   16ec4:	20000015 	stw	zero,0(r4)
   16ec8:	21000104 	addi	r4,r4,4
   16ecc:	193ffd1e 	bne	r3,r4,16ec4 <__alt_data_end+0xfc016ec4>
   16ed0:	8a000417 	ldw	r8,16(r17)
   16ed4:	89000504 	addi	r4,r17,20
   16ed8:	a18007cc 	andi	r6,r20,31
   16edc:	4211883a 	add	r8,r8,r8
   16ee0:	4211883a 	add	r8,r8,r8
   16ee4:	2211883a 	add	r8,r4,r8
   16ee8:	30002326 	beq	r6,zero,16f78 <__lshift+0x128>
   16eec:	02400804 	movi	r9,32
   16ef0:	4993c83a 	sub	r9,r9,r6
   16ef4:	000b883a 	mov	r5,zero
   16ef8:	21c00017 	ldw	r7,0(r4)
   16efc:	1815883a 	mov	r10,r3
   16f00:	18c00104 	addi	r3,r3,4
   16f04:	398e983a 	sll	r7,r7,r6
   16f08:	21000104 	addi	r4,r4,4
   16f0c:	394ab03a 	or	r5,r7,r5
   16f10:	197fff15 	stw	r5,-4(r3)
   16f14:	217fff17 	ldw	r5,-4(r4)
   16f18:	2a4ad83a 	srl	r5,r5,r9
   16f1c:	223ff636 	bltu	r4,r8,16ef8 <__alt_data_end+0xfc016ef8>
   16f20:	51400115 	stw	r5,4(r10)
   16f24:	28001a1e 	bne	r5,zero,16f90 <__lshift+0x140>
   16f28:	843fffc4 	addi	r16,r16,-1
   16f2c:	14000415 	stw	r16,16(r2)
   16f30:	88000826 	beq	r17,zero,16f54 <__lshift+0x104>
   16f34:	89000117 	ldw	r4,4(r17)
   16f38:	90c01317 	ldw	r3,76(r18)
   16f3c:	2109883a 	add	r4,r4,r4
   16f40:	2109883a 	add	r4,r4,r4
   16f44:	1907883a 	add	r3,r3,r4
   16f48:	19000017 	ldw	r4,0(r3)
   16f4c:	89000015 	stw	r4,0(r17)
   16f50:	1c400015 	stw	r17,0(r3)
   16f54:	dfc00617 	ldw	ra,24(sp)
   16f58:	dd400517 	ldw	r21,20(sp)
   16f5c:	dd000417 	ldw	r20,16(sp)
   16f60:	dcc00317 	ldw	r19,12(sp)
   16f64:	dc800217 	ldw	r18,8(sp)
   16f68:	dc400117 	ldw	r17,4(sp)
   16f6c:	dc000017 	ldw	r16,0(sp)
   16f70:	dec00704 	addi	sp,sp,28
   16f74:	f800283a 	ret
   16f78:	21400017 	ldw	r5,0(r4)
   16f7c:	18c00104 	addi	r3,r3,4
   16f80:	21000104 	addi	r4,r4,4
   16f84:	197fff15 	stw	r5,-4(r3)
   16f88:	223ffb36 	bltu	r4,r8,16f78 <__alt_data_end+0xfc016f78>
   16f8c:	003fe606 	br	16f28 <__alt_data_end+0xfc016f28>
   16f90:	9c000084 	addi	r16,r19,2
   16f94:	003fe406 	br	16f28 <__alt_data_end+0xfc016f28>

00016f98 <__mcmp>:
   16f98:	20800417 	ldw	r2,16(r4)
   16f9c:	28c00417 	ldw	r3,16(r5)
   16fa0:	10c5c83a 	sub	r2,r2,r3
   16fa4:	1000111e 	bne	r2,zero,16fec <__mcmp+0x54>
   16fa8:	18c7883a 	add	r3,r3,r3
   16fac:	18c7883a 	add	r3,r3,r3
   16fb0:	21000504 	addi	r4,r4,20
   16fb4:	29400504 	addi	r5,r5,20
   16fb8:	20c5883a 	add	r2,r4,r3
   16fbc:	28cb883a 	add	r5,r5,r3
   16fc0:	00000106 	br	16fc8 <__mcmp+0x30>
   16fc4:	20800a2e 	bgeu	r4,r2,16ff0 <__mcmp+0x58>
   16fc8:	10bfff04 	addi	r2,r2,-4
   16fcc:	297fff04 	addi	r5,r5,-4
   16fd0:	11800017 	ldw	r6,0(r2)
   16fd4:	28c00017 	ldw	r3,0(r5)
   16fd8:	30fffa26 	beq	r6,r3,16fc4 <__alt_data_end+0xfc016fc4>
   16fdc:	30c00236 	bltu	r6,r3,16fe8 <__mcmp+0x50>
   16fe0:	00800044 	movi	r2,1
   16fe4:	f800283a 	ret
   16fe8:	00bfffc4 	movi	r2,-1
   16fec:	f800283a 	ret
   16ff0:	0005883a 	mov	r2,zero
   16ff4:	f800283a 	ret

00016ff8 <__mdiff>:
   16ff8:	28c00417 	ldw	r3,16(r5)
   16ffc:	30800417 	ldw	r2,16(r6)
   17000:	defffa04 	addi	sp,sp,-24
   17004:	dcc00315 	stw	r19,12(sp)
   17008:	dc800215 	stw	r18,8(sp)
   1700c:	dfc00515 	stw	ra,20(sp)
   17010:	dd000415 	stw	r20,16(sp)
   17014:	dc400115 	stw	r17,4(sp)
   17018:	dc000015 	stw	r16,0(sp)
   1701c:	1887c83a 	sub	r3,r3,r2
   17020:	2825883a 	mov	r18,r5
   17024:	3027883a 	mov	r19,r6
   17028:	1800141e 	bne	r3,zero,1707c <__mdiff+0x84>
   1702c:	1085883a 	add	r2,r2,r2
   17030:	1085883a 	add	r2,r2,r2
   17034:	2a000504 	addi	r8,r5,20
   17038:	34000504 	addi	r16,r6,20
   1703c:	4087883a 	add	r3,r8,r2
   17040:	8085883a 	add	r2,r16,r2
   17044:	00000106 	br	1704c <__mdiff+0x54>
   17048:	40c0592e 	bgeu	r8,r3,171b0 <__mdiff+0x1b8>
   1704c:	18ffff04 	addi	r3,r3,-4
   17050:	10bfff04 	addi	r2,r2,-4
   17054:	19c00017 	ldw	r7,0(r3)
   17058:	11400017 	ldw	r5,0(r2)
   1705c:	397ffa26 	beq	r7,r5,17048 <__alt_data_end+0xfc017048>
   17060:	3940592e 	bgeu	r7,r5,171c8 <__mdiff+0x1d0>
   17064:	9005883a 	mov	r2,r18
   17068:	4023883a 	mov	r17,r8
   1706c:	9825883a 	mov	r18,r19
   17070:	05000044 	movi	r20,1
   17074:	1027883a 	mov	r19,r2
   17078:	00000406 	br	1708c <__mdiff+0x94>
   1707c:	18005616 	blt	r3,zero,171d8 <__mdiff+0x1e0>
   17080:	34400504 	addi	r17,r6,20
   17084:	2c000504 	addi	r16,r5,20
   17088:	0029883a 	mov	r20,zero
   1708c:	91400117 	ldw	r5,4(r18)
   17090:	00166140 	call	16614 <_Balloc>
   17094:	92400417 	ldw	r9,16(r18)
   17098:	9b000417 	ldw	r12,16(r19)
   1709c:	12c00504 	addi	r11,r2,20
   170a0:	4a51883a 	add	r8,r9,r9
   170a4:	6319883a 	add	r12,r12,r12
   170a8:	4211883a 	add	r8,r8,r8
   170ac:	6319883a 	add	r12,r12,r12
   170b0:	15000315 	stw	r20,12(r2)
   170b4:	8211883a 	add	r8,r16,r8
   170b8:	8b19883a 	add	r12,r17,r12
   170bc:	0007883a 	mov	r3,zero
   170c0:	81400017 	ldw	r5,0(r16)
   170c4:	89c00017 	ldw	r7,0(r17)
   170c8:	59800104 	addi	r6,r11,4
   170cc:	293fffcc 	andi	r4,r5,65535
   170d0:	20c7883a 	add	r3,r4,r3
   170d4:	393fffcc 	andi	r4,r7,65535
   170d8:	1909c83a 	sub	r4,r3,r4
   170dc:	280ad43a 	srli	r5,r5,16
   170e0:	380ed43a 	srli	r7,r7,16
   170e4:	2007d43a 	srai	r3,r4,16
   170e8:	213fffcc 	andi	r4,r4,65535
   170ec:	29cbc83a 	sub	r5,r5,r7
   170f0:	28c7883a 	add	r3,r5,r3
   170f4:	180a943a 	slli	r5,r3,16
   170f8:	8c400104 	addi	r17,r17,4
   170fc:	84000104 	addi	r16,r16,4
   17100:	2908b03a 	or	r4,r5,r4
   17104:	59000015 	stw	r4,0(r11)
   17108:	1807d43a 	srai	r3,r3,16
   1710c:	3015883a 	mov	r10,r6
   17110:	3017883a 	mov	r11,r6
   17114:	8b3fea36 	bltu	r17,r12,170c0 <__alt_data_end+0xfc0170c0>
   17118:	8200162e 	bgeu	r16,r8,17174 <__mdiff+0x17c>
   1711c:	8017883a 	mov	r11,r16
   17120:	59400017 	ldw	r5,0(r11)
   17124:	31800104 	addi	r6,r6,4
   17128:	5ac00104 	addi	r11,r11,4
   1712c:	293fffcc 	andi	r4,r5,65535
   17130:	20c7883a 	add	r3,r4,r3
   17134:	280ed43a 	srli	r7,r5,16
   17138:	180bd43a 	srai	r5,r3,16
   1713c:	193fffcc 	andi	r4,r3,65535
   17140:	3947883a 	add	r3,r7,r5
   17144:	180a943a 	slli	r5,r3,16
   17148:	1807d43a 	srai	r3,r3,16
   1714c:	2908b03a 	or	r4,r5,r4
   17150:	313fff15 	stw	r4,-4(r6)
   17154:	5a3ff236 	bltu	r11,r8,17120 <__alt_data_end+0xfc017120>
   17158:	0406303a 	nor	r3,zero,r16
   1715c:	1a07883a 	add	r3,r3,r8
   17160:	1806d0ba 	srli	r3,r3,2
   17164:	18c00044 	addi	r3,r3,1
   17168:	18c7883a 	add	r3,r3,r3
   1716c:	18c7883a 	add	r3,r3,r3
   17170:	50d5883a 	add	r10,r10,r3
   17174:	50ffff04 	addi	r3,r10,-4
   17178:	2000041e 	bne	r4,zero,1718c <__mdiff+0x194>
   1717c:	18ffff04 	addi	r3,r3,-4
   17180:	19000017 	ldw	r4,0(r3)
   17184:	4a7fffc4 	addi	r9,r9,-1
   17188:	203ffc26 	beq	r4,zero,1717c <__alt_data_end+0xfc01717c>
   1718c:	12400415 	stw	r9,16(r2)
   17190:	dfc00517 	ldw	ra,20(sp)
   17194:	dd000417 	ldw	r20,16(sp)
   17198:	dcc00317 	ldw	r19,12(sp)
   1719c:	dc800217 	ldw	r18,8(sp)
   171a0:	dc400117 	ldw	r17,4(sp)
   171a4:	dc000017 	ldw	r16,0(sp)
   171a8:	dec00604 	addi	sp,sp,24
   171ac:	f800283a 	ret
   171b0:	000b883a 	mov	r5,zero
   171b4:	00166140 	call	16614 <_Balloc>
   171b8:	00c00044 	movi	r3,1
   171bc:	10c00415 	stw	r3,16(r2)
   171c0:	10000515 	stw	zero,20(r2)
   171c4:	003ff206 	br	17190 <__alt_data_end+0xfc017190>
   171c8:	8023883a 	mov	r17,r16
   171cc:	0029883a 	mov	r20,zero
   171d0:	4021883a 	mov	r16,r8
   171d4:	003fad06 	br	1708c <__alt_data_end+0xfc01708c>
   171d8:	9005883a 	mov	r2,r18
   171dc:	94400504 	addi	r17,r18,20
   171e0:	9c000504 	addi	r16,r19,20
   171e4:	9825883a 	mov	r18,r19
   171e8:	05000044 	movi	r20,1
   171ec:	1027883a 	mov	r19,r2
   171f0:	003fa606 	br	1708c <__alt_data_end+0xfc01708c>

000171f4 <__ulp>:
   171f4:	295ffc2c 	andhi	r5,r5,32752
   171f8:	00bf3034 	movhi	r2,64704
   171fc:	2887883a 	add	r3,r5,r2
   17200:	00c0020e 	bge	zero,r3,1720c <__ulp+0x18>
   17204:	0005883a 	mov	r2,zero
   17208:	f800283a 	ret
   1720c:	00c7c83a 	sub	r3,zero,r3
   17210:	1807d53a 	srai	r3,r3,20
   17214:	008004c4 	movi	r2,19
   17218:	10c00b0e 	bge	r2,r3,17248 <__ulp+0x54>
   1721c:	18bffb04 	addi	r2,r3,-20
   17220:	01000784 	movi	r4,30
   17224:	0007883a 	mov	r3,zero
   17228:	20800516 	blt	r4,r2,17240 <__ulp+0x4c>
   1722c:	010007c4 	movi	r4,31
   17230:	2089c83a 	sub	r4,r4,r2
   17234:	00800044 	movi	r2,1
   17238:	1104983a 	sll	r2,r2,r4
   1723c:	f800283a 	ret
   17240:	00800044 	movi	r2,1
   17244:	f800283a 	ret
   17248:	01400234 	movhi	r5,8
   1724c:	28c7d83a 	sra	r3,r5,r3
   17250:	0005883a 	mov	r2,zero
   17254:	f800283a 	ret

00017258 <__b2d>:
   17258:	defffa04 	addi	sp,sp,-24
   1725c:	dc000015 	stw	r16,0(sp)
   17260:	24000417 	ldw	r16,16(r4)
   17264:	dc400115 	stw	r17,4(sp)
   17268:	24400504 	addi	r17,r4,20
   1726c:	8421883a 	add	r16,r16,r16
   17270:	8421883a 	add	r16,r16,r16
   17274:	8c21883a 	add	r16,r17,r16
   17278:	dc800215 	stw	r18,8(sp)
   1727c:	84bfff17 	ldw	r18,-4(r16)
   17280:	dd000415 	stw	r20,16(sp)
   17284:	dcc00315 	stw	r19,12(sp)
   17288:	9009883a 	mov	r4,r18
   1728c:	2829883a 	mov	r20,r5
   17290:	dfc00515 	stw	ra,20(sp)
   17294:	00169300 	call	16930 <__hi0bits>
   17298:	00c00804 	movi	r3,32
   1729c:	1889c83a 	sub	r4,r3,r2
   172a0:	a1000015 	stw	r4,0(r20)
   172a4:	01000284 	movi	r4,10
   172a8:	84ffff04 	addi	r19,r16,-4
   172ac:	20801216 	blt	r4,r2,172f8 <__b2d+0xa0>
   172b0:	018002c4 	movi	r6,11
   172b4:	308dc83a 	sub	r6,r6,r2
   172b8:	9186d83a 	srl	r3,r18,r6
   172bc:	18cffc34 	orhi	r3,r3,16368
   172c0:	8cc0212e 	bgeu	r17,r19,17348 <__b2d+0xf0>
   172c4:	813ffe17 	ldw	r4,-8(r16)
   172c8:	218cd83a 	srl	r6,r4,r6
   172cc:	10800544 	addi	r2,r2,21
   172d0:	9084983a 	sll	r2,r18,r2
   172d4:	1184b03a 	or	r2,r2,r6
   172d8:	dfc00517 	ldw	ra,20(sp)
   172dc:	dd000417 	ldw	r20,16(sp)
   172e0:	dcc00317 	ldw	r19,12(sp)
   172e4:	dc800217 	ldw	r18,8(sp)
   172e8:	dc400117 	ldw	r17,4(sp)
   172ec:	dc000017 	ldw	r16,0(sp)
   172f0:	dec00604 	addi	sp,sp,24
   172f4:	f800283a 	ret
   172f8:	8cc00f2e 	bgeu	r17,r19,17338 <__b2d+0xe0>
   172fc:	117ffd44 	addi	r5,r2,-11
   17300:	80bffe17 	ldw	r2,-8(r16)
   17304:	28000e26 	beq	r5,zero,17340 <__b2d+0xe8>
   17308:	1949c83a 	sub	r4,r3,r5
   1730c:	9164983a 	sll	r18,r18,r5
   17310:	1106d83a 	srl	r3,r2,r4
   17314:	81bffe04 	addi	r6,r16,-8
   17318:	948ffc34 	orhi	r18,r18,16368
   1731c:	90c6b03a 	or	r3,r18,r3
   17320:	89800e2e 	bgeu	r17,r6,1735c <__b2d+0x104>
   17324:	81bffd17 	ldw	r6,-12(r16)
   17328:	1144983a 	sll	r2,r2,r5
   1732c:	310ad83a 	srl	r5,r6,r4
   17330:	2884b03a 	or	r2,r5,r2
   17334:	003fe806 	br	172d8 <__alt_data_end+0xfc0172d8>
   17338:	10bffd44 	addi	r2,r2,-11
   1733c:	1000041e 	bne	r2,zero,17350 <__b2d+0xf8>
   17340:	90cffc34 	orhi	r3,r18,16368
   17344:	003fe406 	br	172d8 <__alt_data_end+0xfc0172d8>
   17348:	000d883a 	mov	r6,zero
   1734c:	003fdf06 	br	172cc <__alt_data_end+0xfc0172cc>
   17350:	90a4983a 	sll	r18,r18,r2
   17354:	0005883a 	mov	r2,zero
   17358:	003ff906 	br	17340 <__alt_data_end+0xfc017340>
   1735c:	1144983a 	sll	r2,r2,r5
   17360:	003fdd06 	br	172d8 <__alt_data_end+0xfc0172d8>

00017364 <__d2b>:
   17364:	defff804 	addi	sp,sp,-32
   17368:	dc000215 	stw	r16,8(sp)
   1736c:	3021883a 	mov	r16,r6
   17370:	dc400315 	stw	r17,12(sp)
   17374:	8022907a 	slli	r17,r16,1
   17378:	dd000615 	stw	r20,24(sp)
   1737c:	2829883a 	mov	r20,r5
   17380:	01400044 	movi	r5,1
   17384:	dcc00515 	stw	r19,20(sp)
   17388:	dc800415 	stw	r18,16(sp)
   1738c:	dfc00715 	stw	ra,28(sp)
   17390:	3825883a 	mov	r18,r7
   17394:	8822d57a 	srli	r17,r17,21
   17398:	00166140 	call	16614 <_Balloc>
   1739c:	1027883a 	mov	r19,r2
   173a0:	00800434 	movhi	r2,16
   173a4:	10bfffc4 	addi	r2,r2,-1
   173a8:	808c703a 	and	r6,r16,r2
   173ac:	88000126 	beq	r17,zero,173b4 <__d2b+0x50>
   173b0:	31800434 	orhi	r6,r6,16
   173b4:	d9800015 	stw	r6,0(sp)
   173b8:	a0002426 	beq	r20,zero,1744c <__d2b+0xe8>
   173bc:	d9000104 	addi	r4,sp,4
   173c0:	dd000115 	stw	r20,4(sp)
   173c4:	00169980 	call	16998 <__lo0bits>
   173c8:	d8c00017 	ldw	r3,0(sp)
   173cc:	10002f1e 	bne	r2,zero,1748c <__d2b+0x128>
   173d0:	d9000117 	ldw	r4,4(sp)
   173d4:	99000515 	stw	r4,20(r19)
   173d8:	1821003a 	cmpeq	r16,r3,zero
   173dc:	01000084 	movi	r4,2
   173e0:	2421c83a 	sub	r16,r4,r16
   173e4:	98c00615 	stw	r3,24(r19)
   173e8:	9c000415 	stw	r16,16(r19)
   173ec:	88001f1e 	bne	r17,zero,1746c <__d2b+0x108>
   173f0:	10bef384 	addi	r2,r2,-1074
   173f4:	90800015 	stw	r2,0(r18)
   173f8:	00900034 	movhi	r2,16384
   173fc:	10bfffc4 	addi	r2,r2,-1
   17400:	8085883a 	add	r2,r16,r2
   17404:	1085883a 	add	r2,r2,r2
   17408:	1085883a 	add	r2,r2,r2
   1740c:	9885883a 	add	r2,r19,r2
   17410:	11000517 	ldw	r4,20(r2)
   17414:	8020917a 	slli	r16,r16,5
   17418:	00169300 	call	16930 <__hi0bits>
   1741c:	d8c00817 	ldw	r3,32(sp)
   17420:	8085c83a 	sub	r2,r16,r2
   17424:	18800015 	stw	r2,0(r3)
   17428:	9805883a 	mov	r2,r19
   1742c:	dfc00717 	ldw	ra,28(sp)
   17430:	dd000617 	ldw	r20,24(sp)
   17434:	dcc00517 	ldw	r19,20(sp)
   17438:	dc800417 	ldw	r18,16(sp)
   1743c:	dc400317 	ldw	r17,12(sp)
   17440:	dc000217 	ldw	r16,8(sp)
   17444:	dec00804 	addi	sp,sp,32
   17448:	f800283a 	ret
   1744c:	d809883a 	mov	r4,sp
   17450:	00169980 	call	16998 <__lo0bits>
   17454:	d8c00017 	ldw	r3,0(sp)
   17458:	04000044 	movi	r16,1
   1745c:	9c000415 	stw	r16,16(r19)
   17460:	98c00515 	stw	r3,20(r19)
   17464:	10800804 	addi	r2,r2,32
   17468:	883fe126 	beq	r17,zero,173f0 <__alt_data_end+0xfc0173f0>
   1746c:	00c00d44 	movi	r3,53
   17470:	8c7ef344 	addi	r17,r17,-1075
   17474:	88a3883a 	add	r17,r17,r2
   17478:	1885c83a 	sub	r2,r3,r2
   1747c:	d8c00817 	ldw	r3,32(sp)
   17480:	94400015 	stw	r17,0(r18)
   17484:	18800015 	stw	r2,0(r3)
   17488:	003fe706 	br	17428 <__alt_data_end+0xfc017428>
   1748c:	01000804 	movi	r4,32
   17490:	2089c83a 	sub	r4,r4,r2
   17494:	1908983a 	sll	r4,r3,r4
   17498:	d9400117 	ldw	r5,4(sp)
   1749c:	1886d83a 	srl	r3,r3,r2
   174a0:	2148b03a 	or	r4,r4,r5
   174a4:	99000515 	stw	r4,20(r19)
   174a8:	d8c00015 	stw	r3,0(sp)
   174ac:	003fca06 	br	173d8 <__alt_data_end+0xfc0173d8>

000174b0 <__ratio>:
   174b0:	defff904 	addi	sp,sp,-28
   174b4:	dc400315 	stw	r17,12(sp)
   174b8:	2823883a 	mov	r17,r5
   174bc:	d9400104 	addi	r5,sp,4
   174c0:	dfc00615 	stw	ra,24(sp)
   174c4:	dcc00515 	stw	r19,20(sp)
   174c8:	dc800415 	stw	r18,16(sp)
   174cc:	2027883a 	mov	r19,r4
   174d0:	dc000215 	stw	r16,8(sp)
   174d4:	00172580 	call	17258 <__b2d>
   174d8:	d80b883a 	mov	r5,sp
   174dc:	8809883a 	mov	r4,r17
   174e0:	1025883a 	mov	r18,r2
   174e4:	1821883a 	mov	r16,r3
   174e8:	00172580 	call	17258 <__b2d>
   174ec:	8a000417 	ldw	r8,16(r17)
   174f0:	99000417 	ldw	r4,16(r19)
   174f4:	d9400117 	ldw	r5,4(sp)
   174f8:	2209c83a 	sub	r4,r4,r8
   174fc:	2010917a 	slli	r8,r4,5
   17500:	d9000017 	ldw	r4,0(sp)
   17504:	2909c83a 	sub	r4,r5,r4
   17508:	4109883a 	add	r4,r8,r4
   1750c:	01000e0e 	bge	zero,r4,17548 <__ratio+0x98>
   17510:	2008953a 	slli	r4,r4,20
   17514:	2421883a 	add	r16,r4,r16
   17518:	100d883a 	mov	r6,r2
   1751c:	180f883a 	mov	r7,r3
   17520:	9009883a 	mov	r4,r18
   17524:	800b883a 	mov	r5,r16
   17528:	001c9680 	call	1c968 <__divdf3>
   1752c:	dfc00617 	ldw	ra,24(sp)
   17530:	dcc00517 	ldw	r19,20(sp)
   17534:	dc800417 	ldw	r18,16(sp)
   17538:	dc400317 	ldw	r17,12(sp)
   1753c:	dc000217 	ldw	r16,8(sp)
   17540:	dec00704 	addi	sp,sp,28
   17544:	f800283a 	ret
   17548:	2008953a 	slli	r4,r4,20
   1754c:	1907c83a 	sub	r3,r3,r4
   17550:	003ff106 	br	17518 <__alt_data_end+0xfc017518>

00017554 <_mprec_log10>:
   17554:	defffe04 	addi	sp,sp,-8
   17558:	dc000015 	stw	r16,0(sp)
   1755c:	dfc00115 	stw	ra,4(sp)
   17560:	008005c4 	movi	r2,23
   17564:	2021883a 	mov	r16,r4
   17568:	11000d0e 	bge	r2,r4,175a0 <_mprec_log10+0x4c>
   1756c:	0005883a 	mov	r2,zero
   17570:	00cffc34 	movhi	r3,16368
   17574:	843fffc4 	addi	r16,r16,-1
   17578:	000d883a 	mov	r6,zero
   1757c:	01d00934 	movhi	r7,16420
   17580:	1009883a 	mov	r4,r2
   17584:	180b883a 	mov	r5,r3
   17588:	001d5900 	call	1d590 <__muldf3>
   1758c:	803ff91e 	bne	r16,zero,17574 <__alt_data_end+0xfc017574>
   17590:	dfc00117 	ldw	ra,4(sp)
   17594:	dc000017 	ldw	r16,0(sp)
   17598:	dec00204 	addi	sp,sp,8
   1759c:	f800283a 	ret
   175a0:	202090fa 	slli	r16,r4,3
   175a4:	008000f4 	movhi	r2,3
   175a8:	10a94804 	addi	r2,r2,-23264
   175ac:	1421883a 	add	r16,r2,r16
   175b0:	80800017 	ldw	r2,0(r16)
   175b4:	80c00117 	ldw	r3,4(r16)
   175b8:	dfc00117 	ldw	ra,4(sp)
   175bc:	dc000017 	ldw	r16,0(sp)
   175c0:	dec00204 	addi	sp,sp,8
   175c4:	f800283a 	ret

000175c8 <__copybits>:
   175c8:	297fffc4 	addi	r5,r5,-1
   175cc:	280fd17a 	srai	r7,r5,5
   175d0:	30c00417 	ldw	r3,16(r6)
   175d4:	30800504 	addi	r2,r6,20
   175d8:	39c00044 	addi	r7,r7,1
   175dc:	18c7883a 	add	r3,r3,r3
   175e0:	39cf883a 	add	r7,r7,r7
   175e4:	18c7883a 	add	r3,r3,r3
   175e8:	39cf883a 	add	r7,r7,r7
   175ec:	10c7883a 	add	r3,r2,r3
   175f0:	21cf883a 	add	r7,r4,r7
   175f4:	10c00d2e 	bgeu	r2,r3,1762c <__copybits+0x64>
   175f8:	200b883a 	mov	r5,r4
   175fc:	12000017 	ldw	r8,0(r2)
   17600:	29400104 	addi	r5,r5,4
   17604:	10800104 	addi	r2,r2,4
   17608:	2a3fff15 	stw	r8,-4(r5)
   1760c:	10fffb36 	bltu	r2,r3,175fc <__alt_data_end+0xfc0175fc>
   17610:	1985c83a 	sub	r2,r3,r6
   17614:	10bffac4 	addi	r2,r2,-21
   17618:	1004d0ba 	srli	r2,r2,2
   1761c:	10800044 	addi	r2,r2,1
   17620:	1085883a 	add	r2,r2,r2
   17624:	1085883a 	add	r2,r2,r2
   17628:	2089883a 	add	r4,r4,r2
   1762c:	21c0032e 	bgeu	r4,r7,1763c <__copybits+0x74>
   17630:	20000015 	stw	zero,0(r4)
   17634:	21000104 	addi	r4,r4,4
   17638:	21fffd36 	bltu	r4,r7,17630 <__alt_data_end+0xfc017630>
   1763c:	f800283a 	ret

00017640 <__any_on>:
   17640:	20c00417 	ldw	r3,16(r4)
   17644:	2805d17a 	srai	r2,r5,5
   17648:	21000504 	addi	r4,r4,20
   1764c:	18800d0e 	bge	r3,r2,17684 <__any_on+0x44>
   17650:	18c7883a 	add	r3,r3,r3
   17654:	18c7883a 	add	r3,r3,r3
   17658:	20c7883a 	add	r3,r4,r3
   1765c:	20c0192e 	bgeu	r4,r3,176c4 <__any_on+0x84>
   17660:	18bfff17 	ldw	r2,-4(r3)
   17664:	18ffff04 	addi	r3,r3,-4
   17668:	1000041e 	bne	r2,zero,1767c <__any_on+0x3c>
   1766c:	20c0142e 	bgeu	r4,r3,176c0 <__any_on+0x80>
   17670:	18ffff04 	addi	r3,r3,-4
   17674:	19400017 	ldw	r5,0(r3)
   17678:	283ffc26 	beq	r5,zero,1766c <__alt_data_end+0xfc01766c>
   1767c:	00800044 	movi	r2,1
   17680:	f800283a 	ret
   17684:	10c00a0e 	bge	r2,r3,176b0 <__any_on+0x70>
   17688:	1085883a 	add	r2,r2,r2
   1768c:	1085883a 	add	r2,r2,r2
   17690:	294007cc 	andi	r5,r5,31
   17694:	2087883a 	add	r3,r4,r2
   17698:	283ff026 	beq	r5,zero,1765c <__alt_data_end+0xfc01765c>
   1769c:	19800017 	ldw	r6,0(r3)
   176a0:	3144d83a 	srl	r2,r6,r5
   176a4:	114a983a 	sll	r5,r2,r5
   176a8:	317ff41e 	bne	r6,r5,1767c <__alt_data_end+0xfc01767c>
   176ac:	003feb06 	br	1765c <__alt_data_end+0xfc01765c>
   176b0:	1085883a 	add	r2,r2,r2
   176b4:	1085883a 	add	r2,r2,r2
   176b8:	2087883a 	add	r3,r4,r2
   176bc:	003fe706 	br	1765c <__alt_data_end+0xfc01765c>
   176c0:	f800283a 	ret
   176c4:	0005883a 	mov	r2,zero
   176c8:	f800283a 	ret

000176cc <_putc_r>:
   176cc:	defffc04 	addi	sp,sp,-16
   176d0:	dc000215 	stw	r16,8(sp)
   176d4:	dfc00315 	stw	ra,12(sp)
   176d8:	2021883a 	mov	r16,r4
   176dc:	20000226 	beq	r4,zero,176e8 <_putc_r+0x1c>
   176e0:	20800e17 	ldw	r2,56(r4)
   176e4:	10001b26 	beq	r2,zero,17754 <_putc_r+0x88>
   176e8:	30800217 	ldw	r2,8(r6)
   176ec:	10bfffc4 	addi	r2,r2,-1
   176f0:	30800215 	stw	r2,8(r6)
   176f4:	10000a16 	blt	r2,zero,17720 <_putc_r+0x54>
   176f8:	30800017 	ldw	r2,0(r6)
   176fc:	11400005 	stb	r5,0(r2)
   17700:	30800017 	ldw	r2,0(r6)
   17704:	10c00044 	addi	r3,r2,1
   17708:	30c00015 	stw	r3,0(r6)
   1770c:	10800003 	ldbu	r2,0(r2)
   17710:	dfc00317 	ldw	ra,12(sp)
   17714:	dc000217 	ldw	r16,8(sp)
   17718:	dec00404 	addi	sp,sp,16
   1771c:	f800283a 	ret
   17720:	30c00617 	ldw	r3,24(r6)
   17724:	10c00616 	blt	r2,r3,17740 <_putc_r+0x74>
   17728:	30800017 	ldw	r2,0(r6)
   1772c:	00c00284 	movi	r3,10
   17730:	11400005 	stb	r5,0(r2)
   17734:	30800017 	ldw	r2,0(r6)
   17738:	11400003 	ldbu	r5,0(r2)
   1773c:	28fff11e 	bne	r5,r3,17704 <__alt_data_end+0xfc017704>
   17740:	8009883a 	mov	r4,r16
   17744:	dfc00317 	ldw	ra,12(sp)
   17748:	dc000217 	ldw	r16,8(sp)
   1774c:	dec00404 	addi	sp,sp,16
   17750:	001abb01 	jmpi	1abb0 <__swbuf_r>
   17754:	d9400015 	stw	r5,0(sp)
   17758:	d9800115 	stw	r6,4(sp)
   1775c:	00156680 	call	15668 <__sinit>
   17760:	d9800117 	ldw	r6,4(sp)
   17764:	d9400017 	ldw	r5,0(sp)
   17768:	003fdf06 	br	176e8 <__alt_data_end+0xfc0176e8>

0001776c <putc>:
   1776c:	008000f4 	movhi	r2,3
   17770:	defffc04 	addi	sp,sp,-16
   17774:	10b60a04 	addi	r2,r2,-10200
   17778:	dc000115 	stw	r16,4(sp)
   1777c:	14000017 	ldw	r16,0(r2)
   17780:	dc400215 	stw	r17,8(sp)
   17784:	dfc00315 	stw	ra,12(sp)
   17788:	2023883a 	mov	r17,r4
   1778c:	80000226 	beq	r16,zero,17798 <putc+0x2c>
   17790:	80800e17 	ldw	r2,56(r16)
   17794:	10001a26 	beq	r2,zero,17800 <putc+0x94>
   17798:	28800217 	ldw	r2,8(r5)
   1779c:	10bfffc4 	addi	r2,r2,-1
   177a0:	28800215 	stw	r2,8(r5)
   177a4:	10000b16 	blt	r2,zero,177d4 <putc+0x68>
   177a8:	28800017 	ldw	r2,0(r5)
   177ac:	14400005 	stb	r17,0(r2)
   177b0:	28800017 	ldw	r2,0(r5)
   177b4:	10c00044 	addi	r3,r2,1
   177b8:	28c00015 	stw	r3,0(r5)
   177bc:	10800003 	ldbu	r2,0(r2)
   177c0:	dfc00317 	ldw	ra,12(sp)
   177c4:	dc400217 	ldw	r17,8(sp)
   177c8:	dc000117 	ldw	r16,4(sp)
   177cc:	dec00404 	addi	sp,sp,16
   177d0:	f800283a 	ret
   177d4:	28c00617 	ldw	r3,24(r5)
   177d8:	10c00e16 	blt	r2,r3,17814 <putc+0xa8>
   177dc:	28800017 	ldw	r2,0(r5)
   177e0:	01000284 	movi	r4,10
   177e4:	14400005 	stb	r17,0(r2)
   177e8:	28800017 	ldw	r2,0(r5)
   177ec:	10c00003 	ldbu	r3,0(r2)
   177f0:	193ff01e 	bne	r3,r4,177b4 <__alt_data_end+0xfc0177b4>
   177f4:	280d883a 	mov	r6,r5
   177f8:	180b883a 	mov	r5,r3
   177fc:	00000706 	br	1781c <putc+0xb0>
   17800:	8009883a 	mov	r4,r16
   17804:	d9400015 	stw	r5,0(sp)
   17808:	00156680 	call	15668 <__sinit>
   1780c:	d9400017 	ldw	r5,0(sp)
   17810:	003fe106 	br	17798 <__alt_data_end+0xfc017798>
   17814:	280d883a 	mov	r6,r5
   17818:	880b883a 	mov	r5,r17
   1781c:	8009883a 	mov	r4,r16
   17820:	dfc00317 	ldw	ra,12(sp)
   17824:	dc400217 	ldw	r17,8(sp)
   17828:	dc000117 	ldw	r16,4(sp)
   1782c:	dec00404 	addi	sp,sp,16
   17830:	001abb01 	jmpi	1abb0 <__swbuf_r>

00017834 <_realloc_r>:
   17834:	defff604 	addi	sp,sp,-40
   17838:	dc800215 	stw	r18,8(sp)
   1783c:	dfc00915 	stw	ra,36(sp)
   17840:	df000815 	stw	fp,32(sp)
   17844:	ddc00715 	stw	r23,28(sp)
   17848:	dd800615 	stw	r22,24(sp)
   1784c:	dd400515 	stw	r21,20(sp)
   17850:	dd000415 	stw	r20,16(sp)
   17854:	dcc00315 	stw	r19,12(sp)
   17858:	dc400115 	stw	r17,4(sp)
   1785c:	dc000015 	stw	r16,0(sp)
   17860:	3025883a 	mov	r18,r6
   17864:	2800b726 	beq	r5,zero,17b44 <_realloc_r+0x310>
   17868:	282b883a 	mov	r21,r5
   1786c:	2029883a 	mov	r20,r4
   17870:	001f0580 	call	1f058 <__malloc_lock>
   17874:	a8bfff17 	ldw	r2,-4(r21)
   17878:	043fff04 	movi	r16,-4
   1787c:	90c002c4 	addi	r3,r18,11
   17880:	01000584 	movi	r4,22
   17884:	acfffe04 	addi	r19,r21,-8
   17888:	1420703a 	and	r16,r2,r16
   1788c:	20c0332e 	bgeu	r4,r3,1795c <_realloc_r+0x128>
   17890:	047ffe04 	movi	r17,-8
   17894:	1c62703a 	and	r17,r3,r17
   17898:	8807883a 	mov	r3,r17
   1789c:	88005816 	blt	r17,zero,17a00 <_realloc_r+0x1cc>
   178a0:	8c805736 	bltu	r17,r18,17a00 <_realloc_r+0x1cc>
   178a4:	80c0300e 	bge	r16,r3,17968 <_realloc_r+0x134>
   178a8:	070000f4 	movhi	fp,3
   178ac:	e72aab04 	addi	fp,fp,-21844
   178b0:	e1c00217 	ldw	r7,8(fp)
   178b4:	9c09883a 	add	r4,r19,r16
   178b8:	22000117 	ldw	r8,4(r4)
   178bc:	21c06326 	beq	r4,r7,17a4c <_realloc_r+0x218>
   178c0:	017fff84 	movi	r5,-2
   178c4:	414a703a 	and	r5,r8,r5
   178c8:	214b883a 	add	r5,r4,r5
   178cc:	29800117 	ldw	r6,4(r5)
   178d0:	3180004c 	andi	r6,r6,1
   178d4:	30003f26 	beq	r6,zero,179d4 <_realloc_r+0x1a0>
   178d8:	1080004c 	andi	r2,r2,1
   178dc:	10008326 	beq	r2,zero,17aec <_realloc_r+0x2b8>
   178e0:	900b883a 	mov	r5,r18
   178e4:	a009883a 	mov	r4,r20
   178e8:	000de780 	call	de78 <_malloc_r>
   178ec:	1025883a 	mov	r18,r2
   178f0:	10011e26 	beq	r2,zero,17d6c <_realloc_r+0x538>
   178f4:	a93fff17 	ldw	r4,-4(r21)
   178f8:	10fffe04 	addi	r3,r2,-8
   178fc:	00bfff84 	movi	r2,-2
   17900:	2084703a 	and	r2,r4,r2
   17904:	9885883a 	add	r2,r19,r2
   17908:	1880ee26 	beq	r3,r2,17cc4 <_realloc_r+0x490>
   1790c:	81bfff04 	addi	r6,r16,-4
   17910:	00800904 	movi	r2,36
   17914:	1180b836 	bltu	r2,r6,17bf8 <_realloc_r+0x3c4>
   17918:	00c004c4 	movi	r3,19
   1791c:	19809636 	bltu	r3,r6,17b78 <_realloc_r+0x344>
   17920:	9005883a 	mov	r2,r18
   17924:	a807883a 	mov	r3,r21
   17928:	19000017 	ldw	r4,0(r3)
   1792c:	11000015 	stw	r4,0(r2)
   17930:	19000117 	ldw	r4,4(r3)
   17934:	11000115 	stw	r4,4(r2)
   17938:	18c00217 	ldw	r3,8(r3)
   1793c:	10c00215 	stw	r3,8(r2)
   17940:	a80b883a 	mov	r5,r21
   17944:	a009883a 	mov	r4,r20
   17948:	00157dc0 	call	157dc <_free_r>
   1794c:	a009883a 	mov	r4,r20
   17950:	001f07c0 	call	1f07c <__malloc_unlock>
   17954:	9005883a 	mov	r2,r18
   17958:	00001206 	br	179a4 <_realloc_r+0x170>
   1795c:	00c00404 	movi	r3,16
   17960:	1823883a 	mov	r17,r3
   17964:	003fce06 	br	178a0 <__alt_data_end+0xfc0178a0>
   17968:	a825883a 	mov	r18,r21
   1796c:	8445c83a 	sub	r2,r16,r17
   17970:	00c003c4 	movi	r3,15
   17974:	18802636 	bltu	r3,r2,17a10 <_realloc_r+0x1dc>
   17978:	99800117 	ldw	r6,4(r19)
   1797c:	9c07883a 	add	r3,r19,r16
   17980:	3180004c 	andi	r6,r6,1
   17984:	3420b03a 	or	r16,r6,r16
   17988:	9c000115 	stw	r16,4(r19)
   1798c:	18800117 	ldw	r2,4(r3)
   17990:	10800054 	ori	r2,r2,1
   17994:	18800115 	stw	r2,4(r3)
   17998:	a009883a 	mov	r4,r20
   1799c:	001f07c0 	call	1f07c <__malloc_unlock>
   179a0:	9005883a 	mov	r2,r18
   179a4:	dfc00917 	ldw	ra,36(sp)
   179a8:	df000817 	ldw	fp,32(sp)
   179ac:	ddc00717 	ldw	r23,28(sp)
   179b0:	dd800617 	ldw	r22,24(sp)
   179b4:	dd400517 	ldw	r21,20(sp)
   179b8:	dd000417 	ldw	r20,16(sp)
   179bc:	dcc00317 	ldw	r19,12(sp)
   179c0:	dc800217 	ldw	r18,8(sp)
   179c4:	dc400117 	ldw	r17,4(sp)
   179c8:	dc000017 	ldw	r16,0(sp)
   179cc:	dec00a04 	addi	sp,sp,40
   179d0:	f800283a 	ret
   179d4:	017fff04 	movi	r5,-4
   179d8:	414a703a 	and	r5,r8,r5
   179dc:	814d883a 	add	r6,r16,r5
   179e0:	30c01f16 	blt	r6,r3,17a60 <_realloc_r+0x22c>
   179e4:	20800317 	ldw	r2,12(r4)
   179e8:	20c00217 	ldw	r3,8(r4)
   179ec:	a825883a 	mov	r18,r21
   179f0:	3021883a 	mov	r16,r6
   179f4:	18800315 	stw	r2,12(r3)
   179f8:	10c00215 	stw	r3,8(r2)
   179fc:	003fdb06 	br	1796c <__alt_data_end+0xfc01796c>
   17a00:	00800304 	movi	r2,12
   17a04:	a0800015 	stw	r2,0(r20)
   17a08:	0005883a 	mov	r2,zero
   17a0c:	003fe506 	br	179a4 <__alt_data_end+0xfc0179a4>
   17a10:	98c00117 	ldw	r3,4(r19)
   17a14:	9c4b883a 	add	r5,r19,r17
   17a18:	11000054 	ori	r4,r2,1
   17a1c:	18c0004c 	andi	r3,r3,1
   17a20:	1c62b03a 	or	r17,r3,r17
   17a24:	9c400115 	stw	r17,4(r19)
   17a28:	29000115 	stw	r4,4(r5)
   17a2c:	2885883a 	add	r2,r5,r2
   17a30:	10c00117 	ldw	r3,4(r2)
   17a34:	29400204 	addi	r5,r5,8
   17a38:	a009883a 	mov	r4,r20
   17a3c:	18c00054 	ori	r3,r3,1
   17a40:	10c00115 	stw	r3,4(r2)
   17a44:	00157dc0 	call	157dc <_free_r>
   17a48:	003fd306 	br	17998 <__alt_data_end+0xfc017998>
   17a4c:	017fff04 	movi	r5,-4
   17a50:	414a703a 	and	r5,r8,r5
   17a54:	89800404 	addi	r6,r17,16
   17a58:	8151883a 	add	r8,r16,r5
   17a5c:	4180590e 	bge	r8,r6,17bc4 <_realloc_r+0x390>
   17a60:	1080004c 	andi	r2,r2,1
   17a64:	103f9e1e 	bne	r2,zero,178e0 <__alt_data_end+0xfc0178e0>
   17a68:	adbffe17 	ldw	r22,-8(r21)
   17a6c:	00bfff04 	movi	r2,-4
   17a70:	9dadc83a 	sub	r22,r19,r22
   17a74:	b1800117 	ldw	r6,4(r22)
   17a78:	3084703a 	and	r2,r6,r2
   17a7c:	20002026 	beq	r4,zero,17b00 <_realloc_r+0x2cc>
   17a80:	80af883a 	add	r23,r16,r2
   17a84:	b96f883a 	add	r23,r23,r5
   17a88:	21c05f26 	beq	r4,r7,17c08 <_realloc_r+0x3d4>
   17a8c:	b8c01c16 	blt	r23,r3,17b00 <_realloc_r+0x2cc>
   17a90:	20800317 	ldw	r2,12(r4)
   17a94:	20c00217 	ldw	r3,8(r4)
   17a98:	81bfff04 	addi	r6,r16,-4
   17a9c:	01000904 	movi	r4,36
   17aa0:	18800315 	stw	r2,12(r3)
   17aa4:	10c00215 	stw	r3,8(r2)
   17aa8:	b0c00217 	ldw	r3,8(r22)
   17aac:	b0800317 	ldw	r2,12(r22)
   17ab0:	b4800204 	addi	r18,r22,8
   17ab4:	18800315 	stw	r2,12(r3)
   17ab8:	10c00215 	stw	r3,8(r2)
   17abc:	21801b36 	bltu	r4,r6,17b2c <_realloc_r+0x2f8>
   17ac0:	008004c4 	movi	r2,19
   17ac4:	1180352e 	bgeu	r2,r6,17b9c <_realloc_r+0x368>
   17ac8:	a8800017 	ldw	r2,0(r21)
   17acc:	b0800215 	stw	r2,8(r22)
   17ad0:	a8800117 	ldw	r2,4(r21)
   17ad4:	b0800315 	stw	r2,12(r22)
   17ad8:	008006c4 	movi	r2,27
   17adc:	11807f36 	bltu	r2,r6,17cdc <_realloc_r+0x4a8>
   17ae0:	b0800404 	addi	r2,r22,16
   17ae4:	ad400204 	addi	r21,r21,8
   17ae8:	00002d06 	br	17ba0 <_realloc_r+0x36c>
   17aec:	adbffe17 	ldw	r22,-8(r21)
   17af0:	00bfff04 	movi	r2,-4
   17af4:	9dadc83a 	sub	r22,r19,r22
   17af8:	b1000117 	ldw	r4,4(r22)
   17afc:	2084703a 	and	r2,r4,r2
   17b00:	b03f7726 	beq	r22,zero,178e0 <__alt_data_end+0xfc0178e0>
   17b04:	80af883a 	add	r23,r16,r2
   17b08:	b8ff7516 	blt	r23,r3,178e0 <__alt_data_end+0xfc0178e0>
   17b0c:	b0800317 	ldw	r2,12(r22)
   17b10:	b0c00217 	ldw	r3,8(r22)
   17b14:	81bfff04 	addi	r6,r16,-4
   17b18:	01000904 	movi	r4,36
   17b1c:	18800315 	stw	r2,12(r3)
   17b20:	10c00215 	stw	r3,8(r2)
   17b24:	b4800204 	addi	r18,r22,8
   17b28:	21bfe52e 	bgeu	r4,r6,17ac0 <__alt_data_end+0xfc017ac0>
   17b2c:	a80b883a 	mov	r5,r21
   17b30:	9009883a 	mov	r4,r18
   17b34:	00164b80 	call	164b8 <memmove>
   17b38:	b821883a 	mov	r16,r23
   17b3c:	b027883a 	mov	r19,r22
   17b40:	003f8a06 	br	1796c <__alt_data_end+0xfc01796c>
   17b44:	300b883a 	mov	r5,r6
   17b48:	dfc00917 	ldw	ra,36(sp)
   17b4c:	df000817 	ldw	fp,32(sp)
   17b50:	ddc00717 	ldw	r23,28(sp)
   17b54:	dd800617 	ldw	r22,24(sp)
   17b58:	dd400517 	ldw	r21,20(sp)
   17b5c:	dd000417 	ldw	r20,16(sp)
   17b60:	dcc00317 	ldw	r19,12(sp)
   17b64:	dc800217 	ldw	r18,8(sp)
   17b68:	dc400117 	ldw	r17,4(sp)
   17b6c:	dc000017 	ldw	r16,0(sp)
   17b70:	dec00a04 	addi	sp,sp,40
   17b74:	000de781 	jmpi	de78 <_malloc_r>
   17b78:	a8c00017 	ldw	r3,0(r21)
   17b7c:	90c00015 	stw	r3,0(r18)
   17b80:	a8c00117 	ldw	r3,4(r21)
   17b84:	90c00115 	stw	r3,4(r18)
   17b88:	00c006c4 	movi	r3,27
   17b8c:	19804536 	bltu	r3,r6,17ca4 <_realloc_r+0x470>
   17b90:	90800204 	addi	r2,r18,8
   17b94:	a8c00204 	addi	r3,r21,8
   17b98:	003f6306 	br	17928 <__alt_data_end+0xfc017928>
   17b9c:	9005883a 	mov	r2,r18
   17ba0:	a8c00017 	ldw	r3,0(r21)
   17ba4:	b821883a 	mov	r16,r23
   17ba8:	b027883a 	mov	r19,r22
   17bac:	10c00015 	stw	r3,0(r2)
   17bb0:	a8c00117 	ldw	r3,4(r21)
   17bb4:	10c00115 	stw	r3,4(r2)
   17bb8:	a8c00217 	ldw	r3,8(r21)
   17bbc:	10c00215 	stw	r3,8(r2)
   17bc0:	003f6a06 	br	1796c <__alt_data_end+0xfc01796c>
   17bc4:	9c67883a 	add	r19,r19,r17
   17bc8:	4445c83a 	sub	r2,r8,r17
   17bcc:	e4c00215 	stw	r19,8(fp)
   17bd0:	10800054 	ori	r2,r2,1
   17bd4:	98800115 	stw	r2,4(r19)
   17bd8:	a8bfff17 	ldw	r2,-4(r21)
   17bdc:	a009883a 	mov	r4,r20
   17be0:	1080004c 	andi	r2,r2,1
   17be4:	1462b03a 	or	r17,r2,r17
   17be8:	ac7fff15 	stw	r17,-4(r21)
   17bec:	001f07c0 	call	1f07c <__malloc_unlock>
   17bf0:	a805883a 	mov	r2,r21
   17bf4:	003f6b06 	br	179a4 <__alt_data_end+0xfc0179a4>
   17bf8:	a80b883a 	mov	r5,r21
   17bfc:	9009883a 	mov	r4,r18
   17c00:	00164b80 	call	164b8 <memmove>
   17c04:	003f4e06 	br	17940 <__alt_data_end+0xfc017940>
   17c08:	89000404 	addi	r4,r17,16
   17c0c:	b93fbc16 	blt	r23,r4,17b00 <__alt_data_end+0xfc017b00>
   17c10:	b0800317 	ldw	r2,12(r22)
   17c14:	b0c00217 	ldw	r3,8(r22)
   17c18:	81bfff04 	addi	r6,r16,-4
   17c1c:	01000904 	movi	r4,36
   17c20:	18800315 	stw	r2,12(r3)
   17c24:	10c00215 	stw	r3,8(r2)
   17c28:	b4800204 	addi	r18,r22,8
   17c2c:	21804336 	bltu	r4,r6,17d3c <_realloc_r+0x508>
   17c30:	008004c4 	movi	r2,19
   17c34:	11803f2e 	bgeu	r2,r6,17d34 <_realloc_r+0x500>
   17c38:	a8800017 	ldw	r2,0(r21)
   17c3c:	b0800215 	stw	r2,8(r22)
   17c40:	a8800117 	ldw	r2,4(r21)
   17c44:	b0800315 	stw	r2,12(r22)
   17c48:	008006c4 	movi	r2,27
   17c4c:	11803f36 	bltu	r2,r6,17d4c <_realloc_r+0x518>
   17c50:	b0800404 	addi	r2,r22,16
   17c54:	ad400204 	addi	r21,r21,8
   17c58:	a8c00017 	ldw	r3,0(r21)
   17c5c:	10c00015 	stw	r3,0(r2)
   17c60:	a8c00117 	ldw	r3,4(r21)
   17c64:	10c00115 	stw	r3,4(r2)
   17c68:	a8c00217 	ldw	r3,8(r21)
   17c6c:	10c00215 	stw	r3,8(r2)
   17c70:	b447883a 	add	r3,r22,r17
   17c74:	bc45c83a 	sub	r2,r23,r17
   17c78:	e0c00215 	stw	r3,8(fp)
   17c7c:	10800054 	ori	r2,r2,1
   17c80:	18800115 	stw	r2,4(r3)
   17c84:	b0800117 	ldw	r2,4(r22)
   17c88:	a009883a 	mov	r4,r20
   17c8c:	1080004c 	andi	r2,r2,1
   17c90:	1462b03a 	or	r17,r2,r17
   17c94:	b4400115 	stw	r17,4(r22)
   17c98:	001f07c0 	call	1f07c <__malloc_unlock>
   17c9c:	9005883a 	mov	r2,r18
   17ca0:	003f4006 	br	179a4 <__alt_data_end+0xfc0179a4>
   17ca4:	a8c00217 	ldw	r3,8(r21)
   17ca8:	90c00215 	stw	r3,8(r18)
   17cac:	a8c00317 	ldw	r3,12(r21)
   17cb0:	90c00315 	stw	r3,12(r18)
   17cb4:	30801126 	beq	r6,r2,17cfc <_realloc_r+0x4c8>
   17cb8:	90800404 	addi	r2,r18,16
   17cbc:	a8c00404 	addi	r3,r21,16
   17cc0:	003f1906 	br	17928 <__alt_data_end+0xfc017928>
   17cc4:	90ffff17 	ldw	r3,-4(r18)
   17cc8:	00bfff04 	movi	r2,-4
   17ccc:	a825883a 	mov	r18,r21
   17cd0:	1884703a 	and	r2,r3,r2
   17cd4:	80a1883a 	add	r16,r16,r2
   17cd8:	003f2406 	br	1796c <__alt_data_end+0xfc01796c>
   17cdc:	a8800217 	ldw	r2,8(r21)
   17ce0:	b0800415 	stw	r2,16(r22)
   17ce4:	a8800317 	ldw	r2,12(r21)
   17ce8:	b0800515 	stw	r2,20(r22)
   17cec:	31000a26 	beq	r6,r4,17d18 <_realloc_r+0x4e4>
   17cf0:	b0800604 	addi	r2,r22,24
   17cf4:	ad400404 	addi	r21,r21,16
   17cf8:	003fa906 	br	17ba0 <__alt_data_end+0xfc017ba0>
   17cfc:	a9000417 	ldw	r4,16(r21)
   17d00:	90800604 	addi	r2,r18,24
   17d04:	a8c00604 	addi	r3,r21,24
   17d08:	91000415 	stw	r4,16(r18)
   17d0c:	a9000517 	ldw	r4,20(r21)
   17d10:	91000515 	stw	r4,20(r18)
   17d14:	003f0406 	br	17928 <__alt_data_end+0xfc017928>
   17d18:	a8c00417 	ldw	r3,16(r21)
   17d1c:	ad400604 	addi	r21,r21,24
   17d20:	b0800804 	addi	r2,r22,32
   17d24:	b0c00615 	stw	r3,24(r22)
   17d28:	a8ffff17 	ldw	r3,-4(r21)
   17d2c:	b0c00715 	stw	r3,28(r22)
   17d30:	003f9b06 	br	17ba0 <__alt_data_end+0xfc017ba0>
   17d34:	9005883a 	mov	r2,r18
   17d38:	003fc706 	br	17c58 <__alt_data_end+0xfc017c58>
   17d3c:	a80b883a 	mov	r5,r21
   17d40:	9009883a 	mov	r4,r18
   17d44:	00164b80 	call	164b8 <memmove>
   17d48:	003fc906 	br	17c70 <__alt_data_end+0xfc017c70>
   17d4c:	a8800217 	ldw	r2,8(r21)
   17d50:	b0800415 	stw	r2,16(r22)
   17d54:	a8800317 	ldw	r2,12(r21)
   17d58:	b0800515 	stw	r2,20(r22)
   17d5c:	31000726 	beq	r6,r4,17d7c <_realloc_r+0x548>
   17d60:	b0800604 	addi	r2,r22,24
   17d64:	ad400404 	addi	r21,r21,16
   17d68:	003fbb06 	br	17c58 <__alt_data_end+0xfc017c58>
   17d6c:	a009883a 	mov	r4,r20
   17d70:	001f07c0 	call	1f07c <__malloc_unlock>
   17d74:	0005883a 	mov	r2,zero
   17d78:	003f0a06 	br	179a4 <__alt_data_end+0xfc0179a4>
   17d7c:	a8c00417 	ldw	r3,16(r21)
   17d80:	ad400604 	addi	r21,r21,24
   17d84:	b0800804 	addi	r2,r22,32
   17d88:	b0c00615 	stw	r3,24(r22)
   17d8c:	a8ffff17 	ldw	r3,-4(r21)
   17d90:	b0c00715 	stw	r3,28(r22)
   17d94:	003fb006 	br	17c58 <__alt_data_end+0xfc017c58>

00017d98 <__fpclassifyd>:
   17d98:	00a00034 	movhi	r2,32768
   17d9c:	10bfffc4 	addi	r2,r2,-1
   17da0:	2884703a 	and	r2,r5,r2
   17da4:	10000726 	beq	r2,zero,17dc4 <__fpclassifyd+0x2c>
   17da8:	00fffc34 	movhi	r3,65520
   17dac:	019ff834 	movhi	r6,32736
   17db0:	28c7883a 	add	r3,r5,r3
   17db4:	31bfffc4 	addi	r6,r6,-1
   17db8:	30c00536 	bltu	r6,r3,17dd0 <__fpclassifyd+0x38>
   17dbc:	00800104 	movi	r2,4
   17dc0:	f800283a 	ret
   17dc4:	2000021e 	bne	r4,zero,17dd0 <__fpclassifyd+0x38>
   17dc8:	00800084 	movi	r2,2
   17dcc:	f800283a 	ret
   17dd0:	00dffc34 	movhi	r3,32752
   17dd4:	019ff834 	movhi	r6,32736
   17dd8:	28cb883a 	add	r5,r5,r3
   17ddc:	31bfffc4 	addi	r6,r6,-1
   17de0:	317ff62e 	bgeu	r6,r5,17dbc <__alt_data_end+0xfc017dbc>
   17de4:	01400434 	movhi	r5,16
   17de8:	297fffc4 	addi	r5,r5,-1
   17dec:	28800236 	bltu	r5,r2,17df8 <__fpclassifyd+0x60>
   17df0:	008000c4 	movi	r2,3
   17df4:	f800283a 	ret
   17df8:	10c00226 	beq	r2,r3,17e04 <__fpclassifyd+0x6c>
   17dfc:	0005883a 	mov	r2,zero
   17e00:	f800283a 	ret
   17e04:	2005003a 	cmpeq	r2,r4,zero
   17e08:	f800283a 	ret

00017e0c <__sread>:
   17e0c:	defffe04 	addi	sp,sp,-8
   17e10:	dc000015 	stw	r16,0(sp)
   17e14:	2821883a 	mov	r16,r5
   17e18:	2940038f 	ldh	r5,14(r5)
   17e1c:	dfc00115 	stw	ra,4(sp)
   17e20:	001b2b40 	call	1b2b4 <_read_r>
   17e24:	10000716 	blt	r2,zero,17e44 <__sread+0x38>
   17e28:	80c01417 	ldw	r3,80(r16)
   17e2c:	1887883a 	add	r3,r3,r2
   17e30:	80c01415 	stw	r3,80(r16)
   17e34:	dfc00117 	ldw	ra,4(sp)
   17e38:	dc000017 	ldw	r16,0(sp)
   17e3c:	dec00204 	addi	sp,sp,8
   17e40:	f800283a 	ret
   17e44:	80c0030b 	ldhu	r3,12(r16)
   17e48:	18fbffcc 	andi	r3,r3,61439
   17e4c:	80c0030d 	sth	r3,12(r16)
   17e50:	dfc00117 	ldw	ra,4(sp)
   17e54:	dc000017 	ldw	r16,0(sp)
   17e58:	dec00204 	addi	sp,sp,8
   17e5c:	f800283a 	ret

00017e60 <__seofread>:
   17e60:	0005883a 	mov	r2,zero
   17e64:	f800283a 	ret

00017e68 <__swrite>:
   17e68:	2880030b 	ldhu	r2,12(r5)
   17e6c:	defffb04 	addi	sp,sp,-20
   17e70:	dcc00315 	stw	r19,12(sp)
   17e74:	dc800215 	stw	r18,8(sp)
   17e78:	dc400115 	stw	r17,4(sp)
   17e7c:	dc000015 	stw	r16,0(sp)
   17e80:	dfc00415 	stw	ra,16(sp)
   17e84:	10c0400c 	andi	r3,r2,256
   17e88:	2821883a 	mov	r16,r5
   17e8c:	2023883a 	mov	r17,r4
   17e90:	3025883a 	mov	r18,r6
   17e94:	3827883a 	mov	r19,r7
   17e98:	18000526 	beq	r3,zero,17eb0 <__swrite+0x48>
   17e9c:	2940038f 	ldh	r5,14(r5)
   17ea0:	01c00084 	movi	r7,2
   17ea4:	000d883a 	mov	r6,zero
   17ea8:	001b2540 	call	1b254 <_lseek_r>
   17eac:	8080030b 	ldhu	r2,12(r16)
   17eb0:	8140038f 	ldh	r5,14(r16)
   17eb4:	10bbffcc 	andi	r2,r2,61439
   17eb8:	980f883a 	mov	r7,r19
   17ebc:	900d883a 	mov	r6,r18
   17ec0:	8809883a 	mov	r4,r17
   17ec4:	8080030d 	sth	r2,12(r16)
   17ec8:	dfc00417 	ldw	ra,16(sp)
   17ecc:	dcc00317 	ldw	r19,12(sp)
   17ed0:	dc800217 	ldw	r18,8(sp)
   17ed4:	dc400117 	ldw	r17,4(sp)
   17ed8:	dc000017 	ldw	r16,0(sp)
   17edc:	dec00504 	addi	sp,sp,20
   17ee0:	001ad081 	jmpi	1ad08 <_write_r>

00017ee4 <__sseek>:
   17ee4:	defffe04 	addi	sp,sp,-8
   17ee8:	dc000015 	stw	r16,0(sp)
   17eec:	2821883a 	mov	r16,r5
   17ef0:	2940038f 	ldh	r5,14(r5)
   17ef4:	dfc00115 	stw	ra,4(sp)
   17ef8:	001b2540 	call	1b254 <_lseek_r>
   17efc:	00ffffc4 	movi	r3,-1
   17f00:	10c00826 	beq	r2,r3,17f24 <__sseek+0x40>
   17f04:	80c0030b 	ldhu	r3,12(r16)
   17f08:	80801415 	stw	r2,80(r16)
   17f0c:	18c40014 	ori	r3,r3,4096
   17f10:	80c0030d 	sth	r3,12(r16)
   17f14:	dfc00117 	ldw	ra,4(sp)
   17f18:	dc000017 	ldw	r16,0(sp)
   17f1c:	dec00204 	addi	sp,sp,8
   17f20:	f800283a 	ret
   17f24:	80c0030b 	ldhu	r3,12(r16)
   17f28:	18fbffcc 	andi	r3,r3,61439
   17f2c:	80c0030d 	sth	r3,12(r16)
   17f30:	dfc00117 	ldw	ra,4(sp)
   17f34:	dc000017 	ldw	r16,0(sp)
   17f38:	dec00204 	addi	sp,sp,8
   17f3c:	f800283a 	ret

00017f40 <__sclose>:
   17f40:	2940038f 	ldh	r5,14(r5)
   17f44:	001ad681 	jmpi	1ad68 <_close_r>

00017f48 <__ssprint_r>:
   17f48:	30800217 	ldw	r2,8(r6)
   17f4c:	defff604 	addi	sp,sp,-40
   17f50:	dc800215 	stw	r18,8(sp)
   17f54:	dfc00915 	stw	ra,36(sp)
   17f58:	df000815 	stw	fp,32(sp)
   17f5c:	ddc00715 	stw	r23,28(sp)
   17f60:	dd800615 	stw	r22,24(sp)
   17f64:	dd400515 	stw	r21,20(sp)
   17f68:	dd000415 	stw	r20,16(sp)
   17f6c:	dcc00315 	stw	r19,12(sp)
   17f70:	dc400115 	stw	r17,4(sp)
   17f74:	dc000015 	stw	r16,0(sp)
   17f78:	3025883a 	mov	r18,r6
   17f7c:	10005826 	beq	r2,zero,180e0 <__ssprint_r+0x198>
   17f80:	2027883a 	mov	r19,r4
   17f84:	35c00017 	ldw	r23,0(r6)
   17f88:	29000017 	ldw	r4,0(r5)
   17f8c:	28800217 	ldw	r2,8(r5)
   17f90:	2823883a 	mov	r17,r5
   17f94:	0039883a 	mov	fp,zero
   17f98:	0021883a 	mov	r16,zero
   17f9c:	80003926 	beq	r16,zero,18084 <__ssprint_r+0x13c>
   17fa0:	102b883a 	mov	r21,r2
   17fa4:	102d883a 	mov	r22,r2
   17fa8:	80803a36 	bltu	r16,r2,18094 <__ssprint_r+0x14c>
   17fac:	88c0030b 	ldhu	r3,12(r17)
   17fb0:	1881200c 	andi	r2,r3,1152
   17fb4:	10002626 	beq	r2,zero,18050 <__ssprint_r+0x108>
   17fb8:	88800517 	ldw	r2,20(r17)
   17fbc:	89400417 	ldw	r5,16(r17)
   17fc0:	81800044 	addi	r6,r16,1
   17fc4:	108f883a 	add	r7,r2,r2
   17fc8:	3885883a 	add	r2,r7,r2
   17fcc:	100ed7fa 	srli	r7,r2,31
   17fd0:	216dc83a 	sub	r22,r4,r5
   17fd4:	3589883a 	add	r4,r6,r22
   17fd8:	3885883a 	add	r2,r7,r2
   17fdc:	102bd07a 	srai	r21,r2,1
   17fe0:	a80d883a 	mov	r6,r21
   17fe4:	a900022e 	bgeu	r21,r4,17ff0 <__ssprint_r+0xa8>
   17fe8:	202b883a 	mov	r21,r4
   17fec:	200d883a 	mov	r6,r4
   17ff0:	18c1000c 	andi	r3,r3,1024
   17ff4:	18002a26 	beq	r3,zero,180a0 <__ssprint_r+0x158>
   17ff8:	300b883a 	mov	r5,r6
   17ffc:	9809883a 	mov	r4,r19
   18000:	000de780 	call	de78 <_malloc_r>
   18004:	1029883a 	mov	r20,r2
   18008:	10002c26 	beq	r2,zero,180bc <__ssprint_r+0x174>
   1800c:	89400417 	ldw	r5,16(r17)
   18010:	b00d883a 	mov	r6,r22
   18014:	1009883a 	mov	r4,r2
   18018:	000e6840 	call	e684 <memcpy>
   1801c:	8880030b 	ldhu	r2,12(r17)
   18020:	00fedfc4 	movi	r3,-1153
   18024:	10c4703a 	and	r2,r2,r3
   18028:	10802014 	ori	r2,r2,128
   1802c:	8880030d 	sth	r2,12(r17)
   18030:	a589883a 	add	r4,r20,r22
   18034:	adadc83a 	sub	r22,r21,r22
   18038:	8d400515 	stw	r21,20(r17)
   1803c:	8d800215 	stw	r22,8(r17)
   18040:	8d000415 	stw	r20,16(r17)
   18044:	89000015 	stw	r4,0(r17)
   18048:	802b883a 	mov	r21,r16
   1804c:	802d883a 	mov	r22,r16
   18050:	b00d883a 	mov	r6,r22
   18054:	e00b883a 	mov	r5,fp
   18058:	00164b80 	call	164b8 <memmove>
   1805c:	88800217 	ldw	r2,8(r17)
   18060:	89000017 	ldw	r4,0(r17)
   18064:	90c00217 	ldw	r3,8(r18)
   18068:	1545c83a 	sub	r2,r2,r21
   1806c:	2589883a 	add	r4,r4,r22
   18070:	88800215 	stw	r2,8(r17)
   18074:	89000015 	stw	r4,0(r17)
   18078:	1c21c83a 	sub	r16,r3,r16
   1807c:	94000215 	stw	r16,8(r18)
   18080:	80001726 	beq	r16,zero,180e0 <__ssprint_r+0x198>
   18084:	bf000017 	ldw	fp,0(r23)
   18088:	bc000117 	ldw	r16,4(r23)
   1808c:	bdc00204 	addi	r23,r23,8
   18090:	003fc206 	br	17f9c <__alt_data_end+0xfc017f9c>
   18094:	802b883a 	mov	r21,r16
   18098:	802d883a 	mov	r22,r16
   1809c:	003fec06 	br	18050 <__alt_data_end+0xfc018050>
   180a0:	9809883a 	mov	r4,r19
   180a4:	00178340 	call	17834 <_realloc_r>
   180a8:	1029883a 	mov	r20,r2
   180ac:	103fe01e 	bne	r2,zero,18030 <__alt_data_end+0xfc018030>
   180b0:	89400417 	ldw	r5,16(r17)
   180b4:	9809883a 	mov	r4,r19
   180b8:	00157dc0 	call	157dc <_free_r>
   180bc:	88c0030b 	ldhu	r3,12(r17)
   180c0:	00800304 	movi	r2,12
   180c4:	98800015 	stw	r2,0(r19)
   180c8:	18c01014 	ori	r3,r3,64
   180cc:	88c0030d 	sth	r3,12(r17)
   180d0:	00bfffc4 	movi	r2,-1
   180d4:	90000215 	stw	zero,8(r18)
   180d8:	90000115 	stw	zero,4(r18)
   180dc:	00000206 	br	180e8 <__ssprint_r+0x1a0>
   180e0:	90000115 	stw	zero,4(r18)
   180e4:	0005883a 	mov	r2,zero
   180e8:	dfc00917 	ldw	ra,36(sp)
   180ec:	df000817 	ldw	fp,32(sp)
   180f0:	ddc00717 	ldw	r23,28(sp)
   180f4:	dd800617 	ldw	r22,24(sp)
   180f8:	dd400517 	ldw	r21,20(sp)
   180fc:	dd000417 	ldw	r20,16(sp)
   18100:	dcc00317 	ldw	r19,12(sp)
   18104:	dc800217 	ldw	r18,8(sp)
   18108:	dc400117 	ldw	r17,4(sp)
   1810c:	dc000017 	ldw	r16,0(sp)
   18110:	dec00a04 	addi	sp,sp,40
   18114:	f800283a 	ret

00018118 <___svfiprintf_internal_r>:
   18118:	2880030b 	ldhu	r2,12(r5)
   1811c:	deffc804 	addi	sp,sp,-224
   18120:	dcc03115 	stw	r19,196(sp)
   18124:	dfc03715 	stw	ra,220(sp)
   18128:	df003615 	stw	fp,216(sp)
   1812c:	ddc03515 	stw	r23,212(sp)
   18130:	dd803415 	stw	r22,208(sp)
   18134:	dd403315 	stw	r21,204(sp)
   18138:	dd003215 	stw	r20,200(sp)
   1813c:	dc803015 	stw	r18,192(sp)
   18140:	dc402f15 	stw	r17,188(sp)
   18144:	dc002e15 	stw	r16,184(sp)
   18148:	d9402315 	stw	r5,140(sp)
   1814c:	d9002715 	stw	r4,156(sp)
   18150:	1080200c 	andi	r2,r2,128
   18154:	d9c02415 	stw	r7,144(sp)
   18158:	3027883a 	mov	r19,r6
   1815c:	10000226 	beq	r2,zero,18168 <___svfiprintf_internal_r+0x50>
   18160:	28800417 	ldw	r2,16(r5)
   18164:	10046d26 	beq	r2,zero,1931c <___svfiprintf_internal_r+0x1204>
   18168:	d8801a04 	addi	r2,sp,104
   1816c:	d8c019c4 	addi	r3,sp,103
   18170:	058000f4 	movhi	r22,3
   18174:	10c9c83a 	sub	r4,r2,r3
   18178:	b5a97a04 	addi	r22,r22,-23064
   1817c:	d8801e15 	stw	r2,120(sp)
   18180:	d8c01f15 	stw	r3,124(sp)
   18184:	dec01a15 	stw	sp,104(sp)
   18188:	d8001c15 	stw	zero,112(sp)
   1818c:	d8001b15 	stw	zero,108(sp)
   18190:	d811883a 	mov	r8,sp
   18194:	d8002915 	stw	zero,164(sp)
   18198:	d8002615 	stw	zero,152(sp)
   1819c:	d9002c15 	stw	r4,176(sp)
   181a0:	98800007 	ldb	r2,0(r19)
   181a4:	10031426 	beq	r2,zero,18df8 <___svfiprintf_internal_r+0xce0>
   181a8:	00c00944 	movi	r3,37
   181ac:	9825883a 	mov	r18,r19
   181b0:	10c0021e 	bne	r2,r3,181bc <___svfiprintf_internal_r+0xa4>
   181b4:	00001406 	br	18208 <___svfiprintf_internal_r+0xf0>
   181b8:	10c00326 	beq	r2,r3,181c8 <___svfiprintf_internal_r+0xb0>
   181bc:	94800044 	addi	r18,r18,1
   181c0:	90800007 	ldb	r2,0(r18)
   181c4:	103ffc1e 	bne	r2,zero,181b8 <__alt_data_end+0xfc0181b8>
   181c8:	94e1c83a 	sub	r16,r18,r19
   181cc:	80000e26 	beq	r16,zero,18208 <___svfiprintf_internal_r+0xf0>
   181d0:	d8c01c17 	ldw	r3,112(sp)
   181d4:	d8801b17 	ldw	r2,108(sp)
   181d8:	44c00015 	stw	r19,0(r8)
   181dc:	1c07883a 	add	r3,r3,r16
   181e0:	10800044 	addi	r2,r2,1
   181e4:	d8c01c15 	stw	r3,112(sp)
   181e8:	44000115 	stw	r16,4(r8)
   181ec:	d8801b15 	stw	r2,108(sp)
   181f0:	00c001c4 	movi	r3,7
   181f4:	18835c16 	blt	r3,r2,18f68 <___svfiprintf_internal_r+0xe50>
   181f8:	42000204 	addi	r8,r8,8
   181fc:	d9402617 	ldw	r5,152(sp)
   18200:	2c0b883a 	add	r5,r5,r16
   18204:	d9402615 	stw	r5,152(sp)
   18208:	90800007 	ldb	r2,0(r18)
   1820c:	1002fc26 	beq	r2,zero,18e00 <___svfiprintf_internal_r+0xce8>
   18210:	0023883a 	mov	r17,zero
   18214:	00bfffc4 	movi	r2,-1
   18218:	0021883a 	mov	r16,zero
   1821c:	94c00044 	addi	r19,r18,1
   18220:	90c00047 	ldb	r3,1(r18)
   18224:	dc402105 	stb	r17,132(sp)
   18228:	d8001d85 	stb	zero,118(sp)
   1822c:	002b883a 	mov	r21,zero
   18230:	d8802015 	stw	r2,128(sp)
   18234:	d8002515 	stw	zero,148(sp)
   18238:	04801604 	movi	r18,88
   1823c:	05000244 	movi	r20,9
   18240:	402f883a 	mov	r23,r8
   18244:	8023883a 	mov	r17,r16
   18248:	9cc00044 	addi	r19,r19,1
   1824c:	18bff804 	addi	r2,r3,-32
   18250:	9081fb36 	bltu	r18,r2,18a40 <___svfiprintf_internal_r+0x928>
   18254:	100490ba 	slli	r2,r2,2
   18258:	010000b4 	movhi	r4,2
   1825c:	21209b04 	addi	r4,r4,-32148
   18260:	1105883a 	add	r2,r2,r4
   18264:	10800017 	ldw	r2,0(r2)
   18268:	1000683a 	jmp	r2
   1826c:	0001846c 	andhi	zero,zero,1553
   18270:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18274:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18278:	00018460 	cmpeqi	zero,zero,1553
   1827c:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18280:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18284:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18288:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   1828c:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18290:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18294:	000183d0 	cmplti	zero,zero,1551
   18298:	000185cc 	andi	zero,zero,1559
   1829c:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182a0:	000183f8 	rdprs	zero,zero,1551
   182a4:	00018a7c 	xorhi	zero,zero,1577
   182a8:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182ac:	00018a70 	cmpltui	zero,zero,1577
   182b0:	00018a04 	movi	zero,1576
   182b4:	00018a04 	movi	zero,1576
   182b8:	00018a04 	movi	zero,1576
   182bc:	00018a04 	movi	zero,1576
   182c0:	00018a04 	movi	zero,1576
   182c4:	00018a04 	movi	zero,1576
   182c8:	00018a04 	movi	zero,1576
   182cc:	00018a04 	movi	zero,1576
   182d0:	00018a04 	movi	zero,1576
   182d4:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182d8:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182dc:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182e0:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182e4:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182e8:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182ec:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182f0:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182f4:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182f8:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   182fc:	00018988 	cmpgei	zero,zero,1574
   18300:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18304:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18308:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   1830c:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18310:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18314:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18318:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   1831c:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18320:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18324:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18328:	00018b38 	rdprs	zero,zero,1580
   1832c:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18330:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18334:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18338:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   1833c:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18340:	00018ac4 	movi	zero,1579
   18344:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18348:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   1834c:	000187c4 	movi	zero,1567
   18350:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18354:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18358:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   1835c:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18360:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18364:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18368:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   1836c:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18370:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18374:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18378:	00018690 	cmplti	zero,zero,1562
   1837c:	00018874 	movhi	zero,1569
   18380:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18384:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18388:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   1838c:	00018868 	cmpgeui	zero,zero,1569
   18390:	00018874 	movhi	zero,1569
   18394:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   18398:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   1839c:	00018854 	movui	zero,1569
   183a0:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   183a4:	00018814 	movui	zero,1568
   183a8:	000185e0 	cmpeqi	zero,zero,1559
   183ac:	00018404 	movi	zero,1552
   183b0:	0001897c 	xorhi	zero,zero,1573
   183b4:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   183b8:	00018928 	cmpgeui	zero,zero,1572
   183bc:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   183c0:	00018544 	movi	zero,1557
   183c4:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   183c8:	00018a40 	call	18a4 <_ZN3USB4TaskEv+0x88>
   183cc:	00018490 	cmplti	zero,zero,1554
   183d0:	d9002417 	ldw	r4,144(sp)
   183d4:	d9402417 	ldw	r5,144(sp)
   183d8:	21000017 	ldw	r4,0(r4)
   183dc:	28800104 	addi	r2,r5,4
   183e0:	d9002515 	stw	r4,148(sp)
   183e4:	20032b0e 	bge	r4,zero,19094 <___svfiprintf_internal_r+0xf7c>
   183e8:	d8c02517 	ldw	r3,148(sp)
   183ec:	d8802415 	stw	r2,144(sp)
   183f0:	00c7c83a 	sub	r3,zero,r3
   183f4:	d8c02515 	stw	r3,148(sp)
   183f8:	8c400114 	ori	r17,r17,4
   183fc:	98c00007 	ldb	r3,0(r19)
   18400:	003f9106 	br	18248 <__alt_data_end+0xfc018248>
   18404:	00800c04 	movi	r2,48
   18408:	d9402417 	ldw	r5,144(sp)
   1840c:	d9002017 	ldw	r4,128(sp)
   18410:	d8801d05 	stb	r2,116(sp)
   18414:	00801e04 	movi	r2,120
   18418:	d8801d45 	stb	r2,117(sp)
   1841c:	d8001d85 	stb	zero,118(sp)
   18420:	b811883a 	mov	r8,r23
   18424:	28c00104 	addi	r3,r5,4
   18428:	2c800017 	ldw	r18,0(r5)
   1842c:	0029883a 	mov	r20,zero
   18430:	88800094 	ori	r2,r17,2
   18434:	20036316 	blt	r4,zero,191c4 <___svfiprintf_internal_r+0x10ac>
   18438:	00bfdfc4 	movi	r2,-129
   1843c:	88a0703a 	and	r16,r17,r2
   18440:	d8c02415 	stw	r3,144(sp)
   18444:	84000094 	ori	r16,r16,2
   18448:	90031c26 	beq	r18,zero,190bc <___svfiprintf_internal_r+0xfa4>
   1844c:	014000f4 	movhi	r5,3
   18450:	29691204 	addi	r5,r5,-23480
   18454:	002b883a 	mov	r21,zero
   18458:	d9402915 	stw	r5,164(sp)
   1845c:	00002906 	br	18504 <___svfiprintf_internal_r+0x3ec>
   18460:	8c400054 	ori	r17,r17,1
   18464:	98c00007 	ldb	r3,0(r19)
   18468:	003f7706 	br	18248 <__alt_data_end+0xfc018248>
   1846c:	a8803fcc 	andi	r2,r21,255
   18470:	1080201c 	xori	r2,r2,128
   18474:	10bfe004 	addi	r2,r2,-128
   18478:	10032a1e 	bne	r2,zero,19124 <___svfiprintf_internal_r+0x100c>
   1847c:	00c00044 	movi	r3,1
   18480:	d8c02105 	stb	r3,132(sp)
   18484:	05400804 	movi	r21,32
   18488:	98c00007 	ldb	r3,0(r19)
   1848c:	003f6e06 	br	18248 <__alt_data_end+0xfc018248>
   18490:	8821883a 	mov	r16,r17
   18494:	dc402103 	ldbu	r17,132(sp)
   18498:	b811883a 	mov	r8,r23
   1849c:	8c403fcc 	andi	r17,r17,255
   184a0:	8803f01e 	bne	r17,zero,19464 <___svfiprintf_internal_r+0x134c>
   184a4:	008000f4 	movhi	r2,3
   184a8:	10a91204 	addi	r2,r2,-23480
   184ac:	d8802915 	stw	r2,164(sp)
   184b0:	8080080c 	andi	r2,r16,32
   184b4:	1000cd26 	beq	r2,zero,187ec <___svfiprintf_internal_r+0x6d4>
   184b8:	d9002417 	ldw	r4,144(sp)
   184bc:	24800017 	ldw	r18,0(r4)
   184c0:	25000117 	ldw	r20,4(r4)
   184c4:	21000204 	addi	r4,r4,8
   184c8:	d9002415 	stw	r4,144(sp)
   184cc:	8080004c 	andi	r2,r16,1
   184d0:	1002c726 	beq	r2,zero,18ff0 <___svfiprintf_internal_r+0xed8>
   184d4:	9504b03a 	or	r2,r18,r20
   184d8:	1003061e 	bne	r2,zero,190f4 <___svfiprintf_internal_r+0xfdc>
   184dc:	d9002017 	ldw	r4,128(sp)
   184e0:	d8001d85 	stb	zero,118(sp)
   184e4:	20033e16 	blt	r4,zero,191e0 <___svfiprintf_internal_r+0x10c8>
   184e8:	00bfdfc4 	movi	r2,-129
   184ec:	80a0703a 	and	r16,r16,r2
   184f0:	d9402017 	ldw	r5,128(sp)
   184f4:	002b883a 	mov	r21,zero
   184f8:	28002826 	beq	r5,zero,1859c <___svfiprintf_internal_r+0x484>
   184fc:	0025883a 	mov	r18,zero
   18500:	0029883a 	mov	r20,zero
   18504:	d9002917 	ldw	r4,164(sp)
   18508:	dc401a04 	addi	r17,sp,104
   1850c:	908003cc 	andi	r2,r18,15
   18510:	a006973a 	slli	r3,r20,28
   18514:	2085883a 	add	r2,r4,r2
   18518:	9024d13a 	srli	r18,r18,4
   1851c:	10800003 	ldbu	r2,0(r2)
   18520:	a028d13a 	srli	r20,r20,4
   18524:	8c7fffc4 	addi	r17,r17,-1
   18528:	1ca4b03a 	or	r18,r3,r18
   1852c:	88800005 	stb	r2,0(r17)
   18530:	9504b03a 	or	r2,r18,r20
   18534:	103ff51e 	bne	r2,zero,1850c <__alt_data_end+0xfc01850c>
   18538:	d8801e17 	ldw	r2,120(sp)
   1853c:	1469c83a 	sub	r20,r2,r17
   18540:	00001906 	br	185a8 <___svfiprintf_internal_r+0x490>
   18544:	8821883a 	mov	r16,r17
   18548:	dc402103 	ldbu	r17,132(sp)
   1854c:	b811883a 	mov	r8,r23
   18550:	8c403fcc 	andi	r17,r17,255
   18554:	8803d01e 	bne	r17,zero,19498 <___svfiprintf_internal_r+0x1380>
   18558:	8080080c 	andi	r2,r16,32
   1855c:	10016126 	beq	r2,zero,18ae4 <___svfiprintf_internal_r+0x9cc>
   18560:	d9002417 	ldw	r4,144(sp)
   18564:	d9402017 	ldw	r5,128(sp)
   18568:	d8001d85 	stb	zero,118(sp)
   1856c:	20c00204 	addi	r3,r4,8
   18570:	24800017 	ldw	r18,0(r4)
   18574:	25000117 	ldw	r20,4(r4)
   18578:	28030f16 	blt	r5,zero,191b8 <___svfiprintf_internal_r+0x10a0>
   1857c:	013fdfc4 	movi	r4,-129
   18580:	9504b03a 	or	r2,r18,r20
   18584:	d8c02415 	stw	r3,144(sp)
   18588:	8120703a 	and	r16,r16,r4
   1858c:	002b883a 	mov	r21,zero
   18590:	1000cd1e 	bne	r2,zero,188c8 <___svfiprintf_internal_r+0x7b0>
   18594:	d8c02017 	ldw	r3,128(sp)
   18598:	1803141e 	bne	r3,zero,191ec <___svfiprintf_internal_r+0x10d4>
   1859c:	d8002015 	stw	zero,128(sp)
   185a0:	0029883a 	mov	r20,zero
   185a4:	dc401a04 	addi	r17,sp,104
   185a8:	dc802017 	ldw	r18,128(sp)
   185ac:	9500010e 	bge	r18,r20,185b4 <___svfiprintf_internal_r+0x49c>
   185b0:	a025883a 	mov	r18,r20
   185b4:	ad403fcc 	andi	r21,r21,255
   185b8:	ad40201c 	xori	r21,r21,128
   185bc:	ad7fe004 	addi	r21,r21,-128
   185c0:	a8003f26 	beq	r21,zero,186c0 <___svfiprintf_internal_r+0x5a8>
   185c4:	94800044 	addi	r18,r18,1
   185c8:	00003d06 	br	186c0 <___svfiprintf_internal_r+0x5a8>
   185cc:	00c00044 	movi	r3,1
   185d0:	d8c02105 	stb	r3,132(sp)
   185d4:	05400ac4 	movi	r21,43
   185d8:	98c00007 	ldb	r3,0(r19)
   185dc:	003f1a06 	br	18248 <__alt_data_end+0xfc018248>
   185e0:	8821883a 	mov	r16,r17
   185e4:	dc402103 	ldbu	r17,132(sp)
   185e8:	b811883a 	mov	r8,r23
   185ec:	8c403fcc 	andi	r17,r17,255
   185f0:	8803a71e 	bne	r17,zero,19490 <___svfiprintf_internal_r+0x1378>
   185f4:	8080080c 	andi	r2,r16,32
   185f8:	10015726 	beq	r2,zero,18b58 <___svfiprintf_internal_r+0xa40>
   185fc:	d8c02417 	ldw	r3,144(sp)
   18600:	d9002017 	ldw	r4,128(sp)
   18604:	d8001d85 	stb	zero,118(sp)
   18608:	18800204 	addi	r2,r3,8
   1860c:	1c800017 	ldw	r18,0(r3)
   18610:	1d000117 	ldw	r20,4(r3)
   18614:	2002db16 	blt	r4,zero,19184 <___svfiprintf_internal_r+0x106c>
   18618:	013fdfc4 	movi	r4,-129
   1861c:	9506b03a 	or	r3,r18,r20
   18620:	d8802415 	stw	r2,144(sp)
   18624:	8120703a 	and	r16,r16,r4
   18628:	18015826 	beq	r3,zero,18b8c <___svfiprintf_internal_r+0xa74>
   1862c:	002b883a 	mov	r21,zero
   18630:	dc401a04 	addi	r17,sp,104
   18634:	9006d0fa 	srli	r3,r18,3
   18638:	a008977a 	slli	r4,r20,29
   1863c:	a028d0fa 	srli	r20,r20,3
   18640:	948001cc 	andi	r18,r18,7
   18644:	90800c04 	addi	r2,r18,48
   18648:	8c7fffc4 	addi	r17,r17,-1
   1864c:	20e4b03a 	or	r18,r4,r3
   18650:	88800005 	stb	r2,0(r17)
   18654:	9506b03a 	or	r3,r18,r20
   18658:	183ff61e 	bne	r3,zero,18634 <__alt_data_end+0xfc018634>
   1865c:	80c0004c 	andi	r3,r16,1
   18660:	18028926 	beq	r3,zero,19088 <___svfiprintf_internal_r+0xf70>
   18664:	10803fcc 	andi	r2,r2,255
   18668:	1080201c 	xori	r2,r2,128
   1866c:	10bfe004 	addi	r2,r2,-128
   18670:	00c00c04 	movi	r3,48
   18674:	10ffb026 	beq	r2,r3,18538 <__alt_data_end+0xfc018538>
   18678:	88ffffc5 	stb	r3,-1(r17)
   1867c:	d8c01e17 	ldw	r3,120(sp)
   18680:	88bfffc4 	addi	r2,r17,-1
   18684:	1023883a 	mov	r17,r2
   18688:	18a9c83a 	sub	r20,r3,r2
   1868c:	003fc606 	br	185a8 <__alt_data_end+0xfc0185a8>
   18690:	d8c02417 	ldw	r3,144(sp)
   18694:	04800044 	movi	r18,1
   18698:	8821883a 	mov	r16,r17
   1869c:	18800017 	ldw	r2,0(r3)
   186a0:	18c00104 	addi	r3,r3,4
   186a4:	b811883a 	mov	r8,r23
   186a8:	d8001d85 	stb	zero,118(sp)
   186ac:	d8801005 	stb	r2,64(sp)
   186b0:	d8c02415 	stw	r3,144(sp)
   186b4:	9029883a 	mov	r20,r18
   186b8:	dc401004 	addi	r17,sp,64
   186bc:	d8002015 	stw	zero,128(sp)
   186c0:	80c0008c 	andi	r3,r16,2
   186c4:	d8c02115 	stw	r3,132(sp)
   186c8:	18000126 	beq	r3,zero,186d0 <___svfiprintf_internal_r+0x5b8>
   186cc:	94800084 	addi	r18,r18,2
   186d0:	80c0210c 	andi	r3,r16,132
   186d4:	d8c02215 	stw	r3,136(sp)
   186d8:	1801321e 	bne	r3,zero,18ba4 <___svfiprintf_internal_r+0xa8c>
   186dc:	d9002517 	ldw	r4,148(sp)
   186e0:	24b9c83a 	sub	fp,r4,r18
   186e4:	07012f0e 	bge	zero,fp,18ba4 <___svfiprintf_internal_r+0xa8c>
   186e8:	02400404 	movi	r9,16
   186ec:	d8c01c17 	ldw	r3,112(sp)
   186f0:	d8801b17 	ldw	r2,108(sp)
   186f4:	4f03250e 	bge	r9,fp,1938c <___svfiprintf_internal_r+0x1274>
   186f8:	010000f4 	movhi	r4,3
   186fc:	21297e04 	addi	r4,r4,-23048
   18700:	dc002a15 	stw	r16,168(sp)
   18704:	dc402b15 	stw	r17,172(sp)
   18708:	d9002815 	stw	r4,160(sp)
   1870c:	e023883a 	mov	r17,fp
   18710:	482f883a 	mov	r23,r9
   18714:	9839883a 	mov	fp,r19
   18718:	054001c4 	movi	r21,7
   1871c:	9027883a 	mov	r19,r18
   18720:	dc002717 	ldw	r16,156(sp)
   18724:	dc802317 	ldw	r18,140(sp)
   18728:	00000306 	br	18738 <___svfiprintf_internal_r+0x620>
   1872c:	8c7ffc04 	addi	r17,r17,-16
   18730:	42000204 	addi	r8,r8,8
   18734:	bc40130e 	bge	r23,r17,18784 <___svfiprintf_internal_r+0x66c>
   18738:	014000f4 	movhi	r5,3
   1873c:	18c00404 	addi	r3,r3,16
   18740:	10800044 	addi	r2,r2,1
   18744:	29697e04 	addi	r5,r5,-23048
   18748:	41400015 	stw	r5,0(r8)
   1874c:	45c00115 	stw	r23,4(r8)
   18750:	d8c01c15 	stw	r3,112(sp)
   18754:	d8801b15 	stw	r2,108(sp)
   18758:	a8bff40e 	bge	r21,r2,1872c <__alt_data_end+0xfc01872c>
   1875c:	d9801a04 	addi	r6,sp,104
   18760:	900b883a 	mov	r5,r18
   18764:	8009883a 	mov	r4,r16
   18768:	0017f480 	call	17f48 <__ssprint_r>
   1876c:	1001aa1e 	bne	r2,zero,18e18 <___svfiprintf_internal_r+0xd00>
   18770:	8c7ffc04 	addi	r17,r17,-16
   18774:	d8c01c17 	ldw	r3,112(sp)
   18778:	d8801b17 	ldw	r2,108(sp)
   1877c:	d811883a 	mov	r8,sp
   18780:	bc7fed16 	blt	r23,r17,18738 <__alt_data_end+0xfc018738>
   18784:	9825883a 	mov	r18,r19
   18788:	dc002a17 	ldw	r16,168(sp)
   1878c:	e027883a 	mov	r19,fp
   18790:	8839883a 	mov	fp,r17
   18794:	dc402b17 	ldw	r17,172(sp)
   18798:	d9002817 	ldw	r4,160(sp)
   1879c:	e0c7883a 	add	r3,fp,r3
   187a0:	10800044 	addi	r2,r2,1
   187a4:	41000015 	stw	r4,0(r8)
   187a8:	47000115 	stw	fp,4(r8)
   187ac:	d8c01c15 	stw	r3,112(sp)
   187b0:	d8801b15 	stw	r2,108(sp)
   187b4:	010001c4 	movi	r4,7
   187b8:	20821616 	blt	r4,r2,19014 <___svfiprintf_internal_r+0xefc>
   187bc:	42000204 	addi	r8,r8,8
   187c0:	0000fa06 	br	18bac <___svfiprintf_internal_r+0xa94>
   187c4:	8821883a 	mov	r16,r17
   187c8:	dc402103 	ldbu	r17,132(sp)
   187cc:	b811883a 	mov	r8,r23
   187d0:	8c403fcc 	andi	r17,r17,255
   187d4:	8803361e 	bne	r17,zero,194b0 <___svfiprintf_internal_r+0x1398>
   187d8:	014000f4 	movhi	r5,3
   187dc:	29690d04 	addi	r5,r5,-23500
   187e0:	d9402915 	stw	r5,164(sp)
   187e4:	8080080c 	andi	r2,r16,32
   187e8:	103f331e 	bne	r2,zero,184b8 <__alt_data_end+0xfc0184b8>
   187ec:	8080040c 	andi	r2,r16,16
   187f0:	1002551e 	bne	r2,zero,19148 <___svfiprintf_internal_r+0x1030>
   187f4:	8080100c 	andi	r2,r16,64
   187f8:	1002a626 	beq	r2,zero,19294 <___svfiprintf_internal_r+0x117c>
   187fc:	d8802417 	ldw	r2,144(sp)
   18800:	0029883a 	mov	r20,zero
   18804:	1480000b 	ldhu	r18,0(r2)
   18808:	10800104 	addi	r2,r2,4
   1880c:	d8802415 	stw	r2,144(sp)
   18810:	003f2e06 	br	184cc <__alt_data_end+0xfc0184cc>
   18814:	8821883a 	mov	r16,r17
   18818:	dc402103 	ldbu	r17,132(sp)
   1881c:	b811883a 	mov	r8,r23
   18820:	8c403fcc 	andi	r17,r17,255
   18824:	88030b1e 	bne	r17,zero,19454 <___svfiprintf_internal_r+0x133c>
   18828:	8080080c 	andi	r2,r16,32
   1882c:	1002271e 	bne	r2,zero,190cc <___svfiprintf_internal_r+0xfb4>
   18830:	8080040c 	andi	r2,r16,16
   18834:	10028e26 	beq	r2,zero,19270 <___svfiprintf_internal_r+0x1158>
   18838:	d8c02417 	ldw	r3,144(sp)
   1883c:	d9002617 	ldw	r4,152(sp)
   18840:	18800017 	ldw	r2,0(r3)
   18844:	18c00104 	addi	r3,r3,4
   18848:	d8c02415 	stw	r3,144(sp)
   1884c:	11000015 	stw	r4,0(r2)
   18850:	003e5306 	br	181a0 <__alt_data_end+0xfc0181a0>
   18854:	98c00007 	ldb	r3,0(r19)
   18858:	01401b04 	movi	r5,108
   1885c:	19424f26 	beq	r3,r5,1919c <___svfiprintf_internal_r+0x1084>
   18860:	8c400414 	ori	r17,r17,16
   18864:	003e7806 	br	18248 <__alt_data_end+0xfc018248>
   18868:	8c401014 	ori	r17,r17,64
   1886c:	98c00007 	ldb	r3,0(r19)
   18870:	003e7506 	br	18248 <__alt_data_end+0xfc018248>
   18874:	8821883a 	mov	r16,r17
   18878:	dc402103 	ldbu	r17,132(sp)
   1887c:	b811883a 	mov	r8,r23
   18880:	8c403fcc 	andi	r17,r17,255
   18884:	8802fe1e 	bne	r17,zero,19480 <___svfiprintf_internal_r+0x1368>
   18888:	8080080c 	andi	r2,r16,32
   1888c:	10004626 	beq	r2,zero,189a8 <___svfiprintf_internal_r+0x890>
   18890:	d9002417 	ldw	r4,144(sp)
   18894:	20800117 	ldw	r2,4(r4)
   18898:	24800017 	ldw	r18,0(r4)
   1889c:	21000204 	addi	r4,r4,8
   188a0:	d9002415 	stw	r4,144(sp)
   188a4:	1029883a 	mov	r20,r2
   188a8:	10004a16 	blt	r2,zero,189d4 <___svfiprintf_internal_r+0x8bc>
   188ac:	d9002017 	ldw	r4,128(sp)
   188b0:	dd401d83 	ldbu	r21,118(sp)
   188b4:	2001eb16 	blt	r4,zero,19064 <___svfiprintf_internal_r+0xf4c>
   188b8:	00ffdfc4 	movi	r3,-129
   188bc:	9504b03a 	or	r2,r18,r20
   188c0:	80e0703a 	and	r16,r16,r3
   188c4:	103f3326 	beq	r2,zero,18594 <__alt_data_end+0xfc018594>
   188c8:	a0009426 	beq	r20,zero,18b1c <___svfiprintf_internal_r+0xa04>
   188cc:	dc401a04 	addi	r17,sp,104
   188d0:	402f883a 	mov	r23,r8
   188d4:	9009883a 	mov	r4,r18
   188d8:	a00b883a 	mov	r5,r20
   188dc:	01800284 	movi	r6,10
   188e0:	000f883a 	mov	r7,zero
   188e4:	001baf80 	call	1baf8 <__umoddi3>
   188e8:	10800c04 	addi	r2,r2,48
   188ec:	8c7fffc4 	addi	r17,r17,-1
   188f0:	9009883a 	mov	r4,r18
   188f4:	a00b883a 	mov	r5,r20
   188f8:	88800005 	stb	r2,0(r17)
   188fc:	01800284 	movi	r6,10
   18900:	000f883a 	mov	r7,zero
   18904:	001b4fc0 	call	1b4fc <__udivdi3>
   18908:	1025883a 	mov	r18,r2
   1890c:	10c4b03a 	or	r2,r2,r3
   18910:	1829883a 	mov	r20,r3
   18914:	103fef1e 	bne	r2,zero,188d4 <__alt_data_end+0xfc0188d4>
   18918:	d9001e17 	ldw	r4,120(sp)
   1891c:	b811883a 	mov	r8,r23
   18920:	2469c83a 	sub	r20,r4,r17
   18924:	003f2006 	br	185a8 <__alt_data_end+0xfc0185a8>
   18928:	d8802417 	ldw	r2,144(sp)
   1892c:	8821883a 	mov	r16,r17
   18930:	d8001d85 	stb	zero,118(sp)
   18934:	14400017 	ldw	r17,0(r2)
   18938:	b811883a 	mov	r8,r23
   1893c:	15c00104 	addi	r23,r2,4
   18940:	88026c26 	beq	r17,zero,192f4 <___svfiprintf_internal_r+0x11dc>
   18944:	d8c02017 	ldw	r3,128(sp)
   18948:	18025f16 	blt	r3,zero,192c8 <___svfiprintf_internal_r+0x11b0>
   1894c:	180d883a 	mov	r6,r3
   18950:	000b883a 	mov	r5,zero
   18954:	8809883a 	mov	r4,r17
   18958:	da002d15 	stw	r8,180(sp)
   1895c:	00163d40 	call	163d4 <memchr>
   18960:	da002d17 	ldw	r8,180(sp)
   18964:	1002a526 	beq	r2,zero,193fc <___svfiprintf_internal_r+0x12e4>
   18968:	1469c83a 	sub	r20,r2,r17
   1896c:	dd401d83 	ldbu	r21,118(sp)
   18970:	ddc02415 	stw	r23,144(sp)
   18974:	d8002015 	stw	zero,128(sp)
   18978:	003f0b06 	br	185a8 <__alt_data_end+0xfc0185a8>
   1897c:	8c400814 	ori	r17,r17,32
   18980:	98c00007 	ldb	r3,0(r19)
   18984:	003e3006 	br	18248 <__alt_data_end+0xfc018248>
   18988:	8821883a 	mov	r16,r17
   1898c:	dc402103 	ldbu	r17,132(sp)
   18990:	b811883a 	mov	r8,r23
   18994:	8c403fcc 	andi	r17,r17,255
   18998:	8802b01e 	bne	r17,zero,1945c <___svfiprintf_internal_r+0x1344>
   1899c:	84000414 	ori	r16,r16,16
   189a0:	8080080c 	andi	r2,r16,32
   189a4:	103fba1e 	bne	r2,zero,18890 <__alt_data_end+0xfc018890>
   189a8:	8080040c 	andi	r2,r16,16
   189ac:	1001df1e 	bne	r2,zero,1912c <___svfiprintf_internal_r+0x1014>
   189b0:	8080100c 	andi	r2,r16,64
   189b4:	10023d26 	beq	r2,zero,192ac <___svfiprintf_internal_r+0x1194>
   189b8:	d8802417 	ldw	r2,144(sp)
   189bc:	1480000f 	ldh	r18,0(r2)
   189c0:	10800104 	addi	r2,r2,4
   189c4:	d8802415 	stw	r2,144(sp)
   189c8:	9029d7fa 	srai	r20,r18,31
   189cc:	a005883a 	mov	r2,r20
   189d0:	103fb60e 	bge	r2,zero,188ac <__alt_data_end+0xfc0188ac>
   189d4:	d9402017 	ldw	r5,128(sp)
   189d8:	04a5c83a 	sub	r18,zero,r18
   189dc:	05400b44 	movi	r21,45
   189e0:	9004c03a 	cmpne	r2,r18,zero
   189e4:	0529c83a 	sub	r20,zero,r20
   189e8:	dd401d85 	stb	r21,118(sp)
   189ec:	a0a9c83a 	sub	r20,r20,r2
   189f0:	28026c16 	blt	r5,zero,193a4 <___svfiprintf_internal_r+0x128c>
   189f4:	00bfdfc4 	movi	r2,-129
   189f8:	80a0703a 	and	r16,r16,r2
   189fc:	a03fb31e 	bne	r20,zero,188cc <__alt_data_end+0xfc0188cc>
   18a00:	00004606 	br	18b1c <___svfiprintf_internal_r+0xa04>
   18a04:	9839883a 	mov	fp,r19
   18a08:	d8002515 	stw	zero,148(sp)
   18a0c:	1c3ff404 	addi	r16,r3,-48
   18a10:	0009883a 	mov	r4,zero
   18a14:	01400284 	movi	r5,10
   18a18:	000ce000 	call	ce00 <__mulsi3>
   18a1c:	e0c00007 	ldb	r3,0(fp)
   18a20:	8089883a 	add	r4,r16,r2
   18a24:	9cc00044 	addi	r19,r19,1
   18a28:	1c3ff404 	addi	r16,r3,-48
   18a2c:	9839883a 	mov	fp,r19
   18a30:	a43ff82e 	bgeu	r20,r16,18a14 <__alt_data_end+0xfc018a14>
   18a34:	d9002515 	stw	r4,148(sp)
   18a38:	18bff804 	addi	r2,r3,-32
   18a3c:	90be052e 	bgeu	r18,r2,18254 <__alt_data_end+0xfc018254>
   18a40:	8821883a 	mov	r16,r17
   18a44:	dc402103 	ldbu	r17,132(sp)
   18a48:	b811883a 	mov	r8,r23
   18a4c:	8c403fcc 	andi	r17,r17,255
   18a50:	88028d1e 	bne	r17,zero,19488 <___svfiprintf_internal_r+0x1370>
   18a54:	1800ea26 	beq	r3,zero,18e00 <___svfiprintf_internal_r+0xce8>
   18a58:	04800044 	movi	r18,1
   18a5c:	d8c01005 	stb	r3,64(sp)
   18a60:	d8001d85 	stb	zero,118(sp)
   18a64:	9029883a 	mov	r20,r18
   18a68:	dc401004 	addi	r17,sp,64
   18a6c:	003f1306 	br	186bc <__alt_data_end+0xfc0186bc>
   18a70:	8c402014 	ori	r17,r17,128
   18a74:	98c00007 	ldb	r3,0(r19)
   18a78:	003df306 	br	18248 <__alt_data_end+0xfc018248>
   18a7c:	98c00007 	ldb	r3,0(r19)
   18a80:	01000a84 	movi	r4,42
   18a84:	9f000044 	addi	fp,r19,1
   18a88:	19026326 	beq	r3,r4,19418 <___svfiprintf_internal_r+0x1300>
   18a8c:	1c3ff404 	addi	r16,r3,-48
   18a90:	0009883a 	mov	r4,zero
   18a94:	a4025636 	bltu	r20,r16,193f0 <___svfiprintf_internal_r+0x12d8>
   18a98:	01400284 	movi	r5,10
   18a9c:	000ce000 	call	ce00 <__mulsi3>
   18aa0:	e0c00007 	ldb	r3,0(fp)
   18aa4:	1409883a 	add	r4,r2,r16
   18aa8:	e4c00044 	addi	r19,fp,1
   18aac:	1c3ff404 	addi	r16,r3,-48
   18ab0:	9839883a 	mov	fp,r19
   18ab4:	a43ff82e 	bgeu	r20,r16,18a98 <__alt_data_end+0xfc018a98>
   18ab8:	20020c16 	blt	r4,zero,192ec <___svfiprintf_internal_r+0x11d4>
   18abc:	d9002015 	stw	r4,128(sp)
   18ac0:	003de206 	br	1824c <__alt_data_end+0xfc01824c>
   18ac4:	8821883a 	mov	r16,r17
   18ac8:	dc402103 	ldbu	r17,132(sp)
   18acc:	b811883a 	mov	r8,r23
   18ad0:	8c403fcc 	andi	r17,r17,255
   18ad4:	8802721e 	bne	r17,zero,194a0 <___svfiprintf_internal_r+0x1388>
   18ad8:	84000414 	ori	r16,r16,16
   18adc:	8080080c 	andi	r2,r16,32
   18ae0:	103e9f1e 	bne	r2,zero,18560 <__alt_data_end+0xfc018560>
   18ae4:	8080040c 	andi	r2,r16,16
   18ae8:	10015326 	beq	r2,zero,19038 <___svfiprintf_internal_r+0xf20>
   18aec:	d8c02417 	ldw	r3,144(sp)
   18af0:	d9002017 	ldw	r4,128(sp)
   18af4:	d8001d85 	stb	zero,118(sp)
   18af8:	18800104 	addi	r2,r3,4
   18afc:	1c800017 	ldw	r18,0(r3)
   18b00:	0029883a 	mov	r20,zero
   18b04:	20015516 	blt	r4,zero,1905c <___svfiprintf_internal_r+0xf44>
   18b08:	00ffdfc4 	movi	r3,-129
   18b0c:	d8802415 	stw	r2,144(sp)
   18b10:	80e0703a 	and	r16,r16,r3
   18b14:	002b883a 	mov	r21,zero
   18b18:	903e9e26 	beq	r18,zero,18594 <__alt_data_end+0xfc018594>
   18b1c:	00800244 	movi	r2,9
   18b20:	14bf6a36 	bltu	r2,r18,188cc <__alt_data_end+0xfc0188cc>
   18b24:	94800c04 	addi	r18,r18,48
   18b28:	dc8019c5 	stb	r18,103(sp)
   18b2c:	dd002c17 	ldw	r20,176(sp)
   18b30:	dc4019c4 	addi	r17,sp,103
   18b34:	003e9c06 	br	185a8 <__alt_data_end+0xfc0185a8>
   18b38:	8821883a 	mov	r16,r17
   18b3c:	dc402103 	ldbu	r17,132(sp)
   18b40:	b811883a 	mov	r8,r23
   18b44:	8c403fcc 	andi	r17,r17,255
   18b48:	8802571e 	bne	r17,zero,194a8 <___svfiprintf_internal_r+0x1390>
   18b4c:	84000414 	ori	r16,r16,16
   18b50:	8080080c 	andi	r2,r16,32
   18b54:	103ea91e 	bne	r2,zero,185fc <__alt_data_end+0xfc0185fc>
   18b58:	8080040c 	andi	r2,r16,16
   18b5c:	10018026 	beq	r2,zero,19160 <___svfiprintf_internal_r+0x1048>
   18b60:	d9402417 	ldw	r5,144(sp)
   18b64:	d8c02017 	ldw	r3,128(sp)
   18b68:	d8001d85 	stb	zero,118(sp)
   18b6c:	28800104 	addi	r2,r5,4
   18b70:	2c800017 	ldw	r18,0(r5)
   18b74:	0029883a 	mov	r20,zero
   18b78:	18018216 	blt	r3,zero,19184 <___svfiprintf_internal_r+0x106c>
   18b7c:	00ffdfc4 	movi	r3,-129
   18b80:	d8802415 	stw	r2,144(sp)
   18b84:	80e0703a 	and	r16,r16,r3
   18b88:	903ea81e 	bne	r18,zero,1862c <__alt_data_end+0xfc01862c>
   18b8c:	d8802017 	ldw	r2,128(sp)
   18b90:	002b883a 	mov	r21,zero
   18b94:	1001f226 	beq	r2,zero,19360 <___svfiprintf_internal_r+0x1248>
   18b98:	0025883a 	mov	r18,zero
   18b9c:	0029883a 	mov	r20,zero
   18ba0:	003ea306 	br	18630 <__alt_data_end+0xfc018630>
   18ba4:	d8c01c17 	ldw	r3,112(sp)
   18ba8:	d8801b17 	ldw	r2,108(sp)
   18bac:	d9001d87 	ldb	r4,118(sp)
   18bb0:	20000b26 	beq	r4,zero,18be0 <___svfiprintf_internal_r+0xac8>
   18bb4:	d9001d84 	addi	r4,sp,118
   18bb8:	18c00044 	addi	r3,r3,1
   18bbc:	10800044 	addi	r2,r2,1
   18bc0:	41000015 	stw	r4,0(r8)
   18bc4:	01000044 	movi	r4,1
   18bc8:	41000115 	stw	r4,4(r8)
   18bcc:	d8c01c15 	stw	r3,112(sp)
   18bd0:	d8801b15 	stw	r2,108(sp)
   18bd4:	010001c4 	movi	r4,7
   18bd8:	2080f316 	blt	r4,r2,18fa8 <___svfiprintf_internal_r+0xe90>
   18bdc:	42000204 	addi	r8,r8,8
   18be0:	d9402117 	ldw	r5,132(sp)
   18be4:	28000b26 	beq	r5,zero,18c14 <___svfiprintf_internal_r+0xafc>
   18be8:	d9001d04 	addi	r4,sp,116
   18bec:	18c00084 	addi	r3,r3,2
   18bf0:	10800044 	addi	r2,r2,1
   18bf4:	41000015 	stw	r4,0(r8)
   18bf8:	01000084 	movi	r4,2
   18bfc:	41000115 	stw	r4,4(r8)
   18c00:	d8c01c15 	stw	r3,112(sp)
   18c04:	d8801b15 	stw	r2,108(sp)
   18c08:	010001c4 	movi	r4,7
   18c0c:	2080ef16 	blt	r4,r2,18fcc <___svfiprintf_internal_r+0xeb4>
   18c10:	42000204 	addi	r8,r8,8
   18c14:	d9402217 	ldw	r5,136(sp)
   18c18:	01002004 	movi	r4,128
   18c1c:	29008f26 	beq	r5,r4,18e5c <___svfiprintf_internal_r+0xd44>
   18c20:	d9002017 	ldw	r4,128(sp)
   18c24:	252fc83a 	sub	r23,r4,r20
   18c28:	05c0310e 	bge	zero,r23,18cf0 <___svfiprintf_internal_r+0xbd8>
   18c2c:	07000404 	movi	fp,16
   18c30:	e5c17d0e 	bge	fp,r23,19228 <___svfiprintf_internal_r+0x1110>
   18c34:	010000f4 	movhi	r4,3
   18c38:	21297a04 	addi	r4,r4,-23064
   18c3c:	dc002015 	stw	r16,128(sp)
   18c40:	dc402215 	stw	r17,136(sp)
   18c44:	d9002115 	stw	r4,132(sp)
   18c48:	b823883a 	mov	r17,r23
   18c4c:	054001c4 	movi	r21,7
   18c50:	982f883a 	mov	r23,r19
   18c54:	dc002717 	ldw	r16,156(sp)
   18c58:	9027883a 	mov	r19,r18
   18c5c:	dc802317 	ldw	r18,140(sp)
   18c60:	00000306 	br	18c70 <___svfiprintf_internal_r+0xb58>
   18c64:	8c7ffc04 	addi	r17,r17,-16
   18c68:	42000204 	addi	r8,r8,8
   18c6c:	e440110e 	bge	fp,r17,18cb4 <___svfiprintf_internal_r+0xb9c>
   18c70:	18c00404 	addi	r3,r3,16
   18c74:	10800044 	addi	r2,r2,1
   18c78:	45800015 	stw	r22,0(r8)
   18c7c:	47000115 	stw	fp,4(r8)
   18c80:	d8c01c15 	stw	r3,112(sp)
   18c84:	d8801b15 	stw	r2,108(sp)
   18c88:	a8bff60e 	bge	r21,r2,18c64 <__alt_data_end+0xfc018c64>
   18c8c:	d9801a04 	addi	r6,sp,104
   18c90:	900b883a 	mov	r5,r18
   18c94:	8009883a 	mov	r4,r16
   18c98:	0017f480 	call	17f48 <__ssprint_r>
   18c9c:	10005e1e 	bne	r2,zero,18e18 <___svfiprintf_internal_r+0xd00>
   18ca0:	8c7ffc04 	addi	r17,r17,-16
   18ca4:	d8c01c17 	ldw	r3,112(sp)
   18ca8:	d8801b17 	ldw	r2,108(sp)
   18cac:	d811883a 	mov	r8,sp
   18cb0:	e47fef16 	blt	fp,r17,18c70 <__alt_data_end+0xfc018c70>
   18cb4:	9825883a 	mov	r18,r19
   18cb8:	dc002017 	ldw	r16,128(sp)
   18cbc:	b827883a 	mov	r19,r23
   18cc0:	882f883a 	mov	r23,r17
   18cc4:	dc402217 	ldw	r17,136(sp)
   18cc8:	d9402117 	ldw	r5,132(sp)
   18ccc:	1dc7883a 	add	r3,r3,r23
   18cd0:	10800044 	addi	r2,r2,1
   18cd4:	41400015 	stw	r5,0(r8)
   18cd8:	45c00115 	stw	r23,4(r8)
   18cdc:	d8c01c15 	stw	r3,112(sp)
   18ce0:	d8801b15 	stw	r2,108(sp)
   18ce4:	010001c4 	movi	r4,7
   18ce8:	2080a616 	blt	r4,r2,18f84 <___svfiprintf_internal_r+0xe6c>
   18cec:	42000204 	addi	r8,r8,8
   18cf0:	a0c7883a 	add	r3,r20,r3
   18cf4:	10800044 	addi	r2,r2,1
   18cf8:	44400015 	stw	r17,0(r8)
   18cfc:	45000115 	stw	r20,4(r8)
   18d00:	d8c01c15 	stw	r3,112(sp)
   18d04:	d8801b15 	stw	r2,108(sp)
   18d08:	010001c4 	movi	r4,7
   18d0c:	20808816 	blt	r4,r2,18f30 <___svfiprintf_internal_r+0xe18>
   18d10:	42000204 	addi	r8,r8,8
   18d14:	8400010c 	andi	r16,r16,4
   18d18:	80002c26 	beq	r16,zero,18dcc <___svfiprintf_internal_r+0xcb4>
   18d1c:	d8802517 	ldw	r2,148(sp)
   18d20:	14a1c83a 	sub	r16,r2,r18
   18d24:	0400290e 	bge	zero,r16,18dcc <___svfiprintf_internal_r+0xcb4>
   18d28:	04400404 	movi	r17,16
   18d2c:	d8801b17 	ldw	r2,108(sp)
   18d30:	8c01a70e 	bge	r17,r16,193d0 <___svfiprintf_internal_r+0x12b8>
   18d34:	014000f4 	movhi	r5,3
   18d38:	29697e04 	addi	r5,r5,-23048
   18d3c:	d9402815 	stw	r5,160(sp)
   18d40:	050001c4 	movi	r20,7
   18d44:	dd402717 	ldw	r21,156(sp)
   18d48:	ddc02317 	ldw	r23,140(sp)
   18d4c:	00000306 	br	18d5c <___svfiprintf_internal_r+0xc44>
   18d50:	843ffc04 	addi	r16,r16,-16
   18d54:	42000204 	addi	r8,r8,8
   18d58:	8c00130e 	bge	r17,r16,18da8 <___svfiprintf_internal_r+0xc90>
   18d5c:	010000f4 	movhi	r4,3
   18d60:	18c00404 	addi	r3,r3,16
   18d64:	10800044 	addi	r2,r2,1
   18d68:	21297e04 	addi	r4,r4,-23048
   18d6c:	41000015 	stw	r4,0(r8)
   18d70:	44400115 	stw	r17,4(r8)
   18d74:	d8c01c15 	stw	r3,112(sp)
   18d78:	d8801b15 	stw	r2,108(sp)
   18d7c:	a0bff40e 	bge	r20,r2,18d50 <__alt_data_end+0xfc018d50>
   18d80:	d9801a04 	addi	r6,sp,104
   18d84:	b80b883a 	mov	r5,r23
   18d88:	a809883a 	mov	r4,r21
   18d8c:	0017f480 	call	17f48 <__ssprint_r>
   18d90:	1000211e 	bne	r2,zero,18e18 <___svfiprintf_internal_r+0xd00>
   18d94:	843ffc04 	addi	r16,r16,-16
   18d98:	d8c01c17 	ldw	r3,112(sp)
   18d9c:	d8801b17 	ldw	r2,108(sp)
   18da0:	d811883a 	mov	r8,sp
   18da4:	8c3fed16 	blt	r17,r16,18d5c <__alt_data_end+0xfc018d5c>
   18da8:	d9402817 	ldw	r5,160(sp)
   18dac:	1c07883a 	add	r3,r3,r16
   18db0:	10800044 	addi	r2,r2,1
   18db4:	41400015 	stw	r5,0(r8)
   18db8:	44000115 	stw	r16,4(r8)
   18dbc:	d8c01c15 	stw	r3,112(sp)
   18dc0:	d8801b15 	stw	r2,108(sp)
   18dc4:	010001c4 	movi	r4,7
   18dc8:	2080b516 	blt	r4,r2,190a0 <___svfiprintf_internal_r+0xf88>
   18dcc:	d8802517 	ldw	r2,148(sp)
   18dd0:	1480010e 	bge	r2,r18,18dd8 <___svfiprintf_internal_r+0xcc0>
   18dd4:	9005883a 	mov	r2,r18
   18dd8:	d9002617 	ldw	r4,152(sp)
   18ddc:	2089883a 	add	r4,r4,r2
   18de0:	d9002615 	stw	r4,152(sp)
   18de4:	18005a1e 	bne	r3,zero,18f50 <___svfiprintf_internal_r+0xe38>
   18de8:	98800007 	ldb	r2,0(r19)
   18dec:	d8001b15 	stw	zero,108(sp)
   18df0:	d811883a 	mov	r8,sp
   18df4:	103cec1e 	bne	r2,zero,181a8 <__alt_data_end+0xfc0181a8>
   18df8:	9825883a 	mov	r18,r19
   18dfc:	003d0206 	br	18208 <__alt_data_end+0xfc018208>
   18e00:	d8801c17 	ldw	r2,112(sp)
   18e04:	10000426 	beq	r2,zero,18e18 <___svfiprintf_internal_r+0xd00>
   18e08:	d9402317 	ldw	r5,140(sp)
   18e0c:	d9002717 	ldw	r4,156(sp)
   18e10:	d9801a04 	addi	r6,sp,104
   18e14:	0017f480 	call	17f48 <__ssprint_r>
   18e18:	d9402317 	ldw	r5,140(sp)
   18e1c:	d8802617 	ldw	r2,152(sp)
   18e20:	28c0030b 	ldhu	r3,12(r5)
   18e24:	18c0100c 	andi	r3,r3,64
   18e28:	18015c1e 	bne	r3,zero,1939c <___svfiprintf_internal_r+0x1284>
   18e2c:	dfc03717 	ldw	ra,220(sp)
   18e30:	df003617 	ldw	fp,216(sp)
   18e34:	ddc03517 	ldw	r23,212(sp)
   18e38:	dd803417 	ldw	r22,208(sp)
   18e3c:	dd403317 	ldw	r21,204(sp)
   18e40:	dd003217 	ldw	r20,200(sp)
   18e44:	dcc03117 	ldw	r19,196(sp)
   18e48:	dc803017 	ldw	r18,192(sp)
   18e4c:	dc402f17 	ldw	r17,188(sp)
   18e50:	dc002e17 	ldw	r16,184(sp)
   18e54:	dec03804 	addi	sp,sp,224
   18e58:	f800283a 	ret
   18e5c:	d9002517 	ldw	r4,148(sp)
   18e60:	24afc83a 	sub	r23,r4,r18
   18e64:	05ff6e0e 	bge	zero,r23,18c20 <__alt_data_end+0xfc018c20>
   18e68:	07000404 	movi	fp,16
   18e6c:	e5c15c0e 	bge	fp,r23,193e0 <___svfiprintf_internal_r+0x12c8>
   18e70:	010000f4 	movhi	r4,3
   18e74:	21297a04 	addi	r4,r4,-23064
   18e78:	dc002215 	stw	r16,136(sp)
   18e7c:	dc402815 	stw	r17,160(sp)
   18e80:	d9002115 	stw	r4,132(sp)
   18e84:	b823883a 	mov	r17,r23
   18e88:	054001c4 	movi	r21,7
   18e8c:	982f883a 	mov	r23,r19
   18e90:	dc002717 	ldw	r16,156(sp)
   18e94:	9027883a 	mov	r19,r18
   18e98:	dc802317 	ldw	r18,140(sp)
   18e9c:	00000306 	br	18eac <___svfiprintf_internal_r+0xd94>
   18ea0:	8c7ffc04 	addi	r17,r17,-16
   18ea4:	42000204 	addi	r8,r8,8
   18ea8:	e440110e 	bge	fp,r17,18ef0 <___svfiprintf_internal_r+0xdd8>
   18eac:	18c00404 	addi	r3,r3,16
   18eb0:	10800044 	addi	r2,r2,1
   18eb4:	45800015 	stw	r22,0(r8)
   18eb8:	47000115 	stw	fp,4(r8)
   18ebc:	d8c01c15 	stw	r3,112(sp)
   18ec0:	d8801b15 	stw	r2,108(sp)
   18ec4:	a8bff60e 	bge	r21,r2,18ea0 <__alt_data_end+0xfc018ea0>
   18ec8:	d9801a04 	addi	r6,sp,104
   18ecc:	900b883a 	mov	r5,r18
   18ed0:	8009883a 	mov	r4,r16
   18ed4:	0017f480 	call	17f48 <__ssprint_r>
   18ed8:	103fcf1e 	bne	r2,zero,18e18 <__alt_data_end+0xfc018e18>
   18edc:	8c7ffc04 	addi	r17,r17,-16
   18ee0:	d8c01c17 	ldw	r3,112(sp)
   18ee4:	d8801b17 	ldw	r2,108(sp)
   18ee8:	d811883a 	mov	r8,sp
   18eec:	e47fef16 	blt	fp,r17,18eac <__alt_data_end+0xfc018eac>
   18ef0:	9825883a 	mov	r18,r19
   18ef4:	dc002217 	ldw	r16,136(sp)
   18ef8:	b827883a 	mov	r19,r23
   18efc:	882f883a 	mov	r23,r17
   18f00:	dc402817 	ldw	r17,160(sp)
   18f04:	d9402117 	ldw	r5,132(sp)
   18f08:	1dc7883a 	add	r3,r3,r23
   18f0c:	10800044 	addi	r2,r2,1
   18f10:	41400015 	stw	r5,0(r8)
   18f14:	45c00115 	stw	r23,4(r8)
   18f18:	d8c01c15 	stw	r3,112(sp)
   18f1c:	d8801b15 	stw	r2,108(sp)
   18f20:	010001c4 	movi	r4,7
   18f24:	2080b716 	blt	r4,r2,19204 <___svfiprintf_internal_r+0x10ec>
   18f28:	42000204 	addi	r8,r8,8
   18f2c:	003f3c06 	br	18c20 <__alt_data_end+0xfc018c20>
   18f30:	d9402317 	ldw	r5,140(sp)
   18f34:	d9002717 	ldw	r4,156(sp)
   18f38:	d9801a04 	addi	r6,sp,104
   18f3c:	0017f480 	call	17f48 <__ssprint_r>
   18f40:	103fb51e 	bne	r2,zero,18e18 <__alt_data_end+0xfc018e18>
   18f44:	d8c01c17 	ldw	r3,112(sp)
   18f48:	d811883a 	mov	r8,sp
   18f4c:	003f7106 	br	18d14 <__alt_data_end+0xfc018d14>
   18f50:	d9402317 	ldw	r5,140(sp)
   18f54:	d9002717 	ldw	r4,156(sp)
   18f58:	d9801a04 	addi	r6,sp,104
   18f5c:	0017f480 	call	17f48 <__ssprint_r>
   18f60:	103fa126 	beq	r2,zero,18de8 <__alt_data_end+0xfc018de8>
   18f64:	003fac06 	br	18e18 <__alt_data_end+0xfc018e18>
   18f68:	d9402317 	ldw	r5,140(sp)
   18f6c:	d9002717 	ldw	r4,156(sp)
   18f70:	d9801a04 	addi	r6,sp,104
   18f74:	0017f480 	call	17f48 <__ssprint_r>
   18f78:	103fa71e 	bne	r2,zero,18e18 <__alt_data_end+0xfc018e18>
   18f7c:	d811883a 	mov	r8,sp
   18f80:	003c9e06 	br	181fc <__alt_data_end+0xfc0181fc>
   18f84:	d9402317 	ldw	r5,140(sp)
   18f88:	d9002717 	ldw	r4,156(sp)
   18f8c:	d9801a04 	addi	r6,sp,104
   18f90:	0017f480 	call	17f48 <__ssprint_r>
   18f94:	103fa01e 	bne	r2,zero,18e18 <__alt_data_end+0xfc018e18>
   18f98:	d8c01c17 	ldw	r3,112(sp)
   18f9c:	d8801b17 	ldw	r2,108(sp)
   18fa0:	d811883a 	mov	r8,sp
   18fa4:	003f5206 	br	18cf0 <__alt_data_end+0xfc018cf0>
   18fa8:	d9402317 	ldw	r5,140(sp)
   18fac:	d9002717 	ldw	r4,156(sp)
   18fb0:	d9801a04 	addi	r6,sp,104
   18fb4:	0017f480 	call	17f48 <__ssprint_r>
   18fb8:	103f971e 	bne	r2,zero,18e18 <__alt_data_end+0xfc018e18>
   18fbc:	d8c01c17 	ldw	r3,112(sp)
   18fc0:	d8801b17 	ldw	r2,108(sp)
   18fc4:	d811883a 	mov	r8,sp
   18fc8:	003f0506 	br	18be0 <__alt_data_end+0xfc018be0>
   18fcc:	d9402317 	ldw	r5,140(sp)
   18fd0:	d9002717 	ldw	r4,156(sp)
   18fd4:	d9801a04 	addi	r6,sp,104
   18fd8:	0017f480 	call	17f48 <__ssprint_r>
   18fdc:	103f8e1e 	bne	r2,zero,18e18 <__alt_data_end+0xfc018e18>
   18fe0:	d8c01c17 	ldw	r3,112(sp)
   18fe4:	d8801b17 	ldw	r2,108(sp)
   18fe8:	d811883a 	mov	r8,sp
   18fec:	003f0906 	br	18c14 <__alt_data_end+0xfc018c14>
   18ff0:	d9402017 	ldw	r5,128(sp)
   18ff4:	d8001d85 	stb	zero,118(sp)
   18ff8:	28007716 	blt	r5,zero,191d8 <___svfiprintf_internal_r+0x10c0>
   18ffc:	00ffdfc4 	movi	r3,-129
   19000:	9504b03a 	or	r2,r18,r20
   19004:	80e0703a 	and	r16,r16,r3
   19008:	103d3926 	beq	r2,zero,184f0 <__alt_data_end+0xfc0184f0>
   1900c:	002b883a 	mov	r21,zero
   19010:	003d3c06 	br	18504 <__alt_data_end+0xfc018504>
   19014:	d9402317 	ldw	r5,140(sp)
   19018:	d9002717 	ldw	r4,156(sp)
   1901c:	d9801a04 	addi	r6,sp,104
   19020:	0017f480 	call	17f48 <__ssprint_r>
   19024:	103f7c1e 	bne	r2,zero,18e18 <__alt_data_end+0xfc018e18>
   19028:	d8c01c17 	ldw	r3,112(sp)
   1902c:	d8801b17 	ldw	r2,108(sp)
   19030:	d811883a 	mov	r8,sp
   19034:	003edd06 	br	18bac <__alt_data_end+0xfc018bac>
   19038:	8080100c 	andi	r2,r16,64
   1903c:	d8001d85 	stb	zero,118(sp)
   19040:	10008426 	beq	r2,zero,19254 <___svfiprintf_internal_r+0x113c>
   19044:	d9402417 	ldw	r5,144(sp)
   19048:	d8c02017 	ldw	r3,128(sp)
   1904c:	0029883a 	mov	r20,zero
   19050:	28800104 	addi	r2,r5,4
   19054:	2c80000b 	ldhu	r18,0(r5)
   19058:	183eab0e 	bge	r3,zero,18b08 <__alt_data_end+0xfc018b08>
   1905c:	d8802415 	stw	r2,144(sp)
   19060:	002b883a 	mov	r21,zero
   19064:	9504b03a 	or	r2,r18,r20
   19068:	103e171e 	bne	r2,zero,188c8 <__alt_data_end+0xfc0188c8>
   1906c:	00800044 	movi	r2,1
   19070:	10803fcc 	andi	r2,r2,255
   19074:	00c00044 	movi	r3,1
   19078:	10c05c26 	beq	r2,r3,191ec <___svfiprintf_internal_r+0x10d4>
   1907c:	00c00084 	movi	r3,2
   19080:	10fd1e26 	beq	r2,r3,184fc <__alt_data_end+0xfc0184fc>
   19084:	003ec406 	br	18b98 <__alt_data_end+0xfc018b98>
   19088:	d9401e17 	ldw	r5,120(sp)
   1908c:	2c69c83a 	sub	r20,r5,r17
   19090:	003d4506 	br	185a8 <__alt_data_end+0xfc0185a8>
   19094:	d8802415 	stw	r2,144(sp)
   19098:	98c00007 	ldb	r3,0(r19)
   1909c:	003c6a06 	br	18248 <__alt_data_end+0xfc018248>
   190a0:	d9402317 	ldw	r5,140(sp)
   190a4:	d9002717 	ldw	r4,156(sp)
   190a8:	d9801a04 	addi	r6,sp,104
   190ac:	0017f480 	call	17f48 <__ssprint_r>
   190b0:	103f591e 	bne	r2,zero,18e18 <__alt_data_end+0xfc018e18>
   190b4:	d8c01c17 	ldw	r3,112(sp)
   190b8:	003f4406 	br	18dcc <__alt_data_end+0xfc018dcc>
   190bc:	014000f4 	movhi	r5,3
   190c0:	29691204 	addi	r5,r5,-23480
   190c4:	d9402915 	stw	r5,164(sp)
   190c8:	003d0906 	br	184f0 <__alt_data_end+0xfc0184f0>
   190cc:	d8c02417 	ldw	r3,144(sp)
   190d0:	d9002617 	ldw	r4,152(sp)
   190d4:	d9402417 	ldw	r5,144(sp)
   190d8:	18800017 	ldw	r2,0(r3)
   190dc:	2007d7fa 	srai	r3,r4,31
   190e0:	29400104 	addi	r5,r5,4
   190e4:	d9402415 	stw	r5,144(sp)
   190e8:	11000015 	stw	r4,0(r2)
   190ec:	10c00115 	stw	r3,4(r2)
   190f0:	003c2b06 	br	181a0 <__alt_data_end+0xfc0181a0>
   190f4:	d8c01d45 	stb	r3,117(sp)
   190f8:	d8c02017 	ldw	r3,128(sp)
   190fc:	00800c04 	movi	r2,48
   19100:	d8801d05 	stb	r2,116(sp)
   19104:	d8001d85 	stb	zero,118(sp)
   19108:	80800094 	ori	r2,r16,2
   1910c:	1800ac16 	blt	r3,zero,193c0 <___svfiprintf_internal_r+0x12a8>
   19110:	00bfdfc4 	movi	r2,-129
   19114:	80a0703a 	and	r16,r16,r2
   19118:	84000094 	ori	r16,r16,2
   1911c:	002b883a 	mov	r21,zero
   19120:	003cf806 	br	18504 <__alt_data_end+0xfc018504>
   19124:	98c00007 	ldb	r3,0(r19)
   19128:	003c4706 	br	18248 <__alt_data_end+0xfc018248>
   1912c:	d9402417 	ldw	r5,144(sp)
   19130:	2c800017 	ldw	r18,0(r5)
   19134:	29400104 	addi	r5,r5,4
   19138:	d9402415 	stw	r5,144(sp)
   1913c:	9029d7fa 	srai	r20,r18,31
   19140:	a005883a 	mov	r2,r20
   19144:	003dd806 	br	188a8 <__alt_data_end+0xfc0188a8>
   19148:	d9402417 	ldw	r5,144(sp)
   1914c:	0029883a 	mov	r20,zero
   19150:	2c800017 	ldw	r18,0(r5)
   19154:	29400104 	addi	r5,r5,4
   19158:	d9402415 	stw	r5,144(sp)
   1915c:	003cdb06 	br	184cc <__alt_data_end+0xfc0184cc>
   19160:	8080100c 	andi	r2,r16,64
   19164:	d8001d85 	stb	zero,118(sp)
   19168:	10003326 	beq	r2,zero,19238 <___svfiprintf_internal_r+0x1120>
   1916c:	d9002417 	ldw	r4,144(sp)
   19170:	d9402017 	ldw	r5,128(sp)
   19174:	0029883a 	mov	r20,zero
   19178:	20800104 	addi	r2,r4,4
   1917c:	2480000b 	ldhu	r18,0(r4)
   19180:	283e7e0e 	bge	r5,zero,18b7c <__alt_data_end+0xfc018b7c>
   19184:	9506b03a 	or	r3,r18,r20
   19188:	d8802415 	stw	r2,144(sp)
   1918c:	183d271e 	bne	r3,zero,1862c <__alt_data_end+0xfc01862c>
   19190:	002b883a 	mov	r21,zero
   19194:	0005883a 	mov	r2,zero
   19198:	003fb506 	br	19070 <__alt_data_end+0xfc019070>
   1919c:	98c00043 	ldbu	r3,1(r19)
   191a0:	8c400814 	ori	r17,r17,32
   191a4:	9cc00044 	addi	r19,r19,1
   191a8:	18c03fcc 	andi	r3,r3,255
   191ac:	18c0201c 	xori	r3,r3,128
   191b0:	18ffe004 	addi	r3,r3,-128
   191b4:	003c2406 	br	18248 <__alt_data_end+0xfc018248>
   191b8:	d8c02415 	stw	r3,144(sp)
   191bc:	002b883a 	mov	r21,zero
   191c0:	003fa806 	br	19064 <__alt_data_end+0xfc019064>
   191c4:	010000f4 	movhi	r4,3
   191c8:	21291204 	addi	r4,r4,-23480
   191cc:	d9002915 	stw	r4,164(sp)
   191d0:	d8c02415 	stw	r3,144(sp)
   191d4:	1021883a 	mov	r16,r2
   191d8:	9504b03a 	or	r2,r18,r20
   191dc:	103f8b1e 	bne	r2,zero,1900c <__alt_data_end+0xfc01900c>
   191e0:	002b883a 	mov	r21,zero
   191e4:	00800084 	movi	r2,2
   191e8:	003fa106 	br	19070 <__alt_data_end+0xfc019070>
   191ec:	0025883a 	mov	r18,zero
   191f0:	94800c04 	addi	r18,r18,48
   191f4:	dc8019c5 	stb	r18,103(sp)
   191f8:	dd002c17 	ldw	r20,176(sp)
   191fc:	dc4019c4 	addi	r17,sp,103
   19200:	003ce906 	br	185a8 <__alt_data_end+0xfc0185a8>
   19204:	d9402317 	ldw	r5,140(sp)
   19208:	d9002717 	ldw	r4,156(sp)
   1920c:	d9801a04 	addi	r6,sp,104
   19210:	0017f480 	call	17f48 <__ssprint_r>
   19214:	103f001e 	bne	r2,zero,18e18 <__alt_data_end+0xfc018e18>
   19218:	d8c01c17 	ldw	r3,112(sp)
   1921c:	d8801b17 	ldw	r2,108(sp)
   19220:	d811883a 	mov	r8,sp
   19224:	003e7e06 	br	18c20 <__alt_data_end+0xfc018c20>
   19228:	014000f4 	movhi	r5,3
   1922c:	29697a04 	addi	r5,r5,-23064
   19230:	d9402115 	stw	r5,132(sp)
   19234:	003ea406 	br	18cc8 <__alt_data_end+0xfc018cc8>
   19238:	d8c02417 	ldw	r3,144(sp)
   1923c:	d9002017 	ldw	r4,128(sp)
   19240:	0029883a 	mov	r20,zero
   19244:	18800104 	addi	r2,r3,4
   19248:	1c800017 	ldw	r18,0(r3)
   1924c:	203e4b0e 	bge	r4,zero,18b7c <__alt_data_end+0xfc018b7c>
   19250:	003fcc06 	br	19184 <__alt_data_end+0xfc019184>
   19254:	d9002417 	ldw	r4,144(sp)
   19258:	d9402017 	ldw	r5,128(sp)
   1925c:	0029883a 	mov	r20,zero
   19260:	20800104 	addi	r2,r4,4
   19264:	24800017 	ldw	r18,0(r4)
   19268:	283e270e 	bge	r5,zero,18b08 <__alt_data_end+0xfc018b08>
   1926c:	003f7b06 	br	1905c <__alt_data_end+0xfc01905c>
   19270:	8400100c 	andi	r16,r16,64
   19274:	80003326 	beq	r16,zero,19344 <___svfiprintf_internal_r+0x122c>
   19278:	d9402417 	ldw	r5,144(sp)
   1927c:	d8c02617 	ldw	r3,152(sp)
   19280:	28800017 	ldw	r2,0(r5)
   19284:	29400104 	addi	r5,r5,4
   19288:	d9402415 	stw	r5,144(sp)
   1928c:	10c0000d 	sth	r3,0(r2)
   19290:	003bc306 	br	181a0 <__alt_data_end+0xfc0181a0>
   19294:	d9002417 	ldw	r4,144(sp)
   19298:	0029883a 	mov	r20,zero
   1929c:	24800017 	ldw	r18,0(r4)
   192a0:	21000104 	addi	r4,r4,4
   192a4:	d9002415 	stw	r4,144(sp)
   192a8:	003c8806 	br	184cc <__alt_data_end+0xfc0184cc>
   192ac:	d8c02417 	ldw	r3,144(sp)
   192b0:	1c800017 	ldw	r18,0(r3)
   192b4:	18c00104 	addi	r3,r3,4
   192b8:	d8c02415 	stw	r3,144(sp)
   192bc:	9029d7fa 	srai	r20,r18,31
   192c0:	a005883a 	mov	r2,r20
   192c4:	003d7806 	br	188a8 <__alt_data_end+0xfc0188a8>
   192c8:	8809883a 	mov	r4,r17
   192cc:	da002d15 	stw	r8,180(sp)
   192d0:	000ef4c0 	call	ef4c <strlen>
   192d4:	1029883a 	mov	r20,r2
   192d8:	dd401d83 	ldbu	r21,118(sp)
   192dc:	ddc02415 	stw	r23,144(sp)
   192e0:	d8002015 	stw	zero,128(sp)
   192e4:	da002d17 	ldw	r8,180(sp)
   192e8:	003caf06 	br	185a8 <__alt_data_end+0xfc0185a8>
   192ec:	013fffc4 	movi	r4,-1
   192f0:	003df206 	br	18abc <__alt_data_end+0xfc018abc>
   192f4:	dd002017 	ldw	r20,128(sp)
   192f8:	00800184 	movi	r2,6
   192fc:	1500012e 	bgeu	r2,r20,19304 <___svfiprintf_internal_r+0x11ec>
   19300:	1029883a 	mov	r20,r2
   19304:	a025883a 	mov	r18,r20
   19308:	a0004116 	blt	r20,zero,19410 <___svfiprintf_internal_r+0x12f8>
   1930c:	044000f4 	movhi	r17,3
   19310:	ddc02415 	stw	r23,144(sp)
   19314:	8c691704 	addi	r17,r17,-23460
   19318:	003ce806 	br	186bc <__alt_data_end+0xfc0186bc>
   1931c:	04001004 	movi	r16,64
   19320:	800b883a 	mov	r5,r16
   19324:	000de780 	call	de78 <_malloc_r>
   19328:	d8c02317 	ldw	r3,140(sp)
   1932c:	18800015 	stw	r2,0(r3)
   19330:	18800415 	stw	r2,16(r3)
   19334:	10004d26 	beq	r2,zero,1946c <___svfiprintf_internal_r+0x1354>
   19338:	d9402317 	ldw	r5,140(sp)
   1933c:	2c000515 	stw	r16,20(r5)
   19340:	003b8906 	br	18168 <__alt_data_end+0xfc018168>
   19344:	d9002417 	ldw	r4,144(sp)
   19348:	d9402617 	ldw	r5,152(sp)
   1934c:	20800017 	ldw	r2,0(r4)
   19350:	21000104 	addi	r4,r4,4
   19354:	d9002415 	stw	r4,144(sp)
   19358:	11400015 	stw	r5,0(r2)
   1935c:	003b9006 	br	181a0 <__alt_data_end+0xfc0181a0>
   19360:	8080004c 	andi	r2,r16,1
   19364:	002b883a 	mov	r21,zero
   19368:	10000526 	beq	r2,zero,19380 <___svfiprintf_internal_r+0x1268>
   1936c:	00800c04 	movi	r2,48
   19370:	d88019c5 	stb	r2,103(sp)
   19374:	dd002c17 	ldw	r20,176(sp)
   19378:	dc4019c4 	addi	r17,sp,103
   1937c:	003c8a06 	br	185a8 <__alt_data_end+0xfc0185a8>
   19380:	0029883a 	mov	r20,zero
   19384:	dc401a04 	addi	r17,sp,104
   19388:	003c8706 	br	185a8 <__alt_data_end+0xfc0185a8>
   1938c:	014000f4 	movhi	r5,3
   19390:	29697e04 	addi	r5,r5,-23048
   19394:	d9402815 	stw	r5,160(sp)
   19398:	003cff06 	br	18798 <__alt_data_end+0xfc018798>
   1939c:	00bfffc4 	movi	r2,-1
   193a0:	003ea206 	br	18e2c <__alt_data_end+0xfc018e2c>
   193a4:	00800044 	movi	r2,1
   193a8:	10803fcc 	andi	r2,r2,255
   193ac:	00c00044 	movi	r3,1
   193b0:	10fd4526 	beq	r2,r3,188c8 <__alt_data_end+0xfc0188c8>
   193b4:	00c00084 	movi	r3,2
   193b8:	10fc5226 	beq	r2,r3,18504 <__alt_data_end+0xfc018504>
   193bc:	003c9c06 	br	18630 <__alt_data_end+0xfc018630>
   193c0:	1021883a 	mov	r16,r2
   193c4:	002b883a 	mov	r21,zero
   193c8:	00800084 	movi	r2,2
   193cc:	003ff606 	br	193a8 <__alt_data_end+0xfc0193a8>
   193d0:	010000f4 	movhi	r4,3
   193d4:	21297e04 	addi	r4,r4,-23048
   193d8:	d9002815 	stw	r4,160(sp)
   193dc:	003e7206 	br	18da8 <__alt_data_end+0xfc018da8>
   193e0:	014000f4 	movhi	r5,3
   193e4:	29697a04 	addi	r5,r5,-23064
   193e8:	d9402115 	stw	r5,132(sp)
   193ec:	003ec506 	br	18f04 <__alt_data_end+0xfc018f04>
   193f0:	e027883a 	mov	r19,fp
   193f4:	d8002015 	stw	zero,128(sp)
   193f8:	003b9406 	br	1824c <__alt_data_end+0xfc01824c>
   193fc:	dd002017 	ldw	r20,128(sp)
   19400:	dd401d83 	ldbu	r21,118(sp)
   19404:	ddc02415 	stw	r23,144(sp)
   19408:	d8002015 	stw	zero,128(sp)
   1940c:	003c6606 	br	185a8 <__alt_data_end+0xfc0185a8>
   19410:	0025883a 	mov	r18,zero
   19414:	003fbd06 	br	1930c <__alt_data_end+0xfc01930c>
   19418:	d9402417 	ldw	r5,144(sp)
   1941c:	d8c02417 	ldw	r3,144(sp)
   19420:	29400017 	ldw	r5,0(r5)
   19424:	19000104 	addi	r4,r3,4
   19428:	d9002415 	stw	r4,144(sp)
   1942c:	d9402015 	stw	r5,128(sp)
   19430:	98c00043 	ldbu	r3,1(r19)
   19434:	e027883a 	mov	r19,fp
   19438:	283f5b0e 	bge	r5,zero,191a8 <__alt_data_end+0xfc0191a8>
   1943c:	18c03fcc 	andi	r3,r3,255
   19440:	013fffc4 	movi	r4,-1
   19444:	18c0201c 	xori	r3,r3,128
   19448:	d9002015 	stw	r4,128(sp)
   1944c:	18ffe004 	addi	r3,r3,-128
   19450:	003b7d06 	br	18248 <__alt_data_end+0xfc018248>
   19454:	dd401d85 	stb	r21,118(sp)
   19458:	003cf306 	br	18828 <__alt_data_end+0xfc018828>
   1945c:	dd401d85 	stb	r21,118(sp)
   19460:	003d4e06 	br	1899c <__alt_data_end+0xfc01899c>
   19464:	dd401d85 	stb	r21,118(sp)
   19468:	003c0e06 	br	184a4 <__alt_data_end+0xfc0184a4>
   1946c:	d9002717 	ldw	r4,156(sp)
   19470:	00800304 	movi	r2,12
   19474:	20800015 	stw	r2,0(r4)
   19478:	00bfffc4 	movi	r2,-1
   1947c:	003e6b06 	br	18e2c <__alt_data_end+0xfc018e2c>
   19480:	dd401d85 	stb	r21,118(sp)
   19484:	003d0006 	br	18888 <__alt_data_end+0xfc018888>
   19488:	dd401d85 	stb	r21,118(sp)
   1948c:	003d7106 	br	18a54 <__alt_data_end+0xfc018a54>
   19490:	dd401d85 	stb	r21,118(sp)
   19494:	003c5706 	br	185f4 <__alt_data_end+0xfc0185f4>
   19498:	dd401d85 	stb	r21,118(sp)
   1949c:	003c2e06 	br	18558 <__alt_data_end+0xfc018558>
   194a0:	dd401d85 	stb	r21,118(sp)
   194a4:	003d8c06 	br	18ad8 <__alt_data_end+0xfc018ad8>
   194a8:	dd401d85 	stb	r21,118(sp)
   194ac:	003da706 	br	18b4c <__alt_data_end+0xfc018b4c>
   194b0:	dd401d85 	stb	r21,118(sp)
   194b4:	003cc806 	br	187d8 <__alt_data_end+0xfc0187d8>

000194b8 <__sprint_r.part.0>:
   194b8:	28801917 	ldw	r2,100(r5)
   194bc:	defff604 	addi	sp,sp,-40
   194c0:	dd400515 	stw	r21,20(sp)
   194c4:	dfc00915 	stw	ra,36(sp)
   194c8:	df000815 	stw	fp,32(sp)
   194cc:	ddc00715 	stw	r23,28(sp)
   194d0:	dd800615 	stw	r22,24(sp)
   194d4:	dd000415 	stw	r20,16(sp)
   194d8:	dcc00315 	stw	r19,12(sp)
   194dc:	dc800215 	stw	r18,8(sp)
   194e0:	dc400115 	stw	r17,4(sp)
   194e4:	dc000015 	stw	r16,0(sp)
   194e8:	1088000c 	andi	r2,r2,8192
   194ec:	302b883a 	mov	r21,r6
   194f0:	10002e26 	beq	r2,zero,195ac <__sprint_r.part.0+0xf4>
   194f4:	30800217 	ldw	r2,8(r6)
   194f8:	35800017 	ldw	r22,0(r6)
   194fc:	10002926 	beq	r2,zero,195a4 <__sprint_r.part.0+0xec>
   19500:	2827883a 	mov	r19,r5
   19504:	2029883a 	mov	r20,r4
   19508:	b5c00104 	addi	r23,r22,4
   1950c:	04bfffc4 	movi	r18,-1
   19510:	bc400017 	ldw	r17,0(r23)
   19514:	b4000017 	ldw	r16,0(r22)
   19518:	0039883a 	mov	fp,zero
   1951c:	8822d0ba 	srli	r17,r17,2
   19520:	8800031e 	bne	r17,zero,19530 <__sprint_r.part.0+0x78>
   19524:	00001806 	br	19588 <__sprint_r.part.0+0xd0>
   19528:	84000104 	addi	r16,r16,4
   1952c:	8f001526 	beq	r17,fp,19584 <__sprint_r.part.0+0xcc>
   19530:	81400017 	ldw	r5,0(r16)
   19534:	980d883a 	mov	r6,r19
   19538:	a009883a 	mov	r4,r20
   1953c:	001b1000 	call	1b100 <_fputwc_r>
   19540:	e7000044 	addi	fp,fp,1
   19544:	14bff81e 	bne	r2,r18,19528 <__alt_data_end+0xfc019528>
   19548:	9005883a 	mov	r2,r18
   1954c:	a8000215 	stw	zero,8(r21)
   19550:	a8000115 	stw	zero,4(r21)
   19554:	dfc00917 	ldw	ra,36(sp)
   19558:	df000817 	ldw	fp,32(sp)
   1955c:	ddc00717 	ldw	r23,28(sp)
   19560:	dd800617 	ldw	r22,24(sp)
   19564:	dd400517 	ldw	r21,20(sp)
   19568:	dd000417 	ldw	r20,16(sp)
   1956c:	dcc00317 	ldw	r19,12(sp)
   19570:	dc800217 	ldw	r18,8(sp)
   19574:	dc400117 	ldw	r17,4(sp)
   19578:	dc000017 	ldw	r16,0(sp)
   1957c:	dec00a04 	addi	sp,sp,40
   19580:	f800283a 	ret
   19584:	a8800217 	ldw	r2,8(r21)
   19588:	8c63883a 	add	r17,r17,r17
   1958c:	8c63883a 	add	r17,r17,r17
   19590:	1445c83a 	sub	r2,r2,r17
   19594:	a8800215 	stw	r2,8(r21)
   19598:	b5800204 	addi	r22,r22,8
   1959c:	bdc00204 	addi	r23,r23,8
   195a0:	103fdb1e 	bne	r2,zero,19510 <__alt_data_end+0xfc019510>
   195a4:	0005883a 	mov	r2,zero
   195a8:	003fe806 	br	1954c <__alt_data_end+0xfc01954c>
   195ac:	0015aec0 	call	15aec <__sfvwrite_r>
   195b0:	003fe606 	br	1954c <__alt_data_end+0xfc01954c>

000195b4 <__sprint_r>:
   195b4:	30c00217 	ldw	r3,8(r6)
   195b8:	18000126 	beq	r3,zero,195c0 <__sprint_r+0xc>
   195bc:	00194b81 	jmpi	194b8 <__sprint_r.part.0>
   195c0:	30000115 	stw	zero,4(r6)
   195c4:	0005883a 	mov	r2,zero
   195c8:	f800283a 	ret

000195cc <___vfiprintf_internal_r>:
   195cc:	deffca04 	addi	sp,sp,-216
   195d0:	dd403115 	stw	r21,196(sp)
   195d4:	dfc03515 	stw	ra,212(sp)
   195d8:	df003415 	stw	fp,208(sp)
   195dc:	ddc03315 	stw	r23,204(sp)
   195e0:	dd803215 	stw	r22,200(sp)
   195e4:	dd003015 	stw	r20,192(sp)
   195e8:	dcc02f15 	stw	r19,188(sp)
   195ec:	dc802e15 	stw	r18,184(sp)
   195f0:	dc402d15 	stw	r17,180(sp)
   195f4:	dc002c15 	stw	r16,176(sp)
   195f8:	d9002115 	stw	r4,132(sp)
   195fc:	d9402015 	stw	r5,128(sp)
   19600:	d9c02215 	stw	r7,136(sp)
   19604:	302b883a 	mov	r21,r6
   19608:	20000226 	beq	r4,zero,19614 <___vfiprintf_internal_r+0x48>
   1960c:	20800e17 	ldw	r2,56(r4)
   19610:	1000cf26 	beq	r2,zero,19950 <___vfiprintf_internal_r+0x384>
   19614:	d8c02017 	ldw	r3,128(sp)
   19618:	1880030b 	ldhu	r2,12(r3)
   1961c:	10c8000c 	andi	r3,r2,8192
   19620:	1800071e 	bne	r3,zero,19640 <___vfiprintf_internal_r+0x74>
   19624:	d9402017 	ldw	r5,128(sp)
   19628:	00f7ffc4 	movi	r3,-8193
   1962c:	10880014 	ori	r2,r2,8192
   19630:	29001917 	ldw	r4,100(r5)
   19634:	2880030d 	sth	r2,12(r5)
   19638:	20c6703a 	and	r3,r4,r3
   1963c:	28c01915 	stw	r3,100(r5)
   19640:	10c0020c 	andi	r3,r2,8
   19644:	1800a526 	beq	r3,zero,198dc <___vfiprintf_internal_r+0x310>
   19648:	d9002017 	ldw	r4,128(sp)
   1964c:	20c00417 	ldw	r3,16(r4)
   19650:	1800a226 	beq	r3,zero,198dc <___vfiprintf_internal_r+0x310>
   19654:	1080068c 	andi	r2,r2,26
   19658:	00c00284 	movi	r3,10
   1965c:	10c0a826 	beq	r2,r3,19900 <___vfiprintf_internal_r+0x334>
   19660:	d9001a04 	addi	r4,sp,104
   19664:	d94019c4 	addi	r5,sp,103
   19668:	048000f4 	movhi	r18,3
   1966c:	2145c83a 	sub	r2,r4,r5
   19670:	94a98204 	addi	r18,r18,-23032
   19674:	d9001e15 	stw	r4,120(sp)
   19678:	d9401f15 	stw	r5,124(sp)
   1967c:	dec01a15 	stw	sp,104(sp)
   19680:	d8001c15 	stw	zero,112(sp)
   19684:	d8001b15 	stw	zero,108(sp)
   19688:	d811883a 	mov	r8,sp
   1968c:	d8002615 	stw	zero,152(sp)
   19690:	d8002415 	stw	zero,144(sp)
   19694:	d8802815 	stw	r2,160(sp)
   19698:	a82d883a 	mov	r22,r21
   1969c:	b0800007 	ldb	r2,0(r22)
   196a0:	10040d26 	beq	r2,zero,1a6d8 <___vfiprintf_internal_r+0x110c>
   196a4:	00c00944 	movi	r3,37
   196a8:	b029883a 	mov	r20,r22
   196ac:	10c0021e 	bne	r2,r3,196b8 <___vfiprintf_internal_r+0xec>
   196b0:	00001606 	br	1970c <___vfiprintf_internal_r+0x140>
   196b4:	10c00326 	beq	r2,r3,196c4 <___vfiprintf_internal_r+0xf8>
   196b8:	a5000044 	addi	r20,r20,1
   196bc:	a0800007 	ldb	r2,0(r20)
   196c0:	103ffc1e 	bne	r2,zero,196b4 <__alt_data_end+0xfc0196b4>
   196c4:	a5a1c83a 	sub	r16,r20,r22
   196c8:	80001026 	beq	r16,zero,1970c <___vfiprintf_internal_r+0x140>
   196cc:	d8c01c17 	ldw	r3,112(sp)
   196d0:	d8801b17 	ldw	r2,108(sp)
   196d4:	45800015 	stw	r22,0(r8)
   196d8:	80c7883a 	add	r3,r16,r3
   196dc:	10800044 	addi	r2,r2,1
   196e0:	44000115 	stw	r16,4(r8)
   196e4:	d8c01c15 	stw	r3,112(sp)
   196e8:	d8801b15 	stw	r2,108(sp)
   196ec:	010001c4 	movi	r4,7
   196f0:	2080750e 	bge	r4,r2,198c8 <___vfiprintf_internal_r+0x2fc>
   196f4:	1803951e 	bne	r3,zero,1a54c <___vfiprintf_internal_r+0xf80>
   196f8:	d8c02417 	ldw	r3,144(sp)
   196fc:	d8001b15 	stw	zero,108(sp)
   19700:	d811883a 	mov	r8,sp
   19704:	1c07883a 	add	r3,r3,r16
   19708:	d8c02415 	stw	r3,144(sp)
   1970c:	a0800007 	ldb	r2,0(r20)
   19710:	1002e026 	beq	r2,zero,1a294 <___vfiprintf_internal_r+0xcc8>
   19714:	a5800044 	addi	r22,r20,1
   19718:	a0c00047 	ldb	r3,1(r20)
   1971c:	d8001d85 	stb	zero,118(sp)
   19720:	0027883a 	mov	r19,zero
   19724:	d8002305 	stb	zero,140(sp)
   19728:	043fffc4 	movi	r16,-1
   1972c:	d8002515 	stw	zero,148(sp)
   19730:	0023883a 	mov	r17,zero
   19734:	05001604 	movi	r20,88
   19738:	05400244 	movi	r21,9
   1973c:	402f883a 	mov	r23,r8
   19740:	b5800044 	addi	r22,r22,1
   19744:	18bff804 	addi	r2,r3,-32
   19748:	a0827736 	bltu	r20,r2,1a128 <___vfiprintf_internal_r+0xb5c>
   1974c:	100490ba 	slli	r2,r2,2
   19750:	010000b4 	movhi	r4,2
   19754:	2125d904 	addi	r4,r4,-26780
   19758:	1105883a 	add	r2,r2,r4
   1975c:	10800017 	ldw	r2,0(r2)
   19760:	1000683a 	jmp	r2
   19764:	00019e28 	cmpgeui	zero,zero,1656
   19768:	0001a128 	cmpgeui	zero,zero,1668
   1976c:	0001a128 	cmpgeui	zero,zero,1668
   19770:	00019e44 	movi	zero,1657
   19774:	0001a128 	cmpgeui	zero,zero,1668
   19778:	0001a128 	cmpgeui	zero,zero,1668
   1977c:	0001a128 	cmpgeui	zero,zero,1668
   19780:	0001a128 	cmpgeui	zero,zero,1668
   19784:	0001a128 	cmpgeui	zero,zero,1668
   19788:	0001a128 	cmpgeui	zero,zero,1668
   1978c:	0001a04c 	andi	zero,zero,1665
   19790:	0001a070 	cmpltui	zero,zero,1665
   19794:	0001a128 	cmpgeui	zero,zero,1668
   19798:	00019968 	cmpgeui	zero,zero,1637
   1979c:	0001a084 	movi	zero,1666
   197a0:	0001a128 	cmpgeui	zero,zero,1668
   197a4:	00019e50 	cmplti	zero,zero,1657
   197a8:	00019e5c 	xori	zero,zero,1657
   197ac:	00019e5c 	xori	zero,zero,1657
   197b0:	00019e5c 	xori	zero,zero,1657
   197b4:	00019e5c 	xori	zero,zero,1657
   197b8:	00019e5c 	xori	zero,zero,1657
   197bc:	00019e5c 	xori	zero,zero,1657
   197c0:	00019e5c 	xori	zero,zero,1657
   197c4:	00019e5c 	xori	zero,zero,1657
   197c8:	00019e5c 	xori	zero,zero,1657
   197cc:	0001a128 	cmpgeui	zero,zero,1668
   197d0:	0001a128 	cmpgeui	zero,zero,1668
   197d4:	0001a128 	cmpgeui	zero,zero,1668
   197d8:	0001a128 	cmpgeui	zero,zero,1668
   197dc:	0001a128 	cmpgeui	zero,zero,1668
   197e0:	0001a128 	cmpgeui	zero,zero,1668
   197e4:	0001a128 	cmpgeui	zero,zero,1668
   197e8:	0001a128 	cmpgeui	zero,zero,1668
   197ec:	0001a128 	cmpgeui	zero,zero,1668
   197f0:	0001a128 	cmpgeui	zero,zero,1668
   197f4:	00019e9c 	xori	zero,zero,1658
   197f8:	0001a128 	cmpgeui	zero,zero,1668
   197fc:	0001a128 	cmpgeui	zero,zero,1668
   19800:	0001a128 	cmpgeui	zero,zero,1668
   19804:	0001a128 	cmpgeui	zero,zero,1668
   19808:	0001a128 	cmpgeui	zero,zero,1668
   1980c:	0001a128 	cmpgeui	zero,zero,1668
   19810:	0001a128 	cmpgeui	zero,zero,1668
   19814:	0001a128 	cmpgeui	zero,zero,1668
   19818:	0001a128 	cmpgeui	zero,zero,1668
   1981c:	0001a128 	cmpgeui	zero,zero,1668
   19820:	00019ed8 	cmpnei	zero,zero,1659
   19824:	0001a128 	cmpgeui	zero,zero,1668
   19828:	0001a128 	cmpgeui	zero,zero,1668
   1982c:	0001a128 	cmpgeui	zero,zero,1668
   19830:	0001a128 	cmpgeui	zero,zero,1668
   19834:	0001a128 	cmpgeui	zero,zero,1668
   19838:	00019f34 	movhi	zero,1660
   1983c:	0001a128 	cmpgeui	zero,zero,1668
   19840:	0001a128 	cmpgeui	zero,zero,1668
   19844:	00019fa8 	cmpgeui	zero,zero,1662
   19848:	0001a128 	cmpgeui	zero,zero,1668
   1984c:	0001a128 	cmpgeui	zero,zero,1668
   19850:	0001a128 	cmpgeui	zero,zero,1668
   19854:	0001a128 	cmpgeui	zero,zero,1668
   19858:	0001a128 	cmpgeui	zero,zero,1668
   1985c:	0001a128 	cmpgeui	zero,zero,1668
   19860:	0001a128 	cmpgeui	zero,zero,1668
   19864:	0001a128 	cmpgeui	zero,zero,1668
   19868:	0001a128 	cmpgeui	zero,zero,1668
   1986c:	0001a128 	cmpgeui	zero,zero,1668
   19870:	00019d50 	cmplti	zero,zero,1653
   19874:	00019d80 	call	19d8 <_ZN3USB4TaskEv+0x1bc>
   19878:	0001a128 	cmpgeui	zero,zero,1668
   1987c:	0001a128 	cmpgeui	zero,zero,1668
   19880:	0001a128 	cmpgeui	zero,zero,1668
   19884:	0001a0d0 	cmplti	zero,zero,1667
   19888:	00019d80 	call	19d8 <_ZN3USB4TaskEv+0x1bc>
   1988c:	0001a128 	cmpgeui	zero,zero,1668
   19890:	0001a128 	cmpgeui	zero,zero,1668
   19894:	00019c28 	cmpgeui	zero,zero,1648
   19898:	0001a128 	cmpgeui	zero,zero,1668
   1989c:	00019c3c 	xorhi	zero,zero,1648
   198a0:	00019c74 	movhi	zero,1649
   198a4:	00019974 	movhi	zero,1637
   198a8:	00019c1c 	xori	zero,zero,1648
   198ac:	0001a128 	cmpgeui	zero,zero,1668
   198b0:	00019fe8 	cmpgeui	zero,zero,1663
   198b4:	0001a128 	cmpgeui	zero,zero,1668
   198b8:	0001a034 	movhi	zero,1664
   198bc:	0001a128 	cmpgeui	zero,zero,1668
   198c0:	0001a128 	cmpgeui	zero,zero,1668
   198c4:	00019cf8 	rdprs	zero,zero,1651
   198c8:	42000204 	addi	r8,r8,8
   198cc:	d8c02417 	ldw	r3,144(sp)
   198d0:	1c07883a 	add	r3,r3,r16
   198d4:	d8c02415 	stw	r3,144(sp)
   198d8:	003f8c06 	br	1970c <__alt_data_end+0xfc01970c>
   198dc:	d9402017 	ldw	r5,128(sp)
   198e0:	d9002117 	ldw	r4,132(sp)
   198e4:	001365c0 	call	1365c <__swsetup_r>
   198e8:	1003c11e 	bne	r2,zero,1a7f0 <___vfiprintf_internal_r+0x1224>
   198ec:	d9402017 	ldw	r5,128(sp)
   198f0:	00c00284 	movi	r3,10
   198f4:	2880030b 	ldhu	r2,12(r5)
   198f8:	1080068c 	andi	r2,r2,26
   198fc:	10ff581e 	bne	r2,r3,19660 <__alt_data_end+0xfc019660>
   19900:	d8c02017 	ldw	r3,128(sp)
   19904:	1880038f 	ldh	r2,14(r3)
   19908:	103f5516 	blt	r2,zero,19660 <__alt_data_end+0xfc019660>
   1990c:	d9c02217 	ldw	r7,136(sp)
   19910:	d9002117 	ldw	r4,132(sp)
   19914:	a80d883a 	mov	r6,r21
   19918:	180b883a 	mov	r5,r3
   1991c:	001aaf40 	call	1aaf4 <__sbprintf>
   19920:	dfc03517 	ldw	ra,212(sp)
   19924:	df003417 	ldw	fp,208(sp)
   19928:	ddc03317 	ldw	r23,204(sp)
   1992c:	dd803217 	ldw	r22,200(sp)
   19930:	dd403117 	ldw	r21,196(sp)
   19934:	dd003017 	ldw	r20,192(sp)
   19938:	dcc02f17 	ldw	r19,188(sp)
   1993c:	dc802e17 	ldw	r18,184(sp)
   19940:	dc402d17 	ldw	r17,180(sp)
   19944:	dc002c17 	ldw	r16,176(sp)
   19948:	dec03604 	addi	sp,sp,216
   1994c:	f800283a 	ret
   19950:	00156680 	call	15668 <__sinit>
   19954:	003f2f06 	br	19614 <__alt_data_end+0xfc019614>
   19958:	d8c02517 	ldw	r3,148(sp)
   1995c:	d8802215 	stw	r2,136(sp)
   19960:	00c7c83a 	sub	r3,zero,r3
   19964:	d8c02515 	stw	r3,148(sp)
   19968:	8c400114 	ori	r17,r17,4
   1996c:	b0c00007 	ldb	r3,0(r22)
   19970:	003f7306 	br	19740 <__alt_data_end+0xfc019740>
   19974:	00800c04 	movi	r2,48
   19978:	d9402217 	ldw	r5,136(sp)
   1997c:	d8801d05 	stb	r2,116(sp)
   19980:	00801e04 	movi	r2,120
   19984:	d8801d45 	stb	r2,117(sp)
   19988:	d8001d85 	stb	zero,118(sp)
   1998c:	b811883a 	mov	r8,r23
   19990:	28c00104 	addi	r3,r5,4
   19994:	2cc00017 	ldw	r19,0(r5)
   19998:	0029883a 	mov	r20,zero
   1999c:	88800094 	ori	r2,r17,2
   199a0:	80032516 	blt	r16,zero,1a638 <___vfiprintf_internal_r+0x106c>
   199a4:	00bfdfc4 	movi	r2,-129
   199a8:	88a2703a 	and	r17,r17,r2
   199ac:	d8c02215 	stw	r3,136(sp)
   199b0:	8c400094 	ori	r17,r17,2
   199b4:	98032a1e 	bne	r19,zero,1a660 <___vfiprintf_internal_r+0x1094>
   199b8:	008000f4 	movhi	r2,3
   199bc:	10a91204 	addi	r2,r2,-23480
   199c0:	d8802615 	stw	r2,152(sp)
   199c4:	002b883a 	mov	r21,zero
   199c8:	8001741e 	bne	r16,zero,19f9c <___vfiprintf_internal_r+0x9d0>
   199cc:	0021883a 	mov	r16,zero
   199d0:	0029883a 	mov	r20,zero
   199d4:	ddc01a04 	addi	r23,sp,104
   199d8:	8027883a 	mov	r19,r16
   199dc:	8500010e 	bge	r16,r20,199e4 <___vfiprintf_internal_r+0x418>
   199e0:	a027883a 	mov	r19,r20
   199e4:	ad403fcc 	andi	r21,r21,255
   199e8:	ad40201c 	xori	r21,r21,128
   199ec:	ad7fe004 	addi	r21,r21,-128
   199f0:	a8000126 	beq	r21,zero,199f8 <___vfiprintf_internal_r+0x42c>
   199f4:	9cc00044 	addi	r19,r19,1
   199f8:	89c0008c 	andi	r7,r17,2
   199fc:	38000126 	beq	r7,zero,19a04 <___vfiprintf_internal_r+0x438>
   19a00:	9cc00084 	addi	r19,r19,2
   19a04:	88c0210c 	andi	r3,r17,132
   19a08:	1801dd1e 	bne	r3,zero,1a180 <___vfiprintf_internal_r+0xbb4>
   19a0c:	d9402517 	ldw	r5,148(sp)
   19a10:	2cebc83a 	sub	r21,r5,r19
   19a14:	0541da0e 	bge	zero,r21,1a180 <___vfiprintf_internal_r+0xbb4>
   19a18:	07000404 	movi	fp,16
   19a1c:	d8801c17 	ldw	r2,112(sp)
   19a20:	e543be0e 	bge	fp,r21,1a91c <___vfiprintf_internal_r+0x1350>
   19a24:	014000f4 	movhi	r5,3
   19a28:	29698604 	addi	r5,r5,-23016
   19a2c:	dc002715 	stw	r16,156(sp)
   19a30:	d9801b17 	ldw	r6,108(sp)
   19a34:	a821883a 	mov	r16,r21
   19a38:	d9402315 	stw	r5,140(sp)
   19a3c:	028001c4 	movi	r10,7
   19a40:	d9c02915 	stw	r7,164(sp)
   19a44:	182b883a 	mov	r21,r3
   19a48:	00000506 	br	19a60 <___vfiprintf_internal_r+0x494>
   19a4c:	31000084 	addi	r4,r6,2
   19a50:	42000204 	addi	r8,r8,8
   19a54:	180d883a 	mov	r6,r3
   19a58:	843ffc04 	addi	r16,r16,-16
   19a5c:	e4000f0e 	bge	fp,r16,19a9c <___vfiprintf_internal_r+0x4d0>
   19a60:	010000f4 	movhi	r4,3
   19a64:	10800404 	addi	r2,r2,16
   19a68:	30c00044 	addi	r3,r6,1
   19a6c:	21298604 	addi	r4,r4,-23016
   19a70:	41000015 	stw	r4,0(r8)
   19a74:	47000115 	stw	fp,4(r8)
   19a78:	d8801c15 	stw	r2,112(sp)
   19a7c:	d8c01b15 	stw	r3,108(sp)
   19a80:	50fff20e 	bge	r10,r3,19a4c <__alt_data_end+0xfc019a4c>
   19a84:	1001b21e 	bne	r2,zero,1a150 <___vfiprintf_internal_r+0xb84>
   19a88:	843ffc04 	addi	r16,r16,-16
   19a8c:	000d883a 	mov	r6,zero
   19a90:	01000044 	movi	r4,1
   19a94:	d811883a 	mov	r8,sp
   19a98:	e43ff116 	blt	fp,r16,19a60 <__alt_data_end+0xfc019a60>
   19a9c:	a807883a 	mov	r3,r21
   19aa0:	d9c02917 	ldw	r7,164(sp)
   19aa4:	802b883a 	mov	r21,r16
   19aa8:	dc002717 	ldw	r16,156(sp)
   19aac:	d9402317 	ldw	r5,140(sp)
   19ab0:	a885883a 	add	r2,r21,r2
   19ab4:	45400115 	stw	r21,4(r8)
   19ab8:	41400015 	stw	r5,0(r8)
   19abc:	d8801c15 	stw	r2,112(sp)
   19ac0:	d9001b15 	stw	r4,108(sp)
   19ac4:	014001c4 	movi	r5,7
   19ac8:	29026216 	blt	r5,r4,1a454 <___vfiprintf_internal_r+0xe88>
   19acc:	d9801d87 	ldb	r6,118(sp)
   19ad0:	42000204 	addi	r8,r8,8
   19ad4:	21400044 	addi	r5,r4,1
   19ad8:	3001ae1e 	bne	r6,zero,1a194 <___vfiprintf_internal_r+0xbc8>
   19adc:	3801bb26 	beq	r7,zero,1a1cc <___vfiprintf_internal_r+0xc00>
   19ae0:	d9001d04 	addi	r4,sp,116
   19ae4:	10800084 	addi	r2,r2,2
   19ae8:	41000015 	stw	r4,0(r8)
   19aec:	01000084 	movi	r4,2
   19af0:	41000115 	stw	r4,4(r8)
   19af4:	d8801c15 	stw	r2,112(sp)
   19af8:	d9401b15 	stw	r5,108(sp)
   19afc:	010001c4 	movi	r4,7
   19b00:	2142680e 	bge	r4,r5,1a4a4 <___vfiprintf_internal_r+0xed8>
   19b04:	1002b11e 	bne	r2,zero,1a5cc <___vfiprintf_internal_r+0x1000>
   19b08:	01802004 	movi	r6,128
   19b0c:	01400044 	movi	r5,1
   19b10:	0009883a 	mov	r4,zero
   19b14:	d811883a 	mov	r8,sp
   19b18:	1981ae1e 	bne	r3,r6,1a1d4 <___vfiprintf_internal_r+0xc08>
   19b1c:	d8c02517 	ldw	r3,148(sp)
   19b20:	1cf9c83a 	sub	fp,r3,r19
   19b24:	0701ab0e 	bge	zero,fp,1a1d4 <___vfiprintf_internal_r+0xc08>
   19b28:	05400404 	movi	r21,16
   19b2c:	af03a90e 	bge	r21,fp,1a9d4 <___vfiprintf_internal_r+0x1408>
   19b30:	014000f4 	movhi	r5,3
   19b34:	29698204 	addi	r5,r5,-23032
   19b38:	d9402315 	stw	r5,140(sp)
   19b3c:	01c001c4 	movi	r7,7
   19b40:	00000506 	br	19b58 <___vfiprintf_internal_r+0x58c>
   19b44:	21800084 	addi	r6,r4,2
   19b48:	42000204 	addi	r8,r8,8
   19b4c:	1809883a 	mov	r4,r3
   19b50:	e73ffc04 	addi	fp,fp,-16
   19b54:	af000d0e 	bge	r21,fp,19b8c <___vfiprintf_internal_r+0x5c0>
   19b58:	10800404 	addi	r2,r2,16
   19b5c:	20c00044 	addi	r3,r4,1
   19b60:	44800015 	stw	r18,0(r8)
   19b64:	45400115 	stw	r21,4(r8)
   19b68:	d8801c15 	stw	r2,112(sp)
   19b6c:	d8c01b15 	stw	r3,108(sp)
   19b70:	38fff40e 	bge	r7,r3,19b44 <__alt_data_end+0xfc019b44>
   19b74:	10022b1e 	bne	r2,zero,1a424 <___vfiprintf_internal_r+0xe58>
   19b78:	e73ffc04 	addi	fp,fp,-16
   19b7c:	01800044 	movi	r6,1
   19b80:	0009883a 	mov	r4,zero
   19b84:	d811883a 	mov	r8,sp
   19b88:	af3ff316 	blt	r21,fp,19b58 <__alt_data_end+0xfc019b58>
   19b8c:	d8c02317 	ldw	r3,140(sp)
   19b90:	1705883a 	add	r2,r2,fp
   19b94:	47000115 	stw	fp,4(r8)
   19b98:	40c00015 	stw	r3,0(r8)
   19b9c:	d8801c15 	stw	r2,112(sp)
   19ba0:	d9801b15 	stw	r6,108(sp)
   19ba4:	00c001c4 	movi	r3,7
   19ba8:	19829416 	blt	r3,r6,1a5fc <___vfiprintf_internal_r+0x1030>
   19bac:	8521c83a 	sub	r16,r16,r20
   19bb0:	42000204 	addi	r8,r8,8
   19bb4:	31400044 	addi	r5,r6,1
   19bb8:	3009883a 	mov	r4,r6
   19bbc:	04018716 	blt	zero,r16,1a1dc <___vfiprintf_internal_r+0xc10>
   19bc0:	a085883a 	add	r2,r20,r2
   19bc4:	45c00015 	stw	r23,0(r8)
   19bc8:	45000115 	stw	r20,4(r8)
   19bcc:	d8801c15 	stw	r2,112(sp)
   19bd0:	d9401b15 	stw	r5,108(sp)
   19bd4:	00c001c4 	movi	r3,7
   19bd8:	1941c20e 	bge	r3,r5,1a2e4 <___vfiprintf_internal_r+0xd18>
   19bdc:	1002531e 	bne	r2,zero,1a52c <___vfiprintf_internal_r+0xf60>
   19be0:	d8001b15 	stw	zero,108(sp)
   19be4:	8c40010c 	andi	r17,r17,4
   19be8:	88023226 	beq	r17,zero,1a4b4 <___vfiprintf_internal_r+0xee8>
   19bec:	d9002517 	ldw	r4,148(sp)
   19bf0:	24e3c83a 	sub	r17,r4,r19
   19bf4:	04432916 	blt	zero,r17,1a89c <___vfiprintf_internal_r+0x12d0>
   19bf8:	d8802517 	ldw	r2,148(sp)
   19bfc:	14c0010e 	bge	r2,r19,19c04 <___vfiprintf_internal_r+0x638>
   19c00:	9805883a 	mov	r2,r19
   19c04:	d8c02417 	ldw	r3,144(sp)
   19c08:	1887883a 	add	r3,r3,r2
   19c0c:	d8c02415 	stw	r3,144(sp)
   19c10:	d8001b15 	stw	zero,108(sp)
   19c14:	d811883a 	mov	r8,sp
   19c18:	003ea006 	br	1969c <__alt_data_end+0xfc01969c>
   19c1c:	8c400814 	ori	r17,r17,32
   19c20:	b0c00007 	ldb	r3,0(r22)
   19c24:	003ec606 	br	19740 <__alt_data_end+0xfc019740>
   19c28:	b0c00007 	ldb	r3,0(r22)
   19c2c:	00801b04 	movi	r2,108
   19c30:	18832026 	beq	r3,r2,1a8b4 <___vfiprintf_internal_r+0x12e8>
   19c34:	8c400414 	ori	r17,r17,16
   19c38:	003ec106 	br	19740 <__alt_data_end+0xfc019740>
   19c3c:	9cc03fcc 	andi	r19,r19,255
   19c40:	b811883a 	mov	r8,r23
   19c44:	9803981e 	bne	r19,zero,1aaa8 <___vfiprintf_internal_r+0x14dc>
   19c48:	8880080c 	andi	r2,r17,32
   19c4c:	1002be26 	beq	r2,zero,1a748 <___vfiprintf_internal_r+0x117c>
   19c50:	d9002217 	ldw	r4,136(sp)
   19c54:	d9402417 	ldw	r5,144(sp)
   19c58:	20800017 	ldw	r2,0(r4)
   19c5c:	2807d7fa 	srai	r3,r5,31
   19c60:	21000104 	addi	r4,r4,4
   19c64:	d9002215 	stw	r4,136(sp)
   19c68:	11400015 	stw	r5,0(r2)
   19c6c:	10c00115 	stw	r3,4(r2)
   19c70:	003e8a06 	br	1969c <__alt_data_end+0xfc01969c>
   19c74:	9cc03fcc 	andi	r19,r19,255
   19c78:	b811883a 	mov	r8,r23
   19c7c:	9803871e 	bne	r19,zero,1aa9c <___vfiprintf_internal_r+0x14d0>
   19c80:	8880080c 	andi	r2,r17,32
   19c84:	10009a26 	beq	r2,zero,19ef0 <___vfiprintf_internal_r+0x924>
   19c88:	d9002217 	ldw	r4,136(sp)
   19c8c:	d8001d85 	stb	zero,118(sp)
   19c90:	20800204 	addi	r2,r4,8
   19c94:	24c00017 	ldw	r19,0(r4)
   19c98:	25000117 	ldw	r20,4(r4)
   19c9c:	8002a416 	blt	r16,zero,1a730 <___vfiprintf_internal_r+0x1164>
   19ca0:	013fdfc4 	movi	r4,-129
   19ca4:	9d06b03a 	or	r3,r19,r20
   19ca8:	d8802215 	stw	r2,136(sp)
   19cac:	8922703a 	and	r17,r17,r4
   19cb0:	18009b26 	beq	r3,zero,19f20 <___vfiprintf_internal_r+0x954>
   19cb4:	002b883a 	mov	r21,zero
   19cb8:	ddc01a04 	addi	r23,sp,104
   19cbc:	9806d0fa 	srli	r3,r19,3
   19cc0:	a008977a 	slli	r4,r20,29
   19cc4:	a028d0fa 	srli	r20,r20,3
   19cc8:	9cc001cc 	andi	r19,r19,7
   19ccc:	98800c04 	addi	r2,r19,48
   19cd0:	bdffffc4 	addi	r23,r23,-1
   19cd4:	20e6b03a 	or	r19,r4,r3
   19cd8:	b8800005 	stb	r2,0(r23)
   19cdc:	9d06b03a 	or	r3,r19,r20
   19ce0:	183ff61e 	bne	r3,zero,19cbc <__alt_data_end+0xfc019cbc>
   19ce4:	88c0004c 	andi	r3,r17,1
   19ce8:	18021f1e 	bne	r3,zero,1a568 <___vfiprintf_internal_r+0xf9c>
   19cec:	d9401e17 	ldw	r5,120(sp)
   19cf0:	2de9c83a 	sub	r20,r5,r23
   19cf4:	003f3806 	br	199d8 <__alt_data_end+0xfc0199d8>
   19cf8:	9cc03fcc 	andi	r19,r19,255
   19cfc:	b811883a 	mov	r8,r23
   19d00:	98034f1e 	bne	r19,zero,1aa40 <___vfiprintf_internal_r+0x1474>
   19d04:	008000f4 	movhi	r2,3
   19d08:	10a91204 	addi	r2,r2,-23480
   19d0c:	d8802615 	stw	r2,152(sp)
   19d10:	8880080c 	andi	r2,r17,32
   19d14:	1000ac26 	beq	r2,zero,19fc8 <___vfiprintf_internal_r+0x9fc>
   19d18:	d9002217 	ldw	r4,136(sp)
   19d1c:	24c00017 	ldw	r19,0(r4)
   19d20:	25000117 	ldw	r20,4(r4)
   19d24:	21000204 	addi	r4,r4,8
   19d28:	d9002215 	stw	r4,136(sp)
   19d2c:	8880004c 	andi	r2,r17,1
   19d30:	1001e726 	beq	r2,zero,1a4d0 <___vfiprintf_internal_r+0xf04>
   19d34:	9d04b03a 	or	r2,r19,r20
   19d38:	10025c1e 	bne	r2,zero,1a6ac <___vfiprintf_internal_r+0x10e0>
   19d3c:	d8001d85 	stb	zero,118(sp)
   19d40:	80024416 	blt	r16,zero,1a654 <___vfiprintf_internal_r+0x1088>
   19d44:	00bfdfc4 	movi	r2,-129
   19d48:	88a2703a 	and	r17,r17,r2
   19d4c:	003f1d06 	br	199c4 <__alt_data_end+0xfc0199c4>
   19d50:	d8c02217 	ldw	r3,136(sp)
   19d54:	04c00044 	movi	r19,1
   19d58:	b811883a 	mov	r8,r23
   19d5c:	18800017 	ldw	r2,0(r3)
   19d60:	18c00104 	addi	r3,r3,4
   19d64:	d8001d85 	stb	zero,118(sp)
   19d68:	d8801005 	stb	r2,64(sp)
   19d6c:	d8c02215 	stw	r3,136(sp)
   19d70:	9829883a 	mov	r20,r19
   19d74:	ddc01004 	addi	r23,sp,64
   19d78:	0021883a 	mov	r16,zero
   19d7c:	003f1e06 	br	199f8 <__alt_data_end+0xfc0199f8>
   19d80:	9cc03fcc 	andi	r19,r19,255
   19d84:	b811883a 	mov	r8,r23
   19d88:	9803331e 	bne	r19,zero,1aa58 <___vfiprintf_internal_r+0x148c>
   19d8c:	8880080c 	andi	r2,r17,32
   19d90:	10004826 	beq	r2,zero,19eb4 <___vfiprintf_internal_r+0x8e8>
   19d94:	d9002217 	ldw	r4,136(sp)
   19d98:	20800117 	ldw	r2,4(r4)
   19d9c:	24c00017 	ldw	r19,0(r4)
   19da0:	21000204 	addi	r4,r4,8
   19da4:	d9002215 	stw	r4,136(sp)
   19da8:	1029883a 	mov	r20,r2
   19dac:	10024c16 	blt	r2,zero,1a6e0 <___vfiprintf_internal_r+0x1114>
   19db0:	dd401d83 	ldbu	r21,118(sp)
   19db4:	80007116 	blt	r16,zero,19f7c <___vfiprintf_internal_r+0x9b0>
   19db8:	00ffdfc4 	movi	r3,-129
   19dbc:	9d04b03a 	or	r2,r19,r20
   19dc0:	88e2703a 	and	r17,r17,r3
   19dc4:	1000d126 	beq	r2,zero,1a10c <___vfiprintf_internal_r+0xb40>
   19dc8:	a0023526 	beq	r20,zero,1a6a0 <___vfiprintf_internal_r+0x10d4>
   19dcc:	ddc01a04 	addi	r23,sp,104
   19dd0:	4039883a 	mov	fp,r8
   19dd4:	9809883a 	mov	r4,r19
   19dd8:	a00b883a 	mov	r5,r20
   19ddc:	01800284 	movi	r6,10
   19de0:	000f883a 	mov	r7,zero
   19de4:	001baf80 	call	1baf8 <__umoddi3>
   19de8:	10800c04 	addi	r2,r2,48
   19dec:	bdffffc4 	addi	r23,r23,-1
   19df0:	9809883a 	mov	r4,r19
   19df4:	a00b883a 	mov	r5,r20
   19df8:	b8800005 	stb	r2,0(r23)
   19dfc:	01800284 	movi	r6,10
   19e00:	000f883a 	mov	r7,zero
   19e04:	001b4fc0 	call	1b4fc <__udivdi3>
   19e08:	1027883a 	mov	r19,r2
   19e0c:	10c4b03a 	or	r2,r2,r3
   19e10:	1829883a 	mov	r20,r3
   19e14:	103fef1e 	bne	r2,zero,19dd4 <__alt_data_end+0xfc019dd4>
   19e18:	d9001e17 	ldw	r4,120(sp)
   19e1c:	e011883a 	mov	r8,fp
   19e20:	25e9c83a 	sub	r20,r4,r23
   19e24:	003eec06 	br	199d8 <__alt_data_end+0xfc0199d8>
   19e28:	d8802307 	ldb	r2,140(sp)
   19e2c:	1002361e 	bne	r2,zero,1a708 <___vfiprintf_internal_r+0x113c>
   19e30:	00c00804 	movi	r3,32
   19e34:	d8c02305 	stb	r3,140(sp)
   19e38:	04c00044 	movi	r19,1
   19e3c:	b0c00007 	ldb	r3,0(r22)
   19e40:	003e3f06 	br	19740 <__alt_data_end+0xfc019740>
   19e44:	8c400054 	ori	r17,r17,1
   19e48:	b0c00007 	ldb	r3,0(r22)
   19e4c:	003e3c06 	br	19740 <__alt_data_end+0xfc019740>
   19e50:	8c402014 	ori	r17,r17,128
   19e54:	b0c00007 	ldb	r3,0(r22)
   19e58:	003e3906 	br	19740 <__alt_data_end+0xfc019740>
   19e5c:	dc002715 	stw	r16,156(sp)
   19e60:	d8002515 	stw	zero,148(sp)
   19e64:	1f3ff404 	addi	fp,r3,-48
   19e68:	0009883a 	mov	r4,zero
   19e6c:	b021883a 	mov	r16,r22
   19e70:	01400284 	movi	r5,10
   19e74:	000ce000 	call	ce00 <__mulsi3>
   19e78:	80c00007 	ldb	r3,0(r16)
   19e7c:	e089883a 	add	r4,fp,r2
   19e80:	b5800044 	addi	r22,r22,1
   19e84:	1f3ff404 	addi	fp,r3,-48
   19e88:	b021883a 	mov	r16,r22
   19e8c:	af3ff82e 	bgeu	r21,fp,19e70 <__alt_data_end+0xfc019e70>
   19e90:	d9002515 	stw	r4,148(sp)
   19e94:	dc002717 	ldw	r16,156(sp)
   19e98:	003e2a06 	br	19744 <__alt_data_end+0xfc019744>
   19e9c:	9cc03fcc 	andi	r19,r19,255
   19ea0:	b811883a 	mov	r8,r23
   19ea4:	9802e91e 	bne	r19,zero,1aa4c <___vfiprintf_internal_r+0x1480>
   19ea8:	8c400414 	ori	r17,r17,16
   19eac:	8880080c 	andi	r2,r17,32
   19eb0:	103fb81e 	bne	r2,zero,19d94 <__alt_data_end+0xfc019d94>
   19eb4:	8880040c 	andi	r2,r17,16
   19eb8:	10022e26 	beq	r2,zero,1a774 <___vfiprintf_internal_r+0x11a8>
   19ebc:	d9402217 	ldw	r5,136(sp)
   19ec0:	2cc00017 	ldw	r19,0(r5)
   19ec4:	29400104 	addi	r5,r5,4
   19ec8:	d9402215 	stw	r5,136(sp)
   19ecc:	9829d7fa 	srai	r20,r19,31
   19ed0:	a005883a 	mov	r2,r20
   19ed4:	003fb506 	br	19dac <__alt_data_end+0xfc019dac>
   19ed8:	9cc03fcc 	andi	r19,r19,255
   19edc:	b811883a 	mov	r8,r23
   19ee0:	9802fa1e 	bne	r19,zero,1aacc <___vfiprintf_internal_r+0x1500>
   19ee4:	8c400414 	ori	r17,r17,16
   19ee8:	8880080c 	andi	r2,r17,32
   19eec:	103f661e 	bne	r2,zero,19c88 <__alt_data_end+0xfc019c88>
   19ef0:	8880040c 	andi	r2,r17,16
   19ef4:	10020626 	beq	r2,zero,1a710 <___vfiprintf_internal_r+0x1144>
   19ef8:	d9402217 	ldw	r5,136(sp)
   19efc:	d8001d85 	stb	zero,118(sp)
   19f00:	0029883a 	mov	r20,zero
   19f04:	28800104 	addi	r2,r5,4
   19f08:	2cc00017 	ldw	r19,0(r5)
   19f0c:	80020816 	blt	r16,zero,1a730 <___vfiprintf_internal_r+0x1164>
   19f10:	00ffdfc4 	movi	r3,-129
   19f14:	d8802215 	stw	r2,136(sp)
   19f18:	88e2703a 	and	r17,r17,r3
   19f1c:	983f651e 	bne	r19,zero,19cb4 <__alt_data_end+0xfc019cb4>
   19f20:	002b883a 	mov	r21,zero
   19f24:	8002cf26 	beq	r16,zero,1aa64 <___vfiprintf_internal_r+0x1498>
   19f28:	0027883a 	mov	r19,zero
   19f2c:	0029883a 	mov	r20,zero
   19f30:	003f6106 	br	19cb8 <__alt_data_end+0xfc019cb8>
   19f34:	9cc03fcc 	andi	r19,r19,255
   19f38:	b811883a 	mov	r8,r23
   19f3c:	9802e01e 	bne	r19,zero,1aac0 <___vfiprintf_internal_r+0x14f4>
   19f40:	8c400414 	ori	r17,r17,16
   19f44:	8880080c 	andi	r2,r17,32
   19f48:	1000641e 	bne	r2,zero,1a0dc <___vfiprintf_internal_r+0xb10>
   19f4c:	8880040c 	andi	r2,r17,16
   19f50:	1001c81e 	bne	r2,zero,1a674 <___vfiprintf_internal_r+0x10a8>
   19f54:	8880100c 	andi	r2,r17,64
   19f58:	d8001d85 	stb	zero,118(sp)
   19f5c:	1002281e 	bne	r2,zero,1a800 <___vfiprintf_internal_r+0x1234>
   19f60:	d9002217 	ldw	r4,136(sp)
   19f64:	0029883a 	mov	r20,zero
   19f68:	20800104 	addi	r2,r4,4
   19f6c:	24c00017 	ldw	r19,0(r4)
   19f70:	8001c60e 	bge	r16,zero,1a68c <___vfiprintf_internal_r+0x10c0>
   19f74:	d8802215 	stw	r2,136(sp)
   19f78:	002b883a 	mov	r21,zero
   19f7c:	9d04b03a 	or	r2,r19,r20
   19f80:	103f911e 	bne	r2,zero,19dc8 <__alt_data_end+0xfc019dc8>
   19f84:	00800044 	movi	r2,1
   19f88:	10803fcc 	andi	r2,r2,255
   19f8c:	00c00044 	movi	r3,1
   19f90:	10c05f26 	beq	r2,r3,1a110 <___vfiprintf_internal_r+0xb44>
   19f94:	00c00084 	movi	r3,2
   19f98:	10ffe31e 	bne	r2,r3,19f28 <__alt_data_end+0xfc019f28>
   19f9c:	0027883a 	mov	r19,zero
   19fa0:	0029883a 	mov	r20,zero
   19fa4:	00015106 	br	1a4ec <___vfiprintf_internal_r+0xf20>
   19fa8:	9cc03fcc 	andi	r19,r19,255
   19fac:	b811883a 	mov	r8,r23
   19fb0:	9802c01e 	bne	r19,zero,1aab4 <___vfiprintf_internal_r+0x14e8>
   19fb4:	014000f4 	movhi	r5,3
   19fb8:	29690d04 	addi	r5,r5,-23500
   19fbc:	d9402615 	stw	r5,152(sp)
   19fc0:	8880080c 	andi	r2,r17,32
   19fc4:	103f541e 	bne	r2,zero,19d18 <__alt_data_end+0xfc019d18>
   19fc8:	8880040c 	andi	r2,r17,16
   19fcc:	1001f226 	beq	r2,zero,1a798 <___vfiprintf_internal_r+0x11cc>
   19fd0:	d9402217 	ldw	r5,136(sp)
   19fd4:	0029883a 	mov	r20,zero
   19fd8:	2cc00017 	ldw	r19,0(r5)
   19fdc:	29400104 	addi	r5,r5,4
   19fe0:	d9402215 	stw	r5,136(sp)
   19fe4:	003f5106 	br	19d2c <__alt_data_end+0xfc019d2c>
   19fe8:	d8c02217 	ldw	r3,136(sp)
   19fec:	b811883a 	mov	r8,r23
   19ff0:	d8001d85 	stb	zero,118(sp)
   19ff4:	1dc00017 	ldw	r23,0(r3)
   19ff8:	1f000104 	addi	fp,r3,4
   19ffc:	b8025926 	beq	r23,zero,1a964 <___vfiprintf_internal_r+0x1398>
   1a000:	80023316 	blt	r16,zero,1a8d0 <___vfiprintf_internal_r+0x1304>
   1a004:	800d883a 	mov	r6,r16
   1a008:	000b883a 	mov	r5,zero
   1a00c:	b809883a 	mov	r4,r23
   1a010:	da002a15 	stw	r8,168(sp)
   1a014:	00163d40 	call	163d4 <memchr>
   1a018:	da002a17 	ldw	r8,168(sp)
   1a01c:	10026826 	beq	r2,zero,1a9c0 <___vfiprintf_internal_r+0x13f4>
   1a020:	15e9c83a 	sub	r20,r2,r23
   1a024:	dd401d83 	ldbu	r21,118(sp)
   1a028:	df002215 	stw	fp,136(sp)
   1a02c:	0021883a 	mov	r16,zero
   1a030:	003e6906 	br	199d8 <__alt_data_end+0xfc0199d8>
   1a034:	9cc03fcc 	andi	r19,r19,255
   1a038:	b811883a 	mov	r8,r23
   1a03c:	983fc126 	beq	r19,zero,19f44 <__alt_data_end+0xfc019f44>
   1a040:	d8c02303 	ldbu	r3,140(sp)
   1a044:	d8c01d85 	stb	r3,118(sp)
   1a048:	003fbe06 	br	19f44 <__alt_data_end+0xfc019f44>
   1a04c:	d9002217 	ldw	r4,136(sp)
   1a050:	d9402217 	ldw	r5,136(sp)
   1a054:	21000017 	ldw	r4,0(r4)
   1a058:	28800104 	addi	r2,r5,4
   1a05c:	d9002515 	stw	r4,148(sp)
   1a060:	203e3d16 	blt	r4,zero,19958 <__alt_data_end+0xfc019958>
   1a064:	d8802215 	stw	r2,136(sp)
   1a068:	b0c00007 	ldb	r3,0(r22)
   1a06c:	003db406 	br	19740 <__alt_data_end+0xfc019740>
   1a070:	00c00ac4 	movi	r3,43
   1a074:	d8c02305 	stb	r3,140(sp)
   1a078:	04c00044 	movi	r19,1
   1a07c:	b0c00007 	ldb	r3,0(r22)
   1a080:	003daf06 	br	19740 <__alt_data_end+0xfc019740>
   1a084:	b0c00007 	ldb	r3,0(r22)
   1a088:	01000a84 	movi	r4,42
   1a08c:	b4000044 	addi	r16,r22,1
   1a090:	19025e26 	beq	r3,r4,1aa0c <___vfiprintf_internal_r+0x1440>
   1a094:	1f3ff404 	addi	fp,r3,-48
   1a098:	0009883a 	mov	r4,zero
   1a09c:	af025236 	bltu	r21,fp,1a9e8 <___vfiprintf_internal_r+0x141c>
   1a0a0:	01400284 	movi	r5,10
   1a0a4:	000ce000 	call	ce00 <__mulsi3>
   1a0a8:	80c00007 	ldb	r3,0(r16)
   1a0ac:	1709883a 	add	r4,r2,fp
   1a0b0:	85800044 	addi	r22,r16,1
   1a0b4:	1f3ff404 	addi	fp,r3,-48
   1a0b8:	b021883a 	mov	r16,r22
   1a0bc:	af3ff82e 	bgeu	r21,fp,1a0a0 <__alt_data_end+0xfc01a0a0>
   1a0c0:	2021883a 	mov	r16,r4
   1a0c4:	203d9f0e 	bge	r4,zero,19744 <__alt_data_end+0xfc019744>
   1a0c8:	043fffc4 	movi	r16,-1
   1a0cc:	003d9d06 	br	19744 <__alt_data_end+0xfc019744>
   1a0d0:	8c401014 	ori	r17,r17,64
   1a0d4:	b0c00007 	ldb	r3,0(r22)
   1a0d8:	003d9906 	br	19740 <__alt_data_end+0xfc019740>
   1a0dc:	d9002217 	ldw	r4,136(sp)
   1a0e0:	d8001d85 	stb	zero,118(sp)
   1a0e4:	20c00204 	addi	r3,r4,8
   1a0e8:	24c00017 	ldw	r19,0(r4)
   1a0ec:	25000117 	ldw	r20,4(r4)
   1a0f0:	8001e716 	blt	r16,zero,1a890 <___vfiprintf_internal_r+0x12c4>
   1a0f4:	013fdfc4 	movi	r4,-129
   1a0f8:	9d04b03a 	or	r2,r19,r20
   1a0fc:	d8c02215 	stw	r3,136(sp)
   1a100:	8922703a 	and	r17,r17,r4
   1a104:	002b883a 	mov	r21,zero
   1a108:	103f2f1e 	bne	r2,zero,19dc8 <__alt_data_end+0xfc019dc8>
   1a10c:	803e2f26 	beq	r16,zero,199cc <__alt_data_end+0xfc0199cc>
   1a110:	0027883a 	mov	r19,zero
   1a114:	9cc00c04 	addi	r19,r19,48
   1a118:	dcc019c5 	stb	r19,103(sp)
   1a11c:	dd002817 	ldw	r20,160(sp)
   1a120:	ddc019c4 	addi	r23,sp,103
   1a124:	003e2c06 	br	199d8 <__alt_data_end+0xfc0199d8>
   1a128:	9cc03fcc 	andi	r19,r19,255
   1a12c:	b811883a 	mov	r8,r23
   1a130:	9802571e 	bne	r19,zero,1aa90 <___vfiprintf_internal_r+0x14c4>
   1a134:	18005726 	beq	r3,zero,1a294 <___vfiprintf_internal_r+0xcc8>
   1a138:	04c00044 	movi	r19,1
   1a13c:	d8c01005 	stb	r3,64(sp)
   1a140:	d8001d85 	stb	zero,118(sp)
   1a144:	9829883a 	mov	r20,r19
   1a148:	ddc01004 	addi	r23,sp,64
   1a14c:	003f0a06 	br	19d78 <__alt_data_end+0xfc019d78>
   1a150:	d9402017 	ldw	r5,128(sp)
   1a154:	d9002117 	ldw	r4,132(sp)
   1a158:	d9801a04 	addi	r6,sp,104
   1a15c:	da802a15 	stw	r10,168(sp)
   1a160:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a164:	da802a17 	ldw	r10,168(sp)
   1a168:	1000501e 	bne	r2,zero,1a2ac <___vfiprintf_internal_r+0xce0>
   1a16c:	d9801b17 	ldw	r6,108(sp)
   1a170:	d8801c17 	ldw	r2,112(sp)
   1a174:	d811883a 	mov	r8,sp
   1a178:	31000044 	addi	r4,r6,1
   1a17c:	003e3606 	br	19a58 <__alt_data_end+0xfc019a58>
   1a180:	d9001b17 	ldw	r4,108(sp)
   1a184:	d8801c17 	ldw	r2,112(sp)
   1a188:	21400044 	addi	r5,r4,1
   1a18c:	d9801d87 	ldb	r6,118(sp)
   1a190:	303e5226 	beq	r6,zero,19adc <__alt_data_end+0xfc019adc>
   1a194:	01800044 	movi	r6,1
   1a198:	d9001d84 	addi	r4,sp,118
   1a19c:	1185883a 	add	r2,r2,r6
   1a1a0:	41000015 	stw	r4,0(r8)
   1a1a4:	41800115 	stw	r6,4(r8)
   1a1a8:	d8801c15 	stw	r2,112(sp)
   1a1ac:	d9401b15 	stw	r5,108(sp)
   1a1b0:	010001c4 	movi	r4,7
   1a1b4:	2140b00e 	bge	r4,r5,1a478 <___vfiprintf_internal_r+0xeac>
   1a1b8:	1000f61e 	bne	r2,zero,1a594 <___vfiprintf_internal_r+0xfc8>
   1a1bc:	3800b31e 	bne	r7,zero,1a48c <___vfiprintf_internal_r+0xec0>
   1a1c0:	0009883a 	mov	r4,zero
   1a1c4:	300b883a 	mov	r5,r6
   1a1c8:	d811883a 	mov	r8,sp
   1a1cc:	01802004 	movi	r6,128
   1a1d0:	19be5226 	beq	r3,r6,19b1c <__alt_data_end+0xfc019b1c>
   1a1d4:	8521c83a 	sub	r16,r16,r20
   1a1d8:	043e790e 	bge	zero,r16,19bc0 <__alt_data_end+0xfc019bc0>
   1a1dc:	05400404 	movi	r21,16
   1a1e0:	ac01b00e 	bge	r21,r16,1a8a4 <___vfiprintf_internal_r+0x12d8>
   1a1e4:	014000f4 	movhi	r5,3
   1a1e8:	29698204 	addi	r5,r5,-23032
   1a1ec:	d9402315 	stw	r5,140(sp)
   1a1f0:	070001c4 	movi	fp,7
   1a1f4:	00000506 	br	1a20c <___vfiprintf_internal_r+0xc40>
   1a1f8:	21400084 	addi	r5,r4,2
   1a1fc:	42000204 	addi	r8,r8,8
   1a200:	1809883a 	mov	r4,r3
   1a204:	843ffc04 	addi	r16,r16,-16
   1a208:	ac000d0e 	bge	r21,r16,1a240 <___vfiprintf_internal_r+0xc74>
   1a20c:	10800404 	addi	r2,r2,16
   1a210:	20c00044 	addi	r3,r4,1
   1a214:	44800015 	stw	r18,0(r8)
   1a218:	45400115 	stw	r21,4(r8)
   1a21c:	d8801c15 	stw	r2,112(sp)
   1a220:	d8c01b15 	stw	r3,108(sp)
   1a224:	e0fff40e 	bge	fp,r3,1a1f8 <__alt_data_end+0xfc01a1f8>
   1a228:	1000101e 	bne	r2,zero,1a26c <___vfiprintf_internal_r+0xca0>
   1a22c:	843ffc04 	addi	r16,r16,-16
   1a230:	01400044 	movi	r5,1
   1a234:	0009883a 	mov	r4,zero
   1a238:	d811883a 	mov	r8,sp
   1a23c:	ac3ff316 	blt	r21,r16,1a20c <__alt_data_end+0xfc01a20c>
   1a240:	d8c02317 	ldw	r3,140(sp)
   1a244:	1405883a 	add	r2,r2,r16
   1a248:	44000115 	stw	r16,4(r8)
   1a24c:	40c00015 	stw	r3,0(r8)
   1a250:	d8801c15 	stw	r2,112(sp)
   1a254:	d9401b15 	stw	r5,108(sp)
   1a258:	00c001c4 	movi	r3,7
   1a25c:	19401916 	blt	r3,r5,1a2c4 <___vfiprintf_internal_r+0xcf8>
   1a260:	42000204 	addi	r8,r8,8
   1a264:	29400044 	addi	r5,r5,1
   1a268:	003e5506 	br	19bc0 <__alt_data_end+0xfc019bc0>
   1a26c:	d9402017 	ldw	r5,128(sp)
   1a270:	d9002117 	ldw	r4,132(sp)
   1a274:	d9801a04 	addi	r6,sp,104
   1a278:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a27c:	10000b1e 	bne	r2,zero,1a2ac <___vfiprintf_internal_r+0xce0>
   1a280:	d9001b17 	ldw	r4,108(sp)
   1a284:	d8801c17 	ldw	r2,112(sp)
   1a288:	d811883a 	mov	r8,sp
   1a28c:	21400044 	addi	r5,r4,1
   1a290:	003fdc06 	br	1a204 <__alt_data_end+0xfc01a204>
   1a294:	d8801c17 	ldw	r2,112(sp)
   1a298:	10000426 	beq	r2,zero,1a2ac <___vfiprintf_internal_r+0xce0>
   1a29c:	d9402017 	ldw	r5,128(sp)
   1a2a0:	d9002117 	ldw	r4,132(sp)
   1a2a4:	d9801a04 	addi	r6,sp,104
   1a2a8:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a2ac:	d9402017 	ldw	r5,128(sp)
   1a2b0:	2880030b 	ldhu	r2,12(r5)
   1a2b4:	1080100c 	andi	r2,r2,64
   1a2b8:	10014d1e 	bne	r2,zero,1a7f0 <___vfiprintf_internal_r+0x1224>
   1a2bc:	d8802417 	ldw	r2,144(sp)
   1a2c0:	003d9706 	br	19920 <__alt_data_end+0xfc019920>
   1a2c4:	1000d21e 	bne	r2,zero,1a610 <___vfiprintf_internal_r+0x1044>
   1a2c8:	00c00044 	movi	r3,1
   1a2cc:	a005883a 	mov	r2,r20
   1a2d0:	ddc00015 	stw	r23,0(sp)
   1a2d4:	dd000115 	stw	r20,4(sp)
   1a2d8:	dd001c15 	stw	r20,112(sp)
   1a2dc:	d8c01b15 	stw	r3,108(sp)
   1a2e0:	d811883a 	mov	r8,sp
   1a2e4:	42000204 	addi	r8,r8,8
   1a2e8:	8c40010c 	andi	r17,r17,4
   1a2ec:	88004026 	beq	r17,zero,1a3f0 <___vfiprintf_internal_r+0xe24>
   1a2f0:	d9002517 	ldw	r4,148(sp)
   1a2f4:	24e3c83a 	sub	r17,r4,r19
   1a2f8:	04403d0e 	bge	zero,r17,1a3f0 <___vfiprintf_internal_r+0xe24>
   1a2fc:	04000404 	movi	r16,16
   1a300:	8441a90e 	bge	r16,r17,1a9a8 <___vfiprintf_internal_r+0x13dc>
   1a304:	00c000f4 	movhi	r3,3
   1a308:	18e98604 	addi	r3,r3,-23016
   1a30c:	d9001b17 	ldw	r4,108(sp)
   1a310:	d8c02315 	stw	r3,140(sp)
   1a314:	050001c4 	movi	r20,7
   1a318:	dd402117 	ldw	r21,132(sp)
   1a31c:	ddc02017 	ldw	r23,128(sp)
   1a320:	00000506 	br	1a338 <___vfiprintf_internal_r+0xd6c>
   1a324:	21400084 	addi	r5,r4,2
   1a328:	42000204 	addi	r8,r8,8
   1a32c:	1809883a 	mov	r4,r3
   1a330:	8c7ffc04 	addi	r17,r17,-16
   1a334:	84400f0e 	bge	r16,r17,1a374 <___vfiprintf_internal_r+0xda8>
   1a338:	014000f4 	movhi	r5,3
   1a33c:	10800404 	addi	r2,r2,16
   1a340:	20c00044 	addi	r3,r4,1
   1a344:	29698604 	addi	r5,r5,-23016
   1a348:	41400015 	stw	r5,0(r8)
   1a34c:	44000115 	stw	r16,4(r8)
   1a350:	d8801c15 	stw	r2,112(sp)
   1a354:	d8c01b15 	stw	r3,108(sp)
   1a358:	a0fff20e 	bge	r20,r3,1a324 <__alt_data_end+0xfc01a324>
   1a35c:	1000141e 	bne	r2,zero,1a3b0 <___vfiprintf_internal_r+0xde4>
   1a360:	8c7ffc04 	addi	r17,r17,-16
   1a364:	01400044 	movi	r5,1
   1a368:	0009883a 	mov	r4,zero
   1a36c:	d811883a 	mov	r8,sp
   1a370:	847ff116 	blt	r16,r17,1a338 <__alt_data_end+0xfc01a338>
   1a374:	d8c02317 	ldw	r3,140(sp)
   1a378:	1445883a 	add	r2,r2,r17
   1a37c:	44400115 	stw	r17,4(r8)
   1a380:	40c00015 	stw	r3,0(r8)
   1a384:	d8801c15 	stw	r2,112(sp)
   1a388:	d9401b15 	stw	r5,108(sp)
   1a38c:	00c001c4 	movi	r3,7
   1a390:	1940170e 	bge	r3,r5,1a3f0 <___vfiprintf_internal_r+0xe24>
   1a394:	1000101e 	bne	r2,zero,1a3d8 <___vfiprintf_internal_r+0xe0c>
   1a398:	d8802517 	ldw	r2,148(sp)
   1a39c:	14c11616 	blt	r2,r19,1a7f8 <___vfiprintf_internal_r+0x122c>
   1a3a0:	d9002417 	ldw	r4,144(sp)
   1a3a4:	2089883a 	add	r4,r4,r2
   1a3a8:	d9002415 	stw	r4,144(sp)
   1a3ac:	003e1806 	br	19c10 <__alt_data_end+0xfc019c10>
   1a3b0:	d9801a04 	addi	r6,sp,104
   1a3b4:	b80b883a 	mov	r5,r23
   1a3b8:	a809883a 	mov	r4,r21
   1a3bc:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a3c0:	103fba1e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a3c4:	d9001b17 	ldw	r4,108(sp)
   1a3c8:	d8801c17 	ldw	r2,112(sp)
   1a3cc:	d811883a 	mov	r8,sp
   1a3d0:	21400044 	addi	r5,r4,1
   1a3d4:	003fd606 	br	1a330 <__alt_data_end+0xfc01a330>
   1a3d8:	d9402017 	ldw	r5,128(sp)
   1a3dc:	d9002117 	ldw	r4,132(sp)
   1a3e0:	d9801a04 	addi	r6,sp,104
   1a3e4:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a3e8:	103fb01e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a3ec:	d8801c17 	ldw	r2,112(sp)
   1a3f0:	d8c02517 	ldw	r3,148(sp)
   1a3f4:	1cc0010e 	bge	r3,r19,1a3fc <___vfiprintf_internal_r+0xe30>
   1a3f8:	9807883a 	mov	r3,r19
   1a3fc:	d9002417 	ldw	r4,144(sp)
   1a400:	20c9883a 	add	r4,r4,r3
   1a404:	d9002415 	stw	r4,144(sp)
   1a408:	103e0126 	beq	r2,zero,19c10 <__alt_data_end+0xfc019c10>
   1a40c:	d9402017 	ldw	r5,128(sp)
   1a410:	d9002117 	ldw	r4,132(sp)
   1a414:	d9801a04 	addi	r6,sp,104
   1a418:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a41c:	103dfc26 	beq	r2,zero,19c10 <__alt_data_end+0xfc019c10>
   1a420:	003fa206 	br	1a2ac <__alt_data_end+0xfc01a2ac>
   1a424:	d9402017 	ldw	r5,128(sp)
   1a428:	d9002117 	ldw	r4,132(sp)
   1a42c:	d9801a04 	addi	r6,sp,104
   1a430:	d9c02b15 	stw	r7,172(sp)
   1a434:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a438:	d9c02b17 	ldw	r7,172(sp)
   1a43c:	103f9b1e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a440:	d9001b17 	ldw	r4,108(sp)
   1a444:	d8801c17 	ldw	r2,112(sp)
   1a448:	d811883a 	mov	r8,sp
   1a44c:	21800044 	addi	r6,r4,1
   1a450:	003dbf06 	br	19b50 <__alt_data_end+0xfc019b50>
   1a454:	1000d81e 	bne	r2,zero,1a7b8 <___vfiprintf_internal_r+0x11ec>
   1a458:	d9001d87 	ldb	r4,118(sp)
   1a45c:	20000a26 	beq	r4,zero,1a488 <___vfiprintf_internal_r+0xebc>
   1a460:	00800044 	movi	r2,1
   1a464:	d9001d84 	addi	r4,sp,118
   1a468:	100b883a 	mov	r5,r2
   1a46c:	d9000015 	stw	r4,0(sp)
   1a470:	d8800115 	stw	r2,4(sp)
   1a474:	d811883a 	mov	r8,sp
   1a478:	2809883a 	mov	r4,r5
   1a47c:	42000204 	addi	r8,r8,8
   1a480:	29400044 	addi	r5,r5,1
   1a484:	003d9506 	br	19adc <__alt_data_end+0xfc019adc>
   1a488:	3800fd26 	beq	r7,zero,1a880 <___vfiprintf_internal_r+0x12b4>
   1a48c:	00800084 	movi	r2,2
   1a490:	d9001d04 	addi	r4,sp,116
   1a494:	d9000015 	stw	r4,0(sp)
   1a498:	d8800115 	stw	r2,4(sp)
   1a49c:	01400044 	movi	r5,1
   1a4a0:	d811883a 	mov	r8,sp
   1a4a4:	2809883a 	mov	r4,r5
   1a4a8:	42000204 	addi	r8,r8,8
   1a4ac:	29400044 	addi	r5,r5,1
   1a4b0:	003f4606 	br	1a1cc <__alt_data_end+0xfc01a1cc>
   1a4b4:	d8802517 	ldw	r2,148(sp)
   1a4b8:	14c0010e 	bge	r2,r19,1a4c0 <___vfiprintf_internal_r+0xef4>
   1a4bc:	9805883a 	mov	r2,r19
   1a4c0:	d9402417 	ldw	r5,144(sp)
   1a4c4:	288b883a 	add	r5,r5,r2
   1a4c8:	d9402415 	stw	r5,144(sp)
   1a4cc:	003dd006 	br	19c10 <__alt_data_end+0xfc019c10>
   1a4d0:	d8001d85 	stb	zero,118(sp)
   1a4d4:	80005d16 	blt	r16,zero,1a64c <___vfiprintf_internal_r+0x1080>
   1a4d8:	00ffdfc4 	movi	r3,-129
   1a4dc:	9d04b03a 	or	r2,r19,r20
   1a4e0:	88e2703a 	and	r17,r17,r3
   1a4e4:	103d3726 	beq	r2,zero,199c4 <__alt_data_end+0xfc0199c4>
   1a4e8:	002b883a 	mov	r21,zero
   1a4ec:	d9002617 	ldw	r4,152(sp)
   1a4f0:	ddc01a04 	addi	r23,sp,104
   1a4f4:	988003cc 	andi	r2,r19,15
   1a4f8:	a006973a 	slli	r3,r20,28
   1a4fc:	2085883a 	add	r2,r4,r2
   1a500:	9826d13a 	srli	r19,r19,4
   1a504:	10800003 	ldbu	r2,0(r2)
   1a508:	a028d13a 	srli	r20,r20,4
   1a50c:	bdffffc4 	addi	r23,r23,-1
   1a510:	1ce6b03a 	or	r19,r3,r19
   1a514:	b8800005 	stb	r2,0(r23)
   1a518:	9d04b03a 	or	r2,r19,r20
   1a51c:	103ff51e 	bne	r2,zero,1a4f4 <__alt_data_end+0xfc01a4f4>
   1a520:	d8801e17 	ldw	r2,120(sp)
   1a524:	15e9c83a 	sub	r20,r2,r23
   1a528:	003d2b06 	br	199d8 <__alt_data_end+0xfc0199d8>
   1a52c:	d9402017 	ldw	r5,128(sp)
   1a530:	d9002117 	ldw	r4,132(sp)
   1a534:	d9801a04 	addi	r6,sp,104
   1a538:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a53c:	103f5b1e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a540:	d8801c17 	ldw	r2,112(sp)
   1a544:	d811883a 	mov	r8,sp
   1a548:	003f6706 	br	1a2e8 <__alt_data_end+0xfc01a2e8>
   1a54c:	d9402017 	ldw	r5,128(sp)
   1a550:	d9002117 	ldw	r4,132(sp)
   1a554:	d9801a04 	addi	r6,sp,104
   1a558:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a55c:	103f531e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a560:	d811883a 	mov	r8,sp
   1a564:	003cd906 	br	198cc <__alt_data_end+0xfc0198cc>
   1a568:	10803fcc 	andi	r2,r2,255
   1a56c:	1080201c 	xori	r2,r2,128
   1a570:	10bfe004 	addi	r2,r2,-128
   1a574:	00c00c04 	movi	r3,48
   1a578:	10ffe926 	beq	r2,r3,1a520 <__alt_data_end+0xfc01a520>
   1a57c:	b8ffffc5 	stb	r3,-1(r23)
   1a580:	d8c01e17 	ldw	r3,120(sp)
   1a584:	b8bfffc4 	addi	r2,r23,-1
   1a588:	102f883a 	mov	r23,r2
   1a58c:	18a9c83a 	sub	r20,r3,r2
   1a590:	003d1106 	br	199d8 <__alt_data_end+0xfc0199d8>
   1a594:	d9402017 	ldw	r5,128(sp)
   1a598:	d9002117 	ldw	r4,132(sp)
   1a59c:	d9801a04 	addi	r6,sp,104
   1a5a0:	d8c02a15 	stw	r3,168(sp)
   1a5a4:	d9c02b15 	stw	r7,172(sp)
   1a5a8:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a5ac:	d8c02a17 	ldw	r3,168(sp)
   1a5b0:	d9c02b17 	ldw	r7,172(sp)
   1a5b4:	103f3d1e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a5b8:	d9001b17 	ldw	r4,108(sp)
   1a5bc:	d8801c17 	ldw	r2,112(sp)
   1a5c0:	d811883a 	mov	r8,sp
   1a5c4:	21400044 	addi	r5,r4,1
   1a5c8:	003d4406 	br	19adc <__alt_data_end+0xfc019adc>
   1a5cc:	d9402017 	ldw	r5,128(sp)
   1a5d0:	d9002117 	ldw	r4,132(sp)
   1a5d4:	d9801a04 	addi	r6,sp,104
   1a5d8:	d8c02a15 	stw	r3,168(sp)
   1a5dc:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a5e0:	d8c02a17 	ldw	r3,168(sp)
   1a5e4:	103f311e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a5e8:	d9001b17 	ldw	r4,108(sp)
   1a5ec:	d8801c17 	ldw	r2,112(sp)
   1a5f0:	d811883a 	mov	r8,sp
   1a5f4:	21400044 	addi	r5,r4,1
   1a5f8:	003ef406 	br	1a1cc <__alt_data_end+0xfc01a1cc>
   1a5fc:	1000bd1e 	bne	r2,zero,1a8f4 <___vfiprintf_internal_r+0x1328>
   1a600:	01400044 	movi	r5,1
   1a604:	0009883a 	mov	r4,zero
   1a608:	d811883a 	mov	r8,sp
   1a60c:	003ef106 	br	1a1d4 <__alt_data_end+0xfc01a1d4>
   1a610:	d9402017 	ldw	r5,128(sp)
   1a614:	d9002117 	ldw	r4,132(sp)
   1a618:	d9801a04 	addi	r6,sp,104
   1a61c:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a620:	103f221e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a624:	d9401b17 	ldw	r5,108(sp)
   1a628:	d8801c17 	ldw	r2,112(sp)
   1a62c:	d811883a 	mov	r8,sp
   1a630:	29400044 	addi	r5,r5,1
   1a634:	003d6206 	br	19bc0 <__alt_data_end+0xfc019bc0>
   1a638:	014000f4 	movhi	r5,3
   1a63c:	29691204 	addi	r5,r5,-23480
   1a640:	d9402615 	stw	r5,152(sp)
   1a644:	d8c02215 	stw	r3,136(sp)
   1a648:	1023883a 	mov	r17,r2
   1a64c:	9d04b03a 	or	r2,r19,r20
   1a650:	103fa51e 	bne	r2,zero,1a4e8 <__alt_data_end+0xfc01a4e8>
   1a654:	002b883a 	mov	r21,zero
   1a658:	00800084 	movi	r2,2
   1a65c:	003e4a06 	br	19f88 <__alt_data_end+0xfc019f88>
   1a660:	014000f4 	movhi	r5,3
   1a664:	29691204 	addi	r5,r5,-23480
   1a668:	002b883a 	mov	r21,zero
   1a66c:	d9402615 	stw	r5,152(sp)
   1a670:	003f9e06 	br	1a4ec <__alt_data_end+0xfc01a4ec>
   1a674:	d9402217 	ldw	r5,136(sp)
   1a678:	d8001d85 	stb	zero,118(sp)
   1a67c:	0029883a 	mov	r20,zero
   1a680:	28800104 	addi	r2,r5,4
   1a684:	2cc00017 	ldw	r19,0(r5)
   1a688:	803e3a16 	blt	r16,zero,19f74 <__alt_data_end+0xfc019f74>
   1a68c:	00ffdfc4 	movi	r3,-129
   1a690:	d8802215 	stw	r2,136(sp)
   1a694:	88e2703a 	and	r17,r17,r3
   1a698:	002b883a 	mov	r21,zero
   1a69c:	983e9b26 	beq	r19,zero,1a10c <__alt_data_end+0xfc01a10c>
   1a6a0:	00800244 	movi	r2,9
   1a6a4:	14fdc936 	bltu	r2,r19,19dcc <__alt_data_end+0xfc019dcc>
   1a6a8:	003e9a06 	br	1a114 <__alt_data_end+0xfc01a114>
   1a6ac:	00800c04 	movi	r2,48
   1a6b0:	d8c01d45 	stb	r3,117(sp)
   1a6b4:	d8801d05 	stb	r2,116(sp)
   1a6b8:	d8001d85 	stb	zero,118(sp)
   1a6bc:	88c00094 	ori	r3,r17,2
   1a6c0:	80009c16 	blt	r16,zero,1a934 <___vfiprintf_internal_r+0x1368>
   1a6c4:	00bfdfc4 	movi	r2,-129
   1a6c8:	88a2703a 	and	r17,r17,r2
   1a6cc:	8c400094 	ori	r17,r17,2
   1a6d0:	002b883a 	mov	r21,zero
   1a6d4:	003f8506 	br	1a4ec <__alt_data_end+0xfc01a4ec>
   1a6d8:	b029883a 	mov	r20,r22
   1a6dc:	003c0b06 	br	1970c <__alt_data_end+0xfc01970c>
   1a6e0:	04e7c83a 	sub	r19,zero,r19
   1a6e4:	05400b44 	movi	r21,45
   1a6e8:	9804c03a 	cmpne	r2,r19,zero
   1a6ec:	0529c83a 	sub	r20,zero,r20
   1a6f0:	dd401d85 	stb	r21,118(sp)
   1a6f4:	a0a9c83a 	sub	r20,r20,r2
   1a6f8:	80009716 	blt	r16,zero,1a958 <___vfiprintf_internal_r+0x138c>
   1a6fc:	00bfdfc4 	movi	r2,-129
   1a700:	88a2703a 	and	r17,r17,r2
   1a704:	003db006 	br	19dc8 <__alt_data_end+0xfc019dc8>
   1a708:	b0c00007 	ldb	r3,0(r22)
   1a70c:	003c0c06 	br	19740 <__alt_data_end+0xfc019740>
   1a710:	8880100c 	andi	r2,r17,64
   1a714:	d8001d85 	stb	zero,118(sp)
   1a718:	1000461e 	bne	r2,zero,1a834 <___vfiprintf_internal_r+0x1268>
   1a71c:	d9002217 	ldw	r4,136(sp)
   1a720:	0029883a 	mov	r20,zero
   1a724:	20800104 	addi	r2,r4,4
   1a728:	24c00017 	ldw	r19,0(r4)
   1a72c:	803df80e 	bge	r16,zero,19f10 <__alt_data_end+0xfc019f10>
   1a730:	9d06b03a 	or	r3,r19,r20
   1a734:	d8802215 	stw	r2,136(sp)
   1a738:	183d5e1e 	bne	r3,zero,19cb4 <__alt_data_end+0xfc019cb4>
   1a73c:	002b883a 	mov	r21,zero
   1a740:	0005883a 	mov	r2,zero
   1a744:	003e1006 	br	19f88 <__alt_data_end+0xfc019f88>
   1a748:	8880040c 	andi	r2,r17,16
   1a74c:	1000321e 	bne	r2,zero,1a818 <___vfiprintf_internal_r+0x124c>
   1a750:	8c40100c 	andi	r17,r17,64
   1a754:	88008d26 	beq	r17,zero,1a98c <___vfiprintf_internal_r+0x13c0>
   1a758:	d9402217 	ldw	r5,136(sp)
   1a75c:	d8c02417 	ldw	r3,144(sp)
   1a760:	28800017 	ldw	r2,0(r5)
   1a764:	29400104 	addi	r5,r5,4
   1a768:	d9402215 	stw	r5,136(sp)
   1a76c:	10c0000d 	sth	r3,0(r2)
   1a770:	003bca06 	br	1969c <__alt_data_end+0xfc01969c>
   1a774:	8880100c 	andi	r2,r17,64
   1a778:	10003a26 	beq	r2,zero,1a864 <___vfiprintf_internal_r+0x1298>
   1a77c:	d8802217 	ldw	r2,136(sp)
   1a780:	14c0000f 	ldh	r19,0(r2)
   1a784:	10800104 	addi	r2,r2,4
   1a788:	d8802215 	stw	r2,136(sp)
   1a78c:	9829d7fa 	srai	r20,r19,31
   1a790:	a005883a 	mov	r2,r20
   1a794:	003d8506 	br	19dac <__alt_data_end+0xfc019dac>
   1a798:	8880100c 	andi	r2,r17,64
   1a79c:	10002b26 	beq	r2,zero,1a84c <___vfiprintf_internal_r+0x1280>
   1a7a0:	d8802217 	ldw	r2,136(sp)
   1a7a4:	0029883a 	mov	r20,zero
   1a7a8:	14c0000b 	ldhu	r19,0(r2)
   1a7ac:	10800104 	addi	r2,r2,4
   1a7b0:	d8802215 	stw	r2,136(sp)
   1a7b4:	003d5d06 	br	19d2c <__alt_data_end+0xfc019d2c>
   1a7b8:	d9402017 	ldw	r5,128(sp)
   1a7bc:	d9002117 	ldw	r4,132(sp)
   1a7c0:	d9801a04 	addi	r6,sp,104
   1a7c4:	d8c02a15 	stw	r3,168(sp)
   1a7c8:	d9c02b15 	stw	r7,172(sp)
   1a7cc:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a7d0:	d8c02a17 	ldw	r3,168(sp)
   1a7d4:	d9c02b17 	ldw	r7,172(sp)
   1a7d8:	103eb41e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a7dc:	d9001b17 	ldw	r4,108(sp)
   1a7e0:	d8801c17 	ldw	r2,112(sp)
   1a7e4:	d811883a 	mov	r8,sp
   1a7e8:	21400044 	addi	r5,r4,1
   1a7ec:	003e6706 	br	1a18c <__alt_data_end+0xfc01a18c>
   1a7f0:	00bfffc4 	movi	r2,-1
   1a7f4:	003c4a06 	br	19920 <__alt_data_end+0xfc019920>
   1a7f8:	9805883a 	mov	r2,r19
   1a7fc:	003ee806 	br	1a3a0 <__alt_data_end+0xfc01a3a0>
   1a800:	d8c02217 	ldw	r3,136(sp)
   1a804:	0029883a 	mov	r20,zero
   1a808:	18800104 	addi	r2,r3,4
   1a80c:	1cc0000b 	ldhu	r19,0(r3)
   1a810:	803f9e0e 	bge	r16,zero,1a68c <__alt_data_end+0xfc01a68c>
   1a814:	003dd706 	br	19f74 <__alt_data_end+0xfc019f74>
   1a818:	d8c02217 	ldw	r3,136(sp)
   1a81c:	d9002417 	ldw	r4,144(sp)
   1a820:	18800017 	ldw	r2,0(r3)
   1a824:	18c00104 	addi	r3,r3,4
   1a828:	d8c02215 	stw	r3,136(sp)
   1a82c:	11000015 	stw	r4,0(r2)
   1a830:	003b9a06 	br	1969c <__alt_data_end+0xfc01969c>
   1a834:	d8c02217 	ldw	r3,136(sp)
   1a838:	0029883a 	mov	r20,zero
   1a83c:	18800104 	addi	r2,r3,4
   1a840:	1cc0000b 	ldhu	r19,0(r3)
   1a844:	803db20e 	bge	r16,zero,19f10 <__alt_data_end+0xfc019f10>
   1a848:	003fb906 	br	1a730 <__alt_data_end+0xfc01a730>
   1a84c:	d9002217 	ldw	r4,136(sp)
   1a850:	0029883a 	mov	r20,zero
   1a854:	24c00017 	ldw	r19,0(r4)
   1a858:	21000104 	addi	r4,r4,4
   1a85c:	d9002215 	stw	r4,136(sp)
   1a860:	003d3206 	br	19d2c <__alt_data_end+0xfc019d2c>
   1a864:	d8c02217 	ldw	r3,136(sp)
   1a868:	1cc00017 	ldw	r19,0(r3)
   1a86c:	18c00104 	addi	r3,r3,4
   1a870:	d8c02215 	stw	r3,136(sp)
   1a874:	9829d7fa 	srai	r20,r19,31
   1a878:	a005883a 	mov	r2,r20
   1a87c:	003d4b06 	br	19dac <__alt_data_end+0xfc019dac>
   1a880:	0009883a 	mov	r4,zero
   1a884:	01400044 	movi	r5,1
   1a888:	d811883a 	mov	r8,sp
   1a88c:	003e4f06 	br	1a1cc <__alt_data_end+0xfc01a1cc>
   1a890:	d8c02215 	stw	r3,136(sp)
   1a894:	002b883a 	mov	r21,zero
   1a898:	003db806 	br	19f7c <__alt_data_end+0xfc019f7c>
   1a89c:	d811883a 	mov	r8,sp
   1a8a0:	003e9606 	br	1a2fc <__alt_data_end+0xfc01a2fc>
   1a8a4:	010000f4 	movhi	r4,3
   1a8a8:	21298204 	addi	r4,r4,-23032
   1a8ac:	d9002315 	stw	r4,140(sp)
   1a8b0:	003e6306 	br	1a240 <__alt_data_end+0xfc01a240>
   1a8b4:	b0c00043 	ldbu	r3,1(r22)
   1a8b8:	8c400814 	ori	r17,r17,32
   1a8bc:	b5800044 	addi	r22,r22,1
   1a8c0:	18c03fcc 	andi	r3,r3,255
   1a8c4:	18c0201c 	xori	r3,r3,128
   1a8c8:	18ffe004 	addi	r3,r3,-128
   1a8cc:	003b9c06 	br	19740 <__alt_data_end+0xfc019740>
   1a8d0:	b809883a 	mov	r4,r23
   1a8d4:	da002a15 	stw	r8,168(sp)
   1a8d8:	000ef4c0 	call	ef4c <strlen>
   1a8dc:	1029883a 	mov	r20,r2
   1a8e0:	dd401d83 	ldbu	r21,118(sp)
   1a8e4:	df002215 	stw	fp,136(sp)
   1a8e8:	0021883a 	mov	r16,zero
   1a8ec:	da002a17 	ldw	r8,168(sp)
   1a8f0:	003c3906 	br	199d8 <__alt_data_end+0xfc0199d8>
   1a8f4:	d9402017 	ldw	r5,128(sp)
   1a8f8:	d9002117 	ldw	r4,132(sp)
   1a8fc:	d9801a04 	addi	r6,sp,104
   1a900:	00194b80 	call	194b8 <__sprint_r.part.0>
   1a904:	103e691e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a908:	d9001b17 	ldw	r4,108(sp)
   1a90c:	d8801c17 	ldw	r2,112(sp)
   1a910:	d811883a 	mov	r8,sp
   1a914:	21400044 	addi	r5,r4,1
   1a918:	003e2e06 	br	1a1d4 <__alt_data_end+0xfc01a1d4>
   1a91c:	010000f4 	movhi	r4,3
   1a920:	21298604 	addi	r4,r4,-23016
   1a924:	d9002315 	stw	r4,140(sp)
   1a928:	d9001b17 	ldw	r4,108(sp)
   1a92c:	21000044 	addi	r4,r4,1
   1a930:	003c5e06 	br	19aac <__alt_data_end+0xfc019aac>
   1a934:	002b883a 	mov	r21,zero
   1a938:	00800084 	movi	r2,2
   1a93c:	10803fcc 	andi	r2,r2,255
   1a940:	01000044 	movi	r4,1
   1a944:	11002b26 	beq	r2,r4,1a9f4 <___vfiprintf_internal_r+0x1428>
   1a948:	01000084 	movi	r4,2
   1a94c:	11002b1e 	bne	r2,r4,1a9fc <___vfiprintf_internal_r+0x1430>
   1a950:	1823883a 	mov	r17,r3
   1a954:	003ee506 	br	1a4ec <__alt_data_end+0xfc01a4ec>
   1a958:	8807883a 	mov	r3,r17
   1a95c:	00800044 	movi	r2,1
   1a960:	003ff606 	br	1a93c <__alt_data_end+0xfc01a93c>
   1a964:	00800184 	movi	r2,6
   1a968:	1400012e 	bgeu	r2,r16,1a970 <___vfiprintf_internal_r+0x13a4>
   1a96c:	1021883a 	mov	r16,r2
   1a970:	8029883a 	mov	r20,r16
   1a974:	8027883a 	mov	r19,r16
   1a978:	80002216 	blt	r16,zero,1aa04 <___vfiprintf_internal_r+0x1438>
   1a97c:	05c000f4 	movhi	r23,3
   1a980:	df002215 	stw	fp,136(sp)
   1a984:	bde91704 	addi	r23,r23,-23460
   1a988:	003cfb06 	br	19d78 <__alt_data_end+0xfc019d78>
   1a98c:	d9002217 	ldw	r4,136(sp)
   1a990:	d9402417 	ldw	r5,144(sp)
   1a994:	20800017 	ldw	r2,0(r4)
   1a998:	21000104 	addi	r4,r4,4
   1a99c:	d9002215 	stw	r4,136(sp)
   1a9a0:	11400015 	stw	r5,0(r2)
   1a9a4:	003b3d06 	br	1969c <__alt_data_end+0xfc01969c>
   1a9a8:	014000f4 	movhi	r5,3
   1a9ac:	29698604 	addi	r5,r5,-23016
   1a9b0:	d9402315 	stw	r5,140(sp)
   1a9b4:	d9401b17 	ldw	r5,108(sp)
   1a9b8:	29400044 	addi	r5,r5,1
   1a9bc:	003e6d06 	br	1a374 <__alt_data_end+0xfc01a374>
   1a9c0:	8029883a 	mov	r20,r16
   1a9c4:	dd401d83 	ldbu	r21,118(sp)
   1a9c8:	df002215 	stw	fp,136(sp)
   1a9cc:	0021883a 	mov	r16,zero
   1a9d0:	003c0106 	br	199d8 <__alt_data_end+0xfc0199d8>
   1a9d4:	00c000f4 	movhi	r3,3
   1a9d8:	18e98204 	addi	r3,r3,-23032
   1a9dc:	d8c02315 	stw	r3,140(sp)
   1a9e0:	280d883a 	mov	r6,r5
   1a9e4:	003c6906 	br	19b8c <__alt_data_end+0xfc019b8c>
   1a9e8:	802d883a 	mov	r22,r16
   1a9ec:	0021883a 	mov	r16,zero
   1a9f0:	003b5406 	br	19744 <__alt_data_end+0xfc019744>
   1a9f4:	1823883a 	mov	r17,r3
   1a9f8:	003cf306 	br	19dc8 <__alt_data_end+0xfc019dc8>
   1a9fc:	1823883a 	mov	r17,r3
   1aa00:	003cad06 	br	19cb8 <__alt_data_end+0xfc019cb8>
   1aa04:	0027883a 	mov	r19,zero
   1aa08:	003fdc06 	br	1a97c <__alt_data_end+0xfc01a97c>
   1aa0c:	d9402217 	ldw	r5,136(sp)
   1aa10:	8005883a 	mov	r2,r16
   1aa14:	b0c00043 	ldbu	r3,1(r22)
   1aa18:	2c000017 	ldw	r16,0(r5)
   1aa1c:	29000104 	addi	r4,r5,4
   1aa20:	d9002215 	stw	r4,136(sp)
   1aa24:	102d883a 	mov	r22,r2
   1aa28:	803fa50e 	bge	r16,zero,1a8c0 <__alt_data_end+0xfc01a8c0>
   1aa2c:	18c03fcc 	andi	r3,r3,255
   1aa30:	18c0201c 	xori	r3,r3,128
   1aa34:	043fffc4 	movi	r16,-1
   1aa38:	18ffe004 	addi	r3,r3,-128
   1aa3c:	003b4006 	br	19740 <__alt_data_end+0xfc019740>
   1aa40:	d9402303 	ldbu	r5,140(sp)
   1aa44:	d9401d85 	stb	r5,118(sp)
   1aa48:	003cae06 	br	19d04 <__alt_data_end+0xfc019d04>
   1aa4c:	d8c02303 	ldbu	r3,140(sp)
   1aa50:	d8c01d85 	stb	r3,118(sp)
   1aa54:	003d1406 	br	19ea8 <__alt_data_end+0xfc019ea8>
   1aa58:	d8c02303 	ldbu	r3,140(sp)
   1aa5c:	d8c01d85 	stb	r3,118(sp)
   1aa60:	003cca06 	br	19d8c <__alt_data_end+0xfc019d8c>
   1aa64:	8880004c 	andi	r2,r17,1
   1aa68:	002b883a 	mov	r21,zero
   1aa6c:	10000526 	beq	r2,zero,1aa84 <___vfiprintf_internal_r+0x14b8>
   1aa70:	00800c04 	movi	r2,48
   1aa74:	d88019c5 	stb	r2,103(sp)
   1aa78:	dd002817 	ldw	r20,160(sp)
   1aa7c:	ddc019c4 	addi	r23,sp,103
   1aa80:	003bd506 	br	199d8 <__alt_data_end+0xfc0199d8>
   1aa84:	0029883a 	mov	r20,zero
   1aa88:	ddc01a04 	addi	r23,sp,104
   1aa8c:	003bd206 	br	199d8 <__alt_data_end+0xfc0199d8>
   1aa90:	d9002303 	ldbu	r4,140(sp)
   1aa94:	d9001d85 	stb	r4,118(sp)
   1aa98:	003da606 	br	1a134 <__alt_data_end+0xfc01a134>
   1aa9c:	d8c02303 	ldbu	r3,140(sp)
   1aaa0:	d8c01d85 	stb	r3,118(sp)
   1aaa4:	003c7606 	br	19c80 <__alt_data_end+0xfc019c80>
   1aaa8:	d8c02303 	ldbu	r3,140(sp)
   1aaac:	d8c01d85 	stb	r3,118(sp)
   1aab0:	003c6506 	br	19c48 <__alt_data_end+0xfc019c48>
   1aab4:	d9002303 	ldbu	r4,140(sp)
   1aab8:	d9001d85 	stb	r4,118(sp)
   1aabc:	003d3d06 	br	19fb4 <__alt_data_end+0xfc019fb4>
   1aac0:	d8c02303 	ldbu	r3,140(sp)
   1aac4:	d8c01d85 	stb	r3,118(sp)
   1aac8:	003d1d06 	br	19f40 <__alt_data_end+0xfc019f40>
   1aacc:	d8c02303 	ldbu	r3,140(sp)
   1aad0:	d8c01d85 	stb	r3,118(sp)
   1aad4:	003d0306 	br	19ee4 <__alt_data_end+0xfc019ee4>

0001aad8 <__vfiprintf_internal>:
   1aad8:	008000f4 	movhi	r2,3
   1aadc:	10b60a04 	addi	r2,r2,-10200
   1aae0:	300f883a 	mov	r7,r6
   1aae4:	280d883a 	mov	r6,r5
   1aae8:	200b883a 	mov	r5,r4
   1aaec:	11000017 	ldw	r4,0(r2)
   1aaf0:	00195cc1 	jmpi	195cc <___vfiprintf_internal_r>

0001aaf4 <__sbprintf>:
   1aaf4:	2880030b 	ldhu	r2,12(r5)
   1aaf8:	2ac01917 	ldw	r11,100(r5)
   1aafc:	2a80038b 	ldhu	r10,14(r5)
   1ab00:	2a400717 	ldw	r9,28(r5)
   1ab04:	2a000917 	ldw	r8,36(r5)
   1ab08:	defee204 	addi	sp,sp,-1144
   1ab0c:	00c10004 	movi	r3,1024
   1ab10:	dc011a15 	stw	r16,1128(sp)
   1ab14:	10bfff4c 	andi	r2,r2,65533
   1ab18:	2821883a 	mov	r16,r5
   1ab1c:	d8cb883a 	add	r5,sp,r3
   1ab20:	dc811c15 	stw	r18,1136(sp)
   1ab24:	dc411b15 	stw	r17,1132(sp)
   1ab28:	dfc11d15 	stw	ra,1140(sp)
   1ab2c:	2025883a 	mov	r18,r4
   1ab30:	d881030d 	sth	r2,1036(sp)
   1ab34:	dac11915 	stw	r11,1124(sp)
   1ab38:	da81038d 	sth	r10,1038(sp)
   1ab3c:	da410715 	stw	r9,1052(sp)
   1ab40:	da010915 	stw	r8,1060(sp)
   1ab44:	dec10015 	stw	sp,1024(sp)
   1ab48:	dec10415 	stw	sp,1040(sp)
   1ab4c:	d8c10215 	stw	r3,1032(sp)
   1ab50:	d8c10515 	stw	r3,1044(sp)
   1ab54:	d8010615 	stw	zero,1048(sp)
   1ab58:	00195cc0 	call	195cc <___vfiprintf_internal_r>
   1ab5c:	1023883a 	mov	r17,r2
   1ab60:	10000416 	blt	r2,zero,1ab74 <__sbprintf+0x80>
   1ab64:	d9410004 	addi	r5,sp,1024
   1ab68:	9009883a 	mov	r4,r18
   1ab6c:	001527c0 	call	1527c <_fflush_r>
   1ab70:	10000d1e 	bne	r2,zero,1aba8 <__sbprintf+0xb4>
   1ab74:	d881030b 	ldhu	r2,1036(sp)
   1ab78:	1080100c 	andi	r2,r2,64
   1ab7c:	10000326 	beq	r2,zero,1ab8c <__sbprintf+0x98>
   1ab80:	8080030b 	ldhu	r2,12(r16)
   1ab84:	10801014 	ori	r2,r2,64
   1ab88:	8080030d 	sth	r2,12(r16)
   1ab8c:	8805883a 	mov	r2,r17
   1ab90:	dfc11d17 	ldw	ra,1140(sp)
   1ab94:	dc811c17 	ldw	r18,1136(sp)
   1ab98:	dc411b17 	ldw	r17,1132(sp)
   1ab9c:	dc011a17 	ldw	r16,1128(sp)
   1aba0:	dec11e04 	addi	sp,sp,1144
   1aba4:	f800283a 	ret
   1aba8:	047fffc4 	movi	r17,-1
   1abac:	003ff106 	br	1ab74 <__alt_data_end+0xfc01ab74>

0001abb0 <__swbuf_r>:
   1abb0:	defffb04 	addi	sp,sp,-20
   1abb4:	dcc00315 	stw	r19,12(sp)
   1abb8:	dc800215 	stw	r18,8(sp)
   1abbc:	dc000015 	stw	r16,0(sp)
   1abc0:	dfc00415 	stw	ra,16(sp)
   1abc4:	dc400115 	stw	r17,4(sp)
   1abc8:	2025883a 	mov	r18,r4
   1abcc:	2827883a 	mov	r19,r5
   1abd0:	3021883a 	mov	r16,r6
   1abd4:	20000226 	beq	r4,zero,1abe0 <__swbuf_r+0x30>
   1abd8:	20800e17 	ldw	r2,56(r4)
   1abdc:	10004226 	beq	r2,zero,1ace8 <__swbuf_r+0x138>
   1abe0:	80800617 	ldw	r2,24(r16)
   1abe4:	8100030b 	ldhu	r4,12(r16)
   1abe8:	80800215 	stw	r2,8(r16)
   1abec:	2080020c 	andi	r2,r4,8
   1abf0:	10003626 	beq	r2,zero,1accc <__swbuf_r+0x11c>
   1abf4:	80c00417 	ldw	r3,16(r16)
   1abf8:	18003426 	beq	r3,zero,1accc <__swbuf_r+0x11c>
   1abfc:	2088000c 	andi	r2,r4,8192
   1ac00:	9c403fcc 	andi	r17,r19,255
   1ac04:	10001a26 	beq	r2,zero,1ac70 <__swbuf_r+0xc0>
   1ac08:	80800017 	ldw	r2,0(r16)
   1ac0c:	81000517 	ldw	r4,20(r16)
   1ac10:	10c7c83a 	sub	r3,r2,r3
   1ac14:	1900200e 	bge	r3,r4,1ac98 <__swbuf_r+0xe8>
   1ac18:	18c00044 	addi	r3,r3,1
   1ac1c:	81000217 	ldw	r4,8(r16)
   1ac20:	11400044 	addi	r5,r2,1
   1ac24:	81400015 	stw	r5,0(r16)
   1ac28:	213fffc4 	addi	r4,r4,-1
   1ac2c:	81000215 	stw	r4,8(r16)
   1ac30:	14c00005 	stb	r19,0(r2)
   1ac34:	80800517 	ldw	r2,20(r16)
   1ac38:	10c01e26 	beq	r2,r3,1acb4 <__swbuf_r+0x104>
   1ac3c:	8080030b 	ldhu	r2,12(r16)
   1ac40:	1080004c 	andi	r2,r2,1
   1ac44:	10000226 	beq	r2,zero,1ac50 <__swbuf_r+0xa0>
   1ac48:	00800284 	movi	r2,10
   1ac4c:	88801926 	beq	r17,r2,1acb4 <__swbuf_r+0x104>
   1ac50:	8805883a 	mov	r2,r17
   1ac54:	dfc00417 	ldw	ra,16(sp)
   1ac58:	dcc00317 	ldw	r19,12(sp)
   1ac5c:	dc800217 	ldw	r18,8(sp)
   1ac60:	dc400117 	ldw	r17,4(sp)
   1ac64:	dc000017 	ldw	r16,0(sp)
   1ac68:	dec00504 	addi	sp,sp,20
   1ac6c:	f800283a 	ret
   1ac70:	81401917 	ldw	r5,100(r16)
   1ac74:	00b7ffc4 	movi	r2,-8193
   1ac78:	21080014 	ori	r4,r4,8192
   1ac7c:	2884703a 	and	r2,r5,r2
   1ac80:	80801915 	stw	r2,100(r16)
   1ac84:	80800017 	ldw	r2,0(r16)
   1ac88:	8100030d 	sth	r4,12(r16)
   1ac8c:	81000517 	ldw	r4,20(r16)
   1ac90:	10c7c83a 	sub	r3,r2,r3
   1ac94:	193fe016 	blt	r3,r4,1ac18 <__alt_data_end+0xfc01ac18>
   1ac98:	800b883a 	mov	r5,r16
   1ac9c:	9009883a 	mov	r4,r18
   1aca0:	001527c0 	call	1527c <_fflush_r>
   1aca4:	1000071e 	bne	r2,zero,1acc4 <__swbuf_r+0x114>
   1aca8:	80800017 	ldw	r2,0(r16)
   1acac:	00c00044 	movi	r3,1
   1acb0:	003fda06 	br	1ac1c <__alt_data_end+0xfc01ac1c>
   1acb4:	800b883a 	mov	r5,r16
   1acb8:	9009883a 	mov	r4,r18
   1acbc:	001527c0 	call	1527c <_fflush_r>
   1acc0:	103fe326 	beq	r2,zero,1ac50 <__alt_data_end+0xfc01ac50>
   1acc4:	00bfffc4 	movi	r2,-1
   1acc8:	003fe206 	br	1ac54 <__alt_data_end+0xfc01ac54>
   1accc:	800b883a 	mov	r5,r16
   1acd0:	9009883a 	mov	r4,r18
   1acd4:	001365c0 	call	1365c <__swsetup_r>
   1acd8:	103ffa1e 	bne	r2,zero,1acc4 <__alt_data_end+0xfc01acc4>
   1acdc:	8100030b 	ldhu	r4,12(r16)
   1ace0:	80c00417 	ldw	r3,16(r16)
   1ace4:	003fc506 	br	1abfc <__alt_data_end+0xfc01abfc>
   1ace8:	00156680 	call	15668 <__sinit>
   1acec:	003fbc06 	br	1abe0 <__alt_data_end+0xfc01abe0>

0001acf0 <__swbuf>:
   1acf0:	008000f4 	movhi	r2,3
   1acf4:	10b60a04 	addi	r2,r2,-10200
   1acf8:	280d883a 	mov	r6,r5
   1acfc:	200b883a 	mov	r5,r4
   1ad00:	11000017 	ldw	r4,0(r2)
   1ad04:	001abb01 	jmpi	1abb0 <__swbuf_r>

0001ad08 <_write_r>:
   1ad08:	defffd04 	addi	sp,sp,-12
   1ad0c:	2805883a 	mov	r2,r5
   1ad10:	dc000015 	stw	r16,0(sp)
   1ad14:	040000f4 	movhi	r16,3
   1ad18:	dc400115 	stw	r17,4(sp)
   1ad1c:	300b883a 	mov	r5,r6
   1ad20:	84029e04 	addi	r16,r16,2680
   1ad24:	2023883a 	mov	r17,r4
   1ad28:	380d883a 	mov	r6,r7
   1ad2c:	1009883a 	mov	r4,r2
   1ad30:	dfc00215 	stw	ra,8(sp)
   1ad34:	80000015 	stw	zero,0(r16)
   1ad38:	001f4340 	call	1f434 <write>
   1ad3c:	00ffffc4 	movi	r3,-1
   1ad40:	10c00526 	beq	r2,r3,1ad58 <_write_r+0x50>
   1ad44:	dfc00217 	ldw	ra,8(sp)
   1ad48:	dc400117 	ldw	r17,4(sp)
   1ad4c:	dc000017 	ldw	r16,0(sp)
   1ad50:	dec00304 	addi	sp,sp,12
   1ad54:	f800283a 	ret
   1ad58:	80c00017 	ldw	r3,0(r16)
   1ad5c:	183ff926 	beq	r3,zero,1ad44 <__alt_data_end+0xfc01ad44>
   1ad60:	88c00015 	stw	r3,0(r17)
   1ad64:	003ff706 	br	1ad44 <__alt_data_end+0xfc01ad44>

0001ad68 <_close_r>:
   1ad68:	defffd04 	addi	sp,sp,-12
   1ad6c:	dc000015 	stw	r16,0(sp)
   1ad70:	040000f4 	movhi	r16,3
   1ad74:	dc400115 	stw	r17,4(sp)
   1ad78:	84029e04 	addi	r16,r16,2680
   1ad7c:	2023883a 	mov	r17,r4
   1ad80:	2809883a 	mov	r4,r5
   1ad84:	dfc00215 	stw	ra,8(sp)
   1ad88:	80000015 	stw	zero,0(r16)
   1ad8c:	001e9380 	call	1e938 <close>
   1ad90:	00ffffc4 	movi	r3,-1
   1ad94:	10c00526 	beq	r2,r3,1adac <_close_r+0x44>
   1ad98:	dfc00217 	ldw	ra,8(sp)
   1ad9c:	dc400117 	ldw	r17,4(sp)
   1ada0:	dc000017 	ldw	r16,0(sp)
   1ada4:	dec00304 	addi	sp,sp,12
   1ada8:	f800283a 	ret
   1adac:	80c00017 	ldw	r3,0(r16)
   1adb0:	183ff926 	beq	r3,zero,1ad98 <__alt_data_end+0xfc01ad98>
   1adb4:	88c00015 	stw	r3,0(r17)
   1adb8:	003ff706 	br	1ad98 <__alt_data_end+0xfc01ad98>

0001adbc <_calloc_r>:
   1adbc:	defffe04 	addi	sp,sp,-8
   1adc0:	2805883a 	mov	r2,r5
   1adc4:	dc000015 	stw	r16,0(sp)
   1adc8:	300b883a 	mov	r5,r6
   1adcc:	2021883a 	mov	r16,r4
   1add0:	1009883a 	mov	r4,r2
   1add4:	dfc00115 	stw	ra,4(sp)
   1add8:	000ce000 	call	ce00 <__mulsi3>
   1addc:	100b883a 	mov	r5,r2
   1ade0:	8009883a 	mov	r4,r16
   1ade4:	000de780 	call	de78 <_malloc_r>
   1ade8:	10002926 	beq	r2,zero,1ae90 <_calloc_r+0xd4>
   1adec:	11bfff17 	ldw	r6,-4(r2)
   1adf0:	1021883a 	mov	r16,r2
   1adf4:	00bfff04 	movi	r2,-4
   1adf8:	308c703a 	and	r6,r6,r2
   1adfc:	00c00904 	movi	r3,36
   1ae00:	308d883a 	add	r6,r6,r2
   1ae04:	19801636 	bltu	r3,r6,1ae60 <_calloc_r+0xa4>
   1ae08:	008004c4 	movi	r2,19
   1ae0c:	11800b2e 	bgeu	r2,r6,1ae3c <_calloc_r+0x80>
   1ae10:	80000015 	stw	zero,0(r16)
   1ae14:	80000115 	stw	zero,4(r16)
   1ae18:	008006c4 	movi	r2,27
   1ae1c:	11801a2e 	bgeu	r2,r6,1ae88 <_calloc_r+0xcc>
   1ae20:	80000215 	stw	zero,8(r16)
   1ae24:	80000315 	stw	zero,12(r16)
   1ae28:	30c0151e 	bne	r6,r3,1ae80 <_calloc_r+0xc4>
   1ae2c:	80000415 	stw	zero,16(r16)
   1ae30:	80800604 	addi	r2,r16,24
   1ae34:	80000515 	stw	zero,20(r16)
   1ae38:	00000106 	br	1ae40 <_calloc_r+0x84>
   1ae3c:	8005883a 	mov	r2,r16
   1ae40:	10000015 	stw	zero,0(r2)
   1ae44:	10000115 	stw	zero,4(r2)
   1ae48:	10000215 	stw	zero,8(r2)
   1ae4c:	8005883a 	mov	r2,r16
   1ae50:	dfc00117 	ldw	ra,4(sp)
   1ae54:	dc000017 	ldw	r16,0(sp)
   1ae58:	dec00204 	addi	sp,sp,8
   1ae5c:	f800283a 	ret
   1ae60:	000b883a 	mov	r5,zero
   1ae64:	8009883a 	mov	r4,r16
   1ae68:	000e7cc0 	call	e7cc <memset>
   1ae6c:	8005883a 	mov	r2,r16
   1ae70:	dfc00117 	ldw	ra,4(sp)
   1ae74:	dc000017 	ldw	r16,0(sp)
   1ae78:	dec00204 	addi	sp,sp,8
   1ae7c:	f800283a 	ret
   1ae80:	80800404 	addi	r2,r16,16
   1ae84:	003fee06 	br	1ae40 <__alt_data_end+0xfc01ae40>
   1ae88:	80800204 	addi	r2,r16,8
   1ae8c:	003fec06 	br	1ae40 <__alt_data_end+0xfc01ae40>
   1ae90:	0005883a 	mov	r2,zero
   1ae94:	003fee06 	br	1ae50 <__alt_data_end+0xfc01ae50>

0001ae98 <_fclose_r>:
   1ae98:	28003926 	beq	r5,zero,1af80 <_fclose_r+0xe8>
   1ae9c:	defffc04 	addi	sp,sp,-16
   1aea0:	dc400115 	stw	r17,4(sp)
   1aea4:	dc000015 	stw	r16,0(sp)
   1aea8:	dfc00315 	stw	ra,12(sp)
   1aeac:	dc800215 	stw	r18,8(sp)
   1aeb0:	2023883a 	mov	r17,r4
   1aeb4:	2821883a 	mov	r16,r5
   1aeb8:	20000226 	beq	r4,zero,1aec4 <_fclose_r+0x2c>
   1aebc:	20800e17 	ldw	r2,56(r4)
   1aec0:	10002726 	beq	r2,zero,1af60 <_fclose_r+0xc8>
   1aec4:	8080030f 	ldh	r2,12(r16)
   1aec8:	1000071e 	bne	r2,zero,1aee8 <_fclose_r+0x50>
   1aecc:	0005883a 	mov	r2,zero
   1aed0:	dfc00317 	ldw	ra,12(sp)
   1aed4:	dc800217 	ldw	r18,8(sp)
   1aed8:	dc400117 	ldw	r17,4(sp)
   1aedc:	dc000017 	ldw	r16,0(sp)
   1aee0:	dec00404 	addi	sp,sp,16
   1aee4:	f800283a 	ret
   1aee8:	800b883a 	mov	r5,r16
   1aeec:	8809883a 	mov	r4,r17
   1aef0:	00150600 	call	15060 <__sflush_r>
   1aef4:	1025883a 	mov	r18,r2
   1aef8:	80800b17 	ldw	r2,44(r16)
   1aefc:	10000426 	beq	r2,zero,1af10 <_fclose_r+0x78>
   1af00:	81400717 	ldw	r5,28(r16)
   1af04:	8809883a 	mov	r4,r17
   1af08:	103ee83a 	callr	r2
   1af0c:	10001616 	blt	r2,zero,1af68 <_fclose_r+0xd0>
   1af10:	8080030b 	ldhu	r2,12(r16)
   1af14:	1080200c 	andi	r2,r2,128
   1af18:	1000151e 	bne	r2,zero,1af70 <_fclose_r+0xd8>
   1af1c:	81400c17 	ldw	r5,48(r16)
   1af20:	28000526 	beq	r5,zero,1af38 <_fclose_r+0xa0>
   1af24:	80801004 	addi	r2,r16,64
   1af28:	28800226 	beq	r5,r2,1af34 <_fclose_r+0x9c>
   1af2c:	8809883a 	mov	r4,r17
   1af30:	00157dc0 	call	157dc <_free_r>
   1af34:	80000c15 	stw	zero,48(r16)
   1af38:	81401117 	ldw	r5,68(r16)
   1af3c:	28000326 	beq	r5,zero,1af4c <_fclose_r+0xb4>
   1af40:	8809883a 	mov	r4,r17
   1af44:	00157dc0 	call	157dc <_free_r>
   1af48:	80001115 	stw	zero,68(r16)
   1af4c:	00156780 	call	15678 <__sfp_lock_acquire>
   1af50:	8000030d 	sth	zero,12(r16)
   1af54:	001567c0 	call	1567c <__sfp_lock_release>
   1af58:	9005883a 	mov	r2,r18
   1af5c:	003fdc06 	br	1aed0 <__alt_data_end+0xfc01aed0>
   1af60:	00156680 	call	15668 <__sinit>
   1af64:	003fd706 	br	1aec4 <__alt_data_end+0xfc01aec4>
   1af68:	04bfffc4 	movi	r18,-1
   1af6c:	003fe806 	br	1af10 <__alt_data_end+0xfc01af10>
   1af70:	81400417 	ldw	r5,16(r16)
   1af74:	8809883a 	mov	r4,r17
   1af78:	00157dc0 	call	157dc <_free_r>
   1af7c:	003fe706 	br	1af1c <__alt_data_end+0xfc01af1c>
   1af80:	0005883a 	mov	r2,zero
   1af84:	f800283a 	ret

0001af88 <fclose>:
   1af88:	008000f4 	movhi	r2,3
   1af8c:	10b60a04 	addi	r2,r2,-10200
   1af90:	200b883a 	mov	r5,r4
   1af94:	11000017 	ldw	r4,0(r2)
   1af98:	001ae981 	jmpi	1ae98 <_fclose_r>

0001af9c <__fputwc>:
   1af9c:	defff804 	addi	sp,sp,-32
   1afa0:	dcc00415 	stw	r19,16(sp)
   1afa4:	dc800315 	stw	r18,12(sp)
   1afa8:	dc000115 	stw	r16,4(sp)
   1afac:	dfc00715 	stw	ra,28(sp)
   1afb0:	dd400615 	stw	r21,24(sp)
   1afb4:	dd000515 	stw	r20,20(sp)
   1afb8:	dc400215 	stw	r17,8(sp)
   1afbc:	2027883a 	mov	r19,r4
   1afc0:	2825883a 	mov	r18,r5
   1afc4:	3021883a 	mov	r16,r6
   1afc8:	00161c40 	call	161c4 <__locale_mb_cur_max>
   1afcc:	00c00044 	movi	r3,1
   1afd0:	10c03e26 	beq	r2,r3,1b0cc <__fputwc+0x130>
   1afd4:	81c01704 	addi	r7,r16,92
   1afd8:	900d883a 	mov	r6,r18
   1afdc:	d80b883a 	mov	r5,sp
   1afe0:	9809883a 	mov	r4,r19
   1afe4:	001b3140 	call	1b314 <_wcrtomb_r>
   1afe8:	1029883a 	mov	r20,r2
   1afec:	00bfffc4 	movi	r2,-1
   1aff0:	a0802026 	beq	r20,r2,1b074 <__fputwc+0xd8>
   1aff4:	d9400003 	ldbu	r5,0(sp)
   1aff8:	a0001c26 	beq	r20,zero,1b06c <__fputwc+0xd0>
   1affc:	0023883a 	mov	r17,zero
   1b000:	05400284 	movi	r21,10
   1b004:	00000906 	br	1b02c <__fputwc+0x90>
   1b008:	80800017 	ldw	r2,0(r16)
   1b00c:	11400005 	stb	r5,0(r2)
   1b010:	80c00017 	ldw	r3,0(r16)
   1b014:	18c00044 	addi	r3,r3,1
   1b018:	80c00015 	stw	r3,0(r16)
   1b01c:	8c400044 	addi	r17,r17,1
   1b020:	dc45883a 	add	r2,sp,r17
   1b024:	8d00112e 	bgeu	r17,r20,1b06c <__fputwc+0xd0>
   1b028:	11400003 	ldbu	r5,0(r2)
   1b02c:	80c00217 	ldw	r3,8(r16)
   1b030:	18ffffc4 	addi	r3,r3,-1
   1b034:	80c00215 	stw	r3,8(r16)
   1b038:	183ff30e 	bge	r3,zero,1b008 <__alt_data_end+0xfc01b008>
   1b03c:	80800617 	ldw	r2,24(r16)
   1b040:	18801916 	blt	r3,r2,1b0a8 <__fputwc+0x10c>
   1b044:	80800017 	ldw	r2,0(r16)
   1b048:	11400005 	stb	r5,0(r2)
   1b04c:	80800017 	ldw	r2,0(r16)
   1b050:	10c00003 	ldbu	r3,0(r2)
   1b054:	10800044 	addi	r2,r2,1
   1b058:	1d402326 	beq	r3,r21,1b0e8 <__fputwc+0x14c>
   1b05c:	80800015 	stw	r2,0(r16)
   1b060:	8c400044 	addi	r17,r17,1
   1b064:	dc45883a 	add	r2,sp,r17
   1b068:	8d3fef36 	bltu	r17,r20,1b028 <__alt_data_end+0xfc01b028>
   1b06c:	9005883a 	mov	r2,r18
   1b070:	00000406 	br	1b084 <__fputwc+0xe8>
   1b074:	80c0030b 	ldhu	r3,12(r16)
   1b078:	a005883a 	mov	r2,r20
   1b07c:	18c01014 	ori	r3,r3,64
   1b080:	80c0030d 	sth	r3,12(r16)
   1b084:	dfc00717 	ldw	ra,28(sp)
   1b088:	dd400617 	ldw	r21,24(sp)
   1b08c:	dd000517 	ldw	r20,20(sp)
   1b090:	dcc00417 	ldw	r19,16(sp)
   1b094:	dc800317 	ldw	r18,12(sp)
   1b098:	dc400217 	ldw	r17,8(sp)
   1b09c:	dc000117 	ldw	r16,4(sp)
   1b0a0:	dec00804 	addi	sp,sp,32
   1b0a4:	f800283a 	ret
   1b0a8:	800d883a 	mov	r6,r16
   1b0ac:	29403fcc 	andi	r5,r5,255
   1b0b0:	9809883a 	mov	r4,r19
   1b0b4:	001abb00 	call	1abb0 <__swbuf_r>
   1b0b8:	10bfffe0 	cmpeqi	r2,r2,-1
   1b0bc:	10803fcc 	andi	r2,r2,255
   1b0c0:	103fd626 	beq	r2,zero,1b01c <__alt_data_end+0xfc01b01c>
   1b0c4:	00bfffc4 	movi	r2,-1
   1b0c8:	003fee06 	br	1b084 <__alt_data_end+0xfc01b084>
   1b0cc:	90ffffc4 	addi	r3,r18,-1
   1b0d0:	01003f84 	movi	r4,254
   1b0d4:	20ffbf36 	bltu	r4,r3,1afd4 <__alt_data_end+0xfc01afd4>
   1b0d8:	900b883a 	mov	r5,r18
   1b0dc:	dc800005 	stb	r18,0(sp)
   1b0e0:	1029883a 	mov	r20,r2
   1b0e4:	003fc506 	br	1affc <__alt_data_end+0xfc01affc>
   1b0e8:	800d883a 	mov	r6,r16
   1b0ec:	a80b883a 	mov	r5,r21
   1b0f0:	9809883a 	mov	r4,r19
   1b0f4:	001abb00 	call	1abb0 <__swbuf_r>
   1b0f8:	10bfffe0 	cmpeqi	r2,r2,-1
   1b0fc:	003fef06 	br	1b0bc <__alt_data_end+0xfc01b0bc>

0001b100 <_fputwc_r>:
   1b100:	3080030b 	ldhu	r2,12(r6)
   1b104:	10c8000c 	andi	r3,r2,8192
   1b108:	1800051e 	bne	r3,zero,1b120 <_fputwc_r+0x20>
   1b10c:	30c01917 	ldw	r3,100(r6)
   1b110:	10880014 	ori	r2,r2,8192
   1b114:	3080030d 	sth	r2,12(r6)
   1b118:	18880014 	ori	r2,r3,8192
   1b11c:	30801915 	stw	r2,100(r6)
   1b120:	001af9c1 	jmpi	1af9c <__fputwc>

0001b124 <fputwc>:
   1b124:	008000f4 	movhi	r2,3
   1b128:	defffc04 	addi	sp,sp,-16
   1b12c:	10b60a04 	addi	r2,r2,-10200
   1b130:	dc000115 	stw	r16,4(sp)
   1b134:	14000017 	ldw	r16,0(r2)
   1b138:	dc400215 	stw	r17,8(sp)
   1b13c:	dfc00315 	stw	ra,12(sp)
   1b140:	2023883a 	mov	r17,r4
   1b144:	80000226 	beq	r16,zero,1b150 <fputwc+0x2c>
   1b148:	80800e17 	ldw	r2,56(r16)
   1b14c:	10001026 	beq	r2,zero,1b190 <fputwc+0x6c>
   1b150:	2880030b 	ldhu	r2,12(r5)
   1b154:	10c8000c 	andi	r3,r2,8192
   1b158:	1800051e 	bne	r3,zero,1b170 <fputwc+0x4c>
   1b15c:	28c01917 	ldw	r3,100(r5)
   1b160:	10880014 	ori	r2,r2,8192
   1b164:	2880030d 	sth	r2,12(r5)
   1b168:	18880014 	ori	r2,r3,8192
   1b16c:	28801915 	stw	r2,100(r5)
   1b170:	280d883a 	mov	r6,r5
   1b174:	8009883a 	mov	r4,r16
   1b178:	880b883a 	mov	r5,r17
   1b17c:	dfc00317 	ldw	ra,12(sp)
   1b180:	dc400217 	ldw	r17,8(sp)
   1b184:	dc000117 	ldw	r16,4(sp)
   1b188:	dec00404 	addi	sp,sp,16
   1b18c:	001af9c1 	jmpi	1af9c <__fputwc>
   1b190:	8009883a 	mov	r4,r16
   1b194:	d9400015 	stw	r5,0(sp)
   1b198:	00156680 	call	15668 <__sinit>
   1b19c:	d9400017 	ldw	r5,0(sp)
   1b1a0:	003feb06 	br	1b150 <__alt_data_end+0xfc01b150>

0001b1a4 <_fstat_r>:
   1b1a4:	defffd04 	addi	sp,sp,-12
   1b1a8:	2805883a 	mov	r2,r5
   1b1ac:	dc000015 	stw	r16,0(sp)
   1b1b0:	040000f4 	movhi	r16,3
   1b1b4:	dc400115 	stw	r17,4(sp)
   1b1b8:	84029e04 	addi	r16,r16,2680
   1b1bc:	2023883a 	mov	r17,r4
   1b1c0:	300b883a 	mov	r5,r6
   1b1c4:	1009883a 	mov	r4,r2
   1b1c8:	dfc00215 	stw	ra,8(sp)
   1b1cc:	80000015 	stw	zero,0(r16)
   1b1d0:	001eaac0 	call	1eaac <fstat>
   1b1d4:	00ffffc4 	movi	r3,-1
   1b1d8:	10c00526 	beq	r2,r3,1b1f0 <_fstat_r+0x4c>
   1b1dc:	dfc00217 	ldw	ra,8(sp)
   1b1e0:	dc400117 	ldw	r17,4(sp)
   1b1e4:	dc000017 	ldw	r16,0(sp)
   1b1e8:	dec00304 	addi	sp,sp,12
   1b1ec:	f800283a 	ret
   1b1f0:	80c00017 	ldw	r3,0(r16)
   1b1f4:	183ff926 	beq	r3,zero,1b1dc <__alt_data_end+0xfc01b1dc>
   1b1f8:	88c00015 	stw	r3,0(r17)
   1b1fc:	003ff706 	br	1b1dc <__alt_data_end+0xfc01b1dc>

0001b200 <_isatty_r>:
   1b200:	defffd04 	addi	sp,sp,-12
   1b204:	dc000015 	stw	r16,0(sp)
   1b208:	040000f4 	movhi	r16,3
   1b20c:	dc400115 	stw	r17,4(sp)
   1b210:	84029e04 	addi	r16,r16,2680
   1b214:	2023883a 	mov	r17,r4
   1b218:	2809883a 	mov	r4,r5
   1b21c:	dfc00215 	stw	ra,8(sp)
   1b220:	80000015 	stw	zero,0(r16)
   1b224:	001ebc00 	call	1ebc0 <isatty>
   1b228:	00ffffc4 	movi	r3,-1
   1b22c:	10c00526 	beq	r2,r3,1b244 <_isatty_r+0x44>
   1b230:	dfc00217 	ldw	ra,8(sp)
   1b234:	dc400117 	ldw	r17,4(sp)
   1b238:	dc000017 	ldw	r16,0(sp)
   1b23c:	dec00304 	addi	sp,sp,12
   1b240:	f800283a 	ret
   1b244:	80c00017 	ldw	r3,0(r16)
   1b248:	183ff926 	beq	r3,zero,1b230 <__alt_data_end+0xfc01b230>
   1b24c:	88c00015 	stw	r3,0(r17)
   1b250:	003ff706 	br	1b230 <__alt_data_end+0xfc01b230>

0001b254 <_lseek_r>:
   1b254:	defffd04 	addi	sp,sp,-12
   1b258:	2805883a 	mov	r2,r5
   1b25c:	dc000015 	stw	r16,0(sp)
   1b260:	040000f4 	movhi	r16,3
   1b264:	dc400115 	stw	r17,4(sp)
   1b268:	300b883a 	mov	r5,r6
   1b26c:	84029e04 	addi	r16,r16,2680
   1b270:	2023883a 	mov	r17,r4
   1b274:	380d883a 	mov	r6,r7
   1b278:	1009883a 	mov	r4,r2
   1b27c:	dfc00215 	stw	ra,8(sp)
   1b280:	80000015 	stw	zero,0(r16)
   1b284:	001ef000 	call	1ef00 <lseek>
   1b288:	00ffffc4 	movi	r3,-1
   1b28c:	10c00526 	beq	r2,r3,1b2a4 <_lseek_r+0x50>
   1b290:	dfc00217 	ldw	ra,8(sp)
   1b294:	dc400117 	ldw	r17,4(sp)
   1b298:	dc000017 	ldw	r16,0(sp)
   1b29c:	dec00304 	addi	sp,sp,12
   1b2a0:	f800283a 	ret
   1b2a4:	80c00017 	ldw	r3,0(r16)
   1b2a8:	183ff926 	beq	r3,zero,1b290 <__alt_data_end+0xfc01b290>
   1b2ac:	88c00015 	stw	r3,0(r17)
   1b2b0:	003ff706 	br	1b290 <__alt_data_end+0xfc01b290>

0001b2b4 <_read_r>:
   1b2b4:	defffd04 	addi	sp,sp,-12
   1b2b8:	2805883a 	mov	r2,r5
   1b2bc:	dc000015 	stw	r16,0(sp)
   1b2c0:	040000f4 	movhi	r16,3
   1b2c4:	dc400115 	stw	r17,4(sp)
   1b2c8:	300b883a 	mov	r5,r6
   1b2cc:	84029e04 	addi	r16,r16,2680
   1b2d0:	2023883a 	mov	r17,r4
   1b2d4:	380d883a 	mov	r6,r7
   1b2d8:	1009883a 	mov	r4,r2
   1b2dc:	dfc00215 	stw	ra,8(sp)
   1b2e0:	80000015 	stw	zero,0(r16)
   1b2e4:	001f0dc0 	call	1f0dc <read>
   1b2e8:	00ffffc4 	movi	r3,-1
   1b2ec:	10c00526 	beq	r2,r3,1b304 <_read_r+0x50>
   1b2f0:	dfc00217 	ldw	ra,8(sp)
   1b2f4:	dc400117 	ldw	r17,4(sp)
   1b2f8:	dc000017 	ldw	r16,0(sp)
   1b2fc:	dec00304 	addi	sp,sp,12
   1b300:	f800283a 	ret
   1b304:	80c00017 	ldw	r3,0(r16)
   1b308:	183ff926 	beq	r3,zero,1b2f0 <__alt_data_end+0xfc01b2f0>
   1b30c:	88c00015 	stw	r3,0(r17)
   1b310:	003ff706 	br	1b2f0 <__alt_data_end+0xfc01b2f0>

0001b314 <_wcrtomb_r>:
   1b314:	defff604 	addi	sp,sp,-40
   1b318:	008000f4 	movhi	r2,3
   1b31c:	dc800815 	stw	r18,32(sp)
   1b320:	dc400715 	stw	r17,28(sp)
   1b324:	dc000615 	stw	r16,24(sp)
   1b328:	10b60e04 	addi	r2,r2,-10184
   1b32c:	dfc00915 	stw	ra,36(sp)
   1b330:	2021883a 	mov	r16,r4
   1b334:	3823883a 	mov	r17,r7
   1b338:	14800017 	ldw	r18,0(r2)
   1b33c:	28001426 	beq	r5,zero,1b390 <_wcrtomb_r+0x7c>
   1b340:	d9400415 	stw	r5,16(sp)
   1b344:	d9800515 	stw	r6,20(sp)
   1b348:	00161b80 	call	161b8 <__locale_charset>
   1b34c:	d9800517 	ldw	r6,20(sp)
   1b350:	d9400417 	ldw	r5,16(sp)
   1b354:	100f883a 	mov	r7,r2
   1b358:	dc400015 	stw	r17,0(sp)
   1b35c:	8009883a 	mov	r4,r16
   1b360:	903ee83a 	callr	r18
   1b364:	00ffffc4 	movi	r3,-1
   1b368:	10c0031e 	bne	r2,r3,1b378 <_wcrtomb_r+0x64>
   1b36c:	88000015 	stw	zero,0(r17)
   1b370:	00c02284 	movi	r3,138
   1b374:	80c00015 	stw	r3,0(r16)
   1b378:	dfc00917 	ldw	ra,36(sp)
   1b37c:	dc800817 	ldw	r18,32(sp)
   1b380:	dc400717 	ldw	r17,28(sp)
   1b384:	dc000617 	ldw	r16,24(sp)
   1b388:	dec00a04 	addi	sp,sp,40
   1b38c:	f800283a 	ret
   1b390:	00161b80 	call	161b8 <__locale_charset>
   1b394:	100f883a 	mov	r7,r2
   1b398:	dc400015 	stw	r17,0(sp)
   1b39c:	000d883a 	mov	r6,zero
   1b3a0:	d9400104 	addi	r5,sp,4
   1b3a4:	8009883a 	mov	r4,r16
   1b3a8:	903ee83a 	callr	r18
   1b3ac:	003fed06 	br	1b364 <__alt_data_end+0xfc01b364>

0001b3b0 <wcrtomb>:
   1b3b0:	defff604 	addi	sp,sp,-40
   1b3b4:	008000f4 	movhi	r2,3
   1b3b8:	dc800615 	stw	r18,24(sp)
   1b3bc:	dc400515 	stw	r17,20(sp)
   1b3c0:	10b60a04 	addi	r2,r2,-10200
   1b3c4:	dfc00915 	stw	ra,36(sp)
   1b3c8:	dd000815 	stw	r20,32(sp)
   1b3cc:	dcc00715 	stw	r19,28(sp)
   1b3d0:	dc000415 	stw	r16,16(sp)
   1b3d4:	3025883a 	mov	r18,r6
   1b3d8:	14400017 	ldw	r17,0(r2)
   1b3dc:	20001926 	beq	r4,zero,1b444 <wcrtomb+0x94>
   1b3e0:	008000f4 	movhi	r2,3
   1b3e4:	10b60e04 	addi	r2,r2,-10184
   1b3e8:	15000017 	ldw	r20,0(r2)
   1b3ec:	2021883a 	mov	r16,r4
   1b3f0:	2827883a 	mov	r19,r5
   1b3f4:	00161b80 	call	161b8 <__locale_charset>
   1b3f8:	100f883a 	mov	r7,r2
   1b3fc:	dc800015 	stw	r18,0(sp)
   1b400:	980d883a 	mov	r6,r19
   1b404:	800b883a 	mov	r5,r16
   1b408:	8809883a 	mov	r4,r17
   1b40c:	a03ee83a 	callr	r20
   1b410:	00ffffc4 	movi	r3,-1
   1b414:	10c0031e 	bne	r2,r3,1b424 <wcrtomb+0x74>
   1b418:	90000015 	stw	zero,0(r18)
   1b41c:	00c02284 	movi	r3,138
   1b420:	88c00015 	stw	r3,0(r17)
   1b424:	dfc00917 	ldw	ra,36(sp)
   1b428:	dd000817 	ldw	r20,32(sp)
   1b42c:	dcc00717 	ldw	r19,28(sp)
   1b430:	dc800617 	ldw	r18,24(sp)
   1b434:	dc400517 	ldw	r17,20(sp)
   1b438:	dc000417 	ldw	r16,16(sp)
   1b43c:	dec00a04 	addi	sp,sp,40
   1b440:	f800283a 	ret
   1b444:	008000f4 	movhi	r2,3
   1b448:	10b60e04 	addi	r2,r2,-10184
   1b44c:	14000017 	ldw	r16,0(r2)
   1b450:	00161b80 	call	161b8 <__locale_charset>
   1b454:	100f883a 	mov	r7,r2
   1b458:	dc800015 	stw	r18,0(sp)
   1b45c:	000d883a 	mov	r6,zero
   1b460:	d9400104 	addi	r5,sp,4
   1b464:	8809883a 	mov	r4,r17
   1b468:	803ee83a 	callr	r16
   1b46c:	003fe806 	br	1b410 <__alt_data_end+0xfc01b410>

0001b470 <__ascii_wctomb>:
   1b470:	28000526 	beq	r5,zero,1b488 <__ascii_wctomb+0x18>
   1b474:	00803fc4 	movi	r2,255
   1b478:	11800536 	bltu	r2,r6,1b490 <__ascii_wctomb+0x20>
   1b47c:	29800005 	stb	r6,0(r5)
   1b480:	00800044 	movi	r2,1
   1b484:	f800283a 	ret
   1b488:	0005883a 	mov	r2,zero
   1b48c:	f800283a 	ret
   1b490:	00802284 	movi	r2,138
   1b494:	20800015 	stw	r2,0(r4)
   1b498:	00bfffc4 	movi	r2,-1
   1b49c:	f800283a 	ret

0001b4a0 <_wctomb_r>:
   1b4a0:	008000f4 	movhi	r2,3
   1b4a4:	defff904 	addi	sp,sp,-28
   1b4a8:	10b60e04 	addi	r2,r2,-10184
   1b4ac:	dfc00615 	stw	ra,24(sp)
   1b4b0:	dc400515 	stw	r17,20(sp)
   1b4b4:	dc000415 	stw	r16,16(sp)
   1b4b8:	3823883a 	mov	r17,r7
   1b4bc:	14000017 	ldw	r16,0(r2)
   1b4c0:	d9000115 	stw	r4,4(sp)
   1b4c4:	d9400215 	stw	r5,8(sp)
   1b4c8:	d9800315 	stw	r6,12(sp)
   1b4cc:	00161b80 	call	161b8 <__locale_charset>
   1b4d0:	d9800317 	ldw	r6,12(sp)
   1b4d4:	d9400217 	ldw	r5,8(sp)
   1b4d8:	d9000117 	ldw	r4,4(sp)
   1b4dc:	100f883a 	mov	r7,r2
   1b4e0:	dc400015 	stw	r17,0(sp)
   1b4e4:	803ee83a 	callr	r16
   1b4e8:	dfc00617 	ldw	ra,24(sp)
   1b4ec:	dc400517 	ldw	r17,20(sp)
   1b4f0:	dc000417 	ldw	r16,16(sp)
   1b4f4:	dec00704 	addi	sp,sp,28
   1b4f8:	f800283a 	ret

0001b4fc <__udivdi3>:
   1b4fc:	defff404 	addi	sp,sp,-48
   1b500:	dcc00515 	stw	r19,20(sp)
   1b504:	dc000215 	stw	r16,8(sp)
   1b508:	dfc00b15 	stw	ra,44(sp)
   1b50c:	df000a15 	stw	fp,40(sp)
   1b510:	ddc00915 	stw	r23,36(sp)
   1b514:	dd800815 	stw	r22,32(sp)
   1b518:	dd400715 	stw	r21,28(sp)
   1b51c:	dd000615 	stw	r20,24(sp)
   1b520:	dc800415 	stw	r18,16(sp)
   1b524:	dc400315 	stw	r17,12(sp)
   1b528:	2027883a 	mov	r19,r4
   1b52c:	2821883a 	mov	r16,r5
   1b530:	3800461e 	bne	r7,zero,1b64c <__udivdi3+0x150>
   1b534:	3023883a 	mov	r17,r6
   1b538:	2025883a 	mov	r18,r4
   1b53c:	2980572e 	bgeu	r5,r6,1b69c <__udivdi3+0x1a0>
   1b540:	00bfffd4 	movui	r2,65535
   1b544:	282d883a 	mov	r22,r5
   1b548:	1180b236 	bltu	r2,r6,1b814 <__udivdi3+0x318>
   1b54c:	00803fc4 	movi	r2,255
   1b550:	1185803a 	cmpltu	r2,r2,r6
   1b554:	100490fa 	slli	r2,r2,3
   1b558:	3086d83a 	srl	r3,r6,r2
   1b55c:	010000f4 	movhi	r4,3
   1b560:	2128c704 	addi	r4,r4,-23780
   1b564:	20c7883a 	add	r3,r4,r3
   1b568:	18c00003 	ldbu	r3,0(r3)
   1b56c:	1885883a 	add	r2,r3,r2
   1b570:	00c00804 	movi	r3,32
   1b574:	1887c83a 	sub	r3,r3,r2
   1b578:	18000526 	beq	r3,zero,1b590 <__udivdi3+0x94>
   1b57c:	80e0983a 	sll	r16,r16,r3
   1b580:	9884d83a 	srl	r2,r19,r2
   1b584:	30e2983a 	sll	r17,r6,r3
   1b588:	98e4983a 	sll	r18,r19,r3
   1b58c:	142cb03a 	or	r22,r2,r16
   1b590:	882ad43a 	srli	r21,r17,16
   1b594:	b009883a 	mov	r4,r22
   1b598:	8d3fffcc 	andi	r20,r17,65535
   1b59c:	a80b883a 	mov	r5,r21
   1b5a0:	000cda80 	call	cda8 <__umodsi3>
   1b5a4:	b009883a 	mov	r4,r22
   1b5a8:	a80b883a 	mov	r5,r21
   1b5ac:	1027883a 	mov	r19,r2
   1b5b0:	000cd440 	call	cd44 <__udivsi3>
   1b5b4:	100b883a 	mov	r5,r2
   1b5b8:	a009883a 	mov	r4,r20
   1b5bc:	102d883a 	mov	r22,r2
   1b5c0:	000ce000 	call	ce00 <__mulsi3>
   1b5c4:	9826943a 	slli	r19,r19,16
   1b5c8:	9006d43a 	srli	r3,r18,16
   1b5cc:	1cc6b03a 	or	r3,r3,r19
   1b5d0:	1880052e 	bgeu	r3,r2,1b5e8 <__udivdi3+0xec>
   1b5d4:	1c47883a 	add	r3,r3,r17
   1b5d8:	b13fffc4 	addi	r4,r22,-1
   1b5dc:	1c400136 	bltu	r3,r17,1b5e4 <__udivdi3+0xe8>
   1b5e0:	18814236 	bltu	r3,r2,1baec <__udivdi3+0x5f0>
   1b5e4:	202d883a 	mov	r22,r4
   1b5e8:	18a1c83a 	sub	r16,r3,r2
   1b5ec:	8009883a 	mov	r4,r16
   1b5f0:	a80b883a 	mov	r5,r21
   1b5f4:	000cda80 	call	cda8 <__umodsi3>
   1b5f8:	1027883a 	mov	r19,r2
   1b5fc:	8009883a 	mov	r4,r16
   1b600:	a80b883a 	mov	r5,r21
   1b604:	9826943a 	slli	r19,r19,16
   1b608:	000cd440 	call	cd44 <__udivsi3>
   1b60c:	100b883a 	mov	r5,r2
   1b610:	a009883a 	mov	r4,r20
   1b614:	94bfffcc 	andi	r18,r18,65535
   1b618:	1021883a 	mov	r16,r2
   1b61c:	94e4b03a 	or	r18,r18,r19
   1b620:	000ce000 	call	ce00 <__mulsi3>
   1b624:	9080052e 	bgeu	r18,r2,1b63c <__udivdi3+0x140>
   1b628:	8ca5883a 	add	r18,r17,r18
   1b62c:	80ffffc4 	addi	r3,r16,-1
   1b630:	94410c36 	bltu	r18,r17,1ba64 <__udivdi3+0x568>
   1b634:	90810b2e 	bgeu	r18,r2,1ba64 <__udivdi3+0x568>
   1b638:	843fff84 	addi	r16,r16,-2
   1b63c:	b004943a 	slli	r2,r22,16
   1b640:	0007883a 	mov	r3,zero
   1b644:	1404b03a 	or	r2,r2,r16
   1b648:	00005e06 	br	1b7c4 <__udivdi3+0x2c8>
   1b64c:	29c05b36 	bltu	r5,r7,1b7bc <__udivdi3+0x2c0>
   1b650:	00bfffd4 	movui	r2,65535
   1b654:	11c0672e 	bgeu	r2,r7,1b7f4 <__udivdi3+0x2f8>
   1b658:	00804034 	movhi	r2,256
   1b65c:	10bfffc4 	addi	r2,r2,-1
   1b660:	11c10a36 	bltu	r2,r7,1ba8c <__udivdi3+0x590>
   1b664:	00800404 	movi	r2,16
   1b668:	3886d83a 	srl	r3,r7,r2
   1b66c:	010000f4 	movhi	r4,3
   1b670:	2128c704 	addi	r4,r4,-23780
   1b674:	20c7883a 	add	r3,r4,r3
   1b678:	18c00003 	ldbu	r3,0(r3)
   1b67c:	05c00804 	movi	r23,32
   1b680:	1885883a 	add	r2,r3,r2
   1b684:	b8afc83a 	sub	r23,r23,r2
   1b688:	b800671e 	bne	r23,zero,1b828 <__udivdi3+0x32c>
   1b68c:	3c010536 	bltu	r7,r16,1baa4 <__udivdi3+0x5a8>
   1b690:	9985403a 	cmpgeu	r2,r19,r6
   1b694:	0007883a 	mov	r3,zero
   1b698:	00004a06 	br	1b7c4 <__udivdi3+0x2c8>
   1b69c:	3000041e 	bne	r6,zero,1b6b0 <__udivdi3+0x1b4>
   1b6a0:	000b883a 	mov	r5,zero
   1b6a4:	01000044 	movi	r4,1
   1b6a8:	000cd440 	call	cd44 <__udivsi3>
   1b6ac:	1023883a 	mov	r17,r2
   1b6b0:	00bfffd4 	movui	r2,65535
   1b6b4:	1440532e 	bgeu	r2,r17,1b804 <__udivdi3+0x308>
   1b6b8:	00804034 	movhi	r2,256
   1b6bc:	10bfffc4 	addi	r2,r2,-1
   1b6c0:	1440f436 	bltu	r2,r17,1ba94 <__udivdi3+0x598>
   1b6c4:	00800404 	movi	r2,16
   1b6c8:	8886d83a 	srl	r3,r17,r2
   1b6cc:	010000f4 	movhi	r4,3
   1b6d0:	2128c704 	addi	r4,r4,-23780
   1b6d4:	20c7883a 	add	r3,r4,r3
   1b6d8:	18c00003 	ldbu	r3,0(r3)
   1b6dc:	1885883a 	add	r2,r3,r2
   1b6e0:	00c00804 	movi	r3,32
   1b6e4:	1887c83a 	sub	r3,r3,r2
   1b6e8:	1800a51e 	bne	r3,zero,1b980 <__udivdi3+0x484>
   1b6ec:	882ad43a 	srli	r21,r17,16
   1b6f0:	8461c83a 	sub	r16,r16,r17
   1b6f4:	8d3fffcc 	andi	r20,r17,65535
   1b6f8:	00c00044 	movi	r3,1
   1b6fc:	a80b883a 	mov	r5,r21
   1b700:	8009883a 	mov	r4,r16
   1b704:	d8c00115 	stw	r3,4(sp)
   1b708:	000cda80 	call	cda8 <__umodsi3>
   1b70c:	a80b883a 	mov	r5,r21
   1b710:	8009883a 	mov	r4,r16
   1b714:	1027883a 	mov	r19,r2
   1b718:	000cd440 	call	cd44 <__udivsi3>
   1b71c:	a00b883a 	mov	r5,r20
   1b720:	1009883a 	mov	r4,r2
   1b724:	102d883a 	mov	r22,r2
   1b728:	000ce000 	call	ce00 <__mulsi3>
   1b72c:	9826943a 	slli	r19,r19,16
   1b730:	900ed43a 	srli	r7,r18,16
   1b734:	d8c00117 	ldw	r3,4(sp)
   1b738:	3cceb03a 	or	r7,r7,r19
   1b73c:	3880052e 	bgeu	r7,r2,1b754 <__udivdi3+0x258>
   1b740:	3c4f883a 	add	r7,r7,r17
   1b744:	b13fffc4 	addi	r4,r22,-1
   1b748:	3c400136 	bltu	r7,r17,1b750 <__udivdi3+0x254>
   1b74c:	3880e436 	bltu	r7,r2,1bae0 <__udivdi3+0x5e4>
   1b750:	202d883a 	mov	r22,r4
   1b754:	38a1c83a 	sub	r16,r7,r2
   1b758:	8009883a 	mov	r4,r16
   1b75c:	a80b883a 	mov	r5,r21
   1b760:	d8c00115 	stw	r3,4(sp)
   1b764:	000cda80 	call	cda8 <__umodsi3>
   1b768:	1027883a 	mov	r19,r2
   1b76c:	8009883a 	mov	r4,r16
   1b770:	a80b883a 	mov	r5,r21
   1b774:	9826943a 	slli	r19,r19,16
   1b778:	000cd440 	call	cd44 <__udivsi3>
   1b77c:	a00b883a 	mov	r5,r20
   1b780:	1009883a 	mov	r4,r2
   1b784:	94bfffcc 	andi	r18,r18,65535
   1b788:	1021883a 	mov	r16,r2
   1b78c:	94e4b03a 	or	r18,r18,r19
   1b790:	000ce000 	call	ce00 <__mulsi3>
   1b794:	d8c00117 	ldw	r3,4(sp)
   1b798:	9080052e 	bgeu	r18,r2,1b7b0 <__udivdi3+0x2b4>
   1b79c:	8ca5883a 	add	r18,r17,r18
   1b7a0:	813fffc4 	addi	r4,r16,-1
   1b7a4:	9440ad36 	bltu	r18,r17,1ba5c <__udivdi3+0x560>
   1b7a8:	9080ac2e 	bgeu	r18,r2,1ba5c <__udivdi3+0x560>
   1b7ac:	843fff84 	addi	r16,r16,-2
   1b7b0:	b004943a 	slli	r2,r22,16
   1b7b4:	1404b03a 	or	r2,r2,r16
   1b7b8:	00000206 	br	1b7c4 <__udivdi3+0x2c8>
   1b7bc:	0007883a 	mov	r3,zero
   1b7c0:	0005883a 	mov	r2,zero
   1b7c4:	dfc00b17 	ldw	ra,44(sp)
   1b7c8:	df000a17 	ldw	fp,40(sp)
   1b7cc:	ddc00917 	ldw	r23,36(sp)
   1b7d0:	dd800817 	ldw	r22,32(sp)
   1b7d4:	dd400717 	ldw	r21,28(sp)
   1b7d8:	dd000617 	ldw	r20,24(sp)
   1b7dc:	dcc00517 	ldw	r19,20(sp)
   1b7e0:	dc800417 	ldw	r18,16(sp)
   1b7e4:	dc400317 	ldw	r17,12(sp)
   1b7e8:	dc000217 	ldw	r16,8(sp)
   1b7ec:	dec00c04 	addi	sp,sp,48
   1b7f0:	f800283a 	ret
   1b7f4:	00803fc4 	movi	r2,255
   1b7f8:	11c5803a 	cmpltu	r2,r2,r7
   1b7fc:	100490fa 	slli	r2,r2,3
   1b800:	003f9906 	br	1b668 <__alt_data_end+0xfc01b668>
   1b804:	00803fc4 	movi	r2,255
   1b808:	1445803a 	cmpltu	r2,r2,r17
   1b80c:	100490fa 	slli	r2,r2,3
   1b810:	003fad06 	br	1b6c8 <__alt_data_end+0xfc01b6c8>
   1b814:	00804034 	movhi	r2,256
   1b818:	10bfffc4 	addi	r2,r2,-1
   1b81c:	11809f36 	bltu	r2,r6,1ba9c <__udivdi3+0x5a0>
   1b820:	00800404 	movi	r2,16
   1b824:	003f4c06 	br	1b558 <__alt_data_end+0xfc01b558>
   1b828:	3dce983a 	sll	r7,r7,r23
   1b82c:	30b8d83a 	srl	fp,r6,r2
   1b830:	80a2d83a 	srl	r17,r16,r2
   1b834:	35cc983a 	sll	r6,r6,r23
   1b838:	3f38b03a 	or	fp,r7,fp
   1b83c:	e024d43a 	srli	r18,fp,16
   1b840:	9884d83a 	srl	r2,r19,r2
   1b844:	85e0983a 	sll	r16,r16,r23
   1b848:	8809883a 	mov	r4,r17
   1b84c:	900b883a 	mov	r5,r18
   1b850:	d9800015 	stw	r6,0(sp)
   1b854:	1420b03a 	or	r16,r2,r16
   1b858:	000cda80 	call	cda8 <__umodsi3>
   1b85c:	900b883a 	mov	r5,r18
   1b860:	8809883a 	mov	r4,r17
   1b864:	1029883a 	mov	r20,r2
   1b868:	e5bfffcc 	andi	r22,fp,65535
   1b86c:	000cd440 	call	cd44 <__udivsi3>
   1b870:	100b883a 	mov	r5,r2
   1b874:	b009883a 	mov	r4,r22
   1b878:	102b883a 	mov	r21,r2
   1b87c:	000ce000 	call	ce00 <__mulsi3>
   1b880:	a028943a 	slli	r20,r20,16
   1b884:	8006d43a 	srli	r3,r16,16
   1b888:	1d06b03a 	or	r3,r3,r20
   1b88c:	1880042e 	bgeu	r3,r2,1b8a0 <__udivdi3+0x3a4>
   1b890:	1f07883a 	add	r3,r3,fp
   1b894:	a93fffc4 	addi	r4,r21,-1
   1b898:	1f00892e 	bgeu	r3,fp,1bac0 <__udivdi3+0x5c4>
   1b89c:	202b883a 	mov	r21,r4
   1b8a0:	18a3c83a 	sub	r17,r3,r2
   1b8a4:	8809883a 	mov	r4,r17
   1b8a8:	900b883a 	mov	r5,r18
   1b8ac:	000cda80 	call	cda8 <__umodsi3>
   1b8b0:	1029883a 	mov	r20,r2
   1b8b4:	8809883a 	mov	r4,r17
   1b8b8:	900b883a 	mov	r5,r18
   1b8bc:	a028943a 	slli	r20,r20,16
   1b8c0:	000cd440 	call	cd44 <__udivsi3>
   1b8c4:	100b883a 	mov	r5,r2
   1b8c8:	b009883a 	mov	r4,r22
   1b8cc:	843fffcc 	andi	r16,r16,65535
   1b8d0:	1023883a 	mov	r17,r2
   1b8d4:	8520b03a 	or	r16,r16,r20
   1b8d8:	000ce000 	call	ce00 <__mulsi3>
   1b8dc:	8080042e 	bgeu	r16,r2,1b8f0 <__udivdi3+0x3f4>
   1b8e0:	8721883a 	add	r16,r16,fp
   1b8e4:	88ffffc4 	addi	r3,r17,-1
   1b8e8:	8700712e 	bgeu	r16,fp,1bab0 <__udivdi3+0x5b4>
   1b8ec:	1823883a 	mov	r17,r3
   1b8f0:	a80e943a 	slli	r7,r21,16
   1b8f4:	d8c00017 	ldw	r3,0(sp)
   1b8f8:	80a1c83a 	sub	r16,r16,r2
   1b8fc:	3c64b03a 	or	r18,r7,r17
   1b900:	1d3fffcc 	andi	r20,r3,65535
   1b904:	9022d43a 	srli	r17,r18,16
   1b908:	95bfffcc 	andi	r22,r18,65535
   1b90c:	a00b883a 	mov	r5,r20
   1b910:	b009883a 	mov	r4,r22
   1b914:	182ad43a 	srli	r21,r3,16
   1b918:	000ce000 	call	ce00 <__mulsi3>
   1b91c:	a00b883a 	mov	r5,r20
   1b920:	8809883a 	mov	r4,r17
   1b924:	1039883a 	mov	fp,r2
   1b928:	000ce000 	call	ce00 <__mulsi3>
   1b92c:	8809883a 	mov	r4,r17
   1b930:	a80b883a 	mov	r5,r21
   1b934:	1029883a 	mov	r20,r2
   1b938:	000ce000 	call	ce00 <__mulsi3>
   1b93c:	a80b883a 	mov	r5,r21
   1b940:	b009883a 	mov	r4,r22
   1b944:	1023883a 	mov	r17,r2
   1b948:	000ce000 	call	ce00 <__mulsi3>
   1b94c:	e006d43a 	srli	r3,fp,16
   1b950:	1505883a 	add	r2,r2,r20
   1b954:	1887883a 	add	r3,r3,r2
   1b958:	1d00022e 	bgeu	r3,r20,1b964 <__udivdi3+0x468>
   1b95c:	00800074 	movhi	r2,1
   1b960:	88a3883a 	add	r17,r17,r2
   1b964:	1804d43a 	srli	r2,r3,16
   1b968:	1463883a 	add	r17,r2,r17
   1b96c:	84404436 	bltu	r16,r17,1ba80 <__udivdi3+0x584>
   1b970:	84403e26 	beq	r16,r17,1ba6c <__udivdi3+0x570>
   1b974:	9005883a 	mov	r2,r18
   1b978:	0007883a 	mov	r3,zero
   1b97c:	003f9106 	br	1b7c4 <__alt_data_end+0xfc01b7c4>
   1b980:	88e2983a 	sll	r17,r17,r3
   1b984:	80aed83a 	srl	r23,r16,r2
   1b988:	80e0983a 	sll	r16,r16,r3
   1b98c:	882ad43a 	srli	r21,r17,16
   1b990:	9884d83a 	srl	r2,r19,r2
   1b994:	b809883a 	mov	r4,r23
   1b998:	a80b883a 	mov	r5,r21
   1b99c:	98e4983a 	sll	r18,r19,r3
   1b9a0:	142cb03a 	or	r22,r2,r16
   1b9a4:	000cda80 	call	cda8 <__umodsi3>
   1b9a8:	b809883a 	mov	r4,r23
   1b9ac:	a80b883a 	mov	r5,r21
   1b9b0:	1027883a 	mov	r19,r2
   1b9b4:	8d3fffcc 	andi	r20,r17,65535
   1b9b8:	000cd440 	call	cd44 <__udivsi3>
   1b9bc:	a009883a 	mov	r4,r20
   1b9c0:	100b883a 	mov	r5,r2
   1b9c4:	102f883a 	mov	r23,r2
   1b9c8:	000ce000 	call	ce00 <__mulsi3>
   1b9cc:	9826943a 	slli	r19,r19,16
   1b9d0:	b008d43a 	srli	r4,r22,16
   1b9d4:	24c8b03a 	or	r4,r4,r19
   1b9d8:	2080062e 	bgeu	r4,r2,1b9f4 <__udivdi3+0x4f8>
   1b9dc:	2449883a 	add	r4,r4,r17
   1b9e0:	b8ffffc4 	addi	r3,r23,-1
   1b9e4:	24403c36 	bltu	r4,r17,1bad8 <__udivdi3+0x5dc>
   1b9e8:	20803b2e 	bgeu	r4,r2,1bad8 <__udivdi3+0x5dc>
   1b9ec:	bdffff84 	addi	r23,r23,-2
   1b9f0:	2449883a 	add	r4,r4,r17
   1b9f4:	20a1c83a 	sub	r16,r4,r2
   1b9f8:	a80b883a 	mov	r5,r21
   1b9fc:	8009883a 	mov	r4,r16
   1ba00:	000cda80 	call	cda8 <__umodsi3>
   1ba04:	a80b883a 	mov	r5,r21
   1ba08:	8009883a 	mov	r4,r16
   1ba0c:	1027883a 	mov	r19,r2
   1ba10:	000cd440 	call	cd44 <__udivsi3>
   1ba14:	a009883a 	mov	r4,r20
   1ba18:	100b883a 	mov	r5,r2
   1ba1c:	9826943a 	slli	r19,r19,16
   1ba20:	1039883a 	mov	fp,r2
   1ba24:	000ce000 	call	ce00 <__mulsi3>
   1ba28:	b13fffcc 	andi	r4,r22,65535
   1ba2c:	24c8b03a 	or	r4,r4,r19
   1ba30:	2080062e 	bgeu	r4,r2,1ba4c <__udivdi3+0x550>
   1ba34:	2449883a 	add	r4,r4,r17
   1ba38:	e0ffffc4 	addi	r3,fp,-1
   1ba3c:	24402436 	bltu	r4,r17,1bad0 <__udivdi3+0x5d4>
   1ba40:	2080232e 	bgeu	r4,r2,1bad0 <__udivdi3+0x5d4>
   1ba44:	e73fff84 	addi	fp,fp,-2
   1ba48:	2449883a 	add	r4,r4,r17
   1ba4c:	b82e943a 	slli	r23,r23,16
   1ba50:	20a1c83a 	sub	r16,r4,r2
   1ba54:	bf06b03a 	or	r3,r23,fp
   1ba58:	003f2806 	br	1b6fc <__alt_data_end+0xfc01b6fc>
   1ba5c:	2021883a 	mov	r16,r4
   1ba60:	003f5306 	br	1b7b0 <__alt_data_end+0xfc01b7b0>
   1ba64:	1821883a 	mov	r16,r3
   1ba68:	003ef406 	br	1b63c <__alt_data_end+0xfc01b63c>
   1ba6c:	1806943a 	slli	r3,r3,16
   1ba70:	9de6983a 	sll	r19,r19,r23
   1ba74:	e73fffcc 	andi	fp,fp,65535
   1ba78:	1f07883a 	add	r3,r3,fp
   1ba7c:	98ffbd2e 	bgeu	r19,r3,1b974 <__alt_data_end+0xfc01b974>
   1ba80:	90bfffc4 	addi	r2,r18,-1
   1ba84:	0007883a 	mov	r3,zero
   1ba88:	003f4e06 	br	1b7c4 <__alt_data_end+0xfc01b7c4>
   1ba8c:	00800604 	movi	r2,24
   1ba90:	003ef506 	br	1b668 <__alt_data_end+0xfc01b668>
   1ba94:	00800604 	movi	r2,24
   1ba98:	003f0b06 	br	1b6c8 <__alt_data_end+0xfc01b6c8>
   1ba9c:	00800604 	movi	r2,24
   1baa0:	003ead06 	br	1b558 <__alt_data_end+0xfc01b558>
   1baa4:	0007883a 	mov	r3,zero
   1baa8:	00800044 	movi	r2,1
   1baac:	003f4506 	br	1b7c4 <__alt_data_end+0xfc01b7c4>
   1bab0:	80bf8e2e 	bgeu	r16,r2,1b8ec <__alt_data_end+0xfc01b8ec>
   1bab4:	8c7fff84 	addi	r17,r17,-2
   1bab8:	8721883a 	add	r16,r16,fp
   1babc:	003f8c06 	br	1b8f0 <__alt_data_end+0xfc01b8f0>
   1bac0:	18bf762e 	bgeu	r3,r2,1b89c <__alt_data_end+0xfc01b89c>
   1bac4:	ad7fff84 	addi	r21,r21,-2
   1bac8:	1f07883a 	add	r3,r3,fp
   1bacc:	003f7406 	br	1b8a0 <__alt_data_end+0xfc01b8a0>
   1bad0:	1839883a 	mov	fp,r3
   1bad4:	003fdd06 	br	1ba4c <__alt_data_end+0xfc01ba4c>
   1bad8:	182f883a 	mov	r23,r3
   1badc:	003fc506 	br	1b9f4 <__alt_data_end+0xfc01b9f4>
   1bae0:	b5bfff84 	addi	r22,r22,-2
   1bae4:	3c4f883a 	add	r7,r7,r17
   1bae8:	003f1a06 	br	1b754 <__alt_data_end+0xfc01b754>
   1baec:	b5bfff84 	addi	r22,r22,-2
   1baf0:	1c47883a 	add	r3,r3,r17
   1baf4:	003ebc06 	br	1b5e8 <__alt_data_end+0xfc01b5e8>

0001baf8 <__umoddi3>:
   1baf8:	defff304 	addi	sp,sp,-52
   1bafc:	df000b15 	stw	fp,44(sp)
   1bb00:	dc400415 	stw	r17,16(sp)
   1bb04:	dc000315 	stw	r16,12(sp)
   1bb08:	dfc00c15 	stw	ra,48(sp)
   1bb0c:	ddc00a15 	stw	r23,40(sp)
   1bb10:	dd800915 	stw	r22,36(sp)
   1bb14:	dd400815 	stw	r21,32(sp)
   1bb18:	dd000715 	stw	r20,28(sp)
   1bb1c:	dcc00615 	stw	r19,24(sp)
   1bb20:	dc800515 	stw	r18,20(sp)
   1bb24:	2021883a 	mov	r16,r4
   1bb28:	2823883a 	mov	r17,r5
   1bb2c:	2839883a 	mov	fp,r5
   1bb30:	3800401e 	bne	r7,zero,1bc34 <__umoddi3+0x13c>
   1bb34:	3027883a 	mov	r19,r6
   1bb38:	2029883a 	mov	r20,r4
   1bb3c:	2980552e 	bgeu	r5,r6,1bc94 <__umoddi3+0x19c>
   1bb40:	00bfffd4 	movui	r2,65535
   1bb44:	1180a236 	bltu	r2,r6,1bdd0 <__umoddi3+0x2d8>
   1bb48:	01003fc4 	movi	r4,255
   1bb4c:	2189803a 	cmpltu	r4,r4,r6
   1bb50:	200890fa 	slli	r4,r4,3
   1bb54:	3104d83a 	srl	r2,r6,r4
   1bb58:	00c000f4 	movhi	r3,3
   1bb5c:	18e8c704 	addi	r3,r3,-23780
   1bb60:	1885883a 	add	r2,r3,r2
   1bb64:	10c00003 	ldbu	r3,0(r2)
   1bb68:	00800804 	movi	r2,32
   1bb6c:	1909883a 	add	r4,r3,r4
   1bb70:	1125c83a 	sub	r18,r2,r4
   1bb74:	90000526 	beq	r18,zero,1bb8c <__umoddi3+0x94>
   1bb78:	8ca2983a 	sll	r17,r17,r18
   1bb7c:	8108d83a 	srl	r4,r16,r4
   1bb80:	34a6983a 	sll	r19,r6,r18
   1bb84:	84a8983a 	sll	r20,r16,r18
   1bb88:	2478b03a 	or	fp,r4,r17
   1bb8c:	982cd43a 	srli	r22,r19,16
   1bb90:	e009883a 	mov	r4,fp
   1bb94:	9dffffcc 	andi	r23,r19,65535
   1bb98:	b00b883a 	mov	r5,r22
   1bb9c:	000cda80 	call	cda8 <__umodsi3>
   1bba0:	b00b883a 	mov	r5,r22
   1bba4:	e009883a 	mov	r4,fp
   1bba8:	102b883a 	mov	r21,r2
   1bbac:	000cd440 	call	cd44 <__udivsi3>
   1bbb0:	100b883a 	mov	r5,r2
   1bbb4:	b809883a 	mov	r4,r23
   1bbb8:	000ce000 	call	ce00 <__mulsi3>
   1bbbc:	a82a943a 	slli	r21,r21,16
   1bbc0:	a006d43a 	srli	r3,r20,16
   1bbc4:	1d46b03a 	or	r3,r3,r21
   1bbc8:	1880032e 	bgeu	r3,r2,1bbd8 <__umoddi3+0xe0>
   1bbcc:	1cc7883a 	add	r3,r3,r19
   1bbd0:	1cc00136 	bltu	r3,r19,1bbd8 <__umoddi3+0xe0>
   1bbd4:	18813136 	bltu	r3,r2,1c09c <__umoddi3+0x5a4>
   1bbd8:	18a1c83a 	sub	r16,r3,r2
   1bbdc:	b00b883a 	mov	r5,r22
   1bbe0:	8009883a 	mov	r4,r16
   1bbe4:	000cda80 	call	cda8 <__umodsi3>
   1bbe8:	b00b883a 	mov	r5,r22
   1bbec:	8009883a 	mov	r4,r16
   1bbf0:	1023883a 	mov	r17,r2
   1bbf4:	000cd440 	call	cd44 <__udivsi3>
   1bbf8:	100b883a 	mov	r5,r2
   1bbfc:	b809883a 	mov	r4,r23
   1bc00:	8822943a 	slli	r17,r17,16
   1bc04:	000ce000 	call	ce00 <__mulsi3>
   1bc08:	a0ffffcc 	andi	r3,r20,65535
   1bc0c:	1c46b03a 	or	r3,r3,r17
   1bc10:	1880042e 	bgeu	r3,r2,1bc24 <__umoddi3+0x12c>
   1bc14:	1cc7883a 	add	r3,r3,r19
   1bc18:	1cc00236 	bltu	r3,r19,1bc24 <__umoddi3+0x12c>
   1bc1c:	1880012e 	bgeu	r3,r2,1bc24 <__umoddi3+0x12c>
   1bc20:	1cc7883a 	add	r3,r3,r19
   1bc24:	1885c83a 	sub	r2,r3,r2
   1bc28:	1484d83a 	srl	r2,r2,r18
   1bc2c:	0007883a 	mov	r3,zero
   1bc30:	00005306 	br	1bd80 <__umoddi3+0x288>
   1bc34:	29c05036 	bltu	r5,r7,1bd78 <__umoddi3+0x280>
   1bc38:	00bfffd4 	movui	r2,65535
   1bc3c:	11c05c2e 	bgeu	r2,r7,1bdb0 <__umoddi3+0x2b8>
   1bc40:	00804034 	movhi	r2,256
   1bc44:	10bfffc4 	addi	r2,r2,-1
   1bc48:	11c10636 	bltu	r2,r7,1c064 <__umoddi3+0x56c>
   1bc4c:	01000404 	movi	r4,16
   1bc50:	3904d83a 	srl	r2,r7,r4
   1bc54:	00c000f4 	movhi	r3,3
   1bc58:	18e8c704 	addi	r3,r3,-23780
   1bc5c:	1885883a 	add	r2,r3,r2
   1bc60:	14c00003 	ldbu	r19,0(r2)
   1bc64:	00c00804 	movi	r3,32
   1bc68:	9927883a 	add	r19,r19,r4
   1bc6c:	1ce9c83a 	sub	r20,r3,r19
   1bc70:	a0005c1e 	bne	r20,zero,1bde4 <__umoddi3+0x2ec>
   1bc74:	3c400136 	bltu	r7,r17,1bc7c <__umoddi3+0x184>
   1bc78:	81810a36 	bltu	r16,r6,1c0a4 <__umoddi3+0x5ac>
   1bc7c:	8185c83a 	sub	r2,r16,r6
   1bc80:	89e3c83a 	sub	r17,r17,r7
   1bc84:	8089803a 	cmpltu	r4,r16,r2
   1bc88:	8939c83a 	sub	fp,r17,r4
   1bc8c:	e007883a 	mov	r3,fp
   1bc90:	00003b06 	br	1bd80 <__umoddi3+0x288>
   1bc94:	3000041e 	bne	r6,zero,1bca8 <__umoddi3+0x1b0>
   1bc98:	000b883a 	mov	r5,zero
   1bc9c:	01000044 	movi	r4,1
   1bca0:	000cd440 	call	cd44 <__udivsi3>
   1bca4:	1027883a 	mov	r19,r2
   1bca8:	00bfffd4 	movui	r2,65535
   1bcac:	14c0442e 	bgeu	r2,r19,1bdc0 <__umoddi3+0x2c8>
   1bcb0:	00804034 	movhi	r2,256
   1bcb4:	10bfffc4 	addi	r2,r2,-1
   1bcb8:	14c0ec36 	bltu	r2,r19,1c06c <__umoddi3+0x574>
   1bcbc:	00800404 	movi	r2,16
   1bcc0:	9886d83a 	srl	r3,r19,r2
   1bcc4:	010000f4 	movhi	r4,3
   1bcc8:	2128c704 	addi	r4,r4,-23780
   1bccc:	20c7883a 	add	r3,r4,r3
   1bcd0:	18c00003 	ldbu	r3,0(r3)
   1bcd4:	1887883a 	add	r3,r3,r2
   1bcd8:	00800804 	movi	r2,32
   1bcdc:	10e5c83a 	sub	r18,r2,r3
   1bce0:	9000ab1e 	bne	r18,zero,1bf90 <__umoddi3+0x498>
   1bce4:	982cd43a 	srli	r22,r19,16
   1bce8:	8ce3c83a 	sub	r17,r17,r19
   1bcec:	9dffffcc 	andi	r23,r19,65535
   1bcf0:	b00b883a 	mov	r5,r22
   1bcf4:	8809883a 	mov	r4,r17
   1bcf8:	000cda80 	call	cda8 <__umodsi3>
   1bcfc:	b00b883a 	mov	r5,r22
   1bd00:	8809883a 	mov	r4,r17
   1bd04:	102b883a 	mov	r21,r2
   1bd08:	000cd440 	call	cd44 <__udivsi3>
   1bd0c:	b80b883a 	mov	r5,r23
   1bd10:	1009883a 	mov	r4,r2
   1bd14:	000ce000 	call	ce00 <__mulsi3>
   1bd18:	a82a943a 	slli	r21,r21,16
   1bd1c:	a006d43a 	srli	r3,r20,16
   1bd20:	1d46b03a 	or	r3,r3,r21
   1bd24:	1880042e 	bgeu	r3,r2,1bd38 <__umoddi3+0x240>
   1bd28:	1cc7883a 	add	r3,r3,r19
   1bd2c:	1cc00236 	bltu	r3,r19,1bd38 <__umoddi3+0x240>
   1bd30:	1880012e 	bgeu	r3,r2,1bd38 <__umoddi3+0x240>
   1bd34:	1cc7883a 	add	r3,r3,r19
   1bd38:	18a1c83a 	sub	r16,r3,r2
   1bd3c:	b00b883a 	mov	r5,r22
   1bd40:	8009883a 	mov	r4,r16
   1bd44:	000cda80 	call	cda8 <__umodsi3>
   1bd48:	1023883a 	mov	r17,r2
   1bd4c:	b00b883a 	mov	r5,r22
   1bd50:	8009883a 	mov	r4,r16
   1bd54:	000cd440 	call	cd44 <__udivsi3>
   1bd58:	8822943a 	slli	r17,r17,16
   1bd5c:	b80b883a 	mov	r5,r23
   1bd60:	1009883a 	mov	r4,r2
   1bd64:	000ce000 	call	ce00 <__mulsi3>
   1bd68:	a53fffcc 	andi	r20,r20,65535
   1bd6c:	a446b03a 	or	r3,r20,r17
   1bd70:	18bfac2e 	bgeu	r3,r2,1bc24 <__alt_data_end+0xfc01bc24>
   1bd74:	003fa706 	br	1bc14 <__alt_data_end+0xfc01bc14>
   1bd78:	2005883a 	mov	r2,r4
   1bd7c:	2807883a 	mov	r3,r5
   1bd80:	dfc00c17 	ldw	ra,48(sp)
   1bd84:	df000b17 	ldw	fp,44(sp)
   1bd88:	ddc00a17 	ldw	r23,40(sp)
   1bd8c:	dd800917 	ldw	r22,36(sp)
   1bd90:	dd400817 	ldw	r21,32(sp)
   1bd94:	dd000717 	ldw	r20,28(sp)
   1bd98:	dcc00617 	ldw	r19,24(sp)
   1bd9c:	dc800517 	ldw	r18,20(sp)
   1bda0:	dc400417 	ldw	r17,16(sp)
   1bda4:	dc000317 	ldw	r16,12(sp)
   1bda8:	dec00d04 	addi	sp,sp,52
   1bdac:	f800283a 	ret
   1bdb0:	04c03fc4 	movi	r19,255
   1bdb4:	99c9803a 	cmpltu	r4,r19,r7
   1bdb8:	200890fa 	slli	r4,r4,3
   1bdbc:	003fa406 	br	1bc50 <__alt_data_end+0xfc01bc50>
   1bdc0:	00803fc4 	movi	r2,255
   1bdc4:	14c5803a 	cmpltu	r2,r2,r19
   1bdc8:	100490fa 	slli	r2,r2,3
   1bdcc:	003fbc06 	br	1bcc0 <__alt_data_end+0xfc01bcc0>
   1bdd0:	00804034 	movhi	r2,256
   1bdd4:	10bfffc4 	addi	r2,r2,-1
   1bdd8:	1180a636 	bltu	r2,r6,1c074 <__umoddi3+0x57c>
   1bddc:	01000404 	movi	r4,16
   1bde0:	003f5c06 	br	1bb54 <__alt_data_end+0xfc01bb54>
   1bde4:	3d0e983a 	sll	r7,r7,r20
   1bde8:	34ead83a 	srl	r21,r6,r19
   1bdec:	8cc6d83a 	srl	r3,r17,r19
   1bdf0:	8d10983a 	sll	r8,r17,r20
   1bdf4:	3d6ab03a 	or	r21,r7,r21
   1bdf8:	a82cd43a 	srli	r22,r21,16
   1bdfc:	84e2d83a 	srl	r17,r16,r19
   1be00:	1809883a 	mov	r4,r3
   1be04:	b00b883a 	mov	r5,r22
   1be08:	8a22b03a 	or	r17,r17,r8
   1be0c:	3524983a 	sll	r18,r6,r20
   1be10:	dc400015 	stw	r17,0(sp)
   1be14:	d8c00115 	stw	r3,4(sp)
   1be18:	000cda80 	call	cda8 <__umodsi3>
   1be1c:	d8c00117 	ldw	r3,4(sp)
   1be20:	b00b883a 	mov	r5,r22
   1be24:	1039883a 	mov	fp,r2
   1be28:	1809883a 	mov	r4,r3
   1be2c:	000cd440 	call	cd44 <__udivsi3>
   1be30:	adffffcc 	andi	r23,r21,65535
   1be34:	100b883a 	mov	r5,r2
   1be38:	b809883a 	mov	r4,r23
   1be3c:	1023883a 	mov	r17,r2
   1be40:	000ce000 	call	ce00 <__mulsi3>
   1be44:	d9400017 	ldw	r5,0(sp)
   1be48:	e008943a 	slli	r4,fp,16
   1be4c:	8520983a 	sll	r16,r16,r20
   1be50:	2806d43a 	srli	r3,r5,16
   1be54:	1906b03a 	or	r3,r3,r4
   1be58:	1880042e 	bgeu	r3,r2,1be6c <__umoddi3+0x374>
   1be5c:	1d47883a 	add	r3,r3,r21
   1be60:	893fffc4 	addi	r4,r17,-1
   1be64:	1d40892e 	bgeu	r3,r21,1c08c <__umoddi3+0x594>
   1be68:	2023883a 	mov	r17,r4
   1be6c:	18b9c83a 	sub	fp,r3,r2
   1be70:	b00b883a 	mov	r5,r22
   1be74:	e009883a 	mov	r4,fp
   1be78:	000cda80 	call	cda8 <__umodsi3>
   1be7c:	b00b883a 	mov	r5,r22
   1be80:	e009883a 	mov	r4,fp
   1be84:	d8800215 	stw	r2,8(sp)
   1be88:	000cd440 	call	cd44 <__udivsi3>
   1be8c:	100b883a 	mov	r5,r2
   1be90:	b809883a 	mov	r4,r23
   1be94:	102d883a 	mov	r22,r2
   1be98:	000ce000 	call	ce00 <__mulsi3>
   1be9c:	d9800217 	ldw	r6,8(sp)
   1bea0:	d8c00017 	ldw	r3,0(sp)
   1bea4:	300c943a 	slli	r6,r6,16
   1bea8:	1a3fffcc 	andi	r8,r3,65535
   1beac:	4190b03a 	or	r8,r8,r6
   1beb0:	4080042e 	bgeu	r8,r2,1bec4 <__umoddi3+0x3cc>
   1beb4:	4551883a 	add	r8,r8,r21
   1beb8:	b0ffffc4 	addi	r3,r22,-1
   1bebc:	45406f2e 	bgeu	r8,r21,1c07c <__umoddi3+0x584>
   1bec0:	182d883a 	mov	r22,r3
   1bec4:	880e943a 	slli	r7,r17,16
   1bec8:	9006d43a 	srli	r3,r18,16
   1becc:	91bfffcc 	andi	r6,r18,65535
   1bed0:	3dacb03a 	or	r22,r7,r22
   1bed4:	b02ed43a 	srli	r23,r22,16
   1bed8:	b5bfffcc 	andi	r22,r22,65535
   1bedc:	300b883a 	mov	r5,r6
   1bee0:	b009883a 	mov	r4,r22
   1bee4:	40a3c83a 	sub	r17,r8,r2
   1bee8:	d8c00115 	stw	r3,4(sp)
   1beec:	d9800215 	stw	r6,8(sp)
   1bef0:	000ce000 	call	ce00 <__mulsi3>
   1bef4:	d9800217 	ldw	r6,8(sp)
   1bef8:	b809883a 	mov	r4,r23
   1befc:	1039883a 	mov	fp,r2
   1bf00:	300b883a 	mov	r5,r6
   1bf04:	000ce000 	call	ce00 <__mulsi3>
   1bf08:	d8c00117 	ldw	r3,4(sp)
   1bf0c:	b809883a 	mov	r4,r23
   1bf10:	d8800215 	stw	r2,8(sp)
   1bf14:	180b883a 	mov	r5,r3
   1bf18:	000ce000 	call	ce00 <__mulsi3>
   1bf1c:	d8c00117 	ldw	r3,4(sp)
   1bf20:	b009883a 	mov	r4,r22
   1bf24:	102f883a 	mov	r23,r2
   1bf28:	180b883a 	mov	r5,r3
   1bf2c:	000ce000 	call	ce00 <__mulsi3>
   1bf30:	d9800217 	ldw	r6,8(sp)
   1bf34:	e006d43a 	srli	r3,fp,16
   1bf38:	1185883a 	add	r2,r2,r6
   1bf3c:	1885883a 	add	r2,r3,r2
   1bf40:	1180022e 	bgeu	r2,r6,1bf4c <__umoddi3+0x454>
   1bf44:	00c00074 	movhi	r3,1
   1bf48:	b8ef883a 	add	r23,r23,r3
   1bf4c:	1006d43a 	srli	r3,r2,16
   1bf50:	1004943a 	slli	r2,r2,16
   1bf54:	e73fffcc 	andi	fp,fp,65535
   1bf58:	1dc7883a 	add	r3,r3,r23
   1bf5c:	1739883a 	add	fp,r2,fp
   1bf60:	88c03a36 	bltu	r17,r3,1c04c <__umoddi3+0x554>
   1bf64:	88c05126 	beq	r17,r3,1c0ac <__umoddi3+0x5b4>
   1bf68:	88c9c83a 	sub	r4,r17,r3
   1bf6c:	e00f883a 	mov	r7,fp
   1bf70:	81cfc83a 	sub	r7,r16,r7
   1bf74:	81c7803a 	cmpltu	r3,r16,r7
   1bf78:	20c7c83a 	sub	r3,r4,r3
   1bf7c:	1cc4983a 	sll	r2,r3,r19
   1bf80:	3d0ed83a 	srl	r7,r7,r20
   1bf84:	1d06d83a 	srl	r3,r3,r20
   1bf88:	11c4b03a 	or	r2,r2,r7
   1bf8c:	003f7c06 	br	1bd80 <__alt_data_end+0xfc01bd80>
   1bf90:	9ca6983a 	sll	r19,r19,r18
   1bf94:	88f8d83a 	srl	fp,r17,r3
   1bf98:	80c4d83a 	srl	r2,r16,r3
   1bf9c:	982cd43a 	srli	r22,r19,16
   1bfa0:	8ca2983a 	sll	r17,r17,r18
   1bfa4:	e009883a 	mov	r4,fp
   1bfa8:	b00b883a 	mov	r5,r22
   1bfac:	146ab03a 	or	r21,r2,r17
   1bfb0:	000cda80 	call	cda8 <__umodsi3>
   1bfb4:	b00b883a 	mov	r5,r22
   1bfb8:	e009883a 	mov	r4,fp
   1bfbc:	1029883a 	mov	r20,r2
   1bfc0:	9dffffcc 	andi	r23,r19,65535
   1bfc4:	000cd440 	call	cd44 <__udivsi3>
   1bfc8:	b809883a 	mov	r4,r23
   1bfcc:	100b883a 	mov	r5,r2
   1bfd0:	000ce000 	call	ce00 <__mulsi3>
   1bfd4:	a008943a 	slli	r4,r20,16
   1bfd8:	a806d43a 	srli	r3,r21,16
   1bfdc:	84a8983a 	sll	r20,r16,r18
   1bfe0:	1906b03a 	or	r3,r3,r4
   1bfe4:	1880042e 	bgeu	r3,r2,1bff8 <__umoddi3+0x500>
   1bfe8:	1cc7883a 	add	r3,r3,r19
   1bfec:	1cc00236 	bltu	r3,r19,1bff8 <__umoddi3+0x500>
   1bff0:	1880012e 	bgeu	r3,r2,1bff8 <__umoddi3+0x500>
   1bff4:	1cc7883a 	add	r3,r3,r19
   1bff8:	18a3c83a 	sub	r17,r3,r2
   1bffc:	b00b883a 	mov	r5,r22
   1c000:	8809883a 	mov	r4,r17
   1c004:	000cda80 	call	cda8 <__umodsi3>
   1c008:	b00b883a 	mov	r5,r22
   1c00c:	8809883a 	mov	r4,r17
   1c010:	1021883a 	mov	r16,r2
   1c014:	000cd440 	call	cd44 <__udivsi3>
   1c018:	100b883a 	mov	r5,r2
   1c01c:	b809883a 	mov	r4,r23
   1c020:	8020943a 	slli	r16,r16,16
   1c024:	000ce000 	call	ce00 <__mulsi3>
   1c028:	a8ffffcc 	andi	r3,r21,65535
   1c02c:	1c06b03a 	or	r3,r3,r16
   1c030:	1880042e 	bgeu	r3,r2,1c044 <__umoddi3+0x54c>
   1c034:	1cc7883a 	add	r3,r3,r19
   1c038:	1cc00236 	bltu	r3,r19,1c044 <__umoddi3+0x54c>
   1c03c:	1880012e 	bgeu	r3,r2,1c044 <__umoddi3+0x54c>
   1c040:	1cc7883a 	add	r3,r3,r19
   1c044:	18a3c83a 	sub	r17,r3,r2
   1c048:	003f2906 	br	1bcf0 <__alt_data_end+0xfc01bcf0>
   1c04c:	e48fc83a 	sub	r7,fp,r18
   1c050:	1d49c83a 	sub	r4,r3,r21
   1c054:	e1f9803a 	cmpltu	fp,fp,r7
   1c058:	2739c83a 	sub	fp,r4,fp
   1c05c:	8f09c83a 	sub	r4,r17,fp
   1c060:	003fc306 	br	1bf70 <__alt_data_end+0xfc01bf70>
   1c064:	01000604 	movi	r4,24
   1c068:	003ef906 	br	1bc50 <__alt_data_end+0xfc01bc50>
   1c06c:	00800604 	movi	r2,24
   1c070:	003f1306 	br	1bcc0 <__alt_data_end+0xfc01bcc0>
   1c074:	01000604 	movi	r4,24
   1c078:	003eb606 	br	1bb54 <__alt_data_end+0xfc01bb54>
   1c07c:	40bf902e 	bgeu	r8,r2,1bec0 <__alt_data_end+0xfc01bec0>
   1c080:	b5bfff84 	addi	r22,r22,-2
   1c084:	4551883a 	add	r8,r8,r21
   1c088:	003f8e06 	br	1bec4 <__alt_data_end+0xfc01bec4>
   1c08c:	18bf762e 	bgeu	r3,r2,1be68 <__alt_data_end+0xfc01be68>
   1c090:	8c7fff84 	addi	r17,r17,-2
   1c094:	1d47883a 	add	r3,r3,r21
   1c098:	003f7406 	br	1be6c <__alt_data_end+0xfc01be6c>
   1c09c:	1cc7883a 	add	r3,r3,r19
   1c0a0:	003ecd06 	br	1bbd8 <__alt_data_end+0xfc01bbd8>
   1c0a4:	8005883a 	mov	r2,r16
   1c0a8:	003ef806 	br	1bc8c <__alt_data_end+0xfc01bc8c>
   1c0ac:	873fe736 	bltu	r16,fp,1c04c <__alt_data_end+0xfc01c04c>
   1c0b0:	e00f883a 	mov	r7,fp
   1c0b4:	0009883a 	mov	r4,zero
   1c0b8:	003fad06 	br	1bf70 <__alt_data_end+0xfc01bf70>

0001c0bc <__adddf3>:
   1c0bc:	02c00434 	movhi	r11,16
   1c0c0:	5affffc4 	addi	r11,r11,-1
   1c0c4:	2806d7fa 	srli	r3,r5,31
   1c0c8:	2ad4703a 	and	r10,r5,r11
   1c0cc:	3ad2703a 	and	r9,r7,r11
   1c0d0:	3804d53a 	srli	r2,r7,20
   1c0d4:	3018d77a 	srli	r12,r6,29
   1c0d8:	280ad53a 	srli	r5,r5,20
   1c0dc:	501490fa 	slli	r10,r10,3
   1c0e0:	2010d77a 	srli	r8,r4,29
   1c0e4:	481290fa 	slli	r9,r9,3
   1c0e8:	380ed7fa 	srli	r7,r7,31
   1c0ec:	defffb04 	addi	sp,sp,-20
   1c0f0:	dc800215 	stw	r18,8(sp)
   1c0f4:	dc400115 	stw	r17,4(sp)
   1c0f8:	dc000015 	stw	r16,0(sp)
   1c0fc:	dfc00415 	stw	ra,16(sp)
   1c100:	dcc00315 	stw	r19,12(sp)
   1c104:	1c803fcc 	andi	r18,r3,255
   1c108:	2c01ffcc 	andi	r16,r5,2047
   1c10c:	5210b03a 	or	r8,r10,r8
   1c110:	202290fa 	slli	r17,r4,3
   1c114:	1081ffcc 	andi	r2,r2,2047
   1c118:	4b12b03a 	or	r9,r9,r12
   1c11c:	300c90fa 	slli	r6,r6,3
   1c120:	91c07526 	beq	r18,r7,1c2f8 <__adddf3+0x23c>
   1c124:	8087c83a 	sub	r3,r16,r2
   1c128:	00c0ab0e 	bge	zero,r3,1c3d8 <__adddf3+0x31c>
   1c12c:	10002a1e 	bne	r2,zero,1c1d8 <__adddf3+0x11c>
   1c130:	4984b03a 	or	r2,r9,r6
   1c134:	1000961e 	bne	r2,zero,1c390 <__adddf3+0x2d4>
   1c138:	888001cc 	andi	r2,r17,7
   1c13c:	10000726 	beq	r2,zero,1c15c <__adddf3+0xa0>
   1c140:	888003cc 	andi	r2,r17,15
   1c144:	00c00104 	movi	r3,4
   1c148:	10c00426 	beq	r2,r3,1c15c <__adddf3+0xa0>
   1c14c:	88c7883a 	add	r3,r17,r3
   1c150:	1c63803a 	cmpltu	r17,r3,r17
   1c154:	4451883a 	add	r8,r8,r17
   1c158:	1823883a 	mov	r17,r3
   1c15c:	4080202c 	andhi	r2,r8,128
   1c160:	10005926 	beq	r2,zero,1c2c8 <__adddf3+0x20c>
   1c164:	84000044 	addi	r16,r16,1
   1c168:	0081ffc4 	movi	r2,2047
   1c16c:	8080ba26 	beq	r16,r2,1c458 <__adddf3+0x39c>
   1c170:	00bfe034 	movhi	r2,65408
   1c174:	10bfffc4 	addi	r2,r2,-1
   1c178:	4090703a 	and	r8,r8,r2
   1c17c:	4004977a 	slli	r2,r8,29
   1c180:	4010927a 	slli	r8,r8,9
   1c184:	8822d0fa 	srli	r17,r17,3
   1c188:	8401ffcc 	andi	r16,r16,2047
   1c18c:	4010d33a 	srli	r8,r8,12
   1c190:	9007883a 	mov	r3,r18
   1c194:	1444b03a 	or	r2,r2,r17
   1c198:	8401ffcc 	andi	r16,r16,2047
   1c19c:	8020953a 	slli	r16,r16,20
   1c1a0:	18c03fcc 	andi	r3,r3,255
   1c1a4:	01000434 	movhi	r4,16
   1c1a8:	213fffc4 	addi	r4,r4,-1
   1c1ac:	180697fa 	slli	r3,r3,31
   1c1b0:	4110703a 	and	r8,r8,r4
   1c1b4:	4410b03a 	or	r8,r8,r16
   1c1b8:	40c6b03a 	or	r3,r8,r3
   1c1bc:	dfc00417 	ldw	ra,16(sp)
   1c1c0:	dcc00317 	ldw	r19,12(sp)
   1c1c4:	dc800217 	ldw	r18,8(sp)
   1c1c8:	dc400117 	ldw	r17,4(sp)
   1c1cc:	dc000017 	ldw	r16,0(sp)
   1c1d0:	dec00504 	addi	sp,sp,20
   1c1d4:	f800283a 	ret
   1c1d8:	0081ffc4 	movi	r2,2047
   1c1dc:	80bfd626 	beq	r16,r2,1c138 <__alt_data_end+0xfc01c138>
   1c1e0:	4a402034 	orhi	r9,r9,128
   1c1e4:	00800e04 	movi	r2,56
   1c1e8:	10c09f16 	blt	r2,r3,1c468 <__adddf3+0x3ac>
   1c1ec:	008007c4 	movi	r2,31
   1c1f0:	10c0c216 	blt	r2,r3,1c4fc <__adddf3+0x440>
   1c1f4:	00800804 	movi	r2,32
   1c1f8:	10c5c83a 	sub	r2,r2,r3
   1c1fc:	488a983a 	sll	r5,r9,r2
   1c200:	30c8d83a 	srl	r4,r6,r3
   1c204:	3084983a 	sll	r2,r6,r2
   1c208:	48c6d83a 	srl	r3,r9,r3
   1c20c:	290cb03a 	or	r6,r5,r4
   1c210:	1004c03a 	cmpne	r2,r2,zero
   1c214:	308cb03a 	or	r6,r6,r2
   1c218:	898dc83a 	sub	r6,r17,r6
   1c21c:	89a3803a 	cmpltu	r17,r17,r6
   1c220:	40d1c83a 	sub	r8,r8,r3
   1c224:	4451c83a 	sub	r8,r8,r17
   1c228:	3023883a 	mov	r17,r6
   1c22c:	4080202c 	andhi	r2,r8,128
   1c230:	10002326 	beq	r2,zero,1c2c0 <__adddf3+0x204>
   1c234:	04c02034 	movhi	r19,128
   1c238:	9cffffc4 	addi	r19,r19,-1
   1c23c:	44e6703a 	and	r19,r8,r19
   1c240:	98007626 	beq	r19,zero,1c41c <__adddf3+0x360>
   1c244:	9809883a 	mov	r4,r19
   1c248:	000dd880 	call	dd88 <__clzsi2>
   1c24c:	10fffe04 	addi	r3,r2,-8
   1c250:	010007c4 	movi	r4,31
   1c254:	20c07716 	blt	r4,r3,1c434 <__adddf3+0x378>
   1c258:	00800804 	movi	r2,32
   1c25c:	10c5c83a 	sub	r2,r2,r3
   1c260:	8884d83a 	srl	r2,r17,r2
   1c264:	98d0983a 	sll	r8,r19,r3
   1c268:	88e2983a 	sll	r17,r17,r3
   1c26c:	1204b03a 	or	r2,r2,r8
   1c270:	1c007416 	blt	r3,r16,1c444 <__adddf3+0x388>
   1c274:	1c21c83a 	sub	r16,r3,r16
   1c278:	82000044 	addi	r8,r16,1
   1c27c:	00c007c4 	movi	r3,31
   1c280:	1a009116 	blt	r3,r8,1c4c8 <__adddf3+0x40c>
   1c284:	00c00804 	movi	r3,32
   1c288:	1a07c83a 	sub	r3,r3,r8
   1c28c:	8a08d83a 	srl	r4,r17,r8
   1c290:	88e2983a 	sll	r17,r17,r3
   1c294:	10c6983a 	sll	r3,r2,r3
   1c298:	1210d83a 	srl	r8,r2,r8
   1c29c:	8804c03a 	cmpne	r2,r17,zero
   1c2a0:	1906b03a 	or	r3,r3,r4
   1c2a4:	18a2b03a 	or	r17,r3,r2
   1c2a8:	0021883a 	mov	r16,zero
   1c2ac:	003fa206 	br	1c138 <__alt_data_end+0xfc01c138>
   1c2b0:	1890b03a 	or	r8,r3,r2
   1c2b4:	40017d26 	beq	r8,zero,1c8ac <__adddf3+0x7f0>
   1c2b8:	1011883a 	mov	r8,r2
   1c2bc:	1823883a 	mov	r17,r3
   1c2c0:	888001cc 	andi	r2,r17,7
   1c2c4:	103f9e1e 	bne	r2,zero,1c140 <__alt_data_end+0xfc01c140>
   1c2c8:	4004977a 	slli	r2,r8,29
   1c2cc:	8822d0fa 	srli	r17,r17,3
   1c2d0:	4010d0fa 	srli	r8,r8,3
   1c2d4:	9007883a 	mov	r3,r18
   1c2d8:	1444b03a 	or	r2,r2,r17
   1c2dc:	0101ffc4 	movi	r4,2047
   1c2e0:	81002426 	beq	r16,r4,1c374 <__adddf3+0x2b8>
   1c2e4:	8120703a 	and	r16,r16,r4
   1c2e8:	01000434 	movhi	r4,16
   1c2ec:	213fffc4 	addi	r4,r4,-1
   1c2f0:	4110703a 	and	r8,r8,r4
   1c2f4:	003fa806 	br	1c198 <__alt_data_end+0xfc01c198>
   1c2f8:	8089c83a 	sub	r4,r16,r2
   1c2fc:	01005e0e 	bge	zero,r4,1c478 <__adddf3+0x3bc>
   1c300:	10002b26 	beq	r2,zero,1c3b0 <__adddf3+0x2f4>
   1c304:	0081ffc4 	movi	r2,2047
   1c308:	80bf8b26 	beq	r16,r2,1c138 <__alt_data_end+0xfc01c138>
   1c30c:	4a402034 	orhi	r9,r9,128
   1c310:	00800e04 	movi	r2,56
   1c314:	1100a40e 	bge	r2,r4,1c5a8 <__adddf3+0x4ec>
   1c318:	498cb03a 	or	r6,r9,r6
   1c31c:	300ac03a 	cmpne	r5,r6,zero
   1c320:	0013883a 	mov	r9,zero
   1c324:	2c4b883a 	add	r5,r5,r17
   1c328:	2c63803a 	cmpltu	r17,r5,r17
   1c32c:	4a11883a 	add	r8,r9,r8
   1c330:	8a11883a 	add	r8,r17,r8
   1c334:	2823883a 	mov	r17,r5
   1c338:	4080202c 	andhi	r2,r8,128
   1c33c:	103fe026 	beq	r2,zero,1c2c0 <__alt_data_end+0xfc01c2c0>
   1c340:	84000044 	addi	r16,r16,1
   1c344:	0081ffc4 	movi	r2,2047
   1c348:	8080d226 	beq	r16,r2,1c694 <__adddf3+0x5d8>
   1c34c:	00bfe034 	movhi	r2,65408
   1c350:	10bfffc4 	addi	r2,r2,-1
   1c354:	4090703a 	and	r8,r8,r2
   1c358:	880ad07a 	srli	r5,r17,1
   1c35c:	400897fa 	slli	r4,r8,31
   1c360:	88c0004c 	andi	r3,r17,1
   1c364:	28e2b03a 	or	r17,r5,r3
   1c368:	4010d07a 	srli	r8,r8,1
   1c36c:	2462b03a 	or	r17,r4,r17
   1c370:	003f7106 	br	1c138 <__alt_data_end+0xfc01c138>
   1c374:	4088b03a 	or	r4,r8,r2
   1c378:	20014526 	beq	r4,zero,1c890 <__adddf3+0x7d4>
   1c37c:	01000434 	movhi	r4,16
   1c380:	42000234 	orhi	r8,r8,8
   1c384:	213fffc4 	addi	r4,r4,-1
   1c388:	4110703a 	and	r8,r8,r4
   1c38c:	003f8206 	br	1c198 <__alt_data_end+0xfc01c198>
   1c390:	18ffffc4 	addi	r3,r3,-1
   1c394:	1800491e 	bne	r3,zero,1c4bc <__adddf3+0x400>
   1c398:	898bc83a 	sub	r5,r17,r6
   1c39c:	8963803a 	cmpltu	r17,r17,r5
   1c3a0:	4251c83a 	sub	r8,r8,r9
   1c3a4:	4451c83a 	sub	r8,r8,r17
   1c3a8:	2823883a 	mov	r17,r5
   1c3ac:	003f9f06 	br	1c22c <__alt_data_end+0xfc01c22c>
   1c3b0:	4984b03a 	or	r2,r9,r6
   1c3b4:	103f6026 	beq	r2,zero,1c138 <__alt_data_end+0xfc01c138>
   1c3b8:	213fffc4 	addi	r4,r4,-1
   1c3bc:	2000931e 	bne	r4,zero,1c60c <__adddf3+0x550>
   1c3c0:	898d883a 	add	r6,r17,r6
   1c3c4:	3463803a 	cmpltu	r17,r6,r17
   1c3c8:	4251883a 	add	r8,r8,r9
   1c3cc:	8a11883a 	add	r8,r17,r8
   1c3d0:	3023883a 	mov	r17,r6
   1c3d4:	003fd806 	br	1c338 <__alt_data_end+0xfc01c338>
   1c3d8:	1800541e 	bne	r3,zero,1c52c <__adddf3+0x470>
   1c3dc:	80800044 	addi	r2,r16,1
   1c3e0:	1081ffcc 	andi	r2,r2,2047
   1c3e4:	00c00044 	movi	r3,1
   1c3e8:	1880a00e 	bge	r3,r2,1c66c <__adddf3+0x5b0>
   1c3ec:	8989c83a 	sub	r4,r17,r6
   1c3f0:	8905803a 	cmpltu	r2,r17,r4
   1c3f4:	4267c83a 	sub	r19,r8,r9
   1c3f8:	98a7c83a 	sub	r19,r19,r2
   1c3fc:	9880202c 	andhi	r2,r19,128
   1c400:	10006326 	beq	r2,zero,1c590 <__adddf3+0x4d4>
   1c404:	3463c83a 	sub	r17,r6,r17
   1c408:	4a07c83a 	sub	r3,r9,r8
   1c40c:	344d803a 	cmpltu	r6,r6,r17
   1c410:	19a7c83a 	sub	r19,r3,r6
   1c414:	3825883a 	mov	r18,r7
   1c418:	983f8a1e 	bne	r19,zero,1c244 <__alt_data_end+0xfc01c244>
   1c41c:	8809883a 	mov	r4,r17
   1c420:	000dd880 	call	dd88 <__clzsi2>
   1c424:	10800804 	addi	r2,r2,32
   1c428:	10fffe04 	addi	r3,r2,-8
   1c42c:	010007c4 	movi	r4,31
   1c430:	20ff890e 	bge	r4,r3,1c258 <__alt_data_end+0xfc01c258>
   1c434:	10bff604 	addi	r2,r2,-40
   1c438:	8884983a 	sll	r2,r17,r2
   1c43c:	0023883a 	mov	r17,zero
   1c440:	1c3f8c0e 	bge	r3,r16,1c274 <__alt_data_end+0xfc01c274>
   1c444:	023fe034 	movhi	r8,65408
   1c448:	423fffc4 	addi	r8,r8,-1
   1c44c:	80e1c83a 	sub	r16,r16,r3
   1c450:	1210703a 	and	r8,r2,r8
   1c454:	003f3806 	br	1c138 <__alt_data_end+0xfc01c138>
   1c458:	9007883a 	mov	r3,r18
   1c45c:	0011883a 	mov	r8,zero
   1c460:	0005883a 	mov	r2,zero
   1c464:	003f4c06 	br	1c198 <__alt_data_end+0xfc01c198>
   1c468:	498cb03a 	or	r6,r9,r6
   1c46c:	300cc03a 	cmpne	r6,r6,zero
   1c470:	0007883a 	mov	r3,zero
   1c474:	003f6806 	br	1c218 <__alt_data_end+0xfc01c218>
   1c478:	20009c1e 	bne	r4,zero,1c6ec <__adddf3+0x630>
   1c47c:	80800044 	addi	r2,r16,1
   1c480:	1141ffcc 	andi	r5,r2,2047
   1c484:	01000044 	movi	r4,1
   1c488:	2140670e 	bge	r4,r5,1c628 <__adddf3+0x56c>
   1c48c:	0101ffc4 	movi	r4,2047
   1c490:	11007f26 	beq	r2,r4,1c690 <__adddf3+0x5d4>
   1c494:	898d883a 	add	r6,r17,r6
   1c498:	4247883a 	add	r3,r8,r9
   1c49c:	3451803a 	cmpltu	r8,r6,r17
   1c4a0:	40d1883a 	add	r8,r8,r3
   1c4a4:	402297fa 	slli	r17,r8,31
   1c4a8:	300cd07a 	srli	r6,r6,1
   1c4ac:	4010d07a 	srli	r8,r8,1
   1c4b0:	1021883a 	mov	r16,r2
   1c4b4:	89a2b03a 	or	r17,r17,r6
   1c4b8:	003f1f06 	br	1c138 <__alt_data_end+0xfc01c138>
   1c4bc:	0081ffc4 	movi	r2,2047
   1c4c0:	80bf481e 	bne	r16,r2,1c1e4 <__alt_data_end+0xfc01c1e4>
   1c4c4:	003f1c06 	br	1c138 <__alt_data_end+0xfc01c138>
   1c4c8:	843ff844 	addi	r16,r16,-31
   1c4cc:	01000804 	movi	r4,32
   1c4d0:	1406d83a 	srl	r3,r2,r16
   1c4d4:	41005026 	beq	r8,r4,1c618 <__adddf3+0x55c>
   1c4d8:	01001004 	movi	r4,64
   1c4dc:	2211c83a 	sub	r8,r4,r8
   1c4e0:	1204983a 	sll	r2,r2,r8
   1c4e4:	88a2b03a 	or	r17,r17,r2
   1c4e8:	8822c03a 	cmpne	r17,r17,zero
   1c4ec:	1c62b03a 	or	r17,r3,r17
   1c4f0:	0011883a 	mov	r8,zero
   1c4f4:	0021883a 	mov	r16,zero
   1c4f8:	003f7106 	br	1c2c0 <__alt_data_end+0xfc01c2c0>
   1c4fc:	193ff804 	addi	r4,r3,-32
   1c500:	00800804 	movi	r2,32
   1c504:	4908d83a 	srl	r4,r9,r4
   1c508:	18804526 	beq	r3,r2,1c620 <__adddf3+0x564>
   1c50c:	00801004 	movi	r2,64
   1c510:	10c5c83a 	sub	r2,r2,r3
   1c514:	4886983a 	sll	r3,r9,r2
   1c518:	198cb03a 	or	r6,r3,r6
   1c51c:	300cc03a 	cmpne	r6,r6,zero
   1c520:	218cb03a 	or	r6,r4,r6
   1c524:	0007883a 	mov	r3,zero
   1c528:	003f3b06 	br	1c218 <__alt_data_end+0xfc01c218>
   1c52c:	80002a26 	beq	r16,zero,1c5d8 <__adddf3+0x51c>
   1c530:	0101ffc4 	movi	r4,2047
   1c534:	11006826 	beq	r2,r4,1c6d8 <__adddf3+0x61c>
   1c538:	00c7c83a 	sub	r3,zero,r3
   1c53c:	42002034 	orhi	r8,r8,128
   1c540:	01000e04 	movi	r4,56
   1c544:	20c07c16 	blt	r4,r3,1c738 <__adddf3+0x67c>
   1c548:	010007c4 	movi	r4,31
   1c54c:	20c0da16 	blt	r4,r3,1c8b8 <__adddf3+0x7fc>
   1c550:	01000804 	movi	r4,32
   1c554:	20c9c83a 	sub	r4,r4,r3
   1c558:	4114983a 	sll	r10,r8,r4
   1c55c:	88cad83a 	srl	r5,r17,r3
   1c560:	8908983a 	sll	r4,r17,r4
   1c564:	40c6d83a 	srl	r3,r8,r3
   1c568:	5162b03a 	or	r17,r10,r5
   1c56c:	2008c03a 	cmpne	r4,r4,zero
   1c570:	8922b03a 	or	r17,r17,r4
   1c574:	3463c83a 	sub	r17,r6,r17
   1c578:	48c7c83a 	sub	r3,r9,r3
   1c57c:	344d803a 	cmpltu	r6,r6,r17
   1c580:	1991c83a 	sub	r8,r3,r6
   1c584:	1021883a 	mov	r16,r2
   1c588:	3825883a 	mov	r18,r7
   1c58c:	003f2706 	br	1c22c <__alt_data_end+0xfc01c22c>
   1c590:	24d0b03a 	or	r8,r4,r19
   1c594:	40001b1e 	bne	r8,zero,1c604 <__adddf3+0x548>
   1c598:	0005883a 	mov	r2,zero
   1c59c:	0007883a 	mov	r3,zero
   1c5a0:	0021883a 	mov	r16,zero
   1c5a4:	003f4d06 	br	1c2dc <__alt_data_end+0xfc01c2dc>
   1c5a8:	008007c4 	movi	r2,31
   1c5ac:	11003c16 	blt	r2,r4,1c6a0 <__adddf3+0x5e4>
   1c5b0:	00800804 	movi	r2,32
   1c5b4:	1105c83a 	sub	r2,r2,r4
   1c5b8:	488e983a 	sll	r7,r9,r2
   1c5bc:	310ad83a 	srl	r5,r6,r4
   1c5c0:	3084983a 	sll	r2,r6,r2
   1c5c4:	4912d83a 	srl	r9,r9,r4
   1c5c8:	394ab03a 	or	r5,r7,r5
   1c5cc:	1004c03a 	cmpne	r2,r2,zero
   1c5d0:	288ab03a 	or	r5,r5,r2
   1c5d4:	003f5306 	br	1c324 <__alt_data_end+0xfc01c324>
   1c5d8:	4448b03a 	or	r4,r8,r17
   1c5dc:	20003e26 	beq	r4,zero,1c6d8 <__adddf3+0x61c>
   1c5e0:	00c6303a 	nor	r3,zero,r3
   1c5e4:	18003a1e 	bne	r3,zero,1c6d0 <__adddf3+0x614>
   1c5e8:	3463c83a 	sub	r17,r6,r17
   1c5ec:	4a07c83a 	sub	r3,r9,r8
   1c5f0:	344d803a 	cmpltu	r6,r6,r17
   1c5f4:	1991c83a 	sub	r8,r3,r6
   1c5f8:	1021883a 	mov	r16,r2
   1c5fc:	3825883a 	mov	r18,r7
   1c600:	003f0a06 	br	1c22c <__alt_data_end+0xfc01c22c>
   1c604:	2023883a 	mov	r17,r4
   1c608:	003f0d06 	br	1c240 <__alt_data_end+0xfc01c240>
   1c60c:	0081ffc4 	movi	r2,2047
   1c610:	80bf3f1e 	bne	r16,r2,1c310 <__alt_data_end+0xfc01c310>
   1c614:	003ec806 	br	1c138 <__alt_data_end+0xfc01c138>
   1c618:	0005883a 	mov	r2,zero
   1c61c:	003fb106 	br	1c4e4 <__alt_data_end+0xfc01c4e4>
   1c620:	0007883a 	mov	r3,zero
   1c624:	003fbc06 	br	1c518 <__alt_data_end+0xfc01c518>
   1c628:	4444b03a 	or	r2,r8,r17
   1c62c:	8000871e 	bne	r16,zero,1c84c <__adddf3+0x790>
   1c630:	1000ba26 	beq	r2,zero,1c91c <__adddf3+0x860>
   1c634:	4984b03a 	or	r2,r9,r6
   1c638:	103ebf26 	beq	r2,zero,1c138 <__alt_data_end+0xfc01c138>
   1c63c:	8985883a 	add	r2,r17,r6
   1c640:	4247883a 	add	r3,r8,r9
   1c644:	1451803a 	cmpltu	r8,r2,r17
   1c648:	40d1883a 	add	r8,r8,r3
   1c64c:	40c0202c 	andhi	r3,r8,128
   1c650:	1023883a 	mov	r17,r2
   1c654:	183f1a26 	beq	r3,zero,1c2c0 <__alt_data_end+0xfc01c2c0>
   1c658:	00bfe034 	movhi	r2,65408
   1c65c:	10bfffc4 	addi	r2,r2,-1
   1c660:	2021883a 	mov	r16,r4
   1c664:	4090703a 	and	r8,r8,r2
   1c668:	003eb306 	br	1c138 <__alt_data_end+0xfc01c138>
   1c66c:	4444b03a 	or	r2,r8,r17
   1c670:	8000291e 	bne	r16,zero,1c718 <__adddf3+0x65c>
   1c674:	10004b1e 	bne	r2,zero,1c7a4 <__adddf3+0x6e8>
   1c678:	4990b03a 	or	r8,r9,r6
   1c67c:	40008b26 	beq	r8,zero,1c8ac <__adddf3+0x7f0>
   1c680:	4811883a 	mov	r8,r9
   1c684:	3023883a 	mov	r17,r6
   1c688:	3825883a 	mov	r18,r7
   1c68c:	003eaa06 	br	1c138 <__alt_data_end+0xfc01c138>
   1c690:	1021883a 	mov	r16,r2
   1c694:	0011883a 	mov	r8,zero
   1c698:	0005883a 	mov	r2,zero
   1c69c:	003f0f06 	br	1c2dc <__alt_data_end+0xfc01c2dc>
   1c6a0:	217ff804 	addi	r5,r4,-32
   1c6a4:	00800804 	movi	r2,32
   1c6a8:	494ad83a 	srl	r5,r9,r5
   1c6ac:	20807d26 	beq	r4,r2,1c8a4 <__adddf3+0x7e8>
   1c6b0:	00801004 	movi	r2,64
   1c6b4:	1109c83a 	sub	r4,r2,r4
   1c6b8:	4912983a 	sll	r9,r9,r4
   1c6bc:	498cb03a 	or	r6,r9,r6
   1c6c0:	300cc03a 	cmpne	r6,r6,zero
   1c6c4:	298ab03a 	or	r5,r5,r6
   1c6c8:	0013883a 	mov	r9,zero
   1c6cc:	003f1506 	br	1c324 <__alt_data_end+0xfc01c324>
   1c6d0:	0101ffc4 	movi	r4,2047
   1c6d4:	113f9a1e 	bne	r2,r4,1c540 <__alt_data_end+0xfc01c540>
   1c6d8:	4811883a 	mov	r8,r9
   1c6dc:	3023883a 	mov	r17,r6
   1c6e0:	1021883a 	mov	r16,r2
   1c6e4:	3825883a 	mov	r18,r7
   1c6e8:	003e9306 	br	1c138 <__alt_data_end+0xfc01c138>
   1c6ec:	8000161e 	bne	r16,zero,1c748 <__adddf3+0x68c>
   1c6f0:	444ab03a 	or	r5,r8,r17
   1c6f4:	28005126 	beq	r5,zero,1c83c <__adddf3+0x780>
   1c6f8:	0108303a 	nor	r4,zero,r4
   1c6fc:	20004d1e 	bne	r4,zero,1c834 <__adddf3+0x778>
   1c700:	89a3883a 	add	r17,r17,r6
   1c704:	4253883a 	add	r9,r8,r9
   1c708:	898d803a 	cmpltu	r6,r17,r6
   1c70c:	3251883a 	add	r8,r6,r9
   1c710:	1021883a 	mov	r16,r2
   1c714:	003f0806 	br	1c338 <__alt_data_end+0xfc01c338>
   1c718:	1000301e 	bne	r2,zero,1c7dc <__adddf3+0x720>
   1c71c:	4984b03a 	or	r2,r9,r6
   1c720:	10007126 	beq	r2,zero,1c8e8 <__adddf3+0x82c>
   1c724:	4811883a 	mov	r8,r9
   1c728:	3023883a 	mov	r17,r6
   1c72c:	3825883a 	mov	r18,r7
   1c730:	0401ffc4 	movi	r16,2047
   1c734:	003e8006 	br	1c138 <__alt_data_end+0xfc01c138>
   1c738:	4462b03a 	or	r17,r8,r17
   1c73c:	8822c03a 	cmpne	r17,r17,zero
   1c740:	0007883a 	mov	r3,zero
   1c744:	003f8b06 	br	1c574 <__alt_data_end+0xfc01c574>
   1c748:	0141ffc4 	movi	r5,2047
   1c74c:	11403b26 	beq	r2,r5,1c83c <__adddf3+0x780>
   1c750:	0109c83a 	sub	r4,zero,r4
   1c754:	42002034 	orhi	r8,r8,128
   1c758:	01400e04 	movi	r5,56
   1c75c:	29006716 	blt	r5,r4,1c8fc <__adddf3+0x840>
   1c760:	014007c4 	movi	r5,31
   1c764:	29007016 	blt	r5,r4,1c928 <__adddf3+0x86c>
   1c768:	01400804 	movi	r5,32
   1c76c:	290bc83a 	sub	r5,r5,r4
   1c770:	4154983a 	sll	r10,r8,r5
   1c774:	890ed83a 	srl	r7,r17,r4
   1c778:	894a983a 	sll	r5,r17,r5
   1c77c:	4108d83a 	srl	r4,r8,r4
   1c780:	51e2b03a 	or	r17,r10,r7
   1c784:	280ac03a 	cmpne	r5,r5,zero
   1c788:	8962b03a 	or	r17,r17,r5
   1c78c:	89a3883a 	add	r17,r17,r6
   1c790:	2253883a 	add	r9,r4,r9
   1c794:	898d803a 	cmpltu	r6,r17,r6
   1c798:	3251883a 	add	r8,r6,r9
   1c79c:	1021883a 	mov	r16,r2
   1c7a0:	003ee506 	br	1c338 <__alt_data_end+0xfc01c338>
   1c7a4:	4984b03a 	or	r2,r9,r6
   1c7a8:	103e6326 	beq	r2,zero,1c138 <__alt_data_end+0xfc01c138>
   1c7ac:	8987c83a 	sub	r3,r17,r6
   1c7b0:	88c9803a 	cmpltu	r4,r17,r3
   1c7b4:	4245c83a 	sub	r2,r8,r9
   1c7b8:	1105c83a 	sub	r2,r2,r4
   1c7bc:	1100202c 	andhi	r4,r2,128
   1c7c0:	203ebb26 	beq	r4,zero,1c2b0 <__alt_data_end+0xfc01c2b0>
   1c7c4:	3463c83a 	sub	r17,r6,r17
   1c7c8:	4a07c83a 	sub	r3,r9,r8
   1c7cc:	344d803a 	cmpltu	r6,r6,r17
   1c7d0:	1991c83a 	sub	r8,r3,r6
   1c7d4:	3825883a 	mov	r18,r7
   1c7d8:	003e5706 	br	1c138 <__alt_data_end+0xfc01c138>
   1c7dc:	4984b03a 	or	r2,r9,r6
   1c7e0:	10002e26 	beq	r2,zero,1c89c <__adddf3+0x7e0>
   1c7e4:	4004d0fa 	srli	r2,r8,3
   1c7e8:	8822d0fa 	srli	r17,r17,3
   1c7ec:	4010977a 	slli	r8,r8,29
   1c7f0:	10c0022c 	andhi	r3,r2,8
   1c7f4:	4462b03a 	or	r17,r8,r17
   1c7f8:	18000826 	beq	r3,zero,1c81c <__adddf3+0x760>
   1c7fc:	4808d0fa 	srli	r4,r9,3
   1c800:	20c0022c 	andhi	r3,r4,8
   1c804:	1800051e 	bne	r3,zero,1c81c <__adddf3+0x760>
   1c808:	300cd0fa 	srli	r6,r6,3
   1c80c:	4806977a 	slli	r3,r9,29
   1c810:	2005883a 	mov	r2,r4
   1c814:	3825883a 	mov	r18,r7
   1c818:	19a2b03a 	or	r17,r3,r6
   1c81c:	8810d77a 	srli	r8,r17,29
   1c820:	100490fa 	slli	r2,r2,3
   1c824:	882290fa 	slli	r17,r17,3
   1c828:	0401ffc4 	movi	r16,2047
   1c82c:	4090b03a 	or	r8,r8,r2
   1c830:	003e4106 	br	1c138 <__alt_data_end+0xfc01c138>
   1c834:	0141ffc4 	movi	r5,2047
   1c838:	117fc71e 	bne	r2,r5,1c758 <__alt_data_end+0xfc01c758>
   1c83c:	4811883a 	mov	r8,r9
   1c840:	3023883a 	mov	r17,r6
   1c844:	1021883a 	mov	r16,r2
   1c848:	003e3b06 	br	1c138 <__alt_data_end+0xfc01c138>
   1c84c:	10002f26 	beq	r2,zero,1c90c <__adddf3+0x850>
   1c850:	4984b03a 	or	r2,r9,r6
   1c854:	10001126 	beq	r2,zero,1c89c <__adddf3+0x7e0>
   1c858:	4004d0fa 	srli	r2,r8,3
   1c85c:	8822d0fa 	srli	r17,r17,3
   1c860:	4010977a 	slli	r8,r8,29
   1c864:	10c0022c 	andhi	r3,r2,8
   1c868:	4462b03a 	or	r17,r8,r17
   1c86c:	183feb26 	beq	r3,zero,1c81c <__alt_data_end+0xfc01c81c>
   1c870:	4808d0fa 	srli	r4,r9,3
   1c874:	20c0022c 	andhi	r3,r4,8
   1c878:	183fe81e 	bne	r3,zero,1c81c <__alt_data_end+0xfc01c81c>
   1c87c:	300cd0fa 	srli	r6,r6,3
   1c880:	4806977a 	slli	r3,r9,29
   1c884:	2005883a 	mov	r2,r4
   1c888:	19a2b03a 	or	r17,r3,r6
   1c88c:	003fe306 	br	1c81c <__alt_data_end+0xfc01c81c>
   1c890:	0011883a 	mov	r8,zero
   1c894:	0005883a 	mov	r2,zero
   1c898:	003e3f06 	br	1c198 <__alt_data_end+0xfc01c198>
   1c89c:	0401ffc4 	movi	r16,2047
   1c8a0:	003e2506 	br	1c138 <__alt_data_end+0xfc01c138>
   1c8a4:	0013883a 	mov	r9,zero
   1c8a8:	003f8406 	br	1c6bc <__alt_data_end+0xfc01c6bc>
   1c8ac:	0005883a 	mov	r2,zero
   1c8b0:	0007883a 	mov	r3,zero
   1c8b4:	003e8906 	br	1c2dc <__alt_data_end+0xfc01c2dc>
   1c8b8:	197ff804 	addi	r5,r3,-32
   1c8bc:	01000804 	movi	r4,32
   1c8c0:	414ad83a 	srl	r5,r8,r5
   1c8c4:	19002426 	beq	r3,r4,1c958 <__adddf3+0x89c>
   1c8c8:	01001004 	movi	r4,64
   1c8cc:	20c7c83a 	sub	r3,r4,r3
   1c8d0:	40c6983a 	sll	r3,r8,r3
   1c8d4:	1c46b03a 	or	r3,r3,r17
   1c8d8:	1806c03a 	cmpne	r3,r3,zero
   1c8dc:	28e2b03a 	or	r17,r5,r3
   1c8e0:	0007883a 	mov	r3,zero
   1c8e4:	003f2306 	br	1c574 <__alt_data_end+0xfc01c574>
   1c8e8:	0007883a 	mov	r3,zero
   1c8ec:	5811883a 	mov	r8,r11
   1c8f0:	00bfffc4 	movi	r2,-1
   1c8f4:	0401ffc4 	movi	r16,2047
   1c8f8:	003e7806 	br	1c2dc <__alt_data_end+0xfc01c2dc>
   1c8fc:	4462b03a 	or	r17,r8,r17
   1c900:	8822c03a 	cmpne	r17,r17,zero
   1c904:	0009883a 	mov	r4,zero
   1c908:	003fa006 	br	1c78c <__alt_data_end+0xfc01c78c>
   1c90c:	4811883a 	mov	r8,r9
   1c910:	3023883a 	mov	r17,r6
   1c914:	0401ffc4 	movi	r16,2047
   1c918:	003e0706 	br	1c138 <__alt_data_end+0xfc01c138>
   1c91c:	4811883a 	mov	r8,r9
   1c920:	3023883a 	mov	r17,r6
   1c924:	003e0406 	br	1c138 <__alt_data_end+0xfc01c138>
   1c928:	21fff804 	addi	r7,r4,-32
   1c92c:	01400804 	movi	r5,32
   1c930:	41ced83a 	srl	r7,r8,r7
   1c934:	21400a26 	beq	r4,r5,1c960 <__adddf3+0x8a4>
   1c938:	01401004 	movi	r5,64
   1c93c:	2909c83a 	sub	r4,r5,r4
   1c940:	4108983a 	sll	r4,r8,r4
   1c944:	2448b03a 	or	r4,r4,r17
   1c948:	2008c03a 	cmpne	r4,r4,zero
   1c94c:	3922b03a 	or	r17,r7,r4
   1c950:	0009883a 	mov	r4,zero
   1c954:	003f8d06 	br	1c78c <__alt_data_end+0xfc01c78c>
   1c958:	0007883a 	mov	r3,zero
   1c95c:	003fdd06 	br	1c8d4 <__alt_data_end+0xfc01c8d4>
   1c960:	0009883a 	mov	r4,zero
   1c964:	003ff706 	br	1c944 <__alt_data_end+0xfc01c944>

0001c968 <__divdf3>:
   1c968:	defff004 	addi	sp,sp,-64
   1c96c:	dc800815 	stw	r18,32(sp)
   1c970:	2824d53a 	srli	r18,r5,20
   1c974:	dd800c15 	stw	r22,48(sp)
   1c978:	282cd7fa 	srli	r22,r5,31
   1c97c:	dc000615 	stw	r16,24(sp)
   1c980:	04000434 	movhi	r16,16
   1c984:	843fffc4 	addi	r16,r16,-1
   1c988:	dfc00f15 	stw	ra,60(sp)
   1c98c:	df000e15 	stw	fp,56(sp)
   1c990:	ddc00d15 	stw	r23,52(sp)
   1c994:	dd400b15 	stw	r21,44(sp)
   1c998:	dd000a15 	stw	r20,40(sp)
   1c99c:	dcc00915 	stw	r19,36(sp)
   1c9a0:	dc400715 	stw	r17,28(sp)
   1c9a4:	9481ffcc 	andi	r18,r18,2047
   1c9a8:	2c20703a 	and	r16,r5,r16
   1c9ac:	b2003fcc 	andi	r8,r22,255
   1c9b0:	90006126 	beq	r18,zero,1cb38 <__divdf3+0x1d0>
   1c9b4:	0081ffc4 	movi	r2,2047
   1c9b8:	202b883a 	mov	r21,r4
   1c9bc:	90803726 	beq	r18,r2,1ca9c <__divdf3+0x134>
   1c9c0:	80800434 	orhi	r2,r16,16
   1c9c4:	100490fa 	slli	r2,r2,3
   1c9c8:	2020d77a 	srli	r16,r4,29
   1c9cc:	202a90fa 	slli	r21,r4,3
   1c9d0:	94bf0044 	addi	r18,r18,-1023
   1c9d4:	80a0b03a 	or	r16,r16,r2
   1c9d8:	0013883a 	mov	r9,zero
   1c9dc:	000b883a 	mov	r5,zero
   1c9e0:	3806d53a 	srli	r3,r7,20
   1c9e4:	382ed7fa 	srli	r23,r7,31
   1c9e8:	04400434 	movhi	r17,16
   1c9ec:	8c7fffc4 	addi	r17,r17,-1
   1c9f0:	18c1ffcc 	andi	r3,r3,2047
   1c9f4:	3029883a 	mov	r20,r6
   1c9f8:	3c62703a 	and	r17,r7,r17
   1c9fc:	bf003fcc 	andi	fp,r23,255
   1ca00:	18006e26 	beq	r3,zero,1cbbc <__divdf3+0x254>
   1ca04:	0081ffc4 	movi	r2,2047
   1ca08:	18806626 	beq	r3,r2,1cba4 <__divdf3+0x23c>
   1ca0c:	88800434 	orhi	r2,r17,16
   1ca10:	100490fa 	slli	r2,r2,3
   1ca14:	3022d77a 	srli	r17,r6,29
   1ca18:	302890fa 	slli	r20,r6,3
   1ca1c:	18ff0044 	addi	r3,r3,-1023
   1ca20:	88a2b03a 	or	r17,r17,r2
   1ca24:	000f883a 	mov	r7,zero
   1ca28:	b5e6f03a 	xor	r19,r22,r23
   1ca2c:	3a4cb03a 	or	r6,r7,r9
   1ca30:	008003c4 	movi	r2,15
   1ca34:	9809883a 	mov	r4,r19
   1ca38:	90c7c83a 	sub	r3,r18,r3
   1ca3c:	9cc03fcc 	andi	r19,r19,255
   1ca40:	11809636 	bltu	r2,r6,1cc9c <__divdf3+0x334>
   1ca44:	300c90ba 	slli	r6,r6,2
   1ca48:	008000b4 	movhi	r2,2
   1ca4c:	10b29704 	addi	r2,r2,-13732
   1ca50:	308d883a 	add	r6,r6,r2
   1ca54:	30800017 	ldw	r2,0(r6)
   1ca58:	1000683a 	jmp	r2
   1ca5c:	0001cc9c 	xori	zero,zero,1842
   1ca60:	0001cad4 	movui	zero,1835
   1ca64:	0001cc8c 	andi	zero,zero,1842
   1ca68:	0001cac8 	cmpgei	zero,zero,1835
   1ca6c:	0001cc8c 	andi	zero,zero,1842
   1ca70:	0001cc60 	cmpeqi	zero,zero,1841
   1ca74:	0001cc8c 	andi	zero,zero,1842
   1ca78:	0001cac8 	cmpgei	zero,zero,1835
   1ca7c:	0001cad4 	movui	zero,1835
   1ca80:	0001cad4 	movui	zero,1835
   1ca84:	0001cc60 	cmpeqi	zero,zero,1841
   1ca88:	0001cac8 	cmpgei	zero,zero,1835
   1ca8c:	0001cab8 	rdprs	zero,zero,1834
   1ca90:	0001cab8 	rdprs	zero,zero,1834
   1ca94:	0001cab8 	rdprs	zero,zero,1834
   1ca98:	0001d024 	muli	zero,zero,1856
   1ca9c:	2404b03a 	or	r2,r4,r16
   1caa0:	10006c1e 	bne	r2,zero,1cc54 <__divdf3+0x2ec>
   1caa4:	02400204 	movi	r9,8
   1caa8:	0021883a 	mov	r16,zero
   1caac:	002b883a 	mov	r21,zero
   1cab0:	01400084 	movi	r5,2
   1cab4:	003fca06 	br	1c9e0 <__alt_data_end+0xfc01c9e0>
   1cab8:	8023883a 	mov	r17,r16
   1cabc:	a829883a 	mov	r20,r21
   1cac0:	4039883a 	mov	fp,r8
   1cac4:	280f883a 	mov	r7,r5
   1cac8:	00800084 	movi	r2,2
   1cacc:	3881601e 	bne	r7,r2,1d050 <__divdf3+0x6e8>
   1cad0:	e027883a 	mov	r19,fp
   1cad4:	9900004c 	andi	r4,r19,1
   1cad8:	0081ffc4 	movi	r2,2047
   1cadc:	0021883a 	mov	r16,zero
   1cae0:	002b883a 	mov	r21,zero
   1cae4:	1004953a 	slli	r2,r2,20
   1cae8:	20c03fcc 	andi	r3,r4,255
   1caec:	01400434 	movhi	r5,16
   1caf0:	297fffc4 	addi	r5,r5,-1
   1caf4:	180697fa 	slli	r3,r3,31
   1caf8:	8160703a 	and	r16,r16,r5
   1cafc:	80a0b03a 	or	r16,r16,r2
   1cb00:	80c6b03a 	or	r3,r16,r3
   1cb04:	a805883a 	mov	r2,r21
   1cb08:	dfc00f17 	ldw	ra,60(sp)
   1cb0c:	df000e17 	ldw	fp,56(sp)
   1cb10:	ddc00d17 	ldw	r23,52(sp)
   1cb14:	dd800c17 	ldw	r22,48(sp)
   1cb18:	dd400b17 	ldw	r21,44(sp)
   1cb1c:	dd000a17 	ldw	r20,40(sp)
   1cb20:	dcc00917 	ldw	r19,36(sp)
   1cb24:	dc800817 	ldw	r18,32(sp)
   1cb28:	dc400717 	ldw	r17,28(sp)
   1cb2c:	dc000617 	ldw	r16,24(sp)
   1cb30:	dec01004 	addi	sp,sp,64
   1cb34:	f800283a 	ret
   1cb38:	2404b03a 	or	r2,r4,r16
   1cb3c:	2023883a 	mov	r17,r4
   1cb40:	10003f26 	beq	r2,zero,1cc40 <__divdf3+0x2d8>
   1cb44:	80015e26 	beq	r16,zero,1d0c0 <__divdf3+0x758>
   1cb48:	8009883a 	mov	r4,r16
   1cb4c:	d9800215 	stw	r6,8(sp)
   1cb50:	d9c00515 	stw	r7,20(sp)
   1cb54:	da000415 	stw	r8,16(sp)
   1cb58:	000dd880 	call	dd88 <__clzsi2>
   1cb5c:	d9800217 	ldw	r6,8(sp)
   1cb60:	d9c00517 	ldw	r7,20(sp)
   1cb64:	da000417 	ldw	r8,16(sp)
   1cb68:	113ffd44 	addi	r4,r2,-11
   1cb6c:	00c00704 	movi	r3,28
   1cb70:	19014f16 	blt	r3,r4,1d0b0 <__divdf3+0x748>
   1cb74:	00c00744 	movi	r3,29
   1cb78:	157ffe04 	addi	r21,r2,-8
   1cb7c:	1907c83a 	sub	r3,r3,r4
   1cb80:	8560983a 	sll	r16,r16,r21
   1cb84:	88c6d83a 	srl	r3,r17,r3
   1cb88:	8d6a983a 	sll	r21,r17,r21
   1cb8c:	1c20b03a 	or	r16,r3,r16
   1cb90:	1080fcc4 	addi	r2,r2,1011
   1cb94:	00a5c83a 	sub	r18,zero,r2
   1cb98:	0013883a 	mov	r9,zero
   1cb9c:	000b883a 	mov	r5,zero
   1cba0:	003f8f06 	br	1c9e0 <__alt_data_end+0xfc01c9e0>
   1cba4:	3444b03a 	or	r2,r6,r17
   1cba8:	1000231e 	bne	r2,zero,1cc38 <__divdf3+0x2d0>
   1cbac:	0023883a 	mov	r17,zero
   1cbb0:	0029883a 	mov	r20,zero
   1cbb4:	01c00084 	movi	r7,2
   1cbb8:	003f9b06 	br	1ca28 <__alt_data_end+0xfc01ca28>
   1cbbc:	3444b03a 	or	r2,r6,r17
   1cbc0:	10001926 	beq	r2,zero,1cc28 <__divdf3+0x2c0>
   1cbc4:	88014b26 	beq	r17,zero,1d0f4 <__divdf3+0x78c>
   1cbc8:	8809883a 	mov	r4,r17
   1cbcc:	d9400115 	stw	r5,4(sp)
   1cbd0:	d9800215 	stw	r6,8(sp)
   1cbd4:	da000415 	stw	r8,16(sp)
   1cbd8:	da400315 	stw	r9,12(sp)
   1cbdc:	000dd880 	call	dd88 <__clzsi2>
   1cbe0:	d9400117 	ldw	r5,4(sp)
   1cbe4:	d9800217 	ldw	r6,8(sp)
   1cbe8:	da000417 	ldw	r8,16(sp)
   1cbec:	da400317 	ldw	r9,12(sp)
   1cbf0:	113ffd44 	addi	r4,r2,-11
   1cbf4:	00c00704 	movi	r3,28
   1cbf8:	19013a16 	blt	r3,r4,1d0e4 <__divdf3+0x77c>
   1cbfc:	00c00744 	movi	r3,29
   1cc00:	153ffe04 	addi	r20,r2,-8
   1cc04:	1907c83a 	sub	r3,r3,r4
   1cc08:	8d22983a 	sll	r17,r17,r20
   1cc0c:	30c6d83a 	srl	r3,r6,r3
   1cc10:	3528983a 	sll	r20,r6,r20
   1cc14:	1c62b03a 	or	r17,r3,r17
   1cc18:	1080fcc4 	addi	r2,r2,1011
   1cc1c:	0087c83a 	sub	r3,zero,r2
   1cc20:	000f883a 	mov	r7,zero
   1cc24:	003f8006 	br	1ca28 <__alt_data_end+0xfc01ca28>
   1cc28:	0023883a 	mov	r17,zero
   1cc2c:	0029883a 	mov	r20,zero
   1cc30:	01c00044 	movi	r7,1
   1cc34:	003f7c06 	br	1ca28 <__alt_data_end+0xfc01ca28>
   1cc38:	01c000c4 	movi	r7,3
   1cc3c:	003f7a06 	br	1ca28 <__alt_data_end+0xfc01ca28>
   1cc40:	02400104 	movi	r9,4
   1cc44:	0021883a 	mov	r16,zero
   1cc48:	002b883a 	mov	r21,zero
   1cc4c:	01400044 	movi	r5,1
   1cc50:	003f6306 	br	1c9e0 <__alt_data_end+0xfc01c9e0>
   1cc54:	02400304 	movi	r9,12
   1cc58:	014000c4 	movi	r5,3
   1cc5c:	003f6006 	br	1c9e0 <__alt_data_end+0xfc01c9e0>
   1cc60:	04000434 	movhi	r16,16
   1cc64:	0009883a 	mov	r4,zero
   1cc68:	843fffc4 	addi	r16,r16,-1
   1cc6c:	057fffc4 	movi	r21,-1
   1cc70:	0081ffc4 	movi	r2,2047
   1cc74:	003f9b06 	br	1cae4 <__alt_data_end+0xfc01cae4>
   1cc78:	00c00044 	movi	r3,1
   1cc7c:	1887c83a 	sub	r3,r3,r2
   1cc80:	01000e04 	movi	r4,56
   1cc84:	20c1530e 	bge	r4,r3,1d1d4 <__divdf3+0x86c>
   1cc88:	9900004c 	andi	r4,r19,1
   1cc8c:	0005883a 	mov	r2,zero
   1cc90:	0021883a 	mov	r16,zero
   1cc94:	002b883a 	mov	r21,zero
   1cc98:	003f9206 	br	1cae4 <__alt_data_end+0xfc01cae4>
   1cc9c:	8c012e36 	bltu	r17,r16,1d158 <__divdf3+0x7f0>
   1cca0:	84412c26 	beq	r16,r17,1d154 <__divdf3+0x7ec>
   1cca4:	a82f883a 	mov	r23,r21
   1cca8:	18ffffc4 	addi	r3,r3,-1
   1ccac:	002b883a 	mov	r21,zero
   1ccb0:	a004d63a 	srli	r2,r20,24
   1ccb4:	8822923a 	slli	r17,r17,8
   1ccb8:	a028923a 	slli	r20,r20,8
   1ccbc:	8009883a 	mov	r4,r16
   1ccc0:	88acb03a 	or	r22,r17,r2
   1ccc4:	dd000015 	stw	r20,0(sp)
   1ccc8:	b028d43a 	srli	r20,r22,16
   1cccc:	d8c00215 	stw	r3,8(sp)
   1ccd0:	b4bfffcc 	andi	r18,r22,65535
   1ccd4:	a00b883a 	mov	r5,r20
   1ccd8:	000cd440 	call	cd44 <__udivsi3>
   1ccdc:	100b883a 	mov	r5,r2
   1cce0:	9009883a 	mov	r4,r18
   1cce4:	1023883a 	mov	r17,r2
   1cce8:	000ce000 	call	ce00 <__mulsi3>
   1ccec:	8009883a 	mov	r4,r16
   1ccf0:	a00b883a 	mov	r5,r20
   1ccf4:	1039883a 	mov	fp,r2
   1ccf8:	000cda80 	call	cda8 <__umodsi3>
   1ccfc:	1004943a 	slli	r2,r2,16
   1cd00:	b808d43a 	srli	r4,r23,16
   1cd04:	d8c00217 	ldw	r3,8(sp)
   1cd08:	2084b03a 	or	r2,r4,r2
   1cd0c:	1700062e 	bgeu	r2,fp,1cd28 <__divdf3+0x3c0>
   1cd10:	1585883a 	add	r2,r2,r22
   1cd14:	893fffc4 	addi	r4,r17,-1
   1cd18:	15811d36 	bltu	r2,r22,1d190 <__divdf3+0x828>
   1cd1c:	17011c2e 	bgeu	r2,fp,1d190 <__divdf3+0x828>
   1cd20:	8c7fff84 	addi	r17,r17,-2
   1cd24:	1585883a 	add	r2,r2,r22
   1cd28:	1739c83a 	sub	fp,r2,fp
   1cd2c:	a00b883a 	mov	r5,r20
   1cd30:	e009883a 	mov	r4,fp
   1cd34:	d8c00215 	stw	r3,8(sp)
   1cd38:	000cd440 	call	cd44 <__udivsi3>
   1cd3c:	100b883a 	mov	r5,r2
   1cd40:	9009883a 	mov	r4,r18
   1cd44:	1021883a 	mov	r16,r2
   1cd48:	000ce000 	call	ce00 <__mulsi3>
   1cd4c:	a00b883a 	mov	r5,r20
   1cd50:	e009883a 	mov	r4,fp
   1cd54:	d8800415 	stw	r2,16(sp)
   1cd58:	000cda80 	call	cda8 <__umodsi3>
   1cd5c:	1004943a 	slli	r2,r2,16
   1cd60:	da000417 	ldw	r8,16(sp)
   1cd64:	bdffffcc 	andi	r23,r23,65535
   1cd68:	b884b03a 	or	r2,r23,r2
   1cd6c:	d8c00217 	ldw	r3,8(sp)
   1cd70:	1200062e 	bgeu	r2,r8,1cd8c <__divdf3+0x424>
   1cd74:	1585883a 	add	r2,r2,r22
   1cd78:	813fffc4 	addi	r4,r16,-1
   1cd7c:	15810236 	bltu	r2,r22,1d188 <__divdf3+0x820>
   1cd80:	1201012e 	bgeu	r2,r8,1d188 <__divdf3+0x820>
   1cd84:	843fff84 	addi	r16,r16,-2
   1cd88:	1585883a 	add	r2,r2,r22
   1cd8c:	8822943a 	slli	r17,r17,16
   1cd90:	d9800017 	ldw	r6,0(sp)
   1cd94:	1211c83a 	sub	r8,r2,r8
   1cd98:	8c22b03a 	or	r17,r17,r16
   1cd9c:	373fffcc 	andi	fp,r6,65535
   1cda0:	8abfffcc 	andi	r10,r17,65535
   1cda4:	8820d43a 	srli	r16,r17,16
   1cda8:	5009883a 	mov	r4,r10
   1cdac:	e00b883a 	mov	r5,fp
   1cdb0:	302ed43a 	srli	r23,r6,16
   1cdb4:	d8c00215 	stw	r3,8(sp)
   1cdb8:	da000415 	stw	r8,16(sp)
   1cdbc:	da800115 	stw	r10,4(sp)
   1cdc0:	000ce000 	call	ce00 <__mulsi3>
   1cdc4:	800b883a 	mov	r5,r16
   1cdc8:	e009883a 	mov	r4,fp
   1cdcc:	d8800515 	stw	r2,20(sp)
   1cdd0:	000ce000 	call	ce00 <__mulsi3>
   1cdd4:	8009883a 	mov	r4,r16
   1cdd8:	b80b883a 	mov	r5,r23
   1cddc:	d8800315 	stw	r2,12(sp)
   1cde0:	000ce000 	call	ce00 <__mulsi3>
   1cde4:	da800117 	ldw	r10,4(sp)
   1cde8:	b80b883a 	mov	r5,r23
   1cdec:	1021883a 	mov	r16,r2
   1cdf0:	5009883a 	mov	r4,r10
   1cdf4:	000ce000 	call	ce00 <__mulsi3>
   1cdf8:	d9c00517 	ldw	r7,20(sp)
   1cdfc:	da400317 	ldw	r9,12(sp)
   1ce00:	d8c00217 	ldw	r3,8(sp)
   1ce04:	3808d43a 	srli	r4,r7,16
   1ce08:	1245883a 	add	r2,r2,r9
   1ce0c:	da000417 	ldw	r8,16(sp)
   1ce10:	2085883a 	add	r2,r4,r2
   1ce14:	1240022e 	bgeu	r2,r9,1ce20 <__divdf3+0x4b8>
   1ce18:	01000074 	movhi	r4,1
   1ce1c:	8121883a 	add	r16,r16,r4
   1ce20:	1008d43a 	srli	r4,r2,16
   1ce24:	1004943a 	slli	r2,r2,16
   1ce28:	39ffffcc 	andi	r7,r7,65535
   1ce2c:	2409883a 	add	r4,r4,r16
   1ce30:	11c5883a 	add	r2,r2,r7
   1ce34:	4100bb36 	bltu	r8,r4,1d124 <__divdf3+0x7bc>
   1ce38:	4100d726 	beq	r8,r4,1d198 <__divdf3+0x830>
   1ce3c:	4109c83a 	sub	r4,r8,r4
   1ce40:	a8a1c83a 	sub	r16,r21,r2
   1ce44:	ac2b803a 	cmpltu	r21,r21,r16
   1ce48:	256bc83a 	sub	r21,r4,r21
   1ce4c:	b540d926 	beq	r22,r21,1d1b4 <__divdf3+0x84c>
   1ce50:	a00b883a 	mov	r5,r20
   1ce54:	a809883a 	mov	r4,r21
   1ce58:	d8c00215 	stw	r3,8(sp)
   1ce5c:	000cd440 	call	cd44 <__udivsi3>
   1ce60:	100b883a 	mov	r5,r2
   1ce64:	9009883a 	mov	r4,r18
   1ce68:	d8800515 	stw	r2,20(sp)
   1ce6c:	000ce000 	call	ce00 <__mulsi3>
   1ce70:	a809883a 	mov	r4,r21
   1ce74:	a00b883a 	mov	r5,r20
   1ce78:	d8800415 	stw	r2,16(sp)
   1ce7c:	000cda80 	call	cda8 <__umodsi3>
   1ce80:	1004943a 	slli	r2,r2,16
   1ce84:	8008d43a 	srli	r4,r16,16
   1ce88:	da000417 	ldw	r8,16(sp)
   1ce8c:	d8c00217 	ldw	r3,8(sp)
   1ce90:	2084b03a 	or	r2,r4,r2
   1ce94:	d9c00517 	ldw	r7,20(sp)
   1ce98:	1200062e 	bgeu	r2,r8,1ceb4 <__divdf3+0x54c>
   1ce9c:	1585883a 	add	r2,r2,r22
   1cea0:	393fffc4 	addi	r4,r7,-1
   1cea4:	1580c536 	bltu	r2,r22,1d1bc <__divdf3+0x854>
   1cea8:	1200c42e 	bgeu	r2,r8,1d1bc <__divdf3+0x854>
   1ceac:	39ffff84 	addi	r7,r7,-2
   1ceb0:	1585883a 	add	r2,r2,r22
   1ceb4:	122bc83a 	sub	r21,r2,r8
   1ceb8:	a00b883a 	mov	r5,r20
   1cebc:	a809883a 	mov	r4,r21
   1cec0:	d8c00215 	stw	r3,8(sp)
   1cec4:	d9c00515 	stw	r7,20(sp)
   1cec8:	000cd440 	call	cd44 <__udivsi3>
   1cecc:	9009883a 	mov	r4,r18
   1ced0:	100b883a 	mov	r5,r2
   1ced4:	d8800415 	stw	r2,16(sp)
   1ced8:	000ce000 	call	ce00 <__mulsi3>
   1cedc:	a809883a 	mov	r4,r21
   1cee0:	a00b883a 	mov	r5,r20
   1cee4:	1025883a 	mov	r18,r2
   1cee8:	000cda80 	call	cda8 <__umodsi3>
   1ceec:	1004943a 	slli	r2,r2,16
   1cef0:	813fffcc 	andi	r4,r16,65535
   1cef4:	d8c00217 	ldw	r3,8(sp)
   1cef8:	20a0b03a 	or	r16,r4,r2
   1cefc:	d9c00517 	ldw	r7,20(sp)
   1cf00:	da000417 	ldw	r8,16(sp)
   1cf04:	8480062e 	bgeu	r16,r18,1cf20 <__divdf3+0x5b8>
   1cf08:	85a1883a 	add	r16,r16,r22
   1cf0c:	40bfffc4 	addi	r2,r8,-1
   1cf10:	8580ac36 	bltu	r16,r22,1d1c4 <__divdf3+0x85c>
   1cf14:	8480ab2e 	bgeu	r16,r18,1d1c4 <__divdf3+0x85c>
   1cf18:	423fff84 	addi	r8,r8,-2
   1cf1c:	85a1883a 	add	r16,r16,r22
   1cf20:	3804943a 	slli	r2,r7,16
   1cf24:	84a1c83a 	sub	r16,r16,r18
   1cf28:	e009883a 	mov	r4,fp
   1cf2c:	1228b03a 	or	r20,r2,r8
   1cf30:	a1ffffcc 	andi	r7,r20,65535
   1cf34:	a024d43a 	srli	r18,r20,16
   1cf38:	380b883a 	mov	r5,r7
   1cf3c:	d8c00215 	stw	r3,8(sp)
   1cf40:	d9c00515 	stw	r7,20(sp)
   1cf44:	000ce000 	call	ce00 <__mulsi3>
   1cf48:	900b883a 	mov	r5,r18
   1cf4c:	e009883a 	mov	r4,fp
   1cf50:	102b883a 	mov	r21,r2
   1cf54:	000ce000 	call	ce00 <__mulsi3>
   1cf58:	900b883a 	mov	r5,r18
   1cf5c:	b809883a 	mov	r4,r23
   1cf60:	1039883a 	mov	fp,r2
   1cf64:	000ce000 	call	ce00 <__mulsi3>
   1cf68:	d9c00517 	ldw	r7,20(sp)
   1cf6c:	b80b883a 	mov	r5,r23
   1cf70:	1025883a 	mov	r18,r2
   1cf74:	3809883a 	mov	r4,r7
   1cf78:	000ce000 	call	ce00 <__mulsi3>
   1cf7c:	a808d43a 	srli	r4,r21,16
   1cf80:	1705883a 	add	r2,r2,fp
   1cf84:	d8c00217 	ldw	r3,8(sp)
   1cf88:	2085883a 	add	r2,r4,r2
   1cf8c:	1700022e 	bgeu	r2,fp,1cf98 <__divdf3+0x630>
   1cf90:	01000074 	movhi	r4,1
   1cf94:	9125883a 	add	r18,r18,r4
   1cf98:	1008d43a 	srli	r4,r2,16
   1cf9c:	1004943a 	slli	r2,r2,16
   1cfa0:	ad7fffcc 	andi	r21,r21,65535
   1cfa4:	2489883a 	add	r4,r4,r18
   1cfa8:	1545883a 	add	r2,r2,r21
   1cfac:	81003836 	bltu	r16,r4,1d090 <__divdf3+0x728>
   1cfb0:	81003626 	beq	r16,r4,1d08c <__divdf3+0x724>
   1cfb4:	a5000054 	ori	r20,r20,1
   1cfb8:	1880ffc4 	addi	r2,r3,1023
   1cfbc:	00bf2e0e 	bge	zero,r2,1cc78 <__alt_data_end+0xfc01cc78>
   1cfc0:	a10001cc 	andi	r4,r20,7
   1cfc4:	20000726 	beq	r4,zero,1cfe4 <__divdf3+0x67c>
   1cfc8:	a10003cc 	andi	r4,r20,15
   1cfcc:	01400104 	movi	r5,4
   1cfd0:	21400426 	beq	r4,r5,1cfe4 <__divdf3+0x67c>
   1cfd4:	a149883a 	add	r4,r20,r5
   1cfd8:	2529803a 	cmpltu	r20,r4,r20
   1cfdc:	8d23883a 	add	r17,r17,r20
   1cfe0:	2029883a 	mov	r20,r4
   1cfe4:	8900402c 	andhi	r4,r17,256
   1cfe8:	20000426 	beq	r4,zero,1cffc <__divdf3+0x694>
   1cfec:	18810004 	addi	r2,r3,1024
   1cff0:	00ffc034 	movhi	r3,65280
   1cff4:	18ffffc4 	addi	r3,r3,-1
   1cff8:	88e2703a 	and	r17,r17,r3
   1cffc:	00c1ff84 	movi	r3,2046
   1d000:	18beb416 	blt	r3,r2,1cad4 <__alt_data_end+0xfc01cad4>
   1d004:	a028d0fa 	srli	r20,r20,3
   1d008:	882a977a 	slli	r21,r17,29
   1d00c:	8820927a 	slli	r16,r17,9
   1d010:	1081ffcc 	andi	r2,r2,2047
   1d014:	ad2ab03a 	or	r21,r21,r20
   1d018:	8020d33a 	srli	r16,r16,12
   1d01c:	9900004c 	andi	r4,r19,1
   1d020:	003eb006 	br	1cae4 <__alt_data_end+0xfc01cae4>
   1d024:	8080022c 	andhi	r2,r16,8
   1d028:	10001226 	beq	r2,zero,1d074 <__divdf3+0x70c>
   1d02c:	8880022c 	andhi	r2,r17,8
   1d030:	1000101e 	bne	r2,zero,1d074 <__divdf3+0x70c>
   1d034:	00800434 	movhi	r2,16
   1d038:	8c000234 	orhi	r16,r17,8
   1d03c:	10bfffc4 	addi	r2,r2,-1
   1d040:	b809883a 	mov	r4,r23
   1d044:	80a0703a 	and	r16,r16,r2
   1d048:	a02b883a 	mov	r21,r20
   1d04c:	003f0806 	br	1cc70 <__alt_data_end+0xfc01cc70>
   1d050:	008000c4 	movi	r2,3
   1d054:	3880b126 	beq	r7,r2,1d31c <__divdf3+0x9b4>
   1d058:	00800044 	movi	r2,1
   1d05c:	38805b1e 	bne	r7,r2,1d1cc <__divdf3+0x864>
   1d060:	e009883a 	mov	r4,fp
   1d064:	0005883a 	mov	r2,zero
   1d068:	0021883a 	mov	r16,zero
   1d06c:	002b883a 	mov	r21,zero
   1d070:	003e9c06 	br	1cae4 <__alt_data_end+0xfc01cae4>
   1d074:	00800434 	movhi	r2,16
   1d078:	84000234 	orhi	r16,r16,8
   1d07c:	10bfffc4 	addi	r2,r2,-1
   1d080:	b009883a 	mov	r4,r22
   1d084:	80a0703a 	and	r16,r16,r2
   1d088:	003ef906 	br	1cc70 <__alt_data_end+0xfc01cc70>
   1d08c:	103fca26 	beq	r2,zero,1cfb8 <__alt_data_end+0xfc01cfb8>
   1d090:	b421883a 	add	r16,r22,r16
   1d094:	a17fffc4 	addi	r5,r20,-1
   1d098:	8580422e 	bgeu	r16,r22,1d1a4 <__divdf3+0x83c>
   1d09c:	2829883a 	mov	r20,r5
   1d0a0:	813fc41e 	bne	r16,r4,1cfb4 <__alt_data_end+0xfc01cfb4>
   1d0a4:	d9800017 	ldw	r6,0(sp)
   1d0a8:	30bfc21e 	bne	r6,r2,1cfb4 <__alt_data_end+0xfc01cfb4>
   1d0ac:	003fc206 	br	1cfb8 <__alt_data_end+0xfc01cfb8>
   1d0b0:	143ff604 	addi	r16,r2,-40
   1d0b4:	8c20983a 	sll	r16,r17,r16
   1d0b8:	002b883a 	mov	r21,zero
   1d0bc:	003eb406 	br	1cb90 <__alt_data_end+0xfc01cb90>
   1d0c0:	d9800215 	stw	r6,8(sp)
   1d0c4:	d9c00515 	stw	r7,20(sp)
   1d0c8:	da000415 	stw	r8,16(sp)
   1d0cc:	000dd880 	call	dd88 <__clzsi2>
   1d0d0:	10800804 	addi	r2,r2,32
   1d0d4:	da000417 	ldw	r8,16(sp)
   1d0d8:	d9c00517 	ldw	r7,20(sp)
   1d0dc:	d9800217 	ldw	r6,8(sp)
   1d0e0:	003ea106 	br	1cb68 <__alt_data_end+0xfc01cb68>
   1d0e4:	147ff604 	addi	r17,r2,-40
   1d0e8:	3462983a 	sll	r17,r6,r17
   1d0ec:	0029883a 	mov	r20,zero
   1d0f0:	003ec906 	br	1cc18 <__alt_data_end+0xfc01cc18>
   1d0f4:	3009883a 	mov	r4,r6
   1d0f8:	d9400115 	stw	r5,4(sp)
   1d0fc:	d9800215 	stw	r6,8(sp)
   1d100:	da000415 	stw	r8,16(sp)
   1d104:	da400315 	stw	r9,12(sp)
   1d108:	000dd880 	call	dd88 <__clzsi2>
   1d10c:	10800804 	addi	r2,r2,32
   1d110:	da400317 	ldw	r9,12(sp)
   1d114:	da000417 	ldw	r8,16(sp)
   1d118:	d9800217 	ldw	r6,8(sp)
   1d11c:	d9400117 	ldw	r5,4(sp)
   1d120:	003eb306 	br	1cbf0 <__alt_data_end+0xfc01cbf0>
   1d124:	d9800017 	ldw	r6,0(sp)
   1d128:	a9ab883a 	add	r21,r21,r6
   1d12c:	a98b803a 	cmpltu	r5,r21,r6
   1d130:	2d8b883a 	add	r5,r5,r22
   1d134:	2a11883a 	add	r8,r5,r8
   1d138:	897fffc4 	addi	r5,r17,-1
   1d13c:	b2000c2e 	bgeu	r22,r8,1d170 <__divdf3+0x808>
   1d140:	41003f36 	bltu	r8,r4,1d240 <__divdf3+0x8d8>
   1d144:	22006c26 	beq	r4,r8,1d2f8 <__divdf3+0x990>
   1d148:	4109c83a 	sub	r4,r8,r4
   1d14c:	2823883a 	mov	r17,r5
   1d150:	003f3b06 	br	1ce40 <__alt_data_end+0xfc01ce40>
   1d154:	ad3ed336 	bltu	r21,r20,1cca4 <__alt_data_end+0xfc01cca4>
   1d158:	a804d07a 	srli	r2,r21,1
   1d15c:	802e97fa 	slli	r23,r16,31
   1d160:	a82a97fa 	slli	r21,r21,31
   1d164:	8020d07a 	srli	r16,r16,1
   1d168:	b8aeb03a 	or	r23,r23,r2
   1d16c:	003ed006 	br	1ccb0 <__alt_data_end+0xfc01ccb0>
   1d170:	b23ff51e 	bne	r22,r8,1d148 <__alt_data_end+0xfc01d148>
   1d174:	d9800017 	ldw	r6,0(sp)
   1d178:	a9bff12e 	bgeu	r21,r6,1d140 <__alt_data_end+0xfc01d140>
   1d17c:	b109c83a 	sub	r4,r22,r4
   1d180:	2823883a 	mov	r17,r5
   1d184:	003f2e06 	br	1ce40 <__alt_data_end+0xfc01ce40>
   1d188:	2021883a 	mov	r16,r4
   1d18c:	003eff06 	br	1cd8c <__alt_data_end+0xfc01cd8c>
   1d190:	2023883a 	mov	r17,r4
   1d194:	003ee406 	br	1cd28 <__alt_data_end+0xfc01cd28>
   1d198:	a8bfe236 	bltu	r21,r2,1d124 <__alt_data_end+0xfc01d124>
   1d19c:	0009883a 	mov	r4,zero
   1d1a0:	003f2706 	br	1ce40 <__alt_data_end+0xfc01ce40>
   1d1a4:	81002d36 	bltu	r16,r4,1d25c <__divdf3+0x8f4>
   1d1a8:	24005626 	beq	r4,r16,1d304 <__divdf3+0x99c>
   1d1ac:	2829883a 	mov	r20,r5
   1d1b0:	003f8006 	br	1cfb4 <__alt_data_end+0xfc01cfb4>
   1d1b4:	053fffc4 	movi	r20,-1
   1d1b8:	003f7f06 	br	1cfb8 <__alt_data_end+0xfc01cfb8>
   1d1bc:	200f883a 	mov	r7,r4
   1d1c0:	003f3c06 	br	1ceb4 <__alt_data_end+0xfc01ceb4>
   1d1c4:	1011883a 	mov	r8,r2
   1d1c8:	003f5506 	br	1cf20 <__alt_data_end+0xfc01cf20>
   1d1cc:	e027883a 	mov	r19,fp
   1d1d0:	003f7906 	br	1cfb8 <__alt_data_end+0xfc01cfb8>
   1d1d4:	010007c4 	movi	r4,31
   1d1d8:	20c02816 	blt	r4,r3,1d27c <__divdf3+0x914>
   1d1dc:	00800804 	movi	r2,32
   1d1e0:	10c5c83a 	sub	r2,r2,r3
   1d1e4:	888a983a 	sll	r5,r17,r2
   1d1e8:	a0c8d83a 	srl	r4,r20,r3
   1d1ec:	a084983a 	sll	r2,r20,r2
   1d1f0:	88e2d83a 	srl	r17,r17,r3
   1d1f4:	2906b03a 	or	r3,r5,r4
   1d1f8:	1004c03a 	cmpne	r2,r2,zero
   1d1fc:	1886b03a 	or	r3,r3,r2
   1d200:	188001cc 	andi	r2,r3,7
   1d204:	10000726 	beq	r2,zero,1d224 <__divdf3+0x8bc>
   1d208:	188003cc 	andi	r2,r3,15
   1d20c:	01000104 	movi	r4,4
   1d210:	11000426 	beq	r2,r4,1d224 <__divdf3+0x8bc>
   1d214:	1805883a 	mov	r2,r3
   1d218:	10c00104 	addi	r3,r2,4
   1d21c:	1885803a 	cmpltu	r2,r3,r2
   1d220:	88a3883a 	add	r17,r17,r2
   1d224:	8880202c 	andhi	r2,r17,128
   1d228:	10002926 	beq	r2,zero,1d2d0 <__divdf3+0x968>
   1d22c:	9900004c 	andi	r4,r19,1
   1d230:	00800044 	movi	r2,1
   1d234:	0021883a 	mov	r16,zero
   1d238:	002b883a 	mov	r21,zero
   1d23c:	003e2906 	br	1cae4 <__alt_data_end+0xfc01cae4>
   1d240:	d9800017 	ldw	r6,0(sp)
   1d244:	8c7fff84 	addi	r17,r17,-2
   1d248:	a9ab883a 	add	r21,r21,r6
   1d24c:	a98b803a 	cmpltu	r5,r21,r6
   1d250:	2d8b883a 	add	r5,r5,r22
   1d254:	2a11883a 	add	r8,r5,r8
   1d258:	003ef806 	br	1ce3c <__alt_data_end+0xfc01ce3c>
   1d25c:	d9800017 	ldw	r6,0(sp)
   1d260:	318f883a 	add	r7,r6,r6
   1d264:	398b803a 	cmpltu	r5,r7,r6
   1d268:	2d8d883a 	add	r6,r5,r22
   1d26c:	81a1883a 	add	r16,r16,r6
   1d270:	a17fff84 	addi	r5,r20,-2
   1d274:	d9c00015 	stw	r7,0(sp)
   1d278:	003f8806 	br	1d09c <__alt_data_end+0xfc01d09c>
   1d27c:	013ff844 	movi	r4,-31
   1d280:	2085c83a 	sub	r2,r4,r2
   1d284:	8888d83a 	srl	r4,r17,r2
   1d288:	00800804 	movi	r2,32
   1d28c:	18802126 	beq	r3,r2,1d314 <__divdf3+0x9ac>
   1d290:	04001004 	movi	r16,64
   1d294:	80c7c83a 	sub	r3,r16,r3
   1d298:	88e0983a 	sll	r16,r17,r3
   1d29c:	8504b03a 	or	r2,r16,r20
   1d2a0:	1004c03a 	cmpne	r2,r2,zero
   1d2a4:	2084b03a 	or	r2,r4,r2
   1d2a8:	144001cc 	andi	r17,r2,7
   1d2ac:	88000d1e 	bne	r17,zero,1d2e4 <__divdf3+0x97c>
   1d2b0:	0021883a 	mov	r16,zero
   1d2b4:	102ad0fa 	srli	r21,r2,3
   1d2b8:	9900004c 	andi	r4,r19,1
   1d2bc:	0005883a 	mov	r2,zero
   1d2c0:	ac6ab03a 	or	r21,r21,r17
   1d2c4:	003e0706 	br	1cae4 <__alt_data_end+0xfc01cae4>
   1d2c8:	1007883a 	mov	r3,r2
   1d2cc:	0023883a 	mov	r17,zero
   1d2d0:	8820927a 	slli	r16,r17,9
   1d2d4:	1805883a 	mov	r2,r3
   1d2d8:	8822977a 	slli	r17,r17,29
   1d2dc:	8020d33a 	srli	r16,r16,12
   1d2e0:	003ff406 	br	1d2b4 <__alt_data_end+0xfc01d2b4>
   1d2e4:	10c003cc 	andi	r3,r2,15
   1d2e8:	01000104 	movi	r4,4
   1d2ec:	193ff626 	beq	r3,r4,1d2c8 <__alt_data_end+0xfc01d2c8>
   1d2f0:	0023883a 	mov	r17,zero
   1d2f4:	003fc806 	br	1d218 <__alt_data_end+0xfc01d218>
   1d2f8:	a8bfd136 	bltu	r21,r2,1d240 <__alt_data_end+0xfc01d240>
   1d2fc:	2823883a 	mov	r17,r5
   1d300:	003fa606 	br	1d19c <__alt_data_end+0xfc01d19c>
   1d304:	d9800017 	ldw	r6,0(sp)
   1d308:	30bfd436 	bltu	r6,r2,1d25c <__alt_data_end+0xfc01d25c>
   1d30c:	2829883a 	mov	r20,r5
   1d310:	003f6406 	br	1d0a4 <__alt_data_end+0xfc01d0a4>
   1d314:	0021883a 	mov	r16,zero
   1d318:	003fe006 	br	1d29c <__alt_data_end+0xfc01d29c>
   1d31c:	00800434 	movhi	r2,16
   1d320:	8c000234 	orhi	r16,r17,8
   1d324:	10bfffc4 	addi	r2,r2,-1
   1d328:	e009883a 	mov	r4,fp
   1d32c:	80a0703a 	and	r16,r16,r2
   1d330:	a02b883a 	mov	r21,r20
   1d334:	003e4e06 	br	1cc70 <__alt_data_end+0xfc01cc70>

0001d338 <__eqdf2>:
   1d338:	2804d53a 	srli	r2,r5,20
   1d33c:	3806d53a 	srli	r3,r7,20
   1d340:	02000434 	movhi	r8,16
   1d344:	423fffc4 	addi	r8,r8,-1
   1d348:	1081ffcc 	andi	r2,r2,2047
   1d34c:	0281ffc4 	movi	r10,2047
   1d350:	2a12703a 	and	r9,r5,r8
   1d354:	18c1ffcc 	andi	r3,r3,2047
   1d358:	3a10703a 	and	r8,r7,r8
   1d35c:	280ad7fa 	srli	r5,r5,31
   1d360:	380ed7fa 	srli	r7,r7,31
   1d364:	12801026 	beq	r2,r10,1d3a8 <__eqdf2+0x70>
   1d368:	0281ffc4 	movi	r10,2047
   1d36c:	1a800a26 	beq	r3,r10,1d398 <__eqdf2+0x60>
   1d370:	10c00226 	beq	r2,r3,1d37c <__eqdf2+0x44>
   1d374:	00800044 	movi	r2,1
   1d378:	f800283a 	ret
   1d37c:	4a3ffd1e 	bne	r9,r8,1d374 <__alt_data_end+0xfc01d374>
   1d380:	21bffc1e 	bne	r4,r6,1d374 <__alt_data_end+0xfc01d374>
   1d384:	29c00c26 	beq	r5,r7,1d3b8 <__eqdf2+0x80>
   1d388:	103ffa1e 	bne	r2,zero,1d374 <__alt_data_end+0xfc01d374>
   1d38c:	2244b03a 	or	r2,r4,r9
   1d390:	1004c03a 	cmpne	r2,r2,zero
   1d394:	f800283a 	ret
   1d398:	3214b03a 	or	r10,r6,r8
   1d39c:	503ff426 	beq	r10,zero,1d370 <__alt_data_end+0xfc01d370>
   1d3a0:	00800044 	movi	r2,1
   1d3a4:	f800283a 	ret
   1d3a8:	2254b03a 	or	r10,r4,r9
   1d3ac:	503fee26 	beq	r10,zero,1d368 <__alt_data_end+0xfc01d368>
   1d3b0:	00800044 	movi	r2,1
   1d3b4:	f800283a 	ret
   1d3b8:	0005883a 	mov	r2,zero
   1d3bc:	f800283a 	ret

0001d3c0 <__gedf2>:
   1d3c0:	2804d53a 	srli	r2,r5,20
   1d3c4:	3806d53a 	srli	r3,r7,20
   1d3c8:	02000434 	movhi	r8,16
   1d3cc:	423fffc4 	addi	r8,r8,-1
   1d3d0:	1081ffcc 	andi	r2,r2,2047
   1d3d4:	0241ffc4 	movi	r9,2047
   1d3d8:	2a14703a 	and	r10,r5,r8
   1d3dc:	18c1ffcc 	andi	r3,r3,2047
   1d3e0:	3a10703a 	and	r8,r7,r8
   1d3e4:	280ad7fa 	srli	r5,r5,31
   1d3e8:	380ed7fa 	srli	r7,r7,31
   1d3ec:	12401d26 	beq	r2,r9,1d464 <__gedf2+0xa4>
   1d3f0:	0241ffc4 	movi	r9,2047
   1d3f4:	1a401226 	beq	r3,r9,1d440 <__gedf2+0x80>
   1d3f8:	1000081e 	bne	r2,zero,1d41c <__gedf2+0x5c>
   1d3fc:	2296b03a 	or	r11,r4,r10
   1d400:	5813003a 	cmpeq	r9,r11,zero
   1d404:	1800091e 	bne	r3,zero,1d42c <__gedf2+0x6c>
   1d408:	3218b03a 	or	r12,r6,r8
   1d40c:	6000071e 	bne	r12,zero,1d42c <__gedf2+0x6c>
   1d410:	0005883a 	mov	r2,zero
   1d414:	5800101e 	bne	r11,zero,1d458 <__gedf2+0x98>
   1d418:	f800283a 	ret
   1d41c:	18000c1e 	bne	r3,zero,1d450 <__gedf2+0x90>
   1d420:	3212b03a 	or	r9,r6,r8
   1d424:	48000c26 	beq	r9,zero,1d458 <__gedf2+0x98>
   1d428:	0013883a 	mov	r9,zero
   1d42c:	39c03fcc 	andi	r7,r7,255
   1d430:	48000826 	beq	r9,zero,1d454 <__gedf2+0x94>
   1d434:	38000926 	beq	r7,zero,1d45c <__gedf2+0x9c>
   1d438:	00800044 	movi	r2,1
   1d43c:	f800283a 	ret
   1d440:	3212b03a 	or	r9,r6,r8
   1d444:	483fec26 	beq	r9,zero,1d3f8 <__alt_data_end+0xfc01d3f8>
   1d448:	00bfff84 	movi	r2,-2
   1d44c:	f800283a 	ret
   1d450:	39c03fcc 	andi	r7,r7,255
   1d454:	29c00626 	beq	r5,r7,1d470 <__gedf2+0xb0>
   1d458:	283ff726 	beq	r5,zero,1d438 <__alt_data_end+0xfc01d438>
   1d45c:	00bfffc4 	movi	r2,-1
   1d460:	f800283a 	ret
   1d464:	2292b03a 	or	r9,r4,r10
   1d468:	483fe126 	beq	r9,zero,1d3f0 <__alt_data_end+0xfc01d3f0>
   1d46c:	003ff606 	br	1d448 <__alt_data_end+0xfc01d448>
   1d470:	18bff916 	blt	r3,r2,1d458 <__alt_data_end+0xfc01d458>
   1d474:	10c00316 	blt	r2,r3,1d484 <__gedf2+0xc4>
   1d478:	42bff736 	bltu	r8,r10,1d458 <__alt_data_end+0xfc01d458>
   1d47c:	52000326 	beq	r10,r8,1d48c <__gedf2+0xcc>
   1d480:	5200042e 	bgeu	r10,r8,1d494 <__gedf2+0xd4>
   1d484:	283fec1e 	bne	r5,zero,1d438 <__alt_data_end+0xfc01d438>
   1d488:	003ff406 	br	1d45c <__alt_data_end+0xfc01d45c>
   1d48c:	313ff236 	bltu	r6,r4,1d458 <__alt_data_end+0xfc01d458>
   1d490:	21bffc36 	bltu	r4,r6,1d484 <__alt_data_end+0xfc01d484>
   1d494:	0005883a 	mov	r2,zero
   1d498:	f800283a 	ret

0001d49c <__ledf2>:
   1d49c:	2804d53a 	srli	r2,r5,20
   1d4a0:	3810d53a 	srli	r8,r7,20
   1d4a4:	00c00434 	movhi	r3,16
   1d4a8:	18ffffc4 	addi	r3,r3,-1
   1d4ac:	1081ffcc 	andi	r2,r2,2047
   1d4b0:	0241ffc4 	movi	r9,2047
   1d4b4:	28d4703a 	and	r10,r5,r3
   1d4b8:	4201ffcc 	andi	r8,r8,2047
   1d4bc:	38c6703a 	and	r3,r7,r3
   1d4c0:	280ad7fa 	srli	r5,r5,31
   1d4c4:	380ed7fa 	srli	r7,r7,31
   1d4c8:	12401f26 	beq	r2,r9,1d548 <__ledf2+0xac>
   1d4cc:	0241ffc4 	movi	r9,2047
   1d4d0:	42401426 	beq	r8,r9,1d524 <__ledf2+0x88>
   1d4d4:	1000091e 	bne	r2,zero,1d4fc <__ledf2+0x60>
   1d4d8:	2296b03a 	or	r11,r4,r10
   1d4dc:	5813003a 	cmpeq	r9,r11,zero
   1d4e0:	29403fcc 	andi	r5,r5,255
   1d4e4:	40000a1e 	bne	r8,zero,1d510 <__ledf2+0x74>
   1d4e8:	30d8b03a 	or	r12,r6,r3
   1d4ec:	6000081e 	bne	r12,zero,1d510 <__ledf2+0x74>
   1d4f0:	0005883a 	mov	r2,zero
   1d4f4:	5800111e 	bne	r11,zero,1d53c <__ledf2+0xa0>
   1d4f8:	f800283a 	ret
   1d4fc:	29403fcc 	andi	r5,r5,255
   1d500:	40000c1e 	bne	r8,zero,1d534 <__ledf2+0x98>
   1d504:	30d2b03a 	or	r9,r6,r3
   1d508:	48000c26 	beq	r9,zero,1d53c <__ledf2+0xa0>
   1d50c:	0013883a 	mov	r9,zero
   1d510:	39c03fcc 	andi	r7,r7,255
   1d514:	48000826 	beq	r9,zero,1d538 <__ledf2+0x9c>
   1d518:	38001126 	beq	r7,zero,1d560 <__ledf2+0xc4>
   1d51c:	00800044 	movi	r2,1
   1d520:	f800283a 	ret
   1d524:	30d2b03a 	or	r9,r6,r3
   1d528:	483fea26 	beq	r9,zero,1d4d4 <__alt_data_end+0xfc01d4d4>
   1d52c:	00800084 	movi	r2,2
   1d530:	f800283a 	ret
   1d534:	39c03fcc 	andi	r7,r7,255
   1d538:	39400726 	beq	r7,r5,1d558 <__ledf2+0xbc>
   1d53c:	2800081e 	bne	r5,zero,1d560 <__ledf2+0xc4>
   1d540:	00800044 	movi	r2,1
   1d544:	f800283a 	ret
   1d548:	2292b03a 	or	r9,r4,r10
   1d54c:	483fdf26 	beq	r9,zero,1d4cc <__alt_data_end+0xfc01d4cc>
   1d550:	00800084 	movi	r2,2
   1d554:	f800283a 	ret
   1d558:	4080030e 	bge	r8,r2,1d568 <__ledf2+0xcc>
   1d55c:	383fef26 	beq	r7,zero,1d51c <__alt_data_end+0xfc01d51c>
   1d560:	00bfffc4 	movi	r2,-1
   1d564:	f800283a 	ret
   1d568:	123feb16 	blt	r2,r8,1d518 <__alt_data_end+0xfc01d518>
   1d56c:	1abff336 	bltu	r3,r10,1d53c <__alt_data_end+0xfc01d53c>
   1d570:	50c00326 	beq	r10,r3,1d580 <__ledf2+0xe4>
   1d574:	50c0042e 	bgeu	r10,r3,1d588 <__ledf2+0xec>
   1d578:	283fe81e 	bne	r5,zero,1d51c <__alt_data_end+0xfc01d51c>
   1d57c:	003ff806 	br	1d560 <__alt_data_end+0xfc01d560>
   1d580:	313fee36 	bltu	r6,r4,1d53c <__alt_data_end+0xfc01d53c>
   1d584:	21bffc36 	bltu	r4,r6,1d578 <__alt_data_end+0xfc01d578>
   1d588:	0005883a 	mov	r2,zero
   1d58c:	f800283a 	ret

0001d590 <__muldf3>:
   1d590:	deffee04 	addi	sp,sp,-72
   1d594:	dd000c15 	stw	r20,48(sp)
   1d598:	2828d53a 	srli	r20,r5,20
   1d59c:	ddc00f15 	stw	r23,60(sp)
   1d5a0:	282ed7fa 	srli	r23,r5,31
   1d5a4:	dc000815 	stw	r16,32(sp)
   1d5a8:	04000434 	movhi	r16,16
   1d5ac:	dcc00b15 	stw	r19,44(sp)
   1d5b0:	843fffc4 	addi	r16,r16,-1
   1d5b4:	dfc01115 	stw	ra,68(sp)
   1d5b8:	df001015 	stw	fp,64(sp)
   1d5bc:	dd800e15 	stw	r22,56(sp)
   1d5c0:	dd400d15 	stw	r21,52(sp)
   1d5c4:	dc800a15 	stw	r18,40(sp)
   1d5c8:	dc400915 	stw	r17,36(sp)
   1d5cc:	a501ffcc 	andi	r20,r20,2047
   1d5d0:	2c20703a 	and	r16,r5,r16
   1d5d4:	b827883a 	mov	r19,r23
   1d5d8:	ba403fcc 	andi	r9,r23,255
   1d5dc:	a0006026 	beq	r20,zero,1d760 <__muldf3+0x1d0>
   1d5e0:	0081ffc4 	movi	r2,2047
   1d5e4:	202d883a 	mov	r22,r4
   1d5e8:	a0803626 	beq	r20,r2,1d6c4 <__muldf3+0x134>
   1d5ec:	84000434 	orhi	r16,r16,16
   1d5f0:	200ad77a 	srli	r5,r4,29
   1d5f4:	800490fa 	slli	r2,r16,3
   1d5f8:	202c90fa 	slli	r22,r4,3
   1d5fc:	a53f0044 	addi	r20,r20,-1023
   1d600:	28a0b03a 	or	r16,r5,r2
   1d604:	002b883a 	mov	r21,zero
   1d608:	000b883a 	mov	r5,zero
   1d60c:	3804d53a 	srli	r2,r7,20
   1d610:	3838d7fa 	srli	fp,r7,31
   1d614:	04400434 	movhi	r17,16
   1d618:	8c7fffc4 	addi	r17,r17,-1
   1d61c:	1081ffcc 	andi	r2,r2,2047
   1d620:	3025883a 	mov	r18,r6
   1d624:	3c62703a 	and	r17,r7,r17
   1d628:	e2803fcc 	andi	r10,fp,255
   1d62c:	10006d26 	beq	r2,zero,1d7e4 <__muldf3+0x254>
   1d630:	00c1ffc4 	movi	r3,2047
   1d634:	10c06526 	beq	r2,r3,1d7cc <__muldf3+0x23c>
   1d638:	8c400434 	orhi	r17,r17,16
   1d63c:	300ed77a 	srli	r7,r6,29
   1d640:	880690fa 	slli	r3,r17,3
   1d644:	302490fa 	slli	r18,r6,3
   1d648:	10bf0044 	addi	r2,r2,-1023
   1d64c:	38e2b03a 	or	r17,r7,r3
   1d650:	000f883a 	mov	r7,zero
   1d654:	a087883a 	add	r3,r20,r2
   1d658:	010003c4 	movi	r4,15
   1d65c:	3d44b03a 	or	r2,r7,r21
   1d660:	e5ccf03a 	xor	r6,fp,r23
   1d664:	1a000044 	addi	r8,r3,1
   1d668:	20809b36 	bltu	r4,r2,1d8d8 <__muldf3+0x348>
   1d66c:	100490ba 	slli	r2,r2,2
   1d670:	010000b4 	movhi	r4,2
   1d674:	2135a104 	addi	r4,r4,-10620
   1d678:	1105883a 	add	r2,r2,r4
   1d67c:	10800017 	ldw	r2,0(r2)
   1d680:	1000683a 	jmp	r2
   1d684:	0001d8d8 	cmpnei	zero,zero,1891
   1d688:	0001d6e4 	muli	zero,zero,1883
   1d68c:	0001d6e4 	muli	zero,zero,1883
   1d690:	0001d6e0 	cmpeqi	zero,zero,1883
   1d694:	0001d8b4 	movhi	zero,1890
   1d698:	0001d8b4 	movhi	zero,1890
   1d69c:	0001d89c 	xori	zero,zero,1890
   1d6a0:	0001d6e0 	cmpeqi	zero,zero,1883
   1d6a4:	0001d8b4 	movhi	zero,1890
   1d6a8:	0001d89c 	xori	zero,zero,1890
   1d6ac:	0001d8b4 	movhi	zero,1890
   1d6b0:	0001d6e0 	cmpeqi	zero,zero,1883
   1d6b4:	0001d8c4 	movi	zero,1891
   1d6b8:	0001d8c4 	movi	zero,1891
   1d6bc:	0001d8c4 	movi	zero,1891
   1d6c0:	0001dc24 	muli	zero,zero,1904
   1d6c4:	2404b03a 	or	r2,r4,r16
   1d6c8:	1000711e 	bne	r2,zero,1d890 <__muldf3+0x300>
   1d6cc:	05400204 	movi	r21,8
   1d6d0:	0021883a 	mov	r16,zero
   1d6d4:	002d883a 	mov	r22,zero
   1d6d8:	01400084 	movi	r5,2
   1d6dc:	003fcb06 	br	1d60c <__alt_data_end+0xfc01d60c>
   1d6e0:	500d883a 	mov	r6,r10
   1d6e4:	00800084 	movi	r2,2
   1d6e8:	38805926 	beq	r7,r2,1d850 <__muldf3+0x2c0>
   1d6ec:	008000c4 	movi	r2,3
   1d6f0:	3881bb26 	beq	r7,r2,1dde0 <__muldf3+0x850>
   1d6f4:	00800044 	movi	r2,1
   1d6f8:	3881961e 	bne	r7,r2,1dd54 <__muldf3+0x7c4>
   1d6fc:	3027883a 	mov	r19,r6
   1d700:	0005883a 	mov	r2,zero
   1d704:	0021883a 	mov	r16,zero
   1d708:	002d883a 	mov	r22,zero
   1d70c:	1004953a 	slli	r2,r2,20
   1d710:	98c03fcc 	andi	r3,r19,255
   1d714:	04400434 	movhi	r17,16
   1d718:	8c7fffc4 	addi	r17,r17,-1
   1d71c:	180697fa 	slli	r3,r3,31
   1d720:	8460703a 	and	r16,r16,r17
   1d724:	80a0b03a 	or	r16,r16,r2
   1d728:	80c6b03a 	or	r3,r16,r3
   1d72c:	b005883a 	mov	r2,r22
   1d730:	dfc01117 	ldw	ra,68(sp)
   1d734:	df001017 	ldw	fp,64(sp)
   1d738:	ddc00f17 	ldw	r23,60(sp)
   1d73c:	dd800e17 	ldw	r22,56(sp)
   1d740:	dd400d17 	ldw	r21,52(sp)
   1d744:	dd000c17 	ldw	r20,48(sp)
   1d748:	dcc00b17 	ldw	r19,44(sp)
   1d74c:	dc800a17 	ldw	r18,40(sp)
   1d750:	dc400917 	ldw	r17,36(sp)
   1d754:	dc000817 	ldw	r16,32(sp)
   1d758:	dec01204 	addi	sp,sp,72
   1d75c:	f800283a 	ret
   1d760:	2404b03a 	or	r2,r4,r16
   1d764:	202b883a 	mov	r21,r4
   1d768:	10004426 	beq	r2,zero,1d87c <__muldf3+0x2ec>
   1d76c:	80015126 	beq	r16,zero,1dcb4 <__muldf3+0x724>
   1d770:	8009883a 	mov	r4,r16
   1d774:	d9800715 	stw	r6,28(sp)
   1d778:	d9c00215 	stw	r7,8(sp)
   1d77c:	da400415 	stw	r9,16(sp)
   1d780:	000dd880 	call	dd88 <__clzsi2>
   1d784:	d9800717 	ldw	r6,28(sp)
   1d788:	d9c00217 	ldw	r7,8(sp)
   1d78c:	da400417 	ldw	r9,16(sp)
   1d790:	113ffd44 	addi	r4,r2,-11
   1d794:	00c00704 	movi	r3,28
   1d798:	19014216 	blt	r3,r4,1dca4 <__muldf3+0x714>
   1d79c:	00c00744 	movi	r3,29
   1d7a0:	15bffe04 	addi	r22,r2,-8
   1d7a4:	1907c83a 	sub	r3,r3,r4
   1d7a8:	85a0983a 	sll	r16,r16,r22
   1d7ac:	a8c6d83a 	srl	r3,r21,r3
   1d7b0:	adac983a 	sll	r22,r21,r22
   1d7b4:	1c20b03a 	or	r16,r3,r16
   1d7b8:	1080fcc4 	addi	r2,r2,1011
   1d7bc:	00a9c83a 	sub	r20,zero,r2
   1d7c0:	002b883a 	mov	r21,zero
   1d7c4:	000b883a 	mov	r5,zero
   1d7c8:	003f9006 	br	1d60c <__alt_data_end+0xfc01d60c>
   1d7cc:	3446b03a 	or	r3,r6,r17
   1d7d0:	1800281e 	bne	r3,zero,1d874 <__muldf3+0x2e4>
   1d7d4:	0023883a 	mov	r17,zero
   1d7d8:	0025883a 	mov	r18,zero
   1d7dc:	01c00084 	movi	r7,2
   1d7e0:	003f9c06 	br	1d654 <__alt_data_end+0xfc01d654>
   1d7e4:	3446b03a 	or	r3,r6,r17
   1d7e8:	18001e26 	beq	r3,zero,1d864 <__muldf3+0x2d4>
   1d7ec:	88012126 	beq	r17,zero,1dc74 <__muldf3+0x6e4>
   1d7f0:	8809883a 	mov	r4,r17
   1d7f4:	d9400215 	stw	r5,8(sp)
   1d7f8:	d9800715 	stw	r6,28(sp)
   1d7fc:	da400415 	stw	r9,16(sp)
   1d800:	da800315 	stw	r10,12(sp)
   1d804:	000dd880 	call	dd88 <__clzsi2>
   1d808:	d9400217 	ldw	r5,8(sp)
   1d80c:	d9800717 	ldw	r6,28(sp)
   1d810:	da400417 	ldw	r9,16(sp)
   1d814:	da800317 	ldw	r10,12(sp)
   1d818:	113ffd44 	addi	r4,r2,-11
   1d81c:	00c00704 	movi	r3,28
   1d820:	19011016 	blt	r3,r4,1dc64 <__muldf3+0x6d4>
   1d824:	00c00744 	movi	r3,29
   1d828:	14bffe04 	addi	r18,r2,-8
   1d82c:	1907c83a 	sub	r3,r3,r4
   1d830:	8ca2983a 	sll	r17,r17,r18
   1d834:	30c6d83a 	srl	r3,r6,r3
   1d838:	34a4983a 	sll	r18,r6,r18
   1d83c:	1c62b03a 	or	r17,r3,r17
   1d840:	1080fcc4 	addi	r2,r2,1011
   1d844:	0085c83a 	sub	r2,zero,r2
   1d848:	000f883a 	mov	r7,zero
   1d84c:	003f8106 	br	1d654 <__alt_data_end+0xfc01d654>
   1d850:	3027883a 	mov	r19,r6
   1d854:	0081ffc4 	movi	r2,2047
   1d858:	0021883a 	mov	r16,zero
   1d85c:	002d883a 	mov	r22,zero
   1d860:	003faa06 	br	1d70c <__alt_data_end+0xfc01d70c>
   1d864:	0023883a 	mov	r17,zero
   1d868:	0025883a 	mov	r18,zero
   1d86c:	01c00044 	movi	r7,1
   1d870:	003f7806 	br	1d654 <__alt_data_end+0xfc01d654>
   1d874:	01c000c4 	movi	r7,3
   1d878:	003f7606 	br	1d654 <__alt_data_end+0xfc01d654>
   1d87c:	05400104 	movi	r21,4
   1d880:	0021883a 	mov	r16,zero
   1d884:	002d883a 	mov	r22,zero
   1d888:	01400044 	movi	r5,1
   1d88c:	003f5f06 	br	1d60c <__alt_data_end+0xfc01d60c>
   1d890:	05400304 	movi	r21,12
   1d894:	014000c4 	movi	r5,3
   1d898:	003f5c06 	br	1d60c <__alt_data_end+0xfc01d60c>
   1d89c:	04000434 	movhi	r16,16
   1d8a0:	0027883a 	mov	r19,zero
   1d8a4:	843fffc4 	addi	r16,r16,-1
   1d8a8:	05bfffc4 	movi	r22,-1
   1d8ac:	0081ffc4 	movi	r2,2047
   1d8b0:	003f9606 	br	1d70c <__alt_data_end+0xfc01d70c>
   1d8b4:	8023883a 	mov	r17,r16
   1d8b8:	b025883a 	mov	r18,r22
   1d8bc:	280f883a 	mov	r7,r5
   1d8c0:	003f8806 	br	1d6e4 <__alt_data_end+0xfc01d6e4>
   1d8c4:	8023883a 	mov	r17,r16
   1d8c8:	b025883a 	mov	r18,r22
   1d8cc:	480d883a 	mov	r6,r9
   1d8d0:	280f883a 	mov	r7,r5
   1d8d4:	003f8306 	br	1d6e4 <__alt_data_end+0xfc01d6e4>
   1d8d8:	b026d43a 	srli	r19,r22,16
   1d8dc:	902ed43a 	srli	r23,r18,16
   1d8e0:	b5bfffcc 	andi	r22,r22,65535
   1d8e4:	94bfffcc 	andi	r18,r18,65535
   1d8e8:	b00b883a 	mov	r5,r22
   1d8ec:	9009883a 	mov	r4,r18
   1d8f0:	d8c00515 	stw	r3,20(sp)
   1d8f4:	d9800715 	stw	r6,28(sp)
   1d8f8:	da000615 	stw	r8,24(sp)
   1d8fc:	000ce000 	call	ce00 <__mulsi3>
   1d900:	980b883a 	mov	r5,r19
   1d904:	9009883a 	mov	r4,r18
   1d908:	1029883a 	mov	r20,r2
   1d90c:	000ce000 	call	ce00 <__mulsi3>
   1d910:	b80b883a 	mov	r5,r23
   1d914:	9809883a 	mov	r4,r19
   1d918:	102b883a 	mov	r21,r2
   1d91c:	000ce000 	call	ce00 <__mulsi3>
   1d920:	b809883a 	mov	r4,r23
   1d924:	b00b883a 	mov	r5,r22
   1d928:	1039883a 	mov	fp,r2
   1d92c:	000ce000 	call	ce00 <__mulsi3>
   1d930:	a008d43a 	srli	r4,r20,16
   1d934:	1545883a 	add	r2,r2,r21
   1d938:	d8c00517 	ldw	r3,20(sp)
   1d93c:	2085883a 	add	r2,r4,r2
   1d940:	d9800717 	ldw	r6,28(sp)
   1d944:	da000617 	ldw	r8,24(sp)
   1d948:	1540022e 	bgeu	r2,r21,1d954 <__muldf3+0x3c4>
   1d94c:	01000074 	movhi	r4,1
   1d950:	e139883a 	add	fp,fp,r4
   1d954:	100e943a 	slli	r7,r2,16
   1d958:	1004d43a 	srli	r2,r2,16
   1d95c:	882ad43a 	srli	r21,r17,16
   1d960:	a53fffcc 	andi	r20,r20,65535
   1d964:	8c7fffcc 	andi	r17,r17,65535
   1d968:	3d29883a 	add	r20,r7,r20
   1d96c:	b00b883a 	mov	r5,r22
   1d970:	8809883a 	mov	r4,r17
   1d974:	d8c00515 	stw	r3,20(sp)
   1d978:	d9800715 	stw	r6,28(sp)
   1d97c:	da000615 	stw	r8,24(sp)
   1d980:	dd000115 	stw	r20,4(sp)
   1d984:	d8800015 	stw	r2,0(sp)
   1d988:	000ce000 	call	ce00 <__mulsi3>
   1d98c:	980b883a 	mov	r5,r19
   1d990:	8809883a 	mov	r4,r17
   1d994:	d8800215 	stw	r2,8(sp)
   1d998:	000ce000 	call	ce00 <__mulsi3>
   1d99c:	9809883a 	mov	r4,r19
   1d9a0:	a80b883a 	mov	r5,r21
   1d9a4:	1029883a 	mov	r20,r2
   1d9a8:	000ce000 	call	ce00 <__mulsi3>
   1d9ac:	b00b883a 	mov	r5,r22
   1d9b0:	a809883a 	mov	r4,r21
   1d9b4:	d8800415 	stw	r2,16(sp)
   1d9b8:	000ce000 	call	ce00 <__mulsi3>
   1d9bc:	d9c00217 	ldw	r7,8(sp)
   1d9c0:	1505883a 	add	r2,r2,r20
   1d9c4:	d8c00517 	ldw	r3,20(sp)
   1d9c8:	3826d43a 	srli	r19,r7,16
   1d9cc:	d9800717 	ldw	r6,28(sp)
   1d9d0:	da000617 	ldw	r8,24(sp)
   1d9d4:	9885883a 	add	r2,r19,r2
   1d9d8:	da400417 	ldw	r9,16(sp)
   1d9dc:	1500022e 	bgeu	r2,r20,1d9e8 <__muldf3+0x458>
   1d9e0:	01000074 	movhi	r4,1
   1d9e4:	4913883a 	add	r9,r9,r4
   1d9e8:	1028d43a 	srli	r20,r2,16
   1d9ec:	1004943a 	slli	r2,r2,16
   1d9f0:	802cd43a 	srli	r22,r16,16
   1d9f4:	843fffcc 	andi	r16,r16,65535
   1d9f8:	3cffffcc 	andi	r19,r7,65535
   1d9fc:	9009883a 	mov	r4,r18
   1da00:	800b883a 	mov	r5,r16
   1da04:	a269883a 	add	r20,r20,r9
   1da08:	d8c00515 	stw	r3,20(sp)
   1da0c:	d9800715 	stw	r6,28(sp)
   1da10:	da000615 	stw	r8,24(sp)
   1da14:	14e7883a 	add	r19,r2,r19
   1da18:	000ce000 	call	ce00 <__mulsi3>
   1da1c:	9009883a 	mov	r4,r18
   1da20:	b00b883a 	mov	r5,r22
   1da24:	d8800315 	stw	r2,12(sp)
   1da28:	000ce000 	call	ce00 <__mulsi3>
   1da2c:	b809883a 	mov	r4,r23
   1da30:	b00b883a 	mov	r5,r22
   1da34:	d8800215 	stw	r2,8(sp)
   1da38:	000ce000 	call	ce00 <__mulsi3>
   1da3c:	b80b883a 	mov	r5,r23
   1da40:	8009883a 	mov	r4,r16
   1da44:	d8800415 	stw	r2,16(sp)
   1da48:	000ce000 	call	ce00 <__mulsi3>
   1da4c:	da800317 	ldw	r10,12(sp)
   1da50:	d9c00217 	ldw	r7,8(sp)
   1da54:	d9000017 	ldw	r4,0(sp)
   1da58:	502ed43a 	srli	r23,r10,16
   1da5c:	11c5883a 	add	r2,r2,r7
   1da60:	24e5883a 	add	r18,r4,r19
   1da64:	b885883a 	add	r2,r23,r2
   1da68:	d8c00517 	ldw	r3,20(sp)
   1da6c:	d9800717 	ldw	r6,28(sp)
   1da70:	da000617 	ldw	r8,24(sp)
   1da74:	da400417 	ldw	r9,16(sp)
   1da78:	11c0022e 	bgeu	r2,r7,1da84 <__muldf3+0x4f4>
   1da7c:	01000074 	movhi	r4,1
   1da80:	4913883a 	add	r9,r9,r4
   1da84:	100ed43a 	srli	r7,r2,16
   1da88:	1004943a 	slli	r2,r2,16
   1da8c:	55ffffcc 	andi	r23,r10,65535
   1da90:	3a53883a 	add	r9,r7,r9
   1da94:	8809883a 	mov	r4,r17
   1da98:	800b883a 	mov	r5,r16
   1da9c:	d8c00515 	stw	r3,20(sp)
   1daa0:	d9800715 	stw	r6,28(sp)
   1daa4:	da000615 	stw	r8,24(sp)
   1daa8:	da400415 	stw	r9,16(sp)
   1daac:	15ef883a 	add	r23,r2,r23
   1dab0:	000ce000 	call	ce00 <__mulsi3>
   1dab4:	8809883a 	mov	r4,r17
   1dab8:	b00b883a 	mov	r5,r22
   1dabc:	d8800215 	stw	r2,8(sp)
   1dac0:	000ce000 	call	ce00 <__mulsi3>
   1dac4:	b00b883a 	mov	r5,r22
   1dac8:	a809883a 	mov	r4,r21
   1dacc:	d8800315 	stw	r2,12(sp)
   1dad0:	000ce000 	call	ce00 <__mulsi3>
   1dad4:	8009883a 	mov	r4,r16
   1dad8:	a80b883a 	mov	r5,r21
   1dadc:	1023883a 	mov	r17,r2
   1dae0:	000ce000 	call	ce00 <__mulsi3>
   1dae4:	d9c00217 	ldw	r7,8(sp)
   1dae8:	da800317 	ldw	r10,12(sp)
   1daec:	d8c00517 	ldw	r3,20(sp)
   1daf0:	3808d43a 	srli	r4,r7,16
   1daf4:	1285883a 	add	r2,r2,r10
   1daf8:	d9800717 	ldw	r6,28(sp)
   1dafc:	2085883a 	add	r2,r4,r2
   1db00:	da000617 	ldw	r8,24(sp)
   1db04:	da400417 	ldw	r9,16(sp)
   1db08:	1280022e 	bgeu	r2,r10,1db14 <__muldf3+0x584>
   1db0c:	01000074 	movhi	r4,1
   1db10:	8923883a 	add	r17,r17,r4
   1db14:	1008943a 	slli	r4,r2,16
   1db18:	39ffffcc 	andi	r7,r7,65535
   1db1c:	e4b9883a 	add	fp,fp,r18
   1db20:	21cf883a 	add	r7,r4,r7
   1db24:	e4e7803a 	cmpltu	r19,fp,r19
   1db28:	3d0f883a 	add	r7,r7,r20
   1db2c:	bf39883a 	add	fp,r23,fp
   1db30:	99c9883a 	add	r4,r19,r7
   1db34:	e5ef803a 	cmpltu	r23,fp,r23
   1db38:	490b883a 	add	r5,r9,r4
   1db3c:	1004d43a 	srli	r2,r2,16
   1db40:	b965883a 	add	r18,r23,r5
   1db44:	24c9803a 	cmpltu	r4,r4,r19
   1db48:	3d29803a 	cmpltu	r20,r7,r20
   1db4c:	a128b03a 	or	r20,r20,r4
   1db50:	95ef803a 	cmpltu	r23,r18,r23
   1db54:	2a53803a 	cmpltu	r9,r5,r9
   1db58:	a0a9883a 	add	r20,r20,r2
   1db5c:	4deeb03a 	or	r23,r9,r23
   1db60:	a5ef883a 	add	r23,r20,r23
   1db64:	bc63883a 	add	r17,r23,r17
   1db68:	e004927a 	slli	r2,fp,9
   1db6c:	d9000117 	ldw	r4,4(sp)
   1db70:	882e927a 	slli	r23,r17,9
   1db74:	9022d5fa 	srli	r17,r18,23
   1db78:	e038d5fa 	srli	fp,fp,23
   1db7c:	1104b03a 	or	r2,r2,r4
   1db80:	9024927a 	slli	r18,r18,9
   1db84:	1004c03a 	cmpne	r2,r2,zero
   1db88:	bc62b03a 	or	r17,r23,r17
   1db8c:	1738b03a 	or	fp,r2,fp
   1db90:	8880402c 	andhi	r2,r17,256
   1db94:	e4a4b03a 	or	r18,fp,r18
   1db98:	10000726 	beq	r2,zero,1dbb8 <__muldf3+0x628>
   1db9c:	9006d07a 	srli	r3,r18,1
   1dba0:	880497fa 	slli	r2,r17,31
   1dba4:	9480004c 	andi	r18,r18,1
   1dba8:	8822d07a 	srli	r17,r17,1
   1dbac:	1ca4b03a 	or	r18,r3,r18
   1dbb0:	14a4b03a 	or	r18,r2,r18
   1dbb4:	4007883a 	mov	r3,r8
   1dbb8:	1880ffc4 	addi	r2,r3,1023
   1dbbc:	0080460e 	bge	zero,r2,1dcd8 <__muldf3+0x748>
   1dbc0:	910001cc 	andi	r4,r18,7
   1dbc4:	20000726 	beq	r4,zero,1dbe4 <__muldf3+0x654>
   1dbc8:	910003cc 	andi	r4,r18,15
   1dbcc:	01400104 	movi	r5,4
   1dbd0:	21400426 	beq	r4,r5,1dbe4 <__muldf3+0x654>
   1dbd4:	9149883a 	add	r4,r18,r5
   1dbd8:	24a5803a 	cmpltu	r18,r4,r18
   1dbdc:	8ca3883a 	add	r17,r17,r18
   1dbe0:	2025883a 	mov	r18,r4
   1dbe4:	8900402c 	andhi	r4,r17,256
   1dbe8:	20000426 	beq	r4,zero,1dbfc <__muldf3+0x66c>
   1dbec:	18810004 	addi	r2,r3,1024
   1dbf0:	00ffc034 	movhi	r3,65280
   1dbf4:	18ffffc4 	addi	r3,r3,-1
   1dbf8:	88e2703a 	and	r17,r17,r3
   1dbfc:	00c1ff84 	movi	r3,2046
   1dc00:	18bf1316 	blt	r3,r2,1d850 <__alt_data_end+0xfc01d850>
   1dc04:	882c977a 	slli	r22,r17,29
   1dc08:	9024d0fa 	srli	r18,r18,3
   1dc0c:	8822927a 	slli	r17,r17,9
   1dc10:	1081ffcc 	andi	r2,r2,2047
   1dc14:	b4acb03a 	or	r22,r22,r18
   1dc18:	8820d33a 	srli	r16,r17,12
   1dc1c:	3027883a 	mov	r19,r6
   1dc20:	003eba06 	br	1d70c <__alt_data_end+0xfc01d70c>
   1dc24:	8080022c 	andhi	r2,r16,8
   1dc28:	10000926 	beq	r2,zero,1dc50 <__muldf3+0x6c0>
   1dc2c:	8880022c 	andhi	r2,r17,8
   1dc30:	1000071e 	bne	r2,zero,1dc50 <__muldf3+0x6c0>
   1dc34:	00800434 	movhi	r2,16
   1dc38:	8c000234 	orhi	r16,r17,8
   1dc3c:	10bfffc4 	addi	r2,r2,-1
   1dc40:	e027883a 	mov	r19,fp
   1dc44:	80a0703a 	and	r16,r16,r2
   1dc48:	902d883a 	mov	r22,r18
   1dc4c:	003f1706 	br	1d8ac <__alt_data_end+0xfc01d8ac>
   1dc50:	00800434 	movhi	r2,16
   1dc54:	84000234 	orhi	r16,r16,8
   1dc58:	10bfffc4 	addi	r2,r2,-1
   1dc5c:	80a0703a 	and	r16,r16,r2
   1dc60:	003f1206 	br	1d8ac <__alt_data_end+0xfc01d8ac>
   1dc64:	147ff604 	addi	r17,r2,-40
   1dc68:	3462983a 	sll	r17,r6,r17
   1dc6c:	0025883a 	mov	r18,zero
   1dc70:	003ef306 	br	1d840 <__alt_data_end+0xfc01d840>
   1dc74:	3009883a 	mov	r4,r6
   1dc78:	d9400215 	stw	r5,8(sp)
   1dc7c:	d9800715 	stw	r6,28(sp)
   1dc80:	da400415 	stw	r9,16(sp)
   1dc84:	da800315 	stw	r10,12(sp)
   1dc88:	000dd880 	call	dd88 <__clzsi2>
   1dc8c:	10800804 	addi	r2,r2,32
   1dc90:	da800317 	ldw	r10,12(sp)
   1dc94:	da400417 	ldw	r9,16(sp)
   1dc98:	d9800717 	ldw	r6,28(sp)
   1dc9c:	d9400217 	ldw	r5,8(sp)
   1dca0:	003edd06 	br	1d818 <__alt_data_end+0xfc01d818>
   1dca4:	143ff604 	addi	r16,r2,-40
   1dca8:	ac20983a 	sll	r16,r21,r16
   1dcac:	002d883a 	mov	r22,zero
   1dcb0:	003ec106 	br	1d7b8 <__alt_data_end+0xfc01d7b8>
   1dcb4:	d9800715 	stw	r6,28(sp)
   1dcb8:	d9c00215 	stw	r7,8(sp)
   1dcbc:	da400415 	stw	r9,16(sp)
   1dcc0:	000dd880 	call	dd88 <__clzsi2>
   1dcc4:	10800804 	addi	r2,r2,32
   1dcc8:	da400417 	ldw	r9,16(sp)
   1dccc:	d9c00217 	ldw	r7,8(sp)
   1dcd0:	d9800717 	ldw	r6,28(sp)
   1dcd4:	003eae06 	br	1d790 <__alt_data_end+0xfc01d790>
   1dcd8:	00c00044 	movi	r3,1
   1dcdc:	1887c83a 	sub	r3,r3,r2
   1dce0:	01000e04 	movi	r4,56
   1dce4:	20fe8516 	blt	r4,r3,1d6fc <__alt_data_end+0xfc01d6fc>
   1dce8:	010007c4 	movi	r4,31
   1dcec:	20c01b16 	blt	r4,r3,1dd5c <__muldf3+0x7cc>
   1dcf0:	00800804 	movi	r2,32
   1dcf4:	10c5c83a 	sub	r2,r2,r3
   1dcf8:	888a983a 	sll	r5,r17,r2
   1dcfc:	90c8d83a 	srl	r4,r18,r3
   1dd00:	9084983a 	sll	r2,r18,r2
   1dd04:	88e2d83a 	srl	r17,r17,r3
   1dd08:	2906b03a 	or	r3,r5,r4
   1dd0c:	1004c03a 	cmpne	r2,r2,zero
   1dd10:	1886b03a 	or	r3,r3,r2
   1dd14:	188001cc 	andi	r2,r3,7
   1dd18:	10000726 	beq	r2,zero,1dd38 <__muldf3+0x7a8>
   1dd1c:	188003cc 	andi	r2,r3,15
   1dd20:	01000104 	movi	r4,4
   1dd24:	11000426 	beq	r2,r4,1dd38 <__muldf3+0x7a8>
   1dd28:	1805883a 	mov	r2,r3
   1dd2c:	10c00104 	addi	r3,r2,4
   1dd30:	1885803a 	cmpltu	r2,r3,r2
   1dd34:	88a3883a 	add	r17,r17,r2
   1dd38:	8880202c 	andhi	r2,r17,128
   1dd3c:	10001c26 	beq	r2,zero,1ddb0 <__muldf3+0x820>
   1dd40:	3027883a 	mov	r19,r6
   1dd44:	00800044 	movi	r2,1
   1dd48:	0021883a 	mov	r16,zero
   1dd4c:	002d883a 	mov	r22,zero
   1dd50:	003e6e06 	br	1d70c <__alt_data_end+0xfc01d70c>
   1dd54:	4007883a 	mov	r3,r8
   1dd58:	003f9706 	br	1dbb8 <__alt_data_end+0xfc01dbb8>
   1dd5c:	017ff844 	movi	r5,-31
   1dd60:	2885c83a 	sub	r2,r5,r2
   1dd64:	888ad83a 	srl	r5,r17,r2
   1dd68:	00800804 	movi	r2,32
   1dd6c:	18801a26 	beq	r3,r2,1ddd8 <__muldf3+0x848>
   1dd70:	01001004 	movi	r4,64
   1dd74:	20c7c83a 	sub	r3,r4,r3
   1dd78:	88e2983a 	sll	r17,r17,r3
   1dd7c:	8ca4b03a 	or	r18,r17,r18
   1dd80:	9004c03a 	cmpne	r2,r18,zero
   1dd84:	2884b03a 	or	r2,r5,r2
   1dd88:	144001cc 	andi	r17,r2,7
   1dd8c:	88000d1e 	bne	r17,zero,1ddc4 <__muldf3+0x834>
   1dd90:	0021883a 	mov	r16,zero
   1dd94:	102cd0fa 	srli	r22,r2,3
   1dd98:	3027883a 	mov	r19,r6
   1dd9c:	0005883a 	mov	r2,zero
   1dda0:	b46cb03a 	or	r22,r22,r17
   1dda4:	003e5906 	br	1d70c <__alt_data_end+0xfc01d70c>
   1dda8:	1007883a 	mov	r3,r2
   1ddac:	0023883a 	mov	r17,zero
   1ddb0:	8820927a 	slli	r16,r17,9
   1ddb4:	1805883a 	mov	r2,r3
   1ddb8:	8822977a 	slli	r17,r17,29
   1ddbc:	8020d33a 	srli	r16,r16,12
   1ddc0:	003ff406 	br	1dd94 <__alt_data_end+0xfc01dd94>
   1ddc4:	10c003cc 	andi	r3,r2,15
   1ddc8:	01000104 	movi	r4,4
   1ddcc:	193ff626 	beq	r3,r4,1dda8 <__alt_data_end+0xfc01dda8>
   1ddd0:	0023883a 	mov	r17,zero
   1ddd4:	003fd506 	br	1dd2c <__alt_data_end+0xfc01dd2c>
   1ddd8:	0023883a 	mov	r17,zero
   1dddc:	003fe706 	br	1dd7c <__alt_data_end+0xfc01dd7c>
   1dde0:	00800434 	movhi	r2,16
   1dde4:	8c000234 	orhi	r16,r17,8
   1dde8:	10bfffc4 	addi	r2,r2,-1
   1ddec:	3027883a 	mov	r19,r6
   1ddf0:	80a0703a 	and	r16,r16,r2
   1ddf4:	902d883a 	mov	r22,r18
   1ddf8:	003eac06 	br	1d8ac <__alt_data_end+0xfc01d8ac>

0001ddfc <__subdf3>:
   1ddfc:	02000434 	movhi	r8,16
   1de00:	423fffc4 	addi	r8,r8,-1
   1de04:	defffb04 	addi	sp,sp,-20
   1de08:	2a14703a 	and	r10,r5,r8
   1de0c:	3812d53a 	srli	r9,r7,20
   1de10:	3a10703a 	and	r8,r7,r8
   1de14:	2006d77a 	srli	r3,r4,29
   1de18:	3004d77a 	srli	r2,r6,29
   1de1c:	dc000015 	stw	r16,0(sp)
   1de20:	501490fa 	slli	r10,r10,3
   1de24:	2820d53a 	srli	r16,r5,20
   1de28:	401090fa 	slli	r8,r8,3
   1de2c:	dc800215 	stw	r18,8(sp)
   1de30:	dc400115 	stw	r17,4(sp)
   1de34:	dfc00415 	stw	ra,16(sp)
   1de38:	202290fa 	slli	r17,r4,3
   1de3c:	dcc00315 	stw	r19,12(sp)
   1de40:	4a41ffcc 	andi	r9,r9,2047
   1de44:	0101ffc4 	movi	r4,2047
   1de48:	2824d7fa 	srli	r18,r5,31
   1de4c:	8401ffcc 	andi	r16,r16,2047
   1de50:	50c6b03a 	or	r3,r10,r3
   1de54:	380ed7fa 	srli	r7,r7,31
   1de58:	408ab03a 	or	r5,r8,r2
   1de5c:	300c90fa 	slli	r6,r6,3
   1de60:	49009626 	beq	r9,r4,1e0bc <__subdf3+0x2c0>
   1de64:	39c0005c 	xori	r7,r7,1
   1de68:	8245c83a 	sub	r2,r16,r9
   1de6c:	3c807426 	beq	r7,r18,1e040 <__subdf3+0x244>
   1de70:	0080af0e 	bge	zero,r2,1e130 <__subdf3+0x334>
   1de74:	48002a1e 	bne	r9,zero,1df20 <__subdf3+0x124>
   1de78:	2988b03a 	or	r4,r5,r6
   1de7c:	20009a1e 	bne	r4,zero,1e0e8 <__subdf3+0x2ec>
   1de80:	888001cc 	andi	r2,r17,7
   1de84:	10000726 	beq	r2,zero,1dea4 <__subdf3+0xa8>
   1de88:	888003cc 	andi	r2,r17,15
   1de8c:	01000104 	movi	r4,4
   1de90:	11000426 	beq	r2,r4,1dea4 <__subdf3+0xa8>
   1de94:	890b883a 	add	r5,r17,r4
   1de98:	2c63803a 	cmpltu	r17,r5,r17
   1de9c:	1c47883a 	add	r3,r3,r17
   1dea0:	2823883a 	mov	r17,r5
   1dea4:	1880202c 	andhi	r2,r3,128
   1dea8:	10005926 	beq	r2,zero,1e010 <__subdf3+0x214>
   1deac:	84000044 	addi	r16,r16,1
   1deb0:	0081ffc4 	movi	r2,2047
   1deb4:	8080be26 	beq	r16,r2,1e1b0 <__subdf3+0x3b4>
   1deb8:	017fe034 	movhi	r5,65408
   1debc:	297fffc4 	addi	r5,r5,-1
   1dec0:	1946703a 	and	r3,r3,r5
   1dec4:	1804977a 	slli	r2,r3,29
   1dec8:	1806927a 	slli	r3,r3,9
   1decc:	8822d0fa 	srli	r17,r17,3
   1ded0:	8401ffcc 	andi	r16,r16,2047
   1ded4:	180ad33a 	srli	r5,r3,12
   1ded8:	9100004c 	andi	r4,r18,1
   1dedc:	1444b03a 	or	r2,r2,r17
   1dee0:	80c1ffcc 	andi	r3,r16,2047
   1dee4:	1820953a 	slli	r16,r3,20
   1dee8:	20c03fcc 	andi	r3,r4,255
   1deec:	180897fa 	slli	r4,r3,31
   1def0:	00c00434 	movhi	r3,16
   1def4:	18ffffc4 	addi	r3,r3,-1
   1def8:	28c6703a 	and	r3,r5,r3
   1defc:	1c06b03a 	or	r3,r3,r16
   1df00:	1906b03a 	or	r3,r3,r4
   1df04:	dfc00417 	ldw	ra,16(sp)
   1df08:	dcc00317 	ldw	r19,12(sp)
   1df0c:	dc800217 	ldw	r18,8(sp)
   1df10:	dc400117 	ldw	r17,4(sp)
   1df14:	dc000017 	ldw	r16,0(sp)
   1df18:	dec00504 	addi	sp,sp,20
   1df1c:	f800283a 	ret
   1df20:	0101ffc4 	movi	r4,2047
   1df24:	813fd626 	beq	r16,r4,1de80 <__alt_data_end+0xfc01de80>
   1df28:	29402034 	orhi	r5,r5,128
   1df2c:	01000e04 	movi	r4,56
   1df30:	2080a316 	blt	r4,r2,1e1c0 <__subdf3+0x3c4>
   1df34:	010007c4 	movi	r4,31
   1df38:	2080c616 	blt	r4,r2,1e254 <__subdf3+0x458>
   1df3c:	01000804 	movi	r4,32
   1df40:	2089c83a 	sub	r4,r4,r2
   1df44:	2910983a 	sll	r8,r5,r4
   1df48:	308ed83a 	srl	r7,r6,r2
   1df4c:	3108983a 	sll	r4,r6,r4
   1df50:	2884d83a 	srl	r2,r5,r2
   1df54:	41ccb03a 	or	r6,r8,r7
   1df58:	2008c03a 	cmpne	r4,r4,zero
   1df5c:	310cb03a 	or	r6,r6,r4
   1df60:	898dc83a 	sub	r6,r17,r6
   1df64:	89a3803a 	cmpltu	r17,r17,r6
   1df68:	1887c83a 	sub	r3,r3,r2
   1df6c:	1c47c83a 	sub	r3,r3,r17
   1df70:	3023883a 	mov	r17,r6
   1df74:	1880202c 	andhi	r2,r3,128
   1df78:	10002326 	beq	r2,zero,1e008 <__subdf3+0x20c>
   1df7c:	04c02034 	movhi	r19,128
   1df80:	9cffffc4 	addi	r19,r19,-1
   1df84:	1ce6703a 	and	r19,r3,r19
   1df88:	98007a26 	beq	r19,zero,1e174 <__subdf3+0x378>
   1df8c:	9809883a 	mov	r4,r19
   1df90:	000dd880 	call	dd88 <__clzsi2>
   1df94:	113ffe04 	addi	r4,r2,-8
   1df98:	00c007c4 	movi	r3,31
   1df9c:	19007b16 	blt	r3,r4,1e18c <__subdf3+0x390>
   1dfa0:	00800804 	movi	r2,32
   1dfa4:	1105c83a 	sub	r2,r2,r4
   1dfa8:	8884d83a 	srl	r2,r17,r2
   1dfac:	9906983a 	sll	r3,r19,r4
   1dfb0:	8922983a 	sll	r17,r17,r4
   1dfb4:	10c4b03a 	or	r2,r2,r3
   1dfb8:	24007816 	blt	r4,r16,1e19c <__subdf3+0x3a0>
   1dfbc:	2421c83a 	sub	r16,r4,r16
   1dfc0:	80c00044 	addi	r3,r16,1
   1dfc4:	010007c4 	movi	r4,31
   1dfc8:	20c09516 	blt	r4,r3,1e220 <__subdf3+0x424>
   1dfcc:	01400804 	movi	r5,32
   1dfd0:	28cbc83a 	sub	r5,r5,r3
   1dfd4:	88c8d83a 	srl	r4,r17,r3
   1dfd8:	8962983a 	sll	r17,r17,r5
   1dfdc:	114a983a 	sll	r5,r2,r5
   1dfe0:	10c6d83a 	srl	r3,r2,r3
   1dfe4:	8804c03a 	cmpne	r2,r17,zero
   1dfe8:	290ab03a 	or	r5,r5,r4
   1dfec:	28a2b03a 	or	r17,r5,r2
   1dff0:	0021883a 	mov	r16,zero
   1dff4:	003fa206 	br	1de80 <__alt_data_end+0xfc01de80>
   1dff8:	2090b03a 	or	r8,r4,r2
   1dffc:	40018e26 	beq	r8,zero,1e638 <__subdf3+0x83c>
   1e000:	1007883a 	mov	r3,r2
   1e004:	2023883a 	mov	r17,r4
   1e008:	888001cc 	andi	r2,r17,7
   1e00c:	103f9e1e 	bne	r2,zero,1de88 <__alt_data_end+0xfc01de88>
   1e010:	1804977a 	slli	r2,r3,29
   1e014:	8822d0fa 	srli	r17,r17,3
   1e018:	1810d0fa 	srli	r8,r3,3
   1e01c:	9100004c 	andi	r4,r18,1
   1e020:	1444b03a 	or	r2,r2,r17
   1e024:	00c1ffc4 	movi	r3,2047
   1e028:	80c02826 	beq	r16,r3,1e0cc <__subdf3+0x2d0>
   1e02c:	01400434 	movhi	r5,16
   1e030:	297fffc4 	addi	r5,r5,-1
   1e034:	80e0703a 	and	r16,r16,r3
   1e038:	414a703a 	and	r5,r8,r5
   1e03c:	003fa806 	br	1dee0 <__alt_data_end+0xfc01dee0>
   1e040:	0080630e 	bge	zero,r2,1e1d0 <__subdf3+0x3d4>
   1e044:	48003026 	beq	r9,zero,1e108 <__subdf3+0x30c>
   1e048:	0101ffc4 	movi	r4,2047
   1e04c:	813f8c26 	beq	r16,r4,1de80 <__alt_data_end+0xfc01de80>
   1e050:	29402034 	orhi	r5,r5,128
   1e054:	01000e04 	movi	r4,56
   1e058:	2080a90e 	bge	r4,r2,1e300 <__subdf3+0x504>
   1e05c:	298cb03a 	or	r6,r5,r6
   1e060:	3012c03a 	cmpne	r9,r6,zero
   1e064:	0005883a 	mov	r2,zero
   1e068:	4c53883a 	add	r9,r9,r17
   1e06c:	4c63803a 	cmpltu	r17,r9,r17
   1e070:	10c7883a 	add	r3,r2,r3
   1e074:	88c7883a 	add	r3,r17,r3
   1e078:	4823883a 	mov	r17,r9
   1e07c:	1880202c 	andhi	r2,r3,128
   1e080:	1000d026 	beq	r2,zero,1e3c4 <__subdf3+0x5c8>
   1e084:	84000044 	addi	r16,r16,1
   1e088:	0081ffc4 	movi	r2,2047
   1e08c:	8080fe26 	beq	r16,r2,1e488 <__subdf3+0x68c>
   1e090:	00bfe034 	movhi	r2,65408
   1e094:	10bfffc4 	addi	r2,r2,-1
   1e098:	1886703a 	and	r3,r3,r2
   1e09c:	880ad07a 	srli	r5,r17,1
   1e0a0:	180497fa 	slli	r2,r3,31
   1e0a4:	8900004c 	andi	r4,r17,1
   1e0a8:	2922b03a 	or	r17,r5,r4
   1e0ac:	1806d07a 	srli	r3,r3,1
   1e0b0:	1462b03a 	or	r17,r2,r17
   1e0b4:	3825883a 	mov	r18,r7
   1e0b8:	003f7106 	br	1de80 <__alt_data_end+0xfc01de80>
   1e0bc:	2984b03a 	or	r2,r5,r6
   1e0c0:	103f6826 	beq	r2,zero,1de64 <__alt_data_end+0xfc01de64>
   1e0c4:	39c03fcc 	andi	r7,r7,255
   1e0c8:	003f6706 	br	1de68 <__alt_data_end+0xfc01de68>
   1e0cc:	4086b03a 	or	r3,r8,r2
   1e0d0:	18015226 	beq	r3,zero,1e61c <__subdf3+0x820>
   1e0d4:	00c00434 	movhi	r3,16
   1e0d8:	41400234 	orhi	r5,r8,8
   1e0dc:	18ffffc4 	addi	r3,r3,-1
   1e0e0:	28ca703a 	and	r5,r5,r3
   1e0e4:	003f7e06 	br	1dee0 <__alt_data_end+0xfc01dee0>
   1e0e8:	10bfffc4 	addi	r2,r2,-1
   1e0ec:	1000491e 	bne	r2,zero,1e214 <__subdf3+0x418>
   1e0f0:	898fc83a 	sub	r7,r17,r6
   1e0f4:	89e3803a 	cmpltu	r17,r17,r7
   1e0f8:	1947c83a 	sub	r3,r3,r5
   1e0fc:	1c47c83a 	sub	r3,r3,r17
   1e100:	3823883a 	mov	r17,r7
   1e104:	003f9b06 	br	1df74 <__alt_data_end+0xfc01df74>
   1e108:	2988b03a 	or	r4,r5,r6
   1e10c:	203f5c26 	beq	r4,zero,1de80 <__alt_data_end+0xfc01de80>
   1e110:	10bfffc4 	addi	r2,r2,-1
   1e114:	1000931e 	bne	r2,zero,1e364 <__subdf3+0x568>
   1e118:	898d883a 	add	r6,r17,r6
   1e11c:	3463803a 	cmpltu	r17,r6,r17
   1e120:	1947883a 	add	r3,r3,r5
   1e124:	88c7883a 	add	r3,r17,r3
   1e128:	3023883a 	mov	r17,r6
   1e12c:	003fd306 	br	1e07c <__alt_data_end+0xfc01e07c>
   1e130:	1000541e 	bne	r2,zero,1e284 <__subdf3+0x488>
   1e134:	80800044 	addi	r2,r16,1
   1e138:	1081ffcc 	andi	r2,r2,2047
   1e13c:	01000044 	movi	r4,1
   1e140:	2080a20e 	bge	r4,r2,1e3cc <__subdf3+0x5d0>
   1e144:	8989c83a 	sub	r4,r17,r6
   1e148:	8905803a 	cmpltu	r2,r17,r4
   1e14c:	1967c83a 	sub	r19,r3,r5
   1e150:	98a7c83a 	sub	r19,r19,r2
   1e154:	9880202c 	andhi	r2,r19,128
   1e158:	10006326 	beq	r2,zero,1e2e8 <__subdf3+0x4ec>
   1e15c:	3463c83a 	sub	r17,r6,r17
   1e160:	28c7c83a 	sub	r3,r5,r3
   1e164:	344d803a 	cmpltu	r6,r6,r17
   1e168:	19a7c83a 	sub	r19,r3,r6
   1e16c:	3825883a 	mov	r18,r7
   1e170:	983f861e 	bne	r19,zero,1df8c <__alt_data_end+0xfc01df8c>
   1e174:	8809883a 	mov	r4,r17
   1e178:	000dd880 	call	dd88 <__clzsi2>
   1e17c:	10800804 	addi	r2,r2,32
   1e180:	113ffe04 	addi	r4,r2,-8
   1e184:	00c007c4 	movi	r3,31
   1e188:	193f850e 	bge	r3,r4,1dfa0 <__alt_data_end+0xfc01dfa0>
   1e18c:	10bff604 	addi	r2,r2,-40
   1e190:	8884983a 	sll	r2,r17,r2
   1e194:	0023883a 	mov	r17,zero
   1e198:	243f880e 	bge	r4,r16,1dfbc <__alt_data_end+0xfc01dfbc>
   1e19c:	00ffe034 	movhi	r3,65408
   1e1a0:	18ffffc4 	addi	r3,r3,-1
   1e1a4:	8121c83a 	sub	r16,r16,r4
   1e1a8:	10c6703a 	and	r3,r2,r3
   1e1ac:	003f3406 	br	1de80 <__alt_data_end+0xfc01de80>
   1e1b0:	9100004c 	andi	r4,r18,1
   1e1b4:	000b883a 	mov	r5,zero
   1e1b8:	0005883a 	mov	r2,zero
   1e1bc:	003f4806 	br	1dee0 <__alt_data_end+0xfc01dee0>
   1e1c0:	298cb03a 	or	r6,r5,r6
   1e1c4:	300cc03a 	cmpne	r6,r6,zero
   1e1c8:	0005883a 	mov	r2,zero
   1e1cc:	003f6406 	br	1df60 <__alt_data_end+0xfc01df60>
   1e1d0:	10009a1e 	bne	r2,zero,1e43c <__subdf3+0x640>
   1e1d4:	82400044 	addi	r9,r16,1
   1e1d8:	4881ffcc 	andi	r2,r9,2047
   1e1dc:	02800044 	movi	r10,1
   1e1e0:	5080670e 	bge	r10,r2,1e380 <__subdf3+0x584>
   1e1e4:	0081ffc4 	movi	r2,2047
   1e1e8:	4880af26 	beq	r9,r2,1e4a8 <__subdf3+0x6ac>
   1e1ec:	898d883a 	add	r6,r17,r6
   1e1f0:	1945883a 	add	r2,r3,r5
   1e1f4:	3447803a 	cmpltu	r3,r6,r17
   1e1f8:	1887883a 	add	r3,r3,r2
   1e1fc:	182297fa 	slli	r17,r3,31
   1e200:	300cd07a 	srli	r6,r6,1
   1e204:	1806d07a 	srli	r3,r3,1
   1e208:	4821883a 	mov	r16,r9
   1e20c:	89a2b03a 	or	r17,r17,r6
   1e210:	003f1b06 	br	1de80 <__alt_data_end+0xfc01de80>
   1e214:	0101ffc4 	movi	r4,2047
   1e218:	813f441e 	bne	r16,r4,1df2c <__alt_data_end+0xfc01df2c>
   1e21c:	003f1806 	br	1de80 <__alt_data_end+0xfc01de80>
   1e220:	843ff844 	addi	r16,r16,-31
   1e224:	01400804 	movi	r5,32
   1e228:	1408d83a 	srl	r4,r2,r16
   1e22c:	19405026 	beq	r3,r5,1e370 <__subdf3+0x574>
   1e230:	01401004 	movi	r5,64
   1e234:	28c7c83a 	sub	r3,r5,r3
   1e238:	10c4983a 	sll	r2,r2,r3
   1e23c:	88a2b03a 	or	r17,r17,r2
   1e240:	8822c03a 	cmpne	r17,r17,zero
   1e244:	2462b03a 	or	r17,r4,r17
   1e248:	0007883a 	mov	r3,zero
   1e24c:	0021883a 	mov	r16,zero
   1e250:	003f6d06 	br	1e008 <__alt_data_end+0xfc01e008>
   1e254:	11fff804 	addi	r7,r2,-32
   1e258:	01000804 	movi	r4,32
   1e25c:	29ced83a 	srl	r7,r5,r7
   1e260:	11004526 	beq	r2,r4,1e378 <__subdf3+0x57c>
   1e264:	01001004 	movi	r4,64
   1e268:	2089c83a 	sub	r4,r4,r2
   1e26c:	2904983a 	sll	r2,r5,r4
   1e270:	118cb03a 	or	r6,r2,r6
   1e274:	300cc03a 	cmpne	r6,r6,zero
   1e278:	398cb03a 	or	r6,r7,r6
   1e27c:	0005883a 	mov	r2,zero
   1e280:	003f3706 	br	1df60 <__alt_data_end+0xfc01df60>
   1e284:	80002a26 	beq	r16,zero,1e330 <__subdf3+0x534>
   1e288:	0101ffc4 	movi	r4,2047
   1e28c:	49006626 	beq	r9,r4,1e428 <__subdf3+0x62c>
   1e290:	0085c83a 	sub	r2,zero,r2
   1e294:	18c02034 	orhi	r3,r3,128
   1e298:	01000e04 	movi	r4,56
   1e29c:	20807e16 	blt	r4,r2,1e498 <__subdf3+0x69c>
   1e2a0:	010007c4 	movi	r4,31
   1e2a4:	2080e716 	blt	r4,r2,1e644 <__subdf3+0x848>
   1e2a8:	01000804 	movi	r4,32
   1e2ac:	2089c83a 	sub	r4,r4,r2
   1e2b0:	1914983a 	sll	r10,r3,r4
   1e2b4:	8890d83a 	srl	r8,r17,r2
   1e2b8:	8908983a 	sll	r4,r17,r4
   1e2bc:	1884d83a 	srl	r2,r3,r2
   1e2c0:	5222b03a 	or	r17,r10,r8
   1e2c4:	2006c03a 	cmpne	r3,r4,zero
   1e2c8:	88e2b03a 	or	r17,r17,r3
   1e2cc:	3463c83a 	sub	r17,r6,r17
   1e2d0:	2885c83a 	sub	r2,r5,r2
   1e2d4:	344d803a 	cmpltu	r6,r6,r17
   1e2d8:	1187c83a 	sub	r3,r2,r6
   1e2dc:	4821883a 	mov	r16,r9
   1e2e0:	3825883a 	mov	r18,r7
   1e2e4:	003f2306 	br	1df74 <__alt_data_end+0xfc01df74>
   1e2e8:	24d0b03a 	or	r8,r4,r19
   1e2ec:	40001b1e 	bne	r8,zero,1e35c <__subdf3+0x560>
   1e2f0:	0005883a 	mov	r2,zero
   1e2f4:	0009883a 	mov	r4,zero
   1e2f8:	0021883a 	mov	r16,zero
   1e2fc:	003f4906 	br	1e024 <__alt_data_end+0xfc01e024>
   1e300:	010007c4 	movi	r4,31
   1e304:	20803a16 	blt	r4,r2,1e3f0 <__subdf3+0x5f4>
   1e308:	01000804 	movi	r4,32
   1e30c:	2089c83a 	sub	r4,r4,r2
   1e310:	2912983a 	sll	r9,r5,r4
   1e314:	3090d83a 	srl	r8,r6,r2
   1e318:	3108983a 	sll	r4,r6,r4
   1e31c:	2884d83a 	srl	r2,r5,r2
   1e320:	4a12b03a 	or	r9,r9,r8
   1e324:	2008c03a 	cmpne	r4,r4,zero
   1e328:	4912b03a 	or	r9,r9,r4
   1e32c:	003f4e06 	br	1e068 <__alt_data_end+0xfc01e068>
   1e330:	1c48b03a 	or	r4,r3,r17
   1e334:	20003c26 	beq	r4,zero,1e428 <__subdf3+0x62c>
   1e338:	0084303a 	nor	r2,zero,r2
   1e33c:	1000381e 	bne	r2,zero,1e420 <__subdf3+0x624>
   1e340:	3463c83a 	sub	r17,r6,r17
   1e344:	28c5c83a 	sub	r2,r5,r3
   1e348:	344d803a 	cmpltu	r6,r6,r17
   1e34c:	1187c83a 	sub	r3,r2,r6
   1e350:	4821883a 	mov	r16,r9
   1e354:	3825883a 	mov	r18,r7
   1e358:	003f0606 	br	1df74 <__alt_data_end+0xfc01df74>
   1e35c:	2023883a 	mov	r17,r4
   1e360:	003f0906 	br	1df88 <__alt_data_end+0xfc01df88>
   1e364:	0101ffc4 	movi	r4,2047
   1e368:	813f3a1e 	bne	r16,r4,1e054 <__alt_data_end+0xfc01e054>
   1e36c:	003ec406 	br	1de80 <__alt_data_end+0xfc01de80>
   1e370:	0005883a 	mov	r2,zero
   1e374:	003fb106 	br	1e23c <__alt_data_end+0xfc01e23c>
   1e378:	0005883a 	mov	r2,zero
   1e37c:	003fbc06 	br	1e270 <__alt_data_end+0xfc01e270>
   1e380:	1c44b03a 	or	r2,r3,r17
   1e384:	80008e1e 	bne	r16,zero,1e5c0 <__subdf3+0x7c4>
   1e388:	1000c826 	beq	r2,zero,1e6ac <__subdf3+0x8b0>
   1e38c:	2984b03a 	or	r2,r5,r6
   1e390:	103ebb26 	beq	r2,zero,1de80 <__alt_data_end+0xfc01de80>
   1e394:	8989883a 	add	r4,r17,r6
   1e398:	1945883a 	add	r2,r3,r5
   1e39c:	2447803a 	cmpltu	r3,r4,r17
   1e3a0:	1887883a 	add	r3,r3,r2
   1e3a4:	1880202c 	andhi	r2,r3,128
   1e3a8:	2023883a 	mov	r17,r4
   1e3ac:	103f1626 	beq	r2,zero,1e008 <__alt_data_end+0xfc01e008>
   1e3b0:	00bfe034 	movhi	r2,65408
   1e3b4:	10bfffc4 	addi	r2,r2,-1
   1e3b8:	5021883a 	mov	r16,r10
   1e3bc:	1886703a 	and	r3,r3,r2
   1e3c0:	003eaf06 	br	1de80 <__alt_data_end+0xfc01de80>
   1e3c4:	3825883a 	mov	r18,r7
   1e3c8:	003f0f06 	br	1e008 <__alt_data_end+0xfc01e008>
   1e3cc:	1c44b03a 	or	r2,r3,r17
   1e3d0:	8000251e 	bne	r16,zero,1e468 <__subdf3+0x66c>
   1e3d4:	1000661e 	bne	r2,zero,1e570 <__subdf3+0x774>
   1e3d8:	2990b03a 	or	r8,r5,r6
   1e3dc:	40009626 	beq	r8,zero,1e638 <__subdf3+0x83c>
   1e3e0:	2807883a 	mov	r3,r5
   1e3e4:	3023883a 	mov	r17,r6
   1e3e8:	3825883a 	mov	r18,r7
   1e3ec:	003ea406 	br	1de80 <__alt_data_end+0xfc01de80>
   1e3f0:	127ff804 	addi	r9,r2,-32
   1e3f4:	01000804 	movi	r4,32
   1e3f8:	2a52d83a 	srl	r9,r5,r9
   1e3fc:	11008c26 	beq	r2,r4,1e630 <__subdf3+0x834>
   1e400:	01001004 	movi	r4,64
   1e404:	2085c83a 	sub	r2,r4,r2
   1e408:	2884983a 	sll	r2,r5,r2
   1e40c:	118cb03a 	or	r6,r2,r6
   1e410:	300cc03a 	cmpne	r6,r6,zero
   1e414:	4992b03a 	or	r9,r9,r6
   1e418:	0005883a 	mov	r2,zero
   1e41c:	003f1206 	br	1e068 <__alt_data_end+0xfc01e068>
   1e420:	0101ffc4 	movi	r4,2047
   1e424:	493f9c1e 	bne	r9,r4,1e298 <__alt_data_end+0xfc01e298>
   1e428:	2807883a 	mov	r3,r5
   1e42c:	3023883a 	mov	r17,r6
   1e430:	4821883a 	mov	r16,r9
   1e434:	3825883a 	mov	r18,r7
   1e438:	003e9106 	br	1de80 <__alt_data_end+0xfc01de80>
   1e43c:	80001f1e 	bne	r16,zero,1e4bc <__subdf3+0x6c0>
   1e440:	1c48b03a 	or	r4,r3,r17
   1e444:	20005a26 	beq	r4,zero,1e5b0 <__subdf3+0x7b4>
   1e448:	0084303a 	nor	r2,zero,r2
   1e44c:	1000561e 	bne	r2,zero,1e5a8 <__subdf3+0x7ac>
   1e450:	89a3883a 	add	r17,r17,r6
   1e454:	1945883a 	add	r2,r3,r5
   1e458:	898d803a 	cmpltu	r6,r17,r6
   1e45c:	3087883a 	add	r3,r6,r2
   1e460:	4821883a 	mov	r16,r9
   1e464:	003f0506 	br	1e07c <__alt_data_end+0xfc01e07c>
   1e468:	10002b1e 	bne	r2,zero,1e518 <__subdf3+0x71c>
   1e46c:	2984b03a 	or	r2,r5,r6
   1e470:	10008026 	beq	r2,zero,1e674 <__subdf3+0x878>
   1e474:	2807883a 	mov	r3,r5
   1e478:	3023883a 	mov	r17,r6
   1e47c:	3825883a 	mov	r18,r7
   1e480:	0401ffc4 	movi	r16,2047
   1e484:	003e7e06 	br	1de80 <__alt_data_end+0xfc01de80>
   1e488:	3809883a 	mov	r4,r7
   1e48c:	0011883a 	mov	r8,zero
   1e490:	0005883a 	mov	r2,zero
   1e494:	003ee306 	br	1e024 <__alt_data_end+0xfc01e024>
   1e498:	1c62b03a 	or	r17,r3,r17
   1e49c:	8822c03a 	cmpne	r17,r17,zero
   1e4a0:	0005883a 	mov	r2,zero
   1e4a4:	003f8906 	br	1e2cc <__alt_data_end+0xfc01e2cc>
   1e4a8:	3809883a 	mov	r4,r7
   1e4ac:	4821883a 	mov	r16,r9
   1e4b0:	0011883a 	mov	r8,zero
   1e4b4:	0005883a 	mov	r2,zero
   1e4b8:	003eda06 	br	1e024 <__alt_data_end+0xfc01e024>
   1e4bc:	0101ffc4 	movi	r4,2047
   1e4c0:	49003b26 	beq	r9,r4,1e5b0 <__subdf3+0x7b4>
   1e4c4:	0085c83a 	sub	r2,zero,r2
   1e4c8:	18c02034 	orhi	r3,r3,128
   1e4cc:	01000e04 	movi	r4,56
   1e4d0:	20806e16 	blt	r4,r2,1e68c <__subdf3+0x890>
   1e4d4:	010007c4 	movi	r4,31
   1e4d8:	20807716 	blt	r4,r2,1e6b8 <__subdf3+0x8bc>
   1e4dc:	01000804 	movi	r4,32
   1e4e0:	2089c83a 	sub	r4,r4,r2
   1e4e4:	1914983a 	sll	r10,r3,r4
   1e4e8:	8890d83a 	srl	r8,r17,r2
   1e4ec:	8908983a 	sll	r4,r17,r4
   1e4f0:	1884d83a 	srl	r2,r3,r2
   1e4f4:	5222b03a 	or	r17,r10,r8
   1e4f8:	2006c03a 	cmpne	r3,r4,zero
   1e4fc:	88e2b03a 	or	r17,r17,r3
   1e500:	89a3883a 	add	r17,r17,r6
   1e504:	1145883a 	add	r2,r2,r5
   1e508:	898d803a 	cmpltu	r6,r17,r6
   1e50c:	3087883a 	add	r3,r6,r2
   1e510:	4821883a 	mov	r16,r9
   1e514:	003ed906 	br	1e07c <__alt_data_end+0xfc01e07c>
   1e518:	2984b03a 	or	r2,r5,r6
   1e51c:	10004226 	beq	r2,zero,1e628 <__subdf3+0x82c>
   1e520:	1808d0fa 	srli	r4,r3,3
   1e524:	8822d0fa 	srli	r17,r17,3
   1e528:	1806977a 	slli	r3,r3,29
   1e52c:	2080022c 	andhi	r2,r4,8
   1e530:	1c62b03a 	or	r17,r3,r17
   1e534:	10000826 	beq	r2,zero,1e558 <__subdf3+0x75c>
   1e538:	2812d0fa 	srli	r9,r5,3
   1e53c:	4880022c 	andhi	r2,r9,8
   1e540:	1000051e 	bne	r2,zero,1e558 <__subdf3+0x75c>
   1e544:	300cd0fa 	srli	r6,r6,3
   1e548:	2804977a 	slli	r2,r5,29
   1e54c:	4809883a 	mov	r4,r9
   1e550:	3825883a 	mov	r18,r7
   1e554:	11a2b03a 	or	r17,r2,r6
   1e558:	8806d77a 	srli	r3,r17,29
   1e55c:	200890fa 	slli	r4,r4,3
   1e560:	882290fa 	slli	r17,r17,3
   1e564:	0401ffc4 	movi	r16,2047
   1e568:	1906b03a 	or	r3,r3,r4
   1e56c:	003e4406 	br	1de80 <__alt_data_end+0xfc01de80>
   1e570:	2984b03a 	or	r2,r5,r6
   1e574:	103e4226 	beq	r2,zero,1de80 <__alt_data_end+0xfc01de80>
   1e578:	8989c83a 	sub	r4,r17,r6
   1e57c:	8911803a 	cmpltu	r8,r17,r4
   1e580:	1945c83a 	sub	r2,r3,r5
   1e584:	1205c83a 	sub	r2,r2,r8
   1e588:	1200202c 	andhi	r8,r2,128
   1e58c:	403e9a26 	beq	r8,zero,1dff8 <__alt_data_end+0xfc01dff8>
   1e590:	3463c83a 	sub	r17,r6,r17
   1e594:	28c5c83a 	sub	r2,r5,r3
   1e598:	344d803a 	cmpltu	r6,r6,r17
   1e59c:	1187c83a 	sub	r3,r2,r6
   1e5a0:	3825883a 	mov	r18,r7
   1e5a4:	003e3606 	br	1de80 <__alt_data_end+0xfc01de80>
   1e5a8:	0101ffc4 	movi	r4,2047
   1e5ac:	493fc71e 	bne	r9,r4,1e4cc <__alt_data_end+0xfc01e4cc>
   1e5b0:	2807883a 	mov	r3,r5
   1e5b4:	3023883a 	mov	r17,r6
   1e5b8:	4821883a 	mov	r16,r9
   1e5bc:	003e3006 	br	1de80 <__alt_data_end+0xfc01de80>
   1e5c0:	10003626 	beq	r2,zero,1e69c <__subdf3+0x8a0>
   1e5c4:	2984b03a 	or	r2,r5,r6
   1e5c8:	10001726 	beq	r2,zero,1e628 <__subdf3+0x82c>
   1e5cc:	1808d0fa 	srli	r4,r3,3
   1e5d0:	8822d0fa 	srli	r17,r17,3
   1e5d4:	1806977a 	slli	r3,r3,29
   1e5d8:	2080022c 	andhi	r2,r4,8
   1e5dc:	1c62b03a 	or	r17,r3,r17
   1e5e0:	10000726 	beq	r2,zero,1e600 <__subdf3+0x804>
   1e5e4:	2812d0fa 	srli	r9,r5,3
   1e5e8:	4880022c 	andhi	r2,r9,8
   1e5ec:	1000041e 	bne	r2,zero,1e600 <__subdf3+0x804>
   1e5f0:	300cd0fa 	srli	r6,r6,3
   1e5f4:	2804977a 	slli	r2,r5,29
   1e5f8:	4809883a 	mov	r4,r9
   1e5fc:	11a2b03a 	or	r17,r2,r6
   1e600:	8806d77a 	srli	r3,r17,29
   1e604:	200890fa 	slli	r4,r4,3
   1e608:	882290fa 	slli	r17,r17,3
   1e60c:	3825883a 	mov	r18,r7
   1e610:	1906b03a 	or	r3,r3,r4
   1e614:	0401ffc4 	movi	r16,2047
   1e618:	003e1906 	br	1de80 <__alt_data_end+0xfc01de80>
   1e61c:	000b883a 	mov	r5,zero
   1e620:	0005883a 	mov	r2,zero
   1e624:	003e2e06 	br	1dee0 <__alt_data_end+0xfc01dee0>
   1e628:	0401ffc4 	movi	r16,2047
   1e62c:	003e1406 	br	1de80 <__alt_data_end+0xfc01de80>
   1e630:	0005883a 	mov	r2,zero
   1e634:	003f7506 	br	1e40c <__alt_data_end+0xfc01e40c>
   1e638:	0005883a 	mov	r2,zero
   1e63c:	0009883a 	mov	r4,zero
   1e640:	003e7806 	br	1e024 <__alt_data_end+0xfc01e024>
   1e644:	123ff804 	addi	r8,r2,-32
   1e648:	01000804 	movi	r4,32
   1e64c:	1a10d83a 	srl	r8,r3,r8
   1e650:	11002526 	beq	r2,r4,1e6e8 <__subdf3+0x8ec>
   1e654:	01001004 	movi	r4,64
   1e658:	2085c83a 	sub	r2,r4,r2
   1e65c:	1884983a 	sll	r2,r3,r2
   1e660:	1444b03a 	or	r2,r2,r17
   1e664:	1004c03a 	cmpne	r2,r2,zero
   1e668:	40a2b03a 	or	r17,r8,r2
   1e66c:	0005883a 	mov	r2,zero
   1e670:	003f1606 	br	1e2cc <__alt_data_end+0xfc01e2cc>
   1e674:	02000434 	movhi	r8,16
   1e678:	0009883a 	mov	r4,zero
   1e67c:	423fffc4 	addi	r8,r8,-1
   1e680:	00bfffc4 	movi	r2,-1
   1e684:	0401ffc4 	movi	r16,2047
   1e688:	003e6606 	br	1e024 <__alt_data_end+0xfc01e024>
   1e68c:	1c62b03a 	or	r17,r3,r17
   1e690:	8822c03a 	cmpne	r17,r17,zero
   1e694:	0005883a 	mov	r2,zero
   1e698:	003f9906 	br	1e500 <__alt_data_end+0xfc01e500>
   1e69c:	2807883a 	mov	r3,r5
   1e6a0:	3023883a 	mov	r17,r6
   1e6a4:	0401ffc4 	movi	r16,2047
   1e6a8:	003df506 	br	1de80 <__alt_data_end+0xfc01de80>
   1e6ac:	2807883a 	mov	r3,r5
   1e6b0:	3023883a 	mov	r17,r6
   1e6b4:	003df206 	br	1de80 <__alt_data_end+0xfc01de80>
   1e6b8:	123ff804 	addi	r8,r2,-32
   1e6bc:	01000804 	movi	r4,32
   1e6c0:	1a10d83a 	srl	r8,r3,r8
   1e6c4:	11000a26 	beq	r2,r4,1e6f0 <__subdf3+0x8f4>
   1e6c8:	01001004 	movi	r4,64
   1e6cc:	2085c83a 	sub	r2,r4,r2
   1e6d0:	1884983a 	sll	r2,r3,r2
   1e6d4:	1444b03a 	or	r2,r2,r17
   1e6d8:	1004c03a 	cmpne	r2,r2,zero
   1e6dc:	40a2b03a 	or	r17,r8,r2
   1e6e0:	0005883a 	mov	r2,zero
   1e6e4:	003f8606 	br	1e500 <__alt_data_end+0xfc01e500>
   1e6e8:	0005883a 	mov	r2,zero
   1e6ec:	003fdc06 	br	1e660 <__alt_data_end+0xfc01e660>
   1e6f0:	0005883a 	mov	r2,zero
   1e6f4:	003ff706 	br	1e6d4 <__alt_data_end+0xfc01e6d4>

0001e6f8 <__fixdfsi>:
   1e6f8:	280cd53a 	srli	r6,r5,20
   1e6fc:	00c00434 	movhi	r3,16
   1e700:	18ffffc4 	addi	r3,r3,-1
   1e704:	3181ffcc 	andi	r6,r6,2047
   1e708:	01c0ff84 	movi	r7,1022
   1e70c:	28c6703a 	and	r3,r5,r3
   1e710:	280ad7fa 	srli	r5,r5,31
   1e714:	3980120e 	bge	r7,r6,1e760 <__fixdfsi+0x68>
   1e718:	00810744 	movi	r2,1053
   1e71c:	11800c16 	blt	r2,r6,1e750 <__fixdfsi+0x58>
   1e720:	00810cc4 	movi	r2,1075
   1e724:	1185c83a 	sub	r2,r2,r6
   1e728:	01c007c4 	movi	r7,31
   1e72c:	18c00434 	orhi	r3,r3,16
   1e730:	38800d16 	blt	r7,r2,1e768 <__fixdfsi+0x70>
   1e734:	31befb44 	addi	r6,r6,-1043
   1e738:	2084d83a 	srl	r2,r4,r2
   1e73c:	1986983a 	sll	r3,r3,r6
   1e740:	1884b03a 	or	r2,r3,r2
   1e744:	28000726 	beq	r5,zero,1e764 <__fixdfsi+0x6c>
   1e748:	0085c83a 	sub	r2,zero,r2
   1e74c:	f800283a 	ret
   1e750:	00a00034 	movhi	r2,32768
   1e754:	10bfffc4 	addi	r2,r2,-1
   1e758:	2885883a 	add	r2,r5,r2
   1e75c:	f800283a 	ret
   1e760:	0005883a 	mov	r2,zero
   1e764:	f800283a 	ret
   1e768:	008104c4 	movi	r2,1043
   1e76c:	1185c83a 	sub	r2,r2,r6
   1e770:	1884d83a 	srl	r2,r3,r2
   1e774:	003ff306 	br	1e744 <__alt_data_end+0xfc01e744>

0001e778 <__floatsidf>:
   1e778:	defffd04 	addi	sp,sp,-12
   1e77c:	dfc00215 	stw	ra,8(sp)
   1e780:	dc400115 	stw	r17,4(sp)
   1e784:	dc000015 	stw	r16,0(sp)
   1e788:	20002b26 	beq	r4,zero,1e838 <__floatsidf+0xc0>
   1e78c:	2023883a 	mov	r17,r4
   1e790:	2020d7fa 	srli	r16,r4,31
   1e794:	20002d16 	blt	r4,zero,1e84c <__floatsidf+0xd4>
   1e798:	8809883a 	mov	r4,r17
   1e79c:	000dd880 	call	dd88 <__clzsi2>
   1e7a0:	01410784 	movi	r5,1054
   1e7a4:	288bc83a 	sub	r5,r5,r2
   1e7a8:	01010cc4 	movi	r4,1075
   1e7ac:	2149c83a 	sub	r4,r4,r5
   1e7b0:	00c007c4 	movi	r3,31
   1e7b4:	1900160e 	bge	r3,r4,1e810 <__floatsidf+0x98>
   1e7b8:	00c104c4 	movi	r3,1043
   1e7bc:	1947c83a 	sub	r3,r3,r5
   1e7c0:	88c6983a 	sll	r3,r17,r3
   1e7c4:	00800434 	movhi	r2,16
   1e7c8:	10bfffc4 	addi	r2,r2,-1
   1e7cc:	1886703a 	and	r3,r3,r2
   1e7d0:	2941ffcc 	andi	r5,r5,2047
   1e7d4:	800d883a 	mov	r6,r16
   1e7d8:	0005883a 	mov	r2,zero
   1e7dc:	280a953a 	slli	r5,r5,20
   1e7e0:	31803fcc 	andi	r6,r6,255
   1e7e4:	01000434 	movhi	r4,16
   1e7e8:	300c97fa 	slli	r6,r6,31
   1e7ec:	213fffc4 	addi	r4,r4,-1
   1e7f0:	1906703a 	and	r3,r3,r4
   1e7f4:	1946b03a 	or	r3,r3,r5
   1e7f8:	1986b03a 	or	r3,r3,r6
   1e7fc:	dfc00217 	ldw	ra,8(sp)
   1e800:	dc400117 	ldw	r17,4(sp)
   1e804:	dc000017 	ldw	r16,0(sp)
   1e808:	dec00304 	addi	sp,sp,12
   1e80c:	f800283a 	ret
   1e810:	00c002c4 	movi	r3,11
   1e814:	1887c83a 	sub	r3,r3,r2
   1e818:	88c6d83a 	srl	r3,r17,r3
   1e81c:	8904983a 	sll	r2,r17,r4
   1e820:	01000434 	movhi	r4,16
   1e824:	213fffc4 	addi	r4,r4,-1
   1e828:	2941ffcc 	andi	r5,r5,2047
   1e82c:	1906703a 	and	r3,r3,r4
   1e830:	800d883a 	mov	r6,r16
   1e834:	003fe906 	br	1e7dc <__alt_data_end+0xfc01e7dc>
   1e838:	000d883a 	mov	r6,zero
   1e83c:	000b883a 	mov	r5,zero
   1e840:	0007883a 	mov	r3,zero
   1e844:	0005883a 	mov	r2,zero
   1e848:	003fe406 	br	1e7dc <__alt_data_end+0xfc01e7dc>
   1e84c:	0123c83a 	sub	r17,zero,r4
   1e850:	003fd106 	br	1e798 <__alt_data_end+0xfc01e798>

0001e854 <__floatunsidf>:
   1e854:	defffe04 	addi	sp,sp,-8
   1e858:	dc000015 	stw	r16,0(sp)
   1e85c:	dfc00115 	stw	ra,4(sp)
   1e860:	2021883a 	mov	r16,r4
   1e864:	20002226 	beq	r4,zero,1e8f0 <__floatunsidf+0x9c>
   1e868:	000dd880 	call	dd88 <__clzsi2>
   1e86c:	01010784 	movi	r4,1054
   1e870:	2089c83a 	sub	r4,r4,r2
   1e874:	01810cc4 	movi	r6,1075
   1e878:	310dc83a 	sub	r6,r6,r4
   1e87c:	00c007c4 	movi	r3,31
   1e880:	1980120e 	bge	r3,r6,1e8cc <__floatunsidf+0x78>
   1e884:	00c104c4 	movi	r3,1043
   1e888:	1907c83a 	sub	r3,r3,r4
   1e88c:	80ca983a 	sll	r5,r16,r3
   1e890:	00800434 	movhi	r2,16
   1e894:	10bfffc4 	addi	r2,r2,-1
   1e898:	2101ffcc 	andi	r4,r4,2047
   1e89c:	0021883a 	mov	r16,zero
   1e8a0:	288a703a 	and	r5,r5,r2
   1e8a4:	2008953a 	slli	r4,r4,20
   1e8a8:	00c00434 	movhi	r3,16
   1e8ac:	18ffffc4 	addi	r3,r3,-1
   1e8b0:	28c6703a 	and	r3,r5,r3
   1e8b4:	8005883a 	mov	r2,r16
   1e8b8:	1906b03a 	or	r3,r3,r4
   1e8bc:	dfc00117 	ldw	ra,4(sp)
   1e8c0:	dc000017 	ldw	r16,0(sp)
   1e8c4:	dec00204 	addi	sp,sp,8
   1e8c8:	f800283a 	ret
   1e8cc:	00c002c4 	movi	r3,11
   1e8d0:	188bc83a 	sub	r5,r3,r2
   1e8d4:	814ad83a 	srl	r5,r16,r5
   1e8d8:	00c00434 	movhi	r3,16
   1e8dc:	18ffffc4 	addi	r3,r3,-1
   1e8e0:	81a0983a 	sll	r16,r16,r6
   1e8e4:	2101ffcc 	andi	r4,r4,2047
   1e8e8:	28ca703a 	and	r5,r5,r3
   1e8ec:	003fed06 	br	1e8a4 <__alt_data_end+0xfc01e8a4>
   1e8f0:	0009883a 	mov	r4,zero
   1e8f4:	000b883a 	mov	r5,zero
   1e8f8:	003fea06 	br	1e8a4 <__alt_data_end+0xfc01e8a4>

0001e8fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e8fc:	defffe04 	addi	sp,sp,-8
   1e900:	dfc00115 	stw	ra,4(sp)
   1e904:	df000015 	stw	fp,0(sp)
   1e908:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e90c:	d0a5b917 	ldw	r2,-26908(gp)
   1e910:	10000326 	beq	r2,zero,1e920 <alt_get_errno+0x24>
   1e914:	d0a5b917 	ldw	r2,-26908(gp)
   1e918:	103ee83a 	callr	r2
   1e91c:	00000106 	br	1e924 <alt_get_errno+0x28>
   1e920:	d0b24304 	addi	r2,gp,-14068
}
   1e924:	e037883a 	mov	sp,fp
   1e928:	dfc00117 	ldw	ra,4(sp)
   1e92c:	df000017 	ldw	fp,0(sp)
   1e930:	dec00204 	addi	sp,sp,8
   1e934:	f800283a 	ret

0001e938 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1e938:	defffb04 	addi	sp,sp,-20
   1e93c:	dfc00415 	stw	ra,16(sp)
   1e940:	df000315 	stw	fp,12(sp)
   1e944:	df000304 	addi	fp,sp,12
   1e948:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1e94c:	e0bfff17 	ldw	r2,-4(fp)
   1e950:	10000816 	blt	r2,zero,1e974 <close+0x3c>
   1e954:	01400304 	movi	r5,12
   1e958:	e13fff17 	ldw	r4,-4(fp)
   1e95c:	000ce000 	call	ce00 <__mulsi3>
   1e960:	1007883a 	mov	r3,r2
   1e964:	008000f4 	movhi	r2,3
   1e968:	10abd504 	addi	r2,r2,-20652
   1e96c:	1885883a 	add	r2,r3,r2
   1e970:	00000106 	br	1e978 <close+0x40>
   1e974:	0005883a 	mov	r2,zero
   1e978:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1e97c:	e0bffd17 	ldw	r2,-12(fp)
   1e980:	10001926 	beq	r2,zero,1e9e8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1e984:	e0bffd17 	ldw	r2,-12(fp)
   1e988:	10800017 	ldw	r2,0(r2)
   1e98c:	10800417 	ldw	r2,16(r2)
   1e990:	10000626 	beq	r2,zero,1e9ac <close+0x74>
   1e994:	e0bffd17 	ldw	r2,-12(fp)
   1e998:	10800017 	ldw	r2,0(r2)
   1e99c:	10800417 	ldw	r2,16(r2)
   1e9a0:	e13ffd17 	ldw	r4,-12(fp)
   1e9a4:	103ee83a 	callr	r2
   1e9a8:	00000106 	br	1e9b0 <close+0x78>
   1e9ac:	0005883a 	mov	r2,zero
   1e9b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1e9b4:	e13fff17 	ldw	r4,-4(fp)
   1e9b8:	001f1e00 	call	1f1e0 <alt_release_fd>
    if (rval < 0)
   1e9bc:	e0bffe17 	ldw	r2,-8(fp)
   1e9c0:	1000070e 	bge	r2,zero,1e9e0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1e9c4:	001e8fc0 	call	1e8fc <alt_get_errno>
   1e9c8:	1007883a 	mov	r3,r2
   1e9cc:	e0bffe17 	ldw	r2,-8(fp)
   1e9d0:	0085c83a 	sub	r2,zero,r2
   1e9d4:	18800015 	stw	r2,0(r3)
      return -1;
   1e9d8:	00bfffc4 	movi	r2,-1
   1e9dc:	00000706 	br	1e9fc <close+0xc4>
    }
    return 0;
   1e9e0:	0005883a 	mov	r2,zero
   1e9e4:	00000506 	br	1e9fc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1e9e8:	001e8fc0 	call	1e8fc <alt_get_errno>
   1e9ec:	1007883a 	mov	r3,r2
   1e9f0:	00801444 	movi	r2,81
   1e9f4:	18800015 	stw	r2,0(r3)
    return -1;
   1e9f8:	00bfffc4 	movi	r2,-1
  }
}
   1e9fc:	e037883a 	mov	sp,fp
   1ea00:	dfc00117 	ldw	ra,4(sp)
   1ea04:	df000017 	ldw	fp,0(sp)
   1ea08:	dec00204 	addi	sp,sp,8
   1ea0c:	f800283a 	ret

0001ea10 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1ea10:	defffc04 	addi	sp,sp,-16
   1ea14:	df000315 	stw	fp,12(sp)
   1ea18:	df000304 	addi	fp,sp,12
   1ea1c:	e13ffd15 	stw	r4,-12(fp)
   1ea20:	e17ffe15 	stw	r5,-8(fp)
   1ea24:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1ea28:	e0bfff17 	ldw	r2,-4(fp)
}
   1ea2c:	e037883a 	mov	sp,fp
   1ea30:	df000017 	ldw	fp,0(sp)
   1ea34:	dec00104 	addi	sp,sp,4
   1ea38:	f800283a 	ret

0001ea3c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1ea3c:	defffd04 	addi	sp,sp,-12
   1ea40:	df000215 	stw	fp,8(sp)
   1ea44:	df000204 	addi	fp,sp,8
   1ea48:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1ea4c:	0001883a 	nop
   1ea50:	e0bfff17 	ldw	r2,-4(fp)
   1ea54:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1ea58:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1ea5c:	10000226 	beq	r2,zero,1ea68 <_exit+0x2c>
    ALT_SIM_FAIL();
   1ea60:	002af070 	cmpltui	zero,zero,43969
   1ea64:	00000106 	br	1ea6c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1ea68:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1ea6c:	003fff06 	br	1ea6c <__alt_data_end+0xfc01ea6c>

0001ea70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ea70:	defffe04 	addi	sp,sp,-8
   1ea74:	dfc00115 	stw	ra,4(sp)
   1ea78:	df000015 	stw	fp,0(sp)
   1ea7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ea80:	d0a5b917 	ldw	r2,-26908(gp)
   1ea84:	10000326 	beq	r2,zero,1ea94 <alt_get_errno+0x24>
   1ea88:	d0a5b917 	ldw	r2,-26908(gp)
   1ea8c:	103ee83a 	callr	r2
   1ea90:	00000106 	br	1ea98 <alt_get_errno+0x28>
   1ea94:	d0b24304 	addi	r2,gp,-14068
}
   1ea98:	e037883a 	mov	sp,fp
   1ea9c:	dfc00117 	ldw	ra,4(sp)
   1eaa0:	df000017 	ldw	fp,0(sp)
   1eaa4:	dec00204 	addi	sp,sp,8
   1eaa8:	f800283a 	ret

0001eaac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1eaac:	defffb04 	addi	sp,sp,-20
   1eab0:	dfc00415 	stw	ra,16(sp)
   1eab4:	df000315 	stw	fp,12(sp)
   1eab8:	df000304 	addi	fp,sp,12
   1eabc:	e13ffe15 	stw	r4,-8(fp)
   1eac0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1eac4:	e0bffe17 	ldw	r2,-8(fp)
   1eac8:	10000816 	blt	r2,zero,1eaec <fstat+0x40>
   1eacc:	01400304 	movi	r5,12
   1ead0:	e13ffe17 	ldw	r4,-8(fp)
   1ead4:	000ce000 	call	ce00 <__mulsi3>
   1ead8:	1007883a 	mov	r3,r2
   1eadc:	008000f4 	movhi	r2,3
   1eae0:	10abd504 	addi	r2,r2,-20652
   1eae4:	1885883a 	add	r2,r3,r2
   1eae8:	00000106 	br	1eaf0 <fstat+0x44>
   1eaec:	0005883a 	mov	r2,zero
   1eaf0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1eaf4:	e0bffd17 	ldw	r2,-12(fp)
   1eaf8:	10001026 	beq	r2,zero,1eb3c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1eafc:	e0bffd17 	ldw	r2,-12(fp)
   1eb00:	10800017 	ldw	r2,0(r2)
   1eb04:	10800817 	ldw	r2,32(r2)
   1eb08:	10000726 	beq	r2,zero,1eb28 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1eb0c:	e0bffd17 	ldw	r2,-12(fp)
   1eb10:	10800017 	ldw	r2,0(r2)
   1eb14:	10800817 	ldw	r2,32(r2)
   1eb18:	e17fff17 	ldw	r5,-4(fp)
   1eb1c:	e13ffd17 	ldw	r4,-12(fp)
   1eb20:	103ee83a 	callr	r2
   1eb24:	00000a06 	br	1eb50 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1eb28:	e0bfff17 	ldw	r2,-4(fp)
   1eb2c:	00c80004 	movi	r3,8192
   1eb30:	10c00115 	stw	r3,4(r2)
      return 0;
   1eb34:	0005883a 	mov	r2,zero
   1eb38:	00000506 	br	1eb50 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1eb3c:	001ea700 	call	1ea70 <alt_get_errno>
   1eb40:	1007883a 	mov	r3,r2
   1eb44:	00801444 	movi	r2,81
   1eb48:	18800015 	stw	r2,0(r3)
    return -1;
   1eb4c:	00bfffc4 	movi	r2,-1
  }
}
   1eb50:	e037883a 	mov	sp,fp
   1eb54:	dfc00117 	ldw	ra,4(sp)
   1eb58:	df000017 	ldw	fp,0(sp)
   1eb5c:	dec00204 	addi	sp,sp,8
   1eb60:	f800283a 	ret

0001eb64 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1eb64:	deffff04 	addi	sp,sp,-4
   1eb68:	df000015 	stw	fp,0(sp)
   1eb6c:	d839883a 	mov	fp,sp
  return 0;
   1eb70:	0005883a 	mov	r2,zero
}
   1eb74:	e037883a 	mov	sp,fp
   1eb78:	df000017 	ldw	fp,0(sp)
   1eb7c:	dec00104 	addi	sp,sp,4
   1eb80:	f800283a 	ret

0001eb84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1eb84:	defffe04 	addi	sp,sp,-8
   1eb88:	dfc00115 	stw	ra,4(sp)
   1eb8c:	df000015 	stw	fp,0(sp)
   1eb90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1eb94:	d0a5b917 	ldw	r2,-26908(gp)
   1eb98:	10000326 	beq	r2,zero,1eba8 <alt_get_errno+0x24>
   1eb9c:	d0a5b917 	ldw	r2,-26908(gp)
   1eba0:	103ee83a 	callr	r2
   1eba4:	00000106 	br	1ebac <alt_get_errno+0x28>
   1eba8:	d0b24304 	addi	r2,gp,-14068
}
   1ebac:	e037883a 	mov	sp,fp
   1ebb0:	dfc00117 	ldw	ra,4(sp)
   1ebb4:	df000017 	ldw	fp,0(sp)
   1ebb8:	dec00204 	addi	sp,sp,8
   1ebbc:	f800283a 	ret

0001ebc0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1ebc0:	deffed04 	addi	sp,sp,-76
   1ebc4:	dfc01215 	stw	ra,72(sp)
   1ebc8:	df001115 	stw	fp,68(sp)
   1ebcc:	df001104 	addi	fp,sp,68
   1ebd0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1ebd4:	e0bfff17 	ldw	r2,-4(fp)
   1ebd8:	10000816 	blt	r2,zero,1ebfc <isatty+0x3c>
   1ebdc:	01400304 	movi	r5,12
   1ebe0:	e13fff17 	ldw	r4,-4(fp)
   1ebe4:	000ce000 	call	ce00 <__mulsi3>
   1ebe8:	1007883a 	mov	r3,r2
   1ebec:	008000f4 	movhi	r2,3
   1ebf0:	10abd504 	addi	r2,r2,-20652
   1ebf4:	1885883a 	add	r2,r3,r2
   1ebf8:	00000106 	br	1ec00 <isatty+0x40>
   1ebfc:	0005883a 	mov	r2,zero
   1ec00:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1ec04:	e0bfef17 	ldw	r2,-68(fp)
   1ec08:	10000e26 	beq	r2,zero,1ec44 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1ec0c:	e0bfef17 	ldw	r2,-68(fp)
   1ec10:	10800017 	ldw	r2,0(r2)
   1ec14:	10800817 	ldw	r2,32(r2)
   1ec18:	1000021e 	bne	r2,zero,1ec24 <isatty+0x64>
    {
      return 1;
   1ec1c:	00800044 	movi	r2,1
   1ec20:	00000d06 	br	1ec58 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1ec24:	e0bff004 	addi	r2,fp,-64
   1ec28:	100b883a 	mov	r5,r2
   1ec2c:	e13fff17 	ldw	r4,-4(fp)
   1ec30:	001eaac0 	call	1eaac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1ec34:	e0bff117 	ldw	r2,-60(fp)
   1ec38:	10880020 	cmpeqi	r2,r2,8192
   1ec3c:	10803fcc 	andi	r2,r2,255
   1ec40:	00000506 	br	1ec58 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1ec44:	001eb840 	call	1eb84 <alt_get_errno>
   1ec48:	1007883a 	mov	r3,r2
   1ec4c:	00801444 	movi	r2,81
   1ec50:	18800015 	stw	r2,0(r3)
    return 0;
   1ec54:	0005883a 	mov	r2,zero
  }
}
   1ec58:	e037883a 	mov	sp,fp
   1ec5c:	dfc00117 	ldw	ra,4(sp)
   1ec60:	df000017 	ldw	fp,0(sp)
   1ec64:	dec00204 	addi	sp,sp,8
   1ec68:	f800283a 	ret

0001ec6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ec6c:	defffe04 	addi	sp,sp,-8
   1ec70:	dfc00115 	stw	ra,4(sp)
   1ec74:	df000015 	stw	fp,0(sp)
   1ec78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ec7c:	d0a5b917 	ldw	r2,-26908(gp)
   1ec80:	10000326 	beq	r2,zero,1ec90 <alt_get_errno+0x24>
   1ec84:	d0a5b917 	ldw	r2,-26908(gp)
   1ec88:	103ee83a 	callr	r2
   1ec8c:	00000106 	br	1ec94 <alt_get_errno+0x28>
   1ec90:	d0b24304 	addi	r2,gp,-14068
}
   1ec94:	e037883a 	mov	sp,fp
   1ec98:	dfc00117 	ldw	ra,4(sp)
   1ec9c:	df000017 	ldw	fp,0(sp)
   1eca0:	dec00204 	addi	sp,sp,8
   1eca4:	f800283a 	ret

0001eca8 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1eca8:	defffb04 	addi	sp,sp,-20
   1ecac:	dfc00415 	stw	ra,16(sp)
   1ecb0:	df000315 	stw	fp,12(sp)
   1ecb4:	df000304 	addi	fp,sp,12
   1ecb8:	e13ffe15 	stw	r4,-8(fp)
   1ecbc:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   1ecc0:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   1ecc4:	e0bffe17 	ldw	r2,-8(fp)
   1ecc8:	00802f16 	blt	zero,r2,1ed88 <kill+0xe0>
  {
    switch (sig)
   1eccc:	e0bfff17 	ldw	r2,-4(fp)
   1ecd0:	10800828 	cmpgeui	r2,r2,32
   1ecd4:	1000291e 	bne	r2,zero,1ed7c <kill+0xd4>
   1ecd8:	e0bfff17 	ldw	r2,-4(fp)
   1ecdc:	100690ba 	slli	r3,r2,2
   1ece0:	008000b4 	movhi	r2,2
   1ece4:	10bb3d04 	addi	r2,r2,-4876
   1ece8:	1885883a 	add	r2,r3,r2
   1ecec:	10800017 	ldw	r2,0(r2)
   1ecf0:	1000683a 	jmp	r2
   1ecf4:	0001ed9c 	xori	zero,zero,1974
   1ecf8:	0001ed7c 	xorhi	zero,zero,1973
   1ecfc:	0001ed7c 	xorhi	zero,zero,1973
   1ed00:	0001ed74 	movhi	zero,1973
   1ed04:	0001ed74 	movhi	zero,1973
   1ed08:	0001ed74 	movhi	zero,1973
   1ed0c:	0001ed74 	movhi	zero,1973
   1ed10:	0001ed7c 	xorhi	zero,zero,1973
   1ed14:	0001ed74 	movhi	zero,1973
   1ed18:	0001ed74 	movhi	zero,1973
   1ed1c:	0001ed74 	movhi	zero,1973
   1ed20:	0001ed74 	movhi	zero,1973
   1ed24:	0001ed74 	movhi	zero,1973
   1ed28:	0001ed74 	movhi	zero,1973
   1ed2c:	0001ed74 	movhi	zero,1973
   1ed30:	0001ed74 	movhi	zero,1973
   1ed34:	0001ed9c 	xori	zero,zero,1974
   1ed38:	0001ed7c 	xorhi	zero,zero,1973
   1ed3c:	0001ed7c 	xorhi	zero,zero,1973
   1ed40:	0001ed7c 	xorhi	zero,zero,1973
   1ed44:	0001ed9c 	xori	zero,zero,1974
   1ed48:	0001ed7c 	xorhi	zero,zero,1973
   1ed4c:	0001ed7c 	xorhi	zero,zero,1973
   1ed50:	0001ed74 	movhi	zero,1973
   1ed54:	0001ed74 	movhi	zero,1973
   1ed58:	0001ed74 	movhi	zero,1973
   1ed5c:	0001ed74 	movhi	zero,1973
   1ed60:	0001ed74 	movhi	zero,1973
   1ed64:	0001ed7c 	xorhi	zero,zero,1973
   1ed68:	0001ed7c 	xorhi	zero,zero,1973
   1ed6c:	0001ed74 	movhi	zero,1973
   1ed70:	0001ed74 	movhi	zero,1973
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1ed74:	0009883a 	mov	r4,zero
   1ed78:	001ea3c0 	call	1ea3c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1ed7c:	00800584 	movi	r2,22
   1ed80:	e0bffd15 	stw	r2,-12(fp)
   1ed84:	00000606 	br	1eda0 <kill+0xf8>
    }
  }

  else if (pid > 0)
   1ed88:	e0bffe17 	ldw	r2,-8(fp)
   1ed8c:	0080040e 	bge	zero,r2,1eda0 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1ed90:	008000c4 	movi	r2,3
   1ed94:	e0bffd15 	stw	r2,-12(fp)
   1ed98:	00000106 	br	1eda0 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   1ed9c:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   1eda0:	e0bffd17 	ldw	r2,-12(fp)
   1eda4:	10000626 	beq	r2,zero,1edc0 <kill+0x118>
  {
    ALT_ERRNO = status;
   1eda8:	001ec6c0 	call	1ec6c <alt_get_errno>
   1edac:	1007883a 	mov	r3,r2
   1edb0:	e0bffd17 	ldw	r2,-12(fp)
   1edb4:	18800015 	stw	r2,0(r3)
    return -1;
   1edb8:	00bfffc4 	movi	r2,-1
   1edbc:	00000106 	br	1edc4 <kill+0x11c>
  }

  return 0;
   1edc0:	0005883a 	mov	r2,zero
}
   1edc4:	e037883a 	mov	sp,fp
   1edc8:	dfc00117 	ldw	ra,4(sp)
   1edcc:	df000017 	ldw	fp,0(sp)
   1edd0:	dec00204 	addi	sp,sp,8
   1edd4:	f800283a 	ret

0001edd8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1edd8:	defffc04 	addi	sp,sp,-16
   1eddc:	df000315 	stw	fp,12(sp)
   1ede0:	df000304 	addi	fp,sp,12
   1ede4:	e13ffd15 	stw	r4,-12(fp)
   1ede8:	e17ffe15 	stw	r5,-8(fp)
   1edec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1edf0:	e0fffe17 	ldw	r3,-8(fp)
   1edf4:	e0bffd17 	ldw	r2,-12(fp)
   1edf8:	18800c26 	beq	r3,r2,1ee2c <alt_load_section+0x54>
  {
    while( to != end )
   1edfc:	00000806 	br	1ee20 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1ee00:	e0bffe17 	ldw	r2,-8(fp)
   1ee04:	10c00104 	addi	r3,r2,4
   1ee08:	e0fffe15 	stw	r3,-8(fp)
   1ee0c:	e0fffd17 	ldw	r3,-12(fp)
   1ee10:	19000104 	addi	r4,r3,4
   1ee14:	e13ffd15 	stw	r4,-12(fp)
   1ee18:	18c00017 	ldw	r3,0(r3)
   1ee1c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1ee20:	e0fffe17 	ldw	r3,-8(fp)
   1ee24:	e0bfff17 	ldw	r2,-4(fp)
   1ee28:	18bff51e 	bne	r3,r2,1ee00 <__alt_data_end+0xfc01ee00>
    {
      *to++ = *from++;
    }
  }
}
   1ee2c:	0001883a 	nop
   1ee30:	e037883a 	mov	sp,fp
   1ee34:	df000017 	ldw	fp,0(sp)
   1ee38:	dec00104 	addi	sp,sp,4
   1ee3c:	f800283a 	ret

0001ee40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1ee40:	defffe04 	addi	sp,sp,-8
   1ee44:	dfc00115 	stw	ra,4(sp)
   1ee48:	df000015 	stw	fp,0(sp)
   1ee4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1ee50:	018000f4 	movhi	r6,3
   1ee54:	31b61b04 	addi	r6,r6,-10132
   1ee58:	014000f4 	movhi	r5,3
   1ee5c:	2969a204 	addi	r5,r5,-22904
   1ee60:	010000f4 	movhi	r4,3
   1ee64:	21361b04 	addi	r4,r4,-10132
   1ee68:	001edd80 	call	1edd8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1ee6c:	01800034 	movhi	r6,0
   1ee70:	31808c04 	addi	r6,r6,560
   1ee74:	01400034 	movhi	r5,0
   1ee78:	29400804 	addi	r5,r5,32
   1ee7c:	01000034 	movhi	r4,0
   1ee80:	21000804 	addi	r4,r4,32
   1ee84:	001edd80 	call	1edd8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1ee88:	018000f4 	movhi	r6,3
   1ee8c:	31a9a204 	addi	r6,r6,-22904
   1ee90:	014000b4 	movhi	r5,2
   1ee94:	294d4d04 	addi	r5,r5,13620
   1ee98:	010000b4 	movhi	r4,2
   1ee9c:	210d4d04 	addi	r4,r4,13620
   1eea0:	001edd80 	call	1edd8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1eea4:	00222080 	call	22208 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1eea8:	00224580 	call	22458 <alt_icache_flush_all>
}
   1eeac:	0001883a 	nop
   1eeb0:	e037883a 	mov	sp,fp
   1eeb4:	dfc00117 	ldw	ra,4(sp)
   1eeb8:	df000017 	ldw	fp,0(sp)
   1eebc:	dec00204 	addi	sp,sp,8
   1eec0:	f800283a 	ret

0001eec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1eec4:	defffe04 	addi	sp,sp,-8
   1eec8:	dfc00115 	stw	ra,4(sp)
   1eecc:	df000015 	stw	fp,0(sp)
   1eed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1eed4:	d0a5b917 	ldw	r2,-26908(gp)
   1eed8:	10000326 	beq	r2,zero,1eee8 <alt_get_errno+0x24>
   1eedc:	d0a5b917 	ldw	r2,-26908(gp)
   1eee0:	103ee83a 	callr	r2
   1eee4:	00000106 	br	1eeec <alt_get_errno+0x28>
   1eee8:	d0b24304 	addi	r2,gp,-14068
}
   1eeec:	e037883a 	mov	sp,fp
   1eef0:	dfc00117 	ldw	ra,4(sp)
   1eef4:	df000017 	ldw	fp,0(sp)
   1eef8:	dec00204 	addi	sp,sp,8
   1eefc:	f800283a 	ret

0001ef00 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1ef00:	defff904 	addi	sp,sp,-28
   1ef04:	dfc00615 	stw	ra,24(sp)
   1ef08:	df000515 	stw	fp,20(sp)
   1ef0c:	df000504 	addi	fp,sp,20
   1ef10:	e13ffd15 	stw	r4,-12(fp)
   1ef14:	e17ffe15 	stw	r5,-8(fp)
   1ef18:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1ef1c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1ef20:	e0bffd17 	ldw	r2,-12(fp)
   1ef24:	10000816 	blt	r2,zero,1ef48 <lseek+0x48>
   1ef28:	01400304 	movi	r5,12
   1ef2c:	e13ffd17 	ldw	r4,-12(fp)
   1ef30:	000ce000 	call	ce00 <__mulsi3>
   1ef34:	1007883a 	mov	r3,r2
   1ef38:	008000f4 	movhi	r2,3
   1ef3c:	10abd504 	addi	r2,r2,-20652
   1ef40:	1885883a 	add	r2,r3,r2
   1ef44:	00000106 	br	1ef4c <lseek+0x4c>
   1ef48:	0005883a 	mov	r2,zero
   1ef4c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1ef50:	e0bffc17 	ldw	r2,-16(fp)
   1ef54:	10001026 	beq	r2,zero,1ef98 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1ef58:	e0bffc17 	ldw	r2,-16(fp)
   1ef5c:	10800017 	ldw	r2,0(r2)
   1ef60:	10800717 	ldw	r2,28(r2)
   1ef64:	10000926 	beq	r2,zero,1ef8c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1ef68:	e0bffc17 	ldw	r2,-16(fp)
   1ef6c:	10800017 	ldw	r2,0(r2)
   1ef70:	10800717 	ldw	r2,28(r2)
   1ef74:	e1bfff17 	ldw	r6,-4(fp)
   1ef78:	e17ffe17 	ldw	r5,-8(fp)
   1ef7c:	e13ffc17 	ldw	r4,-16(fp)
   1ef80:	103ee83a 	callr	r2
   1ef84:	e0bffb15 	stw	r2,-20(fp)
   1ef88:	00000506 	br	1efa0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1ef8c:	00bfde84 	movi	r2,-134
   1ef90:	e0bffb15 	stw	r2,-20(fp)
   1ef94:	00000206 	br	1efa0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1ef98:	00bfebc4 	movi	r2,-81
   1ef9c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1efa0:	e0bffb17 	ldw	r2,-20(fp)
   1efa4:	1000070e 	bge	r2,zero,1efc4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1efa8:	001eec40 	call	1eec4 <alt_get_errno>
   1efac:	1007883a 	mov	r3,r2
   1efb0:	e0bffb17 	ldw	r2,-20(fp)
   1efb4:	0085c83a 	sub	r2,zero,r2
   1efb8:	18800015 	stw	r2,0(r3)
    rc = -1;
   1efbc:	00bfffc4 	movi	r2,-1
   1efc0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1efc4:	e0bffb17 	ldw	r2,-20(fp)
}
   1efc8:	e037883a 	mov	sp,fp
   1efcc:	dfc00117 	ldw	ra,4(sp)
   1efd0:	df000017 	ldw	fp,0(sp)
   1efd4:	dec00204 	addi	sp,sp,8
   1efd8:	f800283a 	ret

0001efdc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1efdc:	defffd04 	addi	sp,sp,-12
   1efe0:	dfc00215 	stw	ra,8(sp)
   1efe4:	df000115 	stw	fp,4(sp)
   1efe8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1efec:	0009883a 	mov	r4,zero
   1eff0:	001f5680 	call	1f568 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1eff4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1eff8:	001f5a00 	call	1f5a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1effc:	018000f4 	movhi	r6,3
   1f000:	31a98d04 	addi	r6,r6,-22988
   1f004:	014000f4 	movhi	r5,3
   1f008:	29698d04 	addi	r5,r5,-22988
   1f00c:	010000f4 	movhi	r4,3
   1f010:	21298d04 	addi	r4,r4,-22988
   1f014:	00227fc0 	call	227fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1f018:	00223080 	call	22308 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1f01c:	010000b4 	movhi	r4,2
   1f020:	2108da04 	addi	r4,r4,9064
   1f024:	00231940 	call	23194 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1f028:	d0b24717 	ldw	r2,-14052(gp)
   1f02c:	d0f24817 	ldw	r3,-14048(gp)
   1f030:	d1324917 	ldw	r4,-14044(gp)
   1f034:	200d883a 	mov	r6,r4
   1f038:	180b883a 	mov	r5,r3
   1f03c:	1009883a 	mov	r4,r2
   1f040:	000a1480 	call	a148 <main>
   1f044:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1f048:	01000044 	movi	r4,1
   1f04c:	001e9380 	call	1e938 <close>
  exit (result);
   1f050:	e13fff17 	ldw	r4,-4(fp)
   1f054:	00231a80 	call	231a8 <exit>

0001f058 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1f058:	defffe04 	addi	sp,sp,-8
   1f05c:	df000115 	stw	fp,4(sp)
   1f060:	df000104 	addi	fp,sp,4
   1f064:	e13fff15 	stw	r4,-4(fp)
}
   1f068:	0001883a 	nop
   1f06c:	e037883a 	mov	sp,fp
   1f070:	df000017 	ldw	fp,0(sp)
   1f074:	dec00104 	addi	sp,sp,4
   1f078:	f800283a 	ret

0001f07c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1f07c:	defffe04 	addi	sp,sp,-8
   1f080:	df000115 	stw	fp,4(sp)
   1f084:	df000104 	addi	fp,sp,4
   1f088:	e13fff15 	stw	r4,-4(fp)
}
   1f08c:	0001883a 	nop
   1f090:	e037883a 	mov	sp,fp
   1f094:	df000017 	ldw	fp,0(sp)
   1f098:	dec00104 	addi	sp,sp,4
   1f09c:	f800283a 	ret

0001f0a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f0a0:	defffe04 	addi	sp,sp,-8
   1f0a4:	dfc00115 	stw	ra,4(sp)
   1f0a8:	df000015 	stw	fp,0(sp)
   1f0ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f0b0:	d0a5b917 	ldw	r2,-26908(gp)
   1f0b4:	10000326 	beq	r2,zero,1f0c4 <alt_get_errno+0x24>
   1f0b8:	d0a5b917 	ldw	r2,-26908(gp)
   1f0bc:	103ee83a 	callr	r2
   1f0c0:	00000106 	br	1f0c8 <alt_get_errno+0x28>
   1f0c4:	d0b24304 	addi	r2,gp,-14068
}
   1f0c8:	e037883a 	mov	sp,fp
   1f0cc:	dfc00117 	ldw	ra,4(sp)
   1f0d0:	df000017 	ldw	fp,0(sp)
   1f0d4:	dec00204 	addi	sp,sp,8
   1f0d8:	f800283a 	ret

0001f0dc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1f0dc:	defff904 	addi	sp,sp,-28
   1f0e0:	dfc00615 	stw	ra,24(sp)
   1f0e4:	df000515 	stw	fp,20(sp)
   1f0e8:	df000504 	addi	fp,sp,20
   1f0ec:	e13ffd15 	stw	r4,-12(fp)
   1f0f0:	e17ffe15 	stw	r5,-8(fp)
   1f0f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f0f8:	e0bffd17 	ldw	r2,-12(fp)
   1f0fc:	10000816 	blt	r2,zero,1f120 <read+0x44>
   1f100:	01400304 	movi	r5,12
   1f104:	e13ffd17 	ldw	r4,-12(fp)
   1f108:	000ce000 	call	ce00 <__mulsi3>
   1f10c:	1007883a 	mov	r3,r2
   1f110:	008000f4 	movhi	r2,3
   1f114:	10abd504 	addi	r2,r2,-20652
   1f118:	1885883a 	add	r2,r3,r2
   1f11c:	00000106 	br	1f124 <read+0x48>
   1f120:	0005883a 	mov	r2,zero
   1f124:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1f128:	e0bffb17 	ldw	r2,-20(fp)
   1f12c:	10002226 	beq	r2,zero,1f1b8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f130:	e0bffb17 	ldw	r2,-20(fp)
   1f134:	10800217 	ldw	r2,8(r2)
   1f138:	108000cc 	andi	r2,r2,3
   1f13c:	10800060 	cmpeqi	r2,r2,1
   1f140:	1000181e 	bne	r2,zero,1f1a4 <read+0xc8>
        (fd->dev->read))
   1f144:	e0bffb17 	ldw	r2,-20(fp)
   1f148:	10800017 	ldw	r2,0(r2)
   1f14c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f150:	10001426 	beq	r2,zero,1f1a4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1f154:	e0bffb17 	ldw	r2,-20(fp)
   1f158:	10800017 	ldw	r2,0(r2)
   1f15c:	10800517 	ldw	r2,20(r2)
   1f160:	e0ffff17 	ldw	r3,-4(fp)
   1f164:	180d883a 	mov	r6,r3
   1f168:	e17ffe17 	ldw	r5,-8(fp)
   1f16c:	e13ffb17 	ldw	r4,-20(fp)
   1f170:	103ee83a 	callr	r2
   1f174:	e0bffc15 	stw	r2,-16(fp)
   1f178:	e0bffc17 	ldw	r2,-16(fp)
   1f17c:	1000070e 	bge	r2,zero,1f19c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1f180:	001f0a00 	call	1f0a0 <alt_get_errno>
   1f184:	1007883a 	mov	r3,r2
   1f188:	e0bffc17 	ldw	r2,-16(fp)
   1f18c:	0085c83a 	sub	r2,zero,r2
   1f190:	18800015 	stw	r2,0(r3)
          return -1;
   1f194:	00bfffc4 	movi	r2,-1
   1f198:	00000c06 	br	1f1cc <read+0xf0>
        }
        return rval;
   1f19c:	e0bffc17 	ldw	r2,-16(fp)
   1f1a0:	00000a06 	br	1f1cc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1f1a4:	001f0a00 	call	1f0a0 <alt_get_errno>
   1f1a8:	1007883a 	mov	r3,r2
   1f1ac:	00800344 	movi	r2,13
   1f1b0:	18800015 	stw	r2,0(r3)
   1f1b4:	00000406 	br	1f1c8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1f1b8:	001f0a00 	call	1f0a0 <alt_get_errno>
   1f1bc:	1007883a 	mov	r3,r2
   1f1c0:	00801444 	movi	r2,81
   1f1c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1f1c8:	00bfffc4 	movi	r2,-1
}
   1f1cc:	e037883a 	mov	sp,fp
   1f1d0:	dfc00117 	ldw	ra,4(sp)
   1f1d4:	df000017 	ldw	fp,0(sp)
   1f1d8:	dec00204 	addi	sp,sp,8
   1f1dc:	f800283a 	ret

0001f1e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1f1e0:	defffc04 	addi	sp,sp,-16
   1f1e4:	dfc00315 	stw	ra,12(sp)
   1f1e8:	df000215 	stw	fp,8(sp)
   1f1ec:	dc000115 	stw	r16,4(sp)
   1f1f0:	df000204 	addi	fp,sp,8
   1f1f4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1f1f8:	e0bffe17 	ldw	r2,-8(fp)
   1f1fc:	108000d0 	cmplti	r2,r2,3
   1f200:	1000111e 	bne	r2,zero,1f248 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1f204:	040000f4 	movhi	r16,3
   1f208:	842bd504 	addi	r16,r16,-20652
   1f20c:	e0bffe17 	ldw	r2,-8(fp)
   1f210:	01400304 	movi	r5,12
   1f214:	1009883a 	mov	r4,r2
   1f218:	000ce000 	call	ce00 <__mulsi3>
   1f21c:	8085883a 	add	r2,r16,r2
   1f220:	10800204 	addi	r2,r2,8
   1f224:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1f228:	040000f4 	movhi	r16,3
   1f22c:	842bd504 	addi	r16,r16,-20652
   1f230:	e0bffe17 	ldw	r2,-8(fp)
   1f234:	01400304 	movi	r5,12
   1f238:	1009883a 	mov	r4,r2
   1f23c:	000ce000 	call	ce00 <__mulsi3>
   1f240:	8085883a 	add	r2,r16,r2
   1f244:	10000015 	stw	zero,0(r2)
  }
}
   1f248:	0001883a 	nop
   1f24c:	e6ffff04 	addi	sp,fp,-4
   1f250:	dfc00217 	ldw	ra,8(sp)
   1f254:	df000117 	ldw	fp,4(sp)
   1f258:	dc000017 	ldw	r16,0(sp)
   1f25c:	dec00304 	addi	sp,sp,12
   1f260:	f800283a 	ret

0001f264 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1f264:	defff904 	addi	sp,sp,-28
   1f268:	df000615 	stw	fp,24(sp)
   1f26c:	df000604 	addi	fp,sp,24
   1f270:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f274:	0005303a 	rdctl	r2,status
   1f278:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f27c:	e0fffe17 	ldw	r3,-8(fp)
   1f280:	00bfff84 	movi	r2,-2
   1f284:	1884703a 	and	r2,r3,r2
   1f288:	1001703a 	wrctl	status,r2
  
  return context;
   1f28c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1f290:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1f294:	d0a5ba17 	ldw	r2,-26904(gp)
   1f298:	10c000c4 	addi	r3,r2,3
   1f29c:	00bfff04 	movi	r2,-4
   1f2a0:	1884703a 	and	r2,r3,r2
   1f2a4:	d0a5ba15 	stw	r2,-26904(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1f2a8:	d0e5ba17 	ldw	r3,-26904(gp)
   1f2ac:	e0bfff17 	ldw	r2,-4(fp)
   1f2b0:	1887883a 	add	r3,r3,r2
   1f2b4:	00810034 	movhi	r2,1024
   1f2b8:	10800004 	addi	r2,r2,0
   1f2bc:	10c0062e 	bgeu	r2,r3,1f2d8 <sbrk+0x74>
   1f2c0:	e0bffb17 	ldw	r2,-20(fp)
   1f2c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f2c8:	e0bffa17 	ldw	r2,-24(fp)
   1f2cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1f2d0:	00bfffc4 	movi	r2,-1
   1f2d4:	00000b06 	br	1f304 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1f2d8:	d0a5ba17 	ldw	r2,-26904(gp)
   1f2dc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1f2e0:	d0e5ba17 	ldw	r3,-26904(gp)
   1f2e4:	e0bfff17 	ldw	r2,-4(fp)
   1f2e8:	1885883a 	add	r2,r3,r2
   1f2ec:	d0a5ba15 	stw	r2,-26904(gp)
   1f2f0:	e0bffb17 	ldw	r2,-20(fp)
   1f2f4:	e0bffc15 	stw	r2,-16(fp)
   1f2f8:	e0bffc17 	ldw	r2,-16(fp)
   1f2fc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1f300:	e0bffd17 	ldw	r2,-12(fp)
} 
   1f304:	e037883a 	mov	sp,fp
   1f308:	df000017 	ldw	fp,0(sp)
   1f30c:	dec00104 	addi	sp,sp,4
   1f310:	f800283a 	ret

0001f314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f314:	defffe04 	addi	sp,sp,-8
   1f318:	dfc00115 	stw	ra,4(sp)
   1f31c:	df000015 	stw	fp,0(sp)
   1f320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f324:	d0a5b917 	ldw	r2,-26908(gp)
   1f328:	10000326 	beq	r2,zero,1f338 <alt_get_errno+0x24>
   1f32c:	d0a5b917 	ldw	r2,-26908(gp)
   1f330:	103ee83a 	callr	r2
   1f334:	00000106 	br	1f33c <alt_get_errno+0x28>
   1f338:	d0b24304 	addi	r2,gp,-14068
}
   1f33c:	e037883a 	mov	sp,fp
   1f340:	dfc00117 	ldw	ra,4(sp)
   1f344:	df000017 	ldw	fp,0(sp)
   1f348:	dec00204 	addi	sp,sp,8
   1f34c:	f800283a 	ret

0001f350 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1f350:	defffc04 	addi	sp,sp,-16
   1f354:	dfc00315 	stw	ra,12(sp)
   1f358:	df000215 	stw	fp,8(sp)
   1f35c:	df000204 	addi	fp,sp,8
   1f360:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1f364:	d0b24c17 	ldw	r2,-14032(gp)
  clock_t ticks = alt_nticks(); 
   1f368:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1f36c:	d0b24b17 	ldw	r2,-14036(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1f370:	1000061e 	bne	r2,zero,1f38c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   1f374:	001f3140 	call	1f314 <alt_get_errno>
   1f378:	1007883a 	mov	r3,r2
   1f37c:	00801604 	movi	r2,88
   1f380:	18800015 	stw	r2,0(r3)
    return 0;
   1f384:	0005883a 	mov	r2,zero
   1f388:	00000a06 	br	1f3b4 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   1f38c:	e0bfff17 	ldw	r2,-4(fp)
   1f390:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   1f394:	e0bfff17 	ldw	r2,-4(fp)
   1f398:	e0fffe17 	ldw	r3,-8(fp)
   1f39c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   1f3a0:	e0bfff17 	ldw	r2,-4(fp)
   1f3a4:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1f3a8:	e0bfff17 	ldw	r2,-4(fp)
   1f3ac:	10000315 	stw	zero,12(r2)

  return ticks;
   1f3b0:	e0bffe17 	ldw	r2,-8(fp)
}
   1f3b4:	e037883a 	mov	sp,fp
   1f3b8:	dfc00117 	ldw	ra,4(sp)
   1f3bc:	df000017 	ldw	fp,0(sp)
   1f3c0:	dec00204 	addi	sp,sp,8
   1f3c4:	f800283a 	ret

0001f3c8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1f3c8:	defffd04 	addi	sp,sp,-12
   1f3cc:	dfc00215 	stw	ra,8(sp)
   1f3d0:	df000115 	stw	fp,4(sp)
   1f3d4:	df000104 	addi	fp,sp,4
   1f3d8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1f3dc:	e13fff17 	ldw	r4,-4(fp)
   1f3e0:	00220b00 	call	220b0 <alt_busy_sleep>
}
   1f3e4:	e037883a 	mov	sp,fp
   1f3e8:	dfc00117 	ldw	ra,4(sp)
   1f3ec:	df000017 	ldw	fp,0(sp)
   1f3f0:	dec00204 	addi	sp,sp,8
   1f3f4:	f800283a 	ret

0001f3f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f3f8:	defffe04 	addi	sp,sp,-8
   1f3fc:	dfc00115 	stw	ra,4(sp)
   1f400:	df000015 	stw	fp,0(sp)
   1f404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f408:	d0a5b917 	ldw	r2,-26908(gp)
   1f40c:	10000326 	beq	r2,zero,1f41c <alt_get_errno+0x24>
   1f410:	d0a5b917 	ldw	r2,-26908(gp)
   1f414:	103ee83a 	callr	r2
   1f418:	00000106 	br	1f420 <alt_get_errno+0x28>
   1f41c:	d0b24304 	addi	r2,gp,-14068
}
   1f420:	e037883a 	mov	sp,fp
   1f424:	dfc00117 	ldw	ra,4(sp)
   1f428:	df000017 	ldw	fp,0(sp)
   1f42c:	dec00204 	addi	sp,sp,8
   1f430:	f800283a 	ret

0001f434 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1f434:	defff904 	addi	sp,sp,-28
   1f438:	dfc00615 	stw	ra,24(sp)
   1f43c:	df000515 	stw	fp,20(sp)
   1f440:	df000504 	addi	fp,sp,20
   1f444:	e13ffd15 	stw	r4,-12(fp)
   1f448:	e17ffe15 	stw	r5,-8(fp)
   1f44c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f450:	e0bffd17 	ldw	r2,-12(fp)
   1f454:	10000816 	blt	r2,zero,1f478 <write+0x44>
   1f458:	01400304 	movi	r5,12
   1f45c:	e13ffd17 	ldw	r4,-12(fp)
   1f460:	000ce000 	call	ce00 <__mulsi3>
   1f464:	1007883a 	mov	r3,r2
   1f468:	008000f4 	movhi	r2,3
   1f46c:	10abd504 	addi	r2,r2,-20652
   1f470:	1885883a 	add	r2,r3,r2
   1f474:	00000106 	br	1f47c <write+0x48>
   1f478:	0005883a 	mov	r2,zero
   1f47c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1f480:	e0bffb17 	ldw	r2,-20(fp)
   1f484:	10002126 	beq	r2,zero,1f50c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1f488:	e0bffb17 	ldw	r2,-20(fp)
   1f48c:	10800217 	ldw	r2,8(r2)
   1f490:	108000cc 	andi	r2,r2,3
   1f494:	10001826 	beq	r2,zero,1f4f8 <write+0xc4>
   1f498:	e0bffb17 	ldw	r2,-20(fp)
   1f49c:	10800017 	ldw	r2,0(r2)
   1f4a0:	10800617 	ldw	r2,24(r2)
   1f4a4:	10001426 	beq	r2,zero,1f4f8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1f4a8:	e0bffb17 	ldw	r2,-20(fp)
   1f4ac:	10800017 	ldw	r2,0(r2)
   1f4b0:	10800617 	ldw	r2,24(r2)
   1f4b4:	e0ffff17 	ldw	r3,-4(fp)
   1f4b8:	180d883a 	mov	r6,r3
   1f4bc:	e17ffe17 	ldw	r5,-8(fp)
   1f4c0:	e13ffb17 	ldw	r4,-20(fp)
   1f4c4:	103ee83a 	callr	r2
   1f4c8:	e0bffc15 	stw	r2,-16(fp)
   1f4cc:	e0bffc17 	ldw	r2,-16(fp)
   1f4d0:	1000070e 	bge	r2,zero,1f4f0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1f4d4:	001f3f80 	call	1f3f8 <alt_get_errno>
   1f4d8:	1007883a 	mov	r3,r2
   1f4dc:	e0bffc17 	ldw	r2,-16(fp)
   1f4e0:	0085c83a 	sub	r2,zero,r2
   1f4e4:	18800015 	stw	r2,0(r3)
        return -1;
   1f4e8:	00bfffc4 	movi	r2,-1
   1f4ec:	00000c06 	br	1f520 <write+0xec>
      }
      return rval;
   1f4f0:	e0bffc17 	ldw	r2,-16(fp)
   1f4f4:	00000a06 	br	1f520 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1f4f8:	001f3f80 	call	1f3f8 <alt_get_errno>
   1f4fc:	1007883a 	mov	r3,r2
   1f500:	00800344 	movi	r2,13
   1f504:	18800015 	stw	r2,0(r3)
   1f508:	00000406 	br	1f51c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1f50c:	001f3f80 	call	1f3f8 <alt_get_errno>
   1f510:	1007883a 	mov	r3,r2
   1f514:	00801444 	movi	r2,81
   1f518:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1f51c:	00bfffc4 	movi	r2,-1
}
   1f520:	e037883a 	mov	sp,fp
   1f524:	dfc00117 	ldw	ra,4(sp)
   1f528:	df000017 	ldw	fp,0(sp)
   1f52c:	dec00204 	addi	sp,sp,8
   1f530:	f800283a 	ret

0001f534 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1f534:	defffd04 	addi	sp,sp,-12
   1f538:	dfc00215 	stw	ra,8(sp)
   1f53c:	df000115 	stw	fp,4(sp)
   1f540:	df000104 	addi	fp,sp,4
   1f544:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1f548:	d165b604 	addi	r5,gp,-26920
   1f54c:	e13fff17 	ldw	r4,-4(fp)
   1f550:	00222640 	call	22264 <alt_dev_llist_insert>
}
   1f554:	e037883a 	mov	sp,fp
   1f558:	dfc00117 	ldw	ra,4(sp)
   1f55c:	df000017 	ldw	fp,0(sp)
   1f560:	dec00204 	addi	sp,sp,8
   1f564:	f800283a 	ret

0001f568 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1f568:	defffd04 	addi	sp,sp,-12
   1f56c:	dfc00215 	stw	ra,8(sp)
   1f570:	df000115 	stw	fp,4(sp)
   1f574:	df000104 	addi	fp,sp,4
   1f578:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   1f57c:	0022f080 	call	22f08 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1f580:	00800044 	movi	r2,1
   1f584:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1f588:	0001883a 	nop
   1f58c:	e037883a 	mov	sp,fp
   1f590:	dfc00117 	ldw	ra,4(sp)
   1f594:	df000017 	ldw	fp,0(sp)
   1f598:	dec00204 	addi	sp,sp,8
   1f59c:	f800283a 	ret

0001f5a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1f5a0:	defffe04 	addi	sp,sp,-8
   1f5a4:	dfc00115 	stw	ra,4(sp)
   1f5a8:	df000015 	stw	fp,0(sp)
   1f5ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1f5b0:	01c0fa04 	movi	r7,1000
   1f5b4:	01800084 	movi	r6,2
   1f5b8:	000b883a 	mov	r5,zero
   1f5bc:	01010034 	movhi	r4,1024
   1f5c0:	21042004 	addi	r4,r4,4224
   1f5c4:	0021f080 	call	21f08 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   1f5c8:	010000f4 	movhi	r4,3
   1f5cc:	212c3504 	addi	r4,r4,-20268
   1f5d0:	001f8640 	call	1f864 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1f5d4:	01800044 	movi	r6,1
   1f5d8:	000b883a 	mov	r5,zero
   1f5dc:	010000f4 	movhi	r4,3
   1f5e0:	212c4d04 	addi	r4,r4,-20172
   1f5e4:	00213900 	call	21390 <altera_avalon_jtag_uart_init>
   1f5e8:	010000f4 	movhi	r4,3
   1f5ec:	212c4304 	addi	r4,r4,-20212
   1f5f0:	001f5340 	call	1f534 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   1f5f4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1f5f8:	0001883a 	nop
}
   1f5fc:	0001883a 	nop
   1f600:	e037883a 	mov	sp,fp
   1f604:	dfc00117 	ldw	ra,4(sp)
   1f608:	df000017 	ldw	fp,0(sp)
   1f60c:	dec00204 	addi	sp,sp,8
   1f610:	f800283a 	ret

0001f614 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   1f614:	defff904 	addi	sp,sp,-28
   1f618:	dfc00615 	stw	ra,24(sp)
   1f61c:	df000515 	stw	fp,20(sp)
   1f620:	df000504 	addi	fp,sp,20
   1f624:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   1f628:	008000b4 	movhi	r2,2
   1f62c:	10a1a804 	addi	r2,r2,-31072
   1f630:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   1f634:	e0bfff17 	ldw	r2,-4(fp)
   1f638:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   1f63c:	e0bffc17 	ldw	r2,-16(fp)
   1f640:	10800717 	ldw	r2,28(r2)
   1f644:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   1f648:	e0bffd17 	ldw	r2,-12(fp)
   1f64c:	10800217 	ldw	r2,8(r2)
   1f650:	10800098 	cmpnei	r2,r2,2
   1f654:	1000251e 	bne	r2,zero,1f6ec <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   1f658:	e0bffd17 	ldw	r2,-12(fp)
   1f65c:	10c00017 	ldw	r3,0(r2)
   1f660:	e0bffd17 	ldw	r2,-12(fp)
   1f664:	10800117 	ldw	r2,4(r2)
   1f668:	e13ffe04 	addi	r4,fp,-8
   1f66c:	200f883a 	mov	r7,r4
   1f670:	100d883a 	mov	r6,r2
   1f674:	180b883a 	mov	r5,r3
   1f678:	e13ffc17 	ldw	r4,-16(fp)
   1f67c:	001fdc40 	call	1fdc4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   1f680:	e0bffd17 	ldw	r2,-12(fp)
   1f684:	10c00117 	ldw	r3,4(r2)
   1f688:	e0bffe17 	ldw	r2,-8(fp)
   1f68c:	1887c83a 	sub	r3,r3,r2
   1f690:	e0bffd17 	ldw	r2,-12(fp)
   1f694:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   1f698:	e0bffd17 	ldw	r2,-12(fp)
   1f69c:	10c00017 	ldw	r3,0(r2)
   1f6a0:	e0bffe17 	ldw	r2,-8(fp)
   1f6a4:	1887883a 	add	r3,r3,r2
   1f6a8:	e0bffd17 	ldw	r2,-12(fp)
   1f6ac:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   1f6b0:	e0bffd17 	ldw	r2,-12(fp)
   1f6b4:	10800117 	ldw	r2,4(r2)
   1f6b8:	10000c26 	beq	r2,zero,1f6ec <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1f6bc:	01400704 	movi	r5,28
   1f6c0:	e13ffc17 	ldw	r4,-16(fp)
   1f6c4:	0020f7c0 	call	20f7c <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   1f6c8:	01400084 	movi	r5,2
   1f6cc:	e13ffc17 	ldw	r4,-16(fp)
   1f6d0:	00210200 	call	21020 <alt_avalon_i2c_int_enable>
   1f6d4:	00000e06 	br	1f710 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   1f6d8:	e0bffb17 	ldw	r2,-20(fp)
   1f6dc:	10bfffc4 	addi	r2,r2,-1
   1f6e0:	e0bffb15 	stw	r2,-20(fp)
   1f6e4:	e0bffb17 	ldw	r2,-20(fp)
   1f6e8:	10000426 	beq	r2,zero,1f6fc <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   1f6ec:	e13ffc17 	ldw	r4,-16(fp)
   1f6f0:	001fd800 	call	1fd80 <alt_avalon_i2c_is_busy>
   1f6f4:	103ff81e 	bne	r2,zero,1f6d8 <__alt_data_end+0xfc01f6d8>
   1f6f8:	00000106 	br	1f700 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   1f6fc:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   1f700:	e13ffc17 	ldw	r4,-16(fp)
   1f704:	001fa280 	call	1fa28 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   1f708:	e0bffd17 	ldw	r2,-12(fp)
   1f70c:	10000215 	stw	zero,8(r2)
}
   1f710:	e037883a 	mov	sp,fp
   1f714:	dfc00117 	ldw	ra,4(sp)
   1f718:	df000017 	ldw	fp,0(sp)
   1f71c:	dec00204 	addi	sp,sp,8
   1f720:	f800283a 	ret

0001f724 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   1f724:	defffc04 	addi	sp,sp,-16
   1f728:	dfc00315 	stw	ra,12(sp)
   1f72c:	df000215 	stw	fp,8(sp)
   1f730:	df000204 	addi	fp,sp,8
   1f734:	e13ffe15 	stw	r4,-8(fp)
   1f738:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   1f73c:	e0bfff17 	ldw	r2,-4(fp)
   1f740:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   1f744:	e1ffff17 	ldw	r7,-4(fp)
   1f748:	000d883a 	mov	r6,zero
   1f74c:	014000b4 	movhi	r5,2
   1f750:	297d8504 	addi	r5,r5,-2540
   1f754:	e13ffe17 	ldw	r4,-8(fp)
   1f758:	001f8100 	call	1f810 <alt_avalon_i2c_register_callback>
}
   1f75c:	0001883a 	nop
   1f760:	e037883a 	mov	sp,fp
   1f764:	dfc00117 	ldw	ra,4(sp)
   1f768:	df000017 	ldw	fp,0(sp)
   1f76c:	dec00204 	addi	sp,sp,8
   1f770:	f800283a 	ret

0001f774 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   1f774:	defff904 	addi	sp,sp,-28
   1f778:	dfc00615 	stw	ra,24(sp)
   1f77c:	df000515 	stw	fp,20(sp)
   1f780:	df000504 	addi	fp,sp,20
   1f784:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   1f788:	e0bfff17 	ldw	r2,-4(fp)
   1f78c:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1f790:	014007c4 	movi	r5,31
   1f794:	e13ffb17 	ldw	r4,-20(fp)
   1f798:	0020fb80 	call	20fb8 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1f79c:	01400704 	movi	r5,28
   1f7a0:	e13ffb17 	ldw	r4,-20(fp)
   1f7a4:	0020f7c0 	call	20f7c <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   1f7a8:	e0bffb17 	ldw	r2,-20(fp)
   1f7ac:	10800617 	ldw	r2,24(r2)
   1f7b0:	10001126 	beq	r2,zero,1f7f8 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f7b4:	0005303a 	rdctl	r2,status
   1f7b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f7bc:	e0fffd17 	ldw	r3,-12(fp)
   1f7c0:	00bfff84 	movi	r2,-2
   1f7c4:	1884703a 	and	r2,r3,r2
   1f7c8:	1001703a 	wrctl	status,r2
  
  return context;
   1f7cc:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   1f7d0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   1f7d4:	e0bffb17 	ldw	r2,-20(fp)
   1f7d8:	10800617 	ldw	r2,24(r2)
   1f7dc:	e13ffb17 	ldw	r4,-20(fp)
   1f7e0:	103ee83a 	callr	r2
   1f7e4:	e0bffc17 	ldw	r2,-16(fp)
   1f7e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f7ec:	e0bffe17 	ldw	r2,-8(fp)
   1f7f0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   1f7f4:	0001883a 	nop
   1f7f8:	0001883a 	nop
}
   1f7fc:	e037883a 	mov	sp,fp
   1f800:	dfc00117 	ldw	ra,4(sp)
   1f804:	df000017 	ldw	fp,0(sp)
   1f808:	dec00204 	addi	sp,sp,8
   1f80c:	f800283a 	ret

0001f810 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   1f810:	defffb04 	addi	sp,sp,-20
   1f814:	df000415 	stw	fp,16(sp)
   1f818:	df000404 	addi	fp,sp,16
   1f81c:	e13ffc15 	stw	r4,-16(fp)
   1f820:	e17ffd15 	stw	r5,-12(fp)
   1f824:	e1bffe15 	stw	r6,-8(fp)
   1f828:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   1f82c:	e0bffc17 	ldw	r2,-16(fp)
   1f830:	e0fffd17 	ldw	r3,-12(fp)
   1f834:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   1f838:	e0bffc17 	ldw	r2,-16(fp)
   1f83c:	e0ffff17 	ldw	r3,-4(fp)
   1f840:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   1f844:	e0bffc17 	ldw	r2,-16(fp)
   1f848:	e0fffe17 	ldw	r3,-8(fp)
   1f84c:	10c00815 	stw	r3,32(r2)

    return ;
   1f850:	0001883a 	nop
}
   1f854:	e037883a 	mov	sp,fp
   1f858:	df000017 	ldw	fp,0(sp)
   1f85c:	dec00104 	addi	sp,sp,4
   1f860:	f800283a 	ret

0001f864 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   1f864:	defff704 	addi	sp,sp,-36
   1f868:	dfc00815 	stw	ra,32(sp)
   1f86c:	df000715 	stw	fp,28(sp)
   1f870:	df000704 	addi	fp,sp,28
   1f874:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   1f878:	e13fff17 	ldw	r4,-4(fp)
   1f87c:	001fa280 	call	1fa28 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1f880:	014007c4 	movi	r5,31
   1f884:	e13fff17 	ldw	r4,-4(fp)
   1f888:	0020fb80 	call	20fb8 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1f88c:	01400704 	movi	r5,28
   1f890:	e13fff17 	ldw	r4,-4(fp)
   1f894:	0020f7c0 	call	20f7c <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   1f898:	014000c4 	movi	r5,3
   1f89c:	e13fff17 	ldw	r4,-4(fp)
   1f8a0:	00211c40 	call	211c4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   1f8a4:	014000c4 	movi	r5,3
   1f8a8:	e13fff17 	ldw	r4,-4(fp)
   1f8ac:	00211140 	call	21114 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   1f8b0:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   1f8b4:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   1f8b8:	e0bffb04 	addi	r2,fp,-20
   1f8bc:	018000b4 	movhi	r6,2
   1f8c0:	31a1a804 	addi	r6,r6,-31072
   1f8c4:	100b883a 	mov	r5,r2
   1f8c8:	e13fff17 	ldw	r4,-4(fp)
   1f8cc:	001fc840 	call	1fc84 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   1f8d0:	e0bffb04 	addi	r2,fp,-20
   1f8d4:	100b883a 	mov	r5,r2
   1f8d8:	e13fff17 	ldw	r4,-4(fp)
   1f8dc:	001fb240 	call	1fb24 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   1f8e0:	d165bb04 	addi	r5,gp,-26900
   1f8e4:	e13fff17 	ldw	r4,-4(fp)
   1f8e8:	00222640 	call	22264 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1f8ec:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   1f8f0:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   1f8f4:	e0bffa17 	ldw	r2,-24(fp)
   1f8f8:	10000c1e 	bne	r2,zero,1f92c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   1f8fc:	e0bfff17 	ldw	r2,-4(fp)
   1f900:	10c00417 	ldw	r3,16(r2)
   1f904:	e0bfff17 	ldw	r2,-4(fp)
   1f908:	10800517 	ldw	r2,20(r2)
   1f90c:	d8000015 	stw	zero,0(sp)
   1f910:	e1ffff17 	ldw	r7,-4(fp)
   1f914:	018000b4 	movhi	r6,2
   1f918:	31bddd04 	addi	r6,r6,-2188
   1f91c:	100b883a 	mov	r5,r2
   1f920:	1809883a 	mov	r4,r3
   1f924:	00224780 	call	22478 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   1f928:	00000406 	br	1f93c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   1f92c:	010000f4 	movhi	r4,3
   1f930:	21299a04 	addi	r4,r4,-22936
   1f934:	0022afc0 	call	22afc <alt_printf>
    }

    return;
   1f938:	0001883a 	nop

}
   1f93c:	e037883a 	mov	sp,fp
   1f940:	dfc00117 	ldw	ra,4(sp)
   1f944:	df000017 	ldw	fp,0(sp)
   1f948:	dec00204 	addi	sp,sp,8
   1f94c:	f800283a 	ret

0001f950 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   1f950:	defffc04 	addi	sp,sp,-16
   1f954:	dfc00315 	stw	ra,12(sp)
   1f958:	df000215 	stw	fp,8(sp)
   1f95c:	df000204 	addi	fp,sp,8
   1f960:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   1f964:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   1f968:	d165bb04 	addi	r5,gp,-26900
   1f96c:	e13fff17 	ldw	r4,-4(fp)
   1f970:	00223c80 	call	223c8 <alt_find_dev>
   1f974:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   1f978:	e0bffe17 	ldw	r2,-8(fp)
}
   1f97c:	e037883a 	mov	sp,fp
   1f980:	dfc00117 	ldw	ra,4(sp)
   1f984:	df000017 	ldw	fp,0(sp)
   1f988:	dec00204 	addi	sp,sp,8
   1f98c:	f800283a 	ret

0001f990 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1f990:	defffc04 	addi	sp,sp,-16
   1f994:	df000315 	stw	fp,12(sp)
   1f998:	df000304 	addi	fp,sp,12
   1f99c:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1f9a0:	e0bfff17 	ldw	r2,-4(fp)
   1f9a4:	10800717 	ldw	r2,28(r2)
   1f9a8:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   1f9ac:	e0bfff17 	ldw	r2,-4(fp)
   1f9b0:	10800317 	ldw	r2,12(r2)
   1f9b4:	10800204 	addi	r2,r2,8
   1f9b8:	10800037 	ldwio	r2,0(r2)
   1f9bc:	1080004c 	andi	r2,r2,1
   1f9c0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   1f9c4:	e0bffe17 	ldw	r2,-8(fp)
   1f9c8:	10000226 	beq	r2,zero,1f9d4 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   1f9cc:	00bffe44 	movi	r2,-7
   1f9d0:	00001106 	br	1fa18 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   1f9d4:	e0bfff17 	ldw	r2,-4(fp)
   1f9d8:	10c00617 	ldw	r3,24(r2)
   1f9dc:	008000b4 	movhi	r2,2
   1f9e0:	10bd8504 	addi	r2,r2,-2540
   1f9e4:	1880021e 	bne	r3,r2,1f9f0 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   1f9e8:	e0bffd17 	ldw	r2,-12(fp)
   1f9ec:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   1f9f0:	e0bfff17 	ldw	r2,-4(fp)
   1f9f4:	10800317 	ldw	r2,12(r2)
   1f9f8:	10800204 	addi	r2,r2,8
   1f9fc:	e0ffff17 	ldw	r3,-4(fp)
   1fa00:	18c00317 	ldw	r3,12(r3)
   1fa04:	18c00204 	addi	r3,r3,8
   1fa08:	18c00037 	ldwio	r3,0(r3)
   1fa0c:	18c00054 	ori	r3,r3,1
   1fa10:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   1fa14:	0005883a 	mov	r2,zero
}
   1fa18:	e037883a 	mov	sp,fp
   1fa1c:	df000017 	ldw	fp,0(sp)
   1fa20:	dec00104 	addi	sp,sp,4
   1fa24:	f800283a 	ret

0001fa28 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1fa28:	defffe04 	addi	sp,sp,-8
   1fa2c:	df000115 	stw	fp,4(sp)
   1fa30:	df000104 	addi	fp,sp,4
   1fa34:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   1fa38:	e0bfff17 	ldw	r2,-4(fp)
   1fa3c:	10800317 	ldw	r2,12(r2)
   1fa40:	10800204 	addi	r2,r2,8
   1fa44:	e0ffff17 	ldw	r3,-4(fp)
   1fa48:	18c00317 	ldw	r3,12(r3)
   1fa4c:	18c00204 	addi	r3,r3,8
   1fa50:	19000037 	ldwio	r4,0(r3)
   1fa54:	00ffff84 	movi	r3,-2
   1fa58:	20c6703a 	and	r3,r4,r3
   1fa5c:	10c00035 	stwio	r3,0(r2)

}
   1fa60:	0001883a 	nop
   1fa64:	e037883a 	mov	sp,fp
   1fa68:	df000017 	ldw	fp,0(sp)
   1fa6c:	dec00104 	addi	sp,sp,4
   1fa70:	f800283a 	ret

0001fa74 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1fa74:	defffd04 	addi	sp,sp,-12
   1fa78:	df000215 	stw	fp,8(sp)
   1fa7c:	df000204 	addi	fp,sp,8
   1fa80:	e13ffe15 	stw	r4,-8(fp)
   1fa84:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   1fa88:	e0bffe17 	ldw	r2,-8(fp)
   1fa8c:	10c00d17 	ldw	r3,52(r2)
   1fa90:	e0bfff17 	ldw	r2,-4(fp)
   1fa94:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   1fa98:	e0bffe17 	ldw	r2,-8(fp)
   1fa9c:	10800317 	ldw	r2,12(r2)
   1faa0:	10800204 	addi	r2,r2,8
   1faa4:	10800037 	ldwio	r2,0(r2)
   1faa8:	1080008c 	andi	r2,r2,2
   1faac:	1005d07a 	srai	r2,r2,1
   1fab0:	1007883a 	mov	r3,r2
   1fab4:	e0bfff17 	ldw	r2,-4(fp)
   1fab8:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   1fabc:	e0bffe17 	ldw	r2,-8(fp)
   1fac0:	10800317 	ldw	r2,12(r2)
   1fac4:	10800904 	addi	r2,r2,36
   1fac8:	10800037 	ldwio	r2,0(r2)
   1facc:	1007883a 	mov	r3,r2
   1fad0:	e0bfff17 	ldw	r2,-4(fp)
   1fad4:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   1fad8:	e0bffe17 	ldw	r2,-8(fp)
   1fadc:	10800317 	ldw	r2,12(r2)
   1fae0:	10800804 	addi	r2,r2,32
   1fae4:	10800037 	ldwio	r2,0(r2)
   1fae8:	1007883a 	mov	r3,r2
   1faec:	e0bfff17 	ldw	r2,-4(fp)
   1faf0:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   1faf4:	e0bffe17 	ldw	r2,-8(fp)
   1faf8:	10800317 	ldw	r2,12(r2)
   1fafc:	10800a04 	addi	r2,r2,40
   1fb00:	10800037 	ldwio	r2,0(r2)
   1fb04:	1007883a 	mov	r3,r2
   1fb08:	e0bfff17 	ldw	r2,-4(fp)
   1fb0c:	10c0030d 	sth	r3,12(r2)
}
   1fb10:	0001883a 	nop
   1fb14:	e037883a 	mov	sp,fp
   1fb18:	df000017 	ldw	fp,0(sp)
   1fb1c:	dec00104 	addi	sp,sp,4
   1fb20:	f800283a 	ret

0001fb24 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1fb24:	defffd04 	addi	sp,sp,-12
   1fb28:	df000215 	stw	fp,8(sp)
   1fb2c:	df000204 	addi	fp,sp,8
   1fb30:	e13ffe15 	stw	r4,-8(fp)
   1fb34:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   1fb38:	e0bfff17 	ldw	r2,-4(fp)
   1fb3c:	10c00017 	ldw	r3,0(r2)
   1fb40:	e0bffe17 	ldw	r2,-8(fp)
   1fb44:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   1fb48:	e0bffe17 	ldw	r2,-8(fp)
   1fb4c:	10800317 	ldw	r2,12(r2)
   1fb50:	10c00204 	addi	r3,r2,8
   1fb54:	e0bffe17 	ldw	r2,-8(fp)
   1fb58:	10800317 	ldw	r2,12(r2)
   1fb5c:	10800204 	addi	r2,r2,8
   1fb60:	10800037 	ldwio	r2,0(r2)
   1fb64:	1009883a 	mov	r4,r2
   1fb68:	00bfff44 	movi	r2,-3
   1fb6c:	2088703a 	and	r4,r4,r2
   1fb70:	e0bfff17 	ldw	r2,-4(fp)
   1fb74:	10800117 	ldw	r2,4(r2)
   1fb78:	1085883a 	add	r2,r2,r2
   1fb7c:	1080008c 	andi	r2,r2,2
   1fb80:	2084b03a 	or	r2,r4,r2
   1fb84:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   1fb88:	e0bffe17 	ldw	r2,-8(fp)
   1fb8c:	10800317 	ldw	r2,12(r2)
   1fb90:	10800904 	addi	r2,r2,36
   1fb94:	e0ffff17 	ldw	r3,-4(fp)
   1fb98:	18c0020b 	ldhu	r3,8(r3)
   1fb9c:	18ffffcc 	andi	r3,r3,65535
   1fba0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   1fba4:	e0bffe17 	ldw	r2,-8(fp)
   1fba8:	10800317 	ldw	r2,12(r2)
   1fbac:	10800804 	addi	r2,r2,32
   1fbb0:	e0ffff17 	ldw	r3,-4(fp)
   1fbb4:	18c0028b 	ldhu	r3,10(r3)
   1fbb8:	18ffffcc 	andi	r3,r3,65535
   1fbbc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   1fbc0:	e0bffe17 	ldw	r2,-8(fp)
   1fbc4:	10800317 	ldw	r2,12(r2)
   1fbc8:	10800a04 	addi	r2,r2,40
   1fbcc:	e0ffff17 	ldw	r3,-4(fp)
   1fbd0:	18c0030b 	ldhu	r3,12(r3)
   1fbd4:	18ffffcc 	andi	r3,r3,65535
   1fbd8:	10c00035 	stwio	r3,0(r2)
}
   1fbdc:	0001883a 	nop
   1fbe0:	e037883a 	mov	sp,fp
   1fbe4:	df000017 	ldw	fp,0(sp)
   1fbe8:	dec00104 	addi	sp,sp,4
   1fbec:	f800283a 	ret

0001fbf0 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   1fbf0:	defffb04 	addi	sp,sp,-20
   1fbf4:	dfc00415 	stw	ra,16(sp)
   1fbf8:	df000315 	stw	fp,12(sp)
   1fbfc:	df000304 	addi	fp,sp,12
   1fc00:	e13ffd15 	stw	r4,-12(fp)
   1fc04:	e17ffe15 	stw	r5,-8(fp)
   1fc08:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   1fc0c:	e0bffe17 	ldw	r2,-8(fp)
   1fc10:	1080028b 	ldhu	r2,10(r2)
   1fc14:	10bfffcc 	andi	r2,r2,65535
   1fc18:	10000426 	beq	r2,zero,1fc2c <alt_avalon_i2c_master_config_speed_get+0x3c>
   1fc1c:	e0bffe17 	ldw	r2,-8(fp)
   1fc20:	1080020b 	ldhu	r2,8(r2)
   1fc24:	10bfffcc 	andi	r2,r2,65535
   1fc28:	1000021e 	bne	r2,zero,1fc34 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   1fc2c:	00bfff44 	movi	r2,-3
   1fc30:	00000f06 	br	1fc70 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   1fc34:	e0bffd17 	ldw	r2,-12(fp)
   1fc38:	11000c17 	ldw	r4,48(r2)
   1fc3c:	e0bffe17 	ldw	r2,-8(fp)
   1fc40:	1080028b 	ldhu	r2,10(r2)
   1fc44:	10ffffcc 	andi	r3,r2,65535
   1fc48:	e0bffe17 	ldw	r2,-8(fp)
   1fc4c:	1080020b 	ldhu	r2,8(r2)
   1fc50:	10bfffcc 	andi	r2,r2,65535
   1fc54:	1885883a 	add	r2,r3,r2
   1fc58:	100b883a 	mov	r5,r2
   1fc5c:	000cd440 	call	cd44 <__udivsi3>
   1fc60:	1007883a 	mov	r3,r2
   1fc64:	e0bfff17 	ldw	r2,-4(fp)
   1fc68:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   1fc6c:	0005883a 	mov	r2,zero
}
   1fc70:	e037883a 	mov	sp,fp
   1fc74:	dfc00117 	ldw	ra,4(sp)
   1fc78:	df000017 	ldw	fp,0(sp)
   1fc7c:	dec00204 	addi	sp,sp,8
   1fc80:	f800283a 	ret

0001fc84 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   1fc84:	defff904 	addi	sp,sp,-28
   1fc88:	dfc00615 	stw	ra,24(sp)
   1fc8c:	df000515 	stw	fp,20(sp)
   1fc90:	df000504 	addi	fp,sp,20
   1fc94:	e13ffd15 	stw	r4,-12(fp)
   1fc98:	e17ffe15 	stw	r5,-8(fp)
   1fc9c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   1fca0:	e0ffff17 	ldw	r3,-4(fp)
   1fca4:	008001b4 	movhi	r2,6
   1fca8:	1086a004 	addi	r2,r2,6784
   1fcac:	10c00436 	bltu	r2,r3,1fcc0 <alt_avalon_i2c_master_config_speed_set+0x3c>
   1fcb0:	e0bfff17 	ldw	r2,-4(fp)
   1fcb4:	10000226 	beq	r2,zero,1fcc0 <alt_avalon_i2c_master_config_speed_set+0x3c>
   1fcb8:	e0bfff17 	ldw	r2,-4(fp)
   1fcbc:	1000021e 	bne	r2,zero,1fcc8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   1fcc0:	00bfff04 	movi	r2,-4
   1fcc4:	00002906 	br	1fd6c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   1fcc8:	e0bffd17 	ldw	r2,-12(fp)
   1fccc:	10c00c17 	ldw	r3,48(r2)
   1fcd0:	e0bfff17 	ldw	r2,-4(fp)
   1fcd4:	1085883a 	add	r2,r2,r2
   1fcd8:	100b883a 	mov	r5,r2
   1fcdc:	1809883a 	mov	r4,r3
   1fce0:	000cd440 	call	cd44 <__udivsi3>
   1fce4:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   1fce8:	e0bffb17 	ldw	r2,-20(fp)
   1fcec:	10800f04 	addi	r2,r2,60
   1fcf0:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   1fcf4:	e0bffb17 	ldw	r2,-20(fp)
   1fcf8:	10bff104 	addi	r2,r2,-60
   1fcfc:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   1fd00:	e0ffff17 	ldw	r3,-4(fp)
   1fd04:	008000b4 	movhi	r2,2
   1fd08:	10a1a804 	addi	r2,r2,-31072
   1fd0c:	10c0042e 	bgeu	r2,r3,1fd20 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   1fd10:	e0bffe17 	ldw	r2,-8(fp)
   1fd14:	00c00044 	movi	r3,1
   1fd18:	10c00115 	stw	r3,4(r2)
   1fd1c:	00000206 	br	1fd28 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   1fd20:	e0bffe17 	ldw	r2,-8(fp)
   1fd24:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   1fd28:	e0bffb17 	ldw	r2,-20(fp)
   1fd2c:	1007883a 	mov	r3,r2
   1fd30:	e0bffe17 	ldw	r2,-8(fp)
   1fd34:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   1fd38:	e0bffc17 	ldw	r2,-16(fp)
   1fd3c:	1007883a 	mov	r3,r2
   1fd40:	e0bffe17 	ldw	r2,-8(fp)
   1fd44:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   1fd48:	e0bffb17 	ldw	r2,-20(fp)
   1fd4c:	1007883a 	mov	r3,r2
   1fd50:	e0bffb17 	ldw	r2,-20(fp)
   1fd54:	1004d07a 	srli	r2,r2,1
   1fd58:	1885c83a 	sub	r2,r3,r2
   1fd5c:	1007883a 	mov	r3,r2
   1fd60:	e0bffe17 	ldw	r2,-8(fp)
   1fd64:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   1fd68:	0005883a 	mov	r2,zero

}
   1fd6c:	e037883a 	mov	sp,fp
   1fd70:	dfc00117 	ldw	ra,4(sp)
   1fd74:	df000017 	ldw	fp,0(sp)
   1fd78:	dec00204 	addi	sp,sp,8
   1fd7c:	f800283a 	ret

0001fd80 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1fd80:	defffe04 	addi	sp,sp,-8
   1fd84:	df000115 	stw	fp,4(sp)
   1fd88:	df000104 	addi	fp,sp,4
   1fd8c:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   1fd90:	e0bfff17 	ldw	r2,-4(fp)
   1fd94:	10800317 	ldw	r2,12(r2)
   1fd98:	10800504 	addi	r2,r2,20
   1fd9c:	10800037 	ldwio	r2,0(r2)
   1fda0:	1080004c 	andi	r2,r2,1
   1fda4:	10000226 	beq	r2,zero,1fdb0 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   1fda8:	00800044 	movi	r2,1
   1fdac:	00000106 	br	1fdb4 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   1fdb0:	0005883a 	mov	r2,zero
}
   1fdb4:	e037883a 	mov	sp,fp
   1fdb8:	df000017 	ldw	fp,0(sp)
   1fdbc:	dec00104 	addi	sp,sp,4
   1fdc0:	f800283a 	ret

0001fdc4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   1fdc4:	defffb04 	addi	sp,sp,-20
   1fdc8:	df000415 	stw	fp,16(sp)
   1fdcc:	df000404 	addi	fp,sp,16
   1fdd0:	e13ffc15 	stw	r4,-16(fp)
   1fdd4:	e17ffd15 	stw	r5,-12(fp)
   1fdd8:	e1bffe15 	stw	r6,-8(fp)
   1fddc:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   1fde0:	e0bfff17 	ldw	r2,-4(fp)
   1fde4:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   1fde8:	00001406 	br	1fe3c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   1fdec:	e0bfff17 	ldw	r2,-4(fp)
   1fdf0:	10800017 	ldw	r2,0(r2)
   1fdf4:	e0fffd17 	ldw	r3,-12(fp)
   1fdf8:	1885883a 	add	r2,r3,r2
   1fdfc:	e0fffc17 	ldw	r3,-16(fp)
   1fe00:	18c00317 	ldw	r3,12(r3)
   1fe04:	18c00104 	addi	r3,r3,4
   1fe08:	18c00037 	ldwio	r3,0(r3)
   1fe0c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   1fe10:	e0bfff17 	ldw	r2,-4(fp)
   1fe14:	10800017 	ldw	r2,0(r2)
   1fe18:	10c00044 	addi	r3,r2,1
   1fe1c:	e0bfff17 	ldw	r2,-4(fp)
   1fe20:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   1fe24:	e0bfff17 	ldw	r2,-4(fp)
   1fe28:	10c00017 	ldw	r3,0(r2)
   1fe2c:	e0bffe17 	ldw	r2,-8(fp)
   1fe30:	1880021e 	bne	r3,r2,1fe3c <alt_avalon_i2c_rx_read_available+0x78>
   1fe34:	e0bffe17 	ldw	r2,-8(fp)
   1fe38:	1000061e 	bne	r2,zero,1fe54 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   1fe3c:	e0bffc17 	ldw	r2,-16(fp)
   1fe40:	10800317 	ldw	r2,12(r2)
   1fe44:	10800704 	addi	r2,r2,28
   1fe48:	10800037 	ldwio	r2,0(r2)
   1fe4c:	103fe71e 	bne	r2,zero,1fdec <__alt_data_end+0xfc01fdec>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   1fe50:	00000106 	br	1fe58 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   1fe54:	0001883a 	nop
    }
}
   1fe58:	0001883a 	nop
   1fe5c:	e037883a 	mov	sp,fp
   1fe60:	df000017 	ldw	fp,0(sp)
   1fe64:	dec00104 	addi	sp,sp,4
   1fe68:	f800283a 	ret

0001fe6c <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   1fe6c:	defffa04 	addi	sp,sp,-24
   1fe70:	dfc00515 	stw	ra,20(sp)
   1fe74:	df000415 	stw	fp,16(sp)
   1fe78:	df000404 	addi	fp,sp,16
   1fe7c:	e13ffe15 	stw	r4,-8(fp)
   1fe80:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   1fe84:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   1fe88:	008000b4 	movhi	r2,2
   1fe8c:	10a1a804 	addi	r2,r2,-31072
   1fe90:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   1fe94:	00000d06 	br	1fecc <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   1fe98:	e0bffd17 	ldw	r2,-12(fp)
   1fe9c:	108002a8 	cmpgeui	r2,r2,10
   1fea0:	1000021e 	bne	r2,zero,1feac <alt_avalon_i2c_rx_read+0x40>
   1fea4:	0109c404 	movi	r4,10000
   1fea8:	00220b00 	call	220b0 <alt_busy_sleep>
      if (--timeout == 0)
   1feac:	e0bffd17 	ldw	r2,-12(fp)
   1feb0:	10bfffc4 	addi	r2,r2,-1
   1feb4:	e0bffd15 	stw	r2,-12(fp)
   1feb8:	e0bffd17 	ldw	r2,-12(fp)
   1febc:	1000031e 	bne	r2,zero,1fecc <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   1fec0:	00bfff84 	movi	r2,-2
   1fec4:	e0bffc15 	stw	r2,-16(fp)
        break;
   1fec8:	00000506 	br	1fee0 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   1fecc:	e0bffe17 	ldw	r2,-8(fp)
   1fed0:	10800317 	ldw	r2,12(r2)
   1fed4:	10800704 	addi	r2,r2,28
   1fed8:	10800037 	ldwio	r2,0(r2)
   1fedc:	103fee26 	beq	r2,zero,1fe98 <__alt_data_end+0xfc01fe98>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   1fee0:	e0bffe17 	ldw	r2,-8(fp)
   1fee4:	10800317 	ldw	r2,12(r2)
   1fee8:	10800104 	addi	r2,r2,4
   1feec:	10800037 	ldwio	r2,0(r2)
   1fef0:	1007883a 	mov	r3,r2
   1fef4:	e0bfff17 	ldw	r2,-4(fp)
   1fef8:	10c00005 	stb	r3,0(r2)
        
    return status;
   1fefc:	e0bffc17 	ldw	r2,-16(fp)
}
   1ff00:	e037883a 	mov	sp,fp
   1ff04:	dfc00117 	ldw	ra,4(sp)
   1ff08:	df000017 	ldw	fp,0(sp)
   1ff0c:	dec00204 	addi	sp,sp,8
   1ff10:	f800283a 	ret

0001ff14 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   1ff14:	defff804 	addi	sp,sp,-32
   1ff18:	dfc00715 	stw	ra,28(sp)
   1ff1c:	df000615 	stw	fp,24(sp)
   1ff20:	df000604 	addi	fp,sp,24
   1ff24:	e13ffc15 	stw	r4,-16(fp)
   1ff28:	2809883a 	mov	r4,r5
   1ff2c:	3007883a 	mov	r3,r6
   1ff30:	3805883a 	mov	r2,r7
   1ff34:	e13ffd05 	stb	r4,-12(fp)
   1ff38:	e0fffe05 	stb	r3,-8(fp)
   1ff3c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   1ff40:	0089c404 	movi	r2,10000
   1ff44:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1ff48:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   1ff4c:	00000c06 	br	1ff80 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   1ff50:	e0bffa17 	ldw	r2,-24(fp)
   1ff54:	108002a8 	cmpgeui	r2,r2,10
   1ff58:	1000021e 	bne	r2,zero,1ff64 <alt_avalon_i2c_cmd_write+0x50>
   1ff5c:	0109c404 	movi	r4,10000
   1ff60:	00220b00 	call	220b0 <alt_busy_sleep>
      if (--timeout == 0)
   1ff64:	e0bffa17 	ldw	r2,-24(fp)
   1ff68:	10bfffc4 	addi	r2,r2,-1
   1ff6c:	e0bffa15 	stw	r2,-24(fp)
   1ff70:	e0bffa17 	ldw	r2,-24(fp)
   1ff74:	1000021e 	bne	r2,zero,1ff80 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   1ff78:	00bfff84 	movi	r2,-2
   1ff7c:	00001906 	br	1ffe4 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   1ff80:	e0bffc17 	ldw	r2,-16(fp)
   1ff84:	10800317 	ldw	r2,12(r2)
   1ff88:	10800404 	addi	r2,r2,16
   1ff8c:	10800037 	ldwio	r2,0(r2)
   1ff90:	1080004c 	andi	r2,r2,1
   1ff94:	103fee26 	beq	r2,zero,1ff50 <__alt_data_end+0xfc01ff50>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   1ff98:	e0bffc17 	ldw	r2,-16(fp)
   1ff9c:	10800317 	ldw	r2,12(r2)
   1ffa0:	e13ffd03 	ldbu	r4,-12(fp)
   1ffa4:	e0fffe03 	ldbu	r3,-8(fp)
   1ffa8:	1806927a 	slli	r3,r3,9
   1ffac:	20c8b03a 	or	r4,r4,r3
   1ffb0:	e0ffff03 	ldbu	r3,-4(fp)
   1ffb4:	1806923a 	slli	r3,r3,8
   1ffb8:	20c6b03a 	or	r3,r4,r3
   1ffbc:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   1ffc0:	e0bffb04 	addi	r2,fp,-20
   1ffc4:	100b883a 	mov	r5,r2
   1ffc8:	e13ffc17 	ldw	r4,-16(fp)
   1ffcc:	00201540 	call	20154 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   1ffd0:	e0bffb04 	addi	r2,fp,-20
   1ffd4:	100b883a 	mov	r5,r2
   1ffd8:	e13ffc17 	ldw	r4,-16(fp)
   1ffdc:	00201a00 	call	201a0 <alt_avalon_i2c_check_arblost>
    
    return status;
   1ffe0:	e0bffb17 	ldw	r2,-20(fp)
}
   1ffe4:	e037883a 	mov	sp,fp
   1ffe8:	dfc00117 	ldw	ra,4(sp)
   1ffec:	df000017 	ldw	fp,0(sp)
   1fff0:	dec00204 	addi	sp,sp,8
   1fff4:	f800283a 	ret

0001fff8 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   1fff8:	defffa04 	addi	sp,sp,-24
   1fffc:	dfc00515 	stw	ra,20(sp)
   20000:	df000415 	stw	fp,16(sp)
   20004:	df000404 	addi	fp,sp,16
   20008:	e13ffd15 	stw	r4,-12(fp)
   2000c:	e17ffe15 	stw	r5,-8(fp)
   20010:	3005883a 	mov	r2,r6
   20014:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   20018:	e0bffd17 	ldw	r2,-12(fp)
   2001c:	10800d17 	ldw	r2,52(r2)
   20020:	10800058 	cmpnei	r2,r2,1
   20024:	10001c1e 	bne	r2,zero,20098 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   20028:	e0bffd17 	ldw	r2,-12(fp)
   2002c:	10800917 	ldw	r2,36(r2)
   20030:	109e0014 	ori	r2,r2,30720
   20034:	1004d1fa 	srli	r2,r2,7
   20038:	1007883a 	mov	r3,r2
   2003c:	00bfff84 	movi	r2,-2
   20040:	1884703a 	and	r2,r3,r2
   20044:	1007883a 	mov	r3,r2
   20048:	e0bffe17 	ldw	r2,-8(fp)
   2004c:	1884b03a 	or	r2,r3,r2
   20050:	10803fcc 	andi	r2,r2,255
   20054:	e0ffff03 	ldbu	r3,-4(fp)
   20058:	000f883a 	mov	r7,zero
   2005c:	180d883a 	mov	r6,r3
   20060:	100b883a 	mov	r5,r2
   20064:	e13ffd17 	ldw	r4,-12(fp)
   20068:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   2006c:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   20070:	e0bffd17 	ldw	r2,-12(fp)
   20074:	10800917 	ldw	r2,36(r2)
   20078:	10803fcc 	andi	r2,r2,255
   2007c:	000f883a 	mov	r7,zero
   20080:	000d883a 	mov	r6,zero
   20084:	100b883a 	mov	r5,r2
   20088:	e13ffd17 	ldw	r4,-12(fp)
   2008c:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   20090:	e0bffc15 	stw	r2,-16(fp)
   20094:	00000e06 	br	200d0 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   20098:	e0bffd17 	ldw	r2,-12(fp)
   2009c:	10800917 	ldw	r2,36(r2)
   200a0:	1085883a 	add	r2,r2,r2
   200a4:	1007883a 	mov	r3,r2
   200a8:	e0bffe17 	ldw	r2,-8(fp)
   200ac:	1884b03a 	or	r2,r3,r2
   200b0:	10803fcc 	andi	r2,r2,255
   200b4:	e0ffff03 	ldbu	r3,-4(fp)
   200b8:	000f883a 	mov	r7,zero
   200bc:	180d883a 	mov	r6,r3
   200c0:	100b883a 	mov	r5,r2
   200c4:	e13ffd17 	ldw	r4,-12(fp)
   200c8:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   200cc:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   200d0:	e0bffc17 	ldw	r2,-16(fp)
}
   200d4:	e037883a 	mov	sp,fp
   200d8:	dfc00117 	ldw	ra,4(sp)
   200dc:	df000017 	ldw	fp,0(sp)
   200e0:	dec00204 	addi	sp,sp,8
   200e4:	f800283a 	ret

000200e8 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   200e8:	defffd04 	addi	sp,sp,-12
   200ec:	df000215 	stw	fp,8(sp)
   200f0:	df000204 	addi	fp,sp,8
   200f4:	e13ffe15 	stw	r4,-8(fp)
   200f8:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   200fc:	e0bffe17 	ldw	r2,-8(fp)
   20100:	10c00917 	ldw	r3,36(r2)
   20104:	e0bfff17 	ldw	r2,-4(fp)
   20108:	10c00015 	stw	r3,0(r2)
}
   2010c:	0001883a 	nop
   20110:	e037883a 	mov	sp,fp
   20114:	df000017 	ldw	fp,0(sp)
   20118:	dec00104 	addi	sp,sp,4
   2011c:	f800283a 	ret

00020120 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   20120:	defffd04 	addi	sp,sp,-12
   20124:	df000215 	stw	fp,8(sp)
   20128:	df000204 	addi	fp,sp,8
   2012c:	e13ffe15 	stw	r4,-8(fp)
   20130:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   20134:	e0bffe17 	ldw	r2,-8(fp)
   20138:	e0ffff17 	ldw	r3,-4(fp)
   2013c:	10c00915 	stw	r3,36(r2)
}
   20140:	0001883a 	nop
   20144:	e037883a 	mov	sp,fp
   20148:	df000017 	ldw	fp,0(sp)
   2014c:	dec00104 	addi	sp,sp,4
   20150:	f800283a 	ret

00020154 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   20154:	defffd04 	addi	sp,sp,-12
   20158:	df000215 	stw	fp,8(sp)
   2015c:	df000204 	addi	fp,sp,8
   20160:	e13ffe15 	stw	r4,-8(fp)
   20164:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   20168:	e0bffe17 	ldw	r2,-8(fp)
   2016c:	10800317 	ldw	r2,12(r2)
   20170:	10800404 	addi	r2,r2,16
   20174:	10800037 	ldwio	r2,0(r2)
   20178:	1080010c 	andi	r2,r2,4
   2017c:	10000326 	beq	r2,zero,2018c <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   20180:	e0bfff17 	ldw	r2,-4(fp)
   20184:	00fffec4 	movi	r3,-5
   20188:	10c00015 	stw	r3,0(r2)
    }
}
   2018c:	0001883a 	nop
   20190:	e037883a 	mov	sp,fp
   20194:	df000017 	ldw	fp,0(sp)
   20198:	dec00104 	addi	sp,sp,4
   2019c:	f800283a 	ret

000201a0 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   201a0:	defffd04 	addi	sp,sp,-12
   201a4:	df000215 	stw	fp,8(sp)
   201a8:	df000204 	addi	fp,sp,8
   201ac:	e13ffe15 	stw	r4,-8(fp)
   201b0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   201b4:	e0bffe17 	ldw	r2,-8(fp)
   201b8:	10800317 	ldw	r2,12(r2)
   201bc:	10800404 	addi	r2,r2,16
   201c0:	10800037 	ldwio	r2,0(r2)
   201c4:	1080020c 	andi	r2,r2,8
   201c8:	10000326 	beq	r2,zero,201d8 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   201cc:	e0bfff17 	ldw	r2,-4(fp)
   201d0:	00fffe84 	movi	r3,-6
   201d4:	10c00015 	stw	r3,0(r2)
    }
}
   201d8:	0001883a 	nop
   201dc:	e037883a 	mov	sp,fp
   201e0:	df000017 	ldw	fp,0(sp)
   201e4:	dec00104 	addi	sp,sp,4
   201e8:	f800283a 	ret

000201ec <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   201ec:	defff804 	addi	sp,sp,-32
   201f0:	dfc00715 	stw	ra,28(sp)
   201f4:	df000615 	stw	fp,24(sp)
   201f8:	df000604 	addi	fp,sp,24
   201fc:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20200:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   20204:	e0bfff17 	ldw	r2,-4(fp)
   20208:	10800717 	ldw	r2,28(r2)
   2020c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   20210:	e0bffb17 	ldw	r2,-20(fp)
   20214:	10800117 	ldw	r2,4(r2)
   20218:	10800044 	addi	r2,r2,1
   2021c:	0149c404 	movi	r5,10000
   20220:	1009883a 	mov	r4,r2
   20224:	000ce000 	call	ce00 <__mulsi3>
   20228:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   2022c:	e0bffd04 	addi	r2,fp,-12
   20230:	100b883a 	mov	r5,r2
   20234:	e13fff17 	ldw	r4,-4(fp)
   20238:	00210840 	call	21084 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   2023c:	e0bffd17 	ldw	r2,-12(fp)
   20240:	100b883a 	mov	r5,r2
   20244:	e13fff17 	ldw	r4,-4(fp)
   20248:	0020fb80 	call	20fb8 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   2024c:	e0bffc04 	addi	r2,fp,-16
   20250:	100b883a 	mov	r5,r2
   20254:	e13fff17 	ldw	r4,-4(fp)
   20258:	00201540 	call	20154 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   2025c:	e0bffc17 	ldw	r2,-16(fp)
   20260:	10002226 	beq	r2,zero,202ec <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   20264:	e0bffb17 	ldw	r2,-20(fp)
   20268:	10800217 	ldw	r2,8(r2)
   2026c:	10001d26 	beq	r2,zero,202e4 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20270:	00000d06 	br	202a8 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   20274:	e0bffa17 	ldw	r2,-24(fp)
   20278:	108002a8 	cmpgeui	r2,r2,10
   2027c:	1000021e 	bne	r2,zero,20288 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   20280:	0109c404 	movi	r4,10000
   20284:	00220b00 	call	220b0 <alt_busy_sleep>
              if (--timeout == 0)
   20288:	e0bffa17 	ldw	r2,-24(fp)
   2028c:	10bfffc4 	addi	r2,r2,-1
   20290:	e0bffa15 	stw	r2,-24(fp)
   20294:	e0bffa17 	ldw	r2,-24(fp)
   20298:	1000031e 	bne	r2,zero,202a8 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   2029c:	00bfff84 	movi	r2,-2
   202a0:	e0bffc15 	stw	r2,-16(fp)
                 break;
   202a4:	00000306 	br	202b4 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   202a8:	e13fff17 	ldw	r4,-4(fp)
   202ac:	001fd800 	call	1fd80 <alt_avalon_i2c_is_busy>
   202b0:	103ff01e 	bne	r2,zero,20274 <__alt_data_end+0xfc020274>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   202b4:	e0bffb17 	ldw	r2,-20(fp)
   202b8:	10800017 	ldw	r2,0(r2)
   202bc:	e0fffe04 	addi	r3,fp,-8
   202c0:	180f883a 	mov	r7,r3
   202c4:	000d883a 	mov	r6,zero
   202c8:	100b883a 	mov	r5,r2
   202cc:	e13fff17 	ldw	r4,-4(fp)
   202d0:	001fdc40 	call	1fdc4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   202d4:	e13fff17 	ldw	r4,-4(fp)
   202d8:	001fa280 	call	1fa28 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   202dc:	e0bffb17 	ldw	r2,-20(fp)
   202e0:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   202e4:	e0bffc17 	ldw	r2,-16(fp)
   202e8:	00000a06 	br	20314 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   202ec:	e0bffb17 	ldw	r2,-20(fp)
   202f0:	10800217 	ldw	r2,8(r2)
   202f4:	10000626 	beq	r2,zero,20310 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   202f8:	e0bffd17 	ldw	r2,-12(fp)
   202fc:	100b883a 	mov	r5,r2
   20300:	e13fff17 	ldw	r4,-4(fp)
   20304:	00210200 	call	21020 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   20308:	00bffe44 	movi	r2,-7
   2030c:	00000106 	br	20314 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   20310:	0005883a 	mov	r2,zero
}
   20314:	e037883a 	mov	sp,fp
   20318:	dfc00117 	ldw	ra,4(sp)
   2031c:	df000017 	ldw	fp,0(sp)
   20320:	dec00204 	addi	sp,sp,8
   20324:	f800283a 	ret

00020328 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   20328:	defff704 	addi	sp,sp,-36
   2032c:	dfc00815 	stw	ra,32(sp)
   20330:	df000715 	stw	fp,28(sp)
   20334:	df000704 	addi	fp,sp,28
   20338:	e13ffc15 	stw	r4,-16(fp)
   2033c:	e17ffd15 	stw	r5,-12(fp)
   20340:	e1bffe15 	stw	r6,-8(fp)
   20344:	3805883a 	mov	r2,r7
   20348:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2034c:	0089c404 	movi	r2,10000
   20350:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   20354:	00002206 	br	203e0 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   20358:	e0bffb17 	ldw	r2,-20(fp)
   2035c:	108002a8 	cmpgeui	r2,r2,10
   20360:	1000021e 	bne	r2,zero,2036c <alt_avalon_i2c_master_tx+0x44>
   20364:	0109c404 	movi	r4,10000
   20368:	00220b00 	call	220b0 <alt_busy_sleep>
      if (use_interrupts)
   2036c:	e0bfff03 	ldbu	r2,-4(fp)
   20370:	10000926 	beq	r2,zero,20398 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   20374:	00800044 	movi	r2,1
   20378:	d8800015 	stw	r2,0(sp)
   2037c:	000f883a 	mov	r7,zero
   20380:	e1bffe17 	ldw	r6,-8(fp)
   20384:	e17ffd17 	ldw	r5,-12(fp)
   20388:	e13ffc17 	ldw	r4,-16(fp)
   2038c:	00208d40 	call	208d4 <alt_avalon_i2c_master_transmit_using_interrupts>
   20390:	e0bffa15 	stw	r2,-24(fp)
   20394:	00000806 	br	203b8 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   20398:	00800044 	movi	r2,1
   2039c:	d8800015 	stw	r2,0(sp)
   203a0:	000f883a 	mov	r7,zero
   203a4:	e1bffe17 	ldw	r6,-8(fp)
   203a8:	e17ffd17 	ldw	r5,-12(fp)
   203ac:	e13ffc17 	ldw	r4,-16(fp)
   203b0:	00207140 	call	20714 <alt_avalon_i2c_master_transmit>
   203b4:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   203b8:	e0bffa17 	ldw	r2,-24(fp)
   203bc:	10bffea0 	cmpeqi	r2,r2,-6
   203c0:	1000061e 	bne	r2,zero,203dc <alt_avalon_i2c_master_tx+0xb4>
   203c4:	e0bffa17 	ldw	r2,-24(fp)
   203c8:	10bffee0 	cmpeqi	r2,r2,-5
   203cc:	1000031e 	bne	r2,zero,203dc <alt_avalon_i2c_master_tx+0xb4>
   203d0:	e0bffa17 	ldw	r2,-24(fp)
   203d4:	10bffe58 	cmpnei	r2,r2,-7
   203d8:	1000061e 	bne	r2,zero,203f4 <alt_avalon_i2c_master_tx+0xcc>
   203dc:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   203e0:	e0bffb17 	ldw	r2,-20(fp)
   203e4:	10ffffc4 	addi	r3,r2,-1
   203e8:	e0fffb15 	stw	r3,-20(fp)
   203ec:	103fda1e 	bne	r2,zero,20358 <__alt_data_end+0xfc020358>
   203f0:	00000106 	br	203f8 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   203f4:	0001883a 	nop
    }

    return status;
   203f8:	e0bffa17 	ldw	r2,-24(fp)
}        
   203fc:	e037883a 	mov	sp,fp
   20400:	dfc00117 	ldw	ra,4(sp)
   20404:	df000017 	ldw	fp,0(sp)
   20408:	dec00204 	addi	sp,sp,8
   2040c:	f800283a 	ret

00020410 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   20410:	defff704 	addi	sp,sp,-36
   20414:	dfc00815 	stw	ra,32(sp)
   20418:	df000715 	stw	fp,28(sp)
   2041c:	df000704 	addi	fp,sp,28
   20420:	e13ffc15 	stw	r4,-16(fp)
   20424:	e17ffd15 	stw	r5,-12(fp)
   20428:	e1bffe15 	stw	r6,-8(fp)
   2042c:	3805883a 	mov	r2,r7
   20430:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20434:	0089c404 	movi	r2,10000
   20438:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   2043c:	e0bfff03 	ldbu	r2,-4(fp)
   20440:	10003426 	beq	r2,zero,20514 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   20444:	00001706 	br	204a4 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20448:	e0bffb17 	ldw	r2,-20(fp)
   2044c:	108002a8 	cmpgeui	r2,r2,10
   20450:	1000021e 	bne	r2,zero,2045c <alt_avalon_i2c_master_rx+0x4c>
   20454:	0109c404 	movi	r4,10000
   20458:	00220b00 	call	220b0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   2045c:	00800044 	movi	r2,1
   20460:	d8800015 	stw	r2,0(sp)
   20464:	000f883a 	mov	r7,zero
   20468:	e1bffe17 	ldw	r6,-8(fp)
   2046c:	e17ffd17 	ldw	r5,-12(fp)
   20470:	e13ffc17 	ldw	r4,-16(fp)
   20474:	0020cf00 	call	20cf0 <alt_avalon_i2c_master_receive_using_interrupts>
   20478:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2047c:	e0bffa17 	ldw	r2,-24(fp)
   20480:	10bffea0 	cmpeqi	r2,r2,-6
   20484:	1000061e 	bne	r2,zero,204a0 <alt_avalon_i2c_master_rx+0x90>
   20488:	e0bffa17 	ldw	r2,-24(fp)
   2048c:	10bffee0 	cmpeqi	r2,r2,-5
   20490:	1000031e 	bne	r2,zero,204a0 <alt_avalon_i2c_master_rx+0x90>
   20494:	e0bffa17 	ldw	r2,-24(fp)
   20498:	10bffe58 	cmpnei	r2,r2,-7
   2049c:	1000221e 	bne	r2,zero,20528 <alt_avalon_i2c_master_rx+0x118>
   204a0:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   204a4:	e0bffb17 	ldw	r2,-20(fp)
   204a8:	10ffffc4 	addi	r3,r2,-1
   204ac:	e0fffb15 	stw	r3,-20(fp)
   204b0:	103fe51e 	bne	r2,zero,20448 <__alt_data_end+0xfc020448>
   204b4:	00001f06 	br	20534 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   204b8:	e0bffb17 	ldw	r2,-20(fp)
   204bc:	108002a8 	cmpgeui	r2,r2,10
   204c0:	1000021e 	bne	r2,zero,204cc <alt_avalon_i2c_master_rx+0xbc>
   204c4:	0109c404 	movi	r4,10000
   204c8:	00220b00 	call	220b0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   204cc:	00800044 	movi	r2,1
   204d0:	d8800015 	stw	r2,0(sp)
   204d4:	000f883a 	mov	r7,zero
   204d8:	e1bffe17 	ldw	r6,-8(fp)
   204dc:	e17ffd17 	ldw	r5,-12(fp)
   204e0:	e13ffc17 	ldw	r4,-16(fp)
   204e4:	0020ae00 	call	20ae0 <alt_avalon_i2c_master_receive>
   204e8:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   204ec:	e0bffa17 	ldw	r2,-24(fp)
   204f0:	10bffea0 	cmpeqi	r2,r2,-6
   204f4:	1000061e 	bne	r2,zero,20510 <alt_avalon_i2c_master_rx+0x100>
   204f8:	e0bffa17 	ldw	r2,-24(fp)
   204fc:	10bffee0 	cmpeqi	r2,r2,-5
   20500:	1000031e 	bne	r2,zero,20510 <alt_avalon_i2c_master_rx+0x100>
   20504:	e0bffa17 	ldw	r2,-24(fp)
   20508:	10bffe58 	cmpnei	r2,r2,-7
   2050c:	1000081e 	bne	r2,zero,20530 <alt_avalon_i2c_master_rx+0x120>
   20510:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   20514:	e0bffb17 	ldw	r2,-20(fp)
   20518:	10ffffc4 	addi	r3,r2,-1
   2051c:	e0fffb15 	stw	r3,-20(fp)
   20520:	103fe51e 	bne	r2,zero,204b8 <__alt_data_end+0xfc0204b8>
   20524:	00000306 	br	20534 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20528:	0001883a 	nop
   2052c:	00000106 	br	20534 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20530:	0001883a 	nop
      }
    }
    
    return status;
   20534:	e0bffa17 	ldw	r2,-24(fp)
}        
   20538:	e037883a 	mov	sp,fp
   2053c:	dfc00117 	ldw	ra,4(sp)
   20540:	df000017 	ldw	fp,0(sp)
   20544:	dec00204 	addi	sp,sp,8
   20548:	f800283a 	ret

0002054c <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   2054c:	defff604 	addi	sp,sp,-40
   20550:	dfc00915 	stw	ra,36(sp)
   20554:	df000815 	stw	fp,32(sp)
   20558:	df000804 	addi	fp,sp,32
   2055c:	e13ffb15 	stw	r4,-20(fp)
   20560:	e17ffc15 	stw	r5,-16(fp)
   20564:	e1bffd15 	stw	r6,-12(fp)
   20568:	e1fffe15 	stw	r7,-8(fp)
   2056c:	e0800317 	ldw	r2,12(fp)
   20570:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20574:	0089c404 	movi	r2,10000
   20578:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   2057c:	e0bfff03 	ldbu	r2,-4(fp)
   20580:	10005626 	beq	r2,zero,206dc <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   20584:	00002806 	br	20628 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20588:	e0bffa17 	ldw	r2,-24(fp)
   2058c:	108002a8 	cmpgeui	r2,r2,10
   20590:	1000021e 	bne	r2,zero,2059c <alt_avalon_i2c_master_tx_rx+0x50>
   20594:	0109c404 	movi	r4,10000
   20598:	00220b00 	call	220b0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   2059c:	d8000015 	stw	zero,0(sp)
   205a0:	000f883a 	mov	r7,zero
   205a4:	e1bffd17 	ldw	r6,-12(fp)
   205a8:	e17ffc17 	ldw	r5,-16(fp)
   205ac:	e13ffb17 	ldw	r4,-20(fp)
   205b0:	00208d40 	call	208d4 <alt_avalon_i2c_master_transmit_using_interrupts>
   205b4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   205b8:	e0bff917 	ldw	r2,-28(fp)
   205bc:	10bffea0 	cmpeqi	r2,r2,-6
   205c0:	1000191e 	bne	r2,zero,20628 <alt_avalon_i2c_master_tx_rx+0xdc>
   205c4:	e0bff917 	ldw	r2,-28(fp)
   205c8:	10bffee0 	cmpeqi	r2,r2,-5
   205cc:	1000161e 	bne	r2,zero,20628 <alt_avalon_i2c_master_tx_rx+0xdc>
   205d0:	e0bff917 	ldw	r2,-28(fp)
   205d4:	10bffe58 	cmpnei	r2,r2,-7
   205d8:	1000011e 	bne	r2,zero,205e0 <alt_avalon_i2c_master_tx_rx+0x94>
   205dc:	00001206 	br	20628 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   205e0:	00800044 	movi	r2,1
   205e4:	d8800015 	stw	r2,0(sp)
   205e8:	01c00044 	movi	r7,1
   205ec:	e1800217 	ldw	r6,8(fp)
   205f0:	e17ffe17 	ldw	r5,-8(fp)
   205f4:	e13ffb17 	ldw	r4,-20(fp)
   205f8:	0020cf00 	call	20cf0 <alt_avalon_i2c_master_receive_using_interrupts>
   205fc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20600:	e0bff917 	ldw	r2,-28(fp)
   20604:	10bffea0 	cmpeqi	r2,r2,-6
   20608:	1000061e 	bne	r2,zero,20624 <alt_avalon_i2c_master_tx_rx+0xd8>
   2060c:	e0bff917 	ldw	r2,-28(fp)
   20610:	10bffee0 	cmpeqi	r2,r2,-5
   20614:	1000031e 	bne	r2,zero,20624 <alt_avalon_i2c_master_tx_rx+0xd8>
   20618:	e0bff917 	ldw	r2,-28(fp)
   2061c:	10bffe58 	cmpnei	r2,r2,-7
   20620:	1000331e 	bne	r2,zero,206f0 <alt_avalon_i2c_master_tx_rx+0x1a4>
   20624:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   20628:	e0bffa17 	ldw	r2,-24(fp)
   2062c:	10ffffc4 	addi	r3,r2,-1
   20630:	e0fffa15 	stw	r3,-24(fp)
   20634:	103fd41e 	bne	r2,zero,20588 <__alt_data_end+0xfc020588>
   20638:	00003006 	br	206fc <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   2063c:	e0bffa17 	ldw	r2,-24(fp)
   20640:	108002a8 	cmpgeui	r2,r2,10
   20644:	1000021e 	bne	r2,zero,20650 <alt_avalon_i2c_master_tx_rx+0x104>
   20648:	0109c404 	movi	r4,10000
   2064c:	00220b00 	call	220b0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20650:	d8000015 	stw	zero,0(sp)
   20654:	000f883a 	mov	r7,zero
   20658:	e1bffd17 	ldw	r6,-12(fp)
   2065c:	e17ffc17 	ldw	r5,-16(fp)
   20660:	e13ffb17 	ldw	r4,-20(fp)
   20664:	00207140 	call	20714 <alt_avalon_i2c_master_transmit>
   20668:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2066c:	e0bff917 	ldw	r2,-28(fp)
   20670:	10bffea0 	cmpeqi	r2,r2,-6
   20674:	1000191e 	bne	r2,zero,206dc <alt_avalon_i2c_master_tx_rx+0x190>
   20678:	e0bff917 	ldw	r2,-28(fp)
   2067c:	10bffee0 	cmpeqi	r2,r2,-5
   20680:	1000161e 	bne	r2,zero,206dc <alt_avalon_i2c_master_tx_rx+0x190>
   20684:	e0bff917 	ldw	r2,-28(fp)
   20688:	10bffe58 	cmpnei	r2,r2,-7
   2068c:	1000011e 	bne	r2,zero,20694 <alt_avalon_i2c_master_tx_rx+0x148>
   20690:	00001206 	br	206dc <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   20694:	00800044 	movi	r2,1
   20698:	d8800015 	stw	r2,0(sp)
   2069c:	01c00044 	movi	r7,1
   206a0:	e1800217 	ldw	r6,8(fp)
   206a4:	e17ffe17 	ldw	r5,-8(fp)
   206a8:	e13ffb17 	ldw	r4,-20(fp)
   206ac:	0020ae00 	call	20ae0 <alt_avalon_i2c_master_receive>
   206b0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   206b4:	e0bff917 	ldw	r2,-28(fp)
   206b8:	10bffea0 	cmpeqi	r2,r2,-6
   206bc:	1000061e 	bne	r2,zero,206d8 <alt_avalon_i2c_master_tx_rx+0x18c>
   206c0:	e0bff917 	ldw	r2,-28(fp)
   206c4:	10bffee0 	cmpeqi	r2,r2,-5
   206c8:	1000031e 	bne	r2,zero,206d8 <alt_avalon_i2c_master_tx_rx+0x18c>
   206cc:	e0bff917 	ldw	r2,-28(fp)
   206d0:	10bffe58 	cmpnei	r2,r2,-7
   206d4:	1000081e 	bne	r2,zero,206f8 <alt_avalon_i2c_master_tx_rx+0x1ac>
   206d8:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   206dc:	e0bffa17 	ldw	r2,-24(fp)
   206e0:	10ffffc4 	addi	r3,r2,-1
   206e4:	e0fffa15 	stw	r3,-24(fp)
   206e8:	103fd41e 	bne	r2,zero,2063c <__alt_data_end+0xfc02063c>
   206ec:	00000306 	br	206fc <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   206f0:	0001883a 	nop
   206f4:	00000106 	br	206fc <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   206f8:	0001883a 	nop
      }
    }
    
    return status;
   206fc:	e0bff917 	ldw	r2,-28(fp)
}                                       
   20700:	e037883a 	mov	sp,fp
   20704:	dfc00117 	ldw	ra,4(sp)
   20708:	df000017 	ldw	fp,0(sp)
   2070c:	dec00204 	addi	sp,sp,8
   20710:	f800283a 	ret

00020714 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   20714:	defff704 	addi	sp,sp,-36
   20718:	dfc00815 	stw	ra,32(sp)
   2071c:	df000715 	stw	fp,28(sp)
   20720:	df000704 	addi	fp,sp,28
   20724:	e13ffb15 	stw	r4,-20(fp)
   20728:	e17ffc15 	stw	r5,-16(fp)
   2072c:	e1bffd15 	stw	r6,-12(fp)
   20730:	3807883a 	mov	r3,r7
   20734:	e0800217 	ldw	r2,8(fp)
   20738:	e0fffe05 	stb	r3,-8(fp)
   2073c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20740:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   20744:	0149c404 	movi	r5,10000
   20748:	e13ffd17 	ldw	r4,-12(fp)
   2074c:	000ce000 	call	ce00 <__mulsi3>
   20750:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   20754:	e0bffd17 	ldw	r2,-12(fp)
   20758:	1000021e 	bne	r2,zero,20764 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2075c:	0005883a 	mov	r2,zero
   20760:	00005706 	br	208c0 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20764:	e0bffe03 	ldbu	r2,-8(fp)
   20768:	10000a1e 	bne	r2,zero,20794 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2076c:	e13ffb17 	ldw	r4,-20(fp)
   20770:	001f9900 	call	1f990 <alt_avalon_i2c_enable>
   20774:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20778:	e0bffa17 	ldw	r2,-24(fp)
   2077c:	10000226 	beq	r2,zero,20788 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   20780:	e0bffa17 	ldw	r2,-24(fp)
   20784:	00004e06 	br	208c0 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20788:	01400704 	movi	r5,28
   2078c:	e13ffb17 	ldw	r4,-20(fp)
   20790:	0020f7c0 	call	20f7c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   20794:	e0bffe03 	ldbu	r2,-8(fp)
   20798:	100d883a 	mov	r6,r2
   2079c:	000b883a 	mov	r5,zero
   207a0:	e13ffb17 	ldw	r4,-20(fp)
   207a4:	001fff80 	call	1fff8 <alt_avalon_i2c_send_address>
   207a8:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   207ac:	e0bffa17 	ldw	r2,-24(fp)
   207b0:	1000271e 	bne	r2,zero,20850 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   207b4:	00000f06 	br	207f4 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   207b8:	e0bffc17 	ldw	r2,-16(fp)
   207bc:	10800003 	ldbu	r2,0(r2)
   207c0:	10803fcc 	andi	r2,r2,255
   207c4:	000f883a 	mov	r7,zero
   207c8:	000d883a 	mov	r6,zero
   207cc:	100b883a 	mov	r5,r2
   207d0:	e13ffb17 	ldw	r4,-20(fp)
   207d4:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   207d8:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   207dc:	e0bffc17 	ldw	r2,-16(fp)
   207e0:	10800044 	addi	r2,r2,1
   207e4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   207e8:	e0bffd17 	ldw	r2,-12(fp)
   207ec:	10bfffc4 	addi	r2,r2,-1
   207f0:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   207f4:	e0bffd17 	ldw	r2,-12(fp)
   207f8:	108000b0 	cmpltui	r2,r2,2
   207fc:	1000021e 	bne	r2,zero,20808 <alt_avalon_i2c_master_transmit+0xf4>
   20800:	e0bffa17 	ldw	r2,-24(fp)
   20804:	103fec26 	beq	r2,zero,207b8 <__alt_data_end+0xfc0207b8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20808:	e0bffa17 	ldw	r2,-24(fp)
   2080c:	1000101e 	bne	r2,zero,20850 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20810:	e0bffc17 	ldw	r2,-16(fp)
   20814:	10800003 	ldbu	r2,0(r2)
   20818:	10803fcc 	andi	r2,r2,255
   2081c:	e0ffff03 	ldbu	r3,-4(fp)
   20820:	180f883a 	mov	r7,r3
   20824:	000d883a 	mov	r6,zero
   20828:	100b883a 	mov	r5,r2
   2082c:	e13ffb17 	ldw	r4,-20(fp)
   20830:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   20834:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   20838:	e0bffc17 	ldw	r2,-16(fp)
   2083c:	10800044 	addi	r2,r2,1
   20840:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20844:	e0bffd17 	ldw	r2,-12(fp)
   20848:	10bfffc4 	addi	r2,r2,-1
   2084c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   20850:	e0bfff03 	ldbu	r2,-4(fp)
   20854:	1000101e 	bne	r2,zero,20898 <alt_avalon_i2c_master_transmit+0x184>
   20858:	e0bffa17 	ldw	r2,-24(fp)
   2085c:	10001726 	beq	r2,zero,208bc <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20860:	00000d06 	br	20898 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   20864:	e0bff917 	ldw	r2,-28(fp)
   20868:	108002a8 	cmpgeui	r2,r2,10
   2086c:	1000021e 	bne	r2,zero,20878 <alt_avalon_i2c_master_transmit+0x164>
   20870:	0109c404 	movi	r4,10000
   20874:	00220b00 	call	220b0 <alt_busy_sleep>
            if (--timeout == 0)
   20878:	e0bff917 	ldw	r2,-28(fp)
   2087c:	10bfffc4 	addi	r2,r2,-1
   20880:	e0bff915 	stw	r2,-28(fp)
   20884:	e0bff917 	ldw	r2,-28(fp)
   20888:	1000031e 	bne	r2,zero,20898 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2088c:	00bfff84 	movi	r2,-2
   20890:	e0bffa15 	stw	r2,-24(fp)
               break;
   20894:	00000306 	br	208a4 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20898:	e13ffb17 	ldw	r4,-20(fp)
   2089c:	001fd800 	call	1fd80 <alt_avalon_i2c_is_busy>
   208a0:	103ff01e 	bne	r2,zero,20864 <__alt_data_end+0xfc020864>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   208a4:	e0bffa04 	addi	r2,fp,-24
   208a8:	100b883a 	mov	r5,r2
   208ac:	e13ffb17 	ldw	r4,-20(fp)
   208b0:	00201540 	call	20154 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   208b4:	e13ffb17 	ldw	r4,-20(fp)
   208b8:	001fa280 	call	1fa28 <alt_avalon_i2c_disable>
    }


    return status;
   208bc:	e0bffa17 	ldw	r2,-24(fp)
}
   208c0:	e037883a 	mov	sp,fp
   208c4:	dfc00117 	ldw	ra,4(sp)
   208c8:	df000017 	ldw	fp,0(sp)
   208cc:	dec00204 	addi	sp,sp,8
   208d0:	f800283a 	ret

000208d4 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   208d4:	defff604 	addi	sp,sp,-40
   208d8:	dfc00915 	stw	ra,36(sp)
   208dc:	df000815 	stw	fp,32(sp)
   208e0:	df000804 	addi	fp,sp,32
   208e4:	e13ffb15 	stw	r4,-20(fp)
   208e8:	e17ffc15 	stw	r5,-16(fp)
   208ec:	e1bffd15 	stw	r6,-12(fp)
   208f0:	3807883a 	mov	r3,r7
   208f4:	e0800217 	ldw	r2,8(fp)
   208f8:	e0fffe05 	stb	r3,-8(fp)
   208fc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20900:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   20904:	0149c404 	movi	r5,10000
   20908:	e13ffd17 	ldw	r4,-12(fp)
   2090c:	000ce000 	call	ce00 <__mulsi3>
   20910:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   20914:	e0bffb17 	ldw	r2,-20(fp)
   20918:	10800717 	ldw	r2,28(r2)
   2091c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   20920:	e0bffd17 	ldw	r2,-12(fp)
   20924:	1000021e 	bne	r2,zero,20930 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20928:	0005883a 	mov	r2,zero
   2092c:	00006706 	br	20acc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   20930:	e0bffb17 	ldw	r2,-20(fp)
   20934:	10c00617 	ldw	r3,24(r2)
   20938:	008000b4 	movhi	r2,2
   2093c:	10bd8504 	addi	r2,r2,-2540
   20940:	18800226 	beq	r3,r2,2094c <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   20944:	00bfff44 	movi	r2,-3
   20948:	00006006 	br	20acc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2094c:	e0bffe03 	ldbu	r2,-8(fp)
   20950:	10000a1e 	bne	r2,zero,2097c <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20954:	e13ffb17 	ldw	r4,-20(fp)
   20958:	001f9900 	call	1f990 <alt_avalon_i2c_enable>
   2095c:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20960:	e0bff817 	ldw	r2,-32(fp)
   20964:	10000226 	beq	r2,zero,20970 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   20968:	e0bff817 	ldw	r2,-32(fp)
   2096c:	00005706 	br	20acc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20970:	01400704 	movi	r5,28
   20974:	e13ffb17 	ldw	r4,-20(fp)
   20978:	0020f7c0 	call	20f7c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   2097c:	e0bffe03 	ldbu	r2,-8(fp)
   20980:	100d883a 	mov	r6,r2
   20984:	000b883a 	mov	r5,zero
   20988:	e13ffb17 	ldw	r4,-20(fp)
   2098c:	001fff80 	call	1fff8 <alt_avalon_i2c_send_address>
   20990:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   20994:	e0bff817 	ldw	r2,-32(fp)
   20998:	1000271e 	bne	r2,zero,20a38 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2099c:	00000f06 	br	209dc <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   209a0:	e0bffc17 	ldw	r2,-16(fp)
   209a4:	10800003 	ldbu	r2,0(r2)
   209a8:	10803fcc 	andi	r2,r2,255
   209ac:	000f883a 	mov	r7,zero
   209b0:	000d883a 	mov	r6,zero
   209b4:	100b883a 	mov	r5,r2
   209b8:	e13ffb17 	ldw	r4,-20(fp)
   209bc:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   209c0:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   209c4:	e0bffc17 	ldw	r2,-16(fp)
   209c8:	10800044 	addi	r2,r2,1
   209cc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   209d0:	e0bffd17 	ldw	r2,-12(fp)
   209d4:	10bfffc4 	addi	r2,r2,-1
   209d8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   209dc:	e0bffd17 	ldw	r2,-12(fp)
   209e0:	108000b0 	cmpltui	r2,r2,2
   209e4:	1000021e 	bne	r2,zero,209f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   209e8:	e0bff817 	ldw	r2,-32(fp)
   209ec:	103fec26 	beq	r2,zero,209a0 <__alt_data_end+0xfc0209a0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   209f0:	e0bff817 	ldw	r2,-32(fp)
   209f4:	1000101e 	bne	r2,zero,20a38 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   209f8:	e0bffc17 	ldw	r2,-16(fp)
   209fc:	10800003 	ldbu	r2,0(r2)
   20a00:	10803fcc 	andi	r2,r2,255
   20a04:	e0ffff03 	ldbu	r3,-4(fp)
   20a08:	180f883a 	mov	r7,r3
   20a0c:	000d883a 	mov	r6,zero
   20a10:	100b883a 	mov	r5,r2
   20a14:	e13ffb17 	ldw	r4,-20(fp)
   20a18:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   20a1c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   20a20:	e0bffc17 	ldw	r2,-16(fp)
   20a24:	10800044 	addi	r2,r2,1
   20a28:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20a2c:	e0bffd17 	ldw	r2,-12(fp)
   20a30:	10bfffc4 	addi	r2,r2,-1
   20a34:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   20a38:	e0bff817 	ldw	r2,-32(fp)
   20a3c:	10001426 	beq	r2,zero,20a90 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20a40:	00000d06 	br	20a78 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   20a44:	e0bff917 	ldw	r2,-28(fp)
   20a48:	108002a8 	cmpgeui	r2,r2,10
   20a4c:	1000021e 	bne	r2,zero,20a58 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   20a50:	0109c404 	movi	r4,10000
   20a54:	00220b00 	call	220b0 <alt_busy_sleep>
            if (--timeout == 0)
   20a58:	e0bff917 	ldw	r2,-28(fp)
   20a5c:	10bfffc4 	addi	r2,r2,-1
   20a60:	e0bff915 	stw	r2,-28(fp)
   20a64:	e0bff917 	ldw	r2,-28(fp)
   20a68:	1000031e 	bne	r2,zero,20a78 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20a6c:	00bfff84 	movi	r2,-2
   20a70:	e0bff815 	stw	r2,-32(fp)
               break;
   20a74:	00000306 	br	20a84 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20a78:	e13ffb17 	ldw	r4,-20(fp)
   20a7c:	001fd800 	call	1fd80 <alt_avalon_i2c_is_busy>
   20a80:	103ff01e 	bne	r2,zero,20a44 <__alt_data_end+0xfc020a44>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20a84:	e13ffb17 	ldw	r4,-20(fp)
   20a88:	001fa280 	call	1fa28 <alt_avalon_i2c_disable>
   20a8c:	00000e06 	br	20ac8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   20a90:	e0bfff03 	ldbu	r2,-4(fp)
   20a94:	10000c26 	beq	r2,zero,20ac8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20a98:	01400704 	movi	r5,28
   20a9c:	e13ffb17 	ldw	r4,-20(fp)
   20aa0:	0020f7c0 	call	20f7c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   20aa4:	000b883a 	mov	r5,zero
   20aa8:	e13ffb17 	ldw	r4,-20(fp)
   20aac:	00211c40 	call	211c4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   20ab0:	e0bffa17 	ldw	r2,-24(fp)
   20ab4:	00c00044 	movi	r3,1
   20ab8:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   20abc:	01400044 	movi	r5,1
   20ac0:	e13ffb17 	ldw	r4,-20(fp)
   20ac4:	00210200 	call	21020 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   20ac8:	e0bff817 	ldw	r2,-32(fp)
}
   20acc:	e037883a 	mov	sp,fp
   20ad0:	dfc00117 	ldw	ra,4(sp)
   20ad4:	df000017 	ldw	fp,0(sp)
   20ad8:	dec00204 	addi	sp,sp,8
   20adc:	f800283a 	ret

00020ae0 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   20ae0:	defff404 	addi	sp,sp,-48
   20ae4:	dfc00b15 	stw	ra,44(sp)
   20ae8:	df000a15 	stw	fp,40(sp)
   20aec:	df000a04 	addi	fp,sp,40
   20af0:	e13ffb15 	stw	r4,-20(fp)
   20af4:	e17ffc15 	stw	r5,-16(fp)
   20af8:	e1bffd15 	stw	r6,-12(fp)
   20afc:	3807883a 	mov	r3,r7
   20b00:	e0800217 	ldw	r2,8(fp)
   20b04:	e0fffe05 	stb	r3,-8(fp)
   20b08:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20b0c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   20b10:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   20b14:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   20b18:	e0bffd17 	ldw	r2,-12(fp)
   20b1c:	1000021e 	bne	r2,zero,20b28 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20b20:	0005883a 	mov	r2,zero
   20b24:	00006d06 	br	20cdc <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20b28:	e0bffe03 	ldbu	r2,-8(fp)
   20b2c:	10000a1e 	bne	r2,zero,20b58 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20b30:	e13ffb17 	ldw	r4,-20(fp)
   20b34:	001f9900 	call	1f990 <alt_avalon_i2c_enable>
   20b38:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20b3c:	e0bff917 	ldw	r2,-28(fp)
   20b40:	10000226 	beq	r2,zero,20b4c <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   20b44:	e0bff917 	ldw	r2,-28(fp)
   20b48:	00006406 	br	20cdc <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20b4c:	01400704 	movi	r5,28
   20b50:	e13ffb17 	ldw	r4,-20(fp)
   20b54:	0020f7c0 	call	20f7c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   20b58:	e0bffe03 	ldbu	r2,-8(fp)
   20b5c:	100d883a 	mov	r6,r2
   20b60:	01400044 	movi	r5,1
   20b64:	e13ffb17 	ldw	r4,-20(fp)
   20b68:	001fff80 	call	1fff8 <alt_avalon_i2c_send_address>
   20b6c:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   20b70:	e0bff917 	ldw	r2,-28(fp)
   20b74:	1000341e 	bne	r2,zero,20c48 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20b78:	00001906 	br	20be0 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20b7c:	000f883a 	mov	r7,zero
   20b80:	000d883a 	mov	r6,zero
   20b84:	000b883a 	mov	r5,zero
   20b88:	e13ffb17 	ldw	r4,-20(fp)
   20b8c:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   20b90:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   20b94:	e0bff817 	ldw	r2,-32(fp)
   20b98:	10800044 	addi	r2,r2,1
   20b9c:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   20ba0:	e0bff917 	ldw	r2,-28(fp)
   20ba4:	10000e1e 	bne	r2,zero,20be0 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   20ba8:	e0bffa04 	addi	r2,fp,-24
   20bac:	100f883a 	mov	r7,r2
   20bb0:	000d883a 	mov	r6,zero
   20bb4:	e17ffc17 	ldw	r5,-16(fp)
   20bb8:	e13ffb17 	ldw	r4,-20(fp)
   20bbc:	001fdc40 	call	1fdc4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   20bc0:	e0bffa17 	ldw	r2,-24(fp)
   20bc4:	e0fffc17 	ldw	r3,-16(fp)
   20bc8:	1885883a 	add	r2,r3,r2
   20bcc:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   20bd0:	e0bffa17 	ldw	r2,-24(fp)
   20bd4:	e0fff717 	ldw	r3,-36(fp)
   20bd8:	1885883a 	add	r2,r3,r2
   20bdc:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20be0:	e0bffd17 	ldw	r2,-12(fp)
   20be4:	10bfffc4 	addi	r2,r2,-1
   20be8:	e0fff817 	ldw	r3,-32(fp)
   20bec:	1880022e 	bgeu	r3,r2,20bf8 <alt_avalon_i2c_master_receive+0x118>
   20bf0:	e0bff917 	ldw	r2,-28(fp)
   20bf4:	103fe126 	beq	r2,zero,20b7c <__alt_data_end+0xfc020b7c>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20bf8:	e0bff917 	ldw	r2,-28(fp)
   20bfc:	1000121e 	bne	r2,zero,20c48 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20c00:	e0bfff03 	ldbu	r2,-4(fp)
   20c04:	100f883a 	mov	r7,r2
   20c08:	000d883a 	mov	r6,zero
   20c0c:	000b883a 	mov	r5,zero
   20c10:	e13ffb17 	ldw	r4,-20(fp)
   20c14:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   20c18:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   20c1c:	00000a06 	br	20c48 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   20c20:	e17ffc17 	ldw	r5,-16(fp)
   20c24:	e13ffb17 	ldw	r4,-20(fp)
   20c28:	001fe6c0 	call	1fe6c <alt_avalon_i2c_rx_read>
   20c2c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   20c30:	e0bffc17 	ldw	r2,-16(fp)
   20c34:	10800044 	addi	r2,r2,1
   20c38:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   20c3c:	e0bff717 	ldw	r2,-36(fp)
   20c40:	10800044 	addi	r2,r2,1
   20c44:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   20c48:	e0fff717 	ldw	r3,-36(fp)
   20c4c:	e0bffd17 	ldw	r2,-12(fp)
   20c50:	1880022e 	bgeu	r3,r2,20c5c <alt_avalon_i2c_master_receive+0x17c>
   20c54:	e0bff917 	ldw	r2,-28(fp)
   20c58:	103ff126 	beq	r2,zero,20c20 <__alt_data_end+0xfc020c20>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   20c5c:	e0bfff03 	ldbu	r2,-4(fp)
   20c60:	1000021e 	bne	r2,zero,20c6c <alt_avalon_i2c_master_receive+0x18c>
   20c64:	e0bff917 	ldw	r2,-28(fp)
   20c68:	10001b26 	beq	r2,zero,20cd8 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   20c6c:	0149c404 	movi	r5,10000
   20c70:	e13ffd17 	ldw	r4,-12(fp)
   20c74:	000ce000 	call	ce00 <__mulsi3>
   20c78:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20c7c:	00000d06 	br	20cb4 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   20c80:	e0bff617 	ldw	r2,-40(fp)
   20c84:	108002a8 	cmpgeui	r2,r2,10
   20c88:	1000021e 	bne	r2,zero,20c94 <alt_avalon_i2c_master_receive+0x1b4>
   20c8c:	0109c404 	movi	r4,10000
   20c90:	00220b00 	call	220b0 <alt_busy_sleep>
            if (--timeout == 0)
   20c94:	e0bff617 	ldw	r2,-40(fp)
   20c98:	10bfffc4 	addi	r2,r2,-1
   20c9c:	e0bff615 	stw	r2,-40(fp)
   20ca0:	e0bff617 	ldw	r2,-40(fp)
   20ca4:	1000031e 	bne	r2,zero,20cb4 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20ca8:	00bfff84 	movi	r2,-2
   20cac:	e0bff915 	stw	r2,-28(fp)
               break;
   20cb0:	00000306 	br	20cc0 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20cb4:	e13ffb17 	ldw	r4,-20(fp)
   20cb8:	001fd800 	call	1fd80 <alt_avalon_i2c_is_busy>
   20cbc:	103ff01e 	bne	r2,zero,20c80 <__alt_data_end+0xfc020c80>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   20cc0:	e0bff904 	addi	r2,fp,-28
   20cc4:	100b883a 	mov	r5,r2
   20cc8:	e13ffb17 	ldw	r4,-20(fp)
   20ccc:	00201540 	call	20154 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20cd0:	e13ffb17 	ldw	r4,-20(fp)
   20cd4:	001fa280 	call	1fa28 <alt_avalon_i2c_disable>
    }

    return status;
   20cd8:	e0bff917 	ldw	r2,-28(fp)
}
   20cdc:	e037883a 	mov	sp,fp
   20ce0:	dfc00117 	ldw	ra,4(sp)
   20ce4:	df000017 	ldw	fp,0(sp)
   20ce8:	dec00204 	addi	sp,sp,8
   20cec:	f800283a 	ret

00020cf0 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   20cf0:	defff504 	addi	sp,sp,-44
   20cf4:	dfc00a15 	stw	ra,40(sp)
   20cf8:	df000915 	stw	fp,36(sp)
   20cfc:	df000904 	addi	fp,sp,36
   20d00:	e13ffb15 	stw	r4,-20(fp)
   20d04:	e17ffc15 	stw	r5,-16(fp)
   20d08:	e1bffd15 	stw	r6,-12(fp)
   20d0c:	3807883a 	mov	r3,r7
   20d10:	e0800217 	ldw	r2,8(fp)
   20d14:	e0fffe05 	stb	r3,-8(fp)
   20d18:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20d1c:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   20d20:	e0bffb17 	ldw	r2,-20(fp)
   20d24:	10800717 	ldw	r2,28(r2)
   20d28:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   20d2c:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   20d30:	e0bffd17 	ldw	r2,-12(fp)
   20d34:	1000021e 	bne	r2,zero,20d40 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20d38:	0005883a 	mov	r2,zero
   20d3c:	00006306 	br	20ecc <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   20d40:	e0bffb17 	ldw	r2,-20(fp)
   20d44:	10c00617 	ldw	r3,24(r2)
   20d48:	008000b4 	movhi	r2,2
   20d4c:	10bd8504 	addi	r2,r2,-2540
   20d50:	18800226 	beq	r3,r2,20d5c <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   20d54:	00bfff44 	movi	r2,-3
   20d58:	00005c06 	br	20ecc <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20d5c:	e0bffe03 	ldbu	r2,-8(fp)
   20d60:	10000a1e 	bne	r2,zero,20d8c <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20d64:	e13ffb17 	ldw	r4,-20(fp)
   20d68:	001f9900 	call	1f990 <alt_avalon_i2c_enable>
   20d6c:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20d70:	e0bff717 	ldw	r2,-36(fp)
   20d74:	10000226 	beq	r2,zero,20d80 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   20d78:	e0bff717 	ldw	r2,-36(fp)
   20d7c:	00005306 	br	20ecc <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20d80:	01400704 	movi	r5,28
   20d84:	e13ffb17 	ldw	r4,-20(fp)
   20d88:	0020f7c0 	call	20f7c <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   20d8c:	e0bffe03 	ldbu	r2,-8(fp)
   20d90:	100d883a 	mov	r6,r2
   20d94:	01400044 	movi	r5,1
   20d98:	e13ffb17 	ldw	r4,-20(fp)
   20d9c:	001fff80 	call	1fff8 <alt_avalon_i2c_send_address>
   20da0:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   20da4:	e0bff717 	ldw	r2,-36(fp)
   20da8:	1000191e 	bne	r2,zero,20e10 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20dac:	00000906 	br	20dd4 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20db0:	000f883a 	mov	r7,zero
   20db4:	000d883a 	mov	r6,zero
   20db8:	000b883a 	mov	r5,zero
   20dbc:	e13ffb17 	ldw	r4,-20(fp)
   20dc0:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   20dc4:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   20dc8:	e0bff917 	ldw	r2,-28(fp)
   20dcc:	10800044 	addi	r2,r2,1
   20dd0:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20dd4:	e0bffd17 	ldw	r2,-12(fp)
   20dd8:	10bfffc4 	addi	r2,r2,-1
   20ddc:	e0fff917 	ldw	r3,-28(fp)
   20de0:	1880022e 	bgeu	r3,r2,20dec <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   20de4:	e0bff717 	ldw	r2,-36(fp)
   20de8:	103ff126 	beq	r2,zero,20db0 <__alt_data_end+0xfc020db0>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20dec:	e0bff717 	ldw	r2,-36(fp)
   20df0:	1000071e 	bne	r2,zero,20e10 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20df4:	e0bfff03 	ldbu	r2,-4(fp)
   20df8:	100f883a 	mov	r7,r2
   20dfc:	000d883a 	mov	r6,zero
   20e00:	000b883a 	mov	r5,zero
   20e04:	e13ffb17 	ldw	r4,-20(fp)
   20e08:	001ff140 	call	1ff14 <alt_avalon_i2c_cmd_write>
   20e0c:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   20e10:	e0bff717 	ldw	r2,-36(fp)
   20e14:	10001826 	beq	r2,zero,20e78 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   20e18:	0149c404 	movi	r5,10000
   20e1c:	e13ffd17 	ldw	r4,-12(fp)
   20e20:	000ce000 	call	ce00 <__mulsi3>
   20e24:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20e28:	00000d06 	br	20e60 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   20e2c:	e0bff817 	ldw	r2,-32(fp)
   20e30:	108002a8 	cmpgeui	r2,r2,10
   20e34:	1000021e 	bne	r2,zero,20e40 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   20e38:	0109c404 	movi	r4,10000
   20e3c:	00220b00 	call	220b0 <alt_busy_sleep>
            if (--timeout == 0)
   20e40:	e0bff817 	ldw	r2,-32(fp)
   20e44:	10bfffc4 	addi	r2,r2,-1
   20e48:	e0bff815 	stw	r2,-32(fp)
   20e4c:	e0bff817 	ldw	r2,-32(fp)
   20e50:	1000031e 	bne	r2,zero,20e60 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20e54:	00bfff84 	movi	r2,-2
   20e58:	e0bff715 	stw	r2,-36(fp)
               break;
   20e5c:	00000306 	br	20e6c <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20e60:	e13ffb17 	ldw	r4,-20(fp)
   20e64:	001fd800 	call	1fd80 <alt_avalon_i2c_is_busy>
   20e68:	103ff01e 	bne	r2,zero,20e2c <__alt_data_end+0xfc020e2c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20e6c:	e13ffb17 	ldw	r4,-20(fp)
   20e70:	001fa280 	call	1fa28 <alt_avalon_i2c_disable>
   20e74:	00001406 	br	20ec8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   20e78:	e0bfff03 	ldbu	r2,-4(fp)
   20e7c:	10001226 	beq	r2,zero,20ec8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20e80:	01400704 	movi	r5,28
   20e84:	e13ffb17 	ldw	r4,-20(fp)
   20e88:	0020f7c0 	call	20f7c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   20e8c:	000b883a 	mov	r5,zero
   20e90:	e13ffb17 	ldw	r4,-20(fp)
   20e94:	00211140 	call	21114 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   20e98:	e0bffa17 	ldw	r2,-24(fp)
   20e9c:	00c00084 	movi	r3,2
   20ea0:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   20ea4:	e0bffa17 	ldw	r2,-24(fp)
   20ea8:	e0fffc17 	ldw	r3,-16(fp)
   20eac:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   20eb0:	e0bffa17 	ldw	r2,-24(fp)
   20eb4:	e0fffd17 	ldw	r3,-12(fp)
   20eb8:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   20ebc:	01400084 	movi	r5,2
   20ec0:	e13ffb17 	ldw	r4,-20(fp)
   20ec4:	00210200 	call	21020 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   20ec8:	e0bff717 	ldw	r2,-36(fp)
}
   20ecc:	e037883a 	mov	sp,fp
   20ed0:	dfc00117 	ldw	ra,4(sp)
   20ed4:	df000017 	ldw	fp,0(sp)
   20ed8:	dec00204 	addi	sp,sp,8
   20edc:	f800283a 	ret

00020ee0 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   20ee0:	defffd04 	addi	sp,sp,-12
   20ee4:	df000215 	stw	fp,8(sp)
   20ee8:	df000204 	addi	fp,sp,8
   20eec:	e13ffe15 	stw	r4,-8(fp)
   20ef0:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   20ef4:	e0bffe17 	ldw	r2,-8(fp)
   20ef8:	10800317 	ldw	r2,12(r2)
   20efc:	10800404 	addi	r2,r2,16
   20f00:	10c00037 	ldwio	r3,0(r2)
   20f04:	e0bffe17 	ldw	r2,-8(fp)
   20f08:	10800317 	ldw	r2,12(r2)
   20f0c:	10800304 	addi	r2,r2,12
   20f10:	10800037 	ldwio	r2,0(r2)
   20f14:	1884703a 	and	r2,r3,r2
   20f18:	1007883a 	mov	r3,r2
   20f1c:	e0bfff17 	ldw	r2,-4(fp)
   20f20:	10c00015 	stw	r3,0(r2)
}
   20f24:	0001883a 	nop
   20f28:	e037883a 	mov	sp,fp
   20f2c:	df000017 	ldw	fp,0(sp)
   20f30:	dec00104 	addi	sp,sp,4
   20f34:	f800283a 	ret

00020f38 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   20f38:	defffd04 	addi	sp,sp,-12
   20f3c:	df000215 	stw	fp,8(sp)
   20f40:	df000204 	addi	fp,sp,8
   20f44:	e13ffe15 	stw	r4,-8(fp)
   20f48:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   20f4c:	e0bffe17 	ldw	r2,-8(fp)
   20f50:	10800317 	ldw	r2,12(r2)
   20f54:	10800404 	addi	r2,r2,16
   20f58:	10800037 	ldwio	r2,0(r2)
   20f5c:	1007883a 	mov	r3,r2
   20f60:	e0bfff17 	ldw	r2,-4(fp)
   20f64:	10c00015 	stw	r3,0(r2)
}
   20f68:	0001883a 	nop
   20f6c:	e037883a 	mov	sp,fp
   20f70:	df000017 	ldw	fp,0(sp)
   20f74:	dec00104 	addi	sp,sp,4
   20f78:	f800283a 	ret

00020f7c <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   20f7c:	defffd04 	addi	sp,sp,-12
   20f80:	df000215 	stw	fp,8(sp)
   20f84:	df000204 	addi	fp,sp,8
   20f88:	e13ffe15 	stw	r4,-8(fp)
   20f8c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   20f90:	e0bffe17 	ldw	r2,-8(fp)
   20f94:	10800317 	ldw	r2,12(r2)
   20f98:	10800404 	addi	r2,r2,16
   20f9c:	e0ffff17 	ldw	r3,-4(fp)
   20fa0:	10c00035 	stwio	r3,0(r2)
}
   20fa4:	0001883a 	nop
   20fa8:	e037883a 	mov	sp,fp
   20fac:	df000017 	ldw	fp,0(sp)
   20fb0:	dec00104 	addi	sp,sp,4
   20fb4:	f800283a 	ret

00020fb8 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   20fb8:	defffb04 	addi	sp,sp,-20
   20fbc:	dfc00415 	stw	ra,16(sp)
   20fc0:	df000315 	stw	fp,12(sp)
   20fc4:	df000304 	addi	fp,sp,12
   20fc8:	e13ffe15 	stw	r4,-8(fp)
   20fcc:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   20fd0:	e17ffd04 	addi	r5,fp,-12
   20fd4:	e13ffe17 	ldw	r4,-8(fp)
   20fd8:	00210840 	call	21084 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   20fdc:	e0bfff17 	ldw	r2,-4(fp)
   20fe0:	0086303a 	nor	r3,zero,r2
   20fe4:	e0bffd17 	ldw	r2,-12(fp)
   20fe8:	1884703a 	and	r2,r3,r2
   20fec:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   20ff0:	e0bffe17 	ldw	r2,-8(fp)
   20ff4:	10800317 	ldw	r2,12(r2)
   20ff8:	10800304 	addi	r2,r2,12
   20ffc:	e0fffd17 	ldw	r3,-12(fp)
   21000:	18c007cc 	andi	r3,r3,31
   21004:	10c00035 	stwio	r3,0(r2)
}
   21008:	0001883a 	nop
   2100c:	e037883a 	mov	sp,fp
   21010:	dfc00117 	ldw	ra,4(sp)
   21014:	df000017 	ldw	fp,0(sp)
   21018:	dec00204 	addi	sp,sp,8
   2101c:	f800283a 	ret

00021020 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   21020:	defffb04 	addi	sp,sp,-20
   21024:	dfc00415 	stw	ra,16(sp)
   21028:	df000315 	stw	fp,12(sp)
   2102c:	df000304 	addi	fp,sp,12
   21030:	e13ffe15 	stw	r4,-8(fp)
   21034:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   21038:	e17ffd04 	addi	r5,fp,-12
   2103c:	e13ffe17 	ldw	r4,-8(fp)
   21040:	00210840 	call	21084 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   21044:	e0fffd17 	ldw	r3,-12(fp)
   21048:	e0bfff17 	ldw	r2,-4(fp)
   2104c:	1884b03a 	or	r2,r3,r2
   21050:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   21054:	e0bffe17 	ldw	r2,-8(fp)
   21058:	10800317 	ldw	r2,12(r2)
   2105c:	10800304 	addi	r2,r2,12
   21060:	e0fffd17 	ldw	r3,-12(fp)
   21064:	18c007cc 	andi	r3,r3,31
   21068:	10c00035 	stwio	r3,0(r2)
}
   2106c:	0001883a 	nop
   21070:	e037883a 	mov	sp,fp
   21074:	dfc00117 	ldw	ra,4(sp)
   21078:	df000017 	ldw	fp,0(sp)
   2107c:	dec00204 	addi	sp,sp,8
   21080:	f800283a 	ret

00021084 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   21084:	defffd04 	addi	sp,sp,-12
   21088:	df000215 	stw	fp,8(sp)
   2108c:	df000204 	addi	fp,sp,8
   21090:	e13ffe15 	stw	r4,-8(fp)
   21094:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   21098:	e0bffe17 	ldw	r2,-8(fp)
   2109c:	10800317 	ldw	r2,12(r2)
   210a0:	10800304 	addi	r2,r2,12
   210a4:	10800037 	ldwio	r2,0(r2)
   210a8:	10c007cc 	andi	r3,r2,31
   210ac:	e0bfff17 	ldw	r2,-4(fp)
   210b0:	10c00015 	stw	r3,0(r2)
}
   210b4:	0001883a 	nop
   210b8:	e037883a 	mov	sp,fp
   210bc:	df000017 	ldw	fp,0(sp)
   210c0:	dec00104 	addi	sp,sp,4
   210c4:	f800283a 	ret

000210c8 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   210c8:	defffd04 	addi	sp,sp,-12
   210cc:	df000215 	stw	fp,8(sp)
   210d0:	df000204 	addi	fp,sp,8
   210d4:	e13ffe15 	stw	r4,-8(fp)
   210d8:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   210dc:	e0bffe17 	ldw	r2,-8(fp)
   210e0:	10800317 	ldw	r2,12(r2)
   210e4:	10800204 	addi	r2,r2,8
   210e8:	10800037 	ldwio	r2,0(r2)
   210ec:	10800c0c 	andi	r2,r2,48
   210f0:	1005d13a 	srai	r2,r2,4
   210f4:	1007883a 	mov	r3,r2
   210f8:	e0bfff17 	ldw	r2,-4(fp)
   210fc:	10c00015 	stw	r3,0(r2)
}
   21100:	0001883a 	nop
   21104:	e037883a 	mov	sp,fp
   21108:	df000017 	ldw	fp,0(sp)
   2110c:	dec00104 	addi	sp,sp,4
   21110:	f800283a 	ret

00021114 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   21114:	defffd04 	addi	sp,sp,-12
   21118:	df000215 	stw	fp,8(sp)
   2111c:	df000204 	addi	fp,sp,8
   21120:	e13ffe15 	stw	r4,-8(fp)
   21124:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   21128:	e0bffe17 	ldw	r2,-8(fp)
   2112c:	10800317 	ldw	r2,12(r2)
   21130:	10800204 	addi	r2,r2,8
   21134:	e0fffe17 	ldw	r3,-8(fp)
   21138:	18c00317 	ldw	r3,12(r3)
   2113c:	18c00204 	addi	r3,r3,8
   21140:	18c00037 	ldwio	r3,0(r3)
   21144:	1809883a 	mov	r4,r3
   21148:	00fff3c4 	movi	r3,-49
   2114c:	20c8703a 	and	r4,r4,r3
   21150:	e0ffff17 	ldw	r3,-4(fp)
   21154:	1806913a 	slli	r3,r3,4
   21158:	18c00c0c 	andi	r3,r3,48
   2115c:	20c6b03a 	or	r3,r4,r3
   21160:	10c00035 	stwio	r3,0(r2)
}
   21164:	0001883a 	nop
   21168:	e037883a 	mov	sp,fp
   2116c:	df000017 	ldw	fp,0(sp)
   21170:	dec00104 	addi	sp,sp,4
   21174:	f800283a 	ret

00021178 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   21178:	defffd04 	addi	sp,sp,-12
   2117c:	df000215 	stw	fp,8(sp)
   21180:	df000204 	addi	fp,sp,8
   21184:	e13ffe15 	stw	r4,-8(fp)
   21188:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   2118c:	e0bffe17 	ldw	r2,-8(fp)
   21190:	10800317 	ldw	r2,12(r2)
   21194:	10800204 	addi	r2,r2,8
   21198:	10800037 	ldwio	r2,0(r2)
   2119c:	1080030c 	andi	r2,r2,12
   211a0:	1005d0ba 	srai	r2,r2,2
   211a4:	1007883a 	mov	r3,r2
   211a8:	e0bfff17 	ldw	r2,-4(fp)
   211ac:	10c00015 	stw	r3,0(r2)
}
   211b0:	0001883a 	nop
   211b4:	e037883a 	mov	sp,fp
   211b8:	df000017 	ldw	fp,0(sp)
   211bc:	dec00104 	addi	sp,sp,4
   211c0:	f800283a 	ret

000211c4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   211c4:	defffd04 	addi	sp,sp,-12
   211c8:	df000215 	stw	fp,8(sp)
   211cc:	df000204 	addi	fp,sp,8
   211d0:	e13ffe15 	stw	r4,-8(fp)
   211d4:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   211d8:	e0bffe17 	ldw	r2,-8(fp)
   211dc:	10800317 	ldw	r2,12(r2)
   211e0:	10c00204 	addi	r3,r2,8
   211e4:	e0bffe17 	ldw	r2,-8(fp)
   211e8:	10800317 	ldw	r2,12(r2)
   211ec:	10800204 	addi	r2,r2,8
   211f0:	10800037 	ldwio	r2,0(r2)
   211f4:	1009883a 	mov	r4,r2
   211f8:	00bffcc4 	movi	r2,-13
   211fc:	2088703a 	and	r4,r4,r2
   21200:	e0bfff17 	ldw	r2,-4(fp)
   21204:	1085883a 	add	r2,r2,r2
   21208:	1085883a 	add	r2,r2,r2
   2120c:	1080030c 	andi	r2,r2,12
   21210:	2084b03a 	or	r2,r4,r2
   21214:	18800035 	stwio	r2,0(r3)
}
   21218:	0001883a 	nop
   2121c:	e037883a 	mov	sp,fp
   21220:	df000017 	ldw	fp,0(sp)
   21224:	dec00104 	addi	sp,sp,4
   21228:	f800283a 	ret

0002122c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2122c:	defffa04 	addi	sp,sp,-24
   21230:	dfc00515 	stw	ra,20(sp)
   21234:	df000415 	stw	fp,16(sp)
   21238:	df000404 	addi	fp,sp,16
   2123c:	e13ffd15 	stw	r4,-12(fp)
   21240:	e17ffe15 	stw	r5,-8(fp)
   21244:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21248:	e0bffd17 	ldw	r2,-12(fp)
   2124c:	10800017 	ldw	r2,0(r2)
   21250:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   21254:	e0bffc17 	ldw	r2,-16(fp)
   21258:	10c00a04 	addi	r3,r2,40
   2125c:	e0bffd17 	ldw	r2,-12(fp)
   21260:	10800217 	ldw	r2,8(r2)
   21264:	100f883a 	mov	r7,r2
   21268:	e1bfff17 	ldw	r6,-4(fp)
   2126c:	e17ffe17 	ldw	r5,-8(fp)
   21270:	1809883a 	mov	r4,r3
   21274:	00218540 	call	21854 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   21278:	e037883a 	mov	sp,fp
   2127c:	dfc00117 	ldw	ra,4(sp)
   21280:	df000017 	ldw	fp,0(sp)
   21284:	dec00204 	addi	sp,sp,8
   21288:	f800283a 	ret

0002128c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2128c:	defffa04 	addi	sp,sp,-24
   21290:	dfc00515 	stw	ra,20(sp)
   21294:	df000415 	stw	fp,16(sp)
   21298:	df000404 	addi	fp,sp,16
   2129c:	e13ffd15 	stw	r4,-12(fp)
   212a0:	e17ffe15 	stw	r5,-8(fp)
   212a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   212a8:	e0bffd17 	ldw	r2,-12(fp)
   212ac:	10800017 	ldw	r2,0(r2)
   212b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   212b4:	e0bffc17 	ldw	r2,-16(fp)
   212b8:	10c00a04 	addi	r3,r2,40
   212bc:	e0bffd17 	ldw	r2,-12(fp)
   212c0:	10800217 	ldw	r2,8(r2)
   212c4:	100f883a 	mov	r7,r2
   212c8:	e1bfff17 	ldw	r6,-4(fp)
   212cc:	e17ffe17 	ldw	r5,-8(fp)
   212d0:	1809883a 	mov	r4,r3
   212d4:	0021a700 	call	21a70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   212d8:	e037883a 	mov	sp,fp
   212dc:	dfc00117 	ldw	ra,4(sp)
   212e0:	df000017 	ldw	fp,0(sp)
   212e4:	dec00204 	addi	sp,sp,8
   212e8:	f800283a 	ret

000212ec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   212ec:	defffc04 	addi	sp,sp,-16
   212f0:	dfc00315 	stw	ra,12(sp)
   212f4:	df000215 	stw	fp,8(sp)
   212f8:	df000204 	addi	fp,sp,8
   212fc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21300:	e0bfff17 	ldw	r2,-4(fp)
   21304:	10800017 	ldw	r2,0(r2)
   21308:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2130c:	e0bffe17 	ldw	r2,-8(fp)
   21310:	10c00a04 	addi	r3,r2,40
   21314:	e0bfff17 	ldw	r2,-4(fp)
   21318:	10800217 	ldw	r2,8(r2)
   2131c:	100b883a 	mov	r5,r2
   21320:	1809883a 	mov	r4,r3
   21324:	00216fc0 	call	216fc <altera_avalon_jtag_uart_close>
}
   21328:	e037883a 	mov	sp,fp
   2132c:	dfc00117 	ldw	ra,4(sp)
   21330:	df000017 	ldw	fp,0(sp)
   21334:	dec00204 	addi	sp,sp,8
   21338:	f800283a 	ret

0002133c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2133c:	defffa04 	addi	sp,sp,-24
   21340:	dfc00515 	stw	ra,20(sp)
   21344:	df000415 	stw	fp,16(sp)
   21348:	df000404 	addi	fp,sp,16
   2134c:	e13ffd15 	stw	r4,-12(fp)
   21350:	e17ffe15 	stw	r5,-8(fp)
   21354:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   21358:	e0bffd17 	ldw	r2,-12(fp)
   2135c:	10800017 	ldw	r2,0(r2)
   21360:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   21364:	e0bffc17 	ldw	r2,-16(fp)
   21368:	10800a04 	addi	r2,r2,40
   2136c:	e1bfff17 	ldw	r6,-4(fp)
   21370:	e17ffe17 	ldw	r5,-8(fp)
   21374:	1009883a 	mov	r4,r2
   21378:	00217640 	call	21764 <altera_avalon_jtag_uart_ioctl>
}
   2137c:	e037883a 	mov	sp,fp
   21380:	dfc00117 	ldw	ra,4(sp)
   21384:	df000017 	ldw	fp,0(sp)
   21388:	dec00204 	addi	sp,sp,8
   2138c:	f800283a 	ret

00021390 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   21390:	defffa04 	addi	sp,sp,-24
   21394:	dfc00515 	stw	ra,20(sp)
   21398:	df000415 	stw	fp,16(sp)
   2139c:	df000404 	addi	fp,sp,16
   213a0:	e13ffd15 	stw	r4,-12(fp)
   213a4:	e17ffe15 	stw	r5,-8(fp)
   213a8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   213ac:	e0bffd17 	ldw	r2,-12(fp)
   213b0:	00c00044 	movi	r3,1
   213b4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   213b8:	e0bffd17 	ldw	r2,-12(fp)
   213bc:	10800017 	ldw	r2,0(r2)
   213c0:	10800104 	addi	r2,r2,4
   213c4:	1007883a 	mov	r3,r2
   213c8:	e0bffd17 	ldw	r2,-12(fp)
   213cc:	10800817 	ldw	r2,32(r2)
   213d0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   213d4:	e0bffe17 	ldw	r2,-8(fp)
   213d8:	e0ffff17 	ldw	r3,-4(fp)
   213dc:	d8000015 	stw	zero,0(sp)
   213e0:	e1fffd17 	ldw	r7,-12(fp)
   213e4:	018000b4 	movhi	r6,2
   213e8:	31851404 	addi	r6,r6,5200
   213ec:	180b883a 	mov	r5,r3
   213f0:	1009883a 	mov	r4,r2
   213f4:	00224780 	call	22478 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   213f8:	e0bffd17 	ldw	r2,-12(fp)
   213fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   21400:	e0bffd17 	ldw	r2,-12(fp)
   21404:	10800204 	addi	r2,r2,8
   21408:	d0f24b17 	ldw	r3,-14036(gp)
   2140c:	e1fffd17 	ldw	r7,-12(fp)
   21410:	018000b4 	movhi	r6,2
   21414:	31859704 	addi	r6,r6,5724
   21418:	180b883a 	mov	r5,r3
   2141c:	1009883a 	mov	r4,r2
   21420:	0021f840 	call	21f84 <alt_alarm_start>
   21424:	1000040e 	bge	r2,zero,21438 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   21428:	e0fffd17 	ldw	r3,-12(fp)
   2142c:	00a00034 	movhi	r2,32768
   21430:	10bfffc4 	addi	r2,r2,-1
   21434:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   21438:	0001883a 	nop
   2143c:	e037883a 	mov	sp,fp
   21440:	dfc00117 	ldw	ra,4(sp)
   21444:	df000017 	ldw	fp,0(sp)
   21448:	dec00204 	addi	sp,sp,8
   2144c:	f800283a 	ret

00021450 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   21450:	defff804 	addi	sp,sp,-32
   21454:	df000715 	stw	fp,28(sp)
   21458:	df000704 	addi	fp,sp,28
   2145c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   21460:	e0bfff17 	ldw	r2,-4(fp)
   21464:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   21468:	e0bffb17 	ldw	r2,-20(fp)
   2146c:	10800017 	ldw	r2,0(r2)
   21470:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21474:	e0bffc17 	ldw	r2,-16(fp)
   21478:	10800104 	addi	r2,r2,4
   2147c:	10800037 	ldwio	r2,0(r2)
   21480:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   21484:	e0bffd17 	ldw	r2,-12(fp)
   21488:	1080c00c 	andi	r2,r2,768
   2148c:	10006d26 	beq	r2,zero,21644 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   21490:	e0bffd17 	ldw	r2,-12(fp)
   21494:	1080400c 	andi	r2,r2,256
   21498:	10003526 	beq	r2,zero,21570 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2149c:	00800074 	movhi	r2,1
   214a0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   214a4:	e0bffb17 	ldw	r2,-20(fp)
   214a8:	10800a17 	ldw	r2,40(r2)
   214ac:	10800044 	addi	r2,r2,1
   214b0:	1081ffcc 	andi	r2,r2,2047
   214b4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   214b8:	e0bffb17 	ldw	r2,-20(fp)
   214bc:	10c00b17 	ldw	r3,44(r2)
   214c0:	e0bffe17 	ldw	r2,-8(fp)
   214c4:	18801526 	beq	r3,r2,2151c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   214c8:	e0bffc17 	ldw	r2,-16(fp)
   214cc:	10800037 	ldwio	r2,0(r2)
   214d0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   214d4:	e0bff917 	ldw	r2,-28(fp)
   214d8:	10a0000c 	andi	r2,r2,32768
   214dc:	10001126 	beq	r2,zero,21524 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   214e0:	e0bffb17 	ldw	r2,-20(fp)
   214e4:	10800a17 	ldw	r2,40(r2)
   214e8:	e0fff917 	ldw	r3,-28(fp)
   214ec:	1809883a 	mov	r4,r3
   214f0:	e0fffb17 	ldw	r3,-20(fp)
   214f4:	1885883a 	add	r2,r3,r2
   214f8:	10800e04 	addi	r2,r2,56
   214fc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21500:	e0bffb17 	ldw	r2,-20(fp)
   21504:	10800a17 	ldw	r2,40(r2)
   21508:	10800044 	addi	r2,r2,1
   2150c:	10c1ffcc 	andi	r3,r2,2047
   21510:	e0bffb17 	ldw	r2,-20(fp)
   21514:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   21518:	003fe206 	br	214a4 <__alt_data_end+0xfc0214a4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2151c:	0001883a 	nop
   21520:	00000106 	br	21528 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   21524:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   21528:	e0bff917 	ldw	r2,-28(fp)
   2152c:	10bfffec 	andhi	r2,r2,65535
   21530:	10000f26 	beq	r2,zero,21570 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21534:	e0bffb17 	ldw	r2,-20(fp)
   21538:	10c00817 	ldw	r3,32(r2)
   2153c:	00bfff84 	movi	r2,-2
   21540:	1886703a 	and	r3,r3,r2
   21544:	e0bffb17 	ldw	r2,-20(fp)
   21548:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2154c:	e0bffc17 	ldw	r2,-16(fp)
   21550:	10800104 	addi	r2,r2,4
   21554:	1007883a 	mov	r3,r2
   21558:	e0bffb17 	ldw	r2,-20(fp)
   2155c:	10800817 	ldw	r2,32(r2)
   21560:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21564:	e0bffc17 	ldw	r2,-16(fp)
   21568:	10800104 	addi	r2,r2,4
   2156c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   21570:	e0bffd17 	ldw	r2,-12(fp)
   21574:	1080800c 	andi	r2,r2,512
   21578:	103fbe26 	beq	r2,zero,21474 <__alt_data_end+0xfc021474>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2157c:	e0bffd17 	ldw	r2,-12(fp)
   21580:	1004d43a 	srli	r2,r2,16
   21584:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   21588:	00001406 	br	215dc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2158c:	e0bffc17 	ldw	r2,-16(fp)
   21590:	e0fffb17 	ldw	r3,-20(fp)
   21594:	18c00d17 	ldw	r3,52(r3)
   21598:	e13ffb17 	ldw	r4,-20(fp)
   2159c:	20c7883a 	add	r3,r4,r3
   215a0:	18c20e04 	addi	r3,r3,2104
   215a4:	18c00003 	ldbu	r3,0(r3)
   215a8:	18c03fcc 	andi	r3,r3,255
   215ac:	18c0201c 	xori	r3,r3,128
   215b0:	18ffe004 	addi	r3,r3,-128
   215b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   215b8:	e0bffb17 	ldw	r2,-20(fp)
   215bc:	10800d17 	ldw	r2,52(r2)
   215c0:	10800044 	addi	r2,r2,1
   215c4:	10c1ffcc 	andi	r3,r2,2047
   215c8:	e0bffb17 	ldw	r2,-20(fp)
   215cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   215d0:	e0bffa17 	ldw	r2,-24(fp)
   215d4:	10bfffc4 	addi	r2,r2,-1
   215d8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   215dc:	e0bffa17 	ldw	r2,-24(fp)
   215e0:	10000526 	beq	r2,zero,215f8 <altera_avalon_jtag_uart_irq+0x1a8>
   215e4:	e0bffb17 	ldw	r2,-20(fp)
   215e8:	10c00d17 	ldw	r3,52(r2)
   215ec:	e0bffb17 	ldw	r2,-20(fp)
   215f0:	10800c17 	ldw	r2,48(r2)
   215f4:	18bfe51e 	bne	r3,r2,2158c <__alt_data_end+0xfc02158c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   215f8:	e0bffa17 	ldw	r2,-24(fp)
   215fc:	103f9d26 	beq	r2,zero,21474 <__alt_data_end+0xfc021474>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21600:	e0bffb17 	ldw	r2,-20(fp)
   21604:	10c00817 	ldw	r3,32(r2)
   21608:	00bfff44 	movi	r2,-3
   2160c:	1886703a 	and	r3,r3,r2
   21610:	e0bffb17 	ldw	r2,-20(fp)
   21614:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21618:	e0bffb17 	ldw	r2,-20(fp)
   2161c:	10800017 	ldw	r2,0(r2)
   21620:	10800104 	addi	r2,r2,4
   21624:	1007883a 	mov	r3,r2
   21628:	e0bffb17 	ldw	r2,-20(fp)
   2162c:	10800817 	ldw	r2,32(r2)
   21630:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21634:	e0bffc17 	ldw	r2,-16(fp)
   21638:	10800104 	addi	r2,r2,4
   2163c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   21640:	003f8c06 	br	21474 <__alt_data_end+0xfc021474>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   21644:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   21648:	0001883a 	nop
   2164c:	e037883a 	mov	sp,fp
   21650:	df000017 	ldw	fp,0(sp)
   21654:	dec00104 	addi	sp,sp,4
   21658:	f800283a 	ret

0002165c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2165c:	defff804 	addi	sp,sp,-32
   21660:	df000715 	stw	fp,28(sp)
   21664:	df000704 	addi	fp,sp,28
   21668:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2166c:	e0bffb17 	ldw	r2,-20(fp)
   21670:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   21674:	e0bff917 	ldw	r2,-28(fp)
   21678:	10800017 	ldw	r2,0(r2)
   2167c:	10800104 	addi	r2,r2,4
   21680:	10800037 	ldwio	r2,0(r2)
   21684:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   21688:	e0bffa17 	ldw	r2,-24(fp)
   2168c:	1081000c 	andi	r2,r2,1024
   21690:	10000b26 	beq	r2,zero,216c0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   21694:	e0bff917 	ldw	r2,-28(fp)
   21698:	10800017 	ldw	r2,0(r2)
   2169c:	10800104 	addi	r2,r2,4
   216a0:	1007883a 	mov	r3,r2
   216a4:	e0bff917 	ldw	r2,-28(fp)
   216a8:	10800817 	ldw	r2,32(r2)
   216ac:	10810014 	ori	r2,r2,1024
   216b0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   216b4:	e0bff917 	ldw	r2,-28(fp)
   216b8:	10000915 	stw	zero,36(r2)
   216bc:	00000a06 	br	216e8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   216c0:	e0bff917 	ldw	r2,-28(fp)
   216c4:	10c00917 	ldw	r3,36(r2)
   216c8:	00a00034 	movhi	r2,32768
   216cc:	10bfff04 	addi	r2,r2,-4
   216d0:	10c00536 	bltu	r2,r3,216e8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   216d4:	e0bff917 	ldw	r2,-28(fp)
   216d8:	10800917 	ldw	r2,36(r2)
   216dc:	10c00044 	addi	r3,r2,1
   216e0:	e0bff917 	ldw	r2,-28(fp)
   216e4:	10c00915 	stw	r3,36(r2)
   216e8:	d0b24b17 	ldw	r2,-14036(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   216ec:	e037883a 	mov	sp,fp
   216f0:	df000017 	ldw	fp,0(sp)
   216f4:	dec00104 	addi	sp,sp,4
   216f8:	f800283a 	ret

000216fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   216fc:	defffd04 	addi	sp,sp,-12
   21700:	df000215 	stw	fp,8(sp)
   21704:	df000204 	addi	fp,sp,8
   21708:	e13ffe15 	stw	r4,-8(fp)
   2170c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21710:	00000506 	br	21728 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21714:	e0bfff17 	ldw	r2,-4(fp)
   21718:	1090000c 	andi	r2,r2,16384
   2171c:	10000226 	beq	r2,zero,21728 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21720:	00bffd44 	movi	r2,-11
   21724:	00000b06 	br	21754 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21728:	e0bffe17 	ldw	r2,-8(fp)
   2172c:	10c00d17 	ldw	r3,52(r2)
   21730:	e0bffe17 	ldw	r2,-8(fp)
   21734:	10800c17 	ldw	r2,48(r2)
   21738:	18800526 	beq	r3,r2,21750 <altera_avalon_jtag_uart_close+0x54>
   2173c:	e0bffe17 	ldw	r2,-8(fp)
   21740:	10c00917 	ldw	r3,36(r2)
   21744:	e0bffe17 	ldw	r2,-8(fp)
   21748:	10800117 	ldw	r2,4(r2)
   2174c:	18bff136 	bltu	r3,r2,21714 <__alt_data_end+0xfc021714>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21750:	0005883a 	mov	r2,zero
}
   21754:	e037883a 	mov	sp,fp
   21758:	df000017 	ldw	fp,0(sp)
   2175c:	dec00104 	addi	sp,sp,4
   21760:	f800283a 	ret

00021764 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   21764:	defffa04 	addi	sp,sp,-24
   21768:	df000515 	stw	fp,20(sp)
   2176c:	df000504 	addi	fp,sp,20
   21770:	e13ffd15 	stw	r4,-12(fp)
   21774:	e17ffe15 	stw	r5,-8(fp)
   21778:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2177c:	00bff9c4 	movi	r2,-25
   21780:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   21784:	e0bffe17 	ldw	r2,-8(fp)
   21788:	10da8060 	cmpeqi	r3,r2,27137
   2178c:	1800031e 	bne	r3,zero,2179c <altera_avalon_jtag_uart_ioctl+0x38>
   21790:	109a80a0 	cmpeqi	r2,r2,27138
   21794:	1000181e 	bne	r2,zero,217f8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   21798:	00002906 	br	21840 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2179c:	e0bffd17 	ldw	r2,-12(fp)
   217a0:	10c00117 	ldw	r3,4(r2)
   217a4:	00a00034 	movhi	r2,32768
   217a8:	10bfffc4 	addi	r2,r2,-1
   217ac:	18802126 	beq	r3,r2,21834 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   217b0:	e0bfff17 	ldw	r2,-4(fp)
   217b4:	10800017 	ldw	r2,0(r2)
   217b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   217bc:	e0bffc17 	ldw	r2,-16(fp)
   217c0:	10800090 	cmplti	r2,r2,2
   217c4:	1000061e 	bne	r2,zero,217e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   217c8:	e0fffc17 	ldw	r3,-16(fp)
   217cc:	00a00034 	movhi	r2,32768
   217d0:	10bfffc4 	addi	r2,r2,-1
   217d4:	18800226 	beq	r3,r2,217e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   217d8:	e0bffc17 	ldw	r2,-16(fp)
   217dc:	00000206 	br	217e8 <altera_avalon_jtag_uart_ioctl+0x84>
   217e0:	00a00034 	movhi	r2,32768
   217e4:	10bfff84 	addi	r2,r2,-2
   217e8:	e0fffd17 	ldw	r3,-12(fp)
   217ec:	18800115 	stw	r2,4(r3)
      rc = 0;
   217f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   217f4:	00000f06 	br	21834 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   217f8:	e0bffd17 	ldw	r2,-12(fp)
   217fc:	10c00117 	ldw	r3,4(r2)
   21800:	00a00034 	movhi	r2,32768
   21804:	10bfffc4 	addi	r2,r2,-1
   21808:	18800c26 	beq	r3,r2,2183c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2180c:	e0bffd17 	ldw	r2,-12(fp)
   21810:	10c00917 	ldw	r3,36(r2)
   21814:	e0bffd17 	ldw	r2,-12(fp)
   21818:	10800117 	ldw	r2,4(r2)
   2181c:	1885803a 	cmpltu	r2,r3,r2
   21820:	10c03fcc 	andi	r3,r2,255
   21824:	e0bfff17 	ldw	r2,-4(fp)
   21828:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2182c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21830:	00000206 	br	2183c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   21834:	0001883a 	nop
   21838:	00000106 	br	21840 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2183c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   21840:	e0bffb17 	ldw	r2,-20(fp)
}
   21844:	e037883a 	mov	sp,fp
   21848:	df000017 	ldw	fp,0(sp)
   2184c:	dec00104 	addi	sp,sp,4
   21850:	f800283a 	ret

00021854 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   21854:	defff304 	addi	sp,sp,-52
   21858:	dfc00c15 	stw	ra,48(sp)
   2185c:	df000b15 	stw	fp,44(sp)
   21860:	df000b04 	addi	fp,sp,44
   21864:	e13ffc15 	stw	r4,-16(fp)
   21868:	e17ffd15 	stw	r5,-12(fp)
   2186c:	e1bffe15 	stw	r6,-8(fp)
   21870:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   21874:	e0bffd17 	ldw	r2,-12(fp)
   21878:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2187c:	00004706 	br	2199c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   21880:	e0bffc17 	ldw	r2,-16(fp)
   21884:	10800a17 	ldw	r2,40(r2)
   21888:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2188c:	e0bffc17 	ldw	r2,-16(fp)
   21890:	10800b17 	ldw	r2,44(r2)
   21894:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   21898:	e0fff717 	ldw	r3,-36(fp)
   2189c:	e0bff817 	ldw	r2,-32(fp)
   218a0:	18800536 	bltu	r3,r2,218b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   218a4:	e0fff717 	ldw	r3,-36(fp)
   218a8:	e0bff817 	ldw	r2,-32(fp)
   218ac:	1885c83a 	sub	r2,r3,r2
   218b0:	e0bff615 	stw	r2,-40(fp)
   218b4:	00000406 	br	218c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   218b8:	00c20004 	movi	r3,2048
   218bc:	e0bff817 	ldw	r2,-32(fp)
   218c0:	1885c83a 	sub	r2,r3,r2
   218c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   218c8:	e0bff617 	ldw	r2,-40(fp)
   218cc:	10001e26 	beq	r2,zero,21948 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   218d0:	e0fffe17 	ldw	r3,-8(fp)
   218d4:	e0bff617 	ldw	r2,-40(fp)
   218d8:	1880022e 	bgeu	r3,r2,218e4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   218dc:	e0bffe17 	ldw	r2,-8(fp)
   218e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   218e4:	e0bffc17 	ldw	r2,-16(fp)
   218e8:	10c00e04 	addi	r3,r2,56
   218ec:	e0bff817 	ldw	r2,-32(fp)
   218f0:	1885883a 	add	r2,r3,r2
   218f4:	e1bff617 	ldw	r6,-40(fp)
   218f8:	100b883a 	mov	r5,r2
   218fc:	e13ff517 	ldw	r4,-44(fp)
   21900:	000e6840 	call	e684 <memcpy>
      ptr   += n;
   21904:	e0fff517 	ldw	r3,-44(fp)
   21908:	e0bff617 	ldw	r2,-40(fp)
   2190c:	1885883a 	add	r2,r3,r2
   21910:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   21914:	e0fffe17 	ldw	r3,-8(fp)
   21918:	e0bff617 	ldw	r2,-40(fp)
   2191c:	1885c83a 	sub	r2,r3,r2
   21920:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21924:	e0fff817 	ldw	r3,-32(fp)
   21928:	e0bff617 	ldw	r2,-40(fp)
   2192c:	1885883a 	add	r2,r3,r2
   21930:	10c1ffcc 	andi	r3,r2,2047
   21934:	e0bffc17 	ldw	r2,-16(fp)
   21938:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2193c:	e0bffe17 	ldw	r2,-8(fp)
   21940:	00bfcf16 	blt	zero,r2,21880 <__alt_data_end+0xfc021880>
   21944:	00000106 	br	2194c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   21948:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2194c:	e0fff517 	ldw	r3,-44(fp)
   21950:	e0bffd17 	ldw	r2,-12(fp)
   21954:	1880141e 	bne	r3,r2,219a8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   21958:	e0bfff17 	ldw	r2,-4(fp)
   2195c:	1090000c 	andi	r2,r2,16384
   21960:	1000131e 	bne	r2,zero,219b0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   21964:	0001883a 	nop
   21968:	e0bffc17 	ldw	r2,-16(fp)
   2196c:	10c00a17 	ldw	r3,40(r2)
   21970:	e0bff717 	ldw	r2,-36(fp)
   21974:	1880051e 	bne	r3,r2,2198c <altera_avalon_jtag_uart_read+0x138>
   21978:	e0bffc17 	ldw	r2,-16(fp)
   2197c:	10c00917 	ldw	r3,36(r2)
   21980:	e0bffc17 	ldw	r2,-16(fp)
   21984:	10800117 	ldw	r2,4(r2)
   21988:	18bff736 	bltu	r3,r2,21968 <__alt_data_end+0xfc021968>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2198c:	e0bffc17 	ldw	r2,-16(fp)
   21990:	10c00a17 	ldw	r3,40(r2)
   21994:	e0bff717 	ldw	r2,-36(fp)
   21998:	18800726 	beq	r3,r2,219b8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2199c:	e0bffe17 	ldw	r2,-8(fp)
   219a0:	00bfb716 	blt	zero,r2,21880 <__alt_data_end+0xfc021880>
   219a4:	00000506 	br	219bc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   219a8:	0001883a 	nop
   219ac:	00000306 	br	219bc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   219b0:	0001883a 	nop
   219b4:	00000106 	br	219bc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   219b8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   219bc:	e0fff517 	ldw	r3,-44(fp)
   219c0:	e0bffd17 	ldw	r2,-12(fp)
   219c4:	18801826 	beq	r3,r2,21a28 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   219c8:	0005303a 	rdctl	r2,status
   219cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   219d0:	e0fffb17 	ldw	r3,-20(fp)
   219d4:	00bfff84 	movi	r2,-2
   219d8:	1884703a 	and	r2,r3,r2
   219dc:	1001703a 	wrctl	status,r2
  
  return context;
   219e0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   219e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   219e8:	e0bffc17 	ldw	r2,-16(fp)
   219ec:	10800817 	ldw	r2,32(r2)
   219f0:	10c00054 	ori	r3,r2,1
   219f4:	e0bffc17 	ldw	r2,-16(fp)
   219f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   219fc:	e0bffc17 	ldw	r2,-16(fp)
   21a00:	10800017 	ldw	r2,0(r2)
   21a04:	10800104 	addi	r2,r2,4
   21a08:	1007883a 	mov	r3,r2
   21a0c:	e0bffc17 	ldw	r2,-16(fp)
   21a10:	10800817 	ldw	r2,32(r2)
   21a14:	18800035 	stwio	r2,0(r3)
   21a18:	e0bffa17 	ldw	r2,-24(fp)
   21a1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21a20:	e0bff917 	ldw	r2,-28(fp)
   21a24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   21a28:	e0fff517 	ldw	r3,-44(fp)
   21a2c:	e0bffd17 	ldw	r2,-12(fp)
   21a30:	18800426 	beq	r3,r2,21a44 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   21a34:	e0fff517 	ldw	r3,-44(fp)
   21a38:	e0bffd17 	ldw	r2,-12(fp)
   21a3c:	1885c83a 	sub	r2,r3,r2
   21a40:	00000606 	br	21a5c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   21a44:	e0bfff17 	ldw	r2,-4(fp)
   21a48:	1090000c 	andi	r2,r2,16384
   21a4c:	10000226 	beq	r2,zero,21a58 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   21a50:	00bffd44 	movi	r2,-11
   21a54:	00000106 	br	21a5c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   21a58:	00bffec4 	movi	r2,-5
}
   21a5c:	e037883a 	mov	sp,fp
   21a60:	dfc00117 	ldw	ra,4(sp)
   21a64:	df000017 	ldw	fp,0(sp)
   21a68:	dec00204 	addi	sp,sp,8
   21a6c:	f800283a 	ret

00021a70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   21a70:	defff304 	addi	sp,sp,-52
   21a74:	dfc00c15 	stw	ra,48(sp)
   21a78:	df000b15 	stw	fp,44(sp)
   21a7c:	df000b04 	addi	fp,sp,44
   21a80:	e13ffc15 	stw	r4,-16(fp)
   21a84:	e17ffd15 	stw	r5,-12(fp)
   21a88:	e1bffe15 	stw	r6,-8(fp)
   21a8c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   21a90:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   21a94:	e0bffd17 	ldw	r2,-12(fp)
   21a98:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21a9c:	00003706 	br	21b7c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   21aa0:	e0bffc17 	ldw	r2,-16(fp)
   21aa4:	10800c17 	ldw	r2,48(r2)
   21aa8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   21aac:	e0bffc17 	ldw	r2,-16(fp)
   21ab0:	10800d17 	ldw	r2,52(r2)
   21ab4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   21ab8:	e0fff917 	ldw	r3,-28(fp)
   21abc:	e0bff517 	ldw	r2,-44(fp)
   21ac0:	1880062e 	bgeu	r3,r2,21adc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   21ac4:	e0fff517 	ldw	r3,-44(fp)
   21ac8:	e0bff917 	ldw	r2,-28(fp)
   21acc:	1885c83a 	sub	r2,r3,r2
   21ad0:	10bfffc4 	addi	r2,r2,-1
   21ad4:	e0bff615 	stw	r2,-40(fp)
   21ad8:	00000b06 	br	21b08 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   21adc:	e0bff517 	ldw	r2,-44(fp)
   21ae0:	10000526 	beq	r2,zero,21af8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   21ae4:	00c20004 	movi	r3,2048
   21ae8:	e0bff917 	ldw	r2,-28(fp)
   21aec:	1885c83a 	sub	r2,r3,r2
   21af0:	e0bff615 	stw	r2,-40(fp)
   21af4:	00000406 	br	21b08 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   21af8:	00c1ffc4 	movi	r3,2047
   21afc:	e0bff917 	ldw	r2,-28(fp)
   21b00:	1885c83a 	sub	r2,r3,r2
   21b04:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21b08:	e0bff617 	ldw	r2,-40(fp)
   21b0c:	10001e26 	beq	r2,zero,21b88 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   21b10:	e0fffe17 	ldw	r3,-8(fp)
   21b14:	e0bff617 	ldw	r2,-40(fp)
   21b18:	1880022e 	bgeu	r3,r2,21b24 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   21b1c:	e0bffe17 	ldw	r2,-8(fp)
   21b20:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   21b24:	e0bffc17 	ldw	r2,-16(fp)
   21b28:	10c20e04 	addi	r3,r2,2104
   21b2c:	e0bff917 	ldw	r2,-28(fp)
   21b30:	1885883a 	add	r2,r3,r2
   21b34:	e1bff617 	ldw	r6,-40(fp)
   21b38:	e17ffd17 	ldw	r5,-12(fp)
   21b3c:	1009883a 	mov	r4,r2
   21b40:	000e6840 	call	e684 <memcpy>
      ptr   += n;
   21b44:	e0fffd17 	ldw	r3,-12(fp)
   21b48:	e0bff617 	ldw	r2,-40(fp)
   21b4c:	1885883a 	add	r2,r3,r2
   21b50:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   21b54:	e0fffe17 	ldw	r3,-8(fp)
   21b58:	e0bff617 	ldw	r2,-40(fp)
   21b5c:	1885c83a 	sub	r2,r3,r2
   21b60:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21b64:	e0fff917 	ldw	r3,-28(fp)
   21b68:	e0bff617 	ldw	r2,-40(fp)
   21b6c:	1885883a 	add	r2,r3,r2
   21b70:	10c1ffcc 	andi	r3,r2,2047
   21b74:	e0bffc17 	ldw	r2,-16(fp)
   21b78:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21b7c:	e0bffe17 	ldw	r2,-8(fp)
   21b80:	00bfc716 	blt	zero,r2,21aa0 <__alt_data_end+0xfc021aa0>
   21b84:	00000106 	br	21b8c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   21b88:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21b8c:	0005303a 	rdctl	r2,status
   21b90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21b94:	e0fffb17 	ldw	r3,-20(fp)
   21b98:	00bfff84 	movi	r2,-2
   21b9c:	1884703a 	and	r2,r3,r2
   21ba0:	1001703a 	wrctl	status,r2
  
  return context;
   21ba4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   21ba8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21bac:	e0bffc17 	ldw	r2,-16(fp)
   21bb0:	10800817 	ldw	r2,32(r2)
   21bb4:	10c00094 	ori	r3,r2,2
   21bb8:	e0bffc17 	ldw	r2,-16(fp)
   21bbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21bc0:	e0bffc17 	ldw	r2,-16(fp)
   21bc4:	10800017 	ldw	r2,0(r2)
   21bc8:	10800104 	addi	r2,r2,4
   21bcc:	1007883a 	mov	r3,r2
   21bd0:	e0bffc17 	ldw	r2,-16(fp)
   21bd4:	10800817 	ldw	r2,32(r2)
   21bd8:	18800035 	stwio	r2,0(r3)
   21bdc:	e0bffa17 	ldw	r2,-24(fp)
   21be0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21be4:	e0bff817 	ldw	r2,-32(fp)
   21be8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   21bec:	e0bffe17 	ldw	r2,-8(fp)
   21bf0:	0080100e 	bge	zero,r2,21c34 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   21bf4:	e0bfff17 	ldw	r2,-4(fp)
   21bf8:	1090000c 	andi	r2,r2,16384
   21bfc:	1000101e 	bne	r2,zero,21c40 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   21c00:	0001883a 	nop
   21c04:	e0bffc17 	ldw	r2,-16(fp)
   21c08:	10c00d17 	ldw	r3,52(r2)
   21c0c:	e0bff517 	ldw	r2,-44(fp)
   21c10:	1880051e 	bne	r3,r2,21c28 <altera_avalon_jtag_uart_write+0x1b8>
   21c14:	e0bffc17 	ldw	r2,-16(fp)
   21c18:	10c00917 	ldw	r3,36(r2)
   21c1c:	e0bffc17 	ldw	r2,-16(fp)
   21c20:	10800117 	ldw	r2,4(r2)
   21c24:	18bff736 	bltu	r3,r2,21c04 <__alt_data_end+0xfc021c04>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   21c28:	e0bffc17 	ldw	r2,-16(fp)
   21c2c:	10800917 	ldw	r2,36(r2)
   21c30:	1000051e 	bne	r2,zero,21c48 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   21c34:	e0bffe17 	ldw	r2,-8(fp)
   21c38:	00bfd016 	blt	zero,r2,21b7c <__alt_data_end+0xfc021b7c>
   21c3c:	00000306 	br	21c4c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   21c40:	0001883a 	nop
   21c44:	00000106 	br	21c4c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   21c48:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   21c4c:	e0fffd17 	ldw	r3,-12(fp)
   21c50:	e0bff717 	ldw	r2,-36(fp)
   21c54:	18800426 	beq	r3,r2,21c68 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   21c58:	e0fffd17 	ldw	r3,-12(fp)
   21c5c:	e0bff717 	ldw	r2,-36(fp)
   21c60:	1885c83a 	sub	r2,r3,r2
   21c64:	00000606 	br	21c80 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   21c68:	e0bfff17 	ldw	r2,-4(fp)
   21c6c:	1090000c 	andi	r2,r2,16384
   21c70:	10000226 	beq	r2,zero,21c7c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   21c74:	00bffd44 	movi	r2,-11
   21c78:	00000106 	br	21c80 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   21c7c:	00bffec4 	movi	r2,-5
}
   21c80:	e037883a 	mov	sp,fp
   21c84:	dfc00117 	ldw	ra,4(sp)
   21c88:	df000017 	ldw	fp,0(sp)
   21c8c:	dec00204 	addi	sp,sp,8
   21c90:	f800283a 	ret

00021c94 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   21c94:	defff404 	addi	sp,sp,-48
   21c98:	df000b15 	stw	fp,44(sp)
   21c9c:	df000b04 	addi	fp,sp,44
   21ca0:	e13ffc15 	stw	r4,-16(fp)
   21ca4:	e17ffd15 	stw	r5,-12(fp)
   21ca8:	e1bffe15 	stw	r6,-8(fp)
   21cac:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   21cb0:	e0ffff17 	ldw	r3,-4(fp)
   21cb4:	e0bffe17 	ldw	r2,-8(fp)
   21cb8:	1885883a 	add	r2,r3,r2
   21cbc:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   21cc0:	e0c00217 	ldw	r3,8(fp)
   21cc4:	e0800117 	ldw	r2,4(fp)
   21cc8:	1885883a 	add	r2,r3,r2
   21ccc:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   21cd0:	e0800117 	ldw	r2,4(fp)
   21cd4:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   21cd8:	e0bffe17 	ldw	r2,-8(fp)
   21cdc:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   21ce0:	00800044 	movi	r2,1
   21ce4:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   21ce8:	e0bffc17 	ldw	r2,-16(fp)
   21cec:	10800504 	addi	r2,r2,20
   21cf0:	1009883a 	mov	r4,r2
   21cf4:	00c00044 	movi	r3,1
   21cf8:	e0bffd17 	ldw	r2,-12(fp)
   21cfc:	1884983a 	sll	r2,r3,r2
   21d00:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   21d04:	e0800317 	ldw	r2,12(fp)
   21d08:	1080008c 	andi	r2,r2,2
   21d0c:	1000051e 	bne	r2,zero,21d24 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   21d10:	e0bffc17 	ldw	r2,-16(fp)
   21d14:	10800304 	addi	r2,r2,12
   21d18:	1007883a 	mov	r3,r2
   21d1c:	00810004 	movi	r2,1024
   21d20:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   21d24:	e0bffc17 	ldw	r2,-16(fp)
   21d28:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   21d2c:	e0bffc17 	ldw	r2,-16(fp)
   21d30:	10800204 	addi	r2,r2,8
   21d34:	10800037 	ldwio	r2,0(r2)
   21d38:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   21d3c:	e0bffa17 	ldw	r2,-24(fp)
   21d40:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   21d44:	10000226 	beq	r2,zero,21d50 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   21d48:	e0bff717 	ldw	r2,-36(fp)
   21d4c:	1000031e 	bne	r2,zero,21d5c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   21d50:	e0bffa17 	ldw	r2,-24(fp)
   21d54:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   21d58:	103ff426 	beq	r2,zero,21d2c <__alt_data_end+0xfc021d2c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   21d5c:	e0bffa17 	ldw	r2,-24(fp)
   21d60:	1080100c 	andi	r2,r2,64
   21d64:	10001e26 	beq	r2,zero,21de0 <alt_avalon_spi_command+0x14c>
   21d68:	e0bff717 	ldw	r2,-36(fp)
   21d6c:	00801c0e 	bge	zero,r2,21de0 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   21d70:	e0bff717 	ldw	r2,-36(fp)
   21d74:	10bfffc4 	addi	r2,r2,-1
   21d78:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   21d7c:	e0ffff17 	ldw	r3,-4(fp)
   21d80:	e0bff817 	ldw	r2,-32(fp)
   21d84:	18800a2e 	bgeu	r3,r2,21db0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   21d88:	e0bffc17 	ldw	r2,-16(fp)
   21d8c:	10800104 	addi	r2,r2,4
   21d90:	1009883a 	mov	r4,r2
   21d94:	e0bfff17 	ldw	r2,-4(fp)
   21d98:	10c00044 	addi	r3,r2,1
   21d9c:	e0ffff15 	stw	r3,-4(fp)
   21da0:	10800003 	ldbu	r2,0(r2)
   21da4:	10803fcc 	andi	r2,r2,255
   21da8:	20800035 	stwio	r2,0(r4)
   21dac:	00000c06 	br	21de0 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   21db0:	e0bff517 	ldw	r2,-44(fp)
   21db4:	10000826 	beq	r2,zero,21dd8 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   21db8:	e0bff517 	ldw	r2,-44(fp)
   21dbc:	10bfffc4 	addi	r2,r2,-1
   21dc0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   21dc4:	e0bffc17 	ldw	r2,-16(fp)
   21dc8:	10800104 	addi	r2,r2,4
   21dcc:	0007883a 	mov	r3,zero
   21dd0:	10c00035 	stwio	r3,0(r2)
   21dd4:	00000206 	br	21de0 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   21dd8:	00bf0004 	movi	r2,-1024
   21ddc:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   21de0:	e0bffa17 	ldw	r2,-24(fp)
   21de4:	1080200c 	andi	r2,r2,128
   21de8:	103fd026 	beq	r2,zero,21d2c <__alt_data_end+0xfc021d2c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   21dec:	e0bffc17 	ldw	r2,-16(fp)
   21df0:	10800037 	ldwio	r2,0(r2)
   21df4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   21df8:	e0bff617 	ldw	r2,-40(fp)
   21dfc:	10000426 	beq	r2,zero,21e10 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   21e00:	e0bff617 	ldw	r2,-40(fp)
   21e04:	10bfffc4 	addi	r2,r2,-1
   21e08:	e0bff615 	stw	r2,-40(fp)
   21e0c:	00000506 	br	21e24 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   21e10:	e0800217 	ldw	r2,8(fp)
   21e14:	10c00044 	addi	r3,r2,1
   21e18:	e0c00215 	stw	r3,8(fp)
   21e1c:	e0fffb17 	ldw	r3,-20(fp)
   21e20:	10c00005 	stb	r3,0(r2)
      credits++;
   21e24:	e0bff717 	ldw	r2,-36(fp)
   21e28:	10800044 	addi	r2,r2,1
   21e2c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   21e30:	e0bff617 	ldw	r2,-40(fp)
   21e34:	103fbd1e 	bne	r2,zero,21d2c <__alt_data_end+0xfc021d2c>
   21e38:	e0c00217 	ldw	r3,8(fp)
   21e3c:	e0bff917 	ldw	r2,-28(fp)
   21e40:	18bfba1e 	bne	r3,r2,21d2c <__alt_data_end+0xfc021d2c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   21e44:	e0bffc17 	ldw	r2,-16(fp)
   21e48:	10800204 	addi	r2,r2,8
   21e4c:	10800037 	ldwio	r2,0(r2)
   21e50:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   21e54:	e0bffa17 	ldw	r2,-24(fp)
   21e58:	1080080c 	andi	r2,r2,32
   21e5c:	103ff926 	beq	r2,zero,21e44 <__alt_data_end+0xfc021e44>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   21e60:	e0800317 	ldw	r2,12(fp)
   21e64:	1080004c 	andi	r2,r2,1
   21e68:	1000041e 	bne	r2,zero,21e7c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   21e6c:	e0bffc17 	ldw	r2,-16(fp)
   21e70:	10800304 	addi	r2,r2,12
   21e74:	0007883a 	mov	r3,zero
   21e78:	10c00035 	stwio	r3,0(r2)

  return read_length;
   21e7c:	e0800117 	ldw	r2,4(fp)
}
   21e80:	e037883a 	mov	sp,fp
   21e84:	df000017 	ldw	fp,0(sp)
   21e88:	dec00104 	addi	sp,sp,4
   21e8c:	f800283a 	ret

00021e90 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   21e90:	defffa04 	addi	sp,sp,-24
   21e94:	dfc00515 	stw	ra,20(sp)
   21e98:	df000415 	stw	fp,16(sp)
   21e9c:	df000404 	addi	fp,sp,16
   21ea0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   21ea4:	0007883a 	mov	r3,zero
   21ea8:	e0bfff17 	ldw	r2,-4(fp)
   21eac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   21eb0:	e0bfff17 	ldw	r2,-4(fp)
   21eb4:	10800104 	addi	r2,r2,4
   21eb8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21ebc:	0005303a 	rdctl	r2,status
   21ec0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21ec4:	e0fffd17 	ldw	r3,-12(fp)
   21ec8:	00bfff84 	movi	r2,-2
   21ecc:	1884703a 	and	r2,r3,r2
   21ed0:	1001703a 	wrctl	status,r2
  
  return context;
   21ed4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   21ed8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   21edc:	0022e000 	call	22e00 <alt_tick>
   21ee0:	e0bffc17 	ldw	r2,-16(fp)
   21ee4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21ee8:	e0bffe17 	ldw	r2,-8(fp)
   21eec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   21ef0:	0001883a 	nop
   21ef4:	e037883a 	mov	sp,fp
   21ef8:	dfc00117 	ldw	ra,4(sp)
   21efc:	df000017 	ldw	fp,0(sp)
   21f00:	dec00204 	addi	sp,sp,8
   21f04:	f800283a 	ret

00021f08 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   21f08:	defff804 	addi	sp,sp,-32
   21f0c:	dfc00715 	stw	ra,28(sp)
   21f10:	df000615 	stw	fp,24(sp)
   21f14:	df000604 	addi	fp,sp,24
   21f18:	e13ffc15 	stw	r4,-16(fp)
   21f1c:	e17ffd15 	stw	r5,-12(fp)
   21f20:	e1bffe15 	stw	r6,-8(fp)
   21f24:	e1ffff15 	stw	r7,-4(fp)
   21f28:	e0bfff17 	ldw	r2,-4(fp)
   21f2c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   21f30:	d0b24b17 	ldw	r2,-14036(gp)
   21f34:	1000021e 	bne	r2,zero,21f40 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   21f38:	e0bffb17 	ldw	r2,-20(fp)
   21f3c:	d0b24b15 	stw	r2,-14036(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   21f40:	e0bffc17 	ldw	r2,-16(fp)
   21f44:	10800104 	addi	r2,r2,4
   21f48:	00c001c4 	movi	r3,7
   21f4c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   21f50:	d8000015 	stw	zero,0(sp)
   21f54:	e1fffc17 	ldw	r7,-16(fp)
   21f58:	018000b4 	movhi	r6,2
   21f5c:	3187a404 	addi	r6,r6,7824
   21f60:	e17ffe17 	ldw	r5,-8(fp)
   21f64:	e13ffd17 	ldw	r4,-12(fp)
   21f68:	00224780 	call	22478 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   21f6c:	0001883a 	nop
   21f70:	e037883a 	mov	sp,fp
   21f74:	dfc00117 	ldw	ra,4(sp)
   21f78:	df000017 	ldw	fp,0(sp)
   21f7c:	dec00204 	addi	sp,sp,8
   21f80:	f800283a 	ret

00021f84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   21f84:	defff504 	addi	sp,sp,-44
   21f88:	df000a15 	stw	fp,40(sp)
   21f8c:	df000a04 	addi	fp,sp,40
   21f90:	e13ffc15 	stw	r4,-16(fp)
   21f94:	e17ffd15 	stw	r5,-12(fp)
   21f98:	e1bffe15 	stw	r6,-8(fp)
   21f9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   21fa0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21fa4:	d0b24b17 	ldw	r2,-14036(gp)
  
  if (alt_ticks_per_second ())
   21fa8:	10003c26 	beq	r2,zero,2209c <alt_alarm_start+0x118>
  {
    if (alarm)
   21fac:	e0bffc17 	ldw	r2,-16(fp)
   21fb0:	10003826 	beq	r2,zero,22094 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   21fb4:	e0bffc17 	ldw	r2,-16(fp)
   21fb8:	e0fffe17 	ldw	r3,-8(fp)
   21fbc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   21fc0:	e0bffc17 	ldw	r2,-16(fp)
   21fc4:	e0ffff17 	ldw	r3,-4(fp)
   21fc8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21fcc:	0005303a 	rdctl	r2,status
   21fd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21fd4:	e0fff917 	ldw	r3,-28(fp)
   21fd8:	00bfff84 	movi	r2,-2
   21fdc:	1884703a 	and	r2,r3,r2
   21fe0:	1001703a 	wrctl	status,r2
  
  return context;
   21fe4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   21fe8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   21fec:	d0b24c17 	ldw	r2,-14032(gp)
      
      current_nticks = alt_nticks();
   21ff0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   21ff4:	e0fffd17 	ldw	r3,-12(fp)
   21ff8:	e0bff617 	ldw	r2,-40(fp)
   21ffc:	1885883a 	add	r2,r3,r2
   22000:	10c00044 	addi	r3,r2,1
   22004:	e0bffc17 	ldw	r2,-16(fp)
   22008:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2200c:	e0bffc17 	ldw	r2,-16(fp)
   22010:	10c00217 	ldw	r3,8(r2)
   22014:	e0bff617 	ldw	r2,-40(fp)
   22018:	1880042e 	bgeu	r3,r2,2202c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2201c:	e0bffc17 	ldw	r2,-16(fp)
   22020:	00c00044 	movi	r3,1
   22024:	10c00405 	stb	r3,16(r2)
   22028:	00000206 	br	22034 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2202c:	e0bffc17 	ldw	r2,-16(fp)
   22030:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   22034:	e0bffc17 	ldw	r2,-16(fp)
   22038:	d0e5be04 	addi	r3,gp,-26888
   2203c:	e0fffa15 	stw	r3,-24(fp)
   22040:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22044:	e0bffb17 	ldw	r2,-20(fp)
   22048:	e0fffa17 	ldw	r3,-24(fp)
   2204c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22050:	e0bffa17 	ldw	r2,-24(fp)
   22054:	10c00017 	ldw	r3,0(r2)
   22058:	e0bffb17 	ldw	r2,-20(fp)
   2205c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22060:	e0bffa17 	ldw	r2,-24(fp)
   22064:	10800017 	ldw	r2,0(r2)
   22068:	e0fffb17 	ldw	r3,-20(fp)
   2206c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22070:	e0bffa17 	ldw	r2,-24(fp)
   22074:	e0fffb17 	ldw	r3,-20(fp)
   22078:	10c00015 	stw	r3,0(r2)
   2207c:	e0bff817 	ldw	r2,-32(fp)
   22080:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22084:	e0bff717 	ldw	r2,-36(fp)
   22088:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2208c:	0005883a 	mov	r2,zero
   22090:	00000306 	br	220a0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   22094:	00bffa84 	movi	r2,-22
   22098:	00000106 	br	220a0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2209c:	00bfde84 	movi	r2,-134
  }
}
   220a0:	e037883a 	mov	sp,fp
   220a4:	df000017 	ldw	fp,0(sp)
   220a8:	dec00104 	addi	sp,sp,4
   220ac:	f800283a 	ret

000220b0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   220b0:	defffa04 	addi	sp,sp,-24
   220b4:	dfc00515 	stw	ra,20(sp)
   220b8:	df000415 	stw	fp,16(sp)
   220bc:	df000404 	addi	fp,sp,16
   220c0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   220c4:	00800244 	movi	r2,9
   220c8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   220cc:	014003f4 	movhi	r5,15
   220d0:	29509004 	addi	r5,r5,16960
   220d4:	e13ffd17 	ldw	r4,-12(fp)
   220d8:	000ce000 	call	ce00 <__mulsi3>
   220dc:	100b883a 	mov	r5,r2
   220e0:	01017db4 	movhi	r4,1526
   220e4:	21384004 	addi	r4,r4,-7936
   220e8:	000cd440 	call	cd44 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   220ec:	100b883a 	mov	r5,r2
   220f0:	01200034 	movhi	r4,32768
   220f4:	213fffc4 	addi	r4,r4,-1
   220f8:	000cd440 	call	cd44 <__udivsi3>
   220fc:	100b883a 	mov	r5,r2
   22100:	e13fff17 	ldw	r4,-4(fp)
   22104:	000cd440 	call	cd44 <__udivsi3>
   22108:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2210c:	e0bffe17 	ldw	r2,-8(fp)
   22110:	10002a26 	beq	r2,zero,221bc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   22114:	e03ffc15 	stw	zero,-16(fp)
   22118:	00001706 	br	22178 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2211c:	00a00034 	movhi	r2,32768
   22120:	10bfffc4 	addi	r2,r2,-1
   22124:	10bfffc4 	addi	r2,r2,-1
   22128:	103ffe1e 	bne	r2,zero,22124 <__alt_data_end+0xfc022124>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2212c:	014003f4 	movhi	r5,15
   22130:	29509004 	addi	r5,r5,16960
   22134:	e13ffd17 	ldw	r4,-12(fp)
   22138:	000ce000 	call	ce00 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2213c:	100b883a 	mov	r5,r2
   22140:	01017db4 	movhi	r4,1526
   22144:	21384004 	addi	r4,r4,-7936
   22148:	000cd440 	call	cd44 <__udivsi3>
   2214c:	100b883a 	mov	r5,r2
   22150:	01200034 	movhi	r4,32768
   22154:	213fffc4 	addi	r4,r4,-1
   22158:	000cd440 	call	cd44 <__udivsi3>
   2215c:	1007883a 	mov	r3,r2
   22160:	e0bfff17 	ldw	r2,-4(fp)
   22164:	10c5c83a 	sub	r2,r2,r3
   22168:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2216c:	e0bffc17 	ldw	r2,-16(fp)
   22170:	10800044 	addi	r2,r2,1
   22174:	e0bffc15 	stw	r2,-16(fp)
   22178:	e0fffc17 	ldw	r3,-16(fp)
   2217c:	e0bffe17 	ldw	r2,-8(fp)
   22180:	18bfe616 	blt	r3,r2,2211c <__alt_data_end+0xfc02211c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22184:	014003f4 	movhi	r5,15
   22188:	29509004 	addi	r5,r5,16960
   2218c:	e13ffd17 	ldw	r4,-12(fp)
   22190:	000ce000 	call	ce00 <__mulsi3>
   22194:	100b883a 	mov	r5,r2
   22198:	01017db4 	movhi	r4,1526
   2219c:	21384004 	addi	r4,r4,-7936
   221a0:	000cd440 	call	cd44 <__udivsi3>
   221a4:	e17fff17 	ldw	r5,-4(fp)
   221a8:	1009883a 	mov	r4,r2
   221ac:	000ce000 	call	ce00 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   221b0:	10bfffc4 	addi	r2,r2,-1
   221b4:	103ffe1e 	bne	r2,zero,221b0 <__alt_data_end+0xfc0221b0>
   221b8:	00000d06 	br	221f0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   221bc:	014003f4 	movhi	r5,15
   221c0:	29509004 	addi	r5,r5,16960
   221c4:	e13ffd17 	ldw	r4,-12(fp)
   221c8:	000ce000 	call	ce00 <__mulsi3>
   221cc:	100b883a 	mov	r5,r2
   221d0:	01017db4 	movhi	r4,1526
   221d4:	21384004 	addi	r4,r4,-7936
   221d8:	000cd440 	call	cd44 <__udivsi3>
   221dc:	e17fff17 	ldw	r5,-4(fp)
   221e0:	1009883a 	mov	r4,r2
   221e4:	000ce000 	call	ce00 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   221e8:	10bfffc4 	addi	r2,r2,-1
   221ec:	00bffe16 	blt	zero,r2,221e8 <__alt_data_end+0xfc0221e8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   221f0:	0005883a 	mov	r2,zero
}
   221f4:	e037883a 	mov	sp,fp
   221f8:	dfc00117 	ldw	ra,4(sp)
   221fc:	df000017 	ldw	fp,0(sp)
   22200:	dec00204 	addi	sp,sp,8
   22204:	f800283a 	ret

00022208 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   22208:	deffff04 	addi	sp,sp,-4
   2220c:	df000015 	stw	fp,0(sp)
   22210:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   22214:	0001883a 	nop
   22218:	e037883a 	mov	sp,fp
   2221c:	df000017 	ldw	fp,0(sp)
   22220:	dec00104 	addi	sp,sp,4
   22224:	f800283a 	ret

00022228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22228:	defffe04 	addi	sp,sp,-8
   2222c:	dfc00115 	stw	ra,4(sp)
   22230:	df000015 	stw	fp,0(sp)
   22234:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22238:	d0a5b917 	ldw	r2,-26908(gp)
   2223c:	10000326 	beq	r2,zero,2224c <alt_get_errno+0x24>
   22240:	d0a5b917 	ldw	r2,-26908(gp)
   22244:	103ee83a 	callr	r2
   22248:	00000106 	br	22250 <alt_get_errno+0x28>
   2224c:	d0b24304 	addi	r2,gp,-14068
}
   22250:	e037883a 	mov	sp,fp
   22254:	dfc00117 	ldw	ra,4(sp)
   22258:	df000017 	ldw	fp,0(sp)
   2225c:	dec00204 	addi	sp,sp,8
   22260:	f800283a 	ret

00022264 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22264:	defffa04 	addi	sp,sp,-24
   22268:	dfc00515 	stw	ra,20(sp)
   2226c:	df000415 	stw	fp,16(sp)
   22270:	df000404 	addi	fp,sp,16
   22274:	e13ffe15 	stw	r4,-8(fp)
   22278:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2227c:	e0bffe17 	ldw	r2,-8(fp)
   22280:	10000326 	beq	r2,zero,22290 <alt_dev_llist_insert+0x2c>
   22284:	e0bffe17 	ldw	r2,-8(fp)
   22288:	10800217 	ldw	r2,8(r2)
   2228c:	1000061e 	bne	r2,zero,222a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22290:	00222280 	call	22228 <alt_get_errno>
   22294:	1007883a 	mov	r3,r2
   22298:	00800584 	movi	r2,22
   2229c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   222a0:	00bffa84 	movi	r2,-22
   222a4:	00001306 	br	222f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   222a8:	e0bffe17 	ldw	r2,-8(fp)
   222ac:	e0ffff17 	ldw	r3,-4(fp)
   222b0:	e0fffc15 	stw	r3,-16(fp)
   222b4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   222b8:	e0bffd17 	ldw	r2,-12(fp)
   222bc:	e0fffc17 	ldw	r3,-16(fp)
   222c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   222c4:	e0bffc17 	ldw	r2,-16(fp)
   222c8:	10c00017 	ldw	r3,0(r2)
   222cc:	e0bffd17 	ldw	r2,-12(fp)
   222d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   222d4:	e0bffc17 	ldw	r2,-16(fp)
   222d8:	10800017 	ldw	r2,0(r2)
   222dc:	e0fffd17 	ldw	r3,-12(fp)
   222e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   222e4:	e0bffc17 	ldw	r2,-16(fp)
   222e8:	e0fffd17 	ldw	r3,-12(fp)
   222ec:	10c00015 	stw	r3,0(r2)

  return 0;  
   222f0:	0005883a 	mov	r2,zero
}
   222f4:	e037883a 	mov	sp,fp
   222f8:	dfc00117 	ldw	ra,4(sp)
   222fc:	df000017 	ldw	fp,0(sp)
   22300:	dec00204 	addi	sp,sp,8
   22304:	f800283a 	ret

00022308 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   22308:	defffd04 	addi	sp,sp,-12
   2230c:	dfc00215 	stw	ra,8(sp)
   22310:	df000115 	stw	fp,4(sp)
   22314:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22318:	008000b4 	movhi	r2,2
   2231c:	108d4c04 	addi	r2,r2,13616
   22320:	e0bfff15 	stw	r2,-4(fp)
   22324:	00000606 	br	22340 <_do_ctors+0x38>
        (*ctor) (); 
   22328:	e0bfff17 	ldw	r2,-4(fp)
   2232c:	10800017 	ldw	r2,0(r2)
   22330:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22334:	e0bfff17 	ldw	r2,-4(fp)
   22338:	10bfff04 	addi	r2,r2,-4
   2233c:	e0bfff15 	stw	r2,-4(fp)
   22340:	e0ffff17 	ldw	r3,-4(fp)
   22344:	008000b4 	movhi	r2,2
   22348:	108d4b04 	addi	r2,r2,13612
   2234c:	18bff62e 	bgeu	r3,r2,22328 <__alt_data_end+0xfc022328>
        (*ctor) (); 
}
   22350:	0001883a 	nop
   22354:	e037883a 	mov	sp,fp
   22358:	dfc00117 	ldw	ra,4(sp)
   2235c:	df000017 	ldw	fp,0(sp)
   22360:	dec00204 	addi	sp,sp,8
   22364:	f800283a 	ret

00022368 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22368:	defffd04 	addi	sp,sp,-12
   2236c:	dfc00215 	stw	ra,8(sp)
   22370:	df000115 	stw	fp,4(sp)
   22374:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22378:	008000b4 	movhi	r2,2
   2237c:	108d4c04 	addi	r2,r2,13616
   22380:	e0bfff15 	stw	r2,-4(fp)
   22384:	00000606 	br	223a0 <_do_dtors+0x38>
        (*dtor) (); 
   22388:	e0bfff17 	ldw	r2,-4(fp)
   2238c:	10800017 	ldw	r2,0(r2)
   22390:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22394:	e0bfff17 	ldw	r2,-4(fp)
   22398:	10bfff04 	addi	r2,r2,-4
   2239c:	e0bfff15 	stw	r2,-4(fp)
   223a0:	e0ffff17 	ldw	r3,-4(fp)
   223a4:	008000b4 	movhi	r2,2
   223a8:	108d4d04 	addi	r2,r2,13620
   223ac:	18bff62e 	bgeu	r3,r2,22388 <__alt_data_end+0xfc022388>
        (*dtor) (); 
}
   223b0:	0001883a 	nop
   223b4:	e037883a 	mov	sp,fp
   223b8:	dfc00117 	ldw	ra,4(sp)
   223bc:	df000017 	ldw	fp,0(sp)
   223c0:	dec00204 	addi	sp,sp,8
   223c4:	f800283a 	ret

000223c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   223c8:	defffa04 	addi	sp,sp,-24
   223cc:	dfc00515 	stw	ra,20(sp)
   223d0:	df000415 	stw	fp,16(sp)
   223d4:	df000404 	addi	fp,sp,16
   223d8:	e13ffe15 	stw	r4,-8(fp)
   223dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   223e0:	e0bfff17 	ldw	r2,-4(fp)
   223e4:	10800017 	ldw	r2,0(r2)
   223e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   223ec:	e13ffe17 	ldw	r4,-8(fp)
   223f0:	000ef4c0 	call	ef4c <strlen>
   223f4:	10800044 	addi	r2,r2,1
   223f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   223fc:	00000d06 	br	22434 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   22400:	e0bffc17 	ldw	r2,-16(fp)
   22404:	10800217 	ldw	r2,8(r2)
   22408:	e0fffd17 	ldw	r3,-12(fp)
   2240c:	180d883a 	mov	r6,r3
   22410:	e17ffe17 	ldw	r5,-8(fp)
   22414:	1009883a 	mov	r4,r2
   22418:	00231e00 	call	231e0 <memcmp>
   2241c:	1000021e 	bne	r2,zero,22428 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   22420:	e0bffc17 	ldw	r2,-16(fp)
   22424:	00000706 	br	22444 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   22428:	e0bffc17 	ldw	r2,-16(fp)
   2242c:	10800017 	ldw	r2,0(r2)
   22430:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22434:	e0fffc17 	ldw	r3,-16(fp)
   22438:	e0bfff17 	ldw	r2,-4(fp)
   2243c:	18bff01e 	bne	r3,r2,22400 <__alt_data_end+0xfc022400>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   22440:	0005883a 	mov	r2,zero
}
   22444:	e037883a 	mov	sp,fp
   22448:	dfc00117 	ldw	ra,4(sp)
   2244c:	df000017 	ldw	fp,0(sp)
   22450:	dec00204 	addi	sp,sp,8
   22454:	f800283a 	ret

00022458 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   22458:	deffff04 	addi	sp,sp,-4
   2245c:	df000015 	stw	fp,0(sp)
   22460:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   22464:	0001883a 	nop
   22468:	e037883a 	mov	sp,fp
   2246c:	df000017 	ldw	fp,0(sp)
   22470:	dec00104 	addi	sp,sp,4
   22474:	f800283a 	ret

00022478 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22478:	defff904 	addi	sp,sp,-28
   2247c:	dfc00615 	stw	ra,24(sp)
   22480:	df000515 	stw	fp,20(sp)
   22484:	df000504 	addi	fp,sp,20
   22488:	e13ffc15 	stw	r4,-16(fp)
   2248c:	e17ffd15 	stw	r5,-12(fp)
   22490:	e1bffe15 	stw	r6,-8(fp)
   22494:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   22498:	e0800217 	ldw	r2,8(fp)
   2249c:	d8800015 	stw	r2,0(sp)
   224a0:	e1ffff17 	ldw	r7,-4(fp)
   224a4:	e1bffe17 	ldw	r6,-8(fp)
   224a8:	e17ffd17 	ldw	r5,-12(fp)
   224ac:	e13ffc17 	ldw	r4,-16(fp)
   224b0:	00226280 	call	22628 <alt_iic_isr_register>
}  
   224b4:	e037883a 	mov	sp,fp
   224b8:	dfc00117 	ldw	ra,4(sp)
   224bc:	df000017 	ldw	fp,0(sp)
   224c0:	dec00204 	addi	sp,sp,8
   224c4:	f800283a 	ret

000224c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   224c8:	defff904 	addi	sp,sp,-28
   224cc:	df000615 	stw	fp,24(sp)
   224d0:	df000604 	addi	fp,sp,24
   224d4:	e13ffe15 	stw	r4,-8(fp)
   224d8:	e17fff15 	stw	r5,-4(fp)
   224dc:	e0bfff17 	ldw	r2,-4(fp)
   224e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   224e4:	0005303a 	rdctl	r2,status
   224e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   224ec:	e0fffb17 	ldw	r3,-20(fp)
   224f0:	00bfff84 	movi	r2,-2
   224f4:	1884703a 	and	r2,r3,r2
   224f8:	1001703a 	wrctl	status,r2
  
  return context;
   224fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22500:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   22504:	00c00044 	movi	r3,1
   22508:	e0bffa17 	ldw	r2,-24(fp)
   2250c:	1884983a 	sll	r2,r3,r2
   22510:	1007883a 	mov	r3,r2
   22514:	d0b24a17 	ldw	r2,-14040(gp)
   22518:	1884b03a 	or	r2,r3,r2
   2251c:	d0b24a15 	stw	r2,-14040(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22520:	d0b24a17 	ldw	r2,-14040(gp)
   22524:	100170fa 	wrctl	ienable,r2
   22528:	e0bffc17 	ldw	r2,-16(fp)
   2252c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22530:	e0bffd17 	ldw	r2,-12(fp)
   22534:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22538:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2253c:	0001883a 	nop
}
   22540:	e037883a 	mov	sp,fp
   22544:	df000017 	ldw	fp,0(sp)
   22548:	dec00104 	addi	sp,sp,4
   2254c:	f800283a 	ret

00022550 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   22550:	defff904 	addi	sp,sp,-28
   22554:	df000615 	stw	fp,24(sp)
   22558:	df000604 	addi	fp,sp,24
   2255c:	e13ffe15 	stw	r4,-8(fp)
   22560:	e17fff15 	stw	r5,-4(fp)
   22564:	e0bfff17 	ldw	r2,-4(fp)
   22568:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2256c:	0005303a 	rdctl	r2,status
   22570:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22574:	e0fffb17 	ldw	r3,-20(fp)
   22578:	00bfff84 	movi	r2,-2
   2257c:	1884703a 	and	r2,r3,r2
   22580:	1001703a 	wrctl	status,r2
  
  return context;
   22584:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22588:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2258c:	00c00044 	movi	r3,1
   22590:	e0bffa17 	ldw	r2,-24(fp)
   22594:	1884983a 	sll	r2,r3,r2
   22598:	0084303a 	nor	r2,zero,r2
   2259c:	1007883a 	mov	r3,r2
   225a0:	d0b24a17 	ldw	r2,-14040(gp)
   225a4:	1884703a 	and	r2,r3,r2
   225a8:	d0b24a15 	stw	r2,-14040(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   225ac:	d0b24a17 	ldw	r2,-14040(gp)
   225b0:	100170fa 	wrctl	ienable,r2
   225b4:	e0bffc17 	ldw	r2,-16(fp)
   225b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   225bc:	e0bffd17 	ldw	r2,-12(fp)
   225c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   225c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   225c8:	0001883a 	nop
}
   225cc:	e037883a 	mov	sp,fp
   225d0:	df000017 	ldw	fp,0(sp)
   225d4:	dec00104 	addi	sp,sp,4
   225d8:	f800283a 	ret

000225dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   225dc:	defffc04 	addi	sp,sp,-16
   225e0:	df000315 	stw	fp,12(sp)
   225e4:	df000304 	addi	fp,sp,12
   225e8:	e13ffe15 	stw	r4,-8(fp)
   225ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   225f0:	000530fa 	rdctl	r2,ienable
   225f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   225f8:	00c00044 	movi	r3,1
   225fc:	e0bfff17 	ldw	r2,-4(fp)
   22600:	1884983a 	sll	r2,r3,r2
   22604:	1007883a 	mov	r3,r2
   22608:	e0bffd17 	ldw	r2,-12(fp)
   2260c:	1884703a 	and	r2,r3,r2
   22610:	1004c03a 	cmpne	r2,r2,zero
   22614:	10803fcc 	andi	r2,r2,255
}
   22618:	e037883a 	mov	sp,fp
   2261c:	df000017 	ldw	fp,0(sp)
   22620:	dec00104 	addi	sp,sp,4
   22624:	f800283a 	ret

00022628 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22628:	defff504 	addi	sp,sp,-44
   2262c:	dfc00a15 	stw	ra,40(sp)
   22630:	df000915 	stw	fp,36(sp)
   22634:	df000904 	addi	fp,sp,36
   22638:	e13ffc15 	stw	r4,-16(fp)
   2263c:	e17ffd15 	stw	r5,-12(fp)
   22640:	e1bffe15 	stw	r6,-8(fp)
   22644:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   22648:	00bffa84 	movi	r2,-22
   2264c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   22650:	e0bffd17 	ldw	r2,-12(fp)
   22654:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   22658:	e0bff817 	ldw	r2,-32(fp)
   2265c:	10800808 	cmpgei	r2,r2,32
   22660:	1000271e 	bne	r2,zero,22700 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22664:	0005303a 	rdctl	r2,status
   22668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2266c:	e0fffb17 	ldw	r3,-20(fp)
   22670:	00bfff84 	movi	r2,-2
   22674:	1884703a 	and	r2,r3,r2
   22678:	1001703a 	wrctl	status,r2
  
  return context;
   2267c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   22680:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   22684:	008000f4 	movhi	r2,3
   22688:	1082ff04 	addi	r2,r2,3068
   2268c:	e0fff817 	ldw	r3,-32(fp)
   22690:	180690fa 	slli	r3,r3,3
   22694:	10c5883a 	add	r2,r2,r3
   22698:	e0fffe17 	ldw	r3,-8(fp)
   2269c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   226a0:	008000f4 	movhi	r2,3
   226a4:	1082ff04 	addi	r2,r2,3068
   226a8:	e0fff817 	ldw	r3,-32(fp)
   226ac:	180690fa 	slli	r3,r3,3
   226b0:	10c5883a 	add	r2,r2,r3
   226b4:	10800104 	addi	r2,r2,4
   226b8:	e0ffff17 	ldw	r3,-4(fp)
   226bc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   226c0:	e0bffe17 	ldw	r2,-8(fp)
   226c4:	10000526 	beq	r2,zero,226dc <alt_iic_isr_register+0xb4>
   226c8:	e0bff817 	ldw	r2,-32(fp)
   226cc:	100b883a 	mov	r5,r2
   226d0:	e13ffc17 	ldw	r4,-16(fp)
   226d4:	00224c80 	call	224c8 <alt_ic_irq_enable>
   226d8:	00000406 	br	226ec <alt_iic_isr_register+0xc4>
   226dc:	e0bff817 	ldw	r2,-32(fp)
   226e0:	100b883a 	mov	r5,r2
   226e4:	e13ffc17 	ldw	r4,-16(fp)
   226e8:	00225500 	call	22550 <alt_ic_irq_disable>
   226ec:	e0bff715 	stw	r2,-36(fp)
   226f0:	e0bffa17 	ldw	r2,-24(fp)
   226f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   226f8:	e0bff917 	ldw	r2,-28(fp)
   226fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   22700:	e0bff717 	ldw	r2,-36(fp)
}
   22704:	e037883a 	mov	sp,fp
   22708:	dfc00117 	ldw	ra,4(sp)
   2270c:	df000017 	ldw	fp,0(sp)
   22710:	dec00204 	addi	sp,sp,8
   22714:	f800283a 	ret

00022718 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   22718:	defff804 	addi	sp,sp,-32
   2271c:	dfc00715 	stw	ra,28(sp)
   22720:	df000615 	stw	fp,24(sp)
   22724:	dc000515 	stw	r16,20(sp)
   22728:	df000604 	addi	fp,sp,24
   2272c:	e13ffb15 	stw	r4,-20(fp)
   22730:	e17ffc15 	stw	r5,-16(fp)
   22734:	e1bffd15 	stw	r6,-12(fp)
   22738:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   2273c:	e1bffe17 	ldw	r6,-8(fp)
   22740:	e17ffd17 	ldw	r5,-12(fp)
   22744:	e13ffc17 	ldw	r4,-16(fp)
   22748:	00229a00 	call	229a0 <open>
   2274c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   22750:	e0bffa17 	ldw	r2,-24(fp)
   22754:	10002216 	blt	r2,zero,227e0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   22758:	040000f4 	movhi	r16,3
   2275c:	842bd504 	addi	r16,r16,-20652
   22760:	e0bffa17 	ldw	r2,-24(fp)
   22764:	01400304 	movi	r5,12
   22768:	1009883a 	mov	r4,r2
   2276c:	000ce000 	call	ce00 <__mulsi3>
   22770:	8085883a 	add	r2,r16,r2
   22774:	10c00017 	ldw	r3,0(r2)
   22778:	e0bffb17 	ldw	r2,-20(fp)
   2277c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   22780:	040000f4 	movhi	r16,3
   22784:	842bd504 	addi	r16,r16,-20652
   22788:	e0bffa17 	ldw	r2,-24(fp)
   2278c:	01400304 	movi	r5,12
   22790:	1009883a 	mov	r4,r2
   22794:	000ce000 	call	ce00 <__mulsi3>
   22798:	8085883a 	add	r2,r16,r2
   2279c:	10800104 	addi	r2,r2,4
   227a0:	10c00017 	ldw	r3,0(r2)
   227a4:	e0bffb17 	ldw	r2,-20(fp)
   227a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   227ac:	040000f4 	movhi	r16,3
   227b0:	842bd504 	addi	r16,r16,-20652
   227b4:	e0bffa17 	ldw	r2,-24(fp)
   227b8:	01400304 	movi	r5,12
   227bc:	1009883a 	mov	r4,r2
   227c0:	000ce000 	call	ce00 <__mulsi3>
   227c4:	8085883a 	add	r2,r16,r2
   227c8:	10800204 	addi	r2,r2,8
   227cc:	10c00017 	ldw	r3,0(r2)
   227d0:	e0bffb17 	ldw	r2,-20(fp)
   227d4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   227d8:	e13ffa17 	ldw	r4,-24(fp)
   227dc:	001f1e00 	call	1f1e0 <alt_release_fd>
  }
} 
   227e0:	0001883a 	nop
   227e4:	e6ffff04 	addi	sp,fp,-4
   227e8:	dfc00217 	ldw	ra,8(sp)
   227ec:	df000117 	ldw	fp,4(sp)
   227f0:	dc000017 	ldw	r16,0(sp)
   227f4:	dec00304 	addi	sp,sp,12
   227f8:	f800283a 	ret

000227fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   227fc:	defffb04 	addi	sp,sp,-20
   22800:	dfc00415 	stw	ra,16(sp)
   22804:	df000315 	stw	fp,12(sp)
   22808:	df000304 	addi	fp,sp,12
   2280c:	e13ffd15 	stw	r4,-12(fp)
   22810:	e17ffe15 	stw	r5,-8(fp)
   22814:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   22818:	01c07fc4 	movi	r7,511
   2281c:	01800044 	movi	r6,1
   22820:	e17ffd17 	ldw	r5,-12(fp)
   22824:	010000f4 	movhi	r4,3
   22828:	212bd804 	addi	r4,r4,-20640
   2282c:	00227180 	call	22718 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   22830:	01c07fc4 	movi	r7,511
   22834:	000d883a 	mov	r6,zero
   22838:	e17ffe17 	ldw	r5,-8(fp)
   2283c:	010000f4 	movhi	r4,3
   22840:	212bd504 	addi	r4,r4,-20652
   22844:	00227180 	call	22718 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22848:	01c07fc4 	movi	r7,511
   2284c:	01800044 	movi	r6,1
   22850:	e17fff17 	ldw	r5,-4(fp)
   22854:	010000f4 	movhi	r4,3
   22858:	212bdb04 	addi	r4,r4,-20628
   2285c:	00227180 	call	22718 <alt_open_fd>
}  
   22860:	0001883a 	nop
   22864:	e037883a 	mov	sp,fp
   22868:	dfc00117 	ldw	ra,4(sp)
   2286c:	df000017 	ldw	fp,0(sp)
   22870:	dec00204 	addi	sp,sp,8
   22874:	f800283a 	ret

00022878 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22878:	defffe04 	addi	sp,sp,-8
   2287c:	dfc00115 	stw	ra,4(sp)
   22880:	df000015 	stw	fp,0(sp)
   22884:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22888:	d0a5b917 	ldw	r2,-26908(gp)
   2288c:	10000326 	beq	r2,zero,2289c <alt_get_errno+0x24>
   22890:	d0a5b917 	ldw	r2,-26908(gp)
   22894:	103ee83a 	callr	r2
   22898:	00000106 	br	228a0 <alt_get_errno+0x28>
   2289c:	d0b24304 	addi	r2,gp,-14068
}
   228a0:	e037883a 	mov	sp,fp
   228a4:	dfc00117 	ldw	ra,4(sp)
   228a8:	df000017 	ldw	fp,0(sp)
   228ac:	dec00204 	addi	sp,sp,8
   228b0:	f800283a 	ret

000228b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   228b4:	defffb04 	addi	sp,sp,-20
   228b8:	dfc00415 	stw	ra,16(sp)
   228bc:	df000315 	stw	fp,12(sp)
   228c0:	dc000215 	stw	r16,8(sp)
   228c4:	df000304 	addi	fp,sp,12
   228c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   228cc:	e0bffe17 	ldw	r2,-8(fp)
   228d0:	10800217 	ldw	r2,8(r2)
   228d4:	10d00034 	orhi	r3,r2,16384
   228d8:	e0bffe17 	ldw	r2,-8(fp)
   228dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   228e0:	e03ffd15 	stw	zero,-12(fp)
   228e4:	00002306 	br	22974 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   228e8:	040000f4 	movhi	r16,3
   228ec:	842bd504 	addi	r16,r16,-20652
   228f0:	e0bffd17 	ldw	r2,-12(fp)
   228f4:	01400304 	movi	r5,12
   228f8:	1009883a 	mov	r4,r2
   228fc:	000ce000 	call	ce00 <__mulsi3>
   22900:	8085883a 	add	r2,r16,r2
   22904:	10c00017 	ldw	r3,0(r2)
   22908:	e0bffe17 	ldw	r2,-8(fp)
   2290c:	10800017 	ldw	r2,0(r2)
   22910:	1880151e 	bne	r3,r2,22968 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22914:	040000f4 	movhi	r16,3
   22918:	842bd504 	addi	r16,r16,-20652
   2291c:	e0bffd17 	ldw	r2,-12(fp)
   22920:	01400304 	movi	r5,12
   22924:	1009883a 	mov	r4,r2
   22928:	000ce000 	call	ce00 <__mulsi3>
   2292c:	8085883a 	add	r2,r16,r2
   22930:	10800204 	addi	r2,r2,8
   22934:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22938:	10000b0e 	bge	r2,zero,22968 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2293c:	01400304 	movi	r5,12
   22940:	e13ffd17 	ldw	r4,-12(fp)
   22944:	000ce000 	call	ce00 <__mulsi3>
   22948:	1007883a 	mov	r3,r2
   2294c:	008000f4 	movhi	r2,3
   22950:	10abd504 	addi	r2,r2,-20652
   22954:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22958:	e0bffe17 	ldw	r2,-8(fp)
   2295c:	18800226 	beq	r3,r2,22968 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22960:	00bffcc4 	movi	r2,-13
   22964:	00000806 	br	22988 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22968:	e0bffd17 	ldw	r2,-12(fp)
   2296c:	10800044 	addi	r2,r2,1
   22970:	e0bffd15 	stw	r2,-12(fp)
   22974:	d0a5b817 	ldw	r2,-26912(gp)
   22978:	1007883a 	mov	r3,r2
   2297c:	e0bffd17 	ldw	r2,-12(fp)
   22980:	18bfd92e 	bgeu	r3,r2,228e8 <__alt_data_end+0xfc0228e8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22984:	0005883a 	mov	r2,zero
}
   22988:	e6ffff04 	addi	sp,fp,-4
   2298c:	dfc00217 	ldw	ra,8(sp)
   22990:	df000117 	ldw	fp,4(sp)
   22994:	dc000017 	ldw	r16,0(sp)
   22998:	dec00304 	addi	sp,sp,12
   2299c:	f800283a 	ret

000229a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   229a0:	defff604 	addi	sp,sp,-40
   229a4:	dfc00915 	stw	ra,36(sp)
   229a8:	df000815 	stw	fp,32(sp)
   229ac:	df000804 	addi	fp,sp,32
   229b0:	e13ffd15 	stw	r4,-12(fp)
   229b4:	e17ffe15 	stw	r5,-8(fp)
   229b8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   229bc:	00bfffc4 	movi	r2,-1
   229c0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   229c4:	00bffb44 	movi	r2,-19
   229c8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   229cc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   229d0:	d165b604 	addi	r5,gp,-26920
   229d4:	e13ffd17 	ldw	r4,-12(fp)
   229d8:	00223c80 	call	223c8 <alt_find_dev>
   229dc:	e0bff815 	stw	r2,-32(fp)
   229e0:	e0bff817 	ldw	r2,-32(fp)
   229e4:	1000051e 	bne	r2,zero,229fc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   229e8:	e13ffd17 	ldw	r4,-12(fp)
   229ec:	0022f2c0 	call	22f2c <alt_find_file>
   229f0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   229f4:	00800044 	movi	r2,1
   229f8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   229fc:	e0bff817 	ldw	r2,-32(fp)
   22a00:	10002b26 	beq	r2,zero,22ab0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22a04:	e13ff817 	ldw	r4,-32(fp)
   22a08:	00230340 	call	23034 <alt_get_fd>
   22a0c:	e0bff915 	stw	r2,-28(fp)
   22a10:	e0bff917 	ldw	r2,-28(fp)
   22a14:	1000030e 	bge	r2,zero,22a24 <open+0x84>
    {
      status = index;
   22a18:	e0bff917 	ldw	r2,-28(fp)
   22a1c:	e0bffa15 	stw	r2,-24(fp)
   22a20:	00002506 	br	22ab8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   22a24:	01400304 	movi	r5,12
   22a28:	e13ff917 	ldw	r4,-28(fp)
   22a2c:	000ce000 	call	ce00 <__mulsi3>
   22a30:	1007883a 	mov	r3,r2
   22a34:	008000f4 	movhi	r2,3
   22a38:	10abd504 	addi	r2,r2,-20652
   22a3c:	1885883a 	add	r2,r3,r2
   22a40:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22a44:	e0fffe17 	ldw	r3,-8(fp)
   22a48:	00900034 	movhi	r2,16384
   22a4c:	10bfffc4 	addi	r2,r2,-1
   22a50:	1886703a 	and	r3,r3,r2
   22a54:	e0bffc17 	ldw	r2,-16(fp)
   22a58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22a5c:	e0bffb17 	ldw	r2,-20(fp)
   22a60:	1000051e 	bne	r2,zero,22a78 <open+0xd8>
   22a64:	e13ffc17 	ldw	r4,-16(fp)
   22a68:	00228b40 	call	228b4 <alt_file_locked>
   22a6c:	e0bffa15 	stw	r2,-24(fp)
   22a70:	e0bffa17 	ldw	r2,-24(fp)
   22a74:	10001016 	blt	r2,zero,22ab8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22a78:	e0bff817 	ldw	r2,-32(fp)
   22a7c:	10800317 	ldw	r2,12(r2)
   22a80:	10000826 	beq	r2,zero,22aa4 <open+0x104>
   22a84:	e0bff817 	ldw	r2,-32(fp)
   22a88:	10800317 	ldw	r2,12(r2)
   22a8c:	e1ffff17 	ldw	r7,-4(fp)
   22a90:	e1bffe17 	ldw	r6,-8(fp)
   22a94:	e17ffd17 	ldw	r5,-12(fp)
   22a98:	e13ffc17 	ldw	r4,-16(fp)
   22a9c:	103ee83a 	callr	r2
   22aa0:	00000106 	br	22aa8 <open+0x108>
   22aa4:	0005883a 	mov	r2,zero
   22aa8:	e0bffa15 	stw	r2,-24(fp)
   22aac:	00000206 	br	22ab8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   22ab0:	00bffb44 	movi	r2,-19
   22ab4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   22ab8:	e0bffa17 	ldw	r2,-24(fp)
   22abc:	1000090e 	bge	r2,zero,22ae4 <open+0x144>
  {
    alt_release_fd (index);  
   22ac0:	e13ff917 	ldw	r4,-28(fp)
   22ac4:	001f1e00 	call	1f1e0 <alt_release_fd>
    ALT_ERRNO = -status;
   22ac8:	00228780 	call	22878 <alt_get_errno>
   22acc:	1007883a 	mov	r3,r2
   22ad0:	e0bffa17 	ldw	r2,-24(fp)
   22ad4:	0085c83a 	sub	r2,zero,r2
   22ad8:	18800015 	stw	r2,0(r3)
    return -1;
   22adc:	00bfffc4 	movi	r2,-1
   22ae0:	00000106 	br	22ae8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   22ae4:	e0bff917 	ldw	r2,-28(fp)
}
   22ae8:	e037883a 	mov	sp,fp
   22aec:	dfc00117 	ldw	ra,4(sp)
   22af0:	df000017 	ldw	fp,0(sp)
   22af4:	dec00204 	addi	sp,sp,8
   22af8:	f800283a 	ret

00022afc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   22afc:	defff204 	addi	sp,sp,-56
   22b00:	dfc00a15 	stw	ra,40(sp)
   22b04:	df000915 	stw	fp,36(sp)
   22b08:	df000904 	addi	fp,sp,36
   22b0c:	e13fff15 	stw	r4,-4(fp)
   22b10:	e1400215 	stw	r5,8(fp)
   22b14:	e1800315 	stw	r6,12(fp)
   22b18:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   22b1c:	e0800204 	addi	r2,fp,8
   22b20:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   22b24:	e0bfff17 	ldw	r2,-4(fp)
   22b28:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   22b2c:	00006f06 	br	22cec <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   22b30:	e0bff807 	ldb	r2,-32(fp)
   22b34:	10800960 	cmpeqi	r2,r2,37
   22b38:	1000041e 	bne	r2,zero,22b4c <alt_printf+0x50>
        {
            alt_putchar(c);
   22b3c:	e0bff807 	ldb	r2,-32(fp)
   22b40:	1009883a 	mov	r4,r2
   22b44:	0022d280 	call	22d28 <alt_putchar>
   22b48:	00006806 	br	22cec <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   22b4c:	e0bff717 	ldw	r2,-36(fp)
   22b50:	10c00044 	addi	r3,r2,1
   22b54:	e0fff715 	stw	r3,-36(fp)
   22b58:	10800003 	ldbu	r2,0(r2)
   22b5c:	e0bff805 	stb	r2,-32(fp)
   22b60:	e0bff807 	ldb	r2,-32(fp)
   22b64:	10006926 	beq	r2,zero,22d0c <alt_printf+0x210>
            {
                if (c == '%')
   22b68:	e0bff807 	ldb	r2,-32(fp)
   22b6c:	10800958 	cmpnei	r2,r2,37
   22b70:	1000041e 	bne	r2,zero,22b84 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   22b74:	e0bff807 	ldb	r2,-32(fp)
   22b78:	1009883a 	mov	r4,r2
   22b7c:	0022d280 	call	22d28 <alt_putchar>
   22b80:	00005a06 	br	22cec <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   22b84:	e0bff807 	ldb	r2,-32(fp)
   22b88:	108018d8 	cmpnei	r2,r2,99
   22b8c:	1000081e 	bne	r2,zero,22bb0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   22b90:	e0bffe17 	ldw	r2,-8(fp)
   22b94:	10c00104 	addi	r3,r2,4
   22b98:	e0fffe15 	stw	r3,-8(fp)
   22b9c:	10800017 	ldw	r2,0(r2)
   22ba0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   22ba4:	e13ffd17 	ldw	r4,-12(fp)
   22ba8:	0022d280 	call	22d28 <alt_putchar>
   22bac:	00004f06 	br	22cec <alt_printf+0x1f0>
                }
                else if (c == 'x')
   22bb0:	e0bff807 	ldb	r2,-32(fp)
   22bb4:	10801e18 	cmpnei	r2,r2,120
   22bb8:	1000341e 	bne	r2,zero,22c8c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   22bbc:	e0bffe17 	ldw	r2,-8(fp)
   22bc0:	10c00104 	addi	r3,r2,4
   22bc4:	e0fffe15 	stw	r3,-8(fp)
   22bc8:	10800017 	ldw	r2,0(r2)
   22bcc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   22bd0:	e0bffb17 	ldw	r2,-20(fp)
   22bd4:	1000031e 	bne	r2,zero,22be4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   22bd8:	01000c04 	movi	r4,48
   22bdc:	0022d280 	call	22d28 <alt_putchar>
                        continue;
   22be0:	00004206 	br	22cec <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   22be4:	00800704 	movi	r2,28
   22be8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   22bec:	00000306 	br	22bfc <alt_printf+0x100>
                        digit_shift -= 4;
   22bf0:	e0bff917 	ldw	r2,-28(fp)
   22bf4:	10bfff04 	addi	r2,r2,-4
   22bf8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   22bfc:	00c003c4 	movi	r3,15
   22c00:	e0bff917 	ldw	r2,-28(fp)
   22c04:	1884983a 	sll	r2,r3,r2
   22c08:	1007883a 	mov	r3,r2
   22c0c:	e0bffb17 	ldw	r2,-20(fp)
   22c10:	1884703a 	and	r2,r3,r2
   22c14:	103ff626 	beq	r2,zero,22bf0 <__alt_data_end+0xfc022bf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   22c18:	00001906 	br	22c80 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   22c1c:	00c003c4 	movi	r3,15
   22c20:	e0bff917 	ldw	r2,-28(fp)
   22c24:	1884983a 	sll	r2,r3,r2
   22c28:	1007883a 	mov	r3,r2
   22c2c:	e0bffb17 	ldw	r2,-20(fp)
   22c30:	1886703a 	and	r3,r3,r2
   22c34:	e0bff917 	ldw	r2,-28(fp)
   22c38:	1884d83a 	srl	r2,r3,r2
   22c3c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   22c40:	e0bffc17 	ldw	r2,-16(fp)
   22c44:	108002a8 	cmpgeui	r2,r2,10
   22c48:	1000041e 	bne	r2,zero,22c5c <alt_printf+0x160>
                            c = '0' + digit;
   22c4c:	e0bffc17 	ldw	r2,-16(fp)
   22c50:	10800c04 	addi	r2,r2,48
   22c54:	e0bff805 	stb	r2,-32(fp)
   22c58:	00000306 	br	22c68 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   22c5c:	e0bffc17 	ldw	r2,-16(fp)
   22c60:	108015c4 	addi	r2,r2,87
   22c64:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   22c68:	e0bff807 	ldb	r2,-32(fp)
   22c6c:	1009883a 	mov	r4,r2
   22c70:	0022d280 	call	22d28 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   22c74:	e0bff917 	ldw	r2,-28(fp)
   22c78:	10bfff04 	addi	r2,r2,-4
   22c7c:	e0bff915 	stw	r2,-28(fp)
   22c80:	e0bff917 	ldw	r2,-28(fp)
   22c84:	103fe50e 	bge	r2,zero,22c1c <__alt_data_end+0xfc022c1c>
   22c88:	00001806 	br	22cec <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   22c8c:	e0bff807 	ldb	r2,-32(fp)
   22c90:	10801cd8 	cmpnei	r2,r2,115
   22c94:	1000151e 	bne	r2,zero,22cec <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   22c98:	e0bffe17 	ldw	r2,-8(fp)
   22c9c:	10c00104 	addi	r3,r2,4
   22ca0:	e0fffe15 	stw	r3,-8(fp)
   22ca4:	10800017 	ldw	r2,0(r2)
   22ca8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   22cac:	00000906 	br	22cd4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   22cb0:	e0bffa17 	ldw	r2,-24(fp)
   22cb4:	10c00044 	addi	r3,r2,1
   22cb8:	e0fffa15 	stw	r3,-24(fp)
   22cbc:	10800003 	ldbu	r2,0(r2)
   22cc0:	10803fcc 	andi	r2,r2,255
   22cc4:	1080201c 	xori	r2,r2,128
   22cc8:	10bfe004 	addi	r2,r2,-128
   22ccc:	1009883a 	mov	r4,r2
   22cd0:	0022d280 	call	22d28 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   22cd4:	e0bffa17 	ldw	r2,-24(fp)
   22cd8:	10800003 	ldbu	r2,0(r2)
   22cdc:	10803fcc 	andi	r2,r2,255
   22ce0:	1080201c 	xori	r2,r2,128
   22ce4:	10bfe004 	addi	r2,r2,-128
   22ce8:	103ff11e 	bne	r2,zero,22cb0 <__alt_data_end+0xfc022cb0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   22cec:	e0bff717 	ldw	r2,-36(fp)
   22cf0:	10c00044 	addi	r3,r2,1
   22cf4:	e0fff715 	stw	r3,-36(fp)
   22cf8:	10800003 	ldbu	r2,0(r2)
   22cfc:	e0bff805 	stb	r2,-32(fp)
   22d00:	e0bff807 	ldb	r2,-32(fp)
   22d04:	103f8a1e 	bne	r2,zero,22b30 <__alt_data_end+0xfc022b30>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   22d08:	00000106 	br	22d10 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   22d0c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   22d10:	0001883a 	nop
   22d14:	e037883a 	mov	sp,fp
   22d18:	dfc00117 	ldw	ra,4(sp)
   22d1c:	df000017 	ldw	fp,0(sp)
   22d20:	dec00504 	addi	sp,sp,20
   22d24:	f800283a 	ret

00022d28 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   22d28:	defffd04 	addi	sp,sp,-12
   22d2c:	dfc00215 	stw	ra,8(sp)
   22d30:	df000115 	stw	fp,4(sp)
   22d34:	df000104 	addi	fp,sp,4
   22d38:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   22d3c:	d0a5af17 	ldw	r2,-26948(gp)
   22d40:	10800217 	ldw	r2,8(r2)
   22d44:	100b883a 	mov	r5,r2
   22d48:	e13fff17 	ldw	r4,-4(fp)
   22d4c:	001776c0 	call	1776c <putc>
#endif
#endif
}
   22d50:	e037883a 	mov	sp,fp
   22d54:	dfc00117 	ldw	ra,4(sp)
   22d58:	df000017 	ldw	fp,0(sp)
   22d5c:	dec00204 	addi	sp,sp,8
   22d60:	f800283a 	ret

00022d64 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   22d64:	defffa04 	addi	sp,sp,-24
   22d68:	df000515 	stw	fp,20(sp)
   22d6c:	df000504 	addi	fp,sp,20
   22d70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22d74:	0005303a 	rdctl	r2,status
   22d78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22d7c:	e0fffc17 	ldw	r3,-16(fp)
   22d80:	00bfff84 	movi	r2,-2
   22d84:	1884703a 	and	r2,r3,r2
   22d88:	1001703a 	wrctl	status,r2
  
  return context;
   22d8c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   22d90:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   22d94:	e0bfff17 	ldw	r2,-4(fp)
   22d98:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   22d9c:	e0bffd17 	ldw	r2,-12(fp)
   22da0:	10800017 	ldw	r2,0(r2)
   22da4:	e0fffd17 	ldw	r3,-12(fp)
   22da8:	18c00117 	ldw	r3,4(r3)
   22dac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   22db0:	e0bffd17 	ldw	r2,-12(fp)
   22db4:	10800117 	ldw	r2,4(r2)
   22db8:	e0fffd17 	ldw	r3,-12(fp)
   22dbc:	18c00017 	ldw	r3,0(r3)
   22dc0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   22dc4:	e0bffd17 	ldw	r2,-12(fp)
   22dc8:	e0fffd17 	ldw	r3,-12(fp)
   22dcc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   22dd0:	e0bffd17 	ldw	r2,-12(fp)
   22dd4:	e0fffd17 	ldw	r3,-12(fp)
   22dd8:	10c00015 	stw	r3,0(r2)
   22ddc:	e0bffb17 	ldw	r2,-20(fp)
   22de0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22de4:	e0bffe17 	ldw	r2,-8(fp)
   22de8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   22dec:	0001883a 	nop
   22df0:	e037883a 	mov	sp,fp
   22df4:	df000017 	ldw	fp,0(sp)
   22df8:	dec00104 	addi	sp,sp,4
   22dfc:	f800283a 	ret

00022e00 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   22e00:	defffb04 	addi	sp,sp,-20
   22e04:	dfc00415 	stw	ra,16(sp)
   22e08:	df000315 	stw	fp,12(sp)
   22e0c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   22e10:	d0a5be17 	ldw	r2,-26888(gp)
   22e14:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   22e18:	d0b24c17 	ldw	r2,-14032(gp)
   22e1c:	10800044 	addi	r2,r2,1
   22e20:	d0b24c15 	stw	r2,-14032(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22e24:	00002e06 	br	22ee0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   22e28:	e0bffd17 	ldw	r2,-12(fp)
   22e2c:	10800017 	ldw	r2,0(r2)
   22e30:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   22e34:	e0bffd17 	ldw	r2,-12(fp)
   22e38:	10800403 	ldbu	r2,16(r2)
   22e3c:	10803fcc 	andi	r2,r2,255
   22e40:	10000426 	beq	r2,zero,22e54 <alt_tick+0x54>
   22e44:	d0b24c17 	ldw	r2,-14032(gp)
   22e48:	1000021e 	bne	r2,zero,22e54 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   22e4c:	e0bffd17 	ldw	r2,-12(fp)
   22e50:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   22e54:	e0bffd17 	ldw	r2,-12(fp)
   22e58:	10800217 	ldw	r2,8(r2)
   22e5c:	d0f24c17 	ldw	r3,-14032(gp)
   22e60:	18801d36 	bltu	r3,r2,22ed8 <alt_tick+0xd8>
   22e64:	e0bffd17 	ldw	r2,-12(fp)
   22e68:	10800403 	ldbu	r2,16(r2)
   22e6c:	10803fcc 	andi	r2,r2,255
   22e70:	1000191e 	bne	r2,zero,22ed8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   22e74:	e0bffd17 	ldw	r2,-12(fp)
   22e78:	10800317 	ldw	r2,12(r2)
   22e7c:	e0fffd17 	ldw	r3,-12(fp)
   22e80:	18c00517 	ldw	r3,20(r3)
   22e84:	1809883a 	mov	r4,r3
   22e88:	103ee83a 	callr	r2
   22e8c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   22e90:	e0bfff17 	ldw	r2,-4(fp)
   22e94:	1000031e 	bne	r2,zero,22ea4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   22e98:	e13ffd17 	ldw	r4,-12(fp)
   22e9c:	0022d640 	call	22d64 <alt_alarm_stop>
   22ea0:	00000d06 	br	22ed8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   22ea4:	e0bffd17 	ldw	r2,-12(fp)
   22ea8:	10c00217 	ldw	r3,8(r2)
   22eac:	e0bfff17 	ldw	r2,-4(fp)
   22eb0:	1887883a 	add	r3,r3,r2
   22eb4:	e0bffd17 	ldw	r2,-12(fp)
   22eb8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   22ebc:	e0bffd17 	ldw	r2,-12(fp)
   22ec0:	10c00217 	ldw	r3,8(r2)
   22ec4:	d0b24c17 	ldw	r2,-14032(gp)
   22ec8:	1880032e 	bgeu	r3,r2,22ed8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   22ecc:	e0bffd17 	ldw	r2,-12(fp)
   22ed0:	00c00044 	movi	r3,1
   22ed4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   22ed8:	e0bffe17 	ldw	r2,-8(fp)
   22edc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22ee0:	e0fffd17 	ldw	r3,-12(fp)
   22ee4:	d0a5be04 	addi	r2,gp,-26888
   22ee8:	18bfcf1e 	bne	r3,r2,22e28 <__alt_data_end+0xfc022e28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   22eec:	0001883a 	nop
}
   22ef0:	0001883a 	nop
   22ef4:	e037883a 	mov	sp,fp
   22ef8:	dfc00117 	ldw	ra,4(sp)
   22efc:	df000017 	ldw	fp,0(sp)
   22f00:	dec00204 	addi	sp,sp,8
   22f04:	f800283a 	ret

00022f08 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   22f08:	deffff04 	addi	sp,sp,-4
   22f0c:	df000015 	stw	fp,0(sp)
   22f10:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   22f14:	000170fa 	wrctl	ienable,zero
}
   22f18:	0001883a 	nop
   22f1c:	e037883a 	mov	sp,fp
   22f20:	df000017 	ldw	fp,0(sp)
   22f24:	dec00104 	addi	sp,sp,4
   22f28:	f800283a 	ret

00022f2c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   22f2c:	defffb04 	addi	sp,sp,-20
   22f30:	dfc00415 	stw	ra,16(sp)
   22f34:	df000315 	stw	fp,12(sp)
   22f38:	df000304 	addi	fp,sp,12
   22f3c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   22f40:	d0a5b417 	ldw	r2,-26928(gp)
   22f44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22f48:	00003106 	br	23010 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   22f4c:	e0bffd17 	ldw	r2,-12(fp)
   22f50:	10800217 	ldw	r2,8(r2)
   22f54:	1009883a 	mov	r4,r2
   22f58:	000ef4c0 	call	ef4c <strlen>
   22f5c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   22f60:	e0bffd17 	ldw	r2,-12(fp)
   22f64:	10c00217 	ldw	r3,8(r2)
   22f68:	e0bffe17 	ldw	r2,-8(fp)
   22f6c:	10bfffc4 	addi	r2,r2,-1
   22f70:	1885883a 	add	r2,r3,r2
   22f74:	10800003 	ldbu	r2,0(r2)
   22f78:	10803fcc 	andi	r2,r2,255
   22f7c:	1080201c 	xori	r2,r2,128
   22f80:	10bfe004 	addi	r2,r2,-128
   22f84:	10800bd8 	cmpnei	r2,r2,47
   22f88:	1000031e 	bne	r2,zero,22f98 <alt_find_file+0x6c>
    {
      len -= 1;
   22f8c:	e0bffe17 	ldw	r2,-8(fp)
   22f90:	10bfffc4 	addi	r2,r2,-1
   22f94:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22f98:	e0bffe17 	ldw	r2,-8(fp)
   22f9c:	e0ffff17 	ldw	r3,-4(fp)
   22fa0:	1885883a 	add	r2,r3,r2
   22fa4:	10800003 	ldbu	r2,0(r2)
   22fa8:	10803fcc 	andi	r2,r2,255
   22fac:	1080201c 	xori	r2,r2,128
   22fb0:	10bfe004 	addi	r2,r2,-128
   22fb4:	10800be0 	cmpeqi	r2,r2,47
   22fb8:	1000081e 	bne	r2,zero,22fdc <alt_find_file+0xb0>
   22fbc:	e0bffe17 	ldw	r2,-8(fp)
   22fc0:	e0ffff17 	ldw	r3,-4(fp)
   22fc4:	1885883a 	add	r2,r3,r2
   22fc8:	10800003 	ldbu	r2,0(r2)
   22fcc:	10803fcc 	andi	r2,r2,255
   22fd0:	1080201c 	xori	r2,r2,128
   22fd4:	10bfe004 	addi	r2,r2,-128
   22fd8:	10000a1e 	bne	r2,zero,23004 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   22fdc:	e0bffd17 	ldw	r2,-12(fp)
   22fe0:	10800217 	ldw	r2,8(r2)
   22fe4:	e0fffe17 	ldw	r3,-8(fp)
   22fe8:	180d883a 	mov	r6,r3
   22fec:	e17fff17 	ldw	r5,-4(fp)
   22ff0:	1009883a 	mov	r4,r2
   22ff4:	00231e00 	call	231e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22ff8:	1000021e 	bne	r2,zero,23004 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   22ffc:	e0bffd17 	ldw	r2,-12(fp)
   23000:	00000706 	br	23020 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   23004:	e0bffd17 	ldw	r2,-12(fp)
   23008:	10800017 	ldw	r2,0(r2)
   2300c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23010:	e0fffd17 	ldw	r3,-12(fp)
   23014:	d0a5b404 	addi	r2,gp,-26928
   23018:	18bfcc1e 	bne	r3,r2,22f4c <__alt_data_end+0xfc022f4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2301c:	0005883a 	mov	r2,zero
}
   23020:	e037883a 	mov	sp,fp
   23024:	dfc00117 	ldw	ra,4(sp)
   23028:	df000017 	ldw	fp,0(sp)
   2302c:	dec00204 	addi	sp,sp,8
   23030:	f800283a 	ret

00023034 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   23034:	defffa04 	addi	sp,sp,-24
   23038:	dfc00515 	stw	ra,20(sp)
   2303c:	df000415 	stw	fp,16(sp)
   23040:	dc000315 	stw	r16,12(sp)
   23044:	df000404 	addi	fp,sp,16
   23048:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   2304c:	00bffa04 	movi	r2,-24
   23050:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23054:	e03ffc15 	stw	zero,-16(fp)
   23058:	00001d06 	br	230d0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   2305c:	040000f4 	movhi	r16,3
   23060:	842bd504 	addi	r16,r16,-20652
   23064:	e0bffc17 	ldw	r2,-16(fp)
   23068:	01400304 	movi	r5,12
   2306c:	1009883a 	mov	r4,r2
   23070:	000ce000 	call	ce00 <__mulsi3>
   23074:	8085883a 	add	r2,r16,r2
   23078:	10800017 	ldw	r2,0(r2)
   2307c:	1000111e 	bne	r2,zero,230c4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   23080:	040000f4 	movhi	r16,3
   23084:	842bd504 	addi	r16,r16,-20652
   23088:	e0bffc17 	ldw	r2,-16(fp)
   2308c:	01400304 	movi	r5,12
   23090:	1009883a 	mov	r4,r2
   23094:	000ce000 	call	ce00 <__mulsi3>
   23098:	8085883a 	add	r2,r16,r2
   2309c:	e0fffe17 	ldw	r3,-8(fp)
   230a0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   230a4:	d0e5b817 	ldw	r3,-26912(gp)
   230a8:	e0bffc17 	ldw	r2,-16(fp)
   230ac:	1880020e 	bge	r3,r2,230b8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   230b0:	e0bffc17 	ldw	r2,-16(fp)
   230b4:	d0a5b815 	stw	r2,-26912(gp)
      }
      rc = i;
   230b8:	e0bffc17 	ldw	r2,-16(fp)
   230bc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   230c0:	00000606 	br	230dc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   230c4:	e0bffc17 	ldw	r2,-16(fp)
   230c8:	10800044 	addi	r2,r2,1
   230cc:	e0bffc15 	stw	r2,-16(fp)
   230d0:	e0bffc17 	ldw	r2,-16(fp)
   230d4:	10800810 	cmplti	r2,r2,32
   230d8:	103fe01e 	bne	r2,zero,2305c <__alt_data_end+0xfc02305c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   230dc:	e0bffd17 	ldw	r2,-12(fp)
}
   230e0:	e6ffff04 	addi	sp,fp,-4
   230e4:	dfc00217 	ldw	ra,8(sp)
   230e8:	df000117 	ldw	fp,4(sp)
   230ec:	dc000017 	ldw	r16,0(sp)
   230f0:	dec00304 	addi	sp,sp,12
   230f4:	f800283a 	ret

000230f8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   230f8:	defffe04 	addi	sp,sp,-8
   230fc:	df000115 	stw	fp,4(sp)
   23100:	df000104 	addi	fp,sp,4
   23104:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   23108:	e0bfff17 	ldw	r2,-4(fp)
   2310c:	10bffe84 	addi	r2,r2,-6
   23110:	10c00428 	cmpgeui	r3,r2,16
   23114:	18001a1e 	bne	r3,zero,23180 <alt_exception_cause_generated_bad_addr+0x88>
   23118:	100690ba 	slli	r3,r2,2
   2311c:	008000b4 	movhi	r2,2
   23120:	108c4c04 	addi	r2,r2,12592
   23124:	1885883a 	add	r2,r3,r2
   23128:	10800017 	ldw	r2,0(r2)
   2312c:	1000683a 	jmp	r2
   23130:	00023170 	cmpltui	zero,zero,2245
   23134:	00023170 	cmpltui	zero,zero,2245
   23138:	00023180 	call	2318 <_ZN3USB13ReleaseDeviceEh+0x10>
   2313c:	00023180 	call	2318 <_ZN3USB13ReleaseDeviceEh+0x10>
   23140:	00023180 	call	2318 <_ZN3USB13ReleaseDeviceEh+0x10>
   23144:	00023170 	cmpltui	zero,zero,2245
   23148:	00023178 	rdprs	zero,zero,2245
   2314c:	00023180 	call	2318 <_ZN3USB13ReleaseDeviceEh+0x10>
   23150:	00023170 	cmpltui	zero,zero,2245
   23154:	00023170 	cmpltui	zero,zero,2245
   23158:	00023180 	call	2318 <_ZN3USB13ReleaseDeviceEh+0x10>
   2315c:	00023170 	cmpltui	zero,zero,2245
   23160:	00023178 	rdprs	zero,zero,2245
   23164:	00023180 	call	2318 <_ZN3USB13ReleaseDeviceEh+0x10>
   23168:	00023180 	call	2318 <_ZN3USB13ReleaseDeviceEh+0x10>
   2316c:	00023170 	cmpltui	zero,zero,2245
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   23170:	00800044 	movi	r2,1
   23174:	00000306 	br	23184 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23178:	0005883a 	mov	r2,zero
   2317c:	00000106 	br	23184 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   23180:	0005883a 	mov	r2,zero
  }
}
   23184:	e037883a 	mov	sp,fp
   23188:	df000017 	ldw	fp,0(sp)
   2318c:	dec00104 	addi	sp,sp,4
   23190:	f800283a 	ret

00023194 <atexit>:
   23194:	200b883a 	mov	r5,r4
   23198:	000f883a 	mov	r7,zero
   2319c:	000d883a 	mov	r6,zero
   231a0:	0009883a 	mov	r4,zero
   231a4:	002325c1 	jmpi	2325c <__register_exitproc>

000231a8 <exit>:
   231a8:	defffe04 	addi	sp,sp,-8
   231ac:	000b883a 	mov	r5,zero
   231b0:	dc000015 	stw	r16,0(sp)
   231b4:	dfc00115 	stw	ra,4(sp)
   231b8:	2021883a 	mov	r16,r4
   231bc:	00233740 	call	23374 <__call_exitprocs>
   231c0:	008000f4 	movhi	r2,3
   231c4:	10b60904 	addi	r2,r2,-10204
   231c8:	11000017 	ldw	r4,0(r2)
   231cc:	20800f17 	ldw	r2,60(r4)
   231d0:	10000126 	beq	r2,zero,231d8 <exit+0x30>
   231d4:	103ee83a 	callr	r2
   231d8:	8009883a 	mov	r4,r16
   231dc:	001ea3c0 	call	1ea3c <_exit>

000231e0 <memcmp>:
   231e0:	01c000c4 	movi	r7,3
   231e4:	3980192e 	bgeu	r7,r6,2324c <memcmp+0x6c>
   231e8:	2144b03a 	or	r2,r4,r5
   231ec:	11c4703a 	and	r2,r2,r7
   231f0:	10000f26 	beq	r2,zero,23230 <memcmp+0x50>
   231f4:	20800003 	ldbu	r2,0(r4)
   231f8:	28c00003 	ldbu	r3,0(r5)
   231fc:	10c0151e 	bne	r2,r3,23254 <memcmp+0x74>
   23200:	31bfff84 	addi	r6,r6,-2
   23204:	01ffffc4 	movi	r7,-1
   23208:	00000406 	br	2321c <memcmp+0x3c>
   2320c:	20800003 	ldbu	r2,0(r4)
   23210:	28c00003 	ldbu	r3,0(r5)
   23214:	31bfffc4 	addi	r6,r6,-1
   23218:	10c00e1e 	bne	r2,r3,23254 <memcmp+0x74>
   2321c:	21000044 	addi	r4,r4,1
   23220:	29400044 	addi	r5,r5,1
   23224:	31fff91e 	bne	r6,r7,2320c <__alt_data_end+0xfc02320c>
   23228:	0005883a 	mov	r2,zero
   2322c:	f800283a 	ret
   23230:	20c00017 	ldw	r3,0(r4)
   23234:	28800017 	ldw	r2,0(r5)
   23238:	18bfee1e 	bne	r3,r2,231f4 <__alt_data_end+0xfc0231f4>
   2323c:	31bfff04 	addi	r6,r6,-4
   23240:	21000104 	addi	r4,r4,4
   23244:	29400104 	addi	r5,r5,4
   23248:	39bff936 	bltu	r7,r6,23230 <__alt_data_end+0xfc023230>
   2324c:	303fe91e 	bne	r6,zero,231f4 <__alt_data_end+0xfc0231f4>
   23250:	003ff506 	br	23228 <__alt_data_end+0xfc023228>
   23254:	10c5c83a 	sub	r2,r2,r3
   23258:	f800283a 	ret

0002325c <__register_exitproc>:
   2325c:	defffa04 	addi	sp,sp,-24
   23260:	dc000315 	stw	r16,12(sp)
   23264:	040000f4 	movhi	r16,3
   23268:	84360904 	addi	r16,r16,-10204
   2326c:	80c00017 	ldw	r3,0(r16)
   23270:	dc400415 	stw	r17,16(sp)
   23274:	dfc00515 	stw	ra,20(sp)
   23278:	18805217 	ldw	r2,328(r3)
   2327c:	2023883a 	mov	r17,r4
   23280:	10003726 	beq	r2,zero,23360 <__register_exitproc+0x104>
   23284:	10c00117 	ldw	r3,4(r2)
   23288:	010007c4 	movi	r4,31
   2328c:	20c00e16 	blt	r4,r3,232c8 <__register_exitproc+0x6c>
   23290:	1a000044 	addi	r8,r3,1
   23294:	8800221e 	bne	r17,zero,23320 <__register_exitproc+0xc4>
   23298:	18c00084 	addi	r3,r3,2
   2329c:	18c7883a 	add	r3,r3,r3
   232a0:	18c7883a 	add	r3,r3,r3
   232a4:	12000115 	stw	r8,4(r2)
   232a8:	10c7883a 	add	r3,r2,r3
   232ac:	19400015 	stw	r5,0(r3)
   232b0:	0005883a 	mov	r2,zero
   232b4:	dfc00517 	ldw	ra,20(sp)
   232b8:	dc400417 	ldw	r17,16(sp)
   232bc:	dc000317 	ldw	r16,12(sp)
   232c0:	dec00604 	addi	sp,sp,24
   232c4:	f800283a 	ret
   232c8:	00800074 	movhi	r2,1
   232cc:	10b79404 	addi	r2,r2,-8624
   232d0:	10002626 	beq	r2,zero,2336c <__register_exitproc+0x110>
   232d4:	01006404 	movi	r4,400
   232d8:	d9400015 	stw	r5,0(sp)
   232dc:	d9800115 	stw	r6,4(sp)
   232e0:	d9c00215 	stw	r7,8(sp)
   232e4:	000de500 	call	de50 <malloc>
   232e8:	d9400017 	ldw	r5,0(sp)
   232ec:	d9800117 	ldw	r6,4(sp)
   232f0:	d9c00217 	ldw	r7,8(sp)
   232f4:	10001d26 	beq	r2,zero,2336c <__register_exitproc+0x110>
   232f8:	81000017 	ldw	r4,0(r16)
   232fc:	10000115 	stw	zero,4(r2)
   23300:	02000044 	movi	r8,1
   23304:	22405217 	ldw	r9,328(r4)
   23308:	0007883a 	mov	r3,zero
   2330c:	12400015 	stw	r9,0(r2)
   23310:	20805215 	stw	r2,328(r4)
   23314:	10006215 	stw	zero,392(r2)
   23318:	10006315 	stw	zero,396(r2)
   2331c:	883fde26 	beq	r17,zero,23298 <__alt_data_end+0xfc023298>
   23320:	18c9883a 	add	r4,r3,r3
   23324:	2109883a 	add	r4,r4,r4
   23328:	1109883a 	add	r4,r2,r4
   2332c:	21802215 	stw	r6,136(r4)
   23330:	01800044 	movi	r6,1
   23334:	12406217 	ldw	r9,392(r2)
   23338:	30cc983a 	sll	r6,r6,r3
   2333c:	4992b03a 	or	r9,r9,r6
   23340:	12406215 	stw	r9,392(r2)
   23344:	21c04215 	stw	r7,264(r4)
   23348:	01000084 	movi	r4,2
   2334c:	893fd21e 	bne	r17,r4,23298 <__alt_data_end+0xfc023298>
   23350:	11006317 	ldw	r4,396(r2)
   23354:	218cb03a 	or	r6,r4,r6
   23358:	11806315 	stw	r6,396(r2)
   2335c:	003fce06 	br	23298 <__alt_data_end+0xfc023298>
   23360:	18805304 	addi	r2,r3,332
   23364:	18805215 	stw	r2,328(r3)
   23368:	003fc606 	br	23284 <__alt_data_end+0xfc023284>
   2336c:	00bfffc4 	movi	r2,-1
   23370:	003fd006 	br	232b4 <__alt_data_end+0xfc0232b4>

00023374 <__call_exitprocs>:
   23374:	defff504 	addi	sp,sp,-44
   23378:	df000915 	stw	fp,36(sp)
   2337c:	dd400615 	stw	r21,24(sp)
   23380:	dc800315 	stw	r18,12(sp)
   23384:	dfc00a15 	stw	ra,40(sp)
   23388:	ddc00815 	stw	r23,32(sp)
   2338c:	dd800715 	stw	r22,28(sp)
   23390:	dd000515 	stw	r20,20(sp)
   23394:	dcc00415 	stw	r19,16(sp)
   23398:	dc400215 	stw	r17,8(sp)
   2339c:	dc000115 	stw	r16,4(sp)
   233a0:	d9000015 	stw	r4,0(sp)
   233a4:	2839883a 	mov	fp,r5
   233a8:	04800044 	movi	r18,1
   233ac:	057fffc4 	movi	r21,-1
   233b0:	008000f4 	movhi	r2,3
   233b4:	10b60904 	addi	r2,r2,-10204
   233b8:	12000017 	ldw	r8,0(r2)
   233bc:	45005217 	ldw	r20,328(r8)
   233c0:	44c05204 	addi	r19,r8,328
   233c4:	a0001c26 	beq	r20,zero,23438 <__call_exitprocs+0xc4>
   233c8:	a0800117 	ldw	r2,4(r20)
   233cc:	15ffffc4 	addi	r23,r2,-1
   233d0:	b8000d16 	blt	r23,zero,23408 <__call_exitprocs+0x94>
   233d4:	14000044 	addi	r16,r2,1
   233d8:	8421883a 	add	r16,r16,r16
   233dc:	8421883a 	add	r16,r16,r16
   233e0:	84402004 	addi	r17,r16,128
   233e4:	a463883a 	add	r17,r20,r17
   233e8:	a421883a 	add	r16,r20,r16
   233ec:	e0001e26 	beq	fp,zero,23468 <__call_exitprocs+0xf4>
   233f0:	80804017 	ldw	r2,256(r16)
   233f4:	e0801c26 	beq	fp,r2,23468 <__call_exitprocs+0xf4>
   233f8:	bdffffc4 	addi	r23,r23,-1
   233fc:	843fff04 	addi	r16,r16,-4
   23400:	8c7fff04 	addi	r17,r17,-4
   23404:	bd7ff91e 	bne	r23,r21,233ec <__alt_data_end+0xfc0233ec>
   23408:	00800074 	movhi	r2,1
   2340c:	10b79904 	addi	r2,r2,-8604
   23410:	10000926 	beq	r2,zero,23438 <__call_exitprocs+0xc4>
   23414:	a0800117 	ldw	r2,4(r20)
   23418:	1000301e 	bne	r2,zero,234dc <__call_exitprocs+0x168>
   2341c:	a0800017 	ldw	r2,0(r20)
   23420:	10003226 	beq	r2,zero,234ec <__call_exitprocs+0x178>
   23424:	a009883a 	mov	r4,r20
   23428:	98800015 	stw	r2,0(r19)
   2342c:	000de640 	call	de64 <free>
   23430:	9d000017 	ldw	r20,0(r19)
   23434:	a03fe41e 	bne	r20,zero,233c8 <__alt_data_end+0xfc0233c8>
   23438:	dfc00a17 	ldw	ra,40(sp)
   2343c:	df000917 	ldw	fp,36(sp)
   23440:	ddc00817 	ldw	r23,32(sp)
   23444:	dd800717 	ldw	r22,28(sp)
   23448:	dd400617 	ldw	r21,24(sp)
   2344c:	dd000517 	ldw	r20,20(sp)
   23450:	dcc00417 	ldw	r19,16(sp)
   23454:	dc800317 	ldw	r18,12(sp)
   23458:	dc400217 	ldw	r17,8(sp)
   2345c:	dc000117 	ldw	r16,4(sp)
   23460:	dec00b04 	addi	sp,sp,44
   23464:	f800283a 	ret
   23468:	a0800117 	ldw	r2,4(r20)
   2346c:	80c00017 	ldw	r3,0(r16)
   23470:	10bfffc4 	addi	r2,r2,-1
   23474:	15c01426 	beq	r2,r23,234c8 <__call_exitprocs+0x154>
   23478:	80000015 	stw	zero,0(r16)
   2347c:	183fde26 	beq	r3,zero,233f8 <__alt_data_end+0xfc0233f8>
   23480:	95c8983a 	sll	r4,r18,r23
   23484:	a0806217 	ldw	r2,392(r20)
   23488:	a5800117 	ldw	r22,4(r20)
   2348c:	2084703a 	and	r2,r4,r2
   23490:	10000b26 	beq	r2,zero,234c0 <__call_exitprocs+0x14c>
   23494:	a0806317 	ldw	r2,396(r20)
   23498:	2088703a 	and	r4,r4,r2
   2349c:	20000c1e 	bne	r4,zero,234d0 <__call_exitprocs+0x15c>
   234a0:	89400017 	ldw	r5,0(r17)
   234a4:	d9000017 	ldw	r4,0(sp)
   234a8:	183ee83a 	callr	r3
   234ac:	a0800117 	ldw	r2,4(r20)
   234b0:	15bfbf1e 	bne	r2,r22,233b0 <__alt_data_end+0xfc0233b0>
   234b4:	98800017 	ldw	r2,0(r19)
   234b8:	153fcf26 	beq	r2,r20,233f8 <__alt_data_end+0xfc0233f8>
   234bc:	003fbc06 	br	233b0 <__alt_data_end+0xfc0233b0>
   234c0:	183ee83a 	callr	r3
   234c4:	003ff906 	br	234ac <__alt_data_end+0xfc0234ac>
   234c8:	a5c00115 	stw	r23,4(r20)
   234cc:	003feb06 	br	2347c <__alt_data_end+0xfc02347c>
   234d0:	89000017 	ldw	r4,0(r17)
   234d4:	183ee83a 	callr	r3
   234d8:	003ff406 	br	234ac <__alt_data_end+0xfc0234ac>
   234dc:	a0800017 	ldw	r2,0(r20)
   234e0:	a027883a 	mov	r19,r20
   234e4:	1029883a 	mov	r20,r2
   234e8:	003fb606 	br	233c4 <__alt_data_end+0xfc0233c4>
   234ec:	0005883a 	mov	r2,zero
   234f0:	003ffb06 	br	234e0 <__alt_data_end+0xfc0234e0>
   234f4:	01110bff 	0x1110bff
   234f8:	01010004 	movi	r4,1024
   234fc:	7f000105 	stb	fp,4(r15)
   23500:	007d0000 	call	7d000 <_gp+0x48e94>
   23504:	00000000 	call	0 <__alt_mem_sdram>
   23508:	01883a00 	call	1883a0 <_gp+0x154234>
   2350c:	010d0bff 	0x10d0bff
   23510:	01010002 	0x1010002
	...
   2351c:	010d0bff 	0x10d0bff
   23520:	01010004 	movi	r4,1024
   23524:	00000100 	call	10 <__alt_mem_sdram+0x10>
   23528:	00000000 	call	0 <__alt_mem_sdram>
   2352c:	0000a314 	movui	zero,652
   23530:	0000cae8 	cmpgeui	zero,zero,811
