
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002aa4c memsz 0x0002aa4c flags r-x
    LOAD off    0x0002ba6c vaddr 0x0002aa6c paddr 0x0002dc58 align 2**12
         filesz 0x000031ec memsz 0x000031ec flags rw-
    LOAD off    0x0002ee44 vaddr 0x00030e44 paddr 0x00030e44 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000236e0  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000715c  00023910  00023910  00024910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031ec  0002aa6c  0002dc58  0002ba6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  00030e44  00030e44  0002ee44  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000310f0  000310f0  0002ec58  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002ec58  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001a98  00000000  00000000  0002ec80  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0005345f  00000000  00000000  00030718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010dad  00000000  00000000  00083b77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000156cb  00000000  00000000  00094924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005a2c  00000000  00000000  000a9ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ff3d  00000000  00000000  000afa1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000243a9  00000000  00000000  000bf959  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e3d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002c10  00000000  00000000  000e3d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000ff41a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000ff41d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000ff422  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000ff423  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000ff424  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000ff428  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000ff42c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000ff430  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000ff43b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000ff446  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  000ff451  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  000ff465  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  000ff490  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fb7b  00000000  00000000  00104917  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00023910 l    d  .rodata	00000000 .rodata
0002aa6c l    d  .rwdata	00000000 .rwdata
00030e44 l    d  .bss	00000000 .bss
000310f0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002c550 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c551 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c552 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c553 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002c554 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c555 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c556 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c557 l     O .rwdata	00000001 _ZL9SPI_MODE3
00030e44 l     O .bss	00000001 _ZL9usb_error
00030e45 l     O .bss	00000001 _ZL14usb_task_state
00030e48 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002c560 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c561 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c562 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c563 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c564 l     O .rwdata	00000006 _ZL9XBOX_LEDS
00023ada l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003900 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
0002c584 l     O .rwdata	00000004 _ZL4keys
0002c588 l     O .rwdata	00000004 _ZL4adsr
00000000 l    df *ABS*	00000000 hidboot.cpp
0002c58c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c58d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c58e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c58f l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c590 l     O .rwdata	00000002 _ZL9pstrSpace
0002c594 l     O .rwdata	00000003 _ZL8pstrCRLF
0002c598 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002c59c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002c5a0 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002c5a4 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00023d5c l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00023d70 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00023d7c l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00023d88 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00023d94 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00023da0 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00023db0 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002c5ac l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002c5b4 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002c5bc l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002c5c4 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00023dbc l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00023dc8 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002c5c8 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002c5cc l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00023dd4 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00023de4 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002c5d4 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002c5dc l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00023df4 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002c5e4 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00023e04 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002c5ec l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00023e1c l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002c5f0 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00023e28 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00023e34 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002c5f8 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002c600 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00023e40 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00023e4c l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002c608 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002c610 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00023e58 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00023e68 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002c618 l     O .rwdata	00000002 _ZL10pstrUsageX
0002c61c l     O .rwdata	00000002 _ZL10pstrUsageY
0002c620 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002c624 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002c628 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002c62c l     O .rwdata	00000003 _ZL11pstrUsageRz
0002c630 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002c638 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002c640 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00023e7c l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00023e88 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00023e94 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00023ea0 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002c648 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002c650 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002c654 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002c658 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002c65c l     O .rwdata	00000003 _ZL11pstrUsageVz
0002c660 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002c668 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002c670 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002c678 l     O .rwdata	00000004 _ZL12pstrUsageVno
00023eb0 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00023ec0 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00023ecc l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00023ed8 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00023ee8 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00023ef4 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00023f00 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00023f14 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00023f24 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00023f34 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00023f44 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00023f54 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00023f64 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00023f74 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00023f84 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00023f90 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00023fa0 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00023fb4 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00023fc8 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00023fd4 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00023fe0 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00023fec l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00023ff8 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00024004 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00024010 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
0002401c l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00024028 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00024034 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00024040 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0002404c l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
0002405c l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00024068 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00024078 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00024088 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00024098 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000240a8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000240b8 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000240d0 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000240e8 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00024100 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00024110 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00024120 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00024130 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00024140 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00024150 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00024160 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00024170 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00024180 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00024190 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000241a0 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000241b8 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000241c8 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000241dc l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000241ec l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000241f8 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00024204 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00024210 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002c67c l     O .rwdata	00000008 _ZL16pstrUsageAileron
0002421c l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
0002422c l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00024240 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00024254 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00024264 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00024274 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00024280 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00024294 l     O .rodata	00000009 _ZL17pstrUsageElevator
000242a0 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002c684 l     O .rwdata	00000007 _ZL15pstrUsageRudder
000242b0 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000242bc l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000242c8 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000242d8 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000242e8 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002c68c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000242f4 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00024300 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0002430c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002c694 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002c69c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002c6a4 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002c6ac l     O .rwdata	00000008 _ZL16pstrUsageShifter
00024318 l     O .rodata	00000009 _ZL17pstrUsageSteering
00024324 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00024330 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0002433c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002c6b4 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00024348 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00024358 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00024364 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00024370 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002c6bc l     O .rwdata	00000005 _ZL13pstrUsageBelt
0002437c l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002c6c4 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002c6cc l     O .rwdata	00000006 _ZL14pstrUsageGlove
00024388 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00024394 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000243a0 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000243ac l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002c6d4 l     O .rwdata	00000005 _ZL13pstrUsageVest
000243b8 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000243c4 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000243d0 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000243e0 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000243f0 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000243fc l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00024408 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002c6dc l     O .rwdata	00000004 _ZL12pstrUsageOar
0002c6e0 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002c6e8 l     O .rwdata	00000005 _ZL13pstrUsageRate
00024414 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00024420 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00024430 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00024440 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00024450 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
0002445c l     O .rodata	0000000b _ZL18pstrUsageStickType
00024468 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002c6f0 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002c6f8 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002c700 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002c708 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002c710 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002c718 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002c720 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002c728 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002c730 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002c738 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002c740 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002c748 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00024474 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00024480 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
0002448c l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002c750 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002c758 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002c760 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002c768 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002c770 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00024498 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000244a8 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002c778 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002c780 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000244b4 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000244c4 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000244d4 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000244e4 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000244f4 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00024504 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00024514 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00024524 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00024534 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002c784 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00024544 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002c78c l     O .rwdata	00000005 _ZL13pstrUsageBump
00024554 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00024560 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002c794 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
0002456c l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00024578 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002c79c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00024584 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00024594 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
000245a0 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000245ac l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000245b8 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000245cc l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000245dc l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000245ec l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000245f8 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00024604 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
0002461c l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00024630 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00024648 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
0002465c l     O .rodata	00000009 _ZL16pstrUsageNumLock
00024668 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00024674 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002c7a4 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002c7ac l     O .rwdata	00000005 _ZL13pstrUsageKana
0002c7b4 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002c7b8 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002c7c0 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002c7c4 l     O .rwdata	00000005 _ZL13pstrUsageMute
00024680 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
0002468c l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
0002469c l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002c7cc l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
000246ac l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
000246bc l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002c7d4 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002c7dc l     O .rwdata	00000007 _ZL15pstrUsageStereo
000246c8 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
000246dc l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002c7e4 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002c7e8 l     O .rwdata	00000004 _ZL12pstrUsageCLV
000246e8 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
000246fc l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002c7ec l     O .rwdata	00000005 _ZL13pstrUsageRing
00024708 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00024714 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002c7f4 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002c7fc l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002c804 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002c80c l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00024720 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002c814 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002c81c l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
0002472c l     O .rodata	00000009 _ZL17pstrUsageCoverage
00024738 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00024744 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00024750 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002c820 l     O .rwdata	00000005 _ZL19pstrUsageConference
0002475c l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002c828 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002c830 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002c838 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00024768 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002c840 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002c848 l     O .rwdata	00000006 _ZL14pstrUsageReady
00024774 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00024780 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002c850 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002c858 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002c85c l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002c860 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002c868 l     O .rwdata	00000007 _ZL15pstrUsageRewind
0002478c l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002c870 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002c878 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002c880 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002c884 l     O .rwdata	00000006 _ZL14pstrUsageError
00024798 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
000247a8 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
000247bc l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002c88c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000247d4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
000247e0 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
000247f0 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002c894 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00024800 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00024810 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00024824 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00024838 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
0002484c l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00024860 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002c89c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00024870 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
0002487c l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002c8a4 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00024888 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00024894 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002c8ac l     O .rwdata	00000006 _ZL14pstrUsagePhone
000248a4 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
000248b0 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002c8b4 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002c8bc l     O .rwdata	00000008 _ZL16pstrUsageHeadset
000248bc l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
000248c8 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002c8c4 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002c8cc l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002c8d4 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002c8dc l     O .rwdata	00000007 _ZL15pstrUsageRedial
000248d4 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002c8e4 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002c8ec l     O .rwdata	00000005 _ZL13pstrUsagePark
000248e0 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
000248ec l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002c8f4 l     O .rwdata	00000005 _ZL13pstrUsageLine
000248f8 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00024904 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00024910 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
0002491c l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00024928 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002c8fc l     O .rwdata	00000005 _ZL13pstrUsageSend
00024934 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00024940 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
0002494c l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00024958 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00024964 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00024970 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002c904 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00024980 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00024990 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
000249a4 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
000249b8 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
000249cc l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
000249e0 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
000249f0 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00024a00 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00024a14 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00024a24 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00024a34 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00024a44 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00024a50 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00024a5c l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00024a68 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002c908 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002c910 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002c914 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002c918 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002c91c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002c920 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002c924 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002c928 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002c92c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002c930 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002c934 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002c938 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002c93c l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002c940 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002c944 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002c948 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002c94c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00024a7c l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00024a8c l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00024a98 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00024aa4 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002c950 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002c954 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002c95c l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002c964 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002c96c l     O .rwdata	00000006 _ZL14pstrUsageSleep
00024ab0 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00024abc l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002c974 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00024ac8 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002c97c l     O .rwdata	00000005 _ZL13pstrUsageMenu
00024ad4 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002c984 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00024ae0 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00024aec l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00024af8 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00024b04 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00024b10 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00024b20 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00024b30 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00024b3c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00024b48 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002c98c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00024b58 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00024b68 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002c994 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002c99c l     O .rwdata	00000004 _ZL18pstrUsageSelection
00024b74 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00024b80 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00024b8c l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00024b98 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00024ba8 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002c9a0 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002c9a8 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00024bb4 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00024bc4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00024bd0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00024bdc l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00024be8 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00024bf4 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00024c00 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00024c0c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00024c1c l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00024c28 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00024c34 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00024c40 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002c9b0 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002c9b8 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00024c50 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00024c60 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00024c6c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00024c78 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00024c88 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00024c98 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002c9c0 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002c9c8 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00024ca8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002c9d0 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002c9d8 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002c9e0 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002c9e8 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002c9f0 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00024cb4 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00024cc0 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002c9f8 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002ca00 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00024ccc l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00024cd8 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00024ce4 l     O .rodata	00000009 _ZL17pstrUsageTracking
00024cf0 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00024cfc l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002ca08 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00024d08 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002ca10 l     O .rwdata	00000005 _ZL13pstrUsageMark
00024d14 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00024d20 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00024d2c l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00024d38 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00024d48 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00024d5c l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00024d6c l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00024d7c l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00024d88 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00024d94 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00024da0 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00024dac l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002ca18 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002ca1c l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002ca24 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002ca2c l     O .rwdata	00000007 _ZL15pstrUsageTreble
00024db8 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00024dc4 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002ca34 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002ca3c l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002ca40 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002ca48 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002ca50 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00024dd0 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00024ddc l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00024de8 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00024df4 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002ca58 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00024e00 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00024e0c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00024e18 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00024e24 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00024e34 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00024e44 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00024e50 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00024e5c l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00024e68 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002ca60 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002ca68 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00024e74 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00024e80 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002ca70 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00024e8c l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00024e9c l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00024eac l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00024eb8 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00024ec4 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00024ed0 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002ca78 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002ca80 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00024edc l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00024ee8 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00024ef4 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00024f00 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002ca88 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00024f10 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00024f1c l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002ca90 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002ca98 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002caa0 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00024f2c l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00024f38 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00024f44 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00024f50 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00024f5c l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00024f6c l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00024f80 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00024f8c l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00024fa0 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00024fb0 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00024fbc l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00024fcc l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00024fdc l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00024fec l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00024ff8 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00025008 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00025014 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00025024 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00025034 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00025044 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00025054 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00025068 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002caa8 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00025078 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0002508c l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
000250a0 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000250b0 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000250c0 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000250d0 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000250dc l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000250e8 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000250f4 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00025100 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0002510c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0002511c l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00025134 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00025140 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0002514c l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00025158 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00025164 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00025170 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002517c l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00025190 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002cab0 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0002519c l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002cab8 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
000251a8 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000251b4 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000251c4 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000251d0 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000251e0 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000251f0 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00025200 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0002520c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00025218 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00025224 l     O .rodata	00000009 _ZL16pstrUsageALClock
00025230 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00025240 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0002524c l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00025258 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00025264 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00025270 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00025284 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00025294 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
000252a0 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000252b4 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000252c0 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000252d0 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000252e4 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000252f8 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0002530c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0002531c l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00025334 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00025348 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00025358 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00025368 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002cac0 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002cac8 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002537c l     O .rodata	00000009 _ZL16pstrUsageACClose
0002cad0 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002cad8 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002cae0 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002cae8 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00025388 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002caf0 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002caf8 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002cb00 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002cb08 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00025394 l     O .rodata	00000009 _ZL16pstrUsageACPaste
000253a0 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002cb10 l     O .rwdata	00000008 _ZL15pstrUsageACFind
000253ac l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000253bc l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002cb18 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002cb20 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002cb28 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002cb30 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002cb38 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000253c8 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000253d4 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000253e4 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000253f4 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002cb40 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00025400 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002540c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00025418 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002cb48 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00025424 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00025430 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00025440 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0002544c l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0002545c l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0002546c l     O .rodata	0000000a _ZL17pstrUsageACScroll
00025478 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00025484 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002cb50 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00025494 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
000254a0 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000254b0 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002cb58 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002cb60 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002cb68 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002cb70 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000254c0 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000254cc l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002cb78 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000254d8 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000254e4 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000254f0 l     O .rodata	0000000a _ZL17pstrUsageACRotate
000254fc l     O .rodata	0000000a _ZL17pstrUsageACResize
00025508 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00025514 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00025520 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0002552c l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00025538 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00025544 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00025550 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0002555c l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0002556c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0002557c l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0002558c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0002559c l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
000255a8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000255b8 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000255c4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000255d4 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000255e4 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000255f4 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00025600 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002560c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00025618 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00025624 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002cb80 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002cb88 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00025630 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002cb90 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002cb98 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002563c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002cba0 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00025648 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00025658 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00025664 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00025674 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00025684 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00025694 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002cba8 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002cbb0 l     O .rwdata	00000008 _ZL15pstrUsageACLock
000256a0 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002cbb8 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
000256ac l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
000256b8 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000256c8 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000256d4 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
000256e4 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
000256f0 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
000256fc l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00025708 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00025714 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00025720 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0002572c l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002cbc0 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002cbc8 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00025738 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00025744 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002cbd0 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00025754 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00025760 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0002576c l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0002577c l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0002578c l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00025798 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
000257a4 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
000257b0 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002cbd8 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
000257bc l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000257c8 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000257d4 l     O .rodata	00000009 _ZL16pstrUsageACReply
000257e0 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
000257f0 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002cbe0 l     O .rwdata	00000007 _ZL15pstrUsageACSend
000257fc l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002cbe8 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002cbf0 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00025808 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00025814 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00025820 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0002582c l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00025838 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00025844 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00025850 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0002585c l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00025868 l     O .rodata	0000000a _ZL17pstrUsageACRename
00025874 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00025880 l     O .rodata	00000009 _ZL16pstrUsageACSplit
0002588c l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00025898 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
000258a4 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002cbf8 l     O .rwdata	00000004 _ZL12pstrUsagePen
000258b0 l     O .rodata	0000000a _ZL17pstrUsageLightPen
000258bc l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
000258c8 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
000258d4 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
000258e0 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002cbfc l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
000258f0 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002cc04 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
000258fc l     O .rodata	00000009 _ZL17pstrUsageArmature
00025908 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0002591c l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002cc0c l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002cc14 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002cc1c l     O .rwdata	00000007 _ZL15pstrUsageFinger
0002592c l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00025938 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00025944 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002cc24 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002cc2c l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002cc34 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002cc38 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00025950 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0002595c l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0002596c l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002597c l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002cc40 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002cc48 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002cc50 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002cc58 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002598c l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002cc60 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002cc68 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00025998 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002cc70 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002cc78 l     O .rwdata	00000007 _ZL15pstrUsageEraser
000259a4 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
000259b0 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
000259c0 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
000259cc l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
000259dc l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
000259e8 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
000259f8 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00025a04 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00025a14 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00025a20 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00025a30 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00025a40 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00025a4c l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00025a58 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00025a64 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00025a70 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00025a7c l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00025a88 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00025a94 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00025aa4 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00025ab4 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002cc80 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002cc84 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002cc88 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002cc90 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00025ac0 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00025acc l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00025ad8 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00025ae4 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002cc98 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00025af0 l     O .rodata	00000009 _ZL17pstrUsageFontData
00025afc l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00025b08 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00025b14 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00025b24 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00025b34 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00025b44 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00025b50 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00025b5c l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00025b68 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00025b74 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00025b80 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00025b8c l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00025b98 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00025ba4 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00025bb0 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00025bc0 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00025bd0 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00025be0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00025bec l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00025bf8 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00025c08 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002cca0 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00025c14 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00025c24 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00025c34 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00025c40 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00025c4c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00025c5c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00025c6c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00025c7c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00025c8c l     O .rodata	0000000a _ZL17pstrUsageBlitData
00025c98 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00025ca4 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00025cb0 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00025cc0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00025cd0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00025ce0 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00025cf0 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002cca8 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002ccb0 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00025d00 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002ccb8 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002ccc0 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002ccc8 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002ccd0 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00025d0c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002ccd8 l     O .rwdata	00000005 _ZL13pstrUsageCine
00025d18 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002cce0 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002cce8 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00025d24 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00025d34 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00025d44 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00025d54 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00025d60 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00025d6c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00025d80 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00025d94 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00025da8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00025dbc l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00025dcc l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00025ddc l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00025de8 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00025df4 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00025e04 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002ccfc l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ccfd l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ccfe l     O .rwdata	00000001 _ZL9SPI_MODE2
0002ccff l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002cd04 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002cd05 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002cd06 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cd07 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002cd08 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002cd09 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002cd0a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cd0b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002605e l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002606e l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008a84 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002cd14 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002cd15 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002cd16 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cd17 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002cd18 l     O .rwdata	00000002 _ZL9pstrSpace
0002cd1c l     O .rwdata	00000003 _ZL8pstrCRLF
0002cd20 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002cd24 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002cd28 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002cd2c l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00026138 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
0002614c l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00026158 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00026164 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00026170 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0002617c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0002618c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002cd34 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002cd3c l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002cd44 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002cd4c l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00026198 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
000261a4 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002cd50 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002cd54 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000261b0 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000261c0 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002cd5c l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002cd64 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000261d0 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002cd6c l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000261e0 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002cd74 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
000261f8 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002cd78 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00026204 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00026210 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002cd80 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002cd88 l     O .rwdata	00000006 _ZL14pstrUsageMouse
0002621c l     O .rodata	00000009 _ZL17pstrUsageJoystick
00026228 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002cd90 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002cd98 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00026234 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00026244 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002cda0 l     O .rwdata	00000002 _ZL10pstrUsageX
0002cda4 l     O .rwdata	00000002 _ZL10pstrUsageY
0002cda8 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002cdac l     O .rwdata	00000003 _ZL11pstrUsageRx
0002cdb0 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002cdb4 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002cdb8 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002cdc0 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002cdc8 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00026258 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00026264 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00026270 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0002627c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002cdd0 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002cdd8 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002cddc l     O .rwdata	00000003 _ZL11pstrUsageVx
0002cde0 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002cde4 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002cde8 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002cdf0 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002cdf8 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002ce00 l     O .rwdata	00000004 _ZL12pstrUsageVno
0002628c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0002629c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
000262a8 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000262b4 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000262c4 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000262d0 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000262dc l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
000262f0 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00026300 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00026310 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00026320 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00026330 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00026340 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00026350 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00026360 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
0002636c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0002637c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00026390 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000263a4 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000263b0 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000263bc l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000263c8 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000263d4 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000263e0 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
000263ec l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
000263f8 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00026404 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00026410 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
0002641c l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00026428 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00026438 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00026444 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00026454 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00026464 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00026474 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00026484 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00026494 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000264ac l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000264c4 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000264dc l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000264ec l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000264fc l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
0002650c l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
0002651c l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
0002652c l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
0002653c l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
0002654c l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
0002655c l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
0002656c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
0002657c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00026594 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000265a4 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000265b8 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000265c8 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000265d4 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000265e0 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000265ec l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002ce04 l     O .rwdata	00000008 _ZL16pstrUsageAileron
000265f8 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00026608 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
0002661c l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00026630 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00026640 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00026650 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
0002665c l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00026670 l     O .rodata	00000009 _ZL17pstrUsageElevator
0002667c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002ce0c l     O .rwdata	00000007 _ZL15pstrUsageRudder
0002668c l     O .rodata	00000009 _ZL17pstrUsageThrottle
00026698 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000266a4 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000266b4 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000266c4 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002ce14 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000266d0 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000266dc l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
000266e8 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002ce1c l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002ce24 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002ce2c l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002ce34 l     O .rwdata	00000008 _ZL16pstrUsageShifter
000266f4 l     O .rodata	00000009 _ZL17pstrUsageSteering
00026700 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
0002670c l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00026718 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002ce3c l     O .rwdata	00000008 _ZL16pstrUsageBallast
00026724 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00026734 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00026740 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
0002674c l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002ce44 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00026758 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002ce4c l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002ce54 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00026764 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00026770 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
0002677c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00026788 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002ce5c l     O .rwdata	00000005 _ZL13pstrUsageVest
00026794 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000267a0 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000267ac l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000267bc l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000267cc l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000267d8 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000267e4 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002ce64 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002ce68 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002ce70 l     O .rwdata	00000005 _ZL13pstrUsageRate
000267f0 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000267fc l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
0002680c l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
0002681c l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
0002682c l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00026838 l     O .rodata	0000000b _ZL18pstrUsageStickType
00026844 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002ce78 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002ce80 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002ce88 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002ce90 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002ce98 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002cea0 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002cea8 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002ceb0 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002ceb8 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002cec0 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002cec8 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002ced0 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00026850 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
0002685c l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00026868 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002ced8 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002cee0 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002cee8 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002cef0 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002cef8 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00026874 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00026884 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002cf00 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002cf08 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00026890 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000268a0 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000268b0 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000268c0 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000268d0 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
000268e0 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
000268f0 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00026900 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00026910 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002cf0c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00026920 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002cf14 l     O .rwdata	00000005 _ZL13pstrUsageBump
00026930 l     O .rodata	00000009 _ZL16pstrUsageNewGame
0002693c l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002cf1c l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00026948 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00026954 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002cf24 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00026960 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00026970 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
0002697c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00026988 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00026994 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000269a8 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000269b8 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000269c8 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000269d4 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
000269e0 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
000269f8 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00026a0c l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00026a24 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00026a38 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00026a44 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00026a50 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002cf2c l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002cf34 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002cf3c l     O .rwdata	00000004 _ZL14pstrUsagePower
0002cf40 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002cf48 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002cf4c l     O .rwdata	00000005 _ZL13pstrUsageMute
00026a5c l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00026a68 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00026a78 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002cf54 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00026a88 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00026a98 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002cf5c l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002cf64 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00026aa4 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00026ab8 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002cf6c l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002cf70 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00026ac4 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00026ad8 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002cf74 l     O .rwdata	00000005 _ZL13pstrUsageRing
00026ae4 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00026af0 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002cf7c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002cf84 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002cf8c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002cf94 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00026afc l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002cf9c l     O .rwdata	00000005 _ZL13pstrUsageHold
0002cfa4 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00026b08 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00026b14 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00026b20 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00026b2c l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002cfa8 l     O .rwdata	00000005 _ZL19pstrUsageConference
00026b38 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002cfb0 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002cfb8 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002cfc0 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00026b44 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002cfc8 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002cfd0 l     O .rwdata	00000006 _ZL14pstrUsageReady
00026b50 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00026b5c l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002cfd8 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002cfe0 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002cfe4 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002cfe8 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002cff0 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00026b68 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002cff8 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d000 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d008 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d00c l     O .rwdata	00000006 _ZL14pstrUsageError
00026b74 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00026b84 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00026b98 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d014 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00026bb0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00026bbc l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00026bcc l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d01c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00026bdc l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00026bec l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00026c00 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00026c14 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00026c28 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00026c3c l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d024 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00026c4c l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00026c58 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d02c l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00026c64 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00026c70 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d034 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00026c80 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00026c8c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d03c l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d044 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00026c98 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00026ca4 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d04c l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d054 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d05c l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d064 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00026cb0 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d06c l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d074 l     O .rwdata	00000005 _ZL13pstrUsagePark
00026cbc l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00026cc8 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d07c l     O .rwdata	00000005 _ZL13pstrUsageLine
00026cd4 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00026ce0 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00026cec l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00026cf8 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00026d04 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d084 l     O .rwdata	00000005 _ZL13pstrUsageSend
00026d10 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00026d1c l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00026d28 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00026d34 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00026d40 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00026d4c l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d08c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00026d5c l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00026d6c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00026d80 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00026d94 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00026da8 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00026dbc l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00026dcc l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00026ddc l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00026df0 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00026e00 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00026e10 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00026e20 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00026e2c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00026e38 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00026e44 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d090 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d098 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d09c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d0a0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d0a4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d0a8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d0ac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d0b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d0b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d0b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002d0bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002d0c0 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002d0c4 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002d0c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002d0cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002d0d0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002d0d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00026e58 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00026e68 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00026e74 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00026e80 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002d0d8 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002d0dc l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002d0e4 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002d0ec l     O .rwdata	00000006 _ZL14pstrUsageReset
0002d0f4 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00026e8c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00026e98 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002d0fc l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00026ea4 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002d104 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00026eb0 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002d10c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00026ebc l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00026ec8 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00026ed4 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00026ee0 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00026eec l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00026efc l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00026f0c l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00026f18 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00026f24 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002d114 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00026f34 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00026f44 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002d11c l     O .rwdata	00000006 _ZL14pstrUsageStill
0002d124 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00026f50 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00026f5c l     O .rodata	0000000a _ZL17pstrUsageModeStep
00026f68 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00026f74 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00026f84 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002d128 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002d130 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00026f90 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00026fa0 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00026fac l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00026fb8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00026fc4 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00026fd0 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00026fdc l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00026fe8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00026ff8 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00027004 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00027010 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0002701c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002d138 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002d140 l     O .rwdata	00000005 _ZL13pstrUsageHelp
0002702c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0002703c l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00027048 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00027054 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00027064 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00027074 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002d148 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002d150 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00027084 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002d158 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002d160 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002d168 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002d170 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002d178 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00027090 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0002709c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002d180 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002d188 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
000270a8 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000270b4 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000270c0 l     O .rodata	00000009 _ZL17pstrUsageTracking
000270cc l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
000270d8 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002d190 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
000270e4 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002d198 l     O .rwdata	00000005 _ZL13pstrUsageMark
000270f0 l     O .rodata	00000009 _ZL18pstrUsageClearMark
000270fc l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00027108 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00027114 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00027124 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00027138 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00027148 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00027158 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00027164 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00027170 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002717c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00027188 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002d1a0 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002d1a4 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002d1ac l     O .rwdata	00000005 _ZL13pstrUsageBass
0002d1b4 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00027194 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
000271a0 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002d1bc l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002d1c4 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002d1c8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002d1d0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002d1d8 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000271ac l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000271b8 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000271c4 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000271d0 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002d1e0 l     O .rwdata	00000005 _ZL13pstrUsageSlow
000271dc l     O .rodata	00000009 _ZL18pstrUsageFanEnable
000271e8 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
000271f4 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00027200 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00027210 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00027220 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0002722c l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00027238 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00027244 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002d1e8 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002d1f0 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00027250 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0002725c l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002d1f8 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00027268 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00027278 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00027288 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00027294 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
000272a0 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000272ac l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002d200 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002d208 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000272b8 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000272c4 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000272d0 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000272dc l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002d210 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
000272ec l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
000272f8 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002d218 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002d220 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002d228 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00027308 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00027314 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00027320 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0002732c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00027338 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00027348 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0002735c l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00027368 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0002737c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0002738c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00027398 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000273a8 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000273b8 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000273c8 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000273d4 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000273e4 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
000273f0 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00027400 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00027410 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00027420 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00027430 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00027444 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002d230 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00027454 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00027468 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0002747c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0002748c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0002749c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000274ac l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000274b8 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000274c4 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000274d0 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000274dc l     O .rodata	0000000a _ZL17pstrUsageALLogoff
000274e8 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000274f8 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00027510 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0002751c l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00027528 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00027534 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00027540 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0002754c l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00027558 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0002756c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002d238 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00027578 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002d240 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00027584 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00027590 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000275a0 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000275ac l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000275bc l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000275cc l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000275dc l     O .rodata	0000000b _ZL21pstrUsageALEncryption
000275e8 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000275f4 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00027600 l     O .rodata	00000009 _ZL16pstrUsageALClock
0002760c l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0002761c l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00027628 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00027634 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00027640 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0002764c l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00027660 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00027670 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0002767c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00027690 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0002769c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000276ac l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000276c0 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000276d4 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
000276e8 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000276f8 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00027710 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00027724 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00027734 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00027744 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002d248 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002d250 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00027758 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002d258 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002d260 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002d268 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002d270 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00027764 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002d278 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002d280 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002d288 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002d290 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00027770 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0002777c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002d298 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00027788 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00027798 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002d2a0 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002d2a8 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002d2b0 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002d2b8 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002d2c0 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000277a4 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000277b0 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000277c0 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000277d0 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002d2c8 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000277dc l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
000277e8 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000277f4 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002d2d0 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00027800 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0002780c l     O .rodata	0000000d _ZL21pstrUsageACNormalView
0002781c l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00027828 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00027838 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00027848 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00027854 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00027860 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002d2d8 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00027870 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0002787c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0002788c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002d2e0 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002d2e8 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002d2f0 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002d2f8 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0002789c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000278a8 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002d300 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000278b4 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000278c0 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000278cc l     O .rodata	0000000a _ZL17pstrUsageACRotate
000278d8 l     O .rodata	0000000a _ZL17pstrUsageACResize
000278e4 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
000278f0 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
000278fc l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00027908 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00027914 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00027920 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
0002792c l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00027938 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00027948 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00027958 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00027968 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00027978 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00027984 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00027994 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000279a0 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000279b0 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000279c0 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000279d0 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
000279dc l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
000279e8 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
000279f4 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00027a00 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002d308 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002d310 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00027a0c l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002d318 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002d320 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00027a18 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002d328 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00027a24 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00027a34 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00027a40 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00027a50 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00027a60 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00027a70 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002d330 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002d338 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00027a7c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002d340 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00027a88 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00027a94 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00027aa4 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00027ab0 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00027ac0 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00027acc l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00027ad8 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00027ae4 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00027af0 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00027afc l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00027b08 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002d348 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002d350 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00027b14 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00027b20 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002d358 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00027b30 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00027b3c l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00027b48 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00027b58 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00027b68 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00027b74 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00027b80 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00027b8c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002d360 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00027b98 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00027ba4 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00027bb0 l     O .rodata	00000009 _ZL16pstrUsageACReply
00027bbc l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00027bcc l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002d368 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00027bd8 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002d370 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002d378 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00027be4 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00027bf0 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00027bfc l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00027c08 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00027c14 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00027c20 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00027c2c l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00027c38 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00027c44 l     O .rodata	0000000a _ZL17pstrUsageACRename
00027c50 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00027c5c l     O .rodata	00000009 _ZL16pstrUsageACSplit
00027c68 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00027c74 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00027c80 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002d380 l     O .rwdata	00000004 _ZL12pstrUsagePen
00027c8c l     O .rodata	0000000a _ZL17pstrUsageLightPen
00027c98 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00027ca4 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00027cb0 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00027cbc l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002d384 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00027ccc l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002d38c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00027cd8 l     O .rodata	00000009 _ZL17pstrUsageArmature
00027ce4 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00027cf8 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002d394 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002d39c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002d3a4 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00027d08 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00027d14 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00027d20 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002d3ac l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002d3b4 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002d3bc l     O .rwdata	00000004 _ZL12pstrUsageTap
0002d3c0 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00027d2c l     O .rodata	0000000b _ZL18pstrUsageDataValid
00027d38 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00027d48 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00027d58 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002d3c8 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002d3d0 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002d3d8 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002d3e0 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00027d68 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002d3e8 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002d3f0 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00027d74 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002d3f8 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002d400 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00027d80 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00027d8c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00027d9c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00027da8 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00027db8 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00027dc4 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00027dd4 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00027de0 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00027df0 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00027dfc l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00027e0c l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00027e1c l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00027e28 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00027e34 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00027e40 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00027e4c l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00027e58 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00027e64 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00027e70 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00027e80 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00027e90 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002d408 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002d40c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002d410 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002d418 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00027e9c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00027ea8 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00027eb4 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00027ec0 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002d420 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00027ecc l     O .rodata	00000009 _ZL17pstrUsageFontData
00027ed8 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00027ee4 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00027ef0 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00027f00 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00027f10 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00027f20 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00027f2c l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00027f38 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00027f44 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00027f50 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00027f5c l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00027f68 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00027f74 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00027f80 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00027f8c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00027f9c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00027fac l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00027fbc l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00027fc8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00027fd4 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00027fe4 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002d428 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00027ff0 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00028000 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00028010 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002801c l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00028028 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00028038 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00028048 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00028058 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00028068 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00028074 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00028080 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002808c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002809c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
000280ac l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
000280bc l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
000280cc l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002d430 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002d438 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
000280dc l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002d440 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002d448 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002d450 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002d458 l     O .rwdata	00000006 _ZL14pstrUsagePrint
000280e8 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002d460 l     O .rwdata	00000005 _ZL13pstrUsageCine
000280f4 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002d468 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002d470 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00028100 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00028110 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00028120 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00028130 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002813c l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00028148 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002815c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00028170 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00028184 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00028198 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
000281a8 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000281b8 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000281c4 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000281d0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000281e0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002d476 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d477 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d478 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d479 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002d47c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d47d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d47e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d47f l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d480 l     O .rwdata	00000002 _ZL9pstrSpace
0002d484 l     O .rwdata	00000003 _ZL8pstrCRLF
0002d488 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d48c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d490 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d494 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
000282c0 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
000282d4 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000282e0 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000282ec l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000282f8 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00028304 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00028314 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d49c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d4a4 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d4ac l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d4b4 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00028320 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
0002832c l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d4b8 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d4bc l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00028338 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00028348 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d4c4 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d4cc l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00028358 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d4d4 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00028368 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d4dc l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00028380 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d4e0 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0002838c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00028398 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002d4e8 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002d4f0 l     O .rwdata	00000006 _ZL14pstrUsageMouse
000283a4 l     O .rodata	00000009 _ZL17pstrUsageJoystick
000283b0 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002d4f8 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002d500 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
000283bc l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000283cc l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002d508 l     O .rwdata	00000002 _ZL10pstrUsageX
0002d50c l     O .rwdata	00000002 _ZL10pstrUsageY
0002d510 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002d514 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002d518 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002d51c l     O .rwdata	00000003 _ZL11pstrUsageRz
0002d520 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002d528 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002d530 l     O .rwdata	00000006 _ZL14pstrUsageWheel
000283e0 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000283ec l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000283f8 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00028404 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002d538 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002d540 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002d544 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002d548 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002d54c l     O .rwdata	00000003 _ZL11pstrUsageVz
0002d550 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002d558 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d560 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d568 l     O .rwdata	00000004 _ZL12pstrUsageVno
00028414 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00028424 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00028430 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
0002843c l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
0002844c l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00028458 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00028464 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00028478 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00028488 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00028498 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
000284a8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000284b8 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000284c8 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000284d8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000284e8 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000284f4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00028504 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00028518 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
0002852c l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00028538 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00028544 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00028550 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
0002855c l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00028568 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00028574 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00028580 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0002858c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00028598 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
000285a4 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
000285b0 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
000285c0 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000285cc l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000285dc l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000285ec l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000285fc l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
0002860c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
0002861c l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00028634 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
0002864c l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00028664 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00028674 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00028684 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00028694 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
000286a4 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000286b4 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000286c4 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000286d4 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000286e4 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000286f4 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00028704 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
0002871c l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
0002872c l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00028740 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00028750 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
0002875c l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00028768 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00028774 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d56c l     O .rwdata	00000008 _ZL16pstrUsageAileron
00028780 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00028790 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
000287a4 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
000287b8 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000287c8 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
000287d8 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000287e4 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000287f8 l     O .rodata	00000009 _ZL17pstrUsageElevator
00028804 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d574 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00028814 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00028820 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
0002882c l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
0002883c l     O .rodata	0000000d _ZL20pstrUsageLandingGear
0002884c l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d57c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00028858 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00028864 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00028870 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d584 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d58c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d594 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d59c l     O .rwdata	00000008 _ZL16pstrUsageShifter
0002887c l     O .rodata	00000009 _ZL17pstrUsageSteering
00028888 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00028894 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
000288a0 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d5a4 l     O .rwdata	00000008 _ZL16pstrUsageBallast
000288ac l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
000288bc l     O .rodata	0000000c _ZL19pstrUsageHandleBars
000288c8 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
000288d4 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d5ac l     O .rwdata	00000005 _ZL13pstrUsageBelt
000288e0 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d5b4 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d5bc l     O .rwdata	00000006 _ZL14pstrUsageGlove
000288ec l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000288f8 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00028904 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00028910 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d5c4 l     O .rwdata	00000005 _ZL13pstrUsageVest
0002891c l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00028928 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00028934 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00028944 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00028954 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00028960 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
0002896c l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d5cc l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d5d0 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d5d8 l     O .rwdata	00000005 _ZL13pstrUsageRate
00028978 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00028984 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00028994 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
000289a4 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
000289b4 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
000289c0 l     O .rodata	0000000b _ZL18pstrUsageStickType
000289cc l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d5e0 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d5e8 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d5f0 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d5f8 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d600 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d608 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d610 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d618 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d620 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d628 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d630 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d638 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
000289d8 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
000289e4 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000289f0 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d640 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d648 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d650 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d658 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d660 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000289fc l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00028a0c l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d668 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d670 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00028a18 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00028a28 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00028a38 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00028a48 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00028a58 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00028a68 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00028a78 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00028a88 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00028a98 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d674 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00028aa8 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d67c l     O .rwdata	00000005 _ZL13pstrUsageBump
00028ab8 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00028ac4 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d684 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00028ad0 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00028adc l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d68c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00028ae8 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00028af8 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00028b04 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00028b10 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00028b1c l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00028b30 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00028b40 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00028b50 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00028b5c l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00028b68 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00028b80 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00028b94 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00028bac l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00028bc0 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00028bcc l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00028bd8 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d694 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d69c l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d6a4 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d6a8 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d6b0 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d6b4 l     O .rwdata	00000005 _ZL13pstrUsageMute
00028be4 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00028bf0 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00028c00 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d6bc l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00028c10 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00028c20 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d6c4 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d6cc l     O .rwdata	00000007 _ZL15pstrUsageStereo
00028c2c l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00028c40 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d6d4 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d6d8 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00028c4c l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00028c60 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d6dc l     O .rwdata	00000005 _ZL13pstrUsageRing
00028c6c l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00028c78 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d6e4 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d6ec l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d6f4 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d6fc l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00028c84 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d704 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d70c l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00028c90 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00028c9c l     O .rodata	0000000b _ZL18pstrUsageNightMode
00028ca8 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00028cb4 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d710 l     O .rwdata	00000005 _ZL19pstrUsageConference
00028cc0 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d718 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d720 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d728 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00028ccc l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d730 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d738 l     O .rwdata	00000006 _ZL14pstrUsageReady
00028cd8 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00028ce4 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d740 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d748 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d74c l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d750 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d758 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00028cf0 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d760 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d768 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d770 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d774 l     O .rwdata	00000006 _ZL14pstrUsageError
00028cfc l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00028d0c l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00028d20 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d77c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00028d38 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00028d44 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00028d54 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d784 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00028d64 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00028d74 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00028d88 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00028d9c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00028db0 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00028dc4 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d78c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00028dd4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00028de0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d794 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00028dec l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00028df8 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d79c l     O .rwdata	00000006 _ZL14pstrUsagePhone
00028e08 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00028e14 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d7a4 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d7ac l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00028e20 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00028e2c l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d7b4 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d7bc l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d7c4 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d7cc l     O .rwdata	00000007 _ZL15pstrUsageRedial
00028e38 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d7d4 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d7dc l     O .rwdata	00000005 _ZL13pstrUsagePark
00028e44 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00028e50 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d7e4 l     O .rwdata	00000005 _ZL13pstrUsageLine
00028e5c l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00028e68 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00028e74 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00028e80 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00028e8c l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d7ec l     O .rwdata	00000005 _ZL13pstrUsageSend
00028e98 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00028ea4 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00028eb0 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00028ebc l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00028ec8 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00028ed4 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d7f4 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00028ee4 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00028ef4 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00028f08 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00028f1c l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00028f30 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00028f44 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00028f54 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00028f64 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00028f78 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00028f88 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00028f98 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00028fa8 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00028fb4 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00028fc0 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00028fcc l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d7f8 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d800 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d804 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d808 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d80c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d810 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d814 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d818 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d81c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d820 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002d824 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002d828 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002d82c l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002d830 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002d834 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002d838 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002d83c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00028fe0 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00028ff0 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00028ffc l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00029008 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002d840 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002d844 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002d84c l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002d854 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002d85c l     O .rwdata	00000006 _ZL14pstrUsageSleep
00029014 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00029020 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002d864 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
0002902c l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002d86c l     O .rwdata	00000005 _ZL13pstrUsageMenu
00029038 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002d874 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00029044 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00029050 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0002905c l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00029068 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00029074 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00029084 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00029094 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
000290a0 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
000290ac l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002d87c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
000290bc l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
000290cc l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002d884 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002d88c l     O .rwdata	00000004 _ZL18pstrUsageSelection
000290d8 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
000290e4 l     O .rodata	0000000a _ZL17pstrUsageModeStep
000290f0 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
000290fc l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0002910c l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002d890 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002d898 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00029118 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00029128 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00029134 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00029140 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0002914c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00029158 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00029164 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00029170 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00029180 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0002918c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00029198 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
000291a4 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002d8a0 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002d8a8 l     O .rwdata	00000005 _ZL13pstrUsageHelp
000291b4 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
000291c4 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
000291d0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
000291dc l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
000291ec l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
000291fc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002d8b0 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002d8b8 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0002920c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002d8c0 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002d8c8 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002d8d0 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002d8d8 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002d8e0 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00029218 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00029224 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002d8e8 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002d8f0 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00029230 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0002923c l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00029248 l     O .rodata	00000009 _ZL17pstrUsageTracking
00029254 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00029260 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002d8f8 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0002926c l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002d900 l     O .rwdata	00000005 _ZL13pstrUsageMark
00029278 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00029284 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00029290 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0002929c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
000292ac l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
000292c0 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
000292d0 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
000292e0 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
000292ec l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
000292f8 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00029304 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00029310 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002d908 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002d90c l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002d914 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002d91c l     O .rwdata	00000007 _ZL15pstrUsageTreble
0002931c l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00029328 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002d924 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002d92c l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002d930 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002d938 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002d940 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00029334 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00029340 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0002934c l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00029358 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002d948 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00029364 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00029370 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0002937c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00029388 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00029398 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
000293a8 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
000293b4 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
000293c0 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
000293cc l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002d950 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002d958 l     O .rwdata	00000007 _ZL15pstrUsageMotion
000293d8 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
000293e4 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002d960 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
000293f0 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00029400 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00029410 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
0002941c l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00029428 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00029434 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002d968 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002d970 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00029440 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0002944c l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00029458 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00029464 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002d978 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00029474 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00029480 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002d980 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002d988 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002d990 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00029490 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0002949c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
000294a8 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
000294b4 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
000294c0 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
000294d0 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
000294e4 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
000294f0 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00029504 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00029514 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00029520 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00029530 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00029540 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00029550 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0002955c l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0002956c l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00029578 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00029588 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00029598 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
000295a8 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
000295b8 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
000295cc l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002d998 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
000295dc l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000295f0 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00029604 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00029614 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00029624 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00029634 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00029640 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0002964c l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00029658 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00029664 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00029670 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00029680 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00029698 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
000296a4 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
000296b0 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
000296bc l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
000296c8 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
000296d4 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
000296e0 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000296f4 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002d9a0 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00029700 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002d9a8 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0002970c l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00029718 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00029728 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00029734 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00029744 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00029754 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00029764 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00029770 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002977c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00029788 l     O .rodata	00000009 _ZL16pstrUsageALClock
00029794 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
000297a4 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
000297b0 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
000297bc l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
000297c8 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
000297d4 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
000297e8 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
000297f8 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00029804 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00029818 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00029824 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00029834 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00029848 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
0002985c l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00029870 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00029880 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00029898 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
000298ac l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
000298bc l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
000298cc l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002d9b0 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002d9b8 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
000298e0 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002d9c0 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002d9c8 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002d9d0 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002d9d8 l     O .rwdata	00000008 _ZL15pstrUsageACSave
000298ec l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002d9e0 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002d9e8 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002d9f0 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002d9f8 l     O .rwdata	00000007 _ZL14pstrUsageACCut
000298f8 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00029904 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002da00 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00029910 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00029920 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002da08 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002da10 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002da18 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002da20 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002da28 l     O .rwdata	00000008 _ZL15pstrUsageACStop
0002992c l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00029938 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00029948 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00029958 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002da30 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00029964 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00029970 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0002997c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002da38 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00029988 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00029994 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
000299a4 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
000299b0 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
000299c0 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
000299d0 l     O .rodata	0000000a _ZL17pstrUsageACScroll
000299dc l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
000299e8 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002da40 l     O .rwdata	00000007 _ZL14pstrUsageACPan
000299f8 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00029a04 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00029a14 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002da48 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002da50 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002da58 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002da60 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00029a24 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00029a30 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002da68 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00029a3c l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00029a48 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00029a54 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00029a60 l     O .rodata	0000000a _ZL17pstrUsageACResize
00029a6c l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00029a78 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00029a84 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00029a90 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00029a9c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00029aa8 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00029ab4 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00029ac0 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00029ad0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00029ae0 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00029af0 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00029b00 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00029b0c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00029b1c l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00029b28 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00029b38 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00029b48 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00029b58 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00029b64 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00029b70 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00029b7c l     O .rodata	0000000b _ZL18pstrUsageACPromote
00029b88 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002da70 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002da78 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00029b94 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002da80 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002da88 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00029ba0 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002da90 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00029bac l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00029bbc l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00029bc8 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00029bd8 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00029be8 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00029bf8 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002da98 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002daa0 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00029c04 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002daa8 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00029c10 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00029c1c l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00029c2c l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00029c38 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00029c48 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00029c54 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00029c60 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00029c6c l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00029c78 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00029c84 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00029c90 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002dab0 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002dab8 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00029c9c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00029ca8 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002dac0 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00029cb8 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00029cc4 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00029cd0 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00029ce0 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00029cf0 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00029cfc l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00029d08 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00029d14 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002dac8 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00029d20 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00029d2c l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00029d38 l     O .rodata	00000009 _ZL16pstrUsageACReply
00029d44 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00029d54 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002dad0 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00029d60 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002dad8 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002dae0 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00029d6c l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00029d78 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00029d84 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00029d90 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00029d9c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00029da8 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00029db4 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00029dc0 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00029dcc l     O .rodata	0000000a _ZL17pstrUsageACRename
00029dd8 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00029de4 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00029df0 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00029dfc l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00029e08 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002dae8 l     O .rwdata	00000004 _ZL12pstrUsagePen
00029e14 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00029e20 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00029e2c l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00029e38 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00029e44 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002daec l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00029e54 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002daf4 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00029e60 l     O .rodata	00000009 _ZL17pstrUsageArmature
00029e6c l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00029e80 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002dafc l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002db04 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002db0c l     O .rwdata	00000007 _ZL15pstrUsageFinger
00029e90 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00029e9c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00029ea8 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002db14 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002db1c l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002db24 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002db28 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00029eb4 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00029ec0 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00029ed0 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00029ee0 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002db30 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002db38 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002db40 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002db48 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00029ef0 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002db50 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002db58 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00029efc l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002db60 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002db68 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00029f08 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00029f14 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00029f24 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00029f30 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00029f40 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00029f4c l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00029f5c l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00029f68 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00029f78 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00029f84 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00029f94 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00029fa4 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00029fb0 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00029fbc l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00029fc8 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00029fd4 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00029fe0 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00029fec l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00029ff8 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0002a008 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0002a018 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002db70 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002db74 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002db78 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002db80 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002a024 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002a030 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0002a03c l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0002a048 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002db88 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0002a054 l     O .rodata	00000009 _ZL17pstrUsageFontData
0002a060 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0002a06c l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0002a078 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0002a088 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0002a098 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0002a0a8 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002a0b4 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002a0c0 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002a0cc l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0002a0d8 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002a0e4 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002a0f0 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002a0fc l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0002a108 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002a114 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002a124 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0002a134 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0002a144 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0002a150 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0002a15c l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0002a16c l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002db90 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002a178 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002a188 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002a198 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002a1a4 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002a1b0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002a1c0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002a1d0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002a1e0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002a1f0 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002a1fc l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0002a208 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002a214 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002a224 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002a234 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0002a244 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0002a254 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002db98 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002dba0 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0002a264 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002dba8 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002dbb0 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002dbb8 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002dbc0 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002a270 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002dbc8 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002a27c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002dbd0 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002dbd8 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002a288 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002a298 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002a2a8 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002a2b8 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002a2c4 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002a2d0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002a2e4 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0002a2f8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002a30c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002a320 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002a330 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0002a340 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0002a34c l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002a358 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002a368 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0002a376 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002a386 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0002dbe0 l     O .rwdata	00000004 _ZL4keys
0002dbe4 l     O .rwdata	00000004 _ZL4adsr
0000a158 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000a1c0 l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000b3f4 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000b498 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000b6a4 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000b6f8 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000b784 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000b8b8 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000b940 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000bb6c l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000c444 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000c72c l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
00030fb8 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000c7e4 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000c994 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00030e54 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000dc44 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00030e5c l     O .bss	00000004 fc_static
0000dd5c l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000de1c l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0002aa6c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002a84a l     O .rodata	00000010 zeroes.4389
0002a85a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002a86a l     O .rodata	00000010 zeroes.4404
0001397c l     F .text	000000bc __sbprintf
0002a87a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00013b8c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000156e4 l     F .text	00000008 __fp_unlock
000156f8 l     F .text	0000019c __sinit.part.1
00015894 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002b2b8 l     O .rwdata	00000020 lc_ctype_charset
0002b298 l     O .rwdata	00000020 lc_message_charset
0002b2d8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002a8a8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002a9cc l     O .rodata	00000010 zeroes.4333
0002a9dc l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
00019894 l     F .text	000000fc __sprint_r.part.0
0002a9ec l     O .rodata	00000010 zeroes.4349
0001aed0 l     F .text	000000bc __sbprintf
0002a9fc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001ecd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001edec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001ee4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001ef60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001f048 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001f1b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001f2a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001f47c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002dc40 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0001f6f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001f7d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001f910 l     F .text	00000034 alt_dev_reg
0002b4b8 l     O .rwdata	00000038 i2c_0
0002b4f0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0001f9f0 l     F .text	00000110 optional_irq_callback
0001fb50 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002182c l     F .text	0000020c altera_avalon_jtag_uart_irq
00021a38 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002226c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00022604 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00022af4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00022c54 l     F .text	0000003c alt_get_errno
00022c90 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00030e94 g     O .bss	00000004 alt_instruction_exception_handler
0000c8ec g     F .text	00000028 __cxa_free_exception
00023b40  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000ed44 g     F .text	00000018 putchar
0000af48 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00017930 g     F .text	00000074 _mprec_log10
0000443c  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000b394 g     F .text	00000018 _ZSt10unexpectedv
00017a1c g     F .text	0000008c __any_on
0001b5dc g     F .text	00000054 _isatty_r
0002a8b4 g     O .rodata	00000028 __mprec_tinytens
0001f3b8 g     F .text	0000007c alt_main
00006864 g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000ed5c g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
00030ff0 g     O .bss	00000100 alt_irq
0000ca88 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00009290 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001b630 g     F .text	00000060 _lseek_r
0000ded8 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002dc58 g       *ABS*	00000000 __flash_rwdata_start
00006204 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001d714 g     F .text	00000088 .hidden __eqdf2
0000443c  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000024c8 g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000c518 g     F .text	00000084 __cxa_rethrow
0000de64 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000b3d0 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006aa8 g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000dec8 g     F .text	00000010 .hidden _Unwind_GetIP
000310f0 g       *ABS*	00000000 __alt_heap_start
00008bd0  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0000f128 g     F .text	0000005c _kill_r
00006e14 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000ed00 g     F .text	0000003c printf
00023b64  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001b6f0 g     F .text	0000009c _wcrtomb_r
0000eef0 g     F .text	00000084 _signal_r
00005f8c  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
000182c0 g     F .text	0000005c __sseek
00015a44 g     F .text	00000010 __sinit
0001af8c g     F .text	00000140 __swbuf_r
00009904 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000c968 g     F .text	0000002c __cxa_free_dependent_exception
0000a29c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000043dc  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
00016518 g     F .text	0000007c _setlocale_r
0002a490  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0001589c g     F .text	00000078 __sfmoreglue
00020248 g     F .text	000000a8 alt_avalon_i2c_rx_read
0001f458 g     F .text	00000024 __malloc_unlock
000051b0 g     F .text	00000080 _Z8set_notehh
0000ca88 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00008520 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000acd0 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00008cb8  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
0000203c g     F .text	000002cc _ZN3USB11ConfiguringEhhb
0000c70c g     F .text	00000020 _ZSt18uncaught_exceptionv
0000ccd4 g     F .text	00000440 .hidden __divsf3
00021460 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001dac g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
00009cd8 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0000afc4 g     F .text	00000020 __cxa_deleted_virtual
0001ffcc g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002938  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
00008d7c g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
00009714 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00016894 g     F .text	0000015c memmove
00005ca8  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000ca60 g     F .text	00000004 _ZNSt9exceptionD2Ev
00015a2c g     F .text	00000018 _cleanup
00009f74 g     F .text	00000088 _Z7controlv
00020cb0 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
000169f0 g     F .text	000000a8 _Balloc
0000dae4 g     F .text	00000070 .hidden __fixsfsi
00003a3c g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001d79c g     F .text	000000dc .hidden __gtdf2
00003b00 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0002a6c4  w    O .rodata	00000014 _ZTVSt13bad_exception
000232e4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001f72c g     F .text	00000078 times
00008c38  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000df14 g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002c56c  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
000084a4 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004908  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001b580 g     F .text	0000005c _fstat_r
000093e0 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
00030e6c g     O .bss	00000004 errno
000059e8 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
0001823c g     F .text	00000008 __seofread
00008f8c g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
000184f4 g     F .text	000013a0 ___svfiprintf_internal_r
0000e0f0 g     F .text	00000074 .hidden _Unwind_Backtrace
00030e80 g     O .bss	00000004 alt_argv
000030c8 g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
00034550 g       *ABS*	00000000 _gp
0001f7a4 g     F .text	00000030 usleep
000214a4 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000d600 g     F .text	000004e4 .hidden __subsf3
00007e30 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002cd0c  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0001ef40 g     F .text	00000020 getpid
0000c214 g     F .text	00000230 __cxa_call_unexpected
0000c59c g     F .text	00000008 __cxa_get_exception_ptr
0002015c g     F .text	00000044 alt_avalon_i2c_is_busy
0002b338 g     O .rwdata	00000180 alt_fd_list
0000913c g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00023ab0  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
00006e14 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
00004214 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000ed3c g     F .text	00000008 _putchar_r
0000e004 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0001ff00 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c4c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000de94 g     F .text	00000018 .hidden _Unwind_GetCFA
0000b3ac g     F .text	00000014 _ZSt13set_terminatePFvvE
000227a4 g     F .text	00000090 alt_find_dev
00023aa4  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
0001167c g     F .text	00000008 _times_r
0000ea60 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00005d70  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000c914 g     F .text	00000054 __cxa_allocate_dependent_exception
000156ec g     F .text	0000000c _cleanup_r
0000b05c g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001eb54 g     F .text	000000dc .hidden __floatsidf
00023b58  w    O .rodata	0000000c _ZTV13USBReadParser
00022bd8 g     F .text	0000007c alt_io_redirect
0001d878 g     F .text	000000f4 .hidden __ltdf2
0000475c  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00023910 g       *ABS*	00000000 __DTOR_END__
0000b074 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00020af0 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0000ee1c g     F .text	00000014 puts
0002a518  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
000234d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007eb8 g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
000091c4 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00018174 g     F .text	00000074 __fpclassifyd
00009e60 g     F .text	00000114 _Z9MIDI_pollv
0001788c g     F .text	000000a4 __ratio
0001aeb4 g     F .text	0000001c __vfiprintf_internal
00007934 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00021c30 g     F .text	0000021c altera_avalon_jtag_uart_read
0000e22c g     F .text	00000014 malloc
0000ecd0 g     F .text	00000030 _printf_r
0000cbf0 g     F .text	00000064 .hidden __udivsi3
0001ef9c g     F .text	000000ac isatty
0000ef74 g     F .text	000000bc _raise_r
00009380 g     F .text	0000003c _ZN8MAX3421eC2Ev
0002a904 g     O .rodata	000000c8 __mprec_tens
00006b14 g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
00016594 g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004714  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0001fd6c g     F .text	00000098 alt_avalon_i2c_enable
00030e68 g     O .bss	00000004 __malloc_top_pad
0000f184 g     F .text	00000004 _getpid_r
00021394 g     F .text	00000068 alt_avalon_i2c_int_disable
00030e4c g     O .bss	00000001 usb_task_state
0002dc20 g     O .rwdata	00000004 __mb_cur_max
000165c4 g     F .text	0000000c _localeconv_r
0000a560 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003a6c g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
00006f94 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
00016e24 g     F .text	0000003c __i2b
00015ec8 g     F .text	000004c8 __sfvwrite_r
0000b1f4 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0000f030 g     F .text	000000a8 __sigtramp_r
000081ec g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
000029f0  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0000ee30 g     F .text	00000054 _sbrk_r
0002a560  w    O .rodata	00000020 _ZTVSt9type_info
0000480c  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
00009024 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001b690 g     F .text	00000060 _read_r
0000ca68 g     F .text	0000000c _ZNKSt9exception4whatEv
00005230 g     F .text	00000048 _Z8set_adsrhm
0002dc38 g     O .rwdata	00000004 alt_max_fd
0000605c g     F .text	00000050 _Z9E_Notifycci
0000832c g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001b274 g     F .text	000000f0 _fclose_r
000156b4 g     F .text	00000030 fflush
00009d70 g     F .text	00000078 _Z6onInitv
00030e64 g     O .bss	00000004 __malloc_max_sbrked_mem
0000968c g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
00020ebc g     F .text	00000210 alt_avalon_i2c_master_receive
000260f4  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001c498 g     F .text	000008ac .hidden __adddf3
0002a4c4  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004838  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008a84 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00017634 g     F .text	0000010c __b2d
0001bed4 g     F .text	000005c4 .hidden __umoddi3
0001f2dc g     F .text	000000dc lseek
00005d98  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000b0b8 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000061b4 g     F .text	00000028 _Z8E_Notifyhi
0000afa0 g     F .text	00000004 _ZdlPv
000213fc g     F .text	00000064 alt_avalon_i2c_int_enable
0002dc10 g     O .rwdata	00000004 _global_impure_ptr
0000a570 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00017c10 g     F .text	00000564 _realloc_r
000310f0 g       *ABS*	00000000 __bss_end
00022a04 g     F .text	000000f0 alt_iic_isr_register
000231dc g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000de4c g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001b8d8 g     F .text	000005fc .hidden __udivdi3
000212bc g     F .text	00000058 alt_avalon_i2c_int_status_get
0001b4dc g     F .text	00000024 _fputwc_r
0002a8dc g     O .rodata	00000028 __mprec_bigtens
00016c08 g     F .text	00000104 __s2b
0000e1c8 g     F .text	00000018 abort
0001ec30 g     F .text	000000a8 .hidden __floatunsidf
00025eb8  w    O .rodata	00000014 _ZTS17MouseReportParser
00017374 g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
00008cf4  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
000032ac g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000c658 g     F .text	000000b4 __cxa_end_catch
000090b8 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00015a64 g     F .text	00000018 __fp_lock_all
00023b9c  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
000229b8 g     F .text	0000004c alt_ic_irq_enabled
0000ca64 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00002cbc  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
00005d48  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
00023140 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00026080  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0001fbec g     F .text	00000054 alt_avalon_i2c_register_callback
00030e88 g     O .bss	00000004 alt_irq_active
0001fc40 g     F .text	000000ec alt_avalon_i2c_init
0000b36c g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002b310 g     O .rwdata	00000028 alt_dev_null
0000a5a4 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00005fc0  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000ca90 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004ab8  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
00002e68  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002790 g     F .text	00000084 _ZN3USB7setConfEhhh
00008bc8 g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002a5bc  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
000225e4 g     F .text	00000020 alt_dcache_flush_all
00016d0c g     F .text	00000068 __hi0bits
00026100  w    O .rodata	0000000c _ZTI14MidiDescParser
000098dc g     F .text	00000028 _Z10Vbus_powerb
0002dbf8  w    O .rwdata	00000008 _ZTISt9exception
0001ead4 g     F .text	00000080 .hidden __fixdfsi
00025ecc  w    O .rodata	00000012 _ZTS15HIDReportParser
0000a1f0  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002dc58 g       *ABS*	00000000 __ram_rwdata_end
0000af44 g     F .text	00000004 _ZNSt9type_infoD1Ev
0002dc30 g     O .rwdata	00000008 alt_dev_list
0000ca90 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0001f810 g     F .text	00000100 write
00017aa8 g     F .text	000000a0 _putc_r
00009d4c g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
0002057c g     F .text	0000004c alt_avalon_i2c_check_arblost
0000af58 g     F .text	00000004 _ZNSt9type_infoD0Ev
00004930  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0000d114 g     F .text	000000bc .hidden __gtsf2
00021358 g     F .text	0000003c alt_avalon_i2c_int_clear
00008d50  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00023a90  w    O .rodata	00000014 _ZTV11AddressPool
0002aa6c g       *ABS*	00000000 __ram_rodata_end
0001ee88 g     F .text	000000b8 fstat
0000286c  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0001f084 g     F .text	00000130 kill
00006038  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001d878 g     F .text	000000f4 .hidden __ledf2
00023bc4  w    O .rodata	00000020 _ZTI7XBOXONE
0002dc44 g     O .rwdata	00000008 alt_avalon_i2c_list
0000469c  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00025e12 g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
000170ec g     F .text	00000140 __pow5mult
00004c84  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
000199a8 g     F .text	0000150c ___vfiprintf_internal_r
00030e78 g     O .bss	00000004 __nlocale_changed
0000cc54 g     F .text	00000058 .hidden __umodsi3
0000af50 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00004478  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
00009de8 g     F .text	00000078 _Z10MIDI_setupv
00002308 g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000b3c0 g     F .text	00000010 _ZSt13get_terminatev
000310f0 g       *ABS*	00000000 end
00023b4c  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004a84  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
000095a0 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
00005f58  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000e0d8 g     F .text	00000018 .hidden _Unwind_DeleteException
0002176c g     F .text	000000c0 altera_avalon_jtag_uart_init
00005d20  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001fd2c g     F .text	00000040 alt_avalon_i2c_open
00025e28 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0000b124 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000a560 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002cd00 g     O .rwdata	00000004 UsbDEBUGlvl
00023908 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00020704 g     F .text	000000e8 alt_avalon_i2c_master_tx
000222e4 g     F .text	0000007c alt_avalon_timer_sc_init
0000e164 g     F .text	00000064 .hidden __clzsi2
0000afe4 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00021e4c g     F .text	00000224 altera_avalon_jtag_uart_write
00015a54 g     F .text	00000004 __sfp_lock_acquire
0002a64c  w    O .rodata	00000012 _ZTSSt13bad_exception
000167b0 g     F .text	000000e4 memchr
00011684 g     F .text	000022dc ___vfprintf_internal_r
0000f188 g     F .text	00000058 _sprintf_r
000043dc  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00015bb8 g     F .text	00000310 _free_r
00022ed8 g     F .text	0000022c alt_printf
000165a0 g     F .text	00000010 __locale_mb_cur_max
00023750 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
00030e74 g     O .bss	00000004 __mlocale_changed
0001fb00 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002dc18 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003a44 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00030e8c g     O .bss	00000004 _alt_tick_rate
0002a550  w    O .rodata	0000000d _ZTSSt9type_info
000210cc g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000afa4 g     F .text	00000020 __cxa_pure_virtual
00023a7c  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00023c04  w    O .rodata	00000010 _ZTS13USBReadParser
000214f0 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0001722c g     F .text	00000148 __lshift
00022070 g     F .text	000001fc alt_avalon_spi_command
00030e90 g     O .bss	00000004 _alt_nticks
0000f0ec g     F .text	00000018 signal
0001f4b8 g     F .text	00000104 read
00005510 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0001f97c g     F .text	00000074 alt_sys_init
00023b00  w    O .rodata	00000040 _ZTV7XBOXONE
00018324 g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
00023638 g     F .text	00000118 __register_exitproc
000026fc g     F .text	00000094 _ZN3USB7setAddrEhhh
000060ac g     F .text	00000084 _Z8E_NotifyPKci
000260bc  w    O .rodata	0000000c _ZTV14MidiDescParser
00008c60  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00002efc  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000a2e0 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00005f24  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
000048c8  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00020928 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00016e60 g     F .text	0000028c __multiply
00002654 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002ccee g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00021ad8 g     F .text	00000068 altera_avalon_jtag_uart_close
0000286c  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000ccac g     F .text	00000028 .hidden __mulsi3
0002aa6c g       *ABS*	00000000 __ram_rwdata_start
0000df34 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
00023910 g       *ABS*	00000000 __ram_rodata_start
00030fc8 g     O .bss	00000028 __malloc_current_mallinfo
00004b20  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000e048 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00017740 g     F .text	0000014c __d2b
0002a6ec  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000af44 g     F .text	00000004 _ZNSt9type_infoD2Ev
00008c10  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004534  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002c558  w    O .rwdata	00000008 _ZTI11AddressPool
0000ca94 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000a4dc g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0002610c  w    O .rodata	00000011 _ZTS14MidiDescParser
0002a4f0  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
00021608 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00023410 g     F .text	000000c4 alt_get_fd
0000572c g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
0002248c g     F .text	00000158 alt_busy_sleep
00006604 g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002dc08  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001b144 g     F .text	00000054 _close_r
000235bc g     F .text	0000007c memcmp
000201a0 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
000216c8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007a08 g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
000310f0 g       *ABS*	00000000 __alt_stack_base
00021718 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005278 g     F .text	00000298 _Z9calc_adsrtttf
0000a29c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00007c70 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004174 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00013a38 g     F .text	00000154 __swsetup_r
0000e08c g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00030e50 g     O .bss	00000004 i2c_dev
0001cd44 g     F .text	000009d0 .hidden __divdf3
0000a240  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00015914 g     F .text	00000118 __sfp
000179a4 g     F .text	00000078 __copybits
0000af48 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0002ae90 g     O .rwdata	00000408 __malloc_av_
000044f8  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00015a60 g     F .text	00000004 __sinit_lock_release
0001d96c g     F .text	0000086c .hidden __muldf3
000181e8 g     F .text	00000054 __sread
00004aec  w    F .text	00000034 _ZN13USBReadParserC2Ev
0002a6b0  w    O .rodata	00000014 _ZTVSt9exception
0000ca8c g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002838  w    F .text	00000034 _ZN11AddressPoolC2Ev
00023308 g     F .text	00000108 alt_find_file
000047e0  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
00022640 g     F .text	000000a4 alt_dev_llist_insert
0001f434 g     F .text	00000024 __malloc_lock
0001f640 g     F .text	000000b0 sbrk
0000f3c0 g     F .text	000022bc ___svfprintf_internal_r
000205c8 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00020530 g     F .text	0000004c alt_avalon_i2c_check_nack
0002a5ec  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000c488 g     F .text	00000090 __cxa_throw
00015658 g     F .text	0000005c _fflush_r
0000def8 g     F .text	00000010 .hidden _Unwind_SetIP
00006a10 g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001b198 g     F .text	000000dc _calloc_r
00023bf0  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
000061dc g     F .text	00000028 _Z8E_Notifydi
0000782c g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
00030e44 g       *ABS*	00000000 __bss_start
0002c57c  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000eba8 g     F .text	00000128 memset
0000832c g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00004d00  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
00009ffc g     F .text	0000015c main
00009614 g     F .text	00000078 _ZN8MAX3421e5regRdEh
00009810 g     F .text	000000cc _ZN8MAX3421e5resetEv
000204fc g     F .text	00000034 alt_avalon_i2c_master_target_set
00030e84 g     O .bss	00000004 alt_envp
00023c14  w    O .rodata	00000012 _ZTS15USBDeviceConfig
00030e60 g     O .bss	00000004 __malloc_max_total_mem
00021668 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00030e4d g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001b0cc g     F .text	00000018 __swbuf
0000ca48 g     F .text	0000000c __cxa_get_globals_fast
00021314 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00006cc0 g     F .text	000000d4 _Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s
00009380 g     F .text	0000003c _ZN8MAX3421eC1Ev
00004ab8  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002814  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
0001831c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001b364 g     F .text	00000014 fclose
0000a268  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
00004048 g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
00006130 g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
00013db4 g     F .text	00001688 _dtoa_r
0000e254 g     F .text	0000080c _malloc_r
0001b84c g     F .text	00000030 __ascii_wctomb
0000ca74 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002dc3c g     O .rwdata	00000004 alt_errno
00025eac  w    O .rodata	0000000c _ZTI17MouseReportParser
0000f104 g     F .text	00000010 _init_signal
0000255c g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
000067bc g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0002a5e0  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000042b8 g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
00016390 g     F .text	000000c4 _fwalk
000093bc g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00002e00  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000ca64 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00017b48 g     F .text	000000c8 putc
0000caf8 g     F .text	00000084 .hidden __divsi3
00026120  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00015a94 g     F .text	00000124 _malloc_trim_r
00023910 g       *ABS*	00000000 __CTOR_END__
0000d1d0 g     F .text	00000430 .hidden __mulsf3
000046d8  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
00008d1c  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00025e60  w    O .rodata	00000028 _ZTV17MouseReportParser
0000f24c g     F .text	000000dc strcmp
000030c8 g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00023910 g       *ABS*	00000000 __flash_rodata_start
0002a6d8  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000a218  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00023910 g       *ABS*	00000000 __DTOR_LIST__
000260c8  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001d714 g     F .text	00000088 .hidden __nedf2
0001f944 g     F .text	00000038 alt_irq_init
0001f5bc g     F .text	00000084 alt_release_fd
0000a2ac g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00023be4  w    O .rodata	00000009 _ZTS7XBOXONE
0000f1e0 g     F .text	0000006c sprintf
0002a700 g     O .rodata	00000100 .hidden __clz_tab
00030e70 g     O .bss	00000004 _PathLocale
00023570 g     F .text	00000014 atexit
0000d114 g     F .text	000000bc .hidden __gesf2
0001b0e4 g     F .text	00000060 _write_r
00002440 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
000029c4  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
000165d0 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00025e34  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00009794 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000df2c g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002a524  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000c9f0 g     F .text	00000058 __cxa_call_terminate
0002dc14 g     O .rwdata	00000004 _impure_ptr
0002dc00  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00023acc  w    O .rodata	0000000e _ZTS11AddressPool
00030e7c g     O .bss	00000004 alt_argc
00003000  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
0001543c g     F .text	0000021c __sflush_r
00008d1c  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00002c50  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
00022744 g     F .text	00000060 _do_dtors
00030f54 g     O .bss	00000064 Midi
000165bc g     F .text	00000008 __locale_cjk_lang
000204c4 g     F .text	00000038 alt_avalon_i2c_master_target_get
000203d4 g     F .text	000000f0 alt_avalon_i2c_send_address
0000b3e4 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002838  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
000175d0 g     F .text	00000064 __ulp
0000df1c g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00015a7c g     F .text	00000018 __fp_unlock_all
00004b20  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
00004138 g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004780  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002dc28 g     O .rwdata	00000008 alt_fs_list
0002a68c  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00025e94  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004aec  w    F .text	00000034 _ZN13USBReadParserC1Ev
0000df08 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
000047ac  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000c5a4 g     F .text	000000b4 __cxa_begin_catch
00004330 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0000b074 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000b384 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00005cf8  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
000165e8 g     F .text	0000000c localeconv
00009b00 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004958  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000ca84 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
000215a0 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002dbf4 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00006d94 g     F .text	00000080 _Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
00008e1c g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00022854 g     F .text	00000050 alt_ic_isr_register
0001fe04 g     F .text	0000004c alt_avalon_i2c_disable
0000c88c g     F .text	00000060 __cxa_allocate_exception
0002a4b8  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002dc58 g       *ABS*	00000000 _edata
00004a84  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
000310f0 g       *ABS*	00000000 _end
0000a6cc g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000bc14 g     F .text	00000600 __gxx_personality_sj0
0001b378 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	00000430 _ZN3USB4TaskEv
00021b40 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002c574  w    O .rwdata	00000008 _ZTI13USBReadParser
0001fe50 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000ca60 g     F .text	00000004 _ZNSt9exceptionD1Ev
0002292c g     F .text	0000008c alt_ic_irq_disable
00005c80  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
00018244 g     F .text	0000007c __swrite
0002dc1c g     O .rwdata	00000004 __malloc_trim_threshold
000165b0 g     F .text	0000000c __locale_msgcharset
00023584 g     F .text	00000038 exit
0000deac g     F .text	0000001c .hidden _Unwind_SetGR
00005cd0  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
00016454 g     F .text	000000c4 _fwalk_reent
0000a440 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000db54 g     F .text	000000f0 .hidden __floatunsisf
000173d4 g     F .text	000001fc __mdiff
0000b2ac g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000cb7c g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00015a58 g     F .text	00000004 __sfp_lock_release
0002a660  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
00005fe8  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00003bf8 g     F .text	000003c8 _ZN7XBOXONE10readReportEv
00020060 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
000099e8 g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
000202f0 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000260d4  w    O .rodata	00000020 _ZTI9USBH_MIDI
00003fc0 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0000ca98 g     F .text	00000060 .hidden __fixunssfsi
000077b4 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
0001ee18 g     F .text	00000034 _exit
00022360 g     F .text	0000012c alt_alarm_start
00025e88  w    O .rodata	0000000c _ZTI20KeyboardReportParser
00007dcc g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000de78 g     F .text	0000001c .hidden _Unwind_GetGR
0000ca54 g     F .text	0000000c __cxa_get_globals
0000630c g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
000165f4 g     F .text	000001bc __smakebuf_r
0002dbf0 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004738  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0000f328 g     F .text	00000098 strlen
0000ee84 g     F .text	0000006c _init_signal_r
0002dbe8  w    O .rwdata	00000008 _ZTISt9type_info
00022d7c g     F .text	0000015c open
0001d79c g     F .text	000000dc .hidden __gedf2
00023104 g     F .text	0000003c alt_putchar
0002a63c  w    O .rodata	0000000d _ZTSSt9exception
0000e1e0 g     F .text	0000004c clock
00006010  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
00009c74 g     F .text	00000064 _ZN8MAX3421e4TaskEv
00025e1c g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
0000946c g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002dc24 g     O .rwdata	00000004 __wctomb
0000ca80 g     F .text	00000004 _ZNSt9exceptionD0Ev
00019990 g     F .text	00000018 __sprint_r
00022834 g     F .text	00000020 alt_icache_flush_all
0000df24 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00030e98 g     O .bss	000000bc Usb
0002dc4c g     O .rwdata	00000004 alt_priority_mask
000044f8  w    F .text	0000003c _ZN11ByteSkipperC2Ev
000228a4 g     F .text	00000088 alt_ic_irq_enable
00013960 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001b87c g     F .text	0000005c _wctomb_r
0001e1d8 g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003900 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00016d74 g     F .text	000000b0 __lo0bits
0002dc50 g     O .rwdata	00000008 alt_alarm_list
000226e4 g     F .text	00000060 _do_ctors
00023b90  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0000f114 g     F .text	00000014 __sigtramp
00008ed4 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001b78c g     F .text	000000c0 wcrtomb
0001ed14 g     F .text	000000d8 close
00021554 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002a66c  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0001f21c g     F .text	00000084 alt_load
000207ec g     F .text	0000013c alt_avalon_i2c_master_rx
0000af5c g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0000459c  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001b500 g     F .text	00000080 fputwc
0000f0d8 g     F .text	00000014 raise
0002ccf4  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000e240 g     F .text	00000014 free
00015a5c g     F .text	00000004 __sinit_lock_acquire
00016ac0 g     F .text	00000148 __multadd
0000b084 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00016a98 g     F .text	00000028 _Bfree
00006560 g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	1083fc04 	addi	r2,r2,4080
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	1083fc04 	addi	r2,r2,4080
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b25117 	ldw	r2,-14012(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b25117 	ldw	r2,-14012(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d6915414 	ori	gp,gp,17744
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     244:	10839114 	ori	r2,r2,3652

    movhi r3, %hi(__bss_end)
     248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     24c:	18c43c14 	ori	r3,r3,4336

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	001f21c0 	call	1f21c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001f3b80 	call	1f3b8 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	210e4404 	addi	r4,r4,14608
     28c:	000ee1c0 	call	ee1c <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	210e4704 	addi	r4,r4,14620
     2d0:	000ee1c0 	call	ee1c <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	210e4c04 	addi	r4,r4,14640
     304:	000ee1c0 	call	ee1c <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	210e4f04 	addi	r4,r4,14652
     340:	000ee1c0 	call	ee1c <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	210e5304 	addi	r4,r4,14668
     374:	000ee1c0 	call	ee1c <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	210e5704 	addi	r4,r4,14684
     3b0:	000ee1c0 	call	ee1c <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	210e5a04 	addi	r4,r4,14696
     3ec:	000ee1c0 	call	ee1c <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	210e5d04 	addi	r4,r4,14708
     428:	000ee1c0 	call	ee1c <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	210e6004 	addi	r4,r4,14720
     464:	000ee1c0 	call	ee1c <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	210e6304 	addi	r4,r4,14732
     4a0:	000ee1c0 	call	ee1c <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	210e6704 	addi	r4,r4,14748
     4dc:	000ee1c0 	call	ee1c <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	210e6b04 	addi	r4,r4,14764
     510:	000ee1c0 	call	ee1c <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000ccac0 	call	ccac <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000cbf00 	call	cbf0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000cbf00 	call	cbf0 <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000cbf00 	call	cbf0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000ccac0 	call	ccac <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000cbf00 	call	cbf0 <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000cbf00 	call	cbf0 <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000ccac0 	call	ccac <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000cbf00 	call	cbf0 <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000ccac0 	call	ccac <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000ccac0 	call	ccac <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000cbf00 	call	cbf0 <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000ccac0 	call	ccac <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000e1e00 	call	e1e0 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000e1e00 	call	e1e0 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000e1e00 	call	e1e0 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	00093800 	call	9380 <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	000286c0 	call	286c <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b23d45 	stb	r2,-14091(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b23d43 	ldbu	r2,-14091(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b23d45 	stb	r2,-14091(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	000946c0 	call	946c <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	000968c0 	call	968c <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	000946c0 	call	946c <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	0009c740 	call	9c74 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	00093bc0 	call	93bc <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b23d45 	stb	r2,-14091(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b23d43 	ldbu	r2,-14091(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b23d45 	stb	r2,-14091(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b23d43 	ldbu	r2,-14091(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b23e15 	stw	r2,-14088(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b23d45 	stb	r2,-14091(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b23d43 	ldbu	r2,-14091(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	1800a01e 	bne	r3,zero,1c10 <_ZN3USB4TaskEv+0x3f4>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	0000a406 	br	1c34 <_ZN3USB4TaskEv+0x418>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00009f06 	br	1c34 <_ZN3USB4TaskEv+0x418>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	1800741e 	bne	r3,zero,1b90 <_ZN3USB4TaskEv+0x374>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18009b1e 	bne	r3,zero,1c34 <_ZN3USB4TaskEv+0x418>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00009606 	br	1c34 <_ZN3USB4TaskEv+0x418>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b23d45 	stb	r2,-14091(gp)
                        break;
    1a7c:	00006d06 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b23e17 	ldw	r2,-14088(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10005e26 	beq	r2,zero,1c18 <_ZN3USB4TaskEv+0x3fc>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b23d45 	stb	r2,-14091(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b23d45 	stb	r2,-14091(gp)
                        break;
    1ac0:	00005c06 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10004f26 	beq	r2,zero,1c20 <_ZN3USB4TaskEv+0x404>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b23d45 	stb	r2,-14091(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00004206 	br	1c20 <_ZN3USB4TaskEv+0x404>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10003c26 	beq	r2,zero,1c28 <_ZN3USB4TaskEv+0x40c>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b23d45 	stb	r2,-14091(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b23e15 	stw	r2,-14088(gp)
                        }
                        break;
    1b4c:	00003606 	br	1c28 <_ZN3USB4TaskEv+0x40c>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b23e17 	ldw	r2,-14088(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10003026 	beq	r2,zero,1c30 <_ZN3USB4TaskEv+0x414>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b23d45 	stb	r2,-14091(gp)
                        else break; // don't fall through
                        printf("IN: %X\n", usb_task_state);
    1b78:	d0b23d43 	ldbu	r2,-14091(gp)
    1b7c:	10803fcc 	andi	r2,r2,255
    1b80:	100b883a 	mov	r5,r2
    1b84:	010000b4 	movhi	r4,2
    1b88:	210e6f04 	addi	r4,r4,14780
    1b8c:	000ed000 	call	ed00 <printf>
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);
                	printf("CONFIGURING\n");
    1b90:	010000b4 	movhi	r4,2
    1b94:	210e7104 	addi	r4,r4,14788
    1b98:	000ee1c0 	call	ee1c <puts>

                        rcode = Configuring(0, 0, lowspeed);
    1b9c:	e0bffc03 	ldbu	r2,-16(fp)
    1ba0:	100f883a 	mov	r7,r2
    1ba4:	000d883a 	mov	r6,zero
    1ba8:	000b883a 	mov	r5,zero
    1bac:	e13ffe17 	ldw	r4,-8(fp)
    1bb0:	000203c0 	call	203c <_ZN3USB11ConfiguringEhhb>
    1bb4:	e0bffd05 	stb	r2,-12(fp)
                        printf("RCODING\n");
    1bb8:	010000b4 	movhi	r4,2
    1bbc:	210e7404 	addi	r4,r4,14800
    1bc0:	000ee1c0 	call	ee1c <puts>

                        if(rcode) {
    1bc4:	e0bffd03 	ldbu	r2,-12(fp)
    1bc8:	10000b26 	beq	r2,zero,1bf8 <_ZN3USB4TaskEv+0x3dc>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1bcc:	e0bffd03 	ldbu	r2,-12(fp)
    1bd0:	108034a0 	cmpeqi	r2,r2,210
    1bd4:	10000a1e 	bne	r2,zero,1c00 <_ZN3USB4TaskEv+0x3e4>
                                        usb_error = rcode;
    1bd8:	e0bffd03 	ldbu	r2,-12(fp)
    1bdc:	d0b23d05 	stb	r2,-14092(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1be0:	00bfe804 	movi	r2,-96
    1be4:	d0b23d45 	stb	r2,-14091(gp)
                                        printf("ERROR\n");
    1be8:	010000b4 	movhi	r4,2
    1bec:	210e7604 	addi	r4,r4,14808
    1bf0:	000ee1c0 	call	ee1c <puts>
    1bf4:	00000206 	br	1c00 <_ZN3USB4TaskEv+0x3e4>
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bf8:	00bfe404 	movi	r2,-112
    1bfc:	d0b23d45 	stb	r2,-14091(gp)
                        printf("CONFIG\n");
    1c00:	010000b4 	movhi	r4,2
    1c04:	210e7804 	addi	r4,r4,14816
    1c08:	000ee1c0 	call	ee1c <puts>
                        break;
    1c0c:	00000906 	br	1c34 <_ZN3USB4TaskEv+0x418>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1c10:	0001883a 	nop
    1c14:	00000706 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1c18:	0001883a 	nop
    1c1c:	00000506 	br	1c34 <_ZN3USB4TaskEv+0x418>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1c20:	0001883a 	nop
    1c24:	00000306 	br	1c34 <_ZN3USB4TaskEv+0x418>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1c28:	0001883a 	nop
    1c2c:	00000106 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1c30:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1c34:	0001883a 	nop
    1c38:	e037883a 	mov	sp,fp
    1c3c:	dfc00117 	ldw	ra,4(sp)
    1c40:	df000017 	ldw	fp,0(sp)
    1c44:	dec00204 	addi	sp,sp,8
    1c48:	f800283a 	ret

00001c4c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c4c:	defff704 	addi	sp,sp,-36
    1c50:	dfc00815 	stw	ra,32(sp)
    1c54:	df000715 	stw	fp,28(sp)
    1c58:	df000704 	addi	fp,sp,28
    1c5c:	e13ffc15 	stw	r4,-16(fp)
    1c60:	2809883a 	mov	r4,r5
    1c64:	3007883a 	mov	r3,r6
    1c68:	3805883a 	mov	r2,r7
    1c6c:	e13ffd05 	stb	r4,-12(fp)
    1c70:	e0fffe05 	stb	r3,-8(fp)
    1c74:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c78:	e03ff915 	stw	zero,-28(fp)
    1c7c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c80:	e0bffc17 	ldw	r2,-16(fp)
    1c84:	000b883a 	mov	r5,zero
    1c88:	1009883a 	mov	r4,r2
    1c8c:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c90:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c94:	e0bff917 	ldw	r2,-28(fp)
    1c98:	1000021e 	bne	r2,zero,1ca4 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c9c:	00bff584 	movi	r2,-42
    1ca0:	00003d06 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1ca4:	e0bff917 	ldw	r2,-28(fp)
    1ca8:	10c00003 	ldbu	r3,0(r2)
    1cac:	11000043 	ldbu	r4,1(r2)
    1cb0:	2008923a 	slli	r4,r4,8
    1cb4:	20c6b03a 	or	r3,r4,r3
    1cb8:	11000083 	ldbu	r4,2(r2)
    1cbc:	2008943a 	slli	r4,r4,16
    1cc0:	20c6b03a 	or	r3,r4,r3
    1cc4:	108000c3 	ldbu	r2,3(r2)
    1cc8:	1004963a 	slli	r2,r2,24
    1ccc:	10c4b03a 	or	r2,r2,r3
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1cd4:	00bff5c4 	movi	r2,-41
    1cd8:	00002f06 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1cdc:	e0bff917 	ldw	r2,-28(fp)
    1ce0:	e0ffff03 	ldbu	r3,-4(fp)
    1ce4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ce8:	e0bffc17 	ldw	r2,-16(fp)
    1cec:	e0fffd03 	ldbu	r3,-12(fp)
    1cf0:	e13ffe03 	ldbu	r4,-8(fp)
    1cf4:	200f883a 	mov	r7,r4
    1cf8:	000d883a 	mov	r6,zero
    1cfc:	180b883a 	mov	r5,r3
    1d00:	1009883a 	mov	r4,r2
    1d04:	00029f00 	call	29f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1d08:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1d0c:	e0bffb03 	ldbu	r2,-20(fp)
    1d10:	1000021e 	bne	r2,zero,1d1c <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1d14:	00bff504 	movi	r2,-44
    1d18:	00001f06 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1d1c:	e0bffc17 	ldw	r2,-16(fp)
    1d20:	e0fffb03 	ldbu	r3,-20(fp)
    1d24:	180b883a 	mov	r5,r3
    1d28:	1009883a 	mov	r4,r2
    1d2c:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1d30:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1d34:	e0bffa17 	ldw	r2,-24(fp)
    1d38:	1000021e 	bne	r2,zero,1d44 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1d3c:	00bff584 	movi	r2,-42
    1d40:	00001506 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d44:	e0bffa17 	ldw	r2,-24(fp)
    1d48:	e0ffff03 	ldbu	r3,-4(fp)
    1d4c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d50:	e0bffb03 	ldbu	r2,-20(fp)
    1d54:	100f883a 	mov	r7,r2
    1d58:	000d883a 	mov	r6,zero
    1d5c:	000b883a 	mov	r5,zero
    1d60:	e13ffc17 	ldw	r4,-16(fp)
    1d64:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    1d68:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d6c:	e0bffb43 	ldbu	r2,-19(fp)
    1d70:	10000826 	beq	r2,zero,1d94 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d74:	e0bffc17 	ldw	r2,-16(fp)
    1d78:	e0fffb03 	ldbu	r3,-20(fp)
    1d7c:	180b883a 	mov	r5,r3
    1d80:	1009883a 	mov	r4,r2
    1d84:	0002c500 	call	2c50 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d88:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d8c:	e0bffb43 	ldbu	r2,-19(fp)
    1d90:	00000106 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d94:	0005883a 	mov	r2,zero
};
    1d98:	e037883a 	mov	sp,fp
    1d9c:	dfc00117 	ldw	ra,4(sp)
    1da0:	df000017 	ldw	fp,0(sp)
    1da4:	dec00204 	addi	sp,sp,8
    1da8:	f800283a 	ret

00001dac <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1dac:	defff804 	addi	sp,sp,-32
    1db0:	dfc00715 	stw	ra,28(sp)
    1db4:	df000615 	stw	fp,24(sp)
    1db8:	df000604 	addi	fp,sp,24
    1dbc:	e13ffb15 	stw	r4,-20(fp)
    1dc0:	3009883a 	mov	r4,r6
    1dc4:	3807883a 	mov	r3,r7
    1dc8:	e0800217 	ldw	r2,8(fp)
    1dcc:	e17ffc05 	stb	r5,-16(fp)
    1dd0:	e13ffd05 	stb	r4,-12(fp)
    1dd4:	e0fffe05 	stb	r3,-8(fp)
    1dd8:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1ddc:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1de0:	e0bffc03 	ldbu	r2,-16(fp)
    1de4:	e0fffb17 	ldw	r3,-20(fp)
    1de8:	10800784 	addi	r2,r2,30
    1dec:	1085883a 	add	r2,r2,r2
    1df0:	1085883a 	add	r2,r2,r2
    1df4:	1885883a 	add	r2,r3,r2
    1df8:	10800017 	ldw	r2,0(r2)
    1dfc:	10800017 	ldw	r2,0(r2)
    1e00:	10800104 	addi	r2,r2,4
    1e04:	10c00017 	ldw	r3,0(r2)
    1e08:	e0bffc03 	ldbu	r2,-16(fp)
    1e0c:	e13ffb17 	ldw	r4,-20(fp)
    1e10:	10800784 	addi	r2,r2,30
    1e14:	1085883a 	add	r2,r2,r2
    1e18:	1085883a 	add	r2,r2,r2
    1e1c:	2085883a 	add	r2,r4,r2
    1e20:	10800017 	ldw	r2,0(r2)
    1e24:	e13ffd03 	ldbu	r4,-12(fp)
    1e28:	e17ffe03 	ldbu	r5,-8(fp)
    1e2c:	e1bfff03 	ldbu	r6,-4(fp)
    1e30:	300f883a 	mov	r7,r6
    1e34:	280d883a 	mov	r6,r5
    1e38:	200b883a 	mov	r5,r4
    1e3c:	1009883a 	mov	r4,r2
    1e40:	183ee83a 	callr	r3
    1e44:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e48:	e0bffa43 	ldbu	r2,-23(fp)
    1e4c:	10803818 	cmpnei	r2,r2,224
    1e50:	10001f1e 	bne	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e54:	e0bffd03 	ldbu	r2,-12(fp)
    1e58:	1000071e 	bne	r2,zero,1e78 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e5c:	01800044 	movi	r6,1
    1e60:	01403a04 	movi	r5,232
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e6c:	01001984 	movi	r4,102
    1e70:	00006840 	call	684 <_Z5delaym>
    1e74:	00002606 	br	1f10 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e78:	e0bffd03 	ldbu	r2,-12(fp)
    1e7c:	e0fffb17 	ldw	r3,-20(fp)
    1e80:	10800784 	addi	r2,r2,30
    1e84:	1085883a 	add	r2,r2,r2
    1e88:	1085883a 	add	r2,r2,r2
    1e8c:	1885883a 	add	r2,r3,r2
    1e90:	10800017 	ldw	r2,0(r2)
    1e94:	10800017 	ldw	r2,0(r2)
    1e98:	10800504 	addi	r2,r2,20
    1e9c:	10c00017 	ldw	r3,0(r2)
    1ea0:	e0bffd03 	ldbu	r2,-12(fp)
    1ea4:	e13ffb17 	ldw	r4,-20(fp)
    1ea8:	10800784 	addi	r2,r2,30
    1eac:	1085883a 	add	r2,r2,r2
    1eb0:	1085883a 	add	r2,r2,r2
    1eb4:	2085883a 	add	r2,r4,r2
    1eb8:	10800017 	ldw	r2,0(r2)
    1ebc:	e13ffe03 	ldbu	r4,-8(fp)
    1ec0:	200b883a 	mov	r5,r4
    1ec4:	1009883a 	mov	r4,r2
    1ec8:	183ee83a 	callr	r3
    1ecc:	00001006 	br	1f10 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1ed0:	e0bffa43 	ldbu	r2,-23(fp)
    1ed4:	10800358 	cmpnei	r2,r2,13
    1ed8:	1000091e 	bne	r2,zero,1f00 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1edc:	e0bffa03 	ldbu	r2,-24(fp)
    1ee0:	108000e8 	cmpgeui	r2,r2,3
    1ee4:	1000061e 	bne	r2,zero,1f00 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ee8:	01001904 	movi	r4,100
    1eec:	00006840 	call	684 <_Z5delaym>
                retries++;
    1ef0:	e0bffa03 	ldbu	r2,-24(fp)
    1ef4:	10800044 	addi	r2,r2,1
    1ef8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1efc:	003fb806 	br	1de0 <__alt_data_end+0xfc001de0>
        } else if(rcode)
    1f00:	e0bffa43 	ldbu	r2,-23(fp)
    1f04:	10000226 	beq	r2,zero,1f10 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1f08:	e0bffa43 	ldbu	r2,-23(fp)
    1f0c:	00004606 	br	2028 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1f10:	e0bffc03 	ldbu	r2,-16(fp)
    1f14:	e0fffb17 	ldw	r3,-20(fp)
    1f18:	10800784 	addi	r2,r2,30
    1f1c:	1085883a 	add	r2,r2,r2
    1f20:	1085883a 	add	r2,r2,r2
    1f24:	1885883a 	add	r2,r3,r2
    1f28:	10800017 	ldw	r2,0(r2)
    1f2c:	10800017 	ldw	r2,0(r2)
    1f30:	10c00017 	ldw	r3,0(r2)
    1f34:	e0bffc03 	ldbu	r2,-16(fp)
    1f38:	e13ffb17 	ldw	r4,-20(fp)
    1f3c:	10800784 	addi	r2,r2,30
    1f40:	1085883a 	add	r2,r2,r2
    1f44:	1085883a 	add	r2,r2,r2
    1f48:	2085883a 	add	r2,r4,r2
    1f4c:	10800017 	ldw	r2,0(r2)
    1f50:	e13ffd03 	ldbu	r4,-12(fp)
    1f54:	e17ffe03 	ldbu	r5,-8(fp)
    1f58:	e1bfff03 	ldbu	r6,-4(fp)
    1f5c:	300f883a 	mov	r7,r6
    1f60:	280d883a 	mov	r6,r5
    1f64:	200b883a 	mov	r5,r4
    1f68:	1009883a 	mov	r4,r2
    1f6c:	183ee83a 	callr	r3
    1f70:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f74:	e0bffa43 	ldbu	r2,-23(fp)
    1f78:	10800358 	cmpnei	r2,r2,13
    1f7c:	1000091e 	bne	r2,zero,1fa4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f80:	e0bffa03 	ldbu	r2,-24(fp)
    1f84:	108000e8 	cmpgeui	r2,r2,3
    1f88:	1000061e 	bne	r2,zero,1fa4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f8c:	01001904 	movi	r4,100
    1f90:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f94:	e0bffa03 	ldbu	r2,-24(fp)
    1f98:	10800044 	addi	r2,r2,1
    1f9c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1fa0:	003f8f06 	br	1de0 <__alt_data_end+0xfc001de0>
        }
        if(rcode) {
    1fa4:	e0bffa43 	ldbu	r2,-23(fp)
    1fa8:	10001e26 	beq	r2,zero,2024 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1fac:	e0bffd03 	ldbu	r2,-12(fp)
    1fb0:	1000071e 	bne	r2,zero,1fd0 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1fb4:	01800044 	movi	r6,1
    1fb8:	01403a04 	movi	r5,232
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1fc4:	01001984 	movi	r4,102
    1fc8:	00006840 	call	684 <_Z5delaym>
    1fcc:	00001506 	br	2024 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1fd0:	e0bffd03 	ldbu	r2,-12(fp)
    1fd4:	e0fffb17 	ldw	r3,-20(fp)
    1fd8:	10800784 	addi	r2,r2,30
    1fdc:	1085883a 	add	r2,r2,r2
    1fe0:	1085883a 	add	r2,r2,r2
    1fe4:	1885883a 	add	r2,r3,r2
    1fe8:	10800017 	ldw	r2,0(r2)
    1fec:	10800017 	ldw	r2,0(r2)
    1ff0:	10800504 	addi	r2,r2,20
    1ff4:	10c00017 	ldw	r3,0(r2)
    1ff8:	e0bffd03 	ldbu	r2,-12(fp)
    1ffc:	e13ffb17 	ldw	r4,-20(fp)
    2000:	10800784 	addi	r2,r2,30
    2004:	1085883a 	add	r2,r2,r2
    2008:	1085883a 	add	r2,r2,r2
    200c:	2085883a 	add	r2,r4,r2
    2010:	10800017 	ldw	r2,0(r2)
    2014:	e13ffe03 	ldbu	r4,-8(fp)
    2018:	200b883a 	mov	r5,r4
    201c:	1009883a 	mov	r4,r2
    2020:	183ee83a 	callr	r3
                }
        }
        return rcode;
    2024:	e0bffa43 	ldbu	r2,-23(fp)
}
    2028:	e037883a 	mov	sp,fp
    202c:	dfc00117 	ldw	ra,4(sp)
    2030:	df000017 	ldw	fp,0(sp)
    2034:	dec00204 	addi	sp,sp,8
    2038:	f800283a 	ret

0000203c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    203c:	deffed04 	addi	sp,sp,-76
    2040:	dfc01215 	stw	ra,72(sp)
    2044:	df001115 	stw	fp,68(sp)
    2048:	df001104 	addi	fp,sp,68
    204c:	e13ffc15 	stw	r4,-16(fp)
    2050:	2809883a 	mov	r4,r5
    2054:	3007883a 	mov	r3,r6
    2058:	3805883a 	mov	r2,r7
    205c:	e13ffd05 	stb	r4,-12(fp)
    2060:	e0fffe05 	stb	r3,-8(fp)
    2064:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        printf("Configuring: parent = %i, port = %i\r\n", parent, port);
    2068:	e0bffd03 	ldbu	r2,-12(fp)
    206c:	e0fffe03 	ldbu	r3,-8(fp)
    2070:	180d883a 	mov	r6,r3
    2074:	100b883a 	mov	r5,r2
    2078:	010000b4 	movhi	r4,2
    207c:	210e7a04 	addi	r4,r4,14824
    2080:	000ed000 	call	ed00 <printf>
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2084:	e03ff005 	stb	zero,-64(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    2088:	e0bff684 	addi	r2,fp,-38
    208c:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2090:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2094:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    2098:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    209c:	00800204 	movi	r2,8
    20a0:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    20a4:	e0fffb83 	ldbu	r3,-18(fp)
    20a8:	00bfff84 	movi	r2,-2
    20ac:	1884703a 	and	r2,r3,r2
    20b0:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    20b4:	e0fffb83 	ldbu	r3,-18(fp)
    20b8:	00bfff44 	movi	r2,-3
    20bc:	1884703a 	and	r2,r3,r2
    20c0:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    20c4:	e0bffb83 	ldbu	r2,-18(fp)
    20c8:	108000cc 	andi	r2,r2,3
    20cc:	10800f14 	ori	r2,r2,60
    20d0:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    20d4:	e13ffc17 	ldw	r4,-16(fp)
    20d8:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    20dc:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    20e0:	e0bff417 	ldw	r2,-48(fp)
    20e4:	10800017 	ldw	r2,0(r2)
    20e8:	10800017 	ldw	r2,0(r2)
    20ec:	000b883a 	mov	r5,zero
    20f0:	e13ff417 	ldw	r4,-48(fp)
    20f4:	103ee83a 	callr	r2
    20f8:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20fc:	e0bff217 	ldw	r2,-56(fp)
    2100:	1000051e 	bne	r2,zero,2118 <_ZN3USB11ConfiguringEhhb+0xdc>
                printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
    2104:	010000b4 	movhi	r4,2
    2108:	210e8404 	addi	r4,r4,14864
    210c:	000ee1c0 	call	ee1c <puts>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    2110:	00bff584 	movi	r2,-42
    2114:	00007706 	br	22f4 <_ZN3USB11ConfiguringEhhb+0x2b8>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    2118:	e0bff217 	ldw	r2,-56(fp)
    211c:	10c00003 	ldbu	r3,0(r2)
    2120:	11000043 	ldbu	r4,1(r2)
    2124:	2008923a 	slli	r4,r4,8
    2128:	20c6b03a 	or	r3,r4,r3
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008943a 	slli	r4,r4,16
    2134:	20c6b03a 	or	r3,r4,r3
    2138:	108000c3 	ldbu	r2,3(r2)
    213c:	1004963a 	slli	r2,r2,24
    2140:	10c4b03a 	or	r2,r2,r3
    2144:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    2148:	e0bff217 	ldw	r2,-56(fp)
    214c:	e0fffb04 	addi	r3,fp,-20
    2150:	19803fcc 	andi	r6,r3,255
    2154:	11000003 	ldbu	r4,0(r2)
    2158:	2008703a 	and	r4,r4,zero
    215c:	200b883a 	mov	r5,r4
    2160:	3009883a 	mov	r4,r6
    2164:	2908b03a 	or	r4,r5,r4
    2168:	11000005 	stb	r4,0(r2)
    216c:	1808d23a 	srli	r4,r3,8
    2170:	21803fcc 	andi	r6,r4,255
    2174:	11000043 	ldbu	r4,1(r2)
    2178:	2008703a 	and	r4,r4,zero
    217c:	200b883a 	mov	r5,r4
    2180:	3009883a 	mov	r4,r6
    2184:	2908b03a 	or	r4,r5,r4
    2188:	11000045 	stb	r4,1(r2)
    218c:	1808d43a 	srli	r4,r3,16
    2190:	21803fcc 	andi	r6,r4,255
    2194:	11000083 	ldbu	r4,2(r2)
    2198:	2008703a 	and	r4,r4,zero
    219c:	200b883a 	mov	r5,r4
    21a0:	3009883a 	mov	r4,r6
    21a4:	2908b03a 	or	r4,r5,r4
    21a8:	11000085 	stb	r4,2(r2)
    21ac:	180ad63a 	srli	r5,r3,24
    21b0:	10c000c3 	ldbu	r3,3(r2)
    21b4:	1806703a 	and	r3,r3,zero
    21b8:	1809883a 	mov	r4,r3
    21bc:	2807883a 	mov	r3,r5
    21c0:	20c6b03a 	or	r3,r4,r3
    21c4:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    21c8:	e0bff217 	ldw	r2,-56(fp)
    21cc:	e0ffff03 	ldbu	r3,-4(fp)
    21d0:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    21d4:	00800484 	movi	r2,18
    21d8:	10ffffcc 	andi	r3,r2,65535
    21dc:	e0bff684 	addi	r2,fp,-38
    21e0:	d8800015 	stw	r2,0(sp)
    21e4:	180f883a 	mov	r7,r3
    21e8:	000d883a 	mov	r6,zero
    21ec:	000b883a 	mov	r5,zero
    21f0:	e13ffc17 	ldw	r4,-16(fp)
    21f4:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    21f8:	e0bff005 	stb	r2,-64(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    21fc:	e0bff217 	ldw	r2,-56(fp)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	19403fcc 	andi	r5,r3,255
    2208:	10c00003 	ldbu	r3,0(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c00005 	stb	r3,0(r2)
    2220:	e0fff317 	ldw	r3,-52(fp)
    2224:	1806d23a 	srli	r3,r3,8
    2228:	19403fcc 	andi	r5,r3,255
    222c:	10c00043 	ldbu	r3,1(r2)
    2230:	1806703a 	and	r3,r3,zero
    2234:	1809883a 	mov	r4,r3
    2238:	2807883a 	mov	r3,r5
    223c:	20c6b03a 	or	r3,r4,r3
    2240:	10c00045 	stb	r3,1(r2)
    2244:	e0fff317 	ldw	r3,-52(fp)
    2248:	1806d43a 	srli	r3,r3,16
    224c:	19403fcc 	andi	r5,r3,255
    2250:	10c00083 	ldbu	r3,2(r2)
    2254:	1806703a 	and	r3,r3,zero
    2258:	1809883a 	mov	r4,r3
    225c:	2807883a 	mov	r3,r5
    2260:	20c6b03a 	or	r3,r4,r3
    2264:	10c00085 	stb	r3,2(r2)
    2268:	e0fff317 	ldw	r3,-52(fp)
    226c:	180ad63a 	srli	r5,r3,24
    2270:	10c000c3 	ldbu	r3,3(r2)
    2274:	1806703a 	and	r3,r3,zero
    2278:	1809883a 	mov	r4,r3
    227c:	2807883a 	mov	r3,r5
    2280:	20c6b03a 	or	r3,r4,r3
    2284:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2288:	e0bff003 	ldbu	r2,-64(fp)
    228c:	10000526 	beq	r2,zero,22a4 <_ZN3USB11ConfiguringEhhb+0x268>
                printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
    2290:	010000b4 	movhi	r4,2
    2294:	210e9204 	addi	r4,r4,14920
    2298:	000ee1c0 	call	ee1c <puts>
                return rcode;
    229c:	e0bff003 	ldbu	r2,-64(fp)
    22a0:	00001406 	br	22f4 <_ZN3USB11ConfiguringEhhb+0x2b8>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    22a4:	e0bff117 	ldw	r2,-60(fp)
    22a8:	10c00203 	ldbu	r3,8(r2)
    22ac:	10800243 	ldbu	r2,9(r2)
    22b0:	1004923a 	slli	r2,r2,8
    22b4:	10c4b03a 	or	r2,r2,r3
    22b8:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    22bc:	e0bff117 	ldw	r2,-60(fp)
    22c0:	10c00283 	ldbu	r3,10(r2)
    22c4:	108002c3 	ldbu	r2,11(r2)
    22c8:	1004923a 	slli	r2,r2,8
    22cc:	10c4b03a 	or	r2,r2,r3
    22d0:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    22d4:	e0bff117 	ldw	r2,-60(fp)
    22d8:	10800103 	ldbu	r2,4(r2)
    22dc:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    22e0:	e0bff117 	ldw	r2,-60(fp)
    22e4:	10800143 	ldbu	r2,5(r2)
    22e8:	e0bff645 	stb	r2,-39(fp)

        rcode = 0;
    22ec:	e03ff005 	stb	zero,-64(fp)
        return rcode;
    22f0:	e0bff003 	ldbu	r2,-64(fp)
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);

        return rcode;
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	dfc00117 	ldw	ra,4(sp)
    22fc:	df000017 	ldw	fp,0(sp)
    2300:	dec00204 	addi	sp,sp,8
    2304:	f800283a 	ret

00002308 <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    2308:	defffb04 	addi	sp,sp,-20
    230c:	dfc00415 	stw	ra,16(sp)
    2310:	df000315 	stw	fp,12(sp)
    2314:	df000304 	addi	fp,sp,12
    2318:	e13ffe15 	stw	r4,-8(fp)
    231c:	2805883a 	mov	r2,r5
    2320:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2324:	e0bfff03 	ldbu	r2,-4(fp)
    2328:	1000021e 	bne	r2,zero,2334 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    232c:	0005883a 	mov	r2,zero
    2330:	00003e06 	br	242c <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2334:	e03ffd05 	stb	zero,-12(fp)
    2338:	e0bffd03 	ldbu	r2,-12(fp)
    233c:	10800428 	cmpgeui	r2,r2,16
    2340:	1000391e 	bne	r2,zero,2428 <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2344:	e0bffd03 	ldbu	r2,-12(fp)
    2348:	e0fffe17 	ldw	r3,-8(fp)
    234c:	10800784 	addi	r2,r2,30
    2350:	1085883a 	add	r2,r2,r2
    2354:	1085883a 	add	r2,r2,r2
    2358:	1885883a 	add	r2,r3,r2
    235c:	10800017 	ldw	r2,0(r2)
    2360:	10002c26 	beq	r2,zero,2414 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2364:	e0bffd03 	ldbu	r2,-12(fp)
    2368:	e0fffe17 	ldw	r3,-8(fp)
    236c:	10800784 	addi	r2,r2,30
    2370:	1085883a 	add	r2,r2,r2
    2374:	1085883a 	add	r2,r2,r2
    2378:	1885883a 	add	r2,r3,r2
    237c:	10800017 	ldw	r2,0(r2)
    2380:	10800017 	ldw	r2,0(r2)
    2384:	10800404 	addi	r2,r2,16
    2388:	10c00017 	ldw	r3,0(r2)
    238c:	e0bffd03 	ldbu	r2,-12(fp)
    2390:	e13ffe17 	ldw	r4,-8(fp)
    2394:	10800784 	addi	r2,r2,30
    2398:	1085883a 	add	r2,r2,r2
    239c:	1085883a 	add	r2,r2,r2
    23a0:	2085883a 	add	r2,r4,r2
    23a4:	10800017 	ldw	r2,0(r2)
    23a8:	1009883a 	mov	r4,r2
    23ac:	183ee83a 	callr	r3
    23b0:	10c03fcc 	andi	r3,r2,255
    23b4:	e0bfff03 	ldbu	r2,-4(fp)
    23b8:	1885003a 	cmpeq	r2,r3,r2
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	10001526 	beq	r2,zero,2418 <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    23c4:	e0bffd03 	ldbu	r2,-12(fp)
    23c8:	e0fffe17 	ldw	r3,-8(fp)
    23cc:	10800784 	addi	r2,r2,30
    23d0:	1085883a 	add	r2,r2,r2
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1885883a 	add	r2,r3,r2
    23dc:	10800017 	ldw	r2,0(r2)
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10800204 	addi	r2,r2,8
    23e8:	10c00017 	ldw	r3,0(r2)
    23ec:	e0bffd03 	ldbu	r2,-12(fp)
    23f0:	e13ffe17 	ldw	r4,-8(fp)
    23f4:	10800784 	addi	r2,r2,30
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	1085883a 	add	r2,r2,r2
    2400:	2085883a 	add	r2,r4,r2
    2404:	10800017 	ldw	r2,0(r2)
    2408:	1009883a 	mov	r4,r2
    240c:	183ee83a 	callr	r3
    2410:	00000606 	br	242c <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    2414:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2418:	e0bffd03 	ldbu	r2,-12(fp)
    241c:	10800044 	addi	r2,r2,1
    2420:	e0bffd05 	stb	r2,-12(fp)
    2424:	003fc406 	br	2338 <__alt_data_end+0xfc002338>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    2428:	0005883a 	mov	r2,zero
        printf("END\n");
}
    242c:	e037883a 	mov	sp,fp
    2430:	dfc00117 	ldw	ra,4(sp)
    2434:	df000017 	ldw	fp,0(sp)
    2438:	dec00204 	addi	sp,sp,8
    243c:	f800283a 	ret

00002440 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2440:	defff204 	addi	sp,sp,-56
    2444:	dfc00d15 	stw	ra,52(sp)
    2448:	df000c15 	stw	fp,48(sp)
    244c:	df000c04 	addi	fp,sp,48
    2450:	e13ffc15 	stw	r4,-16(fp)
    2454:	2809883a 	mov	r4,r5
    2458:	3007883a 	mov	r3,r6
    245c:	3805883a 	mov	r2,r7
    2460:	e13ffd05 	stb	r4,-12(fp)
    2464:	e0fffe05 	stb	r3,-8(fp)
    2468:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    246c:	e17ffd03 	ldbu	r5,-12(fp)
    2470:	e1bffe03 	ldbu	r6,-8(fp)
    2474:	e0bfff0b 	ldhu	r2,-4(fp)
    2478:	e0ffff0b 	ldhu	r3,-4(fp)
    247c:	d8000715 	stw	zero,28(sp)
    2480:	e1000217 	ldw	r4,8(fp)
    2484:	d9000615 	stw	r4,24(sp)
    2488:	d8c00515 	stw	r3,20(sp)
    248c:	d8800415 	stw	r2,16(sp)
    2490:	d8000315 	stw	zero,12(sp)
    2494:	00800044 	movi	r2,1
    2498:	d8800215 	stw	r2,8(sp)
    249c:	d8000115 	stw	zero,4(sp)
    24a0:	00800184 	movi	r2,6
    24a4:	d8800015 	stw	r2,0(sp)
    24a8:	01c02004 	movi	r7,128
    24ac:	e13ffc17 	ldw	r4,-16(fp)
    24b0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    24b4:	e037883a 	mov	sp,fp
    24b8:	dfc00117 	ldw	ra,4(sp)
    24bc:	df000017 	ldw	fp,0(sp)
    24c0:	dec00204 	addi	sp,sp,8
    24c4:	f800283a 	ret

000024c8 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    24c8:	defff104 	addi	sp,sp,-60
    24cc:	dfc00e15 	stw	ra,56(sp)
    24d0:	df000d15 	stw	fp,52(sp)
    24d4:	df000d04 	addi	fp,sp,52
    24d8:	e13ffb15 	stw	r4,-20(fp)
    24dc:	3009883a 	mov	r4,r6
    24e0:	3807883a 	mov	r3,r7
    24e4:	e0800217 	ldw	r2,8(fp)
    24e8:	e17ffc05 	stb	r5,-16(fp)
    24ec:	e13ffd05 	stb	r4,-12(fp)
    24f0:	e0fffe0d 	sth	r3,-8(fp)
    24f4:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    24f8:	e23ffc03 	ldbu	r8,-16(fp)
    24fc:	e1bffd03 	ldbu	r6,-12(fp)
    2500:	e0bfff03 	ldbu	r2,-4(fp)
    2504:	e0fffe0b 	ldhu	r3,-8(fp)
    2508:	e13ffe0b 	ldhu	r4,-8(fp)
    250c:	d8000715 	stw	zero,28(sp)
    2510:	e1400317 	ldw	r5,12(fp)
    2514:	d9400615 	stw	r5,24(sp)
    2518:	d9000515 	stw	r4,20(sp)
    251c:	d8c00415 	stw	r3,16(sp)
    2520:	d8000315 	stw	zero,12(sp)
    2524:	00c00084 	movi	r3,2
    2528:	d8c00215 	stw	r3,8(sp)
    252c:	d8800115 	stw	r2,4(sp)
    2530:	00800184 	movi	r2,6
    2534:	d8800015 	stw	r2,0(sp)
    2538:	01c02004 	movi	r7,128
    253c:	400b883a 	mov	r5,r8
    2540:	e13ffb17 	ldw	r4,-20(fp)
    2544:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2548:	e037883a 	mov	sp,fp
    254c:	dfc00117 	ldw	ra,4(sp)
    2550:	df000017 	ldw	fp,0(sp)
    2554:	dec00204 	addi	sp,sp,8
    2558:	f800283a 	ret

0000255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    255c:	deffdf04 	addi	sp,sp,-132
    2560:	dfc02015 	stw	ra,128(sp)
    2564:	df001f15 	stw	fp,124(sp)
    2568:	df001f04 	addi	fp,sp,124
    256c:	e13ffc15 	stw	r4,-16(fp)
    2570:	2809883a 	mov	r4,r5
    2574:	3007883a 	mov	r3,r6
    2578:	3805883a 	mov	r2,r7
    257c:	e13ffd05 	stb	r4,-12(fp)
    2580:	e0fffe05 	stb	r3,-8(fp)
    2584:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    2588:	00801004 	movi	r2,64
    258c:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    2590:	e0bfec04 	addi	r2,fp,-80
    2594:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    2598:	e13ffd03 	ldbu	r4,-12(fp)
    259c:	e17ffe03 	ldbu	r5,-8(fp)
    25a0:	e0bfff03 	ldbu	r2,-4(fp)
    25a4:	e0ffec04 	addi	r3,fp,-80
    25a8:	d8c00115 	stw	r3,4(sp)
    25ac:	d8800015 	stw	r2,0(sp)
    25b0:	01c00244 	movi	r7,9
    25b4:	280d883a 	mov	r6,r5
    25b8:	200b883a 	mov	r5,r4
    25bc:	e13ffc17 	ldw	r4,-16(fp)
    25c0:	00024c80 	call	24c8 <_ZN3USB12getConfDescrEhhthPh>
    25c4:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    25c8:	e0bfeb03 	ldbu	r2,-84(fp)
    25cc:	10000226 	beq	r2,zero,25d8 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    25d0:	e0bfeb03 	ldbu	r2,-84(fp)
    25d4:	00001a06 	br	2640 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    25d8:	e0bfea17 	ldw	r2,-88(fp)
    25dc:	10c00083 	ldbu	r3,2(r2)
    25e0:	108000c3 	ldbu	r2,3(r2)
    25e4:	1004923a 	slli	r2,r2,8
    25e8:	10c4b03a 	or	r2,r2,r3
    25ec:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    25f0:	e17ffd03 	ldbu	r5,-12(fp)
    25f4:	e1bffe03 	ldbu	r6,-8(fp)
    25f8:	e0bfff03 	ldbu	r2,-4(fp)
    25fc:	e0ffeb8b 	ldhu	r3,-82(fp)
    2600:	e1000217 	ldw	r4,8(fp)
    2604:	d9000715 	stw	r4,28(sp)
    2608:	e13fec04 	addi	r4,fp,-80
    260c:	d9000615 	stw	r4,24(sp)
    2610:	01001004 	movi	r4,64
    2614:	d9000515 	stw	r4,20(sp)
    2618:	d8c00415 	stw	r3,16(sp)
    261c:	d8000315 	stw	zero,12(sp)
    2620:	00c00084 	movi	r3,2
    2624:	d8c00215 	stw	r3,8(sp)
    2628:	d8800115 	stw	r2,4(sp)
    262c:	00800184 	movi	r2,6
    2630:	d8800015 	stw	r2,0(sp)
    2634:	01c02004 	movi	r7,128
    2638:	e13ffc17 	ldw	r4,-16(fp)
    263c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2640:	e037883a 	mov	sp,fp
    2644:	dfc00117 	ldw	ra,4(sp)
    2648:	df000017 	ldw	fp,0(sp)
    264c:	dec00204 	addi	sp,sp,8
    2650:	f800283a 	ret

00002654 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2654:	defff004 	addi	sp,sp,-64
    2658:	dfc00f15 	stw	ra,60(sp)
    265c:	df000e15 	stw	fp,56(sp)
    2660:	df000e04 	addi	fp,sp,56
    2664:	e13ffa15 	stw	r4,-24(fp)
    2668:	2811883a 	mov	r8,r5
    266c:	300b883a 	mov	r5,r6
    2670:	3809883a 	mov	r4,r7
    2674:	e0c00217 	ldw	r3,8(fp)
    2678:	e0800317 	ldw	r2,12(fp)
    267c:	e23ffb05 	stb	r8,-20(fp)
    2680:	e17ffc05 	stb	r5,-16(fp)
    2684:	e13ffd0d 	sth	r4,-12(fp)
    2688:	e0fffe05 	stb	r3,-8(fp)
    268c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2690:	e23ffb03 	ldbu	r8,-20(fp)
    2694:	e27ffc03 	ldbu	r9,-16(fp)
    2698:	e0bffe03 	ldbu	r2,-8(fp)
    269c:	e0ffff0b 	ldhu	r3,-4(fp)
    26a0:	e13ffd0b 	ldhu	r4,-12(fp)
    26a4:	e17ffd0b 	ldhu	r5,-12(fp)
    26a8:	d8000715 	stw	zero,28(sp)
    26ac:	e1800417 	ldw	r6,16(fp)
    26b0:	d9800615 	stw	r6,24(sp)
    26b4:	d9400515 	stw	r5,20(sp)
    26b8:	d9000415 	stw	r4,16(sp)
    26bc:	d8c00315 	stw	r3,12(sp)
    26c0:	00c000c4 	movi	r3,3
    26c4:	d8c00215 	stw	r3,8(sp)
    26c8:	d8800115 	stw	r2,4(sp)
    26cc:	00800184 	movi	r2,6
    26d0:	d8800015 	stw	r2,0(sp)
    26d4:	01c02004 	movi	r7,128
    26d8:	480d883a 	mov	r6,r9
    26dc:	400b883a 	mov	r5,r8
    26e0:	e13ffa17 	ldw	r4,-24(fp)
    26e4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    26e8:	e037883a 	mov	sp,fp
    26ec:	dfc00117 	ldw	ra,4(sp)
    26f0:	df000017 	ldw	fp,0(sp)
    26f4:	dec00204 	addi	sp,sp,8
    26f8:	f800283a 	ret

000026fc <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    26fc:	defff104 	addi	sp,sp,-60
    2700:	dfc00e15 	stw	ra,56(sp)
    2704:	df000d15 	stw	fp,52(sp)
    2708:	df000d04 	addi	fp,sp,52
    270c:	e13ffc15 	stw	r4,-16(fp)
    2710:	2809883a 	mov	r4,r5
    2714:	3007883a 	mov	r3,r6
    2718:	3805883a 	mov	r2,r7
    271c:	e13ffd05 	stb	r4,-12(fp)
    2720:	e0fffe05 	stb	r3,-8(fp)
    2724:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2728:	e0fffd03 	ldbu	r3,-12(fp)
    272c:	e13ffe03 	ldbu	r4,-8(fp)
    2730:	e0bfff03 	ldbu	r2,-4(fp)
    2734:	d8000715 	stw	zero,28(sp)
    2738:	d8000615 	stw	zero,24(sp)
    273c:	d8000515 	stw	zero,20(sp)
    2740:	d8000415 	stw	zero,16(sp)
    2744:	d8000315 	stw	zero,12(sp)
    2748:	d8000215 	stw	zero,8(sp)
    274c:	d8800115 	stw	r2,4(sp)
    2750:	00800144 	movi	r2,5
    2754:	d8800015 	stw	r2,0(sp)
    2758:	000f883a 	mov	r7,zero
    275c:	200d883a 	mov	r6,r4
    2760:	180b883a 	mov	r5,r3
    2764:	e13ffc17 	ldw	r4,-16(fp)
    2768:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    276c:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2770:	01004b04 	movi	r4,300
    2774:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2778:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    277c:	e037883a 	mov	sp,fp
    2780:	dfc00117 	ldw	ra,4(sp)
    2784:	df000017 	ldw	fp,0(sp)
    2788:	dec00204 	addi	sp,sp,8
    278c:	f800283a 	ret

00002790 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2790:	defff204 	addi	sp,sp,-56
    2794:	dfc00d15 	stw	ra,52(sp)
    2798:	df000c15 	stw	fp,48(sp)
    279c:	df000c04 	addi	fp,sp,48
    27a0:	e13ffc15 	stw	r4,-16(fp)
    27a4:	2809883a 	mov	r4,r5
    27a8:	3007883a 	mov	r3,r6
    27ac:	3805883a 	mov	r2,r7
    27b0:	e13ffd05 	stb	r4,-12(fp)
    27b4:	e0fffe05 	stb	r3,-8(fp)
    27b8:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    27bc:	e0fffd03 	ldbu	r3,-12(fp)
    27c0:	e13ffe03 	ldbu	r4,-8(fp)
    27c4:	e0bfff03 	ldbu	r2,-4(fp)
    27c8:	d8000715 	stw	zero,28(sp)
    27cc:	d8000615 	stw	zero,24(sp)
    27d0:	d8000515 	stw	zero,20(sp)
    27d4:	d8000415 	stw	zero,16(sp)
    27d8:	d8000315 	stw	zero,12(sp)
    27dc:	d8000215 	stw	zero,8(sp)
    27e0:	d8800115 	stw	r2,4(sp)
    27e4:	00800244 	movi	r2,9
    27e8:	d8800015 	stw	r2,0(sp)
    27ec:	000f883a 	mov	r7,zero
    27f0:	200d883a 	mov	r6,r4
    27f4:	180b883a 	mov	r5,r3
    27f8:	e13ffc17 	ldw	r4,-16(fp)
    27fc:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2800:	e037883a 	mov	sp,fp
    2804:	dfc00117 	ldw	ra,4(sp)
    2808:	df000017 	ldw	fp,0(sp)
    280c:	dec00204 	addi	sp,sp,8
    2810:	f800283a 	ret

00002814 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2814:	defffe04 	addi	sp,sp,-8
    2818:	df000115 	stw	fp,4(sp)
    281c:	df000104 	addi	fp,sp,4
    2820:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2824:	e0bfff17 	ldw	r2,-4(fp)
        };
    2828:	e037883a 	mov	sp,fp
    282c:	df000017 	ldw	fp,0(sp)
    2830:	dec00104 	addi	sp,sp,4
    2834:	f800283a 	ret

00002838 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2838:	defffe04 	addi	sp,sp,-8
    283c:	df000115 	stw	fp,4(sp)
    2840:	df000104 	addi	fp,sp,4
    2844:	e13fff15 	stw	r4,-4(fp)
    2848:	008000b4 	movhi	r2,2
    284c:	108ea604 	addi	r2,r2,15000
    2850:	e0ffff17 	ldw	r3,-4(fp)
    2854:	18800015 	stw	r2,0(r3)
    2858:	0001883a 	nop
    285c:	e037883a 	mov	sp,fp
    2860:	df000017 	ldw	fp,0(sp)
    2864:	dec00104 	addi	sp,sp,4
    2868:	f800283a 	ret

0000286c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    286c:	defffd04 	addi	sp,sp,-12
    2870:	dfc00215 	stw	ra,8(sp)
    2874:	df000115 	stw	fp,4(sp)
    2878:	df000104 	addi	fp,sp,4
    287c:	e13fff15 	stw	r4,-4(fp)
    2880:	e0bfff17 	ldw	r2,-4(fp)
    2884:	1009883a 	mov	r4,r2
    2888:	00028380 	call	2838 <_ZN11AddressPoolC1Ev>
    288c:	008000b4 	movhi	r2,2
    2890:	108ea104 	addi	r2,r2,14980
    2894:	e0ffff17 	ldw	r3,-4(fp)
    2898:	18800015 	stw	r2,0(r3)
    289c:	e0bfff17 	ldw	r2,-4(fp)
    28a0:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    28a4:	000b883a 	mov	r5,zero
    28a8:	e13fff17 	ldw	r4,-4(fp)
    28ac:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    28b0:	e0bfff17 	ldw	r2,-4(fp)
    28b4:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    28b8:	e0bfff17 	ldw	r2,-4(fp)
    28bc:	10c00104 	addi	r3,r2,4
    28c0:	e0bfff17 	ldw	r2,-4(fp)
    28c4:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    28c8:	e0bfff17 	ldw	r2,-4(fp)
    28cc:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    28d0:	e0bfff17 	ldw	r2,-4(fp)
    28d4:	00c00204 	movi	r3,8
    28d8:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    28dc:	e0bfff17 	ldw	r2,-4(fp)
    28e0:	11000183 	ldbu	r4,6(r2)
    28e4:	00ffff84 	movi	r3,-2
    28e8:	20c6703a 	and	r3,r4,r3
    28ec:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    28f0:	e0bfff17 	ldw	r2,-4(fp)
    28f4:	11000183 	ldbu	r4,6(r2)
    28f8:	00ffff44 	movi	r3,-3
    28fc:	20c6703a 	and	r3,r4,r3
    2900:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2904:	e0bfff17 	ldw	r2,-4(fp)
    2908:	10c00183 	ldbu	r3,6(r2)
    290c:	18c000cc 	andi	r3,r3,3
    2910:	18c00f14 	ori	r3,r3,60
    2914:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2918:	e13fff17 	ldw	r4,-4(fp)
    291c:	0002e000 	call	2e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2920:	0001883a 	nop
    2924:	e037883a 	mov	sp,fp
    2928:	dfc00117 	ldw	ra,4(sp)
    292c:	df000017 	ldw	fp,0(sp)
    2930:	dec00204 	addi	sp,sp,8
    2934:	f800283a 	ret

00002938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2938:	defffa04 	addi	sp,sp,-24
    293c:	dfc00515 	stw	ra,20(sp)
    2940:	df000415 	stw	fp,16(sp)
    2944:	dc000315 	stw	r16,12(sp)
    2948:	df000404 	addi	fp,sp,16
    294c:	e13ffd15 	stw	r4,-12(fp)
    2950:	2805883a 	mov	r2,r5
    2954:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2958:	e0bffe03 	ldbu	r2,-8(fp)
    295c:	1000031e 	bne	r2,zero,296c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2960:	e0bffd17 	ldw	r2,-12(fp)
    2964:	10800204 	addi	r2,r2,8
    2968:	00001006 	br	29ac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    296c:	e0bffe03 	ldbu	r2,-8(fp)
    2970:	100b883a 	mov	r5,r2
    2974:	e13ffd17 	ldw	r4,-12(fp)
    2978:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    297c:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2980:	e0bffc03 	ldbu	r2,-16(fp)
    2984:	10000826 	beq	r2,zero,29a8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2988:	e0bffd17 	ldw	r2,-12(fp)
    298c:	14000204 	addi	r16,r2,8
    2990:	e0bffc03 	ldbu	r2,-16(fp)
    2994:	014001c4 	movi	r5,7
    2998:	1009883a 	mov	r4,r2
    299c:	000ccac0 	call	ccac <__mulsi3>
    29a0:	8085883a 	add	r2,r16,r2
    29a4:	00000106 	br	29ac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    29a8:	0005883a 	mov	r2,zero
        };
    29ac:	e6ffff04 	addi	sp,fp,-4
    29b0:	dfc00217 	ldw	ra,8(sp)
    29b4:	df000117 	ldw	fp,4(sp)
    29b8:	dc000017 	ldw	r16,0(sp)
    29bc:	dec00304 	addi	sp,sp,12
    29c0:	f800283a 	ret

000029c4 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    29c4:	defffd04 	addi	sp,sp,-12
    29c8:	df000215 	stw	fp,8(sp)
    29cc:	df000204 	addi	fp,sp,8
    29d0:	2005883a 	mov	r2,r4
    29d4:	e17fff15 	stw	r5,-4(fp)
    29d8:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    29dc:	0001883a 	nop
    29e0:	e037883a 	mov	sp,fp
    29e4:	df000017 	ldw	fp,0(sp)
    29e8:	dec00104 	addi	sp,sp,4
    29ec:	f800283a 	ret

000029f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    29f0:	defff804 	addi	sp,sp,-32
    29f4:	dfc00715 	stw	ra,28(sp)
    29f8:	df000615 	stw	fp,24(sp)
    29fc:	dc000515 	stw	r16,20(sp)
    2a00:	df000604 	addi	fp,sp,24
    2a04:	e13ffb15 	stw	r4,-20(fp)
    2a08:	2809883a 	mov	r4,r5
    2a0c:	3007883a 	mov	r3,r6
    2a10:	3805883a 	mov	r2,r7
    2a14:	e13ffc05 	stb	r4,-16(fp)
    2a18:	e0fffd05 	stb	r3,-12(fp)
    2a1c:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2a20:	e0bffc03 	ldbu	r2,-16(fp)
    2a24:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2a28:	e0fffa43 	ldbu	r3,-23(fp)
    2a2c:	00bfe004 	movi	r2,-128
    2a30:	1884703a 	and	r2,r3,r2
    2a34:	10803fcc 	andi	r2,r2,255
    2a38:	1000031e 	bne	r2,zero,2a48 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2a3c:	e0bffe03 	ldbu	r2,-8(fp)
    2a40:	10800230 	cmpltui	r2,r2,8
    2a44:	1000021e 	bne	r2,zero,2a50 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2a48:	0005883a 	mov	r2,zero
    2a4c:	00007a06 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2a50:	e0bffd03 	ldbu	r2,-12(fp)
    2a54:	10000726 	beq	r2,zero,2a74 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2a58:	e0bffb17 	ldw	r2,-20(fp)
    2a5c:	108001c3 	ldbu	r2,7(r2)
    2a60:	10803fcc 	andi	r2,r2,255
    2a64:	108001d8 	cmpnei	r2,r2,7
    2a68:	1000021e 	bne	r2,zero,2a74 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2a6c:	0005883a 	mov	r2,zero
    2a70:	00007106 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2a74:	000b883a 	mov	r5,zero
    2a78:	e13ffb17 	ldw	r4,-20(fp)
    2a7c:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2a80:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2a84:	e0bffa03 	ldbu	r2,-24(fp)
    2a88:	1000021e 	bne	r2,zero,2a94 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2a8c:	0005883a 	mov	r2,zero
    2a90:	00006906 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2a94:	e0bffa43 	ldbu	r2,-23(fp)
    2a98:	10803fcc 	andi	r2,r2,255
    2a9c:	1000241e 	bne	r2,zero,2b30 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2aa0:	e0bffd03 	ldbu	r2,-12(fp)
    2aa4:	10001026 	beq	r2,zero,2ae8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2aa8:	e0bffa03 	ldbu	r2,-24(fp)
    2aac:	e43ffb17 	ldw	r16,-20(fp)
    2ab0:	014001c4 	movi	r5,7
    2ab4:	1009883a 	mov	r4,r2
    2ab8:	000ccac0 	call	ccac <__mulsi3>
    2abc:	8085883a 	add	r2,r16,r2
    2ac0:	10800304 	addi	r2,r2,12
    2ac4:	00c01044 	movi	r3,65
    2ac8:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2acc:	e0bffb17 	ldw	r2,-20(fp)
    2ad0:	108001c3 	ldbu	r2,7(r2)
    2ad4:	10800044 	addi	r2,r2,1
    2ad8:	1007883a 	mov	r3,r2
    2adc:	e0bffb17 	ldw	r2,-20(fp)
    2ae0:	10c001c5 	stb	r3,7(r2)
    2ae4:	00000906 	br	2b0c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2ae8:	e0bffa03 	ldbu	r2,-24(fp)
    2aec:	e43ffb17 	ldw	r16,-20(fp)
    2af0:	014001c4 	movi	r5,7
    2af4:	1009883a 	mov	r4,r2
    2af8:	000ccac0 	call	ccac <__mulsi3>
    2afc:	8085883a 	add	r2,r16,r2
    2b00:	10800304 	addi	r2,r2,12
    2b04:	00c00044 	movi	r3,1
    2b08:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2b0c:	e0bffa03 	ldbu	r2,-24(fp)
    2b10:	e43ffb17 	ldw	r16,-20(fp)
    2b14:	014001c4 	movi	r5,7
    2b18:	1009883a 	mov	r4,r2
    2b1c:	000ccac0 	call	ccac <__mulsi3>
    2b20:	8085883a 	add	r2,r16,r2
    2b24:	10800304 	addi	r2,r2,12
    2b28:	10800003 	ldbu	r2,0(r2)
    2b2c:	00004206 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2b30:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2b34:	e0bffa43 	ldbu	r2,-23(fp)
    2b38:	108001cc 	andi	r2,r2,7
    2b3c:	108001cc 	andi	r2,r2,7
    2b40:	100890fa 	slli	r4,r2,3
    2b44:	e0fffa83 	ldbu	r3,-22(fp)
    2b48:	00bff1c4 	movi	r2,-57
    2b4c:	1884703a 	and	r2,r3,r2
    2b50:	1007883a 	mov	r3,r2
    2b54:	2005883a 	mov	r2,r4
    2b58:	1884b03a 	or	r2,r3,r2
    2b5c:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2b60:	e0bffd03 	ldbu	r2,-12(fp)
    2b64:	10001526 	beq	r2,zero,2bbc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2b68:	e0bffa83 	ldbu	r2,-22(fp)
    2b6c:	10801014 	ori	r2,r2,64
    2b70:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2b74:	e0bffb17 	ldw	r2,-20(fp)
    2b78:	108001c3 	ldbu	r2,7(r2)
    2b7c:	10800044 	addi	r2,r2,1
    2b80:	1007883a 	mov	r3,r2
    2b84:	e0bffb17 	ldw	r2,-20(fp)
    2b88:	10c001c5 	stb	r3,7(r2)
    2b8c:	e0bffb17 	ldw	r2,-20(fp)
    2b90:	108001c3 	ldbu	r2,7(r2)
    2b94:	108001cc 	andi	r2,r2,7
    2b98:	110001cc 	andi	r4,r2,7
    2b9c:	e0fffa83 	ldbu	r3,-22(fp)
    2ba0:	00bffe04 	movi	r2,-8
    2ba4:	1884703a 	and	r2,r3,r2
    2ba8:	1007883a 	mov	r3,r2
    2bac:	2005883a 	mov	r2,r4
    2bb0:	1884b03a 	or	r2,r3,r2
    2bb4:	e0bffa85 	stb	r2,-22(fp)
    2bb8:	00000e06 	br	2bf4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    2bbc:	e0fffa83 	ldbu	r3,-22(fp)
    2bc0:	00bfefc4 	movi	r2,-65
    2bc4:	1884703a 	and	r2,r3,r2
    2bc8:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    2bcc:	e0bffe03 	ldbu	r2,-8(fp)
    2bd0:	108001cc 	andi	r2,r2,7
    2bd4:	110001cc 	andi	r4,r2,7
    2bd8:	e0fffa83 	ldbu	r3,-22(fp)
    2bdc:	00bffe04 	movi	r2,-8
    2be0:	1884703a 	and	r2,r3,r2
    2be4:	1007883a 	mov	r3,r2
    2be8:	2005883a 	mov	r2,r4
    2bec:	1884b03a 	or	r2,r3,r2
    2bf0:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    2bf4:	e0bffa03 	ldbu	r2,-24(fp)
    2bf8:	e43ffb17 	ldw	r16,-20(fp)
    2bfc:	014001c4 	movi	r5,7
    2c00:	1009883a 	mov	r4,r2
    2c04:	000ccac0 	call	ccac <__mulsi3>
    2c08:	8085883a 	add	r2,r16,r2
    2c0c:	10800304 	addi	r2,r2,12
    2c10:	e0fffa83 	ldbu	r3,-22(fp)
    2c14:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    2c18:	e0bffa03 	ldbu	r2,-24(fp)
    2c1c:	e43ffb17 	ldw	r16,-20(fp)
    2c20:	014001c4 	movi	r5,7
    2c24:	1009883a 	mov	r4,r2
    2c28:	000ccac0 	call	ccac <__mulsi3>
    2c2c:	8085883a 	add	r2,r16,r2
    2c30:	10800304 	addi	r2,r2,12
    2c34:	10800003 	ldbu	r2,0(r2)
        };
    2c38:	e6ffff04 	addi	sp,fp,-4
    2c3c:	dfc00217 	ldw	ra,8(sp)
    2c40:	df000117 	ldw	fp,4(sp)
    2c44:	dc000017 	ldw	r16,0(sp)
    2c48:	dec00304 	addi	sp,sp,12
    2c4c:	f800283a 	ret

00002c50 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    2c50:	defffb04 	addi	sp,sp,-20
    2c54:	dfc00415 	stw	ra,16(sp)
    2c58:	df000315 	stw	fp,12(sp)
    2c5c:	df000304 	addi	fp,sp,12
    2c60:	e13ffe15 	stw	r4,-8(fp)
    2c64:	2805883a 	mov	r2,r5
    2c68:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    2c6c:	e0bfff03 	ldbu	r2,-4(fp)
    2c70:	10801058 	cmpnei	r2,r2,65
    2c74:	1000031e 	bne	r2,zero,2c84 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    2c78:	e13ffe17 	ldw	r4,-8(fp)
    2c7c:	0002e000 	call	2e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    2c80:	00000906 	br	2ca8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    2c84:	e0bfff03 	ldbu	r2,-4(fp)
    2c88:	100b883a 	mov	r5,r2
    2c8c:	e13ffe17 	ldw	r4,-8(fp)
    2c90:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2c94:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    2c98:	e0bffd03 	ldbu	r2,-12(fp)
    2c9c:	100b883a 	mov	r5,r2
    2ca0:	e13ffe17 	ldw	r4,-8(fp)
    2ca4:	0002efc0 	call	2efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    2ca8:	e037883a 	mov	sp,fp
    2cac:	dfc00117 	ldw	ra,4(sp)
    2cb0:	df000017 	ldw	fp,0(sp)
    2cb4:	dec00204 	addi	sp,sp,8
    2cb8:	f800283a 	ret

00002cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    2cbc:	defffa04 	addi	sp,sp,-24
    2cc0:	dfc00515 	stw	ra,20(sp)
    2cc4:	df000415 	stw	fp,16(sp)
    2cc8:	dc400315 	stw	r17,12(sp)
    2ccc:	dc000215 	stw	r16,8(sp)
    2cd0:	df000404 	addi	fp,sp,16
    2cd4:	e13ffc15 	stw	r4,-16(fp)
    2cd8:	2805883a 	mov	r2,r5
    2cdc:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    2ce0:	e0bffd03 	ldbu	r2,-12(fp)
    2ce4:	e43ffc17 	ldw	r16,-16(fp)
    2ce8:	014001c4 	movi	r5,7
    2cec:	1009883a 	mov	r4,r2
    2cf0:	000ccac0 	call	ccac <__mulsi3>
    2cf4:	8085883a 	add	r2,r16,r2
    2cf8:	10800304 	addi	r2,r2,12
    2cfc:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    2d00:	e0bffd03 	ldbu	r2,-12(fp)
    2d04:	e43ffc17 	ldw	r16,-16(fp)
    2d08:	014001c4 	movi	r5,7
    2d0c:	1009883a 	mov	r4,r2
    2d10:	000ccac0 	call	ccac <__mulsi3>
    2d14:	8085883a 	add	r2,r16,r2
    2d18:	10800344 	addi	r2,r2,13
    2d1c:	00c00044 	movi	r3,1
    2d20:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    2d24:	e0bffd03 	ldbu	r2,-12(fp)
    2d28:	e43ffc17 	ldw	r16,-16(fp)
    2d2c:	014001c4 	movi	r5,7
    2d30:	1009883a 	mov	r4,r2
    2d34:	000ccac0 	call	ccac <__mulsi3>
    2d38:	8085883a 	add	r2,r16,r2
    2d3c:	10800384 	addi	r2,r2,14
    2d40:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    2d44:	e0fffd03 	ldbu	r3,-12(fp)
    2d48:	e0bffc17 	ldw	r2,-16(fp)
    2d4c:	14000104 	addi	r16,r2,4
    2d50:	e47ffc17 	ldw	r17,-16(fp)
    2d54:	014001c4 	movi	r5,7
    2d58:	1809883a 	mov	r4,r3
    2d5c:	000ccac0 	call	ccac <__mulsi3>
    2d60:	8885883a 	add	r2,r17,r2
    2d64:	10800204 	addi	r2,r2,8
    2d68:	81403fcc 	andi	r5,r16,255
    2d6c:	10c00003 	ldbu	r3,0(r2)
    2d70:	1806703a 	and	r3,r3,zero
    2d74:	1809883a 	mov	r4,r3
    2d78:	2807883a 	mov	r3,r5
    2d7c:	20c6b03a 	or	r3,r4,r3
    2d80:	10c00005 	stb	r3,0(r2)
    2d84:	8006d23a 	srli	r3,r16,8
    2d88:	19403fcc 	andi	r5,r3,255
    2d8c:	10c00043 	ldbu	r3,1(r2)
    2d90:	1806703a 	and	r3,r3,zero
    2d94:	1809883a 	mov	r4,r3
    2d98:	2807883a 	mov	r3,r5
    2d9c:	20c6b03a 	or	r3,r4,r3
    2da0:	10c00045 	stb	r3,1(r2)
    2da4:	8006d43a 	srli	r3,r16,16
    2da8:	19403fcc 	andi	r5,r3,255
    2dac:	10c00083 	ldbu	r3,2(r2)
    2db0:	1806703a 	and	r3,r3,zero
    2db4:	1809883a 	mov	r4,r3
    2db8:	2807883a 	mov	r3,r5
    2dbc:	20c6b03a 	or	r3,r4,r3
    2dc0:	10c00085 	stb	r3,2(r2)
    2dc4:	800ad63a 	srli	r5,r16,24
    2dc8:	10c000c3 	ldbu	r3,3(r2)
    2dcc:	1806703a 	and	r3,r3,zero
    2dd0:	1809883a 	mov	r4,r3
    2dd4:	2807883a 	mov	r3,r5
    2dd8:	20c6b03a 	or	r3,r4,r3
    2ddc:	10c000c5 	stb	r3,3(r2)
        };
    2de0:	0001883a 	nop
    2de4:	e6fffe04 	addi	sp,fp,-8
    2de8:	dfc00317 	ldw	ra,12(sp)
    2dec:	df000217 	ldw	fp,8(sp)
    2df0:	dc400117 	ldw	r17,4(sp)
    2df4:	dc000017 	ldw	r16,0(sp)
    2df8:	dec00404 	addi	sp,sp,16
    2dfc:	f800283a 	ret

00002e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    2e00:	defffc04 	addi	sp,sp,-16
    2e04:	dfc00315 	stw	ra,12(sp)
    2e08:	df000215 	stw	fp,8(sp)
    2e0c:	df000204 	addi	fp,sp,8
    2e10:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    2e14:	00800044 	movi	r2,1
    2e18:	e0bffe05 	stb	r2,-8(fp)
    2e1c:	e0bffe03 	ldbu	r2,-8(fp)
    2e20:	10800428 	cmpgeui	r2,r2,16
    2e24:	1000081e 	bne	r2,zero,2e48 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    2e28:	e0bffe03 	ldbu	r2,-8(fp)
    2e2c:	100b883a 	mov	r5,r2
    2e30:	e13fff17 	ldw	r4,-4(fp)
    2e34:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    2e38:	e0bffe03 	ldbu	r2,-8(fp)
    2e3c:	10800044 	addi	r2,r2,1
    2e40:	e0bffe05 	stb	r2,-8(fp)
    2e44:	003ff506 	br	2e1c <__alt_data_end+0xfc002e1c>
                        InitEntry(i);

                hubCounter = 0;
    2e48:	e0bfff17 	ldw	r2,-4(fp)
    2e4c:	100001c5 	stb	zero,7(r2)
        };
    2e50:	0001883a 	nop
    2e54:	e037883a 	mov	sp,fp
    2e58:	dfc00117 	ldw	ra,4(sp)
    2e5c:	df000017 	ldw	fp,0(sp)
    2e60:	dec00204 	addi	sp,sp,8
    2e64:	f800283a 	ret

00002e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    2e68:	defffa04 	addi	sp,sp,-24
    2e6c:	dfc00515 	stw	ra,20(sp)
    2e70:	df000415 	stw	fp,16(sp)
    2e74:	dc000315 	stw	r16,12(sp)
    2e78:	df000404 	addi	fp,sp,16
    2e7c:	e13ffd15 	stw	r4,-12(fp)
    2e80:	2805883a 	mov	r2,r5
    2e84:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    2e88:	00800044 	movi	r2,1
    2e8c:	e0bffc05 	stb	r2,-16(fp)
    2e90:	e0bffc03 	ldbu	r2,-16(fp)
    2e94:	10800428 	cmpgeui	r2,r2,16
    2e98:	1000111e 	bne	r2,zero,2ee0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    2e9c:	e0bffc03 	ldbu	r2,-16(fp)
    2ea0:	e43ffd17 	ldw	r16,-12(fp)
    2ea4:	014001c4 	movi	r5,7
    2ea8:	1009883a 	mov	r4,r2
    2eac:	000ccac0 	call	ccac <__mulsi3>
    2eb0:	8085883a 	add	r2,r16,r2
    2eb4:	10800304 	addi	r2,r2,12
    2eb8:	10800003 	ldbu	r2,0(r2)
    2ebc:	10c03fcc 	andi	r3,r2,255
    2ec0:	e0bffe03 	ldbu	r2,-8(fp)
    2ec4:	1880021e 	bne	r3,r2,2ed0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    2ec8:	e0bffc03 	ldbu	r2,-16(fp)
    2ecc:	00000506 	br	2ee4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    2ed0:	e0bffc03 	ldbu	r2,-16(fp)
    2ed4:	10800044 	addi	r2,r2,1
    2ed8:	e0bffc05 	stb	r2,-16(fp)
    2edc:	003fec06 	br	2e90 <__alt_data_end+0xfc002e90>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    2ee0:	0005883a 	mov	r2,zero
        };
    2ee4:	e6ffff04 	addi	sp,fp,-4
    2ee8:	dfc00217 	ldw	ra,8(sp)
    2eec:	df000117 	ldw	fp,4(sp)
    2ef0:	dc000017 	ldw	r16,0(sp)
    2ef4:	dec00304 	addi	sp,sp,12
    2ef8:	f800283a 	ret

00002efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    2efc:	defffa04 	addi	sp,sp,-24
    2f00:	dfc00515 	stw	ra,20(sp)
    2f04:	df000415 	stw	fp,16(sp)
    2f08:	dc000315 	stw	r16,12(sp)
    2f0c:	df000404 	addi	fp,sp,16
    2f10:	e13ffd15 	stw	r4,-12(fp)
    2f14:	2805883a 	mov	r2,r5
    2f18:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    2f1c:	e0bffe03 	ldbu	r2,-8(fp)
    2f20:	10003026 	beq	r2,zero,2fe4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    2f24:	e0bffe03 	ldbu	r2,-8(fp)
    2f28:	e43ffd17 	ldw	r16,-12(fp)
    2f2c:	014001c4 	movi	r5,7
    2f30:	1009883a 	mov	r4,r2
    2f34:	000ccac0 	call	ccac <__mulsi3>
    2f38:	8085883a 	add	r2,r16,r2
    2f3c:	10800304 	addi	r2,r2,12
    2f40:	10800003 	ldbu	r2,0(r2)
    2f44:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    2f48:	e0bffc43 	ldbu	r2,-15(fp)
    2f4c:	1080100c 	andi	r2,r2,64
    2f50:	10803fcc 	andi	r2,r2,255
    2f54:	10001e26 	beq	r2,zero,2fd0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    2f58:	00800044 	movi	r2,1
    2f5c:	e0bffc05 	stb	r2,-16(fp)
    2f60:	e0bffc03 	ldbu	r2,-16(fp)
    2f64:	100d883a 	mov	r6,r2
    2f68:	e17ffc43 	ldbu	r5,-15(fp)
    2f6c:	e13ffd17 	ldw	r4,-12(fp)
    2f70:	00030000 	call	3000 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    2f74:	e0bffc05 	stb	r2,-16(fp)
    2f78:	e0bffc03 	ldbu	r2,-16(fp)
    2f7c:	1004c03a 	cmpne	r2,r2,zero
    2f80:	10803fcc 	andi	r2,r2,255
    2f84:	10000526 	beq	r2,zero,2f9c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    2f88:	e0bffc03 	ldbu	r2,-16(fp)
    2f8c:	100b883a 	mov	r5,r2
    2f90:	e13ffd17 	ldw	r4,-12(fp)
    2f94:	0002efc0 	call	2efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    2f98:	003ff106 	br	2f60 <__alt_data_end+0xfc002f60>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    2f9c:	e0bffd17 	ldw	r2,-12(fp)
    2fa0:	10c001c3 	ldbu	r3,7(r2)
    2fa4:	e0bffc43 	ldbu	r2,-15(fp)
    2fa8:	108001cc 	andi	r2,r2,7
    2fac:	18c03fcc 	andi	r3,r3,255
    2fb0:	10803fcc 	andi	r2,r2,255
    2fb4:	1880061e 	bne	r3,r2,2fd0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    2fb8:	e0bffd17 	ldw	r2,-12(fp)
    2fbc:	108001c3 	ldbu	r2,7(r2)
    2fc0:	10bfffc4 	addi	r2,r2,-1
    2fc4:	1007883a 	mov	r3,r2
    2fc8:	e0bffd17 	ldw	r2,-12(fp)
    2fcc:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    2fd0:	e0bffe03 	ldbu	r2,-8(fp)
    2fd4:	100b883a 	mov	r5,r2
    2fd8:	e13ffd17 	ldw	r4,-12(fp)
    2fdc:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    2fe0:	00000106 	br	2fe8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    2fe4:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    2fe8:	e6ffff04 	addi	sp,fp,-4
    2fec:	dfc00217 	ldw	ra,8(sp)
    2ff0:	df000117 	ldw	fp,4(sp)
    2ff4:	dc000017 	ldw	r16,0(sp)
    2ff8:	dec00304 	addi	sp,sp,12
    2ffc:	f800283a 	ret

00003000 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    3000:	defff904 	addi	sp,sp,-28
    3004:	dfc00615 	stw	ra,24(sp)
    3008:	df000515 	stw	fp,20(sp)
    300c:	dc000415 	stw	r16,16(sp)
    3010:	df000504 	addi	fp,sp,20
    3014:	e13ffc15 	stw	r4,-16(fp)
    3018:	e17ffd05 	stb	r5,-12(fp)
    301c:	3005883a 	mov	r2,r6
    3020:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3024:	e0bffe03 	ldbu	r2,-8(fp)
    3028:	10000526 	beq	r2,zero,3040 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    302c:	e0bffe03 	ldbu	r2,-8(fp)
    3030:	10800428 	cmpgeui	r2,r2,16
    3034:	1000021e 	bne	r2,zero,3040 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3038:	e0bffe03 	ldbu	r2,-8(fp)
    303c:	00000106 	br	3044 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3040:	00800044 	movi	r2,1
    3044:	e0bffb05 	stb	r2,-20(fp)
    3048:	e0bffb03 	ldbu	r2,-20(fp)
    304c:	10800428 	cmpgeui	r2,r2,16
    3050:	1000161e 	bne	r2,zero,30ac <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3054:	e0bffb03 	ldbu	r2,-20(fp)
    3058:	e43ffc17 	ldw	r16,-16(fp)
    305c:	014001c4 	movi	r5,7
    3060:	1009883a 	mov	r4,r2
    3064:	000ccac0 	call	ccac <__mulsi3>
    3068:	8085883a 	add	r2,r16,r2
    306c:	10800304 	addi	r2,r2,12
    3070:	10800003 	ldbu	r2,0(r2)
    3074:	1004d0fa 	srli	r2,r2,3
    3078:	108001cc 	andi	r2,r2,7
    307c:	1007883a 	mov	r3,r2
    3080:	e0bffd03 	ldbu	r2,-12(fp)
    3084:	108001cc 	andi	r2,r2,7
    3088:	18c03fcc 	andi	r3,r3,255
    308c:	10803fcc 	andi	r2,r2,255
    3090:	1880021e 	bne	r3,r2,309c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3094:	e0bffb03 	ldbu	r2,-20(fp)
    3098:	00000506 	br	30b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    309c:	e0bffb03 	ldbu	r2,-20(fp)
    30a0:	10800044 	addi	r2,r2,1
    30a4:	e0bffb05 	stb	r2,-20(fp)
    30a8:	003fe706 	br	3048 <__alt_data_end+0xfc003048>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    30ac:	0005883a 	mov	r2,zero
        };
    30b0:	e6ffff04 	addi	sp,fp,-4
    30b4:	dfc00217 	ldw	ra,8(sp)
    30b8:	df000117 	ldw	fp,4(sp)
    30bc:	dc000017 	ldw	r16,0(sp)
    30c0:	dec00304 	addi	sp,sp,12
    30c4:	f800283a 	ret

000030c8 <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    30c8:	defffb04 	addi	sp,sp,-20
    30cc:	dfc00415 	stw	ra,16(sp)
    30d0:	df000315 	stw	fp,12(sp)
    30d4:	df000304 	addi	fp,sp,12
    30d8:	e13ffe15 	stw	r4,-8(fp)
    30dc:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    30e0:	e0bffe17 	ldw	r2,-8(fp)
    30e4:	1009883a 	mov	r4,r2
    30e8:	0004a840 	call	4a84 <_ZN15USBDeviceConfigC1Ev>
    30ec:	e0bffe17 	ldw	r2,-8(fp)
    30f0:	10800104 	addi	r2,r2,4
    30f4:	1009883a 	mov	r4,r2
    30f8:	0004ab80 	call	4ab8 <_ZN17UsbConfigXtracterC1Ev>
    30fc:	008000b4 	movhi	r2,2
    3100:	108ec204 	addi	r2,r2,15112
    3104:	e0fffe17 	ldw	r3,-8(fp)
    3108:	18800015 	stw	r2,0(r3)
    310c:	008000b4 	movhi	r2,2
    3110:	108ecf04 	addi	r2,r2,15164
    3114:	e0fffe17 	ldw	r3,-8(fp)
    3118:	18800115 	stw	r2,4(r3)
    311c:	e0bffe17 	ldw	r2,-8(fp)
    3120:	e0ffff17 	ldw	r3,-4(fp)
    3124:	10c00315 	stw	r3,12(r2)
    3128:	e0bffe17 	ldw	r2,-8(fp)
    312c:	10000405 	stb	zero,16(r2)
    3130:	e0bffe17 	ldw	r2,-8(fp)
    3134:	00c00044 	movi	r3,1
    3138:	10c006c5 	stb	r3,27(r2)
    313c:	e0bffe17 	ldw	r2,-8(fp)
    3140:	10000715 	stw	zero,28(r2)
    3144:	e0bffe17 	ldw	r2,-8(fp)
    3148:	10000905 	stb	zero,36(r2)
    314c:	e0bffe17 	ldw	r2,-8(fp)
    3150:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3154:	e03ffd05 	stb	zero,-12(fp)
    3158:	e0bffd03 	ldbu	r2,-12(fp)
    315c:	108000e8 	cmpgeui	r2,r2,3
    3160:	1000431e 	bne	r2,zero,3270 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3164:	e0fffd03 	ldbu	r3,-12(fp)
    3168:	e13ffe17 	ldw	r4,-8(fp)
    316c:	1805883a 	mov	r2,r3
    3170:	1085883a 	add	r2,r2,r2
    3174:	10c5883a 	add	r2,r2,r3
    3178:	2085883a 	add	r2,r4,r2
    317c:	10800444 	addi	r2,r2,17
    3180:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3184:	e13ffd03 	ldbu	r4,-12(fp)
    3188:	e0bffd03 	ldbu	r2,-12(fp)
    318c:	10000226 	beq	r2,zero,3198 <_ZN7XBOXONEC1EP3USB+0xd0>
    3190:	0007883a 	mov	r3,zero
    3194:	00000106 	br	319c <_ZN7XBOXONEC1EP3USB+0xd4>
    3198:	00c00204 	movi	r3,8
    319c:	e17ffe17 	ldw	r5,-8(fp)
    31a0:	2005883a 	mov	r2,r4
    31a4:	1085883a 	add	r2,r2,r2
    31a8:	1105883a 	add	r2,r2,r4
    31ac:	2885883a 	add	r2,r5,r2
    31b0:	10800484 	addi	r2,r2,18
    31b4:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    31b8:	e0fffd03 	ldbu	r3,-12(fp)
    31bc:	e13ffe17 	ldw	r4,-8(fp)
    31c0:	1805883a 	mov	r2,r3
    31c4:	1085883a 	add	r2,r2,r2
    31c8:	10c5883a 	add	r2,r2,r3
    31cc:	2085883a 	add	r2,r4,r2
    31d0:	10800404 	addi	r2,r2,16
    31d4:	110000c3 	ldbu	r4,3(r2)
    31d8:	00ffff84 	movi	r3,-2
    31dc:	20c6703a 	and	r3,r4,r3
    31e0:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    31e4:	e0fffd03 	ldbu	r3,-12(fp)
    31e8:	e13ffe17 	ldw	r4,-8(fp)
    31ec:	1805883a 	mov	r2,r3
    31f0:	1085883a 	add	r2,r2,r2
    31f4:	10c5883a 	add	r2,r2,r3
    31f8:	2085883a 	add	r2,r4,r2
    31fc:	10800404 	addi	r2,r2,16
    3200:	110000c3 	ldbu	r4,3(r2)
    3204:	00ffff44 	movi	r3,-3
    3208:	20c6703a 	and	r3,r4,r3
    320c:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    3210:	e13ffd03 	ldbu	r4,-12(fp)
    3214:	e0bffd03 	ldbu	r2,-12(fp)
    3218:	10000226 	beq	r2,zero,3224 <_ZN7XBOXONEC1EP3USB+0x15c>
    321c:	00c00044 	movi	r3,1
    3220:	00000106 	br	3228 <_ZN7XBOXONEC1EP3USB+0x160>
    3224:	00c003c4 	movi	r3,15
    3228:	e17ffe17 	ldw	r5,-8(fp)
    322c:	2005883a 	mov	r2,r4
    3230:	1085883a 	add	r2,r2,r2
    3234:	1105883a 	add	r2,r2,r4
    3238:	2885883a 	add	r2,r5,r2
    323c:	10800404 	addi	r2,r2,16
    3240:	18c7883a 	add	r3,r3,r3
    3244:	18cb883a 	add	r5,r3,r3
    3248:	10c000c3 	ldbu	r3,3(r2)
    324c:	18c000cc 	andi	r3,r3,3
    3250:	1809883a 	mov	r4,r3
    3254:	2807883a 	mov	r3,r5
    3258:	20c6b03a 	or	r3,r4,r3
    325c:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3260:	e0bffd03 	ldbu	r2,-12(fp)
    3264:	10800044 	addi	r2,r2,1
    3268:	e0bffd05 	stb	r2,-12(fp)
    326c:	003fba06 	br	3158 <__alt_data_end+0xfc003158>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    3270:	e0bffe17 	ldw	r2,-8(fp)
    3274:	10800317 	ldw	r2,12(r2)
    3278:	10000626 	beq	r2,zero,3294 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    327c:	e0bffe17 	ldw	r2,-8(fp)
    3280:	10800317 	ldw	r2,12(r2)
    3284:	e0fffe17 	ldw	r3,-8(fp)
    3288:	180b883a 	mov	r5,r3
    328c:	1009883a 	mov	r4,r2
    3290:	00048380 	call	4838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3294:	0001883a 	nop
    3298:	e037883a 	mov	sp,fp
    329c:	dfc00117 	ldw	ra,4(sp)
    32a0:	df000017 	ldw	fp,0(sp)
    32a4:	dec00204 	addi	sp,sp,8
    32a8:	f800283a 	ret

000032ac <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    32ac:	deffde04 	addi	sp,sp,-136
    32b0:	dfc02115 	stw	ra,132(sp)
    32b4:	df002015 	stw	fp,128(sp)
    32b8:	df002004 	addi	fp,sp,128
    32bc:	e13ffc15 	stw	r4,-16(fp)
    32c0:	2809883a 	mov	r4,r5
    32c4:	3007883a 	mov	r3,r6
    32c8:	3805883a 	mov	r2,r7
    32cc:	e13ffd05 	stb	r4,-12(fp)
    32d0:	e0fffe05 	stb	r3,-8(fp)
    32d4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    32d8:	e0bfe744 	addi	r2,fp,-99
    32dc:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    32e0:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    32e4:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    32e8:	e0bffc17 	ldw	r2,-16(fp)
    32ec:	10800317 	ldw	r2,12(r2)
    32f0:	1009883a 	mov	r4,r2
    32f4:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    32f8:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    32fc:	e0bffc17 	ldw	r2,-16(fp)
    3300:	10800403 	ldbu	r2,16(r2)
    3304:	10803fcc 	andi	r2,r2,255
    3308:	10000226 	beq	r2,zero,3314 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    330c:	00bff644 	movi	r2,-39
    3310:	00017606 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    3314:	e0bfe517 	ldw	r2,-108(fp)
    3318:	10800017 	ldw	r2,0(r2)
    331c:	10800017 	ldw	r2,0(r2)
    3320:	000b883a 	mov	r5,zero
    3324:	e13fe517 	ldw	r4,-108(fp)
    3328:	103ee83a 	callr	r2
    332c:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3330:	e0bfe317 	ldw	r2,-116(fp)
    3334:	1000021e 	bne	r2,zero,3340 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3338:	00bff584 	movi	r2,-42
    333c:	00016b06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3340:	e0bfe317 	ldw	r2,-116(fp)
    3344:	10c00003 	ldbu	r3,0(r2)
    3348:	11000043 	ldbu	r4,1(r2)
    334c:	2008923a 	slli	r4,r4,8
    3350:	20c6b03a 	or	r3,r4,r3
    3354:	11000083 	ldbu	r4,2(r2)
    3358:	2008943a 	slli	r4,r4,16
    335c:	20c6b03a 	or	r3,r4,r3
    3360:	108000c3 	ldbu	r2,3(r2)
    3364:	1004963a 	slli	r2,r2,24
    3368:	10c4b03a 	or	r2,r2,r3
    336c:	1000021e 	bne	r2,zero,3378 <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    3370:	00bff5c4 	movi	r2,-41
    3374:	00015d06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    3378:	e0bfe317 	ldw	r2,-116(fp)
    337c:	10c00003 	ldbu	r3,0(r2)
    3380:	11000043 	ldbu	r4,1(r2)
    3384:	2008923a 	slli	r4,r4,8
    3388:	20c6b03a 	or	r3,r4,r3
    338c:	11000083 	ldbu	r4,2(r2)
    3390:	2008943a 	slli	r4,r4,16
    3394:	20c6b03a 	or	r3,r4,r3
    3398:	108000c3 	ldbu	r2,3(r2)
    339c:	1004963a 	slli	r2,r2,24
    33a0:	10c4b03a 	or	r2,r2,r3
    33a4:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    33a8:	e0bffc17 	ldw	r2,-16(fp)
    33ac:	10c00444 	addi	r3,r2,17
    33b0:	e0bfe317 	ldw	r2,-116(fp)
    33b4:	19803fcc 	andi	r6,r3,255
    33b8:	11000003 	ldbu	r4,0(r2)
    33bc:	2008703a 	and	r4,r4,zero
    33c0:	200b883a 	mov	r5,r4
    33c4:	3009883a 	mov	r4,r6
    33c8:	2908b03a 	or	r4,r5,r4
    33cc:	11000005 	stb	r4,0(r2)
    33d0:	1808d23a 	srli	r4,r3,8
    33d4:	21803fcc 	andi	r6,r4,255
    33d8:	11000043 	ldbu	r4,1(r2)
    33dc:	2008703a 	and	r4,r4,zero
    33e0:	200b883a 	mov	r5,r4
    33e4:	3009883a 	mov	r4,r6
    33e8:	2908b03a 	or	r4,r5,r4
    33ec:	11000045 	stb	r4,1(r2)
    33f0:	1808d43a 	srli	r4,r3,16
    33f4:	21803fcc 	andi	r6,r4,255
    33f8:	11000083 	ldbu	r4,2(r2)
    33fc:	2008703a 	and	r4,r4,zero
    3400:	200b883a 	mov	r5,r4
    3404:	3009883a 	mov	r4,r6
    3408:	2908b03a 	or	r4,r5,r4
    340c:	11000085 	stb	r4,2(r2)
    3410:	180ad63a 	srli	r5,r3,24
    3414:	10c000c3 	ldbu	r3,3(r2)
    3418:	1806703a 	and	r3,r3,zero
    341c:	1809883a 	mov	r4,r3
    3420:	2807883a 	mov	r3,r5
    3424:	20c6b03a 	or	r3,r4,r3
    3428:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    342c:	e0bfe317 	ldw	r2,-116(fp)
    3430:	e0ffff03 	ldbu	r3,-4(fp)
    3434:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    3438:	e0bffc17 	ldw	r2,-16(fp)
    343c:	10c00317 	ldw	r3,12(r2)
    3440:	00800484 	movi	r2,18
    3444:	113fffcc 	andi	r4,r2,65535
    3448:	e0bfe744 	addi	r2,fp,-99
    344c:	d8800015 	stw	r2,0(sp)
    3450:	200f883a 	mov	r7,r4
    3454:	000d883a 	mov	r6,zero
    3458:	000b883a 	mov	r5,zero
    345c:	1809883a 	mov	r4,r3
    3460:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    3464:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    3468:	e0bfe317 	ldw	r2,-116(fp)
    346c:	e0ffe417 	ldw	r3,-112(fp)
    3470:	19403fcc 	andi	r5,r3,255
    3474:	10c00003 	ldbu	r3,0(r2)
    3478:	1806703a 	and	r3,r3,zero
    347c:	1809883a 	mov	r4,r3
    3480:	2807883a 	mov	r3,r5
    3484:	20c6b03a 	or	r3,r4,r3
    3488:	10c00005 	stb	r3,0(r2)
    348c:	e0ffe417 	ldw	r3,-112(fp)
    3490:	1806d23a 	srli	r3,r3,8
    3494:	19403fcc 	andi	r5,r3,255
    3498:	10c00043 	ldbu	r3,1(r2)
    349c:	1806703a 	and	r3,r3,zero
    34a0:	1809883a 	mov	r4,r3
    34a4:	2807883a 	mov	r3,r5
    34a8:	20c6b03a 	or	r3,r4,r3
    34ac:	10c00045 	stb	r3,1(r2)
    34b0:	e0ffe417 	ldw	r3,-112(fp)
    34b4:	1806d43a 	srli	r3,r3,16
    34b8:	19403fcc 	andi	r5,r3,255
    34bc:	10c00083 	ldbu	r3,2(r2)
    34c0:	1806703a 	and	r3,r3,zero
    34c4:	1809883a 	mov	r4,r3
    34c8:	2807883a 	mov	r3,r5
    34cc:	20c6b03a 	or	r3,r4,r3
    34d0:	10c00085 	stb	r3,2(r2)
    34d4:	e0ffe417 	ldw	r3,-112(fp)
    34d8:	180ad63a 	srli	r5,r3,24
    34dc:	10c000c3 	ldbu	r3,3(r2)
    34e0:	1806703a 	and	r3,r3,zero
    34e4:	1809883a 	mov	r4,r3
    34e8:	2807883a 	mov	r3,r5
    34ec:	20c6b03a 	or	r3,r4,r3
    34f0:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    34f4:	e0bfe103 	ldbu	r2,-124(fp)
    34f8:	1000e61e 	bne	r2,zero,3894 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    34fc:	e0bfe217 	ldw	r2,-120(fp)
    3500:	10c00203 	ldbu	r3,8(r2)
    3504:	10800243 	ldbu	r2,9(r2)
    3508:	1004923a 	slli	r2,r2,8
    350c:	10c4b03a 	or	r2,r2,r3
    3510:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    3514:	e0bfe217 	ldw	r2,-120(fp)
    3518:	10c00283 	ldbu	r3,10(r2)
    351c:	108002c3 	ldbu	r2,11(r2)
    3520:	1004923a 	slli	r2,r2,8
    3524:	10c4b03a 	or	r2,r2,r3
    3528:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    352c:	e0bffc17 	ldw	r2,-16(fp)
    3530:	10800017 	ldw	r2,0(r2)
    3534:	10800604 	addi	r2,r2,24
    3538:	10800017 	ldw	r2,0(r2)
    353c:	e0ffe60b 	ldhu	r3,-104(fp)
    3540:	e13fe68b 	ldhu	r4,-102(fp)
    3544:	200d883a 	mov	r6,r4
    3548:	180b883a 	mov	r5,r3
    354c:	e13ffc17 	ldw	r4,-16(fp)
    3550:	103ee83a 	callr	r2
    3554:	1080005c 	xori	r2,r2,1
    3558:	10803fcc 	andi	r2,r2,255
    355c:	1000d51e 	bne	r2,zero,38b4 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    3560:	e0bfe517 	ldw	r2,-108(fp)
    3564:	10800017 	ldw	r2,0(r2)
    3568:	10800104 	addi	r2,r2,4
    356c:	10800017 	ldw	r2,0(r2)
    3570:	e0fffd03 	ldbu	r3,-12(fp)
    3574:	e13ffe03 	ldbu	r4,-8(fp)
    3578:	200f883a 	mov	r7,r4
    357c:	000d883a 	mov	r6,zero
    3580:	180b883a 	mov	r5,r3
    3584:	e13fe517 	ldw	r4,-108(fp)
    3588:	103ee83a 	callr	r2
    358c:	1007883a 	mov	r3,r2
    3590:	e0bffc17 	ldw	r2,-16(fp)
    3594:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    3598:	e0bffc17 	ldw	r2,-16(fp)
    359c:	10800403 	ldbu	r2,16(r2)
    35a0:	10803fcc 	andi	r2,r2,255
    35a4:	1000021e 	bne	r2,zero,35b0 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    35a8:	00bff504 	movi	r2,-44
    35ac:	0000cf06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    35b0:	e0bfe217 	ldw	r2,-120(fp)
    35b4:	10c001c3 	ldbu	r3,7(r2)
    35b8:	e0bffc17 	ldw	r2,-16(fp)
    35bc:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    35c0:	e0bffc17 	ldw	r2,-16(fp)
    35c4:	10c00317 	ldw	r3,12(r2)
    35c8:	e0bffc17 	ldw	r2,-16(fp)
    35cc:	10800403 	ldbu	r2,16(r2)
    35d0:	10803fcc 	andi	r2,r2,255
    35d4:	100f883a 	mov	r7,r2
    35d8:	000d883a 	mov	r6,zero
    35dc:	000b883a 	mov	r5,zero
    35e0:	1809883a 	mov	r4,r3
    35e4:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    35e8:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    35ec:	e0bfe103 	ldbu	r2,-124(fp)
    35f0:	10001026 	beq	r2,zero,3634 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    35f4:	e0bfe317 	ldw	r2,-116(fp)
    35f8:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    35fc:	e0bfe517 	ldw	r2,-108(fp)
    3600:	10800017 	ldw	r2,0(r2)
    3604:	10800204 	addi	r2,r2,8
    3608:	10800017 	ldw	r2,0(r2)
    360c:	e0fffc17 	ldw	r3,-16(fp)
    3610:	18c00403 	ldbu	r3,16(r3)
    3614:	18c03fcc 	andi	r3,r3,255
    3618:	180b883a 	mov	r5,r3
    361c:	e13fe517 	ldw	r4,-108(fp)
    3620:	103ee83a 	callr	r2
                bAddress = 0;
    3624:	e0bffc17 	ldw	r2,-16(fp)
    3628:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    362c:	e0bfe103 	ldbu	r2,-124(fp)
    3630:	0000ae06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3634:	e0bfe317 	ldw	r2,-116(fp)
    3638:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    363c:	e0bfe517 	ldw	r2,-108(fp)
    3640:	10800017 	ldw	r2,0(r2)
    3644:	10800017 	ldw	r2,0(r2)
    3648:	e0fffc17 	ldw	r3,-16(fp)
    364c:	18c00403 	ldbu	r3,16(r3)
    3650:	18c03fcc 	andi	r3,r3,255
    3654:	180b883a 	mov	r5,r3
    3658:	e13fe517 	ldw	r4,-108(fp)
    365c:	103ee83a 	callr	r2
    3660:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3664:	e0bfe317 	ldw	r2,-116(fp)
    3668:	1000021e 	bne	r2,zero,3674 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    366c:	00bff584 	movi	r2,-42
    3670:	00009e06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3674:	e0bfe317 	ldw	r2,-116(fp)
    3678:	e0ffff03 	ldbu	r3,-4(fp)
    367c:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3680:	e0bffc17 	ldw	r2,-16(fp)
    3684:	10c00317 	ldw	r3,12(r2)
    3688:	e0bffc17 	ldw	r2,-16(fp)
    368c:	10800403 	ldbu	r2,16(r2)
    3690:	11003fcc 	andi	r4,r2,255
    3694:	e0bffc17 	ldw	r2,-16(fp)
    3698:	10800444 	addi	r2,r2,17
    369c:	100f883a 	mov	r7,r2
    36a0:	01800044 	movi	r6,1
    36a4:	200b883a 	mov	r5,r4
    36a8:	1809883a 	mov	r4,r3
    36ac:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    36b0:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    36b4:	e0bfe103 	ldbu	r2,-124(fp)
    36b8:	1000781e 	bne	r2,zero,389c <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    36bc:	e0bfe217 	ldw	r2,-120(fp)
    36c0:	10800443 	ldbu	r2,17(r2)
    36c4:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    36c8:	e0bfe703 	ldbu	r2,-100(fp)
    36cc:	01402004 	movi	r5,128
    36d0:	1009883a 	mov	r4,r2
    36d4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    36d8:	e03fe145 	stb	zero,-123(fp)
    36dc:	e0ffe143 	ldbu	r3,-123(fp)
    36e0:	e0bfe703 	ldbu	r2,-100(fp)
    36e4:	1880222e 	bgeu	r3,r2,3770 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    36e8:	e0bffc17 	ldw	r2,-16(fp)
    36ec:	10c00104 	addi	r3,r2,4
    36f0:	e0bfed04 	addi	r2,fp,-76
    36f4:	180b883a 	mov	r5,r3
    36f8:	1009883a 	mov	r4,r2
    36fc:	0004b200 	call	4b20 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	10c00317 	ldw	r3,12(r2)
    3708:	e0bffc17 	ldw	r2,-16(fp)
    370c:	10800403 	ldbu	r2,16(r2)
    3710:	11003fcc 	andi	r4,r2,255
    3714:	e17fe143 	ldbu	r5,-123(fp)
    3718:	e0bfed04 	addi	r2,fp,-76
    371c:	d8800015 	stw	r2,0(sp)
    3720:	280f883a 	mov	r7,r5
    3724:	000d883a 	mov	r6,zero
    3728:	200b883a 	mov	r5,r4
    372c:	1809883a 	mov	r4,r3
    3730:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3734:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3738:	e0bfe103 	ldbu	r2,-124(fp)
    373c:	10000226 	beq	r2,zero,3748 <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3740:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3744:	00006206 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3748:	e0bffc17 	ldw	r2,-16(fp)
    374c:	108006c3 	ldbu	r2,27(r2)
    3750:	10803fcc 	andi	r2,r2,255
    3754:	108000f0 	cmpltui	r2,r2,3
    3758:	10000426 	beq	r2,zero,376c <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    375c:	e0bfe143 	ldbu	r2,-123(fp)
    3760:	10800044 	addi	r2,r2,1
    3764:	e0bfe145 	stb	r2,-123(fp)
    3768:	003fdc06 	br	36dc <__alt_data_end+0xfc0036dc>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    376c:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3770:	e0bffc17 	ldw	r2,-16(fp)
    3774:	108006c3 	ldbu	r2,27(r2)
    3778:	10803fcc 	andi	r2,r2,255
    377c:	108000e8 	cmpgeui	r2,r2,3
    3780:	10004e26 	beq	r2,zero,38bc <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3784:	e0bffc17 	ldw	r2,-16(fp)
    3788:	10c00317 	ldw	r3,12(r2)
    378c:	e0bffc17 	ldw	r2,-16(fp)
    3790:	10800403 	ldbu	r2,16(r2)
    3794:	11003fcc 	andi	r4,r2,255
    3798:	e0bffc17 	ldw	r2,-16(fp)
    379c:	108006c3 	ldbu	r2,27(r2)
    37a0:	11403fcc 	andi	r5,r2,255
    37a4:	e0bffc17 	ldw	r2,-16(fp)
    37a8:	10800444 	addi	r2,r2,17
    37ac:	100f883a 	mov	r7,r2
    37b0:	280d883a 	mov	r6,r5
    37b4:	200b883a 	mov	r5,r4
    37b8:	1809883a 	mov	r4,r3
    37bc:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    37c0:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    37c4:	e0bfe103 	ldbu	r2,-124(fp)
    37c8:	1000361e 	bne	r2,zero,38a4 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    37cc:	01003204 	movi	r4,200
    37d0:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    37d4:	e0bffc17 	ldw	r2,-16(fp)
    37d8:	10c00317 	ldw	r3,12(r2)
    37dc:	e0bffc17 	ldw	r2,-16(fp)
    37e0:	10800403 	ldbu	r2,16(r2)
    37e4:	11003fcc 	andi	r4,r2,255
    37e8:	e0bffc17 	ldw	r2,-16(fp)
    37ec:	10800443 	ldbu	r2,17(r2)
    37f0:	11403fcc 	andi	r5,r2,255
    37f4:	e0bffc17 	ldw	r2,-16(fp)
    37f8:	10800683 	ldbu	r2,26(r2)
    37fc:	10803fcc 	andi	r2,r2,255
    3800:	100f883a 	mov	r7,r2
    3804:	280d883a 	mov	r6,r5
    3808:	200b883a 	mov	r5,r4
    380c:	1809883a 	mov	r4,r3
    3810:	00027900 	call	2790 <_ZN3USB7setConfEhhh>
    3814:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3818:	e0bfe103 	ldbu	r2,-124(fp)
    381c:	1000231e 	bne	r2,zero,38ac <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3820:	01003204 	movi	r4,200
    3824:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3828:	e0bffc17 	ldw	r2,-16(fp)
    382c:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3830:	00800144 	movi	r2,5
    3834:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3838:	00800804 	movi	r2,32
    383c:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3840:	00800044 	movi	r2,1
    3844:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3848:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    384c:	e0bfebc4 	addi	r2,fp,-81
    3850:	01800144 	movi	r6,5
    3854:	100b883a 	mov	r5,r2
    3858:	e13ffc17 	ldw	r4,-16(fp)
    385c:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
    3860:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3864:	e0bfe103 	ldbu	r2,-124(fp)
    3868:	1000181e 	bne	r2,zero,38cc <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    386c:	e13ffc17 	ldw	r4,-16(fp)
    3870:	00042140 	call	4214 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3874:	e0bffc17 	ldw	r2,-16(fp)
    3878:	00c00044 	movi	r3,1
    387c:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3880:	e0bffc17 	ldw	r2,-16(fp)
    3884:	00c00044 	movi	r3,1
    3888:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    388c:	0005883a 	mov	r2,zero
    3890:	00001606 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3894:	0001883a 	nop
    3898:	00000d06 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    389c:	0001883a 	nop
    38a0:	00000b06 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    38a4:	0001883a 	nop
    38a8:	00000906 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    38ac:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    38b0:	00000706 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    38b4:	0001883a 	nop
    38b8:	00000106 	br	38c0 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    38bc:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    38c0:	00bff444 	movi	r2,-47
    38c4:	e0bfe105 	stb	r2,-124(fp)
    38c8:	00000106 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    38cc:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    38d0:	e0bffc17 	ldw	r2,-16(fp)
    38d4:	10800017 	ldw	r2,0(r2)
    38d8:	10800204 	addi	r2,r2,8
    38dc:	10800017 	ldw	r2,0(r2)
    38e0:	e13ffc17 	ldw	r4,-16(fp)
    38e4:	103ee83a 	callr	r2
        return rcode;
    38e8:	e0bfe103 	ldbu	r2,-124(fp)
}
    38ec:	e037883a 	mov	sp,fp
    38f0:	dfc00117 	ldw	ra,4(sp)
    38f4:	df000017 	ldw	fp,0(sp)
    38f8:	dec00204 	addi	sp,sp,8
    38fc:	f800283a 	ret

00003900 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3900:	defff904 	addi	sp,sp,-28
    3904:	df000615 	stw	fp,24(sp)
    3908:	df000604 	addi	fp,sp,24
    390c:	e13ffb15 	stw	r4,-20(fp)
    3910:	3009883a 	mov	r4,r6
    3914:	3807883a 	mov	r3,r7
    3918:	e0800117 	ldw	r2,4(fp)
    391c:	e17ffc05 	stb	r5,-16(fp)
    3920:	e13ffd05 	stb	r4,-12(fp)
    3924:	e0fffe05 	stb	r3,-8(fp)
    3928:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    392c:	e0bffb17 	ldw	r2,-20(fp)
    3930:	e0fffc03 	ldbu	r3,-16(fp)
    3934:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3938:	e0800217 	ldw	r2,8(fp)
    393c:	108000c3 	ldbu	r2,3(r2)
    3940:	10803fcc 	andi	r2,r2,255
    3944:	108000cc 	andi	r2,r2,3
    3948:	108000d8 	cmpnei	r2,r2,3
    394c:	1000361e 	bne	r2,zero,3a28 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3950:	e0800217 	ldw	r2,8(fp)
    3954:	10800083 	ldbu	r2,2(r2)
    3958:	10803fcc 	andi	r2,r2,255
    395c:	1080201c 	xori	r2,r2,128
    3960:	10bfe004 	addi	r2,r2,-128
    3964:	1000020e 	bge	r2,zero,3970 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3968:	00800084 	movi	r2,2
    396c:	00000106 	br	3974 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3970:	00800044 	movi	r2,1
    3974:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3978:	e0fffa03 	ldbu	r3,-24(fp)
    397c:	e0800217 	ldw	r2,8(fp)
    3980:	10800083 	ldbu	r2,2(r2)
    3984:	108003cc 	andi	r2,r2,15
    3988:	100b883a 	mov	r5,r2
    398c:	e13ffb17 	ldw	r4,-20(fp)
    3990:	1805883a 	mov	r2,r3
    3994:	1085883a 	add	r2,r2,r2
    3998:	10c5883a 	add	r2,r2,r3
    399c:	2085883a 	add	r2,r4,r2
    39a0:	10800444 	addi	r2,r2,17
    39a4:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    39a8:	e0fffa03 	ldbu	r3,-24(fp)
    39ac:	e0800217 	ldw	r2,8(fp)
    39b0:	11000103 	ldbu	r4,4(r2)
    39b4:	10800143 	ldbu	r2,5(r2)
    39b8:	1004923a 	slli	r2,r2,8
    39bc:	1104b03a 	or	r2,r2,r4
    39c0:	100b883a 	mov	r5,r2
    39c4:	e13ffb17 	ldw	r4,-20(fp)
    39c8:	1805883a 	mov	r2,r3
    39cc:	1085883a 	add	r2,r2,r2
    39d0:	10c5883a 	add	r2,r2,r3
    39d4:	2085883a 	add	r2,r4,r2
    39d8:	10800484 	addi	r2,r2,18
    39dc:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    39e0:	e0bffb17 	ldw	r2,-20(fp)
    39e4:	10c00903 	ldbu	r3,36(r2)
    39e8:	e0800217 	ldw	r2,8(fp)
    39ec:	10800183 	ldbu	r2,6(r2)
    39f0:	18c03fcc 	andi	r3,r3,255
    39f4:	10803fcc 	andi	r2,r2,255
    39f8:	1880042e 	bgeu	r3,r2,3a0c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    39fc:	e0800217 	ldw	r2,8(fp)
    3a00:	10c00183 	ldbu	r3,6(r2)
    3a04:	e0bffb17 	ldw	r2,-20(fp)
    3a08:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3a0c:	e0bffb17 	ldw	r2,-20(fp)
    3a10:	108006c3 	ldbu	r2,27(r2)
    3a14:	10800044 	addi	r2,r2,1
    3a18:	1007883a 	mov	r3,r2
    3a1c:	e0bffb17 	ldw	r2,-20(fp)
    3a20:	10c006c5 	stb	r3,27(r2)
    3a24:	00000106 	br	3a2c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3a28:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3a2c:	e037883a 	mov	sp,fp
    3a30:	df000017 	ldw	fp,0(sp)
    3a34:	dec00104 	addi	sp,sp,4
    3a38:	f800283a 	ret

00003a3c <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3a3c:	213fff04 	addi	r4,r4,-4
    3a40:	00039001 	jmpi	3900 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003a44 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3a44:	defffd04 	addi	sp,sp,-12
    3a48:	df000215 	stw	fp,8(sp)
    3a4c:	df000204 	addi	fp,sp,8
    3a50:	e13ffe15 	stw	r4,-8(fp)
    3a54:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3a58:	0001883a 	nop
    3a5c:	e037883a 	mov	sp,fp
    3a60:	df000017 	ldw	fp,0(sp)
    3a64:	dec00104 	addi	sp,sp,4
    3a68:	f800283a 	ret

00003a6c <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3a6c:	defffd04 	addi	sp,sp,-12
    3a70:	dfc00215 	stw	ra,8(sp)
    3a74:	df000115 	stw	fp,4(sp)
    3a78:	df000104 	addi	fp,sp,4
    3a7c:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3a80:	e0bfff17 	ldw	r2,-4(fp)
    3a84:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3a88:	e0bfff17 	ldw	r2,-4(fp)
    3a8c:	10800317 	ldw	r2,12(r2)
    3a90:	1009883a 	mov	r4,r2
    3a94:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    3a98:	1009883a 	mov	r4,r2
    3a9c:	20800017 	ldw	r2,0(r4)
    3aa0:	10800204 	addi	r2,r2,8
    3aa4:	10800017 	ldw	r2,0(r2)
    3aa8:	e0ffff17 	ldw	r3,-4(fp)
    3aac:	18c00403 	ldbu	r3,16(r3)
    3ab0:	18c03fcc 	andi	r3,r3,255
    3ab4:	180b883a 	mov	r5,r3
    3ab8:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3abc:	e0bfff17 	ldw	r2,-4(fp)
    3ac0:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3ac4:	e0bfff17 	ldw	r2,-4(fp)
    3ac8:	00c00044 	movi	r3,1
    3acc:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3ad0:	e0bfff17 	ldw	r2,-4(fp)
    3ad4:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3ad8:	e0bfff17 	ldw	r2,-4(fp)
    3adc:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3ae0:	e0bfff17 	ldw	r2,-4(fp)
    3ae4:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3ae8:	0005883a 	mov	r2,zero
}
    3aec:	e037883a 	mov	sp,fp
    3af0:	dfc00117 	ldw	ra,4(sp)
    3af4:	df000017 	ldw	fp,0(sp)
    3af8:	dec00204 	addi	sp,sp,8
    3afc:	f800283a 	ret

00003b00 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3b00:	defffa04 	addi	sp,sp,-24
    3b04:	dfc00515 	stw	ra,20(sp)
    3b08:	df000415 	stw	fp,16(sp)
    3b0c:	df000404 	addi	fp,sp,16
    3b10:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3b14:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3b18:	e0bfff17 	ldw	r2,-4(fp)
    3b1c:	10800943 	ldbu	r2,37(r2)
    3b20:	1080005c 	xori	r2,r2,1
    3b24:	10803fcc 	andi	r2,r2,255
    3b28:	10000226 	beq	r2,zero,3b34 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3b2c:	0005883a 	mov	r2,zero
    3b30:	00002c06 	br	3be4 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3b34:	00006dc0 	call	6dc <_Z6millisv>
    3b38:	1007883a 	mov	r3,r2
    3b3c:	e0bfff17 	ldw	r2,-4(fp)
    3b40:	10800717 	ldw	r2,28(r2)
    3b44:	1885c83a 	sub	r2,r3,r2
    3b48:	0084303a 	nor	r2,zero,r2
    3b4c:	1004d7fa 	srli	r2,r2,31
    3b50:	10803fcc 	andi	r2,r2,255
    3b54:	10002226 	beq	r2,zero,3be0 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3b58:	00006dc0 	call	6dc <_Z6millisv>
    3b5c:	1007883a 	mov	r3,r2
    3b60:	e0bfff17 	ldw	r2,-4(fp)
    3b64:	10800903 	ldbu	r2,36(r2)
    3b68:	10803fcc 	andi	r2,r2,255
    3b6c:	1887883a 	add	r3,r3,r2
    3b70:	e0bfff17 	ldw	r2,-4(fp)
    3b74:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3b78:	e0bfff17 	ldw	r2,-4(fp)
    3b7c:	10800603 	ldbu	r2,24(r2)
    3b80:	10803fcc 	andi	r2,r2,255
    3b84:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3b88:	e0bfff17 	ldw	r2,-4(fp)
    3b8c:	11000317 	ldw	r4,12(r2)
    3b90:	e0bfff17 	ldw	r2,-4(fp)
    3b94:	10800403 	ldbu	r2,16(r2)
    3b98:	11403fcc 	andi	r5,r2,255
    3b9c:	e0bfff17 	ldw	r2,-4(fp)
    3ba0:	108005c3 	ldbu	r2,23(r2)
    3ba4:	11803fcc 	andi	r6,r2,255
    3ba8:	e0bfff17 	ldw	r2,-4(fp)
    3bac:	10800f84 	addi	r2,r2,62
    3bb0:	e0ffff17 	ldw	r3,-4(fp)
    3bb4:	18c00903 	ldbu	r3,36(r3)
    3bb8:	18c03fcc 	andi	r3,r3,255
    3bbc:	e1fffe84 	addi	r7,fp,-6
    3bc0:	d8c00115 	stw	r3,4(sp)
    3bc4:	d8800015 	stw	r2,0(sp)
    3bc8:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    3bcc:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    3bd0:	e0bffe43 	ldbu	r2,-7(fp)
    3bd4:	1000021e 	bne	r2,zero,3be0 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    3bd8:	e13fff17 	ldw	r4,-4(fp)
    3bdc:	0003bf80 	call	3bf8 <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    3be0:	e0bffe03 	ldbu	r2,-8(fp)
}
    3be4:	e037883a 	mov	sp,fp
    3be8:	dfc00117 	ldw	ra,4(sp)
    3bec:	df000017 	ldw	fp,0(sp)
    3bf0:	dec00204 	addi	sp,sp,8
    3bf4:	f800283a 	ret

00003bf8 <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    3bf8:	defffd04 	addi	sp,sp,-12
    3bfc:	df000215 	stw	fp,8(sp)
    3c00:	df000204 	addi	fp,sp,8
    3c04:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    3c08:	e0bfff17 	ldw	r2,-4(fp)
    3c0c:	10800f83 	ldbu	r2,62(r2)
    3c10:	10803fcc 	andi	r2,r2,255
    3c14:	108001d8 	cmpnei	r2,r2,7
    3c18:	10002f1e 	bne	r2,zero,3cd8 <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    3c1c:	e0bfff17 	ldw	r2,-4(fp)
    3c20:	10801083 	ldbu	r2,66(r2)
    3c24:	10803fcc 	andi	r2,r2,255
    3c28:	10800058 	cmpnei	r2,r2,1
    3c2c:	10000a1e 	bne	r2,zero,3c58 <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    3c30:	e0bfff17 	ldw	r2,-4(fp)
    3c34:	10c0098b 	ldhu	r3,38(r2)
    3c38:	008000b4 	movhi	r2,2
    3c3c:	108ebe84 	addi	r2,r2,15098
    3c40:	1080000b 	ldhu	r2,0(r2)
    3c44:	1884b03a 	or	r2,r3,r2
    3c48:	1007883a 	mov	r3,r2
    3c4c:	e0bfff17 	ldw	r2,-4(fp)
    3c50:	10c0098d 	sth	r3,38(r2)
    3c54:	00000b06 	br	3c84 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    3c58:	e0bfff17 	ldw	r2,-4(fp)
    3c5c:	1080098b 	ldhu	r2,38(r2)
    3c60:	1007883a 	mov	r3,r2
    3c64:	008000b4 	movhi	r2,2
    3c68:	108ebe84 	addi	r2,r2,15098
    3c6c:	1080000b 	ldhu	r2,0(r2)
    3c70:	0084303a 	nor	r2,zero,r2
    3c74:	1884703a 	and	r2,r3,r2
    3c78:	1007883a 	mov	r3,r2
    3c7c:	e0bfff17 	ldw	r2,-4(fp)
    3c80:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    3c84:	e0bfff17 	ldw	r2,-4(fp)
    3c88:	10c0098b 	ldhu	r3,38(r2)
    3c8c:	e0bfff17 	ldw	r2,-4(fp)
    3c90:	10800a0b 	ldhu	r2,40(r2)
    3c94:	18ffffcc 	andi	r3,r3,65535
    3c98:	10bfffcc 	andi	r2,r2,65535
    3c9c:	18800e26 	beq	r3,r2,3cd8 <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    3ca0:	e0bfff17 	ldw	r2,-4(fp)
    3ca4:	1080098b 	ldhu	r2,38(r2)
    3ca8:	1007883a 	mov	r3,r2
    3cac:	e0bfff17 	ldw	r2,-4(fp)
    3cb0:	10800a0b 	ldhu	r2,40(r2)
    3cb4:	0084303a 	nor	r2,zero,r2
    3cb8:	1884703a 	and	r2,r3,r2
    3cbc:	1007883a 	mov	r3,r2
    3cc0:	e0bfff17 	ldw	r2,-4(fp)
    3cc4:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    3cc8:	e0bfff17 	ldw	r2,-4(fp)
    3ccc:	10c0098b 	ldhu	r3,38(r2)
    3cd0:	e0bfff17 	ldw	r2,-4(fp)
    3cd4:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    3cd8:	e0bfff17 	ldw	r2,-4(fp)
    3cdc:	10800f83 	ldbu	r2,62(r2)
    3ce0:	10803fcc 	andi	r2,r2,255
    3ce4:	10800820 	cmpeqi	r2,r2,32
    3ce8:	1000b026 	beq	r2,zero,3fac <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    3cec:	e0bfff17 	ldw	r2,-4(fp)
    3cf0:	10c0098b 	ldhu	r3,38(r2)
    3cf4:	008000b4 	movhi	r2,2
    3cf8:	108ebe84 	addi	r2,r2,15098
    3cfc:	1080000b 	ldhu	r2,0(r2)
    3d00:	1884703a 	and	r2,r3,r2
    3d04:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    3d08:	e0bfff17 	ldw	r2,-4(fp)
    3d0c:	108010c3 	ldbu	r2,67(r2)
    3d10:	10803fcc 	andi	r2,r2,255
    3d14:	108003cc 	andi	r2,r2,15
    3d18:	1004923a 	slli	r2,r2,8
    3d1c:	1007883a 	mov	r3,r2
    3d20:	e0bffe0b 	ldhu	r2,-8(fp)
    3d24:	1884b03a 	or	r2,r3,r2
    3d28:	1007883a 	mov	r3,r2
    3d2c:	e0bfff17 	ldw	r2,-4(fp)
    3d30:	10801083 	ldbu	r2,66(r2)
    3d34:	10803fcc 	andi	r2,r2,255
    3d38:	10803c0c 	andi	r2,r2,240
    3d3c:	1884b03a 	or	r2,r3,r2
    3d40:	1007883a 	mov	r3,r2
    3d44:	e0bfff17 	ldw	r2,-4(fp)
    3d48:	10801083 	ldbu	r2,66(r2)
    3d4c:	10803fcc 	andi	r2,r2,255
    3d50:	1080030c 	andi	r2,r2,12
    3d54:	100492ba 	slli	r2,r2,10
    3d58:	1884b03a 	or	r2,r3,r2
    3d5c:	1007883a 	mov	r3,r2
    3d60:	e0bfff17 	ldw	r2,-4(fp)
    3d64:	10801083 	ldbu	r2,66(r2)
    3d68:	10803fcc 	andi	r2,r2,255
    3d6c:	1080004c 	andi	r2,r2,1
    3d70:	100490fa 	slli	r2,r2,3
    3d74:	1884b03a 	or	r2,r3,r2
    3d78:	1007883a 	mov	r3,r2
    3d7c:	e0bfff17 	ldw	r2,-4(fp)
    3d80:	108010c3 	ldbu	r2,67(r2)
    3d84:	10803fcc 	andi	r2,r2,255
    3d88:	1080300c 	andi	r2,r2,192
    3d8c:	1004923a 	slli	r2,r2,8
    3d90:	1884b03a 	or	r2,r3,r2
    3d94:	1007883a 	mov	r3,r2
    3d98:	e0bfff17 	ldw	r2,-4(fp)
    3d9c:	108010c3 	ldbu	r2,67(r2)
    3da0:	10803fcc 	andi	r2,r2,255
    3da4:	10800c0c 	andi	r2,r2,48
    3da8:	1005d13a 	srai	r2,r2,4
    3dac:	1884b03a 	or	r2,r3,r2
    3db0:	1007883a 	mov	r3,r2
    3db4:	e0bfff17 	ldw	r2,-4(fp)
    3db8:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    3dbc:	e0bfff17 	ldw	r2,-4(fp)
    3dc0:	10801143 	ldbu	r2,69(r2)
    3dc4:	10803fcc 	andi	r2,r2,255
    3dc8:	1004923a 	slli	r2,r2,8
    3dcc:	1007883a 	mov	r3,r2
    3dd0:	e0bfff17 	ldw	r2,-4(fp)
    3dd4:	10801103 	ldbu	r2,68(r2)
    3dd8:	10803fcc 	andi	r2,r2,255
    3ddc:	1884b03a 	or	r2,r3,r2
    3de0:	1007883a 	mov	r3,r2
    3de4:	e0bfff17 	ldw	r2,-4(fp)
    3de8:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    3dec:	e0bfff17 	ldw	r2,-4(fp)
    3df0:	108011c3 	ldbu	r2,71(r2)
    3df4:	10803fcc 	andi	r2,r2,255
    3df8:	1004923a 	slli	r2,r2,8
    3dfc:	1007883a 	mov	r3,r2
    3e00:	e0bfff17 	ldw	r2,-4(fp)
    3e04:	10801183 	ldbu	r2,70(r2)
    3e08:	10803fcc 	andi	r2,r2,255
    3e0c:	1884b03a 	or	r2,r3,r2
    3e10:	1007883a 	mov	r3,r2
    3e14:	e0bfff17 	ldw	r2,-4(fp)
    3e18:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    3e1c:	e0bfff17 	ldw	r2,-4(fp)
    3e20:	10801243 	ldbu	r2,73(r2)
    3e24:	10803fcc 	andi	r2,r2,255
    3e28:	1004923a 	slli	r2,r2,8
    3e2c:	1007883a 	mov	r3,r2
    3e30:	e0bfff17 	ldw	r2,-4(fp)
    3e34:	10801203 	ldbu	r2,72(r2)
    3e38:	10803fcc 	andi	r2,r2,255
    3e3c:	1884b03a 	or	r2,r3,r2
    3e40:	1007883a 	mov	r3,r2
    3e44:	e0bfff17 	ldw	r2,-4(fp)
    3e48:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    3e4c:	e0bfff17 	ldw	r2,-4(fp)
    3e50:	108012c3 	ldbu	r2,75(r2)
    3e54:	10803fcc 	andi	r2,r2,255
    3e58:	1004923a 	slli	r2,r2,8
    3e5c:	1007883a 	mov	r3,r2
    3e60:	e0bfff17 	ldw	r2,-4(fp)
    3e64:	10801283 	ldbu	r2,74(r2)
    3e68:	10803fcc 	andi	r2,r2,255
    3e6c:	1884b03a 	or	r2,r3,r2
    3e70:	1007883a 	mov	r3,r2
    3e74:	e0bfff17 	ldw	r2,-4(fp)
    3e78:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    3e7c:	e0bfff17 	ldw	r2,-4(fp)
    3e80:	10801343 	ldbu	r2,77(r2)
    3e84:	10803fcc 	andi	r2,r2,255
    3e88:	1004923a 	slli	r2,r2,8
    3e8c:	1007883a 	mov	r3,r2
    3e90:	e0bfff17 	ldw	r2,-4(fp)
    3e94:	10801303 	ldbu	r2,76(r2)
    3e98:	10803fcc 	andi	r2,r2,255
    3e9c:	1884b03a 	or	r2,r3,r2
    3ea0:	1007883a 	mov	r3,r2
    3ea4:	e0bfff17 	ldw	r2,-4(fp)
    3ea8:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    3eac:	e0bfff17 	ldw	r2,-4(fp)
    3eb0:	108013c3 	ldbu	r2,79(r2)
    3eb4:	10803fcc 	andi	r2,r2,255
    3eb8:	1004923a 	slli	r2,r2,8
    3ebc:	1007883a 	mov	r3,r2
    3ec0:	e0bfff17 	ldw	r2,-4(fp)
    3ec4:	10801383 	ldbu	r2,78(r2)
    3ec8:	10803fcc 	andi	r2,r2,255
    3ecc:	1884b03a 	or	r2,r3,r2
    3ed0:	1007883a 	mov	r3,r2
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
    3ed8:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10c0098b 	ldhu	r3,38(r2)
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	10800a0b 	ldhu	r2,40(r2)
    3eec:	18ffffcc 	andi	r3,r3,65535
    3ef0:	10bfffcc 	andi	r2,r2,65535
    3ef4:	18800e26 	beq	r3,r2,3f30 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    3ef8:	e0bfff17 	ldw	r2,-4(fp)
    3efc:	1080098b 	ldhu	r2,38(r2)
    3f00:	1007883a 	mov	r3,r2
    3f04:	e0bfff17 	ldw	r2,-4(fp)
    3f08:	10800a0b 	ldhu	r2,40(r2)
    3f0c:	0084303a 	nor	r2,zero,r2
    3f10:	1884703a 	and	r2,r3,r2
    3f14:	1007883a 	mov	r3,r2
    3f18:	e0bfff17 	ldw	r2,-4(fp)
    3f1c:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    3f20:	e0bfff17 	ldw	r2,-4(fp)
    3f24:	10c0098b 	ldhu	r3,38(r2)
    3f28:	e0bfff17 	ldw	r2,-4(fp)
    3f2c:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    3f30:	e0bfff17 	ldw	r2,-4(fp)
    3f34:	10800d0b 	ldhu	r2,52(r2)
    3f38:	10bfffcc 	andi	r2,r2,65535
    3f3c:	10000726 	beq	r2,zero,3f5c <_ZN7XBOXONE10readReportEv+0x364>
    3f40:	e0bfff17 	ldw	r2,-4(fp)
    3f44:	10800e0b 	ldhu	r2,56(r2)
    3f48:	10bfffcc 	andi	r2,r2,65535
    3f4c:	1000031e 	bne	r2,zero,3f5c <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    3f50:	e0bfff17 	ldw	r2,-4(fp)
    3f54:	00c00044 	movi	r3,1
    3f58:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    3f5c:	e0bfff17 	ldw	r2,-4(fp)
    3f60:	10c00d0b 	ldhu	r3,52(r2)
    3f64:	e0bfff17 	ldw	r2,-4(fp)
    3f68:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    3f6c:	e0bfff17 	ldw	r2,-4(fp)
    3f70:	10800d8b 	ldhu	r2,54(r2)
    3f74:	10bfffcc 	andi	r2,r2,65535
    3f78:	10000726 	beq	r2,zero,3f98 <_ZN7XBOXONE10readReportEv+0x3a0>
    3f7c:	e0bfff17 	ldw	r2,-4(fp)
    3f80:	10800e8b 	ldhu	r2,58(r2)
    3f84:	10bfffcc 	andi	r2,r2,65535
    3f88:	1000031e 	bne	r2,zero,3f98 <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    3f8c:	e0bfff17 	ldw	r2,-4(fp)
    3f90:	00c00044 	movi	r3,1
    3f94:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    3f98:	e0bfff17 	ldw	r2,-4(fp)
    3f9c:	10c00d8b 	ldhu	r3,54(r2)
    3fa0:	e0bfff17 	ldw	r2,-4(fp)
    3fa4:	10c00e8d 	sth	r3,58(r2)
    3fa8:	00000106 	br	3fb0 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    3fac:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    3fb0:	e037883a 	mov	sp,fp
    3fb4:	df000017 	ldw	fp,0(sp)
    3fb8:	dec00104 	addi	sp,sp,4
    3fbc:	f800283a 	ret

00003fc0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    3fc0:	defffd04 	addi	sp,sp,-12
    3fc4:	df000215 	stw	fp,8(sp)
    3fc8:	df000204 	addi	fp,sp,8
    3fcc:	e13ffe15 	stw	r4,-8(fp)
    3fd0:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    3fd4:	e0bfff17 	ldw	r2,-4(fp)
    3fd8:	10800218 	cmpnei	r2,r2,8
    3fdc:	1000031e 	bne	r2,zero,3fec <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    3fe0:	e0bffe17 	ldw	r2,-8(fp)
    3fe4:	10800d0b 	ldhu	r2,52(r2)
    3fe8:	00001306 	br	4038 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    3fec:	e0bfff17 	ldw	r2,-4(fp)
    3ff0:	10800258 	cmpnei	r2,r2,9
    3ff4:	1000031e 	bne	r2,zero,4004 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    3ff8:	e0bffe17 	ldw	r2,-8(fp)
    3ffc:	10800d8b 	ldhu	r2,54(r2)
    4000:	00000d06 	br	4038 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    4004:	e0bffe17 	ldw	r2,-8(fp)
    4008:	10c0098b 	ldhu	r3,38(r2)
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10803fcc 	andi	r2,r2,255
    4014:	1089883a 	add	r4,r2,r2
    4018:	008000b4 	movhi	r2,2
    401c:	108eb684 	addi	r2,r2,15066
    4020:	2085883a 	add	r2,r4,r2
    4024:	1080000b 	ldhu	r2,0(r2)
    4028:	1884703a 	and	r2,r3,r2
    402c:	10bfffcc 	andi	r2,r2,65535
    4030:	1004c03a 	cmpne	r2,r2,zero
    4034:	10803fcc 	andi	r2,r2,255
}
    4038:	e037883a 	mov	sp,fp
    403c:	df000017 	ldw	fp,0(sp)
    4040:	dec00104 	addi	sp,sp,4
    4044:	f800283a 	ret

00004048 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    4048:	defffc04 	addi	sp,sp,-16
    404c:	df000315 	stw	fp,12(sp)
    4050:	df000304 	addi	fp,sp,12
    4054:	e13ffe15 	stw	r4,-8(fp)
    4058:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    405c:	e0bfff17 	ldw	r2,-4(fp)
    4060:	10800218 	cmpnei	r2,r2,8
    4064:	10000a1e 	bne	r2,zero,4090 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    4068:	e0bffe17 	ldw	r2,-8(fp)
    406c:	10800f03 	ldbu	r2,60(r2)
    4070:	10803fcc 	andi	r2,r2,255
    4074:	10000426 	beq	r2,zero,4088 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    4078:	e0bffe17 	ldw	r2,-8(fp)
    407c:	10000f05 	stb	zero,60(r2)
                        return true;
    4080:	00800044 	movi	r2,1
    4084:	00002806 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    4088:	0005883a 	mov	r2,zero
    408c:	00002606 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    4090:	e0bfff17 	ldw	r2,-4(fp)
    4094:	10800258 	cmpnei	r2,r2,9
    4098:	10000a1e 	bne	r2,zero,40c4 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    409c:	e0bffe17 	ldw	r2,-8(fp)
    40a0:	10800f43 	ldbu	r2,61(r2)
    40a4:	10803fcc 	andi	r2,r2,255
    40a8:	10000426 	beq	r2,zero,40bc <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    40ac:	e0bffe17 	ldw	r2,-8(fp)
    40b0:	10000f45 	stb	zero,61(r2)
                        return true;
    40b4:	00800044 	movi	r2,1
    40b8:	00001b06 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    40bc:	0005883a 	mov	r2,zero
    40c0:	00001906 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10803fcc 	andi	r2,r2,255
    40cc:	1087883a 	add	r3,r2,r2
    40d0:	008000b4 	movhi	r2,2
    40d4:	108eb684 	addi	r2,r2,15066
    40d8:	1885883a 	add	r2,r3,r2
    40dc:	1080000b 	ldhu	r2,0(r2)
    40e0:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    40e4:	e0bffe17 	ldw	r2,-8(fp)
    40e8:	10c00a8b 	ldhu	r3,42(r2)
    40ec:	e0bffd0b 	ldhu	r2,-12(fp)
    40f0:	1884703a 	and	r2,r3,r2
    40f4:	10bfffcc 	andi	r2,r2,65535
    40f8:	1004c03a 	cmpne	r2,r2,zero
    40fc:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    4100:	e0bffe17 	ldw	r2,-8(fp)
    4104:	10800a8b 	ldhu	r2,42(r2)
    4108:	1007883a 	mov	r3,r2
    410c:	e0bffd0b 	ldhu	r2,-12(fp)
    4110:	0084303a 	nor	r2,zero,r2
    4114:	1884703a 	and	r2,r3,r2
    4118:	1007883a 	mov	r3,r2
    411c:	e0bffe17 	ldw	r2,-8(fp)
    4120:	10c00a8d 	sth	r3,42(r2)
        return click;
    4124:	e0bffd83 	ldbu	r2,-10(fp)
}
    4128:	e037883a 	mov	sp,fp
    412c:	df000017 	ldw	fp,0(sp)
    4130:	dec00104 	addi	sp,sp,4
    4134:	f800283a 	ret

00004138 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    4138:	defffd04 	addi	sp,sp,-12
    413c:	df000215 	stw	fp,8(sp)
    4140:	df000204 	addi	fp,sp,8
    4144:	e13ffe15 	stw	r4,-8(fp)
    4148:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    414c:	e0bfff17 	ldw	r2,-4(fp)
    4150:	e0fffe17 	ldw	r3,-8(fp)
    4154:	10800584 	addi	r2,r2,22
    4158:	1085883a 	add	r2,r2,r2
    415c:	1885883a 	add	r2,r3,r2
    4160:	1080000b 	ldhu	r2,0(r2)
}
    4164:	e037883a 	mov	sp,fp
    4168:	df000017 	ldw	fp,0(sp)
    416c:	dec00104 	addi	sp,sp,4
    4170:	f800283a 	ret

00004174 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4174:	defff904 	addi	sp,sp,-28
    4178:	dfc00615 	stw	ra,24(sp)
    417c:	df000515 	stw	fp,20(sp)
    4180:	df000504 	addi	fp,sp,20
    4184:	e13ffd15 	stw	r4,-12(fp)
    4188:	e17ffe15 	stw	r5,-8(fp)
    418c:	3005883a 	mov	r2,r6
    4190:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4194:	e0bffe17 	ldw	r2,-8(fp)
    4198:	10c00084 	addi	r3,r2,2
    419c:	e0bffd17 	ldw	r2,-12(fp)
    41a0:	10801f83 	ldbu	r2,126(r2)
    41a4:	11000044 	addi	r4,r2,1
    41a8:	200b883a 	mov	r5,r4
    41ac:	e13ffd17 	ldw	r4,-12(fp)
    41b0:	21401f85 	stb	r5,126(r4)
    41b4:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    41b8:	e0bffd17 	ldw	r2,-12(fp)
    41bc:	10c00317 	ldw	r3,12(r2)
    41c0:	e0bffd17 	ldw	r2,-12(fp)
    41c4:	10800403 	ldbu	r2,16(r2)
    41c8:	11003fcc 	andi	r4,r2,255
    41cc:	e0bffd17 	ldw	r2,-12(fp)
    41d0:	10800503 	ldbu	r2,20(r2)
    41d4:	11403fcc 	andi	r5,r2,255
    41d8:	e1bfff0b 	ldhu	r6,-4(fp)
    41dc:	e0bffe17 	ldw	r2,-8(fp)
    41e0:	d8800015 	stw	r2,0(sp)
    41e4:	300f883a 	mov	r7,r6
    41e8:	280d883a 	mov	r6,r5
    41ec:	200b883a 	mov	r5,r4
    41f0:	1809883a 	mov	r4,r3
    41f4:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    41f8:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    41fc:	e0bffc03 	ldbu	r2,-16(fp)
}
    4200:	e037883a 	mov	sp,fp
    4204:	dfc00117 	ldw	ra,4(sp)
    4208:	df000017 	ldw	fp,0(sp)
    420c:	dec00204 	addi	sp,sp,8
    4210:	f800283a 	ret

00004214 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    4214:	defff904 	addi	sp,sp,-28
    4218:	dfc00615 	stw	ra,24(sp)
    421c:	df000515 	stw	fp,20(sp)
    4220:	df000504 	addi	fp,sp,20
    4224:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4228:	00800244 	movi	r2,9
    422c:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4230:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4234:	00800244 	movi	r2,9
    4238:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    423c:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4240:	008003c4 	movi	r2,15
    4244:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    4248:	00800104 	movi	r2,4
    424c:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    4250:	00800104 	movi	r2,4
    4254:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    4258:	00800804 	movi	r2,32
    425c:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    4260:	00800804 	movi	r2,32
    4264:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    4268:	00bfe004 	movi	r2,-128
    426c:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4270:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4274:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4278:	01800344 	movi	r6,13
    427c:	e17ffb04 	addi	r5,fp,-20
    4280:	e13fff17 	ldw	r4,-4(fp)
    4284:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	10800817 	ldw	r2,32(r2)
    4290:	10000326 	beq	r2,zero,42a0 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	10800817 	ldw	r2,32(r2)
    429c:	103ee83a 	callr	r2
}
    42a0:	0001883a 	nop
    42a4:	e037883a 	mov	sp,fp
    42a8:	dfc00117 	ldw	ra,4(sp)
    42ac:	df000017 	ldw	fp,0(sp)
    42b0:	dec00204 	addi	sp,sp,8
    42b4:	f800283a 	ret

000042b8 <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    42b8:	defff904 	addi	sp,sp,-28
    42bc:	dfc00615 	stw	ra,24(sp)
    42c0:	df000515 	stw	fp,20(sp)
    42c4:	df000504 	addi	fp,sp,20
    42c8:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    42cc:	00800244 	movi	r2,9
    42d0:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    42d4:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    42d8:	00800244 	movi	r2,9
    42dc:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    42e0:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    42e4:	008003c4 	movi	r2,15
    42e8:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    42ec:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    42f0:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    42f4:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    42f8:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    42fc:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4300:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4304:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4308:	01800344 	movi	r6,13
    430c:	e17ffb04 	addi	r5,fp,-20
    4310:	e13fff17 	ldw	r4,-4(fp)
    4314:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
}
    4318:	0001883a 	nop
    431c:	e037883a 	mov	sp,fp
    4320:	dfc00117 	ldw	ra,4(sp)
    4324:	df000017 	ldw	fp,0(sp)
    4328:	dec00204 	addi	sp,sp,8
    432c:	f800283a 	ret

00004330 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4330:	defff504 	addi	sp,sp,-44
    4334:	dfc00a15 	stw	ra,40(sp)
    4338:	df000915 	stw	fp,36(sp)
    433c:	df000904 	addi	fp,sp,36
    4340:	e13ffb15 	stw	r4,-20(fp)
    4344:	3009883a 	mov	r4,r6
    4348:	3807883a 	mov	r3,r7
    434c:	e0800217 	ldw	r2,8(fp)
    4350:	e17ffc05 	stb	r5,-16(fp)
    4354:	e13ffd05 	stb	r4,-12(fp)
    4358:	e0fffe05 	stb	r3,-8(fp)
    435c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4360:	00800244 	movi	r2,9
    4364:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    4368:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    436c:	00800244 	movi	r2,9
    4370:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4374:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4378:	008003c4 	movi	r2,15
    437c:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    4380:	e0bffc03 	ldbu	r2,-16(fp)
    4384:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    4388:	e0bffd03 	ldbu	r2,-12(fp)
    438c:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    4390:	e0bffe03 	ldbu	r2,-8(fp)
    4394:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    4398:	e0bfff03 	ldbu	r2,-4(fp)
    439c:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    43a0:	00bfffc4 	movi	r2,-1
    43a4:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    43a8:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    43ac:	00bfffc4 	movi	r2,-1
    43b0:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    43b4:	01800344 	movi	r6,13
    43b8:	e17ff704 	addi	r5,fp,-36
    43bc:	e13ffb17 	ldw	r4,-20(fp)
    43c0:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
}
    43c4:	0001883a 	nop
    43c8:	e037883a 	mov	sp,fp
    43cc:	dfc00117 	ldw	ra,4(sp)
    43d0:	df000017 	ldw	fp,0(sp)
    43d4:	dec00204 	addi	sp,sp,8
    43d8:	f800283a 	ret

000043dc <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    43dc:	defffe04 	addi	sp,sp,-8
    43e0:	df000115 	stw	fp,4(sp)
    43e4:	df000104 	addi	fp,sp,4
    43e8:	e13fff15 	stw	r4,-4(fp)
    43ec:	e0bfff17 	ldw	r2,-4(fp)
    43f0:	10000005 	stb	zero,0(r2)
    43f4:	e0bfff17 	ldw	r2,-4(fp)
    43f8:	10c00043 	ldbu	r3,1(r2)
    43fc:	1806703a 	and	r3,r3,zero
    4400:	10c00045 	stb	r3,1(r2)
    4404:	10c00083 	ldbu	r3,2(r2)
    4408:	1806703a 	and	r3,r3,zero
    440c:	10c00085 	stb	r3,2(r2)
    4410:	10c000c3 	ldbu	r3,3(r2)
    4414:	1806703a 	and	r3,r3,zero
    4418:	10c000c5 	stb	r3,3(r2)
    441c:	10c00103 	ldbu	r3,4(r2)
    4420:	1806703a 	and	r3,r3,zero
    4424:	10c00105 	stb	r3,4(r2)
        };
    4428:	0001883a 	nop
    442c:	e037883a 	mov	sp,fp
    4430:	df000017 	ldw	fp,0(sp)
    4434:	dec00104 	addi	sp,sp,4
    4438:	f800283a 	ret

0000443c <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    443c:	defffe04 	addi	sp,sp,-8
    4440:	df000115 	stw	fp,4(sp)
    4444:	df000104 	addi	fp,sp,4
    4448:	e13fff15 	stw	r4,-4(fp)
    444c:	e0bfff17 	ldw	r2,-4(fp)
    4450:	10000015 	stw	zero,0(r2)
    4454:	e0bfff17 	ldw	r2,-4(fp)
    4458:	10000105 	stb	zero,4(r2)
    445c:	e0bfff17 	ldw	r2,-4(fp)
    4460:	10000145 	stb	zero,5(r2)
        };
    4464:	0001883a 	nop
    4468:	e037883a 	mov	sp,fp
    446c:	df000017 	ldw	fp,0(sp)
    4470:	dec00104 	addi	sp,sp,4
    4474:	f800283a 	ret

00004478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    4478:	defffd04 	addi	sp,sp,-12
    447c:	df000215 	stw	fp,8(sp)
    4480:	df000204 	addi	fp,sp,8
    4484:	e13ffe15 	stw	r4,-8(fp)
    4488:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    448c:	e0bfff17 	ldw	r2,-4(fp)
    4490:	10c00043 	ldbu	r3,1(r2)
    4494:	11000083 	ldbu	r4,2(r2)
    4498:	2008923a 	slli	r4,r4,8
    449c:	20c6b03a 	or	r3,r4,r3
    44a0:	110000c3 	ldbu	r4,3(r2)
    44a4:	2008943a 	slli	r4,r4,16
    44a8:	20c6b03a 	or	r3,r4,r3
    44ac:	10800103 	ldbu	r2,4(r2)
    44b0:	1004963a 	slli	r2,r2,24
    44b4:	10c4b03a 	or	r2,r2,r3
    44b8:	1007883a 	mov	r3,r2
    44bc:	e0bffe17 	ldw	r2,-8(fp)
    44c0:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    44c4:	e0bfff17 	ldw	r2,-4(fp)
    44c8:	10c00003 	ldbu	r3,0(r2)
    44cc:	e0bffe17 	ldw	r2,-8(fp)
    44d0:	10c00145 	stb	r3,5(r2)
    44d4:	e0bffe17 	ldw	r2,-8(fp)
    44d8:	10c00143 	ldbu	r3,5(r2)
    44dc:	e0bffe17 	ldw	r2,-8(fp)
    44e0:	10c00105 	stb	r3,4(r2)
        };
    44e4:	0001883a 	nop
    44e8:	e037883a 	mov	sp,fp
    44ec:	df000017 	ldw	fp,0(sp)
    44f0:	dec00104 	addi	sp,sp,4
    44f4:	f800283a 	ret

000044f8 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    44f8:	defffe04 	addi	sp,sp,-8
    44fc:	df000115 	stw	fp,4(sp)
    4500:	df000104 	addi	fp,sp,4
    4504:	e13fff15 	stw	r4,-4(fp)
    4508:	e0bfff17 	ldw	r2,-4(fp)
    450c:	10000015 	stw	zero,0(r2)
    4510:	e0bfff17 	ldw	r2,-4(fp)
    4514:	10000105 	stb	zero,4(r2)
    4518:	e0bfff17 	ldw	r2,-4(fp)
    451c:	1000018d 	sth	zero,6(r2)
        };
    4520:	0001883a 	nop
    4524:	e037883a 	mov	sp,fp
    4528:	df000017 	ldw	fp,0(sp)
    452c:	dec00104 	addi	sp,sp,4
    4530:	f800283a 	ret

00004534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4534:	defffd04 	addi	sp,sp,-12
    4538:	df000215 	stw	fp,8(sp)
    453c:	df000204 	addi	fp,sp,8
    4540:	e13ffe15 	stw	r4,-8(fp)
    4544:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4548:	e0bfff17 	ldw	r2,-4(fp)
    454c:	10c00043 	ldbu	r3,1(r2)
    4550:	11000083 	ldbu	r4,2(r2)
    4554:	2008923a 	slli	r4,r4,8
    4558:	20c6b03a 	or	r3,r4,r3
    455c:	110000c3 	ldbu	r4,3(r2)
    4560:	2008943a 	slli	r4,r4,16
    4564:	20c6b03a 	or	r3,r4,r3
    4568:	10800103 	ldbu	r2,4(r2)
    456c:	1004963a 	slli	r2,r2,24
    4570:	10c4b03a 	or	r2,r2,r3
    4574:	1007883a 	mov	r3,r2
    4578:	e0bffe17 	ldw	r2,-8(fp)
    457c:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    4580:	e0bffe17 	ldw	r2,-8(fp)
    4584:	1000018d 	sth	zero,6(r2)
        };
    4588:	0001883a 	nop
    458c:	e037883a 	mov	sp,fp
    4590:	df000017 	ldw	fp,0(sp)
    4594:	dec00104 	addi	sp,sp,4
    4598:	f800283a 	ret

0000459c <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    459c:	defffb04 	addi	sp,sp,-20
    45a0:	df000415 	stw	fp,16(sp)
    45a4:	df000404 	addi	fp,sp,16
    45a8:	e13ffc15 	stw	r4,-16(fp)
    45ac:	e17ffd15 	stw	r5,-12(fp)
    45b0:	e1bffe15 	stw	r6,-8(fp)
    45b4:	3805883a 	mov	r2,r7
    45b8:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    45bc:	e0bffc17 	ldw	r2,-16(fp)
    45c0:	10800103 	ldbu	r2,4(r2)
    45c4:	10803fcc 	andi	r2,r2,255
    45c8:	10000326 	beq	r2,zero,45d8 <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    45cc:	10800060 	cmpeqi	r2,r2,1
    45d0:	10000a1e 	bne	r2,zero,45fc <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    45d4:	00002906 	br	467c <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    45d8:	e0bffc17 	ldw	r2,-16(fp)
    45dc:	e0ffff0b 	ldhu	r3,-4(fp)
    45e0:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    45e4:	e0bffc17 	ldw	r2,-16(fp)
    45e8:	10800103 	ldbu	r2,4(r2)
    45ec:	10800044 	addi	r2,r2,1
    45f0:	1007883a 	mov	r3,r2
    45f4:	e0bffc17 	ldw	r2,-16(fp)
    45f8:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    45fc:	e0bffc17 	ldw	r2,-16(fp)
    4600:	1080018b 	ldhu	r2,6(r2)
    4604:	10bfffcc 	andi	r2,r2,65535
    4608:	10001626 	beq	r2,zero,4664 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    460c:	e0bffe17 	ldw	r2,-8(fp)
    4610:	1080000b 	ldhu	r2,0(r2)
    4614:	10bfffcc 	andi	r2,r2,65535
    4618:	10001226 	beq	r2,zero,4664 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    461c:	e0bffc17 	ldw	r2,-16(fp)
    4620:	1080018b 	ldhu	r2,6(r2)
    4624:	10bfffc4 	addi	r2,r2,-1
    4628:	1007883a 	mov	r3,r2
    462c:	e0bffc17 	ldw	r2,-16(fp)
    4630:	10c0018d 	sth	r3,6(r2)
    4634:	e0bffd17 	ldw	r2,-12(fp)
    4638:	10800017 	ldw	r2,0(r2)
    463c:	10c00044 	addi	r3,r2,1
    4640:	e0bffd17 	ldw	r2,-12(fp)
    4644:	10c00015 	stw	r3,0(r2)
    4648:	e0bffe17 	ldw	r2,-8(fp)
    464c:	1080000b 	ldhu	r2,0(r2)
    4650:	10bfffc4 	addi	r2,r2,-1
    4654:	1007883a 	mov	r3,r2
    4658:	e0bffe17 	ldw	r2,-8(fp)
    465c:	10c0000d 	sth	r3,0(r2)
    4660:	003fe606 	br	45fc <__alt_data_end+0xfc0045fc>

                                if(!countDown)
    4664:	e0bffc17 	ldw	r2,-16(fp)
    4668:	1080018b 	ldhu	r2,6(r2)
    466c:	10bfffcc 	andi	r2,r2,65535
    4670:	1000021e 	bne	r2,zero,467c <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4674:	e0bffc17 	ldw	r2,-16(fp)
    4678:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    467c:	e0bffc17 	ldw	r2,-16(fp)
    4680:	1080018b 	ldhu	r2,6(r2)
    4684:	10bfffcc 	andi	r2,r2,65535
    4688:	1005003a 	cmpeq	r2,r2,zero
        };
    468c:	e037883a 	mov	sp,fp
    4690:	df000017 	ldw	fp,0(sp)
    4694:	dec00104 	addi	sp,sp,4
    4698:	f800283a 	ret

0000469c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    469c:	defffb04 	addi	sp,sp,-20
    46a0:	df000415 	stw	fp,16(sp)
    46a4:	df000404 	addi	fp,sp,16
    46a8:	e13ffc15 	stw	r4,-16(fp)
    46ac:	2809883a 	mov	r4,r5
    46b0:	3007883a 	mov	r3,r6
    46b4:	3805883a 	mov	r2,r7
    46b8:	e13ffd05 	stb	r4,-12(fp)
    46bc:	e0fffe05 	stb	r3,-8(fp)
    46c0:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    46c4:	0005883a 	mov	r2,zero
        }
    46c8:	e037883a 	mov	sp,fp
    46cc:	df000017 	ldw	fp,0(sp)
    46d0:	dec00104 	addi	sp,sp,4
    46d4:	f800283a 	ret

000046d8 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    46d8:	defffb04 	addi	sp,sp,-20
    46dc:	df000415 	stw	fp,16(sp)
    46e0:	df000404 	addi	fp,sp,16
    46e4:	e13ffc15 	stw	r4,-16(fp)
    46e8:	2809883a 	mov	r4,r5
    46ec:	3007883a 	mov	r3,r6
    46f0:	3805883a 	mov	r2,r7
    46f4:	e13ffd05 	stb	r4,-12(fp)
    46f8:	e0fffe05 	stb	r3,-8(fp)
    46fc:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4700:	0005883a 	mov	r2,zero
        }
    4704:	e037883a 	mov	sp,fp
    4708:	df000017 	ldw	fp,0(sp)
    470c:	dec00104 	addi	sp,sp,4
    4710:	f800283a 	ret

00004714 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4714:	defffe04 	addi	sp,sp,-8
    4718:	df000115 	stw	fp,4(sp)
    471c:	df000104 	addi	fp,sp,4
    4720:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4724:	0005883a 	mov	r2,zero
        }
    4728:	e037883a 	mov	sp,fp
    472c:	df000017 	ldw	fp,0(sp)
    4730:	dec00104 	addi	sp,sp,4
    4734:	f800283a 	ret

00004738 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4738:	defffe04 	addi	sp,sp,-8
    473c:	df000115 	stw	fp,4(sp)
    4740:	df000104 	addi	fp,sp,4
    4744:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4748:	0005883a 	mov	r2,zero
        }
    474c:	e037883a 	mov	sp,fp
    4750:	df000017 	ldw	fp,0(sp)
    4754:	dec00104 	addi	sp,sp,4
    4758:	f800283a 	ret

0000475c <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    475c:	defffe04 	addi	sp,sp,-8
    4760:	df000115 	stw	fp,4(sp)
    4764:	df000104 	addi	fp,sp,4
    4768:	e13fff15 	stw	r4,-4(fp)
                return 0;
    476c:	0005883a 	mov	r2,zero
        }
    4770:	e037883a 	mov	sp,fp
    4774:	df000017 	ldw	fp,0(sp)
    4778:	dec00104 	addi	sp,sp,4
    477c:	f800283a 	ret

00004780 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4780:	defffd04 	addi	sp,sp,-12
    4784:	df000215 	stw	fp,8(sp)
    4788:	df000204 	addi	fp,sp,8
    478c:	e13ffe15 	stw	r4,-8(fp)
    4790:	2805883a 	mov	r2,r5
    4794:	e0bfff05 	stb	r2,-4(fp)
                return;
    4798:	0001883a 	nop
        } // Note used for hubs only!
    479c:	e037883a 	mov	sp,fp
    47a0:	df000017 	ldw	fp,0(sp)
    47a4:	dec00104 	addi	sp,sp,4
    47a8:	f800283a 	ret

000047ac <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    47ac:	defffc04 	addi	sp,sp,-16
    47b0:	df000315 	stw	fp,12(sp)
    47b4:	df000304 	addi	fp,sp,12
    47b8:	e13ffd15 	stw	r4,-12(fp)
    47bc:	2807883a 	mov	r3,r5
    47c0:	3005883a 	mov	r2,r6
    47c4:	e0fffe0d 	sth	r3,-8(fp)
    47c8:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    47cc:	0005883a 	mov	r2,zero
        }
    47d0:	e037883a 	mov	sp,fp
    47d4:	df000017 	ldw	fp,0(sp)
    47d8:	dec00104 	addi	sp,sp,4
    47dc:	f800283a 	ret

000047e0 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    47e0:	defffd04 	addi	sp,sp,-12
    47e4:	df000215 	stw	fp,8(sp)
    47e8:	df000204 	addi	fp,sp,8
    47ec:	e13ffe15 	stw	r4,-8(fp)
    47f0:	2805883a 	mov	r2,r5
    47f4:	e0bfff05 	stb	r2,-4(fp)
                return false;
    47f8:	0005883a 	mov	r2,zero
        }
    47fc:	e037883a 	mov	sp,fp
    4800:	df000017 	ldw	fp,0(sp)
    4804:	dec00104 	addi	sp,sp,4
    4808:	f800283a 	ret

0000480c <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    480c:	defffd04 	addi	sp,sp,-12
    4810:	df000215 	stw	fp,8(sp)
    4814:	df000204 	addi	fp,sp,8
    4818:	e13ffe15 	stw	r4,-8(fp)
    481c:	2805883a 	mov	r2,r5
    4820:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4824:	00800044 	movi	r2,1
        }
    4828:	e037883a 	mov	sp,fp
    482c:	df000017 	ldw	fp,0(sp)
    4830:	dec00104 	addi	sp,sp,4
    4834:	f800283a 	ret

00004838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4838:	defffc04 	addi	sp,sp,-16
    483c:	df000315 	stw	fp,12(sp)
    4840:	df000304 	addi	fp,sp,12
    4844:	e13ffe15 	stw	r4,-8(fp)
    4848:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    484c:	e03ffd05 	stb	zero,-12(fp)
    4850:	e0bffd03 	ldbu	r2,-12(fp)
    4854:	10800428 	cmpgeui	r2,r2,16
    4858:	1000161e 	bne	r2,zero,48b4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    485c:	e0bffd03 	ldbu	r2,-12(fp)
    4860:	e0fffe17 	ldw	r3,-8(fp)
    4864:	10800784 	addi	r2,r2,30
    4868:	1085883a 	add	r2,r2,r2
    486c:	1085883a 	add	r2,r2,r2
    4870:	1885883a 	add	r2,r3,r2
    4874:	10800017 	ldw	r2,0(r2)
    4878:	10000a1e 	bne	r2,zero,48a4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    487c:	e0bffd03 	ldbu	r2,-12(fp)
    4880:	e0fffe17 	ldw	r3,-8(fp)
    4884:	10800784 	addi	r2,r2,30
    4888:	1085883a 	add	r2,r2,r2
    488c:	1085883a 	add	r2,r2,r2
    4890:	1885883a 	add	r2,r3,r2
    4894:	e0ffff17 	ldw	r3,-4(fp)
    4898:	10c00015 	stw	r3,0(r2)
                                return 0;
    489c:	0005883a 	mov	r2,zero
    48a0:	00000506 	br	48b8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    48a4:	e0bffd03 	ldbu	r2,-12(fp)
    48a8:	10800044 	addi	r2,r2,1
    48ac:	e0bffd05 	stb	r2,-12(fp)
    48b0:	003fe706 	br	4850 <__alt_data_end+0xfc004850>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    48b4:	00bff4c4 	movi	r2,-45
        };
    48b8:	e037883a 	mov	sp,fp
    48bc:	df000017 	ldw	fp,0(sp)
    48c0:	dec00104 	addi	sp,sp,4
    48c4:	f800283a 	ret

000048c8 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    48c8:	defffa04 	addi	sp,sp,-24
    48cc:	df000515 	stw	fp,20(sp)
    48d0:	df000504 	addi	fp,sp,20
    48d4:	e13ffb15 	stw	r4,-20(fp)
    48d8:	3009883a 	mov	r4,r6
    48dc:	3807883a 	mov	r3,r7
    48e0:	e0800117 	ldw	r2,4(fp)
    48e4:	e17ffc05 	stb	r5,-16(fp)
    48e8:	e13ffd05 	stb	r4,-12(fp)
    48ec:	e0fffe05 	stb	r3,-8(fp)
    48f0:	e0bfff05 	stb	r2,-4(fp)
        };
    48f4:	0001883a 	nop
    48f8:	e037883a 	mov	sp,fp
    48fc:	df000017 	ldw	fp,0(sp)
    4900:	dec00104 	addi	sp,sp,4
    4904:	f800283a 	ret

00004908 <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4908:	defffe04 	addi	sp,sp,-8
    490c:	df000115 	stw	fp,4(sp)
    4910:	df000104 	addi	fp,sp,4
    4914:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4918:	e0bfff17 	ldw	r2,-4(fp)
    491c:	10800403 	ldbu	r2,16(r2)
        };
    4920:	e037883a 	mov	sp,fp
    4924:	df000017 	ldw	fp,0(sp)
    4928:	dec00104 	addi	sp,sp,4
    492c:	f800283a 	ret

00004930 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4930:	defffe04 	addi	sp,sp,-8
    4934:	df000115 	stw	fp,4(sp)
    4938:	df000104 	addi	fp,sp,4
    493c:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4940:	e0bfff17 	ldw	r2,-4(fp)
    4944:	10800943 	ldbu	r2,37(r2)
        };
    4948:	e037883a 	mov	sp,fp
    494c:	df000017 	ldw	fp,0(sp)
    4950:	dec00104 	addi	sp,sp,4
    4954:	f800283a 	ret

00004958 <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4958:	defffc04 	addi	sp,sp,-16
    495c:	df000315 	stw	fp,12(sp)
    4960:	df000304 	addi	fp,sp,12
    4964:	e13ffd15 	stw	r4,-12(fp)
    4968:	2807883a 	mov	r3,r5
    496c:	3005883a 	mov	r2,r6
    4970:	e0fffe0d 	sth	r3,-8(fp)
    4974:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4978:	e0bffe0b 	ldhu	r2,-8(fp)
    497c:	108117a0 	cmpeqi	r2,r2,1118
    4980:	10000f1e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4984:	e0bffe0b 	ldhu	r2,-8(fp)
    4988:	1081ce20 	cmpeqi	r2,r2,1848
    498c:	10000c1e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4990:	e0bffe0b 	ldhu	r2,-8(fp)
    4994:	10839be0 	cmpeqi	r2,r2,3695
    4998:	1000091e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    499c:	e0bffe0b 	ldhu	r2,-8(fp)
    49a0:	1083c360 	cmpeqi	r2,r2,3853
    49a4:	1000061e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    49a8:	e0bffe0b 	ldhu	r2,-8(fp)
    49ac:	10854ca0 	cmpeqi	r2,r2,5426
    49b0:	1000031e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    49b4:	e0bffe0b 	ldhu	r2,-8(fp)
    49b8:	10893198 	cmpnei	r2,r2,9414
    49bc:	10002c1e 	bne	r2,zero,4a70 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    49c0:	e0bfff0b 	ldhu	r2,-4(fp)
    49c4:	1080b460 	cmpeqi	r2,r2,721
    49c8:	1000271e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    49cc:	e0bfff0b 	ldhu	r2,-4(fp)
    49d0:	1080b760 	cmpeqi	r2,r2,733
    49d4:	1000241e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49d8:	e0bfff0b 	ldhu	r2,-4(fp)
    49dc:	1080b8e0 	cmpeqi	r2,r2,739
    49e0:	1000211e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49e4:	e0bfff0b 	ldhu	r2,-4(fp)
    49e8:	1080baa0 	cmpeqi	r2,r2,746
    49ec:	10001e1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49f0:	e0bfff0b 	ldhu	r2,-4(fp)
    49f4:	10928060 	cmpeqi	r2,r2,18945
    49f8:	10001b1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    49fc:	e0bfff0b 	ldhu	r2,-4(fp)
    4a00:	10804e60 	cmpeqi	r2,r2,313
    4a04:	1000181e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a08:	e0bfff0b 	ldhu	r2,-4(fp)
    4a0c:	108051a0 	cmpeqi	r2,r2,326
    4a10:	1000151e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a14:	e0bfff0b 	ldhu	r2,-4(fp)
    4a18:	108019e0 	cmpeqi	r2,r2,103
    4a1c:	1000121e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a20:	e0bfff0b 	ldhu	r2,-4(fp)
    4a24:	108280e0 	cmpeqi	r2,r2,2563
    4a28:	10000f1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4a2c:	e0bfff0b 	ldhu	r2,-4(fp)
    4a30:	109506a0 	cmpeqi	r2,r2,21530
    4a34:	10000c1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a38:	e0bfff0b 	ldhu	r2,-4(fp)
    4a3c:	10950aa0 	cmpeqi	r2,r2,21546
    4a40:	1000091e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a44:	e0bfff0b 	ldhu	r2,-4(fp)
    4a48:	10950ea0 	cmpeqi	r2,r2,21562
    4a4c:	1000061e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a50:	e0bfff0b 	ldhu	r2,-4(fp)
    4a54:	1082c2a0 	cmpeqi	r2,r2,2826
    4a58:	1000031e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4a5c:	e0bfff0b 	ldhu	r2,-4(fp)
    4a60:	1082c498 	cmpnei	r2,r2,2834
    4a64:	1000021e 	bne	r2,zero,4a70 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4a68:	00800044 	movi	r2,1
    4a6c:	00000106 	br	4a74 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4a70:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4a74:	e037883a 	mov	sp,fp
    4a78:	df000017 	ldw	fp,0(sp)
    4a7c:	dec00104 	addi	sp,sp,4
    4a80:	f800283a 	ret

00004a84 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4a84:	defffe04 	addi	sp,sp,-8
    4a88:	df000115 	stw	fp,4(sp)
    4a8c:	df000104 	addi	fp,sp,4
    4a90:	e13fff15 	stw	r4,-4(fp)
    4a94:	008000b4 	movhi	r2,2
    4a98:	108edb04 	addi	r2,r2,15212
    4a9c:	e0ffff17 	ldw	r3,-4(fp)
    4aa0:	18800015 	stw	r2,0(r3)
    4aa4:	0001883a 	nop
    4aa8:	e037883a 	mov	sp,fp
    4aac:	df000017 	ldw	fp,0(sp)
    4ab0:	dec00104 	addi	sp,sp,4
    4ab4:	f800283a 	ret

00004ab8 <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4ab8:	defffe04 	addi	sp,sp,-8
    4abc:	df000115 	stw	fp,4(sp)
    4ac0:	df000104 	addi	fp,sp,4
    4ac4:	e13fff15 	stw	r4,-4(fp)
    4ac8:	008000b4 	movhi	r2,2
    4acc:	108ed504 	addi	r2,r2,15188
    4ad0:	e0ffff17 	ldw	r3,-4(fp)
    4ad4:	18800015 	stw	r2,0(r3)
    4ad8:	0001883a 	nop
    4adc:	e037883a 	mov	sp,fp
    4ae0:	df000017 	ldw	fp,0(sp)
    4ae4:	dec00104 	addi	sp,sp,4
    4ae8:	f800283a 	ret

00004aec <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4aec:	defffe04 	addi	sp,sp,-8
    4af0:	df000115 	stw	fp,4(sp)
    4af4:	df000104 	addi	fp,sp,4
    4af8:	e13fff15 	stw	r4,-4(fp)
    4afc:	008000b4 	movhi	r2,2
    4b00:	108ed804 	addi	r2,r2,15200
    4b04:	e0ffff17 	ldw	r3,-4(fp)
    4b08:	18800015 	stw	r2,0(r3)
    4b0c:	0001883a 	nop
    4b10:	e037883a 	mov	sp,fp
    4b14:	df000017 	ldw	fp,0(sp)
    4b18:	dec00104 	addi	sp,sp,4
    4b1c:	f800283a 	ret

00004b20 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4b20:	defffc04 	addi	sp,sp,-16
    4b24:	dfc00315 	stw	ra,12(sp)
    4b28:	df000215 	stw	fp,8(sp)
    4b2c:	df000204 	addi	fp,sp,8
    4b30:	e13ffe15 	stw	r4,-8(fp)
    4b34:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4b38:	e0bffe17 	ldw	r2,-8(fp)
    4b3c:	1009883a 	mov	r4,r2
    4b40:	0004aec0 	call	4aec <_ZN13USBReadParserC1Ev>
    4b44:	008000b4 	movhi	r2,2
    4b48:	108ed204 	addi	r2,r2,15176
    4b4c:	e0fffe17 	ldw	r3,-8(fp)
    4b50:	18800015 	stw	r2,0(r3)
    4b54:	e0bffe17 	ldw	r2,-8(fp)
    4b58:	e0ffff17 	ldw	r3,-4(fp)
    4b5c:	10c00115 	stw	r3,4(r2)
    4b60:	e0bffe17 	ldw	r2,-8(fp)
    4b64:	10800204 	addi	r2,r2,8
    4b68:	1009883a 	mov	r4,r2
    4b6c:	00043dc0 	call	43dc <_ZN16MultiValueBufferC1Ev>
    4b70:	e0bffe17 	ldw	r2,-8(fp)
    4b74:	10800404 	addi	r2,r2,16
    4b78:	1009883a 	mov	r4,r2
    4b7c:	000443c0 	call	443c <_ZN20MultiByteValueParserC1Ev>
    4b80:	e0bffe17 	ldw	r2,-8(fp)
    4b84:	10800604 	addi	r2,r2,24
    4b88:	1009883a 	mov	r4,r2
    4b8c:	00044f80 	call	44f8 <_ZN11ByteSkipperC1Ev>
    4b90:	e0bffe17 	ldw	r2,-8(fp)
    4b94:	10000c05 	stb	zero,48(r2)
    4b98:	e0bffe17 	ldw	r2,-8(fp)
    4b9c:	10000c45 	stb	zero,49(r2)
    4ba0:	e0bffe17 	ldw	r2,-8(fp)
    4ba4:	10000c85 	stb	zero,50(r2)
    4ba8:	e0bffe17 	ldw	r2,-8(fp)
    4bac:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    4bb0:	e0bffe17 	ldw	r2,-8(fp)
    4bb4:	10c00804 	addi	r3,r2,32
    4bb8:	e0bffe17 	ldw	r2,-8(fp)
    4bbc:	19803fcc 	andi	r6,r3,255
    4bc0:	11000243 	ldbu	r4,9(r2)
    4bc4:	2008703a 	and	r4,r4,zero
    4bc8:	200b883a 	mov	r5,r4
    4bcc:	3009883a 	mov	r4,r6
    4bd0:	2908b03a 	or	r4,r5,r4
    4bd4:	11000245 	stb	r4,9(r2)
    4bd8:	1808d23a 	srli	r4,r3,8
    4bdc:	21803fcc 	andi	r6,r4,255
    4be0:	11000283 	ldbu	r4,10(r2)
    4be4:	2008703a 	and	r4,r4,zero
    4be8:	200b883a 	mov	r5,r4
    4bec:	3009883a 	mov	r4,r6
    4bf0:	2908b03a 	or	r4,r5,r4
    4bf4:	11000285 	stb	r4,10(r2)
    4bf8:	1808d43a 	srli	r4,r3,16
    4bfc:	21803fcc 	andi	r6,r4,255
    4c00:	110002c3 	ldbu	r4,11(r2)
    4c04:	2008703a 	and	r4,r4,zero
    4c08:	200b883a 	mov	r5,r4
    4c0c:	3009883a 	mov	r4,r6
    4c10:	2908b03a 	or	r4,r5,r4
    4c14:	110002c5 	stb	r4,11(r2)
    4c18:	180ad63a 	srli	r5,r3,24
    4c1c:	10c00303 	ldbu	r3,12(r2)
    4c20:	1806703a 	and	r3,r3,zero
    4c24:	1809883a 	mov	r4,r3
    4c28:	2807883a 	mov	r3,r5
    4c2c:	20c6b03a 	or	r3,r4,r3
    4c30:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    4c34:	e0bffe17 	ldw	r2,-8(fp)
    4c38:	10c00404 	addi	r3,r2,16
    4c3c:	e0bffe17 	ldw	r2,-8(fp)
    4c40:	10800204 	addi	r2,r2,8
    4c44:	100b883a 	mov	r5,r2
    4c48:	1809883a 	mov	r4,r3
    4c4c:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    4c50:	e0bffe17 	ldw	r2,-8(fp)
    4c54:	10c00604 	addi	r3,r2,24
    4c58:	e0bffe17 	ldw	r2,-8(fp)
    4c5c:	10800204 	addi	r2,r2,8
    4c60:	100b883a 	mov	r5,r2
    4c64:	1809883a 	mov	r4,r3
    4c68:	00045340 	call	4534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    4c6c:	0001883a 	nop
    4c70:	e037883a 	mov	sp,fp
    4c74:	dfc00117 	ldw	ra,4(sp)
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00204 	addi	sp,sp,8
    4c80:	f800283a 	ret

00004c84 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    4c84:	defff804 	addi	sp,sp,-32
    4c88:	dfc00715 	stw	ra,28(sp)
    4c8c:	df000615 	stw	fp,24(sp)
    4c90:	df000604 	addi	fp,sp,24
    4c94:	e13ffc15 	stw	r4,-16(fp)
    4c98:	2805883a 	mov	r2,r5
    4c9c:	e1bffe15 	stw	r6,-8(fp)
    4ca0:	e1ffff15 	stw	r7,-4(fp)
    4ca4:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    4ca8:	e0bffd0b 	ldhu	r2,-12(fp)
    4cac:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    4cb0:	e0bffe17 	ldw	r2,-8(fp)
    4cb4:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    4cb8:	e0bffa0b 	ldhu	r2,-24(fp)
    4cbc:	10bfffcc 	andi	r2,r2,65535
    4cc0:	10000a26 	beq	r2,zero,4cec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    4cc4:	e0bffb04 	addi	r2,fp,-20
    4cc8:	e1bffa04 	addi	r6,fp,-24
    4ccc:	100b883a 	mov	r5,r2
    4cd0:	e13ffc17 	ldw	r4,-16(fp)
    4cd4:	0004d000 	call	4d00 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    4cd8:	1080005c 	xori	r2,r2,1
    4cdc:	10803fcc 	andi	r2,r2,255
    4ce0:	1000011e 	bne	r2,zero,4ce8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    4ce4:	003ff406 	br	4cb8 <__alt_data_end+0xfc004cb8>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    4ce8:	0001883a 	nop
}
    4cec:	e037883a 	mov	sp,fp
    4cf0:	dfc00117 	ldw	ra,4(sp)
    4cf4:	df000017 	ldw	fp,0(sp)
    4cf8:	dec00204 	addi	sp,sp,8
    4cfc:	f800283a 	ret

00004d00 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    4d00:	defff604 	addi	sp,sp,-40
    4d04:	dfc00915 	stw	ra,36(sp)
    4d08:	df000815 	stw	fp,32(sp)
    4d0c:	df000804 	addi	fp,sp,32
    4d10:	e13ffc15 	stw	r4,-16(fp)
    4d14:	e17ffd15 	stw	r5,-12(fp)
    4d18:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	10800804 	addi	r2,r2,32
    4d24:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    4d28:	e0bffc17 	ldw	r2,-16(fp)
    4d2c:	10800804 	addi	r2,r2,32
    4d30:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    4d34:	e0bffc17 	ldw	r2,-16(fp)
    4d38:	10800c03 	ldbu	r2,48(r2)
    4d3c:	10803fcc 	andi	r2,r2,255
    4d40:	10c00168 	cmpgeui	r3,r2,5
    4d44:	1801141e 	bne	r3,zero,5198 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    4d48:	100690ba 	slli	r3,r2,2
    4d4c:	00800034 	movhi	r2,0
    4d50:	10935804 	addi	r2,r2,19808
    4d54:	1885883a 	add	r2,r3,r2
    4d58:	10800017 	ldw	r2,0(r2)
    4d5c:	1000683a 	jmp	r2
    4d60:	00004d74 	movhi	zero,309
    4d64:	00004da8 	cmpgeui	zero,zero,310
    4d68:	00004e30 	cmpltui	zero,zero,312
    4d6c:	00004ec4 	movi	zero,315
    4d70:	00004f30 	cmpltui	zero,zero,316
                case 0:
                        theBuffer.valueSize = 2;
    4d74:	e0bffc17 	ldw	r2,-16(fp)
    4d78:	00c00084 	movi	r3,2
    4d7c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    4d80:	e0bffc17 	ldw	r2,-16(fp)
    4d84:	10c00404 	addi	r3,r2,16
    4d88:	e0bffc17 	ldw	r2,-16(fp)
    4d8c:	10800204 	addi	r2,r2,8
    4d90:	100b883a 	mov	r5,r2
    4d94:	1809883a 	mov	r4,r3
    4d98:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    4d9c:	e0bffc17 	ldw	r2,-16(fp)
    4da0:	00c00044 	movi	r3,1
    4da4:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    4da8:	e0bffc17 	ldw	r2,-16(fp)
    4dac:	10800404 	addi	r2,r2,16
    4db0:	e1bffe17 	ldw	r6,-8(fp)
    4db4:	e17ffd17 	ldw	r5,-12(fp)
    4db8:	1009883a 	mov	r4,r2
    4dbc:	00062040 	call	6204 <_ZN20MultiByteValueParser5ParseEPPhPt>
    4dc0:	1080005c 	xori	r2,r2,1
    4dc4:	10803fcc 	andi	r2,r2,255
    4dc8:	10000226 	beq	r2,zero,4dd4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    4dcc:	0005883a 	mov	r2,zero
    4dd0:	0000f206 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    4dd4:	e0bffc17 	ldw	r2,-16(fp)
    4dd8:	10c00217 	ldw	r3,8(r2)
    4ddc:	1806d23a 	srli	r3,r3,8
    4de0:	10800317 	ldw	r2,12(r2)
    4de4:	10803fcc 	andi	r2,r2,255
    4de8:	1004963a 	slli	r2,r2,24
    4dec:	10c4b03a 	or	r2,r2,r3
    4df0:	10c00003 	ldbu	r3,0(r2)
    4df4:	e0bffc17 	ldw	r2,-16(fp)
    4df8:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    4dfc:	e0bffc17 	ldw	r2,-16(fp)
    4e00:	10c00217 	ldw	r3,8(r2)
    4e04:	1806d23a 	srli	r3,r3,8
    4e08:	10800317 	ldw	r2,12(r2)
    4e0c:	10803fcc 	andi	r2,r2,255
    4e10:	1004963a 	slli	r2,r2,24
    4e14:	10c4b03a 	or	r2,r2,r3
    4e18:	10c00043 	ldbu	r3,1(r2)
    4e1c:	e0bffc17 	ldw	r2,-16(fp)
    4e20:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    4e24:	e0bffc17 	ldw	r2,-16(fp)
    4e28:	00c00084 	movi	r3,2
    4e2c:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    4e30:	e0bffc17 	ldw	r2,-16(fp)
    4e34:	10800804 	addi	r2,r2,32
    4e38:	10c00084 	addi	r3,r2,2
    4e3c:	e0bffc17 	ldw	r2,-16(fp)
    4e40:	19803fcc 	andi	r6,r3,255
    4e44:	11000243 	ldbu	r4,9(r2)
    4e48:	2008703a 	and	r4,r4,zero
    4e4c:	200b883a 	mov	r5,r4
    4e50:	3009883a 	mov	r4,r6
    4e54:	2908b03a 	or	r4,r5,r4
    4e58:	11000245 	stb	r4,9(r2)
    4e5c:	1808d23a 	srli	r4,r3,8
    4e60:	21803fcc 	andi	r6,r4,255
    4e64:	11000283 	ldbu	r4,10(r2)
    4e68:	2008703a 	and	r4,r4,zero
    4e6c:	200b883a 	mov	r5,r4
    4e70:	3009883a 	mov	r4,r6
    4e74:	2908b03a 	or	r4,r5,r4
    4e78:	11000285 	stb	r4,10(r2)
    4e7c:	1808d43a 	srli	r4,r3,16
    4e80:	21803fcc 	andi	r6,r4,255
    4e84:	110002c3 	ldbu	r4,11(r2)
    4e88:	2008703a 	and	r4,r4,zero
    4e8c:	200b883a 	mov	r5,r4
    4e90:	3009883a 	mov	r4,r6
    4e94:	2908b03a 	or	r4,r5,r4
    4e98:	110002c5 	stb	r4,11(r2)
    4e9c:	180ad63a 	srli	r5,r3,24
    4ea0:	10c00303 	ldbu	r3,12(r2)
    4ea4:	1806703a 	and	r3,r3,zero
    4ea8:	1809883a 	mov	r4,r3
    4eac:	2807883a 	mov	r3,r5
    4eb0:	20c6b03a 	or	r3,r4,r3
    4eb4:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    4eb8:	e0bffc17 	ldw	r2,-16(fp)
    4ebc:	00c000c4 	movi	r3,3
    4ec0:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    4ec4:	e0bffc17 	ldw	r2,-16(fp)
    4ec8:	10800c83 	ldbu	r2,50(r2)
    4ecc:	10803fcc 	andi	r2,r2,255
    4ed0:	10c00120 	cmpeqi	r3,r2,4
    4ed4:	1800021e 	bne	r3,zero,4ee0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    4ed8:	10800148 	cmpgei	r2,r2,5
    4edc:	00000306 	br	4eec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    4ee0:	e0bffc17 	ldw	r2,-16(fp)
    4ee4:	10000cc5 	stb	zero,51(r2)
                                        break;
    4ee8:	00000106 	br	4ef0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    4eec:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    4ef0:	e0bffc17 	ldw	r2,-16(fp)
    4ef4:	10800c43 	ldbu	r2,49(r2)
    4ef8:	10bfff84 	addi	r2,r2,-2
    4efc:	1007883a 	mov	r3,r2
    4f00:	e0bffc17 	ldw	r2,-16(fp)
    4f04:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    4f08:	e0bffc17 	ldw	r2,-16(fp)
    4f0c:	10c00404 	addi	r3,r2,16
    4f10:	e0bffc17 	ldw	r2,-16(fp)
    4f14:	10800204 	addi	r2,r2,8
    4f18:	100b883a 	mov	r5,r2
    4f1c:	1809883a 	mov	r4,r3
    4f20:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    4f24:	e0bffc17 	ldw	r2,-16(fp)
    4f28:	00c00104 	movi	r3,4
    4f2c:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    4f30:	e0bffc17 	ldw	r2,-16(fp)
    4f34:	10800c83 	ldbu	r2,50(r2)
    4f38:	10803fcc 	andi	r2,r2,255
    4f3c:	10c00120 	cmpeqi	r3,r2,4
    4f40:	1800141e 	bne	r3,zero,4f94 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    4f44:	10c00160 	cmpeqi	r3,r2,5
    4f48:	1800311e 	bne	r3,zero,5010 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    4f4c:	108000a0 	cmpeqi	r2,r2,2
    4f50:	10005a26 	beq	r2,zero,50bc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    4f54:	e0bffc17 	ldw	r2,-16(fp)
    4f58:	10800404 	addi	r2,r2,16
    4f5c:	e1bffe17 	ldw	r6,-8(fp)
    4f60:	e17ffd17 	ldw	r5,-12(fp)
    4f64:	1009883a 	mov	r4,r2
    4f68:	00062040 	call	6204 <_ZN20MultiByteValueParser5ParseEPPhPt>
    4f6c:	1080005c 	xori	r2,r2,1
    4f70:	10803fcc 	andi	r2,r2,255
    4f74:	10000226 	beq	r2,zero,4f80 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    4f78:	0005883a 	mov	r2,zero
    4f7c:	00008706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    4f80:	e0bffa17 	ldw	r2,-24(fp)
    4f84:	10c00143 	ldbu	r3,5(r2)
    4f88:	e0bffc17 	ldw	r2,-16(fp)
    4f8c:	10c00d05 	stb	r3,52(r2)
                                        break;
    4f90:	00005e06 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    4f94:	e0bffc17 	ldw	r2,-16(fp)
    4f98:	10800404 	addi	r2,r2,16
    4f9c:	e1bffe17 	ldw	r6,-8(fp)
    4fa0:	e17ffd17 	ldw	r5,-12(fp)
    4fa4:	1009883a 	mov	r4,r2
    4fa8:	00062040 	call	6204 <_ZN20MultiByteValueParser5ParseEPPhPt>
    4fac:	1080005c 	xori	r2,r2,1
    4fb0:	10803fcc 	andi	r2,r2,255
    4fb4:	10000226 	beq	r2,zero,4fc0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    4fb8:	0005883a 	mov	r2,zero
    4fbc:	00007706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    4fc0:	e0bffc17 	ldw	r2,-16(fp)
    4fc4:	10800e03 	ldbu	r2,56(r2)
    4fc8:	10803fcc 	andi	r2,r2,255
    4fcc:	10004c1e 	bne	r2,zero,5100 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    4fd0:	e0bffc17 	ldw	r2,-16(fp)
    4fd4:	00c00044 	movi	r3,1
    4fd8:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    4fdc:	e0bffb17 	ldw	r2,-20(fp)
    4fe0:	10c00083 	ldbu	r3,2(r2)
    4fe4:	e0bffc17 	ldw	r2,-16(fp)
    4fe8:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    4fec:	e0bffb17 	ldw	r2,-20(fp)
    4ff0:	10c000c3 	ldbu	r3,3(r2)
    4ff4:	e0bffc17 	ldw	r2,-16(fp)
    4ff8:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    4ffc:	e0bffb17 	ldw	r2,-20(fp)
    5000:	10c001c3 	ldbu	r3,7(r2)
    5004:	e0bffc17 	ldw	r2,-16(fp)
    5008:	10c00d45 	stb	r3,53(r2)
                                        break;
    500c:	00003f06 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    5010:	e0bffc17 	ldw	r2,-16(fp)
    5014:	10800404 	addi	r2,r2,16
    5018:	e1bffe17 	ldw	r6,-8(fp)
    501c:	e17ffd17 	ldw	r5,-12(fp)
    5020:	1009883a 	mov	r4,r2
    5024:	00062040 	call	6204 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5028:	1080005c 	xori	r2,r2,1
    502c:	10803fcc 	andi	r2,r2,255
    5030:	10000226 	beq	r2,zero,503c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5034:	0005883a 	mov	r2,zero
    5038:	00005806 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    503c:	e0bffc17 	ldw	r2,-16(fp)
    5040:	10800cc3 	ldbu	r2,51(r2)
    5044:	10803fcc 	andi	r2,r2,255
    5048:	10002f26 	beq	r2,zero,5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    504c:	e0bffc17 	ldw	r2,-16(fp)
    5050:	10800117 	ldw	r2,4(r2)
    5054:	10002c26 	beq	r2,zero,5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    5058:	e0bffc17 	ldw	r2,-16(fp)
    505c:	10800117 	ldw	r2,4(r2)
    5060:	10800017 	ldw	r2,0(r2)
    5064:	10800017 	ldw	r2,0(r2)
    5068:	e0fffc17 	ldw	r3,-16(fp)
    506c:	1a000117 	ldw	r8,4(r3)
    5070:	e0fffc17 	ldw	r3,-16(fp)
    5074:	18c00d03 	ldbu	r3,52(r3)
    5078:	19403fcc 	andi	r5,r3,255
    507c:	e0fffc17 	ldw	r3,-16(fp)
    5080:	18c00d83 	ldbu	r3,54(r3)
    5084:	19803fcc 	andi	r6,r3,255
    5088:	e0fffc17 	ldw	r3,-16(fp)
    508c:	18c00dc3 	ldbu	r3,55(r3)
    5090:	19c03fcc 	andi	r7,r3,255
    5094:	e0fffc17 	ldw	r3,-16(fp)
    5098:	18c00d43 	ldbu	r3,53(r3)
    509c:	18c03fcc 	andi	r3,r3,255
    50a0:	e13ffc17 	ldw	r4,-16(fp)
    50a4:	21000804 	addi	r4,r4,32
    50a8:	d9000115 	stw	r4,4(sp)
    50ac:	d8c00015 	stw	r3,0(sp)
    50b0:	4009883a 	mov	r4,r8
    50b4:	103ee83a 	callr	r2
                                        break;
    50b8:	00001306 	br	5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    50bc:	e0bffc17 	ldw	r2,-16(fp)
    50c0:	10c00604 	addi	r3,r2,24
    50c4:	e0bffc17 	ldw	r2,-16(fp)
    50c8:	10800c43 	ldbu	r2,49(r2)
    50cc:	10803fcc 	andi	r2,r2,255
    50d0:	10bfff84 	addi	r2,r2,-2
    50d4:	10bfffcc 	andi	r2,r2,65535
    50d8:	100f883a 	mov	r7,r2
    50dc:	e1bffe17 	ldw	r6,-8(fp)
    50e0:	e17ffd17 	ldw	r5,-12(fp)
    50e4:	1809883a 	mov	r4,r3
    50e8:	000459c0 	call	459c <_ZN11ByteSkipper4SkipEPPhPtt>
    50ec:	1080005c 	xori	r2,r2,1
    50f0:	10803fcc 	andi	r2,r2,255
    50f4:	10000526 	beq	r2,zero,510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    50f8:	0005883a 	mov	r2,zero
    50fc:	00002706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    5100:	0001883a 	nop
    5104:	00000106 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    5108:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    510c:	e0bffc17 	ldw	r2,-16(fp)
    5110:	10c00804 	addi	r3,r2,32
    5114:	e0bffc17 	ldw	r2,-16(fp)
    5118:	19803fcc 	andi	r6,r3,255
    511c:	11000243 	ldbu	r4,9(r2)
    5120:	2008703a 	and	r4,r4,zero
    5124:	200b883a 	mov	r5,r4
    5128:	3009883a 	mov	r4,r6
    512c:	2908b03a 	or	r4,r5,r4
    5130:	11000245 	stb	r4,9(r2)
    5134:	1808d23a 	srli	r4,r3,8
    5138:	21803fcc 	andi	r6,r4,255
    513c:	11000283 	ldbu	r4,10(r2)
    5140:	2008703a 	and	r4,r4,zero
    5144:	200b883a 	mov	r5,r4
    5148:	3009883a 	mov	r4,r6
    514c:	2908b03a 	or	r4,r5,r4
    5150:	11000285 	stb	r4,10(r2)
    5154:	1808d43a 	srli	r4,r3,16
    5158:	21803fcc 	andi	r6,r4,255
    515c:	110002c3 	ldbu	r4,11(r2)
    5160:	2008703a 	and	r4,r4,zero
    5164:	200b883a 	mov	r5,r4
    5168:	3009883a 	mov	r4,r6
    516c:	2908b03a 	or	r4,r5,r4
    5170:	110002c5 	stb	r4,11(r2)
    5174:	180ad63a 	srli	r5,r3,24
    5178:	10c00303 	ldbu	r3,12(r2)
    517c:	1806703a 	and	r3,r3,zero
    5180:	1809883a 	mov	r4,r3
    5184:	2807883a 	mov	r3,r5
    5188:	20c6b03a 	or	r3,r4,r3
    518c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    5190:	e0bffc17 	ldw	r2,-16(fp)
    5194:	10000c05 	stb	zero,48(r2)
        }
        return true;
    5198:	00800044 	movi	r2,1
}
    519c:	e037883a 	mov	sp,fp
    51a0:	dfc00117 	ldw	ra,4(sp)
    51a4:	df000017 	ldw	fp,0(sp)
    51a8:	dec00204 	addi	sp,sp,8
    51ac:	f800283a 	ret

000051b0 <_Z8set_notehh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 note, alt_u8 vel) {
    51b0:	defffc04 	addi	sp,sp,-16
    51b4:	df000315 	stw	fp,12(sp)
    51b8:	df000304 	addi	fp,sp,12
    51bc:	2007883a 	mov	r3,r4
    51c0:	2805883a 	mov	r2,r5
    51c4:	e0fffe05 	stb	r3,-8(fp)
    51c8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(vel == 0) {
    51cc:	e0bfff03 	ldbu	r2,-4(fp)
    51d0:	1000081e 	bne	r2,zero,51f4 <_Z8set_notehh+0x44>
		set_val = keys->NOTE[note];
    51d4:	d0e00d17 	ldw	r3,-32716(gp)
    51d8:	e0bffe03 	ldbu	r2,-8(fp)
    51dc:	1085883a 	add	r2,r2,r2
    51e0:	1085883a 	add	r2,r2,r2
    51e4:	1885883a 	add	r2,r3,r2
    51e8:	10800017 	ldw	r2,0(r2)
    51ec:	e0bffd15 	stw	r2,-12(fp)
    51f0:	00000306 	br	5200 <_Z8set_notehh+0x50>
	}
	else {
		set_val = 0x80 + vel;
    51f4:	e0bfff03 	ldbu	r2,-4(fp)
    51f8:	10802004 	addi	r2,r2,128
    51fc:	e0bffd15 	stw	r2,-12(fp)
	}

	keys->NOTE[note] = set_val;
    5200:	d0e00d17 	ldw	r3,-32716(gp)
    5204:	e0bffe03 	ldbu	r2,-8(fp)
    5208:	1085883a 	add	r2,r2,r2
    520c:	1085883a 	add	r2,r2,r2
    5210:	1885883a 	add	r2,r3,r2
    5214:	e0fffd17 	ldw	r3,-12(fp)
    5218:	10c00015 	stw	r3,0(r2)
}
    521c:	0001883a 	nop
    5220:	e037883a 	mov	sp,fp
    5224:	df000017 	ldw	fp,0(sp)
    5228:	dec00104 	addi	sp,sp,4
    522c:	f800283a 	ret

00005230 <_Z8set_adsrhm>:

void set_adsr(alt_u8 par, alt_u32 val) {
    5230:	defffd04 	addi	sp,sp,-12
    5234:	df000215 	stw	fp,8(sp)
    5238:	df000204 	addi	fp,sp,8
    523c:	2005883a 	mov	r2,r4
    5240:	e17fff15 	stw	r5,-4(fp)
    5244:	e0bffe05 	stb	r2,-8(fp)
	adsr->VAL[par] = val;
    5248:	d0e00e17 	ldw	r3,-32712(gp)
    524c:	e0bffe03 	ldbu	r2,-8(fp)
    5250:	1085883a 	add	r2,r2,r2
    5254:	1085883a 	add	r2,r2,r2
    5258:	1885883a 	add	r2,r3,r2
    525c:	e0ffff17 	ldw	r3,-4(fp)
    5260:	10c00015 	stw	r3,0(r2)
}
    5264:	0001883a 	nop
    5268:	e037883a 	mov	sp,fp
    526c:	df000017 	ldw	fp,0(sp)
    5270:	dec00104 	addi	sp,sp,4
    5274:	f800283a 	ret

00005278 <_Z9calc_adsrtttf>:

void calc_adsr(alt_u16 att_m_seconds, alt_u16 dec_m_seconds, alt_u16 rel_m_seconds, float peak_amp) {
    5278:	defff204 	addi	sp,sp,-56
    527c:	dfc00d15 	stw	ra,52(sp)
    5280:	df000c15 	stw	fp,48(sp)
    5284:	dc000b15 	stw	r16,44(sp)
    5288:	df000c04 	addi	fp,sp,48
    528c:	2807883a 	mov	r3,r5
    5290:	3005883a 	mov	r2,r6
    5294:	e1fffe15 	stw	r7,-8(fp)
    5298:	e13ffb0d 	sth	r4,-20(fp)
    529c:	e0fffc0d 	sth	r3,-16(fp)
    52a0:	e0bffd0d 	sth	r2,-12(fp)

	alt_u32 ATT_LEN, ATT_STEP, PEAK_ATT, DEC_LEN, DEC_STEP, REL_LEN, REL_STEP;

	if (att_m_seconds > 5000) {
    52a4:	e0bffb0b 	ldhu	r2,-20(fp)
    52a8:	1084e270 	cmpltui	r2,r2,5001
    52ac:	1000041e 	bne	r2,zero,52c0 <_Z9calc_adsrtttf+0x48>
		printf("ERRROR: Requested attack length is too long.\n");
    52b0:	010000b4 	movhi	r4,2
    52b4:	210f0a04 	addi	r4,r4,15400
    52b8:	000ee1c0 	call	ee1c <puts>
		return;
    52bc:	00008e06 	br	54f8 <_Z9calc_adsrtttf+0x280>
	}
	if (dec_m_seconds > 5000) {
    52c0:	e0bffc0b 	ldhu	r2,-16(fp)
    52c4:	1084e270 	cmpltui	r2,r2,5001
    52c8:	1000041e 	bne	r2,zero,52dc <_Z9calc_adsrtttf+0x64>
		printf("ERRROR: Requested decay length is too long.\n");
    52cc:	010000b4 	movhi	r4,2
    52d0:	210f1604 	addi	r4,r4,15448
    52d4:	000ee1c0 	call	ee1c <puts>
		return;
    52d8:	00008706 	br	54f8 <_Z9calc_adsrtttf+0x280>
	}
	if (rel_m_seconds > 10000) {
    52dc:	e0bffd0b 	ldhu	r2,-12(fp)
    52e0:	1089c470 	cmpltui	r2,r2,10001
    52e4:	1000041e 	bne	r2,zero,52f8 <_Z9calc_adsrtttf+0x80>
		printf("ERRROR: Requested release length is too long.\n");
    52e8:	010000b4 	movhi	r4,2
    52ec:	210f2104 	addi	r4,r4,15492
    52f0:	000ee1c0 	call	ee1c <puts>
		return;
    52f4:	00008006 	br	54f8 <_Z9calc_adsrtttf+0x280>
	}
	if (peak_amp > (float) 1.9) {
    52f8:	014ffcf4 	movhi	r5,16371
    52fc:	294cccc4 	addi	r5,r5,13107
    5300:	e13ffe17 	ldw	r4,-8(fp)
    5304:	000d1140 	call	d114 <__gesf2>
    5308:	0080040e 	bge	zero,r2,531c <_Z9calc_adsrtttf+0xa4>
		printf("ERROR: Requested peak attack amplitude is too large.\n");
    530c:	010000b4 	movhi	r4,2
    5310:	210f2d04 	addi	r4,r4,15540
    5314:	000ee1c0 	call	ee1c <puts>
		return;
    5318:	00007706 	br	54f8 <_Z9calc_adsrtttf+0x280>
	}

	ATT_LEN = (att_m_seconds * F_S) / 1000;
    531c:	e0bffb0b 	ldhu	r2,-20(fp)
    5320:	016b1114 	movui	r5,44100
    5324:	1009883a 	mov	r4,r2
    5328:	000ccac0 	call	ccac <__mulsi3>
    532c:	0140fa04 	movi	r5,1000
    5330:	1009883a 	mov	r4,r2
    5334:	000caf80 	call	caf8 <__divsi3>
    5338:	e0bff415 	stw	r2,-48(fp)
	ATT_STEP = (peak_amp * (alt_u32) 0x80000) / ATT_LEN;
    533c:	01524034 	movhi	r5,18688
    5340:	e13ffe17 	ldw	r4,-8(fp)
    5344:	000d1d00 	call	d1d0 <__mulsf3>
    5348:	1007883a 	mov	r3,r2
    534c:	1821883a 	mov	r16,r3
    5350:	e13ff417 	ldw	r4,-48(fp)
    5354:	000db540 	call	db54 <__floatunsisf>
    5358:	1007883a 	mov	r3,r2
    535c:	180b883a 	mov	r5,r3
    5360:	8009883a 	mov	r4,r16
    5364:	000ccd40 	call	ccd4 <__divsf3>
    5368:	1007883a 	mov	r3,r2
    536c:	1805883a 	mov	r2,r3
    5370:	1009883a 	mov	r4,r2
    5374:	000ca980 	call	ca98 <__fixunssfsi>
    5378:	e0bff515 	stw	r2,-44(fp)
	PEAK_ATT = ATT_LEN * ATT_STEP;
    537c:	e17ff517 	ldw	r5,-44(fp)
    5380:	e13ff417 	ldw	r4,-48(fp)
    5384:	000ccac0 	call	ccac <__mulsi3>
    5388:	e0bff615 	stw	r2,-40(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
    538c:	e0bffc0b 	ldhu	r2,-16(fp)
    5390:	016b1114 	movui	r5,44100
    5394:	1009883a 	mov	r4,r2
    5398:	000ccac0 	call	ccac <__mulsi3>
    539c:	0140fa04 	movi	r5,1000
    53a0:	1009883a 	mov	r4,r2
    53a4:	000caf80 	call	caf8 <__divsi3>
    53a8:	e0bff715 	stw	r2,-36(fp)
	DEC_STEP = ((peak_amp - 1) * (alt_u32) 0x80000) / DEC_LEN;
    53ac:	014fe034 	movhi	r5,16256
    53b0:	e13ffe17 	ldw	r4,-8(fp)
    53b4:	000d6000 	call	d600 <__subsf3>
    53b8:	1007883a 	mov	r3,r2
    53bc:	1805883a 	mov	r2,r3
    53c0:	01524034 	movhi	r5,18688
    53c4:	1009883a 	mov	r4,r2
    53c8:	000d1d00 	call	d1d0 <__mulsf3>
    53cc:	1007883a 	mov	r3,r2
    53d0:	1821883a 	mov	r16,r3
    53d4:	e13ff717 	ldw	r4,-36(fp)
    53d8:	000db540 	call	db54 <__floatunsisf>
    53dc:	1007883a 	mov	r3,r2
    53e0:	180b883a 	mov	r5,r3
    53e4:	8009883a 	mov	r4,r16
    53e8:	000ccd40 	call	ccd4 <__divsf3>
    53ec:	1007883a 	mov	r3,r2
    53f0:	1805883a 	mov	r2,r3
    53f4:	1009883a 	mov	r4,r2
    53f8:	000ca980 	call	ca98 <__fixunssfsi>
    53fc:	e0bff815 	stw	r2,-32(fp)
	REL_LEN = (rel_m_seconds * 44100) / 1000;
    5400:	e0bffd0b 	ldhu	r2,-12(fp)
    5404:	016b1114 	movui	r5,44100
    5408:	1009883a 	mov	r4,r2
    540c:	000ccac0 	call	ccac <__mulsi3>
    5410:	0140fa04 	movi	r5,1000
    5414:	1009883a 	mov	r4,r2
    5418:	000caf80 	call	caf8 <__divsi3>
    541c:	e0bff915 	stw	r2,-28(fp)
	REL_STEP = ((alt_u32) 0x80000) / REL_LEN;
    5420:	e17ff917 	ldw	r5,-28(fp)
    5424:	01000234 	movhi	r4,8
    5428:	000cbf00 	call	cbf0 <__udivsi3>
    542c:	e0bffa15 	stw	r2,-24(fp)

	printf("ATT_LEN:  %X\n", ATT_LEN);
    5430:	e17ff417 	ldw	r5,-48(fp)
    5434:	010000b4 	movhi	r4,2
    5438:	210f3b04 	addi	r4,r4,15596
    543c:	000ed000 	call	ed00 <printf>
	printf("ATT_STEP: %X\n", ATT_STEP);
    5440:	e17ff517 	ldw	r5,-44(fp)
    5444:	010000b4 	movhi	r4,2
    5448:	210f3f04 	addi	r4,r4,15612
    544c:	000ed000 	call	ed00 <printf>
	printf("PEAK_ATT: %X\n", PEAK_ATT);
    5450:	e17ff617 	ldw	r5,-40(fp)
    5454:	010000b4 	movhi	r4,2
    5458:	210f4304 	addi	r4,r4,15628
    545c:	000ed000 	call	ed00 <printf>
	printf("DEC_LEN:  %X\n", DEC_LEN);
    5460:	e17ff717 	ldw	r5,-36(fp)
    5464:	010000b4 	movhi	r4,2
    5468:	210f4704 	addi	r4,r4,15644
    546c:	000ed000 	call	ed00 <printf>
	printf("DEC_STEP: %X\n", DEC_STEP);
    5470:	e17ff817 	ldw	r5,-32(fp)
    5474:	010000b4 	movhi	r4,2
    5478:	210f4b04 	addi	r4,r4,15660
    547c:	000ed000 	call	ed00 <printf>
	printf("REL_LEN:  %X\n", REL_LEN);
    5480:	e17ff917 	ldw	r5,-28(fp)
    5484:	010000b4 	movhi	r4,2
    5488:	210f4f04 	addi	r4,r4,15676
    548c:	000ed000 	call	ed00 <printf>
	printf("REL_STEP: %X\n", REL_STEP);
    5490:	e17ffa17 	ldw	r5,-24(fp)
    5494:	010000b4 	movhi	r4,2
    5498:	210f5304 	addi	r4,r4,15692
    549c:	000ed000 	call	ed00 <printf>

	set_adsr(ATT_L, ATT_LEN);
    54a0:	e17ff417 	ldw	r5,-48(fp)
    54a4:	01000044 	movi	r4,1
    54a8:	00052300 	call	5230 <_Z8set_adsrhm>
	set_adsr(ATT_S, ATT_STEP);
    54ac:	e17ff517 	ldw	r5,-44(fp)
    54b0:	01000084 	movi	r4,2
    54b4:	00052300 	call	5230 <_Z8set_adsrhm>
	set_adsr(PEAK_A, PEAK_ATT);
    54b8:	e17ff617 	ldw	r5,-40(fp)
    54bc:	0009883a 	mov	r4,zero
    54c0:	00052300 	call	5230 <_Z8set_adsrhm>
	set_adsr(DEC_L, DEC_LEN);
    54c4:	e17ff717 	ldw	r5,-36(fp)
    54c8:	010000c4 	movi	r4,3
    54cc:	00052300 	call	5230 <_Z8set_adsrhm>
	set_adsr(DEC_S, DEC_STEP);
    54d0:	e17ff817 	ldw	r5,-32(fp)
    54d4:	01000104 	movi	r4,4
    54d8:	00052300 	call	5230 <_Z8set_adsrhm>
	set_adsr(REL_L, REL_LEN);
    54dc:	e17ff917 	ldw	r5,-28(fp)
    54e0:	01000144 	movi	r4,5
    54e4:	00052300 	call	5230 <_Z8set_adsrhm>
	set_adsr(REL_S, REL_STEP);
    54e8:	e17ffa17 	ldw	r5,-24(fp)
    54ec:	01000184 	movi	r4,6
    54f0:	00052300 	call	5230 <_Z8set_adsrhm>

	return;
    54f4:	0001883a 	nop
}
    54f8:	e6ffff04 	addi	sp,fp,-4
    54fc:	dfc00217 	ldw	ra,8(sp)
    5500:	df000117 	ldw	fp,4(sp)
    5504:	dc000017 	ldw	r16,0(sp)
    5508:	dec00304 	addi	sp,sp,12
    550c:	f800283a 	ret

00005510 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5510:	defff904 	addi	sp,sp,-28
    5514:	dfc00615 	stw	ra,24(sp)
    5518:	df000515 	stw	fp,20(sp)
    551c:	df000504 	addi	fp,sp,20
    5520:	e13ffc15 	stw	r4,-16(fp)
    5524:	e17ffd15 	stw	r5,-12(fp)
    5528:	3007883a 	mov	r3,r6
    552c:	3805883a 	mov	r2,r7
    5530:	e0fffe05 	stb	r3,-8(fp)
    5534:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    5538:	e0800217 	ldw	r2,8(fp)
    553c:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    5540:	e0bffc17 	ldw	r2,-16(fp)
    5544:	10800117 	ldw	r2,4(r2)
    5548:	1080004c 	andi	r2,r2,1
    554c:	1007883a 	mov	r3,r2
    5550:	e0bffb17 	ldw	r2,-20(fp)
    5554:	10800003 	ldbu	r2,0(r2)
    5558:	1080004c 	andi	r2,r2,1
    555c:	18c03fcc 	andi	r3,r3,255
    5560:	10803fcc 	andi	r2,r2,255
    5564:	18801426 	beq	r3,r2,55b8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    5568:	e0bffb17 	ldw	r2,-20(fp)
    556c:	10800003 	ldbu	r2,0(r2)
    5570:	1080004c 	andi	r2,r2,1
    5574:	10803fcc 	andi	r2,r2,255
    5578:	10000826 	beq	r2,zero,559c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    557c:	e0bffc17 	ldw	r2,-16(fp)
    5580:	10800017 	ldw	r2,0(r2)
    5584:	10800304 	addi	r2,r2,12
    5588:	10800017 	ldw	r2,0(r2)
    558c:	e17ffb17 	ldw	r5,-20(fp)
    5590:	e13ffc17 	ldw	r4,-16(fp)
    5594:	103ee83a 	callr	r2
    5598:	00000706 	br	55b8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    559c:	e0bffc17 	ldw	r2,-16(fp)
    55a0:	10800017 	ldw	r2,0(r2)
    55a4:	10800204 	addi	r2,r2,8
    55a8:	10800017 	ldw	r2,0(r2)
    55ac:	e17ffb17 	ldw	r5,-20(fp)
    55b0:	e13ffc17 	ldw	r4,-16(fp)
    55b4:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    55b8:	e0bffc17 	ldw	r2,-16(fp)
    55bc:	10800117 	ldw	r2,4(r2)
    55c0:	1004d07a 	srli	r2,r2,1
    55c4:	1080004c 	andi	r2,r2,1
    55c8:	1007883a 	mov	r3,r2
    55cc:	e0bffb17 	ldw	r2,-20(fp)
    55d0:	10800003 	ldbu	r2,0(r2)
    55d4:	1004d07a 	srli	r2,r2,1
    55d8:	1080004c 	andi	r2,r2,1
    55dc:	18c03fcc 	andi	r3,r3,255
    55e0:	10803fcc 	andi	r2,r2,255
    55e4:	18801426 	beq	r3,r2,5638 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    55e8:	e0bffb17 	ldw	r2,-20(fp)
    55ec:	10800003 	ldbu	r2,0(r2)
    55f0:	1080008c 	andi	r2,r2,2
    55f4:	10803fcc 	andi	r2,r2,255
    55f8:	10000826 	beq	r2,zero,561c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    55fc:	e0bffc17 	ldw	r2,-16(fp)
    5600:	10800017 	ldw	r2,0(r2)
    5604:	10800504 	addi	r2,r2,20
    5608:	10800017 	ldw	r2,0(r2)
    560c:	e17ffb17 	ldw	r5,-20(fp)
    5610:	e13ffc17 	ldw	r4,-16(fp)
    5614:	103ee83a 	callr	r2
    5618:	00000706 	br	5638 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    561c:	e0bffc17 	ldw	r2,-16(fp)
    5620:	10800017 	ldw	r2,0(r2)
    5624:	10800404 	addi	r2,r2,16
    5628:	10800017 	ldw	r2,0(r2)
    562c:	e17ffb17 	ldw	r5,-20(fp)
    5630:	e13ffc17 	ldw	r4,-16(fp)
    5634:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    5638:	e0bffc17 	ldw	r2,-16(fp)
    563c:	10800117 	ldw	r2,4(r2)
    5640:	1004d0ba 	srli	r2,r2,2
    5644:	1080004c 	andi	r2,r2,1
    5648:	1007883a 	mov	r3,r2
    564c:	e0bffb17 	ldw	r2,-20(fp)
    5650:	10800003 	ldbu	r2,0(r2)
    5654:	1004d0ba 	srli	r2,r2,2
    5658:	1080004c 	andi	r2,r2,1
    565c:	18c03fcc 	andi	r3,r3,255
    5660:	10803fcc 	andi	r2,r2,255
    5664:	18801426 	beq	r3,r2,56b8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    5668:	e0bffb17 	ldw	r2,-20(fp)
    566c:	10800003 	ldbu	r2,0(r2)
    5670:	1080010c 	andi	r2,r2,4
    5674:	10803fcc 	andi	r2,r2,255
    5678:	10000826 	beq	r2,zero,569c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    567c:	e0bffc17 	ldw	r2,-16(fp)
    5680:	10800017 	ldw	r2,0(r2)
    5684:	10800704 	addi	r2,r2,28
    5688:	10800017 	ldw	r2,0(r2)
    568c:	e17ffb17 	ldw	r5,-20(fp)
    5690:	e13ffc17 	ldw	r4,-16(fp)
    5694:	103ee83a 	callr	r2
    5698:	00000706 	br	56b8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    569c:	e0bffc17 	ldw	r2,-16(fp)
    56a0:	10800017 	ldw	r2,0(r2)
    56a4:	10800604 	addi	r2,r2,24
    56a8:	10800017 	ldw	r2,0(r2)
    56ac:	e17ffb17 	ldw	r5,-20(fp)
    56b0:	e13ffc17 	ldw	r4,-16(fp)
    56b4:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    56b8:	e0bffb17 	ldw	r2,-20(fp)
    56bc:	10800043 	ldbu	r2,1(r2)
    56c0:	10803fcc 	andi	r2,r2,255
    56c4:	1080201c 	xori	r2,r2,128
    56c8:	10bfe004 	addi	r2,r2,-128
    56cc:	1000061e 	bne	r2,zero,56e8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    56d0:	e0bffb17 	ldw	r2,-20(fp)
    56d4:	10800083 	ldbu	r2,2(r2)
    56d8:	10803fcc 	andi	r2,r2,255
    56dc:	1080201c 	xori	r2,r2,128
    56e0:	10bfe004 	addi	r2,r2,-128
    56e4:	10000726 	beq	r2,zero,5704 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    56e8:	e0bffc17 	ldw	r2,-16(fp)
    56ec:	10800017 	ldw	r2,0(r2)
    56f0:	10800104 	addi	r2,r2,4
    56f4:	10800017 	ldw	r2,0(r2)
    56f8:	e17ffb17 	ldw	r5,-20(fp)
    56fc:	e13ffc17 	ldw	r4,-16(fp)
    5700:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    5704:	e0800217 	ldw	r2,8(fp)
    5708:	10c00003 	ldbu	r3,0(r2)
    570c:	e0bffc17 	ldw	r2,-16(fp)
    5710:	10c00105 	stb	r3,4(r2)
#endif

};
    5714:	0001883a 	nop
    5718:	e037883a 	mov	sp,fp
    571c:	dfc00117 	ldw	ra,4(sp)
    5720:	df000017 	ldw	fp,0(sp)
    5724:	dec00204 	addi	sp,sp,8
    5728:	f800283a 	ret

0000572c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    572c:	defff804 	addi	sp,sp,-32
    5730:	dfc00715 	stw	ra,28(sp)
    5734:	df000615 	stw	fp,24(sp)
    5738:	df000604 	addi	fp,sp,24
    573c:	e13ffc15 	stw	r4,-16(fp)
    5740:	e17ffd15 	stw	r5,-12(fp)
    5744:	3007883a 	mov	r3,r6
    5748:	3805883a 	mov	r2,r7
    574c:	e0fffe05 	stb	r3,-8(fp)
    5750:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    5754:	e0800217 	ldw	r2,8(fp)
    5758:	10800084 	addi	r2,r2,2
    575c:	10800003 	ldbu	r2,0(r2)
    5760:	10803fcc 	andi	r2,r2,255
    5764:	10800058 	cmpnei	r2,r2,1
    5768:	10009926 	beq	r2,zero,59d0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    576c:	e0bffc17 	ldw	r2,-16(fp)
    5770:	10c00103 	ldbu	r3,4(r2)
    5774:	e0800217 	ldw	r2,8(fp)
    5778:	10800003 	ldbu	r2,0(r2)
    577c:	18c03fcc 	andi	r3,r3,255
    5780:	10803fcc 	andi	r2,r2,255
    5784:	18800e26 	beq	r3,r2,57c0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    5788:	e0bffc17 	ldw	r2,-16(fp)
    578c:	10800017 	ldw	r2,0(r2)
    5790:	10800204 	addi	r2,r2,8
    5794:	10800017 	ldw	r2,0(r2)
    5798:	e0fffc17 	ldw	r3,-16(fp)
    579c:	18c00103 	ldbu	r3,4(r3)
    57a0:	19003fcc 	andi	r4,r3,255
    57a4:	e0c00217 	ldw	r3,8(fp)
    57a8:	18c00003 	ldbu	r3,0(r3)
    57ac:	18c03fcc 	andi	r3,r3,255
    57b0:	180d883a 	mov	r6,r3
    57b4:	200b883a 	mov	r5,r4
    57b8:	e13ffc17 	ldw	r4,-16(fp)
    57bc:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    57c0:	00800084 	movi	r2,2
    57c4:	e0bffa05 	stb	r2,-24(fp)
    57c8:	e0bffa03 	ldbu	r2,-24(fp)
    57cc:	10800228 	cmpgeui	r2,r2,8
    57d0:	10006e1e 	bne	r2,zero,598c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    57d4:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    57d8:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    57dc:	00800084 	movi	r2,2
    57e0:	e0bffac5 	stb	r2,-21(fp)
    57e4:	e0bffac3 	ldbu	r2,-21(fp)
    57e8:	10800228 	cmpgeui	r2,r2,8
    57ec:	10002f1e 	bne	r2,zero,58ac <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    57f0:	e0bffa03 	ldbu	r2,-24(fp)
    57f4:	e0c00217 	ldw	r3,8(fp)
    57f8:	1885883a 	add	r2,r3,r2
    57fc:	11000003 	ldbu	r4,0(r2)
    5800:	e0bffac3 	ldbu	r2,-21(fp)
    5804:	e0fffc17 	ldw	r3,-16(fp)
    5808:	1885883a 	add	r2,r3,r2
    580c:	10800104 	addi	r2,r2,4
    5810:	10800003 	ldbu	r2,0(r2)
    5814:	20c03fcc 	andi	r3,r4,255
    5818:	10803fcc 	andi	r2,r2,255
    581c:	1880091e 	bne	r3,r2,5844 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    5820:	e0bffa03 	ldbu	r2,-24(fp)
    5824:	e0c00217 	ldw	r3,8(fp)
    5828:	1885883a 	add	r2,r3,r2
    582c:	10800003 	ldbu	r2,0(r2)
    5830:	10803fcc 	andi	r2,r2,255
    5834:	10800060 	cmpeqi	r2,r2,1
    5838:	1000021e 	bne	r2,zero,5844 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    583c:	00800044 	movi	r2,1
    5840:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    5844:	e0bffac3 	ldbu	r2,-21(fp)
    5848:	e0c00217 	ldw	r3,8(fp)
    584c:	1885883a 	add	r2,r3,r2
    5850:	11000003 	ldbu	r4,0(r2)
    5854:	e0bffa03 	ldbu	r2,-24(fp)
    5858:	e0fffc17 	ldw	r3,-16(fp)
    585c:	1885883a 	add	r2,r3,r2
    5860:	10800104 	addi	r2,r2,4
    5864:	10800003 	ldbu	r2,0(r2)
    5868:	20c03fcc 	andi	r3,r4,255
    586c:	10803fcc 	andi	r2,r2,255
    5870:	18800a1e 	bne	r3,r2,589c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    5874:	e0bffa03 	ldbu	r2,-24(fp)
    5878:	e0fffc17 	ldw	r3,-16(fp)
    587c:	1885883a 	add	r2,r3,r2
    5880:	10800104 	addi	r2,r2,4
    5884:	10800003 	ldbu	r2,0(r2)
    5888:	10803fcc 	andi	r2,r2,255
    588c:	10800060 	cmpeqi	r2,r2,1
    5890:	1000021e 	bne	r2,zero,589c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    5894:	00800044 	movi	r2,1
    5898:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    589c:	e0bffac3 	ldbu	r2,-21(fp)
    58a0:	10800044 	addi	r2,r2,1
    58a4:	e0bffac5 	stb	r2,-21(fp)
    58a8:	003fce06 	br	57e4 <__alt_data_end+0xfc0057e4>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    58ac:	e0bffa43 	ldbu	r2,-23(fp)
    58b0:	1080005c 	xori	r2,r2,1
    58b4:	10803fcc 	andi	r2,r2,255
    58b8:	10001c26 	beq	r2,zero,592c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    58bc:	e0bffc17 	ldw	r2,-16(fp)
    58c0:	10800017 	ldw	r2,0(r2)
    58c4:	10800104 	addi	r2,r2,4
    58c8:	10800017 	ldw	r2,0(r2)
    58cc:	e0fffa03 	ldbu	r3,-24(fp)
    58d0:	e1000217 	ldw	r4,8(fp)
    58d4:	20c7883a 	add	r3,r4,r3
    58d8:	18c00003 	ldbu	r3,0(r3)
    58dc:	18c03fcc 	andi	r3,r3,255
    58e0:	180d883a 	mov	r6,r3
    58e4:	e17ffd17 	ldw	r5,-12(fp)
    58e8:	e13ffc17 	ldw	r4,-16(fp)
    58ec:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    58f0:	e0bffc17 	ldw	r2,-16(fp)
    58f4:	10800017 	ldw	r2,0(r2)
    58f8:	10800304 	addi	r2,r2,12
    58fc:	10800017 	ldw	r2,0(r2)
    5900:	e0c00217 	ldw	r3,8(fp)
    5904:	18c00003 	ldbu	r3,0(r3)
    5908:	19403fcc 	andi	r5,r3,255
    590c:	e0fffa03 	ldbu	r3,-24(fp)
    5910:	e1000217 	ldw	r4,8(fp)
    5914:	20c7883a 	add	r3,r4,r3
    5918:	18c00003 	ldbu	r3,0(r3)
    591c:	18c03fcc 	andi	r3,r3,255
    5920:	180d883a 	mov	r6,r3
    5924:	e13ffc17 	ldw	r4,-16(fp)
    5928:	103ee83a 	callr	r2
                }
                if (!up)
    592c:	e0bffa83 	ldbu	r2,-22(fp)
    5930:	1080005c 	xori	r2,r2,1
    5934:	10803fcc 	andi	r2,r2,255
    5938:	10001026 	beq	r2,zero,597c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    593c:	e0bffc17 	ldw	r2,-16(fp)
    5940:	10800017 	ldw	r2,0(r2)
    5944:	10800404 	addi	r2,r2,16
    5948:	10800017 	ldw	r2,0(r2)
    594c:	e0fffc17 	ldw	r3,-16(fp)
    5950:	18c00103 	ldbu	r3,4(r3)
    5954:	19403fcc 	andi	r5,r3,255
    5958:	e0fffa03 	ldbu	r3,-24(fp)
    595c:	e13ffc17 	ldw	r4,-16(fp)
    5960:	20c7883a 	add	r3,r4,r3
    5964:	18c00104 	addi	r3,r3,4
    5968:	18c00003 	ldbu	r3,0(r3)
    596c:	18c03fcc 	andi	r3,r3,255
    5970:	180d883a 	mov	r6,r3
    5974:	e13ffc17 	ldw	r4,-16(fp)
    5978:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    597c:	e0bffa03 	ldbu	r2,-24(fp)
    5980:	10800044 	addi	r2,r2,1
    5984:	e0bffa05 	stb	r2,-24(fp)
    5988:	003f8f06 	br	57c8 <__alt_data_end+0xfc0057c8>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    598c:	e03ffb05 	stb	zero,-20(fp)
    5990:	e0bffb03 	ldbu	r2,-20(fp)
    5994:	10800228 	cmpgeui	r2,r2,8
    5998:	10000e1e 	bne	r2,zero,59d4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    599c:	e0bffb03 	ldbu	r2,-20(fp)
    59a0:	e0fffb03 	ldbu	r3,-20(fp)
    59a4:	e1000217 	ldw	r4,8(fp)
    59a8:	20c7883a 	add	r3,r4,r3
    59ac:	18c00003 	ldbu	r3,0(r3)
    59b0:	e13ffc17 	ldw	r4,-16(fp)
    59b4:	2085883a 	add	r2,r4,r2
    59b8:	10800104 	addi	r2,r2,4
    59bc:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    59c0:	e0bffb03 	ldbu	r2,-20(fp)
    59c4:	10800044 	addi	r2,r2,1
    59c8:	e0bffb05 	stb	r2,-20(fp)
    59cc:	003ff006 	br	5990 <__alt_data_end+0xfc005990>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    59d0:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    59d4:	e037883a 	mov	sp,fp
    59d8:	dfc00117 	ldw	ra,4(sp)
    59dc:	df000017 	ldw	fp,0(sp)
    59e0:	dec00204 	addi	sp,sp,8
    59e4:	f800283a 	ret

000059e8 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    59e8:	defffa04 	addi	sp,sp,-24
    59ec:	dfc00515 	stw	ra,20(sp)
    59f0:	df000415 	stw	fp,16(sp)
    59f4:	df000404 	addi	fp,sp,16
    59f8:	e13ffd15 	stw	r4,-12(fp)
    59fc:	2807883a 	mov	r3,r5
    5a00:	3005883a 	mov	r2,r6
    5a04:	e0fffe05 	stb	r3,-8(fp)
    5a08:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5a0c:	e0bffe03 	ldbu	r2,-8(fp)
    5a10:	1080088c 	andi	r2,r2,34
    5a14:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5a18:	e0bfff03 	ldbu	r2,-4(fp)
    5a1c:	10800130 	cmpltui	r2,r2,4
    5a20:	1000151e 	bne	r2,zero,5a78 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5a24:	e0bfff03 	ldbu	r2,-4(fp)
    5a28:	108007a8 	cmpgeui	r2,r2,30
    5a2c:	1000121e 	bne	r2,zero,5a78 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5a30:	e0bffd17 	ldw	r2,-12(fp)
    5a34:	10800317 	ldw	r2,12(r2)
    5a38:	1080008c 	andi	r2,r2,2
    5a3c:	1000021e 	bne	r2,zero,5a48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5a40:	e0bffc03 	ldbu	r2,-16(fp)
    5a44:	1000061e 	bne	r2,zero,5a60 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5a48:	e0bffd17 	ldw	r2,-12(fp)
    5a4c:	10800317 	ldw	r2,12(r2)
    5a50:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5a54:	10000526 	beq	r2,zero,5a6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5a58:	e0bffc03 	ldbu	r2,-16(fp)
    5a5c:	1000031e 	bne	r2,zero,5a6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5a60:	e0bfff03 	ldbu	r2,-4(fp)
    5a64:	10800f44 	addi	r2,r2,61
    5a68:	00008006 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5a6c:	e0bfff03 	ldbu	r2,-4(fp)
    5a70:	10801744 	addi	r2,r2,93
    5a74:	00007d06 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5a78:	e0bfff03 	ldbu	r2,-4(fp)
    5a7c:	108007b0 	cmpltui	r2,r2,30
    5a80:	1000191e 	bne	r2,zero,5ae8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5a84:	e0bfff03 	ldbu	r2,-4(fp)
    5a88:	10800a28 	cmpgeui	r2,r2,40
    5a8c:	1000161e 	bne	r2,zero,5ae8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5a90:	e0bffc03 	ldbu	r2,-16(fp)
    5a94:	10000c26 	beq	r2,zero,5ac8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5a98:	e0bffd17 	ldw	r2,-12(fp)
    5a9c:	10800017 	ldw	r2,0(r2)
    5aa0:	10800504 	addi	r2,r2,20
    5aa4:	10800017 	ldw	r2,0(r2)
    5aa8:	e13ffd17 	ldw	r4,-12(fp)
    5aac:	103ee83a 	callr	r2
    5ab0:	1007883a 	mov	r3,r2
    5ab4:	e0bfff03 	ldbu	r2,-4(fp)
    5ab8:	10bff884 	addi	r2,r2,-30
    5abc:	1885883a 	add	r2,r3,r2
    5ac0:	10800003 	ldbu	r2,0(r2)
    5ac4:	00006906 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5ac8:	e0bfff03 	ldbu	r2,-4(fp)
    5acc:	108009e0 	cmpeqi	r2,r2,39
    5ad0:	1000031e 	bne	r2,zero,5ae0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5ad4:	e0bfff03 	ldbu	r2,-4(fp)
    5ad8:	108004c4 	addi	r2,r2,19
    5adc:	00006306 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5ae0:	00800c04 	movi	r2,48
    5ae4:	00006106 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5ae8:	e0bfff03 	ldbu	r2,-4(fp)
    5aec:	10801670 	cmpltui	r2,r2,89
    5af0:	10000a1e 	bne	r2,zero,5b1c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5af4:	e0bfff03 	ldbu	r2,-4(fp)
    5af8:	108018a8 	cmpgeui	r2,r2,98
    5afc:	1000071e 	bne	r2,zero,5b1c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5b00:	e0bffd17 	ldw	r2,-12(fp)
    5b04:	10800317 	ldw	r2,12(r2)
    5b08:	1080004c 	andi	r2,r2,1
    5b0c:	10005626 	beq	r2,zero,5c68 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5b10:	e0bfff03 	ldbu	r2,-4(fp)
    5b14:	10bff604 	addi	r2,r2,-40
    5b18:	00005406 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    5b1c:	e0bfff03 	ldbu	r2,-4(fp)
    5b20:	10800b70 	cmpltui	r2,r2,45
    5b24:	10001d1e 	bne	r2,zero,5b9c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    5b28:	e0bfff03 	ldbu	r2,-4(fp)
    5b2c:	10800e68 	cmpgeui	r2,r2,57
    5b30:	10001a1e 	bne	r2,zero,5b9c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    5b34:	e0bffc03 	ldbu	r2,-16(fp)
    5b38:	10000c26 	beq	r2,zero,5b6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    5b3c:	e0bffd17 	ldw	r2,-12(fp)
    5b40:	10800017 	ldw	r2,0(r2)
    5b44:	10800604 	addi	r2,r2,24
    5b48:	10800017 	ldw	r2,0(r2)
    5b4c:	e13ffd17 	ldw	r4,-12(fp)
    5b50:	103ee83a 	callr	r2
    5b54:	1007883a 	mov	r3,r2
    5b58:	e0bfff03 	ldbu	r2,-4(fp)
    5b5c:	10bff4c4 	addi	r2,r2,-45
    5b60:	1885883a 	add	r2,r3,r2
    5b64:	10800003 	ldbu	r2,0(r2)
    5b68:	00004006 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5b6c:	e0bffd17 	ldw	r2,-12(fp)
    5b70:	10800017 	ldw	r2,0(r2)
    5b74:	10800704 	addi	r2,r2,28
    5b78:	10800017 	ldw	r2,0(r2)
    5b7c:	e13ffd17 	ldw	r4,-12(fp)
    5b80:	103ee83a 	callr	r2
    5b84:	1007883a 	mov	r3,r2
    5b88:	e0bfff03 	ldbu	r2,-4(fp)
    5b8c:	10bff4c4 	addi	r2,r2,-45
    5b90:	1885883a 	add	r2,r3,r2
    5b94:	10800003 	ldbu	r2,0(r2)
    5b98:	00003406 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    5b9c:	e0bfff03 	ldbu	r2,-4(fp)
    5ba0:	10801530 	cmpltui	r2,r2,84
    5ba4:	10000f1e 	bne	r2,zero,5be4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    5ba8:	e0bfff03 	ldbu	r2,-4(fp)
    5bac:	10801668 	cmpgeui	r2,r2,89
    5bb0:	10000c1e 	bne	r2,zero,5be4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    5bb4:	e0bffd17 	ldw	r2,-12(fp)
    5bb8:	10800017 	ldw	r2,0(r2)
    5bbc:	10800804 	addi	r2,r2,32
    5bc0:	10800017 	ldw	r2,0(r2)
    5bc4:	e13ffd17 	ldw	r4,-12(fp)
    5bc8:	103ee83a 	callr	r2
    5bcc:	1007883a 	mov	r3,r2
    5bd0:	e0bfff03 	ldbu	r2,-4(fp)
    5bd4:	10bfeb04 	addi	r2,r2,-84
    5bd8:	1885883a 	add	r2,r3,r2
    5bdc:	10800003 	ldbu	r2,0(r2)
    5be0:	00002206 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    5be4:	e0bfff03 	ldbu	r2,-4(fp)
    5be8:	10c00b20 	cmpeqi	r3,r2,44
    5bec:	18000a1e 	bne	r3,zero,5c18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    5bf0:	10c00b48 	cmpgei	r3,r2,45
    5bf4:	1800031e 	bne	r3,zero,5c04 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    5bf8:	10800a20 	cmpeqi	r2,r2,40
    5bfc:	1000081e 	bne	r2,zero,5c20 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    5c00:	00001906 	br	5c68 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    5c04:	10c018a0 	cmpeqi	r3,r2,98
    5c08:	1800071e 	bne	r3,zero,5c28 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    5c0c:	108018e0 	cmpeqi	r2,r2,99
    5c10:	10000d1e 	bne	r2,zero,5c48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    5c14:	00001406 	br	5c68 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    5c18:	00800804 	movi	r2,32
    5c1c:	00001306 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    5c20:	00800344 	movi	r2,13
    5c24:	00001106 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    5c28:	e0bffd17 	ldw	r2,-12(fp)
    5c2c:	10800317 	ldw	r2,12(r2)
    5c30:	1080004c 	andi	r2,r2,1
    5c34:	10000226 	beq	r2,zero,5c40 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    5c38:	00800c04 	movi	r2,48
    5c3c:	00000b06 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5c40:	0005883a 	mov	r2,zero
    5c44:	00000906 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    5c48:	e0bffd17 	ldw	r2,-12(fp)
    5c4c:	10800317 	ldw	r2,12(r2)
    5c50:	1080004c 	andi	r2,r2,1
    5c54:	10000226 	beq	r2,zero,5c60 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    5c58:	00800b84 	movi	r2,46
    5c5c:	00000306 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5c60:	0005883a 	mov	r2,zero
    5c64:	00000106 	br	5c6c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    5c68:	0005883a 	mov	r2,zero
}
    5c6c:	e037883a 	mov	sp,fp
    5c70:	dfc00117 	ldw	ra,4(sp)
    5c74:	df000017 	ldw	fp,0(sp)
    5c78:	dec00204 	addi	sp,sp,8
    5c7c:	f800283a 	ret

00005c80 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    5c80:	defffd04 	addi	sp,sp,-12
    5c84:	df000215 	stw	fp,8(sp)
    5c88:	df000204 	addi	fp,sp,8
    5c8c:	e13ffe15 	stw	r4,-8(fp)
    5c90:	e17fff15 	stw	r5,-4(fp)
        };
    5c94:	0001883a 	nop
    5c98:	e037883a 	mov	sp,fp
    5c9c:	df000017 	ldw	fp,0(sp)
    5ca0:	dec00104 	addi	sp,sp,4
    5ca4:	f800283a 	ret

00005ca8 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5ca8:	defffd04 	addi	sp,sp,-12
    5cac:	df000215 	stw	fp,8(sp)
    5cb0:	df000204 	addi	fp,sp,8
    5cb4:	e13ffe15 	stw	r4,-8(fp)
    5cb8:	e17fff15 	stw	r5,-4(fp)
        };
    5cbc:	0001883a 	nop
    5cc0:	e037883a 	mov	sp,fp
    5cc4:	df000017 	ldw	fp,0(sp)
    5cc8:	dec00104 	addi	sp,sp,4
    5ccc:	f800283a 	ret

00005cd0 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5cd0:	defffd04 	addi	sp,sp,-12
    5cd4:	df000215 	stw	fp,8(sp)
    5cd8:	df000204 	addi	fp,sp,8
    5cdc:	e13ffe15 	stw	r4,-8(fp)
    5ce0:	e17fff15 	stw	r5,-4(fp)
        };
    5ce4:	0001883a 	nop
    5ce8:	e037883a 	mov	sp,fp
    5cec:	df000017 	ldw	fp,0(sp)
    5cf0:	dec00104 	addi	sp,sp,4
    5cf4:	f800283a 	ret

00005cf8 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5cf8:	defffd04 	addi	sp,sp,-12
    5cfc:	df000215 	stw	fp,8(sp)
    5d00:	df000204 	addi	fp,sp,8
    5d04:	e13ffe15 	stw	r4,-8(fp)
    5d08:	e17fff15 	stw	r5,-4(fp)
        };
    5d0c:	0001883a 	nop
    5d10:	e037883a 	mov	sp,fp
    5d14:	df000017 	ldw	fp,0(sp)
    5d18:	dec00104 	addi	sp,sp,4
    5d1c:	f800283a 	ret

00005d20 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5d20:	defffd04 	addi	sp,sp,-12
    5d24:	df000215 	stw	fp,8(sp)
    5d28:	df000204 	addi	fp,sp,8
    5d2c:	e13ffe15 	stw	r4,-8(fp)
    5d30:	e17fff15 	stw	r5,-4(fp)
        };
    5d34:	0001883a 	nop
    5d38:	e037883a 	mov	sp,fp
    5d3c:	df000017 	ldw	fp,0(sp)
    5d40:	dec00104 	addi	sp,sp,4
    5d44:	f800283a 	ret

00005d48 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5d48:	defffd04 	addi	sp,sp,-12
    5d4c:	df000215 	stw	fp,8(sp)
    5d50:	df000204 	addi	fp,sp,8
    5d54:	e13ffe15 	stw	r4,-8(fp)
    5d58:	e17fff15 	stw	r5,-4(fp)
        };
    5d5c:	0001883a 	nop
    5d60:	e037883a 	mov	sp,fp
    5d64:	df000017 	ldw	fp,0(sp)
    5d68:	dec00104 	addi	sp,sp,4
    5d6c:	f800283a 	ret

00005d70 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5d70:	defffd04 	addi	sp,sp,-12
    5d74:	df000215 	stw	fp,8(sp)
    5d78:	df000204 	addi	fp,sp,8
    5d7c:	e13ffe15 	stw	r4,-8(fp)
    5d80:	e17fff15 	stw	r5,-4(fp)
        };
    5d84:	0001883a 	nop
    5d88:	e037883a 	mov	sp,fp
    5d8c:	df000017 	ldw	fp,0(sp)
    5d90:	dec00104 	addi	sp,sp,4
    5d94:	f800283a 	ret

00005d98 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    5d98:	defff704 	addi	sp,sp,-36
    5d9c:	dfc00815 	stw	ra,32(sp)
    5da0:	df000715 	stw	fp,28(sp)
    5da4:	df000704 	addi	fp,sp,28
    5da8:	e13ffd15 	stw	r4,-12(fp)
    5dac:	e17ffe15 	stw	r5,-8(fp)
    5db0:	3005883a 	mov	r2,r6
    5db4:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    5db8:	e0bffd17 	ldw	r2,-12(fp)
    5dbc:	10800303 	ldbu	r2,12(r2)
    5dc0:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    5dc4:	e0bfff03 	ldbu	r2,-4(fp)
    5dc8:	10c011e0 	cmpeqi	r3,r2,71
    5dcc:	1800271e 	bne	r3,zero,5e6c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    5dd0:	10c014e0 	cmpeqi	r3,r2,83
    5dd4:	1800031e 	bne	r3,zero,5de4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    5dd8:	10800e60 	cmpeqi	r2,r2,57
    5ddc:	1000111e 	bne	r2,zero,5e24 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    5de0:	00003506 	br	5eb8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    5de4:	e0bffd17 	ldw	r2,-12(fp)
    5de8:	10800317 	ldw	r2,12(r2)
    5dec:	1080004c 	andi	r2,r2,1
    5df0:	0084303a 	nor	r2,zero,r2
    5df4:	1080004c 	andi	r2,r2,1
    5df8:	1007883a 	mov	r3,r2
    5dfc:	e0bffd17 	ldw	r2,-12(fp)
    5e00:	1940004c 	andi	r5,r3,1
    5e04:	11000303 	ldbu	r4,12(r2)
    5e08:	00ffff84 	movi	r3,-2
    5e0c:	20c6703a 	and	r3,r4,r3
    5e10:	1809883a 	mov	r4,r3
    5e14:	2807883a 	mov	r3,r5
    5e18:	20c6b03a 	or	r3,r4,r3
    5e1c:	10c00305 	stb	r3,12(r2)
                                break;
    5e20:	00002506 	br	5eb8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    5e24:	e0bffd17 	ldw	r2,-12(fp)
    5e28:	10800317 	ldw	r2,12(r2)
    5e2c:	1004d07a 	srli	r2,r2,1
    5e30:	1080004c 	andi	r2,r2,1
    5e34:	0084303a 	nor	r2,zero,r2
    5e38:	1080004c 	andi	r2,r2,1
    5e3c:	1007883a 	mov	r3,r2
    5e40:	e0bffd17 	ldw	r2,-12(fp)
    5e44:	18c0004c 	andi	r3,r3,1
    5e48:	18cb883a 	add	r5,r3,r3
    5e4c:	11000303 	ldbu	r4,12(r2)
    5e50:	00ffff44 	movi	r3,-3
    5e54:	20c6703a 	and	r3,r4,r3
    5e58:	1809883a 	mov	r4,r3
    5e5c:	2807883a 	mov	r3,r5
    5e60:	20c6b03a 	or	r3,r4,r3
    5e64:	10c00305 	stb	r3,12(r2)
                                break;
    5e68:	00001306 	br	5eb8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    5e6c:	e0bffd17 	ldw	r2,-12(fp)
    5e70:	10800317 	ldw	r2,12(r2)
    5e74:	1004d0ba 	srli	r2,r2,2
    5e78:	1080004c 	andi	r2,r2,1
    5e7c:	0084303a 	nor	r2,zero,r2
    5e80:	1080004c 	andi	r2,r2,1
    5e84:	1007883a 	mov	r3,r2
    5e88:	e0bffd17 	ldw	r2,-12(fp)
    5e8c:	18c0004c 	andi	r3,r3,1
    5e90:	18c7883a 	add	r3,r3,r3
    5e94:	18cb883a 	add	r5,r3,r3
    5e98:	11000303 	ldbu	r4,12(r2)
    5e9c:	00fffec4 	movi	r3,-5
    5ea0:	20c6703a 	and	r3,r4,r3
    5ea4:	1809883a 	mov	r4,r3
    5ea8:	2807883a 	mov	r3,r5
    5eac:	20c6b03a 	or	r3,r4,r3
    5eb0:	10c00305 	stb	r3,12(r2)
                                break;
    5eb4:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    5eb8:	e0bffd17 	ldw	r2,-12(fp)
    5ebc:	10800303 	ldbu	r2,12(r2)
    5ec0:	10c03fcc 	andi	r3,r2,255
    5ec4:	e0bffc03 	ldbu	r2,-16(fp)
    5ec8:	18801026 	beq	r3,r2,5f0c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    5ecc:	e0bffe17 	ldw	r2,-8(fp)
    5ed0:	10000e26 	beq	r2,zero,5f0c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    5ed4:	e0bffd17 	ldw	r2,-12(fp)
    5ed8:	10800303 	ldbu	r2,12(r2)
    5edc:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    5ee0:	e0bffc44 	addi	r2,fp,-15
    5ee4:	d8800215 	stw	r2,8(sp)
    5ee8:	00800044 	movi	r2,1
    5eec:	d8800115 	stw	r2,4(sp)
    5ef0:	d8000015 	stw	zero,0(sp)
    5ef4:	01c00084 	movi	r7,2
    5ef8:	000d883a 	mov	r6,zero
    5efc:	000b883a 	mov	r5,zero
    5f00:	e13ffe17 	ldw	r4,-8(fp)
    5f04:	0008e1c0 	call	8e1c <_ZN6USBHID9SetReportEhhhhtPh>
    5f08:	00000106 	br	5f10 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    5f0c:	0005883a 	mov	r2,zero
        };
    5f10:	e037883a 	mov	sp,fp
    5f14:	dfc00117 	ldw	ra,4(sp)
    5f18:	df000017 	ldw	fp,0(sp)
    5f1c:	dec00204 	addi	sp,sp,8
    5f20:	f800283a 	ret

00005f24 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    5f24:	defffc04 	addi	sp,sp,-16
    5f28:	df000315 	stw	fp,12(sp)
    5f2c:	df000304 	addi	fp,sp,12
    5f30:	e13ffd15 	stw	r4,-12(fp)
    5f34:	2807883a 	mov	r3,r5
    5f38:	3005883a 	mov	r2,r6
    5f3c:	e0fffe05 	stb	r3,-8(fp)
    5f40:	e0bfff05 	stb	r2,-4(fp)
        };
    5f44:	0001883a 	nop
    5f48:	e037883a 	mov	sp,fp
    5f4c:	df000017 	ldw	fp,0(sp)
    5f50:	dec00104 	addi	sp,sp,4
    5f54:	f800283a 	ret

00005f58 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    5f58:	defffc04 	addi	sp,sp,-16
    5f5c:	df000315 	stw	fp,12(sp)
    5f60:	df000304 	addi	fp,sp,12
    5f64:	e13ffd15 	stw	r4,-12(fp)
    5f68:	2807883a 	mov	r3,r5
    5f6c:	3005883a 	mov	r2,r6
    5f70:	e0fffe05 	stb	r3,-8(fp)
    5f74:	e0bfff05 	stb	r2,-4(fp)
        };
    5f78:	0001883a 	nop
    5f7c:	e037883a 	mov	sp,fp
    5f80:	df000017 	ldw	fp,0(sp)
    5f84:	dec00104 	addi	sp,sp,4
    5f88:	f800283a 	ret

00005f8c <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    5f8c:	defffc04 	addi	sp,sp,-16
    5f90:	df000315 	stw	fp,12(sp)
    5f94:	df000304 	addi	fp,sp,12
    5f98:	e13ffd15 	stw	r4,-12(fp)
    5f9c:	2807883a 	mov	r3,r5
    5fa0:	3005883a 	mov	r2,r6
    5fa4:	e0fffe05 	stb	r3,-8(fp)
    5fa8:	e0bfff05 	stb	r2,-4(fp)
        };
    5fac:	0001883a 	nop
    5fb0:	e037883a 	mov	sp,fp
    5fb4:	df000017 	ldw	fp,0(sp)
    5fb8:	dec00104 	addi	sp,sp,4
    5fbc:	f800283a 	ret

00005fc0 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    5fc0:	defffe04 	addi	sp,sp,-8
    5fc4:	df000115 	stw	fp,4(sp)
    5fc8:	df000104 	addi	fp,sp,4
    5fcc:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    5fd0:	008000b4 	movhi	r2,2
    5fd4:	10978484 	addi	r2,r2,24082
        };
    5fd8:	e037883a 	mov	sp,fp
    5fdc:	df000017 	ldw	fp,0(sp)
    5fe0:	dec00104 	addi	sp,sp,4
    5fe4:	f800283a 	ret

00005fe8 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    5fe8:	defffe04 	addi	sp,sp,-8
    5fec:	df000115 	stw	fp,4(sp)
    5ff0:	df000104 	addi	fp,sp,4
    5ff4:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    5ff8:	008000b4 	movhi	r2,2
    5ffc:	10978704 	addi	r2,r2,24092
        };
    6000:	e037883a 	mov	sp,fp
    6004:	df000017 	ldw	fp,0(sp)
    6008:	dec00104 	addi	sp,sp,4
    600c:	f800283a 	ret

00006010 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    6010:	defffe04 	addi	sp,sp,-8
    6014:	df000115 	stw	fp,4(sp)
    6018:	df000104 	addi	fp,sp,4
    601c:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    6020:	008000b4 	movhi	r2,2
    6024:	10978a04 	addi	r2,r2,24104
        };
    6028:	e037883a 	mov	sp,fp
    602c:	df000017 	ldw	fp,0(sp)
    6030:	dec00104 	addi	sp,sp,4
    6034:	f800283a 	ret

00006038 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    6038:	defffe04 	addi	sp,sp,-8
    603c:	df000115 	stw	fp,4(sp)
    6040:	df000104 	addi	fp,sp,4
    6044:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    6048:	d0a1e784 	addi	r2,gp,-30818
        };
    604c:	e037883a 	mov	sp,fp
    6050:	df000017 	ldw	fp,0(sp)
    6054:	dec00104 	addi	sp,sp,4
    6058:	f800283a 	ret

0000605c <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    605c:	defffc04 	addi	sp,sp,-16
    6060:	dfc00315 	stw	ra,12(sp)
    6064:	df000215 	stw	fp,8(sp)
    6068:	df000204 	addi	fp,sp,8
    606c:	2005883a 	mov	r2,r4
    6070:	e17fff15 	stw	r5,-4(fp)
    6074:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    6078:	d0e1ec17 	ldw	r3,-30800(gp)
    607c:	e0bfff17 	ldw	r2,-4(fp)
    6080:	18800416 	blt	r3,r2,6094 <_Z9E_Notifycci+0x38>
        printf("%c", c);
    6084:	e0bffe07 	ldb	r2,-8(fp)
    6088:	1009883a 	mov	r4,r2
    608c:	000ed440 	call	ed44 <putchar>
    6090:	00000106 	br	6098 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6094:	0001883a 	nop
        printf("%c", c);
}
    6098:	e037883a 	mov	sp,fp
    609c:	dfc00117 	ldw	ra,4(sp)
    60a0:	df000017 	ldw	fp,0(sp)
    60a4:	dec00204 	addi	sp,sp,8
    60a8:	f800283a 	ret

000060ac <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    60ac:	defffb04 	addi	sp,sp,-20
    60b0:	dfc00415 	stw	ra,16(sp)
    60b4:	df000315 	stw	fp,12(sp)
    60b8:	df000304 	addi	fp,sp,12
    60bc:	e13ffe15 	stw	r4,-8(fp)
    60c0:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    60c4:	d0e1ec17 	ldw	r3,-30800(gp)
    60c8:	e0bfff17 	ldw	r2,-4(fp)
    60cc:	18801016 	blt	r3,r2,6110 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    60d0:	e0bffe17 	ldw	r2,-8(fp)
    60d4:	10001026 	beq	r2,zero,6118 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    60d8:	e0bffe17 	ldw	r2,-8(fp)
    60dc:	10c00044 	addi	r3,r2,1
    60e0:	e0fffe15 	stw	r3,-8(fp)
    60e4:	10800003 	ldbu	r2,0(r2)
    60e8:	e0bffd05 	stb	r2,-12(fp)
    60ec:	e0bffd07 	ldb	r2,-12(fp)
    60f0:	1004c03a 	cmpne	r2,r2,zero
    60f4:	10803fcc 	andi	r2,r2,255
    60f8:	10000826 	beq	r2,zero,611c <_Z8E_NotifyPKci+0x70>
    60fc:	e0bffd07 	ldb	r2,-12(fp)
    6100:	e17fff17 	ldw	r5,-4(fp)
    6104:	1009883a 	mov	r4,r2
    6108:	000605c0 	call	605c <_Z9E_Notifycci>
    610c:	003ff206 	br	60d8 <__alt_data_end+0xfc0060d8>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6110:	0001883a 	nop
    6114:	00000106 	br	611c <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    6118:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    611c:	e037883a 	mov	sp,fp
    6120:	dfc00117 	ldw	ra,4(sp)
    6124:	df000017 	ldw	fp,0(sp)
    6128:	dec00204 	addi	sp,sp,8
    612c:	f800283a 	ret

00006130 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    6130:	defffb04 	addi	sp,sp,-20
    6134:	dfc00415 	stw	ra,16(sp)
    6138:	df000315 	stw	fp,12(sp)
    613c:	df000304 	addi	fp,sp,12
    6140:	e13ffe15 	stw	r4,-8(fp)
    6144:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6148:	d0e1ec17 	ldw	r3,-30800(gp)
    614c:	e0bfff17 	ldw	r2,-4(fp)
    6150:	18801016 	blt	r3,r2,6194 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    6154:	e0bffe17 	ldw	r2,-8(fp)
    6158:	10001026 	beq	r2,zero,619c <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    615c:	e0bffe17 	ldw	r2,-8(fp)
    6160:	10c00044 	addi	r3,r2,1
    6164:	e0fffe15 	stw	r3,-8(fp)
    6168:	10800003 	ldbu	r2,0(r2)
    616c:	e0bffd05 	stb	r2,-12(fp)
    6170:	e0bffd07 	ldb	r2,-12(fp)
    6174:	1004c03a 	cmpne	r2,r2,zero
    6178:	10803fcc 	andi	r2,r2,255
    617c:	10000826 	beq	r2,zero,61a0 <_Z11E_NotifyStrPKci+0x70>
    6180:	e0bffd07 	ldb	r2,-12(fp)
    6184:	e17fff17 	ldw	r5,-4(fp)
    6188:	1009883a 	mov	r4,r2
    618c:	000605c0 	call	605c <_Z9E_Notifycci>
    6190:	003ff206 	br	615c <__alt_data_end+0xfc00615c>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6194:	0001883a 	nop
    6198:	00000106 	br	61a0 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    619c:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    61a0:	e037883a 	mov	sp,fp
    61a4:	dfc00117 	ldw	ra,4(sp)
    61a8:	df000017 	ldw	fp,0(sp)
    61ac:	dec00204 	addi	sp,sp,8
    61b0:	f800283a 	ret

000061b4 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    61b4:	defffd04 	addi	sp,sp,-12
    61b8:	df000215 	stw	fp,8(sp)
    61bc:	df000204 	addi	fp,sp,8
    61c0:	2005883a 	mov	r2,r4
    61c4:	e17fff15 	stw	r5,-4(fp)
    61c8:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    61cc:	e037883a 	mov	sp,fp
    61d0:	df000017 	ldw	fp,0(sp)
    61d4:	dec00104 	addi	sp,sp,4
    61d8:	f800283a 	ret

000061dc <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    61dc:	defffc04 	addi	sp,sp,-16
    61e0:	df000315 	stw	fp,12(sp)
    61e4:	df000304 	addi	fp,sp,12
    61e8:	e13ffd15 	stw	r4,-12(fp)
    61ec:	e17ffe15 	stw	r5,-8(fp)
    61f0:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    61f4:	e037883a 	mov	sp,fp
    61f8:	df000017 	ldw	fp,0(sp)
    61fc:	dec00104 	addi	sp,sp,4
    6200:	f800283a 	ret

00006204 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    6204:	defffc04 	addi	sp,sp,-16
    6208:	df000315 	stw	fp,12(sp)
    620c:	df000304 	addi	fp,sp,12
    6210:	e13ffd15 	stw	r4,-12(fp)
    6214:	e17ffe15 	stw	r5,-8(fp)
    6218:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    621c:	e0bffd17 	ldw	r2,-12(fp)
    6220:	10800017 	ldw	r2,0(r2)
    6224:	1000021e 	bne	r2,zero,6230 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    6228:	0005883a 	mov	r2,zero
    622c:	00003306 	br	62fc <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    6230:	e0bffd17 	ldw	r2,-12(fp)
    6234:	10800103 	ldbu	r2,4(r2)
    6238:	10803fcc 	andi	r2,r2,255
    623c:	10002426 	beq	r2,zero,62d0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    6240:	e0bfff17 	ldw	r2,-4(fp)
    6244:	1080000b 	ldhu	r2,0(r2)
    6248:	10bfffcc 	andi	r2,r2,65535
    624c:	10002026 	beq	r2,zero,62d0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    6250:	e0bffd17 	ldw	r2,-12(fp)
    6254:	10800017 	ldw	r2,0(r2)
    6258:	e0fffd17 	ldw	r3,-12(fp)
    625c:	18c00143 	ldbu	r3,5(r3)
    6260:	19003fcc 	andi	r4,r3,255
    6264:	e0fffd17 	ldw	r3,-12(fp)
    6268:	18c00103 	ldbu	r3,4(r3)
    626c:	18c03fcc 	andi	r3,r3,255
    6270:	20c7c83a 	sub	r3,r4,r3
    6274:	10c5883a 	add	r2,r2,r3
    6278:	e0fffe17 	ldw	r3,-8(fp)
    627c:	18c00017 	ldw	r3,0(r3)
    6280:	18c00003 	ldbu	r3,0(r3)
    6284:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    6288:	e0bffd17 	ldw	r2,-12(fp)
    628c:	10800103 	ldbu	r2,4(r2)
    6290:	10bfffc4 	addi	r2,r2,-1
    6294:	1007883a 	mov	r3,r2
    6298:	e0bffd17 	ldw	r2,-12(fp)
    629c:	10c00105 	stb	r3,4(r2)
    62a0:	e0bfff17 	ldw	r2,-4(fp)
    62a4:	1080000b 	ldhu	r2,0(r2)
    62a8:	10bfffc4 	addi	r2,r2,-1
    62ac:	1007883a 	mov	r3,r2
    62b0:	e0bfff17 	ldw	r2,-4(fp)
    62b4:	10c0000d 	sth	r3,0(r2)
    62b8:	e0bffe17 	ldw	r2,-8(fp)
    62bc:	10800017 	ldw	r2,0(r2)
    62c0:	10c00044 	addi	r3,r2,1
    62c4:	e0bffe17 	ldw	r2,-8(fp)
    62c8:	10c00015 	stw	r3,0(r2)
    62cc:	003fd806 	br	6230 <__alt_data_end+0xfc006230>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    62d0:	e0bffd17 	ldw	r2,-12(fp)
    62d4:	10800103 	ldbu	r2,4(r2)
    62d8:	10803fcc 	andi	r2,r2,255
    62dc:	10000226 	beq	r2,zero,62e8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    62e0:	0005883a 	mov	r2,zero
    62e4:	00000506 	br	62fc <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    62e8:	e0bffd17 	ldw	r2,-12(fp)
    62ec:	10c00143 	ldbu	r3,5(r2)
    62f0:	e0bffd17 	ldw	r2,-12(fp)
    62f4:	10c00105 	stb	r3,4(r2)
        return true;
    62f8:	00800044 	movi	r2,1
}
    62fc:	e037883a 	mov	sp,fp
    6300:	df000017 	ldw	fp,0(sp)
    6304:	dec00104 	addi	sp,sp,4
    6308:	f800283a 	ret

0000630c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    630c:	defffa04 	addi	sp,sp,-24
    6310:	dfc00515 	stw	ra,20(sp)
    6314:	df000415 	stw	fp,16(sp)
    6318:	df000404 	addi	fp,sp,16
    631c:	e13ffc15 	stw	r4,-16(fp)
    6320:	e17ffd15 	stw	r5,-12(fp)
    6324:	e1bffe15 	stw	r6,-8(fp)
    6328:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    632c:	e0bffc17 	ldw	r2,-16(fp)
    6330:	10800003 	ldbu	r2,0(r2)
    6334:	10803fcc 	andi	r2,r2,255
    6338:	10c00060 	cmpeqi	r3,r2,1
    633c:	1800181e 	bne	r3,zero,63a0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    6340:	10c00088 	cmpgei	r3,r2,2
    6344:	1800021e 	bne	r3,zero,6350 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    6348:	10000626 	beq	r2,zero,6364 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    634c:	00007e06 	br	6548 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    6350:	10c000a0 	cmpeqi	r3,r2,2
    6354:	18004a1e 	bne	r3,zero,6480 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    6358:	108000e0 	cmpeqi	r2,r2,3
    635c:	1000571e 	bne	r2,zero,64bc <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    6360:	00007906 	br	6548 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    6364:	e0bffc17 	ldw	r2,-16(fp)
    6368:	10800417 	ldw	r2,16(r2)
    636c:	e0fffc17 	ldw	r3,-16(fp)
    6370:	18c00303 	ldbu	r3,12(r3)
    6374:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6378:	e0bffc17 	ldw	r2,-16(fp)
    637c:	10c00504 	addi	r3,r2,20
    6380:	e0bffc17 	ldw	r2,-16(fp)
    6384:	10800417 	ldw	r2,16(r2)
    6388:	100b883a 	mov	r5,r2
    638c:	1809883a 	mov	r4,r3
    6390:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    6394:	e0bffc17 	ldw	r2,-16(fp)
    6398:	00c00044 	movi	r3,1
    639c:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    63a0:	e0bffc17 	ldw	r2,-16(fp)
    63a4:	10800504 	addi	r2,r2,20
    63a8:	e1bffe17 	ldw	r6,-8(fp)
    63ac:	e17ffd17 	ldw	r5,-12(fp)
    63b0:	1009883a 	mov	r4,r2
    63b4:	00062040 	call	6204 <_ZN20MultiByteValueParser5ParseEPPhPt>
    63b8:	1080005c 	xori	r2,r2,1
    63bc:	10803fcc 	andi	r2,r2,255
    63c0:	10000226 	beq	r2,zero,63cc <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    63c4:	0005883a 	mov	r2,zero
    63c8:	00006006 	br	654c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    63cc:	e0bffc17 	ldw	r2,-16(fp)
    63d0:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    63d4:	e0bffc17 	ldw	r2,-16(fp)
    63d8:	10800417 	ldw	r2,16(r2)
    63dc:	10800003 	ldbu	r2,0(r2)
    63e0:	10803fcc 	andi	r2,r2,255
    63e4:	10800130 	cmpltui	r2,r2,4
    63e8:	10000e1e 	bne	r2,zero,6424 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    63ec:	e0bffc17 	ldw	r2,-16(fp)
    63f0:	10800417 	ldw	r2,16(r2)
    63f4:	10c00043 	ldbu	r3,1(r2)
    63f8:	11000083 	ldbu	r4,2(r2)
    63fc:	2008923a 	slli	r4,r4,8
    6400:	20c6b03a 	or	r3,r4,r3
    6404:	110000c3 	ldbu	r4,3(r2)
    6408:	2008943a 	slli	r4,r4,16
    640c:	20c6b03a 	or	r3,r4,r3
    6410:	10800103 	ldbu	r2,4(r2)
    6414:	1004963a 	slli	r2,r2,24
    6418:	10c4b03a 	or	r2,r2,r3
    641c:	10800017 	ldw	r2,0(r2)
    6420:	00000e06 	br	645c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    6424:	e0bffc17 	ldw	r2,-16(fp)
    6428:	10800417 	ldw	r2,16(r2)
    642c:	10c00043 	ldbu	r3,1(r2)
    6430:	11000083 	ldbu	r4,2(r2)
    6434:	2008923a 	slli	r4,r4,8
    6438:	20c6b03a 	or	r3,r4,r3
    643c:	110000c3 	ldbu	r4,3(r2)
    6440:	2008943a 	slli	r4,r4,16
    6444:	20c6b03a 	or	r3,r4,r3
    6448:	10800103 	ldbu	r2,4(r2)
    644c:	1004963a 	slli	r2,r2,24
    6450:	10c4b03a 	or	r2,r2,r3
    6454:	1080000b 	ldhu	r2,0(r2)
    6458:	10bfffcc 	andi	r2,r2,65535
    645c:	e0fffc17 	ldw	r3,-16(fp)
    6460:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    6464:	e0bffc17 	ldw	r2,-16(fp)
    6468:	10c00117 	ldw	r3,4(r2)
    646c:	e0bffc17 	ldw	r2,-16(fp)
    6470:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    6474:	e0bffc17 	ldw	r2,-16(fp)
    6478:	00c00084 	movi	r3,2
    647c:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    6480:	e0bffc17 	ldw	r2,-16(fp)
    6484:	10800417 	ldw	r2,16(r2)
    6488:	e0fffc17 	ldw	r3,-16(fp)
    648c:	18c00343 	ldbu	r3,13(r3)
    6490:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6494:	e0bffc17 	ldw	r2,-16(fp)
    6498:	10c00504 	addi	r3,r2,20
    649c:	e0bffc17 	ldw	r2,-16(fp)
    64a0:	10800417 	ldw	r2,16(r2)
    64a4:	100b883a 	mov	r5,r2
    64a8:	1809883a 	mov	r4,r3
    64ac:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    64b0:	e0bffc17 	ldw	r2,-16(fp)
    64b4:	00c000c4 	movi	r3,3
    64b8:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    64bc:	e0bffc17 	ldw	r2,-16(fp)
    64c0:	10800217 	ldw	r2,8(r2)
    64c4:	10001e26 	beq	r2,zero,6540 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    64c8:	e0bffc17 	ldw	r2,-16(fp)
    64cc:	10800504 	addi	r2,r2,20
    64d0:	e1bffe17 	ldw	r6,-8(fp)
    64d4:	e17ffd17 	ldw	r5,-12(fp)
    64d8:	1009883a 	mov	r4,r2
    64dc:	00062040 	call	6204 <_ZN20MultiByteValueParser5ParseEPPhPt>
    64e0:	1080005c 	xori	r2,r2,1
    64e4:	10803fcc 	andi	r2,r2,255
    64e8:	10000226 	beq	r2,zero,64f4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    64ec:	0005883a 	mov	r2,zero
    64f0:	00001606 	br	654c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    64f4:	e0bfff17 	ldw	r2,-4(fp)
    64f8:	10000b26 	beq	r2,zero,6528 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    64fc:	e0bffc17 	ldw	r2,-16(fp)
    6500:	11000417 	ldw	r4,16(r2)
    6504:	e0bffc17 	ldw	r2,-16(fp)
    6508:	10c00117 	ldw	r3,4(r2)
    650c:	e0bffc17 	ldw	r2,-16(fp)
    6510:	10800217 	ldw	r2,8(r2)
    6514:	1887c83a 	sub	r3,r3,r2
    6518:	e0bfff17 	ldw	r2,-4(fp)
    651c:	e1800217 	ldw	r6,8(fp)
    6520:	180b883a 	mov	r5,r3
    6524:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6528:	e0bffc17 	ldw	r2,-16(fp)
    652c:	10800217 	ldw	r2,8(r2)
    6530:	10ffffc4 	addi	r3,r2,-1
    6534:	e0bffc17 	ldw	r2,-16(fp)
    6538:	10c00215 	stw	r3,8(r2)
    653c:	003fdf06 	br	64bc <__alt_data_end+0xfc0064bc>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    6540:	e0bffc17 	ldw	r2,-16(fp)
    6544:	10000005 	stb	zero,0(r2)
        }
        return true;
    6548:	00800044 	movi	r2,1
}
    654c:	e037883a 	mov	sp,fp
    6550:	dfc00117 	ldw	ra,4(sp)
    6554:	df000017 	ldw	fp,0(sp)
    6558:	dec00204 	addi	sp,sp,8
    655c:	f800283a 	ret

00006560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    6560:	defff904 	addi	sp,sp,-28
    6564:	dfc00615 	stw	ra,24(sp)
    6568:	df000515 	stw	fp,20(sp)
    656c:	df000504 	addi	fp,sp,20
    6570:	e13ffd15 	stw	r4,-12(fp)
    6574:	2807883a 	mov	r3,r5
    6578:	3005883a 	mov	r2,r6
    657c:	e0fffe05 	stb	r3,-8(fp)
    6580:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    6584:	e0bfff0b 	ldhu	r2,-4(fp)
    6588:	1005d23a 	srai	r2,r2,8
    658c:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    6590:	e0bfff0b 	ldhu	r2,-4(fp)
    6594:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    6598:	e03ffb8d 	sth	zero,-18(fp)
    659c:	e03ffc0d 	sth	zero,-16(fp)
    65a0:	e0bffe03 	ldbu	r2,-8(fp)
    65a4:	e0bffbc5 	stb	r2,-17(fp)
    65a8:	e0bffb03 	ldbu	r2,-20(fp)
    65ac:	e0bffc05 	stb	r2,-16(fp)
    65b0:	e0bffb43 	ldbu	r2,-19(fp)
    65b4:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    65b8:	e0bffb84 	addi	r2,fp,-18
    65bc:	000f883a 	mov	r7,zero
    65c0:	01800104 	movi	r6,4
    65c4:	100b883a 	mov	r5,r2
    65c8:	e13ffd17 	ldw	r4,-12(fp)
    65cc:	00207040 	call	20704 <alt_avalon_i2c_master_tx>
    65d0:	1004c03a 	cmpne	r2,r2,zero
    65d4:	10803fcc 	andi	r2,r2,255
    65d8:	10000426 	beq	r2,zero,65ec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    65dc:	010000b4 	movhi	r4,2
    65e0:	2117b804 	addi	r4,r4,24288
    65e4:	000ed000 	call	ed00 <printf>
	}
	return;
    65e8:	0001883a 	nop
    65ec:	0001883a 	nop
}
    65f0:	e037883a 	mov	sp,fp
    65f4:	dfc00117 	ldw	ra,4(sp)
    65f8:	df000017 	ldw	fp,0(sp)
    65fc:	dec00204 	addi	sp,sp,8
    6600:	f800283a 	ret

00006604 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6604:	defff604 	addi	sp,sp,-40
    6608:	dfc00915 	stw	ra,36(sp)
    660c:	df000815 	stw	fp,32(sp)
    6610:	dc000715 	stw	r16,28(sp)
    6614:	df000804 	addi	fp,sp,32
    6618:	e13ffb15 	stw	r4,-20(fp)
    661c:	3009883a 	mov	r4,r6
    6620:	e1fffe15 	stw	r7,-8(fp)
    6624:	e17ffc05 	stb	r5,-16(fp)
    6628:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    662c:	d809883a 	mov	r4,sp
    6630:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    6634:	e13ffd03 	ldbu	r4,-12(fp)
    6638:	21000044 	addi	r4,r4,1
    663c:	2109883a 	add	r4,r4,r4
    6640:	213fffc4 	addi	r4,r4,-1
    6644:	e13ff915 	stw	r4,-28(fp)
    6648:	200b883a 	mov	r5,r4
    664c:	29400044 	addi	r5,r5,1
    6650:	2819883a 	mov	r12,r5
    6654:	001b883a 	mov	r13,zero
    6658:	600ad77a 	srli	r5,r12,29
    665c:	681290fa 	slli	r9,r13,3
    6660:	2a52b03a 	or	r9,r5,r9
    6664:	601090fa 	slli	r8,r12,3
    6668:	200b883a 	mov	r5,r4
    666c:	29400044 	addi	r5,r5,1
    6670:	2815883a 	mov	r10,r5
    6674:	0017883a 	mov	r11,zero
    6678:	500ad77a 	srli	r5,r10,29
    667c:	580690fa 	slli	r3,r11,3
    6680:	28c6b03a 	or	r3,r5,r3
    6684:	500490fa 	slli	r2,r10,3
    6688:	2005883a 	mov	r2,r4
    668c:	10800044 	addi	r2,r2,1
    6690:	108000c4 	addi	r2,r2,3
    6694:	1004d0ba 	srli	r2,r2,2
    6698:	1085883a 	add	r2,r2,r2
    669c:	1085883a 	add	r2,r2,r2
    66a0:	d8b7c83a 	sub	sp,sp,r2
    66a4:	d805883a 	mov	r2,sp
    66a8:	1005883a 	mov	r2,r2
    66ac:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    66b0:	e0bffa17 	ldw	r2,-24(fp)
    66b4:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    66b8:	e0bffa17 	ldw	r2,-24(fp)
    66bc:	e0fffc03 	ldbu	r3,-16(fp)
    66c0:	10c00045 	stb	r3,1(r2)
	int i = 0;
    66c4:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    66c8:	e03ff815 	stw	zero,-32(fp)
    66cc:	e0bffd03 	ldbu	r2,-12(fp)
    66d0:	e0fff817 	ldw	r3,-32(fp)
    66d4:	18801e0e 	bge	r3,r2,6750 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    66d8:	e0bff817 	ldw	r2,-32(fp)
    66dc:	10c00084 	addi	r3,r2,2
    66e0:	e0bff817 	ldw	r2,-32(fp)
    66e4:	1085883a 	add	r2,r2,r2
    66e8:	1009883a 	mov	r4,r2
    66ec:	e0bffe17 	ldw	r2,-8(fp)
    66f0:	1105883a 	add	r2,r2,r4
    66f4:	1080000b 	ldhu	r2,0(r2)
    66f8:	10bfffcc 	andi	r2,r2,65535
    66fc:	1005d23a 	srai	r2,r2,8
    6700:	1009883a 	mov	r4,r2
    6704:	e0bffa17 	ldw	r2,-24(fp)
    6708:	10c5883a 	add	r2,r2,r3
    670c:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    6710:	e0bff817 	ldw	r2,-32(fp)
    6714:	10c000c4 	addi	r3,r2,3
    6718:	e0bff817 	ldw	r2,-32(fp)
    671c:	1085883a 	add	r2,r2,r2
    6720:	1009883a 	mov	r4,r2
    6724:	e0bffe17 	ldw	r2,-8(fp)
    6728:	1105883a 	add	r2,r2,r4
    672c:	1080000b 	ldhu	r2,0(r2)
    6730:	1009883a 	mov	r4,r2
    6734:	e0bffa17 	ldw	r2,-24(fp)
    6738:	10c5883a 	add	r2,r2,r3
    673c:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    6740:	e0bff817 	ldw	r2,-32(fp)
    6744:	10800044 	addi	r2,r2,1
    6748:	e0bff815 	stw	r2,-32(fp)
    674c:	003fdf06 	br	66cc <__alt_data_end+0xfc0066cc>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6750:	e0fffa17 	ldw	r3,-24(fp)
    6754:	e0bffd03 	ldbu	r2,-12(fp)
    6758:	10800044 	addi	r2,r2,1
    675c:	1085883a 	add	r2,r2,r2
    6760:	000f883a 	mov	r7,zero
    6764:	100d883a 	mov	r6,r2
    6768:	180b883a 	mov	r5,r3
    676c:	e13ffb17 	ldw	r4,-20(fp)
    6770:	00207040 	call	20704 <alt_avalon_i2c_master_tx>
    6774:	1004c03a 	cmpne	r2,r2,zero
    6778:	10803fcc 	andi	r2,r2,255
    677c:	10000326 	beq	r2,zero,678c <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    6780:	010000b4 	movhi	r4,2
    6784:	2117bf04 	addi	r4,r4,24316
    6788:	000ed000 	call	ed00 <printf>
	}
	return (data+nwords);
    678c:	e0bffd03 	ldbu	r2,-12(fp)
    6790:	1085883a 	add	r2,r2,r2
    6794:	1007883a 	mov	r3,r2
    6798:	e0bffe17 	ldw	r2,-8(fp)
    679c:	10c5883a 	add	r2,r2,r3
    67a0:	8037883a 	mov	sp,r16
}
    67a4:	e6ffff04 	addi	sp,fp,-4
    67a8:	dfc00217 	ldw	ra,8(sp)
    67ac:	df000117 	ldw	fp,4(sp)
    67b0:	dc000017 	ldw	r16,0(sp)
    67b4:	dec00304 	addi	sp,sp,12
    67b8:	f800283a 	ret

000067bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    67bc:	defff804 	addi	sp,sp,-32
    67c0:	dfc00715 	stw	ra,28(sp)
    67c4:	df000615 	stw	fp,24(sp)
    67c8:	df000604 	addi	fp,sp,24
    67cc:	e13ffe15 	stw	r4,-8(fp)
    67d0:	2805883a 	mov	r2,r5
    67d4:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    67d8:	e03ffc8d 	sth	zero,-14(fp)
    67dc:	e0bfff03 	ldbu	r2,-4(fp)
    67e0:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    67e4:	e03ffd05 	stb	zero,-12(fp)
    67e8:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    67ec:	e13ffd04 	addi	r4,fp,-12
    67f0:	e0fffc84 	addi	r3,fp,-14
    67f4:	d8000115 	stw	zero,4(sp)
    67f8:	00800084 	movi	r2,2
    67fc:	d8800015 	stw	r2,0(sp)
    6800:	200f883a 	mov	r7,r4
    6804:	01800084 	movi	r6,2
    6808:	180b883a 	mov	r5,r3
    680c:	e13ffe17 	ldw	r4,-8(fp)
    6810:	00209280 	call	20928 <alt_avalon_i2c_master_tx_rx>
    6814:	1004c03a 	cmpne	r2,r2,zero
    6818:	10803fcc 	andi	r2,r2,255
    681c:	10000326 	beq	r2,zero,682c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    6820:	010000b4 	movhi	r4,2
    6824:	2117c504 	addi	r4,r4,24340
    6828:	000ed000 	call	ed00 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    682c:	e0bffd03 	ldbu	r2,-12(fp)
    6830:	10803fcc 	andi	r2,r2,255
    6834:	1004923a 	slli	r2,r2,8
    6838:	1007883a 	mov	r3,r2
    683c:	e0bffd43 	ldbu	r2,-11(fp)
    6840:	10803fcc 	andi	r2,r2,255
    6844:	1884b03a 	or	r2,r3,r2
    6848:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    684c:	e0bffc0b 	ldhu	r2,-16(fp)
}
    6850:	e037883a 	mov	sp,fp
    6854:	dfc00117 	ldw	ra,4(sp)
    6858:	df000017 	ldw	fp,0(sp)
    685c:	dec00204 	addi	sp,sp,8
    6860:	f800283a 	ret

00006864 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6864:	defff304 	addi	sp,sp,-52
    6868:	dfc00c15 	stw	ra,48(sp)
    686c:	df000b15 	stw	fp,44(sp)
    6870:	dc000a15 	stw	r16,40(sp)
    6874:	df000b04 	addi	fp,sp,44
    6878:	e13ffb15 	stw	r4,-20(fp)
    687c:	3009883a 	mov	r4,r6
    6880:	e1fffe15 	stw	r7,-8(fp)
    6884:	e17ffc05 	stb	r5,-16(fp)
    6888:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    688c:	d809883a 	mov	r4,sp
    6890:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    6894:	e03ffa0d 	sth	zero,-24(fp)
    6898:	e13ffc03 	ldbu	r4,-16(fp)
    689c:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    68a0:	e13ffd03 	ldbu	r4,-12(fp)
    68a4:	2109883a 	add	r4,r4,r4
    68a8:	213fffc4 	addi	r4,r4,-1
    68ac:	e13ff815 	stw	r4,-32(fp)
    68b0:	200b883a 	mov	r5,r4
    68b4:	29400044 	addi	r5,r5,1
    68b8:	2819883a 	mov	r12,r5
    68bc:	001b883a 	mov	r13,zero
    68c0:	600ad77a 	srli	r5,r12,29
    68c4:	681290fa 	slli	r9,r13,3
    68c8:	2a52b03a 	or	r9,r5,r9
    68cc:	601090fa 	slli	r8,r12,3
    68d0:	200b883a 	mov	r5,r4
    68d4:	29400044 	addi	r5,r5,1
    68d8:	2815883a 	mov	r10,r5
    68dc:	0017883a 	mov	r11,zero
    68e0:	500ad77a 	srli	r5,r10,29
    68e4:	580690fa 	slli	r3,r11,3
    68e8:	28c6b03a 	or	r3,r5,r3
    68ec:	500490fa 	slli	r2,r10,3
    68f0:	2005883a 	mov	r2,r4
    68f4:	10800044 	addi	r2,r2,1
    68f8:	108000c4 	addi	r2,r2,3
    68fc:	1004d0ba 	srli	r2,r2,2
    6900:	1085883a 	add	r2,r2,r2
    6904:	1085883a 	add	r2,r2,r2
    6908:	d8b7c83a 	sub	sp,sp,r2
    690c:	d8800204 	addi	r2,sp,8
    6910:	1005883a 	mov	r2,r2
    6914:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    6918:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    691c:	e0fff917 	ldw	r3,-28(fp)
    6920:	e0bffd03 	ldbu	r2,-12(fp)
    6924:	1085883a 	add	r2,r2,r2
    6928:	1009883a 	mov	r4,r2
    692c:	e0bffa04 	addi	r2,fp,-24
    6930:	d8000115 	stw	zero,4(sp)
    6934:	d9000015 	stw	r4,0(sp)
    6938:	180f883a 	mov	r7,r3
    693c:	01800084 	movi	r6,2
    6940:	100b883a 	mov	r5,r2
    6944:	e13ffb17 	ldw	r4,-20(fp)
    6948:	00209280 	call	20928 <alt_avalon_i2c_master_tx_rx>
    694c:	1004c03a 	cmpne	r2,r2,zero
    6950:	10803fcc 	andi	r2,r2,255
    6954:	10000326 	beq	r2,zero,6964 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    6958:	010000b4 	movhi	r4,2
    695c:	2117cb04 	addi	r4,r4,24364
    6960:	000ed000 	call	ed00 <printf>
	}
	for(i = 0; i < nwords; i++) {
    6964:	e03ff715 	stw	zero,-36(fp)
    6968:	e0bffd03 	ldbu	r2,-12(fp)
    696c:	e0fff717 	ldw	r3,-36(fp)
    6970:	18801b0e 	bge	r3,r2,69e0 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    6974:	e0bff717 	ldw	r2,-36(fp)
    6978:	1085883a 	add	r2,r2,r2
    697c:	1007883a 	mov	r3,r2
    6980:	e0bffe17 	ldw	r2,-8(fp)
    6984:	10c7883a 	add	r3,r2,r3
    6988:	e0bff717 	ldw	r2,-36(fp)
    698c:	1085883a 	add	r2,r2,r2
    6990:	1009883a 	mov	r4,r2
    6994:	e0bff917 	ldw	r2,-28(fp)
    6998:	1105883a 	add	r2,r2,r4
    699c:	10800003 	ldbu	r2,0(r2)
    69a0:	10803fcc 	andi	r2,r2,255
    69a4:	1004923a 	slli	r2,r2,8
    69a8:	100b883a 	mov	r5,r2
    69ac:	e0bff717 	ldw	r2,-36(fp)
    69b0:	1085883a 	add	r2,r2,r2
    69b4:	10800044 	addi	r2,r2,1
    69b8:	e13ff917 	ldw	r4,-28(fp)
    69bc:	2085883a 	add	r2,r4,r2
    69c0:	10800003 	ldbu	r2,0(r2)
    69c4:	10803fcc 	andi	r2,r2,255
    69c8:	2884b03a 	or	r2,r5,r2
    69cc:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    69d0:	e0bff717 	ldw	r2,-36(fp)
    69d4:	10800044 	addi	r2,r2,1
    69d8:	e0bff715 	stw	r2,-36(fp)
    69dc:	003fe206 	br	6968 <__alt_data_end+0xfc006968>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    69e0:	e0bffd03 	ldbu	r2,-12(fp)
    69e4:	1085883a 	add	r2,r2,r2
    69e8:	1007883a 	mov	r3,r2
    69ec:	e0bffe17 	ldw	r2,-8(fp)
    69f0:	10c5883a 	add	r2,r2,r3
    69f4:	8037883a 	mov	sp,r16
}
    69f8:	e6ffff04 	addi	sp,fp,-4
    69fc:	dfc00217 	ldw	ra,8(sp)
    6a00:	df000117 	ldw	fp,4(sp)
    6a04:	dc000017 	ldw	r16,0(sp)
    6a08:	dec00304 	addi	sp,sp,12
    6a0c:	f800283a 	ret

00006a10 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6a10:	defffd04 	addi	sp,sp,-12
    6a14:	dfc00215 	stw	ra,8(sp)
    6a18:	df000115 	stw	fp,4(sp)
    6a1c:	df000104 	addi	fp,sp,4
    6a20:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6a24:	01400284 	movi	r5,10
    6a28:	e13fff17 	ldw	r4,-4(fp)
    6a2c:	00204fc0 	call	204fc <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6a30:	01902f04 	movi	r6,16572
    6a34:	01400c04 	movi	r5,48
    6a38:	e13fff17 	ldw	r4,-4(fp)
    6a3c:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6a40:	01801384 	movi	r6,78
    6a44:	01400a04 	movi	r5,40
    6a48:	e13fff17 	ldw	r4,-4(fp)
    6a4c:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6a50:	01800844 	movi	r6,33
    6a54:	01400084 	movi	r5,2
    6a58:	e13fff17 	ldw	r4,-4(fp)
    6a5c:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6a60:	01800104 	movi	r6,4
    6a64:	01400104 	movi	r5,4
    6a68:	e13fff17 	ldw	r4,-4(fp)
    6a6c:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_24);
    6a70:	01800404 	movi	r6,16
    6a74:	01400184 	movi	r5,6
    6a78:	e13fff17 	ldw	r4,-4(fp)
    6a7c:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6a80:	01800404 	movi	r6,16
    6a84:	01400284 	movi	r5,10
    6a88:	e13fff17 	ldw	r4,-4(fp)
    6a8c:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6a90:	0001883a 	nop
    6a94:	e037883a 	mov	sp,fp
    6a98:	dfc00117 	ldw	ra,4(sp)
    6a9c:	df000017 	ldw	fp,0(sp)
    6aa0:	dec00204 	addi	sp,sp,8
    6aa4:	f800283a 	ret

00006aa8 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6aa8:	defffd04 	addi	sp,sp,-12
    6aac:	dfc00215 	stw	ra,8(sp)
    6ab0:	df000115 	stw	fp,4(sp)
    6ab4:	df000104 	addi	fp,sp,4
    6ab8:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6abc:	01901004 	movi	r6,16448
    6ac0:	01400884 	movi	r5,34
    6ac4:	e13fff17 	ldw	r4,-4(fp)
    6ac8:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6acc:	019c1c04 	movi	r6,28784
    6ad0:	01400404 	movi	r5,16
    6ad4:	e13fff17 	ldw	r4,-4(fp)
    6ad8:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6adc:	01808004 	movi	r6,512
    6ae0:	01400384 	movi	r5,14
    6ae4:	e13fff17 	ldw	r4,-4(fp)
    6ae8:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    6aec:	01804044 	movi	r6,257
    6af0:	01400904 	movi	r5,36
    6af4:	e13fff17 	ldw	r4,-4(fp)
    6af8:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6afc:	0001883a 	nop
    6b00:	e037883a 	mov	sp,fp
    6b04:	dfc00117 	ldw	ra,4(sp)
    6b08:	df000017 	ldw	fp,0(sp)
    6b0c:	dec00204 	addi	sp,sp,8
    6b10:	f800283a 	ret

00006b14 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    6b14:	defffd04 	addi	sp,sp,-12
    6b18:	dfc00215 	stw	ra,8(sp)
    6b1c:	df000115 	stw	fp,4(sp)
    6b20:	df000104 	addi	fp,sp,4
    6b24:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    6b28:	000b883a 	mov	r5,zero
    6b2c:	e13fff17 	ldw	r4,-4(fp)
    6b30:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6b34:	10bfffcc 	andi	r2,r2,65535
    6b38:	100b883a 	mov	r5,r2
    6b3c:	010000b4 	movhi	r4,2
    6b40:	2117d104 	addi	r4,r4,24388
    6b44:	000ed000 	call	ed00 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    6b48:	01400084 	movi	r5,2
    6b4c:	e13fff17 	ldw	r4,-4(fp)
    6b50:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6b54:	10bfffcc 	andi	r2,r2,65535
    6b58:	100b883a 	mov	r5,r2
    6b5c:	010000b4 	movhi	r4,2
    6b60:	2117d404 	addi	r4,r4,24400
    6b64:	000ed000 	call	ed00 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    6b68:	01400104 	movi	r5,4
    6b6c:	e13fff17 	ldw	r4,-4(fp)
    6b70:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6b74:	10bfffcc 	andi	r2,r2,65535
    6b78:	100b883a 	mov	r5,r2
    6b7c:	010000b4 	movhi	r4,2
    6b80:	2117d904 	addi	r4,r4,24420
    6b84:	000ed000 	call	ed00 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    6b88:	01400184 	movi	r5,6
    6b8c:	e13fff17 	ldw	r4,-4(fp)
    6b90:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6b94:	10bfffcc 	andi	r2,r2,65535
    6b98:	100b883a 	mov	r5,r2
    6b9c:	010000b4 	movhi	r4,2
    6ba0:	2117de04 	addi	r4,r4,24440
    6ba4:	000ed000 	call	ed00 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    6ba8:	01400284 	movi	r5,10
    6bac:	e13fff17 	ldw	r4,-4(fp)
    6bb0:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bb4:	10bfffcc 	andi	r2,r2,65535
    6bb8:	100b883a 	mov	r5,r2
    6bbc:	010000b4 	movhi	r4,2
    6bc0:	2117e304 	addi	r4,r4,24460
    6bc4:	000ed000 	call	ed00 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    6bc8:	01400c04 	movi	r5,48
    6bcc:	e13fff17 	ldw	r4,-4(fp)
    6bd0:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bd4:	10bfffcc 	andi	r2,r2,65535
    6bd8:	100b883a 	mov	r5,r2
    6bdc:	010000b4 	movhi	r4,2
    6be0:	2117e804 	addi	r4,r4,24480
    6be4:	000ed000 	call	ed00 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    6be8:	01400384 	movi	r5,14
    6bec:	e13fff17 	ldw	r4,-4(fp)
    6bf0:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bf4:	10bfffcc 	andi	r2,r2,65535
    6bf8:	100b883a 	mov	r5,r2
    6bfc:	010000b4 	movhi	r4,2
    6c00:	2117ed04 	addi	r4,r4,24500
    6c04:	000ed000 	call	ed00 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    6c08:	01400904 	movi	r5,36
    6c0c:	e13fff17 	ldw	r4,-4(fp)
    6c10:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c14:	10bfffcc 	andi	r2,r2,65535
    6c18:	100b883a 	mov	r5,r2
    6c1c:	010000b4 	movhi	r4,2
    6c20:	2117f204 	addi	r4,r4,24520
    6c24:	000ed000 	call	ed00 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    6c28:	01400e04 	movi	r5,56
    6c2c:	e13fff17 	ldw	r4,-4(fp)
    6c30:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c34:	10bfffcc 	andi	r2,r2,65535
    6c38:	100b883a 	mov	r5,r2
    6c3c:	010000b4 	movhi	r4,2
    6c40:	2117f704 	addi	r4,r4,24540
    6c44:	000ed000 	call	ed00 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    6c48:	01400804 	movi	r5,32
    6c4c:	e13fff17 	ldw	r4,-4(fp)
    6c50:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c54:	10bfffcc 	andi	r2,r2,65535
    6c58:	100b883a 	mov	r5,r2
    6c5c:	010000b4 	movhi	r4,2
    6c60:	2117fc04 	addi	r4,r4,24560
    6c64:	000ed000 	call	ed00 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    6c68:	01400404 	movi	r5,16
    6c6c:	e13fff17 	ldw	r4,-4(fp)
    6c70:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c74:	10bfffcc 	andi	r2,r2,65535
    6c78:	100b883a 	mov	r5,r2
    6c7c:	010000b4 	movhi	r4,2
    6c80:	21180104 	addi	r4,r4,24580
    6c84:	000ed000 	call	ed00 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    6c88:	01400884 	movi	r5,34
    6c8c:	e13fff17 	ldw	r4,-4(fp)
    6c90:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c94:	10bfffcc 	andi	r2,r2,65535
    6c98:	100b883a 	mov	r5,r2
    6c9c:	010000b4 	movhi	r4,2
    6ca0:	21180604 	addi	r4,r4,24600
    6ca4:	000ed000 	call	ed00 <printf>
}
    6ca8:	0001883a 	nop
    6cac:	e037883a 	mov	sp,fp
    6cb0:	dfc00117 	ldw	ra,4(sp)
    6cb4:	df000017 	ldw	fp,0(sp)
    6cb8:	dec00204 	addi	sp,sp,8
    6cbc:	f800283a 	ret

00006cc0 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000vol_up(ALT_AVALON_I2C_DEV_t* dev) {
    6cc0:	defffc04 	addi	sp,sp,-16
    6cc4:	dfc00315 	stw	ra,12(sp)
    6cc8:	df000215 	stw	fp,8(sp)
    6ccc:	df000204 	addi	fp,sp,8
    6cd0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6cd4:	01400404 	movi	r5,16
    6cd8:	e13fff17 	ldw	r4,-4(fp)
    6cdc:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6ce0:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6ce4:	e03ffe0d 	sth	zero,-8(fp)
	printf("Current:	%X\n", current_vol);
    6ce8:	e0bffe8b 	ldhu	r2,-6(fp)
    6cec:	100b883a 	mov	r5,r2
    6cf0:	010000b4 	movhi	r4,2
    6cf4:	21180b04 	addi	r4,r4,24620
    6cf8:	000ed000 	call	ed00 <printf>
	printf("Sum:		%X\n", (current_vol >> 8) + DAC_VOL_STEP);
    6cfc:	e0bffe8b 	ldhu	r2,-6(fp)
    6d00:	1005d23a 	srai	r2,r2,8
    6d04:	10800084 	addi	r2,r2,2
    6d08:	100b883a 	mov	r5,r2
    6d0c:	010000b4 	movhi	r4,2
    6d10:	21180f04 	addi	r4,r4,24636
    6d14:	000ed000 	call	ed00 <printf>
	printf("Max:		%X\n", DAC_MAX_VOL);
    6d18:	01400f04 	movi	r5,60
    6d1c:	010000b4 	movhi	r4,2
    6d20:	21181204 	addi	r4,r4,24648
    6d24:	000ed000 	call	ed00 <printf>
	if (DAC_MAX_VOL >= ((current_vol >> 8) - DAC_VOL_STEP)) new_vol = (DAC_MAX_VOL << 8) | DAC_MAX_VOL;
    6d28:	e0bffe8b 	ldhu	r2,-6(fp)
    6d2c:	1005d23a 	srai	r2,r2,8
    6d30:	10bfff84 	addi	r2,r2,-2
    6d34:	10800f48 	cmpgei	r2,r2,61
    6d38:	1000031e 	bne	r2,zero,6d48 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x88>
    6d3c:	008f0f04 	movi	r2,15420
    6d40:	e0bffe0d 	sth	r2,-8(fp)
    6d44:	00000306 	br	6d54 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x94>
	else new_vol = current_vol - ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6d48:	e0bffe8b 	ldhu	r2,-6(fp)
    6d4c:	10bf7f84 	addi	r2,r2,-514
    6d50:	e0bffe0d 	sth	r2,-8(fp)
	printf("New:		%X\n", new_vol);
    6d54:	e0bffe0b 	ldhu	r2,-8(fp)
    6d58:	100b883a 	mov	r5,r2
    6d5c:	010000b4 	movhi	r4,2
    6d60:	21181504 	addi	r4,r4,24660
    6d64:	000ed000 	call	ed00 <printf>
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6d68:	e0bffe0b 	ldhu	r2,-8(fp)
    6d6c:	100d883a 	mov	r6,r2
    6d70:	01400404 	movi	r5,16
    6d74:	e13fff17 	ldw	r4,-4(fp)
    6d78:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6d7c:	0001883a 	nop
    6d80:	e037883a 	mov	sp,fp
    6d84:	dfc00117 	ldw	ra,4(sp)
    6d88:	df000017 	ldw	fp,0(sp)
    6d8c:	dec00204 	addi	sp,sp,8
    6d90:	f800283a 	ret

00006d94 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>:


void SGTL5000vol_down(ALT_AVALON_I2C_DEV_t* dev) {
    6d94:	defffc04 	addi	sp,sp,-16
    6d98:	dfc00315 	stw	ra,12(sp)
    6d9c:	df000215 	stw	fp,8(sp)
    6da0:	df000204 	addi	fp,sp,8
    6da4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6da8:	01400404 	movi	r5,16
    6dac:	e13fff17 	ldw	r4,-4(fp)
    6db0:	00067bc0 	call	67bc <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6db4:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6db8:	e03ffe0d 	sth	zero,-8(fp)
	if (DAC_MIN_VOL <= ((current_vol >> 8) + DAC_VOL_STEP)) new_vol = (DAC_MIN_VOL << 8) | DAC_MIN_VOL;
    6dbc:	e0bffe8b 	ldhu	r2,-6(fp)
    6dc0:	1005d23a 	srai	r2,r2,8
    6dc4:	10800084 	addi	r2,r2,2
    6dc8:	10803c10 	cmplti	r2,r2,240
    6dcc:	1000031e 	bne	r2,zero,6ddc <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x48>
    6dd0:	00bc3c04 	movi	r2,-3856
    6dd4:	e0bffe0d 	sth	r2,-8(fp)
    6dd8:	00000306 	br	6de8 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x54>
	else new_vol = current_vol + ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6ddc:	e0bffe8b 	ldhu	r2,-6(fp)
    6de0:	10808084 	addi	r2,r2,514
    6de4:	e0bffe0d 	sth	r2,-8(fp)
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6de8:	e0bffe0b 	ldhu	r2,-8(fp)
    6dec:	100d883a 	mov	r6,r2
    6df0:	01400404 	movi	r5,16
    6df4:	e13fff17 	ldw	r4,-4(fp)
    6df8:	00065600 	call	6560 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6dfc:	0001883a 	nop
    6e00:	e037883a 	mov	sp,fp
    6e04:	dfc00117 	ldw	ra,4(sp)
    6e08:	df000017 	ldw	fp,0(sp)
    6e0c:	dec00204 	addi	sp,sp,8
    6e10:	f800283a 	ret

00006e14 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    6e14:	defffb04 	addi	sp,sp,-20
    6e18:	dfc00415 	stw	ra,16(sp)
    6e1c:	df000315 	stw	fp,12(sp)
    6e20:	df000304 	addi	fp,sp,12
    6e24:	e13ffe15 	stw	r4,-8(fp)
    6e28:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    6e2c:	e0bffe17 	ldw	r2,-8(fp)
    6e30:	1009883a 	mov	r4,r2
    6e34:	0004a840 	call	4a84 <_ZN15USBDeviceConfigC1Ev>
    6e38:	e0bffe17 	ldw	r2,-8(fp)
    6e3c:	10800104 	addi	r2,r2,4
    6e40:	1009883a 	mov	r4,r2
    6e44:	0008d1c0 	call	8d1c <_ZN21UsbMidiConfigXtracterC1Ev>
    6e48:	008000b4 	movhi	r2,2
    6e4c:	10982204 	addi	r2,r2,24712
    6e50:	e0fffe17 	ldw	r3,-8(fp)
    6e54:	18800015 	stw	r2,0(r3)
    6e58:	008000b4 	movhi	r2,2
    6e5c:	10982e04 	addi	r2,r2,24760
    6e60:	e0fffe17 	ldw	r3,-8(fp)
    6e64:	18800115 	stw	r2,4(r3)
    6e68:	e0bffe17 	ldw	r2,-8(fp)
    6e6c:	e0ffff17 	ldw	r3,-4(fp)
    6e70:	10c00215 	stw	r3,8(r2)
    6e74:	e0bffe17 	ldw	r2,-8(fp)
    6e78:	10000305 	stb	zero,12(r2)
    6e7c:	e0bffe17 	ldw	r2,-8(fp)
    6e80:	10000345 	stb	zero,13(r2)
    6e84:	e0bffe17 	ldw	r2,-8(fp)
    6e88:	10001705 	stb	zero,92(r2)
    6e8c:	e0bffe17 	ldw	r2,-8(fp)
    6e90:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6e94:	e03ffd05 	stb	zero,-12(fp)
    6e98:	e0bffd03 	ldbu	r2,-12(fp)
    6e9c:	108000e8 	cmpgeui	r2,r2,3
    6ea0:	10002d1e 	bne	r2,zero,6f58 <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    6ea4:	e0fffd03 	ldbu	r3,-12(fp)
    6ea8:	e13ffe17 	ldw	r4,-8(fp)
    6eac:	1805883a 	mov	r2,r3
    6eb0:	1085883a 	add	r2,r2,r2
    6eb4:	10c5883a 	add	r2,r2,r3
    6eb8:	2085883a 	add	r2,r4,r2
    6ebc:	108004c4 	addi	r2,r2,19
    6ec0:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    6ec4:	e13ffd03 	ldbu	r4,-12(fp)
    6ec8:	e0bffd03 	ldbu	r2,-12(fp)
    6ecc:	10000226 	beq	r2,zero,6ed8 <_ZN9USBH_MIDIC1EP3USB+0xc4>
    6ed0:	0007883a 	mov	r3,zero
    6ed4:	00000106 	br	6edc <_ZN9USBH_MIDIC1EP3USB+0xc8>
    6ed8:	00c00204 	movi	r3,8
    6edc:	e17ffe17 	ldw	r5,-8(fp)
    6ee0:	2005883a 	mov	r2,r4
    6ee4:	1085883a 	add	r2,r2,r2
    6ee8:	1105883a 	add	r2,r2,r4
    6eec:	2885883a 	add	r2,r5,r2
    6ef0:	10800504 	addi	r2,r2,20
    6ef4:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    6ef8:	e13ffd03 	ldbu	r4,-12(fp)
    6efc:	e0bffd03 	ldbu	r2,-12(fp)
    6f00:	10000226 	beq	r2,zero,6f0c <_ZN9USBH_MIDIC1EP3USB+0xf8>
    6f04:	00c00044 	movi	r3,1
    6f08:	00000106 	br	6f10 <_ZN9USBH_MIDIC1EP3USB+0xfc>
    6f0c:	00c003c4 	movi	r3,15
    6f10:	e17ffe17 	ldw	r5,-8(fp)
    6f14:	2005883a 	mov	r2,r4
    6f18:	1085883a 	add	r2,r2,r2
    6f1c:	1105883a 	add	r2,r2,r4
    6f20:	2885883a 	add	r2,r5,r2
    6f24:	10800404 	addi	r2,r2,16
    6f28:	18c7883a 	add	r3,r3,r3
    6f2c:	18cb883a 	add	r5,r3,r3
    6f30:	10c00143 	ldbu	r3,5(r2)
    6f34:	18c000cc 	andi	r3,r3,3
    6f38:	1809883a 	mov	r4,r3
    6f3c:	2807883a 	mov	r3,r5
    6f40:	20c6b03a 	or	r3,r4,r3
    6f44:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6f48:	e0bffd03 	ldbu	r2,-12(fp)
    6f4c:	10800044 	addi	r2,r2,1
    6f50:	e0bffd05 	stb	r2,-12(fp)
    6f54:	003fd006 	br	6e98 <__alt_data_end+0xfc006e98>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    6f58:	e0bffe17 	ldw	r2,-8(fp)
    6f5c:	10800217 	ldw	r2,8(r2)
    6f60:	10000626 	beq	r2,zero,6f7c <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    6f64:	e0bffe17 	ldw	r2,-8(fp)
    6f68:	10800217 	ldw	r2,8(r2)
    6f6c:	e0fffe17 	ldw	r3,-8(fp)
    6f70:	180b883a 	mov	r5,r3
    6f74:	1009883a 	mov	r4,r2
    6f78:	00048380 	call	4838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    6f7c:	0001883a 	nop
    6f80:	e037883a 	mov	sp,fp
    6f84:	dfc00117 	ldw	ra,4(sp)
    6f88:	df000017 	ldw	fp,0(sp)
    6f8c:	dec00204 	addi	sp,sp,8
    6f90:	f800283a 	ret

00006f94 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    6f94:	deffe004 	addi	sp,sp,-128
    6f98:	dfc01f15 	stw	ra,124(sp)
    6f9c:	df001e15 	stw	fp,120(sp)
    6fa0:	df001e04 	addi	fp,sp,120
    6fa4:	e13ffc15 	stw	r4,-16(fp)
    6fa8:	2809883a 	mov	r4,r5
    6fac:	3007883a 	mov	r3,r6
    6fb0:	3805883a 	mov	r2,r7
    6fb4:	e13ffd05 	stb	r4,-12(fp)
    6fb8:	e0fffe05 	stb	r3,-8(fp)
    6fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    6fc0:	e0bfe944 	addi	r2,fp,-91
    6fc4:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    6fc8:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    6fcc:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    6fd0:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    6fd4:	00800044 	movi	r2,1
    6fd8:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    6fdc:	00800044 	movi	r2,1
    6fe0:	e0bfe3c5 	stb	r2,-113(fp)
    6fe4:	e0bfe3c3 	ldbu	r2,-113(fp)
    6fe8:	108000e8 	cmpgeui	r2,r2,3
    6fec:	10001a1e 	bne	r2,zero,7058 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    6ff0:	e0ffe3c3 	ldbu	r3,-113(fp)
    6ff4:	e13ffc17 	ldw	r4,-16(fp)
    6ff8:	1805883a 	mov	r2,r3
    6ffc:	1085883a 	add	r2,r2,r2
    7000:	10c5883a 	add	r2,r2,r3
    7004:	2085883a 	add	r2,r4,r2
    7008:	10800404 	addi	r2,r2,16
    700c:	11000143 	ldbu	r4,5(r2)
    7010:	00ffff84 	movi	r3,-2
    7014:	20c6703a 	and	r3,r4,r3
    7018:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    701c:	e0ffe3c3 	ldbu	r3,-113(fp)
    7020:	e13ffc17 	ldw	r4,-16(fp)
    7024:	1805883a 	mov	r2,r3
    7028:	1085883a 	add	r2,r2,r2
    702c:	10c5883a 	add	r2,r2,r3
    7030:	2085883a 	add	r2,r4,r2
    7034:	10800404 	addi	r2,r2,16
    7038:	11000143 	ldbu	r4,5(r2)
    703c:	00ffff44 	movi	r3,-3
    7040:	20c6703a 	and	r3,r4,r3
    7044:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7048:	e0bfe3c3 	ldbu	r2,-113(fp)
    704c:	10800044 	addi	r2,r2,1
    7050:	e0bfe3c5 	stb	r2,-113(fp)
    7054:	003fe306 	br	6fe4 <__alt_data_end+0xfc006fe4>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    7058:	e0bffc17 	ldw	r2,-16(fp)
    705c:	10800217 	ldw	r2,8(r2)
    7060:	1009883a 	mov	r4,r2
    7064:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    7068:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    706c:	e0bffc17 	ldw	r2,-16(fp)
    7070:	10800303 	ldbu	r2,12(r2)
    7074:	10803fcc 	andi	r2,r2,255
    7078:	10000226 	beq	r2,zero,7084 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    707c:	00bff644 	movi	r2,-39
    7080:	0001c706 	br	77a0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    7084:	e0bfe817 	ldw	r2,-96(fp)
    7088:	10800017 	ldw	r2,0(r2)
    708c:	10800017 	ldw	r2,0(r2)
    7090:	e0fffc17 	ldw	r3,-16(fp)
    7094:	18c00303 	ldbu	r3,12(r3)
    7098:	18c03fcc 	andi	r3,r3,255
    709c:	180b883a 	mov	r5,r3
    70a0:	e13fe817 	ldw	r4,-96(fp)
    70a4:	103ee83a 	callr	r2
    70a8:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    70ac:	e0bfe617 	ldw	r2,-104(fp)
    70b0:	1000021e 	bne	r2,zero,70bc <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    70b4:	00bff584 	movi	r2,-42
    70b8:	0001b906 	br	77a0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    70bc:	e0bfe617 	ldw	r2,-104(fp)
    70c0:	10c00003 	ldbu	r3,0(r2)
    70c4:	11000043 	ldbu	r4,1(r2)
    70c8:	2008923a 	slli	r4,r4,8
    70cc:	20c6b03a 	or	r3,r4,r3
    70d0:	11000083 	ldbu	r4,2(r2)
    70d4:	2008943a 	slli	r4,r4,16
    70d8:	20c6b03a 	or	r3,r4,r3
    70dc:	108000c3 	ldbu	r2,3(r2)
    70e0:	1004963a 	slli	r2,r2,24
    70e4:	10c4b03a 	or	r2,r2,r3
    70e8:	1000021e 	bne	r2,zero,70f4 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    70ec:	00bff5c4 	movi	r2,-41
    70f0:	0001ab06 	br	77a0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    70f4:	e0bfe617 	ldw	r2,-104(fp)
    70f8:	10c00003 	ldbu	r3,0(r2)
    70fc:	11000043 	ldbu	r4,1(r2)
    7100:	2008923a 	slli	r4,r4,8
    7104:	20c6b03a 	or	r3,r4,r3
    7108:	11000083 	ldbu	r4,2(r2)
    710c:	2008943a 	slli	r4,r4,16
    7110:	20c6b03a 	or	r3,r4,r3
    7114:	108000c3 	ldbu	r2,3(r2)
    7118:	1004963a 	slli	r2,r2,24
    711c:	10c4b03a 	or	r2,r2,r3
    7120:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    7124:	e0bffc17 	ldw	r2,-16(fp)
    7128:	10c004c4 	addi	r3,r2,19
    712c:	e0bfe617 	ldw	r2,-104(fp)
    7130:	19803fcc 	andi	r6,r3,255
    7134:	11000003 	ldbu	r4,0(r2)
    7138:	2008703a 	and	r4,r4,zero
    713c:	200b883a 	mov	r5,r4
    7140:	3009883a 	mov	r4,r6
    7144:	2908b03a 	or	r4,r5,r4
    7148:	11000005 	stb	r4,0(r2)
    714c:	1808d23a 	srli	r4,r3,8
    7150:	21803fcc 	andi	r6,r4,255
    7154:	11000043 	ldbu	r4,1(r2)
    7158:	2008703a 	and	r4,r4,zero
    715c:	200b883a 	mov	r5,r4
    7160:	3009883a 	mov	r4,r6
    7164:	2908b03a 	or	r4,r5,r4
    7168:	11000045 	stb	r4,1(r2)
    716c:	1808d43a 	srli	r4,r3,16
    7170:	21803fcc 	andi	r6,r4,255
    7174:	11000083 	ldbu	r4,2(r2)
    7178:	2008703a 	and	r4,r4,zero
    717c:	200b883a 	mov	r5,r4
    7180:	3009883a 	mov	r4,r6
    7184:	2908b03a 	or	r4,r5,r4
    7188:	11000085 	stb	r4,2(r2)
    718c:	180ad63a 	srli	r5,r3,24
    7190:	10c000c3 	ldbu	r3,3(r2)
    7194:	1806703a 	and	r3,r3,zero
    7198:	1809883a 	mov	r4,r3
    719c:	2807883a 	mov	r3,r5
    71a0:	20c6b03a 	or	r3,r4,r3
    71a4:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    71a8:	e0bfe617 	ldw	r2,-104(fp)
    71ac:	e0ffff03 	ldbu	r3,-4(fp)
    71b0:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    71b4:	e0bffc17 	ldw	r2,-16(fp)
    71b8:	10c00217 	ldw	r3,8(r2)
    71bc:	e0bfe944 	addi	r2,fp,-91
    71c0:	d8800015 	stw	r2,0(sp)
    71c4:	01c00204 	movi	r7,8
    71c8:	000d883a 	mov	r6,zero
    71cc:	000b883a 	mov	r5,zero
    71d0:	1809883a 	mov	r4,r3
    71d4:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    71d8:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    71dc:	e0bfe617 	ldw	r2,-104(fp)
    71e0:	e0ffe717 	ldw	r3,-100(fp)
    71e4:	19403fcc 	andi	r5,r3,255
    71e8:	10c00003 	ldbu	r3,0(r2)
    71ec:	1806703a 	and	r3,r3,zero
    71f0:	1809883a 	mov	r4,r3
    71f4:	2807883a 	mov	r3,r5
    71f8:	20c6b03a 	or	r3,r4,r3
    71fc:	10c00005 	stb	r3,0(r2)
    7200:	e0ffe717 	ldw	r3,-100(fp)
    7204:	1806d23a 	srli	r3,r3,8
    7208:	19403fcc 	andi	r5,r3,255
    720c:	10c00043 	ldbu	r3,1(r2)
    7210:	1806703a 	and	r3,r3,zero
    7214:	1809883a 	mov	r4,r3
    7218:	2807883a 	mov	r3,r5
    721c:	20c6b03a 	or	r3,r4,r3
    7220:	10c00045 	stb	r3,1(r2)
    7224:	e0ffe717 	ldw	r3,-100(fp)
    7228:	1806d43a 	srli	r3,r3,16
    722c:	19403fcc 	andi	r5,r3,255
    7230:	10c00083 	ldbu	r3,2(r2)
    7234:	1806703a 	and	r3,r3,zero
    7238:	1809883a 	mov	r4,r3
    723c:	2807883a 	mov	r3,r5
    7240:	20c6b03a 	or	r3,r4,r3
    7244:	10c00085 	stb	r3,2(r2)
    7248:	e0ffe717 	ldw	r3,-100(fp)
    724c:	180ad63a 	srli	r5,r3,24
    7250:	10c000c3 	ldbu	r3,3(r2)
    7254:	1806703a 	and	r3,r3,zero
    7258:	1809883a 	mov	r4,r3
    725c:	2807883a 	mov	r3,r5
    7260:	20c6b03a 	or	r3,r4,r3
    7264:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    7268:	e0bfe303 	ldbu	r2,-116(fp)
    726c:	10013a1e 	bne	r2,zero,7758 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    7270:	e0bfe817 	ldw	r2,-96(fp)
    7274:	10800017 	ldw	r2,0(r2)
    7278:	10800104 	addi	r2,r2,4
    727c:	10800017 	ldw	r2,0(r2)
    7280:	e0fffd03 	ldbu	r3,-12(fp)
    7284:	e13ffe03 	ldbu	r4,-8(fp)
    7288:	200f883a 	mov	r7,r4
    728c:	000d883a 	mov	r6,zero
    7290:	180b883a 	mov	r5,r3
    7294:	e13fe817 	ldw	r4,-96(fp)
    7298:	103ee83a 	callr	r2
    729c:	1007883a 	mov	r3,r2
    72a0:	e0bffc17 	ldw	r2,-16(fp)
    72a4:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    72a8:	e0bffc17 	ldw	r2,-16(fp)
    72ac:	10800303 	ldbu	r2,12(r2)
    72b0:	10803fcc 	andi	r2,r2,255
    72b4:	1000021e 	bne	r2,zero,72c0 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    72b8:	00bff504 	movi	r2,-44
    72bc:	00013806 	br	77a0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    72c0:	e0bfe517 	ldw	r2,-108(fp)
    72c4:	10c001c3 	ldbu	r3,7(r2)
    72c8:	e0bffc17 	ldw	r2,-16(fp)
    72cc:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    72d0:	e0bffc17 	ldw	r2,-16(fp)
    72d4:	10c00217 	ldw	r3,8(r2)
    72d8:	e0bffc17 	ldw	r2,-16(fp)
    72dc:	10800303 	ldbu	r2,12(r2)
    72e0:	10803fcc 	andi	r2,r2,255
    72e4:	100f883a 	mov	r7,r2
    72e8:	000d883a 	mov	r6,zero
    72ec:	000b883a 	mov	r5,zero
    72f0:	1809883a 	mov	r4,r3
    72f4:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    72f8:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    72fc:	e0bfe303 	ldbu	r2,-116(fp)
    7300:	10001026 	beq	r2,zero,7344 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    7304:	e0bfe617 	ldw	r2,-104(fp)
    7308:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    730c:	e0bfe817 	ldw	r2,-96(fp)
    7310:	10800017 	ldw	r2,0(r2)
    7314:	10800204 	addi	r2,r2,8
    7318:	10800017 	ldw	r2,0(r2)
    731c:	e0fffc17 	ldw	r3,-16(fp)
    7320:	18c00303 	ldbu	r3,12(r3)
    7324:	18c03fcc 	andi	r3,r3,255
    7328:	180b883a 	mov	r5,r3
    732c:	e13fe817 	ldw	r4,-96(fp)
    7330:	103ee83a 	callr	r2
                bAddress = 0;
    7334:	e0bffc17 	ldw	r2,-16(fp)
    7338:	10000305 	stb	zero,12(r2)
                return rcode;
    733c:	e0bfe303 	ldbu	r2,-116(fp)
    7340:	00011706 	br	77a0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    7344:	e0bffc17 	ldw	r2,-16(fp)
    7348:	10800303 	ldbu	r2,12(r2)
    734c:	10803fcc 	andi	r2,r2,255
    7350:	01402004 	movi	r5,128
    7354:	1009883a 	mov	r4,r2
    7358:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    735c:	e0bfe617 	ldw	r2,-104(fp)
    7360:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    7364:	e0bfe817 	ldw	r2,-96(fp)
    7368:	10800017 	ldw	r2,0(r2)
    736c:	10800017 	ldw	r2,0(r2)
    7370:	e0fffc17 	ldw	r3,-16(fp)
    7374:	18c00303 	ldbu	r3,12(r3)
    7378:	18c03fcc 	andi	r3,r3,255
    737c:	180b883a 	mov	r5,r3
    7380:	e13fe817 	ldw	r4,-96(fp)
    7384:	103ee83a 	callr	r2
    7388:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    738c:	e0bfe617 	ldw	r2,-104(fp)
    7390:	1000021e 	bne	r2,zero,739c <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7394:	00bff584 	movi	r2,-42
    7398:	00010106 	br	77a0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    739c:	e0bfe617 	ldw	r2,-104(fp)
    73a0:	e0ffff03 	ldbu	r3,-4(fp)
    73a4:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    73a8:	e0bffc17 	ldw	r2,-16(fp)
    73ac:	10c00217 	ldw	r3,8(r2)
    73b0:	e0bffc17 	ldw	r2,-16(fp)
    73b4:	10800303 	ldbu	r2,12(r2)
    73b8:	11003fcc 	andi	r4,r2,255
    73bc:	00800484 	movi	r2,18
    73c0:	117fffcc 	andi	r5,r2,65535
    73c4:	e0bfe944 	addi	r2,fp,-91
    73c8:	d8800015 	stw	r2,0(sp)
    73cc:	280f883a 	mov	r7,r5
    73d0:	000d883a 	mov	r6,zero
    73d4:	200b883a 	mov	r5,r4
    73d8:	1809883a 	mov	r4,r3
    73dc:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    73e0:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    73e4:	e0bfe303 	ldbu	r2,-116(fp)
    73e8:	1000dd1e 	bne	r2,zero,7760 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    73ec:	e0bfe517 	ldw	r2,-108(fp)
    73f0:	10c00203 	ldbu	r3,8(r2)
    73f4:	10800243 	ldbu	r2,9(r2)
    73f8:	1004923a 	slli	r2,r2,8
    73fc:	10c4b03a 	or	r2,r2,r3
    7400:	1007883a 	mov	r3,r2
    7404:	e0bffc17 	ldw	r2,-16(fp)
    7408:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    740c:	e0bfe517 	ldw	r2,-108(fp)
    7410:	10c00283 	ldbu	r3,10(r2)
    7414:	108002c3 	ldbu	r2,11(r2)
    7418:	1004923a 	slli	r2,r2,8
    741c:	10c4b03a 	or	r2,r2,r3
    7420:	1007883a 	mov	r3,r2
    7424:	e0bffc17 	ldw	r2,-16(fp)
    7428:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    742c:	e0bfe517 	ldw	r2,-108(fp)
    7430:	10800443 	ldbu	r2,17(r2)
    7434:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    7438:	e0bffc17 	ldw	r2,-16(fp)
    743c:	10c00217 	ldw	r3,8(r2)
    7440:	e0bffc17 	ldw	r2,-16(fp)
    7444:	10800303 	ldbu	r2,12(r2)
    7448:	11003fcc 	andi	r4,r2,255
    744c:	e0bffc17 	ldw	r2,-16(fp)
    7450:	108004c4 	addi	r2,r2,19
    7454:	100f883a 	mov	r7,r2
    7458:	01800044 	movi	r6,1
    745c:	200b883a 	mov	r5,r4
    7460:	1809883a 	mov	r4,r3
    7464:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7468:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    746c:	e0bfe303 	ldbu	r2,-116(fp)
    7470:	1000bd1e 	bne	r2,zero,7768 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    7474:	e0bffc17 	ldw	r2,-16(fp)
    7478:	1080040b 	ldhu	r2,16(r2)
    747c:	10bfffcc 	andi	r2,r2,65535
    7480:	01402004 	movi	r5,128
    7484:	1009883a 	mov	r4,r2
    7488:	0008d500 	call	8d50 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    748c:	e0bffc17 	ldw	r2,-16(fp)
    7490:	1080038b 	ldhu	r2,14(r2)
    7494:	10bfffcc 	andi	r2,r2,65535
    7498:	01402004 	movi	r5,128
    749c:	1009883a 	mov	r4,r2
    74a0:	0008d500 	call	8d50 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    74a4:	e0bfe903 	ldbu	r2,-92(fp)
    74a8:	01402004 	movi	r5,128
    74ac:	1009883a 	mov	r4,r2
    74b0:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    74b4:	e0bffc17 	ldw	r2,-16(fp)
    74b8:	00c000c4 	movi	r3,3
    74bc:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    74c0:	e13ffc17 	ldw	r4,-16(fp)
    74c4:	000782c0 	call	782c <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    74c8:	e03fe405 	stb	zero,-112(fp)
    74cc:	e0ffe403 	ldbu	r3,-112(fp)
    74d0:	e0bfe903 	ldbu	r2,-92(fp)
    74d4:	18802a2e 	bgeu	r3,r2,7580 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    74d8:	e0bffc17 	ldw	r2,-16(fp)
    74dc:	10c00104 	addi	r3,r2,4
    74e0:	e0bfee04 	addi	r2,fp,-72
    74e4:	01800044 	movi	r6,1
    74e8:	180b883a 	mov	r5,r3
    74ec:	1009883a 	mov	r4,r2
    74f0:	000832c0 	call	832c <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    74f4:	e0bffc17 	ldw	r2,-16(fp)
    74f8:	10c00217 	ldw	r3,8(r2)
    74fc:	e0bffc17 	ldw	r2,-16(fp)
    7500:	10800303 	ldbu	r2,12(r2)
    7504:	11003fcc 	andi	r4,r2,255
    7508:	e17fe403 	ldbu	r5,-112(fp)
    750c:	e0bfee04 	addi	r2,fp,-72
    7510:	d8800015 	stw	r2,0(sp)
    7514:	280f883a 	mov	r7,r5
    7518:	000d883a 	mov	r6,zero
    751c:	200b883a 	mov	r5,r4
    7520:	1809883a 	mov	r4,r3
    7524:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7528:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    752c:	e0bfe303 	ldbu	r2,-116(fp)
    7530:	10008f1e 	bne	r2,zero,7770 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    7534:	e0bfee04 	addi	r2,fp,-72
    7538:	1009883a 	mov	r4,r2
    753c:	0008c380 	call	8c38 <_ZN14MidiDescParser9getNumEPsEv>
    7540:	1007883a 	mov	r3,r2
    7544:	e0bfe383 	ldbu	r2,-114(fp)
    7548:	10c5883a 	add	r2,r2,r3
    754c:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    7550:	e0bfe383 	ldbu	r2,-114(fp)
    7554:	108000b0 	cmpltui	r2,r2,2
    7558:	1000051e 	bne	r2,zero,7570 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    755c:	e0bfee04 	addi	r2,fp,-72
    7560:	1009883a 	mov	r4,r2
    7564:	0008c100 	call	8c10 <_ZN14MidiDescParser12getConfValueEv>
    7568:	e0bfe345 	stb	r2,-115(fp)
    756c:	00000406 	br	7580 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    7570:	e0bfe403 	ldbu	r2,-112(fp)
    7574:	10800044 	addi	r2,r2,1
    7578:	e0bfe405 	stb	r2,-112(fp)
    757c:	003fd306 	br	74cc <__alt_data_end+0xfc0074cc>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    7580:	e0bfe383 	ldbu	r2,-114(fp)
    7584:	01402004 	movi	r5,128
    7588:	1009883a 	mov	r4,r2
    758c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    7590:	e0bfe383 	ldbu	r2,-114(fp)
    7594:	10800058 	cmpnei	r2,r2,1
    7598:	1000321e 	bne	r2,zero,7664 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    759c:	e03fe445 	stb	zero,-111(fp)
    75a0:	e0ffe443 	ldbu	r3,-111(fp)
    75a4:	e0bfe903 	ldbu	r2,-92(fp)
    75a8:	18802a2e 	bgeu	r3,r2,7654 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    75ac:	e0bffc17 	ldw	r2,-16(fp)
    75b0:	10c00104 	addi	r3,r2,4
    75b4:	e0bfee04 	addi	r2,fp,-72
    75b8:	000d883a 	mov	r6,zero
    75bc:	180b883a 	mov	r5,r3
    75c0:	1009883a 	mov	r4,r2
    75c4:	000832c0 	call	832c <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    75c8:	e0bffc17 	ldw	r2,-16(fp)
    75cc:	10c00217 	ldw	r3,8(r2)
    75d0:	e0bffc17 	ldw	r2,-16(fp)
    75d4:	10800303 	ldbu	r2,12(r2)
    75d8:	11003fcc 	andi	r4,r2,255
    75dc:	e17fe443 	ldbu	r5,-111(fp)
    75e0:	e0bfee04 	addi	r2,fp,-72
    75e4:	d8800015 	stw	r2,0(sp)
    75e8:	280f883a 	mov	r7,r5
    75ec:	000d883a 	mov	r6,zero
    75f0:	200b883a 	mov	r5,r4
    75f4:	1809883a 	mov	r4,r3
    75f8:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    75fc:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    7600:	e0bfe303 	ldbu	r2,-116(fp)
    7604:	10005c1e 	bne	r2,zero,7778 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    7608:	e0bfee04 	addi	r2,fp,-72
    760c:	1009883a 	mov	r4,r2
    7610:	0008c380 	call	8c38 <_ZN14MidiDescParser9getNumEPsEv>
    7614:	1007883a 	mov	r3,r2
    7618:	e0bfe383 	ldbu	r2,-114(fp)
    761c:	10c5883a 	add	r2,r2,r3
    7620:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    7624:	e0bfe383 	ldbu	r2,-114(fp)
    7628:	108000b0 	cmpltui	r2,r2,2
    762c:	1000051e 	bne	r2,zero,7644 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    7630:	e0bfee04 	addi	r2,fp,-72
    7634:	1009883a 	mov	r4,r2
    7638:	0008c100 	call	8c10 <_ZN14MidiDescParser12getConfValueEv>
    763c:	e0bfe345 	stb	r2,-115(fp)
    7640:	00000406 	br	7654 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7644:	e0bfe443 	ldbu	r2,-111(fp)
    7648:	10800044 	addi	r2,r2,1
    764c:	e0bfe445 	stb	r2,-111(fp)
    7650:	003fd306 	br	75a0 <__alt_data_end+0xfc0075a0>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    7654:	e0bfe383 	ldbu	r2,-114(fp)
    7658:	01402004 	movi	r5,128
    765c:	1009883a 	mov	r4,r2
    7660:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    7664:	e0bfe383 	ldbu	r2,-114(fp)
    7668:	108000a8 	cmpgeui	r2,r2,2
    766c:	1000031e 	bne	r2,zero,767c <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    7670:	00bfffc4 	movi	r2,-1
    7674:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    7678:	00004206 	br	7784 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    767c:	e0bffc17 	ldw	r2,-16(fp)
    7680:	10c00217 	ldw	r3,8(r2)
    7684:	e0bffc17 	ldw	r2,-16(fp)
    7688:	10800303 	ldbu	r2,12(r2)
    768c:	11003fcc 	andi	r4,r2,255
    7690:	e0bffc17 	ldw	r2,-16(fp)
    7694:	108004c4 	addi	r2,r2,19
    7698:	100f883a 	mov	r7,r2
    769c:	018000c4 	movi	r6,3
    76a0:	200b883a 	mov	r5,r4
    76a4:	1809883a 	mov	r4,r3
    76a8:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    76ac:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    76b0:	e0bfe343 	ldbu	r2,-115(fp)
    76b4:	01402004 	movi	r5,128
    76b8:	1009883a 	mov	r4,r2
    76bc:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    76c0:	e0bffc17 	ldw	r2,-16(fp)
    76c4:	10800583 	ldbu	r2,22(r2)
    76c8:	10bfe004 	addi	r2,r2,-128
    76cc:	10803fcc 	andi	r2,r2,255
    76d0:	01402004 	movi	r5,128
    76d4:	1009883a 	mov	r4,r2
    76d8:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    76dc:	e0bffc17 	ldw	r2,-16(fp)
    76e0:	10800643 	ldbu	r2,25(r2)
    76e4:	10803fcc 	andi	r2,r2,255
    76e8:	01402004 	movi	r5,128
    76ec:	1009883a 	mov	r4,r2
    76f0:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    76f4:	e0bffc17 	ldw	r2,-16(fp)
    76f8:	10c00217 	ldw	r3,8(r2)
    76fc:	e0bffc17 	ldw	r2,-16(fp)
    7700:	10800303 	ldbu	r2,12(r2)
    7704:	10803fcc 	andi	r2,r2,255
    7708:	e13fe343 	ldbu	r4,-115(fp)
    770c:	200f883a 	mov	r7,r4
    7710:	000d883a 	mov	r6,zero
    7714:	100b883a 	mov	r5,r2
    7718:	1809883a 	mov	r4,r3
    771c:	00027900 	call	2790 <_ZN3USB7setConfEhhh>
    7720:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    7724:	e0bfe303 	ldbu	r2,-116(fp)
    7728:	1000151e 	bne	r2,zero,7780 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    772c:	e0bffc17 	ldw	r2,-16(fp)
    7730:	10801817 	ldw	r2,96(r2)
    7734:	10000326 	beq	r2,zero,7744 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    7738:	e0bffc17 	ldw	r2,-16(fp)
    773c:	10801817 	ldw	r2,96(r2)
    7740:	103ee83a 	callr	r2

        bPollEnable = true;
    7744:	e0bffc17 	ldw	r2,-16(fp)
    7748:	00c00044 	movi	r3,1
    774c:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    7750:	0005883a 	mov	r2,zero
    7754:	00001206 	br	77a0 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    7758:	0001883a 	nop
    775c:	00000906 	br	7784 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    7760:	0001883a 	nop
    7764:	00000706 	br	7784 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    7768:	0001883a 	nop
    776c:	00000506 	br	7784 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    7770:	0001883a 	nop
    7774:	00000306 	br	7784 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    7778:	0001883a 	nop
    777c:	00000106 	br	7784 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    7780:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    7784:	e0bffc17 	ldw	r2,-16(fp)
    7788:	10800017 	ldw	r2,0(r2)
    778c:	10800204 	addi	r2,r2,8
    7790:	10800017 	ldw	r2,0(r2)
    7794:	e13ffc17 	ldw	r4,-16(fp)
    7798:	103ee83a 	callr	r2
        return rcode;
    779c:	e0bfe303 	ldbu	r2,-116(fp)
}
    77a0:	e037883a 	mov	sp,fp
    77a4:	dfc00117 	ldw	ra,4(sp)
    77a8:	df000017 	ldw	fp,0(sp)
    77ac:	dec00204 	addi	sp,sp,8
    77b0:	f800283a 	ret

000077b4 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    77b4:	defffd04 	addi	sp,sp,-12
    77b8:	dfc00215 	stw	ra,8(sp)
    77bc:	df000115 	stw	fp,4(sp)
    77c0:	df000104 	addi	fp,sp,4
    77c4:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    77c8:	e0bfff17 	ldw	r2,-4(fp)
    77cc:	10800217 	ldw	r2,8(r2)
    77d0:	1009883a 	mov	r4,r2
    77d4:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    77d8:	1009883a 	mov	r4,r2
    77dc:	20800017 	ldw	r2,0(r4)
    77e0:	10800204 	addi	r2,r2,8
    77e4:	10800017 	ldw	r2,0(r2)
    77e8:	e0ffff17 	ldw	r3,-4(fp)
    77ec:	18c00303 	ldbu	r3,12(r3)
    77f0:	18c03fcc 	andi	r3,r3,255
    77f4:	180b883a 	mov	r5,r3
    77f8:	103ee83a 	callr	r2
        bAddress     = 0;
    77fc:	e0bfff17 	ldw	r2,-4(fp)
    7800:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    7804:	e0bfff17 	ldw	r2,-4(fp)
    7808:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    780c:	e0bfff17 	ldw	r2,-4(fp)
    7810:	10001705 	stb	zero,92(r2)
        return 0;
    7814:	0005883a 	mov	r2,zero
}
    7818:	e037883a 	mov	sp,fp
    781c:	dfc00117 	ldw	ra,4(sp)
    7820:	df000017 	ldw	fp,0(sp)
    7824:	dec00204 	addi	sp,sp,8
    7828:	f800283a 	ret

0000782c <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    782c:	defffe04 	addi	sp,sp,-8
    7830:	df000115 	stw	fp,4(sp)
    7834:	df000104 	addi	fp,sp,4
    7838:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    783c:	e0bfff17 	ldw	r2,-4(fp)
    7840:	1080040b 	ldhu	r2,16(r2)
    7844:	10bfffcc 	andi	r2,r2,65535
    7848:	10848d58 	cmpnei	r2,r2,4661
    784c:	1000351e 	bne	r2,zero,7924 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    7850:	e0bfff17 	ldw	r2,-4(fp)
    7854:	1080038b 	ldhu	r2,14(r2)
    7858:	10bfffcc 	andi	r2,r2,65535
    785c:	10800820 	cmpeqi	r2,r2,32
    7860:	10000f1e 	bne	r2,zero,78a0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7864:	e0bfff17 	ldw	r2,-4(fp)
    7868:	1080038b 	ldhu	r2,14(r2)
    786c:	10bfffcc 	andi	r2,r2,65535
    7870:	10800da0 	cmpeqi	r2,r2,54
    7874:	10000a1e 	bne	r2,zero,78a0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7878:	e0bfff17 	ldw	r2,-4(fp)
    787c:	1080038b 	ldhu	r2,14(r2)
    7880:	10bfffcc 	andi	r2,r2,65535
    7884:	10801460 	cmpeqi	r2,r2,81
    7888:	1000051e 	bne	r2,zero,78a0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    788c:	e0bfff17 	ldw	r2,-4(fp)
    7890:	1080038b 	ldhu	r2,14(r2)
    7894:	10bfffcc 	andi	r2,r2,65535
    7898:	10801a58 	cmpnei	r2,r2,105
    789c:	1000041e 	bne	r2,zero,78b0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    78a0:	e0bfff17 	ldw	r2,-4(fp)
    78a4:	00c00084 	movi	r3,2
    78a8:	10c00485 	stb	r3,18(r2)
                        return;
    78ac:	00001d06 	br	7924 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    78b0:	e0bfff17 	ldw	r2,-4(fp)
    78b4:	1080038b 	ldhu	r2,14(r2)
    78b8:	10bfffcc 	andi	r2,r2,65535
    78bc:	10800c30 	cmpltui	r2,r2,48
    78c0:	1000051e 	bne	r2,zero,78d8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    78c4:	e0bfff17 	ldw	r2,-4(fp)
    78c8:	1080038b 	ldhu	r2,14(r2)
    78cc:	10bfffcc 	andi	r2,r2,65535
    78d0:	10800cf0 	cmpltui	r2,r2,51
    78d4:	10000f1e 	bne	r2,zero,7914 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    78d8:	e0bfff17 	ldw	r2,-4(fp)
    78dc:	1080038b 	ldhu	r2,14(r2)
    78e0:	10bfffcc 	andi	r2,r2,65535
    78e4:	10800d60 	cmpeqi	r2,r2,53
    78e8:	10000a1e 	bne	r2,zero,7914 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    78ec:	e0bfff17 	ldw	r2,-4(fp)
    78f0:	1080038b 	ldhu	r2,14(r2)
    78f4:	10bfffcc 	andi	r2,r2,65535
    78f8:	10801ef0 	cmpltui	r2,r2,123
    78fc:	1000091e 	bne	r2,zero,7924 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    7900:	e0bfff17 	ldw	r2,-4(fp)
    7904:	1080038b 	ldhu	r2,14(r2)
    7908:	10bfffcc 	andi	r2,r2,65535
    790c:	10801fa8 	cmpgeui	r2,r2,126
    7910:	1000041e 	bne	r2,zero,7924 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    7914:	e0bfff17 	ldw	r2,-4(fp)
    7918:	00c00084 	movi	r3,2
    791c:	10c00485 	stb	r3,18(r2)
                        return;
    7920:	0001883a 	nop
                }
        }
}
    7924:	e037883a 	mov	sp,fp
    7928:	df000017 	ldw	fp,0(sp)
    792c:	dec00104 	addi	sp,sp,4
    7930:	f800283a 	ret

00007934 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    7934:	defff804 	addi	sp,sp,-32
    7938:	dfc00715 	stw	ra,28(sp)
    793c:	df000615 	stw	fp,24(sp)
    7940:	df000604 	addi	fp,sp,24
    7944:	e13ffd15 	stw	r4,-12(fp)
    7948:	e17ffe15 	stw	r5,-8(fp)
    794c:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    7950:	e0bffd17 	ldw	r2,-12(fp)
    7954:	108005c3 	ldbu	r2,23(r2)
    7958:	10c03fcc 	andi	r3,r2,255
    795c:	e0bffe17 	ldw	r2,-8(fp)
    7960:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7964:	e0bffd17 	ldw	r2,-12(fp)
    7968:	10c00217 	ldw	r3,8(r2)
    796c:	e0bffd17 	ldw	r2,-12(fp)
    7970:	10800303 	ldbu	r2,12(r2)
    7974:	11003fcc 	andi	r4,r2,255
    7978:	e0bffd17 	ldw	r2,-12(fp)
    797c:	10800583 	ldbu	r2,22(r2)
    7980:	11403fcc 	andi	r5,r2,255
    7984:	d8000115 	stw	zero,4(sp)
    7988:	e0bfff17 	ldw	r2,-4(fp)
    798c:	d8800015 	stw	r2,0(sp)
    7990:	e1fffe17 	ldw	r7,-8(fp)
    7994:	280d883a 	mov	r6,r5
    7998:	200b883a 	mov	r5,r4
    799c:	1809883a 	mov	r4,r3
    79a0:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    79a4:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    79a8:	e0bffe17 	ldw	r2,-8(fp)
    79ac:	1080000b 	ldhu	r2,0(r2)
    79b0:	10bfffcc 	andi	r2,r2,65535
    79b4:	10800f28 	cmpgeui	r2,r2,60
    79b8:	10000d1e 	bne	r2,zero,79f0 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    79bc:	e0bffe17 	ldw	r2,-8(fp)
    79c0:	1080000b 	ldhu	r2,0(r2)
    79c4:	10bfffcc 	andi	r2,r2,65535
    79c8:	e0ffff17 	ldw	r3,-4(fp)
    79cc:	1885883a 	add	r2,r3,r2
    79d0:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    79d4:	e0bffe17 	ldw	r2,-8(fp)
    79d8:	1080000b 	ldhu	r2,0(r2)
    79dc:	10bfffcc 	andi	r2,r2,65535
    79e0:	10800044 	addi	r2,r2,1
    79e4:	e0ffff17 	ldw	r3,-4(fp)
    79e8:	1885883a 	add	r2,r3,r2
    79ec:	10000005 	stb	zero,0(r2)
        }
        return r;
    79f0:	e0bffc03 	ldbu	r2,-16(fp)
}
    79f4:	e037883a 	mov	sp,fp
    79f8:	dfc00117 	ldw	ra,4(sp)
    79fc:	df000017 	ldw	fp,0(sp)
    7a00:	dec00204 	addi	sp,sp,8
    7a04:	f800283a 	ret

00007a08 <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7a08:	defff904 	addi	sp,sp,-28
    7a0c:	dfc00615 	stw	ra,24(sp)
    7a10:	df000515 	stw	fp,20(sp)
    7a14:	df000504 	addi	fp,sp,20
    7a18:	e13ffd15 	stw	r4,-12(fp)
    7a1c:	e17ffe15 	stw	r5,-8(fp)
    7a20:	3005883a 	mov	r2,r6
    7a24:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7a28:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7a2c:	e0bffd17 	ldw	r2,-12(fp)
    7a30:	10800343 	ldbu	r2,13(r2)
    7a34:	1080005c 	xori	r2,r2,1
    7a38:	10803fcc 	andi	r2,r2,255
    7a3c:	10000226 	beq	r2,zero,7a48 <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7a40:	0005883a 	mov	r2,zero
    7a44:	00008506 	br	7c5c <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7a48:	e0bffd17 	ldw	r2,-12(fp)
    7a4c:	10801703 	ldbu	r2,92(r2)
    7a50:	10803fcc 	andi	r2,r2,255
    7a54:	10001826 	beq	r2,zero,7ab8 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7a58:	e0bffd17 	ldw	r2,-12(fp)
    7a5c:	10801703 	ldbu	r2,92(r2)
    7a60:	10803fcc 	andi	r2,r2,255
    7a64:	10801028 	cmpgeui	r2,r2,64
    7a68:	1000131e 	bne	r2,zero,7ab8 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7a6c:	e0bffd17 	ldw	r2,-12(fp)
    7a70:	10801703 	ldbu	r2,92(r2)
    7a74:	10803fcc 	andi	r2,r2,255
    7a78:	e0fffd17 	ldw	r3,-12(fp)
    7a7c:	1885883a 	add	r2,r3,r2
    7a80:	10800704 	addi	r2,r2,28
    7a84:	10800003 	ldbu	r2,0(r2)
    7a88:	10803fcc 	andi	r2,r2,255
    7a8c:	10002a1e 	bne	r2,zero,7b38 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7a90:	e0bffd17 	ldw	r2,-12(fp)
    7a94:	10801703 	ldbu	r2,92(r2)
    7a98:	10803fcc 	andi	r2,r2,255
    7a9c:	10800044 	addi	r2,r2,1
    7aa0:	e0fffd17 	ldw	r3,-12(fp)
    7aa4:	1885883a 	add	r2,r3,r2
    7aa8:	10800704 	addi	r2,r2,28
    7aac:	10800003 	ldbu	r2,0(r2)
    7ab0:	10803fcc 	andi	r2,r2,255
    7ab4:	1000201e 	bne	r2,zero,7b38 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7ab8:	e0bffd17 	ldw	r2,-12(fp)
    7abc:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7ac0:	e0bffd17 	ldw	r2,-12(fp)
    7ac4:	10c00704 	addi	r3,r2,28
    7ac8:	e0bffc04 	addi	r2,fp,-16
    7acc:	180d883a 	mov	r6,r3
    7ad0:	100b883a 	mov	r5,r2
    7ad4:	e13ffd17 	ldw	r4,-12(fp)
    7ad8:	00079340 	call	7934 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7adc:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7ae0:	e0bffb03 	ldbu	r2,-20(fp)
    7ae4:	10000226 	beq	r2,zero,7af0 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7ae8:	0005883a 	mov	r2,zero
    7aec:	00005b06 	br	7c5c <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7af0:	e0bffd17 	ldw	r2,-12(fp)
    7af4:	10800703 	ldbu	r2,28(r2)
    7af8:	10803fcc 	andi	r2,r2,255
    7afc:	10000e1e 	bne	r2,zero,7b38 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7b00:	e0bffd17 	ldw	r2,-12(fp)
    7b04:	10800743 	ldbu	r2,29(r2)
    7b08:	10803fcc 	andi	r2,r2,255
    7b0c:	10000a1e 	bne	r2,zero,7b38 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7b10:	e0bffd17 	ldw	r2,-12(fp)
    7b14:	10800783 	ldbu	r2,30(r2)
    7b18:	10803fcc 	andi	r2,r2,255
    7b1c:	1000061e 	bne	r2,zero,7b38 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7b20:	e0bffd17 	ldw	r2,-12(fp)
    7b24:	108007c3 	ldbu	r2,31(r2)
    7b28:	10803fcc 	andi	r2,r2,255
    7b2c:	1000021e 	bne	r2,zero,7b38 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    7b30:	0005883a 	mov	r2,zero
    7b34:	00004906 	br	7c5c <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    7b38:	e0bffd17 	ldw	r2,-12(fp)
    7b3c:	10801703 	ldbu	r2,92(r2)
    7b40:	10803fcc 	andi	r2,r2,255
    7b44:	e0fffd17 	ldw	r3,-12(fp)
    7b48:	1885883a 	add	r2,r3,r2
    7b4c:	10800704 	addi	r2,r2,28
    7b50:	10800003 	ldbu	r2,0(r2)
    7b54:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    7b58:	e0bfff03 	ldbu	r2,-4(fp)
    7b5c:	10000526 	beq	r2,zero,7b74 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    7b60:	e0bffe17 	ldw	r2,-8(fp)
    7b64:	10c00044 	addi	r3,r2,1
    7b68:	e0fffe15 	stw	r3,-8(fp)
    7b6c:	e0fffb43 	ldbu	r3,-19(fp)
    7b70:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    7b74:	e0bffd17 	ldw	r2,-12(fp)
    7b78:	10801703 	ldbu	r2,92(r2)
    7b7c:	10800044 	addi	r2,r2,1
    7b80:	1007883a 	mov	r3,r2
    7b84:	e0bffd17 	ldw	r2,-12(fp)
    7b88:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    7b8c:	e0bffe17 	ldw	r2,-8(fp)
    7b90:	10c00044 	addi	r3,r2,1
    7b94:	e0fffe15 	stw	r3,-8(fp)
    7b98:	e0fffd17 	ldw	r3,-12(fp)
    7b9c:	18c01703 	ldbu	r3,92(r3)
    7ba0:	19000044 	addi	r4,r3,1
    7ba4:	200b883a 	mov	r5,r4
    7ba8:	e13ffd17 	ldw	r4,-12(fp)
    7bac:	21401705 	stb	r5,92(r4)
    7bb0:	18c03fcc 	andi	r3,r3,255
    7bb4:	e13ffd17 	ldw	r4,-12(fp)
    7bb8:	20c7883a 	add	r3,r4,r3
    7bbc:	18c00704 	addi	r3,r3,28
    7bc0:	18c00003 	ldbu	r3,0(r3)
    7bc4:	e0fffb85 	stb	r3,-18(fp)
    7bc8:	e0fffb83 	ldbu	r3,-18(fp)
    7bcc:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7bd0:	e0bffe17 	ldw	r2,-8(fp)
    7bd4:	10c00044 	addi	r3,r2,1
    7bd8:	e0fffe15 	stw	r3,-8(fp)
    7bdc:	e0fffd17 	ldw	r3,-12(fp)
    7be0:	18c01703 	ldbu	r3,92(r3)
    7be4:	19000044 	addi	r4,r3,1
    7be8:	200b883a 	mov	r5,r4
    7bec:	e13ffd17 	ldw	r4,-12(fp)
    7bf0:	21401705 	stb	r5,92(r4)
    7bf4:	18c03fcc 	andi	r3,r3,255
    7bf8:	e13ffd17 	ldw	r4,-12(fp)
    7bfc:	20c7883a 	add	r3,r4,r3
    7c00:	18c00704 	addi	r3,r3,28
    7c04:	18c00003 	ldbu	r3,0(r3)
    7c08:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7c0c:	e0bffe17 	ldw	r2,-8(fp)
    7c10:	10c00044 	addi	r3,r2,1
    7c14:	e0fffe15 	stw	r3,-8(fp)
    7c18:	e0fffd17 	ldw	r3,-12(fp)
    7c1c:	18c01703 	ldbu	r3,92(r3)
    7c20:	19000044 	addi	r4,r3,1
    7c24:	200b883a 	mov	r5,r4
    7c28:	e13ffd17 	ldw	r4,-12(fp)
    7c2c:	21401705 	stb	r5,92(r4)
    7c30:	18c03fcc 	andi	r3,r3,255
    7c34:	e13ffd17 	ldw	r4,-12(fp)
    7c38:	20c7883a 	add	r3,r4,r3
    7c3c:	18c00704 	addi	r3,r3,28
    7c40:	18c00003 	ldbu	r3,0(r3)
    7c44:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    7c48:	e0bffb43 	ldbu	r2,-19(fp)
    7c4c:	108003cc 	andi	r2,r2,15
    7c50:	100b883a 	mov	r5,r2
    7c54:	e13ffd17 	ldw	r4,-12(fp)
    7c58:	0008cb80 	call	8cb8 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7c5c:	e037883a 	mov	sp,fp
    7c60:	dfc00117 	ldw	ra,4(sp)
    7c64:	df000017 	ldw	fp,0(sp)
    7c68:	dec00204 	addi	sp,sp,8
    7c6c:	f800283a 	ret

00007c70 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    7c70:	defff804 	addi	sp,sp,-32
    7c74:	dfc00715 	stw	ra,28(sp)
    7c78:	df000615 	stw	fp,24(sp)
    7c7c:	df000604 	addi	fp,sp,24
    7c80:	e13ffd15 	stw	r4,-12(fp)
    7c84:	e17ffe15 	stw	r5,-8(fp)
    7c88:	3005883a 	mov	r2,r6
    7c8c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    7c90:	e0bffe17 	ldw	r2,-8(fp)
    7c94:	10800003 	ldbu	r2,0(r2)
    7c98:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    7c9c:	e0bffb03 	ldbu	r2,-20(fp)
    7ca0:	100b883a 	mov	r5,r2
    7ca4:	e13ffd17 	ldw	r4,-12(fp)
    7ca8:	0008c600 	call	8c60 <_ZN9USBH_MIDI17convertStatus2CinEh>
    7cac:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    7cb0:	e0bffb03 	ldbu	r2,-20(fp)
    7cb4:	10803c18 	cmpnei	r2,r2,240
    7cb8:	10000b1e 	bne	r2,zero,7ce8 <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    7cbc:	e17ffe17 	ldw	r5,-8(fp)
    7cc0:	e13ffd17 	ldw	r4,-12(fp)
    7cc4:	0007e300 	call	7e30 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    7cc8:	10bfffcc 	andi	r2,r2,65535
    7ccc:	e0ffff03 	ldbu	r3,-4(fp)
    7cd0:	180f883a 	mov	r7,r3
    7cd4:	100d883a 	mov	r6,r2
    7cd8:	e17ffe17 	ldw	r5,-8(fp)
    7cdc:	e13ffd17 	ldw	r4,-12(fp)
    7ce0:	0007eb80 	call	7eb8 <_ZN9USBH_MIDI9SendSysExEPhth>
    7ce4:	00003406 	br	7db8 <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    7ce8:	e0bfff03 	ldbu	r2,-4(fp)
    7cec:	1004913a 	slli	r2,r2,4
    7cf0:	1007883a 	mov	r3,r2
    7cf4:	e0bffb43 	ldbu	r2,-19(fp)
    7cf8:	1884b03a 	or	r2,r3,r2
    7cfc:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    7d00:	e0bffe17 	ldw	r2,-8(fp)
    7d04:	10800003 	ldbu	r2,0(r2)
    7d08:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    7d0c:	e0bffb43 	ldbu	r2,-19(fp)
    7d10:	100b883a 	mov	r5,r2
    7d14:	e13ffd17 	ldw	r4,-12(fp)
    7d18:	0008cb80 	call	8cb8 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    7d1c:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    7d20:	e0bffb83 	ldbu	r2,-18(fp)
    7d24:	10c000a0 	cmpeqi	r3,r2,2
    7d28:	18000c1e 	bne	r3,zero,7d5c <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    7d2c:	10c000e0 	cmpeqi	r3,r2,3
    7d30:	1800031e 	bne	r3,zero,7d40 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    7d34:	10800060 	cmpeqi	r2,r2,1
    7d38:	10000d1e 	bne	r2,zero,7d70 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    7d3c:	00000f06 	br	7d7c <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    7d40:	e0bffe17 	ldw	r2,-8(fp)
    7d44:	10800043 	ldbu	r2,1(r2)
    7d48:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    7d4c:	e0bffe17 	ldw	r2,-8(fp)
    7d50:	10800083 	ldbu	r2,2(r2)
    7d54:	e0bffc85 	stb	r2,-14(fp)
                break;
    7d58:	00000806 	br	7d7c <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    7d5c:	e0bffe17 	ldw	r2,-8(fp)
    7d60:	10800043 	ldbu	r2,1(r2)
    7d64:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    7d68:	e03ffc85 	stb	zero,-14(fp)
                break;
    7d6c:	00000306 	br	7d7c <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    7d70:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    7d74:	e03ffc85 	stb	zero,-14(fp)
                break;
    7d78:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    7d7c:	e0bffd17 	ldw	r2,-12(fp)
    7d80:	10c00217 	ldw	r3,8(r2)
    7d84:	e0bffd17 	ldw	r2,-12(fp)
    7d88:	10800303 	ldbu	r2,12(r2)
    7d8c:	11003fcc 	andi	r4,r2,255
    7d90:	e0bffd17 	ldw	r2,-12(fp)
    7d94:	10800643 	ldbu	r2,25(r2)
    7d98:	11403fcc 	andi	r5,r2,255
    7d9c:	e0bffbc4 	addi	r2,fp,-17
    7da0:	d8800015 	stw	r2,0(sp)
    7da4:	01c00104 	movi	r7,4
    7da8:	280d883a 	mov	r6,r5
    7dac:	200b883a 	mov	r5,r4
    7db0:	1809883a 	mov	r4,r3
    7db4:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    7db8:	e037883a 	mov	sp,fp
    7dbc:	dfc00117 	ldw	ra,4(sp)
    7dc0:	df000017 	ldw	fp,0(sp)
    7dc4:	dec00204 	addi	sp,sp,8
    7dc8:	f800283a 	ret

00007dcc <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    7dcc:	defffb04 	addi	sp,sp,-20
    7dd0:	dfc00415 	stw	ra,16(sp)
    7dd4:	df000315 	stw	fp,12(sp)
    7dd8:	df000304 	addi	fp,sp,12
    7ddc:	e13ffd15 	stw	r4,-12(fp)
    7de0:	2807883a 	mov	r3,r5
    7de4:	3005883a 	mov	r2,r6
    7de8:	e0fffe05 	stb	r3,-8(fp)
    7dec:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    7df0:	e0bfff03 	ldbu	r2,-4(fp)
    7df4:	1000051e 	bne	r2,zero,7e0c <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    7df8:	e0bffe03 	ldbu	r2,-8(fp)
    7dfc:	100b883a 	mov	r5,r2
    7e00:	e13ffd17 	ldw	r4,-12(fp)
    7e04:	0008c600 	call	8c60 <_ZN9USBH_MIDI17convertStatus2CinEh>
    7e08:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    7e0c:	e0bfff03 	ldbu	r2,-4(fp)
    7e10:	100b883a 	mov	r5,r2
    7e14:	e13ffd17 	ldw	r4,-12(fp)
    7e18:	0008cb80 	call	8cb8 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7e1c:	e037883a 	mov	sp,fp
    7e20:	dfc00117 	ldw	ra,4(sp)
    7e24:	df000017 	ldw	fp,0(sp)
    7e28:	dec00204 	addi	sp,sp,8
    7e2c:	f800283a 	ret

00007e30 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    7e30:	defffc04 	addi	sp,sp,-16
    7e34:	df000315 	stw	fp,12(sp)
    7e38:	df000304 	addi	fp,sp,12
    7e3c:	e13ffe15 	stw	r4,-8(fp)
    7e40:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    7e44:	00800044 	movi	r2,1
    7e48:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    7e4c:	e0bfff17 	ldw	r2,-4(fp)
    7e50:	10800003 	ldbu	r2,0(r2)
    7e54:	10803fcc 	andi	r2,r2,255
    7e58:	10803c20 	cmpeqi	r2,r2,240
    7e5c:	1000021e 	bne	r2,zero,7e68 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    7e60:	0005883a 	mov	r2,zero
    7e64:	00001006 	br	7ea8 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    7e68:	e0bfff17 	ldw	r2,-4(fp)
    7e6c:	10800003 	ldbu	r2,0(r2)
    7e70:	10803fcc 	andi	r2,r2,255
    7e74:	10803de0 	cmpeqi	r2,r2,247
    7e78:	10000a1e 	bne	r2,zero,7ea4 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    7e7c:	e0bfff17 	ldw	r2,-4(fp)
    7e80:	10800044 	addi	r2,r2,1
    7e84:	e0bfff15 	stw	r2,-4(fp)
                c++;
    7e88:	e0bffd0b 	ldhu	r2,-12(fp)
    7e8c:	10800044 	addi	r2,r2,1
    7e90:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    7e94:	e0bffd0b 	ldhu	r2,-12(fp)
    7e98:	10804070 	cmpltui	r2,r2,257
    7e9c:	103ff21e 	bne	r2,zero,7e68 <__alt_data_end+0xfc007e68>
                        c = 0;
    7ea0:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    7ea4:	e0bffd0b 	ldhu	r2,-12(fp)
}
    7ea8:	e037883a 	mov	sp,fp
    7eac:	df000017 	ldw	fp,0(sp)
    7eb0:	dec00104 	addi	sp,sp,4
    7eb4:	f800283a 	ret

00007eb8 <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    7eb8:	deffe704 	addi	sp,sp,-100
    7ebc:	dfc01815 	stw	ra,96(sp)
    7ec0:	df001715 	stw	fp,92(sp)
    7ec4:	df001704 	addi	fp,sp,92
    7ec8:	e13ffc15 	stw	r4,-16(fp)
    7ecc:	e17ffd15 	stw	r5,-12(fp)
    7ed0:	3007883a 	mov	r3,r6
    7ed4:	3805883a 	mov	r2,r7
    7ed8:	e0fffe0d 	sth	r3,-8(fp)
    7edc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    7ee0:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    7ee4:	e0bffe0b 	ldhu	r2,-8(fp)
    7ee8:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    7eec:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    7ef0:	e0bffc17 	ldw	r2,-16(fp)
    7ef4:	108005c3 	ldbu	r2,23(r2)
    7ef8:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    7efc:	e0bffe0b 	ldhu	r2,-8(fp)
    7f00:	01402004 	movi	r5,128
    7f04:	1009883a 	mov	r4,r2
    7f08:	0008d500 	call	8d50 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    7f0c:	e0bfea8b 	ldhu	r2,-86(fp)
    7f10:	1000b026 	beq	r2,zero,81d4 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    7f14:	e0bfeb03 	ldbu	r2,-84(fp)
    7f18:	e0ffff03 	ldbu	r3,-4(fp)
    7f1c:	1806913a 	slli	r3,r3,4
    7f20:	18c00114 	ori	r3,r3,4
    7f24:	1809883a 	mov	r4,r3
    7f28:	e0ffeb84 	addi	r3,fp,-82
    7f2c:	1885883a 	add	r2,r3,r2
    7f30:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    7f34:	e0bfea8b 	ldhu	r2,-86(fp)
    7f38:	10c000a0 	cmpeqi	r3,r2,2
    7f3c:	18002a1e 	bne	r3,zero,7fe8 <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    7f40:	10c000e0 	cmpeqi	r3,r2,3
    7f44:	1800521e 	bne	r3,zero,8090 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    7f48:	10800060 	cmpeqi	r2,r2,1
    7f4c:	10005826 	beq	r2,zero,80b0 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    7f50:	e0bfeb03 	ldbu	r2,-84(fp)
    7f54:	10c00044 	addi	r3,r2,1
    7f58:	e0ffeb05 	stb	r3,-84(fp)
    7f5c:	10803fcc 	andi	r2,r2,255
    7f60:	e0ffff03 	ldbu	r3,-4(fp)
    7f64:	1806913a 	slli	r3,r3,4
    7f68:	18c00154 	ori	r3,r3,5
    7f6c:	1809883a 	mov	r4,r3
    7f70:	e0ffeb84 	addi	r3,fp,-82
    7f74:	1885883a 	add	r2,r3,r2
    7f78:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    7f7c:	e0bfeb03 	ldbu	r2,-84(fp)
    7f80:	10c00044 	addi	r3,r2,1
    7f84:	e0ffeb05 	stb	r3,-84(fp)
    7f88:	11003fcc 	andi	r4,r2,255
    7f8c:	e0bffd17 	ldw	r2,-12(fp)
    7f90:	10c00044 	addi	r3,r2,1
    7f94:	e0fffd15 	stw	r3,-12(fp)
    7f98:	10c00003 	ldbu	r3,0(r2)
    7f9c:	e0bfeb84 	addi	r2,fp,-82
    7fa0:	1105883a 	add	r2,r2,r4
    7fa4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    7fa8:	e0bfeb03 	ldbu	r2,-84(fp)
    7fac:	10c00044 	addi	r3,r2,1
    7fb0:	e0ffeb05 	stb	r3,-84(fp)
    7fb4:	10803fcc 	andi	r2,r2,255
    7fb8:	e0ffeb84 	addi	r3,fp,-82
    7fbc:	1885883a 	add	r2,r3,r2
    7fc0:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    7fc4:	e0bfeb03 	ldbu	r2,-84(fp)
    7fc8:	10c00044 	addi	r3,r2,1
    7fcc:	e0ffeb05 	stb	r3,-84(fp)
    7fd0:	10803fcc 	andi	r2,r2,255
    7fd4:	e0ffeb84 	addi	r3,fp,-82
    7fd8:	1885883a 	add	r2,r3,r2
    7fdc:	10000005 	stb	zero,0(r2)
                        n = 0;
    7fe0:	e03fea8d 	sth	zero,-86(fp)
                        break;
    7fe4:	00005a06 	br	8150 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    7fe8:	e0bfeb03 	ldbu	r2,-84(fp)
    7fec:	10c00044 	addi	r3,r2,1
    7ff0:	e0ffeb05 	stb	r3,-84(fp)
    7ff4:	10803fcc 	andi	r2,r2,255
    7ff8:	e0ffff03 	ldbu	r3,-4(fp)
    7ffc:	1806913a 	slli	r3,r3,4
    8000:	18c00194 	ori	r3,r3,6
    8004:	1809883a 	mov	r4,r3
    8008:	e0ffeb84 	addi	r3,fp,-82
    800c:	1885883a 	add	r2,r3,r2
    8010:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    8014:	e0bfeb03 	ldbu	r2,-84(fp)
    8018:	10c00044 	addi	r3,r2,1
    801c:	e0ffeb05 	stb	r3,-84(fp)
    8020:	11003fcc 	andi	r4,r2,255
    8024:	e0bffd17 	ldw	r2,-12(fp)
    8028:	10c00044 	addi	r3,r2,1
    802c:	e0fffd15 	stw	r3,-12(fp)
    8030:	10c00003 	ldbu	r3,0(r2)
    8034:	e0bfeb84 	addi	r2,fp,-82
    8038:	1105883a 	add	r2,r2,r4
    803c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8040:	e0bfeb03 	ldbu	r2,-84(fp)
    8044:	10c00044 	addi	r3,r2,1
    8048:	e0ffeb05 	stb	r3,-84(fp)
    804c:	11003fcc 	andi	r4,r2,255
    8050:	e0bffd17 	ldw	r2,-12(fp)
    8054:	10c00044 	addi	r3,r2,1
    8058:	e0fffd15 	stw	r3,-12(fp)
    805c:	10c00003 	ldbu	r3,0(r2)
    8060:	e0bfeb84 	addi	r2,fp,-82
    8064:	1105883a 	add	r2,r2,r4
    8068:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    806c:	e0bfeb03 	ldbu	r2,-84(fp)
    8070:	10c00044 	addi	r3,r2,1
    8074:	e0ffeb05 	stb	r3,-84(fp)
    8078:	10803fcc 	andi	r2,r2,255
    807c:	e0ffeb84 	addi	r3,fp,-82
    8080:	1885883a 	add	r2,r3,r2
    8084:	10000005 	stb	zero,0(r2)
                        n = 0;
    8088:	e03fea8d 	sth	zero,-86(fp)
                        break;
    808c:	00003006 	br	8150 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    8090:	e0bfeb03 	ldbu	r2,-84(fp)
    8094:	e0ffff03 	ldbu	r3,-4(fp)
    8098:	1806913a 	slli	r3,r3,4
    809c:	18c001d4 	ori	r3,r3,7
    80a0:	1809883a 	mov	r4,r3
    80a4:	e0ffeb84 	addi	r3,fp,-82
    80a8:	1885883a 	add	r2,r3,r2
    80ac:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    80b0:	e0bfeb03 	ldbu	r2,-84(fp)
    80b4:	10800044 	addi	r2,r2,1
    80b8:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    80bc:	e0bfeb03 	ldbu	r2,-84(fp)
    80c0:	10c00044 	addi	r3,r2,1
    80c4:	e0ffeb05 	stb	r3,-84(fp)
    80c8:	11003fcc 	andi	r4,r2,255
    80cc:	e0bffd17 	ldw	r2,-12(fp)
    80d0:	10c00044 	addi	r3,r2,1
    80d4:	e0fffd15 	stw	r3,-12(fp)
    80d8:	10c00003 	ldbu	r3,0(r2)
    80dc:	e0bfeb84 	addi	r2,fp,-82
    80e0:	1105883a 	add	r2,r2,r4
    80e4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    80e8:	e0bfeb03 	ldbu	r2,-84(fp)
    80ec:	10c00044 	addi	r3,r2,1
    80f0:	e0ffeb05 	stb	r3,-84(fp)
    80f4:	11003fcc 	andi	r4,r2,255
    80f8:	e0bffd17 	ldw	r2,-12(fp)
    80fc:	10c00044 	addi	r3,r2,1
    8100:	e0fffd15 	stw	r3,-12(fp)
    8104:	10c00003 	ldbu	r3,0(r2)
    8108:	e0bfeb84 	addi	r2,fp,-82
    810c:	1105883a 	add	r2,r2,r4
    8110:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8114:	e0bfeb03 	ldbu	r2,-84(fp)
    8118:	10c00044 	addi	r3,r2,1
    811c:	e0ffeb05 	stb	r3,-84(fp)
    8120:	11003fcc 	andi	r4,r2,255
    8124:	e0bffd17 	ldw	r2,-12(fp)
    8128:	10c00044 	addi	r3,r2,1
    812c:	e0fffd15 	stw	r3,-12(fp)
    8130:	10c00003 	ldbu	r3,0(r2)
    8134:	e0bfeb84 	addi	r2,fp,-82
    8138:	1105883a 	add	r2,r2,r4
    813c:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    8140:	e0bfea8b 	ldhu	r2,-86(fp)
    8144:	10bfff44 	addi	r2,r2,-3
    8148:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    814c:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    8150:	e0ffeb03 	ldbu	r3,-84(fp)
    8154:	e0bfeb43 	ldbu	r2,-83(fp)
    8158:	1880022e 	bgeu	r3,r2,8164 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    815c:	e0bfea8b 	ldhu	r2,-86(fp)
    8160:	103f6a1e 	bne	r2,zero,7f0c <__alt_data_end+0xfc007f0c>
                        USBTRACE2(" wptr:\t", wptr);
    8164:	e0bfeb03 	ldbu	r2,-84(fp)
    8168:	01402004 	movi	r5,128
    816c:	1009883a 	mov	r4,r2
    8170:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    8174:	e0bffc17 	ldw	r2,-16(fp)
    8178:	10c00217 	ldw	r3,8(r2)
    817c:	e0bffc17 	ldw	r2,-16(fp)
    8180:	10800303 	ldbu	r2,12(r2)
    8184:	11003fcc 	andi	r4,r2,255
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	10800643 	ldbu	r2,25(r2)
    8190:	11403fcc 	andi	r5,r2,255
    8194:	e1bfeb03 	ldbu	r6,-84(fp)
    8198:	e0bfeb84 	addi	r2,fp,-82
    819c:	d8800015 	stw	r2,0(sp)
    81a0:	300f883a 	mov	r7,r6
    81a4:	280d883a 	mov	r6,r5
    81a8:	200b883a 	mov	r5,r4
    81ac:	1809883a 	mov	r4,r3
    81b0:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    81b4:	e0bfea05 	stb	r2,-88(fp)
    81b8:	e0bfea03 	ldbu	r2,-88(fp)
    81bc:	1004c03a 	cmpne	r2,r2,zero
    81c0:	10803fcc 	andi	r2,r2,255
    81c4:	1000021e 	bne	r2,zero,81d0 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    81c8:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    81cc:	003f4f06 	br	7f0c <__alt_data_end+0xfc007f0c>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    81d0:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    81d4:	e0bfea03 	ldbu	r2,-88(fp)
}
    81d8:	e037883a 	mov	sp,fp
    81dc:	dfc00117 	ldw	ra,4(sp)
    81e0:	df000017 	ldw	fp,0(sp)
    81e4:	dec00204 	addi	sp,sp,8
    81e8:	f800283a 	ret

000081ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    81ec:	defffb04 	addi	sp,sp,-20
    81f0:	df000415 	stw	fp,16(sp)
    81f4:	df000404 	addi	fp,sp,16
    81f8:	e13ffd15 	stw	r4,-12(fp)
    81fc:	e17ffe15 	stw	r5,-8(fp)
    8200:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    8204:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    8208:	e0bffe17 	ldw	r2,-8(fp)
    820c:	10800003 	ldbu	r2,0(r2)
    8210:	108003cc 	andi	r2,r2,15
    8214:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    8218:	e0bffc43 	ldbu	r2,-15(fp)
    821c:	1080030c 	andi	r2,r2,12
    8220:	10800120 	cmpeqi	r2,r2,4
    8224:	1000021e 	bne	r2,zero,8230 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    8228:	e0bffc03 	ldbu	r2,-16(fp)
    822c:	00003b06 	br	831c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    8230:	e0bffc43 	ldbu	r2,-15(fp)
    8234:	10c00160 	cmpeqi	r3,r2,5
    8238:	18002e1e 	bne	r3,zero,82f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    823c:	10c00188 	cmpgei	r3,r2,6
    8240:	1800031e 	bne	r3,zero,8250 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    8244:	10800120 	cmpeqi	r2,r2,4
    8248:	1000061e 	bne	r2,zero,8264 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    824c:	00003206 	br	8318 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    8250:	10c001a0 	cmpeqi	r3,r2,6
    8254:	1800181e 	bne	r3,zero,82b8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    8258:	108001e0 	cmpeqi	r2,r2,7
    825c:	1000011e 	bne	r2,zero,8264 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8260:	00002d06 	br	8318 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    8264:	e0bfff17 	ldw	r2,-4(fp)
    8268:	10c00044 	addi	r3,r2,1
    826c:	e0ffff15 	stw	r3,-4(fp)
    8270:	e0fffe17 	ldw	r3,-8(fp)
    8274:	18c00043 	ldbu	r3,1(r3)
    8278:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    827c:	e0bfff17 	ldw	r2,-4(fp)
    8280:	10c00044 	addi	r3,r2,1
    8284:	e0ffff15 	stw	r3,-4(fp)
    8288:	e0fffe17 	ldw	r3,-8(fp)
    828c:	18c00083 	ldbu	r3,2(r3)
    8290:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    8294:	e0bfff17 	ldw	r2,-4(fp)
    8298:	10c00044 	addi	r3,r2,1
    829c:	e0ffff15 	stw	r3,-4(fp)
    82a0:	e0fffe17 	ldw	r3,-8(fp)
    82a4:	18c000c3 	ldbu	r3,3(r3)
    82a8:	10c00005 	stb	r3,0(r2)
                rc = 3;
    82ac:	008000c4 	movi	r2,3
    82b0:	e0bffc05 	stb	r2,-16(fp)
                break;
    82b4:	00001806 	br	8318 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    82b8:	e0bfff17 	ldw	r2,-4(fp)
    82bc:	10c00044 	addi	r3,r2,1
    82c0:	e0ffff15 	stw	r3,-4(fp)
    82c4:	e0fffe17 	ldw	r3,-8(fp)
    82c8:	18c00043 	ldbu	r3,1(r3)
    82cc:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    82d0:	e0bfff17 	ldw	r2,-4(fp)
    82d4:	10c00044 	addi	r3,r2,1
    82d8:	e0ffff15 	stw	r3,-4(fp)
    82dc:	e0fffe17 	ldw	r3,-8(fp)
    82e0:	18c00083 	ldbu	r3,2(r3)
    82e4:	10c00005 	stb	r3,0(r2)
                rc = 2;
    82e8:	00800084 	movi	r2,2
    82ec:	e0bffc05 	stb	r2,-16(fp)
                break;
    82f0:	00000906 	br	8318 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    82f4:	e0bfff17 	ldw	r2,-4(fp)
    82f8:	10c00044 	addi	r3,r2,1
    82fc:	e0ffff15 	stw	r3,-4(fp)
    8300:	e0fffe17 	ldw	r3,-8(fp)
    8304:	18c00043 	ldbu	r3,1(r3)
    8308:	10c00005 	stb	r3,0(r2)
                rc = 1;
    830c:	00800044 	movi	r2,1
    8310:	e0bffc05 	stb	r2,-16(fp)
                break;
    8314:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    8318:	e0bffc03 	ldbu	r2,-16(fp)
}
    831c:	e037883a 	mov	sp,fp
    8320:	df000017 	ldw	fp,0(sp)
    8324:	dec00104 	addi	sp,sp,4
    8328:	f800283a 	ret

0000832c <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    832c:	defffb04 	addi	sp,sp,-20
    8330:	dfc00415 	stw	ra,16(sp)
    8334:	df000315 	stw	fp,12(sp)
    8338:	df000304 	addi	fp,sp,12
    833c:	e13ffd15 	stw	r4,-12(fp)
    8340:	e17ffe15 	stw	r5,-8(fp)
    8344:	3005883a 	mov	r2,r6
    8348:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    834c:	e0bffd17 	ldw	r2,-12(fp)
    8350:	1009883a 	mov	r4,r2
    8354:	0004aec0 	call	4aec <_ZN13USBReadParserC1Ev>
    8358:	008000b4 	movhi	r2,2
    835c:	10983104 	addi	r2,r2,24772
    8360:	e0fffd17 	ldw	r3,-12(fp)
    8364:	18800015 	stw	r2,0(r3)
    8368:	e0bffd17 	ldw	r2,-12(fp)
    836c:	e0fffe17 	ldw	r3,-8(fp)
    8370:	10c00115 	stw	r3,4(r2)
    8374:	e0bffd17 	ldw	r2,-12(fp)
    8378:	10800204 	addi	r2,r2,8
    837c:	1009883a 	mov	r4,r2
    8380:	00043dc0 	call	43dc <_ZN16MultiValueBufferC1Ev>
    8384:	e0bffd17 	ldw	r2,-12(fp)
    8388:	10800404 	addi	r2,r2,16
    838c:	1009883a 	mov	r4,r2
    8390:	000443c0 	call	443c <_ZN20MultiByteValueParserC1Ev>
    8394:	e0bffd17 	ldw	r2,-12(fp)
    8398:	10800604 	addi	r2,r2,24
    839c:	1009883a 	mov	r4,r2
    83a0:	00044f80 	call	44f8 <_ZN11ByteSkipperC1Ev>
    83a4:	e0bffd17 	ldw	r2,-12(fp)
    83a8:	10000c05 	stb	zero,48(r2)
    83ac:	e0bffd17 	ldw	r2,-12(fp)
    83b0:	10000c45 	stb	zero,49(r2)
    83b4:	e0bffd17 	ldw	r2,-12(fp)
    83b8:	10000c85 	stb	zero,50(r2)
    83bc:	e0bffd17 	ldw	r2,-12(fp)
    83c0:	10000cc5 	stb	zero,51(r2)
    83c4:	e0bffd17 	ldw	r2,-12(fp)
    83c8:	e0ffff03 	ldbu	r3,-4(fp)
    83cc:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    83d0:	e0bffd17 	ldw	r2,-12(fp)
    83d4:	10c00804 	addi	r3,r2,32
    83d8:	e0bffd17 	ldw	r2,-12(fp)
    83dc:	19803fcc 	andi	r6,r3,255
    83e0:	11000243 	ldbu	r4,9(r2)
    83e4:	2008703a 	and	r4,r4,zero
    83e8:	200b883a 	mov	r5,r4
    83ec:	3009883a 	mov	r4,r6
    83f0:	2908b03a 	or	r4,r5,r4
    83f4:	11000245 	stb	r4,9(r2)
    83f8:	1808d23a 	srli	r4,r3,8
    83fc:	21803fcc 	andi	r6,r4,255
    8400:	11000283 	ldbu	r4,10(r2)
    8404:	2008703a 	and	r4,r4,zero
    8408:	200b883a 	mov	r5,r4
    840c:	3009883a 	mov	r4,r6
    8410:	2908b03a 	or	r4,r5,r4
    8414:	11000285 	stb	r4,10(r2)
    8418:	1808d43a 	srli	r4,r3,16
    841c:	21803fcc 	andi	r6,r4,255
    8420:	110002c3 	ldbu	r4,11(r2)
    8424:	2008703a 	and	r4,r4,zero
    8428:	200b883a 	mov	r5,r4
    842c:	3009883a 	mov	r4,r6
    8430:	2908b03a 	or	r4,r5,r4
    8434:	110002c5 	stb	r4,11(r2)
    8438:	180ad63a 	srli	r5,r3,24
    843c:	10c00303 	ldbu	r3,12(r2)
    8440:	1806703a 	and	r3,r3,zero
    8444:	1809883a 	mov	r4,r3
    8448:	2807883a 	mov	r3,r5
    844c:	20c6b03a 	or	r3,r4,r3
    8450:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    8454:	e0bffd17 	ldw	r2,-12(fp)
    8458:	10c00404 	addi	r3,r2,16
    845c:	e0bffd17 	ldw	r2,-12(fp)
    8460:	10800204 	addi	r2,r2,8
    8464:	100b883a 	mov	r5,r2
    8468:	1809883a 	mov	r4,r3
    846c:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    8470:	e0bffd17 	ldw	r2,-12(fp)
    8474:	10c00604 	addi	r3,r2,24
    8478:	e0bffd17 	ldw	r2,-12(fp)
    847c:	10800204 	addi	r2,r2,8
    8480:	100b883a 	mov	r5,r2
    8484:	1809883a 	mov	r4,r3
    8488:	00045340 	call	4534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    848c:	0001883a 	nop
    8490:	e037883a 	mov	sp,fp
    8494:	dfc00117 	ldw	ra,4(sp)
    8498:	df000017 	ldw	fp,0(sp)
    849c:	dec00204 	addi	sp,sp,8
    84a0:	f800283a 	ret

000084a4 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    84a4:	defff804 	addi	sp,sp,-32
    84a8:	dfc00715 	stw	ra,28(sp)
    84ac:	df000615 	stw	fp,24(sp)
    84b0:	df000604 	addi	fp,sp,24
    84b4:	e13ffc15 	stw	r4,-16(fp)
    84b8:	2805883a 	mov	r2,r5
    84bc:	e1bffe15 	stw	r6,-8(fp)
    84c0:	e1ffff15 	stw	r7,-4(fp)
    84c4:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    84c8:	e0bffd0b 	ldhu	r2,-12(fp)
    84cc:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    84d0:	e0bffe17 	ldw	r2,-8(fp)
    84d4:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    84d8:	e0bffa0b 	ldhu	r2,-24(fp)
    84dc:	10bfffcc 	andi	r2,r2,65535
    84e0:	10000a26 	beq	r2,zero,850c <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    84e4:	e0bffb04 	addi	r2,fp,-20
    84e8:	e1bffa04 	addi	r6,fp,-24
    84ec:	100b883a 	mov	r5,r2
    84f0:	e13ffc17 	ldw	r4,-16(fp)
    84f4:	00085200 	call	8520 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    84f8:	1080005c 	xori	r2,r2,1
    84fc:	10803fcc 	andi	r2,r2,255
    8500:	1000011e 	bne	r2,zero,8508 <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    8504:	003ff406 	br	84d8 <__alt_data_end+0xfc0084d8>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    8508:	0001883a 	nop
}
    850c:	e037883a 	mov	sp,fp
    8510:	dfc00117 	ldw	ra,4(sp)
    8514:	df000017 	ldw	fp,0(sp)
    8518:	dec00204 	addi	sp,sp,8
    851c:	f800283a 	ret

00008520 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    8520:	defff604 	addi	sp,sp,-40
    8524:	dfc00915 	stw	ra,36(sp)
    8528:	df000815 	stw	fp,32(sp)
    852c:	df000804 	addi	fp,sp,32
    8530:	e13ffc15 	stw	r4,-16(fp)
    8534:	e17ffd15 	stw	r5,-12(fp)
    8538:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    853c:	e0bffc17 	ldw	r2,-16(fp)
    8540:	10800804 	addi	r2,r2,32
    8544:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    8548:	e0bffc17 	ldw	r2,-16(fp)
    854c:	10800804 	addi	r2,r2,32
    8550:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    8554:	e0bffc17 	ldw	r2,-16(fp)
    8558:	10800c03 	ldbu	r2,48(r2)
    855c:	10803fcc 	andi	r2,r2,255
    8560:	10c00168 	cmpgeui	r3,r2,5
    8564:	1801411e 	bne	r3,zero,8a6c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    8568:	100690ba 	slli	r3,r2,2
    856c:	00800074 	movhi	r2,1
    8570:	10a16004 	addi	r2,r2,-31360
    8574:	1885883a 	add	r2,r3,r2
    8578:	10800017 	ldw	r2,0(r2)
    857c:	1000683a 	jmp	r2
    8580:	00008594 	movui	zero,534
    8584:	000085c8 	cmpgei	zero,zero,535
    8588:	00008650 	cmplti	zero,zero,537
    858c:	000086e4 	muli	zero,zero,539
    8590:	00008750 	cmplti	zero,zero,541
                case 0:
                        theBuffer.valueSize = 2;
    8594:	e0bffc17 	ldw	r2,-16(fp)
    8598:	00c00084 	movi	r3,2
    859c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    85a0:	e0bffc17 	ldw	r2,-16(fp)
    85a4:	10c00404 	addi	r3,r2,16
    85a8:	e0bffc17 	ldw	r2,-16(fp)
    85ac:	10800204 	addi	r2,r2,8
    85b0:	100b883a 	mov	r5,r2
    85b4:	1809883a 	mov	r4,r3
    85b8:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    85bc:	e0bffc17 	ldw	r2,-16(fp)
    85c0:	00c00044 	movi	r3,1
    85c4:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    85c8:	e0bffc17 	ldw	r2,-16(fp)
    85cc:	10800404 	addi	r2,r2,16
    85d0:	e1bffe17 	ldw	r6,-8(fp)
    85d4:	e17ffd17 	ldw	r5,-12(fp)
    85d8:	1009883a 	mov	r4,r2
    85dc:	00062040 	call	6204 <_ZN20MultiByteValueParser5ParseEPPhPt>
    85e0:	1080005c 	xori	r2,r2,1
    85e4:	10803fcc 	andi	r2,r2,255
    85e8:	10000226 	beq	r2,zero,85f4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    85ec:	0005883a 	mov	r2,zero
    85f0:	00011f06 	br	8a70 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    85f4:	e0bffc17 	ldw	r2,-16(fp)
    85f8:	10c00217 	ldw	r3,8(r2)
    85fc:	1806d23a 	srli	r3,r3,8
    8600:	10800317 	ldw	r2,12(r2)
    8604:	10803fcc 	andi	r2,r2,255
    8608:	1004963a 	slli	r2,r2,24
    860c:	10c4b03a 	or	r2,r2,r3
    8610:	10c00003 	ldbu	r3,0(r2)
    8614:	e0bffc17 	ldw	r2,-16(fp)
    8618:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    861c:	e0bffc17 	ldw	r2,-16(fp)
    8620:	10c00217 	ldw	r3,8(r2)
    8624:	1806d23a 	srli	r3,r3,8
    8628:	10800317 	ldw	r2,12(r2)
    862c:	10803fcc 	andi	r2,r2,255
    8630:	1004963a 	slli	r2,r2,24
    8634:	10c4b03a 	or	r2,r2,r3
    8638:	10c00043 	ldbu	r3,1(r2)
    863c:	e0bffc17 	ldw	r2,-16(fp)
    8640:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    8644:	e0bffc17 	ldw	r2,-16(fp)
    8648:	00c00084 	movi	r3,2
    864c:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    8650:	e0bffc17 	ldw	r2,-16(fp)
    8654:	10800804 	addi	r2,r2,32
    8658:	10c00084 	addi	r3,r2,2
    865c:	e0bffc17 	ldw	r2,-16(fp)
    8660:	19803fcc 	andi	r6,r3,255
    8664:	11000243 	ldbu	r4,9(r2)
    8668:	2008703a 	and	r4,r4,zero
    866c:	200b883a 	mov	r5,r4
    8670:	3009883a 	mov	r4,r6
    8674:	2908b03a 	or	r4,r5,r4
    8678:	11000245 	stb	r4,9(r2)
    867c:	1808d23a 	srli	r4,r3,8
    8680:	21803fcc 	andi	r6,r4,255
    8684:	11000283 	ldbu	r4,10(r2)
    8688:	2008703a 	and	r4,r4,zero
    868c:	200b883a 	mov	r5,r4
    8690:	3009883a 	mov	r4,r6
    8694:	2908b03a 	or	r4,r5,r4
    8698:	11000285 	stb	r4,10(r2)
    869c:	1808d43a 	srli	r4,r3,16
    86a0:	21803fcc 	andi	r6,r4,255
    86a4:	110002c3 	ldbu	r4,11(r2)
    86a8:	2008703a 	and	r4,r4,zero
    86ac:	200b883a 	mov	r5,r4
    86b0:	3009883a 	mov	r4,r6
    86b4:	2908b03a 	or	r4,r5,r4
    86b8:	110002c5 	stb	r4,11(r2)
    86bc:	180ad63a 	srli	r5,r3,24
    86c0:	10c00303 	ldbu	r3,12(r2)
    86c4:	1806703a 	and	r3,r3,zero
    86c8:	1809883a 	mov	r4,r3
    86cc:	2807883a 	mov	r3,r5
    86d0:	20c6b03a 	or	r3,r4,r3
    86d4:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    86d8:	e0bffc17 	ldw	r2,-16(fp)
    86dc:	00c000c4 	movi	r3,3
    86e0:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    86e4:	e0bffc17 	ldw	r2,-16(fp)
    86e8:	10800c83 	ldbu	r2,50(r2)
    86ec:	10803fcc 	andi	r2,r2,255
    86f0:	10c00120 	cmpeqi	r3,r2,4
    86f4:	1800021e 	bne	r3,zero,8700 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    86f8:	10800148 	cmpgei	r2,r2,5
    86fc:	00000306 	br	870c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    8700:	e0bffc17 	ldw	r2,-16(fp)
    8704:	10000d45 	stb	zero,53(r2)
                                        break;
    8708:	00000106 	br	8710 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    870c:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    8710:	e0bffc17 	ldw	r2,-16(fp)
    8714:	10800c43 	ldbu	r2,49(r2)
    8718:	10bfff84 	addi	r2,r2,-2
    871c:	1007883a 	mov	r3,r2
    8720:	e0bffc17 	ldw	r2,-16(fp)
    8724:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8728:	e0bffc17 	ldw	r2,-16(fp)
    872c:	10c00404 	addi	r3,r2,16
    8730:	e0bffc17 	ldw	r2,-16(fp)
    8734:	10800204 	addi	r2,r2,8
    8738:	100b883a 	mov	r5,r2
    873c:	1809883a 	mov	r4,r3
    8740:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    8744:	e0bffc17 	ldw	r2,-16(fp)
    8748:	00c00104 	movi	r3,4
    874c:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    8750:	e0bffc17 	ldw	r2,-16(fp)
    8754:	10800c83 	ldbu	r2,50(r2)
    8758:	10803fcc 	andi	r2,r2,255
    875c:	10c00120 	cmpeqi	r3,r2,4
    8760:	1800141e 	bne	r3,zero,87b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    8764:	10c00160 	cmpeqi	r3,r2,5
    8768:	18005a1e 	bne	r3,zero,88d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    876c:	108000a0 	cmpeqi	r2,r2,2
    8770:	10008526 	beq	r2,zero,8988 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    8774:	e0bffc17 	ldw	r2,-16(fp)
    8778:	10800404 	addi	r2,r2,16
    877c:	e1bffe17 	ldw	r6,-8(fp)
    8780:	e17ffd17 	ldw	r5,-12(fp)
    8784:	1009883a 	mov	r4,r2
    8788:	00062040 	call	6204 <_ZN20MultiByteValueParser5ParseEPPhPt>
    878c:	1080005c 	xori	r2,r2,1
    8790:	10803fcc 	andi	r2,r2,255
    8794:	10000226 	beq	r2,zero,87a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    8798:	0005883a 	mov	r2,zero
    879c:	0000b406 	br	8a70 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    87a0:	e0bffa17 	ldw	r2,-24(fp)
    87a4:	10c00143 	ldbu	r3,5(r2)
    87a8:	e0bffc17 	ldw	r2,-16(fp)
    87ac:	10c00d85 	stb	r3,54(r2)
                                        break;
    87b0:	00008b06 	br	89e0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    87b4:	e0bffc17 	ldw	r2,-16(fp)
    87b8:	10800404 	addi	r2,r2,16
    87bc:	e1bffe17 	ldw	r6,-8(fp)
    87c0:	e17ffd17 	ldw	r5,-12(fp)
    87c4:	1009883a 	mov	r4,r2
    87c8:	00062040 	call	6204 <_ZN20MultiByteValueParser5ParseEPPhPt>
    87cc:	1080005c 	xori	r2,r2,1
    87d0:	10803fcc 	andi	r2,r2,255
    87d4:	10000226 	beq	r2,zero,87e0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    87d8:	0005883a 	mov	r2,zero
    87dc:	0000a406 	br	8a70 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    87e0:	e0bffb17 	ldw	r2,-20(fp)
    87e4:	10800083 	ldbu	r2,2(r2)
    87e8:	10803fcc 	andi	r2,r2,255
    87ec:	01402004 	movi	r5,128
    87f0:	1009883a 	mov	r4,r2
    87f4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    87f8:	e0bffb17 	ldw	r2,-20(fp)
    87fc:	108000c3 	ldbu	r2,3(r2)
    8800:	10803fcc 	andi	r2,r2,255
    8804:	01402004 	movi	r5,128
    8808:	1009883a 	mov	r4,r2
    880c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    8810:	e0bffb17 	ldw	r2,-20(fp)
    8814:	10800103 	ldbu	r2,4(r2)
    8818:	10803fcc 	andi	r2,r2,255
    881c:	01402004 	movi	r5,128
    8820:	1009883a 	mov	r4,r2
    8824:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    8828:	e0bffb17 	ldw	r2,-20(fp)
    882c:	10800143 	ldbu	r2,5(r2)
    8830:	10803fcc 	andi	r2,r2,255
    8834:	01402004 	movi	r5,128
    8838:	1009883a 	mov	r4,r2
    883c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    8840:	e0bffb17 	ldw	r2,-20(fp)
    8844:	10800183 	ldbu	r2,6(r2)
    8848:	10803fcc 	andi	r2,r2,255
    884c:	01402004 	movi	r5,128
    8850:	1009883a 	mov	r4,r2
    8854:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    8858:	e0bffb17 	ldw	r2,-20(fp)
    885c:	108001c3 	ldbu	r2,7(r2)
    8860:	10803fcc 	andi	r2,r2,255
    8864:	01402004 	movi	r5,128
    8868:	1009883a 	mov	r4,r2
    886c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    8870:	e0bffc17 	ldw	r2,-16(fp)
    8874:	10800d03 	ldbu	r2,52(r2)
    8878:	10803fcc 	andi	r2,r2,255
    887c:	10000a26 	beq	r2,zero,88a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    8880:	e0bffb17 	ldw	r2,-20(fp)
    8884:	10800143 	ldbu	r2,5(r2)
    8888:	10803fcc 	andi	r2,r2,255
    888c:	10800058 	cmpnei	r2,r2,1
    8890:	10004e1e 	bne	r2,zero,89cc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    8894:	e0bffb17 	ldw	r2,-20(fp)
    8898:	10800183 	ldbu	r2,6(r2)
    889c:	10803fcc 	andi	r2,r2,255
    88a0:	108000d8 	cmpnei	r2,r2,3
    88a4:	1000491e 	bne	r2,zero,89cc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    88a8:	e0bffc17 	ldw	r2,-16(fp)
    88ac:	00c00044 	movi	r3,1
    88b0:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    88b4:	e0bffc17 	ldw	r2,-16(fp)
    88b8:	10800cc3 	ldbu	r2,51(r2)
    88bc:	10803fcc 	andi	r2,r2,255
    88c0:	108000a8 	cmpgeui	r2,r2,2
    88c4:	1000431e 	bne	r2,zero,89d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    88c8:	e0bffc17 	ldw	r2,-16(fp)
    88cc:	10000cc5 	stb	zero,51(r2)
                                        break;
    88d0:	00004006 	br	89d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    88d4:	e0bffc17 	ldw	r2,-16(fp)
    88d8:	10800404 	addi	r2,r2,16
    88dc:	e1bffe17 	ldw	r6,-8(fp)
    88e0:	e17ffd17 	ldw	r5,-12(fp)
    88e4:	1009883a 	mov	r4,r2
    88e8:	00062040 	call	6204 <_ZN20MultiByteValueParser5ParseEPPhPt>
    88ec:	1080005c 	xori	r2,r2,1
    88f0:	10803fcc 	andi	r2,r2,255
    88f4:	10000226 	beq	r2,zero,8900 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    88f8:	0005883a 	mov	r2,zero
    88fc:	00005c06 	br	8a70 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    8900:	e0bffc17 	ldw	r2,-16(fp)
    8904:	10800d43 	ldbu	r2,53(r2)
    8908:	10803fcc 	andi	r2,r2,255
    890c:	10003326 	beq	r2,zero,89dc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    8910:	e0bffc17 	ldw	r2,-16(fp)
    8914:	10800cc3 	ldbu	r2,51(r2)
    8918:	10803fcc 	andi	r2,r2,255
    891c:	108000a8 	cmpgeui	r2,r2,2
    8920:	10002e1e 	bne	r2,zero,89dc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    8924:	e0bffc17 	ldw	r2,-16(fp)
    8928:	10800117 	ldw	r2,4(r2)
    892c:	10800017 	ldw	r2,0(r2)
    8930:	10800017 	ldw	r2,0(r2)
    8934:	e0fffc17 	ldw	r3,-16(fp)
    8938:	19000117 	ldw	r4,4(r3)
    893c:	e0fffc17 	ldw	r3,-16(fp)
    8940:	18c00d83 	ldbu	r3,54(r3)
    8944:	19403fcc 	andi	r5,r3,255
    8948:	e0fffc17 	ldw	r3,-16(fp)
    894c:	18c00804 	addi	r3,r3,32
    8950:	d8c00115 	stw	r3,4(sp)
    8954:	d8000015 	stw	zero,0(sp)
    8958:	000f883a 	mov	r7,zero
    895c:	000d883a 	mov	r6,zero
    8960:	103ee83a 	callr	r2
    8964:	10803fcc 	andi	r2,r2,255
    8968:	10001c26 	beq	r2,zero,89dc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    896c:	e0bffc17 	ldw	r2,-16(fp)
    8970:	10800cc3 	ldbu	r2,51(r2)
    8974:	10800044 	addi	r2,r2,1
    8978:	1007883a 	mov	r3,r2
    897c:	e0bffc17 	ldw	r2,-16(fp)
    8980:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8984:	00001506 	br	89dc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    8988:	e0bffc17 	ldw	r2,-16(fp)
    898c:	10c00604 	addi	r3,r2,24
    8990:	e0bffc17 	ldw	r2,-16(fp)
    8994:	10800c43 	ldbu	r2,49(r2)
    8998:	10803fcc 	andi	r2,r2,255
    899c:	10bfff84 	addi	r2,r2,-2
    89a0:	10bfffcc 	andi	r2,r2,65535
    89a4:	100f883a 	mov	r7,r2
    89a8:	e1bffe17 	ldw	r6,-8(fp)
    89ac:	e17ffd17 	ldw	r5,-12(fp)
    89b0:	1809883a 	mov	r4,r3
    89b4:	000459c0 	call	459c <_ZN11ByteSkipper4SkipEPPhPtt>
    89b8:	1080005c 	xori	r2,r2,1
    89bc:	10803fcc 	andi	r2,r2,255
    89c0:	10000726 	beq	r2,zero,89e0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    89c4:	0005883a 	mov	r2,zero
    89c8:	00002906 	br	8a70 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    89cc:	0001883a 	nop
    89d0:	00000306 	br	89e0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    89d4:	0001883a 	nop
    89d8:	00000106 	br	89e0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    89dc:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    89e0:	e0bffc17 	ldw	r2,-16(fp)
    89e4:	10c00804 	addi	r3,r2,32
    89e8:	e0bffc17 	ldw	r2,-16(fp)
    89ec:	19803fcc 	andi	r6,r3,255
    89f0:	11000243 	ldbu	r4,9(r2)
    89f4:	2008703a 	and	r4,r4,zero
    89f8:	200b883a 	mov	r5,r4
    89fc:	3009883a 	mov	r4,r6
    8a00:	2908b03a 	or	r4,r5,r4
    8a04:	11000245 	stb	r4,9(r2)
    8a08:	1808d23a 	srli	r4,r3,8
    8a0c:	21803fcc 	andi	r6,r4,255
    8a10:	11000283 	ldbu	r4,10(r2)
    8a14:	2008703a 	and	r4,r4,zero
    8a18:	200b883a 	mov	r5,r4
    8a1c:	3009883a 	mov	r4,r6
    8a20:	2908b03a 	or	r4,r5,r4
    8a24:	11000285 	stb	r4,10(r2)
    8a28:	1808d43a 	srli	r4,r3,16
    8a2c:	21803fcc 	andi	r6,r4,255
    8a30:	110002c3 	ldbu	r4,11(r2)
    8a34:	2008703a 	and	r4,r4,zero
    8a38:	200b883a 	mov	r5,r4
    8a3c:	3009883a 	mov	r4,r6
    8a40:	2908b03a 	or	r4,r5,r4
    8a44:	110002c5 	stb	r4,11(r2)
    8a48:	180ad63a 	srli	r5,r3,24
    8a4c:	10c00303 	ldbu	r3,12(r2)
    8a50:	1806703a 	and	r3,r3,zero
    8a54:	1809883a 	mov	r4,r3
    8a58:	2807883a 	mov	r3,r5
    8a5c:	20c6b03a 	or	r3,r4,r3
    8a60:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8a64:	e0bffc17 	ldw	r2,-16(fp)
    8a68:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8a6c:	00800044 	movi	r2,1
}
    8a70:	e037883a 	mov	sp,fp
    8a74:	dfc00117 	ldw	ra,4(sp)
    8a78:	df000017 	ldw	fp,0(sp)
    8a7c:	dec00204 	addi	sp,sp,8
    8a80:	f800283a 	ret

00008a84 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8a84:	defff904 	addi	sp,sp,-28
    8a88:	df000615 	stw	fp,24(sp)
    8a8c:	df000604 	addi	fp,sp,24
    8a90:	e13ffb15 	stw	r4,-20(fp)
    8a94:	3009883a 	mov	r4,r6
    8a98:	3807883a 	mov	r3,r7
    8a9c:	e0800117 	ldw	r2,4(fp)
    8aa0:	e17ffc05 	stb	r5,-16(fp)
    8aa4:	e13ffd05 	stb	r4,-12(fp)
    8aa8:	e0fffe05 	stb	r3,-8(fp)
    8aac:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8ab0:	e0800217 	ldw	r2,8(fp)
    8ab4:	10c000c3 	ldbu	r3,3(r2)
    8ab8:	e0bffb17 	ldw	r2,-20(fp)
    8abc:	10800483 	ldbu	r2,18(r2)
    8ac0:	1884703a 	and	r2,r3,r2
    8ac4:	10803fcc 	andi	r2,r2,255
    8ac8:	10800098 	cmpnei	r2,r2,2
    8acc:	10001f1e 	bne	r2,zero,8b4c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8ad0:	e0800217 	ldw	r2,8(fp)
    8ad4:	10800083 	ldbu	r2,2(r2)
    8ad8:	10803fcc 	andi	r2,r2,255
    8adc:	1080201c 	xori	r2,r2,128
    8ae0:	10bfe004 	addi	r2,r2,-128
    8ae4:	1000020e 	bge	r2,zero,8af0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8ae8:	00800044 	movi	r2,1
    8aec:	00000106 	br	8af4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8af0:	00800084 	movi	r2,2
    8af4:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8af8:	e0fffa03 	ldbu	r3,-24(fp)
    8afc:	e0800217 	ldw	r2,8(fp)
    8b00:	10800083 	ldbu	r2,2(r2)
    8b04:	108003cc 	andi	r2,r2,15
    8b08:	100b883a 	mov	r5,r2
    8b0c:	e13ffb17 	ldw	r4,-20(fp)
    8b10:	1805883a 	mov	r2,r3
    8b14:	1085883a 	add	r2,r2,r2
    8b18:	10c5883a 	add	r2,r2,r3
    8b1c:	2085883a 	add	r2,r4,r2
    8b20:	108004c4 	addi	r2,r2,19
    8b24:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    8b28:	e0800217 	ldw	r2,8(fp)
    8b2c:	10c00103 	ldbu	r3,4(r2)
    8b30:	10800143 	ldbu	r2,5(r2)
    8b34:	1004923a 	slli	r2,r2,8
    8b38:	10c4b03a 	or	r2,r2,r3
    8b3c:	10bfffcc 	andi	r2,r2,65535
    8b40:	10801070 	cmpltui	r2,r2,65
    8b44:	10000d1e 	bne	r2,zero,8b7c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    8b48:	00000206 	br	8b54 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    8b4c:	0005883a 	mov	r2,zero
    8b50:	00001906 	br	8bb8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    8b54:	e0fffa03 	ldbu	r3,-24(fp)
    8b58:	e13ffb17 	ldw	r4,-20(fp)
    8b5c:	1805883a 	mov	r2,r3
    8b60:	1085883a 	add	r2,r2,r2
    8b64:	10c5883a 	add	r2,r2,r3
    8b68:	2085883a 	add	r2,r4,r2
    8b6c:	10800504 	addi	r2,r2,20
    8b70:	00c01004 	movi	r3,64
    8b74:	10c00005 	stb	r3,0(r2)
    8b78:	00000e06 	br	8bb4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    8b7c:	e0fffa03 	ldbu	r3,-24(fp)
    8b80:	e0800217 	ldw	r2,8(fp)
    8b84:	11000103 	ldbu	r4,4(r2)
    8b88:	10800143 	ldbu	r2,5(r2)
    8b8c:	1004923a 	slli	r2,r2,8
    8b90:	1104b03a 	or	r2,r2,r4
    8b94:	100b883a 	mov	r5,r2
    8b98:	e13ffb17 	ldw	r4,-20(fp)
    8b9c:	1805883a 	mov	r2,r3
    8ba0:	1085883a 	add	r2,r2,r2
    8ba4:	10c5883a 	add	r2,r2,r3
    8ba8:	2085883a 	add	r2,r4,r2
    8bac:	10800504 	addi	r2,r2,20
    8bb0:	11400005 	stb	r5,0(r2)
        }

        return true;
    8bb4:	00800044 	movi	r2,1
}
    8bb8:	e037883a 	mov	sp,fp
    8bbc:	df000017 	ldw	fp,0(sp)
    8bc0:	dec00104 	addi	sp,sp,4
    8bc4:	f800283a 	ret

00008bc8 <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    8bc8:	213fff04 	addi	r4,r4,-4
    8bcc:	0008a841 	jmpi	8a84 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00008bd0 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    8bd0:	defffa04 	addi	sp,sp,-24
    8bd4:	df000515 	stw	fp,20(sp)
    8bd8:	df000504 	addi	fp,sp,20
    8bdc:	e13ffb15 	stw	r4,-20(fp)
    8be0:	3009883a 	mov	r4,r6
    8be4:	3807883a 	mov	r3,r7
    8be8:	e0800117 	ldw	r2,4(fp)
    8bec:	e17ffc05 	stb	r5,-16(fp)
    8bf0:	e13ffd05 	stb	r4,-12(fp)
    8bf4:	e0fffe05 	stb	r3,-8(fp)
    8bf8:	e0bfff05 	stb	r2,-4(fp)
                return true;
    8bfc:	00800044 	movi	r2,1
        };
    8c00:	e037883a 	mov	sp,fp
    8c04:	df000017 	ldw	fp,0(sp)
    8c08:	dec00104 	addi	sp,sp,4
    8c0c:	f800283a 	ret

00008c10 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    8c10:	defffe04 	addi	sp,sp,-8
    8c14:	df000115 	stw	fp,4(sp)
    8c18:	df000104 	addi	fp,sp,4
    8c1c:	e13fff15 	stw	r4,-4(fp)
    8c20:	e0bfff17 	ldw	r2,-4(fp)
    8c24:	10800d83 	ldbu	r2,54(r2)
    8c28:	e037883a 	mov	sp,fp
    8c2c:	df000017 	ldw	fp,0(sp)
    8c30:	dec00104 	addi	sp,sp,4
    8c34:	f800283a 	ret

00008c38 <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    8c38:	defffe04 	addi	sp,sp,-8
    8c3c:	df000115 	stw	fp,4(sp)
    8c40:	df000104 	addi	fp,sp,4
    8c44:	e13fff15 	stw	r4,-4(fp)
    8c48:	e0bfff17 	ldw	r2,-4(fp)
    8c4c:	10800cc3 	ldbu	r2,51(r2)
    8c50:	e037883a 	mov	sp,fp
    8c54:	df000017 	ldw	fp,0(sp)
    8c58:	dec00104 	addi	sp,sp,4
    8c5c:	f800283a 	ret

00008c60 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    8c60:	defffd04 	addi	sp,sp,-12
    8c64:	df000215 	stw	fp,8(sp)
    8c68:	df000204 	addi	fp,sp,8
    8c6c:	e13ffe15 	stw	r4,-8(fp)
    8c70:	2805883a 	mov	r2,r5
    8c74:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    8c78:	e0bfff03 	ldbu	r2,-4(fp)
    8c7c:	10803c28 	cmpgeui	r2,r2,240
    8c80:	1000031e 	bne	r2,zero,8c90 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    8c84:	e0bfff03 	ldbu	r2,-4(fp)
    8c88:	1004d13a 	srli	r2,r2,4
    8c8c:	00000606 	br	8ca8 <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    8c90:	e0bfff03 	ldbu	r2,-4(fp)
    8c94:	10c003cc 	andi	r3,r2,15
    8c98:	008000b4 	movhi	r2,2
    8c9c:	10981b84 	addi	r2,r2,24686
    8ca0:	1885883a 	add	r2,r3,r2
    8ca4:	10800003 	ldbu	r2,0(r2)
        };
    8ca8:	e037883a 	mov	sp,fp
    8cac:	df000017 	ldw	fp,0(sp)
    8cb0:	dec00104 	addi	sp,sp,4
    8cb4:	f800283a 	ret

00008cb8 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    8cb8:	defffd04 	addi	sp,sp,-12
    8cbc:	df000215 	stw	fp,8(sp)
    8cc0:	df000204 	addi	fp,sp,8
    8cc4:	e13ffe15 	stw	r4,-8(fp)
    8cc8:	2805883a 	mov	r2,r5
    8ccc:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    8cd0:	e0ffff03 	ldbu	r3,-4(fp)
    8cd4:	008000b4 	movhi	r2,2
    8cd8:	10981784 	addi	r2,r2,24670
    8cdc:	1885883a 	add	r2,r3,r2
    8ce0:	10800003 	ldbu	r2,0(r2)
        };
    8ce4:	e037883a 	mov	sp,fp
    8ce8:	df000017 	ldw	fp,0(sp)
    8cec:	dec00104 	addi	sp,sp,4
    8cf0:	f800283a 	ret

00008cf4 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    8cf4:	defffe04 	addi	sp,sp,-8
    8cf8:	df000115 	stw	fp,4(sp)
    8cfc:	df000104 	addi	fp,sp,4
    8d00:	e13fff15 	stw	r4,-4(fp)
    8d04:	e0bfff17 	ldw	r2,-4(fp)
    8d08:	10800303 	ldbu	r2,12(r2)
    8d0c:	e037883a 	mov	sp,fp
    8d10:	df000017 	ldw	fp,0(sp)
    8d14:	dec00104 	addi	sp,sp,4
    8d18:	f800283a 	ret

00008d1c <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    8d1c:	defffe04 	addi	sp,sp,-8
    8d20:	df000115 	stw	fp,4(sp)
    8d24:	df000104 	addi	fp,sp,4
    8d28:	e13fff15 	stw	r4,-4(fp)
    8d2c:	008000b4 	movhi	r2,2
    8d30:	10983404 	addi	r2,r2,24784
    8d34:	e0ffff17 	ldw	r3,-4(fp)
    8d38:	18800015 	stw	r2,0(r3)
    8d3c:	0001883a 	nop
    8d40:	e037883a 	mov	sp,fp
    8d44:	df000017 	ldw	fp,0(sp)
    8d48:	dec00104 	addi	sp,sp,4
    8d4c:	f800283a 	ret

00008d50 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    8d50:	defffd04 	addi	sp,sp,-12
    8d54:	df000215 	stw	fp,8(sp)
    8d58:	df000204 	addi	fp,sp,8
    8d5c:	2005883a 	mov	r2,r4
    8d60:	e17fff15 	stw	r5,-4(fp)
    8d64:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    8d68:	0001883a 	nop
    8d6c:	e037883a 	mov	sp,fp
    8d70:	df000017 	ldw	fp,0(sp)
    8d74:	dec00104 	addi	sp,sp,4
    8d78:	f800283a 	ret

00008d7c <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    8d7c:	deffe204 	addi	sp,sp,-120
    8d80:	dfc01d15 	stw	ra,116(sp)
    8d84:	df001c15 	stw	fp,112(sp)
    8d88:	df001c04 	addi	fp,sp,112
    8d8c:	e13ffd15 	stw	r4,-12(fp)
    8d90:	2805883a 	mov	r2,r5
    8d94:	e1bfff15 	stw	r6,-4(fp)
    8d98:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    8d9c:	00801004 	movi	r2,64
    8da0:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    8da4:	e0bffd17 	ldw	r2,-12(fp)
    8da8:	11000217 	ldw	r4,8(r2)
    8dac:	e0bffd17 	ldw	r2,-12(fp)
    8db0:	10800303 	ldbu	r2,12(r2)
    8db4:	11403fcc 	andi	r5,r2,255
    8db8:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    8dbc:	e0ffff17 	ldw	r3,-4(fp)
    8dc0:	d8c00715 	stw	r3,28(sp)
    8dc4:	e0ffec84 	addi	r3,fp,-78
    8dc8:	d8c00615 	stw	r3,24(sp)
    8dcc:	00c01004 	movi	r3,64
    8dd0:	d8c00515 	stw	r3,20(sp)
    8dd4:	00c02004 	movi	r3,128
    8dd8:	d8c00415 	stw	r3,16(sp)
    8ddc:	d8800315 	stw	r2,12(sp)
    8de0:	00800884 	movi	r2,34
    8de4:	d8800215 	stw	r2,8(sp)
    8de8:	d8000115 	stw	zero,4(sp)
    8dec:	00800184 	movi	r2,6
    8df0:	d8800015 	stw	r2,0(sp)
    8df4:	01c02044 	movi	r7,129
    8df8:	000d883a 	mov	r6,zero
    8dfc:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    8e00:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    8e04:	e0bfec43 	ldbu	r2,-79(fp)
}
    8e08:	e037883a 	mov	sp,fp
    8e0c:	dfc00117 	ldw	ra,4(sp)
    8e10:	df000017 	ldw	fp,0(sp)
    8e14:	dec00204 	addi	sp,sp,8
    8e18:	f800283a 	ret

00008e1c <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8e1c:	defff004 	addi	sp,sp,-64
    8e20:	dfc00f15 	stw	ra,60(sp)
    8e24:	df000e15 	stw	fp,56(sp)
    8e28:	df000e04 	addi	fp,sp,56
    8e2c:	e13ffa15 	stw	r4,-24(fp)
    8e30:	2811883a 	mov	r8,r5
    8e34:	300b883a 	mov	r5,r6
    8e38:	3809883a 	mov	r4,r7
    8e3c:	e0c00217 	ldw	r3,8(fp)
    8e40:	e0800317 	ldw	r2,12(fp)
    8e44:	e23ffb05 	stb	r8,-20(fp)
    8e48:	e17ffc05 	stb	r5,-16(fp)
    8e4c:	e13ffd05 	stb	r4,-12(fp)
    8e50:	e0fffe05 	stb	r3,-8(fp)
    8e54:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8e58:	e0bffa17 	ldw	r2,-24(fp)
    8e5c:	12000217 	ldw	r8,8(r2)
    8e60:	e0bffa17 	ldw	r2,-24(fp)
    8e64:	10800303 	ldbu	r2,12(r2)
    8e68:	12403fcc 	andi	r9,r2,255
    8e6c:	e2bffb03 	ldbu	r10,-20(fp)
    8e70:	e0bffe03 	ldbu	r2,-8(fp)
    8e74:	e0fffd03 	ldbu	r3,-12(fp)
    8e78:	e13ffc03 	ldbu	r4,-16(fp)
    8e7c:	e17fff0b 	ldhu	r5,-4(fp)
    8e80:	e1bfff0b 	ldhu	r6,-4(fp)
    8e84:	d8000715 	stw	zero,28(sp)
    8e88:	e1c00417 	ldw	r7,16(fp)
    8e8c:	d9c00615 	stw	r7,24(sp)
    8e90:	d9800515 	stw	r6,20(sp)
    8e94:	d9400415 	stw	r5,16(sp)
    8e98:	d9000315 	stw	r4,12(sp)
    8e9c:	d8c00215 	stw	r3,8(sp)
    8ea0:	d8800115 	stw	r2,4(sp)
    8ea4:	00800244 	movi	r2,9
    8ea8:	d8800015 	stw	r2,0(sp)
    8eac:	01c00844 	movi	r7,33
    8eb0:	500d883a 	mov	r6,r10
    8eb4:	480b883a 	mov	r5,r9
    8eb8:	4009883a 	mov	r4,r8
    8ebc:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8ec0:	e037883a 	mov	sp,fp
    8ec4:	dfc00117 	ldw	ra,4(sp)
    8ec8:	df000017 	ldw	fp,0(sp)
    8ecc:	dec00204 	addi	sp,sp,8
    8ed0:	f800283a 	ret

00008ed4 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8ed4:	defff004 	addi	sp,sp,-64
    8ed8:	dfc00f15 	stw	ra,60(sp)
    8edc:	df000e15 	stw	fp,56(sp)
    8ee0:	df000e04 	addi	fp,sp,56
    8ee4:	e13ffa15 	stw	r4,-24(fp)
    8ee8:	2811883a 	mov	r8,r5
    8eec:	300b883a 	mov	r5,r6
    8ef0:	3809883a 	mov	r4,r7
    8ef4:	e0c00217 	ldw	r3,8(fp)
    8ef8:	e0800317 	ldw	r2,12(fp)
    8efc:	e23ffb05 	stb	r8,-20(fp)
    8f00:	e17ffc05 	stb	r5,-16(fp)
    8f04:	e13ffd05 	stb	r4,-12(fp)
    8f08:	e0fffe05 	stb	r3,-8(fp)
    8f0c:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8f10:	e0bffa17 	ldw	r2,-24(fp)
    8f14:	12000217 	ldw	r8,8(r2)
    8f18:	e0bffa17 	ldw	r2,-24(fp)
    8f1c:	10800303 	ldbu	r2,12(r2)
    8f20:	12403fcc 	andi	r9,r2,255
    8f24:	e2bffb03 	ldbu	r10,-20(fp)
    8f28:	e0bffe03 	ldbu	r2,-8(fp)
    8f2c:	e0fffd03 	ldbu	r3,-12(fp)
    8f30:	e13ffc03 	ldbu	r4,-16(fp)
    8f34:	e17fff0b 	ldhu	r5,-4(fp)
    8f38:	e1bfff0b 	ldhu	r6,-4(fp)
    8f3c:	d8000715 	stw	zero,28(sp)
    8f40:	e1c00417 	ldw	r7,16(fp)
    8f44:	d9c00615 	stw	r7,24(sp)
    8f48:	d9800515 	stw	r6,20(sp)
    8f4c:	d9400415 	stw	r5,16(sp)
    8f50:	d9000315 	stw	r4,12(sp)
    8f54:	d8c00215 	stw	r3,8(sp)
    8f58:	d8800115 	stw	r2,4(sp)
    8f5c:	00800044 	movi	r2,1
    8f60:	d8800015 	stw	r2,0(sp)
    8f64:	01c02844 	movi	r7,161
    8f68:	500d883a 	mov	r6,r10
    8f6c:	480b883a 	mov	r5,r9
    8f70:	4009883a 	mov	r4,r8
    8f74:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8f78:	e037883a 	mov	sp,fp
    8f7c:	dfc00117 	ldw	ra,4(sp)
    8f80:	df000017 	ldw	fp,0(sp)
    8f84:	dec00204 	addi	sp,sp,8
    8f88:	f800283a 	ret

00008f8c <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    8f8c:	defff204 	addi	sp,sp,-56
    8f90:	dfc00d15 	stw	ra,52(sp)
    8f94:	df000c15 	stw	fp,48(sp)
    8f98:	df000c04 	addi	fp,sp,48
    8f9c:	e13ffc15 	stw	r4,-16(fp)
    8fa0:	2807883a 	mov	r3,r5
    8fa4:	3005883a 	mov	r2,r6
    8fa8:	e1ffff15 	stw	r7,-4(fp)
    8fac:	e0fffd05 	stb	r3,-12(fp)
    8fb0:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    8fb4:	e0bffc17 	ldw	r2,-16(fp)
    8fb8:	12000217 	ldw	r8,8(r2)
    8fbc:	e0bffc17 	ldw	r2,-16(fp)
    8fc0:	10800303 	ldbu	r2,12(r2)
    8fc4:	11403fcc 	andi	r5,r2,255
    8fc8:	e0bffe03 	ldbu	r2,-8(fp)
    8fcc:	e0fffd03 	ldbu	r3,-12(fp)
    8fd0:	d8000715 	stw	zero,28(sp)
    8fd4:	e13fff17 	ldw	r4,-4(fp)
    8fd8:	d9000615 	stw	r4,24(sp)
    8fdc:	01000044 	movi	r4,1
    8fe0:	d9000515 	stw	r4,20(sp)
    8fe4:	01000044 	movi	r4,1
    8fe8:	d9000415 	stw	r4,16(sp)
    8fec:	d8c00315 	stw	r3,12(sp)
    8ff0:	d8000215 	stw	zero,8(sp)
    8ff4:	d8800115 	stw	r2,4(sp)
    8ff8:	00800084 	movi	r2,2
    8ffc:	d8800015 	stw	r2,0(sp)
    9000:	01c02844 	movi	r7,161
    9004:	000d883a 	mov	r6,zero
    9008:	4009883a 	mov	r4,r8
    900c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9010:	e037883a 	mov	sp,fp
    9014:	dfc00117 	ldw	ra,4(sp)
    9018:	df000017 	ldw	fp,0(sp)
    901c:	dec00204 	addi	sp,sp,8
    9020:	f800283a 	ret

00009024 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    9024:	defff204 	addi	sp,sp,-56
    9028:	dfc00d15 	stw	ra,52(sp)
    902c:	df000c15 	stw	fp,48(sp)
    9030:	df000c04 	addi	fp,sp,48
    9034:	e13ffc15 	stw	r4,-16(fp)
    9038:	2809883a 	mov	r4,r5
    903c:	3007883a 	mov	r3,r6
    9040:	3805883a 	mov	r2,r7
    9044:	e13ffd05 	stb	r4,-12(fp)
    9048:	e0fffe05 	stb	r3,-8(fp)
    904c:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    9050:	e0bffc17 	ldw	r2,-16(fp)
    9054:	12000217 	ldw	r8,8(r2)
    9058:	e0bffc17 	ldw	r2,-16(fp)
    905c:	10800303 	ldbu	r2,12(r2)
    9060:	11403fcc 	andi	r5,r2,255
    9064:	e0bffe03 	ldbu	r2,-8(fp)
    9068:	e0ffff03 	ldbu	r3,-4(fp)
    906c:	e13ffd03 	ldbu	r4,-12(fp)
    9070:	d8000715 	stw	zero,28(sp)
    9074:	d8000615 	stw	zero,24(sp)
    9078:	d8000515 	stw	zero,20(sp)
    907c:	d8000415 	stw	zero,16(sp)
    9080:	d9000315 	stw	r4,12(sp)
    9084:	d8c00215 	stw	r3,8(sp)
    9088:	d8800115 	stw	r2,4(sp)
    908c:	00800284 	movi	r2,10
    9090:	d8800015 	stw	r2,0(sp)
    9094:	01c00844 	movi	r7,33
    9098:	000d883a 	mov	r6,zero
    909c:	4009883a 	mov	r4,r8
    90a0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    90a4:	e037883a 	mov	sp,fp
    90a8:	dfc00117 	ldw	ra,4(sp)
    90ac:	df000017 	ldw	fp,0(sp)
    90b0:	dec00204 	addi	sp,sp,8
    90b4:	f800283a 	ret

000090b8 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    90b8:	defff304 	addi	sp,sp,-52
    90bc:	dfc00c15 	stw	ra,48(sp)
    90c0:	df000b15 	stw	fp,44(sp)
    90c4:	df000b04 	addi	fp,sp,44
    90c8:	e13ffd15 	stw	r4,-12(fp)
    90cc:	2807883a 	mov	r3,r5
    90d0:	3005883a 	mov	r2,r6
    90d4:	e0fffe05 	stb	r3,-8(fp)
    90d8:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    90dc:	e0bffd17 	ldw	r2,-12(fp)
    90e0:	11000217 	ldw	r4,8(r2)
    90e4:	e0bffd17 	ldw	r2,-12(fp)
    90e8:	10800303 	ldbu	r2,12(r2)
    90ec:	11403fcc 	andi	r5,r2,255
    90f0:	e0bfff03 	ldbu	r2,-4(fp)
    90f4:	e0fffe03 	ldbu	r3,-8(fp)
    90f8:	d8000715 	stw	zero,28(sp)
    90fc:	d8000615 	stw	zero,24(sp)
    9100:	d8000515 	stw	zero,20(sp)
    9104:	d8000415 	stw	zero,16(sp)
    9108:	d8c00315 	stw	r3,12(sp)
    910c:	d8000215 	stw	zero,8(sp)
    9110:	d8800115 	stw	r2,4(sp)
    9114:	008002c4 	movi	r2,11
    9118:	d8800015 	stw	r2,0(sp)
    911c:	01c00844 	movi	r7,33
    9120:	000d883a 	mov	r6,zero
    9124:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9128:	e037883a 	mov	sp,fp
    912c:	dfc00117 	ldw	ra,4(sp)
    9130:	df000017 	ldw	fp,0(sp)
    9134:	dec00204 	addi	sp,sp,8
    9138:	f800283a 	ret

0000913c <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    913c:	defff304 	addi	sp,sp,-52
    9140:	dfc00c15 	stw	ra,48(sp)
    9144:	df000b15 	stw	fp,44(sp)
    9148:	df000b04 	addi	fp,sp,44
    914c:	e13ffd15 	stw	r4,-12(fp)
    9150:	2805883a 	mov	r2,r5
    9154:	e1bfff15 	stw	r6,-4(fp)
    9158:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    915c:	e0bffd17 	ldw	r2,-12(fp)
    9160:	11000217 	ldw	r4,8(r2)
    9164:	e0bffd17 	ldw	r2,-12(fp)
    9168:	10800303 	ldbu	r2,12(r2)
    916c:	11403fcc 	andi	r5,r2,255
    9170:	e0bffe03 	ldbu	r2,-8(fp)
    9174:	d8000715 	stw	zero,28(sp)
    9178:	e0ffff17 	ldw	r3,-4(fp)
    917c:	d8c00615 	stw	r3,24(sp)
    9180:	00c00044 	movi	r3,1
    9184:	d8c00515 	stw	r3,20(sp)
    9188:	00c00044 	movi	r3,1
    918c:	d8c00415 	stw	r3,16(sp)
    9190:	d8800315 	stw	r2,12(sp)
    9194:	d8000215 	stw	zero,8(sp)
    9198:	d8000115 	stw	zero,4(sp)
    919c:	008000c4 	movi	r2,3
    91a0:	d8800015 	stw	r2,0(sp)
    91a4:	01c02844 	movi	r7,161
    91a8:	000d883a 	mov	r6,zero
    91ac:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    91b0:	e037883a 	mov	sp,fp
    91b4:	dfc00117 	ldw	ra,4(sp)
    91b8:	df000017 	ldw	fp,0(sp)
    91bc:	dec00204 	addi	sp,sp,8
    91c0:	f800283a 	ret

000091c4 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    91c4:	defffc04 	addi	sp,sp,-16
    91c8:	dfc00315 	stw	ra,12(sp)
    91cc:	df000215 	stw	fp,8(sp)
    91d0:	df000204 	addi	fp,sp,8
    91d4:	e13ffe15 	stw	r4,-8(fp)
    91d8:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    91dc:	e0bfff17 	ldw	r2,-4(fp)
    91e0:	10800003 	ldbu	r2,0(r2)
    91e4:	10803fcc 	andi	r2,r2,255
    91e8:	01402004 	movi	r5,128
    91ec:	1009883a 	mov	r4,r2
    91f0:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    91f4:	e0bfff17 	ldw	r2,-4(fp)
    91f8:	10800043 	ldbu	r2,1(r2)
    91fc:	10803fcc 	andi	r2,r2,255
    9200:	01402004 	movi	r5,128
    9204:	1009883a 	mov	r4,r2
    9208:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    920c:	e0bfff17 	ldw	r2,-4(fp)
    9210:	10800083 	ldbu	r2,2(r2)
    9214:	10803fcc 	andi	r2,r2,255
    9218:	01402004 	movi	r5,128
    921c:	1009883a 	mov	r4,r2
    9220:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    9224:	e0bfff17 	ldw	r2,-4(fp)
    9228:	108000c3 	ldbu	r2,3(r2)
    922c:	10803fcc 	andi	r2,r2,255
    9230:	01402004 	movi	r5,128
    9234:	1009883a 	mov	r4,r2
    9238:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    923c:	e0bfff17 	ldw	r2,-4(fp)
    9240:	10c00103 	ldbu	r3,4(r2)
    9244:	10800143 	ldbu	r2,5(r2)
    9248:	1004923a 	slli	r2,r2,8
    924c:	10c4b03a 	or	r2,r2,r3
    9250:	10bfffcc 	andi	r2,r2,65535
    9254:	01402004 	movi	r5,128
    9258:	1009883a 	mov	r4,r2
    925c:	0008d500 	call	8d50 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    9260:	e0bfff17 	ldw	r2,-4(fp)
    9264:	10800183 	ldbu	r2,6(r2)
    9268:	10803fcc 	andi	r2,r2,255
    926c:	01402004 	movi	r5,128
    9270:	1009883a 	mov	r4,r2
    9274:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
}
    9278:	0001883a 	nop
    927c:	e037883a 	mov	sp,fp
    9280:	dfc00117 	ldw	ra,4(sp)
    9284:	df000017 	ldw	fp,0(sp)
    9288:	dec00204 	addi	sp,sp,8
    928c:	f800283a 	ret

00009290 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    9290:	defffc04 	addi	sp,sp,-16
    9294:	dfc00315 	stw	ra,12(sp)
    9298:	df000215 	stw	fp,8(sp)
    929c:	df000204 	addi	fp,sp,8
    92a0:	e13ffe15 	stw	r4,-8(fp)
    92a4:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    92a8:	e0bfff17 	ldw	r2,-4(fp)
    92ac:	10800003 	ldbu	r2,0(r2)
    92b0:	10803fcc 	andi	r2,r2,255
    92b4:	01402004 	movi	r5,128
    92b8:	1009883a 	mov	r4,r2
    92bc:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    92c0:	e0bfff17 	ldw	r2,-4(fp)
    92c4:	10800043 	ldbu	r2,1(r2)
    92c8:	10803fcc 	andi	r2,r2,255
    92cc:	01402004 	movi	r5,128
    92d0:	1009883a 	mov	r4,r2
    92d4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    92d8:	e0bfff17 	ldw	r2,-4(fp)
    92dc:	10c00083 	ldbu	r3,2(r2)
    92e0:	108000c3 	ldbu	r2,3(r2)
    92e4:	1004923a 	slli	r2,r2,8
    92e8:	10c4b03a 	or	r2,r2,r3
    92ec:	10bfffcc 	andi	r2,r2,65535
    92f0:	01402004 	movi	r5,128
    92f4:	1009883a 	mov	r4,r2
    92f8:	0008d500 	call	8d50 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    92fc:	e0bfff17 	ldw	r2,-4(fp)
    9300:	10800103 	ldbu	r2,4(r2)
    9304:	10803fcc 	andi	r2,r2,255
    9308:	01402004 	movi	r5,128
    930c:	1009883a 	mov	r4,r2
    9310:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    9314:	e0bfff17 	ldw	r2,-4(fp)
    9318:	10800143 	ldbu	r2,5(r2)
    931c:	10803fcc 	andi	r2,r2,255
    9320:	01402004 	movi	r5,128
    9324:	1009883a 	mov	r4,r2
    9328:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    932c:	e0bfff17 	ldw	r2,-4(fp)
    9330:	10800183 	ldbu	r2,6(r2)
    9334:	10803fcc 	andi	r2,r2,255
    9338:	01402004 	movi	r5,128
    933c:	1009883a 	mov	r4,r2
    9340:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    9344:	e0bfff17 	ldw	r2,-4(fp)
    9348:	10c001c3 	ldbu	r3,7(r2)
    934c:	10800203 	ldbu	r2,8(r2)
    9350:	1004923a 	slli	r2,r2,8
    9354:	10c4b03a 	or	r2,r2,r3
    9358:	10bfffcc 	andi	r2,r2,65535
    935c:	01402004 	movi	r5,128
    9360:	1009883a 	mov	r4,r2
    9364:	0008d500 	call	8d50 <_Z10D_PrintHexItEvT_i>
}
    9368:	0001883a 	nop
    936c:	e037883a 	mov	sp,fp
    9370:	dfc00117 	ldw	ra,4(sp)
    9374:	df000017 	ldw	fp,0(sp)
    9378:	dec00204 	addi	sp,sp,8
    937c:	f800283a 	ret

00009380 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    9380:	defffd04 	addi	sp,sp,-12
    9384:	dfc00215 	stw	ra,8(sp)
    9388:	df000115 	stw	fp,4(sp)
    938c:	df000104 	addi	fp,sp,4
    9390:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    9394:	010000f4 	movhi	r4,3
    9398:	21207c04 	addi	r4,r4,-32272
    939c:	000ee1c0 	call	ee1c <puts>
	vbusState = 0;
    93a0:	d0323f45 	stb	zero,-14083(gp)
};
    93a4:	0001883a 	nop
    93a8:	e037883a 	mov	sp,fp
    93ac:	dfc00117 	ldw	ra,4(sp)
    93b0:	df000017 	ldw	fp,0(sp)
    93b4:	dec00204 	addi	sp,sp,8
    93b8:	f800283a 	ret

000093bc <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    93bc:	defffe04 	addi	sp,sp,-8
    93c0:	df000115 	stw	fp,4(sp)
    93c4:	df000104 	addi	fp,sp,4
    93c8:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    93cc:	d0b23f43 	ldbu	r2,-14083(gp)
};
    93d0:	e037883a 	mov	sp,fp
    93d4:	df000017 	ldw	fp,0(sp)
    93d8:	dec00104 	addi	sp,sp,4
    93dc:	f800283a 	ret

000093e0 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    93e0:	defff704 	addi	sp,sp,-36
    93e4:	dfc00815 	stw	ra,32(sp)
    93e8:	df000715 	stw	fp,28(sp)
    93ec:	df000704 	addi	fp,sp,28
    93f0:	e13ffd15 	stw	r4,-12(fp)
    93f4:	2807883a 	mov	r3,r5
    93f8:	3005883a 	mov	r2,r6
    93fc:	e0fffe05 	stb	r3,-8(fp)
    9400:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    9404:	e03ffc45 	stb	zero,-15(fp)
    9408:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    940c:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    9410:	e0bffe03 	ldbu	r2,-8(fp)
    9414:	10800084 	addi	r2,r2,2
    9418:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    941c:	e0bfff03 	ldbu	r2,-4(fp)
    9420:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    9424:	e0fffc44 	addi	r3,fp,-15
    9428:	d8000215 	stw	zero,8(sp)
    942c:	e0bffcc4 	addi	r2,fp,-13
    9430:	d8800115 	stw	r2,4(sp)
    9434:	d8000015 	stw	zero,0(sp)
    9438:	180f883a 	mov	r7,r3
    943c:	01800084 	movi	r6,2
    9440:	000b883a 	mov	r5,zero
    9444:	01010034 	movhi	r4,1024
    9448:	21044804 	addi	r4,r4,4384
    944c:	00220700 	call	22070 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    9450:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    9454:	0001883a 	nop
    9458:	e037883a 	mov	sp,fp
    945c:	dfc00117 	ldw	ra,4(sp)
    9460:	df000017 	ldw	fp,0(sp)
    9464:	dec00204 	addi	sp,sp,8
    9468:	f800283a 	ret

0000946c <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    946c:	defff304 	addi	sp,sp,-52
    9470:	dfc00c15 	stw	ra,48(sp)
    9474:	df000b15 	stw	fp,44(sp)
    9478:	dc000a15 	stw	r16,40(sp)
    947c:	df000b04 	addi	fp,sp,44
    9480:	e13ffb15 	stw	r4,-20(fp)
    9484:	3009883a 	mov	r4,r6
    9488:	e1fffe15 	stw	r7,-8(fp)
    948c:	e17ffc05 	stb	r5,-16(fp)
    9490:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9494:	d809883a 	mov	r4,sp
    9498:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    949c:	e13ffd03 	ldbu	r4,-12(fp)
    94a0:	e13ff815 	stw	r4,-32(fp)
    94a4:	200b883a 	mov	r5,r4
    94a8:	29400044 	addi	r5,r5,1
    94ac:	2819883a 	mov	r12,r5
    94b0:	001b883a 	mov	r13,zero
    94b4:	600ad77a 	srli	r5,r12,29
    94b8:	681290fa 	slli	r9,r13,3
    94bc:	2a52b03a 	or	r9,r5,r9
    94c0:	601090fa 	slli	r8,r12,3
    94c4:	200b883a 	mov	r5,r4
    94c8:	29400044 	addi	r5,r5,1
    94cc:	2815883a 	mov	r10,r5
    94d0:	0017883a 	mov	r11,zero
    94d4:	500ad77a 	srli	r5,r10,29
    94d8:	580690fa 	slli	r3,r11,3
    94dc:	28c6b03a 	or	r3,r5,r3
    94e0:	500490fa 	slli	r2,r10,3
    94e4:	2005883a 	mov	r2,r4
    94e8:	10800044 	addi	r2,r2,1
    94ec:	108000c4 	addi	r2,r2,3
    94f0:	1004d0ba 	srli	r2,r2,2
    94f4:	1085883a 	add	r2,r2,r2
    94f8:	1085883a 	add	r2,r2,r2
    94fc:	d8b7c83a 	sub	sp,sp,r2
    9500:	d8800304 	addi	r2,sp,12
    9504:	1005883a 	mov	r2,r2
    9508:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    950c:	e0bffc03 	ldbu	r2,-16(fp)
    9510:	10800084 	addi	r2,r2,2
    9514:	1007883a 	mov	r3,r2
    9518:	e0bff917 	ldw	r2,-28(fp)
    951c:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    9520:	e0bff917 	ldw	r2,-28(fp)
    9524:	10800044 	addi	r2,r2,1
    9528:	e0fffd03 	ldbu	r3,-12(fp)
    952c:	180d883a 	mov	r6,r3
    9530:	e17ffe17 	ldw	r5,-8(fp)
    9534:	1009883a 	mov	r4,r2
    9538:	000ea600 	call	ea60 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    953c:	e0bffd03 	ldbu	r2,-12(fp)
    9540:	10800044 	addi	r2,r2,1
    9544:	1009883a 	mov	r4,r2
    9548:	e0fff917 	ldw	r3,-28(fp)
    954c:	d8000215 	stw	zero,8(sp)
    9550:	e0bffa44 	addi	r2,fp,-23
    9554:	d8800115 	stw	r2,4(sp)
    9558:	d8000015 	stw	zero,0(sp)
    955c:	180f883a 	mov	r7,r3
    9560:	200d883a 	mov	r6,r4
    9564:	000b883a 	mov	r5,zero
    9568:	01010034 	movhi	r4,1024
    956c:	21044804 	addi	r4,r4,4384
    9570:	00220700 	call	22070 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    9574:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9578:	e0bffd03 	ldbu	r2,-12(fp)
    957c:	e0fffe17 	ldw	r3,-8(fp)
    9580:	1885883a 	add	r2,r3,r2
    9584:	8037883a 	mov	sp,r16
}
    9588:	e6ffff04 	addi	sp,fp,-4
    958c:	dfc00217 	ldw	ra,8(sp)
    9590:	df000117 	ldw	fp,4(sp)
    9594:	dc000017 	ldw	r16,0(sp)
    9598:	dec00304 	addi	sp,sp,12
    959c:	f800283a 	ret

000095a0 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    95a0:	defffc04 	addi	sp,sp,-16
    95a4:	dfc00315 	stw	ra,12(sp)
    95a8:	df000215 	stw	fp,8(sp)
    95ac:	df000204 	addi	fp,sp,8
    95b0:	e13ffe15 	stw	r4,-8(fp)
    95b4:	2805883a 	mov	r2,r5
    95b8:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    95bc:	010000f4 	movhi	r4,3
    95c0:	21208204 	addi	r4,r4,-32248
    95c4:	000ee1c0 	call	ee1c <puts>
	regWr(rIOPINS1, data);
    95c8:	e0bfff03 	ldbu	r2,-4(fp)
    95cc:	100d883a 	mov	r6,r2
    95d0:	01402804 	movi	r5,160
    95d4:	e13ffe17 	ldw	r4,-8(fp)
    95d8:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    95dc:	e0bfff03 	ldbu	r2,-4(fp)
    95e0:	1005d13a 	srai	r2,r2,4
    95e4:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    95e8:	e0bfff03 	ldbu	r2,-4(fp)
    95ec:	100d883a 	mov	r6,r2
    95f0:	01402a04 	movi	r5,168
    95f4:	e13ffe17 	ldw	r4,-8(fp)
    95f8:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
	return;
    95fc:	0001883a 	nop
}
    9600:	e037883a 	mov	sp,fp
    9604:	dfc00117 	ldw	ra,4(sp)
    9608:	df000017 	ldw	fp,0(sp)
    960c:	dec00204 	addi	sp,sp,8
    9610:	f800283a 	ret

00009614 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    9614:	defff804 	addi	sp,sp,-32
    9618:	dfc00715 	stw	ra,28(sp)
    961c:	df000615 	stw	fp,24(sp)
    9620:	df000604 	addi	fp,sp,24
    9624:	e13ffe15 	stw	r4,-8(fp)
    9628:	2805883a 	mov	r2,r5
    962c:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9630:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9634:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9638:	e0bfff03 	ldbu	r2,-4(fp)
    963c:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9640:	e0fffd44 	addi	r3,fp,-11
    9644:	d8000215 	stw	zero,8(sp)
    9648:	e0bffd84 	addi	r2,fp,-10
    964c:	d8800115 	stw	r2,4(sp)
    9650:	00800044 	movi	r2,1
    9654:	d8800015 	stw	r2,0(sp)
    9658:	180f883a 	mov	r7,r3
    965c:	01800044 	movi	r6,1
    9660:	000b883a 	mov	r5,zero
    9664:	01010034 	movhi	r4,1024
    9668:	21044804 	addi	r4,r4,4384
    966c:	00220700 	call	22070 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    9670:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    9674:	e0bffd83 	ldbu	r2,-10(fp)
}
    9678:	e037883a 	mov	sp,fp
    967c:	dfc00117 	ldw	ra,4(sp)
    9680:	df000017 	ldw	fp,0(sp)
    9684:	dec00204 	addi	sp,sp,8
    9688:	f800283a 	ret

0000968c <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    968c:	defff604 	addi	sp,sp,-40
    9690:	dfc00915 	stw	ra,36(sp)
    9694:	df000815 	stw	fp,32(sp)
    9698:	df000804 	addi	fp,sp,32
    969c:	e13ffc15 	stw	r4,-16(fp)
    96a0:	2807883a 	mov	r3,r5
    96a4:	3005883a 	mov	r2,r6
    96a8:	e1ffff15 	stw	r7,-4(fp)
    96ac:	e0fffd05 	stb	r3,-12(fp)
    96b0:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    96b4:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    96b8:	e0bffd03 	ldbu	r2,-12(fp)
    96bc:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    96c0:	e0bffe03 	ldbu	r2,-8(fp)
    96c4:	e13ffb44 	addi	r4,fp,-19
    96c8:	d8000215 	stw	zero,8(sp)
    96cc:	e0ffff17 	ldw	r3,-4(fp)
    96d0:	d8c00115 	stw	r3,4(sp)
    96d4:	d8800015 	stw	r2,0(sp)
    96d8:	200f883a 	mov	r7,r4
    96dc:	01800044 	movi	r6,1
    96e0:	000b883a 	mov	r5,zero
    96e4:	01010034 	movhi	r4,1024
    96e8:	21044804 	addi	r4,r4,4384
    96ec:	00220700 	call	22070 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    96f0:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    96f4:	e0bffe03 	ldbu	r2,-8(fp)
    96f8:	e0ffff17 	ldw	r3,-4(fp)
    96fc:	1885883a 	add	r2,r3,r2
}
    9700:	e037883a 	mov	sp,fp
    9704:	dfc00117 	ldw	ra,4(sp)
    9708:	df000017 	ldw	fp,0(sp)
    970c:	dec00204 	addi	sp,sp,8
    9710:	f800283a 	ret

00009714 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    9714:	defffc04 	addi	sp,sp,-16
    9718:	dfc00315 	stw	ra,12(sp)
    971c:	df000215 	stw	fp,8(sp)
    9720:	df000204 	addi	fp,sp,8
    9724:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    9728:	010000f4 	movhi	r4,3
    972c:	21208604 	addi	r4,r4,-32232
    9730:	000ee1c0 	call	ee1c <puts>
	uint8_t gpin = 0;
    9734:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    9738:	01402a04 	movi	r5,168
    973c:	e13fff17 	ldw	r4,-4(fp)
    9740:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    9744:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    9748:	e0fffe03 	ldbu	r3,-8(fp)
    974c:	00bffc04 	movi	r2,-16
    9750:	1884703a 	and	r2,r3,r2
    9754:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    9758:	01402804 	movi	r5,160
    975c:	e13fff17 	ldw	r4,-4(fp)
    9760:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    9764:	10803fcc 	andi	r2,r2,255
    9768:	1005d13a 	srai	r2,r2,4
    976c:	1007883a 	mov	r3,r2
    9770:	e0bffe03 	ldbu	r2,-8(fp)
    9774:	1884b03a 	or	r2,r3,r2
    9778:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    977c:	e0bffe03 	ldbu	r2,-8(fp)
}
    9780:	e037883a 	mov	sp,fp
    9784:	dfc00117 	ldw	ra,4(sp)
    9788:	df000017 	ldw	fp,0(sp)
    978c:	dec00204 	addi	sp,sp,8
    9790:	f800283a 	ret

00009794 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    9794:	defffc04 	addi	sp,sp,-16
    9798:	dfc00315 	stw	ra,12(sp)
    979c:	df000215 	stw	fp,8(sp)
    97a0:	df000204 	addi	fp,sp,8
    97a4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    97a8:	010000f4 	movhi	r4,3
    97ac:	21208a04 	addi	r4,r4,-32216
    97b0:	000ee1c0 	call	ee1c <puts>
	uint8_t gpout = 0;
    97b4:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    97b8:	01402804 	movi	r5,160
    97bc:	e13fff17 	ldw	r4,-4(fp)
    97c0:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    97c4:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    97c8:	e0bffe03 	ldbu	r2,-8(fp)
    97cc:	108003cc 	andi	r2,r2,15
    97d0:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    97d4:	01402a04 	movi	r5,168
    97d8:	e13fff17 	ldw	r4,-4(fp)
    97dc:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    97e0:	10803fcc 	andi	r2,r2,255
    97e4:	1004913a 	slli	r2,r2,4
    97e8:	1007883a 	mov	r3,r2
    97ec:	e0bffe03 	ldbu	r2,-8(fp)
    97f0:	1884b03a 	or	r2,r3,r2
    97f4:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    97f8:	e0bffe03 	ldbu	r2,-8(fp)
}
    97fc:	e037883a 	mov	sp,fp
    9800:	dfc00117 	ldw	ra,4(sp)
    9804:	df000017 	ldw	fp,0(sp)
    9808:	dec00204 	addi	sp,sp,8
    980c:	f800283a 	ret

00009810 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    9810:	defffc04 	addi	sp,sp,-16
    9814:	dfc00315 	stw	ra,12(sp)
    9818:	df000215 	stw	fp,8(sp)
    981c:	df000204 	addi	fp,sp,8
    9820:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    9824:	010000f4 	movhi	r4,3
    9828:	21209004 	addi	r4,r4,-32192
    982c:	000ee1c0 	call	ee1c <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    9830:	0007883a 	mov	r3,zero
    9834:	00810034 	movhi	r2,1024
    9838:	10847404 	addi	r2,r2,4560
    983c:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    9840:	010003f4 	movhi	r4,15
    9844:	21109004 	addi	r4,r4,16960
    9848:	001f7a40 	call	1f7a4 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    984c:	00c00044 	movi	r3,1
    9850:	00810034 	movhi	r2,1024
    9854:	10847404 	addi	r2,r2,4560
    9858:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    985c:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    9860:	01800804 	movi	r6,32
    9864:	01401e04 	movi	r5,120
    9868:	e13fff17 	ldw	r4,-4(fp)
    986c:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    9870:	000d883a 	mov	r6,zero
    9874:	01401e04 	movi	r5,120
    9878:	e13fff17 	ldw	r4,-4(fp)
    987c:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    9880:	e0bffe0b 	ldhu	r2,-8(fp)
    9884:	10800044 	addi	r2,r2,1
    9888:	e0bffe0d 	sth	r2,-8(fp)
    988c:	e0bffe0b 	ldhu	r2,-8(fp)
    9890:	1004c03a 	cmpne	r2,r2,zero
    9894:	10803fcc 	andi	r2,r2,255
    9898:	10000a26 	beq	r2,zero,98c4 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    989c:	01401a04 	movi	r5,104
    98a0:	e13fff17 	ldw	r4,-4(fp)
    98a4:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    98a8:	10803fcc 	andi	r2,r2,255
    98ac:	1080004c 	andi	r2,r2,1
    98b0:	1004c03a 	cmpne	r2,r2,zero
    98b4:	10803fcc 	andi	r2,r2,255
    98b8:	1000011e 	bne	r2,zero,98c0 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    98bc:	003ff006 	br	9880 <__alt_data_end+0xfc009880>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    98c0:	0001883a 	nop
		}
	}
	return ( i);
    98c4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    98c8:	e037883a 	mov	sp,fp
    98cc:	dfc00117 	ldw	ra,4(sp)
    98d0:	df000017 	ldw	fp,0(sp)
    98d4:	dec00204 	addi	sp,sp,8
    98d8:	f800283a 	ret

000098dc <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    98dc:	defffe04 	addi	sp,sp,-8
    98e0:	df000115 	stw	fp,4(sp)
    98e4:	df000104 	addi	fp,sp,4
    98e8:	2005883a 	mov	r2,r4
    98ec:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    98f0:	00800044 	movi	r2,1
}
    98f4:	e037883a 	mov	sp,fp
    98f8:	df000017 	ldw	fp,0(sp)
    98fc:	dec00104 	addi	sp,sp,4
    9900:	f800283a 	ret

00009904 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    9904:	defffd04 	addi	sp,sp,-12
    9908:	dfc00215 	stw	ra,8(sp)
    990c:	df000115 	stw	fp,4(sp)
    9910:	df000104 	addi	fp,sp,4
    9914:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    9918:	010000f4 	movhi	r4,3
    991c:	21209404 	addi	r4,r4,-32176
    9920:	000ee1c0 	call	ee1c <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9924:	01800604 	movi	r6,24
    9928:	01402204 	movi	r5,136
    992c:	e13fff17 	ldw	r4,-4(fp)
    9930:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9934:	e13fff17 	ldw	r4,-4(fp)
    9938:	00098100 	call	9810 <_ZN8MAX3421e5resetEv>
    993c:	10bfffcc 	andi	r2,r2,65535
    9940:	1005003a 	cmpeq	r2,r2,zero
    9944:	10803fcc 	andi	r2,r2,255
    9948:	10000226 	beq	r2,zero,9954 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    994c:	00bfffc4 	movi	r2,-1
    9950:	00002006 	br	99d4 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9954:	01803044 	movi	r6,193
    9958:	01403604 	movi	r5,216
    995c:	e13fff17 	ldw	r4,-4(fp)
    9960:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9964:	01801804 	movi	r6,96
    9968:	01403404 	movi	r5,208
    996c:	e13fff17 	ldw	r4,-4(fp)
    9970:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9974:	01800104 	movi	r6,4
    9978:	01403a04 	movi	r5,232
    997c:	e13fff17 	ldw	r4,-4(fp)
    9980:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9984:	01403a04 	movi	r5,232
    9988:	e13fff17 	ldw	r4,-4(fp)
    998c:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    9990:	10803fcc 	andi	r2,r2,255
    9994:	1080010c 	andi	r2,r2,4
    9998:	1005003a 	cmpeq	r2,r2,zero
    999c:	10803fcc 	andi	r2,r2,255
    99a0:	10000126 	beq	r2,zero,99a8 <_ZN8MAX3421e4InitEv+0xa4>
    99a4:	003ff706 	br	9984 <__alt_data_end+0xfc009984>

	busprobe(); //check if anything is connected
    99a8:	e13fff17 	ldw	r4,-4(fp)
    99ac:	0009b000 	call	9b00 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    99b0:	01800804 	movi	r6,32
    99b4:	01403204 	movi	r5,200
    99b8:	e13fff17 	ldw	r4,-4(fp)
    99bc:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    99c0:	01800044 	movi	r6,1
    99c4:	01402004 	movi	r5,128
    99c8:	e13fff17 	ldw	r4,-4(fp)
    99cc:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    99d0:	0005883a 	mov	r2,zero
}
    99d4:	e037883a 	mov	sp,fp
    99d8:	dfc00117 	ldw	ra,4(sp)
    99dc:	df000017 	ldw	fp,0(sp)
    99e0:	dec00204 	addi	sp,sp,8
    99e4:	f800283a 	ret

000099e8 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    99e8:	defffc04 	addi	sp,sp,-16
    99ec:	dfc00315 	stw	ra,12(sp)
    99f0:	df000215 	stw	fp,8(sp)
    99f4:	df000204 	addi	fp,sp,8
    99f8:	e13ffe15 	stw	r4,-8(fp)
    99fc:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9a00:	010000f4 	movhi	r4,3
    9a04:	21209804 	addi	r4,r4,-32160
    9a08:	000ee1c0 	call	ee1c <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9a0c:	01800644 	movi	r6,25
    9a10:	01402204 	movi	r5,136
    9a14:	e13ffe17 	ldw	r4,-8(fp)
    9a18:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9a1c:	e13ffe17 	ldw	r4,-8(fp)
    9a20:	00098100 	call	9810 <_ZN8MAX3421e5resetEv>
    9a24:	10bfffcc 	andi	r2,r2,65535
    9a28:	1005003a 	cmpeq	r2,r2,zero
    9a2c:	10803fcc 	andi	r2,r2,255
    9a30:	10000226 	beq	r2,zero,9a3c <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9a34:	00bfffc4 	movi	r2,-1
    9a38:	00002c06 	br	9aec <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9a3c:	e0bfff17 	ldw	r2,-4(fp)
    9a40:	1080fa08 	cmpgei	r2,r2,1000
    9a44:	1000021e 	bne	r2,zero,9a50 <_ZN8MAX3421e4InitEi+0x68>
    9a48:	0080fa04 	movi	r2,1000
    9a4c:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9a50:	e0bfff17 	ldw	r2,-4(fp)
    9a54:	1009883a 	mov	r4,r2
    9a58:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9a5c:	01803044 	movi	r6,193
    9a60:	01403604 	movi	r5,216
    9a64:	e13ffe17 	ldw	r4,-8(fp)
    9a68:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9a6c:	01801804 	movi	r6,96
    9a70:	01403404 	movi	r5,208
    9a74:	e13ffe17 	ldw	r4,-8(fp)
    9a78:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9a7c:	01800104 	movi	r6,4
    9a80:	01403a04 	movi	r5,232
    9a84:	e13ffe17 	ldw	r4,-8(fp)
    9a88:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9a8c:	01403a04 	movi	r5,232
    9a90:	e13ffe17 	ldw	r4,-8(fp)
    9a94:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    9a98:	10803fcc 	andi	r2,r2,255
    9a9c:	1080010c 	andi	r2,r2,4
    9aa0:	1005003a 	cmpeq	r2,r2,zero
    9aa4:	10803fcc 	andi	r2,r2,255
    9aa8:	10000126 	beq	r2,zero,9ab0 <_ZN8MAX3421e4InitEi+0xc8>
    9aac:	003ff706 	br	9a8c <__alt_data_end+0xfc009a8c>

	busprobe(); //check if anything is connected
    9ab0:	e13ffe17 	ldw	r4,-8(fp)
    9ab4:	0009b000 	call	9b00 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9ab8:	01800804 	movi	r6,32
    9abc:	01403204 	movi	r5,200
    9ac0:	e13ffe17 	ldw	r4,-8(fp)
    9ac4:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9ac8:	01800044 	movi	r6,1
    9acc:	01402004 	movi	r5,128
    9ad0:	e13ffe17 	ldw	r4,-8(fp)
    9ad4:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9ad8:	01800604 	movi	r6,24
    9adc:	01402204 	movi	r5,136
    9ae0:	e13ffe17 	ldw	r4,-8(fp)
    9ae4:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9ae8:	0005883a 	mov	r2,zero
}
    9aec:	e037883a 	mov	sp,fp
    9af0:	dfc00117 	ldw	ra,4(sp)
    9af4:	df000017 	ldw	fp,0(sp)
    9af8:	dec00204 	addi	sp,sp,8
    9afc:	f800283a 	ret

00009b00 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9b00:	defffc04 	addi	sp,sp,-16
    9b04:	dfc00315 	stw	ra,12(sp)
    9b08:	df000215 	stw	fp,8(sp)
    9b0c:	df000204 	addi	fp,sp,8
    9b10:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9b14:	010000f4 	movhi	r4,3
    9b18:	21209e04 	addi	r4,r4,-32136
    9b1c:	000ee1c0 	call	ee1c <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9b20:	01403e04 	movi	r5,248
    9b24:	e13fff17 	ldw	r4,-4(fp)
    9b28:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    9b2c:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    9b30:	e0fffe03 	ldbu	r3,-8(fp)
    9b34:	00bff004 	movi	r2,-64
    9b38:	1884703a 	and	r2,r3,r2
    9b3c:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    9b40:	e0bffe03 	ldbu	r2,-8(fp)
    9b44:	10c01020 	cmpeqi	r3,r2,64
    9b48:	1800251e 	bne	r3,zero,9be0 <_ZN8MAX3421e8busprobeEv+0xe0>
    9b4c:	10c01048 	cmpgei	r3,r2,65
    9b50:	1800021e 	bne	r3,zero,9b5c <_ZN8MAX3421e8busprobeEv+0x5c>
    9b54:	10003b26 	beq	r2,zero,9c44 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9b58:	00004006 	br	9c5c <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    9b5c:	10c02020 	cmpeqi	r3,r2,128
    9b60:	1800031e 	bne	r3,zero,9b70 <_ZN8MAX3421e8busprobeEv+0x70>
    9b64:	10803020 	cmpeqi	r2,r2,192
    9b68:	1000331e 	bne	r2,zero,9c38 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9b6c:	00003b06 	br	9c5c <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9b70:	01403604 	movi	r5,216
    9b74:	e13fff17 	ldw	r4,-4(fp)
    9b78:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    9b7c:	10803fcc 	andi	r2,r2,255
    9b80:	1080008c 	andi	r2,r2,2
    9b84:	1005003a 	cmpeq	r2,r2,zero
    9b88:	10803fcc 	andi	r2,r2,255
    9b8c:	10000a26 	beq	r2,zero,9bb8 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    9b90:	010000f4 	movhi	r4,3
    9b94:	2120a304 	addi	r4,r4,-32116
    9b98:	000ee1c0 	call	ee1c <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9b9c:	01803244 	movi	r6,201
    9ba0:	01403604 	movi	r5,216
    9ba4:	e13fff17 	ldw	r4,-4(fp)
    9ba8:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9bac:	00800084 	movi	r2,2
    9bb0:	d0b23f45 	stb	r2,-14083(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    9bb4:	00002906 	br	9c5c <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    9bb8:	010000f4 	movhi	r4,3
    9bbc:	2120aa04 	addi	r4,r4,-32088
    9bc0:	000ee1c0 	call	ee1c <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9bc4:	018032c4 	movi	r6,203
    9bc8:	01403604 	movi	r5,216
    9bcc:	e13fff17 	ldw	r4,-4(fp)
    9bd0:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9bd4:	008000c4 	movi	r2,3
    9bd8:	d0b23f45 	stb	r2,-14083(gp)
			}
			break;
    9bdc:	00001f06 	br	9c5c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9be0:	01403604 	movi	r5,216
    9be4:	e13fff17 	ldw	r4,-4(fp)
    9be8:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    9bec:	10803fcc 	andi	r2,r2,255
    9bf0:	1080008c 	andi	r2,r2,2
    9bf4:	1005003a 	cmpeq	r2,r2,zero
    9bf8:	10803fcc 	andi	r2,r2,255
    9bfc:	10000726 	beq	r2,zero,9c1c <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9c00:	018032c4 	movi	r6,203
    9c04:	01403604 	movi	r5,216
    9c08:	e13fff17 	ldw	r4,-4(fp)
    9c0c:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9c10:	008000c4 	movi	r2,3
    9c14:	d0b23f45 	stb	r2,-14083(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    9c18:	00001006 	br	9c5c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9c1c:	01803244 	movi	r6,201
    9c20:	01403604 	movi	r5,216
    9c24:	e13fff17 	ldw	r4,-4(fp)
    9c28:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9c2c:	00800084 	movi	r2,2
    9c30:	d0b23f45 	stb	r2,-14083(gp)
			}
			break;
    9c34:	00000906 	br	9c5c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    9c38:	00800044 	movi	r2,1
    9c3c:	d0b23f45 	stb	r2,-14083(gp)
			break;
    9c40:	00000606 	br	9c5c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    9c44:	01803444 	movi	r6,209
    9c48:	01403604 	movi	r5,216
    9c4c:	e13fff17 	ldw	r4,-4(fp)
    9c50:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    9c54:	d0323f45 	stb	zero,-14083(gp)
			break;
    9c58:	0001883a 	nop
	}//end switch( bus_sample )
}
    9c5c:	0001883a 	nop
    9c60:	e037883a 	mov	sp,fp
    9c64:	dfc00117 	ldw	ra,4(sp)
    9c68:	df000017 	ldw	fp,0(sp)
    9c6c:	dec00204 	addi	sp,sp,8
    9c70:	f800283a 	ret

00009c74 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    9c74:	defffc04 	addi	sp,sp,-16
    9c78:	dfc00315 	stw	ra,12(sp)
    9c7c:	df000215 	stw	fp,8(sp)
    9c80:	df000204 	addi	fp,sp,8
    9c84:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    9c88:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    9c8c:	00810034 	movhi	r2,1024
    9c90:	10847c04 	addi	r2,r2,4592
    9c94:	10800003 	ldbu	r2,0(r2)
    9c98:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    9c9c:	00810034 	movhi	r2,1024
    9ca0:	10847c04 	addi	r2,r2,4592
    9ca4:	10800037 	ldwio	r2,0(r2)
    9ca8:	1005003a 	cmpeq	r2,r2,zero
    9cac:	10803fcc 	andi	r2,r2,255
    9cb0:	10000326 	beq	r2,zero,9cc0 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    9cb4:	e13fff17 	ldw	r4,-4(fp)
    9cb8:	0009cd80 	call	9cd8 <_ZN8MAX3421e10IntHandlerEv>
    9cbc:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    9cc0:	e0bffe03 	ldbu	r2,-8(fp)
}
    9cc4:	e037883a 	mov	sp,fp
    9cc8:	dfc00117 	ldw	ra,4(sp)
    9ccc:	df000017 	ldw	fp,0(sp)
    9cd0:	dec00204 	addi	sp,sp,8
    9cd4:	f800283a 	ret

00009cd8 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    9cd8:	defffc04 	addi	sp,sp,-16
    9cdc:	dfc00315 	stw	ra,12(sp)
    9ce0:	df000215 	stw	fp,8(sp)
    9ce4:	df000204 	addi	fp,sp,8
    9ce8:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    9cec:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    9cf0:	01403204 	movi	r5,200
    9cf4:	e13fff17 	ldw	r4,-4(fp)
    9cf8:	00096140 	call	9614 <_ZN8MAX3421e5regRdEh>
    9cfc:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    9d00:	e0bffe43 	ldbu	r2,-7(fp)
    9d04:	1080080c 	andi	r2,r2,32
    9d08:	10000526 	beq	r2,zero,9d20 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    9d0c:	e13fff17 	ldw	r4,-4(fp)
    9d10:	0009b000 	call	9b00 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    9d14:	e0bffe03 	ldbu	r2,-8(fp)
    9d18:	10800814 	ori	r2,r2,32
    9d1c:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    9d20:	e0bffe03 	ldbu	r2,-8(fp)
    9d24:	100d883a 	mov	r6,r2
    9d28:	01403204 	movi	r5,200
    9d2c:	e13fff17 	ldw	r4,-4(fp)
    9d30:	00093e00 	call	93e0 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    9d34:	e0bffe03 	ldbu	r2,-8(fp)
}
    9d38:	e037883a 	mov	sp,fp
    9d3c:	dfc00117 	ldw	ra,4(sp)
    9d40:	df000017 	ldw	fp,0(sp)
    9d44:	dec00204 	addi	sp,sp,8
    9d48:	f800283a 	ret

00009d4c <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    9d4c:	defffe04 	addi	sp,sp,-8
    9d50:	df000115 	stw	fp,4(sp)
    9d54:	df000104 	addi	fp,sp,4
    9d58:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    9d5c:	0005883a 	mov	r2,zero
}
    9d60:	e037883a 	mov	sp,fp
    9d64:	df000017 	ldw	fp,0(sp)
    9d68:	dec00104 	addi	sp,sp,4
    9d6c:	f800283a 	ret

00009d70 <_Z6onInitv>:
ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure

void MIDI_poll();

void onInit()
{
    9d70:	defff804 	addi	sp,sp,-32
    9d74:	dfc00715 	stw	ra,28(sp)
    9d78:	df000615 	stw	fp,24(sp)
    9d7c:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    9d80:	010000f4 	movhi	r4,3
    9d84:	2103d504 	addi	r4,r4,3924
    9d88:	000a2180 	call	a218 <_ZN9USBH_MIDI8idVendorEv>
    9d8c:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    9d90:	010000f4 	movhi	r4,3
    9d94:	2103d504 	addi	r4,r4,3924
    9d98:	000a2400 	call	a240 <_ZN9USBH_MIDI9idProductEv>
    9d9c:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    9da0:	e0fffa0b 	ldhu	r3,-24(fp)
    9da4:	e13ffa8b 	ldhu	r4,-22(fp)
    9da8:	e0bffb04 	addi	r2,fp,-20
    9dac:	200f883a 	mov	r7,r4
    9db0:	180d883a 	mov	r6,r3
    9db4:	014000f4 	movhi	r5,3
    9db8:	2968e604 	addi	r5,r5,-23656
    9dbc:	1009883a 	mov	r4,r2
    9dc0:	000f1e00 	call	f1e0 <sprintf>
  printf("%s\n", buf);
    9dc4:	e0bffb04 	addi	r2,fp,-20
    9dc8:	1009883a 	mov	r4,r2
    9dcc:	000ee1c0 	call	ee1c <puts>
}
    9dd0:	0001883a 	nop
    9dd4:	e037883a 	mov	sp,fp
    9dd8:	dfc00117 	ldw	ra,4(sp)
    9ddc:	df000017 	ldw	fp,0(sp)
    9de0:	dec00204 	addi	sp,sp,8
    9de4:	f800283a 	ret

00009de8 <_Z10MIDI_setupv>:

void MIDI_setup()
{
    9de8:	defffe04 	addi	sp,sp,-8
    9dec:	dfc00115 	stw	ra,4(sp)
    9df0:	df000015 	stw	fp,0(sp)
    9df4:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    9df8:	010000f4 	movhi	r4,3
    9dfc:	2103a604 	addi	r4,r4,3736
    9e00:	00099040 	call	9904 <_ZN8MAX3421e4InitEv>
    9e04:	10803fcc 	andi	r2,r2,255
    9e08:	1080201c 	xori	r2,r2,128
    9e0c:	10bfe004 	addi	r2,r2,-128
    9e10:	10bfffe0 	cmpeqi	r2,r2,-1
    9e14:	10803fcc 	andi	r2,r2,255
    9e18:	10000326 	beq	r2,zero,9e28 <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    9e1c:	010000f4 	movhi	r4,3
    9e20:	2128eb04 	addi	r4,r4,-23636
    9e24:	000ed000 	call	ed00 <printf>
	printf ("USB Started\n\r");
    9e28:	010000f4 	movhi	r4,3
    9e2c:	2128ed04 	addi	r4,r4,-23628
    9e30:	000ed000 	call	ed00 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    9e34:	01400074 	movhi	r5,1
    9e38:	29675c04 	addi	r5,r5,-25232
    9e3c:	010000f4 	movhi	r4,3
    9e40:	2103d504 	addi	r4,r4,3924
    9e44:	000a2680 	call	a268 <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    9e48:	0001883a 	nop
    9e4c:	e037883a 	mov	sp,fp
    9e50:	dfc00117 	ldw	ra,4(sp)
    9e54:	df000017 	ldw	fp,0(sp)
    9e58:	dec00204 	addi	sp,sp,8
    9e5c:	f800283a 	ret

00009e60 <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to serial MIDI
void MIDI_poll()
{
    9e60:	deffec04 	addi	sp,sp,-80
    9e64:	dfc01315 	stw	ra,76(sp)
    9e68:	df001215 	stw	fp,72(sp)
    9e6c:	df001204 	addi	fp,sp,72
  uint8_t note, vel;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    9e70:	e0ffef84 	addi	r3,fp,-66
    9e74:	e0bfff84 	addi	r2,fp,-2
    9e78:	180d883a 	mov	r6,r3
    9e7c:	100b883a 	mov	r5,r2
    9e80:	010000f4 	movhi	r4,3
    9e84:	2103d504 	addi	r4,r4,3924
    9e88:	00079340 	call	7934 <_ZN9USBH_MIDI8RecvDataEPtPh>
    9e8c:	10803fcc 	andi	r2,r2,255
    9e90:	1005003a 	cmpeq	r2,r2,zero
    9e94:	10803fcc 	andi	r2,r2,255
    9e98:	10003026 	beq	r2,zero,9f5c <_Z9MIDI_pollv+0xfc>
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {\
    9e9c:	e03fee15 	stw	zero,-72(fp)
    9ea0:	e0bfee17 	ldw	r2,-72(fp)
    9ea4:	10801008 	cmpgei	r2,r2,64
    9ea8:	10002c1e 	bne	r2,zero,9f5c <_Z9MIDI_pollv+0xfc>
    	if (bufMidi[i] == 0x90) {
    9eac:	e0ffef84 	addi	r3,fp,-66
    9eb0:	e0bfee17 	ldw	r2,-72(fp)
    9eb4:	1885883a 	add	r2,r3,r2
    9eb8:	10800003 	ldbu	r2,0(r2)
    9ebc:	10803fcc 	andi	r2,r2,255
    9ec0:	10802418 	cmpnei	r2,r2,144
    9ec4:	1000211e 	bne	r2,zero,9f4c <_Z9MIDI_pollv+0xec>
    		note = bufMidi[i+1];
    9ec8:	e0bfee17 	ldw	r2,-72(fp)
    9ecc:	10800044 	addi	r2,r2,1
    9ed0:	e0ffef84 	addi	r3,fp,-66
    9ed4:	1885883a 	add	r2,r3,r2
    9ed8:	10800003 	ldbu	r2,0(r2)
    9edc:	e0bfef05 	stb	r2,-68(fp)
    		vel = bufMidi[i+2];
    9ee0:	e0bfee17 	ldw	r2,-72(fp)
    9ee4:	10800084 	addi	r2,r2,2
    9ee8:	e0ffef84 	addi	r3,fp,-66
    9eec:	1885883a 	add	r2,r3,r2
    9ef0:	10800003 	ldbu	r2,0(r2)
    9ef4:	e0bfef45 	stb	r2,-67(fp)
    		i += 2;
    9ef8:	e0bfee17 	ldw	r2,-72(fp)
    9efc:	10800084 	addi	r2,r2,2
    9f00:	e0bfee15 	stw	r2,-72(fp)

    		set_note(note, vel);
    9f04:	e0bfef03 	ldbu	r2,-68(fp)
    9f08:	e0ffef43 	ldbu	r3,-67(fp)
    9f0c:	180b883a 	mov	r5,r3
    9f10:	1009883a 	mov	r4,r2
    9f14:	00051b00 	call	51b0 <_Z8set_notehh>

        	if(vel == 0) {
    9f18:	e0bfef43 	ldbu	r2,-67(fp)
    9f1c:	1000061e 	bne	r2,zero,9f38 <_Z9MIDI_pollv+0xd8>
        		printf("Note Off:	%d\n", note);
    9f20:	e0bfef03 	ldbu	r2,-68(fp)
    9f24:	100b883a 	mov	r5,r2
    9f28:	010000f4 	movhi	r4,3
    9f2c:	2128f104 	addi	r4,r4,-23612
    9f30:	000ed000 	call	ed00 <printf>
    9f34:	00000506 	br	9f4c <_Z9MIDI_pollv+0xec>
        	}
        	else {
        		printf("Note On:	%d\n", note);
    9f38:	e0bfef03 	ldbu	r2,-68(fp)
    9f3c:	100b883a 	mov	r5,r2
    9f40:	010000f4 	movhi	r4,3
    9f44:	2128f504 	addi	r4,r4,-23596
    9f48:	000ed000 	call	ed00 <printf>
  uint8_t note, vel;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {\
    9f4c:	e0bfee17 	ldw	r2,-72(fp)
    9f50:	10800044 	addi	r2,r2,1
    9f54:	e0bfee15 	stw	r2,-72(fp)
    9f58:	003fd106 	br	9ea0 <__alt_data_end+0xfc009ea0>
        	}

    	}
    }
  }
}
    9f5c:	0001883a 	nop
    9f60:	e037883a 	mov	sp,fp
    9f64:	dfc00117 	ldw	ra,4(sp)
    9f68:	df000017 	ldw	fp,0(sp)
    9f6c:	dec00204 	addi	sp,sp,8
    9f70:	f800283a 	ret

00009f74 <_Z7controlv>:

void control() {
    9f74:	defffd04 	addi	sp,sp,-12
    9f78:	dfc00215 	stw	ra,8(sp)
    9f7c:	df000115 	stw	fp,4(sp)
    9f80:	df000104 	addi	fp,sp,4
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
    9f84:	00810034 	movhi	r2,1024
    9f88:	10848804 	addi	r2,r2,4640
    9f8c:	10800037 	ldwio	r2,0(r2)
    9f90:	e0bfff05 	stb	r2,-4(fp)
	if ((~con & 0x1) && (~con & 0x2)) {
    9f94:	e0bfff03 	ldbu	r2,-4(fp)
    9f98:	1080004c 	andi	r2,r2,1
    9f9c:	1000031e 	bne	r2,zero,9fac <_Z7controlv+0x38>
    9fa0:	e0bfff03 	ldbu	r2,-4(fp)
    9fa4:	1080008c 	andi	r2,r2,2
    9fa8:	10000e26 	beq	r2,zero,9fe4 <_Z7controlv+0x70>
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
    9fac:	e0bfff03 	ldbu	r2,-4(fp)
    9fb0:	1080004c 	andi	r2,r2,1
    9fb4:	1000041e 	bne	r2,zero,9fc8 <_Z7controlv+0x54>
    9fb8:	d0b24017 	ldw	r2,-14080(gp)
    9fbc:	1009883a 	mov	r4,r2
    9fc0:	0006cc00 	call	6cc0 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
}
    9fc4:	00000706 	br	9fe4 <_Z7controlv+0x70>
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
	if ((~con & 0x1) && (~con & 0x2)) {
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
    9fc8:	e0bfff03 	ldbu	r2,-4(fp)
    9fcc:	1080008c 	andi	r2,r2,2
    9fd0:	1000041e 	bne	r2,zero,9fe4 <_Z7controlv+0x70>
    9fd4:	d0b24017 	ldw	r2,-14080(gp)
    9fd8:	1009883a 	mov	r4,r2
    9fdc:	0006d940 	call	6d94 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>
}
    9fe0:	00000006 	br	9fe4 <_Z7controlv+0x70>
    9fe4:	0001883a 	nop
    9fe8:	e037883a 	mov	sp,fp
    9fec:	dfc00117 	ldw	ra,4(sp)
    9ff0:	df000017 	ldw	fp,0(sp)
    9ff4:	dec00204 	addi	sp,sp,8
    9ff8:	f800283a 	ret

00009ffc <main>:

int main() {
    9ffc:	defffb04 	addi	sp,sp,-20
    a000:	dfc00415 	stw	ra,16(sp)
    a004:	df000315 	stw	fp,12(sp)
    a008:	df000304 	addi	fp,sp,12

	uint8_t timer;
	alt_u16 att_m_seconds = 250;
    a00c:	00803e84 	movi	r2,250
    a010:	e0bffd0d 	sth	r2,-12(fp)
	alt_u16 dec_m_seconds = 100;
    a014:	00801904 	movi	r2,100
    a018:	e0bffd8d 	sth	r2,-10(fp)
	alt_u16 rel_m_seconds = 300;
    a01c:	00804b04 	movi	r2,300
    a020:	e0bffe0d 	sth	r2,-8(fp)
	float peak_amp = 1.3;
    a024:	008fe9b4 	movhi	r2,16294
    a028:	10999984 	addi	r2,r2,26214
    a02c:	e0bfff15 	stw	r2,-4(fp)

	printf("Initializing SGTL5000...\n");
    a030:	010000f4 	movhi	r4,3
    a034:	2128f904 	addi	r4,r4,-23580
    a038:	000ee1c0 	call	ee1c <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    a03c:	010000f4 	movhi	r4,3
    a040:	21290004 	addi	r4,r4,-23552
    a044:	001fd2c0 	call	1fd2c <alt_avalon_i2c_open>
    a048:	d0b24015 	stw	r2,-14080(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    a04c:	d0b24017 	ldw	r2,-14080(gp)
    a050:	1000031e 	bne	r2,zero,a060 <main+0x64>
    a054:	010000f4 	movhi	r4,3
    a058:	21290304 	addi	r4,r4,-23540
    a05c:	000ee1c0 	call	ee1c <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    a060:	d0b24017 	ldw	r2,-14080(gp)
    a064:	1009883a 	mov	r4,r2
    a068:	0006a100 	call	6a10 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    a06c:	010000f4 	movhi	r4,3
    a070:	21290b04 	addi	r4,r4,-23508
    a074:	000ee1c0 	call	ee1c <puts>
	SGTL5000audio_on(i2c_dev);
    a078:	d0b24017 	ldw	r2,-14080(gp)
    a07c:	1009883a 	mov	r4,r2
    a080:	0006aa80 	call	6aa8 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	I2Creg_wr(i2c_dev, ANA_TEST1, TM_SELECT_MIC | TESTMODE);
	I2Creg_wr(i2c_dev, ANA_POWER, DAC_MONO | LINREG_SIMPLE_POWERUP | STARTUP_POWERUP | VDDC_CHRGPMP_POWERUP | LINREG_D_POWERUP | ADC_MONO | REFTOP_POWERUP | HEADPHONE_POWERUP | VAG_POWERUP | DAC_POWERUP_ANA | CAPLESS_HEADPHONE_POWERUP | ADC_POWERUP_ANA);
	I2Creg_wr(i2c_dev, ADCDAC_CTRL, VOL_RAMP_EN | !DAC_MUTE_RIGHT | !DAC_MUTE_LEFT);
	*/

	SGTL5000status(i2c_dev);
    a084:	d0b24017 	ldw	r2,-14080(gp)
    a088:	1009883a 	mov	r4,r2
    a08c:	0006b140 	call	6b14 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>

	printf("Audio running\n");
    a090:	010000f4 	movhi	r4,3
    a094:	21291004 	addi	r4,r4,-23488
    a098:	000ee1c0 	call	ee1c <puts>

	printf("Initializing ADSR...\n");
    a09c:	010000f4 	movhi	r4,3
    a0a0:	21291404 	addi	r4,r4,-23472
    a0a4:	000ee1c0 	call	ee1c <puts>

	calc_adsr(att_m_seconds, dec_m_seconds, rel_m_seconds, peak_amp);
    a0a8:	e0bffd0b 	ldhu	r2,-12(fp)
    a0ac:	e0fffd8b 	ldhu	r3,-10(fp)
    a0b0:	e13ffe0b 	ldhu	r4,-8(fp)
    a0b4:	e1ffff17 	ldw	r7,-4(fp)
    a0b8:	200d883a 	mov	r6,r4
    a0bc:	180b883a 	mov	r5,r3
    a0c0:	1009883a 	mov	r4,r2
    a0c4:	00052780 	call	5278 <_Z9calc_adsrtttf>

	printf("ADSR set\n");
    a0c8:	010000f4 	movhi	r4,3
    a0cc:	21291a04 	addi	r4,r4,-23448
    a0d0:	000ee1c0 	call	ee1c <puts>

	MIDI_setup();
    a0d4:	0009de80 	call	9de8 <_Z10MIDI_setupv>

	printf("MIDI set\n");
    a0d8:	010000f4 	movhi	r4,3
    a0dc:	21291d04 	addi	r4,r4,-23436
    a0e0:	000ee1c0 	call	ee1c <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a0e4:	010000f4 	movhi	r4,3
    a0e8:	2103a604 	addi	r4,r4,3736
    a0ec:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a0f0:	10803fcc 	andi	r2,r2,255
    a0f4:	10802418 	cmpnei	r2,r2,144
    a0f8:	10803fcc 	andi	r2,r2,255
    a0fc:	10000c26 	beq	r2,zero,a130 <main+0x134>
		Usb.Task();
    a100:	010000f4 	movhi	r4,3
    a104:	2103a604 	addi	r4,r4,3736
    a108:	000181c0 	call	181c <_ZN3USB4TaskEv>
        printf("%X\n", Usb.getUsbTaskState());
    a10c:	010000f4 	movhi	r4,3
    a110:	2103a604 	addi	r4,r4,3736
    a114:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a118:	10803fcc 	andi	r2,r2,255
    a11c:	100b883a 	mov	r5,r2
    a120:	010000f4 	movhi	r4,3
    a124:	21292004 	addi	r4,r4,-23424
    a128:	000ed000 	call	ed00 <printf>

	MIDI_setup();

	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a12c:	003fed06 	br	a0e4 <__alt_data_end+0xfc00a0e4>
		Usb.Task();
        printf("%X\n", Usb.getUsbTaskState());
	}

	printf("USB running\n");
    a130:	010000f4 	movhi	r4,3
    a134:	21292104 	addi	r4,r4,-23420
    a138:	000ee1c0 	call	ee1c <puts>

	while(1) {
		if ( Midi ) {
    a13c:	010000f4 	movhi	r4,3
    a140:	2103d504 	addi	r4,r4,3924
    a144:	000a1f00 	call	a1f0 <_ZN9USBH_MIDIcvbEv>
    a148:	10803fcc 	andi	r2,r2,255
    a14c:	103ffb26 	beq	r2,zero,a13c <__alt_data_end+0xfc00a13c>
			MIDI_poll();
    a150:	0009e600 	call	9e60 <_Z9MIDI_pollv>
        printf("%X\n", Usb.getUsbTaskState());
	}

	printf("USB running\n");

	while(1) {
    a154:	003ff906 	br	a13c <__alt_data_end+0xfc00a13c>

0000a158 <_Z41__static_initialization_and_destruction_0ii>:
		//	timer = 0;
		//}
	}

	printf("Ended");
}
    a158:	defffc04 	addi	sp,sp,-16
    a15c:	dfc00315 	stw	ra,12(sp)
    a160:	df000215 	stw	fp,8(sp)
    a164:	df000204 	addi	fp,sp,8
    a168:	e13ffe15 	stw	r4,-8(fp)
    a16c:	e17fff15 	stw	r5,-4(fp)
    a170:	e0bffe17 	ldw	r2,-8(fp)
    a174:	10800058 	cmpnei	r2,r2,1
    a178:	10000b1e 	bne	r2,zero,a1a8 <_Z41__static_initialization_and_destruction_0ii+0x50>
    a17c:	e0ffff17 	ldw	r3,-4(fp)
    a180:	00bfffd4 	movui	r2,65535
    a184:	1880081e 	bne	r3,r2,a1a8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 * This is sample program. Do not expect perfect behavior.
 *******************************************************************************
 */


USB Usb;
    a188:	010000f4 	movhi	r4,3
    a18c:	2103a604 	addi	r4,r4,3736
    a190:	00007040 	call	704 <_ZN3USBC1Ev>
//USBHub Hub(&Usb);
USBH_MIDI  Midi(&Usb);
    a194:	014000f4 	movhi	r5,3
    a198:	2943a604 	addi	r5,r5,3736
    a19c:	010000f4 	movhi	r4,3
    a1a0:	2103d504 	addi	r4,r4,3924
    a1a4:	0006e140 	call	6e14 <_ZN9USBH_MIDIC1EP3USB>
		//	timer = 0;
		//}
	}

	printf("Ended");
}
    a1a8:	0001883a 	nop
    a1ac:	e037883a 	mov	sp,fp
    a1b0:	dfc00117 	ldw	ra,4(sp)
    a1b4:	df000017 	ldw	fp,0(sp)
    a1b8:	dec00204 	addi	sp,sp,8
    a1bc:	f800283a 	ret

0000a1c0 <_GLOBAL__sub_I_Usb>:
    a1c0:	defffe04 	addi	sp,sp,-8
    a1c4:	dfc00115 	stw	ra,4(sp)
    a1c8:	df000015 	stw	fp,0(sp)
    a1cc:	d839883a 	mov	fp,sp
    a1d0:	017fffd4 	movui	r5,65535
    a1d4:	01000044 	movi	r4,1
    a1d8:	000a1580 	call	a158 <_Z41__static_initialization_and_destruction_0ii>
    a1dc:	e037883a 	mov	sp,fp
    a1e0:	dfc00117 	ldw	ra,4(sp)
    a1e4:	df000017 	ldw	fp,0(sp)
    a1e8:	dec00204 	addi	sp,sp,8
    a1ec:	f800283a 	ret

0000a1f0 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    a1f0:	defffe04 	addi	sp,sp,-8
    a1f4:	df000115 	stw	fp,4(sp)
    a1f8:	df000104 	addi	fp,sp,4
    a1fc:	e13fff15 	stw	r4,-4(fp)
    a200:	e0bfff17 	ldw	r2,-4(fp)
    a204:	10800343 	ldbu	r2,13(r2)
    a208:	e037883a 	mov	sp,fp
    a20c:	df000017 	ldw	fp,0(sp)
    a210:	dec00104 	addi	sp,sp,4
    a214:	f800283a 	ret

0000a218 <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    a218:	defffe04 	addi	sp,sp,-8
    a21c:	df000115 	stw	fp,4(sp)
    a220:	df000104 	addi	fp,sp,4
    a224:	e13fff15 	stw	r4,-4(fp)
    a228:	e0bfff17 	ldw	r2,-4(fp)
    a22c:	1080040b 	ldhu	r2,16(r2)
    a230:	e037883a 	mov	sp,fp
    a234:	df000017 	ldw	fp,0(sp)
    a238:	dec00104 	addi	sp,sp,4
    a23c:	f800283a 	ret

0000a240 <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    a240:	defffe04 	addi	sp,sp,-8
    a244:	df000115 	stw	fp,4(sp)
    a248:	df000104 	addi	fp,sp,4
    a24c:	e13fff15 	stw	r4,-4(fp)
    a250:	e0bfff17 	ldw	r2,-4(fp)
    a254:	1080038b 	ldhu	r2,14(r2)
    a258:	e037883a 	mov	sp,fp
    a25c:	df000017 	ldw	fp,0(sp)
    a260:	dec00104 	addi	sp,sp,4
    a264:	f800283a 	ret

0000a268 <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    a268:	defffd04 	addi	sp,sp,-12
    a26c:	df000215 	stw	fp,8(sp)
    a270:	df000204 	addi	fp,sp,8
    a274:	e13ffe15 	stw	r4,-8(fp)
    a278:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    a27c:	e0bffe17 	ldw	r2,-8(fp)
    a280:	e0ffff17 	ldw	r3,-4(fp)
    a284:	10c01815 	stw	r3,96(r2)
        };
    a288:	0001883a 	nop
    a28c:	e037883a 	mov	sp,fp
    a290:	df000017 	ldw	fp,0(sp)
    a294:	dec00104 	addi	sp,sp,4
    a298:	f800283a 	ret

0000a29c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    a29c:	008000f4 	movhi	r2,3
    a2a0:	10a93304 	addi	r2,r2,-23348
    a2a4:	20800015 	stw	r2,0(r4)
    a2a8:	000b0741 	jmpi	b074 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a2ac <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    a2ac:	defffe04 	addi	sp,sp,-8
    a2b0:	008000f4 	movhi	r2,3
    a2b4:	dc000015 	stw	r16,0(sp)
    a2b8:	dfc00115 	stw	ra,4(sp)
    a2bc:	10a93304 	addi	r2,r2,-23348
    a2c0:	20800015 	stw	r2,0(r4)
    a2c4:	2021883a 	mov	r16,r4
    a2c8:	000b0740 	call	b074 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a2cc:	8009883a 	mov	r4,r16
    a2d0:	dfc00117 	ldw	ra,4(sp)
    a2d4:	dc000017 	ldw	r16,0(sp)
    a2d8:	dec00204 	addi	sp,sp,8
    a2dc:	000afa01 	jmpi	afa0 <_ZdlPv>

0000a2e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a2e0:	defff504 	addi	sp,sp,-44
    a2e4:	dc000115 	stw	r16,4(sp)
    a2e8:	38800117 	ldw	r2,4(r7)
    a2ec:	24000117 	ldw	r16,4(r4)
    a2f0:	df000915 	stw	fp,36(sp)
    a2f4:	ddc00815 	stw	r23,32(sp)
    a2f8:	dd800715 	stw	r22,28(sp)
    a2fc:	dcc00415 	stw	r19,16(sp)
    a300:	dc800315 	stw	r18,12(sp)
    a304:	dc400215 	stw	r17,8(sp)
    a308:	dfc00a15 	stw	ra,40(sp)
    a30c:	dd400615 	stw	r21,24(sp)
    a310:	dd000515 	stw	r20,20(sp)
    a314:	2823883a 	mov	r17,r5
    a318:	3039883a 	mov	fp,r6
    a31c:	dcc00b17 	ldw	r19,44(sp)
    a320:	ddc00c17 	ldw	r23,48(sp)
    a324:	dd800d17 	ldw	r22,52(sp)
    a328:	dc800e17 	ldw	r18,56(sp)
    a32c:	80800b26 	beq	r16,r2,a35c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    a330:	80c00007 	ldb	r3,0(r16)
    a334:	2029883a 	mov	r20,r4
    a338:	01000a84 	movi	r4,42
    a33c:	382b883a 	mov	r21,r7
    a340:	19001a26 	beq	r3,r4,a3ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a344:	100b883a 	mov	r5,r2
    a348:	8009883a 	mov	r4,r16
    a34c:	d8c00015 	stw	r3,0(sp)
    a350:	000f24c0 	call	f24c <strcmp>
    a354:	d8c00017 	ldw	r3,0(sp)
    a358:	1000141e 	bne	r2,zero,a3ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a35c:	94c00015 	stw	r19,0(r18)
    a360:	97000115 	stw	fp,4(r18)
    a364:	88002816 	blt	r17,zero,a408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    a368:	9c63883a 	add	r17,r19,r17
    a36c:	b4403226 	beq	r22,r17,a438 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    a370:	00800044 	movi	r2,1
    a374:	90800315 	stw	r2,12(r18)
    a378:	0005883a 	mov	r2,zero
    a37c:	dfc00a17 	ldw	ra,40(sp)
    a380:	df000917 	ldw	fp,36(sp)
    a384:	ddc00817 	ldw	r23,32(sp)
    a388:	dd800717 	ldw	r22,28(sp)
    a38c:	dd400617 	ldw	r21,24(sp)
    a390:	dd000517 	ldw	r20,20(sp)
    a394:	dcc00417 	ldw	r19,16(sp)
    a398:	dc800317 	ldw	r18,12(sp)
    a39c:	dc400217 	ldw	r17,8(sp)
    a3a0:	dc000117 	ldw	r16,4(sp)
    a3a4:	dec00b04 	addi	sp,sp,44
    a3a8:	f800283a 	ret
    a3ac:	9d801926 	beq	r19,r22,a414 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    a3b0:	a1000217 	ldw	r4,8(r20)
    a3b4:	a80f883a 	mov	r7,r21
    a3b8:	e00d883a 	mov	r6,fp
    a3bc:	20800017 	ldw	r2,0(r4)
    a3c0:	dc800e15 	stw	r18,56(sp)
    a3c4:	dd800d15 	stw	r22,52(sp)
    a3c8:	ddc00c15 	stw	r23,48(sp)
    a3cc:	dcc00b15 	stw	r19,44(sp)
    a3d0:	10800717 	ldw	r2,28(r2)
    a3d4:	880b883a 	mov	r5,r17
    a3d8:	dfc00a17 	ldw	ra,40(sp)
    a3dc:	df000917 	ldw	fp,36(sp)
    a3e0:	ddc00817 	ldw	r23,32(sp)
    a3e4:	dd800717 	ldw	r22,28(sp)
    a3e8:	dd400617 	ldw	r21,24(sp)
    a3ec:	dd000517 	ldw	r20,20(sp)
    a3f0:	dcc00417 	ldw	r19,16(sp)
    a3f4:	dc800317 	ldw	r18,12(sp)
    a3f8:	dc400217 	ldw	r17,8(sp)
    a3fc:	dc000117 	ldw	r16,4(sp)
    a400:	dec00b04 	addi	sp,sp,44
    a404:	1000683a 	jmp	r2
    a408:	00bfff84 	movi	r2,-2
    a40c:	88bfda1e 	bne	r17,r2,a378 <__alt_data_end+0xfc00a378>
    a410:	003fd706 	br	a370 <__alt_data_end+0xfc00a370>
    a414:	b9400117 	ldw	r5,4(r23)
    a418:	81400526 	beq	r16,r5,a430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    a41c:	00800a84 	movi	r2,42
    a420:	18bfe326 	beq	r3,r2,a3b0 <__alt_data_end+0xfc00a3b0>
    a424:	8009883a 	mov	r4,r16
    a428:	000f24c0 	call	f24c <strcmp>
    a42c:	103fe01e 	bne	r2,zero,a3b0 <__alt_data_end+0xfc00a3b0>
    a430:	97000215 	stw	fp,8(r18)
    a434:	003fd006 	br	a378 <__alt_data_end+0xfc00a378>
    a438:	00800184 	movi	r2,6
    a43c:	003fcd06 	br	a374 <__alt_data_end+0xfc00a374>

0000a440 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a440:	defffa04 	addi	sp,sp,-24
    a444:	dc000215 	stw	r16,8(sp)
    a448:	dc000617 	ldw	r16,24(sp)
    a44c:	dc800415 	stw	r18,16(sp)
    a450:	dc400315 	stw	r17,12(sp)
    a454:	dfc00515 	stw	ra,20(sp)
    a458:	2023883a 	mov	r17,r4
    a45c:	2825883a 	mov	r18,r5
    a460:	81800b26 	beq	r16,r6,a490 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    a464:	89000217 	ldw	r4,8(r17)
    a468:	900b883a 	mov	r5,r18
    a46c:	20800017 	ldw	r2,0(r4)
    a470:	dc000615 	stw	r16,24(sp)
    a474:	10800817 	ldw	r2,32(r2)
    a478:	dfc00517 	ldw	ra,20(sp)
    a47c:	dc800417 	ldw	r18,16(sp)
    a480:	dc400317 	ldw	r17,12(sp)
    a484:	dc000217 	ldw	r16,8(sp)
    a488:	dec00604 	addi	sp,sp,24
    a48c:	1000683a 	jmp	r2
    a490:	21000117 	ldw	r4,4(r4)
    a494:	39400117 	ldw	r5,4(r7)
    a498:	21400926 	beq	r4,r5,a4c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    a49c:	20c00007 	ldb	r3,0(r4)
    a4a0:	00800a84 	movi	r2,42
    a4a4:	18bfef26 	beq	r3,r2,a464 <__alt_data_end+0xfc00a464>
    a4a8:	d9800015 	stw	r6,0(sp)
    a4ac:	d9c00115 	stw	r7,4(sp)
    a4b0:	000f24c0 	call	f24c <strcmp>
    a4b4:	d9800017 	ldw	r6,0(sp)
    a4b8:	d9c00117 	ldw	r7,4(sp)
    a4bc:	103fe91e 	bne	r2,zero,a464 <__alt_data_end+0xfc00a464>
    a4c0:	00800184 	movi	r2,6
    a4c4:	dfc00517 	ldw	ra,20(sp)
    a4c8:	dc800417 	ldw	r18,16(sp)
    a4cc:	dc400317 	ldw	r17,12(sp)
    a4d0:	dc000217 	ldw	r16,8(sp)
    a4d4:	dec00604 	addi	sp,sp,24
    a4d8:	f800283a 	ret

0000a4dc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    a4dc:	defffb04 	addi	sp,sp,-20
    a4e0:	dcc00315 	stw	r19,12(sp)
    a4e4:	dc800215 	stw	r18,8(sp)
    a4e8:	dc400115 	stw	r17,4(sp)
    a4ec:	dc000015 	stw	r16,0(sp)
    a4f0:	dfc00415 	stw	ra,16(sp)
    a4f4:	2027883a 	mov	r19,r4
    a4f8:	2821883a 	mov	r16,r5
    a4fc:	3023883a 	mov	r17,r6
    a500:	3825883a 	mov	r18,r7
    a504:	000b0b80 	call	b0b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    a508:	10c03fcc 	andi	r3,r2,255
    a50c:	18000726 	beq	r3,zero,a52c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    a510:	dfc00417 	ldw	ra,16(sp)
    a514:	dcc00317 	ldw	r19,12(sp)
    a518:	dc800217 	ldw	r18,8(sp)
    a51c:	dc400117 	ldw	r17,4(sp)
    a520:	dc000017 	ldw	r16,0(sp)
    a524:	dec00504 	addi	sp,sp,20
    a528:	f800283a 	ret
    a52c:	99000217 	ldw	r4,8(r19)
    a530:	900f883a 	mov	r7,r18
    a534:	880d883a 	mov	r6,r17
    a538:	20800017 	ldw	r2,0(r4)
    a53c:	800b883a 	mov	r5,r16
    a540:	10800617 	ldw	r2,24(r2)
    a544:	dfc00417 	ldw	ra,16(sp)
    a548:	dcc00317 	ldw	r19,12(sp)
    a54c:	dc800217 	ldw	r18,8(sp)
    a550:	dc400117 	ldw	r17,4(sp)
    a554:	dc000017 	ldw	r16,0(sp)
    a558:	dec00504 	addi	sp,sp,20
    a55c:	1000683a 	jmp	r2

0000a560 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    a560:	008000f4 	movhi	r2,3
    a564:	10a94b04 	addi	r2,r2,-23252
    a568:	20800015 	stw	r2,0(r4)
    a56c:	000b0741 	jmpi	b074 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a570 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    a570:	defffe04 	addi	sp,sp,-8
    a574:	008000f4 	movhi	r2,3
    a578:	dc000015 	stw	r16,0(sp)
    a57c:	dfc00115 	stw	ra,4(sp)
    a580:	10a94b04 	addi	r2,r2,-23252
    a584:	20800015 	stw	r2,0(r4)
    a588:	2021883a 	mov	r16,r4
    a58c:	000b0740 	call	b074 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a590:	8009883a 	mov	r4,r16
    a594:	dfc00117 	ldw	ra,4(sp)
    a598:	dc000017 	ldw	r16,0(sp)
    a59c:	dec00204 	addi	sp,sp,8
    a5a0:	000afa01 	jmpi	afa0 <_ZdlPv>

0000a5a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a5a4:	defff504 	addi	sp,sp,-44
    a5a8:	dc400215 	stw	r17,8(sp)
    a5ac:	dc400b17 	ldw	r17,44(sp)
    a5b0:	df000915 	stw	fp,36(sp)
    a5b4:	ddc00815 	stw	r23,32(sp)
    a5b8:	dd800715 	stw	r22,28(sp)
    a5bc:	dc000115 	stw	r16,4(sp)
    a5c0:	dfc00a15 	stw	ra,40(sp)
    a5c4:	dd400615 	stw	r21,24(sp)
    a5c8:	dd000515 	stw	r20,20(sp)
    a5cc:	dcc00415 	stw	r19,16(sp)
    a5d0:	dc800315 	stw	r18,12(sp)
    a5d4:	3039883a 	mov	fp,r6
    a5d8:	2021883a 	mov	r16,r4
    a5dc:	282d883a 	mov	r22,r5
    a5e0:	382f883a 	mov	r23,r7
    a5e4:	34402c26 	beq	r6,r17,a698 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    a5e8:	85000317 	ldw	r20,12(r16)
    a5ec:	048000c4 	movi	r18,3
    a5f0:	04ffff44 	movi	r19,-3
    a5f4:	a484983a 	sll	r2,r20,r18
    a5f8:	b80f883a 	mov	r7,r23
    a5fc:	b00b883a 	mov	r5,r22
    a600:	10800304 	addi	r2,r2,12
    a604:	80a1883a 	add	r16,r16,r2
    a608:	a0001626 	beq	r20,zero,a664 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    a60c:	81800017 	ldw	r6,0(r16)
    a610:	a53fffc4 	addi	r20,r20,-1
    a614:	3080008c 	andi	r2,r6,2
    a618:	3540004c 	andi	r21,r6,1
    a61c:	10000d26 	beq	r2,zero,a654 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a620:	300dd23a 	srai	r6,r6,8
    a624:	a8000426 	beq	r21,zero,a638 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    a628:	b4c00a26 	beq	r22,r19,a654 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a62c:	e0800017 	ldw	r2,0(fp)
    a630:	118d883a 	add	r6,r2,r6
    a634:	31800017 	ldw	r6,0(r6)
    a638:	813fff17 	ldw	r4,-4(r16)
    a63c:	e18d883a 	add	r6,fp,r6
    a640:	20800017 	ldw	r2,0(r4)
    a644:	dc400015 	stw	r17,0(sp)
    a648:	10800817 	ldw	r2,32(r2)
    a64c:	103ee83a 	callr	r2
    a650:	90801b16 	blt	r18,r2,a6c0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    a654:	843ffe04 	addi	r16,r16,-8
    a658:	b80f883a 	mov	r7,r23
    a65c:	b00b883a 	mov	r5,r22
    a660:	a03fea1e 	bne	r20,zero,a60c <__alt_data_end+0xfc00a60c>
    a664:	00800044 	movi	r2,1
    a668:	dfc00a17 	ldw	ra,40(sp)
    a66c:	df000917 	ldw	fp,36(sp)
    a670:	ddc00817 	ldw	r23,32(sp)
    a674:	dd800717 	ldw	r22,28(sp)
    a678:	dd400617 	ldw	r21,24(sp)
    a67c:	dd000517 	ldw	r20,20(sp)
    a680:	dcc00417 	ldw	r19,16(sp)
    a684:	dc800317 	ldw	r18,12(sp)
    a688:	dc400217 	ldw	r17,8(sp)
    a68c:	dc000117 	ldw	r16,4(sp)
    a690:	dec00b04 	addi	sp,sp,44
    a694:	f800283a 	ret
    a698:	21000117 	ldw	r4,4(r4)
    a69c:	39400117 	ldw	r5,4(r7)
    a6a0:	21400526 	beq	r4,r5,a6b8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    a6a4:	20c00007 	ldb	r3,0(r4)
    a6a8:	00800a84 	movi	r2,42
    a6ac:	18bfce26 	beq	r3,r2,a5e8 <__alt_data_end+0xfc00a5e8>
    a6b0:	000f24c0 	call	f24c <strcmp>
    a6b4:	103fcc1e 	bne	r2,zero,a5e8 <__alt_data_end+0xfc00a5e8>
    a6b8:	00800184 	movi	r2,6
    a6bc:	003fea06 	br	a668 <__alt_data_end+0xfc00a668>
    a6c0:	a83fe926 	beq	r21,zero,a668 <__alt_data_end+0xfc00a668>
    a6c4:	10800054 	ori	r2,r2,1
    a6c8:	003fe706 	br	a668 <__alt_data_end+0xfc00a668>

0000a6cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a6cc:	deffe804 	addi	sp,sp,-96
    a6d0:	df001615 	stw	fp,88(sp)
    a6d4:	df001b17 	ldw	fp,108(sp)
    a6d8:	ddc01515 	stw	r23,84(sp)
    a6dc:	dd001215 	stw	r20,72(sp)
    a6e0:	e0800417 	ldw	r2,16(fp)
    a6e4:	dcc01115 	stw	r19,68(sp)
    a6e8:	dfc01715 	stw	ra,92(sp)
    a6ec:	dd801415 	stw	r22,80(sp)
    a6f0:	dd401315 	stw	r21,76(sp)
    a6f4:	dc801015 	stw	r18,64(sp)
    a6f8:	dc400f15 	stw	r17,60(sp)
    a6fc:	dc000e15 	stw	r16,56(sp)
    a700:	d9000b15 	stw	r4,44(sp)
    a704:	d9c00915 	stw	r7,36(sp)
    a708:	1080040c 	andi	r2,r2,16
    a70c:	282f883a 	mov	r23,r5
    a710:	3027883a 	mov	r19,r6
    a714:	dd001817 	ldw	r20,96(sp)
    a718:	10000226 	beq	r2,zero,a724 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    a71c:	20800217 	ldw	r2,8(r4)
    a720:	e0800415 	stw	r2,16(fp)
    a724:	d8c01a17 	ldw	r3,104(sp)
    a728:	a0c0cb26 	beq	r20,r3,aa58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    a72c:	d8c00b17 	ldw	r3,44(sp)
    a730:	1c000117 	ldw	r16,4(r3)
    a734:	d8c00917 	ldw	r3,36(sp)
    a738:	19400117 	ldw	r5,4(r3)
    a73c:	2c000626 	beq	r5,r16,a758 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    a740:	80c00007 	ldb	r3,0(r16)
    a744:	00800a84 	movi	r2,42
    a748:	18801b26 	beq	r3,r2,a7b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a74c:	8009883a 	mov	r4,r16
    a750:	000f24c0 	call	f24c <strcmp>
    a754:	1000181e 	bne	r2,zero,a7b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a758:	e5000015 	stw	r20,0(fp)
    a75c:	e4c00115 	stw	r19,4(fp)
    a760:	b8010916 	blt	r23,zero,ab88 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    a764:	d8c01a17 	ldw	r3,104(sp)
    a768:	a5d9883a 	add	r12,r20,r23
    a76c:	1b014126 	beq	r3,r12,ac74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    a770:	00800044 	movi	r2,1
    a774:	e0800315 	stw	r2,12(fp)
    a778:	0005883a 	mov	r2,zero
    a77c:	dfc01717 	ldw	ra,92(sp)
    a780:	df001617 	ldw	fp,88(sp)
    a784:	ddc01517 	ldw	r23,84(sp)
    a788:	dd801417 	ldw	r22,80(sp)
    a78c:	dd401317 	ldw	r21,76(sp)
    a790:	dd001217 	ldw	r20,72(sp)
    a794:	dcc01117 	ldw	r19,68(sp)
    a798:	dc801017 	ldw	r18,64(sp)
    a79c:	dc400f17 	ldw	r17,60(sp)
    a7a0:	dc000e17 	ldw	r16,56(sp)
    a7a4:	dec01804 	addi	sp,sp,96
    a7a8:	f800283a 	ret
    a7ac:	d8c00917 	ldw	r3,36(sp)
    a7b0:	18800117 	ldw	r2,4(r3)
    a7b4:	80bfe826 	beq	r16,r2,a758 <__alt_data_end+0xfc00a758>
    a7b8:	b800ef16 	blt	r23,zero,ab78 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    a7bc:	d8c01a17 	ldw	r3,104(sp)
    a7c0:	1dedc83a 	sub	r22,r3,r23
    a7c4:	e005883a 	mov	r2,fp
    a7c8:	00c00044 	movi	r3,1
    a7cc:	b039883a 	mov	fp,r22
    a7d0:	0021883a 	mov	r16,zero
    a7d4:	a02d883a 	mov	r22,r20
    a7d8:	d8000a45 	stb	zero,41(sp)
    a7dc:	d8c00a05 	stb	r3,40(sp)
    a7e0:	048000c4 	movi	r18,3
    a7e4:	1029883a 	mov	r20,r2
    a7e8:	d8c00b17 	ldw	r3,44(sp)
    a7ec:	b805883a 	mov	r2,r23
    a7f0:	1ac00317 	ldw	r11,12(r3)
    a7f4:	581490fa 	slli	r10,r11,3
    a7f8:	52800304 	addi	r10,r10,12
    a7fc:	1aab883a 	add	r21,r3,r10
    a800:	b007883a 	mov	r3,r22
    a804:	582d883a 	mov	r22,r11
    a808:	a82f883a 	mov	r23,r21
    a80c:	1823883a 	mov	r17,r3
    a810:	102b883a 	mov	r21,r2
    a814:	b0005526 	beq	r22,zero,a96c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    a818:	b8800017 	ldw	r2,0(r23)
    a81c:	a1400417 	ldw	r5,16(r20)
    a820:	d8000415 	stw	zero,16(sp)
    a824:	d8000515 	stw	zero,20(sp)
    a828:	d8000615 	stw	zero,24(sp)
    a82c:	d8000715 	stw	zero,28(sp)
    a830:	d9400815 	stw	r5,32(sp)
    a834:	1100004c 	andi	r4,r2,1
    a838:	1007d23a 	srai	r3,r2,8
    a83c:	20007526 	beq	r4,zero,aa14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    a840:	89000017 	ldw	r4,0(r17)
    a844:	99800054 	ori	r6,r19,1
    a848:	20c7883a 	add	r3,r4,r3
    a84c:	18c00017 	ldw	r3,0(r3)
    a850:	88c7883a 	add	r3,r17,r3
    a854:	e0000326 	beq	fp,zero,a864 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    a858:	d9c00a03 	ldbu	r7,40(sp)
    a85c:	e0c9803a 	cmpltu	r4,fp,r3
    a860:	21c07226 	beq	r4,r7,aa2c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    a864:	1080008c 	andi	r2,r2,2
    a868:	1000041e 	bne	r2,zero,a87c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    a86c:	013fff84 	movi	r4,-2
    a870:	a9007126 	beq	r21,r4,aa38 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    a874:	00bfff44 	movi	r2,-3
    a878:	308c703a 	and	r6,r6,r2
    a87c:	b93fff17 	ldw	r4,-4(r23)
    a880:	d9400404 	addi	r5,sp,16
    a884:	d9c00917 	ldw	r7,36(sp)
    a888:	20800017 	ldw	r2,0(r4)
    a88c:	d9400315 	stw	r5,12(sp)
    a890:	d9401a17 	ldw	r5,104(sp)
    a894:	d8c00015 	stw	r3,0(sp)
    a898:	d9400215 	stw	r5,8(sp)
    a89c:	d9401917 	ldw	r5,100(sp)
    a8a0:	d9400115 	stw	r5,4(sp)
    a8a4:	10800717 	ldw	r2,28(r2)
    a8a8:	a80b883a 	mov	r5,r21
    a8ac:	103ee83a 	callr	r2
    a8b0:	a1400217 	ldw	r5,8(r20)
    a8b4:	d9000617 	ldw	r4,24(sp)
    a8b8:	d8c00717 	ldw	r3,28(sp)
    a8bc:	2908b03a 	or	r4,r5,r4
    a8c0:	a1000215 	stw	r4,8(r20)
    a8c4:	01400184 	movi	r5,6
    a8c8:	1940a426 	beq	r3,r5,ab5c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    a8cc:	01400084 	movi	r5,2
    a8d0:	1940a226 	beq	r3,r5,ab5c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    a8d4:	81403fcc 	andi	r5,r16,255
    a8d8:	a1800017 	ldw	r6,0(r20)
    a8dc:	28004f1e 	bne	r5,zero,aa1c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    a8e0:	30007926 	beq	r6,zero,aac8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    a8e4:	d9400417 	ldw	r5,16(sp)
    a8e8:	29806926 	beq	r5,r6,aa90 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    a8ec:	28006d26 	beq	r5,zero,aaa4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    a8f0:	a2800317 	ldw	r10,12(r20)
    a8f4:	9100250e 	bge	r18,r4,a98c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    a8f8:	2100004c 	andi	r4,r4,1
    a8fc:	20000326 	beq	r4,zero,a90c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    a900:	a0800417 	ldw	r2,16(r20)
    a904:	1080008c 	andi	r2,r2,2
    a908:	1000201e 	bne	r2,zero,a98c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    a90c:	50004d1e 	bne	r10,zero,aa44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    a910:	18002626 	beq	r3,zero,a9ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    a914:	02800044 	movi	r10,1
    a918:	181b883a 	mov	r13,r3
    a91c:	1a84f03a 	xor	r2,r3,r10
    a920:	501f883a 	mov	r15,r10
    a924:	90801f0e 	bge	r18,r2,a9a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    a928:	90c0880e 	bge	r18,r3,ab4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    a92c:	d9400417 	ldw	r5,16(sp)
    a930:	1880008c 	andi	r2,r3,2
    a934:	d9000517 	ldw	r4,20(sp)
    a938:	a1400015 	stw	r5,0(r20)
    a93c:	0021883a 	mov	r16,zero
    a940:	a1000115 	stw	r4,4(r20)
    a944:	a0c00315 	stw	r3,12(r20)
    a948:	10004f1e 	bne	r2,zero,aa88 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    a94c:	6b40004c 	andi	r13,r13,1
    a950:	68004d26 	beq	r13,zero,aa88 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    a954:	a1000217 	ldw	r4,8(r20)
    a958:	01400104 	movi	r5,4
    a95c:	21408826 	beq	r4,r5,ab80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    a960:	b5bfffc4 	addi	r22,r22,-1
    a964:	bdfffe04 	addi	r23,r23,-8
    a968:	b03fab1e 	bne	r22,zero,a818 <__alt_data_end+0xfc00a818>
    a96c:	d8800a43 	ldbu	r2,41(sp)
    a970:	a82f883a 	mov	r23,r21
    a974:	882d883a 	mov	r22,r17
    a978:	10008126 	beq	r2,zero,ab80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    a97c:	dd400a03 	ldbu	r21,40(sp)
    a980:	a8007f26 	beq	r21,zero,ab80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    a984:	d8000a05 	stb	zero,40(sp)
    a988:	003f9706 	br	a7e8 <__alt_data_end+0xfc00a7e8>
    a98c:	501f883a 	mov	r15,r10
    a990:	181b883a 	mov	r13,r3
    a994:	02800b0e 	bge	zero,r10,a9c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    a998:	00c0570e 	bge	zero,r3,aaf8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    a99c:	1a84f03a 	xor	r2,r3,r10
    a9a0:	90bfe116 	blt	r18,r2,a928 <__alt_data_end+0xfc00a928>
    a9a4:	1bc6703a 	and	r3,r3,r15
    a9a8:	90c09916 	blt	r18,r3,ac10 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    a9ac:	01000044 	movi	r4,1
    a9b0:	a1000315 	stw	r4,12(r20)
    a9b4:	a0000015 	stw	zero,0(r20)
    a9b8:	a1000217 	ldw	r4,8(r20)
    a9bc:	04000044 	movi	r16,1
    a9c0:	003fe506 	br	a958 <__alt_data_end+0xfc00a958>
    a9c4:	90c00a0e 	bge	r18,r3,a9f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    a9c8:	1880004c 	andi	r2,r3,1
    a9cc:	10000426 	beq	r2,zero,a9e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    a9d0:	d9000b17 	ldw	r4,44(sp)
    a9d4:	20800217 	ldw	r2,8(r4)
    a9d8:	1080008c 	andi	r2,r2,2
    a9dc:	1000041e 	bne	r2,zero,a9f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    a9e0:	1880005c 	xori	r2,r3,1
    a9e4:	90bfd216 	blt	r18,r2,a930 <__alt_data_end+0xfc00a930>
    a9e8:	03c00044 	movi	r15,1
    a9ec:	003fed06 	br	a9a4 <__alt_data_end+0xfc00a9a4>
    a9f0:	a8006e16 	blt	r21,zero,abac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    a9f4:	d8801a17 	ldw	r2,104(sp)
    a9f8:	354d883a 	add	r6,r6,r21
    a9fc:	11805026 	beq	r2,r6,ab40 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    aa00:	00c0a50e 	bge	zero,r3,ac98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    aa04:	03c00044 	movi	r15,1
    aa08:	1bc4f03a 	xor	r2,r3,r15
    aa0c:	7815883a 	mov	r10,r15
    aa10:	003fc406 	br	a924 <__alt_data_end+0xfc00a924>
    aa14:	980d883a 	mov	r6,r19
    aa18:	003f8d06 	br	a850 <__alt_data_end+0xfc00a850>
    aa1c:	303fb11e 	bne	r6,zero,a8e4 <__alt_data_end+0xfc00a8e4>
    aa20:	d9400417 	ldw	r5,16(sp)
    aa24:	283fb21e 	bne	r5,zero,a8f0 <__alt_data_end+0xfc00a8f0>
    aa28:	003fcb06 	br	a958 <__alt_data_end+0xfc00a958>
    aa2c:	00c00044 	movi	r3,1
    aa30:	d8c00a45 	stb	r3,41(sp)
    aa34:	003fca06 	br	a960 <__alt_data_end+0xfc00a960>
    aa38:	294000cc 	andi	r5,r5,3
    aa3c:	283fc826 	beq	r5,zero,a960 <__alt_data_end+0xfc00a960>
    aa40:	003f8c06 	br	a874 <__alt_data_end+0xfc00a874>
    aa44:	18001a26 	beq	r3,zero,aab0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    aa48:	181b883a 	mov	r13,r3
    aa4c:	501f883a 	mov	r15,r10
    aa50:	50c4f03a 	xor	r2,r10,r3
    aa54:	003fb306 	br	a924 <__alt_data_end+0xfc00a924>
    aa58:	d8c00b17 	ldw	r3,44(sp)
    aa5c:	1c000117 	ldw	r16,4(r3)
    aa60:	d8c01917 	ldw	r3,100(sp)
    aa64:	19400117 	ldw	r5,4(r3)
    aa68:	81400626 	beq	r16,r5,aa84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    aa6c:	80c00007 	ldb	r3,0(r16)
    aa70:	00800a84 	movi	r2,42
    aa74:	18bf4d26 	beq	r3,r2,a7ac <__alt_data_end+0xfc00a7ac>
    aa78:	8009883a 	mov	r4,r16
    aa7c:	000f24c0 	call	f24c <strcmp>
    aa80:	10005c1e 	bne	r2,zero,abf4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    aa84:	e4c00215 	stw	r19,8(fp)
    aa88:	0005883a 	mov	r2,zero
    aa8c:	003f3b06 	br	a77c <__alt_data_end+0xfc00a77c>
    aa90:	a0c00117 	ldw	r3,4(r20)
    aa94:	d8800517 	ldw	r2,20(sp)
    aa98:	1884b03a 	or	r2,r3,r2
    aa9c:	a0800115 	stw	r2,4(r20)
    aaa0:	003fad06 	br	a958 <__alt_data_end+0xfc00a958>
    aaa4:	10803fcc 	andi	r2,r2,255
    aaa8:	103f911e 	bne	r2,zero,a8f0 <__alt_data_end+0xfc00a8f0>
    aaac:	003faa06 	br	a958 <__alt_data_end+0xfc00a958>
    aab0:	501b883a 	mov	r13,r10
    aab4:	5080005c 	xori	r2,r10,1
    aab8:	5007883a 	mov	r3,r10
    aabc:	90bfbb0e 	bge	r18,r2,a9ac <__alt_data_end+0xfc00a9ac>
    aac0:	6880008c 	andi	r2,r13,2
    aac4:	003f9f06 	br	a944 <__alt_data_end+0xfc00a944>
    aac8:	d8c00417 	ldw	r3,16(sp)
    aacc:	d9400517 	ldw	r5,20(sp)
    aad0:	a0c00015 	stw	r3,0(r20)
    aad4:	a1400115 	stw	r5,4(r20)
    aad8:	18000526 	beq	r3,zero,aaf0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    aadc:	20001626 	beq	r4,zero,ab38 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    aae0:	d9400b17 	ldw	r5,44(sp)
    aae4:	28c00217 	ldw	r3,8(r5)
    aae8:	18c0004c 	andi	r3,r3,1
    aaec:	183f2326 	beq	r3,zero,a77c <__alt_data_end+0xfc00a77c>
    aaf0:	1021883a 	mov	r16,r2
    aaf4:	003f9806 	br	a958 <__alt_data_end+0xfc00a958>
    aaf8:	9280060e 	bge	r18,r10,ab14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    aafc:	5080004c 	andi	r2,r10,1
    ab00:	10002426 	beq	r2,zero,ab94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    ab04:	d8c00b17 	ldw	r3,44(sp)
    ab08:	18800217 	ldw	r2,8(r3)
    ab0c:	1080008c 	andi	r2,r2,2
    ab10:	10003c26 	beq	r2,zero,ac04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    ab14:	d9400417 	ldw	r5,16(sp)
    ab18:	a8004216 	blt	r21,zero,ac24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    ab1c:	d8c01a17 	ldw	r3,104(sp)
    ab20:	2d45883a 	add	r2,r5,r21
    ab24:	18805726 	beq	r3,r2,ac84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    ab28:	7880005c 	xori	r2,r15,1
    ab2c:	781b883a 	mov	r13,r15
    ab30:	5007883a 	mov	r3,r10
    ab34:	003fe106 	br	aabc <__alt_data_end+0xfc00aabc>
    ab38:	1021883a 	mov	r16,r2
    ab3c:	003f8806 	br	a960 <__alt_data_end+0xfc00a960>
    ab40:	03c00184 	movi	r15,6
    ab44:	00ffb016 	blt	zero,r3,aa08 <__alt_data_end+0xfc00aa08>
    ab48:	7815883a 	mov	r10,r15
    ab4c:	7880008c 	andi	r2,r15,2
    ab50:	781b883a 	mov	r13,r15
    ab54:	5007883a 	mov	r3,r10
    ab58:	003f7a06 	br	a944 <__alt_data_end+0xfc00a944>
    ab5c:	a039883a 	mov	fp,r20
    ab60:	e0c00315 	stw	r3,12(fp)
    ab64:	d8c00417 	ldw	r3,16(sp)
    ab68:	a0c00015 	stw	r3,0(r20)
    ab6c:	d8c00517 	ldw	r3,20(sp)
    ab70:	a0c00115 	stw	r3,4(r20)
    ab74:	003f0106 	br	a77c <__alt_data_end+0xfc00a77c>
    ab78:	002d883a 	mov	r22,zero
    ab7c:	003f1106 	br	a7c4 <__alt_data_end+0xfc00a7c4>
    ab80:	8005883a 	mov	r2,r16
    ab84:	003efd06 	br	a77c <__alt_data_end+0xfc00a77c>
    ab88:	00bfff84 	movi	r2,-2
    ab8c:	b8bfbe1e 	bne	r23,r2,aa88 <__alt_data_end+0xfc00aa88>
    ab90:	003ef706 	br	a770 <__alt_data_end+0xfc00a770>
    ab94:	5080005c 	xori	r2,r10,1
    ab98:	90bf840e 	bge	r18,r2,a9ac <__alt_data_end+0xfc00a9ac>
    ab9c:	501b883a 	mov	r13,r10
    aba0:	5080008c 	andi	r2,r10,2
    aba4:	5007883a 	mov	r3,r10
    aba8:	003f6606 	br	a944 <__alt_data_end+0xfc00a944>
    abac:	013fff84 	movi	r4,-2
    abb0:	a9003226 	beq	r21,r4,ac7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    abb4:	d9400917 	ldw	r5,36(sp)
    abb8:	d9001a17 	ldw	r4,104(sp)
    abbc:	d9c01917 	ldw	r7,100(sp)
    abc0:	28800017 	ldw	r2,0(r5)
    abc4:	d9000015 	stw	r4,0(sp)
    abc8:	d9000917 	ldw	r4,36(sp)
    abcc:	10800817 	ldw	r2,32(r2)
    abd0:	a80b883a 	mov	r5,r21
    abd4:	d8c00d15 	stw	r3,52(sp)
    abd8:	db400c15 	stw	r13,48(sp)
    abdc:	103ee83a 	callr	r2
    abe0:	1015883a 	mov	r10,r2
    abe4:	101f883a 	mov	r15,r2
    abe8:	db400c17 	ldw	r13,48(sp)
    abec:	d8c00d17 	ldw	r3,52(sp)
    abf0:	003f6906 	br	a998 <__alt_data_end+0xfc00a998>
    abf4:	d8c00917 	ldw	r3,36(sp)
    abf8:	19400117 	ldw	r5,4(r3)
    abfc:	817ed31e 	bne	r16,r5,a74c <__alt_data_end+0xfc00a74c>
    ac00:	003ed506 	br	a758 <__alt_data_end+0xfc00a758>
    ac04:	5080005c 	xori	r2,r10,1
    ac08:	90bfe416 	blt	r18,r2,ab9c <__alt_data_end+0xfc00ab9c>
    ac0c:	003f6706 	br	a9ac <__alt_data_end+0xfc00a9ac>
    ac10:	00800084 	movi	r2,2
    ac14:	a0800315 	stw	r2,12(r20)
    ac18:	a0000015 	stw	zero,0(r20)
    ac1c:	00800044 	movi	r2,1
    ac20:	003ed606 	br	a77c <__alt_data_end+0xfc00a77c>
    ac24:	013fff84 	movi	r4,-2
    ac28:	a9002526 	beq	r21,r4,acc0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    ac2c:	d8c00917 	ldw	r3,36(sp)
    ac30:	d9c01917 	ldw	r7,100(sp)
    ac34:	d9000917 	ldw	r4,36(sp)
    ac38:	18800017 	ldw	r2,0(r3)
    ac3c:	d8c01a17 	ldw	r3,104(sp)
    ac40:	280d883a 	mov	r6,r5
    ac44:	a80b883a 	mov	r5,r21
    ac48:	d8c00015 	stw	r3,0(sp)
    ac4c:	10800817 	ldw	r2,32(r2)
    ac50:	da800c15 	stw	r10,48(sp)
    ac54:	dbc00d15 	stw	r15,52(sp)
    ac58:	103ee83a 	callr	r2
    ac5c:	da800c17 	ldw	r10,48(sp)
    ac60:	1007883a 	mov	r3,r2
    ac64:	101b883a 	mov	r13,r2
    ac68:	dbc00d17 	ldw	r15,52(sp)
    ac6c:	1284f03a 	xor	r2,r2,r10
    ac70:	003f2c06 	br	a924 <__alt_data_end+0xfc00a924>
    ac74:	00800184 	movi	r2,6
    ac78:	003ebe06 	br	a774 <__alt_data_end+0xfc00a774>
    ac7c:	00ff4b0e 	bge	zero,r3,a9ac <__alt_data_end+0xfc00a9ac>
    ac80:	003f6006 	br	aa04 <__alt_data_end+0xfc00aa04>
    ac84:	5080019c 	xori	r2,r10,6
    ac88:	90800916 	blt	r18,r2,acb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    ac8c:	50c0018c 	andi	r3,r10,6
    ac90:	90ff460e 	bge	r18,r3,a9ac <__alt_data_end+0xfc00a9ac>
    ac94:	003fde06 	br	ac10 <__alt_data_end+0xfc00ac10>
    ac98:	d8c01a17 	ldw	r3,104(sp)
    ac9c:	2d45883a 	add	r2,r5,r21
    aca0:	18800326 	beq	r3,r2,acb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    aca4:	02800044 	movi	r10,1
    aca8:	501f883a 	mov	r15,r10
    acac:	003f9e06 	br	ab28 <__alt_data_end+0xfc00ab28>
    acb0:	03400184 	movi	r13,6
    acb4:	00800084 	movi	r2,2
    acb8:	6807883a 	mov	r3,r13
    acbc:	003f1d06 	br	a934 <__alt_data_end+0xfc00a934>
    acc0:	501b883a 	mov	r13,r10
    acc4:	5080005c 	xori	r2,r10,1
    acc8:	5007883a 	mov	r3,r10
    accc:	003f7b06 	br	aabc <__alt_data_end+0xfc00aabc>

0000acd0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    acd0:	deffef04 	addi	sp,sp,-68
    acd4:	ddc00e15 	stw	r23,56(sp)
    acd8:	dd000b15 	stw	r20,44(sp)
    acdc:	dc400815 	stw	r17,32(sp)
    ace0:	3029883a 	mov	r20,r6
    ace4:	dfc01015 	stw	ra,64(sp)
    ace8:	df000f15 	stw	fp,60(sp)
    acec:	dd800d15 	stw	r22,52(sp)
    acf0:	dd400c15 	stw	r21,48(sp)
    acf4:	dcc00a15 	stw	r19,40(sp)
    acf8:	dc800915 	stw	r18,36(sp)
    acfc:	dc000715 	stw	r16,28(sp)
    ad00:	d9000515 	stw	r4,20(sp)
    ad04:	2823883a 	mov	r17,r5
    ad08:	382f883a 	mov	r23,r7
    ad0c:	000b0b80 	call	b0b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    ad10:	100d883a 	mov	r6,r2
    ad14:	10803fcc 	andi	r2,r2,255
    ad18:	1000441e 	bne	r2,zero,ae2c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    ad1c:	bc000217 	ldw	r16,8(r23)
    ad20:	8080040c 	andi	r2,r16,16
    ad24:	10000226 	beq	r2,zero,ad30 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    ad28:	d8c00517 	ldw	r3,20(sp)
    ad2c:	1c000217 	ldw	r16,8(r3)
    ad30:	d8c00517 	ldw	r3,20(sp)
    ad34:	d8800517 	ldw	r2,20(sp)
    ad38:	1f000317 	ldw	fp,12(r3)
    ad3c:	e01090fa 	slli	r8,fp,3
    ad40:	40c00304 	addi	r3,r8,12
    ad44:	10ed883a 	add	r22,r2,r3
    ad48:	80c0004c 	andi	r3,r16,1
    ad4c:	42000204 	addi	r8,r8,8
    ad50:	d8c00415 	stw	r3,16(sp)
    ad54:	122b883a 	add	r21,r2,r8
    ad58:	e0003226 	beq	fp,zero,ae24 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    ad5c:	b1800017 	ldw	r6,0(r22)
    ad60:	d8000015 	stw	zero,0(sp)
    ad64:	d8000115 	stw	zero,4(sp)
    ad68:	dc000215 	stw	r16,8(sp)
    ad6c:	d8000315 	stw	zero,12(sp)
    ad70:	34c0008c 	andi	r19,r6,2
    ad74:	3480004c 	andi	r18,r6,1
    ad78:	9800021e 	bne	r19,zero,ad84 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    ad7c:	d8c00417 	ldw	r3,16(sp)
    ad80:	18002426 	beq	r3,zero,ae14 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    ad84:	a0003626 	beq	r20,zero,ae60 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    ad88:	300dd23a 	srai	r6,r6,8
    ad8c:	90000326 	beq	r18,zero,ad9c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    ad90:	a0800017 	ldw	r2,0(r20)
    ad94:	118d883a 	add	r6,r2,r6
    ad98:	31800017 	ldw	r6,0(r6)
    ad9c:	a18d883a 	add	r6,r20,r6
    ada0:	a9000017 	ldw	r4,0(r21)
    ada4:	d80f883a 	mov	r7,sp
    ada8:	880b883a 	mov	r5,r17
    adac:	20800017 	ldw	r2,0(r4)
    adb0:	10800617 	ldw	r2,24(r2)
    adb4:	103ee83a 	callr	r2
    adb8:	100d883a 	mov	r6,r2
    adbc:	10803fcc 	andi	r2,r2,255
    adc0:	10001426 	beq	r2,zero,ae14 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    adc4:	d8800317 	ldw	r2,12(sp)
    adc8:	00c00204 	movi	r3,8
    adcc:	10c02626 	beq	r2,r3,ae68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    add0:	d8800117 	ldw	r2,4(sp)
    add4:	00c000c4 	movi	r3,3
    add8:	1880040e 	bge	r3,r2,adec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    addc:	9800031e 	bne	r19,zero,adec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ade0:	00ffff44 	movi	r3,-3
    ade4:	10c4703a 	and	r2,r2,r3
    ade8:	d8800115 	stw	r2,4(sp)
    adec:	b9400317 	ldw	r5,12(r23)
    adf0:	28002126 	beq	r5,zero,ae78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    adf4:	b8800017 	ldw	r2,0(r23)
    adf8:	d9000017 	ldw	r4,0(sp)
    adfc:	11004d1e 	bne	r2,r4,af34 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    ae00:	10003126 	beq	r2,zero,aec8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    ae04:	b9000117 	ldw	r4,4(r23)
    ae08:	d8800117 	ldw	r2,4(sp)
    ae0c:	2084b03a 	or	r2,r4,r2
    ae10:	b8800115 	stw	r2,4(r23)
    ae14:	e73fffc4 	addi	fp,fp,-1
    ae18:	b5bffe04 	addi	r22,r22,-8
    ae1c:	ad7ffe04 	addi	r21,r21,-8
    ae20:	e03fce1e 	bne	fp,zero,ad5c <__alt_data_end+0xfc00ad5c>
    ae24:	b9800117 	ldw	r6,4(r23)
    ae28:	300cc03a 	cmpne	r6,r6,zero
    ae2c:	3005883a 	mov	r2,r6
    ae30:	dfc01017 	ldw	ra,64(sp)
    ae34:	df000f17 	ldw	fp,60(sp)
    ae38:	ddc00e17 	ldw	r23,56(sp)
    ae3c:	dd800d17 	ldw	r22,52(sp)
    ae40:	dd400c17 	ldw	r21,48(sp)
    ae44:	dd000b17 	ldw	r20,44(sp)
    ae48:	dcc00a17 	ldw	r19,40(sp)
    ae4c:	dc800917 	ldw	r18,36(sp)
    ae50:	dc400817 	ldw	r17,32(sp)
    ae54:	dc000717 	ldw	r16,28(sp)
    ae58:	dec01104 	addi	sp,sp,68
    ae5c:	f800283a 	ret
    ae60:	000d883a 	mov	r6,zero
    ae64:	003fce06 	br	ada0 <__alt_data_end+0xfc00ada0>
    ae68:	903fd926 	beq	r18,zero,add0 <__alt_data_end+0xfc00add0>
    ae6c:	a8800017 	ldw	r2,0(r21)
    ae70:	d8800315 	stw	r2,12(sp)
    ae74:	003fd606 	br	add0 <__alt_data_end+0xfc00add0>
    ae78:	d9000017 	ldw	r4,0(sp)
    ae7c:	d8800117 	ldw	r2,4(sp)
    ae80:	00c000c4 	movi	r3,3
    ae84:	b9000015 	stw	r4,0(r23)
    ae88:	d9000217 	ldw	r4,8(sp)
    ae8c:	b8800115 	stw	r2,4(r23)
    ae90:	b9000215 	stw	r4,8(r23)
    ae94:	d9000317 	ldw	r4,12(sp)
    ae98:	b9000315 	stw	r4,12(r23)
    ae9c:	18bfe30e 	bge	r3,r2,ae2c <__alt_data_end+0xfc00ae2c>
    aea0:	1100008c 	andi	r4,r2,2
    aea4:	20001926 	beq	r4,zero,af0c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    aea8:	d8c00517 	ldw	r3,20(sp)
    aeac:	18800217 	ldw	r2,8(r3)
    aeb0:	1080004c 	andi	r2,r2,1
    aeb4:	103fdd26 	beq	r2,zero,ae2c <__alt_data_end+0xfc00ae2c>
    aeb8:	e73fffc4 	addi	fp,fp,-1
    aebc:	b5bffe04 	addi	r22,r22,-8
    aec0:	ad7ffe04 	addi	r21,r21,-8
    aec4:	003fd606 	br	ae20 <__alt_data_end+0xfc00ae20>
    aec8:	d8800317 	ldw	r2,12(sp)
    aecc:	00c00204 	movi	r3,8
    aed0:	10c00b26 	beq	r2,r3,af00 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    aed4:	28c00a26 	beq	r5,r3,af00 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    aed8:	11000117 	ldw	r4,4(r2)
    aedc:	29400117 	ldw	r5,4(r5)
    aee0:	217fc826 	beq	r4,r5,ae04 <__alt_data_end+0xfc00ae04>
    aee4:	20800007 	ldb	r2,0(r4)
    aee8:	00c00a84 	movi	r3,42
    aeec:	10c00426 	beq	r2,r3,af00 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    aef0:	d9800615 	stw	r6,24(sp)
    aef4:	000f24c0 	call	f24c <strcmp>
    aef8:	d9800617 	ldw	r6,24(sp)
    aefc:	103fc126 	beq	r2,zero,ae04 <__alt_data_end+0xfc00ae04>
    af00:	00800084 	movi	r2,2
    af04:	b8800115 	stw	r2,4(r23)
    af08:	003fc806 	br	ae2c <__alt_data_end+0xfc00ae2c>
    af0c:	1080004c 	andi	r2,r2,1
    af10:	103fc626 	beq	r2,zero,ae2c <__alt_data_end+0xfc00ae2c>
    af14:	d8c00517 	ldw	r3,20(sp)
    af18:	18800217 	ldw	r2,8(r3)
    af1c:	1080008c 	andi	r2,r2,2
    af20:	103fc226 	beq	r2,zero,ae2c <__alt_data_end+0xfc00ae2c>
    af24:	e73fffc4 	addi	fp,fp,-1
    af28:	b5bffe04 	addi	r22,r22,-8
    af2c:	ad7ffe04 	addi	r21,r21,-8
    af30:	003fbb06 	br	ae20 <__alt_data_end+0xfc00ae20>
    af34:	00800084 	movi	r2,2
    af38:	b8000015 	stw	zero,0(r23)
    af3c:	b8800115 	stw	r2,4(r23)
    af40:	003fba06 	br	ae2c <__alt_data_end+0xfc00ae2c>

0000af44 <_ZNSt9type_infoD1Ev>:
    af44:	f800283a 	ret

0000af48 <_ZNKSt9type_info14__is_pointer_pEv>:
    af48:	0005883a 	mov	r2,zero
    af4c:	f800283a 	ret

0000af50 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    af50:	0005883a 	mov	r2,zero
    af54:	f800283a 	ret

0000af58 <_ZNSt9type_infoD0Ev>:
    af58:	000afa01 	jmpi	afa0 <_ZdlPv>

0000af5c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    af5c:	21000117 	ldw	r4,4(r4)
    af60:	29400117 	ldw	r5,4(r5)
    af64:	21400c26 	beq	r4,r5,af98 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    af68:	20c00007 	ldb	r3,0(r4)
    af6c:	00800a84 	movi	r2,42
    af70:	18800726 	beq	r3,r2,af90 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    af74:	deffff04 	addi	sp,sp,-4
    af78:	dfc00015 	stw	ra,0(sp)
    af7c:	000f24c0 	call	f24c <strcmp>
    af80:	1005003a 	cmpeq	r2,r2,zero
    af84:	dfc00017 	ldw	ra,0(sp)
    af88:	dec00104 	addi	sp,sp,4
    af8c:	f800283a 	ret
    af90:	0005883a 	mov	r2,zero
    af94:	f800283a 	ret
    af98:	00800044 	movi	r2,1
    af9c:	f800283a 	ret

0000afa0 <_ZdlPv>:
    afa0:	000e2401 	jmpi	e240 <free>

0000afa4 <__cxa_pure_virtual>:
    afa4:	014000f4 	movhi	r5,3
    afa8:	deffff04 	addi	sp,sp,-4
    afac:	29696004 	addi	r5,r5,-23168
    afb0:	018006c4 	movi	r6,27
    afb4:	01000084 	movi	r4,2
    afb8:	dfc00015 	stw	ra,0(sp)
    afbc:	001f8100 	call	1f810 <write>
    afc0:	000b36c0 	call	b36c <_ZSt9terminatev>

0000afc4 <__cxa_deleted_virtual>:
    afc4:	014000f4 	movhi	r5,3
    afc8:	deffff04 	addi	sp,sp,-4
    afcc:	29696704 	addi	r5,r5,-23140
    afd0:	01800784 	movi	r6,30
    afd4:	01000084 	movi	r4,2
    afd8:	dfc00015 	stw	ra,0(sp)
    afdc:	001f8100 	call	1f810 <write>
    afe0:	000b36c0 	call	b36c <_ZSt9terminatev>

0000afe4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    afe4:	20800017 	ldw	r2,0(r4)
    afe8:	defffa04 	addi	sp,sp,-24
    afec:	dc000415 	stw	r16,16(sp)
    aff0:	10800617 	ldw	r2,24(r2)
    aff4:	3021883a 	mov	r16,r6
    aff8:	31800017 	ldw	r6,0(r6)
    affc:	00c00404 	movi	r3,16
    b000:	d8c00215 	stw	r3,8(sp)
    b004:	dfc00515 	stw	ra,20(sp)
    b008:	d8000015 	stw	zero,0(sp)
    b00c:	d8000115 	stw	zero,4(sp)
    b010:	d8000315 	stw	zero,12(sp)
    b014:	d80f883a 	mov	r7,sp
    b018:	103ee83a 	callr	r2
    b01c:	d8800117 	ldw	r2,4(sp)
    b020:	00c00184 	movi	r3,6
    b024:	1080018c 	andi	r2,r2,6
    b028:	10c00526 	beq	r2,r3,b040 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    b02c:	0005883a 	mov	r2,zero
    b030:	dfc00517 	ldw	ra,20(sp)
    b034:	dc000417 	ldw	r16,16(sp)
    b038:	dec00604 	addi	sp,sp,24
    b03c:	f800283a 	ret
    b040:	d8c00017 	ldw	r3,0(sp)
    b044:	00800044 	movi	r2,1
    b048:	80c00015 	stw	r3,0(r16)
    b04c:	dfc00517 	ldw	ra,20(sp)
    b050:	dc000417 	ldw	r16,16(sp)
    b054:	dec00604 	addi	sp,sp,24
    b058:	f800283a 	ret

0000b05c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    b05c:	d8800017 	ldw	r2,0(sp)
    b060:	11800226 	beq	r2,r6,b06c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    b064:	00800044 	movi	r2,1
    b068:	f800283a 	ret
    b06c:	00800184 	movi	r2,6
    b070:	f800283a 	ret

0000b074 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    b074:	008000f4 	movhi	r2,3
    b078:	10a97d04 	addi	r2,r2,-23052
    b07c:	20800015 	stw	r2,0(r4)
    b080:	000af441 	jmpi	af44 <_ZNSt9type_infoD1Ev>

0000b084 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    b084:	defffe04 	addi	sp,sp,-8
    b088:	008000f4 	movhi	r2,3
    b08c:	dc000015 	stw	r16,0(sp)
    b090:	dfc00115 	stw	ra,4(sp)
    b094:	10a97d04 	addi	r2,r2,-23052
    b098:	20800015 	stw	r2,0(r4)
    b09c:	2021883a 	mov	r16,r4
    b0a0:	000af440 	call	af44 <_ZNSt9type_infoD1Ev>
    b0a4:	8009883a 	mov	r4,r16
    b0a8:	dfc00117 	ldw	ra,4(sp)
    b0ac:	dc000017 	ldw	r16,0(sp)
    b0b0:	dec00204 	addi	sp,sp,8
    b0b4:	000afa01 	jmpi	afa0 <_ZdlPv>

0000b0b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    b0b8:	21000117 	ldw	r4,4(r4)
    b0bc:	29400117 	ldw	r5,4(r5)
    b0c0:	defffd04 	addi	sp,sp,-12
    b0c4:	dc400115 	stw	r17,4(sp)
    b0c8:	dc000015 	stw	r16,0(sp)
    b0cc:	dfc00215 	stw	ra,8(sp)
    b0d0:	3023883a 	mov	r17,r6
    b0d4:	3821883a 	mov	r16,r7
    b0d8:	21400526 	beq	r4,r5,b0f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    b0dc:	20c00007 	ldb	r3,0(r4)
    b0e0:	00800a84 	movi	r2,42
    b0e4:	18800d26 	beq	r3,r2,b11c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b0e8:	000f24c0 	call	f24c <strcmp>
    b0ec:	10000b1e 	bne	r2,zero,b11c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b0f0:	00800204 	movi	r2,8
    b0f4:	80800315 	stw	r2,12(r16)
    b0f8:	00800184 	movi	r2,6
    b0fc:	80800115 	stw	r2,4(r16)
    b100:	84400015 	stw	r17,0(r16)
    b104:	00800044 	movi	r2,1
    b108:	dfc00217 	ldw	ra,8(sp)
    b10c:	dc400117 	ldw	r17,4(sp)
    b110:	dc000017 	ldw	r16,0(sp)
    b114:	dec00304 	addi	sp,sp,12
    b118:	f800283a 	ret
    b11c:	0005883a 	mov	r2,zero
    b120:	003ff906 	br	b108 <__alt_data_end+0xfc00b108>

0000b124 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    b124:	defffa04 	addi	sp,sp,-24
    b128:	dc800415 	stw	r18,16(sp)
    b12c:	d8800817 	ldw	r2,32(sp)
    b130:	dc800617 	ldw	r18,24(sp)
    b134:	dc400315 	stw	r17,12(sp)
    b138:	dc000215 	stw	r16,8(sp)
    b13c:	dfc00515 	stw	ra,20(sp)
    b140:	dc400917 	ldw	r17,36(sp)
    b144:	24000117 	ldw	r16,4(r4)
    b148:	90801526 	beq	r18,r2,b1a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    b14c:	39400117 	ldw	r5,4(r7)
    b150:	2c000826 	beq	r5,r16,b174 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    b154:	80c00007 	ldb	r3,0(r16)
    b158:	00800a84 	movi	r2,42
    b15c:	18800926 	beq	r3,r2,b184 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b160:	8009883a 	mov	r4,r16
    b164:	d9800115 	stw	r6,4(sp)
    b168:	000f24c0 	call	f24c <strcmp>
    b16c:	d9800117 	ldw	r6,4(sp)
    b170:	1000041e 	bne	r2,zero,b184 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b174:	00800044 	movi	r2,1
    b178:	8c800015 	stw	r18,0(r17)
    b17c:	89800115 	stw	r6,4(r17)
    b180:	88800315 	stw	r2,12(r17)
    b184:	0005883a 	mov	r2,zero
    b188:	dfc00517 	ldw	ra,20(sp)
    b18c:	dc800417 	ldw	r18,16(sp)
    b190:	dc400317 	ldw	r17,12(sp)
    b194:	dc000217 	ldw	r16,8(sp)
    b198:	dec00604 	addi	sp,sp,24
    b19c:	f800283a 	ret
    b1a0:	d8800717 	ldw	r2,28(sp)
    b1a4:	11400117 	ldw	r5,4(r2)
    b1a8:	81400a26 	beq	r16,r5,b1d4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    b1ac:	80c00007 	ldb	r3,0(r16)
    b1b0:	00800a84 	movi	r2,42
    b1b4:	18800c26 	beq	r3,r2,b1e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    b1b8:	8009883a 	mov	r4,r16
    b1bc:	d9800115 	stw	r6,4(sp)
    b1c0:	d9c00015 	stw	r7,0(sp)
    b1c4:	000f24c0 	call	f24c <strcmp>
    b1c8:	d9800117 	ldw	r6,4(sp)
    b1cc:	d9c00017 	ldw	r7,0(sp)
    b1d0:	1000021e 	bne	r2,zero,b1dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    b1d4:	89800215 	stw	r6,8(r17)
    b1d8:	003fea06 	br	b184 <__alt_data_end+0xfc00b184>
    b1dc:	39400117 	ldw	r5,4(r7)
    b1e0:	817fdf1e 	bne	r16,r5,b160 <__alt_data_end+0xfc00b160>
    b1e4:	003fe306 	br	b174 <__alt_data_end+0xfc00b174>
    b1e8:	38800117 	ldw	r2,4(r7)
    b1ec:	80bfe51e 	bne	r16,r2,b184 <__alt_data_end+0xfc00b184>
    b1f0:	003fe006 	br	b174 <__alt_data_end+0xfc00b174>

0000b1f4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    b1f4:	20800117 	ldw	r2,4(r4)
    b1f8:	28c00117 	ldw	r3,4(r5)
    b1fc:	10c02926 	beq	r2,r3,b2a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    b200:	defffb04 	addi	sp,sp,-20
    b204:	dcc00315 	stw	r19,12(sp)
    b208:	dc800215 	stw	r18,8(sp)
    b20c:	dc400115 	stw	r17,4(sp)
    b210:	dc000015 	stw	r16,0(sp)
    b214:	dfc00415 	stw	ra,16(sp)
    b218:	2821883a 	mov	r16,r5
    b21c:	11400007 	ldb	r5,0(r2)
    b220:	2025883a 	mov	r18,r4
    b224:	01000a84 	movi	r4,42
    b228:	3823883a 	mov	r17,r7
    b22c:	3027883a 	mov	r19,r6
    b230:	29000626 	beq	r5,r4,b24c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b234:	180b883a 	mov	r5,r3
    b238:	1009883a 	mov	r4,r2
    b23c:	000f24c0 	call	f24c <strcmp>
    b240:	1000021e 	bne	r2,zero,b24c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b244:	00800044 	movi	r2,1
    b248:	00000306 	br	b258 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    b24c:	008000c4 	movi	r2,3
    b250:	1440082e 	bgeu	r2,r17,b274 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    b254:	0005883a 	mov	r2,zero
    b258:	dfc00417 	ldw	ra,16(sp)
    b25c:	dcc00317 	ldw	r19,12(sp)
    b260:	dc800217 	ldw	r18,8(sp)
    b264:	dc400117 	ldw	r17,4(sp)
    b268:	dc000017 	ldw	r16,0(sp)
    b26c:	dec00504 	addi	sp,sp,20
    b270:	f800283a 	ret
    b274:	80800017 	ldw	r2,0(r16)
    b278:	980d883a 	mov	r6,r19
    b27c:	900b883a 	mov	r5,r18
    b280:	10800517 	ldw	r2,20(r2)
    b284:	8009883a 	mov	r4,r16
    b288:	dfc00417 	ldw	ra,16(sp)
    b28c:	dcc00317 	ldw	r19,12(sp)
    b290:	dc800217 	ldw	r18,8(sp)
    b294:	dc400117 	ldw	r17,4(sp)
    b298:	dc000017 	ldw	r16,0(sp)
    b29c:	dec00504 	addi	sp,sp,20
    b2a0:	1000683a 	jmp	r2
    b2a4:	00800044 	movi	r2,1
    b2a8:	f800283a 	ret

0000b2ac <_ZN10__cxxabiv111__terminateEPFvvE>:
    b2ac:	00800074 	movhi	r2,1
    b2b0:	deffef04 	addi	sp,sp,-68
    b2b4:	10af0504 	addi	r2,r2,-17388
    b2b8:	d8800615 	stw	r2,24(sp)
    b2bc:	008000b4 	movhi	r2,2
    b2c0:	108e3404 	addi	r2,r2,14544
    b2c4:	d8800715 	stw	r2,28(sp)
    b2c8:	00800074 	movhi	r2,1
    b2cc:	10acc104 	addi	r2,r2,-19708
    b2d0:	d9000d15 	stw	r4,52(sp)
    b2d4:	d809883a 	mov	r4,sp
    b2d8:	d8800915 	stw	r2,36(sp)
    b2dc:	dfc01015 	stw	ra,64(sp)
    b2e0:	df000f15 	stw	fp,60(sp)
    b2e4:	dec00815 	stw	sp,32(sp)
    b2e8:	dec00a15 	stw	sp,40(sp)
    b2ec:	000de4c0 	call	de4c <_Unwind_SjLj_Register>
    b2f0:	00800044 	movi	r2,1
    b2f4:	d8800115 	stw	r2,4(sp)
    b2f8:	d8800d17 	ldw	r2,52(sp)
    b2fc:	103ee83a 	callr	r2
    b300:	000e1c80 	call	e1c8 <abort>
    b304:	d8c00217 	ldw	r3,8(sp)
    b308:	d8800117 	ldw	r2,4(sp)
    b30c:	d8c00d15 	stw	r3,52(sp)
    b310:	d8c00317 	ldw	r3,12(sp)
    b314:	d8c00e15 	stw	r3,56(sp)
    b318:	10000b26 	beq	r2,zero,b348 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    b31c:	10bfffc4 	addi	r2,r2,-1
    b320:	10000126 	beq	r2,zero,b328 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    b324:	003b68fa 	trap	3
    b328:	d8000115 	stw	zero,4(sp)
    b32c:	000c6580 	call	c658 <__cxa_end_catch>
    b330:	d8c00e17 	ldw	r3,56(sp)
    b334:	00bfffc4 	movi	r2,-1
    b338:	18800826 	beq	r3,r2,b35c <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    b33c:	d9000d17 	ldw	r4,52(sp)
    b340:	d8800115 	stw	r2,4(sp)
    b344:	000e0480 	call	e048 <_Unwind_SjLj_Resume>
    b348:	d9000d17 	ldw	r4,52(sp)
    b34c:	000c5a40 	call	c5a4 <__cxa_begin_catch>
    b350:	00800084 	movi	r2,2
    b354:	d8800115 	stw	r2,4(sp)
    b358:	000e1c80 	call	e1c8 <abort>
    b35c:	d8800e17 	ldw	r2,56(sp)
    b360:	d9000d17 	ldw	r4,52(sp)
    b364:	d8800115 	stw	r2,4(sp)
    b368:	000c2140 	call	c214 <__cxa_call_unexpected>

0000b36c <_ZSt9terminatev>:
    b36c:	008000f4 	movhi	r2,3
    b370:	10b6fd04 	addi	r2,r2,-9228
    b374:	11000017 	ldw	r4,0(r2)
    b378:	deffff04 	addi	sp,sp,-4
    b37c:	dfc00015 	stw	ra,0(sp)
    b380:	000b2ac0 	call	b2ac <_ZN10__cxxabiv111__terminateEPFvvE>

0000b384 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    b384:	deffff04 	addi	sp,sp,-4
    b388:	dfc00015 	stw	ra,0(sp)
    b38c:	203ee83a 	callr	r4
    b390:	000b36c0 	call	b36c <_ZSt9terminatev>

0000b394 <_ZSt10unexpectedv>:
    b394:	008000f4 	movhi	r2,3
    b398:	10b6fc04 	addi	r2,r2,-9232
    b39c:	11000017 	ldw	r4,0(r2)
    b3a0:	deffff04 	addi	sp,sp,-4
    b3a4:	dfc00015 	stw	ra,0(sp)
    b3a8:	000b3840 	call	b384 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000b3ac <_ZSt13set_terminatePFvvE>:
    b3ac:	00c000f4 	movhi	r3,3
    b3b0:	18f6fd04 	addi	r3,r3,-9228
    b3b4:	18800017 	ldw	r2,0(r3)
    b3b8:	19000015 	stw	r4,0(r3)
    b3bc:	f800283a 	ret

0000b3c0 <_ZSt13get_terminatev>:
    b3c0:	008000f4 	movhi	r2,3
    b3c4:	10b6fd04 	addi	r2,r2,-9228
    b3c8:	10800017 	ldw	r2,0(r2)
    b3cc:	f800283a 	ret

0000b3d0 <_ZSt14set_unexpectedPFvvE>:
    b3d0:	00c000f4 	movhi	r3,3
    b3d4:	18f6fc04 	addi	r3,r3,-9232
    b3d8:	18800017 	ldw	r2,0(r3)
    b3dc:	19000015 	stw	r4,0(r3)
    b3e0:	f800283a 	ret

0000b3e4 <_ZSt14get_unexpectedv>:
    b3e4:	008000f4 	movhi	r2,3
    b3e8:	10b6fc04 	addi	r2,r2,-9232
    b3ec:	10800017 	ldw	r2,0(r2)
    b3f0:	f800283a 	ret

0000b3f4 <_ZL21size_of_encoded_valueh>:
    b3f4:	deffff04 	addi	sp,sp,-4
    b3f8:	dfc00015 	stw	ra,0(sp)
    b3fc:	20c03fcc 	andi	r3,r4,255
    b400:	00803fc4 	movi	r2,255
    b404:	18802026 	beq	r3,r2,b488 <_ZL21size_of_encoded_valueh+0x94>
    b408:	210001cc 	andi	r4,r4,7
    b40c:	00800144 	movi	r2,5
    b410:	11001c36 	bltu	r2,r4,b484 <_ZL21size_of_encoded_valueh+0x90>
    b414:	200890ba 	slli	r4,r4,2
    b418:	00800074 	movhi	r2,1
    b41c:	10ad0b04 	addi	r2,r2,-19412
    b420:	2089883a 	add	r4,r4,r2
    b424:	20800017 	ldw	r2,0(r4)
    b428:	1000683a 	jmp	r2
    b42c:	0000b444 	movi	zero,721
    b430:	0000b484 	movi	zero,722
    b434:	0000b454 	movui	zero,721
    b438:	0000b444 	movi	zero,721
    b43c:	0000b474 	movhi	zero,721
    b440:	0000b464 	muli	zero,zero,721
    b444:	00800104 	movi	r2,4
    b448:	dfc00017 	ldw	ra,0(sp)
    b44c:	dec00104 	addi	sp,sp,4
    b450:	f800283a 	ret
    b454:	00800084 	movi	r2,2
    b458:	dfc00017 	ldw	ra,0(sp)
    b45c:	dec00104 	addi	sp,sp,4
    b460:	f800283a 	ret
    b464:	00800044 	movi	r2,1
    b468:	dfc00017 	ldw	ra,0(sp)
    b46c:	dec00104 	addi	sp,sp,4
    b470:	f800283a 	ret
    b474:	00800204 	movi	r2,8
    b478:	dfc00017 	ldw	ra,0(sp)
    b47c:	dec00104 	addi	sp,sp,4
    b480:	f800283a 	ret
    b484:	000e1c80 	call	e1c8 <abort>
    b488:	0005883a 	mov	r2,zero
    b48c:	dfc00017 	ldw	ra,0(sp)
    b490:	dec00104 	addi	sp,sp,4
    b494:	f800283a 	ret

0000b498 <_ZL28read_encoded_value_with_basehjPKhPj>:
    b498:	deffff04 	addi	sp,sp,-4
    b49c:	dfc00015 	stw	ra,0(sp)
    b4a0:	20c03fcc 	andi	r3,r4,255
    b4a4:	00801404 	movi	r2,80
    b4a8:	18807326 	beq	r3,r2,b678 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    b4ac:	20c003cc 	andi	r3,r4,15
    b4b0:	00800304 	movi	r2,12
    b4b4:	10c06f36 	bltu	r2,r3,b674 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    b4b8:	180690ba 	slli	r3,r3,2
    b4bc:	02000074 	movhi	r8,1
    b4c0:	422d3404 	addi	r8,r8,-19248
    b4c4:	1a07883a 	add	r3,r3,r8
    b4c8:	18800017 	ldw	r2,0(r3)
    b4cc:	1000683a 	jmp	r2
    b4d0:	0000b504 	movi	zero,724
    b4d4:	0000b620 	cmpeqi	zero,zero,728
    b4d8:	0000b65c 	xori	zero,zero,729
    b4dc:	0000b504 	movi	zero,724
    b4e0:	0000b568 	cmpgeui	zero,zero,725
    b4e4:	0000b5bc 	xorhi	zero,zero,726
    b4e8:	0000b674 	movhi	zero,729
    b4ec:	0000b674 	movhi	zero,729
    b4f0:	0000b674 	movhi	zero,729
    b4f4:	0000b5c8 	cmpgei	zero,zero,727
    b4f8:	0000b598 	cmpnei	zero,zero,726
    b4fc:	0000b504 	movi	zero,724
    b500:	0000b568 	cmpgeui	zero,zero,725
    b504:	30800043 	ldbu	r2,1(r6)
    b508:	30c00083 	ldbu	r3,2(r6)
    b50c:	324000c3 	ldbu	r9,3(r6)
    b510:	32000003 	ldbu	r8,0(r6)
    b514:	1004923a 	slli	r2,r2,8
    b518:	1806943a 	slli	r3,r3,16
    b51c:	4812963a 	slli	r9,r9,24
    b520:	1204b03a 	or	r2,r2,r8
    b524:	1884b03a 	or	r2,r3,r2
    b528:	4886b03a 	or	r3,r9,r2
    b52c:	30800104 	addi	r2,r6,4
    b530:	18000926 	beq	r3,zero,b558 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b534:	22001c0c 	andi	r8,r4,112
    b538:	02400404 	movi	r9,16
    b53c:	42405726 	beq	r8,r9,b69c <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    b540:	21003fcc 	andi	r4,r4,255
    b544:	2100201c 	xori	r4,r4,128
    b548:	213fe004 	addi	r4,r4,-128
    b54c:	1947883a 	add	r3,r3,r5
    b550:	2000010e 	bge	r4,zero,b558 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b554:	18c00017 	ldw	r3,0(r3)
    b558:	38c00015 	stw	r3,0(r7)
    b55c:	dfc00017 	ldw	ra,0(sp)
    b560:	dec00104 	addi	sp,sp,4
    b564:	f800283a 	ret
    b568:	30800043 	ldbu	r2,1(r6)
    b56c:	30c00083 	ldbu	r3,2(r6)
    b570:	324000c3 	ldbu	r9,3(r6)
    b574:	32000003 	ldbu	r8,0(r6)
    b578:	1004923a 	slli	r2,r2,8
    b57c:	1806943a 	slli	r3,r3,16
    b580:	4812963a 	slli	r9,r9,24
    b584:	1204b03a 	or	r2,r2,r8
    b588:	1884b03a 	or	r2,r3,r2
    b58c:	4886b03a 	or	r3,r9,r2
    b590:	30800204 	addi	r2,r6,8
    b594:	003fe606 	br	b530 <__alt_data_end+0xfc00b530>
    b598:	30c00043 	ldbu	r3,1(r6)
    b59c:	32000003 	ldbu	r8,0(r6)
    b5a0:	30800084 	addi	r2,r6,2
    b5a4:	1806923a 	slli	r3,r3,8
    b5a8:	1a06b03a 	or	r3,r3,r8
    b5ac:	18ffffcc 	andi	r3,r3,65535
    b5b0:	18e0001c 	xori	r3,r3,32768
    b5b4:	18e00004 	addi	r3,r3,-32768
    b5b8:	003fdd06 	br	b530 <__alt_data_end+0xfc00b530>
    b5bc:	30c00003 	ldbu	r3,0(r6)
    b5c0:	30800044 	addi	r2,r6,1
    b5c4:	003fda06 	br	b530 <__alt_data_end+0xfc00b530>
    b5c8:	3017883a 	mov	r11,r6
    b5cc:	0007883a 	mov	r3,zero
    b5d0:	0013883a 	mov	r9,zero
    b5d4:	5a800003 	ldbu	r10,0(r11)
    b5d8:	58800044 	addi	r2,r11,1
    b5dc:	1017883a 	mov	r11,r2
    b5e0:	52001fcc 	andi	r8,r10,127
    b5e4:	4250983a 	sll	r8,r8,r9
    b5e8:	53003fcc 	andi	r12,r10,255
    b5ec:	6300201c 	xori	r12,r12,128
    b5f0:	633fe004 	addi	r12,r12,-128
    b5f4:	1a06b03a 	or	r3,r3,r8
    b5f8:	4a4001c4 	addi	r9,r9,7
    b5fc:	603ff516 	blt	r12,zero,b5d4 <__alt_data_end+0xfc00b5d4>
    b600:	020007c4 	movi	r8,31
    b604:	427fca36 	bltu	r8,r9,b530 <__alt_data_end+0xfc00b530>
    b608:	5280100c 	andi	r10,r10,64
    b60c:	503fc826 	beq	r10,zero,b530 <__alt_data_end+0xfc00b530>
    b610:	023fffc4 	movi	r8,-1
    b614:	4252983a 	sll	r9,r8,r9
    b618:	1a46b03a 	or	r3,r3,r9
    b61c:	003fc506 	br	b534 <__alt_data_end+0xfc00b534>
    b620:	3017883a 	mov	r11,r6
    b624:	0007883a 	mov	r3,zero
    b628:	0015883a 	mov	r10,zero
    b62c:	5a000003 	ldbu	r8,0(r11)
    b630:	58800044 	addi	r2,r11,1
    b634:	1017883a 	mov	r11,r2
    b638:	42401fcc 	andi	r9,r8,127
    b63c:	4a92983a 	sll	r9,r9,r10
    b640:	42003fcc 	andi	r8,r8,255
    b644:	4200201c 	xori	r8,r8,128
    b648:	423fe004 	addi	r8,r8,-128
    b64c:	1a46b03a 	or	r3,r3,r9
    b650:	528001c4 	addi	r10,r10,7
    b654:	403ff516 	blt	r8,zero,b62c <__alt_data_end+0xfc00b62c>
    b658:	003fb506 	br	b530 <__alt_data_end+0xfc00b530>
    b65c:	30c00043 	ldbu	r3,1(r6)
    b660:	32000003 	ldbu	r8,0(r6)
    b664:	30800084 	addi	r2,r6,2
    b668:	1806923a 	slli	r3,r3,8
    b66c:	1a06b03a 	or	r3,r3,r8
    b670:	003faf06 	br	b530 <__alt_data_end+0xfc00b530>
    b674:	000e1c80 	call	e1c8 <abort>
    b678:	308000c4 	addi	r2,r6,3
    b67c:	00ffff04 	movi	r3,-4
    b680:	10c4703a 	and	r2,r2,r3
    b684:	10c00017 	ldw	r3,0(r2)
    b688:	10800104 	addi	r2,r2,4
    b68c:	38c00015 	stw	r3,0(r7)
    b690:	dfc00017 	ldw	ra,0(sp)
    b694:	dec00104 	addi	sp,sp,4
    b698:	f800283a 	ret
    b69c:	300b883a 	mov	r5,r6
    b6a0:	003fa706 	br	b540 <__alt_data_end+0xfc00b540>

0000b6a4 <_ZL15get_ttype_entryP16lsda_header_infom>:
    b6a4:	defffc04 	addi	sp,sp,-16
    b6a8:	dfc00315 	stw	ra,12(sp)
    b6ac:	dc000215 	stw	r16,8(sp)
    b6b0:	2021883a 	mov	r16,r4
    b6b4:	21000503 	ldbu	r4,20(r4)
    b6b8:	d9400115 	stw	r5,4(sp)
    b6bc:	000b3f40 	call	b3f4 <_ZL21size_of_encoded_valueh>
    b6c0:	d9400117 	ldw	r5,4(sp)
    b6c4:	1009883a 	mov	r4,r2
    b6c8:	000ccac0 	call	ccac <__mulsi3>
    b6cc:	81800317 	ldw	r6,12(r16)
    b6d0:	81400217 	ldw	r5,8(r16)
    b6d4:	81000503 	ldbu	r4,20(r16)
    b6d8:	d80f883a 	mov	r7,sp
    b6dc:	308dc83a 	sub	r6,r6,r2
    b6e0:	000b4980 	call	b498 <_ZL28read_encoded_value_with_basehjPKhPj>
    b6e4:	d8800017 	ldw	r2,0(sp)
    b6e8:	dfc00317 	ldw	ra,12(sp)
    b6ec:	dc000217 	ldw	r16,8(sp)
    b6f0:	dec00404 	addi	sp,sp,16
    b6f4:	f800283a 	ret

0000b6f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    b6f8:	deffff04 	addi	sp,sp,-4
    b6fc:	dfc00015 	stw	ra,0(sp)
    b700:	20c03fcc 	andi	r3,r4,255
    b704:	00803fc4 	movi	r2,255
    b708:	18800e26 	beq	r3,r2,b744 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b70c:	20801c0c 	andi	r2,r4,112
    b710:	00c00804 	movi	r3,32
    b714:	10c01726 	beq	r2,r3,b774 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    b718:	18800e2e 	bgeu	r3,r2,b754 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    b71c:	00c01004 	movi	r3,64
    b720:	10c01026 	beq	r2,r3,b764 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    b724:	00c01404 	movi	r3,80
    b728:	10c00626 	beq	r2,r3,b744 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b72c:	00c00c04 	movi	r3,48
    b730:	10c00b1e 	bne	r2,r3,b760 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    b734:	2809883a 	mov	r4,r5
    b738:	dfc00017 	ldw	ra,0(sp)
    b73c:	dec00104 	addi	sp,sp,4
    b740:	000df241 	jmpi	df24 <_Unwind_GetDataRelBase>
    b744:	0005883a 	mov	r2,zero
    b748:	dfc00017 	ldw	ra,0(sp)
    b74c:	dec00104 	addi	sp,sp,4
    b750:	f800283a 	ret
    b754:	103ffb26 	beq	r2,zero,b744 <__alt_data_end+0xfc00b744>
    b758:	00c00404 	movi	r3,16
    b75c:	10fff926 	beq	r2,r3,b744 <__alt_data_end+0xfc00b744>
    b760:	000e1c80 	call	e1c8 <abort>
    b764:	2809883a 	mov	r4,r5
    b768:	dfc00017 	ldw	ra,0(sp)
    b76c:	dec00104 	addi	sp,sp,4
    b770:	000df141 	jmpi	df14 <_Unwind_GetRegionStart>
    b774:	2809883a 	mov	r4,r5
    b778:	dfc00017 	ldw	ra,0(sp)
    b77c:	dec00104 	addi	sp,sp,4
    b780:	000df2c1 	jmpi	df2c <_Unwind_GetTextRelBase>

0000b784 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    b784:	defffb04 	addi	sp,sp,-20
    b788:	dcc00315 	stw	r19,12(sp)
    b78c:	dc400115 	stw	r17,4(sp)
    b790:	dc000015 	stw	r16,0(sp)
    b794:	dfc00415 	stw	ra,16(sp)
    b798:	dc800215 	stw	r18,8(sp)
    b79c:	2027883a 	mov	r19,r4
    b7a0:	2821883a 	mov	r16,r5
    b7a4:	3023883a 	mov	r17,r6
    b7a8:	20003f26 	beq	r4,zero,b8a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    b7ac:	000df140 	call	df14 <_Unwind_GetRegionStart>
    b7b0:	88800015 	stw	r2,0(r17)
    b7b4:	84800003 	ldbu	r18,0(r16)
    b7b8:	00c03fc4 	movi	r3,255
    b7bc:	84000044 	addi	r16,r16,1
    b7c0:	90c03726 	beq	r18,r3,b8a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    b7c4:	980b883a 	mov	r5,r19
    b7c8:	9009883a 	mov	r4,r18
    b7cc:	000b6f80 	call	b6f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b7d0:	800d883a 	mov	r6,r16
    b7d4:	89c00104 	addi	r7,r17,4
    b7d8:	100b883a 	mov	r5,r2
    b7dc:	9009883a 	mov	r4,r18
    b7e0:	000b4980 	call	b498 <_ZL28read_encoded_value_with_basehjPKhPj>
    b7e4:	1021883a 	mov	r16,r2
    b7e8:	80c00003 	ldbu	r3,0(r16)
    b7ec:	01003fc4 	movi	r4,255
    b7f0:	80800044 	addi	r2,r16,1
    b7f4:	88c00505 	stb	r3,20(r17)
    b7f8:	18c03fcc 	andi	r3,r3,255
    b7fc:	19002c26 	beq	r3,r4,b8b0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    b800:	100f883a 	mov	r7,r2
    b804:	000d883a 	mov	r6,zero
    b808:	000b883a 	mov	r5,zero
    b80c:	38c00003 	ldbu	r3,0(r7)
    b810:	10800044 	addi	r2,r2,1
    b814:	100f883a 	mov	r7,r2
    b818:	19001fcc 	andi	r4,r3,127
    b81c:	2148983a 	sll	r4,r4,r5
    b820:	18c03fcc 	andi	r3,r3,255
    b824:	18c0201c 	xori	r3,r3,128
    b828:	18ffe004 	addi	r3,r3,-128
    b82c:	310cb03a 	or	r6,r6,r4
    b830:	294001c4 	addi	r5,r5,7
    b834:	183ff516 	blt	r3,zero,b80c <__alt_data_end+0xfc00b80c>
    b838:	118d883a 	add	r6,r2,r6
    b83c:	89800315 	stw	r6,12(r17)
    b840:	10c00003 	ldbu	r3,0(r2)
    b844:	000d883a 	mov	r6,zero
    b848:	10800044 	addi	r2,r2,1
    b84c:	88c00545 	stb	r3,21(r17)
    b850:	000b883a 	mov	r5,zero
    b854:	10c00003 	ldbu	r3,0(r2)
    b858:	10800044 	addi	r2,r2,1
    b85c:	19001fcc 	andi	r4,r3,127
    b860:	2148983a 	sll	r4,r4,r5
    b864:	18c03fcc 	andi	r3,r3,255
    b868:	18c0201c 	xori	r3,r3,128
    b86c:	18ffe004 	addi	r3,r3,-128
    b870:	310cb03a 	or	r6,r6,r4
    b874:	294001c4 	addi	r5,r5,7
    b878:	183ff616 	blt	r3,zero,b854 <__alt_data_end+0xfc00b854>
    b87c:	118d883a 	add	r6,r2,r6
    b880:	89800415 	stw	r6,16(r17)
    b884:	dfc00417 	ldw	ra,16(sp)
    b888:	dcc00317 	ldw	r19,12(sp)
    b88c:	dc800217 	ldw	r18,8(sp)
    b890:	dc400117 	ldw	r17,4(sp)
    b894:	dc000017 	ldw	r16,0(sp)
    b898:	dec00504 	addi	sp,sp,20
    b89c:	f800283a 	ret
    b8a0:	88800115 	stw	r2,4(r17)
    b8a4:	003fd006 	br	b7e8 <__alt_data_end+0xfc00b7e8>
    b8a8:	0005883a 	mov	r2,zero
    b8ac:	003fc006 	br	b7b0 <__alt_data_end+0xfc00b7b0>
    b8b0:	88000315 	stw	zero,12(r17)
    b8b4:	003fe206 	br	b840 <__alt_data_end+0xfc00b840>

0000b8b8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    b8b8:	28800017 	ldw	r2,0(r5)
    b8bc:	30c00017 	ldw	r3,0(r6)
    b8c0:	defffb04 	addi	sp,sp,-20
    b8c4:	10800217 	ldw	r2,8(r2)
    b8c8:	dc400315 	stw	r17,12(sp)
    b8cc:	dc000215 	stw	r16,8(sp)
    b8d0:	d9400115 	stw	r5,4(sp)
    b8d4:	dfc00415 	stw	ra,16(sp)
    b8d8:	2021883a 	mov	r16,r4
    b8dc:	d8c00015 	stw	r3,0(sp)
    b8e0:	2809883a 	mov	r4,r5
    b8e4:	3023883a 	mov	r17,r6
    b8e8:	103ee83a 	callr	r2
    b8ec:	10803fcc 	andi	r2,r2,255
    b8f0:	d9400117 	ldw	r5,4(sp)
    b8f4:	10000326 	beq	r2,zero,b904 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    b8f8:	d8800017 	ldw	r2,0(sp)
    b8fc:	10800017 	ldw	r2,0(r2)
    b900:	d8800015 	stw	r2,0(sp)
    b904:	80800017 	ldw	r2,0(r16)
    b908:	01c00044 	movi	r7,1
    b90c:	d80d883a 	mov	r6,sp
    b910:	10800417 	ldw	r2,16(r2)
    b914:	8009883a 	mov	r4,r16
    b918:	103ee83a 	callr	r2
    b91c:	10c03fcc 	andi	r3,r2,255
    b920:	18000226 	beq	r3,zero,b92c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    b924:	d8c00017 	ldw	r3,0(sp)
    b928:	88c00015 	stw	r3,0(r17)
    b92c:	dfc00417 	ldw	ra,16(sp)
    b930:	dc400317 	ldw	r17,12(sp)
    b934:	dc000217 	ldw	r16,8(sp)
    b938:	dec00504 	addi	sp,sp,20
    b93c:	f800283a 	ret

0000b940 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    b940:	defff304 	addi	sp,sp,-52
    b944:	dc800615 	stw	r18,24(sp)
    b948:	3825d23a 	srai	r18,r7,8
    b94c:	dd000815 	stw	r20,32(sp)
    b950:	dcc00715 	stw	r19,28(sp)
    b954:	dfc00c15 	stw	ra,48(sp)
    b958:	ddc00b15 	stw	r23,44(sp)
    b95c:	dd800a15 	stw	r22,40(sp)
    b960:	dd400915 	stw	r21,36(sp)
    b964:	dc400515 	stw	r17,20(sp)
    b968:	dc000415 	stw	r16,16(sp)
    b96c:	d9400215 	stw	r5,8(sp)
    b970:	3827883a 	mov	r19,r7
    b974:	2029883a 	mov	r20,r4
    b978:	9000010e 	bge	r18,zero,b980 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    b97c:	04a5c83a 	sub	r18,zero,r18
    b980:	000b883a 	mov	r5,zero
    b984:	01000144 	movi	r4,5
    b988:	d9800315 	stw	r6,12(sp)
    b98c:	000b6f80 	call	b6f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b990:	d9800317 	ldw	r6,12(sp)
    b994:	d9c00104 	addi	r7,sp,4
    b998:	100b883a 	mov	r5,r2
    b99c:	01000144 	movi	r4,5
    b9a0:	000b4980 	call	b498 <_ZL28read_encoded_value_with_basehjPKhPj>
    b9a4:	017ffe44 	movi	r5,-7
    b9a8:	1009883a 	mov	r4,r2
    b9ac:	1021883a 	mov	r16,r2
    b9b0:	000ccac0 	call	ccac <__mulsi3>
    b9b4:	102d883a 	mov	r22,r2
    b9b8:	0023883a 	mov	r17,zero
    b9bc:	85400003 	ldbu	r21,0(r16)
    b9c0:	8009883a 	mov	r4,r16
    b9c4:	014001c4 	movi	r5,7
    b9c8:	000ccac0 	call	ccac <__mulsi3>
    b9cc:	a8c01fcc 	andi	r3,r21,127
    b9d0:	1585883a 	add	r2,r2,r22
    b9d4:	1886983a 	sll	r3,r3,r2
    b9d8:	ad403fcc 	andi	r21,r21,255
    b9dc:	ad40201c 	xori	r21,r21,128
    b9e0:	ad7fe004 	addi	r21,r21,-128
    b9e4:	84000044 	addi	r16,r16,1
    b9e8:	88e2b03a 	or	r17,r17,r3
    b9ec:	a83ff316 	blt	r21,zero,b9bc <__alt_data_end+0xfc00b9bc>
    b9f0:	8461883a 	add	r16,r16,r17
    b9f4:	017ffe44 	movi	r5,-7
    b9f8:	8009883a 	mov	r4,r16
    b9fc:	000ccac0 	call	ccac <__mulsi3>
    ba00:	102d883a 	mov	r22,r2
    ba04:	002b883a 	mov	r21,zero
    ba08:	84400003 	ldbu	r17,0(r16)
    ba0c:	8009883a 	mov	r4,r16
    ba10:	014001c4 	movi	r5,7
    ba14:	000ccac0 	call	ccac <__mulsi3>
    ba18:	88c01fcc 	andi	r3,r17,127
    ba1c:	1585883a 	add	r2,r2,r22
    ba20:	1886983a 	sll	r3,r3,r2
    ba24:	8c403fcc 	andi	r17,r17,255
    ba28:	8c40201c 	xori	r17,r17,128
    ba2c:	8c7fe004 	addi	r17,r17,-128
    ba30:	84000044 	addi	r16,r16,1
    ba34:	a8eab03a 	or	r21,r21,r3
    ba38:	883ff316 	blt	r17,zero,ba08 <__alt_data_end+0xfc00ba08>
    ba3c:	94403fcc 	andi	r17,r18,255
    ba40:	8c7fffc4 	addi	r17,r17,-1
    ba44:	8463883a 	add	r17,r16,r17
    ba48:	ad4000c4 	addi	r21,r21,3
    ba4c:	00bfff04 	movi	r2,-4
    ba50:	ac21883a 	add	r16,r21,r16
    ba54:	017ffe44 	movi	r5,-7
    ba58:	8809883a 	mov	r4,r17
    ba5c:	80a0703a 	and	r16,r16,r2
    ba60:	000ccac0 	call	ccac <__mulsi3>
    ba64:	0025883a 	mov	r18,zero
    ba68:	102f883a 	mov	r23,r2
    ba6c:	8d800003 	ldbu	r22,0(r17)
    ba70:	8809883a 	mov	r4,r17
    ba74:	014001c4 	movi	r5,7
    ba78:	000ccac0 	call	ccac <__mulsi3>
    ba7c:	b0c01fcc 	andi	r3,r22,127
    ba80:	15c5883a 	add	r2,r2,r23
    ba84:	1886983a 	sll	r3,r3,r2
    ba88:	b5803fcc 	andi	r22,r22,255
    ba8c:	b580201c 	xori	r22,r22,128
    ba90:	8d400044 	addi	r21,r17,1
    ba94:	b5bfe004 	addi	r22,r22,-128
    ba98:	90e4b03a 	or	r18,r18,r3
    ba9c:	a823883a 	mov	r17,r21
    baa0:	b03ff216 	blt	r22,zero,ba6c <__alt_data_end+0xfc00ba6c>
    baa4:	9cc03fcc 	andi	r19,r19,255
    baa8:	90002426 	beq	r18,zero,bb3c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    baac:	9809883a 	mov	r4,r19
    bab0:	000b3f40 	call	b3f4 <_ZL21size_of_encoded_valueh>
    bab4:	100b883a 	mov	r5,r2
    bab8:	913fffc4 	addi	r4,r18,-1
    babc:	000ccac0 	call	ccac <__mulsi3>
    bac0:	d9400d17 	ldw	r5,52(sp)
    bac4:	d80f883a 	mov	r7,sp
    bac8:	9809883a 	mov	r4,r19
    bacc:	140d883a 	add	r6,r2,r16
    bad0:	000b4980 	call	b498 <_ZL28read_encoded_value_with_basehjPKhPj>
    bad4:	d9000017 	ldw	r4,0(sp)
    bad8:	d9800204 	addi	r6,sp,8
    badc:	a00b883a 	mov	r5,r20
    bae0:	000b8b80 	call	b8b8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bae4:	10c03fcc 	andi	r3,r2,255
    bae8:	1800151e 	bne	r3,zero,bb40 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    baec:	a809883a 	mov	r4,r21
    baf0:	017ffe44 	movi	r5,-7
    baf4:	000ccac0 	call	ccac <__mulsi3>
    baf8:	102d883a 	mov	r22,r2
    bafc:	a809883a 	mov	r4,r21
    bb00:	0025883a 	mov	r18,zero
    bb04:	24400003 	ldbu	r17,0(r4)
    bb08:	014001c4 	movi	r5,7
    bb0c:	000ccac0 	call	ccac <__mulsi3>
    bb10:	88c01fcc 	andi	r3,r17,127
    bb14:	1585883a 	add	r2,r2,r22
    bb18:	1886983a 	sll	r3,r3,r2
    bb1c:	8c403fcc 	andi	r17,r17,255
    bb20:	8c40201c 	xori	r17,r17,128
    bb24:	ad400044 	addi	r21,r21,1
    bb28:	8c7fe004 	addi	r17,r17,-128
    bb2c:	90e4b03a 	or	r18,r18,r3
    bb30:	a809883a 	mov	r4,r21
    bb34:	883ff316 	blt	r17,zero,bb04 <__alt_data_end+0xfc00bb04>
    bb38:	003fdb06 	br	baa8 <__alt_data_end+0xfc00baa8>
    bb3c:	0005883a 	mov	r2,zero
    bb40:	dfc00c17 	ldw	ra,48(sp)
    bb44:	ddc00b17 	ldw	r23,44(sp)
    bb48:	dd800a17 	ldw	r22,40(sp)
    bb4c:	dd400917 	ldw	r21,36(sp)
    bb50:	dd000817 	ldw	r20,32(sp)
    bb54:	dcc00717 	ldw	r19,28(sp)
    bb58:	dc800617 	ldw	r18,24(sp)
    bb5c:	dc400517 	ldw	r17,20(sp)
    bb60:	dc000417 	ldw	r16,16(sp)
    bb64:	dec00d04 	addi	sp,sp,52
    bb68:	f800283a 	ret

0000bb6c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    bb6c:	defffb04 	addi	sp,sp,-20
    bb70:	dc000115 	stw	r16,4(sp)
    bb74:	24000317 	ldw	r16,12(r4)
    bb78:	01ce303a 	nor	r7,zero,r7
    bb7c:	dc800315 	stw	r18,12(sp)
    bb80:	dc400215 	stw	r17,8(sp)
    bb84:	dfc00415 	stw	ra,16(sp)
    bb88:	2023883a 	mov	r17,r4
    bb8c:	2825883a 	mov	r18,r5
    bb90:	d9800015 	stw	r6,0(sp)
    bb94:	81e1883a 	add	r16,r16,r7
    bb98:	800d883a 	mov	r6,r16
    bb9c:	000b883a 	mov	r5,zero
    bba0:	0009883a 	mov	r4,zero
    bba4:	30800003 	ldbu	r2,0(r6)
    bba8:	84000044 	addi	r16,r16,1
    bbac:	800d883a 	mov	r6,r16
    bbb0:	10c01fcc 	andi	r3,r2,127
    bbb4:	1906983a 	sll	r3,r3,r4
    bbb8:	10803fcc 	andi	r2,r2,255
    bbbc:	1080201c 	xori	r2,r2,128
    bbc0:	10bfe004 	addi	r2,r2,-128
    bbc4:	28cab03a 	or	r5,r5,r3
    bbc8:	210001c4 	addi	r4,r4,7
    bbcc:	103ff516 	blt	r2,zero,bba4 <__alt_data_end+0xfc00bba4>
    bbd0:	28000e26 	beq	r5,zero,bc0c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    bbd4:	8809883a 	mov	r4,r17
    bbd8:	000b6a40 	call	b6a4 <_ZL15get_ttype_entryP16lsda_header_infom>
    bbdc:	d80d883a 	mov	r6,sp
    bbe0:	900b883a 	mov	r5,r18
    bbe4:	1009883a 	mov	r4,r2
    bbe8:	000b8b80 	call	b8b8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bbec:	10c03fcc 	andi	r3,r2,255
    bbf0:	183fe926 	beq	r3,zero,bb98 <__alt_data_end+0xfc00bb98>
    bbf4:	dfc00417 	ldw	ra,16(sp)
    bbf8:	dc800317 	ldw	r18,12(sp)
    bbfc:	dc400217 	ldw	r17,8(sp)
    bc00:	dc000117 	ldw	r16,4(sp)
    bc04:	dec00504 	addi	sp,sp,20
    bc08:	f800283a 	ret
    bc0c:	0005883a 	mov	r2,zero
    bc10:	003ff806 	br	bbf4 <__alt_data_end+0xfc00bbf4>

0000bc14 <__gxx_personality_sj0>:
    bc14:	00800074 	movhi	r2,1
    bc18:	deffdd04 	addi	sp,sp,-140
    bc1c:	10af0504 	addi	r2,r2,-17388
    bc20:	d8800e15 	stw	r2,56(sp)
    bc24:	008000b4 	movhi	r2,2
    bc28:	108e3a04 	addi	r2,r2,14568
    bc2c:	d8800f15 	stw	r2,60(sp)
    bc30:	00800074 	movhi	r2,1
    bc34:	10b07b04 	addi	r2,r2,-15892
    bc38:	d9001515 	stw	r4,84(sp)
    bc3c:	d9000804 	addi	r4,sp,32
    bc40:	d8801115 	stw	r2,68(sp)
    bc44:	dfc02215 	stw	ra,136(sp)
    bc48:	df002115 	stw	fp,132(sp)
    bc4c:	dec01015 	stw	sp,64(sp)
    bc50:	dec01215 	stw	sp,72(sp)
    bc54:	d9401915 	stw	r5,100(sp)
    bc58:	d9801615 	stw	r6,88(sp)
    bc5c:	d9c01715 	stw	r7,92(sp)
    bc60:	000de4c0 	call	de4c <_Unwind_SjLj_Register>
    bc64:	d8c01517 	ldw	r3,84(sp)
    bc68:	d8000715 	stw	zero,28(sp)
    bc6c:	d8000615 	stw	zero,24(sp)
    bc70:	00800044 	movi	r2,1
    bc74:	18800926 	beq	r3,r2,bc9c <__gxx_personality_sj0+0x88>
    bc78:	01c000c4 	movi	r7,3
    bc7c:	d9c01515 	stw	r7,84(sp)
    bc80:	d9000804 	addi	r4,sp,32
    bc84:	000de640 	call	de64 <_Unwind_SjLj_Unregister>
    bc88:	d8801517 	ldw	r2,84(sp)
    bc8c:	dfc02217 	ldw	ra,136(sp)
    bc90:	df002117 	ldw	fp,132(sp)
    bc94:	dec02304 	addi	sp,sp,140
    bc98:	f800283a 	ret
    bc9c:	d9001617 	ldw	r4,88(sp)
    bca0:	00af3574 	movhi	r2,48341
    bca4:	d9c01717 	ldw	r7,92(sp)
    bca8:	10b54004 	addi	r2,r2,-11008
    bcac:	00ee2cb4 	movhi	r3,47282
    bcb0:	2085883a 	add	r2,r4,r2
    bcb4:	18eaaf04 	addi	r3,r3,-21828
    bcb8:	d8801b15 	stw	r2,108(sp)
    bcbc:	38c7883a 	add	r3,r7,r3
    bcc0:	1105803a 	cmpltu	r2,r2,r4
    bcc4:	10c7883a 	add	r3,r2,r3
    bcc8:	d8c01c15 	stw	r3,112(sp)
    bccc:	d8c01917 	ldw	r3,100(sp)
    bcd0:	00800184 	movi	r2,6
    bcd4:	18805426 	beq	r3,r2,be28 <__gxx_personality_sj0+0x214>
    bcd8:	d9002417 	ldw	r4,144(sp)
    bcdc:	00bfffc4 	movi	r2,-1
    bce0:	d8800915 	stw	r2,36(sp)
    bce4:	000df080 	call	df08 <_Unwind_GetLanguageSpecificData>
    bce8:	d8801a15 	stw	r2,104(sp)
    bcec:	1000c926 	beq	r2,zero,c014 <__gxx_personality_sj0+0x400>
    bcf0:	d9002417 	ldw	r4,144(sp)
    bcf4:	d80d883a 	mov	r6,sp
    bcf8:	100b883a 	mov	r5,r2
    bcfc:	000b7840 	call	b784 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    bd00:	d9402417 	ldw	r5,144(sp)
    bd04:	d9000503 	ldbu	r4,20(sp)
    bd08:	d8801515 	stw	r2,84(sp)
    bd0c:	000b6f80 	call	b6f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bd10:	d9002417 	ldw	r4,144(sp)
    bd14:	d9400604 	addi	r5,sp,24
    bd18:	d8800215 	stw	r2,8(sp)
    bd1c:	000ded80 	call	ded8 <_Unwind_GetIPInfo>
    bd20:	d8c00617 	ldw	r3,24(sp)
    bd24:	18006126 	beq	r3,zero,beac <__gxx_personality_sj0+0x298>
    bd28:	1000ba16 	blt	r2,zero,c014 <__gxx_personality_sj0+0x400>
    bd2c:	10002f1e 	bne	r2,zero,bdec <__gxx_personality_sj0+0x1d8>
    bd30:	d8001515 	stw	zero,84(sp)
    bd34:	d8001f15 	stw	zero,124(sp)
    bd38:	d8001815 	stw	zero,96(sp)
    bd3c:	00c00044 	movi	r3,1
    bd40:	d9001917 	ldw	r4,100(sp)
    bd44:	2080004c 	andi	r2,r4,1
    bd48:	1000b51e 	bne	r2,zero,c020 <__gxx_personality_sj0+0x40c>
    bd4c:	d9001917 	ldw	r4,100(sp)
    bd50:	2080020c 	andi	r2,r4,8
    bd54:	1000b71e 	bne	r2,zero,c034 <__gxx_personality_sj0+0x420>
    bd58:	d9c01c17 	ldw	r7,112(sp)
    bd5c:	3800b826 	beq	r7,zero,c040 <__gxx_personality_sj0+0x42c>
    bd60:	00800044 	movi	r2,1
    bd64:	1880b526 	beq	r3,r2,c03c <__gxx_personality_sj0+0x428>
    bd68:	d9c01517 	ldw	r7,84(sp)
    bd6c:	3800f516 	blt	r7,zero,c144 <__gxx_personality_sj0+0x530>
    bd70:	d9002417 	ldw	r4,144(sp)
    bd74:	d9802317 	ldw	r6,140(sp)
    bd78:	00bfffc4 	movi	r2,-1
    bd7c:	000b883a 	mov	r5,zero
    bd80:	d8800915 	stw	r2,36(sp)
    bd84:	000deac0 	call	deac <_Unwind_SetGR>
    bd88:	d9801517 	ldw	r6,84(sp)
    bd8c:	d9002417 	ldw	r4,144(sp)
    bd90:	01400044 	movi	r5,1
    bd94:	000deac0 	call	deac <_Unwind_SetGR>
    bd98:	d9002417 	ldw	r4,144(sp)
    bd9c:	d9401f17 	ldw	r5,124(sp)
    bda0:	000def80 	call	def8 <_Unwind_SetIP>
    bda4:	010001c4 	movi	r4,7
    bda8:	d9001515 	stw	r4,84(sp)
    bdac:	003fb406 	br	bc80 <__alt_data_end+0xfc00bc80>
    bdb0:	000f883a 	mov	r7,zero
    bdb4:	000d883a 	mov	r6,zero
    bdb8:	19000003 	ldbu	r4,0(r3)
    bdbc:	18c00044 	addi	r3,r3,1
    bdc0:	d8c01515 	stw	r3,84(sp)
    bdc4:	21401fcc 	andi	r5,r4,127
    bdc8:	298a983a 	sll	r5,r5,r6
    bdcc:	21003fcc 	andi	r4,r4,255
    bdd0:	2100201c 	xori	r4,r4,128
    bdd4:	213fe004 	addi	r4,r4,-128
    bdd8:	394eb03a 	or	r7,r7,r5
    bddc:	318001c4 	addi	r6,r6,7
    bde0:	203ff516 	blt	r4,zero,bdb8 <__alt_data_end+0xfc00bdb8>
    bde4:	10bfffc4 	addi	r2,r2,-1
    bde8:	10003226 	beq	r2,zero,beb4 <__gxx_personality_sj0+0x2a0>
    bdec:	d9c01517 	ldw	r7,84(sp)
    bdf0:	0011883a 	mov	r8,zero
    bdf4:	000d883a 	mov	r6,zero
    bdf8:	39000003 	ldbu	r4,0(r7)
    bdfc:	38c00044 	addi	r3,r7,1
    be00:	180f883a 	mov	r7,r3
    be04:	21401fcc 	andi	r5,r4,127
    be08:	298a983a 	sll	r5,r5,r6
    be0c:	21003fcc 	andi	r4,r4,255
    be10:	2100201c 	xori	r4,r4,128
    be14:	213fe004 	addi	r4,r4,-128
    be18:	4150b03a 	or	r8,r8,r5
    be1c:	318001c4 	addi	r6,r6,7
    be20:	203ff516 	blt	r4,zero,bdf8 <__alt_data_end+0xfc00bdf8>
    be24:	003fe206 	br	bdb0 <__alt_data_end+0xfc00bdb0>
    be28:	d9001c17 	ldw	r4,112(sp)
    be2c:	203faa1e 	bne	r4,zero,bcd8 <__alt_data_end+0xfc00bcd8>
    be30:	d9c01517 	ldw	r7,84(sp)
    be34:	d8801b17 	ldw	r2,108(sp)
    be38:	38bfa736 	bltu	r7,r2,bcd8 <__alt_data_end+0xfc00bcd8>
    be3c:	d8c02317 	ldw	r3,140(sp)
    be40:	18fffe17 	ldw	r3,-8(r3)
    be44:	d8c01f15 	stw	r3,124(sp)
    be48:	18008226 	beq	r3,zero,c054 <__gxx_personality_sj0+0x440>
    be4c:	d9002317 	ldw	r4,140(sp)
    be50:	d9c02317 	ldw	r7,140(sp)
    be54:	213ffb17 	ldw	r4,-20(r4)
    be58:	39fffd17 	ldw	r7,-12(r7)
    be5c:	d9001515 	stw	r4,84(sp)
    be60:	d9c01a15 	stw	r7,104(sp)
    be64:	d8801517 	ldw	r2,84(sp)
    be68:	103fc10e 	bge	r2,zero,bd70 <__alt_data_end+0xfc00bd70>
    be6c:	d9002417 	ldw	r4,144(sp)
    be70:	d9401a17 	ldw	r5,104(sp)
    be74:	d80d883a 	mov	r6,sp
    be78:	00bfffc4 	movi	r2,-1
    be7c:	d8800915 	stw	r2,36(sp)
    be80:	000b7840 	call	b784 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    be84:	d9402417 	ldw	r5,144(sp)
    be88:	d9000503 	ldbu	r4,20(sp)
    be8c:	000b6f80 	call	b6f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    be90:	d9000503 	ldbu	r4,20(sp)
    be94:	d9402417 	ldw	r5,144(sp)
    be98:	d8800215 	stw	r2,8(sp)
    be9c:	000b6f80 	call	b6f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bea0:	d8c02317 	ldw	r3,140(sp)
    bea4:	18bffe15 	stw	r2,-8(r3)
    bea8:	003fb106 	br	bd70 <__alt_data_end+0xfc00bd70>
    beac:	10bfffc4 	addi	r2,r2,-1
    beb0:	003f9d06 	br	bd28 <__alt_data_end+0xfc00bd28>
    beb4:	42000044 	addi	r8,r8,1
    beb8:	da001f15 	stw	r8,124(sp)
    bebc:	38005326 	beq	r7,zero,c00c <__gxx_personality_sj0+0x3f8>
    bec0:	d8800417 	ldw	r2,16(sp)
    bec4:	39ffffc4 	addi	r7,r7,-1
    bec8:	11c5883a 	add	r2,r2,r7
    becc:	d8801815 	stw	r2,96(sp)
    bed0:	40005026 	beq	r8,zero,c014 <__gxx_personality_sj0+0x400>
    bed4:	10007426 	beq	r2,zero,c0a8 <__gxx_personality_sj0+0x494>
    bed8:	d8801917 	ldw	r2,100(sp)
    bedc:	1080020c 	andi	r2,r2,8
    bee0:	d8802015 	stw	r2,128(sp)
    bee4:	1000a21e 	bne	r2,zero,c170 <__gxx_personality_sj0+0x55c>
    bee8:	d8c01c17 	ldw	r3,112(sp)
    beec:	1800b026 	beq	r3,zero,c1b0 <__gxx_personality_sj0+0x59c>
    bef0:	01c000f4 	movhi	r7,3
    bef4:	39f70204 	addi	r7,r7,-9208
    bef8:	d9c01e15 	stw	r7,120(sp)
    befc:	d8001d05 	stb	zero,116(sp)
    bf00:	d8c01817 	ldw	r3,96(sp)
    bf04:	d8001515 	stw	zero,84(sp)
    bf08:	0009883a 	mov	r4,zero
    bf0c:	19400003 	ldbu	r5,0(r3)
    bf10:	18800044 	addi	r2,r3,1
    bf14:	d9c01517 	ldw	r7,84(sp)
    bf18:	28c01fcc 	andi	r3,r5,127
    bf1c:	1906983a 	sll	r3,r3,r4
    bf20:	29803fcc 	andi	r6,r5,255
    bf24:	3180201c 	xori	r6,r6,128
    bf28:	38ceb03a 	or	r7,r7,r3
    bf2c:	d8801715 	stw	r2,92(sp)
    bf30:	31bfe004 	addi	r6,r6,-128
    bf34:	d9c01515 	stw	r7,84(sp)
    bf38:	210001c4 	addi	r4,r4,7
    bf3c:	1007883a 	mov	r3,r2
    bf40:	303ff216 	blt	r6,zero,bf0c <__alt_data_end+0xfc00bf0c>
    bf44:	00c007c4 	movi	r3,31
    bf48:	19000836 	bltu	r3,r4,bf6c <__gxx_personality_sj0+0x358>
    bf4c:	2940100c 	andi	r5,r5,64
    bf50:	28000626 	beq	r5,zero,bf6c <__gxx_personality_sj0+0x358>
    bf54:	01c00044 	movi	r7,1
    bf58:	3908983a 	sll	r4,r7,r4
    bf5c:	d8c01517 	ldw	r3,84(sp)
    bf60:	0109c83a 	sub	r4,zero,r4
    bf64:	1906b03a 	or	r3,r3,r4
    bf68:	d8c01515 	stw	r3,84(sp)
    bf6c:	d8001615 	stw	zero,88(sp)
    bf70:	0009883a 	mov	r4,zero
    bf74:	11400003 	ldbu	r5,0(r2)
    bf78:	d9c01617 	ldw	r7,88(sp)
    bf7c:	10800044 	addi	r2,r2,1
    bf80:	28c01fcc 	andi	r3,r5,127
    bf84:	1906983a 	sll	r3,r3,r4
    bf88:	29803fcc 	andi	r6,r5,255
    bf8c:	3180201c 	xori	r6,r6,128
    bf90:	38ceb03a 	or	r7,r7,r3
    bf94:	31bfe004 	addi	r6,r6,-128
    bf98:	d9c01615 	stw	r7,88(sp)
    bf9c:	210001c4 	addi	r4,r4,7
    bfa0:	303ff416 	blt	r6,zero,bf74 <__alt_data_end+0xfc00bf74>
    bfa4:	008007c4 	movi	r2,31
    bfa8:	11000736 	bltu	r2,r4,bfc8 <__gxx_personality_sj0+0x3b4>
    bfac:	2940100c 	andi	r5,r5,64
    bfb0:	28000526 	beq	r5,zero,bfc8 <__gxx_personality_sj0+0x3b4>
    bfb4:	00c00044 	movi	r3,1
    bfb8:	1908983a 	sll	r4,r3,r4
    bfbc:	0109c83a 	sub	r4,zero,r4
    bfc0:	390eb03a 	or	r7,r7,r4
    bfc4:	d9c01615 	stw	r7,88(sp)
    bfc8:	d9001517 	ldw	r4,84(sp)
    bfcc:	20003c26 	beq	r4,zero,c0c0 <__gxx_personality_sj0+0x4ac>
    bfd0:	01003e0e 	bge	zero,r4,c0cc <__gxx_personality_sj0+0x4b8>
    bfd4:	01ffffc4 	movi	r7,-1
    bfd8:	200b883a 	mov	r5,r4
    bfdc:	d809883a 	mov	r4,sp
    bfe0:	d9c00915 	stw	r7,36(sp)
    bfe4:	000b6a40 	call	b6a4 <_ZL15get_ttype_entryP16lsda_header_infom>
    bfe8:	10005f26 	beq	r2,zero,c168 <__gxx_personality_sj0+0x554>
    bfec:	d8c01e17 	ldw	r3,120(sp)
    bff0:	1800571e 	bne	r3,zero,c150 <__gxx_personality_sj0+0x53c>
    bff4:	d9001617 	ldw	r4,88(sp)
    bff8:	20002926 	beq	r4,zero,c0a0 <__gxx_personality_sj0+0x48c>
    bffc:	d9c01717 	ldw	r7,92(sp)
    c000:	390f883a 	add	r7,r7,r4
    c004:	d9c01815 	stw	r7,96(sp)
    c008:	003fbd06 	br	bf00 <__alt_data_end+0xfc00bf00>
    c00c:	d8c01f17 	ldw	r3,124(sp)
    c010:	1800251e 	bne	r3,zero,c0a8 <__gxx_personality_sj0+0x494>
    c014:	01000204 	movi	r4,8
    c018:	d9001515 	stw	r4,84(sp)
    c01c:	003f1806 	br	bc80 <__alt_data_end+0xfc00bc80>
    c020:	d8801c17 	ldw	r2,112(sp)
    c024:	10000d26 	beq	r2,zero,c05c <__gxx_personality_sj0+0x448>
    c028:	00800184 	movi	r2,6
    c02c:	d8801515 	stw	r2,84(sp)
    c030:	003f1306 	br	bc80 <__alt_data_end+0xfc00bc80>
    c034:	00800044 	movi	r2,1
    c038:	18bf4d1e 	bne	r3,r2,bd70 <__alt_data_end+0xfc00bd70>
    c03c:	000b36c0 	call	b36c <_ZSt9terminatev>
    c040:	d9001b17 	ldw	r4,108(sp)
    c044:	00800044 	movi	r2,1
    c048:	113f4536 	bltu	r2,r4,bd60 <__alt_data_end+0xfc00bd60>
    c04c:	00800044 	movi	r2,1
    c050:	18bf841e 	bne	r3,r2,be64 <__alt_data_end+0xfc00be64>
    c054:	d9002317 	ldw	r4,140(sp)
    c058:	000c9f00 	call	c9f0 <__cxa_call_terminate>
    c05c:	d8c01b17 	ldw	r3,108(sp)
    c060:	00800044 	movi	r2,1
    c064:	10fff036 	bltu	r2,r3,c028 <__alt_data_end+0xfc00c028>
    c068:	d9002317 	ldw	r4,140(sp)
    c06c:	d8801817 	ldw	r2,96(sp)
    c070:	d9c01517 	ldw	r7,84(sp)
    c074:	d8c01a17 	ldw	r3,104(sp)
    c078:	20bffc15 	stw	r2,-16(r4)
    c07c:	d8800717 	ldw	r2,28(sp)
    c080:	21fffb15 	stw	r7,-20(r4)
    c084:	d9c01f17 	ldw	r7,124(sp)
    c088:	20bfff15 	stw	r2,-4(r4)
    c08c:	00800184 	movi	r2,6
    c090:	20fffd15 	stw	r3,-12(r4)
    c094:	21fffe15 	stw	r7,-8(r4)
    c098:	d8801515 	stw	r2,84(sp)
    c09c:	003ef806 	br	bc80 <__alt_data_end+0xfc00bc80>
    c0a0:	d8801d03 	ldbu	r2,116(sp)
    c0a4:	103fdb26 	beq	r2,zero,c014 <__alt_data_end+0xfc00c014>
    c0a8:	d8c01917 	ldw	r3,100(sp)
    c0ac:	1880004c 	andi	r2,r3,1
    c0b0:	103fd81e 	bne	r2,zero,c014 <__alt_data_end+0xfc00c014>
    c0b4:	d8001515 	stw	zero,84(sp)
    c0b8:	00c00084 	movi	r3,2
    c0bc:	003f2306 	br	bd4c <__alt_data_end+0xfc00bd4c>
    c0c0:	00c00044 	movi	r3,1
    c0c4:	d8c01d05 	stb	r3,116(sp)
    c0c8:	003fca06 	br	bff4 <__alt_data_end+0xfc00bff4>
    c0cc:	d9001e17 	ldw	r4,120(sp)
    c0d0:	20000426 	beq	r4,zero,c0e4 <__gxx_personality_sj0+0x4d0>
    c0d4:	d9c02017 	ldw	r7,128(sp)
    c0d8:	3800021e 	bne	r7,zero,c0e4 <__gxx_personality_sj0+0x4d0>
    c0dc:	d8801c17 	ldw	r2,112(sp)
    c0e0:	10002726 	beq	r2,zero,c180 <__gxx_personality_sj0+0x56c>
    c0e4:	d8801517 	ldw	r2,84(sp)
    c0e8:	000d883a 	mov	r6,zero
    c0ec:	000b883a 	mov	r5,zero
    c0f0:	0088303a 	nor	r4,zero,r2
    c0f4:	d8800317 	ldw	r2,12(sp)
    c0f8:	1109883a 	add	r4,r2,r4
    c0fc:	20800003 	ldbu	r2,0(r4)
    c100:	21000044 	addi	r4,r4,1
    c104:	10c01fcc 	andi	r3,r2,127
    c108:	1946983a 	sll	r3,r3,r5
    c10c:	10803fcc 	andi	r2,r2,255
    c110:	1080201c 	xori	r2,r2,128
    c114:	10bfe004 	addi	r2,r2,-128
    c118:	30ccb03a 	or	r6,r6,r3
    c11c:	294001c4 	addi	r5,r5,7
    c120:	103ff616 	blt	r2,zero,c0fc <__alt_data_end+0xfc00c0fc>
    c124:	3005003a 	cmpeq	r2,r6,zero
    c128:	10803fcc 	andi	r2,r2,255
    c12c:	103fb126 	beq	r2,zero,bff4 <__alt_data_end+0xfc00bff4>
    c130:	d9c01917 	ldw	r7,100(sp)
    c134:	3880004c 	andi	r2,r7,1
    c138:	103fb91e 	bne	r2,zero,c020 <__alt_data_end+0xfc00c020>
    c13c:	d8802017 	ldw	r2,128(sp)
    c140:	10002d26 	beq	r2,zero,c1f8 <__gxx_personality_sj0+0x5e4>
    c144:	00800044 	movi	r2,1
    c148:	d8800915 	stw	r2,36(sp)
    c14c:	000b3940 	call	b394 <_ZSt10unexpectedv>
    c150:	d9800704 	addi	r6,sp,28
    c154:	180b883a 	mov	r5,r3
    c158:	1009883a 	mov	r4,r2
    c15c:	000b8b80 	call	b8b8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c160:	10803fcc 	andi	r2,r2,255
    c164:	103fa326 	beq	r2,zero,bff4 <__alt_data_end+0xfc00bff4>
    c168:	00c000c4 	movi	r3,3
    c16c:	003ef406 	br	bd40 <__alt_data_end+0xfc00bd40>
    c170:	010000f4 	movhi	r4,3
    c174:	21370004 	addi	r4,r4,-9216
    c178:	d9001e15 	stw	r4,120(sp)
    c17c:	003f5f06 	br	befc <__alt_data_end+0xfc00befc>
    c180:	d9001b17 	ldw	r4,108(sp)
    c184:	00c00044 	movi	r3,1
    c188:	193fd636 	bltu	r3,r4,c0e4 <__alt_data_end+0xfc00c0e4>
    c18c:	01ffffc4 	movi	r7,-1
    c190:	d9c00915 	stw	r7,36(sp)
    c194:	d9800717 	ldw	r6,28(sp)
    c198:	d9c01517 	ldw	r7,84(sp)
    c19c:	d9401e17 	ldw	r5,120(sp)
    c1a0:	d809883a 	mov	r4,sp
    c1a4:	000bb6c0 	call	bb6c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c1a8:	1080005c 	xori	r2,r2,1
    c1ac:	003fde06 	br	c128 <__alt_data_end+0xfc00c128>
    c1b0:	d9001b17 	ldw	r4,108(sp)
    c1b4:	00800044 	movi	r2,1
    c1b8:	113f4d36 	bltu	r2,r4,bef0 <__alt_data_end+0xfc00bef0>
    c1bc:	d9c02317 	ldw	r7,140(sp)
    c1c0:	38800017 	ldw	r2,0(r7)
    c1c4:	1080004c 	andi	r2,r2,1
    c1c8:	1000061e 	bne	r2,zero,c1e4 <__gxx_personality_sj0+0x5d0>
    c1cc:	d8c02317 	ldw	r3,140(sp)
    c1d0:	18800504 	addi	r2,r3,20
    c1d4:	d8800715 	stw	r2,28(sp)
    c1d8:	10bff017 	ldw	r2,-64(r2)
    c1dc:	d8801e15 	stw	r2,120(sp)
    c1e0:	003f4606 	br	befc <__alt_data_end+0xfc00befc>
    c1e4:	38bff517 	ldw	r2,-44(r7)
    c1e8:	003ffa06 	br	c1d4 <__alt_data_end+0xfc00c1d4>
    c1ec:	d9000a17 	ldw	r4,40(sp)
    c1f0:	000c5a40 	call	c5a4 <__cxa_begin_catch>
    c1f4:	003f9106 	br	c03c <__alt_data_end+0xfc00c03c>
    c1f8:	d9c01c17 	ldw	r7,112(sp)
    c1fc:	383eda1e 	bne	r7,zero,bd68 <__alt_data_end+0xfc00bd68>
    c200:	d8c01b17 	ldw	r3,108(sp)
    c204:	00800044 	movi	r2,1
    c208:	10fed736 	bltu	r2,r3,bd68 <__alt_data_end+0xfc00bd68>
    c20c:	00c000c4 	movi	r3,3
    c210:	003f8e06 	br	c04c <__alt_data_end+0xfc00c04c>

0000c214 <__cxa_call_unexpected>:
    c214:	00800074 	movhi	r2,1
    c218:	deffe604 	addi	sp,sp,-104
    c21c:	10af0504 	addi	r2,r2,-17388
    c220:	d8800d15 	stw	r2,52(sp)
    c224:	008000b4 	movhi	r2,2
    c228:	108e3e04 	addi	r2,r2,14584
    c22c:	d8800e15 	stw	r2,56(sp)
    c230:	d8800104 	addi	r2,sp,4
    c234:	d8800f15 	stw	r2,60(sp)
    c238:	00800074 	movhi	r2,1
    c23c:	10b0a804 	addi	r2,r2,-15712
    c240:	d9001415 	stw	r4,80(sp)
    c244:	d9000704 	addi	r4,sp,28
    c248:	dfc01915 	stw	ra,100(sp)
    c24c:	d8801015 	stw	r2,64(sp)
    c250:	df001815 	stw	fp,96(sp)
    c254:	dec01115 	stw	sp,68(sp)
    c258:	000de4c0 	call	de4c <_Unwind_SjLj_Register>
    c25c:	d9001417 	ldw	r4,80(sp)
    c260:	000c5a40 	call	c5a4 <__cxa_begin_catch>
    c264:	d8c01417 	ldw	r3,80(sp)
    c268:	18bffe17 	ldw	r2,-8(r3)
    c26c:	193ff717 	ldw	r4,-36(r3)
    c270:	18fffd17 	ldw	r3,-12(r3)
    c274:	d8800315 	stw	r2,12(sp)
    c278:	d8c01615 	stw	r3,88(sp)
    c27c:	d8c01417 	ldw	r3,80(sp)
    c280:	18fffb17 	ldw	r3,-20(r3)
    c284:	d8c01515 	stw	r3,84(sp)
    c288:	d8c01417 	ldw	r3,80(sp)
    c28c:	18fff817 	ldw	r3,-32(r3)
    c290:	d8c01415 	stw	r3,80(sp)
    c294:	00c00044 	movi	r3,1
    c298:	d8c00815 	stw	r3,32(sp)
    c29c:	000b3840 	call	b384 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    c2a0:	d8c00917 	ldw	r3,36(sp)
    c2a4:	d8800817 	ldw	r2,32(sp)
    c2a8:	d8c01715 	stw	r3,92(sp)
    c2ac:	10000a26 	beq	r2,zero,c2d8 <__cxa_call_unexpected+0xc4>
    c2b0:	10bfffc4 	addi	r2,r2,-1
    c2b4:	10000126 	beq	r2,zero,c2bc <__cxa_call_unexpected+0xa8>
    c2b8:	003b68fa 	trap	3
    c2bc:	d8000815 	stw	zero,32(sp)
    c2c0:	000c6580 	call	c658 <__cxa_end_catch>
    c2c4:	000c6580 	call	c658 <__cxa_end_catch>
    c2c8:	d9001717 	ldw	r4,92(sp)
    c2cc:	00bfffc4 	movi	r2,-1
    c2d0:	d8800815 	stw	r2,32(sp)
    c2d4:	000e0480 	call	e048 <_Unwind_SjLj_Resume>
    c2d8:	d9001717 	ldw	r4,92(sp)
    c2dc:	000c5a40 	call	c5a4 <__cxa_begin_catch>
    c2e0:	000ca480 	call	ca48 <__cxa_get_globals_fast>
    c2e4:	10800017 	ldw	r2,0(r2)
    c2e8:	10c00b17 	ldw	r3,44(r2)
    c2ec:	18c0004c 	andi	r3,r3,1
    c2f0:	18001e26 	beq	r3,zero,c36c <__cxa_call_unexpected+0x158>
    c2f4:	10800017 	ldw	r2,0(r2)
    c2f8:	d8801715 	stw	r2,92(sp)
    c2fc:	d8801517 	ldw	r2,84(sp)
    c300:	00802b0e 	bge	zero,r2,c3b0 <__cxa_call_unexpected+0x19c>
    c304:	d8c01717 	ldw	r3,92(sp)
    c308:	d8800317 	ldw	r2,12(sp)
    c30c:	d9c01517 	ldw	r7,84(sp)
    c310:	193ff017 	ldw	r4,-64(r3)
    c314:	d9801617 	ldw	r6,88(sp)
    c318:	d8800015 	stw	r2,0(sp)
    c31c:	180b883a 	mov	r5,r3
    c320:	00800084 	movi	r2,2
    c324:	d8800815 	stw	r2,32(sp)
    c328:	000b9400 	call	b940 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c32c:	10803fcc 	andi	r2,r2,255
    c330:	10001e1e 	bne	r2,zero,c3ac <__cxa_call_unexpected+0x198>
    c334:	d8800317 	ldw	r2,12(sp)
    c338:	d9c01517 	ldw	r7,84(sp)
    c33c:	d9801617 	ldw	r6,88(sp)
    c340:	010000f4 	movhi	r4,3
    c344:	d8800015 	stw	r2,0(sp)
    c348:	21299804 	addi	r4,r4,-22944
    c34c:	00800084 	movi	r2,2
    c350:	000b883a 	mov	r5,zero
    c354:	d8800815 	stw	r2,32(sp)
    c358:	000b9400 	call	b940 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c35c:	10803fcc 	andi	r2,r2,255
    c360:	1000051e 	bne	r2,zero,c378 <__cxa_call_unexpected+0x164>
    c364:	d9001417 	ldw	r4,80(sp)
    c368:	000b2ac0 	call	b2ac <_ZN10__cxxabiv111__terminateEPFvvE>
    c36c:	10801004 	addi	r2,r2,64
    c370:	d8801715 	stw	r2,92(sp)
    c374:	003fe106 	br	c2fc <__alt_data_end+0xfc00c2fc>
    c378:	01000104 	movi	r4,4
    c37c:	000c88c0 	call	c88c <__cxa_allocate_exception>
    c380:	00c000f4 	movhi	r3,3
    c384:	18e9b304 	addi	r3,r3,-22836
    c388:	01800074 	movhi	r6,1
    c38c:	014000f4 	movhi	r5,3
    c390:	10c00015 	stw	r3,0(r2)
    c394:	31b29904 	addi	r6,r6,-13724
    c398:	00c00084 	movi	r3,2
    c39c:	29699804 	addi	r5,r5,-22944
    c3a0:	1009883a 	mov	r4,r2
    c3a4:	d8c00815 	stw	r3,32(sp)
    c3a8:	000c4880 	call	c488 <__cxa_throw>
    c3ac:	000c5180 	call	c518 <__cxa_rethrow>
    c3b0:	d9401617 	ldw	r5,88(sp)
    c3b4:	00800084 	movi	r2,2
    c3b8:	d9800104 	addi	r6,sp,4
    c3bc:	0009883a 	mov	r4,zero
    c3c0:	d8800815 	stw	r2,32(sp)
    c3c4:	000b7840 	call	b784 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c3c8:	d9801717 	ldw	r6,92(sp)
    c3cc:	d9c01517 	ldw	r7,84(sp)
    c3d0:	d9000104 	addi	r4,sp,4
    c3d4:	317ff017 	ldw	r5,-64(r6)
    c3d8:	000bb6c0 	call	bb6c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c3dc:	10803fcc 	andi	r2,r2,255
    c3e0:	1000171e 	bne	r2,zero,c440 <__cxa_call_unexpected+0x22c>
    c3e4:	d9c01517 	ldw	r7,84(sp)
    c3e8:	014000f4 	movhi	r5,3
    c3ec:	00800084 	movi	r2,2
    c3f0:	29699804 	addi	r5,r5,-22944
    c3f4:	000d883a 	mov	r6,zero
    c3f8:	d9000104 	addi	r4,sp,4
    c3fc:	d8800815 	stw	r2,32(sp)
    c400:	000bb6c0 	call	bb6c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c404:	10803fcc 	andi	r2,r2,255
    c408:	103fd626 	beq	r2,zero,c364 <__alt_data_end+0xfc00c364>
    c40c:	01000104 	movi	r4,4
    c410:	000c88c0 	call	c88c <__cxa_allocate_exception>
    c414:	00c000f4 	movhi	r3,3
    c418:	18e9b304 	addi	r3,r3,-22836
    c41c:	01800074 	movhi	r6,1
    c420:	014000f4 	movhi	r5,3
    c424:	10c00015 	stw	r3,0(r2)
    c428:	31b29904 	addi	r6,r6,-13724
    c42c:	00c00084 	movi	r3,2
    c430:	29699804 	addi	r5,r5,-22944
    c434:	1009883a 	mov	r4,r2
    c438:	d8c00815 	stw	r3,32(sp)
    c43c:	000c4880 	call	c488 <__cxa_throw>
    c440:	000c5180 	call	c518 <__cxa_rethrow>

0000c444 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    c444:	defffe04 	addi	sp,sp,-8
    c448:	dfc00115 	stw	ra,4(sp)
    c44c:	dc000015 	stw	r16,0(sp)
    c450:	00800044 	movi	r2,1
    c454:	11000a36 	bltu	r2,r4,c480 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    c458:	28bff617 	ldw	r2,-40(r5)
    c45c:	2c000504 	addi	r16,r5,20
    c460:	10000226 	beq	r2,zero,c46c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    c464:	8009883a 	mov	r4,r16
    c468:	103ee83a 	callr	r2
    c46c:	8009883a 	mov	r4,r16
    c470:	dfc00117 	ldw	ra,4(sp)
    c474:	dc000017 	ldw	r16,0(sp)
    c478:	dec00204 	addi	sp,sp,8
    c47c:	000c8ec1 	jmpi	c8ec <__cxa_free_exception>
    c480:	293ff817 	ldw	r4,-32(r5)
    c484:	000b2ac0 	call	b2ac <_ZN10__cxxabiv111__terminateEPFvvE>

0000c488 <__cxa_throw>:
    c488:	defffb04 	addi	sp,sp,-20
    c48c:	dfc00415 	stw	ra,16(sp)
    c490:	dcc00315 	stw	r19,12(sp)
    c494:	dc800215 	stw	r18,8(sp)
    c498:	2827883a 	mov	r19,r5
    c49c:	3025883a 	mov	r18,r6
    c4a0:	dc400115 	stw	r17,4(sp)
    c4a4:	dc000015 	stw	r16,0(sp)
    c4a8:	2021883a 	mov	r16,r4
    c4ac:	000ca540 	call	ca54 <__cxa_get_globals>
    c4b0:	10c00117 	ldw	r3,4(r2)
    c4b4:	847ffb04 	addi	r17,r16,-20
    c4b8:	18c00044 	addi	r3,r3,1
    c4bc:	10c00115 	stw	r3,4(r2)
    c4c0:	00800044 	movi	r2,1
    c4c4:	80bfef15 	stw	r2,-68(r16)
    c4c8:	84fff015 	stw	r19,-64(r16)
    c4cc:	84bff115 	stw	r18,-60(r16)
    c4d0:	000b3e40 	call	b3e4 <_ZSt14get_unexpectedv>
    c4d4:	80bff215 	stw	r2,-56(r16)
    c4d8:	000b3c00 	call	b3c0 <_ZSt13get_terminatev>
    c4dc:	80bff315 	stw	r2,-52(r16)
    c4e0:	0090caf4 	movhi	r2,17195
    c4e4:	108ac004 	addi	r2,r2,11008
    c4e8:	80bffb15 	stw	r2,-20(r16)
    c4ec:	0091d3b4 	movhi	r2,18254
    c4f0:	109550c4 	addi	r2,r2,21827
    c4f4:	80bffc15 	stw	r2,-16(r16)
    c4f8:	00800074 	movhi	r2,1
    c4fc:	10b11104 	addi	r2,r2,-15292
    c500:	8809883a 	mov	r4,r17
    c504:	80bffd15 	stw	r2,-12(r16)
    c508:	000df340 	call	df34 <_Unwind_SjLj_RaiseException>
    c50c:	8809883a 	mov	r4,r17
    c510:	000c5a40 	call	c5a4 <__cxa_begin_catch>
    c514:	000b36c0 	call	b36c <_ZSt9terminatev>

0000c518 <__cxa_rethrow>:
    c518:	defffe04 	addi	sp,sp,-8
    c51c:	dfc00115 	stw	ra,4(sp)
    c520:	dc000015 	stw	r16,0(sp)
    c524:	000ca540 	call	ca54 <__cxa_get_globals>
    c528:	10c00117 	ldw	r3,4(r2)
    c52c:	11000017 	ldw	r4,0(r2)
    c530:	18c00044 	addi	r3,r3,1
    c534:	10c00115 	stw	r3,4(r2)
    c538:	20001126 	beq	r4,zero,c580 <__cxa_rethrow+0x68>
    c53c:	21400b17 	ldw	r5,44(r4)
    c540:	01ef3574 	movhi	r7,48341
    c544:	39f54004 	addi	r7,r7,-11008
    c548:	29cf883a 	add	r7,r5,r7
    c54c:	20c00c17 	ldw	r3,48(r4)
    c550:	394d803a 	cmpltu	r6,r7,r5
    c554:	016e2cb4 	movhi	r5,47282
    c558:	296aaf04 	addi	r5,r5,-21828
    c55c:	1947883a 	add	r3,r3,r5
    c560:	30c7883a 	add	r3,r6,r3
    c564:	18000726 	beq	r3,zero,c584 <__cxa_rethrow+0x6c>
    c568:	10000015 	stw	zero,0(r2)
    c56c:	24000b04 	addi	r16,r4,44
    c570:	8009883a 	mov	r4,r16
    c574:	000e08c0 	call	e08c <_Unwind_SjLj_Resume_or_Rethrow>
    c578:	8009883a 	mov	r4,r16
    c57c:	000c5a40 	call	c5a4 <__cxa_begin_catch>
    c580:	000b36c0 	call	b36c <_ZSt9terminatev>
    c584:	00c00044 	movi	r3,1
    c588:	19fff736 	bltu	r3,r7,c568 <__alt_data_end+0xfc00c568>
    c58c:	20800517 	ldw	r2,20(r4)
    c590:	0085c83a 	sub	r2,zero,r2
    c594:	20800515 	stw	r2,20(r4)
    c598:	003ff406 	br	c56c <__alt_data_end+0xfc00c56c>

0000c59c <__cxa_get_exception_ptr>:
    c59c:	20bfff17 	ldw	r2,-4(r4)
    c5a0:	f800283a 	ret

0000c5a4 <__cxa_begin_catch>:
    c5a4:	defffe04 	addi	sp,sp,-8
    c5a8:	dc000015 	stw	r16,0(sp)
    c5ac:	dfc00115 	stw	ra,4(sp)
    c5b0:	2021883a 	mov	r16,r4
    c5b4:	000ca540 	call	ca54 <__cxa_get_globals>
    c5b8:	81000017 	ldw	r4,0(r16)
    c5bc:	80c00117 	ldw	r3,4(r16)
    c5c0:	01af3574 	movhi	r6,48341
    c5c4:	31b54004 	addi	r6,r6,-11008
    c5c8:	016e2cb4 	movhi	r5,47282
    c5cc:	296aaf04 	addi	r5,r5,-21828
    c5d0:	218d883a 	add	r6,r4,r6
    c5d4:	3109803a 	cmpltu	r4,r6,r4
    c5d8:	1947883a 	add	r3,r3,r5
    c5dc:	20c7883a 	add	r3,r4,r3
    c5e0:	817ff504 	addi	r5,r16,-44
    c5e4:	11000017 	ldw	r4,0(r2)
    c5e8:	18000726 	beq	r3,zero,c608 <__cxa_begin_catch+0x64>
    c5ec:	2000191e 	bne	r4,zero,c654 <__cxa_begin_catch+0xb0>
    c5f0:	11400015 	stw	r5,0(r2)
    c5f4:	0005883a 	mov	r2,zero
    c5f8:	dfc00117 	ldw	ra,4(sp)
    c5fc:	dc000017 	ldw	r16,0(sp)
    c600:	dec00204 	addi	sp,sp,8
    c604:	f800283a 	ret
    c608:	01c00044 	movi	r7,1
    c60c:	39bff736 	bltu	r7,r6,c5ec <__alt_data_end+0xfc00c5ec>
    c610:	80fffa17 	ldw	r3,-24(r16)
    c614:	18000d16 	blt	r3,zero,c64c <__cxa_begin_catch+0xa8>
    c618:	18c00044 	addi	r3,r3,1
    c61c:	11800117 	ldw	r6,4(r2)
    c620:	80fffa15 	stw	r3,-24(r16)
    c624:	30ffffc4 	addi	r3,r6,-1
    c628:	10c00115 	stw	r3,4(r2)
    c62c:	21400226 	beq	r4,r5,c638 <__cxa_begin_catch+0x94>
    c630:	813ff915 	stw	r4,-28(r16)
    c634:	11400015 	stw	r5,0(r2)
    c638:	80bfff17 	ldw	r2,-4(r16)
    c63c:	dfc00117 	ldw	ra,4(sp)
    c640:	dc000017 	ldw	r16,0(sp)
    c644:	dec00204 	addi	sp,sp,8
    c648:	f800283a 	ret
    c64c:	38c7c83a 	sub	r3,r7,r3
    c650:	003ff206 	br	c61c <__alt_data_end+0xfc00c61c>
    c654:	000b36c0 	call	b36c <_ZSt9terminatev>

0000c658 <__cxa_end_catch>:
    c658:	deffff04 	addi	sp,sp,-4
    c65c:	dfc00015 	stw	ra,0(sp)
    c660:	000ca480 	call	ca48 <__cxa_get_globals_fast>
    c664:	11000017 	ldw	r4,0(r2)
    c668:	20001426 	beq	r4,zero,c6bc <__cxa_end_catch+0x64>
    c66c:	21400b17 	ldw	r5,44(r4)
    c670:	01ef3574 	movhi	r7,48341
    c674:	39f54004 	addi	r7,r7,-11008
    c678:	29cf883a 	add	r7,r5,r7
    c67c:	20c00c17 	ldw	r3,48(r4)
    c680:	394d803a 	cmpltu	r6,r7,r5
    c684:	016e2cb4 	movhi	r5,47282
    c688:	296aaf04 	addi	r5,r5,-21828
    c68c:	1947883a 	add	r3,r3,r5
    c690:	30c7883a 	add	r3,r6,r3
    c694:	18000c1e 	bne	r3,zero,c6c8 <__cxa_end_catch+0x70>
    c698:	00c00044 	movi	r3,1
    c69c:	19c00a36 	bltu	r3,r7,c6c8 <__cxa_end_catch+0x70>
    c6a0:	20c00517 	ldw	r3,20(r4)
    c6a4:	18000d16 	blt	r3,zero,c6dc <__cxa_end_catch+0x84>
    c6a8:	18ffffc4 	addi	r3,r3,-1
    c6ac:	18001026 	beq	r3,zero,c6f0 <__cxa_end_catch+0x98>
    c6b0:	00bfffc4 	movi	r2,-1
    c6b4:	18801426 	beq	r3,r2,c708 <__cxa_end_catch+0xb0>
    c6b8:	20c00515 	stw	r3,20(r4)
    c6bc:	dfc00017 	ldw	ra,0(sp)
    c6c0:	dec00104 	addi	sp,sp,4
    c6c4:	f800283a 	ret
    c6c8:	21000b04 	addi	r4,r4,44
    c6cc:	10000015 	stw	zero,0(r2)
    c6d0:	dfc00017 	ldw	ra,0(sp)
    c6d4:	dec00104 	addi	sp,sp,4
    c6d8:	000e0d81 	jmpi	e0d8 <_Unwind_DeleteException>
    c6dc:	18c00044 	addi	r3,r3,1
    c6e0:	183ff51e 	bne	r3,zero,c6b8 <__alt_data_end+0xfc00c6b8>
    c6e4:	21400417 	ldw	r5,16(r4)
    c6e8:	11400015 	stw	r5,0(r2)
    c6ec:	003ff206 	br	c6b8 <__alt_data_end+0xfc00c6b8>
    c6f0:	20c00417 	ldw	r3,16(r4)
    c6f4:	21000b04 	addi	r4,r4,44
    c6f8:	10c00015 	stw	r3,0(r2)
    c6fc:	dfc00017 	ldw	ra,0(sp)
    c700:	dec00104 	addi	sp,sp,4
    c704:	000e0d81 	jmpi	e0d8 <_Unwind_DeleteException>
    c708:	000b36c0 	call	b36c <_ZSt9terminatev>

0000c70c <_ZSt18uncaught_exceptionv>:
    c70c:	deffff04 	addi	sp,sp,-4
    c710:	dfc00015 	stw	ra,0(sp)
    c714:	000ca540 	call	ca54 <__cxa_get_globals>
    c718:	10800117 	ldw	r2,4(r2)
    c71c:	1004c03a 	cmpne	r2,r2,zero
    c720:	dfc00017 	ldw	ra,0(sp)
    c724:	dec00104 	addi	sp,sp,4
    c728:	f800283a 	ret

0000c72c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    c72c:	018000f4 	movhi	r6,3
    c730:	3183ee04 	addi	r6,r6,4024
    c734:	31400117 	ldw	r5,4(r6)
    c738:	223fff04 	addi	r8,r4,-4
    c73c:	227fff17 	ldw	r9,-4(r4)
    c740:	28001326 	beq	r5,zero,c790 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    c744:	424f883a 	add	r7,r8,r9
    c748:	29c01426 	beq	r5,r7,c79c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    c74c:	28c00117 	ldw	r3,4(r5)
    c750:	18001c26 	beq	r3,zero,c7c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    c754:	38c00336 	bltu	r7,r3,c764 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    c758:	00001e06 	br	c7d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    c75c:	3880052e 	bgeu	r7,r2,c774 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    c760:	1007883a 	mov	r3,r2
    c764:	18800117 	ldw	r2,4(r3)
    c768:	29800104 	addi	r6,r5,4
    c76c:	180b883a 	mov	r5,r3
    c770:	103ffa1e 	bne	r2,zero,c75c <__alt_data_end+0xfc00c75c>
    c774:	19400017 	ldw	r5,0(r3)
    c778:	194f883a 	add	r7,r3,r5
    c77c:	41c00e26 	beq	r8,r7,c7b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    c780:	20800015 	stw	r2,0(r4)
    c784:	30800017 	ldw	r2,0(r6)
    c788:	12000115 	stw	r8,4(r2)
    c78c:	f800283a 	ret
    c790:	20000015 	stw	zero,0(r4)
    c794:	32000115 	stw	r8,4(r6)
    c798:	f800283a 	ret
    c79c:	28c00017 	ldw	r3,0(r5)
    c7a0:	28800117 	ldw	r2,4(r5)
    c7a4:	1a53883a 	add	r9,r3,r9
    c7a8:	227fff15 	stw	r9,-4(r4)
    c7ac:	20800015 	stw	r2,0(r4)
    c7b0:	32000115 	stw	r8,4(r6)
    c7b4:	f800283a 	ret
    c7b8:	494b883a 	add	r5,r9,r5
    c7bc:	19400015 	stw	r5,0(r3)
    c7c0:	f800283a 	ret
    c7c4:	0005883a 	mov	r2,zero
    c7c8:	2807883a 	mov	r3,r5
    c7cc:	31800104 	addi	r6,r6,4
    c7d0:	003fe806 	br	c774 <__alt_data_end+0xfc00c774>
    c7d4:	1805883a 	mov	r2,r3
    c7d8:	31800104 	addi	r6,r6,4
    c7dc:	2807883a 	mov	r3,r5
    c7e0:	003fe406 	br	c774 <__alt_data_end+0xfc00c774>

0000c7e4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    c7e4:	20800104 	addi	r2,r4,4
    c7e8:	00c001c4 	movi	r3,7
    c7ec:	1880112e 	bgeu	r3,r2,c834 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    c7f0:	20c9883a 	add	r4,r4,r3
    c7f4:	00bfff04 	movi	r2,-4
    c7f8:	208a703a 	and	r5,r4,r2
    c7fc:	018000f4 	movhi	r6,3
    c800:	3183ee04 	addi	r6,r6,4024
    c804:	30c00117 	ldw	r3,4(r6)
    c808:	18000826 	beq	r3,zero,c82c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    c80c:	19000017 	ldw	r4,0(r3)
    c810:	21400436 	bltu	r4,r5,c824 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    c814:	00001a06 	br	c880 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    c818:	11000017 	ldw	r4,0(r2)
    c81c:	2140072e 	bgeu	r4,r5,c83c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    c820:	1007883a 	mov	r3,r2
    c824:	18800117 	ldw	r2,4(r3)
    c828:	103ffb1e 	bne	r2,zero,c818 <__alt_data_end+0xfc00c818>
    c82c:	0005883a 	mov	r2,zero
    c830:	f800283a 	ret
    c834:	01400204 	movi	r5,8
    c838:	003ff006 	br	c7fc <__alt_data_end+0xfc00c7fc>
    c83c:	18c00104 	addi	r3,r3,4
    c840:	2149c83a 	sub	r4,r4,r5
    c844:	018001c4 	movi	r6,7
    c848:	3100092e 	bgeu	r6,r4,c870 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    c84c:	11c00117 	ldw	r7,4(r2)
    c850:	114d883a 	add	r6,r2,r5
    c854:	31000015 	stw	r4,0(r6)
    c858:	31c00115 	stw	r7,4(r6)
    c85c:	18800017 	ldw	r2,0(r3)
    c860:	11400015 	stw	r5,0(r2)
    c864:	19800015 	stw	r6,0(r3)
    c868:	10800104 	addi	r2,r2,4
    c86c:	f800283a 	ret
    c870:	11000117 	ldw	r4,4(r2)
    c874:	10800104 	addi	r2,r2,4
    c878:	19000015 	stw	r4,0(r3)
    c87c:	f800283a 	ret
    c880:	1805883a 	mov	r2,r3
    c884:	30c00104 	addi	r3,r6,4
    c888:	003fed06 	br	c840 <__alt_data_end+0xfc00c840>

0000c88c <__cxa_allocate_exception>:
    c88c:	defffd04 	addi	sp,sp,-12
    c890:	dc400115 	stw	r17,4(sp)
    c894:	24401104 	addi	r17,r4,68
    c898:	8809883a 	mov	r4,r17
    c89c:	dc000015 	stw	r16,0(sp)
    c8a0:	dfc00215 	stw	ra,8(sp)
    c8a4:	000e22c0 	call	e22c <malloc>
    c8a8:	1021883a 	mov	r16,r2
    c8ac:	10000a26 	beq	r2,zero,c8d8 <__cxa_allocate_exception+0x4c>
    c8b0:	01801104 	movi	r6,68
    c8b4:	000b883a 	mov	r5,zero
    c8b8:	8009883a 	mov	r4,r16
    c8bc:	000eba80 	call	eba8 <memset>
    c8c0:	80801104 	addi	r2,r16,68
    c8c4:	dfc00217 	ldw	ra,8(sp)
    c8c8:	dc400117 	ldw	r17,4(sp)
    c8cc:	dc000017 	ldw	r16,0(sp)
    c8d0:	dec00304 	addi	sp,sp,12
    c8d4:	f800283a 	ret
    c8d8:	8809883a 	mov	r4,r17
    c8dc:	000c7e40 	call	c7e4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    c8e0:	1021883a 	mov	r16,r2
    c8e4:	103ff21e 	bne	r2,zero,c8b0 <__alt_data_end+0xfc00c8b0>
    c8e8:	000b36c0 	call	b36c <_ZSt9terminatev>

0000c8ec <__cxa_free_exception>:
    c8ec:	00c000f4 	movhi	r3,3
    c8f0:	18c3ee04 	addi	r3,r3,4024
    c8f4:	18800217 	ldw	r2,8(r3)
    c8f8:	213fef04 	addi	r4,r4,-68
    c8fc:	1100042e 	bgeu	r2,r4,c910 <__cxa_free_exception+0x24>
    c900:	18c00317 	ldw	r3,12(r3)
    c904:	10c5883a 	add	r2,r2,r3
    c908:	2080012e 	bgeu	r4,r2,c910 <__cxa_free_exception+0x24>
    c90c:	000c72c1 	jmpi	c72c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    c910:	000e2401 	jmpi	e240 <free>

0000c914 <__cxa_allocate_dependent_exception>:
    c914:	defffe04 	addi	sp,sp,-8
    c918:	01001004 	movi	r4,64
    c91c:	dc000015 	stw	r16,0(sp)
    c920:	dfc00115 	stw	ra,4(sp)
    c924:	000e22c0 	call	e22c <malloc>
    c928:	1021883a 	mov	r16,r2
    c92c:	10000926 	beq	r2,zero,c954 <__cxa_allocate_dependent_exception+0x40>
    c930:	01801004 	movi	r6,64
    c934:	000b883a 	mov	r5,zero
    c938:	8009883a 	mov	r4,r16
    c93c:	000eba80 	call	eba8 <memset>
    c940:	8005883a 	mov	r2,r16
    c944:	dfc00117 	ldw	ra,4(sp)
    c948:	dc000017 	ldw	r16,0(sp)
    c94c:	dec00204 	addi	sp,sp,8
    c950:	f800283a 	ret
    c954:	01001004 	movi	r4,64
    c958:	000c7e40 	call	c7e4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    c95c:	1021883a 	mov	r16,r2
    c960:	103ff31e 	bne	r2,zero,c930 <__alt_data_end+0xfc00c930>
    c964:	000b36c0 	call	b36c <_ZSt9terminatev>

0000c968 <__cxa_free_dependent_exception>:
    c968:	014000f4 	movhi	r5,3
    c96c:	2943ee04 	addi	r5,r5,4024
    c970:	28c00217 	ldw	r3,8(r5)
    c974:	2005883a 	mov	r2,r4
    c978:	1900042e 	bgeu	r3,r4,c98c <__cxa_free_dependent_exception+0x24>
    c97c:	29400317 	ldw	r5,12(r5)
    c980:	1947883a 	add	r3,r3,r5
    c984:	20c0012e 	bgeu	r4,r3,c98c <__cxa_free_dependent_exception+0x24>
    c988:	000c72c1 	jmpi	c72c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    c98c:	1009883a 	mov	r4,r2
    c990:	000e2401 	jmpi	e240 <free>

0000c994 <_GLOBAL__sub_I___cxa_allocate_exception>:
    c994:	defffd04 	addi	sp,sp,-12
    c998:	dc400115 	stw	r17,4(sp)
    c99c:	dc000015 	stw	r16,0(sp)
    c9a0:	04424004 	movi	r17,2304
    c9a4:	040000f4 	movhi	r16,3
    c9a8:	8403ee04 	addi	r16,r16,4024
    c9ac:	8809883a 	mov	r4,r17
    c9b0:	dfc00215 	stw	ra,8(sp)
    c9b4:	84400315 	stw	r17,12(r16)
    c9b8:	000e22c0 	call	e22c <malloc>
    c9bc:	80800215 	stw	r2,8(r16)
    c9c0:	10000826 	beq	r2,zero,c9e4 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    c9c4:	80800115 	stw	r2,4(r16)
    c9c8:	14400015 	stw	r17,0(r2)
    c9cc:	10000115 	stw	zero,4(r2)
    c9d0:	dfc00217 	ldw	ra,8(sp)
    c9d4:	dc400117 	ldw	r17,4(sp)
    c9d8:	dc000017 	ldw	r16,0(sp)
    c9dc:	dec00304 	addi	sp,sp,12
    c9e0:	f800283a 	ret
    c9e4:	80000315 	stw	zero,12(r16)
    c9e8:	80000115 	stw	zero,4(r16)
    c9ec:	003ff806 	br	c9d0 <__alt_data_end+0xfc00c9d0>

0000c9f0 <__cxa_call_terminate>:
    c9f0:	defffe04 	addi	sp,sp,-8
    c9f4:	dfc00115 	stw	ra,4(sp)
    c9f8:	dc000015 	stw	r16,0(sp)
    c9fc:	20000d26 	beq	r4,zero,ca34 <__cxa_call_terminate+0x44>
    ca00:	2021883a 	mov	r16,r4
    ca04:	000c5a40 	call	c5a4 <__cxa_begin_catch>
    ca08:	80c00017 	ldw	r3,0(r16)
    ca0c:	016f3574 	movhi	r5,48341
    ca10:	29754004 	addi	r5,r5,-11008
    ca14:	194b883a 	add	r5,r3,r5
    ca18:	80800117 	ldw	r2,4(r16)
    ca1c:	28c9803a 	cmpltu	r4,r5,r3
    ca20:	00ee2cb4 	movhi	r3,47282
    ca24:	18eaaf04 	addi	r3,r3,-21828
    ca28:	10c5883a 	add	r2,r2,r3
    ca2c:	2085883a 	add	r2,r4,r2
    ca30:	10000126 	beq	r2,zero,ca38 <__cxa_call_terminate+0x48>
    ca34:	000b36c0 	call	b36c <_ZSt9terminatev>
    ca38:	00800044 	movi	r2,1
    ca3c:	117ffd36 	bltu	r2,r5,ca34 <__alt_data_end+0xfc00ca34>
    ca40:	813ff817 	ldw	r4,-32(r16)
    ca44:	000b2ac0 	call	b2ac <_ZN10__cxxabiv111__terminateEPFvvE>

0000ca48 <__cxa_get_globals_fast>:
    ca48:	008000f4 	movhi	r2,3
    ca4c:	10839504 	addi	r2,r2,3668
    ca50:	f800283a 	ret

0000ca54 <__cxa_get_globals>:
    ca54:	008000f4 	movhi	r2,3
    ca58:	10839504 	addi	r2,r2,3668
    ca5c:	f800283a 	ret

0000ca60 <_ZNSt9exceptionD1Ev>:
    ca60:	f800283a 	ret

0000ca64 <_ZNSt13bad_exceptionD1Ev>:
    ca64:	f800283a 	ret

0000ca68 <_ZNKSt9exception4whatEv>:
    ca68:	008000f4 	movhi	r2,3
    ca6c:	10a98604 	addi	r2,r2,-23016
    ca70:	f800283a 	ret

0000ca74 <_ZNKSt13bad_exception4whatEv>:
    ca74:	008000f4 	movhi	r2,3
    ca78:	10a98a04 	addi	r2,r2,-23000
    ca7c:	f800283a 	ret

0000ca80 <_ZNSt9exceptionD0Ev>:
    ca80:	000afa01 	jmpi	afa0 <_ZdlPv>

0000ca84 <_ZNSt13bad_exceptionD0Ev>:
    ca84:	000afa01 	jmpi	afa0 <_ZdlPv>

0000ca88 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    ca88:	f800283a 	ret

0000ca8c <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    ca8c:	000afa01 	jmpi	afa0 <_ZdlPv>

0000ca90 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    ca90:	f800283a 	ret

0000ca94 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    ca94:	000afa01 	jmpi	afa0 <_ZdlPv>

0000ca98 <__fixunssfsi>:
    ca98:	defffd04 	addi	sp,sp,-12
    ca9c:	dc000015 	stw	r16,0(sp)
    caa0:	0413c034 	movhi	r16,20224
    caa4:	800b883a 	mov	r5,r16
    caa8:	dc400115 	stw	r17,4(sp)
    caac:	dfc00215 	stw	ra,8(sp)
    cab0:	2023883a 	mov	r17,r4
    cab4:	000d1140 	call	d114 <__gesf2>
    cab8:	1000070e 	bge	r2,zero,cad8 <__fixunssfsi+0x40>
    cabc:	8809883a 	mov	r4,r17
    cac0:	000dae40 	call	dae4 <__fixsfsi>
    cac4:	dfc00217 	ldw	ra,8(sp)
    cac8:	dc400117 	ldw	r17,4(sp)
    cacc:	dc000017 	ldw	r16,0(sp)
    cad0:	dec00304 	addi	sp,sp,12
    cad4:	f800283a 	ret
    cad8:	800b883a 	mov	r5,r16
    cadc:	8809883a 	mov	r4,r17
    cae0:	000d6000 	call	d600 <__subsf3>
    cae4:	1009883a 	mov	r4,r2
    cae8:	000dae40 	call	dae4 <__fixsfsi>
    caec:	00e00034 	movhi	r3,32768
    caf0:	10c5883a 	add	r2,r2,r3
    caf4:	003ff306 	br	cac4 <__alt_data_end+0xfc00cac4>

0000caf8 <__divsi3>:
    caf8:	20001b16 	blt	r4,zero,cb68 <__divsi3+0x70>
    cafc:	000f883a 	mov	r7,zero
    cb00:	28001616 	blt	r5,zero,cb5c <__divsi3+0x64>
    cb04:	200d883a 	mov	r6,r4
    cb08:	29001a2e 	bgeu	r5,r4,cb74 <__divsi3+0x7c>
    cb0c:	00800804 	movi	r2,32
    cb10:	00c00044 	movi	r3,1
    cb14:	00000106 	br	cb1c <__divsi3+0x24>
    cb18:	10000d26 	beq	r2,zero,cb50 <__divsi3+0x58>
    cb1c:	294b883a 	add	r5,r5,r5
    cb20:	10bfffc4 	addi	r2,r2,-1
    cb24:	18c7883a 	add	r3,r3,r3
    cb28:	293ffb36 	bltu	r5,r4,cb18 <__alt_data_end+0xfc00cb18>
    cb2c:	0005883a 	mov	r2,zero
    cb30:	18000726 	beq	r3,zero,cb50 <__divsi3+0x58>
    cb34:	0005883a 	mov	r2,zero
    cb38:	31400236 	bltu	r6,r5,cb44 <__divsi3+0x4c>
    cb3c:	314dc83a 	sub	r6,r6,r5
    cb40:	10c4b03a 	or	r2,r2,r3
    cb44:	1806d07a 	srli	r3,r3,1
    cb48:	280ad07a 	srli	r5,r5,1
    cb4c:	183ffa1e 	bne	r3,zero,cb38 <__alt_data_end+0xfc00cb38>
    cb50:	38000126 	beq	r7,zero,cb58 <__divsi3+0x60>
    cb54:	0085c83a 	sub	r2,zero,r2
    cb58:	f800283a 	ret
    cb5c:	014bc83a 	sub	r5,zero,r5
    cb60:	39c0005c 	xori	r7,r7,1
    cb64:	003fe706 	br	cb04 <__alt_data_end+0xfc00cb04>
    cb68:	0109c83a 	sub	r4,zero,r4
    cb6c:	01c00044 	movi	r7,1
    cb70:	003fe306 	br	cb00 <__alt_data_end+0xfc00cb00>
    cb74:	00c00044 	movi	r3,1
    cb78:	003fee06 	br	cb34 <__alt_data_end+0xfc00cb34>

0000cb7c <__modsi3>:
    cb7c:	20001716 	blt	r4,zero,cbdc <__modsi3+0x60>
    cb80:	000f883a 	mov	r7,zero
    cb84:	2005883a 	mov	r2,r4
    cb88:	28001216 	blt	r5,zero,cbd4 <__modsi3+0x58>
    cb8c:	2900162e 	bgeu	r5,r4,cbe8 <__modsi3+0x6c>
    cb90:	01800804 	movi	r6,32
    cb94:	00c00044 	movi	r3,1
    cb98:	00000106 	br	cba0 <__modsi3+0x24>
    cb9c:	30000a26 	beq	r6,zero,cbc8 <__modsi3+0x4c>
    cba0:	294b883a 	add	r5,r5,r5
    cba4:	31bfffc4 	addi	r6,r6,-1
    cba8:	18c7883a 	add	r3,r3,r3
    cbac:	293ffb36 	bltu	r5,r4,cb9c <__alt_data_end+0xfc00cb9c>
    cbb0:	18000526 	beq	r3,zero,cbc8 <__modsi3+0x4c>
    cbb4:	1806d07a 	srli	r3,r3,1
    cbb8:	11400136 	bltu	r2,r5,cbc0 <__modsi3+0x44>
    cbbc:	1145c83a 	sub	r2,r2,r5
    cbc0:	280ad07a 	srli	r5,r5,1
    cbc4:	183ffb1e 	bne	r3,zero,cbb4 <__alt_data_end+0xfc00cbb4>
    cbc8:	38000126 	beq	r7,zero,cbd0 <__modsi3+0x54>
    cbcc:	0085c83a 	sub	r2,zero,r2
    cbd0:	f800283a 	ret
    cbd4:	014bc83a 	sub	r5,zero,r5
    cbd8:	003fec06 	br	cb8c <__alt_data_end+0xfc00cb8c>
    cbdc:	0109c83a 	sub	r4,zero,r4
    cbe0:	01c00044 	movi	r7,1
    cbe4:	003fe706 	br	cb84 <__alt_data_end+0xfc00cb84>
    cbe8:	00c00044 	movi	r3,1
    cbec:	003ff106 	br	cbb4 <__alt_data_end+0xfc00cbb4>

0000cbf0 <__udivsi3>:
    cbf0:	200d883a 	mov	r6,r4
    cbf4:	2900152e 	bgeu	r5,r4,cc4c <__udivsi3+0x5c>
    cbf8:	28001416 	blt	r5,zero,cc4c <__udivsi3+0x5c>
    cbfc:	00800804 	movi	r2,32
    cc00:	00c00044 	movi	r3,1
    cc04:	00000206 	br	cc10 <__udivsi3+0x20>
    cc08:	10000e26 	beq	r2,zero,cc44 <__udivsi3+0x54>
    cc0c:	28000516 	blt	r5,zero,cc24 <__udivsi3+0x34>
    cc10:	294b883a 	add	r5,r5,r5
    cc14:	10bfffc4 	addi	r2,r2,-1
    cc18:	18c7883a 	add	r3,r3,r3
    cc1c:	293ffa36 	bltu	r5,r4,cc08 <__alt_data_end+0xfc00cc08>
    cc20:	18000826 	beq	r3,zero,cc44 <__udivsi3+0x54>
    cc24:	0005883a 	mov	r2,zero
    cc28:	31400236 	bltu	r6,r5,cc34 <__udivsi3+0x44>
    cc2c:	314dc83a 	sub	r6,r6,r5
    cc30:	10c4b03a 	or	r2,r2,r3
    cc34:	1806d07a 	srli	r3,r3,1
    cc38:	280ad07a 	srli	r5,r5,1
    cc3c:	183ffa1e 	bne	r3,zero,cc28 <__alt_data_end+0xfc00cc28>
    cc40:	f800283a 	ret
    cc44:	0005883a 	mov	r2,zero
    cc48:	f800283a 	ret
    cc4c:	00c00044 	movi	r3,1
    cc50:	003ff406 	br	cc24 <__alt_data_end+0xfc00cc24>

0000cc54 <__umodsi3>:
    cc54:	2005883a 	mov	r2,r4
    cc58:	2900122e 	bgeu	r5,r4,cca4 <__umodsi3+0x50>
    cc5c:	28001116 	blt	r5,zero,cca4 <__umodsi3+0x50>
    cc60:	01800804 	movi	r6,32
    cc64:	00c00044 	movi	r3,1
    cc68:	00000206 	br	cc74 <__umodsi3+0x20>
    cc6c:	30000c26 	beq	r6,zero,cca0 <__umodsi3+0x4c>
    cc70:	28000516 	blt	r5,zero,cc88 <__umodsi3+0x34>
    cc74:	294b883a 	add	r5,r5,r5
    cc78:	31bfffc4 	addi	r6,r6,-1
    cc7c:	18c7883a 	add	r3,r3,r3
    cc80:	293ffa36 	bltu	r5,r4,cc6c <__alt_data_end+0xfc00cc6c>
    cc84:	18000626 	beq	r3,zero,cca0 <__umodsi3+0x4c>
    cc88:	1806d07a 	srli	r3,r3,1
    cc8c:	11400136 	bltu	r2,r5,cc94 <__umodsi3+0x40>
    cc90:	1145c83a 	sub	r2,r2,r5
    cc94:	280ad07a 	srli	r5,r5,1
    cc98:	183ffb1e 	bne	r3,zero,cc88 <__alt_data_end+0xfc00cc88>
    cc9c:	f800283a 	ret
    cca0:	f800283a 	ret
    cca4:	00c00044 	movi	r3,1
    cca8:	003ff706 	br	cc88 <__alt_data_end+0xfc00cc88>

0000ccac <__mulsi3>:
    ccac:	0005883a 	mov	r2,zero
    ccb0:	20000726 	beq	r4,zero,ccd0 <__mulsi3+0x24>
    ccb4:	20c0004c 	andi	r3,r4,1
    ccb8:	2008d07a 	srli	r4,r4,1
    ccbc:	18000126 	beq	r3,zero,ccc4 <__mulsi3+0x18>
    ccc0:	1145883a 	add	r2,r2,r5
    ccc4:	294b883a 	add	r5,r5,r5
    ccc8:	203ffa1e 	bne	r4,zero,ccb4 <__alt_data_end+0xfc00ccb4>
    cccc:	f800283a 	ret
    ccd0:	f800283a 	ret

0000ccd4 <__divsf3>:
    ccd4:	defff504 	addi	sp,sp,-44
    ccd8:	200cd5fa 	srli	r6,r4,23
    ccdc:	dcc00415 	stw	r19,16(sp)
    cce0:	2026d7fa 	srli	r19,r4,31
    cce4:	00c02034 	movhi	r3,128
    cce8:	dd800715 	stw	r22,28(sp)
    ccec:	dd000515 	stw	r20,20(sp)
    ccf0:	dc800315 	stw	r18,12(sp)
    ccf4:	18ffffc4 	addi	r3,r3,-1
    ccf8:	dfc00a15 	stw	ra,40(sp)
    ccfc:	df000915 	stw	fp,36(sp)
    cd00:	ddc00815 	stw	r23,32(sp)
    cd04:	dd400615 	stw	r21,24(sp)
    cd08:	dc400215 	stw	r17,8(sp)
    cd0c:	dc000115 	stw	r16,4(sp)
    cd10:	35003fcc 	andi	r20,r6,255
    cd14:	1924703a 	and	r18,r3,r4
    cd18:	9d803fcc 	andi	r22,r19,255
    cd1c:	a0005226 	beq	r20,zero,ce68 <__divsf3+0x194>
    cd20:	00803fc4 	movi	r2,255
    cd24:	a0802e26 	beq	r20,r2,cde0 <__divsf3+0x10c>
    cd28:	91002034 	orhi	r4,r18,128
    cd2c:	202490fa 	slli	r18,r4,3
    cd30:	a53fe044 	addi	r20,r20,-127
    cd34:	0021883a 	mov	r16,zero
    cd38:	002f883a 	mov	r23,zero
    cd3c:	280cd5fa 	srli	r6,r5,23
    cd40:	282ad7fa 	srli	r21,r5,31
    cd44:	00c02034 	movhi	r3,128
    cd48:	18ffffc4 	addi	r3,r3,-1
    cd4c:	31803fcc 	andi	r6,r6,255
    cd50:	1962703a 	and	r17,r3,r5
    cd54:	af003fcc 	andi	fp,r21,255
    cd58:	30004a26 	beq	r6,zero,ce84 <__divsf3+0x1b0>
    cd5c:	00803fc4 	movi	r2,255
    cd60:	30804526 	beq	r6,r2,ce78 <__divsf3+0x1a4>
    cd64:	89402034 	orhi	r5,r17,128
    cd68:	282290fa 	slli	r17,r5,3
    cd6c:	31bfe044 	addi	r6,r6,-127
    cd70:	000b883a 	mov	r5,zero
    cd74:	2c20b03a 	or	r16,r5,r16
    cd78:	802090ba 	slli	r16,r16,2
    cd7c:	00800074 	movhi	r2,1
    cd80:	10b36804 	addi	r2,r2,-12896
    cd84:	80a1883a 	add	r16,r16,r2
    cd88:	81000017 	ldw	r4,0(r16)
    cd8c:	9d46f03a 	xor	r3,r19,r21
    cd90:	180f883a 	mov	r7,r3
    cd94:	18803fcc 	andi	r2,r3,255
    cd98:	a18dc83a 	sub	r6,r20,r6
    cd9c:	2000683a 	jmp	r4
    cda0:	0000cf84 	movi	zero,830
    cda4:	0000ce08 	cmpgei	zero,zero,824
    cda8:	0000cf78 	rdprs	zero,zero,829
    cdac:	0000cdf4 	movhi	zero,823
    cdb0:	0000cf78 	rdprs	zero,zero,829
    cdb4:	0000cf50 	cmplti	zero,zero,829
    cdb8:	0000cf78 	rdprs	zero,zero,829
    cdbc:	0000cdf4 	movhi	zero,823
    cdc0:	0000ce08 	cmpgei	zero,zero,824
    cdc4:	0000ce08 	cmpgei	zero,zero,824
    cdc8:	0000cf50 	cmplti	zero,zero,829
    cdcc:	0000cdf4 	movhi	zero,823
    cdd0:	0000d064 	muli	zero,zero,833
    cdd4:	0000d064 	muli	zero,zero,833
    cdd8:	0000d064 	muli	zero,zero,833
    cddc:	0000d018 	cmpnei	zero,zero,832
    cde0:	9000581e 	bne	r18,zero,cf44 <__divsf3+0x270>
    cde4:	04000204 	movi	r16,8
    cde8:	05c00084 	movi	r23,2
    cdec:	003fd306 	br	cd3c <__alt_data_end+0xfc00cd3c>
    cdf0:	0023883a 	mov	r17,zero
    cdf4:	e02d883a 	mov	r22,fp
    cdf8:	282f883a 	mov	r23,r5
    cdfc:	00800084 	movi	r2,2
    ce00:	b8808f1e 	bne	r23,r2,d040 <__divsf3+0x36c>
    ce04:	b005883a 	mov	r2,r22
    ce08:	11c0004c 	andi	r7,r2,1
    ce0c:	013fffc4 	movi	r4,-1
    ce10:	000d883a 	mov	r6,zero
    ce14:	21003fcc 	andi	r4,r4,255
    ce18:	200895fa 	slli	r4,r4,23
    ce1c:	38803fcc 	andi	r2,r7,255
    ce20:	00c02034 	movhi	r3,128
    ce24:	100497fa 	slli	r2,r2,31
    ce28:	18ffffc4 	addi	r3,r3,-1
    ce2c:	30c6703a 	and	r3,r6,r3
    ce30:	1906b03a 	or	r3,r3,r4
    ce34:	1884b03a 	or	r2,r3,r2
    ce38:	dfc00a17 	ldw	ra,40(sp)
    ce3c:	df000917 	ldw	fp,36(sp)
    ce40:	ddc00817 	ldw	r23,32(sp)
    ce44:	dd800717 	ldw	r22,28(sp)
    ce48:	dd400617 	ldw	r21,24(sp)
    ce4c:	dd000517 	ldw	r20,20(sp)
    ce50:	dcc00417 	ldw	r19,16(sp)
    ce54:	dc800317 	ldw	r18,12(sp)
    ce58:	dc400217 	ldw	r17,8(sp)
    ce5c:	dc000117 	ldw	r16,4(sp)
    ce60:	dec00b04 	addi	sp,sp,44
    ce64:	f800283a 	ret
    ce68:	90002b1e 	bne	r18,zero,cf18 <__divsf3+0x244>
    ce6c:	04000104 	movi	r16,4
    ce70:	05c00044 	movi	r23,1
    ce74:	003fb106 	br	cd3c <__alt_data_end+0xfc00cd3c>
    ce78:	8800251e 	bne	r17,zero,cf10 <__divsf3+0x23c>
    ce7c:	01400084 	movi	r5,2
    ce80:	00000206 	br	ce8c <__divsf3+0x1b8>
    ce84:	88001a1e 	bne	r17,zero,cef0 <__divsf3+0x21c>
    ce88:	01400044 	movi	r5,1
    ce8c:	8160b03a 	or	r16,r16,r5
    ce90:	802090ba 	slli	r16,r16,2
    ce94:	00c00074 	movhi	r3,1
    ce98:	18f3ac04 	addi	r3,r3,-12624
    ce9c:	80e1883a 	add	r16,r16,r3
    cea0:	80c00017 	ldw	r3,0(r16)
    cea4:	9d44f03a 	xor	r2,r19,r21
    cea8:	a18dc83a 	sub	r6,r20,r6
    ceac:	1800683a 	jmp	r3
    ceb0:	0000ce08 	cmpgei	zero,zero,824
    ceb4:	0000ce08 	cmpgei	zero,zero,824
    ceb8:	0000d054 	movui	zero,833
    cebc:	0000cdf0 	cmpltui	zero,zero,823
    cec0:	0000d054 	movui	zero,833
    cec4:	0000cf50 	cmplti	zero,zero,829
    cec8:	0000d054 	movui	zero,833
    cecc:	0000cdf0 	cmpltui	zero,zero,823
    ced0:	0000ce08 	cmpgei	zero,zero,824
    ced4:	0000ce08 	cmpgei	zero,zero,824
    ced8:	0000cf50 	cmplti	zero,zero,829
    cedc:	0000cdf0 	cmpltui	zero,zero,823
    cee0:	0000d064 	muli	zero,zero,833
    cee4:	0000d064 	muli	zero,zero,833
    cee8:	0000d064 	muli	zero,zero,833
    ceec:	0000d07c 	xorhi	zero,zero,833
    cef0:	8809883a 	mov	r4,r17
    cef4:	000e1640 	call	e164 <__clzsi2>
    cef8:	10fffec4 	addi	r3,r2,-5
    cefc:	10801d84 	addi	r2,r2,118
    cf00:	88e2983a 	sll	r17,r17,r3
    cf04:	008dc83a 	sub	r6,zero,r2
    cf08:	000b883a 	mov	r5,zero
    cf0c:	003f9906 	br	cd74 <__alt_data_end+0xfc00cd74>
    cf10:	014000c4 	movi	r5,3
    cf14:	003f9706 	br	cd74 <__alt_data_end+0xfc00cd74>
    cf18:	9009883a 	mov	r4,r18
    cf1c:	d9400015 	stw	r5,0(sp)
    cf20:	000e1640 	call	e164 <__clzsi2>
    cf24:	10fffec4 	addi	r3,r2,-5
    cf28:	11801d84 	addi	r6,r2,118
    cf2c:	90e4983a 	sll	r18,r18,r3
    cf30:	01a9c83a 	sub	r20,zero,r6
    cf34:	0021883a 	mov	r16,zero
    cf38:	002f883a 	mov	r23,zero
    cf3c:	d9400017 	ldw	r5,0(sp)
    cf40:	003f7e06 	br	cd3c <__alt_data_end+0xfc00cd3c>
    cf44:	04000304 	movi	r16,12
    cf48:	05c000c4 	movi	r23,3
    cf4c:	003f7b06 	br	cd3c <__alt_data_end+0xfc00cd3c>
    cf50:	01802034 	movhi	r6,128
    cf54:	000f883a 	mov	r7,zero
    cf58:	31bfffc4 	addi	r6,r6,-1
    cf5c:	013fffc4 	movi	r4,-1
    cf60:	003fac06 	br	ce14 <__alt_data_end+0xfc00ce14>
    cf64:	01400044 	movi	r5,1
    cf68:	2909c83a 	sub	r4,r5,r4
    cf6c:	00c006c4 	movi	r3,27
    cf70:	19004b0e 	bge	r3,r4,d0a0 <__divsf3+0x3cc>
    cf74:	114e703a 	and	r7,r2,r5
    cf78:	0009883a 	mov	r4,zero
    cf7c:	000d883a 	mov	r6,zero
    cf80:	003fa406 	br	ce14 <__alt_data_end+0xfc00ce14>
    cf84:	9006917a 	slli	r3,r18,5
    cf88:	8822917a 	slli	r17,r17,5
    cf8c:	1c40372e 	bgeu	r3,r17,d06c <__divsf3+0x398>
    cf90:	31bfffc4 	addi	r6,r6,-1
    cf94:	010006c4 	movi	r4,27
    cf98:	000b883a 	mov	r5,zero
    cf9c:	180f883a 	mov	r7,r3
    cfa0:	294b883a 	add	r5,r5,r5
    cfa4:	18c7883a 	add	r3,r3,r3
    cfa8:	38000116 	blt	r7,zero,cfb0 <__divsf3+0x2dc>
    cfac:	1c400236 	bltu	r3,r17,cfb8 <__divsf3+0x2e4>
    cfb0:	1c47c83a 	sub	r3,r3,r17
    cfb4:	29400054 	ori	r5,r5,1
    cfb8:	213fffc4 	addi	r4,r4,-1
    cfbc:	203ff71e 	bne	r4,zero,cf9c <__alt_data_end+0xfc00cf9c>
    cfc0:	1806c03a 	cmpne	r3,r3,zero
    cfc4:	1962b03a 	or	r17,r3,r5
    cfc8:	31001fc4 	addi	r4,r6,127
    cfcc:	013fe50e 	bge	zero,r4,cf64 <__alt_data_end+0xfc00cf64>
    cfd0:	88c001cc 	andi	r3,r17,7
    cfd4:	18000426 	beq	r3,zero,cfe8 <__divsf3+0x314>
    cfd8:	88c003cc 	andi	r3,r17,15
    cfdc:	01400104 	movi	r5,4
    cfe0:	19400126 	beq	r3,r5,cfe8 <__divsf3+0x314>
    cfe4:	8963883a 	add	r17,r17,r5
    cfe8:	88c2002c 	andhi	r3,r17,2048
    cfec:	18000426 	beq	r3,zero,d000 <__divsf3+0x32c>
    cff0:	00fe0034 	movhi	r3,63488
    cff4:	18ffffc4 	addi	r3,r3,-1
    cff8:	31002004 	addi	r4,r6,128
    cffc:	88e2703a 	and	r17,r17,r3
    d000:	00c03f84 	movi	r3,254
    d004:	193f8016 	blt	r3,r4,ce08 <__alt_data_end+0xfc00ce08>
    d008:	880c91ba 	slli	r6,r17,6
    d00c:	11c0004c 	andi	r7,r2,1
    d010:	300cd27a 	srli	r6,r6,9
    d014:	003f7f06 	br	ce14 <__alt_data_end+0xfc00ce14>
    d018:	9080102c 	andhi	r2,r18,64
    d01c:	10000226 	beq	r2,zero,d028 <__divsf3+0x354>
    d020:	8880102c 	andhi	r2,r17,64
    d024:	10001826 	beq	r2,zero,d088 <__divsf3+0x3b4>
    d028:	00802034 	movhi	r2,128
    d02c:	91801034 	orhi	r6,r18,64
    d030:	10bfffc4 	addi	r2,r2,-1
    d034:	980f883a 	mov	r7,r19
    d038:	308c703a 	and	r6,r6,r2
    d03c:	003fc706 	br	cf5c <__alt_data_end+0xfc00cf5c>
    d040:	008000c4 	movi	r2,3
    d044:	b8802d26 	beq	r23,r2,d0fc <__divsf3+0x428>
    d048:	00c00044 	movi	r3,1
    d04c:	b005883a 	mov	r2,r22
    d050:	b8ffdd1e 	bne	r23,r3,cfc8 <__alt_data_end+0xfc00cfc8>
    d054:	11c0004c 	andi	r7,r2,1
    d058:	0009883a 	mov	r4,zero
    d05c:	000d883a 	mov	r6,zero
    d060:	003f6c06 	br	ce14 <__alt_data_end+0xfc00ce14>
    d064:	9023883a 	mov	r17,r18
    d068:	003f6406 	br	cdfc <__alt_data_end+0xfc00cdfc>
    d06c:	1c47c83a 	sub	r3,r3,r17
    d070:	01000684 	movi	r4,26
    d074:	01400044 	movi	r5,1
    d078:	003fc806 	br	cf9c <__alt_data_end+0xfc00cf9c>
    d07c:	9080102c 	andhi	r2,r18,64
    d080:	103fe926 	beq	r2,zero,d028 <__alt_data_end+0xfc00d028>
    d084:	0023883a 	mov	r17,zero
    d088:	00802034 	movhi	r2,128
    d08c:	89801034 	orhi	r6,r17,64
    d090:	10bfffc4 	addi	r2,r2,-1
    d094:	a80f883a 	mov	r7,r21
    d098:	308c703a 	and	r6,r6,r2
    d09c:	003faf06 	br	cf5c <__alt_data_end+0xfc00cf5c>
    d0a0:	01c00804 	movi	r7,32
    d0a4:	390fc83a 	sub	r7,r7,r4
    d0a8:	89ce983a 	sll	r7,r17,r7
    d0ac:	890ad83a 	srl	r5,r17,r4
    d0b0:	380ec03a 	cmpne	r7,r7,zero
    d0b4:	29cab03a 	or	r5,r5,r7
    d0b8:	28c001cc 	andi	r3,r5,7
    d0bc:	18000426 	beq	r3,zero,d0d0 <__divsf3+0x3fc>
    d0c0:	28c003cc 	andi	r3,r5,15
    d0c4:	01000104 	movi	r4,4
    d0c8:	19000126 	beq	r3,r4,d0d0 <__divsf3+0x3fc>
    d0cc:	290b883a 	add	r5,r5,r4
    d0d0:	28c1002c 	andhi	r3,r5,1024
    d0d4:	18000426 	beq	r3,zero,d0e8 <__divsf3+0x414>
    d0d8:	11c0004c 	andi	r7,r2,1
    d0dc:	01000044 	movi	r4,1
    d0e0:	000d883a 	mov	r6,zero
    d0e4:	003f4b06 	br	ce14 <__alt_data_end+0xfc00ce14>
    d0e8:	280a91ba 	slli	r5,r5,6
    d0ec:	11c0004c 	andi	r7,r2,1
    d0f0:	0009883a 	mov	r4,zero
    d0f4:	280cd27a 	srli	r6,r5,9
    d0f8:	003f4606 	br	ce14 <__alt_data_end+0xfc00ce14>
    d0fc:	00802034 	movhi	r2,128
    d100:	89801034 	orhi	r6,r17,64
    d104:	10bfffc4 	addi	r2,r2,-1
    d108:	b00f883a 	mov	r7,r22
    d10c:	308c703a 	and	r6,r6,r2
    d110:	003f9206 	br	cf5c <__alt_data_end+0xfc00cf5c>

0000d114 <__gesf2>:
    d114:	2004d5fa 	srli	r2,r4,23
    d118:	2806d5fa 	srli	r3,r5,23
    d11c:	01802034 	movhi	r6,128
    d120:	31bfffc4 	addi	r6,r6,-1
    d124:	10803fcc 	andi	r2,r2,255
    d128:	01c03fc4 	movi	r7,255
    d12c:	3110703a 	and	r8,r6,r4
    d130:	18c03fcc 	andi	r3,r3,255
    d134:	314c703a 	and	r6,r6,r5
    d138:	2008d7fa 	srli	r4,r4,31
    d13c:	280ad7fa 	srli	r5,r5,31
    d140:	11c01926 	beq	r2,r7,d1a8 <__gesf2+0x94>
    d144:	01c03fc4 	movi	r7,255
    d148:	19c00f26 	beq	r3,r7,d188 <__gesf2+0x74>
    d14c:	1000061e 	bne	r2,zero,d168 <__gesf2+0x54>
    d150:	400f003a 	cmpeq	r7,r8,zero
    d154:	1800071e 	bne	r3,zero,d174 <__gesf2+0x60>
    d158:	3000061e 	bne	r6,zero,d174 <__gesf2+0x60>
    d15c:	0005883a 	mov	r2,zero
    d160:	40000e1e 	bne	r8,zero,d19c <__gesf2+0x88>
    d164:	f800283a 	ret
    d168:	18000a1e 	bne	r3,zero,d194 <__gesf2+0x80>
    d16c:	30000b26 	beq	r6,zero,d19c <__gesf2+0x88>
    d170:	000f883a 	mov	r7,zero
    d174:	29403fcc 	andi	r5,r5,255
    d178:	38000726 	beq	r7,zero,d198 <__gesf2+0x84>
    d17c:	28000826 	beq	r5,zero,d1a0 <__gesf2+0x8c>
    d180:	00800044 	movi	r2,1
    d184:	f800283a 	ret
    d188:	303ff026 	beq	r6,zero,d14c <__alt_data_end+0xfc00d14c>
    d18c:	00bfff84 	movi	r2,-2
    d190:	f800283a 	ret
    d194:	29403fcc 	andi	r5,r5,255
    d198:	21400526 	beq	r4,r5,d1b0 <__gesf2+0x9c>
    d19c:	203ff826 	beq	r4,zero,d180 <__alt_data_end+0xfc00d180>
    d1a0:	00bfffc4 	movi	r2,-1
    d1a4:	f800283a 	ret
    d1a8:	403fe626 	beq	r8,zero,d144 <__alt_data_end+0xfc00d144>
    d1ac:	003ff706 	br	d18c <__alt_data_end+0xfc00d18c>
    d1b0:	18bffa16 	blt	r3,r2,d19c <__alt_data_end+0xfc00d19c>
    d1b4:	10c00216 	blt	r2,r3,d1c0 <__gesf2+0xac>
    d1b8:	323ff836 	bltu	r6,r8,d19c <__alt_data_end+0xfc00d19c>
    d1bc:	4180022e 	bgeu	r8,r6,d1c8 <__gesf2+0xb4>
    d1c0:	203fef1e 	bne	r4,zero,d180 <__alt_data_end+0xfc00d180>
    d1c4:	003ff606 	br	d1a0 <__alt_data_end+0xfc00d1a0>
    d1c8:	0005883a 	mov	r2,zero
    d1cc:	f800283a 	ret

0000d1d0 <__mulsf3>:
    d1d0:	defff504 	addi	sp,sp,-44
    d1d4:	dc000115 	stw	r16,4(sp)
    d1d8:	2020d5fa 	srli	r16,r4,23
    d1dc:	dd400615 	stw	r21,24(sp)
    d1e0:	202ad7fa 	srli	r21,r4,31
    d1e4:	dc800315 	stw	r18,12(sp)
    d1e8:	04802034 	movhi	r18,128
    d1ec:	df000915 	stw	fp,36(sp)
    d1f0:	dd000515 	stw	r20,20(sp)
    d1f4:	94bfffc4 	addi	r18,r18,-1
    d1f8:	dfc00a15 	stw	ra,40(sp)
    d1fc:	ddc00815 	stw	r23,32(sp)
    d200:	dd800715 	stw	r22,28(sp)
    d204:	dcc00415 	stw	r19,16(sp)
    d208:	dc400215 	stw	r17,8(sp)
    d20c:	84003fcc 	andi	r16,r16,255
    d210:	9124703a 	and	r18,r18,r4
    d214:	a829883a 	mov	r20,r21
    d218:	af003fcc 	andi	fp,r21,255
    d21c:	80005426 	beq	r16,zero,d370 <__mulsf3+0x1a0>
    d220:	00803fc4 	movi	r2,255
    d224:	80802f26 	beq	r16,r2,d2e4 <__mulsf3+0x114>
    d228:	91002034 	orhi	r4,r18,128
    d22c:	202490fa 	slli	r18,r4,3
    d230:	843fe044 	addi	r16,r16,-127
    d234:	0023883a 	mov	r17,zero
    d238:	002f883a 	mov	r23,zero
    d23c:	2804d5fa 	srli	r2,r5,23
    d240:	282cd7fa 	srli	r22,r5,31
    d244:	01002034 	movhi	r4,128
    d248:	213fffc4 	addi	r4,r4,-1
    d24c:	10803fcc 	andi	r2,r2,255
    d250:	2166703a 	and	r19,r4,r5
    d254:	b1803fcc 	andi	r6,r22,255
    d258:	10004c26 	beq	r2,zero,d38c <__mulsf3+0x1bc>
    d25c:	00c03fc4 	movi	r3,255
    d260:	10c04726 	beq	r2,r3,d380 <__mulsf3+0x1b0>
    d264:	99002034 	orhi	r4,r19,128
    d268:	202690fa 	slli	r19,r4,3
    d26c:	10bfe044 	addi	r2,r2,-127
    d270:	0007883a 	mov	r3,zero
    d274:	80a1883a 	add	r16,r16,r2
    d278:	010003c4 	movi	r4,15
    d27c:	1c44b03a 	or	r2,r3,r17
    d280:	b56af03a 	xor	r21,r22,r21
    d284:	81c00044 	addi	r7,r16,1
    d288:	20806b36 	bltu	r4,r2,d438 <__mulsf3+0x268>
    d28c:	100490ba 	slli	r2,r2,2
    d290:	01000074 	movhi	r4,1
    d294:	2134a904 	addi	r4,r4,-11612
    d298:	1105883a 	add	r2,r2,r4
    d29c:	10800017 	ldw	r2,0(r2)
    d2a0:	1000683a 	jmp	r2
    d2a4:	0000d438 	rdprs	zero,zero,848
    d2a8:	0000d2f8 	rdprs	zero,zero,843
    d2ac:	0000d2f8 	rdprs	zero,zero,843
    d2b0:	0000d2f4 	movhi	zero,843
    d2b4:	0000d41c 	xori	zero,zero,848
    d2b8:	0000d41c 	xori	zero,zero,848
    d2bc:	0000d408 	cmpgei	zero,zero,848
    d2c0:	0000d2f4 	movhi	zero,843
    d2c4:	0000d41c 	xori	zero,zero,848
    d2c8:	0000d408 	cmpgei	zero,zero,848
    d2cc:	0000d41c 	xori	zero,zero,848
    d2d0:	0000d2f4 	movhi	zero,843
    d2d4:	0000d428 	cmpgeui	zero,zero,848
    d2d8:	0000d428 	cmpgeui	zero,zero,848
    d2dc:	0000d428 	cmpgeui	zero,zero,848
    d2e0:	0000d538 	rdprs	zero,zero,852
    d2e4:	90003b1e 	bne	r18,zero,d3d4 <__mulsf3+0x204>
    d2e8:	04400204 	movi	r17,8
    d2ec:	05c00084 	movi	r23,2
    d2f0:	003fd206 	br	d23c <__alt_data_end+0xfc00d23c>
    d2f4:	302b883a 	mov	r21,r6
    d2f8:	00800084 	movi	r2,2
    d2fc:	18802626 	beq	r3,r2,d398 <__mulsf3+0x1c8>
    d300:	008000c4 	movi	r2,3
    d304:	1880b826 	beq	r3,r2,d5e8 <__mulsf3+0x418>
    d308:	00800044 	movi	r2,1
    d30c:	1880af1e 	bne	r3,r2,d5cc <__mulsf3+0x3fc>
    d310:	a829883a 	mov	r20,r21
    d314:	0007883a 	mov	r3,zero
    d318:	0009883a 	mov	r4,zero
    d31c:	18803fcc 	andi	r2,r3,255
    d320:	100695fa 	slli	r3,r2,23
    d324:	a0803fcc 	andi	r2,r20,255
    d328:	100a97fa 	slli	r5,r2,31
    d32c:	00802034 	movhi	r2,128
    d330:	10bfffc4 	addi	r2,r2,-1
    d334:	2084703a 	and	r2,r4,r2
    d338:	10c4b03a 	or	r2,r2,r3
    d33c:	1144b03a 	or	r2,r2,r5
    d340:	dfc00a17 	ldw	ra,40(sp)
    d344:	df000917 	ldw	fp,36(sp)
    d348:	ddc00817 	ldw	r23,32(sp)
    d34c:	dd800717 	ldw	r22,28(sp)
    d350:	dd400617 	ldw	r21,24(sp)
    d354:	dd000517 	ldw	r20,20(sp)
    d358:	dcc00417 	ldw	r19,16(sp)
    d35c:	dc800317 	ldw	r18,12(sp)
    d360:	dc400217 	ldw	r17,8(sp)
    d364:	dc000117 	ldw	r16,4(sp)
    d368:	dec00b04 	addi	sp,sp,44
    d36c:	f800283a 	ret
    d370:	90000d1e 	bne	r18,zero,d3a8 <__mulsf3+0x1d8>
    d374:	04400104 	movi	r17,4
    d378:	05c00044 	movi	r23,1
    d37c:	003faf06 	br	d23c <__alt_data_end+0xfc00d23c>
    d380:	9806c03a 	cmpne	r3,r19,zero
    d384:	18c00084 	addi	r3,r3,2
    d388:	003fba06 	br	d274 <__alt_data_end+0xfc00d274>
    d38c:	9800141e 	bne	r19,zero,d3e0 <__mulsf3+0x210>
    d390:	00c00044 	movi	r3,1
    d394:	003fb706 	br	d274 <__alt_data_end+0xfc00d274>
    d398:	a829883a 	mov	r20,r21
    d39c:	00ffffc4 	movi	r3,-1
    d3a0:	0009883a 	mov	r4,zero
    d3a4:	003fdd06 	br	d31c <__alt_data_end+0xfc00d31c>
    d3a8:	9009883a 	mov	r4,r18
    d3ac:	d9400015 	stw	r5,0(sp)
    d3b0:	000e1640 	call	e164 <__clzsi2>
    d3b4:	10fffec4 	addi	r3,r2,-5
    d3b8:	10801d84 	addi	r2,r2,118
    d3bc:	90e4983a 	sll	r18,r18,r3
    d3c0:	00a1c83a 	sub	r16,zero,r2
    d3c4:	0023883a 	mov	r17,zero
    d3c8:	002f883a 	mov	r23,zero
    d3cc:	d9400017 	ldw	r5,0(sp)
    d3d0:	003f9a06 	br	d23c <__alt_data_end+0xfc00d23c>
    d3d4:	04400304 	movi	r17,12
    d3d8:	05c000c4 	movi	r23,3
    d3dc:	003f9706 	br	d23c <__alt_data_end+0xfc00d23c>
    d3e0:	9809883a 	mov	r4,r19
    d3e4:	d9800015 	stw	r6,0(sp)
    d3e8:	000e1640 	call	e164 <__clzsi2>
    d3ec:	10fffec4 	addi	r3,r2,-5
    d3f0:	10801d84 	addi	r2,r2,118
    d3f4:	98e6983a 	sll	r19,r19,r3
    d3f8:	0085c83a 	sub	r2,zero,r2
    d3fc:	0007883a 	mov	r3,zero
    d400:	d9800017 	ldw	r6,0(sp)
    d404:	003f9b06 	br	d274 <__alt_data_end+0xfc00d274>
    d408:	01002034 	movhi	r4,128
    d40c:	0029883a 	mov	r20,zero
    d410:	213fffc4 	addi	r4,r4,-1
    d414:	00ffffc4 	movi	r3,-1
    d418:	003fc006 	br	d31c <__alt_data_end+0xfc00d31c>
    d41c:	9027883a 	mov	r19,r18
    d420:	b807883a 	mov	r3,r23
    d424:	003fb406 	br	d2f8 <__alt_data_end+0xfc00d2f8>
    d428:	9027883a 	mov	r19,r18
    d42c:	e02b883a 	mov	r21,fp
    d430:	b807883a 	mov	r3,r23
    d434:	003fb006 	br	d2f8 <__alt_data_end+0xfc00d2f8>
    d438:	9028d43a 	srli	r20,r18,16
    d43c:	982cd43a 	srli	r22,r19,16
    d440:	94bfffcc 	andi	r18,r18,65535
    d444:	9cffffcc 	andi	r19,r19,65535
    d448:	980b883a 	mov	r5,r19
    d44c:	9009883a 	mov	r4,r18
    d450:	d9c00015 	stw	r7,0(sp)
    d454:	000ccac0 	call	ccac <__mulsi3>
    d458:	a00b883a 	mov	r5,r20
    d45c:	9809883a 	mov	r4,r19
    d460:	1023883a 	mov	r17,r2
    d464:	000ccac0 	call	ccac <__mulsi3>
    d468:	a009883a 	mov	r4,r20
    d46c:	b00b883a 	mov	r5,r22
    d470:	1027883a 	mov	r19,r2
    d474:	000ccac0 	call	ccac <__mulsi3>
    d478:	b00b883a 	mov	r5,r22
    d47c:	9009883a 	mov	r4,r18
    d480:	1029883a 	mov	r20,r2
    d484:	000ccac0 	call	ccac <__mulsi3>
    d488:	8806d43a 	srli	r3,r17,16
    d48c:	14c5883a 	add	r2,r2,r19
    d490:	d9c00017 	ldw	r7,0(sp)
    d494:	1885883a 	add	r2,r3,r2
    d498:	14c0022e 	bgeu	r2,r19,d4a4 <__mulsf3+0x2d4>
    d49c:	00c00074 	movhi	r3,1
    d4a0:	a0e9883a 	add	r20,r20,r3
    d4a4:	1026943a 	slli	r19,r2,16
    d4a8:	8c7fffcc 	andi	r17,r17,65535
    d4ac:	1004d43a 	srli	r2,r2,16
    d4b0:	9c63883a 	add	r17,r19,r17
    d4b4:	882691ba 	slli	r19,r17,6
    d4b8:	1505883a 	add	r2,r2,r20
    d4bc:	8822d6ba 	srli	r17,r17,26
    d4c0:	100891ba 	slli	r4,r2,6
    d4c4:	9826c03a 	cmpne	r19,r19,zero
    d4c8:	9c62b03a 	or	r17,r19,r17
    d4cc:	8926b03a 	or	r19,r17,r4
    d4d0:	9882002c 	andhi	r2,r19,2048
    d4d4:	10000426 	beq	r2,zero,d4e8 <__mulsf3+0x318>
    d4d8:	9804d07a 	srli	r2,r19,1
    d4dc:	9900004c 	andi	r4,r19,1
    d4e0:	3821883a 	mov	r16,r7
    d4e4:	1126b03a 	or	r19,r2,r4
    d4e8:	80c01fc4 	addi	r3,r16,127
    d4ec:	00c0210e 	bge	zero,r3,d574 <__mulsf3+0x3a4>
    d4f0:	988001cc 	andi	r2,r19,7
    d4f4:	10000426 	beq	r2,zero,d508 <__mulsf3+0x338>
    d4f8:	988003cc 	andi	r2,r19,15
    d4fc:	01000104 	movi	r4,4
    d500:	11000126 	beq	r2,r4,d508 <__mulsf3+0x338>
    d504:	9927883a 	add	r19,r19,r4
    d508:	9882002c 	andhi	r2,r19,2048
    d50c:	10000426 	beq	r2,zero,d520 <__mulsf3+0x350>
    d510:	00be0034 	movhi	r2,63488
    d514:	10bfffc4 	addi	r2,r2,-1
    d518:	80c02004 	addi	r3,r16,128
    d51c:	98a6703a 	and	r19,r19,r2
    d520:	00803f84 	movi	r2,254
    d524:	10ff9c16 	blt	r2,r3,d398 <__alt_data_end+0xfc00d398>
    d528:	980891ba 	slli	r4,r19,6
    d52c:	a829883a 	mov	r20,r21
    d530:	2008d27a 	srli	r4,r4,9
    d534:	003f7906 	br	d31c <__alt_data_end+0xfc00d31c>
    d538:	9080102c 	andhi	r2,r18,64
    d53c:	10000826 	beq	r2,zero,d560 <__mulsf3+0x390>
    d540:	9880102c 	andhi	r2,r19,64
    d544:	1000061e 	bne	r2,zero,d560 <__mulsf3+0x390>
    d548:	00802034 	movhi	r2,128
    d54c:	99001034 	orhi	r4,r19,64
    d550:	10bfffc4 	addi	r2,r2,-1
    d554:	b029883a 	mov	r20,r22
    d558:	2088703a 	and	r4,r4,r2
    d55c:	003fad06 	br	d414 <__alt_data_end+0xfc00d414>
    d560:	00802034 	movhi	r2,128
    d564:	91001034 	orhi	r4,r18,64
    d568:	10bfffc4 	addi	r2,r2,-1
    d56c:	2088703a 	and	r4,r4,r2
    d570:	003fa806 	br	d414 <__alt_data_end+0xfc00d414>
    d574:	00800044 	movi	r2,1
    d578:	10c7c83a 	sub	r3,r2,r3
    d57c:	008006c4 	movi	r2,27
    d580:	10ff6316 	blt	r2,r3,d310 <__alt_data_end+0xfc00d310>
    d584:	00800804 	movi	r2,32
    d588:	10c5c83a 	sub	r2,r2,r3
    d58c:	9884983a 	sll	r2,r19,r2
    d590:	98c6d83a 	srl	r3,r19,r3
    d594:	1004c03a 	cmpne	r2,r2,zero
    d598:	1884b03a 	or	r2,r3,r2
    d59c:	10c001cc 	andi	r3,r2,7
    d5a0:	18000426 	beq	r3,zero,d5b4 <__mulsf3+0x3e4>
    d5a4:	10c003cc 	andi	r3,r2,15
    d5a8:	01000104 	movi	r4,4
    d5ac:	19000126 	beq	r3,r4,d5b4 <__mulsf3+0x3e4>
    d5b0:	1105883a 	add	r2,r2,r4
    d5b4:	10c1002c 	andhi	r3,r2,1024
    d5b8:	18000626 	beq	r3,zero,d5d4 <__mulsf3+0x404>
    d5bc:	a829883a 	mov	r20,r21
    d5c0:	00c00044 	movi	r3,1
    d5c4:	0009883a 	mov	r4,zero
    d5c8:	003f5406 	br	d31c <__alt_data_end+0xfc00d31c>
    d5cc:	3821883a 	mov	r16,r7
    d5d0:	003fc506 	br	d4e8 <__alt_data_end+0xfc00d4e8>
    d5d4:	100491ba 	slli	r2,r2,6
    d5d8:	a829883a 	mov	r20,r21
    d5dc:	0007883a 	mov	r3,zero
    d5e0:	1008d27a 	srli	r4,r2,9
    d5e4:	003f4d06 	br	d31c <__alt_data_end+0xfc00d31c>
    d5e8:	00802034 	movhi	r2,128
    d5ec:	99001034 	orhi	r4,r19,64
    d5f0:	10bfffc4 	addi	r2,r2,-1
    d5f4:	a829883a 	mov	r20,r21
    d5f8:	2088703a 	and	r4,r4,r2
    d5fc:	003f8506 	br	d414 <__alt_data_end+0xfc00d414>

0000d600 <__subsf3>:
    d600:	defffc04 	addi	sp,sp,-16
    d604:	280cd5fa 	srli	r6,r5,23
    d608:	dc000015 	stw	r16,0(sp)
    d60c:	01c02034 	movhi	r7,128
    d610:	2020d5fa 	srli	r16,r4,23
    d614:	39ffffc4 	addi	r7,r7,-1
    d618:	3906703a 	and	r3,r7,r4
    d61c:	dc400115 	stw	r17,4(sp)
    d620:	394e703a 	and	r7,r7,r5
    d624:	2022d7fa 	srli	r17,r4,31
    d628:	dfc00315 	stw	ra,12(sp)
    d62c:	dc800215 	stw	r18,8(sp)
    d630:	31803fcc 	andi	r6,r6,255
    d634:	01003fc4 	movi	r4,255
    d638:	84003fcc 	andi	r16,r16,255
    d63c:	180690fa 	slli	r3,r3,3
    d640:	2804d7fa 	srli	r2,r5,31
    d644:	380e90fa 	slli	r7,r7,3
    d648:	31006d26 	beq	r6,r4,d800 <__subsf3+0x200>
    d64c:	1080005c 	xori	r2,r2,1
    d650:	8189c83a 	sub	r4,r16,r6
    d654:	14404f26 	beq	r2,r17,d794 <__subsf3+0x194>
    d658:	0100770e 	bge	zero,r4,d838 <__subsf3+0x238>
    d65c:	30001e1e 	bne	r6,zero,d6d8 <__subsf3+0xd8>
    d660:	38006a1e 	bne	r7,zero,d80c <__subsf3+0x20c>
    d664:	188001cc 	andi	r2,r3,7
    d668:	10000426 	beq	r2,zero,d67c <__subsf3+0x7c>
    d66c:	188003cc 	andi	r2,r3,15
    d670:	01000104 	movi	r4,4
    d674:	11000126 	beq	r2,r4,d67c <__subsf3+0x7c>
    d678:	1907883a 	add	r3,r3,r4
    d67c:	1881002c 	andhi	r2,r3,1024
    d680:	10003926 	beq	r2,zero,d768 <__subsf3+0x168>
    d684:	84000044 	addi	r16,r16,1
    d688:	00803fc4 	movi	r2,255
    d68c:	80807526 	beq	r16,r2,d864 <__subsf3+0x264>
    d690:	180691ba 	slli	r3,r3,6
    d694:	8880004c 	andi	r2,r17,1
    d698:	180ad27a 	srli	r5,r3,9
    d69c:	84003fcc 	andi	r16,r16,255
    d6a0:	800695fa 	slli	r3,r16,23
    d6a4:	10803fcc 	andi	r2,r2,255
    d6a8:	01002034 	movhi	r4,128
    d6ac:	213fffc4 	addi	r4,r4,-1
    d6b0:	100497fa 	slli	r2,r2,31
    d6b4:	2920703a 	and	r16,r5,r4
    d6b8:	80e0b03a 	or	r16,r16,r3
    d6bc:	8084b03a 	or	r2,r16,r2
    d6c0:	dfc00317 	ldw	ra,12(sp)
    d6c4:	dc800217 	ldw	r18,8(sp)
    d6c8:	dc400117 	ldw	r17,4(sp)
    d6cc:	dc000017 	ldw	r16,0(sp)
    d6d0:	dec00404 	addi	sp,sp,16
    d6d4:	f800283a 	ret
    d6d8:	00803fc4 	movi	r2,255
    d6dc:	80bfe126 	beq	r16,r2,d664 <__alt_data_end+0xfc00d664>
    d6e0:	39c10034 	orhi	r7,r7,1024
    d6e4:	008006c4 	movi	r2,27
    d6e8:	11007416 	blt	r2,r4,d8bc <__subsf3+0x2bc>
    d6ec:	00800804 	movi	r2,32
    d6f0:	1105c83a 	sub	r2,r2,r4
    d6f4:	3884983a 	sll	r2,r7,r2
    d6f8:	390ed83a 	srl	r7,r7,r4
    d6fc:	1008c03a 	cmpne	r4,r2,zero
    d700:	390eb03a 	or	r7,r7,r4
    d704:	19c7c83a 	sub	r3,r3,r7
    d708:	1881002c 	andhi	r2,r3,1024
    d70c:	10001426 	beq	r2,zero,d760 <__subsf3+0x160>
    d710:	04810034 	movhi	r18,1024
    d714:	94bfffc4 	addi	r18,r18,-1
    d718:	1ca4703a 	and	r18,r3,r18
    d71c:	9009883a 	mov	r4,r18
    d720:	000e1640 	call	e164 <__clzsi2>
    d724:	10bffec4 	addi	r2,r2,-5
    d728:	90a4983a 	sll	r18,r18,r2
    d72c:	14005116 	blt	r2,r16,d874 <__subsf3+0x274>
    d730:	1405c83a 	sub	r2,r2,r16
    d734:	10c00044 	addi	r3,r2,1
    d738:	00800804 	movi	r2,32
    d73c:	10c5c83a 	sub	r2,r2,r3
    d740:	9084983a 	sll	r2,r18,r2
    d744:	90e4d83a 	srl	r18,r18,r3
    d748:	0021883a 	mov	r16,zero
    d74c:	1006c03a 	cmpne	r3,r2,zero
    d750:	90c6b03a 	or	r3,r18,r3
    d754:	003fc306 	br	d664 <__alt_data_end+0xfc00d664>
    d758:	2000e026 	beq	r4,zero,dadc <__subsf3+0x4dc>
    d75c:	2007883a 	mov	r3,r4
    d760:	188001cc 	andi	r2,r3,7
    d764:	103fc11e 	bne	r2,zero,d66c <__alt_data_end+0xfc00d66c>
    d768:	180ad0fa 	srli	r5,r3,3
    d76c:	00c03fc4 	movi	r3,255
    d770:	8880004c 	andi	r2,r17,1
    d774:	80c0031e 	bne	r16,r3,d784 <__subsf3+0x184>
    d778:	28006d26 	beq	r5,zero,d930 <__subsf3+0x330>
    d77c:	29401034 	orhi	r5,r5,64
    d780:	043fffc4 	movi	r16,-1
    d784:	00c02034 	movhi	r3,128
    d788:	18ffffc4 	addi	r3,r3,-1
    d78c:	28ca703a 	and	r5,r5,r3
    d790:	003fc206 	br	d69c <__alt_data_end+0xfc00d69c>
    d794:	01003c0e 	bge	zero,r4,d888 <__subsf3+0x288>
    d798:	30002126 	beq	r6,zero,d820 <__subsf3+0x220>
    d79c:	01403fc4 	movi	r5,255
    d7a0:	817fb026 	beq	r16,r5,d664 <__alt_data_end+0xfc00d664>
    d7a4:	39c10034 	orhi	r7,r7,1024
    d7a8:	014006c4 	movi	r5,27
    d7ac:	29007416 	blt	r5,r4,d980 <__subsf3+0x380>
    d7b0:	01400804 	movi	r5,32
    d7b4:	290bc83a 	sub	r5,r5,r4
    d7b8:	394a983a 	sll	r5,r7,r5
    d7bc:	390ed83a 	srl	r7,r7,r4
    d7c0:	2808c03a 	cmpne	r4,r5,zero
    d7c4:	390eb03a 	or	r7,r7,r4
    d7c8:	19c7883a 	add	r3,r3,r7
    d7cc:	1901002c 	andhi	r4,r3,1024
    d7d0:	20003826 	beq	r4,zero,d8b4 <__subsf3+0x2b4>
    d7d4:	84000044 	addi	r16,r16,1
    d7d8:	01003fc4 	movi	r4,255
    d7dc:	81005426 	beq	r16,r4,d930 <__subsf3+0x330>
    d7e0:	1023883a 	mov	r17,r2
    d7e4:	00bf0034 	movhi	r2,64512
    d7e8:	10bfffc4 	addi	r2,r2,-1
    d7ec:	1900004c 	andi	r4,r3,1
    d7f0:	1886703a 	and	r3,r3,r2
    d7f4:	1806d07a 	srli	r3,r3,1
    d7f8:	1906b03a 	or	r3,r3,r4
    d7fc:	003f9906 	br	d664 <__alt_data_end+0xfc00d664>
    d800:	383f9226 	beq	r7,zero,d64c <__alt_data_end+0xfc00d64c>
    d804:	10803fcc 	andi	r2,r2,255
    d808:	003f9106 	br	d650 <__alt_data_end+0xfc00d650>
    d80c:	213fffc4 	addi	r4,r4,-1
    d810:	203fbc26 	beq	r4,zero,d704 <__alt_data_end+0xfc00d704>
    d814:	00803fc4 	movi	r2,255
    d818:	80bfb21e 	bne	r16,r2,d6e4 <__alt_data_end+0xfc00d6e4>
    d81c:	003f9106 	br	d664 <__alt_data_end+0xfc00d664>
    d820:	383f9026 	beq	r7,zero,d664 <__alt_data_end+0xfc00d664>
    d824:	213fffc4 	addi	r4,r4,-1
    d828:	203fe726 	beq	r4,zero,d7c8 <__alt_data_end+0xfc00d7c8>
    d82c:	01403fc4 	movi	r5,255
    d830:	817fdd1e 	bne	r16,r5,d7a8 <__alt_data_end+0xfc00d7a8>
    d834:	003f8b06 	br	d664 <__alt_data_end+0xfc00d664>
    d838:	2000221e 	bne	r4,zero,d8c4 <__subsf3+0x2c4>
    d83c:	81000044 	addi	r4,r16,1
    d840:	21003fcc 	andi	r4,r4,255
    d844:	01400044 	movi	r5,1
    d848:	2900470e 	bge	r5,r4,d968 <__subsf3+0x368>
    d84c:	19e5c83a 	sub	r18,r3,r7
    d850:	9141002c 	andhi	r5,r18,1024
    d854:	28002d26 	beq	r5,zero,d90c <__subsf3+0x30c>
    d858:	38e5c83a 	sub	r18,r7,r3
    d85c:	1023883a 	mov	r17,r2
    d860:	003fae06 	br	d71c <__alt_data_end+0xfc00d71c>
    d864:	8880004c 	andi	r2,r17,1
    d868:	043fffc4 	movi	r16,-1
    d86c:	000b883a 	mov	r5,zero
    d870:	003f8a06 	br	d69c <__alt_data_end+0xfc00d69c>
    d874:	00ff0034 	movhi	r3,64512
    d878:	18ffffc4 	addi	r3,r3,-1
    d87c:	80a1c83a 	sub	r16,r16,r2
    d880:	90c6703a 	and	r3,r18,r3
    d884:	003f7706 	br	d664 <__alt_data_end+0xfc00d664>
    d888:	2000431e 	bne	r4,zero,d998 <__subsf3+0x398>
    d88c:	81000044 	addi	r4,r16,1
    d890:	21803fcc 	andi	r6,r4,255
    d894:	01400044 	movi	r5,1
    d898:	2980280e 	bge	r5,r6,d93c <__subsf3+0x33c>
    d89c:	01403fc4 	movi	r5,255
    d8a0:	21402326 	beq	r4,r5,d930 <__subsf3+0x330>
    d8a4:	19c7883a 	add	r3,r3,r7
    d8a8:	1806d07a 	srli	r3,r3,1
    d8ac:	2021883a 	mov	r16,r4
    d8b0:	003f6c06 	br	d664 <__alt_data_end+0xfc00d664>
    d8b4:	1023883a 	mov	r17,r2
    d8b8:	003fa906 	br	d760 <__alt_data_end+0xfc00d760>
    d8bc:	01c00044 	movi	r7,1
    d8c0:	003f9006 	br	d704 <__alt_data_end+0xfc00d704>
    d8c4:	8000151e 	bne	r16,zero,d91c <__subsf3+0x31c>
    d8c8:	18002f26 	beq	r3,zero,d988 <__subsf3+0x388>
    d8cc:	0108303a 	nor	r4,zero,r4
    d8d0:	20000a26 	beq	r4,zero,d8fc <__subsf3+0x2fc>
    d8d4:	01403fc4 	movi	r5,255
    d8d8:	31402b26 	beq	r6,r5,d988 <__subsf3+0x388>
    d8dc:	014006c4 	movi	r5,27
    d8e0:	29006e16 	blt	r5,r4,da9c <__subsf3+0x49c>
    d8e4:	01400804 	movi	r5,32
    d8e8:	290bc83a 	sub	r5,r5,r4
    d8ec:	194a983a 	sll	r5,r3,r5
    d8f0:	1908d83a 	srl	r4,r3,r4
    d8f4:	2806c03a 	cmpne	r3,r5,zero
    d8f8:	20c6b03a 	or	r3,r4,r3
    d8fc:	38c7c83a 	sub	r3,r7,r3
    d900:	3021883a 	mov	r16,r6
    d904:	1023883a 	mov	r17,r2
    d908:	003f7f06 	br	d708 <__alt_data_end+0xfc00d708>
    d90c:	903f831e 	bne	r18,zero,d71c <__alt_data_end+0xfc00d71c>
    d910:	0005883a 	mov	r2,zero
    d914:	0021883a 	mov	r16,zero
    d918:	003f9a06 	br	d784 <__alt_data_end+0xfc00d784>
    d91c:	01403fc4 	movi	r5,255
    d920:	31401926 	beq	r6,r5,d988 <__subsf3+0x388>
    d924:	0109c83a 	sub	r4,zero,r4
    d928:	18c10034 	orhi	r3,r3,1024
    d92c:	003feb06 	br	d8dc <__alt_data_end+0xfc00d8dc>
    d930:	043fffc4 	movi	r16,-1
    d934:	000b883a 	mov	r5,zero
    d938:	003f5806 	br	d69c <__alt_data_end+0xfc00d69c>
    d93c:	8000481e 	bne	r16,zero,da60 <__subsf3+0x460>
    d940:	18006226 	beq	r3,zero,dacc <__subsf3+0x4cc>
    d944:	383f4726 	beq	r7,zero,d664 <__alt_data_end+0xfc00d664>
    d948:	19c7883a 	add	r3,r3,r7
    d94c:	1881002c 	andhi	r2,r3,1024
    d950:	103f8326 	beq	r2,zero,d760 <__alt_data_end+0xfc00d760>
    d954:	00bf0034 	movhi	r2,64512
    d958:	10bfffc4 	addi	r2,r2,-1
    d95c:	2821883a 	mov	r16,r5
    d960:	1886703a 	and	r3,r3,r2
    d964:	003f3f06 	br	d664 <__alt_data_end+0xfc00d664>
    d968:	80001c1e 	bne	r16,zero,d9dc <__subsf3+0x3dc>
    d96c:	1800261e 	bne	r3,zero,da08 <__subsf3+0x408>
    d970:	38004c26 	beq	r7,zero,daa4 <__subsf3+0x4a4>
    d974:	3807883a 	mov	r3,r7
    d978:	1023883a 	mov	r17,r2
    d97c:	003f3906 	br	d664 <__alt_data_end+0xfc00d664>
    d980:	01c00044 	movi	r7,1
    d984:	003f9006 	br	d7c8 <__alt_data_end+0xfc00d7c8>
    d988:	3807883a 	mov	r3,r7
    d98c:	3021883a 	mov	r16,r6
    d990:	1023883a 	mov	r17,r2
    d994:	003f3306 	br	d664 <__alt_data_end+0xfc00d664>
    d998:	8000161e 	bne	r16,zero,d9f4 <__subsf3+0x3f4>
    d99c:	18002d26 	beq	r3,zero,da54 <__subsf3+0x454>
    d9a0:	0108303a 	nor	r4,zero,r4
    d9a4:	20000a26 	beq	r4,zero,d9d0 <__subsf3+0x3d0>
    d9a8:	01403fc4 	movi	r5,255
    d9ac:	31402926 	beq	r6,r5,da54 <__subsf3+0x454>
    d9b0:	014006c4 	movi	r5,27
    d9b4:	29004716 	blt	r5,r4,dad4 <__subsf3+0x4d4>
    d9b8:	01400804 	movi	r5,32
    d9bc:	290bc83a 	sub	r5,r5,r4
    d9c0:	194a983a 	sll	r5,r3,r5
    d9c4:	1908d83a 	srl	r4,r3,r4
    d9c8:	2806c03a 	cmpne	r3,r5,zero
    d9cc:	20c6b03a 	or	r3,r4,r3
    d9d0:	19c7883a 	add	r3,r3,r7
    d9d4:	3021883a 	mov	r16,r6
    d9d8:	003f7c06 	br	d7cc <__alt_data_end+0xfc00d7cc>
    d9dc:	1800111e 	bne	r3,zero,da24 <__subsf3+0x424>
    d9e0:	38003326 	beq	r7,zero,dab0 <__subsf3+0x4b0>
    d9e4:	3807883a 	mov	r3,r7
    d9e8:	1023883a 	mov	r17,r2
    d9ec:	04003fc4 	movi	r16,255
    d9f0:	003f1c06 	br	d664 <__alt_data_end+0xfc00d664>
    d9f4:	01403fc4 	movi	r5,255
    d9f8:	31401626 	beq	r6,r5,da54 <__subsf3+0x454>
    d9fc:	0109c83a 	sub	r4,zero,r4
    da00:	18c10034 	orhi	r3,r3,1024
    da04:	003fea06 	br	d9b0 <__alt_data_end+0xfc00d9b0>
    da08:	383f1626 	beq	r7,zero,d664 <__alt_data_end+0xfc00d664>
    da0c:	19c9c83a 	sub	r4,r3,r7
    da10:	2141002c 	andhi	r5,r4,1024
    da14:	283f5026 	beq	r5,zero,d758 <__alt_data_end+0xfc00d758>
    da18:	38c7c83a 	sub	r3,r7,r3
    da1c:	1023883a 	mov	r17,r2
    da20:	003f1006 	br	d664 <__alt_data_end+0xfc00d664>
    da24:	38001b26 	beq	r7,zero,da94 <__subsf3+0x494>
    da28:	1806d0fa 	srli	r3,r3,3
    da2c:	1900102c 	andhi	r4,r3,64
    da30:	20000526 	beq	r4,zero,da48 <__subsf3+0x448>
    da34:	380ed0fa 	srli	r7,r7,3
    da38:	3900102c 	andhi	r4,r7,64
    da3c:	2000021e 	bne	r4,zero,da48 <__subsf3+0x448>
    da40:	3807883a 	mov	r3,r7
    da44:	1023883a 	mov	r17,r2
    da48:	180690fa 	slli	r3,r3,3
    da4c:	04003fc4 	movi	r16,255
    da50:	003f0406 	br	d664 <__alt_data_end+0xfc00d664>
    da54:	3807883a 	mov	r3,r7
    da58:	3021883a 	mov	r16,r6
    da5c:	003f0106 	br	d664 <__alt_data_end+0xfc00d664>
    da60:	18001726 	beq	r3,zero,dac0 <__subsf3+0x4c0>
    da64:	38000b26 	beq	r7,zero,da94 <__subsf3+0x494>
    da68:	1806d0fa 	srli	r3,r3,3
    da6c:	1900102c 	andhi	r4,r3,64
    da70:	20000426 	beq	r4,zero,da84 <__subsf3+0x484>
    da74:	380ed0fa 	srli	r7,r7,3
    da78:	3900102c 	andhi	r4,r7,64
    da7c:	2000011e 	bne	r4,zero,da84 <__subsf3+0x484>
    da80:	3807883a 	mov	r3,r7
    da84:	180690fa 	slli	r3,r3,3
    da88:	1023883a 	mov	r17,r2
    da8c:	04003fc4 	movi	r16,255
    da90:	003ef406 	br	d664 <__alt_data_end+0xfc00d664>
    da94:	04003fc4 	movi	r16,255
    da98:	003ef206 	br	d664 <__alt_data_end+0xfc00d664>
    da9c:	00c00044 	movi	r3,1
    daa0:	003f9606 	br	d8fc <__alt_data_end+0xfc00d8fc>
    daa4:	000b883a 	mov	r5,zero
    daa8:	0005883a 	mov	r2,zero
    daac:	003f3506 	br	d784 <__alt_data_end+0xfc00d784>
    dab0:	01402034 	movhi	r5,128
    dab4:	297fffc4 	addi	r5,r5,-1
    dab8:	0005883a 	mov	r2,zero
    dabc:	003f2f06 	br	d77c <__alt_data_end+0xfc00d77c>
    dac0:	3807883a 	mov	r3,r7
    dac4:	04003fc4 	movi	r16,255
    dac8:	003ee606 	br	d664 <__alt_data_end+0xfc00d664>
    dacc:	3807883a 	mov	r3,r7
    dad0:	003ee406 	br	d664 <__alt_data_end+0xfc00d664>
    dad4:	00c00044 	movi	r3,1
    dad8:	003fbd06 	br	d9d0 <__alt_data_end+0xfc00d9d0>
    dadc:	0005883a 	mov	r2,zero
    dae0:	003f2806 	br	d784 <__alt_data_end+0xfc00d784>

0000dae4 <__fixsfsi>:
    dae4:	200ad5fa 	srli	r5,r4,23
    dae8:	00c02034 	movhi	r3,128
    daec:	18ffffc4 	addi	r3,r3,-1
    daf0:	29403fcc 	andi	r5,r5,255
    daf4:	00801f84 	movi	r2,126
    daf8:	1906703a 	and	r3,r3,r4
    dafc:	2008d7fa 	srli	r4,r4,31
    db00:	11400e0e 	bge	r2,r5,db3c <__fixsfsi+0x58>
    db04:	00802744 	movi	r2,157
    db08:	11400816 	blt	r2,r5,db2c <__fixsfsi+0x48>
    db0c:	00802544 	movi	r2,149
    db10:	18c02034 	orhi	r3,r3,128
    db14:	11400b0e 	bge	r2,r5,db44 <__fixsfsi+0x60>
    db18:	28bfda84 	addi	r2,r5,-150
    db1c:	1884983a 	sll	r2,r3,r2
    db20:	20000726 	beq	r4,zero,db40 <__fixsfsi+0x5c>
    db24:	0085c83a 	sub	r2,zero,r2
    db28:	f800283a 	ret
    db2c:	00a00034 	movhi	r2,32768
    db30:	10bfffc4 	addi	r2,r2,-1
    db34:	2085883a 	add	r2,r4,r2
    db38:	f800283a 	ret
    db3c:	0005883a 	mov	r2,zero
    db40:	f800283a 	ret
    db44:	00802584 	movi	r2,150
    db48:	1145c83a 	sub	r2,r2,r5
    db4c:	1884d83a 	srl	r2,r3,r2
    db50:	003ff306 	br	db20 <__alt_data_end+0xfc00db20>

0000db54 <__floatunsisf>:
    db54:	defffe04 	addi	sp,sp,-8
    db58:	dfc00115 	stw	ra,4(sp)
    db5c:	dc000015 	stw	r16,0(sp)
    db60:	20002c26 	beq	r4,zero,dc14 <__floatunsisf+0xc0>
    db64:	2021883a 	mov	r16,r4
    db68:	000e1640 	call	e164 <__clzsi2>
    db6c:	00c02784 	movi	r3,158
    db70:	1887c83a 	sub	r3,r3,r2
    db74:	01002584 	movi	r4,150
    db78:	20c00f16 	blt	r4,r3,dbb8 <__floatunsisf+0x64>
    db7c:	20c9c83a 	sub	r4,r4,r3
    db80:	8108983a 	sll	r4,r16,r4
    db84:	00802034 	movhi	r2,128
    db88:	10bfffc4 	addi	r2,r2,-1
    db8c:	2088703a 	and	r4,r4,r2
    db90:	18803fcc 	andi	r2,r3,255
    db94:	100695fa 	slli	r3,r2,23
    db98:	00802034 	movhi	r2,128
    db9c:	10bfffc4 	addi	r2,r2,-1
    dba0:	2084703a 	and	r2,r4,r2
    dba4:	10c4b03a 	or	r2,r2,r3
    dba8:	dfc00117 	ldw	ra,4(sp)
    dbac:	dc000017 	ldw	r16,0(sp)
    dbb0:	dec00204 	addi	sp,sp,8
    dbb4:	f800283a 	ret
    dbb8:	01002644 	movi	r4,153
    dbbc:	20c01816 	blt	r4,r3,dc20 <__floatunsisf+0xcc>
    dbc0:	20c9c83a 	sub	r4,r4,r3
    dbc4:	8108983a 	sll	r4,r16,r4
    dbc8:	017f0034 	movhi	r5,64512
    dbcc:	297fffc4 	addi	r5,r5,-1
    dbd0:	218001cc 	andi	r6,r4,7
    dbd4:	214a703a 	and	r5,r4,r5
    dbd8:	30000426 	beq	r6,zero,dbec <__floatunsisf+0x98>
    dbdc:	210003cc 	andi	r4,r4,15
    dbe0:	01800104 	movi	r6,4
    dbe4:	21800126 	beq	r4,r6,dbec <__floatunsisf+0x98>
    dbe8:	298b883a 	add	r5,r5,r6
    dbec:	2901002c 	andhi	r4,r5,1024
    dbf0:	20000526 	beq	r4,zero,dc08 <__floatunsisf+0xb4>
    dbf4:	00c027c4 	movi	r3,159
    dbf8:	1887c83a 	sub	r3,r3,r2
    dbfc:	00bf0034 	movhi	r2,64512
    dc00:	10bfffc4 	addi	r2,r2,-1
    dc04:	288a703a 	and	r5,r5,r2
    dc08:	280891ba 	slli	r4,r5,6
    dc0c:	2008d27a 	srli	r4,r4,9
    dc10:	003fdf06 	br	db90 <__alt_data_end+0xfc00db90>
    dc14:	0007883a 	mov	r3,zero
    dc18:	0009883a 	mov	r4,zero
    dc1c:	003fdc06 	br	db90 <__alt_data_end+0xfc00db90>
    dc20:	01402e44 	movi	r5,185
    dc24:	28cbc83a 	sub	r5,r5,r3
    dc28:	01000144 	movi	r4,5
    dc2c:	2089c83a 	sub	r4,r4,r2
    dc30:	814a983a 	sll	r5,r16,r5
    dc34:	8108d83a 	srl	r4,r16,r4
    dc38:	2820c03a 	cmpne	r16,r5,zero
    dc3c:	2408b03a 	or	r4,r4,r16
    dc40:	003fe106 	br	dbc8 <__alt_data_end+0xfc00dbc8>

0000dc44 <_Unwind_ForcedUnwind_Phase2>:
    dc44:	defff404 	addi	sp,sp,-48
    dc48:	dd800915 	stw	r22,36(sp)
    dc4c:	058000f4 	movhi	r22,3
    dc50:	ddc00a15 	stw	r23,40(sp)
    dc54:	dd400815 	stw	r21,32(sp)
    dc58:	dd000715 	stw	r20,28(sp)
    dc5c:	dcc00615 	stw	r19,24(sp)
    dc60:	dc400415 	stw	r17,16(sp)
    dc64:	dc000315 	stw	r16,12(sp)
    dc68:	dfc00b15 	stw	ra,44(sp)
    dc6c:	dc800515 	stw	r18,20(sp)
    dc70:	2021883a 	mov	r16,r4
    dc74:	2823883a 	mov	r17,r5
    dc78:	24c00317 	ldw	r19,12(r4)
    dc7c:	25000417 	ldw	r20,16(r4)
    dc80:	28c00017 	ldw	r3,0(r5)
    dc84:	b5839704 	addi	r22,r22,3676
    dc88:	054001c4 	movi	r21,7
    dc8c:	05c00204 	movi	r23,8
    dc90:	00001606 	br	dcec <_Unwind_ForcedUnwind_Phase2+0xa8>
    dc94:	81800017 	ldw	r6,0(r16)
    dc98:	81c00117 	ldw	r7,4(r16)
    dc9c:	1c800617 	ldw	r18,24(r3)
    dca0:	dd000215 	stw	r20,8(sp)
    dca4:	dc400115 	stw	r17,4(sp)
    dca8:	dc000015 	stw	r16,0(sp)
    dcac:	983ee83a 	callr	r19
    dcb0:	01400284 	movi	r5,10
    dcb4:	01000044 	movi	r4,1
    dcb8:	1000241e 	bne	r2,zero,dd4c <_Unwind_ForcedUnwind_Phase2+0x108>
    dcbc:	90000726 	beq	r18,zero,dcdc <_Unwind_ForcedUnwind_Phase2+0x98>
    dcc0:	81800017 	ldw	r6,0(r16)
    dcc4:	81c00117 	ldw	r7,4(r16)
    dcc8:	dc400115 	stw	r17,4(sp)
    dccc:	dc000015 	stw	r16,0(sp)
    dcd0:	903ee83a 	callr	r18
    dcd4:	15401f26 	beq	r2,r21,dd54 <_Unwind_ForcedUnwind_Phase2+0x110>
    dcd8:	15c01c1e 	bne	r2,r23,dd4c <_Unwind_ForcedUnwind_Phase2+0x108>
    dcdc:	88800017 	ldw	r2,0(r17)
    dce0:	10c00017 	ldw	r3,0(r2)
    dce4:	b0c00015 	stw	r3,0(r22)
    dce8:	88c00015 	stw	r3,0(r17)
    dcec:	01400284 	movi	r5,10
    dcf0:	01000044 	movi	r4,1
    dcf4:	183fe71e 	bne	r3,zero,dc94 <__alt_data_end+0xfc00dc94>
    dcf8:	81800017 	ldw	r6,0(r16)
    dcfc:	81c00117 	ldw	r7,4(r16)
    dd00:	01400684 	movi	r5,26
    dd04:	dd000215 	stw	r20,8(sp)
    dd08:	dc400115 	stw	r17,4(sp)
    dd0c:	dc000015 	stw	r16,0(sp)
    dd10:	01000044 	movi	r4,1
    dd14:	983ee83a 	callr	r19
    dd18:	10000c1e 	bne	r2,zero,dd4c <_Unwind_ForcedUnwind_Phase2+0x108>
    dd1c:	00800144 	movi	r2,5
    dd20:	dfc00b17 	ldw	ra,44(sp)
    dd24:	ddc00a17 	ldw	r23,40(sp)
    dd28:	dd800917 	ldw	r22,36(sp)
    dd2c:	dd400817 	ldw	r21,32(sp)
    dd30:	dd000717 	ldw	r20,28(sp)
    dd34:	dcc00617 	ldw	r19,24(sp)
    dd38:	dc800517 	ldw	r18,20(sp)
    dd3c:	dc400417 	ldw	r17,16(sp)
    dd40:	dc000317 	ldw	r16,12(sp)
    dd44:	dec00c04 	addi	sp,sp,48
    dd48:	f800283a 	ret
    dd4c:	00800084 	movi	r2,2
    dd50:	003ff306 	br	dd20 <__alt_data_end+0xfc00dd20>
    dd54:	a805883a 	mov	r2,r21
    dd58:	003ff106 	br	dd20 <__alt_data_end+0xfc00dd20>

0000dd5c <_Unwind_RaiseException_Phase2>:
    dd5c:	28c00017 	ldw	r3,0(r5)
    dd60:	defff804 	addi	sp,sp,-32
    dd64:	dcc00515 	stw	r19,20(sp)
    dd68:	dc800415 	stw	r18,16(sp)
    dd6c:	dc400315 	stw	r17,12(sp)
    dd70:	dc000215 	stw	r16,8(sp)
    dd74:	dfc00715 	stw	ra,28(sp)
    dd78:	dd000615 	stw	r20,24(sp)
    dd7c:	2823883a 	mov	r17,r5
    dd80:	2021883a 	mov	r16,r4
    dd84:	048001c4 	movi	r18,7
    dd88:	04c00204 	movi	r19,8
    dd8c:	18001326 	beq	r3,zero,dddc <_Unwind_RaiseException_Phase2+0x80>
    dd90:	81000417 	ldw	r4,16(r16)
    dd94:	1a000617 	ldw	r8,24(r3)
    dd98:	19001926 	beq	r3,r4,de00 <_Unwind_RaiseException_Phase2+0xa4>
    dd9c:	40000c26 	beq	r8,zero,ddd0 <_Unwind_RaiseException_Phase2+0x74>
    dda0:	01400084 	movi	r5,2
    dda4:	0029883a 	mov	r20,zero
    dda8:	81800017 	ldw	r6,0(r16)
    ddac:	81c00117 	ldw	r7,4(r16)
    ddb0:	01000044 	movi	r4,1
    ddb4:	dc400115 	stw	r17,4(sp)
    ddb8:	dc000015 	stw	r16,0(sp)
    ddbc:	403ee83a 	callr	r8
    ddc0:	14801326 	beq	r2,r18,de10 <_Unwind_RaiseException_Phase2+0xb4>
    ddc4:	14c0051e 	bne	r2,r19,dddc <_Unwind_RaiseException_Phase2+0x80>
    ddc8:	a000131e 	bne	r20,zero,de18 <_Unwind_RaiseException_Phase2+0xbc>
    ddcc:	88c00017 	ldw	r3,0(r17)
    ddd0:	18c00017 	ldw	r3,0(r3)
    ddd4:	88c00015 	stw	r3,0(r17)
    ddd8:	183fed1e 	bne	r3,zero,dd90 <__alt_data_end+0xfc00dd90>
    dddc:	00800084 	movi	r2,2
    dde0:	dfc00717 	ldw	ra,28(sp)
    dde4:	dd000617 	ldw	r20,24(sp)
    dde8:	dcc00517 	ldw	r19,20(sp)
    ddec:	dc800417 	ldw	r18,16(sp)
    ddf0:	dc400317 	ldw	r17,12(sp)
    ddf4:	dc000217 	ldw	r16,8(sp)
    ddf8:	dec00804 	addi	sp,sp,32
    ddfc:	f800283a 	ret
    de00:	40000526 	beq	r8,zero,de18 <_Unwind_RaiseException_Phase2+0xbc>
    de04:	01400184 	movi	r5,6
    de08:	05000104 	movi	r20,4
    de0c:	003fe606 	br	dda8 <__alt_data_end+0xfc00dda8>
    de10:	9005883a 	mov	r2,r18
    de14:	003ff206 	br	dde0 <__alt_data_end+0xfc00dde0>
    de18:	000e1c80 	call	e1c8 <abort>

0000de1c <uw_install_context.isra.1>:
    de1c:	20c00017 	ldw	r3,0(r4)
    de20:	deffff04 	addi	sp,sp,-4
    de24:	014000f4 	movhi	r5,3
    de28:	19000917 	ldw	r4,36(r3)
    de2c:	df000015 	stw	fp,0(sp)
    de30:	18800804 	addi	r2,r3,32
    de34:	d839883a 	mov	fp,sp
    de38:	29439704 	addi	r5,r5,3676
    de3c:	28c00015 	stw	r3,0(r5)
    de40:	17000017 	ldw	fp,0(r2)
    de44:	1ec00a17 	ldw	sp,40(r3)
    de48:	2000683a 	jmp	r4

0000de4c <_Unwind_SjLj_Register>:
    de4c:	008000f4 	movhi	r2,3
    de50:	10839704 	addi	r2,r2,3676
    de54:	10c00017 	ldw	r3,0(r2)
    de58:	11000015 	stw	r4,0(r2)
    de5c:	20c00015 	stw	r3,0(r4)
    de60:	f800283a 	ret

0000de64 <_Unwind_SjLj_Unregister>:
    de64:	20c00017 	ldw	r3,0(r4)
    de68:	008000f4 	movhi	r2,3
    de6c:	10839704 	addi	r2,r2,3676
    de70:	10c00015 	stw	r3,0(r2)
    de74:	f800283a 	ret

0000de78 <_Unwind_GetGR>:
    de78:	20800017 	ldw	r2,0(r4)
    de7c:	29400084 	addi	r5,r5,2
    de80:	294b883a 	add	r5,r5,r5
    de84:	294b883a 	add	r5,r5,r5
    de88:	114b883a 	add	r5,r2,r5
    de8c:	28800017 	ldw	r2,0(r5)
    de90:	f800283a 	ret

0000de94 <_Unwind_GetCFA>:
    de94:	20800017 	ldw	r2,0(r4)
    de98:	10000226 	beq	r2,zero,dea4 <_Unwind_GetCFA+0x10>
    de9c:	10800a17 	ldw	r2,40(r2)
    dea0:	f800283a 	ret
    dea4:	0005883a 	mov	r2,zero
    dea8:	f800283a 	ret

0000deac <_Unwind_SetGR>:
    deac:	20800017 	ldw	r2,0(r4)
    deb0:	29400084 	addi	r5,r5,2
    deb4:	294b883a 	add	r5,r5,r5
    deb8:	294b883a 	add	r5,r5,r5
    debc:	114b883a 	add	r5,r2,r5
    dec0:	29800015 	stw	r6,0(r5)
    dec4:	f800283a 	ret

0000dec8 <_Unwind_GetIP>:
    dec8:	20800017 	ldw	r2,0(r4)
    decc:	10800117 	ldw	r2,4(r2)
    ded0:	10800044 	addi	r2,r2,1
    ded4:	f800283a 	ret

0000ded8 <_Unwind_GetIPInfo>:
    ded8:	20800017 	ldw	r2,0(r4)
    dedc:	28000015 	stw	zero,0(r5)
    dee0:	10000326 	beq	r2,zero,def0 <_Unwind_GetIPInfo+0x18>
    dee4:	10800117 	ldw	r2,4(r2)
    dee8:	10800044 	addi	r2,r2,1
    deec:	f800283a 	ret
    def0:	0005883a 	mov	r2,zero
    def4:	f800283a 	ret

0000def8 <_Unwind_SetIP>:
    def8:	20800017 	ldw	r2,0(r4)
    defc:	297fffc4 	addi	r5,r5,-1
    df00:	11400115 	stw	r5,4(r2)
    df04:	f800283a 	ret

0000df08 <_Unwind_GetLanguageSpecificData>:
    df08:	20800017 	ldw	r2,0(r4)
    df0c:	10800717 	ldw	r2,28(r2)
    df10:	f800283a 	ret

0000df14 <_Unwind_GetRegionStart>:
    df14:	0005883a 	mov	r2,zero
    df18:	f800283a 	ret

0000df1c <_Unwind_FindEnclosingFunction>:
    df1c:	0005883a 	mov	r2,zero
    df20:	f800283a 	ret

0000df24 <_Unwind_GetDataRelBase>:
    df24:	0005883a 	mov	r2,zero
    df28:	f800283a 	ret

0000df2c <_Unwind_GetTextRelBase>:
    df2c:	0005883a 	mov	r2,zero
    df30:	f800283a 	ret

0000df34 <_Unwind_SjLj_RaiseException>:
    df34:	008000f4 	movhi	r2,3
    df38:	defff804 	addi	sp,sp,-32
    df3c:	10839704 	addi	r2,r2,3676
    df40:	dc800515 	stw	r18,20(sp)
    df44:	14800017 	ldw	r18,0(r2)
    df48:	dfc00715 	stw	ra,28(sp)
    df4c:	dcc00615 	stw	r19,24(sp)
    df50:	dc400415 	stw	r17,16(sp)
    df54:	dc000315 	stw	r16,12(sp)
    df58:	dc800215 	stw	r18,8(sp)
    df5c:	90001426 	beq	r18,zero,dfb0 <_Unwind_SjLj_RaiseException+0x7c>
    df60:	2021883a 	mov	r16,r4
    df64:	9005883a 	mov	r2,r18
    df68:	04400184 	movi	r17,6
    df6c:	04c00204 	movi	r19,8
    df70:	10800617 	ldw	r2,24(r2)
    df74:	10000a26 	beq	r2,zero,dfa0 <_Unwind_SjLj_RaiseException+0x6c>
    df78:	81800017 	ldw	r6,0(r16)
    df7c:	81c00117 	ldw	r7,4(r16)
    df80:	01400044 	movi	r5,1
    df84:	d8c00204 	addi	r3,sp,8
    df88:	d8c00115 	stw	r3,4(sp)
    df8c:	dc000015 	stw	r16,0(sp)
    df90:	2809883a 	mov	r4,r5
    df94:	103ee83a 	callr	r2
    df98:	14400d26 	beq	r2,r17,dfd0 <_Unwind_SjLj_RaiseException+0x9c>
    df9c:	14c0171e 	bne	r2,r19,dffc <_Unwind_SjLj_RaiseException+0xc8>
    dfa0:	d8800217 	ldw	r2,8(sp)
    dfa4:	10800017 	ldw	r2,0(r2)
    dfa8:	d8800215 	stw	r2,8(sp)
    dfac:	103ff01e 	bne	r2,zero,df70 <__alt_data_end+0xfc00df70>
    dfb0:	00800144 	movi	r2,5
    dfb4:	dfc00717 	ldw	ra,28(sp)
    dfb8:	dcc00617 	ldw	r19,24(sp)
    dfbc:	dc800517 	ldw	r18,20(sp)
    dfc0:	dc400417 	ldw	r17,16(sp)
    dfc4:	dc000317 	ldw	r16,12(sp)
    dfc8:	dec00804 	addi	sp,sp,32
    dfcc:	f800283a 	ret
    dfd0:	d8800217 	ldw	r2,8(sp)
    dfd4:	80000315 	stw	zero,12(r16)
    dfd8:	d9400204 	addi	r5,sp,8
    dfdc:	80800415 	stw	r2,16(r16)
    dfe0:	8009883a 	mov	r4,r16
    dfe4:	dc800215 	stw	r18,8(sp)
    dfe8:	000dd5c0 	call	dd5c <_Unwind_RaiseException_Phase2>
    dfec:	00c001c4 	movi	r3,7
    dff0:	10fff01e 	bne	r2,r3,dfb4 <__alt_data_end+0xfc00dfb4>
    dff4:	d9000204 	addi	r4,sp,8
    dff8:	000de1c0 	call	de1c <uw_install_context.isra.1>
    dffc:	008000c4 	movi	r2,3
    e000:	003fec06 	br	dfb4 <__alt_data_end+0xfc00dfb4>

0000e004 <_Unwind_SjLj_ForcedUnwind>:
    e004:	00c000f4 	movhi	r3,3
    e008:	18c39704 	addi	r3,r3,3676
    e00c:	defffe04 	addi	sp,sp,-8
    e010:	18c00017 	ldw	r3,0(r3)
    e014:	dfc00115 	stw	ra,4(sp)
    e018:	21400315 	stw	r5,12(r4)
    e01c:	21800415 	stw	r6,16(r4)
    e020:	d80b883a 	mov	r5,sp
    e024:	d8c00015 	stw	r3,0(sp)
    e028:	000dc440 	call	dc44 <_Unwind_ForcedUnwind_Phase2>
    e02c:	00c001c4 	movi	r3,7
    e030:	10c00326 	beq	r2,r3,e040 <_Unwind_SjLj_ForcedUnwind+0x3c>
    e034:	dfc00117 	ldw	ra,4(sp)
    e038:	dec00204 	addi	sp,sp,8
    e03c:	f800283a 	ret
    e040:	d809883a 	mov	r4,sp
    e044:	000de1c0 	call	de1c <uw_install_context.isra.1>

0000e048 <_Unwind_SjLj_Resume>:
    e048:	00c000f4 	movhi	r3,3
    e04c:	18c39704 	addi	r3,r3,3676
    e050:	18c00017 	ldw	r3,0(r3)
    e054:	20800317 	ldw	r2,12(r4)
    e058:	defffe04 	addi	sp,sp,-8
    e05c:	dfc00115 	stw	ra,4(sp)
    e060:	d8c00015 	stw	r3,0(sp)
    e064:	d80b883a 	mov	r5,sp
    e068:	1000041e 	bne	r2,zero,e07c <_Unwind_SjLj_Resume+0x34>
    e06c:	000dd5c0 	call	dd5c <_Unwind_RaiseException_Phase2>
    e070:	00c001c4 	movi	r3,7
    e074:	10c00326 	beq	r2,r3,e084 <_Unwind_SjLj_Resume+0x3c>
    e078:	000e1c80 	call	e1c8 <abort>
    e07c:	000dc440 	call	dc44 <_Unwind_ForcedUnwind_Phase2>
    e080:	003ffb06 	br	e070 <__alt_data_end+0xfc00e070>
    e084:	d809883a 	mov	r4,sp
    e088:	000de1c0 	call	de1c <uw_install_context.isra.1>

0000e08c <_Unwind_SjLj_Resume_or_Rethrow>:
    e08c:	20800317 	ldw	r2,12(r4)
    e090:	defffe04 	addi	sp,sp,-8
    e094:	dfc00115 	stw	ra,4(sp)
    e098:	1000041e 	bne	r2,zero,e0ac <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    e09c:	000df340 	call	df34 <_Unwind_SjLj_RaiseException>
    e0a0:	dfc00117 	ldw	ra,4(sp)
    e0a4:	dec00204 	addi	sp,sp,8
    e0a8:	f800283a 	ret
    e0ac:	008000f4 	movhi	r2,3
    e0b0:	10839704 	addi	r2,r2,3676
    e0b4:	10800017 	ldw	r2,0(r2)
    e0b8:	d80b883a 	mov	r5,sp
    e0bc:	d8800015 	stw	r2,0(sp)
    e0c0:	000dc440 	call	dc44 <_Unwind_ForcedUnwind_Phase2>
    e0c4:	00c001c4 	movi	r3,7
    e0c8:	10c00126 	beq	r2,r3,e0d0 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    e0cc:	000e1c80 	call	e1c8 <abort>
    e0d0:	d809883a 	mov	r4,sp
    e0d4:	000de1c0 	call	de1c <uw_install_context.isra.1>

0000e0d8 <_Unwind_DeleteException>:
    e0d8:	20800217 	ldw	r2,8(r4)
    e0dc:	10000326 	beq	r2,zero,e0ec <_Unwind_DeleteException+0x14>
    e0e0:	200b883a 	mov	r5,r4
    e0e4:	01000044 	movi	r4,1
    e0e8:	1000683a 	jmp	r2
    e0ec:	f800283a 	ret

0000e0f0 <_Unwind_Backtrace>:
    e0f0:	008000f4 	movhi	r2,3
    e0f4:	10839704 	addi	r2,r2,3676
    e0f8:	10800017 	ldw	r2,0(r2)
    e0fc:	defffc04 	addi	sp,sp,-16
    e100:	dc400215 	stw	r17,8(sp)
    e104:	dc000115 	stw	r16,4(sp)
    e108:	dfc00315 	stw	ra,12(sp)
    e10c:	2023883a 	mov	r17,r4
    e110:	2821883a 	mov	r16,r5
    e114:	d8800015 	stw	r2,0(sp)
    e118:	00000506 	br	e130 <_Unwind_Backtrace+0x40>
    e11c:	883ee83a 	callr	r17
    e120:	10000e1e 	bne	r2,zero,e15c <_Unwind_Backtrace+0x6c>
    e124:	d8800017 	ldw	r2,0(sp)
    e128:	10800017 	ldw	r2,0(r2)
    e12c:	d8800015 	stw	r2,0(sp)
    e130:	800b883a 	mov	r5,r16
    e134:	d809883a 	mov	r4,sp
    e138:	103ff81e 	bne	r2,zero,e11c <__alt_data_end+0xfc00e11c>
    e13c:	883ee83a 	callr	r17
    e140:	1000061e 	bne	r2,zero,e15c <_Unwind_Backtrace+0x6c>
    e144:	00800144 	movi	r2,5
    e148:	dfc00317 	ldw	ra,12(sp)
    e14c:	dc400217 	ldw	r17,8(sp)
    e150:	dc000117 	ldw	r16,4(sp)
    e154:	dec00404 	addi	sp,sp,16
    e158:	f800283a 	ret
    e15c:	008000c4 	movi	r2,3
    e160:	003ff906 	br	e148 <__alt_data_end+0xfc00e148>

0000e164 <__clzsi2>:
    e164:	00bfffd4 	movui	r2,65535
    e168:	11000536 	bltu	r2,r4,e180 <__clzsi2+0x1c>
    e16c:	00803fc4 	movi	r2,255
    e170:	11000f36 	bltu	r2,r4,e1b0 <__clzsi2+0x4c>
    e174:	00800804 	movi	r2,32
    e178:	0007883a 	mov	r3,zero
    e17c:	00000506 	br	e194 <__clzsi2+0x30>
    e180:	00804034 	movhi	r2,256
    e184:	10bfffc4 	addi	r2,r2,-1
    e188:	11000c2e 	bgeu	r2,r4,e1bc <__clzsi2+0x58>
    e18c:	00800204 	movi	r2,8
    e190:	00c00604 	movi	r3,24
    e194:	20c8d83a 	srl	r4,r4,r3
    e198:	00c000f4 	movhi	r3,3
    e19c:	18e9c004 	addi	r3,r3,-22784
    e1a0:	1909883a 	add	r4,r3,r4
    e1a4:	20c00003 	ldbu	r3,0(r4)
    e1a8:	10c5c83a 	sub	r2,r2,r3
    e1ac:	f800283a 	ret
    e1b0:	00800604 	movi	r2,24
    e1b4:	00c00204 	movi	r3,8
    e1b8:	003ff606 	br	e194 <__alt_data_end+0xfc00e194>
    e1bc:	00800404 	movi	r2,16
    e1c0:	1007883a 	mov	r3,r2
    e1c4:	003ff306 	br	e194 <__alt_data_end+0xfc00e194>

0000e1c8 <abort>:
    e1c8:	deffff04 	addi	sp,sp,-4
    e1cc:	01000184 	movi	r4,6
    e1d0:	dfc00015 	stw	ra,0(sp)
    e1d4:	000f0d80 	call	f0d8 <raise>
    e1d8:	01000044 	movi	r4,1
    e1dc:	001ee180 	call	1ee18 <_exit>

0000e1e0 <clock>:
    e1e0:	008000f4 	movhi	r2,3
    e1e4:	10b70504 	addi	r2,r2,-9196
    e1e8:	11000017 	ldw	r4,0(r2)
    e1ec:	defffb04 	addi	sp,sp,-20
    e1f0:	d80b883a 	mov	r5,sp
    e1f4:	dfc00415 	stw	ra,16(sp)
    e1f8:	001167c0 	call	1167c <_times_r>
    e1fc:	00ffffc4 	movi	r3,-1
    e200:	10c00726 	beq	r2,r3,e220 <clock+0x40>
    e204:	d8c00017 	ldw	r3,0(sp)
    e208:	d8800117 	ldw	r2,4(sp)
    e20c:	1885883a 	add	r2,r3,r2
    e210:	d8c00217 	ldw	r3,8(sp)
    e214:	10c7883a 	add	r3,r2,r3
    e218:	d8800317 	ldw	r2,12(sp)
    e21c:	1885883a 	add	r2,r3,r2
    e220:	dfc00417 	ldw	ra,16(sp)
    e224:	dec00504 	addi	sp,sp,20
    e228:	f800283a 	ret

0000e22c <malloc>:
    e22c:	008000f4 	movhi	r2,3
    e230:	10b70504 	addi	r2,r2,-9196
    e234:	200b883a 	mov	r5,r4
    e238:	11000017 	ldw	r4,0(r2)
    e23c:	000e2541 	jmpi	e254 <_malloc_r>

0000e240 <free>:
    e240:	008000f4 	movhi	r2,3
    e244:	10b70504 	addi	r2,r2,-9196
    e248:	200b883a 	mov	r5,r4
    e24c:	11000017 	ldw	r4,0(r2)
    e250:	0015bb81 	jmpi	15bb8 <_free_r>

0000e254 <_malloc_r>:
    e254:	defff504 	addi	sp,sp,-44
    e258:	dc800315 	stw	r18,12(sp)
    e25c:	dfc00a15 	stw	ra,40(sp)
    e260:	df000915 	stw	fp,36(sp)
    e264:	ddc00815 	stw	r23,32(sp)
    e268:	dd800715 	stw	r22,28(sp)
    e26c:	dd400615 	stw	r21,24(sp)
    e270:	dd000515 	stw	r20,20(sp)
    e274:	dcc00415 	stw	r19,16(sp)
    e278:	dc400215 	stw	r17,8(sp)
    e27c:	dc000115 	stw	r16,4(sp)
    e280:	288002c4 	addi	r2,r5,11
    e284:	00c00584 	movi	r3,22
    e288:	2025883a 	mov	r18,r4
    e28c:	18807f2e 	bgeu	r3,r2,e48c <_malloc_r+0x238>
    e290:	047ffe04 	movi	r17,-8
    e294:	1462703a 	and	r17,r2,r17
    e298:	8800a316 	blt	r17,zero,e528 <_malloc_r+0x2d4>
    e29c:	8940a236 	bltu	r17,r5,e528 <_malloc_r+0x2d4>
    e2a0:	001f4340 	call	1f434 <__malloc_lock>
    e2a4:	00807dc4 	movi	r2,503
    e2a8:	1441e92e 	bgeu	r2,r17,ea50 <_malloc_r+0x7fc>
    e2ac:	8804d27a 	srli	r2,r17,9
    e2b0:	1000a126 	beq	r2,zero,e538 <_malloc_r+0x2e4>
    e2b4:	00c00104 	movi	r3,4
    e2b8:	18811e36 	bltu	r3,r2,e734 <_malloc_r+0x4e0>
    e2bc:	8804d1ba 	srli	r2,r17,6
    e2c0:	12000e44 	addi	r8,r2,57
    e2c4:	11c00e04 	addi	r7,r2,56
    e2c8:	4209883a 	add	r4,r8,r8
    e2cc:	04c000f4 	movhi	r19,3
    e2d0:	2109883a 	add	r4,r4,r4
    e2d4:	9ceba404 	addi	r19,r19,-20848
    e2d8:	2109883a 	add	r4,r4,r4
    e2dc:	9909883a 	add	r4,r19,r4
    e2e0:	24000117 	ldw	r16,4(r4)
    e2e4:	213ffe04 	addi	r4,r4,-8
    e2e8:	24009726 	beq	r4,r16,e548 <_malloc_r+0x2f4>
    e2ec:	80800117 	ldw	r2,4(r16)
    e2f0:	01bfff04 	movi	r6,-4
    e2f4:	014003c4 	movi	r5,15
    e2f8:	1184703a 	and	r2,r2,r6
    e2fc:	1447c83a 	sub	r3,r2,r17
    e300:	28c00716 	blt	r5,r3,e320 <_malloc_r+0xcc>
    e304:	1800920e 	bge	r3,zero,e550 <_malloc_r+0x2fc>
    e308:	84000317 	ldw	r16,12(r16)
    e30c:	24008e26 	beq	r4,r16,e548 <_malloc_r+0x2f4>
    e310:	80800117 	ldw	r2,4(r16)
    e314:	1184703a 	and	r2,r2,r6
    e318:	1447c83a 	sub	r3,r2,r17
    e31c:	28fff90e 	bge	r5,r3,e304 <__alt_data_end+0xfc00e304>
    e320:	3809883a 	mov	r4,r7
    e324:	018000f4 	movhi	r6,3
    e328:	9c000417 	ldw	r16,16(r19)
    e32c:	31aba404 	addi	r6,r6,-20848
    e330:	32000204 	addi	r8,r6,8
    e334:	82013426 	beq	r16,r8,e808 <_malloc_r+0x5b4>
    e338:	80c00117 	ldw	r3,4(r16)
    e33c:	00bfff04 	movi	r2,-4
    e340:	188e703a 	and	r7,r3,r2
    e344:	3c45c83a 	sub	r2,r7,r17
    e348:	00c003c4 	movi	r3,15
    e34c:	18811f16 	blt	r3,r2,e7cc <_malloc_r+0x578>
    e350:	32000515 	stw	r8,20(r6)
    e354:	32000415 	stw	r8,16(r6)
    e358:	10007f0e 	bge	r2,zero,e558 <_malloc_r+0x304>
    e35c:	00807fc4 	movi	r2,511
    e360:	11c0fd36 	bltu	r2,r7,e758 <_malloc_r+0x504>
    e364:	3806d0fa 	srli	r3,r7,3
    e368:	01c00044 	movi	r7,1
    e36c:	30800117 	ldw	r2,4(r6)
    e370:	19400044 	addi	r5,r3,1
    e374:	294b883a 	add	r5,r5,r5
    e378:	1807d0ba 	srai	r3,r3,2
    e37c:	294b883a 	add	r5,r5,r5
    e380:	294b883a 	add	r5,r5,r5
    e384:	298b883a 	add	r5,r5,r6
    e388:	38c6983a 	sll	r3,r7,r3
    e38c:	29c00017 	ldw	r7,0(r5)
    e390:	2a7ffe04 	addi	r9,r5,-8
    e394:	1886b03a 	or	r3,r3,r2
    e398:	82400315 	stw	r9,12(r16)
    e39c:	81c00215 	stw	r7,8(r16)
    e3a0:	30c00115 	stw	r3,4(r6)
    e3a4:	2c000015 	stw	r16,0(r5)
    e3a8:	3c000315 	stw	r16,12(r7)
    e3ac:	2005d0ba 	srai	r2,r4,2
    e3b0:	01400044 	movi	r5,1
    e3b4:	288a983a 	sll	r5,r5,r2
    e3b8:	19406f36 	bltu	r3,r5,e578 <_malloc_r+0x324>
    e3bc:	28c4703a 	and	r2,r5,r3
    e3c0:	10000a1e 	bne	r2,zero,e3ec <_malloc_r+0x198>
    e3c4:	00bfff04 	movi	r2,-4
    e3c8:	294b883a 	add	r5,r5,r5
    e3cc:	2088703a 	and	r4,r4,r2
    e3d0:	28c4703a 	and	r2,r5,r3
    e3d4:	21000104 	addi	r4,r4,4
    e3d8:	1000041e 	bne	r2,zero,e3ec <_malloc_r+0x198>
    e3dc:	294b883a 	add	r5,r5,r5
    e3e0:	28c4703a 	and	r2,r5,r3
    e3e4:	21000104 	addi	r4,r4,4
    e3e8:	103ffc26 	beq	r2,zero,e3dc <__alt_data_end+0xfc00e3dc>
    e3ec:	02bfff04 	movi	r10,-4
    e3f0:	024003c4 	movi	r9,15
    e3f4:	21800044 	addi	r6,r4,1
    e3f8:	318d883a 	add	r6,r6,r6
    e3fc:	318d883a 	add	r6,r6,r6
    e400:	318d883a 	add	r6,r6,r6
    e404:	998d883a 	add	r6,r19,r6
    e408:	333ffe04 	addi	r12,r6,-8
    e40c:	2017883a 	mov	r11,r4
    e410:	31800104 	addi	r6,r6,4
    e414:	34000017 	ldw	r16,0(r6)
    e418:	31fffd04 	addi	r7,r6,-12
    e41c:	81c0041e 	bne	r16,r7,e430 <_malloc_r+0x1dc>
    e420:	0000fb06 	br	e810 <_malloc_r+0x5bc>
    e424:	1801030e 	bge	r3,zero,e834 <_malloc_r+0x5e0>
    e428:	84000317 	ldw	r16,12(r16)
    e42c:	81c0f826 	beq	r16,r7,e810 <_malloc_r+0x5bc>
    e430:	80800117 	ldw	r2,4(r16)
    e434:	1284703a 	and	r2,r2,r10
    e438:	1447c83a 	sub	r3,r2,r17
    e43c:	48fff90e 	bge	r9,r3,e424 <__alt_data_end+0xfc00e424>
    e440:	80800317 	ldw	r2,12(r16)
    e444:	81000217 	ldw	r4,8(r16)
    e448:	89400054 	ori	r5,r17,1
    e44c:	81400115 	stw	r5,4(r16)
    e450:	20800315 	stw	r2,12(r4)
    e454:	11000215 	stw	r4,8(r2)
    e458:	8463883a 	add	r17,r16,r17
    e45c:	9c400515 	stw	r17,20(r19)
    e460:	9c400415 	stw	r17,16(r19)
    e464:	18800054 	ori	r2,r3,1
    e468:	88800115 	stw	r2,4(r17)
    e46c:	8a000315 	stw	r8,12(r17)
    e470:	8a000215 	stw	r8,8(r17)
    e474:	88e3883a 	add	r17,r17,r3
    e478:	88c00015 	stw	r3,0(r17)
    e47c:	9009883a 	mov	r4,r18
    e480:	001f4580 	call	1f458 <__malloc_unlock>
    e484:	80800204 	addi	r2,r16,8
    e488:	00001b06 	br	e4f8 <_malloc_r+0x2a4>
    e48c:	04400404 	movi	r17,16
    e490:	89402536 	bltu	r17,r5,e528 <_malloc_r+0x2d4>
    e494:	001f4340 	call	1f434 <__malloc_lock>
    e498:	00800184 	movi	r2,6
    e49c:	01000084 	movi	r4,2
    e4a0:	04c000f4 	movhi	r19,3
    e4a4:	1085883a 	add	r2,r2,r2
    e4a8:	9ceba404 	addi	r19,r19,-20848
    e4ac:	1085883a 	add	r2,r2,r2
    e4b0:	9885883a 	add	r2,r19,r2
    e4b4:	14000117 	ldw	r16,4(r2)
    e4b8:	10fffe04 	addi	r3,r2,-8
    e4bc:	80c0d926 	beq	r16,r3,e824 <_malloc_r+0x5d0>
    e4c0:	80c00117 	ldw	r3,4(r16)
    e4c4:	81000317 	ldw	r4,12(r16)
    e4c8:	00bfff04 	movi	r2,-4
    e4cc:	1884703a 	and	r2,r3,r2
    e4d0:	81400217 	ldw	r5,8(r16)
    e4d4:	8085883a 	add	r2,r16,r2
    e4d8:	10c00117 	ldw	r3,4(r2)
    e4dc:	29000315 	stw	r4,12(r5)
    e4e0:	21400215 	stw	r5,8(r4)
    e4e4:	18c00054 	ori	r3,r3,1
    e4e8:	10c00115 	stw	r3,4(r2)
    e4ec:	9009883a 	mov	r4,r18
    e4f0:	001f4580 	call	1f458 <__malloc_unlock>
    e4f4:	80800204 	addi	r2,r16,8
    e4f8:	dfc00a17 	ldw	ra,40(sp)
    e4fc:	df000917 	ldw	fp,36(sp)
    e500:	ddc00817 	ldw	r23,32(sp)
    e504:	dd800717 	ldw	r22,28(sp)
    e508:	dd400617 	ldw	r21,24(sp)
    e50c:	dd000517 	ldw	r20,20(sp)
    e510:	dcc00417 	ldw	r19,16(sp)
    e514:	dc800317 	ldw	r18,12(sp)
    e518:	dc400217 	ldw	r17,8(sp)
    e51c:	dc000117 	ldw	r16,4(sp)
    e520:	dec00b04 	addi	sp,sp,44
    e524:	f800283a 	ret
    e528:	00800304 	movi	r2,12
    e52c:	90800015 	stw	r2,0(r18)
    e530:	0005883a 	mov	r2,zero
    e534:	003ff006 	br	e4f8 <__alt_data_end+0xfc00e4f8>
    e538:	01002004 	movi	r4,128
    e53c:	02001004 	movi	r8,64
    e540:	01c00fc4 	movi	r7,63
    e544:	003f6106 	br	e2cc <__alt_data_end+0xfc00e2cc>
    e548:	4009883a 	mov	r4,r8
    e54c:	003f7506 	br	e324 <__alt_data_end+0xfc00e324>
    e550:	81000317 	ldw	r4,12(r16)
    e554:	003fde06 	br	e4d0 <__alt_data_end+0xfc00e4d0>
    e558:	81c5883a 	add	r2,r16,r7
    e55c:	11400117 	ldw	r5,4(r2)
    e560:	9009883a 	mov	r4,r18
    e564:	29400054 	ori	r5,r5,1
    e568:	11400115 	stw	r5,4(r2)
    e56c:	001f4580 	call	1f458 <__malloc_unlock>
    e570:	80800204 	addi	r2,r16,8
    e574:	003fe006 	br	e4f8 <__alt_data_end+0xfc00e4f8>
    e578:	9c000217 	ldw	r16,8(r19)
    e57c:	00bfff04 	movi	r2,-4
    e580:	85800117 	ldw	r22,4(r16)
    e584:	b0ac703a 	and	r22,r22,r2
    e588:	b4400336 	bltu	r22,r17,e598 <_malloc_r+0x344>
    e58c:	b445c83a 	sub	r2,r22,r17
    e590:	00c003c4 	movi	r3,15
    e594:	18805d16 	blt	r3,r2,e70c <_malloc_r+0x4b8>
    e598:	05c000f4 	movhi	r23,3
    e59c:	008000f4 	movhi	r2,3
    e5a0:	10839a04 	addi	r2,r2,3688
    e5a4:	bdf70604 	addi	r23,r23,-9192
    e5a8:	15400017 	ldw	r21,0(r2)
    e5ac:	b8c00017 	ldw	r3,0(r23)
    e5b0:	00bfffc4 	movi	r2,-1
    e5b4:	858d883a 	add	r6,r16,r22
    e5b8:	8d6b883a 	add	r21,r17,r21
    e5bc:	1880ea26 	beq	r3,r2,e968 <_malloc_r+0x714>
    e5c0:	ad4403c4 	addi	r21,r21,4111
    e5c4:	00bc0004 	movi	r2,-4096
    e5c8:	a8aa703a 	and	r21,r21,r2
    e5cc:	a80b883a 	mov	r5,r21
    e5d0:	9009883a 	mov	r4,r18
    e5d4:	d9800015 	stw	r6,0(sp)
    e5d8:	000ee300 	call	ee30 <_sbrk_r>
    e5dc:	1029883a 	mov	r20,r2
    e5e0:	00bfffc4 	movi	r2,-1
    e5e4:	d9800017 	ldw	r6,0(sp)
    e5e8:	a080e826 	beq	r20,r2,e98c <_malloc_r+0x738>
    e5ec:	a180a636 	bltu	r20,r6,e888 <_malloc_r+0x634>
    e5f0:	070000f4 	movhi	fp,3
    e5f4:	e703f204 	addi	fp,fp,4040
    e5f8:	e0800017 	ldw	r2,0(fp)
    e5fc:	a887883a 	add	r3,r21,r2
    e600:	e0c00015 	stw	r3,0(fp)
    e604:	3500e626 	beq	r6,r20,e9a0 <_malloc_r+0x74c>
    e608:	b9000017 	ldw	r4,0(r23)
    e60c:	00bfffc4 	movi	r2,-1
    e610:	2080ee26 	beq	r4,r2,e9cc <_malloc_r+0x778>
    e614:	a185c83a 	sub	r2,r20,r6
    e618:	10c5883a 	add	r2,r2,r3
    e61c:	e0800015 	stw	r2,0(fp)
    e620:	a0c001cc 	andi	r3,r20,7
    e624:	1800bc26 	beq	r3,zero,e918 <_malloc_r+0x6c4>
    e628:	a0e9c83a 	sub	r20,r20,r3
    e62c:	00840204 	movi	r2,4104
    e630:	a5000204 	addi	r20,r20,8
    e634:	10c7c83a 	sub	r3,r2,r3
    e638:	a545883a 	add	r2,r20,r21
    e63c:	1083ffcc 	andi	r2,r2,4095
    e640:	18abc83a 	sub	r21,r3,r2
    e644:	a80b883a 	mov	r5,r21
    e648:	9009883a 	mov	r4,r18
    e64c:	000ee300 	call	ee30 <_sbrk_r>
    e650:	00ffffc4 	movi	r3,-1
    e654:	10c0e126 	beq	r2,r3,e9dc <_malloc_r+0x788>
    e658:	1505c83a 	sub	r2,r2,r20
    e65c:	1545883a 	add	r2,r2,r21
    e660:	10800054 	ori	r2,r2,1
    e664:	e0c00017 	ldw	r3,0(fp)
    e668:	9d000215 	stw	r20,8(r19)
    e66c:	a0800115 	stw	r2,4(r20)
    e670:	a8c7883a 	add	r3,r21,r3
    e674:	e0c00015 	stw	r3,0(fp)
    e678:	84c00e26 	beq	r16,r19,e6b4 <_malloc_r+0x460>
    e67c:	018003c4 	movi	r6,15
    e680:	3580a72e 	bgeu	r6,r22,e920 <_malloc_r+0x6cc>
    e684:	81400117 	ldw	r5,4(r16)
    e688:	013ffe04 	movi	r4,-8
    e68c:	b0bffd04 	addi	r2,r22,-12
    e690:	1104703a 	and	r2,r2,r4
    e694:	2900004c 	andi	r4,r5,1
    e698:	2088b03a 	or	r4,r4,r2
    e69c:	81000115 	stw	r4,4(r16)
    e6a0:	01400144 	movi	r5,5
    e6a4:	8089883a 	add	r4,r16,r2
    e6a8:	21400115 	stw	r5,4(r4)
    e6ac:	21400215 	stw	r5,8(r4)
    e6b0:	3080cd36 	bltu	r6,r2,e9e8 <_malloc_r+0x794>
    e6b4:	008000f4 	movhi	r2,3
    e6b8:	10839904 	addi	r2,r2,3684
    e6bc:	11000017 	ldw	r4,0(r2)
    e6c0:	20c0012e 	bgeu	r4,r3,e6c8 <_malloc_r+0x474>
    e6c4:	10c00015 	stw	r3,0(r2)
    e6c8:	008000f4 	movhi	r2,3
    e6cc:	10839804 	addi	r2,r2,3680
    e6d0:	11000017 	ldw	r4,0(r2)
    e6d4:	9c000217 	ldw	r16,8(r19)
    e6d8:	20c0012e 	bgeu	r4,r3,e6e0 <_malloc_r+0x48c>
    e6dc:	10c00015 	stw	r3,0(r2)
    e6e0:	80c00117 	ldw	r3,4(r16)
    e6e4:	00bfff04 	movi	r2,-4
    e6e8:	1886703a 	and	r3,r3,r2
    e6ec:	1c45c83a 	sub	r2,r3,r17
    e6f0:	1c400236 	bltu	r3,r17,e6fc <_malloc_r+0x4a8>
    e6f4:	00c003c4 	movi	r3,15
    e6f8:	18800416 	blt	r3,r2,e70c <_malloc_r+0x4b8>
    e6fc:	9009883a 	mov	r4,r18
    e700:	001f4580 	call	1f458 <__malloc_unlock>
    e704:	0005883a 	mov	r2,zero
    e708:	003f7b06 	br	e4f8 <__alt_data_end+0xfc00e4f8>
    e70c:	88c00054 	ori	r3,r17,1
    e710:	80c00115 	stw	r3,4(r16)
    e714:	8463883a 	add	r17,r16,r17
    e718:	10800054 	ori	r2,r2,1
    e71c:	9c400215 	stw	r17,8(r19)
    e720:	88800115 	stw	r2,4(r17)
    e724:	9009883a 	mov	r4,r18
    e728:	001f4580 	call	1f458 <__malloc_unlock>
    e72c:	80800204 	addi	r2,r16,8
    e730:	003f7106 	br	e4f8 <__alt_data_end+0xfc00e4f8>
    e734:	00c00504 	movi	r3,20
    e738:	18804a2e 	bgeu	r3,r2,e864 <_malloc_r+0x610>
    e73c:	00c01504 	movi	r3,84
    e740:	18806e36 	bltu	r3,r2,e8fc <_malloc_r+0x6a8>
    e744:	8804d33a 	srli	r2,r17,12
    e748:	12001bc4 	addi	r8,r2,111
    e74c:	11c01b84 	addi	r7,r2,110
    e750:	4209883a 	add	r4,r8,r8
    e754:	003edd06 	br	e2cc <__alt_data_end+0xfc00e2cc>
    e758:	3804d27a 	srli	r2,r7,9
    e75c:	00c00104 	movi	r3,4
    e760:	1880442e 	bgeu	r3,r2,e874 <_malloc_r+0x620>
    e764:	00c00504 	movi	r3,20
    e768:	18808136 	bltu	r3,r2,e970 <_malloc_r+0x71c>
    e76c:	11401704 	addi	r5,r2,92
    e770:	10c016c4 	addi	r3,r2,91
    e774:	294b883a 	add	r5,r5,r5
    e778:	294b883a 	add	r5,r5,r5
    e77c:	294b883a 	add	r5,r5,r5
    e780:	994b883a 	add	r5,r19,r5
    e784:	28800017 	ldw	r2,0(r5)
    e788:	018000f4 	movhi	r6,3
    e78c:	297ffe04 	addi	r5,r5,-8
    e790:	31aba404 	addi	r6,r6,-20848
    e794:	28806526 	beq	r5,r2,e92c <_malloc_r+0x6d8>
    e798:	01bfff04 	movi	r6,-4
    e79c:	10c00117 	ldw	r3,4(r2)
    e7a0:	1986703a 	and	r3,r3,r6
    e7a4:	38c0022e 	bgeu	r7,r3,e7b0 <_malloc_r+0x55c>
    e7a8:	10800217 	ldw	r2,8(r2)
    e7ac:	28bffb1e 	bne	r5,r2,e79c <__alt_data_end+0xfc00e79c>
    e7b0:	11400317 	ldw	r5,12(r2)
    e7b4:	98c00117 	ldw	r3,4(r19)
    e7b8:	81400315 	stw	r5,12(r16)
    e7bc:	80800215 	stw	r2,8(r16)
    e7c0:	2c000215 	stw	r16,8(r5)
    e7c4:	14000315 	stw	r16,12(r2)
    e7c8:	003ef806 	br	e3ac <__alt_data_end+0xfc00e3ac>
    e7cc:	88c00054 	ori	r3,r17,1
    e7d0:	80c00115 	stw	r3,4(r16)
    e7d4:	8463883a 	add	r17,r16,r17
    e7d8:	34400515 	stw	r17,20(r6)
    e7dc:	34400415 	stw	r17,16(r6)
    e7e0:	10c00054 	ori	r3,r2,1
    e7e4:	8a000315 	stw	r8,12(r17)
    e7e8:	8a000215 	stw	r8,8(r17)
    e7ec:	88c00115 	stw	r3,4(r17)
    e7f0:	88a3883a 	add	r17,r17,r2
    e7f4:	88800015 	stw	r2,0(r17)
    e7f8:	9009883a 	mov	r4,r18
    e7fc:	001f4580 	call	1f458 <__malloc_unlock>
    e800:	80800204 	addi	r2,r16,8
    e804:	003f3c06 	br	e4f8 <__alt_data_end+0xfc00e4f8>
    e808:	30c00117 	ldw	r3,4(r6)
    e80c:	003ee706 	br	e3ac <__alt_data_end+0xfc00e3ac>
    e810:	5ac00044 	addi	r11,r11,1
    e814:	588000cc 	andi	r2,r11,3
    e818:	31800204 	addi	r6,r6,8
    e81c:	103efd1e 	bne	r2,zero,e414 <__alt_data_end+0xfc00e414>
    e820:	00002406 	br	e8b4 <_malloc_r+0x660>
    e824:	14000317 	ldw	r16,12(r2)
    e828:	143f251e 	bne	r2,r16,e4c0 <__alt_data_end+0xfc00e4c0>
    e82c:	21000084 	addi	r4,r4,2
    e830:	003ebc06 	br	e324 <__alt_data_end+0xfc00e324>
    e834:	8085883a 	add	r2,r16,r2
    e838:	10c00117 	ldw	r3,4(r2)
    e83c:	81000317 	ldw	r4,12(r16)
    e840:	81400217 	ldw	r5,8(r16)
    e844:	18c00054 	ori	r3,r3,1
    e848:	10c00115 	stw	r3,4(r2)
    e84c:	29000315 	stw	r4,12(r5)
    e850:	21400215 	stw	r5,8(r4)
    e854:	9009883a 	mov	r4,r18
    e858:	001f4580 	call	1f458 <__malloc_unlock>
    e85c:	80800204 	addi	r2,r16,8
    e860:	003f2506 	br	e4f8 <__alt_data_end+0xfc00e4f8>
    e864:	12001704 	addi	r8,r2,92
    e868:	11c016c4 	addi	r7,r2,91
    e86c:	4209883a 	add	r4,r8,r8
    e870:	003e9606 	br	e2cc <__alt_data_end+0xfc00e2cc>
    e874:	3804d1ba 	srli	r2,r7,6
    e878:	11400e44 	addi	r5,r2,57
    e87c:	10c00e04 	addi	r3,r2,56
    e880:	294b883a 	add	r5,r5,r5
    e884:	003fbc06 	br	e778 <__alt_data_end+0xfc00e778>
    e888:	84ff5926 	beq	r16,r19,e5f0 <__alt_data_end+0xfc00e5f0>
    e88c:	008000f4 	movhi	r2,3
    e890:	10aba404 	addi	r2,r2,-20848
    e894:	14000217 	ldw	r16,8(r2)
    e898:	00bfff04 	movi	r2,-4
    e89c:	80c00117 	ldw	r3,4(r16)
    e8a0:	1886703a 	and	r3,r3,r2
    e8a4:	003f9106 	br	e6ec <__alt_data_end+0xfc00e6ec>
    e8a8:	60800217 	ldw	r2,8(r12)
    e8ac:	213fffc4 	addi	r4,r4,-1
    e8b0:	1300651e 	bne	r2,r12,ea48 <_malloc_r+0x7f4>
    e8b4:	208000cc 	andi	r2,r4,3
    e8b8:	633ffe04 	addi	r12,r12,-8
    e8bc:	103ffa1e 	bne	r2,zero,e8a8 <__alt_data_end+0xfc00e8a8>
    e8c0:	98800117 	ldw	r2,4(r19)
    e8c4:	0146303a 	nor	r3,zero,r5
    e8c8:	1884703a 	and	r2,r3,r2
    e8cc:	98800115 	stw	r2,4(r19)
    e8d0:	294b883a 	add	r5,r5,r5
    e8d4:	117f2836 	bltu	r2,r5,e578 <__alt_data_end+0xfc00e578>
    e8d8:	283f2726 	beq	r5,zero,e578 <__alt_data_end+0xfc00e578>
    e8dc:	2886703a 	and	r3,r5,r2
    e8e0:	5809883a 	mov	r4,r11
    e8e4:	183ec31e 	bne	r3,zero,e3f4 <__alt_data_end+0xfc00e3f4>
    e8e8:	294b883a 	add	r5,r5,r5
    e8ec:	2886703a 	and	r3,r5,r2
    e8f0:	21000104 	addi	r4,r4,4
    e8f4:	183ffc26 	beq	r3,zero,e8e8 <__alt_data_end+0xfc00e8e8>
    e8f8:	003ebe06 	br	e3f4 <__alt_data_end+0xfc00e3f4>
    e8fc:	00c05504 	movi	r3,340
    e900:	18801236 	bltu	r3,r2,e94c <_malloc_r+0x6f8>
    e904:	8804d3fa 	srli	r2,r17,15
    e908:	12001e04 	addi	r8,r2,120
    e90c:	11c01dc4 	addi	r7,r2,119
    e910:	4209883a 	add	r4,r8,r8
    e914:	003e6d06 	br	e2cc <__alt_data_end+0xfc00e2cc>
    e918:	00c40004 	movi	r3,4096
    e91c:	003f4606 	br	e638 <__alt_data_end+0xfc00e638>
    e920:	00800044 	movi	r2,1
    e924:	a0800115 	stw	r2,4(r20)
    e928:	003f7406 	br	e6fc <__alt_data_end+0xfc00e6fc>
    e92c:	1805d0ba 	srai	r2,r3,2
    e930:	01c00044 	movi	r7,1
    e934:	30c00117 	ldw	r3,4(r6)
    e938:	388e983a 	sll	r7,r7,r2
    e93c:	2805883a 	mov	r2,r5
    e940:	38c6b03a 	or	r3,r7,r3
    e944:	30c00115 	stw	r3,4(r6)
    e948:	003f9b06 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    e94c:	00c15504 	movi	r3,1364
    e950:	18801a36 	bltu	r3,r2,e9bc <_malloc_r+0x768>
    e954:	8804d4ba 	srli	r2,r17,18
    e958:	12001f44 	addi	r8,r2,125
    e95c:	11c01f04 	addi	r7,r2,124
    e960:	4209883a 	add	r4,r8,r8
    e964:	003e5906 	br	e2cc <__alt_data_end+0xfc00e2cc>
    e968:	ad400404 	addi	r21,r21,16
    e96c:	003f1706 	br	e5cc <__alt_data_end+0xfc00e5cc>
    e970:	00c01504 	movi	r3,84
    e974:	18802336 	bltu	r3,r2,ea04 <_malloc_r+0x7b0>
    e978:	3804d33a 	srli	r2,r7,12
    e97c:	11401bc4 	addi	r5,r2,111
    e980:	10c01b84 	addi	r3,r2,110
    e984:	294b883a 	add	r5,r5,r5
    e988:	003f7b06 	br	e778 <__alt_data_end+0xfc00e778>
    e98c:	9c000217 	ldw	r16,8(r19)
    e990:	00bfff04 	movi	r2,-4
    e994:	80c00117 	ldw	r3,4(r16)
    e998:	1886703a 	and	r3,r3,r2
    e99c:	003f5306 	br	e6ec <__alt_data_end+0xfc00e6ec>
    e9a0:	3083ffcc 	andi	r2,r6,4095
    e9a4:	103f181e 	bne	r2,zero,e608 <__alt_data_end+0xfc00e608>
    e9a8:	99000217 	ldw	r4,8(r19)
    e9ac:	b545883a 	add	r2,r22,r21
    e9b0:	10800054 	ori	r2,r2,1
    e9b4:	20800115 	stw	r2,4(r4)
    e9b8:	003f3e06 	br	e6b4 <__alt_data_end+0xfc00e6b4>
    e9bc:	01003f84 	movi	r4,254
    e9c0:	02001fc4 	movi	r8,127
    e9c4:	01c01f84 	movi	r7,126
    e9c8:	003e4006 	br	e2cc <__alt_data_end+0xfc00e2cc>
    e9cc:	008000f4 	movhi	r2,3
    e9d0:	10b70604 	addi	r2,r2,-9192
    e9d4:	15000015 	stw	r20,0(r2)
    e9d8:	003f1106 	br	e620 <__alt_data_end+0xfc00e620>
    e9dc:	00800044 	movi	r2,1
    e9e0:	002b883a 	mov	r21,zero
    e9e4:	003f1f06 	br	e664 <__alt_data_end+0xfc00e664>
    e9e8:	81400204 	addi	r5,r16,8
    e9ec:	9009883a 	mov	r4,r18
    e9f0:	0015bb80 	call	15bb8 <_free_r>
    e9f4:	008000f4 	movhi	r2,3
    e9f8:	1083f204 	addi	r2,r2,4040
    e9fc:	10c00017 	ldw	r3,0(r2)
    ea00:	003f2c06 	br	e6b4 <__alt_data_end+0xfc00e6b4>
    ea04:	00c05504 	movi	r3,340
    ea08:	18800536 	bltu	r3,r2,ea20 <_malloc_r+0x7cc>
    ea0c:	3804d3fa 	srli	r2,r7,15
    ea10:	11401e04 	addi	r5,r2,120
    ea14:	10c01dc4 	addi	r3,r2,119
    ea18:	294b883a 	add	r5,r5,r5
    ea1c:	003f5606 	br	e778 <__alt_data_end+0xfc00e778>
    ea20:	00c15504 	movi	r3,1364
    ea24:	18800536 	bltu	r3,r2,ea3c <_malloc_r+0x7e8>
    ea28:	3804d4ba 	srli	r2,r7,18
    ea2c:	11401f44 	addi	r5,r2,125
    ea30:	10c01f04 	addi	r3,r2,124
    ea34:	294b883a 	add	r5,r5,r5
    ea38:	003f4f06 	br	e778 <__alt_data_end+0xfc00e778>
    ea3c:	01403f84 	movi	r5,254
    ea40:	00c01f84 	movi	r3,126
    ea44:	003f4c06 	br	e778 <__alt_data_end+0xfc00e778>
    ea48:	98800117 	ldw	r2,4(r19)
    ea4c:	003fa006 	br	e8d0 <__alt_data_end+0xfc00e8d0>
    ea50:	8808d0fa 	srli	r4,r17,3
    ea54:	20800044 	addi	r2,r4,1
    ea58:	1085883a 	add	r2,r2,r2
    ea5c:	003e9006 	br	e4a0 <__alt_data_end+0xfc00e4a0>

0000ea60 <memcpy>:
    ea60:	defffd04 	addi	sp,sp,-12
    ea64:	dfc00215 	stw	ra,8(sp)
    ea68:	dc400115 	stw	r17,4(sp)
    ea6c:	dc000015 	stw	r16,0(sp)
    ea70:	00c003c4 	movi	r3,15
    ea74:	2005883a 	mov	r2,r4
    ea78:	1980452e 	bgeu	r3,r6,eb90 <memcpy+0x130>
    ea7c:	2906b03a 	or	r3,r5,r4
    ea80:	18c000cc 	andi	r3,r3,3
    ea84:	1800441e 	bne	r3,zero,eb98 <memcpy+0x138>
    ea88:	347ffc04 	addi	r17,r6,-16
    ea8c:	8822d13a 	srli	r17,r17,4
    ea90:	28c00104 	addi	r3,r5,4
    ea94:	23400104 	addi	r13,r4,4
    ea98:	8820913a 	slli	r16,r17,4
    ea9c:	2b000204 	addi	r12,r5,8
    eaa0:	22c00204 	addi	r11,r4,8
    eaa4:	84000504 	addi	r16,r16,20
    eaa8:	2a800304 	addi	r10,r5,12
    eaac:	22400304 	addi	r9,r4,12
    eab0:	2c21883a 	add	r16,r5,r16
    eab4:	2811883a 	mov	r8,r5
    eab8:	200f883a 	mov	r7,r4
    eabc:	41000017 	ldw	r4,0(r8)
    eac0:	1fc00017 	ldw	ra,0(r3)
    eac4:	63c00017 	ldw	r15,0(r12)
    eac8:	39000015 	stw	r4,0(r7)
    eacc:	53800017 	ldw	r14,0(r10)
    ead0:	6fc00015 	stw	ra,0(r13)
    ead4:	5bc00015 	stw	r15,0(r11)
    ead8:	4b800015 	stw	r14,0(r9)
    eadc:	18c00404 	addi	r3,r3,16
    eae0:	39c00404 	addi	r7,r7,16
    eae4:	42000404 	addi	r8,r8,16
    eae8:	6b400404 	addi	r13,r13,16
    eaec:	63000404 	addi	r12,r12,16
    eaf0:	5ac00404 	addi	r11,r11,16
    eaf4:	52800404 	addi	r10,r10,16
    eaf8:	4a400404 	addi	r9,r9,16
    eafc:	1c3fef1e 	bne	r3,r16,eabc <__alt_data_end+0xfc00eabc>
    eb00:	89c00044 	addi	r7,r17,1
    eb04:	380e913a 	slli	r7,r7,4
    eb08:	310003cc 	andi	r4,r6,15
    eb0c:	02c000c4 	movi	r11,3
    eb10:	11c7883a 	add	r3,r2,r7
    eb14:	29cb883a 	add	r5,r5,r7
    eb18:	5900212e 	bgeu	r11,r4,eba0 <memcpy+0x140>
    eb1c:	1813883a 	mov	r9,r3
    eb20:	2811883a 	mov	r8,r5
    eb24:	200f883a 	mov	r7,r4
    eb28:	42800017 	ldw	r10,0(r8)
    eb2c:	4a400104 	addi	r9,r9,4
    eb30:	39ffff04 	addi	r7,r7,-4
    eb34:	4abfff15 	stw	r10,-4(r9)
    eb38:	42000104 	addi	r8,r8,4
    eb3c:	59fffa36 	bltu	r11,r7,eb28 <__alt_data_end+0xfc00eb28>
    eb40:	213fff04 	addi	r4,r4,-4
    eb44:	2008d0ba 	srli	r4,r4,2
    eb48:	318000cc 	andi	r6,r6,3
    eb4c:	21000044 	addi	r4,r4,1
    eb50:	2109883a 	add	r4,r4,r4
    eb54:	2109883a 	add	r4,r4,r4
    eb58:	1907883a 	add	r3,r3,r4
    eb5c:	290b883a 	add	r5,r5,r4
    eb60:	30000626 	beq	r6,zero,eb7c <memcpy+0x11c>
    eb64:	198d883a 	add	r6,r3,r6
    eb68:	29c00003 	ldbu	r7,0(r5)
    eb6c:	18c00044 	addi	r3,r3,1
    eb70:	29400044 	addi	r5,r5,1
    eb74:	19ffffc5 	stb	r7,-1(r3)
    eb78:	19bffb1e 	bne	r3,r6,eb68 <__alt_data_end+0xfc00eb68>
    eb7c:	dfc00217 	ldw	ra,8(sp)
    eb80:	dc400117 	ldw	r17,4(sp)
    eb84:	dc000017 	ldw	r16,0(sp)
    eb88:	dec00304 	addi	sp,sp,12
    eb8c:	f800283a 	ret
    eb90:	2007883a 	mov	r3,r4
    eb94:	003ff206 	br	eb60 <__alt_data_end+0xfc00eb60>
    eb98:	2007883a 	mov	r3,r4
    eb9c:	003ff106 	br	eb64 <__alt_data_end+0xfc00eb64>
    eba0:	200d883a 	mov	r6,r4
    eba4:	003fee06 	br	eb60 <__alt_data_end+0xfc00eb60>

0000eba8 <memset>:
    eba8:	20c000cc 	andi	r3,r4,3
    ebac:	2005883a 	mov	r2,r4
    ebb0:	18004426 	beq	r3,zero,ecc4 <memset+0x11c>
    ebb4:	31ffffc4 	addi	r7,r6,-1
    ebb8:	30004026 	beq	r6,zero,ecbc <memset+0x114>
    ebbc:	2813883a 	mov	r9,r5
    ebc0:	200d883a 	mov	r6,r4
    ebc4:	2007883a 	mov	r3,r4
    ebc8:	00000406 	br	ebdc <memset+0x34>
    ebcc:	3a3fffc4 	addi	r8,r7,-1
    ebd0:	31800044 	addi	r6,r6,1
    ebd4:	38003926 	beq	r7,zero,ecbc <memset+0x114>
    ebd8:	400f883a 	mov	r7,r8
    ebdc:	18c00044 	addi	r3,r3,1
    ebe0:	32400005 	stb	r9,0(r6)
    ebe4:	1a0000cc 	andi	r8,r3,3
    ebe8:	403ff81e 	bne	r8,zero,ebcc <__alt_data_end+0xfc00ebcc>
    ebec:	010000c4 	movi	r4,3
    ebf0:	21c02d2e 	bgeu	r4,r7,eca8 <memset+0x100>
    ebf4:	29003fcc 	andi	r4,r5,255
    ebf8:	200c923a 	slli	r6,r4,8
    ebfc:	3108b03a 	or	r4,r6,r4
    ec00:	200c943a 	slli	r6,r4,16
    ec04:	218cb03a 	or	r6,r4,r6
    ec08:	010003c4 	movi	r4,15
    ec0c:	21c0182e 	bgeu	r4,r7,ec70 <memset+0xc8>
    ec10:	3b3ffc04 	addi	r12,r7,-16
    ec14:	6018d13a 	srli	r12,r12,4
    ec18:	1a000104 	addi	r8,r3,4
    ec1c:	1ac00204 	addi	r11,r3,8
    ec20:	6008913a 	slli	r4,r12,4
    ec24:	1a800304 	addi	r10,r3,12
    ec28:	1813883a 	mov	r9,r3
    ec2c:	21000504 	addi	r4,r4,20
    ec30:	1909883a 	add	r4,r3,r4
    ec34:	49800015 	stw	r6,0(r9)
    ec38:	41800015 	stw	r6,0(r8)
    ec3c:	59800015 	stw	r6,0(r11)
    ec40:	51800015 	stw	r6,0(r10)
    ec44:	42000404 	addi	r8,r8,16
    ec48:	4a400404 	addi	r9,r9,16
    ec4c:	5ac00404 	addi	r11,r11,16
    ec50:	52800404 	addi	r10,r10,16
    ec54:	413ff71e 	bne	r8,r4,ec34 <__alt_data_end+0xfc00ec34>
    ec58:	63000044 	addi	r12,r12,1
    ec5c:	6018913a 	slli	r12,r12,4
    ec60:	39c003cc 	andi	r7,r7,15
    ec64:	010000c4 	movi	r4,3
    ec68:	1b07883a 	add	r3,r3,r12
    ec6c:	21c00e2e 	bgeu	r4,r7,eca8 <memset+0x100>
    ec70:	1813883a 	mov	r9,r3
    ec74:	3811883a 	mov	r8,r7
    ec78:	010000c4 	movi	r4,3
    ec7c:	49800015 	stw	r6,0(r9)
    ec80:	423fff04 	addi	r8,r8,-4
    ec84:	4a400104 	addi	r9,r9,4
    ec88:	223ffc36 	bltu	r4,r8,ec7c <__alt_data_end+0xfc00ec7c>
    ec8c:	393fff04 	addi	r4,r7,-4
    ec90:	2008d0ba 	srli	r4,r4,2
    ec94:	39c000cc 	andi	r7,r7,3
    ec98:	21000044 	addi	r4,r4,1
    ec9c:	2109883a 	add	r4,r4,r4
    eca0:	2109883a 	add	r4,r4,r4
    eca4:	1907883a 	add	r3,r3,r4
    eca8:	38000526 	beq	r7,zero,ecc0 <memset+0x118>
    ecac:	19cf883a 	add	r7,r3,r7
    ecb0:	19400005 	stb	r5,0(r3)
    ecb4:	18c00044 	addi	r3,r3,1
    ecb8:	38fffd1e 	bne	r7,r3,ecb0 <__alt_data_end+0xfc00ecb0>
    ecbc:	f800283a 	ret
    ecc0:	f800283a 	ret
    ecc4:	2007883a 	mov	r3,r4
    ecc8:	300f883a 	mov	r7,r6
    eccc:	003fc706 	br	ebec <__alt_data_end+0xfc00ebec>

0000ecd0 <_printf_r>:
    ecd0:	defffd04 	addi	sp,sp,-12
    ecd4:	2805883a 	mov	r2,r5
    ecd8:	dfc00015 	stw	ra,0(sp)
    ecdc:	d9800115 	stw	r6,4(sp)
    ece0:	d9c00215 	stw	r7,8(sp)
    ece4:	21400217 	ldw	r5,8(r4)
    ece8:	d9c00104 	addi	r7,sp,4
    ecec:	100d883a 	mov	r6,r2
    ecf0:	00116840 	call	11684 <___vfprintf_internal_r>
    ecf4:	dfc00017 	ldw	ra,0(sp)
    ecf8:	dec00304 	addi	sp,sp,12
    ecfc:	f800283a 	ret

0000ed00 <printf>:
    ed00:	defffc04 	addi	sp,sp,-16
    ed04:	dfc00015 	stw	ra,0(sp)
    ed08:	d9400115 	stw	r5,4(sp)
    ed0c:	d9800215 	stw	r6,8(sp)
    ed10:	d9c00315 	stw	r7,12(sp)
    ed14:	008000f4 	movhi	r2,3
    ed18:	10b70504 	addi	r2,r2,-9196
    ed1c:	10800017 	ldw	r2,0(r2)
    ed20:	200b883a 	mov	r5,r4
    ed24:	d9800104 	addi	r6,sp,4
    ed28:	11000217 	ldw	r4,8(r2)
    ed2c:	00139600 	call	13960 <__vfprintf_internal>
    ed30:	dfc00017 	ldw	ra,0(sp)
    ed34:	dec00404 	addi	sp,sp,16
    ed38:	f800283a 	ret

0000ed3c <_putchar_r>:
    ed3c:	21800217 	ldw	r6,8(r4)
    ed40:	0017aa81 	jmpi	17aa8 <_putc_r>

0000ed44 <putchar>:
    ed44:	008000f4 	movhi	r2,3
    ed48:	10b70504 	addi	r2,r2,-9196
    ed4c:	200b883a 	mov	r5,r4
    ed50:	11000017 	ldw	r4,0(r2)
    ed54:	21800217 	ldw	r6,8(r4)
    ed58:	0017aa81 	jmpi	17aa8 <_putc_r>

0000ed5c <_puts_r>:
    ed5c:	defff604 	addi	sp,sp,-40
    ed60:	dc000715 	stw	r16,28(sp)
    ed64:	2021883a 	mov	r16,r4
    ed68:	2809883a 	mov	r4,r5
    ed6c:	dc400815 	stw	r17,32(sp)
    ed70:	dfc00915 	stw	ra,36(sp)
    ed74:	2823883a 	mov	r17,r5
    ed78:	000f3280 	call	f328 <strlen>
    ed7c:	10c00044 	addi	r3,r2,1
    ed80:	d8800115 	stw	r2,4(sp)
    ed84:	008000f4 	movhi	r2,3
    ed88:	10aa0104 	addi	r2,r2,-22524
    ed8c:	d8800215 	stw	r2,8(sp)
    ed90:	00800044 	movi	r2,1
    ed94:	d8800315 	stw	r2,12(sp)
    ed98:	00800084 	movi	r2,2
    ed9c:	dc400015 	stw	r17,0(sp)
    eda0:	d8c00615 	stw	r3,24(sp)
    eda4:	dec00415 	stw	sp,16(sp)
    eda8:	d8800515 	stw	r2,20(sp)
    edac:	80000226 	beq	r16,zero,edb8 <_puts_r+0x5c>
    edb0:	80800e17 	ldw	r2,56(r16)
    edb4:	10001426 	beq	r2,zero,ee08 <_puts_r+0xac>
    edb8:	81400217 	ldw	r5,8(r16)
    edbc:	2880030b 	ldhu	r2,12(r5)
    edc0:	10c8000c 	andi	r3,r2,8192
    edc4:	1800061e 	bne	r3,zero,ede0 <_puts_r+0x84>
    edc8:	29001917 	ldw	r4,100(r5)
    edcc:	00f7ffc4 	movi	r3,-8193
    edd0:	10880014 	ori	r2,r2,8192
    edd4:	20c6703a 	and	r3,r4,r3
    edd8:	2880030d 	sth	r2,12(r5)
    eddc:	28c01915 	stw	r3,100(r5)
    ede0:	d9800404 	addi	r6,sp,16
    ede4:	8009883a 	mov	r4,r16
    ede8:	0015ec80 	call	15ec8 <__sfvwrite_r>
    edec:	1000091e 	bne	r2,zero,ee14 <_puts_r+0xb8>
    edf0:	00800284 	movi	r2,10
    edf4:	dfc00917 	ldw	ra,36(sp)
    edf8:	dc400817 	ldw	r17,32(sp)
    edfc:	dc000717 	ldw	r16,28(sp)
    ee00:	dec00a04 	addi	sp,sp,40
    ee04:	f800283a 	ret
    ee08:	8009883a 	mov	r4,r16
    ee0c:	0015a440 	call	15a44 <__sinit>
    ee10:	003fe906 	br	edb8 <__alt_data_end+0xfc00edb8>
    ee14:	00bfffc4 	movi	r2,-1
    ee18:	003ff606 	br	edf4 <__alt_data_end+0xfc00edf4>

0000ee1c <puts>:
    ee1c:	008000f4 	movhi	r2,3
    ee20:	10b70504 	addi	r2,r2,-9196
    ee24:	200b883a 	mov	r5,r4
    ee28:	11000017 	ldw	r4,0(r2)
    ee2c:	000ed5c1 	jmpi	ed5c <_puts_r>

0000ee30 <_sbrk_r>:
    ee30:	defffd04 	addi	sp,sp,-12
    ee34:	dc000015 	stw	r16,0(sp)
    ee38:	040000f4 	movhi	r16,3
    ee3c:	dc400115 	stw	r17,4(sp)
    ee40:	84039b04 	addi	r16,r16,3692
    ee44:	2023883a 	mov	r17,r4
    ee48:	2809883a 	mov	r4,r5
    ee4c:	dfc00215 	stw	ra,8(sp)
    ee50:	80000015 	stw	zero,0(r16)
    ee54:	001f6400 	call	1f640 <sbrk>
    ee58:	00ffffc4 	movi	r3,-1
    ee5c:	10c00526 	beq	r2,r3,ee74 <_sbrk_r+0x44>
    ee60:	dfc00217 	ldw	ra,8(sp)
    ee64:	dc400117 	ldw	r17,4(sp)
    ee68:	dc000017 	ldw	r16,0(sp)
    ee6c:	dec00304 	addi	sp,sp,12
    ee70:	f800283a 	ret
    ee74:	80c00017 	ldw	r3,0(r16)
    ee78:	183ff926 	beq	r3,zero,ee60 <__alt_data_end+0xfc00ee60>
    ee7c:	88c00015 	stw	r3,0(r17)
    ee80:	003ff706 	br	ee60 <__alt_data_end+0xfc00ee60>

0000ee84 <_init_signal_r>:
    ee84:	2080b717 	ldw	r2,732(r4)
    ee88:	10000226 	beq	r2,zero,ee94 <_init_signal_r+0x10>
    ee8c:	0005883a 	mov	r2,zero
    ee90:	f800283a 	ret
    ee94:	defffe04 	addi	sp,sp,-8
    ee98:	01402004 	movi	r5,128
    ee9c:	dc000015 	stw	r16,0(sp)
    eea0:	dfc00115 	stw	ra,4(sp)
    eea4:	2021883a 	mov	r16,r4
    eea8:	000e2540 	call	e254 <_malloc_r>
    eeac:	8080b715 	stw	r2,732(r16)
    eeb0:	10000d26 	beq	r2,zero,eee8 <_init_signal_r+0x64>
    eeb4:	0007883a 	mov	r3,zero
    eeb8:	01002004 	movi	r4,128
    eebc:	00000106 	br	eec4 <_init_signal_r+0x40>
    eec0:	8080b717 	ldw	r2,732(r16)
    eec4:	10c5883a 	add	r2,r2,r3
    eec8:	10000015 	stw	zero,0(r2)
    eecc:	18c00104 	addi	r3,r3,4
    eed0:	193ffb1e 	bne	r3,r4,eec0 <__alt_data_end+0xfc00eec0>
    eed4:	0005883a 	mov	r2,zero
    eed8:	dfc00117 	ldw	ra,4(sp)
    eedc:	dc000017 	ldw	r16,0(sp)
    eee0:	dec00204 	addi	sp,sp,8
    eee4:	f800283a 	ret
    eee8:	00bfffc4 	movi	r2,-1
    eeec:	003ffa06 	br	eed8 <__alt_data_end+0xfc00eed8>

0000eef0 <_signal_r>:
    eef0:	00c007c4 	movi	r3,31
    eef4:	19401536 	bltu	r3,r5,ef4c <_signal_r+0x5c>
    eef8:	2080b717 	ldw	r2,732(r4)
    eefc:	defffc04 	addi	sp,sp,-16
    ef00:	dc800215 	stw	r18,8(sp)
    ef04:	dc400115 	stw	r17,4(sp)
    ef08:	dc000015 	stw	r16,0(sp)
    ef0c:	dfc00315 	stw	ra,12(sp)
    ef10:	3023883a 	mov	r17,r6
    ef14:	2021883a 	mov	r16,r4
    ef18:	2825883a 	mov	r18,r5
    ef1c:	10000f26 	beq	r2,zero,ef5c <_signal_r+0x6c>
    ef20:	948b883a 	add	r5,r18,r18
    ef24:	294b883a 	add	r5,r5,r5
    ef28:	114b883a 	add	r5,r2,r5
    ef2c:	28800017 	ldw	r2,0(r5)
    ef30:	2c400015 	stw	r17,0(r5)
    ef34:	dfc00317 	ldw	ra,12(sp)
    ef38:	dc800217 	ldw	r18,8(sp)
    ef3c:	dc400117 	ldw	r17,4(sp)
    ef40:	dc000017 	ldw	r16,0(sp)
    ef44:	dec00404 	addi	sp,sp,16
    ef48:	f800283a 	ret
    ef4c:	00c00584 	movi	r3,22
    ef50:	20c00015 	stw	r3,0(r4)
    ef54:	00bfffc4 	movi	r2,-1
    ef58:	f800283a 	ret
    ef5c:	000ee840 	call	ee84 <_init_signal_r>
    ef60:	1000021e 	bne	r2,zero,ef6c <_signal_r+0x7c>
    ef64:	8080b717 	ldw	r2,732(r16)
    ef68:	003fed06 	br	ef20 <__alt_data_end+0xfc00ef20>
    ef6c:	00bfffc4 	movi	r2,-1
    ef70:	003ff006 	br	ef34 <__alt_data_end+0xfc00ef34>

0000ef74 <_raise_r>:
    ef74:	008007c4 	movi	r2,31
    ef78:	11402936 	bltu	r2,r5,f020 <_raise_r+0xac>
    ef7c:	20c0b717 	ldw	r3,732(r4)
    ef80:	defffd04 	addi	sp,sp,-12
    ef84:	dc400115 	stw	r17,4(sp)
    ef88:	dc000015 	stw	r16,0(sp)
    ef8c:	dfc00215 	stw	ra,8(sp)
    ef90:	2021883a 	mov	r16,r4
    ef94:	2823883a 	mov	r17,r5
    ef98:	18001726 	beq	r3,zero,eff8 <_raise_r+0x84>
    ef9c:	2945883a 	add	r2,r5,r5
    efa0:	1085883a 	add	r2,r2,r2
    efa4:	1887883a 	add	r3,r3,r2
    efa8:	19800017 	ldw	r6,0(r3)
    efac:	30001226 	beq	r6,zero,eff8 <_raise_r+0x84>
    efb0:	00800044 	movi	r2,1
    efb4:	30800e26 	beq	r6,r2,eff0 <_raise_r+0x7c>
    efb8:	013fffc4 	movi	r4,-1
    efbc:	31000926 	beq	r6,r4,efe4 <_raise_r+0x70>
    efc0:	18000015 	stw	zero,0(r3)
    efc4:	2809883a 	mov	r4,r5
    efc8:	303ee83a 	callr	r6
    efcc:	0005883a 	mov	r2,zero
    efd0:	dfc00217 	ldw	ra,8(sp)
    efd4:	dc400117 	ldw	r17,4(sp)
    efd8:	dc000017 	ldw	r16,0(sp)
    efdc:	dec00304 	addi	sp,sp,12
    efe0:	f800283a 	ret
    efe4:	00c00584 	movi	r3,22
    efe8:	80c00015 	stw	r3,0(r16)
    efec:	003ff806 	br	efd0 <__alt_data_end+0xfc00efd0>
    eff0:	0005883a 	mov	r2,zero
    eff4:	003ff606 	br	efd0 <__alt_data_end+0xfc00efd0>
    eff8:	8009883a 	mov	r4,r16
    effc:	000f1840 	call	f184 <_getpid_r>
    f000:	880d883a 	mov	r6,r17
    f004:	100b883a 	mov	r5,r2
    f008:	8009883a 	mov	r4,r16
    f00c:	dfc00217 	ldw	ra,8(sp)
    f010:	dc400117 	ldw	r17,4(sp)
    f014:	dc000017 	ldw	r16,0(sp)
    f018:	dec00304 	addi	sp,sp,12
    f01c:	000f1281 	jmpi	f128 <_kill_r>
    f020:	00800584 	movi	r2,22
    f024:	20800015 	stw	r2,0(r4)
    f028:	00bfffc4 	movi	r2,-1
    f02c:	f800283a 	ret

0000f030 <__sigtramp_r>:
    f030:	008007c4 	movi	r2,31
    f034:	11402436 	bltu	r2,r5,f0c8 <__sigtramp_r+0x98>
    f038:	20c0b717 	ldw	r3,732(r4)
    f03c:	defffd04 	addi	sp,sp,-12
    f040:	dc400115 	stw	r17,4(sp)
    f044:	dc000015 	stw	r16,0(sp)
    f048:	dfc00215 	stw	ra,8(sp)
    f04c:	2021883a 	mov	r16,r4
    f050:	2823883a 	mov	r17,r5
    f054:	18001826 	beq	r3,zero,f0b8 <__sigtramp_r+0x88>
    f058:	8c45883a 	add	r2,r17,r17
    f05c:	1085883a 	add	r2,r2,r2
    f060:	1885883a 	add	r2,r3,r2
    f064:	10c00017 	ldw	r3,0(r2)
    f068:	18001126 	beq	r3,zero,f0b0 <__sigtramp_r+0x80>
    f06c:	013fffc4 	movi	r4,-1
    f070:	19000d26 	beq	r3,r4,f0a8 <__sigtramp_r+0x78>
    f074:	01000044 	movi	r4,1
    f078:	19000926 	beq	r3,r4,f0a0 <__sigtramp_r+0x70>
    f07c:	10000015 	stw	zero,0(r2)
    f080:	8809883a 	mov	r4,r17
    f084:	183ee83a 	callr	r3
    f088:	0005883a 	mov	r2,zero
    f08c:	dfc00217 	ldw	ra,8(sp)
    f090:	dc400117 	ldw	r17,4(sp)
    f094:	dc000017 	ldw	r16,0(sp)
    f098:	dec00304 	addi	sp,sp,12
    f09c:	f800283a 	ret
    f0a0:	008000c4 	movi	r2,3
    f0a4:	003ff906 	br	f08c <__alt_data_end+0xfc00f08c>
    f0a8:	00800084 	movi	r2,2
    f0ac:	003ff706 	br	f08c <__alt_data_end+0xfc00f08c>
    f0b0:	00800044 	movi	r2,1
    f0b4:	003ff506 	br	f08c <__alt_data_end+0xfc00f08c>
    f0b8:	000ee840 	call	ee84 <_init_signal_r>
    f0bc:	1000041e 	bne	r2,zero,f0d0 <__sigtramp_r+0xa0>
    f0c0:	80c0b717 	ldw	r3,732(r16)
    f0c4:	003fe406 	br	f058 <__alt_data_end+0xfc00f058>
    f0c8:	00bfffc4 	movi	r2,-1
    f0cc:	f800283a 	ret
    f0d0:	00bfffc4 	movi	r2,-1
    f0d4:	003fed06 	br	f08c <__alt_data_end+0xfc00f08c>

0000f0d8 <raise>:
    f0d8:	008000f4 	movhi	r2,3
    f0dc:	10b70504 	addi	r2,r2,-9196
    f0e0:	200b883a 	mov	r5,r4
    f0e4:	11000017 	ldw	r4,0(r2)
    f0e8:	000ef741 	jmpi	ef74 <_raise_r>

0000f0ec <signal>:
    f0ec:	008000f4 	movhi	r2,3
    f0f0:	10b70504 	addi	r2,r2,-9196
    f0f4:	280d883a 	mov	r6,r5
    f0f8:	200b883a 	mov	r5,r4
    f0fc:	11000017 	ldw	r4,0(r2)
    f100:	000eef01 	jmpi	eef0 <_signal_r>

0000f104 <_init_signal>:
    f104:	008000f4 	movhi	r2,3
    f108:	10b70504 	addi	r2,r2,-9196
    f10c:	11000017 	ldw	r4,0(r2)
    f110:	000ee841 	jmpi	ee84 <_init_signal_r>

0000f114 <__sigtramp>:
    f114:	008000f4 	movhi	r2,3
    f118:	10b70504 	addi	r2,r2,-9196
    f11c:	200b883a 	mov	r5,r4
    f120:	11000017 	ldw	r4,0(r2)
    f124:	000f0301 	jmpi	f030 <__sigtramp_r>

0000f128 <_kill_r>:
    f128:	defffd04 	addi	sp,sp,-12
    f12c:	2805883a 	mov	r2,r5
    f130:	dc000015 	stw	r16,0(sp)
    f134:	040000f4 	movhi	r16,3
    f138:	dc400115 	stw	r17,4(sp)
    f13c:	84039b04 	addi	r16,r16,3692
    f140:	2023883a 	mov	r17,r4
    f144:	300b883a 	mov	r5,r6
    f148:	1009883a 	mov	r4,r2
    f14c:	dfc00215 	stw	ra,8(sp)
    f150:	80000015 	stw	zero,0(r16)
    f154:	001f0840 	call	1f084 <kill>
    f158:	00ffffc4 	movi	r3,-1
    f15c:	10c00526 	beq	r2,r3,f174 <_kill_r+0x4c>
    f160:	dfc00217 	ldw	ra,8(sp)
    f164:	dc400117 	ldw	r17,4(sp)
    f168:	dc000017 	ldw	r16,0(sp)
    f16c:	dec00304 	addi	sp,sp,12
    f170:	f800283a 	ret
    f174:	80c00017 	ldw	r3,0(r16)
    f178:	183ff926 	beq	r3,zero,f160 <__alt_data_end+0xfc00f160>
    f17c:	88c00015 	stw	r3,0(r17)
    f180:	003ff706 	br	f160 <__alt_data_end+0xfc00f160>

0000f184 <_getpid_r>:
    f184:	001ef401 	jmpi	1ef40 <getpid>

0000f188 <_sprintf_r>:
    f188:	deffe404 	addi	sp,sp,-112
    f18c:	2807883a 	mov	r3,r5
    f190:	dfc01a15 	stw	ra,104(sp)
    f194:	d9c01b15 	stw	r7,108(sp)
    f198:	00a00034 	movhi	r2,32768
    f19c:	10bfffc4 	addi	r2,r2,-1
    f1a0:	02008204 	movi	r8,520
    f1a4:	d8800215 	stw	r2,8(sp)
    f1a8:	d8800515 	stw	r2,20(sp)
    f1ac:	d9c01b04 	addi	r7,sp,108
    f1b0:	d80b883a 	mov	r5,sp
    f1b4:	00bfffc4 	movi	r2,-1
    f1b8:	d8c00015 	stw	r3,0(sp)
    f1bc:	d8c00415 	stw	r3,16(sp)
    f1c0:	da00030d 	sth	r8,12(sp)
    f1c4:	d880038d 	sth	r2,14(sp)
    f1c8:	000f3c00 	call	f3c0 <___svfprintf_internal_r>
    f1cc:	d8c00017 	ldw	r3,0(sp)
    f1d0:	18000005 	stb	zero,0(r3)
    f1d4:	dfc01a17 	ldw	ra,104(sp)
    f1d8:	dec01c04 	addi	sp,sp,112
    f1dc:	f800283a 	ret

0000f1e0 <sprintf>:
    f1e0:	deffe304 	addi	sp,sp,-116
    f1e4:	2007883a 	mov	r3,r4
    f1e8:	dfc01a15 	stw	ra,104(sp)
    f1ec:	d9801b15 	stw	r6,108(sp)
    f1f0:	d9c01c15 	stw	r7,112(sp)
    f1f4:	010000f4 	movhi	r4,3
    f1f8:	21370504 	addi	r4,r4,-9196
    f1fc:	21000017 	ldw	r4,0(r4)
    f200:	00a00034 	movhi	r2,32768
    f204:	10bfffc4 	addi	r2,r2,-1
    f208:	280d883a 	mov	r6,r5
    f20c:	02008204 	movi	r8,520
    f210:	d8800215 	stw	r2,8(sp)
    f214:	d8800515 	stw	r2,20(sp)
    f218:	d9c01b04 	addi	r7,sp,108
    f21c:	d80b883a 	mov	r5,sp
    f220:	00bfffc4 	movi	r2,-1
    f224:	d8c00015 	stw	r3,0(sp)
    f228:	d8c00415 	stw	r3,16(sp)
    f22c:	da00030d 	sth	r8,12(sp)
    f230:	d880038d 	sth	r2,14(sp)
    f234:	000f3c00 	call	f3c0 <___svfprintf_internal_r>
    f238:	d8c00017 	ldw	r3,0(sp)
    f23c:	18000005 	stb	zero,0(r3)
    f240:	dfc01a17 	ldw	ra,104(sp)
    f244:	dec01d04 	addi	sp,sp,116
    f248:	f800283a 	ret

0000f24c <strcmp>:
    f24c:	2144b03a 	or	r2,r4,r5
    f250:	108000cc 	andi	r2,r2,3
    f254:	1000171e 	bne	r2,zero,f2b4 <strcmp+0x68>
    f258:	20800017 	ldw	r2,0(r4)
    f25c:	28c00017 	ldw	r3,0(r5)
    f260:	10c0141e 	bne	r2,r3,f2b4 <strcmp+0x68>
    f264:	027fbff4 	movhi	r9,65279
    f268:	4a7fbfc4 	addi	r9,r9,-257
    f26c:	0086303a 	nor	r3,zero,r2
    f270:	02202074 	movhi	r8,32897
    f274:	1245883a 	add	r2,r2,r9
    f278:	42202004 	addi	r8,r8,-32640
    f27c:	10c4703a 	and	r2,r2,r3
    f280:	1204703a 	and	r2,r2,r8
    f284:	10000226 	beq	r2,zero,f290 <strcmp+0x44>
    f288:	00002306 	br	f318 <strcmp+0xcc>
    f28c:	1000221e 	bne	r2,zero,f318 <strcmp+0xcc>
    f290:	21000104 	addi	r4,r4,4
    f294:	20c00017 	ldw	r3,0(r4)
    f298:	29400104 	addi	r5,r5,4
    f29c:	29800017 	ldw	r6,0(r5)
    f2a0:	1a4f883a 	add	r7,r3,r9
    f2a4:	00c4303a 	nor	r2,zero,r3
    f2a8:	3884703a 	and	r2,r7,r2
    f2ac:	1204703a 	and	r2,r2,r8
    f2b0:	19bff626 	beq	r3,r6,f28c <__alt_data_end+0xfc00f28c>
    f2b4:	20800003 	ldbu	r2,0(r4)
    f2b8:	10c03fcc 	andi	r3,r2,255
    f2bc:	18c0201c 	xori	r3,r3,128
    f2c0:	18ffe004 	addi	r3,r3,-128
    f2c4:	18000c26 	beq	r3,zero,f2f8 <strcmp+0xac>
    f2c8:	29800007 	ldb	r6,0(r5)
    f2cc:	19800326 	beq	r3,r6,f2dc <strcmp+0x90>
    f2d0:	00001306 	br	f320 <strcmp+0xd4>
    f2d4:	29800007 	ldb	r6,0(r5)
    f2d8:	11800b1e 	bne	r2,r6,f308 <strcmp+0xbc>
    f2dc:	21000044 	addi	r4,r4,1
    f2e0:	20c00003 	ldbu	r3,0(r4)
    f2e4:	29400044 	addi	r5,r5,1
    f2e8:	18803fcc 	andi	r2,r3,255
    f2ec:	1080201c 	xori	r2,r2,128
    f2f0:	10bfe004 	addi	r2,r2,-128
    f2f4:	103ff71e 	bne	r2,zero,f2d4 <__alt_data_end+0xfc00f2d4>
    f2f8:	0007883a 	mov	r3,zero
    f2fc:	28800003 	ldbu	r2,0(r5)
    f300:	1885c83a 	sub	r2,r3,r2
    f304:	f800283a 	ret
    f308:	28800003 	ldbu	r2,0(r5)
    f30c:	18c03fcc 	andi	r3,r3,255
    f310:	1885c83a 	sub	r2,r3,r2
    f314:	f800283a 	ret
    f318:	0005883a 	mov	r2,zero
    f31c:	f800283a 	ret
    f320:	10c03fcc 	andi	r3,r2,255
    f324:	003ff506 	br	f2fc <__alt_data_end+0xfc00f2fc>

0000f328 <strlen>:
    f328:	208000cc 	andi	r2,r4,3
    f32c:	10002026 	beq	r2,zero,f3b0 <strlen+0x88>
    f330:	20800007 	ldb	r2,0(r4)
    f334:	10002026 	beq	r2,zero,f3b8 <strlen+0x90>
    f338:	2005883a 	mov	r2,r4
    f33c:	00000206 	br	f348 <strlen+0x20>
    f340:	10c00007 	ldb	r3,0(r2)
    f344:	18001826 	beq	r3,zero,f3a8 <strlen+0x80>
    f348:	10800044 	addi	r2,r2,1
    f34c:	10c000cc 	andi	r3,r2,3
    f350:	183ffb1e 	bne	r3,zero,f340 <__alt_data_end+0xfc00f340>
    f354:	10c00017 	ldw	r3,0(r2)
    f358:	01ffbff4 	movhi	r7,65279
    f35c:	39ffbfc4 	addi	r7,r7,-257
    f360:	00ca303a 	nor	r5,zero,r3
    f364:	01a02074 	movhi	r6,32897
    f368:	19c7883a 	add	r3,r3,r7
    f36c:	31a02004 	addi	r6,r6,-32640
    f370:	1946703a 	and	r3,r3,r5
    f374:	1986703a 	and	r3,r3,r6
    f378:	1800091e 	bne	r3,zero,f3a0 <strlen+0x78>
    f37c:	10800104 	addi	r2,r2,4
    f380:	10c00017 	ldw	r3,0(r2)
    f384:	19cb883a 	add	r5,r3,r7
    f388:	00c6303a 	nor	r3,zero,r3
    f38c:	28c6703a 	and	r3,r5,r3
    f390:	1986703a 	and	r3,r3,r6
    f394:	183ff926 	beq	r3,zero,f37c <__alt_data_end+0xfc00f37c>
    f398:	00000106 	br	f3a0 <strlen+0x78>
    f39c:	10800044 	addi	r2,r2,1
    f3a0:	10c00007 	ldb	r3,0(r2)
    f3a4:	183ffd1e 	bne	r3,zero,f39c <__alt_data_end+0xfc00f39c>
    f3a8:	1105c83a 	sub	r2,r2,r4
    f3ac:	f800283a 	ret
    f3b0:	2005883a 	mov	r2,r4
    f3b4:	003fe706 	br	f354 <__alt_data_end+0xfc00f354>
    f3b8:	0005883a 	mov	r2,zero
    f3bc:	f800283a 	ret

0000f3c0 <___svfprintf_internal_r>:
    f3c0:	deffb704 	addi	sp,sp,-292
    f3c4:	dfc04815 	stw	ra,288(sp)
    f3c8:	ddc04615 	stw	r23,280(sp)
    f3cc:	d9402d15 	stw	r5,180(sp)
    f3d0:	d9003915 	stw	r4,228(sp)
    f3d4:	302f883a 	mov	r23,r6
    f3d8:	d9c02e15 	stw	r7,184(sp)
    f3dc:	df004715 	stw	fp,284(sp)
    f3e0:	dd804515 	stw	r22,276(sp)
    f3e4:	dd404415 	stw	r21,272(sp)
    f3e8:	dd004315 	stw	r20,268(sp)
    f3ec:	dcc04215 	stw	r19,264(sp)
    f3f0:	dc804115 	stw	r18,260(sp)
    f3f4:	dc404015 	stw	r17,256(sp)
    f3f8:	dc003f15 	stw	r16,252(sp)
    f3fc:	00165c40 	call	165c4 <_localeconv_r>
    f400:	10800017 	ldw	r2,0(r2)
    f404:	1009883a 	mov	r4,r2
    f408:	d8803415 	stw	r2,208(sp)
    f40c:	000f3280 	call	f328 <strlen>
    f410:	d8c02d17 	ldw	r3,180(sp)
    f414:	d8803815 	stw	r2,224(sp)
    f418:	1880030b 	ldhu	r2,12(r3)
    f41c:	1080200c 	andi	r2,r2,128
    f420:	10000226 	beq	r2,zero,f42c <___svfprintf_internal_r+0x6c>
    f424:	18800417 	ldw	r2,16(r3)
    f428:	1006b126 	beq	r2,zero,10ef0 <___svfprintf_internal_r+0x1b30>
    f42c:	dcc03917 	ldw	r19,228(sp)
    f430:	d8c00404 	addi	r3,sp,16
    f434:	054000f4 	movhi	r21,3
    f438:	d9001e04 	addi	r4,sp,120
    f43c:	ad6a1284 	addi	r21,r21,-22454
    f440:	d8c01e15 	stw	r3,120(sp)
    f444:	d8002015 	stw	zero,128(sp)
    f448:	d8001f15 	stw	zero,124(sp)
    f44c:	d8003315 	stw	zero,204(sp)
    f450:	d8003615 	stw	zero,216(sp)
    f454:	d8003715 	stw	zero,220(sp)
    f458:	1811883a 	mov	r8,r3
    f45c:	d8003a15 	stw	zero,232(sp)
    f460:	d8003b15 	stw	zero,236(sp)
    f464:	d8002f15 	stw	zero,188(sp)
    f468:	d9002815 	stw	r4,160(sp)
    f46c:	b8800007 	ldb	r2,0(r23)
    f470:	10027726 	beq	r2,zero,fe50 <___svfprintf_internal_r+0xa90>
    f474:	00c00944 	movi	r3,37
    f478:	b823883a 	mov	r17,r23
    f47c:	10c0021e 	bne	r2,r3,f488 <___svfprintf_internal_r+0xc8>
    f480:	00001406 	br	f4d4 <___svfprintf_internal_r+0x114>
    f484:	10c00326 	beq	r2,r3,f494 <___svfprintf_internal_r+0xd4>
    f488:	8c400044 	addi	r17,r17,1
    f48c:	88800007 	ldb	r2,0(r17)
    f490:	103ffc1e 	bne	r2,zero,f484 <__alt_data_end+0xfc00f484>
    f494:	8de1c83a 	sub	r16,r17,r23
    f498:	80000e26 	beq	r16,zero,f4d4 <___svfprintf_internal_r+0x114>
    f49c:	d8c02017 	ldw	r3,128(sp)
    f4a0:	d8801f17 	ldw	r2,124(sp)
    f4a4:	45c00015 	stw	r23,0(r8)
    f4a8:	1c07883a 	add	r3,r3,r16
    f4ac:	10800044 	addi	r2,r2,1
    f4b0:	d8c02015 	stw	r3,128(sp)
    f4b4:	44000115 	stw	r16,4(r8)
    f4b8:	d8801f15 	stw	r2,124(sp)
    f4bc:	00c001c4 	movi	r3,7
    f4c0:	18809916 	blt	r3,r2,f728 <___svfprintf_internal_r+0x368>
    f4c4:	42000204 	addi	r8,r8,8
    f4c8:	d9402f17 	ldw	r5,188(sp)
    f4cc:	2c0b883a 	add	r5,r5,r16
    f4d0:	d9402f15 	stw	r5,188(sp)
    f4d4:	88800007 	ldb	r2,0(r17)
    f4d8:	10009a26 	beq	r2,zero,f744 <___svfprintf_internal_r+0x384>
    f4dc:	8dc00044 	addi	r23,r17,1
    f4e0:	8c400047 	ldb	r17,1(r17)
    f4e4:	0021883a 	mov	r16,zero
    f4e8:	00bfffc4 	movi	r2,-1
    f4ec:	0025883a 	mov	r18,zero
    f4f0:	dc002905 	stb	r16,164(sp)
    f4f4:	d8002785 	stb	zero,158(sp)
    f4f8:	d8002b05 	stb	zero,172(sp)
    f4fc:	d8802a15 	stw	r2,168(sp)
    f500:	d8003115 	stw	zero,196(sp)
    f504:	05001604 	movi	r20,88
    f508:	05800244 	movi	r22,9
    f50c:	4039883a 	mov	fp,r8
    f510:	9021883a 	mov	r16,r18
    f514:	bdc00044 	addi	r23,r23,1
    f518:	88bff804 	addi	r2,r17,-32
    f51c:	a0831e36 	bltu	r20,r2,10198 <___svfprintf_internal_r+0xdd8>
    f520:	100490ba 	slli	r2,r2,2
    f524:	00c00074 	movhi	r3,1
    f528:	18fd4e04 	addi	r3,r3,-2760
    f52c:	10c5883a 	add	r2,r2,r3
    f530:	10800017 	ldw	r2,0(r2)
    f534:	1000683a 	jmp	r2
    f538:	000100e0 	cmpeqi	zero,zero,1027
    f53c:	00010198 	cmpnei	zero,zero,1030
    f540:	00010198 	cmpnei	zero,zero,1030
    f544:	000100d4 	movui	zero,1027
    f548:	00010198 	cmpnei	zero,zero,1030
    f54c:	00010198 	cmpnei	zero,zero,1030
    f550:	00010198 	cmpnei	zero,zero,1030
    f554:	00010198 	cmpnei	zero,zero,1030
    f558:	00010198 	cmpnei	zero,zero,1030
    f55c:	00010198 	cmpnei	zero,zero,1030
    f560:	0000f7a0 	cmpeqi	zero,zero,990
    f564:	0000ffe4 	muli	zero,zero,1023
    f568:	00010198 	cmpnei	zero,zero,1030
    f56c:	0000f6ac 	andhi	zero,zero,986
    f570:	0000f7c4 	movi	zero,991
    f574:	00010198 	cmpnei	zero,zero,1030
    f578:	0000f850 	cmplti	zero,zero,993
    f57c:	0000f814 	movui	zero,992
    f580:	0000f814 	movui	zero,992
    f584:	0000f814 	movui	zero,992
    f588:	0000f814 	movui	zero,992
    f58c:	0000f814 	movui	zero,992
    f590:	0000f814 	movui	zero,992
    f594:	0000f814 	movui	zero,992
    f598:	0000f814 	movui	zero,992
    f59c:	0000f814 	movui	zero,992
    f5a0:	00010198 	cmpnei	zero,zero,1030
    f5a4:	00010198 	cmpnei	zero,zero,1030
    f5a8:	00010198 	cmpnei	zero,zero,1030
    f5ac:	00010198 	cmpnei	zero,zero,1030
    f5b0:	00010198 	cmpnei	zero,zero,1030
    f5b4:	00010198 	cmpnei	zero,zero,1030
    f5b8:	00010198 	cmpnei	zero,zero,1030
    f5bc:	00010198 	cmpnei	zero,zero,1030
    f5c0:	00010198 	cmpnei	zero,zero,1030
    f5c4:	00010198 	cmpnei	zero,zero,1030
    f5c8:	0000f914 	movui	zero,996
    f5cc:	0000f85c 	xori	zero,zero,993
    f5d0:	00010198 	cmpnei	zero,zero,1030
    f5d4:	0000f85c 	xori	zero,zero,993
    f5d8:	00010198 	cmpnei	zero,zero,1030
    f5dc:	00010198 	cmpnei	zero,zero,1030
    f5e0:	00010198 	cmpnei	zero,zero,1030
    f5e4:	00010198 	cmpnei	zero,zero,1030
    f5e8:	0000f908 	cmpgei	zero,zero,996
    f5ec:	00010198 	cmpnei	zero,zero,1030
    f5f0:	00010198 	cmpnei	zero,zero,1030
    f5f4:	0000f9dc 	xori	zero,zero,999
    f5f8:	00010198 	cmpnei	zero,zero,1030
    f5fc:	00010198 	cmpnei	zero,zero,1030
    f600:	00010198 	cmpnei	zero,zero,1030
    f604:	00010198 	cmpnei	zero,zero,1030
    f608:	00010198 	cmpnei	zero,zero,1030
    f60c:	0000fe58 	cmpnei	zero,zero,1017
    f610:	00010198 	cmpnei	zero,zero,1030
    f614:	00010198 	cmpnei	zero,zero,1030
    f618:	0000fec4 	movi	zero,1019
    f61c:	00010198 	cmpnei	zero,zero,1030
    f620:	00010198 	cmpnei	zero,zero,1030
    f624:	00010198 	cmpnei	zero,zero,1030
    f628:	00010198 	cmpnei	zero,zero,1030
    f62c:	00010198 	cmpnei	zero,zero,1030
    f630:	00010198 	cmpnei	zero,zero,1030
    f634:	00010198 	cmpnei	zero,zero,1030
    f638:	00010198 	cmpnei	zero,zero,1030
    f63c:	00010198 	cmpnei	zero,zero,1030
    f640:	00010198 	cmpnei	zero,zero,1030
    f644:	0000ff80 	call	ff8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x64>
    f648:	00010100 	call	1010 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x7c>
    f64c:	0000f85c 	xori	zero,zero,993
    f650:	0000f85c 	xori	zero,zero,993
    f654:	0000f85c 	xori	zero,zero,993
    f658:	00010174 	movhi	zero,1029
    f65c:	00010100 	call	1010 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x7c>
    f660:	00010198 	cmpnei	zero,zero,1030
    f664:	00010198 	cmpnei	zero,zero,1030
    f668:	00010120 	cmpeqi	zero,zero,1028
    f66c:	00010198 	cmpnei	zero,zero,1030
    f670:	00010134 	movhi	zero,1028
    f674:	0000ffc4 	movi	zero,1023
    f678:	0000f6b8 	rdprs	zero,zero,986
    f67c:	0000fffc 	xorhi	zero,zero,1023
    f680:	00010198 	cmpnei	zero,zero,1030
    f684:	00010008 	cmpgei	zero,zero,1024
    f688:	00010198 	cmpnei	zero,zero,1030
    f68c:	0001006c 	andhi	zero,zero,1025
    f690:	00010198 	cmpnei	zero,zero,1030
    f694:	00010198 	cmpnei	zero,zero,1030
    f698:	0001008c 	andi	zero,zero,1026
    f69c:	d8c03117 	ldw	r3,196(sp)
    f6a0:	d8802e15 	stw	r2,184(sp)
    f6a4:	00c7c83a 	sub	r3,zero,r3
    f6a8:	d8c03115 	stw	r3,196(sp)
    f6ac:	84000114 	ori	r16,r16,4
    f6b0:	bc400007 	ldb	r17,0(r23)
    f6b4:	003f9706 	br	f514 <__alt_data_end+0xfc00f514>
    f6b8:	00800c04 	movi	r2,48
    f6bc:	d8802705 	stb	r2,156(sp)
    f6c0:	00801e04 	movi	r2,120
    f6c4:	d8802745 	stb	r2,157(sp)
    f6c8:	d9002a17 	ldw	r4,168(sp)
    f6cc:	d8802e17 	ldw	r2,184(sp)
    f6d0:	d8002785 	stb	zero,158(sp)
    f6d4:	e011883a 	mov	r8,fp
    f6d8:	10c00104 	addi	r3,r2,4
    f6dc:	15000017 	ldw	r20,0(r2)
    f6e0:	002d883a 	mov	r22,zero
    f6e4:	80800094 	ori	r2,r16,2
    f6e8:	2002b616 	blt	r4,zero,101c4 <___svfprintf_internal_r+0xe04>
    f6ec:	00bfdfc4 	movi	r2,-129
    f6f0:	80a4703a 	and	r18,r16,r2
    f6f4:	d8c02e15 	stw	r3,184(sp)
    f6f8:	94800094 	ori	r18,r18,2
    f6fc:	a002a01e 	bne	r20,zero,10180 <___svfprintf_internal_r+0xdc0>
    f700:	014000f4 	movhi	r5,3
    f704:	296a0b04 	addi	r5,r5,-22484
    f708:	d9403a15 	stw	r5,232(sp)
    f70c:	04401e04 	movi	r17,120
    f710:	d8c02a17 	ldw	r3,168(sp)
    f714:	0039883a 	mov	fp,zero
    f718:	1801e626 	beq	r3,zero,feb4 <___svfprintf_internal_r+0xaf4>
    f71c:	0029883a 	mov	r20,zero
    f720:	002d883a 	mov	r22,zero
    f724:	00020506 	br	ff3c <___svfprintf_internal_r+0xb7c>
    f728:	d9402d17 	ldw	r5,180(sp)
    f72c:	d9801e04 	addi	r6,sp,120
    f730:	9809883a 	mov	r4,r19
    f734:	00183240 	call	18324 <__ssprint_r>
    f738:	1000081e 	bne	r2,zero,f75c <___svfprintf_internal_r+0x39c>
    f73c:	da000404 	addi	r8,sp,16
    f740:	003f6106 	br	f4c8 <__alt_data_end+0xfc00f4c8>
    f744:	d8802017 	ldw	r2,128(sp)
    f748:	10000426 	beq	r2,zero,f75c <___svfprintf_internal_r+0x39c>
    f74c:	d9402d17 	ldw	r5,180(sp)
    f750:	d9003917 	ldw	r4,228(sp)
    f754:	d9801e04 	addi	r6,sp,120
    f758:	00183240 	call	18324 <__ssprint_r>
    f75c:	d8802d17 	ldw	r2,180(sp)
    f760:	10c0030b 	ldhu	r3,12(r2)
    f764:	d8802f17 	ldw	r2,188(sp)
    f768:	18c0100c 	andi	r3,r3,64
    f76c:	1806251e 	bne	r3,zero,11004 <___svfprintf_internal_r+0x1c44>
    f770:	dfc04817 	ldw	ra,288(sp)
    f774:	df004717 	ldw	fp,284(sp)
    f778:	ddc04617 	ldw	r23,280(sp)
    f77c:	dd804517 	ldw	r22,276(sp)
    f780:	dd404417 	ldw	r21,272(sp)
    f784:	dd004317 	ldw	r20,268(sp)
    f788:	dcc04217 	ldw	r19,264(sp)
    f78c:	dc804117 	ldw	r18,260(sp)
    f790:	dc404017 	ldw	r17,256(sp)
    f794:	dc003f17 	ldw	r16,252(sp)
    f798:	dec04904 	addi	sp,sp,292
    f79c:	f800283a 	ret
    f7a0:	d9002e17 	ldw	r4,184(sp)
    f7a4:	d9402e17 	ldw	r5,184(sp)
    f7a8:	21000017 	ldw	r4,0(r4)
    f7ac:	28800104 	addi	r2,r5,4
    f7b0:	d9003115 	stw	r4,196(sp)
    f7b4:	203fb916 	blt	r4,zero,f69c <__alt_data_end+0xfc00f69c>
    f7b8:	d8802e15 	stw	r2,184(sp)
    f7bc:	bc400007 	ldb	r17,0(r23)
    f7c0:	003f5406 	br	f514 <__alt_data_end+0xfc00f514>
    f7c4:	bc400007 	ldb	r17,0(r23)
    f7c8:	01000a84 	movi	r4,42
    f7cc:	b8c00044 	addi	r3,r23,1
    f7d0:	89076926 	beq	r17,r4,11578 <___svfprintf_internal_r+0x21b8>
    f7d4:	8cbff404 	addi	r18,r17,-48
    f7d8:	b486b936 	bltu	r22,r18,112c0 <___svfprintf_internal_r+0x1f00>
    f7dc:	0009883a 	mov	r4,zero
    f7e0:	1823883a 	mov	r17,r3
    f7e4:	01400284 	movi	r5,10
    f7e8:	000ccac0 	call	ccac <__mulsi3>
    f7ec:	88c00007 	ldb	r3,0(r17)
    f7f0:	1489883a 	add	r4,r2,r18
    f7f4:	8dc00044 	addi	r23,r17,1
    f7f8:	1cbff404 	addi	r18,r3,-48
    f7fc:	b823883a 	mov	r17,r23
    f800:	b4bff82e 	bgeu	r22,r18,f7e4 <__alt_data_end+0xfc00f7e4>
    f804:	1823883a 	mov	r17,r3
    f808:	20060416 	blt	r4,zero,1101c <___svfprintf_internal_r+0x1c5c>
    f80c:	d9002a15 	stw	r4,168(sp)
    f810:	003f4106 	br	f518 <__alt_data_end+0xfc00f518>
    f814:	8cbff404 	addi	r18,r17,-48
    f818:	d8003115 	stw	zero,196(sp)
    f81c:	0009883a 	mov	r4,zero
    f820:	b823883a 	mov	r17,r23
    f824:	01400284 	movi	r5,10
    f828:	000ccac0 	call	ccac <__mulsi3>
    f82c:	88c00007 	ldb	r3,0(r17)
    f830:	9089883a 	add	r4,r18,r2
    f834:	bdc00044 	addi	r23,r23,1
    f838:	1cbff404 	addi	r18,r3,-48
    f83c:	b823883a 	mov	r17,r23
    f840:	b4bff82e 	bgeu	r22,r18,f824 <__alt_data_end+0xfc00f824>
    f844:	1823883a 	mov	r17,r3
    f848:	d9003115 	stw	r4,196(sp)
    f84c:	003f3206 	br	f518 <__alt_data_end+0xfc00f518>
    f850:	84002014 	ori	r16,r16,128
    f854:	bc400007 	ldb	r17,0(r23)
    f858:	003f2e06 	br	f514 <__alt_data_end+0xfc00f514>
    f85c:	8025883a 	mov	r18,r16
    f860:	dc002903 	ldbu	r16,164(sp)
    f864:	e011883a 	mov	r8,fp
    f868:	84003fcc 	andi	r16,r16,255
    f86c:	8007721e 	bne	r16,zero,11638 <___svfprintf_internal_r+0x2278>
    f870:	9080020c 	andi	r2,r18,8
    f874:	1004a526 	beq	r2,zero,10b0c <___svfprintf_internal_r+0x174c>
    f878:	d9002e17 	ldw	r4,184(sp)
    f87c:	d9402e17 	ldw	r5,184(sp)
    f880:	d8802e17 	ldw	r2,184(sp)
    f884:	21000017 	ldw	r4,0(r4)
    f888:	29400117 	ldw	r5,4(r5)
    f88c:	10800204 	addi	r2,r2,8
    f890:	d9003615 	stw	r4,216(sp)
    f894:	d9403715 	stw	r5,220(sp)
    f898:	d8802e15 	stw	r2,184(sp)
    f89c:	d9003617 	ldw	r4,216(sp)
    f8a0:	d9403717 	ldw	r5,220(sp)
    f8a4:	da003e15 	stw	r8,248(sp)
    f8a8:	04000044 	movi	r16,1
    f8ac:	00181740 	call	18174 <__fpclassifyd>
    f8b0:	da003e17 	ldw	r8,248(sp)
    f8b4:	1404731e 	bne	r2,r16,10a84 <___svfprintf_internal_r+0x16c4>
    f8b8:	d9003617 	ldw	r4,216(sp)
    f8bc:	d9403717 	ldw	r5,220(sp)
    f8c0:	000d883a 	mov	r6,zero
    f8c4:	000f883a 	mov	r7,zero
    f8c8:	001d8780 	call	1d878 <__ledf2>
    f8cc:	da003e17 	ldw	r8,248(sp)
    f8d0:	10061b16 	blt	r2,zero,11140 <___svfprintf_internal_r+0x1d80>
    f8d4:	df002783 	ldbu	fp,158(sp)
    f8d8:	008011c4 	movi	r2,71
    f8dc:	1445810e 	bge	r2,r17,10ee4 <___svfprintf_internal_r+0x1b24>
    f8e0:	040000f4 	movhi	r16,3
    f8e4:	842a0304 	addi	r16,r16,-22516
    f8e8:	00c000c4 	movi	r3,3
    f8ec:	00bfdfc4 	movi	r2,-129
    f8f0:	d8c02915 	stw	r3,164(sp)
    f8f4:	90a4703a 	and	r18,r18,r2
    f8f8:	d8c02b15 	stw	r3,172(sp)
    f8fc:	d8002a15 	stw	zero,168(sp)
    f900:	d8003215 	stw	zero,200(sp)
    f904:	00006c06 	br	fab8 <___svfprintf_internal_r+0x6f8>
    f908:	84000214 	ori	r16,r16,8
    f90c:	bc400007 	ldb	r17,0(r23)
    f910:	003f0006 	br	f514 <__alt_data_end+0xfc00f514>
    f914:	8025883a 	mov	r18,r16
    f918:	dc002903 	ldbu	r16,164(sp)
    f91c:	e011883a 	mov	r8,fp
    f920:	84003fcc 	andi	r16,r16,255
    f924:	80073f1e 	bne	r16,zero,11624 <___svfprintf_internal_r+0x2264>
    f928:	94800414 	ori	r18,r18,16
    f92c:	9080080c 	andi	r2,r18,32
    f930:	1003bb26 	beq	r2,zero,10820 <___svfprintf_internal_r+0x1460>
    f934:	d9002e17 	ldw	r4,184(sp)
    f938:	20800117 	ldw	r2,4(r4)
    f93c:	25000017 	ldw	r20,0(r4)
    f940:	21000204 	addi	r4,r4,8
    f944:	d9002e15 	stw	r4,184(sp)
    f948:	102d883a 	mov	r22,r2
    f94c:	1003bd16 	blt	r2,zero,10844 <___svfprintf_internal_r+0x1484>
    f950:	d9002a17 	ldw	r4,168(sp)
    f954:	df002783 	ldbu	fp,158(sp)
    f958:	2003d016 	blt	r4,zero,1089c <___svfprintf_internal_r+0x14dc>
    f95c:	00ffdfc4 	movi	r3,-129
    f960:	a584b03a 	or	r2,r20,r22
    f964:	90e4703a 	and	r18,r18,r3
    f968:	10015026 	beq	r2,zero,feac <___svfprintf_internal_r+0xaec>
    f96c:	b0037026 	beq	r22,zero,10730 <___svfprintf_internal_r+0x1370>
    f970:	dc402915 	stw	r17,164(sp)
    f974:	dc001e04 	addi	r16,sp,120
    f978:	b023883a 	mov	r17,r22
    f97c:	402d883a 	mov	r22,r8
    f980:	a009883a 	mov	r4,r20
    f984:	880b883a 	mov	r5,r17
    f988:	01800284 	movi	r6,10
    f98c:	000f883a 	mov	r7,zero
    f990:	001bed40 	call	1bed4 <__umoddi3>
    f994:	10800c04 	addi	r2,r2,48
    f998:	843fffc4 	addi	r16,r16,-1
    f99c:	a009883a 	mov	r4,r20
    f9a0:	880b883a 	mov	r5,r17
    f9a4:	80800005 	stb	r2,0(r16)
    f9a8:	01800284 	movi	r6,10
    f9ac:	000f883a 	mov	r7,zero
    f9b0:	001b8d80 	call	1b8d8 <__udivdi3>
    f9b4:	1029883a 	mov	r20,r2
    f9b8:	10c4b03a 	or	r2,r2,r3
    f9bc:	1823883a 	mov	r17,r3
    f9c0:	103fef1e 	bne	r2,zero,f980 <__alt_data_end+0xfc00f980>
    f9c4:	d8c02817 	ldw	r3,160(sp)
    f9c8:	dc402917 	ldw	r17,164(sp)
    f9cc:	b011883a 	mov	r8,r22
    f9d0:	1c07c83a 	sub	r3,r3,r16
    f9d4:	d8c02b15 	stw	r3,172(sp)
    f9d8:	00003106 	br	faa0 <___svfprintf_internal_r+0x6e0>
    f9dc:	8025883a 	mov	r18,r16
    f9e0:	dc002903 	ldbu	r16,164(sp)
    f9e4:	e011883a 	mov	r8,fp
    f9e8:	84003fcc 	andi	r16,r16,255
    f9ec:	80070a1e 	bne	r16,zero,11618 <___svfprintf_internal_r+0x2258>
    f9f0:	94800414 	ori	r18,r18,16
    f9f4:	9080080c 	andi	r2,r18,32
    f9f8:	1002f626 	beq	r2,zero,105d4 <___svfprintf_internal_r+0x1214>
    f9fc:	d9002e17 	ldw	r4,184(sp)
    fa00:	d9402a17 	ldw	r5,168(sp)
    fa04:	d8002785 	stb	zero,158(sp)
    fa08:	20800204 	addi	r2,r4,8
    fa0c:	25000017 	ldw	r20,0(r4)
    fa10:	25800117 	ldw	r22,4(r4)
    fa14:	28043716 	blt	r5,zero,10af4 <___svfprintf_internal_r+0x1734>
    fa18:	013fdfc4 	movi	r4,-129
    fa1c:	a586b03a 	or	r3,r20,r22
    fa20:	d8802e15 	stw	r2,184(sp)
    fa24:	9124703a 	and	r18,r18,r4
    fa28:	1802f71e 	bne	r3,zero,10608 <___svfprintf_internal_r+0x1248>
    fa2c:	d9402a17 	ldw	r5,168(sp)
    fa30:	0039883a 	mov	fp,zero
    fa34:	2806df26 	beq	r5,zero,115b4 <___svfprintf_internal_r+0x21f4>
    fa38:	0029883a 	mov	r20,zero
    fa3c:	002d883a 	mov	r22,zero
    fa40:	dc001e04 	addi	r16,sp,120
    fa44:	a006d0fa 	srli	r3,r20,3
    fa48:	b008977a 	slli	r4,r22,29
    fa4c:	b02cd0fa 	srli	r22,r22,3
    fa50:	a50001cc 	andi	r20,r20,7
    fa54:	a0800c04 	addi	r2,r20,48
    fa58:	843fffc4 	addi	r16,r16,-1
    fa5c:	20e8b03a 	or	r20,r4,r3
    fa60:	80800005 	stb	r2,0(r16)
    fa64:	a586b03a 	or	r3,r20,r22
    fa68:	183ff61e 	bne	r3,zero,fa44 <__alt_data_end+0xfc00fa44>
    fa6c:	90c0004c 	andi	r3,r18,1
    fa70:	18013f26 	beq	r3,zero,ff70 <___svfprintf_internal_r+0xbb0>
    fa74:	10803fcc 	andi	r2,r2,255
    fa78:	1080201c 	xori	r2,r2,128
    fa7c:	10bfe004 	addi	r2,r2,-128
    fa80:	00c00c04 	movi	r3,48
    fa84:	10c13a26 	beq	r2,r3,ff70 <___svfprintf_internal_r+0xbb0>
    fa88:	80ffffc5 	stb	r3,-1(r16)
    fa8c:	d8c02817 	ldw	r3,160(sp)
    fa90:	80bfffc4 	addi	r2,r16,-1
    fa94:	1021883a 	mov	r16,r2
    fa98:	1887c83a 	sub	r3,r3,r2
    fa9c:	d8c02b15 	stw	r3,172(sp)
    faa0:	d8802b17 	ldw	r2,172(sp)
    faa4:	d9002a17 	ldw	r4,168(sp)
    faa8:	1100010e 	bge	r2,r4,fab0 <___svfprintf_internal_r+0x6f0>
    faac:	2005883a 	mov	r2,r4
    fab0:	d8802915 	stw	r2,164(sp)
    fab4:	d8003215 	stw	zero,200(sp)
    fab8:	e7003fcc 	andi	fp,fp,255
    fabc:	e700201c 	xori	fp,fp,128
    fac0:	e73fe004 	addi	fp,fp,-128
    fac4:	e0000326 	beq	fp,zero,fad4 <___svfprintf_internal_r+0x714>
    fac8:	d8c02917 	ldw	r3,164(sp)
    facc:	18c00044 	addi	r3,r3,1
    fad0:	d8c02915 	stw	r3,164(sp)
    fad4:	90c0008c 	andi	r3,r18,2
    fad8:	d8c02c15 	stw	r3,176(sp)
    fadc:	18000326 	beq	r3,zero,faec <___svfprintf_internal_r+0x72c>
    fae0:	d8c02917 	ldw	r3,164(sp)
    fae4:	18c00084 	addi	r3,r3,2
    fae8:	d8c02915 	stw	r3,164(sp)
    faec:	90c0210c 	andi	r3,r18,132
    faf0:	d8c03015 	stw	r3,192(sp)
    faf4:	1801c31e 	bne	r3,zero,10204 <___svfprintf_internal_r+0xe44>
    faf8:	d9003117 	ldw	r4,196(sp)
    fafc:	d8c02917 	ldw	r3,164(sp)
    fb00:	20e9c83a 	sub	r20,r4,r3
    fb04:	0501bf0e 	bge	zero,r20,10204 <___svfprintf_internal_r+0xe44>
    fb08:	02400404 	movi	r9,16
    fb0c:	d8c02017 	ldw	r3,128(sp)
    fb10:	d8801f17 	ldw	r2,124(sp)
    fb14:	4d053d0e 	bge	r9,r20,1100c <___svfprintf_internal_r+0x1c4c>
    fb18:	014000f4 	movhi	r5,3
    fb1c:	296a1684 	addi	r5,r5,-22438
    fb20:	dc403c15 	stw	r17,240(sp)
    fb24:	d9403515 	stw	r5,212(sp)
    fb28:	a023883a 	mov	r17,r20
    fb2c:	482d883a 	mov	r22,r9
    fb30:	9029883a 	mov	r20,r18
    fb34:	070001c4 	movi	fp,7
    fb38:	8025883a 	mov	r18,r16
    fb3c:	dc002d17 	ldw	r16,180(sp)
    fb40:	00000306 	br	fb50 <___svfprintf_internal_r+0x790>
    fb44:	8c7ffc04 	addi	r17,r17,-16
    fb48:	42000204 	addi	r8,r8,8
    fb4c:	b440130e 	bge	r22,r17,fb9c <___svfprintf_internal_r+0x7dc>
    fb50:	010000f4 	movhi	r4,3
    fb54:	18c00404 	addi	r3,r3,16
    fb58:	10800044 	addi	r2,r2,1
    fb5c:	212a1684 	addi	r4,r4,-22438
    fb60:	41000015 	stw	r4,0(r8)
    fb64:	45800115 	stw	r22,4(r8)
    fb68:	d8c02015 	stw	r3,128(sp)
    fb6c:	d8801f15 	stw	r2,124(sp)
    fb70:	e0bff40e 	bge	fp,r2,fb44 <__alt_data_end+0xfc00fb44>
    fb74:	d9801e04 	addi	r6,sp,120
    fb78:	800b883a 	mov	r5,r16
    fb7c:	9809883a 	mov	r4,r19
    fb80:	00183240 	call	18324 <__ssprint_r>
    fb84:	103ef51e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
    fb88:	8c7ffc04 	addi	r17,r17,-16
    fb8c:	d8c02017 	ldw	r3,128(sp)
    fb90:	d8801f17 	ldw	r2,124(sp)
    fb94:	da000404 	addi	r8,sp,16
    fb98:	b47fed16 	blt	r22,r17,fb50 <__alt_data_end+0xfc00fb50>
    fb9c:	9021883a 	mov	r16,r18
    fba0:	a025883a 	mov	r18,r20
    fba4:	8829883a 	mov	r20,r17
    fba8:	dc403c17 	ldw	r17,240(sp)
    fbac:	d9403517 	ldw	r5,212(sp)
    fbb0:	a0c7883a 	add	r3,r20,r3
    fbb4:	10800044 	addi	r2,r2,1
    fbb8:	41400015 	stw	r5,0(r8)
    fbbc:	45000115 	stw	r20,4(r8)
    fbc0:	d8c02015 	stw	r3,128(sp)
    fbc4:	d8801f15 	stw	r2,124(sp)
    fbc8:	010001c4 	movi	r4,7
    fbcc:	2082c116 	blt	r4,r2,106d4 <___svfprintf_internal_r+0x1314>
    fbd0:	df002787 	ldb	fp,158(sp)
    fbd4:	42000204 	addi	r8,r8,8
    fbd8:	e0000c26 	beq	fp,zero,fc0c <___svfprintf_internal_r+0x84c>
    fbdc:	d8801f17 	ldw	r2,124(sp)
    fbe0:	d9002784 	addi	r4,sp,158
    fbe4:	18c00044 	addi	r3,r3,1
    fbe8:	10800044 	addi	r2,r2,1
    fbec:	41000015 	stw	r4,0(r8)
    fbf0:	01000044 	movi	r4,1
    fbf4:	41000115 	stw	r4,4(r8)
    fbf8:	d8c02015 	stw	r3,128(sp)
    fbfc:	d8801f15 	stw	r2,124(sp)
    fc00:	010001c4 	movi	r4,7
    fc04:	20825a16 	blt	r4,r2,10570 <___svfprintf_internal_r+0x11b0>
    fc08:	42000204 	addi	r8,r8,8
    fc0c:	d8802c17 	ldw	r2,176(sp)
    fc10:	10000c26 	beq	r2,zero,fc44 <___svfprintf_internal_r+0x884>
    fc14:	d8801f17 	ldw	r2,124(sp)
    fc18:	d9002704 	addi	r4,sp,156
    fc1c:	18c00084 	addi	r3,r3,2
    fc20:	10800044 	addi	r2,r2,1
    fc24:	41000015 	stw	r4,0(r8)
    fc28:	01000084 	movi	r4,2
    fc2c:	41000115 	stw	r4,4(r8)
    fc30:	d8c02015 	stw	r3,128(sp)
    fc34:	d8801f15 	stw	r2,124(sp)
    fc38:	010001c4 	movi	r4,7
    fc3c:	20825416 	blt	r4,r2,10590 <___svfprintf_internal_r+0x11d0>
    fc40:	42000204 	addi	r8,r8,8
    fc44:	d9003017 	ldw	r4,192(sp)
    fc48:	00802004 	movi	r2,128
    fc4c:	2081b926 	beq	r4,r2,10334 <___svfprintf_internal_r+0xf74>
    fc50:	d9402a17 	ldw	r5,168(sp)
    fc54:	d8802b17 	ldw	r2,172(sp)
    fc58:	28adc83a 	sub	r22,r5,r2
    fc5c:	05802f0e 	bge	zero,r22,fd1c <___svfprintf_internal_r+0x95c>
    fc60:	07000404 	movi	fp,16
    fc64:	d8801f17 	ldw	r2,124(sp)
    fc68:	e583e20e 	bge	fp,r22,10bf4 <___svfprintf_internal_r+0x1834>
    fc6c:	014000f4 	movhi	r5,3
    fc70:	296a1284 	addi	r5,r5,-22454
    fc74:	dc402a15 	stw	r17,168(sp)
    fc78:	d9402c15 	stw	r5,176(sp)
    fc7c:	b023883a 	mov	r17,r22
    fc80:	050001c4 	movi	r20,7
    fc84:	902d883a 	mov	r22,r18
    fc88:	8025883a 	mov	r18,r16
    fc8c:	dc002d17 	ldw	r16,180(sp)
    fc90:	00000306 	br	fca0 <___svfprintf_internal_r+0x8e0>
    fc94:	8c7ffc04 	addi	r17,r17,-16
    fc98:	42000204 	addi	r8,r8,8
    fc9c:	e440110e 	bge	fp,r17,fce4 <___svfprintf_internal_r+0x924>
    fca0:	18c00404 	addi	r3,r3,16
    fca4:	10800044 	addi	r2,r2,1
    fca8:	45400015 	stw	r21,0(r8)
    fcac:	47000115 	stw	fp,4(r8)
    fcb0:	d8c02015 	stw	r3,128(sp)
    fcb4:	d8801f15 	stw	r2,124(sp)
    fcb8:	a0bff60e 	bge	r20,r2,fc94 <__alt_data_end+0xfc00fc94>
    fcbc:	d9801e04 	addi	r6,sp,120
    fcc0:	800b883a 	mov	r5,r16
    fcc4:	9809883a 	mov	r4,r19
    fcc8:	00183240 	call	18324 <__ssprint_r>
    fccc:	103ea31e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
    fcd0:	8c7ffc04 	addi	r17,r17,-16
    fcd4:	d8c02017 	ldw	r3,128(sp)
    fcd8:	d8801f17 	ldw	r2,124(sp)
    fcdc:	da000404 	addi	r8,sp,16
    fce0:	e47fef16 	blt	fp,r17,fca0 <__alt_data_end+0xfc00fca0>
    fce4:	9021883a 	mov	r16,r18
    fce8:	b025883a 	mov	r18,r22
    fcec:	882d883a 	mov	r22,r17
    fcf0:	dc402a17 	ldw	r17,168(sp)
    fcf4:	d9002c17 	ldw	r4,176(sp)
    fcf8:	1d87883a 	add	r3,r3,r22
    fcfc:	10800044 	addi	r2,r2,1
    fd00:	41000015 	stw	r4,0(r8)
    fd04:	45800115 	stw	r22,4(r8)
    fd08:	d8c02015 	stw	r3,128(sp)
    fd0c:	d8801f15 	stw	r2,124(sp)
    fd10:	010001c4 	movi	r4,7
    fd14:	20820e16 	blt	r4,r2,10550 <___svfprintf_internal_r+0x1190>
    fd18:	42000204 	addi	r8,r8,8
    fd1c:	9080400c 	andi	r2,r18,256
    fd20:	10013a1e 	bne	r2,zero,1020c <___svfprintf_internal_r+0xe4c>
    fd24:	d9402b17 	ldw	r5,172(sp)
    fd28:	d8801f17 	ldw	r2,124(sp)
    fd2c:	44000015 	stw	r16,0(r8)
    fd30:	1947883a 	add	r3,r3,r5
    fd34:	10800044 	addi	r2,r2,1
    fd38:	41400115 	stw	r5,4(r8)
    fd3c:	d8c02015 	stw	r3,128(sp)
    fd40:	d8801f15 	stw	r2,124(sp)
    fd44:	010001c4 	movi	r4,7
    fd48:	2081f316 	blt	r4,r2,10518 <___svfprintf_internal_r+0x1158>
    fd4c:	42000204 	addi	r8,r8,8
    fd50:	9480010c 	andi	r18,r18,4
    fd54:	90003226 	beq	r18,zero,fe20 <___svfprintf_internal_r+0xa60>
    fd58:	d9403117 	ldw	r5,196(sp)
    fd5c:	d8802917 	ldw	r2,164(sp)
    fd60:	28a1c83a 	sub	r16,r5,r2
    fd64:	04002e0e 	bge	zero,r16,fe20 <___svfprintf_internal_r+0xa60>
    fd68:	04400404 	movi	r17,16
    fd6c:	d8801f17 	ldw	r2,124(sp)
    fd70:	8c04db0e 	bge	r17,r16,110e0 <___svfprintf_internal_r+0x1d20>
    fd74:	014000f4 	movhi	r5,3
    fd78:	296a1684 	addi	r5,r5,-22438
    fd7c:	d9403515 	stw	r5,212(sp)
    fd80:	048001c4 	movi	r18,7
    fd84:	dd002d17 	ldw	r20,180(sp)
    fd88:	00000306 	br	fd98 <___svfprintf_internal_r+0x9d8>
    fd8c:	843ffc04 	addi	r16,r16,-16
    fd90:	42000204 	addi	r8,r8,8
    fd94:	8c00130e 	bge	r17,r16,fde4 <___svfprintf_internal_r+0xa24>
    fd98:	010000f4 	movhi	r4,3
    fd9c:	18c00404 	addi	r3,r3,16
    fda0:	10800044 	addi	r2,r2,1
    fda4:	212a1684 	addi	r4,r4,-22438
    fda8:	41000015 	stw	r4,0(r8)
    fdac:	44400115 	stw	r17,4(r8)
    fdb0:	d8c02015 	stw	r3,128(sp)
    fdb4:	d8801f15 	stw	r2,124(sp)
    fdb8:	90bff40e 	bge	r18,r2,fd8c <__alt_data_end+0xfc00fd8c>
    fdbc:	d9801e04 	addi	r6,sp,120
    fdc0:	a00b883a 	mov	r5,r20
    fdc4:	9809883a 	mov	r4,r19
    fdc8:	00183240 	call	18324 <__ssprint_r>
    fdcc:	103e631e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
    fdd0:	843ffc04 	addi	r16,r16,-16
    fdd4:	d8c02017 	ldw	r3,128(sp)
    fdd8:	d8801f17 	ldw	r2,124(sp)
    fddc:	da000404 	addi	r8,sp,16
    fde0:	8c3fed16 	blt	r17,r16,fd98 <__alt_data_end+0xfc00fd98>
    fde4:	d9403517 	ldw	r5,212(sp)
    fde8:	1c07883a 	add	r3,r3,r16
    fdec:	10800044 	addi	r2,r2,1
    fdf0:	41400015 	stw	r5,0(r8)
    fdf4:	44000115 	stw	r16,4(r8)
    fdf8:	d8c02015 	stw	r3,128(sp)
    fdfc:	d8801f15 	stw	r2,124(sp)
    fe00:	010001c4 	movi	r4,7
    fe04:	2080060e 	bge	r4,r2,fe20 <___svfprintf_internal_r+0xa60>
    fe08:	d9402d17 	ldw	r5,180(sp)
    fe0c:	d9801e04 	addi	r6,sp,120
    fe10:	9809883a 	mov	r4,r19
    fe14:	00183240 	call	18324 <__ssprint_r>
    fe18:	103e501e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
    fe1c:	d8c02017 	ldw	r3,128(sp)
    fe20:	d8803117 	ldw	r2,196(sp)
    fe24:	d9002917 	ldw	r4,164(sp)
    fe28:	1100010e 	bge	r2,r4,fe30 <___svfprintf_internal_r+0xa70>
    fe2c:	2005883a 	mov	r2,r4
    fe30:	d9402f17 	ldw	r5,188(sp)
    fe34:	288b883a 	add	r5,r5,r2
    fe38:	d9402f15 	stw	r5,188(sp)
    fe3c:	1801be1e 	bne	r3,zero,10538 <___svfprintf_internal_r+0x1178>
    fe40:	b8800007 	ldb	r2,0(r23)
    fe44:	d8001f15 	stw	zero,124(sp)
    fe48:	da000404 	addi	r8,sp,16
    fe4c:	103d891e 	bne	r2,zero,f474 <__alt_data_end+0xfc00f474>
    fe50:	b823883a 	mov	r17,r23
    fe54:	003d9f06 	br	f4d4 <__alt_data_end+0xfc00f4d4>
    fe58:	8025883a 	mov	r18,r16
    fe5c:	dc002903 	ldbu	r16,164(sp)
    fe60:	e011883a 	mov	r8,fp
    fe64:	84003fcc 	andi	r16,r16,255
    fe68:	8005e61e 	bne	r16,zero,11604 <___svfprintf_internal_r+0x2244>
    fe6c:	94800414 	ori	r18,r18,16
    fe70:	9080080c 	andi	r2,r18,32
    fe74:	10022026 	beq	r2,zero,106f8 <___svfprintf_internal_r+0x1338>
    fe78:	d9002e17 	ldw	r4,184(sp)
    fe7c:	d9402a17 	ldw	r5,168(sp)
    fe80:	d8002785 	stb	zero,158(sp)
    fe84:	20c00204 	addi	r3,r4,8
    fe88:	25000017 	ldw	r20,0(r4)
    fe8c:	25800117 	ldw	r22,4(r4)
    fe90:	2803ad16 	blt	r5,zero,10d48 <___svfprintf_internal_r+0x1988>
    fe94:	013fdfc4 	movi	r4,-129
    fe98:	a584b03a 	or	r2,r20,r22
    fe9c:	d8c02e15 	stw	r3,184(sp)
    fea0:	9124703a 	and	r18,r18,r4
    fea4:	0039883a 	mov	fp,zero
    fea8:	103eb01e 	bne	r2,zero,f96c <__alt_data_end+0xfc00f96c>
    feac:	d8802a17 	ldw	r2,168(sp)
    feb0:	1002e71e 	bne	r2,zero,10a50 <___svfprintf_internal_r+0x1690>
    feb4:	d8002a15 	stw	zero,168(sp)
    feb8:	d8002b15 	stw	zero,172(sp)
    febc:	dc001e04 	addi	r16,sp,120
    fec0:	003ef706 	br	faa0 <__alt_data_end+0xfc00faa0>
    fec4:	8025883a 	mov	r18,r16
    fec8:	dc002903 	ldbu	r16,164(sp)
    fecc:	e011883a 	mov	r8,fp
    fed0:	84003fcc 	andi	r16,r16,255
    fed4:	8005c81e 	bne	r16,zero,115f8 <___svfprintf_internal_r+0x2238>
    fed8:	010000f4 	movhi	r4,3
    fedc:	212a0604 	addi	r4,r4,-22504
    fee0:	d9003a15 	stw	r4,232(sp)
    fee4:	9080080c 	andi	r2,r18,32
    fee8:	10007226 	beq	r2,zero,100b4 <___svfprintf_internal_r+0xcf4>
    feec:	d9402e17 	ldw	r5,184(sp)
    fef0:	2d000017 	ldw	r20,0(r5)
    fef4:	2d800117 	ldw	r22,4(r5)
    fef8:	29400204 	addi	r5,r5,8
    fefc:	d9402e15 	stw	r5,184(sp)
    ff00:	9080004c 	andi	r2,r18,1
    ff04:	1001aa26 	beq	r2,zero,105b0 <___svfprintf_internal_r+0x11f0>
    ff08:	a584b03a 	or	r2,r20,r22
    ff0c:	10032526 	beq	r2,zero,10ba4 <___svfprintf_internal_r+0x17e4>
    ff10:	d8c02a17 	ldw	r3,168(sp)
    ff14:	00800c04 	movi	r2,48
    ff18:	d8802705 	stb	r2,156(sp)
    ff1c:	dc402745 	stb	r17,157(sp)
    ff20:	d8002785 	stb	zero,158(sp)
    ff24:	90800094 	ori	r2,r18,2
    ff28:	1804a316 	blt	r3,zero,111b8 <___svfprintf_internal_r+0x1df8>
    ff2c:	00bfdfc4 	movi	r2,-129
    ff30:	90a4703a 	and	r18,r18,r2
    ff34:	94800094 	ori	r18,r18,2
    ff38:	0039883a 	mov	fp,zero
    ff3c:	d9003a17 	ldw	r4,232(sp)
    ff40:	dc001e04 	addi	r16,sp,120
    ff44:	a08003cc 	andi	r2,r20,15
    ff48:	b006973a 	slli	r3,r22,28
    ff4c:	2085883a 	add	r2,r4,r2
    ff50:	a028d13a 	srli	r20,r20,4
    ff54:	10800003 	ldbu	r2,0(r2)
    ff58:	b02cd13a 	srli	r22,r22,4
    ff5c:	843fffc4 	addi	r16,r16,-1
    ff60:	1d28b03a 	or	r20,r3,r20
    ff64:	80800005 	stb	r2,0(r16)
    ff68:	a584b03a 	or	r2,r20,r22
    ff6c:	103ff51e 	bne	r2,zero,ff44 <__alt_data_end+0xfc00ff44>
    ff70:	d8c02817 	ldw	r3,160(sp)
    ff74:	1c07c83a 	sub	r3,r3,r16
    ff78:	d8c02b15 	stw	r3,172(sp)
    ff7c:	003ec806 	br	faa0 <__alt_data_end+0xfc00faa0>
    ff80:	d8c02e17 	ldw	r3,184(sp)
    ff84:	d9002e17 	ldw	r4,184(sp)
    ff88:	8025883a 	mov	r18,r16
    ff8c:	18800017 	ldw	r2,0(r3)
    ff90:	21000104 	addi	r4,r4,4
    ff94:	00c00044 	movi	r3,1
    ff98:	e011883a 	mov	r8,fp
    ff9c:	d8c02915 	stw	r3,164(sp)
    ffa0:	d8002785 	stb	zero,158(sp)
    ffa4:	d8801405 	stb	r2,80(sp)
    ffa8:	d9002e15 	stw	r4,184(sp)
    ffac:	d8c02b15 	stw	r3,172(sp)
    ffb0:	d8002a15 	stw	zero,168(sp)
    ffb4:	d8003215 	stw	zero,200(sp)
    ffb8:	dc001404 	addi	r16,sp,80
    ffbc:	0039883a 	mov	fp,zero
    ffc0:	003ec406 	br	fad4 <__alt_data_end+0xfc00fad4>
    ffc4:	8025883a 	mov	r18,r16
    ffc8:	dc002903 	ldbu	r16,164(sp)
    ffcc:	e011883a 	mov	r8,fp
    ffd0:	84003fcc 	andi	r16,r16,255
    ffd4:	803e8726 	beq	r16,zero,f9f4 <__alt_data_end+0xfc00f9f4>
    ffd8:	d8c02b03 	ldbu	r3,172(sp)
    ffdc:	d8c02785 	stb	r3,158(sp)
    ffe0:	003e8406 	br	f9f4 <__alt_data_end+0xfc00f9f4>
    ffe4:	00c00044 	movi	r3,1
    ffe8:	d8c02905 	stb	r3,164(sp)
    ffec:	00c00ac4 	movi	r3,43
    fff0:	d8c02b05 	stb	r3,172(sp)
    fff4:	bc400007 	ldb	r17,0(r23)
    fff8:	003d4606 	br	f514 <__alt_data_end+0xfc00f514>
    fffc:	84000814 	ori	r16,r16,32
   10000:	bc400007 	ldb	r17,0(r23)
   10004:	003d4306 	br	f514 <__alt_data_end+0xfc00f514>
   10008:	d8802e17 	ldw	r2,184(sp)
   1000c:	8025883a 	mov	r18,r16
   10010:	d8002785 	stb	zero,158(sp)
   10014:	14000017 	ldw	r16,0(r2)
   10018:	e011883a 	mov	r8,fp
   1001c:	15000104 	addi	r20,r2,4
   10020:	80042126 	beq	r16,zero,110a8 <___svfprintf_internal_r+0x1ce8>
   10024:	d8c02a17 	ldw	r3,168(sp)
   10028:	1803ee16 	blt	r3,zero,10fe4 <___svfprintf_internal_r+0x1c24>
   1002c:	180d883a 	mov	r6,r3
   10030:	000b883a 	mov	r5,zero
   10034:	8009883a 	mov	r4,r16
   10038:	df003e15 	stw	fp,248(sp)
   1003c:	00167b00 	call	167b0 <memchr>
   10040:	da003e17 	ldw	r8,248(sp)
   10044:	10046a26 	beq	r2,zero,111f0 <___svfprintf_internal_r+0x1e30>
   10048:	1405c83a 	sub	r2,r2,r16
   1004c:	d8802b15 	stw	r2,172(sp)
   10050:	1003ea16 	blt	r2,zero,10ffc <___svfprintf_internal_r+0x1c3c>
   10054:	df002783 	ldbu	fp,158(sp)
   10058:	d8802915 	stw	r2,164(sp)
   1005c:	dd002e15 	stw	r20,184(sp)
   10060:	d8002a15 	stw	zero,168(sp)
   10064:	d8003215 	stw	zero,200(sp)
   10068:	003e9306 	br	fab8 <__alt_data_end+0xfc00fab8>
   1006c:	8025883a 	mov	r18,r16
   10070:	dc002903 	ldbu	r16,164(sp)
   10074:	e011883a 	mov	r8,fp
   10078:	84003fcc 	andi	r16,r16,255
   1007c:	803f7c26 	beq	r16,zero,fe70 <__alt_data_end+0xfc00fe70>
   10080:	d8c02b03 	ldbu	r3,172(sp)
   10084:	d8c02785 	stb	r3,158(sp)
   10088:	003f7906 	br	fe70 <__alt_data_end+0xfc00fe70>
   1008c:	8025883a 	mov	r18,r16
   10090:	dc002903 	ldbu	r16,164(sp)
   10094:	e011883a 	mov	r8,fp
   10098:	84003fcc 	andi	r16,r16,255
   1009c:	8005741e 	bne	r16,zero,11670 <___svfprintf_internal_r+0x22b0>
   100a0:	010000f4 	movhi	r4,3
   100a4:	212a0b04 	addi	r4,r4,-22484
   100a8:	d9003a15 	stw	r4,232(sp)
   100ac:	9080080c 	andi	r2,r18,32
   100b0:	103f8e1e 	bne	r2,zero,feec <__alt_data_end+0xfc00feec>
   100b4:	9080040c 	andi	r2,r18,16
   100b8:	1002a726 	beq	r2,zero,10b58 <___svfprintf_internal_r+0x1798>
   100bc:	d8802e17 	ldw	r2,184(sp)
   100c0:	002d883a 	mov	r22,zero
   100c4:	15000017 	ldw	r20,0(r2)
   100c8:	10800104 	addi	r2,r2,4
   100cc:	d8802e15 	stw	r2,184(sp)
   100d0:	003f8b06 	br	ff00 <__alt_data_end+0xfc00ff00>
   100d4:	84000054 	ori	r16,r16,1
   100d8:	bc400007 	ldb	r17,0(r23)
   100dc:	003d0d06 	br	f514 <__alt_data_end+0xfc00f514>
   100e0:	d8802b07 	ldb	r2,172(sp)
   100e4:	1002a41e 	bne	r2,zero,10b78 <___svfprintf_internal_r+0x17b8>
   100e8:	00c00044 	movi	r3,1
   100ec:	d8c02905 	stb	r3,164(sp)
   100f0:	00c00804 	movi	r3,32
   100f4:	d8c02b05 	stb	r3,172(sp)
   100f8:	bc400007 	ldb	r17,0(r23)
   100fc:	003d0506 	br	f514 <__alt_data_end+0xfc00f514>
   10100:	8025883a 	mov	r18,r16
   10104:	dc002903 	ldbu	r16,164(sp)
   10108:	e011883a 	mov	r8,fp
   1010c:	84003fcc 	andi	r16,r16,255
   10110:	803e0626 	beq	r16,zero,f92c <__alt_data_end+0xfc00f92c>
   10114:	d8c02b03 	ldbu	r3,172(sp)
   10118:	d8c02785 	stb	r3,158(sp)
   1011c:	003e0306 	br	f92c <__alt_data_end+0xfc00f92c>
   10120:	bc400007 	ldb	r17,0(r23)
   10124:	00801b04 	movi	r2,108
   10128:	88830a26 	beq	r17,r2,10d54 <___svfprintf_internal_r+0x1994>
   1012c:	84000414 	ori	r16,r16,16
   10130:	003cf806 	br	f514 <__alt_data_end+0xfc00f514>
   10134:	8025883a 	mov	r18,r16
   10138:	dc002903 	ldbu	r16,164(sp)
   1013c:	e011883a 	mov	r8,fp
   10140:	84003fcc 	andi	r16,r16,255
   10144:	8005471e 	bne	r16,zero,11664 <___svfprintf_internal_r+0x22a4>
   10148:	9080080c 	andi	r2,r18,32
   1014c:	10028c26 	beq	r2,zero,10b80 <___svfprintf_internal_r+0x17c0>
   10150:	d9002e17 	ldw	r4,184(sp)
   10154:	d9402f17 	ldw	r5,188(sp)
   10158:	20800017 	ldw	r2,0(r4)
   1015c:	2807d7fa 	srai	r3,r5,31
   10160:	21000104 	addi	r4,r4,4
   10164:	d9002e15 	stw	r4,184(sp)
   10168:	11400015 	stw	r5,0(r2)
   1016c:	10c00115 	stw	r3,4(r2)
   10170:	003cbe06 	br	f46c <__alt_data_end+0xfc00f46c>
   10174:	84001014 	ori	r16,r16,64
   10178:	bc400007 	ldb	r17,0(r23)
   1017c:	003ce506 	br	f514 <__alt_data_end+0xfc00f514>
   10180:	010000f4 	movhi	r4,3
   10184:	212a0b04 	addi	r4,r4,-22484
   10188:	0039883a 	mov	fp,zero
   1018c:	d9003a15 	stw	r4,232(sp)
   10190:	04401e04 	movi	r17,120
   10194:	003f6906 	br	ff3c <__alt_data_end+0xfc00ff3c>
   10198:	8025883a 	mov	r18,r16
   1019c:	dc002903 	ldbu	r16,164(sp)
   101a0:	e011883a 	mov	r8,fp
   101a4:	84003fcc 	andi	r16,r16,255
   101a8:	8005261e 	bne	r16,zero,11644 <___svfprintf_internal_r+0x2284>
   101ac:	883d6526 	beq	r17,zero,f744 <__alt_data_end+0xfc00f744>
   101b0:	00c00044 	movi	r3,1
   101b4:	d8c02915 	stw	r3,164(sp)
   101b8:	dc401405 	stb	r17,80(sp)
   101bc:	d8002785 	stb	zero,158(sp)
   101c0:	003f7a06 	br	ffac <__alt_data_end+0xfc00ffac>
   101c4:	010000f4 	movhi	r4,3
   101c8:	212a0b04 	addi	r4,r4,-22484
   101cc:	d9003a15 	stw	r4,232(sp)
   101d0:	d8c02e15 	stw	r3,184(sp)
   101d4:	1025883a 	mov	r18,r2
   101d8:	04401e04 	movi	r17,120
   101dc:	a584b03a 	or	r2,r20,r22
   101e0:	1000fa1e 	bne	r2,zero,105cc <___svfprintf_internal_r+0x120c>
   101e4:	0039883a 	mov	fp,zero
   101e8:	00800084 	movi	r2,2
   101ec:	10803fcc 	andi	r2,r2,255
   101f0:	00c00044 	movi	r3,1
   101f4:	10c21626 	beq	r2,r3,10a50 <___svfprintf_internal_r+0x1690>
   101f8:	00c00084 	movi	r3,2
   101fc:	10fe0e1e 	bne	r2,r3,fa38 <__alt_data_end+0xfc00fa38>
   10200:	003d4606 	br	f71c <__alt_data_end+0xfc00f71c>
   10204:	d8c02017 	ldw	r3,128(sp)
   10208:	003e7306 	br	fbd8 <__alt_data_end+0xfc00fbd8>
   1020c:	00801944 	movi	r2,101
   10210:	14407c0e 	bge	r2,r17,10404 <___svfprintf_internal_r+0x1044>
   10214:	d9003617 	ldw	r4,216(sp)
   10218:	d9403717 	ldw	r5,220(sp)
   1021c:	000d883a 	mov	r6,zero
   10220:	000f883a 	mov	r7,zero
   10224:	d8c03d15 	stw	r3,244(sp)
   10228:	da003e15 	stw	r8,248(sp)
   1022c:	001d7140 	call	1d714 <__eqdf2>
   10230:	d8c03d17 	ldw	r3,244(sp)
   10234:	da003e17 	ldw	r8,248(sp)
   10238:	1000f51e 	bne	r2,zero,10610 <___svfprintf_internal_r+0x1250>
   1023c:	d8801f17 	ldw	r2,124(sp)
   10240:	010000f4 	movhi	r4,3
   10244:	212a1204 	addi	r4,r4,-22456
   10248:	18c00044 	addi	r3,r3,1
   1024c:	10800044 	addi	r2,r2,1
   10250:	41000015 	stw	r4,0(r8)
   10254:	01000044 	movi	r4,1
   10258:	41000115 	stw	r4,4(r8)
   1025c:	d8c02015 	stw	r3,128(sp)
   10260:	d8801f15 	stw	r2,124(sp)
   10264:	010001c4 	movi	r4,7
   10268:	20826616 	blt	r4,r2,10c04 <___svfprintf_internal_r+0x1844>
   1026c:	42000204 	addi	r8,r8,8
   10270:	d8802617 	ldw	r2,152(sp)
   10274:	d9403317 	ldw	r5,204(sp)
   10278:	11400216 	blt	r2,r5,10284 <___svfprintf_internal_r+0xec4>
   1027c:	9080004c 	andi	r2,r18,1
   10280:	103eb326 	beq	r2,zero,fd50 <__alt_data_end+0xfc00fd50>
   10284:	d8803817 	ldw	r2,224(sp)
   10288:	d9003417 	ldw	r4,208(sp)
   1028c:	d9403817 	ldw	r5,224(sp)
   10290:	1887883a 	add	r3,r3,r2
   10294:	d8801f17 	ldw	r2,124(sp)
   10298:	41000015 	stw	r4,0(r8)
   1029c:	41400115 	stw	r5,4(r8)
   102a0:	10800044 	addi	r2,r2,1
   102a4:	d8c02015 	stw	r3,128(sp)
   102a8:	d8801f15 	stw	r2,124(sp)
   102ac:	010001c4 	movi	r4,7
   102b0:	2082af16 	blt	r4,r2,10d70 <___svfprintf_internal_r+0x19b0>
   102b4:	42000204 	addi	r8,r8,8
   102b8:	d8803317 	ldw	r2,204(sp)
   102bc:	143fffc4 	addi	r16,r2,-1
   102c0:	043ea30e 	bge	zero,r16,fd50 <__alt_data_end+0xfc00fd50>
   102c4:	04400404 	movi	r17,16
   102c8:	d8801f17 	ldw	r2,124(sp)
   102cc:	8c00860e 	bge	r17,r16,104e8 <___svfprintf_internal_r+0x1128>
   102d0:	014000f4 	movhi	r5,3
   102d4:	296a1284 	addi	r5,r5,-22454
   102d8:	d9402c15 	stw	r5,176(sp)
   102dc:	058001c4 	movi	r22,7
   102e0:	dd002d17 	ldw	r20,180(sp)
   102e4:	00000306 	br	102f4 <___svfprintf_internal_r+0xf34>
   102e8:	42000204 	addi	r8,r8,8
   102ec:	843ffc04 	addi	r16,r16,-16
   102f0:	8c00800e 	bge	r17,r16,104f4 <___svfprintf_internal_r+0x1134>
   102f4:	18c00404 	addi	r3,r3,16
   102f8:	10800044 	addi	r2,r2,1
   102fc:	45400015 	stw	r21,0(r8)
   10300:	44400115 	stw	r17,4(r8)
   10304:	d8c02015 	stw	r3,128(sp)
   10308:	d8801f15 	stw	r2,124(sp)
   1030c:	b0bff60e 	bge	r22,r2,102e8 <__alt_data_end+0xfc0102e8>
   10310:	d9801e04 	addi	r6,sp,120
   10314:	a00b883a 	mov	r5,r20
   10318:	9809883a 	mov	r4,r19
   1031c:	00183240 	call	18324 <__ssprint_r>
   10320:	103d0e1e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10324:	d8c02017 	ldw	r3,128(sp)
   10328:	d8801f17 	ldw	r2,124(sp)
   1032c:	da000404 	addi	r8,sp,16
   10330:	003fee06 	br	102ec <__alt_data_end+0xfc0102ec>
   10334:	d9403117 	ldw	r5,196(sp)
   10338:	d8802917 	ldw	r2,164(sp)
   1033c:	28adc83a 	sub	r22,r5,r2
   10340:	05be430e 	bge	zero,r22,fc50 <__alt_data_end+0xfc00fc50>
   10344:	07000404 	movi	fp,16
   10348:	d8801f17 	ldw	r2,124(sp)
   1034c:	e583a20e 	bge	fp,r22,111d8 <___svfprintf_internal_r+0x1e18>
   10350:	014000f4 	movhi	r5,3
   10354:	296a1284 	addi	r5,r5,-22454
   10358:	dc403015 	stw	r17,192(sp)
   1035c:	d9402c15 	stw	r5,176(sp)
   10360:	b023883a 	mov	r17,r22
   10364:	050001c4 	movi	r20,7
   10368:	902d883a 	mov	r22,r18
   1036c:	8025883a 	mov	r18,r16
   10370:	dc002d17 	ldw	r16,180(sp)
   10374:	00000306 	br	10384 <___svfprintf_internal_r+0xfc4>
   10378:	8c7ffc04 	addi	r17,r17,-16
   1037c:	42000204 	addi	r8,r8,8
   10380:	e440110e 	bge	fp,r17,103c8 <___svfprintf_internal_r+0x1008>
   10384:	18c00404 	addi	r3,r3,16
   10388:	10800044 	addi	r2,r2,1
   1038c:	45400015 	stw	r21,0(r8)
   10390:	47000115 	stw	fp,4(r8)
   10394:	d8c02015 	stw	r3,128(sp)
   10398:	d8801f15 	stw	r2,124(sp)
   1039c:	a0bff60e 	bge	r20,r2,10378 <__alt_data_end+0xfc010378>
   103a0:	d9801e04 	addi	r6,sp,120
   103a4:	800b883a 	mov	r5,r16
   103a8:	9809883a 	mov	r4,r19
   103ac:	00183240 	call	18324 <__ssprint_r>
   103b0:	103cea1e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   103b4:	8c7ffc04 	addi	r17,r17,-16
   103b8:	d8c02017 	ldw	r3,128(sp)
   103bc:	d8801f17 	ldw	r2,124(sp)
   103c0:	da000404 	addi	r8,sp,16
   103c4:	e47fef16 	blt	fp,r17,10384 <__alt_data_end+0xfc010384>
   103c8:	9021883a 	mov	r16,r18
   103cc:	b025883a 	mov	r18,r22
   103d0:	882d883a 	mov	r22,r17
   103d4:	dc403017 	ldw	r17,192(sp)
   103d8:	d9002c17 	ldw	r4,176(sp)
   103dc:	1d87883a 	add	r3,r3,r22
   103e0:	10800044 	addi	r2,r2,1
   103e4:	41000015 	stw	r4,0(r8)
   103e8:	45800115 	stw	r22,4(r8)
   103ec:	d8c02015 	stw	r3,128(sp)
   103f0:	d8801f15 	stw	r2,124(sp)
   103f4:	010001c4 	movi	r4,7
   103f8:	20819a16 	blt	r4,r2,10a64 <___svfprintf_internal_r+0x16a4>
   103fc:	42000204 	addi	r8,r8,8
   10400:	003e1306 	br	fc50 <__alt_data_end+0xfc00fc50>
   10404:	d9403317 	ldw	r5,204(sp)
   10408:	00800044 	movi	r2,1
   1040c:	18c00044 	addi	r3,r3,1
   10410:	1141710e 	bge	r2,r5,109d8 <___svfprintf_internal_r+0x1618>
   10414:	dc401f17 	ldw	r17,124(sp)
   10418:	00800044 	movi	r2,1
   1041c:	40800115 	stw	r2,4(r8)
   10420:	8c400044 	addi	r17,r17,1
   10424:	44000015 	stw	r16,0(r8)
   10428:	d8c02015 	stw	r3,128(sp)
   1042c:	dc401f15 	stw	r17,124(sp)
   10430:	008001c4 	movi	r2,7
   10434:	14417416 	blt	r2,r17,10a08 <___svfprintf_internal_r+0x1648>
   10438:	42000204 	addi	r8,r8,8
   1043c:	d8803817 	ldw	r2,224(sp)
   10440:	d9003417 	ldw	r4,208(sp)
   10444:	8c400044 	addi	r17,r17,1
   10448:	10c7883a 	add	r3,r2,r3
   1044c:	40800115 	stw	r2,4(r8)
   10450:	41000015 	stw	r4,0(r8)
   10454:	d8c02015 	stw	r3,128(sp)
   10458:	dc401f15 	stw	r17,124(sp)
   1045c:	008001c4 	movi	r2,7
   10460:	14417216 	blt	r2,r17,10a2c <___svfprintf_internal_r+0x166c>
   10464:	45800204 	addi	r22,r8,8
   10468:	d9003617 	ldw	r4,216(sp)
   1046c:	d9403717 	ldw	r5,220(sp)
   10470:	000d883a 	mov	r6,zero
   10474:	000f883a 	mov	r7,zero
   10478:	d8c03d15 	stw	r3,244(sp)
   1047c:	001d7140 	call	1d714 <__eqdf2>
   10480:	d8c03d17 	ldw	r3,244(sp)
   10484:	1000b326 	beq	r2,zero,10754 <___svfprintf_internal_r+0x1394>
   10488:	d9403317 	ldw	r5,204(sp)
   1048c:	84000044 	addi	r16,r16,1
   10490:	8c400044 	addi	r17,r17,1
   10494:	28bfffc4 	addi	r2,r5,-1
   10498:	1887883a 	add	r3,r3,r2
   1049c:	b0800115 	stw	r2,4(r22)
   104a0:	b4000015 	stw	r16,0(r22)
   104a4:	d8c02015 	stw	r3,128(sp)
   104a8:	dc401f15 	stw	r17,124(sp)
   104ac:	008001c4 	movi	r2,7
   104b0:	1440d216 	blt	r2,r17,107fc <___svfprintf_internal_r+0x143c>
   104b4:	b5800204 	addi	r22,r22,8
   104b8:	d9003b17 	ldw	r4,236(sp)
   104bc:	df0022c4 	addi	fp,sp,139
   104c0:	8c400044 	addi	r17,r17,1
   104c4:	20c7883a 	add	r3,r4,r3
   104c8:	b7000015 	stw	fp,0(r22)
   104cc:	b1000115 	stw	r4,4(r22)
   104d0:	d8c02015 	stw	r3,128(sp)
   104d4:	dc401f15 	stw	r17,124(sp)
   104d8:	008001c4 	movi	r2,7
   104dc:	14400e16 	blt	r2,r17,10518 <___svfprintf_internal_r+0x1158>
   104e0:	b2000204 	addi	r8,r22,8
   104e4:	003e1a06 	br	fd50 <__alt_data_end+0xfc00fd50>
   104e8:	010000f4 	movhi	r4,3
   104ec:	212a1284 	addi	r4,r4,-22454
   104f0:	d9002c15 	stw	r4,176(sp)
   104f4:	d9002c17 	ldw	r4,176(sp)
   104f8:	1c07883a 	add	r3,r3,r16
   104fc:	44000115 	stw	r16,4(r8)
   10500:	41000015 	stw	r4,0(r8)
   10504:	10800044 	addi	r2,r2,1
   10508:	d8c02015 	stw	r3,128(sp)
   1050c:	d8801f15 	stw	r2,124(sp)
   10510:	010001c4 	movi	r4,7
   10514:	20be0d0e 	bge	r4,r2,fd4c <__alt_data_end+0xfc00fd4c>
   10518:	d9402d17 	ldw	r5,180(sp)
   1051c:	d9801e04 	addi	r6,sp,120
   10520:	9809883a 	mov	r4,r19
   10524:	00183240 	call	18324 <__ssprint_r>
   10528:	103c8c1e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   1052c:	d8c02017 	ldw	r3,128(sp)
   10530:	da000404 	addi	r8,sp,16
   10534:	003e0606 	br	fd50 <__alt_data_end+0xfc00fd50>
   10538:	d9402d17 	ldw	r5,180(sp)
   1053c:	d9801e04 	addi	r6,sp,120
   10540:	9809883a 	mov	r4,r19
   10544:	00183240 	call	18324 <__ssprint_r>
   10548:	103e3d26 	beq	r2,zero,fe40 <__alt_data_end+0xfc00fe40>
   1054c:	003c8306 	br	f75c <__alt_data_end+0xfc00f75c>
   10550:	d9402d17 	ldw	r5,180(sp)
   10554:	d9801e04 	addi	r6,sp,120
   10558:	9809883a 	mov	r4,r19
   1055c:	00183240 	call	18324 <__ssprint_r>
   10560:	103c7e1e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10564:	d8c02017 	ldw	r3,128(sp)
   10568:	da000404 	addi	r8,sp,16
   1056c:	003deb06 	br	fd1c <__alt_data_end+0xfc00fd1c>
   10570:	d9402d17 	ldw	r5,180(sp)
   10574:	d9801e04 	addi	r6,sp,120
   10578:	9809883a 	mov	r4,r19
   1057c:	00183240 	call	18324 <__ssprint_r>
   10580:	103c761e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10584:	d8c02017 	ldw	r3,128(sp)
   10588:	da000404 	addi	r8,sp,16
   1058c:	003d9f06 	br	fc0c <__alt_data_end+0xfc00fc0c>
   10590:	d9402d17 	ldw	r5,180(sp)
   10594:	d9801e04 	addi	r6,sp,120
   10598:	9809883a 	mov	r4,r19
   1059c:	00183240 	call	18324 <__ssprint_r>
   105a0:	103c6e1e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   105a4:	d8c02017 	ldw	r3,128(sp)
   105a8:	da000404 	addi	r8,sp,16
   105ac:	003da506 	br	fc44 <__alt_data_end+0xfc00fc44>
   105b0:	d9402a17 	ldw	r5,168(sp)
   105b4:	d8002785 	stb	zero,158(sp)
   105b8:	283f0816 	blt	r5,zero,101dc <__alt_data_end+0xfc0101dc>
   105bc:	00ffdfc4 	movi	r3,-129
   105c0:	a584b03a 	or	r2,r20,r22
   105c4:	90e4703a 	and	r18,r18,r3
   105c8:	103c5126 	beq	r2,zero,f710 <__alt_data_end+0xfc00f710>
   105cc:	0039883a 	mov	fp,zero
   105d0:	003e5a06 	br	ff3c <__alt_data_end+0xfc00ff3c>
   105d4:	9080040c 	andi	r2,r18,16
   105d8:	10013d26 	beq	r2,zero,10ad0 <___svfprintf_internal_r+0x1710>
   105dc:	d8c02e17 	ldw	r3,184(sp)
   105e0:	d9002a17 	ldw	r4,168(sp)
   105e4:	d8002785 	stb	zero,158(sp)
   105e8:	18800104 	addi	r2,r3,4
   105ec:	1d000017 	ldw	r20,0(r3)
   105f0:	002d883a 	mov	r22,zero
   105f4:	20013f16 	blt	r4,zero,10af4 <___svfprintf_internal_r+0x1734>
   105f8:	00ffdfc4 	movi	r3,-129
   105fc:	d8802e15 	stw	r2,184(sp)
   10600:	90e4703a 	and	r18,r18,r3
   10604:	a03d0926 	beq	r20,zero,fa2c <__alt_data_end+0xfc00fa2c>
   10608:	0039883a 	mov	fp,zero
   1060c:	003d0c06 	br	fa40 <__alt_data_end+0xfc00fa40>
   10610:	dc402617 	ldw	r17,152(sp)
   10614:	0441830e 	bge	zero,r17,10c24 <___svfprintf_internal_r+0x1864>
   10618:	dc403217 	ldw	r17,200(sp)
   1061c:	d8803317 	ldw	r2,204(sp)
   10620:	1440010e 	bge	r2,r17,10628 <___svfprintf_internal_r+0x1268>
   10624:	1023883a 	mov	r17,r2
   10628:	04400a0e 	bge	zero,r17,10654 <___svfprintf_internal_r+0x1294>
   1062c:	d8801f17 	ldw	r2,124(sp)
   10630:	1c47883a 	add	r3,r3,r17
   10634:	44000015 	stw	r16,0(r8)
   10638:	10800044 	addi	r2,r2,1
   1063c:	44400115 	stw	r17,4(r8)
   10640:	d8c02015 	stw	r3,128(sp)
   10644:	d8801f15 	stw	r2,124(sp)
   10648:	010001c4 	movi	r4,7
   1064c:	20827516 	blt	r4,r2,11024 <___svfprintf_internal_r+0x1c64>
   10650:	42000204 	addi	r8,r8,8
   10654:	88027b16 	blt	r17,zero,11044 <___svfprintf_internal_r+0x1c84>
   10658:	d9003217 	ldw	r4,200(sp)
   1065c:	2463c83a 	sub	r17,r4,r17
   10660:	0440990e 	bge	zero,r17,108c8 <___svfprintf_internal_r+0x1508>
   10664:	05800404 	movi	r22,16
   10668:	d8801f17 	ldw	r2,124(sp)
   1066c:	b441530e 	bge	r22,r17,10bbc <___svfprintf_internal_r+0x17fc>
   10670:	010000f4 	movhi	r4,3
   10674:	212a1284 	addi	r4,r4,-22454
   10678:	d9002c15 	stw	r4,176(sp)
   1067c:	070001c4 	movi	fp,7
   10680:	dd002d17 	ldw	r20,180(sp)
   10684:	00000306 	br	10694 <___svfprintf_internal_r+0x12d4>
   10688:	42000204 	addi	r8,r8,8
   1068c:	8c7ffc04 	addi	r17,r17,-16
   10690:	b4414d0e 	bge	r22,r17,10bc8 <___svfprintf_internal_r+0x1808>
   10694:	18c00404 	addi	r3,r3,16
   10698:	10800044 	addi	r2,r2,1
   1069c:	45400015 	stw	r21,0(r8)
   106a0:	45800115 	stw	r22,4(r8)
   106a4:	d8c02015 	stw	r3,128(sp)
   106a8:	d8801f15 	stw	r2,124(sp)
   106ac:	e0bff60e 	bge	fp,r2,10688 <__alt_data_end+0xfc010688>
   106b0:	d9801e04 	addi	r6,sp,120
   106b4:	a00b883a 	mov	r5,r20
   106b8:	9809883a 	mov	r4,r19
   106bc:	00183240 	call	18324 <__ssprint_r>
   106c0:	103c261e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   106c4:	d8c02017 	ldw	r3,128(sp)
   106c8:	d8801f17 	ldw	r2,124(sp)
   106cc:	da000404 	addi	r8,sp,16
   106d0:	003fee06 	br	1068c <__alt_data_end+0xfc01068c>
   106d4:	d9402d17 	ldw	r5,180(sp)
   106d8:	d9801e04 	addi	r6,sp,120
   106dc:	9809883a 	mov	r4,r19
   106e0:	00183240 	call	18324 <__ssprint_r>
   106e4:	103c1d1e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   106e8:	d8c02017 	ldw	r3,128(sp)
   106ec:	df002787 	ldb	fp,158(sp)
   106f0:	da000404 	addi	r8,sp,16
   106f4:	003d3806 	br	fbd8 <__alt_data_end+0xfc00fbd8>
   106f8:	9080040c 	andi	r2,r18,16
   106fc:	10005c26 	beq	r2,zero,10870 <___svfprintf_internal_r+0x14b0>
   10700:	d8c02e17 	ldw	r3,184(sp)
   10704:	d9002a17 	ldw	r4,168(sp)
   10708:	d8002785 	stb	zero,158(sp)
   1070c:	18800104 	addi	r2,r3,4
   10710:	1d000017 	ldw	r20,0(r3)
   10714:	002d883a 	mov	r22,zero
   10718:	20005e16 	blt	r4,zero,10894 <___svfprintf_internal_r+0x14d4>
   1071c:	00ffdfc4 	movi	r3,-129
   10720:	d8802e15 	stw	r2,184(sp)
   10724:	90e4703a 	and	r18,r18,r3
   10728:	0039883a 	mov	fp,zero
   1072c:	a03ddf26 	beq	r20,zero,feac <__alt_data_end+0xfc00feac>
   10730:	00800244 	movi	r2,9
   10734:	153c8e36 	bltu	r2,r20,f970 <__alt_data_end+0xfc00f970>
   10738:	a5000c04 	addi	r20,r20,48
   1073c:	dc001dc4 	addi	r16,sp,119
   10740:	dd001dc5 	stb	r20,119(sp)
   10744:	d8c02817 	ldw	r3,160(sp)
   10748:	1c07c83a 	sub	r3,r3,r16
   1074c:	d8c02b15 	stw	r3,172(sp)
   10750:	003cd306 	br	faa0 <__alt_data_end+0xfc00faa0>
   10754:	d8803317 	ldw	r2,204(sp)
   10758:	143fffc4 	addi	r16,r2,-1
   1075c:	043f560e 	bge	zero,r16,104b8 <__alt_data_end+0xfc0104b8>
   10760:	07000404 	movi	fp,16
   10764:	e403530e 	bge	fp,r16,114b4 <___svfprintf_internal_r+0x20f4>
   10768:	014000f4 	movhi	r5,3
   1076c:	296a1284 	addi	r5,r5,-22454
   10770:	d9402c15 	stw	r5,176(sp)
   10774:	01c001c4 	movi	r7,7
   10778:	dd002d17 	ldw	r20,180(sp)
   1077c:	00000306 	br	1078c <___svfprintf_internal_r+0x13cc>
   10780:	843ffc04 	addi	r16,r16,-16
   10784:	b5800204 	addi	r22,r22,8
   10788:	e400130e 	bge	fp,r16,107d8 <___svfprintf_internal_r+0x1418>
   1078c:	18c00404 	addi	r3,r3,16
   10790:	8c400044 	addi	r17,r17,1
   10794:	b5400015 	stw	r21,0(r22)
   10798:	b7000115 	stw	fp,4(r22)
   1079c:	d8c02015 	stw	r3,128(sp)
   107a0:	dc401f15 	stw	r17,124(sp)
   107a4:	3c7ff60e 	bge	r7,r17,10780 <__alt_data_end+0xfc010780>
   107a8:	d9801e04 	addi	r6,sp,120
   107ac:	a00b883a 	mov	r5,r20
   107b0:	9809883a 	mov	r4,r19
   107b4:	d9c03d15 	stw	r7,244(sp)
   107b8:	00183240 	call	18324 <__ssprint_r>
   107bc:	d9c03d17 	ldw	r7,244(sp)
   107c0:	103be61e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   107c4:	843ffc04 	addi	r16,r16,-16
   107c8:	d8c02017 	ldw	r3,128(sp)
   107cc:	dc401f17 	ldw	r17,124(sp)
   107d0:	dd800404 	addi	r22,sp,16
   107d4:	e43fed16 	blt	fp,r16,1078c <__alt_data_end+0xfc01078c>
   107d8:	d8802c17 	ldw	r2,176(sp)
   107dc:	1c07883a 	add	r3,r3,r16
   107e0:	8c400044 	addi	r17,r17,1
   107e4:	b0800015 	stw	r2,0(r22)
   107e8:	b4000115 	stw	r16,4(r22)
   107ec:	d8c02015 	stw	r3,128(sp)
   107f0:	dc401f15 	stw	r17,124(sp)
   107f4:	008001c4 	movi	r2,7
   107f8:	147f2e0e 	bge	r2,r17,104b4 <__alt_data_end+0xfc0104b4>
   107fc:	d9402d17 	ldw	r5,180(sp)
   10800:	d9801e04 	addi	r6,sp,120
   10804:	9809883a 	mov	r4,r19
   10808:	00183240 	call	18324 <__ssprint_r>
   1080c:	103bd31e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10810:	d8c02017 	ldw	r3,128(sp)
   10814:	dc401f17 	ldw	r17,124(sp)
   10818:	dd800404 	addi	r22,sp,16
   1081c:	003f2606 	br	104b8 <__alt_data_end+0xfc0104b8>
   10820:	9080040c 	andi	r2,r18,16
   10824:	1000c326 	beq	r2,zero,10b34 <___svfprintf_internal_r+0x1774>
   10828:	d9402e17 	ldw	r5,184(sp)
   1082c:	2d000017 	ldw	r20,0(r5)
   10830:	29400104 	addi	r5,r5,4
   10834:	d9402e15 	stw	r5,184(sp)
   10838:	a02dd7fa 	srai	r22,r20,31
   1083c:	b005883a 	mov	r2,r22
   10840:	103c430e 	bge	r2,zero,f950 <__alt_data_end+0xfc00f950>
   10844:	d9402a17 	ldw	r5,168(sp)
   10848:	0529c83a 	sub	r20,zero,r20
   1084c:	07000b44 	movi	fp,45
   10850:	a004c03a 	cmpne	r2,r20,zero
   10854:	05adc83a 	sub	r22,zero,r22
   10858:	df002785 	stb	fp,158(sp)
   1085c:	b0adc83a 	sub	r22,r22,r2
   10860:	28022e16 	blt	r5,zero,1111c <___svfprintf_internal_r+0x1d5c>
   10864:	00bfdfc4 	movi	r2,-129
   10868:	90a4703a 	and	r18,r18,r2
   1086c:	003c3f06 	br	f96c <__alt_data_end+0xfc00f96c>
   10870:	9080100c 	andi	r2,r18,64
   10874:	d8002785 	stb	zero,158(sp)
   10878:	10012526 	beq	r2,zero,10d10 <___svfprintf_internal_r+0x1950>
   1087c:	d9402e17 	ldw	r5,184(sp)
   10880:	d8c02a17 	ldw	r3,168(sp)
   10884:	002d883a 	mov	r22,zero
   10888:	28800104 	addi	r2,r5,4
   1088c:	2d00000b 	ldhu	r20,0(r5)
   10890:	183fa20e 	bge	r3,zero,1071c <__alt_data_end+0xfc01071c>
   10894:	d8802e15 	stw	r2,184(sp)
   10898:	0039883a 	mov	fp,zero
   1089c:	a584b03a 	or	r2,r20,r22
   108a0:	103c321e 	bne	r2,zero,f96c <__alt_data_end+0xfc00f96c>
   108a4:	00800044 	movi	r2,1
   108a8:	003e5006 	br	101ec <__alt_data_end+0xfc0101ec>
   108ac:	d9402d17 	ldw	r5,180(sp)
   108b0:	d9801e04 	addi	r6,sp,120
   108b4:	9809883a 	mov	r4,r19
   108b8:	00183240 	call	18324 <__ssprint_r>
   108bc:	103ba71e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   108c0:	d8c02017 	ldw	r3,128(sp)
   108c4:	da000404 	addi	r8,sp,16
   108c8:	d9003217 	ldw	r4,200(sp)
   108cc:	d8802617 	ldw	r2,152(sp)
   108d0:	d9403317 	ldw	r5,204(sp)
   108d4:	8123883a 	add	r17,r16,r4
   108d8:	11400216 	blt	r2,r5,108e4 <___svfprintf_internal_r+0x1524>
   108dc:	9100004c 	andi	r4,r18,1
   108e0:	20000d26 	beq	r4,zero,10918 <___svfprintf_internal_r+0x1558>
   108e4:	d9003817 	ldw	r4,224(sp)
   108e8:	d9403417 	ldw	r5,208(sp)
   108ec:	1907883a 	add	r3,r3,r4
   108f0:	d9001f17 	ldw	r4,124(sp)
   108f4:	41400015 	stw	r5,0(r8)
   108f8:	d9403817 	ldw	r5,224(sp)
   108fc:	21000044 	addi	r4,r4,1
   10900:	d8c02015 	stw	r3,128(sp)
   10904:	41400115 	stw	r5,4(r8)
   10908:	d9001f15 	stw	r4,124(sp)
   1090c:	014001c4 	movi	r5,7
   10910:	2901dc16 	blt	r5,r4,11084 <___svfprintf_internal_r+0x1cc4>
   10914:	42000204 	addi	r8,r8,8
   10918:	d9003317 	ldw	r4,204(sp)
   1091c:	8121883a 	add	r16,r16,r4
   10920:	2085c83a 	sub	r2,r4,r2
   10924:	8461c83a 	sub	r16,r16,r17
   10928:	1400010e 	bge	r2,r16,10930 <___svfprintf_internal_r+0x1570>
   1092c:	1021883a 	mov	r16,r2
   10930:	04000a0e 	bge	zero,r16,1095c <___svfprintf_internal_r+0x159c>
   10934:	d9001f17 	ldw	r4,124(sp)
   10938:	1c07883a 	add	r3,r3,r16
   1093c:	44400015 	stw	r17,0(r8)
   10940:	21000044 	addi	r4,r4,1
   10944:	44000115 	stw	r16,4(r8)
   10948:	d8c02015 	stw	r3,128(sp)
   1094c:	d9001f15 	stw	r4,124(sp)
   10950:	014001c4 	movi	r5,7
   10954:	2901e616 	blt	r5,r4,110f0 <___svfprintf_internal_r+0x1d30>
   10958:	42000204 	addi	r8,r8,8
   1095c:	8001f616 	blt	r16,zero,11138 <___svfprintf_internal_r+0x1d78>
   10960:	1421c83a 	sub	r16,r2,r16
   10964:	043cfa0e 	bge	zero,r16,fd50 <__alt_data_end+0xfc00fd50>
   10968:	04400404 	movi	r17,16
   1096c:	d8801f17 	ldw	r2,124(sp)
   10970:	8c3edd0e 	bge	r17,r16,104e8 <__alt_data_end+0xfc0104e8>
   10974:	014000f4 	movhi	r5,3
   10978:	296a1284 	addi	r5,r5,-22454
   1097c:	d9402c15 	stw	r5,176(sp)
   10980:	058001c4 	movi	r22,7
   10984:	dd002d17 	ldw	r20,180(sp)
   10988:	00000306 	br	10998 <___svfprintf_internal_r+0x15d8>
   1098c:	42000204 	addi	r8,r8,8
   10990:	843ffc04 	addi	r16,r16,-16
   10994:	8c3ed70e 	bge	r17,r16,104f4 <__alt_data_end+0xfc0104f4>
   10998:	18c00404 	addi	r3,r3,16
   1099c:	10800044 	addi	r2,r2,1
   109a0:	45400015 	stw	r21,0(r8)
   109a4:	44400115 	stw	r17,4(r8)
   109a8:	d8c02015 	stw	r3,128(sp)
   109ac:	d8801f15 	stw	r2,124(sp)
   109b0:	b0bff60e 	bge	r22,r2,1098c <__alt_data_end+0xfc01098c>
   109b4:	d9801e04 	addi	r6,sp,120
   109b8:	a00b883a 	mov	r5,r20
   109bc:	9809883a 	mov	r4,r19
   109c0:	00183240 	call	18324 <__ssprint_r>
   109c4:	103b651e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   109c8:	d8c02017 	ldw	r3,128(sp)
   109cc:	d8801f17 	ldw	r2,124(sp)
   109d0:	da000404 	addi	r8,sp,16
   109d4:	003fee06 	br	10990 <__alt_data_end+0xfc010990>
   109d8:	9088703a 	and	r4,r18,r2
   109dc:	203e8d1e 	bne	r4,zero,10414 <__alt_data_end+0xfc010414>
   109e0:	dc401f17 	ldw	r17,124(sp)
   109e4:	40800115 	stw	r2,4(r8)
   109e8:	44000015 	stw	r16,0(r8)
   109ec:	8c400044 	addi	r17,r17,1
   109f0:	d8c02015 	stw	r3,128(sp)
   109f4:	dc401f15 	stw	r17,124(sp)
   109f8:	008001c4 	movi	r2,7
   109fc:	147f7f16 	blt	r2,r17,107fc <__alt_data_end+0xfc0107fc>
   10a00:	45800204 	addi	r22,r8,8
   10a04:	003eac06 	br	104b8 <__alt_data_end+0xfc0104b8>
   10a08:	d9402d17 	ldw	r5,180(sp)
   10a0c:	d9801e04 	addi	r6,sp,120
   10a10:	9809883a 	mov	r4,r19
   10a14:	00183240 	call	18324 <__ssprint_r>
   10a18:	103b501e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10a1c:	d8c02017 	ldw	r3,128(sp)
   10a20:	dc401f17 	ldw	r17,124(sp)
   10a24:	da000404 	addi	r8,sp,16
   10a28:	003e8406 	br	1043c <__alt_data_end+0xfc01043c>
   10a2c:	d9402d17 	ldw	r5,180(sp)
   10a30:	d9801e04 	addi	r6,sp,120
   10a34:	9809883a 	mov	r4,r19
   10a38:	00183240 	call	18324 <__ssprint_r>
   10a3c:	103b471e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10a40:	d8c02017 	ldw	r3,128(sp)
   10a44:	dc401f17 	ldw	r17,124(sp)
   10a48:	dd800404 	addi	r22,sp,16
   10a4c:	003e8606 	br	10468 <__alt_data_end+0xfc010468>
   10a50:	0029883a 	mov	r20,zero
   10a54:	a5000c04 	addi	r20,r20,48
   10a58:	dc001dc4 	addi	r16,sp,119
   10a5c:	dd001dc5 	stb	r20,119(sp)
   10a60:	003f3806 	br	10744 <__alt_data_end+0xfc010744>
   10a64:	d9402d17 	ldw	r5,180(sp)
   10a68:	d9801e04 	addi	r6,sp,120
   10a6c:	9809883a 	mov	r4,r19
   10a70:	00183240 	call	18324 <__ssprint_r>
   10a74:	103b391e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10a78:	d8c02017 	ldw	r3,128(sp)
   10a7c:	da000404 	addi	r8,sp,16
   10a80:	003c7306 	br	fc50 <__alt_data_end+0xfc00fc50>
   10a84:	d9003617 	ldw	r4,216(sp)
   10a88:	d9403717 	ldw	r5,220(sp)
   10a8c:	da003e15 	stw	r8,248(sp)
   10a90:	00181740 	call	18174 <__fpclassifyd>
   10a94:	da003e17 	ldw	r8,248(sp)
   10a98:	1000bd1e 	bne	r2,zero,10d90 <___svfprintf_internal_r+0x19d0>
   10a9c:	008011c4 	movi	r2,71
   10aa0:	14411e0e 	bge	r2,r17,10f1c <___svfprintf_internal_r+0x1b5c>
   10aa4:	040000f4 	movhi	r16,3
   10aa8:	842a0504 	addi	r16,r16,-22508
   10aac:	00c000c4 	movi	r3,3
   10ab0:	00bfdfc4 	movi	r2,-129
   10ab4:	d8c02915 	stw	r3,164(sp)
   10ab8:	90a4703a 	and	r18,r18,r2
   10abc:	df002783 	ldbu	fp,158(sp)
   10ac0:	d8c02b15 	stw	r3,172(sp)
   10ac4:	d8002a15 	stw	zero,168(sp)
   10ac8:	d8003215 	stw	zero,200(sp)
   10acc:	003bfa06 	br	fab8 <__alt_data_end+0xfc00fab8>
   10ad0:	9080100c 	andi	r2,r18,64
   10ad4:	d8002785 	stb	zero,158(sp)
   10ad8:	10009426 	beq	r2,zero,10d2c <___svfprintf_internal_r+0x196c>
   10adc:	d9402e17 	ldw	r5,184(sp)
   10ae0:	d8c02a17 	ldw	r3,168(sp)
   10ae4:	002d883a 	mov	r22,zero
   10ae8:	28800104 	addi	r2,r5,4
   10aec:	2d00000b 	ldhu	r20,0(r5)
   10af0:	183ec10e 	bge	r3,zero,105f8 <__alt_data_end+0xfc0105f8>
   10af4:	a586b03a 	or	r3,r20,r22
   10af8:	d8802e15 	stw	r2,184(sp)
   10afc:	183ec21e 	bne	r3,zero,10608 <__alt_data_end+0xfc010608>
   10b00:	0039883a 	mov	fp,zero
   10b04:	0005883a 	mov	r2,zero
   10b08:	003db806 	br	101ec <__alt_data_end+0xfc0101ec>
   10b0c:	d8c02e17 	ldw	r3,184(sp)
   10b10:	d9002e17 	ldw	r4,184(sp)
   10b14:	d9402e17 	ldw	r5,184(sp)
   10b18:	18c00017 	ldw	r3,0(r3)
   10b1c:	21000117 	ldw	r4,4(r4)
   10b20:	29400204 	addi	r5,r5,8
   10b24:	d8c03615 	stw	r3,216(sp)
   10b28:	d9003715 	stw	r4,220(sp)
   10b2c:	d9402e15 	stw	r5,184(sp)
   10b30:	003b5a06 	br	f89c <__alt_data_end+0xfc00f89c>
   10b34:	9080100c 	andi	r2,r18,64
   10b38:	10010726 	beq	r2,zero,10f58 <___svfprintf_internal_r+0x1b98>
   10b3c:	d8802e17 	ldw	r2,184(sp)
   10b40:	1500000f 	ldh	r20,0(r2)
   10b44:	10800104 	addi	r2,r2,4
   10b48:	d8802e15 	stw	r2,184(sp)
   10b4c:	a02dd7fa 	srai	r22,r20,31
   10b50:	b005883a 	mov	r2,r22
   10b54:	003b7d06 	br	f94c <__alt_data_end+0xfc00f94c>
   10b58:	9080100c 	andi	r2,r18,64
   10b5c:	10010526 	beq	r2,zero,10f74 <___svfprintf_internal_r+0x1bb4>
   10b60:	d8c02e17 	ldw	r3,184(sp)
   10b64:	002d883a 	mov	r22,zero
   10b68:	1d00000b 	ldhu	r20,0(r3)
   10b6c:	18c00104 	addi	r3,r3,4
   10b70:	d8c02e15 	stw	r3,184(sp)
   10b74:	003ce206 	br	ff00 <__alt_data_end+0xfc00ff00>
   10b78:	bc400007 	ldb	r17,0(r23)
   10b7c:	003a6506 	br	f514 <__alt_data_end+0xfc00f514>
   10b80:	9080040c 	andi	r2,r18,16
   10b84:	10010126 	beq	r2,zero,10f8c <___svfprintf_internal_r+0x1bcc>
   10b88:	d8c02e17 	ldw	r3,184(sp)
   10b8c:	d9002f17 	ldw	r4,188(sp)
   10b90:	18800017 	ldw	r2,0(r3)
   10b94:	18c00104 	addi	r3,r3,4
   10b98:	d8c02e15 	stw	r3,184(sp)
   10b9c:	11000015 	stw	r4,0(r2)
   10ba0:	003a3206 	br	f46c <__alt_data_end+0xfc00f46c>
   10ba4:	d9002a17 	ldw	r4,168(sp)
   10ba8:	d8002785 	stb	zero,158(sp)
   10bac:	203d8d16 	blt	r4,zero,101e4 <__alt_data_end+0xfc0101e4>
   10bb0:	00bfdfc4 	movi	r2,-129
   10bb4:	90a4703a 	and	r18,r18,r2
   10bb8:	003ad506 	br	f710 <__alt_data_end+0xfc00f710>
   10bbc:	014000f4 	movhi	r5,3
   10bc0:	296a1284 	addi	r5,r5,-22454
   10bc4:	d9402c15 	stw	r5,176(sp)
   10bc8:	d9402c17 	ldw	r5,176(sp)
   10bcc:	1c47883a 	add	r3,r3,r17
   10bd0:	10800044 	addi	r2,r2,1
   10bd4:	41400015 	stw	r5,0(r8)
   10bd8:	44400115 	stw	r17,4(r8)
   10bdc:	d8c02015 	stw	r3,128(sp)
   10be0:	d8801f15 	stw	r2,124(sp)
   10be4:	010001c4 	movi	r4,7
   10be8:	20bf3016 	blt	r4,r2,108ac <__alt_data_end+0xfc0108ac>
   10bec:	42000204 	addi	r8,r8,8
   10bf0:	003f3506 	br	108c8 <__alt_data_end+0xfc0108c8>
   10bf4:	010000f4 	movhi	r4,3
   10bf8:	212a1284 	addi	r4,r4,-22454
   10bfc:	d9002c15 	stw	r4,176(sp)
   10c00:	003c3c06 	br	fcf4 <__alt_data_end+0xfc00fcf4>
   10c04:	d9402d17 	ldw	r5,180(sp)
   10c08:	d9801e04 	addi	r6,sp,120
   10c0c:	9809883a 	mov	r4,r19
   10c10:	00183240 	call	18324 <__ssprint_r>
   10c14:	103ad11e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10c18:	d8c02017 	ldw	r3,128(sp)
   10c1c:	da000404 	addi	r8,sp,16
   10c20:	003d9306 	br	10270 <__alt_data_end+0xfc010270>
   10c24:	d8801f17 	ldw	r2,124(sp)
   10c28:	014000f4 	movhi	r5,3
   10c2c:	01000044 	movi	r4,1
   10c30:	18c00044 	addi	r3,r3,1
   10c34:	10800044 	addi	r2,r2,1
   10c38:	296a1204 	addi	r5,r5,-22456
   10c3c:	41000115 	stw	r4,4(r8)
   10c40:	41400015 	stw	r5,0(r8)
   10c44:	d8c02015 	stw	r3,128(sp)
   10c48:	d8801f15 	stw	r2,124(sp)
   10c4c:	010001c4 	movi	r4,7
   10c50:	2080b516 	blt	r4,r2,10f28 <___svfprintf_internal_r+0x1b68>
   10c54:	42000204 	addi	r8,r8,8
   10c58:	8800041e 	bne	r17,zero,10c6c <___svfprintf_internal_r+0x18ac>
   10c5c:	d8803317 	ldw	r2,204(sp)
   10c60:	1000021e 	bne	r2,zero,10c6c <___svfprintf_internal_r+0x18ac>
   10c64:	9080004c 	andi	r2,r18,1
   10c68:	103c3926 	beq	r2,zero,fd50 <__alt_data_end+0xfc00fd50>
   10c6c:	d9003817 	ldw	r4,224(sp)
   10c70:	d8801f17 	ldw	r2,124(sp)
   10c74:	d9403417 	ldw	r5,208(sp)
   10c78:	20c7883a 	add	r3,r4,r3
   10c7c:	10800044 	addi	r2,r2,1
   10c80:	41000115 	stw	r4,4(r8)
   10c84:	41400015 	stw	r5,0(r8)
   10c88:	d8c02015 	stw	r3,128(sp)
   10c8c:	d8801f15 	stw	r2,124(sp)
   10c90:	010001c4 	movi	r4,7
   10c94:	20818016 	blt	r4,r2,11298 <___svfprintf_internal_r+0x1ed8>
   10c98:	42000204 	addi	r8,r8,8
   10c9c:	0463c83a 	sub	r17,zero,r17
   10ca0:	0440cb0e 	bge	zero,r17,10fd0 <___svfprintf_internal_r+0x1c10>
   10ca4:	05800404 	movi	r22,16
   10ca8:	b440e80e 	bge	r22,r17,1104c <___svfprintf_internal_r+0x1c8c>
   10cac:	014000f4 	movhi	r5,3
   10cb0:	296a1284 	addi	r5,r5,-22454
   10cb4:	d9402c15 	stw	r5,176(sp)
   10cb8:	070001c4 	movi	fp,7
   10cbc:	dd002d17 	ldw	r20,180(sp)
   10cc0:	00000306 	br	10cd0 <___svfprintf_internal_r+0x1910>
   10cc4:	42000204 	addi	r8,r8,8
   10cc8:	8c7ffc04 	addi	r17,r17,-16
   10ccc:	b440e20e 	bge	r22,r17,11058 <___svfprintf_internal_r+0x1c98>
   10cd0:	18c00404 	addi	r3,r3,16
   10cd4:	10800044 	addi	r2,r2,1
   10cd8:	45400015 	stw	r21,0(r8)
   10cdc:	45800115 	stw	r22,4(r8)
   10ce0:	d8c02015 	stw	r3,128(sp)
   10ce4:	d8801f15 	stw	r2,124(sp)
   10ce8:	e0bff60e 	bge	fp,r2,10cc4 <__alt_data_end+0xfc010cc4>
   10cec:	d9801e04 	addi	r6,sp,120
   10cf0:	a00b883a 	mov	r5,r20
   10cf4:	9809883a 	mov	r4,r19
   10cf8:	00183240 	call	18324 <__ssprint_r>
   10cfc:	103a971e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10d00:	d8c02017 	ldw	r3,128(sp)
   10d04:	d8801f17 	ldw	r2,124(sp)
   10d08:	da000404 	addi	r8,sp,16
   10d0c:	003fee06 	br	10cc8 <__alt_data_end+0xfc010cc8>
   10d10:	d9002e17 	ldw	r4,184(sp)
   10d14:	d9402a17 	ldw	r5,168(sp)
   10d18:	002d883a 	mov	r22,zero
   10d1c:	20800104 	addi	r2,r4,4
   10d20:	25000017 	ldw	r20,0(r4)
   10d24:	283e7d0e 	bge	r5,zero,1071c <__alt_data_end+0xfc01071c>
   10d28:	003eda06 	br	10894 <__alt_data_end+0xfc010894>
   10d2c:	d9002e17 	ldw	r4,184(sp)
   10d30:	d9402a17 	ldw	r5,168(sp)
   10d34:	002d883a 	mov	r22,zero
   10d38:	20800104 	addi	r2,r4,4
   10d3c:	25000017 	ldw	r20,0(r4)
   10d40:	283e2d0e 	bge	r5,zero,105f8 <__alt_data_end+0xfc0105f8>
   10d44:	003f6b06 	br	10af4 <__alt_data_end+0xfc010af4>
   10d48:	d8c02e15 	stw	r3,184(sp)
   10d4c:	0039883a 	mov	fp,zero
   10d50:	003ed206 	br	1089c <__alt_data_end+0xfc01089c>
   10d54:	bc400043 	ldbu	r17,1(r23)
   10d58:	84000814 	ori	r16,r16,32
   10d5c:	bdc00044 	addi	r23,r23,1
   10d60:	8c403fcc 	andi	r17,r17,255
   10d64:	8c40201c 	xori	r17,r17,128
   10d68:	8c7fe004 	addi	r17,r17,-128
   10d6c:	0039e906 	br	f514 <__alt_data_end+0xfc00f514>
   10d70:	d9402d17 	ldw	r5,180(sp)
   10d74:	d9801e04 	addi	r6,sp,120
   10d78:	9809883a 	mov	r4,r19
   10d7c:	00183240 	call	18324 <__ssprint_r>
   10d80:	103a761e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10d84:	d8c02017 	ldw	r3,128(sp)
   10d88:	da000404 	addi	r8,sp,16
   10d8c:	003d4a06 	br	102b8 <__alt_data_end+0xfc0102b8>
   10d90:	d9002a17 	ldw	r4,168(sp)
   10d94:	05bff7c4 	movi	r22,-33
   10d98:	00bfffc4 	movi	r2,-1
   10d9c:	8dac703a 	and	r22,r17,r22
   10da0:	20806a26 	beq	r4,r2,10f4c <___svfprintf_internal_r+0x1b8c>
   10da4:	008011c4 	movi	r2,71
   10da8:	b0813726 	beq	r22,r2,11288 <___svfprintf_internal_r+0x1ec8>
   10dac:	d9003717 	ldw	r4,220(sp)
   10db0:	90c04014 	ori	r3,r18,256
   10db4:	d8c02c15 	stw	r3,176(sp)
   10db8:	20015d16 	blt	r4,zero,11330 <___svfprintf_internal_r+0x1f70>
   10dbc:	dd003717 	ldw	r20,220(sp)
   10dc0:	d8002905 	stb	zero,164(sp)
   10dc4:	00801984 	movi	r2,102
   10dc8:	88814026 	beq	r17,r2,112cc <___svfprintf_internal_r+0x1f0c>
   10dcc:	00801184 	movi	r2,70
   10dd0:	88817126 	beq	r17,r2,11398 <___svfprintf_internal_r+0x1fd8>
   10dd4:	00801144 	movi	r2,69
   10dd8:	b0816226 	beq	r22,r2,11364 <___svfprintf_internal_r+0x1fa4>
   10ddc:	d8c02a17 	ldw	r3,168(sp)
   10de0:	d8802104 	addi	r2,sp,132
   10de4:	d8800315 	stw	r2,12(sp)
   10de8:	d9403617 	ldw	r5,216(sp)
   10dec:	d8802504 	addi	r2,sp,148
   10df0:	d8800215 	stw	r2,8(sp)
   10df4:	d8802604 	addi	r2,sp,152
   10df8:	d8c00015 	stw	r3,0(sp)
   10dfc:	d8800115 	stw	r2,4(sp)
   10e00:	01c00084 	movi	r7,2
   10e04:	a00d883a 	mov	r6,r20
   10e08:	9809883a 	mov	r4,r19
   10e0c:	d8c03d15 	stw	r3,244(sp)
   10e10:	da003e15 	stw	r8,248(sp)
   10e14:	0013db40 	call	13db4 <_dtoa_r>
   10e18:	1021883a 	mov	r16,r2
   10e1c:	008019c4 	movi	r2,103
   10e20:	d8c03d17 	ldw	r3,244(sp)
   10e24:	da003e17 	ldw	r8,248(sp)
   10e28:	8880e726 	beq	r17,r2,111c8 <___svfprintf_internal_r+0x1e08>
   10e2c:	008011c4 	movi	r2,71
   10e30:	8880d426 	beq	r17,r2,11184 <___svfprintf_internal_r+0x1dc4>
   10e34:	80f9883a 	add	fp,r16,r3
   10e38:	d9003617 	ldw	r4,216(sp)
   10e3c:	000d883a 	mov	r6,zero
   10e40:	000f883a 	mov	r7,zero
   10e44:	a00b883a 	mov	r5,r20
   10e48:	da003e15 	stw	r8,248(sp)
   10e4c:	001d7140 	call	1d714 <__eqdf2>
   10e50:	da003e17 	ldw	r8,248(sp)
   10e54:	1000e426 	beq	r2,zero,111e8 <___svfprintf_internal_r+0x1e28>
   10e58:	d8802117 	ldw	r2,132(sp)
   10e5c:	1700062e 	bgeu	r2,fp,10e78 <___svfprintf_internal_r+0x1ab8>
   10e60:	01000c04 	movi	r4,48
   10e64:	10c00044 	addi	r3,r2,1
   10e68:	d8c02115 	stw	r3,132(sp)
   10e6c:	11000005 	stb	r4,0(r2)
   10e70:	d8802117 	ldw	r2,132(sp)
   10e74:	173ffb36 	bltu	r2,fp,10e64 <__alt_data_end+0xfc010e64>
   10e78:	1405c83a 	sub	r2,r2,r16
   10e7c:	d8803315 	stw	r2,204(sp)
   10e80:	008011c4 	movi	r2,71
   10e84:	b080c526 	beq	r22,r2,1119c <___svfprintf_internal_r+0x1ddc>
   10e88:	00801944 	movi	r2,101
   10e8c:	1441d80e 	bge	r2,r17,115f0 <___svfprintf_internal_r+0x2230>
   10e90:	d8c02617 	ldw	r3,152(sp)
   10e94:	00801984 	movi	r2,102
   10e98:	d8c03215 	stw	r3,200(sp)
   10e9c:	88813426 	beq	r17,r2,11370 <___svfprintf_internal_r+0x1fb0>
   10ea0:	d8c03217 	ldw	r3,200(sp)
   10ea4:	d9003317 	ldw	r4,204(sp)
   10ea8:	19012516 	blt	r3,r4,11340 <___svfprintf_internal_r+0x1f80>
   10eac:	9480004c 	andi	r18,r18,1
   10eb0:	9001841e 	bne	r18,zero,114c4 <___svfprintf_internal_r+0x2104>
   10eb4:	1805883a 	mov	r2,r3
   10eb8:	1801cb16 	blt	r3,zero,115e8 <___svfprintf_internal_r+0x2228>
   10ebc:	d8c03217 	ldw	r3,200(sp)
   10ec0:	044019c4 	movi	r17,103
   10ec4:	d8c02b15 	stw	r3,172(sp)
   10ec8:	df002907 	ldb	fp,164(sp)
   10ecc:	e000a61e 	bne	fp,zero,11168 <___svfprintf_internal_r+0x1da8>
   10ed0:	df002783 	ldbu	fp,158(sp)
   10ed4:	d8802915 	stw	r2,164(sp)
   10ed8:	dc802c17 	ldw	r18,176(sp)
   10edc:	d8002a15 	stw	zero,168(sp)
   10ee0:	003af506 	br	fab8 <__alt_data_end+0xfc00fab8>
   10ee4:	040000f4 	movhi	r16,3
   10ee8:	842a0204 	addi	r16,r16,-22520
   10eec:	003a7e06 	br	f8e8 <__alt_data_end+0xfc00f8e8>
   10ef0:	d9003917 	ldw	r4,228(sp)
   10ef4:	04001004 	movi	r16,64
   10ef8:	800b883a 	mov	r5,r16
   10efc:	000e2540 	call	e254 <_malloc_r>
   10f00:	d9002d17 	ldw	r4,180(sp)
   10f04:	20800015 	stw	r2,0(r4)
   10f08:	20800415 	stw	r2,16(r4)
   10f0c:	1001d026 	beq	r2,zero,11650 <___svfprintf_internal_r+0x2290>
   10f10:	d8802d17 	ldw	r2,180(sp)
   10f14:	14000515 	stw	r16,20(r2)
   10f18:	00394406 	br	f42c <__alt_data_end+0xfc00f42c>
   10f1c:	040000f4 	movhi	r16,3
   10f20:	842a0404 	addi	r16,r16,-22512
   10f24:	003ee106 	br	10aac <__alt_data_end+0xfc010aac>
   10f28:	d9402d17 	ldw	r5,180(sp)
   10f2c:	d9801e04 	addi	r6,sp,120
   10f30:	9809883a 	mov	r4,r19
   10f34:	00183240 	call	18324 <__ssprint_r>
   10f38:	103a081e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10f3c:	dc402617 	ldw	r17,152(sp)
   10f40:	d8c02017 	ldw	r3,128(sp)
   10f44:	da000404 	addi	r8,sp,16
   10f48:	003f4306 	br	10c58 <__alt_data_end+0xfc010c58>
   10f4c:	01400184 	movi	r5,6
   10f50:	d9402a15 	stw	r5,168(sp)
   10f54:	003f9506 	br	10dac <__alt_data_end+0xfc010dac>
   10f58:	d8c02e17 	ldw	r3,184(sp)
   10f5c:	1d000017 	ldw	r20,0(r3)
   10f60:	18c00104 	addi	r3,r3,4
   10f64:	d8c02e15 	stw	r3,184(sp)
   10f68:	a02dd7fa 	srai	r22,r20,31
   10f6c:	b005883a 	mov	r2,r22
   10f70:	003a7606 	br	f94c <__alt_data_end+0xfc00f94c>
   10f74:	d9002e17 	ldw	r4,184(sp)
   10f78:	002d883a 	mov	r22,zero
   10f7c:	25000017 	ldw	r20,0(r4)
   10f80:	21000104 	addi	r4,r4,4
   10f84:	d9002e15 	stw	r4,184(sp)
   10f88:	003bdd06 	br	ff00 <__alt_data_end+0xfc00ff00>
   10f8c:	9480100c 	andi	r18,r18,64
   10f90:	90006e26 	beq	r18,zero,1114c <___svfprintf_internal_r+0x1d8c>
   10f94:	d9402e17 	ldw	r5,184(sp)
   10f98:	d8c02f17 	ldw	r3,188(sp)
   10f9c:	28800017 	ldw	r2,0(r5)
   10fa0:	29400104 	addi	r5,r5,4
   10fa4:	d9402e15 	stw	r5,184(sp)
   10fa8:	10c0000d 	sth	r3,0(r2)
   10fac:	00392f06 	br	f46c <__alt_data_end+0xfc00f46c>
   10fb0:	d9402d17 	ldw	r5,180(sp)
   10fb4:	d9801e04 	addi	r6,sp,120
   10fb8:	9809883a 	mov	r4,r19
   10fbc:	00183240 	call	18324 <__ssprint_r>
   10fc0:	1039e61e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   10fc4:	d8c02017 	ldw	r3,128(sp)
   10fc8:	d8801f17 	ldw	r2,124(sp)
   10fcc:	da000404 	addi	r8,sp,16
   10fd0:	d9403317 	ldw	r5,204(sp)
   10fd4:	10800044 	addi	r2,r2,1
   10fd8:	44000015 	stw	r16,0(r8)
   10fdc:	28c7883a 	add	r3,r5,r3
   10fe0:	003b5506 	br	fd38 <__alt_data_end+0xfc00fd38>
   10fe4:	8009883a 	mov	r4,r16
   10fe8:	df003e15 	stw	fp,248(sp)
   10fec:	000f3280 	call	f328 <strlen>
   10ff0:	d8802b15 	stw	r2,172(sp)
   10ff4:	da003e17 	ldw	r8,248(sp)
   10ff8:	103c160e 	bge	r2,zero,10054 <__alt_data_end+0xfc010054>
   10ffc:	0005883a 	mov	r2,zero
   11000:	003c1406 	br	10054 <__alt_data_end+0xfc010054>
   11004:	00bfffc4 	movi	r2,-1
   11008:	0039d906 	br	f770 <__alt_data_end+0xfc00f770>
   1100c:	010000f4 	movhi	r4,3
   11010:	212a1684 	addi	r4,r4,-22438
   11014:	d9003515 	stw	r4,212(sp)
   11018:	003ae406 	br	fbac <__alt_data_end+0xfc00fbac>
   1101c:	013fffc4 	movi	r4,-1
   11020:	0039fa06 	br	f80c <__alt_data_end+0xfc00f80c>
   11024:	d9402d17 	ldw	r5,180(sp)
   11028:	d9801e04 	addi	r6,sp,120
   1102c:	9809883a 	mov	r4,r19
   11030:	00183240 	call	18324 <__ssprint_r>
   11034:	1039c91e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   11038:	d8c02017 	ldw	r3,128(sp)
   1103c:	da000404 	addi	r8,sp,16
   11040:	003d8406 	br	10654 <__alt_data_end+0xfc010654>
   11044:	0023883a 	mov	r17,zero
   11048:	003d8306 	br	10658 <__alt_data_end+0xfc010658>
   1104c:	010000f4 	movhi	r4,3
   11050:	212a1284 	addi	r4,r4,-22454
   11054:	d9002c15 	stw	r4,176(sp)
   11058:	d9002c17 	ldw	r4,176(sp)
   1105c:	1c47883a 	add	r3,r3,r17
   11060:	10800044 	addi	r2,r2,1
   11064:	41000015 	stw	r4,0(r8)
   11068:	44400115 	stw	r17,4(r8)
   1106c:	d8c02015 	stw	r3,128(sp)
   11070:	d8801f15 	stw	r2,124(sp)
   11074:	010001c4 	movi	r4,7
   11078:	20bfcd16 	blt	r4,r2,10fb0 <__alt_data_end+0xfc010fb0>
   1107c:	42000204 	addi	r8,r8,8
   11080:	003fd306 	br	10fd0 <__alt_data_end+0xfc010fd0>
   11084:	d9402d17 	ldw	r5,180(sp)
   11088:	d9801e04 	addi	r6,sp,120
   1108c:	9809883a 	mov	r4,r19
   11090:	00183240 	call	18324 <__ssprint_r>
   11094:	1039b11e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   11098:	d8802617 	ldw	r2,152(sp)
   1109c:	d8c02017 	ldw	r3,128(sp)
   110a0:	da000404 	addi	r8,sp,16
   110a4:	003e1c06 	br	10918 <__alt_data_end+0xfc010918>
   110a8:	d8802a17 	ldw	r2,168(sp)
   110ac:	00c00184 	movi	r3,6
   110b0:	1880012e 	bgeu	r3,r2,110b8 <___svfprintf_internal_r+0x1cf8>
   110b4:	1805883a 	mov	r2,r3
   110b8:	d8802b15 	stw	r2,172(sp)
   110bc:	1000f316 	blt	r2,zero,1148c <___svfprintf_internal_r+0x20cc>
   110c0:	040000f4 	movhi	r16,3
   110c4:	d8802915 	stw	r2,164(sp)
   110c8:	dd002e15 	stw	r20,184(sp)
   110cc:	d8002a15 	stw	zero,168(sp)
   110d0:	d8003215 	stw	zero,200(sp)
   110d4:	842a1004 	addi	r16,r16,-22464
   110d8:	0039883a 	mov	fp,zero
   110dc:	003a7d06 	br	fad4 <__alt_data_end+0xfc00fad4>
   110e0:	010000f4 	movhi	r4,3
   110e4:	212a1684 	addi	r4,r4,-22438
   110e8:	d9003515 	stw	r4,212(sp)
   110ec:	003b3d06 	br	fde4 <__alt_data_end+0xfc00fde4>
   110f0:	d9402d17 	ldw	r5,180(sp)
   110f4:	d9801e04 	addi	r6,sp,120
   110f8:	9809883a 	mov	r4,r19
   110fc:	00183240 	call	18324 <__ssprint_r>
   11100:	1039961e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   11104:	d8802617 	ldw	r2,152(sp)
   11108:	d9403317 	ldw	r5,204(sp)
   1110c:	d8c02017 	ldw	r3,128(sp)
   11110:	da000404 	addi	r8,sp,16
   11114:	2885c83a 	sub	r2,r5,r2
   11118:	003e1006 	br	1095c <__alt_data_end+0xfc01095c>
   1111c:	00800044 	movi	r2,1
   11120:	10803fcc 	andi	r2,r2,255
   11124:	00c00044 	movi	r3,1
   11128:	10fa1026 	beq	r2,r3,f96c <__alt_data_end+0xfc00f96c>
   1112c:	00c00084 	movi	r3,2
   11130:	10fb8226 	beq	r2,r3,ff3c <__alt_data_end+0xfc00ff3c>
   11134:	003a4206 	br	fa40 <__alt_data_end+0xfc00fa40>
   11138:	0021883a 	mov	r16,zero
   1113c:	003e0806 	br	10960 <__alt_data_end+0xfc010960>
   11140:	07000b44 	movi	fp,45
   11144:	df002785 	stb	fp,158(sp)
   11148:	0039e306 	br	f8d8 <__alt_data_end+0xfc00f8d8>
   1114c:	d9002e17 	ldw	r4,184(sp)
   11150:	d9402f17 	ldw	r5,188(sp)
   11154:	20800017 	ldw	r2,0(r4)
   11158:	21000104 	addi	r4,r4,4
   1115c:	d9002e15 	stw	r4,184(sp)
   11160:	11400015 	stw	r5,0(r2)
   11164:	0038c106 	br	f46c <__alt_data_end+0xfc00f46c>
   11168:	00c00b44 	movi	r3,45
   1116c:	d8c02785 	stb	r3,158(sp)
   11170:	d8802915 	stw	r2,164(sp)
   11174:	dc802c17 	ldw	r18,176(sp)
   11178:	d8002a15 	stw	zero,168(sp)
   1117c:	07000b44 	movi	fp,45
   11180:	003a5106 	br	fac8 <__alt_data_end+0xfc00fac8>
   11184:	9080004c 	andi	r2,r18,1
   11188:	1000941e 	bne	r2,zero,113dc <___svfprintf_internal_r+0x201c>
   1118c:	d8802117 	ldw	r2,132(sp)
   11190:	1405c83a 	sub	r2,r2,r16
   11194:	d8803315 	stw	r2,204(sp)
   11198:	b441151e 	bne	r22,r17,115f0 <___svfprintf_internal_r+0x2230>
   1119c:	dd802617 	ldw	r22,152(sp)
   111a0:	00bfff44 	movi	r2,-3
   111a4:	b0801a16 	blt	r22,r2,11210 <___svfprintf_internal_r+0x1e50>
   111a8:	d9402a17 	ldw	r5,168(sp)
   111ac:	2d801816 	blt	r5,r22,11210 <___svfprintf_internal_r+0x1e50>
   111b0:	dd803215 	stw	r22,200(sp)
   111b4:	003f3a06 	br	10ea0 <__alt_data_end+0xfc010ea0>
   111b8:	1025883a 	mov	r18,r2
   111bc:	0039883a 	mov	fp,zero
   111c0:	00800084 	movi	r2,2
   111c4:	003fd606 	br	11120 <__alt_data_end+0xfc011120>
   111c8:	9080004c 	andi	r2,r18,1
   111cc:	103f191e 	bne	r2,zero,10e34 <__alt_data_end+0xfc010e34>
   111d0:	d8802117 	ldw	r2,132(sp)
   111d4:	003f2806 	br	10e78 <__alt_data_end+0xfc010e78>
   111d8:	010000f4 	movhi	r4,3
   111dc:	212a1284 	addi	r4,r4,-22454
   111e0:	d9002c15 	stw	r4,176(sp)
   111e4:	003c7c06 	br	103d8 <__alt_data_end+0xfc0103d8>
   111e8:	e005883a 	mov	r2,fp
   111ec:	003f2206 	br	10e78 <__alt_data_end+0xfc010e78>
   111f0:	d9002a17 	ldw	r4,168(sp)
   111f4:	df002783 	ldbu	fp,158(sp)
   111f8:	dd002e15 	stw	r20,184(sp)
   111fc:	d9002915 	stw	r4,164(sp)
   11200:	d9002b15 	stw	r4,172(sp)
   11204:	d8002a15 	stw	zero,168(sp)
   11208:	d8003215 	stw	zero,200(sp)
   1120c:	003a2a06 	br	fab8 <__alt_data_end+0xfc00fab8>
   11210:	8c7fff84 	addi	r17,r17,-2
   11214:	b5bfffc4 	addi	r22,r22,-1
   11218:	dd802615 	stw	r22,152(sp)
   1121c:	dc4022c5 	stb	r17,139(sp)
   11220:	b000c316 	blt	r22,zero,11530 <___svfprintf_internal_r+0x2170>
   11224:	00800ac4 	movi	r2,43
   11228:	d8802305 	stb	r2,140(sp)
   1122c:	00800244 	movi	r2,9
   11230:	15806e16 	blt	r2,r22,113ec <___svfprintf_internal_r+0x202c>
   11234:	00800c04 	movi	r2,48
   11238:	b5800c04 	addi	r22,r22,48
   1123c:	d8802345 	stb	r2,141(sp)
   11240:	dd802385 	stb	r22,142(sp)
   11244:	d88023c4 	addi	r2,sp,143
   11248:	df0022c4 	addi	fp,sp,139
   1124c:	d8c03317 	ldw	r3,204(sp)
   11250:	1739c83a 	sub	fp,r2,fp
   11254:	d9003317 	ldw	r4,204(sp)
   11258:	e0c7883a 	add	r3,fp,r3
   1125c:	df003b15 	stw	fp,236(sp)
   11260:	d8c02b15 	stw	r3,172(sp)
   11264:	00800044 	movi	r2,1
   11268:	1100b70e 	bge	r2,r4,11548 <___svfprintf_internal_r+0x2188>
   1126c:	d8c02b17 	ldw	r3,172(sp)
   11270:	18c00044 	addi	r3,r3,1
   11274:	d8c02b15 	stw	r3,172(sp)
   11278:	1805883a 	mov	r2,r3
   1127c:	1800b016 	blt	r3,zero,11540 <___svfprintf_internal_r+0x2180>
   11280:	d8003215 	stw	zero,200(sp)
   11284:	003f1006 	br	10ec8 <__alt_data_end+0xfc010ec8>
   11288:	d8802a17 	ldw	r2,168(sp)
   1128c:	103ec71e 	bne	r2,zero,10dac <__alt_data_end+0xfc010dac>
   11290:	dc002a15 	stw	r16,168(sp)
   11294:	003ec506 	br	10dac <__alt_data_end+0xfc010dac>
   11298:	d9402d17 	ldw	r5,180(sp)
   1129c:	d9801e04 	addi	r6,sp,120
   112a0:	9809883a 	mov	r4,r19
   112a4:	00183240 	call	18324 <__ssprint_r>
   112a8:	10392c1e 	bne	r2,zero,f75c <__alt_data_end+0xfc00f75c>
   112ac:	dc402617 	ldw	r17,152(sp)
   112b0:	d8c02017 	ldw	r3,128(sp)
   112b4:	d8801f17 	ldw	r2,124(sp)
   112b8:	da000404 	addi	r8,sp,16
   112bc:	003e7706 	br	10c9c <__alt_data_end+0xfc010c9c>
   112c0:	182f883a 	mov	r23,r3
   112c4:	d8002a15 	stw	zero,168(sp)
   112c8:	00389306 	br	f518 <__alt_data_end+0xfc00f518>
   112cc:	d8c02a17 	ldw	r3,168(sp)
   112d0:	d8802104 	addi	r2,sp,132
   112d4:	d8800315 	stw	r2,12(sp)
   112d8:	d9403617 	ldw	r5,216(sp)
   112dc:	d8802504 	addi	r2,sp,148
   112e0:	d8800215 	stw	r2,8(sp)
   112e4:	d8802604 	addi	r2,sp,152
   112e8:	d8c00015 	stw	r3,0(sp)
   112ec:	9809883a 	mov	r4,r19
   112f0:	d8800115 	stw	r2,4(sp)
   112f4:	01c000c4 	movi	r7,3
   112f8:	a00d883a 	mov	r6,r20
   112fc:	da003e15 	stw	r8,248(sp)
   11300:	0013db40 	call	13db4 <_dtoa_r>
   11304:	d9002a17 	ldw	r4,168(sp)
   11308:	da003e17 	ldw	r8,248(sp)
   1130c:	1021883a 	mov	r16,r2
   11310:	1139883a 	add	fp,r2,r4
   11314:	2007883a 	mov	r3,r4
   11318:	81000007 	ldb	r4,0(r16)
   1131c:	00800c04 	movi	r2,48
   11320:	20806f26 	beq	r4,r2,114e0 <___svfprintf_internal_r+0x2120>
   11324:	d8c02617 	ldw	r3,152(sp)
   11328:	e0f9883a 	add	fp,fp,r3
   1132c:	003ec206 	br	10e38 <__alt_data_end+0xfc010e38>
   11330:	00c00b44 	movi	r3,45
   11334:	2520003c 	xorhi	r20,r4,32768
   11338:	d8c02905 	stb	r3,164(sp)
   1133c:	003ea106 	br	10dc4 <__alt_data_end+0xfc010dc4>
   11340:	d8c03217 	ldw	r3,200(sp)
   11344:	00c0890e 	bge	zero,r3,1156c <___svfprintf_internal_r+0x21ac>
   11348:	00800044 	movi	r2,1
   1134c:	d9003317 	ldw	r4,204(sp)
   11350:	1105883a 	add	r2,r2,r4
   11354:	d8802b15 	stw	r2,172(sp)
   11358:	10005f16 	blt	r2,zero,114d8 <___svfprintf_internal_r+0x2118>
   1135c:	044019c4 	movi	r17,103
   11360:	003ed906 	br	10ec8 <__alt_data_end+0xfc010ec8>
   11364:	d9002a17 	ldw	r4,168(sp)
   11368:	20c00044 	addi	r3,r4,1
   1136c:	003e9c06 	br	10de0 <__alt_data_end+0xfc010de0>
   11370:	d9002a17 	ldw	r4,168(sp)
   11374:	00c0680e 	bge	zero,r3,11518 <___svfprintf_internal_r+0x2158>
   11378:	2000461e 	bne	r4,zero,11494 <___svfprintf_internal_r+0x20d4>
   1137c:	9480004c 	andi	r18,r18,1
   11380:	9000441e 	bne	r18,zero,11494 <___svfprintf_internal_r+0x20d4>
   11384:	1805883a 	mov	r2,r3
   11388:	1800a116 	blt	r3,zero,11610 <___svfprintf_internal_r+0x2250>
   1138c:	d8c03217 	ldw	r3,200(sp)
   11390:	d8c02b15 	stw	r3,172(sp)
   11394:	003ecc06 	br	10ec8 <__alt_data_end+0xfc010ec8>
   11398:	d9402a17 	ldw	r5,168(sp)
   1139c:	d8802104 	addi	r2,sp,132
   113a0:	d8800315 	stw	r2,12(sp)
   113a4:	d9400015 	stw	r5,0(sp)
   113a8:	d8802504 	addi	r2,sp,148
   113ac:	d9403617 	ldw	r5,216(sp)
   113b0:	d8800215 	stw	r2,8(sp)
   113b4:	d8802604 	addi	r2,sp,152
   113b8:	d8800115 	stw	r2,4(sp)
   113bc:	01c000c4 	movi	r7,3
   113c0:	a00d883a 	mov	r6,r20
   113c4:	9809883a 	mov	r4,r19
   113c8:	da003e15 	stw	r8,248(sp)
   113cc:	0013db40 	call	13db4 <_dtoa_r>
   113d0:	d8c02a17 	ldw	r3,168(sp)
   113d4:	da003e17 	ldw	r8,248(sp)
   113d8:	1021883a 	mov	r16,r2
   113dc:	00801184 	movi	r2,70
   113e0:	80f9883a 	add	fp,r16,r3
   113e4:	88bfcc26 	beq	r17,r2,11318 <__alt_data_end+0xfc011318>
   113e8:	003e9306 	br	10e38 <__alt_data_end+0xfc010e38>
   113ec:	df0022c4 	addi	fp,sp,139
   113f0:	dc002a15 	stw	r16,168(sp)
   113f4:	9829883a 	mov	r20,r19
   113f8:	e021883a 	mov	r16,fp
   113fc:	4027883a 	mov	r19,r8
   11400:	b009883a 	mov	r4,r22
   11404:	01400284 	movi	r5,10
   11408:	000cb7c0 	call	cb7c <__modsi3>
   1140c:	10800c04 	addi	r2,r2,48
   11410:	843fffc4 	addi	r16,r16,-1
   11414:	b009883a 	mov	r4,r22
   11418:	01400284 	movi	r5,10
   1141c:	80800005 	stb	r2,0(r16)
   11420:	000caf80 	call	caf8 <__divsi3>
   11424:	102d883a 	mov	r22,r2
   11428:	00800244 	movi	r2,9
   1142c:	15bff416 	blt	r2,r22,11400 <__alt_data_end+0xfc011400>
   11430:	9811883a 	mov	r8,r19
   11434:	b0800c04 	addi	r2,r22,48
   11438:	a027883a 	mov	r19,r20
   1143c:	8029883a 	mov	r20,r16
   11440:	a17fffc4 	addi	r5,r20,-1
   11444:	a0bfffc5 	stb	r2,-1(r20)
   11448:	dc002a17 	ldw	r16,168(sp)
   1144c:	2f00782e 	bgeu	r5,fp,11630 <___svfprintf_internal_r+0x2270>
   11450:	d9c02384 	addi	r7,sp,142
   11454:	3d0fc83a 	sub	r7,r7,r20
   11458:	d9002344 	addi	r4,sp,141
   1145c:	e1cf883a 	add	r7,fp,r7
   11460:	00000106 	br	11468 <___svfprintf_internal_r+0x20a8>
   11464:	28800003 	ldbu	r2,0(r5)
   11468:	20800005 	stb	r2,0(r4)
   1146c:	21000044 	addi	r4,r4,1
   11470:	29400044 	addi	r5,r5,1
   11474:	21fffb1e 	bne	r4,r7,11464 <__alt_data_end+0xfc011464>
   11478:	d8802304 	addi	r2,sp,140
   1147c:	1505c83a 	sub	r2,r2,r20
   11480:	d8c02344 	addi	r3,sp,141
   11484:	1885883a 	add	r2,r3,r2
   11488:	003f7006 	br	1124c <__alt_data_end+0xfc01124c>
   1148c:	0005883a 	mov	r2,zero
   11490:	003f0b06 	br	110c0 <__alt_data_end+0xfc0110c0>
   11494:	d9002a17 	ldw	r4,168(sp)
   11498:	d8c03217 	ldw	r3,200(sp)
   1149c:	20800044 	addi	r2,r4,1
   114a0:	1885883a 	add	r2,r3,r2
   114a4:	d8802b15 	stw	r2,172(sp)
   114a8:	103e870e 	bge	r2,zero,10ec8 <__alt_data_end+0xfc010ec8>
   114ac:	0005883a 	mov	r2,zero
   114b0:	003e8506 	br	10ec8 <__alt_data_end+0xfc010ec8>
   114b4:	010000f4 	movhi	r4,3
   114b8:	212a1284 	addi	r4,r4,-22454
   114bc:	d9002c15 	stw	r4,176(sp)
   114c0:	003cc506 	br	107d8 <__alt_data_end+0xfc0107d8>
   114c4:	d8c03217 	ldw	r3,200(sp)
   114c8:	18c00044 	addi	r3,r3,1
   114cc:	d8c02b15 	stw	r3,172(sp)
   114d0:	1805883a 	mov	r2,r3
   114d4:	183fa10e 	bge	r3,zero,1135c <__alt_data_end+0xfc01135c>
   114d8:	0005883a 	mov	r2,zero
   114dc:	003f9f06 	br	1135c <__alt_data_end+0xfc01135c>
   114e0:	d9003617 	ldw	r4,216(sp)
   114e4:	000d883a 	mov	r6,zero
   114e8:	000f883a 	mov	r7,zero
   114ec:	a00b883a 	mov	r5,r20
   114f0:	d8c03d15 	stw	r3,244(sp)
   114f4:	da003e15 	stw	r8,248(sp)
   114f8:	001d7140 	call	1d714 <__eqdf2>
   114fc:	d8c03d17 	ldw	r3,244(sp)
   11500:	da003e17 	ldw	r8,248(sp)
   11504:	103f8726 	beq	r2,zero,11324 <__alt_data_end+0xfc011324>
   11508:	00800044 	movi	r2,1
   1150c:	10c7c83a 	sub	r3,r2,r3
   11510:	d8c02615 	stw	r3,152(sp)
   11514:	003f8406 	br	11328 <__alt_data_end+0xfc011328>
   11518:	20000e1e 	bne	r4,zero,11554 <___svfprintf_internal_r+0x2194>
   1151c:	9480004c 	andi	r18,r18,1
   11520:	90000c1e 	bne	r18,zero,11554 <___svfprintf_internal_r+0x2194>
   11524:	00800044 	movi	r2,1
   11528:	d8802b15 	stw	r2,172(sp)
   1152c:	003e6606 	br	10ec8 <__alt_data_end+0xfc010ec8>
   11530:	00800b44 	movi	r2,45
   11534:	05adc83a 	sub	r22,zero,r22
   11538:	d8802305 	stb	r2,140(sp)
   1153c:	003f3b06 	br	1122c <__alt_data_end+0xfc01122c>
   11540:	0005883a 	mov	r2,zero
   11544:	003f4e06 	br	11280 <__alt_data_end+0xfc011280>
   11548:	90a4703a 	and	r18,r18,r2
   1154c:	903f4a26 	beq	r18,zero,11278 <__alt_data_end+0xfc011278>
   11550:	003f4606 	br	1126c <__alt_data_end+0xfc01126c>
   11554:	d8c02a17 	ldw	r3,168(sp)
   11558:	18c00084 	addi	r3,r3,2
   1155c:	d8c02b15 	stw	r3,172(sp)
   11560:	1805883a 	mov	r2,r3
   11564:	183e580e 	bge	r3,zero,10ec8 <__alt_data_end+0xfc010ec8>
   11568:	003fd006 	br	114ac <__alt_data_end+0xfc0114ac>
   1156c:	00800084 	movi	r2,2
   11570:	10c5c83a 	sub	r2,r2,r3
   11574:	003f7506 	br	1134c <__alt_data_end+0xfc01134c>
   11578:	d9402e17 	ldw	r5,184(sp)
   1157c:	d9002e17 	ldw	r4,184(sp)
   11580:	bc400043 	ldbu	r17,1(r23)
   11584:	29400017 	ldw	r5,0(r5)
   11588:	20800104 	addi	r2,r4,4
   1158c:	d8802e15 	stw	r2,184(sp)
   11590:	d9402a15 	stw	r5,168(sp)
   11594:	182f883a 	mov	r23,r3
   11598:	283df10e 	bge	r5,zero,10d60 <__alt_data_end+0xfc010d60>
   1159c:	8c403fcc 	andi	r17,r17,255
   115a0:	017fffc4 	movi	r5,-1
   115a4:	8c40201c 	xori	r17,r17,128
   115a8:	d9402a15 	stw	r5,168(sp)
   115ac:	8c7fe004 	addi	r17,r17,-128
   115b0:	0037d806 	br	f514 <__alt_data_end+0xfc00f514>
   115b4:	9080004c 	andi	r2,r18,1
   115b8:	0039883a 	mov	fp,zero
   115bc:	10000726 	beq	r2,zero,115dc <___svfprintf_internal_r+0x221c>
   115c0:	d8c02817 	ldw	r3,160(sp)
   115c4:	dc001dc4 	addi	r16,sp,119
   115c8:	00800c04 	movi	r2,48
   115cc:	1c07c83a 	sub	r3,r3,r16
   115d0:	d8801dc5 	stb	r2,119(sp)
   115d4:	d8c02b15 	stw	r3,172(sp)
   115d8:	00393106 	br	faa0 <__alt_data_end+0xfc00faa0>
   115dc:	d8002b15 	stw	zero,172(sp)
   115e0:	dc001e04 	addi	r16,sp,120
   115e4:	00392e06 	br	faa0 <__alt_data_end+0xfc00faa0>
   115e8:	0005883a 	mov	r2,zero
   115ec:	003e3306 	br	10ebc <__alt_data_end+0xfc010ebc>
   115f0:	dd802617 	ldw	r22,152(sp)
   115f4:	003f0706 	br	11214 <__alt_data_end+0xfc011214>
   115f8:	d8c02b03 	ldbu	r3,172(sp)
   115fc:	d8c02785 	stb	r3,158(sp)
   11600:	003a3506 	br	fed8 <__alt_data_end+0xfc00fed8>
   11604:	d8c02b03 	ldbu	r3,172(sp)
   11608:	d8c02785 	stb	r3,158(sp)
   1160c:	003a1706 	br	fe6c <__alt_data_end+0xfc00fe6c>
   11610:	0005883a 	mov	r2,zero
   11614:	003f5d06 	br	1138c <__alt_data_end+0xfc01138c>
   11618:	d8c02b03 	ldbu	r3,172(sp)
   1161c:	d8c02785 	stb	r3,158(sp)
   11620:	0038f306 	br	f9f0 <__alt_data_end+0xfc00f9f0>
   11624:	d8c02b03 	ldbu	r3,172(sp)
   11628:	d8c02785 	stb	r3,158(sp)
   1162c:	0038be06 	br	f928 <__alt_data_end+0xfc00f928>
   11630:	d8802344 	addi	r2,sp,141
   11634:	003f0506 	br	1124c <__alt_data_end+0xfc01124c>
   11638:	d8c02b03 	ldbu	r3,172(sp)
   1163c:	d8c02785 	stb	r3,158(sp)
   11640:	00388b06 	br	f870 <__alt_data_end+0xfc00f870>
   11644:	d8c02b03 	ldbu	r3,172(sp)
   11648:	d8c02785 	stb	r3,158(sp)
   1164c:	003ad706 	br	101ac <__alt_data_end+0xfc0101ac>
   11650:	d9403917 	ldw	r5,228(sp)
   11654:	00800304 	movi	r2,12
   11658:	28800015 	stw	r2,0(r5)
   1165c:	00bfffc4 	movi	r2,-1
   11660:	00384306 	br	f770 <__alt_data_end+0xfc00f770>
   11664:	d8c02b03 	ldbu	r3,172(sp)
   11668:	d8c02785 	stb	r3,158(sp)
   1166c:	003ab606 	br	10148 <__alt_data_end+0xfc010148>
   11670:	d8c02b03 	ldbu	r3,172(sp)
   11674:	d8c02785 	stb	r3,158(sp)
   11678:	003a8906 	br	100a0 <__alt_data_end+0xfc0100a0>

0001167c <_times_r>:
   1167c:	2809883a 	mov	r4,r5
   11680:	001f72c1 	jmpi	1f72c <times>

00011684 <___vfprintf_internal_r>:
   11684:	deffb804 	addi	sp,sp,-288
   11688:	dfc04715 	stw	ra,284(sp)
   1168c:	ddc04515 	stw	r23,276(sp)
   11690:	dd404315 	stw	r21,268(sp)
   11694:	d9002d15 	stw	r4,180(sp)
   11698:	282f883a 	mov	r23,r5
   1169c:	302b883a 	mov	r21,r6
   116a0:	d9c02e15 	stw	r7,184(sp)
   116a4:	df004615 	stw	fp,280(sp)
   116a8:	dd804415 	stw	r22,272(sp)
   116ac:	dd004215 	stw	r20,264(sp)
   116b0:	dcc04115 	stw	r19,260(sp)
   116b4:	dc804015 	stw	r18,256(sp)
   116b8:	dc403f15 	stw	r17,252(sp)
   116bc:	dc003e15 	stw	r16,248(sp)
   116c0:	00165c40 	call	165c4 <_localeconv_r>
   116c4:	10800017 	ldw	r2,0(r2)
   116c8:	1009883a 	mov	r4,r2
   116cc:	d8803415 	stw	r2,208(sp)
   116d0:	000f3280 	call	f328 <strlen>
   116d4:	d8803715 	stw	r2,220(sp)
   116d8:	d8802d17 	ldw	r2,180(sp)
   116dc:	10000226 	beq	r2,zero,116e8 <___vfprintf_internal_r+0x64>
   116e0:	10800e17 	ldw	r2,56(r2)
   116e4:	1000fb26 	beq	r2,zero,11ad4 <___vfprintf_internal_r+0x450>
   116e8:	b880030b 	ldhu	r2,12(r23)
   116ec:	10c8000c 	andi	r3,r2,8192
   116f0:	1800061e 	bne	r3,zero,1170c <___vfprintf_internal_r+0x88>
   116f4:	b9001917 	ldw	r4,100(r23)
   116f8:	00f7ffc4 	movi	r3,-8193
   116fc:	10880014 	ori	r2,r2,8192
   11700:	20c6703a 	and	r3,r4,r3
   11704:	b880030d 	sth	r2,12(r23)
   11708:	b8c01915 	stw	r3,100(r23)
   1170c:	10c0020c 	andi	r3,r2,8
   11710:	1800c326 	beq	r3,zero,11a20 <___vfprintf_internal_r+0x39c>
   11714:	b8c00417 	ldw	r3,16(r23)
   11718:	1800c126 	beq	r3,zero,11a20 <___vfprintf_internal_r+0x39c>
   1171c:	1080068c 	andi	r2,r2,26
   11720:	00c00284 	movi	r3,10
   11724:	10c0c626 	beq	r2,r3,11a40 <___vfprintf_internal_r+0x3bc>
   11728:	d8c00404 	addi	r3,sp,16
   1172c:	050000f4 	movhi	r20,3
   11730:	d9001e04 	addi	r4,sp,120
   11734:	a52a1a84 	addi	r20,r20,-22422
   11738:	d8c01e15 	stw	r3,120(sp)
   1173c:	d8002015 	stw	zero,128(sp)
   11740:	d8001f15 	stw	zero,124(sp)
   11744:	d8003315 	stw	zero,204(sp)
   11748:	d8003615 	stw	zero,216(sp)
   1174c:	d8003815 	stw	zero,224(sp)
   11750:	1811883a 	mov	r8,r3
   11754:	d8003915 	stw	zero,228(sp)
   11758:	d8003a15 	stw	zero,232(sp)
   1175c:	d8002f15 	stw	zero,188(sp)
   11760:	d9002815 	stw	r4,160(sp)
   11764:	a8800007 	ldb	r2,0(r21)
   11768:	10028b26 	beq	r2,zero,12198 <___vfprintf_internal_r+0xb14>
   1176c:	00c00944 	movi	r3,37
   11770:	a823883a 	mov	r17,r21
   11774:	10c0021e 	bne	r2,r3,11780 <___vfprintf_internal_r+0xfc>
   11778:	00001406 	br	117cc <___vfprintf_internal_r+0x148>
   1177c:	10c00326 	beq	r2,r3,1178c <___vfprintf_internal_r+0x108>
   11780:	8c400044 	addi	r17,r17,1
   11784:	88800007 	ldb	r2,0(r17)
   11788:	103ffc1e 	bne	r2,zero,1177c <__alt_data_end+0xfc01177c>
   1178c:	8d61c83a 	sub	r16,r17,r21
   11790:	80000e26 	beq	r16,zero,117cc <___vfprintf_internal_r+0x148>
   11794:	d8c02017 	ldw	r3,128(sp)
   11798:	d8801f17 	ldw	r2,124(sp)
   1179c:	45400015 	stw	r21,0(r8)
   117a0:	1c07883a 	add	r3,r3,r16
   117a4:	10800044 	addi	r2,r2,1
   117a8:	d8c02015 	stw	r3,128(sp)
   117ac:	44000115 	stw	r16,4(r8)
   117b0:	d8801f15 	stw	r2,124(sp)
   117b4:	00c001c4 	movi	r3,7
   117b8:	1880a916 	blt	r3,r2,11a60 <___vfprintf_internal_r+0x3dc>
   117bc:	42000204 	addi	r8,r8,8
   117c0:	d9402f17 	ldw	r5,188(sp)
   117c4:	2c0b883a 	add	r5,r5,r16
   117c8:	d9402f15 	stw	r5,188(sp)
   117cc:	88800007 	ldb	r2,0(r17)
   117d0:	1000aa26 	beq	r2,zero,11a7c <___vfprintf_internal_r+0x3f8>
   117d4:	8d400044 	addi	r21,r17,1
   117d8:	8c400047 	ldb	r17,1(r17)
   117dc:	0021883a 	mov	r16,zero
   117e0:	00bfffc4 	movi	r2,-1
   117e4:	0025883a 	mov	r18,zero
   117e8:	dc002905 	stb	r16,164(sp)
   117ec:	d8002785 	stb	zero,158(sp)
   117f0:	d8002b05 	stb	zero,172(sp)
   117f4:	d8802a15 	stw	r2,168(sp)
   117f8:	d8003115 	stw	zero,196(sp)
   117fc:	04c01604 	movi	r19,88
   11800:	05800244 	movi	r22,9
   11804:	9021883a 	mov	r16,r18
   11808:	4039883a 	mov	fp,r8
   1180c:	ad400044 	addi	r21,r21,1
   11810:	88bff804 	addi	r2,r17,-32
   11814:	98833236 	bltu	r19,r2,124e0 <___vfprintf_internal_r+0xe5c>
   11818:	100490ba 	slli	r2,r2,2
   1181c:	00c00074 	movhi	r3,1
   11820:	18c60c04 	addi	r3,r3,6192
   11824:	10c5883a 	add	r2,r2,r3
   11828:	10800017 	ldw	r2,0(r2)
   1182c:	1000683a 	jmp	r2
   11830:	000123d8 	cmpnei	zero,zero,1167
   11834:	000124e0 	cmpeqi	zero,zero,1171
   11838:	000124e0 	cmpeqi	zero,zero,1171
   1183c:	000123f8 	rdprs	zero,zero,1167
   11840:	000124e0 	cmpeqi	zero,zero,1171
   11844:	000124e0 	cmpeqi	zero,zero,1171
   11848:	000124e0 	cmpeqi	zero,zero,1171
   1184c:	000124e0 	cmpeqi	zero,zero,1171
   11850:	000124e0 	cmpeqi	zero,zero,1171
   11854:	000124e0 	cmpeqi	zero,zero,1171
   11858:	00011ae0 	cmpeqi	zero,zero,1131
   1185c:	000122e8 	cmpgeui	zero,zero,1163
   11860:	000124e0 	cmpeqi	zero,zero,1171
   11864:	000119a4 	muli	zero,zero,1126
   11868:	00011b04 	movi	zero,1132
   1186c:	000124e0 	cmpeqi	zero,zero,1171
   11870:	00011b54 	movui	zero,1133
   11874:	00011b60 	cmpeqi	zero,zero,1133
   11878:	00011b60 	cmpeqi	zero,zero,1133
   1187c:	00011b60 	cmpeqi	zero,zero,1133
   11880:	00011b60 	cmpeqi	zero,zero,1133
   11884:	00011b60 	cmpeqi	zero,zero,1133
   11888:	00011b60 	cmpeqi	zero,zero,1133
   1188c:	00011b60 	cmpeqi	zero,zero,1133
   11890:	00011b60 	cmpeqi	zero,zero,1133
   11894:	00011b60 	cmpeqi	zero,zero,1133
   11898:	000124e0 	cmpeqi	zero,zero,1171
   1189c:	000124e0 	cmpeqi	zero,zero,1171
   118a0:	000124e0 	cmpeqi	zero,zero,1171
   118a4:	000124e0 	cmpeqi	zero,zero,1171
   118a8:	000124e0 	cmpeqi	zero,zero,1171
   118ac:	000124e0 	cmpeqi	zero,zero,1171
   118b0:	000124e0 	cmpeqi	zero,zero,1171
   118b4:	000124e0 	cmpeqi	zero,zero,1171
   118b8:	000124e0 	cmpeqi	zero,zero,1171
   118bc:	000124e0 	cmpeqi	zero,zero,1171
   118c0:	00011b9c 	xori	zero,zero,1134
   118c4:	00011c64 	muli	zero,zero,1137
   118c8:	000124e0 	cmpeqi	zero,zero,1171
   118cc:	00011c64 	muli	zero,zero,1137
   118d0:	000124e0 	cmpeqi	zero,zero,1171
   118d4:	000124e0 	cmpeqi	zero,zero,1171
   118d8:	000124e0 	cmpeqi	zero,zero,1171
   118dc:	000124e0 	cmpeqi	zero,zero,1171
   118e0:	00011d10 	cmplti	zero,zero,1140
   118e4:	000124e0 	cmpeqi	zero,zero,1171
   118e8:	000124e0 	cmpeqi	zero,zero,1171
   118ec:	00011d1c 	xori	zero,zero,1140
   118f0:	000124e0 	cmpeqi	zero,zero,1171
   118f4:	000124e0 	cmpeqi	zero,zero,1171
   118f8:	000124e0 	cmpeqi	zero,zero,1171
   118fc:	000124e0 	cmpeqi	zero,zero,1171
   11900:	000124e0 	cmpeqi	zero,zero,1171
   11904:	000121a0 	cmpeqi	zero,zero,1158
   11908:	000124e0 	cmpeqi	zero,zero,1171
   1190c:	000124e0 	cmpeqi	zero,zero,1171
   11910:	0001220c 	andi	zero,zero,1160
   11914:	000124e0 	cmpeqi	zero,zero,1171
   11918:	000124e0 	cmpeqi	zero,zero,1171
   1191c:	000124e0 	cmpeqi	zero,zero,1171
   11920:	000124e0 	cmpeqi	zero,zero,1171
   11924:	000124e0 	cmpeqi	zero,zero,1171
   11928:	000124e0 	cmpeqi	zero,zero,1171
   1192c:	000124e0 	cmpeqi	zero,zero,1171
   11930:	000124e0 	cmpeqi	zero,zero,1171
   11934:	000124e0 	cmpeqi	zero,zero,1171
   11938:	000124e0 	cmpeqi	zero,zero,1171
   1193c:	00012484 	movi	zero,1170
   11940:	00012404 	movi	zero,1168
   11944:	00011c64 	muli	zero,zero,1137
   11948:	00011c64 	muli	zero,zero,1137
   1194c:	00011c64 	muli	zero,zero,1137
   11950:	00012424 	muli	zero,zero,1168
   11954:	00012404 	movi	zero,1168
   11958:	000124e0 	cmpeqi	zero,zero,1171
   1195c:	000124e0 	cmpeqi	zero,zero,1171
   11960:	00012430 	cmpltui	zero,zero,1168
   11964:	000124e0 	cmpeqi	zero,zero,1171
   11968:	00012444 	movi	zero,1169
   1196c:	000122c8 	cmpgei	zero,zero,1163
   11970:	000119b0 	cmpltui	zero,zero,1126
   11974:	00012300 	call	1230 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x29c>
   11978:	000124e0 	cmpeqi	zero,zero,1171
   1197c:	0001230c 	andi	zero,zero,1164
   11980:	000124e0 	cmpeqi	zero,zero,1171
   11984:	00012370 	cmpltui	zero,zero,1165
   11988:	000124e0 	cmpeqi	zero,zero,1171
   1198c:	000124e0 	cmpeqi	zero,zero,1171
   11990:	00012390 	cmplti	zero,zero,1166
   11994:	d8c03117 	ldw	r3,196(sp)
   11998:	d8802e15 	stw	r2,184(sp)
   1199c:	00c7c83a 	sub	r3,zero,r3
   119a0:	d8c03115 	stw	r3,196(sp)
   119a4:	84000114 	ori	r16,r16,4
   119a8:	ac400007 	ldb	r17,0(r21)
   119ac:	003f9706 	br	1180c <__alt_data_end+0xfc01180c>
   119b0:	00800c04 	movi	r2,48
   119b4:	d8802705 	stb	r2,156(sp)
   119b8:	00801e04 	movi	r2,120
   119bc:	d8802745 	stb	r2,157(sp)
   119c0:	d9002a17 	ldw	r4,168(sp)
   119c4:	d8802e17 	ldw	r2,184(sp)
   119c8:	d8002785 	stb	zero,158(sp)
   119cc:	e011883a 	mov	r8,fp
   119d0:	10c00104 	addi	r3,r2,4
   119d4:	14c00017 	ldw	r19,0(r2)
   119d8:	002d883a 	mov	r22,zero
   119dc:	80800094 	ori	r2,r16,2
   119e0:	2002ca16 	blt	r4,zero,1250c <___vfprintf_internal_r+0xe88>
   119e4:	00bfdfc4 	movi	r2,-129
   119e8:	80a4703a 	and	r18,r16,r2
   119ec:	d8c02e15 	stw	r3,184(sp)
   119f0:	94800094 	ori	r18,r18,2
   119f4:	9802b41e 	bne	r19,zero,124c8 <___vfprintf_internal_r+0xe44>
   119f8:	014000f4 	movhi	r5,3
   119fc:	296a0b04 	addi	r5,r5,-22484
   11a00:	d9403915 	stw	r5,228(sp)
   11a04:	04401e04 	movi	r17,120
   11a08:	d8802a17 	ldw	r2,168(sp)
   11a0c:	0039883a 	mov	fp,zero
   11a10:	1001fa26 	beq	r2,zero,121fc <___vfprintf_internal_r+0xb78>
   11a14:	0027883a 	mov	r19,zero
   11a18:	002d883a 	mov	r22,zero
   11a1c:	00021906 	br	12284 <___vfprintf_internal_r+0xc00>
   11a20:	d9002d17 	ldw	r4,180(sp)
   11a24:	b80b883a 	mov	r5,r23
   11a28:	0013a380 	call	13a38 <__swsetup_r>
   11a2c:	1005dc1e 	bne	r2,zero,131a0 <___vfprintf_internal_r+0x1b1c>
   11a30:	b880030b 	ldhu	r2,12(r23)
   11a34:	00c00284 	movi	r3,10
   11a38:	1080068c 	andi	r2,r2,26
   11a3c:	10ff3a1e 	bne	r2,r3,11728 <__alt_data_end+0xfc011728>
   11a40:	b880038f 	ldh	r2,14(r23)
   11a44:	103f3816 	blt	r2,zero,11728 <__alt_data_end+0xfc011728>
   11a48:	d9c02e17 	ldw	r7,184(sp)
   11a4c:	d9002d17 	ldw	r4,180(sp)
   11a50:	a80d883a 	mov	r6,r21
   11a54:	b80b883a 	mov	r5,r23
   11a58:	001397c0 	call	1397c <__sbprintf>
   11a5c:	00001106 	br	11aa4 <___vfprintf_internal_r+0x420>
   11a60:	d9002d17 	ldw	r4,180(sp)
   11a64:	d9801e04 	addi	r6,sp,120
   11a68:	b80b883a 	mov	r5,r23
   11a6c:	00199900 	call	19990 <__sprint_r>
   11a70:	1000081e 	bne	r2,zero,11a94 <___vfprintf_internal_r+0x410>
   11a74:	da000404 	addi	r8,sp,16
   11a78:	003f5106 	br	117c0 <__alt_data_end+0xfc0117c0>
   11a7c:	d8802017 	ldw	r2,128(sp)
   11a80:	10000426 	beq	r2,zero,11a94 <___vfprintf_internal_r+0x410>
   11a84:	d9002d17 	ldw	r4,180(sp)
   11a88:	d9801e04 	addi	r6,sp,120
   11a8c:	b80b883a 	mov	r5,r23
   11a90:	00199900 	call	19990 <__sprint_r>
   11a94:	b880030b 	ldhu	r2,12(r23)
   11a98:	1080100c 	andi	r2,r2,64
   11a9c:	1005c01e 	bne	r2,zero,131a0 <___vfprintf_internal_r+0x1b1c>
   11aa0:	d8802f17 	ldw	r2,188(sp)
   11aa4:	dfc04717 	ldw	ra,284(sp)
   11aa8:	df004617 	ldw	fp,280(sp)
   11aac:	ddc04517 	ldw	r23,276(sp)
   11ab0:	dd804417 	ldw	r22,272(sp)
   11ab4:	dd404317 	ldw	r21,268(sp)
   11ab8:	dd004217 	ldw	r20,264(sp)
   11abc:	dcc04117 	ldw	r19,260(sp)
   11ac0:	dc804017 	ldw	r18,256(sp)
   11ac4:	dc403f17 	ldw	r17,252(sp)
   11ac8:	dc003e17 	ldw	r16,248(sp)
   11acc:	dec04804 	addi	sp,sp,288
   11ad0:	f800283a 	ret
   11ad4:	d9002d17 	ldw	r4,180(sp)
   11ad8:	0015a440 	call	15a44 <__sinit>
   11adc:	003f0206 	br	116e8 <__alt_data_end+0xfc0116e8>
   11ae0:	d9002e17 	ldw	r4,184(sp)
   11ae4:	d9402e17 	ldw	r5,184(sp)
   11ae8:	21000017 	ldw	r4,0(r4)
   11aec:	28800104 	addi	r2,r5,4
   11af0:	d9003115 	stw	r4,196(sp)
   11af4:	203fa716 	blt	r4,zero,11994 <__alt_data_end+0xfc011994>
   11af8:	d8802e15 	stw	r2,184(sp)
   11afc:	ac400007 	ldb	r17,0(r21)
   11b00:	003f4206 	br	1180c <__alt_data_end+0xfc01180c>
   11b04:	ac400007 	ldb	r17,0(r21)
   11b08:	01000a84 	movi	r4,42
   11b0c:	a8c00044 	addi	r3,r21,1
   11b10:	89075826 	beq	r17,r4,13874 <___vfprintf_internal_r+0x21f0>
   11b14:	8cbff404 	addi	r18,r17,-48
   11b18:	b486ae36 	bltu	r22,r18,135d4 <___vfprintf_internal_r+0x1f50>
   11b1c:	0009883a 	mov	r4,zero
   11b20:	1823883a 	mov	r17,r3
   11b24:	01400284 	movi	r5,10
   11b28:	000ccac0 	call	ccac <__mulsi3>
   11b2c:	88c00007 	ldb	r3,0(r17)
   11b30:	1489883a 	add	r4,r2,r18
   11b34:	8d400044 	addi	r21,r17,1
   11b38:	1cbff404 	addi	r18,r3,-48
   11b3c:	a823883a 	mov	r17,r21
   11b40:	b4bff82e 	bgeu	r22,r18,11b24 <__alt_data_end+0xfc011b24>
   11b44:	1823883a 	mov	r17,r3
   11b48:	2005f616 	blt	r4,zero,13324 <___vfprintf_internal_r+0x1ca0>
   11b4c:	d9002a15 	stw	r4,168(sp)
   11b50:	003f2f06 	br	11810 <__alt_data_end+0xfc011810>
   11b54:	84002014 	ori	r16,r16,128
   11b58:	ac400007 	ldb	r17,0(r21)
   11b5c:	003f2b06 	br	1180c <__alt_data_end+0xfc01180c>
   11b60:	8cbff404 	addi	r18,r17,-48
   11b64:	d8003115 	stw	zero,196(sp)
   11b68:	0009883a 	mov	r4,zero
   11b6c:	a823883a 	mov	r17,r21
   11b70:	01400284 	movi	r5,10
   11b74:	000ccac0 	call	ccac <__mulsi3>
   11b78:	88c00007 	ldb	r3,0(r17)
   11b7c:	9089883a 	add	r4,r18,r2
   11b80:	ad400044 	addi	r21,r21,1
   11b84:	1cbff404 	addi	r18,r3,-48
   11b88:	a823883a 	mov	r17,r21
   11b8c:	b4bff82e 	bgeu	r22,r18,11b70 <__alt_data_end+0xfc011b70>
   11b90:	1823883a 	mov	r17,r3
   11b94:	d9003115 	stw	r4,196(sp)
   11b98:	003f1d06 	br	11810 <__alt_data_end+0xfc011810>
   11b9c:	8025883a 	mov	r18,r16
   11ba0:	dc002903 	ldbu	r16,164(sp)
   11ba4:	e011883a 	mov	r8,fp
   11ba8:	84003fcc 	andi	r16,r16,255
   11bac:	8007531e 	bne	r16,zero,138fc <___vfprintf_internal_r+0x2278>
   11bb0:	94800414 	ori	r18,r18,16
   11bb4:	9080080c 	andi	r2,r18,32
   11bb8:	1003a326 	beq	r2,zero,12a48 <___vfprintf_internal_r+0x13c4>
   11bbc:	d9002e17 	ldw	r4,184(sp)
   11bc0:	20800117 	ldw	r2,4(r4)
   11bc4:	24c00017 	ldw	r19,0(r4)
   11bc8:	21000204 	addi	r4,r4,8
   11bcc:	d9002e15 	stw	r4,184(sp)
   11bd0:	102d883a 	mov	r22,r2
   11bd4:	10047316 	blt	r2,zero,12da4 <___vfprintf_internal_r+0x1720>
   11bd8:	d9002a17 	ldw	r4,168(sp)
   11bdc:	df002783 	ldbu	fp,158(sp)
   11be0:	2003e416 	blt	r4,zero,12b74 <___vfprintf_internal_r+0x14f0>
   11be4:	00ffdfc4 	movi	r3,-129
   11be8:	9d84b03a 	or	r2,r19,r22
   11bec:	90e4703a 	and	r18,r18,r3
   11bf0:	10018026 	beq	r2,zero,121f4 <___vfprintf_internal_r+0xb70>
   11bf4:	b003ab26 	beq	r22,zero,12aa4 <___vfprintf_internal_r+0x1420>
   11bf8:	dc402915 	stw	r17,164(sp)
   11bfc:	dc001e04 	addi	r16,sp,120
   11c00:	b023883a 	mov	r17,r22
   11c04:	402d883a 	mov	r22,r8
   11c08:	9809883a 	mov	r4,r19
   11c0c:	880b883a 	mov	r5,r17
   11c10:	01800284 	movi	r6,10
   11c14:	000f883a 	mov	r7,zero
   11c18:	001bed40 	call	1bed4 <__umoddi3>
   11c1c:	10800c04 	addi	r2,r2,48
   11c20:	843fffc4 	addi	r16,r16,-1
   11c24:	9809883a 	mov	r4,r19
   11c28:	880b883a 	mov	r5,r17
   11c2c:	80800005 	stb	r2,0(r16)
   11c30:	01800284 	movi	r6,10
   11c34:	000f883a 	mov	r7,zero
   11c38:	001b8d80 	call	1b8d8 <__udivdi3>
   11c3c:	1027883a 	mov	r19,r2
   11c40:	10c4b03a 	or	r2,r2,r3
   11c44:	1823883a 	mov	r17,r3
   11c48:	103fef1e 	bne	r2,zero,11c08 <__alt_data_end+0xfc011c08>
   11c4c:	d8c02817 	ldw	r3,160(sp)
   11c50:	dc402917 	ldw	r17,164(sp)
   11c54:	b011883a 	mov	r8,r22
   11c58:	1c07c83a 	sub	r3,r3,r16
   11c5c:	d8c02b15 	stw	r3,172(sp)
   11c60:	00005f06 	br	11de0 <___vfprintf_internal_r+0x75c>
   11c64:	8025883a 	mov	r18,r16
   11c68:	dc002903 	ldbu	r16,164(sp)
   11c6c:	e011883a 	mov	r8,fp
   11c70:	84003fcc 	andi	r16,r16,255
   11c74:	80071e1e 	bne	r16,zero,138f0 <___vfprintf_internal_r+0x226c>
   11c78:	9080020c 	andi	r2,r18,8
   11c7c:	1004af26 	beq	r2,zero,12f3c <___vfprintf_internal_r+0x18b8>
   11c80:	d9002e17 	ldw	r4,184(sp)
   11c84:	d9402e17 	ldw	r5,184(sp)
   11c88:	d8802e17 	ldw	r2,184(sp)
   11c8c:	21000017 	ldw	r4,0(r4)
   11c90:	29400117 	ldw	r5,4(r5)
   11c94:	10800204 	addi	r2,r2,8
   11c98:	d9003615 	stw	r4,216(sp)
   11c9c:	d9403815 	stw	r5,224(sp)
   11ca0:	d8802e15 	stw	r2,184(sp)
   11ca4:	d9003617 	ldw	r4,216(sp)
   11ca8:	d9403817 	ldw	r5,224(sp)
   11cac:	da003d15 	stw	r8,244(sp)
   11cb0:	04000044 	movi	r16,1
   11cb4:	00181740 	call	18174 <__fpclassifyd>
   11cb8:	da003d17 	ldw	r8,244(sp)
   11cbc:	1404441e 	bne	r2,r16,12dd0 <___vfprintf_internal_r+0x174c>
   11cc0:	d9003617 	ldw	r4,216(sp)
   11cc4:	d9403817 	ldw	r5,224(sp)
   11cc8:	000d883a 	mov	r6,zero
   11ccc:	000f883a 	mov	r7,zero
   11cd0:	001d8780 	call	1d878 <__ledf2>
   11cd4:	da003d17 	ldw	r8,244(sp)
   11cd8:	1005e316 	blt	r2,zero,13468 <___vfprintf_internal_r+0x1de4>
   11cdc:	df002783 	ldbu	fp,158(sp)
   11ce0:	008011c4 	movi	r2,71
   11ce4:	1445580e 	bge	r2,r17,13248 <___vfprintf_internal_r+0x1bc4>
   11ce8:	040000f4 	movhi	r16,3
   11cec:	842a0304 	addi	r16,r16,-22516
   11cf0:	00c000c4 	movi	r3,3
   11cf4:	00bfdfc4 	movi	r2,-129
   11cf8:	d8c02915 	stw	r3,164(sp)
   11cfc:	90a4703a 	and	r18,r18,r2
   11d00:	d8c02b15 	stw	r3,172(sp)
   11d04:	d8002a15 	stw	zero,168(sp)
   11d08:	d8003215 	stw	zero,200(sp)
   11d0c:	00003a06 	br	11df8 <___vfprintf_internal_r+0x774>
   11d10:	84000214 	ori	r16,r16,8
   11d14:	ac400007 	ldb	r17,0(r21)
   11d18:	003ebc06 	br	1180c <__alt_data_end+0xfc01180c>
   11d1c:	8025883a 	mov	r18,r16
   11d20:	dc002903 	ldbu	r16,164(sp)
   11d24:	e011883a 	mov	r8,fp
   11d28:	84003fcc 	andi	r16,r16,255
   11d2c:	8007001e 	bne	r16,zero,13930 <___vfprintf_internal_r+0x22ac>
   11d30:	94800414 	ori	r18,r18,16
   11d34:	9080080c 	andi	r2,r18,32
   11d38:	1002fa26 	beq	r2,zero,12924 <___vfprintf_internal_r+0x12a0>
   11d3c:	d9002e17 	ldw	r4,184(sp)
   11d40:	d9402a17 	ldw	r5,168(sp)
   11d44:	d8002785 	stb	zero,158(sp)
   11d48:	20800204 	addi	r2,r4,8
   11d4c:	24c00017 	ldw	r19,0(r4)
   11d50:	25800117 	ldw	r22,4(r4)
   11d54:	2804b116 	blt	r5,zero,1301c <___vfprintf_internal_r+0x1998>
   11d58:	013fdfc4 	movi	r4,-129
   11d5c:	9d86b03a 	or	r3,r19,r22
   11d60:	d8802e15 	stw	r2,184(sp)
   11d64:	9124703a 	and	r18,r18,r4
   11d68:	1802fb1e 	bne	r3,zero,12958 <___vfprintf_internal_r+0x12d4>
   11d6c:	d8c02a17 	ldw	r3,168(sp)
   11d70:	0039883a 	mov	fp,zero
   11d74:	1805e526 	beq	r3,zero,1350c <___vfprintf_internal_r+0x1e88>
   11d78:	0027883a 	mov	r19,zero
   11d7c:	002d883a 	mov	r22,zero
   11d80:	dc001e04 	addi	r16,sp,120
   11d84:	9806d0fa 	srli	r3,r19,3
   11d88:	b008977a 	slli	r4,r22,29
   11d8c:	b02cd0fa 	srli	r22,r22,3
   11d90:	9cc001cc 	andi	r19,r19,7
   11d94:	98800c04 	addi	r2,r19,48
   11d98:	843fffc4 	addi	r16,r16,-1
   11d9c:	20e6b03a 	or	r19,r4,r3
   11da0:	80800005 	stb	r2,0(r16)
   11da4:	9d86b03a 	or	r3,r19,r22
   11da8:	183ff61e 	bne	r3,zero,11d84 <__alt_data_end+0xfc011d84>
   11dac:	90c0004c 	andi	r3,r18,1
   11db0:	18014126 	beq	r3,zero,122b8 <___vfprintf_internal_r+0xc34>
   11db4:	10803fcc 	andi	r2,r2,255
   11db8:	1080201c 	xori	r2,r2,128
   11dbc:	10bfe004 	addi	r2,r2,-128
   11dc0:	00c00c04 	movi	r3,48
   11dc4:	10c13c26 	beq	r2,r3,122b8 <___vfprintf_internal_r+0xc34>
   11dc8:	80ffffc5 	stb	r3,-1(r16)
   11dcc:	d8c02817 	ldw	r3,160(sp)
   11dd0:	80bfffc4 	addi	r2,r16,-1
   11dd4:	1021883a 	mov	r16,r2
   11dd8:	1887c83a 	sub	r3,r3,r2
   11ddc:	d8c02b15 	stw	r3,172(sp)
   11de0:	d8802b17 	ldw	r2,172(sp)
   11de4:	d9002a17 	ldw	r4,168(sp)
   11de8:	1100010e 	bge	r2,r4,11df0 <___vfprintf_internal_r+0x76c>
   11dec:	2005883a 	mov	r2,r4
   11df0:	d8802915 	stw	r2,164(sp)
   11df4:	d8003215 	stw	zero,200(sp)
   11df8:	e7003fcc 	andi	fp,fp,255
   11dfc:	e700201c 	xori	fp,fp,128
   11e00:	e73fe004 	addi	fp,fp,-128
   11e04:	e0000326 	beq	fp,zero,11e14 <___vfprintf_internal_r+0x790>
   11e08:	d8c02917 	ldw	r3,164(sp)
   11e0c:	18c00044 	addi	r3,r3,1
   11e10:	d8c02915 	stw	r3,164(sp)
   11e14:	90c0008c 	andi	r3,r18,2
   11e18:	d8c02c15 	stw	r3,176(sp)
   11e1c:	18000326 	beq	r3,zero,11e2c <___vfprintf_internal_r+0x7a8>
   11e20:	d8c02917 	ldw	r3,164(sp)
   11e24:	18c00084 	addi	r3,r3,2
   11e28:	d8c02915 	stw	r3,164(sp)
   11e2c:	90c0210c 	andi	r3,r18,132
   11e30:	d8c03015 	stw	r3,192(sp)
   11e34:	1801c51e 	bne	r3,zero,1254c <___vfprintf_internal_r+0xec8>
   11e38:	d9003117 	ldw	r4,196(sp)
   11e3c:	d8c02917 	ldw	r3,164(sp)
   11e40:	20e7c83a 	sub	r19,r4,r3
   11e44:	04c1c10e 	bge	zero,r19,1254c <___vfprintf_internal_r+0xec8>
   11e48:	02400404 	movi	r9,16
   11e4c:	d8c02017 	ldw	r3,128(sp)
   11e50:	d8801f17 	ldw	r2,124(sp)
   11e54:	4cc52f0e 	bge	r9,r19,13314 <___vfprintf_internal_r+0x1c90>
   11e58:	014000f4 	movhi	r5,3
   11e5c:	296a1e84 	addi	r5,r5,-22406
   11e60:	dc403b15 	stw	r17,236(sp)
   11e64:	d9403515 	stw	r5,212(sp)
   11e68:	9823883a 	mov	r17,r19
   11e6c:	482d883a 	mov	r22,r9
   11e70:	9027883a 	mov	r19,r18
   11e74:	070001c4 	movi	fp,7
   11e78:	8025883a 	mov	r18,r16
   11e7c:	dc002d17 	ldw	r16,180(sp)
   11e80:	00000306 	br	11e90 <___vfprintf_internal_r+0x80c>
   11e84:	8c7ffc04 	addi	r17,r17,-16
   11e88:	42000204 	addi	r8,r8,8
   11e8c:	b440130e 	bge	r22,r17,11edc <___vfprintf_internal_r+0x858>
   11e90:	010000f4 	movhi	r4,3
   11e94:	18c00404 	addi	r3,r3,16
   11e98:	10800044 	addi	r2,r2,1
   11e9c:	212a1e84 	addi	r4,r4,-22406
   11ea0:	41000015 	stw	r4,0(r8)
   11ea4:	45800115 	stw	r22,4(r8)
   11ea8:	d8c02015 	stw	r3,128(sp)
   11eac:	d8801f15 	stw	r2,124(sp)
   11eb0:	e0bff40e 	bge	fp,r2,11e84 <__alt_data_end+0xfc011e84>
   11eb4:	d9801e04 	addi	r6,sp,120
   11eb8:	b80b883a 	mov	r5,r23
   11ebc:	8009883a 	mov	r4,r16
   11ec0:	00199900 	call	19990 <__sprint_r>
   11ec4:	103ef31e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   11ec8:	8c7ffc04 	addi	r17,r17,-16
   11ecc:	d8c02017 	ldw	r3,128(sp)
   11ed0:	d8801f17 	ldw	r2,124(sp)
   11ed4:	da000404 	addi	r8,sp,16
   11ed8:	b47fed16 	blt	r22,r17,11e90 <__alt_data_end+0xfc011e90>
   11edc:	9021883a 	mov	r16,r18
   11ee0:	9825883a 	mov	r18,r19
   11ee4:	8827883a 	mov	r19,r17
   11ee8:	dc403b17 	ldw	r17,236(sp)
   11eec:	d9403517 	ldw	r5,212(sp)
   11ef0:	98c7883a 	add	r3,r19,r3
   11ef4:	10800044 	addi	r2,r2,1
   11ef8:	41400015 	stw	r5,0(r8)
   11efc:	44c00115 	stw	r19,4(r8)
   11f00:	d8c02015 	stw	r3,128(sp)
   11f04:	d8801f15 	stw	r2,124(sp)
   11f08:	010001c4 	movi	r4,7
   11f0c:	2082c516 	blt	r4,r2,12a24 <___vfprintf_internal_r+0x13a0>
   11f10:	df002787 	ldb	fp,158(sp)
   11f14:	42000204 	addi	r8,r8,8
   11f18:	e0000c26 	beq	fp,zero,11f4c <___vfprintf_internal_r+0x8c8>
   11f1c:	d8801f17 	ldw	r2,124(sp)
   11f20:	d9002784 	addi	r4,sp,158
   11f24:	18c00044 	addi	r3,r3,1
   11f28:	10800044 	addi	r2,r2,1
   11f2c:	41000015 	stw	r4,0(r8)
   11f30:	01000044 	movi	r4,1
   11f34:	41000115 	stw	r4,4(r8)
   11f38:	d8c02015 	stw	r3,128(sp)
   11f3c:	d8801f15 	stw	r2,124(sp)
   11f40:	010001c4 	movi	r4,7
   11f44:	20825e16 	blt	r4,r2,128c0 <___vfprintf_internal_r+0x123c>
   11f48:	42000204 	addi	r8,r8,8
   11f4c:	d8802c17 	ldw	r2,176(sp)
   11f50:	10000c26 	beq	r2,zero,11f84 <___vfprintf_internal_r+0x900>
   11f54:	d8801f17 	ldw	r2,124(sp)
   11f58:	d9002704 	addi	r4,sp,156
   11f5c:	18c00084 	addi	r3,r3,2
   11f60:	10800044 	addi	r2,r2,1
   11f64:	41000015 	stw	r4,0(r8)
   11f68:	01000084 	movi	r4,2
   11f6c:	41000115 	stw	r4,4(r8)
   11f70:	d8c02015 	stw	r3,128(sp)
   11f74:	d8801f15 	stw	r2,124(sp)
   11f78:	010001c4 	movi	r4,7
   11f7c:	20825816 	blt	r4,r2,128e0 <___vfprintf_internal_r+0x125c>
   11f80:	42000204 	addi	r8,r8,8
   11f84:	d9003017 	ldw	r4,192(sp)
   11f88:	00802004 	movi	r2,128
   11f8c:	2081bb26 	beq	r4,r2,1267c <___vfprintf_internal_r+0xff8>
   11f90:	d9402a17 	ldw	r5,168(sp)
   11f94:	d8802b17 	ldw	r2,172(sp)
   11f98:	28adc83a 	sub	r22,r5,r2
   11f9c:	0580310e 	bge	zero,r22,12064 <___vfprintf_internal_r+0x9e0>
   11fa0:	07000404 	movi	fp,16
   11fa4:	d8801f17 	ldw	r2,124(sp)
   11fa8:	e584360e 	bge	fp,r22,13084 <___vfprintf_internal_r+0x1a00>
   11fac:	014000f4 	movhi	r5,3
   11fb0:	296a1a84 	addi	r5,r5,-22422
   11fb4:	dc402a15 	stw	r17,168(sp)
   11fb8:	d9402c15 	stw	r5,176(sp)
   11fbc:	b023883a 	mov	r17,r22
   11fc0:	04c001c4 	movi	r19,7
   11fc4:	a82d883a 	mov	r22,r21
   11fc8:	902b883a 	mov	r21,r18
   11fcc:	8025883a 	mov	r18,r16
   11fd0:	dc002d17 	ldw	r16,180(sp)
   11fd4:	00000306 	br	11fe4 <___vfprintf_internal_r+0x960>
   11fd8:	8c7ffc04 	addi	r17,r17,-16
   11fdc:	42000204 	addi	r8,r8,8
   11fe0:	e440110e 	bge	fp,r17,12028 <___vfprintf_internal_r+0x9a4>
   11fe4:	18c00404 	addi	r3,r3,16
   11fe8:	10800044 	addi	r2,r2,1
   11fec:	45000015 	stw	r20,0(r8)
   11ff0:	47000115 	stw	fp,4(r8)
   11ff4:	d8c02015 	stw	r3,128(sp)
   11ff8:	d8801f15 	stw	r2,124(sp)
   11ffc:	98bff60e 	bge	r19,r2,11fd8 <__alt_data_end+0xfc011fd8>
   12000:	d9801e04 	addi	r6,sp,120
   12004:	b80b883a 	mov	r5,r23
   12008:	8009883a 	mov	r4,r16
   1200c:	00199900 	call	19990 <__sprint_r>
   12010:	103ea01e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12014:	8c7ffc04 	addi	r17,r17,-16
   12018:	d8c02017 	ldw	r3,128(sp)
   1201c:	d8801f17 	ldw	r2,124(sp)
   12020:	da000404 	addi	r8,sp,16
   12024:	e47fef16 	blt	fp,r17,11fe4 <__alt_data_end+0xfc011fe4>
   12028:	9021883a 	mov	r16,r18
   1202c:	a825883a 	mov	r18,r21
   12030:	b02b883a 	mov	r21,r22
   12034:	882d883a 	mov	r22,r17
   12038:	dc402a17 	ldw	r17,168(sp)
   1203c:	d9002c17 	ldw	r4,176(sp)
   12040:	1d87883a 	add	r3,r3,r22
   12044:	10800044 	addi	r2,r2,1
   12048:	41000015 	stw	r4,0(r8)
   1204c:	45800115 	stw	r22,4(r8)
   12050:	d8c02015 	stw	r3,128(sp)
   12054:	d8801f15 	stw	r2,124(sp)
   12058:	010001c4 	movi	r4,7
   1205c:	20821016 	blt	r4,r2,128a0 <___vfprintf_internal_r+0x121c>
   12060:	42000204 	addi	r8,r8,8
   12064:	9080400c 	andi	r2,r18,256
   12068:	10013a1e 	bne	r2,zero,12554 <___vfprintf_internal_r+0xed0>
   1206c:	d9402b17 	ldw	r5,172(sp)
   12070:	d8801f17 	ldw	r2,124(sp)
   12074:	44000015 	stw	r16,0(r8)
   12078:	1947883a 	add	r3,r3,r5
   1207c:	10800044 	addi	r2,r2,1
   12080:	41400115 	stw	r5,4(r8)
   12084:	d8c02015 	stw	r3,128(sp)
   12088:	d8801f15 	stw	r2,124(sp)
   1208c:	010001c4 	movi	r4,7
   12090:	2081f516 	blt	r4,r2,12868 <___vfprintf_internal_r+0x11e4>
   12094:	42000204 	addi	r8,r8,8
   12098:	9480010c 	andi	r18,r18,4
   1209c:	90003226 	beq	r18,zero,12168 <___vfprintf_internal_r+0xae4>
   120a0:	d9403117 	ldw	r5,196(sp)
   120a4:	d8802917 	ldw	r2,164(sp)
   120a8:	28a1c83a 	sub	r16,r5,r2
   120ac:	04002e0e 	bge	zero,r16,12168 <___vfprintf_internal_r+0xae4>
   120b0:	04400404 	movi	r17,16
   120b4:	d8801f17 	ldw	r2,124(sp)
   120b8:	8c04c40e 	bge	r17,r16,133cc <___vfprintf_internal_r+0x1d48>
   120bc:	014000f4 	movhi	r5,3
   120c0:	296a1e84 	addi	r5,r5,-22406
   120c4:	d9403515 	stw	r5,212(sp)
   120c8:	048001c4 	movi	r18,7
   120cc:	dcc02d17 	ldw	r19,180(sp)
   120d0:	00000306 	br	120e0 <___vfprintf_internal_r+0xa5c>
   120d4:	843ffc04 	addi	r16,r16,-16
   120d8:	42000204 	addi	r8,r8,8
   120dc:	8c00130e 	bge	r17,r16,1212c <___vfprintf_internal_r+0xaa8>
   120e0:	010000f4 	movhi	r4,3
   120e4:	18c00404 	addi	r3,r3,16
   120e8:	10800044 	addi	r2,r2,1
   120ec:	212a1e84 	addi	r4,r4,-22406
   120f0:	41000015 	stw	r4,0(r8)
   120f4:	44400115 	stw	r17,4(r8)
   120f8:	d8c02015 	stw	r3,128(sp)
   120fc:	d8801f15 	stw	r2,124(sp)
   12100:	90bff40e 	bge	r18,r2,120d4 <__alt_data_end+0xfc0120d4>
   12104:	d9801e04 	addi	r6,sp,120
   12108:	b80b883a 	mov	r5,r23
   1210c:	9809883a 	mov	r4,r19
   12110:	00199900 	call	19990 <__sprint_r>
   12114:	103e5f1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12118:	843ffc04 	addi	r16,r16,-16
   1211c:	d8c02017 	ldw	r3,128(sp)
   12120:	d8801f17 	ldw	r2,124(sp)
   12124:	da000404 	addi	r8,sp,16
   12128:	8c3fed16 	blt	r17,r16,120e0 <__alt_data_end+0xfc0120e0>
   1212c:	d9403517 	ldw	r5,212(sp)
   12130:	1c07883a 	add	r3,r3,r16
   12134:	10800044 	addi	r2,r2,1
   12138:	41400015 	stw	r5,0(r8)
   1213c:	44000115 	stw	r16,4(r8)
   12140:	d8c02015 	stw	r3,128(sp)
   12144:	d8801f15 	stw	r2,124(sp)
   12148:	010001c4 	movi	r4,7
   1214c:	2080060e 	bge	r4,r2,12168 <___vfprintf_internal_r+0xae4>
   12150:	d9002d17 	ldw	r4,180(sp)
   12154:	d9801e04 	addi	r6,sp,120
   12158:	b80b883a 	mov	r5,r23
   1215c:	00199900 	call	19990 <__sprint_r>
   12160:	103e4c1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12164:	d8c02017 	ldw	r3,128(sp)
   12168:	d8803117 	ldw	r2,196(sp)
   1216c:	d9002917 	ldw	r4,164(sp)
   12170:	1100010e 	bge	r2,r4,12178 <___vfprintf_internal_r+0xaf4>
   12174:	2005883a 	mov	r2,r4
   12178:	d9402f17 	ldw	r5,188(sp)
   1217c:	288b883a 	add	r5,r5,r2
   12180:	d9402f15 	stw	r5,188(sp)
   12184:	1801c01e 	bne	r3,zero,12888 <___vfprintf_internal_r+0x1204>
   12188:	a8800007 	ldb	r2,0(r21)
   1218c:	d8001f15 	stw	zero,124(sp)
   12190:	da000404 	addi	r8,sp,16
   12194:	103d751e 	bne	r2,zero,1176c <__alt_data_end+0xfc01176c>
   12198:	a823883a 	mov	r17,r21
   1219c:	003d8b06 	br	117cc <__alt_data_end+0xfc0117cc>
   121a0:	8025883a 	mov	r18,r16
   121a4:	dc002903 	ldbu	r16,164(sp)
   121a8:	e011883a 	mov	r8,fp
   121ac:	84003fcc 	andi	r16,r16,255
   121b0:	8005e51e 	bne	r16,zero,13948 <___vfprintf_internal_r+0x22c4>
   121b4:	94800414 	ori	r18,r18,16
   121b8:	9080080c 	andi	r2,r18,32
   121bc:	10022b26 	beq	r2,zero,12a6c <___vfprintf_internal_r+0x13e8>
   121c0:	d9002e17 	ldw	r4,184(sp)
   121c4:	d9402a17 	ldw	r5,168(sp)
   121c8:	d8002785 	stb	zero,158(sp)
   121cc:	20c00204 	addi	r3,r4,8
   121d0:	24c00017 	ldw	r19,0(r4)
   121d4:	25800117 	ldw	r22,4(r4)
   121d8:	28042e16 	blt	r5,zero,13294 <___vfprintf_internal_r+0x1c10>
   121dc:	013fdfc4 	movi	r4,-129
   121e0:	9d84b03a 	or	r2,r19,r22
   121e4:	d8c02e15 	stw	r3,184(sp)
   121e8:	9124703a 	and	r18,r18,r4
   121ec:	0039883a 	mov	fp,zero
   121f0:	103e801e 	bne	r2,zero,11bf4 <__alt_data_end+0xfc011bf4>
   121f4:	d9002a17 	ldw	r4,168(sp)
   121f8:	2002e01e 	bne	r4,zero,12d7c <___vfprintf_internal_r+0x16f8>
   121fc:	d8002a15 	stw	zero,168(sp)
   12200:	d8002b15 	stw	zero,172(sp)
   12204:	dc001e04 	addi	r16,sp,120
   12208:	003ef506 	br	11de0 <__alt_data_end+0xfc011de0>
   1220c:	8025883a 	mov	r18,r16
   12210:	dc002903 	ldbu	r16,164(sp)
   12214:	e011883a 	mov	r8,fp
   12218:	84003fcc 	andi	r16,r16,255
   1221c:	8005ba1e 	bne	r16,zero,13908 <___vfprintf_internal_r+0x2284>
   12220:	010000f4 	movhi	r4,3
   12224:	212a0604 	addi	r4,r4,-22504
   12228:	d9003915 	stw	r4,228(sp)
   1222c:	9080080c 	andi	r2,r18,32
   12230:	10006126 	beq	r2,zero,123b8 <___vfprintf_internal_r+0xd34>
   12234:	d9402e17 	ldw	r5,184(sp)
   12238:	2cc00017 	ldw	r19,0(r5)
   1223c:	2d800117 	ldw	r22,4(r5)
   12240:	29400204 	addi	r5,r5,8
   12244:	d9402e15 	stw	r5,184(sp)
   12248:	9080004c 	andi	r2,r18,1
   1224c:	1001ac26 	beq	r2,zero,12900 <___vfprintf_internal_r+0x127c>
   12250:	9d84b03a 	or	r2,r19,r22
   12254:	10038526 	beq	r2,zero,1306c <___vfprintf_internal_r+0x19e8>
   12258:	d8c02a17 	ldw	r3,168(sp)
   1225c:	00800c04 	movi	r2,48
   12260:	d8802705 	stb	r2,156(sp)
   12264:	dc402745 	stb	r17,157(sp)
   12268:	d8002785 	stb	zero,158(sp)
   1226c:	90800094 	ori	r2,r18,2
   12270:	18047916 	blt	r3,zero,13458 <___vfprintf_internal_r+0x1dd4>
   12274:	00bfdfc4 	movi	r2,-129
   12278:	90a4703a 	and	r18,r18,r2
   1227c:	94800094 	ori	r18,r18,2
   12280:	0039883a 	mov	fp,zero
   12284:	d9003917 	ldw	r4,228(sp)
   12288:	dc001e04 	addi	r16,sp,120
   1228c:	988003cc 	andi	r2,r19,15
   12290:	b006973a 	slli	r3,r22,28
   12294:	2085883a 	add	r2,r4,r2
   12298:	9826d13a 	srli	r19,r19,4
   1229c:	10800003 	ldbu	r2,0(r2)
   122a0:	b02cd13a 	srli	r22,r22,4
   122a4:	843fffc4 	addi	r16,r16,-1
   122a8:	1ce6b03a 	or	r19,r3,r19
   122ac:	80800005 	stb	r2,0(r16)
   122b0:	9d84b03a 	or	r2,r19,r22
   122b4:	103ff51e 	bne	r2,zero,1228c <__alt_data_end+0xfc01228c>
   122b8:	d8c02817 	ldw	r3,160(sp)
   122bc:	1c07c83a 	sub	r3,r3,r16
   122c0:	d8c02b15 	stw	r3,172(sp)
   122c4:	003ec606 	br	11de0 <__alt_data_end+0xfc011de0>
   122c8:	8025883a 	mov	r18,r16
   122cc:	dc002903 	ldbu	r16,164(sp)
   122d0:	e011883a 	mov	r8,fp
   122d4:	84003fcc 	andi	r16,r16,255
   122d8:	803e9626 	beq	r16,zero,11d34 <__alt_data_end+0xfc011d34>
   122dc:	d8c02b03 	ldbu	r3,172(sp)
   122e0:	d8c02785 	stb	r3,158(sp)
   122e4:	003e9306 	br	11d34 <__alt_data_end+0xfc011d34>
   122e8:	00c00044 	movi	r3,1
   122ec:	d8c02905 	stb	r3,164(sp)
   122f0:	00c00ac4 	movi	r3,43
   122f4:	d8c02b05 	stb	r3,172(sp)
   122f8:	ac400007 	ldb	r17,0(r21)
   122fc:	003d4306 	br	1180c <__alt_data_end+0xfc01180c>
   12300:	84000814 	ori	r16,r16,32
   12304:	ac400007 	ldb	r17,0(r21)
   12308:	003d4006 	br	1180c <__alt_data_end+0xfc01180c>
   1230c:	d8802e17 	ldw	r2,184(sp)
   12310:	8025883a 	mov	r18,r16
   12314:	d8002785 	stb	zero,158(sp)
   12318:	14000017 	ldw	r16,0(r2)
   1231c:	e011883a 	mov	r8,fp
   12320:	14c00104 	addi	r19,r2,4
   12324:	80042d26 	beq	r16,zero,133dc <___vfprintf_internal_r+0x1d58>
   12328:	d8c02a17 	ldw	r3,168(sp)
   1232c:	1803e416 	blt	r3,zero,132c0 <___vfprintf_internal_r+0x1c3c>
   12330:	180d883a 	mov	r6,r3
   12334:	000b883a 	mov	r5,zero
   12338:	8009883a 	mov	r4,r16
   1233c:	df003d15 	stw	fp,244(sp)
   12340:	00167b00 	call	167b0 <memchr>
   12344:	da003d17 	ldw	r8,244(sp)
   12348:	10046826 	beq	r2,zero,134ec <___vfprintf_internal_r+0x1e68>
   1234c:	1405c83a 	sub	r2,r2,r16
   12350:	d8802b15 	stw	r2,172(sp)
   12354:	1003e016 	blt	r2,zero,132d8 <___vfprintf_internal_r+0x1c54>
   12358:	df002783 	ldbu	fp,158(sp)
   1235c:	d8802915 	stw	r2,164(sp)
   12360:	dcc02e15 	stw	r19,184(sp)
   12364:	d8002a15 	stw	zero,168(sp)
   12368:	d8003215 	stw	zero,200(sp)
   1236c:	003ea206 	br	11df8 <__alt_data_end+0xfc011df8>
   12370:	8025883a 	mov	r18,r16
   12374:	dc002903 	ldbu	r16,164(sp)
   12378:	e011883a 	mov	r8,fp
   1237c:	84003fcc 	andi	r16,r16,255
   12380:	803f8d26 	beq	r16,zero,121b8 <__alt_data_end+0xfc0121b8>
   12384:	d8c02b03 	ldbu	r3,172(sp)
   12388:	d8c02785 	stb	r3,158(sp)
   1238c:	003f8a06 	br	121b8 <__alt_data_end+0xfc0121b8>
   12390:	8025883a 	mov	r18,r16
   12394:	dc002903 	ldbu	r16,164(sp)
   12398:	e011883a 	mov	r8,fp
   1239c:	84003fcc 	andi	r16,r16,255
   123a0:	8005661e 	bne	r16,zero,1393c <___vfprintf_internal_r+0x22b8>
   123a4:	010000f4 	movhi	r4,3
   123a8:	212a0b04 	addi	r4,r4,-22484
   123ac:	d9003915 	stw	r4,228(sp)
   123b0:	9080080c 	andi	r2,r18,32
   123b4:	103f9f1e 	bne	r2,zero,12234 <__alt_data_end+0xfc012234>
   123b8:	9080040c 	andi	r2,r18,16
   123bc:	1002eb26 	beq	r2,zero,12f6c <___vfprintf_internal_r+0x18e8>
   123c0:	d8802e17 	ldw	r2,184(sp)
   123c4:	002d883a 	mov	r22,zero
   123c8:	14c00017 	ldw	r19,0(r2)
   123cc:	10800104 	addi	r2,r2,4
   123d0:	d8802e15 	stw	r2,184(sp)
   123d4:	003f9c06 	br	12248 <__alt_data_end+0xfc012248>
   123d8:	d8802b07 	ldb	r2,172(sp)
   123dc:	1002e11e 	bne	r2,zero,12f64 <___vfprintf_internal_r+0x18e0>
   123e0:	00c00044 	movi	r3,1
   123e4:	d8c02905 	stb	r3,164(sp)
   123e8:	00c00804 	movi	r3,32
   123ec:	d8c02b05 	stb	r3,172(sp)
   123f0:	ac400007 	ldb	r17,0(r21)
   123f4:	003d0506 	br	1180c <__alt_data_end+0xfc01180c>
   123f8:	84000054 	ori	r16,r16,1
   123fc:	ac400007 	ldb	r17,0(r21)
   12400:	003d0206 	br	1180c <__alt_data_end+0xfc01180c>
   12404:	8025883a 	mov	r18,r16
   12408:	dc002903 	ldbu	r16,164(sp)
   1240c:	e011883a 	mov	r8,fp
   12410:	84003fcc 	andi	r16,r16,255
   12414:	803de726 	beq	r16,zero,11bb4 <__alt_data_end+0xfc011bb4>
   12418:	d8c02b03 	ldbu	r3,172(sp)
   1241c:	d8c02785 	stb	r3,158(sp)
   12420:	003de406 	br	11bb4 <__alt_data_end+0xfc011bb4>
   12424:	84001014 	ori	r16,r16,64
   12428:	ac400007 	ldb	r17,0(r21)
   1242c:	003cf706 	br	1180c <__alt_data_end+0xfc01180c>
   12430:	ac400007 	ldb	r17,0(r21)
   12434:	00801b04 	movi	r2,108
   12438:	88838f26 	beq	r17,r2,13278 <___vfprintf_internal_r+0x1bf4>
   1243c:	84000414 	ori	r16,r16,16
   12440:	003cf206 	br	1180c <__alt_data_end+0xfc01180c>
   12444:	8025883a 	mov	r18,r16
   12448:	dc002903 	ldbu	r16,164(sp)
   1244c:	e011883a 	mov	r8,fp
   12450:	84003fcc 	andi	r16,r16,255
   12454:	80053f1e 	bne	r16,zero,13954 <___vfprintf_internal_r+0x22d0>
   12458:	9080080c 	andi	r2,r18,32
   1245c:	1002d226 	beq	r2,zero,12fa8 <___vfprintf_internal_r+0x1924>
   12460:	d9002e17 	ldw	r4,184(sp)
   12464:	d9402f17 	ldw	r5,188(sp)
   12468:	20800017 	ldw	r2,0(r4)
   1246c:	2807d7fa 	srai	r3,r5,31
   12470:	21000104 	addi	r4,r4,4
   12474:	d9002e15 	stw	r4,184(sp)
   12478:	11400015 	stw	r5,0(r2)
   1247c:	10c00115 	stw	r3,4(r2)
   12480:	003cb806 	br	11764 <__alt_data_end+0xfc011764>
   12484:	d8c02e17 	ldw	r3,184(sp)
   12488:	d9002e17 	ldw	r4,184(sp)
   1248c:	8025883a 	mov	r18,r16
   12490:	18800017 	ldw	r2,0(r3)
   12494:	21000104 	addi	r4,r4,4
   12498:	00c00044 	movi	r3,1
   1249c:	e011883a 	mov	r8,fp
   124a0:	d8c02915 	stw	r3,164(sp)
   124a4:	d8002785 	stb	zero,158(sp)
   124a8:	d8801405 	stb	r2,80(sp)
   124ac:	d9002e15 	stw	r4,184(sp)
   124b0:	d8c02b15 	stw	r3,172(sp)
   124b4:	d8002a15 	stw	zero,168(sp)
   124b8:	d8003215 	stw	zero,200(sp)
   124bc:	dc001404 	addi	r16,sp,80
   124c0:	0039883a 	mov	fp,zero
   124c4:	003e5306 	br	11e14 <__alt_data_end+0xfc011e14>
   124c8:	010000f4 	movhi	r4,3
   124cc:	212a0b04 	addi	r4,r4,-22484
   124d0:	0039883a 	mov	fp,zero
   124d4:	d9003915 	stw	r4,228(sp)
   124d8:	04401e04 	movi	r17,120
   124dc:	003f6906 	br	12284 <__alt_data_end+0xfc012284>
   124e0:	8025883a 	mov	r18,r16
   124e4:	dc002903 	ldbu	r16,164(sp)
   124e8:	e011883a 	mov	r8,fp
   124ec:	84003fcc 	andi	r16,r16,255
   124f0:	8005081e 	bne	r16,zero,13914 <___vfprintf_internal_r+0x2290>
   124f4:	883d6126 	beq	r17,zero,11a7c <__alt_data_end+0xfc011a7c>
   124f8:	00c00044 	movi	r3,1
   124fc:	d8c02915 	stw	r3,164(sp)
   12500:	dc401405 	stb	r17,80(sp)
   12504:	d8002785 	stb	zero,158(sp)
   12508:	003fe906 	br	124b0 <__alt_data_end+0xfc0124b0>
   1250c:	014000f4 	movhi	r5,3
   12510:	296a0b04 	addi	r5,r5,-22484
   12514:	d9403915 	stw	r5,228(sp)
   12518:	d8c02e15 	stw	r3,184(sp)
   1251c:	1025883a 	mov	r18,r2
   12520:	04401e04 	movi	r17,120
   12524:	9d84b03a 	or	r2,r19,r22
   12528:	1000fc1e 	bne	r2,zero,1291c <___vfprintf_internal_r+0x1298>
   1252c:	0039883a 	mov	fp,zero
   12530:	00800084 	movi	r2,2
   12534:	10803fcc 	andi	r2,r2,255
   12538:	00c00044 	movi	r3,1
   1253c:	10c20f26 	beq	r2,r3,12d7c <___vfprintf_internal_r+0x16f8>
   12540:	00c00084 	movi	r3,2
   12544:	10fd3326 	beq	r2,r3,11a14 <__alt_data_end+0xfc011a14>
   12548:	003e0b06 	br	11d78 <__alt_data_end+0xfc011d78>
   1254c:	d8c02017 	ldw	r3,128(sp)
   12550:	003e7106 	br	11f18 <__alt_data_end+0xfc011f18>
   12554:	00801944 	movi	r2,101
   12558:	14407e0e 	bge	r2,r17,12754 <___vfprintf_internal_r+0x10d0>
   1255c:	d9003617 	ldw	r4,216(sp)
   12560:	d9403817 	ldw	r5,224(sp)
   12564:	000d883a 	mov	r6,zero
   12568:	000f883a 	mov	r7,zero
   1256c:	d8c03c15 	stw	r3,240(sp)
   12570:	da003d15 	stw	r8,244(sp)
   12574:	001d7140 	call	1d714 <__eqdf2>
   12578:	d8c03c17 	ldw	r3,240(sp)
   1257c:	da003d17 	ldw	r8,244(sp)
   12580:	1000f71e 	bne	r2,zero,12960 <___vfprintf_internal_r+0x12dc>
   12584:	d8801f17 	ldw	r2,124(sp)
   12588:	010000f4 	movhi	r4,3
   1258c:	212a1204 	addi	r4,r4,-22456
   12590:	18c00044 	addi	r3,r3,1
   12594:	10800044 	addi	r2,r2,1
   12598:	41000015 	stw	r4,0(r8)
   1259c:	01000044 	movi	r4,1
   125a0:	41000115 	stw	r4,4(r8)
   125a4:	d8c02015 	stw	r3,128(sp)
   125a8:	d8801f15 	stw	r2,124(sp)
   125ac:	010001c4 	movi	r4,7
   125b0:	2082b816 	blt	r4,r2,13094 <___vfprintf_internal_r+0x1a10>
   125b4:	42000204 	addi	r8,r8,8
   125b8:	d8802617 	ldw	r2,152(sp)
   125bc:	d9403317 	ldw	r5,204(sp)
   125c0:	11400216 	blt	r2,r5,125cc <___vfprintf_internal_r+0xf48>
   125c4:	9080004c 	andi	r2,r18,1
   125c8:	103eb326 	beq	r2,zero,12098 <__alt_data_end+0xfc012098>
   125cc:	d8803717 	ldw	r2,220(sp)
   125d0:	d9003417 	ldw	r4,208(sp)
   125d4:	d9403717 	ldw	r5,220(sp)
   125d8:	1887883a 	add	r3,r3,r2
   125dc:	d8801f17 	ldw	r2,124(sp)
   125e0:	41000015 	stw	r4,0(r8)
   125e4:	41400115 	stw	r5,4(r8)
   125e8:	10800044 	addi	r2,r2,1
   125ec:	d8c02015 	stw	r3,128(sp)
   125f0:	d8801f15 	stw	r2,124(sp)
   125f4:	010001c4 	movi	r4,7
   125f8:	20832916 	blt	r4,r2,132a0 <___vfprintf_internal_r+0x1c1c>
   125fc:	42000204 	addi	r8,r8,8
   12600:	d8803317 	ldw	r2,204(sp)
   12604:	143fffc4 	addi	r16,r2,-1
   12608:	043ea30e 	bge	zero,r16,12098 <__alt_data_end+0xfc012098>
   1260c:	04400404 	movi	r17,16
   12610:	d8801f17 	ldw	r2,124(sp)
   12614:	8c00880e 	bge	r17,r16,12838 <___vfprintf_internal_r+0x11b4>
   12618:	014000f4 	movhi	r5,3
   1261c:	296a1a84 	addi	r5,r5,-22422
   12620:	d9402c15 	stw	r5,176(sp)
   12624:	058001c4 	movi	r22,7
   12628:	dcc02d17 	ldw	r19,180(sp)
   1262c:	00000306 	br	1263c <___vfprintf_internal_r+0xfb8>
   12630:	42000204 	addi	r8,r8,8
   12634:	843ffc04 	addi	r16,r16,-16
   12638:	8c00820e 	bge	r17,r16,12844 <___vfprintf_internal_r+0x11c0>
   1263c:	18c00404 	addi	r3,r3,16
   12640:	10800044 	addi	r2,r2,1
   12644:	45000015 	stw	r20,0(r8)
   12648:	44400115 	stw	r17,4(r8)
   1264c:	d8c02015 	stw	r3,128(sp)
   12650:	d8801f15 	stw	r2,124(sp)
   12654:	b0bff60e 	bge	r22,r2,12630 <__alt_data_end+0xfc012630>
   12658:	d9801e04 	addi	r6,sp,120
   1265c:	b80b883a 	mov	r5,r23
   12660:	9809883a 	mov	r4,r19
   12664:	00199900 	call	19990 <__sprint_r>
   12668:	103d0a1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   1266c:	d8c02017 	ldw	r3,128(sp)
   12670:	d8801f17 	ldw	r2,124(sp)
   12674:	da000404 	addi	r8,sp,16
   12678:	003fee06 	br	12634 <__alt_data_end+0xfc012634>
   1267c:	d9403117 	ldw	r5,196(sp)
   12680:	d8802917 	ldw	r2,164(sp)
   12684:	28adc83a 	sub	r22,r5,r2
   12688:	05be410e 	bge	zero,r22,11f90 <__alt_data_end+0xfc011f90>
   1268c:	07000404 	movi	fp,16
   12690:	d8801f17 	ldw	r2,124(sp)
   12694:	e5838f0e 	bge	fp,r22,134d4 <___vfprintf_internal_r+0x1e50>
   12698:	014000f4 	movhi	r5,3
   1269c:	296a1a84 	addi	r5,r5,-22422
   126a0:	dc403015 	stw	r17,192(sp)
   126a4:	d9402c15 	stw	r5,176(sp)
   126a8:	b023883a 	mov	r17,r22
   126ac:	04c001c4 	movi	r19,7
   126b0:	a82d883a 	mov	r22,r21
   126b4:	902b883a 	mov	r21,r18
   126b8:	8025883a 	mov	r18,r16
   126bc:	dc002d17 	ldw	r16,180(sp)
   126c0:	00000306 	br	126d0 <___vfprintf_internal_r+0x104c>
   126c4:	8c7ffc04 	addi	r17,r17,-16
   126c8:	42000204 	addi	r8,r8,8
   126cc:	e440110e 	bge	fp,r17,12714 <___vfprintf_internal_r+0x1090>
   126d0:	18c00404 	addi	r3,r3,16
   126d4:	10800044 	addi	r2,r2,1
   126d8:	45000015 	stw	r20,0(r8)
   126dc:	47000115 	stw	fp,4(r8)
   126e0:	d8c02015 	stw	r3,128(sp)
   126e4:	d8801f15 	stw	r2,124(sp)
   126e8:	98bff60e 	bge	r19,r2,126c4 <__alt_data_end+0xfc0126c4>
   126ec:	d9801e04 	addi	r6,sp,120
   126f0:	b80b883a 	mov	r5,r23
   126f4:	8009883a 	mov	r4,r16
   126f8:	00199900 	call	19990 <__sprint_r>
   126fc:	103ce51e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12700:	8c7ffc04 	addi	r17,r17,-16
   12704:	d8c02017 	ldw	r3,128(sp)
   12708:	d8801f17 	ldw	r2,124(sp)
   1270c:	da000404 	addi	r8,sp,16
   12710:	e47fef16 	blt	fp,r17,126d0 <__alt_data_end+0xfc0126d0>
   12714:	9021883a 	mov	r16,r18
   12718:	a825883a 	mov	r18,r21
   1271c:	b02b883a 	mov	r21,r22
   12720:	882d883a 	mov	r22,r17
   12724:	dc403017 	ldw	r17,192(sp)
   12728:	d9002c17 	ldw	r4,176(sp)
   1272c:	1d87883a 	add	r3,r3,r22
   12730:	10800044 	addi	r2,r2,1
   12734:	41000015 	stw	r4,0(r8)
   12738:	45800115 	stw	r22,4(r8)
   1273c:	d8c02015 	stw	r3,128(sp)
   12740:	d8801f15 	stw	r2,124(sp)
   12744:	010001c4 	movi	r4,7
   12748:	20818e16 	blt	r4,r2,12d84 <___vfprintf_internal_r+0x1700>
   1274c:	42000204 	addi	r8,r8,8
   12750:	003e0f06 	br	11f90 <__alt_data_end+0xfc011f90>
   12754:	d9403317 	ldw	r5,204(sp)
   12758:	00800044 	movi	r2,1
   1275c:	18c00044 	addi	r3,r3,1
   12760:	1141530e 	bge	r2,r5,12cb0 <___vfprintf_internal_r+0x162c>
   12764:	dc401f17 	ldw	r17,124(sp)
   12768:	00800044 	movi	r2,1
   1276c:	40800115 	stw	r2,4(r8)
   12770:	8c400044 	addi	r17,r17,1
   12774:	44000015 	stw	r16,0(r8)
   12778:	d8c02015 	stw	r3,128(sp)
   1277c:	dc401f15 	stw	r17,124(sp)
   12780:	008001c4 	movi	r2,7
   12784:	14416b16 	blt	r2,r17,12d34 <___vfprintf_internal_r+0x16b0>
   12788:	42000204 	addi	r8,r8,8
   1278c:	d8803717 	ldw	r2,220(sp)
   12790:	d9003417 	ldw	r4,208(sp)
   12794:	8c400044 	addi	r17,r17,1
   12798:	10c7883a 	add	r3,r2,r3
   1279c:	40800115 	stw	r2,4(r8)
   127a0:	41000015 	stw	r4,0(r8)
   127a4:	d8c02015 	stw	r3,128(sp)
   127a8:	dc401f15 	stw	r17,124(sp)
   127ac:	008001c4 	movi	r2,7
   127b0:	14416916 	blt	r2,r17,12d58 <___vfprintf_internal_r+0x16d4>
   127b4:	45800204 	addi	r22,r8,8
   127b8:	d9003617 	ldw	r4,216(sp)
   127bc:	d9403817 	ldw	r5,224(sp)
   127c0:	000d883a 	mov	r6,zero
   127c4:	000f883a 	mov	r7,zero
   127c8:	d8c03c15 	stw	r3,240(sp)
   127cc:	001d7140 	call	1d714 <__eqdf2>
   127d0:	d8c03c17 	ldw	r3,240(sp)
   127d4:	1000bc26 	beq	r2,zero,12ac8 <___vfprintf_internal_r+0x1444>
   127d8:	d9403317 	ldw	r5,204(sp)
   127dc:	84000044 	addi	r16,r16,1
   127e0:	8c400044 	addi	r17,r17,1
   127e4:	28bfffc4 	addi	r2,r5,-1
   127e8:	1887883a 	add	r3,r3,r2
   127ec:	b0800115 	stw	r2,4(r22)
   127f0:	b4000015 	stw	r16,0(r22)
   127f4:	d8c02015 	stw	r3,128(sp)
   127f8:	dc401f15 	stw	r17,124(sp)
   127fc:	008001c4 	movi	r2,7
   12800:	14414316 	blt	r2,r17,12d10 <___vfprintf_internal_r+0x168c>
   12804:	b5800204 	addi	r22,r22,8
   12808:	d9003a17 	ldw	r4,232(sp)
   1280c:	df0022c4 	addi	fp,sp,139
   12810:	8c400044 	addi	r17,r17,1
   12814:	20c7883a 	add	r3,r4,r3
   12818:	b7000015 	stw	fp,0(r22)
   1281c:	b1000115 	stw	r4,4(r22)
   12820:	d8c02015 	stw	r3,128(sp)
   12824:	dc401f15 	stw	r17,124(sp)
   12828:	008001c4 	movi	r2,7
   1282c:	14400e16 	blt	r2,r17,12868 <___vfprintf_internal_r+0x11e4>
   12830:	b2000204 	addi	r8,r22,8
   12834:	003e1806 	br	12098 <__alt_data_end+0xfc012098>
   12838:	010000f4 	movhi	r4,3
   1283c:	212a1a84 	addi	r4,r4,-22422
   12840:	d9002c15 	stw	r4,176(sp)
   12844:	d9002c17 	ldw	r4,176(sp)
   12848:	1c07883a 	add	r3,r3,r16
   1284c:	44000115 	stw	r16,4(r8)
   12850:	41000015 	stw	r4,0(r8)
   12854:	10800044 	addi	r2,r2,1
   12858:	d8c02015 	stw	r3,128(sp)
   1285c:	d8801f15 	stw	r2,124(sp)
   12860:	010001c4 	movi	r4,7
   12864:	20be0b0e 	bge	r4,r2,12094 <__alt_data_end+0xfc012094>
   12868:	d9002d17 	ldw	r4,180(sp)
   1286c:	d9801e04 	addi	r6,sp,120
   12870:	b80b883a 	mov	r5,r23
   12874:	00199900 	call	19990 <__sprint_r>
   12878:	103c861e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   1287c:	d8c02017 	ldw	r3,128(sp)
   12880:	da000404 	addi	r8,sp,16
   12884:	003e0406 	br	12098 <__alt_data_end+0xfc012098>
   12888:	d9002d17 	ldw	r4,180(sp)
   1288c:	d9801e04 	addi	r6,sp,120
   12890:	b80b883a 	mov	r5,r23
   12894:	00199900 	call	19990 <__sprint_r>
   12898:	103e3b26 	beq	r2,zero,12188 <__alt_data_end+0xfc012188>
   1289c:	003c7d06 	br	11a94 <__alt_data_end+0xfc011a94>
   128a0:	d9002d17 	ldw	r4,180(sp)
   128a4:	d9801e04 	addi	r6,sp,120
   128a8:	b80b883a 	mov	r5,r23
   128ac:	00199900 	call	19990 <__sprint_r>
   128b0:	103c781e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   128b4:	d8c02017 	ldw	r3,128(sp)
   128b8:	da000404 	addi	r8,sp,16
   128bc:	003de906 	br	12064 <__alt_data_end+0xfc012064>
   128c0:	d9002d17 	ldw	r4,180(sp)
   128c4:	d9801e04 	addi	r6,sp,120
   128c8:	b80b883a 	mov	r5,r23
   128cc:	00199900 	call	19990 <__sprint_r>
   128d0:	103c701e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   128d4:	d8c02017 	ldw	r3,128(sp)
   128d8:	da000404 	addi	r8,sp,16
   128dc:	003d9b06 	br	11f4c <__alt_data_end+0xfc011f4c>
   128e0:	d9002d17 	ldw	r4,180(sp)
   128e4:	d9801e04 	addi	r6,sp,120
   128e8:	b80b883a 	mov	r5,r23
   128ec:	00199900 	call	19990 <__sprint_r>
   128f0:	103c681e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   128f4:	d8c02017 	ldw	r3,128(sp)
   128f8:	da000404 	addi	r8,sp,16
   128fc:	003da106 	br	11f84 <__alt_data_end+0xfc011f84>
   12900:	d9402a17 	ldw	r5,168(sp)
   12904:	d8002785 	stb	zero,158(sp)
   12908:	283f0616 	blt	r5,zero,12524 <__alt_data_end+0xfc012524>
   1290c:	00ffdfc4 	movi	r3,-129
   12910:	9d84b03a 	or	r2,r19,r22
   12914:	90e4703a 	and	r18,r18,r3
   12918:	103c3b26 	beq	r2,zero,11a08 <__alt_data_end+0xfc011a08>
   1291c:	0039883a 	mov	fp,zero
   12920:	003e5806 	br	12284 <__alt_data_end+0xfc012284>
   12924:	9080040c 	andi	r2,r18,16
   12928:	1001b326 	beq	r2,zero,12ff8 <___vfprintf_internal_r+0x1974>
   1292c:	d8c02e17 	ldw	r3,184(sp)
   12930:	d9002a17 	ldw	r4,168(sp)
   12934:	d8002785 	stb	zero,158(sp)
   12938:	18800104 	addi	r2,r3,4
   1293c:	1cc00017 	ldw	r19,0(r3)
   12940:	002d883a 	mov	r22,zero
   12944:	2001b516 	blt	r4,zero,1301c <___vfprintf_internal_r+0x1998>
   12948:	00ffdfc4 	movi	r3,-129
   1294c:	d8802e15 	stw	r2,184(sp)
   12950:	90e4703a 	and	r18,r18,r3
   12954:	983d0526 	beq	r19,zero,11d6c <__alt_data_end+0xfc011d6c>
   12958:	0039883a 	mov	fp,zero
   1295c:	003d0806 	br	11d80 <__alt_data_end+0xfc011d80>
   12960:	dc402617 	ldw	r17,152(sp)
   12964:	0441d30e 	bge	zero,r17,130b4 <___vfprintf_internal_r+0x1a30>
   12968:	dc403217 	ldw	r17,200(sp)
   1296c:	d8803317 	ldw	r2,204(sp)
   12970:	1440010e 	bge	r2,r17,12978 <___vfprintf_internal_r+0x12f4>
   12974:	1023883a 	mov	r17,r2
   12978:	04400a0e 	bge	zero,r17,129a4 <___vfprintf_internal_r+0x1320>
   1297c:	d8801f17 	ldw	r2,124(sp)
   12980:	1c47883a 	add	r3,r3,r17
   12984:	44000015 	stw	r16,0(r8)
   12988:	10800044 	addi	r2,r2,1
   1298c:	44400115 	stw	r17,4(r8)
   12990:	d8c02015 	stw	r3,128(sp)
   12994:	d8801f15 	stw	r2,124(sp)
   12998:	010001c4 	movi	r4,7
   1299c:	20826516 	blt	r4,r2,13334 <___vfprintf_internal_r+0x1cb0>
   129a0:	42000204 	addi	r8,r8,8
   129a4:	88026116 	blt	r17,zero,1332c <___vfprintf_internal_r+0x1ca8>
   129a8:	d9003217 	ldw	r4,200(sp)
   129ac:	2463c83a 	sub	r17,r4,r17
   129b0:	04407b0e 	bge	zero,r17,12ba0 <___vfprintf_internal_r+0x151c>
   129b4:	05800404 	movi	r22,16
   129b8:	d8801f17 	ldw	r2,124(sp)
   129bc:	b4419d0e 	bge	r22,r17,13034 <___vfprintf_internal_r+0x19b0>
   129c0:	010000f4 	movhi	r4,3
   129c4:	212a1a84 	addi	r4,r4,-22422
   129c8:	d9002c15 	stw	r4,176(sp)
   129cc:	070001c4 	movi	fp,7
   129d0:	dcc02d17 	ldw	r19,180(sp)
   129d4:	00000306 	br	129e4 <___vfprintf_internal_r+0x1360>
   129d8:	42000204 	addi	r8,r8,8
   129dc:	8c7ffc04 	addi	r17,r17,-16
   129e0:	b441970e 	bge	r22,r17,13040 <___vfprintf_internal_r+0x19bc>
   129e4:	18c00404 	addi	r3,r3,16
   129e8:	10800044 	addi	r2,r2,1
   129ec:	45000015 	stw	r20,0(r8)
   129f0:	45800115 	stw	r22,4(r8)
   129f4:	d8c02015 	stw	r3,128(sp)
   129f8:	d8801f15 	stw	r2,124(sp)
   129fc:	e0bff60e 	bge	fp,r2,129d8 <__alt_data_end+0xfc0129d8>
   12a00:	d9801e04 	addi	r6,sp,120
   12a04:	b80b883a 	mov	r5,r23
   12a08:	9809883a 	mov	r4,r19
   12a0c:	00199900 	call	19990 <__sprint_r>
   12a10:	103c201e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12a14:	d8c02017 	ldw	r3,128(sp)
   12a18:	d8801f17 	ldw	r2,124(sp)
   12a1c:	da000404 	addi	r8,sp,16
   12a20:	003fee06 	br	129dc <__alt_data_end+0xfc0129dc>
   12a24:	d9002d17 	ldw	r4,180(sp)
   12a28:	d9801e04 	addi	r6,sp,120
   12a2c:	b80b883a 	mov	r5,r23
   12a30:	00199900 	call	19990 <__sprint_r>
   12a34:	103c171e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12a38:	d8c02017 	ldw	r3,128(sp)
   12a3c:	df002787 	ldb	fp,158(sp)
   12a40:	da000404 	addi	r8,sp,16
   12a44:	003d3406 	br	11f18 <__alt_data_end+0xfc011f18>
   12a48:	9080040c 	andi	r2,r18,16
   12a4c:	10016126 	beq	r2,zero,12fd4 <___vfprintf_internal_r+0x1950>
   12a50:	d9402e17 	ldw	r5,184(sp)
   12a54:	2cc00017 	ldw	r19,0(r5)
   12a58:	29400104 	addi	r5,r5,4
   12a5c:	d9402e15 	stw	r5,184(sp)
   12a60:	982dd7fa 	srai	r22,r19,31
   12a64:	b005883a 	mov	r2,r22
   12a68:	003c5a06 	br	11bd4 <__alt_data_end+0xfc011bd4>
   12a6c:	9080040c 	andi	r2,r18,16
   12a70:	10003526 	beq	r2,zero,12b48 <___vfprintf_internal_r+0x14c4>
   12a74:	d8c02e17 	ldw	r3,184(sp)
   12a78:	d9002a17 	ldw	r4,168(sp)
   12a7c:	d8002785 	stb	zero,158(sp)
   12a80:	18800104 	addi	r2,r3,4
   12a84:	1cc00017 	ldw	r19,0(r3)
   12a88:	002d883a 	mov	r22,zero
   12a8c:	20003716 	blt	r4,zero,12b6c <___vfprintf_internal_r+0x14e8>
   12a90:	00ffdfc4 	movi	r3,-129
   12a94:	d8802e15 	stw	r2,184(sp)
   12a98:	90e4703a 	and	r18,r18,r3
   12a9c:	0039883a 	mov	fp,zero
   12aa0:	983dd426 	beq	r19,zero,121f4 <__alt_data_end+0xfc0121f4>
   12aa4:	00800244 	movi	r2,9
   12aa8:	14fc5336 	bltu	r2,r19,11bf8 <__alt_data_end+0xfc011bf8>
   12aac:	d8c02817 	ldw	r3,160(sp)
   12ab0:	dc001dc4 	addi	r16,sp,119
   12ab4:	9cc00c04 	addi	r19,r19,48
   12ab8:	1c07c83a 	sub	r3,r3,r16
   12abc:	dcc01dc5 	stb	r19,119(sp)
   12ac0:	d8c02b15 	stw	r3,172(sp)
   12ac4:	003cc606 	br	11de0 <__alt_data_end+0xfc011de0>
   12ac8:	d8803317 	ldw	r2,204(sp)
   12acc:	143fffc4 	addi	r16,r2,-1
   12ad0:	043f4d0e 	bge	zero,r16,12808 <__alt_data_end+0xfc012808>
   12ad4:	07000404 	movi	fp,16
   12ad8:	e400810e 	bge	fp,r16,12ce0 <___vfprintf_internal_r+0x165c>
   12adc:	014000f4 	movhi	r5,3
   12ae0:	296a1a84 	addi	r5,r5,-22422
   12ae4:	d9402c15 	stw	r5,176(sp)
   12ae8:	01c001c4 	movi	r7,7
   12aec:	dcc02d17 	ldw	r19,180(sp)
   12af0:	00000306 	br	12b00 <___vfprintf_internal_r+0x147c>
   12af4:	b5800204 	addi	r22,r22,8
   12af8:	843ffc04 	addi	r16,r16,-16
   12afc:	e4007b0e 	bge	fp,r16,12cec <___vfprintf_internal_r+0x1668>
   12b00:	18c00404 	addi	r3,r3,16
   12b04:	8c400044 	addi	r17,r17,1
   12b08:	b5000015 	stw	r20,0(r22)
   12b0c:	b7000115 	stw	fp,4(r22)
   12b10:	d8c02015 	stw	r3,128(sp)
   12b14:	dc401f15 	stw	r17,124(sp)
   12b18:	3c7ff60e 	bge	r7,r17,12af4 <__alt_data_end+0xfc012af4>
   12b1c:	d9801e04 	addi	r6,sp,120
   12b20:	b80b883a 	mov	r5,r23
   12b24:	9809883a 	mov	r4,r19
   12b28:	d9c03c15 	stw	r7,240(sp)
   12b2c:	00199900 	call	19990 <__sprint_r>
   12b30:	d9c03c17 	ldw	r7,240(sp)
   12b34:	103bd71e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12b38:	d8c02017 	ldw	r3,128(sp)
   12b3c:	dc401f17 	ldw	r17,124(sp)
   12b40:	dd800404 	addi	r22,sp,16
   12b44:	003fec06 	br	12af8 <__alt_data_end+0xfc012af8>
   12b48:	9080100c 	andi	r2,r18,64
   12b4c:	d8002785 	stb	zero,158(sp)
   12b50:	10010e26 	beq	r2,zero,12f8c <___vfprintf_internal_r+0x1908>
   12b54:	d9402e17 	ldw	r5,184(sp)
   12b58:	d8c02a17 	ldw	r3,168(sp)
   12b5c:	002d883a 	mov	r22,zero
   12b60:	28800104 	addi	r2,r5,4
   12b64:	2cc0000b 	ldhu	r19,0(r5)
   12b68:	183fc90e 	bge	r3,zero,12a90 <__alt_data_end+0xfc012a90>
   12b6c:	d8802e15 	stw	r2,184(sp)
   12b70:	0039883a 	mov	fp,zero
   12b74:	9d84b03a 	or	r2,r19,r22
   12b78:	103c1e1e 	bne	r2,zero,11bf4 <__alt_data_end+0xfc011bf4>
   12b7c:	00800044 	movi	r2,1
   12b80:	003e6c06 	br	12534 <__alt_data_end+0xfc012534>
   12b84:	d9002d17 	ldw	r4,180(sp)
   12b88:	d9801e04 	addi	r6,sp,120
   12b8c:	b80b883a 	mov	r5,r23
   12b90:	00199900 	call	19990 <__sprint_r>
   12b94:	103bbf1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12b98:	d8c02017 	ldw	r3,128(sp)
   12b9c:	da000404 	addi	r8,sp,16
   12ba0:	d9003217 	ldw	r4,200(sp)
   12ba4:	d8802617 	ldw	r2,152(sp)
   12ba8:	d9403317 	ldw	r5,204(sp)
   12bac:	8123883a 	add	r17,r16,r4
   12bb0:	11400216 	blt	r2,r5,12bbc <___vfprintf_internal_r+0x1538>
   12bb4:	9100004c 	andi	r4,r18,1
   12bb8:	20000d26 	beq	r4,zero,12bf0 <___vfprintf_internal_r+0x156c>
   12bbc:	d9003717 	ldw	r4,220(sp)
   12bc0:	d9403417 	ldw	r5,208(sp)
   12bc4:	1907883a 	add	r3,r3,r4
   12bc8:	d9001f17 	ldw	r4,124(sp)
   12bcc:	41400015 	stw	r5,0(r8)
   12bd0:	d9403717 	ldw	r5,220(sp)
   12bd4:	21000044 	addi	r4,r4,1
   12bd8:	d8c02015 	stw	r3,128(sp)
   12bdc:	41400115 	stw	r5,4(r8)
   12be0:	d9001f15 	stw	r4,124(sp)
   12be4:	014001c4 	movi	r5,7
   12be8:	2901e816 	blt	r5,r4,1338c <___vfprintf_internal_r+0x1d08>
   12bec:	42000204 	addi	r8,r8,8
   12bf0:	d9003317 	ldw	r4,204(sp)
   12bf4:	8121883a 	add	r16,r16,r4
   12bf8:	2085c83a 	sub	r2,r4,r2
   12bfc:	8461c83a 	sub	r16,r16,r17
   12c00:	1400010e 	bge	r2,r16,12c08 <___vfprintf_internal_r+0x1584>
   12c04:	1021883a 	mov	r16,r2
   12c08:	04000a0e 	bge	zero,r16,12c34 <___vfprintf_internal_r+0x15b0>
   12c0c:	d9001f17 	ldw	r4,124(sp)
   12c10:	1c07883a 	add	r3,r3,r16
   12c14:	44400015 	stw	r17,0(r8)
   12c18:	21000044 	addi	r4,r4,1
   12c1c:	44000115 	stw	r16,4(r8)
   12c20:	d8c02015 	stw	r3,128(sp)
   12c24:	d9001f15 	stw	r4,124(sp)
   12c28:	014001c4 	movi	r5,7
   12c2c:	2901fb16 	blt	r5,r4,1341c <___vfprintf_internal_r+0x1d98>
   12c30:	42000204 	addi	r8,r8,8
   12c34:	8001f716 	blt	r16,zero,13414 <___vfprintf_internal_r+0x1d90>
   12c38:	1421c83a 	sub	r16,r2,r16
   12c3c:	043d160e 	bge	zero,r16,12098 <__alt_data_end+0xfc012098>
   12c40:	04400404 	movi	r17,16
   12c44:	d8801f17 	ldw	r2,124(sp)
   12c48:	8c3efb0e 	bge	r17,r16,12838 <__alt_data_end+0xfc012838>
   12c4c:	014000f4 	movhi	r5,3
   12c50:	296a1a84 	addi	r5,r5,-22422
   12c54:	d9402c15 	stw	r5,176(sp)
   12c58:	058001c4 	movi	r22,7
   12c5c:	dcc02d17 	ldw	r19,180(sp)
   12c60:	00000306 	br	12c70 <___vfprintf_internal_r+0x15ec>
   12c64:	42000204 	addi	r8,r8,8
   12c68:	843ffc04 	addi	r16,r16,-16
   12c6c:	8c3ef50e 	bge	r17,r16,12844 <__alt_data_end+0xfc012844>
   12c70:	18c00404 	addi	r3,r3,16
   12c74:	10800044 	addi	r2,r2,1
   12c78:	45000015 	stw	r20,0(r8)
   12c7c:	44400115 	stw	r17,4(r8)
   12c80:	d8c02015 	stw	r3,128(sp)
   12c84:	d8801f15 	stw	r2,124(sp)
   12c88:	b0bff60e 	bge	r22,r2,12c64 <__alt_data_end+0xfc012c64>
   12c8c:	d9801e04 	addi	r6,sp,120
   12c90:	b80b883a 	mov	r5,r23
   12c94:	9809883a 	mov	r4,r19
   12c98:	00199900 	call	19990 <__sprint_r>
   12c9c:	103b7d1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12ca0:	d8c02017 	ldw	r3,128(sp)
   12ca4:	d8801f17 	ldw	r2,124(sp)
   12ca8:	da000404 	addi	r8,sp,16
   12cac:	003fee06 	br	12c68 <__alt_data_end+0xfc012c68>
   12cb0:	9088703a 	and	r4,r18,r2
   12cb4:	203eab1e 	bne	r4,zero,12764 <__alt_data_end+0xfc012764>
   12cb8:	dc401f17 	ldw	r17,124(sp)
   12cbc:	40800115 	stw	r2,4(r8)
   12cc0:	44000015 	stw	r16,0(r8)
   12cc4:	8c400044 	addi	r17,r17,1
   12cc8:	d8c02015 	stw	r3,128(sp)
   12ccc:	dc401f15 	stw	r17,124(sp)
   12cd0:	008001c4 	movi	r2,7
   12cd4:	14400e16 	blt	r2,r17,12d10 <___vfprintf_internal_r+0x168c>
   12cd8:	45800204 	addi	r22,r8,8
   12cdc:	003eca06 	br	12808 <__alt_data_end+0xfc012808>
   12ce0:	010000f4 	movhi	r4,3
   12ce4:	212a1a84 	addi	r4,r4,-22422
   12ce8:	d9002c15 	stw	r4,176(sp)
   12cec:	d8802c17 	ldw	r2,176(sp)
   12cf0:	1c07883a 	add	r3,r3,r16
   12cf4:	8c400044 	addi	r17,r17,1
   12cf8:	b0800015 	stw	r2,0(r22)
   12cfc:	b4000115 	stw	r16,4(r22)
   12d00:	d8c02015 	stw	r3,128(sp)
   12d04:	dc401f15 	stw	r17,124(sp)
   12d08:	008001c4 	movi	r2,7
   12d0c:	147ebd0e 	bge	r2,r17,12804 <__alt_data_end+0xfc012804>
   12d10:	d9002d17 	ldw	r4,180(sp)
   12d14:	d9801e04 	addi	r6,sp,120
   12d18:	b80b883a 	mov	r5,r23
   12d1c:	00199900 	call	19990 <__sprint_r>
   12d20:	103b5c1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12d24:	d8c02017 	ldw	r3,128(sp)
   12d28:	dc401f17 	ldw	r17,124(sp)
   12d2c:	dd800404 	addi	r22,sp,16
   12d30:	003eb506 	br	12808 <__alt_data_end+0xfc012808>
   12d34:	d9002d17 	ldw	r4,180(sp)
   12d38:	d9801e04 	addi	r6,sp,120
   12d3c:	b80b883a 	mov	r5,r23
   12d40:	00199900 	call	19990 <__sprint_r>
   12d44:	103b531e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12d48:	d8c02017 	ldw	r3,128(sp)
   12d4c:	dc401f17 	ldw	r17,124(sp)
   12d50:	da000404 	addi	r8,sp,16
   12d54:	003e8d06 	br	1278c <__alt_data_end+0xfc01278c>
   12d58:	d9002d17 	ldw	r4,180(sp)
   12d5c:	d9801e04 	addi	r6,sp,120
   12d60:	b80b883a 	mov	r5,r23
   12d64:	00199900 	call	19990 <__sprint_r>
   12d68:	103b4a1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12d6c:	d8c02017 	ldw	r3,128(sp)
   12d70:	dc401f17 	ldw	r17,124(sp)
   12d74:	dd800404 	addi	r22,sp,16
   12d78:	003e8f06 	br	127b8 <__alt_data_end+0xfc0127b8>
   12d7c:	0027883a 	mov	r19,zero
   12d80:	003f4a06 	br	12aac <__alt_data_end+0xfc012aac>
   12d84:	d9002d17 	ldw	r4,180(sp)
   12d88:	d9801e04 	addi	r6,sp,120
   12d8c:	b80b883a 	mov	r5,r23
   12d90:	00199900 	call	19990 <__sprint_r>
   12d94:	103b3f1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   12d98:	d8c02017 	ldw	r3,128(sp)
   12d9c:	da000404 	addi	r8,sp,16
   12da0:	003c7b06 	br	11f90 <__alt_data_end+0xfc011f90>
   12da4:	d9402a17 	ldw	r5,168(sp)
   12da8:	04e7c83a 	sub	r19,zero,r19
   12dac:	07000b44 	movi	fp,45
   12db0:	9804c03a 	cmpne	r2,r19,zero
   12db4:	05adc83a 	sub	r22,zero,r22
   12db8:	df002785 	stb	fp,158(sp)
   12dbc:	b0adc83a 	sub	r22,r22,r2
   12dc0:	28017b16 	blt	r5,zero,133b0 <___vfprintf_internal_r+0x1d2c>
   12dc4:	00bfdfc4 	movi	r2,-129
   12dc8:	90a4703a 	and	r18,r18,r2
   12dcc:	003b8906 	br	11bf4 <__alt_data_end+0xfc011bf4>
   12dd0:	d9003617 	ldw	r4,216(sp)
   12dd4:	d9403817 	ldw	r5,224(sp)
   12dd8:	da003d15 	stw	r8,244(sp)
   12ddc:	00181740 	call	18174 <__fpclassifyd>
   12de0:	da003d17 	ldw	r8,244(sp)
   12de4:	1000f026 	beq	r2,zero,131a8 <___vfprintf_internal_r+0x1b24>
   12de8:	d9002a17 	ldw	r4,168(sp)
   12dec:	05bff7c4 	movi	r22,-33
   12df0:	00bfffc4 	movi	r2,-1
   12df4:	8dac703a 	and	r22,r17,r22
   12df8:	20820026 	beq	r4,r2,135fc <___vfprintf_internal_r+0x1f78>
   12dfc:	008011c4 	movi	r2,71
   12e00:	b081f726 	beq	r22,r2,135e0 <___vfprintf_internal_r+0x1f5c>
   12e04:	d9003817 	ldw	r4,224(sp)
   12e08:	90c04014 	ori	r3,r18,256
   12e0c:	d8c02c15 	stw	r3,176(sp)
   12e10:	20021516 	blt	r4,zero,13668 <___vfprintf_internal_r+0x1fe4>
   12e14:	dcc03817 	ldw	r19,224(sp)
   12e18:	d8002905 	stb	zero,164(sp)
   12e1c:	00801984 	movi	r2,102
   12e20:	8881f926 	beq	r17,r2,13608 <___vfprintf_internal_r+0x1f84>
   12e24:	00801184 	movi	r2,70
   12e28:	88821c26 	beq	r17,r2,1369c <___vfprintf_internal_r+0x2018>
   12e2c:	00801144 	movi	r2,69
   12e30:	b081ef26 	beq	r22,r2,135f0 <___vfprintf_internal_r+0x1f6c>
   12e34:	d8c02a17 	ldw	r3,168(sp)
   12e38:	d8802104 	addi	r2,sp,132
   12e3c:	d8800315 	stw	r2,12(sp)
   12e40:	d9403617 	ldw	r5,216(sp)
   12e44:	d8802504 	addi	r2,sp,148
   12e48:	d9002d17 	ldw	r4,180(sp)
   12e4c:	d8800215 	stw	r2,8(sp)
   12e50:	d8802604 	addi	r2,sp,152
   12e54:	d8c00015 	stw	r3,0(sp)
   12e58:	d8800115 	stw	r2,4(sp)
   12e5c:	01c00084 	movi	r7,2
   12e60:	980d883a 	mov	r6,r19
   12e64:	d8c03c15 	stw	r3,240(sp)
   12e68:	da003d15 	stw	r8,244(sp)
   12e6c:	0013db40 	call	13db4 <_dtoa_r>
   12e70:	1021883a 	mov	r16,r2
   12e74:	008019c4 	movi	r2,103
   12e78:	d8c03c17 	ldw	r3,240(sp)
   12e7c:	da003d17 	ldw	r8,244(sp)
   12e80:	88817126 	beq	r17,r2,13448 <___vfprintf_internal_r+0x1dc4>
   12e84:	008011c4 	movi	r2,71
   12e88:	88829126 	beq	r17,r2,138d0 <___vfprintf_internal_r+0x224c>
   12e8c:	80f9883a 	add	fp,r16,r3
   12e90:	d9003617 	ldw	r4,216(sp)
   12e94:	000d883a 	mov	r6,zero
   12e98:	000f883a 	mov	r7,zero
   12e9c:	980b883a 	mov	r5,r19
   12ea0:	da003d15 	stw	r8,244(sp)
   12ea4:	001d7140 	call	1d714 <__eqdf2>
   12ea8:	da003d17 	ldw	r8,244(sp)
   12eac:	10018d26 	beq	r2,zero,134e4 <___vfprintf_internal_r+0x1e60>
   12eb0:	d8802117 	ldw	r2,132(sp)
   12eb4:	1700062e 	bgeu	r2,fp,12ed0 <___vfprintf_internal_r+0x184c>
   12eb8:	01000c04 	movi	r4,48
   12ebc:	10c00044 	addi	r3,r2,1
   12ec0:	d8c02115 	stw	r3,132(sp)
   12ec4:	11000005 	stb	r4,0(r2)
   12ec8:	d8802117 	ldw	r2,132(sp)
   12ecc:	173ffb36 	bltu	r2,fp,12ebc <__alt_data_end+0xfc012ebc>
   12ed0:	1405c83a 	sub	r2,r2,r16
   12ed4:	d8803315 	stw	r2,204(sp)
   12ed8:	008011c4 	movi	r2,71
   12edc:	b0817626 	beq	r22,r2,134b8 <___vfprintf_internal_r+0x1e34>
   12ee0:	00801944 	movi	r2,101
   12ee4:	1442800e 	bge	r2,r17,138e8 <___vfprintf_internal_r+0x2264>
   12ee8:	d8c02617 	ldw	r3,152(sp)
   12eec:	00801984 	movi	r2,102
   12ef0:	d8c03215 	stw	r3,200(sp)
   12ef4:	8881fe26 	beq	r17,r2,136f0 <___vfprintf_internal_r+0x206c>
   12ef8:	d8c03217 	ldw	r3,200(sp)
   12efc:	d9003317 	ldw	r4,204(sp)
   12f00:	1901dd16 	blt	r3,r4,13678 <___vfprintf_internal_r+0x1ff4>
   12f04:	9480004c 	andi	r18,r18,1
   12f08:	90022b1e 	bne	r18,zero,137b8 <___vfprintf_internal_r+0x2134>
   12f0c:	1805883a 	mov	r2,r3
   12f10:	18028316 	blt	r3,zero,13920 <___vfprintf_internal_r+0x229c>
   12f14:	d8c03217 	ldw	r3,200(sp)
   12f18:	044019c4 	movi	r17,103
   12f1c:	d8c02b15 	stw	r3,172(sp)
   12f20:	df002907 	ldb	fp,164(sp)
   12f24:	e001531e 	bne	fp,zero,13474 <___vfprintf_internal_r+0x1df0>
   12f28:	df002783 	ldbu	fp,158(sp)
   12f2c:	d8802915 	stw	r2,164(sp)
   12f30:	dc802c17 	ldw	r18,176(sp)
   12f34:	d8002a15 	stw	zero,168(sp)
   12f38:	003baf06 	br	11df8 <__alt_data_end+0xfc011df8>
   12f3c:	d8c02e17 	ldw	r3,184(sp)
   12f40:	d9002e17 	ldw	r4,184(sp)
   12f44:	d9402e17 	ldw	r5,184(sp)
   12f48:	18c00017 	ldw	r3,0(r3)
   12f4c:	21000117 	ldw	r4,4(r4)
   12f50:	29400204 	addi	r5,r5,8
   12f54:	d8c03615 	stw	r3,216(sp)
   12f58:	d9003815 	stw	r4,224(sp)
   12f5c:	d9402e15 	stw	r5,184(sp)
   12f60:	003b5006 	br	11ca4 <__alt_data_end+0xfc011ca4>
   12f64:	ac400007 	ldb	r17,0(r21)
   12f68:	003a2806 	br	1180c <__alt_data_end+0xfc01180c>
   12f6c:	9080100c 	andi	r2,r18,64
   12f70:	1000a826 	beq	r2,zero,13214 <___vfprintf_internal_r+0x1b90>
   12f74:	d8c02e17 	ldw	r3,184(sp)
   12f78:	002d883a 	mov	r22,zero
   12f7c:	1cc0000b 	ldhu	r19,0(r3)
   12f80:	18c00104 	addi	r3,r3,4
   12f84:	d8c02e15 	stw	r3,184(sp)
   12f88:	003caf06 	br	12248 <__alt_data_end+0xfc012248>
   12f8c:	d9002e17 	ldw	r4,184(sp)
   12f90:	d9402a17 	ldw	r5,168(sp)
   12f94:	002d883a 	mov	r22,zero
   12f98:	20800104 	addi	r2,r4,4
   12f9c:	24c00017 	ldw	r19,0(r4)
   12fa0:	283ebb0e 	bge	r5,zero,12a90 <__alt_data_end+0xfc012a90>
   12fa4:	003ef106 	br	12b6c <__alt_data_end+0xfc012b6c>
   12fa8:	9080040c 	andi	r2,r18,16
   12fac:	1000921e 	bne	r2,zero,131f8 <___vfprintf_internal_r+0x1b74>
   12fb0:	9480100c 	andi	r18,r18,64
   12fb4:	90013926 	beq	r18,zero,1349c <___vfprintf_internal_r+0x1e18>
   12fb8:	d9402e17 	ldw	r5,184(sp)
   12fbc:	d8c02f17 	ldw	r3,188(sp)
   12fc0:	28800017 	ldw	r2,0(r5)
   12fc4:	29400104 	addi	r5,r5,4
   12fc8:	d9402e15 	stw	r5,184(sp)
   12fcc:	10c0000d 	sth	r3,0(r2)
   12fd0:	0039e406 	br	11764 <__alt_data_end+0xfc011764>
   12fd4:	9080100c 	andi	r2,r18,64
   12fd8:	10008026 	beq	r2,zero,131dc <___vfprintf_internal_r+0x1b58>
   12fdc:	d8802e17 	ldw	r2,184(sp)
   12fe0:	14c0000f 	ldh	r19,0(r2)
   12fe4:	10800104 	addi	r2,r2,4
   12fe8:	d8802e15 	stw	r2,184(sp)
   12fec:	982dd7fa 	srai	r22,r19,31
   12ff0:	b005883a 	mov	r2,r22
   12ff4:	003af706 	br	11bd4 <__alt_data_end+0xfc011bd4>
   12ff8:	9080100c 	andi	r2,r18,64
   12ffc:	d8002785 	stb	zero,158(sp)
   13000:	10008a1e 	bne	r2,zero,1322c <___vfprintf_internal_r+0x1ba8>
   13004:	d9002e17 	ldw	r4,184(sp)
   13008:	d9402a17 	ldw	r5,168(sp)
   1300c:	002d883a 	mov	r22,zero
   13010:	20800104 	addi	r2,r4,4
   13014:	24c00017 	ldw	r19,0(r4)
   13018:	283e4b0e 	bge	r5,zero,12948 <__alt_data_end+0xfc012948>
   1301c:	9d86b03a 	or	r3,r19,r22
   13020:	d8802e15 	stw	r2,184(sp)
   13024:	183e4c1e 	bne	r3,zero,12958 <__alt_data_end+0xfc012958>
   13028:	0039883a 	mov	fp,zero
   1302c:	0005883a 	mov	r2,zero
   13030:	003d4006 	br	12534 <__alt_data_end+0xfc012534>
   13034:	014000f4 	movhi	r5,3
   13038:	296a1a84 	addi	r5,r5,-22422
   1303c:	d9402c15 	stw	r5,176(sp)
   13040:	d9402c17 	ldw	r5,176(sp)
   13044:	1c47883a 	add	r3,r3,r17
   13048:	10800044 	addi	r2,r2,1
   1304c:	41400015 	stw	r5,0(r8)
   13050:	44400115 	stw	r17,4(r8)
   13054:	d8c02015 	stw	r3,128(sp)
   13058:	d8801f15 	stw	r2,124(sp)
   1305c:	010001c4 	movi	r4,7
   13060:	20bec816 	blt	r4,r2,12b84 <__alt_data_end+0xfc012b84>
   13064:	42000204 	addi	r8,r8,8
   13068:	003ecd06 	br	12ba0 <__alt_data_end+0xfc012ba0>
   1306c:	d9002a17 	ldw	r4,168(sp)
   13070:	d8002785 	stb	zero,158(sp)
   13074:	203d2d16 	blt	r4,zero,1252c <__alt_data_end+0xfc01252c>
   13078:	00bfdfc4 	movi	r2,-129
   1307c:	90a4703a 	and	r18,r18,r2
   13080:	003a6106 	br	11a08 <__alt_data_end+0xfc011a08>
   13084:	010000f4 	movhi	r4,3
   13088:	212a1a84 	addi	r4,r4,-22422
   1308c:	d9002c15 	stw	r4,176(sp)
   13090:	003bea06 	br	1203c <__alt_data_end+0xfc01203c>
   13094:	d9002d17 	ldw	r4,180(sp)
   13098:	d9801e04 	addi	r6,sp,120
   1309c:	b80b883a 	mov	r5,r23
   130a0:	00199900 	call	19990 <__sprint_r>
   130a4:	103a7b1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   130a8:	d8c02017 	ldw	r3,128(sp)
   130ac:	da000404 	addi	r8,sp,16
   130b0:	003d4106 	br	125b8 <__alt_data_end+0xfc0125b8>
   130b4:	d8801f17 	ldw	r2,124(sp)
   130b8:	014000f4 	movhi	r5,3
   130bc:	01000044 	movi	r4,1
   130c0:	18c00044 	addi	r3,r3,1
   130c4:	10800044 	addi	r2,r2,1
   130c8:	296a1204 	addi	r5,r5,-22456
   130cc:	41000115 	stw	r4,4(r8)
   130d0:	41400015 	stw	r5,0(r8)
   130d4:	d8c02015 	stw	r3,128(sp)
   130d8:	d8801f15 	stw	r2,124(sp)
   130dc:	010001c4 	movi	r4,7
   130e0:	20805c16 	blt	r4,r2,13254 <___vfprintf_internal_r+0x1bd0>
   130e4:	42000204 	addi	r8,r8,8
   130e8:	8800041e 	bne	r17,zero,130fc <___vfprintf_internal_r+0x1a78>
   130ec:	d8803317 	ldw	r2,204(sp)
   130f0:	1000021e 	bne	r2,zero,130fc <___vfprintf_internal_r+0x1a78>
   130f4:	9080004c 	andi	r2,r18,1
   130f8:	103be726 	beq	r2,zero,12098 <__alt_data_end+0xfc012098>
   130fc:	d9003717 	ldw	r4,220(sp)
   13100:	d8801f17 	ldw	r2,124(sp)
   13104:	d9403417 	ldw	r5,208(sp)
   13108:	20c7883a 	add	r3,r4,r3
   1310c:	10800044 	addi	r2,r2,1
   13110:	41000115 	stw	r4,4(r8)
   13114:	41400015 	stw	r5,0(r8)
   13118:	d8c02015 	stw	r3,128(sp)
   1311c:	d8801f15 	stw	r2,124(sp)
   13120:	010001c4 	movi	r4,7
   13124:	20812116 	blt	r4,r2,135ac <___vfprintf_internal_r+0x1f28>
   13128:	42000204 	addi	r8,r8,8
   1312c:	0463c83a 	sub	r17,zero,r17
   13130:	0440730e 	bge	zero,r17,13300 <___vfprintf_internal_r+0x1c7c>
   13134:	05800404 	movi	r22,16
   13138:	b440860e 	bge	r22,r17,13354 <___vfprintf_internal_r+0x1cd0>
   1313c:	014000f4 	movhi	r5,3
   13140:	296a1a84 	addi	r5,r5,-22422
   13144:	d9402c15 	stw	r5,176(sp)
   13148:	070001c4 	movi	fp,7
   1314c:	dcc02d17 	ldw	r19,180(sp)
   13150:	00000306 	br	13160 <___vfprintf_internal_r+0x1adc>
   13154:	42000204 	addi	r8,r8,8
   13158:	8c7ffc04 	addi	r17,r17,-16
   1315c:	b440800e 	bge	r22,r17,13360 <___vfprintf_internal_r+0x1cdc>
   13160:	18c00404 	addi	r3,r3,16
   13164:	10800044 	addi	r2,r2,1
   13168:	45000015 	stw	r20,0(r8)
   1316c:	45800115 	stw	r22,4(r8)
   13170:	d8c02015 	stw	r3,128(sp)
   13174:	d8801f15 	stw	r2,124(sp)
   13178:	e0bff60e 	bge	fp,r2,13154 <__alt_data_end+0xfc013154>
   1317c:	d9801e04 	addi	r6,sp,120
   13180:	b80b883a 	mov	r5,r23
   13184:	9809883a 	mov	r4,r19
   13188:	00199900 	call	19990 <__sprint_r>
   1318c:	103a411e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   13190:	d8c02017 	ldw	r3,128(sp)
   13194:	d8801f17 	ldw	r2,124(sp)
   13198:	da000404 	addi	r8,sp,16
   1319c:	003fee06 	br	13158 <__alt_data_end+0xfc013158>
   131a0:	00bfffc4 	movi	r2,-1
   131a4:	003a3f06 	br	11aa4 <__alt_data_end+0xfc011aa4>
   131a8:	008011c4 	movi	r2,71
   131ac:	1440b816 	blt	r2,r17,13490 <___vfprintf_internal_r+0x1e0c>
   131b0:	040000f4 	movhi	r16,3
   131b4:	842a0404 	addi	r16,r16,-22512
   131b8:	00c000c4 	movi	r3,3
   131bc:	00bfdfc4 	movi	r2,-129
   131c0:	d8c02915 	stw	r3,164(sp)
   131c4:	90a4703a 	and	r18,r18,r2
   131c8:	df002783 	ldbu	fp,158(sp)
   131cc:	d8c02b15 	stw	r3,172(sp)
   131d0:	d8002a15 	stw	zero,168(sp)
   131d4:	d8003215 	stw	zero,200(sp)
   131d8:	003b0706 	br	11df8 <__alt_data_end+0xfc011df8>
   131dc:	d8c02e17 	ldw	r3,184(sp)
   131e0:	1cc00017 	ldw	r19,0(r3)
   131e4:	18c00104 	addi	r3,r3,4
   131e8:	d8c02e15 	stw	r3,184(sp)
   131ec:	982dd7fa 	srai	r22,r19,31
   131f0:	b005883a 	mov	r2,r22
   131f4:	003a7706 	br	11bd4 <__alt_data_end+0xfc011bd4>
   131f8:	d8c02e17 	ldw	r3,184(sp)
   131fc:	d9002f17 	ldw	r4,188(sp)
   13200:	18800017 	ldw	r2,0(r3)
   13204:	18c00104 	addi	r3,r3,4
   13208:	d8c02e15 	stw	r3,184(sp)
   1320c:	11000015 	stw	r4,0(r2)
   13210:	00395406 	br	11764 <__alt_data_end+0xfc011764>
   13214:	d9002e17 	ldw	r4,184(sp)
   13218:	002d883a 	mov	r22,zero
   1321c:	24c00017 	ldw	r19,0(r4)
   13220:	21000104 	addi	r4,r4,4
   13224:	d9002e15 	stw	r4,184(sp)
   13228:	003c0706 	br	12248 <__alt_data_end+0xfc012248>
   1322c:	d9402e17 	ldw	r5,184(sp)
   13230:	d8c02a17 	ldw	r3,168(sp)
   13234:	002d883a 	mov	r22,zero
   13238:	28800104 	addi	r2,r5,4
   1323c:	2cc0000b 	ldhu	r19,0(r5)
   13240:	183dc10e 	bge	r3,zero,12948 <__alt_data_end+0xfc012948>
   13244:	003f7506 	br	1301c <__alt_data_end+0xfc01301c>
   13248:	040000f4 	movhi	r16,3
   1324c:	842a0204 	addi	r16,r16,-22520
   13250:	003aa706 	br	11cf0 <__alt_data_end+0xfc011cf0>
   13254:	d9002d17 	ldw	r4,180(sp)
   13258:	d9801e04 	addi	r6,sp,120
   1325c:	b80b883a 	mov	r5,r23
   13260:	00199900 	call	19990 <__sprint_r>
   13264:	103a0b1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   13268:	dc402617 	ldw	r17,152(sp)
   1326c:	d8c02017 	ldw	r3,128(sp)
   13270:	da000404 	addi	r8,sp,16
   13274:	003f9c06 	br	130e8 <__alt_data_end+0xfc0130e8>
   13278:	ac400043 	ldbu	r17,1(r21)
   1327c:	84000814 	ori	r16,r16,32
   13280:	ad400044 	addi	r21,r21,1
   13284:	8c403fcc 	andi	r17,r17,255
   13288:	8c40201c 	xori	r17,r17,128
   1328c:	8c7fe004 	addi	r17,r17,-128
   13290:	00395e06 	br	1180c <__alt_data_end+0xfc01180c>
   13294:	d8c02e15 	stw	r3,184(sp)
   13298:	0039883a 	mov	fp,zero
   1329c:	003e3506 	br	12b74 <__alt_data_end+0xfc012b74>
   132a0:	d9002d17 	ldw	r4,180(sp)
   132a4:	d9801e04 	addi	r6,sp,120
   132a8:	b80b883a 	mov	r5,r23
   132ac:	00199900 	call	19990 <__sprint_r>
   132b0:	1039f81e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   132b4:	d8c02017 	ldw	r3,128(sp)
   132b8:	da000404 	addi	r8,sp,16
   132bc:	003cd006 	br	12600 <__alt_data_end+0xfc012600>
   132c0:	8009883a 	mov	r4,r16
   132c4:	df003d15 	stw	fp,244(sp)
   132c8:	000f3280 	call	f328 <strlen>
   132cc:	d8802b15 	stw	r2,172(sp)
   132d0:	da003d17 	ldw	r8,244(sp)
   132d4:	103c200e 	bge	r2,zero,12358 <__alt_data_end+0xfc012358>
   132d8:	0005883a 	mov	r2,zero
   132dc:	003c1e06 	br	12358 <__alt_data_end+0xfc012358>
   132e0:	d9002d17 	ldw	r4,180(sp)
   132e4:	d9801e04 	addi	r6,sp,120
   132e8:	b80b883a 	mov	r5,r23
   132ec:	00199900 	call	19990 <__sprint_r>
   132f0:	1039e81e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   132f4:	d8c02017 	ldw	r3,128(sp)
   132f8:	d8801f17 	ldw	r2,124(sp)
   132fc:	da000404 	addi	r8,sp,16
   13300:	d9403317 	ldw	r5,204(sp)
   13304:	10800044 	addi	r2,r2,1
   13308:	44000015 	stw	r16,0(r8)
   1330c:	28c7883a 	add	r3,r5,r3
   13310:	003b5b06 	br	12080 <__alt_data_end+0xfc012080>
   13314:	010000f4 	movhi	r4,3
   13318:	212a1e84 	addi	r4,r4,-22406
   1331c:	d9003515 	stw	r4,212(sp)
   13320:	003af206 	br	11eec <__alt_data_end+0xfc011eec>
   13324:	013fffc4 	movi	r4,-1
   13328:	003a0806 	br	11b4c <__alt_data_end+0xfc011b4c>
   1332c:	0023883a 	mov	r17,zero
   13330:	003d9d06 	br	129a8 <__alt_data_end+0xfc0129a8>
   13334:	d9002d17 	ldw	r4,180(sp)
   13338:	d9801e04 	addi	r6,sp,120
   1333c:	b80b883a 	mov	r5,r23
   13340:	00199900 	call	19990 <__sprint_r>
   13344:	1039d31e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   13348:	d8c02017 	ldw	r3,128(sp)
   1334c:	da000404 	addi	r8,sp,16
   13350:	003d9406 	br	129a4 <__alt_data_end+0xfc0129a4>
   13354:	010000f4 	movhi	r4,3
   13358:	212a1a84 	addi	r4,r4,-22422
   1335c:	d9002c15 	stw	r4,176(sp)
   13360:	d9002c17 	ldw	r4,176(sp)
   13364:	1c47883a 	add	r3,r3,r17
   13368:	10800044 	addi	r2,r2,1
   1336c:	41000015 	stw	r4,0(r8)
   13370:	44400115 	stw	r17,4(r8)
   13374:	d8c02015 	stw	r3,128(sp)
   13378:	d8801f15 	stw	r2,124(sp)
   1337c:	010001c4 	movi	r4,7
   13380:	20bfd716 	blt	r4,r2,132e0 <__alt_data_end+0xfc0132e0>
   13384:	42000204 	addi	r8,r8,8
   13388:	003fdd06 	br	13300 <__alt_data_end+0xfc013300>
   1338c:	d9002d17 	ldw	r4,180(sp)
   13390:	d9801e04 	addi	r6,sp,120
   13394:	b80b883a 	mov	r5,r23
   13398:	00199900 	call	19990 <__sprint_r>
   1339c:	1039bd1e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   133a0:	d8802617 	ldw	r2,152(sp)
   133a4:	d8c02017 	ldw	r3,128(sp)
   133a8:	da000404 	addi	r8,sp,16
   133ac:	003e1006 	br	12bf0 <__alt_data_end+0xfc012bf0>
   133b0:	00800044 	movi	r2,1
   133b4:	10803fcc 	andi	r2,r2,255
   133b8:	00c00044 	movi	r3,1
   133bc:	10fa0d26 	beq	r2,r3,11bf4 <__alt_data_end+0xfc011bf4>
   133c0:	00c00084 	movi	r3,2
   133c4:	10fbaf26 	beq	r2,r3,12284 <__alt_data_end+0xfc012284>
   133c8:	003a6d06 	br	11d80 <__alt_data_end+0xfc011d80>
   133cc:	010000f4 	movhi	r4,3
   133d0:	212a1e84 	addi	r4,r4,-22406
   133d4:	d9003515 	stw	r4,212(sp)
   133d8:	003b5406 	br	1212c <__alt_data_end+0xfc01212c>
   133dc:	d8802a17 	ldw	r2,168(sp)
   133e0:	00c00184 	movi	r3,6
   133e4:	1880012e 	bgeu	r3,r2,133ec <___vfprintf_internal_r+0x1d68>
   133e8:	1805883a 	mov	r2,r3
   133ec:	d8802b15 	stw	r2,172(sp)
   133f0:	1000ef16 	blt	r2,zero,137b0 <___vfprintf_internal_r+0x212c>
   133f4:	040000f4 	movhi	r16,3
   133f8:	d8802915 	stw	r2,164(sp)
   133fc:	dcc02e15 	stw	r19,184(sp)
   13400:	d8002a15 	stw	zero,168(sp)
   13404:	d8003215 	stw	zero,200(sp)
   13408:	842a1004 	addi	r16,r16,-22464
   1340c:	0039883a 	mov	fp,zero
   13410:	003a8006 	br	11e14 <__alt_data_end+0xfc011e14>
   13414:	0021883a 	mov	r16,zero
   13418:	003e0706 	br	12c38 <__alt_data_end+0xfc012c38>
   1341c:	d9002d17 	ldw	r4,180(sp)
   13420:	d9801e04 	addi	r6,sp,120
   13424:	b80b883a 	mov	r5,r23
   13428:	00199900 	call	19990 <__sprint_r>
   1342c:	1039991e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   13430:	d8802617 	ldw	r2,152(sp)
   13434:	d9403317 	ldw	r5,204(sp)
   13438:	d8c02017 	ldw	r3,128(sp)
   1343c:	da000404 	addi	r8,sp,16
   13440:	2885c83a 	sub	r2,r5,r2
   13444:	003dfb06 	br	12c34 <__alt_data_end+0xfc012c34>
   13448:	9080004c 	andi	r2,r18,1
   1344c:	103e8f1e 	bne	r2,zero,12e8c <__alt_data_end+0xfc012e8c>
   13450:	d8802117 	ldw	r2,132(sp)
   13454:	003e9e06 	br	12ed0 <__alt_data_end+0xfc012ed0>
   13458:	1025883a 	mov	r18,r2
   1345c:	0039883a 	mov	fp,zero
   13460:	00800084 	movi	r2,2
   13464:	003fd306 	br	133b4 <__alt_data_end+0xfc0133b4>
   13468:	07000b44 	movi	fp,45
   1346c:	df002785 	stb	fp,158(sp)
   13470:	003a1b06 	br	11ce0 <__alt_data_end+0xfc011ce0>
   13474:	00c00b44 	movi	r3,45
   13478:	d8c02785 	stb	r3,158(sp)
   1347c:	d8802915 	stw	r2,164(sp)
   13480:	dc802c17 	ldw	r18,176(sp)
   13484:	d8002a15 	stw	zero,168(sp)
   13488:	07000b44 	movi	fp,45
   1348c:	003a5e06 	br	11e08 <__alt_data_end+0xfc011e08>
   13490:	040000f4 	movhi	r16,3
   13494:	842a0504 	addi	r16,r16,-22508
   13498:	003f4706 	br	131b8 <__alt_data_end+0xfc0131b8>
   1349c:	d9002e17 	ldw	r4,184(sp)
   134a0:	d9402f17 	ldw	r5,188(sp)
   134a4:	20800017 	ldw	r2,0(r4)
   134a8:	21000104 	addi	r4,r4,4
   134ac:	d9002e15 	stw	r4,184(sp)
   134b0:	11400015 	stw	r5,0(r2)
   134b4:	0038ab06 	br	11764 <__alt_data_end+0xfc011764>
   134b8:	dd802617 	ldw	r22,152(sp)
   134bc:	00bfff44 	movi	r2,-3
   134c0:	b0801c16 	blt	r22,r2,13534 <___vfprintf_internal_r+0x1eb0>
   134c4:	d9402a17 	ldw	r5,168(sp)
   134c8:	2d801a16 	blt	r5,r22,13534 <___vfprintf_internal_r+0x1eb0>
   134cc:	dd803215 	stw	r22,200(sp)
   134d0:	003e8906 	br	12ef8 <__alt_data_end+0xfc012ef8>
   134d4:	010000f4 	movhi	r4,3
   134d8:	212a1a84 	addi	r4,r4,-22422
   134dc:	d9002c15 	stw	r4,176(sp)
   134e0:	003c9106 	br	12728 <__alt_data_end+0xfc012728>
   134e4:	e005883a 	mov	r2,fp
   134e8:	003e7906 	br	12ed0 <__alt_data_end+0xfc012ed0>
   134ec:	d9002a17 	ldw	r4,168(sp)
   134f0:	df002783 	ldbu	fp,158(sp)
   134f4:	dcc02e15 	stw	r19,184(sp)
   134f8:	d9002915 	stw	r4,164(sp)
   134fc:	d9002b15 	stw	r4,172(sp)
   13500:	d8002a15 	stw	zero,168(sp)
   13504:	d8003215 	stw	zero,200(sp)
   13508:	003a3b06 	br	11df8 <__alt_data_end+0xfc011df8>
   1350c:	9080004c 	andi	r2,r18,1
   13510:	0039883a 	mov	fp,zero
   13514:	10000426 	beq	r2,zero,13528 <___vfprintf_internal_r+0x1ea4>
   13518:	00800c04 	movi	r2,48
   1351c:	dc001dc4 	addi	r16,sp,119
   13520:	d8801dc5 	stb	r2,119(sp)
   13524:	003b6406 	br	122b8 <__alt_data_end+0xfc0122b8>
   13528:	d8002b15 	stw	zero,172(sp)
   1352c:	dc001e04 	addi	r16,sp,120
   13530:	003a2b06 	br	11de0 <__alt_data_end+0xfc011de0>
   13534:	8c7fff84 	addi	r17,r17,-2
   13538:	b5bfffc4 	addi	r22,r22,-1
   1353c:	dd802615 	stw	r22,152(sp)
   13540:	dc4022c5 	stb	r17,139(sp)
   13544:	b000bf16 	blt	r22,zero,13844 <___vfprintf_internal_r+0x21c0>
   13548:	00800ac4 	movi	r2,43
   1354c:	d8802305 	stb	r2,140(sp)
   13550:	00800244 	movi	r2,9
   13554:	15807016 	blt	r2,r22,13718 <___vfprintf_internal_r+0x2094>
   13558:	00800c04 	movi	r2,48
   1355c:	b5800c04 	addi	r22,r22,48
   13560:	d8802345 	stb	r2,141(sp)
   13564:	dd802385 	stb	r22,142(sp)
   13568:	d88023c4 	addi	r2,sp,143
   1356c:	df0022c4 	addi	fp,sp,139
   13570:	d8c03317 	ldw	r3,204(sp)
   13574:	1739c83a 	sub	fp,r2,fp
   13578:	d9003317 	ldw	r4,204(sp)
   1357c:	e0c7883a 	add	r3,fp,r3
   13580:	df003a15 	stw	fp,232(sp)
   13584:	d8c02b15 	stw	r3,172(sp)
   13588:	00800044 	movi	r2,1
   1358c:	1100b30e 	bge	r2,r4,1385c <___vfprintf_internal_r+0x21d8>
   13590:	d8c02b17 	ldw	r3,172(sp)
   13594:	18c00044 	addi	r3,r3,1
   13598:	d8c02b15 	stw	r3,172(sp)
   1359c:	1805883a 	mov	r2,r3
   135a0:	1800ac16 	blt	r3,zero,13854 <___vfprintf_internal_r+0x21d0>
   135a4:	d8003215 	stw	zero,200(sp)
   135a8:	003e5d06 	br	12f20 <__alt_data_end+0xfc012f20>
   135ac:	d9002d17 	ldw	r4,180(sp)
   135b0:	d9801e04 	addi	r6,sp,120
   135b4:	b80b883a 	mov	r5,r23
   135b8:	00199900 	call	19990 <__sprint_r>
   135bc:	1039351e 	bne	r2,zero,11a94 <__alt_data_end+0xfc011a94>
   135c0:	dc402617 	ldw	r17,152(sp)
   135c4:	d8c02017 	ldw	r3,128(sp)
   135c8:	d8801f17 	ldw	r2,124(sp)
   135cc:	da000404 	addi	r8,sp,16
   135d0:	003ed606 	br	1312c <__alt_data_end+0xfc01312c>
   135d4:	182b883a 	mov	r21,r3
   135d8:	d8002a15 	stw	zero,168(sp)
   135dc:	00388c06 	br	11810 <__alt_data_end+0xfc011810>
   135e0:	d8802a17 	ldw	r2,168(sp)
   135e4:	103e071e 	bne	r2,zero,12e04 <__alt_data_end+0xfc012e04>
   135e8:	dc002a15 	stw	r16,168(sp)
   135ec:	003e0506 	br	12e04 <__alt_data_end+0xfc012e04>
   135f0:	d9002a17 	ldw	r4,168(sp)
   135f4:	20c00044 	addi	r3,r4,1
   135f8:	003e0f06 	br	12e38 <__alt_data_end+0xfc012e38>
   135fc:	01400184 	movi	r5,6
   13600:	d9402a15 	stw	r5,168(sp)
   13604:	003dff06 	br	12e04 <__alt_data_end+0xfc012e04>
   13608:	d8802104 	addi	r2,sp,132
   1360c:	d8800315 	stw	r2,12(sp)
   13610:	d8802504 	addi	r2,sp,148
   13614:	d8800215 	stw	r2,8(sp)
   13618:	d8802604 	addi	r2,sp,152
   1361c:	d8800115 	stw	r2,4(sp)
   13620:	d8802a17 	ldw	r2,168(sp)
   13624:	d9403617 	ldw	r5,216(sp)
   13628:	d9002d17 	ldw	r4,180(sp)
   1362c:	d8800015 	stw	r2,0(sp)
   13630:	01c000c4 	movi	r7,3
   13634:	980d883a 	mov	r6,r19
   13638:	da003d15 	stw	r8,244(sp)
   1363c:	0013db40 	call	13db4 <_dtoa_r>
   13640:	d8c02a17 	ldw	r3,168(sp)
   13644:	da003d17 	ldw	r8,244(sp)
   13648:	1021883a 	mov	r16,r2
   1364c:	10f9883a 	add	fp,r2,r3
   13650:	81000007 	ldb	r4,0(r16)
   13654:	00800c04 	movi	r2,48
   13658:	20805e26 	beq	r4,r2,137d4 <___vfprintf_internal_r+0x2150>
   1365c:	d8c02617 	ldw	r3,152(sp)
   13660:	e0f9883a 	add	fp,fp,r3
   13664:	003e0a06 	br	12e90 <__alt_data_end+0xfc012e90>
   13668:	00c00b44 	movi	r3,45
   1366c:	24e0003c 	xorhi	r19,r4,32768
   13670:	d8c02905 	stb	r3,164(sp)
   13674:	003de906 	br	12e1c <__alt_data_end+0xfc012e1c>
   13678:	d8c03217 	ldw	r3,200(sp)
   1367c:	00c07a0e 	bge	zero,r3,13868 <___vfprintf_internal_r+0x21e4>
   13680:	00800044 	movi	r2,1
   13684:	d9003317 	ldw	r4,204(sp)
   13688:	1105883a 	add	r2,r2,r4
   1368c:	d8802b15 	stw	r2,172(sp)
   13690:	10004e16 	blt	r2,zero,137cc <___vfprintf_internal_r+0x2148>
   13694:	044019c4 	movi	r17,103
   13698:	003e2106 	br	12f20 <__alt_data_end+0xfc012f20>
   1369c:	d9002a17 	ldw	r4,168(sp)
   136a0:	d8802104 	addi	r2,sp,132
   136a4:	d8800315 	stw	r2,12(sp)
   136a8:	d9000015 	stw	r4,0(sp)
   136ac:	d8802504 	addi	r2,sp,148
   136b0:	d9403617 	ldw	r5,216(sp)
   136b4:	d9002d17 	ldw	r4,180(sp)
   136b8:	d8800215 	stw	r2,8(sp)
   136bc:	d8802604 	addi	r2,sp,152
   136c0:	d8800115 	stw	r2,4(sp)
   136c4:	01c000c4 	movi	r7,3
   136c8:	980d883a 	mov	r6,r19
   136cc:	da003d15 	stw	r8,244(sp)
   136d0:	0013db40 	call	13db4 <_dtoa_r>
   136d4:	d8c02a17 	ldw	r3,168(sp)
   136d8:	da003d17 	ldw	r8,244(sp)
   136dc:	1021883a 	mov	r16,r2
   136e0:	00801184 	movi	r2,70
   136e4:	80f9883a 	add	fp,r16,r3
   136e8:	88bfd926 	beq	r17,r2,13650 <__alt_data_end+0xfc013650>
   136ec:	003de806 	br	12e90 <__alt_data_end+0xfc012e90>
   136f0:	d9002a17 	ldw	r4,168(sp)
   136f4:	00c04d0e 	bge	zero,r3,1382c <___vfprintf_internal_r+0x21a8>
   136f8:	2000441e 	bne	r4,zero,1380c <___vfprintf_internal_r+0x2188>
   136fc:	9480004c 	andi	r18,r18,1
   13700:	9000421e 	bne	r18,zero,1380c <___vfprintf_internal_r+0x2188>
   13704:	1805883a 	mov	r2,r3
   13708:	18006f16 	blt	r3,zero,138c8 <___vfprintf_internal_r+0x2244>
   1370c:	d8c03217 	ldw	r3,200(sp)
   13710:	d8c02b15 	stw	r3,172(sp)
   13714:	003e0206 	br	12f20 <__alt_data_end+0xfc012f20>
   13718:	df0022c4 	addi	fp,sp,139
   1371c:	dc002a15 	stw	r16,168(sp)
   13720:	4027883a 	mov	r19,r8
   13724:	e021883a 	mov	r16,fp
   13728:	b009883a 	mov	r4,r22
   1372c:	01400284 	movi	r5,10
   13730:	000cb7c0 	call	cb7c <__modsi3>
   13734:	10800c04 	addi	r2,r2,48
   13738:	843fffc4 	addi	r16,r16,-1
   1373c:	b009883a 	mov	r4,r22
   13740:	01400284 	movi	r5,10
   13744:	80800005 	stb	r2,0(r16)
   13748:	000caf80 	call	caf8 <__divsi3>
   1374c:	102d883a 	mov	r22,r2
   13750:	00800244 	movi	r2,9
   13754:	15bff416 	blt	r2,r22,13728 <__alt_data_end+0xfc013728>
   13758:	9811883a 	mov	r8,r19
   1375c:	b0800c04 	addi	r2,r22,48
   13760:	8027883a 	mov	r19,r16
   13764:	997fffc4 	addi	r5,r19,-1
   13768:	98bfffc5 	stb	r2,-1(r19)
   1376c:	dc002a17 	ldw	r16,168(sp)
   13770:	2f006d2e 	bgeu	r5,fp,13928 <___vfprintf_internal_r+0x22a4>
   13774:	d9c02384 	addi	r7,sp,142
   13778:	3ccfc83a 	sub	r7,r7,r19
   1377c:	d9002344 	addi	r4,sp,141
   13780:	e1cf883a 	add	r7,fp,r7
   13784:	00000106 	br	1378c <___vfprintf_internal_r+0x2108>
   13788:	28800003 	ldbu	r2,0(r5)
   1378c:	20800005 	stb	r2,0(r4)
   13790:	21000044 	addi	r4,r4,1
   13794:	29400044 	addi	r5,r5,1
   13798:	393ffb1e 	bne	r7,r4,13788 <__alt_data_end+0xfc013788>
   1379c:	d8802304 	addi	r2,sp,140
   137a0:	14c5c83a 	sub	r2,r2,r19
   137a4:	d8c02344 	addi	r3,sp,141
   137a8:	1885883a 	add	r2,r3,r2
   137ac:	003f7006 	br	13570 <__alt_data_end+0xfc013570>
   137b0:	0005883a 	mov	r2,zero
   137b4:	003f0f06 	br	133f4 <__alt_data_end+0xfc0133f4>
   137b8:	d8c03217 	ldw	r3,200(sp)
   137bc:	18c00044 	addi	r3,r3,1
   137c0:	d8c02b15 	stw	r3,172(sp)
   137c4:	1805883a 	mov	r2,r3
   137c8:	183fb20e 	bge	r3,zero,13694 <__alt_data_end+0xfc013694>
   137cc:	0005883a 	mov	r2,zero
   137d0:	003fb006 	br	13694 <__alt_data_end+0xfc013694>
   137d4:	d9003617 	ldw	r4,216(sp)
   137d8:	000d883a 	mov	r6,zero
   137dc:	000f883a 	mov	r7,zero
   137e0:	980b883a 	mov	r5,r19
   137e4:	d8c03c15 	stw	r3,240(sp)
   137e8:	da003d15 	stw	r8,244(sp)
   137ec:	001d7140 	call	1d714 <__eqdf2>
   137f0:	d8c03c17 	ldw	r3,240(sp)
   137f4:	da003d17 	ldw	r8,244(sp)
   137f8:	103f9826 	beq	r2,zero,1365c <__alt_data_end+0xfc01365c>
   137fc:	00800044 	movi	r2,1
   13800:	10c7c83a 	sub	r3,r2,r3
   13804:	d8c02615 	stw	r3,152(sp)
   13808:	003f9506 	br	13660 <__alt_data_end+0xfc013660>
   1380c:	d9002a17 	ldw	r4,168(sp)
   13810:	d8c03217 	ldw	r3,200(sp)
   13814:	20800044 	addi	r2,r4,1
   13818:	1885883a 	add	r2,r3,r2
   1381c:	d8802b15 	stw	r2,172(sp)
   13820:	103dbf0e 	bge	r2,zero,12f20 <__alt_data_end+0xfc012f20>
   13824:	0005883a 	mov	r2,zero
   13828:	003dbd06 	br	12f20 <__alt_data_end+0xfc012f20>
   1382c:	2000201e 	bne	r4,zero,138b0 <___vfprintf_internal_r+0x222c>
   13830:	9480004c 	andi	r18,r18,1
   13834:	90001e1e 	bne	r18,zero,138b0 <___vfprintf_internal_r+0x222c>
   13838:	00800044 	movi	r2,1
   1383c:	d8802b15 	stw	r2,172(sp)
   13840:	003db706 	br	12f20 <__alt_data_end+0xfc012f20>
   13844:	00800b44 	movi	r2,45
   13848:	05adc83a 	sub	r22,zero,r22
   1384c:	d8802305 	stb	r2,140(sp)
   13850:	003f3f06 	br	13550 <__alt_data_end+0xfc013550>
   13854:	0005883a 	mov	r2,zero
   13858:	003f5206 	br	135a4 <__alt_data_end+0xfc0135a4>
   1385c:	90a4703a 	and	r18,r18,r2
   13860:	903f4e26 	beq	r18,zero,1359c <__alt_data_end+0xfc01359c>
   13864:	003f4a06 	br	13590 <__alt_data_end+0xfc013590>
   13868:	00800084 	movi	r2,2
   1386c:	10c5c83a 	sub	r2,r2,r3
   13870:	003f8406 	br	13684 <__alt_data_end+0xfc013684>
   13874:	d9402e17 	ldw	r5,184(sp)
   13878:	d9002e17 	ldw	r4,184(sp)
   1387c:	ac400043 	ldbu	r17,1(r21)
   13880:	29400017 	ldw	r5,0(r5)
   13884:	20800104 	addi	r2,r4,4
   13888:	d8802e15 	stw	r2,184(sp)
   1388c:	d9402a15 	stw	r5,168(sp)
   13890:	182b883a 	mov	r21,r3
   13894:	283e7b0e 	bge	r5,zero,13284 <__alt_data_end+0xfc013284>
   13898:	8c403fcc 	andi	r17,r17,255
   1389c:	017fffc4 	movi	r5,-1
   138a0:	8c40201c 	xori	r17,r17,128
   138a4:	d9402a15 	stw	r5,168(sp)
   138a8:	8c7fe004 	addi	r17,r17,-128
   138ac:	0037d706 	br	1180c <__alt_data_end+0xfc01180c>
   138b0:	d8c02a17 	ldw	r3,168(sp)
   138b4:	18c00084 	addi	r3,r3,2
   138b8:	d8c02b15 	stw	r3,172(sp)
   138bc:	1805883a 	mov	r2,r3
   138c0:	183d970e 	bge	r3,zero,12f20 <__alt_data_end+0xfc012f20>
   138c4:	003fd706 	br	13824 <__alt_data_end+0xfc013824>
   138c8:	0005883a 	mov	r2,zero
   138cc:	003f8f06 	br	1370c <__alt_data_end+0xfc01370c>
   138d0:	9080004c 	andi	r2,r18,1
   138d4:	103f821e 	bne	r2,zero,136e0 <__alt_data_end+0xfc0136e0>
   138d8:	d8802117 	ldw	r2,132(sp)
   138dc:	1405c83a 	sub	r2,r2,r16
   138e0:	d8803315 	stw	r2,204(sp)
   138e4:	b47ef426 	beq	r22,r17,134b8 <__alt_data_end+0xfc0134b8>
   138e8:	dd802617 	ldw	r22,152(sp)
   138ec:	003f1206 	br	13538 <__alt_data_end+0xfc013538>
   138f0:	d8c02b03 	ldbu	r3,172(sp)
   138f4:	d8c02785 	stb	r3,158(sp)
   138f8:	0038df06 	br	11c78 <__alt_data_end+0xfc011c78>
   138fc:	d8c02b03 	ldbu	r3,172(sp)
   13900:	d8c02785 	stb	r3,158(sp)
   13904:	0038aa06 	br	11bb0 <__alt_data_end+0xfc011bb0>
   13908:	d8c02b03 	ldbu	r3,172(sp)
   1390c:	d8c02785 	stb	r3,158(sp)
   13910:	003a4306 	br	12220 <__alt_data_end+0xfc012220>
   13914:	d8c02b03 	ldbu	r3,172(sp)
   13918:	d8c02785 	stb	r3,158(sp)
   1391c:	003af506 	br	124f4 <__alt_data_end+0xfc0124f4>
   13920:	0005883a 	mov	r2,zero
   13924:	003d7b06 	br	12f14 <__alt_data_end+0xfc012f14>
   13928:	d8802344 	addi	r2,sp,141
   1392c:	003f1006 	br	13570 <__alt_data_end+0xfc013570>
   13930:	d8c02b03 	ldbu	r3,172(sp)
   13934:	d8c02785 	stb	r3,158(sp)
   13938:	0038fd06 	br	11d30 <__alt_data_end+0xfc011d30>
   1393c:	d8c02b03 	ldbu	r3,172(sp)
   13940:	d8c02785 	stb	r3,158(sp)
   13944:	003a9706 	br	123a4 <__alt_data_end+0xfc0123a4>
   13948:	d8c02b03 	ldbu	r3,172(sp)
   1394c:	d8c02785 	stb	r3,158(sp)
   13950:	003a1806 	br	121b4 <__alt_data_end+0xfc0121b4>
   13954:	d8c02b03 	ldbu	r3,172(sp)
   13958:	d8c02785 	stb	r3,158(sp)
   1395c:	003abe06 	br	12458 <__alt_data_end+0xfc012458>

00013960 <__vfprintf_internal>:
   13960:	008000f4 	movhi	r2,3
   13964:	10b70504 	addi	r2,r2,-9196
   13968:	300f883a 	mov	r7,r6
   1396c:	280d883a 	mov	r6,r5
   13970:	200b883a 	mov	r5,r4
   13974:	11000017 	ldw	r4,0(r2)
   13978:	00116841 	jmpi	11684 <___vfprintf_internal_r>

0001397c <__sbprintf>:
   1397c:	2880030b 	ldhu	r2,12(r5)
   13980:	2ac01917 	ldw	r11,100(r5)
   13984:	2a80038b 	ldhu	r10,14(r5)
   13988:	2a400717 	ldw	r9,28(r5)
   1398c:	2a000917 	ldw	r8,36(r5)
   13990:	defee204 	addi	sp,sp,-1144
   13994:	00c10004 	movi	r3,1024
   13998:	dc011a15 	stw	r16,1128(sp)
   1399c:	10bfff4c 	andi	r2,r2,65533
   139a0:	2821883a 	mov	r16,r5
   139a4:	d8cb883a 	add	r5,sp,r3
   139a8:	dc811c15 	stw	r18,1136(sp)
   139ac:	dc411b15 	stw	r17,1132(sp)
   139b0:	dfc11d15 	stw	ra,1140(sp)
   139b4:	2025883a 	mov	r18,r4
   139b8:	d881030d 	sth	r2,1036(sp)
   139bc:	dac11915 	stw	r11,1124(sp)
   139c0:	da81038d 	sth	r10,1038(sp)
   139c4:	da410715 	stw	r9,1052(sp)
   139c8:	da010915 	stw	r8,1060(sp)
   139cc:	dec10015 	stw	sp,1024(sp)
   139d0:	dec10415 	stw	sp,1040(sp)
   139d4:	d8c10215 	stw	r3,1032(sp)
   139d8:	d8c10515 	stw	r3,1044(sp)
   139dc:	d8010615 	stw	zero,1048(sp)
   139e0:	00116840 	call	11684 <___vfprintf_internal_r>
   139e4:	1023883a 	mov	r17,r2
   139e8:	10000416 	blt	r2,zero,139fc <__sbprintf+0x80>
   139ec:	d9410004 	addi	r5,sp,1024
   139f0:	9009883a 	mov	r4,r18
   139f4:	00156580 	call	15658 <_fflush_r>
   139f8:	10000d1e 	bne	r2,zero,13a30 <__sbprintf+0xb4>
   139fc:	d881030b 	ldhu	r2,1036(sp)
   13a00:	1080100c 	andi	r2,r2,64
   13a04:	10000326 	beq	r2,zero,13a14 <__sbprintf+0x98>
   13a08:	8080030b 	ldhu	r2,12(r16)
   13a0c:	10801014 	ori	r2,r2,64
   13a10:	8080030d 	sth	r2,12(r16)
   13a14:	8805883a 	mov	r2,r17
   13a18:	dfc11d17 	ldw	ra,1140(sp)
   13a1c:	dc811c17 	ldw	r18,1136(sp)
   13a20:	dc411b17 	ldw	r17,1132(sp)
   13a24:	dc011a17 	ldw	r16,1128(sp)
   13a28:	dec11e04 	addi	sp,sp,1144
   13a2c:	f800283a 	ret
   13a30:	047fffc4 	movi	r17,-1
   13a34:	003ff106 	br	139fc <__alt_data_end+0xfc0139fc>

00013a38 <__swsetup_r>:
   13a38:	008000f4 	movhi	r2,3
   13a3c:	defffd04 	addi	sp,sp,-12
   13a40:	10b70504 	addi	r2,r2,-9196
   13a44:	dc400115 	stw	r17,4(sp)
   13a48:	2023883a 	mov	r17,r4
   13a4c:	11000017 	ldw	r4,0(r2)
   13a50:	dc000015 	stw	r16,0(sp)
   13a54:	dfc00215 	stw	ra,8(sp)
   13a58:	2821883a 	mov	r16,r5
   13a5c:	20000226 	beq	r4,zero,13a68 <__swsetup_r+0x30>
   13a60:	20800e17 	ldw	r2,56(r4)
   13a64:	10003126 	beq	r2,zero,13b2c <__swsetup_r+0xf4>
   13a68:	8080030b 	ldhu	r2,12(r16)
   13a6c:	10c0020c 	andi	r3,r2,8
   13a70:	1009883a 	mov	r4,r2
   13a74:	18000f26 	beq	r3,zero,13ab4 <__swsetup_r+0x7c>
   13a78:	80c00417 	ldw	r3,16(r16)
   13a7c:	18001526 	beq	r3,zero,13ad4 <__swsetup_r+0x9c>
   13a80:	1100004c 	andi	r4,r2,1
   13a84:	20001c1e 	bne	r4,zero,13af8 <__swsetup_r+0xc0>
   13a88:	1080008c 	andi	r2,r2,2
   13a8c:	1000291e 	bne	r2,zero,13b34 <__swsetup_r+0xfc>
   13a90:	80800517 	ldw	r2,20(r16)
   13a94:	80800215 	stw	r2,8(r16)
   13a98:	18001c26 	beq	r3,zero,13b0c <__swsetup_r+0xd4>
   13a9c:	0005883a 	mov	r2,zero
   13aa0:	dfc00217 	ldw	ra,8(sp)
   13aa4:	dc400117 	ldw	r17,4(sp)
   13aa8:	dc000017 	ldw	r16,0(sp)
   13aac:	dec00304 	addi	sp,sp,12
   13ab0:	f800283a 	ret
   13ab4:	2080040c 	andi	r2,r4,16
   13ab8:	10002e26 	beq	r2,zero,13b74 <__swsetup_r+0x13c>
   13abc:	2080010c 	andi	r2,r4,4
   13ac0:	10001e1e 	bne	r2,zero,13b3c <__swsetup_r+0x104>
   13ac4:	80c00417 	ldw	r3,16(r16)
   13ac8:	20800214 	ori	r2,r4,8
   13acc:	8080030d 	sth	r2,12(r16)
   13ad0:	183feb1e 	bne	r3,zero,13a80 <__alt_data_end+0xfc013a80>
   13ad4:	1100a00c 	andi	r4,r2,640
   13ad8:	01408004 	movi	r5,512
   13adc:	217fe826 	beq	r4,r5,13a80 <__alt_data_end+0xfc013a80>
   13ae0:	800b883a 	mov	r5,r16
   13ae4:	8809883a 	mov	r4,r17
   13ae8:	00165f40 	call	165f4 <__smakebuf_r>
   13aec:	8080030b 	ldhu	r2,12(r16)
   13af0:	80c00417 	ldw	r3,16(r16)
   13af4:	003fe206 	br	13a80 <__alt_data_end+0xfc013a80>
   13af8:	80800517 	ldw	r2,20(r16)
   13afc:	80000215 	stw	zero,8(r16)
   13b00:	0085c83a 	sub	r2,zero,r2
   13b04:	80800615 	stw	r2,24(r16)
   13b08:	183fe41e 	bne	r3,zero,13a9c <__alt_data_end+0xfc013a9c>
   13b0c:	80c0030b 	ldhu	r3,12(r16)
   13b10:	0005883a 	mov	r2,zero
   13b14:	1900200c 	andi	r4,r3,128
   13b18:	203fe126 	beq	r4,zero,13aa0 <__alt_data_end+0xfc013aa0>
   13b1c:	18c01014 	ori	r3,r3,64
   13b20:	80c0030d 	sth	r3,12(r16)
   13b24:	00bfffc4 	movi	r2,-1
   13b28:	003fdd06 	br	13aa0 <__alt_data_end+0xfc013aa0>
   13b2c:	0015a440 	call	15a44 <__sinit>
   13b30:	003fcd06 	br	13a68 <__alt_data_end+0xfc013a68>
   13b34:	0005883a 	mov	r2,zero
   13b38:	003fd606 	br	13a94 <__alt_data_end+0xfc013a94>
   13b3c:	81400c17 	ldw	r5,48(r16)
   13b40:	28000626 	beq	r5,zero,13b5c <__swsetup_r+0x124>
   13b44:	80801004 	addi	r2,r16,64
   13b48:	28800326 	beq	r5,r2,13b58 <__swsetup_r+0x120>
   13b4c:	8809883a 	mov	r4,r17
   13b50:	0015bb80 	call	15bb8 <_free_r>
   13b54:	8100030b 	ldhu	r4,12(r16)
   13b58:	80000c15 	stw	zero,48(r16)
   13b5c:	80c00417 	ldw	r3,16(r16)
   13b60:	00bff6c4 	movi	r2,-37
   13b64:	1108703a 	and	r4,r2,r4
   13b68:	80000115 	stw	zero,4(r16)
   13b6c:	80c00015 	stw	r3,0(r16)
   13b70:	003fd506 	br	13ac8 <__alt_data_end+0xfc013ac8>
   13b74:	00800244 	movi	r2,9
   13b78:	88800015 	stw	r2,0(r17)
   13b7c:	20801014 	ori	r2,r4,64
   13b80:	8080030d 	sth	r2,12(r16)
   13b84:	00bfffc4 	movi	r2,-1
   13b88:	003fc506 	br	13aa0 <__alt_data_end+0xfc013aa0>

00013b8c <quorem>:
   13b8c:	defff204 	addi	sp,sp,-56
   13b90:	ddc00b15 	stw	r23,44(sp)
   13b94:	20800417 	ldw	r2,16(r4)
   13b98:	2dc00417 	ldw	r23,16(r5)
   13b9c:	dfc00d15 	stw	ra,52(sp)
   13ba0:	df000c15 	stw	fp,48(sp)
   13ba4:	dd800a15 	stw	r22,40(sp)
   13ba8:	dd400915 	stw	r21,36(sp)
   13bac:	dd000815 	stw	r20,32(sp)
   13bb0:	dcc00715 	stw	r19,28(sp)
   13bb4:	dc800615 	stw	r18,24(sp)
   13bb8:	dc400515 	stw	r17,20(sp)
   13bbc:	dc000415 	stw	r16,16(sp)
   13bc0:	15c07a16 	blt	r2,r23,13dac <quorem+0x220>
   13bc4:	bdffffc4 	addi	r23,r23,-1
   13bc8:	bde9883a 	add	r20,r23,r23
   13bcc:	28c00504 	addi	r3,r5,20
   13bd0:	a529883a 	add	r20,r20,r20
   13bd4:	1d39883a 	add	fp,r3,r20
   13bd8:	24c00504 	addi	r19,r4,20
   13bdc:	d9400215 	stw	r5,8(sp)
   13be0:	9d29883a 	add	r20,r19,r20
   13be4:	e1400017 	ldw	r5,0(fp)
   13be8:	d9000015 	stw	r4,0(sp)
   13bec:	a1000017 	ldw	r4,0(r20)
   13bf0:	29400044 	addi	r5,r5,1
   13bf4:	d8c00115 	stw	r3,4(sp)
   13bf8:	dd000315 	stw	r20,12(sp)
   13bfc:	000cbf00 	call	cbf0 <__udivsi3>
   13c00:	1025883a 	mov	r18,r2
   13c04:	10003026 	beq	r2,zero,13cc8 <quorem+0x13c>
   13c08:	dc400117 	ldw	r17,4(sp)
   13c0c:	9829883a 	mov	r20,r19
   13c10:	002d883a 	mov	r22,zero
   13c14:	0021883a 	mov	r16,zero
   13c18:	8d400017 	ldw	r21,0(r17)
   13c1c:	900b883a 	mov	r5,r18
   13c20:	8c400104 	addi	r17,r17,4
   13c24:	a93fffcc 	andi	r4,r21,65535
   13c28:	000ccac0 	call	ccac <__mulsi3>
   13c2c:	a808d43a 	srli	r4,r21,16
   13c30:	900b883a 	mov	r5,r18
   13c34:	15ad883a 	add	r22,r2,r22
   13c38:	000ccac0 	call	ccac <__mulsi3>
   13c3c:	a1000017 	ldw	r4,0(r20)
   13c40:	b00cd43a 	srli	r6,r22,16
   13c44:	b0ffffcc 	andi	r3,r22,65535
   13c48:	217fffcc 	andi	r5,r4,65535
   13c4c:	2c21883a 	add	r16,r5,r16
   13c50:	80c7c83a 	sub	r3,r16,r3
   13c54:	2008d43a 	srli	r4,r4,16
   13c58:	1185883a 	add	r2,r2,r6
   13c5c:	1821d43a 	srai	r16,r3,16
   13c60:	117fffcc 	andi	r5,r2,65535
   13c64:	2149c83a 	sub	r4,r4,r5
   13c68:	2421883a 	add	r16,r4,r16
   13c6c:	8008943a 	slli	r4,r16,16
   13c70:	18ffffcc 	andi	r3,r3,65535
   13c74:	102cd43a 	srli	r22,r2,16
   13c78:	20c8b03a 	or	r4,r4,r3
   13c7c:	a1000015 	stw	r4,0(r20)
   13c80:	8021d43a 	srai	r16,r16,16
   13c84:	a5000104 	addi	r20,r20,4
   13c88:	e47fe32e 	bgeu	fp,r17,13c18 <__alt_data_end+0xfc013c18>
   13c8c:	d8c00317 	ldw	r3,12(sp)
   13c90:	18800017 	ldw	r2,0(r3)
   13c94:	10000c1e 	bne	r2,zero,13cc8 <quorem+0x13c>
   13c98:	18bfff04 	addi	r2,r3,-4
   13c9c:	9880082e 	bgeu	r19,r2,13cc0 <quorem+0x134>
   13ca0:	18ffff17 	ldw	r3,-4(r3)
   13ca4:	18000326 	beq	r3,zero,13cb4 <quorem+0x128>
   13ca8:	00000506 	br	13cc0 <quorem+0x134>
   13cac:	10c00017 	ldw	r3,0(r2)
   13cb0:	1800031e 	bne	r3,zero,13cc0 <quorem+0x134>
   13cb4:	10bfff04 	addi	r2,r2,-4
   13cb8:	bdffffc4 	addi	r23,r23,-1
   13cbc:	98bffb36 	bltu	r19,r2,13cac <__alt_data_end+0xfc013cac>
   13cc0:	d8c00017 	ldw	r3,0(sp)
   13cc4:	1dc00415 	stw	r23,16(r3)
   13cc8:	d9400217 	ldw	r5,8(sp)
   13ccc:	d9000017 	ldw	r4,0(sp)
   13cd0:	00173740 	call	17374 <__mcmp>
   13cd4:	10002816 	blt	r2,zero,13d78 <quorem+0x1ec>
   13cd8:	dc400117 	ldw	r17,4(sp)
   13cdc:	94800044 	addi	r18,r18,1
   13ce0:	980d883a 	mov	r6,r19
   13ce4:	0007883a 	mov	r3,zero
   13ce8:	31000017 	ldw	r4,0(r6)
   13cec:	89400017 	ldw	r5,0(r17)
   13cf0:	31800104 	addi	r6,r6,4
   13cf4:	20bfffcc 	andi	r2,r4,65535
   13cf8:	10c7883a 	add	r3,r2,r3
   13cfc:	28bfffcc 	andi	r2,r5,65535
   13d00:	1885c83a 	sub	r2,r3,r2
   13d04:	280ad43a 	srli	r5,r5,16
   13d08:	2008d43a 	srli	r4,r4,16
   13d0c:	1007d43a 	srai	r3,r2,16
   13d10:	10bfffcc 	andi	r2,r2,65535
   13d14:	2149c83a 	sub	r4,r4,r5
   13d18:	20c9883a 	add	r4,r4,r3
   13d1c:	200a943a 	slli	r5,r4,16
   13d20:	8c400104 	addi	r17,r17,4
   13d24:	2007d43a 	srai	r3,r4,16
   13d28:	2884b03a 	or	r2,r5,r2
   13d2c:	30bfff15 	stw	r2,-4(r6)
   13d30:	e47fed2e 	bgeu	fp,r17,13ce8 <__alt_data_end+0xfc013ce8>
   13d34:	bdc5883a 	add	r2,r23,r23
   13d38:	1085883a 	add	r2,r2,r2
   13d3c:	9887883a 	add	r3,r19,r2
   13d40:	18800017 	ldw	r2,0(r3)
   13d44:	10000c1e 	bne	r2,zero,13d78 <quorem+0x1ec>
   13d48:	18bfff04 	addi	r2,r3,-4
   13d4c:	9880082e 	bgeu	r19,r2,13d70 <quorem+0x1e4>
   13d50:	18ffff17 	ldw	r3,-4(r3)
   13d54:	18000326 	beq	r3,zero,13d64 <quorem+0x1d8>
   13d58:	00000506 	br	13d70 <quorem+0x1e4>
   13d5c:	10c00017 	ldw	r3,0(r2)
   13d60:	1800031e 	bne	r3,zero,13d70 <quorem+0x1e4>
   13d64:	10bfff04 	addi	r2,r2,-4
   13d68:	bdffffc4 	addi	r23,r23,-1
   13d6c:	98bffb36 	bltu	r19,r2,13d5c <__alt_data_end+0xfc013d5c>
   13d70:	d8c00017 	ldw	r3,0(sp)
   13d74:	1dc00415 	stw	r23,16(r3)
   13d78:	9005883a 	mov	r2,r18
   13d7c:	dfc00d17 	ldw	ra,52(sp)
   13d80:	df000c17 	ldw	fp,48(sp)
   13d84:	ddc00b17 	ldw	r23,44(sp)
   13d88:	dd800a17 	ldw	r22,40(sp)
   13d8c:	dd400917 	ldw	r21,36(sp)
   13d90:	dd000817 	ldw	r20,32(sp)
   13d94:	dcc00717 	ldw	r19,28(sp)
   13d98:	dc800617 	ldw	r18,24(sp)
   13d9c:	dc400517 	ldw	r17,20(sp)
   13da0:	dc000417 	ldw	r16,16(sp)
   13da4:	dec00e04 	addi	sp,sp,56
   13da8:	f800283a 	ret
   13dac:	0005883a 	mov	r2,zero
   13db0:	003ff206 	br	13d7c <__alt_data_end+0xfc013d7c>

00013db4 <_dtoa_r>:
   13db4:	20801017 	ldw	r2,64(r4)
   13db8:	deffde04 	addi	sp,sp,-136
   13dbc:	df002015 	stw	fp,128(sp)
   13dc0:	dcc01b15 	stw	r19,108(sp)
   13dc4:	dc801a15 	stw	r18,104(sp)
   13dc8:	dc401915 	stw	r17,100(sp)
   13dcc:	dc001815 	stw	r16,96(sp)
   13dd0:	dfc02115 	stw	ra,132(sp)
   13dd4:	ddc01f15 	stw	r23,124(sp)
   13dd8:	dd801e15 	stw	r22,120(sp)
   13ddc:	dd401d15 	stw	r21,116(sp)
   13de0:	dd001c15 	stw	r20,112(sp)
   13de4:	d9c00315 	stw	r7,12(sp)
   13de8:	2039883a 	mov	fp,r4
   13dec:	3023883a 	mov	r17,r6
   13df0:	2825883a 	mov	r18,r5
   13df4:	dc002417 	ldw	r16,144(sp)
   13df8:	3027883a 	mov	r19,r6
   13dfc:	10000826 	beq	r2,zero,13e20 <_dtoa_r+0x6c>
   13e00:	21801117 	ldw	r6,68(r4)
   13e04:	00c00044 	movi	r3,1
   13e08:	100b883a 	mov	r5,r2
   13e0c:	1986983a 	sll	r3,r3,r6
   13e10:	11800115 	stw	r6,4(r2)
   13e14:	10c00215 	stw	r3,8(r2)
   13e18:	0016a980 	call	16a98 <_Bfree>
   13e1c:	e0001015 	stw	zero,64(fp)
   13e20:	88002e16 	blt	r17,zero,13edc <_dtoa_r+0x128>
   13e24:	80000015 	stw	zero,0(r16)
   13e28:	889ffc2c 	andhi	r2,r17,32752
   13e2c:	00dffc34 	movhi	r3,32752
   13e30:	10c01c26 	beq	r2,r3,13ea4 <_dtoa_r+0xf0>
   13e34:	000d883a 	mov	r6,zero
   13e38:	000f883a 	mov	r7,zero
   13e3c:	9009883a 	mov	r4,r18
   13e40:	980b883a 	mov	r5,r19
   13e44:	001d7140 	call	1d714 <__eqdf2>
   13e48:	10002b1e 	bne	r2,zero,13ef8 <_dtoa_r+0x144>
   13e4c:	d9c02317 	ldw	r7,140(sp)
   13e50:	00800044 	movi	r2,1
   13e54:	38800015 	stw	r2,0(r7)
   13e58:	d8802517 	ldw	r2,148(sp)
   13e5c:	10019e26 	beq	r2,zero,144d8 <_dtoa_r+0x724>
   13e60:	d8c02517 	ldw	r3,148(sp)
   13e64:	008000f4 	movhi	r2,3
   13e68:	10aa1244 	addi	r2,r2,-22455
   13e6c:	18800015 	stw	r2,0(r3)
   13e70:	10bfffc4 	addi	r2,r2,-1
   13e74:	dfc02117 	ldw	ra,132(sp)
   13e78:	df002017 	ldw	fp,128(sp)
   13e7c:	ddc01f17 	ldw	r23,124(sp)
   13e80:	dd801e17 	ldw	r22,120(sp)
   13e84:	dd401d17 	ldw	r21,116(sp)
   13e88:	dd001c17 	ldw	r20,112(sp)
   13e8c:	dcc01b17 	ldw	r19,108(sp)
   13e90:	dc801a17 	ldw	r18,104(sp)
   13e94:	dc401917 	ldw	r17,100(sp)
   13e98:	dc001817 	ldw	r16,96(sp)
   13e9c:	dec02204 	addi	sp,sp,136
   13ea0:	f800283a 	ret
   13ea4:	d8c02317 	ldw	r3,140(sp)
   13ea8:	0089c3c4 	movi	r2,9999
   13eac:	18800015 	stw	r2,0(r3)
   13eb0:	90017726 	beq	r18,zero,14490 <_dtoa_r+0x6dc>
   13eb4:	008000f4 	movhi	r2,3
   13eb8:	10aa2604 	addi	r2,r2,-22376
   13ebc:	d9002517 	ldw	r4,148(sp)
   13ec0:	203fec26 	beq	r4,zero,13e74 <__alt_data_end+0xfc013e74>
   13ec4:	10c000c7 	ldb	r3,3(r2)
   13ec8:	1801781e 	bne	r3,zero,144ac <_dtoa_r+0x6f8>
   13ecc:	10c000c4 	addi	r3,r2,3
   13ed0:	d9802517 	ldw	r6,148(sp)
   13ed4:	30c00015 	stw	r3,0(r6)
   13ed8:	003fe606 	br	13e74 <__alt_data_end+0xfc013e74>
   13edc:	04e00034 	movhi	r19,32768
   13ee0:	9cffffc4 	addi	r19,r19,-1
   13ee4:	00800044 	movi	r2,1
   13ee8:	8ce6703a 	and	r19,r17,r19
   13eec:	80800015 	stw	r2,0(r16)
   13ef0:	9823883a 	mov	r17,r19
   13ef4:	003fcc06 	br	13e28 <__alt_data_end+0xfc013e28>
   13ef8:	d8800204 	addi	r2,sp,8
   13efc:	d8800015 	stw	r2,0(sp)
   13f00:	d9c00104 	addi	r7,sp,4
   13f04:	900b883a 	mov	r5,r18
   13f08:	980d883a 	mov	r6,r19
   13f0c:	e009883a 	mov	r4,fp
   13f10:	8820d53a 	srli	r16,r17,20
   13f14:	00177400 	call	17740 <__d2b>
   13f18:	d8800915 	stw	r2,36(sp)
   13f1c:	8001651e 	bne	r16,zero,144b4 <_dtoa_r+0x700>
   13f20:	dd800217 	ldw	r22,8(sp)
   13f24:	dc000117 	ldw	r16,4(sp)
   13f28:	00800804 	movi	r2,32
   13f2c:	b421883a 	add	r16,r22,r16
   13f30:	80c10c84 	addi	r3,r16,1074
   13f34:	10c2d10e 	bge	r2,r3,14a7c <_dtoa_r+0xcc8>
   13f38:	00801004 	movi	r2,64
   13f3c:	81010484 	addi	r4,r16,1042
   13f40:	10c7c83a 	sub	r3,r2,r3
   13f44:	9108d83a 	srl	r4,r18,r4
   13f48:	88e2983a 	sll	r17,r17,r3
   13f4c:	2448b03a 	or	r4,r4,r17
   13f50:	001ec300 	call	1ec30 <__floatunsidf>
   13f54:	017f8434 	movhi	r5,65040
   13f58:	01800044 	movi	r6,1
   13f5c:	1009883a 	mov	r4,r2
   13f60:	194b883a 	add	r5,r3,r5
   13f64:	843fffc4 	addi	r16,r16,-1
   13f68:	d9801115 	stw	r6,68(sp)
   13f6c:	000d883a 	mov	r6,zero
   13f70:	01cffe34 	movhi	r7,16376
   13f74:	001e1d80 	call	1e1d8 <__subdf3>
   13f78:	0198dbf4 	movhi	r6,25455
   13f7c:	01cff4f4 	movhi	r7,16339
   13f80:	3190d844 	addi	r6,r6,17249
   13f84:	39e1e9c4 	addi	r7,r7,-30809
   13f88:	1009883a 	mov	r4,r2
   13f8c:	180b883a 	mov	r5,r3
   13f90:	001d96c0 	call	1d96c <__muldf3>
   13f94:	01a2d874 	movhi	r6,35681
   13f98:	01cff1f4 	movhi	r7,16327
   13f9c:	31b22cc4 	addi	r6,r6,-14157
   13fa0:	39e28a04 	addi	r7,r7,-30168
   13fa4:	180b883a 	mov	r5,r3
   13fa8:	1009883a 	mov	r4,r2
   13fac:	001c4980 	call	1c498 <__adddf3>
   13fb0:	8009883a 	mov	r4,r16
   13fb4:	1029883a 	mov	r20,r2
   13fb8:	1823883a 	mov	r17,r3
   13fbc:	001eb540 	call	1eb54 <__floatsidf>
   13fc0:	019427f4 	movhi	r6,20639
   13fc4:	01cff4f4 	movhi	r7,16339
   13fc8:	319e7ec4 	addi	r6,r6,31227
   13fcc:	39d104c4 	addi	r7,r7,17427
   13fd0:	1009883a 	mov	r4,r2
   13fd4:	180b883a 	mov	r5,r3
   13fd8:	001d96c0 	call	1d96c <__muldf3>
   13fdc:	100d883a 	mov	r6,r2
   13fe0:	180f883a 	mov	r7,r3
   13fe4:	a009883a 	mov	r4,r20
   13fe8:	880b883a 	mov	r5,r17
   13fec:	001c4980 	call	1c498 <__adddf3>
   13ff0:	1009883a 	mov	r4,r2
   13ff4:	180b883a 	mov	r5,r3
   13ff8:	1029883a 	mov	r20,r2
   13ffc:	1823883a 	mov	r17,r3
   14000:	001ead40 	call	1ead4 <__fixdfsi>
   14004:	000d883a 	mov	r6,zero
   14008:	000f883a 	mov	r7,zero
   1400c:	a009883a 	mov	r4,r20
   14010:	880b883a 	mov	r5,r17
   14014:	d8800515 	stw	r2,20(sp)
   14018:	001d8780 	call	1d878 <__ledf2>
   1401c:	10028716 	blt	r2,zero,14a3c <_dtoa_r+0xc88>
   14020:	d8c00517 	ldw	r3,20(sp)
   14024:	00800584 	movi	r2,22
   14028:	10c27536 	bltu	r2,r3,14a00 <_dtoa_r+0xc4c>
   1402c:	180490fa 	slli	r2,r3,3
   14030:	00c000f4 	movhi	r3,3
   14034:	18ea4104 	addi	r3,r3,-22268
   14038:	1885883a 	add	r2,r3,r2
   1403c:	11000017 	ldw	r4,0(r2)
   14040:	11400117 	ldw	r5,4(r2)
   14044:	900d883a 	mov	r6,r18
   14048:	980f883a 	mov	r7,r19
   1404c:	001d79c0 	call	1d79c <__gedf2>
   14050:	00828d0e 	bge	zero,r2,14a88 <_dtoa_r+0xcd4>
   14054:	d9000517 	ldw	r4,20(sp)
   14058:	d8000e15 	stw	zero,56(sp)
   1405c:	213fffc4 	addi	r4,r4,-1
   14060:	d9000515 	stw	r4,20(sp)
   14064:	b42dc83a 	sub	r22,r22,r16
   14068:	b5bfffc4 	addi	r22,r22,-1
   1406c:	b0026f16 	blt	r22,zero,14a2c <_dtoa_r+0xc78>
   14070:	d8000815 	stw	zero,32(sp)
   14074:	d9c00517 	ldw	r7,20(sp)
   14078:	38026416 	blt	r7,zero,14a0c <_dtoa_r+0xc58>
   1407c:	b1ed883a 	add	r22,r22,r7
   14080:	d9c00d15 	stw	r7,52(sp)
   14084:	d8000a15 	stw	zero,40(sp)
   14088:	d9800317 	ldw	r6,12(sp)
   1408c:	00800244 	movi	r2,9
   14090:	11811436 	bltu	r2,r6,144e4 <_dtoa_r+0x730>
   14094:	00800144 	movi	r2,5
   14098:	1184e10e 	bge	r2,r6,15420 <_dtoa_r+0x166c>
   1409c:	31bfff04 	addi	r6,r6,-4
   140a0:	d9800315 	stw	r6,12(sp)
   140a4:	0023883a 	mov	r17,zero
   140a8:	d9800317 	ldw	r6,12(sp)
   140ac:	008000c4 	movi	r2,3
   140b0:	30836726 	beq	r6,r2,14e50 <_dtoa_r+0x109c>
   140b4:	1183410e 	bge	r2,r6,14dbc <_dtoa_r+0x1008>
   140b8:	d9c00317 	ldw	r7,12(sp)
   140bc:	00800104 	movi	r2,4
   140c0:	38827c26 	beq	r7,r2,14ab4 <_dtoa_r+0xd00>
   140c4:	00800144 	movi	r2,5
   140c8:	3884c41e 	bne	r7,r2,153dc <_dtoa_r+0x1628>
   140cc:	00800044 	movi	r2,1
   140d0:	d8800b15 	stw	r2,44(sp)
   140d4:	d8c00517 	ldw	r3,20(sp)
   140d8:	d9002217 	ldw	r4,136(sp)
   140dc:	1907883a 	add	r3,r3,r4
   140e0:	19800044 	addi	r6,r3,1
   140e4:	d8c00c15 	stw	r3,48(sp)
   140e8:	d9800615 	stw	r6,24(sp)
   140ec:	0183a40e 	bge	zero,r6,14f80 <_dtoa_r+0x11cc>
   140f0:	d9800617 	ldw	r6,24(sp)
   140f4:	3021883a 	mov	r16,r6
   140f8:	e0001115 	stw	zero,68(fp)
   140fc:	008005c4 	movi	r2,23
   14100:	1184c92e 	bgeu	r2,r6,15428 <_dtoa_r+0x1674>
   14104:	00c00044 	movi	r3,1
   14108:	00800104 	movi	r2,4
   1410c:	1085883a 	add	r2,r2,r2
   14110:	11000504 	addi	r4,r2,20
   14114:	180b883a 	mov	r5,r3
   14118:	18c00044 	addi	r3,r3,1
   1411c:	313ffb2e 	bgeu	r6,r4,1410c <__alt_data_end+0xfc01410c>
   14120:	e1401115 	stw	r5,68(fp)
   14124:	e009883a 	mov	r4,fp
   14128:	00169f00 	call	169f0 <_Balloc>
   1412c:	d8800715 	stw	r2,28(sp)
   14130:	e0801015 	stw	r2,64(fp)
   14134:	00800384 	movi	r2,14
   14138:	1400f736 	bltu	r2,r16,14518 <_dtoa_r+0x764>
   1413c:	8800f626 	beq	r17,zero,14518 <_dtoa_r+0x764>
   14140:	d9c00517 	ldw	r7,20(sp)
   14144:	01c39a0e 	bge	zero,r7,14fb0 <_dtoa_r+0x11fc>
   14148:	388003cc 	andi	r2,r7,15
   1414c:	100490fa 	slli	r2,r2,3
   14150:	382bd13a 	srai	r21,r7,4
   14154:	00c000f4 	movhi	r3,3
   14158:	18ea4104 	addi	r3,r3,-22268
   1415c:	1885883a 	add	r2,r3,r2
   14160:	a8c0040c 	andi	r3,r21,16
   14164:	12400017 	ldw	r9,0(r2)
   14168:	12000117 	ldw	r8,4(r2)
   1416c:	18037926 	beq	r3,zero,14f54 <_dtoa_r+0x11a0>
   14170:	008000f4 	movhi	r2,3
   14174:	10aa3704 	addi	r2,r2,-22308
   14178:	11800817 	ldw	r6,32(r2)
   1417c:	11c00917 	ldw	r7,36(r2)
   14180:	9009883a 	mov	r4,r18
   14184:	980b883a 	mov	r5,r19
   14188:	da001715 	stw	r8,92(sp)
   1418c:	da401615 	stw	r9,88(sp)
   14190:	001cd440 	call	1cd44 <__divdf3>
   14194:	da001717 	ldw	r8,92(sp)
   14198:	da401617 	ldw	r9,88(sp)
   1419c:	ad4003cc 	andi	r21,r21,15
   141a0:	040000c4 	movi	r16,3
   141a4:	1023883a 	mov	r17,r2
   141a8:	1829883a 	mov	r20,r3
   141ac:	a8001126 	beq	r21,zero,141f4 <_dtoa_r+0x440>
   141b0:	05c000f4 	movhi	r23,3
   141b4:	bdea3704 	addi	r23,r23,-22308
   141b8:	4805883a 	mov	r2,r9
   141bc:	4007883a 	mov	r3,r8
   141c0:	a980004c 	andi	r6,r21,1
   141c4:	1009883a 	mov	r4,r2
   141c8:	a82bd07a 	srai	r21,r21,1
   141cc:	180b883a 	mov	r5,r3
   141d0:	30000426 	beq	r6,zero,141e4 <_dtoa_r+0x430>
   141d4:	b9800017 	ldw	r6,0(r23)
   141d8:	b9c00117 	ldw	r7,4(r23)
   141dc:	84000044 	addi	r16,r16,1
   141e0:	001d96c0 	call	1d96c <__muldf3>
   141e4:	bdc00204 	addi	r23,r23,8
   141e8:	a83ff51e 	bne	r21,zero,141c0 <__alt_data_end+0xfc0141c0>
   141ec:	1013883a 	mov	r9,r2
   141f0:	1811883a 	mov	r8,r3
   141f4:	480d883a 	mov	r6,r9
   141f8:	400f883a 	mov	r7,r8
   141fc:	8809883a 	mov	r4,r17
   14200:	a00b883a 	mov	r5,r20
   14204:	001cd440 	call	1cd44 <__divdf3>
   14208:	d8800f15 	stw	r2,60(sp)
   1420c:	d8c01015 	stw	r3,64(sp)
   14210:	d8c00e17 	ldw	r3,56(sp)
   14214:	18000626 	beq	r3,zero,14230 <_dtoa_r+0x47c>
   14218:	d9000f17 	ldw	r4,60(sp)
   1421c:	d9401017 	ldw	r5,64(sp)
   14220:	000d883a 	mov	r6,zero
   14224:	01cffc34 	movhi	r7,16368
   14228:	001d8780 	call	1d878 <__ledf2>
   1422c:	10040b16 	blt	r2,zero,1525c <_dtoa_r+0x14a8>
   14230:	8009883a 	mov	r4,r16
   14234:	001eb540 	call	1eb54 <__floatsidf>
   14238:	d9800f17 	ldw	r6,60(sp)
   1423c:	d9c01017 	ldw	r7,64(sp)
   14240:	1009883a 	mov	r4,r2
   14244:	180b883a 	mov	r5,r3
   14248:	001d96c0 	call	1d96c <__muldf3>
   1424c:	000d883a 	mov	r6,zero
   14250:	01d00734 	movhi	r7,16412
   14254:	1009883a 	mov	r4,r2
   14258:	180b883a 	mov	r5,r3
   1425c:	001c4980 	call	1c498 <__adddf3>
   14260:	1021883a 	mov	r16,r2
   14264:	d8800617 	ldw	r2,24(sp)
   14268:	047f3034 	movhi	r17,64704
   1426c:	1c63883a 	add	r17,r3,r17
   14270:	10031826 	beq	r2,zero,14ed4 <_dtoa_r+0x1120>
   14274:	d8c00517 	ldw	r3,20(sp)
   14278:	db000617 	ldw	r12,24(sp)
   1427c:	d8c01315 	stw	r3,76(sp)
   14280:	d9000b17 	ldw	r4,44(sp)
   14284:	20038f26 	beq	r4,zero,150c4 <_dtoa_r+0x1310>
   14288:	60bfffc4 	addi	r2,r12,-1
   1428c:	100490fa 	slli	r2,r2,3
   14290:	00c000f4 	movhi	r3,3
   14294:	18ea4104 	addi	r3,r3,-22268
   14298:	1885883a 	add	r2,r3,r2
   1429c:	11800017 	ldw	r6,0(r2)
   142a0:	11c00117 	ldw	r7,4(r2)
   142a4:	d8800717 	ldw	r2,28(sp)
   142a8:	0009883a 	mov	r4,zero
   142ac:	014ff834 	movhi	r5,16352
   142b0:	db001615 	stw	r12,88(sp)
   142b4:	15c00044 	addi	r23,r2,1
   142b8:	001cd440 	call	1cd44 <__divdf3>
   142bc:	800d883a 	mov	r6,r16
   142c0:	880f883a 	mov	r7,r17
   142c4:	1009883a 	mov	r4,r2
   142c8:	180b883a 	mov	r5,r3
   142cc:	001e1d80 	call	1e1d8 <__subdf3>
   142d0:	d9401017 	ldw	r5,64(sp)
   142d4:	d9000f17 	ldw	r4,60(sp)
   142d8:	102b883a 	mov	r21,r2
   142dc:	d8c01215 	stw	r3,72(sp)
   142e0:	001ead40 	call	1ead4 <__fixdfsi>
   142e4:	1009883a 	mov	r4,r2
   142e8:	1029883a 	mov	r20,r2
   142ec:	001eb540 	call	1eb54 <__floatsidf>
   142f0:	d9000f17 	ldw	r4,60(sp)
   142f4:	d9401017 	ldw	r5,64(sp)
   142f8:	100d883a 	mov	r6,r2
   142fc:	180f883a 	mov	r7,r3
   14300:	001e1d80 	call	1e1d8 <__subdf3>
   14304:	1823883a 	mov	r17,r3
   14308:	d8c00717 	ldw	r3,28(sp)
   1430c:	d9401217 	ldw	r5,72(sp)
   14310:	a2000c04 	addi	r8,r20,48
   14314:	1021883a 	mov	r16,r2
   14318:	1a000005 	stb	r8,0(r3)
   1431c:	800d883a 	mov	r6,r16
   14320:	880f883a 	mov	r7,r17
   14324:	a809883a 	mov	r4,r21
   14328:	4029883a 	mov	r20,r8
   1432c:	001d79c0 	call	1d79c <__gedf2>
   14330:	00841d16 	blt	zero,r2,153a8 <_dtoa_r+0x15f4>
   14334:	800d883a 	mov	r6,r16
   14338:	880f883a 	mov	r7,r17
   1433c:	0009883a 	mov	r4,zero
   14340:	014ffc34 	movhi	r5,16368
   14344:	001e1d80 	call	1e1d8 <__subdf3>
   14348:	d9401217 	ldw	r5,72(sp)
   1434c:	100d883a 	mov	r6,r2
   14350:	180f883a 	mov	r7,r3
   14354:	a809883a 	mov	r4,r21
   14358:	001d79c0 	call	1d79c <__gedf2>
   1435c:	db001617 	ldw	r12,88(sp)
   14360:	00840e16 	blt	zero,r2,1539c <_dtoa_r+0x15e8>
   14364:	00800044 	movi	r2,1
   14368:	13006b0e 	bge	r2,r12,14518 <_dtoa_r+0x764>
   1436c:	d9000717 	ldw	r4,28(sp)
   14370:	dd800f15 	stw	r22,60(sp)
   14374:	dcc01015 	stw	r19,64(sp)
   14378:	2319883a 	add	r12,r4,r12
   1437c:	dcc01217 	ldw	r19,72(sp)
   14380:	602d883a 	mov	r22,r12
   14384:	dc801215 	stw	r18,72(sp)
   14388:	b825883a 	mov	r18,r23
   1438c:	00000906 	br	143b4 <_dtoa_r+0x600>
   14390:	001e1d80 	call	1e1d8 <__subdf3>
   14394:	a80d883a 	mov	r6,r21
   14398:	980f883a 	mov	r7,r19
   1439c:	1009883a 	mov	r4,r2
   143a0:	180b883a 	mov	r5,r3
   143a4:	001d8780 	call	1d878 <__ledf2>
   143a8:	1003e816 	blt	r2,zero,1534c <_dtoa_r+0x1598>
   143ac:	b825883a 	mov	r18,r23
   143b0:	bd83e926 	beq	r23,r22,15358 <_dtoa_r+0x15a4>
   143b4:	a809883a 	mov	r4,r21
   143b8:	980b883a 	mov	r5,r19
   143bc:	000d883a 	mov	r6,zero
   143c0:	01d00934 	movhi	r7,16420
   143c4:	001d96c0 	call	1d96c <__muldf3>
   143c8:	000d883a 	mov	r6,zero
   143cc:	01d00934 	movhi	r7,16420
   143d0:	8009883a 	mov	r4,r16
   143d4:	880b883a 	mov	r5,r17
   143d8:	102b883a 	mov	r21,r2
   143dc:	1827883a 	mov	r19,r3
   143e0:	001d96c0 	call	1d96c <__muldf3>
   143e4:	180b883a 	mov	r5,r3
   143e8:	1009883a 	mov	r4,r2
   143ec:	1821883a 	mov	r16,r3
   143f0:	1023883a 	mov	r17,r2
   143f4:	001ead40 	call	1ead4 <__fixdfsi>
   143f8:	1009883a 	mov	r4,r2
   143fc:	1029883a 	mov	r20,r2
   14400:	001eb540 	call	1eb54 <__floatsidf>
   14404:	8809883a 	mov	r4,r17
   14408:	800b883a 	mov	r5,r16
   1440c:	100d883a 	mov	r6,r2
   14410:	180f883a 	mov	r7,r3
   14414:	001e1d80 	call	1e1d8 <__subdf3>
   14418:	a5000c04 	addi	r20,r20,48
   1441c:	a80d883a 	mov	r6,r21
   14420:	980f883a 	mov	r7,r19
   14424:	1009883a 	mov	r4,r2
   14428:	180b883a 	mov	r5,r3
   1442c:	95000005 	stb	r20,0(r18)
   14430:	1021883a 	mov	r16,r2
   14434:	1823883a 	mov	r17,r3
   14438:	001d8780 	call	1d878 <__ledf2>
   1443c:	bdc00044 	addi	r23,r23,1
   14440:	800d883a 	mov	r6,r16
   14444:	880f883a 	mov	r7,r17
   14448:	0009883a 	mov	r4,zero
   1444c:	014ffc34 	movhi	r5,16368
   14450:	103fcf0e 	bge	r2,zero,14390 <__alt_data_end+0xfc014390>
   14454:	d8c01317 	ldw	r3,76(sp)
   14458:	d8c00515 	stw	r3,20(sp)
   1445c:	d9400917 	ldw	r5,36(sp)
   14460:	e009883a 	mov	r4,fp
   14464:	0016a980 	call	16a98 <_Bfree>
   14468:	d9000517 	ldw	r4,20(sp)
   1446c:	d9802317 	ldw	r6,140(sp)
   14470:	d9c02517 	ldw	r7,148(sp)
   14474:	b8000005 	stb	zero,0(r23)
   14478:	20800044 	addi	r2,r4,1
   1447c:	30800015 	stw	r2,0(r6)
   14480:	3802aa26 	beq	r7,zero,14f2c <_dtoa_r+0x1178>
   14484:	3dc00015 	stw	r23,0(r7)
   14488:	d8800717 	ldw	r2,28(sp)
   1448c:	003e7906 	br	13e74 <__alt_data_end+0xfc013e74>
   14490:	00800434 	movhi	r2,16
   14494:	10bfffc4 	addi	r2,r2,-1
   14498:	88a2703a 	and	r17,r17,r2
   1449c:	883e851e 	bne	r17,zero,13eb4 <__alt_data_end+0xfc013eb4>
   144a0:	008000f4 	movhi	r2,3
   144a4:	10aa2304 	addi	r2,r2,-22388
   144a8:	003e8406 	br	13ebc <__alt_data_end+0xfc013ebc>
   144ac:	10c00204 	addi	r3,r2,8
   144b0:	003e8706 	br	13ed0 <__alt_data_end+0xfc013ed0>
   144b4:	01400434 	movhi	r5,16
   144b8:	297fffc4 	addi	r5,r5,-1
   144bc:	994a703a 	and	r5,r19,r5
   144c0:	9009883a 	mov	r4,r18
   144c4:	843f0044 	addi	r16,r16,-1023
   144c8:	294ffc34 	orhi	r5,r5,16368
   144cc:	dd800217 	ldw	r22,8(sp)
   144d0:	d8001115 	stw	zero,68(sp)
   144d4:	003ea506 	br	13f6c <__alt_data_end+0xfc013f6c>
   144d8:	008000f4 	movhi	r2,3
   144dc:	10aa1204 	addi	r2,r2,-22456
   144e0:	003e6406 	br	13e74 <__alt_data_end+0xfc013e74>
   144e4:	e0001115 	stw	zero,68(fp)
   144e8:	000b883a 	mov	r5,zero
   144ec:	e009883a 	mov	r4,fp
   144f0:	00169f00 	call	169f0 <_Balloc>
   144f4:	01bfffc4 	movi	r6,-1
   144f8:	01c00044 	movi	r7,1
   144fc:	d8800715 	stw	r2,28(sp)
   14500:	d9800c15 	stw	r6,48(sp)
   14504:	e0801015 	stw	r2,64(fp)
   14508:	d8000315 	stw	zero,12(sp)
   1450c:	d9c00b15 	stw	r7,44(sp)
   14510:	d9800615 	stw	r6,24(sp)
   14514:	d8002215 	stw	zero,136(sp)
   14518:	d8800117 	ldw	r2,4(sp)
   1451c:	10008916 	blt	r2,zero,14744 <_dtoa_r+0x990>
   14520:	d9000517 	ldw	r4,20(sp)
   14524:	00c00384 	movi	r3,14
   14528:	19008616 	blt	r3,r4,14744 <_dtoa_r+0x990>
   1452c:	200490fa 	slli	r2,r4,3
   14530:	00c000f4 	movhi	r3,3
   14534:	d9802217 	ldw	r6,136(sp)
   14538:	18ea4104 	addi	r3,r3,-22268
   1453c:	1885883a 	add	r2,r3,r2
   14540:	14000017 	ldw	r16,0(r2)
   14544:	14400117 	ldw	r17,4(r2)
   14548:	30016316 	blt	r6,zero,14ad8 <_dtoa_r+0xd24>
   1454c:	800d883a 	mov	r6,r16
   14550:	880f883a 	mov	r7,r17
   14554:	9009883a 	mov	r4,r18
   14558:	980b883a 	mov	r5,r19
   1455c:	001cd440 	call	1cd44 <__divdf3>
   14560:	180b883a 	mov	r5,r3
   14564:	1009883a 	mov	r4,r2
   14568:	001ead40 	call	1ead4 <__fixdfsi>
   1456c:	1009883a 	mov	r4,r2
   14570:	102b883a 	mov	r21,r2
   14574:	001eb540 	call	1eb54 <__floatsidf>
   14578:	800d883a 	mov	r6,r16
   1457c:	880f883a 	mov	r7,r17
   14580:	1009883a 	mov	r4,r2
   14584:	180b883a 	mov	r5,r3
   14588:	001d96c0 	call	1d96c <__muldf3>
   1458c:	100d883a 	mov	r6,r2
   14590:	180f883a 	mov	r7,r3
   14594:	9009883a 	mov	r4,r18
   14598:	980b883a 	mov	r5,r19
   1459c:	001e1d80 	call	1e1d8 <__subdf3>
   145a0:	d9c00717 	ldw	r7,28(sp)
   145a4:	1009883a 	mov	r4,r2
   145a8:	a8800c04 	addi	r2,r21,48
   145ac:	38800005 	stb	r2,0(r7)
   145b0:	3dc00044 	addi	r23,r7,1
   145b4:	d9c00617 	ldw	r7,24(sp)
   145b8:	01800044 	movi	r6,1
   145bc:	180b883a 	mov	r5,r3
   145c0:	2005883a 	mov	r2,r4
   145c4:	39803826 	beq	r7,r6,146a8 <_dtoa_r+0x8f4>
   145c8:	000d883a 	mov	r6,zero
   145cc:	01d00934 	movhi	r7,16420
   145d0:	001d96c0 	call	1d96c <__muldf3>
   145d4:	000d883a 	mov	r6,zero
   145d8:	000f883a 	mov	r7,zero
   145dc:	1009883a 	mov	r4,r2
   145e0:	180b883a 	mov	r5,r3
   145e4:	1025883a 	mov	r18,r2
   145e8:	1827883a 	mov	r19,r3
   145ec:	001d7140 	call	1d714 <__eqdf2>
   145f0:	103f9a26 	beq	r2,zero,1445c <__alt_data_end+0xfc01445c>
   145f4:	d9c00617 	ldw	r7,24(sp)
   145f8:	d8c00717 	ldw	r3,28(sp)
   145fc:	b829883a 	mov	r20,r23
   14600:	38bfffc4 	addi	r2,r7,-1
   14604:	18ad883a 	add	r22,r3,r2
   14608:	00000a06 	br	14634 <_dtoa_r+0x880>
   1460c:	001d96c0 	call	1d96c <__muldf3>
   14610:	000d883a 	mov	r6,zero
   14614:	000f883a 	mov	r7,zero
   14618:	1009883a 	mov	r4,r2
   1461c:	180b883a 	mov	r5,r3
   14620:	1025883a 	mov	r18,r2
   14624:	1827883a 	mov	r19,r3
   14628:	b829883a 	mov	r20,r23
   1462c:	001d7140 	call	1d714 <__eqdf2>
   14630:	103f8a26 	beq	r2,zero,1445c <__alt_data_end+0xfc01445c>
   14634:	800d883a 	mov	r6,r16
   14638:	880f883a 	mov	r7,r17
   1463c:	9009883a 	mov	r4,r18
   14640:	980b883a 	mov	r5,r19
   14644:	001cd440 	call	1cd44 <__divdf3>
   14648:	180b883a 	mov	r5,r3
   1464c:	1009883a 	mov	r4,r2
   14650:	001ead40 	call	1ead4 <__fixdfsi>
   14654:	1009883a 	mov	r4,r2
   14658:	102b883a 	mov	r21,r2
   1465c:	001eb540 	call	1eb54 <__floatsidf>
   14660:	800d883a 	mov	r6,r16
   14664:	880f883a 	mov	r7,r17
   14668:	1009883a 	mov	r4,r2
   1466c:	180b883a 	mov	r5,r3
   14670:	001d96c0 	call	1d96c <__muldf3>
   14674:	100d883a 	mov	r6,r2
   14678:	180f883a 	mov	r7,r3
   1467c:	9009883a 	mov	r4,r18
   14680:	980b883a 	mov	r5,r19
   14684:	001e1d80 	call	1e1d8 <__subdf3>
   14688:	aa000c04 	addi	r8,r21,48
   1468c:	a2000005 	stb	r8,0(r20)
   14690:	000d883a 	mov	r6,zero
   14694:	01d00934 	movhi	r7,16420
   14698:	1009883a 	mov	r4,r2
   1469c:	180b883a 	mov	r5,r3
   146a0:	a5c00044 	addi	r23,r20,1
   146a4:	b53fd91e 	bne	r22,r20,1460c <__alt_data_end+0xfc01460c>
   146a8:	100d883a 	mov	r6,r2
   146ac:	180f883a 	mov	r7,r3
   146b0:	1009883a 	mov	r4,r2
   146b4:	180b883a 	mov	r5,r3
   146b8:	001c4980 	call	1c498 <__adddf3>
   146bc:	100d883a 	mov	r6,r2
   146c0:	180f883a 	mov	r7,r3
   146c4:	8009883a 	mov	r4,r16
   146c8:	880b883a 	mov	r5,r17
   146cc:	1027883a 	mov	r19,r2
   146d0:	1825883a 	mov	r18,r3
   146d4:	001d8780 	call	1d878 <__ledf2>
   146d8:	10000816 	blt	r2,zero,146fc <_dtoa_r+0x948>
   146dc:	980d883a 	mov	r6,r19
   146e0:	900f883a 	mov	r7,r18
   146e4:	8009883a 	mov	r4,r16
   146e8:	880b883a 	mov	r5,r17
   146ec:	001d7140 	call	1d714 <__eqdf2>
   146f0:	103f5a1e 	bne	r2,zero,1445c <__alt_data_end+0xfc01445c>
   146f4:	ad40004c 	andi	r21,r21,1
   146f8:	a83f5826 	beq	r21,zero,1445c <__alt_data_end+0xfc01445c>
   146fc:	bd3fffc3 	ldbu	r20,-1(r23)
   14700:	b8bfffc4 	addi	r2,r23,-1
   14704:	1007883a 	mov	r3,r2
   14708:	01400e44 	movi	r5,57
   1470c:	d9800717 	ldw	r6,28(sp)
   14710:	00000506 	br	14728 <_dtoa_r+0x974>
   14714:	18ffffc4 	addi	r3,r3,-1
   14718:	11824726 	beq	r2,r6,15038 <_dtoa_r+0x1284>
   1471c:	1d000003 	ldbu	r20,0(r3)
   14720:	102f883a 	mov	r23,r2
   14724:	10bfffc4 	addi	r2,r2,-1
   14728:	a1003fcc 	andi	r4,r20,255
   1472c:	2100201c 	xori	r4,r4,128
   14730:	213fe004 	addi	r4,r4,-128
   14734:	217ff726 	beq	r4,r5,14714 <__alt_data_end+0xfc014714>
   14738:	a2000044 	addi	r8,r20,1
   1473c:	12000005 	stb	r8,0(r2)
   14740:	003f4606 	br	1445c <__alt_data_end+0xfc01445c>
   14744:	d9000b17 	ldw	r4,44(sp)
   14748:	2000c826 	beq	r4,zero,14a6c <_dtoa_r+0xcb8>
   1474c:	d9800317 	ldw	r6,12(sp)
   14750:	00c00044 	movi	r3,1
   14754:	1980f90e 	bge	r3,r6,14b3c <_dtoa_r+0xd88>
   14758:	d8800617 	ldw	r2,24(sp)
   1475c:	d8c00a17 	ldw	r3,40(sp)
   14760:	157fffc4 	addi	r21,r2,-1
   14764:	1d41f316 	blt	r3,r21,14f34 <_dtoa_r+0x1180>
   14768:	1d6bc83a 	sub	r21,r3,r21
   1476c:	d9c00617 	ldw	r7,24(sp)
   14770:	3802aa16 	blt	r7,zero,1521c <_dtoa_r+0x1468>
   14774:	dd000817 	ldw	r20,32(sp)
   14778:	d8800617 	ldw	r2,24(sp)
   1477c:	d8c00817 	ldw	r3,32(sp)
   14780:	01400044 	movi	r5,1
   14784:	e009883a 	mov	r4,fp
   14788:	1887883a 	add	r3,r3,r2
   1478c:	d8c00815 	stw	r3,32(sp)
   14790:	b0ad883a 	add	r22,r22,r2
   14794:	0016e240 	call	16e24 <__i2b>
   14798:	1023883a 	mov	r17,r2
   1479c:	a0000826 	beq	r20,zero,147c0 <_dtoa_r+0xa0c>
   147a0:	0580070e 	bge	zero,r22,147c0 <_dtoa_r+0xa0c>
   147a4:	a005883a 	mov	r2,r20
   147a8:	b500b916 	blt	r22,r20,14a90 <_dtoa_r+0xcdc>
   147ac:	d9000817 	ldw	r4,32(sp)
   147b0:	a0a9c83a 	sub	r20,r20,r2
   147b4:	b0adc83a 	sub	r22,r22,r2
   147b8:	2089c83a 	sub	r4,r4,r2
   147bc:	d9000815 	stw	r4,32(sp)
   147c0:	d9800a17 	ldw	r6,40(sp)
   147c4:	0181810e 	bge	zero,r6,14dcc <_dtoa_r+0x1018>
   147c8:	d9c00b17 	ldw	r7,44(sp)
   147cc:	3800b326 	beq	r7,zero,14a9c <_dtoa_r+0xce8>
   147d0:	a800b226 	beq	r21,zero,14a9c <_dtoa_r+0xce8>
   147d4:	880b883a 	mov	r5,r17
   147d8:	a80d883a 	mov	r6,r21
   147dc:	e009883a 	mov	r4,fp
   147e0:	00170ec0 	call	170ec <__pow5mult>
   147e4:	d9800917 	ldw	r6,36(sp)
   147e8:	100b883a 	mov	r5,r2
   147ec:	e009883a 	mov	r4,fp
   147f0:	1023883a 	mov	r17,r2
   147f4:	0016e600 	call	16e60 <__multiply>
   147f8:	1021883a 	mov	r16,r2
   147fc:	d8800a17 	ldw	r2,40(sp)
   14800:	d9400917 	ldw	r5,36(sp)
   14804:	e009883a 	mov	r4,fp
   14808:	1545c83a 	sub	r2,r2,r21
   1480c:	d8800a15 	stw	r2,40(sp)
   14810:	0016a980 	call	16a98 <_Bfree>
   14814:	d8c00a17 	ldw	r3,40(sp)
   14818:	18009f1e 	bne	r3,zero,14a98 <_dtoa_r+0xce4>
   1481c:	05c00044 	movi	r23,1
   14820:	e009883a 	mov	r4,fp
   14824:	b80b883a 	mov	r5,r23
   14828:	0016e240 	call	16e24 <__i2b>
   1482c:	d9000d17 	ldw	r4,52(sp)
   14830:	102b883a 	mov	r21,r2
   14834:	2000ce26 	beq	r4,zero,14b70 <_dtoa_r+0xdbc>
   14838:	200d883a 	mov	r6,r4
   1483c:	100b883a 	mov	r5,r2
   14840:	e009883a 	mov	r4,fp
   14844:	00170ec0 	call	170ec <__pow5mult>
   14848:	d9800317 	ldw	r6,12(sp)
   1484c:	102b883a 	mov	r21,r2
   14850:	b981810e 	bge	r23,r6,14e58 <_dtoa_r+0x10a4>
   14854:	0027883a 	mov	r19,zero
   14858:	a8800417 	ldw	r2,16(r21)
   1485c:	05c00804 	movi	r23,32
   14860:	10800104 	addi	r2,r2,4
   14864:	1085883a 	add	r2,r2,r2
   14868:	1085883a 	add	r2,r2,r2
   1486c:	a885883a 	add	r2,r21,r2
   14870:	11000017 	ldw	r4,0(r2)
   14874:	0016d0c0 	call	16d0c <__hi0bits>
   14878:	b885c83a 	sub	r2,r23,r2
   1487c:	1585883a 	add	r2,r2,r22
   14880:	108007cc 	andi	r2,r2,31
   14884:	1000b326 	beq	r2,zero,14b54 <_dtoa_r+0xda0>
   14888:	00c00804 	movi	r3,32
   1488c:	1887c83a 	sub	r3,r3,r2
   14890:	01000104 	movi	r4,4
   14894:	20c2cd0e 	bge	r4,r3,153cc <_dtoa_r+0x1618>
   14898:	00c00704 	movi	r3,28
   1489c:	1885c83a 	sub	r2,r3,r2
   148a0:	d8c00817 	ldw	r3,32(sp)
   148a4:	a0a9883a 	add	r20,r20,r2
   148a8:	b0ad883a 	add	r22,r22,r2
   148ac:	1887883a 	add	r3,r3,r2
   148b0:	d8c00815 	stw	r3,32(sp)
   148b4:	d9800817 	ldw	r6,32(sp)
   148b8:	0180040e 	bge	zero,r6,148cc <_dtoa_r+0xb18>
   148bc:	800b883a 	mov	r5,r16
   148c0:	e009883a 	mov	r4,fp
   148c4:	001722c0 	call	1722c <__lshift>
   148c8:	1021883a 	mov	r16,r2
   148cc:	0580050e 	bge	zero,r22,148e4 <_dtoa_r+0xb30>
   148d0:	a80b883a 	mov	r5,r21
   148d4:	b00d883a 	mov	r6,r22
   148d8:	e009883a 	mov	r4,fp
   148dc:	001722c0 	call	1722c <__lshift>
   148e0:	102b883a 	mov	r21,r2
   148e4:	d9c00e17 	ldw	r7,56(sp)
   148e8:	3801211e 	bne	r7,zero,14d70 <_dtoa_r+0xfbc>
   148ec:	d9800617 	ldw	r6,24(sp)
   148f0:	0181380e 	bge	zero,r6,14dd4 <_dtoa_r+0x1020>
   148f4:	d8c00b17 	ldw	r3,44(sp)
   148f8:	1800ab1e 	bne	r3,zero,14ba8 <_dtoa_r+0xdf4>
   148fc:	dc800717 	ldw	r18,28(sp)
   14900:	dcc00617 	ldw	r19,24(sp)
   14904:	9029883a 	mov	r20,r18
   14908:	00000206 	br	14914 <_dtoa_r+0xb60>
   1490c:	0016ac00 	call	16ac0 <__multadd>
   14910:	1021883a 	mov	r16,r2
   14914:	a80b883a 	mov	r5,r21
   14918:	8009883a 	mov	r4,r16
   1491c:	0013b8c0 	call	13b8c <quorem>
   14920:	10800c04 	addi	r2,r2,48
   14924:	90800005 	stb	r2,0(r18)
   14928:	94800044 	addi	r18,r18,1
   1492c:	9507c83a 	sub	r3,r18,r20
   14930:	000f883a 	mov	r7,zero
   14934:	01800284 	movi	r6,10
   14938:	800b883a 	mov	r5,r16
   1493c:	e009883a 	mov	r4,fp
   14940:	1cfff216 	blt	r3,r19,1490c <__alt_data_end+0xfc01490c>
   14944:	1011883a 	mov	r8,r2
   14948:	d8800617 	ldw	r2,24(sp)
   1494c:	0082370e 	bge	zero,r2,1522c <_dtoa_r+0x1478>
   14950:	d9000717 	ldw	r4,28(sp)
   14954:	0025883a 	mov	r18,zero
   14958:	20af883a 	add	r23,r4,r2
   1495c:	01800044 	movi	r6,1
   14960:	800b883a 	mov	r5,r16
   14964:	e009883a 	mov	r4,fp
   14968:	da001715 	stw	r8,92(sp)
   1496c:	001722c0 	call	1722c <__lshift>
   14970:	a80b883a 	mov	r5,r21
   14974:	1009883a 	mov	r4,r2
   14978:	d8800915 	stw	r2,36(sp)
   1497c:	00173740 	call	17374 <__mcmp>
   14980:	da001717 	ldw	r8,92(sp)
   14984:	0081800e 	bge	zero,r2,14f88 <_dtoa_r+0x11d4>
   14988:	b93fffc3 	ldbu	r4,-1(r23)
   1498c:	b8bfffc4 	addi	r2,r23,-1
   14990:	1007883a 	mov	r3,r2
   14994:	01800e44 	movi	r6,57
   14998:	d9c00717 	ldw	r7,28(sp)
   1499c:	00000506 	br	149b4 <_dtoa_r+0xc00>
   149a0:	18ffffc4 	addi	r3,r3,-1
   149a4:	11c12326 	beq	r2,r7,14e34 <_dtoa_r+0x1080>
   149a8:	19000003 	ldbu	r4,0(r3)
   149ac:	102f883a 	mov	r23,r2
   149b0:	10bfffc4 	addi	r2,r2,-1
   149b4:	21403fcc 	andi	r5,r4,255
   149b8:	2940201c 	xori	r5,r5,128
   149bc:	297fe004 	addi	r5,r5,-128
   149c0:	29bff726 	beq	r5,r6,149a0 <__alt_data_end+0xfc0149a0>
   149c4:	21000044 	addi	r4,r4,1
   149c8:	11000005 	stb	r4,0(r2)
   149cc:	a80b883a 	mov	r5,r21
   149d0:	e009883a 	mov	r4,fp
   149d4:	0016a980 	call	16a98 <_Bfree>
   149d8:	883ea026 	beq	r17,zero,1445c <__alt_data_end+0xfc01445c>
   149dc:	90000426 	beq	r18,zero,149f0 <_dtoa_r+0xc3c>
   149e0:	94400326 	beq	r18,r17,149f0 <_dtoa_r+0xc3c>
   149e4:	900b883a 	mov	r5,r18
   149e8:	e009883a 	mov	r4,fp
   149ec:	0016a980 	call	16a98 <_Bfree>
   149f0:	880b883a 	mov	r5,r17
   149f4:	e009883a 	mov	r4,fp
   149f8:	0016a980 	call	16a98 <_Bfree>
   149fc:	003e9706 	br	1445c <__alt_data_end+0xfc01445c>
   14a00:	01800044 	movi	r6,1
   14a04:	d9800e15 	stw	r6,56(sp)
   14a08:	003d9606 	br	14064 <__alt_data_end+0xfc014064>
   14a0c:	d8800817 	ldw	r2,32(sp)
   14a10:	d8c00517 	ldw	r3,20(sp)
   14a14:	d8000d15 	stw	zero,52(sp)
   14a18:	10c5c83a 	sub	r2,r2,r3
   14a1c:	00c9c83a 	sub	r4,zero,r3
   14a20:	d8800815 	stw	r2,32(sp)
   14a24:	d9000a15 	stw	r4,40(sp)
   14a28:	003d9706 	br	14088 <__alt_data_end+0xfc014088>
   14a2c:	05adc83a 	sub	r22,zero,r22
   14a30:	dd800815 	stw	r22,32(sp)
   14a34:	002d883a 	mov	r22,zero
   14a38:	003d8e06 	br	14074 <__alt_data_end+0xfc014074>
   14a3c:	d9000517 	ldw	r4,20(sp)
   14a40:	001eb540 	call	1eb54 <__floatsidf>
   14a44:	100d883a 	mov	r6,r2
   14a48:	180f883a 	mov	r7,r3
   14a4c:	a009883a 	mov	r4,r20
   14a50:	880b883a 	mov	r5,r17
   14a54:	001d7140 	call	1d714 <__eqdf2>
   14a58:	103d7126 	beq	r2,zero,14020 <__alt_data_end+0xfc014020>
   14a5c:	d9c00517 	ldw	r7,20(sp)
   14a60:	39ffffc4 	addi	r7,r7,-1
   14a64:	d9c00515 	stw	r7,20(sp)
   14a68:	003d6d06 	br	14020 <__alt_data_end+0xfc014020>
   14a6c:	dd400a17 	ldw	r21,40(sp)
   14a70:	dd000817 	ldw	r20,32(sp)
   14a74:	0023883a 	mov	r17,zero
   14a78:	003f4806 	br	1479c <__alt_data_end+0xfc01479c>
   14a7c:	10e3c83a 	sub	r17,r2,r3
   14a80:	9448983a 	sll	r4,r18,r17
   14a84:	003d3206 	br	13f50 <__alt_data_end+0xfc013f50>
   14a88:	d8000e15 	stw	zero,56(sp)
   14a8c:	003d7506 	br	14064 <__alt_data_end+0xfc014064>
   14a90:	b005883a 	mov	r2,r22
   14a94:	003f4506 	br	147ac <__alt_data_end+0xfc0147ac>
   14a98:	dc000915 	stw	r16,36(sp)
   14a9c:	d9800a17 	ldw	r6,40(sp)
   14aa0:	d9400917 	ldw	r5,36(sp)
   14aa4:	e009883a 	mov	r4,fp
   14aa8:	00170ec0 	call	170ec <__pow5mult>
   14aac:	1021883a 	mov	r16,r2
   14ab0:	003f5a06 	br	1481c <__alt_data_end+0xfc01481c>
   14ab4:	01c00044 	movi	r7,1
   14ab8:	d9c00b15 	stw	r7,44(sp)
   14abc:	d8802217 	ldw	r2,136(sp)
   14ac0:	0081280e 	bge	zero,r2,14f64 <_dtoa_r+0x11b0>
   14ac4:	100d883a 	mov	r6,r2
   14ac8:	1021883a 	mov	r16,r2
   14acc:	d8800c15 	stw	r2,48(sp)
   14ad0:	d8800615 	stw	r2,24(sp)
   14ad4:	003d8806 	br	140f8 <__alt_data_end+0xfc0140f8>
   14ad8:	d8800617 	ldw	r2,24(sp)
   14adc:	00be9b16 	blt	zero,r2,1454c <__alt_data_end+0xfc01454c>
   14ae0:	10010f1e 	bne	r2,zero,14f20 <_dtoa_r+0x116c>
   14ae4:	880b883a 	mov	r5,r17
   14ae8:	000d883a 	mov	r6,zero
   14aec:	01d00534 	movhi	r7,16404
   14af0:	8009883a 	mov	r4,r16
   14af4:	001d96c0 	call	1d96c <__muldf3>
   14af8:	900d883a 	mov	r6,r18
   14afc:	980f883a 	mov	r7,r19
   14b00:	1009883a 	mov	r4,r2
   14b04:	180b883a 	mov	r5,r3
   14b08:	001d79c0 	call	1d79c <__gedf2>
   14b0c:	002b883a 	mov	r21,zero
   14b10:	0023883a 	mov	r17,zero
   14b14:	1000bf16 	blt	r2,zero,14e14 <_dtoa_r+0x1060>
   14b18:	d9802217 	ldw	r6,136(sp)
   14b1c:	ddc00717 	ldw	r23,28(sp)
   14b20:	018c303a 	nor	r6,zero,r6
   14b24:	d9800515 	stw	r6,20(sp)
   14b28:	a80b883a 	mov	r5,r21
   14b2c:	e009883a 	mov	r4,fp
   14b30:	0016a980 	call	16a98 <_Bfree>
   14b34:	883e4926 	beq	r17,zero,1445c <__alt_data_end+0xfc01445c>
   14b38:	003fad06 	br	149f0 <__alt_data_end+0xfc0149f0>
   14b3c:	d9c01117 	ldw	r7,68(sp)
   14b40:	3801bc26 	beq	r7,zero,15234 <_dtoa_r+0x1480>
   14b44:	10810cc4 	addi	r2,r2,1075
   14b48:	dd400a17 	ldw	r21,40(sp)
   14b4c:	dd000817 	ldw	r20,32(sp)
   14b50:	003f0a06 	br	1477c <__alt_data_end+0xfc01477c>
   14b54:	00800704 	movi	r2,28
   14b58:	d9000817 	ldw	r4,32(sp)
   14b5c:	a0a9883a 	add	r20,r20,r2
   14b60:	b0ad883a 	add	r22,r22,r2
   14b64:	2089883a 	add	r4,r4,r2
   14b68:	d9000815 	stw	r4,32(sp)
   14b6c:	003f5106 	br	148b4 <__alt_data_end+0xfc0148b4>
   14b70:	d8c00317 	ldw	r3,12(sp)
   14b74:	b8c1fc0e 	bge	r23,r3,15368 <_dtoa_r+0x15b4>
   14b78:	0027883a 	mov	r19,zero
   14b7c:	b805883a 	mov	r2,r23
   14b80:	003f3e06 	br	1487c <__alt_data_end+0xfc01487c>
   14b84:	880b883a 	mov	r5,r17
   14b88:	e009883a 	mov	r4,fp
   14b8c:	000f883a 	mov	r7,zero
   14b90:	01800284 	movi	r6,10
   14b94:	0016ac00 	call	16ac0 <__multadd>
   14b98:	d9000c17 	ldw	r4,48(sp)
   14b9c:	1023883a 	mov	r17,r2
   14ba0:	0102040e 	bge	zero,r4,153b4 <_dtoa_r+0x1600>
   14ba4:	d9000615 	stw	r4,24(sp)
   14ba8:	0500050e 	bge	zero,r20,14bc0 <_dtoa_r+0xe0c>
   14bac:	880b883a 	mov	r5,r17
   14bb0:	a00d883a 	mov	r6,r20
   14bb4:	e009883a 	mov	r4,fp
   14bb8:	001722c0 	call	1722c <__lshift>
   14bbc:	1023883a 	mov	r17,r2
   14bc0:	9801241e 	bne	r19,zero,15054 <_dtoa_r+0x12a0>
   14bc4:	8829883a 	mov	r20,r17
   14bc8:	d9000617 	ldw	r4,24(sp)
   14bcc:	dcc00717 	ldw	r19,28(sp)
   14bd0:	9480004c 	andi	r18,r18,1
   14bd4:	20bfffc4 	addi	r2,r4,-1
   14bd8:	9885883a 	add	r2,r19,r2
   14bdc:	d8800415 	stw	r2,16(sp)
   14be0:	dc800615 	stw	r18,24(sp)
   14be4:	a80b883a 	mov	r5,r21
   14be8:	8009883a 	mov	r4,r16
   14bec:	0013b8c0 	call	13b8c <quorem>
   14bf0:	880b883a 	mov	r5,r17
   14bf4:	8009883a 	mov	r4,r16
   14bf8:	102f883a 	mov	r23,r2
   14bfc:	00173740 	call	17374 <__mcmp>
   14c00:	a80b883a 	mov	r5,r21
   14c04:	a00d883a 	mov	r6,r20
   14c08:	e009883a 	mov	r4,fp
   14c0c:	102d883a 	mov	r22,r2
   14c10:	00173d40 	call	173d4 <__mdiff>
   14c14:	1007883a 	mov	r3,r2
   14c18:	10800317 	ldw	r2,12(r2)
   14c1c:	bc800c04 	addi	r18,r23,48
   14c20:	180b883a 	mov	r5,r3
   14c24:	10004e1e 	bne	r2,zero,14d60 <_dtoa_r+0xfac>
   14c28:	8009883a 	mov	r4,r16
   14c2c:	d8c01615 	stw	r3,88(sp)
   14c30:	00173740 	call	17374 <__mcmp>
   14c34:	d8c01617 	ldw	r3,88(sp)
   14c38:	e009883a 	mov	r4,fp
   14c3c:	d8801615 	stw	r2,88(sp)
   14c40:	180b883a 	mov	r5,r3
   14c44:	0016a980 	call	16a98 <_Bfree>
   14c48:	d8801617 	ldw	r2,88(sp)
   14c4c:	1000041e 	bne	r2,zero,14c60 <_dtoa_r+0xeac>
   14c50:	d9800317 	ldw	r6,12(sp)
   14c54:	3000021e 	bne	r6,zero,14c60 <_dtoa_r+0xeac>
   14c58:	d8c00617 	ldw	r3,24(sp)
   14c5c:	18003726 	beq	r3,zero,14d3c <_dtoa_r+0xf88>
   14c60:	b0002016 	blt	r22,zero,14ce4 <_dtoa_r+0xf30>
   14c64:	b000041e 	bne	r22,zero,14c78 <_dtoa_r+0xec4>
   14c68:	d9000317 	ldw	r4,12(sp)
   14c6c:	2000021e 	bne	r4,zero,14c78 <_dtoa_r+0xec4>
   14c70:	d8c00617 	ldw	r3,24(sp)
   14c74:	18001b26 	beq	r3,zero,14ce4 <_dtoa_r+0xf30>
   14c78:	00810716 	blt	zero,r2,15098 <_dtoa_r+0x12e4>
   14c7c:	d8c00417 	ldw	r3,16(sp)
   14c80:	9d800044 	addi	r22,r19,1
   14c84:	9c800005 	stb	r18,0(r19)
   14c88:	b02f883a 	mov	r23,r22
   14c8c:	98c10626 	beq	r19,r3,150a8 <_dtoa_r+0x12f4>
   14c90:	800b883a 	mov	r5,r16
   14c94:	000f883a 	mov	r7,zero
   14c98:	01800284 	movi	r6,10
   14c9c:	e009883a 	mov	r4,fp
   14ca0:	0016ac00 	call	16ac0 <__multadd>
   14ca4:	1021883a 	mov	r16,r2
   14ca8:	000f883a 	mov	r7,zero
   14cac:	01800284 	movi	r6,10
   14cb0:	880b883a 	mov	r5,r17
   14cb4:	e009883a 	mov	r4,fp
   14cb8:	8d002526 	beq	r17,r20,14d50 <_dtoa_r+0xf9c>
   14cbc:	0016ac00 	call	16ac0 <__multadd>
   14cc0:	a00b883a 	mov	r5,r20
   14cc4:	000f883a 	mov	r7,zero
   14cc8:	01800284 	movi	r6,10
   14ccc:	e009883a 	mov	r4,fp
   14cd0:	1023883a 	mov	r17,r2
   14cd4:	0016ac00 	call	16ac0 <__multadd>
   14cd8:	1029883a 	mov	r20,r2
   14cdc:	b027883a 	mov	r19,r22
   14ce0:	003fc006 	br	14be4 <__alt_data_end+0xfc014be4>
   14ce4:	9011883a 	mov	r8,r18
   14ce8:	00800e0e 	bge	zero,r2,14d24 <_dtoa_r+0xf70>
   14cec:	800b883a 	mov	r5,r16
   14cf0:	01800044 	movi	r6,1
   14cf4:	e009883a 	mov	r4,fp
   14cf8:	da001715 	stw	r8,92(sp)
   14cfc:	001722c0 	call	1722c <__lshift>
   14d00:	a80b883a 	mov	r5,r21
   14d04:	1009883a 	mov	r4,r2
   14d08:	1021883a 	mov	r16,r2
   14d0c:	00173740 	call	17374 <__mcmp>
   14d10:	da001717 	ldw	r8,92(sp)
   14d14:	0081960e 	bge	zero,r2,15370 <_dtoa_r+0x15bc>
   14d18:	00800e44 	movi	r2,57
   14d1c:	40817026 	beq	r8,r2,152e0 <_dtoa_r+0x152c>
   14d20:	ba000c44 	addi	r8,r23,49
   14d24:	8825883a 	mov	r18,r17
   14d28:	9dc00044 	addi	r23,r19,1
   14d2c:	9a000005 	stb	r8,0(r19)
   14d30:	a023883a 	mov	r17,r20
   14d34:	dc000915 	stw	r16,36(sp)
   14d38:	003f2406 	br	149cc <__alt_data_end+0xfc0149cc>
   14d3c:	00800e44 	movi	r2,57
   14d40:	9011883a 	mov	r8,r18
   14d44:	90816626 	beq	r18,r2,152e0 <_dtoa_r+0x152c>
   14d48:	05bff516 	blt	zero,r22,14d20 <__alt_data_end+0xfc014d20>
   14d4c:	003ff506 	br	14d24 <__alt_data_end+0xfc014d24>
   14d50:	0016ac00 	call	16ac0 <__multadd>
   14d54:	1023883a 	mov	r17,r2
   14d58:	1029883a 	mov	r20,r2
   14d5c:	003fdf06 	br	14cdc <__alt_data_end+0xfc014cdc>
   14d60:	e009883a 	mov	r4,fp
   14d64:	0016a980 	call	16a98 <_Bfree>
   14d68:	00800044 	movi	r2,1
   14d6c:	003fbc06 	br	14c60 <__alt_data_end+0xfc014c60>
   14d70:	a80b883a 	mov	r5,r21
   14d74:	8009883a 	mov	r4,r16
   14d78:	00173740 	call	17374 <__mcmp>
   14d7c:	103edb0e 	bge	r2,zero,148ec <__alt_data_end+0xfc0148ec>
   14d80:	800b883a 	mov	r5,r16
   14d84:	000f883a 	mov	r7,zero
   14d88:	01800284 	movi	r6,10
   14d8c:	e009883a 	mov	r4,fp
   14d90:	0016ac00 	call	16ac0 <__multadd>
   14d94:	1021883a 	mov	r16,r2
   14d98:	d8800517 	ldw	r2,20(sp)
   14d9c:	d8c00b17 	ldw	r3,44(sp)
   14da0:	10bfffc4 	addi	r2,r2,-1
   14da4:	d8800515 	stw	r2,20(sp)
   14da8:	183f761e 	bne	r3,zero,14b84 <__alt_data_end+0xfc014b84>
   14dac:	d9000c17 	ldw	r4,48(sp)
   14db0:	0101730e 	bge	zero,r4,15380 <_dtoa_r+0x15cc>
   14db4:	d9000615 	stw	r4,24(sp)
   14db8:	003ed006 	br	148fc <__alt_data_end+0xfc0148fc>
   14dbc:	00800084 	movi	r2,2
   14dc0:	3081861e 	bne	r6,r2,153dc <_dtoa_r+0x1628>
   14dc4:	d8000b15 	stw	zero,44(sp)
   14dc8:	003f3c06 	br	14abc <__alt_data_end+0xfc014abc>
   14dcc:	dc000917 	ldw	r16,36(sp)
   14dd0:	003e9206 	br	1481c <__alt_data_end+0xfc01481c>
   14dd4:	d9c00317 	ldw	r7,12(sp)
   14dd8:	00800084 	movi	r2,2
   14ddc:	11fec50e 	bge	r2,r7,148f4 <__alt_data_end+0xfc0148f4>
   14de0:	d9000617 	ldw	r4,24(sp)
   14de4:	20013c1e 	bne	r4,zero,152d8 <_dtoa_r+0x1524>
   14de8:	a80b883a 	mov	r5,r21
   14dec:	000f883a 	mov	r7,zero
   14df0:	01800144 	movi	r6,5
   14df4:	e009883a 	mov	r4,fp
   14df8:	0016ac00 	call	16ac0 <__multadd>
   14dfc:	100b883a 	mov	r5,r2
   14e00:	8009883a 	mov	r4,r16
   14e04:	102b883a 	mov	r21,r2
   14e08:	00173740 	call	17374 <__mcmp>
   14e0c:	dc000915 	stw	r16,36(sp)
   14e10:	00bf410e 	bge	zero,r2,14b18 <__alt_data_end+0xfc014b18>
   14e14:	d9c00717 	ldw	r7,28(sp)
   14e18:	00800c44 	movi	r2,49
   14e1c:	38800005 	stb	r2,0(r7)
   14e20:	d8800517 	ldw	r2,20(sp)
   14e24:	3dc00044 	addi	r23,r7,1
   14e28:	10800044 	addi	r2,r2,1
   14e2c:	d8800515 	stw	r2,20(sp)
   14e30:	003f3d06 	br	14b28 <__alt_data_end+0xfc014b28>
   14e34:	d9800517 	ldw	r6,20(sp)
   14e38:	d9c00717 	ldw	r7,28(sp)
   14e3c:	00800c44 	movi	r2,49
   14e40:	31800044 	addi	r6,r6,1
   14e44:	d9800515 	stw	r6,20(sp)
   14e48:	38800005 	stb	r2,0(r7)
   14e4c:	003edf06 	br	149cc <__alt_data_end+0xfc0149cc>
   14e50:	d8000b15 	stw	zero,44(sp)
   14e54:	003c9f06 	br	140d4 <__alt_data_end+0xfc0140d4>
   14e58:	903e7e1e 	bne	r18,zero,14854 <__alt_data_end+0xfc014854>
   14e5c:	00800434 	movhi	r2,16
   14e60:	10bfffc4 	addi	r2,r2,-1
   14e64:	9884703a 	and	r2,r19,r2
   14e68:	1000ea1e 	bne	r2,zero,15214 <_dtoa_r+0x1460>
   14e6c:	9cdffc2c 	andhi	r19,r19,32752
   14e70:	9800e826 	beq	r19,zero,15214 <_dtoa_r+0x1460>
   14e74:	d9c00817 	ldw	r7,32(sp)
   14e78:	b5800044 	addi	r22,r22,1
   14e7c:	04c00044 	movi	r19,1
   14e80:	39c00044 	addi	r7,r7,1
   14e84:	d9c00815 	stw	r7,32(sp)
   14e88:	d8800d17 	ldw	r2,52(sp)
   14e8c:	103e721e 	bne	r2,zero,14858 <__alt_data_end+0xfc014858>
   14e90:	00800044 	movi	r2,1
   14e94:	003e7906 	br	1487c <__alt_data_end+0xfc01487c>
   14e98:	8009883a 	mov	r4,r16
   14e9c:	001eb540 	call	1eb54 <__floatsidf>
   14ea0:	d9800f17 	ldw	r6,60(sp)
   14ea4:	d9c01017 	ldw	r7,64(sp)
   14ea8:	1009883a 	mov	r4,r2
   14eac:	180b883a 	mov	r5,r3
   14eb0:	001d96c0 	call	1d96c <__muldf3>
   14eb4:	000d883a 	mov	r6,zero
   14eb8:	01d00734 	movhi	r7,16412
   14ebc:	1009883a 	mov	r4,r2
   14ec0:	180b883a 	mov	r5,r3
   14ec4:	001c4980 	call	1c498 <__adddf3>
   14ec8:	047f3034 	movhi	r17,64704
   14ecc:	1021883a 	mov	r16,r2
   14ed0:	1c63883a 	add	r17,r3,r17
   14ed4:	d9000f17 	ldw	r4,60(sp)
   14ed8:	d9401017 	ldw	r5,64(sp)
   14edc:	000d883a 	mov	r6,zero
   14ee0:	01d00534 	movhi	r7,16404
   14ee4:	001e1d80 	call	1e1d8 <__subdf3>
   14ee8:	800d883a 	mov	r6,r16
   14eec:	880f883a 	mov	r7,r17
   14ef0:	1009883a 	mov	r4,r2
   14ef4:	180b883a 	mov	r5,r3
   14ef8:	102b883a 	mov	r21,r2
   14efc:	1829883a 	mov	r20,r3
   14f00:	001d79c0 	call	1d79c <__gedf2>
   14f04:	00806c16 	blt	zero,r2,150b8 <_dtoa_r+0x1304>
   14f08:	89e0003c 	xorhi	r7,r17,32768
   14f0c:	800d883a 	mov	r6,r16
   14f10:	a809883a 	mov	r4,r21
   14f14:	a00b883a 	mov	r5,r20
   14f18:	001d8780 	call	1d878 <__ledf2>
   14f1c:	103d7e0e 	bge	r2,zero,14518 <__alt_data_end+0xfc014518>
   14f20:	002b883a 	mov	r21,zero
   14f24:	0023883a 	mov	r17,zero
   14f28:	003efb06 	br	14b18 <__alt_data_end+0xfc014b18>
   14f2c:	d8800717 	ldw	r2,28(sp)
   14f30:	003bd006 	br	13e74 <__alt_data_end+0xfc013e74>
   14f34:	d9000a17 	ldw	r4,40(sp)
   14f38:	d9800d17 	ldw	r6,52(sp)
   14f3c:	dd400a15 	stw	r21,40(sp)
   14f40:	a905c83a 	sub	r2,r21,r4
   14f44:	308d883a 	add	r6,r6,r2
   14f48:	d9800d15 	stw	r6,52(sp)
   14f4c:	002b883a 	mov	r21,zero
   14f50:	003e0606 	br	1476c <__alt_data_end+0xfc01476c>
   14f54:	9023883a 	mov	r17,r18
   14f58:	9829883a 	mov	r20,r19
   14f5c:	04000084 	movi	r16,2
   14f60:	003c9206 	br	141ac <__alt_data_end+0xfc0141ac>
   14f64:	04000044 	movi	r16,1
   14f68:	dc000c15 	stw	r16,48(sp)
   14f6c:	dc000615 	stw	r16,24(sp)
   14f70:	dc002215 	stw	r16,136(sp)
   14f74:	e0001115 	stw	zero,68(fp)
   14f78:	000b883a 	mov	r5,zero
   14f7c:	003c6906 	br	14124 <__alt_data_end+0xfc014124>
   14f80:	3021883a 	mov	r16,r6
   14f84:	003ffb06 	br	14f74 <__alt_data_end+0xfc014f74>
   14f88:	1000021e 	bne	r2,zero,14f94 <_dtoa_r+0x11e0>
   14f8c:	4200004c 	andi	r8,r8,1
   14f90:	403e7d1e 	bne	r8,zero,14988 <__alt_data_end+0xfc014988>
   14f94:	01000c04 	movi	r4,48
   14f98:	00000106 	br	14fa0 <_dtoa_r+0x11ec>
   14f9c:	102f883a 	mov	r23,r2
   14fa0:	b8bfffc4 	addi	r2,r23,-1
   14fa4:	10c00007 	ldb	r3,0(r2)
   14fa8:	193ffc26 	beq	r3,r4,14f9c <__alt_data_end+0xfc014f9c>
   14fac:	003e8706 	br	149cc <__alt_data_end+0xfc0149cc>
   14fb0:	d8800517 	ldw	r2,20(sp)
   14fb4:	00a3c83a 	sub	r17,zero,r2
   14fb8:	8800a426 	beq	r17,zero,1524c <_dtoa_r+0x1498>
   14fbc:	888003cc 	andi	r2,r17,15
   14fc0:	100490fa 	slli	r2,r2,3
   14fc4:	00c000f4 	movhi	r3,3
   14fc8:	18ea4104 	addi	r3,r3,-22268
   14fcc:	1885883a 	add	r2,r3,r2
   14fd0:	11800017 	ldw	r6,0(r2)
   14fd4:	11c00117 	ldw	r7,4(r2)
   14fd8:	9009883a 	mov	r4,r18
   14fdc:	980b883a 	mov	r5,r19
   14fe0:	8823d13a 	srai	r17,r17,4
   14fe4:	001d96c0 	call	1d96c <__muldf3>
   14fe8:	d8800f15 	stw	r2,60(sp)
   14fec:	d8c01015 	stw	r3,64(sp)
   14ff0:	8800e826 	beq	r17,zero,15394 <_dtoa_r+0x15e0>
   14ff4:	050000f4 	movhi	r20,3
   14ff8:	a52a3704 	addi	r20,r20,-22308
   14ffc:	04000084 	movi	r16,2
   15000:	8980004c 	andi	r6,r17,1
   15004:	1009883a 	mov	r4,r2
   15008:	8823d07a 	srai	r17,r17,1
   1500c:	180b883a 	mov	r5,r3
   15010:	30000426 	beq	r6,zero,15024 <_dtoa_r+0x1270>
   15014:	a1800017 	ldw	r6,0(r20)
   15018:	a1c00117 	ldw	r7,4(r20)
   1501c:	84000044 	addi	r16,r16,1
   15020:	001d96c0 	call	1d96c <__muldf3>
   15024:	a5000204 	addi	r20,r20,8
   15028:	883ff51e 	bne	r17,zero,15000 <__alt_data_end+0xfc015000>
   1502c:	d8800f15 	stw	r2,60(sp)
   15030:	d8c01015 	stw	r3,64(sp)
   15034:	003c7606 	br	14210 <__alt_data_end+0xfc014210>
   15038:	00c00c04 	movi	r3,48
   1503c:	10c00005 	stb	r3,0(r2)
   15040:	d8c00517 	ldw	r3,20(sp)
   15044:	bd3fffc3 	ldbu	r20,-1(r23)
   15048:	18c00044 	addi	r3,r3,1
   1504c:	d8c00515 	stw	r3,20(sp)
   15050:	003db906 	br	14738 <__alt_data_end+0xfc014738>
   15054:	89400117 	ldw	r5,4(r17)
   15058:	e009883a 	mov	r4,fp
   1505c:	00169f00 	call	169f0 <_Balloc>
   15060:	89800417 	ldw	r6,16(r17)
   15064:	89400304 	addi	r5,r17,12
   15068:	11000304 	addi	r4,r2,12
   1506c:	31800084 	addi	r6,r6,2
   15070:	318d883a 	add	r6,r6,r6
   15074:	318d883a 	add	r6,r6,r6
   15078:	1027883a 	mov	r19,r2
   1507c:	000ea600 	call	ea60 <memcpy>
   15080:	01800044 	movi	r6,1
   15084:	980b883a 	mov	r5,r19
   15088:	e009883a 	mov	r4,fp
   1508c:	001722c0 	call	1722c <__lshift>
   15090:	1029883a 	mov	r20,r2
   15094:	003ecc06 	br	14bc8 <__alt_data_end+0xfc014bc8>
   15098:	00800e44 	movi	r2,57
   1509c:	90809026 	beq	r18,r2,152e0 <_dtoa_r+0x152c>
   150a0:	92000044 	addi	r8,r18,1
   150a4:	003f1f06 	br	14d24 <__alt_data_end+0xfc014d24>
   150a8:	9011883a 	mov	r8,r18
   150ac:	8825883a 	mov	r18,r17
   150b0:	a023883a 	mov	r17,r20
   150b4:	003e2906 	br	1495c <__alt_data_end+0xfc01495c>
   150b8:	002b883a 	mov	r21,zero
   150bc:	0023883a 	mov	r17,zero
   150c0:	003f5406 	br	14e14 <__alt_data_end+0xfc014e14>
   150c4:	61bfffc4 	addi	r6,r12,-1
   150c8:	300490fa 	slli	r2,r6,3
   150cc:	00c000f4 	movhi	r3,3
   150d0:	18ea4104 	addi	r3,r3,-22268
   150d4:	1885883a 	add	r2,r3,r2
   150d8:	11000017 	ldw	r4,0(r2)
   150dc:	11400117 	ldw	r5,4(r2)
   150e0:	d8800717 	ldw	r2,28(sp)
   150e4:	880f883a 	mov	r7,r17
   150e8:	d9801215 	stw	r6,72(sp)
   150ec:	800d883a 	mov	r6,r16
   150f0:	db001615 	stw	r12,88(sp)
   150f4:	15c00044 	addi	r23,r2,1
   150f8:	001d96c0 	call	1d96c <__muldf3>
   150fc:	d9401017 	ldw	r5,64(sp)
   15100:	d9000f17 	ldw	r4,60(sp)
   15104:	d8c01515 	stw	r3,84(sp)
   15108:	d8801415 	stw	r2,80(sp)
   1510c:	001ead40 	call	1ead4 <__fixdfsi>
   15110:	1009883a 	mov	r4,r2
   15114:	1021883a 	mov	r16,r2
   15118:	001eb540 	call	1eb54 <__floatsidf>
   1511c:	d9000f17 	ldw	r4,60(sp)
   15120:	d9401017 	ldw	r5,64(sp)
   15124:	100d883a 	mov	r6,r2
   15128:	180f883a 	mov	r7,r3
   1512c:	001e1d80 	call	1e1d8 <__subdf3>
   15130:	1829883a 	mov	r20,r3
   15134:	d8c00717 	ldw	r3,28(sp)
   15138:	84000c04 	addi	r16,r16,48
   1513c:	1023883a 	mov	r17,r2
   15140:	1c000005 	stb	r16,0(r3)
   15144:	db001617 	ldw	r12,88(sp)
   15148:	00800044 	movi	r2,1
   1514c:	60802226 	beq	r12,r2,151d8 <_dtoa_r+0x1424>
   15150:	d9c00717 	ldw	r7,28(sp)
   15154:	8805883a 	mov	r2,r17
   15158:	b82b883a 	mov	r21,r23
   1515c:	3b19883a 	add	r12,r7,r12
   15160:	6023883a 	mov	r17,r12
   15164:	a007883a 	mov	r3,r20
   15168:	dc800f15 	stw	r18,60(sp)
   1516c:	000d883a 	mov	r6,zero
   15170:	01d00934 	movhi	r7,16420
   15174:	1009883a 	mov	r4,r2
   15178:	180b883a 	mov	r5,r3
   1517c:	001d96c0 	call	1d96c <__muldf3>
   15180:	180b883a 	mov	r5,r3
   15184:	1009883a 	mov	r4,r2
   15188:	1829883a 	mov	r20,r3
   1518c:	1025883a 	mov	r18,r2
   15190:	001ead40 	call	1ead4 <__fixdfsi>
   15194:	1009883a 	mov	r4,r2
   15198:	1021883a 	mov	r16,r2
   1519c:	001eb540 	call	1eb54 <__floatsidf>
   151a0:	100d883a 	mov	r6,r2
   151a4:	180f883a 	mov	r7,r3
   151a8:	9009883a 	mov	r4,r18
   151ac:	a00b883a 	mov	r5,r20
   151b0:	84000c04 	addi	r16,r16,48
   151b4:	001e1d80 	call	1e1d8 <__subdf3>
   151b8:	ad400044 	addi	r21,r21,1
   151bc:	ac3fffc5 	stb	r16,-1(r21)
   151c0:	ac7fea1e 	bne	r21,r17,1516c <__alt_data_end+0xfc01516c>
   151c4:	1023883a 	mov	r17,r2
   151c8:	d8801217 	ldw	r2,72(sp)
   151cc:	dc800f17 	ldw	r18,60(sp)
   151d0:	1829883a 	mov	r20,r3
   151d4:	b8af883a 	add	r23,r23,r2
   151d8:	d9001417 	ldw	r4,80(sp)
   151dc:	d9401517 	ldw	r5,84(sp)
   151e0:	000d883a 	mov	r6,zero
   151e4:	01cff834 	movhi	r7,16352
   151e8:	001c4980 	call	1c498 <__adddf3>
   151ec:	880d883a 	mov	r6,r17
   151f0:	a00f883a 	mov	r7,r20
   151f4:	1009883a 	mov	r4,r2
   151f8:	180b883a 	mov	r5,r3
   151fc:	001d8780 	call	1d878 <__ledf2>
   15200:	10003e0e 	bge	r2,zero,152fc <_dtoa_r+0x1548>
   15204:	d9001317 	ldw	r4,76(sp)
   15208:	bd3fffc3 	ldbu	r20,-1(r23)
   1520c:	d9000515 	stw	r4,20(sp)
   15210:	003d3b06 	br	14700 <__alt_data_end+0xfc014700>
   15214:	0027883a 	mov	r19,zero
   15218:	003f1b06 	br	14e88 <__alt_data_end+0xfc014e88>
   1521c:	d8800817 	ldw	r2,32(sp)
   15220:	11e9c83a 	sub	r20,r2,r7
   15224:	0005883a 	mov	r2,zero
   15228:	003d5406 	br	1477c <__alt_data_end+0xfc01477c>
   1522c:	00800044 	movi	r2,1
   15230:	003dc706 	br	14950 <__alt_data_end+0xfc014950>
   15234:	d8c00217 	ldw	r3,8(sp)
   15238:	00800d84 	movi	r2,54
   1523c:	dd400a17 	ldw	r21,40(sp)
   15240:	10c5c83a 	sub	r2,r2,r3
   15244:	dd000817 	ldw	r20,32(sp)
   15248:	003d4c06 	br	1477c <__alt_data_end+0xfc01477c>
   1524c:	dc800f15 	stw	r18,60(sp)
   15250:	dcc01015 	stw	r19,64(sp)
   15254:	04000084 	movi	r16,2
   15258:	003bed06 	br	14210 <__alt_data_end+0xfc014210>
   1525c:	d9000617 	ldw	r4,24(sp)
   15260:	203f0d26 	beq	r4,zero,14e98 <__alt_data_end+0xfc014e98>
   15264:	d9800c17 	ldw	r6,48(sp)
   15268:	01bcab0e 	bge	zero,r6,14518 <__alt_data_end+0xfc014518>
   1526c:	d9401017 	ldw	r5,64(sp)
   15270:	d9000f17 	ldw	r4,60(sp)
   15274:	000d883a 	mov	r6,zero
   15278:	01d00934 	movhi	r7,16420
   1527c:	001d96c0 	call	1d96c <__muldf3>
   15280:	81000044 	addi	r4,r16,1
   15284:	d8800f15 	stw	r2,60(sp)
   15288:	d8c01015 	stw	r3,64(sp)
   1528c:	001eb540 	call	1eb54 <__floatsidf>
   15290:	d9800f17 	ldw	r6,60(sp)
   15294:	d9c01017 	ldw	r7,64(sp)
   15298:	1009883a 	mov	r4,r2
   1529c:	180b883a 	mov	r5,r3
   152a0:	001d96c0 	call	1d96c <__muldf3>
   152a4:	01d00734 	movhi	r7,16412
   152a8:	000d883a 	mov	r6,zero
   152ac:	1009883a 	mov	r4,r2
   152b0:	180b883a 	mov	r5,r3
   152b4:	001c4980 	call	1c498 <__adddf3>
   152b8:	d9c00517 	ldw	r7,20(sp)
   152bc:	047f3034 	movhi	r17,64704
   152c0:	1021883a 	mov	r16,r2
   152c4:	39ffffc4 	addi	r7,r7,-1
   152c8:	d9c01315 	stw	r7,76(sp)
   152cc:	1c63883a 	add	r17,r3,r17
   152d0:	db000c17 	ldw	r12,48(sp)
   152d4:	003bea06 	br	14280 <__alt_data_end+0xfc014280>
   152d8:	dc000915 	stw	r16,36(sp)
   152dc:	003e0e06 	br	14b18 <__alt_data_end+0xfc014b18>
   152e0:	01000e44 	movi	r4,57
   152e4:	8825883a 	mov	r18,r17
   152e8:	9dc00044 	addi	r23,r19,1
   152ec:	99000005 	stb	r4,0(r19)
   152f0:	a023883a 	mov	r17,r20
   152f4:	dc000915 	stw	r16,36(sp)
   152f8:	003da406 	br	1498c <__alt_data_end+0xfc01498c>
   152fc:	d9801417 	ldw	r6,80(sp)
   15300:	d9c01517 	ldw	r7,84(sp)
   15304:	0009883a 	mov	r4,zero
   15308:	014ff834 	movhi	r5,16352
   1530c:	001e1d80 	call	1e1d8 <__subdf3>
   15310:	880d883a 	mov	r6,r17
   15314:	a00f883a 	mov	r7,r20
   15318:	1009883a 	mov	r4,r2
   1531c:	180b883a 	mov	r5,r3
   15320:	001d79c0 	call	1d79c <__gedf2>
   15324:	00bc7c0e 	bge	zero,r2,14518 <__alt_data_end+0xfc014518>
   15328:	01000c04 	movi	r4,48
   1532c:	00000106 	br	15334 <_dtoa_r+0x1580>
   15330:	102f883a 	mov	r23,r2
   15334:	b8bfffc4 	addi	r2,r23,-1
   15338:	10c00007 	ldb	r3,0(r2)
   1533c:	193ffc26 	beq	r3,r4,15330 <__alt_data_end+0xfc015330>
   15340:	d9801317 	ldw	r6,76(sp)
   15344:	d9800515 	stw	r6,20(sp)
   15348:	003c4406 	br	1445c <__alt_data_end+0xfc01445c>
   1534c:	d9801317 	ldw	r6,76(sp)
   15350:	d9800515 	stw	r6,20(sp)
   15354:	003cea06 	br	14700 <__alt_data_end+0xfc014700>
   15358:	dd800f17 	ldw	r22,60(sp)
   1535c:	dcc01017 	ldw	r19,64(sp)
   15360:	dc801217 	ldw	r18,72(sp)
   15364:	003c6c06 	br	14518 <__alt_data_end+0xfc014518>
   15368:	903e031e 	bne	r18,zero,14b78 <__alt_data_end+0xfc014b78>
   1536c:	003ebb06 	br	14e5c <__alt_data_end+0xfc014e5c>
   15370:	103e6c1e 	bne	r2,zero,14d24 <__alt_data_end+0xfc014d24>
   15374:	4080004c 	andi	r2,r8,1
   15378:	103e6a26 	beq	r2,zero,14d24 <__alt_data_end+0xfc014d24>
   1537c:	003e6606 	br	14d18 <__alt_data_end+0xfc014d18>
   15380:	d8c00317 	ldw	r3,12(sp)
   15384:	00800084 	movi	r2,2
   15388:	10c02916 	blt	r2,r3,15430 <_dtoa_r+0x167c>
   1538c:	d9000c17 	ldw	r4,48(sp)
   15390:	003e8806 	br	14db4 <__alt_data_end+0xfc014db4>
   15394:	04000084 	movi	r16,2
   15398:	003b9d06 	br	14210 <__alt_data_end+0xfc014210>
   1539c:	d9001317 	ldw	r4,76(sp)
   153a0:	d9000515 	stw	r4,20(sp)
   153a4:	003cd606 	br	14700 <__alt_data_end+0xfc014700>
   153a8:	d8801317 	ldw	r2,76(sp)
   153ac:	d8800515 	stw	r2,20(sp)
   153b0:	003c2a06 	br	1445c <__alt_data_end+0xfc01445c>
   153b4:	d9800317 	ldw	r6,12(sp)
   153b8:	00800084 	movi	r2,2
   153bc:	11801516 	blt	r2,r6,15414 <_dtoa_r+0x1660>
   153c0:	d9c00c17 	ldw	r7,48(sp)
   153c4:	d9c00615 	stw	r7,24(sp)
   153c8:	003df706 	br	14ba8 <__alt_data_end+0xfc014ba8>
   153cc:	193d3926 	beq	r3,r4,148b4 <__alt_data_end+0xfc0148b4>
   153d0:	00c00f04 	movi	r3,60
   153d4:	1885c83a 	sub	r2,r3,r2
   153d8:	003ddf06 	br	14b58 <__alt_data_end+0xfc014b58>
   153dc:	e009883a 	mov	r4,fp
   153e0:	e0001115 	stw	zero,68(fp)
   153e4:	000b883a 	mov	r5,zero
   153e8:	00169f00 	call	169f0 <_Balloc>
   153ec:	d8800715 	stw	r2,28(sp)
   153f0:	d8c00717 	ldw	r3,28(sp)
   153f4:	00bfffc4 	movi	r2,-1
   153f8:	01000044 	movi	r4,1
   153fc:	d8800c15 	stw	r2,48(sp)
   15400:	e0c01015 	stw	r3,64(fp)
   15404:	d9000b15 	stw	r4,44(sp)
   15408:	d8800615 	stw	r2,24(sp)
   1540c:	d8002215 	stw	zero,136(sp)
   15410:	003c4106 	br	14518 <__alt_data_end+0xfc014518>
   15414:	d8c00c17 	ldw	r3,48(sp)
   15418:	d8c00615 	stw	r3,24(sp)
   1541c:	003e7006 	br	14de0 <__alt_data_end+0xfc014de0>
   15420:	04400044 	movi	r17,1
   15424:	003b2006 	br	140a8 <__alt_data_end+0xfc0140a8>
   15428:	000b883a 	mov	r5,zero
   1542c:	003b3d06 	br	14124 <__alt_data_end+0xfc014124>
   15430:	d8800c17 	ldw	r2,48(sp)
   15434:	d8800615 	stw	r2,24(sp)
   15438:	003e6906 	br	14de0 <__alt_data_end+0xfc014de0>

0001543c <__sflush_r>:
   1543c:	2880030b 	ldhu	r2,12(r5)
   15440:	defffb04 	addi	sp,sp,-20
   15444:	dcc00315 	stw	r19,12(sp)
   15448:	dc400115 	stw	r17,4(sp)
   1544c:	dfc00415 	stw	ra,16(sp)
   15450:	dc800215 	stw	r18,8(sp)
   15454:	dc000015 	stw	r16,0(sp)
   15458:	10c0020c 	andi	r3,r2,8
   1545c:	2823883a 	mov	r17,r5
   15460:	2027883a 	mov	r19,r4
   15464:	1800311e 	bne	r3,zero,1552c <__sflush_r+0xf0>
   15468:	28c00117 	ldw	r3,4(r5)
   1546c:	10820014 	ori	r2,r2,2048
   15470:	2880030d 	sth	r2,12(r5)
   15474:	00c04b0e 	bge	zero,r3,155a4 <__sflush_r+0x168>
   15478:	8a000a17 	ldw	r8,40(r17)
   1547c:	40002326 	beq	r8,zero,1550c <__sflush_r+0xd0>
   15480:	9c000017 	ldw	r16,0(r19)
   15484:	10c4000c 	andi	r3,r2,4096
   15488:	98000015 	stw	zero,0(r19)
   1548c:	18004826 	beq	r3,zero,155b0 <__sflush_r+0x174>
   15490:	89801417 	ldw	r6,80(r17)
   15494:	10c0010c 	andi	r3,r2,4
   15498:	18000626 	beq	r3,zero,154b4 <__sflush_r+0x78>
   1549c:	88c00117 	ldw	r3,4(r17)
   154a0:	88800c17 	ldw	r2,48(r17)
   154a4:	30cdc83a 	sub	r6,r6,r3
   154a8:	10000226 	beq	r2,zero,154b4 <__sflush_r+0x78>
   154ac:	88800f17 	ldw	r2,60(r17)
   154b0:	308dc83a 	sub	r6,r6,r2
   154b4:	89400717 	ldw	r5,28(r17)
   154b8:	000f883a 	mov	r7,zero
   154bc:	9809883a 	mov	r4,r19
   154c0:	403ee83a 	callr	r8
   154c4:	00ffffc4 	movi	r3,-1
   154c8:	10c04426 	beq	r2,r3,155dc <__sflush_r+0x1a0>
   154cc:	88c0030b 	ldhu	r3,12(r17)
   154d0:	89000417 	ldw	r4,16(r17)
   154d4:	88000115 	stw	zero,4(r17)
   154d8:	197dffcc 	andi	r5,r3,63487
   154dc:	8940030d 	sth	r5,12(r17)
   154e0:	89000015 	stw	r4,0(r17)
   154e4:	18c4000c 	andi	r3,r3,4096
   154e8:	18002c1e 	bne	r3,zero,1559c <__sflush_r+0x160>
   154ec:	89400c17 	ldw	r5,48(r17)
   154f0:	9c000015 	stw	r16,0(r19)
   154f4:	28000526 	beq	r5,zero,1550c <__sflush_r+0xd0>
   154f8:	88801004 	addi	r2,r17,64
   154fc:	28800226 	beq	r5,r2,15508 <__sflush_r+0xcc>
   15500:	9809883a 	mov	r4,r19
   15504:	0015bb80 	call	15bb8 <_free_r>
   15508:	88000c15 	stw	zero,48(r17)
   1550c:	0005883a 	mov	r2,zero
   15510:	dfc00417 	ldw	ra,16(sp)
   15514:	dcc00317 	ldw	r19,12(sp)
   15518:	dc800217 	ldw	r18,8(sp)
   1551c:	dc400117 	ldw	r17,4(sp)
   15520:	dc000017 	ldw	r16,0(sp)
   15524:	dec00504 	addi	sp,sp,20
   15528:	f800283a 	ret
   1552c:	2c800417 	ldw	r18,16(r5)
   15530:	903ff626 	beq	r18,zero,1550c <__alt_data_end+0xfc01550c>
   15534:	2c000017 	ldw	r16,0(r5)
   15538:	108000cc 	andi	r2,r2,3
   1553c:	2c800015 	stw	r18,0(r5)
   15540:	84a1c83a 	sub	r16,r16,r18
   15544:	1000131e 	bne	r2,zero,15594 <__sflush_r+0x158>
   15548:	28800517 	ldw	r2,20(r5)
   1554c:	88800215 	stw	r2,8(r17)
   15550:	04000316 	blt	zero,r16,15560 <__sflush_r+0x124>
   15554:	003fed06 	br	1550c <__alt_data_end+0xfc01550c>
   15558:	90a5883a 	add	r18,r18,r2
   1555c:	043feb0e 	bge	zero,r16,1550c <__alt_data_end+0xfc01550c>
   15560:	88800917 	ldw	r2,36(r17)
   15564:	89400717 	ldw	r5,28(r17)
   15568:	800f883a 	mov	r7,r16
   1556c:	900d883a 	mov	r6,r18
   15570:	9809883a 	mov	r4,r19
   15574:	103ee83a 	callr	r2
   15578:	80a1c83a 	sub	r16,r16,r2
   1557c:	00bff616 	blt	zero,r2,15558 <__alt_data_end+0xfc015558>
   15580:	88c0030b 	ldhu	r3,12(r17)
   15584:	00bfffc4 	movi	r2,-1
   15588:	18c01014 	ori	r3,r3,64
   1558c:	88c0030d 	sth	r3,12(r17)
   15590:	003fdf06 	br	15510 <__alt_data_end+0xfc015510>
   15594:	0005883a 	mov	r2,zero
   15598:	003fec06 	br	1554c <__alt_data_end+0xfc01554c>
   1559c:	88801415 	stw	r2,80(r17)
   155a0:	003fd206 	br	154ec <__alt_data_end+0xfc0154ec>
   155a4:	28c00f17 	ldw	r3,60(r5)
   155a8:	00ffb316 	blt	zero,r3,15478 <__alt_data_end+0xfc015478>
   155ac:	003fd706 	br	1550c <__alt_data_end+0xfc01550c>
   155b0:	89400717 	ldw	r5,28(r17)
   155b4:	000d883a 	mov	r6,zero
   155b8:	01c00044 	movi	r7,1
   155bc:	9809883a 	mov	r4,r19
   155c0:	403ee83a 	callr	r8
   155c4:	100d883a 	mov	r6,r2
   155c8:	00bfffc4 	movi	r2,-1
   155cc:	30801426 	beq	r6,r2,15620 <__sflush_r+0x1e4>
   155d0:	8880030b 	ldhu	r2,12(r17)
   155d4:	8a000a17 	ldw	r8,40(r17)
   155d8:	003fae06 	br	15494 <__alt_data_end+0xfc015494>
   155dc:	98c00017 	ldw	r3,0(r19)
   155e0:	183fba26 	beq	r3,zero,154cc <__alt_data_end+0xfc0154cc>
   155e4:	01000744 	movi	r4,29
   155e8:	19000626 	beq	r3,r4,15604 <__sflush_r+0x1c8>
   155ec:	01000584 	movi	r4,22
   155f0:	19000426 	beq	r3,r4,15604 <__sflush_r+0x1c8>
   155f4:	88c0030b 	ldhu	r3,12(r17)
   155f8:	18c01014 	ori	r3,r3,64
   155fc:	88c0030d 	sth	r3,12(r17)
   15600:	003fc306 	br	15510 <__alt_data_end+0xfc015510>
   15604:	8880030b 	ldhu	r2,12(r17)
   15608:	88c00417 	ldw	r3,16(r17)
   1560c:	88000115 	stw	zero,4(r17)
   15610:	10bdffcc 	andi	r2,r2,63487
   15614:	8880030d 	sth	r2,12(r17)
   15618:	88c00015 	stw	r3,0(r17)
   1561c:	003fb306 	br	154ec <__alt_data_end+0xfc0154ec>
   15620:	98800017 	ldw	r2,0(r19)
   15624:	103fea26 	beq	r2,zero,155d0 <__alt_data_end+0xfc0155d0>
   15628:	00c00744 	movi	r3,29
   1562c:	10c00226 	beq	r2,r3,15638 <__sflush_r+0x1fc>
   15630:	00c00584 	movi	r3,22
   15634:	10c0031e 	bne	r2,r3,15644 <__sflush_r+0x208>
   15638:	9c000015 	stw	r16,0(r19)
   1563c:	0005883a 	mov	r2,zero
   15640:	003fb306 	br	15510 <__alt_data_end+0xfc015510>
   15644:	88c0030b 	ldhu	r3,12(r17)
   15648:	3005883a 	mov	r2,r6
   1564c:	18c01014 	ori	r3,r3,64
   15650:	88c0030d 	sth	r3,12(r17)
   15654:	003fae06 	br	15510 <__alt_data_end+0xfc015510>

00015658 <_fflush_r>:
   15658:	defffd04 	addi	sp,sp,-12
   1565c:	dc000115 	stw	r16,4(sp)
   15660:	dfc00215 	stw	ra,8(sp)
   15664:	2021883a 	mov	r16,r4
   15668:	20000226 	beq	r4,zero,15674 <_fflush_r+0x1c>
   1566c:	20800e17 	ldw	r2,56(r4)
   15670:	10000c26 	beq	r2,zero,156a4 <_fflush_r+0x4c>
   15674:	2880030f 	ldh	r2,12(r5)
   15678:	1000051e 	bne	r2,zero,15690 <_fflush_r+0x38>
   1567c:	0005883a 	mov	r2,zero
   15680:	dfc00217 	ldw	ra,8(sp)
   15684:	dc000117 	ldw	r16,4(sp)
   15688:	dec00304 	addi	sp,sp,12
   1568c:	f800283a 	ret
   15690:	8009883a 	mov	r4,r16
   15694:	dfc00217 	ldw	ra,8(sp)
   15698:	dc000117 	ldw	r16,4(sp)
   1569c:	dec00304 	addi	sp,sp,12
   156a0:	001543c1 	jmpi	1543c <__sflush_r>
   156a4:	d9400015 	stw	r5,0(sp)
   156a8:	0015a440 	call	15a44 <__sinit>
   156ac:	d9400017 	ldw	r5,0(sp)
   156b0:	003ff006 	br	15674 <__alt_data_end+0xfc015674>

000156b4 <fflush>:
   156b4:	20000526 	beq	r4,zero,156cc <fflush+0x18>
   156b8:	008000f4 	movhi	r2,3
   156bc:	10b70504 	addi	r2,r2,-9196
   156c0:	200b883a 	mov	r5,r4
   156c4:	11000017 	ldw	r4,0(r2)
   156c8:	00156581 	jmpi	15658 <_fflush_r>
   156cc:	008000f4 	movhi	r2,3
   156d0:	10b70404 	addi	r2,r2,-9200
   156d4:	11000017 	ldw	r4,0(r2)
   156d8:	01400074 	movhi	r5,1
   156dc:	29559604 	addi	r5,r5,22104
   156e0:	00164541 	jmpi	16454 <_fwalk_reent>

000156e4 <__fp_unlock>:
   156e4:	0005883a 	mov	r2,zero
   156e8:	f800283a 	ret

000156ec <_cleanup_r>:
   156ec:	014000b4 	movhi	r5,2
   156f0:	296c9d04 	addi	r5,r5,-19852
   156f4:	00164541 	jmpi	16454 <_fwalk_reent>

000156f8 <__sinit.part.1>:
   156f8:	defff704 	addi	sp,sp,-36
   156fc:	00c00074 	movhi	r3,1
   15700:	dfc00815 	stw	ra,32(sp)
   15704:	ddc00715 	stw	r23,28(sp)
   15708:	dd800615 	stw	r22,24(sp)
   1570c:	dd400515 	stw	r21,20(sp)
   15710:	dd000415 	stw	r20,16(sp)
   15714:	dcc00315 	stw	r19,12(sp)
   15718:	dc800215 	stw	r18,8(sp)
   1571c:	dc400115 	stw	r17,4(sp)
   15720:	dc000015 	stw	r16,0(sp)
   15724:	18d5bb04 	addi	r3,r3,22252
   15728:	24000117 	ldw	r16,4(r4)
   1572c:	20c00f15 	stw	r3,60(r4)
   15730:	2080bb04 	addi	r2,r4,748
   15734:	00c000c4 	movi	r3,3
   15738:	20c0b915 	stw	r3,740(r4)
   1573c:	2080ba15 	stw	r2,744(r4)
   15740:	2000b815 	stw	zero,736(r4)
   15744:	05c00204 	movi	r23,8
   15748:	00800104 	movi	r2,4
   1574c:	2025883a 	mov	r18,r4
   15750:	b80d883a 	mov	r6,r23
   15754:	81001704 	addi	r4,r16,92
   15758:	000b883a 	mov	r5,zero
   1575c:	80000015 	stw	zero,0(r16)
   15760:	80000115 	stw	zero,4(r16)
   15764:	80000215 	stw	zero,8(r16)
   15768:	8080030d 	sth	r2,12(r16)
   1576c:	80001915 	stw	zero,100(r16)
   15770:	8000038d 	sth	zero,14(r16)
   15774:	80000415 	stw	zero,16(r16)
   15778:	80000515 	stw	zero,20(r16)
   1577c:	80000615 	stw	zero,24(r16)
   15780:	000eba80 	call	eba8 <memset>
   15784:	058000b4 	movhi	r22,2
   15788:	94400217 	ldw	r17,8(r18)
   1578c:	054000b4 	movhi	r21,2
   15790:	050000b4 	movhi	r20,2
   15794:	04c000b4 	movhi	r19,2
   15798:	b5a07a04 	addi	r22,r22,-32280
   1579c:	ad609104 	addi	r21,r21,-32188
   157a0:	a520b004 	addi	r20,r20,-32064
   157a4:	9ce0c704 	addi	r19,r19,-31972
   157a8:	85800815 	stw	r22,32(r16)
   157ac:	85400915 	stw	r21,36(r16)
   157b0:	85000a15 	stw	r20,40(r16)
   157b4:	84c00b15 	stw	r19,44(r16)
   157b8:	84000715 	stw	r16,28(r16)
   157bc:	00800284 	movi	r2,10
   157c0:	8880030d 	sth	r2,12(r17)
   157c4:	00800044 	movi	r2,1
   157c8:	b80d883a 	mov	r6,r23
   157cc:	89001704 	addi	r4,r17,92
   157d0:	000b883a 	mov	r5,zero
   157d4:	88000015 	stw	zero,0(r17)
   157d8:	88000115 	stw	zero,4(r17)
   157dc:	88000215 	stw	zero,8(r17)
   157e0:	88001915 	stw	zero,100(r17)
   157e4:	8880038d 	sth	r2,14(r17)
   157e8:	88000415 	stw	zero,16(r17)
   157ec:	88000515 	stw	zero,20(r17)
   157f0:	88000615 	stw	zero,24(r17)
   157f4:	000eba80 	call	eba8 <memset>
   157f8:	94000317 	ldw	r16,12(r18)
   157fc:	00800484 	movi	r2,18
   15800:	8c400715 	stw	r17,28(r17)
   15804:	8d800815 	stw	r22,32(r17)
   15808:	8d400915 	stw	r21,36(r17)
   1580c:	8d000a15 	stw	r20,40(r17)
   15810:	8cc00b15 	stw	r19,44(r17)
   15814:	8080030d 	sth	r2,12(r16)
   15818:	00800084 	movi	r2,2
   1581c:	80000015 	stw	zero,0(r16)
   15820:	80000115 	stw	zero,4(r16)
   15824:	80000215 	stw	zero,8(r16)
   15828:	80001915 	stw	zero,100(r16)
   1582c:	8080038d 	sth	r2,14(r16)
   15830:	80000415 	stw	zero,16(r16)
   15834:	80000515 	stw	zero,20(r16)
   15838:	80000615 	stw	zero,24(r16)
   1583c:	b80d883a 	mov	r6,r23
   15840:	000b883a 	mov	r5,zero
   15844:	81001704 	addi	r4,r16,92
   15848:	000eba80 	call	eba8 <memset>
   1584c:	00800044 	movi	r2,1
   15850:	84000715 	stw	r16,28(r16)
   15854:	85800815 	stw	r22,32(r16)
   15858:	85400915 	stw	r21,36(r16)
   1585c:	85000a15 	stw	r20,40(r16)
   15860:	84c00b15 	stw	r19,44(r16)
   15864:	90800e15 	stw	r2,56(r18)
   15868:	dfc00817 	ldw	ra,32(sp)
   1586c:	ddc00717 	ldw	r23,28(sp)
   15870:	dd800617 	ldw	r22,24(sp)
   15874:	dd400517 	ldw	r21,20(sp)
   15878:	dd000417 	ldw	r20,16(sp)
   1587c:	dcc00317 	ldw	r19,12(sp)
   15880:	dc800217 	ldw	r18,8(sp)
   15884:	dc400117 	ldw	r17,4(sp)
   15888:	dc000017 	ldw	r16,0(sp)
   1588c:	dec00904 	addi	sp,sp,36
   15890:	f800283a 	ret

00015894 <__fp_lock>:
   15894:	0005883a 	mov	r2,zero
   15898:	f800283a 	ret

0001589c <__sfmoreglue>:
   1589c:	defffc04 	addi	sp,sp,-16
   158a0:	dc800215 	stw	r18,8(sp)
   158a4:	2825883a 	mov	r18,r5
   158a8:	dc000015 	stw	r16,0(sp)
   158ac:	01401a04 	movi	r5,104
   158b0:	2021883a 	mov	r16,r4
   158b4:	913fffc4 	addi	r4,r18,-1
   158b8:	dfc00315 	stw	ra,12(sp)
   158bc:	dc400115 	stw	r17,4(sp)
   158c0:	000ccac0 	call	ccac <__mulsi3>
   158c4:	8009883a 	mov	r4,r16
   158c8:	11401d04 	addi	r5,r2,116
   158cc:	1023883a 	mov	r17,r2
   158d0:	000e2540 	call	e254 <_malloc_r>
   158d4:	1021883a 	mov	r16,r2
   158d8:	10000726 	beq	r2,zero,158f8 <__sfmoreglue+0x5c>
   158dc:	11000304 	addi	r4,r2,12
   158e0:	10000015 	stw	zero,0(r2)
   158e4:	14800115 	stw	r18,4(r2)
   158e8:	11000215 	stw	r4,8(r2)
   158ec:	89801a04 	addi	r6,r17,104
   158f0:	000b883a 	mov	r5,zero
   158f4:	000eba80 	call	eba8 <memset>
   158f8:	8005883a 	mov	r2,r16
   158fc:	dfc00317 	ldw	ra,12(sp)
   15900:	dc800217 	ldw	r18,8(sp)
   15904:	dc400117 	ldw	r17,4(sp)
   15908:	dc000017 	ldw	r16,0(sp)
   1590c:	dec00404 	addi	sp,sp,16
   15910:	f800283a 	ret

00015914 <__sfp>:
   15914:	defffb04 	addi	sp,sp,-20
   15918:	dc000015 	stw	r16,0(sp)
   1591c:	040000f4 	movhi	r16,3
   15920:	84370404 	addi	r16,r16,-9200
   15924:	dcc00315 	stw	r19,12(sp)
   15928:	2027883a 	mov	r19,r4
   1592c:	81000017 	ldw	r4,0(r16)
   15930:	dfc00415 	stw	ra,16(sp)
   15934:	dc800215 	stw	r18,8(sp)
   15938:	20800e17 	ldw	r2,56(r4)
   1593c:	dc400115 	stw	r17,4(sp)
   15940:	1000021e 	bne	r2,zero,1594c <__sfp+0x38>
   15944:	00156f80 	call	156f8 <__sinit.part.1>
   15948:	81000017 	ldw	r4,0(r16)
   1594c:	2480b804 	addi	r18,r4,736
   15950:	047fffc4 	movi	r17,-1
   15954:	91000117 	ldw	r4,4(r18)
   15958:	94000217 	ldw	r16,8(r18)
   1595c:	213fffc4 	addi	r4,r4,-1
   15960:	20000a16 	blt	r4,zero,1598c <__sfp+0x78>
   15964:	8080030f 	ldh	r2,12(r16)
   15968:	10000c26 	beq	r2,zero,1599c <__sfp+0x88>
   1596c:	80c01d04 	addi	r3,r16,116
   15970:	00000206 	br	1597c <__sfp+0x68>
   15974:	18bfe60f 	ldh	r2,-104(r3)
   15978:	10000826 	beq	r2,zero,1599c <__sfp+0x88>
   1597c:	213fffc4 	addi	r4,r4,-1
   15980:	1c3ffd04 	addi	r16,r3,-12
   15984:	18c01a04 	addi	r3,r3,104
   15988:	247ffa1e 	bne	r4,r17,15974 <__alt_data_end+0xfc015974>
   1598c:	90800017 	ldw	r2,0(r18)
   15990:	10001d26 	beq	r2,zero,15a08 <__sfp+0xf4>
   15994:	1025883a 	mov	r18,r2
   15998:	003fee06 	br	15954 <__alt_data_end+0xfc015954>
   1599c:	00bfffc4 	movi	r2,-1
   159a0:	8080038d 	sth	r2,14(r16)
   159a4:	00800044 	movi	r2,1
   159a8:	8080030d 	sth	r2,12(r16)
   159ac:	80001915 	stw	zero,100(r16)
   159b0:	80000015 	stw	zero,0(r16)
   159b4:	80000215 	stw	zero,8(r16)
   159b8:	80000115 	stw	zero,4(r16)
   159bc:	80000415 	stw	zero,16(r16)
   159c0:	80000515 	stw	zero,20(r16)
   159c4:	80000615 	stw	zero,24(r16)
   159c8:	01800204 	movi	r6,8
   159cc:	000b883a 	mov	r5,zero
   159d0:	81001704 	addi	r4,r16,92
   159d4:	000eba80 	call	eba8 <memset>
   159d8:	8005883a 	mov	r2,r16
   159dc:	80000c15 	stw	zero,48(r16)
   159e0:	80000d15 	stw	zero,52(r16)
   159e4:	80001115 	stw	zero,68(r16)
   159e8:	80001215 	stw	zero,72(r16)
   159ec:	dfc00417 	ldw	ra,16(sp)
   159f0:	dcc00317 	ldw	r19,12(sp)
   159f4:	dc800217 	ldw	r18,8(sp)
   159f8:	dc400117 	ldw	r17,4(sp)
   159fc:	dc000017 	ldw	r16,0(sp)
   15a00:	dec00504 	addi	sp,sp,20
   15a04:	f800283a 	ret
   15a08:	01400104 	movi	r5,4
   15a0c:	9809883a 	mov	r4,r19
   15a10:	001589c0 	call	1589c <__sfmoreglue>
   15a14:	90800015 	stw	r2,0(r18)
   15a18:	103fde1e 	bne	r2,zero,15994 <__alt_data_end+0xfc015994>
   15a1c:	00800304 	movi	r2,12
   15a20:	98800015 	stw	r2,0(r19)
   15a24:	0005883a 	mov	r2,zero
   15a28:	003ff006 	br	159ec <__alt_data_end+0xfc0159ec>

00015a2c <_cleanup>:
   15a2c:	008000f4 	movhi	r2,3
   15a30:	10b70404 	addi	r2,r2,-9200
   15a34:	11000017 	ldw	r4,0(r2)
   15a38:	014000b4 	movhi	r5,2
   15a3c:	296c9d04 	addi	r5,r5,-19852
   15a40:	00164541 	jmpi	16454 <_fwalk_reent>

00015a44 <__sinit>:
   15a44:	20800e17 	ldw	r2,56(r4)
   15a48:	10000126 	beq	r2,zero,15a50 <__sinit+0xc>
   15a4c:	f800283a 	ret
   15a50:	00156f81 	jmpi	156f8 <__sinit.part.1>

00015a54 <__sfp_lock_acquire>:
   15a54:	f800283a 	ret

00015a58 <__sfp_lock_release>:
   15a58:	f800283a 	ret

00015a5c <__sinit_lock_acquire>:
   15a5c:	f800283a 	ret

00015a60 <__sinit_lock_release>:
   15a60:	f800283a 	ret

00015a64 <__fp_lock_all>:
   15a64:	008000f4 	movhi	r2,3
   15a68:	10b70504 	addi	r2,r2,-9196
   15a6c:	11000017 	ldw	r4,0(r2)
   15a70:	01400074 	movhi	r5,1
   15a74:	29562504 	addi	r5,r5,22676
   15a78:	00163901 	jmpi	16390 <_fwalk>

00015a7c <__fp_unlock_all>:
   15a7c:	008000f4 	movhi	r2,3
   15a80:	10b70504 	addi	r2,r2,-9196
   15a84:	11000017 	ldw	r4,0(r2)
   15a88:	01400074 	movhi	r5,1
   15a8c:	2955b904 	addi	r5,r5,22244
   15a90:	00163901 	jmpi	16390 <_fwalk>

00015a94 <_malloc_trim_r>:
   15a94:	defffb04 	addi	sp,sp,-20
   15a98:	dcc00315 	stw	r19,12(sp)
   15a9c:	04c000f4 	movhi	r19,3
   15aa0:	dc800215 	stw	r18,8(sp)
   15aa4:	dc400115 	stw	r17,4(sp)
   15aa8:	dc000015 	stw	r16,0(sp)
   15aac:	dfc00415 	stw	ra,16(sp)
   15ab0:	2821883a 	mov	r16,r5
   15ab4:	9ceba404 	addi	r19,r19,-20848
   15ab8:	2025883a 	mov	r18,r4
   15abc:	001f4340 	call	1f434 <__malloc_lock>
   15ac0:	98800217 	ldw	r2,8(r19)
   15ac4:	14400117 	ldw	r17,4(r2)
   15ac8:	00bfff04 	movi	r2,-4
   15acc:	88a2703a 	and	r17,r17,r2
   15ad0:	8c21c83a 	sub	r16,r17,r16
   15ad4:	8403fbc4 	addi	r16,r16,4079
   15ad8:	8020d33a 	srli	r16,r16,12
   15adc:	0083ffc4 	movi	r2,4095
   15ae0:	843fffc4 	addi	r16,r16,-1
   15ae4:	8020933a 	slli	r16,r16,12
   15ae8:	1400060e 	bge	r2,r16,15b04 <_malloc_trim_r+0x70>
   15aec:	000b883a 	mov	r5,zero
   15af0:	9009883a 	mov	r4,r18
   15af4:	000ee300 	call	ee30 <_sbrk_r>
   15af8:	98c00217 	ldw	r3,8(r19)
   15afc:	1c47883a 	add	r3,r3,r17
   15b00:	10c00a26 	beq	r2,r3,15b2c <_malloc_trim_r+0x98>
   15b04:	9009883a 	mov	r4,r18
   15b08:	001f4580 	call	1f458 <__malloc_unlock>
   15b0c:	0005883a 	mov	r2,zero
   15b10:	dfc00417 	ldw	ra,16(sp)
   15b14:	dcc00317 	ldw	r19,12(sp)
   15b18:	dc800217 	ldw	r18,8(sp)
   15b1c:	dc400117 	ldw	r17,4(sp)
   15b20:	dc000017 	ldw	r16,0(sp)
   15b24:	dec00504 	addi	sp,sp,20
   15b28:	f800283a 	ret
   15b2c:	040bc83a 	sub	r5,zero,r16
   15b30:	9009883a 	mov	r4,r18
   15b34:	000ee300 	call	ee30 <_sbrk_r>
   15b38:	00ffffc4 	movi	r3,-1
   15b3c:	10c00d26 	beq	r2,r3,15b74 <_malloc_trim_r+0xe0>
   15b40:	00c000f4 	movhi	r3,3
   15b44:	18c3f204 	addi	r3,r3,4040
   15b48:	18800017 	ldw	r2,0(r3)
   15b4c:	99000217 	ldw	r4,8(r19)
   15b50:	8c23c83a 	sub	r17,r17,r16
   15b54:	8c400054 	ori	r17,r17,1
   15b58:	1421c83a 	sub	r16,r2,r16
   15b5c:	24400115 	stw	r17,4(r4)
   15b60:	9009883a 	mov	r4,r18
   15b64:	1c000015 	stw	r16,0(r3)
   15b68:	001f4580 	call	1f458 <__malloc_unlock>
   15b6c:	00800044 	movi	r2,1
   15b70:	003fe706 	br	15b10 <__alt_data_end+0xfc015b10>
   15b74:	000b883a 	mov	r5,zero
   15b78:	9009883a 	mov	r4,r18
   15b7c:	000ee300 	call	ee30 <_sbrk_r>
   15b80:	99000217 	ldw	r4,8(r19)
   15b84:	014003c4 	movi	r5,15
   15b88:	1107c83a 	sub	r3,r2,r4
   15b8c:	28ffdd0e 	bge	r5,r3,15b04 <__alt_data_end+0xfc015b04>
   15b90:	014000f4 	movhi	r5,3
   15b94:	29770604 	addi	r5,r5,-9192
   15b98:	29400017 	ldw	r5,0(r5)
   15b9c:	18c00054 	ori	r3,r3,1
   15ba0:	20c00115 	stw	r3,4(r4)
   15ba4:	00c000f4 	movhi	r3,3
   15ba8:	1145c83a 	sub	r2,r2,r5
   15bac:	18c3f204 	addi	r3,r3,4040
   15bb0:	18800015 	stw	r2,0(r3)
   15bb4:	003fd306 	br	15b04 <__alt_data_end+0xfc015b04>

00015bb8 <_free_r>:
   15bb8:	28004126 	beq	r5,zero,15cc0 <_free_r+0x108>
   15bbc:	defffd04 	addi	sp,sp,-12
   15bc0:	dc400115 	stw	r17,4(sp)
   15bc4:	dc000015 	stw	r16,0(sp)
   15bc8:	2023883a 	mov	r17,r4
   15bcc:	2821883a 	mov	r16,r5
   15bd0:	dfc00215 	stw	ra,8(sp)
   15bd4:	001f4340 	call	1f434 <__malloc_lock>
   15bd8:	81ffff17 	ldw	r7,-4(r16)
   15bdc:	00bfff84 	movi	r2,-2
   15be0:	010000f4 	movhi	r4,3
   15be4:	81bffe04 	addi	r6,r16,-8
   15be8:	3884703a 	and	r2,r7,r2
   15bec:	212ba404 	addi	r4,r4,-20848
   15bf0:	308b883a 	add	r5,r6,r2
   15bf4:	2a400117 	ldw	r9,4(r5)
   15bf8:	22000217 	ldw	r8,8(r4)
   15bfc:	00ffff04 	movi	r3,-4
   15c00:	48c6703a 	and	r3,r9,r3
   15c04:	2a005726 	beq	r5,r8,15d64 <_free_r+0x1ac>
   15c08:	28c00115 	stw	r3,4(r5)
   15c0c:	39c0004c 	andi	r7,r7,1
   15c10:	3800091e 	bne	r7,zero,15c38 <_free_r+0x80>
   15c14:	823ffe17 	ldw	r8,-8(r16)
   15c18:	22400204 	addi	r9,r4,8
   15c1c:	320dc83a 	sub	r6,r6,r8
   15c20:	31c00217 	ldw	r7,8(r6)
   15c24:	1205883a 	add	r2,r2,r8
   15c28:	3a406526 	beq	r7,r9,15dc0 <_free_r+0x208>
   15c2c:	32000317 	ldw	r8,12(r6)
   15c30:	3a000315 	stw	r8,12(r7)
   15c34:	41c00215 	stw	r7,8(r8)
   15c38:	28cf883a 	add	r7,r5,r3
   15c3c:	39c00117 	ldw	r7,4(r7)
   15c40:	39c0004c 	andi	r7,r7,1
   15c44:	38003a26 	beq	r7,zero,15d30 <_free_r+0x178>
   15c48:	10c00054 	ori	r3,r2,1
   15c4c:	30c00115 	stw	r3,4(r6)
   15c50:	3087883a 	add	r3,r6,r2
   15c54:	18800015 	stw	r2,0(r3)
   15c58:	00c07fc4 	movi	r3,511
   15c5c:	18801936 	bltu	r3,r2,15cc4 <_free_r+0x10c>
   15c60:	1004d0fa 	srli	r2,r2,3
   15c64:	01c00044 	movi	r7,1
   15c68:	21400117 	ldw	r5,4(r4)
   15c6c:	10c00044 	addi	r3,r2,1
   15c70:	18c7883a 	add	r3,r3,r3
   15c74:	1005d0ba 	srai	r2,r2,2
   15c78:	18c7883a 	add	r3,r3,r3
   15c7c:	18c7883a 	add	r3,r3,r3
   15c80:	1907883a 	add	r3,r3,r4
   15c84:	3884983a 	sll	r2,r7,r2
   15c88:	19c00017 	ldw	r7,0(r3)
   15c8c:	1a3ffe04 	addi	r8,r3,-8
   15c90:	1144b03a 	or	r2,r2,r5
   15c94:	32000315 	stw	r8,12(r6)
   15c98:	31c00215 	stw	r7,8(r6)
   15c9c:	20800115 	stw	r2,4(r4)
   15ca0:	19800015 	stw	r6,0(r3)
   15ca4:	39800315 	stw	r6,12(r7)
   15ca8:	8809883a 	mov	r4,r17
   15cac:	dfc00217 	ldw	ra,8(sp)
   15cb0:	dc400117 	ldw	r17,4(sp)
   15cb4:	dc000017 	ldw	r16,0(sp)
   15cb8:	dec00304 	addi	sp,sp,12
   15cbc:	001f4581 	jmpi	1f458 <__malloc_unlock>
   15cc0:	f800283a 	ret
   15cc4:	100ad27a 	srli	r5,r2,9
   15cc8:	00c00104 	movi	r3,4
   15ccc:	19404a36 	bltu	r3,r5,15df8 <_free_r+0x240>
   15cd0:	100ad1ba 	srli	r5,r2,6
   15cd4:	28c00e44 	addi	r3,r5,57
   15cd8:	18c7883a 	add	r3,r3,r3
   15cdc:	29400e04 	addi	r5,r5,56
   15ce0:	18c7883a 	add	r3,r3,r3
   15ce4:	18c7883a 	add	r3,r3,r3
   15ce8:	1909883a 	add	r4,r3,r4
   15cec:	20c00017 	ldw	r3,0(r4)
   15cf0:	01c000f4 	movhi	r7,3
   15cf4:	213ffe04 	addi	r4,r4,-8
   15cf8:	39eba404 	addi	r7,r7,-20848
   15cfc:	20c04426 	beq	r4,r3,15e10 <_free_r+0x258>
   15d00:	01ffff04 	movi	r7,-4
   15d04:	19400117 	ldw	r5,4(r3)
   15d08:	29ca703a 	and	r5,r5,r7
   15d0c:	1140022e 	bgeu	r2,r5,15d18 <_free_r+0x160>
   15d10:	18c00217 	ldw	r3,8(r3)
   15d14:	20fffb1e 	bne	r4,r3,15d04 <__alt_data_end+0xfc015d04>
   15d18:	19000317 	ldw	r4,12(r3)
   15d1c:	31000315 	stw	r4,12(r6)
   15d20:	30c00215 	stw	r3,8(r6)
   15d24:	21800215 	stw	r6,8(r4)
   15d28:	19800315 	stw	r6,12(r3)
   15d2c:	003fde06 	br	15ca8 <__alt_data_end+0xfc015ca8>
   15d30:	29c00217 	ldw	r7,8(r5)
   15d34:	10c5883a 	add	r2,r2,r3
   15d38:	00c000f4 	movhi	r3,3
   15d3c:	18eba604 	addi	r3,r3,-20840
   15d40:	38c03b26 	beq	r7,r3,15e30 <_free_r+0x278>
   15d44:	2a000317 	ldw	r8,12(r5)
   15d48:	11400054 	ori	r5,r2,1
   15d4c:	3087883a 	add	r3,r6,r2
   15d50:	3a000315 	stw	r8,12(r7)
   15d54:	41c00215 	stw	r7,8(r8)
   15d58:	31400115 	stw	r5,4(r6)
   15d5c:	18800015 	stw	r2,0(r3)
   15d60:	003fbd06 	br	15c58 <__alt_data_end+0xfc015c58>
   15d64:	39c0004c 	andi	r7,r7,1
   15d68:	10c5883a 	add	r2,r2,r3
   15d6c:	3800071e 	bne	r7,zero,15d8c <_free_r+0x1d4>
   15d70:	81fffe17 	ldw	r7,-8(r16)
   15d74:	31cdc83a 	sub	r6,r6,r7
   15d78:	30c00317 	ldw	r3,12(r6)
   15d7c:	31400217 	ldw	r5,8(r6)
   15d80:	11c5883a 	add	r2,r2,r7
   15d84:	28c00315 	stw	r3,12(r5)
   15d88:	19400215 	stw	r5,8(r3)
   15d8c:	10c00054 	ori	r3,r2,1
   15d90:	30c00115 	stw	r3,4(r6)
   15d94:	00c000f4 	movhi	r3,3
   15d98:	18f70704 	addi	r3,r3,-9188
   15d9c:	18c00017 	ldw	r3,0(r3)
   15da0:	21800215 	stw	r6,8(r4)
   15da4:	10ffc036 	bltu	r2,r3,15ca8 <__alt_data_end+0xfc015ca8>
   15da8:	008000f4 	movhi	r2,3
   15dac:	10839a04 	addi	r2,r2,3688
   15db0:	11400017 	ldw	r5,0(r2)
   15db4:	8809883a 	mov	r4,r17
   15db8:	0015a940 	call	15a94 <_malloc_trim_r>
   15dbc:	003fba06 	br	15ca8 <__alt_data_end+0xfc015ca8>
   15dc0:	28c9883a 	add	r4,r5,r3
   15dc4:	21000117 	ldw	r4,4(r4)
   15dc8:	2100004c 	andi	r4,r4,1
   15dcc:	2000391e 	bne	r4,zero,15eb4 <_free_r+0x2fc>
   15dd0:	29c00217 	ldw	r7,8(r5)
   15dd4:	29000317 	ldw	r4,12(r5)
   15dd8:	1885883a 	add	r2,r3,r2
   15ddc:	10c00054 	ori	r3,r2,1
   15de0:	39000315 	stw	r4,12(r7)
   15de4:	21c00215 	stw	r7,8(r4)
   15de8:	30c00115 	stw	r3,4(r6)
   15dec:	308d883a 	add	r6,r6,r2
   15df0:	30800015 	stw	r2,0(r6)
   15df4:	003fac06 	br	15ca8 <__alt_data_end+0xfc015ca8>
   15df8:	00c00504 	movi	r3,20
   15dfc:	19401536 	bltu	r3,r5,15e54 <_free_r+0x29c>
   15e00:	28c01704 	addi	r3,r5,92
   15e04:	18c7883a 	add	r3,r3,r3
   15e08:	294016c4 	addi	r5,r5,91
   15e0c:	003fb406 	br	15ce0 <__alt_data_end+0xfc015ce0>
   15e10:	280bd0ba 	srai	r5,r5,2
   15e14:	00c00044 	movi	r3,1
   15e18:	38800117 	ldw	r2,4(r7)
   15e1c:	194a983a 	sll	r5,r3,r5
   15e20:	2007883a 	mov	r3,r4
   15e24:	2884b03a 	or	r2,r5,r2
   15e28:	38800115 	stw	r2,4(r7)
   15e2c:	003fbb06 	br	15d1c <__alt_data_end+0xfc015d1c>
   15e30:	21800515 	stw	r6,20(r4)
   15e34:	21800415 	stw	r6,16(r4)
   15e38:	10c00054 	ori	r3,r2,1
   15e3c:	31c00315 	stw	r7,12(r6)
   15e40:	31c00215 	stw	r7,8(r6)
   15e44:	30c00115 	stw	r3,4(r6)
   15e48:	308d883a 	add	r6,r6,r2
   15e4c:	30800015 	stw	r2,0(r6)
   15e50:	003f9506 	br	15ca8 <__alt_data_end+0xfc015ca8>
   15e54:	00c01504 	movi	r3,84
   15e58:	19400536 	bltu	r3,r5,15e70 <_free_r+0x2b8>
   15e5c:	100ad33a 	srli	r5,r2,12
   15e60:	28c01bc4 	addi	r3,r5,111
   15e64:	18c7883a 	add	r3,r3,r3
   15e68:	29401b84 	addi	r5,r5,110
   15e6c:	003f9c06 	br	15ce0 <__alt_data_end+0xfc015ce0>
   15e70:	00c05504 	movi	r3,340
   15e74:	19400536 	bltu	r3,r5,15e8c <_free_r+0x2d4>
   15e78:	100ad3fa 	srli	r5,r2,15
   15e7c:	28c01e04 	addi	r3,r5,120
   15e80:	18c7883a 	add	r3,r3,r3
   15e84:	29401dc4 	addi	r5,r5,119
   15e88:	003f9506 	br	15ce0 <__alt_data_end+0xfc015ce0>
   15e8c:	00c15504 	movi	r3,1364
   15e90:	19400536 	bltu	r3,r5,15ea8 <_free_r+0x2f0>
   15e94:	100ad4ba 	srli	r5,r2,18
   15e98:	28c01f44 	addi	r3,r5,125
   15e9c:	18c7883a 	add	r3,r3,r3
   15ea0:	29401f04 	addi	r5,r5,124
   15ea4:	003f8e06 	br	15ce0 <__alt_data_end+0xfc015ce0>
   15ea8:	00c03f84 	movi	r3,254
   15eac:	01401f84 	movi	r5,126
   15eb0:	003f8b06 	br	15ce0 <__alt_data_end+0xfc015ce0>
   15eb4:	10c00054 	ori	r3,r2,1
   15eb8:	30c00115 	stw	r3,4(r6)
   15ebc:	308d883a 	add	r6,r6,r2
   15ec0:	30800015 	stw	r2,0(r6)
   15ec4:	003f7806 	br	15ca8 <__alt_data_end+0xfc015ca8>

00015ec8 <__sfvwrite_r>:
   15ec8:	30800217 	ldw	r2,8(r6)
   15ecc:	10006726 	beq	r2,zero,1606c <__sfvwrite_r+0x1a4>
   15ed0:	28c0030b 	ldhu	r3,12(r5)
   15ed4:	defff404 	addi	sp,sp,-48
   15ed8:	dd400715 	stw	r21,28(sp)
   15edc:	dd000615 	stw	r20,24(sp)
   15ee0:	dc000215 	stw	r16,8(sp)
   15ee4:	dfc00b15 	stw	ra,44(sp)
   15ee8:	df000a15 	stw	fp,40(sp)
   15eec:	ddc00915 	stw	r23,36(sp)
   15ef0:	dd800815 	stw	r22,32(sp)
   15ef4:	dcc00515 	stw	r19,20(sp)
   15ef8:	dc800415 	stw	r18,16(sp)
   15efc:	dc400315 	stw	r17,12(sp)
   15f00:	1880020c 	andi	r2,r3,8
   15f04:	2821883a 	mov	r16,r5
   15f08:	202b883a 	mov	r21,r4
   15f0c:	3029883a 	mov	r20,r6
   15f10:	10002726 	beq	r2,zero,15fb0 <__sfvwrite_r+0xe8>
   15f14:	28800417 	ldw	r2,16(r5)
   15f18:	10002526 	beq	r2,zero,15fb0 <__sfvwrite_r+0xe8>
   15f1c:	1880008c 	andi	r2,r3,2
   15f20:	a4400017 	ldw	r17,0(r20)
   15f24:	10002a26 	beq	r2,zero,15fd0 <__sfvwrite_r+0x108>
   15f28:	05a00034 	movhi	r22,32768
   15f2c:	0027883a 	mov	r19,zero
   15f30:	0025883a 	mov	r18,zero
   15f34:	b5bf0004 	addi	r22,r22,-1024
   15f38:	980d883a 	mov	r6,r19
   15f3c:	a809883a 	mov	r4,r21
   15f40:	90004626 	beq	r18,zero,1605c <__sfvwrite_r+0x194>
   15f44:	900f883a 	mov	r7,r18
   15f48:	b480022e 	bgeu	r22,r18,15f54 <__sfvwrite_r+0x8c>
   15f4c:	01e00034 	movhi	r7,32768
   15f50:	39ff0004 	addi	r7,r7,-1024
   15f54:	80800917 	ldw	r2,36(r16)
   15f58:	81400717 	ldw	r5,28(r16)
   15f5c:	103ee83a 	callr	r2
   15f60:	00805a0e 	bge	zero,r2,160cc <__sfvwrite_r+0x204>
   15f64:	a0c00217 	ldw	r3,8(r20)
   15f68:	98a7883a 	add	r19,r19,r2
   15f6c:	90a5c83a 	sub	r18,r18,r2
   15f70:	1885c83a 	sub	r2,r3,r2
   15f74:	a0800215 	stw	r2,8(r20)
   15f78:	103fef1e 	bne	r2,zero,15f38 <__alt_data_end+0xfc015f38>
   15f7c:	0005883a 	mov	r2,zero
   15f80:	dfc00b17 	ldw	ra,44(sp)
   15f84:	df000a17 	ldw	fp,40(sp)
   15f88:	ddc00917 	ldw	r23,36(sp)
   15f8c:	dd800817 	ldw	r22,32(sp)
   15f90:	dd400717 	ldw	r21,28(sp)
   15f94:	dd000617 	ldw	r20,24(sp)
   15f98:	dcc00517 	ldw	r19,20(sp)
   15f9c:	dc800417 	ldw	r18,16(sp)
   15fa0:	dc400317 	ldw	r17,12(sp)
   15fa4:	dc000217 	ldw	r16,8(sp)
   15fa8:	dec00c04 	addi	sp,sp,48
   15fac:	f800283a 	ret
   15fb0:	800b883a 	mov	r5,r16
   15fb4:	a809883a 	mov	r4,r21
   15fb8:	0013a380 	call	13a38 <__swsetup_r>
   15fbc:	1000ee1e 	bne	r2,zero,16378 <__sfvwrite_r+0x4b0>
   15fc0:	80c0030b 	ldhu	r3,12(r16)
   15fc4:	a4400017 	ldw	r17,0(r20)
   15fc8:	1880008c 	andi	r2,r3,2
   15fcc:	103fd61e 	bne	r2,zero,15f28 <__alt_data_end+0xfc015f28>
   15fd0:	1880004c 	andi	r2,r3,1
   15fd4:	1000421e 	bne	r2,zero,160e0 <__sfvwrite_r+0x218>
   15fd8:	0039883a 	mov	fp,zero
   15fdc:	0025883a 	mov	r18,zero
   15fe0:	90001a26 	beq	r18,zero,1604c <__sfvwrite_r+0x184>
   15fe4:	1880800c 	andi	r2,r3,512
   15fe8:	84c00217 	ldw	r19,8(r16)
   15fec:	10002126 	beq	r2,zero,16074 <__sfvwrite_r+0x1ac>
   15ff0:	982f883a 	mov	r23,r19
   15ff4:	94c09636 	bltu	r18,r19,16250 <__sfvwrite_r+0x388>
   15ff8:	1881200c 	andi	r2,r3,1152
   15ffc:	1000a11e 	bne	r2,zero,16284 <__sfvwrite_r+0x3bc>
   16000:	81000017 	ldw	r4,0(r16)
   16004:	b80d883a 	mov	r6,r23
   16008:	e00b883a 	mov	r5,fp
   1600c:	00168940 	call	16894 <memmove>
   16010:	80c00217 	ldw	r3,8(r16)
   16014:	81000017 	ldw	r4,0(r16)
   16018:	9005883a 	mov	r2,r18
   1601c:	1ce7c83a 	sub	r19,r3,r19
   16020:	25cf883a 	add	r7,r4,r23
   16024:	84c00215 	stw	r19,8(r16)
   16028:	81c00015 	stw	r7,0(r16)
   1602c:	a0c00217 	ldw	r3,8(r20)
   16030:	e0b9883a 	add	fp,fp,r2
   16034:	90a5c83a 	sub	r18,r18,r2
   16038:	18a7c83a 	sub	r19,r3,r2
   1603c:	a4c00215 	stw	r19,8(r20)
   16040:	983fce26 	beq	r19,zero,15f7c <__alt_data_end+0xfc015f7c>
   16044:	80c0030b 	ldhu	r3,12(r16)
   16048:	903fe61e 	bne	r18,zero,15fe4 <__alt_data_end+0xfc015fe4>
   1604c:	8f000017 	ldw	fp,0(r17)
   16050:	8c800117 	ldw	r18,4(r17)
   16054:	8c400204 	addi	r17,r17,8
   16058:	003fe106 	br	15fe0 <__alt_data_end+0xfc015fe0>
   1605c:	8cc00017 	ldw	r19,0(r17)
   16060:	8c800117 	ldw	r18,4(r17)
   16064:	8c400204 	addi	r17,r17,8
   16068:	003fb306 	br	15f38 <__alt_data_end+0xfc015f38>
   1606c:	0005883a 	mov	r2,zero
   16070:	f800283a 	ret
   16074:	81000017 	ldw	r4,0(r16)
   16078:	80800417 	ldw	r2,16(r16)
   1607c:	11005a36 	bltu	r2,r4,161e8 <__sfvwrite_r+0x320>
   16080:	85c00517 	ldw	r23,20(r16)
   16084:	95c05836 	bltu	r18,r23,161e8 <__sfvwrite_r+0x320>
   16088:	00a00034 	movhi	r2,32768
   1608c:	10bfffc4 	addi	r2,r2,-1
   16090:	9009883a 	mov	r4,r18
   16094:	1480012e 	bgeu	r2,r18,1609c <__sfvwrite_r+0x1d4>
   16098:	1009883a 	mov	r4,r2
   1609c:	b80b883a 	mov	r5,r23
   160a0:	000caf80 	call	caf8 <__divsi3>
   160a4:	b80b883a 	mov	r5,r23
   160a8:	1009883a 	mov	r4,r2
   160ac:	000ccac0 	call	ccac <__mulsi3>
   160b0:	81400717 	ldw	r5,28(r16)
   160b4:	80c00917 	ldw	r3,36(r16)
   160b8:	100f883a 	mov	r7,r2
   160bc:	e00d883a 	mov	r6,fp
   160c0:	a809883a 	mov	r4,r21
   160c4:	183ee83a 	callr	r3
   160c8:	00bfd816 	blt	zero,r2,1602c <__alt_data_end+0xfc01602c>
   160cc:	8080030b 	ldhu	r2,12(r16)
   160d0:	10801014 	ori	r2,r2,64
   160d4:	8080030d 	sth	r2,12(r16)
   160d8:	00bfffc4 	movi	r2,-1
   160dc:	003fa806 	br	15f80 <__alt_data_end+0xfc015f80>
   160e0:	0027883a 	mov	r19,zero
   160e4:	0011883a 	mov	r8,zero
   160e8:	0039883a 	mov	fp,zero
   160ec:	0025883a 	mov	r18,zero
   160f0:	90001f26 	beq	r18,zero,16170 <__sfvwrite_r+0x2a8>
   160f4:	40005a26 	beq	r8,zero,16260 <__sfvwrite_r+0x398>
   160f8:	982d883a 	mov	r22,r19
   160fc:	94c0012e 	bgeu	r18,r19,16104 <__sfvwrite_r+0x23c>
   16100:	902d883a 	mov	r22,r18
   16104:	81000017 	ldw	r4,0(r16)
   16108:	80800417 	ldw	r2,16(r16)
   1610c:	b02f883a 	mov	r23,r22
   16110:	81c00517 	ldw	r7,20(r16)
   16114:	1100032e 	bgeu	r2,r4,16124 <__sfvwrite_r+0x25c>
   16118:	80c00217 	ldw	r3,8(r16)
   1611c:	38c7883a 	add	r3,r7,r3
   16120:	1d801816 	blt	r3,r22,16184 <__sfvwrite_r+0x2bc>
   16124:	b1c03e16 	blt	r22,r7,16220 <__sfvwrite_r+0x358>
   16128:	80800917 	ldw	r2,36(r16)
   1612c:	81400717 	ldw	r5,28(r16)
   16130:	e00d883a 	mov	r6,fp
   16134:	da000115 	stw	r8,4(sp)
   16138:	a809883a 	mov	r4,r21
   1613c:	103ee83a 	callr	r2
   16140:	102f883a 	mov	r23,r2
   16144:	da000117 	ldw	r8,4(sp)
   16148:	00bfe00e 	bge	zero,r2,160cc <__alt_data_end+0xfc0160cc>
   1614c:	9de7c83a 	sub	r19,r19,r23
   16150:	98001f26 	beq	r19,zero,161d0 <__sfvwrite_r+0x308>
   16154:	a0800217 	ldw	r2,8(r20)
   16158:	e5f9883a 	add	fp,fp,r23
   1615c:	95e5c83a 	sub	r18,r18,r23
   16160:	15efc83a 	sub	r23,r2,r23
   16164:	a5c00215 	stw	r23,8(r20)
   16168:	b83f8426 	beq	r23,zero,15f7c <__alt_data_end+0xfc015f7c>
   1616c:	903fe11e 	bne	r18,zero,160f4 <__alt_data_end+0xfc0160f4>
   16170:	8f000017 	ldw	fp,0(r17)
   16174:	8c800117 	ldw	r18,4(r17)
   16178:	0011883a 	mov	r8,zero
   1617c:	8c400204 	addi	r17,r17,8
   16180:	003fdb06 	br	160f0 <__alt_data_end+0xfc0160f0>
   16184:	180d883a 	mov	r6,r3
   16188:	e00b883a 	mov	r5,fp
   1618c:	da000115 	stw	r8,4(sp)
   16190:	d8c00015 	stw	r3,0(sp)
   16194:	00168940 	call	16894 <memmove>
   16198:	d8c00017 	ldw	r3,0(sp)
   1619c:	80800017 	ldw	r2,0(r16)
   161a0:	800b883a 	mov	r5,r16
   161a4:	a809883a 	mov	r4,r21
   161a8:	10c5883a 	add	r2,r2,r3
   161ac:	80800015 	stw	r2,0(r16)
   161b0:	d8c00015 	stw	r3,0(sp)
   161b4:	00156580 	call	15658 <_fflush_r>
   161b8:	d8c00017 	ldw	r3,0(sp)
   161bc:	da000117 	ldw	r8,4(sp)
   161c0:	103fc21e 	bne	r2,zero,160cc <__alt_data_end+0xfc0160cc>
   161c4:	182f883a 	mov	r23,r3
   161c8:	9de7c83a 	sub	r19,r19,r23
   161cc:	983fe11e 	bne	r19,zero,16154 <__alt_data_end+0xfc016154>
   161d0:	800b883a 	mov	r5,r16
   161d4:	a809883a 	mov	r4,r21
   161d8:	00156580 	call	15658 <_fflush_r>
   161dc:	103fbb1e 	bne	r2,zero,160cc <__alt_data_end+0xfc0160cc>
   161e0:	0011883a 	mov	r8,zero
   161e4:	003fdb06 	br	16154 <__alt_data_end+0xfc016154>
   161e8:	94c0012e 	bgeu	r18,r19,161f0 <__sfvwrite_r+0x328>
   161ec:	9027883a 	mov	r19,r18
   161f0:	980d883a 	mov	r6,r19
   161f4:	e00b883a 	mov	r5,fp
   161f8:	00168940 	call	16894 <memmove>
   161fc:	80800217 	ldw	r2,8(r16)
   16200:	80c00017 	ldw	r3,0(r16)
   16204:	14c5c83a 	sub	r2,r2,r19
   16208:	1cc7883a 	add	r3,r3,r19
   1620c:	80800215 	stw	r2,8(r16)
   16210:	80c00015 	stw	r3,0(r16)
   16214:	10004326 	beq	r2,zero,16324 <__sfvwrite_r+0x45c>
   16218:	9805883a 	mov	r2,r19
   1621c:	003f8306 	br	1602c <__alt_data_end+0xfc01602c>
   16220:	b00d883a 	mov	r6,r22
   16224:	e00b883a 	mov	r5,fp
   16228:	da000115 	stw	r8,4(sp)
   1622c:	00168940 	call	16894 <memmove>
   16230:	80800217 	ldw	r2,8(r16)
   16234:	80c00017 	ldw	r3,0(r16)
   16238:	da000117 	ldw	r8,4(sp)
   1623c:	1585c83a 	sub	r2,r2,r22
   16240:	1dad883a 	add	r22,r3,r22
   16244:	80800215 	stw	r2,8(r16)
   16248:	85800015 	stw	r22,0(r16)
   1624c:	003fbf06 	br	1614c <__alt_data_end+0xfc01614c>
   16250:	81000017 	ldw	r4,0(r16)
   16254:	9027883a 	mov	r19,r18
   16258:	902f883a 	mov	r23,r18
   1625c:	003f6906 	br	16004 <__alt_data_end+0xfc016004>
   16260:	900d883a 	mov	r6,r18
   16264:	01400284 	movi	r5,10
   16268:	e009883a 	mov	r4,fp
   1626c:	00167b00 	call	167b0 <memchr>
   16270:	10003e26 	beq	r2,zero,1636c <__sfvwrite_r+0x4a4>
   16274:	10800044 	addi	r2,r2,1
   16278:	1727c83a 	sub	r19,r2,fp
   1627c:	02000044 	movi	r8,1
   16280:	003f9d06 	br	160f8 <__alt_data_end+0xfc0160f8>
   16284:	80800517 	ldw	r2,20(r16)
   16288:	81400417 	ldw	r5,16(r16)
   1628c:	81c00017 	ldw	r7,0(r16)
   16290:	10a7883a 	add	r19,r2,r2
   16294:	9885883a 	add	r2,r19,r2
   16298:	1026d7fa 	srli	r19,r2,31
   1629c:	396dc83a 	sub	r22,r7,r5
   162a0:	b1000044 	addi	r4,r22,1
   162a4:	9885883a 	add	r2,r19,r2
   162a8:	1027d07a 	srai	r19,r2,1
   162ac:	2485883a 	add	r2,r4,r18
   162b0:	980d883a 	mov	r6,r19
   162b4:	9880022e 	bgeu	r19,r2,162c0 <__sfvwrite_r+0x3f8>
   162b8:	1027883a 	mov	r19,r2
   162bc:	100d883a 	mov	r6,r2
   162c0:	18c1000c 	andi	r3,r3,1024
   162c4:	18001c26 	beq	r3,zero,16338 <__sfvwrite_r+0x470>
   162c8:	300b883a 	mov	r5,r6
   162cc:	a809883a 	mov	r4,r21
   162d0:	000e2540 	call	e254 <_malloc_r>
   162d4:	102f883a 	mov	r23,r2
   162d8:	10002926 	beq	r2,zero,16380 <__sfvwrite_r+0x4b8>
   162dc:	81400417 	ldw	r5,16(r16)
   162e0:	b00d883a 	mov	r6,r22
   162e4:	1009883a 	mov	r4,r2
   162e8:	000ea600 	call	ea60 <memcpy>
   162ec:	8080030b 	ldhu	r2,12(r16)
   162f0:	00fedfc4 	movi	r3,-1153
   162f4:	10c4703a 	and	r2,r2,r3
   162f8:	10802014 	ori	r2,r2,128
   162fc:	8080030d 	sth	r2,12(r16)
   16300:	bd89883a 	add	r4,r23,r22
   16304:	9d8fc83a 	sub	r7,r19,r22
   16308:	85c00415 	stw	r23,16(r16)
   1630c:	84c00515 	stw	r19,20(r16)
   16310:	81000015 	stw	r4,0(r16)
   16314:	9027883a 	mov	r19,r18
   16318:	81c00215 	stw	r7,8(r16)
   1631c:	902f883a 	mov	r23,r18
   16320:	003f3806 	br	16004 <__alt_data_end+0xfc016004>
   16324:	800b883a 	mov	r5,r16
   16328:	a809883a 	mov	r4,r21
   1632c:	00156580 	call	15658 <_fflush_r>
   16330:	103fb926 	beq	r2,zero,16218 <__alt_data_end+0xfc016218>
   16334:	003f6506 	br	160cc <__alt_data_end+0xfc0160cc>
   16338:	a809883a 	mov	r4,r21
   1633c:	0017c100 	call	17c10 <_realloc_r>
   16340:	102f883a 	mov	r23,r2
   16344:	103fee1e 	bne	r2,zero,16300 <__alt_data_end+0xfc016300>
   16348:	81400417 	ldw	r5,16(r16)
   1634c:	a809883a 	mov	r4,r21
   16350:	0015bb80 	call	15bb8 <_free_r>
   16354:	8080030b 	ldhu	r2,12(r16)
   16358:	00ffdfc4 	movi	r3,-129
   1635c:	1884703a 	and	r2,r3,r2
   16360:	00c00304 	movi	r3,12
   16364:	a8c00015 	stw	r3,0(r21)
   16368:	003f5906 	br	160d0 <__alt_data_end+0xfc0160d0>
   1636c:	94c00044 	addi	r19,r18,1
   16370:	02000044 	movi	r8,1
   16374:	003f6006 	br	160f8 <__alt_data_end+0xfc0160f8>
   16378:	00bfffc4 	movi	r2,-1
   1637c:	003f0006 	br	15f80 <__alt_data_end+0xfc015f80>
   16380:	00800304 	movi	r2,12
   16384:	a8800015 	stw	r2,0(r21)
   16388:	8080030b 	ldhu	r2,12(r16)
   1638c:	003f5006 	br	160d0 <__alt_data_end+0xfc0160d0>

00016390 <_fwalk>:
   16390:	defff704 	addi	sp,sp,-36
   16394:	dd000415 	stw	r20,16(sp)
   16398:	dfc00815 	stw	ra,32(sp)
   1639c:	ddc00715 	stw	r23,28(sp)
   163a0:	dd800615 	stw	r22,24(sp)
   163a4:	dd400515 	stw	r21,20(sp)
   163a8:	dcc00315 	stw	r19,12(sp)
   163ac:	dc800215 	stw	r18,8(sp)
   163b0:	dc400115 	stw	r17,4(sp)
   163b4:	dc000015 	stw	r16,0(sp)
   163b8:	2500b804 	addi	r20,r4,736
   163bc:	a0002326 	beq	r20,zero,1644c <_fwalk+0xbc>
   163c0:	282b883a 	mov	r21,r5
   163c4:	002f883a 	mov	r23,zero
   163c8:	05800044 	movi	r22,1
   163cc:	04ffffc4 	movi	r19,-1
   163d0:	a4400117 	ldw	r17,4(r20)
   163d4:	a4800217 	ldw	r18,8(r20)
   163d8:	8c7fffc4 	addi	r17,r17,-1
   163dc:	88000d16 	blt	r17,zero,16414 <_fwalk+0x84>
   163e0:	94000304 	addi	r16,r18,12
   163e4:	94800384 	addi	r18,r18,14
   163e8:	8080000b 	ldhu	r2,0(r16)
   163ec:	8c7fffc4 	addi	r17,r17,-1
   163f0:	813ffd04 	addi	r4,r16,-12
   163f4:	b080042e 	bgeu	r22,r2,16408 <_fwalk+0x78>
   163f8:	9080000f 	ldh	r2,0(r18)
   163fc:	14c00226 	beq	r2,r19,16408 <_fwalk+0x78>
   16400:	a83ee83a 	callr	r21
   16404:	b8aeb03a 	or	r23,r23,r2
   16408:	84001a04 	addi	r16,r16,104
   1640c:	94801a04 	addi	r18,r18,104
   16410:	8cfff51e 	bne	r17,r19,163e8 <__alt_data_end+0xfc0163e8>
   16414:	a5000017 	ldw	r20,0(r20)
   16418:	a03fed1e 	bne	r20,zero,163d0 <__alt_data_end+0xfc0163d0>
   1641c:	b805883a 	mov	r2,r23
   16420:	dfc00817 	ldw	ra,32(sp)
   16424:	ddc00717 	ldw	r23,28(sp)
   16428:	dd800617 	ldw	r22,24(sp)
   1642c:	dd400517 	ldw	r21,20(sp)
   16430:	dd000417 	ldw	r20,16(sp)
   16434:	dcc00317 	ldw	r19,12(sp)
   16438:	dc800217 	ldw	r18,8(sp)
   1643c:	dc400117 	ldw	r17,4(sp)
   16440:	dc000017 	ldw	r16,0(sp)
   16444:	dec00904 	addi	sp,sp,36
   16448:	f800283a 	ret
   1644c:	002f883a 	mov	r23,zero
   16450:	003ff206 	br	1641c <__alt_data_end+0xfc01641c>

00016454 <_fwalk_reent>:
   16454:	defff704 	addi	sp,sp,-36
   16458:	dd000415 	stw	r20,16(sp)
   1645c:	dfc00815 	stw	ra,32(sp)
   16460:	ddc00715 	stw	r23,28(sp)
   16464:	dd800615 	stw	r22,24(sp)
   16468:	dd400515 	stw	r21,20(sp)
   1646c:	dcc00315 	stw	r19,12(sp)
   16470:	dc800215 	stw	r18,8(sp)
   16474:	dc400115 	stw	r17,4(sp)
   16478:	dc000015 	stw	r16,0(sp)
   1647c:	2500b804 	addi	r20,r4,736
   16480:	a0002326 	beq	r20,zero,16510 <_fwalk_reent+0xbc>
   16484:	282b883a 	mov	r21,r5
   16488:	2027883a 	mov	r19,r4
   1648c:	002f883a 	mov	r23,zero
   16490:	05800044 	movi	r22,1
   16494:	04bfffc4 	movi	r18,-1
   16498:	a4400117 	ldw	r17,4(r20)
   1649c:	a4000217 	ldw	r16,8(r20)
   164a0:	8c7fffc4 	addi	r17,r17,-1
   164a4:	88000c16 	blt	r17,zero,164d8 <_fwalk_reent+0x84>
   164a8:	84000304 	addi	r16,r16,12
   164ac:	8080000b 	ldhu	r2,0(r16)
   164b0:	8c7fffc4 	addi	r17,r17,-1
   164b4:	817ffd04 	addi	r5,r16,-12
   164b8:	b080052e 	bgeu	r22,r2,164d0 <_fwalk_reent+0x7c>
   164bc:	8080008f 	ldh	r2,2(r16)
   164c0:	9809883a 	mov	r4,r19
   164c4:	14800226 	beq	r2,r18,164d0 <_fwalk_reent+0x7c>
   164c8:	a83ee83a 	callr	r21
   164cc:	b8aeb03a 	or	r23,r23,r2
   164d0:	84001a04 	addi	r16,r16,104
   164d4:	8cbff51e 	bne	r17,r18,164ac <__alt_data_end+0xfc0164ac>
   164d8:	a5000017 	ldw	r20,0(r20)
   164dc:	a03fee1e 	bne	r20,zero,16498 <__alt_data_end+0xfc016498>
   164e0:	b805883a 	mov	r2,r23
   164e4:	dfc00817 	ldw	ra,32(sp)
   164e8:	ddc00717 	ldw	r23,28(sp)
   164ec:	dd800617 	ldw	r22,24(sp)
   164f0:	dd400517 	ldw	r21,20(sp)
   164f4:	dd000417 	ldw	r20,16(sp)
   164f8:	dcc00317 	ldw	r19,12(sp)
   164fc:	dc800217 	ldw	r18,8(sp)
   16500:	dc400117 	ldw	r17,4(sp)
   16504:	dc000017 	ldw	r16,0(sp)
   16508:	dec00904 	addi	sp,sp,36
   1650c:	f800283a 	ret
   16510:	002f883a 	mov	r23,zero
   16514:	003ff206 	br	164e0 <__alt_data_end+0xfc0164e0>

00016518 <_setlocale_r>:
   16518:	30001b26 	beq	r6,zero,16588 <_setlocale_r+0x70>
   1651c:	014000f4 	movhi	r5,3
   16520:	defffe04 	addi	sp,sp,-8
   16524:	296a2704 	addi	r5,r5,-22372
   16528:	3009883a 	mov	r4,r6
   1652c:	dc000015 	stw	r16,0(sp)
   16530:	dfc00115 	stw	ra,4(sp)
   16534:	3021883a 	mov	r16,r6
   16538:	000f24c0 	call	f24c <strcmp>
   1653c:	1000061e 	bne	r2,zero,16558 <_setlocale_r+0x40>
   16540:	008000f4 	movhi	r2,3
   16544:	10aa0004 	addi	r2,r2,-22528
   16548:	dfc00117 	ldw	ra,4(sp)
   1654c:	dc000017 	ldw	r16,0(sp)
   16550:	dec00204 	addi	sp,sp,8
   16554:	f800283a 	ret
   16558:	014000f4 	movhi	r5,3
   1655c:	296a0004 	addi	r5,r5,-22528
   16560:	8009883a 	mov	r4,r16
   16564:	000f24c0 	call	f24c <strcmp>
   16568:	103ff526 	beq	r2,zero,16540 <__alt_data_end+0xfc016540>
   1656c:	014000f4 	movhi	r5,3
   16570:	296a0a04 	addi	r5,r5,-22488
   16574:	8009883a 	mov	r4,r16
   16578:	000f24c0 	call	f24c <strcmp>
   1657c:	103ff026 	beq	r2,zero,16540 <__alt_data_end+0xfc016540>
   16580:	0005883a 	mov	r2,zero
   16584:	003ff006 	br	16548 <__alt_data_end+0xfc016548>
   16588:	008000f4 	movhi	r2,3
   1658c:	10aa0004 	addi	r2,r2,-22528
   16590:	f800283a 	ret

00016594 <__locale_charset>:
   16594:	008000f4 	movhi	r2,3
   16598:	10acae04 	addi	r2,r2,-19784
   1659c:	f800283a 	ret

000165a0 <__locale_mb_cur_max>:
   165a0:	008000f4 	movhi	r2,3
   165a4:	10b70804 	addi	r2,r2,-9184
   165a8:	10800017 	ldw	r2,0(r2)
   165ac:	f800283a 	ret

000165b0 <__locale_msgcharset>:
   165b0:	008000f4 	movhi	r2,3
   165b4:	10aca604 	addi	r2,r2,-19816
   165b8:	f800283a 	ret

000165bc <__locale_cjk_lang>:
   165bc:	0005883a 	mov	r2,zero
   165c0:	f800283a 	ret

000165c4 <_localeconv_r>:
   165c4:	008000f4 	movhi	r2,3
   165c8:	10acb604 	addi	r2,r2,-19752
   165cc:	f800283a 	ret

000165d0 <setlocale>:
   165d0:	008000f4 	movhi	r2,3
   165d4:	10b70504 	addi	r2,r2,-9196
   165d8:	280d883a 	mov	r6,r5
   165dc:	200b883a 	mov	r5,r4
   165e0:	11000017 	ldw	r4,0(r2)
   165e4:	00165181 	jmpi	16518 <_setlocale_r>

000165e8 <localeconv>:
   165e8:	008000f4 	movhi	r2,3
   165ec:	10acb604 	addi	r2,r2,-19752
   165f0:	f800283a 	ret

000165f4 <__smakebuf_r>:
   165f4:	2880030b 	ldhu	r2,12(r5)
   165f8:	10c0008c 	andi	r3,r2,2
   165fc:	1800411e 	bne	r3,zero,16704 <__smakebuf_r+0x110>
   16600:	deffec04 	addi	sp,sp,-80
   16604:	dc000f15 	stw	r16,60(sp)
   16608:	2821883a 	mov	r16,r5
   1660c:	2940038f 	ldh	r5,14(r5)
   16610:	dc401015 	stw	r17,64(sp)
   16614:	dfc01315 	stw	ra,76(sp)
   16618:	dcc01215 	stw	r19,72(sp)
   1661c:	dc801115 	stw	r18,68(sp)
   16620:	2023883a 	mov	r17,r4
   16624:	28001c16 	blt	r5,zero,16698 <__smakebuf_r+0xa4>
   16628:	d80d883a 	mov	r6,sp
   1662c:	001b5800 	call	1b580 <_fstat_r>
   16630:	10001816 	blt	r2,zero,16694 <__smakebuf_r+0xa0>
   16634:	d8800117 	ldw	r2,4(sp)
   16638:	00e00014 	movui	r3,32768
   1663c:	10bc000c 	andi	r2,r2,61440
   16640:	14c80020 	cmpeqi	r19,r2,8192
   16644:	10c03726 	beq	r2,r3,16724 <__smakebuf_r+0x130>
   16648:	80c0030b 	ldhu	r3,12(r16)
   1664c:	18c20014 	ori	r3,r3,2048
   16650:	80c0030d 	sth	r3,12(r16)
   16654:	00c80004 	movi	r3,8192
   16658:	10c0521e 	bne	r2,r3,167a4 <__smakebuf_r+0x1b0>
   1665c:	8140038f 	ldh	r5,14(r16)
   16660:	8809883a 	mov	r4,r17
   16664:	001b5dc0 	call	1b5dc <_isatty_r>
   16668:	10004c26 	beq	r2,zero,1679c <__smakebuf_r+0x1a8>
   1666c:	8080030b 	ldhu	r2,12(r16)
   16670:	80c010c4 	addi	r3,r16,67
   16674:	80c00015 	stw	r3,0(r16)
   16678:	10800054 	ori	r2,r2,1
   1667c:	8080030d 	sth	r2,12(r16)
   16680:	00800044 	movi	r2,1
   16684:	80c00415 	stw	r3,16(r16)
   16688:	80800515 	stw	r2,20(r16)
   1668c:	04810004 	movi	r18,1024
   16690:	00000706 	br	166b0 <__smakebuf_r+0xbc>
   16694:	8080030b 	ldhu	r2,12(r16)
   16698:	10c0200c 	andi	r3,r2,128
   1669c:	18001f1e 	bne	r3,zero,1671c <__smakebuf_r+0x128>
   166a0:	04810004 	movi	r18,1024
   166a4:	10820014 	ori	r2,r2,2048
   166a8:	8080030d 	sth	r2,12(r16)
   166ac:	0027883a 	mov	r19,zero
   166b0:	900b883a 	mov	r5,r18
   166b4:	8809883a 	mov	r4,r17
   166b8:	000e2540 	call	e254 <_malloc_r>
   166bc:	10002c26 	beq	r2,zero,16770 <__smakebuf_r+0x17c>
   166c0:	80c0030b 	ldhu	r3,12(r16)
   166c4:	01000074 	movhi	r4,1
   166c8:	2115bb04 	addi	r4,r4,22252
   166cc:	89000f15 	stw	r4,60(r17)
   166d0:	18c02014 	ori	r3,r3,128
   166d4:	80c0030d 	sth	r3,12(r16)
   166d8:	80800015 	stw	r2,0(r16)
   166dc:	80800415 	stw	r2,16(r16)
   166e0:	84800515 	stw	r18,20(r16)
   166e4:	98001a1e 	bne	r19,zero,16750 <__smakebuf_r+0x15c>
   166e8:	dfc01317 	ldw	ra,76(sp)
   166ec:	dcc01217 	ldw	r19,72(sp)
   166f0:	dc801117 	ldw	r18,68(sp)
   166f4:	dc401017 	ldw	r17,64(sp)
   166f8:	dc000f17 	ldw	r16,60(sp)
   166fc:	dec01404 	addi	sp,sp,80
   16700:	f800283a 	ret
   16704:	288010c4 	addi	r2,r5,67
   16708:	28800015 	stw	r2,0(r5)
   1670c:	28800415 	stw	r2,16(r5)
   16710:	00800044 	movi	r2,1
   16714:	28800515 	stw	r2,20(r5)
   16718:	f800283a 	ret
   1671c:	04801004 	movi	r18,64
   16720:	003fe006 	br	166a4 <__alt_data_end+0xfc0166a4>
   16724:	81000a17 	ldw	r4,40(r16)
   16728:	00c000b4 	movhi	r3,2
   1672c:	18e0b004 	addi	r3,r3,-32064
   16730:	20ffc51e 	bne	r4,r3,16648 <__alt_data_end+0xfc016648>
   16734:	8080030b 	ldhu	r2,12(r16)
   16738:	04810004 	movi	r18,1024
   1673c:	84801315 	stw	r18,76(r16)
   16740:	1484b03a 	or	r2,r2,r18
   16744:	8080030d 	sth	r2,12(r16)
   16748:	0027883a 	mov	r19,zero
   1674c:	003fd806 	br	166b0 <__alt_data_end+0xfc0166b0>
   16750:	8140038f 	ldh	r5,14(r16)
   16754:	8809883a 	mov	r4,r17
   16758:	001b5dc0 	call	1b5dc <_isatty_r>
   1675c:	103fe226 	beq	r2,zero,166e8 <__alt_data_end+0xfc0166e8>
   16760:	8080030b 	ldhu	r2,12(r16)
   16764:	10800054 	ori	r2,r2,1
   16768:	8080030d 	sth	r2,12(r16)
   1676c:	003fde06 	br	166e8 <__alt_data_end+0xfc0166e8>
   16770:	8080030b 	ldhu	r2,12(r16)
   16774:	10c0800c 	andi	r3,r2,512
   16778:	183fdb1e 	bne	r3,zero,166e8 <__alt_data_end+0xfc0166e8>
   1677c:	10800094 	ori	r2,r2,2
   16780:	80c010c4 	addi	r3,r16,67
   16784:	8080030d 	sth	r2,12(r16)
   16788:	00800044 	movi	r2,1
   1678c:	80c00015 	stw	r3,0(r16)
   16790:	80c00415 	stw	r3,16(r16)
   16794:	80800515 	stw	r2,20(r16)
   16798:	003fd306 	br	166e8 <__alt_data_end+0xfc0166e8>
   1679c:	04810004 	movi	r18,1024
   167a0:	003fc306 	br	166b0 <__alt_data_end+0xfc0166b0>
   167a4:	0027883a 	mov	r19,zero
   167a8:	04810004 	movi	r18,1024
   167ac:	003fc006 	br	166b0 <__alt_data_end+0xfc0166b0>

000167b0 <memchr>:
   167b0:	208000cc 	andi	r2,r4,3
   167b4:	280f883a 	mov	r7,r5
   167b8:	10003426 	beq	r2,zero,1688c <memchr+0xdc>
   167bc:	30bfffc4 	addi	r2,r6,-1
   167c0:	30001a26 	beq	r6,zero,1682c <memchr+0x7c>
   167c4:	20c00003 	ldbu	r3,0(r4)
   167c8:	29803fcc 	andi	r6,r5,255
   167cc:	30c0051e 	bne	r6,r3,167e4 <memchr+0x34>
   167d0:	00001806 	br	16834 <memchr+0x84>
   167d4:	10001526 	beq	r2,zero,1682c <memchr+0x7c>
   167d8:	20c00003 	ldbu	r3,0(r4)
   167dc:	10bfffc4 	addi	r2,r2,-1
   167e0:	30c01426 	beq	r6,r3,16834 <memchr+0x84>
   167e4:	21000044 	addi	r4,r4,1
   167e8:	20c000cc 	andi	r3,r4,3
   167ec:	183ff91e 	bne	r3,zero,167d4 <__alt_data_end+0xfc0167d4>
   167f0:	020000c4 	movi	r8,3
   167f4:	40801136 	bltu	r8,r2,1683c <memchr+0x8c>
   167f8:	10000c26 	beq	r2,zero,1682c <memchr+0x7c>
   167fc:	20c00003 	ldbu	r3,0(r4)
   16800:	29403fcc 	andi	r5,r5,255
   16804:	28c00b26 	beq	r5,r3,16834 <memchr+0x84>
   16808:	20c00044 	addi	r3,r4,1
   1680c:	39803fcc 	andi	r6,r7,255
   16810:	2089883a 	add	r4,r4,r2
   16814:	00000306 	br	16824 <memchr+0x74>
   16818:	18c00044 	addi	r3,r3,1
   1681c:	197fffc3 	ldbu	r5,-1(r3)
   16820:	31400526 	beq	r6,r5,16838 <memchr+0x88>
   16824:	1805883a 	mov	r2,r3
   16828:	20fffb1e 	bne	r4,r3,16818 <__alt_data_end+0xfc016818>
   1682c:	0005883a 	mov	r2,zero
   16830:	f800283a 	ret
   16834:	2005883a 	mov	r2,r4
   16838:	f800283a 	ret
   1683c:	28c03fcc 	andi	r3,r5,255
   16840:	1812923a 	slli	r9,r3,8
   16844:	02ffbff4 	movhi	r11,65279
   16848:	02a02074 	movhi	r10,32897
   1684c:	48d2b03a 	or	r9,r9,r3
   16850:	4806943a 	slli	r3,r9,16
   16854:	5affbfc4 	addi	r11,r11,-257
   16858:	52a02004 	addi	r10,r10,-32640
   1685c:	48d2b03a 	or	r9,r9,r3
   16860:	20c00017 	ldw	r3,0(r4)
   16864:	48c6f03a 	xor	r3,r9,r3
   16868:	1acd883a 	add	r6,r3,r11
   1686c:	00c6303a 	nor	r3,zero,r3
   16870:	30c6703a 	and	r3,r6,r3
   16874:	1a86703a 	and	r3,r3,r10
   16878:	183fe01e 	bne	r3,zero,167fc <__alt_data_end+0xfc0167fc>
   1687c:	10bfff04 	addi	r2,r2,-4
   16880:	21000104 	addi	r4,r4,4
   16884:	40bff636 	bltu	r8,r2,16860 <__alt_data_end+0xfc016860>
   16888:	003fdb06 	br	167f8 <__alt_data_end+0xfc0167f8>
   1688c:	3005883a 	mov	r2,r6
   16890:	003fd706 	br	167f0 <__alt_data_end+0xfc0167f0>

00016894 <memmove>:
   16894:	2005883a 	mov	r2,r4
   16898:	29000b2e 	bgeu	r5,r4,168c8 <memmove+0x34>
   1689c:	298f883a 	add	r7,r5,r6
   168a0:	21c0092e 	bgeu	r4,r7,168c8 <memmove+0x34>
   168a4:	2187883a 	add	r3,r4,r6
   168a8:	198bc83a 	sub	r5,r3,r6
   168ac:	30004826 	beq	r6,zero,169d0 <memmove+0x13c>
   168b0:	39ffffc4 	addi	r7,r7,-1
   168b4:	39000003 	ldbu	r4,0(r7)
   168b8:	18ffffc4 	addi	r3,r3,-1
   168bc:	19000005 	stb	r4,0(r3)
   168c0:	28fffb1e 	bne	r5,r3,168b0 <__alt_data_end+0xfc0168b0>
   168c4:	f800283a 	ret
   168c8:	00c003c4 	movi	r3,15
   168cc:	1980412e 	bgeu	r3,r6,169d4 <memmove+0x140>
   168d0:	2886b03a 	or	r3,r5,r2
   168d4:	18c000cc 	andi	r3,r3,3
   168d8:	1800401e 	bne	r3,zero,169dc <memmove+0x148>
   168dc:	33fffc04 	addi	r15,r6,-16
   168e0:	781ed13a 	srli	r15,r15,4
   168e4:	28c00104 	addi	r3,r5,4
   168e8:	13400104 	addi	r13,r2,4
   168ec:	781c913a 	slli	r14,r15,4
   168f0:	2b000204 	addi	r12,r5,8
   168f4:	12c00204 	addi	r11,r2,8
   168f8:	73800504 	addi	r14,r14,20
   168fc:	2a800304 	addi	r10,r5,12
   16900:	12400304 	addi	r9,r2,12
   16904:	2b9d883a 	add	r14,r5,r14
   16908:	2811883a 	mov	r8,r5
   1690c:	100f883a 	mov	r7,r2
   16910:	41000017 	ldw	r4,0(r8)
   16914:	39c00404 	addi	r7,r7,16
   16918:	18c00404 	addi	r3,r3,16
   1691c:	393ffc15 	stw	r4,-16(r7)
   16920:	193ffc17 	ldw	r4,-16(r3)
   16924:	6b400404 	addi	r13,r13,16
   16928:	5ac00404 	addi	r11,r11,16
   1692c:	693ffc15 	stw	r4,-16(r13)
   16930:	61000017 	ldw	r4,0(r12)
   16934:	4a400404 	addi	r9,r9,16
   16938:	42000404 	addi	r8,r8,16
   1693c:	593ffc15 	stw	r4,-16(r11)
   16940:	51000017 	ldw	r4,0(r10)
   16944:	63000404 	addi	r12,r12,16
   16948:	52800404 	addi	r10,r10,16
   1694c:	493ffc15 	stw	r4,-16(r9)
   16950:	1bbfef1e 	bne	r3,r14,16910 <__alt_data_end+0xfc016910>
   16954:	79000044 	addi	r4,r15,1
   16958:	2008913a 	slli	r4,r4,4
   1695c:	328003cc 	andi	r10,r6,15
   16960:	02c000c4 	movi	r11,3
   16964:	1107883a 	add	r3,r2,r4
   16968:	290b883a 	add	r5,r5,r4
   1696c:	5a801e2e 	bgeu	r11,r10,169e8 <memmove+0x154>
   16970:	1813883a 	mov	r9,r3
   16974:	2811883a 	mov	r8,r5
   16978:	500f883a 	mov	r7,r10
   1697c:	41000017 	ldw	r4,0(r8)
   16980:	4a400104 	addi	r9,r9,4
   16984:	39ffff04 	addi	r7,r7,-4
   16988:	493fff15 	stw	r4,-4(r9)
   1698c:	42000104 	addi	r8,r8,4
   16990:	59fffa36 	bltu	r11,r7,1697c <__alt_data_end+0xfc01697c>
   16994:	513fff04 	addi	r4,r10,-4
   16998:	2008d0ba 	srli	r4,r4,2
   1699c:	318000cc 	andi	r6,r6,3
   169a0:	21000044 	addi	r4,r4,1
   169a4:	2109883a 	add	r4,r4,r4
   169a8:	2109883a 	add	r4,r4,r4
   169ac:	1907883a 	add	r3,r3,r4
   169b0:	290b883a 	add	r5,r5,r4
   169b4:	30000b26 	beq	r6,zero,169e4 <memmove+0x150>
   169b8:	198d883a 	add	r6,r3,r6
   169bc:	29c00003 	ldbu	r7,0(r5)
   169c0:	18c00044 	addi	r3,r3,1
   169c4:	29400044 	addi	r5,r5,1
   169c8:	19ffffc5 	stb	r7,-1(r3)
   169cc:	19bffb1e 	bne	r3,r6,169bc <__alt_data_end+0xfc0169bc>
   169d0:	f800283a 	ret
   169d4:	1007883a 	mov	r3,r2
   169d8:	003ff606 	br	169b4 <__alt_data_end+0xfc0169b4>
   169dc:	1007883a 	mov	r3,r2
   169e0:	003ff506 	br	169b8 <__alt_data_end+0xfc0169b8>
   169e4:	f800283a 	ret
   169e8:	500d883a 	mov	r6,r10
   169ec:	003ff106 	br	169b4 <__alt_data_end+0xfc0169b4>

000169f0 <_Balloc>:
   169f0:	20801317 	ldw	r2,76(r4)
   169f4:	defffc04 	addi	sp,sp,-16
   169f8:	dc400115 	stw	r17,4(sp)
   169fc:	dc000015 	stw	r16,0(sp)
   16a00:	dfc00315 	stw	ra,12(sp)
   16a04:	dc800215 	stw	r18,8(sp)
   16a08:	2023883a 	mov	r17,r4
   16a0c:	2821883a 	mov	r16,r5
   16a10:	10000f26 	beq	r2,zero,16a50 <_Balloc+0x60>
   16a14:	8407883a 	add	r3,r16,r16
   16a18:	18c7883a 	add	r3,r3,r3
   16a1c:	10c7883a 	add	r3,r2,r3
   16a20:	18800017 	ldw	r2,0(r3)
   16a24:	10001126 	beq	r2,zero,16a6c <_Balloc+0x7c>
   16a28:	11000017 	ldw	r4,0(r2)
   16a2c:	19000015 	stw	r4,0(r3)
   16a30:	10000415 	stw	zero,16(r2)
   16a34:	10000315 	stw	zero,12(r2)
   16a38:	dfc00317 	ldw	ra,12(sp)
   16a3c:	dc800217 	ldw	r18,8(sp)
   16a40:	dc400117 	ldw	r17,4(sp)
   16a44:	dc000017 	ldw	r16,0(sp)
   16a48:	dec00404 	addi	sp,sp,16
   16a4c:	f800283a 	ret
   16a50:	01800844 	movi	r6,33
   16a54:	01400104 	movi	r5,4
   16a58:	001b1980 	call	1b198 <_calloc_r>
   16a5c:	88801315 	stw	r2,76(r17)
   16a60:	103fec1e 	bne	r2,zero,16a14 <__alt_data_end+0xfc016a14>
   16a64:	0005883a 	mov	r2,zero
   16a68:	003ff306 	br	16a38 <__alt_data_end+0xfc016a38>
   16a6c:	01400044 	movi	r5,1
   16a70:	2c24983a 	sll	r18,r5,r16
   16a74:	8809883a 	mov	r4,r17
   16a78:	91800144 	addi	r6,r18,5
   16a7c:	318d883a 	add	r6,r6,r6
   16a80:	318d883a 	add	r6,r6,r6
   16a84:	001b1980 	call	1b198 <_calloc_r>
   16a88:	103ff626 	beq	r2,zero,16a64 <__alt_data_end+0xfc016a64>
   16a8c:	14000115 	stw	r16,4(r2)
   16a90:	14800215 	stw	r18,8(r2)
   16a94:	003fe606 	br	16a30 <__alt_data_end+0xfc016a30>

00016a98 <_Bfree>:
   16a98:	28000826 	beq	r5,zero,16abc <_Bfree+0x24>
   16a9c:	28c00117 	ldw	r3,4(r5)
   16aa0:	20801317 	ldw	r2,76(r4)
   16aa4:	18c7883a 	add	r3,r3,r3
   16aa8:	18c7883a 	add	r3,r3,r3
   16aac:	10c5883a 	add	r2,r2,r3
   16ab0:	10c00017 	ldw	r3,0(r2)
   16ab4:	28c00015 	stw	r3,0(r5)
   16ab8:	11400015 	stw	r5,0(r2)
   16abc:	f800283a 	ret

00016ac0 <__multadd>:
   16ac0:	defff704 	addi	sp,sp,-36
   16ac4:	dc800215 	stw	r18,8(sp)
   16ac8:	2c800417 	ldw	r18,16(r5)
   16acc:	dd800615 	stw	r22,24(sp)
   16ad0:	dd400515 	stw	r21,20(sp)
   16ad4:	dd000415 	stw	r20,16(sp)
   16ad8:	dcc00315 	stw	r19,12(sp)
   16adc:	dc400115 	stw	r17,4(sp)
   16ae0:	dc000015 	stw	r16,0(sp)
   16ae4:	dfc00815 	stw	ra,32(sp)
   16ae8:	ddc00715 	stw	r23,28(sp)
   16aec:	2827883a 	mov	r19,r5
   16af0:	2029883a 	mov	r20,r4
   16af4:	3023883a 	mov	r17,r6
   16af8:	3821883a 	mov	r16,r7
   16afc:	2d400504 	addi	r21,r5,20
   16b00:	002d883a 	mov	r22,zero
   16b04:	adc00017 	ldw	r23,0(r21)
   16b08:	880b883a 	mov	r5,r17
   16b0c:	ad400104 	addi	r21,r21,4
   16b10:	b93fffcc 	andi	r4,r23,65535
   16b14:	000ccac0 	call	ccac <__mulsi3>
   16b18:	b808d43a 	srli	r4,r23,16
   16b1c:	880b883a 	mov	r5,r17
   16b20:	1421883a 	add	r16,r2,r16
   16b24:	000ccac0 	call	ccac <__mulsi3>
   16b28:	800ed43a 	srli	r7,r16,16
   16b2c:	80ffffcc 	andi	r3,r16,65535
   16b30:	b5800044 	addi	r22,r22,1
   16b34:	11c5883a 	add	r2,r2,r7
   16b38:	100e943a 	slli	r7,r2,16
   16b3c:	1020d43a 	srli	r16,r2,16
   16b40:	38c7883a 	add	r3,r7,r3
   16b44:	a8ffff15 	stw	r3,-4(r21)
   16b48:	b4bfee16 	blt	r22,r18,16b04 <__alt_data_end+0xfc016b04>
   16b4c:	80000926 	beq	r16,zero,16b74 <__multadd+0xb4>
   16b50:	98800217 	ldw	r2,8(r19)
   16b54:	9080130e 	bge	r18,r2,16ba4 <__multadd+0xe4>
   16b58:	90800144 	addi	r2,r18,5
   16b5c:	1085883a 	add	r2,r2,r2
   16b60:	1085883a 	add	r2,r2,r2
   16b64:	9885883a 	add	r2,r19,r2
   16b68:	14000015 	stw	r16,0(r2)
   16b6c:	94800044 	addi	r18,r18,1
   16b70:	9c800415 	stw	r18,16(r19)
   16b74:	9805883a 	mov	r2,r19
   16b78:	dfc00817 	ldw	ra,32(sp)
   16b7c:	ddc00717 	ldw	r23,28(sp)
   16b80:	dd800617 	ldw	r22,24(sp)
   16b84:	dd400517 	ldw	r21,20(sp)
   16b88:	dd000417 	ldw	r20,16(sp)
   16b8c:	dcc00317 	ldw	r19,12(sp)
   16b90:	dc800217 	ldw	r18,8(sp)
   16b94:	dc400117 	ldw	r17,4(sp)
   16b98:	dc000017 	ldw	r16,0(sp)
   16b9c:	dec00904 	addi	sp,sp,36
   16ba0:	f800283a 	ret
   16ba4:	99400117 	ldw	r5,4(r19)
   16ba8:	a009883a 	mov	r4,r20
   16bac:	29400044 	addi	r5,r5,1
   16bb0:	00169f00 	call	169f0 <_Balloc>
   16bb4:	99800417 	ldw	r6,16(r19)
   16bb8:	99400304 	addi	r5,r19,12
   16bbc:	11000304 	addi	r4,r2,12
   16bc0:	31800084 	addi	r6,r6,2
   16bc4:	318d883a 	add	r6,r6,r6
   16bc8:	318d883a 	add	r6,r6,r6
   16bcc:	1023883a 	mov	r17,r2
   16bd0:	000ea600 	call	ea60 <memcpy>
   16bd4:	98000a26 	beq	r19,zero,16c00 <__multadd+0x140>
   16bd8:	98c00117 	ldw	r3,4(r19)
   16bdc:	a0801317 	ldw	r2,76(r20)
   16be0:	18c7883a 	add	r3,r3,r3
   16be4:	18c7883a 	add	r3,r3,r3
   16be8:	10c5883a 	add	r2,r2,r3
   16bec:	10c00017 	ldw	r3,0(r2)
   16bf0:	98c00015 	stw	r3,0(r19)
   16bf4:	14c00015 	stw	r19,0(r2)
   16bf8:	8827883a 	mov	r19,r17
   16bfc:	003fd606 	br	16b58 <__alt_data_end+0xfc016b58>
   16c00:	8827883a 	mov	r19,r17
   16c04:	003fd406 	br	16b58 <__alt_data_end+0xfc016b58>

00016c08 <__s2b>:
   16c08:	defff904 	addi	sp,sp,-28
   16c0c:	dc400115 	stw	r17,4(sp)
   16c10:	dc000015 	stw	r16,0(sp)
   16c14:	2023883a 	mov	r17,r4
   16c18:	2821883a 	mov	r16,r5
   16c1c:	39000204 	addi	r4,r7,8
   16c20:	01400244 	movi	r5,9
   16c24:	dcc00315 	stw	r19,12(sp)
   16c28:	dc800215 	stw	r18,8(sp)
   16c2c:	dfc00615 	stw	ra,24(sp)
   16c30:	dd400515 	stw	r21,20(sp)
   16c34:	dd000415 	stw	r20,16(sp)
   16c38:	3825883a 	mov	r18,r7
   16c3c:	3027883a 	mov	r19,r6
   16c40:	000caf80 	call	caf8 <__divsi3>
   16c44:	00c00044 	movi	r3,1
   16c48:	000b883a 	mov	r5,zero
   16c4c:	1880030e 	bge	r3,r2,16c5c <__s2b+0x54>
   16c50:	18c7883a 	add	r3,r3,r3
   16c54:	29400044 	addi	r5,r5,1
   16c58:	18bffd16 	blt	r3,r2,16c50 <__alt_data_end+0xfc016c50>
   16c5c:	8809883a 	mov	r4,r17
   16c60:	00169f00 	call	169f0 <_Balloc>
   16c64:	d8c00717 	ldw	r3,28(sp)
   16c68:	10c00515 	stw	r3,20(r2)
   16c6c:	00c00044 	movi	r3,1
   16c70:	10c00415 	stw	r3,16(r2)
   16c74:	00c00244 	movi	r3,9
   16c78:	1cc0210e 	bge	r3,r19,16d00 <__s2b+0xf8>
   16c7c:	80eb883a 	add	r21,r16,r3
   16c80:	a829883a 	mov	r20,r21
   16c84:	84e1883a 	add	r16,r16,r19
   16c88:	a1c00007 	ldb	r7,0(r20)
   16c8c:	01800284 	movi	r6,10
   16c90:	a5000044 	addi	r20,r20,1
   16c94:	100b883a 	mov	r5,r2
   16c98:	39fff404 	addi	r7,r7,-48
   16c9c:	8809883a 	mov	r4,r17
   16ca0:	0016ac00 	call	16ac0 <__multadd>
   16ca4:	a43ff81e 	bne	r20,r16,16c88 <__alt_data_end+0xfc016c88>
   16ca8:	ace1883a 	add	r16,r21,r19
   16cac:	843ffe04 	addi	r16,r16,-8
   16cb0:	9c800a0e 	bge	r19,r18,16cdc <__s2b+0xd4>
   16cb4:	94e5c83a 	sub	r18,r18,r19
   16cb8:	84a5883a 	add	r18,r16,r18
   16cbc:	81c00007 	ldb	r7,0(r16)
   16cc0:	01800284 	movi	r6,10
   16cc4:	84000044 	addi	r16,r16,1
   16cc8:	100b883a 	mov	r5,r2
   16ccc:	39fff404 	addi	r7,r7,-48
   16cd0:	8809883a 	mov	r4,r17
   16cd4:	0016ac00 	call	16ac0 <__multadd>
   16cd8:	84bff81e 	bne	r16,r18,16cbc <__alt_data_end+0xfc016cbc>
   16cdc:	dfc00617 	ldw	ra,24(sp)
   16ce0:	dd400517 	ldw	r21,20(sp)
   16ce4:	dd000417 	ldw	r20,16(sp)
   16ce8:	dcc00317 	ldw	r19,12(sp)
   16cec:	dc800217 	ldw	r18,8(sp)
   16cf0:	dc400117 	ldw	r17,4(sp)
   16cf4:	dc000017 	ldw	r16,0(sp)
   16cf8:	dec00704 	addi	sp,sp,28
   16cfc:	f800283a 	ret
   16d00:	84000284 	addi	r16,r16,10
   16d04:	1827883a 	mov	r19,r3
   16d08:	003fe906 	br	16cb0 <__alt_data_end+0xfc016cb0>

00016d0c <__hi0bits>:
   16d0c:	20bfffec 	andhi	r2,r4,65535
   16d10:	1000141e 	bne	r2,zero,16d64 <__hi0bits+0x58>
   16d14:	2008943a 	slli	r4,r4,16
   16d18:	00800404 	movi	r2,16
   16d1c:	20ffc02c 	andhi	r3,r4,65280
   16d20:	1800021e 	bne	r3,zero,16d2c <__hi0bits+0x20>
   16d24:	2008923a 	slli	r4,r4,8
   16d28:	10800204 	addi	r2,r2,8
   16d2c:	20fc002c 	andhi	r3,r4,61440
   16d30:	1800021e 	bne	r3,zero,16d3c <__hi0bits+0x30>
   16d34:	2008913a 	slli	r4,r4,4
   16d38:	10800104 	addi	r2,r2,4
   16d3c:	20f0002c 	andhi	r3,r4,49152
   16d40:	1800031e 	bne	r3,zero,16d50 <__hi0bits+0x44>
   16d44:	2109883a 	add	r4,r4,r4
   16d48:	10800084 	addi	r2,r2,2
   16d4c:	2109883a 	add	r4,r4,r4
   16d50:	20000316 	blt	r4,zero,16d60 <__hi0bits+0x54>
   16d54:	2110002c 	andhi	r4,r4,16384
   16d58:	2000041e 	bne	r4,zero,16d6c <__hi0bits+0x60>
   16d5c:	00800804 	movi	r2,32
   16d60:	f800283a 	ret
   16d64:	0005883a 	mov	r2,zero
   16d68:	003fec06 	br	16d1c <__alt_data_end+0xfc016d1c>
   16d6c:	10800044 	addi	r2,r2,1
   16d70:	f800283a 	ret

00016d74 <__lo0bits>:
   16d74:	20c00017 	ldw	r3,0(r4)
   16d78:	188001cc 	andi	r2,r3,7
   16d7c:	10000826 	beq	r2,zero,16da0 <__lo0bits+0x2c>
   16d80:	1880004c 	andi	r2,r3,1
   16d84:	1000211e 	bne	r2,zero,16e0c <__lo0bits+0x98>
   16d88:	1880008c 	andi	r2,r3,2
   16d8c:	1000211e 	bne	r2,zero,16e14 <__lo0bits+0xa0>
   16d90:	1806d0ba 	srli	r3,r3,2
   16d94:	00800084 	movi	r2,2
   16d98:	20c00015 	stw	r3,0(r4)
   16d9c:	f800283a 	ret
   16da0:	18bfffcc 	andi	r2,r3,65535
   16da4:	10001326 	beq	r2,zero,16df4 <__lo0bits+0x80>
   16da8:	0005883a 	mov	r2,zero
   16dac:	19403fcc 	andi	r5,r3,255
   16db0:	2800021e 	bne	r5,zero,16dbc <__lo0bits+0x48>
   16db4:	1806d23a 	srli	r3,r3,8
   16db8:	10800204 	addi	r2,r2,8
   16dbc:	194003cc 	andi	r5,r3,15
   16dc0:	2800021e 	bne	r5,zero,16dcc <__lo0bits+0x58>
   16dc4:	1806d13a 	srli	r3,r3,4
   16dc8:	10800104 	addi	r2,r2,4
   16dcc:	194000cc 	andi	r5,r3,3
   16dd0:	2800021e 	bne	r5,zero,16ddc <__lo0bits+0x68>
   16dd4:	1806d0ba 	srli	r3,r3,2
   16dd8:	10800084 	addi	r2,r2,2
   16ddc:	1940004c 	andi	r5,r3,1
   16de0:	2800081e 	bne	r5,zero,16e04 <__lo0bits+0x90>
   16de4:	1806d07a 	srli	r3,r3,1
   16de8:	1800051e 	bne	r3,zero,16e00 <__lo0bits+0x8c>
   16dec:	00800804 	movi	r2,32
   16df0:	f800283a 	ret
   16df4:	1806d43a 	srli	r3,r3,16
   16df8:	00800404 	movi	r2,16
   16dfc:	003feb06 	br	16dac <__alt_data_end+0xfc016dac>
   16e00:	10800044 	addi	r2,r2,1
   16e04:	20c00015 	stw	r3,0(r4)
   16e08:	f800283a 	ret
   16e0c:	0005883a 	mov	r2,zero
   16e10:	f800283a 	ret
   16e14:	1806d07a 	srli	r3,r3,1
   16e18:	00800044 	movi	r2,1
   16e1c:	20c00015 	stw	r3,0(r4)
   16e20:	f800283a 	ret

00016e24 <__i2b>:
   16e24:	defffd04 	addi	sp,sp,-12
   16e28:	dc000015 	stw	r16,0(sp)
   16e2c:	04000044 	movi	r16,1
   16e30:	dc400115 	stw	r17,4(sp)
   16e34:	2823883a 	mov	r17,r5
   16e38:	800b883a 	mov	r5,r16
   16e3c:	dfc00215 	stw	ra,8(sp)
   16e40:	00169f00 	call	169f0 <_Balloc>
   16e44:	14400515 	stw	r17,20(r2)
   16e48:	14000415 	stw	r16,16(r2)
   16e4c:	dfc00217 	ldw	ra,8(sp)
   16e50:	dc400117 	ldw	r17,4(sp)
   16e54:	dc000017 	ldw	r16,0(sp)
   16e58:	dec00304 	addi	sp,sp,12
   16e5c:	f800283a 	ret

00016e60 <__multiply>:
   16e60:	deffef04 	addi	sp,sp,-68
   16e64:	dc400815 	stw	r17,32(sp)
   16e68:	dc000715 	stw	r16,28(sp)
   16e6c:	34400417 	ldw	r17,16(r6)
   16e70:	2c000417 	ldw	r16,16(r5)
   16e74:	dd800d15 	stw	r22,52(sp)
   16e78:	dc800915 	stw	r18,36(sp)
   16e7c:	dfc01015 	stw	ra,64(sp)
   16e80:	df000f15 	stw	fp,60(sp)
   16e84:	ddc00e15 	stw	r23,56(sp)
   16e88:	dd400c15 	stw	r21,48(sp)
   16e8c:	dd000b15 	stw	r20,44(sp)
   16e90:	dcc00a15 	stw	r19,40(sp)
   16e94:	2825883a 	mov	r18,r5
   16e98:	302d883a 	mov	r22,r6
   16e9c:	8440050e 	bge	r16,r17,16eb4 <__multiply+0x54>
   16ea0:	8007883a 	mov	r3,r16
   16ea4:	3025883a 	mov	r18,r6
   16ea8:	8821883a 	mov	r16,r17
   16eac:	282d883a 	mov	r22,r5
   16eb0:	1823883a 	mov	r17,r3
   16eb4:	90800217 	ldw	r2,8(r18)
   16eb8:	8447883a 	add	r3,r16,r17
   16ebc:	d8c00215 	stw	r3,8(sp)
   16ec0:	91400117 	ldw	r5,4(r18)
   16ec4:	10c0010e 	bge	r2,r3,16ecc <__multiply+0x6c>
   16ec8:	29400044 	addi	r5,r5,1
   16ecc:	00169f00 	call	169f0 <_Balloc>
   16ed0:	d8c00217 	ldw	r3,8(sp)
   16ed4:	d8800615 	stw	r2,24(sp)
   16ed8:	18eb883a 	add	r21,r3,r3
   16edc:	ad6b883a 	add	r21,r21,r21
   16ee0:	10c00504 	addi	r3,r2,20
   16ee4:	1d6b883a 	add	r21,r3,r21
   16ee8:	d8c00115 	stw	r3,4(sp)
   16eec:	dd400315 	stw	r21,12(sp)
   16ef0:	1805883a 	mov	r2,r3
   16ef4:	1d40042e 	bgeu	r3,r21,16f08 <__multiply+0xa8>
   16ef8:	d8c00317 	ldw	r3,12(sp)
   16efc:	10000015 	stw	zero,0(r2)
   16f00:	10800104 	addi	r2,r2,4
   16f04:	10fffc36 	bltu	r2,r3,16ef8 <__alt_data_end+0xfc016ef8>
   16f08:	8c63883a 	add	r17,r17,r17
   16f0c:	b5800504 	addi	r22,r22,20
   16f10:	8c63883a 	add	r17,r17,r17
   16f14:	94800504 	addi	r18,r18,20
   16f18:	8421883a 	add	r16,r16,r16
   16f1c:	b463883a 	add	r17,r22,r17
   16f20:	8421883a 	add	r16,r16,r16
   16f24:	dd800015 	stw	r22,0(sp)
   16f28:	dc800415 	stw	r18,16(sp)
   16f2c:	dc400515 	stw	r17,20(sp)
   16f30:	9429883a 	add	r20,r18,r16
   16f34:	b4404f2e 	bgeu	r22,r17,17074 <__multiply+0x214>
   16f38:	d8c00017 	ldw	r3,0(sp)
   16f3c:	1c800017 	ldw	r18,0(r3)
   16f40:	947fffcc 	andi	r17,r18,65535
   16f44:	88001e26 	beq	r17,zero,16fc0 <__multiply+0x160>
   16f48:	dd800117 	ldw	r22,4(sp)
   16f4c:	dd400417 	ldw	r21,16(sp)
   16f50:	0027883a 	mov	r19,zero
   16f54:	ac800017 	ldw	r18,0(r21)
   16f58:	b4000017 	ldw	r16,0(r22)
   16f5c:	880b883a 	mov	r5,r17
   16f60:	913fffcc 	andi	r4,r18,65535
   16f64:	000ccac0 	call	ccac <__mulsi3>
   16f68:	9008d43a 	srli	r4,r18,16
   16f6c:	84bfffcc 	andi	r18,r16,65535
   16f70:	1485883a 	add	r2,r2,r18
   16f74:	14e5883a 	add	r18,r2,r19
   16f78:	8020d43a 	srli	r16,r16,16
   16f7c:	9026d43a 	srli	r19,r18,16
   16f80:	880b883a 	mov	r5,r17
   16f84:	000ccac0 	call	ccac <__mulsi3>
   16f88:	1405883a 	add	r2,r2,r16
   16f8c:	14e1883a 	add	r16,r2,r19
   16f90:	90ffffcc 	andi	r3,r18,65535
   16f94:	8024943a 	slli	r18,r16,16
   16f98:	ad400104 	addi	r21,r21,4
   16f9c:	b005883a 	mov	r2,r22
   16fa0:	90c6b03a 	or	r3,r18,r3
   16fa4:	b0c00015 	stw	r3,0(r22)
   16fa8:	8026d43a 	srli	r19,r16,16
   16fac:	b5800104 	addi	r22,r22,4
   16fb0:	ad3fe836 	bltu	r21,r20,16f54 <__alt_data_end+0xfc016f54>
   16fb4:	d8c00017 	ldw	r3,0(sp)
   16fb8:	14c00115 	stw	r19,4(r2)
   16fbc:	1c800017 	ldw	r18,0(r3)
   16fc0:	9024d43a 	srli	r18,r18,16
   16fc4:	90002226 	beq	r18,zero,17050 <__multiply+0x1f0>
   16fc8:	d8c00117 	ldw	r3,4(sp)
   16fcc:	dd800417 	ldw	r22,16(sp)
   16fd0:	002f883a 	mov	r23,zero
   16fd4:	1f000017 	ldw	fp,0(r3)
   16fd8:	1823883a 	mov	r17,r3
   16fdc:	182b883a 	mov	r21,r3
   16fe0:	e021883a 	mov	r16,fp
   16fe4:	00000106 	br	16fec <__multiply+0x18c>
   16fe8:	982b883a 	mov	r21,r19
   16fec:	b100000b 	ldhu	r4,0(r22)
   16ff0:	8020d43a 	srli	r16,r16,16
   16ff4:	900b883a 	mov	r5,r18
   16ff8:	000ccac0 	call	ccac <__mulsi3>
   16ffc:	1405883a 	add	r2,r2,r16
   17000:	15ef883a 	add	r23,r2,r23
   17004:	b804943a 	slli	r2,r23,16
   17008:	e0ffffcc 	andi	r3,fp,65535
   1700c:	8c400104 	addi	r17,r17,4
   17010:	10c6b03a 	or	r3,r2,r3
   17014:	88ffff15 	stw	r3,-4(r17)
   17018:	b5800104 	addi	r22,r22,4
   1701c:	b13fff17 	ldw	r4,-4(r22)
   17020:	acc00104 	addi	r19,r21,4
   17024:	900b883a 	mov	r5,r18
   17028:	2008d43a 	srli	r4,r4,16
   1702c:	9c000017 	ldw	r16,0(r19)
   17030:	000ccac0 	call	ccac <__mulsi3>
   17034:	b806d43a 	srli	r3,r23,16
   17038:	813fffcc 	andi	r4,r16,65535
   1703c:	1105883a 	add	r2,r2,r4
   17040:	10f9883a 	add	fp,r2,r3
   17044:	e02ed43a 	srli	r23,fp,16
   17048:	b53fe736 	bltu	r22,r20,16fe8 <__alt_data_end+0xfc016fe8>
   1704c:	af000115 	stw	fp,4(r21)
   17050:	d8c00017 	ldw	r3,0(sp)
   17054:	d9000517 	ldw	r4,20(sp)
   17058:	18c00104 	addi	r3,r3,4
   1705c:	d8c00015 	stw	r3,0(sp)
   17060:	d8c00117 	ldw	r3,4(sp)
   17064:	18c00104 	addi	r3,r3,4
   17068:	d8c00115 	stw	r3,4(sp)
   1706c:	d8c00017 	ldw	r3,0(sp)
   17070:	193fb136 	bltu	r3,r4,16f38 <__alt_data_end+0xfc016f38>
   17074:	d8c00217 	ldw	r3,8(sp)
   17078:	00c00c0e 	bge	zero,r3,170ac <__multiply+0x24c>
   1707c:	d8c00317 	ldw	r3,12(sp)
   17080:	18bfff17 	ldw	r2,-4(r3)
   17084:	1d7fff04 	addi	r21,r3,-4
   17088:	10000326 	beq	r2,zero,17098 <__multiply+0x238>
   1708c:	00000706 	br	170ac <__multiply+0x24c>
   17090:	a8800017 	ldw	r2,0(r21)
   17094:	1000051e 	bne	r2,zero,170ac <__multiply+0x24c>
   17098:	d8c00217 	ldw	r3,8(sp)
   1709c:	ad7fff04 	addi	r21,r21,-4
   170a0:	18ffffc4 	addi	r3,r3,-1
   170a4:	d8c00215 	stw	r3,8(sp)
   170a8:	183ff91e 	bne	r3,zero,17090 <__alt_data_end+0xfc017090>
   170ac:	d8c00617 	ldw	r3,24(sp)
   170b0:	d9000217 	ldw	r4,8(sp)
   170b4:	1805883a 	mov	r2,r3
   170b8:	19000415 	stw	r4,16(r3)
   170bc:	dfc01017 	ldw	ra,64(sp)
   170c0:	df000f17 	ldw	fp,60(sp)
   170c4:	ddc00e17 	ldw	r23,56(sp)
   170c8:	dd800d17 	ldw	r22,52(sp)
   170cc:	dd400c17 	ldw	r21,48(sp)
   170d0:	dd000b17 	ldw	r20,44(sp)
   170d4:	dcc00a17 	ldw	r19,40(sp)
   170d8:	dc800917 	ldw	r18,36(sp)
   170dc:	dc400817 	ldw	r17,32(sp)
   170e0:	dc000717 	ldw	r16,28(sp)
   170e4:	dec01104 	addi	sp,sp,68
   170e8:	f800283a 	ret

000170ec <__pow5mult>:
   170ec:	defffa04 	addi	sp,sp,-24
   170f0:	dcc00315 	stw	r19,12(sp)
   170f4:	dc000015 	stw	r16,0(sp)
   170f8:	dfc00515 	stw	ra,20(sp)
   170fc:	dd000415 	stw	r20,16(sp)
   17100:	dc800215 	stw	r18,8(sp)
   17104:	dc400115 	stw	r17,4(sp)
   17108:	308000cc 	andi	r2,r6,3
   1710c:	3021883a 	mov	r16,r6
   17110:	2027883a 	mov	r19,r4
   17114:	10002f1e 	bne	r2,zero,171d4 <__pow5mult+0xe8>
   17118:	2825883a 	mov	r18,r5
   1711c:	8021d0ba 	srai	r16,r16,2
   17120:	80001a26 	beq	r16,zero,1718c <__pow5mult+0xa0>
   17124:	9c401217 	ldw	r17,72(r19)
   17128:	8800061e 	bne	r17,zero,17144 <__pow5mult+0x58>
   1712c:	00003406 	br	17200 <__pow5mult+0x114>
   17130:	8021d07a 	srai	r16,r16,1
   17134:	80001526 	beq	r16,zero,1718c <__pow5mult+0xa0>
   17138:	88800017 	ldw	r2,0(r17)
   1713c:	10001c26 	beq	r2,zero,171b0 <__pow5mult+0xc4>
   17140:	1023883a 	mov	r17,r2
   17144:	8080004c 	andi	r2,r16,1
   17148:	103ff926 	beq	r2,zero,17130 <__alt_data_end+0xfc017130>
   1714c:	880d883a 	mov	r6,r17
   17150:	900b883a 	mov	r5,r18
   17154:	9809883a 	mov	r4,r19
   17158:	0016e600 	call	16e60 <__multiply>
   1715c:	90001b26 	beq	r18,zero,171cc <__pow5mult+0xe0>
   17160:	91000117 	ldw	r4,4(r18)
   17164:	98c01317 	ldw	r3,76(r19)
   17168:	8021d07a 	srai	r16,r16,1
   1716c:	2109883a 	add	r4,r4,r4
   17170:	2109883a 	add	r4,r4,r4
   17174:	1907883a 	add	r3,r3,r4
   17178:	19000017 	ldw	r4,0(r3)
   1717c:	91000015 	stw	r4,0(r18)
   17180:	1c800015 	stw	r18,0(r3)
   17184:	1025883a 	mov	r18,r2
   17188:	803feb1e 	bne	r16,zero,17138 <__alt_data_end+0xfc017138>
   1718c:	9005883a 	mov	r2,r18
   17190:	dfc00517 	ldw	ra,20(sp)
   17194:	dd000417 	ldw	r20,16(sp)
   17198:	dcc00317 	ldw	r19,12(sp)
   1719c:	dc800217 	ldw	r18,8(sp)
   171a0:	dc400117 	ldw	r17,4(sp)
   171a4:	dc000017 	ldw	r16,0(sp)
   171a8:	dec00604 	addi	sp,sp,24
   171ac:	f800283a 	ret
   171b0:	880d883a 	mov	r6,r17
   171b4:	880b883a 	mov	r5,r17
   171b8:	9809883a 	mov	r4,r19
   171bc:	0016e600 	call	16e60 <__multiply>
   171c0:	88800015 	stw	r2,0(r17)
   171c4:	10000015 	stw	zero,0(r2)
   171c8:	003fdd06 	br	17140 <__alt_data_end+0xfc017140>
   171cc:	1025883a 	mov	r18,r2
   171d0:	003fd706 	br	17130 <__alt_data_end+0xfc017130>
   171d4:	10bfffc4 	addi	r2,r2,-1
   171d8:	1085883a 	add	r2,r2,r2
   171dc:	00c000f4 	movhi	r3,3
   171e0:	18ea2a04 	addi	r3,r3,-22360
   171e4:	1085883a 	add	r2,r2,r2
   171e8:	1885883a 	add	r2,r3,r2
   171ec:	11800017 	ldw	r6,0(r2)
   171f0:	000f883a 	mov	r7,zero
   171f4:	0016ac00 	call	16ac0 <__multadd>
   171f8:	1025883a 	mov	r18,r2
   171fc:	003fc706 	br	1711c <__alt_data_end+0xfc01711c>
   17200:	05000044 	movi	r20,1
   17204:	a00b883a 	mov	r5,r20
   17208:	9809883a 	mov	r4,r19
   1720c:	00169f00 	call	169f0 <_Balloc>
   17210:	1023883a 	mov	r17,r2
   17214:	00809c44 	movi	r2,625
   17218:	88800515 	stw	r2,20(r17)
   1721c:	8d000415 	stw	r20,16(r17)
   17220:	9c401215 	stw	r17,72(r19)
   17224:	88000015 	stw	zero,0(r17)
   17228:	003fc606 	br	17144 <__alt_data_end+0xfc017144>

0001722c <__lshift>:
   1722c:	defff904 	addi	sp,sp,-28
   17230:	dd400515 	stw	r21,20(sp)
   17234:	dcc00315 	stw	r19,12(sp)
   17238:	302bd17a 	srai	r21,r6,5
   1723c:	2cc00417 	ldw	r19,16(r5)
   17240:	28800217 	ldw	r2,8(r5)
   17244:	dd000415 	stw	r20,16(sp)
   17248:	ace7883a 	add	r19,r21,r19
   1724c:	dc800215 	stw	r18,8(sp)
   17250:	dc400115 	stw	r17,4(sp)
   17254:	dc000015 	stw	r16,0(sp)
   17258:	dfc00615 	stw	ra,24(sp)
   1725c:	9c000044 	addi	r16,r19,1
   17260:	2823883a 	mov	r17,r5
   17264:	3029883a 	mov	r20,r6
   17268:	2025883a 	mov	r18,r4
   1726c:	29400117 	ldw	r5,4(r5)
   17270:	1400030e 	bge	r2,r16,17280 <__lshift+0x54>
   17274:	1085883a 	add	r2,r2,r2
   17278:	29400044 	addi	r5,r5,1
   1727c:	143ffd16 	blt	r2,r16,17274 <__alt_data_end+0xfc017274>
   17280:	9009883a 	mov	r4,r18
   17284:	00169f00 	call	169f0 <_Balloc>
   17288:	10c00504 	addi	r3,r2,20
   1728c:	0540070e 	bge	zero,r21,172ac <__lshift+0x80>
   17290:	ad6b883a 	add	r21,r21,r21
   17294:	ad6b883a 	add	r21,r21,r21
   17298:	1809883a 	mov	r4,r3
   1729c:	1d47883a 	add	r3,r3,r21
   172a0:	20000015 	stw	zero,0(r4)
   172a4:	21000104 	addi	r4,r4,4
   172a8:	193ffd1e 	bne	r3,r4,172a0 <__alt_data_end+0xfc0172a0>
   172ac:	8a000417 	ldw	r8,16(r17)
   172b0:	89000504 	addi	r4,r17,20
   172b4:	a18007cc 	andi	r6,r20,31
   172b8:	4211883a 	add	r8,r8,r8
   172bc:	4211883a 	add	r8,r8,r8
   172c0:	2211883a 	add	r8,r4,r8
   172c4:	30002326 	beq	r6,zero,17354 <__lshift+0x128>
   172c8:	02400804 	movi	r9,32
   172cc:	4993c83a 	sub	r9,r9,r6
   172d0:	000b883a 	mov	r5,zero
   172d4:	21c00017 	ldw	r7,0(r4)
   172d8:	1815883a 	mov	r10,r3
   172dc:	18c00104 	addi	r3,r3,4
   172e0:	398e983a 	sll	r7,r7,r6
   172e4:	21000104 	addi	r4,r4,4
   172e8:	394ab03a 	or	r5,r7,r5
   172ec:	197fff15 	stw	r5,-4(r3)
   172f0:	217fff17 	ldw	r5,-4(r4)
   172f4:	2a4ad83a 	srl	r5,r5,r9
   172f8:	223ff636 	bltu	r4,r8,172d4 <__alt_data_end+0xfc0172d4>
   172fc:	51400115 	stw	r5,4(r10)
   17300:	28001a1e 	bne	r5,zero,1736c <__lshift+0x140>
   17304:	843fffc4 	addi	r16,r16,-1
   17308:	14000415 	stw	r16,16(r2)
   1730c:	88000826 	beq	r17,zero,17330 <__lshift+0x104>
   17310:	89000117 	ldw	r4,4(r17)
   17314:	90c01317 	ldw	r3,76(r18)
   17318:	2109883a 	add	r4,r4,r4
   1731c:	2109883a 	add	r4,r4,r4
   17320:	1907883a 	add	r3,r3,r4
   17324:	19000017 	ldw	r4,0(r3)
   17328:	89000015 	stw	r4,0(r17)
   1732c:	1c400015 	stw	r17,0(r3)
   17330:	dfc00617 	ldw	ra,24(sp)
   17334:	dd400517 	ldw	r21,20(sp)
   17338:	dd000417 	ldw	r20,16(sp)
   1733c:	dcc00317 	ldw	r19,12(sp)
   17340:	dc800217 	ldw	r18,8(sp)
   17344:	dc400117 	ldw	r17,4(sp)
   17348:	dc000017 	ldw	r16,0(sp)
   1734c:	dec00704 	addi	sp,sp,28
   17350:	f800283a 	ret
   17354:	21400017 	ldw	r5,0(r4)
   17358:	18c00104 	addi	r3,r3,4
   1735c:	21000104 	addi	r4,r4,4
   17360:	197fff15 	stw	r5,-4(r3)
   17364:	223ffb36 	bltu	r4,r8,17354 <__alt_data_end+0xfc017354>
   17368:	003fe606 	br	17304 <__alt_data_end+0xfc017304>
   1736c:	9c000084 	addi	r16,r19,2
   17370:	003fe406 	br	17304 <__alt_data_end+0xfc017304>

00017374 <__mcmp>:
   17374:	20800417 	ldw	r2,16(r4)
   17378:	28c00417 	ldw	r3,16(r5)
   1737c:	10c5c83a 	sub	r2,r2,r3
   17380:	1000111e 	bne	r2,zero,173c8 <__mcmp+0x54>
   17384:	18c7883a 	add	r3,r3,r3
   17388:	18c7883a 	add	r3,r3,r3
   1738c:	21000504 	addi	r4,r4,20
   17390:	29400504 	addi	r5,r5,20
   17394:	20c5883a 	add	r2,r4,r3
   17398:	28cb883a 	add	r5,r5,r3
   1739c:	00000106 	br	173a4 <__mcmp+0x30>
   173a0:	20800a2e 	bgeu	r4,r2,173cc <__mcmp+0x58>
   173a4:	10bfff04 	addi	r2,r2,-4
   173a8:	297fff04 	addi	r5,r5,-4
   173ac:	11800017 	ldw	r6,0(r2)
   173b0:	28c00017 	ldw	r3,0(r5)
   173b4:	30fffa26 	beq	r6,r3,173a0 <__alt_data_end+0xfc0173a0>
   173b8:	30c00236 	bltu	r6,r3,173c4 <__mcmp+0x50>
   173bc:	00800044 	movi	r2,1
   173c0:	f800283a 	ret
   173c4:	00bfffc4 	movi	r2,-1
   173c8:	f800283a 	ret
   173cc:	0005883a 	mov	r2,zero
   173d0:	f800283a 	ret

000173d4 <__mdiff>:
   173d4:	28c00417 	ldw	r3,16(r5)
   173d8:	30800417 	ldw	r2,16(r6)
   173dc:	defffa04 	addi	sp,sp,-24
   173e0:	dcc00315 	stw	r19,12(sp)
   173e4:	dc800215 	stw	r18,8(sp)
   173e8:	dfc00515 	stw	ra,20(sp)
   173ec:	dd000415 	stw	r20,16(sp)
   173f0:	dc400115 	stw	r17,4(sp)
   173f4:	dc000015 	stw	r16,0(sp)
   173f8:	1887c83a 	sub	r3,r3,r2
   173fc:	2825883a 	mov	r18,r5
   17400:	3027883a 	mov	r19,r6
   17404:	1800141e 	bne	r3,zero,17458 <__mdiff+0x84>
   17408:	1085883a 	add	r2,r2,r2
   1740c:	1085883a 	add	r2,r2,r2
   17410:	2a000504 	addi	r8,r5,20
   17414:	34000504 	addi	r16,r6,20
   17418:	4087883a 	add	r3,r8,r2
   1741c:	8085883a 	add	r2,r16,r2
   17420:	00000106 	br	17428 <__mdiff+0x54>
   17424:	40c0592e 	bgeu	r8,r3,1758c <__mdiff+0x1b8>
   17428:	18ffff04 	addi	r3,r3,-4
   1742c:	10bfff04 	addi	r2,r2,-4
   17430:	19c00017 	ldw	r7,0(r3)
   17434:	11400017 	ldw	r5,0(r2)
   17438:	397ffa26 	beq	r7,r5,17424 <__alt_data_end+0xfc017424>
   1743c:	3940592e 	bgeu	r7,r5,175a4 <__mdiff+0x1d0>
   17440:	9005883a 	mov	r2,r18
   17444:	4023883a 	mov	r17,r8
   17448:	9825883a 	mov	r18,r19
   1744c:	05000044 	movi	r20,1
   17450:	1027883a 	mov	r19,r2
   17454:	00000406 	br	17468 <__mdiff+0x94>
   17458:	18005616 	blt	r3,zero,175b4 <__mdiff+0x1e0>
   1745c:	34400504 	addi	r17,r6,20
   17460:	2c000504 	addi	r16,r5,20
   17464:	0029883a 	mov	r20,zero
   17468:	91400117 	ldw	r5,4(r18)
   1746c:	00169f00 	call	169f0 <_Balloc>
   17470:	92400417 	ldw	r9,16(r18)
   17474:	9b000417 	ldw	r12,16(r19)
   17478:	12c00504 	addi	r11,r2,20
   1747c:	4a51883a 	add	r8,r9,r9
   17480:	6319883a 	add	r12,r12,r12
   17484:	4211883a 	add	r8,r8,r8
   17488:	6319883a 	add	r12,r12,r12
   1748c:	15000315 	stw	r20,12(r2)
   17490:	8211883a 	add	r8,r16,r8
   17494:	8b19883a 	add	r12,r17,r12
   17498:	0007883a 	mov	r3,zero
   1749c:	81400017 	ldw	r5,0(r16)
   174a0:	89c00017 	ldw	r7,0(r17)
   174a4:	59800104 	addi	r6,r11,4
   174a8:	293fffcc 	andi	r4,r5,65535
   174ac:	20c7883a 	add	r3,r4,r3
   174b0:	393fffcc 	andi	r4,r7,65535
   174b4:	1909c83a 	sub	r4,r3,r4
   174b8:	280ad43a 	srli	r5,r5,16
   174bc:	380ed43a 	srli	r7,r7,16
   174c0:	2007d43a 	srai	r3,r4,16
   174c4:	213fffcc 	andi	r4,r4,65535
   174c8:	29cbc83a 	sub	r5,r5,r7
   174cc:	28c7883a 	add	r3,r5,r3
   174d0:	180a943a 	slli	r5,r3,16
   174d4:	8c400104 	addi	r17,r17,4
   174d8:	84000104 	addi	r16,r16,4
   174dc:	2908b03a 	or	r4,r5,r4
   174e0:	59000015 	stw	r4,0(r11)
   174e4:	1807d43a 	srai	r3,r3,16
   174e8:	3015883a 	mov	r10,r6
   174ec:	3017883a 	mov	r11,r6
   174f0:	8b3fea36 	bltu	r17,r12,1749c <__alt_data_end+0xfc01749c>
   174f4:	8200162e 	bgeu	r16,r8,17550 <__mdiff+0x17c>
   174f8:	8017883a 	mov	r11,r16
   174fc:	59400017 	ldw	r5,0(r11)
   17500:	31800104 	addi	r6,r6,4
   17504:	5ac00104 	addi	r11,r11,4
   17508:	293fffcc 	andi	r4,r5,65535
   1750c:	20c7883a 	add	r3,r4,r3
   17510:	280ed43a 	srli	r7,r5,16
   17514:	180bd43a 	srai	r5,r3,16
   17518:	193fffcc 	andi	r4,r3,65535
   1751c:	3947883a 	add	r3,r7,r5
   17520:	180a943a 	slli	r5,r3,16
   17524:	1807d43a 	srai	r3,r3,16
   17528:	2908b03a 	or	r4,r5,r4
   1752c:	313fff15 	stw	r4,-4(r6)
   17530:	5a3ff236 	bltu	r11,r8,174fc <__alt_data_end+0xfc0174fc>
   17534:	0406303a 	nor	r3,zero,r16
   17538:	1a07883a 	add	r3,r3,r8
   1753c:	1806d0ba 	srli	r3,r3,2
   17540:	18c00044 	addi	r3,r3,1
   17544:	18c7883a 	add	r3,r3,r3
   17548:	18c7883a 	add	r3,r3,r3
   1754c:	50d5883a 	add	r10,r10,r3
   17550:	50ffff04 	addi	r3,r10,-4
   17554:	2000041e 	bne	r4,zero,17568 <__mdiff+0x194>
   17558:	18ffff04 	addi	r3,r3,-4
   1755c:	19000017 	ldw	r4,0(r3)
   17560:	4a7fffc4 	addi	r9,r9,-1
   17564:	203ffc26 	beq	r4,zero,17558 <__alt_data_end+0xfc017558>
   17568:	12400415 	stw	r9,16(r2)
   1756c:	dfc00517 	ldw	ra,20(sp)
   17570:	dd000417 	ldw	r20,16(sp)
   17574:	dcc00317 	ldw	r19,12(sp)
   17578:	dc800217 	ldw	r18,8(sp)
   1757c:	dc400117 	ldw	r17,4(sp)
   17580:	dc000017 	ldw	r16,0(sp)
   17584:	dec00604 	addi	sp,sp,24
   17588:	f800283a 	ret
   1758c:	000b883a 	mov	r5,zero
   17590:	00169f00 	call	169f0 <_Balloc>
   17594:	00c00044 	movi	r3,1
   17598:	10c00415 	stw	r3,16(r2)
   1759c:	10000515 	stw	zero,20(r2)
   175a0:	003ff206 	br	1756c <__alt_data_end+0xfc01756c>
   175a4:	8023883a 	mov	r17,r16
   175a8:	0029883a 	mov	r20,zero
   175ac:	4021883a 	mov	r16,r8
   175b0:	003fad06 	br	17468 <__alt_data_end+0xfc017468>
   175b4:	9005883a 	mov	r2,r18
   175b8:	94400504 	addi	r17,r18,20
   175bc:	9c000504 	addi	r16,r19,20
   175c0:	9825883a 	mov	r18,r19
   175c4:	05000044 	movi	r20,1
   175c8:	1027883a 	mov	r19,r2
   175cc:	003fa606 	br	17468 <__alt_data_end+0xfc017468>

000175d0 <__ulp>:
   175d0:	295ffc2c 	andhi	r5,r5,32752
   175d4:	00bf3034 	movhi	r2,64704
   175d8:	2887883a 	add	r3,r5,r2
   175dc:	00c0020e 	bge	zero,r3,175e8 <__ulp+0x18>
   175e0:	0005883a 	mov	r2,zero
   175e4:	f800283a 	ret
   175e8:	00c7c83a 	sub	r3,zero,r3
   175ec:	1807d53a 	srai	r3,r3,20
   175f0:	008004c4 	movi	r2,19
   175f4:	10c00b0e 	bge	r2,r3,17624 <__ulp+0x54>
   175f8:	18bffb04 	addi	r2,r3,-20
   175fc:	01000784 	movi	r4,30
   17600:	0007883a 	mov	r3,zero
   17604:	20800516 	blt	r4,r2,1761c <__ulp+0x4c>
   17608:	010007c4 	movi	r4,31
   1760c:	2089c83a 	sub	r4,r4,r2
   17610:	00800044 	movi	r2,1
   17614:	1104983a 	sll	r2,r2,r4
   17618:	f800283a 	ret
   1761c:	00800044 	movi	r2,1
   17620:	f800283a 	ret
   17624:	01400234 	movhi	r5,8
   17628:	28c7d83a 	sra	r3,r5,r3
   1762c:	0005883a 	mov	r2,zero
   17630:	f800283a 	ret

00017634 <__b2d>:
   17634:	defffa04 	addi	sp,sp,-24
   17638:	dc000015 	stw	r16,0(sp)
   1763c:	24000417 	ldw	r16,16(r4)
   17640:	dc400115 	stw	r17,4(sp)
   17644:	24400504 	addi	r17,r4,20
   17648:	8421883a 	add	r16,r16,r16
   1764c:	8421883a 	add	r16,r16,r16
   17650:	8c21883a 	add	r16,r17,r16
   17654:	dc800215 	stw	r18,8(sp)
   17658:	84bfff17 	ldw	r18,-4(r16)
   1765c:	dd000415 	stw	r20,16(sp)
   17660:	dcc00315 	stw	r19,12(sp)
   17664:	9009883a 	mov	r4,r18
   17668:	2829883a 	mov	r20,r5
   1766c:	dfc00515 	stw	ra,20(sp)
   17670:	0016d0c0 	call	16d0c <__hi0bits>
   17674:	00c00804 	movi	r3,32
   17678:	1889c83a 	sub	r4,r3,r2
   1767c:	a1000015 	stw	r4,0(r20)
   17680:	01000284 	movi	r4,10
   17684:	84ffff04 	addi	r19,r16,-4
   17688:	20801216 	blt	r4,r2,176d4 <__b2d+0xa0>
   1768c:	018002c4 	movi	r6,11
   17690:	308dc83a 	sub	r6,r6,r2
   17694:	9186d83a 	srl	r3,r18,r6
   17698:	18cffc34 	orhi	r3,r3,16368
   1769c:	8cc0212e 	bgeu	r17,r19,17724 <__b2d+0xf0>
   176a0:	813ffe17 	ldw	r4,-8(r16)
   176a4:	218cd83a 	srl	r6,r4,r6
   176a8:	10800544 	addi	r2,r2,21
   176ac:	9084983a 	sll	r2,r18,r2
   176b0:	1184b03a 	or	r2,r2,r6
   176b4:	dfc00517 	ldw	ra,20(sp)
   176b8:	dd000417 	ldw	r20,16(sp)
   176bc:	dcc00317 	ldw	r19,12(sp)
   176c0:	dc800217 	ldw	r18,8(sp)
   176c4:	dc400117 	ldw	r17,4(sp)
   176c8:	dc000017 	ldw	r16,0(sp)
   176cc:	dec00604 	addi	sp,sp,24
   176d0:	f800283a 	ret
   176d4:	8cc00f2e 	bgeu	r17,r19,17714 <__b2d+0xe0>
   176d8:	117ffd44 	addi	r5,r2,-11
   176dc:	80bffe17 	ldw	r2,-8(r16)
   176e0:	28000e26 	beq	r5,zero,1771c <__b2d+0xe8>
   176e4:	1949c83a 	sub	r4,r3,r5
   176e8:	9164983a 	sll	r18,r18,r5
   176ec:	1106d83a 	srl	r3,r2,r4
   176f0:	81bffe04 	addi	r6,r16,-8
   176f4:	948ffc34 	orhi	r18,r18,16368
   176f8:	90c6b03a 	or	r3,r18,r3
   176fc:	89800e2e 	bgeu	r17,r6,17738 <__b2d+0x104>
   17700:	81bffd17 	ldw	r6,-12(r16)
   17704:	1144983a 	sll	r2,r2,r5
   17708:	310ad83a 	srl	r5,r6,r4
   1770c:	2884b03a 	or	r2,r5,r2
   17710:	003fe806 	br	176b4 <__alt_data_end+0xfc0176b4>
   17714:	10bffd44 	addi	r2,r2,-11
   17718:	1000041e 	bne	r2,zero,1772c <__b2d+0xf8>
   1771c:	90cffc34 	orhi	r3,r18,16368
   17720:	003fe406 	br	176b4 <__alt_data_end+0xfc0176b4>
   17724:	000d883a 	mov	r6,zero
   17728:	003fdf06 	br	176a8 <__alt_data_end+0xfc0176a8>
   1772c:	90a4983a 	sll	r18,r18,r2
   17730:	0005883a 	mov	r2,zero
   17734:	003ff906 	br	1771c <__alt_data_end+0xfc01771c>
   17738:	1144983a 	sll	r2,r2,r5
   1773c:	003fdd06 	br	176b4 <__alt_data_end+0xfc0176b4>

00017740 <__d2b>:
   17740:	defff804 	addi	sp,sp,-32
   17744:	dc000215 	stw	r16,8(sp)
   17748:	3021883a 	mov	r16,r6
   1774c:	dc400315 	stw	r17,12(sp)
   17750:	8022907a 	slli	r17,r16,1
   17754:	dd000615 	stw	r20,24(sp)
   17758:	2829883a 	mov	r20,r5
   1775c:	01400044 	movi	r5,1
   17760:	dcc00515 	stw	r19,20(sp)
   17764:	dc800415 	stw	r18,16(sp)
   17768:	dfc00715 	stw	ra,28(sp)
   1776c:	3825883a 	mov	r18,r7
   17770:	8822d57a 	srli	r17,r17,21
   17774:	00169f00 	call	169f0 <_Balloc>
   17778:	1027883a 	mov	r19,r2
   1777c:	00800434 	movhi	r2,16
   17780:	10bfffc4 	addi	r2,r2,-1
   17784:	808c703a 	and	r6,r16,r2
   17788:	88000126 	beq	r17,zero,17790 <__d2b+0x50>
   1778c:	31800434 	orhi	r6,r6,16
   17790:	d9800015 	stw	r6,0(sp)
   17794:	a0002426 	beq	r20,zero,17828 <__d2b+0xe8>
   17798:	d9000104 	addi	r4,sp,4
   1779c:	dd000115 	stw	r20,4(sp)
   177a0:	0016d740 	call	16d74 <__lo0bits>
   177a4:	d8c00017 	ldw	r3,0(sp)
   177a8:	10002f1e 	bne	r2,zero,17868 <__d2b+0x128>
   177ac:	d9000117 	ldw	r4,4(sp)
   177b0:	99000515 	stw	r4,20(r19)
   177b4:	1821003a 	cmpeq	r16,r3,zero
   177b8:	01000084 	movi	r4,2
   177bc:	2421c83a 	sub	r16,r4,r16
   177c0:	98c00615 	stw	r3,24(r19)
   177c4:	9c000415 	stw	r16,16(r19)
   177c8:	88001f1e 	bne	r17,zero,17848 <__d2b+0x108>
   177cc:	10bef384 	addi	r2,r2,-1074
   177d0:	90800015 	stw	r2,0(r18)
   177d4:	00900034 	movhi	r2,16384
   177d8:	10bfffc4 	addi	r2,r2,-1
   177dc:	8085883a 	add	r2,r16,r2
   177e0:	1085883a 	add	r2,r2,r2
   177e4:	1085883a 	add	r2,r2,r2
   177e8:	9885883a 	add	r2,r19,r2
   177ec:	11000517 	ldw	r4,20(r2)
   177f0:	8020917a 	slli	r16,r16,5
   177f4:	0016d0c0 	call	16d0c <__hi0bits>
   177f8:	d8c00817 	ldw	r3,32(sp)
   177fc:	8085c83a 	sub	r2,r16,r2
   17800:	18800015 	stw	r2,0(r3)
   17804:	9805883a 	mov	r2,r19
   17808:	dfc00717 	ldw	ra,28(sp)
   1780c:	dd000617 	ldw	r20,24(sp)
   17810:	dcc00517 	ldw	r19,20(sp)
   17814:	dc800417 	ldw	r18,16(sp)
   17818:	dc400317 	ldw	r17,12(sp)
   1781c:	dc000217 	ldw	r16,8(sp)
   17820:	dec00804 	addi	sp,sp,32
   17824:	f800283a 	ret
   17828:	d809883a 	mov	r4,sp
   1782c:	0016d740 	call	16d74 <__lo0bits>
   17830:	d8c00017 	ldw	r3,0(sp)
   17834:	04000044 	movi	r16,1
   17838:	9c000415 	stw	r16,16(r19)
   1783c:	98c00515 	stw	r3,20(r19)
   17840:	10800804 	addi	r2,r2,32
   17844:	883fe126 	beq	r17,zero,177cc <__alt_data_end+0xfc0177cc>
   17848:	00c00d44 	movi	r3,53
   1784c:	8c7ef344 	addi	r17,r17,-1075
   17850:	88a3883a 	add	r17,r17,r2
   17854:	1885c83a 	sub	r2,r3,r2
   17858:	d8c00817 	ldw	r3,32(sp)
   1785c:	94400015 	stw	r17,0(r18)
   17860:	18800015 	stw	r2,0(r3)
   17864:	003fe706 	br	17804 <__alt_data_end+0xfc017804>
   17868:	01000804 	movi	r4,32
   1786c:	2089c83a 	sub	r4,r4,r2
   17870:	1908983a 	sll	r4,r3,r4
   17874:	d9400117 	ldw	r5,4(sp)
   17878:	1886d83a 	srl	r3,r3,r2
   1787c:	2148b03a 	or	r4,r4,r5
   17880:	99000515 	stw	r4,20(r19)
   17884:	d8c00015 	stw	r3,0(sp)
   17888:	003fca06 	br	177b4 <__alt_data_end+0xfc0177b4>

0001788c <__ratio>:
   1788c:	defff904 	addi	sp,sp,-28
   17890:	dc400315 	stw	r17,12(sp)
   17894:	2823883a 	mov	r17,r5
   17898:	d9400104 	addi	r5,sp,4
   1789c:	dfc00615 	stw	ra,24(sp)
   178a0:	dcc00515 	stw	r19,20(sp)
   178a4:	dc800415 	stw	r18,16(sp)
   178a8:	2027883a 	mov	r19,r4
   178ac:	dc000215 	stw	r16,8(sp)
   178b0:	00176340 	call	17634 <__b2d>
   178b4:	d80b883a 	mov	r5,sp
   178b8:	8809883a 	mov	r4,r17
   178bc:	1025883a 	mov	r18,r2
   178c0:	1821883a 	mov	r16,r3
   178c4:	00176340 	call	17634 <__b2d>
   178c8:	8a000417 	ldw	r8,16(r17)
   178cc:	99000417 	ldw	r4,16(r19)
   178d0:	d9400117 	ldw	r5,4(sp)
   178d4:	2209c83a 	sub	r4,r4,r8
   178d8:	2010917a 	slli	r8,r4,5
   178dc:	d9000017 	ldw	r4,0(sp)
   178e0:	2909c83a 	sub	r4,r5,r4
   178e4:	4109883a 	add	r4,r8,r4
   178e8:	01000e0e 	bge	zero,r4,17924 <__ratio+0x98>
   178ec:	2008953a 	slli	r4,r4,20
   178f0:	2421883a 	add	r16,r4,r16
   178f4:	100d883a 	mov	r6,r2
   178f8:	180f883a 	mov	r7,r3
   178fc:	9009883a 	mov	r4,r18
   17900:	800b883a 	mov	r5,r16
   17904:	001cd440 	call	1cd44 <__divdf3>
   17908:	dfc00617 	ldw	ra,24(sp)
   1790c:	dcc00517 	ldw	r19,20(sp)
   17910:	dc800417 	ldw	r18,16(sp)
   17914:	dc400317 	ldw	r17,12(sp)
   17918:	dc000217 	ldw	r16,8(sp)
   1791c:	dec00704 	addi	sp,sp,28
   17920:	f800283a 	ret
   17924:	2008953a 	slli	r4,r4,20
   17928:	1907c83a 	sub	r3,r3,r4
   1792c:	003ff106 	br	178f4 <__alt_data_end+0xfc0178f4>

00017930 <_mprec_log10>:
   17930:	defffe04 	addi	sp,sp,-8
   17934:	dc000015 	stw	r16,0(sp)
   17938:	dfc00115 	stw	ra,4(sp)
   1793c:	008005c4 	movi	r2,23
   17940:	2021883a 	mov	r16,r4
   17944:	11000d0e 	bge	r2,r4,1797c <_mprec_log10+0x4c>
   17948:	0005883a 	mov	r2,zero
   1794c:	00cffc34 	movhi	r3,16368
   17950:	843fffc4 	addi	r16,r16,-1
   17954:	000d883a 	mov	r6,zero
   17958:	01d00934 	movhi	r7,16420
   1795c:	1009883a 	mov	r4,r2
   17960:	180b883a 	mov	r5,r3
   17964:	001d96c0 	call	1d96c <__muldf3>
   17968:	803ff91e 	bne	r16,zero,17950 <__alt_data_end+0xfc017950>
   1796c:	dfc00117 	ldw	ra,4(sp)
   17970:	dc000017 	ldw	r16,0(sp)
   17974:	dec00204 	addi	sp,sp,8
   17978:	f800283a 	ret
   1797c:	202090fa 	slli	r16,r4,3
   17980:	008000f4 	movhi	r2,3
   17984:	10aa4104 	addi	r2,r2,-22268
   17988:	1421883a 	add	r16,r2,r16
   1798c:	80800017 	ldw	r2,0(r16)
   17990:	80c00117 	ldw	r3,4(r16)
   17994:	dfc00117 	ldw	ra,4(sp)
   17998:	dc000017 	ldw	r16,0(sp)
   1799c:	dec00204 	addi	sp,sp,8
   179a0:	f800283a 	ret

000179a4 <__copybits>:
   179a4:	297fffc4 	addi	r5,r5,-1
   179a8:	280fd17a 	srai	r7,r5,5
   179ac:	30c00417 	ldw	r3,16(r6)
   179b0:	30800504 	addi	r2,r6,20
   179b4:	39c00044 	addi	r7,r7,1
   179b8:	18c7883a 	add	r3,r3,r3
   179bc:	39cf883a 	add	r7,r7,r7
   179c0:	18c7883a 	add	r3,r3,r3
   179c4:	39cf883a 	add	r7,r7,r7
   179c8:	10c7883a 	add	r3,r2,r3
   179cc:	21cf883a 	add	r7,r4,r7
   179d0:	10c00d2e 	bgeu	r2,r3,17a08 <__copybits+0x64>
   179d4:	200b883a 	mov	r5,r4
   179d8:	12000017 	ldw	r8,0(r2)
   179dc:	29400104 	addi	r5,r5,4
   179e0:	10800104 	addi	r2,r2,4
   179e4:	2a3fff15 	stw	r8,-4(r5)
   179e8:	10fffb36 	bltu	r2,r3,179d8 <__alt_data_end+0xfc0179d8>
   179ec:	1985c83a 	sub	r2,r3,r6
   179f0:	10bffac4 	addi	r2,r2,-21
   179f4:	1004d0ba 	srli	r2,r2,2
   179f8:	10800044 	addi	r2,r2,1
   179fc:	1085883a 	add	r2,r2,r2
   17a00:	1085883a 	add	r2,r2,r2
   17a04:	2089883a 	add	r4,r4,r2
   17a08:	21c0032e 	bgeu	r4,r7,17a18 <__copybits+0x74>
   17a0c:	20000015 	stw	zero,0(r4)
   17a10:	21000104 	addi	r4,r4,4
   17a14:	21fffd36 	bltu	r4,r7,17a0c <__alt_data_end+0xfc017a0c>
   17a18:	f800283a 	ret

00017a1c <__any_on>:
   17a1c:	20c00417 	ldw	r3,16(r4)
   17a20:	2805d17a 	srai	r2,r5,5
   17a24:	21000504 	addi	r4,r4,20
   17a28:	18800d0e 	bge	r3,r2,17a60 <__any_on+0x44>
   17a2c:	18c7883a 	add	r3,r3,r3
   17a30:	18c7883a 	add	r3,r3,r3
   17a34:	20c7883a 	add	r3,r4,r3
   17a38:	20c0192e 	bgeu	r4,r3,17aa0 <__any_on+0x84>
   17a3c:	18bfff17 	ldw	r2,-4(r3)
   17a40:	18ffff04 	addi	r3,r3,-4
   17a44:	1000041e 	bne	r2,zero,17a58 <__any_on+0x3c>
   17a48:	20c0142e 	bgeu	r4,r3,17a9c <__any_on+0x80>
   17a4c:	18ffff04 	addi	r3,r3,-4
   17a50:	19400017 	ldw	r5,0(r3)
   17a54:	283ffc26 	beq	r5,zero,17a48 <__alt_data_end+0xfc017a48>
   17a58:	00800044 	movi	r2,1
   17a5c:	f800283a 	ret
   17a60:	10c00a0e 	bge	r2,r3,17a8c <__any_on+0x70>
   17a64:	1085883a 	add	r2,r2,r2
   17a68:	1085883a 	add	r2,r2,r2
   17a6c:	294007cc 	andi	r5,r5,31
   17a70:	2087883a 	add	r3,r4,r2
   17a74:	283ff026 	beq	r5,zero,17a38 <__alt_data_end+0xfc017a38>
   17a78:	19800017 	ldw	r6,0(r3)
   17a7c:	3144d83a 	srl	r2,r6,r5
   17a80:	114a983a 	sll	r5,r2,r5
   17a84:	317ff41e 	bne	r6,r5,17a58 <__alt_data_end+0xfc017a58>
   17a88:	003feb06 	br	17a38 <__alt_data_end+0xfc017a38>
   17a8c:	1085883a 	add	r2,r2,r2
   17a90:	1085883a 	add	r2,r2,r2
   17a94:	2087883a 	add	r3,r4,r2
   17a98:	003fe706 	br	17a38 <__alt_data_end+0xfc017a38>
   17a9c:	f800283a 	ret
   17aa0:	0005883a 	mov	r2,zero
   17aa4:	f800283a 	ret

00017aa8 <_putc_r>:
   17aa8:	defffc04 	addi	sp,sp,-16
   17aac:	dc000215 	stw	r16,8(sp)
   17ab0:	dfc00315 	stw	ra,12(sp)
   17ab4:	2021883a 	mov	r16,r4
   17ab8:	20000226 	beq	r4,zero,17ac4 <_putc_r+0x1c>
   17abc:	20800e17 	ldw	r2,56(r4)
   17ac0:	10001b26 	beq	r2,zero,17b30 <_putc_r+0x88>
   17ac4:	30800217 	ldw	r2,8(r6)
   17ac8:	10bfffc4 	addi	r2,r2,-1
   17acc:	30800215 	stw	r2,8(r6)
   17ad0:	10000a16 	blt	r2,zero,17afc <_putc_r+0x54>
   17ad4:	30800017 	ldw	r2,0(r6)
   17ad8:	11400005 	stb	r5,0(r2)
   17adc:	30800017 	ldw	r2,0(r6)
   17ae0:	10c00044 	addi	r3,r2,1
   17ae4:	30c00015 	stw	r3,0(r6)
   17ae8:	10800003 	ldbu	r2,0(r2)
   17aec:	dfc00317 	ldw	ra,12(sp)
   17af0:	dc000217 	ldw	r16,8(sp)
   17af4:	dec00404 	addi	sp,sp,16
   17af8:	f800283a 	ret
   17afc:	30c00617 	ldw	r3,24(r6)
   17b00:	10c00616 	blt	r2,r3,17b1c <_putc_r+0x74>
   17b04:	30800017 	ldw	r2,0(r6)
   17b08:	00c00284 	movi	r3,10
   17b0c:	11400005 	stb	r5,0(r2)
   17b10:	30800017 	ldw	r2,0(r6)
   17b14:	11400003 	ldbu	r5,0(r2)
   17b18:	28fff11e 	bne	r5,r3,17ae0 <__alt_data_end+0xfc017ae0>
   17b1c:	8009883a 	mov	r4,r16
   17b20:	dfc00317 	ldw	ra,12(sp)
   17b24:	dc000217 	ldw	r16,8(sp)
   17b28:	dec00404 	addi	sp,sp,16
   17b2c:	001af8c1 	jmpi	1af8c <__swbuf_r>
   17b30:	d9400015 	stw	r5,0(sp)
   17b34:	d9800115 	stw	r6,4(sp)
   17b38:	0015a440 	call	15a44 <__sinit>
   17b3c:	d9800117 	ldw	r6,4(sp)
   17b40:	d9400017 	ldw	r5,0(sp)
   17b44:	003fdf06 	br	17ac4 <__alt_data_end+0xfc017ac4>

00017b48 <putc>:
   17b48:	008000f4 	movhi	r2,3
   17b4c:	defffc04 	addi	sp,sp,-16
   17b50:	10b70504 	addi	r2,r2,-9196
   17b54:	dc000115 	stw	r16,4(sp)
   17b58:	14000017 	ldw	r16,0(r2)
   17b5c:	dc400215 	stw	r17,8(sp)
   17b60:	dfc00315 	stw	ra,12(sp)
   17b64:	2023883a 	mov	r17,r4
   17b68:	80000226 	beq	r16,zero,17b74 <putc+0x2c>
   17b6c:	80800e17 	ldw	r2,56(r16)
   17b70:	10001a26 	beq	r2,zero,17bdc <putc+0x94>
   17b74:	28800217 	ldw	r2,8(r5)
   17b78:	10bfffc4 	addi	r2,r2,-1
   17b7c:	28800215 	stw	r2,8(r5)
   17b80:	10000b16 	blt	r2,zero,17bb0 <putc+0x68>
   17b84:	28800017 	ldw	r2,0(r5)
   17b88:	14400005 	stb	r17,0(r2)
   17b8c:	28800017 	ldw	r2,0(r5)
   17b90:	10c00044 	addi	r3,r2,1
   17b94:	28c00015 	stw	r3,0(r5)
   17b98:	10800003 	ldbu	r2,0(r2)
   17b9c:	dfc00317 	ldw	ra,12(sp)
   17ba0:	dc400217 	ldw	r17,8(sp)
   17ba4:	dc000117 	ldw	r16,4(sp)
   17ba8:	dec00404 	addi	sp,sp,16
   17bac:	f800283a 	ret
   17bb0:	28c00617 	ldw	r3,24(r5)
   17bb4:	10c00e16 	blt	r2,r3,17bf0 <putc+0xa8>
   17bb8:	28800017 	ldw	r2,0(r5)
   17bbc:	01000284 	movi	r4,10
   17bc0:	14400005 	stb	r17,0(r2)
   17bc4:	28800017 	ldw	r2,0(r5)
   17bc8:	10c00003 	ldbu	r3,0(r2)
   17bcc:	193ff01e 	bne	r3,r4,17b90 <__alt_data_end+0xfc017b90>
   17bd0:	280d883a 	mov	r6,r5
   17bd4:	180b883a 	mov	r5,r3
   17bd8:	00000706 	br	17bf8 <putc+0xb0>
   17bdc:	8009883a 	mov	r4,r16
   17be0:	d9400015 	stw	r5,0(sp)
   17be4:	0015a440 	call	15a44 <__sinit>
   17be8:	d9400017 	ldw	r5,0(sp)
   17bec:	003fe106 	br	17b74 <__alt_data_end+0xfc017b74>
   17bf0:	280d883a 	mov	r6,r5
   17bf4:	880b883a 	mov	r5,r17
   17bf8:	8009883a 	mov	r4,r16
   17bfc:	dfc00317 	ldw	ra,12(sp)
   17c00:	dc400217 	ldw	r17,8(sp)
   17c04:	dc000117 	ldw	r16,4(sp)
   17c08:	dec00404 	addi	sp,sp,16
   17c0c:	001af8c1 	jmpi	1af8c <__swbuf_r>

00017c10 <_realloc_r>:
   17c10:	defff604 	addi	sp,sp,-40
   17c14:	dc800215 	stw	r18,8(sp)
   17c18:	dfc00915 	stw	ra,36(sp)
   17c1c:	df000815 	stw	fp,32(sp)
   17c20:	ddc00715 	stw	r23,28(sp)
   17c24:	dd800615 	stw	r22,24(sp)
   17c28:	dd400515 	stw	r21,20(sp)
   17c2c:	dd000415 	stw	r20,16(sp)
   17c30:	dcc00315 	stw	r19,12(sp)
   17c34:	dc400115 	stw	r17,4(sp)
   17c38:	dc000015 	stw	r16,0(sp)
   17c3c:	3025883a 	mov	r18,r6
   17c40:	2800b726 	beq	r5,zero,17f20 <_realloc_r+0x310>
   17c44:	282b883a 	mov	r21,r5
   17c48:	2029883a 	mov	r20,r4
   17c4c:	001f4340 	call	1f434 <__malloc_lock>
   17c50:	a8bfff17 	ldw	r2,-4(r21)
   17c54:	043fff04 	movi	r16,-4
   17c58:	90c002c4 	addi	r3,r18,11
   17c5c:	01000584 	movi	r4,22
   17c60:	acfffe04 	addi	r19,r21,-8
   17c64:	1420703a 	and	r16,r2,r16
   17c68:	20c0332e 	bgeu	r4,r3,17d38 <_realloc_r+0x128>
   17c6c:	047ffe04 	movi	r17,-8
   17c70:	1c62703a 	and	r17,r3,r17
   17c74:	8807883a 	mov	r3,r17
   17c78:	88005816 	blt	r17,zero,17ddc <_realloc_r+0x1cc>
   17c7c:	8c805736 	bltu	r17,r18,17ddc <_realloc_r+0x1cc>
   17c80:	80c0300e 	bge	r16,r3,17d44 <_realloc_r+0x134>
   17c84:	070000f4 	movhi	fp,3
   17c88:	e72ba404 	addi	fp,fp,-20848
   17c8c:	e1c00217 	ldw	r7,8(fp)
   17c90:	9c09883a 	add	r4,r19,r16
   17c94:	22000117 	ldw	r8,4(r4)
   17c98:	21c06326 	beq	r4,r7,17e28 <_realloc_r+0x218>
   17c9c:	017fff84 	movi	r5,-2
   17ca0:	414a703a 	and	r5,r8,r5
   17ca4:	214b883a 	add	r5,r4,r5
   17ca8:	29800117 	ldw	r6,4(r5)
   17cac:	3180004c 	andi	r6,r6,1
   17cb0:	30003f26 	beq	r6,zero,17db0 <_realloc_r+0x1a0>
   17cb4:	1080004c 	andi	r2,r2,1
   17cb8:	10008326 	beq	r2,zero,17ec8 <_realloc_r+0x2b8>
   17cbc:	900b883a 	mov	r5,r18
   17cc0:	a009883a 	mov	r4,r20
   17cc4:	000e2540 	call	e254 <_malloc_r>
   17cc8:	1025883a 	mov	r18,r2
   17ccc:	10011e26 	beq	r2,zero,18148 <_realloc_r+0x538>
   17cd0:	a93fff17 	ldw	r4,-4(r21)
   17cd4:	10fffe04 	addi	r3,r2,-8
   17cd8:	00bfff84 	movi	r2,-2
   17cdc:	2084703a 	and	r2,r4,r2
   17ce0:	9885883a 	add	r2,r19,r2
   17ce4:	1880ee26 	beq	r3,r2,180a0 <_realloc_r+0x490>
   17ce8:	81bfff04 	addi	r6,r16,-4
   17cec:	00800904 	movi	r2,36
   17cf0:	1180b836 	bltu	r2,r6,17fd4 <_realloc_r+0x3c4>
   17cf4:	00c004c4 	movi	r3,19
   17cf8:	19809636 	bltu	r3,r6,17f54 <_realloc_r+0x344>
   17cfc:	9005883a 	mov	r2,r18
   17d00:	a807883a 	mov	r3,r21
   17d04:	19000017 	ldw	r4,0(r3)
   17d08:	11000015 	stw	r4,0(r2)
   17d0c:	19000117 	ldw	r4,4(r3)
   17d10:	11000115 	stw	r4,4(r2)
   17d14:	18c00217 	ldw	r3,8(r3)
   17d18:	10c00215 	stw	r3,8(r2)
   17d1c:	a80b883a 	mov	r5,r21
   17d20:	a009883a 	mov	r4,r20
   17d24:	0015bb80 	call	15bb8 <_free_r>
   17d28:	a009883a 	mov	r4,r20
   17d2c:	001f4580 	call	1f458 <__malloc_unlock>
   17d30:	9005883a 	mov	r2,r18
   17d34:	00001206 	br	17d80 <_realloc_r+0x170>
   17d38:	00c00404 	movi	r3,16
   17d3c:	1823883a 	mov	r17,r3
   17d40:	003fce06 	br	17c7c <__alt_data_end+0xfc017c7c>
   17d44:	a825883a 	mov	r18,r21
   17d48:	8445c83a 	sub	r2,r16,r17
   17d4c:	00c003c4 	movi	r3,15
   17d50:	18802636 	bltu	r3,r2,17dec <_realloc_r+0x1dc>
   17d54:	99800117 	ldw	r6,4(r19)
   17d58:	9c07883a 	add	r3,r19,r16
   17d5c:	3180004c 	andi	r6,r6,1
   17d60:	3420b03a 	or	r16,r6,r16
   17d64:	9c000115 	stw	r16,4(r19)
   17d68:	18800117 	ldw	r2,4(r3)
   17d6c:	10800054 	ori	r2,r2,1
   17d70:	18800115 	stw	r2,4(r3)
   17d74:	a009883a 	mov	r4,r20
   17d78:	001f4580 	call	1f458 <__malloc_unlock>
   17d7c:	9005883a 	mov	r2,r18
   17d80:	dfc00917 	ldw	ra,36(sp)
   17d84:	df000817 	ldw	fp,32(sp)
   17d88:	ddc00717 	ldw	r23,28(sp)
   17d8c:	dd800617 	ldw	r22,24(sp)
   17d90:	dd400517 	ldw	r21,20(sp)
   17d94:	dd000417 	ldw	r20,16(sp)
   17d98:	dcc00317 	ldw	r19,12(sp)
   17d9c:	dc800217 	ldw	r18,8(sp)
   17da0:	dc400117 	ldw	r17,4(sp)
   17da4:	dc000017 	ldw	r16,0(sp)
   17da8:	dec00a04 	addi	sp,sp,40
   17dac:	f800283a 	ret
   17db0:	017fff04 	movi	r5,-4
   17db4:	414a703a 	and	r5,r8,r5
   17db8:	814d883a 	add	r6,r16,r5
   17dbc:	30c01f16 	blt	r6,r3,17e3c <_realloc_r+0x22c>
   17dc0:	20800317 	ldw	r2,12(r4)
   17dc4:	20c00217 	ldw	r3,8(r4)
   17dc8:	a825883a 	mov	r18,r21
   17dcc:	3021883a 	mov	r16,r6
   17dd0:	18800315 	stw	r2,12(r3)
   17dd4:	10c00215 	stw	r3,8(r2)
   17dd8:	003fdb06 	br	17d48 <__alt_data_end+0xfc017d48>
   17ddc:	00800304 	movi	r2,12
   17de0:	a0800015 	stw	r2,0(r20)
   17de4:	0005883a 	mov	r2,zero
   17de8:	003fe506 	br	17d80 <__alt_data_end+0xfc017d80>
   17dec:	98c00117 	ldw	r3,4(r19)
   17df0:	9c4b883a 	add	r5,r19,r17
   17df4:	11000054 	ori	r4,r2,1
   17df8:	18c0004c 	andi	r3,r3,1
   17dfc:	1c62b03a 	or	r17,r3,r17
   17e00:	9c400115 	stw	r17,4(r19)
   17e04:	29000115 	stw	r4,4(r5)
   17e08:	2885883a 	add	r2,r5,r2
   17e0c:	10c00117 	ldw	r3,4(r2)
   17e10:	29400204 	addi	r5,r5,8
   17e14:	a009883a 	mov	r4,r20
   17e18:	18c00054 	ori	r3,r3,1
   17e1c:	10c00115 	stw	r3,4(r2)
   17e20:	0015bb80 	call	15bb8 <_free_r>
   17e24:	003fd306 	br	17d74 <__alt_data_end+0xfc017d74>
   17e28:	017fff04 	movi	r5,-4
   17e2c:	414a703a 	and	r5,r8,r5
   17e30:	89800404 	addi	r6,r17,16
   17e34:	8151883a 	add	r8,r16,r5
   17e38:	4180590e 	bge	r8,r6,17fa0 <_realloc_r+0x390>
   17e3c:	1080004c 	andi	r2,r2,1
   17e40:	103f9e1e 	bne	r2,zero,17cbc <__alt_data_end+0xfc017cbc>
   17e44:	adbffe17 	ldw	r22,-8(r21)
   17e48:	00bfff04 	movi	r2,-4
   17e4c:	9dadc83a 	sub	r22,r19,r22
   17e50:	b1800117 	ldw	r6,4(r22)
   17e54:	3084703a 	and	r2,r6,r2
   17e58:	20002026 	beq	r4,zero,17edc <_realloc_r+0x2cc>
   17e5c:	80af883a 	add	r23,r16,r2
   17e60:	b96f883a 	add	r23,r23,r5
   17e64:	21c05f26 	beq	r4,r7,17fe4 <_realloc_r+0x3d4>
   17e68:	b8c01c16 	blt	r23,r3,17edc <_realloc_r+0x2cc>
   17e6c:	20800317 	ldw	r2,12(r4)
   17e70:	20c00217 	ldw	r3,8(r4)
   17e74:	81bfff04 	addi	r6,r16,-4
   17e78:	01000904 	movi	r4,36
   17e7c:	18800315 	stw	r2,12(r3)
   17e80:	10c00215 	stw	r3,8(r2)
   17e84:	b0c00217 	ldw	r3,8(r22)
   17e88:	b0800317 	ldw	r2,12(r22)
   17e8c:	b4800204 	addi	r18,r22,8
   17e90:	18800315 	stw	r2,12(r3)
   17e94:	10c00215 	stw	r3,8(r2)
   17e98:	21801b36 	bltu	r4,r6,17f08 <_realloc_r+0x2f8>
   17e9c:	008004c4 	movi	r2,19
   17ea0:	1180352e 	bgeu	r2,r6,17f78 <_realloc_r+0x368>
   17ea4:	a8800017 	ldw	r2,0(r21)
   17ea8:	b0800215 	stw	r2,8(r22)
   17eac:	a8800117 	ldw	r2,4(r21)
   17eb0:	b0800315 	stw	r2,12(r22)
   17eb4:	008006c4 	movi	r2,27
   17eb8:	11807f36 	bltu	r2,r6,180b8 <_realloc_r+0x4a8>
   17ebc:	b0800404 	addi	r2,r22,16
   17ec0:	ad400204 	addi	r21,r21,8
   17ec4:	00002d06 	br	17f7c <_realloc_r+0x36c>
   17ec8:	adbffe17 	ldw	r22,-8(r21)
   17ecc:	00bfff04 	movi	r2,-4
   17ed0:	9dadc83a 	sub	r22,r19,r22
   17ed4:	b1000117 	ldw	r4,4(r22)
   17ed8:	2084703a 	and	r2,r4,r2
   17edc:	b03f7726 	beq	r22,zero,17cbc <__alt_data_end+0xfc017cbc>
   17ee0:	80af883a 	add	r23,r16,r2
   17ee4:	b8ff7516 	blt	r23,r3,17cbc <__alt_data_end+0xfc017cbc>
   17ee8:	b0800317 	ldw	r2,12(r22)
   17eec:	b0c00217 	ldw	r3,8(r22)
   17ef0:	81bfff04 	addi	r6,r16,-4
   17ef4:	01000904 	movi	r4,36
   17ef8:	18800315 	stw	r2,12(r3)
   17efc:	10c00215 	stw	r3,8(r2)
   17f00:	b4800204 	addi	r18,r22,8
   17f04:	21bfe52e 	bgeu	r4,r6,17e9c <__alt_data_end+0xfc017e9c>
   17f08:	a80b883a 	mov	r5,r21
   17f0c:	9009883a 	mov	r4,r18
   17f10:	00168940 	call	16894 <memmove>
   17f14:	b821883a 	mov	r16,r23
   17f18:	b027883a 	mov	r19,r22
   17f1c:	003f8a06 	br	17d48 <__alt_data_end+0xfc017d48>
   17f20:	300b883a 	mov	r5,r6
   17f24:	dfc00917 	ldw	ra,36(sp)
   17f28:	df000817 	ldw	fp,32(sp)
   17f2c:	ddc00717 	ldw	r23,28(sp)
   17f30:	dd800617 	ldw	r22,24(sp)
   17f34:	dd400517 	ldw	r21,20(sp)
   17f38:	dd000417 	ldw	r20,16(sp)
   17f3c:	dcc00317 	ldw	r19,12(sp)
   17f40:	dc800217 	ldw	r18,8(sp)
   17f44:	dc400117 	ldw	r17,4(sp)
   17f48:	dc000017 	ldw	r16,0(sp)
   17f4c:	dec00a04 	addi	sp,sp,40
   17f50:	000e2541 	jmpi	e254 <_malloc_r>
   17f54:	a8c00017 	ldw	r3,0(r21)
   17f58:	90c00015 	stw	r3,0(r18)
   17f5c:	a8c00117 	ldw	r3,4(r21)
   17f60:	90c00115 	stw	r3,4(r18)
   17f64:	00c006c4 	movi	r3,27
   17f68:	19804536 	bltu	r3,r6,18080 <_realloc_r+0x470>
   17f6c:	90800204 	addi	r2,r18,8
   17f70:	a8c00204 	addi	r3,r21,8
   17f74:	003f6306 	br	17d04 <__alt_data_end+0xfc017d04>
   17f78:	9005883a 	mov	r2,r18
   17f7c:	a8c00017 	ldw	r3,0(r21)
   17f80:	b821883a 	mov	r16,r23
   17f84:	b027883a 	mov	r19,r22
   17f88:	10c00015 	stw	r3,0(r2)
   17f8c:	a8c00117 	ldw	r3,4(r21)
   17f90:	10c00115 	stw	r3,4(r2)
   17f94:	a8c00217 	ldw	r3,8(r21)
   17f98:	10c00215 	stw	r3,8(r2)
   17f9c:	003f6a06 	br	17d48 <__alt_data_end+0xfc017d48>
   17fa0:	9c67883a 	add	r19,r19,r17
   17fa4:	4445c83a 	sub	r2,r8,r17
   17fa8:	e4c00215 	stw	r19,8(fp)
   17fac:	10800054 	ori	r2,r2,1
   17fb0:	98800115 	stw	r2,4(r19)
   17fb4:	a8bfff17 	ldw	r2,-4(r21)
   17fb8:	a009883a 	mov	r4,r20
   17fbc:	1080004c 	andi	r2,r2,1
   17fc0:	1462b03a 	or	r17,r2,r17
   17fc4:	ac7fff15 	stw	r17,-4(r21)
   17fc8:	001f4580 	call	1f458 <__malloc_unlock>
   17fcc:	a805883a 	mov	r2,r21
   17fd0:	003f6b06 	br	17d80 <__alt_data_end+0xfc017d80>
   17fd4:	a80b883a 	mov	r5,r21
   17fd8:	9009883a 	mov	r4,r18
   17fdc:	00168940 	call	16894 <memmove>
   17fe0:	003f4e06 	br	17d1c <__alt_data_end+0xfc017d1c>
   17fe4:	89000404 	addi	r4,r17,16
   17fe8:	b93fbc16 	blt	r23,r4,17edc <__alt_data_end+0xfc017edc>
   17fec:	b0800317 	ldw	r2,12(r22)
   17ff0:	b0c00217 	ldw	r3,8(r22)
   17ff4:	81bfff04 	addi	r6,r16,-4
   17ff8:	01000904 	movi	r4,36
   17ffc:	18800315 	stw	r2,12(r3)
   18000:	10c00215 	stw	r3,8(r2)
   18004:	b4800204 	addi	r18,r22,8
   18008:	21804336 	bltu	r4,r6,18118 <_realloc_r+0x508>
   1800c:	008004c4 	movi	r2,19
   18010:	11803f2e 	bgeu	r2,r6,18110 <_realloc_r+0x500>
   18014:	a8800017 	ldw	r2,0(r21)
   18018:	b0800215 	stw	r2,8(r22)
   1801c:	a8800117 	ldw	r2,4(r21)
   18020:	b0800315 	stw	r2,12(r22)
   18024:	008006c4 	movi	r2,27
   18028:	11803f36 	bltu	r2,r6,18128 <_realloc_r+0x518>
   1802c:	b0800404 	addi	r2,r22,16
   18030:	ad400204 	addi	r21,r21,8
   18034:	a8c00017 	ldw	r3,0(r21)
   18038:	10c00015 	stw	r3,0(r2)
   1803c:	a8c00117 	ldw	r3,4(r21)
   18040:	10c00115 	stw	r3,4(r2)
   18044:	a8c00217 	ldw	r3,8(r21)
   18048:	10c00215 	stw	r3,8(r2)
   1804c:	b447883a 	add	r3,r22,r17
   18050:	bc45c83a 	sub	r2,r23,r17
   18054:	e0c00215 	stw	r3,8(fp)
   18058:	10800054 	ori	r2,r2,1
   1805c:	18800115 	stw	r2,4(r3)
   18060:	b0800117 	ldw	r2,4(r22)
   18064:	a009883a 	mov	r4,r20
   18068:	1080004c 	andi	r2,r2,1
   1806c:	1462b03a 	or	r17,r2,r17
   18070:	b4400115 	stw	r17,4(r22)
   18074:	001f4580 	call	1f458 <__malloc_unlock>
   18078:	9005883a 	mov	r2,r18
   1807c:	003f4006 	br	17d80 <__alt_data_end+0xfc017d80>
   18080:	a8c00217 	ldw	r3,8(r21)
   18084:	90c00215 	stw	r3,8(r18)
   18088:	a8c00317 	ldw	r3,12(r21)
   1808c:	90c00315 	stw	r3,12(r18)
   18090:	30801126 	beq	r6,r2,180d8 <_realloc_r+0x4c8>
   18094:	90800404 	addi	r2,r18,16
   18098:	a8c00404 	addi	r3,r21,16
   1809c:	003f1906 	br	17d04 <__alt_data_end+0xfc017d04>
   180a0:	90ffff17 	ldw	r3,-4(r18)
   180a4:	00bfff04 	movi	r2,-4
   180a8:	a825883a 	mov	r18,r21
   180ac:	1884703a 	and	r2,r3,r2
   180b0:	80a1883a 	add	r16,r16,r2
   180b4:	003f2406 	br	17d48 <__alt_data_end+0xfc017d48>
   180b8:	a8800217 	ldw	r2,8(r21)
   180bc:	b0800415 	stw	r2,16(r22)
   180c0:	a8800317 	ldw	r2,12(r21)
   180c4:	b0800515 	stw	r2,20(r22)
   180c8:	31000a26 	beq	r6,r4,180f4 <_realloc_r+0x4e4>
   180cc:	b0800604 	addi	r2,r22,24
   180d0:	ad400404 	addi	r21,r21,16
   180d4:	003fa906 	br	17f7c <__alt_data_end+0xfc017f7c>
   180d8:	a9000417 	ldw	r4,16(r21)
   180dc:	90800604 	addi	r2,r18,24
   180e0:	a8c00604 	addi	r3,r21,24
   180e4:	91000415 	stw	r4,16(r18)
   180e8:	a9000517 	ldw	r4,20(r21)
   180ec:	91000515 	stw	r4,20(r18)
   180f0:	003f0406 	br	17d04 <__alt_data_end+0xfc017d04>
   180f4:	a8c00417 	ldw	r3,16(r21)
   180f8:	ad400604 	addi	r21,r21,24
   180fc:	b0800804 	addi	r2,r22,32
   18100:	b0c00615 	stw	r3,24(r22)
   18104:	a8ffff17 	ldw	r3,-4(r21)
   18108:	b0c00715 	stw	r3,28(r22)
   1810c:	003f9b06 	br	17f7c <__alt_data_end+0xfc017f7c>
   18110:	9005883a 	mov	r2,r18
   18114:	003fc706 	br	18034 <__alt_data_end+0xfc018034>
   18118:	a80b883a 	mov	r5,r21
   1811c:	9009883a 	mov	r4,r18
   18120:	00168940 	call	16894 <memmove>
   18124:	003fc906 	br	1804c <__alt_data_end+0xfc01804c>
   18128:	a8800217 	ldw	r2,8(r21)
   1812c:	b0800415 	stw	r2,16(r22)
   18130:	a8800317 	ldw	r2,12(r21)
   18134:	b0800515 	stw	r2,20(r22)
   18138:	31000726 	beq	r6,r4,18158 <_realloc_r+0x548>
   1813c:	b0800604 	addi	r2,r22,24
   18140:	ad400404 	addi	r21,r21,16
   18144:	003fbb06 	br	18034 <__alt_data_end+0xfc018034>
   18148:	a009883a 	mov	r4,r20
   1814c:	001f4580 	call	1f458 <__malloc_unlock>
   18150:	0005883a 	mov	r2,zero
   18154:	003f0a06 	br	17d80 <__alt_data_end+0xfc017d80>
   18158:	a8c00417 	ldw	r3,16(r21)
   1815c:	ad400604 	addi	r21,r21,24
   18160:	b0800804 	addi	r2,r22,32
   18164:	b0c00615 	stw	r3,24(r22)
   18168:	a8ffff17 	ldw	r3,-4(r21)
   1816c:	b0c00715 	stw	r3,28(r22)
   18170:	003fb006 	br	18034 <__alt_data_end+0xfc018034>

00018174 <__fpclassifyd>:
   18174:	00a00034 	movhi	r2,32768
   18178:	10bfffc4 	addi	r2,r2,-1
   1817c:	2884703a 	and	r2,r5,r2
   18180:	10000726 	beq	r2,zero,181a0 <__fpclassifyd+0x2c>
   18184:	00fffc34 	movhi	r3,65520
   18188:	019ff834 	movhi	r6,32736
   1818c:	28c7883a 	add	r3,r5,r3
   18190:	31bfffc4 	addi	r6,r6,-1
   18194:	30c00536 	bltu	r6,r3,181ac <__fpclassifyd+0x38>
   18198:	00800104 	movi	r2,4
   1819c:	f800283a 	ret
   181a0:	2000021e 	bne	r4,zero,181ac <__fpclassifyd+0x38>
   181a4:	00800084 	movi	r2,2
   181a8:	f800283a 	ret
   181ac:	00dffc34 	movhi	r3,32752
   181b0:	019ff834 	movhi	r6,32736
   181b4:	28cb883a 	add	r5,r5,r3
   181b8:	31bfffc4 	addi	r6,r6,-1
   181bc:	317ff62e 	bgeu	r6,r5,18198 <__alt_data_end+0xfc018198>
   181c0:	01400434 	movhi	r5,16
   181c4:	297fffc4 	addi	r5,r5,-1
   181c8:	28800236 	bltu	r5,r2,181d4 <__fpclassifyd+0x60>
   181cc:	008000c4 	movi	r2,3
   181d0:	f800283a 	ret
   181d4:	10c00226 	beq	r2,r3,181e0 <__fpclassifyd+0x6c>
   181d8:	0005883a 	mov	r2,zero
   181dc:	f800283a 	ret
   181e0:	2005003a 	cmpeq	r2,r4,zero
   181e4:	f800283a 	ret

000181e8 <__sread>:
   181e8:	defffe04 	addi	sp,sp,-8
   181ec:	dc000015 	stw	r16,0(sp)
   181f0:	2821883a 	mov	r16,r5
   181f4:	2940038f 	ldh	r5,14(r5)
   181f8:	dfc00115 	stw	ra,4(sp)
   181fc:	001b6900 	call	1b690 <_read_r>
   18200:	10000716 	blt	r2,zero,18220 <__sread+0x38>
   18204:	80c01417 	ldw	r3,80(r16)
   18208:	1887883a 	add	r3,r3,r2
   1820c:	80c01415 	stw	r3,80(r16)
   18210:	dfc00117 	ldw	ra,4(sp)
   18214:	dc000017 	ldw	r16,0(sp)
   18218:	dec00204 	addi	sp,sp,8
   1821c:	f800283a 	ret
   18220:	80c0030b 	ldhu	r3,12(r16)
   18224:	18fbffcc 	andi	r3,r3,61439
   18228:	80c0030d 	sth	r3,12(r16)
   1822c:	dfc00117 	ldw	ra,4(sp)
   18230:	dc000017 	ldw	r16,0(sp)
   18234:	dec00204 	addi	sp,sp,8
   18238:	f800283a 	ret

0001823c <__seofread>:
   1823c:	0005883a 	mov	r2,zero
   18240:	f800283a 	ret

00018244 <__swrite>:
   18244:	2880030b 	ldhu	r2,12(r5)
   18248:	defffb04 	addi	sp,sp,-20
   1824c:	dcc00315 	stw	r19,12(sp)
   18250:	dc800215 	stw	r18,8(sp)
   18254:	dc400115 	stw	r17,4(sp)
   18258:	dc000015 	stw	r16,0(sp)
   1825c:	dfc00415 	stw	ra,16(sp)
   18260:	10c0400c 	andi	r3,r2,256
   18264:	2821883a 	mov	r16,r5
   18268:	2023883a 	mov	r17,r4
   1826c:	3025883a 	mov	r18,r6
   18270:	3827883a 	mov	r19,r7
   18274:	18000526 	beq	r3,zero,1828c <__swrite+0x48>
   18278:	2940038f 	ldh	r5,14(r5)
   1827c:	01c00084 	movi	r7,2
   18280:	000d883a 	mov	r6,zero
   18284:	001b6300 	call	1b630 <_lseek_r>
   18288:	8080030b 	ldhu	r2,12(r16)
   1828c:	8140038f 	ldh	r5,14(r16)
   18290:	10bbffcc 	andi	r2,r2,61439
   18294:	980f883a 	mov	r7,r19
   18298:	900d883a 	mov	r6,r18
   1829c:	8809883a 	mov	r4,r17
   182a0:	8080030d 	sth	r2,12(r16)
   182a4:	dfc00417 	ldw	ra,16(sp)
   182a8:	dcc00317 	ldw	r19,12(sp)
   182ac:	dc800217 	ldw	r18,8(sp)
   182b0:	dc400117 	ldw	r17,4(sp)
   182b4:	dc000017 	ldw	r16,0(sp)
   182b8:	dec00504 	addi	sp,sp,20
   182bc:	001b0e41 	jmpi	1b0e4 <_write_r>

000182c0 <__sseek>:
   182c0:	defffe04 	addi	sp,sp,-8
   182c4:	dc000015 	stw	r16,0(sp)
   182c8:	2821883a 	mov	r16,r5
   182cc:	2940038f 	ldh	r5,14(r5)
   182d0:	dfc00115 	stw	ra,4(sp)
   182d4:	001b6300 	call	1b630 <_lseek_r>
   182d8:	00ffffc4 	movi	r3,-1
   182dc:	10c00826 	beq	r2,r3,18300 <__sseek+0x40>
   182e0:	80c0030b 	ldhu	r3,12(r16)
   182e4:	80801415 	stw	r2,80(r16)
   182e8:	18c40014 	ori	r3,r3,4096
   182ec:	80c0030d 	sth	r3,12(r16)
   182f0:	dfc00117 	ldw	ra,4(sp)
   182f4:	dc000017 	ldw	r16,0(sp)
   182f8:	dec00204 	addi	sp,sp,8
   182fc:	f800283a 	ret
   18300:	80c0030b 	ldhu	r3,12(r16)
   18304:	18fbffcc 	andi	r3,r3,61439
   18308:	80c0030d 	sth	r3,12(r16)
   1830c:	dfc00117 	ldw	ra,4(sp)
   18310:	dc000017 	ldw	r16,0(sp)
   18314:	dec00204 	addi	sp,sp,8
   18318:	f800283a 	ret

0001831c <__sclose>:
   1831c:	2940038f 	ldh	r5,14(r5)
   18320:	001b1441 	jmpi	1b144 <_close_r>

00018324 <__ssprint_r>:
   18324:	30800217 	ldw	r2,8(r6)
   18328:	defff604 	addi	sp,sp,-40
   1832c:	dc800215 	stw	r18,8(sp)
   18330:	dfc00915 	stw	ra,36(sp)
   18334:	df000815 	stw	fp,32(sp)
   18338:	ddc00715 	stw	r23,28(sp)
   1833c:	dd800615 	stw	r22,24(sp)
   18340:	dd400515 	stw	r21,20(sp)
   18344:	dd000415 	stw	r20,16(sp)
   18348:	dcc00315 	stw	r19,12(sp)
   1834c:	dc400115 	stw	r17,4(sp)
   18350:	dc000015 	stw	r16,0(sp)
   18354:	3025883a 	mov	r18,r6
   18358:	10005826 	beq	r2,zero,184bc <__ssprint_r+0x198>
   1835c:	2027883a 	mov	r19,r4
   18360:	35c00017 	ldw	r23,0(r6)
   18364:	29000017 	ldw	r4,0(r5)
   18368:	28800217 	ldw	r2,8(r5)
   1836c:	2823883a 	mov	r17,r5
   18370:	0039883a 	mov	fp,zero
   18374:	0021883a 	mov	r16,zero
   18378:	80003926 	beq	r16,zero,18460 <__ssprint_r+0x13c>
   1837c:	102b883a 	mov	r21,r2
   18380:	102d883a 	mov	r22,r2
   18384:	80803a36 	bltu	r16,r2,18470 <__ssprint_r+0x14c>
   18388:	88c0030b 	ldhu	r3,12(r17)
   1838c:	1881200c 	andi	r2,r3,1152
   18390:	10002626 	beq	r2,zero,1842c <__ssprint_r+0x108>
   18394:	88800517 	ldw	r2,20(r17)
   18398:	89400417 	ldw	r5,16(r17)
   1839c:	81800044 	addi	r6,r16,1
   183a0:	108f883a 	add	r7,r2,r2
   183a4:	3885883a 	add	r2,r7,r2
   183a8:	100ed7fa 	srli	r7,r2,31
   183ac:	216dc83a 	sub	r22,r4,r5
   183b0:	3589883a 	add	r4,r6,r22
   183b4:	3885883a 	add	r2,r7,r2
   183b8:	102bd07a 	srai	r21,r2,1
   183bc:	a80d883a 	mov	r6,r21
   183c0:	a900022e 	bgeu	r21,r4,183cc <__ssprint_r+0xa8>
   183c4:	202b883a 	mov	r21,r4
   183c8:	200d883a 	mov	r6,r4
   183cc:	18c1000c 	andi	r3,r3,1024
   183d0:	18002a26 	beq	r3,zero,1847c <__ssprint_r+0x158>
   183d4:	300b883a 	mov	r5,r6
   183d8:	9809883a 	mov	r4,r19
   183dc:	000e2540 	call	e254 <_malloc_r>
   183e0:	1029883a 	mov	r20,r2
   183e4:	10002c26 	beq	r2,zero,18498 <__ssprint_r+0x174>
   183e8:	89400417 	ldw	r5,16(r17)
   183ec:	b00d883a 	mov	r6,r22
   183f0:	1009883a 	mov	r4,r2
   183f4:	000ea600 	call	ea60 <memcpy>
   183f8:	8880030b 	ldhu	r2,12(r17)
   183fc:	00fedfc4 	movi	r3,-1153
   18400:	10c4703a 	and	r2,r2,r3
   18404:	10802014 	ori	r2,r2,128
   18408:	8880030d 	sth	r2,12(r17)
   1840c:	a589883a 	add	r4,r20,r22
   18410:	adadc83a 	sub	r22,r21,r22
   18414:	8d400515 	stw	r21,20(r17)
   18418:	8d800215 	stw	r22,8(r17)
   1841c:	8d000415 	stw	r20,16(r17)
   18420:	89000015 	stw	r4,0(r17)
   18424:	802b883a 	mov	r21,r16
   18428:	802d883a 	mov	r22,r16
   1842c:	b00d883a 	mov	r6,r22
   18430:	e00b883a 	mov	r5,fp
   18434:	00168940 	call	16894 <memmove>
   18438:	88800217 	ldw	r2,8(r17)
   1843c:	89000017 	ldw	r4,0(r17)
   18440:	90c00217 	ldw	r3,8(r18)
   18444:	1545c83a 	sub	r2,r2,r21
   18448:	2589883a 	add	r4,r4,r22
   1844c:	88800215 	stw	r2,8(r17)
   18450:	89000015 	stw	r4,0(r17)
   18454:	1c21c83a 	sub	r16,r3,r16
   18458:	94000215 	stw	r16,8(r18)
   1845c:	80001726 	beq	r16,zero,184bc <__ssprint_r+0x198>
   18460:	bf000017 	ldw	fp,0(r23)
   18464:	bc000117 	ldw	r16,4(r23)
   18468:	bdc00204 	addi	r23,r23,8
   1846c:	003fc206 	br	18378 <__alt_data_end+0xfc018378>
   18470:	802b883a 	mov	r21,r16
   18474:	802d883a 	mov	r22,r16
   18478:	003fec06 	br	1842c <__alt_data_end+0xfc01842c>
   1847c:	9809883a 	mov	r4,r19
   18480:	0017c100 	call	17c10 <_realloc_r>
   18484:	1029883a 	mov	r20,r2
   18488:	103fe01e 	bne	r2,zero,1840c <__alt_data_end+0xfc01840c>
   1848c:	89400417 	ldw	r5,16(r17)
   18490:	9809883a 	mov	r4,r19
   18494:	0015bb80 	call	15bb8 <_free_r>
   18498:	88c0030b 	ldhu	r3,12(r17)
   1849c:	00800304 	movi	r2,12
   184a0:	98800015 	stw	r2,0(r19)
   184a4:	18c01014 	ori	r3,r3,64
   184a8:	88c0030d 	sth	r3,12(r17)
   184ac:	00bfffc4 	movi	r2,-1
   184b0:	90000215 	stw	zero,8(r18)
   184b4:	90000115 	stw	zero,4(r18)
   184b8:	00000206 	br	184c4 <__ssprint_r+0x1a0>
   184bc:	90000115 	stw	zero,4(r18)
   184c0:	0005883a 	mov	r2,zero
   184c4:	dfc00917 	ldw	ra,36(sp)
   184c8:	df000817 	ldw	fp,32(sp)
   184cc:	ddc00717 	ldw	r23,28(sp)
   184d0:	dd800617 	ldw	r22,24(sp)
   184d4:	dd400517 	ldw	r21,20(sp)
   184d8:	dd000417 	ldw	r20,16(sp)
   184dc:	dcc00317 	ldw	r19,12(sp)
   184e0:	dc800217 	ldw	r18,8(sp)
   184e4:	dc400117 	ldw	r17,4(sp)
   184e8:	dc000017 	ldw	r16,0(sp)
   184ec:	dec00a04 	addi	sp,sp,40
   184f0:	f800283a 	ret

000184f4 <___svfiprintf_internal_r>:
   184f4:	2880030b 	ldhu	r2,12(r5)
   184f8:	deffc804 	addi	sp,sp,-224
   184fc:	dcc03115 	stw	r19,196(sp)
   18500:	dfc03715 	stw	ra,220(sp)
   18504:	df003615 	stw	fp,216(sp)
   18508:	ddc03515 	stw	r23,212(sp)
   1850c:	dd803415 	stw	r22,208(sp)
   18510:	dd403315 	stw	r21,204(sp)
   18514:	dd003215 	stw	r20,200(sp)
   18518:	dc803015 	stw	r18,192(sp)
   1851c:	dc402f15 	stw	r17,188(sp)
   18520:	dc002e15 	stw	r16,184(sp)
   18524:	d9402315 	stw	r5,140(sp)
   18528:	d9002715 	stw	r4,156(sp)
   1852c:	1080200c 	andi	r2,r2,128
   18530:	d9c02415 	stw	r7,144(sp)
   18534:	3027883a 	mov	r19,r6
   18538:	10000226 	beq	r2,zero,18544 <___svfiprintf_internal_r+0x50>
   1853c:	28800417 	ldw	r2,16(r5)
   18540:	10046d26 	beq	r2,zero,196f8 <___svfiprintf_internal_r+0x1204>
   18544:	d8801a04 	addi	r2,sp,104
   18548:	d8c019c4 	addi	r3,sp,103
   1854c:	058000f4 	movhi	r22,3
   18550:	10c9c83a 	sub	r4,r2,r3
   18554:	b5aa7304 	addi	r22,r22,-22068
   18558:	d8801e15 	stw	r2,120(sp)
   1855c:	d8c01f15 	stw	r3,124(sp)
   18560:	dec01a15 	stw	sp,104(sp)
   18564:	d8001c15 	stw	zero,112(sp)
   18568:	d8001b15 	stw	zero,108(sp)
   1856c:	d811883a 	mov	r8,sp
   18570:	d8002915 	stw	zero,164(sp)
   18574:	d8002615 	stw	zero,152(sp)
   18578:	d9002c15 	stw	r4,176(sp)
   1857c:	98800007 	ldb	r2,0(r19)
   18580:	10031426 	beq	r2,zero,191d4 <___svfiprintf_internal_r+0xce0>
   18584:	00c00944 	movi	r3,37
   18588:	9825883a 	mov	r18,r19
   1858c:	10c0021e 	bne	r2,r3,18598 <___svfiprintf_internal_r+0xa4>
   18590:	00001406 	br	185e4 <___svfiprintf_internal_r+0xf0>
   18594:	10c00326 	beq	r2,r3,185a4 <___svfiprintf_internal_r+0xb0>
   18598:	94800044 	addi	r18,r18,1
   1859c:	90800007 	ldb	r2,0(r18)
   185a0:	103ffc1e 	bne	r2,zero,18594 <__alt_data_end+0xfc018594>
   185a4:	94e1c83a 	sub	r16,r18,r19
   185a8:	80000e26 	beq	r16,zero,185e4 <___svfiprintf_internal_r+0xf0>
   185ac:	d8c01c17 	ldw	r3,112(sp)
   185b0:	d8801b17 	ldw	r2,108(sp)
   185b4:	44c00015 	stw	r19,0(r8)
   185b8:	1c07883a 	add	r3,r3,r16
   185bc:	10800044 	addi	r2,r2,1
   185c0:	d8c01c15 	stw	r3,112(sp)
   185c4:	44000115 	stw	r16,4(r8)
   185c8:	d8801b15 	stw	r2,108(sp)
   185cc:	00c001c4 	movi	r3,7
   185d0:	18835c16 	blt	r3,r2,19344 <___svfiprintf_internal_r+0xe50>
   185d4:	42000204 	addi	r8,r8,8
   185d8:	d9402617 	ldw	r5,152(sp)
   185dc:	2c0b883a 	add	r5,r5,r16
   185e0:	d9402615 	stw	r5,152(sp)
   185e4:	90800007 	ldb	r2,0(r18)
   185e8:	1002fc26 	beq	r2,zero,191dc <___svfiprintf_internal_r+0xce8>
   185ec:	0023883a 	mov	r17,zero
   185f0:	00bfffc4 	movi	r2,-1
   185f4:	0021883a 	mov	r16,zero
   185f8:	94c00044 	addi	r19,r18,1
   185fc:	90c00047 	ldb	r3,1(r18)
   18600:	dc402105 	stb	r17,132(sp)
   18604:	d8001d85 	stb	zero,118(sp)
   18608:	002b883a 	mov	r21,zero
   1860c:	d8802015 	stw	r2,128(sp)
   18610:	d8002515 	stw	zero,148(sp)
   18614:	04801604 	movi	r18,88
   18618:	05000244 	movi	r20,9
   1861c:	402f883a 	mov	r23,r8
   18620:	8023883a 	mov	r17,r16
   18624:	9cc00044 	addi	r19,r19,1
   18628:	18bff804 	addi	r2,r3,-32
   1862c:	9081fb36 	bltu	r18,r2,18e1c <___svfiprintf_internal_r+0x928>
   18630:	100490ba 	slli	r2,r2,2
   18634:	010000b4 	movhi	r4,2
   18638:	21219204 	addi	r4,r4,-31160
   1863c:	1105883a 	add	r2,r2,r4
   18640:	10800017 	ldw	r2,0(r2)
   18644:	1000683a 	jmp	r2
   18648:	00018848 	cmpgei	zero,zero,1569
   1864c:	00018e1c 	xori	zero,zero,1592
   18650:	00018e1c 	xori	zero,zero,1592
   18654:	0001883c 	xorhi	zero,zero,1568
   18658:	00018e1c 	xori	zero,zero,1592
   1865c:	00018e1c 	xori	zero,zero,1592
   18660:	00018e1c 	xori	zero,zero,1592
   18664:	00018e1c 	xori	zero,zero,1592
   18668:	00018e1c 	xori	zero,zero,1592
   1866c:	00018e1c 	xori	zero,zero,1592
   18670:	000187ac 	andhi	zero,zero,1566
   18674:	000189a8 	cmpgeui	zero,zero,1574
   18678:	00018e1c 	xori	zero,zero,1592
   1867c:	000187d4 	movui	zero,1567
   18680:	00018e58 	cmpnei	zero,zero,1593
   18684:	00018e1c 	xori	zero,zero,1592
   18688:	00018e4c 	andi	zero,zero,1593
   1868c:	00018de0 	cmpeqi	zero,zero,1591
   18690:	00018de0 	cmpeqi	zero,zero,1591
   18694:	00018de0 	cmpeqi	zero,zero,1591
   18698:	00018de0 	cmpeqi	zero,zero,1591
   1869c:	00018de0 	cmpeqi	zero,zero,1591
   186a0:	00018de0 	cmpeqi	zero,zero,1591
   186a4:	00018de0 	cmpeqi	zero,zero,1591
   186a8:	00018de0 	cmpeqi	zero,zero,1591
   186ac:	00018de0 	cmpeqi	zero,zero,1591
   186b0:	00018e1c 	xori	zero,zero,1592
   186b4:	00018e1c 	xori	zero,zero,1592
   186b8:	00018e1c 	xori	zero,zero,1592
   186bc:	00018e1c 	xori	zero,zero,1592
   186c0:	00018e1c 	xori	zero,zero,1592
   186c4:	00018e1c 	xori	zero,zero,1592
   186c8:	00018e1c 	xori	zero,zero,1592
   186cc:	00018e1c 	xori	zero,zero,1592
   186d0:	00018e1c 	xori	zero,zero,1592
   186d4:	00018e1c 	xori	zero,zero,1592
   186d8:	00018d64 	muli	zero,zero,1589
   186dc:	00018e1c 	xori	zero,zero,1592
   186e0:	00018e1c 	xori	zero,zero,1592
   186e4:	00018e1c 	xori	zero,zero,1592
   186e8:	00018e1c 	xori	zero,zero,1592
   186ec:	00018e1c 	xori	zero,zero,1592
   186f0:	00018e1c 	xori	zero,zero,1592
   186f4:	00018e1c 	xori	zero,zero,1592
   186f8:	00018e1c 	xori	zero,zero,1592
   186fc:	00018e1c 	xori	zero,zero,1592
   18700:	00018e1c 	xori	zero,zero,1592
   18704:	00018f14 	movui	zero,1596
   18708:	00018e1c 	xori	zero,zero,1592
   1870c:	00018e1c 	xori	zero,zero,1592
   18710:	00018e1c 	xori	zero,zero,1592
   18714:	00018e1c 	xori	zero,zero,1592
   18718:	00018e1c 	xori	zero,zero,1592
   1871c:	00018ea0 	cmpeqi	zero,zero,1594
   18720:	00018e1c 	xori	zero,zero,1592
   18724:	00018e1c 	xori	zero,zero,1592
   18728:	00018ba0 	cmpeqi	zero,zero,1582
   1872c:	00018e1c 	xori	zero,zero,1592
   18730:	00018e1c 	xori	zero,zero,1592
   18734:	00018e1c 	xori	zero,zero,1592
   18738:	00018e1c 	xori	zero,zero,1592
   1873c:	00018e1c 	xori	zero,zero,1592
   18740:	00018e1c 	xori	zero,zero,1592
   18744:	00018e1c 	xori	zero,zero,1592
   18748:	00018e1c 	xori	zero,zero,1592
   1874c:	00018e1c 	xori	zero,zero,1592
   18750:	00018e1c 	xori	zero,zero,1592
   18754:	00018a6c 	andhi	zero,zero,1577
   18758:	00018c50 	cmplti	zero,zero,1585
   1875c:	00018e1c 	xori	zero,zero,1592
   18760:	00018e1c 	xori	zero,zero,1592
   18764:	00018e1c 	xori	zero,zero,1592
   18768:	00018c44 	movi	zero,1585
   1876c:	00018c50 	cmplti	zero,zero,1585
   18770:	00018e1c 	xori	zero,zero,1592
   18774:	00018e1c 	xori	zero,zero,1592
   18778:	00018c30 	cmpltui	zero,zero,1584
   1877c:	00018e1c 	xori	zero,zero,1592
   18780:	00018bf0 	cmpltui	zero,zero,1583
   18784:	000189bc 	xorhi	zero,zero,1574
   18788:	000187e0 	cmpeqi	zero,zero,1567
   1878c:	00018d58 	cmpnei	zero,zero,1589
   18790:	00018e1c 	xori	zero,zero,1592
   18794:	00018d04 	movi	zero,1588
   18798:	00018e1c 	xori	zero,zero,1592
   1879c:	00018920 	cmpeqi	zero,zero,1572
   187a0:	00018e1c 	xori	zero,zero,1592
   187a4:	00018e1c 	xori	zero,zero,1592
   187a8:	0001886c 	andhi	zero,zero,1569
   187ac:	d9002417 	ldw	r4,144(sp)
   187b0:	d9402417 	ldw	r5,144(sp)
   187b4:	21000017 	ldw	r4,0(r4)
   187b8:	28800104 	addi	r2,r5,4
   187bc:	d9002515 	stw	r4,148(sp)
   187c0:	20032b0e 	bge	r4,zero,19470 <___svfiprintf_internal_r+0xf7c>
   187c4:	d8c02517 	ldw	r3,148(sp)
   187c8:	d8802415 	stw	r2,144(sp)
   187cc:	00c7c83a 	sub	r3,zero,r3
   187d0:	d8c02515 	stw	r3,148(sp)
   187d4:	8c400114 	ori	r17,r17,4
   187d8:	98c00007 	ldb	r3,0(r19)
   187dc:	003f9106 	br	18624 <__alt_data_end+0xfc018624>
   187e0:	00800c04 	movi	r2,48
   187e4:	d9402417 	ldw	r5,144(sp)
   187e8:	d9002017 	ldw	r4,128(sp)
   187ec:	d8801d05 	stb	r2,116(sp)
   187f0:	00801e04 	movi	r2,120
   187f4:	d8801d45 	stb	r2,117(sp)
   187f8:	d8001d85 	stb	zero,118(sp)
   187fc:	b811883a 	mov	r8,r23
   18800:	28c00104 	addi	r3,r5,4
   18804:	2c800017 	ldw	r18,0(r5)
   18808:	0029883a 	mov	r20,zero
   1880c:	88800094 	ori	r2,r17,2
   18810:	20036316 	blt	r4,zero,195a0 <___svfiprintf_internal_r+0x10ac>
   18814:	00bfdfc4 	movi	r2,-129
   18818:	88a0703a 	and	r16,r17,r2
   1881c:	d8c02415 	stw	r3,144(sp)
   18820:	84000094 	ori	r16,r16,2
   18824:	90031c26 	beq	r18,zero,19498 <___svfiprintf_internal_r+0xfa4>
   18828:	014000f4 	movhi	r5,3
   1882c:	296a0b04 	addi	r5,r5,-22484
   18830:	002b883a 	mov	r21,zero
   18834:	d9402915 	stw	r5,164(sp)
   18838:	00002906 	br	188e0 <___svfiprintf_internal_r+0x3ec>
   1883c:	8c400054 	ori	r17,r17,1
   18840:	98c00007 	ldb	r3,0(r19)
   18844:	003f7706 	br	18624 <__alt_data_end+0xfc018624>
   18848:	a8803fcc 	andi	r2,r21,255
   1884c:	1080201c 	xori	r2,r2,128
   18850:	10bfe004 	addi	r2,r2,-128
   18854:	10032a1e 	bne	r2,zero,19500 <___svfiprintf_internal_r+0x100c>
   18858:	00c00044 	movi	r3,1
   1885c:	d8c02105 	stb	r3,132(sp)
   18860:	05400804 	movi	r21,32
   18864:	98c00007 	ldb	r3,0(r19)
   18868:	003f6e06 	br	18624 <__alt_data_end+0xfc018624>
   1886c:	8821883a 	mov	r16,r17
   18870:	dc402103 	ldbu	r17,132(sp)
   18874:	b811883a 	mov	r8,r23
   18878:	8c403fcc 	andi	r17,r17,255
   1887c:	8803f01e 	bne	r17,zero,19840 <___svfiprintf_internal_r+0x134c>
   18880:	008000f4 	movhi	r2,3
   18884:	10aa0b04 	addi	r2,r2,-22484
   18888:	d8802915 	stw	r2,164(sp)
   1888c:	8080080c 	andi	r2,r16,32
   18890:	1000cd26 	beq	r2,zero,18bc8 <___svfiprintf_internal_r+0x6d4>
   18894:	d9002417 	ldw	r4,144(sp)
   18898:	24800017 	ldw	r18,0(r4)
   1889c:	25000117 	ldw	r20,4(r4)
   188a0:	21000204 	addi	r4,r4,8
   188a4:	d9002415 	stw	r4,144(sp)
   188a8:	8080004c 	andi	r2,r16,1
   188ac:	1002c726 	beq	r2,zero,193cc <___svfiprintf_internal_r+0xed8>
   188b0:	9504b03a 	or	r2,r18,r20
   188b4:	1003061e 	bne	r2,zero,194d0 <___svfiprintf_internal_r+0xfdc>
   188b8:	d9002017 	ldw	r4,128(sp)
   188bc:	d8001d85 	stb	zero,118(sp)
   188c0:	20033e16 	blt	r4,zero,195bc <___svfiprintf_internal_r+0x10c8>
   188c4:	00bfdfc4 	movi	r2,-129
   188c8:	80a0703a 	and	r16,r16,r2
   188cc:	d9402017 	ldw	r5,128(sp)
   188d0:	002b883a 	mov	r21,zero
   188d4:	28002826 	beq	r5,zero,18978 <___svfiprintf_internal_r+0x484>
   188d8:	0025883a 	mov	r18,zero
   188dc:	0029883a 	mov	r20,zero
   188e0:	d9002917 	ldw	r4,164(sp)
   188e4:	dc401a04 	addi	r17,sp,104
   188e8:	908003cc 	andi	r2,r18,15
   188ec:	a006973a 	slli	r3,r20,28
   188f0:	2085883a 	add	r2,r4,r2
   188f4:	9024d13a 	srli	r18,r18,4
   188f8:	10800003 	ldbu	r2,0(r2)
   188fc:	a028d13a 	srli	r20,r20,4
   18900:	8c7fffc4 	addi	r17,r17,-1
   18904:	1ca4b03a 	or	r18,r3,r18
   18908:	88800005 	stb	r2,0(r17)
   1890c:	9504b03a 	or	r2,r18,r20
   18910:	103ff51e 	bne	r2,zero,188e8 <__alt_data_end+0xfc0188e8>
   18914:	d8801e17 	ldw	r2,120(sp)
   18918:	1469c83a 	sub	r20,r2,r17
   1891c:	00001906 	br	18984 <___svfiprintf_internal_r+0x490>
   18920:	8821883a 	mov	r16,r17
   18924:	dc402103 	ldbu	r17,132(sp)
   18928:	b811883a 	mov	r8,r23
   1892c:	8c403fcc 	andi	r17,r17,255
   18930:	8803d01e 	bne	r17,zero,19874 <___svfiprintf_internal_r+0x1380>
   18934:	8080080c 	andi	r2,r16,32
   18938:	10016126 	beq	r2,zero,18ec0 <___svfiprintf_internal_r+0x9cc>
   1893c:	d9002417 	ldw	r4,144(sp)
   18940:	d9402017 	ldw	r5,128(sp)
   18944:	d8001d85 	stb	zero,118(sp)
   18948:	20c00204 	addi	r3,r4,8
   1894c:	24800017 	ldw	r18,0(r4)
   18950:	25000117 	ldw	r20,4(r4)
   18954:	28030f16 	blt	r5,zero,19594 <___svfiprintf_internal_r+0x10a0>
   18958:	013fdfc4 	movi	r4,-129
   1895c:	9504b03a 	or	r2,r18,r20
   18960:	d8c02415 	stw	r3,144(sp)
   18964:	8120703a 	and	r16,r16,r4
   18968:	002b883a 	mov	r21,zero
   1896c:	1000cd1e 	bne	r2,zero,18ca4 <___svfiprintf_internal_r+0x7b0>
   18970:	d8c02017 	ldw	r3,128(sp)
   18974:	1803141e 	bne	r3,zero,195c8 <___svfiprintf_internal_r+0x10d4>
   18978:	d8002015 	stw	zero,128(sp)
   1897c:	0029883a 	mov	r20,zero
   18980:	dc401a04 	addi	r17,sp,104
   18984:	dc802017 	ldw	r18,128(sp)
   18988:	9500010e 	bge	r18,r20,18990 <___svfiprintf_internal_r+0x49c>
   1898c:	a025883a 	mov	r18,r20
   18990:	ad403fcc 	andi	r21,r21,255
   18994:	ad40201c 	xori	r21,r21,128
   18998:	ad7fe004 	addi	r21,r21,-128
   1899c:	a8003f26 	beq	r21,zero,18a9c <___svfiprintf_internal_r+0x5a8>
   189a0:	94800044 	addi	r18,r18,1
   189a4:	00003d06 	br	18a9c <___svfiprintf_internal_r+0x5a8>
   189a8:	00c00044 	movi	r3,1
   189ac:	d8c02105 	stb	r3,132(sp)
   189b0:	05400ac4 	movi	r21,43
   189b4:	98c00007 	ldb	r3,0(r19)
   189b8:	003f1a06 	br	18624 <__alt_data_end+0xfc018624>
   189bc:	8821883a 	mov	r16,r17
   189c0:	dc402103 	ldbu	r17,132(sp)
   189c4:	b811883a 	mov	r8,r23
   189c8:	8c403fcc 	andi	r17,r17,255
   189cc:	8803a71e 	bne	r17,zero,1986c <___svfiprintf_internal_r+0x1378>
   189d0:	8080080c 	andi	r2,r16,32
   189d4:	10015726 	beq	r2,zero,18f34 <___svfiprintf_internal_r+0xa40>
   189d8:	d8c02417 	ldw	r3,144(sp)
   189dc:	d9002017 	ldw	r4,128(sp)
   189e0:	d8001d85 	stb	zero,118(sp)
   189e4:	18800204 	addi	r2,r3,8
   189e8:	1c800017 	ldw	r18,0(r3)
   189ec:	1d000117 	ldw	r20,4(r3)
   189f0:	2002db16 	blt	r4,zero,19560 <___svfiprintf_internal_r+0x106c>
   189f4:	013fdfc4 	movi	r4,-129
   189f8:	9506b03a 	or	r3,r18,r20
   189fc:	d8802415 	stw	r2,144(sp)
   18a00:	8120703a 	and	r16,r16,r4
   18a04:	18015826 	beq	r3,zero,18f68 <___svfiprintf_internal_r+0xa74>
   18a08:	002b883a 	mov	r21,zero
   18a0c:	dc401a04 	addi	r17,sp,104
   18a10:	9006d0fa 	srli	r3,r18,3
   18a14:	a008977a 	slli	r4,r20,29
   18a18:	a028d0fa 	srli	r20,r20,3
   18a1c:	948001cc 	andi	r18,r18,7
   18a20:	90800c04 	addi	r2,r18,48
   18a24:	8c7fffc4 	addi	r17,r17,-1
   18a28:	20e4b03a 	or	r18,r4,r3
   18a2c:	88800005 	stb	r2,0(r17)
   18a30:	9506b03a 	or	r3,r18,r20
   18a34:	183ff61e 	bne	r3,zero,18a10 <__alt_data_end+0xfc018a10>
   18a38:	80c0004c 	andi	r3,r16,1
   18a3c:	18028926 	beq	r3,zero,19464 <___svfiprintf_internal_r+0xf70>
   18a40:	10803fcc 	andi	r2,r2,255
   18a44:	1080201c 	xori	r2,r2,128
   18a48:	10bfe004 	addi	r2,r2,-128
   18a4c:	00c00c04 	movi	r3,48
   18a50:	10ffb026 	beq	r2,r3,18914 <__alt_data_end+0xfc018914>
   18a54:	88ffffc5 	stb	r3,-1(r17)
   18a58:	d8c01e17 	ldw	r3,120(sp)
   18a5c:	88bfffc4 	addi	r2,r17,-1
   18a60:	1023883a 	mov	r17,r2
   18a64:	18a9c83a 	sub	r20,r3,r2
   18a68:	003fc606 	br	18984 <__alt_data_end+0xfc018984>
   18a6c:	d8c02417 	ldw	r3,144(sp)
   18a70:	04800044 	movi	r18,1
   18a74:	8821883a 	mov	r16,r17
   18a78:	18800017 	ldw	r2,0(r3)
   18a7c:	18c00104 	addi	r3,r3,4
   18a80:	b811883a 	mov	r8,r23
   18a84:	d8001d85 	stb	zero,118(sp)
   18a88:	d8801005 	stb	r2,64(sp)
   18a8c:	d8c02415 	stw	r3,144(sp)
   18a90:	9029883a 	mov	r20,r18
   18a94:	dc401004 	addi	r17,sp,64
   18a98:	d8002015 	stw	zero,128(sp)
   18a9c:	80c0008c 	andi	r3,r16,2
   18aa0:	d8c02115 	stw	r3,132(sp)
   18aa4:	18000126 	beq	r3,zero,18aac <___svfiprintf_internal_r+0x5b8>
   18aa8:	94800084 	addi	r18,r18,2
   18aac:	80c0210c 	andi	r3,r16,132
   18ab0:	d8c02215 	stw	r3,136(sp)
   18ab4:	1801321e 	bne	r3,zero,18f80 <___svfiprintf_internal_r+0xa8c>
   18ab8:	d9002517 	ldw	r4,148(sp)
   18abc:	24b9c83a 	sub	fp,r4,r18
   18ac0:	07012f0e 	bge	zero,fp,18f80 <___svfiprintf_internal_r+0xa8c>
   18ac4:	02400404 	movi	r9,16
   18ac8:	d8c01c17 	ldw	r3,112(sp)
   18acc:	d8801b17 	ldw	r2,108(sp)
   18ad0:	4f03250e 	bge	r9,fp,19768 <___svfiprintf_internal_r+0x1274>
   18ad4:	010000f4 	movhi	r4,3
   18ad8:	212a7704 	addi	r4,r4,-22052
   18adc:	dc002a15 	stw	r16,168(sp)
   18ae0:	dc402b15 	stw	r17,172(sp)
   18ae4:	d9002815 	stw	r4,160(sp)
   18ae8:	e023883a 	mov	r17,fp
   18aec:	482f883a 	mov	r23,r9
   18af0:	9839883a 	mov	fp,r19
   18af4:	054001c4 	movi	r21,7
   18af8:	9027883a 	mov	r19,r18
   18afc:	dc002717 	ldw	r16,156(sp)
   18b00:	dc802317 	ldw	r18,140(sp)
   18b04:	00000306 	br	18b14 <___svfiprintf_internal_r+0x620>
   18b08:	8c7ffc04 	addi	r17,r17,-16
   18b0c:	42000204 	addi	r8,r8,8
   18b10:	bc40130e 	bge	r23,r17,18b60 <___svfiprintf_internal_r+0x66c>
   18b14:	014000f4 	movhi	r5,3
   18b18:	18c00404 	addi	r3,r3,16
   18b1c:	10800044 	addi	r2,r2,1
   18b20:	296a7704 	addi	r5,r5,-22052
   18b24:	41400015 	stw	r5,0(r8)
   18b28:	45c00115 	stw	r23,4(r8)
   18b2c:	d8c01c15 	stw	r3,112(sp)
   18b30:	d8801b15 	stw	r2,108(sp)
   18b34:	a8bff40e 	bge	r21,r2,18b08 <__alt_data_end+0xfc018b08>
   18b38:	d9801a04 	addi	r6,sp,104
   18b3c:	900b883a 	mov	r5,r18
   18b40:	8009883a 	mov	r4,r16
   18b44:	00183240 	call	18324 <__ssprint_r>
   18b48:	1001aa1e 	bne	r2,zero,191f4 <___svfiprintf_internal_r+0xd00>
   18b4c:	8c7ffc04 	addi	r17,r17,-16
   18b50:	d8c01c17 	ldw	r3,112(sp)
   18b54:	d8801b17 	ldw	r2,108(sp)
   18b58:	d811883a 	mov	r8,sp
   18b5c:	bc7fed16 	blt	r23,r17,18b14 <__alt_data_end+0xfc018b14>
   18b60:	9825883a 	mov	r18,r19
   18b64:	dc002a17 	ldw	r16,168(sp)
   18b68:	e027883a 	mov	r19,fp
   18b6c:	8839883a 	mov	fp,r17
   18b70:	dc402b17 	ldw	r17,172(sp)
   18b74:	d9002817 	ldw	r4,160(sp)
   18b78:	e0c7883a 	add	r3,fp,r3
   18b7c:	10800044 	addi	r2,r2,1
   18b80:	41000015 	stw	r4,0(r8)
   18b84:	47000115 	stw	fp,4(r8)
   18b88:	d8c01c15 	stw	r3,112(sp)
   18b8c:	d8801b15 	stw	r2,108(sp)
   18b90:	010001c4 	movi	r4,7
   18b94:	20821616 	blt	r4,r2,193f0 <___svfiprintf_internal_r+0xefc>
   18b98:	42000204 	addi	r8,r8,8
   18b9c:	0000fa06 	br	18f88 <___svfiprintf_internal_r+0xa94>
   18ba0:	8821883a 	mov	r16,r17
   18ba4:	dc402103 	ldbu	r17,132(sp)
   18ba8:	b811883a 	mov	r8,r23
   18bac:	8c403fcc 	andi	r17,r17,255
   18bb0:	8803361e 	bne	r17,zero,1988c <___svfiprintf_internal_r+0x1398>
   18bb4:	014000f4 	movhi	r5,3
   18bb8:	296a0604 	addi	r5,r5,-22504
   18bbc:	d9402915 	stw	r5,164(sp)
   18bc0:	8080080c 	andi	r2,r16,32
   18bc4:	103f331e 	bne	r2,zero,18894 <__alt_data_end+0xfc018894>
   18bc8:	8080040c 	andi	r2,r16,16
   18bcc:	1002551e 	bne	r2,zero,19524 <___svfiprintf_internal_r+0x1030>
   18bd0:	8080100c 	andi	r2,r16,64
   18bd4:	1002a626 	beq	r2,zero,19670 <___svfiprintf_internal_r+0x117c>
   18bd8:	d8802417 	ldw	r2,144(sp)
   18bdc:	0029883a 	mov	r20,zero
   18be0:	1480000b 	ldhu	r18,0(r2)
   18be4:	10800104 	addi	r2,r2,4
   18be8:	d8802415 	stw	r2,144(sp)
   18bec:	003f2e06 	br	188a8 <__alt_data_end+0xfc0188a8>
   18bf0:	8821883a 	mov	r16,r17
   18bf4:	dc402103 	ldbu	r17,132(sp)
   18bf8:	b811883a 	mov	r8,r23
   18bfc:	8c403fcc 	andi	r17,r17,255
   18c00:	88030b1e 	bne	r17,zero,19830 <___svfiprintf_internal_r+0x133c>
   18c04:	8080080c 	andi	r2,r16,32
   18c08:	1002271e 	bne	r2,zero,194a8 <___svfiprintf_internal_r+0xfb4>
   18c0c:	8080040c 	andi	r2,r16,16
   18c10:	10028e26 	beq	r2,zero,1964c <___svfiprintf_internal_r+0x1158>
   18c14:	d8c02417 	ldw	r3,144(sp)
   18c18:	d9002617 	ldw	r4,152(sp)
   18c1c:	18800017 	ldw	r2,0(r3)
   18c20:	18c00104 	addi	r3,r3,4
   18c24:	d8c02415 	stw	r3,144(sp)
   18c28:	11000015 	stw	r4,0(r2)
   18c2c:	003e5306 	br	1857c <__alt_data_end+0xfc01857c>
   18c30:	98c00007 	ldb	r3,0(r19)
   18c34:	01401b04 	movi	r5,108
   18c38:	19424f26 	beq	r3,r5,19578 <___svfiprintf_internal_r+0x1084>
   18c3c:	8c400414 	ori	r17,r17,16
   18c40:	003e7806 	br	18624 <__alt_data_end+0xfc018624>
   18c44:	8c401014 	ori	r17,r17,64
   18c48:	98c00007 	ldb	r3,0(r19)
   18c4c:	003e7506 	br	18624 <__alt_data_end+0xfc018624>
   18c50:	8821883a 	mov	r16,r17
   18c54:	dc402103 	ldbu	r17,132(sp)
   18c58:	b811883a 	mov	r8,r23
   18c5c:	8c403fcc 	andi	r17,r17,255
   18c60:	8802fe1e 	bne	r17,zero,1985c <___svfiprintf_internal_r+0x1368>
   18c64:	8080080c 	andi	r2,r16,32
   18c68:	10004626 	beq	r2,zero,18d84 <___svfiprintf_internal_r+0x890>
   18c6c:	d9002417 	ldw	r4,144(sp)
   18c70:	20800117 	ldw	r2,4(r4)
   18c74:	24800017 	ldw	r18,0(r4)
   18c78:	21000204 	addi	r4,r4,8
   18c7c:	d9002415 	stw	r4,144(sp)
   18c80:	1029883a 	mov	r20,r2
   18c84:	10004a16 	blt	r2,zero,18db0 <___svfiprintf_internal_r+0x8bc>
   18c88:	d9002017 	ldw	r4,128(sp)
   18c8c:	dd401d83 	ldbu	r21,118(sp)
   18c90:	2001eb16 	blt	r4,zero,19440 <___svfiprintf_internal_r+0xf4c>
   18c94:	00ffdfc4 	movi	r3,-129
   18c98:	9504b03a 	or	r2,r18,r20
   18c9c:	80e0703a 	and	r16,r16,r3
   18ca0:	103f3326 	beq	r2,zero,18970 <__alt_data_end+0xfc018970>
   18ca4:	a0009426 	beq	r20,zero,18ef8 <___svfiprintf_internal_r+0xa04>
   18ca8:	dc401a04 	addi	r17,sp,104
   18cac:	402f883a 	mov	r23,r8
   18cb0:	9009883a 	mov	r4,r18
   18cb4:	a00b883a 	mov	r5,r20
   18cb8:	01800284 	movi	r6,10
   18cbc:	000f883a 	mov	r7,zero
   18cc0:	001bed40 	call	1bed4 <__umoddi3>
   18cc4:	10800c04 	addi	r2,r2,48
   18cc8:	8c7fffc4 	addi	r17,r17,-1
   18ccc:	9009883a 	mov	r4,r18
   18cd0:	a00b883a 	mov	r5,r20
   18cd4:	88800005 	stb	r2,0(r17)
   18cd8:	01800284 	movi	r6,10
   18cdc:	000f883a 	mov	r7,zero
   18ce0:	001b8d80 	call	1b8d8 <__udivdi3>
   18ce4:	1025883a 	mov	r18,r2
   18ce8:	10c4b03a 	or	r2,r2,r3
   18cec:	1829883a 	mov	r20,r3
   18cf0:	103fef1e 	bne	r2,zero,18cb0 <__alt_data_end+0xfc018cb0>
   18cf4:	d9001e17 	ldw	r4,120(sp)
   18cf8:	b811883a 	mov	r8,r23
   18cfc:	2469c83a 	sub	r20,r4,r17
   18d00:	003f2006 	br	18984 <__alt_data_end+0xfc018984>
   18d04:	d8802417 	ldw	r2,144(sp)
   18d08:	8821883a 	mov	r16,r17
   18d0c:	d8001d85 	stb	zero,118(sp)
   18d10:	14400017 	ldw	r17,0(r2)
   18d14:	b811883a 	mov	r8,r23
   18d18:	15c00104 	addi	r23,r2,4
   18d1c:	88026c26 	beq	r17,zero,196d0 <___svfiprintf_internal_r+0x11dc>
   18d20:	d8c02017 	ldw	r3,128(sp)
   18d24:	18025f16 	blt	r3,zero,196a4 <___svfiprintf_internal_r+0x11b0>
   18d28:	180d883a 	mov	r6,r3
   18d2c:	000b883a 	mov	r5,zero
   18d30:	8809883a 	mov	r4,r17
   18d34:	da002d15 	stw	r8,180(sp)
   18d38:	00167b00 	call	167b0 <memchr>
   18d3c:	da002d17 	ldw	r8,180(sp)
   18d40:	1002a526 	beq	r2,zero,197d8 <___svfiprintf_internal_r+0x12e4>
   18d44:	1469c83a 	sub	r20,r2,r17
   18d48:	dd401d83 	ldbu	r21,118(sp)
   18d4c:	ddc02415 	stw	r23,144(sp)
   18d50:	d8002015 	stw	zero,128(sp)
   18d54:	003f0b06 	br	18984 <__alt_data_end+0xfc018984>
   18d58:	8c400814 	ori	r17,r17,32
   18d5c:	98c00007 	ldb	r3,0(r19)
   18d60:	003e3006 	br	18624 <__alt_data_end+0xfc018624>
   18d64:	8821883a 	mov	r16,r17
   18d68:	dc402103 	ldbu	r17,132(sp)
   18d6c:	b811883a 	mov	r8,r23
   18d70:	8c403fcc 	andi	r17,r17,255
   18d74:	8802b01e 	bne	r17,zero,19838 <___svfiprintf_internal_r+0x1344>
   18d78:	84000414 	ori	r16,r16,16
   18d7c:	8080080c 	andi	r2,r16,32
   18d80:	103fba1e 	bne	r2,zero,18c6c <__alt_data_end+0xfc018c6c>
   18d84:	8080040c 	andi	r2,r16,16
   18d88:	1001df1e 	bne	r2,zero,19508 <___svfiprintf_internal_r+0x1014>
   18d8c:	8080100c 	andi	r2,r16,64
   18d90:	10023d26 	beq	r2,zero,19688 <___svfiprintf_internal_r+0x1194>
   18d94:	d8802417 	ldw	r2,144(sp)
   18d98:	1480000f 	ldh	r18,0(r2)
   18d9c:	10800104 	addi	r2,r2,4
   18da0:	d8802415 	stw	r2,144(sp)
   18da4:	9029d7fa 	srai	r20,r18,31
   18da8:	a005883a 	mov	r2,r20
   18dac:	103fb60e 	bge	r2,zero,18c88 <__alt_data_end+0xfc018c88>
   18db0:	d9402017 	ldw	r5,128(sp)
   18db4:	04a5c83a 	sub	r18,zero,r18
   18db8:	05400b44 	movi	r21,45
   18dbc:	9004c03a 	cmpne	r2,r18,zero
   18dc0:	0529c83a 	sub	r20,zero,r20
   18dc4:	dd401d85 	stb	r21,118(sp)
   18dc8:	a0a9c83a 	sub	r20,r20,r2
   18dcc:	28026c16 	blt	r5,zero,19780 <___svfiprintf_internal_r+0x128c>
   18dd0:	00bfdfc4 	movi	r2,-129
   18dd4:	80a0703a 	and	r16,r16,r2
   18dd8:	a03fb31e 	bne	r20,zero,18ca8 <__alt_data_end+0xfc018ca8>
   18ddc:	00004606 	br	18ef8 <___svfiprintf_internal_r+0xa04>
   18de0:	9839883a 	mov	fp,r19
   18de4:	d8002515 	stw	zero,148(sp)
   18de8:	1c3ff404 	addi	r16,r3,-48
   18dec:	0009883a 	mov	r4,zero
   18df0:	01400284 	movi	r5,10
   18df4:	000ccac0 	call	ccac <__mulsi3>
   18df8:	e0c00007 	ldb	r3,0(fp)
   18dfc:	8089883a 	add	r4,r16,r2
   18e00:	9cc00044 	addi	r19,r19,1
   18e04:	1c3ff404 	addi	r16,r3,-48
   18e08:	9839883a 	mov	fp,r19
   18e0c:	a43ff82e 	bgeu	r20,r16,18df0 <__alt_data_end+0xfc018df0>
   18e10:	d9002515 	stw	r4,148(sp)
   18e14:	18bff804 	addi	r2,r3,-32
   18e18:	90be052e 	bgeu	r18,r2,18630 <__alt_data_end+0xfc018630>
   18e1c:	8821883a 	mov	r16,r17
   18e20:	dc402103 	ldbu	r17,132(sp)
   18e24:	b811883a 	mov	r8,r23
   18e28:	8c403fcc 	andi	r17,r17,255
   18e2c:	88028d1e 	bne	r17,zero,19864 <___svfiprintf_internal_r+0x1370>
   18e30:	1800ea26 	beq	r3,zero,191dc <___svfiprintf_internal_r+0xce8>
   18e34:	04800044 	movi	r18,1
   18e38:	d8c01005 	stb	r3,64(sp)
   18e3c:	d8001d85 	stb	zero,118(sp)
   18e40:	9029883a 	mov	r20,r18
   18e44:	dc401004 	addi	r17,sp,64
   18e48:	003f1306 	br	18a98 <__alt_data_end+0xfc018a98>
   18e4c:	8c402014 	ori	r17,r17,128
   18e50:	98c00007 	ldb	r3,0(r19)
   18e54:	003df306 	br	18624 <__alt_data_end+0xfc018624>
   18e58:	98c00007 	ldb	r3,0(r19)
   18e5c:	01000a84 	movi	r4,42
   18e60:	9f000044 	addi	fp,r19,1
   18e64:	19026326 	beq	r3,r4,197f4 <___svfiprintf_internal_r+0x1300>
   18e68:	1c3ff404 	addi	r16,r3,-48
   18e6c:	0009883a 	mov	r4,zero
   18e70:	a4025636 	bltu	r20,r16,197cc <___svfiprintf_internal_r+0x12d8>
   18e74:	01400284 	movi	r5,10
   18e78:	000ccac0 	call	ccac <__mulsi3>
   18e7c:	e0c00007 	ldb	r3,0(fp)
   18e80:	1409883a 	add	r4,r2,r16
   18e84:	e4c00044 	addi	r19,fp,1
   18e88:	1c3ff404 	addi	r16,r3,-48
   18e8c:	9839883a 	mov	fp,r19
   18e90:	a43ff82e 	bgeu	r20,r16,18e74 <__alt_data_end+0xfc018e74>
   18e94:	20020c16 	blt	r4,zero,196c8 <___svfiprintf_internal_r+0x11d4>
   18e98:	d9002015 	stw	r4,128(sp)
   18e9c:	003de206 	br	18628 <__alt_data_end+0xfc018628>
   18ea0:	8821883a 	mov	r16,r17
   18ea4:	dc402103 	ldbu	r17,132(sp)
   18ea8:	b811883a 	mov	r8,r23
   18eac:	8c403fcc 	andi	r17,r17,255
   18eb0:	8802721e 	bne	r17,zero,1987c <___svfiprintf_internal_r+0x1388>
   18eb4:	84000414 	ori	r16,r16,16
   18eb8:	8080080c 	andi	r2,r16,32
   18ebc:	103e9f1e 	bne	r2,zero,1893c <__alt_data_end+0xfc01893c>
   18ec0:	8080040c 	andi	r2,r16,16
   18ec4:	10015326 	beq	r2,zero,19414 <___svfiprintf_internal_r+0xf20>
   18ec8:	d8c02417 	ldw	r3,144(sp)
   18ecc:	d9002017 	ldw	r4,128(sp)
   18ed0:	d8001d85 	stb	zero,118(sp)
   18ed4:	18800104 	addi	r2,r3,4
   18ed8:	1c800017 	ldw	r18,0(r3)
   18edc:	0029883a 	mov	r20,zero
   18ee0:	20015516 	blt	r4,zero,19438 <___svfiprintf_internal_r+0xf44>
   18ee4:	00ffdfc4 	movi	r3,-129
   18ee8:	d8802415 	stw	r2,144(sp)
   18eec:	80e0703a 	and	r16,r16,r3
   18ef0:	002b883a 	mov	r21,zero
   18ef4:	903e9e26 	beq	r18,zero,18970 <__alt_data_end+0xfc018970>
   18ef8:	00800244 	movi	r2,9
   18efc:	14bf6a36 	bltu	r2,r18,18ca8 <__alt_data_end+0xfc018ca8>
   18f00:	94800c04 	addi	r18,r18,48
   18f04:	dc8019c5 	stb	r18,103(sp)
   18f08:	dd002c17 	ldw	r20,176(sp)
   18f0c:	dc4019c4 	addi	r17,sp,103
   18f10:	003e9c06 	br	18984 <__alt_data_end+0xfc018984>
   18f14:	8821883a 	mov	r16,r17
   18f18:	dc402103 	ldbu	r17,132(sp)
   18f1c:	b811883a 	mov	r8,r23
   18f20:	8c403fcc 	andi	r17,r17,255
   18f24:	8802571e 	bne	r17,zero,19884 <___svfiprintf_internal_r+0x1390>
   18f28:	84000414 	ori	r16,r16,16
   18f2c:	8080080c 	andi	r2,r16,32
   18f30:	103ea91e 	bne	r2,zero,189d8 <__alt_data_end+0xfc0189d8>
   18f34:	8080040c 	andi	r2,r16,16
   18f38:	10018026 	beq	r2,zero,1953c <___svfiprintf_internal_r+0x1048>
   18f3c:	d9402417 	ldw	r5,144(sp)
   18f40:	d8c02017 	ldw	r3,128(sp)
   18f44:	d8001d85 	stb	zero,118(sp)
   18f48:	28800104 	addi	r2,r5,4
   18f4c:	2c800017 	ldw	r18,0(r5)
   18f50:	0029883a 	mov	r20,zero
   18f54:	18018216 	blt	r3,zero,19560 <___svfiprintf_internal_r+0x106c>
   18f58:	00ffdfc4 	movi	r3,-129
   18f5c:	d8802415 	stw	r2,144(sp)
   18f60:	80e0703a 	and	r16,r16,r3
   18f64:	903ea81e 	bne	r18,zero,18a08 <__alt_data_end+0xfc018a08>
   18f68:	d8802017 	ldw	r2,128(sp)
   18f6c:	002b883a 	mov	r21,zero
   18f70:	1001f226 	beq	r2,zero,1973c <___svfiprintf_internal_r+0x1248>
   18f74:	0025883a 	mov	r18,zero
   18f78:	0029883a 	mov	r20,zero
   18f7c:	003ea306 	br	18a0c <__alt_data_end+0xfc018a0c>
   18f80:	d8c01c17 	ldw	r3,112(sp)
   18f84:	d8801b17 	ldw	r2,108(sp)
   18f88:	d9001d87 	ldb	r4,118(sp)
   18f8c:	20000b26 	beq	r4,zero,18fbc <___svfiprintf_internal_r+0xac8>
   18f90:	d9001d84 	addi	r4,sp,118
   18f94:	18c00044 	addi	r3,r3,1
   18f98:	10800044 	addi	r2,r2,1
   18f9c:	41000015 	stw	r4,0(r8)
   18fa0:	01000044 	movi	r4,1
   18fa4:	41000115 	stw	r4,4(r8)
   18fa8:	d8c01c15 	stw	r3,112(sp)
   18fac:	d8801b15 	stw	r2,108(sp)
   18fb0:	010001c4 	movi	r4,7
   18fb4:	2080f316 	blt	r4,r2,19384 <___svfiprintf_internal_r+0xe90>
   18fb8:	42000204 	addi	r8,r8,8
   18fbc:	d9402117 	ldw	r5,132(sp)
   18fc0:	28000b26 	beq	r5,zero,18ff0 <___svfiprintf_internal_r+0xafc>
   18fc4:	d9001d04 	addi	r4,sp,116
   18fc8:	18c00084 	addi	r3,r3,2
   18fcc:	10800044 	addi	r2,r2,1
   18fd0:	41000015 	stw	r4,0(r8)
   18fd4:	01000084 	movi	r4,2
   18fd8:	41000115 	stw	r4,4(r8)
   18fdc:	d8c01c15 	stw	r3,112(sp)
   18fe0:	d8801b15 	stw	r2,108(sp)
   18fe4:	010001c4 	movi	r4,7
   18fe8:	2080ef16 	blt	r4,r2,193a8 <___svfiprintf_internal_r+0xeb4>
   18fec:	42000204 	addi	r8,r8,8
   18ff0:	d9402217 	ldw	r5,136(sp)
   18ff4:	01002004 	movi	r4,128
   18ff8:	29008f26 	beq	r5,r4,19238 <___svfiprintf_internal_r+0xd44>
   18ffc:	d9002017 	ldw	r4,128(sp)
   19000:	252fc83a 	sub	r23,r4,r20
   19004:	05c0310e 	bge	zero,r23,190cc <___svfiprintf_internal_r+0xbd8>
   19008:	07000404 	movi	fp,16
   1900c:	e5c17d0e 	bge	fp,r23,19604 <___svfiprintf_internal_r+0x1110>
   19010:	010000f4 	movhi	r4,3
   19014:	212a7304 	addi	r4,r4,-22068
   19018:	dc002015 	stw	r16,128(sp)
   1901c:	dc402215 	stw	r17,136(sp)
   19020:	d9002115 	stw	r4,132(sp)
   19024:	b823883a 	mov	r17,r23
   19028:	054001c4 	movi	r21,7
   1902c:	982f883a 	mov	r23,r19
   19030:	dc002717 	ldw	r16,156(sp)
   19034:	9027883a 	mov	r19,r18
   19038:	dc802317 	ldw	r18,140(sp)
   1903c:	00000306 	br	1904c <___svfiprintf_internal_r+0xb58>
   19040:	8c7ffc04 	addi	r17,r17,-16
   19044:	42000204 	addi	r8,r8,8
   19048:	e440110e 	bge	fp,r17,19090 <___svfiprintf_internal_r+0xb9c>
   1904c:	18c00404 	addi	r3,r3,16
   19050:	10800044 	addi	r2,r2,1
   19054:	45800015 	stw	r22,0(r8)
   19058:	47000115 	stw	fp,4(r8)
   1905c:	d8c01c15 	stw	r3,112(sp)
   19060:	d8801b15 	stw	r2,108(sp)
   19064:	a8bff60e 	bge	r21,r2,19040 <__alt_data_end+0xfc019040>
   19068:	d9801a04 	addi	r6,sp,104
   1906c:	900b883a 	mov	r5,r18
   19070:	8009883a 	mov	r4,r16
   19074:	00183240 	call	18324 <__ssprint_r>
   19078:	10005e1e 	bne	r2,zero,191f4 <___svfiprintf_internal_r+0xd00>
   1907c:	8c7ffc04 	addi	r17,r17,-16
   19080:	d8c01c17 	ldw	r3,112(sp)
   19084:	d8801b17 	ldw	r2,108(sp)
   19088:	d811883a 	mov	r8,sp
   1908c:	e47fef16 	blt	fp,r17,1904c <__alt_data_end+0xfc01904c>
   19090:	9825883a 	mov	r18,r19
   19094:	dc002017 	ldw	r16,128(sp)
   19098:	b827883a 	mov	r19,r23
   1909c:	882f883a 	mov	r23,r17
   190a0:	dc402217 	ldw	r17,136(sp)
   190a4:	d9402117 	ldw	r5,132(sp)
   190a8:	1dc7883a 	add	r3,r3,r23
   190ac:	10800044 	addi	r2,r2,1
   190b0:	41400015 	stw	r5,0(r8)
   190b4:	45c00115 	stw	r23,4(r8)
   190b8:	d8c01c15 	stw	r3,112(sp)
   190bc:	d8801b15 	stw	r2,108(sp)
   190c0:	010001c4 	movi	r4,7
   190c4:	2080a616 	blt	r4,r2,19360 <___svfiprintf_internal_r+0xe6c>
   190c8:	42000204 	addi	r8,r8,8
   190cc:	a0c7883a 	add	r3,r20,r3
   190d0:	10800044 	addi	r2,r2,1
   190d4:	44400015 	stw	r17,0(r8)
   190d8:	45000115 	stw	r20,4(r8)
   190dc:	d8c01c15 	stw	r3,112(sp)
   190e0:	d8801b15 	stw	r2,108(sp)
   190e4:	010001c4 	movi	r4,7
   190e8:	20808816 	blt	r4,r2,1930c <___svfiprintf_internal_r+0xe18>
   190ec:	42000204 	addi	r8,r8,8
   190f0:	8400010c 	andi	r16,r16,4
   190f4:	80002c26 	beq	r16,zero,191a8 <___svfiprintf_internal_r+0xcb4>
   190f8:	d8802517 	ldw	r2,148(sp)
   190fc:	14a1c83a 	sub	r16,r2,r18
   19100:	0400290e 	bge	zero,r16,191a8 <___svfiprintf_internal_r+0xcb4>
   19104:	04400404 	movi	r17,16
   19108:	d8801b17 	ldw	r2,108(sp)
   1910c:	8c01a70e 	bge	r17,r16,197ac <___svfiprintf_internal_r+0x12b8>
   19110:	014000f4 	movhi	r5,3
   19114:	296a7704 	addi	r5,r5,-22052
   19118:	d9402815 	stw	r5,160(sp)
   1911c:	050001c4 	movi	r20,7
   19120:	dd402717 	ldw	r21,156(sp)
   19124:	ddc02317 	ldw	r23,140(sp)
   19128:	00000306 	br	19138 <___svfiprintf_internal_r+0xc44>
   1912c:	843ffc04 	addi	r16,r16,-16
   19130:	42000204 	addi	r8,r8,8
   19134:	8c00130e 	bge	r17,r16,19184 <___svfiprintf_internal_r+0xc90>
   19138:	010000f4 	movhi	r4,3
   1913c:	18c00404 	addi	r3,r3,16
   19140:	10800044 	addi	r2,r2,1
   19144:	212a7704 	addi	r4,r4,-22052
   19148:	41000015 	stw	r4,0(r8)
   1914c:	44400115 	stw	r17,4(r8)
   19150:	d8c01c15 	stw	r3,112(sp)
   19154:	d8801b15 	stw	r2,108(sp)
   19158:	a0bff40e 	bge	r20,r2,1912c <__alt_data_end+0xfc01912c>
   1915c:	d9801a04 	addi	r6,sp,104
   19160:	b80b883a 	mov	r5,r23
   19164:	a809883a 	mov	r4,r21
   19168:	00183240 	call	18324 <__ssprint_r>
   1916c:	1000211e 	bne	r2,zero,191f4 <___svfiprintf_internal_r+0xd00>
   19170:	843ffc04 	addi	r16,r16,-16
   19174:	d8c01c17 	ldw	r3,112(sp)
   19178:	d8801b17 	ldw	r2,108(sp)
   1917c:	d811883a 	mov	r8,sp
   19180:	8c3fed16 	blt	r17,r16,19138 <__alt_data_end+0xfc019138>
   19184:	d9402817 	ldw	r5,160(sp)
   19188:	1c07883a 	add	r3,r3,r16
   1918c:	10800044 	addi	r2,r2,1
   19190:	41400015 	stw	r5,0(r8)
   19194:	44000115 	stw	r16,4(r8)
   19198:	d8c01c15 	stw	r3,112(sp)
   1919c:	d8801b15 	stw	r2,108(sp)
   191a0:	010001c4 	movi	r4,7
   191a4:	2080b516 	blt	r4,r2,1947c <___svfiprintf_internal_r+0xf88>
   191a8:	d8802517 	ldw	r2,148(sp)
   191ac:	1480010e 	bge	r2,r18,191b4 <___svfiprintf_internal_r+0xcc0>
   191b0:	9005883a 	mov	r2,r18
   191b4:	d9002617 	ldw	r4,152(sp)
   191b8:	2089883a 	add	r4,r4,r2
   191bc:	d9002615 	stw	r4,152(sp)
   191c0:	18005a1e 	bne	r3,zero,1932c <___svfiprintf_internal_r+0xe38>
   191c4:	98800007 	ldb	r2,0(r19)
   191c8:	d8001b15 	stw	zero,108(sp)
   191cc:	d811883a 	mov	r8,sp
   191d0:	103cec1e 	bne	r2,zero,18584 <__alt_data_end+0xfc018584>
   191d4:	9825883a 	mov	r18,r19
   191d8:	003d0206 	br	185e4 <__alt_data_end+0xfc0185e4>
   191dc:	d8801c17 	ldw	r2,112(sp)
   191e0:	10000426 	beq	r2,zero,191f4 <___svfiprintf_internal_r+0xd00>
   191e4:	d9402317 	ldw	r5,140(sp)
   191e8:	d9002717 	ldw	r4,156(sp)
   191ec:	d9801a04 	addi	r6,sp,104
   191f0:	00183240 	call	18324 <__ssprint_r>
   191f4:	d9402317 	ldw	r5,140(sp)
   191f8:	d8802617 	ldw	r2,152(sp)
   191fc:	28c0030b 	ldhu	r3,12(r5)
   19200:	18c0100c 	andi	r3,r3,64
   19204:	18015c1e 	bne	r3,zero,19778 <___svfiprintf_internal_r+0x1284>
   19208:	dfc03717 	ldw	ra,220(sp)
   1920c:	df003617 	ldw	fp,216(sp)
   19210:	ddc03517 	ldw	r23,212(sp)
   19214:	dd803417 	ldw	r22,208(sp)
   19218:	dd403317 	ldw	r21,204(sp)
   1921c:	dd003217 	ldw	r20,200(sp)
   19220:	dcc03117 	ldw	r19,196(sp)
   19224:	dc803017 	ldw	r18,192(sp)
   19228:	dc402f17 	ldw	r17,188(sp)
   1922c:	dc002e17 	ldw	r16,184(sp)
   19230:	dec03804 	addi	sp,sp,224
   19234:	f800283a 	ret
   19238:	d9002517 	ldw	r4,148(sp)
   1923c:	24afc83a 	sub	r23,r4,r18
   19240:	05ff6e0e 	bge	zero,r23,18ffc <__alt_data_end+0xfc018ffc>
   19244:	07000404 	movi	fp,16
   19248:	e5c15c0e 	bge	fp,r23,197bc <___svfiprintf_internal_r+0x12c8>
   1924c:	010000f4 	movhi	r4,3
   19250:	212a7304 	addi	r4,r4,-22068
   19254:	dc002215 	stw	r16,136(sp)
   19258:	dc402815 	stw	r17,160(sp)
   1925c:	d9002115 	stw	r4,132(sp)
   19260:	b823883a 	mov	r17,r23
   19264:	054001c4 	movi	r21,7
   19268:	982f883a 	mov	r23,r19
   1926c:	dc002717 	ldw	r16,156(sp)
   19270:	9027883a 	mov	r19,r18
   19274:	dc802317 	ldw	r18,140(sp)
   19278:	00000306 	br	19288 <___svfiprintf_internal_r+0xd94>
   1927c:	8c7ffc04 	addi	r17,r17,-16
   19280:	42000204 	addi	r8,r8,8
   19284:	e440110e 	bge	fp,r17,192cc <___svfiprintf_internal_r+0xdd8>
   19288:	18c00404 	addi	r3,r3,16
   1928c:	10800044 	addi	r2,r2,1
   19290:	45800015 	stw	r22,0(r8)
   19294:	47000115 	stw	fp,4(r8)
   19298:	d8c01c15 	stw	r3,112(sp)
   1929c:	d8801b15 	stw	r2,108(sp)
   192a0:	a8bff60e 	bge	r21,r2,1927c <__alt_data_end+0xfc01927c>
   192a4:	d9801a04 	addi	r6,sp,104
   192a8:	900b883a 	mov	r5,r18
   192ac:	8009883a 	mov	r4,r16
   192b0:	00183240 	call	18324 <__ssprint_r>
   192b4:	103fcf1e 	bne	r2,zero,191f4 <__alt_data_end+0xfc0191f4>
   192b8:	8c7ffc04 	addi	r17,r17,-16
   192bc:	d8c01c17 	ldw	r3,112(sp)
   192c0:	d8801b17 	ldw	r2,108(sp)
   192c4:	d811883a 	mov	r8,sp
   192c8:	e47fef16 	blt	fp,r17,19288 <__alt_data_end+0xfc019288>
   192cc:	9825883a 	mov	r18,r19
   192d0:	dc002217 	ldw	r16,136(sp)
   192d4:	b827883a 	mov	r19,r23
   192d8:	882f883a 	mov	r23,r17
   192dc:	dc402817 	ldw	r17,160(sp)
   192e0:	d9402117 	ldw	r5,132(sp)
   192e4:	1dc7883a 	add	r3,r3,r23
   192e8:	10800044 	addi	r2,r2,1
   192ec:	41400015 	stw	r5,0(r8)
   192f0:	45c00115 	stw	r23,4(r8)
   192f4:	d8c01c15 	stw	r3,112(sp)
   192f8:	d8801b15 	stw	r2,108(sp)
   192fc:	010001c4 	movi	r4,7
   19300:	2080b716 	blt	r4,r2,195e0 <___svfiprintf_internal_r+0x10ec>
   19304:	42000204 	addi	r8,r8,8
   19308:	003f3c06 	br	18ffc <__alt_data_end+0xfc018ffc>
   1930c:	d9402317 	ldw	r5,140(sp)
   19310:	d9002717 	ldw	r4,156(sp)
   19314:	d9801a04 	addi	r6,sp,104
   19318:	00183240 	call	18324 <__ssprint_r>
   1931c:	103fb51e 	bne	r2,zero,191f4 <__alt_data_end+0xfc0191f4>
   19320:	d8c01c17 	ldw	r3,112(sp)
   19324:	d811883a 	mov	r8,sp
   19328:	003f7106 	br	190f0 <__alt_data_end+0xfc0190f0>
   1932c:	d9402317 	ldw	r5,140(sp)
   19330:	d9002717 	ldw	r4,156(sp)
   19334:	d9801a04 	addi	r6,sp,104
   19338:	00183240 	call	18324 <__ssprint_r>
   1933c:	103fa126 	beq	r2,zero,191c4 <__alt_data_end+0xfc0191c4>
   19340:	003fac06 	br	191f4 <__alt_data_end+0xfc0191f4>
   19344:	d9402317 	ldw	r5,140(sp)
   19348:	d9002717 	ldw	r4,156(sp)
   1934c:	d9801a04 	addi	r6,sp,104
   19350:	00183240 	call	18324 <__ssprint_r>
   19354:	103fa71e 	bne	r2,zero,191f4 <__alt_data_end+0xfc0191f4>
   19358:	d811883a 	mov	r8,sp
   1935c:	003c9e06 	br	185d8 <__alt_data_end+0xfc0185d8>
   19360:	d9402317 	ldw	r5,140(sp)
   19364:	d9002717 	ldw	r4,156(sp)
   19368:	d9801a04 	addi	r6,sp,104
   1936c:	00183240 	call	18324 <__ssprint_r>
   19370:	103fa01e 	bne	r2,zero,191f4 <__alt_data_end+0xfc0191f4>
   19374:	d8c01c17 	ldw	r3,112(sp)
   19378:	d8801b17 	ldw	r2,108(sp)
   1937c:	d811883a 	mov	r8,sp
   19380:	003f5206 	br	190cc <__alt_data_end+0xfc0190cc>
   19384:	d9402317 	ldw	r5,140(sp)
   19388:	d9002717 	ldw	r4,156(sp)
   1938c:	d9801a04 	addi	r6,sp,104
   19390:	00183240 	call	18324 <__ssprint_r>
   19394:	103f971e 	bne	r2,zero,191f4 <__alt_data_end+0xfc0191f4>
   19398:	d8c01c17 	ldw	r3,112(sp)
   1939c:	d8801b17 	ldw	r2,108(sp)
   193a0:	d811883a 	mov	r8,sp
   193a4:	003f0506 	br	18fbc <__alt_data_end+0xfc018fbc>
   193a8:	d9402317 	ldw	r5,140(sp)
   193ac:	d9002717 	ldw	r4,156(sp)
   193b0:	d9801a04 	addi	r6,sp,104
   193b4:	00183240 	call	18324 <__ssprint_r>
   193b8:	103f8e1e 	bne	r2,zero,191f4 <__alt_data_end+0xfc0191f4>
   193bc:	d8c01c17 	ldw	r3,112(sp)
   193c0:	d8801b17 	ldw	r2,108(sp)
   193c4:	d811883a 	mov	r8,sp
   193c8:	003f0906 	br	18ff0 <__alt_data_end+0xfc018ff0>
   193cc:	d9402017 	ldw	r5,128(sp)
   193d0:	d8001d85 	stb	zero,118(sp)
   193d4:	28007716 	blt	r5,zero,195b4 <___svfiprintf_internal_r+0x10c0>
   193d8:	00ffdfc4 	movi	r3,-129
   193dc:	9504b03a 	or	r2,r18,r20
   193e0:	80e0703a 	and	r16,r16,r3
   193e4:	103d3926 	beq	r2,zero,188cc <__alt_data_end+0xfc0188cc>
   193e8:	002b883a 	mov	r21,zero
   193ec:	003d3c06 	br	188e0 <__alt_data_end+0xfc0188e0>
   193f0:	d9402317 	ldw	r5,140(sp)
   193f4:	d9002717 	ldw	r4,156(sp)
   193f8:	d9801a04 	addi	r6,sp,104
   193fc:	00183240 	call	18324 <__ssprint_r>
   19400:	103f7c1e 	bne	r2,zero,191f4 <__alt_data_end+0xfc0191f4>
   19404:	d8c01c17 	ldw	r3,112(sp)
   19408:	d8801b17 	ldw	r2,108(sp)
   1940c:	d811883a 	mov	r8,sp
   19410:	003edd06 	br	18f88 <__alt_data_end+0xfc018f88>
   19414:	8080100c 	andi	r2,r16,64
   19418:	d8001d85 	stb	zero,118(sp)
   1941c:	10008426 	beq	r2,zero,19630 <___svfiprintf_internal_r+0x113c>
   19420:	d9402417 	ldw	r5,144(sp)
   19424:	d8c02017 	ldw	r3,128(sp)
   19428:	0029883a 	mov	r20,zero
   1942c:	28800104 	addi	r2,r5,4
   19430:	2c80000b 	ldhu	r18,0(r5)
   19434:	183eab0e 	bge	r3,zero,18ee4 <__alt_data_end+0xfc018ee4>
   19438:	d8802415 	stw	r2,144(sp)
   1943c:	002b883a 	mov	r21,zero
   19440:	9504b03a 	or	r2,r18,r20
   19444:	103e171e 	bne	r2,zero,18ca4 <__alt_data_end+0xfc018ca4>
   19448:	00800044 	movi	r2,1
   1944c:	10803fcc 	andi	r2,r2,255
   19450:	00c00044 	movi	r3,1
   19454:	10c05c26 	beq	r2,r3,195c8 <___svfiprintf_internal_r+0x10d4>
   19458:	00c00084 	movi	r3,2
   1945c:	10fd1e26 	beq	r2,r3,188d8 <__alt_data_end+0xfc0188d8>
   19460:	003ec406 	br	18f74 <__alt_data_end+0xfc018f74>
   19464:	d9401e17 	ldw	r5,120(sp)
   19468:	2c69c83a 	sub	r20,r5,r17
   1946c:	003d4506 	br	18984 <__alt_data_end+0xfc018984>
   19470:	d8802415 	stw	r2,144(sp)
   19474:	98c00007 	ldb	r3,0(r19)
   19478:	003c6a06 	br	18624 <__alt_data_end+0xfc018624>
   1947c:	d9402317 	ldw	r5,140(sp)
   19480:	d9002717 	ldw	r4,156(sp)
   19484:	d9801a04 	addi	r6,sp,104
   19488:	00183240 	call	18324 <__ssprint_r>
   1948c:	103f591e 	bne	r2,zero,191f4 <__alt_data_end+0xfc0191f4>
   19490:	d8c01c17 	ldw	r3,112(sp)
   19494:	003f4406 	br	191a8 <__alt_data_end+0xfc0191a8>
   19498:	014000f4 	movhi	r5,3
   1949c:	296a0b04 	addi	r5,r5,-22484
   194a0:	d9402915 	stw	r5,164(sp)
   194a4:	003d0906 	br	188cc <__alt_data_end+0xfc0188cc>
   194a8:	d8c02417 	ldw	r3,144(sp)
   194ac:	d9002617 	ldw	r4,152(sp)
   194b0:	d9402417 	ldw	r5,144(sp)
   194b4:	18800017 	ldw	r2,0(r3)
   194b8:	2007d7fa 	srai	r3,r4,31
   194bc:	29400104 	addi	r5,r5,4
   194c0:	d9402415 	stw	r5,144(sp)
   194c4:	11000015 	stw	r4,0(r2)
   194c8:	10c00115 	stw	r3,4(r2)
   194cc:	003c2b06 	br	1857c <__alt_data_end+0xfc01857c>
   194d0:	d8c01d45 	stb	r3,117(sp)
   194d4:	d8c02017 	ldw	r3,128(sp)
   194d8:	00800c04 	movi	r2,48
   194dc:	d8801d05 	stb	r2,116(sp)
   194e0:	d8001d85 	stb	zero,118(sp)
   194e4:	80800094 	ori	r2,r16,2
   194e8:	1800ac16 	blt	r3,zero,1979c <___svfiprintf_internal_r+0x12a8>
   194ec:	00bfdfc4 	movi	r2,-129
   194f0:	80a0703a 	and	r16,r16,r2
   194f4:	84000094 	ori	r16,r16,2
   194f8:	002b883a 	mov	r21,zero
   194fc:	003cf806 	br	188e0 <__alt_data_end+0xfc0188e0>
   19500:	98c00007 	ldb	r3,0(r19)
   19504:	003c4706 	br	18624 <__alt_data_end+0xfc018624>
   19508:	d9402417 	ldw	r5,144(sp)
   1950c:	2c800017 	ldw	r18,0(r5)
   19510:	29400104 	addi	r5,r5,4
   19514:	d9402415 	stw	r5,144(sp)
   19518:	9029d7fa 	srai	r20,r18,31
   1951c:	a005883a 	mov	r2,r20
   19520:	003dd806 	br	18c84 <__alt_data_end+0xfc018c84>
   19524:	d9402417 	ldw	r5,144(sp)
   19528:	0029883a 	mov	r20,zero
   1952c:	2c800017 	ldw	r18,0(r5)
   19530:	29400104 	addi	r5,r5,4
   19534:	d9402415 	stw	r5,144(sp)
   19538:	003cdb06 	br	188a8 <__alt_data_end+0xfc0188a8>
   1953c:	8080100c 	andi	r2,r16,64
   19540:	d8001d85 	stb	zero,118(sp)
   19544:	10003326 	beq	r2,zero,19614 <___svfiprintf_internal_r+0x1120>
   19548:	d9002417 	ldw	r4,144(sp)
   1954c:	d9402017 	ldw	r5,128(sp)
   19550:	0029883a 	mov	r20,zero
   19554:	20800104 	addi	r2,r4,4
   19558:	2480000b 	ldhu	r18,0(r4)
   1955c:	283e7e0e 	bge	r5,zero,18f58 <__alt_data_end+0xfc018f58>
   19560:	9506b03a 	or	r3,r18,r20
   19564:	d8802415 	stw	r2,144(sp)
   19568:	183d271e 	bne	r3,zero,18a08 <__alt_data_end+0xfc018a08>
   1956c:	002b883a 	mov	r21,zero
   19570:	0005883a 	mov	r2,zero
   19574:	003fb506 	br	1944c <__alt_data_end+0xfc01944c>
   19578:	98c00043 	ldbu	r3,1(r19)
   1957c:	8c400814 	ori	r17,r17,32
   19580:	9cc00044 	addi	r19,r19,1
   19584:	18c03fcc 	andi	r3,r3,255
   19588:	18c0201c 	xori	r3,r3,128
   1958c:	18ffe004 	addi	r3,r3,-128
   19590:	003c2406 	br	18624 <__alt_data_end+0xfc018624>
   19594:	d8c02415 	stw	r3,144(sp)
   19598:	002b883a 	mov	r21,zero
   1959c:	003fa806 	br	19440 <__alt_data_end+0xfc019440>
   195a0:	010000f4 	movhi	r4,3
   195a4:	212a0b04 	addi	r4,r4,-22484
   195a8:	d9002915 	stw	r4,164(sp)
   195ac:	d8c02415 	stw	r3,144(sp)
   195b0:	1021883a 	mov	r16,r2
   195b4:	9504b03a 	or	r2,r18,r20
   195b8:	103f8b1e 	bne	r2,zero,193e8 <__alt_data_end+0xfc0193e8>
   195bc:	002b883a 	mov	r21,zero
   195c0:	00800084 	movi	r2,2
   195c4:	003fa106 	br	1944c <__alt_data_end+0xfc01944c>
   195c8:	0025883a 	mov	r18,zero
   195cc:	94800c04 	addi	r18,r18,48
   195d0:	dc8019c5 	stb	r18,103(sp)
   195d4:	dd002c17 	ldw	r20,176(sp)
   195d8:	dc4019c4 	addi	r17,sp,103
   195dc:	003ce906 	br	18984 <__alt_data_end+0xfc018984>
   195e0:	d9402317 	ldw	r5,140(sp)
   195e4:	d9002717 	ldw	r4,156(sp)
   195e8:	d9801a04 	addi	r6,sp,104
   195ec:	00183240 	call	18324 <__ssprint_r>
   195f0:	103f001e 	bne	r2,zero,191f4 <__alt_data_end+0xfc0191f4>
   195f4:	d8c01c17 	ldw	r3,112(sp)
   195f8:	d8801b17 	ldw	r2,108(sp)
   195fc:	d811883a 	mov	r8,sp
   19600:	003e7e06 	br	18ffc <__alt_data_end+0xfc018ffc>
   19604:	014000f4 	movhi	r5,3
   19608:	296a7304 	addi	r5,r5,-22068
   1960c:	d9402115 	stw	r5,132(sp)
   19610:	003ea406 	br	190a4 <__alt_data_end+0xfc0190a4>
   19614:	d8c02417 	ldw	r3,144(sp)
   19618:	d9002017 	ldw	r4,128(sp)
   1961c:	0029883a 	mov	r20,zero
   19620:	18800104 	addi	r2,r3,4
   19624:	1c800017 	ldw	r18,0(r3)
   19628:	203e4b0e 	bge	r4,zero,18f58 <__alt_data_end+0xfc018f58>
   1962c:	003fcc06 	br	19560 <__alt_data_end+0xfc019560>
   19630:	d9002417 	ldw	r4,144(sp)
   19634:	d9402017 	ldw	r5,128(sp)
   19638:	0029883a 	mov	r20,zero
   1963c:	20800104 	addi	r2,r4,4
   19640:	24800017 	ldw	r18,0(r4)
   19644:	283e270e 	bge	r5,zero,18ee4 <__alt_data_end+0xfc018ee4>
   19648:	003f7b06 	br	19438 <__alt_data_end+0xfc019438>
   1964c:	8400100c 	andi	r16,r16,64
   19650:	80003326 	beq	r16,zero,19720 <___svfiprintf_internal_r+0x122c>
   19654:	d9402417 	ldw	r5,144(sp)
   19658:	d8c02617 	ldw	r3,152(sp)
   1965c:	28800017 	ldw	r2,0(r5)
   19660:	29400104 	addi	r5,r5,4
   19664:	d9402415 	stw	r5,144(sp)
   19668:	10c0000d 	sth	r3,0(r2)
   1966c:	003bc306 	br	1857c <__alt_data_end+0xfc01857c>
   19670:	d9002417 	ldw	r4,144(sp)
   19674:	0029883a 	mov	r20,zero
   19678:	24800017 	ldw	r18,0(r4)
   1967c:	21000104 	addi	r4,r4,4
   19680:	d9002415 	stw	r4,144(sp)
   19684:	003c8806 	br	188a8 <__alt_data_end+0xfc0188a8>
   19688:	d8c02417 	ldw	r3,144(sp)
   1968c:	1c800017 	ldw	r18,0(r3)
   19690:	18c00104 	addi	r3,r3,4
   19694:	d8c02415 	stw	r3,144(sp)
   19698:	9029d7fa 	srai	r20,r18,31
   1969c:	a005883a 	mov	r2,r20
   196a0:	003d7806 	br	18c84 <__alt_data_end+0xfc018c84>
   196a4:	8809883a 	mov	r4,r17
   196a8:	da002d15 	stw	r8,180(sp)
   196ac:	000f3280 	call	f328 <strlen>
   196b0:	1029883a 	mov	r20,r2
   196b4:	dd401d83 	ldbu	r21,118(sp)
   196b8:	ddc02415 	stw	r23,144(sp)
   196bc:	d8002015 	stw	zero,128(sp)
   196c0:	da002d17 	ldw	r8,180(sp)
   196c4:	003caf06 	br	18984 <__alt_data_end+0xfc018984>
   196c8:	013fffc4 	movi	r4,-1
   196cc:	003df206 	br	18e98 <__alt_data_end+0xfc018e98>
   196d0:	dd002017 	ldw	r20,128(sp)
   196d4:	00800184 	movi	r2,6
   196d8:	1500012e 	bgeu	r2,r20,196e0 <___svfiprintf_internal_r+0x11ec>
   196dc:	1029883a 	mov	r20,r2
   196e0:	a025883a 	mov	r18,r20
   196e4:	a0004116 	blt	r20,zero,197ec <___svfiprintf_internal_r+0x12f8>
   196e8:	044000f4 	movhi	r17,3
   196ec:	ddc02415 	stw	r23,144(sp)
   196f0:	8c6a1004 	addi	r17,r17,-22464
   196f4:	003ce806 	br	18a98 <__alt_data_end+0xfc018a98>
   196f8:	04001004 	movi	r16,64
   196fc:	800b883a 	mov	r5,r16
   19700:	000e2540 	call	e254 <_malloc_r>
   19704:	d8c02317 	ldw	r3,140(sp)
   19708:	18800015 	stw	r2,0(r3)
   1970c:	18800415 	stw	r2,16(r3)
   19710:	10004d26 	beq	r2,zero,19848 <___svfiprintf_internal_r+0x1354>
   19714:	d9402317 	ldw	r5,140(sp)
   19718:	2c000515 	stw	r16,20(r5)
   1971c:	003b8906 	br	18544 <__alt_data_end+0xfc018544>
   19720:	d9002417 	ldw	r4,144(sp)
   19724:	d9402617 	ldw	r5,152(sp)
   19728:	20800017 	ldw	r2,0(r4)
   1972c:	21000104 	addi	r4,r4,4
   19730:	d9002415 	stw	r4,144(sp)
   19734:	11400015 	stw	r5,0(r2)
   19738:	003b9006 	br	1857c <__alt_data_end+0xfc01857c>
   1973c:	8080004c 	andi	r2,r16,1
   19740:	002b883a 	mov	r21,zero
   19744:	10000526 	beq	r2,zero,1975c <___svfiprintf_internal_r+0x1268>
   19748:	00800c04 	movi	r2,48
   1974c:	d88019c5 	stb	r2,103(sp)
   19750:	dd002c17 	ldw	r20,176(sp)
   19754:	dc4019c4 	addi	r17,sp,103
   19758:	003c8a06 	br	18984 <__alt_data_end+0xfc018984>
   1975c:	0029883a 	mov	r20,zero
   19760:	dc401a04 	addi	r17,sp,104
   19764:	003c8706 	br	18984 <__alt_data_end+0xfc018984>
   19768:	014000f4 	movhi	r5,3
   1976c:	296a7704 	addi	r5,r5,-22052
   19770:	d9402815 	stw	r5,160(sp)
   19774:	003cff06 	br	18b74 <__alt_data_end+0xfc018b74>
   19778:	00bfffc4 	movi	r2,-1
   1977c:	003ea206 	br	19208 <__alt_data_end+0xfc019208>
   19780:	00800044 	movi	r2,1
   19784:	10803fcc 	andi	r2,r2,255
   19788:	00c00044 	movi	r3,1
   1978c:	10fd4526 	beq	r2,r3,18ca4 <__alt_data_end+0xfc018ca4>
   19790:	00c00084 	movi	r3,2
   19794:	10fc5226 	beq	r2,r3,188e0 <__alt_data_end+0xfc0188e0>
   19798:	003c9c06 	br	18a0c <__alt_data_end+0xfc018a0c>
   1979c:	1021883a 	mov	r16,r2
   197a0:	002b883a 	mov	r21,zero
   197a4:	00800084 	movi	r2,2
   197a8:	003ff606 	br	19784 <__alt_data_end+0xfc019784>
   197ac:	010000f4 	movhi	r4,3
   197b0:	212a7704 	addi	r4,r4,-22052
   197b4:	d9002815 	stw	r4,160(sp)
   197b8:	003e7206 	br	19184 <__alt_data_end+0xfc019184>
   197bc:	014000f4 	movhi	r5,3
   197c0:	296a7304 	addi	r5,r5,-22068
   197c4:	d9402115 	stw	r5,132(sp)
   197c8:	003ec506 	br	192e0 <__alt_data_end+0xfc0192e0>
   197cc:	e027883a 	mov	r19,fp
   197d0:	d8002015 	stw	zero,128(sp)
   197d4:	003b9406 	br	18628 <__alt_data_end+0xfc018628>
   197d8:	dd002017 	ldw	r20,128(sp)
   197dc:	dd401d83 	ldbu	r21,118(sp)
   197e0:	ddc02415 	stw	r23,144(sp)
   197e4:	d8002015 	stw	zero,128(sp)
   197e8:	003c6606 	br	18984 <__alt_data_end+0xfc018984>
   197ec:	0025883a 	mov	r18,zero
   197f0:	003fbd06 	br	196e8 <__alt_data_end+0xfc0196e8>
   197f4:	d9402417 	ldw	r5,144(sp)
   197f8:	d8c02417 	ldw	r3,144(sp)
   197fc:	29400017 	ldw	r5,0(r5)
   19800:	19000104 	addi	r4,r3,4
   19804:	d9002415 	stw	r4,144(sp)
   19808:	d9402015 	stw	r5,128(sp)
   1980c:	98c00043 	ldbu	r3,1(r19)
   19810:	e027883a 	mov	r19,fp
   19814:	283f5b0e 	bge	r5,zero,19584 <__alt_data_end+0xfc019584>
   19818:	18c03fcc 	andi	r3,r3,255
   1981c:	013fffc4 	movi	r4,-1
   19820:	18c0201c 	xori	r3,r3,128
   19824:	d9002015 	stw	r4,128(sp)
   19828:	18ffe004 	addi	r3,r3,-128
   1982c:	003b7d06 	br	18624 <__alt_data_end+0xfc018624>
   19830:	dd401d85 	stb	r21,118(sp)
   19834:	003cf306 	br	18c04 <__alt_data_end+0xfc018c04>
   19838:	dd401d85 	stb	r21,118(sp)
   1983c:	003d4e06 	br	18d78 <__alt_data_end+0xfc018d78>
   19840:	dd401d85 	stb	r21,118(sp)
   19844:	003c0e06 	br	18880 <__alt_data_end+0xfc018880>
   19848:	d9002717 	ldw	r4,156(sp)
   1984c:	00800304 	movi	r2,12
   19850:	20800015 	stw	r2,0(r4)
   19854:	00bfffc4 	movi	r2,-1
   19858:	003e6b06 	br	19208 <__alt_data_end+0xfc019208>
   1985c:	dd401d85 	stb	r21,118(sp)
   19860:	003d0006 	br	18c64 <__alt_data_end+0xfc018c64>
   19864:	dd401d85 	stb	r21,118(sp)
   19868:	003d7106 	br	18e30 <__alt_data_end+0xfc018e30>
   1986c:	dd401d85 	stb	r21,118(sp)
   19870:	003c5706 	br	189d0 <__alt_data_end+0xfc0189d0>
   19874:	dd401d85 	stb	r21,118(sp)
   19878:	003c2e06 	br	18934 <__alt_data_end+0xfc018934>
   1987c:	dd401d85 	stb	r21,118(sp)
   19880:	003d8c06 	br	18eb4 <__alt_data_end+0xfc018eb4>
   19884:	dd401d85 	stb	r21,118(sp)
   19888:	003da706 	br	18f28 <__alt_data_end+0xfc018f28>
   1988c:	dd401d85 	stb	r21,118(sp)
   19890:	003cc806 	br	18bb4 <__alt_data_end+0xfc018bb4>

00019894 <__sprint_r.part.0>:
   19894:	28801917 	ldw	r2,100(r5)
   19898:	defff604 	addi	sp,sp,-40
   1989c:	dd400515 	stw	r21,20(sp)
   198a0:	dfc00915 	stw	ra,36(sp)
   198a4:	df000815 	stw	fp,32(sp)
   198a8:	ddc00715 	stw	r23,28(sp)
   198ac:	dd800615 	stw	r22,24(sp)
   198b0:	dd000415 	stw	r20,16(sp)
   198b4:	dcc00315 	stw	r19,12(sp)
   198b8:	dc800215 	stw	r18,8(sp)
   198bc:	dc400115 	stw	r17,4(sp)
   198c0:	dc000015 	stw	r16,0(sp)
   198c4:	1088000c 	andi	r2,r2,8192
   198c8:	302b883a 	mov	r21,r6
   198cc:	10002e26 	beq	r2,zero,19988 <__sprint_r.part.0+0xf4>
   198d0:	30800217 	ldw	r2,8(r6)
   198d4:	35800017 	ldw	r22,0(r6)
   198d8:	10002926 	beq	r2,zero,19980 <__sprint_r.part.0+0xec>
   198dc:	2827883a 	mov	r19,r5
   198e0:	2029883a 	mov	r20,r4
   198e4:	b5c00104 	addi	r23,r22,4
   198e8:	04bfffc4 	movi	r18,-1
   198ec:	bc400017 	ldw	r17,0(r23)
   198f0:	b4000017 	ldw	r16,0(r22)
   198f4:	0039883a 	mov	fp,zero
   198f8:	8822d0ba 	srli	r17,r17,2
   198fc:	8800031e 	bne	r17,zero,1990c <__sprint_r.part.0+0x78>
   19900:	00001806 	br	19964 <__sprint_r.part.0+0xd0>
   19904:	84000104 	addi	r16,r16,4
   19908:	8f001526 	beq	r17,fp,19960 <__sprint_r.part.0+0xcc>
   1990c:	81400017 	ldw	r5,0(r16)
   19910:	980d883a 	mov	r6,r19
   19914:	a009883a 	mov	r4,r20
   19918:	001b4dc0 	call	1b4dc <_fputwc_r>
   1991c:	e7000044 	addi	fp,fp,1
   19920:	14bff81e 	bne	r2,r18,19904 <__alt_data_end+0xfc019904>
   19924:	9005883a 	mov	r2,r18
   19928:	a8000215 	stw	zero,8(r21)
   1992c:	a8000115 	stw	zero,4(r21)
   19930:	dfc00917 	ldw	ra,36(sp)
   19934:	df000817 	ldw	fp,32(sp)
   19938:	ddc00717 	ldw	r23,28(sp)
   1993c:	dd800617 	ldw	r22,24(sp)
   19940:	dd400517 	ldw	r21,20(sp)
   19944:	dd000417 	ldw	r20,16(sp)
   19948:	dcc00317 	ldw	r19,12(sp)
   1994c:	dc800217 	ldw	r18,8(sp)
   19950:	dc400117 	ldw	r17,4(sp)
   19954:	dc000017 	ldw	r16,0(sp)
   19958:	dec00a04 	addi	sp,sp,40
   1995c:	f800283a 	ret
   19960:	a8800217 	ldw	r2,8(r21)
   19964:	8c63883a 	add	r17,r17,r17
   19968:	8c63883a 	add	r17,r17,r17
   1996c:	1445c83a 	sub	r2,r2,r17
   19970:	a8800215 	stw	r2,8(r21)
   19974:	b5800204 	addi	r22,r22,8
   19978:	bdc00204 	addi	r23,r23,8
   1997c:	103fdb1e 	bne	r2,zero,198ec <__alt_data_end+0xfc0198ec>
   19980:	0005883a 	mov	r2,zero
   19984:	003fe806 	br	19928 <__alt_data_end+0xfc019928>
   19988:	0015ec80 	call	15ec8 <__sfvwrite_r>
   1998c:	003fe606 	br	19928 <__alt_data_end+0xfc019928>

00019990 <__sprint_r>:
   19990:	30c00217 	ldw	r3,8(r6)
   19994:	18000126 	beq	r3,zero,1999c <__sprint_r+0xc>
   19998:	00198941 	jmpi	19894 <__sprint_r.part.0>
   1999c:	30000115 	stw	zero,4(r6)
   199a0:	0005883a 	mov	r2,zero
   199a4:	f800283a 	ret

000199a8 <___vfiprintf_internal_r>:
   199a8:	deffca04 	addi	sp,sp,-216
   199ac:	dd403115 	stw	r21,196(sp)
   199b0:	dfc03515 	stw	ra,212(sp)
   199b4:	df003415 	stw	fp,208(sp)
   199b8:	ddc03315 	stw	r23,204(sp)
   199bc:	dd803215 	stw	r22,200(sp)
   199c0:	dd003015 	stw	r20,192(sp)
   199c4:	dcc02f15 	stw	r19,188(sp)
   199c8:	dc802e15 	stw	r18,184(sp)
   199cc:	dc402d15 	stw	r17,180(sp)
   199d0:	dc002c15 	stw	r16,176(sp)
   199d4:	d9002115 	stw	r4,132(sp)
   199d8:	d9402015 	stw	r5,128(sp)
   199dc:	d9c02215 	stw	r7,136(sp)
   199e0:	302b883a 	mov	r21,r6
   199e4:	20000226 	beq	r4,zero,199f0 <___vfiprintf_internal_r+0x48>
   199e8:	20800e17 	ldw	r2,56(r4)
   199ec:	1000cf26 	beq	r2,zero,19d2c <___vfiprintf_internal_r+0x384>
   199f0:	d8c02017 	ldw	r3,128(sp)
   199f4:	1880030b 	ldhu	r2,12(r3)
   199f8:	10c8000c 	andi	r3,r2,8192
   199fc:	1800071e 	bne	r3,zero,19a1c <___vfiprintf_internal_r+0x74>
   19a00:	d9402017 	ldw	r5,128(sp)
   19a04:	00f7ffc4 	movi	r3,-8193
   19a08:	10880014 	ori	r2,r2,8192
   19a0c:	29001917 	ldw	r4,100(r5)
   19a10:	2880030d 	sth	r2,12(r5)
   19a14:	20c6703a 	and	r3,r4,r3
   19a18:	28c01915 	stw	r3,100(r5)
   19a1c:	10c0020c 	andi	r3,r2,8
   19a20:	1800a526 	beq	r3,zero,19cb8 <___vfiprintf_internal_r+0x310>
   19a24:	d9002017 	ldw	r4,128(sp)
   19a28:	20c00417 	ldw	r3,16(r4)
   19a2c:	1800a226 	beq	r3,zero,19cb8 <___vfiprintf_internal_r+0x310>
   19a30:	1080068c 	andi	r2,r2,26
   19a34:	00c00284 	movi	r3,10
   19a38:	10c0a826 	beq	r2,r3,19cdc <___vfiprintf_internal_r+0x334>
   19a3c:	d9001a04 	addi	r4,sp,104
   19a40:	d94019c4 	addi	r5,sp,103
   19a44:	048000f4 	movhi	r18,3
   19a48:	2145c83a 	sub	r2,r4,r5
   19a4c:	94aa7b04 	addi	r18,r18,-22036
   19a50:	d9001e15 	stw	r4,120(sp)
   19a54:	d9401f15 	stw	r5,124(sp)
   19a58:	dec01a15 	stw	sp,104(sp)
   19a5c:	d8001c15 	stw	zero,112(sp)
   19a60:	d8001b15 	stw	zero,108(sp)
   19a64:	d811883a 	mov	r8,sp
   19a68:	d8002615 	stw	zero,152(sp)
   19a6c:	d8002415 	stw	zero,144(sp)
   19a70:	d8802815 	stw	r2,160(sp)
   19a74:	a82d883a 	mov	r22,r21
   19a78:	b0800007 	ldb	r2,0(r22)
   19a7c:	10040d26 	beq	r2,zero,1aab4 <___vfiprintf_internal_r+0x110c>
   19a80:	00c00944 	movi	r3,37
   19a84:	b029883a 	mov	r20,r22
   19a88:	10c0021e 	bne	r2,r3,19a94 <___vfiprintf_internal_r+0xec>
   19a8c:	00001606 	br	19ae8 <___vfiprintf_internal_r+0x140>
   19a90:	10c00326 	beq	r2,r3,19aa0 <___vfiprintf_internal_r+0xf8>
   19a94:	a5000044 	addi	r20,r20,1
   19a98:	a0800007 	ldb	r2,0(r20)
   19a9c:	103ffc1e 	bne	r2,zero,19a90 <__alt_data_end+0xfc019a90>
   19aa0:	a5a1c83a 	sub	r16,r20,r22
   19aa4:	80001026 	beq	r16,zero,19ae8 <___vfiprintf_internal_r+0x140>
   19aa8:	d8c01c17 	ldw	r3,112(sp)
   19aac:	d8801b17 	ldw	r2,108(sp)
   19ab0:	45800015 	stw	r22,0(r8)
   19ab4:	80c7883a 	add	r3,r16,r3
   19ab8:	10800044 	addi	r2,r2,1
   19abc:	44000115 	stw	r16,4(r8)
   19ac0:	d8c01c15 	stw	r3,112(sp)
   19ac4:	d8801b15 	stw	r2,108(sp)
   19ac8:	010001c4 	movi	r4,7
   19acc:	2080750e 	bge	r4,r2,19ca4 <___vfiprintf_internal_r+0x2fc>
   19ad0:	1803951e 	bne	r3,zero,1a928 <___vfiprintf_internal_r+0xf80>
   19ad4:	d8c02417 	ldw	r3,144(sp)
   19ad8:	d8001b15 	stw	zero,108(sp)
   19adc:	d811883a 	mov	r8,sp
   19ae0:	1c07883a 	add	r3,r3,r16
   19ae4:	d8c02415 	stw	r3,144(sp)
   19ae8:	a0800007 	ldb	r2,0(r20)
   19aec:	1002e026 	beq	r2,zero,1a670 <___vfiprintf_internal_r+0xcc8>
   19af0:	a5800044 	addi	r22,r20,1
   19af4:	a0c00047 	ldb	r3,1(r20)
   19af8:	d8001d85 	stb	zero,118(sp)
   19afc:	0027883a 	mov	r19,zero
   19b00:	d8002305 	stb	zero,140(sp)
   19b04:	043fffc4 	movi	r16,-1
   19b08:	d8002515 	stw	zero,148(sp)
   19b0c:	0023883a 	mov	r17,zero
   19b10:	05001604 	movi	r20,88
   19b14:	05400244 	movi	r21,9
   19b18:	402f883a 	mov	r23,r8
   19b1c:	b5800044 	addi	r22,r22,1
   19b20:	18bff804 	addi	r2,r3,-32
   19b24:	a0827736 	bltu	r20,r2,1a504 <___vfiprintf_internal_r+0xb5c>
   19b28:	100490ba 	slli	r2,r2,2
   19b2c:	010000b4 	movhi	r4,2
   19b30:	2126d004 	addi	r4,r4,-25792
   19b34:	1105883a 	add	r2,r2,r4
   19b38:	10800017 	ldw	r2,0(r2)
   19b3c:	1000683a 	jmp	r2
   19b40:	0001a204 	movi	zero,1672
   19b44:	0001a504 	movi	zero,1684
   19b48:	0001a504 	movi	zero,1684
   19b4c:	0001a220 	cmpeqi	zero,zero,1672
   19b50:	0001a504 	movi	zero,1684
   19b54:	0001a504 	movi	zero,1684
   19b58:	0001a504 	movi	zero,1684
   19b5c:	0001a504 	movi	zero,1684
   19b60:	0001a504 	movi	zero,1684
   19b64:	0001a504 	movi	zero,1684
   19b68:	0001a428 	cmpgeui	zero,zero,1680
   19b6c:	0001a44c 	andi	zero,zero,1681
   19b70:	0001a504 	movi	zero,1684
   19b74:	00019d44 	movi	zero,1653
   19b78:	0001a460 	cmpeqi	zero,zero,1681
   19b7c:	0001a504 	movi	zero,1684
   19b80:	0001a22c 	andhi	zero,zero,1672
   19b84:	0001a238 	rdprs	zero,zero,1672
   19b88:	0001a238 	rdprs	zero,zero,1672
   19b8c:	0001a238 	rdprs	zero,zero,1672
   19b90:	0001a238 	rdprs	zero,zero,1672
   19b94:	0001a238 	rdprs	zero,zero,1672
   19b98:	0001a238 	rdprs	zero,zero,1672
   19b9c:	0001a238 	rdprs	zero,zero,1672
   19ba0:	0001a238 	rdprs	zero,zero,1672
   19ba4:	0001a238 	rdprs	zero,zero,1672
   19ba8:	0001a504 	movi	zero,1684
   19bac:	0001a504 	movi	zero,1684
   19bb0:	0001a504 	movi	zero,1684
   19bb4:	0001a504 	movi	zero,1684
   19bb8:	0001a504 	movi	zero,1684
   19bbc:	0001a504 	movi	zero,1684
   19bc0:	0001a504 	movi	zero,1684
   19bc4:	0001a504 	movi	zero,1684
   19bc8:	0001a504 	movi	zero,1684
   19bcc:	0001a504 	movi	zero,1684
   19bd0:	0001a278 	rdprs	zero,zero,1673
   19bd4:	0001a504 	movi	zero,1684
   19bd8:	0001a504 	movi	zero,1684
   19bdc:	0001a504 	movi	zero,1684
   19be0:	0001a504 	movi	zero,1684
   19be4:	0001a504 	movi	zero,1684
   19be8:	0001a504 	movi	zero,1684
   19bec:	0001a504 	movi	zero,1684
   19bf0:	0001a504 	movi	zero,1684
   19bf4:	0001a504 	movi	zero,1684
   19bf8:	0001a504 	movi	zero,1684
   19bfc:	0001a2b4 	movhi	zero,1674
   19c00:	0001a504 	movi	zero,1684
   19c04:	0001a504 	movi	zero,1684
   19c08:	0001a504 	movi	zero,1684
   19c0c:	0001a504 	movi	zero,1684
   19c10:	0001a504 	movi	zero,1684
   19c14:	0001a310 	cmplti	zero,zero,1676
   19c18:	0001a504 	movi	zero,1684
   19c1c:	0001a504 	movi	zero,1684
   19c20:	0001a384 	movi	zero,1678
   19c24:	0001a504 	movi	zero,1684
   19c28:	0001a504 	movi	zero,1684
   19c2c:	0001a504 	movi	zero,1684
   19c30:	0001a504 	movi	zero,1684
   19c34:	0001a504 	movi	zero,1684
   19c38:	0001a504 	movi	zero,1684
   19c3c:	0001a504 	movi	zero,1684
   19c40:	0001a504 	movi	zero,1684
   19c44:	0001a504 	movi	zero,1684
   19c48:	0001a504 	movi	zero,1684
   19c4c:	0001a12c 	andhi	zero,zero,1668
   19c50:	0001a15c 	xori	zero,zero,1669
   19c54:	0001a504 	movi	zero,1684
   19c58:	0001a504 	movi	zero,1684
   19c5c:	0001a504 	movi	zero,1684
   19c60:	0001a4ac 	andhi	zero,zero,1682
   19c64:	0001a15c 	xori	zero,zero,1669
   19c68:	0001a504 	movi	zero,1684
   19c6c:	0001a504 	movi	zero,1684
   19c70:	0001a004 	movi	zero,1664
   19c74:	0001a504 	movi	zero,1684
   19c78:	0001a018 	cmpnei	zero,zero,1664
   19c7c:	0001a050 	cmplti	zero,zero,1665
   19c80:	00019d50 	cmplti	zero,zero,1653
   19c84:	00019ff8 	rdprs	zero,zero,1663
   19c88:	0001a504 	movi	zero,1684
   19c8c:	0001a3c4 	movi	zero,1679
   19c90:	0001a504 	movi	zero,1684
   19c94:	0001a410 	cmplti	zero,zero,1680
   19c98:	0001a504 	movi	zero,1684
   19c9c:	0001a504 	movi	zero,1684
   19ca0:	0001a0d4 	movui	zero,1667
   19ca4:	42000204 	addi	r8,r8,8
   19ca8:	d8c02417 	ldw	r3,144(sp)
   19cac:	1c07883a 	add	r3,r3,r16
   19cb0:	d8c02415 	stw	r3,144(sp)
   19cb4:	003f8c06 	br	19ae8 <__alt_data_end+0xfc019ae8>
   19cb8:	d9402017 	ldw	r5,128(sp)
   19cbc:	d9002117 	ldw	r4,132(sp)
   19cc0:	0013a380 	call	13a38 <__swsetup_r>
   19cc4:	1003c11e 	bne	r2,zero,1abcc <___vfiprintf_internal_r+0x1224>
   19cc8:	d9402017 	ldw	r5,128(sp)
   19ccc:	00c00284 	movi	r3,10
   19cd0:	2880030b 	ldhu	r2,12(r5)
   19cd4:	1080068c 	andi	r2,r2,26
   19cd8:	10ff581e 	bne	r2,r3,19a3c <__alt_data_end+0xfc019a3c>
   19cdc:	d8c02017 	ldw	r3,128(sp)
   19ce0:	1880038f 	ldh	r2,14(r3)
   19ce4:	103f5516 	blt	r2,zero,19a3c <__alt_data_end+0xfc019a3c>
   19ce8:	d9c02217 	ldw	r7,136(sp)
   19cec:	d9002117 	ldw	r4,132(sp)
   19cf0:	a80d883a 	mov	r6,r21
   19cf4:	180b883a 	mov	r5,r3
   19cf8:	001aed00 	call	1aed0 <__sbprintf>
   19cfc:	dfc03517 	ldw	ra,212(sp)
   19d00:	df003417 	ldw	fp,208(sp)
   19d04:	ddc03317 	ldw	r23,204(sp)
   19d08:	dd803217 	ldw	r22,200(sp)
   19d0c:	dd403117 	ldw	r21,196(sp)
   19d10:	dd003017 	ldw	r20,192(sp)
   19d14:	dcc02f17 	ldw	r19,188(sp)
   19d18:	dc802e17 	ldw	r18,184(sp)
   19d1c:	dc402d17 	ldw	r17,180(sp)
   19d20:	dc002c17 	ldw	r16,176(sp)
   19d24:	dec03604 	addi	sp,sp,216
   19d28:	f800283a 	ret
   19d2c:	0015a440 	call	15a44 <__sinit>
   19d30:	003f2f06 	br	199f0 <__alt_data_end+0xfc0199f0>
   19d34:	d8c02517 	ldw	r3,148(sp)
   19d38:	d8802215 	stw	r2,136(sp)
   19d3c:	00c7c83a 	sub	r3,zero,r3
   19d40:	d8c02515 	stw	r3,148(sp)
   19d44:	8c400114 	ori	r17,r17,4
   19d48:	b0c00007 	ldb	r3,0(r22)
   19d4c:	003f7306 	br	19b1c <__alt_data_end+0xfc019b1c>
   19d50:	00800c04 	movi	r2,48
   19d54:	d9402217 	ldw	r5,136(sp)
   19d58:	d8801d05 	stb	r2,116(sp)
   19d5c:	00801e04 	movi	r2,120
   19d60:	d8801d45 	stb	r2,117(sp)
   19d64:	d8001d85 	stb	zero,118(sp)
   19d68:	b811883a 	mov	r8,r23
   19d6c:	28c00104 	addi	r3,r5,4
   19d70:	2cc00017 	ldw	r19,0(r5)
   19d74:	0029883a 	mov	r20,zero
   19d78:	88800094 	ori	r2,r17,2
   19d7c:	80032516 	blt	r16,zero,1aa14 <___vfiprintf_internal_r+0x106c>
   19d80:	00bfdfc4 	movi	r2,-129
   19d84:	88a2703a 	and	r17,r17,r2
   19d88:	d8c02215 	stw	r3,136(sp)
   19d8c:	8c400094 	ori	r17,r17,2
   19d90:	98032a1e 	bne	r19,zero,1aa3c <___vfiprintf_internal_r+0x1094>
   19d94:	008000f4 	movhi	r2,3
   19d98:	10aa0b04 	addi	r2,r2,-22484
   19d9c:	d8802615 	stw	r2,152(sp)
   19da0:	002b883a 	mov	r21,zero
   19da4:	8001741e 	bne	r16,zero,1a378 <___vfiprintf_internal_r+0x9d0>
   19da8:	0021883a 	mov	r16,zero
   19dac:	0029883a 	mov	r20,zero
   19db0:	ddc01a04 	addi	r23,sp,104
   19db4:	8027883a 	mov	r19,r16
   19db8:	8500010e 	bge	r16,r20,19dc0 <___vfiprintf_internal_r+0x418>
   19dbc:	a027883a 	mov	r19,r20
   19dc0:	ad403fcc 	andi	r21,r21,255
   19dc4:	ad40201c 	xori	r21,r21,128
   19dc8:	ad7fe004 	addi	r21,r21,-128
   19dcc:	a8000126 	beq	r21,zero,19dd4 <___vfiprintf_internal_r+0x42c>
   19dd0:	9cc00044 	addi	r19,r19,1
   19dd4:	89c0008c 	andi	r7,r17,2
   19dd8:	38000126 	beq	r7,zero,19de0 <___vfiprintf_internal_r+0x438>
   19ddc:	9cc00084 	addi	r19,r19,2
   19de0:	88c0210c 	andi	r3,r17,132
   19de4:	1801dd1e 	bne	r3,zero,1a55c <___vfiprintf_internal_r+0xbb4>
   19de8:	d9402517 	ldw	r5,148(sp)
   19dec:	2cebc83a 	sub	r21,r5,r19
   19df0:	0541da0e 	bge	zero,r21,1a55c <___vfiprintf_internal_r+0xbb4>
   19df4:	07000404 	movi	fp,16
   19df8:	d8801c17 	ldw	r2,112(sp)
   19dfc:	e543be0e 	bge	fp,r21,1acf8 <___vfiprintf_internal_r+0x1350>
   19e00:	014000f4 	movhi	r5,3
   19e04:	296a7f04 	addi	r5,r5,-22020
   19e08:	dc002715 	stw	r16,156(sp)
   19e0c:	d9801b17 	ldw	r6,108(sp)
   19e10:	a821883a 	mov	r16,r21
   19e14:	d9402315 	stw	r5,140(sp)
   19e18:	028001c4 	movi	r10,7
   19e1c:	d9c02915 	stw	r7,164(sp)
   19e20:	182b883a 	mov	r21,r3
   19e24:	00000506 	br	19e3c <___vfiprintf_internal_r+0x494>
   19e28:	31000084 	addi	r4,r6,2
   19e2c:	42000204 	addi	r8,r8,8
   19e30:	180d883a 	mov	r6,r3
   19e34:	843ffc04 	addi	r16,r16,-16
   19e38:	e4000f0e 	bge	fp,r16,19e78 <___vfiprintf_internal_r+0x4d0>
   19e3c:	010000f4 	movhi	r4,3
   19e40:	10800404 	addi	r2,r2,16
   19e44:	30c00044 	addi	r3,r6,1
   19e48:	212a7f04 	addi	r4,r4,-22020
   19e4c:	41000015 	stw	r4,0(r8)
   19e50:	47000115 	stw	fp,4(r8)
   19e54:	d8801c15 	stw	r2,112(sp)
   19e58:	d8c01b15 	stw	r3,108(sp)
   19e5c:	50fff20e 	bge	r10,r3,19e28 <__alt_data_end+0xfc019e28>
   19e60:	1001b21e 	bne	r2,zero,1a52c <___vfiprintf_internal_r+0xb84>
   19e64:	843ffc04 	addi	r16,r16,-16
   19e68:	000d883a 	mov	r6,zero
   19e6c:	01000044 	movi	r4,1
   19e70:	d811883a 	mov	r8,sp
   19e74:	e43ff116 	blt	fp,r16,19e3c <__alt_data_end+0xfc019e3c>
   19e78:	a807883a 	mov	r3,r21
   19e7c:	d9c02917 	ldw	r7,164(sp)
   19e80:	802b883a 	mov	r21,r16
   19e84:	dc002717 	ldw	r16,156(sp)
   19e88:	d9402317 	ldw	r5,140(sp)
   19e8c:	a885883a 	add	r2,r21,r2
   19e90:	45400115 	stw	r21,4(r8)
   19e94:	41400015 	stw	r5,0(r8)
   19e98:	d8801c15 	stw	r2,112(sp)
   19e9c:	d9001b15 	stw	r4,108(sp)
   19ea0:	014001c4 	movi	r5,7
   19ea4:	29026216 	blt	r5,r4,1a830 <___vfiprintf_internal_r+0xe88>
   19ea8:	d9801d87 	ldb	r6,118(sp)
   19eac:	42000204 	addi	r8,r8,8
   19eb0:	21400044 	addi	r5,r4,1
   19eb4:	3001ae1e 	bne	r6,zero,1a570 <___vfiprintf_internal_r+0xbc8>
   19eb8:	3801bb26 	beq	r7,zero,1a5a8 <___vfiprintf_internal_r+0xc00>
   19ebc:	d9001d04 	addi	r4,sp,116
   19ec0:	10800084 	addi	r2,r2,2
   19ec4:	41000015 	stw	r4,0(r8)
   19ec8:	01000084 	movi	r4,2
   19ecc:	41000115 	stw	r4,4(r8)
   19ed0:	d8801c15 	stw	r2,112(sp)
   19ed4:	d9401b15 	stw	r5,108(sp)
   19ed8:	010001c4 	movi	r4,7
   19edc:	2142680e 	bge	r4,r5,1a880 <___vfiprintf_internal_r+0xed8>
   19ee0:	1002b11e 	bne	r2,zero,1a9a8 <___vfiprintf_internal_r+0x1000>
   19ee4:	01802004 	movi	r6,128
   19ee8:	01400044 	movi	r5,1
   19eec:	0009883a 	mov	r4,zero
   19ef0:	d811883a 	mov	r8,sp
   19ef4:	1981ae1e 	bne	r3,r6,1a5b0 <___vfiprintf_internal_r+0xc08>
   19ef8:	d8c02517 	ldw	r3,148(sp)
   19efc:	1cf9c83a 	sub	fp,r3,r19
   19f00:	0701ab0e 	bge	zero,fp,1a5b0 <___vfiprintf_internal_r+0xc08>
   19f04:	05400404 	movi	r21,16
   19f08:	af03a90e 	bge	r21,fp,1adb0 <___vfiprintf_internal_r+0x1408>
   19f0c:	014000f4 	movhi	r5,3
   19f10:	296a7b04 	addi	r5,r5,-22036
   19f14:	d9402315 	stw	r5,140(sp)
   19f18:	01c001c4 	movi	r7,7
   19f1c:	00000506 	br	19f34 <___vfiprintf_internal_r+0x58c>
   19f20:	21800084 	addi	r6,r4,2
   19f24:	42000204 	addi	r8,r8,8
   19f28:	1809883a 	mov	r4,r3
   19f2c:	e73ffc04 	addi	fp,fp,-16
   19f30:	af000d0e 	bge	r21,fp,19f68 <___vfiprintf_internal_r+0x5c0>
   19f34:	10800404 	addi	r2,r2,16
   19f38:	20c00044 	addi	r3,r4,1
   19f3c:	44800015 	stw	r18,0(r8)
   19f40:	45400115 	stw	r21,4(r8)
   19f44:	d8801c15 	stw	r2,112(sp)
   19f48:	d8c01b15 	stw	r3,108(sp)
   19f4c:	38fff40e 	bge	r7,r3,19f20 <__alt_data_end+0xfc019f20>
   19f50:	10022b1e 	bne	r2,zero,1a800 <___vfiprintf_internal_r+0xe58>
   19f54:	e73ffc04 	addi	fp,fp,-16
   19f58:	01800044 	movi	r6,1
   19f5c:	0009883a 	mov	r4,zero
   19f60:	d811883a 	mov	r8,sp
   19f64:	af3ff316 	blt	r21,fp,19f34 <__alt_data_end+0xfc019f34>
   19f68:	d8c02317 	ldw	r3,140(sp)
   19f6c:	1705883a 	add	r2,r2,fp
   19f70:	47000115 	stw	fp,4(r8)
   19f74:	40c00015 	stw	r3,0(r8)
   19f78:	d8801c15 	stw	r2,112(sp)
   19f7c:	d9801b15 	stw	r6,108(sp)
   19f80:	00c001c4 	movi	r3,7
   19f84:	19829416 	blt	r3,r6,1a9d8 <___vfiprintf_internal_r+0x1030>
   19f88:	8521c83a 	sub	r16,r16,r20
   19f8c:	42000204 	addi	r8,r8,8
   19f90:	31400044 	addi	r5,r6,1
   19f94:	3009883a 	mov	r4,r6
   19f98:	04018716 	blt	zero,r16,1a5b8 <___vfiprintf_internal_r+0xc10>
   19f9c:	a085883a 	add	r2,r20,r2
   19fa0:	45c00015 	stw	r23,0(r8)
   19fa4:	45000115 	stw	r20,4(r8)
   19fa8:	d8801c15 	stw	r2,112(sp)
   19fac:	d9401b15 	stw	r5,108(sp)
   19fb0:	00c001c4 	movi	r3,7
   19fb4:	1941c20e 	bge	r3,r5,1a6c0 <___vfiprintf_internal_r+0xd18>
   19fb8:	1002531e 	bne	r2,zero,1a908 <___vfiprintf_internal_r+0xf60>
   19fbc:	d8001b15 	stw	zero,108(sp)
   19fc0:	8c40010c 	andi	r17,r17,4
   19fc4:	88023226 	beq	r17,zero,1a890 <___vfiprintf_internal_r+0xee8>
   19fc8:	d9002517 	ldw	r4,148(sp)
   19fcc:	24e3c83a 	sub	r17,r4,r19
   19fd0:	04432916 	blt	zero,r17,1ac78 <___vfiprintf_internal_r+0x12d0>
   19fd4:	d8802517 	ldw	r2,148(sp)
   19fd8:	14c0010e 	bge	r2,r19,19fe0 <___vfiprintf_internal_r+0x638>
   19fdc:	9805883a 	mov	r2,r19
   19fe0:	d8c02417 	ldw	r3,144(sp)
   19fe4:	1887883a 	add	r3,r3,r2
   19fe8:	d8c02415 	stw	r3,144(sp)
   19fec:	d8001b15 	stw	zero,108(sp)
   19ff0:	d811883a 	mov	r8,sp
   19ff4:	003ea006 	br	19a78 <__alt_data_end+0xfc019a78>
   19ff8:	8c400814 	ori	r17,r17,32
   19ffc:	b0c00007 	ldb	r3,0(r22)
   1a000:	003ec606 	br	19b1c <__alt_data_end+0xfc019b1c>
   1a004:	b0c00007 	ldb	r3,0(r22)
   1a008:	00801b04 	movi	r2,108
   1a00c:	18832026 	beq	r3,r2,1ac90 <___vfiprintf_internal_r+0x12e8>
   1a010:	8c400414 	ori	r17,r17,16
   1a014:	003ec106 	br	19b1c <__alt_data_end+0xfc019b1c>
   1a018:	9cc03fcc 	andi	r19,r19,255
   1a01c:	b811883a 	mov	r8,r23
   1a020:	9803981e 	bne	r19,zero,1ae84 <___vfiprintf_internal_r+0x14dc>
   1a024:	8880080c 	andi	r2,r17,32
   1a028:	1002be26 	beq	r2,zero,1ab24 <___vfiprintf_internal_r+0x117c>
   1a02c:	d9002217 	ldw	r4,136(sp)
   1a030:	d9402417 	ldw	r5,144(sp)
   1a034:	20800017 	ldw	r2,0(r4)
   1a038:	2807d7fa 	srai	r3,r5,31
   1a03c:	21000104 	addi	r4,r4,4
   1a040:	d9002215 	stw	r4,136(sp)
   1a044:	11400015 	stw	r5,0(r2)
   1a048:	10c00115 	stw	r3,4(r2)
   1a04c:	003e8a06 	br	19a78 <__alt_data_end+0xfc019a78>
   1a050:	9cc03fcc 	andi	r19,r19,255
   1a054:	b811883a 	mov	r8,r23
   1a058:	9803871e 	bne	r19,zero,1ae78 <___vfiprintf_internal_r+0x14d0>
   1a05c:	8880080c 	andi	r2,r17,32
   1a060:	10009a26 	beq	r2,zero,1a2cc <___vfiprintf_internal_r+0x924>
   1a064:	d9002217 	ldw	r4,136(sp)
   1a068:	d8001d85 	stb	zero,118(sp)
   1a06c:	20800204 	addi	r2,r4,8
   1a070:	24c00017 	ldw	r19,0(r4)
   1a074:	25000117 	ldw	r20,4(r4)
   1a078:	8002a416 	blt	r16,zero,1ab0c <___vfiprintf_internal_r+0x1164>
   1a07c:	013fdfc4 	movi	r4,-129
   1a080:	9d06b03a 	or	r3,r19,r20
   1a084:	d8802215 	stw	r2,136(sp)
   1a088:	8922703a 	and	r17,r17,r4
   1a08c:	18009b26 	beq	r3,zero,1a2fc <___vfiprintf_internal_r+0x954>
   1a090:	002b883a 	mov	r21,zero
   1a094:	ddc01a04 	addi	r23,sp,104
   1a098:	9806d0fa 	srli	r3,r19,3
   1a09c:	a008977a 	slli	r4,r20,29
   1a0a0:	a028d0fa 	srli	r20,r20,3
   1a0a4:	9cc001cc 	andi	r19,r19,7
   1a0a8:	98800c04 	addi	r2,r19,48
   1a0ac:	bdffffc4 	addi	r23,r23,-1
   1a0b0:	20e6b03a 	or	r19,r4,r3
   1a0b4:	b8800005 	stb	r2,0(r23)
   1a0b8:	9d06b03a 	or	r3,r19,r20
   1a0bc:	183ff61e 	bne	r3,zero,1a098 <__alt_data_end+0xfc01a098>
   1a0c0:	88c0004c 	andi	r3,r17,1
   1a0c4:	18021f1e 	bne	r3,zero,1a944 <___vfiprintf_internal_r+0xf9c>
   1a0c8:	d9401e17 	ldw	r5,120(sp)
   1a0cc:	2de9c83a 	sub	r20,r5,r23
   1a0d0:	003f3806 	br	19db4 <__alt_data_end+0xfc019db4>
   1a0d4:	9cc03fcc 	andi	r19,r19,255
   1a0d8:	b811883a 	mov	r8,r23
   1a0dc:	98034f1e 	bne	r19,zero,1ae1c <___vfiprintf_internal_r+0x1474>
   1a0e0:	008000f4 	movhi	r2,3
   1a0e4:	10aa0b04 	addi	r2,r2,-22484
   1a0e8:	d8802615 	stw	r2,152(sp)
   1a0ec:	8880080c 	andi	r2,r17,32
   1a0f0:	1000ac26 	beq	r2,zero,1a3a4 <___vfiprintf_internal_r+0x9fc>
   1a0f4:	d9002217 	ldw	r4,136(sp)
   1a0f8:	24c00017 	ldw	r19,0(r4)
   1a0fc:	25000117 	ldw	r20,4(r4)
   1a100:	21000204 	addi	r4,r4,8
   1a104:	d9002215 	stw	r4,136(sp)
   1a108:	8880004c 	andi	r2,r17,1
   1a10c:	1001e726 	beq	r2,zero,1a8ac <___vfiprintf_internal_r+0xf04>
   1a110:	9d04b03a 	or	r2,r19,r20
   1a114:	10025c1e 	bne	r2,zero,1aa88 <___vfiprintf_internal_r+0x10e0>
   1a118:	d8001d85 	stb	zero,118(sp)
   1a11c:	80024416 	blt	r16,zero,1aa30 <___vfiprintf_internal_r+0x1088>
   1a120:	00bfdfc4 	movi	r2,-129
   1a124:	88a2703a 	and	r17,r17,r2
   1a128:	003f1d06 	br	19da0 <__alt_data_end+0xfc019da0>
   1a12c:	d8c02217 	ldw	r3,136(sp)
   1a130:	04c00044 	movi	r19,1
   1a134:	b811883a 	mov	r8,r23
   1a138:	18800017 	ldw	r2,0(r3)
   1a13c:	18c00104 	addi	r3,r3,4
   1a140:	d8001d85 	stb	zero,118(sp)
   1a144:	d8801005 	stb	r2,64(sp)
   1a148:	d8c02215 	stw	r3,136(sp)
   1a14c:	9829883a 	mov	r20,r19
   1a150:	ddc01004 	addi	r23,sp,64
   1a154:	0021883a 	mov	r16,zero
   1a158:	003f1e06 	br	19dd4 <__alt_data_end+0xfc019dd4>
   1a15c:	9cc03fcc 	andi	r19,r19,255
   1a160:	b811883a 	mov	r8,r23
   1a164:	9803331e 	bne	r19,zero,1ae34 <___vfiprintf_internal_r+0x148c>
   1a168:	8880080c 	andi	r2,r17,32
   1a16c:	10004826 	beq	r2,zero,1a290 <___vfiprintf_internal_r+0x8e8>
   1a170:	d9002217 	ldw	r4,136(sp)
   1a174:	20800117 	ldw	r2,4(r4)
   1a178:	24c00017 	ldw	r19,0(r4)
   1a17c:	21000204 	addi	r4,r4,8
   1a180:	d9002215 	stw	r4,136(sp)
   1a184:	1029883a 	mov	r20,r2
   1a188:	10024c16 	blt	r2,zero,1aabc <___vfiprintf_internal_r+0x1114>
   1a18c:	dd401d83 	ldbu	r21,118(sp)
   1a190:	80007116 	blt	r16,zero,1a358 <___vfiprintf_internal_r+0x9b0>
   1a194:	00ffdfc4 	movi	r3,-129
   1a198:	9d04b03a 	or	r2,r19,r20
   1a19c:	88e2703a 	and	r17,r17,r3
   1a1a0:	1000d126 	beq	r2,zero,1a4e8 <___vfiprintf_internal_r+0xb40>
   1a1a4:	a0023526 	beq	r20,zero,1aa7c <___vfiprintf_internal_r+0x10d4>
   1a1a8:	ddc01a04 	addi	r23,sp,104
   1a1ac:	4039883a 	mov	fp,r8
   1a1b0:	9809883a 	mov	r4,r19
   1a1b4:	a00b883a 	mov	r5,r20
   1a1b8:	01800284 	movi	r6,10
   1a1bc:	000f883a 	mov	r7,zero
   1a1c0:	001bed40 	call	1bed4 <__umoddi3>
   1a1c4:	10800c04 	addi	r2,r2,48
   1a1c8:	bdffffc4 	addi	r23,r23,-1
   1a1cc:	9809883a 	mov	r4,r19
   1a1d0:	a00b883a 	mov	r5,r20
   1a1d4:	b8800005 	stb	r2,0(r23)
   1a1d8:	01800284 	movi	r6,10
   1a1dc:	000f883a 	mov	r7,zero
   1a1e0:	001b8d80 	call	1b8d8 <__udivdi3>
   1a1e4:	1027883a 	mov	r19,r2
   1a1e8:	10c4b03a 	or	r2,r2,r3
   1a1ec:	1829883a 	mov	r20,r3
   1a1f0:	103fef1e 	bne	r2,zero,1a1b0 <__alt_data_end+0xfc01a1b0>
   1a1f4:	d9001e17 	ldw	r4,120(sp)
   1a1f8:	e011883a 	mov	r8,fp
   1a1fc:	25e9c83a 	sub	r20,r4,r23
   1a200:	003eec06 	br	19db4 <__alt_data_end+0xfc019db4>
   1a204:	d8802307 	ldb	r2,140(sp)
   1a208:	1002361e 	bne	r2,zero,1aae4 <___vfiprintf_internal_r+0x113c>
   1a20c:	00c00804 	movi	r3,32
   1a210:	d8c02305 	stb	r3,140(sp)
   1a214:	04c00044 	movi	r19,1
   1a218:	b0c00007 	ldb	r3,0(r22)
   1a21c:	003e3f06 	br	19b1c <__alt_data_end+0xfc019b1c>
   1a220:	8c400054 	ori	r17,r17,1
   1a224:	b0c00007 	ldb	r3,0(r22)
   1a228:	003e3c06 	br	19b1c <__alt_data_end+0xfc019b1c>
   1a22c:	8c402014 	ori	r17,r17,128
   1a230:	b0c00007 	ldb	r3,0(r22)
   1a234:	003e3906 	br	19b1c <__alt_data_end+0xfc019b1c>
   1a238:	dc002715 	stw	r16,156(sp)
   1a23c:	d8002515 	stw	zero,148(sp)
   1a240:	1f3ff404 	addi	fp,r3,-48
   1a244:	0009883a 	mov	r4,zero
   1a248:	b021883a 	mov	r16,r22
   1a24c:	01400284 	movi	r5,10
   1a250:	000ccac0 	call	ccac <__mulsi3>
   1a254:	80c00007 	ldb	r3,0(r16)
   1a258:	e089883a 	add	r4,fp,r2
   1a25c:	b5800044 	addi	r22,r22,1
   1a260:	1f3ff404 	addi	fp,r3,-48
   1a264:	b021883a 	mov	r16,r22
   1a268:	af3ff82e 	bgeu	r21,fp,1a24c <__alt_data_end+0xfc01a24c>
   1a26c:	d9002515 	stw	r4,148(sp)
   1a270:	dc002717 	ldw	r16,156(sp)
   1a274:	003e2a06 	br	19b20 <__alt_data_end+0xfc019b20>
   1a278:	9cc03fcc 	andi	r19,r19,255
   1a27c:	b811883a 	mov	r8,r23
   1a280:	9802e91e 	bne	r19,zero,1ae28 <___vfiprintf_internal_r+0x1480>
   1a284:	8c400414 	ori	r17,r17,16
   1a288:	8880080c 	andi	r2,r17,32
   1a28c:	103fb81e 	bne	r2,zero,1a170 <__alt_data_end+0xfc01a170>
   1a290:	8880040c 	andi	r2,r17,16
   1a294:	10022e26 	beq	r2,zero,1ab50 <___vfiprintf_internal_r+0x11a8>
   1a298:	d9402217 	ldw	r5,136(sp)
   1a29c:	2cc00017 	ldw	r19,0(r5)
   1a2a0:	29400104 	addi	r5,r5,4
   1a2a4:	d9402215 	stw	r5,136(sp)
   1a2a8:	9829d7fa 	srai	r20,r19,31
   1a2ac:	a005883a 	mov	r2,r20
   1a2b0:	003fb506 	br	1a188 <__alt_data_end+0xfc01a188>
   1a2b4:	9cc03fcc 	andi	r19,r19,255
   1a2b8:	b811883a 	mov	r8,r23
   1a2bc:	9802fa1e 	bne	r19,zero,1aea8 <___vfiprintf_internal_r+0x1500>
   1a2c0:	8c400414 	ori	r17,r17,16
   1a2c4:	8880080c 	andi	r2,r17,32
   1a2c8:	103f661e 	bne	r2,zero,1a064 <__alt_data_end+0xfc01a064>
   1a2cc:	8880040c 	andi	r2,r17,16
   1a2d0:	10020626 	beq	r2,zero,1aaec <___vfiprintf_internal_r+0x1144>
   1a2d4:	d9402217 	ldw	r5,136(sp)
   1a2d8:	d8001d85 	stb	zero,118(sp)
   1a2dc:	0029883a 	mov	r20,zero
   1a2e0:	28800104 	addi	r2,r5,4
   1a2e4:	2cc00017 	ldw	r19,0(r5)
   1a2e8:	80020816 	blt	r16,zero,1ab0c <___vfiprintf_internal_r+0x1164>
   1a2ec:	00ffdfc4 	movi	r3,-129
   1a2f0:	d8802215 	stw	r2,136(sp)
   1a2f4:	88e2703a 	and	r17,r17,r3
   1a2f8:	983f651e 	bne	r19,zero,1a090 <__alt_data_end+0xfc01a090>
   1a2fc:	002b883a 	mov	r21,zero
   1a300:	8002cf26 	beq	r16,zero,1ae40 <___vfiprintf_internal_r+0x1498>
   1a304:	0027883a 	mov	r19,zero
   1a308:	0029883a 	mov	r20,zero
   1a30c:	003f6106 	br	1a094 <__alt_data_end+0xfc01a094>
   1a310:	9cc03fcc 	andi	r19,r19,255
   1a314:	b811883a 	mov	r8,r23
   1a318:	9802e01e 	bne	r19,zero,1ae9c <___vfiprintf_internal_r+0x14f4>
   1a31c:	8c400414 	ori	r17,r17,16
   1a320:	8880080c 	andi	r2,r17,32
   1a324:	1000641e 	bne	r2,zero,1a4b8 <___vfiprintf_internal_r+0xb10>
   1a328:	8880040c 	andi	r2,r17,16
   1a32c:	1001c81e 	bne	r2,zero,1aa50 <___vfiprintf_internal_r+0x10a8>
   1a330:	8880100c 	andi	r2,r17,64
   1a334:	d8001d85 	stb	zero,118(sp)
   1a338:	1002281e 	bne	r2,zero,1abdc <___vfiprintf_internal_r+0x1234>
   1a33c:	d9002217 	ldw	r4,136(sp)
   1a340:	0029883a 	mov	r20,zero
   1a344:	20800104 	addi	r2,r4,4
   1a348:	24c00017 	ldw	r19,0(r4)
   1a34c:	8001c60e 	bge	r16,zero,1aa68 <___vfiprintf_internal_r+0x10c0>
   1a350:	d8802215 	stw	r2,136(sp)
   1a354:	002b883a 	mov	r21,zero
   1a358:	9d04b03a 	or	r2,r19,r20
   1a35c:	103f911e 	bne	r2,zero,1a1a4 <__alt_data_end+0xfc01a1a4>
   1a360:	00800044 	movi	r2,1
   1a364:	10803fcc 	andi	r2,r2,255
   1a368:	00c00044 	movi	r3,1
   1a36c:	10c05f26 	beq	r2,r3,1a4ec <___vfiprintf_internal_r+0xb44>
   1a370:	00c00084 	movi	r3,2
   1a374:	10ffe31e 	bne	r2,r3,1a304 <__alt_data_end+0xfc01a304>
   1a378:	0027883a 	mov	r19,zero
   1a37c:	0029883a 	mov	r20,zero
   1a380:	00015106 	br	1a8c8 <___vfiprintf_internal_r+0xf20>
   1a384:	9cc03fcc 	andi	r19,r19,255
   1a388:	b811883a 	mov	r8,r23
   1a38c:	9802c01e 	bne	r19,zero,1ae90 <___vfiprintf_internal_r+0x14e8>
   1a390:	014000f4 	movhi	r5,3
   1a394:	296a0604 	addi	r5,r5,-22504
   1a398:	d9402615 	stw	r5,152(sp)
   1a39c:	8880080c 	andi	r2,r17,32
   1a3a0:	103f541e 	bne	r2,zero,1a0f4 <__alt_data_end+0xfc01a0f4>
   1a3a4:	8880040c 	andi	r2,r17,16
   1a3a8:	1001f226 	beq	r2,zero,1ab74 <___vfiprintf_internal_r+0x11cc>
   1a3ac:	d9402217 	ldw	r5,136(sp)
   1a3b0:	0029883a 	mov	r20,zero
   1a3b4:	2cc00017 	ldw	r19,0(r5)
   1a3b8:	29400104 	addi	r5,r5,4
   1a3bc:	d9402215 	stw	r5,136(sp)
   1a3c0:	003f5106 	br	1a108 <__alt_data_end+0xfc01a108>
   1a3c4:	d8c02217 	ldw	r3,136(sp)
   1a3c8:	b811883a 	mov	r8,r23
   1a3cc:	d8001d85 	stb	zero,118(sp)
   1a3d0:	1dc00017 	ldw	r23,0(r3)
   1a3d4:	1f000104 	addi	fp,r3,4
   1a3d8:	b8025926 	beq	r23,zero,1ad40 <___vfiprintf_internal_r+0x1398>
   1a3dc:	80023316 	blt	r16,zero,1acac <___vfiprintf_internal_r+0x1304>
   1a3e0:	800d883a 	mov	r6,r16
   1a3e4:	000b883a 	mov	r5,zero
   1a3e8:	b809883a 	mov	r4,r23
   1a3ec:	da002a15 	stw	r8,168(sp)
   1a3f0:	00167b00 	call	167b0 <memchr>
   1a3f4:	da002a17 	ldw	r8,168(sp)
   1a3f8:	10026826 	beq	r2,zero,1ad9c <___vfiprintf_internal_r+0x13f4>
   1a3fc:	15e9c83a 	sub	r20,r2,r23
   1a400:	dd401d83 	ldbu	r21,118(sp)
   1a404:	df002215 	stw	fp,136(sp)
   1a408:	0021883a 	mov	r16,zero
   1a40c:	003e6906 	br	19db4 <__alt_data_end+0xfc019db4>
   1a410:	9cc03fcc 	andi	r19,r19,255
   1a414:	b811883a 	mov	r8,r23
   1a418:	983fc126 	beq	r19,zero,1a320 <__alt_data_end+0xfc01a320>
   1a41c:	d8c02303 	ldbu	r3,140(sp)
   1a420:	d8c01d85 	stb	r3,118(sp)
   1a424:	003fbe06 	br	1a320 <__alt_data_end+0xfc01a320>
   1a428:	d9002217 	ldw	r4,136(sp)
   1a42c:	d9402217 	ldw	r5,136(sp)
   1a430:	21000017 	ldw	r4,0(r4)
   1a434:	28800104 	addi	r2,r5,4
   1a438:	d9002515 	stw	r4,148(sp)
   1a43c:	203e3d16 	blt	r4,zero,19d34 <__alt_data_end+0xfc019d34>
   1a440:	d8802215 	stw	r2,136(sp)
   1a444:	b0c00007 	ldb	r3,0(r22)
   1a448:	003db406 	br	19b1c <__alt_data_end+0xfc019b1c>
   1a44c:	00c00ac4 	movi	r3,43
   1a450:	d8c02305 	stb	r3,140(sp)
   1a454:	04c00044 	movi	r19,1
   1a458:	b0c00007 	ldb	r3,0(r22)
   1a45c:	003daf06 	br	19b1c <__alt_data_end+0xfc019b1c>
   1a460:	b0c00007 	ldb	r3,0(r22)
   1a464:	01000a84 	movi	r4,42
   1a468:	b4000044 	addi	r16,r22,1
   1a46c:	19025e26 	beq	r3,r4,1ade8 <___vfiprintf_internal_r+0x1440>
   1a470:	1f3ff404 	addi	fp,r3,-48
   1a474:	0009883a 	mov	r4,zero
   1a478:	af025236 	bltu	r21,fp,1adc4 <___vfiprintf_internal_r+0x141c>
   1a47c:	01400284 	movi	r5,10
   1a480:	000ccac0 	call	ccac <__mulsi3>
   1a484:	80c00007 	ldb	r3,0(r16)
   1a488:	1709883a 	add	r4,r2,fp
   1a48c:	85800044 	addi	r22,r16,1
   1a490:	1f3ff404 	addi	fp,r3,-48
   1a494:	b021883a 	mov	r16,r22
   1a498:	af3ff82e 	bgeu	r21,fp,1a47c <__alt_data_end+0xfc01a47c>
   1a49c:	2021883a 	mov	r16,r4
   1a4a0:	203d9f0e 	bge	r4,zero,19b20 <__alt_data_end+0xfc019b20>
   1a4a4:	043fffc4 	movi	r16,-1
   1a4a8:	003d9d06 	br	19b20 <__alt_data_end+0xfc019b20>
   1a4ac:	8c401014 	ori	r17,r17,64
   1a4b0:	b0c00007 	ldb	r3,0(r22)
   1a4b4:	003d9906 	br	19b1c <__alt_data_end+0xfc019b1c>
   1a4b8:	d9002217 	ldw	r4,136(sp)
   1a4bc:	d8001d85 	stb	zero,118(sp)
   1a4c0:	20c00204 	addi	r3,r4,8
   1a4c4:	24c00017 	ldw	r19,0(r4)
   1a4c8:	25000117 	ldw	r20,4(r4)
   1a4cc:	8001e716 	blt	r16,zero,1ac6c <___vfiprintf_internal_r+0x12c4>
   1a4d0:	013fdfc4 	movi	r4,-129
   1a4d4:	9d04b03a 	or	r2,r19,r20
   1a4d8:	d8c02215 	stw	r3,136(sp)
   1a4dc:	8922703a 	and	r17,r17,r4
   1a4e0:	002b883a 	mov	r21,zero
   1a4e4:	103f2f1e 	bne	r2,zero,1a1a4 <__alt_data_end+0xfc01a1a4>
   1a4e8:	803e2f26 	beq	r16,zero,19da8 <__alt_data_end+0xfc019da8>
   1a4ec:	0027883a 	mov	r19,zero
   1a4f0:	9cc00c04 	addi	r19,r19,48
   1a4f4:	dcc019c5 	stb	r19,103(sp)
   1a4f8:	dd002817 	ldw	r20,160(sp)
   1a4fc:	ddc019c4 	addi	r23,sp,103
   1a500:	003e2c06 	br	19db4 <__alt_data_end+0xfc019db4>
   1a504:	9cc03fcc 	andi	r19,r19,255
   1a508:	b811883a 	mov	r8,r23
   1a50c:	9802571e 	bne	r19,zero,1ae6c <___vfiprintf_internal_r+0x14c4>
   1a510:	18005726 	beq	r3,zero,1a670 <___vfiprintf_internal_r+0xcc8>
   1a514:	04c00044 	movi	r19,1
   1a518:	d8c01005 	stb	r3,64(sp)
   1a51c:	d8001d85 	stb	zero,118(sp)
   1a520:	9829883a 	mov	r20,r19
   1a524:	ddc01004 	addi	r23,sp,64
   1a528:	003f0a06 	br	1a154 <__alt_data_end+0xfc01a154>
   1a52c:	d9402017 	ldw	r5,128(sp)
   1a530:	d9002117 	ldw	r4,132(sp)
   1a534:	d9801a04 	addi	r6,sp,104
   1a538:	da802a15 	stw	r10,168(sp)
   1a53c:	00198940 	call	19894 <__sprint_r.part.0>
   1a540:	da802a17 	ldw	r10,168(sp)
   1a544:	1000501e 	bne	r2,zero,1a688 <___vfiprintf_internal_r+0xce0>
   1a548:	d9801b17 	ldw	r6,108(sp)
   1a54c:	d8801c17 	ldw	r2,112(sp)
   1a550:	d811883a 	mov	r8,sp
   1a554:	31000044 	addi	r4,r6,1
   1a558:	003e3606 	br	19e34 <__alt_data_end+0xfc019e34>
   1a55c:	d9001b17 	ldw	r4,108(sp)
   1a560:	d8801c17 	ldw	r2,112(sp)
   1a564:	21400044 	addi	r5,r4,1
   1a568:	d9801d87 	ldb	r6,118(sp)
   1a56c:	303e5226 	beq	r6,zero,19eb8 <__alt_data_end+0xfc019eb8>
   1a570:	01800044 	movi	r6,1
   1a574:	d9001d84 	addi	r4,sp,118
   1a578:	1185883a 	add	r2,r2,r6
   1a57c:	41000015 	stw	r4,0(r8)
   1a580:	41800115 	stw	r6,4(r8)
   1a584:	d8801c15 	stw	r2,112(sp)
   1a588:	d9401b15 	stw	r5,108(sp)
   1a58c:	010001c4 	movi	r4,7
   1a590:	2140b00e 	bge	r4,r5,1a854 <___vfiprintf_internal_r+0xeac>
   1a594:	1000f61e 	bne	r2,zero,1a970 <___vfiprintf_internal_r+0xfc8>
   1a598:	3800b31e 	bne	r7,zero,1a868 <___vfiprintf_internal_r+0xec0>
   1a59c:	0009883a 	mov	r4,zero
   1a5a0:	300b883a 	mov	r5,r6
   1a5a4:	d811883a 	mov	r8,sp
   1a5a8:	01802004 	movi	r6,128
   1a5ac:	19be5226 	beq	r3,r6,19ef8 <__alt_data_end+0xfc019ef8>
   1a5b0:	8521c83a 	sub	r16,r16,r20
   1a5b4:	043e790e 	bge	zero,r16,19f9c <__alt_data_end+0xfc019f9c>
   1a5b8:	05400404 	movi	r21,16
   1a5bc:	ac01b00e 	bge	r21,r16,1ac80 <___vfiprintf_internal_r+0x12d8>
   1a5c0:	014000f4 	movhi	r5,3
   1a5c4:	296a7b04 	addi	r5,r5,-22036
   1a5c8:	d9402315 	stw	r5,140(sp)
   1a5cc:	070001c4 	movi	fp,7
   1a5d0:	00000506 	br	1a5e8 <___vfiprintf_internal_r+0xc40>
   1a5d4:	21400084 	addi	r5,r4,2
   1a5d8:	42000204 	addi	r8,r8,8
   1a5dc:	1809883a 	mov	r4,r3
   1a5e0:	843ffc04 	addi	r16,r16,-16
   1a5e4:	ac000d0e 	bge	r21,r16,1a61c <___vfiprintf_internal_r+0xc74>
   1a5e8:	10800404 	addi	r2,r2,16
   1a5ec:	20c00044 	addi	r3,r4,1
   1a5f0:	44800015 	stw	r18,0(r8)
   1a5f4:	45400115 	stw	r21,4(r8)
   1a5f8:	d8801c15 	stw	r2,112(sp)
   1a5fc:	d8c01b15 	stw	r3,108(sp)
   1a600:	e0fff40e 	bge	fp,r3,1a5d4 <__alt_data_end+0xfc01a5d4>
   1a604:	1000101e 	bne	r2,zero,1a648 <___vfiprintf_internal_r+0xca0>
   1a608:	843ffc04 	addi	r16,r16,-16
   1a60c:	01400044 	movi	r5,1
   1a610:	0009883a 	mov	r4,zero
   1a614:	d811883a 	mov	r8,sp
   1a618:	ac3ff316 	blt	r21,r16,1a5e8 <__alt_data_end+0xfc01a5e8>
   1a61c:	d8c02317 	ldw	r3,140(sp)
   1a620:	1405883a 	add	r2,r2,r16
   1a624:	44000115 	stw	r16,4(r8)
   1a628:	40c00015 	stw	r3,0(r8)
   1a62c:	d8801c15 	stw	r2,112(sp)
   1a630:	d9401b15 	stw	r5,108(sp)
   1a634:	00c001c4 	movi	r3,7
   1a638:	19401916 	blt	r3,r5,1a6a0 <___vfiprintf_internal_r+0xcf8>
   1a63c:	42000204 	addi	r8,r8,8
   1a640:	29400044 	addi	r5,r5,1
   1a644:	003e5506 	br	19f9c <__alt_data_end+0xfc019f9c>
   1a648:	d9402017 	ldw	r5,128(sp)
   1a64c:	d9002117 	ldw	r4,132(sp)
   1a650:	d9801a04 	addi	r6,sp,104
   1a654:	00198940 	call	19894 <__sprint_r.part.0>
   1a658:	10000b1e 	bne	r2,zero,1a688 <___vfiprintf_internal_r+0xce0>
   1a65c:	d9001b17 	ldw	r4,108(sp)
   1a660:	d8801c17 	ldw	r2,112(sp)
   1a664:	d811883a 	mov	r8,sp
   1a668:	21400044 	addi	r5,r4,1
   1a66c:	003fdc06 	br	1a5e0 <__alt_data_end+0xfc01a5e0>
   1a670:	d8801c17 	ldw	r2,112(sp)
   1a674:	10000426 	beq	r2,zero,1a688 <___vfiprintf_internal_r+0xce0>
   1a678:	d9402017 	ldw	r5,128(sp)
   1a67c:	d9002117 	ldw	r4,132(sp)
   1a680:	d9801a04 	addi	r6,sp,104
   1a684:	00198940 	call	19894 <__sprint_r.part.0>
   1a688:	d9402017 	ldw	r5,128(sp)
   1a68c:	2880030b 	ldhu	r2,12(r5)
   1a690:	1080100c 	andi	r2,r2,64
   1a694:	10014d1e 	bne	r2,zero,1abcc <___vfiprintf_internal_r+0x1224>
   1a698:	d8802417 	ldw	r2,144(sp)
   1a69c:	003d9706 	br	19cfc <__alt_data_end+0xfc019cfc>
   1a6a0:	1000d21e 	bne	r2,zero,1a9ec <___vfiprintf_internal_r+0x1044>
   1a6a4:	00c00044 	movi	r3,1
   1a6a8:	a005883a 	mov	r2,r20
   1a6ac:	ddc00015 	stw	r23,0(sp)
   1a6b0:	dd000115 	stw	r20,4(sp)
   1a6b4:	dd001c15 	stw	r20,112(sp)
   1a6b8:	d8c01b15 	stw	r3,108(sp)
   1a6bc:	d811883a 	mov	r8,sp
   1a6c0:	42000204 	addi	r8,r8,8
   1a6c4:	8c40010c 	andi	r17,r17,4
   1a6c8:	88004026 	beq	r17,zero,1a7cc <___vfiprintf_internal_r+0xe24>
   1a6cc:	d9002517 	ldw	r4,148(sp)
   1a6d0:	24e3c83a 	sub	r17,r4,r19
   1a6d4:	04403d0e 	bge	zero,r17,1a7cc <___vfiprintf_internal_r+0xe24>
   1a6d8:	04000404 	movi	r16,16
   1a6dc:	8441a90e 	bge	r16,r17,1ad84 <___vfiprintf_internal_r+0x13dc>
   1a6e0:	00c000f4 	movhi	r3,3
   1a6e4:	18ea7f04 	addi	r3,r3,-22020
   1a6e8:	d9001b17 	ldw	r4,108(sp)
   1a6ec:	d8c02315 	stw	r3,140(sp)
   1a6f0:	050001c4 	movi	r20,7
   1a6f4:	dd402117 	ldw	r21,132(sp)
   1a6f8:	ddc02017 	ldw	r23,128(sp)
   1a6fc:	00000506 	br	1a714 <___vfiprintf_internal_r+0xd6c>
   1a700:	21400084 	addi	r5,r4,2
   1a704:	42000204 	addi	r8,r8,8
   1a708:	1809883a 	mov	r4,r3
   1a70c:	8c7ffc04 	addi	r17,r17,-16
   1a710:	84400f0e 	bge	r16,r17,1a750 <___vfiprintf_internal_r+0xda8>
   1a714:	014000f4 	movhi	r5,3
   1a718:	10800404 	addi	r2,r2,16
   1a71c:	20c00044 	addi	r3,r4,1
   1a720:	296a7f04 	addi	r5,r5,-22020
   1a724:	41400015 	stw	r5,0(r8)
   1a728:	44000115 	stw	r16,4(r8)
   1a72c:	d8801c15 	stw	r2,112(sp)
   1a730:	d8c01b15 	stw	r3,108(sp)
   1a734:	a0fff20e 	bge	r20,r3,1a700 <__alt_data_end+0xfc01a700>
   1a738:	1000141e 	bne	r2,zero,1a78c <___vfiprintf_internal_r+0xde4>
   1a73c:	8c7ffc04 	addi	r17,r17,-16
   1a740:	01400044 	movi	r5,1
   1a744:	0009883a 	mov	r4,zero
   1a748:	d811883a 	mov	r8,sp
   1a74c:	847ff116 	blt	r16,r17,1a714 <__alt_data_end+0xfc01a714>
   1a750:	d8c02317 	ldw	r3,140(sp)
   1a754:	1445883a 	add	r2,r2,r17
   1a758:	44400115 	stw	r17,4(r8)
   1a75c:	40c00015 	stw	r3,0(r8)
   1a760:	d8801c15 	stw	r2,112(sp)
   1a764:	d9401b15 	stw	r5,108(sp)
   1a768:	00c001c4 	movi	r3,7
   1a76c:	1940170e 	bge	r3,r5,1a7cc <___vfiprintf_internal_r+0xe24>
   1a770:	1000101e 	bne	r2,zero,1a7b4 <___vfiprintf_internal_r+0xe0c>
   1a774:	d8802517 	ldw	r2,148(sp)
   1a778:	14c11616 	blt	r2,r19,1abd4 <___vfiprintf_internal_r+0x122c>
   1a77c:	d9002417 	ldw	r4,144(sp)
   1a780:	2089883a 	add	r4,r4,r2
   1a784:	d9002415 	stw	r4,144(sp)
   1a788:	003e1806 	br	19fec <__alt_data_end+0xfc019fec>
   1a78c:	d9801a04 	addi	r6,sp,104
   1a790:	b80b883a 	mov	r5,r23
   1a794:	a809883a 	mov	r4,r21
   1a798:	00198940 	call	19894 <__sprint_r.part.0>
   1a79c:	103fba1e 	bne	r2,zero,1a688 <__alt_data_end+0xfc01a688>
   1a7a0:	d9001b17 	ldw	r4,108(sp)
   1a7a4:	d8801c17 	ldw	r2,112(sp)
   1a7a8:	d811883a 	mov	r8,sp
   1a7ac:	21400044 	addi	r5,r4,1
   1a7b0:	003fd606 	br	1a70c <__alt_data_end+0xfc01a70c>
   1a7b4:	d9402017 	ldw	r5,128(sp)
   1a7b8:	d9002117 	ldw	r4,132(sp)
   1a7bc:	d9801a04 	addi	r6,sp,104
   1a7c0:	00198940 	call	19894 <__sprint_r.part.0>
   1a7c4:	103fb01e 	bne	r2,zero,1a688 <__alt_data_end+0xfc01a688>
   1a7c8:	d8801c17 	ldw	r2,112(sp)
   1a7cc:	d8c02517 	ldw	r3,148(sp)
   1a7d0:	1cc0010e 	bge	r3,r19,1a7d8 <___vfiprintf_internal_r+0xe30>
   1a7d4:	9807883a 	mov	r3,r19
   1a7d8:	d9002417 	ldw	r4,144(sp)
   1a7dc:	20c9883a 	add	r4,r4,r3
   1a7e0:	d9002415 	stw	r4,144(sp)
   1a7e4:	103e0126 	beq	r2,zero,19fec <__alt_data_end+0xfc019fec>
   1a7e8:	d9402017 	ldw	r5,128(sp)
   1a7ec:	d9002117 	ldw	r4,132(sp)
   1a7f0:	d9801a04 	addi	r6,sp,104
   1a7f4:	00198940 	call	19894 <__sprint_r.part.0>
   1a7f8:	103dfc26 	beq	r2,zero,19fec <__alt_data_end+0xfc019fec>
   1a7fc:	003fa206 	br	1a688 <__alt_data_end+0xfc01a688>
   1a800:	d9402017 	ldw	r5,128(sp)
   1a804:	d9002117 	ldw	r4,132(sp)
   1a808:	d9801a04 	addi	r6,sp,104
   1a80c:	d9c02b15 	stw	r7,172(sp)
   1a810:	00198940 	call	19894 <__sprint_r.part.0>
   1a814:	d9c02b17 	ldw	r7,172(sp)
   1a818:	103f9b1e 	bne	r2,zero,1a688 <__alt_data_end+0xfc01a688>
   1a81c:	d9001b17 	ldw	r4,108(sp)
   1a820:	d8801c17 	ldw	r2,112(sp)
   1a824:	d811883a 	mov	r8,sp
   1a828:	21800044 	addi	r6,r4,1
   1a82c:	003dbf06 	br	19f2c <__alt_data_end+0xfc019f2c>
   1a830:	1000d81e 	bne	r2,zero,1ab94 <___vfiprintf_internal_r+0x11ec>
   1a834:	d9001d87 	ldb	r4,118(sp)
   1a838:	20000a26 	beq	r4,zero,1a864 <___vfiprintf_internal_r+0xebc>
   1a83c:	00800044 	movi	r2,1
   1a840:	d9001d84 	addi	r4,sp,118
   1a844:	100b883a 	mov	r5,r2
   1a848:	d9000015 	stw	r4,0(sp)
   1a84c:	d8800115 	stw	r2,4(sp)
   1a850:	d811883a 	mov	r8,sp
   1a854:	2809883a 	mov	r4,r5
   1a858:	42000204 	addi	r8,r8,8
   1a85c:	29400044 	addi	r5,r5,1
   1a860:	003d9506 	br	19eb8 <__alt_data_end+0xfc019eb8>
   1a864:	3800fd26 	beq	r7,zero,1ac5c <___vfiprintf_internal_r+0x12b4>
   1a868:	00800084 	movi	r2,2
   1a86c:	d9001d04 	addi	r4,sp,116
   1a870:	d9000015 	stw	r4,0(sp)
   1a874:	d8800115 	stw	r2,4(sp)
   1a878:	01400044 	movi	r5,1
   1a87c:	d811883a 	mov	r8,sp
   1a880:	2809883a 	mov	r4,r5
   1a884:	42000204 	addi	r8,r8,8
   1a888:	29400044 	addi	r5,r5,1
   1a88c:	003f4606 	br	1a5a8 <__alt_data_end+0xfc01a5a8>
   1a890:	d8802517 	ldw	r2,148(sp)
   1a894:	14c0010e 	bge	r2,r19,1a89c <___vfiprintf_internal_r+0xef4>
   1a898:	9805883a 	mov	r2,r19
   1a89c:	d9402417 	ldw	r5,144(sp)
   1a8a0:	288b883a 	add	r5,r5,r2
   1a8a4:	d9402415 	stw	r5,144(sp)
   1a8a8:	003dd006 	br	19fec <__alt_data_end+0xfc019fec>
   1a8ac:	d8001d85 	stb	zero,118(sp)
   1a8b0:	80005d16 	blt	r16,zero,1aa28 <___vfiprintf_internal_r+0x1080>
   1a8b4:	00ffdfc4 	movi	r3,-129
   1a8b8:	9d04b03a 	or	r2,r19,r20
   1a8bc:	88e2703a 	and	r17,r17,r3
   1a8c0:	103d3726 	beq	r2,zero,19da0 <__alt_data_end+0xfc019da0>
   1a8c4:	002b883a 	mov	r21,zero
   1a8c8:	d9002617 	ldw	r4,152(sp)
   1a8cc:	ddc01a04 	addi	r23,sp,104
   1a8d0:	988003cc 	andi	r2,r19,15
   1a8d4:	a006973a 	slli	r3,r20,28
   1a8d8:	2085883a 	add	r2,r4,r2
   1a8dc:	9826d13a 	srli	r19,r19,4
   1a8e0:	10800003 	ldbu	r2,0(r2)
   1a8e4:	a028d13a 	srli	r20,r20,4
   1a8e8:	bdffffc4 	addi	r23,r23,-1
   1a8ec:	1ce6b03a 	or	r19,r3,r19
   1a8f0:	b8800005 	stb	r2,0(r23)
   1a8f4:	9d04b03a 	or	r2,r19,r20
   1a8f8:	103ff51e 	bne	r2,zero,1a8d0 <__alt_data_end+0xfc01a8d0>
   1a8fc:	d8801e17 	ldw	r2,120(sp)
   1a900:	15e9c83a 	sub	r20,r2,r23
   1a904:	003d2b06 	br	19db4 <__alt_data_end+0xfc019db4>
   1a908:	d9402017 	ldw	r5,128(sp)
   1a90c:	d9002117 	ldw	r4,132(sp)
   1a910:	d9801a04 	addi	r6,sp,104
   1a914:	00198940 	call	19894 <__sprint_r.part.0>
   1a918:	103f5b1e 	bne	r2,zero,1a688 <__alt_data_end+0xfc01a688>
   1a91c:	d8801c17 	ldw	r2,112(sp)
   1a920:	d811883a 	mov	r8,sp
   1a924:	003f6706 	br	1a6c4 <__alt_data_end+0xfc01a6c4>
   1a928:	d9402017 	ldw	r5,128(sp)
   1a92c:	d9002117 	ldw	r4,132(sp)
   1a930:	d9801a04 	addi	r6,sp,104
   1a934:	00198940 	call	19894 <__sprint_r.part.0>
   1a938:	103f531e 	bne	r2,zero,1a688 <__alt_data_end+0xfc01a688>
   1a93c:	d811883a 	mov	r8,sp
   1a940:	003cd906 	br	19ca8 <__alt_data_end+0xfc019ca8>
   1a944:	10803fcc 	andi	r2,r2,255
   1a948:	1080201c 	xori	r2,r2,128
   1a94c:	10bfe004 	addi	r2,r2,-128
   1a950:	00c00c04 	movi	r3,48
   1a954:	10ffe926 	beq	r2,r3,1a8fc <__alt_data_end+0xfc01a8fc>
   1a958:	b8ffffc5 	stb	r3,-1(r23)
   1a95c:	d8c01e17 	ldw	r3,120(sp)
   1a960:	b8bfffc4 	addi	r2,r23,-1
   1a964:	102f883a 	mov	r23,r2
   1a968:	18a9c83a 	sub	r20,r3,r2
   1a96c:	003d1106 	br	19db4 <__alt_data_end+0xfc019db4>
   1a970:	d9402017 	ldw	r5,128(sp)
   1a974:	d9002117 	ldw	r4,132(sp)
   1a978:	d9801a04 	addi	r6,sp,104
   1a97c:	d8c02a15 	stw	r3,168(sp)
   1a980:	d9c02b15 	stw	r7,172(sp)
   1a984:	00198940 	call	19894 <__sprint_r.part.0>
   1a988:	d8c02a17 	ldw	r3,168(sp)
   1a98c:	d9c02b17 	ldw	r7,172(sp)
   1a990:	103f3d1e 	bne	r2,zero,1a688 <__alt_data_end+0xfc01a688>
   1a994:	d9001b17 	ldw	r4,108(sp)
   1a998:	d8801c17 	ldw	r2,112(sp)
   1a99c:	d811883a 	mov	r8,sp
   1a9a0:	21400044 	addi	r5,r4,1
   1a9a4:	003d4406 	br	19eb8 <__alt_data_end+0xfc019eb8>
   1a9a8:	d9402017 	ldw	r5,128(sp)
   1a9ac:	d9002117 	ldw	r4,132(sp)
   1a9b0:	d9801a04 	addi	r6,sp,104
   1a9b4:	d8c02a15 	stw	r3,168(sp)
   1a9b8:	00198940 	call	19894 <__sprint_r.part.0>
   1a9bc:	d8c02a17 	ldw	r3,168(sp)
   1a9c0:	103f311e 	bne	r2,zero,1a688 <__alt_data_end+0xfc01a688>
   1a9c4:	d9001b17 	ldw	r4,108(sp)
   1a9c8:	d8801c17 	ldw	r2,112(sp)
   1a9cc:	d811883a 	mov	r8,sp
   1a9d0:	21400044 	addi	r5,r4,1
   1a9d4:	003ef406 	br	1a5a8 <__alt_data_end+0xfc01a5a8>
   1a9d8:	1000bd1e 	bne	r2,zero,1acd0 <___vfiprintf_internal_r+0x1328>
   1a9dc:	01400044 	movi	r5,1
   1a9e0:	0009883a 	mov	r4,zero
   1a9e4:	d811883a 	mov	r8,sp
   1a9e8:	003ef106 	br	1a5b0 <__alt_data_end+0xfc01a5b0>
   1a9ec:	d9402017 	ldw	r5,128(sp)
   1a9f0:	d9002117 	ldw	r4,132(sp)
   1a9f4:	d9801a04 	addi	r6,sp,104
   1a9f8:	00198940 	call	19894 <__sprint_r.part.0>
   1a9fc:	103f221e 	bne	r2,zero,1a688 <__alt_data_end+0xfc01a688>
   1aa00:	d9401b17 	ldw	r5,108(sp)
   1aa04:	d8801c17 	ldw	r2,112(sp)
   1aa08:	d811883a 	mov	r8,sp
   1aa0c:	29400044 	addi	r5,r5,1
   1aa10:	003d6206 	br	19f9c <__alt_data_end+0xfc019f9c>
   1aa14:	014000f4 	movhi	r5,3
   1aa18:	296a0b04 	addi	r5,r5,-22484
   1aa1c:	d9402615 	stw	r5,152(sp)
   1aa20:	d8c02215 	stw	r3,136(sp)
   1aa24:	1023883a 	mov	r17,r2
   1aa28:	9d04b03a 	or	r2,r19,r20
   1aa2c:	103fa51e 	bne	r2,zero,1a8c4 <__alt_data_end+0xfc01a8c4>
   1aa30:	002b883a 	mov	r21,zero
   1aa34:	00800084 	movi	r2,2
   1aa38:	003e4a06 	br	1a364 <__alt_data_end+0xfc01a364>
   1aa3c:	014000f4 	movhi	r5,3
   1aa40:	296a0b04 	addi	r5,r5,-22484
   1aa44:	002b883a 	mov	r21,zero
   1aa48:	d9402615 	stw	r5,152(sp)
   1aa4c:	003f9e06 	br	1a8c8 <__alt_data_end+0xfc01a8c8>
   1aa50:	d9402217 	ldw	r5,136(sp)
   1aa54:	d8001d85 	stb	zero,118(sp)
   1aa58:	0029883a 	mov	r20,zero
   1aa5c:	28800104 	addi	r2,r5,4
   1aa60:	2cc00017 	ldw	r19,0(r5)
   1aa64:	803e3a16 	blt	r16,zero,1a350 <__alt_data_end+0xfc01a350>
   1aa68:	00ffdfc4 	movi	r3,-129
   1aa6c:	d8802215 	stw	r2,136(sp)
   1aa70:	88e2703a 	and	r17,r17,r3
   1aa74:	002b883a 	mov	r21,zero
   1aa78:	983e9b26 	beq	r19,zero,1a4e8 <__alt_data_end+0xfc01a4e8>
   1aa7c:	00800244 	movi	r2,9
   1aa80:	14fdc936 	bltu	r2,r19,1a1a8 <__alt_data_end+0xfc01a1a8>
   1aa84:	003e9a06 	br	1a4f0 <__alt_data_end+0xfc01a4f0>
   1aa88:	00800c04 	movi	r2,48
   1aa8c:	d8c01d45 	stb	r3,117(sp)
   1aa90:	d8801d05 	stb	r2,116(sp)
   1aa94:	d8001d85 	stb	zero,118(sp)
   1aa98:	88c00094 	ori	r3,r17,2
   1aa9c:	80009c16 	blt	r16,zero,1ad10 <___vfiprintf_internal_r+0x1368>
   1aaa0:	00bfdfc4 	movi	r2,-129
   1aaa4:	88a2703a 	and	r17,r17,r2
   1aaa8:	8c400094 	ori	r17,r17,2
   1aaac:	002b883a 	mov	r21,zero
   1aab0:	003f8506 	br	1a8c8 <__alt_data_end+0xfc01a8c8>
   1aab4:	b029883a 	mov	r20,r22
   1aab8:	003c0b06 	br	19ae8 <__alt_data_end+0xfc019ae8>
   1aabc:	04e7c83a 	sub	r19,zero,r19
   1aac0:	05400b44 	movi	r21,45
   1aac4:	9804c03a 	cmpne	r2,r19,zero
   1aac8:	0529c83a 	sub	r20,zero,r20
   1aacc:	dd401d85 	stb	r21,118(sp)
   1aad0:	a0a9c83a 	sub	r20,r20,r2
   1aad4:	80009716 	blt	r16,zero,1ad34 <___vfiprintf_internal_r+0x138c>
   1aad8:	00bfdfc4 	movi	r2,-129
   1aadc:	88a2703a 	and	r17,r17,r2
   1aae0:	003db006 	br	1a1a4 <__alt_data_end+0xfc01a1a4>
   1aae4:	b0c00007 	ldb	r3,0(r22)
   1aae8:	003c0c06 	br	19b1c <__alt_data_end+0xfc019b1c>
   1aaec:	8880100c 	andi	r2,r17,64
   1aaf0:	d8001d85 	stb	zero,118(sp)
   1aaf4:	1000461e 	bne	r2,zero,1ac10 <___vfiprintf_internal_r+0x1268>
   1aaf8:	d9002217 	ldw	r4,136(sp)
   1aafc:	0029883a 	mov	r20,zero
   1ab00:	20800104 	addi	r2,r4,4
   1ab04:	24c00017 	ldw	r19,0(r4)
   1ab08:	803df80e 	bge	r16,zero,1a2ec <__alt_data_end+0xfc01a2ec>
   1ab0c:	9d06b03a 	or	r3,r19,r20
   1ab10:	d8802215 	stw	r2,136(sp)
   1ab14:	183d5e1e 	bne	r3,zero,1a090 <__alt_data_end+0xfc01a090>
   1ab18:	002b883a 	mov	r21,zero
   1ab1c:	0005883a 	mov	r2,zero
   1ab20:	003e1006 	br	1a364 <__alt_data_end+0xfc01a364>
   1ab24:	8880040c 	andi	r2,r17,16
   1ab28:	1000321e 	bne	r2,zero,1abf4 <___vfiprintf_internal_r+0x124c>
   1ab2c:	8c40100c 	andi	r17,r17,64
   1ab30:	88008d26 	beq	r17,zero,1ad68 <___vfiprintf_internal_r+0x13c0>
   1ab34:	d9402217 	ldw	r5,136(sp)
   1ab38:	d8c02417 	ldw	r3,144(sp)
   1ab3c:	28800017 	ldw	r2,0(r5)
   1ab40:	29400104 	addi	r5,r5,4
   1ab44:	d9402215 	stw	r5,136(sp)
   1ab48:	10c0000d 	sth	r3,0(r2)
   1ab4c:	003bca06 	br	19a78 <__alt_data_end+0xfc019a78>
   1ab50:	8880100c 	andi	r2,r17,64
   1ab54:	10003a26 	beq	r2,zero,1ac40 <___vfiprintf_internal_r+0x1298>
   1ab58:	d8802217 	ldw	r2,136(sp)
   1ab5c:	14c0000f 	ldh	r19,0(r2)
   1ab60:	10800104 	addi	r2,r2,4
   1ab64:	d8802215 	stw	r2,136(sp)
   1ab68:	9829d7fa 	srai	r20,r19,31
   1ab6c:	a005883a 	mov	r2,r20
   1ab70:	003d8506 	br	1a188 <__alt_data_end+0xfc01a188>
   1ab74:	8880100c 	andi	r2,r17,64
   1ab78:	10002b26 	beq	r2,zero,1ac28 <___vfiprintf_internal_r+0x1280>
   1ab7c:	d8802217 	ldw	r2,136(sp)
   1ab80:	0029883a 	mov	r20,zero
   1ab84:	14c0000b 	ldhu	r19,0(r2)
   1ab88:	10800104 	addi	r2,r2,4
   1ab8c:	d8802215 	stw	r2,136(sp)
   1ab90:	003d5d06 	br	1a108 <__alt_data_end+0xfc01a108>
   1ab94:	d9402017 	ldw	r5,128(sp)
   1ab98:	d9002117 	ldw	r4,132(sp)
   1ab9c:	d9801a04 	addi	r6,sp,104
   1aba0:	d8c02a15 	stw	r3,168(sp)
   1aba4:	d9c02b15 	stw	r7,172(sp)
   1aba8:	00198940 	call	19894 <__sprint_r.part.0>
   1abac:	d8c02a17 	ldw	r3,168(sp)
   1abb0:	d9c02b17 	ldw	r7,172(sp)
   1abb4:	103eb41e 	bne	r2,zero,1a688 <__alt_data_end+0xfc01a688>
   1abb8:	d9001b17 	ldw	r4,108(sp)
   1abbc:	d8801c17 	ldw	r2,112(sp)
   1abc0:	d811883a 	mov	r8,sp
   1abc4:	21400044 	addi	r5,r4,1
   1abc8:	003e6706 	br	1a568 <__alt_data_end+0xfc01a568>
   1abcc:	00bfffc4 	movi	r2,-1
   1abd0:	003c4a06 	br	19cfc <__alt_data_end+0xfc019cfc>
   1abd4:	9805883a 	mov	r2,r19
   1abd8:	003ee806 	br	1a77c <__alt_data_end+0xfc01a77c>
   1abdc:	d8c02217 	ldw	r3,136(sp)
   1abe0:	0029883a 	mov	r20,zero
   1abe4:	18800104 	addi	r2,r3,4
   1abe8:	1cc0000b 	ldhu	r19,0(r3)
   1abec:	803f9e0e 	bge	r16,zero,1aa68 <__alt_data_end+0xfc01aa68>
   1abf0:	003dd706 	br	1a350 <__alt_data_end+0xfc01a350>
   1abf4:	d8c02217 	ldw	r3,136(sp)
   1abf8:	d9002417 	ldw	r4,144(sp)
   1abfc:	18800017 	ldw	r2,0(r3)
   1ac00:	18c00104 	addi	r3,r3,4
   1ac04:	d8c02215 	stw	r3,136(sp)
   1ac08:	11000015 	stw	r4,0(r2)
   1ac0c:	003b9a06 	br	19a78 <__alt_data_end+0xfc019a78>
   1ac10:	d8c02217 	ldw	r3,136(sp)
   1ac14:	0029883a 	mov	r20,zero
   1ac18:	18800104 	addi	r2,r3,4
   1ac1c:	1cc0000b 	ldhu	r19,0(r3)
   1ac20:	803db20e 	bge	r16,zero,1a2ec <__alt_data_end+0xfc01a2ec>
   1ac24:	003fb906 	br	1ab0c <__alt_data_end+0xfc01ab0c>
   1ac28:	d9002217 	ldw	r4,136(sp)
   1ac2c:	0029883a 	mov	r20,zero
   1ac30:	24c00017 	ldw	r19,0(r4)
   1ac34:	21000104 	addi	r4,r4,4
   1ac38:	d9002215 	stw	r4,136(sp)
   1ac3c:	003d3206 	br	1a108 <__alt_data_end+0xfc01a108>
   1ac40:	d8c02217 	ldw	r3,136(sp)
   1ac44:	1cc00017 	ldw	r19,0(r3)
   1ac48:	18c00104 	addi	r3,r3,4
   1ac4c:	d8c02215 	stw	r3,136(sp)
   1ac50:	9829d7fa 	srai	r20,r19,31
   1ac54:	a005883a 	mov	r2,r20
   1ac58:	003d4b06 	br	1a188 <__alt_data_end+0xfc01a188>
   1ac5c:	0009883a 	mov	r4,zero
   1ac60:	01400044 	movi	r5,1
   1ac64:	d811883a 	mov	r8,sp
   1ac68:	003e4f06 	br	1a5a8 <__alt_data_end+0xfc01a5a8>
   1ac6c:	d8c02215 	stw	r3,136(sp)
   1ac70:	002b883a 	mov	r21,zero
   1ac74:	003db806 	br	1a358 <__alt_data_end+0xfc01a358>
   1ac78:	d811883a 	mov	r8,sp
   1ac7c:	003e9606 	br	1a6d8 <__alt_data_end+0xfc01a6d8>
   1ac80:	010000f4 	movhi	r4,3
   1ac84:	212a7b04 	addi	r4,r4,-22036
   1ac88:	d9002315 	stw	r4,140(sp)
   1ac8c:	003e6306 	br	1a61c <__alt_data_end+0xfc01a61c>
   1ac90:	b0c00043 	ldbu	r3,1(r22)
   1ac94:	8c400814 	ori	r17,r17,32
   1ac98:	b5800044 	addi	r22,r22,1
   1ac9c:	18c03fcc 	andi	r3,r3,255
   1aca0:	18c0201c 	xori	r3,r3,128
   1aca4:	18ffe004 	addi	r3,r3,-128
   1aca8:	003b9c06 	br	19b1c <__alt_data_end+0xfc019b1c>
   1acac:	b809883a 	mov	r4,r23
   1acb0:	da002a15 	stw	r8,168(sp)
   1acb4:	000f3280 	call	f328 <strlen>
   1acb8:	1029883a 	mov	r20,r2
   1acbc:	dd401d83 	ldbu	r21,118(sp)
   1acc0:	df002215 	stw	fp,136(sp)
   1acc4:	0021883a 	mov	r16,zero
   1acc8:	da002a17 	ldw	r8,168(sp)
   1accc:	003c3906 	br	19db4 <__alt_data_end+0xfc019db4>
   1acd0:	d9402017 	ldw	r5,128(sp)
   1acd4:	d9002117 	ldw	r4,132(sp)
   1acd8:	d9801a04 	addi	r6,sp,104
   1acdc:	00198940 	call	19894 <__sprint_r.part.0>
   1ace0:	103e691e 	bne	r2,zero,1a688 <__alt_data_end+0xfc01a688>
   1ace4:	d9001b17 	ldw	r4,108(sp)
   1ace8:	d8801c17 	ldw	r2,112(sp)
   1acec:	d811883a 	mov	r8,sp
   1acf0:	21400044 	addi	r5,r4,1
   1acf4:	003e2e06 	br	1a5b0 <__alt_data_end+0xfc01a5b0>
   1acf8:	010000f4 	movhi	r4,3
   1acfc:	212a7f04 	addi	r4,r4,-22020
   1ad00:	d9002315 	stw	r4,140(sp)
   1ad04:	d9001b17 	ldw	r4,108(sp)
   1ad08:	21000044 	addi	r4,r4,1
   1ad0c:	003c5e06 	br	19e88 <__alt_data_end+0xfc019e88>
   1ad10:	002b883a 	mov	r21,zero
   1ad14:	00800084 	movi	r2,2
   1ad18:	10803fcc 	andi	r2,r2,255
   1ad1c:	01000044 	movi	r4,1
   1ad20:	11002b26 	beq	r2,r4,1add0 <___vfiprintf_internal_r+0x1428>
   1ad24:	01000084 	movi	r4,2
   1ad28:	11002b1e 	bne	r2,r4,1add8 <___vfiprintf_internal_r+0x1430>
   1ad2c:	1823883a 	mov	r17,r3
   1ad30:	003ee506 	br	1a8c8 <__alt_data_end+0xfc01a8c8>
   1ad34:	8807883a 	mov	r3,r17
   1ad38:	00800044 	movi	r2,1
   1ad3c:	003ff606 	br	1ad18 <__alt_data_end+0xfc01ad18>
   1ad40:	00800184 	movi	r2,6
   1ad44:	1400012e 	bgeu	r2,r16,1ad4c <___vfiprintf_internal_r+0x13a4>
   1ad48:	1021883a 	mov	r16,r2
   1ad4c:	8029883a 	mov	r20,r16
   1ad50:	8027883a 	mov	r19,r16
   1ad54:	80002216 	blt	r16,zero,1ade0 <___vfiprintf_internal_r+0x1438>
   1ad58:	05c000f4 	movhi	r23,3
   1ad5c:	df002215 	stw	fp,136(sp)
   1ad60:	bdea1004 	addi	r23,r23,-22464
   1ad64:	003cfb06 	br	1a154 <__alt_data_end+0xfc01a154>
   1ad68:	d9002217 	ldw	r4,136(sp)
   1ad6c:	d9402417 	ldw	r5,144(sp)
   1ad70:	20800017 	ldw	r2,0(r4)
   1ad74:	21000104 	addi	r4,r4,4
   1ad78:	d9002215 	stw	r4,136(sp)
   1ad7c:	11400015 	stw	r5,0(r2)
   1ad80:	003b3d06 	br	19a78 <__alt_data_end+0xfc019a78>
   1ad84:	014000f4 	movhi	r5,3
   1ad88:	296a7f04 	addi	r5,r5,-22020
   1ad8c:	d9402315 	stw	r5,140(sp)
   1ad90:	d9401b17 	ldw	r5,108(sp)
   1ad94:	29400044 	addi	r5,r5,1
   1ad98:	003e6d06 	br	1a750 <__alt_data_end+0xfc01a750>
   1ad9c:	8029883a 	mov	r20,r16
   1ada0:	dd401d83 	ldbu	r21,118(sp)
   1ada4:	df002215 	stw	fp,136(sp)
   1ada8:	0021883a 	mov	r16,zero
   1adac:	003c0106 	br	19db4 <__alt_data_end+0xfc019db4>
   1adb0:	00c000f4 	movhi	r3,3
   1adb4:	18ea7b04 	addi	r3,r3,-22036
   1adb8:	d8c02315 	stw	r3,140(sp)
   1adbc:	280d883a 	mov	r6,r5
   1adc0:	003c6906 	br	19f68 <__alt_data_end+0xfc019f68>
   1adc4:	802d883a 	mov	r22,r16
   1adc8:	0021883a 	mov	r16,zero
   1adcc:	003b5406 	br	19b20 <__alt_data_end+0xfc019b20>
   1add0:	1823883a 	mov	r17,r3
   1add4:	003cf306 	br	1a1a4 <__alt_data_end+0xfc01a1a4>
   1add8:	1823883a 	mov	r17,r3
   1addc:	003cad06 	br	1a094 <__alt_data_end+0xfc01a094>
   1ade0:	0027883a 	mov	r19,zero
   1ade4:	003fdc06 	br	1ad58 <__alt_data_end+0xfc01ad58>
   1ade8:	d9402217 	ldw	r5,136(sp)
   1adec:	8005883a 	mov	r2,r16
   1adf0:	b0c00043 	ldbu	r3,1(r22)
   1adf4:	2c000017 	ldw	r16,0(r5)
   1adf8:	29000104 	addi	r4,r5,4
   1adfc:	d9002215 	stw	r4,136(sp)
   1ae00:	102d883a 	mov	r22,r2
   1ae04:	803fa50e 	bge	r16,zero,1ac9c <__alt_data_end+0xfc01ac9c>
   1ae08:	18c03fcc 	andi	r3,r3,255
   1ae0c:	18c0201c 	xori	r3,r3,128
   1ae10:	043fffc4 	movi	r16,-1
   1ae14:	18ffe004 	addi	r3,r3,-128
   1ae18:	003b4006 	br	19b1c <__alt_data_end+0xfc019b1c>
   1ae1c:	d9402303 	ldbu	r5,140(sp)
   1ae20:	d9401d85 	stb	r5,118(sp)
   1ae24:	003cae06 	br	1a0e0 <__alt_data_end+0xfc01a0e0>
   1ae28:	d8c02303 	ldbu	r3,140(sp)
   1ae2c:	d8c01d85 	stb	r3,118(sp)
   1ae30:	003d1406 	br	1a284 <__alt_data_end+0xfc01a284>
   1ae34:	d8c02303 	ldbu	r3,140(sp)
   1ae38:	d8c01d85 	stb	r3,118(sp)
   1ae3c:	003cca06 	br	1a168 <__alt_data_end+0xfc01a168>
   1ae40:	8880004c 	andi	r2,r17,1
   1ae44:	002b883a 	mov	r21,zero
   1ae48:	10000526 	beq	r2,zero,1ae60 <___vfiprintf_internal_r+0x14b8>
   1ae4c:	00800c04 	movi	r2,48
   1ae50:	d88019c5 	stb	r2,103(sp)
   1ae54:	dd002817 	ldw	r20,160(sp)
   1ae58:	ddc019c4 	addi	r23,sp,103
   1ae5c:	003bd506 	br	19db4 <__alt_data_end+0xfc019db4>
   1ae60:	0029883a 	mov	r20,zero
   1ae64:	ddc01a04 	addi	r23,sp,104
   1ae68:	003bd206 	br	19db4 <__alt_data_end+0xfc019db4>
   1ae6c:	d9002303 	ldbu	r4,140(sp)
   1ae70:	d9001d85 	stb	r4,118(sp)
   1ae74:	003da606 	br	1a510 <__alt_data_end+0xfc01a510>
   1ae78:	d8c02303 	ldbu	r3,140(sp)
   1ae7c:	d8c01d85 	stb	r3,118(sp)
   1ae80:	003c7606 	br	1a05c <__alt_data_end+0xfc01a05c>
   1ae84:	d8c02303 	ldbu	r3,140(sp)
   1ae88:	d8c01d85 	stb	r3,118(sp)
   1ae8c:	003c6506 	br	1a024 <__alt_data_end+0xfc01a024>
   1ae90:	d9002303 	ldbu	r4,140(sp)
   1ae94:	d9001d85 	stb	r4,118(sp)
   1ae98:	003d3d06 	br	1a390 <__alt_data_end+0xfc01a390>
   1ae9c:	d8c02303 	ldbu	r3,140(sp)
   1aea0:	d8c01d85 	stb	r3,118(sp)
   1aea4:	003d1d06 	br	1a31c <__alt_data_end+0xfc01a31c>
   1aea8:	d8c02303 	ldbu	r3,140(sp)
   1aeac:	d8c01d85 	stb	r3,118(sp)
   1aeb0:	003d0306 	br	1a2c0 <__alt_data_end+0xfc01a2c0>

0001aeb4 <__vfiprintf_internal>:
   1aeb4:	008000f4 	movhi	r2,3
   1aeb8:	10b70504 	addi	r2,r2,-9196
   1aebc:	300f883a 	mov	r7,r6
   1aec0:	280d883a 	mov	r6,r5
   1aec4:	200b883a 	mov	r5,r4
   1aec8:	11000017 	ldw	r4,0(r2)
   1aecc:	00199a81 	jmpi	199a8 <___vfiprintf_internal_r>

0001aed0 <__sbprintf>:
   1aed0:	2880030b 	ldhu	r2,12(r5)
   1aed4:	2ac01917 	ldw	r11,100(r5)
   1aed8:	2a80038b 	ldhu	r10,14(r5)
   1aedc:	2a400717 	ldw	r9,28(r5)
   1aee0:	2a000917 	ldw	r8,36(r5)
   1aee4:	defee204 	addi	sp,sp,-1144
   1aee8:	00c10004 	movi	r3,1024
   1aeec:	dc011a15 	stw	r16,1128(sp)
   1aef0:	10bfff4c 	andi	r2,r2,65533
   1aef4:	2821883a 	mov	r16,r5
   1aef8:	d8cb883a 	add	r5,sp,r3
   1aefc:	dc811c15 	stw	r18,1136(sp)
   1af00:	dc411b15 	stw	r17,1132(sp)
   1af04:	dfc11d15 	stw	ra,1140(sp)
   1af08:	2025883a 	mov	r18,r4
   1af0c:	d881030d 	sth	r2,1036(sp)
   1af10:	dac11915 	stw	r11,1124(sp)
   1af14:	da81038d 	sth	r10,1038(sp)
   1af18:	da410715 	stw	r9,1052(sp)
   1af1c:	da010915 	stw	r8,1060(sp)
   1af20:	dec10015 	stw	sp,1024(sp)
   1af24:	dec10415 	stw	sp,1040(sp)
   1af28:	d8c10215 	stw	r3,1032(sp)
   1af2c:	d8c10515 	stw	r3,1044(sp)
   1af30:	d8010615 	stw	zero,1048(sp)
   1af34:	00199a80 	call	199a8 <___vfiprintf_internal_r>
   1af38:	1023883a 	mov	r17,r2
   1af3c:	10000416 	blt	r2,zero,1af50 <__sbprintf+0x80>
   1af40:	d9410004 	addi	r5,sp,1024
   1af44:	9009883a 	mov	r4,r18
   1af48:	00156580 	call	15658 <_fflush_r>
   1af4c:	10000d1e 	bne	r2,zero,1af84 <__sbprintf+0xb4>
   1af50:	d881030b 	ldhu	r2,1036(sp)
   1af54:	1080100c 	andi	r2,r2,64
   1af58:	10000326 	beq	r2,zero,1af68 <__sbprintf+0x98>
   1af5c:	8080030b 	ldhu	r2,12(r16)
   1af60:	10801014 	ori	r2,r2,64
   1af64:	8080030d 	sth	r2,12(r16)
   1af68:	8805883a 	mov	r2,r17
   1af6c:	dfc11d17 	ldw	ra,1140(sp)
   1af70:	dc811c17 	ldw	r18,1136(sp)
   1af74:	dc411b17 	ldw	r17,1132(sp)
   1af78:	dc011a17 	ldw	r16,1128(sp)
   1af7c:	dec11e04 	addi	sp,sp,1144
   1af80:	f800283a 	ret
   1af84:	047fffc4 	movi	r17,-1
   1af88:	003ff106 	br	1af50 <__alt_data_end+0xfc01af50>

0001af8c <__swbuf_r>:
   1af8c:	defffb04 	addi	sp,sp,-20
   1af90:	dcc00315 	stw	r19,12(sp)
   1af94:	dc800215 	stw	r18,8(sp)
   1af98:	dc000015 	stw	r16,0(sp)
   1af9c:	dfc00415 	stw	ra,16(sp)
   1afa0:	dc400115 	stw	r17,4(sp)
   1afa4:	2025883a 	mov	r18,r4
   1afa8:	2827883a 	mov	r19,r5
   1afac:	3021883a 	mov	r16,r6
   1afb0:	20000226 	beq	r4,zero,1afbc <__swbuf_r+0x30>
   1afb4:	20800e17 	ldw	r2,56(r4)
   1afb8:	10004226 	beq	r2,zero,1b0c4 <__swbuf_r+0x138>
   1afbc:	80800617 	ldw	r2,24(r16)
   1afc0:	8100030b 	ldhu	r4,12(r16)
   1afc4:	80800215 	stw	r2,8(r16)
   1afc8:	2080020c 	andi	r2,r4,8
   1afcc:	10003626 	beq	r2,zero,1b0a8 <__swbuf_r+0x11c>
   1afd0:	80c00417 	ldw	r3,16(r16)
   1afd4:	18003426 	beq	r3,zero,1b0a8 <__swbuf_r+0x11c>
   1afd8:	2088000c 	andi	r2,r4,8192
   1afdc:	9c403fcc 	andi	r17,r19,255
   1afe0:	10001a26 	beq	r2,zero,1b04c <__swbuf_r+0xc0>
   1afe4:	80800017 	ldw	r2,0(r16)
   1afe8:	81000517 	ldw	r4,20(r16)
   1afec:	10c7c83a 	sub	r3,r2,r3
   1aff0:	1900200e 	bge	r3,r4,1b074 <__swbuf_r+0xe8>
   1aff4:	18c00044 	addi	r3,r3,1
   1aff8:	81000217 	ldw	r4,8(r16)
   1affc:	11400044 	addi	r5,r2,1
   1b000:	81400015 	stw	r5,0(r16)
   1b004:	213fffc4 	addi	r4,r4,-1
   1b008:	81000215 	stw	r4,8(r16)
   1b00c:	14c00005 	stb	r19,0(r2)
   1b010:	80800517 	ldw	r2,20(r16)
   1b014:	10c01e26 	beq	r2,r3,1b090 <__swbuf_r+0x104>
   1b018:	8080030b 	ldhu	r2,12(r16)
   1b01c:	1080004c 	andi	r2,r2,1
   1b020:	10000226 	beq	r2,zero,1b02c <__swbuf_r+0xa0>
   1b024:	00800284 	movi	r2,10
   1b028:	88801926 	beq	r17,r2,1b090 <__swbuf_r+0x104>
   1b02c:	8805883a 	mov	r2,r17
   1b030:	dfc00417 	ldw	ra,16(sp)
   1b034:	dcc00317 	ldw	r19,12(sp)
   1b038:	dc800217 	ldw	r18,8(sp)
   1b03c:	dc400117 	ldw	r17,4(sp)
   1b040:	dc000017 	ldw	r16,0(sp)
   1b044:	dec00504 	addi	sp,sp,20
   1b048:	f800283a 	ret
   1b04c:	81401917 	ldw	r5,100(r16)
   1b050:	00b7ffc4 	movi	r2,-8193
   1b054:	21080014 	ori	r4,r4,8192
   1b058:	2884703a 	and	r2,r5,r2
   1b05c:	80801915 	stw	r2,100(r16)
   1b060:	80800017 	ldw	r2,0(r16)
   1b064:	8100030d 	sth	r4,12(r16)
   1b068:	81000517 	ldw	r4,20(r16)
   1b06c:	10c7c83a 	sub	r3,r2,r3
   1b070:	193fe016 	blt	r3,r4,1aff4 <__alt_data_end+0xfc01aff4>
   1b074:	800b883a 	mov	r5,r16
   1b078:	9009883a 	mov	r4,r18
   1b07c:	00156580 	call	15658 <_fflush_r>
   1b080:	1000071e 	bne	r2,zero,1b0a0 <__swbuf_r+0x114>
   1b084:	80800017 	ldw	r2,0(r16)
   1b088:	00c00044 	movi	r3,1
   1b08c:	003fda06 	br	1aff8 <__alt_data_end+0xfc01aff8>
   1b090:	800b883a 	mov	r5,r16
   1b094:	9009883a 	mov	r4,r18
   1b098:	00156580 	call	15658 <_fflush_r>
   1b09c:	103fe326 	beq	r2,zero,1b02c <__alt_data_end+0xfc01b02c>
   1b0a0:	00bfffc4 	movi	r2,-1
   1b0a4:	003fe206 	br	1b030 <__alt_data_end+0xfc01b030>
   1b0a8:	800b883a 	mov	r5,r16
   1b0ac:	9009883a 	mov	r4,r18
   1b0b0:	0013a380 	call	13a38 <__swsetup_r>
   1b0b4:	103ffa1e 	bne	r2,zero,1b0a0 <__alt_data_end+0xfc01b0a0>
   1b0b8:	8100030b 	ldhu	r4,12(r16)
   1b0bc:	80c00417 	ldw	r3,16(r16)
   1b0c0:	003fc506 	br	1afd8 <__alt_data_end+0xfc01afd8>
   1b0c4:	0015a440 	call	15a44 <__sinit>
   1b0c8:	003fbc06 	br	1afbc <__alt_data_end+0xfc01afbc>

0001b0cc <__swbuf>:
   1b0cc:	008000f4 	movhi	r2,3
   1b0d0:	10b70504 	addi	r2,r2,-9196
   1b0d4:	280d883a 	mov	r6,r5
   1b0d8:	200b883a 	mov	r5,r4
   1b0dc:	11000017 	ldw	r4,0(r2)
   1b0e0:	001af8c1 	jmpi	1af8c <__swbuf_r>

0001b0e4 <_write_r>:
   1b0e4:	defffd04 	addi	sp,sp,-12
   1b0e8:	2805883a 	mov	r2,r5
   1b0ec:	dc000015 	stw	r16,0(sp)
   1b0f0:	040000f4 	movhi	r16,3
   1b0f4:	dc400115 	stw	r17,4(sp)
   1b0f8:	300b883a 	mov	r5,r6
   1b0fc:	84039b04 	addi	r16,r16,3692
   1b100:	2023883a 	mov	r17,r4
   1b104:	380d883a 	mov	r6,r7
   1b108:	1009883a 	mov	r4,r2
   1b10c:	dfc00215 	stw	ra,8(sp)
   1b110:	80000015 	stw	zero,0(r16)
   1b114:	001f8100 	call	1f810 <write>
   1b118:	00ffffc4 	movi	r3,-1
   1b11c:	10c00526 	beq	r2,r3,1b134 <_write_r+0x50>
   1b120:	dfc00217 	ldw	ra,8(sp)
   1b124:	dc400117 	ldw	r17,4(sp)
   1b128:	dc000017 	ldw	r16,0(sp)
   1b12c:	dec00304 	addi	sp,sp,12
   1b130:	f800283a 	ret
   1b134:	80c00017 	ldw	r3,0(r16)
   1b138:	183ff926 	beq	r3,zero,1b120 <__alt_data_end+0xfc01b120>
   1b13c:	88c00015 	stw	r3,0(r17)
   1b140:	003ff706 	br	1b120 <__alt_data_end+0xfc01b120>

0001b144 <_close_r>:
   1b144:	defffd04 	addi	sp,sp,-12
   1b148:	dc000015 	stw	r16,0(sp)
   1b14c:	040000f4 	movhi	r16,3
   1b150:	dc400115 	stw	r17,4(sp)
   1b154:	84039b04 	addi	r16,r16,3692
   1b158:	2023883a 	mov	r17,r4
   1b15c:	2809883a 	mov	r4,r5
   1b160:	dfc00215 	stw	ra,8(sp)
   1b164:	80000015 	stw	zero,0(r16)
   1b168:	001ed140 	call	1ed14 <close>
   1b16c:	00ffffc4 	movi	r3,-1
   1b170:	10c00526 	beq	r2,r3,1b188 <_close_r+0x44>
   1b174:	dfc00217 	ldw	ra,8(sp)
   1b178:	dc400117 	ldw	r17,4(sp)
   1b17c:	dc000017 	ldw	r16,0(sp)
   1b180:	dec00304 	addi	sp,sp,12
   1b184:	f800283a 	ret
   1b188:	80c00017 	ldw	r3,0(r16)
   1b18c:	183ff926 	beq	r3,zero,1b174 <__alt_data_end+0xfc01b174>
   1b190:	88c00015 	stw	r3,0(r17)
   1b194:	003ff706 	br	1b174 <__alt_data_end+0xfc01b174>

0001b198 <_calloc_r>:
   1b198:	defffe04 	addi	sp,sp,-8
   1b19c:	2805883a 	mov	r2,r5
   1b1a0:	dc000015 	stw	r16,0(sp)
   1b1a4:	300b883a 	mov	r5,r6
   1b1a8:	2021883a 	mov	r16,r4
   1b1ac:	1009883a 	mov	r4,r2
   1b1b0:	dfc00115 	stw	ra,4(sp)
   1b1b4:	000ccac0 	call	ccac <__mulsi3>
   1b1b8:	100b883a 	mov	r5,r2
   1b1bc:	8009883a 	mov	r4,r16
   1b1c0:	000e2540 	call	e254 <_malloc_r>
   1b1c4:	10002926 	beq	r2,zero,1b26c <_calloc_r+0xd4>
   1b1c8:	11bfff17 	ldw	r6,-4(r2)
   1b1cc:	1021883a 	mov	r16,r2
   1b1d0:	00bfff04 	movi	r2,-4
   1b1d4:	308c703a 	and	r6,r6,r2
   1b1d8:	00c00904 	movi	r3,36
   1b1dc:	308d883a 	add	r6,r6,r2
   1b1e0:	19801636 	bltu	r3,r6,1b23c <_calloc_r+0xa4>
   1b1e4:	008004c4 	movi	r2,19
   1b1e8:	11800b2e 	bgeu	r2,r6,1b218 <_calloc_r+0x80>
   1b1ec:	80000015 	stw	zero,0(r16)
   1b1f0:	80000115 	stw	zero,4(r16)
   1b1f4:	008006c4 	movi	r2,27
   1b1f8:	11801a2e 	bgeu	r2,r6,1b264 <_calloc_r+0xcc>
   1b1fc:	80000215 	stw	zero,8(r16)
   1b200:	80000315 	stw	zero,12(r16)
   1b204:	30c0151e 	bne	r6,r3,1b25c <_calloc_r+0xc4>
   1b208:	80000415 	stw	zero,16(r16)
   1b20c:	80800604 	addi	r2,r16,24
   1b210:	80000515 	stw	zero,20(r16)
   1b214:	00000106 	br	1b21c <_calloc_r+0x84>
   1b218:	8005883a 	mov	r2,r16
   1b21c:	10000015 	stw	zero,0(r2)
   1b220:	10000115 	stw	zero,4(r2)
   1b224:	10000215 	stw	zero,8(r2)
   1b228:	8005883a 	mov	r2,r16
   1b22c:	dfc00117 	ldw	ra,4(sp)
   1b230:	dc000017 	ldw	r16,0(sp)
   1b234:	dec00204 	addi	sp,sp,8
   1b238:	f800283a 	ret
   1b23c:	000b883a 	mov	r5,zero
   1b240:	8009883a 	mov	r4,r16
   1b244:	000eba80 	call	eba8 <memset>
   1b248:	8005883a 	mov	r2,r16
   1b24c:	dfc00117 	ldw	ra,4(sp)
   1b250:	dc000017 	ldw	r16,0(sp)
   1b254:	dec00204 	addi	sp,sp,8
   1b258:	f800283a 	ret
   1b25c:	80800404 	addi	r2,r16,16
   1b260:	003fee06 	br	1b21c <__alt_data_end+0xfc01b21c>
   1b264:	80800204 	addi	r2,r16,8
   1b268:	003fec06 	br	1b21c <__alt_data_end+0xfc01b21c>
   1b26c:	0005883a 	mov	r2,zero
   1b270:	003fee06 	br	1b22c <__alt_data_end+0xfc01b22c>

0001b274 <_fclose_r>:
   1b274:	28003926 	beq	r5,zero,1b35c <_fclose_r+0xe8>
   1b278:	defffc04 	addi	sp,sp,-16
   1b27c:	dc400115 	stw	r17,4(sp)
   1b280:	dc000015 	stw	r16,0(sp)
   1b284:	dfc00315 	stw	ra,12(sp)
   1b288:	dc800215 	stw	r18,8(sp)
   1b28c:	2023883a 	mov	r17,r4
   1b290:	2821883a 	mov	r16,r5
   1b294:	20000226 	beq	r4,zero,1b2a0 <_fclose_r+0x2c>
   1b298:	20800e17 	ldw	r2,56(r4)
   1b29c:	10002726 	beq	r2,zero,1b33c <_fclose_r+0xc8>
   1b2a0:	8080030f 	ldh	r2,12(r16)
   1b2a4:	1000071e 	bne	r2,zero,1b2c4 <_fclose_r+0x50>
   1b2a8:	0005883a 	mov	r2,zero
   1b2ac:	dfc00317 	ldw	ra,12(sp)
   1b2b0:	dc800217 	ldw	r18,8(sp)
   1b2b4:	dc400117 	ldw	r17,4(sp)
   1b2b8:	dc000017 	ldw	r16,0(sp)
   1b2bc:	dec00404 	addi	sp,sp,16
   1b2c0:	f800283a 	ret
   1b2c4:	800b883a 	mov	r5,r16
   1b2c8:	8809883a 	mov	r4,r17
   1b2cc:	001543c0 	call	1543c <__sflush_r>
   1b2d0:	1025883a 	mov	r18,r2
   1b2d4:	80800b17 	ldw	r2,44(r16)
   1b2d8:	10000426 	beq	r2,zero,1b2ec <_fclose_r+0x78>
   1b2dc:	81400717 	ldw	r5,28(r16)
   1b2e0:	8809883a 	mov	r4,r17
   1b2e4:	103ee83a 	callr	r2
   1b2e8:	10001616 	blt	r2,zero,1b344 <_fclose_r+0xd0>
   1b2ec:	8080030b 	ldhu	r2,12(r16)
   1b2f0:	1080200c 	andi	r2,r2,128
   1b2f4:	1000151e 	bne	r2,zero,1b34c <_fclose_r+0xd8>
   1b2f8:	81400c17 	ldw	r5,48(r16)
   1b2fc:	28000526 	beq	r5,zero,1b314 <_fclose_r+0xa0>
   1b300:	80801004 	addi	r2,r16,64
   1b304:	28800226 	beq	r5,r2,1b310 <_fclose_r+0x9c>
   1b308:	8809883a 	mov	r4,r17
   1b30c:	0015bb80 	call	15bb8 <_free_r>
   1b310:	80000c15 	stw	zero,48(r16)
   1b314:	81401117 	ldw	r5,68(r16)
   1b318:	28000326 	beq	r5,zero,1b328 <_fclose_r+0xb4>
   1b31c:	8809883a 	mov	r4,r17
   1b320:	0015bb80 	call	15bb8 <_free_r>
   1b324:	80001115 	stw	zero,68(r16)
   1b328:	0015a540 	call	15a54 <__sfp_lock_acquire>
   1b32c:	8000030d 	sth	zero,12(r16)
   1b330:	0015a580 	call	15a58 <__sfp_lock_release>
   1b334:	9005883a 	mov	r2,r18
   1b338:	003fdc06 	br	1b2ac <__alt_data_end+0xfc01b2ac>
   1b33c:	0015a440 	call	15a44 <__sinit>
   1b340:	003fd706 	br	1b2a0 <__alt_data_end+0xfc01b2a0>
   1b344:	04bfffc4 	movi	r18,-1
   1b348:	003fe806 	br	1b2ec <__alt_data_end+0xfc01b2ec>
   1b34c:	81400417 	ldw	r5,16(r16)
   1b350:	8809883a 	mov	r4,r17
   1b354:	0015bb80 	call	15bb8 <_free_r>
   1b358:	003fe706 	br	1b2f8 <__alt_data_end+0xfc01b2f8>
   1b35c:	0005883a 	mov	r2,zero
   1b360:	f800283a 	ret

0001b364 <fclose>:
   1b364:	008000f4 	movhi	r2,3
   1b368:	10b70504 	addi	r2,r2,-9196
   1b36c:	200b883a 	mov	r5,r4
   1b370:	11000017 	ldw	r4,0(r2)
   1b374:	001b2741 	jmpi	1b274 <_fclose_r>

0001b378 <__fputwc>:
   1b378:	defff804 	addi	sp,sp,-32
   1b37c:	dcc00415 	stw	r19,16(sp)
   1b380:	dc800315 	stw	r18,12(sp)
   1b384:	dc000115 	stw	r16,4(sp)
   1b388:	dfc00715 	stw	ra,28(sp)
   1b38c:	dd400615 	stw	r21,24(sp)
   1b390:	dd000515 	stw	r20,20(sp)
   1b394:	dc400215 	stw	r17,8(sp)
   1b398:	2027883a 	mov	r19,r4
   1b39c:	2825883a 	mov	r18,r5
   1b3a0:	3021883a 	mov	r16,r6
   1b3a4:	00165a00 	call	165a0 <__locale_mb_cur_max>
   1b3a8:	00c00044 	movi	r3,1
   1b3ac:	10c03e26 	beq	r2,r3,1b4a8 <__fputwc+0x130>
   1b3b0:	81c01704 	addi	r7,r16,92
   1b3b4:	900d883a 	mov	r6,r18
   1b3b8:	d80b883a 	mov	r5,sp
   1b3bc:	9809883a 	mov	r4,r19
   1b3c0:	001b6f00 	call	1b6f0 <_wcrtomb_r>
   1b3c4:	1029883a 	mov	r20,r2
   1b3c8:	00bfffc4 	movi	r2,-1
   1b3cc:	a0802026 	beq	r20,r2,1b450 <__fputwc+0xd8>
   1b3d0:	d9400003 	ldbu	r5,0(sp)
   1b3d4:	a0001c26 	beq	r20,zero,1b448 <__fputwc+0xd0>
   1b3d8:	0023883a 	mov	r17,zero
   1b3dc:	05400284 	movi	r21,10
   1b3e0:	00000906 	br	1b408 <__fputwc+0x90>
   1b3e4:	80800017 	ldw	r2,0(r16)
   1b3e8:	11400005 	stb	r5,0(r2)
   1b3ec:	80c00017 	ldw	r3,0(r16)
   1b3f0:	18c00044 	addi	r3,r3,1
   1b3f4:	80c00015 	stw	r3,0(r16)
   1b3f8:	8c400044 	addi	r17,r17,1
   1b3fc:	dc45883a 	add	r2,sp,r17
   1b400:	8d00112e 	bgeu	r17,r20,1b448 <__fputwc+0xd0>
   1b404:	11400003 	ldbu	r5,0(r2)
   1b408:	80c00217 	ldw	r3,8(r16)
   1b40c:	18ffffc4 	addi	r3,r3,-1
   1b410:	80c00215 	stw	r3,8(r16)
   1b414:	183ff30e 	bge	r3,zero,1b3e4 <__alt_data_end+0xfc01b3e4>
   1b418:	80800617 	ldw	r2,24(r16)
   1b41c:	18801916 	blt	r3,r2,1b484 <__fputwc+0x10c>
   1b420:	80800017 	ldw	r2,0(r16)
   1b424:	11400005 	stb	r5,0(r2)
   1b428:	80800017 	ldw	r2,0(r16)
   1b42c:	10c00003 	ldbu	r3,0(r2)
   1b430:	10800044 	addi	r2,r2,1
   1b434:	1d402326 	beq	r3,r21,1b4c4 <__fputwc+0x14c>
   1b438:	80800015 	stw	r2,0(r16)
   1b43c:	8c400044 	addi	r17,r17,1
   1b440:	dc45883a 	add	r2,sp,r17
   1b444:	8d3fef36 	bltu	r17,r20,1b404 <__alt_data_end+0xfc01b404>
   1b448:	9005883a 	mov	r2,r18
   1b44c:	00000406 	br	1b460 <__fputwc+0xe8>
   1b450:	80c0030b 	ldhu	r3,12(r16)
   1b454:	a005883a 	mov	r2,r20
   1b458:	18c01014 	ori	r3,r3,64
   1b45c:	80c0030d 	sth	r3,12(r16)
   1b460:	dfc00717 	ldw	ra,28(sp)
   1b464:	dd400617 	ldw	r21,24(sp)
   1b468:	dd000517 	ldw	r20,20(sp)
   1b46c:	dcc00417 	ldw	r19,16(sp)
   1b470:	dc800317 	ldw	r18,12(sp)
   1b474:	dc400217 	ldw	r17,8(sp)
   1b478:	dc000117 	ldw	r16,4(sp)
   1b47c:	dec00804 	addi	sp,sp,32
   1b480:	f800283a 	ret
   1b484:	800d883a 	mov	r6,r16
   1b488:	29403fcc 	andi	r5,r5,255
   1b48c:	9809883a 	mov	r4,r19
   1b490:	001af8c0 	call	1af8c <__swbuf_r>
   1b494:	10bfffe0 	cmpeqi	r2,r2,-1
   1b498:	10803fcc 	andi	r2,r2,255
   1b49c:	103fd626 	beq	r2,zero,1b3f8 <__alt_data_end+0xfc01b3f8>
   1b4a0:	00bfffc4 	movi	r2,-1
   1b4a4:	003fee06 	br	1b460 <__alt_data_end+0xfc01b460>
   1b4a8:	90ffffc4 	addi	r3,r18,-1
   1b4ac:	01003f84 	movi	r4,254
   1b4b0:	20ffbf36 	bltu	r4,r3,1b3b0 <__alt_data_end+0xfc01b3b0>
   1b4b4:	900b883a 	mov	r5,r18
   1b4b8:	dc800005 	stb	r18,0(sp)
   1b4bc:	1029883a 	mov	r20,r2
   1b4c0:	003fc506 	br	1b3d8 <__alt_data_end+0xfc01b3d8>
   1b4c4:	800d883a 	mov	r6,r16
   1b4c8:	a80b883a 	mov	r5,r21
   1b4cc:	9809883a 	mov	r4,r19
   1b4d0:	001af8c0 	call	1af8c <__swbuf_r>
   1b4d4:	10bfffe0 	cmpeqi	r2,r2,-1
   1b4d8:	003fef06 	br	1b498 <__alt_data_end+0xfc01b498>

0001b4dc <_fputwc_r>:
   1b4dc:	3080030b 	ldhu	r2,12(r6)
   1b4e0:	10c8000c 	andi	r3,r2,8192
   1b4e4:	1800051e 	bne	r3,zero,1b4fc <_fputwc_r+0x20>
   1b4e8:	30c01917 	ldw	r3,100(r6)
   1b4ec:	10880014 	ori	r2,r2,8192
   1b4f0:	3080030d 	sth	r2,12(r6)
   1b4f4:	18880014 	ori	r2,r3,8192
   1b4f8:	30801915 	stw	r2,100(r6)
   1b4fc:	001b3781 	jmpi	1b378 <__fputwc>

0001b500 <fputwc>:
   1b500:	008000f4 	movhi	r2,3
   1b504:	defffc04 	addi	sp,sp,-16
   1b508:	10b70504 	addi	r2,r2,-9196
   1b50c:	dc000115 	stw	r16,4(sp)
   1b510:	14000017 	ldw	r16,0(r2)
   1b514:	dc400215 	stw	r17,8(sp)
   1b518:	dfc00315 	stw	ra,12(sp)
   1b51c:	2023883a 	mov	r17,r4
   1b520:	80000226 	beq	r16,zero,1b52c <fputwc+0x2c>
   1b524:	80800e17 	ldw	r2,56(r16)
   1b528:	10001026 	beq	r2,zero,1b56c <fputwc+0x6c>
   1b52c:	2880030b 	ldhu	r2,12(r5)
   1b530:	10c8000c 	andi	r3,r2,8192
   1b534:	1800051e 	bne	r3,zero,1b54c <fputwc+0x4c>
   1b538:	28c01917 	ldw	r3,100(r5)
   1b53c:	10880014 	ori	r2,r2,8192
   1b540:	2880030d 	sth	r2,12(r5)
   1b544:	18880014 	ori	r2,r3,8192
   1b548:	28801915 	stw	r2,100(r5)
   1b54c:	280d883a 	mov	r6,r5
   1b550:	8009883a 	mov	r4,r16
   1b554:	880b883a 	mov	r5,r17
   1b558:	dfc00317 	ldw	ra,12(sp)
   1b55c:	dc400217 	ldw	r17,8(sp)
   1b560:	dc000117 	ldw	r16,4(sp)
   1b564:	dec00404 	addi	sp,sp,16
   1b568:	001b3781 	jmpi	1b378 <__fputwc>
   1b56c:	8009883a 	mov	r4,r16
   1b570:	d9400015 	stw	r5,0(sp)
   1b574:	0015a440 	call	15a44 <__sinit>
   1b578:	d9400017 	ldw	r5,0(sp)
   1b57c:	003feb06 	br	1b52c <__alt_data_end+0xfc01b52c>

0001b580 <_fstat_r>:
   1b580:	defffd04 	addi	sp,sp,-12
   1b584:	2805883a 	mov	r2,r5
   1b588:	dc000015 	stw	r16,0(sp)
   1b58c:	040000f4 	movhi	r16,3
   1b590:	dc400115 	stw	r17,4(sp)
   1b594:	84039b04 	addi	r16,r16,3692
   1b598:	2023883a 	mov	r17,r4
   1b59c:	300b883a 	mov	r5,r6
   1b5a0:	1009883a 	mov	r4,r2
   1b5a4:	dfc00215 	stw	ra,8(sp)
   1b5a8:	80000015 	stw	zero,0(r16)
   1b5ac:	001ee880 	call	1ee88 <fstat>
   1b5b0:	00ffffc4 	movi	r3,-1
   1b5b4:	10c00526 	beq	r2,r3,1b5cc <_fstat_r+0x4c>
   1b5b8:	dfc00217 	ldw	ra,8(sp)
   1b5bc:	dc400117 	ldw	r17,4(sp)
   1b5c0:	dc000017 	ldw	r16,0(sp)
   1b5c4:	dec00304 	addi	sp,sp,12
   1b5c8:	f800283a 	ret
   1b5cc:	80c00017 	ldw	r3,0(r16)
   1b5d0:	183ff926 	beq	r3,zero,1b5b8 <__alt_data_end+0xfc01b5b8>
   1b5d4:	88c00015 	stw	r3,0(r17)
   1b5d8:	003ff706 	br	1b5b8 <__alt_data_end+0xfc01b5b8>

0001b5dc <_isatty_r>:
   1b5dc:	defffd04 	addi	sp,sp,-12
   1b5e0:	dc000015 	stw	r16,0(sp)
   1b5e4:	040000f4 	movhi	r16,3
   1b5e8:	dc400115 	stw	r17,4(sp)
   1b5ec:	84039b04 	addi	r16,r16,3692
   1b5f0:	2023883a 	mov	r17,r4
   1b5f4:	2809883a 	mov	r4,r5
   1b5f8:	dfc00215 	stw	ra,8(sp)
   1b5fc:	80000015 	stw	zero,0(r16)
   1b600:	001ef9c0 	call	1ef9c <isatty>
   1b604:	00ffffc4 	movi	r3,-1
   1b608:	10c00526 	beq	r2,r3,1b620 <_isatty_r+0x44>
   1b60c:	dfc00217 	ldw	ra,8(sp)
   1b610:	dc400117 	ldw	r17,4(sp)
   1b614:	dc000017 	ldw	r16,0(sp)
   1b618:	dec00304 	addi	sp,sp,12
   1b61c:	f800283a 	ret
   1b620:	80c00017 	ldw	r3,0(r16)
   1b624:	183ff926 	beq	r3,zero,1b60c <__alt_data_end+0xfc01b60c>
   1b628:	88c00015 	stw	r3,0(r17)
   1b62c:	003ff706 	br	1b60c <__alt_data_end+0xfc01b60c>

0001b630 <_lseek_r>:
   1b630:	defffd04 	addi	sp,sp,-12
   1b634:	2805883a 	mov	r2,r5
   1b638:	dc000015 	stw	r16,0(sp)
   1b63c:	040000f4 	movhi	r16,3
   1b640:	dc400115 	stw	r17,4(sp)
   1b644:	300b883a 	mov	r5,r6
   1b648:	84039b04 	addi	r16,r16,3692
   1b64c:	2023883a 	mov	r17,r4
   1b650:	380d883a 	mov	r6,r7
   1b654:	1009883a 	mov	r4,r2
   1b658:	dfc00215 	stw	ra,8(sp)
   1b65c:	80000015 	stw	zero,0(r16)
   1b660:	001f2dc0 	call	1f2dc <lseek>
   1b664:	00ffffc4 	movi	r3,-1
   1b668:	10c00526 	beq	r2,r3,1b680 <_lseek_r+0x50>
   1b66c:	dfc00217 	ldw	ra,8(sp)
   1b670:	dc400117 	ldw	r17,4(sp)
   1b674:	dc000017 	ldw	r16,0(sp)
   1b678:	dec00304 	addi	sp,sp,12
   1b67c:	f800283a 	ret
   1b680:	80c00017 	ldw	r3,0(r16)
   1b684:	183ff926 	beq	r3,zero,1b66c <__alt_data_end+0xfc01b66c>
   1b688:	88c00015 	stw	r3,0(r17)
   1b68c:	003ff706 	br	1b66c <__alt_data_end+0xfc01b66c>

0001b690 <_read_r>:
   1b690:	defffd04 	addi	sp,sp,-12
   1b694:	2805883a 	mov	r2,r5
   1b698:	dc000015 	stw	r16,0(sp)
   1b69c:	040000f4 	movhi	r16,3
   1b6a0:	dc400115 	stw	r17,4(sp)
   1b6a4:	300b883a 	mov	r5,r6
   1b6a8:	84039b04 	addi	r16,r16,3692
   1b6ac:	2023883a 	mov	r17,r4
   1b6b0:	380d883a 	mov	r6,r7
   1b6b4:	1009883a 	mov	r4,r2
   1b6b8:	dfc00215 	stw	ra,8(sp)
   1b6bc:	80000015 	stw	zero,0(r16)
   1b6c0:	001f4b80 	call	1f4b8 <read>
   1b6c4:	00ffffc4 	movi	r3,-1
   1b6c8:	10c00526 	beq	r2,r3,1b6e0 <_read_r+0x50>
   1b6cc:	dfc00217 	ldw	ra,8(sp)
   1b6d0:	dc400117 	ldw	r17,4(sp)
   1b6d4:	dc000017 	ldw	r16,0(sp)
   1b6d8:	dec00304 	addi	sp,sp,12
   1b6dc:	f800283a 	ret
   1b6e0:	80c00017 	ldw	r3,0(r16)
   1b6e4:	183ff926 	beq	r3,zero,1b6cc <__alt_data_end+0xfc01b6cc>
   1b6e8:	88c00015 	stw	r3,0(r17)
   1b6ec:	003ff706 	br	1b6cc <__alt_data_end+0xfc01b6cc>

0001b6f0 <_wcrtomb_r>:
   1b6f0:	defff604 	addi	sp,sp,-40
   1b6f4:	008000f4 	movhi	r2,3
   1b6f8:	dc800815 	stw	r18,32(sp)
   1b6fc:	dc400715 	stw	r17,28(sp)
   1b700:	dc000615 	stw	r16,24(sp)
   1b704:	10b70904 	addi	r2,r2,-9180
   1b708:	dfc00915 	stw	ra,36(sp)
   1b70c:	2021883a 	mov	r16,r4
   1b710:	3823883a 	mov	r17,r7
   1b714:	14800017 	ldw	r18,0(r2)
   1b718:	28001426 	beq	r5,zero,1b76c <_wcrtomb_r+0x7c>
   1b71c:	d9400415 	stw	r5,16(sp)
   1b720:	d9800515 	stw	r6,20(sp)
   1b724:	00165940 	call	16594 <__locale_charset>
   1b728:	d9800517 	ldw	r6,20(sp)
   1b72c:	d9400417 	ldw	r5,16(sp)
   1b730:	100f883a 	mov	r7,r2
   1b734:	dc400015 	stw	r17,0(sp)
   1b738:	8009883a 	mov	r4,r16
   1b73c:	903ee83a 	callr	r18
   1b740:	00ffffc4 	movi	r3,-1
   1b744:	10c0031e 	bne	r2,r3,1b754 <_wcrtomb_r+0x64>
   1b748:	88000015 	stw	zero,0(r17)
   1b74c:	00c02284 	movi	r3,138
   1b750:	80c00015 	stw	r3,0(r16)
   1b754:	dfc00917 	ldw	ra,36(sp)
   1b758:	dc800817 	ldw	r18,32(sp)
   1b75c:	dc400717 	ldw	r17,28(sp)
   1b760:	dc000617 	ldw	r16,24(sp)
   1b764:	dec00a04 	addi	sp,sp,40
   1b768:	f800283a 	ret
   1b76c:	00165940 	call	16594 <__locale_charset>
   1b770:	100f883a 	mov	r7,r2
   1b774:	dc400015 	stw	r17,0(sp)
   1b778:	000d883a 	mov	r6,zero
   1b77c:	d9400104 	addi	r5,sp,4
   1b780:	8009883a 	mov	r4,r16
   1b784:	903ee83a 	callr	r18
   1b788:	003fed06 	br	1b740 <__alt_data_end+0xfc01b740>

0001b78c <wcrtomb>:
   1b78c:	defff604 	addi	sp,sp,-40
   1b790:	008000f4 	movhi	r2,3
   1b794:	dc800615 	stw	r18,24(sp)
   1b798:	dc400515 	stw	r17,20(sp)
   1b79c:	10b70504 	addi	r2,r2,-9196
   1b7a0:	dfc00915 	stw	ra,36(sp)
   1b7a4:	dd000815 	stw	r20,32(sp)
   1b7a8:	dcc00715 	stw	r19,28(sp)
   1b7ac:	dc000415 	stw	r16,16(sp)
   1b7b0:	3025883a 	mov	r18,r6
   1b7b4:	14400017 	ldw	r17,0(r2)
   1b7b8:	20001926 	beq	r4,zero,1b820 <wcrtomb+0x94>
   1b7bc:	008000f4 	movhi	r2,3
   1b7c0:	10b70904 	addi	r2,r2,-9180
   1b7c4:	15000017 	ldw	r20,0(r2)
   1b7c8:	2021883a 	mov	r16,r4
   1b7cc:	2827883a 	mov	r19,r5
   1b7d0:	00165940 	call	16594 <__locale_charset>
   1b7d4:	100f883a 	mov	r7,r2
   1b7d8:	dc800015 	stw	r18,0(sp)
   1b7dc:	980d883a 	mov	r6,r19
   1b7e0:	800b883a 	mov	r5,r16
   1b7e4:	8809883a 	mov	r4,r17
   1b7e8:	a03ee83a 	callr	r20
   1b7ec:	00ffffc4 	movi	r3,-1
   1b7f0:	10c0031e 	bne	r2,r3,1b800 <wcrtomb+0x74>
   1b7f4:	90000015 	stw	zero,0(r18)
   1b7f8:	00c02284 	movi	r3,138
   1b7fc:	88c00015 	stw	r3,0(r17)
   1b800:	dfc00917 	ldw	ra,36(sp)
   1b804:	dd000817 	ldw	r20,32(sp)
   1b808:	dcc00717 	ldw	r19,28(sp)
   1b80c:	dc800617 	ldw	r18,24(sp)
   1b810:	dc400517 	ldw	r17,20(sp)
   1b814:	dc000417 	ldw	r16,16(sp)
   1b818:	dec00a04 	addi	sp,sp,40
   1b81c:	f800283a 	ret
   1b820:	008000f4 	movhi	r2,3
   1b824:	10b70904 	addi	r2,r2,-9180
   1b828:	14000017 	ldw	r16,0(r2)
   1b82c:	00165940 	call	16594 <__locale_charset>
   1b830:	100f883a 	mov	r7,r2
   1b834:	dc800015 	stw	r18,0(sp)
   1b838:	000d883a 	mov	r6,zero
   1b83c:	d9400104 	addi	r5,sp,4
   1b840:	8809883a 	mov	r4,r17
   1b844:	803ee83a 	callr	r16
   1b848:	003fe806 	br	1b7ec <__alt_data_end+0xfc01b7ec>

0001b84c <__ascii_wctomb>:
   1b84c:	28000526 	beq	r5,zero,1b864 <__ascii_wctomb+0x18>
   1b850:	00803fc4 	movi	r2,255
   1b854:	11800536 	bltu	r2,r6,1b86c <__ascii_wctomb+0x20>
   1b858:	29800005 	stb	r6,0(r5)
   1b85c:	00800044 	movi	r2,1
   1b860:	f800283a 	ret
   1b864:	0005883a 	mov	r2,zero
   1b868:	f800283a 	ret
   1b86c:	00802284 	movi	r2,138
   1b870:	20800015 	stw	r2,0(r4)
   1b874:	00bfffc4 	movi	r2,-1
   1b878:	f800283a 	ret

0001b87c <_wctomb_r>:
   1b87c:	008000f4 	movhi	r2,3
   1b880:	defff904 	addi	sp,sp,-28
   1b884:	10b70904 	addi	r2,r2,-9180
   1b888:	dfc00615 	stw	ra,24(sp)
   1b88c:	dc400515 	stw	r17,20(sp)
   1b890:	dc000415 	stw	r16,16(sp)
   1b894:	3823883a 	mov	r17,r7
   1b898:	14000017 	ldw	r16,0(r2)
   1b89c:	d9000115 	stw	r4,4(sp)
   1b8a0:	d9400215 	stw	r5,8(sp)
   1b8a4:	d9800315 	stw	r6,12(sp)
   1b8a8:	00165940 	call	16594 <__locale_charset>
   1b8ac:	d9800317 	ldw	r6,12(sp)
   1b8b0:	d9400217 	ldw	r5,8(sp)
   1b8b4:	d9000117 	ldw	r4,4(sp)
   1b8b8:	100f883a 	mov	r7,r2
   1b8bc:	dc400015 	stw	r17,0(sp)
   1b8c0:	803ee83a 	callr	r16
   1b8c4:	dfc00617 	ldw	ra,24(sp)
   1b8c8:	dc400517 	ldw	r17,20(sp)
   1b8cc:	dc000417 	ldw	r16,16(sp)
   1b8d0:	dec00704 	addi	sp,sp,28
   1b8d4:	f800283a 	ret

0001b8d8 <__udivdi3>:
   1b8d8:	defff404 	addi	sp,sp,-48
   1b8dc:	dcc00515 	stw	r19,20(sp)
   1b8e0:	dc000215 	stw	r16,8(sp)
   1b8e4:	dfc00b15 	stw	ra,44(sp)
   1b8e8:	df000a15 	stw	fp,40(sp)
   1b8ec:	ddc00915 	stw	r23,36(sp)
   1b8f0:	dd800815 	stw	r22,32(sp)
   1b8f4:	dd400715 	stw	r21,28(sp)
   1b8f8:	dd000615 	stw	r20,24(sp)
   1b8fc:	dc800415 	stw	r18,16(sp)
   1b900:	dc400315 	stw	r17,12(sp)
   1b904:	2027883a 	mov	r19,r4
   1b908:	2821883a 	mov	r16,r5
   1b90c:	3800461e 	bne	r7,zero,1ba28 <__udivdi3+0x150>
   1b910:	3023883a 	mov	r17,r6
   1b914:	2025883a 	mov	r18,r4
   1b918:	2980572e 	bgeu	r5,r6,1ba78 <__udivdi3+0x1a0>
   1b91c:	00bfffd4 	movui	r2,65535
   1b920:	282d883a 	mov	r22,r5
   1b924:	1180b236 	bltu	r2,r6,1bbf0 <__udivdi3+0x318>
   1b928:	00803fc4 	movi	r2,255
   1b92c:	1185803a 	cmpltu	r2,r2,r6
   1b930:	100490fa 	slli	r2,r2,3
   1b934:	3086d83a 	srl	r3,r6,r2
   1b938:	010000f4 	movhi	r4,3
   1b93c:	2129c004 	addi	r4,r4,-22784
   1b940:	20c7883a 	add	r3,r4,r3
   1b944:	18c00003 	ldbu	r3,0(r3)
   1b948:	1885883a 	add	r2,r3,r2
   1b94c:	00c00804 	movi	r3,32
   1b950:	1887c83a 	sub	r3,r3,r2
   1b954:	18000526 	beq	r3,zero,1b96c <__udivdi3+0x94>
   1b958:	80e0983a 	sll	r16,r16,r3
   1b95c:	9884d83a 	srl	r2,r19,r2
   1b960:	30e2983a 	sll	r17,r6,r3
   1b964:	98e4983a 	sll	r18,r19,r3
   1b968:	142cb03a 	or	r22,r2,r16
   1b96c:	882ad43a 	srli	r21,r17,16
   1b970:	b009883a 	mov	r4,r22
   1b974:	8d3fffcc 	andi	r20,r17,65535
   1b978:	a80b883a 	mov	r5,r21
   1b97c:	000cc540 	call	cc54 <__umodsi3>
   1b980:	b009883a 	mov	r4,r22
   1b984:	a80b883a 	mov	r5,r21
   1b988:	1027883a 	mov	r19,r2
   1b98c:	000cbf00 	call	cbf0 <__udivsi3>
   1b990:	100b883a 	mov	r5,r2
   1b994:	a009883a 	mov	r4,r20
   1b998:	102d883a 	mov	r22,r2
   1b99c:	000ccac0 	call	ccac <__mulsi3>
   1b9a0:	9826943a 	slli	r19,r19,16
   1b9a4:	9006d43a 	srli	r3,r18,16
   1b9a8:	1cc6b03a 	or	r3,r3,r19
   1b9ac:	1880052e 	bgeu	r3,r2,1b9c4 <__udivdi3+0xec>
   1b9b0:	1c47883a 	add	r3,r3,r17
   1b9b4:	b13fffc4 	addi	r4,r22,-1
   1b9b8:	1c400136 	bltu	r3,r17,1b9c0 <__udivdi3+0xe8>
   1b9bc:	18814236 	bltu	r3,r2,1bec8 <__udivdi3+0x5f0>
   1b9c0:	202d883a 	mov	r22,r4
   1b9c4:	18a1c83a 	sub	r16,r3,r2
   1b9c8:	8009883a 	mov	r4,r16
   1b9cc:	a80b883a 	mov	r5,r21
   1b9d0:	000cc540 	call	cc54 <__umodsi3>
   1b9d4:	1027883a 	mov	r19,r2
   1b9d8:	8009883a 	mov	r4,r16
   1b9dc:	a80b883a 	mov	r5,r21
   1b9e0:	9826943a 	slli	r19,r19,16
   1b9e4:	000cbf00 	call	cbf0 <__udivsi3>
   1b9e8:	100b883a 	mov	r5,r2
   1b9ec:	a009883a 	mov	r4,r20
   1b9f0:	94bfffcc 	andi	r18,r18,65535
   1b9f4:	1021883a 	mov	r16,r2
   1b9f8:	94e4b03a 	or	r18,r18,r19
   1b9fc:	000ccac0 	call	ccac <__mulsi3>
   1ba00:	9080052e 	bgeu	r18,r2,1ba18 <__udivdi3+0x140>
   1ba04:	8ca5883a 	add	r18,r17,r18
   1ba08:	80ffffc4 	addi	r3,r16,-1
   1ba0c:	94410c36 	bltu	r18,r17,1be40 <__udivdi3+0x568>
   1ba10:	90810b2e 	bgeu	r18,r2,1be40 <__udivdi3+0x568>
   1ba14:	843fff84 	addi	r16,r16,-2
   1ba18:	b004943a 	slli	r2,r22,16
   1ba1c:	0007883a 	mov	r3,zero
   1ba20:	1404b03a 	or	r2,r2,r16
   1ba24:	00005e06 	br	1bba0 <__udivdi3+0x2c8>
   1ba28:	29c05b36 	bltu	r5,r7,1bb98 <__udivdi3+0x2c0>
   1ba2c:	00bfffd4 	movui	r2,65535
   1ba30:	11c0672e 	bgeu	r2,r7,1bbd0 <__udivdi3+0x2f8>
   1ba34:	00804034 	movhi	r2,256
   1ba38:	10bfffc4 	addi	r2,r2,-1
   1ba3c:	11c10a36 	bltu	r2,r7,1be68 <__udivdi3+0x590>
   1ba40:	00800404 	movi	r2,16
   1ba44:	3886d83a 	srl	r3,r7,r2
   1ba48:	010000f4 	movhi	r4,3
   1ba4c:	2129c004 	addi	r4,r4,-22784
   1ba50:	20c7883a 	add	r3,r4,r3
   1ba54:	18c00003 	ldbu	r3,0(r3)
   1ba58:	05c00804 	movi	r23,32
   1ba5c:	1885883a 	add	r2,r3,r2
   1ba60:	b8afc83a 	sub	r23,r23,r2
   1ba64:	b800671e 	bne	r23,zero,1bc04 <__udivdi3+0x32c>
   1ba68:	3c010536 	bltu	r7,r16,1be80 <__udivdi3+0x5a8>
   1ba6c:	9985403a 	cmpgeu	r2,r19,r6
   1ba70:	0007883a 	mov	r3,zero
   1ba74:	00004a06 	br	1bba0 <__udivdi3+0x2c8>
   1ba78:	3000041e 	bne	r6,zero,1ba8c <__udivdi3+0x1b4>
   1ba7c:	000b883a 	mov	r5,zero
   1ba80:	01000044 	movi	r4,1
   1ba84:	000cbf00 	call	cbf0 <__udivsi3>
   1ba88:	1023883a 	mov	r17,r2
   1ba8c:	00bfffd4 	movui	r2,65535
   1ba90:	1440532e 	bgeu	r2,r17,1bbe0 <__udivdi3+0x308>
   1ba94:	00804034 	movhi	r2,256
   1ba98:	10bfffc4 	addi	r2,r2,-1
   1ba9c:	1440f436 	bltu	r2,r17,1be70 <__udivdi3+0x598>
   1baa0:	00800404 	movi	r2,16
   1baa4:	8886d83a 	srl	r3,r17,r2
   1baa8:	010000f4 	movhi	r4,3
   1baac:	2129c004 	addi	r4,r4,-22784
   1bab0:	20c7883a 	add	r3,r4,r3
   1bab4:	18c00003 	ldbu	r3,0(r3)
   1bab8:	1885883a 	add	r2,r3,r2
   1babc:	00c00804 	movi	r3,32
   1bac0:	1887c83a 	sub	r3,r3,r2
   1bac4:	1800a51e 	bne	r3,zero,1bd5c <__udivdi3+0x484>
   1bac8:	882ad43a 	srli	r21,r17,16
   1bacc:	8461c83a 	sub	r16,r16,r17
   1bad0:	8d3fffcc 	andi	r20,r17,65535
   1bad4:	00c00044 	movi	r3,1
   1bad8:	a80b883a 	mov	r5,r21
   1badc:	8009883a 	mov	r4,r16
   1bae0:	d8c00115 	stw	r3,4(sp)
   1bae4:	000cc540 	call	cc54 <__umodsi3>
   1bae8:	a80b883a 	mov	r5,r21
   1baec:	8009883a 	mov	r4,r16
   1baf0:	1027883a 	mov	r19,r2
   1baf4:	000cbf00 	call	cbf0 <__udivsi3>
   1baf8:	a00b883a 	mov	r5,r20
   1bafc:	1009883a 	mov	r4,r2
   1bb00:	102d883a 	mov	r22,r2
   1bb04:	000ccac0 	call	ccac <__mulsi3>
   1bb08:	9826943a 	slli	r19,r19,16
   1bb0c:	900ed43a 	srli	r7,r18,16
   1bb10:	d8c00117 	ldw	r3,4(sp)
   1bb14:	3cceb03a 	or	r7,r7,r19
   1bb18:	3880052e 	bgeu	r7,r2,1bb30 <__udivdi3+0x258>
   1bb1c:	3c4f883a 	add	r7,r7,r17
   1bb20:	b13fffc4 	addi	r4,r22,-1
   1bb24:	3c400136 	bltu	r7,r17,1bb2c <__udivdi3+0x254>
   1bb28:	3880e436 	bltu	r7,r2,1bebc <__udivdi3+0x5e4>
   1bb2c:	202d883a 	mov	r22,r4
   1bb30:	38a1c83a 	sub	r16,r7,r2
   1bb34:	8009883a 	mov	r4,r16
   1bb38:	a80b883a 	mov	r5,r21
   1bb3c:	d8c00115 	stw	r3,4(sp)
   1bb40:	000cc540 	call	cc54 <__umodsi3>
   1bb44:	1027883a 	mov	r19,r2
   1bb48:	8009883a 	mov	r4,r16
   1bb4c:	a80b883a 	mov	r5,r21
   1bb50:	9826943a 	slli	r19,r19,16
   1bb54:	000cbf00 	call	cbf0 <__udivsi3>
   1bb58:	a00b883a 	mov	r5,r20
   1bb5c:	1009883a 	mov	r4,r2
   1bb60:	94bfffcc 	andi	r18,r18,65535
   1bb64:	1021883a 	mov	r16,r2
   1bb68:	94e4b03a 	or	r18,r18,r19
   1bb6c:	000ccac0 	call	ccac <__mulsi3>
   1bb70:	d8c00117 	ldw	r3,4(sp)
   1bb74:	9080052e 	bgeu	r18,r2,1bb8c <__udivdi3+0x2b4>
   1bb78:	8ca5883a 	add	r18,r17,r18
   1bb7c:	813fffc4 	addi	r4,r16,-1
   1bb80:	9440ad36 	bltu	r18,r17,1be38 <__udivdi3+0x560>
   1bb84:	9080ac2e 	bgeu	r18,r2,1be38 <__udivdi3+0x560>
   1bb88:	843fff84 	addi	r16,r16,-2
   1bb8c:	b004943a 	slli	r2,r22,16
   1bb90:	1404b03a 	or	r2,r2,r16
   1bb94:	00000206 	br	1bba0 <__udivdi3+0x2c8>
   1bb98:	0007883a 	mov	r3,zero
   1bb9c:	0005883a 	mov	r2,zero
   1bba0:	dfc00b17 	ldw	ra,44(sp)
   1bba4:	df000a17 	ldw	fp,40(sp)
   1bba8:	ddc00917 	ldw	r23,36(sp)
   1bbac:	dd800817 	ldw	r22,32(sp)
   1bbb0:	dd400717 	ldw	r21,28(sp)
   1bbb4:	dd000617 	ldw	r20,24(sp)
   1bbb8:	dcc00517 	ldw	r19,20(sp)
   1bbbc:	dc800417 	ldw	r18,16(sp)
   1bbc0:	dc400317 	ldw	r17,12(sp)
   1bbc4:	dc000217 	ldw	r16,8(sp)
   1bbc8:	dec00c04 	addi	sp,sp,48
   1bbcc:	f800283a 	ret
   1bbd0:	00803fc4 	movi	r2,255
   1bbd4:	11c5803a 	cmpltu	r2,r2,r7
   1bbd8:	100490fa 	slli	r2,r2,3
   1bbdc:	003f9906 	br	1ba44 <__alt_data_end+0xfc01ba44>
   1bbe0:	00803fc4 	movi	r2,255
   1bbe4:	1445803a 	cmpltu	r2,r2,r17
   1bbe8:	100490fa 	slli	r2,r2,3
   1bbec:	003fad06 	br	1baa4 <__alt_data_end+0xfc01baa4>
   1bbf0:	00804034 	movhi	r2,256
   1bbf4:	10bfffc4 	addi	r2,r2,-1
   1bbf8:	11809f36 	bltu	r2,r6,1be78 <__udivdi3+0x5a0>
   1bbfc:	00800404 	movi	r2,16
   1bc00:	003f4c06 	br	1b934 <__alt_data_end+0xfc01b934>
   1bc04:	3dce983a 	sll	r7,r7,r23
   1bc08:	30b8d83a 	srl	fp,r6,r2
   1bc0c:	80a2d83a 	srl	r17,r16,r2
   1bc10:	35cc983a 	sll	r6,r6,r23
   1bc14:	3f38b03a 	or	fp,r7,fp
   1bc18:	e024d43a 	srli	r18,fp,16
   1bc1c:	9884d83a 	srl	r2,r19,r2
   1bc20:	85e0983a 	sll	r16,r16,r23
   1bc24:	8809883a 	mov	r4,r17
   1bc28:	900b883a 	mov	r5,r18
   1bc2c:	d9800015 	stw	r6,0(sp)
   1bc30:	1420b03a 	or	r16,r2,r16
   1bc34:	000cc540 	call	cc54 <__umodsi3>
   1bc38:	900b883a 	mov	r5,r18
   1bc3c:	8809883a 	mov	r4,r17
   1bc40:	1029883a 	mov	r20,r2
   1bc44:	e5bfffcc 	andi	r22,fp,65535
   1bc48:	000cbf00 	call	cbf0 <__udivsi3>
   1bc4c:	100b883a 	mov	r5,r2
   1bc50:	b009883a 	mov	r4,r22
   1bc54:	102b883a 	mov	r21,r2
   1bc58:	000ccac0 	call	ccac <__mulsi3>
   1bc5c:	a028943a 	slli	r20,r20,16
   1bc60:	8006d43a 	srli	r3,r16,16
   1bc64:	1d06b03a 	or	r3,r3,r20
   1bc68:	1880042e 	bgeu	r3,r2,1bc7c <__udivdi3+0x3a4>
   1bc6c:	1f07883a 	add	r3,r3,fp
   1bc70:	a93fffc4 	addi	r4,r21,-1
   1bc74:	1f00892e 	bgeu	r3,fp,1be9c <__udivdi3+0x5c4>
   1bc78:	202b883a 	mov	r21,r4
   1bc7c:	18a3c83a 	sub	r17,r3,r2
   1bc80:	8809883a 	mov	r4,r17
   1bc84:	900b883a 	mov	r5,r18
   1bc88:	000cc540 	call	cc54 <__umodsi3>
   1bc8c:	1029883a 	mov	r20,r2
   1bc90:	8809883a 	mov	r4,r17
   1bc94:	900b883a 	mov	r5,r18
   1bc98:	a028943a 	slli	r20,r20,16
   1bc9c:	000cbf00 	call	cbf0 <__udivsi3>
   1bca0:	100b883a 	mov	r5,r2
   1bca4:	b009883a 	mov	r4,r22
   1bca8:	843fffcc 	andi	r16,r16,65535
   1bcac:	1023883a 	mov	r17,r2
   1bcb0:	8520b03a 	or	r16,r16,r20
   1bcb4:	000ccac0 	call	ccac <__mulsi3>
   1bcb8:	8080042e 	bgeu	r16,r2,1bccc <__udivdi3+0x3f4>
   1bcbc:	8721883a 	add	r16,r16,fp
   1bcc0:	88ffffc4 	addi	r3,r17,-1
   1bcc4:	8700712e 	bgeu	r16,fp,1be8c <__udivdi3+0x5b4>
   1bcc8:	1823883a 	mov	r17,r3
   1bccc:	a80e943a 	slli	r7,r21,16
   1bcd0:	d8c00017 	ldw	r3,0(sp)
   1bcd4:	80a1c83a 	sub	r16,r16,r2
   1bcd8:	3c64b03a 	or	r18,r7,r17
   1bcdc:	1d3fffcc 	andi	r20,r3,65535
   1bce0:	9022d43a 	srli	r17,r18,16
   1bce4:	95bfffcc 	andi	r22,r18,65535
   1bce8:	a00b883a 	mov	r5,r20
   1bcec:	b009883a 	mov	r4,r22
   1bcf0:	182ad43a 	srli	r21,r3,16
   1bcf4:	000ccac0 	call	ccac <__mulsi3>
   1bcf8:	a00b883a 	mov	r5,r20
   1bcfc:	8809883a 	mov	r4,r17
   1bd00:	1039883a 	mov	fp,r2
   1bd04:	000ccac0 	call	ccac <__mulsi3>
   1bd08:	8809883a 	mov	r4,r17
   1bd0c:	a80b883a 	mov	r5,r21
   1bd10:	1029883a 	mov	r20,r2
   1bd14:	000ccac0 	call	ccac <__mulsi3>
   1bd18:	a80b883a 	mov	r5,r21
   1bd1c:	b009883a 	mov	r4,r22
   1bd20:	1023883a 	mov	r17,r2
   1bd24:	000ccac0 	call	ccac <__mulsi3>
   1bd28:	e006d43a 	srli	r3,fp,16
   1bd2c:	1505883a 	add	r2,r2,r20
   1bd30:	1887883a 	add	r3,r3,r2
   1bd34:	1d00022e 	bgeu	r3,r20,1bd40 <__udivdi3+0x468>
   1bd38:	00800074 	movhi	r2,1
   1bd3c:	88a3883a 	add	r17,r17,r2
   1bd40:	1804d43a 	srli	r2,r3,16
   1bd44:	1463883a 	add	r17,r2,r17
   1bd48:	84404436 	bltu	r16,r17,1be5c <__udivdi3+0x584>
   1bd4c:	84403e26 	beq	r16,r17,1be48 <__udivdi3+0x570>
   1bd50:	9005883a 	mov	r2,r18
   1bd54:	0007883a 	mov	r3,zero
   1bd58:	003f9106 	br	1bba0 <__alt_data_end+0xfc01bba0>
   1bd5c:	88e2983a 	sll	r17,r17,r3
   1bd60:	80aed83a 	srl	r23,r16,r2
   1bd64:	80e0983a 	sll	r16,r16,r3
   1bd68:	882ad43a 	srli	r21,r17,16
   1bd6c:	9884d83a 	srl	r2,r19,r2
   1bd70:	b809883a 	mov	r4,r23
   1bd74:	a80b883a 	mov	r5,r21
   1bd78:	98e4983a 	sll	r18,r19,r3
   1bd7c:	142cb03a 	or	r22,r2,r16
   1bd80:	000cc540 	call	cc54 <__umodsi3>
   1bd84:	b809883a 	mov	r4,r23
   1bd88:	a80b883a 	mov	r5,r21
   1bd8c:	1027883a 	mov	r19,r2
   1bd90:	8d3fffcc 	andi	r20,r17,65535
   1bd94:	000cbf00 	call	cbf0 <__udivsi3>
   1bd98:	a009883a 	mov	r4,r20
   1bd9c:	100b883a 	mov	r5,r2
   1bda0:	102f883a 	mov	r23,r2
   1bda4:	000ccac0 	call	ccac <__mulsi3>
   1bda8:	9826943a 	slli	r19,r19,16
   1bdac:	b008d43a 	srli	r4,r22,16
   1bdb0:	24c8b03a 	or	r4,r4,r19
   1bdb4:	2080062e 	bgeu	r4,r2,1bdd0 <__udivdi3+0x4f8>
   1bdb8:	2449883a 	add	r4,r4,r17
   1bdbc:	b8ffffc4 	addi	r3,r23,-1
   1bdc0:	24403c36 	bltu	r4,r17,1beb4 <__udivdi3+0x5dc>
   1bdc4:	20803b2e 	bgeu	r4,r2,1beb4 <__udivdi3+0x5dc>
   1bdc8:	bdffff84 	addi	r23,r23,-2
   1bdcc:	2449883a 	add	r4,r4,r17
   1bdd0:	20a1c83a 	sub	r16,r4,r2
   1bdd4:	a80b883a 	mov	r5,r21
   1bdd8:	8009883a 	mov	r4,r16
   1bddc:	000cc540 	call	cc54 <__umodsi3>
   1bde0:	a80b883a 	mov	r5,r21
   1bde4:	8009883a 	mov	r4,r16
   1bde8:	1027883a 	mov	r19,r2
   1bdec:	000cbf00 	call	cbf0 <__udivsi3>
   1bdf0:	a009883a 	mov	r4,r20
   1bdf4:	100b883a 	mov	r5,r2
   1bdf8:	9826943a 	slli	r19,r19,16
   1bdfc:	1039883a 	mov	fp,r2
   1be00:	000ccac0 	call	ccac <__mulsi3>
   1be04:	b13fffcc 	andi	r4,r22,65535
   1be08:	24c8b03a 	or	r4,r4,r19
   1be0c:	2080062e 	bgeu	r4,r2,1be28 <__udivdi3+0x550>
   1be10:	2449883a 	add	r4,r4,r17
   1be14:	e0ffffc4 	addi	r3,fp,-1
   1be18:	24402436 	bltu	r4,r17,1beac <__udivdi3+0x5d4>
   1be1c:	2080232e 	bgeu	r4,r2,1beac <__udivdi3+0x5d4>
   1be20:	e73fff84 	addi	fp,fp,-2
   1be24:	2449883a 	add	r4,r4,r17
   1be28:	b82e943a 	slli	r23,r23,16
   1be2c:	20a1c83a 	sub	r16,r4,r2
   1be30:	bf06b03a 	or	r3,r23,fp
   1be34:	003f2806 	br	1bad8 <__alt_data_end+0xfc01bad8>
   1be38:	2021883a 	mov	r16,r4
   1be3c:	003f5306 	br	1bb8c <__alt_data_end+0xfc01bb8c>
   1be40:	1821883a 	mov	r16,r3
   1be44:	003ef406 	br	1ba18 <__alt_data_end+0xfc01ba18>
   1be48:	1806943a 	slli	r3,r3,16
   1be4c:	9de6983a 	sll	r19,r19,r23
   1be50:	e73fffcc 	andi	fp,fp,65535
   1be54:	1f07883a 	add	r3,r3,fp
   1be58:	98ffbd2e 	bgeu	r19,r3,1bd50 <__alt_data_end+0xfc01bd50>
   1be5c:	90bfffc4 	addi	r2,r18,-1
   1be60:	0007883a 	mov	r3,zero
   1be64:	003f4e06 	br	1bba0 <__alt_data_end+0xfc01bba0>
   1be68:	00800604 	movi	r2,24
   1be6c:	003ef506 	br	1ba44 <__alt_data_end+0xfc01ba44>
   1be70:	00800604 	movi	r2,24
   1be74:	003f0b06 	br	1baa4 <__alt_data_end+0xfc01baa4>
   1be78:	00800604 	movi	r2,24
   1be7c:	003ead06 	br	1b934 <__alt_data_end+0xfc01b934>
   1be80:	0007883a 	mov	r3,zero
   1be84:	00800044 	movi	r2,1
   1be88:	003f4506 	br	1bba0 <__alt_data_end+0xfc01bba0>
   1be8c:	80bf8e2e 	bgeu	r16,r2,1bcc8 <__alt_data_end+0xfc01bcc8>
   1be90:	8c7fff84 	addi	r17,r17,-2
   1be94:	8721883a 	add	r16,r16,fp
   1be98:	003f8c06 	br	1bccc <__alt_data_end+0xfc01bccc>
   1be9c:	18bf762e 	bgeu	r3,r2,1bc78 <__alt_data_end+0xfc01bc78>
   1bea0:	ad7fff84 	addi	r21,r21,-2
   1bea4:	1f07883a 	add	r3,r3,fp
   1bea8:	003f7406 	br	1bc7c <__alt_data_end+0xfc01bc7c>
   1beac:	1839883a 	mov	fp,r3
   1beb0:	003fdd06 	br	1be28 <__alt_data_end+0xfc01be28>
   1beb4:	182f883a 	mov	r23,r3
   1beb8:	003fc506 	br	1bdd0 <__alt_data_end+0xfc01bdd0>
   1bebc:	b5bfff84 	addi	r22,r22,-2
   1bec0:	3c4f883a 	add	r7,r7,r17
   1bec4:	003f1a06 	br	1bb30 <__alt_data_end+0xfc01bb30>
   1bec8:	b5bfff84 	addi	r22,r22,-2
   1becc:	1c47883a 	add	r3,r3,r17
   1bed0:	003ebc06 	br	1b9c4 <__alt_data_end+0xfc01b9c4>

0001bed4 <__umoddi3>:
   1bed4:	defff304 	addi	sp,sp,-52
   1bed8:	df000b15 	stw	fp,44(sp)
   1bedc:	dc400415 	stw	r17,16(sp)
   1bee0:	dc000315 	stw	r16,12(sp)
   1bee4:	dfc00c15 	stw	ra,48(sp)
   1bee8:	ddc00a15 	stw	r23,40(sp)
   1beec:	dd800915 	stw	r22,36(sp)
   1bef0:	dd400815 	stw	r21,32(sp)
   1bef4:	dd000715 	stw	r20,28(sp)
   1bef8:	dcc00615 	stw	r19,24(sp)
   1befc:	dc800515 	stw	r18,20(sp)
   1bf00:	2021883a 	mov	r16,r4
   1bf04:	2823883a 	mov	r17,r5
   1bf08:	2839883a 	mov	fp,r5
   1bf0c:	3800401e 	bne	r7,zero,1c010 <__umoddi3+0x13c>
   1bf10:	3027883a 	mov	r19,r6
   1bf14:	2029883a 	mov	r20,r4
   1bf18:	2980552e 	bgeu	r5,r6,1c070 <__umoddi3+0x19c>
   1bf1c:	00bfffd4 	movui	r2,65535
   1bf20:	1180a236 	bltu	r2,r6,1c1ac <__umoddi3+0x2d8>
   1bf24:	01003fc4 	movi	r4,255
   1bf28:	2189803a 	cmpltu	r4,r4,r6
   1bf2c:	200890fa 	slli	r4,r4,3
   1bf30:	3104d83a 	srl	r2,r6,r4
   1bf34:	00c000f4 	movhi	r3,3
   1bf38:	18e9c004 	addi	r3,r3,-22784
   1bf3c:	1885883a 	add	r2,r3,r2
   1bf40:	10c00003 	ldbu	r3,0(r2)
   1bf44:	00800804 	movi	r2,32
   1bf48:	1909883a 	add	r4,r3,r4
   1bf4c:	1125c83a 	sub	r18,r2,r4
   1bf50:	90000526 	beq	r18,zero,1bf68 <__umoddi3+0x94>
   1bf54:	8ca2983a 	sll	r17,r17,r18
   1bf58:	8108d83a 	srl	r4,r16,r4
   1bf5c:	34a6983a 	sll	r19,r6,r18
   1bf60:	84a8983a 	sll	r20,r16,r18
   1bf64:	2478b03a 	or	fp,r4,r17
   1bf68:	982cd43a 	srli	r22,r19,16
   1bf6c:	e009883a 	mov	r4,fp
   1bf70:	9dffffcc 	andi	r23,r19,65535
   1bf74:	b00b883a 	mov	r5,r22
   1bf78:	000cc540 	call	cc54 <__umodsi3>
   1bf7c:	b00b883a 	mov	r5,r22
   1bf80:	e009883a 	mov	r4,fp
   1bf84:	102b883a 	mov	r21,r2
   1bf88:	000cbf00 	call	cbf0 <__udivsi3>
   1bf8c:	100b883a 	mov	r5,r2
   1bf90:	b809883a 	mov	r4,r23
   1bf94:	000ccac0 	call	ccac <__mulsi3>
   1bf98:	a82a943a 	slli	r21,r21,16
   1bf9c:	a006d43a 	srli	r3,r20,16
   1bfa0:	1d46b03a 	or	r3,r3,r21
   1bfa4:	1880032e 	bgeu	r3,r2,1bfb4 <__umoddi3+0xe0>
   1bfa8:	1cc7883a 	add	r3,r3,r19
   1bfac:	1cc00136 	bltu	r3,r19,1bfb4 <__umoddi3+0xe0>
   1bfb0:	18813136 	bltu	r3,r2,1c478 <__umoddi3+0x5a4>
   1bfb4:	18a1c83a 	sub	r16,r3,r2
   1bfb8:	b00b883a 	mov	r5,r22
   1bfbc:	8009883a 	mov	r4,r16
   1bfc0:	000cc540 	call	cc54 <__umodsi3>
   1bfc4:	b00b883a 	mov	r5,r22
   1bfc8:	8009883a 	mov	r4,r16
   1bfcc:	1023883a 	mov	r17,r2
   1bfd0:	000cbf00 	call	cbf0 <__udivsi3>
   1bfd4:	100b883a 	mov	r5,r2
   1bfd8:	b809883a 	mov	r4,r23
   1bfdc:	8822943a 	slli	r17,r17,16
   1bfe0:	000ccac0 	call	ccac <__mulsi3>
   1bfe4:	a0ffffcc 	andi	r3,r20,65535
   1bfe8:	1c46b03a 	or	r3,r3,r17
   1bfec:	1880042e 	bgeu	r3,r2,1c000 <__umoddi3+0x12c>
   1bff0:	1cc7883a 	add	r3,r3,r19
   1bff4:	1cc00236 	bltu	r3,r19,1c000 <__umoddi3+0x12c>
   1bff8:	1880012e 	bgeu	r3,r2,1c000 <__umoddi3+0x12c>
   1bffc:	1cc7883a 	add	r3,r3,r19
   1c000:	1885c83a 	sub	r2,r3,r2
   1c004:	1484d83a 	srl	r2,r2,r18
   1c008:	0007883a 	mov	r3,zero
   1c00c:	00005306 	br	1c15c <__umoddi3+0x288>
   1c010:	29c05036 	bltu	r5,r7,1c154 <__umoddi3+0x280>
   1c014:	00bfffd4 	movui	r2,65535
   1c018:	11c05c2e 	bgeu	r2,r7,1c18c <__umoddi3+0x2b8>
   1c01c:	00804034 	movhi	r2,256
   1c020:	10bfffc4 	addi	r2,r2,-1
   1c024:	11c10636 	bltu	r2,r7,1c440 <__umoddi3+0x56c>
   1c028:	01000404 	movi	r4,16
   1c02c:	3904d83a 	srl	r2,r7,r4
   1c030:	00c000f4 	movhi	r3,3
   1c034:	18e9c004 	addi	r3,r3,-22784
   1c038:	1885883a 	add	r2,r3,r2
   1c03c:	14c00003 	ldbu	r19,0(r2)
   1c040:	00c00804 	movi	r3,32
   1c044:	9927883a 	add	r19,r19,r4
   1c048:	1ce9c83a 	sub	r20,r3,r19
   1c04c:	a0005c1e 	bne	r20,zero,1c1c0 <__umoddi3+0x2ec>
   1c050:	3c400136 	bltu	r7,r17,1c058 <__umoddi3+0x184>
   1c054:	81810a36 	bltu	r16,r6,1c480 <__umoddi3+0x5ac>
   1c058:	8185c83a 	sub	r2,r16,r6
   1c05c:	89e3c83a 	sub	r17,r17,r7
   1c060:	8089803a 	cmpltu	r4,r16,r2
   1c064:	8939c83a 	sub	fp,r17,r4
   1c068:	e007883a 	mov	r3,fp
   1c06c:	00003b06 	br	1c15c <__umoddi3+0x288>
   1c070:	3000041e 	bne	r6,zero,1c084 <__umoddi3+0x1b0>
   1c074:	000b883a 	mov	r5,zero
   1c078:	01000044 	movi	r4,1
   1c07c:	000cbf00 	call	cbf0 <__udivsi3>
   1c080:	1027883a 	mov	r19,r2
   1c084:	00bfffd4 	movui	r2,65535
   1c088:	14c0442e 	bgeu	r2,r19,1c19c <__umoddi3+0x2c8>
   1c08c:	00804034 	movhi	r2,256
   1c090:	10bfffc4 	addi	r2,r2,-1
   1c094:	14c0ec36 	bltu	r2,r19,1c448 <__umoddi3+0x574>
   1c098:	00800404 	movi	r2,16
   1c09c:	9886d83a 	srl	r3,r19,r2
   1c0a0:	010000f4 	movhi	r4,3
   1c0a4:	2129c004 	addi	r4,r4,-22784
   1c0a8:	20c7883a 	add	r3,r4,r3
   1c0ac:	18c00003 	ldbu	r3,0(r3)
   1c0b0:	1887883a 	add	r3,r3,r2
   1c0b4:	00800804 	movi	r2,32
   1c0b8:	10e5c83a 	sub	r18,r2,r3
   1c0bc:	9000ab1e 	bne	r18,zero,1c36c <__umoddi3+0x498>
   1c0c0:	982cd43a 	srli	r22,r19,16
   1c0c4:	8ce3c83a 	sub	r17,r17,r19
   1c0c8:	9dffffcc 	andi	r23,r19,65535
   1c0cc:	b00b883a 	mov	r5,r22
   1c0d0:	8809883a 	mov	r4,r17
   1c0d4:	000cc540 	call	cc54 <__umodsi3>
   1c0d8:	b00b883a 	mov	r5,r22
   1c0dc:	8809883a 	mov	r4,r17
   1c0e0:	102b883a 	mov	r21,r2
   1c0e4:	000cbf00 	call	cbf0 <__udivsi3>
   1c0e8:	b80b883a 	mov	r5,r23
   1c0ec:	1009883a 	mov	r4,r2
   1c0f0:	000ccac0 	call	ccac <__mulsi3>
   1c0f4:	a82a943a 	slli	r21,r21,16
   1c0f8:	a006d43a 	srli	r3,r20,16
   1c0fc:	1d46b03a 	or	r3,r3,r21
   1c100:	1880042e 	bgeu	r3,r2,1c114 <__umoddi3+0x240>
   1c104:	1cc7883a 	add	r3,r3,r19
   1c108:	1cc00236 	bltu	r3,r19,1c114 <__umoddi3+0x240>
   1c10c:	1880012e 	bgeu	r3,r2,1c114 <__umoddi3+0x240>
   1c110:	1cc7883a 	add	r3,r3,r19
   1c114:	18a1c83a 	sub	r16,r3,r2
   1c118:	b00b883a 	mov	r5,r22
   1c11c:	8009883a 	mov	r4,r16
   1c120:	000cc540 	call	cc54 <__umodsi3>
   1c124:	1023883a 	mov	r17,r2
   1c128:	b00b883a 	mov	r5,r22
   1c12c:	8009883a 	mov	r4,r16
   1c130:	000cbf00 	call	cbf0 <__udivsi3>
   1c134:	8822943a 	slli	r17,r17,16
   1c138:	b80b883a 	mov	r5,r23
   1c13c:	1009883a 	mov	r4,r2
   1c140:	000ccac0 	call	ccac <__mulsi3>
   1c144:	a53fffcc 	andi	r20,r20,65535
   1c148:	a446b03a 	or	r3,r20,r17
   1c14c:	18bfac2e 	bgeu	r3,r2,1c000 <__alt_data_end+0xfc01c000>
   1c150:	003fa706 	br	1bff0 <__alt_data_end+0xfc01bff0>
   1c154:	2005883a 	mov	r2,r4
   1c158:	2807883a 	mov	r3,r5
   1c15c:	dfc00c17 	ldw	ra,48(sp)
   1c160:	df000b17 	ldw	fp,44(sp)
   1c164:	ddc00a17 	ldw	r23,40(sp)
   1c168:	dd800917 	ldw	r22,36(sp)
   1c16c:	dd400817 	ldw	r21,32(sp)
   1c170:	dd000717 	ldw	r20,28(sp)
   1c174:	dcc00617 	ldw	r19,24(sp)
   1c178:	dc800517 	ldw	r18,20(sp)
   1c17c:	dc400417 	ldw	r17,16(sp)
   1c180:	dc000317 	ldw	r16,12(sp)
   1c184:	dec00d04 	addi	sp,sp,52
   1c188:	f800283a 	ret
   1c18c:	04c03fc4 	movi	r19,255
   1c190:	99c9803a 	cmpltu	r4,r19,r7
   1c194:	200890fa 	slli	r4,r4,3
   1c198:	003fa406 	br	1c02c <__alt_data_end+0xfc01c02c>
   1c19c:	00803fc4 	movi	r2,255
   1c1a0:	14c5803a 	cmpltu	r2,r2,r19
   1c1a4:	100490fa 	slli	r2,r2,3
   1c1a8:	003fbc06 	br	1c09c <__alt_data_end+0xfc01c09c>
   1c1ac:	00804034 	movhi	r2,256
   1c1b0:	10bfffc4 	addi	r2,r2,-1
   1c1b4:	1180a636 	bltu	r2,r6,1c450 <__umoddi3+0x57c>
   1c1b8:	01000404 	movi	r4,16
   1c1bc:	003f5c06 	br	1bf30 <__alt_data_end+0xfc01bf30>
   1c1c0:	3d0e983a 	sll	r7,r7,r20
   1c1c4:	34ead83a 	srl	r21,r6,r19
   1c1c8:	8cc6d83a 	srl	r3,r17,r19
   1c1cc:	8d10983a 	sll	r8,r17,r20
   1c1d0:	3d6ab03a 	or	r21,r7,r21
   1c1d4:	a82cd43a 	srli	r22,r21,16
   1c1d8:	84e2d83a 	srl	r17,r16,r19
   1c1dc:	1809883a 	mov	r4,r3
   1c1e0:	b00b883a 	mov	r5,r22
   1c1e4:	8a22b03a 	or	r17,r17,r8
   1c1e8:	3524983a 	sll	r18,r6,r20
   1c1ec:	dc400015 	stw	r17,0(sp)
   1c1f0:	d8c00115 	stw	r3,4(sp)
   1c1f4:	000cc540 	call	cc54 <__umodsi3>
   1c1f8:	d8c00117 	ldw	r3,4(sp)
   1c1fc:	b00b883a 	mov	r5,r22
   1c200:	1039883a 	mov	fp,r2
   1c204:	1809883a 	mov	r4,r3
   1c208:	000cbf00 	call	cbf0 <__udivsi3>
   1c20c:	adffffcc 	andi	r23,r21,65535
   1c210:	100b883a 	mov	r5,r2
   1c214:	b809883a 	mov	r4,r23
   1c218:	1023883a 	mov	r17,r2
   1c21c:	000ccac0 	call	ccac <__mulsi3>
   1c220:	d9400017 	ldw	r5,0(sp)
   1c224:	e008943a 	slli	r4,fp,16
   1c228:	8520983a 	sll	r16,r16,r20
   1c22c:	2806d43a 	srli	r3,r5,16
   1c230:	1906b03a 	or	r3,r3,r4
   1c234:	1880042e 	bgeu	r3,r2,1c248 <__umoddi3+0x374>
   1c238:	1d47883a 	add	r3,r3,r21
   1c23c:	893fffc4 	addi	r4,r17,-1
   1c240:	1d40892e 	bgeu	r3,r21,1c468 <__umoddi3+0x594>
   1c244:	2023883a 	mov	r17,r4
   1c248:	18b9c83a 	sub	fp,r3,r2
   1c24c:	b00b883a 	mov	r5,r22
   1c250:	e009883a 	mov	r4,fp
   1c254:	000cc540 	call	cc54 <__umodsi3>
   1c258:	b00b883a 	mov	r5,r22
   1c25c:	e009883a 	mov	r4,fp
   1c260:	d8800215 	stw	r2,8(sp)
   1c264:	000cbf00 	call	cbf0 <__udivsi3>
   1c268:	100b883a 	mov	r5,r2
   1c26c:	b809883a 	mov	r4,r23
   1c270:	102d883a 	mov	r22,r2
   1c274:	000ccac0 	call	ccac <__mulsi3>
   1c278:	d9800217 	ldw	r6,8(sp)
   1c27c:	d8c00017 	ldw	r3,0(sp)
   1c280:	300c943a 	slli	r6,r6,16
   1c284:	1a3fffcc 	andi	r8,r3,65535
   1c288:	4190b03a 	or	r8,r8,r6
   1c28c:	4080042e 	bgeu	r8,r2,1c2a0 <__umoddi3+0x3cc>
   1c290:	4551883a 	add	r8,r8,r21
   1c294:	b0ffffc4 	addi	r3,r22,-1
   1c298:	45406f2e 	bgeu	r8,r21,1c458 <__umoddi3+0x584>
   1c29c:	182d883a 	mov	r22,r3
   1c2a0:	880e943a 	slli	r7,r17,16
   1c2a4:	9006d43a 	srli	r3,r18,16
   1c2a8:	91bfffcc 	andi	r6,r18,65535
   1c2ac:	3dacb03a 	or	r22,r7,r22
   1c2b0:	b02ed43a 	srli	r23,r22,16
   1c2b4:	b5bfffcc 	andi	r22,r22,65535
   1c2b8:	300b883a 	mov	r5,r6
   1c2bc:	b009883a 	mov	r4,r22
   1c2c0:	40a3c83a 	sub	r17,r8,r2
   1c2c4:	d8c00115 	stw	r3,4(sp)
   1c2c8:	d9800215 	stw	r6,8(sp)
   1c2cc:	000ccac0 	call	ccac <__mulsi3>
   1c2d0:	d9800217 	ldw	r6,8(sp)
   1c2d4:	b809883a 	mov	r4,r23
   1c2d8:	1039883a 	mov	fp,r2
   1c2dc:	300b883a 	mov	r5,r6
   1c2e0:	000ccac0 	call	ccac <__mulsi3>
   1c2e4:	d8c00117 	ldw	r3,4(sp)
   1c2e8:	b809883a 	mov	r4,r23
   1c2ec:	d8800215 	stw	r2,8(sp)
   1c2f0:	180b883a 	mov	r5,r3
   1c2f4:	000ccac0 	call	ccac <__mulsi3>
   1c2f8:	d8c00117 	ldw	r3,4(sp)
   1c2fc:	b009883a 	mov	r4,r22
   1c300:	102f883a 	mov	r23,r2
   1c304:	180b883a 	mov	r5,r3
   1c308:	000ccac0 	call	ccac <__mulsi3>
   1c30c:	d9800217 	ldw	r6,8(sp)
   1c310:	e006d43a 	srli	r3,fp,16
   1c314:	1185883a 	add	r2,r2,r6
   1c318:	1885883a 	add	r2,r3,r2
   1c31c:	1180022e 	bgeu	r2,r6,1c328 <__umoddi3+0x454>
   1c320:	00c00074 	movhi	r3,1
   1c324:	b8ef883a 	add	r23,r23,r3
   1c328:	1006d43a 	srli	r3,r2,16
   1c32c:	1004943a 	slli	r2,r2,16
   1c330:	e73fffcc 	andi	fp,fp,65535
   1c334:	1dc7883a 	add	r3,r3,r23
   1c338:	1739883a 	add	fp,r2,fp
   1c33c:	88c03a36 	bltu	r17,r3,1c428 <__umoddi3+0x554>
   1c340:	88c05126 	beq	r17,r3,1c488 <__umoddi3+0x5b4>
   1c344:	88c9c83a 	sub	r4,r17,r3
   1c348:	e00f883a 	mov	r7,fp
   1c34c:	81cfc83a 	sub	r7,r16,r7
   1c350:	81c7803a 	cmpltu	r3,r16,r7
   1c354:	20c7c83a 	sub	r3,r4,r3
   1c358:	1cc4983a 	sll	r2,r3,r19
   1c35c:	3d0ed83a 	srl	r7,r7,r20
   1c360:	1d06d83a 	srl	r3,r3,r20
   1c364:	11c4b03a 	or	r2,r2,r7
   1c368:	003f7c06 	br	1c15c <__alt_data_end+0xfc01c15c>
   1c36c:	9ca6983a 	sll	r19,r19,r18
   1c370:	88f8d83a 	srl	fp,r17,r3
   1c374:	80c4d83a 	srl	r2,r16,r3
   1c378:	982cd43a 	srli	r22,r19,16
   1c37c:	8ca2983a 	sll	r17,r17,r18
   1c380:	e009883a 	mov	r4,fp
   1c384:	b00b883a 	mov	r5,r22
   1c388:	146ab03a 	or	r21,r2,r17
   1c38c:	000cc540 	call	cc54 <__umodsi3>
   1c390:	b00b883a 	mov	r5,r22
   1c394:	e009883a 	mov	r4,fp
   1c398:	1029883a 	mov	r20,r2
   1c39c:	9dffffcc 	andi	r23,r19,65535
   1c3a0:	000cbf00 	call	cbf0 <__udivsi3>
   1c3a4:	b809883a 	mov	r4,r23
   1c3a8:	100b883a 	mov	r5,r2
   1c3ac:	000ccac0 	call	ccac <__mulsi3>
   1c3b0:	a008943a 	slli	r4,r20,16
   1c3b4:	a806d43a 	srli	r3,r21,16
   1c3b8:	84a8983a 	sll	r20,r16,r18
   1c3bc:	1906b03a 	or	r3,r3,r4
   1c3c0:	1880042e 	bgeu	r3,r2,1c3d4 <__umoddi3+0x500>
   1c3c4:	1cc7883a 	add	r3,r3,r19
   1c3c8:	1cc00236 	bltu	r3,r19,1c3d4 <__umoddi3+0x500>
   1c3cc:	1880012e 	bgeu	r3,r2,1c3d4 <__umoddi3+0x500>
   1c3d0:	1cc7883a 	add	r3,r3,r19
   1c3d4:	18a3c83a 	sub	r17,r3,r2
   1c3d8:	b00b883a 	mov	r5,r22
   1c3dc:	8809883a 	mov	r4,r17
   1c3e0:	000cc540 	call	cc54 <__umodsi3>
   1c3e4:	b00b883a 	mov	r5,r22
   1c3e8:	8809883a 	mov	r4,r17
   1c3ec:	1021883a 	mov	r16,r2
   1c3f0:	000cbf00 	call	cbf0 <__udivsi3>
   1c3f4:	100b883a 	mov	r5,r2
   1c3f8:	b809883a 	mov	r4,r23
   1c3fc:	8020943a 	slli	r16,r16,16
   1c400:	000ccac0 	call	ccac <__mulsi3>
   1c404:	a8ffffcc 	andi	r3,r21,65535
   1c408:	1c06b03a 	or	r3,r3,r16
   1c40c:	1880042e 	bgeu	r3,r2,1c420 <__umoddi3+0x54c>
   1c410:	1cc7883a 	add	r3,r3,r19
   1c414:	1cc00236 	bltu	r3,r19,1c420 <__umoddi3+0x54c>
   1c418:	1880012e 	bgeu	r3,r2,1c420 <__umoddi3+0x54c>
   1c41c:	1cc7883a 	add	r3,r3,r19
   1c420:	18a3c83a 	sub	r17,r3,r2
   1c424:	003f2906 	br	1c0cc <__alt_data_end+0xfc01c0cc>
   1c428:	e48fc83a 	sub	r7,fp,r18
   1c42c:	1d49c83a 	sub	r4,r3,r21
   1c430:	e1f9803a 	cmpltu	fp,fp,r7
   1c434:	2739c83a 	sub	fp,r4,fp
   1c438:	8f09c83a 	sub	r4,r17,fp
   1c43c:	003fc306 	br	1c34c <__alt_data_end+0xfc01c34c>
   1c440:	01000604 	movi	r4,24
   1c444:	003ef906 	br	1c02c <__alt_data_end+0xfc01c02c>
   1c448:	00800604 	movi	r2,24
   1c44c:	003f1306 	br	1c09c <__alt_data_end+0xfc01c09c>
   1c450:	01000604 	movi	r4,24
   1c454:	003eb606 	br	1bf30 <__alt_data_end+0xfc01bf30>
   1c458:	40bf902e 	bgeu	r8,r2,1c29c <__alt_data_end+0xfc01c29c>
   1c45c:	b5bfff84 	addi	r22,r22,-2
   1c460:	4551883a 	add	r8,r8,r21
   1c464:	003f8e06 	br	1c2a0 <__alt_data_end+0xfc01c2a0>
   1c468:	18bf762e 	bgeu	r3,r2,1c244 <__alt_data_end+0xfc01c244>
   1c46c:	8c7fff84 	addi	r17,r17,-2
   1c470:	1d47883a 	add	r3,r3,r21
   1c474:	003f7406 	br	1c248 <__alt_data_end+0xfc01c248>
   1c478:	1cc7883a 	add	r3,r3,r19
   1c47c:	003ecd06 	br	1bfb4 <__alt_data_end+0xfc01bfb4>
   1c480:	8005883a 	mov	r2,r16
   1c484:	003ef806 	br	1c068 <__alt_data_end+0xfc01c068>
   1c488:	873fe736 	bltu	r16,fp,1c428 <__alt_data_end+0xfc01c428>
   1c48c:	e00f883a 	mov	r7,fp
   1c490:	0009883a 	mov	r4,zero
   1c494:	003fad06 	br	1c34c <__alt_data_end+0xfc01c34c>

0001c498 <__adddf3>:
   1c498:	02c00434 	movhi	r11,16
   1c49c:	5affffc4 	addi	r11,r11,-1
   1c4a0:	2806d7fa 	srli	r3,r5,31
   1c4a4:	2ad4703a 	and	r10,r5,r11
   1c4a8:	3ad2703a 	and	r9,r7,r11
   1c4ac:	3804d53a 	srli	r2,r7,20
   1c4b0:	3018d77a 	srli	r12,r6,29
   1c4b4:	280ad53a 	srli	r5,r5,20
   1c4b8:	501490fa 	slli	r10,r10,3
   1c4bc:	2010d77a 	srli	r8,r4,29
   1c4c0:	481290fa 	slli	r9,r9,3
   1c4c4:	380ed7fa 	srli	r7,r7,31
   1c4c8:	defffb04 	addi	sp,sp,-20
   1c4cc:	dc800215 	stw	r18,8(sp)
   1c4d0:	dc400115 	stw	r17,4(sp)
   1c4d4:	dc000015 	stw	r16,0(sp)
   1c4d8:	dfc00415 	stw	ra,16(sp)
   1c4dc:	dcc00315 	stw	r19,12(sp)
   1c4e0:	1c803fcc 	andi	r18,r3,255
   1c4e4:	2c01ffcc 	andi	r16,r5,2047
   1c4e8:	5210b03a 	or	r8,r10,r8
   1c4ec:	202290fa 	slli	r17,r4,3
   1c4f0:	1081ffcc 	andi	r2,r2,2047
   1c4f4:	4b12b03a 	or	r9,r9,r12
   1c4f8:	300c90fa 	slli	r6,r6,3
   1c4fc:	91c07526 	beq	r18,r7,1c6d4 <__adddf3+0x23c>
   1c500:	8087c83a 	sub	r3,r16,r2
   1c504:	00c0ab0e 	bge	zero,r3,1c7b4 <__adddf3+0x31c>
   1c508:	10002a1e 	bne	r2,zero,1c5b4 <__adddf3+0x11c>
   1c50c:	4984b03a 	or	r2,r9,r6
   1c510:	1000961e 	bne	r2,zero,1c76c <__adddf3+0x2d4>
   1c514:	888001cc 	andi	r2,r17,7
   1c518:	10000726 	beq	r2,zero,1c538 <__adddf3+0xa0>
   1c51c:	888003cc 	andi	r2,r17,15
   1c520:	00c00104 	movi	r3,4
   1c524:	10c00426 	beq	r2,r3,1c538 <__adddf3+0xa0>
   1c528:	88c7883a 	add	r3,r17,r3
   1c52c:	1c63803a 	cmpltu	r17,r3,r17
   1c530:	4451883a 	add	r8,r8,r17
   1c534:	1823883a 	mov	r17,r3
   1c538:	4080202c 	andhi	r2,r8,128
   1c53c:	10005926 	beq	r2,zero,1c6a4 <__adddf3+0x20c>
   1c540:	84000044 	addi	r16,r16,1
   1c544:	0081ffc4 	movi	r2,2047
   1c548:	8080ba26 	beq	r16,r2,1c834 <__adddf3+0x39c>
   1c54c:	00bfe034 	movhi	r2,65408
   1c550:	10bfffc4 	addi	r2,r2,-1
   1c554:	4090703a 	and	r8,r8,r2
   1c558:	4004977a 	slli	r2,r8,29
   1c55c:	4010927a 	slli	r8,r8,9
   1c560:	8822d0fa 	srli	r17,r17,3
   1c564:	8401ffcc 	andi	r16,r16,2047
   1c568:	4010d33a 	srli	r8,r8,12
   1c56c:	9007883a 	mov	r3,r18
   1c570:	1444b03a 	or	r2,r2,r17
   1c574:	8401ffcc 	andi	r16,r16,2047
   1c578:	8020953a 	slli	r16,r16,20
   1c57c:	18c03fcc 	andi	r3,r3,255
   1c580:	01000434 	movhi	r4,16
   1c584:	213fffc4 	addi	r4,r4,-1
   1c588:	180697fa 	slli	r3,r3,31
   1c58c:	4110703a 	and	r8,r8,r4
   1c590:	4410b03a 	or	r8,r8,r16
   1c594:	40c6b03a 	or	r3,r8,r3
   1c598:	dfc00417 	ldw	ra,16(sp)
   1c59c:	dcc00317 	ldw	r19,12(sp)
   1c5a0:	dc800217 	ldw	r18,8(sp)
   1c5a4:	dc400117 	ldw	r17,4(sp)
   1c5a8:	dc000017 	ldw	r16,0(sp)
   1c5ac:	dec00504 	addi	sp,sp,20
   1c5b0:	f800283a 	ret
   1c5b4:	0081ffc4 	movi	r2,2047
   1c5b8:	80bfd626 	beq	r16,r2,1c514 <__alt_data_end+0xfc01c514>
   1c5bc:	4a402034 	orhi	r9,r9,128
   1c5c0:	00800e04 	movi	r2,56
   1c5c4:	10c09f16 	blt	r2,r3,1c844 <__adddf3+0x3ac>
   1c5c8:	008007c4 	movi	r2,31
   1c5cc:	10c0c216 	blt	r2,r3,1c8d8 <__adddf3+0x440>
   1c5d0:	00800804 	movi	r2,32
   1c5d4:	10c5c83a 	sub	r2,r2,r3
   1c5d8:	488a983a 	sll	r5,r9,r2
   1c5dc:	30c8d83a 	srl	r4,r6,r3
   1c5e0:	3084983a 	sll	r2,r6,r2
   1c5e4:	48c6d83a 	srl	r3,r9,r3
   1c5e8:	290cb03a 	or	r6,r5,r4
   1c5ec:	1004c03a 	cmpne	r2,r2,zero
   1c5f0:	308cb03a 	or	r6,r6,r2
   1c5f4:	898dc83a 	sub	r6,r17,r6
   1c5f8:	89a3803a 	cmpltu	r17,r17,r6
   1c5fc:	40d1c83a 	sub	r8,r8,r3
   1c600:	4451c83a 	sub	r8,r8,r17
   1c604:	3023883a 	mov	r17,r6
   1c608:	4080202c 	andhi	r2,r8,128
   1c60c:	10002326 	beq	r2,zero,1c69c <__adddf3+0x204>
   1c610:	04c02034 	movhi	r19,128
   1c614:	9cffffc4 	addi	r19,r19,-1
   1c618:	44e6703a 	and	r19,r8,r19
   1c61c:	98007626 	beq	r19,zero,1c7f8 <__adddf3+0x360>
   1c620:	9809883a 	mov	r4,r19
   1c624:	000e1640 	call	e164 <__clzsi2>
   1c628:	10fffe04 	addi	r3,r2,-8
   1c62c:	010007c4 	movi	r4,31
   1c630:	20c07716 	blt	r4,r3,1c810 <__adddf3+0x378>
   1c634:	00800804 	movi	r2,32
   1c638:	10c5c83a 	sub	r2,r2,r3
   1c63c:	8884d83a 	srl	r2,r17,r2
   1c640:	98d0983a 	sll	r8,r19,r3
   1c644:	88e2983a 	sll	r17,r17,r3
   1c648:	1204b03a 	or	r2,r2,r8
   1c64c:	1c007416 	blt	r3,r16,1c820 <__adddf3+0x388>
   1c650:	1c21c83a 	sub	r16,r3,r16
   1c654:	82000044 	addi	r8,r16,1
   1c658:	00c007c4 	movi	r3,31
   1c65c:	1a009116 	blt	r3,r8,1c8a4 <__adddf3+0x40c>
   1c660:	00c00804 	movi	r3,32
   1c664:	1a07c83a 	sub	r3,r3,r8
   1c668:	8a08d83a 	srl	r4,r17,r8
   1c66c:	88e2983a 	sll	r17,r17,r3
   1c670:	10c6983a 	sll	r3,r2,r3
   1c674:	1210d83a 	srl	r8,r2,r8
   1c678:	8804c03a 	cmpne	r2,r17,zero
   1c67c:	1906b03a 	or	r3,r3,r4
   1c680:	18a2b03a 	or	r17,r3,r2
   1c684:	0021883a 	mov	r16,zero
   1c688:	003fa206 	br	1c514 <__alt_data_end+0xfc01c514>
   1c68c:	1890b03a 	or	r8,r3,r2
   1c690:	40017d26 	beq	r8,zero,1cc88 <__adddf3+0x7f0>
   1c694:	1011883a 	mov	r8,r2
   1c698:	1823883a 	mov	r17,r3
   1c69c:	888001cc 	andi	r2,r17,7
   1c6a0:	103f9e1e 	bne	r2,zero,1c51c <__alt_data_end+0xfc01c51c>
   1c6a4:	4004977a 	slli	r2,r8,29
   1c6a8:	8822d0fa 	srli	r17,r17,3
   1c6ac:	4010d0fa 	srli	r8,r8,3
   1c6b0:	9007883a 	mov	r3,r18
   1c6b4:	1444b03a 	or	r2,r2,r17
   1c6b8:	0101ffc4 	movi	r4,2047
   1c6bc:	81002426 	beq	r16,r4,1c750 <__adddf3+0x2b8>
   1c6c0:	8120703a 	and	r16,r16,r4
   1c6c4:	01000434 	movhi	r4,16
   1c6c8:	213fffc4 	addi	r4,r4,-1
   1c6cc:	4110703a 	and	r8,r8,r4
   1c6d0:	003fa806 	br	1c574 <__alt_data_end+0xfc01c574>
   1c6d4:	8089c83a 	sub	r4,r16,r2
   1c6d8:	01005e0e 	bge	zero,r4,1c854 <__adddf3+0x3bc>
   1c6dc:	10002b26 	beq	r2,zero,1c78c <__adddf3+0x2f4>
   1c6e0:	0081ffc4 	movi	r2,2047
   1c6e4:	80bf8b26 	beq	r16,r2,1c514 <__alt_data_end+0xfc01c514>
   1c6e8:	4a402034 	orhi	r9,r9,128
   1c6ec:	00800e04 	movi	r2,56
   1c6f0:	1100a40e 	bge	r2,r4,1c984 <__adddf3+0x4ec>
   1c6f4:	498cb03a 	or	r6,r9,r6
   1c6f8:	300ac03a 	cmpne	r5,r6,zero
   1c6fc:	0013883a 	mov	r9,zero
   1c700:	2c4b883a 	add	r5,r5,r17
   1c704:	2c63803a 	cmpltu	r17,r5,r17
   1c708:	4a11883a 	add	r8,r9,r8
   1c70c:	8a11883a 	add	r8,r17,r8
   1c710:	2823883a 	mov	r17,r5
   1c714:	4080202c 	andhi	r2,r8,128
   1c718:	103fe026 	beq	r2,zero,1c69c <__alt_data_end+0xfc01c69c>
   1c71c:	84000044 	addi	r16,r16,1
   1c720:	0081ffc4 	movi	r2,2047
   1c724:	8080d226 	beq	r16,r2,1ca70 <__adddf3+0x5d8>
   1c728:	00bfe034 	movhi	r2,65408
   1c72c:	10bfffc4 	addi	r2,r2,-1
   1c730:	4090703a 	and	r8,r8,r2
   1c734:	880ad07a 	srli	r5,r17,1
   1c738:	400897fa 	slli	r4,r8,31
   1c73c:	88c0004c 	andi	r3,r17,1
   1c740:	28e2b03a 	or	r17,r5,r3
   1c744:	4010d07a 	srli	r8,r8,1
   1c748:	2462b03a 	or	r17,r4,r17
   1c74c:	003f7106 	br	1c514 <__alt_data_end+0xfc01c514>
   1c750:	4088b03a 	or	r4,r8,r2
   1c754:	20014526 	beq	r4,zero,1cc6c <__adddf3+0x7d4>
   1c758:	01000434 	movhi	r4,16
   1c75c:	42000234 	orhi	r8,r8,8
   1c760:	213fffc4 	addi	r4,r4,-1
   1c764:	4110703a 	and	r8,r8,r4
   1c768:	003f8206 	br	1c574 <__alt_data_end+0xfc01c574>
   1c76c:	18ffffc4 	addi	r3,r3,-1
   1c770:	1800491e 	bne	r3,zero,1c898 <__adddf3+0x400>
   1c774:	898bc83a 	sub	r5,r17,r6
   1c778:	8963803a 	cmpltu	r17,r17,r5
   1c77c:	4251c83a 	sub	r8,r8,r9
   1c780:	4451c83a 	sub	r8,r8,r17
   1c784:	2823883a 	mov	r17,r5
   1c788:	003f9f06 	br	1c608 <__alt_data_end+0xfc01c608>
   1c78c:	4984b03a 	or	r2,r9,r6
   1c790:	103f6026 	beq	r2,zero,1c514 <__alt_data_end+0xfc01c514>
   1c794:	213fffc4 	addi	r4,r4,-1
   1c798:	2000931e 	bne	r4,zero,1c9e8 <__adddf3+0x550>
   1c79c:	898d883a 	add	r6,r17,r6
   1c7a0:	3463803a 	cmpltu	r17,r6,r17
   1c7a4:	4251883a 	add	r8,r8,r9
   1c7a8:	8a11883a 	add	r8,r17,r8
   1c7ac:	3023883a 	mov	r17,r6
   1c7b0:	003fd806 	br	1c714 <__alt_data_end+0xfc01c714>
   1c7b4:	1800541e 	bne	r3,zero,1c908 <__adddf3+0x470>
   1c7b8:	80800044 	addi	r2,r16,1
   1c7bc:	1081ffcc 	andi	r2,r2,2047
   1c7c0:	00c00044 	movi	r3,1
   1c7c4:	1880a00e 	bge	r3,r2,1ca48 <__adddf3+0x5b0>
   1c7c8:	8989c83a 	sub	r4,r17,r6
   1c7cc:	8905803a 	cmpltu	r2,r17,r4
   1c7d0:	4267c83a 	sub	r19,r8,r9
   1c7d4:	98a7c83a 	sub	r19,r19,r2
   1c7d8:	9880202c 	andhi	r2,r19,128
   1c7dc:	10006326 	beq	r2,zero,1c96c <__adddf3+0x4d4>
   1c7e0:	3463c83a 	sub	r17,r6,r17
   1c7e4:	4a07c83a 	sub	r3,r9,r8
   1c7e8:	344d803a 	cmpltu	r6,r6,r17
   1c7ec:	19a7c83a 	sub	r19,r3,r6
   1c7f0:	3825883a 	mov	r18,r7
   1c7f4:	983f8a1e 	bne	r19,zero,1c620 <__alt_data_end+0xfc01c620>
   1c7f8:	8809883a 	mov	r4,r17
   1c7fc:	000e1640 	call	e164 <__clzsi2>
   1c800:	10800804 	addi	r2,r2,32
   1c804:	10fffe04 	addi	r3,r2,-8
   1c808:	010007c4 	movi	r4,31
   1c80c:	20ff890e 	bge	r4,r3,1c634 <__alt_data_end+0xfc01c634>
   1c810:	10bff604 	addi	r2,r2,-40
   1c814:	8884983a 	sll	r2,r17,r2
   1c818:	0023883a 	mov	r17,zero
   1c81c:	1c3f8c0e 	bge	r3,r16,1c650 <__alt_data_end+0xfc01c650>
   1c820:	023fe034 	movhi	r8,65408
   1c824:	423fffc4 	addi	r8,r8,-1
   1c828:	80e1c83a 	sub	r16,r16,r3
   1c82c:	1210703a 	and	r8,r2,r8
   1c830:	003f3806 	br	1c514 <__alt_data_end+0xfc01c514>
   1c834:	9007883a 	mov	r3,r18
   1c838:	0011883a 	mov	r8,zero
   1c83c:	0005883a 	mov	r2,zero
   1c840:	003f4c06 	br	1c574 <__alt_data_end+0xfc01c574>
   1c844:	498cb03a 	or	r6,r9,r6
   1c848:	300cc03a 	cmpne	r6,r6,zero
   1c84c:	0007883a 	mov	r3,zero
   1c850:	003f6806 	br	1c5f4 <__alt_data_end+0xfc01c5f4>
   1c854:	20009c1e 	bne	r4,zero,1cac8 <__adddf3+0x630>
   1c858:	80800044 	addi	r2,r16,1
   1c85c:	1141ffcc 	andi	r5,r2,2047
   1c860:	01000044 	movi	r4,1
   1c864:	2140670e 	bge	r4,r5,1ca04 <__adddf3+0x56c>
   1c868:	0101ffc4 	movi	r4,2047
   1c86c:	11007f26 	beq	r2,r4,1ca6c <__adddf3+0x5d4>
   1c870:	898d883a 	add	r6,r17,r6
   1c874:	4247883a 	add	r3,r8,r9
   1c878:	3451803a 	cmpltu	r8,r6,r17
   1c87c:	40d1883a 	add	r8,r8,r3
   1c880:	402297fa 	slli	r17,r8,31
   1c884:	300cd07a 	srli	r6,r6,1
   1c888:	4010d07a 	srli	r8,r8,1
   1c88c:	1021883a 	mov	r16,r2
   1c890:	89a2b03a 	or	r17,r17,r6
   1c894:	003f1f06 	br	1c514 <__alt_data_end+0xfc01c514>
   1c898:	0081ffc4 	movi	r2,2047
   1c89c:	80bf481e 	bne	r16,r2,1c5c0 <__alt_data_end+0xfc01c5c0>
   1c8a0:	003f1c06 	br	1c514 <__alt_data_end+0xfc01c514>
   1c8a4:	843ff844 	addi	r16,r16,-31
   1c8a8:	01000804 	movi	r4,32
   1c8ac:	1406d83a 	srl	r3,r2,r16
   1c8b0:	41005026 	beq	r8,r4,1c9f4 <__adddf3+0x55c>
   1c8b4:	01001004 	movi	r4,64
   1c8b8:	2211c83a 	sub	r8,r4,r8
   1c8bc:	1204983a 	sll	r2,r2,r8
   1c8c0:	88a2b03a 	or	r17,r17,r2
   1c8c4:	8822c03a 	cmpne	r17,r17,zero
   1c8c8:	1c62b03a 	or	r17,r3,r17
   1c8cc:	0011883a 	mov	r8,zero
   1c8d0:	0021883a 	mov	r16,zero
   1c8d4:	003f7106 	br	1c69c <__alt_data_end+0xfc01c69c>
   1c8d8:	193ff804 	addi	r4,r3,-32
   1c8dc:	00800804 	movi	r2,32
   1c8e0:	4908d83a 	srl	r4,r9,r4
   1c8e4:	18804526 	beq	r3,r2,1c9fc <__adddf3+0x564>
   1c8e8:	00801004 	movi	r2,64
   1c8ec:	10c5c83a 	sub	r2,r2,r3
   1c8f0:	4886983a 	sll	r3,r9,r2
   1c8f4:	198cb03a 	or	r6,r3,r6
   1c8f8:	300cc03a 	cmpne	r6,r6,zero
   1c8fc:	218cb03a 	or	r6,r4,r6
   1c900:	0007883a 	mov	r3,zero
   1c904:	003f3b06 	br	1c5f4 <__alt_data_end+0xfc01c5f4>
   1c908:	80002a26 	beq	r16,zero,1c9b4 <__adddf3+0x51c>
   1c90c:	0101ffc4 	movi	r4,2047
   1c910:	11006826 	beq	r2,r4,1cab4 <__adddf3+0x61c>
   1c914:	00c7c83a 	sub	r3,zero,r3
   1c918:	42002034 	orhi	r8,r8,128
   1c91c:	01000e04 	movi	r4,56
   1c920:	20c07c16 	blt	r4,r3,1cb14 <__adddf3+0x67c>
   1c924:	010007c4 	movi	r4,31
   1c928:	20c0da16 	blt	r4,r3,1cc94 <__adddf3+0x7fc>
   1c92c:	01000804 	movi	r4,32
   1c930:	20c9c83a 	sub	r4,r4,r3
   1c934:	4114983a 	sll	r10,r8,r4
   1c938:	88cad83a 	srl	r5,r17,r3
   1c93c:	8908983a 	sll	r4,r17,r4
   1c940:	40c6d83a 	srl	r3,r8,r3
   1c944:	5162b03a 	or	r17,r10,r5
   1c948:	2008c03a 	cmpne	r4,r4,zero
   1c94c:	8922b03a 	or	r17,r17,r4
   1c950:	3463c83a 	sub	r17,r6,r17
   1c954:	48c7c83a 	sub	r3,r9,r3
   1c958:	344d803a 	cmpltu	r6,r6,r17
   1c95c:	1991c83a 	sub	r8,r3,r6
   1c960:	1021883a 	mov	r16,r2
   1c964:	3825883a 	mov	r18,r7
   1c968:	003f2706 	br	1c608 <__alt_data_end+0xfc01c608>
   1c96c:	24d0b03a 	or	r8,r4,r19
   1c970:	40001b1e 	bne	r8,zero,1c9e0 <__adddf3+0x548>
   1c974:	0005883a 	mov	r2,zero
   1c978:	0007883a 	mov	r3,zero
   1c97c:	0021883a 	mov	r16,zero
   1c980:	003f4d06 	br	1c6b8 <__alt_data_end+0xfc01c6b8>
   1c984:	008007c4 	movi	r2,31
   1c988:	11003c16 	blt	r2,r4,1ca7c <__adddf3+0x5e4>
   1c98c:	00800804 	movi	r2,32
   1c990:	1105c83a 	sub	r2,r2,r4
   1c994:	488e983a 	sll	r7,r9,r2
   1c998:	310ad83a 	srl	r5,r6,r4
   1c99c:	3084983a 	sll	r2,r6,r2
   1c9a0:	4912d83a 	srl	r9,r9,r4
   1c9a4:	394ab03a 	or	r5,r7,r5
   1c9a8:	1004c03a 	cmpne	r2,r2,zero
   1c9ac:	288ab03a 	or	r5,r5,r2
   1c9b0:	003f5306 	br	1c700 <__alt_data_end+0xfc01c700>
   1c9b4:	4448b03a 	or	r4,r8,r17
   1c9b8:	20003e26 	beq	r4,zero,1cab4 <__adddf3+0x61c>
   1c9bc:	00c6303a 	nor	r3,zero,r3
   1c9c0:	18003a1e 	bne	r3,zero,1caac <__adddf3+0x614>
   1c9c4:	3463c83a 	sub	r17,r6,r17
   1c9c8:	4a07c83a 	sub	r3,r9,r8
   1c9cc:	344d803a 	cmpltu	r6,r6,r17
   1c9d0:	1991c83a 	sub	r8,r3,r6
   1c9d4:	1021883a 	mov	r16,r2
   1c9d8:	3825883a 	mov	r18,r7
   1c9dc:	003f0a06 	br	1c608 <__alt_data_end+0xfc01c608>
   1c9e0:	2023883a 	mov	r17,r4
   1c9e4:	003f0d06 	br	1c61c <__alt_data_end+0xfc01c61c>
   1c9e8:	0081ffc4 	movi	r2,2047
   1c9ec:	80bf3f1e 	bne	r16,r2,1c6ec <__alt_data_end+0xfc01c6ec>
   1c9f0:	003ec806 	br	1c514 <__alt_data_end+0xfc01c514>
   1c9f4:	0005883a 	mov	r2,zero
   1c9f8:	003fb106 	br	1c8c0 <__alt_data_end+0xfc01c8c0>
   1c9fc:	0007883a 	mov	r3,zero
   1ca00:	003fbc06 	br	1c8f4 <__alt_data_end+0xfc01c8f4>
   1ca04:	4444b03a 	or	r2,r8,r17
   1ca08:	8000871e 	bne	r16,zero,1cc28 <__adddf3+0x790>
   1ca0c:	1000ba26 	beq	r2,zero,1ccf8 <__adddf3+0x860>
   1ca10:	4984b03a 	or	r2,r9,r6
   1ca14:	103ebf26 	beq	r2,zero,1c514 <__alt_data_end+0xfc01c514>
   1ca18:	8985883a 	add	r2,r17,r6
   1ca1c:	4247883a 	add	r3,r8,r9
   1ca20:	1451803a 	cmpltu	r8,r2,r17
   1ca24:	40d1883a 	add	r8,r8,r3
   1ca28:	40c0202c 	andhi	r3,r8,128
   1ca2c:	1023883a 	mov	r17,r2
   1ca30:	183f1a26 	beq	r3,zero,1c69c <__alt_data_end+0xfc01c69c>
   1ca34:	00bfe034 	movhi	r2,65408
   1ca38:	10bfffc4 	addi	r2,r2,-1
   1ca3c:	2021883a 	mov	r16,r4
   1ca40:	4090703a 	and	r8,r8,r2
   1ca44:	003eb306 	br	1c514 <__alt_data_end+0xfc01c514>
   1ca48:	4444b03a 	or	r2,r8,r17
   1ca4c:	8000291e 	bne	r16,zero,1caf4 <__adddf3+0x65c>
   1ca50:	10004b1e 	bne	r2,zero,1cb80 <__adddf3+0x6e8>
   1ca54:	4990b03a 	or	r8,r9,r6
   1ca58:	40008b26 	beq	r8,zero,1cc88 <__adddf3+0x7f0>
   1ca5c:	4811883a 	mov	r8,r9
   1ca60:	3023883a 	mov	r17,r6
   1ca64:	3825883a 	mov	r18,r7
   1ca68:	003eaa06 	br	1c514 <__alt_data_end+0xfc01c514>
   1ca6c:	1021883a 	mov	r16,r2
   1ca70:	0011883a 	mov	r8,zero
   1ca74:	0005883a 	mov	r2,zero
   1ca78:	003f0f06 	br	1c6b8 <__alt_data_end+0xfc01c6b8>
   1ca7c:	217ff804 	addi	r5,r4,-32
   1ca80:	00800804 	movi	r2,32
   1ca84:	494ad83a 	srl	r5,r9,r5
   1ca88:	20807d26 	beq	r4,r2,1cc80 <__adddf3+0x7e8>
   1ca8c:	00801004 	movi	r2,64
   1ca90:	1109c83a 	sub	r4,r2,r4
   1ca94:	4912983a 	sll	r9,r9,r4
   1ca98:	498cb03a 	or	r6,r9,r6
   1ca9c:	300cc03a 	cmpne	r6,r6,zero
   1caa0:	298ab03a 	or	r5,r5,r6
   1caa4:	0013883a 	mov	r9,zero
   1caa8:	003f1506 	br	1c700 <__alt_data_end+0xfc01c700>
   1caac:	0101ffc4 	movi	r4,2047
   1cab0:	113f9a1e 	bne	r2,r4,1c91c <__alt_data_end+0xfc01c91c>
   1cab4:	4811883a 	mov	r8,r9
   1cab8:	3023883a 	mov	r17,r6
   1cabc:	1021883a 	mov	r16,r2
   1cac0:	3825883a 	mov	r18,r7
   1cac4:	003e9306 	br	1c514 <__alt_data_end+0xfc01c514>
   1cac8:	8000161e 	bne	r16,zero,1cb24 <__adddf3+0x68c>
   1cacc:	444ab03a 	or	r5,r8,r17
   1cad0:	28005126 	beq	r5,zero,1cc18 <__adddf3+0x780>
   1cad4:	0108303a 	nor	r4,zero,r4
   1cad8:	20004d1e 	bne	r4,zero,1cc10 <__adddf3+0x778>
   1cadc:	89a3883a 	add	r17,r17,r6
   1cae0:	4253883a 	add	r9,r8,r9
   1cae4:	898d803a 	cmpltu	r6,r17,r6
   1cae8:	3251883a 	add	r8,r6,r9
   1caec:	1021883a 	mov	r16,r2
   1caf0:	003f0806 	br	1c714 <__alt_data_end+0xfc01c714>
   1caf4:	1000301e 	bne	r2,zero,1cbb8 <__adddf3+0x720>
   1caf8:	4984b03a 	or	r2,r9,r6
   1cafc:	10007126 	beq	r2,zero,1ccc4 <__adddf3+0x82c>
   1cb00:	4811883a 	mov	r8,r9
   1cb04:	3023883a 	mov	r17,r6
   1cb08:	3825883a 	mov	r18,r7
   1cb0c:	0401ffc4 	movi	r16,2047
   1cb10:	003e8006 	br	1c514 <__alt_data_end+0xfc01c514>
   1cb14:	4462b03a 	or	r17,r8,r17
   1cb18:	8822c03a 	cmpne	r17,r17,zero
   1cb1c:	0007883a 	mov	r3,zero
   1cb20:	003f8b06 	br	1c950 <__alt_data_end+0xfc01c950>
   1cb24:	0141ffc4 	movi	r5,2047
   1cb28:	11403b26 	beq	r2,r5,1cc18 <__adddf3+0x780>
   1cb2c:	0109c83a 	sub	r4,zero,r4
   1cb30:	42002034 	orhi	r8,r8,128
   1cb34:	01400e04 	movi	r5,56
   1cb38:	29006716 	blt	r5,r4,1ccd8 <__adddf3+0x840>
   1cb3c:	014007c4 	movi	r5,31
   1cb40:	29007016 	blt	r5,r4,1cd04 <__adddf3+0x86c>
   1cb44:	01400804 	movi	r5,32
   1cb48:	290bc83a 	sub	r5,r5,r4
   1cb4c:	4154983a 	sll	r10,r8,r5
   1cb50:	890ed83a 	srl	r7,r17,r4
   1cb54:	894a983a 	sll	r5,r17,r5
   1cb58:	4108d83a 	srl	r4,r8,r4
   1cb5c:	51e2b03a 	or	r17,r10,r7
   1cb60:	280ac03a 	cmpne	r5,r5,zero
   1cb64:	8962b03a 	or	r17,r17,r5
   1cb68:	89a3883a 	add	r17,r17,r6
   1cb6c:	2253883a 	add	r9,r4,r9
   1cb70:	898d803a 	cmpltu	r6,r17,r6
   1cb74:	3251883a 	add	r8,r6,r9
   1cb78:	1021883a 	mov	r16,r2
   1cb7c:	003ee506 	br	1c714 <__alt_data_end+0xfc01c714>
   1cb80:	4984b03a 	or	r2,r9,r6
   1cb84:	103e6326 	beq	r2,zero,1c514 <__alt_data_end+0xfc01c514>
   1cb88:	8987c83a 	sub	r3,r17,r6
   1cb8c:	88c9803a 	cmpltu	r4,r17,r3
   1cb90:	4245c83a 	sub	r2,r8,r9
   1cb94:	1105c83a 	sub	r2,r2,r4
   1cb98:	1100202c 	andhi	r4,r2,128
   1cb9c:	203ebb26 	beq	r4,zero,1c68c <__alt_data_end+0xfc01c68c>
   1cba0:	3463c83a 	sub	r17,r6,r17
   1cba4:	4a07c83a 	sub	r3,r9,r8
   1cba8:	344d803a 	cmpltu	r6,r6,r17
   1cbac:	1991c83a 	sub	r8,r3,r6
   1cbb0:	3825883a 	mov	r18,r7
   1cbb4:	003e5706 	br	1c514 <__alt_data_end+0xfc01c514>
   1cbb8:	4984b03a 	or	r2,r9,r6
   1cbbc:	10002e26 	beq	r2,zero,1cc78 <__adddf3+0x7e0>
   1cbc0:	4004d0fa 	srli	r2,r8,3
   1cbc4:	8822d0fa 	srli	r17,r17,3
   1cbc8:	4010977a 	slli	r8,r8,29
   1cbcc:	10c0022c 	andhi	r3,r2,8
   1cbd0:	4462b03a 	or	r17,r8,r17
   1cbd4:	18000826 	beq	r3,zero,1cbf8 <__adddf3+0x760>
   1cbd8:	4808d0fa 	srli	r4,r9,3
   1cbdc:	20c0022c 	andhi	r3,r4,8
   1cbe0:	1800051e 	bne	r3,zero,1cbf8 <__adddf3+0x760>
   1cbe4:	300cd0fa 	srli	r6,r6,3
   1cbe8:	4806977a 	slli	r3,r9,29
   1cbec:	2005883a 	mov	r2,r4
   1cbf0:	3825883a 	mov	r18,r7
   1cbf4:	19a2b03a 	or	r17,r3,r6
   1cbf8:	8810d77a 	srli	r8,r17,29
   1cbfc:	100490fa 	slli	r2,r2,3
   1cc00:	882290fa 	slli	r17,r17,3
   1cc04:	0401ffc4 	movi	r16,2047
   1cc08:	4090b03a 	or	r8,r8,r2
   1cc0c:	003e4106 	br	1c514 <__alt_data_end+0xfc01c514>
   1cc10:	0141ffc4 	movi	r5,2047
   1cc14:	117fc71e 	bne	r2,r5,1cb34 <__alt_data_end+0xfc01cb34>
   1cc18:	4811883a 	mov	r8,r9
   1cc1c:	3023883a 	mov	r17,r6
   1cc20:	1021883a 	mov	r16,r2
   1cc24:	003e3b06 	br	1c514 <__alt_data_end+0xfc01c514>
   1cc28:	10002f26 	beq	r2,zero,1cce8 <__adddf3+0x850>
   1cc2c:	4984b03a 	or	r2,r9,r6
   1cc30:	10001126 	beq	r2,zero,1cc78 <__adddf3+0x7e0>
   1cc34:	4004d0fa 	srli	r2,r8,3
   1cc38:	8822d0fa 	srli	r17,r17,3
   1cc3c:	4010977a 	slli	r8,r8,29
   1cc40:	10c0022c 	andhi	r3,r2,8
   1cc44:	4462b03a 	or	r17,r8,r17
   1cc48:	183feb26 	beq	r3,zero,1cbf8 <__alt_data_end+0xfc01cbf8>
   1cc4c:	4808d0fa 	srli	r4,r9,3
   1cc50:	20c0022c 	andhi	r3,r4,8
   1cc54:	183fe81e 	bne	r3,zero,1cbf8 <__alt_data_end+0xfc01cbf8>
   1cc58:	300cd0fa 	srli	r6,r6,3
   1cc5c:	4806977a 	slli	r3,r9,29
   1cc60:	2005883a 	mov	r2,r4
   1cc64:	19a2b03a 	or	r17,r3,r6
   1cc68:	003fe306 	br	1cbf8 <__alt_data_end+0xfc01cbf8>
   1cc6c:	0011883a 	mov	r8,zero
   1cc70:	0005883a 	mov	r2,zero
   1cc74:	003e3f06 	br	1c574 <__alt_data_end+0xfc01c574>
   1cc78:	0401ffc4 	movi	r16,2047
   1cc7c:	003e2506 	br	1c514 <__alt_data_end+0xfc01c514>
   1cc80:	0013883a 	mov	r9,zero
   1cc84:	003f8406 	br	1ca98 <__alt_data_end+0xfc01ca98>
   1cc88:	0005883a 	mov	r2,zero
   1cc8c:	0007883a 	mov	r3,zero
   1cc90:	003e8906 	br	1c6b8 <__alt_data_end+0xfc01c6b8>
   1cc94:	197ff804 	addi	r5,r3,-32
   1cc98:	01000804 	movi	r4,32
   1cc9c:	414ad83a 	srl	r5,r8,r5
   1cca0:	19002426 	beq	r3,r4,1cd34 <__adddf3+0x89c>
   1cca4:	01001004 	movi	r4,64
   1cca8:	20c7c83a 	sub	r3,r4,r3
   1ccac:	40c6983a 	sll	r3,r8,r3
   1ccb0:	1c46b03a 	or	r3,r3,r17
   1ccb4:	1806c03a 	cmpne	r3,r3,zero
   1ccb8:	28e2b03a 	or	r17,r5,r3
   1ccbc:	0007883a 	mov	r3,zero
   1ccc0:	003f2306 	br	1c950 <__alt_data_end+0xfc01c950>
   1ccc4:	0007883a 	mov	r3,zero
   1ccc8:	5811883a 	mov	r8,r11
   1cccc:	00bfffc4 	movi	r2,-1
   1ccd0:	0401ffc4 	movi	r16,2047
   1ccd4:	003e7806 	br	1c6b8 <__alt_data_end+0xfc01c6b8>
   1ccd8:	4462b03a 	or	r17,r8,r17
   1ccdc:	8822c03a 	cmpne	r17,r17,zero
   1cce0:	0009883a 	mov	r4,zero
   1cce4:	003fa006 	br	1cb68 <__alt_data_end+0xfc01cb68>
   1cce8:	4811883a 	mov	r8,r9
   1ccec:	3023883a 	mov	r17,r6
   1ccf0:	0401ffc4 	movi	r16,2047
   1ccf4:	003e0706 	br	1c514 <__alt_data_end+0xfc01c514>
   1ccf8:	4811883a 	mov	r8,r9
   1ccfc:	3023883a 	mov	r17,r6
   1cd00:	003e0406 	br	1c514 <__alt_data_end+0xfc01c514>
   1cd04:	21fff804 	addi	r7,r4,-32
   1cd08:	01400804 	movi	r5,32
   1cd0c:	41ced83a 	srl	r7,r8,r7
   1cd10:	21400a26 	beq	r4,r5,1cd3c <__adddf3+0x8a4>
   1cd14:	01401004 	movi	r5,64
   1cd18:	2909c83a 	sub	r4,r5,r4
   1cd1c:	4108983a 	sll	r4,r8,r4
   1cd20:	2448b03a 	or	r4,r4,r17
   1cd24:	2008c03a 	cmpne	r4,r4,zero
   1cd28:	3922b03a 	or	r17,r7,r4
   1cd2c:	0009883a 	mov	r4,zero
   1cd30:	003f8d06 	br	1cb68 <__alt_data_end+0xfc01cb68>
   1cd34:	0007883a 	mov	r3,zero
   1cd38:	003fdd06 	br	1ccb0 <__alt_data_end+0xfc01ccb0>
   1cd3c:	0009883a 	mov	r4,zero
   1cd40:	003ff706 	br	1cd20 <__alt_data_end+0xfc01cd20>

0001cd44 <__divdf3>:
   1cd44:	defff004 	addi	sp,sp,-64
   1cd48:	dc800815 	stw	r18,32(sp)
   1cd4c:	2824d53a 	srli	r18,r5,20
   1cd50:	dd800c15 	stw	r22,48(sp)
   1cd54:	282cd7fa 	srli	r22,r5,31
   1cd58:	dc000615 	stw	r16,24(sp)
   1cd5c:	04000434 	movhi	r16,16
   1cd60:	843fffc4 	addi	r16,r16,-1
   1cd64:	dfc00f15 	stw	ra,60(sp)
   1cd68:	df000e15 	stw	fp,56(sp)
   1cd6c:	ddc00d15 	stw	r23,52(sp)
   1cd70:	dd400b15 	stw	r21,44(sp)
   1cd74:	dd000a15 	stw	r20,40(sp)
   1cd78:	dcc00915 	stw	r19,36(sp)
   1cd7c:	dc400715 	stw	r17,28(sp)
   1cd80:	9481ffcc 	andi	r18,r18,2047
   1cd84:	2c20703a 	and	r16,r5,r16
   1cd88:	b2003fcc 	andi	r8,r22,255
   1cd8c:	90006126 	beq	r18,zero,1cf14 <__divdf3+0x1d0>
   1cd90:	0081ffc4 	movi	r2,2047
   1cd94:	202b883a 	mov	r21,r4
   1cd98:	90803726 	beq	r18,r2,1ce78 <__divdf3+0x134>
   1cd9c:	80800434 	orhi	r2,r16,16
   1cda0:	100490fa 	slli	r2,r2,3
   1cda4:	2020d77a 	srli	r16,r4,29
   1cda8:	202a90fa 	slli	r21,r4,3
   1cdac:	94bf0044 	addi	r18,r18,-1023
   1cdb0:	80a0b03a 	or	r16,r16,r2
   1cdb4:	0013883a 	mov	r9,zero
   1cdb8:	000b883a 	mov	r5,zero
   1cdbc:	3806d53a 	srli	r3,r7,20
   1cdc0:	382ed7fa 	srli	r23,r7,31
   1cdc4:	04400434 	movhi	r17,16
   1cdc8:	8c7fffc4 	addi	r17,r17,-1
   1cdcc:	18c1ffcc 	andi	r3,r3,2047
   1cdd0:	3029883a 	mov	r20,r6
   1cdd4:	3c62703a 	and	r17,r7,r17
   1cdd8:	bf003fcc 	andi	fp,r23,255
   1cddc:	18006e26 	beq	r3,zero,1cf98 <__divdf3+0x254>
   1cde0:	0081ffc4 	movi	r2,2047
   1cde4:	18806626 	beq	r3,r2,1cf80 <__divdf3+0x23c>
   1cde8:	88800434 	orhi	r2,r17,16
   1cdec:	100490fa 	slli	r2,r2,3
   1cdf0:	3022d77a 	srli	r17,r6,29
   1cdf4:	302890fa 	slli	r20,r6,3
   1cdf8:	18ff0044 	addi	r3,r3,-1023
   1cdfc:	88a2b03a 	or	r17,r17,r2
   1ce00:	000f883a 	mov	r7,zero
   1ce04:	b5e6f03a 	xor	r19,r22,r23
   1ce08:	3a4cb03a 	or	r6,r7,r9
   1ce0c:	008003c4 	movi	r2,15
   1ce10:	9809883a 	mov	r4,r19
   1ce14:	90c7c83a 	sub	r3,r18,r3
   1ce18:	9cc03fcc 	andi	r19,r19,255
   1ce1c:	11809636 	bltu	r2,r6,1d078 <__divdf3+0x334>
   1ce20:	300c90ba 	slli	r6,r6,2
   1ce24:	008000b4 	movhi	r2,2
   1ce28:	10b38e04 	addi	r2,r2,-12744
   1ce2c:	308d883a 	add	r6,r6,r2
   1ce30:	30800017 	ldw	r2,0(r6)
   1ce34:	1000683a 	jmp	r2
   1ce38:	0001d078 	rdprs	zero,zero,1857
   1ce3c:	0001ceb0 	cmpltui	zero,zero,1850
   1ce40:	0001d068 	cmpgeui	zero,zero,1857
   1ce44:	0001cea4 	muli	zero,zero,1850
   1ce48:	0001d068 	cmpgeui	zero,zero,1857
   1ce4c:	0001d03c 	xorhi	zero,zero,1856
   1ce50:	0001d068 	cmpgeui	zero,zero,1857
   1ce54:	0001cea4 	muli	zero,zero,1850
   1ce58:	0001ceb0 	cmpltui	zero,zero,1850
   1ce5c:	0001ceb0 	cmpltui	zero,zero,1850
   1ce60:	0001d03c 	xorhi	zero,zero,1856
   1ce64:	0001cea4 	muli	zero,zero,1850
   1ce68:	0001ce94 	movui	zero,1850
   1ce6c:	0001ce94 	movui	zero,1850
   1ce70:	0001ce94 	movui	zero,1850
   1ce74:	0001d400 	call	1d40 <_ZN3USB17DefaultAddressingEhhb+0xf4>
   1ce78:	2404b03a 	or	r2,r4,r16
   1ce7c:	10006c1e 	bne	r2,zero,1d030 <__divdf3+0x2ec>
   1ce80:	02400204 	movi	r9,8
   1ce84:	0021883a 	mov	r16,zero
   1ce88:	002b883a 	mov	r21,zero
   1ce8c:	01400084 	movi	r5,2
   1ce90:	003fca06 	br	1cdbc <__alt_data_end+0xfc01cdbc>
   1ce94:	8023883a 	mov	r17,r16
   1ce98:	a829883a 	mov	r20,r21
   1ce9c:	4039883a 	mov	fp,r8
   1cea0:	280f883a 	mov	r7,r5
   1cea4:	00800084 	movi	r2,2
   1cea8:	3881601e 	bne	r7,r2,1d42c <__divdf3+0x6e8>
   1ceac:	e027883a 	mov	r19,fp
   1ceb0:	9900004c 	andi	r4,r19,1
   1ceb4:	0081ffc4 	movi	r2,2047
   1ceb8:	0021883a 	mov	r16,zero
   1cebc:	002b883a 	mov	r21,zero
   1cec0:	1004953a 	slli	r2,r2,20
   1cec4:	20c03fcc 	andi	r3,r4,255
   1cec8:	01400434 	movhi	r5,16
   1cecc:	297fffc4 	addi	r5,r5,-1
   1ced0:	180697fa 	slli	r3,r3,31
   1ced4:	8160703a 	and	r16,r16,r5
   1ced8:	80a0b03a 	or	r16,r16,r2
   1cedc:	80c6b03a 	or	r3,r16,r3
   1cee0:	a805883a 	mov	r2,r21
   1cee4:	dfc00f17 	ldw	ra,60(sp)
   1cee8:	df000e17 	ldw	fp,56(sp)
   1ceec:	ddc00d17 	ldw	r23,52(sp)
   1cef0:	dd800c17 	ldw	r22,48(sp)
   1cef4:	dd400b17 	ldw	r21,44(sp)
   1cef8:	dd000a17 	ldw	r20,40(sp)
   1cefc:	dcc00917 	ldw	r19,36(sp)
   1cf00:	dc800817 	ldw	r18,32(sp)
   1cf04:	dc400717 	ldw	r17,28(sp)
   1cf08:	dc000617 	ldw	r16,24(sp)
   1cf0c:	dec01004 	addi	sp,sp,64
   1cf10:	f800283a 	ret
   1cf14:	2404b03a 	or	r2,r4,r16
   1cf18:	2023883a 	mov	r17,r4
   1cf1c:	10003f26 	beq	r2,zero,1d01c <__divdf3+0x2d8>
   1cf20:	80015e26 	beq	r16,zero,1d49c <__divdf3+0x758>
   1cf24:	8009883a 	mov	r4,r16
   1cf28:	d9800215 	stw	r6,8(sp)
   1cf2c:	d9c00515 	stw	r7,20(sp)
   1cf30:	da000415 	stw	r8,16(sp)
   1cf34:	000e1640 	call	e164 <__clzsi2>
   1cf38:	d9800217 	ldw	r6,8(sp)
   1cf3c:	d9c00517 	ldw	r7,20(sp)
   1cf40:	da000417 	ldw	r8,16(sp)
   1cf44:	113ffd44 	addi	r4,r2,-11
   1cf48:	00c00704 	movi	r3,28
   1cf4c:	19014f16 	blt	r3,r4,1d48c <__divdf3+0x748>
   1cf50:	00c00744 	movi	r3,29
   1cf54:	157ffe04 	addi	r21,r2,-8
   1cf58:	1907c83a 	sub	r3,r3,r4
   1cf5c:	8560983a 	sll	r16,r16,r21
   1cf60:	88c6d83a 	srl	r3,r17,r3
   1cf64:	8d6a983a 	sll	r21,r17,r21
   1cf68:	1c20b03a 	or	r16,r3,r16
   1cf6c:	1080fcc4 	addi	r2,r2,1011
   1cf70:	00a5c83a 	sub	r18,zero,r2
   1cf74:	0013883a 	mov	r9,zero
   1cf78:	000b883a 	mov	r5,zero
   1cf7c:	003f8f06 	br	1cdbc <__alt_data_end+0xfc01cdbc>
   1cf80:	3444b03a 	or	r2,r6,r17
   1cf84:	1000231e 	bne	r2,zero,1d014 <__divdf3+0x2d0>
   1cf88:	0023883a 	mov	r17,zero
   1cf8c:	0029883a 	mov	r20,zero
   1cf90:	01c00084 	movi	r7,2
   1cf94:	003f9b06 	br	1ce04 <__alt_data_end+0xfc01ce04>
   1cf98:	3444b03a 	or	r2,r6,r17
   1cf9c:	10001926 	beq	r2,zero,1d004 <__divdf3+0x2c0>
   1cfa0:	88014b26 	beq	r17,zero,1d4d0 <__divdf3+0x78c>
   1cfa4:	8809883a 	mov	r4,r17
   1cfa8:	d9400115 	stw	r5,4(sp)
   1cfac:	d9800215 	stw	r6,8(sp)
   1cfb0:	da000415 	stw	r8,16(sp)
   1cfb4:	da400315 	stw	r9,12(sp)
   1cfb8:	000e1640 	call	e164 <__clzsi2>
   1cfbc:	d9400117 	ldw	r5,4(sp)
   1cfc0:	d9800217 	ldw	r6,8(sp)
   1cfc4:	da000417 	ldw	r8,16(sp)
   1cfc8:	da400317 	ldw	r9,12(sp)
   1cfcc:	113ffd44 	addi	r4,r2,-11
   1cfd0:	00c00704 	movi	r3,28
   1cfd4:	19013a16 	blt	r3,r4,1d4c0 <__divdf3+0x77c>
   1cfd8:	00c00744 	movi	r3,29
   1cfdc:	153ffe04 	addi	r20,r2,-8
   1cfe0:	1907c83a 	sub	r3,r3,r4
   1cfe4:	8d22983a 	sll	r17,r17,r20
   1cfe8:	30c6d83a 	srl	r3,r6,r3
   1cfec:	3528983a 	sll	r20,r6,r20
   1cff0:	1c62b03a 	or	r17,r3,r17
   1cff4:	1080fcc4 	addi	r2,r2,1011
   1cff8:	0087c83a 	sub	r3,zero,r2
   1cffc:	000f883a 	mov	r7,zero
   1d000:	003f8006 	br	1ce04 <__alt_data_end+0xfc01ce04>
   1d004:	0023883a 	mov	r17,zero
   1d008:	0029883a 	mov	r20,zero
   1d00c:	01c00044 	movi	r7,1
   1d010:	003f7c06 	br	1ce04 <__alt_data_end+0xfc01ce04>
   1d014:	01c000c4 	movi	r7,3
   1d018:	003f7a06 	br	1ce04 <__alt_data_end+0xfc01ce04>
   1d01c:	02400104 	movi	r9,4
   1d020:	0021883a 	mov	r16,zero
   1d024:	002b883a 	mov	r21,zero
   1d028:	01400044 	movi	r5,1
   1d02c:	003f6306 	br	1cdbc <__alt_data_end+0xfc01cdbc>
   1d030:	02400304 	movi	r9,12
   1d034:	014000c4 	movi	r5,3
   1d038:	003f6006 	br	1cdbc <__alt_data_end+0xfc01cdbc>
   1d03c:	04000434 	movhi	r16,16
   1d040:	0009883a 	mov	r4,zero
   1d044:	843fffc4 	addi	r16,r16,-1
   1d048:	057fffc4 	movi	r21,-1
   1d04c:	0081ffc4 	movi	r2,2047
   1d050:	003f9b06 	br	1cec0 <__alt_data_end+0xfc01cec0>
   1d054:	00c00044 	movi	r3,1
   1d058:	1887c83a 	sub	r3,r3,r2
   1d05c:	01000e04 	movi	r4,56
   1d060:	20c1530e 	bge	r4,r3,1d5b0 <__divdf3+0x86c>
   1d064:	9900004c 	andi	r4,r19,1
   1d068:	0005883a 	mov	r2,zero
   1d06c:	0021883a 	mov	r16,zero
   1d070:	002b883a 	mov	r21,zero
   1d074:	003f9206 	br	1cec0 <__alt_data_end+0xfc01cec0>
   1d078:	8c012e36 	bltu	r17,r16,1d534 <__divdf3+0x7f0>
   1d07c:	84412c26 	beq	r16,r17,1d530 <__divdf3+0x7ec>
   1d080:	a82f883a 	mov	r23,r21
   1d084:	18ffffc4 	addi	r3,r3,-1
   1d088:	002b883a 	mov	r21,zero
   1d08c:	a004d63a 	srli	r2,r20,24
   1d090:	8822923a 	slli	r17,r17,8
   1d094:	a028923a 	slli	r20,r20,8
   1d098:	8009883a 	mov	r4,r16
   1d09c:	88acb03a 	or	r22,r17,r2
   1d0a0:	dd000015 	stw	r20,0(sp)
   1d0a4:	b028d43a 	srli	r20,r22,16
   1d0a8:	d8c00215 	stw	r3,8(sp)
   1d0ac:	b4bfffcc 	andi	r18,r22,65535
   1d0b0:	a00b883a 	mov	r5,r20
   1d0b4:	000cbf00 	call	cbf0 <__udivsi3>
   1d0b8:	100b883a 	mov	r5,r2
   1d0bc:	9009883a 	mov	r4,r18
   1d0c0:	1023883a 	mov	r17,r2
   1d0c4:	000ccac0 	call	ccac <__mulsi3>
   1d0c8:	8009883a 	mov	r4,r16
   1d0cc:	a00b883a 	mov	r5,r20
   1d0d0:	1039883a 	mov	fp,r2
   1d0d4:	000cc540 	call	cc54 <__umodsi3>
   1d0d8:	1004943a 	slli	r2,r2,16
   1d0dc:	b808d43a 	srli	r4,r23,16
   1d0e0:	d8c00217 	ldw	r3,8(sp)
   1d0e4:	2084b03a 	or	r2,r4,r2
   1d0e8:	1700062e 	bgeu	r2,fp,1d104 <__divdf3+0x3c0>
   1d0ec:	1585883a 	add	r2,r2,r22
   1d0f0:	893fffc4 	addi	r4,r17,-1
   1d0f4:	15811d36 	bltu	r2,r22,1d56c <__divdf3+0x828>
   1d0f8:	17011c2e 	bgeu	r2,fp,1d56c <__divdf3+0x828>
   1d0fc:	8c7fff84 	addi	r17,r17,-2
   1d100:	1585883a 	add	r2,r2,r22
   1d104:	1739c83a 	sub	fp,r2,fp
   1d108:	a00b883a 	mov	r5,r20
   1d10c:	e009883a 	mov	r4,fp
   1d110:	d8c00215 	stw	r3,8(sp)
   1d114:	000cbf00 	call	cbf0 <__udivsi3>
   1d118:	100b883a 	mov	r5,r2
   1d11c:	9009883a 	mov	r4,r18
   1d120:	1021883a 	mov	r16,r2
   1d124:	000ccac0 	call	ccac <__mulsi3>
   1d128:	a00b883a 	mov	r5,r20
   1d12c:	e009883a 	mov	r4,fp
   1d130:	d8800415 	stw	r2,16(sp)
   1d134:	000cc540 	call	cc54 <__umodsi3>
   1d138:	1004943a 	slli	r2,r2,16
   1d13c:	da000417 	ldw	r8,16(sp)
   1d140:	bdffffcc 	andi	r23,r23,65535
   1d144:	b884b03a 	or	r2,r23,r2
   1d148:	d8c00217 	ldw	r3,8(sp)
   1d14c:	1200062e 	bgeu	r2,r8,1d168 <__divdf3+0x424>
   1d150:	1585883a 	add	r2,r2,r22
   1d154:	813fffc4 	addi	r4,r16,-1
   1d158:	15810236 	bltu	r2,r22,1d564 <__divdf3+0x820>
   1d15c:	1201012e 	bgeu	r2,r8,1d564 <__divdf3+0x820>
   1d160:	843fff84 	addi	r16,r16,-2
   1d164:	1585883a 	add	r2,r2,r22
   1d168:	8822943a 	slli	r17,r17,16
   1d16c:	d9800017 	ldw	r6,0(sp)
   1d170:	1211c83a 	sub	r8,r2,r8
   1d174:	8c22b03a 	or	r17,r17,r16
   1d178:	373fffcc 	andi	fp,r6,65535
   1d17c:	8abfffcc 	andi	r10,r17,65535
   1d180:	8820d43a 	srli	r16,r17,16
   1d184:	5009883a 	mov	r4,r10
   1d188:	e00b883a 	mov	r5,fp
   1d18c:	302ed43a 	srli	r23,r6,16
   1d190:	d8c00215 	stw	r3,8(sp)
   1d194:	da000415 	stw	r8,16(sp)
   1d198:	da800115 	stw	r10,4(sp)
   1d19c:	000ccac0 	call	ccac <__mulsi3>
   1d1a0:	800b883a 	mov	r5,r16
   1d1a4:	e009883a 	mov	r4,fp
   1d1a8:	d8800515 	stw	r2,20(sp)
   1d1ac:	000ccac0 	call	ccac <__mulsi3>
   1d1b0:	8009883a 	mov	r4,r16
   1d1b4:	b80b883a 	mov	r5,r23
   1d1b8:	d8800315 	stw	r2,12(sp)
   1d1bc:	000ccac0 	call	ccac <__mulsi3>
   1d1c0:	da800117 	ldw	r10,4(sp)
   1d1c4:	b80b883a 	mov	r5,r23
   1d1c8:	1021883a 	mov	r16,r2
   1d1cc:	5009883a 	mov	r4,r10
   1d1d0:	000ccac0 	call	ccac <__mulsi3>
   1d1d4:	d9c00517 	ldw	r7,20(sp)
   1d1d8:	da400317 	ldw	r9,12(sp)
   1d1dc:	d8c00217 	ldw	r3,8(sp)
   1d1e0:	3808d43a 	srli	r4,r7,16
   1d1e4:	1245883a 	add	r2,r2,r9
   1d1e8:	da000417 	ldw	r8,16(sp)
   1d1ec:	2085883a 	add	r2,r4,r2
   1d1f0:	1240022e 	bgeu	r2,r9,1d1fc <__divdf3+0x4b8>
   1d1f4:	01000074 	movhi	r4,1
   1d1f8:	8121883a 	add	r16,r16,r4
   1d1fc:	1008d43a 	srli	r4,r2,16
   1d200:	1004943a 	slli	r2,r2,16
   1d204:	39ffffcc 	andi	r7,r7,65535
   1d208:	2409883a 	add	r4,r4,r16
   1d20c:	11c5883a 	add	r2,r2,r7
   1d210:	4100bb36 	bltu	r8,r4,1d500 <__divdf3+0x7bc>
   1d214:	4100d726 	beq	r8,r4,1d574 <__divdf3+0x830>
   1d218:	4109c83a 	sub	r4,r8,r4
   1d21c:	a8a1c83a 	sub	r16,r21,r2
   1d220:	ac2b803a 	cmpltu	r21,r21,r16
   1d224:	256bc83a 	sub	r21,r4,r21
   1d228:	b540d926 	beq	r22,r21,1d590 <__divdf3+0x84c>
   1d22c:	a00b883a 	mov	r5,r20
   1d230:	a809883a 	mov	r4,r21
   1d234:	d8c00215 	stw	r3,8(sp)
   1d238:	000cbf00 	call	cbf0 <__udivsi3>
   1d23c:	100b883a 	mov	r5,r2
   1d240:	9009883a 	mov	r4,r18
   1d244:	d8800515 	stw	r2,20(sp)
   1d248:	000ccac0 	call	ccac <__mulsi3>
   1d24c:	a809883a 	mov	r4,r21
   1d250:	a00b883a 	mov	r5,r20
   1d254:	d8800415 	stw	r2,16(sp)
   1d258:	000cc540 	call	cc54 <__umodsi3>
   1d25c:	1004943a 	slli	r2,r2,16
   1d260:	8008d43a 	srli	r4,r16,16
   1d264:	da000417 	ldw	r8,16(sp)
   1d268:	d8c00217 	ldw	r3,8(sp)
   1d26c:	2084b03a 	or	r2,r4,r2
   1d270:	d9c00517 	ldw	r7,20(sp)
   1d274:	1200062e 	bgeu	r2,r8,1d290 <__divdf3+0x54c>
   1d278:	1585883a 	add	r2,r2,r22
   1d27c:	393fffc4 	addi	r4,r7,-1
   1d280:	1580c536 	bltu	r2,r22,1d598 <__divdf3+0x854>
   1d284:	1200c42e 	bgeu	r2,r8,1d598 <__divdf3+0x854>
   1d288:	39ffff84 	addi	r7,r7,-2
   1d28c:	1585883a 	add	r2,r2,r22
   1d290:	122bc83a 	sub	r21,r2,r8
   1d294:	a00b883a 	mov	r5,r20
   1d298:	a809883a 	mov	r4,r21
   1d29c:	d8c00215 	stw	r3,8(sp)
   1d2a0:	d9c00515 	stw	r7,20(sp)
   1d2a4:	000cbf00 	call	cbf0 <__udivsi3>
   1d2a8:	9009883a 	mov	r4,r18
   1d2ac:	100b883a 	mov	r5,r2
   1d2b0:	d8800415 	stw	r2,16(sp)
   1d2b4:	000ccac0 	call	ccac <__mulsi3>
   1d2b8:	a809883a 	mov	r4,r21
   1d2bc:	a00b883a 	mov	r5,r20
   1d2c0:	1025883a 	mov	r18,r2
   1d2c4:	000cc540 	call	cc54 <__umodsi3>
   1d2c8:	1004943a 	slli	r2,r2,16
   1d2cc:	813fffcc 	andi	r4,r16,65535
   1d2d0:	d8c00217 	ldw	r3,8(sp)
   1d2d4:	20a0b03a 	or	r16,r4,r2
   1d2d8:	d9c00517 	ldw	r7,20(sp)
   1d2dc:	da000417 	ldw	r8,16(sp)
   1d2e0:	8480062e 	bgeu	r16,r18,1d2fc <__divdf3+0x5b8>
   1d2e4:	85a1883a 	add	r16,r16,r22
   1d2e8:	40bfffc4 	addi	r2,r8,-1
   1d2ec:	8580ac36 	bltu	r16,r22,1d5a0 <__divdf3+0x85c>
   1d2f0:	8480ab2e 	bgeu	r16,r18,1d5a0 <__divdf3+0x85c>
   1d2f4:	423fff84 	addi	r8,r8,-2
   1d2f8:	85a1883a 	add	r16,r16,r22
   1d2fc:	3804943a 	slli	r2,r7,16
   1d300:	84a1c83a 	sub	r16,r16,r18
   1d304:	e009883a 	mov	r4,fp
   1d308:	1228b03a 	or	r20,r2,r8
   1d30c:	a1ffffcc 	andi	r7,r20,65535
   1d310:	a024d43a 	srli	r18,r20,16
   1d314:	380b883a 	mov	r5,r7
   1d318:	d8c00215 	stw	r3,8(sp)
   1d31c:	d9c00515 	stw	r7,20(sp)
   1d320:	000ccac0 	call	ccac <__mulsi3>
   1d324:	900b883a 	mov	r5,r18
   1d328:	e009883a 	mov	r4,fp
   1d32c:	102b883a 	mov	r21,r2
   1d330:	000ccac0 	call	ccac <__mulsi3>
   1d334:	900b883a 	mov	r5,r18
   1d338:	b809883a 	mov	r4,r23
   1d33c:	1039883a 	mov	fp,r2
   1d340:	000ccac0 	call	ccac <__mulsi3>
   1d344:	d9c00517 	ldw	r7,20(sp)
   1d348:	b80b883a 	mov	r5,r23
   1d34c:	1025883a 	mov	r18,r2
   1d350:	3809883a 	mov	r4,r7
   1d354:	000ccac0 	call	ccac <__mulsi3>
   1d358:	a808d43a 	srli	r4,r21,16
   1d35c:	1705883a 	add	r2,r2,fp
   1d360:	d8c00217 	ldw	r3,8(sp)
   1d364:	2085883a 	add	r2,r4,r2
   1d368:	1700022e 	bgeu	r2,fp,1d374 <__divdf3+0x630>
   1d36c:	01000074 	movhi	r4,1
   1d370:	9125883a 	add	r18,r18,r4
   1d374:	1008d43a 	srli	r4,r2,16
   1d378:	1004943a 	slli	r2,r2,16
   1d37c:	ad7fffcc 	andi	r21,r21,65535
   1d380:	2489883a 	add	r4,r4,r18
   1d384:	1545883a 	add	r2,r2,r21
   1d388:	81003836 	bltu	r16,r4,1d46c <__divdf3+0x728>
   1d38c:	81003626 	beq	r16,r4,1d468 <__divdf3+0x724>
   1d390:	a5000054 	ori	r20,r20,1
   1d394:	1880ffc4 	addi	r2,r3,1023
   1d398:	00bf2e0e 	bge	zero,r2,1d054 <__alt_data_end+0xfc01d054>
   1d39c:	a10001cc 	andi	r4,r20,7
   1d3a0:	20000726 	beq	r4,zero,1d3c0 <__divdf3+0x67c>
   1d3a4:	a10003cc 	andi	r4,r20,15
   1d3a8:	01400104 	movi	r5,4
   1d3ac:	21400426 	beq	r4,r5,1d3c0 <__divdf3+0x67c>
   1d3b0:	a149883a 	add	r4,r20,r5
   1d3b4:	2529803a 	cmpltu	r20,r4,r20
   1d3b8:	8d23883a 	add	r17,r17,r20
   1d3bc:	2029883a 	mov	r20,r4
   1d3c0:	8900402c 	andhi	r4,r17,256
   1d3c4:	20000426 	beq	r4,zero,1d3d8 <__divdf3+0x694>
   1d3c8:	18810004 	addi	r2,r3,1024
   1d3cc:	00ffc034 	movhi	r3,65280
   1d3d0:	18ffffc4 	addi	r3,r3,-1
   1d3d4:	88e2703a 	and	r17,r17,r3
   1d3d8:	00c1ff84 	movi	r3,2046
   1d3dc:	18beb416 	blt	r3,r2,1ceb0 <__alt_data_end+0xfc01ceb0>
   1d3e0:	a028d0fa 	srli	r20,r20,3
   1d3e4:	882a977a 	slli	r21,r17,29
   1d3e8:	8820927a 	slli	r16,r17,9
   1d3ec:	1081ffcc 	andi	r2,r2,2047
   1d3f0:	ad2ab03a 	or	r21,r21,r20
   1d3f4:	8020d33a 	srli	r16,r16,12
   1d3f8:	9900004c 	andi	r4,r19,1
   1d3fc:	003eb006 	br	1cec0 <__alt_data_end+0xfc01cec0>
   1d400:	8080022c 	andhi	r2,r16,8
   1d404:	10001226 	beq	r2,zero,1d450 <__divdf3+0x70c>
   1d408:	8880022c 	andhi	r2,r17,8
   1d40c:	1000101e 	bne	r2,zero,1d450 <__divdf3+0x70c>
   1d410:	00800434 	movhi	r2,16
   1d414:	8c000234 	orhi	r16,r17,8
   1d418:	10bfffc4 	addi	r2,r2,-1
   1d41c:	b809883a 	mov	r4,r23
   1d420:	80a0703a 	and	r16,r16,r2
   1d424:	a02b883a 	mov	r21,r20
   1d428:	003f0806 	br	1d04c <__alt_data_end+0xfc01d04c>
   1d42c:	008000c4 	movi	r2,3
   1d430:	3880b126 	beq	r7,r2,1d6f8 <__divdf3+0x9b4>
   1d434:	00800044 	movi	r2,1
   1d438:	38805b1e 	bne	r7,r2,1d5a8 <__divdf3+0x864>
   1d43c:	e009883a 	mov	r4,fp
   1d440:	0005883a 	mov	r2,zero
   1d444:	0021883a 	mov	r16,zero
   1d448:	002b883a 	mov	r21,zero
   1d44c:	003e9c06 	br	1cec0 <__alt_data_end+0xfc01cec0>
   1d450:	00800434 	movhi	r2,16
   1d454:	84000234 	orhi	r16,r16,8
   1d458:	10bfffc4 	addi	r2,r2,-1
   1d45c:	b009883a 	mov	r4,r22
   1d460:	80a0703a 	and	r16,r16,r2
   1d464:	003ef906 	br	1d04c <__alt_data_end+0xfc01d04c>
   1d468:	103fca26 	beq	r2,zero,1d394 <__alt_data_end+0xfc01d394>
   1d46c:	b421883a 	add	r16,r22,r16
   1d470:	a17fffc4 	addi	r5,r20,-1
   1d474:	8580422e 	bgeu	r16,r22,1d580 <__divdf3+0x83c>
   1d478:	2829883a 	mov	r20,r5
   1d47c:	813fc41e 	bne	r16,r4,1d390 <__alt_data_end+0xfc01d390>
   1d480:	d9800017 	ldw	r6,0(sp)
   1d484:	30bfc21e 	bne	r6,r2,1d390 <__alt_data_end+0xfc01d390>
   1d488:	003fc206 	br	1d394 <__alt_data_end+0xfc01d394>
   1d48c:	143ff604 	addi	r16,r2,-40
   1d490:	8c20983a 	sll	r16,r17,r16
   1d494:	002b883a 	mov	r21,zero
   1d498:	003eb406 	br	1cf6c <__alt_data_end+0xfc01cf6c>
   1d49c:	d9800215 	stw	r6,8(sp)
   1d4a0:	d9c00515 	stw	r7,20(sp)
   1d4a4:	da000415 	stw	r8,16(sp)
   1d4a8:	000e1640 	call	e164 <__clzsi2>
   1d4ac:	10800804 	addi	r2,r2,32
   1d4b0:	da000417 	ldw	r8,16(sp)
   1d4b4:	d9c00517 	ldw	r7,20(sp)
   1d4b8:	d9800217 	ldw	r6,8(sp)
   1d4bc:	003ea106 	br	1cf44 <__alt_data_end+0xfc01cf44>
   1d4c0:	147ff604 	addi	r17,r2,-40
   1d4c4:	3462983a 	sll	r17,r6,r17
   1d4c8:	0029883a 	mov	r20,zero
   1d4cc:	003ec906 	br	1cff4 <__alt_data_end+0xfc01cff4>
   1d4d0:	3009883a 	mov	r4,r6
   1d4d4:	d9400115 	stw	r5,4(sp)
   1d4d8:	d9800215 	stw	r6,8(sp)
   1d4dc:	da000415 	stw	r8,16(sp)
   1d4e0:	da400315 	stw	r9,12(sp)
   1d4e4:	000e1640 	call	e164 <__clzsi2>
   1d4e8:	10800804 	addi	r2,r2,32
   1d4ec:	da400317 	ldw	r9,12(sp)
   1d4f0:	da000417 	ldw	r8,16(sp)
   1d4f4:	d9800217 	ldw	r6,8(sp)
   1d4f8:	d9400117 	ldw	r5,4(sp)
   1d4fc:	003eb306 	br	1cfcc <__alt_data_end+0xfc01cfcc>
   1d500:	d9800017 	ldw	r6,0(sp)
   1d504:	a9ab883a 	add	r21,r21,r6
   1d508:	a98b803a 	cmpltu	r5,r21,r6
   1d50c:	2d8b883a 	add	r5,r5,r22
   1d510:	2a11883a 	add	r8,r5,r8
   1d514:	897fffc4 	addi	r5,r17,-1
   1d518:	b2000c2e 	bgeu	r22,r8,1d54c <__divdf3+0x808>
   1d51c:	41003f36 	bltu	r8,r4,1d61c <__divdf3+0x8d8>
   1d520:	22006c26 	beq	r4,r8,1d6d4 <__divdf3+0x990>
   1d524:	4109c83a 	sub	r4,r8,r4
   1d528:	2823883a 	mov	r17,r5
   1d52c:	003f3b06 	br	1d21c <__alt_data_end+0xfc01d21c>
   1d530:	ad3ed336 	bltu	r21,r20,1d080 <__alt_data_end+0xfc01d080>
   1d534:	a804d07a 	srli	r2,r21,1
   1d538:	802e97fa 	slli	r23,r16,31
   1d53c:	a82a97fa 	slli	r21,r21,31
   1d540:	8020d07a 	srli	r16,r16,1
   1d544:	b8aeb03a 	or	r23,r23,r2
   1d548:	003ed006 	br	1d08c <__alt_data_end+0xfc01d08c>
   1d54c:	b23ff51e 	bne	r22,r8,1d524 <__alt_data_end+0xfc01d524>
   1d550:	d9800017 	ldw	r6,0(sp)
   1d554:	a9bff12e 	bgeu	r21,r6,1d51c <__alt_data_end+0xfc01d51c>
   1d558:	b109c83a 	sub	r4,r22,r4
   1d55c:	2823883a 	mov	r17,r5
   1d560:	003f2e06 	br	1d21c <__alt_data_end+0xfc01d21c>
   1d564:	2021883a 	mov	r16,r4
   1d568:	003eff06 	br	1d168 <__alt_data_end+0xfc01d168>
   1d56c:	2023883a 	mov	r17,r4
   1d570:	003ee406 	br	1d104 <__alt_data_end+0xfc01d104>
   1d574:	a8bfe236 	bltu	r21,r2,1d500 <__alt_data_end+0xfc01d500>
   1d578:	0009883a 	mov	r4,zero
   1d57c:	003f2706 	br	1d21c <__alt_data_end+0xfc01d21c>
   1d580:	81002d36 	bltu	r16,r4,1d638 <__divdf3+0x8f4>
   1d584:	24005626 	beq	r4,r16,1d6e0 <__divdf3+0x99c>
   1d588:	2829883a 	mov	r20,r5
   1d58c:	003f8006 	br	1d390 <__alt_data_end+0xfc01d390>
   1d590:	053fffc4 	movi	r20,-1
   1d594:	003f7f06 	br	1d394 <__alt_data_end+0xfc01d394>
   1d598:	200f883a 	mov	r7,r4
   1d59c:	003f3c06 	br	1d290 <__alt_data_end+0xfc01d290>
   1d5a0:	1011883a 	mov	r8,r2
   1d5a4:	003f5506 	br	1d2fc <__alt_data_end+0xfc01d2fc>
   1d5a8:	e027883a 	mov	r19,fp
   1d5ac:	003f7906 	br	1d394 <__alt_data_end+0xfc01d394>
   1d5b0:	010007c4 	movi	r4,31
   1d5b4:	20c02816 	blt	r4,r3,1d658 <__divdf3+0x914>
   1d5b8:	00800804 	movi	r2,32
   1d5bc:	10c5c83a 	sub	r2,r2,r3
   1d5c0:	888a983a 	sll	r5,r17,r2
   1d5c4:	a0c8d83a 	srl	r4,r20,r3
   1d5c8:	a084983a 	sll	r2,r20,r2
   1d5cc:	88e2d83a 	srl	r17,r17,r3
   1d5d0:	2906b03a 	or	r3,r5,r4
   1d5d4:	1004c03a 	cmpne	r2,r2,zero
   1d5d8:	1886b03a 	or	r3,r3,r2
   1d5dc:	188001cc 	andi	r2,r3,7
   1d5e0:	10000726 	beq	r2,zero,1d600 <__divdf3+0x8bc>
   1d5e4:	188003cc 	andi	r2,r3,15
   1d5e8:	01000104 	movi	r4,4
   1d5ec:	11000426 	beq	r2,r4,1d600 <__divdf3+0x8bc>
   1d5f0:	1805883a 	mov	r2,r3
   1d5f4:	10c00104 	addi	r3,r2,4
   1d5f8:	1885803a 	cmpltu	r2,r3,r2
   1d5fc:	88a3883a 	add	r17,r17,r2
   1d600:	8880202c 	andhi	r2,r17,128
   1d604:	10002926 	beq	r2,zero,1d6ac <__divdf3+0x968>
   1d608:	9900004c 	andi	r4,r19,1
   1d60c:	00800044 	movi	r2,1
   1d610:	0021883a 	mov	r16,zero
   1d614:	002b883a 	mov	r21,zero
   1d618:	003e2906 	br	1cec0 <__alt_data_end+0xfc01cec0>
   1d61c:	d9800017 	ldw	r6,0(sp)
   1d620:	8c7fff84 	addi	r17,r17,-2
   1d624:	a9ab883a 	add	r21,r21,r6
   1d628:	a98b803a 	cmpltu	r5,r21,r6
   1d62c:	2d8b883a 	add	r5,r5,r22
   1d630:	2a11883a 	add	r8,r5,r8
   1d634:	003ef806 	br	1d218 <__alt_data_end+0xfc01d218>
   1d638:	d9800017 	ldw	r6,0(sp)
   1d63c:	318f883a 	add	r7,r6,r6
   1d640:	398b803a 	cmpltu	r5,r7,r6
   1d644:	2d8d883a 	add	r6,r5,r22
   1d648:	81a1883a 	add	r16,r16,r6
   1d64c:	a17fff84 	addi	r5,r20,-2
   1d650:	d9c00015 	stw	r7,0(sp)
   1d654:	003f8806 	br	1d478 <__alt_data_end+0xfc01d478>
   1d658:	013ff844 	movi	r4,-31
   1d65c:	2085c83a 	sub	r2,r4,r2
   1d660:	8888d83a 	srl	r4,r17,r2
   1d664:	00800804 	movi	r2,32
   1d668:	18802126 	beq	r3,r2,1d6f0 <__divdf3+0x9ac>
   1d66c:	04001004 	movi	r16,64
   1d670:	80c7c83a 	sub	r3,r16,r3
   1d674:	88e0983a 	sll	r16,r17,r3
   1d678:	8504b03a 	or	r2,r16,r20
   1d67c:	1004c03a 	cmpne	r2,r2,zero
   1d680:	2084b03a 	or	r2,r4,r2
   1d684:	144001cc 	andi	r17,r2,7
   1d688:	88000d1e 	bne	r17,zero,1d6c0 <__divdf3+0x97c>
   1d68c:	0021883a 	mov	r16,zero
   1d690:	102ad0fa 	srli	r21,r2,3
   1d694:	9900004c 	andi	r4,r19,1
   1d698:	0005883a 	mov	r2,zero
   1d69c:	ac6ab03a 	or	r21,r21,r17
   1d6a0:	003e0706 	br	1cec0 <__alt_data_end+0xfc01cec0>
   1d6a4:	1007883a 	mov	r3,r2
   1d6a8:	0023883a 	mov	r17,zero
   1d6ac:	8820927a 	slli	r16,r17,9
   1d6b0:	1805883a 	mov	r2,r3
   1d6b4:	8822977a 	slli	r17,r17,29
   1d6b8:	8020d33a 	srli	r16,r16,12
   1d6bc:	003ff406 	br	1d690 <__alt_data_end+0xfc01d690>
   1d6c0:	10c003cc 	andi	r3,r2,15
   1d6c4:	01000104 	movi	r4,4
   1d6c8:	193ff626 	beq	r3,r4,1d6a4 <__alt_data_end+0xfc01d6a4>
   1d6cc:	0023883a 	mov	r17,zero
   1d6d0:	003fc806 	br	1d5f4 <__alt_data_end+0xfc01d5f4>
   1d6d4:	a8bfd136 	bltu	r21,r2,1d61c <__alt_data_end+0xfc01d61c>
   1d6d8:	2823883a 	mov	r17,r5
   1d6dc:	003fa606 	br	1d578 <__alt_data_end+0xfc01d578>
   1d6e0:	d9800017 	ldw	r6,0(sp)
   1d6e4:	30bfd436 	bltu	r6,r2,1d638 <__alt_data_end+0xfc01d638>
   1d6e8:	2829883a 	mov	r20,r5
   1d6ec:	003f6406 	br	1d480 <__alt_data_end+0xfc01d480>
   1d6f0:	0021883a 	mov	r16,zero
   1d6f4:	003fe006 	br	1d678 <__alt_data_end+0xfc01d678>
   1d6f8:	00800434 	movhi	r2,16
   1d6fc:	8c000234 	orhi	r16,r17,8
   1d700:	10bfffc4 	addi	r2,r2,-1
   1d704:	e009883a 	mov	r4,fp
   1d708:	80a0703a 	and	r16,r16,r2
   1d70c:	a02b883a 	mov	r21,r20
   1d710:	003e4e06 	br	1d04c <__alt_data_end+0xfc01d04c>

0001d714 <__eqdf2>:
   1d714:	2804d53a 	srli	r2,r5,20
   1d718:	3806d53a 	srli	r3,r7,20
   1d71c:	02000434 	movhi	r8,16
   1d720:	423fffc4 	addi	r8,r8,-1
   1d724:	1081ffcc 	andi	r2,r2,2047
   1d728:	0281ffc4 	movi	r10,2047
   1d72c:	2a12703a 	and	r9,r5,r8
   1d730:	18c1ffcc 	andi	r3,r3,2047
   1d734:	3a10703a 	and	r8,r7,r8
   1d738:	280ad7fa 	srli	r5,r5,31
   1d73c:	380ed7fa 	srli	r7,r7,31
   1d740:	12801026 	beq	r2,r10,1d784 <__eqdf2+0x70>
   1d744:	0281ffc4 	movi	r10,2047
   1d748:	1a800a26 	beq	r3,r10,1d774 <__eqdf2+0x60>
   1d74c:	10c00226 	beq	r2,r3,1d758 <__eqdf2+0x44>
   1d750:	00800044 	movi	r2,1
   1d754:	f800283a 	ret
   1d758:	4a3ffd1e 	bne	r9,r8,1d750 <__alt_data_end+0xfc01d750>
   1d75c:	21bffc1e 	bne	r4,r6,1d750 <__alt_data_end+0xfc01d750>
   1d760:	29c00c26 	beq	r5,r7,1d794 <__eqdf2+0x80>
   1d764:	103ffa1e 	bne	r2,zero,1d750 <__alt_data_end+0xfc01d750>
   1d768:	2244b03a 	or	r2,r4,r9
   1d76c:	1004c03a 	cmpne	r2,r2,zero
   1d770:	f800283a 	ret
   1d774:	3214b03a 	or	r10,r6,r8
   1d778:	503ff426 	beq	r10,zero,1d74c <__alt_data_end+0xfc01d74c>
   1d77c:	00800044 	movi	r2,1
   1d780:	f800283a 	ret
   1d784:	2254b03a 	or	r10,r4,r9
   1d788:	503fee26 	beq	r10,zero,1d744 <__alt_data_end+0xfc01d744>
   1d78c:	00800044 	movi	r2,1
   1d790:	f800283a 	ret
   1d794:	0005883a 	mov	r2,zero
   1d798:	f800283a 	ret

0001d79c <__gedf2>:
   1d79c:	2804d53a 	srli	r2,r5,20
   1d7a0:	3806d53a 	srli	r3,r7,20
   1d7a4:	02000434 	movhi	r8,16
   1d7a8:	423fffc4 	addi	r8,r8,-1
   1d7ac:	1081ffcc 	andi	r2,r2,2047
   1d7b0:	0241ffc4 	movi	r9,2047
   1d7b4:	2a14703a 	and	r10,r5,r8
   1d7b8:	18c1ffcc 	andi	r3,r3,2047
   1d7bc:	3a10703a 	and	r8,r7,r8
   1d7c0:	280ad7fa 	srli	r5,r5,31
   1d7c4:	380ed7fa 	srli	r7,r7,31
   1d7c8:	12401d26 	beq	r2,r9,1d840 <__gedf2+0xa4>
   1d7cc:	0241ffc4 	movi	r9,2047
   1d7d0:	1a401226 	beq	r3,r9,1d81c <__gedf2+0x80>
   1d7d4:	1000081e 	bne	r2,zero,1d7f8 <__gedf2+0x5c>
   1d7d8:	2296b03a 	or	r11,r4,r10
   1d7dc:	5813003a 	cmpeq	r9,r11,zero
   1d7e0:	1800091e 	bne	r3,zero,1d808 <__gedf2+0x6c>
   1d7e4:	3218b03a 	or	r12,r6,r8
   1d7e8:	6000071e 	bne	r12,zero,1d808 <__gedf2+0x6c>
   1d7ec:	0005883a 	mov	r2,zero
   1d7f0:	5800101e 	bne	r11,zero,1d834 <__gedf2+0x98>
   1d7f4:	f800283a 	ret
   1d7f8:	18000c1e 	bne	r3,zero,1d82c <__gedf2+0x90>
   1d7fc:	3212b03a 	or	r9,r6,r8
   1d800:	48000c26 	beq	r9,zero,1d834 <__gedf2+0x98>
   1d804:	0013883a 	mov	r9,zero
   1d808:	39c03fcc 	andi	r7,r7,255
   1d80c:	48000826 	beq	r9,zero,1d830 <__gedf2+0x94>
   1d810:	38000926 	beq	r7,zero,1d838 <__gedf2+0x9c>
   1d814:	00800044 	movi	r2,1
   1d818:	f800283a 	ret
   1d81c:	3212b03a 	or	r9,r6,r8
   1d820:	483fec26 	beq	r9,zero,1d7d4 <__alt_data_end+0xfc01d7d4>
   1d824:	00bfff84 	movi	r2,-2
   1d828:	f800283a 	ret
   1d82c:	39c03fcc 	andi	r7,r7,255
   1d830:	29c00626 	beq	r5,r7,1d84c <__gedf2+0xb0>
   1d834:	283ff726 	beq	r5,zero,1d814 <__alt_data_end+0xfc01d814>
   1d838:	00bfffc4 	movi	r2,-1
   1d83c:	f800283a 	ret
   1d840:	2292b03a 	or	r9,r4,r10
   1d844:	483fe126 	beq	r9,zero,1d7cc <__alt_data_end+0xfc01d7cc>
   1d848:	003ff606 	br	1d824 <__alt_data_end+0xfc01d824>
   1d84c:	18bff916 	blt	r3,r2,1d834 <__alt_data_end+0xfc01d834>
   1d850:	10c00316 	blt	r2,r3,1d860 <__gedf2+0xc4>
   1d854:	42bff736 	bltu	r8,r10,1d834 <__alt_data_end+0xfc01d834>
   1d858:	52000326 	beq	r10,r8,1d868 <__gedf2+0xcc>
   1d85c:	5200042e 	bgeu	r10,r8,1d870 <__gedf2+0xd4>
   1d860:	283fec1e 	bne	r5,zero,1d814 <__alt_data_end+0xfc01d814>
   1d864:	003ff406 	br	1d838 <__alt_data_end+0xfc01d838>
   1d868:	313ff236 	bltu	r6,r4,1d834 <__alt_data_end+0xfc01d834>
   1d86c:	21bffc36 	bltu	r4,r6,1d860 <__alt_data_end+0xfc01d860>
   1d870:	0005883a 	mov	r2,zero
   1d874:	f800283a 	ret

0001d878 <__ledf2>:
   1d878:	2804d53a 	srli	r2,r5,20
   1d87c:	3810d53a 	srli	r8,r7,20
   1d880:	00c00434 	movhi	r3,16
   1d884:	18ffffc4 	addi	r3,r3,-1
   1d888:	1081ffcc 	andi	r2,r2,2047
   1d88c:	0241ffc4 	movi	r9,2047
   1d890:	28d4703a 	and	r10,r5,r3
   1d894:	4201ffcc 	andi	r8,r8,2047
   1d898:	38c6703a 	and	r3,r7,r3
   1d89c:	280ad7fa 	srli	r5,r5,31
   1d8a0:	380ed7fa 	srli	r7,r7,31
   1d8a4:	12401f26 	beq	r2,r9,1d924 <__ledf2+0xac>
   1d8a8:	0241ffc4 	movi	r9,2047
   1d8ac:	42401426 	beq	r8,r9,1d900 <__ledf2+0x88>
   1d8b0:	1000091e 	bne	r2,zero,1d8d8 <__ledf2+0x60>
   1d8b4:	2296b03a 	or	r11,r4,r10
   1d8b8:	5813003a 	cmpeq	r9,r11,zero
   1d8bc:	29403fcc 	andi	r5,r5,255
   1d8c0:	40000a1e 	bne	r8,zero,1d8ec <__ledf2+0x74>
   1d8c4:	30d8b03a 	or	r12,r6,r3
   1d8c8:	6000081e 	bne	r12,zero,1d8ec <__ledf2+0x74>
   1d8cc:	0005883a 	mov	r2,zero
   1d8d0:	5800111e 	bne	r11,zero,1d918 <__ledf2+0xa0>
   1d8d4:	f800283a 	ret
   1d8d8:	29403fcc 	andi	r5,r5,255
   1d8dc:	40000c1e 	bne	r8,zero,1d910 <__ledf2+0x98>
   1d8e0:	30d2b03a 	or	r9,r6,r3
   1d8e4:	48000c26 	beq	r9,zero,1d918 <__ledf2+0xa0>
   1d8e8:	0013883a 	mov	r9,zero
   1d8ec:	39c03fcc 	andi	r7,r7,255
   1d8f0:	48000826 	beq	r9,zero,1d914 <__ledf2+0x9c>
   1d8f4:	38001126 	beq	r7,zero,1d93c <__ledf2+0xc4>
   1d8f8:	00800044 	movi	r2,1
   1d8fc:	f800283a 	ret
   1d900:	30d2b03a 	or	r9,r6,r3
   1d904:	483fea26 	beq	r9,zero,1d8b0 <__alt_data_end+0xfc01d8b0>
   1d908:	00800084 	movi	r2,2
   1d90c:	f800283a 	ret
   1d910:	39c03fcc 	andi	r7,r7,255
   1d914:	39400726 	beq	r7,r5,1d934 <__ledf2+0xbc>
   1d918:	2800081e 	bne	r5,zero,1d93c <__ledf2+0xc4>
   1d91c:	00800044 	movi	r2,1
   1d920:	f800283a 	ret
   1d924:	2292b03a 	or	r9,r4,r10
   1d928:	483fdf26 	beq	r9,zero,1d8a8 <__alt_data_end+0xfc01d8a8>
   1d92c:	00800084 	movi	r2,2
   1d930:	f800283a 	ret
   1d934:	4080030e 	bge	r8,r2,1d944 <__ledf2+0xcc>
   1d938:	383fef26 	beq	r7,zero,1d8f8 <__alt_data_end+0xfc01d8f8>
   1d93c:	00bfffc4 	movi	r2,-1
   1d940:	f800283a 	ret
   1d944:	123feb16 	blt	r2,r8,1d8f4 <__alt_data_end+0xfc01d8f4>
   1d948:	1abff336 	bltu	r3,r10,1d918 <__alt_data_end+0xfc01d918>
   1d94c:	50c00326 	beq	r10,r3,1d95c <__ledf2+0xe4>
   1d950:	50c0042e 	bgeu	r10,r3,1d964 <__ledf2+0xec>
   1d954:	283fe81e 	bne	r5,zero,1d8f8 <__alt_data_end+0xfc01d8f8>
   1d958:	003ff806 	br	1d93c <__alt_data_end+0xfc01d93c>
   1d95c:	313fee36 	bltu	r6,r4,1d918 <__alt_data_end+0xfc01d918>
   1d960:	21bffc36 	bltu	r4,r6,1d954 <__alt_data_end+0xfc01d954>
   1d964:	0005883a 	mov	r2,zero
   1d968:	f800283a 	ret

0001d96c <__muldf3>:
   1d96c:	deffee04 	addi	sp,sp,-72
   1d970:	dd000c15 	stw	r20,48(sp)
   1d974:	2828d53a 	srli	r20,r5,20
   1d978:	ddc00f15 	stw	r23,60(sp)
   1d97c:	282ed7fa 	srli	r23,r5,31
   1d980:	dc000815 	stw	r16,32(sp)
   1d984:	04000434 	movhi	r16,16
   1d988:	dcc00b15 	stw	r19,44(sp)
   1d98c:	843fffc4 	addi	r16,r16,-1
   1d990:	dfc01115 	stw	ra,68(sp)
   1d994:	df001015 	stw	fp,64(sp)
   1d998:	dd800e15 	stw	r22,56(sp)
   1d99c:	dd400d15 	stw	r21,52(sp)
   1d9a0:	dc800a15 	stw	r18,40(sp)
   1d9a4:	dc400915 	stw	r17,36(sp)
   1d9a8:	a501ffcc 	andi	r20,r20,2047
   1d9ac:	2c20703a 	and	r16,r5,r16
   1d9b0:	b827883a 	mov	r19,r23
   1d9b4:	ba403fcc 	andi	r9,r23,255
   1d9b8:	a0006026 	beq	r20,zero,1db3c <__muldf3+0x1d0>
   1d9bc:	0081ffc4 	movi	r2,2047
   1d9c0:	202d883a 	mov	r22,r4
   1d9c4:	a0803626 	beq	r20,r2,1daa0 <__muldf3+0x134>
   1d9c8:	84000434 	orhi	r16,r16,16
   1d9cc:	200ad77a 	srli	r5,r4,29
   1d9d0:	800490fa 	slli	r2,r16,3
   1d9d4:	202c90fa 	slli	r22,r4,3
   1d9d8:	a53f0044 	addi	r20,r20,-1023
   1d9dc:	28a0b03a 	or	r16,r5,r2
   1d9e0:	002b883a 	mov	r21,zero
   1d9e4:	000b883a 	mov	r5,zero
   1d9e8:	3804d53a 	srli	r2,r7,20
   1d9ec:	3838d7fa 	srli	fp,r7,31
   1d9f0:	04400434 	movhi	r17,16
   1d9f4:	8c7fffc4 	addi	r17,r17,-1
   1d9f8:	1081ffcc 	andi	r2,r2,2047
   1d9fc:	3025883a 	mov	r18,r6
   1da00:	3c62703a 	and	r17,r7,r17
   1da04:	e2803fcc 	andi	r10,fp,255
   1da08:	10006d26 	beq	r2,zero,1dbc0 <__muldf3+0x254>
   1da0c:	00c1ffc4 	movi	r3,2047
   1da10:	10c06526 	beq	r2,r3,1dba8 <__muldf3+0x23c>
   1da14:	8c400434 	orhi	r17,r17,16
   1da18:	300ed77a 	srli	r7,r6,29
   1da1c:	880690fa 	slli	r3,r17,3
   1da20:	302490fa 	slli	r18,r6,3
   1da24:	10bf0044 	addi	r2,r2,-1023
   1da28:	38e2b03a 	or	r17,r7,r3
   1da2c:	000f883a 	mov	r7,zero
   1da30:	a087883a 	add	r3,r20,r2
   1da34:	010003c4 	movi	r4,15
   1da38:	3d44b03a 	or	r2,r7,r21
   1da3c:	e5ccf03a 	xor	r6,fp,r23
   1da40:	1a000044 	addi	r8,r3,1
   1da44:	20809b36 	bltu	r4,r2,1dcb4 <__muldf3+0x348>
   1da48:	100490ba 	slli	r2,r2,2
   1da4c:	010000b4 	movhi	r4,2
   1da50:	21369804 	addi	r4,r4,-9632
   1da54:	1105883a 	add	r2,r2,r4
   1da58:	10800017 	ldw	r2,0(r2)
   1da5c:	1000683a 	jmp	r2
   1da60:	0001dcb4 	movhi	zero,1906
   1da64:	0001dac0 	call	1dac <_ZN3USB13AttemptConfigEhhhb>
   1da68:	0001dac0 	call	1dac <_ZN3USB13AttemptConfigEhhhb>
   1da6c:	0001dabc 	xorhi	zero,zero,1898
   1da70:	0001dc90 	cmplti	zero,zero,1906
   1da74:	0001dc90 	cmplti	zero,zero,1906
   1da78:	0001dc78 	rdprs	zero,zero,1905
   1da7c:	0001dabc 	xorhi	zero,zero,1898
   1da80:	0001dc90 	cmplti	zero,zero,1906
   1da84:	0001dc78 	rdprs	zero,zero,1905
   1da88:	0001dc90 	cmplti	zero,zero,1906
   1da8c:	0001dabc 	xorhi	zero,zero,1898
   1da90:	0001dca0 	cmpeqi	zero,zero,1906
   1da94:	0001dca0 	cmpeqi	zero,zero,1906
   1da98:	0001dca0 	cmpeqi	zero,zero,1906
   1da9c:	0001e000 	call	1e00 <_ZN3USB13AttemptConfigEhhhb+0x54>
   1daa0:	2404b03a 	or	r2,r4,r16
   1daa4:	1000711e 	bne	r2,zero,1dc6c <__muldf3+0x300>
   1daa8:	05400204 	movi	r21,8
   1daac:	0021883a 	mov	r16,zero
   1dab0:	002d883a 	mov	r22,zero
   1dab4:	01400084 	movi	r5,2
   1dab8:	003fcb06 	br	1d9e8 <__alt_data_end+0xfc01d9e8>
   1dabc:	500d883a 	mov	r6,r10
   1dac0:	00800084 	movi	r2,2
   1dac4:	38805926 	beq	r7,r2,1dc2c <__muldf3+0x2c0>
   1dac8:	008000c4 	movi	r2,3
   1dacc:	3881bb26 	beq	r7,r2,1e1bc <__muldf3+0x850>
   1dad0:	00800044 	movi	r2,1
   1dad4:	3881961e 	bne	r7,r2,1e130 <__muldf3+0x7c4>
   1dad8:	3027883a 	mov	r19,r6
   1dadc:	0005883a 	mov	r2,zero
   1dae0:	0021883a 	mov	r16,zero
   1dae4:	002d883a 	mov	r22,zero
   1dae8:	1004953a 	slli	r2,r2,20
   1daec:	98c03fcc 	andi	r3,r19,255
   1daf0:	04400434 	movhi	r17,16
   1daf4:	8c7fffc4 	addi	r17,r17,-1
   1daf8:	180697fa 	slli	r3,r3,31
   1dafc:	8460703a 	and	r16,r16,r17
   1db00:	80a0b03a 	or	r16,r16,r2
   1db04:	80c6b03a 	or	r3,r16,r3
   1db08:	b005883a 	mov	r2,r22
   1db0c:	dfc01117 	ldw	ra,68(sp)
   1db10:	df001017 	ldw	fp,64(sp)
   1db14:	ddc00f17 	ldw	r23,60(sp)
   1db18:	dd800e17 	ldw	r22,56(sp)
   1db1c:	dd400d17 	ldw	r21,52(sp)
   1db20:	dd000c17 	ldw	r20,48(sp)
   1db24:	dcc00b17 	ldw	r19,44(sp)
   1db28:	dc800a17 	ldw	r18,40(sp)
   1db2c:	dc400917 	ldw	r17,36(sp)
   1db30:	dc000817 	ldw	r16,32(sp)
   1db34:	dec01204 	addi	sp,sp,72
   1db38:	f800283a 	ret
   1db3c:	2404b03a 	or	r2,r4,r16
   1db40:	202b883a 	mov	r21,r4
   1db44:	10004426 	beq	r2,zero,1dc58 <__muldf3+0x2ec>
   1db48:	80015126 	beq	r16,zero,1e090 <__muldf3+0x724>
   1db4c:	8009883a 	mov	r4,r16
   1db50:	d9800715 	stw	r6,28(sp)
   1db54:	d9c00215 	stw	r7,8(sp)
   1db58:	da400415 	stw	r9,16(sp)
   1db5c:	000e1640 	call	e164 <__clzsi2>
   1db60:	d9800717 	ldw	r6,28(sp)
   1db64:	d9c00217 	ldw	r7,8(sp)
   1db68:	da400417 	ldw	r9,16(sp)
   1db6c:	113ffd44 	addi	r4,r2,-11
   1db70:	00c00704 	movi	r3,28
   1db74:	19014216 	blt	r3,r4,1e080 <__muldf3+0x714>
   1db78:	00c00744 	movi	r3,29
   1db7c:	15bffe04 	addi	r22,r2,-8
   1db80:	1907c83a 	sub	r3,r3,r4
   1db84:	85a0983a 	sll	r16,r16,r22
   1db88:	a8c6d83a 	srl	r3,r21,r3
   1db8c:	adac983a 	sll	r22,r21,r22
   1db90:	1c20b03a 	or	r16,r3,r16
   1db94:	1080fcc4 	addi	r2,r2,1011
   1db98:	00a9c83a 	sub	r20,zero,r2
   1db9c:	002b883a 	mov	r21,zero
   1dba0:	000b883a 	mov	r5,zero
   1dba4:	003f9006 	br	1d9e8 <__alt_data_end+0xfc01d9e8>
   1dba8:	3446b03a 	or	r3,r6,r17
   1dbac:	1800281e 	bne	r3,zero,1dc50 <__muldf3+0x2e4>
   1dbb0:	0023883a 	mov	r17,zero
   1dbb4:	0025883a 	mov	r18,zero
   1dbb8:	01c00084 	movi	r7,2
   1dbbc:	003f9c06 	br	1da30 <__alt_data_end+0xfc01da30>
   1dbc0:	3446b03a 	or	r3,r6,r17
   1dbc4:	18001e26 	beq	r3,zero,1dc40 <__muldf3+0x2d4>
   1dbc8:	88012126 	beq	r17,zero,1e050 <__muldf3+0x6e4>
   1dbcc:	8809883a 	mov	r4,r17
   1dbd0:	d9400215 	stw	r5,8(sp)
   1dbd4:	d9800715 	stw	r6,28(sp)
   1dbd8:	da400415 	stw	r9,16(sp)
   1dbdc:	da800315 	stw	r10,12(sp)
   1dbe0:	000e1640 	call	e164 <__clzsi2>
   1dbe4:	d9400217 	ldw	r5,8(sp)
   1dbe8:	d9800717 	ldw	r6,28(sp)
   1dbec:	da400417 	ldw	r9,16(sp)
   1dbf0:	da800317 	ldw	r10,12(sp)
   1dbf4:	113ffd44 	addi	r4,r2,-11
   1dbf8:	00c00704 	movi	r3,28
   1dbfc:	19011016 	blt	r3,r4,1e040 <__muldf3+0x6d4>
   1dc00:	00c00744 	movi	r3,29
   1dc04:	14bffe04 	addi	r18,r2,-8
   1dc08:	1907c83a 	sub	r3,r3,r4
   1dc0c:	8ca2983a 	sll	r17,r17,r18
   1dc10:	30c6d83a 	srl	r3,r6,r3
   1dc14:	34a4983a 	sll	r18,r6,r18
   1dc18:	1c62b03a 	or	r17,r3,r17
   1dc1c:	1080fcc4 	addi	r2,r2,1011
   1dc20:	0085c83a 	sub	r2,zero,r2
   1dc24:	000f883a 	mov	r7,zero
   1dc28:	003f8106 	br	1da30 <__alt_data_end+0xfc01da30>
   1dc2c:	3027883a 	mov	r19,r6
   1dc30:	0081ffc4 	movi	r2,2047
   1dc34:	0021883a 	mov	r16,zero
   1dc38:	002d883a 	mov	r22,zero
   1dc3c:	003faa06 	br	1dae8 <__alt_data_end+0xfc01dae8>
   1dc40:	0023883a 	mov	r17,zero
   1dc44:	0025883a 	mov	r18,zero
   1dc48:	01c00044 	movi	r7,1
   1dc4c:	003f7806 	br	1da30 <__alt_data_end+0xfc01da30>
   1dc50:	01c000c4 	movi	r7,3
   1dc54:	003f7606 	br	1da30 <__alt_data_end+0xfc01da30>
   1dc58:	05400104 	movi	r21,4
   1dc5c:	0021883a 	mov	r16,zero
   1dc60:	002d883a 	mov	r22,zero
   1dc64:	01400044 	movi	r5,1
   1dc68:	003f5f06 	br	1d9e8 <__alt_data_end+0xfc01d9e8>
   1dc6c:	05400304 	movi	r21,12
   1dc70:	014000c4 	movi	r5,3
   1dc74:	003f5c06 	br	1d9e8 <__alt_data_end+0xfc01d9e8>
   1dc78:	04000434 	movhi	r16,16
   1dc7c:	0027883a 	mov	r19,zero
   1dc80:	843fffc4 	addi	r16,r16,-1
   1dc84:	05bfffc4 	movi	r22,-1
   1dc88:	0081ffc4 	movi	r2,2047
   1dc8c:	003f9606 	br	1dae8 <__alt_data_end+0xfc01dae8>
   1dc90:	8023883a 	mov	r17,r16
   1dc94:	b025883a 	mov	r18,r22
   1dc98:	280f883a 	mov	r7,r5
   1dc9c:	003f8806 	br	1dac0 <__alt_data_end+0xfc01dac0>
   1dca0:	8023883a 	mov	r17,r16
   1dca4:	b025883a 	mov	r18,r22
   1dca8:	480d883a 	mov	r6,r9
   1dcac:	280f883a 	mov	r7,r5
   1dcb0:	003f8306 	br	1dac0 <__alt_data_end+0xfc01dac0>
   1dcb4:	b026d43a 	srli	r19,r22,16
   1dcb8:	902ed43a 	srli	r23,r18,16
   1dcbc:	b5bfffcc 	andi	r22,r22,65535
   1dcc0:	94bfffcc 	andi	r18,r18,65535
   1dcc4:	b00b883a 	mov	r5,r22
   1dcc8:	9009883a 	mov	r4,r18
   1dccc:	d8c00515 	stw	r3,20(sp)
   1dcd0:	d9800715 	stw	r6,28(sp)
   1dcd4:	da000615 	stw	r8,24(sp)
   1dcd8:	000ccac0 	call	ccac <__mulsi3>
   1dcdc:	980b883a 	mov	r5,r19
   1dce0:	9009883a 	mov	r4,r18
   1dce4:	1029883a 	mov	r20,r2
   1dce8:	000ccac0 	call	ccac <__mulsi3>
   1dcec:	b80b883a 	mov	r5,r23
   1dcf0:	9809883a 	mov	r4,r19
   1dcf4:	102b883a 	mov	r21,r2
   1dcf8:	000ccac0 	call	ccac <__mulsi3>
   1dcfc:	b809883a 	mov	r4,r23
   1dd00:	b00b883a 	mov	r5,r22
   1dd04:	1039883a 	mov	fp,r2
   1dd08:	000ccac0 	call	ccac <__mulsi3>
   1dd0c:	a008d43a 	srli	r4,r20,16
   1dd10:	1545883a 	add	r2,r2,r21
   1dd14:	d8c00517 	ldw	r3,20(sp)
   1dd18:	2085883a 	add	r2,r4,r2
   1dd1c:	d9800717 	ldw	r6,28(sp)
   1dd20:	da000617 	ldw	r8,24(sp)
   1dd24:	1540022e 	bgeu	r2,r21,1dd30 <__muldf3+0x3c4>
   1dd28:	01000074 	movhi	r4,1
   1dd2c:	e139883a 	add	fp,fp,r4
   1dd30:	100e943a 	slli	r7,r2,16
   1dd34:	1004d43a 	srli	r2,r2,16
   1dd38:	882ad43a 	srli	r21,r17,16
   1dd3c:	a53fffcc 	andi	r20,r20,65535
   1dd40:	8c7fffcc 	andi	r17,r17,65535
   1dd44:	3d29883a 	add	r20,r7,r20
   1dd48:	b00b883a 	mov	r5,r22
   1dd4c:	8809883a 	mov	r4,r17
   1dd50:	d8c00515 	stw	r3,20(sp)
   1dd54:	d9800715 	stw	r6,28(sp)
   1dd58:	da000615 	stw	r8,24(sp)
   1dd5c:	dd000115 	stw	r20,4(sp)
   1dd60:	d8800015 	stw	r2,0(sp)
   1dd64:	000ccac0 	call	ccac <__mulsi3>
   1dd68:	980b883a 	mov	r5,r19
   1dd6c:	8809883a 	mov	r4,r17
   1dd70:	d8800215 	stw	r2,8(sp)
   1dd74:	000ccac0 	call	ccac <__mulsi3>
   1dd78:	9809883a 	mov	r4,r19
   1dd7c:	a80b883a 	mov	r5,r21
   1dd80:	1029883a 	mov	r20,r2
   1dd84:	000ccac0 	call	ccac <__mulsi3>
   1dd88:	b00b883a 	mov	r5,r22
   1dd8c:	a809883a 	mov	r4,r21
   1dd90:	d8800415 	stw	r2,16(sp)
   1dd94:	000ccac0 	call	ccac <__mulsi3>
   1dd98:	d9c00217 	ldw	r7,8(sp)
   1dd9c:	1505883a 	add	r2,r2,r20
   1dda0:	d8c00517 	ldw	r3,20(sp)
   1dda4:	3826d43a 	srli	r19,r7,16
   1dda8:	d9800717 	ldw	r6,28(sp)
   1ddac:	da000617 	ldw	r8,24(sp)
   1ddb0:	9885883a 	add	r2,r19,r2
   1ddb4:	da400417 	ldw	r9,16(sp)
   1ddb8:	1500022e 	bgeu	r2,r20,1ddc4 <__muldf3+0x458>
   1ddbc:	01000074 	movhi	r4,1
   1ddc0:	4913883a 	add	r9,r9,r4
   1ddc4:	1028d43a 	srli	r20,r2,16
   1ddc8:	1004943a 	slli	r2,r2,16
   1ddcc:	802cd43a 	srli	r22,r16,16
   1ddd0:	843fffcc 	andi	r16,r16,65535
   1ddd4:	3cffffcc 	andi	r19,r7,65535
   1ddd8:	9009883a 	mov	r4,r18
   1dddc:	800b883a 	mov	r5,r16
   1dde0:	a269883a 	add	r20,r20,r9
   1dde4:	d8c00515 	stw	r3,20(sp)
   1dde8:	d9800715 	stw	r6,28(sp)
   1ddec:	da000615 	stw	r8,24(sp)
   1ddf0:	14e7883a 	add	r19,r2,r19
   1ddf4:	000ccac0 	call	ccac <__mulsi3>
   1ddf8:	9009883a 	mov	r4,r18
   1ddfc:	b00b883a 	mov	r5,r22
   1de00:	d8800315 	stw	r2,12(sp)
   1de04:	000ccac0 	call	ccac <__mulsi3>
   1de08:	b809883a 	mov	r4,r23
   1de0c:	b00b883a 	mov	r5,r22
   1de10:	d8800215 	stw	r2,8(sp)
   1de14:	000ccac0 	call	ccac <__mulsi3>
   1de18:	b80b883a 	mov	r5,r23
   1de1c:	8009883a 	mov	r4,r16
   1de20:	d8800415 	stw	r2,16(sp)
   1de24:	000ccac0 	call	ccac <__mulsi3>
   1de28:	da800317 	ldw	r10,12(sp)
   1de2c:	d9c00217 	ldw	r7,8(sp)
   1de30:	d9000017 	ldw	r4,0(sp)
   1de34:	502ed43a 	srli	r23,r10,16
   1de38:	11c5883a 	add	r2,r2,r7
   1de3c:	24e5883a 	add	r18,r4,r19
   1de40:	b885883a 	add	r2,r23,r2
   1de44:	d8c00517 	ldw	r3,20(sp)
   1de48:	d9800717 	ldw	r6,28(sp)
   1de4c:	da000617 	ldw	r8,24(sp)
   1de50:	da400417 	ldw	r9,16(sp)
   1de54:	11c0022e 	bgeu	r2,r7,1de60 <__muldf3+0x4f4>
   1de58:	01000074 	movhi	r4,1
   1de5c:	4913883a 	add	r9,r9,r4
   1de60:	100ed43a 	srli	r7,r2,16
   1de64:	1004943a 	slli	r2,r2,16
   1de68:	55ffffcc 	andi	r23,r10,65535
   1de6c:	3a53883a 	add	r9,r7,r9
   1de70:	8809883a 	mov	r4,r17
   1de74:	800b883a 	mov	r5,r16
   1de78:	d8c00515 	stw	r3,20(sp)
   1de7c:	d9800715 	stw	r6,28(sp)
   1de80:	da000615 	stw	r8,24(sp)
   1de84:	da400415 	stw	r9,16(sp)
   1de88:	15ef883a 	add	r23,r2,r23
   1de8c:	000ccac0 	call	ccac <__mulsi3>
   1de90:	8809883a 	mov	r4,r17
   1de94:	b00b883a 	mov	r5,r22
   1de98:	d8800215 	stw	r2,8(sp)
   1de9c:	000ccac0 	call	ccac <__mulsi3>
   1dea0:	b00b883a 	mov	r5,r22
   1dea4:	a809883a 	mov	r4,r21
   1dea8:	d8800315 	stw	r2,12(sp)
   1deac:	000ccac0 	call	ccac <__mulsi3>
   1deb0:	8009883a 	mov	r4,r16
   1deb4:	a80b883a 	mov	r5,r21
   1deb8:	1023883a 	mov	r17,r2
   1debc:	000ccac0 	call	ccac <__mulsi3>
   1dec0:	d9c00217 	ldw	r7,8(sp)
   1dec4:	da800317 	ldw	r10,12(sp)
   1dec8:	d8c00517 	ldw	r3,20(sp)
   1decc:	3808d43a 	srli	r4,r7,16
   1ded0:	1285883a 	add	r2,r2,r10
   1ded4:	d9800717 	ldw	r6,28(sp)
   1ded8:	2085883a 	add	r2,r4,r2
   1dedc:	da000617 	ldw	r8,24(sp)
   1dee0:	da400417 	ldw	r9,16(sp)
   1dee4:	1280022e 	bgeu	r2,r10,1def0 <__muldf3+0x584>
   1dee8:	01000074 	movhi	r4,1
   1deec:	8923883a 	add	r17,r17,r4
   1def0:	1008943a 	slli	r4,r2,16
   1def4:	39ffffcc 	andi	r7,r7,65535
   1def8:	e4b9883a 	add	fp,fp,r18
   1defc:	21cf883a 	add	r7,r4,r7
   1df00:	e4e7803a 	cmpltu	r19,fp,r19
   1df04:	3d0f883a 	add	r7,r7,r20
   1df08:	bf39883a 	add	fp,r23,fp
   1df0c:	99c9883a 	add	r4,r19,r7
   1df10:	e5ef803a 	cmpltu	r23,fp,r23
   1df14:	490b883a 	add	r5,r9,r4
   1df18:	1004d43a 	srli	r2,r2,16
   1df1c:	b965883a 	add	r18,r23,r5
   1df20:	24c9803a 	cmpltu	r4,r4,r19
   1df24:	3d29803a 	cmpltu	r20,r7,r20
   1df28:	a128b03a 	or	r20,r20,r4
   1df2c:	95ef803a 	cmpltu	r23,r18,r23
   1df30:	2a53803a 	cmpltu	r9,r5,r9
   1df34:	a0a9883a 	add	r20,r20,r2
   1df38:	4deeb03a 	or	r23,r9,r23
   1df3c:	a5ef883a 	add	r23,r20,r23
   1df40:	bc63883a 	add	r17,r23,r17
   1df44:	e004927a 	slli	r2,fp,9
   1df48:	d9000117 	ldw	r4,4(sp)
   1df4c:	882e927a 	slli	r23,r17,9
   1df50:	9022d5fa 	srli	r17,r18,23
   1df54:	e038d5fa 	srli	fp,fp,23
   1df58:	1104b03a 	or	r2,r2,r4
   1df5c:	9024927a 	slli	r18,r18,9
   1df60:	1004c03a 	cmpne	r2,r2,zero
   1df64:	bc62b03a 	or	r17,r23,r17
   1df68:	1738b03a 	or	fp,r2,fp
   1df6c:	8880402c 	andhi	r2,r17,256
   1df70:	e4a4b03a 	or	r18,fp,r18
   1df74:	10000726 	beq	r2,zero,1df94 <__muldf3+0x628>
   1df78:	9006d07a 	srli	r3,r18,1
   1df7c:	880497fa 	slli	r2,r17,31
   1df80:	9480004c 	andi	r18,r18,1
   1df84:	8822d07a 	srli	r17,r17,1
   1df88:	1ca4b03a 	or	r18,r3,r18
   1df8c:	14a4b03a 	or	r18,r2,r18
   1df90:	4007883a 	mov	r3,r8
   1df94:	1880ffc4 	addi	r2,r3,1023
   1df98:	0080460e 	bge	zero,r2,1e0b4 <__muldf3+0x748>
   1df9c:	910001cc 	andi	r4,r18,7
   1dfa0:	20000726 	beq	r4,zero,1dfc0 <__muldf3+0x654>
   1dfa4:	910003cc 	andi	r4,r18,15
   1dfa8:	01400104 	movi	r5,4
   1dfac:	21400426 	beq	r4,r5,1dfc0 <__muldf3+0x654>
   1dfb0:	9149883a 	add	r4,r18,r5
   1dfb4:	24a5803a 	cmpltu	r18,r4,r18
   1dfb8:	8ca3883a 	add	r17,r17,r18
   1dfbc:	2025883a 	mov	r18,r4
   1dfc0:	8900402c 	andhi	r4,r17,256
   1dfc4:	20000426 	beq	r4,zero,1dfd8 <__muldf3+0x66c>
   1dfc8:	18810004 	addi	r2,r3,1024
   1dfcc:	00ffc034 	movhi	r3,65280
   1dfd0:	18ffffc4 	addi	r3,r3,-1
   1dfd4:	88e2703a 	and	r17,r17,r3
   1dfd8:	00c1ff84 	movi	r3,2046
   1dfdc:	18bf1316 	blt	r3,r2,1dc2c <__alt_data_end+0xfc01dc2c>
   1dfe0:	882c977a 	slli	r22,r17,29
   1dfe4:	9024d0fa 	srli	r18,r18,3
   1dfe8:	8822927a 	slli	r17,r17,9
   1dfec:	1081ffcc 	andi	r2,r2,2047
   1dff0:	b4acb03a 	or	r22,r22,r18
   1dff4:	8820d33a 	srli	r16,r17,12
   1dff8:	3027883a 	mov	r19,r6
   1dffc:	003eba06 	br	1dae8 <__alt_data_end+0xfc01dae8>
   1e000:	8080022c 	andhi	r2,r16,8
   1e004:	10000926 	beq	r2,zero,1e02c <__muldf3+0x6c0>
   1e008:	8880022c 	andhi	r2,r17,8
   1e00c:	1000071e 	bne	r2,zero,1e02c <__muldf3+0x6c0>
   1e010:	00800434 	movhi	r2,16
   1e014:	8c000234 	orhi	r16,r17,8
   1e018:	10bfffc4 	addi	r2,r2,-1
   1e01c:	e027883a 	mov	r19,fp
   1e020:	80a0703a 	and	r16,r16,r2
   1e024:	902d883a 	mov	r22,r18
   1e028:	003f1706 	br	1dc88 <__alt_data_end+0xfc01dc88>
   1e02c:	00800434 	movhi	r2,16
   1e030:	84000234 	orhi	r16,r16,8
   1e034:	10bfffc4 	addi	r2,r2,-1
   1e038:	80a0703a 	and	r16,r16,r2
   1e03c:	003f1206 	br	1dc88 <__alt_data_end+0xfc01dc88>
   1e040:	147ff604 	addi	r17,r2,-40
   1e044:	3462983a 	sll	r17,r6,r17
   1e048:	0025883a 	mov	r18,zero
   1e04c:	003ef306 	br	1dc1c <__alt_data_end+0xfc01dc1c>
   1e050:	3009883a 	mov	r4,r6
   1e054:	d9400215 	stw	r5,8(sp)
   1e058:	d9800715 	stw	r6,28(sp)
   1e05c:	da400415 	stw	r9,16(sp)
   1e060:	da800315 	stw	r10,12(sp)
   1e064:	000e1640 	call	e164 <__clzsi2>
   1e068:	10800804 	addi	r2,r2,32
   1e06c:	da800317 	ldw	r10,12(sp)
   1e070:	da400417 	ldw	r9,16(sp)
   1e074:	d9800717 	ldw	r6,28(sp)
   1e078:	d9400217 	ldw	r5,8(sp)
   1e07c:	003edd06 	br	1dbf4 <__alt_data_end+0xfc01dbf4>
   1e080:	143ff604 	addi	r16,r2,-40
   1e084:	ac20983a 	sll	r16,r21,r16
   1e088:	002d883a 	mov	r22,zero
   1e08c:	003ec106 	br	1db94 <__alt_data_end+0xfc01db94>
   1e090:	d9800715 	stw	r6,28(sp)
   1e094:	d9c00215 	stw	r7,8(sp)
   1e098:	da400415 	stw	r9,16(sp)
   1e09c:	000e1640 	call	e164 <__clzsi2>
   1e0a0:	10800804 	addi	r2,r2,32
   1e0a4:	da400417 	ldw	r9,16(sp)
   1e0a8:	d9c00217 	ldw	r7,8(sp)
   1e0ac:	d9800717 	ldw	r6,28(sp)
   1e0b0:	003eae06 	br	1db6c <__alt_data_end+0xfc01db6c>
   1e0b4:	00c00044 	movi	r3,1
   1e0b8:	1887c83a 	sub	r3,r3,r2
   1e0bc:	01000e04 	movi	r4,56
   1e0c0:	20fe8516 	blt	r4,r3,1dad8 <__alt_data_end+0xfc01dad8>
   1e0c4:	010007c4 	movi	r4,31
   1e0c8:	20c01b16 	blt	r4,r3,1e138 <__muldf3+0x7cc>
   1e0cc:	00800804 	movi	r2,32
   1e0d0:	10c5c83a 	sub	r2,r2,r3
   1e0d4:	888a983a 	sll	r5,r17,r2
   1e0d8:	90c8d83a 	srl	r4,r18,r3
   1e0dc:	9084983a 	sll	r2,r18,r2
   1e0e0:	88e2d83a 	srl	r17,r17,r3
   1e0e4:	2906b03a 	or	r3,r5,r4
   1e0e8:	1004c03a 	cmpne	r2,r2,zero
   1e0ec:	1886b03a 	or	r3,r3,r2
   1e0f0:	188001cc 	andi	r2,r3,7
   1e0f4:	10000726 	beq	r2,zero,1e114 <__muldf3+0x7a8>
   1e0f8:	188003cc 	andi	r2,r3,15
   1e0fc:	01000104 	movi	r4,4
   1e100:	11000426 	beq	r2,r4,1e114 <__muldf3+0x7a8>
   1e104:	1805883a 	mov	r2,r3
   1e108:	10c00104 	addi	r3,r2,4
   1e10c:	1885803a 	cmpltu	r2,r3,r2
   1e110:	88a3883a 	add	r17,r17,r2
   1e114:	8880202c 	andhi	r2,r17,128
   1e118:	10001c26 	beq	r2,zero,1e18c <__muldf3+0x820>
   1e11c:	3027883a 	mov	r19,r6
   1e120:	00800044 	movi	r2,1
   1e124:	0021883a 	mov	r16,zero
   1e128:	002d883a 	mov	r22,zero
   1e12c:	003e6e06 	br	1dae8 <__alt_data_end+0xfc01dae8>
   1e130:	4007883a 	mov	r3,r8
   1e134:	003f9706 	br	1df94 <__alt_data_end+0xfc01df94>
   1e138:	017ff844 	movi	r5,-31
   1e13c:	2885c83a 	sub	r2,r5,r2
   1e140:	888ad83a 	srl	r5,r17,r2
   1e144:	00800804 	movi	r2,32
   1e148:	18801a26 	beq	r3,r2,1e1b4 <__muldf3+0x848>
   1e14c:	01001004 	movi	r4,64
   1e150:	20c7c83a 	sub	r3,r4,r3
   1e154:	88e2983a 	sll	r17,r17,r3
   1e158:	8ca4b03a 	or	r18,r17,r18
   1e15c:	9004c03a 	cmpne	r2,r18,zero
   1e160:	2884b03a 	or	r2,r5,r2
   1e164:	144001cc 	andi	r17,r2,7
   1e168:	88000d1e 	bne	r17,zero,1e1a0 <__muldf3+0x834>
   1e16c:	0021883a 	mov	r16,zero
   1e170:	102cd0fa 	srli	r22,r2,3
   1e174:	3027883a 	mov	r19,r6
   1e178:	0005883a 	mov	r2,zero
   1e17c:	b46cb03a 	or	r22,r22,r17
   1e180:	003e5906 	br	1dae8 <__alt_data_end+0xfc01dae8>
   1e184:	1007883a 	mov	r3,r2
   1e188:	0023883a 	mov	r17,zero
   1e18c:	8820927a 	slli	r16,r17,9
   1e190:	1805883a 	mov	r2,r3
   1e194:	8822977a 	slli	r17,r17,29
   1e198:	8020d33a 	srli	r16,r16,12
   1e19c:	003ff406 	br	1e170 <__alt_data_end+0xfc01e170>
   1e1a0:	10c003cc 	andi	r3,r2,15
   1e1a4:	01000104 	movi	r4,4
   1e1a8:	193ff626 	beq	r3,r4,1e184 <__alt_data_end+0xfc01e184>
   1e1ac:	0023883a 	mov	r17,zero
   1e1b0:	003fd506 	br	1e108 <__alt_data_end+0xfc01e108>
   1e1b4:	0023883a 	mov	r17,zero
   1e1b8:	003fe706 	br	1e158 <__alt_data_end+0xfc01e158>
   1e1bc:	00800434 	movhi	r2,16
   1e1c0:	8c000234 	orhi	r16,r17,8
   1e1c4:	10bfffc4 	addi	r2,r2,-1
   1e1c8:	3027883a 	mov	r19,r6
   1e1cc:	80a0703a 	and	r16,r16,r2
   1e1d0:	902d883a 	mov	r22,r18
   1e1d4:	003eac06 	br	1dc88 <__alt_data_end+0xfc01dc88>

0001e1d8 <__subdf3>:
   1e1d8:	02000434 	movhi	r8,16
   1e1dc:	423fffc4 	addi	r8,r8,-1
   1e1e0:	defffb04 	addi	sp,sp,-20
   1e1e4:	2a14703a 	and	r10,r5,r8
   1e1e8:	3812d53a 	srli	r9,r7,20
   1e1ec:	3a10703a 	and	r8,r7,r8
   1e1f0:	2006d77a 	srli	r3,r4,29
   1e1f4:	3004d77a 	srli	r2,r6,29
   1e1f8:	dc000015 	stw	r16,0(sp)
   1e1fc:	501490fa 	slli	r10,r10,3
   1e200:	2820d53a 	srli	r16,r5,20
   1e204:	401090fa 	slli	r8,r8,3
   1e208:	dc800215 	stw	r18,8(sp)
   1e20c:	dc400115 	stw	r17,4(sp)
   1e210:	dfc00415 	stw	ra,16(sp)
   1e214:	202290fa 	slli	r17,r4,3
   1e218:	dcc00315 	stw	r19,12(sp)
   1e21c:	4a41ffcc 	andi	r9,r9,2047
   1e220:	0101ffc4 	movi	r4,2047
   1e224:	2824d7fa 	srli	r18,r5,31
   1e228:	8401ffcc 	andi	r16,r16,2047
   1e22c:	50c6b03a 	or	r3,r10,r3
   1e230:	380ed7fa 	srli	r7,r7,31
   1e234:	408ab03a 	or	r5,r8,r2
   1e238:	300c90fa 	slli	r6,r6,3
   1e23c:	49009626 	beq	r9,r4,1e498 <__subdf3+0x2c0>
   1e240:	39c0005c 	xori	r7,r7,1
   1e244:	8245c83a 	sub	r2,r16,r9
   1e248:	3c807426 	beq	r7,r18,1e41c <__subdf3+0x244>
   1e24c:	0080af0e 	bge	zero,r2,1e50c <__subdf3+0x334>
   1e250:	48002a1e 	bne	r9,zero,1e2fc <__subdf3+0x124>
   1e254:	2988b03a 	or	r4,r5,r6
   1e258:	20009a1e 	bne	r4,zero,1e4c4 <__subdf3+0x2ec>
   1e25c:	888001cc 	andi	r2,r17,7
   1e260:	10000726 	beq	r2,zero,1e280 <__subdf3+0xa8>
   1e264:	888003cc 	andi	r2,r17,15
   1e268:	01000104 	movi	r4,4
   1e26c:	11000426 	beq	r2,r4,1e280 <__subdf3+0xa8>
   1e270:	890b883a 	add	r5,r17,r4
   1e274:	2c63803a 	cmpltu	r17,r5,r17
   1e278:	1c47883a 	add	r3,r3,r17
   1e27c:	2823883a 	mov	r17,r5
   1e280:	1880202c 	andhi	r2,r3,128
   1e284:	10005926 	beq	r2,zero,1e3ec <__subdf3+0x214>
   1e288:	84000044 	addi	r16,r16,1
   1e28c:	0081ffc4 	movi	r2,2047
   1e290:	8080be26 	beq	r16,r2,1e58c <__subdf3+0x3b4>
   1e294:	017fe034 	movhi	r5,65408
   1e298:	297fffc4 	addi	r5,r5,-1
   1e29c:	1946703a 	and	r3,r3,r5
   1e2a0:	1804977a 	slli	r2,r3,29
   1e2a4:	1806927a 	slli	r3,r3,9
   1e2a8:	8822d0fa 	srli	r17,r17,3
   1e2ac:	8401ffcc 	andi	r16,r16,2047
   1e2b0:	180ad33a 	srli	r5,r3,12
   1e2b4:	9100004c 	andi	r4,r18,1
   1e2b8:	1444b03a 	or	r2,r2,r17
   1e2bc:	80c1ffcc 	andi	r3,r16,2047
   1e2c0:	1820953a 	slli	r16,r3,20
   1e2c4:	20c03fcc 	andi	r3,r4,255
   1e2c8:	180897fa 	slli	r4,r3,31
   1e2cc:	00c00434 	movhi	r3,16
   1e2d0:	18ffffc4 	addi	r3,r3,-1
   1e2d4:	28c6703a 	and	r3,r5,r3
   1e2d8:	1c06b03a 	or	r3,r3,r16
   1e2dc:	1906b03a 	or	r3,r3,r4
   1e2e0:	dfc00417 	ldw	ra,16(sp)
   1e2e4:	dcc00317 	ldw	r19,12(sp)
   1e2e8:	dc800217 	ldw	r18,8(sp)
   1e2ec:	dc400117 	ldw	r17,4(sp)
   1e2f0:	dc000017 	ldw	r16,0(sp)
   1e2f4:	dec00504 	addi	sp,sp,20
   1e2f8:	f800283a 	ret
   1e2fc:	0101ffc4 	movi	r4,2047
   1e300:	813fd626 	beq	r16,r4,1e25c <__alt_data_end+0xfc01e25c>
   1e304:	29402034 	orhi	r5,r5,128
   1e308:	01000e04 	movi	r4,56
   1e30c:	2080a316 	blt	r4,r2,1e59c <__subdf3+0x3c4>
   1e310:	010007c4 	movi	r4,31
   1e314:	2080c616 	blt	r4,r2,1e630 <__subdf3+0x458>
   1e318:	01000804 	movi	r4,32
   1e31c:	2089c83a 	sub	r4,r4,r2
   1e320:	2910983a 	sll	r8,r5,r4
   1e324:	308ed83a 	srl	r7,r6,r2
   1e328:	3108983a 	sll	r4,r6,r4
   1e32c:	2884d83a 	srl	r2,r5,r2
   1e330:	41ccb03a 	or	r6,r8,r7
   1e334:	2008c03a 	cmpne	r4,r4,zero
   1e338:	310cb03a 	or	r6,r6,r4
   1e33c:	898dc83a 	sub	r6,r17,r6
   1e340:	89a3803a 	cmpltu	r17,r17,r6
   1e344:	1887c83a 	sub	r3,r3,r2
   1e348:	1c47c83a 	sub	r3,r3,r17
   1e34c:	3023883a 	mov	r17,r6
   1e350:	1880202c 	andhi	r2,r3,128
   1e354:	10002326 	beq	r2,zero,1e3e4 <__subdf3+0x20c>
   1e358:	04c02034 	movhi	r19,128
   1e35c:	9cffffc4 	addi	r19,r19,-1
   1e360:	1ce6703a 	and	r19,r3,r19
   1e364:	98007a26 	beq	r19,zero,1e550 <__subdf3+0x378>
   1e368:	9809883a 	mov	r4,r19
   1e36c:	000e1640 	call	e164 <__clzsi2>
   1e370:	113ffe04 	addi	r4,r2,-8
   1e374:	00c007c4 	movi	r3,31
   1e378:	19007b16 	blt	r3,r4,1e568 <__subdf3+0x390>
   1e37c:	00800804 	movi	r2,32
   1e380:	1105c83a 	sub	r2,r2,r4
   1e384:	8884d83a 	srl	r2,r17,r2
   1e388:	9906983a 	sll	r3,r19,r4
   1e38c:	8922983a 	sll	r17,r17,r4
   1e390:	10c4b03a 	or	r2,r2,r3
   1e394:	24007816 	blt	r4,r16,1e578 <__subdf3+0x3a0>
   1e398:	2421c83a 	sub	r16,r4,r16
   1e39c:	80c00044 	addi	r3,r16,1
   1e3a0:	010007c4 	movi	r4,31
   1e3a4:	20c09516 	blt	r4,r3,1e5fc <__subdf3+0x424>
   1e3a8:	01400804 	movi	r5,32
   1e3ac:	28cbc83a 	sub	r5,r5,r3
   1e3b0:	88c8d83a 	srl	r4,r17,r3
   1e3b4:	8962983a 	sll	r17,r17,r5
   1e3b8:	114a983a 	sll	r5,r2,r5
   1e3bc:	10c6d83a 	srl	r3,r2,r3
   1e3c0:	8804c03a 	cmpne	r2,r17,zero
   1e3c4:	290ab03a 	or	r5,r5,r4
   1e3c8:	28a2b03a 	or	r17,r5,r2
   1e3cc:	0021883a 	mov	r16,zero
   1e3d0:	003fa206 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e3d4:	2090b03a 	or	r8,r4,r2
   1e3d8:	40018e26 	beq	r8,zero,1ea14 <__subdf3+0x83c>
   1e3dc:	1007883a 	mov	r3,r2
   1e3e0:	2023883a 	mov	r17,r4
   1e3e4:	888001cc 	andi	r2,r17,7
   1e3e8:	103f9e1e 	bne	r2,zero,1e264 <__alt_data_end+0xfc01e264>
   1e3ec:	1804977a 	slli	r2,r3,29
   1e3f0:	8822d0fa 	srli	r17,r17,3
   1e3f4:	1810d0fa 	srli	r8,r3,3
   1e3f8:	9100004c 	andi	r4,r18,1
   1e3fc:	1444b03a 	or	r2,r2,r17
   1e400:	00c1ffc4 	movi	r3,2047
   1e404:	80c02826 	beq	r16,r3,1e4a8 <__subdf3+0x2d0>
   1e408:	01400434 	movhi	r5,16
   1e40c:	297fffc4 	addi	r5,r5,-1
   1e410:	80e0703a 	and	r16,r16,r3
   1e414:	414a703a 	and	r5,r8,r5
   1e418:	003fa806 	br	1e2bc <__alt_data_end+0xfc01e2bc>
   1e41c:	0080630e 	bge	zero,r2,1e5ac <__subdf3+0x3d4>
   1e420:	48003026 	beq	r9,zero,1e4e4 <__subdf3+0x30c>
   1e424:	0101ffc4 	movi	r4,2047
   1e428:	813f8c26 	beq	r16,r4,1e25c <__alt_data_end+0xfc01e25c>
   1e42c:	29402034 	orhi	r5,r5,128
   1e430:	01000e04 	movi	r4,56
   1e434:	2080a90e 	bge	r4,r2,1e6dc <__subdf3+0x504>
   1e438:	298cb03a 	or	r6,r5,r6
   1e43c:	3012c03a 	cmpne	r9,r6,zero
   1e440:	0005883a 	mov	r2,zero
   1e444:	4c53883a 	add	r9,r9,r17
   1e448:	4c63803a 	cmpltu	r17,r9,r17
   1e44c:	10c7883a 	add	r3,r2,r3
   1e450:	88c7883a 	add	r3,r17,r3
   1e454:	4823883a 	mov	r17,r9
   1e458:	1880202c 	andhi	r2,r3,128
   1e45c:	1000d026 	beq	r2,zero,1e7a0 <__subdf3+0x5c8>
   1e460:	84000044 	addi	r16,r16,1
   1e464:	0081ffc4 	movi	r2,2047
   1e468:	8080fe26 	beq	r16,r2,1e864 <__subdf3+0x68c>
   1e46c:	00bfe034 	movhi	r2,65408
   1e470:	10bfffc4 	addi	r2,r2,-1
   1e474:	1886703a 	and	r3,r3,r2
   1e478:	880ad07a 	srli	r5,r17,1
   1e47c:	180497fa 	slli	r2,r3,31
   1e480:	8900004c 	andi	r4,r17,1
   1e484:	2922b03a 	or	r17,r5,r4
   1e488:	1806d07a 	srli	r3,r3,1
   1e48c:	1462b03a 	or	r17,r2,r17
   1e490:	3825883a 	mov	r18,r7
   1e494:	003f7106 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e498:	2984b03a 	or	r2,r5,r6
   1e49c:	103f6826 	beq	r2,zero,1e240 <__alt_data_end+0xfc01e240>
   1e4a0:	39c03fcc 	andi	r7,r7,255
   1e4a4:	003f6706 	br	1e244 <__alt_data_end+0xfc01e244>
   1e4a8:	4086b03a 	or	r3,r8,r2
   1e4ac:	18015226 	beq	r3,zero,1e9f8 <__subdf3+0x820>
   1e4b0:	00c00434 	movhi	r3,16
   1e4b4:	41400234 	orhi	r5,r8,8
   1e4b8:	18ffffc4 	addi	r3,r3,-1
   1e4bc:	28ca703a 	and	r5,r5,r3
   1e4c0:	003f7e06 	br	1e2bc <__alt_data_end+0xfc01e2bc>
   1e4c4:	10bfffc4 	addi	r2,r2,-1
   1e4c8:	1000491e 	bne	r2,zero,1e5f0 <__subdf3+0x418>
   1e4cc:	898fc83a 	sub	r7,r17,r6
   1e4d0:	89e3803a 	cmpltu	r17,r17,r7
   1e4d4:	1947c83a 	sub	r3,r3,r5
   1e4d8:	1c47c83a 	sub	r3,r3,r17
   1e4dc:	3823883a 	mov	r17,r7
   1e4e0:	003f9b06 	br	1e350 <__alt_data_end+0xfc01e350>
   1e4e4:	2988b03a 	or	r4,r5,r6
   1e4e8:	203f5c26 	beq	r4,zero,1e25c <__alt_data_end+0xfc01e25c>
   1e4ec:	10bfffc4 	addi	r2,r2,-1
   1e4f0:	1000931e 	bne	r2,zero,1e740 <__subdf3+0x568>
   1e4f4:	898d883a 	add	r6,r17,r6
   1e4f8:	3463803a 	cmpltu	r17,r6,r17
   1e4fc:	1947883a 	add	r3,r3,r5
   1e500:	88c7883a 	add	r3,r17,r3
   1e504:	3023883a 	mov	r17,r6
   1e508:	003fd306 	br	1e458 <__alt_data_end+0xfc01e458>
   1e50c:	1000541e 	bne	r2,zero,1e660 <__subdf3+0x488>
   1e510:	80800044 	addi	r2,r16,1
   1e514:	1081ffcc 	andi	r2,r2,2047
   1e518:	01000044 	movi	r4,1
   1e51c:	2080a20e 	bge	r4,r2,1e7a8 <__subdf3+0x5d0>
   1e520:	8989c83a 	sub	r4,r17,r6
   1e524:	8905803a 	cmpltu	r2,r17,r4
   1e528:	1967c83a 	sub	r19,r3,r5
   1e52c:	98a7c83a 	sub	r19,r19,r2
   1e530:	9880202c 	andhi	r2,r19,128
   1e534:	10006326 	beq	r2,zero,1e6c4 <__subdf3+0x4ec>
   1e538:	3463c83a 	sub	r17,r6,r17
   1e53c:	28c7c83a 	sub	r3,r5,r3
   1e540:	344d803a 	cmpltu	r6,r6,r17
   1e544:	19a7c83a 	sub	r19,r3,r6
   1e548:	3825883a 	mov	r18,r7
   1e54c:	983f861e 	bne	r19,zero,1e368 <__alt_data_end+0xfc01e368>
   1e550:	8809883a 	mov	r4,r17
   1e554:	000e1640 	call	e164 <__clzsi2>
   1e558:	10800804 	addi	r2,r2,32
   1e55c:	113ffe04 	addi	r4,r2,-8
   1e560:	00c007c4 	movi	r3,31
   1e564:	193f850e 	bge	r3,r4,1e37c <__alt_data_end+0xfc01e37c>
   1e568:	10bff604 	addi	r2,r2,-40
   1e56c:	8884983a 	sll	r2,r17,r2
   1e570:	0023883a 	mov	r17,zero
   1e574:	243f880e 	bge	r4,r16,1e398 <__alt_data_end+0xfc01e398>
   1e578:	00ffe034 	movhi	r3,65408
   1e57c:	18ffffc4 	addi	r3,r3,-1
   1e580:	8121c83a 	sub	r16,r16,r4
   1e584:	10c6703a 	and	r3,r2,r3
   1e588:	003f3406 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e58c:	9100004c 	andi	r4,r18,1
   1e590:	000b883a 	mov	r5,zero
   1e594:	0005883a 	mov	r2,zero
   1e598:	003f4806 	br	1e2bc <__alt_data_end+0xfc01e2bc>
   1e59c:	298cb03a 	or	r6,r5,r6
   1e5a0:	300cc03a 	cmpne	r6,r6,zero
   1e5a4:	0005883a 	mov	r2,zero
   1e5a8:	003f6406 	br	1e33c <__alt_data_end+0xfc01e33c>
   1e5ac:	10009a1e 	bne	r2,zero,1e818 <__subdf3+0x640>
   1e5b0:	82400044 	addi	r9,r16,1
   1e5b4:	4881ffcc 	andi	r2,r9,2047
   1e5b8:	02800044 	movi	r10,1
   1e5bc:	5080670e 	bge	r10,r2,1e75c <__subdf3+0x584>
   1e5c0:	0081ffc4 	movi	r2,2047
   1e5c4:	4880af26 	beq	r9,r2,1e884 <__subdf3+0x6ac>
   1e5c8:	898d883a 	add	r6,r17,r6
   1e5cc:	1945883a 	add	r2,r3,r5
   1e5d0:	3447803a 	cmpltu	r3,r6,r17
   1e5d4:	1887883a 	add	r3,r3,r2
   1e5d8:	182297fa 	slli	r17,r3,31
   1e5dc:	300cd07a 	srli	r6,r6,1
   1e5e0:	1806d07a 	srli	r3,r3,1
   1e5e4:	4821883a 	mov	r16,r9
   1e5e8:	89a2b03a 	or	r17,r17,r6
   1e5ec:	003f1b06 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e5f0:	0101ffc4 	movi	r4,2047
   1e5f4:	813f441e 	bne	r16,r4,1e308 <__alt_data_end+0xfc01e308>
   1e5f8:	003f1806 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e5fc:	843ff844 	addi	r16,r16,-31
   1e600:	01400804 	movi	r5,32
   1e604:	1408d83a 	srl	r4,r2,r16
   1e608:	19405026 	beq	r3,r5,1e74c <__subdf3+0x574>
   1e60c:	01401004 	movi	r5,64
   1e610:	28c7c83a 	sub	r3,r5,r3
   1e614:	10c4983a 	sll	r2,r2,r3
   1e618:	88a2b03a 	or	r17,r17,r2
   1e61c:	8822c03a 	cmpne	r17,r17,zero
   1e620:	2462b03a 	or	r17,r4,r17
   1e624:	0007883a 	mov	r3,zero
   1e628:	0021883a 	mov	r16,zero
   1e62c:	003f6d06 	br	1e3e4 <__alt_data_end+0xfc01e3e4>
   1e630:	11fff804 	addi	r7,r2,-32
   1e634:	01000804 	movi	r4,32
   1e638:	29ced83a 	srl	r7,r5,r7
   1e63c:	11004526 	beq	r2,r4,1e754 <__subdf3+0x57c>
   1e640:	01001004 	movi	r4,64
   1e644:	2089c83a 	sub	r4,r4,r2
   1e648:	2904983a 	sll	r2,r5,r4
   1e64c:	118cb03a 	or	r6,r2,r6
   1e650:	300cc03a 	cmpne	r6,r6,zero
   1e654:	398cb03a 	or	r6,r7,r6
   1e658:	0005883a 	mov	r2,zero
   1e65c:	003f3706 	br	1e33c <__alt_data_end+0xfc01e33c>
   1e660:	80002a26 	beq	r16,zero,1e70c <__subdf3+0x534>
   1e664:	0101ffc4 	movi	r4,2047
   1e668:	49006626 	beq	r9,r4,1e804 <__subdf3+0x62c>
   1e66c:	0085c83a 	sub	r2,zero,r2
   1e670:	18c02034 	orhi	r3,r3,128
   1e674:	01000e04 	movi	r4,56
   1e678:	20807e16 	blt	r4,r2,1e874 <__subdf3+0x69c>
   1e67c:	010007c4 	movi	r4,31
   1e680:	2080e716 	blt	r4,r2,1ea20 <__subdf3+0x848>
   1e684:	01000804 	movi	r4,32
   1e688:	2089c83a 	sub	r4,r4,r2
   1e68c:	1914983a 	sll	r10,r3,r4
   1e690:	8890d83a 	srl	r8,r17,r2
   1e694:	8908983a 	sll	r4,r17,r4
   1e698:	1884d83a 	srl	r2,r3,r2
   1e69c:	5222b03a 	or	r17,r10,r8
   1e6a0:	2006c03a 	cmpne	r3,r4,zero
   1e6a4:	88e2b03a 	or	r17,r17,r3
   1e6a8:	3463c83a 	sub	r17,r6,r17
   1e6ac:	2885c83a 	sub	r2,r5,r2
   1e6b0:	344d803a 	cmpltu	r6,r6,r17
   1e6b4:	1187c83a 	sub	r3,r2,r6
   1e6b8:	4821883a 	mov	r16,r9
   1e6bc:	3825883a 	mov	r18,r7
   1e6c0:	003f2306 	br	1e350 <__alt_data_end+0xfc01e350>
   1e6c4:	24d0b03a 	or	r8,r4,r19
   1e6c8:	40001b1e 	bne	r8,zero,1e738 <__subdf3+0x560>
   1e6cc:	0005883a 	mov	r2,zero
   1e6d0:	0009883a 	mov	r4,zero
   1e6d4:	0021883a 	mov	r16,zero
   1e6d8:	003f4906 	br	1e400 <__alt_data_end+0xfc01e400>
   1e6dc:	010007c4 	movi	r4,31
   1e6e0:	20803a16 	blt	r4,r2,1e7cc <__subdf3+0x5f4>
   1e6e4:	01000804 	movi	r4,32
   1e6e8:	2089c83a 	sub	r4,r4,r2
   1e6ec:	2912983a 	sll	r9,r5,r4
   1e6f0:	3090d83a 	srl	r8,r6,r2
   1e6f4:	3108983a 	sll	r4,r6,r4
   1e6f8:	2884d83a 	srl	r2,r5,r2
   1e6fc:	4a12b03a 	or	r9,r9,r8
   1e700:	2008c03a 	cmpne	r4,r4,zero
   1e704:	4912b03a 	or	r9,r9,r4
   1e708:	003f4e06 	br	1e444 <__alt_data_end+0xfc01e444>
   1e70c:	1c48b03a 	or	r4,r3,r17
   1e710:	20003c26 	beq	r4,zero,1e804 <__subdf3+0x62c>
   1e714:	0084303a 	nor	r2,zero,r2
   1e718:	1000381e 	bne	r2,zero,1e7fc <__subdf3+0x624>
   1e71c:	3463c83a 	sub	r17,r6,r17
   1e720:	28c5c83a 	sub	r2,r5,r3
   1e724:	344d803a 	cmpltu	r6,r6,r17
   1e728:	1187c83a 	sub	r3,r2,r6
   1e72c:	4821883a 	mov	r16,r9
   1e730:	3825883a 	mov	r18,r7
   1e734:	003f0606 	br	1e350 <__alt_data_end+0xfc01e350>
   1e738:	2023883a 	mov	r17,r4
   1e73c:	003f0906 	br	1e364 <__alt_data_end+0xfc01e364>
   1e740:	0101ffc4 	movi	r4,2047
   1e744:	813f3a1e 	bne	r16,r4,1e430 <__alt_data_end+0xfc01e430>
   1e748:	003ec406 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e74c:	0005883a 	mov	r2,zero
   1e750:	003fb106 	br	1e618 <__alt_data_end+0xfc01e618>
   1e754:	0005883a 	mov	r2,zero
   1e758:	003fbc06 	br	1e64c <__alt_data_end+0xfc01e64c>
   1e75c:	1c44b03a 	or	r2,r3,r17
   1e760:	80008e1e 	bne	r16,zero,1e99c <__subdf3+0x7c4>
   1e764:	1000c826 	beq	r2,zero,1ea88 <__subdf3+0x8b0>
   1e768:	2984b03a 	or	r2,r5,r6
   1e76c:	103ebb26 	beq	r2,zero,1e25c <__alt_data_end+0xfc01e25c>
   1e770:	8989883a 	add	r4,r17,r6
   1e774:	1945883a 	add	r2,r3,r5
   1e778:	2447803a 	cmpltu	r3,r4,r17
   1e77c:	1887883a 	add	r3,r3,r2
   1e780:	1880202c 	andhi	r2,r3,128
   1e784:	2023883a 	mov	r17,r4
   1e788:	103f1626 	beq	r2,zero,1e3e4 <__alt_data_end+0xfc01e3e4>
   1e78c:	00bfe034 	movhi	r2,65408
   1e790:	10bfffc4 	addi	r2,r2,-1
   1e794:	5021883a 	mov	r16,r10
   1e798:	1886703a 	and	r3,r3,r2
   1e79c:	003eaf06 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e7a0:	3825883a 	mov	r18,r7
   1e7a4:	003f0f06 	br	1e3e4 <__alt_data_end+0xfc01e3e4>
   1e7a8:	1c44b03a 	or	r2,r3,r17
   1e7ac:	8000251e 	bne	r16,zero,1e844 <__subdf3+0x66c>
   1e7b0:	1000661e 	bne	r2,zero,1e94c <__subdf3+0x774>
   1e7b4:	2990b03a 	or	r8,r5,r6
   1e7b8:	40009626 	beq	r8,zero,1ea14 <__subdf3+0x83c>
   1e7bc:	2807883a 	mov	r3,r5
   1e7c0:	3023883a 	mov	r17,r6
   1e7c4:	3825883a 	mov	r18,r7
   1e7c8:	003ea406 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e7cc:	127ff804 	addi	r9,r2,-32
   1e7d0:	01000804 	movi	r4,32
   1e7d4:	2a52d83a 	srl	r9,r5,r9
   1e7d8:	11008c26 	beq	r2,r4,1ea0c <__subdf3+0x834>
   1e7dc:	01001004 	movi	r4,64
   1e7e0:	2085c83a 	sub	r2,r4,r2
   1e7e4:	2884983a 	sll	r2,r5,r2
   1e7e8:	118cb03a 	or	r6,r2,r6
   1e7ec:	300cc03a 	cmpne	r6,r6,zero
   1e7f0:	4992b03a 	or	r9,r9,r6
   1e7f4:	0005883a 	mov	r2,zero
   1e7f8:	003f1206 	br	1e444 <__alt_data_end+0xfc01e444>
   1e7fc:	0101ffc4 	movi	r4,2047
   1e800:	493f9c1e 	bne	r9,r4,1e674 <__alt_data_end+0xfc01e674>
   1e804:	2807883a 	mov	r3,r5
   1e808:	3023883a 	mov	r17,r6
   1e80c:	4821883a 	mov	r16,r9
   1e810:	3825883a 	mov	r18,r7
   1e814:	003e9106 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e818:	80001f1e 	bne	r16,zero,1e898 <__subdf3+0x6c0>
   1e81c:	1c48b03a 	or	r4,r3,r17
   1e820:	20005a26 	beq	r4,zero,1e98c <__subdf3+0x7b4>
   1e824:	0084303a 	nor	r2,zero,r2
   1e828:	1000561e 	bne	r2,zero,1e984 <__subdf3+0x7ac>
   1e82c:	89a3883a 	add	r17,r17,r6
   1e830:	1945883a 	add	r2,r3,r5
   1e834:	898d803a 	cmpltu	r6,r17,r6
   1e838:	3087883a 	add	r3,r6,r2
   1e83c:	4821883a 	mov	r16,r9
   1e840:	003f0506 	br	1e458 <__alt_data_end+0xfc01e458>
   1e844:	10002b1e 	bne	r2,zero,1e8f4 <__subdf3+0x71c>
   1e848:	2984b03a 	or	r2,r5,r6
   1e84c:	10008026 	beq	r2,zero,1ea50 <__subdf3+0x878>
   1e850:	2807883a 	mov	r3,r5
   1e854:	3023883a 	mov	r17,r6
   1e858:	3825883a 	mov	r18,r7
   1e85c:	0401ffc4 	movi	r16,2047
   1e860:	003e7e06 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e864:	3809883a 	mov	r4,r7
   1e868:	0011883a 	mov	r8,zero
   1e86c:	0005883a 	mov	r2,zero
   1e870:	003ee306 	br	1e400 <__alt_data_end+0xfc01e400>
   1e874:	1c62b03a 	or	r17,r3,r17
   1e878:	8822c03a 	cmpne	r17,r17,zero
   1e87c:	0005883a 	mov	r2,zero
   1e880:	003f8906 	br	1e6a8 <__alt_data_end+0xfc01e6a8>
   1e884:	3809883a 	mov	r4,r7
   1e888:	4821883a 	mov	r16,r9
   1e88c:	0011883a 	mov	r8,zero
   1e890:	0005883a 	mov	r2,zero
   1e894:	003eda06 	br	1e400 <__alt_data_end+0xfc01e400>
   1e898:	0101ffc4 	movi	r4,2047
   1e89c:	49003b26 	beq	r9,r4,1e98c <__subdf3+0x7b4>
   1e8a0:	0085c83a 	sub	r2,zero,r2
   1e8a4:	18c02034 	orhi	r3,r3,128
   1e8a8:	01000e04 	movi	r4,56
   1e8ac:	20806e16 	blt	r4,r2,1ea68 <__subdf3+0x890>
   1e8b0:	010007c4 	movi	r4,31
   1e8b4:	20807716 	blt	r4,r2,1ea94 <__subdf3+0x8bc>
   1e8b8:	01000804 	movi	r4,32
   1e8bc:	2089c83a 	sub	r4,r4,r2
   1e8c0:	1914983a 	sll	r10,r3,r4
   1e8c4:	8890d83a 	srl	r8,r17,r2
   1e8c8:	8908983a 	sll	r4,r17,r4
   1e8cc:	1884d83a 	srl	r2,r3,r2
   1e8d0:	5222b03a 	or	r17,r10,r8
   1e8d4:	2006c03a 	cmpne	r3,r4,zero
   1e8d8:	88e2b03a 	or	r17,r17,r3
   1e8dc:	89a3883a 	add	r17,r17,r6
   1e8e0:	1145883a 	add	r2,r2,r5
   1e8e4:	898d803a 	cmpltu	r6,r17,r6
   1e8e8:	3087883a 	add	r3,r6,r2
   1e8ec:	4821883a 	mov	r16,r9
   1e8f0:	003ed906 	br	1e458 <__alt_data_end+0xfc01e458>
   1e8f4:	2984b03a 	or	r2,r5,r6
   1e8f8:	10004226 	beq	r2,zero,1ea04 <__subdf3+0x82c>
   1e8fc:	1808d0fa 	srli	r4,r3,3
   1e900:	8822d0fa 	srli	r17,r17,3
   1e904:	1806977a 	slli	r3,r3,29
   1e908:	2080022c 	andhi	r2,r4,8
   1e90c:	1c62b03a 	or	r17,r3,r17
   1e910:	10000826 	beq	r2,zero,1e934 <__subdf3+0x75c>
   1e914:	2812d0fa 	srli	r9,r5,3
   1e918:	4880022c 	andhi	r2,r9,8
   1e91c:	1000051e 	bne	r2,zero,1e934 <__subdf3+0x75c>
   1e920:	300cd0fa 	srli	r6,r6,3
   1e924:	2804977a 	slli	r2,r5,29
   1e928:	4809883a 	mov	r4,r9
   1e92c:	3825883a 	mov	r18,r7
   1e930:	11a2b03a 	or	r17,r2,r6
   1e934:	8806d77a 	srli	r3,r17,29
   1e938:	200890fa 	slli	r4,r4,3
   1e93c:	882290fa 	slli	r17,r17,3
   1e940:	0401ffc4 	movi	r16,2047
   1e944:	1906b03a 	or	r3,r3,r4
   1e948:	003e4406 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e94c:	2984b03a 	or	r2,r5,r6
   1e950:	103e4226 	beq	r2,zero,1e25c <__alt_data_end+0xfc01e25c>
   1e954:	8989c83a 	sub	r4,r17,r6
   1e958:	8911803a 	cmpltu	r8,r17,r4
   1e95c:	1945c83a 	sub	r2,r3,r5
   1e960:	1205c83a 	sub	r2,r2,r8
   1e964:	1200202c 	andhi	r8,r2,128
   1e968:	403e9a26 	beq	r8,zero,1e3d4 <__alt_data_end+0xfc01e3d4>
   1e96c:	3463c83a 	sub	r17,r6,r17
   1e970:	28c5c83a 	sub	r2,r5,r3
   1e974:	344d803a 	cmpltu	r6,r6,r17
   1e978:	1187c83a 	sub	r3,r2,r6
   1e97c:	3825883a 	mov	r18,r7
   1e980:	003e3606 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e984:	0101ffc4 	movi	r4,2047
   1e988:	493fc71e 	bne	r9,r4,1e8a8 <__alt_data_end+0xfc01e8a8>
   1e98c:	2807883a 	mov	r3,r5
   1e990:	3023883a 	mov	r17,r6
   1e994:	4821883a 	mov	r16,r9
   1e998:	003e3006 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e99c:	10003626 	beq	r2,zero,1ea78 <__subdf3+0x8a0>
   1e9a0:	2984b03a 	or	r2,r5,r6
   1e9a4:	10001726 	beq	r2,zero,1ea04 <__subdf3+0x82c>
   1e9a8:	1808d0fa 	srli	r4,r3,3
   1e9ac:	8822d0fa 	srli	r17,r17,3
   1e9b0:	1806977a 	slli	r3,r3,29
   1e9b4:	2080022c 	andhi	r2,r4,8
   1e9b8:	1c62b03a 	or	r17,r3,r17
   1e9bc:	10000726 	beq	r2,zero,1e9dc <__subdf3+0x804>
   1e9c0:	2812d0fa 	srli	r9,r5,3
   1e9c4:	4880022c 	andhi	r2,r9,8
   1e9c8:	1000041e 	bne	r2,zero,1e9dc <__subdf3+0x804>
   1e9cc:	300cd0fa 	srli	r6,r6,3
   1e9d0:	2804977a 	slli	r2,r5,29
   1e9d4:	4809883a 	mov	r4,r9
   1e9d8:	11a2b03a 	or	r17,r2,r6
   1e9dc:	8806d77a 	srli	r3,r17,29
   1e9e0:	200890fa 	slli	r4,r4,3
   1e9e4:	882290fa 	slli	r17,r17,3
   1e9e8:	3825883a 	mov	r18,r7
   1e9ec:	1906b03a 	or	r3,r3,r4
   1e9f0:	0401ffc4 	movi	r16,2047
   1e9f4:	003e1906 	br	1e25c <__alt_data_end+0xfc01e25c>
   1e9f8:	000b883a 	mov	r5,zero
   1e9fc:	0005883a 	mov	r2,zero
   1ea00:	003e2e06 	br	1e2bc <__alt_data_end+0xfc01e2bc>
   1ea04:	0401ffc4 	movi	r16,2047
   1ea08:	003e1406 	br	1e25c <__alt_data_end+0xfc01e25c>
   1ea0c:	0005883a 	mov	r2,zero
   1ea10:	003f7506 	br	1e7e8 <__alt_data_end+0xfc01e7e8>
   1ea14:	0005883a 	mov	r2,zero
   1ea18:	0009883a 	mov	r4,zero
   1ea1c:	003e7806 	br	1e400 <__alt_data_end+0xfc01e400>
   1ea20:	123ff804 	addi	r8,r2,-32
   1ea24:	01000804 	movi	r4,32
   1ea28:	1a10d83a 	srl	r8,r3,r8
   1ea2c:	11002526 	beq	r2,r4,1eac4 <__subdf3+0x8ec>
   1ea30:	01001004 	movi	r4,64
   1ea34:	2085c83a 	sub	r2,r4,r2
   1ea38:	1884983a 	sll	r2,r3,r2
   1ea3c:	1444b03a 	or	r2,r2,r17
   1ea40:	1004c03a 	cmpne	r2,r2,zero
   1ea44:	40a2b03a 	or	r17,r8,r2
   1ea48:	0005883a 	mov	r2,zero
   1ea4c:	003f1606 	br	1e6a8 <__alt_data_end+0xfc01e6a8>
   1ea50:	02000434 	movhi	r8,16
   1ea54:	0009883a 	mov	r4,zero
   1ea58:	423fffc4 	addi	r8,r8,-1
   1ea5c:	00bfffc4 	movi	r2,-1
   1ea60:	0401ffc4 	movi	r16,2047
   1ea64:	003e6606 	br	1e400 <__alt_data_end+0xfc01e400>
   1ea68:	1c62b03a 	or	r17,r3,r17
   1ea6c:	8822c03a 	cmpne	r17,r17,zero
   1ea70:	0005883a 	mov	r2,zero
   1ea74:	003f9906 	br	1e8dc <__alt_data_end+0xfc01e8dc>
   1ea78:	2807883a 	mov	r3,r5
   1ea7c:	3023883a 	mov	r17,r6
   1ea80:	0401ffc4 	movi	r16,2047
   1ea84:	003df506 	br	1e25c <__alt_data_end+0xfc01e25c>
   1ea88:	2807883a 	mov	r3,r5
   1ea8c:	3023883a 	mov	r17,r6
   1ea90:	003df206 	br	1e25c <__alt_data_end+0xfc01e25c>
   1ea94:	123ff804 	addi	r8,r2,-32
   1ea98:	01000804 	movi	r4,32
   1ea9c:	1a10d83a 	srl	r8,r3,r8
   1eaa0:	11000a26 	beq	r2,r4,1eacc <__subdf3+0x8f4>
   1eaa4:	01001004 	movi	r4,64
   1eaa8:	2085c83a 	sub	r2,r4,r2
   1eaac:	1884983a 	sll	r2,r3,r2
   1eab0:	1444b03a 	or	r2,r2,r17
   1eab4:	1004c03a 	cmpne	r2,r2,zero
   1eab8:	40a2b03a 	or	r17,r8,r2
   1eabc:	0005883a 	mov	r2,zero
   1eac0:	003f8606 	br	1e8dc <__alt_data_end+0xfc01e8dc>
   1eac4:	0005883a 	mov	r2,zero
   1eac8:	003fdc06 	br	1ea3c <__alt_data_end+0xfc01ea3c>
   1eacc:	0005883a 	mov	r2,zero
   1ead0:	003ff706 	br	1eab0 <__alt_data_end+0xfc01eab0>

0001ead4 <__fixdfsi>:
   1ead4:	280cd53a 	srli	r6,r5,20
   1ead8:	00c00434 	movhi	r3,16
   1eadc:	18ffffc4 	addi	r3,r3,-1
   1eae0:	3181ffcc 	andi	r6,r6,2047
   1eae4:	01c0ff84 	movi	r7,1022
   1eae8:	28c6703a 	and	r3,r5,r3
   1eaec:	280ad7fa 	srli	r5,r5,31
   1eaf0:	3980120e 	bge	r7,r6,1eb3c <__fixdfsi+0x68>
   1eaf4:	00810744 	movi	r2,1053
   1eaf8:	11800c16 	blt	r2,r6,1eb2c <__fixdfsi+0x58>
   1eafc:	00810cc4 	movi	r2,1075
   1eb00:	1185c83a 	sub	r2,r2,r6
   1eb04:	01c007c4 	movi	r7,31
   1eb08:	18c00434 	orhi	r3,r3,16
   1eb0c:	38800d16 	blt	r7,r2,1eb44 <__fixdfsi+0x70>
   1eb10:	31befb44 	addi	r6,r6,-1043
   1eb14:	2084d83a 	srl	r2,r4,r2
   1eb18:	1986983a 	sll	r3,r3,r6
   1eb1c:	1884b03a 	or	r2,r3,r2
   1eb20:	28000726 	beq	r5,zero,1eb40 <__fixdfsi+0x6c>
   1eb24:	0085c83a 	sub	r2,zero,r2
   1eb28:	f800283a 	ret
   1eb2c:	00a00034 	movhi	r2,32768
   1eb30:	10bfffc4 	addi	r2,r2,-1
   1eb34:	2885883a 	add	r2,r5,r2
   1eb38:	f800283a 	ret
   1eb3c:	0005883a 	mov	r2,zero
   1eb40:	f800283a 	ret
   1eb44:	008104c4 	movi	r2,1043
   1eb48:	1185c83a 	sub	r2,r2,r6
   1eb4c:	1884d83a 	srl	r2,r3,r2
   1eb50:	003ff306 	br	1eb20 <__alt_data_end+0xfc01eb20>

0001eb54 <__floatsidf>:
   1eb54:	defffd04 	addi	sp,sp,-12
   1eb58:	dfc00215 	stw	ra,8(sp)
   1eb5c:	dc400115 	stw	r17,4(sp)
   1eb60:	dc000015 	stw	r16,0(sp)
   1eb64:	20002b26 	beq	r4,zero,1ec14 <__floatsidf+0xc0>
   1eb68:	2023883a 	mov	r17,r4
   1eb6c:	2020d7fa 	srli	r16,r4,31
   1eb70:	20002d16 	blt	r4,zero,1ec28 <__floatsidf+0xd4>
   1eb74:	8809883a 	mov	r4,r17
   1eb78:	000e1640 	call	e164 <__clzsi2>
   1eb7c:	01410784 	movi	r5,1054
   1eb80:	288bc83a 	sub	r5,r5,r2
   1eb84:	01010cc4 	movi	r4,1075
   1eb88:	2149c83a 	sub	r4,r4,r5
   1eb8c:	00c007c4 	movi	r3,31
   1eb90:	1900160e 	bge	r3,r4,1ebec <__floatsidf+0x98>
   1eb94:	00c104c4 	movi	r3,1043
   1eb98:	1947c83a 	sub	r3,r3,r5
   1eb9c:	88c6983a 	sll	r3,r17,r3
   1eba0:	00800434 	movhi	r2,16
   1eba4:	10bfffc4 	addi	r2,r2,-1
   1eba8:	1886703a 	and	r3,r3,r2
   1ebac:	2941ffcc 	andi	r5,r5,2047
   1ebb0:	800d883a 	mov	r6,r16
   1ebb4:	0005883a 	mov	r2,zero
   1ebb8:	280a953a 	slli	r5,r5,20
   1ebbc:	31803fcc 	andi	r6,r6,255
   1ebc0:	01000434 	movhi	r4,16
   1ebc4:	300c97fa 	slli	r6,r6,31
   1ebc8:	213fffc4 	addi	r4,r4,-1
   1ebcc:	1906703a 	and	r3,r3,r4
   1ebd0:	1946b03a 	or	r3,r3,r5
   1ebd4:	1986b03a 	or	r3,r3,r6
   1ebd8:	dfc00217 	ldw	ra,8(sp)
   1ebdc:	dc400117 	ldw	r17,4(sp)
   1ebe0:	dc000017 	ldw	r16,0(sp)
   1ebe4:	dec00304 	addi	sp,sp,12
   1ebe8:	f800283a 	ret
   1ebec:	00c002c4 	movi	r3,11
   1ebf0:	1887c83a 	sub	r3,r3,r2
   1ebf4:	88c6d83a 	srl	r3,r17,r3
   1ebf8:	8904983a 	sll	r2,r17,r4
   1ebfc:	01000434 	movhi	r4,16
   1ec00:	213fffc4 	addi	r4,r4,-1
   1ec04:	2941ffcc 	andi	r5,r5,2047
   1ec08:	1906703a 	and	r3,r3,r4
   1ec0c:	800d883a 	mov	r6,r16
   1ec10:	003fe906 	br	1ebb8 <__alt_data_end+0xfc01ebb8>
   1ec14:	000d883a 	mov	r6,zero
   1ec18:	000b883a 	mov	r5,zero
   1ec1c:	0007883a 	mov	r3,zero
   1ec20:	0005883a 	mov	r2,zero
   1ec24:	003fe406 	br	1ebb8 <__alt_data_end+0xfc01ebb8>
   1ec28:	0123c83a 	sub	r17,zero,r4
   1ec2c:	003fd106 	br	1eb74 <__alt_data_end+0xfc01eb74>

0001ec30 <__floatunsidf>:
   1ec30:	defffe04 	addi	sp,sp,-8
   1ec34:	dc000015 	stw	r16,0(sp)
   1ec38:	dfc00115 	stw	ra,4(sp)
   1ec3c:	2021883a 	mov	r16,r4
   1ec40:	20002226 	beq	r4,zero,1eccc <__floatunsidf+0x9c>
   1ec44:	000e1640 	call	e164 <__clzsi2>
   1ec48:	01010784 	movi	r4,1054
   1ec4c:	2089c83a 	sub	r4,r4,r2
   1ec50:	01810cc4 	movi	r6,1075
   1ec54:	310dc83a 	sub	r6,r6,r4
   1ec58:	00c007c4 	movi	r3,31
   1ec5c:	1980120e 	bge	r3,r6,1eca8 <__floatunsidf+0x78>
   1ec60:	00c104c4 	movi	r3,1043
   1ec64:	1907c83a 	sub	r3,r3,r4
   1ec68:	80ca983a 	sll	r5,r16,r3
   1ec6c:	00800434 	movhi	r2,16
   1ec70:	10bfffc4 	addi	r2,r2,-1
   1ec74:	2101ffcc 	andi	r4,r4,2047
   1ec78:	0021883a 	mov	r16,zero
   1ec7c:	288a703a 	and	r5,r5,r2
   1ec80:	2008953a 	slli	r4,r4,20
   1ec84:	00c00434 	movhi	r3,16
   1ec88:	18ffffc4 	addi	r3,r3,-1
   1ec8c:	28c6703a 	and	r3,r5,r3
   1ec90:	8005883a 	mov	r2,r16
   1ec94:	1906b03a 	or	r3,r3,r4
   1ec98:	dfc00117 	ldw	ra,4(sp)
   1ec9c:	dc000017 	ldw	r16,0(sp)
   1eca0:	dec00204 	addi	sp,sp,8
   1eca4:	f800283a 	ret
   1eca8:	00c002c4 	movi	r3,11
   1ecac:	188bc83a 	sub	r5,r3,r2
   1ecb0:	814ad83a 	srl	r5,r16,r5
   1ecb4:	00c00434 	movhi	r3,16
   1ecb8:	18ffffc4 	addi	r3,r3,-1
   1ecbc:	81a0983a 	sll	r16,r16,r6
   1ecc0:	2101ffcc 	andi	r4,r4,2047
   1ecc4:	28ca703a 	and	r5,r5,r3
   1ecc8:	003fed06 	br	1ec80 <__alt_data_end+0xfc01ec80>
   1eccc:	0009883a 	mov	r4,zero
   1ecd0:	000b883a 	mov	r5,zero
   1ecd4:	003fea06 	br	1ec80 <__alt_data_end+0xfc01ec80>

0001ecd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ecd8:	defffe04 	addi	sp,sp,-8
   1ecdc:	dfc00115 	stw	ra,4(sp)
   1ece0:	df000015 	stw	fp,0(sp)
   1ece4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ece8:	d0a5bb17 	ldw	r2,-26900(gp)
   1ecec:	10000326 	beq	r2,zero,1ecfc <alt_get_errno+0x24>
   1ecf0:	d0a5bb17 	ldw	r2,-26900(gp)
   1ecf4:	103ee83a 	callr	r2
   1ecf8:	00000106 	br	1ed00 <alt_get_errno+0x28>
   1ecfc:	d0b24704 	addi	r2,gp,-14052
}
   1ed00:	e037883a 	mov	sp,fp
   1ed04:	dfc00117 	ldw	ra,4(sp)
   1ed08:	df000017 	ldw	fp,0(sp)
   1ed0c:	dec00204 	addi	sp,sp,8
   1ed10:	f800283a 	ret

0001ed14 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1ed14:	defffb04 	addi	sp,sp,-20
   1ed18:	dfc00415 	stw	ra,16(sp)
   1ed1c:	df000315 	stw	fp,12(sp)
   1ed20:	df000304 	addi	fp,sp,12
   1ed24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1ed28:	e0bfff17 	ldw	r2,-4(fp)
   1ed2c:	10000816 	blt	r2,zero,1ed50 <close+0x3c>
   1ed30:	01400304 	movi	r5,12
   1ed34:	e13fff17 	ldw	r4,-4(fp)
   1ed38:	000ccac0 	call	ccac <__mulsi3>
   1ed3c:	1007883a 	mov	r3,r2
   1ed40:	008000f4 	movhi	r2,3
   1ed44:	10acce04 	addi	r2,r2,-19656
   1ed48:	1885883a 	add	r2,r3,r2
   1ed4c:	00000106 	br	1ed54 <close+0x40>
   1ed50:	0005883a 	mov	r2,zero
   1ed54:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1ed58:	e0bffd17 	ldw	r2,-12(fp)
   1ed5c:	10001926 	beq	r2,zero,1edc4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1ed60:	e0bffd17 	ldw	r2,-12(fp)
   1ed64:	10800017 	ldw	r2,0(r2)
   1ed68:	10800417 	ldw	r2,16(r2)
   1ed6c:	10000626 	beq	r2,zero,1ed88 <close+0x74>
   1ed70:	e0bffd17 	ldw	r2,-12(fp)
   1ed74:	10800017 	ldw	r2,0(r2)
   1ed78:	10800417 	ldw	r2,16(r2)
   1ed7c:	e13ffd17 	ldw	r4,-12(fp)
   1ed80:	103ee83a 	callr	r2
   1ed84:	00000106 	br	1ed8c <close+0x78>
   1ed88:	0005883a 	mov	r2,zero
   1ed8c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1ed90:	e13fff17 	ldw	r4,-4(fp)
   1ed94:	001f5bc0 	call	1f5bc <alt_release_fd>
    if (rval < 0)
   1ed98:	e0bffe17 	ldw	r2,-8(fp)
   1ed9c:	1000070e 	bge	r2,zero,1edbc <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1eda0:	001ecd80 	call	1ecd8 <alt_get_errno>
   1eda4:	1007883a 	mov	r3,r2
   1eda8:	e0bffe17 	ldw	r2,-8(fp)
   1edac:	0085c83a 	sub	r2,zero,r2
   1edb0:	18800015 	stw	r2,0(r3)
      return -1;
   1edb4:	00bfffc4 	movi	r2,-1
   1edb8:	00000706 	br	1edd8 <close+0xc4>
    }
    return 0;
   1edbc:	0005883a 	mov	r2,zero
   1edc0:	00000506 	br	1edd8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1edc4:	001ecd80 	call	1ecd8 <alt_get_errno>
   1edc8:	1007883a 	mov	r3,r2
   1edcc:	00801444 	movi	r2,81
   1edd0:	18800015 	stw	r2,0(r3)
    return -1;
   1edd4:	00bfffc4 	movi	r2,-1
  }
}
   1edd8:	e037883a 	mov	sp,fp
   1eddc:	dfc00117 	ldw	ra,4(sp)
   1ede0:	df000017 	ldw	fp,0(sp)
   1ede4:	dec00204 	addi	sp,sp,8
   1ede8:	f800283a 	ret

0001edec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1edec:	defffc04 	addi	sp,sp,-16
   1edf0:	df000315 	stw	fp,12(sp)
   1edf4:	df000304 	addi	fp,sp,12
   1edf8:	e13ffd15 	stw	r4,-12(fp)
   1edfc:	e17ffe15 	stw	r5,-8(fp)
   1ee00:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1ee04:	e0bfff17 	ldw	r2,-4(fp)
}
   1ee08:	e037883a 	mov	sp,fp
   1ee0c:	df000017 	ldw	fp,0(sp)
   1ee10:	dec00104 	addi	sp,sp,4
   1ee14:	f800283a 	ret

0001ee18 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1ee18:	defffd04 	addi	sp,sp,-12
   1ee1c:	df000215 	stw	fp,8(sp)
   1ee20:	df000204 	addi	fp,sp,8
   1ee24:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1ee28:	0001883a 	nop
   1ee2c:	e0bfff17 	ldw	r2,-4(fp)
   1ee30:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1ee34:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1ee38:	10000226 	beq	r2,zero,1ee44 <_exit+0x2c>
    ALT_SIM_FAIL();
   1ee3c:	002af070 	cmpltui	zero,zero,43969
   1ee40:	00000106 	br	1ee48 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1ee44:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1ee48:	003fff06 	br	1ee48 <__alt_data_end+0xfc01ee48>

0001ee4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ee4c:	defffe04 	addi	sp,sp,-8
   1ee50:	dfc00115 	stw	ra,4(sp)
   1ee54:	df000015 	stw	fp,0(sp)
   1ee58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ee5c:	d0a5bb17 	ldw	r2,-26900(gp)
   1ee60:	10000326 	beq	r2,zero,1ee70 <alt_get_errno+0x24>
   1ee64:	d0a5bb17 	ldw	r2,-26900(gp)
   1ee68:	103ee83a 	callr	r2
   1ee6c:	00000106 	br	1ee74 <alt_get_errno+0x28>
   1ee70:	d0b24704 	addi	r2,gp,-14052
}
   1ee74:	e037883a 	mov	sp,fp
   1ee78:	dfc00117 	ldw	ra,4(sp)
   1ee7c:	df000017 	ldw	fp,0(sp)
   1ee80:	dec00204 	addi	sp,sp,8
   1ee84:	f800283a 	ret

0001ee88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1ee88:	defffb04 	addi	sp,sp,-20
   1ee8c:	dfc00415 	stw	ra,16(sp)
   1ee90:	df000315 	stw	fp,12(sp)
   1ee94:	df000304 	addi	fp,sp,12
   1ee98:	e13ffe15 	stw	r4,-8(fp)
   1ee9c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1eea0:	e0bffe17 	ldw	r2,-8(fp)
   1eea4:	10000816 	blt	r2,zero,1eec8 <fstat+0x40>
   1eea8:	01400304 	movi	r5,12
   1eeac:	e13ffe17 	ldw	r4,-8(fp)
   1eeb0:	000ccac0 	call	ccac <__mulsi3>
   1eeb4:	1007883a 	mov	r3,r2
   1eeb8:	008000f4 	movhi	r2,3
   1eebc:	10acce04 	addi	r2,r2,-19656
   1eec0:	1885883a 	add	r2,r3,r2
   1eec4:	00000106 	br	1eecc <fstat+0x44>
   1eec8:	0005883a 	mov	r2,zero
   1eecc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1eed0:	e0bffd17 	ldw	r2,-12(fp)
   1eed4:	10001026 	beq	r2,zero,1ef18 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1eed8:	e0bffd17 	ldw	r2,-12(fp)
   1eedc:	10800017 	ldw	r2,0(r2)
   1eee0:	10800817 	ldw	r2,32(r2)
   1eee4:	10000726 	beq	r2,zero,1ef04 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1eee8:	e0bffd17 	ldw	r2,-12(fp)
   1eeec:	10800017 	ldw	r2,0(r2)
   1eef0:	10800817 	ldw	r2,32(r2)
   1eef4:	e17fff17 	ldw	r5,-4(fp)
   1eef8:	e13ffd17 	ldw	r4,-12(fp)
   1eefc:	103ee83a 	callr	r2
   1ef00:	00000a06 	br	1ef2c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1ef04:	e0bfff17 	ldw	r2,-4(fp)
   1ef08:	00c80004 	movi	r3,8192
   1ef0c:	10c00115 	stw	r3,4(r2)
      return 0;
   1ef10:	0005883a 	mov	r2,zero
   1ef14:	00000506 	br	1ef2c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1ef18:	001ee4c0 	call	1ee4c <alt_get_errno>
   1ef1c:	1007883a 	mov	r3,r2
   1ef20:	00801444 	movi	r2,81
   1ef24:	18800015 	stw	r2,0(r3)
    return -1;
   1ef28:	00bfffc4 	movi	r2,-1
  }
}
   1ef2c:	e037883a 	mov	sp,fp
   1ef30:	dfc00117 	ldw	ra,4(sp)
   1ef34:	df000017 	ldw	fp,0(sp)
   1ef38:	dec00204 	addi	sp,sp,8
   1ef3c:	f800283a 	ret

0001ef40 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1ef40:	deffff04 	addi	sp,sp,-4
   1ef44:	df000015 	stw	fp,0(sp)
   1ef48:	d839883a 	mov	fp,sp
  return 0;
   1ef4c:	0005883a 	mov	r2,zero
}
   1ef50:	e037883a 	mov	sp,fp
   1ef54:	df000017 	ldw	fp,0(sp)
   1ef58:	dec00104 	addi	sp,sp,4
   1ef5c:	f800283a 	ret

0001ef60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ef60:	defffe04 	addi	sp,sp,-8
   1ef64:	dfc00115 	stw	ra,4(sp)
   1ef68:	df000015 	stw	fp,0(sp)
   1ef6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ef70:	d0a5bb17 	ldw	r2,-26900(gp)
   1ef74:	10000326 	beq	r2,zero,1ef84 <alt_get_errno+0x24>
   1ef78:	d0a5bb17 	ldw	r2,-26900(gp)
   1ef7c:	103ee83a 	callr	r2
   1ef80:	00000106 	br	1ef88 <alt_get_errno+0x28>
   1ef84:	d0b24704 	addi	r2,gp,-14052
}
   1ef88:	e037883a 	mov	sp,fp
   1ef8c:	dfc00117 	ldw	ra,4(sp)
   1ef90:	df000017 	ldw	fp,0(sp)
   1ef94:	dec00204 	addi	sp,sp,8
   1ef98:	f800283a 	ret

0001ef9c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1ef9c:	deffed04 	addi	sp,sp,-76
   1efa0:	dfc01215 	stw	ra,72(sp)
   1efa4:	df001115 	stw	fp,68(sp)
   1efa8:	df001104 	addi	fp,sp,68
   1efac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1efb0:	e0bfff17 	ldw	r2,-4(fp)
   1efb4:	10000816 	blt	r2,zero,1efd8 <isatty+0x3c>
   1efb8:	01400304 	movi	r5,12
   1efbc:	e13fff17 	ldw	r4,-4(fp)
   1efc0:	000ccac0 	call	ccac <__mulsi3>
   1efc4:	1007883a 	mov	r3,r2
   1efc8:	008000f4 	movhi	r2,3
   1efcc:	10acce04 	addi	r2,r2,-19656
   1efd0:	1885883a 	add	r2,r3,r2
   1efd4:	00000106 	br	1efdc <isatty+0x40>
   1efd8:	0005883a 	mov	r2,zero
   1efdc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1efe0:	e0bfef17 	ldw	r2,-68(fp)
   1efe4:	10000e26 	beq	r2,zero,1f020 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1efe8:	e0bfef17 	ldw	r2,-68(fp)
   1efec:	10800017 	ldw	r2,0(r2)
   1eff0:	10800817 	ldw	r2,32(r2)
   1eff4:	1000021e 	bne	r2,zero,1f000 <isatty+0x64>
    {
      return 1;
   1eff8:	00800044 	movi	r2,1
   1effc:	00000d06 	br	1f034 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1f000:	e0bff004 	addi	r2,fp,-64
   1f004:	100b883a 	mov	r5,r2
   1f008:	e13fff17 	ldw	r4,-4(fp)
   1f00c:	001ee880 	call	1ee88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1f010:	e0bff117 	ldw	r2,-60(fp)
   1f014:	10880020 	cmpeqi	r2,r2,8192
   1f018:	10803fcc 	andi	r2,r2,255
   1f01c:	00000506 	br	1f034 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f020:	001ef600 	call	1ef60 <alt_get_errno>
   1f024:	1007883a 	mov	r3,r2
   1f028:	00801444 	movi	r2,81
   1f02c:	18800015 	stw	r2,0(r3)
    return 0;
   1f030:	0005883a 	mov	r2,zero
  }
}
   1f034:	e037883a 	mov	sp,fp
   1f038:	dfc00117 	ldw	ra,4(sp)
   1f03c:	df000017 	ldw	fp,0(sp)
   1f040:	dec00204 	addi	sp,sp,8
   1f044:	f800283a 	ret

0001f048 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f048:	defffe04 	addi	sp,sp,-8
   1f04c:	dfc00115 	stw	ra,4(sp)
   1f050:	df000015 	stw	fp,0(sp)
   1f054:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f058:	d0a5bb17 	ldw	r2,-26900(gp)
   1f05c:	10000326 	beq	r2,zero,1f06c <alt_get_errno+0x24>
   1f060:	d0a5bb17 	ldw	r2,-26900(gp)
   1f064:	103ee83a 	callr	r2
   1f068:	00000106 	br	1f070 <alt_get_errno+0x28>
   1f06c:	d0b24704 	addi	r2,gp,-14052
}
   1f070:	e037883a 	mov	sp,fp
   1f074:	dfc00117 	ldw	ra,4(sp)
   1f078:	df000017 	ldw	fp,0(sp)
   1f07c:	dec00204 	addi	sp,sp,8
   1f080:	f800283a 	ret

0001f084 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1f084:	defffb04 	addi	sp,sp,-20
   1f088:	dfc00415 	stw	ra,16(sp)
   1f08c:	df000315 	stw	fp,12(sp)
   1f090:	df000304 	addi	fp,sp,12
   1f094:	e13ffe15 	stw	r4,-8(fp)
   1f098:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   1f09c:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   1f0a0:	e0bffe17 	ldw	r2,-8(fp)
   1f0a4:	00802f16 	blt	zero,r2,1f164 <kill+0xe0>
  {
    switch (sig)
   1f0a8:	e0bfff17 	ldw	r2,-4(fp)
   1f0ac:	10800828 	cmpgeui	r2,r2,32
   1f0b0:	1000291e 	bne	r2,zero,1f158 <kill+0xd4>
   1f0b4:	e0bfff17 	ldw	r2,-4(fp)
   1f0b8:	100690ba 	slli	r3,r2,2
   1f0bc:	008000b4 	movhi	r2,2
   1f0c0:	10bc3404 	addi	r2,r2,-3888
   1f0c4:	1885883a 	add	r2,r3,r2
   1f0c8:	10800017 	ldw	r2,0(r2)
   1f0cc:	1000683a 	jmp	r2
   1f0d0:	0001f178 	rdprs	zero,zero,1989
   1f0d4:	0001f158 	cmpnei	zero,zero,1989
   1f0d8:	0001f158 	cmpnei	zero,zero,1989
   1f0dc:	0001f150 	cmplti	zero,zero,1989
   1f0e0:	0001f150 	cmplti	zero,zero,1989
   1f0e4:	0001f150 	cmplti	zero,zero,1989
   1f0e8:	0001f150 	cmplti	zero,zero,1989
   1f0ec:	0001f158 	cmpnei	zero,zero,1989
   1f0f0:	0001f150 	cmplti	zero,zero,1989
   1f0f4:	0001f150 	cmplti	zero,zero,1989
   1f0f8:	0001f150 	cmplti	zero,zero,1989
   1f0fc:	0001f150 	cmplti	zero,zero,1989
   1f100:	0001f150 	cmplti	zero,zero,1989
   1f104:	0001f150 	cmplti	zero,zero,1989
   1f108:	0001f150 	cmplti	zero,zero,1989
   1f10c:	0001f150 	cmplti	zero,zero,1989
   1f110:	0001f178 	rdprs	zero,zero,1989
   1f114:	0001f158 	cmpnei	zero,zero,1989
   1f118:	0001f158 	cmpnei	zero,zero,1989
   1f11c:	0001f158 	cmpnei	zero,zero,1989
   1f120:	0001f178 	rdprs	zero,zero,1989
   1f124:	0001f158 	cmpnei	zero,zero,1989
   1f128:	0001f158 	cmpnei	zero,zero,1989
   1f12c:	0001f150 	cmplti	zero,zero,1989
   1f130:	0001f150 	cmplti	zero,zero,1989
   1f134:	0001f150 	cmplti	zero,zero,1989
   1f138:	0001f150 	cmplti	zero,zero,1989
   1f13c:	0001f150 	cmplti	zero,zero,1989
   1f140:	0001f158 	cmpnei	zero,zero,1989
   1f144:	0001f158 	cmpnei	zero,zero,1989
   1f148:	0001f150 	cmplti	zero,zero,1989
   1f14c:	0001f150 	cmplti	zero,zero,1989
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1f150:	0009883a 	mov	r4,zero
   1f154:	001ee180 	call	1ee18 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1f158:	00800584 	movi	r2,22
   1f15c:	e0bffd15 	stw	r2,-12(fp)
   1f160:	00000606 	br	1f17c <kill+0xf8>
    }
  }

  else if (pid > 0)
   1f164:	e0bffe17 	ldw	r2,-8(fp)
   1f168:	0080040e 	bge	zero,r2,1f17c <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1f16c:	008000c4 	movi	r2,3
   1f170:	e0bffd15 	stw	r2,-12(fp)
   1f174:	00000106 	br	1f17c <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   1f178:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   1f17c:	e0bffd17 	ldw	r2,-12(fp)
   1f180:	10000626 	beq	r2,zero,1f19c <kill+0x118>
  {
    ALT_ERRNO = status;
   1f184:	001f0480 	call	1f048 <alt_get_errno>
   1f188:	1007883a 	mov	r3,r2
   1f18c:	e0bffd17 	ldw	r2,-12(fp)
   1f190:	18800015 	stw	r2,0(r3)
    return -1;
   1f194:	00bfffc4 	movi	r2,-1
   1f198:	00000106 	br	1f1a0 <kill+0x11c>
  }

  return 0;
   1f19c:	0005883a 	mov	r2,zero
}
   1f1a0:	e037883a 	mov	sp,fp
   1f1a4:	dfc00117 	ldw	ra,4(sp)
   1f1a8:	df000017 	ldw	fp,0(sp)
   1f1ac:	dec00204 	addi	sp,sp,8
   1f1b0:	f800283a 	ret

0001f1b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1f1b4:	defffc04 	addi	sp,sp,-16
   1f1b8:	df000315 	stw	fp,12(sp)
   1f1bc:	df000304 	addi	fp,sp,12
   1f1c0:	e13ffd15 	stw	r4,-12(fp)
   1f1c4:	e17ffe15 	stw	r5,-8(fp)
   1f1c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1f1cc:	e0fffe17 	ldw	r3,-8(fp)
   1f1d0:	e0bffd17 	ldw	r2,-12(fp)
   1f1d4:	18800c26 	beq	r3,r2,1f208 <alt_load_section+0x54>
  {
    while( to != end )
   1f1d8:	00000806 	br	1f1fc <alt_load_section+0x48>
    {
      *to++ = *from++;
   1f1dc:	e0bffe17 	ldw	r2,-8(fp)
   1f1e0:	10c00104 	addi	r3,r2,4
   1f1e4:	e0fffe15 	stw	r3,-8(fp)
   1f1e8:	e0fffd17 	ldw	r3,-12(fp)
   1f1ec:	19000104 	addi	r4,r3,4
   1f1f0:	e13ffd15 	stw	r4,-12(fp)
   1f1f4:	18c00017 	ldw	r3,0(r3)
   1f1f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1f1fc:	e0fffe17 	ldw	r3,-8(fp)
   1f200:	e0bfff17 	ldw	r2,-4(fp)
   1f204:	18bff51e 	bne	r3,r2,1f1dc <__alt_data_end+0xfc01f1dc>
    {
      *to++ = *from++;
    }
  }
}
   1f208:	0001883a 	nop
   1f20c:	e037883a 	mov	sp,fp
   1f210:	df000017 	ldw	fp,0(sp)
   1f214:	dec00104 	addi	sp,sp,4
   1f218:	f800283a 	ret

0001f21c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1f21c:	defffe04 	addi	sp,sp,-8
   1f220:	dfc00115 	stw	ra,4(sp)
   1f224:	df000015 	stw	fp,0(sp)
   1f228:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1f22c:	018000f4 	movhi	r6,3
   1f230:	31b71604 	addi	r6,r6,-9128
   1f234:	014000f4 	movhi	r5,3
   1f238:	296a9b04 	addi	r5,r5,-21908
   1f23c:	010000f4 	movhi	r4,3
   1f240:	21371604 	addi	r4,r4,-9128
   1f244:	001f1b40 	call	1f1b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1f248:	01800034 	movhi	r6,0
   1f24c:	31808c04 	addi	r6,r6,560
   1f250:	01400034 	movhi	r5,0
   1f254:	29400804 	addi	r5,r5,32
   1f258:	01000034 	movhi	r4,0
   1f25c:	21000804 	addi	r4,r4,32
   1f260:	001f1b40 	call	1f1b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1f264:	018000f4 	movhi	r6,3
   1f268:	31aa9b04 	addi	r6,r6,-21908
   1f26c:	014000b4 	movhi	r5,2
   1f270:	294e4404 	addi	r5,r5,14608
   1f274:	010000b4 	movhi	r4,2
   1f278:	210e4404 	addi	r4,r4,14608
   1f27c:	001f1b40 	call	1f1b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1f280:	00225e40 	call	225e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1f284:	00228340 	call	22834 <alt_icache_flush_all>
}
   1f288:	0001883a 	nop
   1f28c:	e037883a 	mov	sp,fp
   1f290:	dfc00117 	ldw	ra,4(sp)
   1f294:	df000017 	ldw	fp,0(sp)
   1f298:	dec00204 	addi	sp,sp,8
   1f29c:	f800283a 	ret

0001f2a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f2a0:	defffe04 	addi	sp,sp,-8
   1f2a4:	dfc00115 	stw	ra,4(sp)
   1f2a8:	df000015 	stw	fp,0(sp)
   1f2ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f2b0:	d0a5bb17 	ldw	r2,-26900(gp)
   1f2b4:	10000326 	beq	r2,zero,1f2c4 <alt_get_errno+0x24>
   1f2b8:	d0a5bb17 	ldw	r2,-26900(gp)
   1f2bc:	103ee83a 	callr	r2
   1f2c0:	00000106 	br	1f2c8 <alt_get_errno+0x28>
   1f2c4:	d0b24704 	addi	r2,gp,-14052
}
   1f2c8:	e037883a 	mov	sp,fp
   1f2cc:	dfc00117 	ldw	ra,4(sp)
   1f2d0:	df000017 	ldw	fp,0(sp)
   1f2d4:	dec00204 	addi	sp,sp,8
   1f2d8:	f800283a 	ret

0001f2dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1f2dc:	defff904 	addi	sp,sp,-28
   1f2e0:	dfc00615 	stw	ra,24(sp)
   1f2e4:	df000515 	stw	fp,20(sp)
   1f2e8:	df000504 	addi	fp,sp,20
   1f2ec:	e13ffd15 	stw	r4,-12(fp)
   1f2f0:	e17ffe15 	stw	r5,-8(fp)
   1f2f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1f2f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f2fc:	e0bffd17 	ldw	r2,-12(fp)
   1f300:	10000816 	blt	r2,zero,1f324 <lseek+0x48>
   1f304:	01400304 	movi	r5,12
   1f308:	e13ffd17 	ldw	r4,-12(fp)
   1f30c:	000ccac0 	call	ccac <__mulsi3>
   1f310:	1007883a 	mov	r3,r2
   1f314:	008000f4 	movhi	r2,3
   1f318:	10acce04 	addi	r2,r2,-19656
   1f31c:	1885883a 	add	r2,r3,r2
   1f320:	00000106 	br	1f328 <lseek+0x4c>
   1f324:	0005883a 	mov	r2,zero
   1f328:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1f32c:	e0bffc17 	ldw	r2,-16(fp)
   1f330:	10001026 	beq	r2,zero,1f374 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1f334:	e0bffc17 	ldw	r2,-16(fp)
   1f338:	10800017 	ldw	r2,0(r2)
   1f33c:	10800717 	ldw	r2,28(r2)
   1f340:	10000926 	beq	r2,zero,1f368 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1f344:	e0bffc17 	ldw	r2,-16(fp)
   1f348:	10800017 	ldw	r2,0(r2)
   1f34c:	10800717 	ldw	r2,28(r2)
   1f350:	e1bfff17 	ldw	r6,-4(fp)
   1f354:	e17ffe17 	ldw	r5,-8(fp)
   1f358:	e13ffc17 	ldw	r4,-16(fp)
   1f35c:	103ee83a 	callr	r2
   1f360:	e0bffb15 	stw	r2,-20(fp)
   1f364:	00000506 	br	1f37c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1f368:	00bfde84 	movi	r2,-134
   1f36c:	e0bffb15 	stw	r2,-20(fp)
   1f370:	00000206 	br	1f37c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1f374:	00bfebc4 	movi	r2,-81
   1f378:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1f37c:	e0bffb17 	ldw	r2,-20(fp)
   1f380:	1000070e 	bge	r2,zero,1f3a0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1f384:	001f2a00 	call	1f2a0 <alt_get_errno>
   1f388:	1007883a 	mov	r3,r2
   1f38c:	e0bffb17 	ldw	r2,-20(fp)
   1f390:	0085c83a 	sub	r2,zero,r2
   1f394:	18800015 	stw	r2,0(r3)
    rc = -1;
   1f398:	00bfffc4 	movi	r2,-1
   1f39c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1f3a0:	e0bffb17 	ldw	r2,-20(fp)
}
   1f3a4:	e037883a 	mov	sp,fp
   1f3a8:	dfc00117 	ldw	ra,4(sp)
   1f3ac:	df000017 	ldw	fp,0(sp)
   1f3b0:	dec00204 	addi	sp,sp,8
   1f3b4:	f800283a 	ret

0001f3b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1f3b8:	defffd04 	addi	sp,sp,-12
   1f3bc:	dfc00215 	stw	ra,8(sp)
   1f3c0:	df000115 	stw	fp,4(sp)
   1f3c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1f3c8:	0009883a 	mov	r4,zero
   1f3cc:	001f9440 	call	1f944 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1f3d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1f3d4:	001f97c0 	call	1f97c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1f3d8:	018000f4 	movhi	r6,3
   1f3dc:	31aa8604 	addi	r6,r6,-21992
   1f3e0:	014000f4 	movhi	r5,3
   1f3e4:	296a8604 	addi	r5,r5,-21992
   1f3e8:	010000f4 	movhi	r4,3
   1f3ec:	212a8604 	addi	r4,r4,-21992
   1f3f0:	0022bd80 	call	22bd8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1f3f4:	00226e40 	call	226e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1f3f8:	010000b4 	movhi	r4,2
   1f3fc:	2109d104 	addi	r4,r4,10052
   1f400:	00235700 	call	23570 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1f404:	d0b24b17 	ldw	r2,-14036(gp)
   1f408:	d0f24c17 	ldw	r3,-14032(gp)
   1f40c:	d1324d17 	ldw	r4,-14028(gp)
   1f410:	200d883a 	mov	r6,r4
   1f414:	180b883a 	mov	r5,r3
   1f418:	1009883a 	mov	r4,r2
   1f41c:	0009ffc0 	call	9ffc <main>
   1f420:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1f424:	01000044 	movi	r4,1
   1f428:	001ed140 	call	1ed14 <close>
  exit (result);
   1f42c:	e13fff17 	ldw	r4,-4(fp)
   1f430:	00235840 	call	23584 <exit>

0001f434 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1f434:	defffe04 	addi	sp,sp,-8
   1f438:	df000115 	stw	fp,4(sp)
   1f43c:	df000104 	addi	fp,sp,4
   1f440:	e13fff15 	stw	r4,-4(fp)
}
   1f444:	0001883a 	nop
   1f448:	e037883a 	mov	sp,fp
   1f44c:	df000017 	ldw	fp,0(sp)
   1f450:	dec00104 	addi	sp,sp,4
   1f454:	f800283a 	ret

0001f458 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1f458:	defffe04 	addi	sp,sp,-8
   1f45c:	df000115 	stw	fp,4(sp)
   1f460:	df000104 	addi	fp,sp,4
   1f464:	e13fff15 	stw	r4,-4(fp)
}
   1f468:	0001883a 	nop
   1f46c:	e037883a 	mov	sp,fp
   1f470:	df000017 	ldw	fp,0(sp)
   1f474:	dec00104 	addi	sp,sp,4
   1f478:	f800283a 	ret

0001f47c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f47c:	defffe04 	addi	sp,sp,-8
   1f480:	dfc00115 	stw	ra,4(sp)
   1f484:	df000015 	stw	fp,0(sp)
   1f488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f48c:	d0a5bb17 	ldw	r2,-26900(gp)
   1f490:	10000326 	beq	r2,zero,1f4a0 <alt_get_errno+0x24>
   1f494:	d0a5bb17 	ldw	r2,-26900(gp)
   1f498:	103ee83a 	callr	r2
   1f49c:	00000106 	br	1f4a4 <alt_get_errno+0x28>
   1f4a0:	d0b24704 	addi	r2,gp,-14052
}
   1f4a4:	e037883a 	mov	sp,fp
   1f4a8:	dfc00117 	ldw	ra,4(sp)
   1f4ac:	df000017 	ldw	fp,0(sp)
   1f4b0:	dec00204 	addi	sp,sp,8
   1f4b4:	f800283a 	ret

0001f4b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1f4b8:	defff904 	addi	sp,sp,-28
   1f4bc:	dfc00615 	stw	ra,24(sp)
   1f4c0:	df000515 	stw	fp,20(sp)
   1f4c4:	df000504 	addi	fp,sp,20
   1f4c8:	e13ffd15 	stw	r4,-12(fp)
   1f4cc:	e17ffe15 	stw	r5,-8(fp)
   1f4d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f4d4:	e0bffd17 	ldw	r2,-12(fp)
   1f4d8:	10000816 	blt	r2,zero,1f4fc <read+0x44>
   1f4dc:	01400304 	movi	r5,12
   1f4e0:	e13ffd17 	ldw	r4,-12(fp)
   1f4e4:	000ccac0 	call	ccac <__mulsi3>
   1f4e8:	1007883a 	mov	r3,r2
   1f4ec:	008000f4 	movhi	r2,3
   1f4f0:	10acce04 	addi	r2,r2,-19656
   1f4f4:	1885883a 	add	r2,r3,r2
   1f4f8:	00000106 	br	1f500 <read+0x48>
   1f4fc:	0005883a 	mov	r2,zero
   1f500:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1f504:	e0bffb17 	ldw	r2,-20(fp)
   1f508:	10002226 	beq	r2,zero,1f594 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f50c:	e0bffb17 	ldw	r2,-20(fp)
   1f510:	10800217 	ldw	r2,8(r2)
   1f514:	108000cc 	andi	r2,r2,3
   1f518:	10800060 	cmpeqi	r2,r2,1
   1f51c:	1000181e 	bne	r2,zero,1f580 <read+0xc8>
        (fd->dev->read))
   1f520:	e0bffb17 	ldw	r2,-20(fp)
   1f524:	10800017 	ldw	r2,0(r2)
   1f528:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f52c:	10001426 	beq	r2,zero,1f580 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1f530:	e0bffb17 	ldw	r2,-20(fp)
   1f534:	10800017 	ldw	r2,0(r2)
   1f538:	10800517 	ldw	r2,20(r2)
   1f53c:	e0ffff17 	ldw	r3,-4(fp)
   1f540:	180d883a 	mov	r6,r3
   1f544:	e17ffe17 	ldw	r5,-8(fp)
   1f548:	e13ffb17 	ldw	r4,-20(fp)
   1f54c:	103ee83a 	callr	r2
   1f550:	e0bffc15 	stw	r2,-16(fp)
   1f554:	e0bffc17 	ldw	r2,-16(fp)
   1f558:	1000070e 	bge	r2,zero,1f578 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1f55c:	001f47c0 	call	1f47c <alt_get_errno>
   1f560:	1007883a 	mov	r3,r2
   1f564:	e0bffc17 	ldw	r2,-16(fp)
   1f568:	0085c83a 	sub	r2,zero,r2
   1f56c:	18800015 	stw	r2,0(r3)
          return -1;
   1f570:	00bfffc4 	movi	r2,-1
   1f574:	00000c06 	br	1f5a8 <read+0xf0>
        }
        return rval;
   1f578:	e0bffc17 	ldw	r2,-16(fp)
   1f57c:	00000a06 	br	1f5a8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1f580:	001f47c0 	call	1f47c <alt_get_errno>
   1f584:	1007883a 	mov	r3,r2
   1f588:	00800344 	movi	r2,13
   1f58c:	18800015 	stw	r2,0(r3)
   1f590:	00000406 	br	1f5a4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1f594:	001f47c0 	call	1f47c <alt_get_errno>
   1f598:	1007883a 	mov	r3,r2
   1f59c:	00801444 	movi	r2,81
   1f5a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1f5a4:	00bfffc4 	movi	r2,-1
}
   1f5a8:	e037883a 	mov	sp,fp
   1f5ac:	dfc00117 	ldw	ra,4(sp)
   1f5b0:	df000017 	ldw	fp,0(sp)
   1f5b4:	dec00204 	addi	sp,sp,8
   1f5b8:	f800283a 	ret

0001f5bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1f5bc:	defffc04 	addi	sp,sp,-16
   1f5c0:	dfc00315 	stw	ra,12(sp)
   1f5c4:	df000215 	stw	fp,8(sp)
   1f5c8:	dc000115 	stw	r16,4(sp)
   1f5cc:	df000204 	addi	fp,sp,8
   1f5d0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1f5d4:	e0bffe17 	ldw	r2,-8(fp)
   1f5d8:	108000d0 	cmplti	r2,r2,3
   1f5dc:	1000111e 	bne	r2,zero,1f624 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1f5e0:	040000f4 	movhi	r16,3
   1f5e4:	842cce04 	addi	r16,r16,-19656
   1f5e8:	e0bffe17 	ldw	r2,-8(fp)
   1f5ec:	01400304 	movi	r5,12
   1f5f0:	1009883a 	mov	r4,r2
   1f5f4:	000ccac0 	call	ccac <__mulsi3>
   1f5f8:	8085883a 	add	r2,r16,r2
   1f5fc:	10800204 	addi	r2,r2,8
   1f600:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1f604:	040000f4 	movhi	r16,3
   1f608:	842cce04 	addi	r16,r16,-19656
   1f60c:	e0bffe17 	ldw	r2,-8(fp)
   1f610:	01400304 	movi	r5,12
   1f614:	1009883a 	mov	r4,r2
   1f618:	000ccac0 	call	ccac <__mulsi3>
   1f61c:	8085883a 	add	r2,r16,r2
   1f620:	10000015 	stw	zero,0(r2)
  }
}
   1f624:	0001883a 	nop
   1f628:	e6ffff04 	addi	sp,fp,-4
   1f62c:	dfc00217 	ldw	ra,8(sp)
   1f630:	df000117 	ldw	fp,4(sp)
   1f634:	dc000017 	ldw	r16,0(sp)
   1f638:	dec00304 	addi	sp,sp,12
   1f63c:	f800283a 	ret

0001f640 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1f640:	defff904 	addi	sp,sp,-28
   1f644:	df000615 	stw	fp,24(sp)
   1f648:	df000604 	addi	fp,sp,24
   1f64c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f650:	0005303a 	rdctl	r2,status
   1f654:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f658:	e0fffe17 	ldw	r3,-8(fp)
   1f65c:	00bfff84 	movi	r2,-2
   1f660:	1884703a 	and	r2,r3,r2
   1f664:	1001703a 	wrctl	status,r2
  
  return context;
   1f668:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1f66c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1f670:	d0a5bc17 	ldw	r2,-26896(gp)
   1f674:	10c000c4 	addi	r3,r2,3
   1f678:	00bfff04 	movi	r2,-4
   1f67c:	1884703a 	and	r2,r3,r2
   1f680:	d0a5bc15 	stw	r2,-26896(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1f684:	d0e5bc17 	ldw	r3,-26896(gp)
   1f688:	e0bfff17 	ldw	r2,-4(fp)
   1f68c:	1887883a 	add	r3,r3,r2
   1f690:	00810034 	movhi	r2,1024
   1f694:	10800004 	addi	r2,r2,0
   1f698:	10c0062e 	bgeu	r2,r3,1f6b4 <sbrk+0x74>
   1f69c:	e0bffb17 	ldw	r2,-20(fp)
   1f6a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f6a4:	e0bffa17 	ldw	r2,-24(fp)
   1f6a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1f6ac:	00bfffc4 	movi	r2,-1
   1f6b0:	00000b06 	br	1f6e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1f6b4:	d0a5bc17 	ldw	r2,-26896(gp)
   1f6b8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1f6bc:	d0e5bc17 	ldw	r3,-26896(gp)
   1f6c0:	e0bfff17 	ldw	r2,-4(fp)
   1f6c4:	1885883a 	add	r2,r3,r2
   1f6c8:	d0a5bc15 	stw	r2,-26896(gp)
   1f6cc:	e0bffb17 	ldw	r2,-20(fp)
   1f6d0:	e0bffc15 	stw	r2,-16(fp)
   1f6d4:	e0bffc17 	ldw	r2,-16(fp)
   1f6d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1f6dc:	e0bffd17 	ldw	r2,-12(fp)
} 
   1f6e0:	e037883a 	mov	sp,fp
   1f6e4:	df000017 	ldw	fp,0(sp)
   1f6e8:	dec00104 	addi	sp,sp,4
   1f6ec:	f800283a 	ret

0001f6f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f6f0:	defffe04 	addi	sp,sp,-8
   1f6f4:	dfc00115 	stw	ra,4(sp)
   1f6f8:	df000015 	stw	fp,0(sp)
   1f6fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f700:	d0a5bb17 	ldw	r2,-26900(gp)
   1f704:	10000326 	beq	r2,zero,1f714 <alt_get_errno+0x24>
   1f708:	d0a5bb17 	ldw	r2,-26900(gp)
   1f70c:	103ee83a 	callr	r2
   1f710:	00000106 	br	1f718 <alt_get_errno+0x28>
   1f714:	d0b24704 	addi	r2,gp,-14052
}
   1f718:	e037883a 	mov	sp,fp
   1f71c:	dfc00117 	ldw	ra,4(sp)
   1f720:	df000017 	ldw	fp,0(sp)
   1f724:	dec00204 	addi	sp,sp,8
   1f728:	f800283a 	ret

0001f72c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1f72c:	defffc04 	addi	sp,sp,-16
   1f730:	dfc00315 	stw	ra,12(sp)
   1f734:	df000215 	stw	fp,8(sp)
   1f738:	df000204 	addi	fp,sp,8
   1f73c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1f740:	d0b25017 	ldw	r2,-14016(gp)
  clock_t ticks = alt_nticks(); 
   1f744:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1f748:	d0b24f17 	ldw	r2,-14020(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1f74c:	1000061e 	bne	r2,zero,1f768 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   1f750:	001f6f00 	call	1f6f0 <alt_get_errno>
   1f754:	1007883a 	mov	r3,r2
   1f758:	00801604 	movi	r2,88
   1f75c:	18800015 	stw	r2,0(r3)
    return 0;
   1f760:	0005883a 	mov	r2,zero
   1f764:	00000a06 	br	1f790 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   1f768:	e0bfff17 	ldw	r2,-4(fp)
   1f76c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   1f770:	e0bfff17 	ldw	r2,-4(fp)
   1f774:	e0fffe17 	ldw	r3,-8(fp)
   1f778:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   1f77c:	e0bfff17 	ldw	r2,-4(fp)
   1f780:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1f784:	e0bfff17 	ldw	r2,-4(fp)
   1f788:	10000315 	stw	zero,12(r2)

  return ticks;
   1f78c:	e0bffe17 	ldw	r2,-8(fp)
}
   1f790:	e037883a 	mov	sp,fp
   1f794:	dfc00117 	ldw	ra,4(sp)
   1f798:	df000017 	ldw	fp,0(sp)
   1f79c:	dec00204 	addi	sp,sp,8
   1f7a0:	f800283a 	ret

0001f7a4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1f7a4:	defffd04 	addi	sp,sp,-12
   1f7a8:	dfc00215 	stw	ra,8(sp)
   1f7ac:	df000115 	stw	fp,4(sp)
   1f7b0:	df000104 	addi	fp,sp,4
   1f7b4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1f7b8:	e13fff17 	ldw	r4,-4(fp)
   1f7bc:	002248c0 	call	2248c <alt_busy_sleep>
}
   1f7c0:	e037883a 	mov	sp,fp
   1f7c4:	dfc00117 	ldw	ra,4(sp)
   1f7c8:	df000017 	ldw	fp,0(sp)
   1f7cc:	dec00204 	addi	sp,sp,8
   1f7d0:	f800283a 	ret

0001f7d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f7d4:	defffe04 	addi	sp,sp,-8
   1f7d8:	dfc00115 	stw	ra,4(sp)
   1f7dc:	df000015 	stw	fp,0(sp)
   1f7e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f7e4:	d0a5bb17 	ldw	r2,-26900(gp)
   1f7e8:	10000326 	beq	r2,zero,1f7f8 <alt_get_errno+0x24>
   1f7ec:	d0a5bb17 	ldw	r2,-26900(gp)
   1f7f0:	103ee83a 	callr	r2
   1f7f4:	00000106 	br	1f7fc <alt_get_errno+0x28>
   1f7f8:	d0b24704 	addi	r2,gp,-14052
}
   1f7fc:	e037883a 	mov	sp,fp
   1f800:	dfc00117 	ldw	ra,4(sp)
   1f804:	df000017 	ldw	fp,0(sp)
   1f808:	dec00204 	addi	sp,sp,8
   1f80c:	f800283a 	ret

0001f810 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1f810:	defff904 	addi	sp,sp,-28
   1f814:	dfc00615 	stw	ra,24(sp)
   1f818:	df000515 	stw	fp,20(sp)
   1f81c:	df000504 	addi	fp,sp,20
   1f820:	e13ffd15 	stw	r4,-12(fp)
   1f824:	e17ffe15 	stw	r5,-8(fp)
   1f828:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f82c:	e0bffd17 	ldw	r2,-12(fp)
   1f830:	10000816 	blt	r2,zero,1f854 <write+0x44>
   1f834:	01400304 	movi	r5,12
   1f838:	e13ffd17 	ldw	r4,-12(fp)
   1f83c:	000ccac0 	call	ccac <__mulsi3>
   1f840:	1007883a 	mov	r3,r2
   1f844:	008000f4 	movhi	r2,3
   1f848:	10acce04 	addi	r2,r2,-19656
   1f84c:	1885883a 	add	r2,r3,r2
   1f850:	00000106 	br	1f858 <write+0x48>
   1f854:	0005883a 	mov	r2,zero
   1f858:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1f85c:	e0bffb17 	ldw	r2,-20(fp)
   1f860:	10002126 	beq	r2,zero,1f8e8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1f864:	e0bffb17 	ldw	r2,-20(fp)
   1f868:	10800217 	ldw	r2,8(r2)
   1f86c:	108000cc 	andi	r2,r2,3
   1f870:	10001826 	beq	r2,zero,1f8d4 <write+0xc4>
   1f874:	e0bffb17 	ldw	r2,-20(fp)
   1f878:	10800017 	ldw	r2,0(r2)
   1f87c:	10800617 	ldw	r2,24(r2)
   1f880:	10001426 	beq	r2,zero,1f8d4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1f884:	e0bffb17 	ldw	r2,-20(fp)
   1f888:	10800017 	ldw	r2,0(r2)
   1f88c:	10800617 	ldw	r2,24(r2)
   1f890:	e0ffff17 	ldw	r3,-4(fp)
   1f894:	180d883a 	mov	r6,r3
   1f898:	e17ffe17 	ldw	r5,-8(fp)
   1f89c:	e13ffb17 	ldw	r4,-20(fp)
   1f8a0:	103ee83a 	callr	r2
   1f8a4:	e0bffc15 	stw	r2,-16(fp)
   1f8a8:	e0bffc17 	ldw	r2,-16(fp)
   1f8ac:	1000070e 	bge	r2,zero,1f8cc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1f8b0:	001f7d40 	call	1f7d4 <alt_get_errno>
   1f8b4:	1007883a 	mov	r3,r2
   1f8b8:	e0bffc17 	ldw	r2,-16(fp)
   1f8bc:	0085c83a 	sub	r2,zero,r2
   1f8c0:	18800015 	stw	r2,0(r3)
        return -1;
   1f8c4:	00bfffc4 	movi	r2,-1
   1f8c8:	00000c06 	br	1f8fc <write+0xec>
      }
      return rval;
   1f8cc:	e0bffc17 	ldw	r2,-16(fp)
   1f8d0:	00000a06 	br	1f8fc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1f8d4:	001f7d40 	call	1f7d4 <alt_get_errno>
   1f8d8:	1007883a 	mov	r3,r2
   1f8dc:	00800344 	movi	r2,13
   1f8e0:	18800015 	stw	r2,0(r3)
   1f8e4:	00000406 	br	1f8f8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1f8e8:	001f7d40 	call	1f7d4 <alt_get_errno>
   1f8ec:	1007883a 	mov	r3,r2
   1f8f0:	00801444 	movi	r2,81
   1f8f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1f8f8:	00bfffc4 	movi	r2,-1
}
   1f8fc:	e037883a 	mov	sp,fp
   1f900:	dfc00117 	ldw	ra,4(sp)
   1f904:	df000017 	ldw	fp,0(sp)
   1f908:	dec00204 	addi	sp,sp,8
   1f90c:	f800283a 	ret

0001f910 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1f910:	defffd04 	addi	sp,sp,-12
   1f914:	dfc00215 	stw	ra,8(sp)
   1f918:	df000115 	stw	fp,4(sp)
   1f91c:	df000104 	addi	fp,sp,4
   1f920:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1f924:	d165b804 	addi	r5,gp,-26912
   1f928:	e13fff17 	ldw	r4,-4(fp)
   1f92c:	00226400 	call	22640 <alt_dev_llist_insert>
}
   1f930:	e037883a 	mov	sp,fp
   1f934:	dfc00117 	ldw	ra,4(sp)
   1f938:	df000017 	ldw	fp,0(sp)
   1f93c:	dec00204 	addi	sp,sp,8
   1f940:	f800283a 	ret

0001f944 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1f944:	defffd04 	addi	sp,sp,-12
   1f948:	dfc00215 	stw	ra,8(sp)
   1f94c:	df000115 	stw	fp,4(sp)
   1f950:	df000104 	addi	fp,sp,4
   1f954:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   1f958:	00232e40 	call	232e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1f95c:	00800044 	movi	r2,1
   1f960:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1f964:	0001883a 	nop
   1f968:	e037883a 	mov	sp,fp
   1f96c:	dfc00117 	ldw	ra,4(sp)
   1f970:	df000017 	ldw	fp,0(sp)
   1f974:	dec00204 	addi	sp,sp,8
   1f978:	f800283a 	ret

0001f97c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1f97c:	defffe04 	addi	sp,sp,-8
   1f980:	dfc00115 	stw	ra,4(sp)
   1f984:	df000015 	stw	fp,0(sp)
   1f988:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1f98c:	01c0fa04 	movi	r7,1000
   1f990:	01800084 	movi	r6,2
   1f994:	000b883a 	mov	r5,zero
   1f998:	01010034 	movhi	r4,1024
   1f99c:	21042004 	addi	r4,r4,4224
   1f9a0:	00222e40 	call	222e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   1f9a4:	010000f4 	movhi	r4,3
   1f9a8:	212d2e04 	addi	r4,r4,-19272
   1f9ac:	001fc400 	call	1fc40 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1f9b0:	01800044 	movi	r6,1
   1f9b4:	000b883a 	mov	r5,zero
   1f9b8:	010000f4 	movhi	r4,3
   1f9bc:	212d4604 	addi	r4,r4,-19176
   1f9c0:	002176c0 	call	2176c <altera_avalon_jtag_uart_init>
   1f9c4:	010000f4 	movhi	r4,3
   1f9c8:	212d3c04 	addi	r4,r4,-19216
   1f9cc:	001f9100 	call	1f910 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   1f9d0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1f9d4:	0001883a 	nop
}
   1f9d8:	0001883a 	nop
   1f9dc:	e037883a 	mov	sp,fp
   1f9e0:	dfc00117 	ldw	ra,4(sp)
   1f9e4:	df000017 	ldw	fp,0(sp)
   1f9e8:	dec00204 	addi	sp,sp,8
   1f9ec:	f800283a 	ret

0001f9f0 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   1f9f0:	defff904 	addi	sp,sp,-28
   1f9f4:	dfc00615 	stw	ra,24(sp)
   1f9f8:	df000515 	stw	fp,20(sp)
   1f9fc:	df000504 	addi	fp,sp,20
   1fa00:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   1fa04:	008000b4 	movhi	r2,2
   1fa08:	10a1a804 	addi	r2,r2,-31072
   1fa0c:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   1fa10:	e0bfff17 	ldw	r2,-4(fp)
   1fa14:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   1fa18:	e0bffc17 	ldw	r2,-16(fp)
   1fa1c:	10800717 	ldw	r2,28(r2)
   1fa20:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   1fa24:	e0bffd17 	ldw	r2,-12(fp)
   1fa28:	10800217 	ldw	r2,8(r2)
   1fa2c:	10800098 	cmpnei	r2,r2,2
   1fa30:	1000251e 	bne	r2,zero,1fac8 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   1fa34:	e0bffd17 	ldw	r2,-12(fp)
   1fa38:	10c00017 	ldw	r3,0(r2)
   1fa3c:	e0bffd17 	ldw	r2,-12(fp)
   1fa40:	10800117 	ldw	r2,4(r2)
   1fa44:	e13ffe04 	addi	r4,fp,-8
   1fa48:	200f883a 	mov	r7,r4
   1fa4c:	100d883a 	mov	r6,r2
   1fa50:	180b883a 	mov	r5,r3
   1fa54:	e13ffc17 	ldw	r4,-16(fp)
   1fa58:	00201a00 	call	201a0 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   1fa5c:	e0bffd17 	ldw	r2,-12(fp)
   1fa60:	10c00117 	ldw	r3,4(r2)
   1fa64:	e0bffe17 	ldw	r2,-8(fp)
   1fa68:	1887c83a 	sub	r3,r3,r2
   1fa6c:	e0bffd17 	ldw	r2,-12(fp)
   1fa70:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   1fa74:	e0bffd17 	ldw	r2,-12(fp)
   1fa78:	10c00017 	ldw	r3,0(r2)
   1fa7c:	e0bffe17 	ldw	r2,-8(fp)
   1fa80:	1887883a 	add	r3,r3,r2
   1fa84:	e0bffd17 	ldw	r2,-12(fp)
   1fa88:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   1fa8c:	e0bffd17 	ldw	r2,-12(fp)
   1fa90:	10800117 	ldw	r2,4(r2)
   1fa94:	10000c26 	beq	r2,zero,1fac8 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fa98:	01400704 	movi	r5,28
   1fa9c:	e13ffc17 	ldw	r4,-16(fp)
   1faa0:	00213580 	call	21358 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   1faa4:	01400084 	movi	r5,2
   1faa8:	e13ffc17 	ldw	r4,-16(fp)
   1faac:	00213fc0 	call	213fc <alt_avalon_i2c_int_enable>
   1fab0:	00000e06 	br	1faec <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   1fab4:	e0bffb17 	ldw	r2,-20(fp)
   1fab8:	10bfffc4 	addi	r2,r2,-1
   1fabc:	e0bffb15 	stw	r2,-20(fp)
   1fac0:	e0bffb17 	ldw	r2,-20(fp)
   1fac4:	10000426 	beq	r2,zero,1fad8 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   1fac8:	e13ffc17 	ldw	r4,-16(fp)
   1facc:	002015c0 	call	2015c <alt_avalon_i2c_is_busy>
   1fad0:	103ff81e 	bne	r2,zero,1fab4 <__alt_data_end+0xfc01fab4>
   1fad4:	00000106 	br	1fadc <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   1fad8:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   1fadc:	e13ffc17 	ldw	r4,-16(fp)
   1fae0:	001fe040 	call	1fe04 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   1fae4:	e0bffd17 	ldw	r2,-12(fp)
   1fae8:	10000215 	stw	zero,8(r2)
}
   1faec:	e037883a 	mov	sp,fp
   1faf0:	dfc00117 	ldw	ra,4(sp)
   1faf4:	df000017 	ldw	fp,0(sp)
   1faf8:	dec00204 	addi	sp,sp,8
   1fafc:	f800283a 	ret

0001fb00 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   1fb00:	defffc04 	addi	sp,sp,-16
   1fb04:	dfc00315 	stw	ra,12(sp)
   1fb08:	df000215 	stw	fp,8(sp)
   1fb0c:	df000204 	addi	fp,sp,8
   1fb10:	e13ffe15 	stw	r4,-8(fp)
   1fb14:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   1fb18:	e0bfff17 	ldw	r2,-4(fp)
   1fb1c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   1fb20:	e1ffff17 	ldw	r7,-4(fp)
   1fb24:	000d883a 	mov	r6,zero
   1fb28:	014000b4 	movhi	r5,2
   1fb2c:	297e7c04 	addi	r5,r5,-1552
   1fb30:	e13ffe17 	ldw	r4,-8(fp)
   1fb34:	001fbec0 	call	1fbec <alt_avalon_i2c_register_callback>
}
   1fb38:	0001883a 	nop
   1fb3c:	e037883a 	mov	sp,fp
   1fb40:	dfc00117 	ldw	ra,4(sp)
   1fb44:	df000017 	ldw	fp,0(sp)
   1fb48:	dec00204 	addi	sp,sp,8
   1fb4c:	f800283a 	ret

0001fb50 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   1fb50:	defff904 	addi	sp,sp,-28
   1fb54:	dfc00615 	stw	ra,24(sp)
   1fb58:	df000515 	stw	fp,20(sp)
   1fb5c:	df000504 	addi	fp,sp,20
   1fb60:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   1fb64:	e0bfff17 	ldw	r2,-4(fp)
   1fb68:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1fb6c:	014007c4 	movi	r5,31
   1fb70:	e13ffb17 	ldw	r4,-20(fp)
   1fb74:	00213940 	call	21394 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fb78:	01400704 	movi	r5,28
   1fb7c:	e13ffb17 	ldw	r4,-20(fp)
   1fb80:	00213580 	call	21358 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   1fb84:	e0bffb17 	ldw	r2,-20(fp)
   1fb88:	10800617 	ldw	r2,24(r2)
   1fb8c:	10001126 	beq	r2,zero,1fbd4 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fb90:	0005303a 	rdctl	r2,status
   1fb94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fb98:	e0fffd17 	ldw	r3,-12(fp)
   1fb9c:	00bfff84 	movi	r2,-2
   1fba0:	1884703a 	and	r2,r3,r2
   1fba4:	1001703a 	wrctl	status,r2
  
  return context;
   1fba8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   1fbac:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   1fbb0:	e0bffb17 	ldw	r2,-20(fp)
   1fbb4:	10800617 	ldw	r2,24(r2)
   1fbb8:	e13ffb17 	ldw	r4,-20(fp)
   1fbbc:	103ee83a 	callr	r2
   1fbc0:	e0bffc17 	ldw	r2,-16(fp)
   1fbc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fbc8:	e0bffe17 	ldw	r2,-8(fp)
   1fbcc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   1fbd0:	0001883a 	nop
   1fbd4:	0001883a 	nop
}
   1fbd8:	e037883a 	mov	sp,fp
   1fbdc:	dfc00117 	ldw	ra,4(sp)
   1fbe0:	df000017 	ldw	fp,0(sp)
   1fbe4:	dec00204 	addi	sp,sp,8
   1fbe8:	f800283a 	ret

0001fbec <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   1fbec:	defffb04 	addi	sp,sp,-20
   1fbf0:	df000415 	stw	fp,16(sp)
   1fbf4:	df000404 	addi	fp,sp,16
   1fbf8:	e13ffc15 	stw	r4,-16(fp)
   1fbfc:	e17ffd15 	stw	r5,-12(fp)
   1fc00:	e1bffe15 	stw	r6,-8(fp)
   1fc04:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   1fc08:	e0bffc17 	ldw	r2,-16(fp)
   1fc0c:	e0fffd17 	ldw	r3,-12(fp)
   1fc10:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   1fc14:	e0bffc17 	ldw	r2,-16(fp)
   1fc18:	e0ffff17 	ldw	r3,-4(fp)
   1fc1c:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   1fc20:	e0bffc17 	ldw	r2,-16(fp)
   1fc24:	e0fffe17 	ldw	r3,-8(fp)
   1fc28:	10c00815 	stw	r3,32(r2)

    return ;
   1fc2c:	0001883a 	nop
}
   1fc30:	e037883a 	mov	sp,fp
   1fc34:	df000017 	ldw	fp,0(sp)
   1fc38:	dec00104 	addi	sp,sp,4
   1fc3c:	f800283a 	ret

0001fc40 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   1fc40:	defff704 	addi	sp,sp,-36
   1fc44:	dfc00815 	stw	ra,32(sp)
   1fc48:	df000715 	stw	fp,28(sp)
   1fc4c:	df000704 	addi	fp,sp,28
   1fc50:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   1fc54:	e13fff17 	ldw	r4,-4(fp)
   1fc58:	001fe040 	call	1fe04 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1fc5c:	014007c4 	movi	r5,31
   1fc60:	e13fff17 	ldw	r4,-4(fp)
   1fc64:	00213940 	call	21394 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fc68:	01400704 	movi	r5,28
   1fc6c:	e13fff17 	ldw	r4,-4(fp)
   1fc70:	00213580 	call	21358 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   1fc74:	014000c4 	movi	r5,3
   1fc78:	e13fff17 	ldw	r4,-4(fp)
   1fc7c:	00215a00 	call	215a0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   1fc80:	014000c4 	movi	r5,3
   1fc84:	e13fff17 	ldw	r4,-4(fp)
   1fc88:	00214f00 	call	214f0 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   1fc8c:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   1fc90:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   1fc94:	e0bffb04 	addi	r2,fp,-20
   1fc98:	018000b4 	movhi	r6,2
   1fc9c:	31a1a804 	addi	r6,r6,-31072
   1fca0:	100b883a 	mov	r5,r2
   1fca4:	e13fff17 	ldw	r4,-4(fp)
   1fca8:	00200600 	call	20060 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   1fcac:	e0bffb04 	addi	r2,fp,-20
   1fcb0:	100b883a 	mov	r5,r2
   1fcb4:	e13fff17 	ldw	r4,-4(fp)
   1fcb8:	001ff000 	call	1ff00 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   1fcbc:	d165bd04 	addi	r5,gp,-26892
   1fcc0:	e13fff17 	ldw	r4,-4(fp)
   1fcc4:	00226400 	call	22640 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1fcc8:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   1fccc:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   1fcd0:	e0bffa17 	ldw	r2,-24(fp)
   1fcd4:	10000c1e 	bne	r2,zero,1fd08 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   1fcd8:	e0bfff17 	ldw	r2,-4(fp)
   1fcdc:	10c00417 	ldw	r3,16(r2)
   1fce0:	e0bfff17 	ldw	r2,-4(fp)
   1fce4:	10800517 	ldw	r2,20(r2)
   1fce8:	d8000015 	stw	zero,0(sp)
   1fcec:	e1ffff17 	ldw	r7,-4(fp)
   1fcf0:	018000b4 	movhi	r6,2
   1fcf4:	31bed404 	addi	r6,r6,-1200
   1fcf8:	100b883a 	mov	r5,r2
   1fcfc:	1809883a 	mov	r4,r3
   1fd00:	00228540 	call	22854 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   1fd04:	00000406 	br	1fd18 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   1fd08:	010000f4 	movhi	r4,3
   1fd0c:	212a9304 	addi	r4,r4,-21940
   1fd10:	0022ed80 	call	22ed8 <alt_printf>
    }

    return;
   1fd14:	0001883a 	nop

}
   1fd18:	e037883a 	mov	sp,fp
   1fd1c:	dfc00117 	ldw	ra,4(sp)
   1fd20:	df000017 	ldw	fp,0(sp)
   1fd24:	dec00204 	addi	sp,sp,8
   1fd28:	f800283a 	ret

0001fd2c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   1fd2c:	defffc04 	addi	sp,sp,-16
   1fd30:	dfc00315 	stw	ra,12(sp)
   1fd34:	df000215 	stw	fp,8(sp)
   1fd38:	df000204 	addi	fp,sp,8
   1fd3c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   1fd40:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   1fd44:	d165bd04 	addi	r5,gp,-26892
   1fd48:	e13fff17 	ldw	r4,-4(fp)
   1fd4c:	00227a40 	call	227a4 <alt_find_dev>
   1fd50:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   1fd54:	e0bffe17 	ldw	r2,-8(fp)
}
   1fd58:	e037883a 	mov	sp,fp
   1fd5c:	dfc00117 	ldw	ra,4(sp)
   1fd60:	df000017 	ldw	fp,0(sp)
   1fd64:	dec00204 	addi	sp,sp,8
   1fd68:	f800283a 	ret

0001fd6c <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1fd6c:	defffc04 	addi	sp,sp,-16
   1fd70:	df000315 	stw	fp,12(sp)
   1fd74:	df000304 	addi	fp,sp,12
   1fd78:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1fd7c:	e0bfff17 	ldw	r2,-4(fp)
   1fd80:	10800717 	ldw	r2,28(r2)
   1fd84:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   1fd88:	e0bfff17 	ldw	r2,-4(fp)
   1fd8c:	10800317 	ldw	r2,12(r2)
   1fd90:	10800204 	addi	r2,r2,8
   1fd94:	10800037 	ldwio	r2,0(r2)
   1fd98:	1080004c 	andi	r2,r2,1
   1fd9c:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   1fda0:	e0bffe17 	ldw	r2,-8(fp)
   1fda4:	10000226 	beq	r2,zero,1fdb0 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   1fda8:	00bffe44 	movi	r2,-7
   1fdac:	00001106 	br	1fdf4 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   1fdb0:	e0bfff17 	ldw	r2,-4(fp)
   1fdb4:	10c00617 	ldw	r3,24(r2)
   1fdb8:	008000b4 	movhi	r2,2
   1fdbc:	10be7c04 	addi	r2,r2,-1552
   1fdc0:	1880021e 	bne	r3,r2,1fdcc <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   1fdc4:	e0bffd17 	ldw	r2,-12(fp)
   1fdc8:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   1fdcc:	e0bfff17 	ldw	r2,-4(fp)
   1fdd0:	10800317 	ldw	r2,12(r2)
   1fdd4:	10800204 	addi	r2,r2,8
   1fdd8:	e0ffff17 	ldw	r3,-4(fp)
   1fddc:	18c00317 	ldw	r3,12(r3)
   1fde0:	18c00204 	addi	r3,r3,8
   1fde4:	18c00037 	ldwio	r3,0(r3)
   1fde8:	18c00054 	ori	r3,r3,1
   1fdec:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   1fdf0:	0005883a 	mov	r2,zero
}
   1fdf4:	e037883a 	mov	sp,fp
   1fdf8:	df000017 	ldw	fp,0(sp)
   1fdfc:	dec00104 	addi	sp,sp,4
   1fe00:	f800283a 	ret

0001fe04 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1fe04:	defffe04 	addi	sp,sp,-8
   1fe08:	df000115 	stw	fp,4(sp)
   1fe0c:	df000104 	addi	fp,sp,4
   1fe10:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   1fe14:	e0bfff17 	ldw	r2,-4(fp)
   1fe18:	10800317 	ldw	r2,12(r2)
   1fe1c:	10800204 	addi	r2,r2,8
   1fe20:	e0ffff17 	ldw	r3,-4(fp)
   1fe24:	18c00317 	ldw	r3,12(r3)
   1fe28:	18c00204 	addi	r3,r3,8
   1fe2c:	19000037 	ldwio	r4,0(r3)
   1fe30:	00ffff84 	movi	r3,-2
   1fe34:	20c6703a 	and	r3,r4,r3
   1fe38:	10c00035 	stwio	r3,0(r2)

}
   1fe3c:	0001883a 	nop
   1fe40:	e037883a 	mov	sp,fp
   1fe44:	df000017 	ldw	fp,0(sp)
   1fe48:	dec00104 	addi	sp,sp,4
   1fe4c:	f800283a 	ret

0001fe50 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1fe50:	defffd04 	addi	sp,sp,-12
   1fe54:	df000215 	stw	fp,8(sp)
   1fe58:	df000204 	addi	fp,sp,8
   1fe5c:	e13ffe15 	stw	r4,-8(fp)
   1fe60:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   1fe64:	e0bffe17 	ldw	r2,-8(fp)
   1fe68:	10c00d17 	ldw	r3,52(r2)
   1fe6c:	e0bfff17 	ldw	r2,-4(fp)
   1fe70:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   1fe74:	e0bffe17 	ldw	r2,-8(fp)
   1fe78:	10800317 	ldw	r2,12(r2)
   1fe7c:	10800204 	addi	r2,r2,8
   1fe80:	10800037 	ldwio	r2,0(r2)
   1fe84:	1080008c 	andi	r2,r2,2
   1fe88:	1005d07a 	srai	r2,r2,1
   1fe8c:	1007883a 	mov	r3,r2
   1fe90:	e0bfff17 	ldw	r2,-4(fp)
   1fe94:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   1fe98:	e0bffe17 	ldw	r2,-8(fp)
   1fe9c:	10800317 	ldw	r2,12(r2)
   1fea0:	10800904 	addi	r2,r2,36
   1fea4:	10800037 	ldwio	r2,0(r2)
   1fea8:	1007883a 	mov	r3,r2
   1feac:	e0bfff17 	ldw	r2,-4(fp)
   1feb0:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   1feb4:	e0bffe17 	ldw	r2,-8(fp)
   1feb8:	10800317 	ldw	r2,12(r2)
   1febc:	10800804 	addi	r2,r2,32
   1fec0:	10800037 	ldwio	r2,0(r2)
   1fec4:	1007883a 	mov	r3,r2
   1fec8:	e0bfff17 	ldw	r2,-4(fp)
   1fecc:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   1fed0:	e0bffe17 	ldw	r2,-8(fp)
   1fed4:	10800317 	ldw	r2,12(r2)
   1fed8:	10800a04 	addi	r2,r2,40
   1fedc:	10800037 	ldwio	r2,0(r2)
   1fee0:	1007883a 	mov	r3,r2
   1fee4:	e0bfff17 	ldw	r2,-4(fp)
   1fee8:	10c0030d 	sth	r3,12(r2)
}
   1feec:	0001883a 	nop
   1fef0:	e037883a 	mov	sp,fp
   1fef4:	df000017 	ldw	fp,0(sp)
   1fef8:	dec00104 	addi	sp,sp,4
   1fefc:	f800283a 	ret

0001ff00 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1ff00:	defffd04 	addi	sp,sp,-12
   1ff04:	df000215 	stw	fp,8(sp)
   1ff08:	df000204 	addi	fp,sp,8
   1ff0c:	e13ffe15 	stw	r4,-8(fp)
   1ff10:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   1ff14:	e0bfff17 	ldw	r2,-4(fp)
   1ff18:	10c00017 	ldw	r3,0(r2)
   1ff1c:	e0bffe17 	ldw	r2,-8(fp)
   1ff20:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   1ff24:	e0bffe17 	ldw	r2,-8(fp)
   1ff28:	10800317 	ldw	r2,12(r2)
   1ff2c:	10c00204 	addi	r3,r2,8
   1ff30:	e0bffe17 	ldw	r2,-8(fp)
   1ff34:	10800317 	ldw	r2,12(r2)
   1ff38:	10800204 	addi	r2,r2,8
   1ff3c:	10800037 	ldwio	r2,0(r2)
   1ff40:	1009883a 	mov	r4,r2
   1ff44:	00bfff44 	movi	r2,-3
   1ff48:	2088703a 	and	r4,r4,r2
   1ff4c:	e0bfff17 	ldw	r2,-4(fp)
   1ff50:	10800117 	ldw	r2,4(r2)
   1ff54:	1085883a 	add	r2,r2,r2
   1ff58:	1080008c 	andi	r2,r2,2
   1ff5c:	2084b03a 	or	r2,r4,r2
   1ff60:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   1ff64:	e0bffe17 	ldw	r2,-8(fp)
   1ff68:	10800317 	ldw	r2,12(r2)
   1ff6c:	10800904 	addi	r2,r2,36
   1ff70:	e0ffff17 	ldw	r3,-4(fp)
   1ff74:	18c0020b 	ldhu	r3,8(r3)
   1ff78:	18ffffcc 	andi	r3,r3,65535
   1ff7c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   1ff80:	e0bffe17 	ldw	r2,-8(fp)
   1ff84:	10800317 	ldw	r2,12(r2)
   1ff88:	10800804 	addi	r2,r2,32
   1ff8c:	e0ffff17 	ldw	r3,-4(fp)
   1ff90:	18c0028b 	ldhu	r3,10(r3)
   1ff94:	18ffffcc 	andi	r3,r3,65535
   1ff98:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   1ff9c:	e0bffe17 	ldw	r2,-8(fp)
   1ffa0:	10800317 	ldw	r2,12(r2)
   1ffa4:	10800a04 	addi	r2,r2,40
   1ffa8:	e0ffff17 	ldw	r3,-4(fp)
   1ffac:	18c0030b 	ldhu	r3,12(r3)
   1ffb0:	18ffffcc 	andi	r3,r3,65535
   1ffb4:	10c00035 	stwio	r3,0(r2)
}
   1ffb8:	0001883a 	nop
   1ffbc:	e037883a 	mov	sp,fp
   1ffc0:	df000017 	ldw	fp,0(sp)
   1ffc4:	dec00104 	addi	sp,sp,4
   1ffc8:	f800283a 	ret

0001ffcc <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   1ffcc:	defffb04 	addi	sp,sp,-20
   1ffd0:	dfc00415 	stw	ra,16(sp)
   1ffd4:	df000315 	stw	fp,12(sp)
   1ffd8:	df000304 	addi	fp,sp,12
   1ffdc:	e13ffd15 	stw	r4,-12(fp)
   1ffe0:	e17ffe15 	stw	r5,-8(fp)
   1ffe4:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   1ffe8:	e0bffe17 	ldw	r2,-8(fp)
   1ffec:	1080028b 	ldhu	r2,10(r2)
   1fff0:	10bfffcc 	andi	r2,r2,65535
   1fff4:	10000426 	beq	r2,zero,20008 <alt_avalon_i2c_master_config_speed_get+0x3c>
   1fff8:	e0bffe17 	ldw	r2,-8(fp)
   1fffc:	1080020b 	ldhu	r2,8(r2)
   20000:	10bfffcc 	andi	r2,r2,65535
   20004:	1000021e 	bne	r2,zero,20010 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   20008:	00bfff44 	movi	r2,-3
   2000c:	00000f06 	br	2004c <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   20010:	e0bffd17 	ldw	r2,-12(fp)
   20014:	11000c17 	ldw	r4,48(r2)
   20018:	e0bffe17 	ldw	r2,-8(fp)
   2001c:	1080028b 	ldhu	r2,10(r2)
   20020:	10ffffcc 	andi	r3,r2,65535
   20024:	e0bffe17 	ldw	r2,-8(fp)
   20028:	1080020b 	ldhu	r2,8(r2)
   2002c:	10bfffcc 	andi	r2,r2,65535
   20030:	1885883a 	add	r2,r3,r2
   20034:	100b883a 	mov	r5,r2
   20038:	000cbf00 	call	cbf0 <__udivsi3>
   2003c:	1007883a 	mov	r3,r2
   20040:	e0bfff17 	ldw	r2,-4(fp)
   20044:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   20048:	0005883a 	mov	r2,zero
}
   2004c:	e037883a 	mov	sp,fp
   20050:	dfc00117 	ldw	ra,4(sp)
   20054:	df000017 	ldw	fp,0(sp)
   20058:	dec00204 	addi	sp,sp,8
   2005c:	f800283a 	ret

00020060 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   20060:	defff904 	addi	sp,sp,-28
   20064:	dfc00615 	stw	ra,24(sp)
   20068:	df000515 	stw	fp,20(sp)
   2006c:	df000504 	addi	fp,sp,20
   20070:	e13ffd15 	stw	r4,-12(fp)
   20074:	e17ffe15 	stw	r5,-8(fp)
   20078:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   2007c:	e0ffff17 	ldw	r3,-4(fp)
   20080:	008001b4 	movhi	r2,6
   20084:	1086a004 	addi	r2,r2,6784
   20088:	10c00436 	bltu	r2,r3,2009c <alt_avalon_i2c_master_config_speed_set+0x3c>
   2008c:	e0bfff17 	ldw	r2,-4(fp)
   20090:	10000226 	beq	r2,zero,2009c <alt_avalon_i2c_master_config_speed_set+0x3c>
   20094:	e0bfff17 	ldw	r2,-4(fp)
   20098:	1000021e 	bne	r2,zero,200a4 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   2009c:	00bfff04 	movi	r2,-4
   200a0:	00002906 	br	20148 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   200a4:	e0bffd17 	ldw	r2,-12(fp)
   200a8:	10c00c17 	ldw	r3,48(r2)
   200ac:	e0bfff17 	ldw	r2,-4(fp)
   200b0:	1085883a 	add	r2,r2,r2
   200b4:	100b883a 	mov	r5,r2
   200b8:	1809883a 	mov	r4,r3
   200bc:	000cbf00 	call	cbf0 <__udivsi3>
   200c0:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   200c4:	e0bffb17 	ldw	r2,-20(fp)
   200c8:	10800f04 	addi	r2,r2,60
   200cc:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   200d0:	e0bffb17 	ldw	r2,-20(fp)
   200d4:	10bff104 	addi	r2,r2,-60
   200d8:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   200dc:	e0ffff17 	ldw	r3,-4(fp)
   200e0:	008000b4 	movhi	r2,2
   200e4:	10a1a804 	addi	r2,r2,-31072
   200e8:	10c0042e 	bgeu	r2,r3,200fc <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   200ec:	e0bffe17 	ldw	r2,-8(fp)
   200f0:	00c00044 	movi	r3,1
   200f4:	10c00115 	stw	r3,4(r2)
   200f8:	00000206 	br	20104 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   200fc:	e0bffe17 	ldw	r2,-8(fp)
   20100:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   20104:	e0bffb17 	ldw	r2,-20(fp)
   20108:	1007883a 	mov	r3,r2
   2010c:	e0bffe17 	ldw	r2,-8(fp)
   20110:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   20114:	e0bffc17 	ldw	r2,-16(fp)
   20118:	1007883a 	mov	r3,r2
   2011c:	e0bffe17 	ldw	r2,-8(fp)
   20120:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   20124:	e0bffb17 	ldw	r2,-20(fp)
   20128:	1007883a 	mov	r3,r2
   2012c:	e0bffb17 	ldw	r2,-20(fp)
   20130:	1004d07a 	srli	r2,r2,1
   20134:	1885c83a 	sub	r2,r3,r2
   20138:	1007883a 	mov	r3,r2
   2013c:	e0bffe17 	ldw	r2,-8(fp)
   20140:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   20144:	0005883a 	mov	r2,zero

}
   20148:	e037883a 	mov	sp,fp
   2014c:	dfc00117 	ldw	ra,4(sp)
   20150:	df000017 	ldw	fp,0(sp)
   20154:	dec00204 	addi	sp,sp,8
   20158:	f800283a 	ret

0002015c <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2015c:	defffe04 	addi	sp,sp,-8
   20160:	df000115 	stw	fp,4(sp)
   20164:	df000104 	addi	fp,sp,4
   20168:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   2016c:	e0bfff17 	ldw	r2,-4(fp)
   20170:	10800317 	ldw	r2,12(r2)
   20174:	10800504 	addi	r2,r2,20
   20178:	10800037 	ldwio	r2,0(r2)
   2017c:	1080004c 	andi	r2,r2,1
   20180:	10000226 	beq	r2,zero,2018c <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   20184:	00800044 	movi	r2,1
   20188:	00000106 	br	20190 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   2018c:	0005883a 	mov	r2,zero
}
   20190:	e037883a 	mov	sp,fp
   20194:	df000017 	ldw	fp,0(sp)
   20198:	dec00104 	addi	sp,sp,4
   2019c:	f800283a 	ret

000201a0 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   201a0:	defffb04 	addi	sp,sp,-20
   201a4:	df000415 	stw	fp,16(sp)
   201a8:	df000404 	addi	fp,sp,16
   201ac:	e13ffc15 	stw	r4,-16(fp)
   201b0:	e17ffd15 	stw	r5,-12(fp)
   201b4:	e1bffe15 	stw	r6,-8(fp)
   201b8:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   201bc:	e0bfff17 	ldw	r2,-4(fp)
   201c0:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   201c4:	00001406 	br	20218 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   201c8:	e0bfff17 	ldw	r2,-4(fp)
   201cc:	10800017 	ldw	r2,0(r2)
   201d0:	e0fffd17 	ldw	r3,-12(fp)
   201d4:	1885883a 	add	r2,r3,r2
   201d8:	e0fffc17 	ldw	r3,-16(fp)
   201dc:	18c00317 	ldw	r3,12(r3)
   201e0:	18c00104 	addi	r3,r3,4
   201e4:	18c00037 	ldwio	r3,0(r3)
   201e8:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   201ec:	e0bfff17 	ldw	r2,-4(fp)
   201f0:	10800017 	ldw	r2,0(r2)
   201f4:	10c00044 	addi	r3,r2,1
   201f8:	e0bfff17 	ldw	r2,-4(fp)
   201fc:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   20200:	e0bfff17 	ldw	r2,-4(fp)
   20204:	10c00017 	ldw	r3,0(r2)
   20208:	e0bffe17 	ldw	r2,-8(fp)
   2020c:	1880021e 	bne	r3,r2,20218 <alt_avalon_i2c_rx_read_available+0x78>
   20210:	e0bffe17 	ldw	r2,-8(fp)
   20214:	1000061e 	bne	r2,zero,20230 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   20218:	e0bffc17 	ldw	r2,-16(fp)
   2021c:	10800317 	ldw	r2,12(r2)
   20220:	10800704 	addi	r2,r2,28
   20224:	10800037 	ldwio	r2,0(r2)
   20228:	103fe71e 	bne	r2,zero,201c8 <__alt_data_end+0xfc0201c8>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   2022c:	00000106 	br	20234 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   20230:	0001883a 	nop
    }
}
   20234:	0001883a 	nop
   20238:	e037883a 	mov	sp,fp
   2023c:	df000017 	ldw	fp,0(sp)
   20240:	dec00104 	addi	sp,sp,4
   20244:	f800283a 	ret

00020248 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   20248:	defffa04 	addi	sp,sp,-24
   2024c:	dfc00515 	stw	ra,20(sp)
   20250:	df000415 	stw	fp,16(sp)
   20254:	df000404 	addi	fp,sp,16
   20258:	e13ffe15 	stw	r4,-8(fp)
   2025c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   20260:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   20264:	008000b4 	movhi	r2,2
   20268:	10a1a804 	addi	r2,r2,-31072
   2026c:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   20270:	00000d06 	br	202a8 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   20274:	e0bffd17 	ldw	r2,-12(fp)
   20278:	108002a8 	cmpgeui	r2,r2,10
   2027c:	1000021e 	bne	r2,zero,20288 <alt_avalon_i2c_rx_read+0x40>
   20280:	0109c404 	movi	r4,10000
   20284:	002248c0 	call	2248c <alt_busy_sleep>
      if (--timeout == 0)
   20288:	e0bffd17 	ldw	r2,-12(fp)
   2028c:	10bfffc4 	addi	r2,r2,-1
   20290:	e0bffd15 	stw	r2,-12(fp)
   20294:	e0bffd17 	ldw	r2,-12(fp)
   20298:	1000031e 	bne	r2,zero,202a8 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   2029c:	00bfff84 	movi	r2,-2
   202a0:	e0bffc15 	stw	r2,-16(fp)
        break;
   202a4:	00000506 	br	202bc <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   202a8:	e0bffe17 	ldw	r2,-8(fp)
   202ac:	10800317 	ldw	r2,12(r2)
   202b0:	10800704 	addi	r2,r2,28
   202b4:	10800037 	ldwio	r2,0(r2)
   202b8:	103fee26 	beq	r2,zero,20274 <__alt_data_end+0xfc020274>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   202bc:	e0bffe17 	ldw	r2,-8(fp)
   202c0:	10800317 	ldw	r2,12(r2)
   202c4:	10800104 	addi	r2,r2,4
   202c8:	10800037 	ldwio	r2,0(r2)
   202cc:	1007883a 	mov	r3,r2
   202d0:	e0bfff17 	ldw	r2,-4(fp)
   202d4:	10c00005 	stb	r3,0(r2)
        
    return status;
   202d8:	e0bffc17 	ldw	r2,-16(fp)
}
   202dc:	e037883a 	mov	sp,fp
   202e0:	dfc00117 	ldw	ra,4(sp)
   202e4:	df000017 	ldw	fp,0(sp)
   202e8:	dec00204 	addi	sp,sp,8
   202ec:	f800283a 	ret

000202f0 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   202f0:	defff804 	addi	sp,sp,-32
   202f4:	dfc00715 	stw	ra,28(sp)
   202f8:	df000615 	stw	fp,24(sp)
   202fc:	df000604 	addi	fp,sp,24
   20300:	e13ffc15 	stw	r4,-16(fp)
   20304:	2809883a 	mov	r4,r5
   20308:	3007883a 	mov	r3,r6
   2030c:	3805883a 	mov	r2,r7
   20310:	e13ffd05 	stb	r4,-12(fp)
   20314:	e0fffe05 	stb	r3,-8(fp)
   20318:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   2031c:	0089c404 	movi	r2,10000
   20320:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20324:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   20328:	00000c06 	br	2035c <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   2032c:	e0bffa17 	ldw	r2,-24(fp)
   20330:	108002a8 	cmpgeui	r2,r2,10
   20334:	1000021e 	bne	r2,zero,20340 <alt_avalon_i2c_cmd_write+0x50>
   20338:	0109c404 	movi	r4,10000
   2033c:	002248c0 	call	2248c <alt_busy_sleep>
      if (--timeout == 0)
   20340:	e0bffa17 	ldw	r2,-24(fp)
   20344:	10bfffc4 	addi	r2,r2,-1
   20348:	e0bffa15 	stw	r2,-24(fp)
   2034c:	e0bffa17 	ldw	r2,-24(fp)
   20350:	1000021e 	bne	r2,zero,2035c <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   20354:	00bfff84 	movi	r2,-2
   20358:	00001906 	br	203c0 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   2035c:	e0bffc17 	ldw	r2,-16(fp)
   20360:	10800317 	ldw	r2,12(r2)
   20364:	10800404 	addi	r2,r2,16
   20368:	10800037 	ldwio	r2,0(r2)
   2036c:	1080004c 	andi	r2,r2,1
   20370:	103fee26 	beq	r2,zero,2032c <__alt_data_end+0xfc02032c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   20374:	e0bffc17 	ldw	r2,-16(fp)
   20378:	10800317 	ldw	r2,12(r2)
   2037c:	e13ffd03 	ldbu	r4,-12(fp)
   20380:	e0fffe03 	ldbu	r3,-8(fp)
   20384:	1806927a 	slli	r3,r3,9
   20388:	20c8b03a 	or	r4,r4,r3
   2038c:	e0ffff03 	ldbu	r3,-4(fp)
   20390:	1806923a 	slli	r3,r3,8
   20394:	20c6b03a 	or	r3,r4,r3
   20398:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   2039c:	e0bffb04 	addi	r2,fp,-20
   203a0:	100b883a 	mov	r5,r2
   203a4:	e13ffc17 	ldw	r4,-16(fp)
   203a8:	00205300 	call	20530 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   203ac:	e0bffb04 	addi	r2,fp,-20
   203b0:	100b883a 	mov	r5,r2
   203b4:	e13ffc17 	ldw	r4,-16(fp)
   203b8:	002057c0 	call	2057c <alt_avalon_i2c_check_arblost>
    
    return status;
   203bc:	e0bffb17 	ldw	r2,-20(fp)
}
   203c0:	e037883a 	mov	sp,fp
   203c4:	dfc00117 	ldw	ra,4(sp)
   203c8:	df000017 	ldw	fp,0(sp)
   203cc:	dec00204 	addi	sp,sp,8
   203d0:	f800283a 	ret

000203d4 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   203d4:	defffa04 	addi	sp,sp,-24
   203d8:	dfc00515 	stw	ra,20(sp)
   203dc:	df000415 	stw	fp,16(sp)
   203e0:	df000404 	addi	fp,sp,16
   203e4:	e13ffd15 	stw	r4,-12(fp)
   203e8:	e17ffe15 	stw	r5,-8(fp)
   203ec:	3005883a 	mov	r2,r6
   203f0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   203f4:	e0bffd17 	ldw	r2,-12(fp)
   203f8:	10800d17 	ldw	r2,52(r2)
   203fc:	10800058 	cmpnei	r2,r2,1
   20400:	10001c1e 	bne	r2,zero,20474 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   20404:	e0bffd17 	ldw	r2,-12(fp)
   20408:	10800917 	ldw	r2,36(r2)
   2040c:	109e0014 	ori	r2,r2,30720
   20410:	1004d1fa 	srli	r2,r2,7
   20414:	1007883a 	mov	r3,r2
   20418:	00bfff84 	movi	r2,-2
   2041c:	1884703a 	and	r2,r3,r2
   20420:	1007883a 	mov	r3,r2
   20424:	e0bffe17 	ldw	r2,-8(fp)
   20428:	1884b03a 	or	r2,r3,r2
   2042c:	10803fcc 	andi	r2,r2,255
   20430:	e0ffff03 	ldbu	r3,-4(fp)
   20434:	000f883a 	mov	r7,zero
   20438:	180d883a 	mov	r6,r3
   2043c:	100b883a 	mov	r5,r2
   20440:	e13ffd17 	ldw	r4,-12(fp)
   20444:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   20448:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   2044c:	e0bffd17 	ldw	r2,-12(fp)
   20450:	10800917 	ldw	r2,36(r2)
   20454:	10803fcc 	andi	r2,r2,255
   20458:	000f883a 	mov	r7,zero
   2045c:	000d883a 	mov	r6,zero
   20460:	100b883a 	mov	r5,r2
   20464:	e13ffd17 	ldw	r4,-12(fp)
   20468:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   2046c:	e0bffc15 	stw	r2,-16(fp)
   20470:	00000e06 	br	204ac <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   20474:	e0bffd17 	ldw	r2,-12(fp)
   20478:	10800917 	ldw	r2,36(r2)
   2047c:	1085883a 	add	r2,r2,r2
   20480:	1007883a 	mov	r3,r2
   20484:	e0bffe17 	ldw	r2,-8(fp)
   20488:	1884b03a 	or	r2,r3,r2
   2048c:	10803fcc 	andi	r2,r2,255
   20490:	e0ffff03 	ldbu	r3,-4(fp)
   20494:	000f883a 	mov	r7,zero
   20498:	180d883a 	mov	r6,r3
   2049c:	100b883a 	mov	r5,r2
   204a0:	e13ffd17 	ldw	r4,-12(fp)
   204a4:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   204a8:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   204ac:	e0bffc17 	ldw	r2,-16(fp)
}
   204b0:	e037883a 	mov	sp,fp
   204b4:	dfc00117 	ldw	ra,4(sp)
   204b8:	df000017 	ldw	fp,0(sp)
   204bc:	dec00204 	addi	sp,sp,8
   204c0:	f800283a 	ret

000204c4 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   204c4:	defffd04 	addi	sp,sp,-12
   204c8:	df000215 	stw	fp,8(sp)
   204cc:	df000204 	addi	fp,sp,8
   204d0:	e13ffe15 	stw	r4,-8(fp)
   204d4:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   204d8:	e0bffe17 	ldw	r2,-8(fp)
   204dc:	10c00917 	ldw	r3,36(r2)
   204e0:	e0bfff17 	ldw	r2,-4(fp)
   204e4:	10c00015 	stw	r3,0(r2)
}
   204e8:	0001883a 	nop
   204ec:	e037883a 	mov	sp,fp
   204f0:	df000017 	ldw	fp,0(sp)
   204f4:	dec00104 	addi	sp,sp,4
   204f8:	f800283a 	ret

000204fc <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   204fc:	defffd04 	addi	sp,sp,-12
   20500:	df000215 	stw	fp,8(sp)
   20504:	df000204 	addi	fp,sp,8
   20508:	e13ffe15 	stw	r4,-8(fp)
   2050c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   20510:	e0bffe17 	ldw	r2,-8(fp)
   20514:	e0ffff17 	ldw	r3,-4(fp)
   20518:	10c00915 	stw	r3,36(r2)
}
   2051c:	0001883a 	nop
   20520:	e037883a 	mov	sp,fp
   20524:	df000017 	ldw	fp,0(sp)
   20528:	dec00104 	addi	sp,sp,4
   2052c:	f800283a 	ret

00020530 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   20530:	defffd04 	addi	sp,sp,-12
   20534:	df000215 	stw	fp,8(sp)
   20538:	df000204 	addi	fp,sp,8
   2053c:	e13ffe15 	stw	r4,-8(fp)
   20540:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   20544:	e0bffe17 	ldw	r2,-8(fp)
   20548:	10800317 	ldw	r2,12(r2)
   2054c:	10800404 	addi	r2,r2,16
   20550:	10800037 	ldwio	r2,0(r2)
   20554:	1080010c 	andi	r2,r2,4
   20558:	10000326 	beq	r2,zero,20568 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   2055c:	e0bfff17 	ldw	r2,-4(fp)
   20560:	00fffec4 	movi	r3,-5
   20564:	10c00015 	stw	r3,0(r2)
    }
}
   20568:	0001883a 	nop
   2056c:	e037883a 	mov	sp,fp
   20570:	df000017 	ldw	fp,0(sp)
   20574:	dec00104 	addi	sp,sp,4
   20578:	f800283a 	ret

0002057c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   2057c:	defffd04 	addi	sp,sp,-12
   20580:	df000215 	stw	fp,8(sp)
   20584:	df000204 	addi	fp,sp,8
   20588:	e13ffe15 	stw	r4,-8(fp)
   2058c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   20590:	e0bffe17 	ldw	r2,-8(fp)
   20594:	10800317 	ldw	r2,12(r2)
   20598:	10800404 	addi	r2,r2,16
   2059c:	10800037 	ldwio	r2,0(r2)
   205a0:	1080020c 	andi	r2,r2,8
   205a4:	10000326 	beq	r2,zero,205b4 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   205a8:	e0bfff17 	ldw	r2,-4(fp)
   205ac:	00fffe84 	movi	r3,-6
   205b0:	10c00015 	stw	r3,0(r2)
    }
}
   205b4:	0001883a 	nop
   205b8:	e037883a 	mov	sp,fp
   205bc:	df000017 	ldw	fp,0(sp)
   205c0:	dec00104 	addi	sp,sp,4
   205c4:	f800283a 	ret

000205c8 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   205c8:	defff804 	addi	sp,sp,-32
   205cc:	dfc00715 	stw	ra,28(sp)
   205d0:	df000615 	stw	fp,24(sp)
   205d4:	df000604 	addi	fp,sp,24
   205d8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   205dc:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   205e0:	e0bfff17 	ldw	r2,-4(fp)
   205e4:	10800717 	ldw	r2,28(r2)
   205e8:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   205ec:	e0bffb17 	ldw	r2,-20(fp)
   205f0:	10800117 	ldw	r2,4(r2)
   205f4:	10800044 	addi	r2,r2,1
   205f8:	0149c404 	movi	r5,10000
   205fc:	1009883a 	mov	r4,r2
   20600:	000ccac0 	call	ccac <__mulsi3>
   20604:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   20608:	e0bffd04 	addi	r2,fp,-12
   2060c:	100b883a 	mov	r5,r2
   20610:	e13fff17 	ldw	r4,-4(fp)
   20614:	00214600 	call	21460 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   20618:	e0bffd17 	ldw	r2,-12(fp)
   2061c:	100b883a 	mov	r5,r2
   20620:	e13fff17 	ldw	r4,-4(fp)
   20624:	00213940 	call	21394 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   20628:	e0bffc04 	addi	r2,fp,-16
   2062c:	100b883a 	mov	r5,r2
   20630:	e13fff17 	ldw	r4,-4(fp)
   20634:	00205300 	call	20530 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   20638:	e0bffc17 	ldw	r2,-16(fp)
   2063c:	10002226 	beq	r2,zero,206c8 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   20640:	e0bffb17 	ldw	r2,-20(fp)
   20644:	10800217 	ldw	r2,8(r2)
   20648:	10001d26 	beq	r2,zero,206c0 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2064c:	00000d06 	br	20684 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   20650:	e0bffa17 	ldw	r2,-24(fp)
   20654:	108002a8 	cmpgeui	r2,r2,10
   20658:	1000021e 	bne	r2,zero,20664 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   2065c:	0109c404 	movi	r4,10000
   20660:	002248c0 	call	2248c <alt_busy_sleep>
              if (--timeout == 0)
   20664:	e0bffa17 	ldw	r2,-24(fp)
   20668:	10bfffc4 	addi	r2,r2,-1
   2066c:	e0bffa15 	stw	r2,-24(fp)
   20670:	e0bffa17 	ldw	r2,-24(fp)
   20674:	1000031e 	bne	r2,zero,20684 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   20678:	00bfff84 	movi	r2,-2
   2067c:	e0bffc15 	stw	r2,-16(fp)
                 break;
   20680:	00000306 	br	20690 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20684:	e13fff17 	ldw	r4,-4(fp)
   20688:	002015c0 	call	2015c <alt_avalon_i2c_is_busy>
   2068c:	103ff01e 	bne	r2,zero,20650 <__alt_data_end+0xfc020650>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   20690:	e0bffb17 	ldw	r2,-20(fp)
   20694:	10800017 	ldw	r2,0(r2)
   20698:	e0fffe04 	addi	r3,fp,-8
   2069c:	180f883a 	mov	r7,r3
   206a0:	000d883a 	mov	r6,zero
   206a4:	100b883a 	mov	r5,r2
   206a8:	e13fff17 	ldw	r4,-4(fp)
   206ac:	00201a00 	call	201a0 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   206b0:	e13fff17 	ldw	r4,-4(fp)
   206b4:	001fe040 	call	1fe04 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   206b8:	e0bffb17 	ldw	r2,-20(fp)
   206bc:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   206c0:	e0bffc17 	ldw	r2,-16(fp)
   206c4:	00000a06 	br	206f0 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   206c8:	e0bffb17 	ldw	r2,-20(fp)
   206cc:	10800217 	ldw	r2,8(r2)
   206d0:	10000626 	beq	r2,zero,206ec <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   206d4:	e0bffd17 	ldw	r2,-12(fp)
   206d8:	100b883a 	mov	r5,r2
   206dc:	e13fff17 	ldw	r4,-4(fp)
   206e0:	00213fc0 	call	213fc <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   206e4:	00bffe44 	movi	r2,-7
   206e8:	00000106 	br	206f0 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   206ec:	0005883a 	mov	r2,zero
}
   206f0:	e037883a 	mov	sp,fp
   206f4:	dfc00117 	ldw	ra,4(sp)
   206f8:	df000017 	ldw	fp,0(sp)
   206fc:	dec00204 	addi	sp,sp,8
   20700:	f800283a 	ret

00020704 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   20704:	defff704 	addi	sp,sp,-36
   20708:	dfc00815 	stw	ra,32(sp)
   2070c:	df000715 	stw	fp,28(sp)
   20710:	df000704 	addi	fp,sp,28
   20714:	e13ffc15 	stw	r4,-16(fp)
   20718:	e17ffd15 	stw	r5,-12(fp)
   2071c:	e1bffe15 	stw	r6,-8(fp)
   20720:	3805883a 	mov	r2,r7
   20724:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20728:	0089c404 	movi	r2,10000
   2072c:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   20730:	00002206 	br	207bc <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   20734:	e0bffb17 	ldw	r2,-20(fp)
   20738:	108002a8 	cmpgeui	r2,r2,10
   2073c:	1000021e 	bne	r2,zero,20748 <alt_avalon_i2c_master_tx+0x44>
   20740:	0109c404 	movi	r4,10000
   20744:	002248c0 	call	2248c <alt_busy_sleep>
      if (use_interrupts)
   20748:	e0bfff03 	ldbu	r2,-4(fp)
   2074c:	10000926 	beq	r2,zero,20774 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   20750:	00800044 	movi	r2,1
   20754:	d8800015 	stw	r2,0(sp)
   20758:	000f883a 	mov	r7,zero
   2075c:	e1bffe17 	ldw	r6,-8(fp)
   20760:	e17ffd17 	ldw	r5,-12(fp)
   20764:	e13ffc17 	ldw	r4,-16(fp)
   20768:	0020cb00 	call	20cb0 <alt_avalon_i2c_master_transmit_using_interrupts>
   2076c:	e0bffa15 	stw	r2,-24(fp)
   20770:	00000806 	br	20794 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   20774:	00800044 	movi	r2,1
   20778:	d8800015 	stw	r2,0(sp)
   2077c:	000f883a 	mov	r7,zero
   20780:	e1bffe17 	ldw	r6,-8(fp)
   20784:	e17ffd17 	ldw	r5,-12(fp)
   20788:	e13ffc17 	ldw	r4,-16(fp)
   2078c:	0020af00 	call	20af0 <alt_avalon_i2c_master_transmit>
   20790:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20794:	e0bffa17 	ldw	r2,-24(fp)
   20798:	10bffea0 	cmpeqi	r2,r2,-6
   2079c:	1000061e 	bne	r2,zero,207b8 <alt_avalon_i2c_master_tx+0xb4>
   207a0:	e0bffa17 	ldw	r2,-24(fp)
   207a4:	10bffee0 	cmpeqi	r2,r2,-5
   207a8:	1000031e 	bne	r2,zero,207b8 <alt_avalon_i2c_master_tx+0xb4>
   207ac:	e0bffa17 	ldw	r2,-24(fp)
   207b0:	10bffe58 	cmpnei	r2,r2,-7
   207b4:	1000061e 	bne	r2,zero,207d0 <alt_avalon_i2c_master_tx+0xcc>
   207b8:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   207bc:	e0bffb17 	ldw	r2,-20(fp)
   207c0:	10ffffc4 	addi	r3,r2,-1
   207c4:	e0fffb15 	stw	r3,-20(fp)
   207c8:	103fda1e 	bne	r2,zero,20734 <__alt_data_end+0xfc020734>
   207cc:	00000106 	br	207d4 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   207d0:	0001883a 	nop
    }

    return status;
   207d4:	e0bffa17 	ldw	r2,-24(fp)
}        
   207d8:	e037883a 	mov	sp,fp
   207dc:	dfc00117 	ldw	ra,4(sp)
   207e0:	df000017 	ldw	fp,0(sp)
   207e4:	dec00204 	addi	sp,sp,8
   207e8:	f800283a 	ret

000207ec <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   207ec:	defff704 	addi	sp,sp,-36
   207f0:	dfc00815 	stw	ra,32(sp)
   207f4:	df000715 	stw	fp,28(sp)
   207f8:	df000704 	addi	fp,sp,28
   207fc:	e13ffc15 	stw	r4,-16(fp)
   20800:	e17ffd15 	stw	r5,-12(fp)
   20804:	e1bffe15 	stw	r6,-8(fp)
   20808:	3805883a 	mov	r2,r7
   2080c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20810:	0089c404 	movi	r2,10000
   20814:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   20818:	e0bfff03 	ldbu	r2,-4(fp)
   2081c:	10003426 	beq	r2,zero,208f0 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   20820:	00001706 	br	20880 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20824:	e0bffb17 	ldw	r2,-20(fp)
   20828:	108002a8 	cmpgeui	r2,r2,10
   2082c:	1000021e 	bne	r2,zero,20838 <alt_avalon_i2c_master_rx+0x4c>
   20830:	0109c404 	movi	r4,10000
   20834:	002248c0 	call	2248c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   20838:	00800044 	movi	r2,1
   2083c:	d8800015 	stw	r2,0(sp)
   20840:	000f883a 	mov	r7,zero
   20844:	e1bffe17 	ldw	r6,-8(fp)
   20848:	e17ffd17 	ldw	r5,-12(fp)
   2084c:	e13ffc17 	ldw	r4,-16(fp)
   20850:	00210cc0 	call	210cc <alt_avalon_i2c_master_receive_using_interrupts>
   20854:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20858:	e0bffa17 	ldw	r2,-24(fp)
   2085c:	10bffea0 	cmpeqi	r2,r2,-6
   20860:	1000061e 	bne	r2,zero,2087c <alt_avalon_i2c_master_rx+0x90>
   20864:	e0bffa17 	ldw	r2,-24(fp)
   20868:	10bffee0 	cmpeqi	r2,r2,-5
   2086c:	1000031e 	bne	r2,zero,2087c <alt_avalon_i2c_master_rx+0x90>
   20870:	e0bffa17 	ldw	r2,-24(fp)
   20874:	10bffe58 	cmpnei	r2,r2,-7
   20878:	1000221e 	bne	r2,zero,20904 <alt_avalon_i2c_master_rx+0x118>
   2087c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   20880:	e0bffb17 	ldw	r2,-20(fp)
   20884:	10ffffc4 	addi	r3,r2,-1
   20888:	e0fffb15 	stw	r3,-20(fp)
   2088c:	103fe51e 	bne	r2,zero,20824 <__alt_data_end+0xfc020824>
   20890:	00001f06 	br	20910 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   20894:	e0bffb17 	ldw	r2,-20(fp)
   20898:	108002a8 	cmpgeui	r2,r2,10
   2089c:	1000021e 	bne	r2,zero,208a8 <alt_avalon_i2c_master_rx+0xbc>
   208a0:	0109c404 	movi	r4,10000
   208a4:	002248c0 	call	2248c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   208a8:	00800044 	movi	r2,1
   208ac:	d8800015 	stw	r2,0(sp)
   208b0:	000f883a 	mov	r7,zero
   208b4:	e1bffe17 	ldw	r6,-8(fp)
   208b8:	e17ffd17 	ldw	r5,-12(fp)
   208bc:	e13ffc17 	ldw	r4,-16(fp)
   208c0:	0020ebc0 	call	20ebc <alt_avalon_i2c_master_receive>
   208c4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   208c8:	e0bffa17 	ldw	r2,-24(fp)
   208cc:	10bffea0 	cmpeqi	r2,r2,-6
   208d0:	1000061e 	bne	r2,zero,208ec <alt_avalon_i2c_master_rx+0x100>
   208d4:	e0bffa17 	ldw	r2,-24(fp)
   208d8:	10bffee0 	cmpeqi	r2,r2,-5
   208dc:	1000031e 	bne	r2,zero,208ec <alt_avalon_i2c_master_rx+0x100>
   208e0:	e0bffa17 	ldw	r2,-24(fp)
   208e4:	10bffe58 	cmpnei	r2,r2,-7
   208e8:	1000081e 	bne	r2,zero,2090c <alt_avalon_i2c_master_rx+0x120>
   208ec:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   208f0:	e0bffb17 	ldw	r2,-20(fp)
   208f4:	10ffffc4 	addi	r3,r2,-1
   208f8:	e0fffb15 	stw	r3,-20(fp)
   208fc:	103fe51e 	bne	r2,zero,20894 <__alt_data_end+0xfc020894>
   20900:	00000306 	br	20910 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20904:	0001883a 	nop
   20908:	00000106 	br	20910 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   2090c:	0001883a 	nop
      }
    }
    
    return status;
   20910:	e0bffa17 	ldw	r2,-24(fp)
}        
   20914:	e037883a 	mov	sp,fp
   20918:	dfc00117 	ldw	ra,4(sp)
   2091c:	df000017 	ldw	fp,0(sp)
   20920:	dec00204 	addi	sp,sp,8
   20924:	f800283a 	ret

00020928 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   20928:	defff604 	addi	sp,sp,-40
   2092c:	dfc00915 	stw	ra,36(sp)
   20930:	df000815 	stw	fp,32(sp)
   20934:	df000804 	addi	fp,sp,32
   20938:	e13ffb15 	stw	r4,-20(fp)
   2093c:	e17ffc15 	stw	r5,-16(fp)
   20940:	e1bffd15 	stw	r6,-12(fp)
   20944:	e1fffe15 	stw	r7,-8(fp)
   20948:	e0800317 	ldw	r2,12(fp)
   2094c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20950:	0089c404 	movi	r2,10000
   20954:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   20958:	e0bfff03 	ldbu	r2,-4(fp)
   2095c:	10005626 	beq	r2,zero,20ab8 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   20960:	00002806 	br	20a04 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20964:	e0bffa17 	ldw	r2,-24(fp)
   20968:	108002a8 	cmpgeui	r2,r2,10
   2096c:	1000021e 	bne	r2,zero,20978 <alt_avalon_i2c_master_tx_rx+0x50>
   20970:	0109c404 	movi	r4,10000
   20974:	002248c0 	call	2248c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20978:	d8000015 	stw	zero,0(sp)
   2097c:	000f883a 	mov	r7,zero
   20980:	e1bffd17 	ldw	r6,-12(fp)
   20984:	e17ffc17 	ldw	r5,-16(fp)
   20988:	e13ffb17 	ldw	r4,-20(fp)
   2098c:	0020cb00 	call	20cb0 <alt_avalon_i2c_master_transmit_using_interrupts>
   20990:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20994:	e0bff917 	ldw	r2,-28(fp)
   20998:	10bffea0 	cmpeqi	r2,r2,-6
   2099c:	1000191e 	bne	r2,zero,20a04 <alt_avalon_i2c_master_tx_rx+0xdc>
   209a0:	e0bff917 	ldw	r2,-28(fp)
   209a4:	10bffee0 	cmpeqi	r2,r2,-5
   209a8:	1000161e 	bne	r2,zero,20a04 <alt_avalon_i2c_master_tx_rx+0xdc>
   209ac:	e0bff917 	ldw	r2,-28(fp)
   209b0:	10bffe58 	cmpnei	r2,r2,-7
   209b4:	1000011e 	bne	r2,zero,209bc <alt_avalon_i2c_master_tx_rx+0x94>
   209b8:	00001206 	br	20a04 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   209bc:	00800044 	movi	r2,1
   209c0:	d8800015 	stw	r2,0(sp)
   209c4:	01c00044 	movi	r7,1
   209c8:	e1800217 	ldw	r6,8(fp)
   209cc:	e17ffe17 	ldw	r5,-8(fp)
   209d0:	e13ffb17 	ldw	r4,-20(fp)
   209d4:	00210cc0 	call	210cc <alt_avalon_i2c_master_receive_using_interrupts>
   209d8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   209dc:	e0bff917 	ldw	r2,-28(fp)
   209e0:	10bffea0 	cmpeqi	r2,r2,-6
   209e4:	1000061e 	bne	r2,zero,20a00 <alt_avalon_i2c_master_tx_rx+0xd8>
   209e8:	e0bff917 	ldw	r2,-28(fp)
   209ec:	10bffee0 	cmpeqi	r2,r2,-5
   209f0:	1000031e 	bne	r2,zero,20a00 <alt_avalon_i2c_master_tx_rx+0xd8>
   209f4:	e0bff917 	ldw	r2,-28(fp)
   209f8:	10bffe58 	cmpnei	r2,r2,-7
   209fc:	1000331e 	bne	r2,zero,20acc <alt_avalon_i2c_master_tx_rx+0x1a4>
   20a00:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   20a04:	e0bffa17 	ldw	r2,-24(fp)
   20a08:	10ffffc4 	addi	r3,r2,-1
   20a0c:	e0fffa15 	stw	r3,-24(fp)
   20a10:	103fd41e 	bne	r2,zero,20964 <__alt_data_end+0xfc020964>
   20a14:	00003006 	br	20ad8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   20a18:	e0bffa17 	ldw	r2,-24(fp)
   20a1c:	108002a8 	cmpgeui	r2,r2,10
   20a20:	1000021e 	bne	r2,zero,20a2c <alt_avalon_i2c_master_tx_rx+0x104>
   20a24:	0109c404 	movi	r4,10000
   20a28:	002248c0 	call	2248c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20a2c:	d8000015 	stw	zero,0(sp)
   20a30:	000f883a 	mov	r7,zero
   20a34:	e1bffd17 	ldw	r6,-12(fp)
   20a38:	e17ffc17 	ldw	r5,-16(fp)
   20a3c:	e13ffb17 	ldw	r4,-20(fp)
   20a40:	0020af00 	call	20af0 <alt_avalon_i2c_master_transmit>
   20a44:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20a48:	e0bff917 	ldw	r2,-28(fp)
   20a4c:	10bffea0 	cmpeqi	r2,r2,-6
   20a50:	1000191e 	bne	r2,zero,20ab8 <alt_avalon_i2c_master_tx_rx+0x190>
   20a54:	e0bff917 	ldw	r2,-28(fp)
   20a58:	10bffee0 	cmpeqi	r2,r2,-5
   20a5c:	1000161e 	bne	r2,zero,20ab8 <alt_avalon_i2c_master_tx_rx+0x190>
   20a60:	e0bff917 	ldw	r2,-28(fp)
   20a64:	10bffe58 	cmpnei	r2,r2,-7
   20a68:	1000011e 	bne	r2,zero,20a70 <alt_avalon_i2c_master_tx_rx+0x148>
   20a6c:	00001206 	br	20ab8 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   20a70:	00800044 	movi	r2,1
   20a74:	d8800015 	stw	r2,0(sp)
   20a78:	01c00044 	movi	r7,1
   20a7c:	e1800217 	ldw	r6,8(fp)
   20a80:	e17ffe17 	ldw	r5,-8(fp)
   20a84:	e13ffb17 	ldw	r4,-20(fp)
   20a88:	0020ebc0 	call	20ebc <alt_avalon_i2c_master_receive>
   20a8c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20a90:	e0bff917 	ldw	r2,-28(fp)
   20a94:	10bffea0 	cmpeqi	r2,r2,-6
   20a98:	1000061e 	bne	r2,zero,20ab4 <alt_avalon_i2c_master_tx_rx+0x18c>
   20a9c:	e0bff917 	ldw	r2,-28(fp)
   20aa0:	10bffee0 	cmpeqi	r2,r2,-5
   20aa4:	1000031e 	bne	r2,zero,20ab4 <alt_avalon_i2c_master_tx_rx+0x18c>
   20aa8:	e0bff917 	ldw	r2,-28(fp)
   20aac:	10bffe58 	cmpnei	r2,r2,-7
   20ab0:	1000081e 	bne	r2,zero,20ad4 <alt_avalon_i2c_master_tx_rx+0x1ac>
   20ab4:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   20ab8:	e0bffa17 	ldw	r2,-24(fp)
   20abc:	10ffffc4 	addi	r3,r2,-1
   20ac0:	e0fffa15 	stw	r3,-24(fp)
   20ac4:	103fd41e 	bne	r2,zero,20a18 <__alt_data_end+0xfc020a18>
   20ac8:	00000306 	br	20ad8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   20acc:	0001883a 	nop
   20ad0:	00000106 	br	20ad8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   20ad4:	0001883a 	nop
      }
    }
    
    return status;
   20ad8:	e0bff917 	ldw	r2,-28(fp)
}                                       
   20adc:	e037883a 	mov	sp,fp
   20ae0:	dfc00117 	ldw	ra,4(sp)
   20ae4:	df000017 	ldw	fp,0(sp)
   20ae8:	dec00204 	addi	sp,sp,8
   20aec:	f800283a 	ret

00020af0 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   20af0:	defff704 	addi	sp,sp,-36
   20af4:	dfc00815 	stw	ra,32(sp)
   20af8:	df000715 	stw	fp,28(sp)
   20afc:	df000704 	addi	fp,sp,28
   20b00:	e13ffb15 	stw	r4,-20(fp)
   20b04:	e17ffc15 	stw	r5,-16(fp)
   20b08:	e1bffd15 	stw	r6,-12(fp)
   20b0c:	3807883a 	mov	r3,r7
   20b10:	e0800217 	ldw	r2,8(fp)
   20b14:	e0fffe05 	stb	r3,-8(fp)
   20b18:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20b1c:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   20b20:	0149c404 	movi	r5,10000
   20b24:	e13ffd17 	ldw	r4,-12(fp)
   20b28:	000ccac0 	call	ccac <__mulsi3>
   20b2c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   20b30:	e0bffd17 	ldw	r2,-12(fp)
   20b34:	1000021e 	bne	r2,zero,20b40 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20b38:	0005883a 	mov	r2,zero
   20b3c:	00005706 	br	20c9c <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20b40:	e0bffe03 	ldbu	r2,-8(fp)
   20b44:	10000a1e 	bne	r2,zero,20b70 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20b48:	e13ffb17 	ldw	r4,-20(fp)
   20b4c:	001fd6c0 	call	1fd6c <alt_avalon_i2c_enable>
   20b50:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20b54:	e0bffa17 	ldw	r2,-24(fp)
   20b58:	10000226 	beq	r2,zero,20b64 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   20b5c:	e0bffa17 	ldw	r2,-24(fp)
   20b60:	00004e06 	br	20c9c <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20b64:	01400704 	movi	r5,28
   20b68:	e13ffb17 	ldw	r4,-20(fp)
   20b6c:	00213580 	call	21358 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   20b70:	e0bffe03 	ldbu	r2,-8(fp)
   20b74:	100d883a 	mov	r6,r2
   20b78:	000b883a 	mov	r5,zero
   20b7c:	e13ffb17 	ldw	r4,-20(fp)
   20b80:	00203d40 	call	203d4 <alt_avalon_i2c_send_address>
   20b84:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   20b88:	e0bffa17 	ldw	r2,-24(fp)
   20b8c:	1000271e 	bne	r2,zero,20c2c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20b90:	00000f06 	br	20bd0 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20b94:	e0bffc17 	ldw	r2,-16(fp)
   20b98:	10800003 	ldbu	r2,0(r2)
   20b9c:	10803fcc 	andi	r2,r2,255
   20ba0:	000f883a 	mov	r7,zero
   20ba4:	000d883a 	mov	r6,zero
   20ba8:	100b883a 	mov	r5,r2
   20bac:	e13ffb17 	ldw	r4,-20(fp)
   20bb0:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   20bb4:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   20bb8:	e0bffc17 	ldw	r2,-16(fp)
   20bbc:	10800044 	addi	r2,r2,1
   20bc0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20bc4:	e0bffd17 	ldw	r2,-12(fp)
   20bc8:	10bfffc4 	addi	r2,r2,-1
   20bcc:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20bd0:	e0bffd17 	ldw	r2,-12(fp)
   20bd4:	108000b0 	cmpltui	r2,r2,2
   20bd8:	1000021e 	bne	r2,zero,20be4 <alt_avalon_i2c_master_transmit+0xf4>
   20bdc:	e0bffa17 	ldw	r2,-24(fp)
   20be0:	103fec26 	beq	r2,zero,20b94 <__alt_data_end+0xfc020b94>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20be4:	e0bffa17 	ldw	r2,-24(fp)
   20be8:	1000101e 	bne	r2,zero,20c2c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20bec:	e0bffc17 	ldw	r2,-16(fp)
   20bf0:	10800003 	ldbu	r2,0(r2)
   20bf4:	10803fcc 	andi	r2,r2,255
   20bf8:	e0ffff03 	ldbu	r3,-4(fp)
   20bfc:	180f883a 	mov	r7,r3
   20c00:	000d883a 	mov	r6,zero
   20c04:	100b883a 	mov	r5,r2
   20c08:	e13ffb17 	ldw	r4,-20(fp)
   20c0c:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   20c10:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   20c14:	e0bffc17 	ldw	r2,-16(fp)
   20c18:	10800044 	addi	r2,r2,1
   20c1c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20c20:	e0bffd17 	ldw	r2,-12(fp)
   20c24:	10bfffc4 	addi	r2,r2,-1
   20c28:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   20c2c:	e0bfff03 	ldbu	r2,-4(fp)
   20c30:	1000101e 	bne	r2,zero,20c74 <alt_avalon_i2c_master_transmit+0x184>
   20c34:	e0bffa17 	ldw	r2,-24(fp)
   20c38:	10001726 	beq	r2,zero,20c98 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20c3c:	00000d06 	br	20c74 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   20c40:	e0bff917 	ldw	r2,-28(fp)
   20c44:	108002a8 	cmpgeui	r2,r2,10
   20c48:	1000021e 	bne	r2,zero,20c54 <alt_avalon_i2c_master_transmit+0x164>
   20c4c:	0109c404 	movi	r4,10000
   20c50:	002248c0 	call	2248c <alt_busy_sleep>
            if (--timeout == 0)
   20c54:	e0bff917 	ldw	r2,-28(fp)
   20c58:	10bfffc4 	addi	r2,r2,-1
   20c5c:	e0bff915 	stw	r2,-28(fp)
   20c60:	e0bff917 	ldw	r2,-28(fp)
   20c64:	1000031e 	bne	r2,zero,20c74 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20c68:	00bfff84 	movi	r2,-2
   20c6c:	e0bffa15 	stw	r2,-24(fp)
               break;
   20c70:	00000306 	br	20c80 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20c74:	e13ffb17 	ldw	r4,-20(fp)
   20c78:	002015c0 	call	2015c <alt_avalon_i2c_is_busy>
   20c7c:	103ff01e 	bne	r2,zero,20c40 <__alt_data_end+0xfc020c40>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   20c80:	e0bffa04 	addi	r2,fp,-24
   20c84:	100b883a 	mov	r5,r2
   20c88:	e13ffb17 	ldw	r4,-20(fp)
   20c8c:	00205300 	call	20530 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20c90:	e13ffb17 	ldw	r4,-20(fp)
   20c94:	001fe040 	call	1fe04 <alt_avalon_i2c_disable>
    }


    return status;
   20c98:	e0bffa17 	ldw	r2,-24(fp)
}
   20c9c:	e037883a 	mov	sp,fp
   20ca0:	dfc00117 	ldw	ra,4(sp)
   20ca4:	df000017 	ldw	fp,0(sp)
   20ca8:	dec00204 	addi	sp,sp,8
   20cac:	f800283a 	ret

00020cb0 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   20cb0:	defff604 	addi	sp,sp,-40
   20cb4:	dfc00915 	stw	ra,36(sp)
   20cb8:	df000815 	stw	fp,32(sp)
   20cbc:	df000804 	addi	fp,sp,32
   20cc0:	e13ffb15 	stw	r4,-20(fp)
   20cc4:	e17ffc15 	stw	r5,-16(fp)
   20cc8:	e1bffd15 	stw	r6,-12(fp)
   20ccc:	3807883a 	mov	r3,r7
   20cd0:	e0800217 	ldw	r2,8(fp)
   20cd4:	e0fffe05 	stb	r3,-8(fp)
   20cd8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20cdc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   20ce0:	0149c404 	movi	r5,10000
   20ce4:	e13ffd17 	ldw	r4,-12(fp)
   20ce8:	000ccac0 	call	ccac <__mulsi3>
   20cec:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   20cf0:	e0bffb17 	ldw	r2,-20(fp)
   20cf4:	10800717 	ldw	r2,28(r2)
   20cf8:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   20cfc:	e0bffd17 	ldw	r2,-12(fp)
   20d00:	1000021e 	bne	r2,zero,20d0c <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20d04:	0005883a 	mov	r2,zero
   20d08:	00006706 	br	20ea8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   20d0c:	e0bffb17 	ldw	r2,-20(fp)
   20d10:	10c00617 	ldw	r3,24(r2)
   20d14:	008000b4 	movhi	r2,2
   20d18:	10be7c04 	addi	r2,r2,-1552
   20d1c:	18800226 	beq	r3,r2,20d28 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   20d20:	00bfff44 	movi	r2,-3
   20d24:	00006006 	br	20ea8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20d28:	e0bffe03 	ldbu	r2,-8(fp)
   20d2c:	10000a1e 	bne	r2,zero,20d58 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20d30:	e13ffb17 	ldw	r4,-20(fp)
   20d34:	001fd6c0 	call	1fd6c <alt_avalon_i2c_enable>
   20d38:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20d3c:	e0bff817 	ldw	r2,-32(fp)
   20d40:	10000226 	beq	r2,zero,20d4c <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   20d44:	e0bff817 	ldw	r2,-32(fp)
   20d48:	00005706 	br	20ea8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20d4c:	01400704 	movi	r5,28
   20d50:	e13ffb17 	ldw	r4,-20(fp)
   20d54:	00213580 	call	21358 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   20d58:	e0bffe03 	ldbu	r2,-8(fp)
   20d5c:	100d883a 	mov	r6,r2
   20d60:	000b883a 	mov	r5,zero
   20d64:	e13ffb17 	ldw	r4,-20(fp)
   20d68:	00203d40 	call	203d4 <alt_avalon_i2c_send_address>
   20d6c:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   20d70:	e0bff817 	ldw	r2,-32(fp)
   20d74:	1000271e 	bne	r2,zero,20e14 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20d78:	00000f06 	br	20db8 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20d7c:	e0bffc17 	ldw	r2,-16(fp)
   20d80:	10800003 	ldbu	r2,0(r2)
   20d84:	10803fcc 	andi	r2,r2,255
   20d88:	000f883a 	mov	r7,zero
   20d8c:	000d883a 	mov	r6,zero
   20d90:	100b883a 	mov	r5,r2
   20d94:	e13ffb17 	ldw	r4,-20(fp)
   20d98:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   20d9c:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   20da0:	e0bffc17 	ldw	r2,-16(fp)
   20da4:	10800044 	addi	r2,r2,1
   20da8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20dac:	e0bffd17 	ldw	r2,-12(fp)
   20db0:	10bfffc4 	addi	r2,r2,-1
   20db4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20db8:	e0bffd17 	ldw	r2,-12(fp)
   20dbc:	108000b0 	cmpltui	r2,r2,2
   20dc0:	1000021e 	bne	r2,zero,20dcc <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   20dc4:	e0bff817 	ldw	r2,-32(fp)
   20dc8:	103fec26 	beq	r2,zero,20d7c <__alt_data_end+0xfc020d7c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20dcc:	e0bff817 	ldw	r2,-32(fp)
   20dd0:	1000101e 	bne	r2,zero,20e14 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20dd4:	e0bffc17 	ldw	r2,-16(fp)
   20dd8:	10800003 	ldbu	r2,0(r2)
   20ddc:	10803fcc 	andi	r2,r2,255
   20de0:	e0ffff03 	ldbu	r3,-4(fp)
   20de4:	180f883a 	mov	r7,r3
   20de8:	000d883a 	mov	r6,zero
   20dec:	100b883a 	mov	r5,r2
   20df0:	e13ffb17 	ldw	r4,-20(fp)
   20df4:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   20df8:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   20dfc:	e0bffc17 	ldw	r2,-16(fp)
   20e00:	10800044 	addi	r2,r2,1
   20e04:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20e08:	e0bffd17 	ldw	r2,-12(fp)
   20e0c:	10bfffc4 	addi	r2,r2,-1
   20e10:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   20e14:	e0bff817 	ldw	r2,-32(fp)
   20e18:	10001426 	beq	r2,zero,20e6c <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20e1c:	00000d06 	br	20e54 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   20e20:	e0bff917 	ldw	r2,-28(fp)
   20e24:	108002a8 	cmpgeui	r2,r2,10
   20e28:	1000021e 	bne	r2,zero,20e34 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   20e2c:	0109c404 	movi	r4,10000
   20e30:	002248c0 	call	2248c <alt_busy_sleep>
            if (--timeout == 0)
   20e34:	e0bff917 	ldw	r2,-28(fp)
   20e38:	10bfffc4 	addi	r2,r2,-1
   20e3c:	e0bff915 	stw	r2,-28(fp)
   20e40:	e0bff917 	ldw	r2,-28(fp)
   20e44:	1000031e 	bne	r2,zero,20e54 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20e48:	00bfff84 	movi	r2,-2
   20e4c:	e0bff815 	stw	r2,-32(fp)
               break;
   20e50:	00000306 	br	20e60 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20e54:	e13ffb17 	ldw	r4,-20(fp)
   20e58:	002015c0 	call	2015c <alt_avalon_i2c_is_busy>
   20e5c:	103ff01e 	bne	r2,zero,20e20 <__alt_data_end+0xfc020e20>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20e60:	e13ffb17 	ldw	r4,-20(fp)
   20e64:	001fe040 	call	1fe04 <alt_avalon_i2c_disable>
   20e68:	00000e06 	br	20ea4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   20e6c:	e0bfff03 	ldbu	r2,-4(fp)
   20e70:	10000c26 	beq	r2,zero,20ea4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20e74:	01400704 	movi	r5,28
   20e78:	e13ffb17 	ldw	r4,-20(fp)
   20e7c:	00213580 	call	21358 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   20e80:	000b883a 	mov	r5,zero
   20e84:	e13ffb17 	ldw	r4,-20(fp)
   20e88:	00215a00 	call	215a0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   20e8c:	e0bffa17 	ldw	r2,-24(fp)
   20e90:	00c00044 	movi	r3,1
   20e94:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   20e98:	01400044 	movi	r5,1
   20e9c:	e13ffb17 	ldw	r4,-20(fp)
   20ea0:	00213fc0 	call	213fc <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   20ea4:	e0bff817 	ldw	r2,-32(fp)
}
   20ea8:	e037883a 	mov	sp,fp
   20eac:	dfc00117 	ldw	ra,4(sp)
   20eb0:	df000017 	ldw	fp,0(sp)
   20eb4:	dec00204 	addi	sp,sp,8
   20eb8:	f800283a 	ret

00020ebc <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   20ebc:	defff404 	addi	sp,sp,-48
   20ec0:	dfc00b15 	stw	ra,44(sp)
   20ec4:	df000a15 	stw	fp,40(sp)
   20ec8:	df000a04 	addi	fp,sp,40
   20ecc:	e13ffb15 	stw	r4,-20(fp)
   20ed0:	e17ffc15 	stw	r5,-16(fp)
   20ed4:	e1bffd15 	stw	r6,-12(fp)
   20ed8:	3807883a 	mov	r3,r7
   20edc:	e0800217 	ldw	r2,8(fp)
   20ee0:	e0fffe05 	stb	r3,-8(fp)
   20ee4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20ee8:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   20eec:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   20ef0:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   20ef4:	e0bffd17 	ldw	r2,-12(fp)
   20ef8:	1000021e 	bne	r2,zero,20f04 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20efc:	0005883a 	mov	r2,zero
   20f00:	00006d06 	br	210b8 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20f04:	e0bffe03 	ldbu	r2,-8(fp)
   20f08:	10000a1e 	bne	r2,zero,20f34 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20f0c:	e13ffb17 	ldw	r4,-20(fp)
   20f10:	001fd6c0 	call	1fd6c <alt_avalon_i2c_enable>
   20f14:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20f18:	e0bff917 	ldw	r2,-28(fp)
   20f1c:	10000226 	beq	r2,zero,20f28 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   20f20:	e0bff917 	ldw	r2,-28(fp)
   20f24:	00006406 	br	210b8 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20f28:	01400704 	movi	r5,28
   20f2c:	e13ffb17 	ldw	r4,-20(fp)
   20f30:	00213580 	call	21358 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   20f34:	e0bffe03 	ldbu	r2,-8(fp)
   20f38:	100d883a 	mov	r6,r2
   20f3c:	01400044 	movi	r5,1
   20f40:	e13ffb17 	ldw	r4,-20(fp)
   20f44:	00203d40 	call	203d4 <alt_avalon_i2c_send_address>
   20f48:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   20f4c:	e0bff917 	ldw	r2,-28(fp)
   20f50:	1000341e 	bne	r2,zero,21024 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20f54:	00001906 	br	20fbc <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20f58:	000f883a 	mov	r7,zero
   20f5c:	000d883a 	mov	r6,zero
   20f60:	000b883a 	mov	r5,zero
   20f64:	e13ffb17 	ldw	r4,-20(fp)
   20f68:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   20f6c:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   20f70:	e0bff817 	ldw	r2,-32(fp)
   20f74:	10800044 	addi	r2,r2,1
   20f78:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   20f7c:	e0bff917 	ldw	r2,-28(fp)
   20f80:	10000e1e 	bne	r2,zero,20fbc <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   20f84:	e0bffa04 	addi	r2,fp,-24
   20f88:	100f883a 	mov	r7,r2
   20f8c:	000d883a 	mov	r6,zero
   20f90:	e17ffc17 	ldw	r5,-16(fp)
   20f94:	e13ffb17 	ldw	r4,-20(fp)
   20f98:	00201a00 	call	201a0 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   20f9c:	e0bffa17 	ldw	r2,-24(fp)
   20fa0:	e0fffc17 	ldw	r3,-16(fp)
   20fa4:	1885883a 	add	r2,r3,r2
   20fa8:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   20fac:	e0bffa17 	ldw	r2,-24(fp)
   20fb0:	e0fff717 	ldw	r3,-36(fp)
   20fb4:	1885883a 	add	r2,r3,r2
   20fb8:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20fbc:	e0bffd17 	ldw	r2,-12(fp)
   20fc0:	10bfffc4 	addi	r2,r2,-1
   20fc4:	e0fff817 	ldw	r3,-32(fp)
   20fc8:	1880022e 	bgeu	r3,r2,20fd4 <alt_avalon_i2c_master_receive+0x118>
   20fcc:	e0bff917 	ldw	r2,-28(fp)
   20fd0:	103fe126 	beq	r2,zero,20f58 <__alt_data_end+0xfc020f58>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20fd4:	e0bff917 	ldw	r2,-28(fp)
   20fd8:	1000121e 	bne	r2,zero,21024 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20fdc:	e0bfff03 	ldbu	r2,-4(fp)
   20fe0:	100f883a 	mov	r7,r2
   20fe4:	000d883a 	mov	r6,zero
   20fe8:	000b883a 	mov	r5,zero
   20fec:	e13ffb17 	ldw	r4,-20(fp)
   20ff0:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   20ff4:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   20ff8:	00000a06 	br	21024 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   20ffc:	e17ffc17 	ldw	r5,-16(fp)
   21000:	e13ffb17 	ldw	r4,-20(fp)
   21004:	00202480 	call	20248 <alt_avalon_i2c_rx_read>
   21008:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   2100c:	e0bffc17 	ldw	r2,-16(fp)
   21010:	10800044 	addi	r2,r2,1
   21014:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   21018:	e0bff717 	ldw	r2,-36(fp)
   2101c:	10800044 	addi	r2,r2,1
   21020:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   21024:	e0fff717 	ldw	r3,-36(fp)
   21028:	e0bffd17 	ldw	r2,-12(fp)
   2102c:	1880022e 	bgeu	r3,r2,21038 <alt_avalon_i2c_master_receive+0x17c>
   21030:	e0bff917 	ldw	r2,-28(fp)
   21034:	103ff126 	beq	r2,zero,20ffc <__alt_data_end+0xfc020ffc>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21038:	e0bfff03 	ldbu	r2,-4(fp)
   2103c:	1000021e 	bne	r2,zero,21048 <alt_avalon_i2c_master_receive+0x18c>
   21040:	e0bff917 	ldw	r2,-28(fp)
   21044:	10001b26 	beq	r2,zero,210b4 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   21048:	0149c404 	movi	r5,10000
   2104c:	e13ffd17 	ldw	r4,-12(fp)
   21050:	000ccac0 	call	ccac <__mulsi3>
   21054:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21058:	00000d06 	br	21090 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2105c:	e0bff617 	ldw	r2,-40(fp)
   21060:	108002a8 	cmpgeui	r2,r2,10
   21064:	1000021e 	bne	r2,zero,21070 <alt_avalon_i2c_master_receive+0x1b4>
   21068:	0109c404 	movi	r4,10000
   2106c:	002248c0 	call	2248c <alt_busy_sleep>
            if (--timeout == 0)
   21070:	e0bff617 	ldw	r2,-40(fp)
   21074:	10bfffc4 	addi	r2,r2,-1
   21078:	e0bff615 	stw	r2,-40(fp)
   2107c:	e0bff617 	ldw	r2,-40(fp)
   21080:	1000031e 	bne	r2,zero,21090 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21084:	00bfff84 	movi	r2,-2
   21088:	e0bff915 	stw	r2,-28(fp)
               break;
   2108c:	00000306 	br	2109c <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21090:	e13ffb17 	ldw	r4,-20(fp)
   21094:	002015c0 	call	2015c <alt_avalon_i2c_is_busy>
   21098:	103ff01e 	bne	r2,zero,2105c <__alt_data_end+0xfc02105c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   2109c:	e0bff904 	addi	r2,fp,-28
   210a0:	100b883a 	mov	r5,r2
   210a4:	e13ffb17 	ldw	r4,-20(fp)
   210a8:	00205300 	call	20530 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   210ac:	e13ffb17 	ldw	r4,-20(fp)
   210b0:	001fe040 	call	1fe04 <alt_avalon_i2c_disable>
    }

    return status;
   210b4:	e0bff917 	ldw	r2,-28(fp)
}
   210b8:	e037883a 	mov	sp,fp
   210bc:	dfc00117 	ldw	ra,4(sp)
   210c0:	df000017 	ldw	fp,0(sp)
   210c4:	dec00204 	addi	sp,sp,8
   210c8:	f800283a 	ret

000210cc <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   210cc:	defff504 	addi	sp,sp,-44
   210d0:	dfc00a15 	stw	ra,40(sp)
   210d4:	df000915 	stw	fp,36(sp)
   210d8:	df000904 	addi	fp,sp,36
   210dc:	e13ffb15 	stw	r4,-20(fp)
   210e0:	e17ffc15 	stw	r5,-16(fp)
   210e4:	e1bffd15 	stw	r6,-12(fp)
   210e8:	3807883a 	mov	r3,r7
   210ec:	e0800217 	ldw	r2,8(fp)
   210f0:	e0fffe05 	stb	r3,-8(fp)
   210f4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   210f8:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   210fc:	e0bffb17 	ldw	r2,-20(fp)
   21100:	10800717 	ldw	r2,28(r2)
   21104:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   21108:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   2110c:	e0bffd17 	ldw	r2,-12(fp)
   21110:	1000021e 	bne	r2,zero,2111c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21114:	0005883a 	mov	r2,zero
   21118:	00006306 	br	212a8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   2111c:	e0bffb17 	ldw	r2,-20(fp)
   21120:	10c00617 	ldw	r3,24(r2)
   21124:	008000b4 	movhi	r2,2
   21128:	10be7c04 	addi	r2,r2,-1552
   2112c:	18800226 	beq	r3,r2,21138 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   21130:	00bfff44 	movi	r2,-3
   21134:	00005c06 	br	212a8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21138:	e0bffe03 	ldbu	r2,-8(fp)
   2113c:	10000a1e 	bne	r2,zero,21168 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21140:	e13ffb17 	ldw	r4,-20(fp)
   21144:	001fd6c0 	call	1fd6c <alt_avalon_i2c_enable>
   21148:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2114c:	e0bff717 	ldw	r2,-36(fp)
   21150:	10000226 	beq	r2,zero,2115c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   21154:	e0bff717 	ldw	r2,-36(fp)
   21158:	00005306 	br	212a8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2115c:	01400704 	movi	r5,28
   21160:	e13ffb17 	ldw	r4,-20(fp)
   21164:	00213580 	call	21358 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   21168:	e0bffe03 	ldbu	r2,-8(fp)
   2116c:	100d883a 	mov	r6,r2
   21170:	01400044 	movi	r5,1
   21174:	e13ffb17 	ldw	r4,-20(fp)
   21178:	00203d40 	call	203d4 <alt_avalon_i2c_send_address>
   2117c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   21180:	e0bff717 	ldw	r2,-36(fp)
   21184:	1000191e 	bne	r2,zero,211ec <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21188:	00000906 	br	211b0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2118c:	000f883a 	mov	r7,zero
   21190:	000d883a 	mov	r6,zero
   21194:	000b883a 	mov	r5,zero
   21198:	e13ffb17 	ldw	r4,-20(fp)
   2119c:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   211a0:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   211a4:	e0bff917 	ldw	r2,-28(fp)
   211a8:	10800044 	addi	r2,r2,1
   211ac:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   211b0:	e0bffd17 	ldw	r2,-12(fp)
   211b4:	10bfffc4 	addi	r2,r2,-1
   211b8:	e0fff917 	ldw	r3,-28(fp)
   211bc:	1880022e 	bgeu	r3,r2,211c8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   211c0:	e0bff717 	ldw	r2,-36(fp)
   211c4:	103ff126 	beq	r2,zero,2118c <__alt_data_end+0xfc02118c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   211c8:	e0bff717 	ldw	r2,-36(fp)
   211cc:	1000071e 	bne	r2,zero,211ec <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   211d0:	e0bfff03 	ldbu	r2,-4(fp)
   211d4:	100f883a 	mov	r7,r2
   211d8:	000d883a 	mov	r6,zero
   211dc:	000b883a 	mov	r5,zero
   211e0:	e13ffb17 	ldw	r4,-20(fp)
   211e4:	00202f00 	call	202f0 <alt_avalon_i2c_cmd_write>
   211e8:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   211ec:	e0bff717 	ldw	r2,-36(fp)
   211f0:	10001826 	beq	r2,zero,21254 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   211f4:	0149c404 	movi	r5,10000
   211f8:	e13ffd17 	ldw	r4,-12(fp)
   211fc:	000ccac0 	call	ccac <__mulsi3>
   21200:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21204:	00000d06 	br	2123c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21208:	e0bff817 	ldw	r2,-32(fp)
   2120c:	108002a8 	cmpgeui	r2,r2,10
   21210:	1000021e 	bne	r2,zero,2121c <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   21214:	0109c404 	movi	r4,10000
   21218:	002248c0 	call	2248c <alt_busy_sleep>
            if (--timeout == 0)
   2121c:	e0bff817 	ldw	r2,-32(fp)
   21220:	10bfffc4 	addi	r2,r2,-1
   21224:	e0bff815 	stw	r2,-32(fp)
   21228:	e0bff817 	ldw	r2,-32(fp)
   2122c:	1000031e 	bne	r2,zero,2123c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21230:	00bfff84 	movi	r2,-2
   21234:	e0bff715 	stw	r2,-36(fp)
               break;
   21238:	00000306 	br	21248 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2123c:	e13ffb17 	ldw	r4,-20(fp)
   21240:	002015c0 	call	2015c <alt_avalon_i2c_is_busy>
   21244:	103ff01e 	bne	r2,zero,21208 <__alt_data_end+0xfc021208>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21248:	e13ffb17 	ldw	r4,-20(fp)
   2124c:	001fe040 	call	1fe04 <alt_avalon_i2c_disable>
   21250:	00001406 	br	212a4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   21254:	e0bfff03 	ldbu	r2,-4(fp)
   21258:	10001226 	beq	r2,zero,212a4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2125c:	01400704 	movi	r5,28
   21260:	e13ffb17 	ldw	r4,-20(fp)
   21264:	00213580 	call	21358 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   21268:	000b883a 	mov	r5,zero
   2126c:	e13ffb17 	ldw	r4,-20(fp)
   21270:	00214f00 	call	214f0 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   21274:	e0bffa17 	ldw	r2,-24(fp)
   21278:	00c00084 	movi	r3,2
   2127c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   21280:	e0bffa17 	ldw	r2,-24(fp)
   21284:	e0fffc17 	ldw	r3,-16(fp)
   21288:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   2128c:	e0bffa17 	ldw	r2,-24(fp)
   21290:	e0fffd17 	ldw	r3,-12(fp)
   21294:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   21298:	01400084 	movi	r5,2
   2129c:	e13ffb17 	ldw	r4,-20(fp)
   212a0:	00213fc0 	call	213fc <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   212a4:	e0bff717 	ldw	r2,-36(fp)
}
   212a8:	e037883a 	mov	sp,fp
   212ac:	dfc00117 	ldw	ra,4(sp)
   212b0:	df000017 	ldw	fp,0(sp)
   212b4:	dec00204 	addi	sp,sp,8
   212b8:	f800283a 	ret

000212bc <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   212bc:	defffd04 	addi	sp,sp,-12
   212c0:	df000215 	stw	fp,8(sp)
   212c4:	df000204 	addi	fp,sp,8
   212c8:	e13ffe15 	stw	r4,-8(fp)
   212cc:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   212d0:	e0bffe17 	ldw	r2,-8(fp)
   212d4:	10800317 	ldw	r2,12(r2)
   212d8:	10800404 	addi	r2,r2,16
   212dc:	10c00037 	ldwio	r3,0(r2)
   212e0:	e0bffe17 	ldw	r2,-8(fp)
   212e4:	10800317 	ldw	r2,12(r2)
   212e8:	10800304 	addi	r2,r2,12
   212ec:	10800037 	ldwio	r2,0(r2)
   212f0:	1884703a 	and	r2,r3,r2
   212f4:	1007883a 	mov	r3,r2
   212f8:	e0bfff17 	ldw	r2,-4(fp)
   212fc:	10c00015 	stw	r3,0(r2)
}
   21300:	0001883a 	nop
   21304:	e037883a 	mov	sp,fp
   21308:	df000017 	ldw	fp,0(sp)
   2130c:	dec00104 	addi	sp,sp,4
   21310:	f800283a 	ret

00021314 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   21314:	defffd04 	addi	sp,sp,-12
   21318:	df000215 	stw	fp,8(sp)
   2131c:	df000204 	addi	fp,sp,8
   21320:	e13ffe15 	stw	r4,-8(fp)
   21324:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   21328:	e0bffe17 	ldw	r2,-8(fp)
   2132c:	10800317 	ldw	r2,12(r2)
   21330:	10800404 	addi	r2,r2,16
   21334:	10800037 	ldwio	r2,0(r2)
   21338:	1007883a 	mov	r3,r2
   2133c:	e0bfff17 	ldw	r2,-4(fp)
   21340:	10c00015 	stw	r3,0(r2)
}
   21344:	0001883a 	nop
   21348:	e037883a 	mov	sp,fp
   2134c:	df000017 	ldw	fp,0(sp)
   21350:	dec00104 	addi	sp,sp,4
   21354:	f800283a 	ret

00021358 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   21358:	defffd04 	addi	sp,sp,-12
   2135c:	df000215 	stw	fp,8(sp)
   21360:	df000204 	addi	fp,sp,8
   21364:	e13ffe15 	stw	r4,-8(fp)
   21368:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   2136c:	e0bffe17 	ldw	r2,-8(fp)
   21370:	10800317 	ldw	r2,12(r2)
   21374:	10800404 	addi	r2,r2,16
   21378:	e0ffff17 	ldw	r3,-4(fp)
   2137c:	10c00035 	stwio	r3,0(r2)
}
   21380:	0001883a 	nop
   21384:	e037883a 	mov	sp,fp
   21388:	df000017 	ldw	fp,0(sp)
   2138c:	dec00104 	addi	sp,sp,4
   21390:	f800283a 	ret

00021394 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   21394:	defffb04 	addi	sp,sp,-20
   21398:	dfc00415 	stw	ra,16(sp)
   2139c:	df000315 	stw	fp,12(sp)
   213a0:	df000304 	addi	fp,sp,12
   213a4:	e13ffe15 	stw	r4,-8(fp)
   213a8:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   213ac:	e17ffd04 	addi	r5,fp,-12
   213b0:	e13ffe17 	ldw	r4,-8(fp)
   213b4:	00214600 	call	21460 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   213b8:	e0bfff17 	ldw	r2,-4(fp)
   213bc:	0086303a 	nor	r3,zero,r2
   213c0:	e0bffd17 	ldw	r2,-12(fp)
   213c4:	1884703a 	and	r2,r3,r2
   213c8:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   213cc:	e0bffe17 	ldw	r2,-8(fp)
   213d0:	10800317 	ldw	r2,12(r2)
   213d4:	10800304 	addi	r2,r2,12
   213d8:	e0fffd17 	ldw	r3,-12(fp)
   213dc:	18c007cc 	andi	r3,r3,31
   213e0:	10c00035 	stwio	r3,0(r2)
}
   213e4:	0001883a 	nop
   213e8:	e037883a 	mov	sp,fp
   213ec:	dfc00117 	ldw	ra,4(sp)
   213f0:	df000017 	ldw	fp,0(sp)
   213f4:	dec00204 	addi	sp,sp,8
   213f8:	f800283a 	ret

000213fc <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   213fc:	defffb04 	addi	sp,sp,-20
   21400:	dfc00415 	stw	ra,16(sp)
   21404:	df000315 	stw	fp,12(sp)
   21408:	df000304 	addi	fp,sp,12
   2140c:	e13ffe15 	stw	r4,-8(fp)
   21410:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   21414:	e17ffd04 	addi	r5,fp,-12
   21418:	e13ffe17 	ldw	r4,-8(fp)
   2141c:	00214600 	call	21460 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   21420:	e0fffd17 	ldw	r3,-12(fp)
   21424:	e0bfff17 	ldw	r2,-4(fp)
   21428:	1884b03a 	or	r2,r3,r2
   2142c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   21430:	e0bffe17 	ldw	r2,-8(fp)
   21434:	10800317 	ldw	r2,12(r2)
   21438:	10800304 	addi	r2,r2,12
   2143c:	e0fffd17 	ldw	r3,-12(fp)
   21440:	18c007cc 	andi	r3,r3,31
   21444:	10c00035 	stwio	r3,0(r2)
}
   21448:	0001883a 	nop
   2144c:	e037883a 	mov	sp,fp
   21450:	dfc00117 	ldw	ra,4(sp)
   21454:	df000017 	ldw	fp,0(sp)
   21458:	dec00204 	addi	sp,sp,8
   2145c:	f800283a 	ret

00021460 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   21460:	defffd04 	addi	sp,sp,-12
   21464:	df000215 	stw	fp,8(sp)
   21468:	df000204 	addi	fp,sp,8
   2146c:	e13ffe15 	stw	r4,-8(fp)
   21470:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   21474:	e0bffe17 	ldw	r2,-8(fp)
   21478:	10800317 	ldw	r2,12(r2)
   2147c:	10800304 	addi	r2,r2,12
   21480:	10800037 	ldwio	r2,0(r2)
   21484:	10c007cc 	andi	r3,r2,31
   21488:	e0bfff17 	ldw	r2,-4(fp)
   2148c:	10c00015 	stw	r3,0(r2)
}
   21490:	0001883a 	nop
   21494:	e037883a 	mov	sp,fp
   21498:	df000017 	ldw	fp,0(sp)
   2149c:	dec00104 	addi	sp,sp,4
   214a0:	f800283a 	ret

000214a4 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   214a4:	defffd04 	addi	sp,sp,-12
   214a8:	df000215 	stw	fp,8(sp)
   214ac:	df000204 	addi	fp,sp,8
   214b0:	e13ffe15 	stw	r4,-8(fp)
   214b4:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   214b8:	e0bffe17 	ldw	r2,-8(fp)
   214bc:	10800317 	ldw	r2,12(r2)
   214c0:	10800204 	addi	r2,r2,8
   214c4:	10800037 	ldwio	r2,0(r2)
   214c8:	10800c0c 	andi	r2,r2,48
   214cc:	1005d13a 	srai	r2,r2,4
   214d0:	1007883a 	mov	r3,r2
   214d4:	e0bfff17 	ldw	r2,-4(fp)
   214d8:	10c00015 	stw	r3,0(r2)
}
   214dc:	0001883a 	nop
   214e0:	e037883a 	mov	sp,fp
   214e4:	df000017 	ldw	fp,0(sp)
   214e8:	dec00104 	addi	sp,sp,4
   214ec:	f800283a 	ret

000214f0 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   214f0:	defffd04 	addi	sp,sp,-12
   214f4:	df000215 	stw	fp,8(sp)
   214f8:	df000204 	addi	fp,sp,8
   214fc:	e13ffe15 	stw	r4,-8(fp)
   21500:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   21504:	e0bffe17 	ldw	r2,-8(fp)
   21508:	10800317 	ldw	r2,12(r2)
   2150c:	10800204 	addi	r2,r2,8
   21510:	e0fffe17 	ldw	r3,-8(fp)
   21514:	18c00317 	ldw	r3,12(r3)
   21518:	18c00204 	addi	r3,r3,8
   2151c:	18c00037 	ldwio	r3,0(r3)
   21520:	1809883a 	mov	r4,r3
   21524:	00fff3c4 	movi	r3,-49
   21528:	20c8703a 	and	r4,r4,r3
   2152c:	e0ffff17 	ldw	r3,-4(fp)
   21530:	1806913a 	slli	r3,r3,4
   21534:	18c00c0c 	andi	r3,r3,48
   21538:	20c6b03a 	or	r3,r4,r3
   2153c:	10c00035 	stwio	r3,0(r2)
}
   21540:	0001883a 	nop
   21544:	e037883a 	mov	sp,fp
   21548:	df000017 	ldw	fp,0(sp)
   2154c:	dec00104 	addi	sp,sp,4
   21550:	f800283a 	ret

00021554 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   21554:	defffd04 	addi	sp,sp,-12
   21558:	df000215 	stw	fp,8(sp)
   2155c:	df000204 	addi	fp,sp,8
   21560:	e13ffe15 	stw	r4,-8(fp)
   21564:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   21568:	e0bffe17 	ldw	r2,-8(fp)
   2156c:	10800317 	ldw	r2,12(r2)
   21570:	10800204 	addi	r2,r2,8
   21574:	10800037 	ldwio	r2,0(r2)
   21578:	1080030c 	andi	r2,r2,12
   2157c:	1005d0ba 	srai	r2,r2,2
   21580:	1007883a 	mov	r3,r2
   21584:	e0bfff17 	ldw	r2,-4(fp)
   21588:	10c00015 	stw	r3,0(r2)
}
   2158c:	0001883a 	nop
   21590:	e037883a 	mov	sp,fp
   21594:	df000017 	ldw	fp,0(sp)
   21598:	dec00104 	addi	sp,sp,4
   2159c:	f800283a 	ret

000215a0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   215a0:	defffd04 	addi	sp,sp,-12
   215a4:	df000215 	stw	fp,8(sp)
   215a8:	df000204 	addi	fp,sp,8
   215ac:	e13ffe15 	stw	r4,-8(fp)
   215b0:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   215b4:	e0bffe17 	ldw	r2,-8(fp)
   215b8:	10800317 	ldw	r2,12(r2)
   215bc:	10c00204 	addi	r3,r2,8
   215c0:	e0bffe17 	ldw	r2,-8(fp)
   215c4:	10800317 	ldw	r2,12(r2)
   215c8:	10800204 	addi	r2,r2,8
   215cc:	10800037 	ldwio	r2,0(r2)
   215d0:	1009883a 	mov	r4,r2
   215d4:	00bffcc4 	movi	r2,-13
   215d8:	2088703a 	and	r4,r4,r2
   215dc:	e0bfff17 	ldw	r2,-4(fp)
   215e0:	1085883a 	add	r2,r2,r2
   215e4:	1085883a 	add	r2,r2,r2
   215e8:	1080030c 	andi	r2,r2,12
   215ec:	2084b03a 	or	r2,r4,r2
   215f0:	18800035 	stwio	r2,0(r3)
}
   215f4:	0001883a 	nop
   215f8:	e037883a 	mov	sp,fp
   215fc:	df000017 	ldw	fp,0(sp)
   21600:	dec00104 	addi	sp,sp,4
   21604:	f800283a 	ret

00021608 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   21608:	defffa04 	addi	sp,sp,-24
   2160c:	dfc00515 	stw	ra,20(sp)
   21610:	df000415 	stw	fp,16(sp)
   21614:	df000404 	addi	fp,sp,16
   21618:	e13ffd15 	stw	r4,-12(fp)
   2161c:	e17ffe15 	stw	r5,-8(fp)
   21620:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21624:	e0bffd17 	ldw	r2,-12(fp)
   21628:	10800017 	ldw	r2,0(r2)
   2162c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   21630:	e0bffc17 	ldw	r2,-16(fp)
   21634:	10c00a04 	addi	r3,r2,40
   21638:	e0bffd17 	ldw	r2,-12(fp)
   2163c:	10800217 	ldw	r2,8(r2)
   21640:	100f883a 	mov	r7,r2
   21644:	e1bfff17 	ldw	r6,-4(fp)
   21648:	e17ffe17 	ldw	r5,-8(fp)
   2164c:	1809883a 	mov	r4,r3
   21650:	0021c300 	call	21c30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   21654:	e037883a 	mov	sp,fp
   21658:	dfc00117 	ldw	ra,4(sp)
   2165c:	df000017 	ldw	fp,0(sp)
   21660:	dec00204 	addi	sp,sp,8
   21664:	f800283a 	ret

00021668 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21668:	defffa04 	addi	sp,sp,-24
   2166c:	dfc00515 	stw	ra,20(sp)
   21670:	df000415 	stw	fp,16(sp)
   21674:	df000404 	addi	fp,sp,16
   21678:	e13ffd15 	stw	r4,-12(fp)
   2167c:	e17ffe15 	stw	r5,-8(fp)
   21680:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21684:	e0bffd17 	ldw	r2,-12(fp)
   21688:	10800017 	ldw	r2,0(r2)
   2168c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   21690:	e0bffc17 	ldw	r2,-16(fp)
   21694:	10c00a04 	addi	r3,r2,40
   21698:	e0bffd17 	ldw	r2,-12(fp)
   2169c:	10800217 	ldw	r2,8(r2)
   216a0:	100f883a 	mov	r7,r2
   216a4:	e1bfff17 	ldw	r6,-4(fp)
   216a8:	e17ffe17 	ldw	r5,-8(fp)
   216ac:	1809883a 	mov	r4,r3
   216b0:	0021e4c0 	call	21e4c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   216b4:	e037883a 	mov	sp,fp
   216b8:	dfc00117 	ldw	ra,4(sp)
   216bc:	df000017 	ldw	fp,0(sp)
   216c0:	dec00204 	addi	sp,sp,8
   216c4:	f800283a 	ret

000216c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   216c8:	defffc04 	addi	sp,sp,-16
   216cc:	dfc00315 	stw	ra,12(sp)
   216d0:	df000215 	stw	fp,8(sp)
   216d4:	df000204 	addi	fp,sp,8
   216d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   216dc:	e0bfff17 	ldw	r2,-4(fp)
   216e0:	10800017 	ldw	r2,0(r2)
   216e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   216e8:	e0bffe17 	ldw	r2,-8(fp)
   216ec:	10c00a04 	addi	r3,r2,40
   216f0:	e0bfff17 	ldw	r2,-4(fp)
   216f4:	10800217 	ldw	r2,8(r2)
   216f8:	100b883a 	mov	r5,r2
   216fc:	1809883a 	mov	r4,r3
   21700:	0021ad80 	call	21ad8 <altera_avalon_jtag_uart_close>
}
   21704:	e037883a 	mov	sp,fp
   21708:	dfc00117 	ldw	ra,4(sp)
   2170c:	df000017 	ldw	fp,0(sp)
   21710:	dec00204 	addi	sp,sp,8
   21714:	f800283a 	ret

00021718 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   21718:	defffa04 	addi	sp,sp,-24
   2171c:	dfc00515 	stw	ra,20(sp)
   21720:	df000415 	stw	fp,16(sp)
   21724:	df000404 	addi	fp,sp,16
   21728:	e13ffd15 	stw	r4,-12(fp)
   2172c:	e17ffe15 	stw	r5,-8(fp)
   21730:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   21734:	e0bffd17 	ldw	r2,-12(fp)
   21738:	10800017 	ldw	r2,0(r2)
   2173c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   21740:	e0bffc17 	ldw	r2,-16(fp)
   21744:	10800a04 	addi	r2,r2,40
   21748:	e1bfff17 	ldw	r6,-4(fp)
   2174c:	e17ffe17 	ldw	r5,-8(fp)
   21750:	1009883a 	mov	r4,r2
   21754:	0021b400 	call	21b40 <altera_avalon_jtag_uart_ioctl>
}
   21758:	e037883a 	mov	sp,fp
   2175c:	dfc00117 	ldw	ra,4(sp)
   21760:	df000017 	ldw	fp,0(sp)
   21764:	dec00204 	addi	sp,sp,8
   21768:	f800283a 	ret

0002176c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2176c:	defffa04 	addi	sp,sp,-24
   21770:	dfc00515 	stw	ra,20(sp)
   21774:	df000415 	stw	fp,16(sp)
   21778:	df000404 	addi	fp,sp,16
   2177c:	e13ffd15 	stw	r4,-12(fp)
   21780:	e17ffe15 	stw	r5,-8(fp)
   21784:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21788:	e0bffd17 	ldw	r2,-12(fp)
   2178c:	00c00044 	movi	r3,1
   21790:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   21794:	e0bffd17 	ldw	r2,-12(fp)
   21798:	10800017 	ldw	r2,0(r2)
   2179c:	10800104 	addi	r2,r2,4
   217a0:	1007883a 	mov	r3,r2
   217a4:	e0bffd17 	ldw	r2,-12(fp)
   217a8:	10800817 	ldw	r2,32(r2)
   217ac:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   217b0:	e0bffe17 	ldw	r2,-8(fp)
   217b4:	e0ffff17 	ldw	r3,-4(fp)
   217b8:	d8000015 	stw	zero,0(sp)
   217bc:	e1fffd17 	ldw	r7,-12(fp)
   217c0:	018000b4 	movhi	r6,2
   217c4:	31860b04 	addi	r6,r6,6188
   217c8:	180b883a 	mov	r5,r3
   217cc:	1009883a 	mov	r4,r2
   217d0:	00228540 	call	22854 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   217d4:	e0bffd17 	ldw	r2,-12(fp)
   217d8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   217dc:	e0bffd17 	ldw	r2,-12(fp)
   217e0:	10800204 	addi	r2,r2,8
   217e4:	d0f24f17 	ldw	r3,-14020(gp)
   217e8:	e1fffd17 	ldw	r7,-12(fp)
   217ec:	018000b4 	movhi	r6,2
   217f0:	31868e04 	addi	r6,r6,6712
   217f4:	180b883a 	mov	r5,r3
   217f8:	1009883a 	mov	r4,r2
   217fc:	00223600 	call	22360 <alt_alarm_start>
   21800:	1000040e 	bge	r2,zero,21814 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   21804:	e0fffd17 	ldw	r3,-12(fp)
   21808:	00a00034 	movhi	r2,32768
   2180c:	10bfffc4 	addi	r2,r2,-1
   21810:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   21814:	0001883a 	nop
   21818:	e037883a 	mov	sp,fp
   2181c:	dfc00117 	ldw	ra,4(sp)
   21820:	df000017 	ldw	fp,0(sp)
   21824:	dec00204 	addi	sp,sp,8
   21828:	f800283a 	ret

0002182c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2182c:	defff804 	addi	sp,sp,-32
   21830:	df000715 	stw	fp,28(sp)
   21834:	df000704 	addi	fp,sp,28
   21838:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2183c:	e0bfff17 	ldw	r2,-4(fp)
   21840:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   21844:	e0bffb17 	ldw	r2,-20(fp)
   21848:	10800017 	ldw	r2,0(r2)
   2184c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21850:	e0bffc17 	ldw	r2,-16(fp)
   21854:	10800104 	addi	r2,r2,4
   21858:	10800037 	ldwio	r2,0(r2)
   2185c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   21860:	e0bffd17 	ldw	r2,-12(fp)
   21864:	1080c00c 	andi	r2,r2,768
   21868:	10006d26 	beq	r2,zero,21a20 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2186c:	e0bffd17 	ldw	r2,-12(fp)
   21870:	1080400c 	andi	r2,r2,256
   21874:	10003526 	beq	r2,zero,2194c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   21878:	00800074 	movhi	r2,1
   2187c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21880:	e0bffb17 	ldw	r2,-20(fp)
   21884:	10800a17 	ldw	r2,40(r2)
   21888:	10800044 	addi	r2,r2,1
   2188c:	1081ffcc 	andi	r2,r2,2047
   21890:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   21894:	e0bffb17 	ldw	r2,-20(fp)
   21898:	10c00b17 	ldw	r3,44(r2)
   2189c:	e0bffe17 	ldw	r2,-8(fp)
   218a0:	18801526 	beq	r3,r2,218f8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   218a4:	e0bffc17 	ldw	r2,-16(fp)
   218a8:	10800037 	ldwio	r2,0(r2)
   218ac:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   218b0:	e0bff917 	ldw	r2,-28(fp)
   218b4:	10a0000c 	andi	r2,r2,32768
   218b8:	10001126 	beq	r2,zero,21900 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   218bc:	e0bffb17 	ldw	r2,-20(fp)
   218c0:	10800a17 	ldw	r2,40(r2)
   218c4:	e0fff917 	ldw	r3,-28(fp)
   218c8:	1809883a 	mov	r4,r3
   218cc:	e0fffb17 	ldw	r3,-20(fp)
   218d0:	1885883a 	add	r2,r3,r2
   218d4:	10800e04 	addi	r2,r2,56
   218d8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   218dc:	e0bffb17 	ldw	r2,-20(fp)
   218e0:	10800a17 	ldw	r2,40(r2)
   218e4:	10800044 	addi	r2,r2,1
   218e8:	10c1ffcc 	andi	r3,r2,2047
   218ec:	e0bffb17 	ldw	r2,-20(fp)
   218f0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   218f4:	003fe206 	br	21880 <__alt_data_end+0xfc021880>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   218f8:	0001883a 	nop
   218fc:	00000106 	br	21904 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   21900:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   21904:	e0bff917 	ldw	r2,-28(fp)
   21908:	10bfffec 	andhi	r2,r2,65535
   2190c:	10000f26 	beq	r2,zero,2194c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21910:	e0bffb17 	ldw	r2,-20(fp)
   21914:	10c00817 	ldw	r3,32(r2)
   21918:	00bfff84 	movi	r2,-2
   2191c:	1886703a 	and	r3,r3,r2
   21920:	e0bffb17 	ldw	r2,-20(fp)
   21924:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   21928:	e0bffc17 	ldw	r2,-16(fp)
   2192c:	10800104 	addi	r2,r2,4
   21930:	1007883a 	mov	r3,r2
   21934:	e0bffb17 	ldw	r2,-20(fp)
   21938:	10800817 	ldw	r2,32(r2)
   2193c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21940:	e0bffc17 	ldw	r2,-16(fp)
   21944:	10800104 	addi	r2,r2,4
   21948:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2194c:	e0bffd17 	ldw	r2,-12(fp)
   21950:	1080800c 	andi	r2,r2,512
   21954:	103fbe26 	beq	r2,zero,21850 <__alt_data_end+0xfc021850>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   21958:	e0bffd17 	ldw	r2,-12(fp)
   2195c:	1004d43a 	srli	r2,r2,16
   21960:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   21964:	00001406 	br	219b8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   21968:	e0bffc17 	ldw	r2,-16(fp)
   2196c:	e0fffb17 	ldw	r3,-20(fp)
   21970:	18c00d17 	ldw	r3,52(r3)
   21974:	e13ffb17 	ldw	r4,-20(fp)
   21978:	20c7883a 	add	r3,r4,r3
   2197c:	18c20e04 	addi	r3,r3,2104
   21980:	18c00003 	ldbu	r3,0(r3)
   21984:	18c03fcc 	andi	r3,r3,255
   21988:	18c0201c 	xori	r3,r3,128
   2198c:	18ffe004 	addi	r3,r3,-128
   21990:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21994:	e0bffb17 	ldw	r2,-20(fp)
   21998:	10800d17 	ldw	r2,52(r2)
   2199c:	10800044 	addi	r2,r2,1
   219a0:	10c1ffcc 	andi	r3,r2,2047
   219a4:	e0bffb17 	ldw	r2,-20(fp)
   219a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   219ac:	e0bffa17 	ldw	r2,-24(fp)
   219b0:	10bfffc4 	addi	r2,r2,-1
   219b4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   219b8:	e0bffa17 	ldw	r2,-24(fp)
   219bc:	10000526 	beq	r2,zero,219d4 <altera_avalon_jtag_uart_irq+0x1a8>
   219c0:	e0bffb17 	ldw	r2,-20(fp)
   219c4:	10c00d17 	ldw	r3,52(r2)
   219c8:	e0bffb17 	ldw	r2,-20(fp)
   219cc:	10800c17 	ldw	r2,48(r2)
   219d0:	18bfe51e 	bne	r3,r2,21968 <__alt_data_end+0xfc021968>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   219d4:	e0bffa17 	ldw	r2,-24(fp)
   219d8:	103f9d26 	beq	r2,zero,21850 <__alt_data_end+0xfc021850>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   219dc:	e0bffb17 	ldw	r2,-20(fp)
   219e0:	10c00817 	ldw	r3,32(r2)
   219e4:	00bfff44 	movi	r2,-3
   219e8:	1886703a 	and	r3,r3,r2
   219ec:	e0bffb17 	ldw	r2,-20(fp)
   219f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   219f4:	e0bffb17 	ldw	r2,-20(fp)
   219f8:	10800017 	ldw	r2,0(r2)
   219fc:	10800104 	addi	r2,r2,4
   21a00:	1007883a 	mov	r3,r2
   21a04:	e0bffb17 	ldw	r2,-20(fp)
   21a08:	10800817 	ldw	r2,32(r2)
   21a0c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21a10:	e0bffc17 	ldw	r2,-16(fp)
   21a14:	10800104 	addi	r2,r2,4
   21a18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   21a1c:	003f8c06 	br	21850 <__alt_data_end+0xfc021850>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   21a20:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   21a24:	0001883a 	nop
   21a28:	e037883a 	mov	sp,fp
   21a2c:	df000017 	ldw	fp,0(sp)
   21a30:	dec00104 	addi	sp,sp,4
   21a34:	f800283a 	ret

00021a38 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   21a38:	defff804 	addi	sp,sp,-32
   21a3c:	df000715 	stw	fp,28(sp)
   21a40:	df000704 	addi	fp,sp,28
   21a44:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   21a48:	e0bffb17 	ldw	r2,-20(fp)
   21a4c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   21a50:	e0bff917 	ldw	r2,-28(fp)
   21a54:	10800017 	ldw	r2,0(r2)
   21a58:	10800104 	addi	r2,r2,4
   21a5c:	10800037 	ldwio	r2,0(r2)
   21a60:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   21a64:	e0bffa17 	ldw	r2,-24(fp)
   21a68:	1081000c 	andi	r2,r2,1024
   21a6c:	10000b26 	beq	r2,zero,21a9c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   21a70:	e0bff917 	ldw	r2,-28(fp)
   21a74:	10800017 	ldw	r2,0(r2)
   21a78:	10800104 	addi	r2,r2,4
   21a7c:	1007883a 	mov	r3,r2
   21a80:	e0bff917 	ldw	r2,-28(fp)
   21a84:	10800817 	ldw	r2,32(r2)
   21a88:	10810014 	ori	r2,r2,1024
   21a8c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   21a90:	e0bff917 	ldw	r2,-28(fp)
   21a94:	10000915 	stw	zero,36(r2)
   21a98:	00000a06 	br	21ac4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21a9c:	e0bff917 	ldw	r2,-28(fp)
   21aa0:	10c00917 	ldw	r3,36(r2)
   21aa4:	00a00034 	movhi	r2,32768
   21aa8:	10bfff04 	addi	r2,r2,-4
   21aac:	10c00536 	bltu	r2,r3,21ac4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   21ab0:	e0bff917 	ldw	r2,-28(fp)
   21ab4:	10800917 	ldw	r2,36(r2)
   21ab8:	10c00044 	addi	r3,r2,1
   21abc:	e0bff917 	ldw	r2,-28(fp)
   21ac0:	10c00915 	stw	r3,36(r2)
   21ac4:	d0b24f17 	ldw	r2,-14020(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   21ac8:	e037883a 	mov	sp,fp
   21acc:	df000017 	ldw	fp,0(sp)
   21ad0:	dec00104 	addi	sp,sp,4
   21ad4:	f800283a 	ret

00021ad8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   21ad8:	defffd04 	addi	sp,sp,-12
   21adc:	df000215 	stw	fp,8(sp)
   21ae0:	df000204 	addi	fp,sp,8
   21ae4:	e13ffe15 	stw	r4,-8(fp)
   21ae8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21aec:	00000506 	br	21b04 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21af0:	e0bfff17 	ldw	r2,-4(fp)
   21af4:	1090000c 	andi	r2,r2,16384
   21af8:	10000226 	beq	r2,zero,21b04 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21afc:	00bffd44 	movi	r2,-11
   21b00:	00000b06 	br	21b30 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21b04:	e0bffe17 	ldw	r2,-8(fp)
   21b08:	10c00d17 	ldw	r3,52(r2)
   21b0c:	e0bffe17 	ldw	r2,-8(fp)
   21b10:	10800c17 	ldw	r2,48(r2)
   21b14:	18800526 	beq	r3,r2,21b2c <altera_avalon_jtag_uart_close+0x54>
   21b18:	e0bffe17 	ldw	r2,-8(fp)
   21b1c:	10c00917 	ldw	r3,36(r2)
   21b20:	e0bffe17 	ldw	r2,-8(fp)
   21b24:	10800117 	ldw	r2,4(r2)
   21b28:	18bff136 	bltu	r3,r2,21af0 <__alt_data_end+0xfc021af0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21b2c:	0005883a 	mov	r2,zero
}
   21b30:	e037883a 	mov	sp,fp
   21b34:	df000017 	ldw	fp,0(sp)
   21b38:	dec00104 	addi	sp,sp,4
   21b3c:	f800283a 	ret

00021b40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   21b40:	defffa04 	addi	sp,sp,-24
   21b44:	df000515 	stw	fp,20(sp)
   21b48:	df000504 	addi	fp,sp,20
   21b4c:	e13ffd15 	stw	r4,-12(fp)
   21b50:	e17ffe15 	stw	r5,-8(fp)
   21b54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   21b58:	00bff9c4 	movi	r2,-25
   21b5c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   21b60:	e0bffe17 	ldw	r2,-8(fp)
   21b64:	10da8060 	cmpeqi	r3,r2,27137
   21b68:	1800031e 	bne	r3,zero,21b78 <altera_avalon_jtag_uart_ioctl+0x38>
   21b6c:	109a80a0 	cmpeqi	r2,r2,27138
   21b70:	1000181e 	bne	r2,zero,21bd4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   21b74:	00002906 	br	21c1c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   21b78:	e0bffd17 	ldw	r2,-12(fp)
   21b7c:	10c00117 	ldw	r3,4(r2)
   21b80:	00a00034 	movhi	r2,32768
   21b84:	10bfffc4 	addi	r2,r2,-1
   21b88:	18802126 	beq	r3,r2,21c10 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   21b8c:	e0bfff17 	ldw	r2,-4(fp)
   21b90:	10800017 	ldw	r2,0(r2)
   21b94:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   21b98:	e0bffc17 	ldw	r2,-16(fp)
   21b9c:	10800090 	cmplti	r2,r2,2
   21ba0:	1000061e 	bne	r2,zero,21bbc <altera_avalon_jtag_uart_ioctl+0x7c>
   21ba4:	e0fffc17 	ldw	r3,-16(fp)
   21ba8:	00a00034 	movhi	r2,32768
   21bac:	10bfffc4 	addi	r2,r2,-1
   21bb0:	18800226 	beq	r3,r2,21bbc <altera_avalon_jtag_uart_ioctl+0x7c>
   21bb4:	e0bffc17 	ldw	r2,-16(fp)
   21bb8:	00000206 	br	21bc4 <altera_avalon_jtag_uart_ioctl+0x84>
   21bbc:	00a00034 	movhi	r2,32768
   21bc0:	10bfff84 	addi	r2,r2,-2
   21bc4:	e0fffd17 	ldw	r3,-12(fp)
   21bc8:	18800115 	stw	r2,4(r3)
      rc = 0;
   21bcc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21bd0:	00000f06 	br	21c10 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   21bd4:	e0bffd17 	ldw	r2,-12(fp)
   21bd8:	10c00117 	ldw	r3,4(r2)
   21bdc:	00a00034 	movhi	r2,32768
   21be0:	10bfffc4 	addi	r2,r2,-1
   21be4:	18800c26 	beq	r3,r2,21c18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   21be8:	e0bffd17 	ldw	r2,-12(fp)
   21bec:	10c00917 	ldw	r3,36(r2)
   21bf0:	e0bffd17 	ldw	r2,-12(fp)
   21bf4:	10800117 	ldw	r2,4(r2)
   21bf8:	1885803a 	cmpltu	r2,r3,r2
   21bfc:	10c03fcc 	andi	r3,r2,255
   21c00:	e0bfff17 	ldw	r2,-4(fp)
   21c04:	10c00015 	stw	r3,0(r2)
      rc = 0;
   21c08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21c0c:	00000206 	br	21c18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   21c10:	0001883a 	nop
   21c14:	00000106 	br	21c1c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   21c18:	0001883a 	nop

  default:
    break;
  }

  return rc;
   21c1c:	e0bffb17 	ldw	r2,-20(fp)
}
   21c20:	e037883a 	mov	sp,fp
   21c24:	df000017 	ldw	fp,0(sp)
   21c28:	dec00104 	addi	sp,sp,4
   21c2c:	f800283a 	ret

00021c30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   21c30:	defff304 	addi	sp,sp,-52
   21c34:	dfc00c15 	stw	ra,48(sp)
   21c38:	df000b15 	stw	fp,44(sp)
   21c3c:	df000b04 	addi	fp,sp,44
   21c40:	e13ffc15 	stw	r4,-16(fp)
   21c44:	e17ffd15 	stw	r5,-12(fp)
   21c48:	e1bffe15 	stw	r6,-8(fp)
   21c4c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   21c50:	e0bffd17 	ldw	r2,-12(fp)
   21c54:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21c58:	00004706 	br	21d78 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   21c5c:	e0bffc17 	ldw	r2,-16(fp)
   21c60:	10800a17 	ldw	r2,40(r2)
   21c64:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   21c68:	e0bffc17 	ldw	r2,-16(fp)
   21c6c:	10800b17 	ldw	r2,44(r2)
   21c70:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   21c74:	e0fff717 	ldw	r3,-36(fp)
   21c78:	e0bff817 	ldw	r2,-32(fp)
   21c7c:	18800536 	bltu	r3,r2,21c94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   21c80:	e0fff717 	ldw	r3,-36(fp)
   21c84:	e0bff817 	ldw	r2,-32(fp)
   21c88:	1885c83a 	sub	r2,r3,r2
   21c8c:	e0bff615 	stw	r2,-40(fp)
   21c90:	00000406 	br	21ca4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   21c94:	00c20004 	movi	r3,2048
   21c98:	e0bff817 	ldw	r2,-32(fp)
   21c9c:	1885c83a 	sub	r2,r3,r2
   21ca0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21ca4:	e0bff617 	ldw	r2,-40(fp)
   21ca8:	10001e26 	beq	r2,zero,21d24 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   21cac:	e0fffe17 	ldw	r3,-8(fp)
   21cb0:	e0bff617 	ldw	r2,-40(fp)
   21cb4:	1880022e 	bgeu	r3,r2,21cc0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   21cb8:	e0bffe17 	ldw	r2,-8(fp)
   21cbc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   21cc0:	e0bffc17 	ldw	r2,-16(fp)
   21cc4:	10c00e04 	addi	r3,r2,56
   21cc8:	e0bff817 	ldw	r2,-32(fp)
   21ccc:	1885883a 	add	r2,r3,r2
   21cd0:	e1bff617 	ldw	r6,-40(fp)
   21cd4:	100b883a 	mov	r5,r2
   21cd8:	e13ff517 	ldw	r4,-44(fp)
   21cdc:	000ea600 	call	ea60 <memcpy>
      ptr   += n;
   21ce0:	e0fff517 	ldw	r3,-44(fp)
   21ce4:	e0bff617 	ldw	r2,-40(fp)
   21ce8:	1885883a 	add	r2,r3,r2
   21cec:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   21cf0:	e0fffe17 	ldw	r3,-8(fp)
   21cf4:	e0bff617 	ldw	r2,-40(fp)
   21cf8:	1885c83a 	sub	r2,r3,r2
   21cfc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21d00:	e0fff817 	ldw	r3,-32(fp)
   21d04:	e0bff617 	ldw	r2,-40(fp)
   21d08:	1885883a 	add	r2,r3,r2
   21d0c:	10c1ffcc 	andi	r3,r2,2047
   21d10:	e0bffc17 	ldw	r2,-16(fp)
   21d14:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   21d18:	e0bffe17 	ldw	r2,-8(fp)
   21d1c:	00bfcf16 	blt	zero,r2,21c5c <__alt_data_end+0xfc021c5c>
   21d20:	00000106 	br	21d28 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   21d24:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   21d28:	e0fff517 	ldw	r3,-44(fp)
   21d2c:	e0bffd17 	ldw	r2,-12(fp)
   21d30:	1880141e 	bne	r3,r2,21d84 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   21d34:	e0bfff17 	ldw	r2,-4(fp)
   21d38:	1090000c 	andi	r2,r2,16384
   21d3c:	1000131e 	bne	r2,zero,21d8c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   21d40:	0001883a 	nop
   21d44:	e0bffc17 	ldw	r2,-16(fp)
   21d48:	10c00a17 	ldw	r3,40(r2)
   21d4c:	e0bff717 	ldw	r2,-36(fp)
   21d50:	1880051e 	bne	r3,r2,21d68 <altera_avalon_jtag_uart_read+0x138>
   21d54:	e0bffc17 	ldw	r2,-16(fp)
   21d58:	10c00917 	ldw	r3,36(r2)
   21d5c:	e0bffc17 	ldw	r2,-16(fp)
   21d60:	10800117 	ldw	r2,4(r2)
   21d64:	18bff736 	bltu	r3,r2,21d44 <__alt_data_end+0xfc021d44>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   21d68:	e0bffc17 	ldw	r2,-16(fp)
   21d6c:	10c00a17 	ldw	r3,40(r2)
   21d70:	e0bff717 	ldw	r2,-36(fp)
   21d74:	18800726 	beq	r3,r2,21d94 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21d78:	e0bffe17 	ldw	r2,-8(fp)
   21d7c:	00bfb716 	blt	zero,r2,21c5c <__alt_data_end+0xfc021c5c>
   21d80:	00000506 	br	21d98 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   21d84:	0001883a 	nop
   21d88:	00000306 	br	21d98 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   21d8c:	0001883a 	nop
   21d90:	00000106 	br	21d98 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   21d94:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   21d98:	e0fff517 	ldw	r3,-44(fp)
   21d9c:	e0bffd17 	ldw	r2,-12(fp)
   21da0:	18801826 	beq	r3,r2,21e04 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21da4:	0005303a 	rdctl	r2,status
   21da8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21dac:	e0fffb17 	ldw	r3,-20(fp)
   21db0:	00bfff84 	movi	r2,-2
   21db4:	1884703a 	and	r2,r3,r2
   21db8:	1001703a 	wrctl	status,r2
  
  return context;
   21dbc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   21dc0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21dc4:	e0bffc17 	ldw	r2,-16(fp)
   21dc8:	10800817 	ldw	r2,32(r2)
   21dcc:	10c00054 	ori	r3,r2,1
   21dd0:	e0bffc17 	ldw	r2,-16(fp)
   21dd4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21dd8:	e0bffc17 	ldw	r2,-16(fp)
   21ddc:	10800017 	ldw	r2,0(r2)
   21de0:	10800104 	addi	r2,r2,4
   21de4:	1007883a 	mov	r3,r2
   21de8:	e0bffc17 	ldw	r2,-16(fp)
   21dec:	10800817 	ldw	r2,32(r2)
   21df0:	18800035 	stwio	r2,0(r3)
   21df4:	e0bffa17 	ldw	r2,-24(fp)
   21df8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21dfc:	e0bff917 	ldw	r2,-28(fp)
   21e00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   21e04:	e0fff517 	ldw	r3,-44(fp)
   21e08:	e0bffd17 	ldw	r2,-12(fp)
   21e0c:	18800426 	beq	r3,r2,21e20 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   21e10:	e0fff517 	ldw	r3,-44(fp)
   21e14:	e0bffd17 	ldw	r2,-12(fp)
   21e18:	1885c83a 	sub	r2,r3,r2
   21e1c:	00000606 	br	21e38 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   21e20:	e0bfff17 	ldw	r2,-4(fp)
   21e24:	1090000c 	andi	r2,r2,16384
   21e28:	10000226 	beq	r2,zero,21e34 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   21e2c:	00bffd44 	movi	r2,-11
   21e30:	00000106 	br	21e38 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   21e34:	00bffec4 	movi	r2,-5
}
   21e38:	e037883a 	mov	sp,fp
   21e3c:	dfc00117 	ldw	ra,4(sp)
   21e40:	df000017 	ldw	fp,0(sp)
   21e44:	dec00204 	addi	sp,sp,8
   21e48:	f800283a 	ret

00021e4c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   21e4c:	defff304 	addi	sp,sp,-52
   21e50:	dfc00c15 	stw	ra,48(sp)
   21e54:	df000b15 	stw	fp,44(sp)
   21e58:	df000b04 	addi	fp,sp,44
   21e5c:	e13ffc15 	stw	r4,-16(fp)
   21e60:	e17ffd15 	stw	r5,-12(fp)
   21e64:	e1bffe15 	stw	r6,-8(fp)
   21e68:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   21e6c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   21e70:	e0bffd17 	ldw	r2,-12(fp)
   21e74:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21e78:	00003706 	br	21f58 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   21e7c:	e0bffc17 	ldw	r2,-16(fp)
   21e80:	10800c17 	ldw	r2,48(r2)
   21e84:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   21e88:	e0bffc17 	ldw	r2,-16(fp)
   21e8c:	10800d17 	ldw	r2,52(r2)
   21e90:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   21e94:	e0fff917 	ldw	r3,-28(fp)
   21e98:	e0bff517 	ldw	r2,-44(fp)
   21e9c:	1880062e 	bgeu	r3,r2,21eb8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   21ea0:	e0fff517 	ldw	r3,-44(fp)
   21ea4:	e0bff917 	ldw	r2,-28(fp)
   21ea8:	1885c83a 	sub	r2,r3,r2
   21eac:	10bfffc4 	addi	r2,r2,-1
   21eb0:	e0bff615 	stw	r2,-40(fp)
   21eb4:	00000b06 	br	21ee4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   21eb8:	e0bff517 	ldw	r2,-44(fp)
   21ebc:	10000526 	beq	r2,zero,21ed4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   21ec0:	00c20004 	movi	r3,2048
   21ec4:	e0bff917 	ldw	r2,-28(fp)
   21ec8:	1885c83a 	sub	r2,r3,r2
   21ecc:	e0bff615 	stw	r2,-40(fp)
   21ed0:	00000406 	br	21ee4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   21ed4:	00c1ffc4 	movi	r3,2047
   21ed8:	e0bff917 	ldw	r2,-28(fp)
   21edc:	1885c83a 	sub	r2,r3,r2
   21ee0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21ee4:	e0bff617 	ldw	r2,-40(fp)
   21ee8:	10001e26 	beq	r2,zero,21f64 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   21eec:	e0fffe17 	ldw	r3,-8(fp)
   21ef0:	e0bff617 	ldw	r2,-40(fp)
   21ef4:	1880022e 	bgeu	r3,r2,21f00 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   21ef8:	e0bffe17 	ldw	r2,-8(fp)
   21efc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   21f00:	e0bffc17 	ldw	r2,-16(fp)
   21f04:	10c20e04 	addi	r3,r2,2104
   21f08:	e0bff917 	ldw	r2,-28(fp)
   21f0c:	1885883a 	add	r2,r3,r2
   21f10:	e1bff617 	ldw	r6,-40(fp)
   21f14:	e17ffd17 	ldw	r5,-12(fp)
   21f18:	1009883a 	mov	r4,r2
   21f1c:	000ea600 	call	ea60 <memcpy>
      ptr   += n;
   21f20:	e0fffd17 	ldw	r3,-12(fp)
   21f24:	e0bff617 	ldw	r2,-40(fp)
   21f28:	1885883a 	add	r2,r3,r2
   21f2c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   21f30:	e0fffe17 	ldw	r3,-8(fp)
   21f34:	e0bff617 	ldw	r2,-40(fp)
   21f38:	1885c83a 	sub	r2,r3,r2
   21f3c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21f40:	e0fff917 	ldw	r3,-28(fp)
   21f44:	e0bff617 	ldw	r2,-40(fp)
   21f48:	1885883a 	add	r2,r3,r2
   21f4c:	10c1ffcc 	andi	r3,r2,2047
   21f50:	e0bffc17 	ldw	r2,-16(fp)
   21f54:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21f58:	e0bffe17 	ldw	r2,-8(fp)
   21f5c:	00bfc716 	blt	zero,r2,21e7c <__alt_data_end+0xfc021e7c>
   21f60:	00000106 	br	21f68 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   21f64:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21f68:	0005303a 	rdctl	r2,status
   21f6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21f70:	e0fffb17 	ldw	r3,-20(fp)
   21f74:	00bfff84 	movi	r2,-2
   21f78:	1884703a 	and	r2,r3,r2
   21f7c:	1001703a 	wrctl	status,r2
  
  return context;
   21f80:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   21f84:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21f88:	e0bffc17 	ldw	r2,-16(fp)
   21f8c:	10800817 	ldw	r2,32(r2)
   21f90:	10c00094 	ori	r3,r2,2
   21f94:	e0bffc17 	ldw	r2,-16(fp)
   21f98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21f9c:	e0bffc17 	ldw	r2,-16(fp)
   21fa0:	10800017 	ldw	r2,0(r2)
   21fa4:	10800104 	addi	r2,r2,4
   21fa8:	1007883a 	mov	r3,r2
   21fac:	e0bffc17 	ldw	r2,-16(fp)
   21fb0:	10800817 	ldw	r2,32(r2)
   21fb4:	18800035 	stwio	r2,0(r3)
   21fb8:	e0bffa17 	ldw	r2,-24(fp)
   21fbc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21fc0:	e0bff817 	ldw	r2,-32(fp)
   21fc4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   21fc8:	e0bffe17 	ldw	r2,-8(fp)
   21fcc:	0080100e 	bge	zero,r2,22010 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   21fd0:	e0bfff17 	ldw	r2,-4(fp)
   21fd4:	1090000c 	andi	r2,r2,16384
   21fd8:	1000101e 	bne	r2,zero,2201c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   21fdc:	0001883a 	nop
   21fe0:	e0bffc17 	ldw	r2,-16(fp)
   21fe4:	10c00d17 	ldw	r3,52(r2)
   21fe8:	e0bff517 	ldw	r2,-44(fp)
   21fec:	1880051e 	bne	r3,r2,22004 <altera_avalon_jtag_uart_write+0x1b8>
   21ff0:	e0bffc17 	ldw	r2,-16(fp)
   21ff4:	10c00917 	ldw	r3,36(r2)
   21ff8:	e0bffc17 	ldw	r2,-16(fp)
   21ffc:	10800117 	ldw	r2,4(r2)
   22000:	18bff736 	bltu	r3,r2,21fe0 <__alt_data_end+0xfc021fe0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   22004:	e0bffc17 	ldw	r2,-16(fp)
   22008:	10800917 	ldw	r2,36(r2)
   2200c:	1000051e 	bne	r2,zero,22024 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   22010:	e0bffe17 	ldw	r2,-8(fp)
   22014:	00bfd016 	blt	zero,r2,21f58 <__alt_data_end+0xfc021f58>
   22018:	00000306 	br	22028 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2201c:	0001883a 	nop
   22020:	00000106 	br	22028 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   22024:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   22028:	e0fffd17 	ldw	r3,-12(fp)
   2202c:	e0bff717 	ldw	r2,-36(fp)
   22030:	18800426 	beq	r3,r2,22044 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   22034:	e0fffd17 	ldw	r3,-12(fp)
   22038:	e0bff717 	ldw	r2,-36(fp)
   2203c:	1885c83a 	sub	r2,r3,r2
   22040:	00000606 	br	2205c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   22044:	e0bfff17 	ldw	r2,-4(fp)
   22048:	1090000c 	andi	r2,r2,16384
   2204c:	10000226 	beq	r2,zero,22058 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   22050:	00bffd44 	movi	r2,-11
   22054:	00000106 	br	2205c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   22058:	00bffec4 	movi	r2,-5
}
   2205c:	e037883a 	mov	sp,fp
   22060:	dfc00117 	ldw	ra,4(sp)
   22064:	df000017 	ldw	fp,0(sp)
   22068:	dec00204 	addi	sp,sp,8
   2206c:	f800283a 	ret

00022070 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   22070:	defff404 	addi	sp,sp,-48
   22074:	df000b15 	stw	fp,44(sp)
   22078:	df000b04 	addi	fp,sp,44
   2207c:	e13ffc15 	stw	r4,-16(fp)
   22080:	e17ffd15 	stw	r5,-12(fp)
   22084:	e1bffe15 	stw	r6,-8(fp)
   22088:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   2208c:	e0ffff17 	ldw	r3,-4(fp)
   22090:	e0bffe17 	ldw	r2,-8(fp)
   22094:	1885883a 	add	r2,r3,r2
   22098:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   2209c:	e0c00217 	ldw	r3,8(fp)
   220a0:	e0800117 	ldw	r2,4(fp)
   220a4:	1885883a 	add	r2,r3,r2
   220a8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   220ac:	e0800117 	ldw	r2,4(fp)
   220b0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   220b4:	e0bffe17 	ldw	r2,-8(fp)
   220b8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   220bc:	00800044 	movi	r2,1
   220c0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   220c4:	e0bffc17 	ldw	r2,-16(fp)
   220c8:	10800504 	addi	r2,r2,20
   220cc:	1009883a 	mov	r4,r2
   220d0:	00c00044 	movi	r3,1
   220d4:	e0bffd17 	ldw	r2,-12(fp)
   220d8:	1884983a 	sll	r2,r3,r2
   220dc:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   220e0:	e0800317 	ldw	r2,12(fp)
   220e4:	1080008c 	andi	r2,r2,2
   220e8:	1000051e 	bne	r2,zero,22100 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   220ec:	e0bffc17 	ldw	r2,-16(fp)
   220f0:	10800304 	addi	r2,r2,12
   220f4:	1007883a 	mov	r3,r2
   220f8:	00810004 	movi	r2,1024
   220fc:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   22100:	e0bffc17 	ldw	r2,-16(fp)
   22104:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   22108:	e0bffc17 	ldw	r2,-16(fp)
   2210c:	10800204 	addi	r2,r2,8
   22110:	10800037 	ldwio	r2,0(r2)
   22114:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22118:	e0bffa17 	ldw	r2,-24(fp)
   2211c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   22120:	10000226 	beq	r2,zero,2212c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22124:	e0bff717 	ldw	r2,-36(fp)
   22128:	1000031e 	bne	r2,zero,22138 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   2212c:	e0bffa17 	ldw	r2,-24(fp)
   22130:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22134:	103ff426 	beq	r2,zero,22108 <__alt_data_end+0xfc022108>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   22138:	e0bffa17 	ldw	r2,-24(fp)
   2213c:	1080100c 	andi	r2,r2,64
   22140:	10001e26 	beq	r2,zero,221bc <alt_avalon_spi_command+0x14c>
   22144:	e0bff717 	ldw	r2,-36(fp)
   22148:	00801c0e 	bge	zero,r2,221bc <alt_avalon_spi_command+0x14c>
    {
      credits--;
   2214c:	e0bff717 	ldw	r2,-36(fp)
   22150:	10bfffc4 	addi	r2,r2,-1
   22154:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   22158:	e0ffff17 	ldw	r3,-4(fp)
   2215c:	e0bff817 	ldw	r2,-32(fp)
   22160:	18800a2e 	bgeu	r3,r2,2218c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   22164:	e0bffc17 	ldw	r2,-16(fp)
   22168:	10800104 	addi	r2,r2,4
   2216c:	1009883a 	mov	r4,r2
   22170:	e0bfff17 	ldw	r2,-4(fp)
   22174:	10c00044 	addi	r3,r2,1
   22178:	e0ffff15 	stw	r3,-4(fp)
   2217c:	10800003 	ldbu	r2,0(r2)
   22180:	10803fcc 	andi	r2,r2,255
   22184:	20800035 	stwio	r2,0(r4)
   22188:	00000c06 	br	221bc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   2218c:	e0bff517 	ldw	r2,-44(fp)
   22190:	10000826 	beq	r2,zero,221b4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   22194:	e0bff517 	ldw	r2,-44(fp)
   22198:	10bfffc4 	addi	r2,r2,-1
   2219c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   221a0:	e0bffc17 	ldw	r2,-16(fp)
   221a4:	10800104 	addi	r2,r2,4
   221a8:	0007883a 	mov	r3,zero
   221ac:	10c00035 	stwio	r3,0(r2)
   221b0:	00000206 	br	221bc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   221b4:	00bf0004 	movi	r2,-1024
   221b8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   221bc:	e0bffa17 	ldw	r2,-24(fp)
   221c0:	1080200c 	andi	r2,r2,128
   221c4:	103fd026 	beq	r2,zero,22108 <__alt_data_end+0xfc022108>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   221c8:	e0bffc17 	ldw	r2,-16(fp)
   221cc:	10800037 	ldwio	r2,0(r2)
   221d0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   221d4:	e0bff617 	ldw	r2,-40(fp)
   221d8:	10000426 	beq	r2,zero,221ec <alt_avalon_spi_command+0x17c>
        read_ignore--;
   221dc:	e0bff617 	ldw	r2,-40(fp)
   221e0:	10bfffc4 	addi	r2,r2,-1
   221e4:	e0bff615 	stw	r2,-40(fp)
   221e8:	00000506 	br	22200 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   221ec:	e0800217 	ldw	r2,8(fp)
   221f0:	10c00044 	addi	r3,r2,1
   221f4:	e0c00215 	stw	r3,8(fp)
   221f8:	e0fffb17 	ldw	r3,-20(fp)
   221fc:	10c00005 	stb	r3,0(r2)
      credits++;
   22200:	e0bff717 	ldw	r2,-36(fp)
   22204:	10800044 	addi	r2,r2,1
   22208:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   2220c:	e0bff617 	ldw	r2,-40(fp)
   22210:	103fbd1e 	bne	r2,zero,22108 <__alt_data_end+0xfc022108>
   22214:	e0c00217 	ldw	r3,8(fp)
   22218:	e0bff917 	ldw	r2,-28(fp)
   2221c:	18bfba1e 	bne	r3,r2,22108 <__alt_data_end+0xfc022108>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   22220:	e0bffc17 	ldw	r2,-16(fp)
   22224:	10800204 	addi	r2,r2,8
   22228:	10800037 	ldwio	r2,0(r2)
   2222c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   22230:	e0bffa17 	ldw	r2,-24(fp)
   22234:	1080080c 	andi	r2,r2,32
   22238:	103ff926 	beq	r2,zero,22220 <__alt_data_end+0xfc022220>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   2223c:	e0800317 	ldw	r2,12(fp)
   22240:	1080004c 	andi	r2,r2,1
   22244:	1000041e 	bne	r2,zero,22258 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   22248:	e0bffc17 	ldw	r2,-16(fp)
   2224c:	10800304 	addi	r2,r2,12
   22250:	0007883a 	mov	r3,zero
   22254:	10c00035 	stwio	r3,0(r2)

  return read_length;
   22258:	e0800117 	ldw	r2,4(fp)
}
   2225c:	e037883a 	mov	sp,fp
   22260:	df000017 	ldw	fp,0(sp)
   22264:	dec00104 	addi	sp,sp,4
   22268:	f800283a 	ret

0002226c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2226c:	defffa04 	addi	sp,sp,-24
   22270:	dfc00515 	stw	ra,20(sp)
   22274:	df000415 	stw	fp,16(sp)
   22278:	df000404 	addi	fp,sp,16
   2227c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   22280:	0007883a 	mov	r3,zero
   22284:	e0bfff17 	ldw	r2,-4(fp)
   22288:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2228c:	e0bfff17 	ldw	r2,-4(fp)
   22290:	10800104 	addi	r2,r2,4
   22294:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22298:	0005303a 	rdctl	r2,status
   2229c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   222a0:	e0fffd17 	ldw	r3,-12(fp)
   222a4:	00bfff84 	movi	r2,-2
   222a8:	1884703a 	and	r2,r3,r2
   222ac:	1001703a 	wrctl	status,r2
  
  return context;
   222b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   222b4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   222b8:	00231dc0 	call	231dc <alt_tick>
   222bc:	e0bffc17 	ldw	r2,-16(fp)
   222c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   222c4:	e0bffe17 	ldw	r2,-8(fp)
   222c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   222cc:	0001883a 	nop
   222d0:	e037883a 	mov	sp,fp
   222d4:	dfc00117 	ldw	ra,4(sp)
   222d8:	df000017 	ldw	fp,0(sp)
   222dc:	dec00204 	addi	sp,sp,8
   222e0:	f800283a 	ret

000222e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   222e4:	defff804 	addi	sp,sp,-32
   222e8:	dfc00715 	stw	ra,28(sp)
   222ec:	df000615 	stw	fp,24(sp)
   222f0:	df000604 	addi	fp,sp,24
   222f4:	e13ffc15 	stw	r4,-16(fp)
   222f8:	e17ffd15 	stw	r5,-12(fp)
   222fc:	e1bffe15 	stw	r6,-8(fp)
   22300:	e1ffff15 	stw	r7,-4(fp)
   22304:	e0bfff17 	ldw	r2,-4(fp)
   22308:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2230c:	d0b24f17 	ldw	r2,-14020(gp)
   22310:	1000021e 	bne	r2,zero,2231c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   22314:	e0bffb17 	ldw	r2,-20(fp)
   22318:	d0b24f15 	stw	r2,-14020(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2231c:	e0bffc17 	ldw	r2,-16(fp)
   22320:	10800104 	addi	r2,r2,4
   22324:	00c001c4 	movi	r3,7
   22328:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2232c:	d8000015 	stw	zero,0(sp)
   22330:	e1fffc17 	ldw	r7,-16(fp)
   22334:	018000b4 	movhi	r6,2
   22338:	31889b04 	addi	r6,r6,8812
   2233c:	e17ffe17 	ldw	r5,-8(fp)
   22340:	e13ffd17 	ldw	r4,-12(fp)
   22344:	00228540 	call	22854 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   22348:	0001883a 	nop
   2234c:	e037883a 	mov	sp,fp
   22350:	dfc00117 	ldw	ra,4(sp)
   22354:	df000017 	ldw	fp,0(sp)
   22358:	dec00204 	addi	sp,sp,8
   2235c:	f800283a 	ret

00022360 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   22360:	defff504 	addi	sp,sp,-44
   22364:	df000a15 	stw	fp,40(sp)
   22368:	df000a04 	addi	fp,sp,40
   2236c:	e13ffc15 	stw	r4,-16(fp)
   22370:	e17ffd15 	stw	r5,-12(fp)
   22374:	e1bffe15 	stw	r6,-8(fp)
   22378:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2237c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   22380:	d0b24f17 	ldw	r2,-14020(gp)
  
  if (alt_ticks_per_second ())
   22384:	10003c26 	beq	r2,zero,22478 <alt_alarm_start+0x118>
  {
    if (alarm)
   22388:	e0bffc17 	ldw	r2,-16(fp)
   2238c:	10003826 	beq	r2,zero,22470 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   22390:	e0bffc17 	ldw	r2,-16(fp)
   22394:	e0fffe17 	ldw	r3,-8(fp)
   22398:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2239c:	e0bffc17 	ldw	r2,-16(fp)
   223a0:	e0ffff17 	ldw	r3,-4(fp)
   223a4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   223a8:	0005303a 	rdctl	r2,status
   223ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   223b0:	e0fff917 	ldw	r3,-28(fp)
   223b4:	00bfff84 	movi	r2,-2
   223b8:	1884703a 	and	r2,r3,r2
   223bc:	1001703a 	wrctl	status,r2
  
  return context;
   223c0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   223c4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   223c8:	d0b25017 	ldw	r2,-14016(gp)
      
      current_nticks = alt_nticks();
   223cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   223d0:	e0fffd17 	ldw	r3,-12(fp)
   223d4:	e0bff617 	ldw	r2,-40(fp)
   223d8:	1885883a 	add	r2,r3,r2
   223dc:	10c00044 	addi	r3,r2,1
   223e0:	e0bffc17 	ldw	r2,-16(fp)
   223e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   223e8:	e0bffc17 	ldw	r2,-16(fp)
   223ec:	10c00217 	ldw	r3,8(r2)
   223f0:	e0bff617 	ldw	r2,-40(fp)
   223f4:	1880042e 	bgeu	r3,r2,22408 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   223f8:	e0bffc17 	ldw	r2,-16(fp)
   223fc:	00c00044 	movi	r3,1
   22400:	10c00405 	stb	r3,16(r2)
   22404:	00000206 	br	22410 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   22408:	e0bffc17 	ldw	r2,-16(fp)
   2240c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   22410:	e0bffc17 	ldw	r2,-16(fp)
   22414:	d0e5c004 	addi	r3,gp,-26880
   22418:	e0fffa15 	stw	r3,-24(fp)
   2241c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22420:	e0bffb17 	ldw	r2,-20(fp)
   22424:	e0fffa17 	ldw	r3,-24(fp)
   22428:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2242c:	e0bffa17 	ldw	r2,-24(fp)
   22430:	10c00017 	ldw	r3,0(r2)
   22434:	e0bffb17 	ldw	r2,-20(fp)
   22438:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2243c:	e0bffa17 	ldw	r2,-24(fp)
   22440:	10800017 	ldw	r2,0(r2)
   22444:	e0fffb17 	ldw	r3,-20(fp)
   22448:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2244c:	e0bffa17 	ldw	r2,-24(fp)
   22450:	e0fffb17 	ldw	r3,-20(fp)
   22454:	10c00015 	stw	r3,0(r2)
   22458:	e0bff817 	ldw	r2,-32(fp)
   2245c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22460:	e0bff717 	ldw	r2,-36(fp)
   22464:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   22468:	0005883a 	mov	r2,zero
   2246c:	00000306 	br	2247c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   22470:	00bffa84 	movi	r2,-22
   22474:	00000106 	br	2247c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   22478:	00bfde84 	movi	r2,-134
  }
}
   2247c:	e037883a 	mov	sp,fp
   22480:	df000017 	ldw	fp,0(sp)
   22484:	dec00104 	addi	sp,sp,4
   22488:	f800283a 	ret

0002248c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2248c:	defffa04 	addi	sp,sp,-24
   22490:	dfc00515 	stw	ra,20(sp)
   22494:	df000415 	stw	fp,16(sp)
   22498:	df000404 	addi	fp,sp,16
   2249c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   224a0:	00800244 	movi	r2,9
   224a4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   224a8:	014003f4 	movhi	r5,15
   224ac:	29509004 	addi	r5,r5,16960
   224b0:	e13ffd17 	ldw	r4,-12(fp)
   224b4:	000ccac0 	call	ccac <__mulsi3>
   224b8:	100b883a 	mov	r5,r2
   224bc:	01017db4 	movhi	r4,1526
   224c0:	21384004 	addi	r4,r4,-7936
   224c4:	000cbf00 	call	cbf0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   224c8:	100b883a 	mov	r5,r2
   224cc:	01200034 	movhi	r4,32768
   224d0:	213fffc4 	addi	r4,r4,-1
   224d4:	000cbf00 	call	cbf0 <__udivsi3>
   224d8:	100b883a 	mov	r5,r2
   224dc:	e13fff17 	ldw	r4,-4(fp)
   224e0:	000cbf00 	call	cbf0 <__udivsi3>
   224e4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   224e8:	e0bffe17 	ldw	r2,-8(fp)
   224ec:	10002a26 	beq	r2,zero,22598 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   224f0:	e03ffc15 	stw	zero,-16(fp)
   224f4:	00001706 	br	22554 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   224f8:	00a00034 	movhi	r2,32768
   224fc:	10bfffc4 	addi	r2,r2,-1
   22500:	10bfffc4 	addi	r2,r2,-1
   22504:	103ffe1e 	bne	r2,zero,22500 <__alt_data_end+0xfc022500>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   22508:	014003f4 	movhi	r5,15
   2250c:	29509004 	addi	r5,r5,16960
   22510:	e13ffd17 	ldw	r4,-12(fp)
   22514:	000ccac0 	call	ccac <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   22518:	100b883a 	mov	r5,r2
   2251c:	01017db4 	movhi	r4,1526
   22520:	21384004 	addi	r4,r4,-7936
   22524:	000cbf00 	call	cbf0 <__udivsi3>
   22528:	100b883a 	mov	r5,r2
   2252c:	01200034 	movhi	r4,32768
   22530:	213fffc4 	addi	r4,r4,-1
   22534:	000cbf00 	call	cbf0 <__udivsi3>
   22538:	1007883a 	mov	r3,r2
   2253c:	e0bfff17 	ldw	r2,-4(fp)
   22540:	10c5c83a 	sub	r2,r2,r3
   22544:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   22548:	e0bffc17 	ldw	r2,-16(fp)
   2254c:	10800044 	addi	r2,r2,1
   22550:	e0bffc15 	stw	r2,-16(fp)
   22554:	e0fffc17 	ldw	r3,-16(fp)
   22558:	e0bffe17 	ldw	r2,-8(fp)
   2255c:	18bfe616 	blt	r3,r2,224f8 <__alt_data_end+0xfc0224f8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22560:	014003f4 	movhi	r5,15
   22564:	29509004 	addi	r5,r5,16960
   22568:	e13ffd17 	ldw	r4,-12(fp)
   2256c:	000ccac0 	call	ccac <__mulsi3>
   22570:	100b883a 	mov	r5,r2
   22574:	01017db4 	movhi	r4,1526
   22578:	21384004 	addi	r4,r4,-7936
   2257c:	000cbf00 	call	cbf0 <__udivsi3>
   22580:	e17fff17 	ldw	r5,-4(fp)
   22584:	1009883a 	mov	r4,r2
   22588:	000ccac0 	call	ccac <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2258c:	10bfffc4 	addi	r2,r2,-1
   22590:	103ffe1e 	bne	r2,zero,2258c <__alt_data_end+0xfc02258c>
   22594:	00000d06 	br	225cc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22598:	014003f4 	movhi	r5,15
   2259c:	29509004 	addi	r5,r5,16960
   225a0:	e13ffd17 	ldw	r4,-12(fp)
   225a4:	000ccac0 	call	ccac <__mulsi3>
   225a8:	100b883a 	mov	r5,r2
   225ac:	01017db4 	movhi	r4,1526
   225b0:	21384004 	addi	r4,r4,-7936
   225b4:	000cbf00 	call	cbf0 <__udivsi3>
   225b8:	e17fff17 	ldw	r5,-4(fp)
   225bc:	1009883a 	mov	r4,r2
   225c0:	000ccac0 	call	ccac <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   225c4:	10bfffc4 	addi	r2,r2,-1
   225c8:	00bffe16 	blt	zero,r2,225c4 <__alt_data_end+0xfc0225c4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   225cc:	0005883a 	mov	r2,zero
}
   225d0:	e037883a 	mov	sp,fp
   225d4:	dfc00117 	ldw	ra,4(sp)
   225d8:	df000017 	ldw	fp,0(sp)
   225dc:	dec00204 	addi	sp,sp,8
   225e0:	f800283a 	ret

000225e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   225e4:	deffff04 	addi	sp,sp,-4
   225e8:	df000015 	stw	fp,0(sp)
   225ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   225f0:	0001883a 	nop
   225f4:	e037883a 	mov	sp,fp
   225f8:	df000017 	ldw	fp,0(sp)
   225fc:	dec00104 	addi	sp,sp,4
   22600:	f800283a 	ret

00022604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22604:	defffe04 	addi	sp,sp,-8
   22608:	dfc00115 	stw	ra,4(sp)
   2260c:	df000015 	stw	fp,0(sp)
   22610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22614:	d0a5bb17 	ldw	r2,-26900(gp)
   22618:	10000326 	beq	r2,zero,22628 <alt_get_errno+0x24>
   2261c:	d0a5bb17 	ldw	r2,-26900(gp)
   22620:	103ee83a 	callr	r2
   22624:	00000106 	br	2262c <alt_get_errno+0x28>
   22628:	d0b24704 	addi	r2,gp,-14052
}
   2262c:	e037883a 	mov	sp,fp
   22630:	dfc00117 	ldw	ra,4(sp)
   22634:	df000017 	ldw	fp,0(sp)
   22638:	dec00204 	addi	sp,sp,8
   2263c:	f800283a 	ret

00022640 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22640:	defffa04 	addi	sp,sp,-24
   22644:	dfc00515 	stw	ra,20(sp)
   22648:	df000415 	stw	fp,16(sp)
   2264c:	df000404 	addi	fp,sp,16
   22650:	e13ffe15 	stw	r4,-8(fp)
   22654:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22658:	e0bffe17 	ldw	r2,-8(fp)
   2265c:	10000326 	beq	r2,zero,2266c <alt_dev_llist_insert+0x2c>
   22660:	e0bffe17 	ldw	r2,-8(fp)
   22664:	10800217 	ldw	r2,8(r2)
   22668:	1000061e 	bne	r2,zero,22684 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2266c:	00226040 	call	22604 <alt_get_errno>
   22670:	1007883a 	mov	r3,r2
   22674:	00800584 	movi	r2,22
   22678:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2267c:	00bffa84 	movi	r2,-22
   22680:	00001306 	br	226d0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22684:	e0bffe17 	ldw	r2,-8(fp)
   22688:	e0ffff17 	ldw	r3,-4(fp)
   2268c:	e0fffc15 	stw	r3,-16(fp)
   22690:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22694:	e0bffd17 	ldw	r2,-12(fp)
   22698:	e0fffc17 	ldw	r3,-16(fp)
   2269c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   226a0:	e0bffc17 	ldw	r2,-16(fp)
   226a4:	10c00017 	ldw	r3,0(r2)
   226a8:	e0bffd17 	ldw	r2,-12(fp)
   226ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   226b0:	e0bffc17 	ldw	r2,-16(fp)
   226b4:	10800017 	ldw	r2,0(r2)
   226b8:	e0fffd17 	ldw	r3,-12(fp)
   226bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   226c0:	e0bffc17 	ldw	r2,-16(fp)
   226c4:	e0fffd17 	ldw	r3,-12(fp)
   226c8:	10c00015 	stw	r3,0(r2)

  return 0;  
   226cc:	0005883a 	mov	r2,zero
}
   226d0:	e037883a 	mov	sp,fp
   226d4:	dfc00117 	ldw	ra,4(sp)
   226d8:	df000017 	ldw	fp,0(sp)
   226dc:	dec00204 	addi	sp,sp,8
   226e0:	f800283a 	ret

000226e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   226e4:	defffd04 	addi	sp,sp,-12
   226e8:	dfc00215 	stw	ra,8(sp)
   226ec:	df000115 	stw	fp,4(sp)
   226f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   226f4:	008000b4 	movhi	r2,2
   226f8:	108e4304 	addi	r2,r2,14604
   226fc:	e0bfff15 	stw	r2,-4(fp)
   22700:	00000606 	br	2271c <_do_ctors+0x38>
        (*ctor) (); 
   22704:	e0bfff17 	ldw	r2,-4(fp)
   22708:	10800017 	ldw	r2,0(r2)
   2270c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22710:	e0bfff17 	ldw	r2,-4(fp)
   22714:	10bfff04 	addi	r2,r2,-4
   22718:	e0bfff15 	stw	r2,-4(fp)
   2271c:	e0ffff17 	ldw	r3,-4(fp)
   22720:	008000b4 	movhi	r2,2
   22724:	108e4204 	addi	r2,r2,14600
   22728:	18bff62e 	bgeu	r3,r2,22704 <__alt_data_end+0xfc022704>
        (*ctor) (); 
}
   2272c:	0001883a 	nop
   22730:	e037883a 	mov	sp,fp
   22734:	dfc00117 	ldw	ra,4(sp)
   22738:	df000017 	ldw	fp,0(sp)
   2273c:	dec00204 	addi	sp,sp,8
   22740:	f800283a 	ret

00022744 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22744:	defffd04 	addi	sp,sp,-12
   22748:	dfc00215 	stw	ra,8(sp)
   2274c:	df000115 	stw	fp,4(sp)
   22750:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22754:	008000b4 	movhi	r2,2
   22758:	108e4304 	addi	r2,r2,14604
   2275c:	e0bfff15 	stw	r2,-4(fp)
   22760:	00000606 	br	2277c <_do_dtors+0x38>
        (*dtor) (); 
   22764:	e0bfff17 	ldw	r2,-4(fp)
   22768:	10800017 	ldw	r2,0(r2)
   2276c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22770:	e0bfff17 	ldw	r2,-4(fp)
   22774:	10bfff04 	addi	r2,r2,-4
   22778:	e0bfff15 	stw	r2,-4(fp)
   2277c:	e0ffff17 	ldw	r3,-4(fp)
   22780:	008000b4 	movhi	r2,2
   22784:	108e4404 	addi	r2,r2,14608
   22788:	18bff62e 	bgeu	r3,r2,22764 <__alt_data_end+0xfc022764>
        (*dtor) (); 
}
   2278c:	0001883a 	nop
   22790:	e037883a 	mov	sp,fp
   22794:	dfc00117 	ldw	ra,4(sp)
   22798:	df000017 	ldw	fp,0(sp)
   2279c:	dec00204 	addi	sp,sp,8
   227a0:	f800283a 	ret

000227a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   227a4:	defffa04 	addi	sp,sp,-24
   227a8:	dfc00515 	stw	ra,20(sp)
   227ac:	df000415 	stw	fp,16(sp)
   227b0:	df000404 	addi	fp,sp,16
   227b4:	e13ffe15 	stw	r4,-8(fp)
   227b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   227bc:	e0bfff17 	ldw	r2,-4(fp)
   227c0:	10800017 	ldw	r2,0(r2)
   227c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   227c8:	e13ffe17 	ldw	r4,-8(fp)
   227cc:	000f3280 	call	f328 <strlen>
   227d0:	10800044 	addi	r2,r2,1
   227d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   227d8:	00000d06 	br	22810 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   227dc:	e0bffc17 	ldw	r2,-16(fp)
   227e0:	10800217 	ldw	r2,8(r2)
   227e4:	e0fffd17 	ldw	r3,-12(fp)
   227e8:	180d883a 	mov	r6,r3
   227ec:	e17ffe17 	ldw	r5,-8(fp)
   227f0:	1009883a 	mov	r4,r2
   227f4:	00235bc0 	call	235bc <memcmp>
   227f8:	1000021e 	bne	r2,zero,22804 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   227fc:	e0bffc17 	ldw	r2,-16(fp)
   22800:	00000706 	br	22820 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   22804:	e0bffc17 	ldw	r2,-16(fp)
   22808:	10800017 	ldw	r2,0(r2)
   2280c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22810:	e0fffc17 	ldw	r3,-16(fp)
   22814:	e0bfff17 	ldw	r2,-4(fp)
   22818:	18bff01e 	bne	r3,r2,227dc <__alt_data_end+0xfc0227dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2281c:	0005883a 	mov	r2,zero
}
   22820:	e037883a 	mov	sp,fp
   22824:	dfc00117 	ldw	ra,4(sp)
   22828:	df000017 	ldw	fp,0(sp)
   2282c:	dec00204 	addi	sp,sp,8
   22830:	f800283a 	ret

00022834 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   22834:	deffff04 	addi	sp,sp,-4
   22838:	df000015 	stw	fp,0(sp)
   2283c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   22840:	0001883a 	nop
   22844:	e037883a 	mov	sp,fp
   22848:	df000017 	ldw	fp,0(sp)
   2284c:	dec00104 	addi	sp,sp,4
   22850:	f800283a 	ret

00022854 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22854:	defff904 	addi	sp,sp,-28
   22858:	dfc00615 	stw	ra,24(sp)
   2285c:	df000515 	stw	fp,20(sp)
   22860:	df000504 	addi	fp,sp,20
   22864:	e13ffc15 	stw	r4,-16(fp)
   22868:	e17ffd15 	stw	r5,-12(fp)
   2286c:	e1bffe15 	stw	r6,-8(fp)
   22870:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   22874:	e0800217 	ldw	r2,8(fp)
   22878:	d8800015 	stw	r2,0(sp)
   2287c:	e1ffff17 	ldw	r7,-4(fp)
   22880:	e1bffe17 	ldw	r6,-8(fp)
   22884:	e17ffd17 	ldw	r5,-12(fp)
   22888:	e13ffc17 	ldw	r4,-16(fp)
   2288c:	0022a040 	call	22a04 <alt_iic_isr_register>
}  
   22890:	e037883a 	mov	sp,fp
   22894:	dfc00117 	ldw	ra,4(sp)
   22898:	df000017 	ldw	fp,0(sp)
   2289c:	dec00204 	addi	sp,sp,8
   228a0:	f800283a 	ret

000228a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   228a4:	defff904 	addi	sp,sp,-28
   228a8:	df000615 	stw	fp,24(sp)
   228ac:	df000604 	addi	fp,sp,24
   228b0:	e13ffe15 	stw	r4,-8(fp)
   228b4:	e17fff15 	stw	r5,-4(fp)
   228b8:	e0bfff17 	ldw	r2,-4(fp)
   228bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   228c0:	0005303a 	rdctl	r2,status
   228c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   228c8:	e0fffb17 	ldw	r3,-20(fp)
   228cc:	00bfff84 	movi	r2,-2
   228d0:	1884703a 	and	r2,r3,r2
   228d4:	1001703a 	wrctl	status,r2
  
  return context;
   228d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   228dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   228e0:	00c00044 	movi	r3,1
   228e4:	e0bffa17 	ldw	r2,-24(fp)
   228e8:	1884983a 	sll	r2,r3,r2
   228ec:	1007883a 	mov	r3,r2
   228f0:	d0b24e17 	ldw	r2,-14024(gp)
   228f4:	1884b03a 	or	r2,r3,r2
   228f8:	d0b24e15 	stw	r2,-14024(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   228fc:	d0b24e17 	ldw	r2,-14024(gp)
   22900:	100170fa 	wrctl	ienable,r2
   22904:	e0bffc17 	ldw	r2,-16(fp)
   22908:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2290c:	e0bffd17 	ldw	r2,-12(fp)
   22910:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22914:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   22918:	0001883a 	nop
}
   2291c:	e037883a 	mov	sp,fp
   22920:	df000017 	ldw	fp,0(sp)
   22924:	dec00104 	addi	sp,sp,4
   22928:	f800283a 	ret

0002292c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2292c:	defff904 	addi	sp,sp,-28
   22930:	df000615 	stw	fp,24(sp)
   22934:	df000604 	addi	fp,sp,24
   22938:	e13ffe15 	stw	r4,-8(fp)
   2293c:	e17fff15 	stw	r5,-4(fp)
   22940:	e0bfff17 	ldw	r2,-4(fp)
   22944:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22948:	0005303a 	rdctl	r2,status
   2294c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22950:	e0fffb17 	ldw	r3,-20(fp)
   22954:	00bfff84 	movi	r2,-2
   22958:	1884703a 	and	r2,r3,r2
   2295c:	1001703a 	wrctl	status,r2
  
  return context;
   22960:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22964:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   22968:	00c00044 	movi	r3,1
   2296c:	e0bffa17 	ldw	r2,-24(fp)
   22970:	1884983a 	sll	r2,r3,r2
   22974:	0084303a 	nor	r2,zero,r2
   22978:	1007883a 	mov	r3,r2
   2297c:	d0b24e17 	ldw	r2,-14024(gp)
   22980:	1884703a 	and	r2,r3,r2
   22984:	d0b24e15 	stw	r2,-14024(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22988:	d0b24e17 	ldw	r2,-14024(gp)
   2298c:	100170fa 	wrctl	ienable,r2
   22990:	e0bffc17 	ldw	r2,-16(fp)
   22994:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22998:	e0bffd17 	ldw	r2,-12(fp)
   2299c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   229a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   229a4:	0001883a 	nop
}
   229a8:	e037883a 	mov	sp,fp
   229ac:	df000017 	ldw	fp,0(sp)
   229b0:	dec00104 	addi	sp,sp,4
   229b4:	f800283a 	ret

000229b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   229b8:	defffc04 	addi	sp,sp,-16
   229bc:	df000315 	stw	fp,12(sp)
   229c0:	df000304 	addi	fp,sp,12
   229c4:	e13ffe15 	stw	r4,-8(fp)
   229c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   229cc:	000530fa 	rdctl	r2,ienable
   229d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   229d4:	00c00044 	movi	r3,1
   229d8:	e0bfff17 	ldw	r2,-4(fp)
   229dc:	1884983a 	sll	r2,r3,r2
   229e0:	1007883a 	mov	r3,r2
   229e4:	e0bffd17 	ldw	r2,-12(fp)
   229e8:	1884703a 	and	r2,r3,r2
   229ec:	1004c03a 	cmpne	r2,r2,zero
   229f0:	10803fcc 	andi	r2,r2,255
}
   229f4:	e037883a 	mov	sp,fp
   229f8:	df000017 	ldw	fp,0(sp)
   229fc:	dec00104 	addi	sp,sp,4
   22a00:	f800283a 	ret

00022a04 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22a04:	defff504 	addi	sp,sp,-44
   22a08:	dfc00a15 	stw	ra,40(sp)
   22a0c:	df000915 	stw	fp,36(sp)
   22a10:	df000904 	addi	fp,sp,36
   22a14:	e13ffc15 	stw	r4,-16(fp)
   22a18:	e17ffd15 	stw	r5,-12(fp)
   22a1c:	e1bffe15 	stw	r6,-8(fp)
   22a20:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   22a24:	00bffa84 	movi	r2,-22
   22a28:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   22a2c:	e0bffd17 	ldw	r2,-12(fp)
   22a30:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   22a34:	e0bff817 	ldw	r2,-32(fp)
   22a38:	10800808 	cmpgei	r2,r2,32
   22a3c:	1000271e 	bne	r2,zero,22adc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22a40:	0005303a 	rdctl	r2,status
   22a44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22a48:	e0fffb17 	ldw	r3,-20(fp)
   22a4c:	00bfff84 	movi	r2,-2
   22a50:	1884703a 	and	r2,r3,r2
   22a54:	1001703a 	wrctl	status,r2
  
  return context;
   22a58:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   22a5c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   22a60:	008000f4 	movhi	r2,3
   22a64:	1083fc04 	addi	r2,r2,4080
   22a68:	e0fff817 	ldw	r3,-32(fp)
   22a6c:	180690fa 	slli	r3,r3,3
   22a70:	10c5883a 	add	r2,r2,r3
   22a74:	e0fffe17 	ldw	r3,-8(fp)
   22a78:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   22a7c:	008000f4 	movhi	r2,3
   22a80:	1083fc04 	addi	r2,r2,4080
   22a84:	e0fff817 	ldw	r3,-32(fp)
   22a88:	180690fa 	slli	r3,r3,3
   22a8c:	10c5883a 	add	r2,r2,r3
   22a90:	10800104 	addi	r2,r2,4
   22a94:	e0ffff17 	ldw	r3,-4(fp)
   22a98:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22a9c:	e0bffe17 	ldw	r2,-8(fp)
   22aa0:	10000526 	beq	r2,zero,22ab8 <alt_iic_isr_register+0xb4>
   22aa4:	e0bff817 	ldw	r2,-32(fp)
   22aa8:	100b883a 	mov	r5,r2
   22aac:	e13ffc17 	ldw	r4,-16(fp)
   22ab0:	00228a40 	call	228a4 <alt_ic_irq_enable>
   22ab4:	00000406 	br	22ac8 <alt_iic_isr_register+0xc4>
   22ab8:	e0bff817 	ldw	r2,-32(fp)
   22abc:	100b883a 	mov	r5,r2
   22ac0:	e13ffc17 	ldw	r4,-16(fp)
   22ac4:	002292c0 	call	2292c <alt_ic_irq_disable>
   22ac8:	e0bff715 	stw	r2,-36(fp)
   22acc:	e0bffa17 	ldw	r2,-24(fp)
   22ad0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22ad4:	e0bff917 	ldw	r2,-28(fp)
   22ad8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   22adc:	e0bff717 	ldw	r2,-36(fp)
}
   22ae0:	e037883a 	mov	sp,fp
   22ae4:	dfc00117 	ldw	ra,4(sp)
   22ae8:	df000017 	ldw	fp,0(sp)
   22aec:	dec00204 	addi	sp,sp,8
   22af0:	f800283a 	ret

00022af4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   22af4:	defff804 	addi	sp,sp,-32
   22af8:	dfc00715 	stw	ra,28(sp)
   22afc:	df000615 	stw	fp,24(sp)
   22b00:	dc000515 	stw	r16,20(sp)
   22b04:	df000604 	addi	fp,sp,24
   22b08:	e13ffb15 	stw	r4,-20(fp)
   22b0c:	e17ffc15 	stw	r5,-16(fp)
   22b10:	e1bffd15 	stw	r6,-12(fp)
   22b14:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   22b18:	e1bffe17 	ldw	r6,-8(fp)
   22b1c:	e17ffd17 	ldw	r5,-12(fp)
   22b20:	e13ffc17 	ldw	r4,-16(fp)
   22b24:	0022d7c0 	call	22d7c <open>
   22b28:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   22b2c:	e0bffa17 	ldw	r2,-24(fp)
   22b30:	10002216 	blt	r2,zero,22bbc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   22b34:	040000f4 	movhi	r16,3
   22b38:	842cce04 	addi	r16,r16,-19656
   22b3c:	e0bffa17 	ldw	r2,-24(fp)
   22b40:	01400304 	movi	r5,12
   22b44:	1009883a 	mov	r4,r2
   22b48:	000ccac0 	call	ccac <__mulsi3>
   22b4c:	8085883a 	add	r2,r16,r2
   22b50:	10c00017 	ldw	r3,0(r2)
   22b54:	e0bffb17 	ldw	r2,-20(fp)
   22b58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   22b5c:	040000f4 	movhi	r16,3
   22b60:	842cce04 	addi	r16,r16,-19656
   22b64:	e0bffa17 	ldw	r2,-24(fp)
   22b68:	01400304 	movi	r5,12
   22b6c:	1009883a 	mov	r4,r2
   22b70:	000ccac0 	call	ccac <__mulsi3>
   22b74:	8085883a 	add	r2,r16,r2
   22b78:	10800104 	addi	r2,r2,4
   22b7c:	10c00017 	ldw	r3,0(r2)
   22b80:	e0bffb17 	ldw	r2,-20(fp)
   22b84:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   22b88:	040000f4 	movhi	r16,3
   22b8c:	842cce04 	addi	r16,r16,-19656
   22b90:	e0bffa17 	ldw	r2,-24(fp)
   22b94:	01400304 	movi	r5,12
   22b98:	1009883a 	mov	r4,r2
   22b9c:	000ccac0 	call	ccac <__mulsi3>
   22ba0:	8085883a 	add	r2,r16,r2
   22ba4:	10800204 	addi	r2,r2,8
   22ba8:	10c00017 	ldw	r3,0(r2)
   22bac:	e0bffb17 	ldw	r2,-20(fp)
   22bb0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   22bb4:	e13ffa17 	ldw	r4,-24(fp)
   22bb8:	001f5bc0 	call	1f5bc <alt_release_fd>
  }
} 
   22bbc:	0001883a 	nop
   22bc0:	e6ffff04 	addi	sp,fp,-4
   22bc4:	dfc00217 	ldw	ra,8(sp)
   22bc8:	df000117 	ldw	fp,4(sp)
   22bcc:	dc000017 	ldw	r16,0(sp)
   22bd0:	dec00304 	addi	sp,sp,12
   22bd4:	f800283a 	ret

00022bd8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   22bd8:	defffb04 	addi	sp,sp,-20
   22bdc:	dfc00415 	stw	ra,16(sp)
   22be0:	df000315 	stw	fp,12(sp)
   22be4:	df000304 	addi	fp,sp,12
   22be8:	e13ffd15 	stw	r4,-12(fp)
   22bec:	e17ffe15 	stw	r5,-8(fp)
   22bf0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   22bf4:	01c07fc4 	movi	r7,511
   22bf8:	01800044 	movi	r6,1
   22bfc:	e17ffd17 	ldw	r5,-12(fp)
   22c00:	010000f4 	movhi	r4,3
   22c04:	212cd104 	addi	r4,r4,-19644
   22c08:	0022af40 	call	22af4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   22c0c:	01c07fc4 	movi	r7,511
   22c10:	000d883a 	mov	r6,zero
   22c14:	e17ffe17 	ldw	r5,-8(fp)
   22c18:	010000f4 	movhi	r4,3
   22c1c:	212cce04 	addi	r4,r4,-19656
   22c20:	0022af40 	call	22af4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22c24:	01c07fc4 	movi	r7,511
   22c28:	01800044 	movi	r6,1
   22c2c:	e17fff17 	ldw	r5,-4(fp)
   22c30:	010000f4 	movhi	r4,3
   22c34:	212cd404 	addi	r4,r4,-19632
   22c38:	0022af40 	call	22af4 <alt_open_fd>
}  
   22c3c:	0001883a 	nop
   22c40:	e037883a 	mov	sp,fp
   22c44:	dfc00117 	ldw	ra,4(sp)
   22c48:	df000017 	ldw	fp,0(sp)
   22c4c:	dec00204 	addi	sp,sp,8
   22c50:	f800283a 	ret

00022c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22c54:	defffe04 	addi	sp,sp,-8
   22c58:	dfc00115 	stw	ra,4(sp)
   22c5c:	df000015 	stw	fp,0(sp)
   22c60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22c64:	d0a5bb17 	ldw	r2,-26900(gp)
   22c68:	10000326 	beq	r2,zero,22c78 <alt_get_errno+0x24>
   22c6c:	d0a5bb17 	ldw	r2,-26900(gp)
   22c70:	103ee83a 	callr	r2
   22c74:	00000106 	br	22c7c <alt_get_errno+0x28>
   22c78:	d0b24704 	addi	r2,gp,-14052
}
   22c7c:	e037883a 	mov	sp,fp
   22c80:	dfc00117 	ldw	ra,4(sp)
   22c84:	df000017 	ldw	fp,0(sp)
   22c88:	dec00204 	addi	sp,sp,8
   22c8c:	f800283a 	ret

00022c90 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22c90:	defffb04 	addi	sp,sp,-20
   22c94:	dfc00415 	stw	ra,16(sp)
   22c98:	df000315 	stw	fp,12(sp)
   22c9c:	dc000215 	stw	r16,8(sp)
   22ca0:	df000304 	addi	fp,sp,12
   22ca4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22ca8:	e0bffe17 	ldw	r2,-8(fp)
   22cac:	10800217 	ldw	r2,8(r2)
   22cb0:	10d00034 	orhi	r3,r2,16384
   22cb4:	e0bffe17 	ldw	r2,-8(fp)
   22cb8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22cbc:	e03ffd15 	stw	zero,-12(fp)
   22cc0:	00002306 	br	22d50 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22cc4:	040000f4 	movhi	r16,3
   22cc8:	842cce04 	addi	r16,r16,-19656
   22ccc:	e0bffd17 	ldw	r2,-12(fp)
   22cd0:	01400304 	movi	r5,12
   22cd4:	1009883a 	mov	r4,r2
   22cd8:	000ccac0 	call	ccac <__mulsi3>
   22cdc:	8085883a 	add	r2,r16,r2
   22ce0:	10c00017 	ldw	r3,0(r2)
   22ce4:	e0bffe17 	ldw	r2,-8(fp)
   22ce8:	10800017 	ldw	r2,0(r2)
   22cec:	1880151e 	bne	r3,r2,22d44 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22cf0:	040000f4 	movhi	r16,3
   22cf4:	842cce04 	addi	r16,r16,-19656
   22cf8:	e0bffd17 	ldw	r2,-12(fp)
   22cfc:	01400304 	movi	r5,12
   22d00:	1009883a 	mov	r4,r2
   22d04:	000ccac0 	call	ccac <__mulsi3>
   22d08:	8085883a 	add	r2,r16,r2
   22d0c:	10800204 	addi	r2,r2,8
   22d10:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22d14:	10000b0e 	bge	r2,zero,22d44 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   22d18:	01400304 	movi	r5,12
   22d1c:	e13ffd17 	ldw	r4,-12(fp)
   22d20:	000ccac0 	call	ccac <__mulsi3>
   22d24:	1007883a 	mov	r3,r2
   22d28:	008000f4 	movhi	r2,3
   22d2c:	10acce04 	addi	r2,r2,-19656
   22d30:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22d34:	e0bffe17 	ldw	r2,-8(fp)
   22d38:	18800226 	beq	r3,r2,22d44 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22d3c:	00bffcc4 	movi	r2,-13
   22d40:	00000806 	br	22d64 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22d44:	e0bffd17 	ldw	r2,-12(fp)
   22d48:	10800044 	addi	r2,r2,1
   22d4c:	e0bffd15 	stw	r2,-12(fp)
   22d50:	d0a5ba17 	ldw	r2,-26904(gp)
   22d54:	1007883a 	mov	r3,r2
   22d58:	e0bffd17 	ldw	r2,-12(fp)
   22d5c:	18bfd92e 	bgeu	r3,r2,22cc4 <__alt_data_end+0xfc022cc4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22d60:	0005883a 	mov	r2,zero
}
   22d64:	e6ffff04 	addi	sp,fp,-4
   22d68:	dfc00217 	ldw	ra,8(sp)
   22d6c:	df000117 	ldw	fp,4(sp)
   22d70:	dc000017 	ldw	r16,0(sp)
   22d74:	dec00304 	addi	sp,sp,12
   22d78:	f800283a 	ret

00022d7c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   22d7c:	defff604 	addi	sp,sp,-40
   22d80:	dfc00915 	stw	ra,36(sp)
   22d84:	df000815 	stw	fp,32(sp)
   22d88:	df000804 	addi	fp,sp,32
   22d8c:	e13ffd15 	stw	r4,-12(fp)
   22d90:	e17ffe15 	stw	r5,-8(fp)
   22d94:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22d98:	00bfffc4 	movi	r2,-1
   22d9c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   22da0:	00bffb44 	movi	r2,-19
   22da4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   22da8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   22dac:	d165b804 	addi	r5,gp,-26912
   22db0:	e13ffd17 	ldw	r4,-12(fp)
   22db4:	00227a40 	call	227a4 <alt_find_dev>
   22db8:	e0bff815 	stw	r2,-32(fp)
   22dbc:	e0bff817 	ldw	r2,-32(fp)
   22dc0:	1000051e 	bne	r2,zero,22dd8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22dc4:	e13ffd17 	ldw	r4,-12(fp)
   22dc8:	00233080 	call	23308 <alt_find_file>
   22dcc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   22dd0:	00800044 	movi	r2,1
   22dd4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22dd8:	e0bff817 	ldw	r2,-32(fp)
   22ddc:	10002b26 	beq	r2,zero,22e8c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22de0:	e13ff817 	ldw	r4,-32(fp)
   22de4:	00234100 	call	23410 <alt_get_fd>
   22de8:	e0bff915 	stw	r2,-28(fp)
   22dec:	e0bff917 	ldw	r2,-28(fp)
   22df0:	1000030e 	bge	r2,zero,22e00 <open+0x84>
    {
      status = index;
   22df4:	e0bff917 	ldw	r2,-28(fp)
   22df8:	e0bffa15 	stw	r2,-24(fp)
   22dfc:	00002506 	br	22e94 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   22e00:	01400304 	movi	r5,12
   22e04:	e13ff917 	ldw	r4,-28(fp)
   22e08:	000ccac0 	call	ccac <__mulsi3>
   22e0c:	1007883a 	mov	r3,r2
   22e10:	008000f4 	movhi	r2,3
   22e14:	10acce04 	addi	r2,r2,-19656
   22e18:	1885883a 	add	r2,r3,r2
   22e1c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22e20:	e0fffe17 	ldw	r3,-8(fp)
   22e24:	00900034 	movhi	r2,16384
   22e28:	10bfffc4 	addi	r2,r2,-1
   22e2c:	1886703a 	and	r3,r3,r2
   22e30:	e0bffc17 	ldw	r2,-16(fp)
   22e34:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22e38:	e0bffb17 	ldw	r2,-20(fp)
   22e3c:	1000051e 	bne	r2,zero,22e54 <open+0xd8>
   22e40:	e13ffc17 	ldw	r4,-16(fp)
   22e44:	0022c900 	call	22c90 <alt_file_locked>
   22e48:	e0bffa15 	stw	r2,-24(fp)
   22e4c:	e0bffa17 	ldw	r2,-24(fp)
   22e50:	10001016 	blt	r2,zero,22e94 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22e54:	e0bff817 	ldw	r2,-32(fp)
   22e58:	10800317 	ldw	r2,12(r2)
   22e5c:	10000826 	beq	r2,zero,22e80 <open+0x104>
   22e60:	e0bff817 	ldw	r2,-32(fp)
   22e64:	10800317 	ldw	r2,12(r2)
   22e68:	e1ffff17 	ldw	r7,-4(fp)
   22e6c:	e1bffe17 	ldw	r6,-8(fp)
   22e70:	e17ffd17 	ldw	r5,-12(fp)
   22e74:	e13ffc17 	ldw	r4,-16(fp)
   22e78:	103ee83a 	callr	r2
   22e7c:	00000106 	br	22e84 <open+0x108>
   22e80:	0005883a 	mov	r2,zero
   22e84:	e0bffa15 	stw	r2,-24(fp)
   22e88:	00000206 	br	22e94 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   22e8c:	00bffb44 	movi	r2,-19
   22e90:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   22e94:	e0bffa17 	ldw	r2,-24(fp)
   22e98:	1000090e 	bge	r2,zero,22ec0 <open+0x144>
  {
    alt_release_fd (index);  
   22e9c:	e13ff917 	ldw	r4,-28(fp)
   22ea0:	001f5bc0 	call	1f5bc <alt_release_fd>
    ALT_ERRNO = -status;
   22ea4:	0022c540 	call	22c54 <alt_get_errno>
   22ea8:	1007883a 	mov	r3,r2
   22eac:	e0bffa17 	ldw	r2,-24(fp)
   22eb0:	0085c83a 	sub	r2,zero,r2
   22eb4:	18800015 	stw	r2,0(r3)
    return -1;
   22eb8:	00bfffc4 	movi	r2,-1
   22ebc:	00000106 	br	22ec4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   22ec0:	e0bff917 	ldw	r2,-28(fp)
}
   22ec4:	e037883a 	mov	sp,fp
   22ec8:	dfc00117 	ldw	ra,4(sp)
   22ecc:	df000017 	ldw	fp,0(sp)
   22ed0:	dec00204 	addi	sp,sp,8
   22ed4:	f800283a 	ret

00022ed8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   22ed8:	defff204 	addi	sp,sp,-56
   22edc:	dfc00a15 	stw	ra,40(sp)
   22ee0:	df000915 	stw	fp,36(sp)
   22ee4:	df000904 	addi	fp,sp,36
   22ee8:	e13fff15 	stw	r4,-4(fp)
   22eec:	e1400215 	stw	r5,8(fp)
   22ef0:	e1800315 	stw	r6,12(fp)
   22ef4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   22ef8:	e0800204 	addi	r2,fp,8
   22efc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   22f00:	e0bfff17 	ldw	r2,-4(fp)
   22f04:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   22f08:	00006f06 	br	230c8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   22f0c:	e0bff807 	ldb	r2,-32(fp)
   22f10:	10800960 	cmpeqi	r2,r2,37
   22f14:	1000041e 	bne	r2,zero,22f28 <alt_printf+0x50>
        {
            alt_putchar(c);
   22f18:	e0bff807 	ldb	r2,-32(fp)
   22f1c:	1009883a 	mov	r4,r2
   22f20:	00231040 	call	23104 <alt_putchar>
   22f24:	00006806 	br	230c8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   22f28:	e0bff717 	ldw	r2,-36(fp)
   22f2c:	10c00044 	addi	r3,r2,1
   22f30:	e0fff715 	stw	r3,-36(fp)
   22f34:	10800003 	ldbu	r2,0(r2)
   22f38:	e0bff805 	stb	r2,-32(fp)
   22f3c:	e0bff807 	ldb	r2,-32(fp)
   22f40:	10006926 	beq	r2,zero,230e8 <alt_printf+0x210>
            {
                if (c == '%')
   22f44:	e0bff807 	ldb	r2,-32(fp)
   22f48:	10800958 	cmpnei	r2,r2,37
   22f4c:	1000041e 	bne	r2,zero,22f60 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   22f50:	e0bff807 	ldb	r2,-32(fp)
   22f54:	1009883a 	mov	r4,r2
   22f58:	00231040 	call	23104 <alt_putchar>
   22f5c:	00005a06 	br	230c8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   22f60:	e0bff807 	ldb	r2,-32(fp)
   22f64:	108018d8 	cmpnei	r2,r2,99
   22f68:	1000081e 	bne	r2,zero,22f8c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   22f6c:	e0bffe17 	ldw	r2,-8(fp)
   22f70:	10c00104 	addi	r3,r2,4
   22f74:	e0fffe15 	stw	r3,-8(fp)
   22f78:	10800017 	ldw	r2,0(r2)
   22f7c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   22f80:	e13ffd17 	ldw	r4,-12(fp)
   22f84:	00231040 	call	23104 <alt_putchar>
   22f88:	00004f06 	br	230c8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   22f8c:	e0bff807 	ldb	r2,-32(fp)
   22f90:	10801e18 	cmpnei	r2,r2,120
   22f94:	1000341e 	bne	r2,zero,23068 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   22f98:	e0bffe17 	ldw	r2,-8(fp)
   22f9c:	10c00104 	addi	r3,r2,4
   22fa0:	e0fffe15 	stw	r3,-8(fp)
   22fa4:	10800017 	ldw	r2,0(r2)
   22fa8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   22fac:	e0bffb17 	ldw	r2,-20(fp)
   22fb0:	1000031e 	bne	r2,zero,22fc0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   22fb4:	01000c04 	movi	r4,48
   22fb8:	00231040 	call	23104 <alt_putchar>
                        continue;
   22fbc:	00004206 	br	230c8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   22fc0:	00800704 	movi	r2,28
   22fc4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   22fc8:	00000306 	br	22fd8 <alt_printf+0x100>
                        digit_shift -= 4;
   22fcc:	e0bff917 	ldw	r2,-28(fp)
   22fd0:	10bfff04 	addi	r2,r2,-4
   22fd4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   22fd8:	00c003c4 	movi	r3,15
   22fdc:	e0bff917 	ldw	r2,-28(fp)
   22fe0:	1884983a 	sll	r2,r3,r2
   22fe4:	1007883a 	mov	r3,r2
   22fe8:	e0bffb17 	ldw	r2,-20(fp)
   22fec:	1884703a 	and	r2,r3,r2
   22ff0:	103ff626 	beq	r2,zero,22fcc <__alt_data_end+0xfc022fcc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   22ff4:	00001906 	br	2305c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   22ff8:	00c003c4 	movi	r3,15
   22ffc:	e0bff917 	ldw	r2,-28(fp)
   23000:	1884983a 	sll	r2,r3,r2
   23004:	1007883a 	mov	r3,r2
   23008:	e0bffb17 	ldw	r2,-20(fp)
   2300c:	1886703a 	and	r3,r3,r2
   23010:	e0bff917 	ldw	r2,-28(fp)
   23014:	1884d83a 	srl	r2,r3,r2
   23018:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   2301c:	e0bffc17 	ldw	r2,-16(fp)
   23020:	108002a8 	cmpgeui	r2,r2,10
   23024:	1000041e 	bne	r2,zero,23038 <alt_printf+0x160>
                            c = '0' + digit;
   23028:	e0bffc17 	ldw	r2,-16(fp)
   2302c:	10800c04 	addi	r2,r2,48
   23030:	e0bff805 	stb	r2,-32(fp)
   23034:	00000306 	br	23044 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   23038:	e0bffc17 	ldw	r2,-16(fp)
   2303c:	108015c4 	addi	r2,r2,87
   23040:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   23044:	e0bff807 	ldb	r2,-32(fp)
   23048:	1009883a 	mov	r4,r2
   2304c:	00231040 	call	23104 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   23050:	e0bff917 	ldw	r2,-28(fp)
   23054:	10bfff04 	addi	r2,r2,-4
   23058:	e0bff915 	stw	r2,-28(fp)
   2305c:	e0bff917 	ldw	r2,-28(fp)
   23060:	103fe50e 	bge	r2,zero,22ff8 <__alt_data_end+0xfc022ff8>
   23064:	00001806 	br	230c8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   23068:	e0bff807 	ldb	r2,-32(fp)
   2306c:	10801cd8 	cmpnei	r2,r2,115
   23070:	1000151e 	bne	r2,zero,230c8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   23074:	e0bffe17 	ldw	r2,-8(fp)
   23078:	10c00104 	addi	r3,r2,4
   2307c:	e0fffe15 	stw	r3,-8(fp)
   23080:	10800017 	ldw	r2,0(r2)
   23084:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   23088:	00000906 	br	230b0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   2308c:	e0bffa17 	ldw	r2,-24(fp)
   23090:	10c00044 	addi	r3,r2,1
   23094:	e0fffa15 	stw	r3,-24(fp)
   23098:	10800003 	ldbu	r2,0(r2)
   2309c:	10803fcc 	andi	r2,r2,255
   230a0:	1080201c 	xori	r2,r2,128
   230a4:	10bfe004 	addi	r2,r2,-128
   230a8:	1009883a 	mov	r4,r2
   230ac:	00231040 	call	23104 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   230b0:	e0bffa17 	ldw	r2,-24(fp)
   230b4:	10800003 	ldbu	r2,0(r2)
   230b8:	10803fcc 	andi	r2,r2,255
   230bc:	1080201c 	xori	r2,r2,128
   230c0:	10bfe004 	addi	r2,r2,-128
   230c4:	103ff11e 	bne	r2,zero,2308c <__alt_data_end+0xfc02308c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   230c8:	e0bff717 	ldw	r2,-36(fp)
   230cc:	10c00044 	addi	r3,r2,1
   230d0:	e0fff715 	stw	r3,-36(fp)
   230d4:	10800003 	ldbu	r2,0(r2)
   230d8:	e0bff805 	stb	r2,-32(fp)
   230dc:	e0bff807 	ldb	r2,-32(fp)
   230e0:	103f8a1e 	bne	r2,zero,22f0c <__alt_data_end+0xfc022f0c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   230e4:	00000106 	br	230ec <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   230e8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   230ec:	0001883a 	nop
   230f0:	e037883a 	mov	sp,fp
   230f4:	dfc00117 	ldw	ra,4(sp)
   230f8:	df000017 	ldw	fp,0(sp)
   230fc:	dec00504 	addi	sp,sp,20
   23100:	f800283a 	ret

00023104 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   23104:	defffd04 	addi	sp,sp,-12
   23108:	dfc00215 	stw	ra,8(sp)
   2310c:	df000115 	stw	fp,4(sp)
   23110:	df000104 	addi	fp,sp,4
   23114:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   23118:	d0a5b117 	ldw	r2,-26940(gp)
   2311c:	10800217 	ldw	r2,8(r2)
   23120:	100b883a 	mov	r5,r2
   23124:	e13fff17 	ldw	r4,-4(fp)
   23128:	0017b480 	call	17b48 <putc>
#endif
#endif
}
   2312c:	e037883a 	mov	sp,fp
   23130:	dfc00117 	ldw	ra,4(sp)
   23134:	df000017 	ldw	fp,0(sp)
   23138:	dec00204 	addi	sp,sp,8
   2313c:	f800283a 	ret

00023140 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   23140:	defffa04 	addi	sp,sp,-24
   23144:	df000515 	stw	fp,20(sp)
   23148:	df000504 	addi	fp,sp,20
   2314c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23150:	0005303a 	rdctl	r2,status
   23154:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23158:	e0fffc17 	ldw	r3,-16(fp)
   2315c:	00bfff84 	movi	r2,-2
   23160:	1884703a 	and	r2,r3,r2
   23164:	1001703a 	wrctl	status,r2
  
  return context;
   23168:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2316c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   23170:	e0bfff17 	ldw	r2,-4(fp)
   23174:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   23178:	e0bffd17 	ldw	r2,-12(fp)
   2317c:	10800017 	ldw	r2,0(r2)
   23180:	e0fffd17 	ldw	r3,-12(fp)
   23184:	18c00117 	ldw	r3,4(r3)
   23188:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2318c:	e0bffd17 	ldw	r2,-12(fp)
   23190:	10800117 	ldw	r2,4(r2)
   23194:	e0fffd17 	ldw	r3,-12(fp)
   23198:	18c00017 	ldw	r3,0(r3)
   2319c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   231a0:	e0bffd17 	ldw	r2,-12(fp)
   231a4:	e0fffd17 	ldw	r3,-12(fp)
   231a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   231ac:	e0bffd17 	ldw	r2,-12(fp)
   231b0:	e0fffd17 	ldw	r3,-12(fp)
   231b4:	10c00015 	stw	r3,0(r2)
   231b8:	e0bffb17 	ldw	r2,-20(fp)
   231bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   231c0:	e0bffe17 	ldw	r2,-8(fp)
   231c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   231c8:	0001883a 	nop
   231cc:	e037883a 	mov	sp,fp
   231d0:	df000017 	ldw	fp,0(sp)
   231d4:	dec00104 	addi	sp,sp,4
   231d8:	f800283a 	ret

000231dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   231dc:	defffb04 	addi	sp,sp,-20
   231e0:	dfc00415 	stw	ra,16(sp)
   231e4:	df000315 	stw	fp,12(sp)
   231e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   231ec:	d0a5c017 	ldw	r2,-26880(gp)
   231f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   231f4:	d0b25017 	ldw	r2,-14016(gp)
   231f8:	10800044 	addi	r2,r2,1
   231fc:	d0b25015 	stw	r2,-14016(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23200:	00002e06 	br	232bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   23204:	e0bffd17 	ldw	r2,-12(fp)
   23208:	10800017 	ldw	r2,0(r2)
   2320c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   23210:	e0bffd17 	ldw	r2,-12(fp)
   23214:	10800403 	ldbu	r2,16(r2)
   23218:	10803fcc 	andi	r2,r2,255
   2321c:	10000426 	beq	r2,zero,23230 <alt_tick+0x54>
   23220:	d0b25017 	ldw	r2,-14016(gp)
   23224:	1000021e 	bne	r2,zero,23230 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   23228:	e0bffd17 	ldw	r2,-12(fp)
   2322c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   23230:	e0bffd17 	ldw	r2,-12(fp)
   23234:	10800217 	ldw	r2,8(r2)
   23238:	d0f25017 	ldw	r3,-14016(gp)
   2323c:	18801d36 	bltu	r3,r2,232b4 <alt_tick+0xd8>
   23240:	e0bffd17 	ldw	r2,-12(fp)
   23244:	10800403 	ldbu	r2,16(r2)
   23248:	10803fcc 	andi	r2,r2,255
   2324c:	1000191e 	bne	r2,zero,232b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   23250:	e0bffd17 	ldw	r2,-12(fp)
   23254:	10800317 	ldw	r2,12(r2)
   23258:	e0fffd17 	ldw	r3,-12(fp)
   2325c:	18c00517 	ldw	r3,20(r3)
   23260:	1809883a 	mov	r4,r3
   23264:	103ee83a 	callr	r2
   23268:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2326c:	e0bfff17 	ldw	r2,-4(fp)
   23270:	1000031e 	bne	r2,zero,23280 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   23274:	e13ffd17 	ldw	r4,-12(fp)
   23278:	00231400 	call	23140 <alt_alarm_stop>
   2327c:	00000d06 	br	232b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   23280:	e0bffd17 	ldw	r2,-12(fp)
   23284:	10c00217 	ldw	r3,8(r2)
   23288:	e0bfff17 	ldw	r2,-4(fp)
   2328c:	1887883a 	add	r3,r3,r2
   23290:	e0bffd17 	ldw	r2,-12(fp)
   23294:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   23298:	e0bffd17 	ldw	r2,-12(fp)
   2329c:	10c00217 	ldw	r3,8(r2)
   232a0:	d0b25017 	ldw	r2,-14016(gp)
   232a4:	1880032e 	bgeu	r3,r2,232b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   232a8:	e0bffd17 	ldw	r2,-12(fp)
   232ac:	00c00044 	movi	r3,1
   232b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   232b4:	e0bffe17 	ldw	r2,-8(fp)
   232b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   232bc:	e0fffd17 	ldw	r3,-12(fp)
   232c0:	d0a5c004 	addi	r2,gp,-26880
   232c4:	18bfcf1e 	bne	r3,r2,23204 <__alt_data_end+0xfc023204>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   232c8:	0001883a 	nop
}
   232cc:	0001883a 	nop
   232d0:	e037883a 	mov	sp,fp
   232d4:	dfc00117 	ldw	ra,4(sp)
   232d8:	df000017 	ldw	fp,0(sp)
   232dc:	dec00204 	addi	sp,sp,8
   232e0:	f800283a 	ret

000232e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   232e4:	deffff04 	addi	sp,sp,-4
   232e8:	df000015 	stw	fp,0(sp)
   232ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   232f0:	000170fa 	wrctl	ienable,zero
}
   232f4:	0001883a 	nop
   232f8:	e037883a 	mov	sp,fp
   232fc:	df000017 	ldw	fp,0(sp)
   23300:	dec00104 	addi	sp,sp,4
   23304:	f800283a 	ret

00023308 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   23308:	defffb04 	addi	sp,sp,-20
   2330c:	dfc00415 	stw	ra,16(sp)
   23310:	df000315 	stw	fp,12(sp)
   23314:	df000304 	addi	fp,sp,12
   23318:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2331c:	d0a5b617 	ldw	r2,-26920(gp)
   23320:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23324:	00003106 	br	233ec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   23328:	e0bffd17 	ldw	r2,-12(fp)
   2332c:	10800217 	ldw	r2,8(r2)
   23330:	1009883a 	mov	r4,r2
   23334:	000f3280 	call	f328 <strlen>
   23338:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2333c:	e0bffd17 	ldw	r2,-12(fp)
   23340:	10c00217 	ldw	r3,8(r2)
   23344:	e0bffe17 	ldw	r2,-8(fp)
   23348:	10bfffc4 	addi	r2,r2,-1
   2334c:	1885883a 	add	r2,r3,r2
   23350:	10800003 	ldbu	r2,0(r2)
   23354:	10803fcc 	andi	r2,r2,255
   23358:	1080201c 	xori	r2,r2,128
   2335c:	10bfe004 	addi	r2,r2,-128
   23360:	10800bd8 	cmpnei	r2,r2,47
   23364:	1000031e 	bne	r2,zero,23374 <alt_find_file+0x6c>
    {
      len -= 1;
   23368:	e0bffe17 	ldw	r2,-8(fp)
   2336c:	10bfffc4 	addi	r2,r2,-1
   23370:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   23374:	e0bffe17 	ldw	r2,-8(fp)
   23378:	e0ffff17 	ldw	r3,-4(fp)
   2337c:	1885883a 	add	r2,r3,r2
   23380:	10800003 	ldbu	r2,0(r2)
   23384:	10803fcc 	andi	r2,r2,255
   23388:	1080201c 	xori	r2,r2,128
   2338c:	10bfe004 	addi	r2,r2,-128
   23390:	10800be0 	cmpeqi	r2,r2,47
   23394:	1000081e 	bne	r2,zero,233b8 <alt_find_file+0xb0>
   23398:	e0bffe17 	ldw	r2,-8(fp)
   2339c:	e0ffff17 	ldw	r3,-4(fp)
   233a0:	1885883a 	add	r2,r3,r2
   233a4:	10800003 	ldbu	r2,0(r2)
   233a8:	10803fcc 	andi	r2,r2,255
   233ac:	1080201c 	xori	r2,r2,128
   233b0:	10bfe004 	addi	r2,r2,-128
   233b4:	10000a1e 	bne	r2,zero,233e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   233b8:	e0bffd17 	ldw	r2,-12(fp)
   233bc:	10800217 	ldw	r2,8(r2)
   233c0:	e0fffe17 	ldw	r3,-8(fp)
   233c4:	180d883a 	mov	r6,r3
   233c8:	e17fff17 	ldw	r5,-4(fp)
   233cc:	1009883a 	mov	r4,r2
   233d0:	00235bc0 	call	235bc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   233d4:	1000021e 	bne	r2,zero,233e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   233d8:	e0bffd17 	ldw	r2,-12(fp)
   233dc:	00000706 	br	233fc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   233e0:	e0bffd17 	ldw	r2,-12(fp)
   233e4:	10800017 	ldw	r2,0(r2)
   233e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   233ec:	e0fffd17 	ldw	r3,-12(fp)
   233f0:	d0a5b604 	addi	r2,gp,-26920
   233f4:	18bfcc1e 	bne	r3,r2,23328 <__alt_data_end+0xfc023328>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   233f8:	0005883a 	mov	r2,zero
}
   233fc:	e037883a 	mov	sp,fp
   23400:	dfc00117 	ldw	ra,4(sp)
   23404:	df000017 	ldw	fp,0(sp)
   23408:	dec00204 	addi	sp,sp,8
   2340c:	f800283a 	ret

00023410 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   23410:	defffa04 	addi	sp,sp,-24
   23414:	dfc00515 	stw	ra,20(sp)
   23418:	df000415 	stw	fp,16(sp)
   2341c:	dc000315 	stw	r16,12(sp)
   23420:	df000404 	addi	fp,sp,16
   23424:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   23428:	00bffa04 	movi	r2,-24
   2342c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23430:	e03ffc15 	stw	zero,-16(fp)
   23434:	00001d06 	br	234ac <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   23438:	040000f4 	movhi	r16,3
   2343c:	842cce04 	addi	r16,r16,-19656
   23440:	e0bffc17 	ldw	r2,-16(fp)
   23444:	01400304 	movi	r5,12
   23448:	1009883a 	mov	r4,r2
   2344c:	000ccac0 	call	ccac <__mulsi3>
   23450:	8085883a 	add	r2,r16,r2
   23454:	10800017 	ldw	r2,0(r2)
   23458:	1000111e 	bne	r2,zero,234a0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   2345c:	040000f4 	movhi	r16,3
   23460:	842cce04 	addi	r16,r16,-19656
   23464:	e0bffc17 	ldw	r2,-16(fp)
   23468:	01400304 	movi	r5,12
   2346c:	1009883a 	mov	r4,r2
   23470:	000ccac0 	call	ccac <__mulsi3>
   23474:	8085883a 	add	r2,r16,r2
   23478:	e0fffe17 	ldw	r3,-8(fp)
   2347c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   23480:	d0e5ba17 	ldw	r3,-26904(gp)
   23484:	e0bffc17 	ldw	r2,-16(fp)
   23488:	1880020e 	bge	r3,r2,23494 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   2348c:	e0bffc17 	ldw	r2,-16(fp)
   23490:	d0a5ba15 	stw	r2,-26904(gp)
      }
      rc = i;
   23494:	e0bffc17 	ldw	r2,-16(fp)
   23498:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2349c:	00000606 	br	234b8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   234a0:	e0bffc17 	ldw	r2,-16(fp)
   234a4:	10800044 	addi	r2,r2,1
   234a8:	e0bffc15 	stw	r2,-16(fp)
   234ac:	e0bffc17 	ldw	r2,-16(fp)
   234b0:	10800810 	cmplti	r2,r2,32
   234b4:	103fe01e 	bne	r2,zero,23438 <__alt_data_end+0xfc023438>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   234b8:	e0bffd17 	ldw	r2,-12(fp)
}
   234bc:	e6ffff04 	addi	sp,fp,-4
   234c0:	dfc00217 	ldw	ra,8(sp)
   234c4:	df000117 	ldw	fp,4(sp)
   234c8:	dc000017 	ldw	r16,0(sp)
   234cc:	dec00304 	addi	sp,sp,12
   234d0:	f800283a 	ret

000234d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   234d4:	defffe04 	addi	sp,sp,-8
   234d8:	df000115 	stw	fp,4(sp)
   234dc:	df000104 	addi	fp,sp,4
   234e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   234e4:	e0bfff17 	ldw	r2,-4(fp)
   234e8:	10bffe84 	addi	r2,r2,-6
   234ec:	10c00428 	cmpgeui	r3,r2,16
   234f0:	18001a1e 	bne	r3,zero,2355c <alt_exception_cause_generated_bad_addr+0x88>
   234f4:	100690ba 	slli	r3,r2,2
   234f8:	008000b4 	movhi	r2,2
   234fc:	108d4304 	addi	r2,r2,13580
   23500:	1885883a 	add	r2,r3,r2
   23504:	10800017 	ldw	r2,0(r2)
   23508:	1000683a 	jmp	r2
   2350c:	0002354c 	andi	zero,zero,2261
   23510:	0002354c 	andi	zero,zero,2261
   23514:	0002355c 	xori	zero,zero,2261
   23518:	0002355c 	xori	zero,zero,2261
   2351c:	0002355c 	xori	zero,zero,2261
   23520:	0002354c 	andi	zero,zero,2261
   23524:	00023554 	movui	zero,2261
   23528:	0002355c 	xori	zero,zero,2261
   2352c:	0002354c 	andi	zero,zero,2261
   23530:	0002354c 	andi	zero,zero,2261
   23534:	0002355c 	xori	zero,zero,2261
   23538:	0002354c 	andi	zero,zero,2261
   2353c:	00023554 	movui	zero,2261
   23540:	0002355c 	xori	zero,zero,2261
   23544:	0002355c 	xori	zero,zero,2261
   23548:	0002354c 	andi	zero,zero,2261
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2354c:	00800044 	movi	r2,1
   23550:	00000306 	br	23560 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23554:	0005883a 	mov	r2,zero
   23558:	00000106 	br	23560 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2355c:	0005883a 	mov	r2,zero
  }
}
   23560:	e037883a 	mov	sp,fp
   23564:	df000017 	ldw	fp,0(sp)
   23568:	dec00104 	addi	sp,sp,4
   2356c:	f800283a 	ret

00023570 <atexit>:
   23570:	200b883a 	mov	r5,r4
   23574:	000f883a 	mov	r7,zero
   23578:	000d883a 	mov	r6,zero
   2357c:	0009883a 	mov	r4,zero
   23580:	00236381 	jmpi	23638 <__register_exitproc>

00023584 <exit>:
   23584:	defffe04 	addi	sp,sp,-8
   23588:	000b883a 	mov	r5,zero
   2358c:	dc000015 	stw	r16,0(sp)
   23590:	dfc00115 	stw	ra,4(sp)
   23594:	2021883a 	mov	r16,r4
   23598:	00237500 	call	23750 <__call_exitprocs>
   2359c:	008000f4 	movhi	r2,3
   235a0:	10b70404 	addi	r2,r2,-9200
   235a4:	11000017 	ldw	r4,0(r2)
   235a8:	20800f17 	ldw	r2,60(r4)
   235ac:	10000126 	beq	r2,zero,235b4 <exit+0x30>
   235b0:	103ee83a 	callr	r2
   235b4:	8009883a 	mov	r4,r16
   235b8:	001ee180 	call	1ee18 <_exit>

000235bc <memcmp>:
   235bc:	01c000c4 	movi	r7,3
   235c0:	3980192e 	bgeu	r7,r6,23628 <memcmp+0x6c>
   235c4:	2144b03a 	or	r2,r4,r5
   235c8:	11c4703a 	and	r2,r2,r7
   235cc:	10000f26 	beq	r2,zero,2360c <memcmp+0x50>
   235d0:	20800003 	ldbu	r2,0(r4)
   235d4:	28c00003 	ldbu	r3,0(r5)
   235d8:	10c0151e 	bne	r2,r3,23630 <memcmp+0x74>
   235dc:	31bfff84 	addi	r6,r6,-2
   235e0:	01ffffc4 	movi	r7,-1
   235e4:	00000406 	br	235f8 <memcmp+0x3c>
   235e8:	20800003 	ldbu	r2,0(r4)
   235ec:	28c00003 	ldbu	r3,0(r5)
   235f0:	31bfffc4 	addi	r6,r6,-1
   235f4:	10c00e1e 	bne	r2,r3,23630 <memcmp+0x74>
   235f8:	21000044 	addi	r4,r4,1
   235fc:	29400044 	addi	r5,r5,1
   23600:	31fff91e 	bne	r6,r7,235e8 <__alt_data_end+0xfc0235e8>
   23604:	0005883a 	mov	r2,zero
   23608:	f800283a 	ret
   2360c:	20c00017 	ldw	r3,0(r4)
   23610:	28800017 	ldw	r2,0(r5)
   23614:	18bfee1e 	bne	r3,r2,235d0 <__alt_data_end+0xfc0235d0>
   23618:	31bfff04 	addi	r6,r6,-4
   2361c:	21000104 	addi	r4,r4,4
   23620:	29400104 	addi	r5,r5,4
   23624:	39bff936 	bltu	r7,r6,2360c <__alt_data_end+0xfc02360c>
   23628:	303fe91e 	bne	r6,zero,235d0 <__alt_data_end+0xfc0235d0>
   2362c:	003ff506 	br	23604 <__alt_data_end+0xfc023604>
   23630:	10c5c83a 	sub	r2,r2,r3
   23634:	f800283a 	ret

00023638 <__register_exitproc>:
   23638:	defffa04 	addi	sp,sp,-24
   2363c:	dc000315 	stw	r16,12(sp)
   23640:	040000f4 	movhi	r16,3
   23644:	84370404 	addi	r16,r16,-9200
   23648:	80c00017 	ldw	r3,0(r16)
   2364c:	dc400415 	stw	r17,16(sp)
   23650:	dfc00515 	stw	ra,20(sp)
   23654:	18805217 	ldw	r2,328(r3)
   23658:	2023883a 	mov	r17,r4
   2365c:	10003726 	beq	r2,zero,2373c <__register_exitproc+0x104>
   23660:	10c00117 	ldw	r3,4(r2)
   23664:	010007c4 	movi	r4,31
   23668:	20c00e16 	blt	r4,r3,236a4 <__register_exitproc+0x6c>
   2366c:	1a000044 	addi	r8,r3,1
   23670:	8800221e 	bne	r17,zero,236fc <__register_exitproc+0xc4>
   23674:	18c00084 	addi	r3,r3,2
   23678:	18c7883a 	add	r3,r3,r3
   2367c:	18c7883a 	add	r3,r3,r3
   23680:	12000115 	stw	r8,4(r2)
   23684:	10c7883a 	add	r3,r2,r3
   23688:	19400015 	stw	r5,0(r3)
   2368c:	0005883a 	mov	r2,zero
   23690:	dfc00517 	ldw	ra,20(sp)
   23694:	dc400417 	ldw	r17,16(sp)
   23698:	dc000317 	ldw	r16,12(sp)
   2369c:	dec00604 	addi	sp,sp,24
   236a0:	f800283a 	ret
   236a4:	00800074 	movhi	r2,1
   236a8:	10b88b04 	addi	r2,r2,-7636
   236ac:	10002626 	beq	r2,zero,23748 <__register_exitproc+0x110>
   236b0:	01006404 	movi	r4,400
   236b4:	d9400015 	stw	r5,0(sp)
   236b8:	d9800115 	stw	r6,4(sp)
   236bc:	d9c00215 	stw	r7,8(sp)
   236c0:	000e22c0 	call	e22c <malloc>
   236c4:	d9400017 	ldw	r5,0(sp)
   236c8:	d9800117 	ldw	r6,4(sp)
   236cc:	d9c00217 	ldw	r7,8(sp)
   236d0:	10001d26 	beq	r2,zero,23748 <__register_exitproc+0x110>
   236d4:	81000017 	ldw	r4,0(r16)
   236d8:	10000115 	stw	zero,4(r2)
   236dc:	02000044 	movi	r8,1
   236e0:	22405217 	ldw	r9,328(r4)
   236e4:	0007883a 	mov	r3,zero
   236e8:	12400015 	stw	r9,0(r2)
   236ec:	20805215 	stw	r2,328(r4)
   236f0:	10006215 	stw	zero,392(r2)
   236f4:	10006315 	stw	zero,396(r2)
   236f8:	883fde26 	beq	r17,zero,23674 <__alt_data_end+0xfc023674>
   236fc:	18c9883a 	add	r4,r3,r3
   23700:	2109883a 	add	r4,r4,r4
   23704:	1109883a 	add	r4,r2,r4
   23708:	21802215 	stw	r6,136(r4)
   2370c:	01800044 	movi	r6,1
   23710:	12406217 	ldw	r9,392(r2)
   23714:	30cc983a 	sll	r6,r6,r3
   23718:	4992b03a 	or	r9,r9,r6
   2371c:	12406215 	stw	r9,392(r2)
   23720:	21c04215 	stw	r7,264(r4)
   23724:	01000084 	movi	r4,2
   23728:	893fd21e 	bne	r17,r4,23674 <__alt_data_end+0xfc023674>
   2372c:	11006317 	ldw	r4,396(r2)
   23730:	218cb03a 	or	r6,r4,r6
   23734:	11806315 	stw	r6,396(r2)
   23738:	003fce06 	br	23674 <__alt_data_end+0xfc023674>
   2373c:	18805304 	addi	r2,r3,332
   23740:	18805215 	stw	r2,328(r3)
   23744:	003fc606 	br	23660 <__alt_data_end+0xfc023660>
   23748:	00bfffc4 	movi	r2,-1
   2374c:	003fd006 	br	23690 <__alt_data_end+0xfc023690>

00023750 <__call_exitprocs>:
   23750:	defff504 	addi	sp,sp,-44
   23754:	df000915 	stw	fp,36(sp)
   23758:	dd400615 	stw	r21,24(sp)
   2375c:	dc800315 	stw	r18,12(sp)
   23760:	dfc00a15 	stw	ra,40(sp)
   23764:	ddc00815 	stw	r23,32(sp)
   23768:	dd800715 	stw	r22,28(sp)
   2376c:	dd000515 	stw	r20,20(sp)
   23770:	dcc00415 	stw	r19,16(sp)
   23774:	dc400215 	stw	r17,8(sp)
   23778:	dc000115 	stw	r16,4(sp)
   2377c:	d9000015 	stw	r4,0(sp)
   23780:	2839883a 	mov	fp,r5
   23784:	04800044 	movi	r18,1
   23788:	057fffc4 	movi	r21,-1
   2378c:	008000f4 	movhi	r2,3
   23790:	10b70404 	addi	r2,r2,-9200
   23794:	12000017 	ldw	r8,0(r2)
   23798:	45005217 	ldw	r20,328(r8)
   2379c:	44c05204 	addi	r19,r8,328
   237a0:	a0001c26 	beq	r20,zero,23814 <__call_exitprocs+0xc4>
   237a4:	a0800117 	ldw	r2,4(r20)
   237a8:	15ffffc4 	addi	r23,r2,-1
   237ac:	b8000d16 	blt	r23,zero,237e4 <__call_exitprocs+0x94>
   237b0:	14000044 	addi	r16,r2,1
   237b4:	8421883a 	add	r16,r16,r16
   237b8:	8421883a 	add	r16,r16,r16
   237bc:	84402004 	addi	r17,r16,128
   237c0:	a463883a 	add	r17,r20,r17
   237c4:	a421883a 	add	r16,r20,r16
   237c8:	e0001e26 	beq	fp,zero,23844 <__call_exitprocs+0xf4>
   237cc:	80804017 	ldw	r2,256(r16)
   237d0:	e0801c26 	beq	fp,r2,23844 <__call_exitprocs+0xf4>
   237d4:	bdffffc4 	addi	r23,r23,-1
   237d8:	843fff04 	addi	r16,r16,-4
   237dc:	8c7fff04 	addi	r17,r17,-4
   237e0:	bd7ff91e 	bne	r23,r21,237c8 <__alt_data_end+0xfc0237c8>
   237e4:	00800074 	movhi	r2,1
   237e8:	10b89004 	addi	r2,r2,-7616
   237ec:	10000926 	beq	r2,zero,23814 <__call_exitprocs+0xc4>
   237f0:	a0800117 	ldw	r2,4(r20)
   237f4:	1000301e 	bne	r2,zero,238b8 <__call_exitprocs+0x168>
   237f8:	a0800017 	ldw	r2,0(r20)
   237fc:	10003226 	beq	r2,zero,238c8 <__call_exitprocs+0x178>
   23800:	a009883a 	mov	r4,r20
   23804:	98800015 	stw	r2,0(r19)
   23808:	000e2400 	call	e240 <free>
   2380c:	9d000017 	ldw	r20,0(r19)
   23810:	a03fe41e 	bne	r20,zero,237a4 <__alt_data_end+0xfc0237a4>
   23814:	dfc00a17 	ldw	ra,40(sp)
   23818:	df000917 	ldw	fp,36(sp)
   2381c:	ddc00817 	ldw	r23,32(sp)
   23820:	dd800717 	ldw	r22,28(sp)
   23824:	dd400617 	ldw	r21,24(sp)
   23828:	dd000517 	ldw	r20,20(sp)
   2382c:	dcc00417 	ldw	r19,16(sp)
   23830:	dc800317 	ldw	r18,12(sp)
   23834:	dc400217 	ldw	r17,8(sp)
   23838:	dc000117 	ldw	r16,4(sp)
   2383c:	dec00b04 	addi	sp,sp,44
   23840:	f800283a 	ret
   23844:	a0800117 	ldw	r2,4(r20)
   23848:	80c00017 	ldw	r3,0(r16)
   2384c:	10bfffc4 	addi	r2,r2,-1
   23850:	15c01426 	beq	r2,r23,238a4 <__call_exitprocs+0x154>
   23854:	80000015 	stw	zero,0(r16)
   23858:	183fde26 	beq	r3,zero,237d4 <__alt_data_end+0xfc0237d4>
   2385c:	95c8983a 	sll	r4,r18,r23
   23860:	a0806217 	ldw	r2,392(r20)
   23864:	a5800117 	ldw	r22,4(r20)
   23868:	2084703a 	and	r2,r4,r2
   2386c:	10000b26 	beq	r2,zero,2389c <__call_exitprocs+0x14c>
   23870:	a0806317 	ldw	r2,396(r20)
   23874:	2088703a 	and	r4,r4,r2
   23878:	20000c1e 	bne	r4,zero,238ac <__call_exitprocs+0x15c>
   2387c:	89400017 	ldw	r5,0(r17)
   23880:	d9000017 	ldw	r4,0(sp)
   23884:	183ee83a 	callr	r3
   23888:	a0800117 	ldw	r2,4(r20)
   2388c:	15bfbf1e 	bne	r2,r22,2378c <__alt_data_end+0xfc02378c>
   23890:	98800017 	ldw	r2,0(r19)
   23894:	153fcf26 	beq	r2,r20,237d4 <__alt_data_end+0xfc0237d4>
   23898:	003fbc06 	br	2378c <__alt_data_end+0xfc02378c>
   2389c:	183ee83a 	callr	r3
   238a0:	003ff906 	br	23888 <__alt_data_end+0xfc023888>
   238a4:	a5c00115 	stw	r23,4(r20)
   238a8:	003feb06 	br	23858 <__alt_data_end+0xfc023858>
   238ac:	89000017 	ldw	r4,0(r17)
   238b0:	183ee83a 	callr	r3
   238b4:	003ff406 	br	23888 <__alt_data_end+0xfc023888>
   238b8:	a0800017 	ldw	r2,0(r20)
   238bc:	a027883a 	mov	r19,r20
   238c0:	1029883a 	mov	r20,r2
   238c4:	003fb606 	br	237a0 <__alt_data_end+0xfc0237a0>
   238c8:	0005883a 	mov	r2,zero
   238cc:	003ffb06 	br	238bc <__alt_data_end+0xfc0238bc>
   238d0:	01110bff 	0x1110bff
   238d4:	01010004 	movi	r4,1024
   238d8:	7f000105 	stb	fp,4(r15)
   238dc:	007d0000 	call	7d000 <_gp+0x48ab0>
   238e0:	00000000 	call	0 <__alt_mem_sdram>
   238e4:	01883a00 	call	1883a0 <_gp+0x153e50>
   238e8:	010d0bff 	0x10d0bff
   238ec:	01010002 	0x1010002
	...
   238f8:	010d0bff 	0x10d0bff
   238fc:	01010004 	movi	r4,1024
   23900:	00000100 	call	10 <__alt_mem_sdram+0x10>
   23904:	00000000 	call	0 <__alt_mem_sdram>
   23908:	0000a1c0 	call	a1c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc>
   2390c:	0000c994 	movui	zero,806
