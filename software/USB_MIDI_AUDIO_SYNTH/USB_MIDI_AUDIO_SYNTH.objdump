
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002bb20 memsz 0x0002bb20 flags r-x
    LOAD off    0x0002cb40 vaddr 0x0002bb40 paddr 0x0002ed34 align 2**12
         filesz 0x000031f4 memsz 0x000031f4 flags rw-
    LOAD off    0x0002ff28 vaddr 0x00031f28 paddr 0x00031f28 align 2**12
         filesz 0x00000000 memsz 0x000002b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024900  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00007010  00024b30  00024b30  00025b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031f4  0002bb40  0002ed34  0002cb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b8  00031f28  00031f28  0002ff28  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000321e0  000321e0  0002fd34  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002fd34  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001ad8  00000000  00000000  0002fd58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0005398a  00000000  00000000  00031830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001100b  00000000  00000000  000851ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015ad9  00000000  00000000  000961c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005a48  00000000  00000000  000abca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ffee  00000000  00000000  000b16e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00025010  00000000  00000000  000c16d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e66e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002dd0  00000000  00000000  000e6758  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  001020aa  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  001020ad  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  001020b2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  001020b3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  001020b4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  001020b8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  001020bc  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  001020c0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  001020cb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  001020d6  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  001020e1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  001020f5  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  00102120  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fb08  00000000  00000000  001075a7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00024b30 l    d  .rodata	00000000 .rodata
0002bb40 l    d  .rwdata	00000000 .rwdata
00031f28 l    d  .bss	00000000 .bss
000321e0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002d624 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d625 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d626 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d627 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002d628 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d629 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d62a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d62b l     O .rwdata	00000001 _ZL9SPI_MODE3
00031f28 l     O .bss	00000001 _ZL9usb_error
00031f29 l     O .bss	00000001 _ZL14usb_task_state
00031f2c l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002d634 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d635 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d636 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d637 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d638 l     O .rwdata	00000006 _ZL9XBOX_LEDS
00024c3a l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003d04 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
0002d658 l     O .rwdata	00000004 _ZL5synth
00000000 l    df *ABS*	00000000 hidboot.cpp
0002d65c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d65d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d65e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d65f l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d660 l     O .rwdata	00000002 _ZL9pstrSpace
0002d664 l     O .rwdata	00000003 _ZL8pstrCRLF
0002d668 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d66c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d670 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d674 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00024e84 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00024e98 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00024ea4 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00024eb0 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00024ebc l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00024ec8 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00024ed8 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d67c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d684 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d68c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d694 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00024ee4 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00024ef0 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d698 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d69c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00024efc l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00024f0c l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d6a4 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d6ac l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00024f1c l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d6b4 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00024f2c l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d6bc l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00024f44 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d6c0 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00024f50 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00024f5c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002d6c8 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002d6d0 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00024f68 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00024f74 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002d6d8 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002d6e0 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00024f80 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00024f90 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002d6e8 l     O .rwdata	00000002 _ZL10pstrUsageX
0002d6ec l     O .rwdata	00000002 _ZL10pstrUsageY
0002d6f0 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002d6f4 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002d6f8 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002d6fc l     O .rwdata	00000003 _ZL11pstrUsageRz
0002d700 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002d708 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002d710 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00024fa4 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00024fb0 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00024fbc l     O .rodata	0000000b _ZL18pstrUsageByteCount
00024fc8 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002d718 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002d720 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002d724 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002d728 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002d72c l     O .rwdata	00000003 _ZL11pstrUsageVz
0002d730 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002d738 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d740 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d748 l     O .rwdata	00000004 _ZL12pstrUsageVno
00024fd8 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00024fe8 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00024ff4 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00025000 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00025010 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
0002501c l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00025028 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
0002503c l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0002504c l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0002505c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0002506c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0002507c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0002508c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0002509c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000250ac l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000250b8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000250c8 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000250dc l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000250f0 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000250fc l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00025108 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00025114 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00025120 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0002512c l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00025138 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00025144 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00025150 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0002515c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00025168 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00025174 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00025184 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00025190 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000251a0 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000251b0 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000251c0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000251d0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000251e0 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000251f8 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00025210 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00025228 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00025238 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00025248 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00025258 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00025268 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00025278 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00025288 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00025298 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000252a8 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000252b8 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000252c8 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000252e0 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000252f0 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00025304 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00025314 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00025320 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
0002532c l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00025338 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d74c l     O .rwdata	00000008 _ZL16pstrUsageAileron
00025344 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00025354 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00025368 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0002537c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0002538c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0002539c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000253a8 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000253bc l     O .rodata	00000009 _ZL17pstrUsageElevator
000253c8 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d754 l     O .rwdata	00000007 _ZL15pstrUsageRudder
000253d8 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000253e4 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000253f0 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00025400 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00025410 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d75c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
0002541c l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00025428 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00025434 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d764 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d76c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d774 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d77c l     O .rwdata	00000008 _ZL16pstrUsageShifter
00025440 l     O .rodata	00000009 _ZL17pstrUsageSteering
0002544c l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00025458 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00025464 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d784 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00025470 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00025480 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0002548c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00025498 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d78c l     O .rwdata	00000005 _ZL13pstrUsageBelt
000254a4 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d794 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d79c l     O .rwdata	00000006 _ZL14pstrUsageGlove
000254b0 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000254bc l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000254c8 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000254d4 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d7a4 l     O .rwdata	00000005 _ZL13pstrUsageVest
000254e0 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000254ec l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000254f8 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00025508 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00025518 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00025524 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00025530 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d7ac l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d7b0 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d7b8 l     O .rwdata	00000005 _ZL13pstrUsageRate
0002553c l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00025548 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00025558 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00025568 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00025578 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00025584 l     O .rodata	0000000b _ZL18pstrUsageStickType
00025590 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d7c0 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d7c8 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d7d0 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d7d8 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d7e0 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d7e8 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d7f0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d7f8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d800 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d808 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d810 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d818 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
0002559c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
000255a8 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000255b4 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d820 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d828 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d830 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d838 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d840 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000255c0 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000255d0 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d848 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d850 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000255dc l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000255ec l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000255fc l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
0002560c l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
0002561c l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
0002562c l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
0002563c l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
0002564c l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
0002565c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d854 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
0002566c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d85c l     O .rwdata	00000005 _ZL13pstrUsageBump
0002567c l     O .rodata	00000009 _ZL16pstrUsageNewGame
00025688 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d864 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00025694 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
000256a0 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d86c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
000256ac l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
000256bc l     O .rodata	0000000a _ZL17pstrUsageGunBurst
000256c8 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000256d4 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000256e0 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000256f4 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00025704 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00025714 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00025720 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
0002572c l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00025744 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00025758 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00025770 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00025784 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00025790 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
0002579c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d874 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d87c l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d884 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d888 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d890 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d894 l     O .rwdata	00000005 _ZL13pstrUsageMute
000257a8 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
000257b4 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
000257c4 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d89c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
000257d4 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
000257e4 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d8a4 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d8ac l     O .rwdata	00000007 _ZL15pstrUsageStereo
000257f0 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00025804 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d8b4 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d8b8 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00025810 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00025824 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d8bc l     O .rwdata	00000005 _ZL13pstrUsageRing
00025830 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
0002583c l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d8c4 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d8cc l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d8d4 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d8dc l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00025848 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d8e4 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d8ec l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00025854 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00025860 l     O .rodata	0000000b _ZL18pstrUsageNightMode
0002586c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00025878 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d8f0 l     O .rwdata	00000005 _ZL19pstrUsageConference
00025884 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d8f8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d900 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d908 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00025890 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d910 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d918 l     O .rwdata	00000006 _ZL14pstrUsageReady
0002589c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
000258a8 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d920 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d928 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d92c l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d930 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d938 l     O .rwdata	00000007 _ZL15pstrUsageRewind
000258b4 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d940 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d948 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d950 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d954 l     O .rwdata	00000006 _ZL14pstrUsageError
000258c0 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
000258d0 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
000258e4 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d95c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000258fc l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00025908 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00025918 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d964 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00025928 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00025938 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
0002594c l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00025960 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00025974 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00025988 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d96c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00025998 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
000259a4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d974 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
000259b0 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
000259bc l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d97c l     O .rwdata	00000006 _ZL14pstrUsagePhone
000259cc l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
000259d8 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d984 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d98c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
000259e4 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
000259f0 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d994 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d99c l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d9a4 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d9ac l     O .rwdata	00000007 _ZL15pstrUsageRedial
000259fc l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d9b4 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d9bc l     O .rwdata	00000005 _ZL13pstrUsagePark
00025a08 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00025a14 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d9c4 l     O .rwdata	00000005 _ZL13pstrUsageLine
00025a20 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00025a2c l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00025a38 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00025a44 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00025a50 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d9cc l     O .rwdata	00000005 _ZL13pstrUsageSend
00025a5c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00025a68 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00025a74 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00025a80 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00025a8c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00025a98 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d9d4 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00025aa8 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00025ab8 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00025acc l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00025ae0 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00025af4 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00025b08 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00025b18 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00025b28 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00025b3c l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00025b4c l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00025b5c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00025b6c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00025b78 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00025b84 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00025b90 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d9d8 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d9e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d9e4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d9e8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d9ec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d9f0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d9f4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d9f8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d9fc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002da00 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002da04 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002da08 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002da0c l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002da10 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002da14 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002da18 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002da1c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00025ba4 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00025bb4 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00025bc0 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00025bcc l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002da20 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002da24 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002da2c l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002da34 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002da3c l     O .rwdata	00000006 _ZL14pstrUsageSleep
00025bd8 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00025be4 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002da44 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00025bf0 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002da4c l     O .rwdata	00000005 _ZL13pstrUsageMenu
00025bfc l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002da54 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00025c08 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00025c14 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00025c20 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00025c2c l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00025c38 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00025c48 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00025c58 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00025c64 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00025c70 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002da5c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00025c80 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00025c90 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002da64 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002da6c l     O .rwdata	00000004 _ZL18pstrUsageSelection
00025c9c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00025ca8 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00025cb4 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00025cc0 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00025cd0 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002da70 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002da78 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00025cdc l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00025cec l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00025cf8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00025d04 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00025d10 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00025d1c l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00025d28 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00025d34 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00025d44 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00025d50 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00025d5c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00025d68 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002da80 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002da88 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00025d78 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00025d88 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00025d94 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00025da0 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00025db0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00025dc0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002da90 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002da98 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00025dd0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002daa0 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002daa8 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002dab0 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002dab8 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002dac0 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00025ddc l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00025de8 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002dac8 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002dad0 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00025df4 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00025e00 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00025e0c l     O .rodata	00000009 _ZL17pstrUsageTracking
00025e18 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00025e24 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002dad8 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00025e30 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002dae0 l     O .rwdata	00000005 _ZL13pstrUsageMark
00025e3c l     O .rodata	00000009 _ZL18pstrUsageClearMark
00025e48 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00025e54 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00025e60 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00025e70 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00025e84 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00025e94 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00025ea4 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00025eb0 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00025ebc l     O .rodata	0000000b _ZL18pstrUsageStopEject
00025ec8 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00025ed4 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002dae8 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002daec l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002daf4 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002dafc l     O .rwdata	00000007 _ZL15pstrUsageTreble
00025ee0 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00025eec l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002db04 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002db0c l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002db10 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002db18 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002db20 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00025ef8 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00025f04 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00025f10 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00025f1c l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002db28 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00025f28 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00025f34 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00025f40 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00025f4c l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00025f5c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00025f6c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00025f78 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00025f84 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00025f90 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002db30 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002db38 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00025f9c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00025fa8 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002db40 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00025fb4 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00025fc4 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00025fd4 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00025fe0 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00025fec l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00025ff8 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002db48 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002db50 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00026004 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00026010 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0002601c l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00026028 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002db58 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00026038 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00026044 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002db60 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002db68 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002db70 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00026054 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00026060 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0002606c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00026078 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00026084 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00026094 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
000260a8 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
000260b4 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
000260c8 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
000260d8 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
000260e4 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000260f4 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00026104 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00026114 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00026120 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00026130 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0002613c l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0002614c l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0002615c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002616c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0002617c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00026190 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002db78 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
000261a0 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000261b4 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
000261c8 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000261d8 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000261e8 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000261f8 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00026204 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00026210 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0002621c l     O .rodata	00000009 _ZL16pstrUsageALLogon
00026228 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00026234 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00026244 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0002625c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00026268 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00026274 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00026280 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0002628c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00026298 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
000262a4 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000262b8 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002db80 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
000262c4 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002db88 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
000262d0 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000262dc l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000262ec l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000262f8 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00026308 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00026318 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00026328 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00026334 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00026340 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0002634c l     O .rodata	00000009 _ZL16pstrUsageALClock
00026358 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00026368 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00026374 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00026380 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0002638c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00026398 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
000263ac l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
000263bc l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
000263c8 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000263dc l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000263e8 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000263f8 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
0002640c l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00026420 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00026434 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00026444 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0002645c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00026470 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00026480 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00026490 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002db90 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002db98 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
000264a4 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002dba0 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002dba8 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002dbb0 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002dbb8 l     O .rwdata	00000008 _ZL15pstrUsageACSave
000264b0 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002dbc0 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002dbc8 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002dbd0 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002dbd8 l     O .rwdata	00000007 _ZL14pstrUsageACCut
000264bc l     O .rodata	00000009 _ZL16pstrUsageACPaste
000264c8 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002dbe0 l     O .rwdata	00000008 _ZL15pstrUsageACFind
000264d4 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000264e4 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002dbe8 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002dbf0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002dbf8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002dc00 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002dc08 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000264f0 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000264fc l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
0002650c l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0002651c l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002dc10 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00026528 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00026534 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00026540 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002dc18 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0002654c l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00026558 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00026568 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00026574 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00026584 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00026594 l     O .rodata	0000000a _ZL17pstrUsageACScroll
000265a0 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
000265ac l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002dc20 l     O .rwdata	00000007 _ZL14pstrUsageACPan
000265bc l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
000265c8 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000265d8 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002dc28 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002dc30 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002dc38 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002dc40 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000265e8 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000265f4 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002dc48 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00026600 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
0002660c l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00026618 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00026624 l     O .rodata	0000000a _ZL17pstrUsageACResize
00026630 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0002663c l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00026648 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00026654 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00026660 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0002666c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00026678 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00026684 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00026694 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
000266a4 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
000266b4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
000266c4 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
000266d0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000266e0 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000266ec l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000266fc l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
0002670c l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
0002671c l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00026728 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00026734 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00026740 l     O .rodata	0000000b _ZL18pstrUsageACPromote
0002674c l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002dc50 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002dc58 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00026758 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002dc60 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002dc68 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00026764 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002dc70 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00026770 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00026780 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0002678c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0002679c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
000267ac l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
000267bc l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002dc78 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002dc80 l     O .rwdata	00000008 _ZL15pstrUsageACLock
000267c8 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002dc88 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
000267d4 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
000267e0 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000267f0 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000267fc l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0002680c l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00026818 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00026824 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00026830 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0002683c l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00026848 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00026854 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002dc90 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002dc98 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00026860 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0002686c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002dca0 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0002687c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00026888 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00026894 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
000268a4 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
000268b4 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
000268c0 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
000268cc l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
000268d8 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002dca8 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
000268e4 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000268f0 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000268fc l     O .rodata	00000009 _ZL16pstrUsageACReply
00026908 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00026918 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002dcb0 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00026924 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002dcb8 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002dcc0 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00026930 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0002693c l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00026948 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00026954 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00026960 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0002696c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00026978 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00026984 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00026990 l     O .rodata	0000000a _ZL17pstrUsageACRename
0002699c l     O .rodata	00000009 _ZL16pstrUsageACMerge
000269a8 l     O .rodata	00000009 _ZL16pstrUsageACSplit
000269b4 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
000269c0 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
000269cc l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002dcc8 l     O .rwdata	00000004 _ZL12pstrUsagePen
000269d8 l     O .rodata	0000000a _ZL17pstrUsageLightPen
000269e4 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
000269f0 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
000269fc l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00026a08 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002dccc l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00026a18 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002dcd4 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00026a24 l     O .rodata	00000009 _ZL17pstrUsageArmature
00026a30 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00026a44 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002dcdc l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002dce4 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002dcec l     O .rwdata	00000007 _ZL15pstrUsageFinger
00026a54 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00026a60 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00026a6c l     O .rodata	00000009 _ZL16pstrUsageInRange
0002dcf4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002dcfc l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002dd04 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002dd08 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00026a78 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00026a84 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00026a94 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00026aa4 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002dd10 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002dd18 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002dd20 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002dd28 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00026ab4 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002dd30 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002dd38 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00026ac0 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002dd40 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002dd48 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00026acc l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00026ad8 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00026ae8 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00026af4 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00026b04 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00026b10 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00026b20 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00026b2c l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00026b3c l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00026b48 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00026b58 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00026b68 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00026b74 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00026b80 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00026b8c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00026b98 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00026ba4 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00026bb0 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00026bbc l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00026bcc l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00026bdc l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002dd50 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002dd54 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002dd58 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002dd60 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00026be8 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00026bf4 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00026c00 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00026c0c l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002dd68 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00026c18 l     O .rodata	00000009 _ZL17pstrUsageFontData
00026c24 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00026c30 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00026c3c l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00026c4c l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00026c5c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00026c6c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00026c78 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00026c84 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00026c90 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00026c9c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00026ca8 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00026cb4 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00026cc0 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00026ccc l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00026cd8 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00026ce8 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00026cf8 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00026d08 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00026d14 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00026d20 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00026d30 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002dd70 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00026d3c l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00026d4c l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00026d5c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00026d68 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00026d74 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00026d84 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00026d94 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00026da4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00026db4 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00026dc0 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00026dcc l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00026dd8 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00026de8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00026df8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00026e08 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00026e18 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002dd78 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002dd80 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00026e28 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002dd88 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002dd90 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002dd98 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002dda0 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00026e34 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002dda8 l     O .rwdata	00000005 _ZL13pstrUsageCine
00026e40 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002ddb0 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002ddb8 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00026e4c l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00026e5c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00026e6c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00026e7c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00026e88 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00026e94 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00026ea8 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00026ebc l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00026ed0 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00026ee4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00026ef4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00026f04 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00026f10 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00026f1c l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00026f2c l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002ddcc l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ddcd l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ddce l     O .rwdata	00000001 _ZL9SPI_MODE2
0002ddcf l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002ddd4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ddd5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ddd6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002ddd7 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002ddd8 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ddd9 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ddda l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dddb l     O .rwdata	00000001 _ZL9SPI_MODE3
00027151 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00027161 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008ea8 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002dde4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dde5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dde6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dde7 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002dde8 l     O .rwdata	00000002 _ZL9pstrSpace
0002ddec l     O .rwdata	00000003 _ZL8pstrCRLF
0002ddf0 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002ddf4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002ddf8 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002ddfc l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
0002722c l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00027240 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
0002724c l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00027258 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00027264 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00027270 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00027280 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002de04 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002de0c l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002de14 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002de1c l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
0002728c l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00027298 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002de20 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002de24 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000272a4 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000272b4 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002de2c l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002de34 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000272c4 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002de3c l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000272d4 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002de44 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
000272ec l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002de48 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
000272f8 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00027304 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002de50 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002de58 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00027310 l     O .rodata	00000009 _ZL17pstrUsageJoystick
0002731c l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002de60 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002de68 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00027328 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00027338 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002de70 l     O .rwdata	00000002 _ZL10pstrUsageX
0002de74 l     O .rwdata	00000002 _ZL10pstrUsageY
0002de78 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002de7c l     O .rwdata	00000003 _ZL11pstrUsageRx
0002de80 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002de84 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002de88 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002de90 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002de98 l     O .rwdata	00000006 _ZL14pstrUsageWheel
0002734c l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00027358 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00027364 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00027370 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002dea0 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002dea8 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002deac l     O .rwdata	00000003 _ZL11pstrUsageVx
0002deb0 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002deb4 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002deb8 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002dec0 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002dec8 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002ded0 l     O .rwdata	00000004 _ZL12pstrUsageVno
00027380 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00027390 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0002739c l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000273a8 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000273b8 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000273c4 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000273d0 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
000273e4 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
000273f4 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00027404 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00027414 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00027424 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00027434 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00027444 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00027454 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00027460 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00027470 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00027484 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00027498 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000274a4 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000274b0 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000274bc l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000274c8 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000274d4 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
000274e0 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
000274ec l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
000274f8 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00027504 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00027510 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0002751c l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
0002752c l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00027538 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00027548 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00027558 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00027568 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00027578 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00027588 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000275a0 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000275b8 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000275d0 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000275e0 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000275f0 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00027600 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00027610 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00027620 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00027630 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00027640 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00027650 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00027660 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00027670 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00027688 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00027698 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000276ac l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000276bc l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000276c8 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000276d4 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000276e0 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002ded4 l     O .rwdata	00000008 _ZL16pstrUsageAileron
000276ec l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
000276fc l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00027710 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00027724 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00027734 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00027744 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00027750 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00027764 l     O .rodata	00000009 _ZL17pstrUsageElevator
00027770 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002dedc l     O .rwdata	00000007 _ZL15pstrUsageRudder
00027780 l     O .rodata	00000009 _ZL17pstrUsageThrottle
0002778c l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00027798 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000277a8 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000277b8 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002dee4 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000277c4 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000277d0 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
000277dc l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002deec l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002def4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002defc l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002df04 l     O .rwdata	00000008 _ZL16pstrUsageShifter
000277e8 l     O .rodata	00000009 _ZL17pstrUsageSteering
000277f4 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00027800 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0002780c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002df0c l     O .rwdata	00000008 _ZL16pstrUsageBallast
00027818 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00027828 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00027834 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00027840 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002df14 l     O .rwdata	00000005 _ZL13pstrUsageBelt
0002784c l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002df1c l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002df24 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00027858 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00027864 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00027870 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
0002787c l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002df2c l     O .rwdata	00000005 _ZL13pstrUsageVest
00027888 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00027894 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000278a0 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000278b0 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000278c0 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000278cc l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000278d8 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002df34 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002df38 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002df40 l     O .rwdata	00000005 _ZL13pstrUsageRate
000278e4 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000278f0 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00027900 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00027910 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00027920 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
0002792c l     O .rodata	0000000b _ZL18pstrUsageStickType
00027938 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002df48 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002df50 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002df58 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002df60 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002df68 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002df70 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002df78 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002df80 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002df88 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002df90 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002df98 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002dfa0 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00027944 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00027950 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
0002795c l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002dfa8 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002dfb0 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002dfb8 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002dfc0 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002dfc8 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00027968 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00027978 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002dfd0 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002dfd8 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00027984 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00027994 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000279a4 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000279b4 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000279c4 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
000279d4 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
000279e4 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
000279f4 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00027a04 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002dfdc l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00027a14 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002dfe4 l     O .rwdata	00000005 _ZL13pstrUsageBump
00027a24 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00027a30 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002dfec l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00027a3c l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00027a48 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002dff4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00027a54 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00027a64 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00027a70 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00027a7c l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00027a88 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00027a9c l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00027aac l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00027abc l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00027ac8 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00027ad4 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00027aec l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00027b00 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00027b18 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00027b2c l     O .rodata	00000009 _ZL16pstrUsageNumLock
00027b38 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00027b44 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002dffc l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002e004 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002e00c l     O .rwdata	00000004 _ZL14pstrUsagePower
0002e010 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002e018 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002e01c l     O .rwdata	00000005 _ZL13pstrUsageMute
00027b50 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00027b5c l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00027b6c l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002e024 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00027b7c l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00027b8c l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002e02c l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002e034 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00027b98 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00027bac l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002e03c l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002e040 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00027bb8 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00027bcc l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002e044 l     O .rwdata	00000005 _ZL13pstrUsageRing
00027bd8 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00027be4 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002e04c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002e054 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002e05c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002e064 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00027bf0 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002e06c l     O .rwdata	00000005 _ZL13pstrUsageHold
0002e074 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00027bfc l     O .rodata	00000009 _ZL17pstrUsageCoverage
00027c08 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00027c14 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00027c20 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002e078 l     O .rwdata	00000005 _ZL19pstrUsageConference
00027c2c l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002e080 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002e088 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002e090 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00027c38 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002e098 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002e0a0 l     O .rwdata	00000006 _ZL14pstrUsageReady
00027c44 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00027c50 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002e0a8 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002e0b0 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002e0b4 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002e0b8 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002e0c0 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00027c5c l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002e0c8 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002e0d0 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002e0d8 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002e0dc l     O .rwdata	00000006 _ZL14pstrUsageError
00027c68 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00027c78 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00027c8c l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002e0e4 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00027ca4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00027cb0 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00027cc0 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002e0ec l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00027cd0 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00027ce0 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00027cf4 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00027d08 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00027d1c l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00027d30 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002e0f4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00027d40 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00027d4c l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002e0fc l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00027d58 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00027d64 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002e104 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00027d74 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00027d80 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002e10c l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002e114 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00027d8c l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00027d98 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002e11c l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002e124 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002e12c l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002e134 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00027da4 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002e13c l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002e144 l     O .rwdata	00000005 _ZL13pstrUsagePark
00027db0 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00027dbc l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002e14c l     O .rwdata	00000005 _ZL13pstrUsageLine
00027dc8 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00027dd4 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00027de0 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00027dec l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00027df8 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002e154 l     O .rwdata	00000005 _ZL13pstrUsageSend
00027e04 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00027e10 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00027e1c l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00027e28 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00027e34 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00027e40 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002e15c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00027e50 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00027e60 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00027e74 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00027e88 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00027e9c l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00027eb0 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00027ec0 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00027ed0 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00027ee4 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00027ef4 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00027f04 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00027f14 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00027f20 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00027f2c l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00027f38 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002e160 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002e168 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002e16c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002e170 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002e174 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002e178 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002e17c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002e180 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002e184 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002e188 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002e18c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002e190 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002e194 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002e198 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002e19c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002e1a0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002e1a4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00027f4c l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00027f5c l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00027f68 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00027f74 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002e1a8 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002e1ac l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002e1b4 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002e1bc l     O .rwdata	00000006 _ZL14pstrUsageReset
0002e1c4 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00027f80 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00027f8c l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002e1cc l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00027f98 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002e1d4 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00027fa4 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002e1dc l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00027fb0 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00027fbc l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00027fc8 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00027fd4 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00027fe0 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00027ff0 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00028000 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
0002800c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00028018 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002e1e4 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00028028 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00028038 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002e1ec l     O .rwdata	00000006 _ZL14pstrUsageStill
0002e1f4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00028044 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00028050 l     O .rodata	0000000a _ZL17pstrUsageModeStep
0002805c l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00028068 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00028078 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002e1f8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002e200 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00028084 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00028094 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
000280a0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
000280ac l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
000280b8 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
000280c4 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
000280d0 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
000280dc l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
000280ec l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
000280f8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00028104 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00028110 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002e208 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002e210 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00028120 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00028130 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
0002813c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00028148 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00028158 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00028168 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002e218 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002e220 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00028178 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002e228 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002e230 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002e238 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002e240 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002e248 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00028184 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00028190 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002e250 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002e258 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
0002819c l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000281a8 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000281b4 l     O .rodata	00000009 _ZL17pstrUsageTracking
000281c0 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
000281cc l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002e260 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
000281d8 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002e268 l     O .rwdata	00000005 _ZL13pstrUsageMark
000281e4 l     O .rodata	00000009 _ZL18pstrUsageClearMark
000281f0 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
000281fc l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00028208 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00028218 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
0002822c l     O .rodata	0000000e _ZL21pstrUsageCounterReset
0002823c l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0002824c l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00028258 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00028264 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00028270 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
0002827c l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002e270 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002e274 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002e27c l     O .rwdata	00000005 _ZL13pstrUsageBass
0002e284 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00028288 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00028294 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002e28c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002e294 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002e298 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002e2a0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002e2a8 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000282a0 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000282ac l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000282b8 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000282c4 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002e2b0 l     O .rwdata	00000005 _ZL13pstrUsageSlow
000282d0 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
000282dc l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
000282e8 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
000282f4 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00028304 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00028314 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00028320 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
0002832c l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00028338 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002e2b8 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002e2c0 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00028344 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00028350 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002e2c8 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0002835c l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0002836c l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0002837c l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00028388 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00028394 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000283a0 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002e2d0 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002e2d8 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000283ac l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000283b8 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000283c4 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000283d0 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002e2e0 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
000283e0 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
000283ec l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002e2e8 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002e2f0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002e2f8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
000283fc l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00028408 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00028414 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00028420 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
0002842c l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
0002843c l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00028450 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0002845c l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00028470 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00028480 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0002848c l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0002849c l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000284ac l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000284bc l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000284c8 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000284d8 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
000284e4 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
000284f4 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00028504 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00028514 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00028524 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00028538 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002e300 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00028548 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0002855c l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00028570 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00028580 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00028590 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000285a0 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000285ac l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000285b8 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000285c4 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000285d0 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
000285dc l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000285ec l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00028604 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00028610 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0002861c l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00028628 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00028634 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00028640 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002864c l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00028660 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002e308 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0002866c l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002e310 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00028678 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00028684 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00028694 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000286a0 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000286b0 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000286c0 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000286d0 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
000286dc l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000286e8 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000286f4 l     O .rodata	00000009 _ZL16pstrUsageALClock
00028700 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00028710 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0002871c l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00028728 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00028734 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00028740 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00028754 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00028764 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00028770 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00028784 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00028790 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000287a0 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000287b4 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000287c8 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
000287dc l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000287ec l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00028804 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00028818 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00028828 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00028838 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002e318 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002e320 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002884c l     O .rodata	00000009 _ZL16pstrUsageACClose
0002e328 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002e330 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002e338 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002e340 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00028858 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002e348 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002e350 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002e358 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002e360 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00028864 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00028870 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002e368 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0002887c l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0002888c l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002e370 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002e378 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002e380 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002e388 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002e390 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00028898 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000288a4 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000288b4 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000288c4 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002e398 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000288d0 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
000288dc l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000288e8 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002e3a0 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
000288f4 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00028900 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00028910 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0002891c l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0002892c l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0002893c l     O .rodata	0000000a _ZL17pstrUsageACScroll
00028948 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00028954 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002e3a8 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00028964 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00028970 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00028980 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002e3b0 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002e3b8 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002e3c0 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002e3c8 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00028990 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0002899c l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002e3d0 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000289a8 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000289b4 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000289c0 l     O .rodata	0000000a _ZL17pstrUsageACRotate
000289cc l     O .rodata	0000000a _ZL17pstrUsageACResize
000289d8 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
000289e4 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
000289f0 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
000289fc l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00028a08 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00028a14 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00028a20 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00028a2c l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00028a3c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00028a4c l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00028a5c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00028a6c l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00028a78 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00028a88 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00028a94 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00028aa4 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00028ab4 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00028ac4 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00028ad0 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00028adc l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00028ae8 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00028af4 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002e3d8 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002e3e0 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00028b00 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002e3e8 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002e3f0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00028b0c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002e3f8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00028b18 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00028b28 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00028b34 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00028b44 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00028b54 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00028b64 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002e400 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002e408 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00028b70 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002e410 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00028b7c l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00028b88 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00028b98 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00028ba4 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00028bb4 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00028bc0 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00028bcc l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00028bd8 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00028be4 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00028bf0 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00028bfc l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002e418 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002e420 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00028c08 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00028c14 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002e428 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00028c24 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00028c30 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00028c3c l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00028c4c l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00028c5c l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00028c68 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00028c74 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00028c80 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002e430 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00028c8c l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00028c98 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00028ca4 l     O .rodata	00000009 _ZL16pstrUsageACReply
00028cb0 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00028cc0 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002e438 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00028ccc l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002e440 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002e448 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00028cd8 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00028ce4 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00028cf0 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00028cfc l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00028d08 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00028d14 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00028d20 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00028d2c l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00028d38 l     O .rodata	0000000a _ZL17pstrUsageACRename
00028d44 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00028d50 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00028d5c l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00028d68 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00028d74 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002e450 l     O .rwdata	00000004 _ZL12pstrUsagePen
00028d80 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00028d8c l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00028d98 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00028da4 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00028db0 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002e454 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00028dc0 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002e45c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00028dcc l     O .rodata	00000009 _ZL17pstrUsageArmature
00028dd8 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00028dec l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002e464 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002e46c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002e474 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00028dfc l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00028e08 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00028e14 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002e47c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002e484 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002e48c l     O .rwdata	00000004 _ZL12pstrUsageTap
0002e490 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00028e20 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00028e2c l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00028e3c l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00028e4c l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002e498 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002e4a0 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002e4a8 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002e4b0 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00028e5c l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002e4b8 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002e4c0 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00028e68 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002e4c8 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002e4d0 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00028e74 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00028e80 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00028e90 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00028e9c l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00028eac l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00028eb8 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00028ec8 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00028ed4 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00028ee4 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00028ef0 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00028f00 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00028f10 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00028f1c l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00028f28 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00028f34 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00028f40 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00028f4c l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00028f58 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00028f64 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00028f74 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00028f84 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002e4d8 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002e4dc l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002e4e0 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002e4e8 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00028f90 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00028f9c l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00028fa8 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00028fb4 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002e4f0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00028fc0 l     O .rodata	00000009 _ZL17pstrUsageFontData
00028fcc l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00028fd8 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00028fe4 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00028ff4 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00029004 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00029014 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00029020 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002902c l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00029038 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00029044 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00029050 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002905c l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00029068 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00029074 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00029080 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00029090 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
000290a0 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
000290b0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
000290bc l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
000290c8 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
000290d8 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002e4f8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
000290e4 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
000290f4 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00029104 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00029110 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002911c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002912c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002913c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002914c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002915c l     O .rodata	0000000a _ZL17pstrUsageBlitData
00029168 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00029174 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00029180 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00029190 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
000291a0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
000291b0 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
000291c0 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002e500 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002e508 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
000291d0 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002e510 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002e518 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002e520 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002e528 l     O .rwdata	00000006 _ZL14pstrUsagePrint
000291dc l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002e530 l     O .rwdata	00000005 _ZL13pstrUsageCine
000291e8 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002e538 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002e540 l     O .rwdata	00000006 _ZL14pstrUsageDepth
000291f4 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00029204 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00029214 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00029224 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00029230 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002923c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00029250 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00029264 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00029278 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002928c l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002929c l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000292ac l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000292b8 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000292c4 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000292d4 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002e546 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002e547 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002e548 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002e549 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002e54c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002e54d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002e54e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002e54f l     O .rwdata	00000001 _ZL9SPI_MODE3
0002e550 l     O .rwdata	00000002 _ZL9pstrSpace
0002e554 l     O .rwdata	00000003 _ZL8pstrCRLF
0002e558 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002e55c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002e560 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002e564 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
000293b4 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
000293c8 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000293d4 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000293e0 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000293ec l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
000293f8 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00029408 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002e56c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002e574 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002e57c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002e584 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00029414 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00029420 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002e588 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002e58c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
0002942c l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
0002943c l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002e594 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002e59c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
0002944c l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002e5a4 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
0002945c l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002e5ac l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00029474 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002e5b0 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00029480 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
0002948c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002e5b8 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002e5c0 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00029498 l     O .rodata	00000009 _ZL17pstrUsageJoystick
000294a4 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002e5c8 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002e5d0 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
000294b0 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000294c0 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002e5d8 l     O .rwdata	00000002 _ZL10pstrUsageX
0002e5dc l     O .rwdata	00000002 _ZL10pstrUsageY
0002e5e0 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002e5e4 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002e5e8 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002e5ec l     O .rwdata	00000003 _ZL11pstrUsageRz
0002e5f0 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002e5f8 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002e600 l     O .rwdata	00000006 _ZL14pstrUsageWheel
000294d4 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000294e0 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000294ec l     O .rodata	0000000b _ZL18pstrUsageByteCount
000294f8 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002e608 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002e610 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002e614 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002e618 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002e61c l     O .rwdata	00000003 _ZL11pstrUsageVz
0002e620 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002e628 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002e630 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002e638 l     O .rwdata	00000004 _ZL12pstrUsageVno
00029508 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00029518 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00029524 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00029530 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00029540 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
0002954c l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00029558 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
0002956c l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0002957c l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0002958c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0002959c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000295ac l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000295bc l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000295cc l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000295dc l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000295e8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000295f8 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0002960c l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00029620 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
0002962c l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00029638 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00029644 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00029650 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0002965c l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00029668 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00029674 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00029680 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0002968c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00029698 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
000296a4 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
000296b4 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000296c0 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000296d0 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000296e0 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000296f0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00029700 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00029710 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00029728 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00029740 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00029758 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00029768 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00029778 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00029788 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00029798 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000297a8 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000297b8 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000297c8 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000297d8 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000297e8 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000297f8 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00029810 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00029820 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00029834 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00029844 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00029850 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
0002985c l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00029868 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002e63c l     O .rwdata	00000008 _ZL16pstrUsageAileron
00029874 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00029884 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00029898 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
000298ac l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000298bc l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
000298cc l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000298d8 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000298ec l     O .rodata	00000009 _ZL17pstrUsageElevator
000298f8 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002e644 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00029908 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00029914 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00029920 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00029930 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00029940 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002e64c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
0002994c l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00029958 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00029964 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002e654 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002e65c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002e664 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002e66c l     O .rwdata	00000008 _ZL16pstrUsageShifter
00029970 l     O .rodata	00000009 _ZL17pstrUsageSteering
0002997c l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00029988 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00029994 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002e674 l     O .rwdata	00000008 _ZL16pstrUsageBallast
000299a0 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
000299b0 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
000299bc l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
000299c8 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002e67c l     O .rwdata	00000005 _ZL13pstrUsageBelt
000299d4 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002e684 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002e68c l     O .rwdata	00000006 _ZL14pstrUsageGlove
000299e0 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000299ec l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000299f8 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00029a04 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002e694 l     O .rwdata	00000005 _ZL13pstrUsageVest
00029a10 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00029a1c l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00029a28 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00029a38 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00029a48 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00029a54 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00029a60 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002e69c l     O .rwdata	00000004 _ZL12pstrUsageOar
0002e6a0 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002e6a8 l     O .rwdata	00000005 _ZL13pstrUsageRate
00029a6c l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00029a78 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00029a88 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00029a98 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00029aa8 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00029ab4 l     O .rodata	0000000b _ZL18pstrUsageStickType
00029ac0 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002e6b0 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002e6b8 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002e6c0 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002e6c8 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002e6d0 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002e6d8 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002e6e0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002e6e8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002e6f0 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002e6f8 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002e700 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002e708 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00029acc l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00029ad8 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00029ae4 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002e710 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002e718 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002e720 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002e728 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002e730 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00029af0 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00029b00 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002e738 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002e740 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00029b0c l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00029b1c l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00029b2c l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00029b3c l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00029b4c l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00029b5c l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00029b6c l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00029b7c l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00029b8c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002e744 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00029b9c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002e74c l     O .rwdata	00000005 _ZL13pstrUsageBump
00029bac l     O .rodata	00000009 _ZL16pstrUsageNewGame
00029bb8 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002e754 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00029bc4 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00029bd0 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002e75c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00029bdc l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00029bec l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00029bf8 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00029c04 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00029c10 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00029c24 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00029c34 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00029c44 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00029c50 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00029c5c l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00029c74 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00029c88 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00029ca0 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00029cb4 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00029cc0 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00029ccc l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002e764 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002e76c l     O .rwdata	00000005 _ZL13pstrUsageKana
0002e774 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002e778 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002e780 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002e784 l     O .rwdata	00000005 _ZL13pstrUsageMute
00029cd8 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00029ce4 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00029cf4 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002e78c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00029d04 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00029d14 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002e794 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002e79c l     O .rwdata	00000007 _ZL15pstrUsageStereo
00029d20 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00029d34 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002e7a4 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002e7a8 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00029d40 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00029d54 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002e7ac l     O .rwdata	00000005 _ZL13pstrUsageRing
00029d60 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00029d6c l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002e7b4 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002e7bc l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002e7c4 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002e7cc l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00029d78 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002e7d4 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002e7dc l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00029d84 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00029d90 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00029d9c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00029da8 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002e7e0 l     O .rwdata	00000005 _ZL19pstrUsageConference
00029db4 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002e7e8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002e7f0 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002e7f8 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00029dc0 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002e800 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002e808 l     O .rwdata	00000006 _ZL14pstrUsageReady
00029dcc l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00029dd8 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002e810 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002e818 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002e81c l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002e820 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002e828 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00029de4 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002e830 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002e838 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002e840 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002e844 l     O .rwdata	00000006 _ZL14pstrUsageError
00029df0 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00029e00 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00029e14 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002e84c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00029e2c l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00029e38 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00029e48 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002e854 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00029e58 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00029e68 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00029e7c l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00029e90 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00029ea4 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00029eb8 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002e85c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00029ec8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00029ed4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002e864 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00029ee0 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00029eec l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002e86c l     O .rwdata	00000006 _ZL14pstrUsagePhone
00029efc l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00029f08 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002e874 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002e87c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00029f14 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00029f20 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002e884 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002e88c l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002e894 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002e89c l     O .rwdata	00000007 _ZL15pstrUsageRedial
00029f2c l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002e8a4 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002e8ac l     O .rwdata	00000005 _ZL13pstrUsagePark
00029f38 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00029f44 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002e8b4 l     O .rwdata	00000005 _ZL13pstrUsageLine
00029f50 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00029f5c l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00029f68 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00029f74 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00029f80 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002e8bc l     O .rwdata	00000005 _ZL13pstrUsageSend
00029f8c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00029f98 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00029fa4 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00029fb0 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00029fbc l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00029fc8 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002e8c4 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00029fd8 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00029fe8 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00029ffc l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
0002a010 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
0002a024 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
0002a038 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
0002a048 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
0002a058 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
0002a06c l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
0002a07c l     O .rodata	0000000d _ZL20pstrUsageReorderTone
0002a08c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
0002a09c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
0002a0a8 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
0002a0b4 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
0002a0c0 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002e8c8 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002e8d0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002e8d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002e8d8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002e8dc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002e8e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002e8e4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002e8e8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002e8ec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002e8f0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002e8f4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002e8f8 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002e8fc l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002e900 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002e904 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002e908 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002e90c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
0002a0d4 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
0002a0e4 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
0002a0f0 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
0002a0fc l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002e910 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002e914 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002e91c l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002e924 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002e92c l     O .rwdata	00000006 _ZL14pstrUsageSleep
0002a108 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
0002a114 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002e934 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
0002a120 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002e93c l     O .rwdata	00000005 _ZL13pstrUsageMenu
0002a12c l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002e944 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0002a138 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
0002a144 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0002a150 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
0002a15c l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
0002a168 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
0002a178 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
0002a188 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
0002a194 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0002a1a0 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002e94c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0002a1b0 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0002a1c0 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002e954 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002e95c l     O .rwdata	00000004 _ZL18pstrUsageSelection
0002a1cc l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0002a1d8 l     O .rodata	0000000a _ZL17pstrUsageModeStep
0002a1e4 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
0002a1f0 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0002a200 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002e960 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002e968 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0002a20c l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0002a21c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0002a228 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
0002a234 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0002a240 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0002a24c l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
0002a258 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
0002a264 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
0002a274 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0002a280 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0002a28c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0002a298 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002e970 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002e978 l     O .rwdata	00000005 _ZL13pstrUsageHelp
0002a2a8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0002a2b8 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
0002a2c4 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0002a2d0 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0002a2e0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0002a2f0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002e980 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002e988 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0002a300 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002e990 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002e998 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002e9a0 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002e9a8 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002e9b0 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0002a30c l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0002a318 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002e9b8 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002e9c0 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
0002a324 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0002a330 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0002a33c l     O .rodata	00000009 _ZL17pstrUsageTracking
0002a348 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
0002a354 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002e9c8 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0002a360 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002e9d0 l     O .rwdata	00000005 _ZL13pstrUsageMark
0002a36c l     O .rodata	00000009 _ZL18pstrUsageClearMark
0002a378 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
0002a384 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0002a390 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0002a3a0 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
0002a3b4 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
0002a3c4 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0002a3d4 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0002a3e0 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0002a3ec l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002a3f8 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
0002a404 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002e9d8 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002e9dc l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002e9e4 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002e9ec l     O .rwdata	00000007 _ZL15pstrUsageTreble
0002a410 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0002a41c l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002e9f4 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002e9fc l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002ea00 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002ea08 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002ea10 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0002a428 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
0002a434 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0002a440 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0002a44c l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002ea18 l     O .rwdata	00000005 _ZL13pstrUsageSlow
0002a458 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
0002a464 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0002a470 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0002a47c l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0002a48c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0002a49c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0002a4a8 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
0002a4b4 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0002a4c0 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002ea20 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002ea28 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0002a4cc l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0002a4d8 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002ea30 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0002a4e4 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0002a4f4 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0002a504 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
0002a510 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0002a51c l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0002a528 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002ea38 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002ea40 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0002a534 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0002a540 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0002a54c l     O .rodata	00000009 _ZL21pstrUsageChannelFront
0002a558 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002ea48 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0002a568 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
0002a574 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002ea50 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002ea58 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002ea60 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
0002a584 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0002a590 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0002a59c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0002a5a8 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
0002a5b4 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
0002a5c4 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0002a5d8 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0002a5e4 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0002a5f8 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0002a608 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0002a614 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0002a624 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0002a634 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0002a644 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0002a650 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0002a660 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0002a66c l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0002a67c l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0002a68c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002a69c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0002a6ac l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0002a6c0 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002ea68 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0002a6d0 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0002a6e4 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0002a6f8 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0002a708 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0002a718 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0002a728 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0002a734 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0002a740 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0002a74c l     O .rodata	00000009 _ZL16pstrUsageALLogon
0002a758 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0002a764 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0002a774 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0002a78c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0002a798 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0002a7a4 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0002a7b0 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0002a7bc l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0002a7c8 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002a7d4 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0002a7e8 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002ea70 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0002a7f4 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002ea78 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0002a800 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0002a80c l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0002a81c l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0002a828 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
0002a838 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
0002a848 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
0002a858 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0002a864 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002a870 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0002a87c l     O .rodata	00000009 _ZL16pstrUsageALClock
0002a888 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0002a898 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0002a8a4 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0002a8b0 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0002a8bc l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0002a8c8 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0002a8dc l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0002a8ec l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0002a8f8 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0002a90c l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0002a918 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0002a928 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
0002a93c l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
0002a950 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0002a964 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0002a974 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0002a98c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0002a9a0 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0002a9b0 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0002a9c0 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002ea80 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002ea88 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002a9d4 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002ea90 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002ea98 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002eaa0 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002eaa8 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0002a9e0 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002eab0 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002eab8 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002eac0 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002eac8 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0002a9ec l     O .rodata	00000009 _ZL16pstrUsageACPaste
0002a9f8 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002ead0 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0002aa04 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0002aa14 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002ead8 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002eae0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002eae8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002eaf0 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002eaf8 l     O .rwdata	00000008 _ZL15pstrUsageACStop
0002aa20 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
0002aa2c l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
0002aa3c l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0002aa4c l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002eb00 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
0002aa58 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002aa64 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0002aa70 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002eb08 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0002aa7c l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0002aa88 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
0002aa98 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0002aaa4 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0002aab4 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0002aac4 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0002aad0 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0002aadc l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002eb10 l     O .rwdata	00000007 _ZL14pstrUsageACPan
0002aaec l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0002aaf8 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0002ab08 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002eb18 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002eb20 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002eb28 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002eb30 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0002ab18 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0002ab24 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002eb38 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
0002ab30 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
0002ab3c l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0002ab48 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0002ab54 l     O .rodata	0000000a _ZL17pstrUsageACResize
0002ab60 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0002ab6c l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
0002ab78 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0002ab84 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0002ab90 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0002ab9c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
0002aba8 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0002abb4 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0002abc4 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0002abd4 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0002abe4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0002abf4 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0002ac00 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
0002ac10 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
0002ac1c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
0002ac2c l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
0002ac3c l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
0002ac4c l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
0002ac58 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002ac64 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0002ac70 l     O .rodata	0000000b _ZL18pstrUsageACPromote
0002ac7c l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002eb40 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002eb48 l     O .rwdata	00000006 _ZL13pstrUsageACNo
0002ac88 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002eb50 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002eb58 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002ac94 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002eb60 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0002aca0 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0002acb0 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0002acbc l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0002accc l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0002acdc l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0002acec l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002eb68 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002eb70 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0002acf8 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002eb78 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0002ad04 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
0002ad10 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
0002ad20 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
0002ad2c l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0002ad3c l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0002ad48 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0002ad54 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
0002ad60 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0002ad6c l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0002ad78 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0002ad84 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002eb80 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002eb88 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0002ad90 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0002ad9c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002eb90 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0002adac l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0002adb8 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0002adc4 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0002add4 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0002ade4 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0002adf0 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0002adfc l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0002ae08 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002eb98 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0002ae14 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0002ae20 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
0002ae2c l     O .rodata	00000009 _ZL16pstrUsageACReply
0002ae38 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
0002ae48 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002eba0 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0002ae54 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002eba8 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002ebb0 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0002ae60 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0002ae6c l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
0002ae78 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0002ae84 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0002ae90 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0002ae9c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
0002aea8 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0002aeb4 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0002aec0 l     O .rodata	0000000a _ZL17pstrUsageACRename
0002aecc l     O .rodata	00000009 _ZL16pstrUsageACMerge
0002aed8 l     O .rodata	00000009 _ZL16pstrUsageACSplit
0002aee4 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0002aef0 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0002aefc l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002ebb8 l     O .rwdata	00000004 _ZL12pstrUsagePen
0002af08 l     O .rodata	0000000a _ZL17pstrUsageLightPen
0002af14 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0002af20 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0002af2c l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0002af38 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002ebbc l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0002af48 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002ebc4 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0002af54 l     O .rodata	00000009 _ZL17pstrUsageArmature
0002af60 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0002af74 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002ebcc l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002ebd4 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002ebdc l     O .rwdata	00000007 _ZL15pstrUsageFinger
0002af84 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0002af90 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0002af9c l     O .rodata	00000009 _ZL16pstrUsageInRange
0002ebe4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002ebec l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002ebf4 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002ebf8 l     O .rwdata	00000005 _ZL16pstrUsageQuality
0002afa8 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0002afb4 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0002afc4 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002afd4 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002ec00 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002ec08 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002ec10 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002ec18 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002afe4 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002ec20 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002ec28 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002aff0 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002ec30 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002ec38 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0002affc l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0002b008 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0002b018 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0002b024 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0002b034 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0002b040 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0002b050 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0002b05c l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0002b06c l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0002b078 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0002b088 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0002b098 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0002b0a4 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0002b0b0 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0002b0bc l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0002b0c8 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002b0d4 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0002b0e0 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0002b0ec l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0002b0fc l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0002b10c l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002ec40 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002ec44 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002ec48 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002ec50 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002b118 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002b124 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0002b130 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0002b13c l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002ec58 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0002b148 l     O .rodata	00000009 _ZL17pstrUsageFontData
0002b154 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0002b160 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0002b16c l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0002b17c l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0002b18c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0002b19c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002b1a8 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002b1b4 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002b1c0 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0002b1cc l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002b1d8 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002b1e4 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002b1f0 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0002b1fc l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002b208 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002b218 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0002b228 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0002b238 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0002b244 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0002b250 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0002b260 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002ec60 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002b26c l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002b27c l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002b28c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002b298 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002b2a4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002b2b4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002b2c4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002b2d4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002b2e4 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002b2f0 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0002b2fc l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002b308 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002b318 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002b328 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0002b338 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0002b348 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002ec68 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002ec70 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0002b358 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002ec78 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002ec80 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002ec88 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002ec90 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002b364 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002ec98 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002b370 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002eca0 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002eca8 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002b37c l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002b38c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002b39c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002b3ac l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002b3b8 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002b3c4 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002b3d8 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0002b3ec l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002b400 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002b414 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002b424 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0002b434 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0002b440 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002b44c l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002b45c l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0002b46a l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002b47a l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0002ecb0 l     O .rwdata	00000004 _ZL5synth
0000ad8c l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000adf4 l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000c028 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000c0cc l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000c2d8 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000c32c l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000c3b8 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000c4ec l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000c574 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000c7a0 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000d078 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000d360 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
000320a8 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000d418 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000d5c8 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00031f44 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000ee64 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00031f4c l     O .bss	00000004 fc_static
0000ef7c l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000f03c l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0002bb40 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002b91e l     O .rodata	00000010 zeroes.4389
0002b92e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002b93e l     O .rodata	00000010 zeroes.4404
00014b9c l     F .text	000000bc __sbprintf
0002b94e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00014dac l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00016904 l     F .text	00000008 __fp_unlock
00016918 l     F .text	0000019c __sinit.part.1
00016ab4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002c38c l     O .rwdata	00000020 lc_ctype_charset
0002c36c l     O .rwdata	00000020 lc_message_charset
0002c3ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002b97c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002baa0 l     O .rodata	00000010 zeroes.4333
0002bab0 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0001aab4 l     F .text	000000fc __sprint_r.part.0
0002bac0 l     O .rodata	00000010 zeroes.4349
0001c0f0 l     F .text	000000bc __sbprintf
0002bad0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001fef8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002000c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002006c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00020180 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00020268 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000203d4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000204c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002069c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002ed1c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00020910 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000209f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00020b30 l     F .text	00000034 alt_dev_reg
0002c58c l     O .rwdata	00000038 i2c_0
0002c5c4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00020c10 l     F .text	00000110 optional_irq_callback
00020d70 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00022a4c l     F .text	0000020c altera_avalon_jtag_uart_irq
00022c58 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002348c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00023824 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00023d14 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00023e74 l     F .text	0000003c alt_get_errno
00023eb0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00031f84 g     O .bss	00000004 alt_instruction_exception_handler
0000d520 g     F .text	00000028 __cxa_free_exception
00024ca0  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000ff64 g     F .text	00000018 putchar
0000bb7c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00018b50 g     F .text	00000074 _mprec_log10
00004840  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000bfc8 g     F .text	00000018 _ZSt10unexpectedv
00018c3c g     F .text	0000008c __any_on
0001c7fc g     F .text	00000054 _isatty_r
0002b988 g     O .rodata	00000028 __mprec_tinytens
000205d8 g     F .text	0000007c alt_main
00006d50 g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000ff7c g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
000071ac g     F .text	0000008c _Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh
000320e0 g     O .bss	00000100 alt_irq
0000d6bc g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
000096b4 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001c850 g     F .text	00000060 _lseek_r
0000f0f8 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002ed34 g       *ABS*	00000000 __flash_rwdata_start
000066f0 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001e934 g     F .text	00000088 .hidden __eqdf2
00004840  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000028cc g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000d14c g     F .text	00000084 __cxa_rethrow
0000f084 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000c004 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006f94 g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000f0e8 g     F .text	00000010 .hidden _Unwind_GetIP
000321e0 g       *ABS*	00000000 __alt_heap_start
00008ff4  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00010348 g     F .text	0000005c _kill_r
00007238 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000ff20 g     F .text	0000003c printf
00024cc4  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001c910 g     F .text	0000009c _wcrtomb_r
00010110 g     F .text	00000084 _signal_r
00006478  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
000194e0 g     F .text	0000005c __sseek
00016c64 g     F .text	00000010 __sinit
0001c1ac g     F .text	00000140 __swbuf_r
000055b4 g     F .text	000000a8 _Z8set_notehhh
00009d28 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000d59c g     F .text	0000002c __cxa_free_dependent_exception
0000aed0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000047e0  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
00017738 g     F .text	0000007c _setlocale_r
0002b564  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00016abc g     F .text	00000078 __sfmoreglue
00021468 g     F .text	000000a8 alt_avalon_i2c_rx_read
00020678 g     F .text	00000024 __malloc_unlock
0000d6bc g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00008944 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000b904 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000090dc  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
00001ffc g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0000d340 g     F .text	00000020 _ZSt18uncaught_exceptionv
0000ddd0 g     F .text	00000440 .hidden __divsf3
00022680 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001d6c g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
0000a0fc g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0002ecc0 g     O .rwdata	00000004 peak_sus
0000bbf8 g     F .text	00000020 __cxa_deleted_virtual
000211ec g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002d3c  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
000091a0 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
00009b38 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00017ab4 g     F .text	0000015c memmove
00031f3c g     O .bss	00000002 sus_h
00006194  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000d694 g     F .text	00000004 _ZNSt9exceptionD2Ev
00016c4c g     F .text	00000018 _cleanup
00021ed0 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00017c10 g     F .text	000000a8 _Balloc
0000ebe0 g     F .text	00000070 .hidden __fixsfsi
00003e40 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001e9bc g     F .text	000000dc .hidden __gtdf2
00003f04 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0002b798  w    O .rodata	00000014 _ZTVSt13bad_exception
00024504 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0002094c g     F .text	00000078 times
0000905c  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000f134 g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002d640  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
000088c8 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004d0c  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001c7a0 g     F .text	0000005c _fstat_r
00009804 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
00031f5c g     O .bss	00000004 errno
00005ed4 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
0001945c g     F .text	00000008 __seofread
000093b0 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
00019714 g     F .text	000013a0 ___svfiprintf_internal_r
0000f310 g     F .text	00000074 .hidden _Unwind_Backtrace
00031f70 g     O .bss	00000004 alt_argv
000034cc g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
00035624 g       *ABS*	00000000 _gp
000209c4 g     F .text	00000030 usleep
000226c4 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000e6fc g     F .text	000004e4 .hidden __subsf3
00008254 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002dddc  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0002ecba g     O .rwdata	00000002 rel_l
00031f38 g     O .bss	00000002 att_h
00020160 g     F .text	00000020 getpid
0000ce48 g     F .text	00000230 __cxa_call_unexpected
0000d1d0 g     F .text	00000008 __cxa_get_exception_ptr
0002137c g     F .text	00000044 alt_avalon_i2c_is_busy
0002c40c g     O .rwdata	00000180 alt_fd_list
00009560 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00024c10  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
00007238 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
00004618 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000ff5c g     F .text	00000008 _putchar_r
0000f224 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00021120 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c0c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000f0b4 g     F .text	00000018 .hidden _Unwind_GetCFA
0000bfe0 g     F .text	00000014 _ZSt13set_terminatePFvvE
000239c4 g     F .text	00000090 alt_find_dev
00024c04  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
0001289c g     F .text	00000008 _times_r
0000fc80 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
0000625c  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000d548 g     F .text	00000054 __cxa_allocate_dependent_exception
0001690c g     F .text	0000000c _cleanup_r
0000bc90 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001fd74 g     F .text	000000dc .hidden __floatsidf
00024cb8  w    O .rodata	0000000c _ZTV13USBReadParser
00023df8 g     F .text	0000007c alt_io_redirect
0001ea98 g     F .text	000000f4 .hidden __ltdf2
00004b60  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00024b30 g       *ABS*	00000000 __DTOR_END__
0000bca8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00021d10 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0001003c g     F .text	00000014 puts
0002b5ec  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
000246f4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000082dc g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
000095e8 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00019394 g     F .text	00000074 __fpclassifyd
0000a284 g     F .text	0000099c _Z9MIDI_pollv
00018aac g     F .text	000000a4 __ratio
0001c0d4 g     F .text	0000001c __vfiprintf_internal
00007d58 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00022e50 g     F .text	0000021c altera_avalon_jtag_uart_read
0000f44c g     F .text	00000014 malloc
0000fef0 g     F .text	00000030 _printf_r
0000d824 g     F .text	00000064 .hidden __udivsi3
000201bc g     F .text	000000ac isatty
00010194 g     F .text	000000bc _raise_r
000097a4 g     F .text	0000003c _ZN8MAX3421eC2Ev
0002b9d8 g     O .rodata	000000c8 __mprec_tens
00007000 g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
000177b4 g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004b18  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
00020f8c g     F .text	00000098 alt_avalon_i2c_enable
00031f58 g     O .bss	00000004 __malloc_top_pad
000103a4 g     F .text	00000004 _getpid_r
000225b4 g     F .text	00000068 alt_avalon_i2c_int_disable
00031f30 g     O .bss	00000001 usb_task_state
0002ecfc g     O .rwdata	00000004 __mb_cur_max
000177e4 g     F .text	0000000c _localeconv_r
0000b194 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003e70 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
000073b8 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
00018044 g     F .text	0000003c __i2b
000170e8 g     F .text	000004c8 __sfvwrite_r
0000be28 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00010250 g     F .text	000000a8 __sigtramp_r
00008610 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
00002df4  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
00010050 g     F .text	00000054 _sbrk_r
0002b634  w    O .rodata	00000020 _ZTVSt9type_info
00004c10  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
00009448 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001c8b0 g     F .text	00000060 _read_r
0000d69c g     F .text	0000000c _ZNKSt9exception4whatEv
0002ed14 g     O .rwdata	00000004 alt_max_fd
00006548 g     F .text	00000050 _Z9E_Notifycci
00008750 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001c494 g     F .text	000000f0 _fclose_r
000168d4 g     F .text	00000030 fflush
0000a194 g     F .text	00000078 _Z6onInitv
00031f54 g     O .bss	00000004 __malloc_max_sbrked_mem
00009ab0 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
000220dc g     F .text	00000210 alt_avalon_i2c_master_receive
000271e8  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001d6b8 g     F .text	000008ac .hidden __adddf3
0002b598  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004c3c  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008ea8 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00018854 g     F .text	0000010c __b2d
0001d0f4 g     F .text	000005c4 .hidden __umoddi3
000204fc g     F .text	000000dc lseek
00006284  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000bcec g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000066a0 g     F .text	00000028 _Z8E_Notifyhi
0000bbd4 g     F .text	00000004 _ZdlPv
0002261c g     F .text	00000064 alt_avalon_i2c_int_enable
0002ecec g     O .rwdata	00000004 _global_impure_ptr
0000b1a4 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00018e30 g     F .text	00000564 _realloc_r
000321e0 g       *ABS*	00000000 __bss_end
00023c24 g     F .text	000000f0 alt_iic_isr_register
000243fc g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000f06c g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001caf8 g     F .text	000005fc .hidden __udivdi3
000224dc g     F .text	00000058 alt_avalon_i2c_int_status_get
0001c6fc g     F .text	00000024 _fputwc_r
0002b9b0 g     O .rodata	00000028 __mprec_bigtens
00017e28 g     F .text	00000104 __s2b
0000f3e8 g     F .text	00000018 abort
0001fe50 g     F .text	000000a8 .hidden __floatunsidf
00026fe0  w    O .rodata	00000014 _ZTS17MouseReportParser
00018594 g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
00009118  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
000036b0 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000d28c g     F .text	000000b4 __cxa_end_catch
000094dc g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00016c84 g     F .text	00000018 __fp_lock_all
00024cfc  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00023bd8 g     F .text	0000004c alt_ic_irq_enabled
0000d698 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
000030c0  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
00006234  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
00024360 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00027174  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
00020e0c g     F .text	00000054 alt_avalon_i2c_register_callback
00031f78 g     O .bss	00000004 alt_irq_active
00020e60 g     F .text	000000ec alt_avalon_i2c_init
0000bfa0 g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002c3e4 g     O .rwdata	00000028 alt_dev_null
0000b1d8 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
000064ac  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000d6c4 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
0000326c  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002b94 g     F .text	00000084 _ZN3USB7setConfEhhh
00031f3e g     O .bss	00000002 rel_h
00008fec g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002b690  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
00023804 g     F .text	00000020 alt_dcache_flush_all
00017f2c g     F .text	00000068 __hi0bits
000271f4  w    O .rodata	0000000c _ZTI14MidiDescParser
00009d00 g     F .text	00000028 _Z10Vbus_powerb
0002ecd4  w    O .rwdata	00000008 _ZTISt9exception
0001fcf4 g     F .text	00000080 .hidden __fixdfsi
00026ff4  w    O .rodata	00000012 _ZTS15HIDReportParser
0000ae24  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002ed34 g       *ABS*	00000000 __ram_rwdata_end
0000bb78 g     F .text	00000004 _ZNSt9type_infoD1Ev
0002ed0c g     O .rwdata	00000008 alt_dev_list
0000d6c4 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00020a30 g     F .text	00000100 write
00018cc8 g     F .text	000000a0 _putc_r
0000a170 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
0002179c g     F .text	0000004c alt_avalon_i2c_check_arblost
0000bb8c g     F .text	00000004 _ZNSt9type_infoD0Ev
00004d34  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0000e210 g     F .text	000000bc .hidden __gtsf2
00022578 g     F .text	0000003c alt_avalon_i2c_int_clear
00009174  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00024bf0  w    O .rodata	00000014 _ZTV11AddressPool
0002bb40 g       *ABS*	00000000 __ram_rodata_end
000200a8 g     F .text	000000b8 fstat
00002c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
000202a4 g     F .text	00000130 kill
00006524  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001ea98 g     F .text	000000f4 .hidden __ledf2
00024d24  w    O .rodata	00000020 _ZTI7XBOXONE
0002ed20 g     O .rwdata	00000008 alt_avalon_i2c_list
00004aa0  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00026f3a g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
0001830c g     F .text	00000140 __pow5mult
00005088  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
0001abc8 g     F .text	0000150c ___vfiprintf_internal_r
00031f68 g     O .bss	00000004 __nlocale_changed
0000d888 g     F .text	00000058 .hidden __umodsi3
0000bb84 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0000487c  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
0000a20c g     F .text	00000078 _Z10MIDI_setupv
0000270c g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000bff4 g     F .text	00000010 _ZSt13get_terminatev
000321e0 g       *ABS*	00000000 end
00024cac  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004e88  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
000099c4 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
00006444  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000f2f8 g     F .text	00000018 .hidden _Unwind_DeleteException
0002298c g     F .text	000000c0 altera_avalon_jtag_uart_init
0000620c  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00020f4c g     F .text	00000040 alt_avalon_i2c_open
00026f50 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
00031f40 g     O .bss	00000001 ped_flip
0000bd58 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000b194 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002ddd0 g     O .rwdata	00000004 UsbDEBUGlvl
00024b28 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00021924 g     F .text	000000e8 alt_avalon_i2c_master_tx
00023504 g     F .text	0000007c alt_avalon_timer_sc_init
0000f384 g     F .text	00000064 .hidden __clzsi2
0000bc18 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0002306c g     F .text	00000224 altera_avalon_jtag_uart_write
00016c74 g     F .text	00000004 __sfp_lock_acquire
0002b720  w    O .rodata	00000012 _ZTSSt13bad_exception
000179d0 g     F .text	000000e4 memchr
000128a4 g     F .text	000022dc ___vfprintf_internal_r
000103a8 g     F .text	00000058 _sprintf_r
000047e0  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00016dd8 g     F .text	00000310 _free_r
000240f8 g     F .text	0000022c alt_printf
000177c0 g     F .text	00000010 __locale_mb_cur_max
00024970 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
00031f64 g     O .bss	00000004 __mlocale_changed
0002ecb6 g     O .rwdata	00000002 dec_l
00020d20 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002ecf4 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003e48 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00031f7c g     O .bss	00000004 _alt_tick_rate
0002b624  w    O .rodata	0000000d _ZTSSt9type_info
000222ec g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000bbd8 g     F .text	00000020 __cxa_pure_virtual
00024bdc  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00024d64  w    O .rodata	00000010 _ZTS13USBReadParser
00022710 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0001844c g     F .text	00000148 __lshift
00023290 g     F .text	000001fc alt_avalon_spi_command
00031f80 g     O .bss	00000004 _alt_nticks
0001030c g     F .text	00000018 signal
000206d8 g     F .text	00000104 read
000059fc g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
00020b9c g     F .text	00000074 alt_sys_init
00024c60  w    O .rodata	00000040 _ZTV7XBOXONE
0000ec50 g     F .text	00000124 .hidden __floatsisf
00019544 g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
00024858 g     F .text	00000118 __register_exitproc
00002b00 g     F .text	00000094 _ZN3USB7setAddrEhhh
00006598 g     F .text	00000084 _Z8E_NotifyPKci
000271b0  w    O .rodata	0000000c _ZTV14MidiDescParser
00009084  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00003300  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000af14 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00006410  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
00004ccc  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00021b48 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00018080 g     F .text	0000028c __multiply
00002a58 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002ddbe g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00022cf8 g     F .text	00000068 altera_avalon_jtag_uart_close
00002c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000d8e0 g     F .text	00000028 .hidden __mulsi3
0002bb40 g       *ABS*	00000000 __ram_rwdata_start
0000f154 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0000565c g     F .text	00000064 _Z8set_ctrlhhm
00024b30 g       *ABS*	00000000 __ram_rodata_start
000320b8 g     O .bss	00000028 __malloc_current_mallinfo
00004f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000f268 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00018960 g     F .text	0000014c __d2b
0002b7c0  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000bb78 g     F .text	00000004 _ZNSt9type_infoD2Ev
00009034  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004938  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002d62c  w    O .rwdata	00000008 _ZTI11AddressPool
0000d6c8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000b110 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00027200  w    O .rodata	00000011 _ZTS14MidiDescParser
0002b5c4  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
00022828 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024630 g     F .text	000000c4 alt_get_fd
00005c18 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
000236ac g     F .text	00000158 alt_busy_sleep
00006af0 g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002ece4  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001c364 g     F .text	00000054 _close_r
000247dc g     F .text	0000007c memcmp
000213c0 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
000228e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007e2c g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
000321e0 g       *ABS*	00000000 __alt_stack_base
00022938 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000aed0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00008094 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004578 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00014c58 g     F .text	00000154 __swsetup_r
0000f2ac g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00031f34 g     O .bss	00000004 i2c_dev
0001df64 g     F .text	000009d0 .hidden __divdf3
0000ae74  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00016b34 g     F .text	00000118 __sfp
00018bc4 g     F .text	00000078 __copybits
0000bb7c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0002bf64 g     O .rwdata	00000408 __malloc_av_
000048fc  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00016c80 g     F .text	00000004 __sinit_lock_release
0001eb8c g     F .text	0000086c .hidden __muldf3
00019408 g     F .text	00000054 __sread
00004ef0  w    F .text	00000034 _ZN13USBReadParserC2Ev
0002b784  w    O .rodata	00000014 _ZTVSt9exception
0000d6c0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002c3c  w    F .text	00000034 _ZN11AddressPoolC2Ev
00024528 g     F .text	00000108 alt_find_file
00004be4  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
00023860 g     F .text	000000a4 alt_dev_llist_insert
00020654 g     F .text	00000024 __malloc_lock
00020860 g     F .text	000000b0 sbrk
000105e0 g     F .text	000022bc ___svfprintf_internal_r
000217e8 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00021750 g     F .text	0000004c alt_avalon_i2c_check_nack
0002b6c0  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000d0bc g     F .text	00000090 __cxa_throw
00016878 g     F .text	0000005c _fflush_r
0000f118 g     F .text	00000010 .hidden _Unwind_SetIP
00006efc g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001c3b8 g     F .text	000000dc _calloc_r
00024d50  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
000066c8 g     F .text	00000028 _Z8E_Notifydi
00007c50 g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
00031f3a g     O .bss	00000002 dec_h
00031f28 g       *ABS*	00000000 __bss_start
0002d650  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000fdc8 g     F .text	00000128 memset
00008750 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00005104  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000ac20 g     F .text	0000016c main
00009a38 g     F .text	00000078 _ZN8MAX3421e5regRdEh
00009c34 g     F .text	000000cc _ZN8MAX3421e5resetEv
0002171c g     F .text	00000034 alt_avalon_i2c_master_target_set
00031f74 g     O .bss	00000004 alt_envp
00024d74  w    O .rodata	00000012 _ZTS15USBDeviceConfig
00031f50 g     O .bss	00000004 __malloc_max_total_mem
00022888 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00031f31 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001c2ec g     F .text	00000018 __swbuf
0000d67c g     F .text	0000000c __cxa_get_globals_fast
00022534 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
000097a4 g     F .text	0000003c _ZN8MAX3421eC1Ev
00004ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002c18  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
0001953c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001c584 g     F .text	00000014 fclose
0000ae9c  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
0000444c g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
0000661c g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
00014fd4 g     F .text	00001688 _dtoa_r
0000f474 g     F .text	0000080c _malloc_r
0001ca6c g     F .text	00000030 __ascii_wctomb
0000d6a8 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002ed18 g     O .rwdata	00000004 alt_errno
00026fd4  w    O .rodata	0000000c _ZTI17MouseReportParser
00010324 g     F .text	00000010 _init_signal
00002960 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
00006ca8 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0002b6b4  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000046bc g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
000175b0 g     F .text	000000c4 _fwalk
000097e0 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00003204  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000d698 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00018d68 g     F .text	000000c8 putc
0000d72c g     F .text	00000084 .hidden __divsi3
00027214  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00016cb4 g     F .text	00000124 _malloc_trim_r
00024b30 g       *ABS*	00000000 __CTOR_END__
0000e2cc g     F .text	00000430 .hidden __mulsf3
00004adc  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
00009140  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00026f88  w    O .rodata	00000028 _ZTV17MouseReportParser
0001046c g     F .text	000000dc strcmp
000034cc g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00024b30 g       *ABS*	00000000 __flash_rodata_start
0002b7ac  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000ae4c  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00024b30 g       *ABS*	00000000 __DTOR_LIST__
000271bc  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001e934 g     F .text	00000088 .hidden __nedf2
00020b64 g     F .text	00000038 alt_irq_init
000207dc g     F .text	00000084 alt_release_fd
0000aee0 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00024d44  w    O .rodata	00000009 _ZTS7XBOXONE
00010400 g     F .text	0000006c sprintf
0002b7d4 g     O .rodata	00000100 .hidden __clz_tab
00031f60 g     O .bss	00000004 _PathLocale
00024790 g     F .text	00000014 atexit
0000e210 g     F .text	000000bc .hidden __gesf2
0001c304 g     F .text	00000060 _write_r
00002844 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
00002dc8  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
000177f0 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00026f5c  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00009bb8 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000f14c g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002b5f8  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000d624 g     F .text	00000058 __cxa_call_terminate
0002ecf0 g     O .rwdata	00000004 _impure_ptr
0002ecdc  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00024c2c  w    O .rodata	0000000e _ZTS11AddressPool
00031f6c g     O .bss	00000004 alt_argc
00003404  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
0001665c g     F .text	0000021c __sflush_r
00009140  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00003054  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
00023964 g     F .text	00000060 _do_dtors
00032044 g     O .bss	00000064 Midi
000177dc g     F .text	00000008 __locale_cjk_lang
000216e4 g     F .text	00000038 alt_avalon_i2c_master_target_get
000215f4 g     F .text	000000f0 alt_avalon_i2c_send_address
0000c018 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002c3c  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
000187f0 g     F .text	00000064 __ulp
0000f13c g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00016c9c g     F .text	00000018 __fp_unlock_all
00004f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
0000453c g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004b84  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002ed04 g     O .rwdata	00000008 alt_fs_list
0002b760  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00026fbc  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004ef0  w    F .text	00000034 _ZN13USBReadParserC1Ev
0002ecb4 g     O .rwdata	00000002 att_l
0000f128 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00004bb0  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000d1d8 g     F .text	000000b4 __cxa_begin_catch
00004734 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
000056c0 g     F .text	0000033c _Z9calc_adsrttttttttff
0000bca8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000bfb8 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
000061e4  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
00017808 g     F .text	0000000c localeconv
00009f24 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004d5c  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000d6b8 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
000227c0 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002ecd0 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
00009240 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00023a74 g     F .text	00000050 alt_ic_isr_register
00021024 g     F .text	0000004c alt_avalon_i2c_disable
0000d4c0 g     F .text	00000060 __cxa_allocate_exception
0002b58c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002ed34 g       *ABS*	00000000 _edata
00004e88  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
000321e0 g       *ABS*	00000000 _end
0000b300 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000c848 g     F .text	00000600 __gxx_personality_sj0
0001c598 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	000003f0 _ZN3USB4TaskEv
00022d60 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002d648  w    O .rwdata	00000008 _ZTI13USBReadParser
00021070 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000d694 g     F .text	00000004 _ZNSt9exceptionD1Ev
00023b4c g     F .text	0000008c alt_ic_irq_disable
0000616c  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
00019464 g     F .text	0000007c __swrite
0002ecf8 g     O .rwdata	00000004 __malloc_trim_threshold
000177d0 g     F .text	0000000c __locale_msgcharset
000247a4 g     F .text	00000038 exit
0000f0cc g     F .text	0000001c .hidden _Unwind_SetGR
000061bc  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
00017674 g     F .text	000000c4 _fwalk_reent
0000b074 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000ed74 g     F .text	000000f0 .hidden __floatunsisf
000185f4 g     F .text	000001fc __mdiff
0000bee0 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000d7b0 g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00016c78 g     F .text	00000004 __sfp_lock_release
0002b734  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000064d4  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00003ffc g     F .text	000003c8 _ZN7XBOXONE10readReportEv
00021280 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00009e0c g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
00021510 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000271c8  w    O .rodata	00000020 _ZTI9USBH_MIDI
000043c4 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0000d6cc g     F .text	00000060 .hidden __fixunssfsi
0002ecb8 g     O .rwdata	00000002 sus_l
00007bd8 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
00020038 g     F .text	00000034 _exit
00023580 g     F .text	0000012c alt_alarm_start
00026fb0  w    O .rodata	0000000c _ZTI20KeyboardReportParser
000081f0 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000f098 g     F .text	0000001c .hidden _Unwind_GetGR
0000d688 g     F .text	0000000c __cxa_get_globals
000067f8 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
00017814 g     F .text	000001bc __smakebuf_r
0002eccc g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004b3c  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
00010548 g     F .text	00000098 strlen
000100a4 g     F .text	0000006c _init_signal_r
0002ecc4  w    O .rwdata	00000008 _ZTISt9type_info
00023f9c g     F .text	0000015c open
0001e9bc g     F .text	000000dc .hidden __gedf2
00024324 g     F .text	0000003c alt_putchar
0002b710  w    O .rodata	0000000d _ZTSSt9exception
0000f400 g     F .text	0000004c clock
000064fc  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
0000a098 g     F .text	00000064 _ZN8MAX3421e4TaskEv
00026f44 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
00009890 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002ed00 g     O .rwdata	00000004 __wctomb
0000d6b4 g     F .text	00000004 _ZNSt9exceptionD0Ev
0001abb0 g     F .text	00000018 __sprint_r
00023a54 g     F .text	00000020 alt_icache_flush_all
0000f144 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00031f88 g     O .bss	000000bc Usb
0002ed28 g     O .rwdata	00000004 alt_priority_mask
000048fc  w    F .text	0000003c _ZN11ByteSkipperC2Ev
00023ac4 g     F .text	00000088 alt_ic_irq_enable
00014b80 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001ca9c g     F .text	0000005c _wctomb_r
0001f3f8 g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003d04 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00017f94 g     F .text	000000b0 __lo0bits
0002ed2c g     O .rwdata	00000008 alt_alarm_list
00023904 g     F .text	00000060 _do_ctors
00024cf0  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
00010334 g     F .text	00000014 __sigtramp
000092f8 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001c9ac g     F .text	000000c0 wcrtomb
0001ff34 g     F .text	000000d8 close
0000d908 g     F .text	000004c8 .hidden __addsf3
0002ecbc g     O .rwdata	00000004 peak_att
00022774 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002b740  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0002043c g     F .text	00000084 alt_load
00021a0c g     F .text	0000013c alt_avalon_i2c_master_rx
0000bb90 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
000049a0  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001c720 g     F .text	00000080 fputwc
000102f8 g     F .text	00000014 raise
0002ddc4  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000f460 g     F .text	00000014 free
00016c7c g     F .text	00000004 __sinit_lock_acquire
00017ce0 g     F .text	00000148 __multadd
0000bcb8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00017cb8 g     F .text	00000028 _Bfree
00006a4c g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	10883804 	addi	r2,r2,8416
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10883804 	addi	r2,r2,8416
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b25817 	ldw	r2,-13984(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b25817 	ldw	r2,-13984(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d6958914 	ori	gp,gp,22052
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     244:	1087ca14 	ori	r2,r2,7976

    movhi r3, %hi(__bss_end)
     248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     24c:	18c87814 	ori	r3,r3,8672

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	002043c0 	call	2043c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00205d80 	call	205d8 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	2112cc04 	addi	r4,r4,19248
     28c:	001003c0 	call	1003c <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	2112cf04 	addi	r4,r4,19260
     2d0:	001003c0 	call	1003c <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	2112d404 	addi	r4,r4,19280
     304:	001003c0 	call	1003c <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	2112d704 	addi	r4,r4,19292
     340:	001003c0 	call	1003c <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	2112db04 	addi	r4,r4,19308
     374:	001003c0 	call	1003c <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	2112df04 	addi	r4,r4,19324
     3b0:	001003c0 	call	1003c <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	2112e204 	addi	r4,r4,19336
     3ec:	001003c0 	call	1003c <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	2112e504 	addi	r4,r4,19348
     428:	001003c0 	call	1003c <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	2112e804 	addi	r4,r4,19360
     464:	001003c0 	call	1003c <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	2112eb04 	addi	r4,r4,19372
     4a0:	001003c0 	call	1003c <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	2112ef04 	addi	r4,r4,19388
     4dc:	001003c0 	call	1003c <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	2112f304 	addi	r4,r4,19404
     510:	001003c0 	call	1003c <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000d8e00 	call	d8e0 <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000d8240 	call	d824 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000d8240 	call	d824 <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000d8240 	call	d824 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000d8e00 	call	d8e0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000d8240 	call	d824 <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000d8240 	call	d824 <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000d8e00 	call	d8e0 <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000d8240 	call	d824 <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000d8e00 	call	d8e0 <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000d8e00 	call	d8e0 <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000d8240 	call	d824 <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000d8e00 	call	d8e0 <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000f4000 	call	f400 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000f4000 	call	f400 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000f4000 	call	f400 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	00097a40 	call	97a4 <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	0002c700 	call	2c70 <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b24145 	stb	r2,-14075(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b24143 	ldbu	r2,-14075(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b24145 	stb	r2,-14075(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	00098900 	call	9890 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	0009ab00 	call	9ab0 <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	00098900 	call	9890 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	000a0980 	call	a098 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	00097e00 	call	97e0 <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b24145 	stb	r2,-14075(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b24143 	ldbu	r2,-14075(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b24145 	stb	r2,-14075(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b24143 	ldbu	r2,-14075(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b24215 	stw	r2,-14072(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b24145 	stb	r2,-14075(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b24143 	ldbu	r2,-14075(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	18008e1e 	bne	r3,zero,1bc8 <_ZN3USB4TaskEv+0x3ac>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	00009406 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00008f06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	18006e1e 	bne	r3,zero,1b78 <_ZN3USB4TaskEv+0x35c>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18008b1e 	bne	r3,zero,1bf4 <_ZN3USB4TaskEv+0x3d8>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00008606 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1a7c:	00005d06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b24217 	ldw	r2,-14072(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10004c26 	beq	r2,zero,1bd0 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b24145 	stb	r2,-14075(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1ac0:	00004c06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10003d26 	beq	r2,zero,1bd8 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b24145 	stb	r2,-14075(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00003006 	br	1bd8 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10002a26 	beq	r2,zero,1be0 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b24145 	stb	r2,-14075(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b24215 	stw	r2,-14072(gp)
                        }
                        break;
    1b4c:	00002406 	br	1be0 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b24217 	ldw	r2,-14072(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10001e26 	beq	r2,zero,1be8 <_ZN3USB4TaskEv+0x3cc>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b24145 	stb	r2,-14075(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
    1b78:	e0bffc03 	ldbu	r2,-16(fp)
    1b7c:	100f883a 	mov	r7,r2
    1b80:	000d883a 	mov	r6,zero
    1b84:	000b883a 	mov	r5,zero
    1b88:	e13ffe17 	ldw	r4,-8(fp)
    1b8c:	0001ffc0 	call	1ffc <_ZN3USB11ConfiguringEhhb>
    1b90:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
    1b94:	e0bffd03 	ldbu	r2,-12(fp)
    1b98:	10000826 	beq	r2,zero,1bbc <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1b9c:	e0bffd03 	ldbu	r2,-12(fp)
    1ba0:	108034a0 	cmpeqi	r2,r2,210
    1ba4:	1000121e 	bne	r2,zero,1bf0 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
    1ba8:	e0bffd03 	ldbu	r2,-12(fp)
    1bac:	d0b24105 	stb	r2,-14076(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1bb0:	00bfe804 	movi	r2,-96
    1bb4:	d0b24145 	stb	r2,-14075(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bb8:	00000d06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bbc:	00bfe404 	movi	r2,-112
    1bc0:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1bc4:	00000a06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1bc8:	0001883a 	nop
    1bcc:	00000906 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1bd0:	0001883a 	nop
    1bd4:	00000706 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1bd8:	0001883a 	nop
    1bdc:	00000506 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1be0:	0001883a 	nop
    1be4:	00000306 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1be8:	0001883a 	nop
    1bec:	00000106 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bf0:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1bf4:	0001883a 	nop
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	dfc00117 	ldw	ra,4(sp)
    1c00:	df000017 	ldw	fp,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c0c:	defff704 	addi	sp,sp,-36
    1c10:	dfc00815 	stw	ra,32(sp)
    1c14:	df000715 	stw	fp,28(sp)
    1c18:	df000704 	addi	fp,sp,28
    1c1c:	e13ffc15 	stw	r4,-16(fp)
    1c20:	2809883a 	mov	r4,r5
    1c24:	3007883a 	mov	r3,r6
    1c28:	3805883a 	mov	r2,r7
    1c2c:	e13ffd05 	stb	r4,-12(fp)
    1c30:	e0fffe05 	stb	r3,-8(fp)
    1c34:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c38:	e03ff915 	stw	zero,-28(fp)
    1c3c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	000b883a 	mov	r5,zero
    1c48:	1009883a 	mov	r4,r2
    1c4c:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c50:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c54:	e0bff917 	ldw	r2,-28(fp)
    1c58:	1000021e 	bne	r2,zero,1c64 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c5c:	00bff584 	movi	r2,-42
    1c60:	00003d06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1c64:	e0bff917 	ldw	r2,-28(fp)
    1c68:	10c00003 	ldbu	r3,0(r2)
    1c6c:	11000043 	ldbu	r4,1(r2)
    1c70:	2008923a 	slli	r4,r4,8
    1c74:	20c6b03a 	or	r3,r4,r3
    1c78:	11000083 	ldbu	r4,2(r2)
    1c7c:	2008943a 	slli	r4,r4,16
    1c80:	20c6b03a 	or	r3,r4,r3
    1c84:	108000c3 	ldbu	r2,3(r2)
    1c88:	1004963a 	slli	r2,r2,24
    1c8c:	10c4b03a 	or	r2,r2,r3
    1c90:	1000021e 	bne	r2,zero,1c9c <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1c94:	00bff5c4 	movi	r2,-41
    1c98:	00002f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1c9c:	e0bff917 	ldw	r2,-28(fp)
    1ca0:	e0ffff03 	ldbu	r3,-4(fp)
    1ca4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	e0fffd03 	ldbu	r3,-12(fp)
    1cb0:	e13ffe03 	ldbu	r4,-8(fp)
    1cb4:	200f883a 	mov	r7,r4
    1cb8:	000d883a 	mov	r6,zero
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	0002df40 	call	2df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1cc8:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1ccc:	e0bffb03 	ldbu	r2,-20(fp)
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1cd4:	00bff504 	movi	r2,-44
    1cd8:	00001f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	e0fffb03 	ldbu	r3,-20(fp)
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	1009883a 	mov	r4,r2
    1cec:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1cf0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1cf4:	e0bffa17 	ldw	r2,-24(fp)
    1cf8:	1000021e 	bne	r2,zero,1d04 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1cfc:	00bff584 	movi	r2,-42
    1d00:	00001506 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d04:	e0bffa17 	ldw	r2,-24(fp)
    1d08:	e0ffff03 	ldbu	r3,-4(fp)
    1d0c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d10:	e0bffb03 	ldbu	r2,-20(fp)
    1d14:	100f883a 	mov	r7,r2
    1d18:	000d883a 	mov	r6,zero
    1d1c:	000b883a 	mov	r5,zero
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    1d28:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d2c:	e0bffb43 	ldbu	r2,-19(fp)
    1d30:	10000826 	beq	r2,zero,1d54 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0fffb03 	ldbu	r3,-20(fp)
    1d3c:	180b883a 	mov	r5,r3
    1d40:	1009883a 	mov	r4,r2
    1d44:	00030540 	call	3054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d48:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d4c:	e0bffb43 	ldbu	r2,-19(fp)
    1d50:	00000106 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d54:	0005883a 	mov	r2,zero
};
    1d58:	e037883a 	mov	sp,fp
    1d5c:	dfc00117 	ldw	ra,4(sp)
    1d60:	df000017 	ldw	fp,0(sp)
    1d64:	dec00204 	addi	sp,sp,8
    1d68:	f800283a 	ret

00001d6c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1d6c:	defff804 	addi	sp,sp,-32
    1d70:	dfc00715 	stw	ra,28(sp)
    1d74:	df000615 	stw	fp,24(sp)
    1d78:	df000604 	addi	fp,sp,24
    1d7c:	e13ffb15 	stw	r4,-20(fp)
    1d80:	3009883a 	mov	r4,r6
    1d84:	3807883a 	mov	r3,r7
    1d88:	e0800217 	ldw	r2,8(fp)
    1d8c:	e17ffc05 	stb	r5,-16(fp)
    1d90:	e13ffd05 	stb	r4,-12(fp)
    1d94:	e0fffe05 	stb	r3,-8(fp)
    1d98:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1d9c:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1da0:	e0bffc03 	ldbu	r2,-16(fp)
    1da4:	e0fffb17 	ldw	r3,-20(fp)
    1da8:	10800784 	addi	r2,r2,30
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	10800017 	ldw	r2,0(r2)
    1dbc:	10800017 	ldw	r2,0(r2)
    1dc0:	10800104 	addi	r2,r2,4
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	e0bffc03 	ldbu	r2,-16(fp)
    1dcc:	e13ffb17 	ldw	r4,-20(fp)
    1dd0:	10800784 	addi	r2,r2,30
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1085883a 	add	r2,r2,r2
    1ddc:	2085883a 	add	r2,r4,r2
    1de0:	10800017 	ldw	r2,0(r2)
    1de4:	e13ffd03 	ldbu	r4,-12(fp)
    1de8:	e17ffe03 	ldbu	r5,-8(fp)
    1dec:	e1bfff03 	ldbu	r6,-4(fp)
    1df0:	300f883a 	mov	r7,r6
    1df4:	280d883a 	mov	r6,r5
    1df8:	200b883a 	mov	r5,r4
    1dfc:	1009883a 	mov	r4,r2
    1e00:	183ee83a 	callr	r3
    1e04:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e08:	e0bffa43 	ldbu	r2,-23(fp)
    1e0c:	10803818 	cmpnei	r2,r2,224
    1e10:	10001f1e 	bne	r2,zero,1e90 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e14:	e0bffd03 	ldbu	r2,-12(fp)
    1e18:	1000071e 	bne	r2,zero,1e38 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e1c:	01800044 	movi	r6,1
    1e20:	01403a04 	movi	r5,232
    1e24:	e13ffb17 	ldw	r4,-20(fp)
    1e28:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e2c:	01001984 	movi	r4,102
    1e30:	00006840 	call	684 <_Z5delaym>
    1e34:	00002606 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e38:	e0bffd03 	ldbu	r2,-12(fp)
    1e3c:	e0fffb17 	ldw	r3,-20(fp)
    1e40:	10800784 	addi	r2,r2,30
    1e44:	1085883a 	add	r2,r2,r2
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1885883a 	add	r2,r3,r2
    1e50:	10800017 	ldw	r2,0(r2)
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	10800504 	addi	r2,r2,20
    1e5c:	10c00017 	ldw	r3,0(r2)
    1e60:	e0bffd03 	ldbu	r2,-12(fp)
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	10800784 	addi	r2,r2,30
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	2085883a 	add	r2,r4,r2
    1e78:	10800017 	ldw	r2,0(r2)
    1e7c:	e13ffe03 	ldbu	r4,-8(fp)
    1e80:	200b883a 	mov	r5,r4
    1e84:	1009883a 	mov	r4,r2
    1e88:	183ee83a 	callr	r3
    1e8c:	00001006 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1e90:	e0bffa43 	ldbu	r2,-23(fp)
    1e94:	10800358 	cmpnei	r2,r2,13
    1e98:	1000091e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1e9c:	e0bffa03 	ldbu	r2,-24(fp)
    1ea0:	108000e8 	cmpgeui	r2,r2,3
    1ea4:	1000061e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ea8:	01001904 	movi	r4,100
    1eac:	00006840 	call	684 <_Z5delaym>
                retries++;
    1eb0:	e0bffa03 	ldbu	r2,-24(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1ebc:	003fb806 	br	1da0 <__alt_data_end+0xfc001da0>
        } else if(rcode)
    1ec0:	e0bffa43 	ldbu	r2,-23(fp)
    1ec4:	10000226 	beq	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1ec8:	e0bffa43 	ldbu	r2,-23(fp)
    1ecc:	00004606 	br	1fe8 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1ed0:	e0bffc03 	ldbu	r2,-16(fp)
    1ed4:	e0fffb17 	ldw	r3,-20(fp)
    1ed8:	10800784 	addi	r2,r2,30
    1edc:	1085883a 	add	r2,r2,r2
    1ee0:	1085883a 	add	r2,r2,r2
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	10800017 	ldw	r2,0(r2)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bffc03 	ldbu	r2,-16(fp)
    1ef8:	e13ffb17 	ldw	r4,-20(fp)
    1efc:	10800784 	addi	r2,r2,30
    1f00:	1085883a 	add	r2,r2,r2
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	2085883a 	add	r2,r4,r2
    1f0c:	10800017 	ldw	r2,0(r2)
    1f10:	e13ffd03 	ldbu	r4,-12(fp)
    1f14:	e17ffe03 	ldbu	r5,-8(fp)
    1f18:	e1bfff03 	ldbu	r6,-4(fp)
    1f1c:	300f883a 	mov	r7,r6
    1f20:	280d883a 	mov	r6,r5
    1f24:	200b883a 	mov	r5,r4
    1f28:	1009883a 	mov	r4,r2
    1f2c:	183ee83a 	callr	r3
    1f30:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f34:	e0bffa43 	ldbu	r2,-23(fp)
    1f38:	10800358 	cmpnei	r2,r2,13
    1f3c:	1000091e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f40:	e0bffa03 	ldbu	r2,-24(fp)
    1f44:	108000e8 	cmpgeui	r2,r2,3
    1f48:	1000061e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f4c:	01001904 	movi	r4,100
    1f50:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f54:	e0bffa03 	ldbu	r2,-24(fp)
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1f60:	003f8f06 	br	1da0 <__alt_data_end+0xfc001da0>
        }
        if(rcode) {
    1f64:	e0bffa43 	ldbu	r2,-23(fp)
    1f68:	10001e26 	beq	r2,zero,1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1f6c:	e0bffd03 	ldbu	r2,-12(fp)
    1f70:	1000071e 	bne	r2,zero,1f90 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1f74:	01800044 	movi	r6,1
    1f78:	01403a04 	movi	r5,232
    1f7c:	e13ffb17 	ldw	r4,-20(fp)
    1f80:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1f84:	01001984 	movi	r4,102
    1f88:	00006840 	call	684 <_Z5delaym>
    1f8c:	00001506 	br	1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1f90:	e0bffd03 	ldbu	r2,-12(fp)
    1f94:	e0fffb17 	ldw	r3,-20(fp)
    1f98:	10800784 	addi	r2,r2,30
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	10800017 	ldw	r2,0(r2)
    1fb0:	10800504 	addi	r2,r2,20
    1fb4:	10c00017 	ldw	r3,0(r2)
    1fb8:	e0bffd03 	ldbu	r2,-12(fp)
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	10800784 	addi	r2,r2,30
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1085883a 	add	r2,r2,r2
    1fcc:	2085883a 	add	r2,r4,r2
    1fd0:	10800017 	ldw	r2,0(r2)
    1fd4:	e13ffe03 	ldbu	r4,-8(fp)
    1fd8:	200b883a 	mov	r5,r4
    1fdc:	1009883a 	mov	r4,r2
    1fe0:	183ee83a 	callr	r3
                }
        }
        return rcode;
    1fe4:	e0bffa43 	ldbu	r2,-23(fp)
}
    1fe8:	e037883a 	mov	sp,fp
    1fec:	dfc00117 	ldw	ra,4(sp)
    1ff0:	df000017 	ldw	fp,0(sp)
    1ff4:	dec00204 	addi	sp,sp,8
    1ff8:	f800283a 	ret

00001ffc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    1ffc:	deffed04 	addi	sp,sp,-76
    2000:	dfc01215 	stw	ra,72(sp)
    2004:	df001115 	stw	fp,68(sp)
    2008:	df001104 	addi	fp,sp,68
    200c:	e13ffc15 	stw	r4,-16(fp)
    2010:	2809883a 	mov	r4,r5
    2014:	3007883a 	mov	r3,r6
    2018:	3805883a 	mov	r2,r7
    201c:	e13ffd05 	stb	r4,-12(fp)
    2020:	e0fffe05 	stb	r3,-8(fp)
    2024:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2028:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    202c:	e0bff684 	addi	r2,fp,-38
    2030:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2034:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2038:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    203c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    2040:	00800204 	movi	r2,8
    2044:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    2048:	e0fffb83 	ldbu	r3,-18(fp)
    204c:	00bfff84 	movi	r2,-2
    2050:	1884703a 	and	r2,r3,r2
    2054:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    2058:	e0fffb83 	ldbu	r3,-18(fp)
    205c:	00bfff44 	movi	r2,-3
    2060:	1884703a 	and	r2,r3,r2
    2064:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    2068:	e0bffb83 	ldbu	r2,-18(fp)
    206c:	108000cc 	andi	r2,r2,3
    2070:	10800f14 	ori	r2,r2,60
    2074:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    2078:	e13ffc17 	ldw	r4,-16(fp)
    207c:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    2080:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    2084:	e0bff417 	ldw	r2,-48(fp)
    2088:	10800017 	ldw	r2,0(r2)
    208c:	10800017 	ldw	r2,0(r2)
    2090:	000b883a 	mov	r5,zero
    2094:	e13ff417 	ldw	r4,-48(fp)
    2098:	103ee83a 	callr	r2
    209c:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20a0:	e0bff217 	ldw	r2,-56(fp)
    20a4:	1000021e 	bne	r2,zero,20b0 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    20a8:	00bff584 	movi	r2,-42
    20ac:	00019206 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    20b0:	e0bff217 	ldw	r2,-56(fp)
    20b4:	10c00003 	ldbu	r3,0(r2)
    20b8:	11000043 	ldbu	r4,1(r2)
    20bc:	2008923a 	slli	r4,r4,8
    20c0:	20c6b03a 	or	r3,r4,r3
    20c4:	11000083 	ldbu	r4,2(r2)
    20c8:	2008943a 	slli	r4,r4,16
    20cc:	20c6b03a 	or	r3,r4,r3
    20d0:	108000c3 	ldbu	r2,3(r2)
    20d4:	1004963a 	slli	r2,r2,24
    20d8:	10c4b03a 	or	r2,r2,r3
    20dc:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    20e0:	e0bff217 	ldw	r2,-56(fp)
    20e4:	e0fffb04 	addi	r3,fp,-20
    20e8:	19803fcc 	andi	r6,r3,255
    20ec:	11000003 	ldbu	r4,0(r2)
    20f0:	2008703a 	and	r4,r4,zero
    20f4:	200b883a 	mov	r5,r4
    20f8:	3009883a 	mov	r4,r6
    20fc:	2908b03a 	or	r4,r5,r4
    2100:	11000005 	stb	r4,0(r2)
    2104:	1808d23a 	srli	r4,r3,8
    2108:	21803fcc 	andi	r6,r4,255
    210c:	11000043 	ldbu	r4,1(r2)
    2110:	2008703a 	and	r4,r4,zero
    2114:	200b883a 	mov	r5,r4
    2118:	3009883a 	mov	r4,r6
    211c:	2908b03a 	or	r4,r5,r4
    2120:	11000045 	stb	r4,1(r2)
    2124:	1808d43a 	srli	r4,r3,16
    2128:	21803fcc 	andi	r6,r4,255
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008703a 	and	r4,r4,zero
    2134:	200b883a 	mov	r5,r4
    2138:	3009883a 	mov	r4,r6
    213c:	2908b03a 	or	r4,r5,r4
    2140:	11000085 	stb	r4,2(r2)
    2144:	180ad63a 	srli	r5,r3,24
    2148:	10c000c3 	ldbu	r3,3(r2)
    214c:	1806703a 	and	r3,r3,zero
    2150:	1809883a 	mov	r4,r3
    2154:	2807883a 	mov	r3,r5
    2158:	20c6b03a 	or	r3,r4,r3
    215c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    2160:	e0bff217 	ldw	r2,-56(fp)
    2164:	e0ffff03 	ldbu	r3,-4(fp)
    2168:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    216c:	00800484 	movi	r2,18
    2170:	10ffffcc 	andi	r3,r2,65535
    2174:	e0bff684 	addi	r2,fp,-38
    2178:	d8800015 	stw	r2,0(sp)
    217c:	180f883a 	mov	r7,r3
    2180:	000d883a 	mov	r6,zero
    2184:	000b883a 	mov	r5,zero
    2188:	e13ffc17 	ldw	r4,-16(fp)
    218c:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    2190:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    2194:	e0bff217 	ldw	r2,-56(fp)
    2198:	e0fff317 	ldw	r3,-52(fp)
    219c:	19403fcc 	andi	r5,r3,255
    21a0:	10c00003 	ldbu	r3,0(r2)
    21a4:	1806703a 	and	r3,r3,zero
    21a8:	1809883a 	mov	r4,r3
    21ac:	2807883a 	mov	r3,r5
    21b0:	20c6b03a 	or	r3,r4,r3
    21b4:	10c00005 	stb	r3,0(r2)
    21b8:	e0fff317 	ldw	r3,-52(fp)
    21bc:	1806d23a 	srli	r3,r3,8
    21c0:	19403fcc 	andi	r5,r3,255
    21c4:	10c00043 	ldbu	r3,1(r2)
    21c8:	1806703a 	and	r3,r3,zero
    21cc:	1809883a 	mov	r4,r3
    21d0:	2807883a 	mov	r3,r5
    21d4:	20c6b03a 	or	r3,r4,r3
    21d8:	10c00045 	stb	r3,1(r2)
    21dc:	e0fff317 	ldw	r3,-52(fp)
    21e0:	1806d43a 	srli	r3,r3,16
    21e4:	19403fcc 	andi	r5,r3,255
    21e8:	10c00083 	ldbu	r3,2(r2)
    21ec:	1806703a 	and	r3,r3,zero
    21f0:	1809883a 	mov	r4,r3
    21f4:	2807883a 	mov	r3,r5
    21f8:	20c6b03a 	or	r3,r4,r3
    21fc:	10c00085 	stb	r3,2(r2)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	180ad63a 	srli	r5,r3,24
    2208:	10c000c3 	ldbu	r3,3(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2220:	e0bff043 	ldbu	r2,-63(fp)
    2224:	10000226 	beq	r2,zero,2230 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
    2228:	e0bff043 	ldbu	r2,-63(fp)
    222c:	00013206 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    2230:	e0bff117 	ldw	r2,-60(fp)
    2234:	10c00203 	ldbu	r3,8(r2)
    2238:	10800243 	ldbu	r2,9(r2)
    223c:	1004923a 	slli	r2,r2,8
    2240:	10c4b03a 	or	r2,r2,r3
    2244:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    2248:	e0bff117 	ldw	r2,-60(fp)
    224c:	10c00283 	ldbu	r3,10(r2)
    2250:	108002c3 	ldbu	r2,11(r2)
    2254:	1004923a 	slli	r2,r2,8
    2258:	10c4b03a 	or	r2,r2,r3
    225c:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    2260:	e0bff117 	ldw	r2,-60(fp)
    2264:	10800103 	ldbu	r2,4(r2)
    2268:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    226c:	e0bff117 	ldw	r2,-60(fp)
    2270:	10800143 	ldbu	r2,5(r2)
    2274:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    2278:	e03ff005 	stb	zero,-64(fp)
    227c:	e0bff003 	ldbu	r2,-64(fp)
    2280:	10800428 	cmpgeui	r2,r2,16
    2284:	1000821e 	bne	r2,zero,2490 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue;// no driver
    2288:	e0bff003 	ldbu	r2,-64(fp)
    228c:	e0fffc17 	ldw	r3,-16(fp)
    2290:	10800784 	addi	r2,r2,30
    2294:	1085883a 	add	r2,r2,r2
    2298:	1085883a 	add	r2,r2,r2
    229c:	1885883a 	add	r2,r3,r2
    22a0:	10800017 	ldw	r2,0(r2)
    22a4:	10007226 	beq	r2,zero,2470 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    22a8:	e0bff003 	ldbu	r2,-64(fp)
    22ac:	e0fffc17 	ldw	r3,-16(fp)
    22b0:	10800784 	addi	r2,r2,30
    22b4:	1085883a 	add	r2,r2,r2
    22b8:	1085883a 	add	r2,r2,r2
    22bc:	1885883a 	add	r2,r3,r2
    22c0:	10800017 	ldw	r2,0(r2)
    22c4:	10800017 	ldw	r2,0(r2)
    22c8:	10800404 	addi	r2,r2,16
    22cc:	10c00017 	ldw	r3,0(r2)
    22d0:	e0bff003 	ldbu	r2,-64(fp)
    22d4:	e13ffc17 	ldw	r4,-16(fp)
    22d8:	10800784 	addi	r2,r2,30
    22dc:	1085883a 	add	r2,r2,r2
    22e0:	1085883a 	add	r2,r2,r2
    22e4:	2085883a 	add	r2,r4,r2
    22e8:	10800017 	ldw	r2,0(r2)
    22ec:	1009883a 	mov	r4,r2
    22f0:	183ee83a 	callr	r3
    22f4:	10803fcc 	andi	r2,r2,255
    22f8:	1004c03a 	cmpne	r2,r2,zero
    22fc:	10803fcc 	andi	r2,r2,255
    2300:	10005d1e 	bne	r2,zero,2478 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
    2304:	e0bff003 	ldbu	r2,-64(fp)
    2308:	e0fffc17 	ldw	r3,-16(fp)
    230c:	10800784 	addi	r2,r2,30
    2310:	1085883a 	add	r2,r2,r2
    2314:	1085883a 	add	r2,r2,r2
    2318:	1885883a 	add	r2,r3,r2
    231c:	10800017 	ldw	r2,0(r2)
    2320:	10800017 	ldw	r2,0(r2)
    2324:	10800804 	addi	r2,r2,32
    2328:	10c00017 	ldw	r3,0(r2)
    232c:	e0bff003 	ldbu	r2,-64(fp)
    2330:	e13ffc17 	ldw	r4,-16(fp)
    2334:	10800784 	addi	r2,r2,30
    2338:	1085883a 	add	r2,r2,r2
    233c:	1085883a 	add	r2,r2,r2
    2340:	2085883a 	add	r2,r4,r2
    2344:	10800017 	ldw	r2,0(r2)
    2348:	e13ff643 	ldbu	r4,-39(fp)
    234c:	200b883a 	mov	r5,r4
    2350:	1009883a 	mov	r4,r2
    2354:	183ee83a 	callr	r3
    2358:	10803fcc 	andi	r2,r2,255
    235c:	10003226 	beq	r2,zero,2428 <_ZN3USB11ConfiguringEhhb+0x42c>
    2360:	e0bff003 	ldbu	r2,-64(fp)
    2364:	e0fffc17 	ldw	r3,-16(fp)
    2368:	10800784 	addi	r2,r2,30
    236c:	1085883a 	add	r2,r2,r2
    2370:	1085883a 	add	r2,r2,r2
    2374:	1885883a 	add	r2,r3,r2
    2378:	10800017 	ldw	r2,0(r2)
    237c:	10800017 	ldw	r2,0(r2)
    2380:	10800604 	addi	r2,r2,24
    2384:	10c00017 	ldw	r3,0(r2)
    2388:	e0bff003 	ldbu	r2,-64(fp)
    238c:	e13ffc17 	ldw	r4,-16(fp)
    2390:	10800784 	addi	r2,r2,30
    2394:	1085883a 	add	r2,r2,r2
    2398:	1085883a 	add	r2,r2,r2
    239c:	2085883a 	add	r2,r4,r2
    23a0:	10800017 	ldw	r2,0(r2)
    23a4:	e13ff50b 	ldhu	r4,-44(fp)
    23a8:	e17ff58b 	ldhu	r5,-42(fp)
    23ac:	280d883a 	mov	r6,r5
    23b0:	200b883a 	mov	r5,r4
    23b4:	1009883a 	mov	r4,r2
    23b8:	183ee83a 	callr	r3
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	1000171e 	bne	r2,zero,2420 <_ZN3USB11ConfiguringEhhb+0x424>
    23c4:	e0bff003 	ldbu	r2,-64(fp)
    23c8:	e0fffc17 	ldw	r3,-16(fp)
    23cc:	10800784 	addi	r2,r2,30
    23d0:	1085883a 	add	r2,r2,r2
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1885883a 	add	r2,r3,r2
    23dc:	10800017 	ldw	r2,0(r2)
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10800704 	addi	r2,r2,28
    23e8:	10c00017 	ldw	r3,0(r2)
    23ec:	e0bff003 	ldbu	r2,-64(fp)
    23f0:	e13ffc17 	ldw	r4,-16(fp)
    23f4:	10800784 	addi	r2,r2,30
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	1085883a 	add	r2,r2,r2
    2400:	2085883a 	add	r2,r4,r2
    2404:	10800017 	ldw	r2,0(r2)
    2408:	e13ff603 	ldbu	r4,-40(fp)
    240c:	200b883a 	mov	r5,r4
    2410:	1009883a 	mov	r4,r2
    2414:	183ee83a 	callr	r3
    2418:	10803fcc 	andi	r2,r2,255
    241c:	10000226 	beq	r2,zero,2428 <_ZN3USB11ConfiguringEhhb+0x42c>
    2420:	00800044 	movi	r2,1
    2424:	00000106 	br	242c <_ZN3USB11ConfiguringEhhb+0x430>
    2428:	0005883a 	mov	r2,zero
    242c:	10803fcc 	andi	r2,r2,255
    2430:	10001226 	beq	r2,zero,247c <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2434:	e0fff003 	ldbu	r3,-64(fp)
    2438:	e13ffd03 	ldbu	r4,-12(fp)
    243c:	e17ffe03 	ldbu	r5,-8(fp)
    2440:	e0bfff03 	ldbu	r2,-4(fp)
    2444:	d8800015 	stw	r2,0(sp)
    2448:	280f883a 	mov	r7,r5
    244c:	200d883a 	mov	r6,r4
    2450:	180b883a 	mov	r5,r3
    2454:	e13ffc17 	ldw	r4,-16(fp)
    2458:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    245c:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
    2460:	e0bff043 	ldbu	r2,-63(fp)
    2464:	10803460 	cmpeqi	r2,r2,209
    2468:	10000826 	beq	r2,zero,248c <_ZN3USB11ConfiguringEhhb+0x490>
    246c:	00000306 	br	247c <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;// no driver
    2470:	0001883a 	nop
    2474:	00000106 	br	247c <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    2478:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    247c:	e0bff003 	ldbu	r2,-64(fp)
    2480:	10800044 	addi	r2,r2,1
    2484:	e0bff005 	stb	r2,-64(fp)
    2488:	003f7c06 	br	227c <__alt_data_end+0xfc00227c>
                if(!devConfig[devConfigIndex]) continue;// no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
    248c:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
    2490:	e0bff003 	ldbu	r2,-64(fp)
    2494:	10800428 	cmpgeui	r2,r2,16
    2498:	1000021e 	bne	r2,zero,24a4 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
    249c:	e0bff043 	ldbu	r2,-63(fp)
    24a0:	00009506 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    24a4:	e03ff005 	stb	zero,-64(fp)
    24a8:	e0bff003 	ldbu	r2,-64(fp)
    24ac:	10800428 	cmpgeui	r2,r2,16
    24b0:	1000871e 	bne	r2,zero,26d0 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
    24b4:	e0bff003 	ldbu	r2,-64(fp)
    24b8:	e0fffc17 	ldw	r3,-16(fp)
    24bc:	10800784 	addi	r2,r2,30
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	1085883a 	add	r2,r2,r2
    24c8:	1885883a 	add	r2,r3,r2
    24cc:	10800017 	ldw	r2,0(r2)
    24d0:	10007626 	beq	r2,zero,26ac <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    24d4:	e0bff003 	ldbu	r2,-64(fp)
    24d8:	e0fffc17 	ldw	r3,-16(fp)
    24dc:	10800784 	addi	r2,r2,30
    24e0:	1085883a 	add	r2,r2,r2
    24e4:	1085883a 	add	r2,r2,r2
    24e8:	1885883a 	add	r2,r3,r2
    24ec:	10800017 	ldw	r2,0(r2)
    24f0:	10800017 	ldw	r2,0(r2)
    24f4:	10800404 	addi	r2,r2,16
    24f8:	10c00017 	ldw	r3,0(r2)
    24fc:	e0bff003 	ldbu	r2,-64(fp)
    2500:	e13ffc17 	ldw	r4,-16(fp)
    2504:	10800784 	addi	r2,r2,30
    2508:	1085883a 	add	r2,r2,r2
    250c:	1085883a 	add	r2,r2,r2
    2510:	2085883a 	add	r2,r4,r2
    2514:	10800017 	ldw	r2,0(r2)
    2518:	1009883a 	mov	r4,r2
    251c:	183ee83a 	callr	r3
    2520:	10803fcc 	andi	r2,r2,255
    2524:	1004c03a 	cmpne	r2,r2,zero
    2528:	10803fcc 	andi	r2,r2,255
    252c:	1000611e 	bne	r2,zero,26b4 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    2530:	e0bff003 	ldbu	r2,-64(fp)
    2534:	e0fffc17 	ldw	r3,-16(fp)
    2538:	10800784 	addi	r2,r2,30
    253c:	1085883a 	add	r2,r2,r2
    2540:	1085883a 	add	r2,r2,r2
    2544:	1885883a 	add	r2,r3,r2
    2548:	10800017 	ldw	r2,0(r2)
    254c:	10800017 	ldw	r2,0(r2)
    2550:	10800804 	addi	r2,r2,32
    2554:	10c00017 	ldw	r3,0(r2)
    2558:	e0bff003 	ldbu	r2,-64(fp)
    255c:	e13ffc17 	ldw	r4,-16(fp)
    2560:	10800784 	addi	r2,r2,30
    2564:	1085883a 	add	r2,r2,r2
    2568:	1085883a 	add	r2,r2,r2
    256c:	2085883a 	add	r2,r4,r2
    2570:	10800017 	ldw	r2,0(r2)
    2574:	e13ff643 	ldbu	r4,-39(fp)
    2578:	200b883a 	mov	r5,r4
    257c:	1009883a 	mov	r4,r2
    2580:	183ee83a 	callr	r3
    2584:	10803fcc 	andi	r2,r2,255
    2588:	10003226 	beq	r2,zero,2654 <_ZN3USB11ConfiguringEhhb+0x658>
    258c:	e0bff003 	ldbu	r2,-64(fp)
    2590:	e0fffc17 	ldw	r3,-16(fp)
    2594:	10800784 	addi	r2,r2,30
    2598:	1085883a 	add	r2,r2,r2
    259c:	1085883a 	add	r2,r2,r2
    25a0:	1885883a 	add	r2,r3,r2
    25a4:	10800017 	ldw	r2,0(r2)
    25a8:	10800017 	ldw	r2,0(r2)
    25ac:	10800604 	addi	r2,r2,24
    25b0:	10c00017 	ldw	r3,0(r2)
    25b4:	e0bff003 	ldbu	r2,-64(fp)
    25b8:	e13ffc17 	ldw	r4,-16(fp)
    25bc:	10800784 	addi	r2,r2,30
    25c0:	1085883a 	add	r2,r2,r2
    25c4:	1085883a 	add	r2,r2,r2
    25c8:	2085883a 	add	r2,r4,r2
    25cc:	10800017 	ldw	r2,0(r2)
    25d0:	e13ff50b 	ldhu	r4,-44(fp)
    25d4:	e17ff58b 	ldhu	r5,-42(fp)
    25d8:	280d883a 	mov	r6,r5
    25dc:	200b883a 	mov	r5,r4
    25e0:	1009883a 	mov	r4,r2
    25e4:	183ee83a 	callr	r3
    25e8:	10803fcc 	andi	r2,r2,255
    25ec:	1000171e 	bne	r2,zero,264c <_ZN3USB11ConfiguringEhhb+0x650>
    25f0:	e0bff003 	ldbu	r2,-64(fp)
    25f4:	e0fffc17 	ldw	r3,-16(fp)
    25f8:	10800784 	addi	r2,r2,30
    25fc:	1085883a 	add	r2,r2,r2
    2600:	1085883a 	add	r2,r2,r2
    2604:	1885883a 	add	r2,r3,r2
    2608:	10800017 	ldw	r2,0(r2)
    260c:	10800017 	ldw	r2,0(r2)
    2610:	10800704 	addi	r2,r2,28
    2614:	10c00017 	ldw	r3,0(r2)
    2618:	e0bff003 	ldbu	r2,-64(fp)
    261c:	e13ffc17 	ldw	r4,-16(fp)
    2620:	10800784 	addi	r2,r2,30
    2624:	1085883a 	add	r2,r2,r2
    2628:	1085883a 	add	r2,r2,r2
    262c:	2085883a 	add	r2,r4,r2
    2630:	10800017 	ldw	r2,0(r2)
    2634:	e13ff603 	ldbu	r4,-40(fp)
    2638:	200b883a 	mov	r5,r4
    263c:	1009883a 	mov	r4,r2
    2640:	183ee83a 	callr	r3
    2644:	10803fcc 	andi	r2,r2,255
    2648:	10000226 	beq	r2,zero,2654 <_ZN3USB11ConfiguringEhhb+0x658>
    264c:	00800044 	movi	r2,1
    2650:	00000106 	br	2658 <_ZN3USB11ConfiguringEhhb+0x65c>
    2654:	0005883a 	mov	r2,zero
    2658:	10803fcc 	andi	r2,r2,255
    265c:	1000171e 	bne	r2,zero,26bc <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2660:	e0fff003 	ldbu	r3,-64(fp)
    2664:	e13ffd03 	ldbu	r4,-12(fp)
    2668:	e17ffe03 	ldbu	r5,-8(fp)
    266c:	e0bfff03 	ldbu	r2,-4(fp)
    2670:	d8800015 	stw	r2,0(sp)
    2674:	280f883a 	mov	r7,r5
    2678:	200d883a 	mov	r6,r4
    267c:	180b883a 	mov	r5,r3
    2680:	e13ffc17 	ldw	r4,-16(fp)
    2684:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    2688:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
    268c:	e0bff043 	ldbu	r2,-63(fp)
    2690:	10803460 	cmpeqi	r2,r2,209
    2694:	10000a1e 	bne	r2,zero,26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
    2698:	e0bff043 	ldbu	r2,-63(fp)
    269c:	10803660 	cmpeqi	r2,r2,217
    26a0:	1000071e 	bne	r2,zero,26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
    26a4:	e0bff043 	ldbu	r2,-63(fp)
    26a8:	00001306 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
                return rcode;
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
    26ac:	0001883a 	nop
    26b0:	00000306 	br	26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    26b4:	0001883a 	nop
    26b8:	00000106 	br	26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    26bc:	0001883a 	nop
        if(devConfigIndex < USB_NUMDEVICES) {
                return rcode;
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    26c0:	e0bff003 	ldbu	r2,-64(fp)
    26c4:	10800044 	addi	r2,r2,1
    26c8:	e0bff005 	stb	r2,-64(fp)
    26cc:	003f7606 	br	24a8 <__alt_data_end+0xfc0024a8>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
    26d0:	e0bffd03 	ldbu	r2,-12(fp)
    26d4:	e0fffe03 	ldbu	r3,-8(fp)
    26d8:	e13fff03 	ldbu	r4,-4(fp)
    26dc:	200f883a 	mov	r7,r4
    26e0:	180d883a 	mov	r6,r3
    26e4:	100b883a 	mov	r5,r2
    26e8:	e13ffc17 	ldw	r4,-16(fp)
    26ec:	0001c0c0 	call	1c0c <_ZN3USB17DefaultAddressingEhhb>
    26f0:	e0bff045 	stb	r2,-63(fp)

        return rcode;
    26f4:	e0bff043 	ldbu	r2,-63(fp)
}
    26f8:	e037883a 	mov	sp,fp
    26fc:	dfc00117 	ldw	ra,4(sp)
    2700:	df000017 	ldw	fp,0(sp)
    2704:	dec00204 	addi	sp,sp,8
    2708:	f800283a 	ret

0000270c <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    270c:	defffb04 	addi	sp,sp,-20
    2710:	dfc00415 	stw	ra,16(sp)
    2714:	df000315 	stw	fp,12(sp)
    2718:	df000304 	addi	fp,sp,12
    271c:	e13ffe15 	stw	r4,-8(fp)
    2720:	2805883a 	mov	r2,r5
    2724:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2728:	e0bfff03 	ldbu	r2,-4(fp)
    272c:	1000021e 	bne	r2,zero,2738 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    2730:	0005883a 	mov	r2,zero
    2734:	00003e06 	br	2830 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2738:	e03ffd05 	stb	zero,-12(fp)
    273c:	e0bffd03 	ldbu	r2,-12(fp)
    2740:	10800428 	cmpgeui	r2,r2,16
    2744:	1000391e 	bne	r2,zero,282c <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2748:	e0bffd03 	ldbu	r2,-12(fp)
    274c:	e0fffe17 	ldw	r3,-8(fp)
    2750:	10800784 	addi	r2,r2,30
    2754:	1085883a 	add	r2,r2,r2
    2758:	1085883a 	add	r2,r2,r2
    275c:	1885883a 	add	r2,r3,r2
    2760:	10800017 	ldw	r2,0(r2)
    2764:	10002c26 	beq	r2,zero,2818 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2768:	e0bffd03 	ldbu	r2,-12(fp)
    276c:	e0fffe17 	ldw	r3,-8(fp)
    2770:	10800784 	addi	r2,r2,30
    2774:	1085883a 	add	r2,r2,r2
    2778:	1085883a 	add	r2,r2,r2
    277c:	1885883a 	add	r2,r3,r2
    2780:	10800017 	ldw	r2,0(r2)
    2784:	10800017 	ldw	r2,0(r2)
    2788:	10800404 	addi	r2,r2,16
    278c:	10c00017 	ldw	r3,0(r2)
    2790:	e0bffd03 	ldbu	r2,-12(fp)
    2794:	e13ffe17 	ldw	r4,-8(fp)
    2798:	10800784 	addi	r2,r2,30
    279c:	1085883a 	add	r2,r2,r2
    27a0:	1085883a 	add	r2,r2,r2
    27a4:	2085883a 	add	r2,r4,r2
    27a8:	10800017 	ldw	r2,0(r2)
    27ac:	1009883a 	mov	r4,r2
    27b0:	183ee83a 	callr	r3
    27b4:	10c03fcc 	andi	r3,r2,255
    27b8:	e0bfff03 	ldbu	r2,-4(fp)
    27bc:	1885003a 	cmpeq	r2,r3,r2
    27c0:	10803fcc 	andi	r2,r2,255
    27c4:	10001526 	beq	r2,zero,281c <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    27c8:	e0bffd03 	ldbu	r2,-12(fp)
    27cc:	e0fffe17 	ldw	r3,-8(fp)
    27d0:	10800784 	addi	r2,r2,30
    27d4:	1085883a 	add	r2,r2,r2
    27d8:	1085883a 	add	r2,r2,r2
    27dc:	1885883a 	add	r2,r3,r2
    27e0:	10800017 	ldw	r2,0(r2)
    27e4:	10800017 	ldw	r2,0(r2)
    27e8:	10800204 	addi	r2,r2,8
    27ec:	10c00017 	ldw	r3,0(r2)
    27f0:	e0bffd03 	ldbu	r2,-12(fp)
    27f4:	e13ffe17 	ldw	r4,-8(fp)
    27f8:	10800784 	addi	r2,r2,30
    27fc:	1085883a 	add	r2,r2,r2
    2800:	1085883a 	add	r2,r2,r2
    2804:	2085883a 	add	r2,r4,r2
    2808:	10800017 	ldw	r2,0(r2)
    280c:	1009883a 	mov	r4,r2
    2810:	183ee83a 	callr	r3
    2814:	00000606 	br	2830 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    2818:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    281c:	e0bffd03 	ldbu	r2,-12(fp)
    2820:	10800044 	addi	r2,r2,1
    2824:	e0bffd05 	stb	r2,-12(fp)
    2828:	003fc406 	br	273c <__alt_data_end+0xfc00273c>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    282c:	0005883a 	mov	r2,zero
        printf("END\n");
}
    2830:	e037883a 	mov	sp,fp
    2834:	dfc00117 	ldw	ra,4(sp)
    2838:	df000017 	ldw	fp,0(sp)
    283c:	dec00204 	addi	sp,sp,8
    2840:	f800283a 	ret

00002844 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2844:	defff204 	addi	sp,sp,-56
    2848:	dfc00d15 	stw	ra,52(sp)
    284c:	df000c15 	stw	fp,48(sp)
    2850:	df000c04 	addi	fp,sp,48
    2854:	e13ffc15 	stw	r4,-16(fp)
    2858:	2809883a 	mov	r4,r5
    285c:	3007883a 	mov	r3,r6
    2860:	3805883a 	mov	r2,r7
    2864:	e13ffd05 	stb	r4,-12(fp)
    2868:	e0fffe05 	stb	r3,-8(fp)
    286c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    2870:	e17ffd03 	ldbu	r5,-12(fp)
    2874:	e1bffe03 	ldbu	r6,-8(fp)
    2878:	e0bfff0b 	ldhu	r2,-4(fp)
    287c:	e0ffff0b 	ldhu	r3,-4(fp)
    2880:	d8000715 	stw	zero,28(sp)
    2884:	e1000217 	ldw	r4,8(fp)
    2888:	d9000615 	stw	r4,24(sp)
    288c:	d8c00515 	stw	r3,20(sp)
    2890:	d8800415 	stw	r2,16(sp)
    2894:	d8000315 	stw	zero,12(sp)
    2898:	00800044 	movi	r2,1
    289c:	d8800215 	stw	r2,8(sp)
    28a0:	d8000115 	stw	zero,4(sp)
    28a4:	00800184 	movi	r2,6
    28a8:	d8800015 	stw	r2,0(sp)
    28ac:	01c02004 	movi	r7,128
    28b0:	e13ffc17 	ldw	r4,-16(fp)
    28b4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    28b8:	e037883a 	mov	sp,fp
    28bc:	dfc00117 	ldw	ra,4(sp)
    28c0:	df000017 	ldw	fp,0(sp)
    28c4:	dec00204 	addi	sp,sp,8
    28c8:	f800283a 	ret

000028cc <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    28cc:	defff104 	addi	sp,sp,-60
    28d0:	dfc00e15 	stw	ra,56(sp)
    28d4:	df000d15 	stw	fp,52(sp)
    28d8:	df000d04 	addi	fp,sp,52
    28dc:	e13ffb15 	stw	r4,-20(fp)
    28e0:	3009883a 	mov	r4,r6
    28e4:	3807883a 	mov	r3,r7
    28e8:	e0800217 	ldw	r2,8(fp)
    28ec:	e17ffc05 	stb	r5,-16(fp)
    28f0:	e13ffd05 	stb	r4,-12(fp)
    28f4:	e0fffe0d 	sth	r3,-8(fp)
    28f8:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    28fc:	e23ffc03 	ldbu	r8,-16(fp)
    2900:	e1bffd03 	ldbu	r6,-12(fp)
    2904:	e0bfff03 	ldbu	r2,-4(fp)
    2908:	e0fffe0b 	ldhu	r3,-8(fp)
    290c:	e13ffe0b 	ldhu	r4,-8(fp)
    2910:	d8000715 	stw	zero,28(sp)
    2914:	e1400317 	ldw	r5,12(fp)
    2918:	d9400615 	stw	r5,24(sp)
    291c:	d9000515 	stw	r4,20(sp)
    2920:	d8c00415 	stw	r3,16(sp)
    2924:	d8000315 	stw	zero,12(sp)
    2928:	00c00084 	movi	r3,2
    292c:	d8c00215 	stw	r3,8(sp)
    2930:	d8800115 	stw	r2,4(sp)
    2934:	00800184 	movi	r2,6
    2938:	d8800015 	stw	r2,0(sp)
    293c:	01c02004 	movi	r7,128
    2940:	400b883a 	mov	r5,r8
    2944:	e13ffb17 	ldw	r4,-20(fp)
    2948:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    294c:	e037883a 	mov	sp,fp
    2950:	dfc00117 	ldw	ra,4(sp)
    2954:	df000017 	ldw	fp,0(sp)
    2958:	dec00204 	addi	sp,sp,8
    295c:	f800283a 	ret

00002960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    2960:	deffdf04 	addi	sp,sp,-132
    2964:	dfc02015 	stw	ra,128(sp)
    2968:	df001f15 	stw	fp,124(sp)
    296c:	df001f04 	addi	fp,sp,124
    2970:	e13ffc15 	stw	r4,-16(fp)
    2974:	2809883a 	mov	r4,r5
    2978:	3007883a 	mov	r3,r6
    297c:	3805883a 	mov	r2,r7
    2980:	e13ffd05 	stb	r4,-12(fp)
    2984:	e0fffe05 	stb	r3,-8(fp)
    2988:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    298c:	00801004 	movi	r2,64
    2990:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    2994:	e0bfec04 	addi	r2,fp,-80
    2998:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    299c:	e13ffd03 	ldbu	r4,-12(fp)
    29a0:	e17ffe03 	ldbu	r5,-8(fp)
    29a4:	e0bfff03 	ldbu	r2,-4(fp)
    29a8:	e0ffec04 	addi	r3,fp,-80
    29ac:	d8c00115 	stw	r3,4(sp)
    29b0:	d8800015 	stw	r2,0(sp)
    29b4:	01c00244 	movi	r7,9
    29b8:	280d883a 	mov	r6,r5
    29bc:	200b883a 	mov	r5,r4
    29c0:	e13ffc17 	ldw	r4,-16(fp)
    29c4:	00028cc0 	call	28cc <_ZN3USB12getConfDescrEhhthPh>
    29c8:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    29cc:	e0bfeb03 	ldbu	r2,-84(fp)
    29d0:	10000226 	beq	r2,zero,29dc <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    29d4:	e0bfeb03 	ldbu	r2,-84(fp)
    29d8:	00001a06 	br	2a44 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    29dc:	e0bfea17 	ldw	r2,-88(fp)
    29e0:	10c00083 	ldbu	r3,2(r2)
    29e4:	108000c3 	ldbu	r2,3(r2)
    29e8:	1004923a 	slli	r2,r2,8
    29ec:	10c4b03a 	or	r2,r2,r3
    29f0:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    29f4:	e17ffd03 	ldbu	r5,-12(fp)
    29f8:	e1bffe03 	ldbu	r6,-8(fp)
    29fc:	e0bfff03 	ldbu	r2,-4(fp)
    2a00:	e0ffeb8b 	ldhu	r3,-82(fp)
    2a04:	e1000217 	ldw	r4,8(fp)
    2a08:	d9000715 	stw	r4,28(sp)
    2a0c:	e13fec04 	addi	r4,fp,-80
    2a10:	d9000615 	stw	r4,24(sp)
    2a14:	01001004 	movi	r4,64
    2a18:	d9000515 	stw	r4,20(sp)
    2a1c:	d8c00415 	stw	r3,16(sp)
    2a20:	d8000315 	stw	zero,12(sp)
    2a24:	00c00084 	movi	r3,2
    2a28:	d8c00215 	stw	r3,8(sp)
    2a2c:	d8800115 	stw	r2,4(sp)
    2a30:	00800184 	movi	r2,6
    2a34:	d8800015 	stw	r2,0(sp)
    2a38:	01c02004 	movi	r7,128
    2a3c:	e13ffc17 	ldw	r4,-16(fp)
    2a40:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2a44:	e037883a 	mov	sp,fp
    2a48:	dfc00117 	ldw	ra,4(sp)
    2a4c:	df000017 	ldw	fp,0(sp)
    2a50:	dec00204 	addi	sp,sp,8
    2a54:	f800283a 	ret

00002a58 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2a58:	defff004 	addi	sp,sp,-64
    2a5c:	dfc00f15 	stw	ra,60(sp)
    2a60:	df000e15 	stw	fp,56(sp)
    2a64:	df000e04 	addi	fp,sp,56
    2a68:	e13ffa15 	stw	r4,-24(fp)
    2a6c:	2811883a 	mov	r8,r5
    2a70:	300b883a 	mov	r5,r6
    2a74:	3809883a 	mov	r4,r7
    2a78:	e0c00217 	ldw	r3,8(fp)
    2a7c:	e0800317 	ldw	r2,12(fp)
    2a80:	e23ffb05 	stb	r8,-20(fp)
    2a84:	e17ffc05 	stb	r5,-16(fp)
    2a88:	e13ffd0d 	sth	r4,-12(fp)
    2a8c:	e0fffe05 	stb	r3,-8(fp)
    2a90:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2a94:	e23ffb03 	ldbu	r8,-20(fp)
    2a98:	e27ffc03 	ldbu	r9,-16(fp)
    2a9c:	e0bffe03 	ldbu	r2,-8(fp)
    2aa0:	e0ffff0b 	ldhu	r3,-4(fp)
    2aa4:	e13ffd0b 	ldhu	r4,-12(fp)
    2aa8:	e17ffd0b 	ldhu	r5,-12(fp)
    2aac:	d8000715 	stw	zero,28(sp)
    2ab0:	e1800417 	ldw	r6,16(fp)
    2ab4:	d9800615 	stw	r6,24(sp)
    2ab8:	d9400515 	stw	r5,20(sp)
    2abc:	d9000415 	stw	r4,16(sp)
    2ac0:	d8c00315 	stw	r3,12(sp)
    2ac4:	00c000c4 	movi	r3,3
    2ac8:	d8c00215 	stw	r3,8(sp)
    2acc:	d8800115 	stw	r2,4(sp)
    2ad0:	00800184 	movi	r2,6
    2ad4:	d8800015 	stw	r2,0(sp)
    2ad8:	01c02004 	movi	r7,128
    2adc:	480d883a 	mov	r6,r9
    2ae0:	400b883a 	mov	r5,r8
    2ae4:	e13ffa17 	ldw	r4,-24(fp)
    2ae8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2aec:	e037883a 	mov	sp,fp
    2af0:	dfc00117 	ldw	ra,4(sp)
    2af4:	df000017 	ldw	fp,0(sp)
    2af8:	dec00204 	addi	sp,sp,8
    2afc:	f800283a 	ret

00002b00 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    2b00:	defff104 	addi	sp,sp,-60
    2b04:	dfc00e15 	stw	ra,56(sp)
    2b08:	df000d15 	stw	fp,52(sp)
    2b0c:	df000d04 	addi	fp,sp,52
    2b10:	e13ffc15 	stw	r4,-16(fp)
    2b14:	2809883a 	mov	r4,r5
    2b18:	3007883a 	mov	r3,r6
    2b1c:	3805883a 	mov	r2,r7
    2b20:	e13ffd05 	stb	r4,-12(fp)
    2b24:	e0fffe05 	stb	r3,-8(fp)
    2b28:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2b2c:	e0fffd03 	ldbu	r3,-12(fp)
    2b30:	e13ffe03 	ldbu	r4,-8(fp)
    2b34:	e0bfff03 	ldbu	r2,-4(fp)
    2b38:	d8000715 	stw	zero,28(sp)
    2b3c:	d8000615 	stw	zero,24(sp)
    2b40:	d8000515 	stw	zero,20(sp)
    2b44:	d8000415 	stw	zero,16(sp)
    2b48:	d8000315 	stw	zero,12(sp)
    2b4c:	d8000215 	stw	zero,8(sp)
    2b50:	d8800115 	stw	r2,4(sp)
    2b54:	00800144 	movi	r2,5
    2b58:	d8800015 	stw	r2,0(sp)
    2b5c:	000f883a 	mov	r7,zero
    2b60:	200d883a 	mov	r6,r4
    2b64:	180b883a 	mov	r5,r3
    2b68:	e13ffc17 	ldw	r4,-16(fp)
    2b6c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    2b70:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2b74:	01004b04 	movi	r4,300
    2b78:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2b7c:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    2b80:	e037883a 	mov	sp,fp
    2b84:	dfc00117 	ldw	ra,4(sp)
    2b88:	df000017 	ldw	fp,0(sp)
    2b8c:	dec00204 	addi	sp,sp,8
    2b90:	f800283a 	ret

00002b94 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2b94:	defff204 	addi	sp,sp,-56
    2b98:	dfc00d15 	stw	ra,52(sp)
    2b9c:	df000c15 	stw	fp,48(sp)
    2ba0:	df000c04 	addi	fp,sp,48
    2ba4:	e13ffc15 	stw	r4,-16(fp)
    2ba8:	2809883a 	mov	r4,r5
    2bac:	3007883a 	mov	r3,r6
    2bb0:	3805883a 	mov	r2,r7
    2bb4:	e13ffd05 	stb	r4,-12(fp)
    2bb8:	e0fffe05 	stb	r3,-8(fp)
    2bbc:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    2bc0:	e0fffd03 	ldbu	r3,-12(fp)
    2bc4:	e13ffe03 	ldbu	r4,-8(fp)
    2bc8:	e0bfff03 	ldbu	r2,-4(fp)
    2bcc:	d8000715 	stw	zero,28(sp)
    2bd0:	d8000615 	stw	zero,24(sp)
    2bd4:	d8000515 	stw	zero,20(sp)
    2bd8:	d8000415 	stw	zero,16(sp)
    2bdc:	d8000315 	stw	zero,12(sp)
    2be0:	d8000215 	stw	zero,8(sp)
    2be4:	d8800115 	stw	r2,4(sp)
    2be8:	00800244 	movi	r2,9
    2bec:	d8800015 	stw	r2,0(sp)
    2bf0:	000f883a 	mov	r7,zero
    2bf4:	200d883a 	mov	r6,r4
    2bf8:	180b883a 	mov	r5,r3
    2bfc:	e13ffc17 	ldw	r4,-16(fp)
    2c00:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2c04:	e037883a 	mov	sp,fp
    2c08:	dfc00117 	ldw	ra,4(sp)
    2c0c:	df000017 	ldw	fp,0(sp)
    2c10:	dec00204 	addi	sp,sp,8
    2c14:	f800283a 	ret

00002c18 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2c18:	defffe04 	addi	sp,sp,-8
    2c1c:	df000115 	stw	fp,4(sp)
    2c20:	df000104 	addi	fp,sp,4
    2c24:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2c28:	e0bfff17 	ldw	r2,-4(fp)
        };
    2c2c:	e037883a 	mov	sp,fp
    2c30:	df000017 	ldw	fp,0(sp)
    2c34:	dec00104 	addi	sp,sp,4
    2c38:	f800283a 	ret

00002c3c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2c3c:	defffe04 	addi	sp,sp,-8
    2c40:	df000115 	stw	fp,4(sp)
    2c44:	df000104 	addi	fp,sp,4
    2c48:	e13fff15 	stw	r4,-4(fp)
    2c4c:	008000b4 	movhi	r2,2
    2c50:	1092fe04 	addi	r2,r2,19448
    2c54:	e0ffff17 	ldw	r3,-4(fp)
    2c58:	18800015 	stw	r2,0(r3)
    2c5c:	0001883a 	nop
    2c60:	e037883a 	mov	sp,fp
    2c64:	df000017 	ldw	fp,0(sp)
    2c68:	dec00104 	addi	sp,sp,4
    2c6c:	f800283a 	ret

00002c70 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    2c70:	defffd04 	addi	sp,sp,-12
    2c74:	dfc00215 	stw	ra,8(sp)
    2c78:	df000115 	stw	fp,4(sp)
    2c7c:	df000104 	addi	fp,sp,4
    2c80:	e13fff15 	stw	r4,-4(fp)
    2c84:	e0bfff17 	ldw	r2,-4(fp)
    2c88:	1009883a 	mov	r4,r2
    2c8c:	0002c3c0 	call	2c3c <_ZN11AddressPoolC1Ev>
    2c90:	008000b4 	movhi	r2,2
    2c94:	1092f904 	addi	r2,r2,19428
    2c98:	e0ffff17 	ldw	r3,-4(fp)
    2c9c:	18800015 	stw	r2,0(r3)
    2ca0:	e0bfff17 	ldw	r2,-4(fp)
    2ca4:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    2ca8:	000b883a 	mov	r5,zero
    2cac:	e13fff17 	ldw	r4,-4(fp)
    2cb0:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    2cb4:	e0bfff17 	ldw	r2,-4(fp)
    2cb8:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    2cbc:	e0bfff17 	ldw	r2,-4(fp)
    2cc0:	10c00104 	addi	r3,r2,4
    2cc4:	e0bfff17 	ldw	r2,-4(fp)
    2cc8:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    2ccc:	e0bfff17 	ldw	r2,-4(fp)
    2cd0:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    2cd4:	e0bfff17 	ldw	r2,-4(fp)
    2cd8:	00c00204 	movi	r3,8
    2cdc:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    2ce0:	e0bfff17 	ldw	r2,-4(fp)
    2ce4:	11000183 	ldbu	r4,6(r2)
    2ce8:	00ffff84 	movi	r3,-2
    2cec:	20c6703a 	and	r3,r4,r3
    2cf0:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    2cf4:	e0bfff17 	ldw	r2,-4(fp)
    2cf8:	11000183 	ldbu	r4,6(r2)
    2cfc:	00ffff44 	movi	r3,-3
    2d00:	20c6703a 	and	r3,r4,r3
    2d04:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2d08:	e0bfff17 	ldw	r2,-4(fp)
    2d0c:	10c00183 	ldbu	r3,6(r2)
    2d10:	18c000cc 	andi	r3,r3,3
    2d14:	18c00f14 	ori	r3,r3,60
    2d18:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2d1c:	e13fff17 	ldw	r4,-4(fp)
    2d20:	00032040 	call	3204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2d24:	0001883a 	nop
    2d28:	e037883a 	mov	sp,fp
    2d2c:	dfc00117 	ldw	ra,4(sp)
    2d30:	df000017 	ldw	fp,0(sp)
    2d34:	dec00204 	addi	sp,sp,8
    2d38:	f800283a 	ret

00002d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2d3c:	defffa04 	addi	sp,sp,-24
    2d40:	dfc00515 	stw	ra,20(sp)
    2d44:	df000415 	stw	fp,16(sp)
    2d48:	dc000315 	stw	r16,12(sp)
    2d4c:	df000404 	addi	fp,sp,16
    2d50:	e13ffd15 	stw	r4,-12(fp)
    2d54:	2805883a 	mov	r2,r5
    2d58:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2d5c:	e0bffe03 	ldbu	r2,-8(fp)
    2d60:	1000031e 	bne	r2,zero,2d70 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2d64:	e0bffd17 	ldw	r2,-12(fp)
    2d68:	10800204 	addi	r2,r2,8
    2d6c:	00001006 	br	2db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    2d70:	e0bffe03 	ldbu	r2,-8(fp)
    2d74:	100b883a 	mov	r5,r2
    2d78:	e13ffd17 	ldw	r4,-12(fp)
    2d7c:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2d80:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2d84:	e0bffc03 	ldbu	r2,-16(fp)
    2d88:	10000826 	beq	r2,zero,2dac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2d8c:	e0bffd17 	ldw	r2,-12(fp)
    2d90:	14000204 	addi	r16,r2,8
    2d94:	e0bffc03 	ldbu	r2,-16(fp)
    2d98:	014001c4 	movi	r5,7
    2d9c:	1009883a 	mov	r4,r2
    2da0:	000d8e00 	call	d8e0 <__mulsi3>
    2da4:	8085883a 	add	r2,r16,r2
    2da8:	00000106 	br	2db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    2dac:	0005883a 	mov	r2,zero
        };
    2db0:	e6ffff04 	addi	sp,fp,-4
    2db4:	dfc00217 	ldw	ra,8(sp)
    2db8:	df000117 	ldw	fp,4(sp)
    2dbc:	dc000017 	ldw	r16,0(sp)
    2dc0:	dec00304 	addi	sp,sp,12
    2dc4:	f800283a 	ret

00002dc8 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    2dc8:	defffd04 	addi	sp,sp,-12
    2dcc:	df000215 	stw	fp,8(sp)
    2dd0:	df000204 	addi	fp,sp,8
    2dd4:	2005883a 	mov	r2,r4
    2dd8:	e17fff15 	stw	r5,-4(fp)
    2ddc:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    2de0:	0001883a 	nop
    2de4:	e037883a 	mov	sp,fp
    2de8:	df000017 	ldw	fp,0(sp)
    2dec:	dec00104 	addi	sp,sp,4
    2df0:	f800283a 	ret

00002df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    2df4:	defff804 	addi	sp,sp,-32
    2df8:	dfc00715 	stw	ra,28(sp)
    2dfc:	df000615 	stw	fp,24(sp)
    2e00:	dc000515 	stw	r16,20(sp)
    2e04:	df000604 	addi	fp,sp,24
    2e08:	e13ffb15 	stw	r4,-20(fp)
    2e0c:	2809883a 	mov	r4,r5
    2e10:	3007883a 	mov	r3,r6
    2e14:	3805883a 	mov	r2,r7
    2e18:	e13ffc05 	stb	r4,-16(fp)
    2e1c:	e0fffd05 	stb	r3,-12(fp)
    2e20:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2e24:	e0bffc03 	ldbu	r2,-16(fp)
    2e28:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2e2c:	e0fffa43 	ldbu	r3,-23(fp)
    2e30:	00bfe004 	movi	r2,-128
    2e34:	1884703a 	and	r2,r3,r2
    2e38:	10803fcc 	andi	r2,r2,255
    2e3c:	1000031e 	bne	r2,zero,2e4c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2e40:	e0bffe03 	ldbu	r2,-8(fp)
    2e44:	10800230 	cmpltui	r2,r2,8
    2e48:	1000021e 	bne	r2,zero,2e54 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2e4c:	0005883a 	mov	r2,zero
    2e50:	00007a06 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2e54:	e0bffd03 	ldbu	r2,-12(fp)
    2e58:	10000726 	beq	r2,zero,2e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2e5c:	e0bffb17 	ldw	r2,-20(fp)
    2e60:	108001c3 	ldbu	r2,7(r2)
    2e64:	10803fcc 	andi	r2,r2,255
    2e68:	108001d8 	cmpnei	r2,r2,7
    2e6c:	1000021e 	bne	r2,zero,2e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2e70:	0005883a 	mov	r2,zero
    2e74:	00007106 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2e78:	000b883a 	mov	r5,zero
    2e7c:	e13ffb17 	ldw	r4,-20(fp)
    2e80:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2e84:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2e88:	e0bffa03 	ldbu	r2,-24(fp)
    2e8c:	1000021e 	bne	r2,zero,2e98 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2e90:	0005883a 	mov	r2,zero
    2e94:	00006906 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2e98:	e0bffa43 	ldbu	r2,-23(fp)
    2e9c:	10803fcc 	andi	r2,r2,255
    2ea0:	1000241e 	bne	r2,zero,2f34 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2ea4:	e0bffd03 	ldbu	r2,-12(fp)
    2ea8:	10001026 	beq	r2,zero,2eec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2eac:	e0bffa03 	ldbu	r2,-24(fp)
    2eb0:	e43ffb17 	ldw	r16,-20(fp)
    2eb4:	014001c4 	movi	r5,7
    2eb8:	1009883a 	mov	r4,r2
    2ebc:	000d8e00 	call	d8e0 <__mulsi3>
    2ec0:	8085883a 	add	r2,r16,r2
    2ec4:	10800304 	addi	r2,r2,12
    2ec8:	00c01044 	movi	r3,65
    2ecc:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2ed0:	e0bffb17 	ldw	r2,-20(fp)
    2ed4:	108001c3 	ldbu	r2,7(r2)
    2ed8:	10800044 	addi	r2,r2,1
    2edc:	1007883a 	mov	r3,r2
    2ee0:	e0bffb17 	ldw	r2,-20(fp)
    2ee4:	10c001c5 	stb	r3,7(r2)
    2ee8:	00000906 	br	2f10 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2eec:	e0bffa03 	ldbu	r2,-24(fp)
    2ef0:	e43ffb17 	ldw	r16,-20(fp)
    2ef4:	014001c4 	movi	r5,7
    2ef8:	1009883a 	mov	r4,r2
    2efc:	000d8e00 	call	d8e0 <__mulsi3>
    2f00:	8085883a 	add	r2,r16,r2
    2f04:	10800304 	addi	r2,r2,12
    2f08:	00c00044 	movi	r3,1
    2f0c:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2f10:	e0bffa03 	ldbu	r2,-24(fp)
    2f14:	e43ffb17 	ldw	r16,-20(fp)
    2f18:	014001c4 	movi	r5,7
    2f1c:	1009883a 	mov	r4,r2
    2f20:	000d8e00 	call	d8e0 <__mulsi3>
    2f24:	8085883a 	add	r2,r16,r2
    2f28:	10800304 	addi	r2,r2,12
    2f2c:	10800003 	ldbu	r2,0(r2)
    2f30:	00004206 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2f34:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2f38:	e0bffa43 	ldbu	r2,-23(fp)
    2f3c:	108001cc 	andi	r2,r2,7
    2f40:	108001cc 	andi	r2,r2,7
    2f44:	100890fa 	slli	r4,r2,3
    2f48:	e0fffa83 	ldbu	r3,-22(fp)
    2f4c:	00bff1c4 	movi	r2,-57
    2f50:	1884703a 	and	r2,r3,r2
    2f54:	1007883a 	mov	r3,r2
    2f58:	2005883a 	mov	r2,r4
    2f5c:	1884b03a 	or	r2,r3,r2
    2f60:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2f64:	e0bffd03 	ldbu	r2,-12(fp)
    2f68:	10001526 	beq	r2,zero,2fc0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2f6c:	e0bffa83 	ldbu	r2,-22(fp)
    2f70:	10801014 	ori	r2,r2,64
    2f74:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2f78:	e0bffb17 	ldw	r2,-20(fp)
    2f7c:	108001c3 	ldbu	r2,7(r2)
    2f80:	10800044 	addi	r2,r2,1
    2f84:	1007883a 	mov	r3,r2
    2f88:	e0bffb17 	ldw	r2,-20(fp)
    2f8c:	10c001c5 	stb	r3,7(r2)
    2f90:	e0bffb17 	ldw	r2,-20(fp)
    2f94:	108001c3 	ldbu	r2,7(r2)
    2f98:	108001cc 	andi	r2,r2,7
    2f9c:	110001cc 	andi	r4,r2,7
    2fa0:	e0fffa83 	ldbu	r3,-22(fp)
    2fa4:	00bffe04 	movi	r2,-8
    2fa8:	1884703a 	and	r2,r3,r2
    2fac:	1007883a 	mov	r3,r2
    2fb0:	2005883a 	mov	r2,r4
    2fb4:	1884b03a 	or	r2,r3,r2
    2fb8:	e0bffa85 	stb	r2,-22(fp)
    2fbc:	00000e06 	br	2ff8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    2fc0:	e0fffa83 	ldbu	r3,-22(fp)
    2fc4:	00bfefc4 	movi	r2,-65
    2fc8:	1884703a 	and	r2,r3,r2
    2fcc:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    2fd0:	e0bffe03 	ldbu	r2,-8(fp)
    2fd4:	108001cc 	andi	r2,r2,7
    2fd8:	110001cc 	andi	r4,r2,7
    2fdc:	e0fffa83 	ldbu	r3,-22(fp)
    2fe0:	00bffe04 	movi	r2,-8
    2fe4:	1884703a 	and	r2,r3,r2
    2fe8:	1007883a 	mov	r3,r2
    2fec:	2005883a 	mov	r2,r4
    2ff0:	1884b03a 	or	r2,r3,r2
    2ff4:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    2ff8:	e0bffa03 	ldbu	r2,-24(fp)
    2ffc:	e43ffb17 	ldw	r16,-20(fp)
    3000:	014001c4 	movi	r5,7
    3004:	1009883a 	mov	r4,r2
    3008:	000d8e00 	call	d8e0 <__mulsi3>
    300c:	8085883a 	add	r2,r16,r2
    3010:	10800304 	addi	r2,r2,12
    3014:	e0fffa83 	ldbu	r3,-22(fp)
    3018:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    301c:	e0bffa03 	ldbu	r2,-24(fp)
    3020:	e43ffb17 	ldw	r16,-20(fp)
    3024:	014001c4 	movi	r5,7
    3028:	1009883a 	mov	r4,r2
    302c:	000d8e00 	call	d8e0 <__mulsi3>
    3030:	8085883a 	add	r2,r16,r2
    3034:	10800304 	addi	r2,r2,12
    3038:	10800003 	ldbu	r2,0(r2)
        };
    303c:	e6ffff04 	addi	sp,fp,-4
    3040:	dfc00217 	ldw	ra,8(sp)
    3044:	df000117 	ldw	fp,4(sp)
    3048:	dc000017 	ldw	r16,0(sp)
    304c:	dec00304 	addi	sp,sp,12
    3050:	f800283a 	ret

00003054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    3054:	defffb04 	addi	sp,sp,-20
    3058:	dfc00415 	stw	ra,16(sp)
    305c:	df000315 	stw	fp,12(sp)
    3060:	df000304 	addi	fp,sp,12
    3064:	e13ffe15 	stw	r4,-8(fp)
    3068:	2805883a 	mov	r2,r5
    306c:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    3070:	e0bfff03 	ldbu	r2,-4(fp)
    3074:	10801058 	cmpnei	r2,r2,65
    3078:	1000031e 	bne	r2,zero,3088 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    307c:	e13ffe17 	ldw	r4,-8(fp)
    3080:	00032040 	call	3204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    3084:	00000906 	br	30ac <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    3088:	e0bfff03 	ldbu	r2,-4(fp)
    308c:	100b883a 	mov	r5,r2
    3090:	e13ffe17 	ldw	r4,-8(fp)
    3094:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    3098:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    309c:	e0bffd03 	ldbu	r2,-12(fp)
    30a0:	100b883a 	mov	r5,r2
    30a4:	e13ffe17 	ldw	r4,-8(fp)
    30a8:	00033000 	call	3300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    30ac:	e037883a 	mov	sp,fp
    30b0:	dfc00117 	ldw	ra,4(sp)
    30b4:	df000017 	ldw	fp,0(sp)
    30b8:	dec00204 	addi	sp,sp,8
    30bc:	f800283a 	ret

000030c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    30c0:	defffa04 	addi	sp,sp,-24
    30c4:	dfc00515 	stw	ra,20(sp)
    30c8:	df000415 	stw	fp,16(sp)
    30cc:	dc400315 	stw	r17,12(sp)
    30d0:	dc000215 	stw	r16,8(sp)
    30d4:	df000404 	addi	fp,sp,16
    30d8:	e13ffc15 	stw	r4,-16(fp)
    30dc:	2805883a 	mov	r2,r5
    30e0:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    30e4:	e0bffd03 	ldbu	r2,-12(fp)
    30e8:	e43ffc17 	ldw	r16,-16(fp)
    30ec:	014001c4 	movi	r5,7
    30f0:	1009883a 	mov	r4,r2
    30f4:	000d8e00 	call	d8e0 <__mulsi3>
    30f8:	8085883a 	add	r2,r16,r2
    30fc:	10800304 	addi	r2,r2,12
    3100:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    3104:	e0bffd03 	ldbu	r2,-12(fp)
    3108:	e43ffc17 	ldw	r16,-16(fp)
    310c:	014001c4 	movi	r5,7
    3110:	1009883a 	mov	r4,r2
    3114:	000d8e00 	call	d8e0 <__mulsi3>
    3118:	8085883a 	add	r2,r16,r2
    311c:	10800344 	addi	r2,r2,13
    3120:	00c00044 	movi	r3,1
    3124:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    3128:	e0bffd03 	ldbu	r2,-12(fp)
    312c:	e43ffc17 	ldw	r16,-16(fp)
    3130:	014001c4 	movi	r5,7
    3134:	1009883a 	mov	r4,r2
    3138:	000d8e00 	call	d8e0 <__mulsi3>
    313c:	8085883a 	add	r2,r16,r2
    3140:	10800384 	addi	r2,r2,14
    3144:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    3148:	e0fffd03 	ldbu	r3,-12(fp)
    314c:	e0bffc17 	ldw	r2,-16(fp)
    3150:	14000104 	addi	r16,r2,4
    3154:	e47ffc17 	ldw	r17,-16(fp)
    3158:	014001c4 	movi	r5,7
    315c:	1809883a 	mov	r4,r3
    3160:	000d8e00 	call	d8e0 <__mulsi3>
    3164:	8885883a 	add	r2,r17,r2
    3168:	10800204 	addi	r2,r2,8
    316c:	81403fcc 	andi	r5,r16,255
    3170:	10c00003 	ldbu	r3,0(r2)
    3174:	1806703a 	and	r3,r3,zero
    3178:	1809883a 	mov	r4,r3
    317c:	2807883a 	mov	r3,r5
    3180:	20c6b03a 	or	r3,r4,r3
    3184:	10c00005 	stb	r3,0(r2)
    3188:	8006d23a 	srli	r3,r16,8
    318c:	19403fcc 	andi	r5,r3,255
    3190:	10c00043 	ldbu	r3,1(r2)
    3194:	1806703a 	and	r3,r3,zero
    3198:	1809883a 	mov	r4,r3
    319c:	2807883a 	mov	r3,r5
    31a0:	20c6b03a 	or	r3,r4,r3
    31a4:	10c00045 	stb	r3,1(r2)
    31a8:	8006d43a 	srli	r3,r16,16
    31ac:	19403fcc 	andi	r5,r3,255
    31b0:	10c00083 	ldbu	r3,2(r2)
    31b4:	1806703a 	and	r3,r3,zero
    31b8:	1809883a 	mov	r4,r3
    31bc:	2807883a 	mov	r3,r5
    31c0:	20c6b03a 	or	r3,r4,r3
    31c4:	10c00085 	stb	r3,2(r2)
    31c8:	800ad63a 	srli	r5,r16,24
    31cc:	10c000c3 	ldbu	r3,3(r2)
    31d0:	1806703a 	and	r3,r3,zero
    31d4:	1809883a 	mov	r4,r3
    31d8:	2807883a 	mov	r3,r5
    31dc:	20c6b03a 	or	r3,r4,r3
    31e0:	10c000c5 	stb	r3,3(r2)
        };
    31e4:	0001883a 	nop
    31e8:	e6fffe04 	addi	sp,fp,-8
    31ec:	dfc00317 	ldw	ra,12(sp)
    31f0:	df000217 	ldw	fp,8(sp)
    31f4:	dc400117 	ldw	r17,4(sp)
    31f8:	dc000017 	ldw	r16,0(sp)
    31fc:	dec00404 	addi	sp,sp,16
    3200:	f800283a 	ret

00003204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    3204:	defffc04 	addi	sp,sp,-16
    3208:	dfc00315 	stw	ra,12(sp)
    320c:	df000215 	stw	fp,8(sp)
    3210:	df000204 	addi	fp,sp,8
    3214:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    3218:	00800044 	movi	r2,1
    321c:	e0bffe05 	stb	r2,-8(fp)
    3220:	e0bffe03 	ldbu	r2,-8(fp)
    3224:	10800428 	cmpgeui	r2,r2,16
    3228:	1000081e 	bne	r2,zero,324c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    322c:	e0bffe03 	ldbu	r2,-8(fp)
    3230:	100b883a 	mov	r5,r2
    3234:	e13fff17 	ldw	r4,-4(fp)
    3238:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    323c:	e0bffe03 	ldbu	r2,-8(fp)
    3240:	10800044 	addi	r2,r2,1
    3244:	e0bffe05 	stb	r2,-8(fp)
    3248:	003ff506 	br	3220 <__alt_data_end+0xfc003220>
                        InitEntry(i);

                hubCounter = 0;
    324c:	e0bfff17 	ldw	r2,-4(fp)
    3250:	100001c5 	stb	zero,7(r2)
        };
    3254:	0001883a 	nop
    3258:	e037883a 	mov	sp,fp
    325c:	dfc00117 	ldw	ra,4(sp)
    3260:	df000017 	ldw	fp,0(sp)
    3264:	dec00204 	addi	sp,sp,8
    3268:	f800283a 	ret

0000326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    326c:	defffa04 	addi	sp,sp,-24
    3270:	dfc00515 	stw	ra,20(sp)
    3274:	df000415 	stw	fp,16(sp)
    3278:	dc000315 	stw	r16,12(sp)
    327c:	df000404 	addi	fp,sp,16
    3280:	e13ffd15 	stw	r4,-12(fp)
    3284:	2805883a 	mov	r2,r5
    3288:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    328c:	00800044 	movi	r2,1
    3290:	e0bffc05 	stb	r2,-16(fp)
    3294:	e0bffc03 	ldbu	r2,-16(fp)
    3298:	10800428 	cmpgeui	r2,r2,16
    329c:	1000111e 	bne	r2,zero,32e4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    32a0:	e0bffc03 	ldbu	r2,-16(fp)
    32a4:	e43ffd17 	ldw	r16,-12(fp)
    32a8:	014001c4 	movi	r5,7
    32ac:	1009883a 	mov	r4,r2
    32b0:	000d8e00 	call	d8e0 <__mulsi3>
    32b4:	8085883a 	add	r2,r16,r2
    32b8:	10800304 	addi	r2,r2,12
    32bc:	10800003 	ldbu	r2,0(r2)
    32c0:	10c03fcc 	andi	r3,r2,255
    32c4:	e0bffe03 	ldbu	r2,-8(fp)
    32c8:	1880021e 	bne	r3,r2,32d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    32cc:	e0bffc03 	ldbu	r2,-16(fp)
    32d0:	00000506 	br	32e8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    32d4:	e0bffc03 	ldbu	r2,-16(fp)
    32d8:	10800044 	addi	r2,r2,1
    32dc:	e0bffc05 	stb	r2,-16(fp)
    32e0:	003fec06 	br	3294 <__alt_data_end+0xfc003294>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    32e4:	0005883a 	mov	r2,zero
        };
    32e8:	e6ffff04 	addi	sp,fp,-4
    32ec:	dfc00217 	ldw	ra,8(sp)
    32f0:	df000117 	ldw	fp,4(sp)
    32f4:	dc000017 	ldw	r16,0(sp)
    32f8:	dec00304 	addi	sp,sp,12
    32fc:	f800283a 	ret

00003300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    3300:	defffa04 	addi	sp,sp,-24
    3304:	dfc00515 	stw	ra,20(sp)
    3308:	df000415 	stw	fp,16(sp)
    330c:	dc000315 	stw	r16,12(sp)
    3310:	df000404 	addi	fp,sp,16
    3314:	e13ffd15 	stw	r4,-12(fp)
    3318:	2805883a 	mov	r2,r5
    331c:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    3320:	e0bffe03 	ldbu	r2,-8(fp)
    3324:	10003026 	beq	r2,zero,33e8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    3328:	e0bffe03 	ldbu	r2,-8(fp)
    332c:	e43ffd17 	ldw	r16,-12(fp)
    3330:	014001c4 	movi	r5,7
    3334:	1009883a 	mov	r4,r2
    3338:	000d8e00 	call	d8e0 <__mulsi3>
    333c:	8085883a 	add	r2,r16,r2
    3340:	10800304 	addi	r2,r2,12
    3344:	10800003 	ldbu	r2,0(r2)
    3348:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    334c:	e0bffc43 	ldbu	r2,-15(fp)
    3350:	1080100c 	andi	r2,r2,64
    3354:	10803fcc 	andi	r2,r2,255
    3358:	10001e26 	beq	r2,zero,33d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    335c:	00800044 	movi	r2,1
    3360:	e0bffc05 	stb	r2,-16(fp)
    3364:	e0bffc03 	ldbu	r2,-16(fp)
    3368:	100d883a 	mov	r6,r2
    336c:	e17ffc43 	ldbu	r5,-15(fp)
    3370:	e13ffd17 	ldw	r4,-12(fp)
    3374:	00034040 	call	3404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    3378:	e0bffc05 	stb	r2,-16(fp)
    337c:	e0bffc03 	ldbu	r2,-16(fp)
    3380:	1004c03a 	cmpne	r2,r2,zero
    3384:	10803fcc 	andi	r2,r2,255
    3388:	10000526 	beq	r2,zero,33a0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    338c:	e0bffc03 	ldbu	r2,-16(fp)
    3390:	100b883a 	mov	r5,r2
    3394:	e13ffd17 	ldw	r4,-12(fp)
    3398:	00033000 	call	3300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    339c:	003ff106 	br	3364 <__alt_data_end+0xfc003364>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    33a0:	e0bffd17 	ldw	r2,-12(fp)
    33a4:	10c001c3 	ldbu	r3,7(r2)
    33a8:	e0bffc43 	ldbu	r2,-15(fp)
    33ac:	108001cc 	andi	r2,r2,7
    33b0:	18c03fcc 	andi	r3,r3,255
    33b4:	10803fcc 	andi	r2,r2,255
    33b8:	1880061e 	bne	r3,r2,33d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    33bc:	e0bffd17 	ldw	r2,-12(fp)
    33c0:	108001c3 	ldbu	r2,7(r2)
    33c4:	10bfffc4 	addi	r2,r2,-1
    33c8:	1007883a 	mov	r3,r2
    33cc:	e0bffd17 	ldw	r2,-12(fp)
    33d0:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    33d4:	e0bffe03 	ldbu	r2,-8(fp)
    33d8:	100b883a 	mov	r5,r2
    33dc:	e13ffd17 	ldw	r4,-12(fp)
    33e0:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    33e4:	00000106 	br	33ec <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    33e8:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    33ec:	e6ffff04 	addi	sp,fp,-4
    33f0:	dfc00217 	ldw	ra,8(sp)
    33f4:	df000117 	ldw	fp,4(sp)
    33f8:	dc000017 	ldw	r16,0(sp)
    33fc:	dec00304 	addi	sp,sp,12
    3400:	f800283a 	ret

00003404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    3404:	defff904 	addi	sp,sp,-28
    3408:	dfc00615 	stw	ra,24(sp)
    340c:	df000515 	stw	fp,20(sp)
    3410:	dc000415 	stw	r16,16(sp)
    3414:	df000504 	addi	fp,sp,20
    3418:	e13ffc15 	stw	r4,-16(fp)
    341c:	e17ffd05 	stb	r5,-12(fp)
    3420:	3005883a 	mov	r2,r6
    3424:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3428:	e0bffe03 	ldbu	r2,-8(fp)
    342c:	10000526 	beq	r2,zero,3444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3430:	e0bffe03 	ldbu	r2,-8(fp)
    3434:	10800428 	cmpgeui	r2,r2,16
    3438:	1000021e 	bne	r2,zero,3444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    343c:	e0bffe03 	ldbu	r2,-8(fp)
    3440:	00000106 	br	3448 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3444:	00800044 	movi	r2,1
    3448:	e0bffb05 	stb	r2,-20(fp)
    344c:	e0bffb03 	ldbu	r2,-20(fp)
    3450:	10800428 	cmpgeui	r2,r2,16
    3454:	1000161e 	bne	r2,zero,34b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3458:	e0bffb03 	ldbu	r2,-20(fp)
    345c:	e43ffc17 	ldw	r16,-16(fp)
    3460:	014001c4 	movi	r5,7
    3464:	1009883a 	mov	r4,r2
    3468:	000d8e00 	call	d8e0 <__mulsi3>
    346c:	8085883a 	add	r2,r16,r2
    3470:	10800304 	addi	r2,r2,12
    3474:	10800003 	ldbu	r2,0(r2)
    3478:	1004d0fa 	srli	r2,r2,3
    347c:	108001cc 	andi	r2,r2,7
    3480:	1007883a 	mov	r3,r2
    3484:	e0bffd03 	ldbu	r2,-12(fp)
    3488:	108001cc 	andi	r2,r2,7
    348c:	18c03fcc 	andi	r3,r3,255
    3490:	10803fcc 	andi	r2,r2,255
    3494:	1880021e 	bne	r3,r2,34a0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3498:	e0bffb03 	ldbu	r2,-20(fp)
    349c:	00000506 	br	34b4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    34a0:	e0bffb03 	ldbu	r2,-20(fp)
    34a4:	10800044 	addi	r2,r2,1
    34a8:	e0bffb05 	stb	r2,-20(fp)
    34ac:	003fe706 	br	344c <__alt_data_end+0xfc00344c>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    34b0:	0005883a 	mov	r2,zero
        };
    34b4:	e6ffff04 	addi	sp,fp,-4
    34b8:	dfc00217 	ldw	ra,8(sp)
    34bc:	df000117 	ldw	fp,4(sp)
    34c0:	dc000017 	ldw	r16,0(sp)
    34c4:	dec00304 	addi	sp,sp,12
    34c8:	f800283a 	ret

000034cc <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    34cc:	defffb04 	addi	sp,sp,-20
    34d0:	dfc00415 	stw	ra,16(sp)
    34d4:	df000315 	stw	fp,12(sp)
    34d8:	df000304 	addi	fp,sp,12
    34dc:	e13ffe15 	stw	r4,-8(fp)
    34e0:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    34e4:	e0bffe17 	ldw	r2,-8(fp)
    34e8:	1009883a 	mov	r4,r2
    34ec:	0004e880 	call	4e88 <_ZN15USBDeviceConfigC1Ev>
    34f0:	e0bffe17 	ldw	r2,-8(fp)
    34f4:	10800104 	addi	r2,r2,4
    34f8:	1009883a 	mov	r4,r2
    34fc:	0004ebc0 	call	4ebc <_ZN17UsbConfigXtracterC1Ev>
    3500:	008000b4 	movhi	r2,2
    3504:	10931a04 	addi	r2,r2,19560
    3508:	e0fffe17 	ldw	r3,-8(fp)
    350c:	18800015 	stw	r2,0(r3)
    3510:	008000b4 	movhi	r2,2
    3514:	10932704 	addi	r2,r2,19612
    3518:	e0fffe17 	ldw	r3,-8(fp)
    351c:	18800115 	stw	r2,4(r3)
    3520:	e0bffe17 	ldw	r2,-8(fp)
    3524:	e0ffff17 	ldw	r3,-4(fp)
    3528:	10c00315 	stw	r3,12(r2)
    352c:	e0bffe17 	ldw	r2,-8(fp)
    3530:	10000405 	stb	zero,16(r2)
    3534:	e0bffe17 	ldw	r2,-8(fp)
    3538:	00c00044 	movi	r3,1
    353c:	10c006c5 	stb	r3,27(r2)
    3540:	e0bffe17 	ldw	r2,-8(fp)
    3544:	10000715 	stw	zero,28(r2)
    3548:	e0bffe17 	ldw	r2,-8(fp)
    354c:	10000905 	stb	zero,36(r2)
    3550:	e0bffe17 	ldw	r2,-8(fp)
    3554:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3558:	e03ffd05 	stb	zero,-12(fp)
    355c:	e0bffd03 	ldbu	r2,-12(fp)
    3560:	108000e8 	cmpgeui	r2,r2,3
    3564:	1000431e 	bne	r2,zero,3674 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3568:	e0fffd03 	ldbu	r3,-12(fp)
    356c:	e13ffe17 	ldw	r4,-8(fp)
    3570:	1805883a 	mov	r2,r3
    3574:	1085883a 	add	r2,r2,r2
    3578:	10c5883a 	add	r2,r2,r3
    357c:	2085883a 	add	r2,r4,r2
    3580:	10800444 	addi	r2,r2,17
    3584:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3588:	e13ffd03 	ldbu	r4,-12(fp)
    358c:	e0bffd03 	ldbu	r2,-12(fp)
    3590:	10000226 	beq	r2,zero,359c <_ZN7XBOXONEC1EP3USB+0xd0>
    3594:	0007883a 	mov	r3,zero
    3598:	00000106 	br	35a0 <_ZN7XBOXONEC1EP3USB+0xd4>
    359c:	00c00204 	movi	r3,8
    35a0:	e17ffe17 	ldw	r5,-8(fp)
    35a4:	2005883a 	mov	r2,r4
    35a8:	1085883a 	add	r2,r2,r2
    35ac:	1105883a 	add	r2,r2,r4
    35b0:	2885883a 	add	r2,r5,r2
    35b4:	10800484 	addi	r2,r2,18
    35b8:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    35bc:	e0fffd03 	ldbu	r3,-12(fp)
    35c0:	e13ffe17 	ldw	r4,-8(fp)
    35c4:	1805883a 	mov	r2,r3
    35c8:	1085883a 	add	r2,r2,r2
    35cc:	10c5883a 	add	r2,r2,r3
    35d0:	2085883a 	add	r2,r4,r2
    35d4:	10800404 	addi	r2,r2,16
    35d8:	110000c3 	ldbu	r4,3(r2)
    35dc:	00ffff84 	movi	r3,-2
    35e0:	20c6703a 	and	r3,r4,r3
    35e4:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    35e8:	e0fffd03 	ldbu	r3,-12(fp)
    35ec:	e13ffe17 	ldw	r4,-8(fp)
    35f0:	1805883a 	mov	r2,r3
    35f4:	1085883a 	add	r2,r2,r2
    35f8:	10c5883a 	add	r2,r2,r3
    35fc:	2085883a 	add	r2,r4,r2
    3600:	10800404 	addi	r2,r2,16
    3604:	110000c3 	ldbu	r4,3(r2)
    3608:	00ffff44 	movi	r3,-3
    360c:	20c6703a 	and	r3,r4,r3
    3610:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    3614:	e13ffd03 	ldbu	r4,-12(fp)
    3618:	e0bffd03 	ldbu	r2,-12(fp)
    361c:	10000226 	beq	r2,zero,3628 <_ZN7XBOXONEC1EP3USB+0x15c>
    3620:	00c00044 	movi	r3,1
    3624:	00000106 	br	362c <_ZN7XBOXONEC1EP3USB+0x160>
    3628:	00c003c4 	movi	r3,15
    362c:	e17ffe17 	ldw	r5,-8(fp)
    3630:	2005883a 	mov	r2,r4
    3634:	1085883a 	add	r2,r2,r2
    3638:	1105883a 	add	r2,r2,r4
    363c:	2885883a 	add	r2,r5,r2
    3640:	10800404 	addi	r2,r2,16
    3644:	18c7883a 	add	r3,r3,r3
    3648:	18cb883a 	add	r5,r3,r3
    364c:	10c000c3 	ldbu	r3,3(r2)
    3650:	18c000cc 	andi	r3,r3,3
    3654:	1809883a 	mov	r4,r3
    3658:	2807883a 	mov	r3,r5
    365c:	20c6b03a 	or	r3,r4,r3
    3660:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3664:	e0bffd03 	ldbu	r2,-12(fp)
    3668:	10800044 	addi	r2,r2,1
    366c:	e0bffd05 	stb	r2,-12(fp)
    3670:	003fba06 	br	355c <__alt_data_end+0xfc00355c>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    3674:	e0bffe17 	ldw	r2,-8(fp)
    3678:	10800317 	ldw	r2,12(r2)
    367c:	10000626 	beq	r2,zero,3698 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    3680:	e0bffe17 	ldw	r2,-8(fp)
    3684:	10800317 	ldw	r2,12(r2)
    3688:	e0fffe17 	ldw	r3,-8(fp)
    368c:	180b883a 	mov	r5,r3
    3690:	1009883a 	mov	r4,r2
    3694:	0004c3c0 	call	4c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3698:	0001883a 	nop
    369c:	e037883a 	mov	sp,fp
    36a0:	dfc00117 	ldw	ra,4(sp)
    36a4:	df000017 	ldw	fp,0(sp)
    36a8:	dec00204 	addi	sp,sp,8
    36ac:	f800283a 	ret

000036b0 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    36b0:	deffde04 	addi	sp,sp,-136
    36b4:	dfc02115 	stw	ra,132(sp)
    36b8:	df002015 	stw	fp,128(sp)
    36bc:	df002004 	addi	fp,sp,128
    36c0:	e13ffc15 	stw	r4,-16(fp)
    36c4:	2809883a 	mov	r4,r5
    36c8:	3007883a 	mov	r3,r6
    36cc:	3805883a 	mov	r2,r7
    36d0:	e13ffd05 	stb	r4,-12(fp)
    36d4:	e0fffe05 	stb	r3,-8(fp)
    36d8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    36dc:	e0bfe744 	addi	r2,fp,-99
    36e0:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    36e4:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    36e8:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    36ec:	e0bffc17 	ldw	r2,-16(fp)
    36f0:	10800317 	ldw	r2,12(r2)
    36f4:	1009883a 	mov	r4,r2
    36f8:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    36fc:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	10800403 	ldbu	r2,16(r2)
    3708:	10803fcc 	andi	r2,r2,255
    370c:	10000226 	beq	r2,zero,3718 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    3710:	00bff644 	movi	r2,-39
    3714:	00017606 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    3718:	e0bfe517 	ldw	r2,-108(fp)
    371c:	10800017 	ldw	r2,0(r2)
    3720:	10800017 	ldw	r2,0(r2)
    3724:	000b883a 	mov	r5,zero
    3728:	e13fe517 	ldw	r4,-108(fp)
    372c:	103ee83a 	callr	r2
    3730:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3734:	e0bfe317 	ldw	r2,-116(fp)
    3738:	1000021e 	bne	r2,zero,3744 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    373c:	00bff584 	movi	r2,-42
    3740:	00016b06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3744:	e0bfe317 	ldw	r2,-116(fp)
    3748:	10c00003 	ldbu	r3,0(r2)
    374c:	11000043 	ldbu	r4,1(r2)
    3750:	2008923a 	slli	r4,r4,8
    3754:	20c6b03a 	or	r3,r4,r3
    3758:	11000083 	ldbu	r4,2(r2)
    375c:	2008943a 	slli	r4,r4,16
    3760:	20c6b03a 	or	r3,r4,r3
    3764:	108000c3 	ldbu	r2,3(r2)
    3768:	1004963a 	slli	r2,r2,24
    376c:	10c4b03a 	or	r2,r2,r3
    3770:	1000021e 	bne	r2,zero,377c <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    3774:	00bff5c4 	movi	r2,-41
    3778:	00015d06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    377c:	e0bfe317 	ldw	r2,-116(fp)
    3780:	10c00003 	ldbu	r3,0(r2)
    3784:	11000043 	ldbu	r4,1(r2)
    3788:	2008923a 	slli	r4,r4,8
    378c:	20c6b03a 	or	r3,r4,r3
    3790:	11000083 	ldbu	r4,2(r2)
    3794:	2008943a 	slli	r4,r4,16
    3798:	20c6b03a 	or	r3,r4,r3
    379c:	108000c3 	ldbu	r2,3(r2)
    37a0:	1004963a 	slli	r2,r2,24
    37a4:	10c4b03a 	or	r2,r2,r3
    37a8:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    37ac:	e0bffc17 	ldw	r2,-16(fp)
    37b0:	10c00444 	addi	r3,r2,17
    37b4:	e0bfe317 	ldw	r2,-116(fp)
    37b8:	19803fcc 	andi	r6,r3,255
    37bc:	11000003 	ldbu	r4,0(r2)
    37c0:	2008703a 	and	r4,r4,zero
    37c4:	200b883a 	mov	r5,r4
    37c8:	3009883a 	mov	r4,r6
    37cc:	2908b03a 	or	r4,r5,r4
    37d0:	11000005 	stb	r4,0(r2)
    37d4:	1808d23a 	srli	r4,r3,8
    37d8:	21803fcc 	andi	r6,r4,255
    37dc:	11000043 	ldbu	r4,1(r2)
    37e0:	2008703a 	and	r4,r4,zero
    37e4:	200b883a 	mov	r5,r4
    37e8:	3009883a 	mov	r4,r6
    37ec:	2908b03a 	or	r4,r5,r4
    37f0:	11000045 	stb	r4,1(r2)
    37f4:	1808d43a 	srli	r4,r3,16
    37f8:	21803fcc 	andi	r6,r4,255
    37fc:	11000083 	ldbu	r4,2(r2)
    3800:	2008703a 	and	r4,r4,zero
    3804:	200b883a 	mov	r5,r4
    3808:	3009883a 	mov	r4,r6
    380c:	2908b03a 	or	r4,r5,r4
    3810:	11000085 	stb	r4,2(r2)
    3814:	180ad63a 	srli	r5,r3,24
    3818:	10c000c3 	ldbu	r3,3(r2)
    381c:	1806703a 	and	r3,r3,zero
    3820:	1809883a 	mov	r4,r3
    3824:	2807883a 	mov	r3,r5
    3828:	20c6b03a 	or	r3,r4,r3
    382c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    3830:	e0bfe317 	ldw	r2,-116(fp)
    3834:	e0ffff03 	ldbu	r3,-4(fp)
    3838:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    383c:	e0bffc17 	ldw	r2,-16(fp)
    3840:	10c00317 	ldw	r3,12(r2)
    3844:	00800484 	movi	r2,18
    3848:	113fffcc 	andi	r4,r2,65535
    384c:	e0bfe744 	addi	r2,fp,-99
    3850:	d8800015 	stw	r2,0(sp)
    3854:	200f883a 	mov	r7,r4
    3858:	000d883a 	mov	r6,zero
    385c:	000b883a 	mov	r5,zero
    3860:	1809883a 	mov	r4,r3
    3864:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    3868:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    386c:	e0bfe317 	ldw	r2,-116(fp)
    3870:	e0ffe417 	ldw	r3,-112(fp)
    3874:	19403fcc 	andi	r5,r3,255
    3878:	10c00003 	ldbu	r3,0(r2)
    387c:	1806703a 	and	r3,r3,zero
    3880:	1809883a 	mov	r4,r3
    3884:	2807883a 	mov	r3,r5
    3888:	20c6b03a 	or	r3,r4,r3
    388c:	10c00005 	stb	r3,0(r2)
    3890:	e0ffe417 	ldw	r3,-112(fp)
    3894:	1806d23a 	srli	r3,r3,8
    3898:	19403fcc 	andi	r5,r3,255
    389c:	10c00043 	ldbu	r3,1(r2)
    38a0:	1806703a 	and	r3,r3,zero
    38a4:	1809883a 	mov	r4,r3
    38a8:	2807883a 	mov	r3,r5
    38ac:	20c6b03a 	or	r3,r4,r3
    38b0:	10c00045 	stb	r3,1(r2)
    38b4:	e0ffe417 	ldw	r3,-112(fp)
    38b8:	1806d43a 	srli	r3,r3,16
    38bc:	19403fcc 	andi	r5,r3,255
    38c0:	10c00083 	ldbu	r3,2(r2)
    38c4:	1806703a 	and	r3,r3,zero
    38c8:	1809883a 	mov	r4,r3
    38cc:	2807883a 	mov	r3,r5
    38d0:	20c6b03a 	or	r3,r4,r3
    38d4:	10c00085 	stb	r3,2(r2)
    38d8:	e0ffe417 	ldw	r3,-112(fp)
    38dc:	180ad63a 	srli	r5,r3,24
    38e0:	10c000c3 	ldbu	r3,3(r2)
    38e4:	1806703a 	and	r3,r3,zero
    38e8:	1809883a 	mov	r4,r3
    38ec:	2807883a 	mov	r3,r5
    38f0:	20c6b03a 	or	r3,r4,r3
    38f4:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    38f8:	e0bfe103 	ldbu	r2,-124(fp)
    38fc:	1000e61e 	bne	r2,zero,3c98 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    3900:	e0bfe217 	ldw	r2,-120(fp)
    3904:	10c00203 	ldbu	r3,8(r2)
    3908:	10800243 	ldbu	r2,9(r2)
    390c:	1004923a 	slli	r2,r2,8
    3910:	10c4b03a 	or	r2,r2,r3
    3914:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    3918:	e0bfe217 	ldw	r2,-120(fp)
    391c:	10c00283 	ldbu	r3,10(r2)
    3920:	108002c3 	ldbu	r2,11(r2)
    3924:	1004923a 	slli	r2,r2,8
    3928:	10c4b03a 	or	r2,r2,r3
    392c:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    3930:	e0bffc17 	ldw	r2,-16(fp)
    3934:	10800017 	ldw	r2,0(r2)
    3938:	10800604 	addi	r2,r2,24
    393c:	10800017 	ldw	r2,0(r2)
    3940:	e0ffe60b 	ldhu	r3,-104(fp)
    3944:	e13fe68b 	ldhu	r4,-102(fp)
    3948:	200d883a 	mov	r6,r4
    394c:	180b883a 	mov	r5,r3
    3950:	e13ffc17 	ldw	r4,-16(fp)
    3954:	103ee83a 	callr	r2
    3958:	1080005c 	xori	r2,r2,1
    395c:	10803fcc 	andi	r2,r2,255
    3960:	1000d51e 	bne	r2,zero,3cb8 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    3964:	e0bfe517 	ldw	r2,-108(fp)
    3968:	10800017 	ldw	r2,0(r2)
    396c:	10800104 	addi	r2,r2,4
    3970:	10800017 	ldw	r2,0(r2)
    3974:	e0fffd03 	ldbu	r3,-12(fp)
    3978:	e13ffe03 	ldbu	r4,-8(fp)
    397c:	200f883a 	mov	r7,r4
    3980:	000d883a 	mov	r6,zero
    3984:	180b883a 	mov	r5,r3
    3988:	e13fe517 	ldw	r4,-108(fp)
    398c:	103ee83a 	callr	r2
    3990:	1007883a 	mov	r3,r2
    3994:	e0bffc17 	ldw	r2,-16(fp)
    3998:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    399c:	e0bffc17 	ldw	r2,-16(fp)
    39a0:	10800403 	ldbu	r2,16(r2)
    39a4:	10803fcc 	andi	r2,r2,255
    39a8:	1000021e 	bne	r2,zero,39b4 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    39ac:	00bff504 	movi	r2,-44
    39b0:	0000cf06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    39b4:	e0bfe217 	ldw	r2,-120(fp)
    39b8:	10c001c3 	ldbu	r3,7(r2)
    39bc:	e0bffc17 	ldw	r2,-16(fp)
    39c0:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    39c4:	e0bffc17 	ldw	r2,-16(fp)
    39c8:	10c00317 	ldw	r3,12(r2)
    39cc:	e0bffc17 	ldw	r2,-16(fp)
    39d0:	10800403 	ldbu	r2,16(r2)
    39d4:	10803fcc 	andi	r2,r2,255
    39d8:	100f883a 	mov	r7,r2
    39dc:	000d883a 	mov	r6,zero
    39e0:	000b883a 	mov	r5,zero
    39e4:	1809883a 	mov	r4,r3
    39e8:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    39ec:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    39f0:	e0bfe103 	ldbu	r2,-124(fp)
    39f4:	10001026 	beq	r2,zero,3a38 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    39f8:	e0bfe317 	ldw	r2,-116(fp)
    39fc:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    3a00:	e0bfe517 	ldw	r2,-108(fp)
    3a04:	10800017 	ldw	r2,0(r2)
    3a08:	10800204 	addi	r2,r2,8
    3a0c:	10800017 	ldw	r2,0(r2)
    3a10:	e0fffc17 	ldw	r3,-16(fp)
    3a14:	18c00403 	ldbu	r3,16(r3)
    3a18:	18c03fcc 	andi	r3,r3,255
    3a1c:	180b883a 	mov	r5,r3
    3a20:	e13fe517 	ldw	r4,-108(fp)
    3a24:	103ee83a 	callr	r2
                bAddress = 0;
    3a28:	e0bffc17 	ldw	r2,-16(fp)
    3a2c:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    3a30:	e0bfe103 	ldbu	r2,-124(fp)
    3a34:	0000ae06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3a38:	e0bfe317 	ldw	r2,-116(fp)
    3a3c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    3a40:	e0bfe517 	ldw	r2,-108(fp)
    3a44:	10800017 	ldw	r2,0(r2)
    3a48:	10800017 	ldw	r2,0(r2)
    3a4c:	e0fffc17 	ldw	r3,-16(fp)
    3a50:	18c00403 	ldbu	r3,16(r3)
    3a54:	18c03fcc 	andi	r3,r3,255
    3a58:	180b883a 	mov	r5,r3
    3a5c:	e13fe517 	ldw	r4,-108(fp)
    3a60:	103ee83a 	callr	r2
    3a64:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3a68:	e0bfe317 	ldw	r2,-116(fp)
    3a6c:	1000021e 	bne	r2,zero,3a78 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3a70:	00bff584 	movi	r2,-42
    3a74:	00009e06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3a78:	e0bfe317 	ldw	r2,-116(fp)
    3a7c:	e0ffff03 	ldbu	r3,-4(fp)
    3a80:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3a84:	e0bffc17 	ldw	r2,-16(fp)
    3a88:	10c00317 	ldw	r3,12(r2)
    3a8c:	e0bffc17 	ldw	r2,-16(fp)
    3a90:	10800403 	ldbu	r2,16(r2)
    3a94:	11003fcc 	andi	r4,r2,255
    3a98:	e0bffc17 	ldw	r2,-16(fp)
    3a9c:	10800444 	addi	r2,r2,17
    3aa0:	100f883a 	mov	r7,r2
    3aa4:	01800044 	movi	r6,1
    3aa8:	200b883a 	mov	r5,r4
    3aac:	1809883a 	mov	r4,r3
    3ab0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3ab4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3ab8:	e0bfe103 	ldbu	r2,-124(fp)
    3abc:	1000781e 	bne	r2,zero,3ca0 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    3ac0:	e0bfe217 	ldw	r2,-120(fp)
    3ac4:	10800443 	ldbu	r2,17(r2)
    3ac8:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    3acc:	e0bfe703 	ldbu	r2,-100(fp)
    3ad0:	01402004 	movi	r5,128
    3ad4:	1009883a 	mov	r4,r2
    3ad8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3adc:	e03fe145 	stb	zero,-123(fp)
    3ae0:	e0ffe143 	ldbu	r3,-123(fp)
    3ae4:	e0bfe703 	ldbu	r2,-100(fp)
    3ae8:	1880222e 	bgeu	r3,r2,3b74 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    3aec:	e0bffc17 	ldw	r2,-16(fp)
    3af0:	10c00104 	addi	r3,r2,4
    3af4:	e0bfed04 	addi	r2,fp,-76
    3af8:	180b883a 	mov	r5,r3
    3afc:	1009883a 	mov	r4,r2
    3b00:	0004f240 	call	4f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3b04:	e0bffc17 	ldw	r2,-16(fp)
    3b08:	10c00317 	ldw	r3,12(r2)
    3b0c:	e0bffc17 	ldw	r2,-16(fp)
    3b10:	10800403 	ldbu	r2,16(r2)
    3b14:	11003fcc 	andi	r4,r2,255
    3b18:	e17fe143 	ldbu	r5,-123(fp)
    3b1c:	e0bfed04 	addi	r2,fp,-76
    3b20:	d8800015 	stw	r2,0(sp)
    3b24:	280f883a 	mov	r7,r5
    3b28:	000d883a 	mov	r6,zero
    3b2c:	200b883a 	mov	r5,r4
    3b30:	1809883a 	mov	r4,r3
    3b34:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3b38:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3b3c:	e0bfe103 	ldbu	r2,-124(fp)
    3b40:	10000226 	beq	r2,zero,3b4c <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3b44:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3b48:	00006206 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3b4c:	e0bffc17 	ldw	r2,-16(fp)
    3b50:	108006c3 	ldbu	r2,27(r2)
    3b54:	10803fcc 	andi	r2,r2,255
    3b58:	108000f0 	cmpltui	r2,r2,3
    3b5c:	10000426 	beq	r2,zero,3b70 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3b60:	e0bfe143 	ldbu	r2,-123(fp)
    3b64:	10800044 	addi	r2,r2,1
    3b68:	e0bfe145 	stb	r2,-123(fp)
    3b6c:	003fdc06 	br	3ae0 <__alt_data_end+0xfc003ae0>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    3b70:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3b74:	e0bffc17 	ldw	r2,-16(fp)
    3b78:	108006c3 	ldbu	r2,27(r2)
    3b7c:	10803fcc 	andi	r2,r2,255
    3b80:	108000e8 	cmpgeui	r2,r2,3
    3b84:	10004e26 	beq	r2,zero,3cc0 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3b88:	e0bffc17 	ldw	r2,-16(fp)
    3b8c:	10c00317 	ldw	r3,12(r2)
    3b90:	e0bffc17 	ldw	r2,-16(fp)
    3b94:	10800403 	ldbu	r2,16(r2)
    3b98:	11003fcc 	andi	r4,r2,255
    3b9c:	e0bffc17 	ldw	r2,-16(fp)
    3ba0:	108006c3 	ldbu	r2,27(r2)
    3ba4:	11403fcc 	andi	r5,r2,255
    3ba8:	e0bffc17 	ldw	r2,-16(fp)
    3bac:	10800444 	addi	r2,r2,17
    3bb0:	100f883a 	mov	r7,r2
    3bb4:	280d883a 	mov	r6,r5
    3bb8:	200b883a 	mov	r5,r4
    3bbc:	1809883a 	mov	r4,r3
    3bc0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3bc4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3bc8:	e0bfe103 	ldbu	r2,-124(fp)
    3bcc:	1000361e 	bne	r2,zero,3ca8 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    3bd0:	01003204 	movi	r4,200
    3bd4:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    3bd8:	e0bffc17 	ldw	r2,-16(fp)
    3bdc:	10c00317 	ldw	r3,12(r2)
    3be0:	e0bffc17 	ldw	r2,-16(fp)
    3be4:	10800403 	ldbu	r2,16(r2)
    3be8:	11003fcc 	andi	r4,r2,255
    3bec:	e0bffc17 	ldw	r2,-16(fp)
    3bf0:	10800443 	ldbu	r2,17(r2)
    3bf4:	11403fcc 	andi	r5,r2,255
    3bf8:	e0bffc17 	ldw	r2,-16(fp)
    3bfc:	10800683 	ldbu	r2,26(r2)
    3c00:	10803fcc 	andi	r2,r2,255
    3c04:	100f883a 	mov	r7,r2
    3c08:	280d883a 	mov	r6,r5
    3c0c:	200b883a 	mov	r5,r4
    3c10:	1809883a 	mov	r4,r3
    3c14:	0002b940 	call	2b94 <_ZN3USB7setConfEhhh>
    3c18:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3c1c:	e0bfe103 	ldbu	r2,-124(fp)
    3c20:	1000231e 	bne	r2,zero,3cb0 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3c24:	01003204 	movi	r4,200
    3c28:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3c2c:	e0bffc17 	ldw	r2,-16(fp)
    3c30:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3c34:	00800144 	movi	r2,5
    3c38:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3c3c:	00800804 	movi	r2,32
    3c40:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3c44:	00800044 	movi	r2,1
    3c48:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3c4c:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    3c50:	e0bfebc4 	addi	r2,fp,-81
    3c54:	01800144 	movi	r6,5
    3c58:	100b883a 	mov	r5,r2
    3c5c:	e13ffc17 	ldw	r4,-16(fp)
    3c60:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
    3c64:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3c68:	e0bfe103 	ldbu	r2,-124(fp)
    3c6c:	1000181e 	bne	r2,zero,3cd0 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    3c70:	e13ffc17 	ldw	r4,-16(fp)
    3c74:	00046180 	call	4618 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	00c00044 	movi	r3,1
    3c80:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3c84:	e0bffc17 	ldw	r2,-16(fp)
    3c88:	00c00044 	movi	r3,1
    3c8c:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    3c90:	0005883a 	mov	r2,zero
    3c94:	00001606 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3c98:	0001883a 	nop
    3c9c:	00000d06 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3ca0:	0001883a 	nop
    3ca4:	00000b06 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3ca8:	0001883a 	nop
    3cac:	00000906 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    3cb0:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3cb4:	00000706 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    3cb8:	0001883a 	nop
    3cbc:	00000106 	br	3cc4 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    3cc0:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    3cc4:	00bff444 	movi	r2,-47
    3cc8:	e0bfe105 	stb	r2,-124(fp)
    3ccc:	00000106 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    3cd0:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    3cd4:	e0bffc17 	ldw	r2,-16(fp)
    3cd8:	10800017 	ldw	r2,0(r2)
    3cdc:	10800204 	addi	r2,r2,8
    3ce0:	10800017 	ldw	r2,0(r2)
    3ce4:	e13ffc17 	ldw	r4,-16(fp)
    3ce8:	103ee83a 	callr	r2
        return rcode;
    3cec:	e0bfe103 	ldbu	r2,-124(fp)
}
    3cf0:	e037883a 	mov	sp,fp
    3cf4:	dfc00117 	ldw	ra,4(sp)
    3cf8:	df000017 	ldw	fp,0(sp)
    3cfc:	dec00204 	addi	sp,sp,8
    3d00:	f800283a 	ret

00003d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3d04:	defff904 	addi	sp,sp,-28
    3d08:	df000615 	stw	fp,24(sp)
    3d0c:	df000604 	addi	fp,sp,24
    3d10:	e13ffb15 	stw	r4,-20(fp)
    3d14:	3009883a 	mov	r4,r6
    3d18:	3807883a 	mov	r3,r7
    3d1c:	e0800117 	ldw	r2,4(fp)
    3d20:	e17ffc05 	stb	r5,-16(fp)
    3d24:	e13ffd05 	stb	r4,-12(fp)
    3d28:	e0fffe05 	stb	r3,-8(fp)
    3d2c:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    3d30:	e0bffb17 	ldw	r2,-20(fp)
    3d34:	e0fffc03 	ldbu	r3,-16(fp)
    3d38:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3d3c:	e0800217 	ldw	r2,8(fp)
    3d40:	108000c3 	ldbu	r2,3(r2)
    3d44:	10803fcc 	andi	r2,r2,255
    3d48:	108000cc 	andi	r2,r2,3
    3d4c:	108000d8 	cmpnei	r2,r2,3
    3d50:	1000361e 	bne	r2,zero,3e2c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3d54:	e0800217 	ldw	r2,8(fp)
    3d58:	10800083 	ldbu	r2,2(r2)
    3d5c:	10803fcc 	andi	r2,r2,255
    3d60:	1080201c 	xori	r2,r2,128
    3d64:	10bfe004 	addi	r2,r2,-128
    3d68:	1000020e 	bge	r2,zero,3d74 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3d6c:	00800084 	movi	r2,2
    3d70:	00000106 	br	3d78 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3d74:	00800044 	movi	r2,1
    3d78:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3d7c:	e0fffa03 	ldbu	r3,-24(fp)
    3d80:	e0800217 	ldw	r2,8(fp)
    3d84:	10800083 	ldbu	r2,2(r2)
    3d88:	108003cc 	andi	r2,r2,15
    3d8c:	100b883a 	mov	r5,r2
    3d90:	e13ffb17 	ldw	r4,-20(fp)
    3d94:	1805883a 	mov	r2,r3
    3d98:	1085883a 	add	r2,r2,r2
    3d9c:	10c5883a 	add	r2,r2,r3
    3da0:	2085883a 	add	r2,r4,r2
    3da4:	10800444 	addi	r2,r2,17
    3da8:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    3dac:	e0fffa03 	ldbu	r3,-24(fp)
    3db0:	e0800217 	ldw	r2,8(fp)
    3db4:	11000103 	ldbu	r4,4(r2)
    3db8:	10800143 	ldbu	r2,5(r2)
    3dbc:	1004923a 	slli	r2,r2,8
    3dc0:	1104b03a 	or	r2,r2,r4
    3dc4:	100b883a 	mov	r5,r2
    3dc8:	e13ffb17 	ldw	r4,-20(fp)
    3dcc:	1805883a 	mov	r2,r3
    3dd0:	1085883a 	add	r2,r2,r2
    3dd4:	10c5883a 	add	r2,r2,r3
    3dd8:	2085883a 	add	r2,r4,r2
    3ddc:	10800484 	addi	r2,r2,18
    3de0:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    3de4:	e0bffb17 	ldw	r2,-20(fp)
    3de8:	10c00903 	ldbu	r3,36(r2)
    3dec:	e0800217 	ldw	r2,8(fp)
    3df0:	10800183 	ldbu	r2,6(r2)
    3df4:	18c03fcc 	andi	r3,r3,255
    3df8:	10803fcc 	andi	r2,r2,255
    3dfc:	1880042e 	bgeu	r3,r2,3e10 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    3e00:	e0800217 	ldw	r2,8(fp)
    3e04:	10c00183 	ldbu	r3,6(r2)
    3e08:	e0bffb17 	ldw	r2,-20(fp)
    3e0c:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3e10:	e0bffb17 	ldw	r2,-20(fp)
    3e14:	108006c3 	ldbu	r2,27(r2)
    3e18:	10800044 	addi	r2,r2,1
    3e1c:	1007883a 	mov	r3,r2
    3e20:	e0bffb17 	ldw	r2,-20(fp)
    3e24:	10c006c5 	stb	r3,27(r2)
    3e28:	00000106 	br	3e30 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3e2c:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3e30:	e037883a 	mov	sp,fp
    3e34:	df000017 	ldw	fp,0(sp)
    3e38:	dec00104 	addi	sp,sp,4
    3e3c:	f800283a 	ret

00003e40 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3e40:	213fff04 	addi	r4,r4,-4
    3e44:	0003d041 	jmpi	3d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003e48 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3e48:	defffd04 	addi	sp,sp,-12
    3e4c:	df000215 	stw	fp,8(sp)
    3e50:	df000204 	addi	fp,sp,8
    3e54:	e13ffe15 	stw	r4,-8(fp)
    3e58:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3e5c:	0001883a 	nop
    3e60:	e037883a 	mov	sp,fp
    3e64:	df000017 	ldw	fp,0(sp)
    3e68:	dec00104 	addi	sp,sp,4
    3e6c:	f800283a 	ret

00003e70 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3e70:	defffd04 	addi	sp,sp,-12
    3e74:	dfc00215 	stw	ra,8(sp)
    3e78:	df000115 	stw	fp,4(sp)
    3e7c:	df000104 	addi	fp,sp,4
    3e80:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3e84:	e0bfff17 	ldw	r2,-4(fp)
    3e88:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3e8c:	e0bfff17 	ldw	r2,-4(fp)
    3e90:	10800317 	ldw	r2,12(r2)
    3e94:	1009883a 	mov	r4,r2
    3e98:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    3e9c:	1009883a 	mov	r4,r2
    3ea0:	20800017 	ldw	r2,0(r4)
    3ea4:	10800204 	addi	r2,r2,8
    3ea8:	10800017 	ldw	r2,0(r2)
    3eac:	e0ffff17 	ldw	r3,-4(fp)
    3eb0:	18c00403 	ldbu	r3,16(r3)
    3eb4:	18c03fcc 	andi	r3,r3,255
    3eb8:	180b883a 	mov	r5,r3
    3ebc:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3ec0:	e0bfff17 	ldw	r2,-4(fp)
    3ec4:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3ec8:	e0bfff17 	ldw	r2,-4(fp)
    3ecc:	00c00044 	movi	r3,1
    3ed0:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
    3ed8:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3eec:	0005883a 	mov	r2,zero
}
    3ef0:	e037883a 	mov	sp,fp
    3ef4:	dfc00117 	ldw	ra,4(sp)
    3ef8:	df000017 	ldw	fp,0(sp)
    3efc:	dec00204 	addi	sp,sp,8
    3f00:	f800283a 	ret

00003f04 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3f04:	defffa04 	addi	sp,sp,-24
    3f08:	dfc00515 	stw	ra,20(sp)
    3f0c:	df000415 	stw	fp,16(sp)
    3f10:	df000404 	addi	fp,sp,16
    3f14:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3f18:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3f1c:	e0bfff17 	ldw	r2,-4(fp)
    3f20:	10800943 	ldbu	r2,37(r2)
    3f24:	1080005c 	xori	r2,r2,1
    3f28:	10803fcc 	andi	r2,r2,255
    3f2c:	10000226 	beq	r2,zero,3f38 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3f30:	0005883a 	mov	r2,zero
    3f34:	00002c06 	br	3fe8 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3f38:	00006dc0 	call	6dc <_Z6millisv>
    3f3c:	1007883a 	mov	r3,r2
    3f40:	e0bfff17 	ldw	r2,-4(fp)
    3f44:	10800717 	ldw	r2,28(r2)
    3f48:	1885c83a 	sub	r2,r3,r2
    3f4c:	0084303a 	nor	r2,zero,r2
    3f50:	1004d7fa 	srli	r2,r2,31
    3f54:	10803fcc 	andi	r2,r2,255
    3f58:	10002226 	beq	r2,zero,3fe4 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3f5c:	00006dc0 	call	6dc <_Z6millisv>
    3f60:	1007883a 	mov	r3,r2
    3f64:	e0bfff17 	ldw	r2,-4(fp)
    3f68:	10800903 	ldbu	r2,36(r2)
    3f6c:	10803fcc 	andi	r2,r2,255
    3f70:	1887883a 	add	r3,r3,r2
    3f74:	e0bfff17 	ldw	r2,-4(fp)
    3f78:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3f7c:	e0bfff17 	ldw	r2,-4(fp)
    3f80:	10800603 	ldbu	r2,24(r2)
    3f84:	10803fcc 	andi	r2,r2,255
    3f88:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3f8c:	e0bfff17 	ldw	r2,-4(fp)
    3f90:	11000317 	ldw	r4,12(r2)
    3f94:	e0bfff17 	ldw	r2,-4(fp)
    3f98:	10800403 	ldbu	r2,16(r2)
    3f9c:	11403fcc 	andi	r5,r2,255
    3fa0:	e0bfff17 	ldw	r2,-4(fp)
    3fa4:	108005c3 	ldbu	r2,23(r2)
    3fa8:	11803fcc 	andi	r6,r2,255
    3fac:	e0bfff17 	ldw	r2,-4(fp)
    3fb0:	10800f84 	addi	r2,r2,62
    3fb4:	e0ffff17 	ldw	r3,-4(fp)
    3fb8:	18c00903 	ldbu	r3,36(r3)
    3fbc:	18c03fcc 	andi	r3,r3,255
    3fc0:	e1fffe84 	addi	r7,fp,-6
    3fc4:	d8c00115 	stw	r3,4(sp)
    3fc8:	d8800015 	stw	r2,0(sp)
    3fcc:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    3fd0:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    3fd4:	e0bffe43 	ldbu	r2,-7(fp)
    3fd8:	1000021e 	bne	r2,zero,3fe4 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    3fdc:	e13fff17 	ldw	r4,-4(fp)
    3fe0:	0003ffc0 	call	3ffc <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    3fe4:	e0bffe03 	ldbu	r2,-8(fp)
}
    3fe8:	e037883a 	mov	sp,fp
    3fec:	dfc00117 	ldw	ra,4(sp)
    3ff0:	df000017 	ldw	fp,0(sp)
    3ff4:	dec00204 	addi	sp,sp,8
    3ff8:	f800283a 	ret

00003ffc <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    3ffc:	defffd04 	addi	sp,sp,-12
    4000:	df000215 	stw	fp,8(sp)
    4004:	df000204 	addi	fp,sp,8
    4008:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10800f83 	ldbu	r2,62(r2)
    4014:	10803fcc 	andi	r2,r2,255
    4018:	108001d8 	cmpnei	r2,r2,7
    401c:	10002f1e 	bne	r2,zero,40dc <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    4020:	e0bfff17 	ldw	r2,-4(fp)
    4024:	10801083 	ldbu	r2,66(r2)
    4028:	10803fcc 	andi	r2,r2,255
    402c:	10800058 	cmpnei	r2,r2,1
    4030:	10000a1e 	bne	r2,zero,405c <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    4034:	e0bfff17 	ldw	r2,-4(fp)
    4038:	10c0098b 	ldhu	r3,38(r2)
    403c:	008000b4 	movhi	r2,2
    4040:	10931684 	addi	r2,r2,19546
    4044:	1080000b 	ldhu	r2,0(r2)
    4048:	1884b03a 	or	r2,r3,r2
    404c:	1007883a 	mov	r3,r2
    4050:	e0bfff17 	ldw	r2,-4(fp)
    4054:	10c0098d 	sth	r3,38(r2)
    4058:	00000b06 	br	4088 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    405c:	e0bfff17 	ldw	r2,-4(fp)
    4060:	1080098b 	ldhu	r2,38(r2)
    4064:	1007883a 	mov	r3,r2
    4068:	008000b4 	movhi	r2,2
    406c:	10931684 	addi	r2,r2,19546
    4070:	1080000b 	ldhu	r2,0(r2)
    4074:	0084303a 	nor	r2,zero,r2
    4078:	1884703a 	and	r2,r3,r2
    407c:	1007883a 	mov	r3,r2
    4080:	e0bfff17 	ldw	r2,-4(fp)
    4084:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    4088:	e0bfff17 	ldw	r2,-4(fp)
    408c:	10c0098b 	ldhu	r3,38(r2)
    4090:	e0bfff17 	ldw	r2,-4(fp)
    4094:	10800a0b 	ldhu	r2,40(r2)
    4098:	18ffffcc 	andi	r3,r3,65535
    409c:	10bfffcc 	andi	r2,r2,65535
    40a0:	18800e26 	beq	r3,r2,40dc <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    40a4:	e0bfff17 	ldw	r2,-4(fp)
    40a8:	1080098b 	ldhu	r2,38(r2)
    40ac:	1007883a 	mov	r3,r2
    40b0:	e0bfff17 	ldw	r2,-4(fp)
    40b4:	10800a0b 	ldhu	r2,40(r2)
    40b8:	0084303a 	nor	r2,zero,r2
    40bc:	1884703a 	and	r2,r3,r2
    40c0:	1007883a 	mov	r3,r2
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    40cc:	e0bfff17 	ldw	r2,-4(fp)
    40d0:	10c0098b 	ldhu	r3,38(r2)
    40d4:	e0bfff17 	ldw	r2,-4(fp)
    40d8:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    40dc:	e0bfff17 	ldw	r2,-4(fp)
    40e0:	10800f83 	ldbu	r2,62(r2)
    40e4:	10803fcc 	andi	r2,r2,255
    40e8:	10800820 	cmpeqi	r2,r2,32
    40ec:	1000b026 	beq	r2,zero,43b0 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    40f0:	e0bfff17 	ldw	r2,-4(fp)
    40f4:	10c0098b 	ldhu	r3,38(r2)
    40f8:	008000b4 	movhi	r2,2
    40fc:	10931684 	addi	r2,r2,19546
    4100:	1080000b 	ldhu	r2,0(r2)
    4104:	1884703a 	and	r2,r3,r2
    4108:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    410c:	e0bfff17 	ldw	r2,-4(fp)
    4110:	108010c3 	ldbu	r2,67(r2)
    4114:	10803fcc 	andi	r2,r2,255
    4118:	108003cc 	andi	r2,r2,15
    411c:	1004923a 	slli	r2,r2,8
    4120:	1007883a 	mov	r3,r2
    4124:	e0bffe0b 	ldhu	r2,-8(fp)
    4128:	1884b03a 	or	r2,r3,r2
    412c:	1007883a 	mov	r3,r2
    4130:	e0bfff17 	ldw	r2,-4(fp)
    4134:	10801083 	ldbu	r2,66(r2)
    4138:	10803fcc 	andi	r2,r2,255
    413c:	10803c0c 	andi	r2,r2,240
    4140:	1884b03a 	or	r2,r3,r2
    4144:	1007883a 	mov	r3,r2
    4148:	e0bfff17 	ldw	r2,-4(fp)
    414c:	10801083 	ldbu	r2,66(r2)
    4150:	10803fcc 	andi	r2,r2,255
    4154:	1080030c 	andi	r2,r2,12
    4158:	100492ba 	slli	r2,r2,10
    415c:	1884b03a 	or	r2,r3,r2
    4160:	1007883a 	mov	r3,r2
    4164:	e0bfff17 	ldw	r2,-4(fp)
    4168:	10801083 	ldbu	r2,66(r2)
    416c:	10803fcc 	andi	r2,r2,255
    4170:	1080004c 	andi	r2,r2,1
    4174:	100490fa 	slli	r2,r2,3
    4178:	1884b03a 	or	r2,r3,r2
    417c:	1007883a 	mov	r3,r2
    4180:	e0bfff17 	ldw	r2,-4(fp)
    4184:	108010c3 	ldbu	r2,67(r2)
    4188:	10803fcc 	andi	r2,r2,255
    418c:	1080300c 	andi	r2,r2,192
    4190:	1004923a 	slli	r2,r2,8
    4194:	1884b03a 	or	r2,r3,r2
    4198:	1007883a 	mov	r3,r2
    419c:	e0bfff17 	ldw	r2,-4(fp)
    41a0:	108010c3 	ldbu	r2,67(r2)
    41a4:	10803fcc 	andi	r2,r2,255
    41a8:	10800c0c 	andi	r2,r2,48
    41ac:	1005d13a 	srai	r2,r2,4
    41b0:	1884b03a 	or	r2,r3,r2
    41b4:	1007883a 	mov	r3,r2
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    41c0:	e0bfff17 	ldw	r2,-4(fp)
    41c4:	10801143 	ldbu	r2,69(r2)
    41c8:	10803fcc 	andi	r2,r2,255
    41cc:	1004923a 	slli	r2,r2,8
    41d0:	1007883a 	mov	r3,r2
    41d4:	e0bfff17 	ldw	r2,-4(fp)
    41d8:	10801103 	ldbu	r2,68(r2)
    41dc:	10803fcc 	andi	r2,r2,255
    41e0:	1884b03a 	or	r2,r3,r2
    41e4:	1007883a 	mov	r3,r2
    41e8:	e0bfff17 	ldw	r2,-4(fp)
    41ec:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    41f0:	e0bfff17 	ldw	r2,-4(fp)
    41f4:	108011c3 	ldbu	r2,71(r2)
    41f8:	10803fcc 	andi	r2,r2,255
    41fc:	1004923a 	slli	r2,r2,8
    4200:	1007883a 	mov	r3,r2
    4204:	e0bfff17 	ldw	r2,-4(fp)
    4208:	10801183 	ldbu	r2,70(r2)
    420c:	10803fcc 	andi	r2,r2,255
    4210:	1884b03a 	or	r2,r3,r2
    4214:	1007883a 	mov	r3,r2
    4218:	e0bfff17 	ldw	r2,-4(fp)
    421c:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    4220:	e0bfff17 	ldw	r2,-4(fp)
    4224:	10801243 	ldbu	r2,73(r2)
    4228:	10803fcc 	andi	r2,r2,255
    422c:	1004923a 	slli	r2,r2,8
    4230:	1007883a 	mov	r3,r2
    4234:	e0bfff17 	ldw	r2,-4(fp)
    4238:	10801203 	ldbu	r2,72(r2)
    423c:	10803fcc 	andi	r2,r2,255
    4240:	1884b03a 	or	r2,r3,r2
    4244:	1007883a 	mov	r3,r2
    4248:	e0bfff17 	ldw	r2,-4(fp)
    424c:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    4250:	e0bfff17 	ldw	r2,-4(fp)
    4254:	108012c3 	ldbu	r2,75(r2)
    4258:	10803fcc 	andi	r2,r2,255
    425c:	1004923a 	slli	r2,r2,8
    4260:	1007883a 	mov	r3,r2
    4264:	e0bfff17 	ldw	r2,-4(fp)
    4268:	10801283 	ldbu	r2,74(r2)
    426c:	10803fcc 	andi	r2,r2,255
    4270:	1884b03a 	or	r2,r3,r2
    4274:	1007883a 	mov	r3,r2
    4278:	e0bfff17 	ldw	r2,-4(fp)
    427c:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    4280:	e0bfff17 	ldw	r2,-4(fp)
    4284:	10801343 	ldbu	r2,77(r2)
    4288:	10803fcc 	andi	r2,r2,255
    428c:	1004923a 	slli	r2,r2,8
    4290:	1007883a 	mov	r3,r2
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	10801303 	ldbu	r2,76(r2)
    429c:	10803fcc 	andi	r2,r2,255
    42a0:	1884b03a 	or	r2,r3,r2
    42a4:	1007883a 	mov	r3,r2
    42a8:	e0bfff17 	ldw	r2,-4(fp)
    42ac:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    42b0:	e0bfff17 	ldw	r2,-4(fp)
    42b4:	108013c3 	ldbu	r2,79(r2)
    42b8:	10803fcc 	andi	r2,r2,255
    42bc:	1004923a 	slli	r2,r2,8
    42c0:	1007883a 	mov	r3,r2
    42c4:	e0bfff17 	ldw	r2,-4(fp)
    42c8:	10801383 	ldbu	r2,78(r2)
    42cc:	10803fcc 	andi	r2,r2,255
    42d0:	1884b03a 	or	r2,r3,r2
    42d4:	1007883a 	mov	r3,r2
    42d8:	e0bfff17 	ldw	r2,-4(fp)
    42dc:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    42e0:	e0bfff17 	ldw	r2,-4(fp)
    42e4:	10c0098b 	ldhu	r3,38(r2)
    42e8:	e0bfff17 	ldw	r2,-4(fp)
    42ec:	10800a0b 	ldhu	r2,40(r2)
    42f0:	18ffffcc 	andi	r3,r3,65535
    42f4:	10bfffcc 	andi	r2,r2,65535
    42f8:	18800e26 	beq	r3,r2,4334 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	1080098b 	ldhu	r2,38(r2)
    4304:	1007883a 	mov	r3,r2
    4308:	e0bfff17 	ldw	r2,-4(fp)
    430c:	10800a0b 	ldhu	r2,40(r2)
    4310:	0084303a 	nor	r2,zero,r2
    4314:	1884703a 	and	r2,r3,r2
    4318:	1007883a 	mov	r3,r2
    431c:	e0bfff17 	ldw	r2,-4(fp)
    4320:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    4324:	e0bfff17 	ldw	r2,-4(fp)
    4328:	10c0098b 	ldhu	r3,38(r2)
    432c:	e0bfff17 	ldw	r2,-4(fp)
    4330:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    4334:	e0bfff17 	ldw	r2,-4(fp)
    4338:	10800d0b 	ldhu	r2,52(r2)
    433c:	10bfffcc 	andi	r2,r2,65535
    4340:	10000726 	beq	r2,zero,4360 <_ZN7XBOXONE10readReportEv+0x364>
    4344:	e0bfff17 	ldw	r2,-4(fp)
    4348:	10800e0b 	ldhu	r2,56(r2)
    434c:	10bfffcc 	andi	r2,r2,65535
    4350:	1000031e 	bne	r2,zero,4360 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    4354:	e0bfff17 	ldw	r2,-4(fp)
    4358:	00c00044 	movi	r3,1
    435c:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    4360:	e0bfff17 	ldw	r2,-4(fp)
    4364:	10c00d0b 	ldhu	r3,52(r2)
    4368:	e0bfff17 	ldw	r2,-4(fp)
    436c:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    4370:	e0bfff17 	ldw	r2,-4(fp)
    4374:	10800d8b 	ldhu	r2,54(r2)
    4378:	10bfffcc 	andi	r2,r2,65535
    437c:	10000726 	beq	r2,zero,439c <_ZN7XBOXONE10readReportEv+0x3a0>
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	10800e8b 	ldhu	r2,58(r2)
    4388:	10bfffcc 	andi	r2,r2,65535
    438c:	1000031e 	bne	r2,zero,439c <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    4390:	e0bfff17 	ldw	r2,-4(fp)
    4394:	00c00044 	movi	r3,1
    4398:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    439c:	e0bfff17 	ldw	r2,-4(fp)
    43a0:	10c00d8b 	ldhu	r3,54(r2)
    43a4:	e0bfff17 	ldw	r2,-4(fp)
    43a8:	10c00e8d 	sth	r3,58(r2)
    43ac:	00000106 	br	43b4 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    43b0:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    43b4:	e037883a 	mov	sp,fp
    43b8:	df000017 	ldw	fp,0(sp)
    43bc:	dec00104 	addi	sp,sp,4
    43c0:	f800283a 	ret

000043c4 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    43c4:	defffd04 	addi	sp,sp,-12
    43c8:	df000215 	stw	fp,8(sp)
    43cc:	df000204 	addi	fp,sp,8
    43d0:	e13ffe15 	stw	r4,-8(fp)
    43d4:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    43d8:	e0bfff17 	ldw	r2,-4(fp)
    43dc:	10800218 	cmpnei	r2,r2,8
    43e0:	1000031e 	bne	r2,zero,43f0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    43e4:	e0bffe17 	ldw	r2,-8(fp)
    43e8:	10800d0b 	ldhu	r2,52(r2)
    43ec:	00001306 	br	443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    43f0:	e0bfff17 	ldw	r2,-4(fp)
    43f4:	10800258 	cmpnei	r2,r2,9
    43f8:	1000031e 	bne	r2,zero,4408 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    43fc:	e0bffe17 	ldw	r2,-8(fp)
    4400:	10800d8b 	ldhu	r2,54(r2)
    4404:	00000d06 	br	443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    4408:	e0bffe17 	ldw	r2,-8(fp)
    440c:	10c0098b 	ldhu	r3,38(r2)
    4410:	e0bfff17 	ldw	r2,-4(fp)
    4414:	10803fcc 	andi	r2,r2,255
    4418:	1089883a 	add	r4,r2,r2
    441c:	008000b4 	movhi	r2,2
    4420:	10930e84 	addi	r2,r2,19514
    4424:	2085883a 	add	r2,r4,r2
    4428:	1080000b 	ldhu	r2,0(r2)
    442c:	1884703a 	and	r2,r3,r2
    4430:	10bfffcc 	andi	r2,r2,65535
    4434:	1004c03a 	cmpne	r2,r2,zero
    4438:	10803fcc 	andi	r2,r2,255
}
    443c:	e037883a 	mov	sp,fp
    4440:	df000017 	ldw	fp,0(sp)
    4444:	dec00104 	addi	sp,sp,4
    4448:	f800283a 	ret

0000444c <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    444c:	defffc04 	addi	sp,sp,-16
    4450:	df000315 	stw	fp,12(sp)
    4454:	df000304 	addi	fp,sp,12
    4458:	e13ffe15 	stw	r4,-8(fp)
    445c:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    4460:	e0bfff17 	ldw	r2,-4(fp)
    4464:	10800218 	cmpnei	r2,r2,8
    4468:	10000a1e 	bne	r2,zero,4494 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    446c:	e0bffe17 	ldw	r2,-8(fp)
    4470:	10800f03 	ldbu	r2,60(r2)
    4474:	10803fcc 	andi	r2,r2,255
    4478:	10000426 	beq	r2,zero,448c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	10000f05 	stb	zero,60(r2)
                        return true;
    4484:	00800044 	movi	r2,1
    4488:	00002806 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    448c:	0005883a 	mov	r2,zero
    4490:	00002606 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    4494:	e0bfff17 	ldw	r2,-4(fp)
    4498:	10800258 	cmpnei	r2,r2,9
    449c:	10000a1e 	bne	r2,zero,44c8 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    44a0:	e0bffe17 	ldw	r2,-8(fp)
    44a4:	10800f43 	ldbu	r2,61(r2)
    44a8:	10803fcc 	andi	r2,r2,255
    44ac:	10000426 	beq	r2,zero,44c0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    44b0:	e0bffe17 	ldw	r2,-8(fp)
    44b4:	10000f45 	stb	zero,61(r2)
                        return true;
    44b8:	00800044 	movi	r2,1
    44bc:	00001b06 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    44c0:	0005883a 	mov	r2,zero
    44c4:	00001906 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    44c8:	e0bfff17 	ldw	r2,-4(fp)
    44cc:	10803fcc 	andi	r2,r2,255
    44d0:	1087883a 	add	r3,r2,r2
    44d4:	008000b4 	movhi	r2,2
    44d8:	10930e84 	addi	r2,r2,19514
    44dc:	1885883a 	add	r2,r3,r2
    44e0:	1080000b 	ldhu	r2,0(r2)
    44e4:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    44e8:	e0bffe17 	ldw	r2,-8(fp)
    44ec:	10c00a8b 	ldhu	r3,42(r2)
    44f0:	e0bffd0b 	ldhu	r2,-12(fp)
    44f4:	1884703a 	and	r2,r3,r2
    44f8:	10bfffcc 	andi	r2,r2,65535
    44fc:	1004c03a 	cmpne	r2,r2,zero
    4500:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    4504:	e0bffe17 	ldw	r2,-8(fp)
    4508:	10800a8b 	ldhu	r2,42(r2)
    450c:	1007883a 	mov	r3,r2
    4510:	e0bffd0b 	ldhu	r2,-12(fp)
    4514:	0084303a 	nor	r2,zero,r2
    4518:	1884703a 	and	r2,r3,r2
    451c:	1007883a 	mov	r3,r2
    4520:	e0bffe17 	ldw	r2,-8(fp)
    4524:	10c00a8d 	sth	r3,42(r2)
        return click;
    4528:	e0bffd83 	ldbu	r2,-10(fp)
}
    452c:	e037883a 	mov	sp,fp
    4530:	df000017 	ldw	fp,0(sp)
    4534:	dec00104 	addi	sp,sp,4
    4538:	f800283a 	ret

0000453c <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    453c:	defffd04 	addi	sp,sp,-12
    4540:	df000215 	stw	fp,8(sp)
    4544:	df000204 	addi	fp,sp,8
    4548:	e13ffe15 	stw	r4,-8(fp)
    454c:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    4550:	e0bfff17 	ldw	r2,-4(fp)
    4554:	e0fffe17 	ldw	r3,-8(fp)
    4558:	10800584 	addi	r2,r2,22
    455c:	1085883a 	add	r2,r2,r2
    4560:	1885883a 	add	r2,r3,r2
    4564:	1080000b 	ldhu	r2,0(r2)
}
    4568:	e037883a 	mov	sp,fp
    456c:	df000017 	ldw	fp,0(sp)
    4570:	dec00104 	addi	sp,sp,4
    4574:	f800283a 	ret

00004578 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4578:	defff904 	addi	sp,sp,-28
    457c:	dfc00615 	stw	ra,24(sp)
    4580:	df000515 	stw	fp,20(sp)
    4584:	df000504 	addi	fp,sp,20
    4588:	e13ffd15 	stw	r4,-12(fp)
    458c:	e17ffe15 	stw	r5,-8(fp)
    4590:	3005883a 	mov	r2,r6
    4594:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4598:	e0bffe17 	ldw	r2,-8(fp)
    459c:	10c00084 	addi	r3,r2,2
    45a0:	e0bffd17 	ldw	r2,-12(fp)
    45a4:	10801f83 	ldbu	r2,126(r2)
    45a8:	11000044 	addi	r4,r2,1
    45ac:	200b883a 	mov	r5,r4
    45b0:	e13ffd17 	ldw	r4,-12(fp)
    45b4:	21401f85 	stb	r5,126(r4)
    45b8:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    45bc:	e0bffd17 	ldw	r2,-12(fp)
    45c0:	10c00317 	ldw	r3,12(r2)
    45c4:	e0bffd17 	ldw	r2,-12(fp)
    45c8:	10800403 	ldbu	r2,16(r2)
    45cc:	11003fcc 	andi	r4,r2,255
    45d0:	e0bffd17 	ldw	r2,-12(fp)
    45d4:	10800503 	ldbu	r2,20(r2)
    45d8:	11403fcc 	andi	r5,r2,255
    45dc:	e1bfff0b 	ldhu	r6,-4(fp)
    45e0:	e0bffe17 	ldw	r2,-8(fp)
    45e4:	d8800015 	stw	r2,0(sp)
    45e8:	300f883a 	mov	r7,r6
    45ec:	280d883a 	mov	r6,r5
    45f0:	200b883a 	mov	r5,r4
    45f4:	1809883a 	mov	r4,r3
    45f8:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    45fc:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    4600:	e0bffc03 	ldbu	r2,-16(fp)
}
    4604:	e037883a 	mov	sp,fp
    4608:	dfc00117 	ldw	ra,4(sp)
    460c:	df000017 	ldw	fp,0(sp)
    4610:	dec00204 	addi	sp,sp,8
    4614:	f800283a 	ret

00004618 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    4618:	defff904 	addi	sp,sp,-28
    461c:	dfc00615 	stw	ra,24(sp)
    4620:	df000515 	stw	fp,20(sp)
    4624:	df000504 	addi	fp,sp,20
    4628:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    462c:	00800244 	movi	r2,9
    4630:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4634:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4638:	00800244 	movi	r2,9
    463c:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    4640:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4644:	008003c4 	movi	r2,15
    4648:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    464c:	00800104 	movi	r2,4
    4650:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    4654:	00800104 	movi	r2,4
    4658:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    465c:	00800804 	movi	r2,32
    4660:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    4664:	00800804 	movi	r2,32
    4668:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    466c:	00bfe004 	movi	r2,-128
    4670:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4674:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4678:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    467c:	01800344 	movi	r6,13
    4680:	e17ffb04 	addi	r5,fp,-20
    4684:	e13fff17 	ldw	r4,-4(fp)
    4688:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    468c:	e0bfff17 	ldw	r2,-4(fp)
    4690:	10800817 	ldw	r2,32(r2)
    4694:	10000326 	beq	r2,zero,46a4 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4698:	e0bfff17 	ldw	r2,-4(fp)
    469c:	10800817 	ldw	r2,32(r2)
    46a0:	103ee83a 	callr	r2
}
    46a4:	0001883a 	nop
    46a8:	e037883a 	mov	sp,fp
    46ac:	dfc00117 	ldw	ra,4(sp)
    46b0:	df000017 	ldw	fp,0(sp)
    46b4:	dec00204 	addi	sp,sp,8
    46b8:	f800283a 	ret

000046bc <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    46bc:	defff904 	addi	sp,sp,-28
    46c0:	dfc00615 	stw	ra,24(sp)
    46c4:	df000515 	stw	fp,20(sp)
    46c8:	df000504 	addi	fp,sp,20
    46cc:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    46d0:	00800244 	movi	r2,9
    46d4:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    46d8:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    46dc:	00800244 	movi	r2,9
    46e0:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    46e4:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    46e8:	008003c4 	movi	r2,15
    46ec:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    46f0:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    46f4:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    46f8:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    46fc:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    4700:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4704:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4708:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    470c:	01800344 	movi	r6,13
    4710:	e17ffb04 	addi	r5,fp,-20
    4714:	e13fff17 	ldw	r4,-4(fp)
    4718:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
}
    471c:	0001883a 	nop
    4720:	e037883a 	mov	sp,fp
    4724:	dfc00117 	ldw	ra,4(sp)
    4728:	df000017 	ldw	fp,0(sp)
    472c:	dec00204 	addi	sp,sp,8
    4730:	f800283a 	ret

00004734 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4734:	defff504 	addi	sp,sp,-44
    4738:	dfc00a15 	stw	ra,40(sp)
    473c:	df000915 	stw	fp,36(sp)
    4740:	df000904 	addi	fp,sp,36
    4744:	e13ffb15 	stw	r4,-20(fp)
    4748:	3009883a 	mov	r4,r6
    474c:	3807883a 	mov	r3,r7
    4750:	e0800217 	ldw	r2,8(fp)
    4754:	e17ffc05 	stb	r5,-16(fp)
    4758:	e13ffd05 	stb	r4,-12(fp)
    475c:	e0fffe05 	stb	r3,-8(fp)
    4760:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4764:	00800244 	movi	r2,9
    4768:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    476c:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4770:	00800244 	movi	r2,9
    4774:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4778:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    477c:	008003c4 	movi	r2,15
    4780:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    4784:	e0bffc03 	ldbu	r2,-16(fp)
    4788:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    478c:	e0bffd03 	ldbu	r2,-12(fp)
    4790:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    4794:	e0bffe03 	ldbu	r2,-8(fp)
    4798:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    479c:	e0bfff03 	ldbu	r2,-4(fp)
    47a0:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    47a4:	00bfffc4 	movi	r2,-1
    47a8:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    47ac:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    47b0:	00bfffc4 	movi	r2,-1
    47b4:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    47b8:	01800344 	movi	r6,13
    47bc:	e17ff704 	addi	r5,fp,-36
    47c0:	e13ffb17 	ldw	r4,-20(fp)
    47c4:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
}
    47c8:	0001883a 	nop
    47cc:	e037883a 	mov	sp,fp
    47d0:	dfc00117 	ldw	ra,4(sp)
    47d4:	df000017 	ldw	fp,0(sp)
    47d8:	dec00204 	addi	sp,sp,8
    47dc:	f800283a 	ret

000047e0 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    47e0:	defffe04 	addi	sp,sp,-8
    47e4:	df000115 	stw	fp,4(sp)
    47e8:	df000104 	addi	fp,sp,4
    47ec:	e13fff15 	stw	r4,-4(fp)
    47f0:	e0bfff17 	ldw	r2,-4(fp)
    47f4:	10000005 	stb	zero,0(r2)
    47f8:	e0bfff17 	ldw	r2,-4(fp)
    47fc:	10c00043 	ldbu	r3,1(r2)
    4800:	1806703a 	and	r3,r3,zero
    4804:	10c00045 	stb	r3,1(r2)
    4808:	10c00083 	ldbu	r3,2(r2)
    480c:	1806703a 	and	r3,r3,zero
    4810:	10c00085 	stb	r3,2(r2)
    4814:	10c000c3 	ldbu	r3,3(r2)
    4818:	1806703a 	and	r3,r3,zero
    481c:	10c000c5 	stb	r3,3(r2)
    4820:	10c00103 	ldbu	r3,4(r2)
    4824:	1806703a 	and	r3,r3,zero
    4828:	10c00105 	stb	r3,4(r2)
        };
    482c:	0001883a 	nop
    4830:	e037883a 	mov	sp,fp
    4834:	df000017 	ldw	fp,0(sp)
    4838:	dec00104 	addi	sp,sp,4
    483c:	f800283a 	ret

00004840 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    4840:	defffe04 	addi	sp,sp,-8
    4844:	df000115 	stw	fp,4(sp)
    4848:	df000104 	addi	fp,sp,4
    484c:	e13fff15 	stw	r4,-4(fp)
    4850:	e0bfff17 	ldw	r2,-4(fp)
    4854:	10000015 	stw	zero,0(r2)
    4858:	e0bfff17 	ldw	r2,-4(fp)
    485c:	10000105 	stb	zero,4(r2)
    4860:	e0bfff17 	ldw	r2,-4(fp)
    4864:	10000145 	stb	zero,5(r2)
        };
    4868:	0001883a 	nop
    486c:	e037883a 	mov	sp,fp
    4870:	df000017 	ldw	fp,0(sp)
    4874:	dec00104 	addi	sp,sp,4
    4878:	f800283a 	ret

0000487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    487c:	defffd04 	addi	sp,sp,-12
    4880:	df000215 	stw	fp,8(sp)
    4884:	df000204 	addi	fp,sp,8
    4888:	e13ffe15 	stw	r4,-8(fp)
    488c:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4890:	e0bfff17 	ldw	r2,-4(fp)
    4894:	10c00043 	ldbu	r3,1(r2)
    4898:	11000083 	ldbu	r4,2(r2)
    489c:	2008923a 	slli	r4,r4,8
    48a0:	20c6b03a 	or	r3,r4,r3
    48a4:	110000c3 	ldbu	r4,3(r2)
    48a8:	2008943a 	slli	r4,r4,16
    48ac:	20c6b03a 	or	r3,r4,r3
    48b0:	10800103 	ldbu	r2,4(r2)
    48b4:	1004963a 	slli	r2,r2,24
    48b8:	10c4b03a 	or	r2,r2,r3
    48bc:	1007883a 	mov	r3,r2
    48c0:	e0bffe17 	ldw	r2,-8(fp)
    48c4:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    48c8:	e0bfff17 	ldw	r2,-4(fp)
    48cc:	10c00003 	ldbu	r3,0(r2)
    48d0:	e0bffe17 	ldw	r2,-8(fp)
    48d4:	10c00145 	stb	r3,5(r2)
    48d8:	e0bffe17 	ldw	r2,-8(fp)
    48dc:	10c00143 	ldbu	r3,5(r2)
    48e0:	e0bffe17 	ldw	r2,-8(fp)
    48e4:	10c00105 	stb	r3,4(r2)
        };
    48e8:	0001883a 	nop
    48ec:	e037883a 	mov	sp,fp
    48f0:	df000017 	ldw	fp,0(sp)
    48f4:	dec00104 	addi	sp,sp,4
    48f8:	f800283a 	ret

000048fc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    48fc:	defffe04 	addi	sp,sp,-8
    4900:	df000115 	stw	fp,4(sp)
    4904:	df000104 	addi	fp,sp,4
    4908:	e13fff15 	stw	r4,-4(fp)
    490c:	e0bfff17 	ldw	r2,-4(fp)
    4910:	10000015 	stw	zero,0(r2)
    4914:	e0bfff17 	ldw	r2,-4(fp)
    4918:	10000105 	stb	zero,4(r2)
    491c:	e0bfff17 	ldw	r2,-4(fp)
    4920:	1000018d 	sth	zero,6(r2)
        };
    4924:	0001883a 	nop
    4928:	e037883a 	mov	sp,fp
    492c:	df000017 	ldw	fp,0(sp)
    4930:	dec00104 	addi	sp,sp,4
    4934:	f800283a 	ret

00004938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4938:	defffd04 	addi	sp,sp,-12
    493c:	df000215 	stw	fp,8(sp)
    4940:	df000204 	addi	fp,sp,8
    4944:	e13ffe15 	stw	r4,-8(fp)
    4948:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    494c:	e0bfff17 	ldw	r2,-4(fp)
    4950:	10c00043 	ldbu	r3,1(r2)
    4954:	11000083 	ldbu	r4,2(r2)
    4958:	2008923a 	slli	r4,r4,8
    495c:	20c6b03a 	or	r3,r4,r3
    4960:	110000c3 	ldbu	r4,3(r2)
    4964:	2008943a 	slli	r4,r4,16
    4968:	20c6b03a 	or	r3,r4,r3
    496c:	10800103 	ldbu	r2,4(r2)
    4970:	1004963a 	slli	r2,r2,24
    4974:	10c4b03a 	or	r2,r2,r3
    4978:	1007883a 	mov	r3,r2
    497c:	e0bffe17 	ldw	r2,-8(fp)
    4980:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    4984:	e0bffe17 	ldw	r2,-8(fp)
    4988:	1000018d 	sth	zero,6(r2)
        };
    498c:	0001883a 	nop
    4990:	e037883a 	mov	sp,fp
    4994:	df000017 	ldw	fp,0(sp)
    4998:	dec00104 	addi	sp,sp,4
    499c:	f800283a 	ret

000049a0 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    49a0:	defffb04 	addi	sp,sp,-20
    49a4:	df000415 	stw	fp,16(sp)
    49a8:	df000404 	addi	fp,sp,16
    49ac:	e13ffc15 	stw	r4,-16(fp)
    49b0:	e17ffd15 	stw	r5,-12(fp)
    49b4:	e1bffe15 	stw	r6,-8(fp)
    49b8:	3805883a 	mov	r2,r7
    49bc:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    49c0:	e0bffc17 	ldw	r2,-16(fp)
    49c4:	10800103 	ldbu	r2,4(r2)
    49c8:	10803fcc 	andi	r2,r2,255
    49cc:	10000326 	beq	r2,zero,49dc <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    49d0:	10800060 	cmpeqi	r2,r2,1
    49d4:	10000a1e 	bne	r2,zero,4a00 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    49d8:	00002906 	br	4a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    49dc:	e0bffc17 	ldw	r2,-16(fp)
    49e0:	e0ffff0b 	ldhu	r3,-4(fp)
    49e4:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    49e8:	e0bffc17 	ldw	r2,-16(fp)
    49ec:	10800103 	ldbu	r2,4(r2)
    49f0:	10800044 	addi	r2,r2,1
    49f4:	1007883a 	mov	r3,r2
    49f8:	e0bffc17 	ldw	r2,-16(fp)
    49fc:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    4a00:	e0bffc17 	ldw	r2,-16(fp)
    4a04:	1080018b 	ldhu	r2,6(r2)
    4a08:	10bfffcc 	andi	r2,r2,65535
    4a0c:	10001626 	beq	r2,zero,4a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a10:	e0bffe17 	ldw	r2,-8(fp)
    4a14:	1080000b 	ldhu	r2,0(r2)
    4a18:	10bfffcc 	andi	r2,r2,65535
    4a1c:	10001226 	beq	r2,zero,4a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a20:	e0bffc17 	ldw	r2,-16(fp)
    4a24:	1080018b 	ldhu	r2,6(r2)
    4a28:	10bfffc4 	addi	r2,r2,-1
    4a2c:	1007883a 	mov	r3,r2
    4a30:	e0bffc17 	ldw	r2,-16(fp)
    4a34:	10c0018d 	sth	r3,6(r2)
    4a38:	e0bffd17 	ldw	r2,-12(fp)
    4a3c:	10800017 	ldw	r2,0(r2)
    4a40:	10c00044 	addi	r3,r2,1
    4a44:	e0bffd17 	ldw	r2,-12(fp)
    4a48:	10c00015 	stw	r3,0(r2)
    4a4c:	e0bffe17 	ldw	r2,-8(fp)
    4a50:	1080000b 	ldhu	r2,0(r2)
    4a54:	10bfffc4 	addi	r2,r2,-1
    4a58:	1007883a 	mov	r3,r2
    4a5c:	e0bffe17 	ldw	r2,-8(fp)
    4a60:	10c0000d 	sth	r3,0(r2)
    4a64:	003fe606 	br	4a00 <__alt_data_end+0xfc004a00>

                                if(!countDown)
    4a68:	e0bffc17 	ldw	r2,-16(fp)
    4a6c:	1080018b 	ldhu	r2,6(r2)
    4a70:	10bfffcc 	andi	r2,r2,65535
    4a74:	1000021e 	bne	r2,zero,4a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4a78:	e0bffc17 	ldw	r2,-16(fp)
    4a7c:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    4a80:	e0bffc17 	ldw	r2,-16(fp)
    4a84:	1080018b 	ldhu	r2,6(r2)
    4a88:	10bfffcc 	andi	r2,r2,65535
    4a8c:	1005003a 	cmpeq	r2,r2,zero
        };
    4a90:	e037883a 	mov	sp,fp
    4a94:	df000017 	ldw	fp,0(sp)
    4a98:	dec00104 	addi	sp,sp,4
    4a9c:	f800283a 	ret

00004aa0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4aa0:	defffb04 	addi	sp,sp,-20
    4aa4:	df000415 	stw	fp,16(sp)
    4aa8:	df000404 	addi	fp,sp,16
    4aac:	e13ffc15 	stw	r4,-16(fp)
    4ab0:	2809883a 	mov	r4,r5
    4ab4:	3007883a 	mov	r3,r6
    4ab8:	3805883a 	mov	r2,r7
    4abc:	e13ffd05 	stb	r4,-12(fp)
    4ac0:	e0fffe05 	stb	r3,-8(fp)
    4ac4:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4ac8:	0005883a 	mov	r2,zero
        }
    4acc:	e037883a 	mov	sp,fp
    4ad0:	df000017 	ldw	fp,0(sp)
    4ad4:	dec00104 	addi	sp,sp,4
    4ad8:	f800283a 	ret

00004adc <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4adc:	defffb04 	addi	sp,sp,-20
    4ae0:	df000415 	stw	fp,16(sp)
    4ae4:	df000404 	addi	fp,sp,16
    4ae8:	e13ffc15 	stw	r4,-16(fp)
    4aec:	2809883a 	mov	r4,r5
    4af0:	3007883a 	mov	r3,r6
    4af4:	3805883a 	mov	r2,r7
    4af8:	e13ffd05 	stb	r4,-12(fp)
    4afc:	e0fffe05 	stb	r3,-8(fp)
    4b00:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4b04:	0005883a 	mov	r2,zero
        }
    4b08:	e037883a 	mov	sp,fp
    4b0c:	df000017 	ldw	fp,0(sp)
    4b10:	dec00104 	addi	sp,sp,4
    4b14:	f800283a 	ret

00004b18 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4b18:	defffe04 	addi	sp,sp,-8
    4b1c:	df000115 	stw	fp,4(sp)
    4b20:	df000104 	addi	fp,sp,4
    4b24:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b28:	0005883a 	mov	r2,zero
        }
    4b2c:	e037883a 	mov	sp,fp
    4b30:	df000017 	ldw	fp,0(sp)
    4b34:	dec00104 	addi	sp,sp,4
    4b38:	f800283a 	ret

00004b3c <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4b3c:	defffe04 	addi	sp,sp,-8
    4b40:	df000115 	stw	fp,4(sp)
    4b44:	df000104 	addi	fp,sp,4
    4b48:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b4c:	0005883a 	mov	r2,zero
        }
    4b50:	e037883a 	mov	sp,fp
    4b54:	df000017 	ldw	fp,0(sp)
    4b58:	dec00104 	addi	sp,sp,4
    4b5c:	f800283a 	ret

00004b60 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    4b60:	defffe04 	addi	sp,sp,-8
    4b64:	df000115 	stw	fp,4(sp)
    4b68:	df000104 	addi	fp,sp,4
    4b6c:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b70:	0005883a 	mov	r2,zero
        }
    4b74:	e037883a 	mov	sp,fp
    4b78:	df000017 	ldw	fp,0(sp)
    4b7c:	dec00104 	addi	sp,sp,4
    4b80:	f800283a 	ret

00004b84 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4b84:	defffd04 	addi	sp,sp,-12
    4b88:	df000215 	stw	fp,8(sp)
    4b8c:	df000204 	addi	fp,sp,8
    4b90:	e13ffe15 	stw	r4,-8(fp)
    4b94:	2805883a 	mov	r2,r5
    4b98:	e0bfff05 	stb	r2,-4(fp)
                return;
    4b9c:	0001883a 	nop
        } // Note used for hubs only!
    4ba0:	e037883a 	mov	sp,fp
    4ba4:	df000017 	ldw	fp,0(sp)
    4ba8:	dec00104 	addi	sp,sp,4
    4bac:	f800283a 	ret

00004bb0 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    4bb0:	defffc04 	addi	sp,sp,-16
    4bb4:	df000315 	stw	fp,12(sp)
    4bb8:	df000304 	addi	fp,sp,12
    4bbc:	e13ffd15 	stw	r4,-12(fp)
    4bc0:	2807883a 	mov	r3,r5
    4bc4:	3005883a 	mov	r2,r6
    4bc8:	e0fffe0d 	sth	r3,-8(fp)
    4bcc:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    4bd0:	0005883a 	mov	r2,zero
        }
    4bd4:	e037883a 	mov	sp,fp
    4bd8:	df000017 	ldw	fp,0(sp)
    4bdc:	dec00104 	addi	sp,sp,4
    4be0:	f800283a 	ret

00004be4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    4be4:	defffd04 	addi	sp,sp,-12
    4be8:	df000215 	stw	fp,8(sp)
    4bec:	df000204 	addi	fp,sp,8
    4bf0:	e13ffe15 	stw	r4,-8(fp)
    4bf4:	2805883a 	mov	r2,r5
    4bf8:	e0bfff05 	stb	r2,-4(fp)
                return false;
    4bfc:	0005883a 	mov	r2,zero
        }
    4c00:	e037883a 	mov	sp,fp
    4c04:	df000017 	ldw	fp,0(sp)
    4c08:	dec00104 	addi	sp,sp,4
    4c0c:	f800283a 	ret

00004c10 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    4c10:	defffd04 	addi	sp,sp,-12
    4c14:	df000215 	stw	fp,8(sp)
    4c18:	df000204 	addi	fp,sp,8
    4c1c:	e13ffe15 	stw	r4,-8(fp)
    4c20:	2805883a 	mov	r2,r5
    4c24:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4c28:	00800044 	movi	r2,1
        }
    4c2c:	e037883a 	mov	sp,fp
    4c30:	df000017 	ldw	fp,0(sp)
    4c34:	dec00104 	addi	sp,sp,4
    4c38:	f800283a 	ret

00004c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4c3c:	defffc04 	addi	sp,sp,-16
    4c40:	df000315 	stw	fp,12(sp)
    4c44:	df000304 	addi	fp,sp,12
    4c48:	e13ffe15 	stw	r4,-8(fp)
    4c4c:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4c50:	e03ffd05 	stb	zero,-12(fp)
    4c54:	e0bffd03 	ldbu	r2,-12(fp)
    4c58:	10800428 	cmpgeui	r2,r2,16
    4c5c:	1000161e 	bne	r2,zero,4cb8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    4c60:	e0bffd03 	ldbu	r2,-12(fp)
    4c64:	e0fffe17 	ldw	r3,-8(fp)
    4c68:	10800784 	addi	r2,r2,30
    4c6c:	1085883a 	add	r2,r2,r2
    4c70:	1085883a 	add	r2,r2,r2
    4c74:	1885883a 	add	r2,r3,r2
    4c78:	10800017 	ldw	r2,0(r2)
    4c7c:	10000a1e 	bne	r2,zero,4ca8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    4c80:	e0bffd03 	ldbu	r2,-12(fp)
    4c84:	e0fffe17 	ldw	r3,-8(fp)
    4c88:	10800784 	addi	r2,r2,30
    4c8c:	1085883a 	add	r2,r2,r2
    4c90:	1085883a 	add	r2,r2,r2
    4c94:	1885883a 	add	r2,r3,r2
    4c98:	e0ffff17 	ldw	r3,-4(fp)
    4c9c:	10c00015 	stw	r3,0(r2)
                                return 0;
    4ca0:	0005883a 	mov	r2,zero
    4ca4:	00000506 	br	4cbc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4ca8:	e0bffd03 	ldbu	r2,-12(fp)
    4cac:	10800044 	addi	r2,r2,1
    4cb0:	e0bffd05 	stb	r2,-12(fp)
    4cb4:	003fe706 	br	4c54 <__alt_data_end+0xfc004c54>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    4cb8:	00bff4c4 	movi	r2,-45
        };
    4cbc:	e037883a 	mov	sp,fp
    4cc0:	df000017 	ldw	fp,0(sp)
    4cc4:	dec00104 	addi	sp,sp,4
    4cc8:	f800283a 	ret

00004ccc <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    4ccc:	defffa04 	addi	sp,sp,-24
    4cd0:	df000515 	stw	fp,20(sp)
    4cd4:	df000504 	addi	fp,sp,20
    4cd8:	e13ffb15 	stw	r4,-20(fp)
    4cdc:	3009883a 	mov	r4,r6
    4ce0:	3807883a 	mov	r3,r7
    4ce4:	e0800117 	ldw	r2,4(fp)
    4ce8:	e17ffc05 	stb	r5,-16(fp)
    4cec:	e13ffd05 	stb	r4,-12(fp)
    4cf0:	e0fffe05 	stb	r3,-8(fp)
    4cf4:	e0bfff05 	stb	r2,-4(fp)
        };
    4cf8:	0001883a 	nop
    4cfc:	e037883a 	mov	sp,fp
    4d00:	df000017 	ldw	fp,0(sp)
    4d04:	dec00104 	addi	sp,sp,4
    4d08:	f800283a 	ret

00004d0c <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4d0c:	defffe04 	addi	sp,sp,-8
    4d10:	df000115 	stw	fp,4(sp)
    4d14:	df000104 	addi	fp,sp,4
    4d18:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4d1c:	e0bfff17 	ldw	r2,-4(fp)
    4d20:	10800403 	ldbu	r2,16(r2)
        };
    4d24:	e037883a 	mov	sp,fp
    4d28:	df000017 	ldw	fp,0(sp)
    4d2c:	dec00104 	addi	sp,sp,4
    4d30:	f800283a 	ret

00004d34 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4d34:	defffe04 	addi	sp,sp,-8
    4d38:	df000115 	stw	fp,4(sp)
    4d3c:	df000104 	addi	fp,sp,4
    4d40:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4d44:	e0bfff17 	ldw	r2,-4(fp)
    4d48:	10800943 	ldbu	r2,37(r2)
        };
    4d4c:	e037883a 	mov	sp,fp
    4d50:	df000017 	ldw	fp,0(sp)
    4d54:	dec00104 	addi	sp,sp,4
    4d58:	f800283a 	ret

00004d5c <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4d5c:	defffc04 	addi	sp,sp,-16
    4d60:	df000315 	stw	fp,12(sp)
    4d64:	df000304 	addi	fp,sp,12
    4d68:	e13ffd15 	stw	r4,-12(fp)
    4d6c:	2807883a 	mov	r3,r5
    4d70:	3005883a 	mov	r2,r6
    4d74:	e0fffe0d 	sth	r3,-8(fp)
    4d78:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4d7c:	e0bffe0b 	ldhu	r2,-8(fp)
    4d80:	108117a0 	cmpeqi	r2,r2,1118
    4d84:	10000f1e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4d88:	e0bffe0b 	ldhu	r2,-8(fp)
    4d8c:	1081ce20 	cmpeqi	r2,r2,1848
    4d90:	10000c1e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4d94:	e0bffe0b 	ldhu	r2,-8(fp)
    4d98:	10839be0 	cmpeqi	r2,r2,3695
    4d9c:	1000091e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4da0:	e0bffe0b 	ldhu	r2,-8(fp)
    4da4:	1083c360 	cmpeqi	r2,r2,3853
    4da8:	1000061e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4dac:	e0bffe0b 	ldhu	r2,-8(fp)
    4db0:	10854ca0 	cmpeqi	r2,r2,5426
    4db4:	1000031e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4db8:	e0bffe0b 	ldhu	r2,-8(fp)
    4dbc:	10893198 	cmpnei	r2,r2,9414
    4dc0:	10002c1e 	bne	r2,zero,4e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    4dc4:	e0bfff0b 	ldhu	r2,-4(fp)
    4dc8:	1080b460 	cmpeqi	r2,r2,721
    4dcc:	1000271e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    4dd0:	e0bfff0b 	ldhu	r2,-4(fp)
    4dd4:	1080b760 	cmpeqi	r2,r2,733
    4dd8:	1000241e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ddc:	e0bfff0b 	ldhu	r2,-4(fp)
    4de0:	1080b8e0 	cmpeqi	r2,r2,739
    4de4:	1000211e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4de8:	e0bfff0b 	ldhu	r2,-4(fp)
    4dec:	1080baa0 	cmpeqi	r2,r2,746
    4df0:	10001e1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4df4:	e0bfff0b 	ldhu	r2,-4(fp)
    4df8:	10928060 	cmpeqi	r2,r2,18945
    4dfc:	10001b1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    4e00:	e0bfff0b 	ldhu	r2,-4(fp)
    4e04:	10804e60 	cmpeqi	r2,r2,313
    4e08:	1000181e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e0c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e10:	108051a0 	cmpeqi	r2,r2,326
    4e14:	1000151e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e18:	e0bfff0b 	ldhu	r2,-4(fp)
    4e1c:	108019e0 	cmpeqi	r2,r2,103
    4e20:	1000121e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e24:	e0bfff0b 	ldhu	r2,-4(fp)
    4e28:	108280e0 	cmpeqi	r2,r2,2563
    4e2c:	10000f1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4e30:	e0bfff0b 	ldhu	r2,-4(fp)
    4e34:	109506a0 	cmpeqi	r2,r2,21530
    4e38:	10000c1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e3c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e40:	10950aa0 	cmpeqi	r2,r2,21546
    4e44:	1000091e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e48:	e0bfff0b 	ldhu	r2,-4(fp)
    4e4c:	10950ea0 	cmpeqi	r2,r2,21562
    4e50:	1000061e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e54:	e0bfff0b 	ldhu	r2,-4(fp)
    4e58:	1082c2a0 	cmpeqi	r2,r2,2826
    4e5c:	1000031e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4e60:	e0bfff0b 	ldhu	r2,-4(fp)
    4e64:	1082c498 	cmpnei	r2,r2,2834
    4e68:	1000021e 	bne	r2,zero,4e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4e6c:	00800044 	movi	r2,1
    4e70:	00000106 	br	4e78 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4e74:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4e78:	e037883a 	mov	sp,fp
    4e7c:	df000017 	ldw	fp,0(sp)
    4e80:	dec00104 	addi	sp,sp,4
    4e84:	f800283a 	ret

00004e88 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4e88:	defffe04 	addi	sp,sp,-8
    4e8c:	df000115 	stw	fp,4(sp)
    4e90:	df000104 	addi	fp,sp,4
    4e94:	e13fff15 	stw	r4,-4(fp)
    4e98:	008000b4 	movhi	r2,2
    4e9c:	10933304 	addi	r2,r2,19660
    4ea0:	e0ffff17 	ldw	r3,-4(fp)
    4ea4:	18800015 	stw	r2,0(r3)
    4ea8:	0001883a 	nop
    4eac:	e037883a 	mov	sp,fp
    4eb0:	df000017 	ldw	fp,0(sp)
    4eb4:	dec00104 	addi	sp,sp,4
    4eb8:	f800283a 	ret

00004ebc <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4ebc:	defffe04 	addi	sp,sp,-8
    4ec0:	df000115 	stw	fp,4(sp)
    4ec4:	df000104 	addi	fp,sp,4
    4ec8:	e13fff15 	stw	r4,-4(fp)
    4ecc:	008000b4 	movhi	r2,2
    4ed0:	10932d04 	addi	r2,r2,19636
    4ed4:	e0ffff17 	ldw	r3,-4(fp)
    4ed8:	18800015 	stw	r2,0(r3)
    4edc:	0001883a 	nop
    4ee0:	e037883a 	mov	sp,fp
    4ee4:	df000017 	ldw	fp,0(sp)
    4ee8:	dec00104 	addi	sp,sp,4
    4eec:	f800283a 	ret

00004ef0 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4ef0:	defffe04 	addi	sp,sp,-8
    4ef4:	df000115 	stw	fp,4(sp)
    4ef8:	df000104 	addi	fp,sp,4
    4efc:	e13fff15 	stw	r4,-4(fp)
    4f00:	008000b4 	movhi	r2,2
    4f04:	10933004 	addi	r2,r2,19648
    4f08:	e0ffff17 	ldw	r3,-4(fp)
    4f0c:	18800015 	stw	r2,0(r3)
    4f10:	0001883a 	nop
    4f14:	e037883a 	mov	sp,fp
    4f18:	df000017 	ldw	fp,0(sp)
    4f1c:	dec00104 	addi	sp,sp,4
    4f20:	f800283a 	ret

00004f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4f24:	defffc04 	addi	sp,sp,-16
    4f28:	dfc00315 	stw	ra,12(sp)
    4f2c:	df000215 	stw	fp,8(sp)
    4f30:	df000204 	addi	fp,sp,8
    4f34:	e13ffe15 	stw	r4,-8(fp)
    4f38:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4f3c:	e0bffe17 	ldw	r2,-8(fp)
    4f40:	1009883a 	mov	r4,r2
    4f44:	0004ef00 	call	4ef0 <_ZN13USBReadParserC1Ev>
    4f48:	008000b4 	movhi	r2,2
    4f4c:	10932a04 	addi	r2,r2,19624
    4f50:	e0fffe17 	ldw	r3,-8(fp)
    4f54:	18800015 	stw	r2,0(r3)
    4f58:	e0bffe17 	ldw	r2,-8(fp)
    4f5c:	e0ffff17 	ldw	r3,-4(fp)
    4f60:	10c00115 	stw	r3,4(r2)
    4f64:	e0bffe17 	ldw	r2,-8(fp)
    4f68:	10800204 	addi	r2,r2,8
    4f6c:	1009883a 	mov	r4,r2
    4f70:	00047e00 	call	47e0 <_ZN16MultiValueBufferC1Ev>
    4f74:	e0bffe17 	ldw	r2,-8(fp)
    4f78:	10800404 	addi	r2,r2,16
    4f7c:	1009883a 	mov	r4,r2
    4f80:	00048400 	call	4840 <_ZN20MultiByteValueParserC1Ev>
    4f84:	e0bffe17 	ldw	r2,-8(fp)
    4f88:	10800604 	addi	r2,r2,24
    4f8c:	1009883a 	mov	r4,r2
    4f90:	00048fc0 	call	48fc <_ZN11ByteSkipperC1Ev>
    4f94:	e0bffe17 	ldw	r2,-8(fp)
    4f98:	10000c05 	stb	zero,48(r2)
    4f9c:	e0bffe17 	ldw	r2,-8(fp)
    4fa0:	10000c45 	stb	zero,49(r2)
    4fa4:	e0bffe17 	ldw	r2,-8(fp)
    4fa8:	10000c85 	stb	zero,50(r2)
    4fac:	e0bffe17 	ldw	r2,-8(fp)
    4fb0:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    4fb4:	e0bffe17 	ldw	r2,-8(fp)
    4fb8:	10c00804 	addi	r3,r2,32
    4fbc:	e0bffe17 	ldw	r2,-8(fp)
    4fc0:	19803fcc 	andi	r6,r3,255
    4fc4:	11000243 	ldbu	r4,9(r2)
    4fc8:	2008703a 	and	r4,r4,zero
    4fcc:	200b883a 	mov	r5,r4
    4fd0:	3009883a 	mov	r4,r6
    4fd4:	2908b03a 	or	r4,r5,r4
    4fd8:	11000245 	stb	r4,9(r2)
    4fdc:	1808d23a 	srli	r4,r3,8
    4fe0:	21803fcc 	andi	r6,r4,255
    4fe4:	11000283 	ldbu	r4,10(r2)
    4fe8:	2008703a 	and	r4,r4,zero
    4fec:	200b883a 	mov	r5,r4
    4ff0:	3009883a 	mov	r4,r6
    4ff4:	2908b03a 	or	r4,r5,r4
    4ff8:	11000285 	stb	r4,10(r2)
    4ffc:	1808d43a 	srli	r4,r3,16
    5000:	21803fcc 	andi	r6,r4,255
    5004:	110002c3 	ldbu	r4,11(r2)
    5008:	2008703a 	and	r4,r4,zero
    500c:	200b883a 	mov	r5,r4
    5010:	3009883a 	mov	r4,r6
    5014:	2908b03a 	or	r4,r5,r4
    5018:	110002c5 	stb	r4,11(r2)
    501c:	180ad63a 	srli	r5,r3,24
    5020:	10c00303 	ldbu	r3,12(r2)
    5024:	1806703a 	and	r3,r3,zero
    5028:	1809883a 	mov	r4,r3
    502c:	2807883a 	mov	r3,r5
    5030:	20c6b03a 	or	r3,r4,r3
    5034:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    5038:	e0bffe17 	ldw	r2,-8(fp)
    503c:	10c00404 	addi	r3,r2,16
    5040:	e0bffe17 	ldw	r2,-8(fp)
    5044:	10800204 	addi	r2,r2,8
    5048:	100b883a 	mov	r5,r2
    504c:	1809883a 	mov	r4,r3
    5050:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    5054:	e0bffe17 	ldw	r2,-8(fp)
    5058:	10c00604 	addi	r3,r2,24
    505c:	e0bffe17 	ldw	r2,-8(fp)
    5060:	10800204 	addi	r2,r2,8
    5064:	100b883a 	mov	r5,r2
    5068:	1809883a 	mov	r4,r3
    506c:	00049380 	call	4938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    5070:	0001883a 	nop
    5074:	e037883a 	mov	sp,fp
    5078:	dfc00117 	ldw	ra,4(sp)
    507c:	df000017 	ldw	fp,0(sp)
    5080:	dec00204 	addi	sp,sp,8
    5084:	f800283a 	ret

00005088 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    5088:	defff804 	addi	sp,sp,-32
    508c:	dfc00715 	stw	ra,28(sp)
    5090:	df000615 	stw	fp,24(sp)
    5094:	df000604 	addi	fp,sp,24
    5098:	e13ffc15 	stw	r4,-16(fp)
    509c:	2805883a 	mov	r2,r5
    50a0:	e1bffe15 	stw	r6,-8(fp)
    50a4:	e1ffff15 	stw	r7,-4(fp)
    50a8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    50ac:	e0bffd0b 	ldhu	r2,-12(fp)
    50b0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    50b4:	e0bffe17 	ldw	r2,-8(fp)
    50b8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    50bc:	e0bffa0b 	ldhu	r2,-24(fp)
    50c0:	10bfffcc 	andi	r2,r2,65535
    50c4:	10000a26 	beq	r2,zero,50f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    50c8:	e0bffb04 	addi	r2,fp,-20
    50cc:	e1bffa04 	addi	r6,fp,-24
    50d0:	100b883a 	mov	r5,r2
    50d4:	e13ffc17 	ldw	r4,-16(fp)
    50d8:	00051040 	call	5104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    50dc:	1080005c 	xori	r2,r2,1
    50e0:	10803fcc 	andi	r2,r2,255
    50e4:	1000011e 	bne	r2,zero,50ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    50e8:	003ff406 	br	50bc <__alt_data_end+0xfc0050bc>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    50ec:	0001883a 	nop
}
    50f0:	e037883a 	mov	sp,fp
    50f4:	dfc00117 	ldw	ra,4(sp)
    50f8:	df000017 	ldw	fp,0(sp)
    50fc:	dec00204 	addi	sp,sp,8
    5100:	f800283a 	ret

00005104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    5104:	defff604 	addi	sp,sp,-40
    5108:	dfc00915 	stw	ra,36(sp)
    510c:	df000815 	stw	fp,32(sp)
    5110:	df000804 	addi	fp,sp,32
    5114:	e13ffc15 	stw	r4,-16(fp)
    5118:	e17ffd15 	stw	r5,-12(fp)
    511c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    5120:	e0bffc17 	ldw	r2,-16(fp)
    5124:	10800804 	addi	r2,r2,32
    5128:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    512c:	e0bffc17 	ldw	r2,-16(fp)
    5130:	10800804 	addi	r2,r2,32
    5134:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    5138:	e0bffc17 	ldw	r2,-16(fp)
    513c:	10800c03 	ldbu	r2,48(r2)
    5140:	10803fcc 	andi	r2,r2,255
    5144:	10c00168 	cmpgeui	r3,r2,5
    5148:	1801141e 	bne	r3,zero,559c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    514c:	100690ba 	slli	r3,r2,2
    5150:	00800034 	movhi	r2,0
    5154:	10945904 	addi	r2,r2,20836
    5158:	1885883a 	add	r2,r3,r2
    515c:	10800017 	ldw	r2,0(r2)
    5160:	1000683a 	jmp	r2
    5164:	00005178 	rdprs	zero,zero,325
    5168:	000051ac 	andhi	zero,zero,326
    516c:	00005234 	movhi	zero,328
    5170:	000052c8 	cmpgei	zero,zero,331
    5174:	00005334 	movhi	zero,332
                case 0:
                        theBuffer.valueSize = 2;
    5178:	e0bffc17 	ldw	r2,-16(fp)
    517c:	00c00084 	movi	r3,2
    5180:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    5184:	e0bffc17 	ldw	r2,-16(fp)
    5188:	10c00404 	addi	r3,r2,16
    518c:	e0bffc17 	ldw	r2,-16(fp)
    5190:	10800204 	addi	r2,r2,8
    5194:	100b883a 	mov	r5,r2
    5198:	1809883a 	mov	r4,r3
    519c:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    51a0:	e0bffc17 	ldw	r2,-16(fp)
    51a4:	00c00044 	movi	r3,1
    51a8:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    51ac:	e0bffc17 	ldw	r2,-16(fp)
    51b0:	10800404 	addi	r2,r2,16
    51b4:	e1bffe17 	ldw	r6,-8(fp)
    51b8:	e17ffd17 	ldw	r5,-12(fp)
    51bc:	1009883a 	mov	r4,r2
    51c0:	00066f00 	call	66f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    51c4:	1080005c 	xori	r2,r2,1
    51c8:	10803fcc 	andi	r2,r2,255
    51cc:	10000226 	beq	r2,zero,51d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    51d0:	0005883a 	mov	r2,zero
    51d4:	0000f206 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    51d8:	e0bffc17 	ldw	r2,-16(fp)
    51dc:	10c00217 	ldw	r3,8(r2)
    51e0:	1806d23a 	srli	r3,r3,8
    51e4:	10800317 	ldw	r2,12(r2)
    51e8:	10803fcc 	andi	r2,r2,255
    51ec:	1004963a 	slli	r2,r2,24
    51f0:	10c4b03a 	or	r2,r2,r3
    51f4:	10c00003 	ldbu	r3,0(r2)
    51f8:	e0bffc17 	ldw	r2,-16(fp)
    51fc:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    5200:	e0bffc17 	ldw	r2,-16(fp)
    5204:	10c00217 	ldw	r3,8(r2)
    5208:	1806d23a 	srli	r3,r3,8
    520c:	10800317 	ldw	r2,12(r2)
    5210:	10803fcc 	andi	r2,r2,255
    5214:	1004963a 	slli	r2,r2,24
    5218:	10c4b03a 	or	r2,r2,r3
    521c:	10c00043 	ldbu	r3,1(r2)
    5220:	e0bffc17 	ldw	r2,-16(fp)
    5224:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    5228:	e0bffc17 	ldw	r2,-16(fp)
    522c:	00c00084 	movi	r3,2
    5230:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    5234:	e0bffc17 	ldw	r2,-16(fp)
    5238:	10800804 	addi	r2,r2,32
    523c:	10c00084 	addi	r3,r2,2
    5240:	e0bffc17 	ldw	r2,-16(fp)
    5244:	19803fcc 	andi	r6,r3,255
    5248:	11000243 	ldbu	r4,9(r2)
    524c:	2008703a 	and	r4,r4,zero
    5250:	200b883a 	mov	r5,r4
    5254:	3009883a 	mov	r4,r6
    5258:	2908b03a 	or	r4,r5,r4
    525c:	11000245 	stb	r4,9(r2)
    5260:	1808d23a 	srli	r4,r3,8
    5264:	21803fcc 	andi	r6,r4,255
    5268:	11000283 	ldbu	r4,10(r2)
    526c:	2008703a 	and	r4,r4,zero
    5270:	200b883a 	mov	r5,r4
    5274:	3009883a 	mov	r4,r6
    5278:	2908b03a 	or	r4,r5,r4
    527c:	11000285 	stb	r4,10(r2)
    5280:	1808d43a 	srli	r4,r3,16
    5284:	21803fcc 	andi	r6,r4,255
    5288:	110002c3 	ldbu	r4,11(r2)
    528c:	2008703a 	and	r4,r4,zero
    5290:	200b883a 	mov	r5,r4
    5294:	3009883a 	mov	r4,r6
    5298:	2908b03a 	or	r4,r5,r4
    529c:	110002c5 	stb	r4,11(r2)
    52a0:	180ad63a 	srli	r5,r3,24
    52a4:	10c00303 	ldbu	r3,12(r2)
    52a8:	1806703a 	and	r3,r3,zero
    52ac:	1809883a 	mov	r4,r3
    52b0:	2807883a 	mov	r3,r5
    52b4:	20c6b03a 	or	r3,r4,r3
    52b8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    52bc:	e0bffc17 	ldw	r2,-16(fp)
    52c0:	00c000c4 	movi	r3,3
    52c4:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    52c8:	e0bffc17 	ldw	r2,-16(fp)
    52cc:	10800c83 	ldbu	r2,50(r2)
    52d0:	10803fcc 	andi	r2,r2,255
    52d4:	10c00120 	cmpeqi	r3,r2,4
    52d8:	1800021e 	bne	r3,zero,52e4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    52dc:	10800148 	cmpgei	r2,r2,5
    52e0:	00000306 	br	52f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    52e4:	e0bffc17 	ldw	r2,-16(fp)
    52e8:	10000cc5 	stb	zero,51(r2)
                                        break;
    52ec:	00000106 	br	52f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    52f0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    52f4:	e0bffc17 	ldw	r2,-16(fp)
    52f8:	10800c43 	ldbu	r2,49(r2)
    52fc:	10bfff84 	addi	r2,r2,-2
    5300:	1007883a 	mov	r3,r2
    5304:	e0bffc17 	ldw	r2,-16(fp)
    5308:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    530c:	e0bffc17 	ldw	r2,-16(fp)
    5310:	10c00404 	addi	r3,r2,16
    5314:	e0bffc17 	ldw	r2,-16(fp)
    5318:	10800204 	addi	r2,r2,8
    531c:	100b883a 	mov	r5,r2
    5320:	1809883a 	mov	r4,r3
    5324:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    5328:	e0bffc17 	ldw	r2,-16(fp)
    532c:	00c00104 	movi	r3,4
    5330:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    5334:	e0bffc17 	ldw	r2,-16(fp)
    5338:	10800c83 	ldbu	r2,50(r2)
    533c:	10803fcc 	andi	r2,r2,255
    5340:	10c00120 	cmpeqi	r3,r2,4
    5344:	1800141e 	bne	r3,zero,5398 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    5348:	10c00160 	cmpeqi	r3,r2,5
    534c:	1800311e 	bne	r3,zero,5414 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    5350:	108000a0 	cmpeqi	r2,r2,2
    5354:	10005a26 	beq	r2,zero,54c0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    5358:	e0bffc17 	ldw	r2,-16(fp)
    535c:	10800404 	addi	r2,r2,16
    5360:	e1bffe17 	ldw	r6,-8(fp)
    5364:	e17ffd17 	ldw	r5,-12(fp)
    5368:	1009883a 	mov	r4,r2
    536c:	00066f00 	call	66f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5370:	1080005c 	xori	r2,r2,1
    5374:	10803fcc 	andi	r2,r2,255
    5378:	10000226 	beq	r2,zero,5384 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    537c:	0005883a 	mov	r2,zero
    5380:	00008706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    5384:	e0bffa17 	ldw	r2,-24(fp)
    5388:	10c00143 	ldbu	r3,5(r2)
    538c:	e0bffc17 	ldw	r2,-16(fp)
    5390:	10c00d05 	stb	r3,52(r2)
                                        break;
    5394:	00005e06 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    5398:	e0bffc17 	ldw	r2,-16(fp)
    539c:	10800404 	addi	r2,r2,16
    53a0:	e1bffe17 	ldw	r6,-8(fp)
    53a4:	e17ffd17 	ldw	r5,-12(fp)
    53a8:	1009883a 	mov	r4,r2
    53ac:	00066f00 	call	66f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    53b0:	1080005c 	xori	r2,r2,1
    53b4:	10803fcc 	andi	r2,r2,255
    53b8:	10000226 	beq	r2,zero,53c4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    53bc:	0005883a 	mov	r2,zero
    53c0:	00007706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    53c4:	e0bffc17 	ldw	r2,-16(fp)
    53c8:	10800e03 	ldbu	r2,56(r2)
    53cc:	10803fcc 	andi	r2,r2,255
    53d0:	10004c1e 	bne	r2,zero,5504 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    53d4:	e0bffc17 	ldw	r2,-16(fp)
    53d8:	00c00044 	movi	r3,1
    53dc:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    53e0:	e0bffb17 	ldw	r2,-20(fp)
    53e4:	10c00083 	ldbu	r3,2(r2)
    53e8:	e0bffc17 	ldw	r2,-16(fp)
    53ec:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    53f0:	e0bffb17 	ldw	r2,-20(fp)
    53f4:	10c000c3 	ldbu	r3,3(r2)
    53f8:	e0bffc17 	ldw	r2,-16(fp)
    53fc:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    5400:	e0bffb17 	ldw	r2,-20(fp)
    5404:	10c001c3 	ldbu	r3,7(r2)
    5408:	e0bffc17 	ldw	r2,-16(fp)
    540c:	10c00d45 	stb	r3,53(r2)
                                        break;
    5410:	00003f06 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    5414:	e0bffc17 	ldw	r2,-16(fp)
    5418:	10800404 	addi	r2,r2,16
    541c:	e1bffe17 	ldw	r6,-8(fp)
    5420:	e17ffd17 	ldw	r5,-12(fp)
    5424:	1009883a 	mov	r4,r2
    5428:	00066f00 	call	66f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    542c:	1080005c 	xori	r2,r2,1
    5430:	10803fcc 	andi	r2,r2,255
    5434:	10000226 	beq	r2,zero,5440 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5438:	0005883a 	mov	r2,zero
    543c:	00005806 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    5440:	e0bffc17 	ldw	r2,-16(fp)
    5444:	10800cc3 	ldbu	r2,51(r2)
    5448:	10803fcc 	andi	r2,r2,255
    544c:	10002f26 	beq	r2,zero,550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    5450:	e0bffc17 	ldw	r2,-16(fp)
    5454:	10800117 	ldw	r2,4(r2)
    5458:	10002c26 	beq	r2,zero,550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    545c:	e0bffc17 	ldw	r2,-16(fp)
    5460:	10800117 	ldw	r2,4(r2)
    5464:	10800017 	ldw	r2,0(r2)
    5468:	10800017 	ldw	r2,0(r2)
    546c:	e0fffc17 	ldw	r3,-16(fp)
    5470:	1a000117 	ldw	r8,4(r3)
    5474:	e0fffc17 	ldw	r3,-16(fp)
    5478:	18c00d03 	ldbu	r3,52(r3)
    547c:	19403fcc 	andi	r5,r3,255
    5480:	e0fffc17 	ldw	r3,-16(fp)
    5484:	18c00d83 	ldbu	r3,54(r3)
    5488:	19803fcc 	andi	r6,r3,255
    548c:	e0fffc17 	ldw	r3,-16(fp)
    5490:	18c00dc3 	ldbu	r3,55(r3)
    5494:	19c03fcc 	andi	r7,r3,255
    5498:	e0fffc17 	ldw	r3,-16(fp)
    549c:	18c00d43 	ldbu	r3,53(r3)
    54a0:	18c03fcc 	andi	r3,r3,255
    54a4:	e13ffc17 	ldw	r4,-16(fp)
    54a8:	21000804 	addi	r4,r4,32
    54ac:	d9000115 	stw	r4,4(sp)
    54b0:	d8c00015 	stw	r3,0(sp)
    54b4:	4009883a 	mov	r4,r8
    54b8:	103ee83a 	callr	r2
                                        break;
    54bc:	00001306 	br	550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    54c0:	e0bffc17 	ldw	r2,-16(fp)
    54c4:	10c00604 	addi	r3,r2,24
    54c8:	e0bffc17 	ldw	r2,-16(fp)
    54cc:	10800c43 	ldbu	r2,49(r2)
    54d0:	10803fcc 	andi	r2,r2,255
    54d4:	10bfff84 	addi	r2,r2,-2
    54d8:	10bfffcc 	andi	r2,r2,65535
    54dc:	100f883a 	mov	r7,r2
    54e0:	e1bffe17 	ldw	r6,-8(fp)
    54e4:	e17ffd17 	ldw	r5,-12(fp)
    54e8:	1809883a 	mov	r4,r3
    54ec:	00049a00 	call	49a0 <_ZN11ByteSkipper4SkipEPPhPtt>
    54f0:	1080005c 	xori	r2,r2,1
    54f4:	10803fcc 	andi	r2,r2,255
    54f8:	10000526 	beq	r2,zero,5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    54fc:	0005883a 	mov	r2,zero
    5500:	00002706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    5504:	0001883a 	nop
    5508:	00000106 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    550c:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    5510:	e0bffc17 	ldw	r2,-16(fp)
    5514:	10c00804 	addi	r3,r2,32
    5518:	e0bffc17 	ldw	r2,-16(fp)
    551c:	19803fcc 	andi	r6,r3,255
    5520:	11000243 	ldbu	r4,9(r2)
    5524:	2008703a 	and	r4,r4,zero
    5528:	200b883a 	mov	r5,r4
    552c:	3009883a 	mov	r4,r6
    5530:	2908b03a 	or	r4,r5,r4
    5534:	11000245 	stb	r4,9(r2)
    5538:	1808d23a 	srli	r4,r3,8
    553c:	21803fcc 	andi	r6,r4,255
    5540:	11000283 	ldbu	r4,10(r2)
    5544:	2008703a 	and	r4,r4,zero
    5548:	200b883a 	mov	r5,r4
    554c:	3009883a 	mov	r4,r6
    5550:	2908b03a 	or	r4,r5,r4
    5554:	11000285 	stb	r4,10(r2)
    5558:	1808d43a 	srli	r4,r3,16
    555c:	21803fcc 	andi	r6,r4,255
    5560:	110002c3 	ldbu	r4,11(r2)
    5564:	2008703a 	and	r4,r4,zero
    5568:	200b883a 	mov	r5,r4
    556c:	3009883a 	mov	r4,r6
    5570:	2908b03a 	or	r4,r5,r4
    5574:	110002c5 	stb	r4,11(r2)
    5578:	180ad63a 	srli	r5,r3,24
    557c:	10c00303 	ldbu	r3,12(r2)
    5580:	1806703a 	and	r3,r3,zero
    5584:	1809883a 	mov	r4,r3
    5588:	2807883a 	mov	r3,r5
    558c:	20c6b03a 	or	r3,r4,r3
    5590:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    5594:	e0bffc17 	ldw	r2,-16(fp)
    5598:	10000c05 	stb	zero,48(r2)
        }
        return true;
    559c:	00800044 	movi	r2,1
}
    55a0:	e037883a 	mov	sp,fp
    55a4:	dfc00117 	ldw	ra,4(sp)
    55a8:	df000017 	ldw	fp,0(sp)
    55ac:	dec00204 	addi	sp,sp,8
    55b0:	f800283a 	ret

000055b4 <_Z8set_notehhh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 channel, alt_u8 note, alt_u8 vel) {
    55b4:	defffb04 	addi	sp,sp,-20
    55b8:	df000415 	stw	fp,16(sp)
    55bc:	df000404 	addi	fp,sp,16
    55c0:	2807883a 	mov	r3,r5
    55c4:	3005883a 	mov	r2,r6
    55c8:	e13ffd05 	stb	r4,-12(fp)
    55cc:	e0fffe05 	stb	r3,-8(fp)
    55d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(note > 0x7F) {
    55d4:	e0bffe03 	ldbu	r2,-8(fp)
    55d8:	10803fcc 	andi	r2,r2,255
    55dc:	1080201c 	xori	r2,r2,128
    55e0:	10bfe004 	addi	r2,r2,-128
    55e4:	10001816 	blt	r2,zero,5648 <_Z8set_notehhh+0x94>
		return;
	}

	switch (channel) {
    55e8:	e0bffd03 	ldbu	r2,-12(fp)
    55ec:	10000126 	beq	r2,zero,55f4 <_Z8set_notehhh+0x40>
				set_val = 0x80 + vel;
			}
			synth->KEY[note] = set_val;
			break;
		default:
			break;
    55f0:	00001606 	br	564c <_Z8set_notehhh+0x98>
		return;
	}

	switch (channel) {
		case 0:
			if(vel == 0x00) {
    55f4:	e0bfff03 	ldbu	r2,-4(fp)
    55f8:	1000081e 	bne	r2,zero,561c <_Z8set_notehhh+0x68>
				set_val = synth->KEY[note];
    55fc:	d0e00d17 	ldw	r3,-32716(gp)
    5600:	e0bffe03 	ldbu	r2,-8(fp)
    5604:	1085883a 	add	r2,r2,r2
    5608:	1085883a 	add	r2,r2,r2
    560c:	1885883a 	add	r2,r3,r2
    5610:	10800017 	ldw	r2,0(r2)
    5614:	e0bffc15 	stw	r2,-16(fp)
    5618:	00000306 	br	5628 <_Z8set_notehhh+0x74>
			}
			else {
				set_val = 0x80 + vel;
    561c:	e0bfff03 	ldbu	r2,-4(fp)
    5620:	10802004 	addi	r2,r2,128
    5624:	e0bffc15 	stw	r2,-16(fp)
			}
			synth->KEY[note] = set_val;
    5628:	d0e00d17 	ldw	r3,-32716(gp)
    562c:	e0bffe03 	ldbu	r2,-8(fp)
    5630:	1085883a 	add	r2,r2,r2
    5634:	1085883a 	add	r2,r2,r2
    5638:	1885883a 	add	r2,r3,r2
    563c:	e0fffc17 	ldw	r3,-16(fp)
    5640:	10c00015 	stw	r3,0(r2)
			break;
    5644:	00000106 	br	564c <_Z8set_notehhh+0x98>

void set_note(alt_u8 channel, alt_u8 note, alt_u8 vel) {
	alt_u32 set_val;

	if(note > 0x7F) {
		return;
    5648:	0001883a 	nop
			synth->KEY[note] = set_val;
			break;
		default:
			break;
	}
}
    564c:	e037883a 	mov	sp,fp
    5650:	df000017 	ldw	fp,0(sp)
    5654:	dec00104 	addi	sp,sp,4
    5658:	f800283a 	ret

0000565c <_Z8set_ctrlhhm>:

void set_ctrl(alt_u8 channel, alt_u8 par, alt_u32 val) {
    565c:	defffc04 	addi	sp,sp,-16
    5660:	df000315 	stw	fp,12(sp)
    5664:	df000304 	addi	fp,sp,12
    5668:	2007883a 	mov	r3,r4
    566c:	2805883a 	mov	r2,r5
    5670:	e1bfff15 	stw	r6,-4(fp)
    5674:	e0fffd05 	stb	r3,-12(fp)
    5678:	e0bffe05 	stb	r2,-8(fp)
	switch (channel) {
    567c:	e0bffd03 	ldbu	r2,-12(fp)
    5680:	10000126 	beq	r2,zero,5688 <_Z8set_ctrlhhm+0x2c>
		case 0:
			synth->CTRL[par] = val;
			break;
		default:
			break;
    5684:	00000906 	br	56ac <_Z8set_ctrlhhm+0x50>
}

void set_ctrl(alt_u8 channel, alt_u8 par, alt_u32 val) {
	switch (channel) {
		case 0:
			synth->CTRL[par] = val;
    5688:	d0e00d17 	ldw	r3,-32716(gp)
    568c:	e0bffe03 	ldbu	r2,-8(fp)
    5690:	10802004 	addi	r2,r2,128
    5694:	1085883a 	add	r2,r2,r2
    5698:	1085883a 	add	r2,r2,r2
    569c:	1885883a 	add	r2,r3,r2
    56a0:	e0ffff17 	ldw	r3,-4(fp)
    56a4:	10c00015 	stw	r3,0(r2)
			break;
    56a8:	0001883a 	nop
		default:
			break;
	}
}
    56ac:	0001883a 	nop
    56b0:	e037883a 	mov	sp,fp
    56b4:	df000017 	ldw	fp,0(sp)
    56b8:	dec00104 	addi	sp,sp,4
    56bc:	f800283a 	ret

000056c0 <_Z9calc_adsrttttttttff>:

void calc_adsr(alt_u16 att_h, alt_u16 att_l, alt_u16 dec_h, alt_u16 dec_l, alt_u16 sus_h, alt_u16 sus_l, alt_u16 rel_h, alt_u16 rel_l, float peak_att, float peak_sus) {
    56c0:	deffe904 	addi	sp,sp,-92
    56c4:	dfc01615 	stw	ra,88(sp)
    56c8:	df001515 	stw	fp,84(sp)
    56cc:	df001504 	addi	fp,sp,84
    56d0:	2015883a 	mov	r10,r4
    56d4:	2813883a 	mov	r9,r5
    56d8:	3011883a 	mov	r8,r6
    56dc:	380d883a 	mov	r6,r7
    56e0:	e1400217 	ldw	r5,8(fp)
    56e4:	e1000317 	ldw	r4,12(fp)
    56e8:	e0c00417 	ldw	r3,16(fp)
    56ec:	e0800517 	ldw	r2,20(fp)
    56f0:	e2bff80d 	sth	r10,-32(fp)
    56f4:	e27ff90d 	sth	r9,-28(fp)
    56f8:	e23ffa0d 	sth	r8,-24(fp)
    56fc:	e1bffb0d 	sth	r6,-20(fp)
    5700:	e17ffc0d 	sth	r5,-16(fp)
    5704:	e13ffd0d 	sth	r4,-12(fp)
    5708:	e0fffe0d 	sth	r3,-8(fp)
    570c:	e0bfff0d 	sth	r2,-4(fp)

	alt_u16 att_m_seconds = att_h + att_l;
    5710:	e0fff80b 	ldhu	r3,-32(fp)
    5714:	e0bff90b 	ldhu	r2,-28(fp)
    5718:	1885883a 	add	r2,r3,r2
    571c:	e0bff10d 	sth	r2,-60(fp)
	alt_u16 dec_m_seconds = dec_h + dec_l;
    5720:	e0fffa0b 	ldhu	r3,-24(fp)
    5724:	e0bffb0b 	ldhu	r2,-20(fp)
    5728:	1885883a 	add	r2,r3,r2
    572c:	e0bff18d 	sth	r2,-58(fp)
	alt_u16 sus_m_seconds = sus_h + sus_l;
    5730:	e0fffc0b 	ldhu	r3,-16(fp)
    5734:	e0bffd0b 	ldhu	r2,-12(fp)
    5738:	1885883a 	add	r2,r3,r2
    573c:	e0bff20d 	sth	r2,-56(fp)
	alt_u16 rel_m_seconds = rel_h + rel_l;
    5740:	e0fffe0b 	ldhu	r3,-8(fp)
    5744:	e0bfff0b 	ldhu	r2,-4(fp)
    5748:	1885883a 	add	r2,r3,r2
    574c:	e0bff28d 	sth	r2,-54(fp)
	alt_u32 PEAK_ATT, PEAK_SUS, ATT_STEP, DEC_STEP, SUS_STEP, REL_STEP;
	alt_u32 ATT_LEN, DEC_LEN, SUS_LEN, REL_LEN;

	float p_att = peak_att + peak_sus;
    5750:	e1400717 	ldw	r5,28(fp)
    5754:	e1000617 	ldw	r4,24(fp)
    5758:	000d9080 	call	d908 <__addsf3>
    575c:	1007883a 	mov	r3,r2
    5760:	e0fff015 	stw	r3,-64(fp)

	if (p_att > 2) p_att = 2;
    5764:	01500034 	movhi	r5,16384
    5768:	e13ff017 	ldw	r4,-64(fp)
    576c:	000e2100 	call	e210 <__gesf2>
    5770:	0080020e 	bge	zero,r2,577c <_Z9calc_adsrttttttttff+0xbc>
    5774:	00900034 	movhi	r2,16384
    5778:	e0bff015 	stw	r2,-64(fp)

	if (att_m_seconds > 5000) {
    577c:	e0bff10b 	ldhu	r2,-60(fp)
    5780:	1084e270 	cmpltui	r2,r2,5001
    5784:	1000041e 	bne	r2,zero,5798 <_Z9calc_adsrttttttttff+0xd8>
		printf("ERROR: Requested attack length is too long.\n");
    5788:	010000b4 	movhi	r4,2
    578c:	21136204 	addi	r4,r4,19848
    5790:	001003c0 	call	1003c <puts>
		return;
    5794:	00009406 	br	59e8 <_Z9calc_adsrttttttttff+0x328>
	}
	if (dec_m_seconds > 5000) {
    5798:	e0bff18b 	ldhu	r2,-58(fp)
    579c:	1084e270 	cmpltui	r2,r2,5001
    57a0:	1000041e 	bne	r2,zero,57b4 <_Z9calc_adsrttttttttff+0xf4>
		printf("ERROR: Requested decay length is too long.\n");
    57a4:	010000b4 	movhi	r4,2
    57a8:	21136d04 	addi	r4,r4,19892
    57ac:	001003c0 	call	1003c <puts>
		return;
    57b0:	00008d06 	br	59e8 <_Z9calc_adsrttttttttff+0x328>
	}
	if (sus_m_seconds > 20000) {
    57b4:	e0bff20b 	ldhu	r2,-56(fp)
    57b8:	10938870 	cmpltui	r2,r2,20001
    57bc:	1000041e 	bne	r2,zero,57d0 <_Z9calc_adsrttttttttff+0x110>
		printf("ERROR: Requested sustain length is too long.\n");
    57c0:	010000b4 	movhi	r4,2
    57c4:	21137804 	addi	r4,r4,19936
    57c8:	001003c0 	call	1003c <puts>
		return;
    57cc:	00008606 	br	59e8 <_Z9calc_adsrttttttttff+0x328>
	}
	if (sus_m_seconds < rel_m_seconds) {
    57d0:	e0fff20b 	ldhu	r3,-56(fp)
    57d4:	e0bff28b 	ldhu	r2,-54(fp)
    57d8:	1880042e 	bgeu	r3,r2,57ec <_Z9calc_adsrttttttttff+0x12c>
		printf("ERROR: Requested sustain length must be longer than release length.\n");
    57dc:	010000b4 	movhi	r4,2
    57e0:	21138404 	addi	r4,r4,19984
    57e4:	001003c0 	call	1003c <puts>
		return;
    57e8:	00007f06 	br	59e8 <_Z9calc_adsrttttttttff+0x328>
	}
	if (rel_m_seconds > 10000) {
    57ec:	e0bff28b 	ldhu	r2,-54(fp)
    57f0:	1089c470 	cmpltui	r2,r2,10001
    57f4:	1000041e 	bne	r2,zero,5808 <_Z9calc_adsrttttttttff+0x148>
		printf("ERROR: Requested release length is too long.\n");
    57f8:	010000b4 	movhi	r4,2
    57fc:	21139504 	addi	r4,r4,20052
    5800:	001003c0 	call	1003c <puts>
		return;
    5804:	00007806 	br	59e8 <_Z9calc_adsrttttttttff+0x328>
	}

	PEAK_ATT = p_att * (alt_u32) 0x80000;
    5808:	01524034 	movhi	r5,18688
    580c:	e13ff017 	ldw	r4,-64(fp)
    5810:	000e2cc0 	call	e2cc <__mulsf3>
    5814:	1007883a 	mov	r3,r2
    5818:	1805883a 	mov	r2,r3
    581c:	1009883a 	mov	r4,r2
    5820:	000d6cc0 	call	d6cc <__fixunssfsi>
    5824:	e0bfeb15 	stw	r2,-84(fp)
	if(peak_att + peak_sus >= 2) PEAK_ATT = 0xFFFFF;
    5828:	e1400717 	ldw	r5,28(fp)
    582c:	e1000617 	ldw	r4,24(fp)
    5830:	000d9080 	call	d908 <__addsf3>
    5834:	1007883a 	mov	r3,r2
    5838:	1805883a 	mov	r2,r3
    583c:	01500034 	movhi	r5,16384
    5840:	1009883a 	mov	r4,r2
    5844:	000e2100 	call	e210 <__gesf2>
    5848:	10000316 	blt	r2,zero,5858 <_Z9calc_adsrttttttttff+0x198>
    584c:	00800434 	movhi	r2,16
    5850:	10bfffc4 	addi	r2,r2,-1
    5854:	e0bfeb15 	stw	r2,-84(fp)
	PEAK_SUS = peak_sus * (alt_u32) 0x80000;
    5858:	01524034 	movhi	r5,18688
    585c:	e1000717 	ldw	r4,28(fp)
    5860:	000e2cc0 	call	e2cc <__mulsf3>
    5864:	1007883a 	mov	r3,r2
    5868:	1805883a 	mov	r2,r3
    586c:	1009883a 	mov	r4,r2
    5870:	000d6cc0 	call	d6cc <__fixunssfsi>
    5874:	e0bff315 	stw	r2,-52(fp)
	ATT_LEN = (att_m_seconds * F_S) / 1000;
    5878:	e0bff10b 	ldhu	r2,-60(fp)
    587c:	016b1114 	movui	r5,44100
    5880:	1009883a 	mov	r4,r2
    5884:	000d8e00 	call	d8e0 <__mulsi3>
    5888:	0140fa04 	movi	r5,1000
    588c:	1009883a 	mov	r4,r2
    5890:	000d72c0 	call	d72c <__divsi3>
    5894:	e0bfec15 	stw	r2,-80(fp)
	if(!ATT_LEN) ATT_LEN = 1;
    5898:	e0bfec17 	ldw	r2,-80(fp)
    589c:	1000021e 	bne	r2,zero,58a8 <_Z9calc_adsrttttttttff+0x1e8>
    58a0:	00800044 	movi	r2,1
    58a4:	e0bfec15 	stw	r2,-80(fp)
	ATT_STEP = PEAK_ATT / ATT_LEN;
    58a8:	e17fec17 	ldw	r5,-80(fp)
    58ac:	e13feb17 	ldw	r4,-84(fp)
    58b0:	000d8240 	call	d824 <__udivsi3>
    58b4:	e0bff415 	stw	r2,-48(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
    58b8:	e0bff18b 	ldhu	r2,-58(fp)
    58bc:	016b1114 	movui	r5,44100
    58c0:	1009883a 	mov	r4,r2
    58c4:	000d8e00 	call	d8e0 <__mulsi3>
    58c8:	0140fa04 	movi	r5,1000
    58cc:	1009883a 	mov	r4,r2
    58d0:	000d72c0 	call	d72c <__divsi3>
    58d4:	e0bfed15 	stw	r2,-76(fp)
	if(!DEC_LEN) DEC_LEN = 1;
    58d8:	e0bfed17 	ldw	r2,-76(fp)
    58dc:	1000021e 	bne	r2,zero,58e8 <_Z9calc_adsrttttttttff+0x228>
    58e0:	00800044 	movi	r2,1
    58e4:	e0bfed15 	stw	r2,-76(fp)
	DEC_STEP = (PEAK_ATT - PEAK_SUS) / DEC_LEN;
    58e8:	e0ffeb17 	ldw	r3,-84(fp)
    58ec:	e0bff317 	ldw	r2,-52(fp)
    58f0:	1885c83a 	sub	r2,r3,r2
    58f4:	e17fed17 	ldw	r5,-76(fp)
    58f8:	1009883a 	mov	r4,r2
    58fc:	000d8240 	call	d824 <__udivsi3>
    5900:	e0bff515 	stw	r2,-44(fp)
	SUS_LEN = (sus_m_seconds * F_S) / 1000;
    5904:	e0bff20b 	ldhu	r2,-56(fp)
    5908:	016b1114 	movui	r5,44100
    590c:	1009883a 	mov	r4,r2
    5910:	000d8e00 	call	d8e0 <__mulsi3>
    5914:	0140fa04 	movi	r5,1000
    5918:	1009883a 	mov	r4,r2
    591c:	000d72c0 	call	d72c <__divsi3>
    5920:	e0bfee15 	stw	r2,-72(fp)
	if(!SUS_LEN) SUS_LEN = 1;
    5924:	e0bfee17 	ldw	r2,-72(fp)
    5928:	1000021e 	bne	r2,zero,5934 <_Z9calc_adsrttttttttff+0x274>
    592c:	00800044 	movi	r2,1
    5930:	e0bfee15 	stw	r2,-72(fp)
	SUS_STEP = PEAK_SUS / SUS_LEN;
    5934:	e17fee17 	ldw	r5,-72(fp)
    5938:	e13ff317 	ldw	r4,-52(fp)
    593c:	000d8240 	call	d824 <__udivsi3>
    5940:	e0bff615 	stw	r2,-40(fp)
	REL_LEN = (rel_m_seconds * F_S) / 1000;
    5944:	e0bff28b 	ldhu	r2,-54(fp)
    5948:	016b1114 	movui	r5,44100
    594c:	1009883a 	mov	r4,r2
    5950:	000d8e00 	call	d8e0 <__mulsi3>
    5954:	0140fa04 	movi	r5,1000
    5958:	1009883a 	mov	r4,r2
    595c:	000d72c0 	call	d72c <__divsi3>
    5960:	e0bfef15 	stw	r2,-68(fp)
	if(!REL_LEN) REL_LEN = 1;
    5964:	e0bfef17 	ldw	r2,-68(fp)
    5968:	1000021e 	bne	r2,zero,5974 <_Z9calc_adsrttttttttff+0x2b4>
    596c:	00800044 	movi	r2,1
    5970:	e0bfef15 	stw	r2,-68(fp)
	REL_STEP = PEAK_SUS / REL_LEN;
    5974:	e17fef17 	ldw	r5,-68(fp)
    5978:	e13ff317 	ldw	r4,-52(fp)
    597c:	000d8240 	call	d824 <__udivsi3>
    5980:	e0bff715 	stw	r2,-36(fp)

	set_ctrl(0, PEAK_A, PEAK_ATT);
    5984:	e1bfeb17 	ldw	r6,-84(fp)
    5988:	000b883a 	mov	r5,zero
    598c:	0009883a 	mov	r4,zero
    5990:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, ATT_S, ATT_STEP);
    5994:	e1bff417 	ldw	r6,-48(fp)
    5998:	01400044 	movi	r5,1
    599c:	0009883a 	mov	r4,zero
    59a0:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, DEC_S, DEC_STEP);
    59a4:	e1bff517 	ldw	r6,-44(fp)
    59a8:	01400084 	movi	r5,2
    59ac:	0009883a 	mov	r4,zero
    59b0:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, PEAK_S, PEAK_SUS);
    59b4:	e1bff317 	ldw	r6,-52(fp)
    59b8:	014000c4 	movi	r5,3
    59bc:	0009883a 	mov	r4,zero
    59c0:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, SUS_S, SUS_STEP);
    59c4:	e1bff617 	ldw	r6,-40(fp)
    59c8:	01400104 	movi	r5,4
    59cc:	0009883a 	mov	r4,zero
    59d0:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, REL_S, REL_STEP);
    59d4:	e1bff717 	ldw	r6,-36(fp)
    59d8:	01400144 	movi	r5,5
    59dc:	0009883a 	mov	r4,zero
    59e0:	000565c0 	call	565c <_Z8set_ctrlhhm>
	return;
    59e4:	0001883a 	nop
}
    59e8:	e037883a 	mov	sp,fp
    59ec:	dfc00117 	ldw	ra,4(sp)
    59f0:	df000017 	ldw	fp,0(sp)
    59f4:	dec00204 	addi	sp,sp,8
    59f8:	f800283a 	ret

000059fc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    59fc:	defff904 	addi	sp,sp,-28
    5a00:	dfc00615 	stw	ra,24(sp)
    5a04:	df000515 	stw	fp,20(sp)
    5a08:	df000504 	addi	fp,sp,20
    5a0c:	e13ffc15 	stw	r4,-16(fp)
    5a10:	e17ffd15 	stw	r5,-12(fp)
    5a14:	3007883a 	mov	r3,r6
    5a18:	3805883a 	mov	r2,r7
    5a1c:	e0fffe05 	stb	r3,-8(fp)
    5a20:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    5a24:	e0800217 	ldw	r2,8(fp)
    5a28:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    5a2c:	e0bffc17 	ldw	r2,-16(fp)
    5a30:	10800117 	ldw	r2,4(r2)
    5a34:	1080004c 	andi	r2,r2,1
    5a38:	1007883a 	mov	r3,r2
    5a3c:	e0bffb17 	ldw	r2,-20(fp)
    5a40:	10800003 	ldbu	r2,0(r2)
    5a44:	1080004c 	andi	r2,r2,1
    5a48:	18c03fcc 	andi	r3,r3,255
    5a4c:	10803fcc 	andi	r2,r2,255
    5a50:	18801426 	beq	r3,r2,5aa4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    5a54:	e0bffb17 	ldw	r2,-20(fp)
    5a58:	10800003 	ldbu	r2,0(r2)
    5a5c:	1080004c 	andi	r2,r2,1
    5a60:	10803fcc 	andi	r2,r2,255
    5a64:	10000826 	beq	r2,zero,5a88 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    5a68:	e0bffc17 	ldw	r2,-16(fp)
    5a6c:	10800017 	ldw	r2,0(r2)
    5a70:	10800304 	addi	r2,r2,12
    5a74:	10800017 	ldw	r2,0(r2)
    5a78:	e17ffb17 	ldw	r5,-20(fp)
    5a7c:	e13ffc17 	ldw	r4,-16(fp)
    5a80:	103ee83a 	callr	r2
    5a84:	00000706 	br	5aa4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    5a88:	e0bffc17 	ldw	r2,-16(fp)
    5a8c:	10800017 	ldw	r2,0(r2)
    5a90:	10800204 	addi	r2,r2,8
    5a94:	10800017 	ldw	r2,0(r2)
    5a98:	e17ffb17 	ldw	r5,-20(fp)
    5a9c:	e13ffc17 	ldw	r4,-16(fp)
    5aa0:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    5aa4:	e0bffc17 	ldw	r2,-16(fp)
    5aa8:	10800117 	ldw	r2,4(r2)
    5aac:	1004d07a 	srli	r2,r2,1
    5ab0:	1080004c 	andi	r2,r2,1
    5ab4:	1007883a 	mov	r3,r2
    5ab8:	e0bffb17 	ldw	r2,-20(fp)
    5abc:	10800003 	ldbu	r2,0(r2)
    5ac0:	1004d07a 	srli	r2,r2,1
    5ac4:	1080004c 	andi	r2,r2,1
    5ac8:	18c03fcc 	andi	r3,r3,255
    5acc:	10803fcc 	andi	r2,r2,255
    5ad0:	18801426 	beq	r3,r2,5b24 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    5ad4:	e0bffb17 	ldw	r2,-20(fp)
    5ad8:	10800003 	ldbu	r2,0(r2)
    5adc:	1080008c 	andi	r2,r2,2
    5ae0:	10803fcc 	andi	r2,r2,255
    5ae4:	10000826 	beq	r2,zero,5b08 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    5ae8:	e0bffc17 	ldw	r2,-16(fp)
    5aec:	10800017 	ldw	r2,0(r2)
    5af0:	10800504 	addi	r2,r2,20
    5af4:	10800017 	ldw	r2,0(r2)
    5af8:	e17ffb17 	ldw	r5,-20(fp)
    5afc:	e13ffc17 	ldw	r4,-16(fp)
    5b00:	103ee83a 	callr	r2
    5b04:	00000706 	br	5b24 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    5b08:	e0bffc17 	ldw	r2,-16(fp)
    5b0c:	10800017 	ldw	r2,0(r2)
    5b10:	10800404 	addi	r2,r2,16
    5b14:	10800017 	ldw	r2,0(r2)
    5b18:	e17ffb17 	ldw	r5,-20(fp)
    5b1c:	e13ffc17 	ldw	r4,-16(fp)
    5b20:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    5b24:	e0bffc17 	ldw	r2,-16(fp)
    5b28:	10800117 	ldw	r2,4(r2)
    5b2c:	1004d0ba 	srli	r2,r2,2
    5b30:	1080004c 	andi	r2,r2,1
    5b34:	1007883a 	mov	r3,r2
    5b38:	e0bffb17 	ldw	r2,-20(fp)
    5b3c:	10800003 	ldbu	r2,0(r2)
    5b40:	1004d0ba 	srli	r2,r2,2
    5b44:	1080004c 	andi	r2,r2,1
    5b48:	18c03fcc 	andi	r3,r3,255
    5b4c:	10803fcc 	andi	r2,r2,255
    5b50:	18801426 	beq	r3,r2,5ba4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    5b54:	e0bffb17 	ldw	r2,-20(fp)
    5b58:	10800003 	ldbu	r2,0(r2)
    5b5c:	1080010c 	andi	r2,r2,4
    5b60:	10803fcc 	andi	r2,r2,255
    5b64:	10000826 	beq	r2,zero,5b88 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    5b68:	e0bffc17 	ldw	r2,-16(fp)
    5b6c:	10800017 	ldw	r2,0(r2)
    5b70:	10800704 	addi	r2,r2,28
    5b74:	10800017 	ldw	r2,0(r2)
    5b78:	e17ffb17 	ldw	r5,-20(fp)
    5b7c:	e13ffc17 	ldw	r4,-16(fp)
    5b80:	103ee83a 	callr	r2
    5b84:	00000706 	br	5ba4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    5b88:	e0bffc17 	ldw	r2,-16(fp)
    5b8c:	10800017 	ldw	r2,0(r2)
    5b90:	10800604 	addi	r2,r2,24
    5b94:	10800017 	ldw	r2,0(r2)
    5b98:	e17ffb17 	ldw	r5,-20(fp)
    5b9c:	e13ffc17 	ldw	r4,-16(fp)
    5ba0:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    5ba4:	e0bffb17 	ldw	r2,-20(fp)
    5ba8:	10800043 	ldbu	r2,1(r2)
    5bac:	10803fcc 	andi	r2,r2,255
    5bb0:	1080201c 	xori	r2,r2,128
    5bb4:	10bfe004 	addi	r2,r2,-128
    5bb8:	1000061e 	bne	r2,zero,5bd4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    5bbc:	e0bffb17 	ldw	r2,-20(fp)
    5bc0:	10800083 	ldbu	r2,2(r2)
    5bc4:	10803fcc 	andi	r2,r2,255
    5bc8:	1080201c 	xori	r2,r2,128
    5bcc:	10bfe004 	addi	r2,r2,-128
    5bd0:	10000726 	beq	r2,zero,5bf0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    5bd4:	e0bffc17 	ldw	r2,-16(fp)
    5bd8:	10800017 	ldw	r2,0(r2)
    5bdc:	10800104 	addi	r2,r2,4
    5be0:	10800017 	ldw	r2,0(r2)
    5be4:	e17ffb17 	ldw	r5,-20(fp)
    5be8:	e13ffc17 	ldw	r4,-16(fp)
    5bec:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    5bf0:	e0800217 	ldw	r2,8(fp)
    5bf4:	10c00003 	ldbu	r3,0(r2)
    5bf8:	e0bffc17 	ldw	r2,-16(fp)
    5bfc:	10c00105 	stb	r3,4(r2)
#endif

};
    5c00:	0001883a 	nop
    5c04:	e037883a 	mov	sp,fp
    5c08:	dfc00117 	ldw	ra,4(sp)
    5c0c:	df000017 	ldw	fp,0(sp)
    5c10:	dec00204 	addi	sp,sp,8
    5c14:	f800283a 	ret

00005c18 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5c18:	defff804 	addi	sp,sp,-32
    5c1c:	dfc00715 	stw	ra,28(sp)
    5c20:	df000615 	stw	fp,24(sp)
    5c24:	df000604 	addi	fp,sp,24
    5c28:	e13ffc15 	stw	r4,-16(fp)
    5c2c:	e17ffd15 	stw	r5,-12(fp)
    5c30:	3007883a 	mov	r3,r6
    5c34:	3805883a 	mov	r2,r7
    5c38:	e0fffe05 	stb	r3,-8(fp)
    5c3c:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    5c40:	e0800217 	ldw	r2,8(fp)
    5c44:	10800084 	addi	r2,r2,2
    5c48:	10800003 	ldbu	r2,0(r2)
    5c4c:	10803fcc 	andi	r2,r2,255
    5c50:	10800058 	cmpnei	r2,r2,1
    5c54:	10009926 	beq	r2,zero,5ebc <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    5c58:	e0bffc17 	ldw	r2,-16(fp)
    5c5c:	10c00103 	ldbu	r3,4(r2)
    5c60:	e0800217 	ldw	r2,8(fp)
    5c64:	10800003 	ldbu	r2,0(r2)
    5c68:	18c03fcc 	andi	r3,r3,255
    5c6c:	10803fcc 	andi	r2,r2,255
    5c70:	18800e26 	beq	r3,r2,5cac <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    5c74:	e0bffc17 	ldw	r2,-16(fp)
    5c78:	10800017 	ldw	r2,0(r2)
    5c7c:	10800204 	addi	r2,r2,8
    5c80:	10800017 	ldw	r2,0(r2)
    5c84:	e0fffc17 	ldw	r3,-16(fp)
    5c88:	18c00103 	ldbu	r3,4(r3)
    5c8c:	19003fcc 	andi	r4,r3,255
    5c90:	e0c00217 	ldw	r3,8(fp)
    5c94:	18c00003 	ldbu	r3,0(r3)
    5c98:	18c03fcc 	andi	r3,r3,255
    5c9c:	180d883a 	mov	r6,r3
    5ca0:	200b883a 	mov	r5,r4
    5ca4:	e13ffc17 	ldw	r4,-16(fp)
    5ca8:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    5cac:	00800084 	movi	r2,2
    5cb0:	e0bffa05 	stb	r2,-24(fp)
    5cb4:	e0bffa03 	ldbu	r2,-24(fp)
    5cb8:	10800228 	cmpgeui	r2,r2,8
    5cbc:	10006e1e 	bne	r2,zero,5e78 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    5cc0:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    5cc4:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    5cc8:	00800084 	movi	r2,2
    5ccc:	e0bffac5 	stb	r2,-21(fp)
    5cd0:	e0bffac3 	ldbu	r2,-21(fp)
    5cd4:	10800228 	cmpgeui	r2,r2,8
    5cd8:	10002f1e 	bne	r2,zero,5d98 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    5cdc:	e0bffa03 	ldbu	r2,-24(fp)
    5ce0:	e0c00217 	ldw	r3,8(fp)
    5ce4:	1885883a 	add	r2,r3,r2
    5ce8:	11000003 	ldbu	r4,0(r2)
    5cec:	e0bffac3 	ldbu	r2,-21(fp)
    5cf0:	e0fffc17 	ldw	r3,-16(fp)
    5cf4:	1885883a 	add	r2,r3,r2
    5cf8:	10800104 	addi	r2,r2,4
    5cfc:	10800003 	ldbu	r2,0(r2)
    5d00:	20c03fcc 	andi	r3,r4,255
    5d04:	10803fcc 	andi	r2,r2,255
    5d08:	1880091e 	bne	r3,r2,5d30 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    5d0c:	e0bffa03 	ldbu	r2,-24(fp)
    5d10:	e0c00217 	ldw	r3,8(fp)
    5d14:	1885883a 	add	r2,r3,r2
    5d18:	10800003 	ldbu	r2,0(r2)
    5d1c:	10803fcc 	andi	r2,r2,255
    5d20:	10800060 	cmpeqi	r2,r2,1
    5d24:	1000021e 	bne	r2,zero,5d30 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    5d28:	00800044 	movi	r2,1
    5d2c:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    5d30:	e0bffac3 	ldbu	r2,-21(fp)
    5d34:	e0c00217 	ldw	r3,8(fp)
    5d38:	1885883a 	add	r2,r3,r2
    5d3c:	11000003 	ldbu	r4,0(r2)
    5d40:	e0bffa03 	ldbu	r2,-24(fp)
    5d44:	e0fffc17 	ldw	r3,-16(fp)
    5d48:	1885883a 	add	r2,r3,r2
    5d4c:	10800104 	addi	r2,r2,4
    5d50:	10800003 	ldbu	r2,0(r2)
    5d54:	20c03fcc 	andi	r3,r4,255
    5d58:	10803fcc 	andi	r2,r2,255
    5d5c:	18800a1e 	bne	r3,r2,5d88 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    5d60:	e0bffa03 	ldbu	r2,-24(fp)
    5d64:	e0fffc17 	ldw	r3,-16(fp)
    5d68:	1885883a 	add	r2,r3,r2
    5d6c:	10800104 	addi	r2,r2,4
    5d70:	10800003 	ldbu	r2,0(r2)
    5d74:	10803fcc 	andi	r2,r2,255
    5d78:	10800060 	cmpeqi	r2,r2,1
    5d7c:	1000021e 	bne	r2,zero,5d88 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    5d80:	00800044 	movi	r2,1
    5d84:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    5d88:	e0bffac3 	ldbu	r2,-21(fp)
    5d8c:	10800044 	addi	r2,r2,1
    5d90:	e0bffac5 	stb	r2,-21(fp)
    5d94:	003fce06 	br	5cd0 <__alt_data_end+0xfc005cd0>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    5d98:	e0bffa43 	ldbu	r2,-23(fp)
    5d9c:	1080005c 	xori	r2,r2,1
    5da0:	10803fcc 	andi	r2,r2,255
    5da4:	10001c26 	beq	r2,zero,5e18 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    5da8:	e0bffc17 	ldw	r2,-16(fp)
    5dac:	10800017 	ldw	r2,0(r2)
    5db0:	10800104 	addi	r2,r2,4
    5db4:	10800017 	ldw	r2,0(r2)
    5db8:	e0fffa03 	ldbu	r3,-24(fp)
    5dbc:	e1000217 	ldw	r4,8(fp)
    5dc0:	20c7883a 	add	r3,r4,r3
    5dc4:	18c00003 	ldbu	r3,0(r3)
    5dc8:	18c03fcc 	andi	r3,r3,255
    5dcc:	180d883a 	mov	r6,r3
    5dd0:	e17ffd17 	ldw	r5,-12(fp)
    5dd4:	e13ffc17 	ldw	r4,-16(fp)
    5dd8:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    5ddc:	e0bffc17 	ldw	r2,-16(fp)
    5de0:	10800017 	ldw	r2,0(r2)
    5de4:	10800304 	addi	r2,r2,12
    5de8:	10800017 	ldw	r2,0(r2)
    5dec:	e0c00217 	ldw	r3,8(fp)
    5df0:	18c00003 	ldbu	r3,0(r3)
    5df4:	19403fcc 	andi	r5,r3,255
    5df8:	e0fffa03 	ldbu	r3,-24(fp)
    5dfc:	e1000217 	ldw	r4,8(fp)
    5e00:	20c7883a 	add	r3,r4,r3
    5e04:	18c00003 	ldbu	r3,0(r3)
    5e08:	18c03fcc 	andi	r3,r3,255
    5e0c:	180d883a 	mov	r6,r3
    5e10:	e13ffc17 	ldw	r4,-16(fp)
    5e14:	103ee83a 	callr	r2
                }
                if (!up)
    5e18:	e0bffa83 	ldbu	r2,-22(fp)
    5e1c:	1080005c 	xori	r2,r2,1
    5e20:	10803fcc 	andi	r2,r2,255
    5e24:	10001026 	beq	r2,zero,5e68 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    5e28:	e0bffc17 	ldw	r2,-16(fp)
    5e2c:	10800017 	ldw	r2,0(r2)
    5e30:	10800404 	addi	r2,r2,16
    5e34:	10800017 	ldw	r2,0(r2)
    5e38:	e0fffc17 	ldw	r3,-16(fp)
    5e3c:	18c00103 	ldbu	r3,4(r3)
    5e40:	19403fcc 	andi	r5,r3,255
    5e44:	e0fffa03 	ldbu	r3,-24(fp)
    5e48:	e13ffc17 	ldw	r4,-16(fp)
    5e4c:	20c7883a 	add	r3,r4,r3
    5e50:	18c00104 	addi	r3,r3,4
    5e54:	18c00003 	ldbu	r3,0(r3)
    5e58:	18c03fcc 	andi	r3,r3,255
    5e5c:	180d883a 	mov	r6,r3
    5e60:	e13ffc17 	ldw	r4,-16(fp)
    5e64:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    5e68:	e0bffa03 	ldbu	r2,-24(fp)
    5e6c:	10800044 	addi	r2,r2,1
    5e70:	e0bffa05 	stb	r2,-24(fp)
    5e74:	003f8f06 	br	5cb4 <__alt_data_end+0xfc005cb4>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5e78:	e03ffb05 	stb	zero,-20(fp)
    5e7c:	e0bffb03 	ldbu	r2,-20(fp)
    5e80:	10800228 	cmpgeui	r2,r2,8
    5e84:	10000e1e 	bne	r2,zero,5ec0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    5e88:	e0bffb03 	ldbu	r2,-20(fp)
    5e8c:	e0fffb03 	ldbu	r3,-20(fp)
    5e90:	e1000217 	ldw	r4,8(fp)
    5e94:	20c7883a 	add	r3,r4,r3
    5e98:	18c00003 	ldbu	r3,0(r3)
    5e9c:	e13ffc17 	ldw	r4,-16(fp)
    5ea0:	2085883a 	add	r2,r4,r2
    5ea4:	10800104 	addi	r2,r2,4
    5ea8:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5eac:	e0bffb03 	ldbu	r2,-20(fp)
    5eb0:	10800044 	addi	r2,r2,1
    5eb4:	e0bffb05 	stb	r2,-20(fp)
    5eb8:	003ff006 	br	5e7c <__alt_data_end+0xfc005e7c>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5ebc:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5ec0:	e037883a 	mov	sp,fp
    5ec4:	dfc00117 	ldw	ra,4(sp)
    5ec8:	df000017 	ldw	fp,0(sp)
    5ecc:	dec00204 	addi	sp,sp,8
    5ed0:	f800283a 	ret

00005ed4 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5ed4:	defffa04 	addi	sp,sp,-24
    5ed8:	dfc00515 	stw	ra,20(sp)
    5edc:	df000415 	stw	fp,16(sp)
    5ee0:	df000404 	addi	fp,sp,16
    5ee4:	e13ffd15 	stw	r4,-12(fp)
    5ee8:	2807883a 	mov	r3,r5
    5eec:	3005883a 	mov	r2,r6
    5ef0:	e0fffe05 	stb	r3,-8(fp)
    5ef4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5ef8:	e0bffe03 	ldbu	r2,-8(fp)
    5efc:	1080088c 	andi	r2,r2,34
    5f00:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5f04:	e0bfff03 	ldbu	r2,-4(fp)
    5f08:	10800130 	cmpltui	r2,r2,4
    5f0c:	1000151e 	bne	r2,zero,5f64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5f10:	e0bfff03 	ldbu	r2,-4(fp)
    5f14:	108007a8 	cmpgeui	r2,r2,30
    5f18:	1000121e 	bne	r2,zero,5f64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5f1c:	e0bffd17 	ldw	r2,-12(fp)
    5f20:	10800317 	ldw	r2,12(r2)
    5f24:	1080008c 	andi	r2,r2,2
    5f28:	1000021e 	bne	r2,zero,5f34 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5f2c:	e0bffc03 	ldbu	r2,-16(fp)
    5f30:	1000061e 	bne	r2,zero,5f4c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5f34:	e0bffd17 	ldw	r2,-12(fp)
    5f38:	10800317 	ldw	r2,12(r2)
    5f3c:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5f40:	10000526 	beq	r2,zero,5f58 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5f44:	e0bffc03 	ldbu	r2,-16(fp)
    5f48:	1000031e 	bne	r2,zero,5f58 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5f4c:	e0bfff03 	ldbu	r2,-4(fp)
    5f50:	10800f44 	addi	r2,r2,61
    5f54:	00008006 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5f58:	e0bfff03 	ldbu	r2,-4(fp)
    5f5c:	10801744 	addi	r2,r2,93
    5f60:	00007d06 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5f64:	e0bfff03 	ldbu	r2,-4(fp)
    5f68:	108007b0 	cmpltui	r2,r2,30
    5f6c:	1000191e 	bne	r2,zero,5fd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5f70:	e0bfff03 	ldbu	r2,-4(fp)
    5f74:	10800a28 	cmpgeui	r2,r2,40
    5f78:	1000161e 	bne	r2,zero,5fd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5f7c:	e0bffc03 	ldbu	r2,-16(fp)
    5f80:	10000c26 	beq	r2,zero,5fb4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5f84:	e0bffd17 	ldw	r2,-12(fp)
    5f88:	10800017 	ldw	r2,0(r2)
    5f8c:	10800504 	addi	r2,r2,20
    5f90:	10800017 	ldw	r2,0(r2)
    5f94:	e13ffd17 	ldw	r4,-12(fp)
    5f98:	103ee83a 	callr	r2
    5f9c:	1007883a 	mov	r3,r2
    5fa0:	e0bfff03 	ldbu	r2,-4(fp)
    5fa4:	10bff884 	addi	r2,r2,-30
    5fa8:	1885883a 	add	r2,r3,r2
    5fac:	10800003 	ldbu	r2,0(r2)
    5fb0:	00006906 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5fb4:	e0bfff03 	ldbu	r2,-4(fp)
    5fb8:	108009e0 	cmpeqi	r2,r2,39
    5fbc:	1000031e 	bne	r2,zero,5fcc <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5fc0:	e0bfff03 	ldbu	r2,-4(fp)
    5fc4:	108004c4 	addi	r2,r2,19
    5fc8:	00006306 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5fcc:	00800c04 	movi	r2,48
    5fd0:	00006106 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5fd4:	e0bfff03 	ldbu	r2,-4(fp)
    5fd8:	10801670 	cmpltui	r2,r2,89
    5fdc:	10000a1e 	bne	r2,zero,6008 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5fe0:	e0bfff03 	ldbu	r2,-4(fp)
    5fe4:	108018a8 	cmpgeui	r2,r2,98
    5fe8:	1000071e 	bne	r2,zero,6008 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5fec:	e0bffd17 	ldw	r2,-12(fp)
    5ff0:	10800317 	ldw	r2,12(r2)
    5ff4:	1080004c 	andi	r2,r2,1
    5ff8:	10005626 	beq	r2,zero,6154 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5ffc:	e0bfff03 	ldbu	r2,-4(fp)
    6000:	10bff604 	addi	r2,r2,-40
    6004:	00005406 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    6008:	e0bfff03 	ldbu	r2,-4(fp)
    600c:	10800b70 	cmpltui	r2,r2,45
    6010:	10001d1e 	bne	r2,zero,6088 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    6014:	e0bfff03 	ldbu	r2,-4(fp)
    6018:	10800e68 	cmpgeui	r2,r2,57
    601c:	10001a1e 	bne	r2,zero,6088 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    6020:	e0bffc03 	ldbu	r2,-16(fp)
    6024:	10000c26 	beq	r2,zero,6058 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    6028:	e0bffd17 	ldw	r2,-12(fp)
    602c:	10800017 	ldw	r2,0(r2)
    6030:	10800604 	addi	r2,r2,24
    6034:	10800017 	ldw	r2,0(r2)
    6038:	e13ffd17 	ldw	r4,-12(fp)
    603c:	103ee83a 	callr	r2
    6040:	1007883a 	mov	r3,r2
    6044:	e0bfff03 	ldbu	r2,-4(fp)
    6048:	10bff4c4 	addi	r2,r2,-45
    604c:	1885883a 	add	r2,r3,r2
    6050:	10800003 	ldbu	r2,0(r2)
    6054:	00004006 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6058:	e0bffd17 	ldw	r2,-12(fp)
    605c:	10800017 	ldw	r2,0(r2)
    6060:	10800704 	addi	r2,r2,28
    6064:	10800017 	ldw	r2,0(r2)
    6068:	e13ffd17 	ldw	r4,-12(fp)
    606c:	103ee83a 	callr	r2
    6070:	1007883a 	mov	r3,r2
    6074:	e0bfff03 	ldbu	r2,-4(fp)
    6078:	10bff4c4 	addi	r2,r2,-45
    607c:	1885883a 	add	r2,r3,r2
    6080:	10800003 	ldbu	r2,0(r2)
    6084:	00003406 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    6088:	e0bfff03 	ldbu	r2,-4(fp)
    608c:	10801530 	cmpltui	r2,r2,84
    6090:	10000f1e 	bne	r2,zero,60d0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    6094:	e0bfff03 	ldbu	r2,-4(fp)
    6098:	10801668 	cmpgeui	r2,r2,89
    609c:	10000c1e 	bne	r2,zero,60d0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    60a0:	e0bffd17 	ldw	r2,-12(fp)
    60a4:	10800017 	ldw	r2,0(r2)
    60a8:	10800804 	addi	r2,r2,32
    60ac:	10800017 	ldw	r2,0(r2)
    60b0:	e13ffd17 	ldw	r4,-12(fp)
    60b4:	103ee83a 	callr	r2
    60b8:	1007883a 	mov	r3,r2
    60bc:	e0bfff03 	ldbu	r2,-4(fp)
    60c0:	10bfeb04 	addi	r2,r2,-84
    60c4:	1885883a 	add	r2,r3,r2
    60c8:	10800003 	ldbu	r2,0(r2)
    60cc:	00002206 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    60d0:	e0bfff03 	ldbu	r2,-4(fp)
    60d4:	10c00b20 	cmpeqi	r3,r2,44
    60d8:	18000a1e 	bne	r3,zero,6104 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    60dc:	10c00b48 	cmpgei	r3,r2,45
    60e0:	1800031e 	bne	r3,zero,60f0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    60e4:	10800a20 	cmpeqi	r2,r2,40
    60e8:	1000081e 	bne	r2,zero,610c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    60ec:	00001906 	br	6154 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    60f0:	10c018a0 	cmpeqi	r3,r2,98
    60f4:	1800071e 	bne	r3,zero,6114 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    60f8:	108018e0 	cmpeqi	r2,r2,99
    60fc:	10000d1e 	bne	r2,zero,6134 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    6100:	00001406 	br	6154 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    6104:	00800804 	movi	r2,32
    6108:	00001306 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    610c:	00800344 	movi	r2,13
    6110:	00001106 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    6114:	e0bffd17 	ldw	r2,-12(fp)
    6118:	10800317 	ldw	r2,12(r2)
    611c:	1080004c 	andi	r2,r2,1
    6120:	10000226 	beq	r2,zero,612c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    6124:	00800c04 	movi	r2,48
    6128:	00000b06 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    612c:	0005883a 	mov	r2,zero
    6130:	00000906 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    6134:	e0bffd17 	ldw	r2,-12(fp)
    6138:	10800317 	ldw	r2,12(r2)
    613c:	1080004c 	andi	r2,r2,1
    6140:	10000226 	beq	r2,zero,614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    6144:	00800b84 	movi	r2,46
    6148:	00000306 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    614c:	0005883a 	mov	r2,zero
    6150:	00000106 	br	6158 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    6154:	0005883a 	mov	r2,zero
}
    6158:	e037883a 	mov	sp,fp
    615c:	dfc00117 	ldw	ra,4(sp)
    6160:	df000017 	ldw	fp,0(sp)
    6164:	dec00204 	addi	sp,sp,8
    6168:	f800283a 	ret

0000616c <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    616c:	defffd04 	addi	sp,sp,-12
    6170:	df000215 	stw	fp,8(sp)
    6174:	df000204 	addi	fp,sp,8
    6178:	e13ffe15 	stw	r4,-8(fp)
    617c:	e17fff15 	stw	r5,-4(fp)
        };
    6180:	0001883a 	nop
    6184:	e037883a 	mov	sp,fp
    6188:	df000017 	ldw	fp,0(sp)
    618c:	dec00104 	addi	sp,sp,4
    6190:	f800283a 	ret

00006194 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    6194:	defffd04 	addi	sp,sp,-12
    6198:	df000215 	stw	fp,8(sp)
    619c:	df000204 	addi	fp,sp,8
    61a0:	e13ffe15 	stw	r4,-8(fp)
    61a4:	e17fff15 	stw	r5,-4(fp)
        };
    61a8:	0001883a 	nop
    61ac:	e037883a 	mov	sp,fp
    61b0:	df000017 	ldw	fp,0(sp)
    61b4:	dec00104 	addi	sp,sp,4
    61b8:	f800283a 	ret

000061bc <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    61bc:	defffd04 	addi	sp,sp,-12
    61c0:	df000215 	stw	fp,8(sp)
    61c4:	df000204 	addi	fp,sp,8
    61c8:	e13ffe15 	stw	r4,-8(fp)
    61cc:	e17fff15 	stw	r5,-4(fp)
        };
    61d0:	0001883a 	nop
    61d4:	e037883a 	mov	sp,fp
    61d8:	df000017 	ldw	fp,0(sp)
    61dc:	dec00104 	addi	sp,sp,4
    61e0:	f800283a 	ret

000061e4 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    61e4:	defffd04 	addi	sp,sp,-12
    61e8:	df000215 	stw	fp,8(sp)
    61ec:	df000204 	addi	fp,sp,8
    61f0:	e13ffe15 	stw	r4,-8(fp)
    61f4:	e17fff15 	stw	r5,-4(fp)
        };
    61f8:	0001883a 	nop
    61fc:	e037883a 	mov	sp,fp
    6200:	df000017 	ldw	fp,0(sp)
    6204:	dec00104 	addi	sp,sp,4
    6208:	f800283a 	ret

0000620c <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    620c:	defffd04 	addi	sp,sp,-12
    6210:	df000215 	stw	fp,8(sp)
    6214:	df000204 	addi	fp,sp,8
    6218:	e13ffe15 	stw	r4,-8(fp)
    621c:	e17fff15 	stw	r5,-4(fp)
        };
    6220:	0001883a 	nop
    6224:	e037883a 	mov	sp,fp
    6228:	df000017 	ldw	fp,0(sp)
    622c:	dec00104 	addi	sp,sp,4
    6230:	f800283a 	ret

00006234 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    6234:	defffd04 	addi	sp,sp,-12
    6238:	df000215 	stw	fp,8(sp)
    623c:	df000204 	addi	fp,sp,8
    6240:	e13ffe15 	stw	r4,-8(fp)
    6244:	e17fff15 	stw	r5,-4(fp)
        };
    6248:	0001883a 	nop
    624c:	e037883a 	mov	sp,fp
    6250:	df000017 	ldw	fp,0(sp)
    6254:	dec00104 	addi	sp,sp,4
    6258:	f800283a 	ret

0000625c <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    625c:	defffd04 	addi	sp,sp,-12
    6260:	df000215 	stw	fp,8(sp)
    6264:	df000204 	addi	fp,sp,8
    6268:	e13ffe15 	stw	r4,-8(fp)
    626c:	e17fff15 	stw	r5,-4(fp)
        };
    6270:	0001883a 	nop
    6274:	e037883a 	mov	sp,fp
    6278:	df000017 	ldw	fp,0(sp)
    627c:	dec00104 	addi	sp,sp,4
    6280:	f800283a 	ret

00006284 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    6284:	defff704 	addi	sp,sp,-36
    6288:	dfc00815 	stw	ra,32(sp)
    628c:	df000715 	stw	fp,28(sp)
    6290:	df000704 	addi	fp,sp,28
    6294:	e13ffd15 	stw	r4,-12(fp)
    6298:	e17ffe15 	stw	r5,-8(fp)
    629c:	3005883a 	mov	r2,r6
    62a0:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    62a4:	e0bffd17 	ldw	r2,-12(fp)
    62a8:	10800303 	ldbu	r2,12(r2)
    62ac:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    62b0:	e0bfff03 	ldbu	r2,-4(fp)
    62b4:	10c011e0 	cmpeqi	r3,r2,71
    62b8:	1800271e 	bne	r3,zero,6358 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    62bc:	10c014e0 	cmpeqi	r3,r2,83
    62c0:	1800031e 	bne	r3,zero,62d0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    62c4:	10800e60 	cmpeqi	r2,r2,57
    62c8:	1000111e 	bne	r2,zero,6310 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    62cc:	00003506 	br	63a4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    62d0:	e0bffd17 	ldw	r2,-12(fp)
    62d4:	10800317 	ldw	r2,12(r2)
    62d8:	1080004c 	andi	r2,r2,1
    62dc:	0084303a 	nor	r2,zero,r2
    62e0:	1080004c 	andi	r2,r2,1
    62e4:	1007883a 	mov	r3,r2
    62e8:	e0bffd17 	ldw	r2,-12(fp)
    62ec:	1940004c 	andi	r5,r3,1
    62f0:	11000303 	ldbu	r4,12(r2)
    62f4:	00ffff84 	movi	r3,-2
    62f8:	20c6703a 	and	r3,r4,r3
    62fc:	1809883a 	mov	r4,r3
    6300:	2807883a 	mov	r3,r5
    6304:	20c6b03a 	or	r3,r4,r3
    6308:	10c00305 	stb	r3,12(r2)
                                break;
    630c:	00002506 	br	63a4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    6310:	e0bffd17 	ldw	r2,-12(fp)
    6314:	10800317 	ldw	r2,12(r2)
    6318:	1004d07a 	srli	r2,r2,1
    631c:	1080004c 	andi	r2,r2,1
    6320:	0084303a 	nor	r2,zero,r2
    6324:	1080004c 	andi	r2,r2,1
    6328:	1007883a 	mov	r3,r2
    632c:	e0bffd17 	ldw	r2,-12(fp)
    6330:	18c0004c 	andi	r3,r3,1
    6334:	18cb883a 	add	r5,r3,r3
    6338:	11000303 	ldbu	r4,12(r2)
    633c:	00ffff44 	movi	r3,-3
    6340:	20c6703a 	and	r3,r4,r3
    6344:	1809883a 	mov	r4,r3
    6348:	2807883a 	mov	r3,r5
    634c:	20c6b03a 	or	r3,r4,r3
    6350:	10c00305 	stb	r3,12(r2)
                                break;
    6354:	00001306 	br	63a4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    6358:	e0bffd17 	ldw	r2,-12(fp)
    635c:	10800317 	ldw	r2,12(r2)
    6360:	1004d0ba 	srli	r2,r2,2
    6364:	1080004c 	andi	r2,r2,1
    6368:	0084303a 	nor	r2,zero,r2
    636c:	1080004c 	andi	r2,r2,1
    6370:	1007883a 	mov	r3,r2
    6374:	e0bffd17 	ldw	r2,-12(fp)
    6378:	18c0004c 	andi	r3,r3,1
    637c:	18c7883a 	add	r3,r3,r3
    6380:	18cb883a 	add	r5,r3,r3
    6384:	11000303 	ldbu	r4,12(r2)
    6388:	00fffec4 	movi	r3,-5
    638c:	20c6703a 	and	r3,r4,r3
    6390:	1809883a 	mov	r4,r3
    6394:	2807883a 	mov	r3,r5
    6398:	20c6b03a 	or	r3,r4,r3
    639c:	10c00305 	stb	r3,12(r2)
                                break;
    63a0:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    63a4:	e0bffd17 	ldw	r2,-12(fp)
    63a8:	10800303 	ldbu	r2,12(r2)
    63ac:	10c03fcc 	andi	r3,r2,255
    63b0:	e0bffc03 	ldbu	r2,-16(fp)
    63b4:	18801026 	beq	r3,r2,63f8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    63b8:	e0bffe17 	ldw	r2,-8(fp)
    63bc:	10000e26 	beq	r2,zero,63f8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    63c0:	e0bffd17 	ldw	r2,-12(fp)
    63c4:	10800303 	ldbu	r2,12(r2)
    63c8:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    63cc:	e0bffc44 	addi	r2,fp,-15
    63d0:	d8800215 	stw	r2,8(sp)
    63d4:	00800044 	movi	r2,1
    63d8:	d8800115 	stw	r2,4(sp)
    63dc:	d8000015 	stw	zero,0(sp)
    63e0:	01c00084 	movi	r7,2
    63e4:	000d883a 	mov	r6,zero
    63e8:	000b883a 	mov	r5,zero
    63ec:	e13ffe17 	ldw	r4,-8(fp)
    63f0:	00092400 	call	9240 <_ZN6USBHID9SetReportEhhhhtPh>
    63f4:	00000106 	br	63fc <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    63f8:	0005883a 	mov	r2,zero
        };
    63fc:	e037883a 	mov	sp,fp
    6400:	dfc00117 	ldw	ra,4(sp)
    6404:	df000017 	ldw	fp,0(sp)
    6408:	dec00204 	addi	sp,sp,8
    640c:	f800283a 	ret

00006410 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    6410:	defffc04 	addi	sp,sp,-16
    6414:	df000315 	stw	fp,12(sp)
    6418:	df000304 	addi	fp,sp,12
    641c:	e13ffd15 	stw	r4,-12(fp)
    6420:	2807883a 	mov	r3,r5
    6424:	3005883a 	mov	r2,r6
    6428:	e0fffe05 	stb	r3,-8(fp)
    642c:	e0bfff05 	stb	r2,-4(fp)
        };
    6430:	0001883a 	nop
    6434:	e037883a 	mov	sp,fp
    6438:	df000017 	ldw	fp,0(sp)
    643c:	dec00104 	addi	sp,sp,4
    6440:	f800283a 	ret

00006444 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6444:	defffc04 	addi	sp,sp,-16
    6448:	df000315 	stw	fp,12(sp)
    644c:	df000304 	addi	fp,sp,12
    6450:	e13ffd15 	stw	r4,-12(fp)
    6454:	2807883a 	mov	r3,r5
    6458:	3005883a 	mov	r2,r6
    645c:	e0fffe05 	stb	r3,-8(fp)
    6460:	e0bfff05 	stb	r2,-4(fp)
        };
    6464:	0001883a 	nop
    6468:	e037883a 	mov	sp,fp
    646c:	df000017 	ldw	fp,0(sp)
    6470:	dec00104 	addi	sp,sp,4
    6474:	f800283a 	ret

00006478 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6478:	defffc04 	addi	sp,sp,-16
    647c:	df000315 	stw	fp,12(sp)
    6480:	df000304 	addi	fp,sp,12
    6484:	e13ffd15 	stw	r4,-12(fp)
    6488:	2807883a 	mov	r3,r5
    648c:	3005883a 	mov	r2,r6
    6490:	e0fffe05 	stb	r3,-8(fp)
    6494:	e0bfff05 	stb	r2,-4(fp)
        };
    6498:	0001883a 	nop
    649c:	e037883a 	mov	sp,fp
    64a0:	df000017 	ldw	fp,0(sp)
    64a4:	dec00104 	addi	sp,sp,4
    64a8:	f800283a 	ret

000064ac <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    64ac:	defffe04 	addi	sp,sp,-8
    64b0:	df000115 	stw	fp,4(sp)
    64b4:	df000104 	addi	fp,sp,4
    64b8:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    64bc:	008000b4 	movhi	r2,2
    64c0:	109bce84 	addi	r2,r2,28474
        };
    64c4:	e037883a 	mov	sp,fp
    64c8:	df000017 	ldw	fp,0(sp)
    64cc:	dec00104 	addi	sp,sp,4
    64d0:	f800283a 	ret

000064d4 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    64d4:	defffe04 	addi	sp,sp,-8
    64d8:	df000115 	stw	fp,4(sp)
    64dc:	df000104 	addi	fp,sp,4
    64e0:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    64e4:	008000b4 	movhi	r2,2
    64e8:	109bd104 	addi	r2,r2,28484
        };
    64ec:	e037883a 	mov	sp,fp
    64f0:	df000017 	ldw	fp,0(sp)
    64f4:	dec00104 	addi	sp,sp,4
    64f8:	f800283a 	ret

000064fc <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    64fc:	defffe04 	addi	sp,sp,-8
    6500:	df000115 	stw	fp,4(sp)
    6504:	df000104 	addi	fp,sp,4
    6508:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    650c:	008000b4 	movhi	r2,2
    6510:	109bd404 	addi	r2,r2,28496
        };
    6514:	e037883a 	mov	sp,fp
    6518:	df000017 	ldw	fp,0(sp)
    651c:	dec00104 	addi	sp,sp,4
    6520:	f800283a 	ret

00006524 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    6524:	defffe04 	addi	sp,sp,-8
    6528:	df000115 	stw	fp,4(sp)
    652c:	df000104 	addi	fp,sp,4
    6530:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    6534:	d0a1e684 	addi	r2,gp,-30822
        };
    6538:	e037883a 	mov	sp,fp
    653c:	df000017 	ldw	fp,0(sp)
    6540:	dec00104 	addi	sp,sp,4
    6544:	f800283a 	ret

00006548 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    6548:	defffc04 	addi	sp,sp,-16
    654c:	dfc00315 	stw	ra,12(sp)
    6550:	df000215 	stw	fp,8(sp)
    6554:	df000204 	addi	fp,sp,8
    6558:	2005883a 	mov	r2,r4
    655c:	e17fff15 	stw	r5,-4(fp)
    6560:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    6564:	d0e1eb17 	ldw	r3,-30804(gp)
    6568:	e0bfff17 	ldw	r2,-4(fp)
    656c:	18800416 	blt	r3,r2,6580 <_Z9E_Notifycci+0x38>
        printf("%c", c);
    6570:	e0bffe07 	ldb	r2,-8(fp)
    6574:	1009883a 	mov	r4,r2
    6578:	000ff640 	call	ff64 <putchar>
    657c:	00000106 	br	6584 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6580:	0001883a 	nop
        printf("%c", c);
}
    6584:	e037883a 	mov	sp,fp
    6588:	dfc00117 	ldw	ra,4(sp)
    658c:	df000017 	ldw	fp,0(sp)
    6590:	dec00204 	addi	sp,sp,8
    6594:	f800283a 	ret

00006598 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    6598:	defffb04 	addi	sp,sp,-20
    659c:	dfc00415 	stw	ra,16(sp)
    65a0:	df000315 	stw	fp,12(sp)
    65a4:	df000304 	addi	fp,sp,12
    65a8:	e13ffe15 	stw	r4,-8(fp)
    65ac:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    65b0:	d0e1eb17 	ldw	r3,-30804(gp)
    65b4:	e0bfff17 	ldw	r2,-4(fp)
    65b8:	18801016 	blt	r3,r2,65fc <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    65bc:	e0bffe17 	ldw	r2,-8(fp)
    65c0:	10001026 	beq	r2,zero,6604 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    65c4:	e0bffe17 	ldw	r2,-8(fp)
    65c8:	10c00044 	addi	r3,r2,1
    65cc:	e0fffe15 	stw	r3,-8(fp)
    65d0:	10800003 	ldbu	r2,0(r2)
    65d4:	e0bffd05 	stb	r2,-12(fp)
    65d8:	e0bffd07 	ldb	r2,-12(fp)
    65dc:	1004c03a 	cmpne	r2,r2,zero
    65e0:	10803fcc 	andi	r2,r2,255
    65e4:	10000826 	beq	r2,zero,6608 <_Z8E_NotifyPKci+0x70>
    65e8:	e0bffd07 	ldb	r2,-12(fp)
    65ec:	e17fff17 	ldw	r5,-4(fp)
    65f0:	1009883a 	mov	r4,r2
    65f4:	00065480 	call	6548 <_Z9E_Notifycci>
    65f8:	003ff206 	br	65c4 <__alt_data_end+0xfc0065c4>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    65fc:	0001883a 	nop
    6600:	00000106 	br	6608 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    6604:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    6608:	e037883a 	mov	sp,fp
    660c:	dfc00117 	ldw	ra,4(sp)
    6610:	df000017 	ldw	fp,0(sp)
    6614:	dec00204 	addi	sp,sp,8
    6618:	f800283a 	ret

0000661c <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    661c:	defffb04 	addi	sp,sp,-20
    6620:	dfc00415 	stw	ra,16(sp)
    6624:	df000315 	stw	fp,12(sp)
    6628:	df000304 	addi	fp,sp,12
    662c:	e13ffe15 	stw	r4,-8(fp)
    6630:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6634:	d0e1eb17 	ldw	r3,-30804(gp)
    6638:	e0bfff17 	ldw	r2,-4(fp)
    663c:	18801016 	blt	r3,r2,6680 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    6640:	e0bffe17 	ldw	r2,-8(fp)
    6644:	10001026 	beq	r2,zero,6688 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    6648:	e0bffe17 	ldw	r2,-8(fp)
    664c:	10c00044 	addi	r3,r2,1
    6650:	e0fffe15 	stw	r3,-8(fp)
    6654:	10800003 	ldbu	r2,0(r2)
    6658:	e0bffd05 	stb	r2,-12(fp)
    665c:	e0bffd07 	ldb	r2,-12(fp)
    6660:	1004c03a 	cmpne	r2,r2,zero
    6664:	10803fcc 	andi	r2,r2,255
    6668:	10000826 	beq	r2,zero,668c <_Z11E_NotifyStrPKci+0x70>
    666c:	e0bffd07 	ldb	r2,-12(fp)
    6670:	e17fff17 	ldw	r5,-4(fp)
    6674:	1009883a 	mov	r4,r2
    6678:	00065480 	call	6548 <_Z9E_Notifycci>
    667c:	003ff206 	br	6648 <__alt_data_end+0xfc006648>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6680:	0001883a 	nop
    6684:	00000106 	br	668c <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    6688:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    668c:	e037883a 	mov	sp,fp
    6690:	dfc00117 	ldw	ra,4(sp)
    6694:	df000017 	ldw	fp,0(sp)
    6698:	dec00204 	addi	sp,sp,8
    669c:	f800283a 	ret

000066a0 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    66a0:	defffd04 	addi	sp,sp,-12
    66a4:	df000215 	stw	fp,8(sp)
    66a8:	df000204 	addi	fp,sp,8
    66ac:	2005883a 	mov	r2,r4
    66b0:	e17fff15 	stw	r5,-4(fp)
    66b4:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    66b8:	e037883a 	mov	sp,fp
    66bc:	df000017 	ldw	fp,0(sp)
    66c0:	dec00104 	addi	sp,sp,4
    66c4:	f800283a 	ret

000066c8 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    66c8:	defffc04 	addi	sp,sp,-16
    66cc:	df000315 	stw	fp,12(sp)
    66d0:	df000304 	addi	fp,sp,12
    66d4:	e13ffd15 	stw	r4,-12(fp)
    66d8:	e17ffe15 	stw	r5,-8(fp)
    66dc:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    66e0:	e037883a 	mov	sp,fp
    66e4:	df000017 	ldw	fp,0(sp)
    66e8:	dec00104 	addi	sp,sp,4
    66ec:	f800283a 	ret

000066f0 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    66f0:	defffc04 	addi	sp,sp,-16
    66f4:	df000315 	stw	fp,12(sp)
    66f8:	df000304 	addi	fp,sp,12
    66fc:	e13ffd15 	stw	r4,-12(fp)
    6700:	e17ffe15 	stw	r5,-8(fp)
    6704:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    6708:	e0bffd17 	ldw	r2,-12(fp)
    670c:	10800017 	ldw	r2,0(r2)
    6710:	1000021e 	bne	r2,zero,671c <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    6714:	0005883a 	mov	r2,zero
    6718:	00003306 	br	67e8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    671c:	e0bffd17 	ldw	r2,-12(fp)
    6720:	10800103 	ldbu	r2,4(r2)
    6724:	10803fcc 	andi	r2,r2,255
    6728:	10002426 	beq	r2,zero,67bc <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    672c:	e0bfff17 	ldw	r2,-4(fp)
    6730:	1080000b 	ldhu	r2,0(r2)
    6734:	10bfffcc 	andi	r2,r2,65535
    6738:	10002026 	beq	r2,zero,67bc <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    673c:	e0bffd17 	ldw	r2,-12(fp)
    6740:	10800017 	ldw	r2,0(r2)
    6744:	e0fffd17 	ldw	r3,-12(fp)
    6748:	18c00143 	ldbu	r3,5(r3)
    674c:	19003fcc 	andi	r4,r3,255
    6750:	e0fffd17 	ldw	r3,-12(fp)
    6754:	18c00103 	ldbu	r3,4(r3)
    6758:	18c03fcc 	andi	r3,r3,255
    675c:	20c7c83a 	sub	r3,r4,r3
    6760:	10c5883a 	add	r2,r2,r3
    6764:	e0fffe17 	ldw	r3,-8(fp)
    6768:	18c00017 	ldw	r3,0(r3)
    676c:	18c00003 	ldbu	r3,0(r3)
    6770:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    6774:	e0bffd17 	ldw	r2,-12(fp)
    6778:	10800103 	ldbu	r2,4(r2)
    677c:	10bfffc4 	addi	r2,r2,-1
    6780:	1007883a 	mov	r3,r2
    6784:	e0bffd17 	ldw	r2,-12(fp)
    6788:	10c00105 	stb	r3,4(r2)
    678c:	e0bfff17 	ldw	r2,-4(fp)
    6790:	1080000b 	ldhu	r2,0(r2)
    6794:	10bfffc4 	addi	r2,r2,-1
    6798:	1007883a 	mov	r3,r2
    679c:	e0bfff17 	ldw	r2,-4(fp)
    67a0:	10c0000d 	sth	r3,0(r2)
    67a4:	e0bffe17 	ldw	r2,-8(fp)
    67a8:	10800017 	ldw	r2,0(r2)
    67ac:	10c00044 	addi	r3,r2,1
    67b0:	e0bffe17 	ldw	r2,-8(fp)
    67b4:	10c00015 	stw	r3,0(r2)
    67b8:	003fd806 	br	671c <__alt_data_end+0xfc00671c>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    67bc:	e0bffd17 	ldw	r2,-12(fp)
    67c0:	10800103 	ldbu	r2,4(r2)
    67c4:	10803fcc 	andi	r2,r2,255
    67c8:	10000226 	beq	r2,zero,67d4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    67cc:	0005883a 	mov	r2,zero
    67d0:	00000506 	br	67e8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    67d4:	e0bffd17 	ldw	r2,-12(fp)
    67d8:	10c00143 	ldbu	r3,5(r2)
    67dc:	e0bffd17 	ldw	r2,-12(fp)
    67e0:	10c00105 	stb	r3,4(r2)
        return true;
    67e4:	00800044 	movi	r2,1
}
    67e8:	e037883a 	mov	sp,fp
    67ec:	df000017 	ldw	fp,0(sp)
    67f0:	dec00104 	addi	sp,sp,4
    67f4:	f800283a 	ret

000067f8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    67f8:	defffa04 	addi	sp,sp,-24
    67fc:	dfc00515 	stw	ra,20(sp)
    6800:	df000415 	stw	fp,16(sp)
    6804:	df000404 	addi	fp,sp,16
    6808:	e13ffc15 	stw	r4,-16(fp)
    680c:	e17ffd15 	stw	r5,-12(fp)
    6810:	e1bffe15 	stw	r6,-8(fp)
    6814:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    6818:	e0bffc17 	ldw	r2,-16(fp)
    681c:	10800003 	ldbu	r2,0(r2)
    6820:	10803fcc 	andi	r2,r2,255
    6824:	10c00060 	cmpeqi	r3,r2,1
    6828:	1800181e 	bne	r3,zero,688c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    682c:	10c00088 	cmpgei	r3,r2,2
    6830:	1800021e 	bne	r3,zero,683c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    6834:	10000626 	beq	r2,zero,6850 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    6838:	00007e06 	br	6a34 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    683c:	10c000a0 	cmpeqi	r3,r2,2
    6840:	18004a1e 	bne	r3,zero,696c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    6844:	108000e0 	cmpeqi	r2,r2,3
    6848:	1000571e 	bne	r2,zero,69a8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    684c:	00007906 	br	6a34 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    6850:	e0bffc17 	ldw	r2,-16(fp)
    6854:	10800417 	ldw	r2,16(r2)
    6858:	e0fffc17 	ldw	r3,-16(fp)
    685c:	18c00303 	ldbu	r3,12(r3)
    6860:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6864:	e0bffc17 	ldw	r2,-16(fp)
    6868:	10c00504 	addi	r3,r2,20
    686c:	e0bffc17 	ldw	r2,-16(fp)
    6870:	10800417 	ldw	r2,16(r2)
    6874:	100b883a 	mov	r5,r2
    6878:	1809883a 	mov	r4,r3
    687c:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    6880:	e0bffc17 	ldw	r2,-16(fp)
    6884:	00c00044 	movi	r3,1
    6888:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    688c:	e0bffc17 	ldw	r2,-16(fp)
    6890:	10800504 	addi	r2,r2,20
    6894:	e1bffe17 	ldw	r6,-8(fp)
    6898:	e17ffd17 	ldw	r5,-12(fp)
    689c:	1009883a 	mov	r4,r2
    68a0:	00066f00 	call	66f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    68a4:	1080005c 	xori	r2,r2,1
    68a8:	10803fcc 	andi	r2,r2,255
    68ac:	10000226 	beq	r2,zero,68b8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    68b0:	0005883a 	mov	r2,zero
    68b4:	00006006 	br	6a38 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    68b8:	e0bffc17 	ldw	r2,-16(fp)
    68bc:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    68c0:	e0bffc17 	ldw	r2,-16(fp)
    68c4:	10800417 	ldw	r2,16(r2)
    68c8:	10800003 	ldbu	r2,0(r2)
    68cc:	10803fcc 	andi	r2,r2,255
    68d0:	10800130 	cmpltui	r2,r2,4
    68d4:	10000e1e 	bne	r2,zero,6910 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    68d8:	e0bffc17 	ldw	r2,-16(fp)
    68dc:	10800417 	ldw	r2,16(r2)
    68e0:	10c00043 	ldbu	r3,1(r2)
    68e4:	11000083 	ldbu	r4,2(r2)
    68e8:	2008923a 	slli	r4,r4,8
    68ec:	20c6b03a 	or	r3,r4,r3
    68f0:	110000c3 	ldbu	r4,3(r2)
    68f4:	2008943a 	slli	r4,r4,16
    68f8:	20c6b03a 	or	r3,r4,r3
    68fc:	10800103 	ldbu	r2,4(r2)
    6900:	1004963a 	slli	r2,r2,24
    6904:	10c4b03a 	or	r2,r2,r3
    6908:	10800017 	ldw	r2,0(r2)
    690c:	00000e06 	br	6948 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    6910:	e0bffc17 	ldw	r2,-16(fp)
    6914:	10800417 	ldw	r2,16(r2)
    6918:	10c00043 	ldbu	r3,1(r2)
    691c:	11000083 	ldbu	r4,2(r2)
    6920:	2008923a 	slli	r4,r4,8
    6924:	20c6b03a 	or	r3,r4,r3
    6928:	110000c3 	ldbu	r4,3(r2)
    692c:	2008943a 	slli	r4,r4,16
    6930:	20c6b03a 	or	r3,r4,r3
    6934:	10800103 	ldbu	r2,4(r2)
    6938:	1004963a 	slli	r2,r2,24
    693c:	10c4b03a 	or	r2,r2,r3
    6940:	1080000b 	ldhu	r2,0(r2)
    6944:	10bfffcc 	andi	r2,r2,65535
    6948:	e0fffc17 	ldw	r3,-16(fp)
    694c:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    6950:	e0bffc17 	ldw	r2,-16(fp)
    6954:	10c00117 	ldw	r3,4(r2)
    6958:	e0bffc17 	ldw	r2,-16(fp)
    695c:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    6960:	e0bffc17 	ldw	r2,-16(fp)
    6964:	00c00084 	movi	r3,2
    6968:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    696c:	e0bffc17 	ldw	r2,-16(fp)
    6970:	10800417 	ldw	r2,16(r2)
    6974:	e0fffc17 	ldw	r3,-16(fp)
    6978:	18c00343 	ldbu	r3,13(r3)
    697c:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6980:	e0bffc17 	ldw	r2,-16(fp)
    6984:	10c00504 	addi	r3,r2,20
    6988:	e0bffc17 	ldw	r2,-16(fp)
    698c:	10800417 	ldw	r2,16(r2)
    6990:	100b883a 	mov	r5,r2
    6994:	1809883a 	mov	r4,r3
    6998:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    699c:	e0bffc17 	ldw	r2,-16(fp)
    69a0:	00c000c4 	movi	r3,3
    69a4:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    69a8:	e0bffc17 	ldw	r2,-16(fp)
    69ac:	10800217 	ldw	r2,8(r2)
    69b0:	10001e26 	beq	r2,zero,6a2c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    69b4:	e0bffc17 	ldw	r2,-16(fp)
    69b8:	10800504 	addi	r2,r2,20
    69bc:	e1bffe17 	ldw	r6,-8(fp)
    69c0:	e17ffd17 	ldw	r5,-12(fp)
    69c4:	1009883a 	mov	r4,r2
    69c8:	00066f00 	call	66f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    69cc:	1080005c 	xori	r2,r2,1
    69d0:	10803fcc 	andi	r2,r2,255
    69d4:	10000226 	beq	r2,zero,69e0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    69d8:	0005883a 	mov	r2,zero
    69dc:	00001606 	br	6a38 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    69e0:	e0bfff17 	ldw	r2,-4(fp)
    69e4:	10000b26 	beq	r2,zero,6a14 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    69e8:	e0bffc17 	ldw	r2,-16(fp)
    69ec:	11000417 	ldw	r4,16(r2)
    69f0:	e0bffc17 	ldw	r2,-16(fp)
    69f4:	10c00117 	ldw	r3,4(r2)
    69f8:	e0bffc17 	ldw	r2,-16(fp)
    69fc:	10800217 	ldw	r2,8(r2)
    6a00:	1887c83a 	sub	r3,r3,r2
    6a04:	e0bfff17 	ldw	r2,-4(fp)
    6a08:	e1800217 	ldw	r6,8(fp)
    6a0c:	180b883a 	mov	r5,r3
    6a10:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6a14:	e0bffc17 	ldw	r2,-16(fp)
    6a18:	10800217 	ldw	r2,8(r2)
    6a1c:	10ffffc4 	addi	r3,r2,-1
    6a20:	e0bffc17 	ldw	r2,-16(fp)
    6a24:	10c00215 	stw	r3,8(r2)
    6a28:	003fdf06 	br	69a8 <__alt_data_end+0xfc0069a8>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    6a2c:	e0bffc17 	ldw	r2,-16(fp)
    6a30:	10000005 	stb	zero,0(r2)
        }
        return true;
    6a34:	00800044 	movi	r2,1
}
    6a38:	e037883a 	mov	sp,fp
    6a3c:	dfc00117 	ldw	ra,4(sp)
    6a40:	df000017 	ldw	fp,0(sp)
    6a44:	dec00204 	addi	sp,sp,8
    6a48:	f800283a 	ret

00006a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    6a4c:	defff904 	addi	sp,sp,-28
    6a50:	dfc00615 	stw	ra,24(sp)
    6a54:	df000515 	stw	fp,20(sp)
    6a58:	df000504 	addi	fp,sp,20
    6a5c:	e13ffd15 	stw	r4,-12(fp)
    6a60:	2807883a 	mov	r3,r5
    6a64:	3005883a 	mov	r2,r6
    6a68:	e0fffe05 	stb	r3,-8(fp)
    6a6c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    6a70:	e0bfff0b 	ldhu	r2,-4(fp)
    6a74:	1005d23a 	srai	r2,r2,8
    6a78:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    6a7c:	e0bfff0b 	ldhu	r2,-4(fp)
    6a80:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    6a84:	e03ffb8d 	sth	zero,-18(fp)
    6a88:	e03ffc0d 	sth	zero,-16(fp)
    6a8c:	e0bffe03 	ldbu	r2,-8(fp)
    6a90:	e0bffbc5 	stb	r2,-17(fp)
    6a94:	e0bffb03 	ldbu	r2,-20(fp)
    6a98:	e0bffc05 	stb	r2,-16(fp)
    6a9c:	e0bffb43 	ldbu	r2,-19(fp)
    6aa0:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6aa4:	e0bffb84 	addi	r2,fp,-18
    6aa8:	000f883a 	mov	r7,zero
    6aac:	01800104 	movi	r6,4
    6ab0:	100b883a 	mov	r5,r2
    6ab4:	e13ffd17 	ldw	r4,-12(fp)
    6ab8:	00219240 	call	21924 <alt_avalon_i2c_master_tx>
    6abc:	1004c03a 	cmpne	r2,r2,zero
    6ac0:	10803fcc 	andi	r2,r2,255
    6ac4:	10000426 	beq	r2,zero,6ad8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    6ac8:	010000b4 	movhi	r4,2
    6acc:	211c0204 	addi	r4,r4,28680
    6ad0:	000ff200 	call	ff20 <printf>
	}
	return;
    6ad4:	0001883a 	nop
    6ad8:	0001883a 	nop
}
    6adc:	e037883a 	mov	sp,fp
    6ae0:	dfc00117 	ldw	ra,4(sp)
    6ae4:	df000017 	ldw	fp,0(sp)
    6ae8:	dec00204 	addi	sp,sp,8
    6aec:	f800283a 	ret

00006af0 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6af0:	defff604 	addi	sp,sp,-40
    6af4:	dfc00915 	stw	ra,36(sp)
    6af8:	df000815 	stw	fp,32(sp)
    6afc:	dc000715 	stw	r16,28(sp)
    6b00:	df000804 	addi	fp,sp,32
    6b04:	e13ffb15 	stw	r4,-20(fp)
    6b08:	3009883a 	mov	r4,r6
    6b0c:	e1fffe15 	stw	r7,-8(fp)
    6b10:	e17ffc05 	stb	r5,-16(fp)
    6b14:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    6b18:	d809883a 	mov	r4,sp
    6b1c:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    6b20:	e13ffd03 	ldbu	r4,-12(fp)
    6b24:	21000044 	addi	r4,r4,1
    6b28:	2109883a 	add	r4,r4,r4
    6b2c:	213fffc4 	addi	r4,r4,-1
    6b30:	e13ff915 	stw	r4,-28(fp)
    6b34:	200b883a 	mov	r5,r4
    6b38:	29400044 	addi	r5,r5,1
    6b3c:	2819883a 	mov	r12,r5
    6b40:	001b883a 	mov	r13,zero
    6b44:	600ad77a 	srli	r5,r12,29
    6b48:	681290fa 	slli	r9,r13,3
    6b4c:	2a52b03a 	or	r9,r5,r9
    6b50:	601090fa 	slli	r8,r12,3
    6b54:	200b883a 	mov	r5,r4
    6b58:	29400044 	addi	r5,r5,1
    6b5c:	2815883a 	mov	r10,r5
    6b60:	0017883a 	mov	r11,zero
    6b64:	500ad77a 	srli	r5,r10,29
    6b68:	580690fa 	slli	r3,r11,3
    6b6c:	28c6b03a 	or	r3,r5,r3
    6b70:	500490fa 	slli	r2,r10,3
    6b74:	2005883a 	mov	r2,r4
    6b78:	10800044 	addi	r2,r2,1
    6b7c:	108000c4 	addi	r2,r2,3
    6b80:	1004d0ba 	srli	r2,r2,2
    6b84:	1085883a 	add	r2,r2,r2
    6b88:	1085883a 	add	r2,r2,r2
    6b8c:	d8b7c83a 	sub	sp,sp,r2
    6b90:	d805883a 	mov	r2,sp
    6b94:	1005883a 	mov	r2,r2
    6b98:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    6b9c:	e0bffa17 	ldw	r2,-24(fp)
    6ba0:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    6ba4:	e0bffa17 	ldw	r2,-24(fp)
    6ba8:	e0fffc03 	ldbu	r3,-16(fp)
    6bac:	10c00045 	stb	r3,1(r2)
	int i = 0;
    6bb0:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    6bb4:	e03ff815 	stw	zero,-32(fp)
    6bb8:	e0bffd03 	ldbu	r2,-12(fp)
    6bbc:	e0fff817 	ldw	r3,-32(fp)
    6bc0:	18801e0e 	bge	r3,r2,6c3c <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    6bc4:	e0bff817 	ldw	r2,-32(fp)
    6bc8:	10c00084 	addi	r3,r2,2
    6bcc:	e0bff817 	ldw	r2,-32(fp)
    6bd0:	1085883a 	add	r2,r2,r2
    6bd4:	1009883a 	mov	r4,r2
    6bd8:	e0bffe17 	ldw	r2,-8(fp)
    6bdc:	1105883a 	add	r2,r2,r4
    6be0:	1080000b 	ldhu	r2,0(r2)
    6be4:	10bfffcc 	andi	r2,r2,65535
    6be8:	1005d23a 	srai	r2,r2,8
    6bec:	1009883a 	mov	r4,r2
    6bf0:	e0bffa17 	ldw	r2,-24(fp)
    6bf4:	10c5883a 	add	r2,r2,r3
    6bf8:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    6bfc:	e0bff817 	ldw	r2,-32(fp)
    6c00:	10c000c4 	addi	r3,r2,3
    6c04:	e0bff817 	ldw	r2,-32(fp)
    6c08:	1085883a 	add	r2,r2,r2
    6c0c:	1009883a 	mov	r4,r2
    6c10:	e0bffe17 	ldw	r2,-8(fp)
    6c14:	1105883a 	add	r2,r2,r4
    6c18:	1080000b 	ldhu	r2,0(r2)
    6c1c:	1009883a 	mov	r4,r2
    6c20:	e0bffa17 	ldw	r2,-24(fp)
    6c24:	10c5883a 	add	r2,r2,r3
    6c28:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    6c2c:	e0bff817 	ldw	r2,-32(fp)
    6c30:	10800044 	addi	r2,r2,1
    6c34:	e0bff815 	stw	r2,-32(fp)
    6c38:	003fdf06 	br	6bb8 <__alt_data_end+0xfc006bb8>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6c3c:	e0fffa17 	ldw	r3,-24(fp)
    6c40:	e0bffd03 	ldbu	r2,-12(fp)
    6c44:	10800044 	addi	r2,r2,1
    6c48:	1085883a 	add	r2,r2,r2
    6c4c:	000f883a 	mov	r7,zero
    6c50:	100d883a 	mov	r6,r2
    6c54:	180b883a 	mov	r5,r3
    6c58:	e13ffb17 	ldw	r4,-20(fp)
    6c5c:	00219240 	call	21924 <alt_avalon_i2c_master_tx>
    6c60:	1004c03a 	cmpne	r2,r2,zero
    6c64:	10803fcc 	andi	r2,r2,255
    6c68:	10000326 	beq	r2,zero,6c78 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    6c6c:	010000b4 	movhi	r4,2
    6c70:	211c0904 	addi	r4,r4,28708
    6c74:	000ff200 	call	ff20 <printf>
	}
	return (data+nwords);
    6c78:	e0bffd03 	ldbu	r2,-12(fp)
    6c7c:	1085883a 	add	r2,r2,r2
    6c80:	1007883a 	mov	r3,r2
    6c84:	e0bffe17 	ldw	r2,-8(fp)
    6c88:	10c5883a 	add	r2,r2,r3
    6c8c:	8037883a 	mov	sp,r16
}
    6c90:	e6ffff04 	addi	sp,fp,-4
    6c94:	dfc00217 	ldw	ra,8(sp)
    6c98:	df000117 	ldw	fp,4(sp)
    6c9c:	dc000017 	ldw	r16,0(sp)
    6ca0:	dec00304 	addi	sp,sp,12
    6ca4:	f800283a 	ret

00006ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    6ca8:	defff804 	addi	sp,sp,-32
    6cac:	dfc00715 	stw	ra,28(sp)
    6cb0:	df000615 	stw	fp,24(sp)
    6cb4:	df000604 	addi	fp,sp,24
    6cb8:	e13ffe15 	stw	r4,-8(fp)
    6cbc:	2805883a 	mov	r2,r5
    6cc0:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    6cc4:	e03ffc8d 	sth	zero,-14(fp)
    6cc8:	e0bfff03 	ldbu	r2,-4(fp)
    6ccc:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    6cd0:	e03ffd05 	stb	zero,-12(fp)
    6cd4:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6cd8:	e13ffd04 	addi	r4,fp,-12
    6cdc:	e0fffc84 	addi	r3,fp,-14
    6ce0:	d8000115 	stw	zero,4(sp)
    6ce4:	00800084 	movi	r2,2
    6ce8:	d8800015 	stw	r2,0(sp)
    6cec:	200f883a 	mov	r7,r4
    6cf0:	01800084 	movi	r6,2
    6cf4:	180b883a 	mov	r5,r3
    6cf8:	e13ffe17 	ldw	r4,-8(fp)
    6cfc:	0021b480 	call	21b48 <alt_avalon_i2c_master_tx_rx>
    6d00:	1004c03a 	cmpne	r2,r2,zero
    6d04:	10803fcc 	andi	r2,r2,255
    6d08:	10000326 	beq	r2,zero,6d18 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    6d0c:	010000b4 	movhi	r4,2
    6d10:	211c0f04 	addi	r4,r4,28732
    6d14:	000ff200 	call	ff20 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    6d18:	e0bffd03 	ldbu	r2,-12(fp)
    6d1c:	10803fcc 	andi	r2,r2,255
    6d20:	1004923a 	slli	r2,r2,8
    6d24:	1007883a 	mov	r3,r2
    6d28:	e0bffd43 	ldbu	r2,-11(fp)
    6d2c:	10803fcc 	andi	r2,r2,255
    6d30:	1884b03a 	or	r2,r3,r2
    6d34:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    6d38:	e0bffc0b 	ldhu	r2,-16(fp)
}
    6d3c:	e037883a 	mov	sp,fp
    6d40:	dfc00117 	ldw	ra,4(sp)
    6d44:	df000017 	ldw	fp,0(sp)
    6d48:	dec00204 	addi	sp,sp,8
    6d4c:	f800283a 	ret

00006d50 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6d50:	defff304 	addi	sp,sp,-52
    6d54:	dfc00c15 	stw	ra,48(sp)
    6d58:	df000b15 	stw	fp,44(sp)
    6d5c:	dc000a15 	stw	r16,40(sp)
    6d60:	df000b04 	addi	fp,sp,44
    6d64:	e13ffb15 	stw	r4,-20(fp)
    6d68:	3009883a 	mov	r4,r6
    6d6c:	e1fffe15 	stw	r7,-8(fp)
    6d70:	e17ffc05 	stb	r5,-16(fp)
    6d74:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6d78:	d809883a 	mov	r4,sp
    6d7c:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    6d80:	e03ffa0d 	sth	zero,-24(fp)
    6d84:	e13ffc03 	ldbu	r4,-16(fp)
    6d88:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    6d8c:	e13ffd03 	ldbu	r4,-12(fp)
    6d90:	2109883a 	add	r4,r4,r4
    6d94:	213fffc4 	addi	r4,r4,-1
    6d98:	e13ff815 	stw	r4,-32(fp)
    6d9c:	200b883a 	mov	r5,r4
    6da0:	29400044 	addi	r5,r5,1
    6da4:	2819883a 	mov	r12,r5
    6da8:	001b883a 	mov	r13,zero
    6dac:	600ad77a 	srli	r5,r12,29
    6db0:	681290fa 	slli	r9,r13,3
    6db4:	2a52b03a 	or	r9,r5,r9
    6db8:	601090fa 	slli	r8,r12,3
    6dbc:	200b883a 	mov	r5,r4
    6dc0:	29400044 	addi	r5,r5,1
    6dc4:	2815883a 	mov	r10,r5
    6dc8:	0017883a 	mov	r11,zero
    6dcc:	500ad77a 	srli	r5,r10,29
    6dd0:	580690fa 	slli	r3,r11,3
    6dd4:	28c6b03a 	or	r3,r5,r3
    6dd8:	500490fa 	slli	r2,r10,3
    6ddc:	2005883a 	mov	r2,r4
    6de0:	10800044 	addi	r2,r2,1
    6de4:	108000c4 	addi	r2,r2,3
    6de8:	1004d0ba 	srli	r2,r2,2
    6dec:	1085883a 	add	r2,r2,r2
    6df0:	1085883a 	add	r2,r2,r2
    6df4:	d8b7c83a 	sub	sp,sp,r2
    6df8:	d8800204 	addi	r2,sp,8
    6dfc:	1005883a 	mov	r2,r2
    6e00:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    6e04:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    6e08:	e0fff917 	ldw	r3,-28(fp)
    6e0c:	e0bffd03 	ldbu	r2,-12(fp)
    6e10:	1085883a 	add	r2,r2,r2
    6e14:	1009883a 	mov	r4,r2
    6e18:	e0bffa04 	addi	r2,fp,-24
    6e1c:	d8000115 	stw	zero,4(sp)
    6e20:	d9000015 	stw	r4,0(sp)
    6e24:	180f883a 	mov	r7,r3
    6e28:	01800084 	movi	r6,2
    6e2c:	100b883a 	mov	r5,r2
    6e30:	e13ffb17 	ldw	r4,-20(fp)
    6e34:	0021b480 	call	21b48 <alt_avalon_i2c_master_tx_rx>
    6e38:	1004c03a 	cmpne	r2,r2,zero
    6e3c:	10803fcc 	andi	r2,r2,255
    6e40:	10000326 	beq	r2,zero,6e50 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    6e44:	010000b4 	movhi	r4,2
    6e48:	211c1504 	addi	r4,r4,28756
    6e4c:	000ff200 	call	ff20 <printf>
	}
	for(i = 0; i < nwords; i++) {
    6e50:	e03ff715 	stw	zero,-36(fp)
    6e54:	e0bffd03 	ldbu	r2,-12(fp)
    6e58:	e0fff717 	ldw	r3,-36(fp)
    6e5c:	18801b0e 	bge	r3,r2,6ecc <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    6e60:	e0bff717 	ldw	r2,-36(fp)
    6e64:	1085883a 	add	r2,r2,r2
    6e68:	1007883a 	mov	r3,r2
    6e6c:	e0bffe17 	ldw	r2,-8(fp)
    6e70:	10c7883a 	add	r3,r2,r3
    6e74:	e0bff717 	ldw	r2,-36(fp)
    6e78:	1085883a 	add	r2,r2,r2
    6e7c:	1009883a 	mov	r4,r2
    6e80:	e0bff917 	ldw	r2,-28(fp)
    6e84:	1105883a 	add	r2,r2,r4
    6e88:	10800003 	ldbu	r2,0(r2)
    6e8c:	10803fcc 	andi	r2,r2,255
    6e90:	1004923a 	slli	r2,r2,8
    6e94:	100b883a 	mov	r5,r2
    6e98:	e0bff717 	ldw	r2,-36(fp)
    6e9c:	1085883a 	add	r2,r2,r2
    6ea0:	10800044 	addi	r2,r2,1
    6ea4:	e13ff917 	ldw	r4,-28(fp)
    6ea8:	2085883a 	add	r2,r4,r2
    6eac:	10800003 	ldbu	r2,0(r2)
    6eb0:	10803fcc 	andi	r2,r2,255
    6eb4:	2884b03a 	or	r2,r5,r2
    6eb8:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6ebc:	e0bff717 	ldw	r2,-36(fp)
    6ec0:	10800044 	addi	r2,r2,1
    6ec4:	e0bff715 	stw	r2,-36(fp)
    6ec8:	003fe206 	br	6e54 <__alt_data_end+0xfc006e54>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6ecc:	e0bffd03 	ldbu	r2,-12(fp)
    6ed0:	1085883a 	add	r2,r2,r2
    6ed4:	1007883a 	mov	r3,r2
    6ed8:	e0bffe17 	ldw	r2,-8(fp)
    6edc:	10c5883a 	add	r2,r2,r3
    6ee0:	8037883a 	mov	sp,r16
}
    6ee4:	e6ffff04 	addi	sp,fp,-4
    6ee8:	dfc00217 	ldw	ra,8(sp)
    6eec:	df000117 	ldw	fp,4(sp)
    6ef0:	dc000017 	ldw	r16,0(sp)
    6ef4:	dec00304 	addi	sp,sp,12
    6ef8:	f800283a 	ret

00006efc <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6efc:	defffd04 	addi	sp,sp,-12
    6f00:	dfc00215 	stw	ra,8(sp)
    6f04:	df000115 	stw	fp,4(sp)
    6f08:	df000104 	addi	fp,sp,4
    6f0c:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6f10:	01400284 	movi	r5,10
    6f14:	e13fff17 	ldw	r4,-4(fp)
    6f18:	002171c0 	call	2171c <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6f1c:	01902f04 	movi	r6,16572
    6f20:	01400c04 	movi	r5,48
    6f24:	e13fff17 	ldw	r4,-4(fp)
    6f28:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6f2c:	01801384 	movi	r6,78
    6f30:	01400a04 	movi	r5,40
    6f34:	e13fff17 	ldw	r4,-4(fp)
    6f38:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6f3c:	01800844 	movi	r6,33
    6f40:	01400084 	movi	r5,2
    6f44:	e13fff17 	ldw	r4,-4(fp)
    6f48:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6f4c:	01800104 	movi	r6,4
    6f50:	01400104 	movi	r5,4
    6f54:	e13fff17 	ldw	r4,-4(fp)
    6f58:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_32);
    6f5c:	000d883a 	mov	r6,zero
    6f60:	01400184 	movi	r5,6
    6f64:	e13fff17 	ldw	r4,-4(fp)
    6f68:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6f6c:	01800404 	movi	r6,16
    6f70:	01400284 	movi	r5,10
    6f74:	e13fff17 	ldw	r4,-4(fp)
    6f78:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6f7c:	0001883a 	nop
    6f80:	e037883a 	mov	sp,fp
    6f84:	dfc00117 	ldw	ra,4(sp)
    6f88:	df000017 	ldw	fp,0(sp)
    6f8c:	dec00204 	addi	sp,sp,8
    6f90:	f800283a 	ret

00006f94 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6f94:	defffd04 	addi	sp,sp,-12
    6f98:	dfc00215 	stw	ra,8(sp)
    6f9c:	df000115 	stw	fp,4(sp)
    6fa0:	df000104 	addi	fp,sp,4
    6fa4:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6fa8:	01860604 	movi	r6,6168
    6fac:	01400884 	movi	r5,34
    6fb0:	e13fff17 	ldw	r4,-4(fp)
    6fb4:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6fb8:	019c1c04 	movi	r6,28784
    6fbc:	01400404 	movi	r5,16
    6fc0:	e13fff17 	ldw	r4,-4(fp)
    6fc4:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6fc8:	01808004 	movi	r6,512
    6fcc:	01400384 	movi	r5,14
    6fd0:	e13fff17 	ldw	r4,-4(fp)
    6fd4:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    6fd8:	01804044 	movi	r6,257
    6fdc:	01400904 	movi	r5,36
    6fe0:	e13fff17 	ldw	r4,-4(fp)
    6fe4:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6fe8:	0001883a 	nop
    6fec:	e037883a 	mov	sp,fp
    6ff0:	dfc00117 	ldw	ra,4(sp)
    6ff4:	df000017 	ldw	fp,0(sp)
    6ff8:	dec00204 	addi	sp,sp,8
    6ffc:	f800283a 	ret

00007000 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    7000:	defffd04 	addi	sp,sp,-12
    7004:	dfc00215 	stw	ra,8(sp)
    7008:	df000115 	stw	fp,4(sp)
    700c:	df000104 	addi	fp,sp,4
    7010:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    7014:	000b883a 	mov	r5,zero
    7018:	e13fff17 	ldw	r4,-4(fp)
    701c:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7020:	10bfffcc 	andi	r2,r2,65535
    7024:	100b883a 	mov	r5,r2
    7028:	010000b4 	movhi	r4,2
    702c:	211c1b04 	addi	r4,r4,28780
    7030:	000ff200 	call	ff20 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    7034:	01400084 	movi	r5,2
    7038:	e13fff17 	ldw	r4,-4(fp)
    703c:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7040:	10bfffcc 	andi	r2,r2,65535
    7044:	100b883a 	mov	r5,r2
    7048:	010000b4 	movhi	r4,2
    704c:	211c1e04 	addi	r4,r4,28792
    7050:	000ff200 	call	ff20 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    7054:	01400104 	movi	r5,4
    7058:	e13fff17 	ldw	r4,-4(fp)
    705c:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7060:	10bfffcc 	andi	r2,r2,65535
    7064:	100b883a 	mov	r5,r2
    7068:	010000b4 	movhi	r4,2
    706c:	211c2304 	addi	r4,r4,28812
    7070:	000ff200 	call	ff20 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    7074:	01400184 	movi	r5,6
    7078:	e13fff17 	ldw	r4,-4(fp)
    707c:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7080:	10bfffcc 	andi	r2,r2,65535
    7084:	100b883a 	mov	r5,r2
    7088:	010000b4 	movhi	r4,2
    708c:	211c2804 	addi	r4,r4,28832
    7090:	000ff200 	call	ff20 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    7094:	01400284 	movi	r5,10
    7098:	e13fff17 	ldw	r4,-4(fp)
    709c:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70a0:	10bfffcc 	andi	r2,r2,65535
    70a4:	100b883a 	mov	r5,r2
    70a8:	010000b4 	movhi	r4,2
    70ac:	211c2d04 	addi	r4,r4,28852
    70b0:	000ff200 	call	ff20 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    70b4:	01400c04 	movi	r5,48
    70b8:	e13fff17 	ldw	r4,-4(fp)
    70bc:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70c0:	10bfffcc 	andi	r2,r2,65535
    70c4:	100b883a 	mov	r5,r2
    70c8:	010000b4 	movhi	r4,2
    70cc:	211c3204 	addi	r4,r4,28872
    70d0:	000ff200 	call	ff20 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    70d4:	01400384 	movi	r5,14
    70d8:	e13fff17 	ldw	r4,-4(fp)
    70dc:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70e0:	10bfffcc 	andi	r2,r2,65535
    70e4:	100b883a 	mov	r5,r2
    70e8:	010000b4 	movhi	r4,2
    70ec:	211c3704 	addi	r4,r4,28892
    70f0:	000ff200 	call	ff20 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    70f4:	01400904 	movi	r5,36
    70f8:	e13fff17 	ldw	r4,-4(fp)
    70fc:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7100:	10bfffcc 	andi	r2,r2,65535
    7104:	100b883a 	mov	r5,r2
    7108:	010000b4 	movhi	r4,2
    710c:	211c3c04 	addi	r4,r4,28912
    7110:	000ff200 	call	ff20 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    7114:	01400e04 	movi	r5,56
    7118:	e13fff17 	ldw	r4,-4(fp)
    711c:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7120:	10bfffcc 	andi	r2,r2,65535
    7124:	100b883a 	mov	r5,r2
    7128:	010000b4 	movhi	r4,2
    712c:	211c4104 	addi	r4,r4,28932
    7130:	000ff200 	call	ff20 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    7134:	01400804 	movi	r5,32
    7138:	e13fff17 	ldw	r4,-4(fp)
    713c:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7140:	10bfffcc 	andi	r2,r2,65535
    7144:	100b883a 	mov	r5,r2
    7148:	010000b4 	movhi	r4,2
    714c:	211c4604 	addi	r4,r4,28952
    7150:	000ff200 	call	ff20 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    7154:	01400404 	movi	r5,16
    7158:	e13fff17 	ldw	r4,-4(fp)
    715c:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7160:	10bfffcc 	andi	r2,r2,65535
    7164:	100b883a 	mov	r5,r2
    7168:	010000b4 	movhi	r4,2
    716c:	211c4b04 	addi	r4,r4,28972
    7170:	000ff200 	call	ff20 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    7174:	01400884 	movi	r5,34
    7178:	e13fff17 	ldw	r4,-4(fp)
    717c:	0006ca80 	call	6ca8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7180:	10bfffcc 	andi	r2,r2,65535
    7184:	100b883a 	mov	r5,r2
    7188:	010000b4 	movhi	r4,2
    718c:	211c5004 	addi	r4,r4,28992
    7190:	000ff200 	call	ff20 <printf>
}
    7194:	0001883a 	nop
    7198:	e037883a 	mov	sp,fp
    719c:	dfc00117 	ldw	ra,4(sp)
    71a0:	df000017 	ldw	fp,0(sp)
    71a4:	dec00204 	addi	sp,sp,8
    71a8:	f800283a 	ret

000071ac <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>:

void SGTL5000vol_change(ALT_AVALON_I2C_DEV_t* dev, alt_u8 vol) {
    71ac:	defffa04 	addi	sp,sp,-24
    71b0:	dfc00515 	stw	ra,20(sp)
    71b4:	df000415 	stw	fp,16(sp)
    71b8:	df000404 	addi	fp,sp,16
    71bc:	e13ffe15 	stw	r4,-8(fp)
    71c0:	2805883a 	mov	r2,r5
    71c4:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 new_vol = DAC_MIN_VOL - ((vol * DAC_VOL_RANGE) / 0x7F);
    71c8:	e0bfff03 	ldbu	r2,-4(fp)
    71cc:	01402d04 	movi	r5,180
    71d0:	1009883a 	mov	r4,r2
    71d4:	000d8e00 	call	d8e0 <__mulsi3>
    71d8:	01401fc4 	movi	r5,127
    71dc:	1009883a 	mov	r4,r2
    71e0:	000d72c0 	call	d72c <__divsi3>
    71e4:	1007883a 	mov	r3,r2
    71e8:	00803c04 	movi	r2,240
    71ec:	10c5c83a 	sub	r2,r2,r3
    71f0:	e0bffc15 	stw	r2,-16(fp)
	alt_u16 set_vol = ((new_vol << 8) | new_vol);
    71f4:	e0bffc17 	ldw	r2,-16(fp)
    71f8:	1004923a 	slli	r2,r2,8
    71fc:	1007883a 	mov	r3,r2
    7200:	e0bffc17 	ldw	r2,-16(fp)
    7204:	1884b03a 	or	r2,r3,r2
    7208:	e0bffd0d 	sth	r2,-12(fp)
	I2Creg_wr(dev, DAC_VOL, set_vol);
    720c:	e0bffd0b 	ldhu	r2,-12(fp)
    7210:	100d883a 	mov	r6,r2
    7214:	01400404 	movi	r5,16
    7218:	e13ffe17 	ldw	r4,-8(fp)
    721c:	0006a4c0 	call	6a4c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    7220:	0001883a 	nop
    7224:	e037883a 	mov	sp,fp
    7228:	dfc00117 	ldw	ra,4(sp)
    722c:	df000017 	ldw	fp,0(sp)
    7230:	dec00204 	addi	sp,sp,8
    7234:	f800283a 	ret

00007238 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    7238:	defffb04 	addi	sp,sp,-20
    723c:	dfc00415 	stw	ra,16(sp)
    7240:	df000315 	stw	fp,12(sp)
    7244:	df000304 	addi	fp,sp,12
    7248:	e13ffe15 	stw	r4,-8(fp)
    724c:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    7250:	e0bffe17 	ldw	r2,-8(fp)
    7254:	1009883a 	mov	r4,r2
    7258:	0004e880 	call	4e88 <_ZN15USBDeviceConfigC1Ev>
    725c:	e0bffe17 	ldw	r2,-8(fp)
    7260:	10800104 	addi	r2,r2,4
    7264:	1009883a 	mov	r4,r2
    7268:	00091400 	call	9140 <_ZN21UsbMidiConfigXtracterC1Ev>
    726c:	008000b4 	movhi	r2,2
    7270:	109c5f04 	addi	r2,r2,29052
    7274:	e0fffe17 	ldw	r3,-8(fp)
    7278:	18800015 	stw	r2,0(r3)
    727c:	008000b4 	movhi	r2,2
    7280:	109c6b04 	addi	r2,r2,29100
    7284:	e0fffe17 	ldw	r3,-8(fp)
    7288:	18800115 	stw	r2,4(r3)
    728c:	e0bffe17 	ldw	r2,-8(fp)
    7290:	e0ffff17 	ldw	r3,-4(fp)
    7294:	10c00215 	stw	r3,8(r2)
    7298:	e0bffe17 	ldw	r2,-8(fp)
    729c:	10000305 	stb	zero,12(r2)
    72a0:	e0bffe17 	ldw	r2,-8(fp)
    72a4:	10000345 	stb	zero,13(r2)
    72a8:	e0bffe17 	ldw	r2,-8(fp)
    72ac:	10001705 	stb	zero,92(r2)
    72b0:	e0bffe17 	ldw	r2,-8(fp)
    72b4:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    72b8:	e03ffd05 	stb	zero,-12(fp)
    72bc:	e0bffd03 	ldbu	r2,-12(fp)
    72c0:	108000e8 	cmpgeui	r2,r2,3
    72c4:	10002d1e 	bne	r2,zero,737c <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    72c8:	e0fffd03 	ldbu	r3,-12(fp)
    72cc:	e13ffe17 	ldw	r4,-8(fp)
    72d0:	1805883a 	mov	r2,r3
    72d4:	1085883a 	add	r2,r2,r2
    72d8:	10c5883a 	add	r2,r2,r3
    72dc:	2085883a 	add	r2,r4,r2
    72e0:	108004c4 	addi	r2,r2,19
    72e4:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    72e8:	e13ffd03 	ldbu	r4,-12(fp)
    72ec:	e0bffd03 	ldbu	r2,-12(fp)
    72f0:	10000226 	beq	r2,zero,72fc <_ZN9USBH_MIDIC1EP3USB+0xc4>
    72f4:	0007883a 	mov	r3,zero
    72f8:	00000106 	br	7300 <_ZN9USBH_MIDIC1EP3USB+0xc8>
    72fc:	00c00204 	movi	r3,8
    7300:	e17ffe17 	ldw	r5,-8(fp)
    7304:	2005883a 	mov	r2,r4
    7308:	1085883a 	add	r2,r2,r2
    730c:	1105883a 	add	r2,r2,r4
    7310:	2885883a 	add	r2,r5,r2
    7314:	10800504 	addi	r2,r2,20
    7318:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    731c:	e13ffd03 	ldbu	r4,-12(fp)
    7320:	e0bffd03 	ldbu	r2,-12(fp)
    7324:	10000226 	beq	r2,zero,7330 <_ZN9USBH_MIDIC1EP3USB+0xf8>
    7328:	00c00044 	movi	r3,1
    732c:	00000106 	br	7334 <_ZN9USBH_MIDIC1EP3USB+0xfc>
    7330:	00c003c4 	movi	r3,15
    7334:	e17ffe17 	ldw	r5,-8(fp)
    7338:	2005883a 	mov	r2,r4
    733c:	1085883a 	add	r2,r2,r2
    7340:	1105883a 	add	r2,r2,r4
    7344:	2885883a 	add	r2,r5,r2
    7348:	10800404 	addi	r2,r2,16
    734c:	18c7883a 	add	r3,r3,r3
    7350:	18cb883a 	add	r5,r3,r3
    7354:	10c00143 	ldbu	r3,5(r2)
    7358:	18c000cc 	andi	r3,r3,3
    735c:	1809883a 	mov	r4,r3
    7360:	2807883a 	mov	r3,r5
    7364:	20c6b03a 	or	r3,r4,r3
    7368:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    736c:	e0bffd03 	ldbu	r2,-12(fp)
    7370:	10800044 	addi	r2,r2,1
    7374:	e0bffd05 	stb	r2,-12(fp)
    7378:	003fd006 	br	72bc <__alt_data_end+0xfc0072bc>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    737c:	e0bffe17 	ldw	r2,-8(fp)
    7380:	10800217 	ldw	r2,8(r2)
    7384:	10000626 	beq	r2,zero,73a0 <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    7388:	e0bffe17 	ldw	r2,-8(fp)
    738c:	10800217 	ldw	r2,8(r2)
    7390:	e0fffe17 	ldw	r3,-8(fp)
    7394:	180b883a 	mov	r5,r3
    7398:	1009883a 	mov	r4,r2
    739c:	0004c3c0 	call	4c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    73a0:	0001883a 	nop
    73a4:	e037883a 	mov	sp,fp
    73a8:	dfc00117 	ldw	ra,4(sp)
    73ac:	df000017 	ldw	fp,0(sp)
    73b0:	dec00204 	addi	sp,sp,8
    73b4:	f800283a 	ret

000073b8 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    73b8:	deffe004 	addi	sp,sp,-128
    73bc:	dfc01f15 	stw	ra,124(sp)
    73c0:	df001e15 	stw	fp,120(sp)
    73c4:	df001e04 	addi	fp,sp,120
    73c8:	e13ffc15 	stw	r4,-16(fp)
    73cc:	2809883a 	mov	r4,r5
    73d0:	3007883a 	mov	r3,r6
    73d4:	3805883a 	mov	r2,r7
    73d8:	e13ffd05 	stb	r4,-12(fp)
    73dc:	e0fffe05 	stb	r3,-8(fp)
    73e0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    73e4:	e0bfe944 	addi	r2,fp,-91
    73e8:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    73ec:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    73f0:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    73f4:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    73f8:	00800044 	movi	r2,1
    73fc:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7400:	00800044 	movi	r2,1
    7404:	e0bfe3c5 	stb	r2,-113(fp)
    7408:	e0bfe3c3 	ldbu	r2,-113(fp)
    740c:	108000e8 	cmpgeui	r2,r2,3
    7410:	10001a1e 	bne	r2,zero,747c <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    7414:	e0ffe3c3 	ldbu	r3,-113(fp)
    7418:	e13ffc17 	ldw	r4,-16(fp)
    741c:	1805883a 	mov	r2,r3
    7420:	1085883a 	add	r2,r2,r2
    7424:	10c5883a 	add	r2,r2,r3
    7428:	2085883a 	add	r2,r4,r2
    742c:	10800404 	addi	r2,r2,16
    7430:	11000143 	ldbu	r4,5(r2)
    7434:	00ffff84 	movi	r3,-2
    7438:	20c6703a 	and	r3,r4,r3
    743c:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    7440:	e0ffe3c3 	ldbu	r3,-113(fp)
    7444:	e13ffc17 	ldw	r4,-16(fp)
    7448:	1805883a 	mov	r2,r3
    744c:	1085883a 	add	r2,r2,r2
    7450:	10c5883a 	add	r2,r2,r3
    7454:	2085883a 	add	r2,r4,r2
    7458:	10800404 	addi	r2,r2,16
    745c:	11000143 	ldbu	r4,5(r2)
    7460:	00ffff44 	movi	r3,-3
    7464:	20c6703a 	and	r3,r4,r3
    7468:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    746c:	e0bfe3c3 	ldbu	r2,-113(fp)
    7470:	10800044 	addi	r2,r2,1
    7474:	e0bfe3c5 	stb	r2,-113(fp)
    7478:	003fe306 	br	7408 <__alt_data_end+0xfc007408>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    747c:	e0bffc17 	ldw	r2,-16(fp)
    7480:	10800217 	ldw	r2,8(r2)
    7484:	1009883a 	mov	r4,r2
    7488:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    748c:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    7490:	e0bffc17 	ldw	r2,-16(fp)
    7494:	10800303 	ldbu	r2,12(r2)
    7498:	10803fcc 	andi	r2,r2,255
    749c:	10000226 	beq	r2,zero,74a8 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    74a0:	00bff644 	movi	r2,-39
    74a4:	0001c706 	br	7bc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    74a8:	e0bfe817 	ldw	r2,-96(fp)
    74ac:	10800017 	ldw	r2,0(r2)
    74b0:	10800017 	ldw	r2,0(r2)
    74b4:	e0fffc17 	ldw	r3,-16(fp)
    74b8:	18c00303 	ldbu	r3,12(r3)
    74bc:	18c03fcc 	andi	r3,r3,255
    74c0:	180b883a 	mov	r5,r3
    74c4:	e13fe817 	ldw	r4,-96(fp)
    74c8:	103ee83a 	callr	r2
    74cc:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    74d0:	e0bfe617 	ldw	r2,-104(fp)
    74d4:	1000021e 	bne	r2,zero,74e0 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    74d8:	00bff584 	movi	r2,-42
    74dc:	0001b906 	br	7bc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    74e0:	e0bfe617 	ldw	r2,-104(fp)
    74e4:	10c00003 	ldbu	r3,0(r2)
    74e8:	11000043 	ldbu	r4,1(r2)
    74ec:	2008923a 	slli	r4,r4,8
    74f0:	20c6b03a 	or	r3,r4,r3
    74f4:	11000083 	ldbu	r4,2(r2)
    74f8:	2008943a 	slli	r4,r4,16
    74fc:	20c6b03a 	or	r3,r4,r3
    7500:	108000c3 	ldbu	r2,3(r2)
    7504:	1004963a 	slli	r2,r2,24
    7508:	10c4b03a 	or	r2,r2,r3
    750c:	1000021e 	bne	r2,zero,7518 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    7510:	00bff5c4 	movi	r2,-41
    7514:	0001ab06 	br	7bc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    7518:	e0bfe617 	ldw	r2,-104(fp)
    751c:	10c00003 	ldbu	r3,0(r2)
    7520:	11000043 	ldbu	r4,1(r2)
    7524:	2008923a 	slli	r4,r4,8
    7528:	20c6b03a 	or	r3,r4,r3
    752c:	11000083 	ldbu	r4,2(r2)
    7530:	2008943a 	slli	r4,r4,16
    7534:	20c6b03a 	or	r3,r4,r3
    7538:	108000c3 	ldbu	r2,3(r2)
    753c:	1004963a 	slli	r2,r2,24
    7540:	10c4b03a 	or	r2,r2,r3
    7544:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    7548:	e0bffc17 	ldw	r2,-16(fp)
    754c:	10c004c4 	addi	r3,r2,19
    7550:	e0bfe617 	ldw	r2,-104(fp)
    7554:	19803fcc 	andi	r6,r3,255
    7558:	11000003 	ldbu	r4,0(r2)
    755c:	2008703a 	and	r4,r4,zero
    7560:	200b883a 	mov	r5,r4
    7564:	3009883a 	mov	r4,r6
    7568:	2908b03a 	or	r4,r5,r4
    756c:	11000005 	stb	r4,0(r2)
    7570:	1808d23a 	srli	r4,r3,8
    7574:	21803fcc 	andi	r6,r4,255
    7578:	11000043 	ldbu	r4,1(r2)
    757c:	2008703a 	and	r4,r4,zero
    7580:	200b883a 	mov	r5,r4
    7584:	3009883a 	mov	r4,r6
    7588:	2908b03a 	or	r4,r5,r4
    758c:	11000045 	stb	r4,1(r2)
    7590:	1808d43a 	srli	r4,r3,16
    7594:	21803fcc 	andi	r6,r4,255
    7598:	11000083 	ldbu	r4,2(r2)
    759c:	2008703a 	and	r4,r4,zero
    75a0:	200b883a 	mov	r5,r4
    75a4:	3009883a 	mov	r4,r6
    75a8:	2908b03a 	or	r4,r5,r4
    75ac:	11000085 	stb	r4,2(r2)
    75b0:	180ad63a 	srli	r5,r3,24
    75b4:	10c000c3 	ldbu	r3,3(r2)
    75b8:	1806703a 	and	r3,r3,zero
    75bc:	1809883a 	mov	r4,r3
    75c0:	2807883a 	mov	r3,r5
    75c4:	20c6b03a 	or	r3,r4,r3
    75c8:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    75cc:	e0bfe617 	ldw	r2,-104(fp)
    75d0:	e0ffff03 	ldbu	r3,-4(fp)
    75d4:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    75d8:	e0bffc17 	ldw	r2,-16(fp)
    75dc:	10c00217 	ldw	r3,8(r2)
    75e0:	e0bfe944 	addi	r2,fp,-91
    75e4:	d8800015 	stw	r2,0(sp)
    75e8:	01c00204 	movi	r7,8
    75ec:	000d883a 	mov	r6,zero
    75f0:	000b883a 	mov	r5,zero
    75f4:	1809883a 	mov	r4,r3
    75f8:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    75fc:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    7600:	e0bfe617 	ldw	r2,-104(fp)
    7604:	e0ffe717 	ldw	r3,-100(fp)
    7608:	19403fcc 	andi	r5,r3,255
    760c:	10c00003 	ldbu	r3,0(r2)
    7610:	1806703a 	and	r3,r3,zero
    7614:	1809883a 	mov	r4,r3
    7618:	2807883a 	mov	r3,r5
    761c:	20c6b03a 	or	r3,r4,r3
    7620:	10c00005 	stb	r3,0(r2)
    7624:	e0ffe717 	ldw	r3,-100(fp)
    7628:	1806d23a 	srli	r3,r3,8
    762c:	19403fcc 	andi	r5,r3,255
    7630:	10c00043 	ldbu	r3,1(r2)
    7634:	1806703a 	and	r3,r3,zero
    7638:	1809883a 	mov	r4,r3
    763c:	2807883a 	mov	r3,r5
    7640:	20c6b03a 	or	r3,r4,r3
    7644:	10c00045 	stb	r3,1(r2)
    7648:	e0ffe717 	ldw	r3,-100(fp)
    764c:	1806d43a 	srli	r3,r3,16
    7650:	19403fcc 	andi	r5,r3,255
    7654:	10c00083 	ldbu	r3,2(r2)
    7658:	1806703a 	and	r3,r3,zero
    765c:	1809883a 	mov	r4,r3
    7660:	2807883a 	mov	r3,r5
    7664:	20c6b03a 	or	r3,r4,r3
    7668:	10c00085 	stb	r3,2(r2)
    766c:	e0ffe717 	ldw	r3,-100(fp)
    7670:	180ad63a 	srli	r5,r3,24
    7674:	10c000c3 	ldbu	r3,3(r2)
    7678:	1806703a 	and	r3,r3,zero
    767c:	1809883a 	mov	r4,r3
    7680:	2807883a 	mov	r3,r5
    7684:	20c6b03a 	or	r3,r4,r3
    7688:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    768c:	e0bfe303 	ldbu	r2,-116(fp)
    7690:	10013a1e 	bne	r2,zero,7b7c <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    7694:	e0bfe817 	ldw	r2,-96(fp)
    7698:	10800017 	ldw	r2,0(r2)
    769c:	10800104 	addi	r2,r2,4
    76a0:	10800017 	ldw	r2,0(r2)
    76a4:	e0fffd03 	ldbu	r3,-12(fp)
    76a8:	e13ffe03 	ldbu	r4,-8(fp)
    76ac:	200f883a 	mov	r7,r4
    76b0:	000d883a 	mov	r6,zero
    76b4:	180b883a 	mov	r5,r3
    76b8:	e13fe817 	ldw	r4,-96(fp)
    76bc:	103ee83a 	callr	r2
    76c0:	1007883a 	mov	r3,r2
    76c4:	e0bffc17 	ldw	r2,-16(fp)
    76c8:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    76cc:	e0bffc17 	ldw	r2,-16(fp)
    76d0:	10800303 	ldbu	r2,12(r2)
    76d4:	10803fcc 	andi	r2,r2,255
    76d8:	1000021e 	bne	r2,zero,76e4 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    76dc:	00bff504 	movi	r2,-44
    76e0:	00013806 	br	7bc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    76e4:	e0bfe517 	ldw	r2,-108(fp)
    76e8:	10c001c3 	ldbu	r3,7(r2)
    76ec:	e0bffc17 	ldw	r2,-16(fp)
    76f0:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    76f4:	e0bffc17 	ldw	r2,-16(fp)
    76f8:	10c00217 	ldw	r3,8(r2)
    76fc:	e0bffc17 	ldw	r2,-16(fp)
    7700:	10800303 	ldbu	r2,12(r2)
    7704:	10803fcc 	andi	r2,r2,255
    7708:	100f883a 	mov	r7,r2
    770c:	000d883a 	mov	r6,zero
    7710:	000b883a 	mov	r5,zero
    7714:	1809883a 	mov	r4,r3
    7718:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    771c:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    7720:	e0bfe303 	ldbu	r2,-116(fp)
    7724:	10001026 	beq	r2,zero,7768 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    7728:	e0bfe617 	ldw	r2,-104(fp)
    772c:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    7730:	e0bfe817 	ldw	r2,-96(fp)
    7734:	10800017 	ldw	r2,0(r2)
    7738:	10800204 	addi	r2,r2,8
    773c:	10800017 	ldw	r2,0(r2)
    7740:	e0fffc17 	ldw	r3,-16(fp)
    7744:	18c00303 	ldbu	r3,12(r3)
    7748:	18c03fcc 	andi	r3,r3,255
    774c:	180b883a 	mov	r5,r3
    7750:	e13fe817 	ldw	r4,-96(fp)
    7754:	103ee83a 	callr	r2
                bAddress = 0;
    7758:	e0bffc17 	ldw	r2,-16(fp)
    775c:	10000305 	stb	zero,12(r2)
                return rcode;
    7760:	e0bfe303 	ldbu	r2,-116(fp)
    7764:	00011706 	br	7bc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    7768:	e0bffc17 	ldw	r2,-16(fp)
    776c:	10800303 	ldbu	r2,12(r2)
    7770:	10803fcc 	andi	r2,r2,255
    7774:	01402004 	movi	r5,128
    7778:	1009883a 	mov	r4,r2
    777c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    7780:	e0bfe617 	ldw	r2,-104(fp)
    7784:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    7788:	e0bfe817 	ldw	r2,-96(fp)
    778c:	10800017 	ldw	r2,0(r2)
    7790:	10800017 	ldw	r2,0(r2)
    7794:	e0fffc17 	ldw	r3,-16(fp)
    7798:	18c00303 	ldbu	r3,12(r3)
    779c:	18c03fcc 	andi	r3,r3,255
    77a0:	180b883a 	mov	r5,r3
    77a4:	e13fe817 	ldw	r4,-96(fp)
    77a8:	103ee83a 	callr	r2
    77ac:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    77b0:	e0bfe617 	ldw	r2,-104(fp)
    77b4:	1000021e 	bne	r2,zero,77c0 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    77b8:	00bff584 	movi	r2,-42
    77bc:	00010106 	br	7bc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    77c0:	e0bfe617 	ldw	r2,-104(fp)
    77c4:	e0ffff03 	ldbu	r3,-4(fp)
    77c8:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    77cc:	e0bffc17 	ldw	r2,-16(fp)
    77d0:	10c00217 	ldw	r3,8(r2)
    77d4:	e0bffc17 	ldw	r2,-16(fp)
    77d8:	10800303 	ldbu	r2,12(r2)
    77dc:	11003fcc 	andi	r4,r2,255
    77e0:	00800484 	movi	r2,18
    77e4:	117fffcc 	andi	r5,r2,65535
    77e8:	e0bfe944 	addi	r2,fp,-91
    77ec:	d8800015 	stw	r2,0(sp)
    77f0:	280f883a 	mov	r7,r5
    77f4:	000d883a 	mov	r6,zero
    77f8:	200b883a 	mov	r5,r4
    77fc:	1809883a 	mov	r4,r3
    7800:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    7804:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    7808:	e0bfe303 	ldbu	r2,-116(fp)
    780c:	1000dd1e 	bne	r2,zero,7b84 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    7810:	e0bfe517 	ldw	r2,-108(fp)
    7814:	10c00203 	ldbu	r3,8(r2)
    7818:	10800243 	ldbu	r2,9(r2)
    781c:	1004923a 	slli	r2,r2,8
    7820:	10c4b03a 	or	r2,r2,r3
    7824:	1007883a 	mov	r3,r2
    7828:	e0bffc17 	ldw	r2,-16(fp)
    782c:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    7830:	e0bfe517 	ldw	r2,-108(fp)
    7834:	10c00283 	ldbu	r3,10(r2)
    7838:	108002c3 	ldbu	r2,11(r2)
    783c:	1004923a 	slli	r2,r2,8
    7840:	10c4b03a 	or	r2,r2,r3
    7844:	1007883a 	mov	r3,r2
    7848:	e0bffc17 	ldw	r2,-16(fp)
    784c:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    7850:	e0bfe517 	ldw	r2,-108(fp)
    7854:	10800443 	ldbu	r2,17(r2)
    7858:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    785c:	e0bffc17 	ldw	r2,-16(fp)
    7860:	10c00217 	ldw	r3,8(r2)
    7864:	e0bffc17 	ldw	r2,-16(fp)
    7868:	10800303 	ldbu	r2,12(r2)
    786c:	11003fcc 	andi	r4,r2,255
    7870:	e0bffc17 	ldw	r2,-16(fp)
    7874:	108004c4 	addi	r2,r2,19
    7878:	100f883a 	mov	r7,r2
    787c:	01800044 	movi	r6,1
    7880:	200b883a 	mov	r5,r4
    7884:	1809883a 	mov	r4,r3
    7888:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    788c:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    7890:	e0bfe303 	ldbu	r2,-116(fp)
    7894:	1000bd1e 	bne	r2,zero,7b8c <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    7898:	e0bffc17 	ldw	r2,-16(fp)
    789c:	1080040b 	ldhu	r2,16(r2)
    78a0:	10bfffcc 	andi	r2,r2,65535
    78a4:	01402004 	movi	r5,128
    78a8:	1009883a 	mov	r4,r2
    78ac:	00091740 	call	9174 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    78b0:	e0bffc17 	ldw	r2,-16(fp)
    78b4:	1080038b 	ldhu	r2,14(r2)
    78b8:	10bfffcc 	andi	r2,r2,65535
    78bc:	01402004 	movi	r5,128
    78c0:	1009883a 	mov	r4,r2
    78c4:	00091740 	call	9174 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    78c8:	e0bfe903 	ldbu	r2,-92(fp)
    78cc:	01402004 	movi	r5,128
    78d0:	1009883a 	mov	r4,r2
    78d4:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    78d8:	e0bffc17 	ldw	r2,-16(fp)
    78dc:	00c000c4 	movi	r3,3
    78e0:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    78e4:	e13ffc17 	ldw	r4,-16(fp)
    78e8:	0007c500 	call	7c50 <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    78ec:	e03fe405 	stb	zero,-112(fp)
    78f0:	e0ffe403 	ldbu	r3,-112(fp)
    78f4:	e0bfe903 	ldbu	r2,-92(fp)
    78f8:	18802a2e 	bgeu	r3,r2,79a4 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    78fc:	e0bffc17 	ldw	r2,-16(fp)
    7900:	10c00104 	addi	r3,r2,4
    7904:	e0bfee04 	addi	r2,fp,-72
    7908:	01800044 	movi	r6,1
    790c:	180b883a 	mov	r5,r3
    7910:	1009883a 	mov	r4,r2
    7914:	00087500 	call	8750 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    7918:	e0bffc17 	ldw	r2,-16(fp)
    791c:	10c00217 	ldw	r3,8(r2)
    7920:	e0bffc17 	ldw	r2,-16(fp)
    7924:	10800303 	ldbu	r2,12(r2)
    7928:	11003fcc 	andi	r4,r2,255
    792c:	e17fe403 	ldbu	r5,-112(fp)
    7930:	e0bfee04 	addi	r2,fp,-72
    7934:	d8800015 	stw	r2,0(sp)
    7938:	280f883a 	mov	r7,r5
    793c:	000d883a 	mov	r6,zero
    7940:	200b883a 	mov	r5,r4
    7944:	1809883a 	mov	r4,r3
    7948:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    794c:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    7950:	e0bfe303 	ldbu	r2,-116(fp)
    7954:	10008f1e 	bne	r2,zero,7b94 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    7958:	e0bfee04 	addi	r2,fp,-72
    795c:	1009883a 	mov	r4,r2
    7960:	000905c0 	call	905c <_ZN14MidiDescParser9getNumEPsEv>
    7964:	1007883a 	mov	r3,r2
    7968:	e0bfe383 	ldbu	r2,-114(fp)
    796c:	10c5883a 	add	r2,r2,r3
    7970:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    7974:	e0bfe383 	ldbu	r2,-114(fp)
    7978:	108000b0 	cmpltui	r2,r2,2
    797c:	1000051e 	bne	r2,zero,7994 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    7980:	e0bfee04 	addi	r2,fp,-72
    7984:	1009883a 	mov	r4,r2
    7988:	00090340 	call	9034 <_ZN14MidiDescParser12getConfValueEv>
    798c:	e0bfe345 	stb	r2,-115(fp)
    7990:	00000406 	br	79a4 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    7994:	e0bfe403 	ldbu	r2,-112(fp)
    7998:	10800044 	addi	r2,r2,1
    799c:	e0bfe405 	stb	r2,-112(fp)
    79a0:	003fd306 	br	78f0 <__alt_data_end+0xfc0078f0>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    79a4:	e0bfe383 	ldbu	r2,-114(fp)
    79a8:	01402004 	movi	r5,128
    79ac:	1009883a 	mov	r4,r2
    79b0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    79b4:	e0bfe383 	ldbu	r2,-114(fp)
    79b8:	10800058 	cmpnei	r2,r2,1
    79bc:	1000321e 	bne	r2,zero,7a88 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    79c0:	e03fe445 	stb	zero,-111(fp)
    79c4:	e0ffe443 	ldbu	r3,-111(fp)
    79c8:	e0bfe903 	ldbu	r2,-92(fp)
    79cc:	18802a2e 	bgeu	r3,r2,7a78 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    79d0:	e0bffc17 	ldw	r2,-16(fp)
    79d4:	10c00104 	addi	r3,r2,4
    79d8:	e0bfee04 	addi	r2,fp,-72
    79dc:	000d883a 	mov	r6,zero
    79e0:	180b883a 	mov	r5,r3
    79e4:	1009883a 	mov	r4,r2
    79e8:	00087500 	call	8750 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    79ec:	e0bffc17 	ldw	r2,-16(fp)
    79f0:	10c00217 	ldw	r3,8(r2)
    79f4:	e0bffc17 	ldw	r2,-16(fp)
    79f8:	10800303 	ldbu	r2,12(r2)
    79fc:	11003fcc 	andi	r4,r2,255
    7a00:	e17fe443 	ldbu	r5,-111(fp)
    7a04:	e0bfee04 	addi	r2,fp,-72
    7a08:	d8800015 	stw	r2,0(sp)
    7a0c:	280f883a 	mov	r7,r5
    7a10:	000d883a 	mov	r6,zero
    7a14:	200b883a 	mov	r5,r4
    7a18:	1809883a 	mov	r4,r3
    7a1c:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7a20:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    7a24:	e0bfe303 	ldbu	r2,-116(fp)
    7a28:	10005c1e 	bne	r2,zero,7b9c <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    7a2c:	e0bfee04 	addi	r2,fp,-72
    7a30:	1009883a 	mov	r4,r2
    7a34:	000905c0 	call	905c <_ZN14MidiDescParser9getNumEPsEv>
    7a38:	1007883a 	mov	r3,r2
    7a3c:	e0bfe383 	ldbu	r2,-114(fp)
    7a40:	10c5883a 	add	r2,r2,r3
    7a44:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    7a48:	e0bfe383 	ldbu	r2,-114(fp)
    7a4c:	108000b0 	cmpltui	r2,r2,2
    7a50:	1000051e 	bne	r2,zero,7a68 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    7a54:	e0bfee04 	addi	r2,fp,-72
    7a58:	1009883a 	mov	r4,r2
    7a5c:	00090340 	call	9034 <_ZN14MidiDescParser12getConfValueEv>
    7a60:	e0bfe345 	stb	r2,-115(fp)
    7a64:	00000406 	br	7a78 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7a68:	e0bfe443 	ldbu	r2,-111(fp)
    7a6c:	10800044 	addi	r2,r2,1
    7a70:	e0bfe445 	stb	r2,-111(fp)
    7a74:	003fd306 	br	79c4 <__alt_data_end+0xfc0079c4>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    7a78:	e0bfe383 	ldbu	r2,-114(fp)
    7a7c:	01402004 	movi	r5,128
    7a80:	1009883a 	mov	r4,r2
    7a84:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    7a88:	e0bfe383 	ldbu	r2,-114(fp)
    7a8c:	108000a8 	cmpgeui	r2,r2,2
    7a90:	1000031e 	bne	r2,zero,7aa0 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    7a94:	00bfffc4 	movi	r2,-1
    7a98:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    7a9c:	00004206 	br	7ba8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    7aa0:	e0bffc17 	ldw	r2,-16(fp)
    7aa4:	10c00217 	ldw	r3,8(r2)
    7aa8:	e0bffc17 	ldw	r2,-16(fp)
    7aac:	10800303 	ldbu	r2,12(r2)
    7ab0:	11003fcc 	andi	r4,r2,255
    7ab4:	e0bffc17 	ldw	r2,-16(fp)
    7ab8:	108004c4 	addi	r2,r2,19
    7abc:	100f883a 	mov	r7,r2
    7ac0:	018000c4 	movi	r6,3
    7ac4:	200b883a 	mov	r5,r4
    7ac8:	1809883a 	mov	r4,r3
    7acc:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7ad0:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    7ad4:	e0bfe343 	ldbu	r2,-115(fp)
    7ad8:	01402004 	movi	r5,128
    7adc:	1009883a 	mov	r4,r2
    7ae0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    7ae4:	e0bffc17 	ldw	r2,-16(fp)
    7ae8:	10800583 	ldbu	r2,22(r2)
    7aec:	10bfe004 	addi	r2,r2,-128
    7af0:	10803fcc 	andi	r2,r2,255
    7af4:	01402004 	movi	r5,128
    7af8:	1009883a 	mov	r4,r2
    7afc:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    7b00:	e0bffc17 	ldw	r2,-16(fp)
    7b04:	10800643 	ldbu	r2,25(r2)
    7b08:	10803fcc 	andi	r2,r2,255
    7b0c:	01402004 	movi	r5,128
    7b10:	1009883a 	mov	r4,r2
    7b14:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    7b18:	e0bffc17 	ldw	r2,-16(fp)
    7b1c:	10c00217 	ldw	r3,8(r2)
    7b20:	e0bffc17 	ldw	r2,-16(fp)
    7b24:	10800303 	ldbu	r2,12(r2)
    7b28:	10803fcc 	andi	r2,r2,255
    7b2c:	e13fe343 	ldbu	r4,-115(fp)
    7b30:	200f883a 	mov	r7,r4
    7b34:	000d883a 	mov	r6,zero
    7b38:	100b883a 	mov	r5,r2
    7b3c:	1809883a 	mov	r4,r3
    7b40:	0002b940 	call	2b94 <_ZN3USB7setConfEhhh>
    7b44:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    7b48:	e0bfe303 	ldbu	r2,-116(fp)
    7b4c:	1000151e 	bne	r2,zero,7ba4 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    7b50:	e0bffc17 	ldw	r2,-16(fp)
    7b54:	10801817 	ldw	r2,96(r2)
    7b58:	10000326 	beq	r2,zero,7b68 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    7b5c:	e0bffc17 	ldw	r2,-16(fp)
    7b60:	10801817 	ldw	r2,96(r2)
    7b64:	103ee83a 	callr	r2

        bPollEnable = true;
    7b68:	e0bffc17 	ldw	r2,-16(fp)
    7b6c:	00c00044 	movi	r3,1
    7b70:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    7b74:	0005883a 	mov	r2,zero
    7b78:	00001206 	br	7bc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    7b7c:	0001883a 	nop
    7b80:	00000906 	br	7ba8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    7b84:	0001883a 	nop
    7b88:	00000706 	br	7ba8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    7b8c:	0001883a 	nop
    7b90:	00000506 	br	7ba8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    7b94:	0001883a 	nop
    7b98:	00000306 	br	7ba8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    7b9c:	0001883a 	nop
    7ba0:	00000106 	br	7ba8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    7ba4:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    7ba8:	e0bffc17 	ldw	r2,-16(fp)
    7bac:	10800017 	ldw	r2,0(r2)
    7bb0:	10800204 	addi	r2,r2,8
    7bb4:	10800017 	ldw	r2,0(r2)
    7bb8:	e13ffc17 	ldw	r4,-16(fp)
    7bbc:	103ee83a 	callr	r2
        return rcode;
    7bc0:	e0bfe303 	ldbu	r2,-116(fp)
}
    7bc4:	e037883a 	mov	sp,fp
    7bc8:	dfc00117 	ldw	ra,4(sp)
    7bcc:	df000017 	ldw	fp,0(sp)
    7bd0:	dec00204 	addi	sp,sp,8
    7bd4:	f800283a 	ret

00007bd8 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    7bd8:	defffd04 	addi	sp,sp,-12
    7bdc:	dfc00215 	stw	ra,8(sp)
    7be0:	df000115 	stw	fp,4(sp)
    7be4:	df000104 	addi	fp,sp,4
    7be8:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    7bec:	e0bfff17 	ldw	r2,-4(fp)
    7bf0:	10800217 	ldw	r2,8(r2)
    7bf4:	1009883a 	mov	r4,r2
    7bf8:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    7bfc:	1009883a 	mov	r4,r2
    7c00:	20800017 	ldw	r2,0(r4)
    7c04:	10800204 	addi	r2,r2,8
    7c08:	10800017 	ldw	r2,0(r2)
    7c0c:	e0ffff17 	ldw	r3,-4(fp)
    7c10:	18c00303 	ldbu	r3,12(r3)
    7c14:	18c03fcc 	andi	r3,r3,255
    7c18:	180b883a 	mov	r5,r3
    7c1c:	103ee83a 	callr	r2
        bAddress     = 0;
    7c20:	e0bfff17 	ldw	r2,-4(fp)
    7c24:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    7c28:	e0bfff17 	ldw	r2,-4(fp)
    7c2c:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    7c30:	e0bfff17 	ldw	r2,-4(fp)
    7c34:	10001705 	stb	zero,92(r2)
        return 0;
    7c38:	0005883a 	mov	r2,zero
}
    7c3c:	e037883a 	mov	sp,fp
    7c40:	dfc00117 	ldw	ra,4(sp)
    7c44:	df000017 	ldw	fp,0(sp)
    7c48:	dec00204 	addi	sp,sp,8
    7c4c:	f800283a 	ret

00007c50 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    7c50:	defffe04 	addi	sp,sp,-8
    7c54:	df000115 	stw	fp,4(sp)
    7c58:	df000104 	addi	fp,sp,4
    7c5c:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    7c60:	e0bfff17 	ldw	r2,-4(fp)
    7c64:	1080040b 	ldhu	r2,16(r2)
    7c68:	10bfffcc 	andi	r2,r2,65535
    7c6c:	10848d58 	cmpnei	r2,r2,4661
    7c70:	1000351e 	bne	r2,zero,7d48 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    7c74:	e0bfff17 	ldw	r2,-4(fp)
    7c78:	1080038b 	ldhu	r2,14(r2)
    7c7c:	10bfffcc 	andi	r2,r2,65535
    7c80:	10800820 	cmpeqi	r2,r2,32
    7c84:	10000f1e 	bne	r2,zero,7cc4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7c88:	e0bfff17 	ldw	r2,-4(fp)
    7c8c:	1080038b 	ldhu	r2,14(r2)
    7c90:	10bfffcc 	andi	r2,r2,65535
    7c94:	10800da0 	cmpeqi	r2,r2,54
    7c98:	10000a1e 	bne	r2,zero,7cc4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7c9c:	e0bfff17 	ldw	r2,-4(fp)
    7ca0:	1080038b 	ldhu	r2,14(r2)
    7ca4:	10bfffcc 	andi	r2,r2,65535
    7ca8:	10801460 	cmpeqi	r2,r2,81
    7cac:	1000051e 	bne	r2,zero,7cc4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7cb0:	e0bfff17 	ldw	r2,-4(fp)
    7cb4:	1080038b 	ldhu	r2,14(r2)
    7cb8:	10bfffcc 	andi	r2,r2,65535
    7cbc:	10801a58 	cmpnei	r2,r2,105
    7cc0:	1000041e 	bne	r2,zero,7cd4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    7cc4:	e0bfff17 	ldw	r2,-4(fp)
    7cc8:	00c00084 	movi	r3,2
    7ccc:	10c00485 	stb	r3,18(r2)
                        return;
    7cd0:	00001d06 	br	7d48 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    7cd4:	e0bfff17 	ldw	r2,-4(fp)
    7cd8:	1080038b 	ldhu	r2,14(r2)
    7cdc:	10bfffcc 	andi	r2,r2,65535
    7ce0:	10800c30 	cmpltui	r2,r2,48
    7ce4:	1000051e 	bne	r2,zero,7cfc <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    7ce8:	e0bfff17 	ldw	r2,-4(fp)
    7cec:	1080038b 	ldhu	r2,14(r2)
    7cf0:	10bfffcc 	andi	r2,r2,65535
    7cf4:	10800cf0 	cmpltui	r2,r2,51
    7cf8:	10000f1e 	bne	r2,zero,7d38 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7cfc:	e0bfff17 	ldw	r2,-4(fp)
    7d00:	1080038b 	ldhu	r2,14(r2)
    7d04:	10bfffcc 	andi	r2,r2,65535
    7d08:	10800d60 	cmpeqi	r2,r2,53
    7d0c:	10000a1e 	bne	r2,zero,7d38 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7d10:	e0bfff17 	ldw	r2,-4(fp)
    7d14:	1080038b 	ldhu	r2,14(r2)
    7d18:	10bfffcc 	andi	r2,r2,65535
    7d1c:	10801ef0 	cmpltui	r2,r2,123
    7d20:	1000091e 	bne	r2,zero,7d48 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    7d24:	e0bfff17 	ldw	r2,-4(fp)
    7d28:	1080038b 	ldhu	r2,14(r2)
    7d2c:	10bfffcc 	andi	r2,r2,65535
    7d30:	10801fa8 	cmpgeui	r2,r2,126
    7d34:	1000041e 	bne	r2,zero,7d48 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    7d38:	e0bfff17 	ldw	r2,-4(fp)
    7d3c:	00c00084 	movi	r3,2
    7d40:	10c00485 	stb	r3,18(r2)
                        return;
    7d44:	0001883a 	nop
                }
        }
}
    7d48:	e037883a 	mov	sp,fp
    7d4c:	df000017 	ldw	fp,0(sp)
    7d50:	dec00104 	addi	sp,sp,4
    7d54:	f800283a 	ret

00007d58 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    7d58:	defff804 	addi	sp,sp,-32
    7d5c:	dfc00715 	stw	ra,28(sp)
    7d60:	df000615 	stw	fp,24(sp)
    7d64:	df000604 	addi	fp,sp,24
    7d68:	e13ffd15 	stw	r4,-12(fp)
    7d6c:	e17ffe15 	stw	r5,-8(fp)
    7d70:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    7d74:	e0bffd17 	ldw	r2,-12(fp)
    7d78:	108005c3 	ldbu	r2,23(r2)
    7d7c:	10c03fcc 	andi	r3,r2,255
    7d80:	e0bffe17 	ldw	r2,-8(fp)
    7d84:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7d88:	e0bffd17 	ldw	r2,-12(fp)
    7d8c:	10c00217 	ldw	r3,8(r2)
    7d90:	e0bffd17 	ldw	r2,-12(fp)
    7d94:	10800303 	ldbu	r2,12(r2)
    7d98:	11003fcc 	andi	r4,r2,255
    7d9c:	e0bffd17 	ldw	r2,-12(fp)
    7da0:	10800583 	ldbu	r2,22(r2)
    7da4:	11403fcc 	andi	r5,r2,255
    7da8:	d8000115 	stw	zero,4(sp)
    7dac:	e0bfff17 	ldw	r2,-4(fp)
    7db0:	d8800015 	stw	r2,0(sp)
    7db4:	e1fffe17 	ldw	r7,-8(fp)
    7db8:	280d883a 	mov	r6,r5
    7dbc:	200b883a 	mov	r5,r4
    7dc0:	1809883a 	mov	r4,r3
    7dc4:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    7dc8:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    7dcc:	e0bffe17 	ldw	r2,-8(fp)
    7dd0:	1080000b 	ldhu	r2,0(r2)
    7dd4:	10bfffcc 	andi	r2,r2,65535
    7dd8:	10800f28 	cmpgeui	r2,r2,60
    7ddc:	10000d1e 	bne	r2,zero,7e14 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    7de0:	e0bffe17 	ldw	r2,-8(fp)
    7de4:	1080000b 	ldhu	r2,0(r2)
    7de8:	10bfffcc 	andi	r2,r2,65535
    7dec:	e0ffff17 	ldw	r3,-4(fp)
    7df0:	1885883a 	add	r2,r3,r2
    7df4:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7df8:	e0bffe17 	ldw	r2,-8(fp)
    7dfc:	1080000b 	ldhu	r2,0(r2)
    7e00:	10bfffcc 	andi	r2,r2,65535
    7e04:	10800044 	addi	r2,r2,1
    7e08:	e0ffff17 	ldw	r3,-4(fp)
    7e0c:	1885883a 	add	r2,r3,r2
    7e10:	10000005 	stb	zero,0(r2)
        }
        return r;
    7e14:	e0bffc03 	ldbu	r2,-16(fp)
}
    7e18:	e037883a 	mov	sp,fp
    7e1c:	dfc00117 	ldw	ra,4(sp)
    7e20:	df000017 	ldw	fp,0(sp)
    7e24:	dec00204 	addi	sp,sp,8
    7e28:	f800283a 	ret

00007e2c <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7e2c:	defff904 	addi	sp,sp,-28
    7e30:	dfc00615 	stw	ra,24(sp)
    7e34:	df000515 	stw	fp,20(sp)
    7e38:	df000504 	addi	fp,sp,20
    7e3c:	e13ffd15 	stw	r4,-12(fp)
    7e40:	e17ffe15 	stw	r5,-8(fp)
    7e44:	3005883a 	mov	r2,r6
    7e48:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7e4c:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7e50:	e0bffd17 	ldw	r2,-12(fp)
    7e54:	10800343 	ldbu	r2,13(r2)
    7e58:	1080005c 	xori	r2,r2,1
    7e5c:	10803fcc 	andi	r2,r2,255
    7e60:	10000226 	beq	r2,zero,7e6c <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7e64:	0005883a 	mov	r2,zero
    7e68:	00008506 	br	8080 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7e6c:	e0bffd17 	ldw	r2,-12(fp)
    7e70:	10801703 	ldbu	r2,92(r2)
    7e74:	10803fcc 	andi	r2,r2,255
    7e78:	10001826 	beq	r2,zero,7edc <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7e7c:	e0bffd17 	ldw	r2,-12(fp)
    7e80:	10801703 	ldbu	r2,92(r2)
    7e84:	10803fcc 	andi	r2,r2,255
    7e88:	10801028 	cmpgeui	r2,r2,64
    7e8c:	1000131e 	bne	r2,zero,7edc <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7e90:	e0bffd17 	ldw	r2,-12(fp)
    7e94:	10801703 	ldbu	r2,92(r2)
    7e98:	10803fcc 	andi	r2,r2,255
    7e9c:	e0fffd17 	ldw	r3,-12(fp)
    7ea0:	1885883a 	add	r2,r3,r2
    7ea4:	10800704 	addi	r2,r2,28
    7ea8:	10800003 	ldbu	r2,0(r2)
    7eac:	10803fcc 	andi	r2,r2,255
    7eb0:	10002a1e 	bne	r2,zero,7f5c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7eb4:	e0bffd17 	ldw	r2,-12(fp)
    7eb8:	10801703 	ldbu	r2,92(r2)
    7ebc:	10803fcc 	andi	r2,r2,255
    7ec0:	10800044 	addi	r2,r2,1
    7ec4:	e0fffd17 	ldw	r3,-12(fp)
    7ec8:	1885883a 	add	r2,r3,r2
    7ecc:	10800704 	addi	r2,r2,28
    7ed0:	10800003 	ldbu	r2,0(r2)
    7ed4:	10803fcc 	andi	r2,r2,255
    7ed8:	1000201e 	bne	r2,zero,7f5c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7edc:	e0bffd17 	ldw	r2,-12(fp)
    7ee0:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7ee4:	e0bffd17 	ldw	r2,-12(fp)
    7ee8:	10c00704 	addi	r3,r2,28
    7eec:	e0bffc04 	addi	r2,fp,-16
    7ef0:	180d883a 	mov	r6,r3
    7ef4:	100b883a 	mov	r5,r2
    7ef8:	e13ffd17 	ldw	r4,-12(fp)
    7efc:	0007d580 	call	7d58 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7f00:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7f04:	e0bffb03 	ldbu	r2,-20(fp)
    7f08:	10000226 	beq	r2,zero,7f14 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7f0c:	0005883a 	mov	r2,zero
    7f10:	00005b06 	br	8080 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7f14:	e0bffd17 	ldw	r2,-12(fp)
    7f18:	10800703 	ldbu	r2,28(r2)
    7f1c:	10803fcc 	andi	r2,r2,255
    7f20:	10000e1e 	bne	r2,zero,7f5c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7f24:	e0bffd17 	ldw	r2,-12(fp)
    7f28:	10800743 	ldbu	r2,29(r2)
    7f2c:	10803fcc 	andi	r2,r2,255
    7f30:	10000a1e 	bne	r2,zero,7f5c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7f34:	e0bffd17 	ldw	r2,-12(fp)
    7f38:	10800783 	ldbu	r2,30(r2)
    7f3c:	10803fcc 	andi	r2,r2,255
    7f40:	1000061e 	bne	r2,zero,7f5c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7f44:	e0bffd17 	ldw	r2,-12(fp)
    7f48:	108007c3 	ldbu	r2,31(r2)
    7f4c:	10803fcc 	andi	r2,r2,255
    7f50:	1000021e 	bne	r2,zero,7f5c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    7f54:	0005883a 	mov	r2,zero
    7f58:	00004906 	br	8080 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    7f5c:	e0bffd17 	ldw	r2,-12(fp)
    7f60:	10801703 	ldbu	r2,92(r2)
    7f64:	10803fcc 	andi	r2,r2,255
    7f68:	e0fffd17 	ldw	r3,-12(fp)
    7f6c:	1885883a 	add	r2,r3,r2
    7f70:	10800704 	addi	r2,r2,28
    7f74:	10800003 	ldbu	r2,0(r2)
    7f78:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    7f7c:	e0bfff03 	ldbu	r2,-4(fp)
    7f80:	10000526 	beq	r2,zero,7f98 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    7f84:	e0bffe17 	ldw	r2,-8(fp)
    7f88:	10c00044 	addi	r3,r2,1
    7f8c:	e0fffe15 	stw	r3,-8(fp)
    7f90:	e0fffb43 	ldbu	r3,-19(fp)
    7f94:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    7f98:	e0bffd17 	ldw	r2,-12(fp)
    7f9c:	10801703 	ldbu	r2,92(r2)
    7fa0:	10800044 	addi	r2,r2,1
    7fa4:	1007883a 	mov	r3,r2
    7fa8:	e0bffd17 	ldw	r2,-12(fp)
    7fac:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    7fb0:	e0bffe17 	ldw	r2,-8(fp)
    7fb4:	10c00044 	addi	r3,r2,1
    7fb8:	e0fffe15 	stw	r3,-8(fp)
    7fbc:	e0fffd17 	ldw	r3,-12(fp)
    7fc0:	18c01703 	ldbu	r3,92(r3)
    7fc4:	19000044 	addi	r4,r3,1
    7fc8:	200b883a 	mov	r5,r4
    7fcc:	e13ffd17 	ldw	r4,-12(fp)
    7fd0:	21401705 	stb	r5,92(r4)
    7fd4:	18c03fcc 	andi	r3,r3,255
    7fd8:	e13ffd17 	ldw	r4,-12(fp)
    7fdc:	20c7883a 	add	r3,r4,r3
    7fe0:	18c00704 	addi	r3,r3,28
    7fe4:	18c00003 	ldbu	r3,0(r3)
    7fe8:	e0fffb85 	stb	r3,-18(fp)
    7fec:	e0fffb83 	ldbu	r3,-18(fp)
    7ff0:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7ff4:	e0bffe17 	ldw	r2,-8(fp)
    7ff8:	10c00044 	addi	r3,r2,1
    7ffc:	e0fffe15 	stw	r3,-8(fp)
    8000:	e0fffd17 	ldw	r3,-12(fp)
    8004:	18c01703 	ldbu	r3,92(r3)
    8008:	19000044 	addi	r4,r3,1
    800c:	200b883a 	mov	r5,r4
    8010:	e13ffd17 	ldw	r4,-12(fp)
    8014:	21401705 	stb	r5,92(r4)
    8018:	18c03fcc 	andi	r3,r3,255
    801c:	e13ffd17 	ldw	r4,-12(fp)
    8020:	20c7883a 	add	r3,r4,r3
    8024:	18c00704 	addi	r3,r3,28
    8028:	18c00003 	ldbu	r3,0(r3)
    802c:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    8030:	e0bffe17 	ldw	r2,-8(fp)
    8034:	10c00044 	addi	r3,r2,1
    8038:	e0fffe15 	stw	r3,-8(fp)
    803c:	e0fffd17 	ldw	r3,-12(fp)
    8040:	18c01703 	ldbu	r3,92(r3)
    8044:	19000044 	addi	r4,r3,1
    8048:	200b883a 	mov	r5,r4
    804c:	e13ffd17 	ldw	r4,-12(fp)
    8050:	21401705 	stb	r5,92(r4)
    8054:	18c03fcc 	andi	r3,r3,255
    8058:	e13ffd17 	ldw	r4,-12(fp)
    805c:	20c7883a 	add	r3,r4,r3
    8060:	18c00704 	addi	r3,r3,28
    8064:	18c00003 	ldbu	r3,0(r3)
    8068:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    806c:	e0bffb43 	ldbu	r2,-19(fp)
    8070:	108003cc 	andi	r2,r2,15
    8074:	100b883a 	mov	r5,r2
    8078:	e13ffd17 	ldw	r4,-12(fp)
    807c:	00090dc0 	call	90dc <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    8080:	e037883a 	mov	sp,fp
    8084:	dfc00117 	ldw	ra,4(sp)
    8088:	df000017 	ldw	fp,0(sp)
    808c:	dec00204 	addi	sp,sp,8
    8090:	f800283a 	ret

00008094 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    8094:	defff804 	addi	sp,sp,-32
    8098:	dfc00715 	stw	ra,28(sp)
    809c:	df000615 	stw	fp,24(sp)
    80a0:	df000604 	addi	fp,sp,24
    80a4:	e13ffd15 	stw	r4,-12(fp)
    80a8:	e17ffe15 	stw	r5,-8(fp)
    80ac:	3005883a 	mov	r2,r6
    80b0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    80b4:	e0bffe17 	ldw	r2,-8(fp)
    80b8:	10800003 	ldbu	r2,0(r2)
    80bc:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    80c0:	e0bffb03 	ldbu	r2,-20(fp)
    80c4:	100b883a 	mov	r5,r2
    80c8:	e13ffd17 	ldw	r4,-12(fp)
    80cc:	00090840 	call	9084 <_ZN9USBH_MIDI17convertStatus2CinEh>
    80d0:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    80d4:	e0bffb03 	ldbu	r2,-20(fp)
    80d8:	10803c18 	cmpnei	r2,r2,240
    80dc:	10000b1e 	bne	r2,zero,810c <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    80e0:	e17ffe17 	ldw	r5,-8(fp)
    80e4:	e13ffd17 	ldw	r4,-12(fp)
    80e8:	00082540 	call	8254 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    80ec:	10bfffcc 	andi	r2,r2,65535
    80f0:	e0ffff03 	ldbu	r3,-4(fp)
    80f4:	180f883a 	mov	r7,r3
    80f8:	100d883a 	mov	r6,r2
    80fc:	e17ffe17 	ldw	r5,-8(fp)
    8100:	e13ffd17 	ldw	r4,-12(fp)
    8104:	00082dc0 	call	82dc <_ZN9USBH_MIDI9SendSysExEPhth>
    8108:	00003406 	br	81dc <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    810c:	e0bfff03 	ldbu	r2,-4(fp)
    8110:	1004913a 	slli	r2,r2,4
    8114:	1007883a 	mov	r3,r2
    8118:	e0bffb43 	ldbu	r2,-19(fp)
    811c:	1884b03a 	or	r2,r3,r2
    8120:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    8124:	e0bffe17 	ldw	r2,-8(fp)
    8128:	10800003 	ldbu	r2,0(r2)
    812c:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    8130:	e0bffb43 	ldbu	r2,-19(fp)
    8134:	100b883a 	mov	r5,r2
    8138:	e13ffd17 	ldw	r4,-12(fp)
    813c:	00090dc0 	call	90dc <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    8140:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    8144:	e0bffb83 	ldbu	r2,-18(fp)
    8148:	10c000a0 	cmpeqi	r3,r2,2
    814c:	18000c1e 	bne	r3,zero,8180 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    8150:	10c000e0 	cmpeqi	r3,r2,3
    8154:	1800031e 	bne	r3,zero,8164 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    8158:	10800060 	cmpeqi	r2,r2,1
    815c:	10000d1e 	bne	r2,zero,8194 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    8160:	00000f06 	br	81a0 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    8164:	e0bffe17 	ldw	r2,-8(fp)
    8168:	10800043 	ldbu	r2,1(r2)
    816c:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    8170:	e0bffe17 	ldw	r2,-8(fp)
    8174:	10800083 	ldbu	r2,2(r2)
    8178:	e0bffc85 	stb	r2,-14(fp)
                break;
    817c:	00000806 	br	81a0 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    8180:	e0bffe17 	ldw	r2,-8(fp)
    8184:	10800043 	ldbu	r2,1(r2)
    8188:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    818c:	e03ffc85 	stb	zero,-14(fp)
                break;
    8190:	00000306 	br	81a0 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    8194:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    8198:	e03ffc85 	stb	zero,-14(fp)
                break;
    819c:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    81a0:	e0bffd17 	ldw	r2,-12(fp)
    81a4:	10c00217 	ldw	r3,8(r2)
    81a8:	e0bffd17 	ldw	r2,-12(fp)
    81ac:	10800303 	ldbu	r2,12(r2)
    81b0:	11003fcc 	andi	r4,r2,255
    81b4:	e0bffd17 	ldw	r2,-12(fp)
    81b8:	10800643 	ldbu	r2,25(r2)
    81bc:	11403fcc 	andi	r5,r2,255
    81c0:	e0bffbc4 	addi	r2,fp,-17
    81c4:	d8800015 	stw	r2,0(sp)
    81c8:	01c00104 	movi	r7,4
    81cc:	280d883a 	mov	r6,r5
    81d0:	200b883a 	mov	r5,r4
    81d4:	1809883a 	mov	r4,r3
    81d8:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    81dc:	e037883a 	mov	sp,fp
    81e0:	dfc00117 	ldw	ra,4(sp)
    81e4:	df000017 	ldw	fp,0(sp)
    81e8:	dec00204 	addi	sp,sp,8
    81ec:	f800283a 	ret

000081f0 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    81f0:	defffb04 	addi	sp,sp,-20
    81f4:	dfc00415 	stw	ra,16(sp)
    81f8:	df000315 	stw	fp,12(sp)
    81fc:	df000304 	addi	fp,sp,12
    8200:	e13ffd15 	stw	r4,-12(fp)
    8204:	2807883a 	mov	r3,r5
    8208:	3005883a 	mov	r2,r6
    820c:	e0fffe05 	stb	r3,-8(fp)
    8210:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    8214:	e0bfff03 	ldbu	r2,-4(fp)
    8218:	1000051e 	bne	r2,zero,8230 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    821c:	e0bffe03 	ldbu	r2,-8(fp)
    8220:	100b883a 	mov	r5,r2
    8224:	e13ffd17 	ldw	r4,-12(fp)
    8228:	00090840 	call	9084 <_ZN9USBH_MIDI17convertStatus2CinEh>
    822c:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    8230:	e0bfff03 	ldbu	r2,-4(fp)
    8234:	100b883a 	mov	r5,r2
    8238:	e13ffd17 	ldw	r4,-12(fp)
    823c:	00090dc0 	call	90dc <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    8240:	e037883a 	mov	sp,fp
    8244:	dfc00117 	ldw	ra,4(sp)
    8248:	df000017 	ldw	fp,0(sp)
    824c:	dec00204 	addi	sp,sp,8
    8250:	f800283a 	ret

00008254 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    8254:	defffc04 	addi	sp,sp,-16
    8258:	df000315 	stw	fp,12(sp)
    825c:	df000304 	addi	fp,sp,12
    8260:	e13ffe15 	stw	r4,-8(fp)
    8264:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    8268:	00800044 	movi	r2,1
    826c:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    8270:	e0bfff17 	ldw	r2,-4(fp)
    8274:	10800003 	ldbu	r2,0(r2)
    8278:	10803fcc 	andi	r2,r2,255
    827c:	10803c20 	cmpeqi	r2,r2,240
    8280:	1000021e 	bne	r2,zero,828c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    8284:	0005883a 	mov	r2,zero
    8288:	00001006 	br	82cc <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    828c:	e0bfff17 	ldw	r2,-4(fp)
    8290:	10800003 	ldbu	r2,0(r2)
    8294:	10803fcc 	andi	r2,r2,255
    8298:	10803de0 	cmpeqi	r2,r2,247
    829c:	10000a1e 	bne	r2,zero,82c8 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    82a0:	e0bfff17 	ldw	r2,-4(fp)
    82a4:	10800044 	addi	r2,r2,1
    82a8:	e0bfff15 	stw	r2,-4(fp)
                c++;
    82ac:	e0bffd0b 	ldhu	r2,-12(fp)
    82b0:	10800044 	addi	r2,r2,1
    82b4:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    82b8:	e0bffd0b 	ldhu	r2,-12(fp)
    82bc:	10804070 	cmpltui	r2,r2,257
    82c0:	103ff21e 	bne	r2,zero,828c <__alt_data_end+0xfc00828c>
                        c = 0;
    82c4:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    82c8:	e0bffd0b 	ldhu	r2,-12(fp)
}
    82cc:	e037883a 	mov	sp,fp
    82d0:	df000017 	ldw	fp,0(sp)
    82d4:	dec00104 	addi	sp,sp,4
    82d8:	f800283a 	ret

000082dc <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    82dc:	deffe704 	addi	sp,sp,-100
    82e0:	dfc01815 	stw	ra,96(sp)
    82e4:	df001715 	stw	fp,92(sp)
    82e8:	df001704 	addi	fp,sp,92
    82ec:	e13ffc15 	stw	r4,-16(fp)
    82f0:	e17ffd15 	stw	r5,-12(fp)
    82f4:	3007883a 	mov	r3,r6
    82f8:	3805883a 	mov	r2,r7
    82fc:	e0fffe0d 	sth	r3,-8(fp)
    8300:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    8304:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    8308:	e0bffe0b 	ldhu	r2,-8(fp)
    830c:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    8310:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    8314:	e0bffc17 	ldw	r2,-16(fp)
    8318:	108005c3 	ldbu	r2,23(r2)
    831c:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    8320:	e0bffe0b 	ldhu	r2,-8(fp)
    8324:	01402004 	movi	r5,128
    8328:	1009883a 	mov	r4,r2
    832c:	00091740 	call	9174 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    8330:	e0bfea8b 	ldhu	r2,-86(fp)
    8334:	1000b026 	beq	r2,zero,85f8 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    8338:	e0bfeb03 	ldbu	r2,-84(fp)
    833c:	e0ffff03 	ldbu	r3,-4(fp)
    8340:	1806913a 	slli	r3,r3,4
    8344:	18c00114 	ori	r3,r3,4
    8348:	1809883a 	mov	r4,r3
    834c:	e0ffeb84 	addi	r3,fp,-82
    8350:	1885883a 	add	r2,r3,r2
    8354:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    8358:	e0bfea8b 	ldhu	r2,-86(fp)
    835c:	10c000a0 	cmpeqi	r3,r2,2
    8360:	18002a1e 	bne	r3,zero,840c <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    8364:	10c000e0 	cmpeqi	r3,r2,3
    8368:	1800521e 	bne	r3,zero,84b4 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    836c:	10800060 	cmpeqi	r2,r2,1
    8370:	10005826 	beq	r2,zero,84d4 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    8374:	e0bfeb03 	ldbu	r2,-84(fp)
    8378:	10c00044 	addi	r3,r2,1
    837c:	e0ffeb05 	stb	r3,-84(fp)
    8380:	10803fcc 	andi	r2,r2,255
    8384:	e0ffff03 	ldbu	r3,-4(fp)
    8388:	1806913a 	slli	r3,r3,4
    838c:	18c00154 	ori	r3,r3,5
    8390:	1809883a 	mov	r4,r3
    8394:	e0ffeb84 	addi	r3,fp,-82
    8398:	1885883a 	add	r2,r3,r2
    839c:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    83a0:	e0bfeb03 	ldbu	r2,-84(fp)
    83a4:	10c00044 	addi	r3,r2,1
    83a8:	e0ffeb05 	stb	r3,-84(fp)
    83ac:	11003fcc 	andi	r4,r2,255
    83b0:	e0bffd17 	ldw	r2,-12(fp)
    83b4:	10c00044 	addi	r3,r2,1
    83b8:	e0fffd15 	stw	r3,-12(fp)
    83bc:	10c00003 	ldbu	r3,0(r2)
    83c0:	e0bfeb84 	addi	r2,fp,-82
    83c4:	1105883a 	add	r2,r2,r4
    83c8:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    83cc:	e0bfeb03 	ldbu	r2,-84(fp)
    83d0:	10c00044 	addi	r3,r2,1
    83d4:	e0ffeb05 	stb	r3,-84(fp)
    83d8:	10803fcc 	andi	r2,r2,255
    83dc:	e0ffeb84 	addi	r3,fp,-82
    83e0:	1885883a 	add	r2,r3,r2
    83e4:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    83e8:	e0bfeb03 	ldbu	r2,-84(fp)
    83ec:	10c00044 	addi	r3,r2,1
    83f0:	e0ffeb05 	stb	r3,-84(fp)
    83f4:	10803fcc 	andi	r2,r2,255
    83f8:	e0ffeb84 	addi	r3,fp,-82
    83fc:	1885883a 	add	r2,r3,r2
    8400:	10000005 	stb	zero,0(r2)
                        n = 0;
    8404:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8408:	00005a06 	br	8574 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    840c:	e0bfeb03 	ldbu	r2,-84(fp)
    8410:	10c00044 	addi	r3,r2,1
    8414:	e0ffeb05 	stb	r3,-84(fp)
    8418:	10803fcc 	andi	r2,r2,255
    841c:	e0ffff03 	ldbu	r3,-4(fp)
    8420:	1806913a 	slli	r3,r3,4
    8424:	18c00194 	ori	r3,r3,6
    8428:	1809883a 	mov	r4,r3
    842c:	e0ffeb84 	addi	r3,fp,-82
    8430:	1885883a 	add	r2,r3,r2
    8434:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    8438:	e0bfeb03 	ldbu	r2,-84(fp)
    843c:	10c00044 	addi	r3,r2,1
    8440:	e0ffeb05 	stb	r3,-84(fp)
    8444:	11003fcc 	andi	r4,r2,255
    8448:	e0bffd17 	ldw	r2,-12(fp)
    844c:	10c00044 	addi	r3,r2,1
    8450:	e0fffd15 	stw	r3,-12(fp)
    8454:	10c00003 	ldbu	r3,0(r2)
    8458:	e0bfeb84 	addi	r2,fp,-82
    845c:	1105883a 	add	r2,r2,r4
    8460:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8464:	e0bfeb03 	ldbu	r2,-84(fp)
    8468:	10c00044 	addi	r3,r2,1
    846c:	e0ffeb05 	stb	r3,-84(fp)
    8470:	11003fcc 	andi	r4,r2,255
    8474:	e0bffd17 	ldw	r2,-12(fp)
    8478:	10c00044 	addi	r3,r2,1
    847c:	e0fffd15 	stw	r3,-12(fp)
    8480:	10c00003 	ldbu	r3,0(r2)
    8484:	e0bfeb84 	addi	r2,fp,-82
    8488:	1105883a 	add	r2,r2,r4
    848c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8490:	e0bfeb03 	ldbu	r2,-84(fp)
    8494:	10c00044 	addi	r3,r2,1
    8498:	e0ffeb05 	stb	r3,-84(fp)
    849c:	10803fcc 	andi	r2,r2,255
    84a0:	e0ffeb84 	addi	r3,fp,-82
    84a4:	1885883a 	add	r2,r3,r2
    84a8:	10000005 	stb	zero,0(r2)
                        n = 0;
    84ac:	e03fea8d 	sth	zero,-86(fp)
                        break;
    84b0:	00003006 	br	8574 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    84b4:	e0bfeb03 	ldbu	r2,-84(fp)
    84b8:	e0ffff03 	ldbu	r3,-4(fp)
    84bc:	1806913a 	slli	r3,r3,4
    84c0:	18c001d4 	ori	r3,r3,7
    84c4:	1809883a 	mov	r4,r3
    84c8:	e0ffeb84 	addi	r3,fp,-82
    84cc:	1885883a 	add	r2,r3,r2
    84d0:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    84d4:	e0bfeb03 	ldbu	r2,-84(fp)
    84d8:	10800044 	addi	r2,r2,1
    84dc:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    84e0:	e0bfeb03 	ldbu	r2,-84(fp)
    84e4:	10c00044 	addi	r3,r2,1
    84e8:	e0ffeb05 	stb	r3,-84(fp)
    84ec:	11003fcc 	andi	r4,r2,255
    84f0:	e0bffd17 	ldw	r2,-12(fp)
    84f4:	10c00044 	addi	r3,r2,1
    84f8:	e0fffd15 	stw	r3,-12(fp)
    84fc:	10c00003 	ldbu	r3,0(r2)
    8500:	e0bfeb84 	addi	r2,fp,-82
    8504:	1105883a 	add	r2,r2,r4
    8508:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    850c:	e0bfeb03 	ldbu	r2,-84(fp)
    8510:	10c00044 	addi	r3,r2,1
    8514:	e0ffeb05 	stb	r3,-84(fp)
    8518:	11003fcc 	andi	r4,r2,255
    851c:	e0bffd17 	ldw	r2,-12(fp)
    8520:	10c00044 	addi	r3,r2,1
    8524:	e0fffd15 	stw	r3,-12(fp)
    8528:	10c00003 	ldbu	r3,0(r2)
    852c:	e0bfeb84 	addi	r2,fp,-82
    8530:	1105883a 	add	r2,r2,r4
    8534:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8538:	e0bfeb03 	ldbu	r2,-84(fp)
    853c:	10c00044 	addi	r3,r2,1
    8540:	e0ffeb05 	stb	r3,-84(fp)
    8544:	11003fcc 	andi	r4,r2,255
    8548:	e0bffd17 	ldw	r2,-12(fp)
    854c:	10c00044 	addi	r3,r2,1
    8550:	e0fffd15 	stw	r3,-12(fp)
    8554:	10c00003 	ldbu	r3,0(r2)
    8558:	e0bfeb84 	addi	r2,fp,-82
    855c:	1105883a 	add	r2,r2,r4
    8560:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    8564:	e0bfea8b 	ldhu	r2,-86(fp)
    8568:	10bfff44 	addi	r2,r2,-3
    856c:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    8570:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    8574:	e0ffeb03 	ldbu	r3,-84(fp)
    8578:	e0bfeb43 	ldbu	r2,-83(fp)
    857c:	1880022e 	bgeu	r3,r2,8588 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    8580:	e0bfea8b 	ldhu	r2,-86(fp)
    8584:	103f6a1e 	bne	r2,zero,8330 <__alt_data_end+0xfc008330>
                        USBTRACE2(" wptr:\t", wptr);
    8588:	e0bfeb03 	ldbu	r2,-84(fp)
    858c:	01402004 	movi	r5,128
    8590:	1009883a 	mov	r4,r2
    8594:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    8598:	e0bffc17 	ldw	r2,-16(fp)
    859c:	10c00217 	ldw	r3,8(r2)
    85a0:	e0bffc17 	ldw	r2,-16(fp)
    85a4:	10800303 	ldbu	r2,12(r2)
    85a8:	11003fcc 	andi	r4,r2,255
    85ac:	e0bffc17 	ldw	r2,-16(fp)
    85b0:	10800643 	ldbu	r2,25(r2)
    85b4:	11403fcc 	andi	r5,r2,255
    85b8:	e1bfeb03 	ldbu	r6,-84(fp)
    85bc:	e0bfeb84 	addi	r2,fp,-82
    85c0:	d8800015 	stw	r2,0(sp)
    85c4:	300f883a 	mov	r7,r6
    85c8:	280d883a 	mov	r6,r5
    85cc:	200b883a 	mov	r5,r4
    85d0:	1809883a 	mov	r4,r3
    85d4:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    85d8:	e0bfea05 	stb	r2,-88(fp)
    85dc:	e0bfea03 	ldbu	r2,-88(fp)
    85e0:	1004c03a 	cmpne	r2,r2,zero
    85e4:	10803fcc 	andi	r2,r2,255
    85e8:	1000021e 	bne	r2,zero,85f4 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    85ec:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    85f0:	003f4f06 	br	8330 <__alt_data_end+0xfc008330>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    85f4:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    85f8:	e0bfea03 	ldbu	r2,-88(fp)
}
    85fc:	e037883a 	mov	sp,fp
    8600:	dfc00117 	ldw	ra,4(sp)
    8604:	df000017 	ldw	fp,0(sp)
    8608:	dec00204 	addi	sp,sp,8
    860c:	f800283a 	ret

00008610 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    8610:	defffb04 	addi	sp,sp,-20
    8614:	df000415 	stw	fp,16(sp)
    8618:	df000404 	addi	fp,sp,16
    861c:	e13ffd15 	stw	r4,-12(fp)
    8620:	e17ffe15 	stw	r5,-8(fp)
    8624:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    8628:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    862c:	e0bffe17 	ldw	r2,-8(fp)
    8630:	10800003 	ldbu	r2,0(r2)
    8634:	108003cc 	andi	r2,r2,15
    8638:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    863c:	e0bffc43 	ldbu	r2,-15(fp)
    8640:	1080030c 	andi	r2,r2,12
    8644:	10800120 	cmpeqi	r2,r2,4
    8648:	1000021e 	bne	r2,zero,8654 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    864c:	e0bffc03 	ldbu	r2,-16(fp)
    8650:	00003b06 	br	8740 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    8654:	e0bffc43 	ldbu	r2,-15(fp)
    8658:	10c00160 	cmpeqi	r3,r2,5
    865c:	18002e1e 	bne	r3,zero,8718 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    8660:	10c00188 	cmpgei	r3,r2,6
    8664:	1800031e 	bne	r3,zero,8674 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    8668:	10800120 	cmpeqi	r2,r2,4
    866c:	1000061e 	bne	r2,zero,8688 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8670:	00003206 	br	873c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    8674:	10c001a0 	cmpeqi	r3,r2,6
    8678:	1800181e 	bne	r3,zero,86dc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    867c:	108001e0 	cmpeqi	r2,r2,7
    8680:	1000011e 	bne	r2,zero,8688 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8684:	00002d06 	br	873c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    8688:	e0bfff17 	ldw	r2,-4(fp)
    868c:	10c00044 	addi	r3,r2,1
    8690:	e0ffff15 	stw	r3,-4(fp)
    8694:	e0fffe17 	ldw	r3,-8(fp)
    8698:	18c00043 	ldbu	r3,1(r3)
    869c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    86a0:	e0bfff17 	ldw	r2,-4(fp)
    86a4:	10c00044 	addi	r3,r2,1
    86a8:	e0ffff15 	stw	r3,-4(fp)
    86ac:	e0fffe17 	ldw	r3,-8(fp)
    86b0:	18c00083 	ldbu	r3,2(r3)
    86b4:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    86b8:	e0bfff17 	ldw	r2,-4(fp)
    86bc:	10c00044 	addi	r3,r2,1
    86c0:	e0ffff15 	stw	r3,-4(fp)
    86c4:	e0fffe17 	ldw	r3,-8(fp)
    86c8:	18c000c3 	ldbu	r3,3(r3)
    86cc:	10c00005 	stb	r3,0(r2)
                rc = 3;
    86d0:	008000c4 	movi	r2,3
    86d4:	e0bffc05 	stb	r2,-16(fp)
                break;
    86d8:	00001806 	br	873c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    86dc:	e0bfff17 	ldw	r2,-4(fp)
    86e0:	10c00044 	addi	r3,r2,1
    86e4:	e0ffff15 	stw	r3,-4(fp)
    86e8:	e0fffe17 	ldw	r3,-8(fp)
    86ec:	18c00043 	ldbu	r3,1(r3)
    86f0:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    86f4:	e0bfff17 	ldw	r2,-4(fp)
    86f8:	10c00044 	addi	r3,r2,1
    86fc:	e0ffff15 	stw	r3,-4(fp)
    8700:	e0fffe17 	ldw	r3,-8(fp)
    8704:	18c00083 	ldbu	r3,2(r3)
    8708:	10c00005 	stb	r3,0(r2)
                rc = 2;
    870c:	00800084 	movi	r2,2
    8710:	e0bffc05 	stb	r2,-16(fp)
                break;
    8714:	00000906 	br	873c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    8718:	e0bfff17 	ldw	r2,-4(fp)
    871c:	10c00044 	addi	r3,r2,1
    8720:	e0ffff15 	stw	r3,-4(fp)
    8724:	e0fffe17 	ldw	r3,-8(fp)
    8728:	18c00043 	ldbu	r3,1(r3)
    872c:	10c00005 	stb	r3,0(r2)
                rc = 1;
    8730:	00800044 	movi	r2,1
    8734:	e0bffc05 	stb	r2,-16(fp)
                break;
    8738:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    873c:	e0bffc03 	ldbu	r2,-16(fp)
}
    8740:	e037883a 	mov	sp,fp
    8744:	df000017 	ldw	fp,0(sp)
    8748:	dec00104 	addi	sp,sp,4
    874c:	f800283a 	ret

00008750 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    8750:	defffb04 	addi	sp,sp,-20
    8754:	dfc00415 	stw	ra,16(sp)
    8758:	df000315 	stw	fp,12(sp)
    875c:	df000304 	addi	fp,sp,12
    8760:	e13ffd15 	stw	r4,-12(fp)
    8764:	e17ffe15 	stw	r5,-8(fp)
    8768:	3005883a 	mov	r2,r6
    876c:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    8770:	e0bffd17 	ldw	r2,-12(fp)
    8774:	1009883a 	mov	r4,r2
    8778:	0004ef00 	call	4ef0 <_ZN13USBReadParserC1Ev>
    877c:	008000b4 	movhi	r2,2
    8780:	109c6e04 	addi	r2,r2,29112
    8784:	e0fffd17 	ldw	r3,-12(fp)
    8788:	18800015 	stw	r2,0(r3)
    878c:	e0bffd17 	ldw	r2,-12(fp)
    8790:	e0fffe17 	ldw	r3,-8(fp)
    8794:	10c00115 	stw	r3,4(r2)
    8798:	e0bffd17 	ldw	r2,-12(fp)
    879c:	10800204 	addi	r2,r2,8
    87a0:	1009883a 	mov	r4,r2
    87a4:	00047e00 	call	47e0 <_ZN16MultiValueBufferC1Ev>
    87a8:	e0bffd17 	ldw	r2,-12(fp)
    87ac:	10800404 	addi	r2,r2,16
    87b0:	1009883a 	mov	r4,r2
    87b4:	00048400 	call	4840 <_ZN20MultiByteValueParserC1Ev>
    87b8:	e0bffd17 	ldw	r2,-12(fp)
    87bc:	10800604 	addi	r2,r2,24
    87c0:	1009883a 	mov	r4,r2
    87c4:	00048fc0 	call	48fc <_ZN11ByteSkipperC1Ev>
    87c8:	e0bffd17 	ldw	r2,-12(fp)
    87cc:	10000c05 	stb	zero,48(r2)
    87d0:	e0bffd17 	ldw	r2,-12(fp)
    87d4:	10000c45 	stb	zero,49(r2)
    87d8:	e0bffd17 	ldw	r2,-12(fp)
    87dc:	10000c85 	stb	zero,50(r2)
    87e0:	e0bffd17 	ldw	r2,-12(fp)
    87e4:	10000cc5 	stb	zero,51(r2)
    87e8:	e0bffd17 	ldw	r2,-12(fp)
    87ec:	e0ffff03 	ldbu	r3,-4(fp)
    87f0:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    87f4:	e0bffd17 	ldw	r2,-12(fp)
    87f8:	10c00804 	addi	r3,r2,32
    87fc:	e0bffd17 	ldw	r2,-12(fp)
    8800:	19803fcc 	andi	r6,r3,255
    8804:	11000243 	ldbu	r4,9(r2)
    8808:	2008703a 	and	r4,r4,zero
    880c:	200b883a 	mov	r5,r4
    8810:	3009883a 	mov	r4,r6
    8814:	2908b03a 	or	r4,r5,r4
    8818:	11000245 	stb	r4,9(r2)
    881c:	1808d23a 	srli	r4,r3,8
    8820:	21803fcc 	andi	r6,r4,255
    8824:	11000283 	ldbu	r4,10(r2)
    8828:	2008703a 	and	r4,r4,zero
    882c:	200b883a 	mov	r5,r4
    8830:	3009883a 	mov	r4,r6
    8834:	2908b03a 	or	r4,r5,r4
    8838:	11000285 	stb	r4,10(r2)
    883c:	1808d43a 	srli	r4,r3,16
    8840:	21803fcc 	andi	r6,r4,255
    8844:	110002c3 	ldbu	r4,11(r2)
    8848:	2008703a 	and	r4,r4,zero
    884c:	200b883a 	mov	r5,r4
    8850:	3009883a 	mov	r4,r6
    8854:	2908b03a 	or	r4,r5,r4
    8858:	110002c5 	stb	r4,11(r2)
    885c:	180ad63a 	srli	r5,r3,24
    8860:	10c00303 	ldbu	r3,12(r2)
    8864:	1806703a 	and	r3,r3,zero
    8868:	1809883a 	mov	r4,r3
    886c:	2807883a 	mov	r3,r5
    8870:	20c6b03a 	or	r3,r4,r3
    8874:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    8878:	e0bffd17 	ldw	r2,-12(fp)
    887c:	10c00404 	addi	r3,r2,16
    8880:	e0bffd17 	ldw	r2,-12(fp)
    8884:	10800204 	addi	r2,r2,8
    8888:	100b883a 	mov	r5,r2
    888c:	1809883a 	mov	r4,r3
    8890:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    8894:	e0bffd17 	ldw	r2,-12(fp)
    8898:	10c00604 	addi	r3,r2,24
    889c:	e0bffd17 	ldw	r2,-12(fp)
    88a0:	10800204 	addi	r2,r2,8
    88a4:	100b883a 	mov	r5,r2
    88a8:	1809883a 	mov	r4,r3
    88ac:	00049380 	call	4938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    88b0:	0001883a 	nop
    88b4:	e037883a 	mov	sp,fp
    88b8:	dfc00117 	ldw	ra,4(sp)
    88bc:	df000017 	ldw	fp,0(sp)
    88c0:	dec00204 	addi	sp,sp,8
    88c4:	f800283a 	ret

000088c8 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    88c8:	defff804 	addi	sp,sp,-32
    88cc:	dfc00715 	stw	ra,28(sp)
    88d0:	df000615 	stw	fp,24(sp)
    88d4:	df000604 	addi	fp,sp,24
    88d8:	e13ffc15 	stw	r4,-16(fp)
    88dc:	2805883a 	mov	r2,r5
    88e0:	e1bffe15 	stw	r6,-8(fp)
    88e4:	e1ffff15 	stw	r7,-4(fp)
    88e8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    88ec:	e0bffd0b 	ldhu	r2,-12(fp)
    88f0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    88f4:	e0bffe17 	ldw	r2,-8(fp)
    88f8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    88fc:	e0bffa0b 	ldhu	r2,-24(fp)
    8900:	10bfffcc 	andi	r2,r2,65535
    8904:	10000a26 	beq	r2,zero,8930 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    8908:	e0bffb04 	addi	r2,fp,-20
    890c:	e1bffa04 	addi	r6,fp,-24
    8910:	100b883a 	mov	r5,r2
    8914:	e13ffc17 	ldw	r4,-16(fp)
    8918:	00089440 	call	8944 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    891c:	1080005c 	xori	r2,r2,1
    8920:	10803fcc 	andi	r2,r2,255
    8924:	1000011e 	bne	r2,zero,892c <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    8928:	003ff406 	br	88fc <__alt_data_end+0xfc0088fc>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    892c:	0001883a 	nop
}
    8930:	e037883a 	mov	sp,fp
    8934:	dfc00117 	ldw	ra,4(sp)
    8938:	df000017 	ldw	fp,0(sp)
    893c:	dec00204 	addi	sp,sp,8
    8940:	f800283a 	ret

00008944 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    8944:	defff604 	addi	sp,sp,-40
    8948:	dfc00915 	stw	ra,36(sp)
    894c:	df000815 	stw	fp,32(sp)
    8950:	df000804 	addi	fp,sp,32
    8954:	e13ffc15 	stw	r4,-16(fp)
    8958:	e17ffd15 	stw	r5,-12(fp)
    895c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    8960:	e0bffc17 	ldw	r2,-16(fp)
    8964:	10800804 	addi	r2,r2,32
    8968:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    896c:	e0bffc17 	ldw	r2,-16(fp)
    8970:	10800804 	addi	r2,r2,32
    8974:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    8978:	e0bffc17 	ldw	r2,-16(fp)
    897c:	10800c03 	ldbu	r2,48(r2)
    8980:	10803fcc 	andi	r2,r2,255
    8984:	10c00168 	cmpgeui	r3,r2,5
    8988:	1801411e 	bne	r3,zero,8e90 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    898c:	100690ba 	slli	r3,r2,2
    8990:	00800074 	movhi	r2,1
    8994:	10a26904 	addi	r2,r2,-30300
    8998:	1885883a 	add	r2,r3,r2
    899c:	10800017 	ldw	r2,0(r2)
    89a0:	1000683a 	jmp	r2
    89a4:	000089b8 	rdprs	zero,zero,550
    89a8:	000089ec 	andhi	zero,zero,551
    89ac:	00008a74 	movhi	zero,553
    89b0:	00008b08 	cmpgei	zero,zero,556
    89b4:	00008b74 	movhi	zero,557
                case 0:
                        theBuffer.valueSize = 2;
    89b8:	e0bffc17 	ldw	r2,-16(fp)
    89bc:	00c00084 	movi	r3,2
    89c0:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    89c4:	e0bffc17 	ldw	r2,-16(fp)
    89c8:	10c00404 	addi	r3,r2,16
    89cc:	e0bffc17 	ldw	r2,-16(fp)
    89d0:	10800204 	addi	r2,r2,8
    89d4:	100b883a 	mov	r5,r2
    89d8:	1809883a 	mov	r4,r3
    89dc:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    89e0:	e0bffc17 	ldw	r2,-16(fp)
    89e4:	00c00044 	movi	r3,1
    89e8:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    89ec:	e0bffc17 	ldw	r2,-16(fp)
    89f0:	10800404 	addi	r2,r2,16
    89f4:	e1bffe17 	ldw	r6,-8(fp)
    89f8:	e17ffd17 	ldw	r5,-12(fp)
    89fc:	1009883a 	mov	r4,r2
    8a00:	00066f00 	call	66f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8a04:	1080005c 	xori	r2,r2,1
    8a08:	10803fcc 	andi	r2,r2,255
    8a0c:	10000226 	beq	r2,zero,8a18 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    8a10:	0005883a 	mov	r2,zero
    8a14:	00011f06 	br	8e94 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    8a18:	e0bffc17 	ldw	r2,-16(fp)
    8a1c:	10c00217 	ldw	r3,8(r2)
    8a20:	1806d23a 	srli	r3,r3,8
    8a24:	10800317 	ldw	r2,12(r2)
    8a28:	10803fcc 	andi	r2,r2,255
    8a2c:	1004963a 	slli	r2,r2,24
    8a30:	10c4b03a 	or	r2,r2,r3
    8a34:	10c00003 	ldbu	r3,0(r2)
    8a38:	e0bffc17 	ldw	r2,-16(fp)
    8a3c:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    8a40:	e0bffc17 	ldw	r2,-16(fp)
    8a44:	10c00217 	ldw	r3,8(r2)
    8a48:	1806d23a 	srli	r3,r3,8
    8a4c:	10800317 	ldw	r2,12(r2)
    8a50:	10803fcc 	andi	r2,r2,255
    8a54:	1004963a 	slli	r2,r2,24
    8a58:	10c4b03a 	or	r2,r2,r3
    8a5c:	10c00043 	ldbu	r3,1(r2)
    8a60:	e0bffc17 	ldw	r2,-16(fp)
    8a64:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    8a68:	e0bffc17 	ldw	r2,-16(fp)
    8a6c:	00c00084 	movi	r3,2
    8a70:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    8a74:	e0bffc17 	ldw	r2,-16(fp)
    8a78:	10800804 	addi	r2,r2,32
    8a7c:	10c00084 	addi	r3,r2,2
    8a80:	e0bffc17 	ldw	r2,-16(fp)
    8a84:	19803fcc 	andi	r6,r3,255
    8a88:	11000243 	ldbu	r4,9(r2)
    8a8c:	2008703a 	and	r4,r4,zero
    8a90:	200b883a 	mov	r5,r4
    8a94:	3009883a 	mov	r4,r6
    8a98:	2908b03a 	or	r4,r5,r4
    8a9c:	11000245 	stb	r4,9(r2)
    8aa0:	1808d23a 	srli	r4,r3,8
    8aa4:	21803fcc 	andi	r6,r4,255
    8aa8:	11000283 	ldbu	r4,10(r2)
    8aac:	2008703a 	and	r4,r4,zero
    8ab0:	200b883a 	mov	r5,r4
    8ab4:	3009883a 	mov	r4,r6
    8ab8:	2908b03a 	or	r4,r5,r4
    8abc:	11000285 	stb	r4,10(r2)
    8ac0:	1808d43a 	srli	r4,r3,16
    8ac4:	21803fcc 	andi	r6,r4,255
    8ac8:	110002c3 	ldbu	r4,11(r2)
    8acc:	2008703a 	and	r4,r4,zero
    8ad0:	200b883a 	mov	r5,r4
    8ad4:	3009883a 	mov	r4,r6
    8ad8:	2908b03a 	or	r4,r5,r4
    8adc:	110002c5 	stb	r4,11(r2)
    8ae0:	180ad63a 	srli	r5,r3,24
    8ae4:	10c00303 	ldbu	r3,12(r2)
    8ae8:	1806703a 	and	r3,r3,zero
    8aec:	1809883a 	mov	r4,r3
    8af0:	2807883a 	mov	r3,r5
    8af4:	20c6b03a 	or	r3,r4,r3
    8af8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    8afc:	e0bffc17 	ldw	r2,-16(fp)
    8b00:	00c000c4 	movi	r3,3
    8b04:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    8b08:	e0bffc17 	ldw	r2,-16(fp)
    8b0c:	10800c83 	ldbu	r2,50(r2)
    8b10:	10803fcc 	andi	r2,r2,255
    8b14:	10c00120 	cmpeqi	r3,r2,4
    8b18:	1800021e 	bne	r3,zero,8b24 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    8b1c:	10800148 	cmpgei	r2,r2,5
    8b20:	00000306 	br	8b30 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    8b24:	e0bffc17 	ldw	r2,-16(fp)
    8b28:	10000d45 	stb	zero,53(r2)
                                        break;
    8b2c:	00000106 	br	8b34 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    8b30:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    8b34:	e0bffc17 	ldw	r2,-16(fp)
    8b38:	10800c43 	ldbu	r2,49(r2)
    8b3c:	10bfff84 	addi	r2,r2,-2
    8b40:	1007883a 	mov	r3,r2
    8b44:	e0bffc17 	ldw	r2,-16(fp)
    8b48:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8b4c:	e0bffc17 	ldw	r2,-16(fp)
    8b50:	10c00404 	addi	r3,r2,16
    8b54:	e0bffc17 	ldw	r2,-16(fp)
    8b58:	10800204 	addi	r2,r2,8
    8b5c:	100b883a 	mov	r5,r2
    8b60:	1809883a 	mov	r4,r3
    8b64:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    8b68:	e0bffc17 	ldw	r2,-16(fp)
    8b6c:	00c00104 	movi	r3,4
    8b70:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    8b74:	e0bffc17 	ldw	r2,-16(fp)
    8b78:	10800c83 	ldbu	r2,50(r2)
    8b7c:	10803fcc 	andi	r2,r2,255
    8b80:	10c00120 	cmpeqi	r3,r2,4
    8b84:	1800141e 	bne	r3,zero,8bd8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    8b88:	10c00160 	cmpeqi	r3,r2,5
    8b8c:	18005a1e 	bne	r3,zero,8cf8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    8b90:	108000a0 	cmpeqi	r2,r2,2
    8b94:	10008526 	beq	r2,zero,8dac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    8b98:	e0bffc17 	ldw	r2,-16(fp)
    8b9c:	10800404 	addi	r2,r2,16
    8ba0:	e1bffe17 	ldw	r6,-8(fp)
    8ba4:	e17ffd17 	ldw	r5,-12(fp)
    8ba8:	1009883a 	mov	r4,r2
    8bac:	00066f00 	call	66f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8bb0:	1080005c 	xori	r2,r2,1
    8bb4:	10803fcc 	andi	r2,r2,255
    8bb8:	10000226 	beq	r2,zero,8bc4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    8bbc:	0005883a 	mov	r2,zero
    8bc0:	0000b406 	br	8e94 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    8bc4:	e0bffa17 	ldw	r2,-24(fp)
    8bc8:	10c00143 	ldbu	r3,5(r2)
    8bcc:	e0bffc17 	ldw	r2,-16(fp)
    8bd0:	10c00d85 	stb	r3,54(r2)
                                        break;
    8bd4:	00008b06 	br	8e04 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    8bd8:	e0bffc17 	ldw	r2,-16(fp)
    8bdc:	10800404 	addi	r2,r2,16
    8be0:	e1bffe17 	ldw	r6,-8(fp)
    8be4:	e17ffd17 	ldw	r5,-12(fp)
    8be8:	1009883a 	mov	r4,r2
    8bec:	00066f00 	call	66f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8bf0:	1080005c 	xori	r2,r2,1
    8bf4:	10803fcc 	andi	r2,r2,255
    8bf8:	10000226 	beq	r2,zero,8c04 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    8bfc:	0005883a 	mov	r2,zero
    8c00:	0000a406 	br	8e94 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    8c04:	e0bffb17 	ldw	r2,-20(fp)
    8c08:	10800083 	ldbu	r2,2(r2)
    8c0c:	10803fcc 	andi	r2,r2,255
    8c10:	01402004 	movi	r5,128
    8c14:	1009883a 	mov	r4,r2
    8c18:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    8c1c:	e0bffb17 	ldw	r2,-20(fp)
    8c20:	108000c3 	ldbu	r2,3(r2)
    8c24:	10803fcc 	andi	r2,r2,255
    8c28:	01402004 	movi	r5,128
    8c2c:	1009883a 	mov	r4,r2
    8c30:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    8c34:	e0bffb17 	ldw	r2,-20(fp)
    8c38:	10800103 	ldbu	r2,4(r2)
    8c3c:	10803fcc 	andi	r2,r2,255
    8c40:	01402004 	movi	r5,128
    8c44:	1009883a 	mov	r4,r2
    8c48:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    8c4c:	e0bffb17 	ldw	r2,-20(fp)
    8c50:	10800143 	ldbu	r2,5(r2)
    8c54:	10803fcc 	andi	r2,r2,255
    8c58:	01402004 	movi	r5,128
    8c5c:	1009883a 	mov	r4,r2
    8c60:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    8c64:	e0bffb17 	ldw	r2,-20(fp)
    8c68:	10800183 	ldbu	r2,6(r2)
    8c6c:	10803fcc 	andi	r2,r2,255
    8c70:	01402004 	movi	r5,128
    8c74:	1009883a 	mov	r4,r2
    8c78:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    8c7c:	e0bffb17 	ldw	r2,-20(fp)
    8c80:	108001c3 	ldbu	r2,7(r2)
    8c84:	10803fcc 	andi	r2,r2,255
    8c88:	01402004 	movi	r5,128
    8c8c:	1009883a 	mov	r4,r2
    8c90:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    8c94:	e0bffc17 	ldw	r2,-16(fp)
    8c98:	10800d03 	ldbu	r2,52(r2)
    8c9c:	10803fcc 	andi	r2,r2,255
    8ca0:	10000a26 	beq	r2,zero,8ccc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    8ca4:	e0bffb17 	ldw	r2,-20(fp)
    8ca8:	10800143 	ldbu	r2,5(r2)
    8cac:	10803fcc 	andi	r2,r2,255
    8cb0:	10800058 	cmpnei	r2,r2,1
    8cb4:	10004e1e 	bne	r2,zero,8df0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    8cb8:	e0bffb17 	ldw	r2,-20(fp)
    8cbc:	10800183 	ldbu	r2,6(r2)
    8cc0:	10803fcc 	andi	r2,r2,255
    8cc4:	108000d8 	cmpnei	r2,r2,3
    8cc8:	1000491e 	bne	r2,zero,8df0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    8ccc:	e0bffc17 	ldw	r2,-16(fp)
    8cd0:	00c00044 	movi	r3,1
    8cd4:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    8cd8:	e0bffc17 	ldw	r2,-16(fp)
    8cdc:	10800cc3 	ldbu	r2,51(r2)
    8ce0:	10803fcc 	andi	r2,r2,255
    8ce4:	108000a8 	cmpgeui	r2,r2,2
    8ce8:	1000431e 	bne	r2,zero,8df8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    8cec:	e0bffc17 	ldw	r2,-16(fp)
    8cf0:	10000cc5 	stb	zero,51(r2)
                                        break;
    8cf4:	00004006 	br	8df8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    8cf8:	e0bffc17 	ldw	r2,-16(fp)
    8cfc:	10800404 	addi	r2,r2,16
    8d00:	e1bffe17 	ldw	r6,-8(fp)
    8d04:	e17ffd17 	ldw	r5,-12(fp)
    8d08:	1009883a 	mov	r4,r2
    8d0c:	00066f00 	call	66f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8d10:	1080005c 	xori	r2,r2,1
    8d14:	10803fcc 	andi	r2,r2,255
    8d18:	10000226 	beq	r2,zero,8d24 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    8d1c:	0005883a 	mov	r2,zero
    8d20:	00005c06 	br	8e94 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    8d24:	e0bffc17 	ldw	r2,-16(fp)
    8d28:	10800d43 	ldbu	r2,53(r2)
    8d2c:	10803fcc 	andi	r2,r2,255
    8d30:	10003326 	beq	r2,zero,8e00 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    8d34:	e0bffc17 	ldw	r2,-16(fp)
    8d38:	10800cc3 	ldbu	r2,51(r2)
    8d3c:	10803fcc 	andi	r2,r2,255
    8d40:	108000a8 	cmpgeui	r2,r2,2
    8d44:	10002e1e 	bne	r2,zero,8e00 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    8d48:	e0bffc17 	ldw	r2,-16(fp)
    8d4c:	10800117 	ldw	r2,4(r2)
    8d50:	10800017 	ldw	r2,0(r2)
    8d54:	10800017 	ldw	r2,0(r2)
    8d58:	e0fffc17 	ldw	r3,-16(fp)
    8d5c:	19000117 	ldw	r4,4(r3)
    8d60:	e0fffc17 	ldw	r3,-16(fp)
    8d64:	18c00d83 	ldbu	r3,54(r3)
    8d68:	19403fcc 	andi	r5,r3,255
    8d6c:	e0fffc17 	ldw	r3,-16(fp)
    8d70:	18c00804 	addi	r3,r3,32
    8d74:	d8c00115 	stw	r3,4(sp)
    8d78:	d8000015 	stw	zero,0(sp)
    8d7c:	000f883a 	mov	r7,zero
    8d80:	000d883a 	mov	r6,zero
    8d84:	103ee83a 	callr	r2
    8d88:	10803fcc 	andi	r2,r2,255
    8d8c:	10001c26 	beq	r2,zero,8e00 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    8d90:	e0bffc17 	ldw	r2,-16(fp)
    8d94:	10800cc3 	ldbu	r2,51(r2)
    8d98:	10800044 	addi	r2,r2,1
    8d9c:	1007883a 	mov	r3,r2
    8da0:	e0bffc17 	ldw	r2,-16(fp)
    8da4:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8da8:	00001506 	br	8e00 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    8dac:	e0bffc17 	ldw	r2,-16(fp)
    8db0:	10c00604 	addi	r3,r2,24
    8db4:	e0bffc17 	ldw	r2,-16(fp)
    8db8:	10800c43 	ldbu	r2,49(r2)
    8dbc:	10803fcc 	andi	r2,r2,255
    8dc0:	10bfff84 	addi	r2,r2,-2
    8dc4:	10bfffcc 	andi	r2,r2,65535
    8dc8:	100f883a 	mov	r7,r2
    8dcc:	e1bffe17 	ldw	r6,-8(fp)
    8dd0:	e17ffd17 	ldw	r5,-12(fp)
    8dd4:	1809883a 	mov	r4,r3
    8dd8:	00049a00 	call	49a0 <_ZN11ByteSkipper4SkipEPPhPtt>
    8ddc:	1080005c 	xori	r2,r2,1
    8de0:	10803fcc 	andi	r2,r2,255
    8de4:	10000726 	beq	r2,zero,8e04 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8de8:	0005883a 	mov	r2,zero
    8dec:	00002906 	br	8e94 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8df0:	0001883a 	nop
    8df4:	00000306 	br	8e04 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8df8:	0001883a 	nop
    8dfc:	00000106 	br	8e04 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    8e00:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    8e04:	e0bffc17 	ldw	r2,-16(fp)
    8e08:	10c00804 	addi	r3,r2,32
    8e0c:	e0bffc17 	ldw	r2,-16(fp)
    8e10:	19803fcc 	andi	r6,r3,255
    8e14:	11000243 	ldbu	r4,9(r2)
    8e18:	2008703a 	and	r4,r4,zero
    8e1c:	200b883a 	mov	r5,r4
    8e20:	3009883a 	mov	r4,r6
    8e24:	2908b03a 	or	r4,r5,r4
    8e28:	11000245 	stb	r4,9(r2)
    8e2c:	1808d23a 	srli	r4,r3,8
    8e30:	21803fcc 	andi	r6,r4,255
    8e34:	11000283 	ldbu	r4,10(r2)
    8e38:	2008703a 	and	r4,r4,zero
    8e3c:	200b883a 	mov	r5,r4
    8e40:	3009883a 	mov	r4,r6
    8e44:	2908b03a 	or	r4,r5,r4
    8e48:	11000285 	stb	r4,10(r2)
    8e4c:	1808d43a 	srli	r4,r3,16
    8e50:	21803fcc 	andi	r6,r4,255
    8e54:	110002c3 	ldbu	r4,11(r2)
    8e58:	2008703a 	and	r4,r4,zero
    8e5c:	200b883a 	mov	r5,r4
    8e60:	3009883a 	mov	r4,r6
    8e64:	2908b03a 	or	r4,r5,r4
    8e68:	110002c5 	stb	r4,11(r2)
    8e6c:	180ad63a 	srli	r5,r3,24
    8e70:	10c00303 	ldbu	r3,12(r2)
    8e74:	1806703a 	and	r3,r3,zero
    8e78:	1809883a 	mov	r4,r3
    8e7c:	2807883a 	mov	r3,r5
    8e80:	20c6b03a 	or	r3,r4,r3
    8e84:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8e88:	e0bffc17 	ldw	r2,-16(fp)
    8e8c:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8e90:	00800044 	movi	r2,1
}
    8e94:	e037883a 	mov	sp,fp
    8e98:	dfc00117 	ldw	ra,4(sp)
    8e9c:	df000017 	ldw	fp,0(sp)
    8ea0:	dec00204 	addi	sp,sp,8
    8ea4:	f800283a 	ret

00008ea8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8ea8:	defff904 	addi	sp,sp,-28
    8eac:	df000615 	stw	fp,24(sp)
    8eb0:	df000604 	addi	fp,sp,24
    8eb4:	e13ffb15 	stw	r4,-20(fp)
    8eb8:	3009883a 	mov	r4,r6
    8ebc:	3807883a 	mov	r3,r7
    8ec0:	e0800117 	ldw	r2,4(fp)
    8ec4:	e17ffc05 	stb	r5,-16(fp)
    8ec8:	e13ffd05 	stb	r4,-12(fp)
    8ecc:	e0fffe05 	stb	r3,-8(fp)
    8ed0:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8ed4:	e0800217 	ldw	r2,8(fp)
    8ed8:	10c000c3 	ldbu	r3,3(r2)
    8edc:	e0bffb17 	ldw	r2,-20(fp)
    8ee0:	10800483 	ldbu	r2,18(r2)
    8ee4:	1884703a 	and	r2,r3,r2
    8ee8:	10803fcc 	andi	r2,r2,255
    8eec:	10800098 	cmpnei	r2,r2,2
    8ef0:	10001f1e 	bne	r2,zero,8f70 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8ef4:	e0800217 	ldw	r2,8(fp)
    8ef8:	10800083 	ldbu	r2,2(r2)
    8efc:	10803fcc 	andi	r2,r2,255
    8f00:	1080201c 	xori	r2,r2,128
    8f04:	10bfe004 	addi	r2,r2,-128
    8f08:	1000020e 	bge	r2,zero,8f14 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8f0c:	00800044 	movi	r2,1
    8f10:	00000106 	br	8f18 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8f14:	00800084 	movi	r2,2
    8f18:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8f1c:	e0fffa03 	ldbu	r3,-24(fp)
    8f20:	e0800217 	ldw	r2,8(fp)
    8f24:	10800083 	ldbu	r2,2(r2)
    8f28:	108003cc 	andi	r2,r2,15
    8f2c:	100b883a 	mov	r5,r2
    8f30:	e13ffb17 	ldw	r4,-20(fp)
    8f34:	1805883a 	mov	r2,r3
    8f38:	1085883a 	add	r2,r2,r2
    8f3c:	10c5883a 	add	r2,r2,r3
    8f40:	2085883a 	add	r2,r4,r2
    8f44:	108004c4 	addi	r2,r2,19
    8f48:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    8f4c:	e0800217 	ldw	r2,8(fp)
    8f50:	10c00103 	ldbu	r3,4(r2)
    8f54:	10800143 	ldbu	r2,5(r2)
    8f58:	1004923a 	slli	r2,r2,8
    8f5c:	10c4b03a 	or	r2,r2,r3
    8f60:	10bfffcc 	andi	r2,r2,65535
    8f64:	10801070 	cmpltui	r2,r2,65
    8f68:	10000d1e 	bne	r2,zero,8fa0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    8f6c:	00000206 	br	8f78 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    8f70:	0005883a 	mov	r2,zero
    8f74:	00001906 	br	8fdc <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    8f78:	e0fffa03 	ldbu	r3,-24(fp)
    8f7c:	e13ffb17 	ldw	r4,-20(fp)
    8f80:	1805883a 	mov	r2,r3
    8f84:	1085883a 	add	r2,r2,r2
    8f88:	10c5883a 	add	r2,r2,r3
    8f8c:	2085883a 	add	r2,r4,r2
    8f90:	10800504 	addi	r2,r2,20
    8f94:	00c01004 	movi	r3,64
    8f98:	10c00005 	stb	r3,0(r2)
    8f9c:	00000e06 	br	8fd8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    8fa0:	e0fffa03 	ldbu	r3,-24(fp)
    8fa4:	e0800217 	ldw	r2,8(fp)
    8fa8:	11000103 	ldbu	r4,4(r2)
    8fac:	10800143 	ldbu	r2,5(r2)
    8fb0:	1004923a 	slli	r2,r2,8
    8fb4:	1104b03a 	or	r2,r2,r4
    8fb8:	100b883a 	mov	r5,r2
    8fbc:	e13ffb17 	ldw	r4,-20(fp)
    8fc0:	1805883a 	mov	r2,r3
    8fc4:	1085883a 	add	r2,r2,r2
    8fc8:	10c5883a 	add	r2,r2,r3
    8fcc:	2085883a 	add	r2,r4,r2
    8fd0:	10800504 	addi	r2,r2,20
    8fd4:	11400005 	stb	r5,0(r2)
        }

        return true;
    8fd8:	00800044 	movi	r2,1
}
    8fdc:	e037883a 	mov	sp,fp
    8fe0:	df000017 	ldw	fp,0(sp)
    8fe4:	dec00104 	addi	sp,sp,4
    8fe8:	f800283a 	ret

00008fec <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    8fec:	213fff04 	addi	r4,r4,-4
    8ff0:	0008ea81 	jmpi	8ea8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00008ff4 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    8ff4:	defffa04 	addi	sp,sp,-24
    8ff8:	df000515 	stw	fp,20(sp)
    8ffc:	df000504 	addi	fp,sp,20
    9000:	e13ffb15 	stw	r4,-20(fp)
    9004:	3009883a 	mov	r4,r6
    9008:	3807883a 	mov	r3,r7
    900c:	e0800117 	ldw	r2,4(fp)
    9010:	e17ffc05 	stb	r5,-16(fp)
    9014:	e13ffd05 	stb	r4,-12(fp)
    9018:	e0fffe05 	stb	r3,-8(fp)
    901c:	e0bfff05 	stb	r2,-4(fp)
                return true;
    9020:	00800044 	movi	r2,1
        };
    9024:	e037883a 	mov	sp,fp
    9028:	df000017 	ldw	fp,0(sp)
    902c:	dec00104 	addi	sp,sp,4
    9030:	f800283a 	ret

00009034 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    9034:	defffe04 	addi	sp,sp,-8
    9038:	df000115 	stw	fp,4(sp)
    903c:	df000104 	addi	fp,sp,4
    9040:	e13fff15 	stw	r4,-4(fp)
    9044:	e0bfff17 	ldw	r2,-4(fp)
    9048:	10800d83 	ldbu	r2,54(r2)
    904c:	e037883a 	mov	sp,fp
    9050:	df000017 	ldw	fp,0(sp)
    9054:	dec00104 	addi	sp,sp,4
    9058:	f800283a 	ret

0000905c <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    905c:	defffe04 	addi	sp,sp,-8
    9060:	df000115 	stw	fp,4(sp)
    9064:	df000104 	addi	fp,sp,4
    9068:	e13fff15 	stw	r4,-4(fp)
    906c:	e0bfff17 	ldw	r2,-4(fp)
    9070:	10800cc3 	ldbu	r2,51(r2)
    9074:	e037883a 	mov	sp,fp
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00104 	addi	sp,sp,4
    9080:	f800283a 	ret

00009084 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    9084:	defffd04 	addi	sp,sp,-12
    9088:	df000215 	stw	fp,8(sp)
    908c:	df000204 	addi	fp,sp,8
    9090:	e13ffe15 	stw	r4,-8(fp)
    9094:	2805883a 	mov	r2,r5
    9098:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    909c:	e0bfff03 	ldbu	r2,-4(fp)
    90a0:	10803c28 	cmpgeui	r2,r2,240
    90a4:	1000031e 	bne	r2,zero,90b4 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    90a8:	e0bfff03 	ldbu	r2,-4(fp)
    90ac:	1004d13a 	srli	r2,r2,4
    90b0:	00000606 	br	90cc <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    90b4:	e0bfff03 	ldbu	r2,-4(fp)
    90b8:	10c003cc 	andi	r3,r2,15
    90bc:	008000b4 	movhi	r2,2
    90c0:	109c5844 	addi	r2,r2,29025
    90c4:	1885883a 	add	r2,r3,r2
    90c8:	10800003 	ldbu	r2,0(r2)
        };
    90cc:	e037883a 	mov	sp,fp
    90d0:	df000017 	ldw	fp,0(sp)
    90d4:	dec00104 	addi	sp,sp,4
    90d8:	f800283a 	ret

000090dc <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    90dc:	defffd04 	addi	sp,sp,-12
    90e0:	df000215 	stw	fp,8(sp)
    90e4:	df000204 	addi	fp,sp,8
    90e8:	e13ffe15 	stw	r4,-8(fp)
    90ec:	2805883a 	mov	r2,r5
    90f0:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    90f4:	e0ffff03 	ldbu	r3,-4(fp)
    90f8:	008000b4 	movhi	r2,2
    90fc:	109c5444 	addi	r2,r2,29009
    9100:	1885883a 	add	r2,r3,r2
    9104:	10800003 	ldbu	r2,0(r2)
        };
    9108:	e037883a 	mov	sp,fp
    910c:	df000017 	ldw	fp,0(sp)
    9110:	dec00104 	addi	sp,sp,4
    9114:	f800283a 	ret

00009118 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    9118:	defffe04 	addi	sp,sp,-8
    911c:	df000115 	stw	fp,4(sp)
    9120:	df000104 	addi	fp,sp,4
    9124:	e13fff15 	stw	r4,-4(fp)
    9128:	e0bfff17 	ldw	r2,-4(fp)
    912c:	10800303 	ldbu	r2,12(r2)
    9130:	e037883a 	mov	sp,fp
    9134:	df000017 	ldw	fp,0(sp)
    9138:	dec00104 	addi	sp,sp,4
    913c:	f800283a 	ret

00009140 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    9140:	defffe04 	addi	sp,sp,-8
    9144:	df000115 	stw	fp,4(sp)
    9148:	df000104 	addi	fp,sp,4
    914c:	e13fff15 	stw	r4,-4(fp)
    9150:	008000b4 	movhi	r2,2
    9154:	109c7104 	addi	r2,r2,29124
    9158:	e0ffff17 	ldw	r3,-4(fp)
    915c:	18800015 	stw	r2,0(r3)
    9160:	0001883a 	nop
    9164:	e037883a 	mov	sp,fp
    9168:	df000017 	ldw	fp,0(sp)
    916c:	dec00104 	addi	sp,sp,4
    9170:	f800283a 	ret

00009174 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    9174:	defffd04 	addi	sp,sp,-12
    9178:	df000215 	stw	fp,8(sp)
    917c:	df000204 	addi	fp,sp,8
    9180:	2005883a 	mov	r2,r4
    9184:	e17fff15 	stw	r5,-4(fp)
    9188:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    918c:	0001883a 	nop
    9190:	e037883a 	mov	sp,fp
    9194:	df000017 	ldw	fp,0(sp)
    9198:	dec00104 	addi	sp,sp,4
    919c:	f800283a 	ret

000091a0 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    91a0:	deffe204 	addi	sp,sp,-120
    91a4:	dfc01d15 	stw	ra,116(sp)
    91a8:	df001c15 	stw	fp,112(sp)
    91ac:	df001c04 	addi	fp,sp,112
    91b0:	e13ffd15 	stw	r4,-12(fp)
    91b4:	2805883a 	mov	r2,r5
    91b8:	e1bfff15 	stw	r6,-4(fp)
    91bc:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    91c0:	00801004 	movi	r2,64
    91c4:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    91c8:	e0bffd17 	ldw	r2,-12(fp)
    91cc:	11000217 	ldw	r4,8(r2)
    91d0:	e0bffd17 	ldw	r2,-12(fp)
    91d4:	10800303 	ldbu	r2,12(r2)
    91d8:	11403fcc 	andi	r5,r2,255
    91dc:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    91e0:	e0ffff17 	ldw	r3,-4(fp)
    91e4:	d8c00715 	stw	r3,28(sp)
    91e8:	e0ffec84 	addi	r3,fp,-78
    91ec:	d8c00615 	stw	r3,24(sp)
    91f0:	00c01004 	movi	r3,64
    91f4:	d8c00515 	stw	r3,20(sp)
    91f8:	00c02004 	movi	r3,128
    91fc:	d8c00415 	stw	r3,16(sp)
    9200:	d8800315 	stw	r2,12(sp)
    9204:	00800884 	movi	r2,34
    9208:	d8800215 	stw	r2,8(sp)
    920c:	d8000115 	stw	zero,4(sp)
    9210:	00800184 	movi	r2,6
    9214:	d8800015 	stw	r2,0(sp)
    9218:	01c02044 	movi	r7,129
    921c:	000d883a 	mov	r6,zero
    9220:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    9224:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    9228:	e0bfec43 	ldbu	r2,-79(fp)
}
    922c:	e037883a 	mov	sp,fp
    9230:	dfc00117 	ldw	ra,4(sp)
    9234:	df000017 	ldw	fp,0(sp)
    9238:	dec00204 	addi	sp,sp,8
    923c:	f800283a 	ret

00009240 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    9240:	defff004 	addi	sp,sp,-64
    9244:	dfc00f15 	stw	ra,60(sp)
    9248:	df000e15 	stw	fp,56(sp)
    924c:	df000e04 	addi	fp,sp,56
    9250:	e13ffa15 	stw	r4,-24(fp)
    9254:	2811883a 	mov	r8,r5
    9258:	300b883a 	mov	r5,r6
    925c:	3809883a 	mov	r4,r7
    9260:	e0c00217 	ldw	r3,8(fp)
    9264:	e0800317 	ldw	r2,12(fp)
    9268:	e23ffb05 	stb	r8,-20(fp)
    926c:	e17ffc05 	stb	r5,-16(fp)
    9270:	e13ffd05 	stb	r4,-12(fp)
    9274:	e0fffe05 	stb	r3,-8(fp)
    9278:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    927c:	e0bffa17 	ldw	r2,-24(fp)
    9280:	12000217 	ldw	r8,8(r2)
    9284:	e0bffa17 	ldw	r2,-24(fp)
    9288:	10800303 	ldbu	r2,12(r2)
    928c:	12403fcc 	andi	r9,r2,255
    9290:	e2bffb03 	ldbu	r10,-20(fp)
    9294:	e0bffe03 	ldbu	r2,-8(fp)
    9298:	e0fffd03 	ldbu	r3,-12(fp)
    929c:	e13ffc03 	ldbu	r4,-16(fp)
    92a0:	e17fff0b 	ldhu	r5,-4(fp)
    92a4:	e1bfff0b 	ldhu	r6,-4(fp)
    92a8:	d8000715 	stw	zero,28(sp)
    92ac:	e1c00417 	ldw	r7,16(fp)
    92b0:	d9c00615 	stw	r7,24(sp)
    92b4:	d9800515 	stw	r6,20(sp)
    92b8:	d9400415 	stw	r5,16(sp)
    92bc:	d9000315 	stw	r4,12(sp)
    92c0:	d8c00215 	stw	r3,8(sp)
    92c4:	d8800115 	stw	r2,4(sp)
    92c8:	00800244 	movi	r2,9
    92cc:	d8800015 	stw	r2,0(sp)
    92d0:	01c00844 	movi	r7,33
    92d4:	500d883a 	mov	r6,r10
    92d8:	480b883a 	mov	r5,r9
    92dc:	4009883a 	mov	r4,r8
    92e0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    92e4:	e037883a 	mov	sp,fp
    92e8:	dfc00117 	ldw	ra,4(sp)
    92ec:	df000017 	ldw	fp,0(sp)
    92f0:	dec00204 	addi	sp,sp,8
    92f4:	f800283a 	ret

000092f8 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    92f8:	defff004 	addi	sp,sp,-64
    92fc:	dfc00f15 	stw	ra,60(sp)
    9300:	df000e15 	stw	fp,56(sp)
    9304:	df000e04 	addi	fp,sp,56
    9308:	e13ffa15 	stw	r4,-24(fp)
    930c:	2811883a 	mov	r8,r5
    9310:	300b883a 	mov	r5,r6
    9314:	3809883a 	mov	r4,r7
    9318:	e0c00217 	ldw	r3,8(fp)
    931c:	e0800317 	ldw	r2,12(fp)
    9320:	e23ffb05 	stb	r8,-20(fp)
    9324:	e17ffc05 	stb	r5,-16(fp)
    9328:	e13ffd05 	stb	r4,-12(fp)
    932c:	e0fffe05 	stb	r3,-8(fp)
    9330:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    9334:	e0bffa17 	ldw	r2,-24(fp)
    9338:	12000217 	ldw	r8,8(r2)
    933c:	e0bffa17 	ldw	r2,-24(fp)
    9340:	10800303 	ldbu	r2,12(r2)
    9344:	12403fcc 	andi	r9,r2,255
    9348:	e2bffb03 	ldbu	r10,-20(fp)
    934c:	e0bffe03 	ldbu	r2,-8(fp)
    9350:	e0fffd03 	ldbu	r3,-12(fp)
    9354:	e13ffc03 	ldbu	r4,-16(fp)
    9358:	e17fff0b 	ldhu	r5,-4(fp)
    935c:	e1bfff0b 	ldhu	r6,-4(fp)
    9360:	d8000715 	stw	zero,28(sp)
    9364:	e1c00417 	ldw	r7,16(fp)
    9368:	d9c00615 	stw	r7,24(sp)
    936c:	d9800515 	stw	r6,20(sp)
    9370:	d9400415 	stw	r5,16(sp)
    9374:	d9000315 	stw	r4,12(sp)
    9378:	d8c00215 	stw	r3,8(sp)
    937c:	d8800115 	stw	r2,4(sp)
    9380:	00800044 	movi	r2,1
    9384:	d8800015 	stw	r2,0(sp)
    9388:	01c02844 	movi	r7,161
    938c:	500d883a 	mov	r6,r10
    9390:	480b883a 	mov	r5,r9
    9394:	4009883a 	mov	r4,r8
    9398:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    939c:	e037883a 	mov	sp,fp
    93a0:	dfc00117 	ldw	ra,4(sp)
    93a4:	df000017 	ldw	fp,0(sp)
    93a8:	dec00204 	addi	sp,sp,8
    93ac:	f800283a 	ret

000093b0 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    93b0:	defff204 	addi	sp,sp,-56
    93b4:	dfc00d15 	stw	ra,52(sp)
    93b8:	df000c15 	stw	fp,48(sp)
    93bc:	df000c04 	addi	fp,sp,48
    93c0:	e13ffc15 	stw	r4,-16(fp)
    93c4:	2807883a 	mov	r3,r5
    93c8:	3005883a 	mov	r2,r6
    93cc:	e1ffff15 	stw	r7,-4(fp)
    93d0:	e0fffd05 	stb	r3,-12(fp)
    93d4:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    93d8:	e0bffc17 	ldw	r2,-16(fp)
    93dc:	12000217 	ldw	r8,8(r2)
    93e0:	e0bffc17 	ldw	r2,-16(fp)
    93e4:	10800303 	ldbu	r2,12(r2)
    93e8:	11403fcc 	andi	r5,r2,255
    93ec:	e0bffe03 	ldbu	r2,-8(fp)
    93f0:	e0fffd03 	ldbu	r3,-12(fp)
    93f4:	d8000715 	stw	zero,28(sp)
    93f8:	e13fff17 	ldw	r4,-4(fp)
    93fc:	d9000615 	stw	r4,24(sp)
    9400:	01000044 	movi	r4,1
    9404:	d9000515 	stw	r4,20(sp)
    9408:	01000044 	movi	r4,1
    940c:	d9000415 	stw	r4,16(sp)
    9410:	d8c00315 	stw	r3,12(sp)
    9414:	d8000215 	stw	zero,8(sp)
    9418:	d8800115 	stw	r2,4(sp)
    941c:	00800084 	movi	r2,2
    9420:	d8800015 	stw	r2,0(sp)
    9424:	01c02844 	movi	r7,161
    9428:	000d883a 	mov	r6,zero
    942c:	4009883a 	mov	r4,r8
    9430:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9434:	e037883a 	mov	sp,fp
    9438:	dfc00117 	ldw	ra,4(sp)
    943c:	df000017 	ldw	fp,0(sp)
    9440:	dec00204 	addi	sp,sp,8
    9444:	f800283a 	ret

00009448 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    9448:	defff204 	addi	sp,sp,-56
    944c:	dfc00d15 	stw	ra,52(sp)
    9450:	df000c15 	stw	fp,48(sp)
    9454:	df000c04 	addi	fp,sp,48
    9458:	e13ffc15 	stw	r4,-16(fp)
    945c:	2809883a 	mov	r4,r5
    9460:	3007883a 	mov	r3,r6
    9464:	3805883a 	mov	r2,r7
    9468:	e13ffd05 	stb	r4,-12(fp)
    946c:	e0fffe05 	stb	r3,-8(fp)
    9470:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    9474:	e0bffc17 	ldw	r2,-16(fp)
    9478:	12000217 	ldw	r8,8(r2)
    947c:	e0bffc17 	ldw	r2,-16(fp)
    9480:	10800303 	ldbu	r2,12(r2)
    9484:	11403fcc 	andi	r5,r2,255
    9488:	e0bffe03 	ldbu	r2,-8(fp)
    948c:	e0ffff03 	ldbu	r3,-4(fp)
    9490:	e13ffd03 	ldbu	r4,-12(fp)
    9494:	d8000715 	stw	zero,28(sp)
    9498:	d8000615 	stw	zero,24(sp)
    949c:	d8000515 	stw	zero,20(sp)
    94a0:	d8000415 	stw	zero,16(sp)
    94a4:	d9000315 	stw	r4,12(sp)
    94a8:	d8c00215 	stw	r3,8(sp)
    94ac:	d8800115 	stw	r2,4(sp)
    94b0:	00800284 	movi	r2,10
    94b4:	d8800015 	stw	r2,0(sp)
    94b8:	01c00844 	movi	r7,33
    94bc:	000d883a 	mov	r6,zero
    94c0:	4009883a 	mov	r4,r8
    94c4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    94c8:	e037883a 	mov	sp,fp
    94cc:	dfc00117 	ldw	ra,4(sp)
    94d0:	df000017 	ldw	fp,0(sp)
    94d4:	dec00204 	addi	sp,sp,8
    94d8:	f800283a 	ret

000094dc <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    94dc:	defff304 	addi	sp,sp,-52
    94e0:	dfc00c15 	stw	ra,48(sp)
    94e4:	df000b15 	stw	fp,44(sp)
    94e8:	df000b04 	addi	fp,sp,44
    94ec:	e13ffd15 	stw	r4,-12(fp)
    94f0:	2807883a 	mov	r3,r5
    94f4:	3005883a 	mov	r2,r6
    94f8:	e0fffe05 	stb	r3,-8(fp)
    94fc:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    9500:	e0bffd17 	ldw	r2,-12(fp)
    9504:	11000217 	ldw	r4,8(r2)
    9508:	e0bffd17 	ldw	r2,-12(fp)
    950c:	10800303 	ldbu	r2,12(r2)
    9510:	11403fcc 	andi	r5,r2,255
    9514:	e0bfff03 	ldbu	r2,-4(fp)
    9518:	e0fffe03 	ldbu	r3,-8(fp)
    951c:	d8000715 	stw	zero,28(sp)
    9520:	d8000615 	stw	zero,24(sp)
    9524:	d8000515 	stw	zero,20(sp)
    9528:	d8000415 	stw	zero,16(sp)
    952c:	d8c00315 	stw	r3,12(sp)
    9530:	d8000215 	stw	zero,8(sp)
    9534:	d8800115 	stw	r2,4(sp)
    9538:	008002c4 	movi	r2,11
    953c:	d8800015 	stw	r2,0(sp)
    9540:	01c00844 	movi	r7,33
    9544:	000d883a 	mov	r6,zero
    9548:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    954c:	e037883a 	mov	sp,fp
    9550:	dfc00117 	ldw	ra,4(sp)
    9554:	df000017 	ldw	fp,0(sp)
    9558:	dec00204 	addi	sp,sp,8
    955c:	f800283a 	ret

00009560 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    9560:	defff304 	addi	sp,sp,-52
    9564:	dfc00c15 	stw	ra,48(sp)
    9568:	df000b15 	stw	fp,44(sp)
    956c:	df000b04 	addi	fp,sp,44
    9570:	e13ffd15 	stw	r4,-12(fp)
    9574:	2805883a 	mov	r2,r5
    9578:	e1bfff15 	stw	r6,-4(fp)
    957c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    9580:	e0bffd17 	ldw	r2,-12(fp)
    9584:	11000217 	ldw	r4,8(r2)
    9588:	e0bffd17 	ldw	r2,-12(fp)
    958c:	10800303 	ldbu	r2,12(r2)
    9590:	11403fcc 	andi	r5,r2,255
    9594:	e0bffe03 	ldbu	r2,-8(fp)
    9598:	d8000715 	stw	zero,28(sp)
    959c:	e0ffff17 	ldw	r3,-4(fp)
    95a0:	d8c00615 	stw	r3,24(sp)
    95a4:	00c00044 	movi	r3,1
    95a8:	d8c00515 	stw	r3,20(sp)
    95ac:	00c00044 	movi	r3,1
    95b0:	d8c00415 	stw	r3,16(sp)
    95b4:	d8800315 	stw	r2,12(sp)
    95b8:	d8000215 	stw	zero,8(sp)
    95bc:	d8000115 	stw	zero,4(sp)
    95c0:	008000c4 	movi	r2,3
    95c4:	d8800015 	stw	r2,0(sp)
    95c8:	01c02844 	movi	r7,161
    95cc:	000d883a 	mov	r6,zero
    95d0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    95d4:	e037883a 	mov	sp,fp
    95d8:	dfc00117 	ldw	ra,4(sp)
    95dc:	df000017 	ldw	fp,0(sp)
    95e0:	dec00204 	addi	sp,sp,8
    95e4:	f800283a 	ret

000095e8 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    95e8:	defffc04 	addi	sp,sp,-16
    95ec:	dfc00315 	stw	ra,12(sp)
    95f0:	df000215 	stw	fp,8(sp)
    95f4:	df000204 	addi	fp,sp,8
    95f8:	e13ffe15 	stw	r4,-8(fp)
    95fc:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    9600:	e0bfff17 	ldw	r2,-4(fp)
    9604:	10800003 	ldbu	r2,0(r2)
    9608:	10803fcc 	andi	r2,r2,255
    960c:	01402004 	movi	r5,128
    9610:	1009883a 	mov	r4,r2
    9614:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    9618:	e0bfff17 	ldw	r2,-4(fp)
    961c:	10800043 	ldbu	r2,1(r2)
    9620:	10803fcc 	andi	r2,r2,255
    9624:	01402004 	movi	r5,128
    9628:	1009883a 	mov	r4,r2
    962c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    9630:	e0bfff17 	ldw	r2,-4(fp)
    9634:	10800083 	ldbu	r2,2(r2)
    9638:	10803fcc 	andi	r2,r2,255
    963c:	01402004 	movi	r5,128
    9640:	1009883a 	mov	r4,r2
    9644:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    9648:	e0bfff17 	ldw	r2,-4(fp)
    964c:	108000c3 	ldbu	r2,3(r2)
    9650:	10803fcc 	andi	r2,r2,255
    9654:	01402004 	movi	r5,128
    9658:	1009883a 	mov	r4,r2
    965c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    9660:	e0bfff17 	ldw	r2,-4(fp)
    9664:	10c00103 	ldbu	r3,4(r2)
    9668:	10800143 	ldbu	r2,5(r2)
    966c:	1004923a 	slli	r2,r2,8
    9670:	10c4b03a 	or	r2,r2,r3
    9674:	10bfffcc 	andi	r2,r2,65535
    9678:	01402004 	movi	r5,128
    967c:	1009883a 	mov	r4,r2
    9680:	00091740 	call	9174 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    9684:	e0bfff17 	ldw	r2,-4(fp)
    9688:	10800183 	ldbu	r2,6(r2)
    968c:	10803fcc 	andi	r2,r2,255
    9690:	01402004 	movi	r5,128
    9694:	1009883a 	mov	r4,r2
    9698:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
}
    969c:	0001883a 	nop
    96a0:	e037883a 	mov	sp,fp
    96a4:	dfc00117 	ldw	ra,4(sp)
    96a8:	df000017 	ldw	fp,0(sp)
    96ac:	dec00204 	addi	sp,sp,8
    96b0:	f800283a 	ret

000096b4 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    96b4:	defffc04 	addi	sp,sp,-16
    96b8:	dfc00315 	stw	ra,12(sp)
    96bc:	df000215 	stw	fp,8(sp)
    96c0:	df000204 	addi	fp,sp,8
    96c4:	e13ffe15 	stw	r4,-8(fp)
    96c8:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    96cc:	e0bfff17 	ldw	r2,-4(fp)
    96d0:	10800003 	ldbu	r2,0(r2)
    96d4:	10803fcc 	andi	r2,r2,255
    96d8:	01402004 	movi	r5,128
    96dc:	1009883a 	mov	r4,r2
    96e0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    96e4:	e0bfff17 	ldw	r2,-4(fp)
    96e8:	10800043 	ldbu	r2,1(r2)
    96ec:	10803fcc 	andi	r2,r2,255
    96f0:	01402004 	movi	r5,128
    96f4:	1009883a 	mov	r4,r2
    96f8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    96fc:	e0bfff17 	ldw	r2,-4(fp)
    9700:	10c00083 	ldbu	r3,2(r2)
    9704:	108000c3 	ldbu	r2,3(r2)
    9708:	1004923a 	slli	r2,r2,8
    970c:	10c4b03a 	or	r2,r2,r3
    9710:	10bfffcc 	andi	r2,r2,65535
    9714:	01402004 	movi	r5,128
    9718:	1009883a 	mov	r4,r2
    971c:	00091740 	call	9174 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    9720:	e0bfff17 	ldw	r2,-4(fp)
    9724:	10800103 	ldbu	r2,4(r2)
    9728:	10803fcc 	andi	r2,r2,255
    972c:	01402004 	movi	r5,128
    9730:	1009883a 	mov	r4,r2
    9734:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    9738:	e0bfff17 	ldw	r2,-4(fp)
    973c:	10800143 	ldbu	r2,5(r2)
    9740:	10803fcc 	andi	r2,r2,255
    9744:	01402004 	movi	r5,128
    9748:	1009883a 	mov	r4,r2
    974c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    9750:	e0bfff17 	ldw	r2,-4(fp)
    9754:	10800183 	ldbu	r2,6(r2)
    9758:	10803fcc 	andi	r2,r2,255
    975c:	01402004 	movi	r5,128
    9760:	1009883a 	mov	r4,r2
    9764:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    9768:	e0bfff17 	ldw	r2,-4(fp)
    976c:	10c001c3 	ldbu	r3,7(r2)
    9770:	10800203 	ldbu	r2,8(r2)
    9774:	1004923a 	slli	r2,r2,8
    9778:	10c4b03a 	or	r2,r2,r3
    977c:	10bfffcc 	andi	r2,r2,65535
    9780:	01402004 	movi	r5,128
    9784:	1009883a 	mov	r4,r2
    9788:	00091740 	call	9174 <_Z10D_PrintHexItEvT_i>
}
    978c:	0001883a 	nop
    9790:	e037883a 	mov	sp,fp
    9794:	dfc00117 	ldw	ra,4(sp)
    9798:	df000017 	ldw	fp,0(sp)
    979c:	dec00204 	addi	sp,sp,8
    97a0:	f800283a 	ret

000097a4 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    97a4:	defffd04 	addi	sp,sp,-12
    97a8:	dfc00215 	stw	ra,8(sp)
    97ac:	df000115 	stw	fp,4(sp)
    97b0:	df000104 	addi	fp,sp,4
    97b4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    97b8:	010000f4 	movhi	r4,3
    97bc:	2124b904 	addi	r4,r4,-27932
    97c0:	001003c0 	call	1003c <puts>
	vbusState = 0;
    97c4:	d0324345 	stb	zero,-14067(gp)
};
    97c8:	0001883a 	nop
    97cc:	e037883a 	mov	sp,fp
    97d0:	dfc00117 	ldw	ra,4(sp)
    97d4:	df000017 	ldw	fp,0(sp)
    97d8:	dec00204 	addi	sp,sp,8
    97dc:	f800283a 	ret

000097e0 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    97e0:	defffe04 	addi	sp,sp,-8
    97e4:	df000115 	stw	fp,4(sp)
    97e8:	df000104 	addi	fp,sp,4
    97ec:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    97f0:	d0b24343 	ldbu	r2,-14067(gp)
};
    97f4:	e037883a 	mov	sp,fp
    97f8:	df000017 	ldw	fp,0(sp)
    97fc:	dec00104 	addi	sp,sp,4
    9800:	f800283a 	ret

00009804 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    9804:	defff704 	addi	sp,sp,-36
    9808:	dfc00815 	stw	ra,32(sp)
    980c:	df000715 	stw	fp,28(sp)
    9810:	df000704 	addi	fp,sp,28
    9814:	e13ffd15 	stw	r4,-12(fp)
    9818:	2807883a 	mov	r3,r5
    981c:	3005883a 	mov	r2,r6
    9820:	e0fffe05 	stb	r3,-8(fp)
    9824:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    9828:	e03ffc45 	stb	zero,-15(fp)
    982c:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9830:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    9834:	e0bffe03 	ldbu	r2,-8(fp)
    9838:	10800084 	addi	r2,r2,2
    983c:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    9840:	e0bfff03 	ldbu	r2,-4(fp)
    9844:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    9848:	e0fffc44 	addi	r3,fp,-15
    984c:	d8000215 	stw	zero,8(sp)
    9850:	e0bffcc4 	addi	r2,fp,-13
    9854:	d8800115 	stw	r2,4(sp)
    9858:	d8000015 	stw	zero,0(sp)
    985c:	180f883a 	mov	r7,r3
    9860:	01800084 	movi	r6,2
    9864:	000b883a 	mov	r5,zero
    9868:	01010034 	movhi	r4,1024
    986c:	21044804 	addi	r4,r4,4384
    9870:	00232900 	call	23290 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    9874:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    9878:	0001883a 	nop
    987c:	e037883a 	mov	sp,fp
    9880:	dfc00117 	ldw	ra,4(sp)
    9884:	df000017 	ldw	fp,0(sp)
    9888:	dec00204 	addi	sp,sp,8
    988c:	f800283a 	ret

00009890 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9890:	defff304 	addi	sp,sp,-52
    9894:	dfc00c15 	stw	ra,48(sp)
    9898:	df000b15 	stw	fp,44(sp)
    989c:	dc000a15 	stw	r16,40(sp)
    98a0:	df000b04 	addi	fp,sp,44
    98a4:	e13ffb15 	stw	r4,-20(fp)
    98a8:	3009883a 	mov	r4,r6
    98ac:	e1fffe15 	stw	r7,-8(fp)
    98b0:	e17ffc05 	stb	r5,-16(fp)
    98b4:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    98b8:	d809883a 	mov	r4,sp
    98bc:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    98c0:	e13ffd03 	ldbu	r4,-12(fp)
    98c4:	e13ff815 	stw	r4,-32(fp)
    98c8:	200b883a 	mov	r5,r4
    98cc:	29400044 	addi	r5,r5,1
    98d0:	2819883a 	mov	r12,r5
    98d4:	001b883a 	mov	r13,zero
    98d8:	600ad77a 	srli	r5,r12,29
    98dc:	681290fa 	slli	r9,r13,3
    98e0:	2a52b03a 	or	r9,r5,r9
    98e4:	601090fa 	slli	r8,r12,3
    98e8:	200b883a 	mov	r5,r4
    98ec:	29400044 	addi	r5,r5,1
    98f0:	2815883a 	mov	r10,r5
    98f4:	0017883a 	mov	r11,zero
    98f8:	500ad77a 	srli	r5,r10,29
    98fc:	580690fa 	slli	r3,r11,3
    9900:	28c6b03a 	or	r3,r5,r3
    9904:	500490fa 	slli	r2,r10,3
    9908:	2005883a 	mov	r2,r4
    990c:	10800044 	addi	r2,r2,1
    9910:	108000c4 	addi	r2,r2,3
    9914:	1004d0ba 	srli	r2,r2,2
    9918:	1085883a 	add	r2,r2,r2
    991c:	1085883a 	add	r2,r2,r2
    9920:	d8b7c83a 	sub	sp,sp,r2
    9924:	d8800304 	addi	r2,sp,12
    9928:	1005883a 	mov	r2,r2
    992c:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    9930:	e0bffc03 	ldbu	r2,-16(fp)
    9934:	10800084 	addi	r2,r2,2
    9938:	1007883a 	mov	r3,r2
    993c:	e0bff917 	ldw	r2,-28(fp)
    9940:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    9944:	e0bff917 	ldw	r2,-28(fp)
    9948:	10800044 	addi	r2,r2,1
    994c:	e0fffd03 	ldbu	r3,-12(fp)
    9950:	180d883a 	mov	r6,r3
    9954:	e17ffe17 	ldw	r5,-8(fp)
    9958:	1009883a 	mov	r4,r2
    995c:	000fc800 	call	fc80 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    9960:	e0bffd03 	ldbu	r2,-12(fp)
    9964:	10800044 	addi	r2,r2,1
    9968:	1009883a 	mov	r4,r2
    996c:	e0fff917 	ldw	r3,-28(fp)
    9970:	d8000215 	stw	zero,8(sp)
    9974:	e0bffa44 	addi	r2,fp,-23
    9978:	d8800115 	stw	r2,4(sp)
    997c:	d8000015 	stw	zero,0(sp)
    9980:	180f883a 	mov	r7,r3
    9984:	200d883a 	mov	r6,r4
    9988:	000b883a 	mov	r5,zero
    998c:	01010034 	movhi	r4,1024
    9990:	21044804 	addi	r4,r4,4384
    9994:	00232900 	call	23290 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    9998:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    999c:	e0bffd03 	ldbu	r2,-12(fp)
    99a0:	e0fffe17 	ldw	r3,-8(fp)
    99a4:	1885883a 	add	r2,r3,r2
    99a8:	8037883a 	mov	sp,r16
}
    99ac:	e6ffff04 	addi	sp,fp,-4
    99b0:	dfc00217 	ldw	ra,8(sp)
    99b4:	df000117 	ldw	fp,4(sp)
    99b8:	dc000017 	ldw	r16,0(sp)
    99bc:	dec00304 	addi	sp,sp,12
    99c0:	f800283a 	ret

000099c4 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    99c4:	defffc04 	addi	sp,sp,-16
    99c8:	dfc00315 	stw	ra,12(sp)
    99cc:	df000215 	stw	fp,8(sp)
    99d0:	df000204 	addi	fp,sp,8
    99d4:	e13ffe15 	stw	r4,-8(fp)
    99d8:	2805883a 	mov	r2,r5
    99dc:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    99e0:	010000f4 	movhi	r4,3
    99e4:	2124bf04 	addi	r4,r4,-27908
    99e8:	001003c0 	call	1003c <puts>
	regWr(rIOPINS1, data);
    99ec:	e0bfff03 	ldbu	r2,-4(fp)
    99f0:	100d883a 	mov	r6,r2
    99f4:	01402804 	movi	r5,160
    99f8:	e13ffe17 	ldw	r4,-8(fp)
    99fc:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    9a00:	e0bfff03 	ldbu	r2,-4(fp)
    9a04:	1005d13a 	srai	r2,r2,4
    9a08:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    9a0c:	e0bfff03 	ldbu	r2,-4(fp)
    9a10:	100d883a 	mov	r6,r2
    9a14:	01402a04 	movi	r5,168
    9a18:	e13ffe17 	ldw	r4,-8(fp)
    9a1c:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
	return;
    9a20:	0001883a 	nop
}
    9a24:	e037883a 	mov	sp,fp
    9a28:	dfc00117 	ldw	ra,4(sp)
    9a2c:	df000017 	ldw	fp,0(sp)
    9a30:	dec00204 	addi	sp,sp,8
    9a34:	f800283a 	ret

00009a38 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    9a38:	defff804 	addi	sp,sp,-32
    9a3c:	dfc00715 	stw	ra,28(sp)
    9a40:	df000615 	stw	fp,24(sp)
    9a44:	df000604 	addi	fp,sp,24
    9a48:	e13ffe15 	stw	r4,-8(fp)
    9a4c:	2805883a 	mov	r2,r5
    9a50:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9a54:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9a58:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9a5c:	e0bfff03 	ldbu	r2,-4(fp)
    9a60:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9a64:	e0fffd44 	addi	r3,fp,-11
    9a68:	d8000215 	stw	zero,8(sp)
    9a6c:	e0bffd84 	addi	r2,fp,-10
    9a70:	d8800115 	stw	r2,4(sp)
    9a74:	00800044 	movi	r2,1
    9a78:	d8800015 	stw	r2,0(sp)
    9a7c:	180f883a 	mov	r7,r3
    9a80:	01800044 	movi	r6,1
    9a84:	000b883a 	mov	r5,zero
    9a88:	01010034 	movhi	r4,1024
    9a8c:	21044804 	addi	r4,r4,4384
    9a90:	00232900 	call	23290 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    9a94:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    9a98:	e0bffd83 	ldbu	r2,-10(fp)
}
    9a9c:	e037883a 	mov	sp,fp
    9aa0:	dfc00117 	ldw	ra,4(sp)
    9aa4:	df000017 	ldw	fp,0(sp)
    9aa8:	dec00204 	addi	sp,sp,8
    9aac:	f800283a 	ret

00009ab0 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9ab0:	defff604 	addi	sp,sp,-40
    9ab4:	dfc00915 	stw	ra,36(sp)
    9ab8:	df000815 	stw	fp,32(sp)
    9abc:	df000804 	addi	fp,sp,32
    9ac0:	e13ffc15 	stw	r4,-16(fp)
    9ac4:	2807883a 	mov	r3,r5
    9ac8:	3005883a 	mov	r2,r6
    9acc:	e1ffff15 	stw	r7,-4(fp)
    9ad0:	e0fffd05 	stb	r3,-12(fp)
    9ad4:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9ad8:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9adc:	e0bffd03 	ldbu	r2,-12(fp)
    9ae0:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9ae4:	e0bffe03 	ldbu	r2,-8(fp)
    9ae8:	e13ffb44 	addi	r4,fp,-19
    9aec:	d8000215 	stw	zero,8(sp)
    9af0:	e0ffff17 	ldw	r3,-4(fp)
    9af4:	d8c00115 	stw	r3,4(sp)
    9af8:	d8800015 	stw	r2,0(sp)
    9afc:	200f883a 	mov	r7,r4
    9b00:	01800044 	movi	r6,1
    9b04:	000b883a 	mov	r5,zero
    9b08:	01010034 	movhi	r4,1024
    9b0c:	21044804 	addi	r4,r4,4384
    9b10:	00232900 	call	23290 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    9b14:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    9b18:	e0bffe03 	ldbu	r2,-8(fp)
    9b1c:	e0ffff17 	ldw	r3,-4(fp)
    9b20:	1885883a 	add	r2,r3,r2
}
    9b24:	e037883a 	mov	sp,fp
    9b28:	dfc00117 	ldw	ra,4(sp)
    9b2c:	df000017 	ldw	fp,0(sp)
    9b30:	dec00204 	addi	sp,sp,8
    9b34:	f800283a 	ret

00009b38 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    9b38:	defffc04 	addi	sp,sp,-16
    9b3c:	dfc00315 	stw	ra,12(sp)
    9b40:	df000215 	stw	fp,8(sp)
    9b44:	df000204 	addi	fp,sp,8
    9b48:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    9b4c:	010000f4 	movhi	r4,3
    9b50:	2124c304 	addi	r4,r4,-27892
    9b54:	001003c0 	call	1003c <puts>
	uint8_t gpin = 0;
    9b58:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    9b5c:	01402a04 	movi	r5,168
    9b60:	e13fff17 	ldw	r4,-4(fp)
    9b64:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    9b68:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    9b6c:	e0fffe03 	ldbu	r3,-8(fp)
    9b70:	00bffc04 	movi	r2,-16
    9b74:	1884703a 	and	r2,r3,r2
    9b78:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    9b7c:	01402804 	movi	r5,160
    9b80:	e13fff17 	ldw	r4,-4(fp)
    9b84:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    9b88:	10803fcc 	andi	r2,r2,255
    9b8c:	1005d13a 	srai	r2,r2,4
    9b90:	1007883a 	mov	r3,r2
    9b94:	e0bffe03 	ldbu	r2,-8(fp)
    9b98:	1884b03a 	or	r2,r3,r2
    9b9c:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    9ba0:	e0bffe03 	ldbu	r2,-8(fp)
}
    9ba4:	e037883a 	mov	sp,fp
    9ba8:	dfc00117 	ldw	ra,4(sp)
    9bac:	df000017 	ldw	fp,0(sp)
    9bb0:	dec00204 	addi	sp,sp,8
    9bb4:	f800283a 	ret

00009bb8 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    9bb8:	defffc04 	addi	sp,sp,-16
    9bbc:	dfc00315 	stw	ra,12(sp)
    9bc0:	df000215 	stw	fp,8(sp)
    9bc4:	df000204 	addi	fp,sp,8
    9bc8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    9bcc:	010000f4 	movhi	r4,3
    9bd0:	2124c704 	addi	r4,r4,-27876
    9bd4:	001003c0 	call	1003c <puts>
	uint8_t gpout = 0;
    9bd8:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    9bdc:	01402804 	movi	r5,160
    9be0:	e13fff17 	ldw	r4,-4(fp)
    9be4:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    9be8:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    9bec:	e0bffe03 	ldbu	r2,-8(fp)
    9bf0:	108003cc 	andi	r2,r2,15
    9bf4:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    9bf8:	01402a04 	movi	r5,168
    9bfc:	e13fff17 	ldw	r4,-4(fp)
    9c00:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    9c04:	10803fcc 	andi	r2,r2,255
    9c08:	1004913a 	slli	r2,r2,4
    9c0c:	1007883a 	mov	r3,r2
    9c10:	e0bffe03 	ldbu	r2,-8(fp)
    9c14:	1884b03a 	or	r2,r3,r2
    9c18:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    9c1c:	e0bffe03 	ldbu	r2,-8(fp)
}
    9c20:	e037883a 	mov	sp,fp
    9c24:	dfc00117 	ldw	ra,4(sp)
    9c28:	df000017 	ldw	fp,0(sp)
    9c2c:	dec00204 	addi	sp,sp,8
    9c30:	f800283a 	ret

00009c34 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    9c34:	defffc04 	addi	sp,sp,-16
    9c38:	dfc00315 	stw	ra,12(sp)
    9c3c:	df000215 	stw	fp,8(sp)
    9c40:	df000204 	addi	fp,sp,8
    9c44:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    9c48:	010000f4 	movhi	r4,3
    9c4c:	2124cd04 	addi	r4,r4,-27852
    9c50:	001003c0 	call	1003c <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    9c54:	0007883a 	mov	r3,zero
    9c58:	00810034 	movhi	r2,1024
    9c5c:	10847404 	addi	r2,r2,4560
    9c60:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    9c64:	010003f4 	movhi	r4,15
    9c68:	21109004 	addi	r4,r4,16960
    9c6c:	00209c40 	call	209c4 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    9c70:	00c00044 	movi	r3,1
    9c74:	00810034 	movhi	r2,1024
    9c78:	10847404 	addi	r2,r2,4560
    9c7c:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9c80:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    9c84:	01800804 	movi	r6,32
    9c88:	01401e04 	movi	r5,120
    9c8c:	e13fff17 	ldw	r4,-4(fp)
    9c90:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    9c94:	000d883a 	mov	r6,zero
    9c98:	01401e04 	movi	r5,120
    9c9c:	e13fff17 	ldw	r4,-4(fp)
    9ca0:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    9ca4:	e0bffe0b 	ldhu	r2,-8(fp)
    9ca8:	10800044 	addi	r2,r2,1
    9cac:	e0bffe0d 	sth	r2,-8(fp)
    9cb0:	e0bffe0b 	ldhu	r2,-8(fp)
    9cb4:	1004c03a 	cmpne	r2,r2,zero
    9cb8:	10803fcc 	andi	r2,r2,255
    9cbc:	10000a26 	beq	r2,zero,9ce8 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    9cc0:	01401a04 	movi	r5,104
    9cc4:	e13fff17 	ldw	r4,-4(fp)
    9cc8:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    9ccc:	10803fcc 	andi	r2,r2,255
    9cd0:	1080004c 	andi	r2,r2,1
    9cd4:	1004c03a 	cmpne	r2,r2,zero
    9cd8:	10803fcc 	andi	r2,r2,255
    9cdc:	1000011e 	bne	r2,zero,9ce4 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    9ce0:	003ff006 	br	9ca4 <__alt_data_end+0xfc009ca4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    9ce4:	0001883a 	nop
		}
	}
	return ( i);
    9ce8:	e0bffe0b 	ldhu	r2,-8(fp)
}
    9cec:	e037883a 	mov	sp,fp
    9cf0:	dfc00117 	ldw	ra,4(sp)
    9cf4:	df000017 	ldw	fp,0(sp)
    9cf8:	dec00204 	addi	sp,sp,8
    9cfc:	f800283a 	ret

00009d00 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    9d00:	defffe04 	addi	sp,sp,-8
    9d04:	df000115 	stw	fp,4(sp)
    9d08:	df000104 	addi	fp,sp,4
    9d0c:	2005883a 	mov	r2,r4
    9d10:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    9d14:	00800044 	movi	r2,1
}
    9d18:	e037883a 	mov	sp,fp
    9d1c:	df000017 	ldw	fp,0(sp)
    9d20:	dec00104 	addi	sp,sp,4
    9d24:	f800283a 	ret

00009d28 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    9d28:	defffd04 	addi	sp,sp,-12
    9d2c:	dfc00215 	stw	ra,8(sp)
    9d30:	df000115 	stw	fp,4(sp)
    9d34:	df000104 	addi	fp,sp,4
    9d38:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    9d3c:	010000f4 	movhi	r4,3
    9d40:	2124d104 	addi	r4,r4,-27836
    9d44:	001003c0 	call	1003c <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9d48:	01800604 	movi	r6,24
    9d4c:	01402204 	movi	r5,136
    9d50:	e13fff17 	ldw	r4,-4(fp)
    9d54:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9d58:	e13fff17 	ldw	r4,-4(fp)
    9d5c:	0009c340 	call	9c34 <_ZN8MAX3421e5resetEv>
    9d60:	10bfffcc 	andi	r2,r2,65535
    9d64:	1005003a 	cmpeq	r2,r2,zero
    9d68:	10803fcc 	andi	r2,r2,255
    9d6c:	10000226 	beq	r2,zero,9d78 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    9d70:	00bfffc4 	movi	r2,-1
    9d74:	00002006 	br	9df8 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9d78:	01803044 	movi	r6,193
    9d7c:	01403604 	movi	r5,216
    9d80:	e13fff17 	ldw	r4,-4(fp)
    9d84:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9d88:	01801804 	movi	r6,96
    9d8c:	01403404 	movi	r5,208
    9d90:	e13fff17 	ldw	r4,-4(fp)
    9d94:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9d98:	01800104 	movi	r6,4
    9d9c:	01403a04 	movi	r5,232
    9da0:	e13fff17 	ldw	r4,-4(fp)
    9da4:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9da8:	01403a04 	movi	r5,232
    9dac:	e13fff17 	ldw	r4,-4(fp)
    9db0:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    9db4:	10803fcc 	andi	r2,r2,255
    9db8:	1080010c 	andi	r2,r2,4
    9dbc:	1005003a 	cmpeq	r2,r2,zero
    9dc0:	10803fcc 	andi	r2,r2,255
    9dc4:	10000126 	beq	r2,zero,9dcc <_ZN8MAX3421e4InitEv+0xa4>
    9dc8:	003ff706 	br	9da8 <__alt_data_end+0xfc009da8>

	busprobe(); //check if anything is connected
    9dcc:	e13fff17 	ldw	r4,-4(fp)
    9dd0:	0009f240 	call	9f24 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9dd4:	01800804 	movi	r6,32
    9dd8:	01403204 	movi	r5,200
    9ddc:	e13fff17 	ldw	r4,-4(fp)
    9de0:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9de4:	01800044 	movi	r6,1
    9de8:	01402004 	movi	r5,128
    9dec:	e13fff17 	ldw	r4,-4(fp)
    9df0:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9df4:	0005883a 	mov	r2,zero
}
    9df8:	e037883a 	mov	sp,fp
    9dfc:	dfc00117 	ldw	ra,4(sp)
    9e00:	df000017 	ldw	fp,0(sp)
    9e04:	dec00204 	addi	sp,sp,8
    9e08:	f800283a 	ret

00009e0c <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    9e0c:	defffc04 	addi	sp,sp,-16
    9e10:	dfc00315 	stw	ra,12(sp)
    9e14:	df000215 	stw	fp,8(sp)
    9e18:	df000204 	addi	fp,sp,8
    9e1c:	e13ffe15 	stw	r4,-8(fp)
    9e20:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9e24:	010000f4 	movhi	r4,3
    9e28:	2124d504 	addi	r4,r4,-27820
    9e2c:	001003c0 	call	1003c <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9e30:	01800644 	movi	r6,25
    9e34:	01402204 	movi	r5,136
    9e38:	e13ffe17 	ldw	r4,-8(fp)
    9e3c:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9e40:	e13ffe17 	ldw	r4,-8(fp)
    9e44:	0009c340 	call	9c34 <_ZN8MAX3421e5resetEv>
    9e48:	10bfffcc 	andi	r2,r2,65535
    9e4c:	1005003a 	cmpeq	r2,r2,zero
    9e50:	10803fcc 	andi	r2,r2,255
    9e54:	10000226 	beq	r2,zero,9e60 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9e58:	00bfffc4 	movi	r2,-1
    9e5c:	00002c06 	br	9f10 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9e60:	e0bfff17 	ldw	r2,-4(fp)
    9e64:	1080fa08 	cmpgei	r2,r2,1000
    9e68:	1000021e 	bne	r2,zero,9e74 <_ZN8MAX3421e4InitEi+0x68>
    9e6c:	0080fa04 	movi	r2,1000
    9e70:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9e74:	e0bfff17 	ldw	r2,-4(fp)
    9e78:	1009883a 	mov	r4,r2
    9e7c:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9e80:	01803044 	movi	r6,193
    9e84:	01403604 	movi	r5,216
    9e88:	e13ffe17 	ldw	r4,-8(fp)
    9e8c:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9e90:	01801804 	movi	r6,96
    9e94:	01403404 	movi	r5,208
    9e98:	e13ffe17 	ldw	r4,-8(fp)
    9e9c:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9ea0:	01800104 	movi	r6,4
    9ea4:	01403a04 	movi	r5,232
    9ea8:	e13ffe17 	ldw	r4,-8(fp)
    9eac:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9eb0:	01403a04 	movi	r5,232
    9eb4:	e13ffe17 	ldw	r4,-8(fp)
    9eb8:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    9ebc:	10803fcc 	andi	r2,r2,255
    9ec0:	1080010c 	andi	r2,r2,4
    9ec4:	1005003a 	cmpeq	r2,r2,zero
    9ec8:	10803fcc 	andi	r2,r2,255
    9ecc:	10000126 	beq	r2,zero,9ed4 <_ZN8MAX3421e4InitEi+0xc8>
    9ed0:	003ff706 	br	9eb0 <__alt_data_end+0xfc009eb0>

	busprobe(); //check if anything is connected
    9ed4:	e13ffe17 	ldw	r4,-8(fp)
    9ed8:	0009f240 	call	9f24 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9edc:	01800804 	movi	r6,32
    9ee0:	01403204 	movi	r5,200
    9ee4:	e13ffe17 	ldw	r4,-8(fp)
    9ee8:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9eec:	01800044 	movi	r6,1
    9ef0:	01402004 	movi	r5,128
    9ef4:	e13ffe17 	ldw	r4,-8(fp)
    9ef8:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9efc:	01800604 	movi	r6,24
    9f00:	01402204 	movi	r5,136
    9f04:	e13ffe17 	ldw	r4,-8(fp)
    9f08:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9f0c:	0005883a 	mov	r2,zero
}
    9f10:	e037883a 	mov	sp,fp
    9f14:	dfc00117 	ldw	ra,4(sp)
    9f18:	df000017 	ldw	fp,0(sp)
    9f1c:	dec00204 	addi	sp,sp,8
    9f20:	f800283a 	ret

00009f24 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9f24:	defffc04 	addi	sp,sp,-16
    9f28:	dfc00315 	stw	ra,12(sp)
    9f2c:	df000215 	stw	fp,8(sp)
    9f30:	df000204 	addi	fp,sp,8
    9f34:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9f38:	010000f4 	movhi	r4,3
    9f3c:	2124db04 	addi	r4,r4,-27796
    9f40:	001003c0 	call	1003c <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9f44:	01403e04 	movi	r5,248
    9f48:	e13fff17 	ldw	r4,-4(fp)
    9f4c:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    9f50:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    9f54:	e0fffe03 	ldbu	r3,-8(fp)
    9f58:	00bff004 	movi	r2,-64
    9f5c:	1884703a 	and	r2,r3,r2
    9f60:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    9f64:	e0bffe03 	ldbu	r2,-8(fp)
    9f68:	10c01020 	cmpeqi	r3,r2,64
    9f6c:	1800251e 	bne	r3,zero,a004 <_ZN8MAX3421e8busprobeEv+0xe0>
    9f70:	10c01048 	cmpgei	r3,r2,65
    9f74:	1800021e 	bne	r3,zero,9f80 <_ZN8MAX3421e8busprobeEv+0x5c>
    9f78:	10003b26 	beq	r2,zero,a068 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9f7c:	00004006 	br	a080 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    9f80:	10c02020 	cmpeqi	r3,r2,128
    9f84:	1800031e 	bne	r3,zero,9f94 <_ZN8MAX3421e8busprobeEv+0x70>
    9f88:	10803020 	cmpeqi	r2,r2,192
    9f8c:	1000331e 	bne	r2,zero,a05c <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9f90:	00003b06 	br	a080 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9f94:	01403604 	movi	r5,216
    9f98:	e13fff17 	ldw	r4,-4(fp)
    9f9c:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    9fa0:	10803fcc 	andi	r2,r2,255
    9fa4:	1080008c 	andi	r2,r2,2
    9fa8:	1005003a 	cmpeq	r2,r2,zero
    9fac:	10803fcc 	andi	r2,r2,255
    9fb0:	10000a26 	beq	r2,zero,9fdc <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    9fb4:	010000f4 	movhi	r4,3
    9fb8:	2124e004 	addi	r4,r4,-27776
    9fbc:	001003c0 	call	1003c <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9fc0:	01803244 	movi	r6,201
    9fc4:	01403604 	movi	r5,216
    9fc8:	e13fff17 	ldw	r4,-4(fp)
    9fcc:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9fd0:	00800084 	movi	r2,2
    9fd4:	d0b24345 	stb	r2,-14067(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    9fd8:	00002906 	br	a080 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    9fdc:	010000f4 	movhi	r4,3
    9fe0:	2124e704 	addi	r4,r4,-27748
    9fe4:	001003c0 	call	1003c <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9fe8:	018032c4 	movi	r6,203
    9fec:	01403604 	movi	r5,216
    9ff0:	e13fff17 	ldw	r4,-4(fp)
    9ff4:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9ff8:	008000c4 	movi	r2,3
    9ffc:	d0b24345 	stb	r2,-14067(gp)
			}
			break;
    a000:	00001f06 	br	a080 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    a004:	01403604 	movi	r5,216
    a008:	e13fff17 	ldw	r4,-4(fp)
    a00c:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    a010:	10803fcc 	andi	r2,r2,255
    a014:	1080008c 	andi	r2,r2,2
    a018:	1005003a 	cmpeq	r2,r2,zero
    a01c:	10803fcc 	andi	r2,r2,255
    a020:	10000726 	beq	r2,zero,a040 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    a024:	018032c4 	movi	r6,203
    a028:	01403604 	movi	r5,216
    a02c:	e13fff17 	ldw	r4,-4(fp)
    a030:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    a034:	008000c4 	movi	r2,3
    a038:	d0b24345 	stb	r2,-14067(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    a03c:	00001006 	br	a080 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    a040:	01803244 	movi	r6,201
    a044:	01403604 	movi	r5,216
    a048:	e13fff17 	ldw	r4,-4(fp)
    a04c:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    a050:	00800084 	movi	r2,2
    a054:	d0b24345 	stb	r2,-14067(gp)
			}
			break;
    a058:	00000906 	br	a080 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    a05c:	00800044 	movi	r2,1
    a060:	d0b24345 	stb	r2,-14067(gp)
			break;
    a064:	00000606 	br	a080 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    a068:	01803444 	movi	r6,209
    a06c:	01403604 	movi	r5,216
    a070:	e13fff17 	ldw	r4,-4(fp)
    a074:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    a078:	d0324345 	stb	zero,-14067(gp)
			break;
    a07c:	0001883a 	nop
	}//end switch( bus_sample )
}
    a080:	0001883a 	nop
    a084:	e037883a 	mov	sp,fp
    a088:	dfc00117 	ldw	ra,4(sp)
    a08c:	df000017 	ldw	fp,0(sp)
    a090:	dec00204 	addi	sp,sp,8
    a094:	f800283a 	ret

0000a098 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    a098:	defffc04 	addi	sp,sp,-16
    a09c:	dfc00315 	stw	ra,12(sp)
    a0a0:	df000215 	stw	fp,8(sp)
    a0a4:	df000204 	addi	fp,sp,8
    a0a8:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    a0ac:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    a0b0:	00810034 	movhi	r2,1024
    a0b4:	10847c04 	addi	r2,r2,4592
    a0b8:	10800003 	ldbu	r2,0(r2)
    a0bc:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    a0c0:	00810034 	movhi	r2,1024
    a0c4:	10847c04 	addi	r2,r2,4592
    a0c8:	10800037 	ldwio	r2,0(r2)
    a0cc:	1005003a 	cmpeq	r2,r2,zero
    a0d0:	10803fcc 	andi	r2,r2,255
    a0d4:	10000326 	beq	r2,zero,a0e4 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    a0d8:	e13fff17 	ldw	r4,-4(fp)
    a0dc:	000a0fc0 	call	a0fc <_ZN8MAX3421e10IntHandlerEv>
    a0e0:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    a0e4:	e0bffe03 	ldbu	r2,-8(fp)
}
    a0e8:	e037883a 	mov	sp,fp
    a0ec:	dfc00117 	ldw	ra,4(sp)
    a0f0:	df000017 	ldw	fp,0(sp)
    a0f4:	dec00204 	addi	sp,sp,8
    a0f8:	f800283a 	ret

0000a0fc <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    a0fc:	defffc04 	addi	sp,sp,-16
    a100:	dfc00315 	stw	ra,12(sp)
    a104:	df000215 	stw	fp,8(sp)
    a108:	df000204 	addi	fp,sp,8
    a10c:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    a110:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    a114:	01403204 	movi	r5,200
    a118:	e13fff17 	ldw	r4,-4(fp)
    a11c:	0009a380 	call	9a38 <_ZN8MAX3421e5regRdEh>
    a120:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    a124:	e0bffe43 	ldbu	r2,-7(fp)
    a128:	1080080c 	andi	r2,r2,32
    a12c:	10000526 	beq	r2,zero,a144 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    a130:	e13fff17 	ldw	r4,-4(fp)
    a134:	0009f240 	call	9f24 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    a138:	e0bffe03 	ldbu	r2,-8(fp)
    a13c:	10800814 	ori	r2,r2,32
    a140:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    a144:	e0bffe03 	ldbu	r2,-8(fp)
    a148:	100d883a 	mov	r6,r2
    a14c:	01403204 	movi	r5,200
    a150:	e13fff17 	ldw	r4,-4(fp)
    a154:	00098040 	call	9804 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    a158:	e0bffe03 	ldbu	r2,-8(fp)
}
    a15c:	e037883a 	mov	sp,fp
    a160:	dfc00117 	ldw	ra,4(sp)
    a164:	df000017 	ldw	fp,0(sp)
    a168:	dec00204 	addi	sp,sp,8
    a16c:	f800283a 	ret

0000a170 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    a170:	defffe04 	addi	sp,sp,-8
    a174:	df000115 	stw	fp,4(sp)
    a178:	df000104 	addi	fp,sp,4
    a17c:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    a180:	0005883a 	mov	r2,zero
}
    a184:	e037883a 	mov	sp,fp
    a188:	df000017 	ldw	fp,0(sp)
    a18c:	dec00104 	addi	sp,sp,4
    a190:	f800283a 	ret

0000a194 <_Z6onInitv>:
bool ped_flip = 0;

void MIDI_poll();

void onInit()
{
    a194:	defff804 	addi	sp,sp,-32
    a198:	dfc00715 	stw	ra,28(sp)
    a19c:	df000615 	stw	fp,24(sp)
    a1a0:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    a1a4:	010000f4 	movhi	r4,3
    a1a8:	21081104 	addi	r4,r4,8260
    a1ac:	000ae4c0 	call	ae4c <_ZN9USBH_MIDI8idVendorEv>
    a1b0:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    a1b4:	010000f4 	movhi	r4,3
    a1b8:	21081104 	addi	r4,r4,8260
    a1bc:	000ae740 	call	ae74 <_ZN9USBH_MIDI9idProductEv>
    a1c0:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    a1c4:	e0fffa0b 	ldhu	r3,-24(fp)
    a1c8:	e13ffa8b 	ldhu	r4,-22(fp)
    a1cc:	e0bffb04 	addi	r2,fp,-20
    a1d0:	200f883a 	mov	r7,r4
    a1d4:	180d883a 	mov	r6,r3
    a1d8:	014000f4 	movhi	r5,3
    a1dc:	296d2304 	addi	r5,r5,-19316
    a1e0:	1009883a 	mov	r4,r2
    a1e4:	00104000 	call	10400 <sprintf>
  printf("%s\n", buf);
    a1e8:	e0bffb04 	addi	r2,fp,-20
    a1ec:	1009883a 	mov	r4,r2
    a1f0:	001003c0 	call	1003c <puts>
}
    a1f4:	0001883a 	nop
    a1f8:	e037883a 	mov	sp,fp
    a1fc:	dfc00117 	ldw	ra,4(sp)
    a200:	df000017 	ldw	fp,0(sp)
    a204:	dec00204 	addi	sp,sp,8
    a208:	f800283a 	ret

0000a20c <_Z10MIDI_setupv>:

void MIDI_setup()
{
    a20c:	defffe04 	addi	sp,sp,-8
    a210:	dfc00115 	stw	ra,4(sp)
    a214:	df000015 	stw	fp,0(sp)
    a218:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    a21c:	010000f4 	movhi	r4,3
    a220:	2107e204 	addi	r4,r4,8072
    a224:	0009d280 	call	9d28 <_ZN8MAX3421e4InitEv>
    a228:	10803fcc 	andi	r2,r2,255
    a22c:	1080201c 	xori	r2,r2,128
    a230:	10bfe004 	addi	r2,r2,-128
    a234:	10bfffe0 	cmpeqi	r2,r2,-1
    a238:	10803fcc 	andi	r2,r2,255
    a23c:	10000326 	beq	r2,zero,a24c <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    a240:	010000f4 	movhi	r4,3
    a244:	212d2804 	addi	r4,r4,-19296
    a248:	000ff200 	call	ff20 <printf>
	printf ("USB Started\n\r");
    a24c:	010000f4 	movhi	r4,3
    a250:	212d2a04 	addi	r4,r4,-19288
    a254:	000ff200 	call	ff20 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    a258:	01400074 	movhi	r5,1
    a25c:	29686504 	addi	r5,r5,-24172
    a260:	010000f4 	movhi	r4,3
    a264:	21081104 	addi	r4,r4,8260
    a268:	000ae9c0 	call	ae9c <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    a26c:	0001883a 	nop
    a270:	e037883a 	mov	sp,fp
    a274:	dfc00117 	ldw	ra,4(sp)
    a278:	df000017 	ldw	fp,0(sp)
    a27c:	dec00204 	addi	sp,sp,8
    a280:	f800283a 	ret

0000a284 <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to synthesizer
void MIDI_poll()
{
    a284:	deffe504 	addi	sp,sp,-108
    a288:	dfc01a15 	stw	ra,104(sp)
    a28c:	df001915 	stw	fp,100(sp)
    a290:	df001904 	addi	fp,sp,100
  uint8_t channel, ctrl, par;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    a294:	e0ffeec4 	addi	r3,fp,-69
    a298:	e0bfff04 	addi	r2,fp,-4
    a29c:	180d883a 	mov	r6,r3
    a2a0:	100b883a 	mov	r5,r2
    a2a4:	010000f4 	movhi	r4,3
    a2a8:	21081104 	addi	r4,r4,8260
    a2ac:	0007d580 	call	7d58 <_ZN9USBH_MIDI8RecvDataEPtPh>
    a2b0:	10803fcc 	andi	r2,r2,255
    a2b4:	1005003a 	cmpeq	r2,r2,zero
    a2b8:	10803fcc 	andi	r2,r2,255
    a2bc:	10025226 	beq	r2,zero,ac08 <_Z9MIDI_pollv+0x984>
		channel = (bufMidi[1] & 0x0F);
    a2c0:	e0bfef03 	ldbu	r2,-68(fp)
    a2c4:	108003cc 	andi	r2,r2,15
    a2c8:	e0bfee05 	stb	r2,-72(fp)
		ctrl = bufMidi[2];
    a2cc:	e0bfef43 	ldbu	r2,-67(fp)
    a2d0:	e0bfee45 	stb	r2,-71(fp)
		par = bufMidi[3];
    a2d4:	e0bfef83 	ldbu	r2,-66(fp)
    a2d8:	e0bfee85 	stb	r2,-70(fp)
	switch (bufMidi[1] & 0xF0) {
    a2dc:	e0bfef03 	ldbu	r2,-68(fp)
    a2e0:	10803fcc 	andi	r2,r2,255
    a2e4:	10803c0c 	andi	r2,r2,240
    a2e8:	10c02420 	cmpeqi	r3,r2,144
    a2ec:	18000a1e 	bne	r3,zero,a318 <_Z9MIDI_pollv+0x94>
    a2f0:	10c02448 	cmpgei	r3,r2,145
    a2f4:	1800031e 	bne	r3,zero,a304 <_Z9MIDI_pollv+0x80>
    a2f8:	10802020 	cmpeqi	r2,r2,128
    a2fc:	1000061e 	bne	r2,zero,a318 <_Z9MIDI_pollv+0x94>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
			printf("%X\n", long_par);
			break;
		default:
			break;
    a300:	00024106 	br	ac08 <_Z9MIDI_pollv+0x984>

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
		channel = (bufMidi[1] & 0x0F);
		ctrl = bufMidi[2];
		par = bufMidi[3];
	switch (bufMidi[1] & 0xF0) {
    a304:	10c02c20 	cmpeqi	r3,r2,176
    a308:	18000b1e 	bne	r3,zero,a338 <_Z9MIDI_pollv+0xb4>
    a30c:	10803820 	cmpeqi	r2,r2,224
    a310:	1002331e 	bne	r2,zero,abe0 <_Z9MIDI_pollv+0x95c>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
			printf("%X\n", long_par);
			break;
		default:
			break;
    a314:	00023c06 	br	ac08 <_Z9MIDI_pollv+0x984>
		ctrl = bufMidi[2];
		par = bufMidi[3];
	switch (bufMidi[1] & 0xF0) {
		case NOTE_OFF:
		case NOTE_ON:
			set_note(channel, ctrl, par);
    a318:	e0bfee03 	ldbu	r2,-72(fp)
    a31c:	e0ffee43 	ldbu	r3,-71(fp)
    a320:	e13fee83 	ldbu	r4,-70(fp)
    a324:	200d883a 	mov	r6,r4
    a328:	180b883a 	mov	r5,r3
    a32c:	1009883a 	mov	r4,r2
    a330:	00055b40 	call	55b4 <_Z8set_notehhh>
			break;
    a334:	00023406 	br	ac08 <_Z9MIDI_pollv+0x984>
		case CONTROL_CHANGE:
			long_par = par;
    a338:	e0bfee83 	ldbu	r2,-70(fp)
    a33c:	e0bfed15 	stw	r2,-76(fp)
			switch(ctrl) {
    a340:	e0bfee43 	ldbu	r2,-71(fp)
    a344:	10c01ba8 	cmpgeui	r3,r2,110
    a348:	1802231e 	bne	r3,zero,abd8 <_Z9MIDI_pollv+0x954>
    a34c:	100690ba 	slli	r3,r2,2
    a350:	00800074 	movhi	r2,1
    a354:	10a8d904 	addi	r2,r2,-23708
    a358:	1885883a 	add	r2,r3,r2
    a35c:	10800017 	ldw	r2,0(r2)
    a360:	1000683a 	jmp	r2
    a364:	0000abd8 	cmpnei	zero,zero,687
    a368:	0000a51c 	xori	zero,zero,660
    a36c:	0000abd8 	cmpnei	zero,zero,687
    a370:	0000a704 	movi	zero,668
    a374:	0000abd8 	cmpnei	zero,zero,687
    a378:	0000abd8 	cmpnei	zero,zero,687
    a37c:	0000abd8 	cmpnei	zero,zero,687
    a380:	0000a534 	movhi	zero,660
    a384:	0000abd8 	cmpnei	zero,zero,687
    a388:	0000a5a4 	muli	zero,zero,662
    a38c:	0000abd8 	cmpnei	zero,zero,687
    a390:	0000abd8 	cmpnei	zero,zero,687
    a394:	0000abd8 	cmpnei	zero,zero,687
    a398:	0000abd8 	cmpnei	zero,zero,687
    a39c:	0000a5bc 	xorhi	zero,zero,662
    a3a0:	0000abd8 	cmpnei	zero,zero,687
    a3a4:	0000abd8 	cmpnei	zero,zero,687
    a3a8:	0000abd8 	cmpnei	zero,zero,687
    a3ac:	0000abd8 	cmpnei	zero,zero,687
    a3b0:	0000abd8 	cmpnei	zero,zero,687
    a3b4:	0000abd8 	cmpnei	zero,zero,687
    a3b8:	0000abd8 	cmpnei	zero,zero,687
    a3bc:	0000abd8 	cmpnei	zero,zero,687
    a3c0:	0000abd8 	cmpnei	zero,zero,687
    a3c4:	0000abd8 	cmpnei	zero,zero,687
    a3c8:	0000abd8 	cmpnei	zero,zero,687
    a3cc:	0000abd8 	cmpnei	zero,zero,687
    a3d0:	0000abd8 	cmpnei	zero,zero,687
    a3d4:	0000abd8 	cmpnei	zero,zero,687
    a3d8:	0000abd8 	cmpnei	zero,zero,687
    a3dc:	0000abd8 	cmpnei	zero,zero,687
    a3e0:	0000abd8 	cmpnei	zero,zero,687
    a3e4:	0000abd8 	cmpnei	zero,zero,687
    a3e8:	0000abd8 	cmpnei	zero,zero,687
    a3ec:	0000abd8 	cmpnei	zero,zero,687
    a3f0:	0000abd8 	cmpnei	zero,zero,687
    a3f4:	0000abd8 	cmpnei	zero,zero,687
    a3f8:	0000abd8 	cmpnei	zero,zero,687
    a3fc:	0000abd8 	cmpnei	zero,zero,687
    a400:	0000abd8 	cmpnei	zero,zero,687
    a404:	0000abd8 	cmpnei	zero,zero,687
    a408:	0000abd8 	cmpnei	zero,zero,687
    a40c:	0000abd8 	cmpnei	zero,zero,687
    a410:	0000abd8 	cmpnei	zero,zero,687
    a414:	0000abd8 	cmpnei	zero,zero,687
    a418:	0000abd8 	cmpnei	zero,zero,687
    a41c:	0000abd8 	cmpnei	zero,zero,687
    a420:	0000abd8 	cmpnei	zero,zero,687
    a424:	0000abd8 	cmpnei	zero,zero,687
    a428:	0000abd8 	cmpnei	zero,zero,687
    a42c:	0000abd8 	cmpnei	zero,zero,687
    a430:	0000abd8 	cmpnei	zero,zero,687
    a434:	0000abd8 	cmpnei	zero,zero,687
    a438:	0000abd8 	cmpnei	zero,zero,687
    a43c:	0000abd8 	cmpnei	zero,zero,687
    a440:	0000abd8 	cmpnei	zero,zero,687
    a444:	0000abd8 	cmpnei	zero,zero,687
    a448:	0000abd8 	cmpnei	zero,zero,687
    a44c:	0000abd8 	cmpnei	zero,zero,687
    a450:	0000abd8 	cmpnei	zero,zero,687
    a454:	0000abd8 	cmpnei	zero,zero,687
    a458:	0000abd8 	cmpnei	zero,zero,687
    a45c:	0000abd8 	cmpnei	zero,zero,687
    a460:	0000abd8 	cmpnei	zero,zero,687
    a464:	0000a54c 	andi	zero,zero,661
    a468:	0000abd8 	cmpnei	zero,zero,687
    a46c:	0000abd8 	cmpnei	zero,zero,687
    a470:	0000abd8 	cmpnei	zero,zero,687
    a474:	0000abd8 	cmpnei	zero,zero,687
    a478:	0000abd8 	cmpnei	zero,zero,687
    a47c:	0000abd8 	cmpnei	zero,zero,687
    a480:	0000abd8 	cmpnei	zero,zero,687
    a484:	0000a79c 	xori	zero,zero,670
    a488:	0000a5d4 	movui	zero,663
    a48c:	0000abd8 	cmpnei	zero,zero,687
    a490:	0000a66c 	andhi	zero,zero,665
    a494:	0000abd8 	cmpnei	zero,zero,687
    a498:	0000abd8 	cmpnei	zero,zero,687
    a49c:	0000abd8 	cmpnei	zero,zero,687
    a4a0:	0000abd8 	cmpnei	zero,zero,687
    a4a4:	0000abd8 	cmpnei	zero,zero,687
    a4a8:	0000abd8 	cmpnei	zero,zero,687
    a4ac:	0000a57c 	xorhi	zero,zero,661
    a4b0:	0000abd8 	cmpnei	zero,zero,687
    a4b4:	0000abd8 	cmpnei	zero,zero,687
    a4b8:	0000a58c 	andi	zero,zero,662
    a4bc:	0000abd8 	cmpnei	zero,zero,687
    a4c0:	0000abd8 	cmpnei	zero,zero,687
    a4c4:	0000abd8 	cmpnei	zero,zero,687
    a4c8:	0000abd8 	cmpnei	zero,zero,687
    a4cc:	0000abd8 	cmpnei	zero,zero,687
    a4d0:	0000abd8 	cmpnei	zero,zero,687
    a4d4:	0000abd8 	cmpnei	zero,zero,687
    a4d8:	0000abd8 	cmpnei	zero,zero,687
    a4dc:	0000abd8 	cmpnei	zero,zero,687
    a4e0:	0000abd8 	cmpnei	zero,zero,687
    a4e4:	0000abd8 	cmpnei	zero,zero,687
    a4e8:	0000abd8 	cmpnei	zero,zero,687
    a4ec:	0000abd8 	cmpnei	zero,zero,687
    a4f0:	0000abd8 	cmpnei	zero,zero,687
    a4f4:	0000abd8 	cmpnei	zero,zero,687
    a4f8:	0000abd8 	cmpnei	zero,zero,687
    a4fc:	0000abd8 	cmpnei	zero,zero,687
    a500:	0000abd8 	cmpnei	zero,zero,687
    a504:	0000a834 	movhi	zero,672
    a508:	0000a8cc 	andi	zero,zero,675
    a50c:	0000a964 	muli	zero,zero,677
    a510:	0000a9fc 	xorhi	zero,zero,679
    a514:	0000aa94 	movui	zero,682
    a518:	0000ab38 	rdprs	zero,zero,684
				case MOD_WHEEL:
					set_ctrl(channel, MOD, long_par);
    a51c:	e0bfee03 	ldbu	r2,-72(fp)
    a520:	e1bfed17 	ldw	r6,-76(fp)
    a524:	01400204 	movi	r5,8
    a528:	1009883a 	mov	r4,r2
    a52c:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a530:	0001aa06 	br	abdc <_Z9MIDI_pollv+0x958>
				case CHAN_VOL:
					SGTL5000vol_change(i2c_dev, par);
    a534:	d0b24417 	ldw	r2,-14064(gp)
    a538:	e0ffee83 	ldbu	r3,-70(fp)
    a53c:	180b883a 	mov	r5,r3
    a540:	1009883a 	mov	r4,r2
    a544:	00071ac0 	call	71ac <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>
					break;
    a548:	0001a406 	br	abdc <_Z9MIDI_pollv+0x958>
				case SUSTAIN_PEDAL:
					if(ped_flip) long_par = ~long_par;
    a54c:	d0b24703 	ldbu	r2,-14052(gp)
    a550:	10803fcc 	andi	r2,r2,255
    a554:	10000326 	beq	r2,zero,a564 <_Z9MIDI_pollv+0x2e0>
    a558:	e0bfed17 	ldw	r2,-76(fp)
    a55c:	0084303a 	nor	r2,zero,r2
    a560:	e0bfed15 	stw	r2,-76(fp)
					set_ctrl(channel, SUS, long_par);
    a564:	e0bfee03 	ldbu	r2,-72(fp)
    a568:	e1bfed17 	ldw	r6,-76(fp)
    a56c:	01400184 	movi	r5,6
    a570:	1009883a 	mov	r4,r2
    a574:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a578:	00019806 	br	abdc <_Z9MIDI_pollv+0x958>
				case PEDAL_FLIP:
					ped_flip = par;
    a57c:	e0bfee83 	ldbu	r2,-70(fp)
    a580:	1004c03a 	cmpne	r2,r2,zero
    a584:	d0b24705 	stb	r2,-14052(gp)
					break;
    a588:	00019406 	br	abdc <_Z9MIDI_pollv+0x958>
				case MOD_WHEEL_ON:
					set_ctrl(channel, MOD_ON, long_par);
    a58c:	e0bfee03 	ldbu	r2,-72(fp)
    a590:	e1bfed17 	ldw	r6,-76(fp)
    a594:	014001c4 	movi	r5,7
    a598:	1009883a 	mov	r4,r2
    a59c:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a5a0:	00018e06 	br	abdc <_Z9MIDI_pollv+0x958>
				case SAMPLE_1_SEL:
					set_ctrl(channel, SAMPLE_1, long_par);
    a5a4:	e0bfee03 	ldbu	r2,-72(fp)
    a5a8:	e1bfed17 	ldw	r6,-76(fp)
    a5ac:	01400244 	movi	r5,9
    a5b0:	1009883a 	mov	r4,r2
    a5b4:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a5b8:	00018806 	br	abdc <_Z9MIDI_pollv+0x958>
				case SAMPLE_2_SEL:
					set_ctrl(channel, SAMPLE_2, long_par);
    a5bc:	e0bfee03 	ldbu	r2,-72(fp)
    a5c0:	e1bfed17 	ldw	r6,-76(fp)
    a5c4:	01400284 	movi	r5,10
    a5c8:	1009883a 	mov	r4,r2
    a5cc:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a5d0:	00018206 	br	abdc <_Z9MIDI_pollv+0x958>
				case ATT_TIME_H:
					att_h= (par * 5000) / 0x7F;
    a5d4:	e0bfee83 	ldbu	r2,-70(fp)
    a5d8:	0144e204 	movi	r5,5000
    a5dc:	1009883a 	mov	r4,r2
    a5e0:	000d8e00 	call	d8e0 <__mulsi3>
    a5e4:	01401fc4 	movi	r5,127
    a5e8:	1009883a 	mov	r4,r2
    a5ec:	000d72c0 	call	d72c <__divsi3>
    a5f0:	d0b2450d 	sth	r2,-14060(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a5f4:	d0b2450b 	ldhu	r2,-14060(gp)
    a5f8:	123fffcc 	andi	r8,r2,65535
    a5fc:	d0a5a40b 	ldhu	r2,-26992(gp)
    a600:	127fffcc 	andi	r9,r2,65535
    a604:	d0b2458b 	ldhu	r2,-14058(gp)
    a608:	12bfffcc 	andi	r10,r2,65535
    a60c:	d0a5a48b 	ldhu	r2,-26990(gp)
    a610:	12ffffcc 	andi	r11,r2,65535
    a614:	d0b2460b 	ldhu	r2,-14056(gp)
    a618:	10bfffcc 	andi	r2,r2,65535
    a61c:	d0e5a50b 	ldhu	r3,-26988(gp)
    a620:	18ffffcc 	andi	r3,r3,65535
    a624:	d132468b 	ldhu	r4,-14054(gp)
    a628:	213fffcc 	andi	r4,r4,65535
    a62c:	d165a58b 	ldhu	r5,-26986(gp)
    a630:	297fffcc 	andi	r5,r5,65535
    a634:	d1a5a617 	ldw	r6,-26984(gp)
    a638:	d1e5a717 	ldw	r7,-26980(gp)
    a63c:	d9c00515 	stw	r7,20(sp)
    a640:	d9800415 	stw	r6,16(sp)
    a644:	d9400315 	stw	r5,12(sp)
    a648:	d9000215 	stw	r4,8(sp)
    a64c:	d8c00115 	stw	r3,4(sp)
    a650:	d8800015 	stw	r2,0(sp)
    a654:	580f883a 	mov	r7,r11
    a658:	500d883a 	mov	r6,r10
    a65c:	480b883a 	mov	r5,r9
    a660:	4009883a 	mov	r4,r8
    a664:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a668:	00015c06 	br	abdc <_Z9MIDI_pollv+0x958>
				case DEC_TIME_H:
					dec_h = (par * 5000) / 0x7F;
    a66c:	e0bfee83 	ldbu	r2,-70(fp)
    a670:	0144e204 	movi	r5,5000
    a674:	1009883a 	mov	r4,r2
    a678:	000d8e00 	call	d8e0 <__mulsi3>
    a67c:	01401fc4 	movi	r5,127
    a680:	1009883a 	mov	r4,r2
    a684:	000d72c0 	call	d72c <__divsi3>
    a688:	d0b2458d 	sth	r2,-14058(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a68c:	d0b2450b 	ldhu	r2,-14060(gp)
    a690:	123fffcc 	andi	r8,r2,65535
    a694:	d0a5a40b 	ldhu	r2,-26992(gp)
    a698:	127fffcc 	andi	r9,r2,65535
    a69c:	d0b2458b 	ldhu	r2,-14058(gp)
    a6a0:	12bfffcc 	andi	r10,r2,65535
    a6a4:	d0a5a48b 	ldhu	r2,-26990(gp)
    a6a8:	12ffffcc 	andi	r11,r2,65535
    a6ac:	d0b2460b 	ldhu	r2,-14056(gp)
    a6b0:	10bfffcc 	andi	r2,r2,65535
    a6b4:	d0e5a50b 	ldhu	r3,-26988(gp)
    a6b8:	18ffffcc 	andi	r3,r3,65535
    a6bc:	d132468b 	ldhu	r4,-14054(gp)
    a6c0:	213fffcc 	andi	r4,r4,65535
    a6c4:	d165a58b 	ldhu	r5,-26986(gp)
    a6c8:	297fffcc 	andi	r5,r5,65535
    a6cc:	d1a5a617 	ldw	r6,-26984(gp)
    a6d0:	d1e5a717 	ldw	r7,-26980(gp)
    a6d4:	d9c00515 	stw	r7,20(sp)
    a6d8:	d9800415 	stw	r6,16(sp)
    a6dc:	d9400315 	stw	r5,12(sp)
    a6e0:	d9000215 	stw	r4,8(sp)
    a6e4:	d8c00115 	stw	r3,4(sp)
    a6e8:	d8800015 	stw	r2,0(sp)
    a6ec:	580f883a 	mov	r7,r11
    a6f0:	500d883a 	mov	r6,r10
    a6f4:	480b883a 	mov	r5,r9
    a6f8:	4009883a 	mov	r4,r8
    a6fc:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a700:	00013606 	br	abdc <_Z9MIDI_pollv+0x958>
				case SUS_TIME_H:
					sus_h = (par * 20000) / 0x7F;
    a704:	e0bfee83 	ldbu	r2,-70(fp)
    a708:	01538804 	movi	r5,20000
    a70c:	1009883a 	mov	r4,r2
    a710:	000d8e00 	call	d8e0 <__mulsi3>
    a714:	01401fc4 	movi	r5,127
    a718:	1009883a 	mov	r4,r2
    a71c:	000d72c0 	call	d72c <__divsi3>
    a720:	d0b2460d 	sth	r2,-14056(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a724:	d0b2450b 	ldhu	r2,-14060(gp)
    a728:	123fffcc 	andi	r8,r2,65535
    a72c:	d0a5a40b 	ldhu	r2,-26992(gp)
    a730:	127fffcc 	andi	r9,r2,65535
    a734:	d0b2458b 	ldhu	r2,-14058(gp)
    a738:	12bfffcc 	andi	r10,r2,65535
    a73c:	d0a5a48b 	ldhu	r2,-26990(gp)
    a740:	12ffffcc 	andi	r11,r2,65535
    a744:	d0b2460b 	ldhu	r2,-14056(gp)
    a748:	10bfffcc 	andi	r2,r2,65535
    a74c:	d0e5a50b 	ldhu	r3,-26988(gp)
    a750:	18ffffcc 	andi	r3,r3,65535
    a754:	d132468b 	ldhu	r4,-14054(gp)
    a758:	213fffcc 	andi	r4,r4,65535
    a75c:	d165a58b 	ldhu	r5,-26986(gp)
    a760:	297fffcc 	andi	r5,r5,65535
    a764:	d1a5a617 	ldw	r6,-26984(gp)
    a768:	d1e5a717 	ldw	r7,-26980(gp)
    a76c:	d9c00515 	stw	r7,20(sp)
    a770:	d9800415 	stw	r6,16(sp)
    a774:	d9400315 	stw	r5,12(sp)
    a778:	d9000215 	stw	r4,8(sp)
    a77c:	d8c00115 	stw	r3,4(sp)
    a780:	d8800015 	stw	r2,0(sp)
    a784:	580f883a 	mov	r7,r11
    a788:	500d883a 	mov	r6,r10
    a78c:	480b883a 	mov	r5,r9
    a790:	4009883a 	mov	r4,r8
    a794:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a798:	00011006 	br	abdc <_Z9MIDI_pollv+0x958>
				case REL_TIME_H:
					rel_h = (par * 10000) / 0x7F;
    a79c:	e0bfee83 	ldbu	r2,-70(fp)
    a7a0:	0149c404 	movi	r5,10000
    a7a4:	1009883a 	mov	r4,r2
    a7a8:	000d8e00 	call	d8e0 <__mulsi3>
    a7ac:	01401fc4 	movi	r5,127
    a7b0:	1009883a 	mov	r4,r2
    a7b4:	000d72c0 	call	d72c <__divsi3>
    a7b8:	d0b2468d 	sth	r2,-14054(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a7bc:	d0b2450b 	ldhu	r2,-14060(gp)
    a7c0:	123fffcc 	andi	r8,r2,65535
    a7c4:	d0a5a40b 	ldhu	r2,-26992(gp)
    a7c8:	127fffcc 	andi	r9,r2,65535
    a7cc:	d0b2458b 	ldhu	r2,-14058(gp)
    a7d0:	12bfffcc 	andi	r10,r2,65535
    a7d4:	d0a5a48b 	ldhu	r2,-26990(gp)
    a7d8:	12ffffcc 	andi	r11,r2,65535
    a7dc:	d0b2460b 	ldhu	r2,-14056(gp)
    a7e0:	10bfffcc 	andi	r2,r2,65535
    a7e4:	d0e5a50b 	ldhu	r3,-26988(gp)
    a7e8:	18ffffcc 	andi	r3,r3,65535
    a7ec:	d132468b 	ldhu	r4,-14054(gp)
    a7f0:	213fffcc 	andi	r4,r4,65535
    a7f4:	d165a58b 	ldhu	r5,-26986(gp)
    a7f8:	297fffcc 	andi	r5,r5,65535
    a7fc:	d1a5a617 	ldw	r6,-26984(gp)
    a800:	d1e5a717 	ldw	r7,-26980(gp)
    a804:	d9c00515 	stw	r7,20(sp)
    a808:	d9800415 	stw	r6,16(sp)
    a80c:	d9400315 	stw	r5,12(sp)
    a810:	d9000215 	stw	r4,8(sp)
    a814:	d8c00115 	stw	r3,4(sp)
    a818:	d8800015 	stw	r2,0(sp)
    a81c:	580f883a 	mov	r7,r11
    a820:	500d883a 	mov	r6,r10
    a824:	480b883a 	mov	r5,r9
    a828:	4009883a 	mov	r4,r8
    a82c:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a830:	0000ea06 	br	abdc <_Z9MIDI_pollv+0x958>
				case ATT_TIME_L:
					att_l = (par * 200) / 0x7F;
    a834:	e0bfee83 	ldbu	r2,-70(fp)
    a838:	01403204 	movi	r5,200
    a83c:	1009883a 	mov	r4,r2
    a840:	000d8e00 	call	d8e0 <__mulsi3>
    a844:	01401fc4 	movi	r5,127
    a848:	1009883a 	mov	r4,r2
    a84c:	000d72c0 	call	d72c <__divsi3>
    a850:	d0a5a40d 	sth	r2,-26992(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a854:	d0b2450b 	ldhu	r2,-14060(gp)
    a858:	123fffcc 	andi	r8,r2,65535
    a85c:	d0a5a40b 	ldhu	r2,-26992(gp)
    a860:	127fffcc 	andi	r9,r2,65535
    a864:	d0b2458b 	ldhu	r2,-14058(gp)
    a868:	12bfffcc 	andi	r10,r2,65535
    a86c:	d0a5a48b 	ldhu	r2,-26990(gp)
    a870:	12ffffcc 	andi	r11,r2,65535
    a874:	d0b2460b 	ldhu	r2,-14056(gp)
    a878:	10bfffcc 	andi	r2,r2,65535
    a87c:	d0e5a50b 	ldhu	r3,-26988(gp)
    a880:	18ffffcc 	andi	r3,r3,65535
    a884:	d132468b 	ldhu	r4,-14054(gp)
    a888:	213fffcc 	andi	r4,r4,65535
    a88c:	d165a58b 	ldhu	r5,-26986(gp)
    a890:	297fffcc 	andi	r5,r5,65535
    a894:	d1a5a617 	ldw	r6,-26984(gp)
    a898:	d1e5a717 	ldw	r7,-26980(gp)
    a89c:	d9c00515 	stw	r7,20(sp)
    a8a0:	d9800415 	stw	r6,16(sp)
    a8a4:	d9400315 	stw	r5,12(sp)
    a8a8:	d9000215 	stw	r4,8(sp)
    a8ac:	d8c00115 	stw	r3,4(sp)
    a8b0:	d8800015 	stw	r2,0(sp)
    a8b4:	580f883a 	mov	r7,r11
    a8b8:	500d883a 	mov	r6,r10
    a8bc:	480b883a 	mov	r5,r9
    a8c0:	4009883a 	mov	r4,r8
    a8c4:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a8c8:	0000c406 	br	abdc <_Z9MIDI_pollv+0x958>
				case DEC_TIME_L:
					dec_l = (par * 200) / 0x7F;
    a8cc:	e0bfee83 	ldbu	r2,-70(fp)
    a8d0:	01403204 	movi	r5,200
    a8d4:	1009883a 	mov	r4,r2
    a8d8:	000d8e00 	call	d8e0 <__mulsi3>
    a8dc:	01401fc4 	movi	r5,127
    a8e0:	1009883a 	mov	r4,r2
    a8e4:	000d72c0 	call	d72c <__divsi3>
    a8e8:	d0a5a48d 	sth	r2,-26990(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a8ec:	d0b2450b 	ldhu	r2,-14060(gp)
    a8f0:	123fffcc 	andi	r8,r2,65535
    a8f4:	d0a5a40b 	ldhu	r2,-26992(gp)
    a8f8:	127fffcc 	andi	r9,r2,65535
    a8fc:	d0b2458b 	ldhu	r2,-14058(gp)
    a900:	12bfffcc 	andi	r10,r2,65535
    a904:	d0a5a48b 	ldhu	r2,-26990(gp)
    a908:	12ffffcc 	andi	r11,r2,65535
    a90c:	d0b2460b 	ldhu	r2,-14056(gp)
    a910:	10bfffcc 	andi	r2,r2,65535
    a914:	d0e5a50b 	ldhu	r3,-26988(gp)
    a918:	18ffffcc 	andi	r3,r3,65535
    a91c:	d132468b 	ldhu	r4,-14054(gp)
    a920:	213fffcc 	andi	r4,r4,65535
    a924:	d165a58b 	ldhu	r5,-26986(gp)
    a928:	297fffcc 	andi	r5,r5,65535
    a92c:	d1a5a617 	ldw	r6,-26984(gp)
    a930:	d1e5a717 	ldw	r7,-26980(gp)
    a934:	d9c00515 	stw	r7,20(sp)
    a938:	d9800415 	stw	r6,16(sp)
    a93c:	d9400315 	stw	r5,12(sp)
    a940:	d9000215 	stw	r4,8(sp)
    a944:	d8c00115 	stw	r3,4(sp)
    a948:	d8800015 	stw	r2,0(sp)
    a94c:	580f883a 	mov	r7,r11
    a950:	500d883a 	mov	r6,r10
    a954:	480b883a 	mov	r5,r9
    a958:	4009883a 	mov	r4,r8
    a95c:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a960:	00009e06 	br	abdc <_Z9MIDI_pollv+0x958>
				case SUS_TIME_L:
					sus_l = (par * 800) / 0x7F;
    a964:	e0bfee83 	ldbu	r2,-70(fp)
    a968:	0140c804 	movi	r5,800
    a96c:	1009883a 	mov	r4,r2
    a970:	000d8e00 	call	d8e0 <__mulsi3>
    a974:	01401fc4 	movi	r5,127
    a978:	1009883a 	mov	r4,r2
    a97c:	000d72c0 	call	d72c <__divsi3>
    a980:	d0a5a50d 	sth	r2,-26988(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a984:	d0b2450b 	ldhu	r2,-14060(gp)
    a988:	123fffcc 	andi	r8,r2,65535
    a98c:	d0a5a40b 	ldhu	r2,-26992(gp)
    a990:	127fffcc 	andi	r9,r2,65535
    a994:	d0b2458b 	ldhu	r2,-14058(gp)
    a998:	12bfffcc 	andi	r10,r2,65535
    a99c:	d0a5a48b 	ldhu	r2,-26990(gp)
    a9a0:	12ffffcc 	andi	r11,r2,65535
    a9a4:	d0b2460b 	ldhu	r2,-14056(gp)
    a9a8:	10bfffcc 	andi	r2,r2,65535
    a9ac:	d0e5a50b 	ldhu	r3,-26988(gp)
    a9b0:	18ffffcc 	andi	r3,r3,65535
    a9b4:	d132468b 	ldhu	r4,-14054(gp)
    a9b8:	213fffcc 	andi	r4,r4,65535
    a9bc:	d165a58b 	ldhu	r5,-26986(gp)
    a9c0:	297fffcc 	andi	r5,r5,65535
    a9c4:	d1a5a617 	ldw	r6,-26984(gp)
    a9c8:	d1e5a717 	ldw	r7,-26980(gp)
    a9cc:	d9c00515 	stw	r7,20(sp)
    a9d0:	d9800415 	stw	r6,16(sp)
    a9d4:	d9400315 	stw	r5,12(sp)
    a9d8:	d9000215 	stw	r4,8(sp)
    a9dc:	d8c00115 	stw	r3,4(sp)
    a9e0:	d8800015 	stw	r2,0(sp)
    a9e4:	580f883a 	mov	r7,r11
    a9e8:	500d883a 	mov	r6,r10
    a9ec:	480b883a 	mov	r5,r9
    a9f0:	4009883a 	mov	r4,r8
    a9f4:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a9f8:	00007806 	br	abdc <_Z9MIDI_pollv+0x958>
				case REL_TIME_L:
					rel_l = (par * 400) / 0x7F;
    a9fc:	e0bfee83 	ldbu	r2,-70(fp)
    aa00:	01406404 	movi	r5,400
    aa04:	1009883a 	mov	r4,r2
    aa08:	000d8e00 	call	d8e0 <__mulsi3>
    aa0c:	01401fc4 	movi	r5,127
    aa10:	1009883a 	mov	r4,r2
    aa14:	000d72c0 	call	d72c <__divsi3>
    aa18:	d0a5a58d 	sth	r2,-26986(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    aa1c:	d0b2450b 	ldhu	r2,-14060(gp)
    aa20:	123fffcc 	andi	r8,r2,65535
    aa24:	d0a5a40b 	ldhu	r2,-26992(gp)
    aa28:	127fffcc 	andi	r9,r2,65535
    aa2c:	d0b2458b 	ldhu	r2,-14058(gp)
    aa30:	12bfffcc 	andi	r10,r2,65535
    aa34:	d0a5a48b 	ldhu	r2,-26990(gp)
    aa38:	12ffffcc 	andi	r11,r2,65535
    aa3c:	d0b2460b 	ldhu	r2,-14056(gp)
    aa40:	10bfffcc 	andi	r2,r2,65535
    aa44:	d0e5a50b 	ldhu	r3,-26988(gp)
    aa48:	18ffffcc 	andi	r3,r3,65535
    aa4c:	d132468b 	ldhu	r4,-14054(gp)
    aa50:	213fffcc 	andi	r4,r4,65535
    aa54:	d165a58b 	ldhu	r5,-26986(gp)
    aa58:	297fffcc 	andi	r5,r5,65535
    aa5c:	d1a5a617 	ldw	r6,-26984(gp)
    aa60:	d1e5a717 	ldw	r7,-26980(gp)
    aa64:	d9c00515 	stw	r7,20(sp)
    aa68:	d9800415 	stw	r6,16(sp)
    aa6c:	d9400315 	stw	r5,12(sp)
    aa70:	d9000215 	stw	r4,8(sp)
    aa74:	d8c00115 	stw	r3,4(sp)
    aa78:	d8800015 	stw	r2,0(sp)
    aa7c:	580f883a 	mov	r7,r11
    aa80:	500d883a 	mov	r6,r10
    aa84:	480b883a 	mov	r5,r9
    aa88:	4009883a 	mov	r4,r8
    aa8c:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    aa90:	00005206 	br	abdc <_Z9MIDI_pollv+0x958>
				case PEAK_ATT:
					peak_att = (float) (par * 2) / 0x7F;
    aa94:	e0bfee83 	ldbu	r2,-70(fp)
    aa98:	1085883a 	add	r2,r2,r2
    aa9c:	1009883a 	mov	r4,r2
    aaa0:	000ec500 	call	ec50 <__floatsisf>
    aaa4:	1007883a 	mov	r3,r2
    aaa8:	0150bfb4 	movhi	r5,17150
    aaac:	1809883a 	mov	r4,r3
    aab0:	000ddd00 	call	ddd0 <__divsf3>
    aab4:	1007883a 	mov	r3,r2
    aab8:	1805883a 	mov	r2,r3
    aabc:	d0a5a615 	stw	r2,-26984(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    aac0:	d0b2450b 	ldhu	r2,-14060(gp)
    aac4:	123fffcc 	andi	r8,r2,65535
    aac8:	d0a5a40b 	ldhu	r2,-26992(gp)
    aacc:	127fffcc 	andi	r9,r2,65535
    aad0:	d0b2458b 	ldhu	r2,-14058(gp)
    aad4:	12bfffcc 	andi	r10,r2,65535
    aad8:	d0a5a48b 	ldhu	r2,-26990(gp)
    aadc:	12ffffcc 	andi	r11,r2,65535
    aae0:	d0b2460b 	ldhu	r2,-14056(gp)
    aae4:	10bfffcc 	andi	r2,r2,65535
    aae8:	d0e5a50b 	ldhu	r3,-26988(gp)
    aaec:	18ffffcc 	andi	r3,r3,65535
    aaf0:	d132468b 	ldhu	r4,-14054(gp)
    aaf4:	213fffcc 	andi	r4,r4,65535
    aaf8:	d165a58b 	ldhu	r5,-26986(gp)
    aafc:	297fffcc 	andi	r5,r5,65535
    ab00:	d1a5a617 	ldw	r6,-26984(gp)
    ab04:	d1e5a717 	ldw	r7,-26980(gp)
    ab08:	d9c00515 	stw	r7,20(sp)
    ab0c:	d9800415 	stw	r6,16(sp)
    ab10:	d9400315 	stw	r5,12(sp)
    ab14:	d9000215 	stw	r4,8(sp)
    ab18:	d8c00115 	stw	r3,4(sp)
    ab1c:	d8800015 	stw	r2,0(sp)
    ab20:	580f883a 	mov	r7,r11
    ab24:	500d883a 	mov	r6,r10
    ab28:	480b883a 	mov	r5,r9
    ab2c:	4009883a 	mov	r4,r8
    ab30:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    ab34:	00002906 	br	abdc <_Z9MIDI_pollv+0x958>
				case PEAK_SUS:
					peak_sus = (float) par / 0x7F;
    ab38:	e0bfee83 	ldbu	r2,-70(fp)
    ab3c:	1009883a 	mov	r4,r2
    ab40:	000ed740 	call	ed74 <__floatunsisf>
    ab44:	1007883a 	mov	r3,r2
    ab48:	0150bfb4 	movhi	r5,17150
    ab4c:	1809883a 	mov	r4,r3
    ab50:	000ddd00 	call	ddd0 <__divsf3>
    ab54:	1007883a 	mov	r3,r2
    ab58:	1805883a 	mov	r2,r3
    ab5c:	d0a5a715 	stw	r2,-26980(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    ab60:	d0b2450b 	ldhu	r2,-14060(gp)
    ab64:	123fffcc 	andi	r8,r2,65535
    ab68:	d0a5a40b 	ldhu	r2,-26992(gp)
    ab6c:	127fffcc 	andi	r9,r2,65535
    ab70:	d0b2458b 	ldhu	r2,-14058(gp)
    ab74:	12bfffcc 	andi	r10,r2,65535
    ab78:	d0a5a48b 	ldhu	r2,-26990(gp)
    ab7c:	12ffffcc 	andi	r11,r2,65535
    ab80:	d0b2460b 	ldhu	r2,-14056(gp)
    ab84:	10bfffcc 	andi	r2,r2,65535
    ab88:	d0e5a50b 	ldhu	r3,-26988(gp)
    ab8c:	18ffffcc 	andi	r3,r3,65535
    ab90:	d132468b 	ldhu	r4,-14054(gp)
    ab94:	213fffcc 	andi	r4,r4,65535
    ab98:	d165a58b 	ldhu	r5,-26986(gp)
    ab9c:	297fffcc 	andi	r5,r5,65535
    aba0:	d1a5a617 	ldw	r6,-26984(gp)
    aba4:	d1e5a717 	ldw	r7,-26980(gp)
    aba8:	d9c00515 	stw	r7,20(sp)
    abac:	d9800415 	stw	r6,16(sp)
    abb0:	d9400315 	stw	r5,12(sp)
    abb4:	d9000215 	stw	r4,8(sp)
    abb8:	d8c00115 	stw	r3,4(sp)
    abbc:	d8800015 	stw	r2,0(sp)
    abc0:	580f883a 	mov	r7,r11
    abc4:	500d883a 	mov	r6,r10
    abc8:	480b883a 	mov	r5,r9
    abcc:	4009883a 	mov	r4,r8
    abd0:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    abd4:	00000106 	br	abdc <_Z9MIDI_pollv+0x958>
				default:
					break;
    abd8:	0001883a 	nop
			}
			break;
    abdc:	00000a06 	br	ac08 <_Z9MIDI_pollv+0x984>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
    abe0:	e0bfee83 	ldbu	r2,-70(fp)
    abe4:	100691fa 	slli	r3,r2,7
    abe8:	e0bfee43 	ldbu	r2,-71(fp)
    abec:	1885883a 	add	r2,r3,r2
    abf0:	e0bfed15 	stw	r2,-76(fp)
			printf("%X\n", long_par);
    abf4:	e17fed17 	ldw	r5,-76(fp)
    abf8:	010000f4 	movhi	r4,3
    abfc:	212d2e04 	addi	r4,r4,-19272
    ac00:	000ff200 	call	ff20 <printf>
			break;
    ac04:	0001883a 	nop
		default:
			break;
	}
  }
}
    ac08:	0001883a 	nop
    ac0c:	e037883a 	mov	sp,fp
    ac10:	dfc00117 	ldw	ra,4(sp)
    ac14:	df000017 	ldw	fp,0(sp)
    ac18:	dec00204 	addi	sp,sp,8
    ac1c:	f800283a 	ret

0000ac20 <main>:

int main() {
    ac20:	defff804 	addi	sp,sp,-32
    ac24:	dfc00715 	stw	ra,28(sp)
    ac28:	df000615 	stw	fp,24(sp)
    ac2c:	df000604 	addi	fp,sp,24

	printf("Initializing SGTL5000...\n");
    ac30:	010000f4 	movhi	r4,3
    ac34:	212d2f04 	addi	r4,r4,-19268
    ac38:	001003c0 	call	1003c <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    ac3c:	010000f4 	movhi	r4,3
    ac40:	212d3604 	addi	r4,r4,-19240
    ac44:	0020f4c0 	call	20f4c <alt_avalon_i2c_open>
    ac48:	d0b24415 	stw	r2,-14064(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    ac4c:	d0b24417 	ldw	r2,-14064(gp)
    ac50:	1000031e 	bne	r2,zero,ac60 <main+0x40>
    ac54:	010000f4 	movhi	r4,3
    ac58:	212d3904 	addi	r4,r4,-19228
    ac5c:	001003c0 	call	1003c <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    ac60:	d0b24417 	ldw	r2,-14064(gp)
    ac64:	1009883a 	mov	r4,r2
    ac68:	0006efc0 	call	6efc <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    ac6c:	010000f4 	movhi	r4,3
    ac70:	212d4104 	addi	r4,r4,-19196
    ac74:	001003c0 	call	1003c <puts>
	SGTL5000audio_on(i2c_dev);
    ac78:	d0b24417 	ldw	r2,-14064(gp)
    ac7c:	1009883a 	mov	r4,r2
    ac80:	0006f940 	call	6f94 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	SGTL5000status(i2c_dev);
    ac84:	d0b24417 	ldw	r2,-14064(gp)
    ac88:	1009883a 	mov	r4,r2
    ac8c:	00070000 	call	7000 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>
	printf("Audio running\n");
    ac90:	010000f4 	movhi	r4,3
    ac94:	212d4604 	addi	r4,r4,-19176
    ac98:	001003c0 	call	1003c <puts>

	printf("Initializing ADSR...\n");
    ac9c:	010000f4 	movhi	r4,3
    aca0:	212d4a04 	addi	r4,r4,-19160
    aca4:	001003c0 	call	1003c <puts>
	calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    aca8:	d0b2450b 	ldhu	r2,-14060(gp)
    acac:	123fffcc 	andi	r8,r2,65535
    acb0:	d0a5a40b 	ldhu	r2,-26992(gp)
    acb4:	127fffcc 	andi	r9,r2,65535
    acb8:	d0b2458b 	ldhu	r2,-14058(gp)
    acbc:	12bfffcc 	andi	r10,r2,65535
    acc0:	d0a5a48b 	ldhu	r2,-26990(gp)
    acc4:	12ffffcc 	andi	r11,r2,65535
    acc8:	d0b2460b 	ldhu	r2,-14056(gp)
    accc:	10bfffcc 	andi	r2,r2,65535
    acd0:	d0e5a50b 	ldhu	r3,-26988(gp)
    acd4:	18ffffcc 	andi	r3,r3,65535
    acd8:	d132468b 	ldhu	r4,-14054(gp)
    acdc:	213fffcc 	andi	r4,r4,65535
    ace0:	d165a58b 	ldhu	r5,-26986(gp)
    ace4:	297fffcc 	andi	r5,r5,65535
    ace8:	d1a5a617 	ldw	r6,-26984(gp)
    acec:	d1e5a717 	ldw	r7,-26980(gp)
    acf0:	d9c00515 	stw	r7,20(sp)
    acf4:	d9800415 	stw	r6,16(sp)
    acf8:	d9400315 	stw	r5,12(sp)
    acfc:	d9000215 	stw	r4,8(sp)
    ad00:	d8c00115 	stw	r3,4(sp)
    ad04:	d8800015 	stw	r2,0(sp)
    ad08:	580f883a 	mov	r7,r11
    ad0c:	500d883a 	mov	r6,r10
    ad10:	480b883a 	mov	r5,r9
    ad14:	4009883a 	mov	r4,r8
    ad18:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
	printf("ADSR set\n");
    ad1c:	010000f4 	movhi	r4,3
    ad20:	212d5004 	addi	r4,r4,-19136
    ad24:	001003c0 	call	1003c <puts>

	MIDI_setup();
    ad28:	000a20c0 	call	a20c <_Z10MIDI_setupv>
	printf("MIDI set\n");
    ad2c:	010000f4 	movhi	r4,3
    ad30:	212d5304 	addi	r4,r4,-19124
    ad34:	001003c0 	call	1003c <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    ad38:	010000f4 	movhi	r4,3
    ad3c:	2107e204 	addi	r4,r4,8072
    ad40:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    ad44:	10803fcc 	andi	r2,r2,255
    ad48:	10802418 	cmpnei	r2,r2,144
    ad4c:	10803fcc 	andi	r2,r2,255
    ad50:	10000426 	beq	r2,zero,ad64 <main+0x144>
		Usb.Task();
    ad54:	010000f4 	movhi	r4,3
    ad58:	2107e204 	addi	r4,r4,8072
    ad5c:	000181c0 	call	181c <_ZN3USB4TaskEv>
	printf("ADSR set\n");

	MIDI_setup();
	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    ad60:	003ff506 	br	ad38 <__alt_data_end+0xfc00ad38>
		Usb.Task();
	}
	printf("USB running\n");
    ad64:	010000f4 	movhi	r4,3
    ad68:	212d5604 	addi	r4,r4,-19112
    ad6c:	001003c0 	call	1003c <puts>

	while(1) {
		if ( Midi ) {
    ad70:	010000f4 	movhi	r4,3
    ad74:	21081104 	addi	r4,r4,8260
    ad78:	000ae240 	call	ae24 <_ZN9USBH_MIDIcvbEv>
    ad7c:	10803fcc 	andi	r2,r2,255
    ad80:	103ffb26 	beq	r2,zero,ad70 <__alt_data_end+0xfc00ad70>
			MIDI_poll();
    ad84:	000a2840 	call	a284 <_Z9MIDI_pollv>
	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
		Usb.Task();
	}
	printf("USB running\n");

	while(1) {
    ad88:	003ff906 	br	ad70 <__alt_data_end+0xfc00ad70>

0000ad8c <_Z41__static_initialization_and_destruction_0ii>:
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
    ad8c:	defffc04 	addi	sp,sp,-16
    ad90:	dfc00315 	stw	ra,12(sp)
    ad94:	df000215 	stw	fp,8(sp)
    ad98:	df000204 	addi	fp,sp,8
    ad9c:	e13ffe15 	stw	r4,-8(fp)
    ada0:	e17fff15 	stw	r5,-4(fp)
    ada4:	e0bffe17 	ldw	r2,-8(fp)
    ada8:	10800058 	cmpnei	r2,r2,1
    adac:	10000b1e 	bne	r2,zero,addc <_Z41__static_initialization_and_destruction_0ii+0x50>
    adb0:	e0ffff17 	ldw	r3,-4(fp)
    adb4:	00bfffd4 	movui	r2,65535
    adb8:	1880081e 	bne	r3,r2,addc <_Z41__static_initialization_and_destruction_0ii+0x50>
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif
#include "include/SPI.h"

USB Usb;
    adbc:	010000f4 	movhi	r4,3
    adc0:	2107e204 	addi	r4,r4,8072
    adc4:	00007040 	call	704 <_ZN3USBC1Ev>
USBH_MIDI  Midi(&Usb);
    adc8:	014000f4 	movhi	r5,3
    adcc:	2947e204 	addi	r5,r5,8072
    add0:	010000f4 	movhi	r4,3
    add4:	21081104 	addi	r4,r4,8260
    add8:	00072380 	call	7238 <_ZN9USBH_MIDIC1EP3USB>
	while(1) {
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
    addc:	0001883a 	nop
    ade0:	e037883a 	mov	sp,fp
    ade4:	dfc00117 	ldw	ra,4(sp)
    ade8:	df000017 	ldw	fp,0(sp)
    adec:	dec00204 	addi	sp,sp,8
    adf0:	f800283a 	ret

0000adf4 <_GLOBAL__sub_I_Usb>:
    adf4:	defffe04 	addi	sp,sp,-8
    adf8:	dfc00115 	stw	ra,4(sp)
    adfc:	df000015 	stw	fp,0(sp)
    ae00:	d839883a 	mov	fp,sp
    ae04:	017fffd4 	movui	r5,65535
    ae08:	01000044 	movi	r4,1
    ae0c:	000ad8c0 	call	ad8c <_Z41__static_initialization_and_destruction_0ii>
    ae10:	e037883a 	mov	sp,fp
    ae14:	dfc00117 	ldw	ra,4(sp)
    ae18:	df000017 	ldw	fp,0(sp)
    ae1c:	dec00204 	addi	sp,sp,8
    ae20:	f800283a 	ret

0000ae24 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    ae24:	defffe04 	addi	sp,sp,-8
    ae28:	df000115 	stw	fp,4(sp)
    ae2c:	df000104 	addi	fp,sp,4
    ae30:	e13fff15 	stw	r4,-4(fp)
    ae34:	e0bfff17 	ldw	r2,-4(fp)
    ae38:	10800343 	ldbu	r2,13(r2)
    ae3c:	e037883a 	mov	sp,fp
    ae40:	df000017 	ldw	fp,0(sp)
    ae44:	dec00104 	addi	sp,sp,4
    ae48:	f800283a 	ret

0000ae4c <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    ae4c:	defffe04 	addi	sp,sp,-8
    ae50:	df000115 	stw	fp,4(sp)
    ae54:	df000104 	addi	fp,sp,4
    ae58:	e13fff15 	stw	r4,-4(fp)
    ae5c:	e0bfff17 	ldw	r2,-4(fp)
    ae60:	1080040b 	ldhu	r2,16(r2)
    ae64:	e037883a 	mov	sp,fp
    ae68:	df000017 	ldw	fp,0(sp)
    ae6c:	dec00104 	addi	sp,sp,4
    ae70:	f800283a 	ret

0000ae74 <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    ae74:	defffe04 	addi	sp,sp,-8
    ae78:	df000115 	stw	fp,4(sp)
    ae7c:	df000104 	addi	fp,sp,4
    ae80:	e13fff15 	stw	r4,-4(fp)
    ae84:	e0bfff17 	ldw	r2,-4(fp)
    ae88:	1080038b 	ldhu	r2,14(r2)
    ae8c:	e037883a 	mov	sp,fp
    ae90:	df000017 	ldw	fp,0(sp)
    ae94:	dec00104 	addi	sp,sp,4
    ae98:	f800283a 	ret

0000ae9c <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    ae9c:	defffd04 	addi	sp,sp,-12
    aea0:	df000215 	stw	fp,8(sp)
    aea4:	df000204 	addi	fp,sp,8
    aea8:	e13ffe15 	stw	r4,-8(fp)
    aeac:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    aeb0:	e0bffe17 	ldw	r2,-8(fp)
    aeb4:	e0ffff17 	ldw	r3,-4(fp)
    aeb8:	10c01815 	stw	r3,96(r2)
        };
    aebc:	0001883a 	nop
    aec0:	e037883a 	mov	sp,fp
    aec4:	df000017 	ldw	fp,0(sp)
    aec8:	dec00104 	addi	sp,sp,4
    aecc:	f800283a 	ret

0000aed0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    aed0:	008000f4 	movhi	r2,3
    aed4:	10ad6804 	addi	r2,r2,-19040
    aed8:	20800015 	stw	r2,0(r4)
    aedc:	000bca81 	jmpi	bca8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000aee0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    aee0:	defffe04 	addi	sp,sp,-8
    aee4:	008000f4 	movhi	r2,3
    aee8:	dc000015 	stw	r16,0(sp)
    aeec:	dfc00115 	stw	ra,4(sp)
    aef0:	10ad6804 	addi	r2,r2,-19040
    aef4:	20800015 	stw	r2,0(r4)
    aef8:	2021883a 	mov	r16,r4
    aefc:	000bca80 	call	bca8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    af00:	8009883a 	mov	r4,r16
    af04:	dfc00117 	ldw	ra,4(sp)
    af08:	dc000017 	ldw	r16,0(sp)
    af0c:	dec00204 	addi	sp,sp,8
    af10:	000bbd41 	jmpi	bbd4 <_ZdlPv>

0000af14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    af14:	defff504 	addi	sp,sp,-44
    af18:	dc000115 	stw	r16,4(sp)
    af1c:	38800117 	ldw	r2,4(r7)
    af20:	24000117 	ldw	r16,4(r4)
    af24:	df000915 	stw	fp,36(sp)
    af28:	ddc00815 	stw	r23,32(sp)
    af2c:	dd800715 	stw	r22,28(sp)
    af30:	dcc00415 	stw	r19,16(sp)
    af34:	dc800315 	stw	r18,12(sp)
    af38:	dc400215 	stw	r17,8(sp)
    af3c:	dfc00a15 	stw	ra,40(sp)
    af40:	dd400615 	stw	r21,24(sp)
    af44:	dd000515 	stw	r20,20(sp)
    af48:	2823883a 	mov	r17,r5
    af4c:	3039883a 	mov	fp,r6
    af50:	dcc00b17 	ldw	r19,44(sp)
    af54:	ddc00c17 	ldw	r23,48(sp)
    af58:	dd800d17 	ldw	r22,52(sp)
    af5c:	dc800e17 	ldw	r18,56(sp)
    af60:	80800b26 	beq	r16,r2,af90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    af64:	80c00007 	ldb	r3,0(r16)
    af68:	2029883a 	mov	r20,r4
    af6c:	01000a84 	movi	r4,42
    af70:	382b883a 	mov	r21,r7
    af74:	19001a26 	beq	r3,r4,afe0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    af78:	100b883a 	mov	r5,r2
    af7c:	8009883a 	mov	r4,r16
    af80:	d8c00015 	stw	r3,0(sp)
    af84:	001046c0 	call	1046c <strcmp>
    af88:	d8c00017 	ldw	r3,0(sp)
    af8c:	1000141e 	bne	r2,zero,afe0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    af90:	94c00015 	stw	r19,0(r18)
    af94:	97000115 	stw	fp,4(r18)
    af98:	88002816 	blt	r17,zero,b03c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    af9c:	9c63883a 	add	r17,r19,r17
    afa0:	b4403226 	beq	r22,r17,b06c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    afa4:	00800044 	movi	r2,1
    afa8:	90800315 	stw	r2,12(r18)
    afac:	0005883a 	mov	r2,zero
    afb0:	dfc00a17 	ldw	ra,40(sp)
    afb4:	df000917 	ldw	fp,36(sp)
    afb8:	ddc00817 	ldw	r23,32(sp)
    afbc:	dd800717 	ldw	r22,28(sp)
    afc0:	dd400617 	ldw	r21,24(sp)
    afc4:	dd000517 	ldw	r20,20(sp)
    afc8:	dcc00417 	ldw	r19,16(sp)
    afcc:	dc800317 	ldw	r18,12(sp)
    afd0:	dc400217 	ldw	r17,8(sp)
    afd4:	dc000117 	ldw	r16,4(sp)
    afd8:	dec00b04 	addi	sp,sp,44
    afdc:	f800283a 	ret
    afe0:	9d801926 	beq	r19,r22,b048 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    afe4:	a1000217 	ldw	r4,8(r20)
    afe8:	a80f883a 	mov	r7,r21
    afec:	e00d883a 	mov	r6,fp
    aff0:	20800017 	ldw	r2,0(r4)
    aff4:	dc800e15 	stw	r18,56(sp)
    aff8:	dd800d15 	stw	r22,52(sp)
    affc:	ddc00c15 	stw	r23,48(sp)
    b000:	dcc00b15 	stw	r19,44(sp)
    b004:	10800717 	ldw	r2,28(r2)
    b008:	880b883a 	mov	r5,r17
    b00c:	dfc00a17 	ldw	ra,40(sp)
    b010:	df000917 	ldw	fp,36(sp)
    b014:	ddc00817 	ldw	r23,32(sp)
    b018:	dd800717 	ldw	r22,28(sp)
    b01c:	dd400617 	ldw	r21,24(sp)
    b020:	dd000517 	ldw	r20,20(sp)
    b024:	dcc00417 	ldw	r19,16(sp)
    b028:	dc800317 	ldw	r18,12(sp)
    b02c:	dc400217 	ldw	r17,8(sp)
    b030:	dc000117 	ldw	r16,4(sp)
    b034:	dec00b04 	addi	sp,sp,44
    b038:	1000683a 	jmp	r2
    b03c:	00bfff84 	movi	r2,-2
    b040:	88bfda1e 	bne	r17,r2,afac <__alt_data_end+0xfc00afac>
    b044:	003fd706 	br	afa4 <__alt_data_end+0xfc00afa4>
    b048:	b9400117 	ldw	r5,4(r23)
    b04c:	81400526 	beq	r16,r5,b064 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    b050:	00800a84 	movi	r2,42
    b054:	18bfe326 	beq	r3,r2,afe4 <__alt_data_end+0xfc00afe4>
    b058:	8009883a 	mov	r4,r16
    b05c:	001046c0 	call	1046c <strcmp>
    b060:	103fe01e 	bne	r2,zero,afe4 <__alt_data_end+0xfc00afe4>
    b064:	97000215 	stw	fp,8(r18)
    b068:	003fd006 	br	afac <__alt_data_end+0xfc00afac>
    b06c:	00800184 	movi	r2,6
    b070:	003fcd06 	br	afa8 <__alt_data_end+0xfc00afa8>

0000b074 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    b074:	defffa04 	addi	sp,sp,-24
    b078:	dc000215 	stw	r16,8(sp)
    b07c:	dc000617 	ldw	r16,24(sp)
    b080:	dc800415 	stw	r18,16(sp)
    b084:	dc400315 	stw	r17,12(sp)
    b088:	dfc00515 	stw	ra,20(sp)
    b08c:	2023883a 	mov	r17,r4
    b090:	2825883a 	mov	r18,r5
    b094:	81800b26 	beq	r16,r6,b0c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    b098:	89000217 	ldw	r4,8(r17)
    b09c:	900b883a 	mov	r5,r18
    b0a0:	20800017 	ldw	r2,0(r4)
    b0a4:	dc000615 	stw	r16,24(sp)
    b0a8:	10800817 	ldw	r2,32(r2)
    b0ac:	dfc00517 	ldw	ra,20(sp)
    b0b0:	dc800417 	ldw	r18,16(sp)
    b0b4:	dc400317 	ldw	r17,12(sp)
    b0b8:	dc000217 	ldw	r16,8(sp)
    b0bc:	dec00604 	addi	sp,sp,24
    b0c0:	1000683a 	jmp	r2
    b0c4:	21000117 	ldw	r4,4(r4)
    b0c8:	39400117 	ldw	r5,4(r7)
    b0cc:	21400926 	beq	r4,r5,b0f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    b0d0:	20c00007 	ldb	r3,0(r4)
    b0d4:	00800a84 	movi	r2,42
    b0d8:	18bfef26 	beq	r3,r2,b098 <__alt_data_end+0xfc00b098>
    b0dc:	d9800015 	stw	r6,0(sp)
    b0e0:	d9c00115 	stw	r7,4(sp)
    b0e4:	001046c0 	call	1046c <strcmp>
    b0e8:	d9800017 	ldw	r6,0(sp)
    b0ec:	d9c00117 	ldw	r7,4(sp)
    b0f0:	103fe91e 	bne	r2,zero,b098 <__alt_data_end+0xfc00b098>
    b0f4:	00800184 	movi	r2,6
    b0f8:	dfc00517 	ldw	ra,20(sp)
    b0fc:	dc800417 	ldw	r18,16(sp)
    b100:	dc400317 	ldw	r17,12(sp)
    b104:	dc000217 	ldw	r16,8(sp)
    b108:	dec00604 	addi	sp,sp,24
    b10c:	f800283a 	ret

0000b110 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    b110:	defffb04 	addi	sp,sp,-20
    b114:	dcc00315 	stw	r19,12(sp)
    b118:	dc800215 	stw	r18,8(sp)
    b11c:	dc400115 	stw	r17,4(sp)
    b120:	dc000015 	stw	r16,0(sp)
    b124:	dfc00415 	stw	ra,16(sp)
    b128:	2027883a 	mov	r19,r4
    b12c:	2821883a 	mov	r16,r5
    b130:	3023883a 	mov	r17,r6
    b134:	3825883a 	mov	r18,r7
    b138:	000bcec0 	call	bcec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    b13c:	10c03fcc 	andi	r3,r2,255
    b140:	18000726 	beq	r3,zero,b160 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    b144:	dfc00417 	ldw	ra,16(sp)
    b148:	dcc00317 	ldw	r19,12(sp)
    b14c:	dc800217 	ldw	r18,8(sp)
    b150:	dc400117 	ldw	r17,4(sp)
    b154:	dc000017 	ldw	r16,0(sp)
    b158:	dec00504 	addi	sp,sp,20
    b15c:	f800283a 	ret
    b160:	99000217 	ldw	r4,8(r19)
    b164:	900f883a 	mov	r7,r18
    b168:	880d883a 	mov	r6,r17
    b16c:	20800017 	ldw	r2,0(r4)
    b170:	800b883a 	mov	r5,r16
    b174:	10800617 	ldw	r2,24(r2)
    b178:	dfc00417 	ldw	ra,16(sp)
    b17c:	dcc00317 	ldw	r19,12(sp)
    b180:	dc800217 	ldw	r18,8(sp)
    b184:	dc400117 	ldw	r17,4(sp)
    b188:	dc000017 	ldw	r16,0(sp)
    b18c:	dec00504 	addi	sp,sp,20
    b190:	1000683a 	jmp	r2

0000b194 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    b194:	008000f4 	movhi	r2,3
    b198:	10ad8004 	addi	r2,r2,-18944
    b19c:	20800015 	stw	r2,0(r4)
    b1a0:	000bca81 	jmpi	bca8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000b1a4 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    b1a4:	defffe04 	addi	sp,sp,-8
    b1a8:	008000f4 	movhi	r2,3
    b1ac:	dc000015 	stw	r16,0(sp)
    b1b0:	dfc00115 	stw	ra,4(sp)
    b1b4:	10ad8004 	addi	r2,r2,-18944
    b1b8:	20800015 	stw	r2,0(r4)
    b1bc:	2021883a 	mov	r16,r4
    b1c0:	000bca80 	call	bca8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    b1c4:	8009883a 	mov	r4,r16
    b1c8:	dfc00117 	ldw	ra,4(sp)
    b1cc:	dc000017 	ldw	r16,0(sp)
    b1d0:	dec00204 	addi	sp,sp,8
    b1d4:	000bbd41 	jmpi	bbd4 <_ZdlPv>

0000b1d8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    b1d8:	defff504 	addi	sp,sp,-44
    b1dc:	dc400215 	stw	r17,8(sp)
    b1e0:	dc400b17 	ldw	r17,44(sp)
    b1e4:	df000915 	stw	fp,36(sp)
    b1e8:	ddc00815 	stw	r23,32(sp)
    b1ec:	dd800715 	stw	r22,28(sp)
    b1f0:	dc000115 	stw	r16,4(sp)
    b1f4:	dfc00a15 	stw	ra,40(sp)
    b1f8:	dd400615 	stw	r21,24(sp)
    b1fc:	dd000515 	stw	r20,20(sp)
    b200:	dcc00415 	stw	r19,16(sp)
    b204:	dc800315 	stw	r18,12(sp)
    b208:	3039883a 	mov	fp,r6
    b20c:	2021883a 	mov	r16,r4
    b210:	282d883a 	mov	r22,r5
    b214:	382f883a 	mov	r23,r7
    b218:	34402c26 	beq	r6,r17,b2cc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    b21c:	85000317 	ldw	r20,12(r16)
    b220:	048000c4 	movi	r18,3
    b224:	04ffff44 	movi	r19,-3
    b228:	a484983a 	sll	r2,r20,r18
    b22c:	b80f883a 	mov	r7,r23
    b230:	b00b883a 	mov	r5,r22
    b234:	10800304 	addi	r2,r2,12
    b238:	80a1883a 	add	r16,r16,r2
    b23c:	a0001626 	beq	r20,zero,b298 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    b240:	81800017 	ldw	r6,0(r16)
    b244:	a53fffc4 	addi	r20,r20,-1
    b248:	3080008c 	andi	r2,r6,2
    b24c:	3540004c 	andi	r21,r6,1
    b250:	10000d26 	beq	r2,zero,b288 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    b254:	300dd23a 	srai	r6,r6,8
    b258:	a8000426 	beq	r21,zero,b26c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    b25c:	b4c00a26 	beq	r22,r19,b288 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    b260:	e0800017 	ldw	r2,0(fp)
    b264:	118d883a 	add	r6,r2,r6
    b268:	31800017 	ldw	r6,0(r6)
    b26c:	813fff17 	ldw	r4,-4(r16)
    b270:	e18d883a 	add	r6,fp,r6
    b274:	20800017 	ldw	r2,0(r4)
    b278:	dc400015 	stw	r17,0(sp)
    b27c:	10800817 	ldw	r2,32(r2)
    b280:	103ee83a 	callr	r2
    b284:	90801b16 	blt	r18,r2,b2f4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    b288:	843ffe04 	addi	r16,r16,-8
    b28c:	b80f883a 	mov	r7,r23
    b290:	b00b883a 	mov	r5,r22
    b294:	a03fea1e 	bne	r20,zero,b240 <__alt_data_end+0xfc00b240>
    b298:	00800044 	movi	r2,1
    b29c:	dfc00a17 	ldw	ra,40(sp)
    b2a0:	df000917 	ldw	fp,36(sp)
    b2a4:	ddc00817 	ldw	r23,32(sp)
    b2a8:	dd800717 	ldw	r22,28(sp)
    b2ac:	dd400617 	ldw	r21,24(sp)
    b2b0:	dd000517 	ldw	r20,20(sp)
    b2b4:	dcc00417 	ldw	r19,16(sp)
    b2b8:	dc800317 	ldw	r18,12(sp)
    b2bc:	dc400217 	ldw	r17,8(sp)
    b2c0:	dc000117 	ldw	r16,4(sp)
    b2c4:	dec00b04 	addi	sp,sp,44
    b2c8:	f800283a 	ret
    b2cc:	21000117 	ldw	r4,4(r4)
    b2d0:	39400117 	ldw	r5,4(r7)
    b2d4:	21400526 	beq	r4,r5,b2ec <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    b2d8:	20c00007 	ldb	r3,0(r4)
    b2dc:	00800a84 	movi	r2,42
    b2e0:	18bfce26 	beq	r3,r2,b21c <__alt_data_end+0xfc00b21c>
    b2e4:	001046c0 	call	1046c <strcmp>
    b2e8:	103fcc1e 	bne	r2,zero,b21c <__alt_data_end+0xfc00b21c>
    b2ec:	00800184 	movi	r2,6
    b2f0:	003fea06 	br	b29c <__alt_data_end+0xfc00b29c>
    b2f4:	a83fe926 	beq	r21,zero,b29c <__alt_data_end+0xfc00b29c>
    b2f8:	10800054 	ori	r2,r2,1
    b2fc:	003fe706 	br	b29c <__alt_data_end+0xfc00b29c>

0000b300 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    b300:	deffe804 	addi	sp,sp,-96
    b304:	df001615 	stw	fp,88(sp)
    b308:	df001b17 	ldw	fp,108(sp)
    b30c:	ddc01515 	stw	r23,84(sp)
    b310:	dd001215 	stw	r20,72(sp)
    b314:	e0800417 	ldw	r2,16(fp)
    b318:	dcc01115 	stw	r19,68(sp)
    b31c:	dfc01715 	stw	ra,92(sp)
    b320:	dd801415 	stw	r22,80(sp)
    b324:	dd401315 	stw	r21,76(sp)
    b328:	dc801015 	stw	r18,64(sp)
    b32c:	dc400f15 	stw	r17,60(sp)
    b330:	dc000e15 	stw	r16,56(sp)
    b334:	d9000b15 	stw	r4,44(sp)
    b338:	d9c00915 	stw	r7,36(sp)
    b33c:	1080040c 	andi	r2,r2,16
    b340:	282f883a 	mov	r23,r5
    b344:	3027883a 	mov	r19,r6
    b348:	dd001817 	ldw	r20,96(sp)
    b34c:	10000226 	beq	r2,zero,b358 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    b350:	20800217 	ldw	r2,8(r4)
    b354:	e0800415 	stw	r2,16(fp)
    b358:	d8c01a17 	ldw	r3,104(sp)
    b35c:	a0c0cb26 	beq	r20,r3,b68c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    b360:	d8c00b17 	ldw	r3,44(sp)
    b364:	1c000117 	ldw	r16,4(r3)
    b368:	d8c00917 	ldw	r3,36(sp)
    b36c:	19400117 	ldw	r5,4(r3)
    b370:	2c000626 	beq	r5,r16,b38c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    b374:	80c00007 	ldb	r3,0(r16)
    b378:	00800a84 	movi	r2,42
    b37c:	18801b26 	beq	r3,r2,b3ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    b380:	8009883a 	mov	r4,r16
    b384:	001046c0 	call	1046c <strcmp>
    b388:	1000181e 	bne	r2,zero,b3ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    b38c:	e5000015 	stw	r20,0(fp)
    b390:	e4c00115 	stw	r19,4(fp)
    b394:	b8010916 	blt	r23,zero,b7bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    b398:	d8c01a17 	ldw	r3,104(sp)
    b39c:	a5d9883a 	add	r12,r20,r23
    b3a0:	1b014126 	beq	r3,r12,b8a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    b3a4:	00800044 	movi	r2,1
    b3a8:	e0800315 	stw	r2,12(fp)
    b3ac:	0005883a 	mov	r2,zero
    b3b0:	dfc01717 	ldw	ra,92(sp)
    b3b4:	df001617 	ldw	fp,88(sp)
    b3b8:	ddc01517 	ldw	r23,84(sp)
    b3bc:	dd801417 	ldw	r22,80(sp)
    b3c0:	dd401317 	ldw	r21,76(sp)
    b3c4:	dd001217 	ldw	r20,72(sp)
    b3c8:	dcc01117 	ldw	r19,68(sp)
    b3cc:	dc801017 	ldw	r18,64(sp)
    b3d0:	dc400f17 	ldw	r17,60(sp)
    b3d4:	dc000e17 	ldw	r16,56(sp)
    b3d8:	dec01804 	addi	sp,sp,96
    b3dc:	f800283a 	ret
    b3e0:	d8c00917 	ldw	r3,36(sp)
    b3e4:	18800117 	ldw	r2,4(r3)
    b3e8:	80bfe826 	beq	r16,r2,b38c <__alt_data_end+0xfc00b38c>
    b3ec:	b800ef16 	blt	r23,zero,b7ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    b3f0:	d8c01a17 	ldw	r3,104(sp)
    b3f4:	1dedc83a 	sub	r22,r3,r23
    b3f8:	e005883a 	mov	r2,fp
    b3fc:	00c00044 	movi	r3,1
    b400:	b039883a 	mov	fp,r22
    b404:	0021883a 	mov	r16,zero
    b408:	a02d883a 	mov	r22,r20
    b40c:	d8000a45 	stb	zero,41(sp)
    b410:	d8c00a05 	stb	r3,40(sp)
    b414:	048000c4 	movi	r18,3
    b418:	1029883a 	mov	r20,r2
    b41c:	d8c00b17 	ldw	r3,44(sp)
    b420:	b805883a 	mov	r2,r23
    b424:	1ac00317 	ldw	r11,12(r3)
    b428:	581490fa 	slli	r10,r11,3
    b42c:	52800304 	addi	r10,r10,12
    b430:	1aab883a 	add	r21,r3,r10
    b434:	b007883a 	mov	r3,r22
    b438:	582d883a 	mov	r22,r11
    b43c:	a82f883a 	mov	r23,r21
    b440:	1823883a 	mov	r17,r3
    b444:	102b883a 	mov	r21,r2
    b448:	b0005526 	beq	r22,zero,b5a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    b44c:	b8800017 	ldw	r2,0(r23)
    b450:	a1400417 	ldw	r5,16(r20)
    b454:	d8000415 	stw	zero,16(sp)
    b458:	d8000515 	stw	zero,20(sp)
    b45c:	d8000615 	stw	zero,24(sp)
    b460:	d8000715 	stw	zero,28(sp)
    b464:	d9400815 	stw	r5,32(sp)
    b468:	1100004c 	andi	r4,r2,1
    b46c:	1007d23a 	srai	r3,r2,8
    b470:	20007526 	beq	r4,zero,b648 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    b474:	89000017 	ldw	r4,0(r17)
    b478:	99800054 	ori	r6,r19,1
    b47c:	20c7883a 	add	r3,r4,r3
    b480:	18c00017 	ldw	r3,0(r3)
    b484:	88c7883a 	add	r3,r17,r3
    b488:	e0000326 	beq	fp,zero,b498 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    b48c:	d9c00a03 	ldbu	r7,40(sp)
    b490:	e0c9803a 	cmpltu	r4,fp,r3
    b494:	21c07226 	beq	r4,r7,b660 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    b498:	1080008c 	andi	r2,r2,2
    b49c:	1000041e 	bne	r2,zero,b4b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    b4a0:	013fff84 	movi	r4,-2
    b4a4:	a9007126 	beq	r21,r4,b66c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    b4a8:	00bfff44 	movi	r2,-3
    b4ac:	308c703a 	and	r6,r6,r2
    b4b0:	b93fff17 	ldw	r4,-4(r23)
    b4b4:	d9400404 	addi	r5,sp,16
    b4b8:	d9c00917 	ldw	r7,36(sp)
    b4bc:	20800017 	ldw	r2,0(r4)
    b4c0:	d9400315 	stw	r5,12(sp)
    b4c4:	d9401a17 	ldw	r5,104(sp)
    b4c8:	d8c00015 	stw	r3,0(sp)
    b4cc:	d9400215 	stw	r5,8(sp)
    b4d0:	d9401917 	ldw	r5,100(sp)
    b4d4:	d9400115 	stw	r5,4(sp)
    b4d8:	10800717 	ldw	r2,28(r2)
    b4dc:	a80b883a 	mov	r5,r21
    b4e0:	103ee83a 	callr	r2
    b4e4:	a1400217 	ldw	r5,8(r20)
    b4e8:	d9000617 	ldw	r4,24(sp)
    b4ec:	d8c00717 	ldw	r3,28(sp)
    b4f0:	2908b03a 	or	r4,r5,r4
    b4f4:	a1000215 	stw	r4,8(r20)
    b4f8:	01400184 	movi	r5,6
    b4fc:	1940a426 	beq	r3,r5,b790 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    b500:	01400084 	movi	r5,2
    b504:	1940a226 	beq	r3,r5,b790 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    b508:	81403fcc 	andi	r5,r16,255
    b50c:	a1800017 	ldw	r6,0(r20)
    b510:	28004f1e 	bne	r5,zero,b650 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    b514:	30007926 	beq	r6,zero,b6fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    b518:	d9400417 	ldw	r5,16(sp)
    b51c:	29806926 	beq	r5,r6,b6c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    b520:	28006d26 	beq	r5,zero,b6d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    b524:	a2800317 	ldw	r10,12(r20)
    b528:	9100250e 	bge	r18,r4,b5c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    b52c:	2100004c 	andi	r4,r4,1
    b530:	20000326 	beq	r4,zero,b540 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    b534:	a0800417 	ldw	r2,16(r20)
    b538:	1080008c 	andi	r2,r2,2
    b53c:	1000201e 	bne	r2,zero,b5c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    b540:	50004d1e 	bne	r10,zero,b678 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    b544:	18002626 	beq	r3,zero,b5e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    b548:	02800044 	movi	r10,1
    b54c:	181b883a 	mov	r13,r3
    b550:	1a84f03a 	xor	r2,r3,r10
    b554:	501f883a 	mov	r15,r10
    b558:	90801f0e 	bge	r18,r2,b5d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    b55c:	90c0880e 	bge	r18,r3,b780 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    b560:	d9400417 	ldw	r5,16(sp)
    b564:	1880008c 	andi	r2,r3,2
    b568:	d9000517 	ldw	r4,20(sp)
    b56c:	a1400015 	stw	r5,0(r20)
    b570:	0021883a 	mov	r16,zero
    b574:	a1000115 	stw	r4,4(r20)
    b578:	a0c00315 	stw	r3,12(r20)
    b57c:	10004f1e 	bne	r2,zero,b6bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    b580:	6b40004c 	andi	r13,r13,1
    b584:	68004d26 	beq	r13,zero,b6bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    b588:	a1000217 	ldw	r4,8(r20)
    b58c:	01400104 	movi	r5,4
    b590:	21408826 	beq	r4,r5,b7b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b594:	b5bfffc4 	addi	r22,r22,-1
    b598:	bdfffe04 	addi	r23,r23,-8
    b59c:	b03fab1e 	bne	r22,zero,b44c <__alt_data_end+0xfc00b44c>
    b5a0:	d8800a43 	ldbu	r2,41(sp)
    b5a4:	a82f883a 	mov	r23,r21
    b5a8:	882d883a 	mov	r22,r17
    b5ac:	10008126 	beq	r2,zero,b7b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b5b0:	dd400a03 	ldbu	r21,40(sp)
    b5b4:	a8007f26 	beq	r21,zero,b7b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b5b8:	d8000a05 	stb	zero,40(sp)
    b5bc:	003f9706 	br	b41c <__alt_data_end+0xfc00b41c>
    b5c0:	501f883a 	mov	r15,r10
    b5c4:	181b883a 	mov	r13,r3
    b5c8:	02800b0e 	bge	zero,r10,b5f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    b5cc:	00c0570e 	bge	zero,r3,b72c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    b5d0:	1a84f03a 	xor	r2,r3,r10
    b5d4:	90bfe116 	blt	r18,r2,b55c <__alt_data_end+0xfc00b55c>
    b5d8:	1bc6703a 	and	r3,r3,r15
    b5dc:	90c09916 	blt	r18,r3,b844 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    b5e0:	01000044 	movi	r4,1
    b5e4:	a1000315 	stw	r4,12(r20)
    b5e8:	a0000015 	stw	zero,0(r20)
    b5ec:	a1000217 	ldw	r4,8(r20)
    b5f0:	04000044 	movi	r16,1
    b5f4:	003fe506 	br	b58c <__alt_data_end+0xfc00b58c>
    b5f8:	90c00a0e 	bge	r18,r3,b624 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    b5fc:	1880004c 	andi	r2,r3,1
    b600:	10000426 	beq	r2,zero,b614 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    b604:	d9000b17 	ldw	r4,44(sp)
    b608:	20800217 	ldw	r2,8(r4)
    b60c:	1080008c 	andi	r2,r2,2
    b610:	1000041e 	bne	r2,zero,b624 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    b614:	1880005c 	xori	r2,r3,1
    b618:	90bfd216 	blt	r18,r2,b564 <__alt_data_end+0xfc00b564>
    b61c:	03c00044 	movi	r15,1
    b620:	003fed06 	br	b5d8 <__alt_data_end+0xfc00b5d8>
    b624:	a8006e16 	blt	r21,zero,b7e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    b628:	d8801a17 	ldw	r2,104(sp)
    b62c:	354d883a 	add	r6,r6,r21
    b630:	11805026 	beq	r2,r6,b774 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    b634:	00c0a50e 	bge	zero,r3,b8cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    b638:	03c00044 	movi	r15,1
    b63c:	1bc4f03a 	xor	r2,r3,r15
    b640:	7815883a 	mov	r10,r15
    b644:	003fc406 	br	b558 <__alt_data_end+0xfc00b558>
    b648:	980d883a 	mov	r6,r19
    b64c:	003f8d06 	br	b484 <__alt_data_end+0xfc00b484>
    b650:	303fb11e 	bne	r6,zero,b518 <__alt_data_end+0xfc00b518>
    b654:	d9400417 	ldw	r5,16(sp)
    b658:	283fb21e 	bne	r5,zero,b524 <__alt_data_end+0xfc00b524>
    b65c:	003fcb06 	br	b58c <__alt_data_end+0xfc00b58c>
    b660:	00c00044 	movi	r3,1
    b664:	d8c00a45 	stb	r3,41(sp)
    b668:	003fca06 	br	b594 <__alt_data_end+0xfc00b594>
    b66c:	294000cc 	andi	r5,r5,3
    b670:	283fc826 	beq	r5,zero,b594 <__alt_data_end+0xfc00b594>
    b674:	003f8c06 	br	b4a8 <__alt_data_end+0xfc00b4a8>
    b678:	18001a26 	beq	r3,zero,b6e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    b67c:	181b883a 	mov	r13,r3
    b680:	501f883a 	mov	r15,r10
    b684:	50c4f03a 	xor	r2,r10,r3
    b688:	003fb306 	br	b558 <__alt_data_end+0xfc00b558>
    b68c:	d8c00b17 	ldw	r3,44(sp)
    b690:	1c000117 	ldw	r16,4(r3)
    b694:	d8c01917 	ldw	r3,100(sp)
    b698:	19400117 	ldw	r5,4(r3)
    b69c:	81400626 	beq	r16,r5,b6b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    b6a0:	80c00007 	ldb	r3,0(r16)
    b6a4:	00800a84 	movi	r2,42
    b6a8:	18bf4d26 	beq	r3,r2,b3e0 <__alt_data_end+0xfc00b3e0>
    b6ac:	8009883a 	mov	r4,r16
    b6b0:	001046c0 	call	1046c <strcmp>
    b6b4:	10005c1e 	bne	r2,zero,b828 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    b6b8:	e4c00215 	stw	r19,8(fp)
    b6bc:	0005883a 	mov	r2,zero
    b6c0:	003f3b06 	br	b3b0 <__alt_data_end+0xfc00b3b0>
    b6c4:	a0c00117 	ldw	r3,4(r20)
    b6c8:	d8800517 	ldw	r2,20(sp)
    b6cc:	1884b03a 	or	r2,r3,r2
    b6d0:	a0800115 	stw	r2,4(r20)
    b6d4:	003fad06 	br	b58c <__alt_data_end+0xfc00b58c>
    b6d8:	10803fcc 	andi	r2,r2,255
    b6dc:	103f911e 	bne	r2,zero,b524 <__alt_data_end+0xfc00b524>
    b6e0:	003faa06 	br	b58c <__alt_data_end+0xfc00b58c>
    b6e4:	501b883a 	mov	r13,r10
    b6e8:	5080005c 	xori	r2,r10,1
    b6ec:	5007883a 	mov	r3,r10
    b6f0:	90bfbb0e 	bge	r18,r2,b5e0 <__alt_data_end+0xfc00b5e0>
    b6f4:	6880008c 	andi	r2,r13,2
    b6f8:	003f9f06 	br	b578 <__alt_data_end+0xfc00b578>
    b6fc:	d8c00417 	ldw	r3,16(sp)
    b700:	d9400517 	ldw	r5,20(sp)
    b704:	a0c00015 	stw	r3,0(r20)
    b708:	a1400115 	stw	r5,4(r20)
    b70c:	18000526 	beq	r3,zero,b724 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    b710:	20001626 	beq	r4,zero,b76c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    b714:	d9400b17 	ldw	r5,44(sp)
    b718:	28c00217 	ldw	r3,8(r5)
    b71c:	18c0004c 	andi	r3,r3,1
    b720:	183f2326 	beq	r3,zero,b3b0 <__alt_data_end+0xfc00b3b0>
    b724:	1021883a 	mov	r16,r2
    b728:	003f9806 	br	b58c <__alt_data_end+0xfc00b58c>
    b72c:	9280060e 	bge	r18,r10,b748 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    b730:	5080004c 	andi	r2,r10,1
    b734:	10002426 	beq	r2,zero,b7c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    b738:	d8c00b17 	ldw	r3,44(sp)
    b73c:	18800217 	ldw	r2,8(r3)
    b740:	1080008c 	andi	r2,r2,2
    b744:	10003c26 	beq	r2,zero,b838 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    b748:	d9400417 	ldw	r5,16(sp)
    b74c:	a8004216 	blt	r21,zero,b858 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    b750:	d8c01a17 	ldw	r3,104(sp)
    b754:	2d45883a 	add	r2,r5,r21
    b758:	18805726 	beq	r3,r2,b8b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    b75c:	7880005c 	xori	r2,r15,1
    b760:	781b883a 	mov	r13,r15
    b764:	5007883a 	mov	r3,r10
    b768:	003fe106 	br	b6f0 <__alt_data_end+0xfc00b6f0>
    b76c:	1021883a 	mov	r16,r2
    b770:	003f8806 	br	b594 <__alt_data_end+0xfc00b594>
    b774:	03c00184 	movi	r15,6
    b778:	00ffb016 	blt	zero,r3,b63c <__alt_data_end+0xfc00b63c>
    b77c:	7815883a 	mov	r10,r15
    b780:	7880008c 	andi	r2,r15,2
    b784:	781b883a 	mov	r13,r15
    b788:	5007883a 	mov	r3,r10
    b78c:	003f7a06 	br	b578 <__alt_data_end+0xfc00b578>
    b790:	a039883a 	mov	fp,r20
    b794:	e0c00315 	stw	r3,12(fp)
    b798:	d8c00417 	ldw	r3,16(sp)
    b79c:	a0c00015 	stw	r3,0(r20)
    b7a0:	d8c00517 	ldw	r3,20(sp)
    b7a4:	a0c00115 	stw	r3,4(r20)
    b7a8:	003f0106 	br	b3b0 <__alt_data_end+0xfc00b3b0>
    b7ac:	002d883a 	mov	r22,zero
    b7b0:	003f1106 	br	b3f8 <__alt_data_end+0xfc00b3f8>
    b7b4:	8005883a 	mov	r2,r16
    b7b8:	003efd06 	br	b3b0 <__alt_data_end+0xfc00b3b0>
    b7bc:	00bfff84 	movi	r2,-2
    b7c0:	b8bfbe1e 	bne	r23,r2,b6bc <__alt_data_end+0xfc00b6bc>
    b7c4:	003ef706 	br	b3a4 <__alt_data_end+0xfc00b3a4>
    b7c8:	5080005c 	xori	r2,r10,1
    b7cc:	90bf840e 	bge	r18,r2,b5e0 <__alt_data_end+0xfc00b5e0>
    b7d0:	501b883a 	mov	r13,r10
    b7d4:	5080008c 	andi	r2,r10,2
    b7d8:	5007883a 	mov	r3,r10
    b7dc:	003f6606 	br	b578 <__alt_data_end+0xfc00b578>
    b7e0:	013fff84 	movi	r4,-2
    b7e4:	a9003226 	beq	r21,r4,b8b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    b7e8:	d9400917 	ldw	r5,36(sp)
    b7ec:	d9001a17 	ldw	r4,104(sp)
    b7f0:	d9c01917 	ldw	r7,100(sp)
    b7f4:	28800017 	ldw	r2,0(r5)
    b7f8:	d9000015 	stw	r4,0(sp)
    b7fc:	d9000917 	ldw	r4,36(sp)
    b800:	10800817 	ldw	r2,32(r2)
    b804:	a80b883a 	mov	r5,r21
    b808:	d8c00d15 	stw	r3,52(sp)
    b80c:	db400c15 	stw	r13,48(sp)
    b810:	103ee83a 	callr	r2
    b814:	1015883a 	mov	r10,r2
    b818:	101f883a 	mov	r15,r2
    b81c:	db400c17 	ldw	r13,48(sp)
    b820:	d8c00d17 	ldw	r3,52(sp)
    b824:	003f6906 	br	b5cc <__alt_data_end+0xfc00b5cc>
    b828:	d8c00917 	ldw	r3,36(sp)
    b82c:	19400117 	ldw	r5,4(r3)
    b830:	817ed31e 	bne	r16,r5,b380 <__alt_data_end+0xfc00b380>
    b834:	003ed506 	br	b38c <__alt_data_end+0xfc00b38c>
    b838:	5080005c 	xori	r2,r10,1
    b83c:	90bfe416 	blt	r18,r2,b7d0 <__alt_data_end+0xfc00b7d0>
    b840:	003f6706 	br	b5e0 <__alt_data_end+0xfc00b5e0>
    b844:	00800084 	movi	r2,2
    b848:	a0800315 	stw	r2,12(r20)
    b84c:	a0000015 	stw	zero,0(r20)
    b850:	00800044 	movi	r2,1
    b854:	003ed606 	br	b3b0 <__alt_data_end+0xfc00b3b0>
    b858:	013fff84 	movi	r4,-2
    b85c:	a9002526 	beq	r21,r4,b8f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    b860:	d8c00917 	ldw	r3,36(sp)
    b864:	d9c01917 	ldw	r7,100(sp)
    b868:	d9000917 	ldw	r4,36(sp)
    b86c:	18800017 	ldw	r2,0(r3)
    b870:	d8c01a17 	ldw	r3,104(sp)
    b874:	280d883a 	mov	r6,r5
    b878:	a80b883a 	mov	r5,r21
    b87c:	d8c00015 	stw	r3,0(sp)
    b880:	10800817 	ldw	r2,32(r2)
    b884:	da800c15 	stw	r10,48(sp)
    b888:	dbc00d15 	stw	r15,52(sp)
    b88c:	103ee83a 	callr	r2
    b890:	da800c17 	ldw	r10,48(sp)
    b894:	1007883a 	mov	r3,r2
    b898:	101b883a 	mov	r13,r2
    b89c:	dbc00d17 	ldw	r15,52(sp)
    b8a0:	1284f03a 	xor	r2,r2,r10
    b8a4:	003f2c06 	br	b558 <__alt_data_end+0xfc00b558>
    b8a8:	00800184 	movi	r2,6
    b8ac:	003ebe06 	br	b3a8 <__alt_data_end+0xfc00b3a8>
    b8b0:	00ff4b0e 	bge	zero,r3,b5e0 <__alt_data_end+0xfc00b5e0>
    b8b4:	003f6006 	br	b638 <__alt_data_end+0xfc00b638>
    b8b8:	5080019c 	xori	r2,r10,6
    b8bc:	90800916 	blt	r18,r2,b8e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    b8c0:	50c0018c 	andi	r3,r10,6
    b8c4:	90ff460e 	bge	r18,r3,b5e0 <__alt_data_end+0xfc00b5e0>
    b8c8:	003fde06 	br	b844 <__alt_data_end+0xfc00b844>
    b8cc:	d8c01a17 	ldw	r3,104(sp)
    b8d0:	2d45883a 	add	r2,r5,r21
    b8d4:	18800326 	beq	r3,r2,b8e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    b8d8:	02800044 	movi	r10,1
    b8dc:	501f883a 	mov	r15,r10
    b8e0:	003f9e06 	br	b75c <__alt_data_end+0xfc00b75c>
    b8e4:	03400184 	movi	r13,6
    b8e8:	00800084 	movi	r2,2
    b8ec:	6807883a 	mov	r3,r13
    b8f0:	003f1d06 	br	b568 <__alt_data_end+0xfc00b568>
    b8f4:	501b883a 	mov	r13,r10
    b8f8:	5080005c 	xori	r2,r10,1
    b8fc:	5007883a 	mov	r3,r10
    b900:	003f7b06 	br	b6f0 <__alt_data_end+0xfc00b6f0>

0000b904 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    b904:	deffef04 	addi	sp,sp,-68
    b908:	ddc00e15 	stw	r23,56(sp)
    b90c:	dd000b15 	stw	r20,44(sp)
    b910:	dc400815 	stw	r17,32(sp)
    b914:	3029883a 	mov	r20,r6
    b918:	dfc01015 	stw	ra,64(sp)
    b91c:	df000f15 	stw	fp,60(sp)
    b920:	dd800d15 	stw	r22,52(sp)
    b924:	dd400c15 	stw	r21,48(sp)
    b928:	dcc00a15 	stw	r19,40(sp)
    b92c:	dc800915 	stw	r18,36(sp)
    b930:	dc000715 	stw	r16,28(sp)
    b934:	d9000515 	stw	r4,20(sp)
    b938:	2823883a 	mov	r17,r5
    b93c:	382f883a 	mov	r23,r7
    b940:	000bcec0 	call	bcec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    b944:	100d883a 	mov	r6,r2
    b948:	10803fcc 	andi	r2,r2,255
    b94c:	1000441e 	bne	r2,zero,ba60 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    b950:	bc000217 	ldw	r16,8(r23)
    b954:	8080040c 	andi	r2,r16,16
    b958:	10000226 	beq	r2,zero,b964 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    b95c:	d8c00517 	ldw	r3,20(sp)
    b960:	1c000217 	ldw	r16,8(r3)
    b964:	d8c00517 	ldw	r3,20(sp)
    b968:	d8800517 	ldw	r2,20(sp)
    b96c:	1f000317 	ldw	fp,12(r3)
    b970:	e01090fa 	slli	r8,fp,3
    b974:	40c00304 	addi	r3,r8,12
    b978:	10ed883a 	add	r22,r2,r3
    b97c:	80c0004c 	andi	r3,r16,1
    b980:	42000204 	addi	r8,r8,8
    b984:	d8c00415 	stw	r3,16(sp)
    b988:	122b883a 	add	r21,r2,r8
    b98c:	e0003226 	beq	fp,zero,ba58 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    b990:	b1800017 	ldw	r6,0(r22)
    b994:	d8000015 	stw	zero,0(sp)
    b998:	d8000115 	stw	zero,4(sp)
    b99c:	dc000215 	stw	r16,8(sp)
    b9a0:	d8000315 	stw	zero,12(sp)
    b9a4:	34c0008c 	andi	r19,r6,2
    b9a8:	3480004c 	andi	r18,r6,1
    b9ac:	9800021e 	bne	r19,zero,b9b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    b9b0:	d8c00417 	ldw	r3,16(sp)
    b9b4:	18002426 	beq	r3,zero,ba48 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    b9b8:	a0003626 	beq	r20,zero,ba94 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    b9bc:	300dd23a 	srai	r6,r6,8
    b9c0:	90000326 	beq	r18,zero,b9d0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    b9c4:	a0800017 	ldw	r2,0(r20)
    b9c8:	118d883a 	add	r6,r2,r6
    b9cc:	31800017 	ldw	r6,0(r6)
    b9d0:	a18d883a 	add	r6,r20,r6
    b9d4:	a9000017 	ldw	r4,0(r21)
    b9d8:	d80f883a 	mov	r7,sp
    b9dc:	880b883a 	mov	r5,r17
    b9e0:	20800017 	ldw	r2,0(r4)
    b9e4:	10800617 	ldw	r2,24(r2)
    b9e8:	103ee83a 	callr	r2
    b9ec:	100d883a 	mov	r6,r2
    b9f0:	10803fcc 	andi	r2,r2,255
    b9f4:	10001426 	beq	r2,zero,ba48 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    b9f8:	d8800317 	ldw	r2,12(sp)
    b9fc:	00c00204 	movi	r3,8
    ba00:	10c02626 	beq	r2,r3,ba9c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    ba04:	d8800117 	ldw	r2,4(sp)
    ba08:	00c000c4 	movi	r3,3
    ba0c:	1880040e 	bge	r3,r2,ba20 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ba10:	9800031e 	bne	r19,zero,ba20 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ba14:	00ffff44 	movi	r3,-3
    ba18:	10c4703a 	and	r2,r2,r3
    ba1c:	d8800115 	stw	r2,4(sp)
    ba20:	b9400317 	ldw	r5,12(r23)
    ba24:	28002126 	beq	r5,zero,baac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    ba28:	b8800017 	ldw	r2,0(r23)
    ba2c:	d9000017 	ldw	r4,0(sp)
    ba30:	11004d1e 	bne	r2,r4,bb68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    ba34:	10003126 	beq	r2,zero,bafc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    ba38:	b9000117 	ldw	r4,4(r23)
    ba3c:	d8800117 	ldw	r2,4(sp)
    ba40:	2084b03a 	or	r2,r4,r2
    ba44:	b8800115 	stw	r2,4(r23)
    ba48:	e73fffc4 	addi	fp,fp,-1
    ba4c:	b5bffe04 	addi	r22,r22,-8
    ba50:	ad7ffe04 	addi	r21,r21,-8
    ba54:	e03fce1e 	bne	fp,zero,b990 <__alt_data_end+0xfc00b990>
    ba58:	b9800117 	ldw	r6,4(r23)
    ba5c:	300cc03a 	cmpne	r6,r6,zero
    ba60:	3005883a 	mov	r2,r6
    ba64:	dfc01017 	ldw	ra,64(sp)
    ba68:	df000f17 	ldw	fp,60(sp)
    ba6c:	ddc00e17 	ldw	r23,56(sp)
    ba70:	dd800d17 	ldw	r22,52(sp)
    ba74:	dd400c17 	ldw	r21,48(sp)
    ba78:	dd000b17 	ldw	r20,44(sp)
    ba7c:	dcc00a17 	ldw	r19,40(sp)
    ba80:	dc800917 	ldw	r18,36(sp)
    ba84:	dc400817 	ldw	r17,32(sp)
    ba88:	dc000717 	ldw	r16,28(sp)
    ba8c:	dec01104 	addi	sp,sp,68
    ba90:	f800283a 	ret
    ba94:	000d883a 	mov	r6,zero
    ba98:	003fce06 	br	b9d4 <__alt_data_end+0xfc00b9d4>
    ba9c:	903fd926 	beq	r18,zero,ba04 <__alt_data_end+0xfc00ba04>
    baa0:	a8800017 	ldw	r2,0(r21)
    baa4:	d8800315 	stw	r2,12(sp)
    baa8:	003fd606 	br	ba04 <__alt_data_end+0xfc00ba04>
    baac:	d9000017 	ldw	r4,0(sp)
    bab0:	d8800117 	ldw	r2,4(sp)
    bab4:	00c000c4 	movi	r3,3
    bab8:	b9000015 	stw	r4,0(r23)
    babc:	d9000217 	ldw	r4,8(sp)
    bac0:	b8800115 	stw	r2,4(r23)
    bac4:	b9000215 	stw	r4,8(r23)
    bac8:	d9000317 	ldw	r4,12(sp)
    bacc:	b9000315 	stw	r4,12(r23)
    bad0:	18bfe30e 	bge	r3,r2,ba60 <__alt_data_end+0xfc00ba60>
    bad4:	1100008c 	andi	r4,r2,2
    bad8:	20001926 	beq	r4,zero,bb40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    badc:	d8c00517 	ldw	r3,20(sp)
    bae0:	18800217 	ldw	r2,8(r3)
    bae4:	1080004c 	andi	r2,r2,1
    bae8:	103fdd26 	beq	r2,zero,ba60 <__alt_data_end+0xfc00ba60>
    baec:	e73fffc4 	addi	fp,fp,-1
    baf0:	b5bffe04 	addi	r22,r22,-8
    baf4:	ad7ffe04 	addi	r21,r21,-8
    baf8:	003fd606 	br	ba54 <__alt_data_end+0xfc00ba54>
    bafc:	d8800317 	ldw	r2,12(sp)
    bb00:	00c00204 	movi	r3,8
    bb04:	10c00b26 	beq	r2,r3,bb34 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bb08:	28c00a26 	beq	r5,r3,bb34 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bb0c:	11000117 	ldw	r4,4(r2)
    bb10:	29400117 	ldw	r5,4(r5)
    bb14:	217fc826 	beq	r4,r5,ba38 <__alt_data_end+0xfc00ba38>
    bb18:	20800007 	ldb	r2,0(r4)
    bb1c:	00c00a84 	movi	r3,42
    bb20:	10c00426 	beq	r2,r3,bb34 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bb24:	d9800615 	stw	r6,24(sp)
    bb28:	001046c0 	call	1046c <strcmp>
    bb2c:	d9800617 	ldw	r6,24(sp)
    bb30:	103fc126 	beq	r2,zero,ba38 <__alt_data_end+0xfc00ba38>
    bb34:	00800084 	movi	r2,2
    bb38:	b8800115 	stw	r2,4(r23)
    bb3c:	003fc806 	br	ba60 <__alt_data_end+0xfc00ba60>
    bb40:	1080004c 	andi	r2,r2,1
    bb44:	103fc626 	beq	r2,zero,ba60 <__alt_data_end+0xfc00ba60>
    bb48:	d8c00517 	ldw	r3,20(sp)
    bb4c:	18800217 	ldw	r2,8(r3)
    bb50:	1080008c 	andi	r2,r2,2
    bb54:	103fc226 	beq	r2,zero,ba60 <__alt_data_end+0xfc00ba60>
    bb58:	e73fffc4 	addi	fp,fp,-1
    bb5c:	b5bffe04 	addi	r22,r22,-8
    bb60:	ad7ffe04 	addi	r21,r21,-8
    bb64:	003fbb06 	br	ba54 <__alt_data_end+0xfc00ba54>
    bb68:	00800084 	movi	r2,2
    bb6c:	b8000015 	stw	zero,0(r23)
    bb70:	b8800115 	stw	r2,4(r23)
    bb74:	003fba06 	br	ba60 <__alt_data_end+0xfc00ba60>

0000bb78 <_ZNSt9type_infoD1Ev>:
    bb78:	f800283a 	ret

0000bb7c <_ZNKSt9type_info14__is_pointer_pEv>:
    bb7c:	0005883a 	mov	r2,zero
    bb80:	f800283a 	ret

0000bb84 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    bb84:	0005883a 	mov	r2,zero
    bb88:	f800283a 	ret

0000bb8c <_ZNSt9type_infoD0Ev>:
    bb8c:	000bbd41 	jmpi	bbd4 <_ZdlPv>

0000bb90 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    bb90:	21000117 	ldw	r4,4(r4)
    bb94:	29400117 	ldw	r5,4(r5)
    bb98:	21400c26 	beq	r4,r5,bbcc <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    bb9c:	20c00007 	ldb	r3,0(r4)
    bba0:	00800a84 	movi	r2,42
    bba4:	18800726 	beq	r3,r2,bbc4 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    bba8:	deffff04 	addi	sp,sp,-4
    bbac:	dfc00015 	stw	ra,0(sp)
    bbb0:	001046c0 	call	1046c <strcmp>
    bbb4:	1005003a 	cmpeq	r2,r2,zero
    bbb8:	dfc00017 	ldw	ra,0(sp)
    bbbc:	dec00104 	addi	sp,sp,4
    bbc0:	f800283a 	ret
    bbc4:	0005883a 	mov	r2,zero
    bbc8:	f800283a 	ret
    bbcc:	00800044 	movi	r2,1
    bbd0:	f800283a 	ret

0000bbd4 <_ZdlPv>:
    bbd4:	000f4601 	jmpi	f460 <free>

0000bbd8 <__cxa_pure_virtual>:
    bbd8:	014000f4 	movhi	r5,3
    bbdc:	deffff04 	addi	sp,sp,-4
    bbe0:	296d9504 	addi	r5,r5,-18860
    bbe4:	018006c4 	movi	r6,27
    bbe8:	01000084 	movi	r4,2
    bbec:	dfc00015 	stw	ra,0(sp)
    bbf0:	0020a300 	call	20a30 <write>
    bbf4:	000bfa00 	call	bfa0 <_ZSt9terminatev>

0000bbf8 <__cxa_deleted_virtual>:
    bbf8:	014000f4 	movhi	r5,3
    bbfc:	deffff04 	addi	sp,sp,-4
    bc00:	296d9c04 	addi	r5,r5,-18832
    bc04:	01800784 	movi	r6,30
    bc08:	01000084 	movi	r4,2
    bc0c:	dfc00015 	stw	ra,0(sp)
    bc10:	0020a300 	call	20a30 <write>
    bc14:	000bfa00 	call	bfa0 <_ZSt9terminatev>

0000bc18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    bc18:	20800017 	ldw	r2,0(r4)
    bc1c:	defffa04 	addi	sp,sp,-24
    bc20:	dc000415 	stw	r16,16(sp)
    bc24:	10800617 	ldw	r2,24(r2)
    bc28:	3021883a 	mov	r16,r6
    bc2c:	31800017 	ldw	r6,0(r6)
    bc30:	00c00404 	movi	r3,16
    bc34:	d8c00215 	stw	r3,8(sp)
    bc38:	dfc00515 	stw	ra,20(sp)
    bc3c:	d8000015 	stw	zero,0(sp)
    bc40:	d8000115 	stw	zero,4(sp)
    bc44:	d8000315 	stw	zero,12(sp)
    bc48:	d80f883a 	mov	r7,sp
    bc4c:	103ee83a 	callr	r2
    bc50:	d8800117 	ldw	r2,4(sp)
    bc54:	00c00184 	movi	r3,6
    bc58:	1080018c 	andi	r2,r2,6
    bc5c:	10c00526 	beq	r2,r3,bc74 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    bc60:	0005883a 	mov	r2,zero
    bc64:	dfc00517 	ldw	ra,20(sp)
    bc68:	dc000417 	ldw	r16,16(sp)
    bc6c:	dec00604 	addi	sp,sp,24
    bc70:	f800283a 	ret
    bc74:	d8c00017 	ldw	r3,0(sp)
    bc78:	00800044 	movi	r2,1
    bc7c:	80c00015 	stw	r3,0(r16)
    bc80:	dfc00517 	ldw	ra,20(sp)
    bc84:	dc000417 	ldw	r16,16(sp)
    bc88:	dec00604 	addi	sp,sp,24
    bc8c:	f800283a 	ret

0000bc90 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    bc90:	d8800017 	ldw	r2,0(sp)
    bc94:	11800226 	beq	r2,r6,bca0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    bc98:	00800044 	movi	r2,1
    bc9c:	f800283a 	ret
    bca0:	00800184 	movi	r2,6
    bca4:	f800283a 	ret

0000bca8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    bca8:	008000f4 	movhi	r2,3
    bcac:	10adb204 	addi	r2,r2,-18744
    bcb0:	20800015 	stw	r2,0(r4)
    bcb4:	000bb781 	jmpi	bb78 <_ZNSt9type_infoD1Ev>

0000bcb8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    bcb8:	defffe04 	addi	sp,sp,-8
    bcbc:	008000f4 	movhi	r2,3
    bcc0:	dc000015 	stw	r16,0(sp)
    bcc4:	dfc00115 	stw	ra,4(sp)
    bcc8:	10adb204 	addi	r2,r2,-18744
    bccc:	20800015 	stw	r2,0(r4)
    bcd0:	2021883a 	mov	r16,r4
    bcd4:	000bb780 	call	bb78 <_ZNSt9type_infoD1Ev>
    bcd8:	8009883a 	mov	r4,r16
    bcdc:	dfc00117 	ldw	ra,4(sp)
    bce0:	dc000017 	ldw	r16,0(sp)
    bce4:	dec00204 	addi	sp,sp,8
    bce8:	000bbd41 	jmpi	bbd4 <_ZdlPv>

0000bcec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    bcec:	21000117 	ldw	r4,4(r4)
    bcf0:	29400117 	ldw	r5,4(r5)
    bcf4:	defffd04 	addi	sp,sp,-12
    bcf8:	dc400115 	stw	r17,4(sp)
    bcfc:	dc000015 	stw	r16,0(sp)
    bd00:	dfc00215 	stw	ra,8(sp)
    bd04:	3023883a 	mov	r17,r6
    bd08:	3821883a 	mov	r16,r7
    bd0c:	21400526 	beq	r4,r5,bd24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    bd10:	20c00007 	ldb	r3,0(r4)
    bd14:	00800a84 	movi	r2,42
    bd18:	18800d26 	beq	r3,r2,bd50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    bd1c:	001046c0 	call	1046c <strcmp>
    bd20:	10000b1e 	bne	r2,zero,bd50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    bd24:	00800204 	movi	r2,8
    bd28:	80800315 	stw	r2,12(r16)
    bd2c:	00800184 	movi	r2,6
    bd30:	80800115 	stw	r2,4(r16)
    bd34:	84400015 	stw	r17,0(r16)
    bd38:	00800044 	movi	r2,1
    bd3c:	dfc00217 	ldw	ra,8(sp)
    bd40:	dc400117 	ldw	r17,4(sp)
    bd44:	dc000017 	ldw	r16,0(sp)
    bd48:	dec00304 	addi	sp,sp,12
    bd4c:	f800283a 	ret
    bd50:	0005883a 	mov	r2,zero
    bd54:	003ff906 	br	bd3c <__alt_data_end+0xfc00bd3c>

0000bd58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    bd58:	defffa04 	addi	sp,sp,-24
    bd5c:	dc800415 	stw	r18,16(sp)
    bd60:	d8800817 	ldw	r2,32(sp)
    bd64:	dc800617 	ldw	r18,24(sp)
    bd68:	dc400315 	stw	r17,12(sp)
    bd6c:	dc000215 	stw	r16,8(sp)
    bd70:	dfc00515 	stw	ra,20(sp)
    bd74:	dc400917 	ldw	r17,36(sp)
    bd78:	24000117 	ldw	r16,4(r4)
    bd7c:	90801526 	beq	r18,r2,bdd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    bd80:	39400117 	ldw	r5,4(r7)
    bd84:	2c000826 	beq	r5,r16,bda8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    bd88:	80c00007 	ldb	r3,0(r16)
    bd8c:	00800a84 	movi	r2,42
    bd90:	18800926 	beq	r3,r2,bdb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    bd94:	8009883a 	mov	r4,r16
    bd98:	d9800115 	stw	r6,4(sp)
    bd9c:	001046c0 	call	1046c <strcmp>
    bda0:	d9800117 	ldw	r6,4(sp)
    bda4:	1000041e 	bne	r2,zero,bdb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    bda8:	00800044 	movi	r2,1
    bdac:	8c800015 	stw	r18,0(r17)
    bdb0:	89800115 	stw	r6,4(r17)
    bdb4:	88800315 	stw	r2,12(r17)
    bdb8:	0005883a 	mov	r2,zero
    bdbc:	dfc00517 	ldw	ra,20(sp)
    bdc0:	dc800417 	ldw	r18,16(sp)
    bdc4:	dc400317 	ldw	r17,12(sp)
    bdc8:	dc000217 	ldw	r16,8(sp)
    bdcc:	dec00604 	addi	sp,sp,24
    bdd0:	f800283a 	ret
    bdd4:	d8800717 	ldw	r2,28(sp)
    bdd8:	11400117 	ldw	r5,4(r2)
    bddc:	81400a26 	beq	r16,r5,be08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    bde0:	80c00007 	ldb	r3,0(r16)
    bde4:	00800a84 	movi	r2,42
    bde8:	18800c26 	beq	r3,r2,be1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    bdec:	8009883a 	mov	r4,r16
    bdf0:	d9800115 	stw	r6,4(sp)
    bdf4:	d9c00015 	stw	r7,0(sp)
    bdf8:	001046c0 	call	1046c <strcmp>
    bdfc:	d9800117 	ldw	r6,4(sp)
    be00:	d9c00017 	ldw	r7,0(sp)
    be04:	1000021e 	bne	r2,zero,be10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    be08:	89800215 	stw	r6,8(r17)
    be0c:	003fea06 	br	bdb8 <__alt_data_end+0xfc00bdb8>
    be10:	39400117 	ldw	r5,4(r7)
    be14:	817fdf1e 	bne	r16,r5,bd94 <__alt_data_end+0xfc00bd94>
    be18:	003fe306 	br	bda8 <__alt_data_end+0xfc00bda8>
    be1c:	38800117 	ldw	r2,4(r7)
    be20:	80bfe51e 	bne	r16,r2,bdb8 <__alt_data_end+0xfc00bdb8>
    be24:	003fe006 	br	bda8 <__alt_data_end+0xfc00bda8>

0000be28 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    be28:	20800117 	ldw	r2,4(r4)
    be2c:	28c00117 	ldw	r3,4(r5)
    be30:	10c02926 	beq	r2,r3,bed8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    be34:	defffb04 	addi	sp,sp,-20
    be38:	dcc00315 	stw	r19,12(sp)
    be3c:	dc800215 	stw	r18,8(sp)
    be40:	dc400115 	stw	r17,4(sp)
    be44:	dc000015 	stw	r16,0(sp)
    be48:	dfc00415 	stw	ra,16(sp)
    be4c:	2821883a 	mov	r16,r5
    be50:	11400007 	ldb	r5,0(r2)
    be54:	2025883a 	mov	r18,r4
    be58:	01000a84 	movi	r4,42
    be5c:	3823883a 	mov	r17,r7
    be60:	3027883a 	mov	r19,r6
    be64:	29000626 	beq	r5,r4,be80 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    be68:	180b883a 	mov	r5,r3
    be6c:	1009883a 	mov	r4,r2
    be70:	001046c0 	call	1046c <strcmp>
    be74:	1000021e 	bne	r2,zero,be80 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    be78:	00800044 	movi	r2,1
    be7c:	00000306 	br	be8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    be80:	008000c4 	movi	r2,3
    be84:	1440082e 	bgeu	r2,r17,bea8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    be88:	0005883a 	mov	r2,zero
    be8c:	dfc00417 	ldw	ra,16(sp)
    be90:	dcc00317 	ldw	r19,12(sp)
    be94:	dc800217 	ldw	r18,8(sp)
    be98:	dc400117 	ldw	r17,4(sp)
    be9c:	dc000017 	ldw	r16,0(sp)
    bea0:	dec00504 	addi	sp,sp,20
    bea4:	f800283a 	ret
    bea8:	80800017 	ldw	r2,0(r16)
    beac:	980d883a 	mov	r6,r19
    beb0:	900b883a 	mov	r5,r18
    beb4:	10800517 	ldw	r2,20(r2)
    beb8:	8009883a 	mov	r4,r16
    bebc:	dfc00417 	ldw	ra,16(sp)
    bec0:	dcc00317 	ldw	r19,12(sp)
    bec4:	dc800217 	ldw	r18,8(sp)
    bec8:	dc400117 	ldw	r17,4(sp)
    becc:	dc000017 	ldw	r16,0(sp)
    bed0:	dec00504 	addi	sp,sp,20
    bed4:	1000683a 	jmp	r2
    bed8:	00800044 	movi	r2,1
    bedc:	f800283a 	ret

0000bee0 <_ZN10__cxxabiv111__terminateEPFvvE>:
    bee0:	00800074 	movhi	r2,1
    bee4:	deffef04 	addi	sp,sp,-68
    bee8:	10b21204 	addi	r2,r2,-14264
    beec:	d8800615 	stw	r2,24(sp)
    bef0:	008000b4 	movhi	r2,2
    bef4:	1092bc04 	addi	r2,r2,19184
    bef8:	d8800715 	stw	r2,28(sp)
    befc:	00800074 	movhi	r2,1
    bf00:	10afce04 	addi	r2,r2,-16584
    bf04:	d9000d15 	stw	r4,52(sp)
    bf08:	d809883a 	mov	r4,sp
    bf0c:	d8800915 	stw	r2,36(sp)
    bf10:	dfc01015 	stw	ra,64(sp)
    bf14:	df000f15 	stw	fp,60(sp)
    bf18:	dec00815 	stw	sp,32(sp)
    bf1c:	dec00a15 	stw	sp,40(sp)
    bf20:	000f06c0 	call	f06c <_Unwind_SjLj_Register>
    bf24:	00800044 	movi	r2,1
    bf28:	d8800115 	stw	r2,4(sp)
    bf2c:	d8800d17 	ldw	r2,52(sp)
    bf30:	103ee83a 	callr	r2
    bf34:	000f3e80 	call	f3e8 <abort>
    bf38:	d8c00217 	ldw	r3,8(sp)
    bf3c:	d8800117 	ldw	r2,4(sp)
    bf40:	d8c00d15 	stw	r3,52(sp)
    bf44:	d8c00317 	ldw	r3,12(sp)
    bf48:	d8c00e15 	stw	r3,56(sp)
    bf4c:	10000b26 	beq	r2,zero,bf7c <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    bf50:	10bfffc4 	addi	r2,r2,-1
    bf54:	10000126 	beq	r2,zero,bf5c <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    bf58:	003b68fa 	trap	3
    bf5c:	d8000115 	stw	zero,4(sp)
    bf60:	000d28c0 	call	d28c <__cxa_end_catch>
    bf64:	d8c00e17 	ldw	r3,56(sp)
    bf68:	00bfffc4 	movi	r2,-1
    bf6c:	18800826 	beq	r3,r2,bf90 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    bf70:	d9000d17 	ldw	r4,52(sp)
    bf74:	d8800115 	stw	r2,4(sp)
    bf78:	000f2680 	call	f268 <_Unwind_SjLj_Resume>
    bf7c:	d9000d17 	ldw	r4,52(sp)
    bf80:	000d1d80 	call	d1d8 <__cxa_begin_catch>
    bf84:	00800084 	movi	r2,2
    bf88:	d8800115 	stw	r2,4(sp)
    bf8c:	000f3e80 	call	f3e8 <abort>
    bf90:	d8800e17 	ldw	r2,56(sp)
    bf94:	d9000d17 	ldw	r4,52(sp)
    bf98:	d8800115 	stw	r2,4(sp)
    bf9c:	000ce480 	call	ce48 <__cxa_call_unexpected>

0000bfa0 <_ZSt9terminatev>:
    bfa0:	008000f4 	movhi	r2,3
    bfa4:	10bb3404 	addi	r2,r2,-4912
    bfa8:	11000017 	ldw	r4,0(r2)
    bfac:	deffff04 	addi	sp,sp,-4
    bfb0:	dfc00015 	stw	ra,0(sp)
    bfb4:	000bee00 	call	bee0 <_ZN10__cxxabiv111__terminateEPFvvE>

0000bfb8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    bfb8:	deffff04 	addi	sp,sp,-4
    bfbc:	dfc00015 	stw	ra,0(sp)
    bfc0:	203ee83a 	callr	r4
    bfc4:	000bfa00 	call	bfa0 <_ZSt9terminatev>

0000bfc8 <_ZSt10unexpectedv>:
    bfc8:	008000f4 	movhi	r2,3
    bfcc:	10bb3304 	addi	r2,r2,-4916
    bfd0:	11000017 	ldw	r4,0(r2)
    bfd4:	deffff04 	addi	sp,sp,-4
    bfd8:	dfc00015 	stw	ra,0(sp)
    bfdc:	000bfb80 	call	bfb8 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000bfe0 <_ZSt13set_terminatePFvvE>:
    bfe0:	00c000f4 	movhi	r3,3
    bfe4:	18fb3404 	addi	r3,r3,-4912
    bfe8:	18800017 	ldw	r2,0(r3)
    bfec:	19000015 	stw	r4,0(r3)
    bff0:	f800283a 	ret

0000bff4 <_ZSt13get_terminatev>:
    bff4:	008000f4 	movhi	r2,3
    bff8:	10bb3404 	addi	r2,r2,-4912
    bffc:	10800017 	ldw	r2,0(r2)
    c000:	f800283a 	ret

0000c004 <_ZSt14set_unexpectedPFvvE>:
    c004:	00c000f4 	movhi	r3,3
    c008:	18fb3304 	addi	r3,r3,-4916
    c00c:	18800017 	ldw	r2,0(r3)
    c010:	19000015 	stw	r4,0(r3)
    c014:	f800283a 	ret

0000c018 <_ZSt14get_unexpectedv>:
    c018:	008000f4 	movhi	r2,3
    c01c:	10bb3304 	addi	r2,r2,-4916
    c020:	10800017 	ldw	r2,0(r2)
    c024:	f800283a 	ret

0000c028 <_ZL21size_of_encoded_valueh>:
    c028:	deffff04 	addi	sp,sp,-4
    c02c:	dfc00015 	stw	ra,0(sp)
    c030:	20c03fcc 	andi	r3,r4,255
    c034:	00803fc4 	movi	r2,255
    c038:	18802026 	beq	r3,r2,c0bc <_ZL21size_of_encoded_valueh+0x94>
    c03c:	210001cc 	andi	r4,r4,7
    c040:	00800144 	movi	r2,5
    c044:	11001c36 	bltu	r2,r4,c0b8 <_ZL21size_of_encoded_valueh+0x90>
    c048:	200890ba 	slli	r4,r4,2
    c04c:	00800074 	movhi	r2,1
    c050:	10b01804 	addi	r2,r2,-16288
    c054:	2089883a 	add	r4,r4,r2
    c058:	20800017 	ldw	r2,0(r4)
    c05c:	1000683a 	jmp	r2
    c060:	0000c078 	rdprs	zero,zero,769
    c064:	0000c0b8 	rdprs	zero,zero,770
    c068:	0000c088 	cmpgei	zero,zero,770
    c06c:	0000c078 	rdprs	zero,zero,769
    c070:	0000c0a8 	cmpgeui	zero,zero,770
    c074:	0000c098 	cmpnei	zero,zero,770
    c078:	00800104 	movi	r2,4
    c07c:	dfc00017 	ldw	ra,0(sp)
    c080:	dec00104 	addi	sp,sp,4
    c084:	f800283a 	ret
    c088:	00800084 	movi	r2,2
    c08c:	dfc00017 	ldw	ra,0(sp)
    c090:	dec00104 	addi	sp,sp,4
    c094:	f800283a 	ret
    c098:	00800044 	movi	r2,1
    c09c:	dfc00017 	ldw	ra,0(sp)
    c0a0:	dec00104 	addi	sp,sp,4
    c0a4:	f800283a 	ret
    c0a8:	00800204 	movi	r2,8
    c0ac:	dfc00017 	ldw	ra,0(sp)
    c0b0:	dec00104 	addi	sp,sp,4
    c0b4:	f800283a 	ret
    c0b8:	000f3e80 	call	f3e8 <abort>
    c0bc:	0005883a 	mov	r2,zero
    c0c0:	dfc00017 	ldw	ra,0(sp)
    c0c4:	dec00104 	addi	sp,sp,4
    c0c8:	f800283a 	ret

0000c0cc <_ZL28read_encoded_value_with_basehjPKhPj>:
    c0cc:	deffff04 	addi	sp,sp,-4
    c0d0:	dfc00015 	stw	ra,0(sp)
    c0d4:	20c03fcc 	andi	r3,r4,255
    c0d8:	00801404 	movi	r2,80
    c0dc:	18807326 	beq	r3,r2,c2ac <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    c0e0:	20c003cc 	andi	r3,r4,15
    c0e4:	00800304 	movi	r2,12
    c0e8:	10c06f36 	bltu	r2,r3,c2a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    c0ec:	180690ba 	slli	r3,r3,2
    c0f0:	02000074 	movhi	r8,1
    c0f4:	42304104 	addi	r8,r8,-16124
    c0f8:	1a07883a 	add	r3,r3,r8
    c0fc:	18800017 	ldw	r2,0(r3)
    c100:	1000683a 	jmp	r2
    c104:	0000c138 	rdprs	zero,zero,772
    c108:	0000c254 	movui	zero,777
    c10c:	0000c290 	cmplti	zero,zero,778
    c110:	0000c138 	rdprs	zero,zero,772
    c114:	0000c19c 	xori	zero,zero,774
    c118:	0000c1f0 	cmpltui	zero,zero,775
    c11c:	0000c2a8 	cmpgeui	zero,zero,778
    c120:	0000c2a8 	cmpgeui	zero,zero,778
    c124:	0000c2a8 	cmpgeui	zero,zero,778
    c128:	0000c1fc 	xorhi	zero,zero,775
    c12c:	0000c1cc 	andi	zero,zero,775
    c130:	0000c138 	rdprs	zero,zero,772
    c134:	0000c19c 	xori	zero,zero,774
    c138:	30800043 	ldbu	r2,1(r6)
    c13c:	30c00083 	ldbu	r3,2(r6)
    c140:	324000c3 	ldbu	r9,3(r6)
    c144:	32000003 	ldbu	r8,0(r6)
    c148:	1004923a 	slli	r2,r2,8
    c14c:	1806943a 	slli	r3,r3,16
    c150:	4812963a 	slli	r9,r9,24
    c154:	1204b03a 	or	r2,r2,r8
    c158:	1884b03a 	or	r2,r3,r2
    c15c:	4886b03a 	or	r3,r9,r2
    c160:	30800104 	addi	r2,r6,4
    c164:	18000926 	beq	r3,zero,c18c <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    c168:	22001c0c 	andi	r8,r4,112
    c16c:	02400404 	movi	r9,16
    c170:	42405726 	beq	r8,r9,c2d0 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    c174:	21003fcc 	andi	r4,r4,255
    c178:	2100201c 	xori	r4,r4,128
    c17c:	213fe004 	addi	r4,r4,-128
    c180:	1947883a 	add	r3,r3,r5
    c184:	2000010e 	bge	r4,zero,c18c <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    c188:	18c00017 	ldw	r3,0(r3)
    c18c:	38c00015 	stw	r3,0(r7)
    c190:	dfc00017 	ldw	ra,0(sp)
    c194:	dec00104 	addi	sp,sp,4
    c198:	f800283a 	ret
    c19c:	30800043 	ldbu	r2,1(r6)
    c1a0:	30c00083 	ldbu	r3,2(r6)
    c1a4:	324000c3 	ldbu	r9,3(r6)
    c1a8:	32000003 	ldbu	r8,0(r6)
    c1ac:	1004923a 	slli	r2,r2,8
    c1b0:	1806943a 	slli	r3,r3,16
    c1b4:	4812963a 	slli	r9,r9,24
    c1b8:	1204b03a 	or	r2,r2,r8
    c1bc:	1884b03a 	or	r2,r3,r2
    c1c0:	4886b03a 	or	r3,r9,r2
    c1c4:	30800204 	addi	r2,r6,8
    c1c8:	003fe606 	br	c164 <__alt_data_end+0xfc00c164>
    c1cc:	30c00043 	ldbu	r3,1(r6)
    c1d0:	32000003 	ldbu	r8,0(r6)
    c1d4:	30800084 	addi	r2,r6,2
    c1d8:	1806923a 	slli	r3,r3,8
    c1dc:	1a06b03a 	or	r3,r3,r8
    c1e0:	18ffffcc 	andi	r3,r3,65535
    c1e4:	18e0001c 	xori	r3,r3,32768
    c1e8:	18e00004 	addi	r3,r3,-32768
    c1ec:	003fdd06 	br	c164 <__alt_data_end+0xfc00c164>
    c1f0:	30c00003 	ldbu	r3,0(r6)
    c1f4:	30800044 	addi	r2,r6,1
    c1f8:	003fda06 	br	c164 <__alt_data_end+0xfc00c164>
    c1fc:	3017883a 	mov	r11,r6
    c200:	0007883a 	mov	r3,zero
    c204:	0013883a 	mov	r9,zero
    c208:	5a800003 	ldbu	r10,0(r11)
    c20c:	58800044 	addi	r2,r11,1
    c210:	1017883a 	mov	r11,r2
    c214:	52001fcc 	andi	r8,r10,127
    c218:	4250983a 	sll	r8,r8,r9
    c21c:	53003fcc 	andi	r12,r10,255
    c220:	6300201c 	xori	r12,r12,128
    c224:	633fe004 	addi	r12,r12,-128
    c228:	1a06b03a 	or	r3,r3,r8
    c22c:	4a4001c4 	addi	r9,r9,7
    c230:	603ff516 	blt	r12,zero,c208 <__alt_data_end+0xfc00c208>
    c234:	020007c4 	movi	r8,31
    c238:	427fca36 	bltu	r8,r9,c164 <__alt_data_end+0xfc00c164>
    c23c:	5280100c 	andi	r10,r10,64
    c240:	503fc826 	beq	r10,zero,c164 <__alt_data_end+0xfc00c164>
    c244:	023fffc4 	movi	r8,-1
    c248:	4252983a 	sll	r9,r8,r9
    c24c:	1a46b03a 	or	r3,r3,r9
    c250:	003fc506 	br	c168 <__alt_data_end+0xfc00c168>
    c254:	3017883a 	mov	r11,r6
    c258:	0007883a 	mov	r3,zero
    c25c:	0015883a 	mov	r10,zero
    c260:	5a000003 	ldbu	r8,0(r11)
    c264:	58800044 	addi	r2,r11,1
    c268:	1017883a 	mov	r11,r2
    c26c:	42401fcc 	andi	r9,r8,127
    c270:	4a92983a 	sll	r9,r9,r10
    c274:	42003fcc 	andi	r8,r8,255
    c278:	4200201c 	xori	r8,r8,128
    c27c:	423fe004 	addi	r8,r8,-128
    c280:	1a46b03a 	or	r3,r3,r9
    c284:	528001c4 	addi	r10,r10,7
    c288:	403ff516 	blt	r8,zero,c260 <__alt_data_end+0xfc00c260>
    c28c:	003fb506 	br	c164 <__alt_data_end+0xfc00c164>
    c290:	30c00043 	ldbu	r3,1(r6)
    c294:	32000003 	ldbu	r8,0(r6)
    c298:	30800084 	addi	r2,r6,2
    c29c:	1806923a 	slli	r3,r3,8
    c2a0:	1a06b03a 	or	r3,r3,r8
    c2a4:	003faf06 	br	c164 <__alt_data_end+0xfc00c164>
    c2a8:	000f3e80 	call	f3e8 <abort>
    c2ac:	308000c4 	addi	r2,r6,3
    c2b0:	00ffff04 	movi	r3,-4
    c2b4:	10c4703a 	and	r2,r2,r3
    c2b8:	10c00017 	ldw	r3,0(r2)
    c2bc:	10800104 	addi	r2,r2,4
    c2c0:	38c00015 	stw	r3,0(r7)
    c2c4:	dfc00017 	ldw	ra,0(sp)
    c2c8:	dec00104 	addi	sp,sp,4
    c2cc:	f800283a 	ret
    c2d0:	300b883a 	mov	r5,r6
    c2d4:	003fa706 	br	c174 <__alt_data_end+0xfc00c174>

0000c2d8 <_ZL15get_ttype_entryP16lsda_header_infom>:
    c2d8:	defffc04 	addi	sp,sp,-16
    c2dc:	dfc00315 	stw	ra,12(sp)
    c2e0:	dc000215 	stw	r16,8(sp)
    c2e4:	2021883a 	mov	r16,r4
    c2e8:	21000503 	ldbu	r4,20(r4)
    c2ec:	d9400115 	stw	r5,4(sp)
    c2f0:	000c0280 	call	c028 <_ZL21size_of_encoded_valueh>
    c2f4:	d9400117 	ldw	r5,4(sp)
    c2f8:	1009883a 	mov	r4,r2
    c2fc:	000d8e00 	call	d8e0 <__mulsi3>
    c300:	81800317 	ldw	r6,12(r16)
    c304:	81400217 	ldw	r5,8(r16)
    c308:	81000503 	ldbu	r4,20(r16)
    c30c:	d80f883a 	mov	r7,sp
    c310:	308dc83a 	sub	r6,r6,r2
    c314:	000c0cc0 	call	c0cc <_ZL28read_encoded_value_with_basehjPKhPj>
    c318:	d8800017 	ldw	r2,0(sp)
    c31c:	dfc00317 	ldw	ra,12(sp)
    c320:	dc000217 	ldw	r16,8(sp)
    c324:	dec00404 	addi	sp,sp,16
    c328:	f800283a 	ret

0000c32c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    c32c:	deffff04 	addi	sp,sp,-4
    c330:	dfc00015 	stw	ra,0(sp)
    c334:	20c03fcc 	andi	r3,r4,255
    c338:	00803fc4 	movi	r2,255
    c33c:	18800e26 	beq	r3,r2,c378 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    c340:	20801c0c 	andi	r2,r4,112
    c344:	00c00804 	movi	r3,32
    c348:	10c01726 	beq	r2,r3,c3a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    c34c:	18800e2e 	bgeu	r3,r2,c388 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    c350:	00c01004 	movi	r3,64
    c354:	10c01026 	beq	r2,r3,c398 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    c358:	00c01404 	movi	r3,80
    c35c:	10c00626 	beq	r2,r3,c378 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    c360:	00c00c04 	movi	r3,48
    c364:	10c00b1e 	bne	r2,r3,c394 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    c368:	2809883a 	mov	r4,r5
    c36c:	dfc00017 	ldw	ra,0(sp)
    c370:	dec00104 	addi	sp,sp,4
    c374:	000f1441 	jmpi	f144 <_Unwind_GetDataRelBase>
    c378:	0005883a 	mov	r2,zero
    c37c:	dfc00017 	ldw	ra,0(sp)
    c380:	dec00104 	addi	sp,sp,4
    c384:	f800283a 	ret
    c388:	103ffb26 	beq	r2,zero,c378 <__alt_data_end+0xfc00c378>
    c38c:	00c00404 	movi	r3,16
    c390:	10fff926 	beq	r2,r3,c378 <__alt_data_end+0xfc00c378>
    c394:	000f3e80 	call	f3e8 <abort>
    c398:	2809883a 	mov	r4,r5
    c39c:	dfc00017 	ldw	ra,0(sp)
    c3a0:	dec00104 	addi	sp,sp,4
    c3a4:	000f1341 	jmpi	f134 <_Unwind_GetRegionStart>
    c3a8:	2809883a 	mov	r4,r5
    c3ac:	dfc00017 	ldw	ra,0(sp)
    c3b0:	dec00104 	addi	sp,sp,4
    c3b4:	000f14c1 	jmpi	f14c <_Unwind_GetTextRelBase>

0000c3b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    c3b8:	defffb04 	addi	sp,sp,-20
    c3bc:	dcc00315 	stw	r19,12(sp)
    c3c0:	dc400115 	stw	r17,4(sp)
    c3c4:	dc000015 	stw	r16,0(sp)
    c3c8:	dfc00415 	stw	ra,16(sp)
    c3cc:	dc800215 	stw	r18,8(sp)
    c3d0:	2027883a 	mov	r19,r4
    c3d4:	2821883a 	mov	r16,r5
    c3d8:	3023883a 	mov	r17,r6
    c3dc:	20003f26 	beq	r4,zero,c4dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    c3e0:	000f1340 	call	f134 <_Unwind_GetRegionStart>
    c3e4:	88800015 	stw	r2,0(r17)
    c3e8:	84800003 	ldbu	r18,0(r16)
    c3ec:	00c03fc4 	movi	r3,255
    c3f0:	84000044 	addi	r16,r16,1
    c3f4:	90c03726 	beq	r18,r3,c4d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    c3f8:	980b883a 	mov	r5,r19
    c3fc:	9009883a 	mov	r4,r18
    c400:	000c32c0 	call	c32c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c404:	800d883a 	mov	r6,r16
    c408:	89c00104 	addi	r7,r17,4
    c40c:	100b883a 	mov	r5,r2
    c410:	9009883a 	mov	r4,r18
    c414:	000c0cc0 	call	c0cc <_ZL28read_encoded_value_with_basehjPKhPj>
    c418:	1021883a 	mov	r16,r2
    c41c:	80c00003 	ldbu	r3,0(r16)
    c420:	01003fc4 	movi	r4,255
    c424:	80800044 	addi	r2,r16,1
    c428:	88c00505 	stb	r3,20(r17)
    c42c:	18c03fcc 	andi	r3,r3,255
    c430:	19002c26 	beq	r3,r4,c4e4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    c434:	100f883a 	mov	r7,r2
    c438:	000d883a 	mov	r6,zero
    c43c:	000b883a 	mov	r5,zero
    c440:	38c00003 	ldbu	r3,0(r7)
    c444:	10800044 	addi	r2,r2,1
    c448:	100f883a 	mov	r7,r2
    c44c:	19001fcc 	andi	r4,r3,127
    c450:	2148983a 	sll	r4,r4,r5
    c454:	18c03fcc 	andi	r3,r3,255
    c458:	18c0201c 	xori	r3,r3,128
    c45c:	18ffe004 	addi	r3,r3,-128
    c460:	310cb03a 	or	r6,r6,r4
    c464:	294001c4 	addi	r5,r5,7
    c468:	183ff516 	blt	r3,zero,c440 <__alt_data_end+0xfc00c440>
    c46c:	118d883a 	add	r6,r2,r6
    c470:	89800315 	stw	r6,12(r17)
    c474:	10c00003 	ldbu	r3,0(r2)
    c478:	000d883a 	mov	r6,zero
    c47c:	10800044 	addi	r2,r2,1
    c480:	88c00545 	stb	r3,21(r17)
    c484:	000b883a 	mov	r5,zero
    c488:	10c00003 	ldbu	r3,0(r2)
    c48c:	10800044 	addi	r2,r2,1
    c490:	19001fcc 	andi	r4,r3,127
    c494:	2148983a 	sll	r4,r4,r5
    c498:	18c03fcc 	andi	r3,r3,255
    c49c:	18c0201c 	xori	r3,r3,128
    c4a0:	18ffe004 	addi	r3,r3,-128
    c4a4:	310cb03a 	or	r6,r6,r4
    c4a8:	294001c4 	addi	r5,r5,7
    c4ac:	183ff616 	blt	r3,zero,c488 <__alt_data_end+0xfc00c488>
    c4b0:	118d883a 	add	r6,r2,r6
    c4b4:	89800415 	stw	r6,16(r17)
    c4b8:	dfc00417 	ldw	ra,16(sp)
    c4bc:	dcc00317 	ldw	r19,12(sp)
    c4c0:	dc800217 	ldw	r18,8(sp)
    c4c4:	dc400117 	ldw	r17,4(sp)
    c4c8:	dc000017 	ldw	r16,0(sp)
    c4cc:	dec00504 	addi	sp,sp,20
    c4d0:	f800283a 	ret
    c4d4:	88800115 	stw	r2,4(r17)
    c4d8:	003fd006 	br	c41c <__alt_data_end+0xfc00c41c>
    c4dc:	0005883a 	mov	r2,zero
    c4e0:	003fc006 	br	c3e4 <__alt_data_end+0xfc00c3e4>
    c4e4:	88000315 	stw	zero,12(r17)
    c4e8:	003fe206 	br	c474 <__alt_data_end+0xfc00c474>

0000c4ec <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    c4ec:	28800017 	ldw	r2,0(r5)
    c4f0:	30c00017 	ldw	r3,0(r6)
    c4f4:	defffb04 	addi	sp,sp,-20
    c4f8:	10800217 	ldw	r2,8(r2)
    c4fc:	dc400315 	stw	r17,12(sp)
    c500:	dc000215 	stw	r16,8(sp)
    c504:	d9400115 	stw	r5,4(sp)
    c508:	dfc00415 	stw	ra,16(sp)
    c50c:	2021883a 	mov	r16,r4
    c510:	d8c00015 	stw	r3,0(sp)
    c514:	2809883a 	mov	r4,r5
    c518:	3023883a 	mov	r17,r6
    c51c:	103ee83a 	callr	r2
    c520:	10803fcc 	andi	r2,r2,255
    c524:	d9400117 	ldw	r5,4(sp)
    c528:	10000326 	beq	r2,zero,c538 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    c52c:	d8800017 	ldw	r2,0(sp)
    c530:	10800017 	ldw	r2,0(r2)
    c534:	d8800015 	stw	r2,0(sp)
    c538:	80800017 	ldw	r2,0(r16)
    c53c:	01c00044 	movi	r7,1
    c540:	d80d883a 	mov	r6,sp
    c544:	10800417 	ldw	r2,16(r2)
    c548:	8009883a 	mov	r4,r16
    c54c:	103ee83a 	callr	r2
    c550:	10c03fcc 	andi	r3,r2,255
    c554:	18000226 	beq	r3,zero,c560 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    c558:	d8c00017 	ldw	r3,0(sp)
    c55c:	88c00015 	stw	r3,0(r17)
    c560:	dfc00417 	ldw	ra,16(sp)
    c564:	dc400317 	ldw	r17,12(sp)
    c568:	dc000217 	ldw	r16,8(sp)
    c56c:	dec00504 	addi	sp,sp,20
    c570:	f800283a 	ret

0000c574 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    c574:	defff304 	addi	sp,sp,-52
    c578:	dc800615 	stw	r18,24(sp)
    c57c:	3825d23a 	srai	r18,r7,8
    c580:	dd000815 	stw	r20,32(sp)
    c584:	dcc00715 	stw	r19,28(sp)
    c588:	dfc00c15 	stw	ra,48(sp)
    c58c:	ddc00b15 	stw	r23,44(sp)
    c590:	dd800a15 	stw	r22,40(sp)
    c594:	dd400915 	stw	r21,36(sp)
    c598:	dc400515 	stw	r17,20(sp)
    c59c:	dc000415 	stw	r16,16(sp)
    c5a0:	d9400215 	stw	r5,8(sp)
    c5a4:	3827883a 	mov	r19,r7
    c5a8:	2029883a 	mov	r20,r4
    c5ac:	9000010e 	bge	r18,zero,c5b4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    c5b0:	04a5c83a 	sub	r18,zero,r18
    c5b4:	000b883a 	mov	r5,zero
    c5b8:	01000144 	movi	r4,5
    c5bc:	d9800315 	stw	r6,12(sp)
    c5c0:	000c32c0 	call	c32c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c5c4:	d9800317 	ldw	r6,12(sp)
    c5c8:	d9c00104 	addi	r7,sp,4
    c5cc:	100b883a 	mov	r5,r2
    c5d0:	01000144 	movi	r4,5
    c5d4:	000c0cc0 	call	c0cc <_ZL28read_encoded_value_with_basehjPKhPj>
    c5d8:	017ffe44 	movi	r5,-7
    c5dc:	1009883a 	mov	r4,r2
    c5e0:	1021883a 	mov	r16,r2
    c5e4:	000d8e00 	call	d8e0 <__mulsi3>
    c5e8:	102d883a 	mov	r22,r2
    c5ec:	0023883a 	mov	r17,zero
    c5f0:	85400003 	ldbu	r21,0(r16)
    c5f4:	8009883a 	mov	r4,r16
    c5f8:	014001c4 	movi	r5,7
    c5fc:	000d8e00 	call	d8e0 <__mulsi3>
    c600:	a8c01fcc 	andi	r3,r21,127
    c604:	1585883a 	add	r2,r2,r22
    c608:	1886983a 	sll	r3,r3,r2
    c60c:	ad403fcc 	andi	r21,r21,255
    c610:	ad40201c 	xori	r21,r21,128
    c614:	ad7fe004 	addi	r21,r21,-128
    c618:	84000044 	addi	r16,r16,1
    c61c:	88e2b03a 	or	r17,r17,r3
    c620:	a83ff316 	blt	r21,zero,c5f0 <__alt_data_end+0xfc00c5f0>
    c624:	8461883a 	add	r16,r16,r17
    c628:	017ffe44 	movi	r5,-7
    c62c:	8009883a 	mov	r4,r16
    c630:	000d8e00 	call	d8e0 <__mulsi3>
    c634:	102d883a 	mov	r22,r2
    c638:	002b883a 	mov	r21,zero
    c63c:	84400003 	ldbu	r17,0(r16)
    c640:	8009883a 	mov	r4,r16
    c644:	014001c4 	movi	r5,7
    c648:	000d8e00 	call	d8e0 <__mulsi3>
    c64c:	88c01fcc 	andi	r3,r17,127
    c650:	1585883a 	add	r2,r2,r22
    c654:	1886983a 	sll	r3,r3,r2
    c658:	8c403fcc 	andi	r17,r17,255
    c65c:	8c40201c 	xori	r17,r17,128
    c660:	8c7fe004 	addi	r17,r17,-128
    c664:	84000044 	addi	r16,r16,1
    c668:	a8eab03a 	or	r21,r21,r3
    c66c:	883ff316 	blt	r17,zero,c63c <__alt_data_end+0xfc00c63c>
    c670:	94403fcc 	andi	r17,r18,255
    c674:	8c7fffc4 	addi	r17,r17,-1
    c678:	8463883a 	add	r17,r16,r17
    c67c:	ad4000c4 	addi	r21,r21,3
    c680:	00bfff04 	movi	r2,-4
    c684:	ac21883a 	add	r16,r21,r16
    c688:	017ffe44 	movi	r5,-7
    c68c:	8809883a 	mov	r4,r17
    c690:	80a0703a 	and	r16,r16,r2
    c694:	000d8e00 	call	d8e0 <__mulsi3>
    c698:	0025883a 	mov	r18,zero
    c69c:	102f883a 	mov	r23,r2
    c6a0:	8d800003 	ldbu	r22,0(r17)
    c6a4:	8809883a 	mov	r4,r17
    c6a8:	014001c4 	movi	r5,7
    c6ac:	000d8e00 	call	d8e0 <__mulsi3>
    c6b0:	b0c01fcc 	andi	r3,r22,127
    c6b4:	15c5883a 	add	r2,r2,r23
    c6b8:	1886983a 	sll	r3,r3,r2
    c6bc:	b5803fcc 	andi	r22,r22,255
    c6c0:	b580201c 	xori	r22,r22,128
    c6c4:	8d400044 	addi	r21,r17,1
    c6c8:	b5bfe004 	addi	r22,r22,-128
    c6cc:	90e4b03a 	or	r18,r18,r3
    c6d0:	a823883a 	mov	r17,r21
    c6d4:	b03ff216 	blt	r22,zero,c6a0 <__alt_data_end+0xfc00c6a0>
    c6d8:	9cc03fcc 	andi	r19,r19,255
    c6dc:	90002426 	beq	r18,zero,c770 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    c6e0:	9809883a 	mov	r4,r19
    c6e4:	000c0280 	call	c028 <_ZL21size_of_encoded_valueh>
    c6e8:	100b883a 	mov	r5,r2
    c6ec:	913fffc4 	addi	r4,r18,-1
    c6f0:	000d8e00 	call	d8e0 <__mulsi3>
    c6f4:	d9400d17 	ldw	r5,52(sp)
    c6f8:	d80f883a 	mov	r7,sp
    c6fc:	9809883a 	mov	r4,r19
    c700:	140d883a 	add	r6,r2,r16
    c704:	000c0cc0 	call	c0cc <_ZL28read_encoded_value_with_basehjPKhPj>
    c708:	d9000017 	ldw	r4,0(sp)
    c70c:	d9800204 	addi	r6,sp,8
    c710:	a00b883a 	mov	r5,r20
    c714:	000c4ec0 	call	c4ec <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c718:	10c03fcc 	andi	r3,r2,255
    c71c:	1800151e 	bne	r3,zero,c774 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    c720:	a809883a 	mov	r4,r21
    c724:	017ffe44 	movi	r5,-7
    c728:	000d8e00 	call	d8e0 <__mulsi3>
    c72c:	102d883a 	mov	r22,r2
    c730:	a809883a 	mov	r4,r21
    c734:	0025883a 	mov	r18,zero
    c738:	24400003 	ldbu	r17,0(r4)
    c73c:	014001c4 	movi	r5,7
    c740:	000d8e00 	call	d8e0 <__mulsi3>
    c744:	88c01fcc 	andi	r3,r17,127
    c748:	1585883a 	add	r2,r2,r22
    c74c:	1886983a 	sll	r3,r3,r2
    c750:	8c403fcc 	andi	r17,r17,255
    c754:	8c40201c 	xori	r17,r17,128
    c758:	ad400044 	addi	r21,r21,1
    c75c:	8c7fe004 	addi	r17,r17,-128
    c760:	90e4b03a 	or	r18,r18,r3
    c764:	a809883a 	mov	r4,r21
    c768:	883ff316 	blt	r17,zero,c738 <__alt_data_end+0xfc00c738>
    c76c:	003fdb06 	br	c6dc <__alt_data_end+0xfc00c6dc>
    c770:	0005883a 	mov	r2,zero
    c774:	dfc00c17 	ldw	ra,48(sp)
    c778:	ddc00b17 	ldw	r23,44(sp)
    c77c:	dd800a17 	ldw	r22,40(sp)
    c780:	dd400917 	ldw	r21,36(sp)
    c784:	dd000817 	ldw	r20,32(sp)
    c788:	dcc00717 	ldw	r19,28(sp)
    c78c:	dc800617 	ldw	r18,24(sp)
    c790:	dc400517 	ldw	r17,20(sp)
    c794:	dc000417 	ldw	r16,16(sp)
    c798:	dec00d04 	addi	sp,sp,52
    c79c:	f800283a 	ret

0000c7a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    c7a0:	defffb04 	addi	sp,sp,-20
    c7a4:	dc000115 	stw	r16,4(sp)
    c7a8:	24000317 	ldw	r16,12(r4)
    c7ac:	01ce303a 	nor	r7,zero,r7
    c7b0:	dc800315 	stw	r18,12(sp)
    c7b4:	dc400215 	stw	r17,8(sp)
    c7b8:	dfc00415 	stw	ra,16(sp)
    c7bc:	2023883a 	mov	r17,r4
    c7c0:	2825883a 	mov	r18,r5
    c7c4:	d9800015 	stw	r6,0(sp)
    c7c8:	81e1883a 	add	r16,r16,r7
    c7cc:	800d883a 	mov	r6,r16
    c7d0:	000b883a 	mov	r5,zero
    c7d4:	0009883a 	mov	r4,zero
    c7d8:	30800003 	ldbu	r2,0(r6)
    c7dc:	84000044 	addi	r16,r16,1
    c7e0:	800d883a 	mov	r6,r16
    c7e4:	10c01fcc 	andi	r3,r2,127
    c7e8:	1906983a 	sll	r3,r3,r4
    c7ec:	10803fcc 	andi	r2,r2,255
    c7f0:	1080201c 	xori	r2,r2,128
    c7f4:	10bfe004 	addi	r2,r2,-128
    c7f8:	28cab03a 	or	r5,r5,r3
    c7fc:	210001c4 	addi	r4,r4,7
    c800:	103ff516 	blt	r2,zero,c7d8 <__alt_data_end+0xfc00c7d8>
    c804:	28000e26 	beq	r5,zero,c840 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    c808:	8809883a 	mov	r4,r17
    c80c:	000c2d80 	call	c2d8 <_ZL15get_ttype_entryP16lsda_header_infom>
    c810:	d80d883a 	mov	r6,sp
    c814:	900b883a 	mov	r5,r18
    c818:	1009883a 	mov	r4,r2
    c81c:	000c4ec0 	call	c4ec <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c820:	10c03fcc 	andi	r3,r2,255
    c824:	183fe926 	beq	r3,zero,c7cc <__alt_data_end+0xfc00c7cc>
    c828:	dfc00417 	ldw	ra,16(sp)
    c82c:	dc800317 	ldw	r18,12(sp)
    c830:	dc400217 	ldw	r17,8(sp)
    c834:	dc000117 	ldw	r16,4(sp)
    c838:	dec00504 	addi	sp,sp,20
    c83c:	f800283a 	ret
    c840:	0005883a 	mov	r2,zero
    c844:	003ff806 	br	c828 <__alt_data_end+0xfc00c828>

0000c848 <__gxx_personality_sj0>:
    c848:	00800074 	movhi	r2,1
    c84c:	deffdd04 	addi	sp,sp,-140
    c850:	10b21204 	addi	r2,r2,-14264
    c854:	d8800e15 	stw	r2,56(sp)
    c858:	008000b4 	movhi	r2,2
    c85c:	1092c204 	addi	r2,r2,19208
    c860:	d8800f15 	stw	r2,60(sp)
    c864:	00800074 	movhi	r2,1
    c868:	10b38804 	addi	r2,r2,-12768
    c86c:	d9001515 	stw	r4,84(sp)
    c870:	d9000804 	addi	r4,sp,32
    c874:	d8801115 	stw	r2,68(sp)
    c878:	dfc02215 	stw	ra,136(sp)
    c87c:	df002115 	stw	fp,132(sp)
    c880:	dec01015 	stw	sp,64(sp)
    c884:	dec01215 	stw	sp,72(sp)
    c888:	d9401915 	stw	r5,100(sp)
    c88c:	d9801615 	stw	r6,88(sp)
    c890:	d9c01715 	stw	r7,92(sp)
    c894:	000f06c0 	call	f06c <_Unwind_SjLj_Register>
    c898:	d8c01517 	ldw	r3,84(sp)
    c89c:	d8000715 	stw	zero,28(sp)
    c8a0:	d8000615 	stw	zero,24(sp)
    c8a4:	00800044 	movi	r2,1
    c8a8:	18800926 	beq	r3,r2,c8d0 <__gxx_personality_sj0+0x88>
    c8ac:	01c000c4 	movi	r7,3
    c8b0:	d9c01515 	stw	r7,84(sp)
    c8b4:	d9000804 	addi	r4,sp,32
    c8b8:	000f0840 	call	f084 <_Unwind_SjLj_Unregister>
    c8bc:	d8801517 	ldw	r2,84(sp)
    c8c0:	dfc02217 	ldw	ra,136(sp)
    c8c4:	df002117 	ldw	fp,132(sp)
    c8c8:	dec02304 	addi	sp,sp,140
    c8cc:	f800283a 	ret
    c8d0:	d9001617 	ldw	r4,88(sp)
    c8d4:	00af3574 	movhi	r2,48341
    c8d8:	d9c01717 	ldw	r7,92(sp)
    c8dc:	10b54004 	addi	r2,r2,-11008
    c8e0:	00ee2cb4 	movhi	r3,47282
    c8e4:	2085883a 	add	r2,r4,r2
    c8e8:	18eaaf04 	addi	r3,r3,-21828
    c8ec:	d8801b15 	stw	r2,108(sp)
    c8f0:	38c7883a 	add	r3,r7,r3
    c8f4:	1105803a 	cmpltu	r2,r2,r4
    c8f8:	10c7883a 	add	r3,r2,r3
    c8fc:	d8c01c15 	stw	r3,112(sp)
    c900:	d8c01917 	ldw	r3,100(sp)
    c904:	00800184 	movi	r2,6
    c908:	18805426 	beq	r3,r2,ca5c <__gxx_personality_sj0+0x214>
    c90c:	d9002417 	ldw	r4,144(sp)
    c910:	00bfffc4 	movi	r2,-1
    c914:	d8800915 	stw	r2,36(sp)
    c918:	000f1280 	call	f128 <_Unwind_GetLanguageSpecificData>
    c91c:	d8801a15 	stw	r2,104(sp)
    c920:	1000c926 	beq	r2,zero,cc48 <__gxx_personality_sj0+0x400>
    c924:	d9002417 	ldw	r4,144(sp)
    c928:	d80d883a 	mov	r6,sp
    c92c:	100b883a 	mov	r5,r2
    c930:	000c3b80 	call	c3b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c934:	d9402417 	ldw	r5,144(sp)
    c938:	d9000503 	ldbu	r4,20(sp)
    c93c:	d8801515 	stw	r2,84(sp)
    c940:	000c32c0 	call	c32c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c944:	d9002417 	ldw	r4,144(sp)
    c948:	d9400604 	addi	r5,sp,24
    c94c:	d8800215 	stw	r2,8(sp)
    c950:	000f0f80 	call	f0f8 <_Unwind_GetIPInfo>
    c954:	d8c00617 	ldw	r3,24(sp)
    c958:	18006126 	beq	r3,zero,cae0 <__gxx_personality_sj0+0x298>
    c95c:	1000ba16 	blt	r2,zero,cc48 <__gxx_personality_sj0+0x400>
    c960:	10002f1e 	bne	r2,zero,ca20 <__gxx_personality_sj0+0x1d8>
    c964:	d8001515 	stw	zero,84(sp)
    c968:	d8001f15 	stw	zero,124(sp)
    c96c:	d8001815 	stw	zero,96(sp)
    c970:	00c00044 	movi	r3,1
    c974:	d9001917 	ldw	r4,100(sp)
    c978:	2080004c 	andi	r2,r4,1
    c97c:	1000b51e 	bne	r2,zero,cc54 <__gxx_personality_sj0+0x40c>
    c980:	d9001917 	ldw	r4,100(sp)
    c984:	2080020c 	andi	r2,r4,8
    c988:	1000b71e 	bne	r2,zero,cc68 <__gxx_personality_sj0+0x420>
    c98c:	d9c01c17 	ldw	r7,112(sp)
    c990:	3800b826 	beq	r7,zero,cc74 <__gxx_personality_sj0+0x42c>
    c994:	00800044 	movi	r2,1
    c998:	1880b526 	beq	r3,r2,cc70 <__gxx_personality_sj0+0x428>
    c99c:	d9c01517 	ldw	r7,84(sp)
    c9a0:	3800f516 	blt	r7,zero,cd78 <__gxx_personality_sj0+0x530>
    c9a4:	d9002417 	ldw	r4,144(sp)
    c9a8:	d9802317 	ldw	r6,140(sp)
    c9ac:	00bfffc4 	movi	r2,-1
    c9b0:	000b883a 	mov	r5,zero
    c9b4:	d8800915 	stw	r2,36(sp)
    c9b8:	000f0cc0 	call	f0cc <_Unwind_SetGR>
    c9bc:	d9801517 	ldw	r6,84(sp)
    c9c0:	d9002417 	ldw	r4,144(sp)
    c9c4:	01400044 	movi	r5,1
    c9c8:	000f0cc0 	call	f0cc <_Unwind_SetGR>
    c9cc:	d9002417 	ldw	r4,144(sp)
    c9d0:	d9401f17 	ldw	r5,124(sp)
    c9d4:	000f1180 	call	f118 <_Unwind_SetIP>
    c9d8:	010001c4 	movi	r4,7
    c9dc:	d9001515 	stw	r4,84(sp)
    c9e0:	003fb406 	br	c8b4 <__alt_data_end+0xfc00c8b4>
    c9e4:	000f883a 	mov	r7,zero
    c9e8:	000d883a 	mov	r6,zero
    c9ec:	19000003 	ldbu	r4,0(r3)
    c9f0:	18c00044 	addi	r3,r3,1
    c9f4:	d8c01515 	stw	r3,84(sp)
    c9f8:	21401fcc 	andi	r5,r4,127
    c9fc:	298a983a 	sll	r5,r5,r6
    ca00:	21003fcc 	andi	r4,r4,255
    ca04:	2100201c 	xori	r4,r4,128
    ca08:	213fe004 	addi	r4,r4,-128
    ca0c:	394eb03a 	or	r7,r7,r5
    ca10:	318001c4 	addi	r6,r6,7
    ca14:	203ff516 	blt	r4,zero,c9ec <__alt_data_end+0xfc00c9ec>
    ca18:	10bfffc4 	addi	r2,r2,-1
    ca1c:	10003226 	beq	r2,zero,cae8 <__gxx_personality_sj0+0x2a0>
    ca20:	d9c01517 	ldw	r7,84(sp)
    ca24:	0011883a 	mov	r8,zero
    ca28:	000d883a 	mov	r6,zero
    ca2c:	39000003 	ldbu	r4,0(r7)
    ca30:	38c00044 	addi	r3,r7,1
    ca34:	180f883a 	mov	r7,r3
    ca38:	21401fcc 	andi	r5,r4,127
    ca3c:	298a983a 	sll	r5,r5,r6
    ca40:	21003fcc 	andi	r4,r4,255
    ca44:	2100201c 	xori	r4,r4,128
    ca48:	213fe004 	addi	r4,r4,-128
    ca4c:	4150b03a 	or	r8,r8,r5
    ca50:	318001c4 	addi	r6,r6,7
    ca54:	203ff516 	blt	r4,zero,ca2c <__alt_data_end+0xfc00ca2c>
    ca58:	003fe206 	br	c9e4 <__alt_data_end+0xfc00c9e4>
    ca5c:	d9001c17 	ldw	r4,112(sp)
    ca60:	203faa1e 	bne	r4,zero,c90c <__alt_data_end+0xfc00c90c>
    ca64:	d9c01517 	ldw	r7,84(sp)
    ca68:	d8801b17 	ldw	r2,108(sp)
    ca6c:	38bfa736 	bltu	r7,r2,c90c <__alt_data_end+0xfc00c90c>
    ca70:	d8c02317 	ldw	r3,140(sp)
    ca74:	18fffe17 	ldw	r3,-8(r3)
    ca78:	d8c01f15 	stw	r3,124(sp)
    ca7c:	18008226 	beq	r3,zero,cc88 <__gxx_personality_sj0+0x440>
    ca80:	d9002317 	ldw	r4,140(sp)
    ca84:	d9c02317 	ldw	r7,140(sp)
    ca88:	213ffb17 	ldw	r4,-20(r4)
    ca8c:	39fffd17 	ldw	r7,-12(r7)
    ca90:	d9001515 	stw	r4,84(sp)
    ca94:	d9c01a15 	stw	r7,104(sp)
    ca98:	d8801517 	ldw	r2,84(sp)
    ca9c:	103fc10e 	bge	r2,zero,c9a4 <__alt_data_end+0xfc00c9a4>
    caa0:	d9002417 	ldw	r4,144(sp)
    caa4:	d9401a17 	ldw	r5,104(sp)
    caa8:	d80d883a 	mov	r6,sp
    caac:	00bfffc4 	movi	r2,-1
    cab0:	d8800915 	stw	r2,36(sp)
    cab4:	000c3b80 	call	c3b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    cab8:	d9402417 	ldw	r5,144(sp)
    cabc:	d9000503 	ldbu	r4,20(sp)
    cac0:	000c32c0 	call	c32c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    cac4:	d9000503 	ldbu	r4,20(sp)
    cac8:	d9402417 	ldw	r5,144(sp)
    cacc:	d8800215 	stw	r2,8(sp)
    cad0:	000c32c0 	call	c32c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    cad4:	d8c02317 	ldw	r3,140(sp)
    cad8:	18bffe15 	stw	r2,-8(r3)
    cadc:	003fb106 	br	c9a4 <__alt_data_end+0xfc00c9a4>
    cae0:	10bfffc4 	addi	r2,r2,-1
    cae4:	003f9d06 	br	c95c <__alt_data_end+0xfc00c95c>
    cae8:	42000044 	addi	r8,r8,1
    caec:	da001f15 	stw	r8,124(sp)
    caf0:	38005326 	beq	r7,zero,cc40 <__gxx_personality_sj0+0x3f8>
    caf4:	d8800417 	ldw	r2,16(sp)
    caf8:	39ffffc4 	addi	r7,r7,-1
    cafc:	11c5883a 	add	r2,r2,r7
    cb00:	d8801815 	stw	r2,96(sp)
    cb04:	40005026 	beq	r8,zero,cc48 <__gxx_personality_sj0+0x400>
    cb08:	10007426 	beq	r2,zero,ccdc <__gxx_personality_sj0+0x494>
    cb0c:	d8801917 	ldw	r2,100(sp)
    cb10:	1080020c 	andi	r2,r2,8
    cb14:	d8802015 	stw	r2,128(sp)
    cb18:	1000a21e 	bne	r2,zero,cda4 <__gxx_personality_sj0+0x55c>
    cb1c:	d8c01c17 	ldw	r3,112(sp)
    cb20:	1800b026 	beq	r3,zero,cde4 <__gxx_personality_sj0+0x59c>
    cb24:	01c000f4 	movhi	r7,3
    cb28:	39fb3904 	addi	r7,r7,-4892
    cb2c:	d9c01e15 	stw	r7,120(sp)
    cb30:	d8001d05 	stb	zero,116(sp)
    cb34:	d8c01817 	ldw	r3,96(sp)
    cb38:	d8001515 	stw	zero,84(sp)
    cb3c:	0009883a 	mov	r4,zero
    cb40:	19400003 	ldbu	r5,0(r3)
    cb44:	18800044 	addi	r2,r3,1
    cb48:	d9c01517 	ldw	r7,84(sp)
    cb4c:	28c01fcc 	andi	r3,r5,127
    cb50:	1906983a 	sll	r3,r3,r4
    cb54:	29803fcc 	andi	r6,r5,255
    cb58:	3180201c 	xori	r6,r6,128
    cb5c:	38ceb03a 	or	r7,r7,r3
    cb60:	d8801715 	stw	r2,92(sp)
    cb64:	31bfe004 	addi	r6,r6,-128
    cb68:	d9c01515 	stw	r7,84(sp)
    cb6c:	210001c4 	addi	r4,r4,7
    cb70:	1007883a 	mov	r3,r2
    cb74:	303ff216 	blt	r6,zero,cb40 <__alt_data_end+0xfc00cb40>
    cb78:	00c007c4 	movi	r3,31
    cb7c:	19000836 	bltu	r3,r4,cba0 <__gxx_personality_sj0+0x358>
    cb80:	2940100c 	andi	r5,r5,64
    cb84:	28000626 	beq	r5,zero,cba0 <__gxx_personality_sj0+0x358>
    cb88:	01c00044 	movi	r7,1
    cb8c:	3908983a 	sll	r4,r7,r4
    cb90:	d8c01517 	ldw	r3,84(sp)
    cb94:	0109c83a 	sub	r4,zero,r4
    cb98:	1906b03a 	or	r3,r3,r4
    cb9c:	d8c01515 	stw	r3,84(sp)
    cba0:	d8001615 	stw	zero,88(sp)
    cba4:	0009883a 	mov	r4,zero
    cba8:	11400003 	ldbu	r5,0(r2)
    cbac:	d9c01617 	ldw	r7,88(sp)
    cbb0:	10800044 	addi	r2,r2,1
    cbb4:	28c01fcc 	andi	r3,r5,127
    cbb8:	1906983a 	sll	r3,r3,r4
    cbbc:	29803fcc 	andi	r6,r5,255
    cbc0:	3180201c 	xori	r6,r6,128
    cbc4:	38ceb03a 	or	r7,r7,r3
    cbc8:	31bfe004 	addi	r6,r6,-128
    cbcc:	d9c01615 	stw	r7,88(sp)
    cbd0:	210001c4 	addi	r4,r4,7
    cbd4:	303ff416 	blt	r6,zero,cba8 <__alt_data_end+0xfc00cba8>
    cbd8:	008007c4 	movi	r2,31
    cbdc:	11000736 	bltu	r2,r4,cbfc <__gxx_personality_sj0+0x3b4>
    cbe0:	2940100c 	andi	r5,r5,64
    cbe4:	28000526 	beq	r5,zero,cbfc <__gxx_personality_sj0+0x3b4>
    cbe8:	00c00044 	movi	r3,1
    cbec:	1908983a 	sll	r4,r3,r4
    cbf0:	0109c83a 	sub	r4,zero,r4
    cbf4:	390eb03a 	or	r7,r7,r4
    cbf8:	d9c01615 	stw	r7,88(sp)
    cbfc:	d9001517 	ldw	r4,84(sp)
    cc00:	20003c26 	beq	r4,zero,ccf4 <__gxx_personality_sj0+0x4ac>
    cc04:	01003e0e 	bge	zero,r4,cd00 <__gxx_personality_sj0+0x4b8>
    cc08:	01ffffc4 	movi	r7,-1
    cc0c:	200b883a 	mov	r5,r4
    cc10:	d809883a 	mov	r4,sp
    cc14:	d9c00915 	stw	r7,36(sp)
    cc18:	000c2d80 	call	c2d8 <_ZL15get_ttype_entryP16lsda_header_infom>
    cc1c:	10005f26 	beq	r2,zero,cd9c <__gxx_personality_sj0+0x554>
    cc20:	d8c01e17 	ldw	r3,120(sp)
    cc24:	1800571e 	bne	r3,zero,cd84 <__gxx_personality_sj0+0x53c>
    cc28:	d9001617 	ldw	r4,88(sp)
    cc2c:	20002926 	beq	r4,zero,ccd4 <__gxx_personality_sj0+0x48c>
    cc30:	d9c01717 	ldw	r7,92(sp)
    cc34:	390f883a 	add	r7,r7,r4
    cc38:	d9c01815 	stw	r7,96(sp)
    cc3c:	003fbd06 	br	cb34 <__alt_data_end+0xfc00cb34>
    cc40:	d8c01f17 	ldw	r3,124(sp)
    cc44:	1800251e 	bne	r3,zero,ccdc <__gxx_personality_sj0+0x494>
    cc48:	01000204 	movi	r4,8
    cc4c:	d9001515 	stw	r4,84(sp)
    cc50:	003f1806 	br	c8b4 <__alt_data_end+0xfc00c8b4>
    cc54:	d8801c17 	ldw	r2,112(sp)
    cc58:	10000d26 	beq	r2,zero,cc90 <__gxx_personality_sj0+0x448>
    cc5c:	00800184 	movi	r2,6
    cc60:	d8801515 	stw	r2,84(sp)
    cc64:	003f1306 	br	c8b4 <__alt_data_end+0xfc00c8b4>
    cc68:	00800044 	movi	r2,1
    cc6c:	18bf4d1e 	bne	r3,r2,c9a4 <__alt_data_end+0xfc00c9a4>
    cc70:	000bfa00 	call	bfa0 <_ZSt9terminatev>
    cc74:	d9001b17 	ldw	r4,108(sp)
    cc78:	00800044 	movi	r2,1
    cc7c:	113f4536 	bltu	r2,r4,c994 <__alt_data_end+0xfc00c994>
    cc80:	00800044 	movi	r2,1
    cc84:	18bf841e 	bne	r3,r2,ca98 <__alt_data_end+0xfc00ca98>
    cc88:	d9002317 	ldw	r4,140(sp)
    cc8c:	000d6240 	call	d624 <__cxa_call_terminate>
    cc90:	d8c01b17 	ldw	r3,108(sp)
    cc94:	00800044 	movi	r2,1
    cc98:	10fff036 	bltu	r2,r3,cc5c <__alt_data_end+0xfc00cc5c>
    cc9c:	d9002317 	ldw	r4,140(sp)
    cca0:	d8801817 	ldw	r2,96(sp)
    cca4:	d9c01517 	ldw	r7,84(sp)
    cca8:	d8c01a17 	ldw	r3,104(sp)
    ccac:	20bffc15 	stw	r2,-16(r4)
    ccb0:	d8800717 	ldw	r2,28(sp)
    ccb4:	21fffb15 	stw	r7,-20(r4)
    ccb8:	d9c01f17 	ldw	r7,124(sp)
    ccbc:	20bfff15 	stw	r2,-4(r4)
    ccc0:	00800184 	movi	r2,6
    ccc4:	20fffd15 	stw	r3,-12(r4)
    ccc8:	21fffe15 	stw	r7,-8(r4)
    cccc:	d8801515 	stw	r2,84(sp)
    ccd0:	003ef806 	br	c8b4 <__alt_data_end+0xfc00c8b4>
    ccd4:	d8801d03 	ldbu	r2,116(sp)
    ccd8:	103fdb26 	beq	r2,zero,cc48 <__alt_data_end+0xfc00cc48>
    ccdc:	d8c01917 	ldw	r3,100(sp)
    cce0:	1880004c 	andi	r2,r3,1
    cce4:	103fd81e 	bne	r2,zero,cc48 <__alt_data_end+0xfc00cc48>
    cce8:	d8001515 	stw	zero,84(sp)
    ccec:	00c00084 	movi	r3,2
    ccf0:	003f2306 	br	c980 <__alt_data_end+0xfc00c980>
    ccf4:	00c00044 	movi	r3,1
    ccf8:	d8c01d05 	stb	r3,116(sp)
    ccfc:	003fca06 	br	cc28 <__alt_data_end+0xfc00cc28>
    cd00:	d9001e17 	ldw	r4,120(sp)
    cd04:	20000426 	beq	r4,zero,cd18 <__gxx_personality_sj0+0x4d0>
    cd08:	d9c02017 	ldw	r7,128(sp)
    cd0c:	3800021e 	bne	r7,zero,cd18 <__gxx_personality_sj0+0x4d0>
    cd10:	d8801c17 	ldw	r2,112(sp)
    cd14:	10002726 	beq	r2,zero,cdb4 <__gxx_personality_sj0+0x56c>
    cd18:	d8801517 	ldw	r2,84(sp)
    cd1c:	000d883a 	mov	r6,zero
    cd20:	000b883a 	mov	r5,zero
    cd24:	0088303a 	nor	r4,zero,r2
    cd28:	d8800317 	ldw	r2,12(sp)
    cd2c:	1109883a 	add	r4,r2,r4
    cd30:	20800003 	ldbu	r2,0(r4)
    cd34:	21000044 	addi	r4,r4,1
    cd38:	10c01fcc 	andi	r3,r2,127
    cd3c:	1946983a 	sll	r3,r3,r5
    cd40:	10803fcc 	andi	r2,r2,255
    cd44:	1080201c 	xori	r2,r2,128
    cd48:	10bfe004 	addi	r2,r2,-128
    cd4c:	30ccb03a 	or	r6,r6,r3
    cd50:	294001c4 	addi	r5,r5,7
    cd54:	103ff616 	blt	r2,zero,cd30 <__alt_data_end+0xfc00cd30>
    cd58:	3005003a 	cmpeq	r2,r6,zero
    cd5c:	10803fcc 	andi	r2,r2,255
    cd60:	103fb126 	beq	r2,zero,cc28 <__alt_data_end+0xfc00cc28>
    cd64:	d9c01917 	ldw	r7,100(sp)
    cd68:	3880004c 	andi	r2,r7,1
    cd6c:	103fb91e 	bne	r2,zero,cc54 <__alt_data_end+0xfc00cc54>
    cd70:	d8802017 	ldw	r2,128(sp)
    cd74:	10002d26 	beq	r2,zero,ce2c <__gxx_personality_sj0+0x5e4>
    cd78:	00800044 	movi	r2,1
    cd7c:	d8800915 	stw	r2,36(sp)
    cd80:	000bfc80 	call	bfc8 <_ZSt10unexpectedv>
    cd84:	d9800704 	addi	r6,sp,28
    cd88:	180b883a 	mov	r5,r3
    cd8c:	1009883a 	mov	r4,r2
    cd90:	000c4ec0 	call	c4ec <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    cd94:	10803fcc 	andi	r2,r2,255
    cd98:	103fa326 	beq	r2,zero,cc28 <__alt_data_end+0xfc00cc28>
    cd9c:	00c000c4 	movi	r3,3
    cda0:	003ef406 	br	c974 <__alt_data_end+0xfc00c974>
    cda4:	010000f4 	movhi	r4,3
    cda8:	213b3704 	addi	r4,r4,-4900
    cdac:	d9001e15 	stw	r4,120(sp)
    cdb0:	003f5f06 	br	cb30 <__alt_data_end+0xfc00cb30>
    cdb4:	d9001b17 	ldw	r4,108(sp)
    cdb8:	00c00044 	movi	r3,1
    cdbc:	193fd636 	bltu	r3,r4,cd18 <__alt_data_end+0xfc00cd18>
    cdc0:	01ffffc4 	movi	r7,-1
    cdc4:	d9c00915 	stw	r7,36(sp)
    cdc8:	d9800717 	ldw	r6,28(sp)
    cdcc:	d9c01517 	ldw	r7,84(sp)
    cdd0:	d9401e17 	ldw	r5,120(sp)
    cdd4:	d809883a 	mov	r4,sp
    cdd8:	000c7a00 	call	c7a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    cddc:	1080005c 	xori	r2,r2,1
    cde0:	003fde06 	br	cd5c <__alt_data_end+0xfc00cd5c>
    cde4:	d9001b17 	ldw	r4,108(sp)
    cde8:	00800044 	movi	r2,1
    cdec:	113f4d36 	bltu	r2,r4,cb24 <__alt_data_end+0xfc00cb24>
    cdf0:	d9c02317 	ldw	r7,140(sp)
    cdf4:	38800017 	ldw	r2,0(r7)
    cdf8:	1080004c 	andi	r2,r2,1
    cdfc:	1000061e 	bne	r2,zero,ce18 <__gxx_personality_sj0+0x5d0>
    ce00:	d8c02317 	ldw	r3,140(sp)
    ce04:	18800504 	addi	r2,r3,20
    ce08:	d8800715 	stw	r2,28(sp)
    ce0c:	10bff017 	ldw	r2,-64(r2)
    ce10:	d8801e15 	stw	r2,120(sp)
    ce14:	003f4606 	br	cb30 <__alt_data_end+0xfc00cb30>
    ce18:	38bff517 	ldw	r2,-44(r7)
    ce1c:	003ffa06 	br	ce08 <__alt_data_end+0xfc00ce08>
    ce20:	d9000a17 	ldw	r4,40(sp)
    ce24:	000d1d80 	call	d1d8 <__cxa_begin_catch>
    ce28:	003f9106 	br	cc70 <__alt_data_end+0xfc00cc70>
    ce2c:	d9c01c17 	ldw	r7,112(sp)
    ce30:	383eda1e 	bne	r7,zero,c99c <__alt_data_end+0xfc00c99c>
    ce34:	d8c01b17 	ldw	r3,108(sp)
    ce38:	00800044 	movi	r2,1
    ce3c:	10fed736 	bltu	r2,r3,c99c <__alt_data_end+0xfc00c99c>
    ce40:	00c000c4 	movi	r3,3
    ce44:	003f8e06 	br	cc80 <__alt_data_end+0xfc00cc80>

0000ce48 <__cxa_call_unexpected>:
    ce48:	00800074 	movhi	r2,1
    ce4c:	deffe604 	addi	sp,sp,-104
    ce50:	10b21204 	addi	r2,r2,-14264
    ce54:	d8800d15 	stw	r2,52(sp)
    ce58:	008000b4 	movhi	r2,2
    ce5c:	1092c604 	addi	r2,r2,19224
    ce60:	d8800e15 	stw	r2,56(sp)
    ce64:	d8800104 	addi	r2,sp,4
    ce68:	d8800f15 	stw	r2,60(sp)
    ce6c:	00800074 	movhi	r2,1
    ce70:	10b3b504 	addi	r2,r2,-12588
    ce74:	d9001415 	stw	r4,80(sp)
    ce78:	d9000704 	addi	r4,sp,28
    ce7c:	dfc01915 	stw	ra,100(sp)
    ce80:	d8801015 	stw	r2,64(sp)
    ce84:	df001815 	stw	fp,96(sp)
    ce88:	dec01115 	stw	sp,68(sp)
    ce8c:	000f06c0 	call	f06c <_Unwind_SjLj_Register>
    ce90:	d9001417 	ldw	r4,80(sp)
    ce94:	000d1d80 	call	d1d8 <__cxa_begin_catch>
    ce98:	d8c01417 	ldw	r3,80(sp)
    ce9c:	18bffe17 	ldw	r2,-8(r3)
    cea0:	193ff717 	ldw	r4,-36(r3)
    cea4:	18fffd17 	ldw	r3,-12(r3)
    cea8:	d8800315 	stw	r2,12(sp)
    ceac:	d8c01615 	stw	r3,88(sp)
    ceb0:	d8c01417 	ldw	r3,80(sp)
    ceb4:	18fffb17 	ldw	r3,-20(r3)
    ceb8:	d8c01515 	stw	r3,84(sp)
    cebc:	d8c01417 	ldw	r3,80(sp)
    cec0:	18fff817 	ldw	r3,-32(r3)
    cec4:	d8c01415 	stw	r3,80(sp)
    cec8:	00c00044 	movi	r3,1
    cecc:	d8c00815 	stw	r3,32(sp)
    ced0:	000bfb80 	call	bfb8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    ced4:	d8c00917 	ldw	r3,36(sp)
    ced8:	d8800817 	ldw	r2,32(sp)
    cedc:	d8c01715 	stw	r3,92(sp)
    cee0:	10000a26 	beq	r2,zero,cf0c <__cxa_call_unexpected+0xc4>
    cee4:	10bfffc4 	addi	r2,r2,-1
    cee8:	10000126 	beq	r2,zero,cef0 <__cxa_call_unexpected+0xa8>
    ceec:	003b68fa 	trap	3
    cef0:	d8000815 	stw	zero,32(sp)
    cef4:	000d28c0 	call	d28c <__cxa_end_catch>
    cef8:	000d28c0 	call	d28c <__cxa_end_catch>
    cefc:	d9001717 	ldw	r4,92(sp)
    cf00:	00bfffc4 	movi	r2,-1
    cf04:	d8800815 	stw	r2,32(sp)
    cf08:	000f2680 	call	f268 <_Unwind_SjLj_Resume>
    cf0c:	d9001717 	ldw	r4,92(sp)
    cf10:	000d1d80 	call	d1d8 <__cxa_begin_catch>
    cf14:	000d67c0 	call	d67c <__cxa_get_globals_fast>
    cf18:	10800017 	ldw	r2,0(r2)
    cf1c:	10c00b17 	ldw	r3,44(r2)
    cf20:	18c0004c 	andi	r3,r3,1
    cf24:	18001e26 	beq	r3,zero,cfa0 <__cxa_call_unexpected+0x158>
    cf28:	10800017 	ldw	r2,0(r2)
    cf2c:	d8801715 	stw	r2,92(sp)
    cf30:	d8801517 	ldw	r2,84(sp)
    cf34:	00802b0e 	bge	zero,r2,cfe4 <__cxa_call_unexpected+0x19c>
    cf38:	d8c01717 	ldw	r3,92(sp)
    cf3c:	d8800317 	ldw	r2,12(sp)
    cf40:	d9c01517 	ldw	r7,84(sp)
    cf44:	193ff017 	ldw	r4,-64(r3)
    cf48:	d9801617 	ldw	r6,88(sp)
    cf4c:	d8800015 	stw	r2,0(sp)
    cf50:	180b883a 	mov	r5,r3
    cf54:	00800084 	movi	r2,2
    cf58:	d8800815 	stw	r2,32(sp)
    cf5c:	000c5740 	call	c574 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    cf60:	10803fcc 	andi	r2,r2,255
    cf64:	10001e1e 	bne	r2,zero,cfe0 <__cxa_call_unexpected+0x198>
    cf68:	d8800317 	ldw	r2,12(sp)
    cf6c:	d9c01517 	ldw	r7,84(sp)
    cf70:	d9801617 	ldw	r6,88(sp)
    cf74:	010000f4 	movhi	r4,3
    cf78:	d8800015 	stw	r2,0(sp)
    cf7c:	212dcd04 	addi	r4,r4,-18636
    cf80:	00800084 	movi	r2,2
    cf84:	000b883a 	mov	r5,zero
    cf88:	d8800815 	stw	r2,32(sp)
    cf8c:	000c5740 	call	c574 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    cf90:	10803fcc 	andi	r2,r2,255
    cf94:	1000051e 	bne	r2,zero,cfac <__cxa_call_unexpected+0x164>
    cf98:	d9001417 	ldw	r4,80(sp)
    cf9c:	000bee00 	call	bee0 <_ZN10__cxxabiv111__terminateEPFvvE>
    cfa0:	10801004 	addi	r2,r2,64
    cfa4:	d8801715 	stw	r2,92(sp)
    cfa8:	003fe106 	br	cf30 <__alt_data_end+0xfc00cf30>
    cfac:	01000104 	movi	r4,4
    cfb0:	000d4c00 	call	d4c0 <__cxa_allocate_exception>
    cfb4:	00c000f4 	movhi	r3,3
    cfb8:	18ede804 	addi	r3,r3,-18528
    cfbc:	01800074 	movhi	r6,1
    cfc0:	014000f4 	movhi	r5,3
    cfc4:	10c00015 	stw	r3,0(r2)
    cfc8:	31b5a604 	addi	r6,r6,-10600
    cfcc:	00c00084 	movi	r3,2
    cfd0:	296dcd04 	addi	r5,r5,-18636
    cfd4:	1009883a 	mov	r4,r2
    cfd8:	d8c00815 	stw	r3,32(sp)
    cfdc:	000d0bc0 	call	d0bc <__cxa_throw>
    cfe0:	000d14c0 	call	d14c <__cxa_rethrow>
    cfe4:	d9401617 	ldw	r5,88(sp)
    cfe8:	00800084 	movi	r2,2
    cfec:	d9800104 	addi	r6,sp,4
    cff0:	0009883a 	mov	r4,zero
    cff4:	d8800815 	stw	r2,32(sp)
    cff8:	000c3b80 	call	c3b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    cffc:	d9801717 	ldw	r6,92(sp)
    d000:	d9c01517 	ldw	r7,84(sp)
    d004:	d9000104 	addi	r4,sp,4
    d008:	317ff017 	ldw	r5,-64(r6)
    d00c:	000c7a00 	call	c7a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    d010:	10803fcc 	andi	r2,r2,255
    d014:	1000171e 	bne	r2,zero,d074 <__cxa_call_unexpected+0x22c>
    d018:	d9c01517 	ldw	r7,84(sp)
    d01c:	014000f4 	movhi	r5,3
    d020:	00800084 	movi	r2,2
    d024:	296dcd04 	addi	r5,r5,-18636
    d028:	000d883a 	mov	r6,zero
    d02c:	d9000104 	addi	r4,sp,4
    d030:	d8800815 	stw	r2,32(sp)
    d034:	000c7a00 	call	c7a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    d038:	10803fcc 	andi	r2,r2,255
    d03c:	103fd626 	beq	r2,zero,cf98 <__alt_data_end+0xfc00cf98>
    d040:	01000104 	movi	r4,4
    d044:	000d4c00 	call	d4c0 <__cxa_allocate_exception>
    d048:	00c000f4 	movhi	r3,3
    d04c:	18ede804 	addi	r3,r3,-18528
    d050:	01800074 	movhi	r6,1
    d054:	014000f4 	movhi	r5,3
    d058:	10c00015 	stw	r3,0(r2)
    d05c:	31b5a604 	addi	r6,r6,-10600
    d060:	00c00084 	movi	r3,2
    d064:	296dcd04 	addi	r5,r5,-18636
    d068:	1009883a 	mov	r4,r2
    d06c:	d8c00815 	stw	r3,32(sp)
    d070:	000d0bc0 	call	d0bc <__cxa_throw>
    d074:	000d14c0 	call	d14c <__cxa_rethrow>

0000d078 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    d078:	defffe04 	addi	sp,sp,-8
    d07c:	dfc00115 	stw	ra,4(sp)
    d080:	dc000015 	stw	r16,0(sp)
    d084:	00800044 	movi	r2,1
    d088:	11000a36 	bltu	r2,r4,d0b4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    d08c:	28bff617 	ldw	r2,-40(r5)
    d090:	2c000504 	addi	r16,r5,20
    d094:	10000226 	beq	r2,zero,d0a0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    d098:	8009883a 	mov	r4,r16
    d09c:	103ee83a 	callr	r2
    d0a0:	8009883a 	mov	r4,r16
    d0a4:	dfc00117 	ldw	ra,4(sp)
    d0a8:	dc000017 	ldw	r16,0(sp)
    d0ac:	dec00204 	addi	sp,sp,8
    d0b0:	000d5201 	jmpi	d520 <__cxa_free_exception>
    d0b4:	293ff817 	ldw	r4,-32(r5)
    d0b8:	000bee00 	call	bee0 <_ZN10__cxxabiv111__terminateEPFvvE>

0000d0bc <__cxa_throw>:
    d0bc:	defffb04 	addi	sp,sp,-20
    d0c0:	dfc00415 	stw	ra,16(sp)
    d0c4:	dcc00315 	stw	r19,12(sp)
    d0c8:	dc800215 	stw	r18,8(sp)
    d0cc:	2827883a 	mov	r19,r5
    d0d0:	3025883a 	mov	r18,r6
    d0d4:	dc400115 	stw	r17,4(sp)
    d0d8:	dc000015 	stw	r16,0(sp)
    d0dc:	2021883a 	mov	r16,r4
    d0e0:	000d6880 	call	d688 <__cxa_get_globals>
    d0e4:	10c00117 	ldw	r3,4(r2)
    d0e8:	847ffb04 	addi	r17,r16,-20
    d0ec:	18c00044 	addi	r3,r3,1
    d0f0:	10c00115 	stw	r3,4(r2)
    d0f4:	00800044 	movi	r2,1
    d0f8:	80bfef15 	stw	r2,-68(r16)
    d0fc:	84fff015 	stw	r19,-64(r16)
    d100:	84bff115 	stw	r18,-60(r16)
    d104:	000c0180 	call	c018 <_ZSt14get_unexpectedv>
    d108:	80bff215 	stw	r2,-56(r16)
    d10c:	000bff40 	call	bff4 <_ZSt13get_terminatev>
    d110:	80bff315 	stw	r2,-52(r16)
    d114:	0090caf4 	movhi	r2,17195
    d118:	108ac004 	addi	r2,r2,11008
    d11c:	80bffb15 	stw	r2,-20(r16)
    d120:	0091d3b4 	movhi	r2,18254
    d124:	109550c4 	addi	r2,r2,21827
    d128:	80bffc15 	stw	r2,-16(r16)
    d12c:	00800074 	movhi	r2,1
    d130:	10b41e04 	addi	r2,r2,-12168
    d134:	8809883a 	mov	r4,r17
    d138:	80bffd15 	stw	r2,-12(r16)
    d13c:	000f1540 	call	f154 <_Unwind_SjLj_RaiseException>
    d140:	8809883a 	mov	r4,r17
    d144:	000d1d80 	call	d1d8 <__cxa_begin_catch>
    d148:	000bfa00 	call	bfa0 <_ZSt9terminatev>

0000d14c <__cxa_rethrow>:
    d14c:	defffe04 	addi	sp,sp,-8
    d150:	dfc00115 	stw	ra,4(sp)
    d154:	dc000015 	stw	r16,0(sp)
    d158:	000d6880 	call	d688 <__cxa_get_globals>
    d15c:	10c00117 	ldw	r3,4(r2)
    d160:	11000017 	ldw	r4,0(r2)
    d164:	18c00044 	addi	r3,r3,1
    d168:	10c00115 	stw	r3,4(r2)
    d16c:	20001126 	beq	r4,zero,d1b4 <__cxa_rethrow+0x68>
    d170:	21400b17 	ldw	r5,44(r4)
    d174:	01ef3574 	movhi	r7,48341
    d178:	39f54004 	addi	r7,r7,-11008
    d17c:	29cf883a 	add	r7,r5,r7
    d180:	20c00c17 	ldw	r3,48(r4)
    d184:	394d803a 	cmpltu	r6,r7,r5
    d188:	016e2cb4 	movhi	r5,47282
    d18c:	296aaf04 	addi	r5,r5,-21828
    d190:	1947883a 	add	r3,r3,r5
    d194:	30c7883a 	add	r3,r6,r3
    d198:	18000726 	beq	r3,zero,d1b8 <__cxa_rethrow+0x6c>
    d19c:	10000015 	stw	zero,0(r2)
    d1a0:	24000b04 	addi	r16,r4,44
    d1a4:	8009883a 	mov	r4,r16
    d1a8:	000f2ac0 	call	f2ac <_Unwind_SjLj_Resume_or_Rethrow>
    d1ac:	8009883a 	mov	r4,r16
    d1b0:	000d1d80 	call	d1d8 <__cxa_begin_catch>
    d1b4:	000bfa00 	call	bfa0 <_ZSt9terminatev>
    d1b8:	00c00044 	movi	r3,1
    d1bc:	19fff736 	bltu	r3,r7,d19c <__alt_data_end+0xfc00d19c>
    d1c0:	20800517 	ldw	r2,20(r4)
    d1c4:	0085c83a 	sub	r2,zero,r2
    d1c8:	20800515 	stw	r2,20(r4)
    d1cc:	003ff406 	br	d1a0 <__alt_data_end+0xfc00d1a0>

0000d1d0 <__cxa_get_exception_ptr>:
    d1d0:	20bfff17 	ldw	r2,-4(r4)
    d1d4:	f800283a 	ret

0000d1d8 <__cxa_begin_catch>:
    d1d8:	defffe04 	addi	sp,sp,-8
    d1dc:	dc000015 	stw	r16,0(sp)
    d1e0:	dfc00115 	stw	ra,4(sp)
    d1e4:	2021883a 	mov	r16,r4
    d1e8:	000d6880 	call	d688 <__cxa_get_globals>
    d1ec:	81000017 	ldw	r4,0(r16)
    d1f0:	80c00117 	ldw	r3,4(r16)
    d1f4:	01af3574 	movhi	r6,48341
    d1f8:	31b54004 	addi	r6,r6,-11008
    d1fc:	016e2cb4 	movhi	r5,47282
    d200:	296aaf04 	addi	r5,r5,-21828
    d204:	218d883a 	add	r6,r4,r6
    d208:	3109803a 	cmpltu	r4,r6,r4
    d20c:	1947883a 	add	r3,r3,r5
    d210:	20c7883a 	add	r3,r4,r3
    d214:	817ff504 	addi	r5,r16,-44
    d218:	11000017 	ldw	r4,0(r2)
    d21c:	18000726 	beq	r3,zero,d23c <__cxa_begin_catch+0x64>
    d220:	2000191e 	bne	r4,zero,d288 <__cxa_begin_catch+0xb0>
    d224:	11400015 	stw	r5,0(r2)
    d228:	0005883a 	mov	r2,zero
    d22c:	dfc00117 	ldw	ra,4(sp)
    d230:	dc000017 	ldw	r16,0(sp)
    d234:	dec00204 	addi	sp,sp,8
    d238:	f800283a 	ret
    d23c:	01c00044 	movi	r7,1
    d240:	39bff736 	bltu	r7,r6,d220 <__alt_data_end+0xfc00d220>
    d244:	80fffa17 	ldw	r3,-24(r16)
    d248:	18000d16 	blt	r3,zero,d280 <__cxa_begin_catch+0xa8>
    d24c:	18c00044 	addi	r3,r3,1
    d250:	11800117 	ldw	r6,4(r2)
    d254:	80fffa15 	stw	r3,-24(r16)
    d258:	30ffffc4 	addi	r3,r6,-1
    d25c:	10c00115 	stw	r3,4(r2)
    d260:	21400226 	beq	r4,r5,d26c <__cxa_begin_catch+0x94>
    d264:	813ff915 	stw	r4,-28(r16)
    d268:	11400015 	stw	r5,0(r2)
    d26c:	80bfff17 	ldw	r2,-4(r16)
    d270:	dfc00117 	ldw	ra,4(sp)
    d274:	dc000017 	ldw	r16,0(sp)
    d278:	dec00204 	addi	sp,sp,8
    d27c:	f800283a 	ret
    d280:	38c7c83a 	sub	r3,r7,r3
    d284:	003ff206 	br	d250 <__alt_data_end+0xfc00d250>
    d288:	000bfa00 	call	bfa0 <_ZSt9terminatev>

0000d28c <__cxa_end_catch>:
    d28c:	deffff04 	addi	sp,sp,-4
    d290:	dfc00015 	stw	ra,0(sp)
    d294:	000d67c0 	call	d67c <__cxa_get_globals_fast>
    d298:	11000017 	ldw	r4,0(r2)
    d29c:	20001426 	beq	r4,zero,d2f0 <__cxa_end_catch+0x64>
    d2a0:	21400b17 	ldw	r5,44(r4)
    d2a4:	01ef3574 	movhi	r7,48341
    d2a8:	39f54004 	addi	r7,r7,-11008
    d2ac:	29cf883a 	add	r7,r5,r7
    d2b0:	20c00c17 	ldw	r3,48(r4)
    d2b4:	394d803a 	cmpltu	r6,r7,r5
    d2b8:	016e2cb4 	movhi	r5,47282
    d2bc:	296aaf04 	addi	r5,r5,-21828
    d2c0:	1947883a 	add	r3,r3,r5
    d2c4:	30c7883a 	add	r3,r6,r3
    d2c8:	18000c1e 	bne	r3,zero,d2fc <__cxa_end_catch+0x70>
    d2cc:	00c00044 	movi	r3,1
    d2d0:	19c00a36 	bltu	r3,r7,d2fc <__cxa_end_catch+0x70>
    d2d4:	20c00517 	ldw	r3,20(r4)
    d2d8:	18000d16 	blt	r3,zero,d310 <__cxa_end_catch+0x84>
    d2dc:	18ffffc4 	addi	r3,r3,-1
    d2e0:	18001026 	beq	r3,zero,d324 <__cxa_end_catch+0x98>
    d2e4:	00bfffc4 	movi	r2,-1
    d2e8:	18801426 	beq	r3,r2,d33c <__cxa_end_catch+0xb0>
    d2ec:	20c00515 	stw	r3,20(r4)
    d2f0:	dfc00017 	ldw	ra,0(sp)
    d2f4:	dec00104 	addi	sp,sp,4
    d2f8:	f800283a 	ret
    d2fc:	21000b04 	addi	r4,r4,44
    d300:	10000015 	stw	zero,0(r2)
    d304:	dfc00017 	ldw	ra,0(sp)
    d308:	dec00104 	addi	sp,sp,4
    d30c:	000f2f81 	jmpi	f2f8 <_Unwind_DeleteException>
    d310:	18c00044 	addi	r3,r3,1
    d314:	183ff51e 	bne	r3,zero,d2ec <__alt_data_end+0xfc00d2ec>
    d318:	21400417 	ldw	r5,16(r4)
    d31c:	11400015 	stw	r5,0(r2)
    d320:	003ff206 	br	d2ec <__alt_data_end+0xfc00d2ec>
    d324:	20c00417 	ldw	r3,16(r4)
    d328:	21000b04 	addi	r4,r4,44
    d32c:	10c00015 	stw	r3,0(r2)
    d330:	dfc00017 	ldw	ra,0(sp)
    d334:	dec00104 	addi	sp,sp,4
    d338:	000f2f81 	jmpi	f2f8 <_Unwind_DeleteException>
    d33c:	000bfa00 	call	bfa0 <_ZSt9terminatev>

0000d340 <_ZSt18uncaught_exceptionv>:
    d340:	deffff04 	addi	sp,sp,-4
    d344:	dfc00015 	stw	ra,0(sp)
    d348:	000d6880 	call	d688 <__cxa_get_globals>
    d34c:	10800117 	ldw	r2,4(r2)
    d350:	1004c03a 	cmpne	r2,r2,zero
    d354:	dfc00017 	ldw	ra,0(sp)
    d358:	dec00104 	addi	sp,sp,4
    d35c:	f800283a 	ret

0000d360 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    d360:	018000f4 	movhi	r6,3
    d364:	31882a04 	addi	r6,r6,8360
    d368:	31400117 	ldw	r5,4(r6)
    d36c:	223fff04 	addi	r8,r4,-4
    d370:	227fff17 	ldw	r9,-4(r4)
    d374:	28001326 	beq	r5,zero,d3c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    d378:	424f883a 	add	r7,r8,r9
    d37c:	29c01426 	beq	r5,r7,d3d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    d380:	28c00117 	ldw	r3,4(r5)
    d384:	18001c26 	beq	r3,zero,d3f8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    d388:	38c00336 	bltu	r7,r3,d398 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    d38c:	00001e06 	br	d408 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    d390:	3880052e 	bgeu	r7,r2,d3a8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    d394:	1007883a 	mov	r3,r2
    d398:	18800117 	ldw	r2,4(r3)
    d39c:	29800104 	addi	r6,r5,4
    d3a0:	180b883a 	mov	r5,r3
    d3a4:	103ffa1e 	bne	r2,zero,d390 <__alt_data_end+0xfc00d390>
    d3a8:	19400017 	ldw	r5,0(r3)
    d3ac:	194f883a 	add	r7,r3,r5
    d3b0:	41c00e26 	beq	r8,r7,d3ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    d3b4:	20800015 	stw	r2,0(r4)
    d3b8:	30800017 	ldw	r2,0(r6)
    d3bc:	12000115 	stw	r8,4(r2)
    d3c0:	f800283a 	ret
    d3c4:	20000015 	stw	zero,0(r4)
    d3c8:	32000115 	stw	r8,4(r6)
    d3cc:	f800283a 	ret
    d3d0:	28c00017 	ldw	r3,0(r5)
    d3d4:	28800117 	ldw	r2,4(r5)
    d3d8:	1a53883a 	add	r9,r3,r9
    d3dc:	227fff15 	stw	r9,-4(r4)
    d3e0:	20800015 	stw	r2,0(r4)
    d3e4:	32000115 	stw	r8,4(r6)
    d3e8:	f800283a 	ret
    d3ec:	494b883a 	add	r5,r9,r5
    d3f0:	19400015 	stw	r5,0(r3)
    d3f4:	f800283a 	ret
    d3f8:	0005883a 	mov	r2,zero
    d3fc:	2807883a 	mov	r3,r5
    d400:	31800104 	addi	r6,r6,4
    d404:	003fe806 	br	d3a8 <__alt_data_end+0xfc00d3a8>
    d408:	1805883a 	mov	r2,r3
    d40c:	31800104 	addi	r6,r6,4
    d410:	2807883a 	mov	r3,r5
    d414:	003fe406 	br	d3a8 <__alt_data_end+0xfc00d3a8>

0000d418 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    d418:	20800104 	addi	r2,r4,4
    d41c:	00c001c4 	movi	r3,7
    d420:	1880112e 	bgeu	r3,r2,d468 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    d424:	20c9883a 	add	r4,r4,r3
    d428:	00bfff04 	movi	r2,-4
    d42c:	208a703a 	and	r5,r4,r2
    d430:	018000f4 	movhi	r6,3
    d434:	31882a04 	addi	r6,r6,8360
    d438:	30c00117 	ldw	r3,4(r6)
    d43c:	18000826 	beq	r3,zero,d460 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    d440:	19000017 	ldw	r4,0(r3)
    d444:	21400436 	bltu	r4,r5,d458 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    d448:	00001a06 	br	d4b4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    d44c:	11000017 	ldw	r4,0(r2)
    d450:	2140072e 	bgeu	r4,r5,d470 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    d454:	1007883a 	mov	r3,r2
    d458:	18800117 	ldw	r2,4(r3)
    d45c:	103ffb1e 	bne	r2,zero,d44c <__alt_data_end+0xfc00d44c>
    d460:	0005883a 	mov	r2,zero
    d464:	f800283a 	ret
    d468:	01400204 	movi	r5,8
    d46c:	003ff006 	br	d430 <__alt_data_end+0xfc00d430>
    d470:	18c00104 	addi	r3,r3,4
    d474:	2149c83a 	sub	r4,r4,r5
    d478:	018001c4 	movi	r6,7
    d47c:	3100092e 	bgeu	r6,r4,d4a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    d480:	11c00117 	ldw	r7,4(r2)
    d484:	114d883a 	add	r6,r2,r5
    d488:	31000015 	stw	r4,0(r6)
    d48c:	31c00115 	stw	r7,4(r6)
    d490:	18800017 	ldw	r2,0(r3)
    d494:	11400015 	stw	r5,0(r2)
    d498:	19800015 	stw	r6,0(r3)
    d49c:	10800104 	addi	r2,r2,4
    d4a0:	f800283a 	ret
    d4a4:	11000117 	ldw	r4,4(r2)
    d4a8:	10800104 	addi	r2,r2,4
    d4ac:	19000015 	stw	r4,0(r3)
    d4b0:	f800283a 	ret
    d4b4:	1805883a 	mov	r2,r3
    d4b8:	30c00104 	addi	r3,r6,4
    d4bc:	003fed06 	br	d474 <__alt_data_end+0xfc00d474>

0000d4c0 <__cxa_allocate_exception>:
    d4c0:	defffd04 	addi	sp,sp,-12
    d4c4:	dc400115 	stw	r17,4(sp)
    d4c8:	24401104 	addi	r17,r4,68
    d4cc:	8809883a 	mov	r4,r17
    d4d0:	dc000015 	stw	r16,0(sp)
    d4d4:	dfc00215 	stw	ra,8(sp)
    d4d8:	000f44c0 	call	f44c <malloc>
    d4dc:	1021883a 	mov	r16,r2
    d4e0:	10000a26 	beq	r2,zero,d50c <__cxa_allocate_exception+0x4c>
    d4e4:	01801104 	movi	r6,68
    d4e8:	000b883a 	mov	r5,zero
    d4ec:	8009883a 	mov	r4,r16
    d4f0:	000fdc80 	call	fdc8 <memset>
    d4f4:	80801104 	addi	r2,r16,68
    d4f8:	dfc00217 	ldw	ra,8(sp)
    d4fc:	dc400117 	ldw	r17,4(sp)
    d500:	dc000017 	ldw	r16,0(sp)
    d504:	dec00304 	addi	sp,sp,12
    d508:	f800283a 	ret
    d50c:	8809883a 	mov	r4,r17
    d510:	000d4180 	call	d418 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    d514:	1021883a 	mov	r16,r2
    d518:	103ff21e 	bne	r2,zero,d4e4 <__alt_data_end+0xfc00d4e4>
    d51c:	000bfa00 	call	bfa0 <_ZSt9terminatev>

0000d520 <__cxa_free_exception>:
    d520:	00c000f4 	movhi	r3,3
    d524:	18c82a04 	addi	r3,r3,8360
    d528:	18800217 	ldw	r2,8(r3)
    d52c:	213fef04 	addi	r4,r4,-68
    d530:	1100042e 	bgeu	r2,r4,d544 <__cxa_free_exception+0x24>
    d534:	18c00317 	ldw	r3,12(r3)
    d538:	10c5883a 	add	r2,r2,r3
    d53c:	2080012e 	bgeu	r4,r2,d544 <__cxa_free_exception+0x24>
    d540:	000d3601 	jmpi	d360 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    d544:	000f4601 	jmpi	f460 <free>

0000d548 <__cxa_allocate_dependent_exception>:
    d548:	defffe04 	addi	sp,sp,-8
    d54c:	01001004 	movi	r4,64
    d550:	dc000015 	stw	r16,0(sp)
    d554:	dfc00115 	stw	ra,4(sp)
    d558:	000f44c0 	call	f44c <malloc>
    d55c:	1021883a 	mov	r16,r2
    d560:	10000926 	beq	r2,zero,d588 <__cxa_allocate_dependent_exception+0x40>
    d564:	01801004 	movi	r6,64
    d568:	000b883a 	mov	r5,zero
    d56c:	8009883a 	mov	r4,r16
    d570:	000fdc80 	call	fdc8 <memset>
    d574:	8005883a 	mov	r2,r16
    d578:	dfc00117 	ldw	ra,4(sp)
    d57c:	dc000017 	ldw	r16,0(sp)
    d580:	dec00204 	addi	sp,sp,8
    d584:	f800283a 	ret
    d588:	01001004 	movi	r4,64
    d58c:	000d4180 	call	d418 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    d590:	1021883a 	mov	r16,r2
    d594:	103ff31e 	bne	r2,zero,d564 <__alt_data_end+0xfc00d564>
    d598:	000bfa00 	call	bfa0 <_ZSt9terminatev>

0000d59c <__cxa_free_dependent_exception>:
    d59c:	014000f4 	movhi	r5,3
    d5a0:	29482a04 	addi	r5,r5,8360
    d5a4:	28c00217 	ldw	r3,8(r5)
    d5a8:	2005883a 	mov	r2,r4
    d5ac:	1900042e 	bgeu	r3,r4,d5c0 <__cxa_free_dependent_exception+0x24>
    d5b0:	29400317 	ldw	r5,12(r5)
    d5b4:	1947883a 	add	r3,r3,r5
    d5b8:	20c0012e 	bgeu	r4,r3,d5c0 <__cxa_free_dependent_exception+0x24>
    d5bc:	000d3601 	jmpi	d360 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    d5c0:	1009883a 	mov	r4,r2
    d5c4:	000f4601 	jmpi	f460 <free>

0000d5c8 <_GLOBAL__sub_I___cxa_allocate_exception>:
    d5c8:	defffd04 	addi	sp,sp,-12
    d5cc:	dc400115 	stw	r17,4(sp)
    d5d0:	dc000015 	stw	r16,0(sp)
    d5d4:	04424004 	movi	r17,2304
    d5d8:	040000f4 	movhi	r16,3
    d5dc:	84082a04 	addi	r16,r16,8360
    d5e0:	8809883a 	mov	r4,r17
    d5e4:	dfc00215 	stw	ra,8(sp)
    d5e8:	84400315 	stw	r17,12(r16)
    d5ec:	000f44c0 	call	f44c <malloc>
    d5f0:	80800215 	stw	r2,8(r16)
    d5f4:	10000826 	beq	r2,zero,d618 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    d5f8:	80800115 	stw	r2,4(r16)
    d5fc:	14400015 	stw	r17,0(r2)
    d600:	10000115 	stw	zero,4(r2)
    d604:	dfc00217 	ldw	ra,8(sp)
    d608:	dc400117 	ldw	r17,4(sp)
    d60c:	dc000017 	ldw	r16,0(sp)
    d610:	dec00304 	addi	sp,sp,12
    d614:	f800283a 	ret
    d618:	80000315 	stw	zero,12(r16)
    d61c:	80000115 	stw	zero,4(r16)
    d620:	003ff806 	br	d604 <__alt_data_end+0xfc00d604>

0000d624 <__cxa_call_terminate>:
    d624:	defffe04 	addi	sp,sp,-8
    d628:	dfc00115 	stw	ra,4(sp)
    d62c:	dc000015 	stw	r16,0(sp)
    d630:	20000d26 	beq	r4,zero,d668 <__cxa_call_terminate+0x44>
    d634:	2021883a 	mov	r16,r4
    d638:	000d1d80 	call	d1d8 <__cxa_begin_catch>
    d63c:	80c00017 	ldw	r3,0(r16)
    d640:	016f3574 	movhi	r5,48341
    d644:	29754004 	addi	r5,r5,-11008
    d648:	194b883a 	add	r5,r3,r5
    d64c:	80800117 	ldw	r2,4(r16)
    d650:	28c9803a 	cmpltu	r4,r5,r3
    d654:	00ee2cb4 	movhi	r3,47282
    d658:	18eaaf04 	addi	r3,r3,-21828
    d65c:	10c5883a 	add	r2,r2,r3
    d660:	2085883a 	add	r2,r4,r2
    d664:	10000126 	beq	r2,zero,d66c <__cxa_call_terminate+0x48>
    d668:	000bfa00 	call	bfa0 <_ZSt9terminatev>
    d66c:	00800044 	movi	r2,1
    d670:	117ffd36 	bltu	r2,r5,d668 <__alt_data_end+0xfc00d668>
    d674:	813ff817 	ldw	r4,-32(r16)
    d678:	000bee00 	call	bee0 <_ZN10__cxxabiv111__terminateEPFvvE>

0000d67c <__cxa_get_globals_fast>:
    d67c:	008000f4 	movhi	r2,3
    d680:	1087d104 	addi	r2,r2,8004
    d684:	f800283a 	ret

0000d688 <__cxa_get_globals>:
    d688:	008000f4 	movhi	r2,3
    d68c:	1087d104 	addi	r2,r2,8004
    d690:	f800283a 	ret

0000d694 <_ZNSt9exceptionD1Ev>:
    d694:	f800283a 	ret

0000d698 <_ZNSt13bad_exceptionD1Ev>:
    d698:	f800283a 	ret

0000d69c <_ZNKSt9exception4whatEv>:
    d69c:	008000f4 	movhi	r2,3
    d6a0:	10adbb04 	addi	r2,r2,-18708
    d6a4:	f800283a 	ret

0000d6a8 <_ZNKSt13bad_exception4whatEv>:
    d6a8:	008000f4 	movhi	r2,3
    d6ac:	10adbf04 	addi	r2,r2,-18692
    d6b0:	f800283a 	ret

0000d6b4 <_ZNSt9exceptionD0Ev>:
    d6b4:	000bbd41 	jmpi	bbd4 <_ZdlPv>

0000d6b8 <_ZNSt13bad_exceptionD0Ev>:
    d6b8:	000bbd41 	jmpi	bbd4 <_ZdlPv>

0000d6bc <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    d6bc:	f800283a 	ret

0000d6c0 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    d6c0:	000bbd41 	jmpi	bbd4 <_ZdlPv>

0000d6c4 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    d6c4:	f800283a 	ret

0000d6c8 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    d6c8:	000bbd41 	jmpi	bbd4 <_ZdlPv>

0000d6cc <__fixunssfsi>:
    d6cc:	defffd04 	addi	sp,sp,-12
    d6d0:	dc000015 	stw	r16,0(sp)
    d6d4:	0413c034 	movhi	r16,20224
    d6d8:	800b883a 	mov	r5,r16
    d6dc:	dc400115 	stw	r17,4(sp)
    d6e0:	dfc00215 	stw	ra,8(sp)
    d6e4:	2023883a 	mov	r17,r4
    d6e8:	000e2100 	call	e210 <__gesf2>
    d6ec:	1000070e 	bge	r2,zero,d70c <__fixunssfsi+0x40>
    d6f0:	8809883a 	mov	r4,r17
    d6f4:	000ebe00 	call	ebe0 <__fixsfsi>
    d6f8:	dfc00217 	ldw	ra,8(sp)
    d6fc:	dc400117 	ldw	r17,4(sp)
    d700:	dc000017 	ldw	r16,0(sp)
    d704:	dec00304 	addi	sp,sp,12
    d708:	f800283a 	ret
    d70c:	800b883a 	mov	r5,r16
    d710:	8809883a 	mov	r4,r17
    d714:	000e6fc0 	call	e6fc <__subsf3>
    d718:	1009883a 	mov	r4,r2
    d71c:	000ebe00 	call	ebe0 <__fixsfsi>
    d720:	00e00034 	movhi	r3,32768
    d724:	10c5883a 	add	r2,r2,r3
    d728:	003ff306 	br	d6f8 <__alt_data_end+0xfc00d6f8>

0000d72c <__divsi3>:
    d72c:	20001b16 	blt	r4,zero,d79c <__divsi3+0x70>
    d730:	000f883a 	mov	r7,zero
    d734:	28001616 	blt	r5,zero,d790 <__divsi3+0x64>
    d738:	200d883a 	mov	r6,r4
    d73c:	29001a2e 	bgeu	r5,r4,d7a8 <__divsi3+0x7c>
    d740:	00800804 	movi	r2,32
    d744:	00c00044 	movi	r3,1
    d748:	00000106 	br	d750 <__divsi3+0x24>
    d74c:	10000d26 	beq	r2,zero,d784 <__divsi3+0x58>
    d750:	294b883a 	add	r5,r5,r5
    d754:	10bfffc4 	addi	r2,r2,-1
    d758:	18c7883a 	add	r3,r3,r3
    d75c:	293ffb36 	bltu	r5,r4,d74c <__alt_data_end+0xfc00d74c>
    d760:	0005883a 	mov	r2,zero
    d764:	18000726 	beq	r3,zero,d784 <__divsi3+0x58>
    d768:	0005883a 	mov	r2,zero
    d76c:	31400236 	bltu	r6,r5,d778 <__divsi3+0x4c>
    d770:	314dc83a 	sub	r6,r6,r5
    d774:	10c4b03a 	or	r2,r2,r3
    d778:	1806d07a 	srli	r3,r3,1
    d77c:	280ad07a 	srli	r5,r5,1
    d780:	183ffa1e 	bne	r3,zero,d76c <__alt_data_end+0xfc00d76c>
    d784:	38000126 	beq	r7,zero,d78c <__divsi3+0x60>
    d788:	0085c83a 	sub	r2,zero,r2
    d78c:	f800283a 	ret
    d790:	014bc83a 	sub	r5,zero,r5
    d794:	39c0005c 	xori	r7,r7,1
    d798:	003fe706 	br	d738 <__alt_data_end+0xfc00d738>
    d79c:	0109c83a 	sub	r4,zero,r4
    d7a0:	01c00044 	movi	r7,1
    d7a4:	003fe306 	br	d734 <__alt_data_end+0xfc00d734>
    d7a8:	00c00044 	movi	r3,1
    d7ac:	003fee06 	br	d768 <__alt_data_end+0xfc00d768>

0000d7b0 <__modsi3>:
    d7b0:	20001716 	blt	r4,zero,d810 <__modsi3+0x60>
    d7b4:	000f883a 	mov	r7,zero
    d7b8:	2005883a 	mov	r2,r4
    d7bc:	28001216 	blt	r5,zero,d808 <__modsi3+0x58>
    d7c0:	2900162e 	bgeu	r5,r4,d81c <__modsi3+0x6c>
    d7c4:	01800804 	movi	r6,32
    d7c8:	00c00044 	movi	r3,1
    d7cc:	00000106 	br	d7d4 <__modsi3+0x24>
    d7d0:	30000a26 	beq	r6,zero,d7fc <__modsi3+0x4c>
    d7d4:	294b883a 	add	r5,r5,r5
    d7d8:	31bfffc4 	addi	r6,r6,-1
    d7dc:	18c7883a 	add	r3,r3,r3
    d7e0:	293ffb36 	bltu	r5,r4,d7d0 <__alt_data_end+0xfc00d7d0>
    d7e4:	18000526 	beq	r3,zero,d7fc <__modsi3+0x4c>
    d7e8:	1806d07a 	srli	r3,r3,1
    d7ec:	11400136 	bltu	r2,r5,d7f4 <__modsi3+0x44>
    d7f0:	1145c83a 	sub	r2,r2,r5
    d7f4:	280ad07a 	srli	r5,r5,1
    d7f8:	183ffb1e 	bne	r3,zero,d7e8 <__alt_data_end+0xfc00d7e8>
    d7fc:	38000126 	beq	r7,zero,d804 <__modsi3+0x54>
    d800:	0085c83a 	sub	r2,zero,r2
    d804:	f800283a 	ret
    d808:	014bc83a 	sub	r5,zero,r5
    d80c:	003fec06 	br	d7c0 <__alt_data_end+0xfc00d7c0>
    d810:	0109c83a 	sub	r4,zero,r4
    d814:	01c00044 	movi	r7,1
    d818:	003fe706 	br	d7b8 <__alt_data_end+0xfc00d7b8>
    d81c:	00c00044 	movi	r3,1
    d820:	003ff106 	br	d7e8 <__alt_data_end+0xfc00d7e8>

0000d824 <__udivsi3>:
    d824:	200d883a 	mov	r6,r4
    d828:	2900152e 	bgeu	r5,r4,d880 <__udivsi3+0x5c>
    d82c:	28001416 	blt	r5,zero,d880 <__udivsi3+0x5c>
    d830:	00800804 	movi	r2,32
    d834:	00c00044 	movi	r3,1
    d838:	00000206 	br	d844 <__udivsi3+0x20>
    d83c:	10000e26 	beq	r2,zero,d878 <__udivsi3+0x54>
    d840:	28000516 	blt	r5,zero,d858 <__udivsi3+0x34>
    d844:	294b883a 	add	r5,r5,r5
    d848:	10bfffc4 	addi	r2,r2,-1
    d84c:	18c7883a 	add	r3,r3,r3
    d850:	293ffa36 	bltu	r5,r4,d83c <__alt_data_end+0xfc00d83c>
    d854:	18000826 	beq	r3,zero,d878 <__udivsi3+0x54>
    d858:	0005883a 	mov	r2,zero
    d85c:	31400236 	bltu	r6,r5,d868 <__udivsi3+0x44>
    d860:	314dc83a 	sub	r6,r6,r5
    d864:	10c4b03a 	or	r2,r2,r3
    d868:	1806d07a 	srli	r3,r3,1
    d86c:	280ad07a 	srli	r5,r5,1
    d870:	183ffa1e 	bne	r3,zero,d85c <__alt_data_end+0xfc00d85c>
    d874:	f800283a 	ret
    d878:	0005883a 	mov	r2,zero
    d87c:	f800283a 	ret
    d880:	00c00044 	movi	r3,1
    d884:	003ff406 	br	d858 <__alt_data_end+0xfc00d858>

0000d888 <__umodsi3>:
    d888:	2005883a 	mov	r2,r4
    d88c:	2900122e 	bgeu	r5,r4,d8d8 <__umodsi3+0x50>
    d890:	28001116 	blt	r5,zero,d8d8 <__umodsi3+0x50>
    d894:	01800804 	movi	r6,32
    d898:	00c00044 	movi	r3,1
    d89c:	00000206 	br	d8a8 <__umodsi3+0x20>
    d8a0:	30000c26 	beq	r6,zero,d8d4 <__umodsi3+0x4c>
    d8a4:	28000516 	blt	r5,zero,d8bc <__umodsi3+0x34>
    d8a8:	294b883a 	add	r5,r5,r5
    d8ac:	31bfffc4 	addi	r6,r6,-1
    d8b0:	18c7883a 	add	r3,r3,r3
    d8b4:	293ffa36 	bltu	r5,r4,d8a0 <__alt_data_end+0xfc00d8a0>
    d8b8:	18000626 	beq	r3,zero,d8d4 <__umodsi3+0x4c>
    d8bc:	1806d07a 	srli	r3,r3,1
    d8c0:	11400136 	bltu	r2,r5,d8c8 <__umodsi3+0x40>
    d8c4:	1145c83a 	sub	r2,r2,r5
    d8c8:	280ad07a 	srli	r5,r5,1
    d8cc:	183ffb1e 	bne	r3,zero,d8bc <__alt_data_end+0xfc00d8bc>
    d8d0:	f800283a 	ret
    d8d4:	f800283a 	ret
    d8d8:	00c00044 	movi	r3,1
    d8dc:	003ff706 	br	d8bc <__alt_data_end+0xfc00d8bc>

0000d8e0 <__mulsi3>:
    d8e0:	0005883a 	mov	r2,zero
    d8e4:	20000726 	beq	r4,zero,d904 <__mulsi3+0x24>
    d8e8:	20c0004c 	andi	r3,r4,1
    d8ec:	2008d07a 	srli	r4,r4,1
    d8f0:	18000126 	beq	r3,zero,d8f8 <__mulsi3+0x18>
    d8f4:	1145883a 	add	r2,r2,r5
    d8f8:	294b883a 	add	r5,r5,r5
    d8fc:	203ffa1e 	bne	r4,zero,d8e8 <__alt_data_end+0xfc00d8e8>
    d900:	f800283a 	ret
    d904:	f800283a 	ret

0000d908 <__addsf3>:
    d908:	defffc04 	addi	sp,sp,-16
    d90c:	2004d7fa 	srli	r2,r4,31
    d910:	280cd5fa 	srli	r6,r5,23
    d914:	dc000015 	stw	r16,0(sp)
    d918:	00c02034 	movhi	r3,128
    d91c:	2020d5fa 	srli	r16,r4,23
    d920:	280ed7fa 	srli	r7,r5,31
    d924:	18ffffc4 	addi	r3,r3,-1
    d928:	dc400115 	stw	r17,4(sp)
    d92c:	1908703a 	and	r4,r3,r4
    d930:	194a703a 	and	r5,r3,r5
    d934:	dfc00315 	stw	ra,12(sp)
    d938:	dc800215 	stw	r18,8(sp)
    d93c:	14403fcc 	andi	r17,r2,255
    d940:	84003fcc 	andi	r16,r16,255
    d944:	200890fa 	slli	r4,r4,3
    d948:	31803fcc 	andi	r6,r6,255
    d94c:	280a90fa 	slli	r5,r5,3
    d950:	89c05026 	beq	r17,r7,da94 <__addsf3+0x18c>
    d954:	8185c83a 	sub	r2,r16,r6
    d958:	00807a0e 	bge	zero,r2,db44 <__addsf3+0x23c>
    d95c:	30001e1e 	bne	r6,zero,d9d8 <__addsf3+0xd0>
    d960:	28006d1e 	bne	r5,zero,db18 <__addsf3+0x210>
    d964:	208001cc 	andi	r2,r4,7
    d968:	10000426 	beq	r2,zero,d97c <__addsf3+0x74>
    d96c:	208003cc 	andi	r2,r4,15
    d970:	00c00104 	movi	r3,4
    d974:	10c00126 	beq	r2,r3,d97c <__addsf3+0x74>
    d978:	20c9883a 	add	r4,r4,r3
    d97c:	2081002c 	andhi	r2,r4,1024
    d980:	10003926 	beq	r2,zero,da68 <__addsf3+0x160>
    d984:	84000044 	addi	r16,r16,1
    d988:	00803fc4 	movi	r2,255
    d98c:	80807826 	beq	r16,r2,db70 <__addsf3+0x268>
    d990:	200891ba 	slli	r4,r4,6
    d994:	8805883a 	mov	r2,r17
    d998:	2008d27a 	srli	r4,r4,9
    d99c:	84003fcc 	andi	r16,r16,255
    d9a0:	800695fa 	slli	r3,r16,23
    d9a4:	10803fcc 	andi	r2,r2,255
    d9a8:	04002034 	movhi	r16,128
    d9ac:	843fffc4 	addi	r16,r16,-1
    d9b0:	100497fa 	slli	r2,r2,31
    d9b4:	2408703a 	and	r4,r4,r16
    d9b8:	20e0b03a 	or	r16,r4,r3
    d9bc:	8084b03a 	or	r2,r16,r2
    d9c0:	dfc00317 	ldw	ra,12(sp)
    d9c4:	dc800217 	ldw	r18,8(sp)
    d9c8:	dc400117 	ldw	r17,4(sp)
    d9cc:	dc000017 	ldw	r16,0(sp)
    d9d0:	dec00404 	addi	sp,sp,16
    d9d4:	f800283a 	ret
    d9d8:	00c03fc4 	movi	r3,255
    d9dc:	80ffe126 	beq	r16,r3,d964 <__alt_data_end+0xfc00d964>
    d9e0:	29410034 	orhi	r5,r5,1024
    d9e4:	00c006c4 	movi	r3,27
    d9e8:	18807516 	blt	r3,r2,dbc0 <__addsf3+0x2b8>
    d9ec:	00c00804 	movi	r3,32
    d9f0:	1887c83a 	sub	r3,r3,r2
    d9f4:	28c6983a 	sll	r3,r5,r3
    d9f8:	288ad83a 	srl	r5,r5,r2
    d9fc:	1804c03a 	cmpne	r2,r3,zero
    da00:	288ab03a 	or	r5,r5,r2
    da04:	2149c83a 	sub	r4,r4,r5
    da08:	2081002c 	andhi	r2,r4,1024
    da0c:	10001426 	beq	r2,zero,da60 <__addsf3+0x158>
    da10:	04810034 	movhi	r18,1024
    da14:	94bfffc4 	addi	r18,r18,-1
    da18:	24a4703a 	and	r18,r4,r18
    da1c:	9009883a 	mov	r4,r18
    da20:	000f3840 	call	f384 <__clzsi2>
    da24:	10bffec4 	addi	r2,r2,-5
    da28:	90a4983a 	sll	r18,r18,r2
    da2c:	14005416 	blt	r2,r16,db80 <__addsf3+0x278>
    da30:	1405c83a 	sub	r2,r2,r16
    da34:	11000044 	addi	r4,r2,1
    da38:	00800804 	movi	r2,32
    da3c:	1105c83a 	sub	r2,r2,r4
    da40:	9084983a 	sll	r2,r18,r2
    da44:	9124d83a 	srl	r18,r18,r4
    da48:	0021883a 	mov	r16,zero
    da4c:	1008c03a 	cmpne	r4,r2,zero
    da50:	9108b03a 	or	r4,r18,r4
    da54:	003fc306 	br	d964 <__alt_data_end+0xfc00d964>
    da58:	1000db26 	beq	r2,zero,ddc8 <__addsf3+0x4c0>
    da5c:	1009883a 	mov	r4,r2
    da60:	208001cc 	andi	r2,r4,7
    da64:	103fc11e 	bne	r2,zero,d96c <__alt_data_end+0xfc00d96c>
    da68:	2006d0fa 	srli	r3,r4,3
    da6c:	01003fc4 	movi	r4,255
    da70:	8805883a 	mov	r2,r17
    da74:	8100241e 	bne	r16,r4,db08 <__addsf3+0x200>
    da78:	18006e26 	beq	r3,zero,dc34 <__addsf3+0x32c>
    da7c:	19001034 	orhi	r4,r3,64
    da80:	00c02034 	movhi	r3,128
    da84:	18ffffc4 	addi	r3,r3,-1
    da88:	043fffc4 	movi	r16,-1
    da8c:	20c8703a 	and	r4,r4,r3
    da90:	003fc206 	br	d99c <__alt_data_end+0xfc00d99c>
    da94:	8187c83a 	sub	r3,r16,r6
    da98:	00c03e0e 	bge	zero,r3,db94 <__addsf3+0x28c>
    da9c:	30002326 	beq	r6,zero,db2c <__addsf3+0x224>
    daa0:	01803fc4 	movi	r6,255
    daa4:	81bfaf26 	beq	r16,r6,d964 <__alt_data_end+0xfc00d964>
    daa8:	29410034 	orhi	r5,r5,1024
    daac:	018006c4 	movi	r6,27
    dab0:	30c07416 	blt	r6,r3,dc84 <__addsf3+0x37c>
    dab4:	01800804 	movi	r6,32
    dab8:	30cdc83a 	sub	r6,r6,r3
    dabc:	298c983a 	sll	r6,r5,r6
    dac0:	28cad83a 	srl	r5,r5,r3
    dac4:	3006c03a 	cmpne	r3,r6,zero
    dac8:	28cab03a 	or	r5,r5,r3
    dacc:	2149883a 	add	r4,r4,r5
    dad0:	20c1002c 	andhi	r3,r4,1024
    dad4:	183fe226 	beq	r3,zero,da60 <__alt_data_end+0xfc00da60>
    dad8:	84000044 	addi	r16,r16,1
    dadc:	00c03fc4 	movi	r3,255
    dae0:	80c05426 	beq	r16,r3,dc34 <__addsf3+0x32c>
    dae4:	00bf0034 	movhi	r2,64512
    dae8:	10bfffc4 	addi	r2,r2,-1
    daec:	20c0004c 	andi	r3,r4,1
    daf0:	2088703a 	and	r4,r4,r2
    daf4:	2008d07a 	srli	r4,r4,1
    daf8:	20c8b03a 	or	r4,r4,r3
    dafc:	003f9906 	br	d964 <__alt_data_end+0xfc00d964>
    db00:	0007883a 	mov	r3,zero
    db04:	0005883a 	mov	r2,zero
    db08:	01002034 	movhi	r4,128
    db0c:	213fffc4 	addi	r4,r4,-1
    db10:	1908703a 	and	r4,r3,r4
    db14:	003fa106 	br	d99c <__alt_data_end+0xfc00d99c>
    db18:	10bfffc4 	addi	r2,r2,-1
    db1c:	103fb926 	beq	r2,zero,da04 <__alt_data_end+0xfc00da04>
    db20:	00c03fc4 	movi	r3,255
    db24:	80ffaf1e 	bne	r16,r3,d9e4 <__alt_data_end+0xfc00d9e4>
    db28:	003f8e06 	br	d964 <__alt_data_end+0xfc00d964>
    db2c:	283f8d26 	beq	r5,zero,d964 <__alt_data_end+0xfc00d964>
    db30:	18ffffc4 	addi	r3,r3,-1
    db34:	183fe526 	beq	r3,zero,dacc <__alt_data_end+0xfc00dacc>
    db38:	01803fc4 	movi	r6,255
    db3c:	81bfdb1e 	bne	r16,r6,daac <__alt_data_end+0xfc00daac>
    db40:	003f8806 	br	d964 <__alt_data_end+0xfc00d964>
    db44:	1000201e 	bne	r2,zero,dbc8 <__addsf3+0x2c0>
    db48:	80800044 	addi	r2,r16,1
    db4c:	10803fcc 	andi	r2,r2,255
    db50:	01800044 	movi	r6,1
    db54:	3080450e 	bge	r6,r2,dc6c <__addsf3+0x364>
    db58:	2165c83a 	sub	r18,r4,r5
    db5c:	90c1002c 	andhi	r3,r18,1024
    db60:	18002b26 	beq	r3,zero,dc10 <__addsf3+0x308>
    db64:	2925c83a 	sub	r18,r5,r4
    db68:	3823883a 	mov	r17,r7
    db6c:	003fab06 	br	da1c <__alt_data_end+0xfc00da1c>
    db70:	8805883a 	mov	r2,r17
    db74:	043fffc4 	movi	r16,-1
    db78:	0009883a 	mov	r4,zero
    db7c:	003f8706 	br	d99c <__alt_data_end+0xfc00d99c>
    db80:	013f0034 	movhi	r4,64512
    db84:	213fffc4 	addi	r4,r4,-1
    db88:	80a1c83a 	sub	r16,r16,r2
    db8c:	9108703a 	and	r4,r18,r4
    db90:	003f7406 	br	d964 <__alt_data_end+0xfc00d964>
    db94:	1800411e 	bne	r3,zero,dc9c <__addsf3+0x394>
    db98:	80c00044 	addi	r3,r16,1
    db9c:	19c03fcc 	andi	r7,r3,255
    dba0:	01800044 	movi	r6,1
    dba4:	31c0260e 	bge	r6,r7,dc40 <__addsf3+0x338>
    dba8:	01803fc4 	movi	r6,255
    dbac:	19802126 	beq	r3,r6,dc34 <__addsf3+0x32c>
    dbb0:	2149883a 	add	r4,r4,r5
    dbb4:	2008d07a 	srli	r4,r4,1
    dbb8:	1821883a 	mov	r16,r3
    dbbc:	003f6906 	br	d964 <__alt_data_end+0xfc00d964>
    dbc0:	01400044 	movi	r5,1
    dbc4:	003f8f06 	br	da04 <__alt_data_end+0xfc00da04>
    dbc8:	8000151e 	bne	r16,zero,dc20 <__addsf3+0x318>
    dbcc:	20002f26 	beq	r4,zero,dc8c <__addsf3+0x384>
    dbd0:	0084303a 	nor	r2,zero,r2
    dbd4:	10000a26 	beq	r2,zero,dc00 <__addsf3+0x2f8>
    dbd8:	00c03fc4 	movi	r3,255
    dbdc:	30c02b26 	beq	r6,r3,dc8c <__addsf3+0x384>
    dbe0:	00c006c4 	movi	r3,27
    dbe4:	18806d16 	blt	r3,r2,dd9c <__addsf3+0x494>
    dbe8:	00c00804 	movi	r3,32
    dbec:	1887c83a 	sub	r3,r3,r2
    dbf0:	20c6983a 	sll	r3,r4,r3
    dbf4:	2084d83a 	srl	r2,r4,r2
    dbf8:	1808c03a 	cmpne	r4,r3,zero
    dbfc:	1108b03a 	or	r4,r2,r4
    dc00:	2909c83a 	sub	r4,r5,r4
    dc04:	3021883a 	mov	r16,r6
    dc08:	3823883a 	mov	r17,r7
    dc0c:	003f7e06 	br	da08 <__alt_data_end+0xfc00da08>
    dc10:	903f821e 	bne	r18,zero,da1c <__alt_data_end+0xfc00da1c>
    dc14:	0005883a 	mov	r2,zero
    dc18:	0021883a 	mov	r16,zero
    dc1c:	003fba06 	br	db08 <__alt_data_end+0xfc00db08>
    dc20:	00c03fc4 	movi	r3,255
    dc24:	30c01926 	beq	r6,r3,dc8c <__addsf3+0x384>
    dc28:	0085c83a 	sub	r2,zero,r2
    dc2c:	21010034 	orhi	r4,r4,1024
    dc30:	003feb06 	br	dbe0 <__alt_data_end+0xfc00dbe0>
    dc34:	043fffc4 	movi	r16,-1
    dc38:	0009883a 	mov	r4,zero
    dc3c:	003f5706 	br	d99c <__alt_data_end+0xfc00d99c>
    dc40:	80004a1e 	bne	r16,zero,dd6c <__addsf3+0x464>
    dc44:	20005926 	beq	r4,zero,ddac <__addsf3+0x4a4>
    dc48:	283f4626 	beq	r5,zero,d964 <__alt_data_end+0xfc00d964>
    dc4c:	2149883a 	add	r4,r4,r5
    dc50:	2081002c 	andhi	r2,r4,1024
    dc54:	103f8226 	beq	r2,zero,da60 <__alt_data_end+0xfc00da60>
    dc58:	00bf0034 	movhi	r2,64512
    dc5c:	10bfffc4 	addi	r2,r2,-1
    dc60:	3021883a 	mov	r16,r6
    dc64:	2088703a 	and	r4,r4,r2
    dc68:	003f3e06 	br	d964 <__alt_data_end+0xfc00d964>
    dc6c:	8000121e 	bne	r16,zero,dcb8 <__addsf3+0x3b0>
    dc70:	2000261e 	bne	r4,zero,dd0c <__addsf3+0x404>
    dc74:	283fa226 	beq	r5,zero,db00 <__alt_data_end+0xfc00db00>
    dc78:	2809883a 	mov	r4,r5
    dc7c:	3823883a 	mov	r17,r7
    dc80:	003f3806 	br	d964 <__alt_data_end+0xfc00d964>
    dc84:	01400044 	movi	r5,1
    dc88:	003f9006 	br	dacc <__alt_data_end+0xfc00dacc>
    dc8c:	2809883a 	mov	r4,r5
    dc90:	3021883a 	mov	r16,r6
    dc94:	3823883a 	mov	r17,r7
    dc98:	003f3206 	br	d964 <__alt_data_end+0xfc00d964>
    dc9c:	80000c1e 	bne	r16,zero,dcd0 <__addsf3+0x3c8>
    dca0:	20002f26 	beq	r4,zero,dd60 <__addsf3+0x458>
    dca4:	00c6303a 	nor	r3,zero,r3
    dca8:	18002b1e 	bne	r3,zero,dd58 <__addsf3+0x450>
    dcac:	2149883a 	add	r4,r4,r5
    dcb0:	3021883a 	mov	r16,r6
    dcb4:	003f8606 	br	dad0 <__alt_data_end+0xfc00dad0>
    dcb8:	20001b1e 	bne	r4,zero,dd28 <__addsf3+0x420>
    dcbc:	28003926 	beq	r5,zero,dda4 <__addsf3+0x49c>
    dcc0:	2809883a 	mov	r4,r5
    dcc4:	3823883a 	mov	r17,r7
    dcc8:	04003fc4 	movi	r16,255
    dccc:	003f2506 	br	d964 <__alt_data_end+0xfc00d964>
    dcd0:	01c03fc4 	movi	r7,255
    dcd4:	31c02226 	beq	r6,r7,dd60 <__addsf3+0x458>
    dcd8:	00c7c83a 	sub	r3,zero,r3
    dcdc:	21010034 	orhi	r4,r4,1024
    dce0:	01c006c4 	movi	r7,27
    dce4:	38c03616 	blt	r7,r3,ddc0 <__addsf3+0x4b8>
    dce8:	01c00804 	movi	r7,32
    dcec:	38cfc83a 	sub	r7,r7,r3
    dcf0:	21ce983a 	sll	r7,r4,r7
    dcf4:	20c6d83a 	srl	r3,r4,r3
    dcf8:	3808c03a 	cmpne	r4,r7,zero
    dcfc:	1906b03a 	or	r3,r3,r4
    dd00:	1949883a 	add	r4,r3,r5
    dd04:	3021883a 	mov	r16,r6
    dd08:	003f7106 	br	dad0 <__alt_data_end+0xfc00dad0>
    dd0c:	283f1526 	beq	r5,zero,d964 <__alt_data_end+0xfc00d964>
    dd10:	2145c83a 	sub	r2,r4,r5
    dd14:	10c1002c 	andhi	r3,r2,1024
    dd18:	183f4f26 	beq	r3,zero,da58 <__alt_data_end+0xfc00da58>
    dd1c:	2909c83a 	sub	r4,r5,r4
    dd20:	3823883a 	mov	r17,r7
    dd24:	003f0f06 	br	d964 <__alt_data_end+0xfc00d964>
    dd28:	28001a26 	beq	r5,zero,dd94 <__addsf3+0x48c>
    dd2c:	2008d0fa 	srli	r4,r4,3
    dd30:	2080102c 	andhi	r2,r4,64
    dd34:	10000526 	beq	r2,zero,dd4c <__addsf3+0x444>
    dd38:	280ad0fa 	srli	r5,r5,3
    dd3c:	2880102c 	andhi	r2,r5,64
    dd40:	1000021e 	bne	r2,zero,dd4c <__addsf3+0x444>
    dd44:	2809883a 	mov	r4,r5
    dd48:	3823883a 	mov	r17,r7
    dd4c:	200890fa 	slli	r4,r4,3
    dd50:	04003fc4 	movi	r16,255
    dd54:	003f0306 	br	d964 <__alt_data_end+0xfc00d964>
    dd58:	01c03fc4 	movi	r7,255
    dd5c:	31ffe01e 	bne	r6,r7,dce0 <__alt_data_end+0xfc00dce0>
    dd60:	2809883a 	mov	r4,r5
    dd64:	3021883a 	mov	r16,r6
    dd68:	003efe06 	br	d964 <__alt_data_end+0xfc00d964>
    dd6c:	20001126 	beq	r4,zero,ddb4 <__addsf3+0x4ac>
    dd70:	28000826 	beq	r5,zero,dd94 <__addsf3+0x48c>
    dd74:	2008d0fa 	srli	r4,r4,3
    dd78:	2080102c 	andhi	r2,r4,64
    dd7c:	103ff326 	beq	r2,zero,dd4c <__alt_data_end+0xfc00dd4c>
    dd80:	280ad0fa 	srli	r5,r5,3
    dd84:	2880102c 	andhi	r2,r5,64
    dd88:	103ff01e 	bne	r2,zero,dd4c <__alt_data_end+0xfc00dd4c>
    dd8c:	2809883a 	mov	r4,r5
    dd90:	003fee06 	br	dd4c <__alt_data_end+0xfc00dd4c>
    dd94:	04003fc4 	movi	r16,255
    dd98:	003ef206 	br	d964 <__alt_data_end+0xfc00d964>
    dd9c:	01000044 	movi	r4,1
    dda0:	003f9706 	br	dc00 <__alt_data_end+0xfc00dc00>
    dda4:	0005883a 	mov	r2,zero
    dda8:	003f3406 	br	da7c <__alt_data_end+0xfc00da7c>
    ddac:	2809883a 	mov	r4,r5
    ddb0:	003eec06 	br	d964 <__alt_data_end+0xfc00d964>
    ddb4:	2809883a 	mov	r4,r5
    ddb8:	04003fc4 	movi	r16,255
    ddbc:	003ee906 	br	d964 <__alt_data_end+0xfc00d964>
    ddc0:	00c00044 	movi	r3,1
    ddc4:	003fce06 	br	dd00 <__alt_data_end+0xfc00dd00>
    ddc8:	0005883a 	mov	r2,zero
    ddcc:	003f4e06 	br	db08 <__alt_data_end+0xfc00db08>

0000ddd0 <__divsf3>:
    ddd0:	defff504 	addi	sp,sp,-44
    ddd4:	200cd5fa 	srli	r6,r4,23
    ddd8:	dcc00415 	stw	r19,16(sp)
    dddc:	2026d7fa 	srli	r19,r4,31
    dde0:	00c02034 	movhi	r3,128
    dde4:	dd800715 	stw	r22,28(sp)
    dde8:	dd000515 	stw	r20,20(sp)
    ddec:	dc800315 	stw	r18,12(sp)
    ddf0:	18ffffc4 	addi	r3,r3,-1
    ddf4:	dfc00a15 	stw	ra,40(sp)
    ddf8:	df000915 	stw	fp,36(sp)
    ddfc:	ddc00815 	stw	r23,32(sp)
    de00:	dd400615 	stw	r21,24(sp)
    de04:	dc400215 	stw	r17,8(sp)
    de08:	dc000115 	stw	r16,4(sp)
    de0c:	35003fcc 	andi	r20,r6,255
    de10:	1924703a 	and	r18,r3,r4
    de14:	9d803fcc 	andi	r22,r19,255
    de18:	a0005226 	beq	r20,zero,df64 <__divsf3+0x194>
    de1c:	00803fc4 	movi	r2,255
    de20:	a0802e26 	beq	r20,r2,dedc <__divsf3+0x10c>
    de24:	91002034 	orhi	r4,r18,128
    de28:	202490fa 	slli	r18,r4,3
    de2c:	a53fe044 	addi	r20,r20,-127
    de30:	0021883a 	mov	r16,zero
    de34:	002f883a 	mov	r23,zero
    de38:	280cd5fa 	srli	r6,r5,23
    de3c:	282ad7fa 	srli	r21,r5,31
    de40:	00c02034 	movhi	r3,128
    de44:	18ffffc4 	addi	r3,r3,-1
    de48:	31803fcc 	andi	r6,r6,255
    de4c:	1962703a 	and	r17,r3,r5
    de50:	af003fcc 	andi	fp,r21,255
    de54:	30004a26 	beq	r6,zero,df80 <__divsf3+0x1b0>
    de58:	00803fc4 	movi	r2,255
    de5c:	30804526 	beq	r6,r2,df74 <__divsf3+0x1a4>
    de60:	89402034 	orhi	r5,r17,128
    de64:	282290fa 	slli	r17,r5,3
    de68:	31bfe044 	addi	r6,r6,-127
    de6c:	000b883a 	mov	r5,zero
    de70:	2c20b03a 	or	r16,r5,r16
    de74:	802090ba 	slli	r16,r16,2
    de78:	00800074 	movhi	r2,1
    de7c:	10b7a704 	addi	r2,r2,-8548
    de80:	80a1883a 	add	r16,r16,r2
    de84:	81000017 	ldw	r4,0(r16)
    de88:	9d46f03a 	xor	r3,r19,r21
    de8c:	180f883a 	mov	r7,r3
    de90:	18803fcc 	andi	r2,r3,255
    de94:	a18dc83a 	sub	r6,r20,r6
    de98:	2000683a 	jmp	r4
    de9c:	0000e080 	call	e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
    dea0:	0000df04 	movi	zero,892
    dea4:	0000e074 	movhi	zero,897
    dea8:	0000def0 	cmpltui	zero,zero,891
    deac:	0000e074 	movhi	zero,897
    deb0:	0000e04c 	andi	zero,zero,897
    deb4:	0000e074 	movhi	zero,897
    deb8:	0000def0 	cmpltui	zero,zero,891
    debc:	0000df04 	movi	zero,892
    dec0:	0000df04 	movi	zero,892
    dec4:	0000e04c 	andi	zero,zero,897
    dec8:	0000def0 	cmpltui	zero,zero,891
    decc:	0000e160 	cmpeqi	zero,zero,901
    ded0:	0000e160 	cmpeqi	zero,zero,901
    ded4:	0000e160 	cmpeqi	zero,zero,901
    ded8:	0000e114 	movui	zero,900
    dedc:	9000581e 	bne	r18,zero,e040 <__divsf3+0x270>
    dee0:	04000204 	movi	r16,8
    dee4:	05c00084 	movi	r23,2
    dee8:	003fd306 	br	de38 <__alt_data_end+0xfc00de38>
    deec:	0023883a 	mov	r17,zero
    def0:	e02d883a 	mov	r22,fp
    def4:	282f883a 	mov	r23,r5
    def8:	00800084 	movi	r2,2
    defc:	b8808f1e 	bne	r23,r2,e13c <__divsf3+0x36c>
    df00:	b005883a 	mov	r2,r22
    df04:	11c0004c 	andi	r7,r2,1
    df08:	013fffc4 	movi	r4,-1
    df0c:	000d883a 	mov	r6,zero
    df10:	21003fcc 	andi	r4,r4,255
    df14:	200895fa 	slli	r4,r4,23
    df18:	38803fcc 	andi	r2,r7,255
    df1c:	00c02034 	movhi	r3,128
    df20:	100497fa 	slli	r2,r2,31
    df24:	18ffffc4 	addi	r3,r3,-1
    df28:	30c6703a 	and	r3,r6,r3
    df2c:	1906b03a 	or	r3,r3,r4
    df30:	1884b03a 	or	r2,r3,r2
    df34:	dfc00a17 	ldw	ra,40(sp)
    df38:	df000917 	ldw	fp,36(sp)
    df3c:	ddc00817 	ldw	r23,32(sp)
    df40:	dd800717 	ldw	r22,28(sp)
    df44:	dd400617 	ldw	r21,24(sp)
    df48:	dd000517 	ldw	r20,20(sp)
    df4c:	dcc00417 	ldw	r19,16(sp)
    df50:	dc800317 	ldw	r18,12(sp)
    df54:	dc400217 	ldw	r17,8(sp)
    df58:	dc000117 	ldw	r16,4(sp)
    df5c:	dec00b04 	addi	sp,sp,44
    df60:	f800283a 	ret
    df64:	90002b1e 	bne	r18,zero,e014 <__divsf3+0x244>
    df68:	04000104 	movi	r16,4
    df6c:	05c00044 	movi	r23,1
    df70:	003fb106 	br	de38 <__alt_data_end+0xfc00de38>
    df74:	8800251e 	bne	r17,zero,e00c <__divsf3+0x23c>
    df78:	01400084 	movi	r5,2
    df7c:	00000206 	br	df88 <__divsf3+0x1b8>
    df80:	88001a1e 	bne	r17,zero,dfec <__divsf3+0x21c>
    df84:	01400044 	movi	r5,1
    df88:	8160b03a 	or	r16,r16,r5
    df8c:	802090ba 	slli	r16,r16,2
    df90:	00c00074 	movhi	r3,1
    df94:	18f7eb04 	addi	r3,r3,-8276
    df98:	80e1883a 	add	r16,r16,r3
    df9c:	80c00017 	ldw	r3,0(r16)
    dfa0:	9d44f03a 	xor	r2,r19,r21
    dfa4:	a18dc83a 	sub	r6,r20,r6
    dfa8:	1800683a 	jmp	r3
    dfac:	0000df04 	movi	zero,892
    dfb0:	0000df04 	movi	zero,892
    dfb4:	0000e150 	cmplti	zero,zero,901
    dfb8:	0000deec 	andhi	zero,zero,891
    dfbc:	0000e150 	cmplti	zero,zero,901
    dfc0:	0000e04c 	andi	zero,zero,897
    dfc4:	0000e150 	cmplti	zero,zero,901
    dfc8:	0000deec 	andhi	zero,zero,891
    dfcc:	0000df04 	movi	zero,892
    dfd0:	0000df04 	movi	zero,892
    dfd4:	0000e04c 	andi	zero,zero,897
    dfd8:	0000deec 	andhi	zero,zero,891
    dfdc:	0000e160 	cmpeqi	zero,zero,901
    dfe0:	0000e160 	cmpeqi	zero,zero,901
    dfe4:	0000e160 	cmpeqi	zero,zero,901
    dfe8:	0000e178 	rdprs	zero,zero,901
    dfec:	8809883a 	mov	r4,r17
    dff0:	000f3840 	call	f384 <__clzsi2>
    dff4:	10fffec4 	addi	r3,r2,-5
    dff8:	10801d84 	addi	r2,r2,118
    dffc:	88e2983a 	sll	r17,r17,r3
    e000:	008dc83a 	sub	r6,zero,r2
    e004:	000b883a 	mov	r5,zero
    e008:	003f9906 	br	de70 <__alt_data_end+0xfc00de70>
    e00c:	014000c4 	movi	r5,3
    e010:	003f9706 	br	de70 <__alt_data_end+0xfc00de70>
    e014:	9009883a 	mov	r4,r18
    e018:	d9400015 	stw	r5,0(sp)
    e01c:	000f3840 	call	f384 <__clzsi2>
    e020:	10fffec4 	addi	r3,r2,-5
    e024:	11801d84 	addi	r6,r2,118
    e028:	90e4983a 	sll	r18,r18,r3
    e02c:	01a9c83a 	sub	r20,zero,r6
    e030:	0021883a 	mov	r16,zero
    e034:	002f883a 	mov	r23,zero
    e038:	d9400017 	ldw	r5,0(sp)
    e03c:	003f7e06 	br	de38 <__alt_data_end+0xfc00de38>
    e040:	04000304 	movi	r16,12
    e044:	05c000c4 	movi	r23,3
    e048:	003f7b06 	br	de38 <__alt_data_end+0xfc00de38>
    e04c:	01802034 	movhi	r6,128
    e050:	000f883a 	mov	r7,zero
    e054:	31bfffc4 	addi	r6,r6,-1
    e058:	013fffc4 	movi	r4,-1
    e05c:	003fac06 	br	df10 <__alt_data_end+0xfc00df10>
    e060:	01400044 	movi	r5,1
    e064:	2909c83a 	sub	r4,r5,r4
    e068:	00c006c4 	movi	r3,27
    e06c:	19004b0e 	bge	r3,r4,e19c <__divsf3+0x3cc>
    e070:	114e703a 	and	r7,r2,r5
    e074:	0009883a 	mov	r4,zero
    e078:	000d883a 	mov	r6,zero
    e07c:	003fa406 	br	df10 <__alt_data_end+0xfc00df10>
    e080:	9006917a 	slli	r3,r18,5
    e084:	8822917a 	slli	r17,r17,5
    e088:	1c40372e 	bgeu	r3,r17,e168 <__divsf3+0x398>
    e08c:	31bfffc4 	addi	r6,r6,-1
    e090:	010006c4 	movi	r4,27
    e094:	000b883a 	mov	r5,zero
    e098:	180f883a 	mov	r7,r3
    e09c:	294b883a 	add	r5,r5,r5
    e0a0:	18c7883a 	add	r3,r3,r3
    e0a4:	38000116 	blt	r7,zero,e0ac <__divsf3+0x2dc>
    e0a8:	1c400236 	bltu	r3,r17,e0b4 <__divsf3+0x2e4>
    e0ac:	1c47c83a 	sub	r3,r3,r17
    e0b0:	29400054 	ori	r5,r5,1
    e0b4:	213fffc4 	addi	r4,r4,-1
    e0b8:	203ff71e 	bne	r4,zero,e098 <__alt_data_end+0xfc00e098>
    e0bc:	1806c03a 	cmpne	r3,r3,zero
    e0c0:	1962b03a 	or	r17,r3,r5
    e0c4:	31001fc4 	addi	r4,r6,127
    e0c8:	013fe50e 	bge	zero,r4,e060 <__alt_data_end+0xfc00e060>
    e0cc:	88c001cc 	andi	r3,r17,7
    e0d0:	18000426 	beq	r3,zero,e0e4 <__divsf3+0x314>
    e0d4:	88c003cc 	andi	r3,r17,15
    e0d8:	01400104 	movi	r5,4
    e0dc:	19400126 	beq	r3,r5,e0e4 <__divsf3+0x314>
    e0e0:	8963883a 	add	r17,r17,r5
    e0e4:	88c2002c 	andhi	r3,r17,2048
    e0e8:	18000426 	beq	r3,zero,e0fc <__divsf3+0x32c>
    e0ec:	00fe0034 	movhi	r3,63488
    e0f0:	18ffffc4 	addi	r3,r3,-1
    e0f4:	31002004 	addi	r4,r6,128
    e0f8:	88e2703a 	and	r17,r17,r3
    e0fc:	00c03f84 	movi	r3,254
    e100:	193f8016 	blt	r3,r4,df04 <__alt_data_end+0xfc00df04>
    e104:	880c91ba 	slli	r6,r17,6
    e108:	11c0004c 	andi	r7,r2,1
    e10c:	300cd27a 	srli	r6,r6,9
    e110:	003f7f06 	br	df10 <__alt_data_end+0xfc00df10>
    e114:	9080102c 	andhi	r2,r18,64
    e118:	10000226 	beq	r2,zero,e124 <__divsf3+0x354>
    e11c:	8880102c 	andhi	r2,r17,64
    e120:	10001826 	beq	r2,zero,e184 <__divsf3+0x3b4>
    e124:	00802034 	movhi	r2,128
    e128:	91801034 	orhi	r6,r18,64
    e12c:	10bfffc4 	addi	r2,r2,-1
    e130:	980f883a 	mov	r7,r19
    e134:	308c703a 	and	r6,r6,r2
    e138:	003fc706 	br	e058 <__alt_data_end+0xfc00e058>
    e13c:	008000c4 	movi	r2,3
    e140:	b8802d26 	beq	r23,r2,e1f8 <__divsf3+0x428>
    e144:	00c00044 	movi	r3,1
    e148:	b005883a 	mov	r2,r22
    e14c:	b8ffdd1e 	bne	r23,r3,e0c4 <__alt_data_end+0xfc00e0c4>
    e150:	11c0004c 	andi	r7,r2,1
    e154:	0009883a 	mov	r4,zero
    e158:	000d883a 	mov	r6,zero
    e15c:	003f6c06 	br	df10 <__alt_data_end+0xfc00df10>
    e160:	9023883a 	mov	r17,r18
    e164:	003f6406 	br	def8 <__alt_data_end+0xfc00def8>
    e168:	1c47c83a 	sub	r3,r3,r17
    e16c:	01000684 	movi	r4,26
    e170:	01400044 	movi	r5,1
    e174:	003fc806 	br	e098 <__alt_data_end+0xfc00e098>
    e178:	9080102c 	andhi	r2,r18,64
    e17c:	103fe926 	beq	r2,zero,e124 <__alt_data_end+0xfc00e124>
    e180:	0023883a 	mov	r17,zero
    e184:	00802034 	movhi	r2,128
    e188:	89801034 	orhi	r6,r17,64
    e18c:	10bfffc4 	addi	r2,r2,-1
    e190:	a80f883a 	mov	r7,r21
    e194:	308c703a 	and	r6,r6,r2
    e198:	003faf06 	br	e058 <__alt_data_end+0xfc00e058>
    e19c:	01c00804 	movi	r7,32
    e1a0:	390fc83a 	sub	r7,r7,r4
    e1a4:	89ce983a 	sll	r7,r17,r7
    e1a8:	890ad83a 	srl	r5,r17,r4
    e1ac:	380ec03a 	cmpne	r7,r7,zero
    e1b0:	29cab03a 	or	r5,r5,r7
    e1b4:	28c001cc 	andi	r3,r5,7
    e1b8:	18000426 	beq	r3,zero,e1cc <__divsf3+0x3fc>
    e1bc:	28c003cc 	andi	r3,r5,15
    e1c0:	01000104 	movi	r4,4
    e1c4:	19000126 	beq	r3,r4,e1cc <__divsf3+0x3fc>
    e1c8:	290b883a 	add	r5,r5,r4
    e1cc:	28c1002c 	andhi	r3,r5,1024
    e1d0:	18000426 	beq	r3,zero,e1e4 <__divsf3+0x414>
    e1d4:	11c0004c 	andi	r7,r2,1
    e1d8:	01000044 	movi	r4,1
    e1dc:	000d883a 	mov	r6,zero
    e1e0:	003f4b06 	br	df10 <__alt_data_end+0xfc00df10>
    e1e4:	280a91ba 	slli	r5,r5,6
    e1e8:	11c0004c 	andi	r7,r2,1
    e1ec:	0009883a 	mov	r4,zero
    e1f0:	280cd27a 	srli	r6,r5,9
    e1f4:	003f4606 	br	df10 <__alt_data_end+0xfc00df10>
    e1f8:	00802034 	movhi	r2,128
    e1fc:	89801034 	orhi	r6,r17,64
    e200:	10bfffc4 	addi	r2,r2,-1
    e204:	b00f883a 	mov	r7,r22
    e208:	308c703a 	and	r6,r6,r2
    e20c:	003f9206 	br	e058 <__alt_data_end+0xfc00e058>

0000e210 <__gesf2>:
    e210:	2004d5fa 	srli	r2,r4,23
    e214:	2806d5fa 	srli	r3,r5,23
    e218:	01802034 	movhi	r6,128
    e21c:	31bfffc4 	addi	r6,r6,-1
    e220:	10803fcc 	andi	r2,r2,255
    e224:	01c03fc4 	movi	r7,255
    e228:	3110703a 	and	r8,r6,r4
    e22c:	18c03fcc 	andi	r3,r3,255
    e230:	314c703a 	and	r6,r6,r5
    e234:	2008d7fa 	srli	r4,r4,31
    e238:	280ad7fa 	srli	r5,r5,31
    e23c:	11c01926 	beq	r2,r7,e2a4 <__gesf2+0x94>
    e240:	01c03fc4 	movi	r7,255
    e244:	19c00f26 	beq	r3,r7,e284 <__gesf2+0x74>
    e248:	1000061e 	bne	r2,zero,e264 <__gesf2+0x54>
    e24c:	400f003a 	cmpeq	r7,r8,zero
    e250:	1800071e 	bne	r3,zero,e270 <__gesf2+0x60>
    e254:	3000061e 	bne	r6,zero,e270 <__gesf2+0x60>
    e258:	0005883a 	mov	r2,zero
    e25c:	40000e1e 	bne	r8,zero,e298 <__gesf2+0x88>
    e260:	f800283a 	ret
    e264:	18000a1e 	bne	r3,zero,e290 <__gesf2+0x80>
    e268:	30000b26 	beq	r6,zero,e298 <__gesf2+0x88>
    e26c:	000f883a 	mov	r7,zero
    e270:	29403fcc 	andi	r5,r5,255
    e274:	38000726 	beq	r7,zero,e294 <__gesf2+0x84>
    e278:	28000826 	beq	r5,zero,e29c <__gesf2+0x8c>
    e27c:	00800044 	movi	r2,1
    e280:	f800283a 	ret
    e284:	303ff026 	beq	r6,zero,e248 <__alt_data_end+0xfc00e248>
    e288:	00bfff84 	movi	r2,-2
    e28c:	f800283a 	ret
    e290:	29403fcc 	andi	r5,r5,255
    e294:	21400526 	beq	r4,r5,e2ac <__gesf2+0x9c>
    e298:	203ff826 	beq	r4,zero,e27c <__alt_data_end+0xfc00e27c>
    e29c:	00bfffc4 	movi	r2,-1
    e2a0:	f800283a 	ret
    e2a4:	403fe626 	beq	r8,zero,e240 <__alt_data_end+0xfc00e240>
    e2a8:	003ff706 	br	e288 <__alt_data_end+0xfc00e288>
    e2ac:	18bffa16 	blt	r3,r2,e298 <__alt_data_end+0xfc00e298>
    e2b0:	10c00216 	blt	r2,r3,e2bc <__gesf2+0xac>
    e2b4:	323ff836 	bltu	r6,r8,e298 <__alt_data_end+0xfc00e298>
    e2b8:	4180022e 	bgeu	r8,r6,e2c4 <__gesf2+0xb4>
    e2bc:	203fef1e 	bne	r4,zero,e27c <__alt_data_end+0xfc00e27c>
    e2c0:	003ff606 	br	e29c <__alt_data_end+0xfc00e29c>
    e2c4:	0005883a 	mov	r2,zero
    e2c8:	f800283a 	ret

0000e2cc <__mulsf3>:
    e2cc:	defff504 	addi	sp,sp,-44
    e2d0:	dc000115 	stw	r16,4(sp)
    e2d4:	2020d5fa 	srli	r16,r4,23
    e2d8:	dd400615 	stw	r21,24(sp)
    e2dc:	202ad7fa 	srli	r21,r4,31
    e2e0:	dc800315 	stw	r18,12(sp)
    e2e4:	04802034 	movhi	r18,128
    e2e8:	df000915 	stw	fp,36(sp)
    e2ec:	dd000515 	stw	r20,20(sp)
    e2f0:	94bfffc4 	addi	r18,r18,-1
    e2f4:	dfc00a15 	stw	ra,40(sp)
    e2f8:	ddc00815 	stw	r23,32(sp)
    e2fc:	dd800715 	stw	r22,28(sp)
    e300:	dcc00415 	stw	r19,16(sp)
    e304:	dc400215 	stw	r17,8(sp)
    e308:	84003fcc 	andi	r16,r16,255
    e30c:	9124703a 	and	r18,r18,r4
    e310:	a829883a 	mov	r20,r21
    e314:	af003fcc 	andi	fp,r21,255
    e318:	80005426 	beq	r16,zero,e46c <__mulsf3+0x1a0>
    e31c:	00803fc4 	movi	r2,255
    e320:	80802f26 	beq	r16,r2,e3e0 <__mulsf3+0x114>
    e324:	91002034 	orhi	r4,r18,128
    e328:	202490fa 	slli	r18,r4,3
    e32c:	843fe044 	addi	r16,r16,-127
    e330:	0023883a 	mov	r17,zero
    e334:	002f883a 	mov	r23,zero
    e338:	2804d5fa 	srli	r2,r5,23
    e33c:	282cd7fa 	srli	r22,r5,31
    e340:	01002034 	movhi	r4,128
    e344:	213fffc4 	addi	r4,r4,-1
    e348:	10803fcc 	andi	r2,r2,255
    e34c:	2166703a 	and	r19,r4,r5
    e350:	b1803fcc 	andi	r6,r22,255
    e354:	10004c26 	beq	r2,zero,e488 <__mulsf3+0x1bc>
    e358:	00c03fc4 	movi	r3,255
    e35c:	10c04726 	beq	r2,r3,e47c <__mulsf3+0x1b0>
    e360:	99002034 	orhi	r4,r19,128
    e364:	202690fa 	slli	r19,r4,3
    e368:	10bfe044 	addi	r2,r2,-127
    e36c:	0007883a 	mov	r3,zero
    e370:	80a1883a 	add	r16,r16,r2
    e374:	010003c4 	movi	r4,15
    e378:	1c44b03a 	or	r2,r3,r17
    e37c:	b56af03a 	xor	r21,r22,r21
    e380:	81c00044 	addi	r7,r16,1
    e384:	20806b36 	bltu	r4,r2,e534 <__mulsf3+0x268>
    e388:	100490ba 	slli	r2,r2,2
    e38c:	01000074 	movhi	r4,1
    e390:	2138e804 	addi	r4,r4,-7264
    e394:	1105883a 	add	r2,r2,r4
    e398:	10800017 	ldw	r2,0(r2)
    e39c:	1000683a 	jmp	r2
    e3a0:	0000e534 	movhi	zero,916
    e3a4:	0000e3f4 	movhi	zero,911
    e3a8:	0000e3f4 	movhi	zero,911
    e3ac:	0000e3f0 	cmpltui	zero,zero,911
    e3b0:	0000e518 	cmpnei	zero,zero,916
    e3b4:	0000e518 	cmpnei	zero,zero,916
    e3b8:	0000e504 	movi	zero,916
    e3bc:	0000e3f0 	cmpltui	zero,zero,911
    e3c0:	0000e518 	cmpnei	zero,zero,916
    e3c4:	0000e504 	movi	zero,916
    e3c8:	0000e518 	cmpnei	zero,zero,916
    e3cc:	0000e3f0 	cmpltui	zero,zero,911
    e3d0:	0000e524 	muli	zero,zero,916
    e3d4:	0000e524 	muli	zero,zero,916
    e3d8:	0000e524 	muli	zero,zero,916
    e3dc:	0000e634 	movhi	zero,920
    e3e0:	90003b1e 	bne	r18,zero,e4d0 <__mulsf3+0x204>
    e3e4:	04400204 	movi	r17,8
    e3e8:	05c00084 	movi	r23,2
    e3ec:	003fd206 	br	e338 <__alt_data_end+0xfc00e338>
    e3f0:	302b883a 	mov	r21,r6
    e3f4:	00800084 	movi	r2,2
    e3f8:	18802626 	beq	r3,r2,e494 <__mulsf3+0x1c8>
    e3fc:	008000c4 	movi	r2,3
    e400:	1880b826 	beq	r3,r2,e6e4 <__mulsf3+0x418>
    e404:	00800044 	movi	r2,1
    e408:	1880af1e 	bne	r3,r2,e6c8 <__mulsf3+0x3fc>
    e40c:	a829883a 	mov	r20,r21
    e410:	0007883a 	mov	r3,zero
    e414:	0009883a 	mov	r4,zero
    e418:	18803fcc 	andi	r2,r3,255
    e41c:	100695fa 	slli	r3,r2,23
    e420:	a0803fcc 	andi	r2,r20,255
    e424:	100a97fa 	slli	r5,r2,31
    e428:	00802034 	movhi	r2,128
    e42c:	10bfffc4 	addi	r2,r2,-1
    e430:	2084703a 	and	r2,r4,r2
    e434:	10c4b03a 	or	r2,r2,r3
    e438:	1144b03a 	or	r2,r2,r5
    e43c:	dfc00a17 	ldw	ra,40(sp)
    e440:	df000917 	ldw	fp,36(sp)
    e444:	ddc00817 	ldw	r23,32(sp)
    e448:	dd800717 	ldw	r22,28(sp)
    e44c:	dd400617 	ldw	r21,24(sp)
    e450:	dd000517 	ldw	r20,20(sp)
    e454:	dcc00417 	ldw	r19,16(sp)
    e458:	dc800317 	ldw	r18,12(sp)
    e45c:	dc400217 	ldw	r17,8(sp)
    e460:	dc000117 	ldw	r16,4(sp)
    e464:	dec00b04 	addi	sp,sp,44
    e468:	f800283a 	ret
    e46c:	90000d1e 	bne	r18,zero,e4a4 <__mulsf3+0x1d8>
    e470:	04400104 	movi	r17,4
    e474:	05c00044 	movi	r23,1
    e478:	003faf06 	br	e338 <__alt_data_end+0xfc00e338>
    e47c:	9806c03a 	cmpne	r3,r19,zero
    e480:	18c00084 	addi	r3,r3,2
    e484:	003fba06 	br	e370 <__alt_data_end+0xfc00e370>
    e488:	9800141e 	bne	r19,zero,e4dc <__mulsf3+0x210>
    e48c:	00c00044 	movi	r3,1
    e490:	003fb706 	br	e370 <__alt_data_end+0xfc00e370>
    e494:	a829883a 	mov	r20,r21
    e498:	00ffffc4 	movi	r3,-1
    e49c:	0009883a 	mov	r4,zero
    e4a0:	003fdd06 	br	e418 <__alt_data_end+0xfc00e418>
    e4a4:	9009883a 	mov	r4,r18
    e4a8:	d9400015 	stw	r5,0(sp)
    e4ac:	000f3840 	call	f384 <__clzsi2>
    e4b0:	10fffec4 	addi	r3,r2,-5
    e4b4:	10801d84 	addi	r2,r2,118
    e4b8:	90e4983a 	sll	r18,r18,r3
    e4bc:	00a1c83a 	sub	r16,zero,r2
    e4c0:	0023883a 	mov	r17,zero
    e4c4:	002f883a 	mov	r23,zero
    e4c8:	d9400017 	ldw	r5,0(sp)
    e4cc:	003f9a06 	br	e338 <__alt_data_end+0xfc00e338>
    e4d0:	04400304 	movi	r17,12
    e4d4:	05c000c4 	movi	r23,3
    e4d8:	003f9706 	br	e338 <__alt_data_end+0xfc00e338>
    e4dc:	9809883a 	mov	r4,r19
    e4e0:	d9800015 	stw	r6,0(sp)
    e4e4:	000f3840 	call	f384 <__clzsi2>
    e4e8:	10fffec4 	addi	r3,r2,-5
    e4ec:	10801d84 	addi	r2,r2,118
    e4f0:	98e6983a 	sll	r19,r19,r3
    e4f4:	0085c83a 	sub	r2,zero,r2
    e4f8:	0007883a 	mov	r3,zero
    e4fc:	d9800017 	ldw	r6,0(sp)
    e500:	003f9b06 	br	e370 <__alt_data_end+0xfc00e370>
    e504:	01002034 	movhi	r4,128
    e508:	0029883a 	mov	r20,zero
    e50c:	213fffc4 	addi	r4,r4,-1
    e510:	00ffffc4 	movi	r3,-1
    e514:	003fc006 	br	e418 <__alt_data_end+0xfc00e418>
    e518:	9027883a 	mov	r19,r18
    e51c:	b807883a 	mov	r3,r23
    e520:	003fb406 	br	e3f4 <__alt_data_end+0xfc00e3f4>
    e524:	9027883a 	mov	r19,r18
    e528:	e02b883a 	mov	r21,fp
    e52c:	b807883a 	mov	r3,r23
    e530:	003fb006 	br	e3f4 <__alt_data_end+0xfc00e3f4>
    e534:	9028d43a 	srli	r20,r18,16
    e538:	982cd43a 	srli	r22,r19,16
    e53c:	94bfffcc 	andi	r18,r18,65535
    e540:	9cffffcc 	andi	r19,r19,65535
    e544:	980b883a 	mov	r5,r19
    e548:	9009883a 	mov	r4,r18
    e54c:	d9c00015 	stw	r7,0(sp)
    e550:	000d8e00 	call	d8e0 <__mulsi3>
    e554:	a00b883a 	mov	r5,r20
    e558:	9809883a 	mov	r4,r19
    e55c:	1023883a 	mov	r17,r2
    e560:	000d8e00 	call	d8e0 <__mulsi3>
    e564:	a009883a 	mov	r4,r20
    e568:	b00b883a 	mov	r5,r22
    e56c:	1027883a 	mov	r19,r2
    e570:	000d8e00 	call	d8e0 <__mulsi3>
    e574:	b00b883a 	mov	r5,r22
    e578:	9009883a 	mov	r4,r18
    e57c:	1029883a 	mov	r20,r2
    e580:	000d8e00 	call	d8e0 <__mulsi3>
    e584:	8806d43a 	srli	r3,r17,16
    e588:	14c5883a 	add	r2,r2,r19
    e58c:	d9c00017 	ldw	r7,0(sp)
    e590:	1885883a 	add	r2,r3,r2
    e594:	14c0022e 	bgeu	r2,r19,e5a0 <__mulsf3+0x2d4>
    e598:	00c00074 	movhi	r3,1
    e59c:	a0e9883a 	add	r20,r20,r3
    e5a0:	1026943a 	slli	r19,r2,16
    e5a4:	8c7fffcc 	andi	r17,r17,65535
    e5a8:	1004d43a 	srli	r2,r2,16
    e5ac:	9c63883a 	add	r17,r19,r17
    e5b0:	882691ba 	slli	r19,r17,6
    e5b4:	1505883a 	add	r2,r2,r20
    e5b8:	8822d6ba 	srli	r17,r17,26
    e5bc:	100891ba 	slli	r4,r2,6
    e5c0:	9826c03a 	cmpne	r19,r19,zero
    e5c4:	9c62b03a 	or	r17,r19,r17
    e5c8:	8926b03a 	or	r19,r17,r4
    e5cc:	9882002c 	andhi	r2,r19,2048
    e5d0:	10000426 	beq	r2,zero,e5e4 <__mulsf3+0x318>
    e5d4:	9804d07a 	srli	r2,r19,1
    e5d8:	9900004c 	andi	r4,r19,1
    e5dc:	3821883a 	mov	r16,r7
    e5e0:	1126b03a 	or	r19,r2,r4
    e5e4:	80c01fc4 	addi	r3,r16,127
    e5e8:	00c0210e 	bge	zero,r3,e670 <__mulsf3+0x3a4>
    e5ec:	988001cc 	andi	r2,r19,7
    e5f0:	10000426 	beq	r2,zero,e604 <__mulsf3+0x338>
    e5f4:	988003cc 	andi	r2,r19,15
    e5f8:	01000104 	movi	r4,4
    e5fc:	11000126 	beq	r2,r4,e604 <__mulsf3+0x338>
    e600:	9927883a 	add	r19,r19,r4
    e604:	9882002c 	andhi	r2,r19,2048
    e608:	10000426 	beq	r2,zero,e61c <__mulsf3+0x350>
    e60c:	00be0034 	movhi	r2,63488
    e610:	10bfffc4 	addi	r2,r2,-1
    e614:	80c02004 	addi	r3,r16,128
    e618:	98a6703a 	and	r19,r19,r2
    e61c:	00803f84 	movi	r2,254
    e620:	10ff9c16 	blt	r2,r3,e494 <__alt_data_end+0xfc00e494>
    e624:	980891ba 	slli	r4,r19,6
    e628:	a829883a 	mov	r20,r21
    e62c:	2008d27a 	srli	r4,r4,9
    e630:	003f7906 	br	e418 <__alt_data_end+0xfc00e418>
    e634:	9080102c 	andhi	r2,r18,64
    e638:	10000826 	beq	r2,zero,e65c <__mulsf3+0x390>
    e63c:	9880102c 	andhi	r2,r19,64
    e640:	1000061e 	bne	r2,zero,e65c <__mulsf3+0x390>
    e644:	00802034 	movhi	r2,128
    e648:	99001034 	orhi	r4,r19,64
    e64c:	10bfffc4 	addi	r2,r2,-1
    e650:	b029883a 	mov	r20,r22
    e654:	2088703a 	and	r4,r4,r2
    e658:	003fad06 	br	e510 <__alt_data_end+0xfc00e510>
    e65c:	00802034 	movhi	r2,128
    e660:	91001034 	orhi	r4,r18,64
    e664:	10bfffc4 	addi	r2,r2,-1
    e668:	2088703a 	and	r4,r4,r2
    e66c:	003fa806 	br	e510 <__alt_data_end+0xfc00e510>
    e670:	00800044 	movi	r2,1
    e674:	10c7c83a 	sub	r3,r2,r3
    e678:	008006c4 	movi	r2,27
    e67c:	10ff6316 	blt	r2,r3,e40c <__alt_data_end+0xfc00e40c>
    e680:	00800804 	movi	r2,32
    e684:	10c5c83a 	sub	r2,r2,r3
    e688:	9884983a 	sll	r2,r19,r2
    e68c:	98c6d83a 	srl	r3,r19,r3
    e690:	1004c03a 	cmpne	r2,r2,zero
    e694:	1884b03a 	or	r2,r3,r2
    e698:	10c001cc 	andi	r3,r2,7
    e69c:	18000426 	beq	r3,zero,e6b0 <__mulsf3+0x3e4>
    e6a0:	10c003cc 	andi	r3,r2,15
    e6a4:	01000104 	movi	r4,4
    e6a8:	19000126 	beq	r3,r4,e6b0 <__mulsf3+0x3e4>
    e6ac:	1105883a 	add	r2,r2,r4
    e6b0:	10c1002c 	andhi	r3,r2,1024
    e6b4:	18000626 	beq	r3,zero,e6d0 <__mulsf3+0x404>
    e6b8:	a829883a 	mov	r20,r21
    e6bc:	00c00044 	movi	r3,1
    e6c0:	0009883a 	mov	r4,zero
    e6c4:	003f5406 	br	e418 <__alt_data_end+0xfc00e418>
    e6c8:	3821883a 	mov	r16,r7
    e6cc:	003fc506 	br	e5e4 <__alt_data_end+0xfc00e5e4>
    e6d0:	100491ba 	slli	r2,r2,6
    e6d4:	a829883a 	mov	r20,r21
    e6d8:	0007883a 	mov	r3,zero
    e6dc:	1008d27a 	srli	r4,r2,9
    e6e0:	003f4d06 	br	e418 <__alt_data_end+0xfc00e418>
    e6e4:	00802034 	movhi	r2,128
    e6e8:	99001034 	orhi	r4,r19,64
    e6ec:	10bfffc4 	addi	r2,r2,-1
    e6f0:	a829883a 	mov	r20,r21
    e6f4:	2088703a 	and	r4,r4,r2
    e6f8:	003f8506 	br	e510 <__alt_data_end+0xfc00e510>

0000e6fc <__subsf3>:
    e6fc:	defffc04 	addi	sp,sp,-16
    e700:	280cd5fa 	srli	r6,r5,23
    e704:	dc000015 	stw	r16,0(sp)
    e708:	01c02034 	movhi	r7,128
    e70c:	2020d5fa 	srli	r16,r4,23
    e710:	39ffffc4 	addi	r7,r7,-1
    e714:	3906703a 	and	r3,r7,r4
    e718:	dc400115 	stw	r17,4(sp)
    e71c:	394e703a 	and	r7,r7,r5
    e720:	2022d7fa 	srli	r17,r4,31
    e724:	dfc00315 	stw	ra,12(sp)
    e728:	dc800215 	stw	r18,8(sp)
    e72c:	31803fcc 	andi	r6,r6,255
    e730:	01003fc4 	movi	r4,255
    e734:	84003fcc 	andi	r16,r16,255
    e738:	180690fa 	slli	r3,r3,3
    e73c:	2804d7fa 	srli	r2,r5,31
    e740:	380e90fa 	slli	r7,r7,3
    e744:	31006d26 	beq	r6,r4,e8fc <__subsf3+0x200>
    e748:	1080005c 	xori	r2,r2,1
    e74c:	8189c83a 	sub	r4,r16,r6
    e750:	14404f26 	beq	r2,r17,e890 <__subsf3+0x194>
    e754:	0100770e 	bge	zero,r4,e934 <__subsf3+0x238>
    e758:	30001e1e 	bne	r6,zero,e7d4 <__subsf3+0xd8>
    e75c:	38006a1e 	bne	r7,zero,e908 <__subsf3+0x20c>
    e760:	188001cc 	andi	r2,r3,7
    e764:	10000426 	beq	r2,zero,e778 <__subsf3+0x7c>
    e768:	188003cc 	andi	r2,r3,15
    e76c:	01000104 	movi	r4,4
    e770:	11000126 	beq	r2,r4,e778 <__subsf3+0x7c>
    e774:	1907883a 	add	r3,r3,r4
    e778:	1881002c 	andhi	r2,r3,1024
    e77c:	10003926 	beq	r2,zero,e864 <__subsf3+0x168>
    e780:	84000044 	addi	r16,r16,1
    e784:	00803fc4 	movi	r2,255
    e788:	80807526 	beq	r16,r2,e960 <__subsf3+0x264>
    e78c:	180691ba 	slli	r3,r3,6
    e790:	8880004c 	andi	r2,r17,1
    e794:	180ad27a 	srli	r5,r3,9
    e798:	84003fcc 	andi	r16,r16,255
    e79c:	800695fa 	slli	r3,r16,23
    e7a0:	10803fcc 	andi	r2,r2,255
    e7a4:	01002034 	movhi	r4,128
    e7a8:	213fffc4 	addi	r4,r4,-1
    e7ac:	100497fa 	slli	r2,r2,31
    e7b0:	2920703a 	and	r16,r5,r4
    e7b4:	80e0b03a 	or	r16,r16,r3
    e7b8:	8084b03a 	or	r2,r16,r2
    e7bc:	dfc00317 	ldw	ra,12(sp)
    e7c0:	dc800217 	ldw	r18,8(sp)
    e7c4:	dc400117 	ldw	r17,4(sp)
    e7c8:	dc000017 	ldw	r16,0(sp)
    e7cc:	dec00404 	addi	sp,sp,16
    e7d0:	f800283a 	ret
    e7d4:	00803fc4 	movi	r2,255
    e7d8:	80bfe126 	beq	r16,r2,e760 <__alt_data_end+0xfc00e760>
    e7dc:	39c10034 	orhi	r7,r7,1024
    e7e0:	008006c4 	movi	r2,27
    e7e4:	11007416 	blt	r2,r4,e9b8 <__subsf3+0x2bc>
    e7e8:	00800804 	movi	r2,32
    e7ec:	1105c83a 	sub	r2,r2,r4
    e7f0:	3884983a 	sll	r2,r7,r2
    e7f4:	390ed83a 	srl	r7,r7,r4
    e7f8:	1008c03a 	cmpne	r4,r2,zero
    e7fc:	390eb03a 	or	r7,r7,r4
    e800:	19c7c83a 	sub	r3,r3,r7
    e804:	1881002c 	andhi	r2,r3,1024
    e808:	10001426 	beq	r2,zero,e85c <__subsf3+0x160>
    e80c:	04810034 	movhi	r18,1024
    e810:	94bfffc4 	addi	r18,r18,-1
    e814:	1ca4703a 	and	r18,r3,r18
    e818:	9009883a 	mov	r4,r18
    e81c:	000f3840 	call	f384 <__clzsi2>
    e820:	10bffec4 	addi	r2,r2,-5
    e824:	90a4983a 	sll	r18,r18,r2
    e828:	14005116 	blt	r2,r16,e970 <__subsf3+0x274>
    e82c:	1405c83a 	sub	r2,r2,r16
    e830:	10c00044 	addi	r3,r2,1
    e834:	00800804 	movi	r2,32
    e838:	10c5c83a 	sub	r2,r2,r3
    e83c:	9084983a 	sll	r2,r18,r2
    e840:	90e4d83a 	srl	r18,r18,r3
    e844:	0021883a 	mov	r16,zero
    e848:	1006c03a 	cmpne	r3,r2,zero
    e84c:	90c6b03a 	or	r3,r18,r3
    e850:	003fc306 	br	e760 <__alt_data_end+0xfc00e760>
    e854:	2000e026 	beq	r4,zero,ebd8 <__subsf3+0x4dc>
    e858:	2007883a 	mov	r3,r4
    e85c:	188001cc 	andi	r2,r3,7
    e860:	103fc11e 	bne	r2,zero,e768 <__alt_data_end+0xfc00e768>
    e864:	180ad0fa 	srli	r5,r3,3
    e868:	00c03fc4 	movi	r3,255
    e86c:	8880004c 	andi	r2,r17,1
    e870:	80c0031e 	bne	r16,r3,e880 <__subsf3+0x184>
    e874:	28006d26 	beq	r5,zero,ea2c <__subsf3+0x330>
    e878:	29401034 	orhi	r5,r5,64
    e87c:	043fffc4 	movi	r16,-1
    e880:	00c02034 	movhi	r3,128
    e884:	18ffffc4 	addi	r3,r3,-1
    e888:	28ca703a 	and	r5,r5,r3
    e88c:	003fc206 	br	e798 <__alt_data_end+0xfc00e798>
    e890:	01003c0e 	bge	zero,r4,e984 <__subsf3+0x288>
    e894:	30002126 	beq	r6,zero,e91c <__subsf3+0x220>
    e898:	01403fc4 	movi	r5,255
    e89c:	817fb026 	beq	r16,r5,e760 <__alt_data_end+0xfc00e760>
    e8a0:	39c10034 	orhi	r7,r7,1024
    e8a4:	014006c4 	movi	r5,27
    e8a8:	29007416 	blt	r5,r4,ea7c <__subsf3+0x380>
    e8ac:	01400804 	movi	r5,32
    e8b0:	290bc83a 	sub	r5,r5,r4
    e8b4:	394a983a 	sll	r5,r7,r5
    e8b8:	390ed83a 	srl	r7,r7,r4
    e8bc:	2808c03a 	cmpne	r4,r5,zero
    e8c0:	390eb03a 	or	r7,r7,r4
    e8c4:	19c7883a 	add	r3,r3,r7
    e8c8:	1901002c 	andhi	r4,r3,1024
    e8cc:	20003826 	beq	r4,zero,e9b0 <__subsf3+0x2b4>
    e8d0:	84000044 	addi	r16,r16,1
    e8d4:	01003fc4 	movi	r4,255
    e8d8:	81005426 	beq	r16,r4,ea2c <__subsf3+0x330>
    e8dc:	1023883a 	mov	r17,r2
    e8e0:	00bf0034 	movhi	r2,64512
    e8e4:	10bfffc4 	addi	r2,r2,-1
    e8e8:	1900004c 	andi	r4,r3,1
    e8ec:	1886703a 	and	r3,r3,r2
    e8f0:	1806d07a 	srli	r3,r3,1
    e8f4:	1906b03a 	or	r3,r3,r4
    e8f8:	003f9906 	br	e760 <__alt_data_end+0xfc00e760>
    e8fc:	383f9226 	beq	r7,zero,e748 <__alt_data_end+0xfc00e748>
    e900:	10803fcc 	andi	r2,r2,255
    e904:	003f9106 	br	e74c <__alt_data_end+0xfc00e74c>
    e908:	213fffc4 	addi	r4,r4,-1
    e90c:	203fbc26 	beq	r4,zero,e800 <__alt_data_end+0xfc00e800>
    e910:	00803fc4 	movi	r2,255
    e914:	80bfb21e 	bne	r16,r2,e7e0 <__alt_data_end+0xfc00e7e0>
    e918:	003f9106 	br	e760 <__alt_data_end+0xfc00e760>
    e91c:	383f9026 	beq	r7,zero,e760 <__alt_data_end+0xfc00e760>
    e920:	213fffc4 	addi	r4,r4,-1
    e924:	203fe726 	beq	r4,zero,e8c4 <__alt_data_end+0xfc00e8c4>
    e928:	01403fc4 	movi	r5,255
    e92c:	817fdd1e 	bne	r16,r5,e8a4 <__alt_data_end+0xfc00e8a4>
    e930:	003f8b06 	br	e760 <__alt_data_end+0xfc00e760>
    e934:	2000221e 	bne	r4,zero,e9c0 <__subsf3+0x2c4>
    e938:	81000044 	addi	r4,r16,1
    e93c:	21003fcc 	andi	r4,r4,255
    e940:	01400044 	movi	r5,1
    e944:	2900470e 	bge	r5,r4,ea64 <__subsf3+0x368>
    e948:	19e5c83a 	sub	r18,r3,r7
    e94c:	9141002c 	andhi	r5,r18,1024
    e950:	28002d26 	beq	r5,zero,ea08 <__subsf3+0x30c>
    e954:	38e5c83a 	sub	r18,r7,r3
    e958:	1023883a 	mov	r17,r2
    e95c:	003fae06 	br	e818 <__alt_data_end+0xfc00e818>
    e960:	8880004c 	andi	r2,r17,1
    e964:	043fffc4 	movi	r16,-1
    e968:	000b883a 	mov	r5,zero
    e96c:	003f8a06 	br	e798 <__alt_data_end+0xfc00e798>
    e970:	00ff0034 	movhi	r3,64512
    e974:	18ffffc4 	addi	r3,r3,-1
    e978:	80a1c83a 	sub	r16,r16,r2
    e97c:	90c6703a 	and	r3,r18,r3
    e980:	003f7706 	br	e760 <__alt_data_end+0xfc00e760>
    e984:	2000431e 	bne	r4,zero,ea94 <__subsf3+0x398>
    e988:	81000044 	addi	r4,r16,1
    e98c:	21803fcc 	andi	r6,r4,255
    e990:	01400044 	movi	r5,1
    e994:	2980280e 	bge	r5,r6,ea38 <__subsf3+0x33c>
    e998:	01403fc4 	movi	r5,255
    e99c:	21402326 	beq	r4,r5,ea2c <__subsf3+0x330>
    e9a0:	19c7883a 	add	r3,r3,r7
    e9a4:	1806d07a 	srli	r3,r3,1
    e9a8:	2021883a 	mov	r16,r4
    e9ac:	003f6c06 	br	e760 <__alt_data_end+0xfc00e760>
    e9b0:	1023883a 	mov	r17,r2
    e9b4:	003fa906 	br	e85c <__alt_data_end+0xfc00e85c>
    e9b8:	01c00044 	movi	r7,1
    e9bc:	003f9006 	br	e800 <__alt_data_end+0xfc00e800>
    e9c0:	8000151e 	bne	r16,zero,ea18 <__subsf3+0x31c>
    e9c4:	18002f26 	beq	r3,zero,ea84 <__subsf3+0x388>
    e9c8:	0108303a 	nor	r4,zero,r4
    e9cc:	20000a26 	beq	r4,zero,e9f8 <__subsf3+0x2fc>
    e9d0:	01403fc4 	movi	r5,255
    e9d4:	31402b26 	beq	r6,r5,ea84 <__subsf3+0x388>
    e9d8:	014006c4 	movi	r5,27
    e9dc:	29006e16 	blt	r5,r4,eb98 <__subsf3+0x49c>
    e9e0:	01400804 	movi	r5,32
    e9e4:	290bc83a 	sub	r5,r5,r4
    e9e8:	194a983a 	sll	r5,r3,r5
    e9ec:	1908d83a 	srl	r4,r3,r4
    e9f0:	2806c03a 	cmpne	r3,r5,zero
    e9f4:	20c6b03a 	or	r3,r4,r3
    e9f8:	38c7c83a 	sub	r3,r7,r3
    e9fc:	3021883a 	mov	r16,r6
    ea00:	1023883a 	mov	r17,r2
    ea04:	003f7f06 	br	e804 <__alt_data_end+0xfc00e804>
    ea08:	903f831e 	bne	r18,zero,e818 <__alt_data_end+0xfc00e818>
    ea0c:	0005883a 	mov	r2,zero
    ea10:	0021883a 	mov	r16,zero
    ea14:	003f9a06 	br	e880 <__alt_data_end+0xfc00e880>
    ea18:	01403fc4 	movi	r5,255
    ea1c:	31401926 	beq	r6,r5,ea84 <__subsf3+0x388>
    ea20:	0109c83a 	sub	r4,zero,r4
    ea24:	18c10034 	orhi	r3,r3,1024
    ea28:	003feb06 	br	e9d8 <__alt_data_end+0xfc00e9d8>
    ea2c:	043fffc4 	movi	r16,-1
    ea30:	000b883a 	mov	r5,zero
    ea34:	003f5806 	br	e798 <__alt_data_end+0xfc00e798>
    ea38:	8000481e 	bne	r16,zero,eb5c <__subsf3+0x460>
    ea3c:	18006226 	beq	r3,zero,ebc8 <__subsf3+0x4cc>
    ea40:	383f4726 	beq	r7,zero,e760 <__alt_data_end+0xfc00e760>
    ea44:	19c7883a 	add	r3,r3,r7
    ea48:	1881002c 	andhi	r2,r3,1024
    ea4c:	103f8326 	beq	r2,zero,e85c <__alt_data_end+0xfc00e85c>
    ea50:	00bf0034 	movhi	r2,64512
    ea54:	10bfffc4 	addi	r2,r2,-1
    ea58:	2821883a 	mov	r16,r5
    ea5c:	1886703a 	and	r3,r3,r2
    ea60:	003f3f06 	br	e760 <__alt_data_end+0xfc00e760>
    ea64:	80001c1e 	bne	r16,zero,ead8 <__subsf3+0x3dc>
    ea68:	1800261e 	bne	r3,zero,eb04 <__subsf3+0x408>
    ea6c:	38004c26 	beq	r7,zero,eba0 <__subsf3+0x4a4>
    ea70:	3807883a 	mov	r3,r7
    ea74:	1023883a 	mov	r17,r2
    ea78:	003f3906 	br	e760 <__alt_data_end+0xfc00e760>
    ea7c:	01c00044 	movi	r7,1
    ea80:	003f9006 	br	e8c4 <__alt_data_end+0xfc00e8c4>
    ea84:	3807883a 	mov	r3,r7
    ea88:	3021883a 	mov	r16,r6
    ea8c:	1023883a 	mov	r17,r2
    ea90:	003f3306 	br	e760 <__alt_data_end+0xfc00e760>
    ea94:	8000161e 	bne	r16,zero,eaf0 <__subsf3+0x3f4>
    ea98:	18002d26 	beq	r3,zero,eb50 <__subsf3+0x454>
    ea9c:	0108303a 	nor	r4,zero,r4
    eaa0:	20000a26 	beq	r4,zero,eacc <__subsf3+0x3d0>
    eaa4:	01403fc4 	movi	r5,255
    eaa8:	31402926 	beq	r6,r5,eb50 <__subsf3+0x454>
    eaac:	014006c4 	movi	r5,27
    eab0:	29004716 	blt	r5,r4,ebd0 <__subsf3+0x4d4>
    eab4:	01400804 	movi	r5,32
    eab8:	290bc83a 	sub	r5,r5,r4
    eabc:	194a983a 	sll	r5,r3,r5
    eac0:	1908d83a 	srl	r4,r3,r4
    eac4:	2806c03a 	cmpne	r3,r5,zero
    eac8:	20c6b03a 	or	r3,r4,r3
    eacc:	19c7883a 	add	r3,r3,r7
    ead0:	3021883a 	mov	r16,r6
    ead4:	003f7c06 	br	e8c8 <__alt_data_end+0xfc00e8c8>
    ead8:	1800111e 	bne	r3,zero,eb20 <__subsf3+0x424>
    eadc:	38003326 	beq	r7,zero,ebac <__subsf3+0x4b0>
    eae0:	3807883a 	mov	r3,r7
    eae4:	1023883a 	mov	r17,r2
    eae8:	04003fc4 	movi	r16,255
    eaec:	003f1c06 	br	e760 <__alt_data_end+0xfc00e760>
    eaf0:	01403fc4 	movi	r5,255
    eaf4:	31401626 	beq	r6,r5,eb50 <__subsf3+0x454>
    eaf8:	0109c83a 	sub	r4,zero,r4
    eafc:	18c10034 	orhi	r3,r3,1024
    eb00:	003fea06 	br	eaac <__alt_data_end+0xfc00eaac>
    eb04:	383f1626 	beq	r7,zero,e760 <__alt_data_end+0xfc00e760>
    eb08:	19c9c83a 	sub	r4,r3,r7
    eb0c:	2141002c 	andhi	r5,r4,1024
    eb10:	283f5026 	beq	r5,zero,e854 <__alt_data_end+0xfc00e854>
    eb14:	38c7c83a 	sub	r3,r7,r3
    eb18:	1023883a 	mov	r17,r2
    eb1c:	003f1006 	br	e760 <__alt_data_end+0xfc00e760>
    eb20:	38001b26 	beq	r7,zero,eb90 <__subsf3+0x494>
    eb24:	1806d0fa 	srli	r3,r3,3
    eb28:	1900102c 	andhi	r4,r3,64
    eb2c:	20000526 	beq	r4,zero,eb44 <__subsf3+0x448>
    eb30:	380ed0fa 	srli	r7,r7,3
    eb34:	3900102c 	andhi	r4,r7,64
    eb38:	2000021e 	bne	r4,zero,eb44 <__subsf3+0x448>
    eb3c:	3807883a 	mov	r3,r7
    eb40:	1023883a 	mov	r17,r2
    eb44:	180690fa 	slli	r3,r3,3
    eb48:	04003fc4 	movi	r16,255
    eb4c:	003f0406 	br	e760 <__alt_data_end+0xfc00e760>
    eb50:	3807883a 	mov	r3,r7
    eb54:	3021883a 	mov	r16,r6
    eb58:	003f0106 	br	e760 <__alt_data_end+0xfc00e760>
    eb5c:	18001726 	beq	r3,zero,ebbc <__subsf3+0x4c0>
    eb60:	38000b26 	beq	r7,zero,eb90 <__subsf3+0x494>
    eb64:	1806d0fa 	srli	r3,r3,3
    eb68:	1900102c 	andhi	r4,r3,64
    eb6c:	20000426 	beq	r4,zero,eb80 <__subsf3+0x484>
    eb70:	380ed0fa 	srli	r7,r7,3
    eb74:	3900102c 	andhi	r4,r7,64
    eb78:	2000011e 	bne	r4,zero,eb80 <__subsf3+0x484>
    eb7c:	3807883a 	mov	r3,r7
    eb80:	180690fa 	slli	r3,r3,3
    eb84:	1023883a 	mov	r17,r2
    eb88:	04003fc4 	movi	r16,255
    eb8c:	003ef406 	br	e760 <__alt_data_end+0xfc00e760>
    eb90:	04003fc4 	movi	r16,255
    eb94:	003ef206 	br	e760 <__alt_data_end+0xfc00e760>
    eb98:	00c00044 	movi	r3,1
    eb9c:	003f9606 	br	e9f8 <__alt_data_end+0xfc00e9f8>
    eba0:	000b883a 	mov	r5,zero
    eba4:	0005883a 	mov	r2,zero
    eba8:	003f3506 	br	e880 <__alt_data_end+0xfc00e880>
    ebac:	01402034 	movhi	r5,128
    ebb0:	297fffc4 	addi	r5,r5,-1
    ebb4:	0005883a 	mov	r2,zero
    ebb8:	003f2f06 	br	e878 <__alt_data_end+0xfc00e878>
    ebbc:	3807883a 	mov	r3,r7
    ebc0:	04003fc4 	movi	r16,255
    ebc4:	003ee606 	br	e760 <__alt_data_end+0xfc00e760>
    ebc8:	3807883a 	mov	r3,r7
    ebcc:	003ee406 	br	e760 <__alt_data_end+0xfc00e760>
    ebd0:	00c00044 	movi	r3,1
    ebd4:	003fbd06 	br	eacc <__alt_data_end+0xfc00eacc>
    ebd8:	0005883a 	mov	r2,zero
    ebdc:	003f2806 	br	e880 <__alt_data_end+0xfc00e880>

0000ebe0 <__fixsfsi>:
    ebe0:	200ad5fa 	srli	r5,r4,23
    ebe4:	00c02034 	movhi	r3,128
    ebe8:	18ffffc4 	addi	r3,r3,-1
    ebec:	29403fcc 	andi	r5,r5,255
    ebf0:	00801f84 	movi	r2,126
    ebf4:	1906703a 	and	r3,r3,r4
    ebf8:	2008d7fa 	srli	r4,r4,31
    ebfc:	11400e0e 	bge	r2,r5,ec38 <__fixsfsi+0x58>
    ec00:	00802744 	movi	r2,157
    ec04:	11400816 	blt	r2,r5,ec28 <__fixsfsi+0x48>
    ec08:	00802544 	movi	r2,149
    ec0c:	18c02034 	orhi	r3,r3,128
    ec10:	11400b0e 	bge	r2,r5,ec40 <__fixsfsi+0x60>
    ec14:	28bfda84 	addi	r2,r5,-150
    ec18:	1884983a 	sll	r2,r3,r2
    ec1c:	20000726 	beq	r4,zero,ec3c <__fixsfsi+0x5c>
    ec20:	0085c83a 	sub	r2,zero,r2
    ec24:	f800283a 	ret
    ec28:	00a00034 	movhi	r2,32768
    ec2c:	10bfffc4 	addi	r2,r2,-1
    ec30:	2085883a 	add	r2,r4,r2
    ec34:	f800283a 	ret
    ec38:	0005883a 	mov	r2,zero
    ec3c:	f800283a 	ret
    ec40:	00802584 	movi	r2,150
    ec44:	1145c83a 	sub	r2,r2,r5
    ec48:	1884d83a 	srl	r2,r3,r2
    ec4c:	003ff306 	br	ec1c <__alt_data_end+0xfc00ec1c>

0000ec50 <__floatsisf>:
    ec50:	defffd04 	addi	sp,sp,-12
    ec54:	dfc00215 	stw	ra,8(sp)
    ec58:	dc400115 	stw	r17,4(sp)
    ec5c:	dc000015 	stw	r16,0(sp)
    ec60:	20003526 	beq	r4,zero,ed38 <__floatsisf+0xe8>
    ec64:	2021883a 	mov	r16,r4
    ec68:	2022d7fa 	srli	r17,r4,31
    ec6c:	20003616 	blt	r4,zero,ed48 <__floatsisf+0xf8>
    ec70:	8009883a 	mov	r4,r16
    ec74:	000f3840 	call	f384 <__clzsi2>
    ec78:	00c02784 	movi	r3,158
    ec7c:	1887c83a 	sub	r3,r3,r2
    ec80:	01002584 	movi	r4,150
    ec84:	20c01416 	blt	r4,r3,ecd8 <__floatsisf+0x88>
    ec88:	20c9c83a 	sub	r4,r4,r3
    ec8c:	8120983a 	sll	r16,r16,r4
    ec90:	00802034 	movhi	r2,128
    ec94:	10bfffc4 	addi	r2,r2,-1
    ec98:	8809883a 	mov	r4,r17
    ec9c:	80a0703a 	and	r16,r16,r2
    eca0:	18803fcc 	andi	r2,r3,255
    eca4:	100695fa 	slli	r3,r2,23
    eca8:	20803fcc 	andi	r2,r4,255
    ecac:	100897fa 	slli	r4,r2,31
    ecb0:	00802034 	movhi	r2,128
    ecb4:	10bfffc4 	addi	r2,r2,-1
    ecb8:	8084703a 	and	r2,r16,r2
    ecbc:	10c4b03a 	or	r2,r2,r3
    ecc0:	1104b03a 	or	r2,r2,r4
    ecc4:	dfc00217 	ldw	ra,8(sp)
    ecc8:	dc400117 	ldw	r17,4(sp)
    eccc:	dc000017 	ldw	r16,0(sp)
    ecd0:	dec00304 	addi	sp,sp,12
    ecd4:	f800283a 	ret
    ecd8:	01002644 	movi	r4,153
    ecdc:	20c01c16 	blt	r4,r3,ed50 <__floatsisf+0x100>
    ece0:	20c9c83a 	sub	r4,r4,r3
    ece4:	8120983a 	sll	r16,r16,r4
    ece8:	013f0034 	movhi	r4,64512
    ecec:	213fffc4 	addi	r4,r4,-1
    ecf0:	814001cc 	andi	r5,r16,7
    ecf4:	8108703a 	and	r4,r16,r4
    ecf8:	28000426 	beq	r5,zero,ed0c <__floatsisf+0xbc>
    ecfc:	840003cc 	andi	r16,r16,15
    ed00:	01400104 	movi	r5,4
    ed04:	81400126 	beq	r16,r5,ed0c <__floatsisf+0xbc>
    ed08:	2149883a 	add	r4,r4,r5
    ed0c:	2141002c 	andhi	r5,r4,1024
    ed10:	28000526 	beq	r5,zero,ed28 <__floatsisf+0xd8>
    ed14:	00c027c4 	movi	r3,159
    ed18:	1887c83a 	sub	r3,r3,r2
    ed1c:	00bf0034 	movhi	r2,64512
    ed20:	10bfffc4 	addi	r2,r2,-1
    ed24:	2088703a 	and	r4,r4,r2
    ed28:	202091ba 	slli	r16,r4,6
    ed2c:	8809883a 	mov	r4,r17
    ed30:	8020d27a 	srli	r16,r16,9
    ed34:	003fda06 	br	eca0 <__alt_data_end+0xfc00eca0>
    ed38:	0009883a 	mov	r4,zero
    ed3c:	0007883a 	mov	r3,zero
    ed40:	0021883a 	mov	r16,zero
    ed44:	003fd606 	br	eca0 <__alt_data_end+0xfc00eca0>
    ed48:	0121c83a 	sub	r16,zero,r4
    ed4c:	003fc806 	br	ec70 <__alt_data_end+0xfc00ec70>
    ed50:	01002e44 	movi	r4,185
    ed54:	20c9c83a 	sub	r4,r4,r3
    ed58:	01400144 	movi	r5,5
    ed5c:	8108983a 	sll	r4,r16,r4
    ed60:	288bc83a 	sub	r5,r5,r2
    ed64:	8160d83a 	srl	r16,r16,r5
    ed68:	2008c03a 	cmpne	r4,r4,zero
    ed6c:	8120b03a 	or	r16,r16,r4
    ed70:	003fdd06 	br	ece8 <__alt_data_end+0xfc00ece8>

0000ed74 <__floatunsisf>:
    ed74:	defffe04 	addi	sp,sp,-8
    ed78:	dfc00115 	stw	ra,4(sp)
    ed7c:	dc000015 	stw	r16,0(sp)
    ed80:	20002c26 	beq	r4,zero,ee34 <__floatunsisf+0xc0>
    ed84:	2021883a 	mov	r16,r4
    ed88:	000f3840 	call	f384 <__clzsi2>
    ed8c:	00c02784 	movi	r3,158
    ed90:	1887c83a 	sub	r3,r3,r2
    ed94:	01002584 	movi	r4,150
    ed98:	20c00f16 	blt	r4,r3,edd8 <__floatunsisf+0x64>
    ed9c:	20c9c83a 	sub	r4,r4,r3
    eda0:	8108983a 	sll	r4,r16,r4
    eda4:	00802034 	movhi	r2,128
    eda8:	10bfffc4 	addi	r2,r2,-1
    edac:	2088703a 	and	r4,r4,r2
    edb0:	18803fcc 	andi	r2,r3,255
    edb4:	100695fa 	slli	r3,r2,23
    edb8:	00802034 	movhi	r2,128
    edbc:	10bfffc4 	addi	r2,r2,-1
    edc0:	2084703a 	and	r2,r4,r2
    edc4:	10c4b03a 	or	r2,r2,r3
    edc8:	dfc00117 	ldw	ra,4(sp)
    edcc:	dc000017 	ldw	r16,0(sp)
    edd0:	dec00204 	addi	sp,sp,8
    edd4:	f800283a 	ret
    edd8:	01002644 	movi	r4,153
    eddc:	20c01816 	blt	r4,r3,ee40 <__floatunsisf+0xcc>
    ede0:	20c9c83a 	sub	r4,r4,r3
    ede4:	8108983a 	sll	r4,r16,r4
    ede8:	017f0034 	movhi	r5,64512
    edec:	297fffc4 	addi	r5,r5,-1
    edf0:	218001cc 	andi	r6,r4,7
    edf4:	214a703a 	and	r5,r4,r5
    edf8:	30000426 	beq	r6,zero,ee0c <__floatunsisf+0x98>
    edfc:	210003cc 	andi	r4,r4,15
    ee00:	01800104 	movi	r6,4
    ee04:	21800126 	beq	r4,r6,ee0c <__floatunsisf+0x98>
    ee08:	298b883a 	add	r5,r5,r6
    ee0c:	2901002c 	andhi	r4,r5,1024
    ee10:	20000526 	beq	r4,zero,ee28 <__floatunsisf+0xb4>
    ee14:	00c027c4 	movi	r3,159
    ee18:	1887c83a 	sub	r3,r3,r2
    ee1c:	00bf0034 	movhi	r2,64512
    ee20:	10bfffc4 	addi	r2,r2,-1
    ee24:	288a703a 	and	r5,r5,r2
    ee28:	280891ba 	slli	r4,r5,6
    ee2c:	2008d27a 	srli	r4,r4,9
    ee30:	003fdf06 	br	edb0 <__alt_data_end+0xfc00edb0>
    ee34:	0007883a 	mov	r3,zero
    ee38:	0009883a 	mov	r4,zero
    ee3c:	003fdc06 	br	edb0 <__alt_data_end+0xfc00edb0>
    ee40:	01402e44 	movi	r5,185
    ee44:	28cbc83a 	sub	r5,r5,r3
    ee48:	01000144 	movi	r4,5
    ee4c:	2089c83a 	sub	r4,r4,r2
    ee50:	814a983a 	sll	r5,r16,r5
    ee54:	8108d83a 	srl	r4,r16,r4
    ee58:	2820c03a 	cmpne	r16,r5,zero
    ee5c:	2408b03a 	or	r4,r4,r16
    ee60:	003fe106 	br	ede8 <__alt_data_end+0xfc00ede8>

0000ee64 <_Unwind_ForcedUnwind_Phase2>:
    ee64:	defff404 	addi	sp,sp,-48
    ee68:	dd800915 	stw	r22,36(sp)
    ee6c:	058000f4 	movhi	r22,3
    ee70:	ddc00a15 	stw	r23,40(sp)
    ee74:	dd400815 	stw	r21,32(sp)
    ee78:	dd000715 	stw	r20,28(sp)
    ee7c:	dcc00615 	stw	r19,24(sp)
    ee80:	dc400415 	stw	r17,16(sp)
    ee84:	dc000315 	stw	r16,12(sp)
    ee88:	dfc00b15 	stw	ra,44(sp)
    ee8c:	dc800515 	stw	r18,20(sp)
    ee90:	2021883a 	mov	r16,r4
    ee94:	2823883a 	mov	r17,r5
    ee98:	24c00317 	ldw	r19,12(r4)
    ee9c:	25000417 	ldw	r20,16(r4)
    eea0:	28c00017 	ldw	r3,0(r5)
    eea4:	b587d304 	addi	r22,r22,8012
    eea8:	054001c4 	movi	r21,7
    eeac:	05c00204 	movi	r23,8
    eeb0:	00001606 	br	ef0c <_Unwind_ForcedUnwind_Phase2+0xa8>
    eeb4:	81800017 	ldw	r6,0(r16)
    eeb8:	81c00117 	ldw	r7,4(r16)
    eebc:	1c800617 	ldw	r18,24(r3)
    eec0:	dd000215 	stw	r20,8(sp)
    eec4:	dc400115 	stw	r17,4(sp)
    eec8:	dc000015 	stw	r16,0(sp)
    eecc:	983ee83a 	callr	r19
    eed0:	01400284 	movi	r5,10
    eed4:	01000044 	movi	r4,1
    eed8:	1000241e 	bne	r2,zero,ef6c <_Unwind_ForcedUnwind_Phase2+0x108>
    eedc:	90000726 	beq	r18,zero,eefc <_Unwind_ForcedUnwind_Phase2+0x98>
    eee0:	81800017 	ldw	r6,0(r16)
    eee4:	81c00117 	ldw	r7,4(r16)
    eee8:	dc400115 	stw	r17,4(sp)
    eeec:	dc000015 	stw	r16,0(sp)
    eef0:	903ee83a 	callr	r18
    eef4:	15401f26 	beq	r2,r21,ef74 <_Unwind_ForcedUnwind_Phase2+0x110>
    eef8:	15c01c1e 	bne	r2,r23,ef6c <_Unwind_ForcedUnwind_Phase2+0x108>
    eefc:	88800017 	ldw	r2,0(r17)
    ef00:	10c00017 	ldw	r3,0(r2)
    ef04:	b0c00015 	stw	r3,0(r22)
    ef08:	88c00015 	stw	r3,0(r17)
    ef0c:	01400284 	movi	r5,10
    ef10:	01000044 	movi	r4,1
    ef14:	183fe71e 	bne	r3,zero,eeb4 <__alt_data_end+0xfc00eeb4>
    ef18:	81800017 	ldw	r6,0(r16)
    ef1c:	81c00117 	ldw	r7,4(r16)
    ef20:	01400684 	movi	r5,26
    ef24:	dd000215 	stw	r20,8(sp)
    ef28:	dc400115 	stw	r17,4(sp)
    ef2c:	dc000015 	stw	r16,0(sp)
    ef30:	01000044 	movi	r4,1
    ef34:	983ee83a 	callr	r19
    ef38:	10000c1e 	bne	r2,zero,ef6c <_Unwind_ForcedUnwind_Phase2+0x108>
    ef3c:	00800144 	movi	r2,5
    ef40:	dfc00b17 	ldw	ra,44(sp)
    ef44:	ddc00a17 	ldw	r23,40(sp)
    ef48:	dd800917 	ldw	r22,36(sp)
    ef4c:	dd400817 	ldw	r21,32(sp)
    ef50:	dd000717 	ldw	r20,28(sp)
    ef54:	dcc00617 	ldw	r19,24(sp)
    ef58:	dc800517 	ldw	r18,20(sp)
    ef5c:	dc400417 	ldw	r17,16(sp)
    ef60:	dc000317 	ldw	r16,12(sp)
    ef64:	dec00c04 	addi	sp,sp,48
    ef68:	f800283a 	ret
    ef6c:	00800084 	movi	r2,2
    ef70:	003ff306 	br	ef40 <__alt_data_end+0xfc00ef40>
    ef74:	a805883a 	mov	r2,r21
    ef78:	003ff106 	br	ef40 <__alt_data_end+0xfc00ef40>

0000ef7c <_Unwind_RaiseException_Phase2>:
    ef7c:	28c00017 	ldw	r3,0(r5)
    ef80:	defff804 	addi	sp,sp,-32
    ef84:	dcc00515 	stw	r19,20(sp)
    ef88:	dc800415 	stw	r18,16(sp)
    ef8c:	dc400315 	stw	r17,12(sp)
    ef90:	dc000215 	stw	r16,8(sp)
    ef94:	dfc00715 	stw	ra,28(sp)
    ef98:	dd000615 	stw	r20,24(sp)
    ef9c:	2823883a 	mov	r17,r5
    efa0:	2021883a 	mov	r16,r4
    efa4:	048001c4 	movi	r18,7
    efa8:	04c00204 	movi	r19,8
    efac:	18001326 	beq	r3,zero,effc <_Unwind_RaiseException_Phase2+0x80>
    efb0:	81000417 	ldw	r4,16(r16)
    efb4:	1a000617 	ldw	r8,24(r3)
    efb8:	19001926 	beq	r3,r4,f020 <_Unwind_RaiseException_Phase2+0xa4>
    efbc:	40000c26 	beq	r8,zero,eff0 <_Unwind_RaiseException_Phase2+0x74>
    efc0:	01400084 	movi	r5,2
    efc4:	0029883a 	mov	r20,zero
    efc8:	81800017 	ldw	r6,0(r16)
    efcc:	81c00117 	ldw	r7,4(r16)
    efd0:	01000044 	movi	r4,1
    efd4:	dc400115 	stw	r17,4(sp)
    efd8:	dc000015 	stw	r16,0(sp)
    efdc:	403ee83a 	callr	r8
    efe0:	14801326 	beq	r2,r18,f030 <_Unwind_RaiseException_Phase2+0xb4>
    efe4:	14c0051e 	bne	r2,r19,effc <_Unwind_RaiseException_Phase2+0x80>
    efe8:	a000131e 	bne	r20,zero,f038 <_Unwind_RaiseException_Phase2+0xbc>
    efec:	88c00017 	ldw	r3,0(r17)
    eff0:	18c00017 	ldw	r3,0(r3)
    eff4:	88c00015 	stw	r3,0(r17)
    eff8:	183fed1e 	bne	r3,zero,efb0 <__alt_data_end+0xfc00efb0>
    effc:	00800084 	movi	r2,2
    f000:	dfc00717 	ldw	ra,28(sp)
    f004:	dd000617 	ldw	r20,24(sp)
    f008:	dcc00517 	ldw	r19,20(sp)
    f00c:	dc800417 	ldw	r18,16(sp)
    f010:	dc400317 	ldw	r17,12(sp)
    f014:	dc000217 	ldw	r16,8(sp)
    f018:	dec00804 	addi	sp,sp,32
    f01c:	f800283a 	ret
    f020:	40000526 	beq	r8,zero,f038 <_Unwind_RaiseException_Phase2+0xbc>
    f024:	01400184 	movi	r5,6
    f028:	05000104 	movi	r20,4
    f02c:	003fe606 	br	efc8 <__alt_data_end+0xfc00efc8>
    f030:	9005883a 	mov	r2,r18
    f034:	003ff206 	br	f000 <__alt_data_end+0xfc00f000>
    f038:	000f3e80 	call	f3e8 <abort>

0000f03c <uw_install_context.isra.1>:
    f03c:	20c00017 	ldw	r3,0(r4)
    f040:	deffff04 	addi	sp,sp,-4
    f044:	014000f4 	movhi	r5,3
    f048:	19000917 	ldw	r4,36(r3)
    f04c:	df000015 	stw	fp,0(sp)
    f050:	18800804 	addi	r2,r3,32
    f054:	d839883a 	mov	fp,sp
    f058:	2947d304 	addi	r5,r5,8012
    f05c:	28c00015 	stw	r3,0(r5)
    f060:	17000017 	ldw	fp,0(r2)
    f064:	1ec00a17 	ldw	sp,40(r3)
    f068:	2000683a 	jmp	r4

0000f06c <_Unwind_SjLj_Register>:
    f06c:	008000f4 	movhi	r2,3
    f070:	1087d304 	addi	r2,r2,8012
    f074:	10c00017 	ldw	r3,0(r2)
    f078:	11000015 	stw	r4,0(r2)
    f07c:	20c00015 	stw	r3,0(r4)
    f080:	f800283a 	ret

0000f084 <_Unwind_SjLj_Unregister>:
    f084:	20c00017 	ldw	r3,0(r4)
    f088:	008000f4 	movhi	r2,3
    f08c:	1087d304 	addi	r2,r2,8012
    f090:	10c00015 	stw	r3,0(r2)
    f094:	f800283a 	ret

0000f098 <_Unwind_GetGR>:
    f098:	20800017 	ldw	r2,0(r4)
    f09c:	29400084 	addi	r5,r5,2
    f0a0:	294b883a 	add	r5,r5,r5
    f0a4:	294b883a 	add	r5,r5,r5
    f0a8:	114b883a 	add	r5,r2,r5
    f0ac:	28800017 	ldw	r2,0(r5)
    f0b0:	f800283a 	ret

0000f0b4 <_Unwind_GetCFA>:
    f0b4:	20800017 	ldw	r2,0(r4)
    f0b8:	10000226 	beq	r2,zero,f0c4 <_Unwind_GetCFA+0x10>
    f0bc:	10800a17 	ldw	r2,40(r2)
    f0c0:	f800283a 	ret
    f0c4:	0005883a 	mov	r2,zero
    f0c8:	f800283a 	ret

0000f0cc <_Unwind_SetGR>:
    f0cc:	20800017 	ldw	r2,0(r4)
    f0d0:	29400084 	addi	r5,r5,2
    f0d4:	294b883a 	add	r5,r5,r5
    f0d8:	294b883a 	add	r5,r5,r5
    f0dc:	114b883a 	add	r5,r2,r5
    f0e0:	29800015 	stw	r6,0(r5)
    f0e4:	f800283a 	ret

0000f0e8 <_Unwind_GetIP>:
    f0e8:	20800017 	ldw	r2,0(r4)
    f0ec:	10800117 	ldw	r2,4(r2)
    f0f0:	10800044 	addi	r2,r2,1
    f0f4:	f800283a 	ret

0000f0f8 <_Unwind_GetIPInfo>:
    f0f8:	20800017 	ldw	r2,0(r4)
    f0fc:	28000015 	stw	zero,0(r5)
    f100:	10000326 	beq	r2,zero,f110 <_Unwind_GetIPInfo+0x18>
    f104:	10800117 	ldw	r2,4(r2)
    f108:	10800044 	addi	r2,r2,1
    f10c:	f800283a 	ret
    f110:	0005883a 	mov	r2,zero
    f114:	f800283a 	ret

0000f118 <_Unwind_SetIP>:
    f118:	20800017 	ldw	r2,0(r4)
    f11c:	297fffc4 	addi	r5,r5,-1
    f120:	11400115 	stw	r5,4(r2)
    f124:	f800283a 	ret

0000f128 <_Unwind_GetLanguageSpecificData>:
    f128:	20800017 	ldw	r2,0(r4)
    f12c:	10800717 	ldw	r2,28(r2)
    f130:	f800283a 	ret

0000f134 <_Unwind_GetRegionStart>:
    f134:	0005883a 	mov	r2,zero
    f138:	f800283a 	ret

0000f13c <_Unwind_FindEnclosingFunction>:
    f13c:	0005883a 	mov	r2,zero
    f140:	f800283a 	ret

0000f144 <_Unwind_GetDataRelBase>:
    f144:	0005883a 	mov	r2,zero
    f148:	f800283a 	ret

0000f14c <_Unwind_GetTextRelBase>:
    f14c:	0005883a 	mov	r2,zero
    f150:	f800283a 	ret

0000f154 <_Unwind_SjLj_RaiseException>:
    f154:	008000f4 	movhi	r2,3
    f158:	defff804 	addi	sp,sp,-32
    f15c:	1087d304 	addi	r2,r2,8012
    f160:	dc800515 	stw	r18,20(sp)
    f164:	14800017 	ldw	r18,0(r2)
    f168:	dfc00715 	stw	ra,28(sp)
    f16c:	dcc00615 	stw	r19,24(sp)
    f170:	dc400415 	stw	r17,16(sp)
    f174:	dc000315 	stw	r16,12(sp)
    f178:	dc800215 	stw	r18,8(sp)
    f17c:	90001426 	beq	r18,zero,f1d0 <_Unwind_SjLj_RaiseException+0x7c>
    f180:	2021883a 	mov	r16,r4
    f184:	9005883a 	mov	r2,r18
    f188:	04400184 	movi	r17,6
    f18c:	04c00204 	movi	r19,8
    f190:	10800617 	ldw	r2,24(r2)
    f194:	10000a26 	beq	r2,zero,f1c0 <_Unwind_SjLj_RaiseException+0x6c>
    f198:	81800017 	ldw	r6,0(r16)
    f19c:	81c00117 	ldw	r7,4(r16)
    f1a0:	01400044 	movi	r5,1
    f1a4:	d8c00204 	addi	r3,sp,8
    f1a8:	d8c00115 	stw	r3,4(sp)
    f1ac:	dc000015 	stw	r16,0(sp)
    f1b0:	2809883a 	mov	r4,r5
    f1b4:	103ee83a 	callr	r2
    f1b8:	14400d26 	beq	r2,r17,f1f0 <_Unwind_SjLj_RaiseException+0x9c>
    f1bc:	14c0171e 	bne	r2,r19,f21c <_Unwind_SjLj_RaiseException+0xc8>
    f1c0:	d8800217 	ldw	r2,8(sp)
    f1c4:	10800017 	ldw	r2,0(r2)
    f1c8:	d8800215 	stw	r2,8(sp)
    f1cc:	103ff01e 	bne	r2,zero,f190 <__alt_data_end+0xfc00f190>
    f1d0:	00800144 	movi	r2,5
    f1d4:	dfc00717 	ldw	ra,28(sp)
    f1d8:	dcc00617 	ldw	r19,24(sp)
    f1dc:	dc800517 	ldw	r18,20(sp)
    f1e0:	dc400417 	ldw	r17,16(sp)
    f1e4:	dc000317 	ldw	r16,12(sp)
    f1e8:	dec00804 	addi	sp,sp,32
    f1ec:	f800283a 	ret
    f1f0:	d8800217 	ldw	r2,8(sp)
    f1f4:	80000315 	stw	zero,12(r16)
    f1f8:	d9400204 	addi	r5,sp,8
    f1fc:	80800415 	stw	r2,16(r16)
    f200:	8009883a 	mov	r4,r16
    f204:	dc800215 	stw	r18,8(sp)
    f208:	000ef7c0 	call	ef7c <_Unwind_RaiseException_Phase2>
    f20c:	00c001c4 	movi	r3,7
    f210:	10fff01e 	bne	r2,r3,f1d4 <__alt_data_end+0xfc00f1d4>
    f214:	d9000204 	addi	r4,sp,8
    f218:	000f03c0 	call	f03c <uw_install_context.isra.1>
    f21c:	008000c4 	movi	r2,3
    f220:	003fec06 	br	f1d4 <__alt_data_end+0xfc00f1d4>

0000f224 <_Unwind_SjLj_ForcedUnwind>:
    f224:	00c000f4 	movhi	r3,3
    f228:	18c7d304 	addi	r3,r3,8012
    f22c:	defffe04 	addi	sp,sp,-8
    f230:	18c00017 	ldw	r3,0(r3)
    f234:	dfc00115 	stw	ra,4(sp)
    f238:	21400315 	stw	r5,12(r4)
    f23c:	21800415 	stw	r6,16(r4)
    f240:	d80b883a 	mov	r5,sp
    f244:	d8c00015 	stw	r3,0(sp)
    f248:	000ee640 	call	ee64 <_Unwind_ForcedUnwind_Phase2>
    f24c:	00c001c4 	movi	r3,7
    f250:	10c00326 	beq	r2,r3,f260 <_Unwind_SjLj_ForcedUnwind+0x3c>
    f254:	dfc00117 	ldw	ra,4(sp)
    f258:	dec00204 	addi	sp,sp,8
    f25c:	f800283a 	ret
    f260:	d809883a 	mov	r4,sp
    f264:	000f03c0 	call	f03c <uw_install_context.isra.1>

0000f268 <_Unwind_SjLj_Resume>:
    f268:	00c000f4 	movhi	r3,3
    f26c:	18c7d304 	addi	r3,r3,8012
    f270:	18c00017 	ldw	r3,0(r3)
    f274:	20800317 	ldw	r2,12(r4)
    f278:	defffe04 	addi	sp,sp,-8
    f27c:	dfc00115 	stw	ra,4(sp)
    f280:	d8c00015 	stw	r3,0(sp)
    f284:	d80b883a 	mov	r5,sp
    f288:	1000041e 	bne	r2,zero,f29c <_Unwind_SjLj_Resume+0x34>
    f28c:	000ef7c0 	call	ef7c <_Unwind_RaiseException_Phase2>
    f290:	00c001c4 	movi	r3,7
    f294:	10c00326 	beq	r2,r3,f2a4 <_Unwind_SjLj_Resume+0x3c>
    f298:	000f3e80 	call	f3e8 <abort>
    f29c:	000ee640 	call	ee64 <_Unwind_ForcedUnwind_Phase2>
    f2a0:	003ffb06 	br	f290 <__alt_data_end+0xfc00f290>
    f2a4:	d809883a 	mov	r4,sp
    f2a8:	000f03c0 	call	f03c <uw_install_context.isra.1>

0000f2ac <_Unwind_SjLj_Resume_or_Rethrow>:
    f2ac:	20800317 	ldw	r2,12(r4)
    f2b0:	defffe04 	addi	sp,sp,-8
    f2b4:	dfc00115 	stw	ra,4(sp)
    f2b8:	1000041e 	bne	r2,zero,f2cc <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    f2bc:	000f1540 	call	f154 <_Unwind_SjLj_RaiseException>
    f2c0:	dfc00117 	ldw	ra,4(sp)
    f2c4:	dec00204 	addi	sp,sp,8
    f2c8:	f800283a 	ret
    f2cc:	008000f4 	movhi	r2,3
    f2d0:	1087d304 	addi	r2,r2,8012
    f2d4:	10800017 	ldw	r2,0(r2)
    f2d8:	d80b883a 	mov	r5,sp
    f2dc:	d8800015 	stw	r2,0(sp)
    f2e0:	000ee640 	call	ee64 <_Unwind_ForcedUnwind_Phase2>
    f2e4:	00c001c4 	movi	r3,7
    f2e8:	10c00126 	beq	r2,r3,f2f0 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    f2ec:	000f3e80 	call	f3e8 <abort>
    f2f0:	d809883a 	mov	r4,sp
    f2f4:	000f03c0 	call	f03c <uw_install_context.isra.1>

0000f2f8 <_Unwind_DeleteException>:
    f2f8:	20800217 	ldw	r2,8(r4)
    f2fc:	10000326 	beq	r2,zero,f30c <_Unwind_DeleteException+0x14>
    f300:	200b883a 	mov	r5,r4
    f304:	01000044 	movi	r4,1
    f308:	1000683a 	jmp	r2
    f30c:	f800283a 	ret

0000f310 <_Unwind_Backtrace>:
    f310:	008000f4 	movhi	r2,3
    f314:	1087d304 	addi	r2,r2,8012
    f318:	10800017 	ldw	r2,0(r2)
    f31c:	defffc04 	addi	sp,sp,-16
    f320:	dc400215 	stw	r17,8(sp)
    f324:	dc000115 	stw	r16,4(sp)
    f328:	dfc00315 	stw	ra,12(sp)
    f32c:	2023883a 	mov	r17,r4
    f330:	2821883a 	mov	r16,r5
    f334:	d8800015 	stw	r2,0(sp)
    f338:	00000506 	br	f350 <_Unwind_Backtrace+0x40>
    f33c:	883ee83a 	callr	r17
    f340:	10000e1e 	bne	r2,zero,f37c <_Unwind_Backtrace+0x6c>
    f344:	d8800017 	ldw	r2,0(sp)
    f348:	10800017 	ldw	r2,0(r2)
    f34c:	d8800015 	stw	r2,0(sp)
    f350:	800b883a 	mov	r5,r16
    f354:	d809883a 	mov	r4,sp
    f358:	103ff81e 	bne	r2,zero,f33c <__alt_data_end+0xfc00f33c>
    f35c:	883ee83a 	callr	r17
    f360:	1000061e 	bne	r2,zero,f37c <_Unwind_Backtrace+0x6c>
    f364:	00800144 	movi	r2,5
    f368:	dfc00317 	ldw	ra,12(sp)
    f36c:	dc400217 	ldw	r17,8(sp)
    f370:	dc000117 	ldw	r16,4(sp)
    f374:	dec00404 	addi	sp,sp,16
    f378:	f800283a 	ret
    f37c:	008000c4 	movi	r2,3
    f380:	003ff906 	br	f368 <__alt_data_end+0xfc00f368>

0000f384 <__clzsi2>:
    f384:	00bfffd4 	movui	r2,65535
    f388:	11000536 	bltu	r2,r4,f3a0 <__clzsi2+0x1c>
    f38c:	00803fc4 	movi	r2,255
    f390:	11000f36 	bltu	r2,r4,f3d0 <__clzsi2+0x4c>
    f394:	00800804 	movi	r2,32
    f398:	0007883a 	mov	r3,zero
    f39c:	00000506 	br	f3b4 <__clzsi2+0x30>
    f3a0:	00804034 	movhi	r2,256
    f3a4:	10bfffc4 	addi	r2,r2,-1
    f3a8:	11000c2e 	bgeu	r2,r4,f3dc <__clzsi2+0x58>
    f3ac:	00800204 	movi	r2,8
    f3b0:	00c00604 	movi	r3,24
    f3b4:	20c8d83a 	srl	r4,r4,r3
    f3b8:	00c000f4 	movhi	r3,3
    f3bc:	18edf504 	addi	r3,r3,-18476
    f3c0:	1909883a 	add	r4,r3,r4
    f3c4:	20c00003 	ldbu	r3,0(r4)
    f3c8:	10c5c83a 	sub	r2,r2,r3
    f3cc:	f800283a 	ret
    f3d0:	00800604 	movi	r2,24
    f3d4:	00c00204 	movi	r3,8
    f3d8:	003ff606 	br	f3b4 <__alt_data_end+0xfc00f3b4>
    f3dc:	00800404 	movi	r2,16
    f3e0:	1007883a 	mov	r3,r2
    f3e4:	003ff306 	br	f3b4 <__alt_data_end+0xfc00f3b4>

0000f3e8 <abort>:
    f3e8:	deffff04 	addi	sp,sp,-4
    f3ec:	01000184 	movi	r4,6
    f3f0:	dfc00015 	stw	ra,0(sp)
    f3f4:	00102f80 	call	102f8 <raise>
    f3f8:	01000044 	movi	r4,1
    f3fc:	00200380 	call	20038 <_exit>

0000f400 <clock>:
    f400:	008000f4 	movhi	r2,3
    f404:	10bb3c04 	addi	r2,r2,-4880
    f408:	11000017 	ldw	r4,0(r2)
    f40c:	defffb04 	addi	sp,sp,-20
    f410:	d80b883a 	mov	r5,sp
    f414:	dfc00415 	stw	ra,16(sp)
    f418:	001289c0 	call	1289c <_times_r>
    f41c:	00ffffc4 	movi	r3,-1
    f420:	10c00726 	beq	r2,r3,f440 <clock+0x40>
    f424:	d8c00017 	ldw	r3,0(sp)
    f428:	d8800117 	ldw	r2,4(sp)
    f42c:	1885883a 	add	r2,r3,r2
    f430:	d8c00217 	ldw	r3,8(sp)
    f434:	10c7883a 	add	r3,r2,r3
    f438:	d8800317 	ldw	r2,12(sp)
    f43c:	1885883a 	add	r2,r3,r2
    f440:	dfc00417 	ldw	ra,16(sp)
    f444:	dec00504 	addi	sp,sp,20
    f448:	f800283a 	ret

0000f44c <malloc>:
    f44c:	008000f4 	movhi	r2,3
    f450:	10bb3c04 	addi	r2,r2,-4880
    f454:	200b883a 	mov	r5,r4
    f458:	11000017 	ldw	r4,0(r2)
    f45c:	000f4741 	jmpi	f474 <_malloc_r>

0000f460 <free>:
    f460:	008000f4 	movhi	r2,3
    f464:	10bb3c04 	addi	r2,r2,-4880
    f468:	200b883a 	mov	r5,r4
    f46c:	11000017 	ldw	r4,0(r2)
    f470:	0016dd81 	jmpi	16dd8 <_free_r>

0000f474 <_malloc_r>:
    f474:	defff504 	addi	sp,sp,-44
    f478:	dc800315 	stw	r18,12(sp)
    f47c:	dfc00a15 	stw	ra,40(sp)
    f480:	df000915 	stw	fp,36(sp)
    f484:	ddc00815 	stw	r23,32(sp)
    f488:	dd800715 	stw	r22,28(sp)
    f48c:	dd400615 	stw	r21,24(sp)
    f490:	dd000515 	stw	r20,20(sp)
    f494:	dcc00415 	stw	r19,16(sp)
    f498:	dc400215 	stw	r17,8(sp)
    f49c:	dc000115 	stw	r16,4(sp)
    f4a0:	288002c4 	addi	r2,r5,11
    f4a4:	00c00584 	movi	r3,22
    f4a8:	2025883a 	mov	r18,r4
    f4ac:	18807f2e 	bgeu	r3,r2,f6ac <_malloc_r+0x238>
    f4b0:	047ffe04 	movi	r17,-8
    f4b4:	1462703a 	and	r17,r2,r17
    f4b8:	8800a316 	blt	r17,zero,f748 <_malloc_r+0x2d4>
    f4bc:	8940a236 	bltu	r17,r5,f748 <_malloc_r+0x2d4>
    f4c0:	00206540 	call	20654 <__malloc_lock>
    f4c4:	00807dc4 	movi	r2,503
    f4c8:	1441e92e 	bgeu	r2,r17,fc70 <_malloc_r+0x7fc>
    f4cc:	8804d27a 	srli	r2,r17,9
    f4d0:	1000a126 	beq	r2,zero,f758 <_malloc_r+0x2e4>
    f4d4:	00c00104 	movi	r3,4
    f4d8:	18811e36 	bltu	r3,r2,f954 <_malloc_r+0x4e0>
    f4dc:	8804d1ba 	srli	r2,r17,6
    f4e0:	12000e44 	addi	r8,r2,57
    f4e4:	11c00e04 	addi	r7,r2,56
    f4e8:	4209883a 	add	r4,r8,r8
    f4ec:	04c000f4 	movhi	r19,3
    f4f0:	2109883a 	add	r4,r4,r4
    f4f4:	9cefd904 	addi	r19,r19,-16540
    f4f8:	2109883a 	add	r4,r4,r4
    f4fc:	9909883a 	add	r4,r19,r4
    f500:	24000117 	ldw	r16,4(r4)
    f504:	213ffe04 	addi	r4,r4,-8
    f508:	24009726 	beq	r4,r16,f768 <_malloc_r+0x2f4>
    f50c:	80800117 	ldw	r2,4(r16)
    f510:	01bfff04 	movi	r6,-4
    f514:	014003c4 	movi	r5,15
    f518:	1184703a 	and	r2,r2,r6
    f51c:	1447c83a 	sub	r3,r2,r17
    f520:	28c00716 	blt	r5,r3,f540 <_malloc_r+0xcc>
    f524:	1800920e 	bge	r3,zero,f770 <_malloc_r+0x2fc>
    f528:	84000317 	ldw	r16,12(r16)
    f52c:	24008e26 	beq	r4,r16,f768 <_malloc_r+0x2f4>
    f530:	80800117 	ldw	r2,4(r16)
    f534:	1184703a 	and	r2,r2,r6
    f538:	1447c83a 	sub	r3,r2,r17
    f53c:	28fff90e 	bge	r5,r3,f524 <__alt_data_end+0xfc00f524>
    f540:	3809883a 	mov	r4,r7
    f544:	018000f4 	movhi	r6,3
    f548:	9c000417 	ldw	r16,16(r19)
    f54c:	31afd904 	addi	r6,r6,-16540
    f550:	32000204 	addi	r8,r6,8
    f554:	82013426 	beq	r16,r8,fa28 <_malloc_r+0x5b4>
    f558:	80c00117 	ldw	r3,4(r16)
    f55c:	00bfff04 	movi	r2,-4
    f560:	188e703a 	and	r7,r3,r2
    f564:	3c45c83a 	sub	r2,r7,r17
    f568:	00c003c4 	movi	r3,15
    f56c:	18811f16 	blt	r3,r2,f9ec <_malloc_r+0x578>
    f570:	32000515 	stw	r8,20(r6)
    f574:	32000415 	stw	r8,16(r6)
    f578:	10007f0e 	bge	r2,zero,f778 <_malloc_r+0x304>
    f57c:	00807fc4 	movi	r2,511
    f580:	11c0fd36 	bltu	r2,r7,f978 <_malloc_r+0x504>
    f584:	3806d0fa 	srli	r3,r7,3
    f588:	01c00044 	movi	r7,1
    f58c:	30800117 	ldw	r2,4(r6)
    f590:	19400044 	addi	r5,r3,1
    f594:	294b883a 	add	r5,r5,r5
    f598:	1807d0ba 	srai	r3,r3,2
    f59c:	294b883a 	add	r5,r5,r5
    f5a0:	294b883a 	add	r5,r5,r5
    f5a4:	298b883a 	add	r5,r5,r6
    f5a8:	38c6983a 	sll	r3,r7,r3
    f5ac:	29c00017 	ldw	r7,0(r5)
    f5b0:	2a7ffe04 	addi	r9,r5,-8
    f5b4:	1886b03a 	or	r3,r3,r2
    f5b8:	82400315 	stw	r9,12(r16)
    f5bc:	81c00215 	stw	r7,8(r16)
    f5c0:	30c00115 	stw	r3,4(r6)
    f5c4:	2c000015 	stw	r16,0(r5)
    f5c8:	3c000315 	stw	r16,12(r7)
    f5cc:	2005d0ba 	srai	r2,r4,2
    f5d0:	01400044 	movi	r5,1
    f5d4:	288a983a 	sll	r5,r5,r2
    f5d8:	19406f36 	bltu	r3,r5,f798 <_malloc_r+0x324>
    f5dc:	28c4703a 	and	r2,r5,r3
    f5e0:	10000a1e 	bne	r2,zero,f60c <_malloc_r+0x198>
    f5e4:	00bfff04 	movi	r2,-4
    f5e8:	294b883a 	add	r5,r5,r5
    f5ec:	2088703a 	and	r4,r4,r2
    f5f0:	28c4703a 	and	r2,r5,r3
    f5f4:	21000104 	addi	r4,r4,4
    f5f8:	1000041e 	bne	r2,zero,f60c <_malloc_r+0x198>
    f5fc:	294b883a 	add	r5,r5,r5
    f600:	28c4703a 	and	r2,r5,r3
    f604:	21000104 	addi	r4,r4,4
    f608:	103ffc26 	beq	r2,zero,f5fc <__alt_data_end+0xfc00f5fc>
    f60c:	02bfff04 	movi	r10,-4
    f610:	024003c4 	movi	r9,15
    f614:	21800044 	addi	r6,r4,1
    f618:	318d883a 	add	r6,r6,r6
    f61c:	318d883a 	add	r6,r6,r6
    f620:	318d883a 	add	r6,r6,r6
    f624:	998d883a 	add	r6,r19,r6
    f628:	333ffe04 	addi	r12,r6,-8
    f62c:	2017883a 	mov	r11,r4
    f630:	31800104 	addi	r6,r6,4
    f634:	34000017 	ldw	r16,0(r6)
    f638:	31fffd04 	addi	r7,r6,-12
    f63c:	81c0041e 	bne	r16,r7,f650 <_malloc_r+0x1dc>
    f640:	0000fb06 	br	fa30 <_malloc_r+0x5bc>
    f644:	1801030e 	bge	r3,zero,fa54 <_malloc_r+0x5e0>
    f648:	84000317 	ldw	r16,12(r16)
    f64c:	81c0f826 	beq	r16,r7,fa30 <_malloc_r+0x5bc>
    f650:	80800117 	ldw	r2,4(r16)
    f654:	1284703a 	and	r2,r2,r10
    f658:	1447c83a 	sub	r3,r2,r17
    f65c:	48fff90e 	bge	r9,r3,f644 <__alt_data_end+0xfc00f644>
    f660:	80800317 	ldw	r2,12(r16)
    f664:	81000217 	ldw	r4,8(r16)
    f668:	89400054 	ori	r5,r17,1
    f66c:	81400115 	stw	r5,4(r16)
    f670:	20800315 	stw	r2,12(r4)
    f674:	11000215 	stw	r4,8(r2)
    f678:	8463883a 	add	r17,r16,r17
    f67c:	9c400515 	stw	r17,20(r19)
    f680:	9c400415 	stw	r17,16(r19)
    f684:	18800054 	ori	r2,r3,1
    f688:	88800115 	stw	r2,4(r17)
    f68c:	8a000315 	stw	r8,12(r17)
    f690:	8a000215 	stw	r8,8(r17)
    f694:	88e3883a 	add	r17,r17,r3
    f698:	88c00015 	stw	r3,0(r17)
    f69c:	9009883a 	mov	r4,r18
    f6a0:	00206780 	call	20678 <__malloc_unlock>
    f6a4:	80800204 	addi	r2,r16,8
    f6a8:	00001b06 	br	f718 <_malloc_r+0x2a4>
    f6ac:	04400404 	movi	r17,16
    f6b0:	89402536 	bltu	r17,r5,f748 <_malloc_r+0x2d4>
    f6b4:	00206540 	call	20654 <__malloc_lock>
    f6b8:	00800184 	movi	r2,6
    f6bc:	01000084 	movi	r4,2
    f6c0:	04c000f4 	movhi	r19,3
    f6c4:	1085883a 	add	r2,r2,r2
    f6c8:	9cefd904 	addi	r19,r19,-16540
    f6cc:	1085883a 	add	r2,r2,r2
    f6d0:	9885883a 	add	r2,r19,r2
    f6d4:	14000117 	ldw	r16,4(r2)
    f6d8:	10fffe04 	addi	r3,r2,-8
    f6dc:	80c0d926 	beq	r16,r3,fa44 <_malloc_r+0x5d0>
    f6e0:	80c00117 	ldw	r3,4(r16)
    f6e4:	81000317 	ldw	r4,12(r16)
    f6e8:	00bfff04 	movi	r2,-4
    f6ec:	1884703a 	and	r2,r3,r2
    f6f0:	81400217 	ldw	r5,8(r16)
    f6f4:	8085883a 	add	r2,r16,r2
    f6f8:	10c00117 	ldw	r3,4(r2)
    f6fc:	29000315 	stw	r4,12(r5)
    f700:	21400215 	stw	r5,8(r4)
    f704:	18c00054 	ori	r3,r3,1
    f708:	10c00115 	stw	r3,4(r2)
    f70c:	9009883a 	mov	r4,r18
    f710:	00206780 	call	20678 <__malloc_unlock>
    f714:	80800204 	addi	r2,r16,8
    f718:	dfc00a17 	ldw	ra,40(sp)
    f71c:	df000917 	ldw	fp,36(sp)
    f720:	ddc00817 	ldw	r23,32(sp)
    f724:	dd800717 	ldw	r22,28(sp)
    f728:	dd400617 	ldw	r21,24(sp)
    f72c:	dd000517 	ldw	r20,20(sp)
    f730:	dcc00417 	ldw	r19,16(sp)
    f734:	dc800317 	ldw	r18,12(sp)
    f738:	dc400217 	ldw	r17,8(sp)
    f73c:	dc000117 	ldw	r16,4(sp)
    f740:	dec00b04 	addi	sp,sp,44
    f744:	f800283a 	ret
    f748:	00800304 	movi	r2,12
    f74c:	90800015 	stw	r2,0(r18)
    f750:	0005883a 	mov	r2,zero
    f754:	003ff006 	br	f718 <__alt_data_end+0xfc00f718>
    f758:	01002004 	movi	r4,128
    f75c:	02001004 	movi	r8,64
    f760:	01c00fc4 	movi	r7,63
    f764:	003f6106 	br	f4ec <__alt_data_end+0xfc00f4ec>
    f768:	4009883a 	mov	r4,r8
    f76c:	003f7506 	br	f544 <__alt_data_end+0xfc00f544>
    f770:	81000317 	ldw	r4,12(r16)
    f774:	003fde06 	br	f6f0 <__alt_data_end+0xfc00f6f0>
    f778:	81c5883a 	add	r2,r16,r7
    f77c:	11400117 	ldw	r5,4(r2)
    f780:	9009883a 	mov	r4,r18
    f784:	29400054 	ori	r5,r5,1
    f788:	11400115 	stw	r5,4(r2)
    f78c:	00206780 	call	20678 <__malloc_unlock>
    f790:	80800204 	addi	r2,r16,8
    f794:	003fe006 	br	f718 <__alt_data_end+0xfc00f718>
    f798:	9c000217 	ldw	r16,8(r19)
    f79c:	00bfff04 	movi	r2,-4
    f7a0:	85800117 	ldw	r22,4(r16)
    f7a4:	b0ac703a 	and	r22,r22,r2
    f7a8:	b4400336 	bltu	r22,r17,f7b8 <_malloc_r+0x344>
    f7ac:	b445c83a 	sub	r2,r22,r17
    f7b0:	00c003c4 	movi	r3,15
    f7b4:	18805d16 	blt	r3,r2,f92c <_malloc_r+0x4b8>
    f7b8:	05c000f4 	movhi	r23,3
    f7bc:	008000f4 	movhi	r2,3
    f7c0:	1087d604 	addi	r2,r2,8024
    f7c4:	bdfb3d04 	addi	r23,r23,-4876
    f7c8:	15400017 	ldw	r21,0(r2)
    f7cc:	b8c00017 	ldw	r3,0(r23)
    f7d0:	00bfffc4 	movi	r2,-1
    f7d4:	858d883a 	add	r6,r16,r22
    f7d8:	8d6b883a 	add	r21,r17,r21
    f7dc:	1880ea26 	beq	r3,r2,fb88 <_malloc_r+0x714>
    f7e0:	ad4403c4 	addi	r21,r21,4111
    f7e4:	00bc0004 	movi	r2,-4096
    f7e8:	a8aa703a 	and	r21,r21,r2
    f7ec:	a80b883a 	mov	r5,r21
    f7f0:	9009883a 	mov	r4,r18
    f7f4:	d9800015 	stw	r6,0(sp)
    f7f8:	00100500 	call	10050 <_sbrk_r>
    f7fc:	1029883a 	mov	r20,r2
    f800:	00bfffc4 	movi	r2,-1
    f804:	d9800017 	ldw	r6,0(sp)
    f808:	a080e826 	beq	r20,r2,fbac <_malloc_r+0x738>
    f80c:	a180a636 	bltu	r20,r6,faa8 <_malloc_r+0x634>
    f810:	070000f4 	movhi	fp,3
    f814:	e7082e04 	addi	fp,fp,8376
    f818:	e0800017 	ldw	r2,0(fp)
    f81c:	a887883a 	add	r3,r21,r2
    f820:	e0c00015 	stw	r3,0(fp)
    f824:	3500e626 	beq	r6,r20,fbc0 <_malloc_r+0x74c>
    f828:	b9000017 	ldw	r4,0(r23)
    f82c:	00bfffc4 	movi	r2,-1
    f830:	2080ee26 	beq	r4,r2,fbec <_malloc_r+0x778>
    f834:	a185c83a 	sub	r2,r20,r6
    f838:	10c5883a 	add	r2,r2,r3
    f83c:	e0800015 	stw	r2,0(fp)
    f840:	a0c001cc 	andi	r3,r20,7
    f844:	1800bc26 	beq	r3,zero,fb38 <_malloc_r+0x6c4>
    f848:	a0e9c83a 	sub	r20,r20,r3
    f84c:	00840204 	movi	r2,4104
    f850:	a5000204 	addi	r20,r20,8
    f854:	10c7c83a 	sub	r3,r2,r3
    f858:	a545883a 	add	r2,r20,r21
    f85c:	1083ffcc 	andi	r2,r2,4095
    f860:	18abc83a 	sub	r21,r3,r2
    f864:	a80b883a 	mov	r5,r21
    f868:	9009883a 	mov	r4,r18
    f86c:	00100500 	call	10050 <_sbrk_r>
    f870:	00ffffc4 	movi	r3,-1
    f874:	10c0e126 	beq	r2,r3,fbfc <_malloc_r+0x788>
    f878:	1505c83a 	sub	r2,r2,r20
    f87c:	1545883a 	add	r2,r2,r21
    f880:	10800054 	ori	r2,r2,1
    f884:	e0c00017 	ldw	r3,0(fp)
    f888:	9d000215 	stw	r20,8(r19)
    f88c:	a0800115 	stw	r2,4(r20)
    f890:	a8c7883a 	add	r3,r21,r3
    f894:	e0c00015 	stw	r3,0(fp)
    f898:	84c00e26 	beq	r16,r19,f8d4 <_malloc_r+0x460>
    f89c:	018003c4 	movi	r6,15
    f8a0:	3580a72e 	bgeu	r6,r22,fb40 <_malloc_r+0x6cc>
    f8a4:	81400117 	ldw	r5,4(r16)
    f8a8:	013ffe04 	movi	r4,-8
    f8ac:	b0bffd04 	addi	r2,r22,-12
    f8b0:	1104703a 	and	r2,r2,r4
    f8b4:	2900004c 	andi	r4,r5,1
    f8b8:	2088b03a 	or	r4,r4,r2
    f8bc:	81000115 	stw	r4,4(r16)
    f8c0:	01400144 	movi	r5,5
    f8c4:	8089883a 	add	r4,r16,r2
    f8c8:	21400115 	stw	r5,4(r4)
    f8cc:	21400215 	stw	r5,8(r4)
    f8d0:	3080cd36 	bltu	r6,r2,fc08 <_malloc_r+0x794>
    f8d4:	008000f4 	movhi	r2,3
    f8d8:	1087d504 	addi	r2,r2,8020
    f8dc:	11000017 	ldw	r4,0(r2)
    f8e0:	20c0012e 	bgeu	r4,r3,f8e8 <_malloc_r+0x474>
    f8e4:	10c00015 	stw	r3,0(r2)
    f8e8:	008000f4 	movhi	r2,3
    f8ec:	1087d404 	addi	r2,r2,8016
    f8f0:	11000017 	ldw	r4,0(r2)
    f8f4:	9c000217 	ldw	r16,8(r19)
    f8f8:	20c0012e 	bgeu	r4,r3,f900 <_malloc_r+0x48c>
    f8fc:	10c00015 	stw	r3,0(r2)
    f900:	80c00117 	ldw	r3,4(r16)
    f904:	00bfff04 	movi	r2,-4
    f908:	1886703a 	and	r3,r3,r2
    f90c:	1c45c83a 	sub	r2,r3,r17
    f910:	1c400236 	bltu	r3,r17,f91c <_malloc_r+0x4a8>
    f914:	00c003c4 	movi	r3,15
    f918:	18800416 	blt	r3,r2,f92c <_malloc_r+0x4b8>
    f91c:	9009883a 	mov	r4,r18
    f920:	00206780 	call	20678 <__malloc_unlock>
    f924:	0005883a 	mov	r2,zero
    f928:	003f7b06 	br	f718 <__alt_data_end+0xfc00f718>
    f92c:	88c00054 	ori	r3,r17,1
    f930:	80c00115 	stw	r3,4(r16)
    f934:	8463883a 	add	r17,r16,r17
    f938:	10800054 	ori	r2,r2,1
    f93c:	9c400215 	stw	r17,8(r19)
    f940:	88800115 	stw	r2,4(r17)
    f944:	9009883a 	mov	r4,r18
    f948:	00206780 	call	20678 <__malloc_unlock>
    f94c:	80800204 	addi	r2,r16,8
    f950:	003f7106 	br	f718 <__alt_data_end+0xfc00f718>
    f954:	00c00504 	movi	r3,20
    f958:	18804a2e 	bgeu	r3,r2,fa84 <_malloc_r+0x610>
    f95c:	00c01504 	movi	r3,84
    f960:	18806e36 	bltu	r3,r2,fb1c <_malloc_r+0x6a8>
    f964:	8804d33a 	srli	r2,r17,12
    f968:	12001bc4 	addi	r8,r2,111
    f96c:	11c01b84 	addi	r7,r2,110
    f970:	4209883a 	add	r4,r8,r8
    f974:	003edd06 	br	f4ec <__alt_data_end+0xfc00f4ec>
    f978:	3804d27a 	srli	r2,r7,9
    f97c:	00c00104 	movi	r3,4
    f980:	1880442e 	bgeu	r3,r2,fa94 <_malloc_r+0x620>
    f984:	00c00504 	movi	r3,20
    f988:	18808136 	bltu	r3,r2,fb90 <_malloc_r+0x71c>
    f98c:	11401704 	addi	r5,r2,92
    f990:	10c016c4 	addi	r3,r2,91
    f994:	294b883a 	add	r5,r5,r5
    f998:	294b883a 	add	r5,r5,r5
    f99c:	294b883a 	add	r5,r5,r5
    f9a0:	994b883a 	add	r5,r19,r5
    f9a4:	28800017 	ldw	r2,0(r5)
    f9a8:	018000f4 	movhi	r6,3
    f9ac:	297ffe04 	addi	r5,r5,-8
    f9b0:	31afd904 	addi	r6,r6,-16540
    f9b4:	28806526 	beq	r5,r2,fb4c <_malloc_r+0x6d8>
    f9b8:	01bfff04 	movi	r6,-4
    f9bc:	10c00117 	ldw	r3,4(r2)
    f9c0:	1986703a 	and	r3,r3,r6
    f9c4:	38c0022e 	bgeu	r7,r3,f9d0 <_malloc_r+0x55c>
    f9c8:	10800217 	ldw	r2,8(r2)
    f9cc:	28bffb1e 	bne	r5,r2,f9bc <__alt_data_end+0xfc00f9bc>
    f9d0:	11400317 	ldw	r5,12(r2)
    f9d4:	98c00117 	ldw	r3,4(r19)
    f9d8:	81400315 	stw	r5,12(r16)
    f9dc:	80800215 	stw	r2,8(r16)
    f9e0:	2c000215 	stw	r16,8(r5)
    f9e4:	14000315 	stw	r16,12(r2)
    f9e8:	003ef806 	br	f5cc <__alt_data_end+0xfc00f5cc>
    f9ec:	88c00054 	ori	r3,r17,1
    f9f0:	80c00115 	stw	r3,4(r16)
    f9f4:	8463883a 	add	r17,r16,r17
    f9f8:	34400515 	stw	r17,20(r6)
    f9fc:	34400415 	stw	r17,16(r6)
    fa00:	10c00054 	ori	r3,r2,1
    fa04:	8a000315 	stw	r8,12(r17)
    fa08:	8a000215 	stw	r8,8(r17)
    fa0c:	88c00115 	stw	r3,4(r17)
    fa10:	88a3883a 	add	r17,r17,r2
    fa14:	88800015 	stw	r2,0(r17)
    fa18:	9009883a 	mov	r4,r18
    fa1c:	00206780 	call	20678 <__malloc_unlock>
    fa20:	80800204 	addi	r2,r16,8
    fa24:	003f3c06 	br	f718 <__alt_data_end+0xfc00f718>
    fa28:	30c00117 	ldw	r3,4(r6)
    fa2c:	003ee706 	br	f5cc <__alt_data_end+0xfc00f5cc>
    fa30:	5ac00044 	addi	r11,r11,1
    fa34:	588000cc 	andi	r2,r11,3
    fa38:	31800204 	addi	r6,r6,8
    fa3c:	103efd1e 	bne	r2,zero,f634 <__alt_data_end+0xfc00f634>
    fa40:	00002406 	br	fad4 <_malloc_r+0x660>
    fa44:	14000317 	ldw	r16,12(r2)
    fa48:	143f251e 	bne	r2,r16,f6e0 <__alt_data_end+0xfc00f6e0>
    fa4c:	21000084 	addi	r4,r4,2
    fa50:	003ebc06 	br	f544 <__alt_data_end+0xfc00f544>
    fa54:	8085883a 	add	r2,r16,r2
    fa58:	10c00117 	ldw	r3,4(r2)
    fa5c:	81000317 	ldw	r4,12(r16)
    fa60:	81400217 	ldw	r5,8(r16)
    fa64:	18c00054 	ori	r3,r3,1
    fa68:	10c00115 	stw	r3,4(r2)
    fa6c:	29000315 	stw	r4,12(r5)
    fa70:	21400215 	stw	r5,8(r4)
    fa74:	9009883a 	mov	r4,r18
    fa78:	00206780 	call	20678 <__malloc_unlock>
    fa7c:	80800204 	addi	r2,r16,8
    fa80:	003f2506 	br	f718 <__alt_data_end+0xfc00f718>
    fa84:	12001704 	addi	r8,r2,92
    fa88:	11c016c4 	addi	r7,r2,91
    fa8c:	4209883a 	add	r4,r8,r8
    fa90:	003e9606 	br	f4ec <__alt_data_end+0xfc00f4ec>
    fa94:	3804d1ba 	srli	r2,r7,6
    fa98:	11400e44 	addi	r5,r2,57
    fa9c:	10c00e04 	addi	r3,r2,56
    faa0:	294b883a 	add	r5,r5,r5
    faa4:	003fbc06 	br	f998 <__alt_data_end+0xfc00f998>
    faa8:	84ff5926 	beq	r16,r19,f810 <__alt_data_end+0xfc00f810>
    faac:	008000f4 	movhi	r2,3
    fab0:	10afd904 	addi	r2,r2,-16540
    fab4:	14000217 	ldw	r16,8(r2)
    fab8:	00bfff04 	movi	r2,-4
    fabc:	80c00117 	ldw	r3,4(r16)
    fac0:	1886703a 	and	r3,r3,r2
    fac4:	003f9106 	br	f90c <__alt_data_end+0xfc00f90c>
    fac8:	60800217 	ldw	r2,8(r12)
    facc:	213fffc4 	addi	r4,r4,-1
    fad0:	1300651e 	bne	r2,r12,fc68 <_malloc_r+0x7f4>
    fad4:	208000cc 	andi	r2,r4,3
    fad8:	633ffe04 	addi	r12,r12,-8
    fadc:	103ffa1e 	bne	r2,zero,fac8 <__alt_data_end+0xfc00fac8>
    fae0:	98800117 	ldw	r2,4(r19)
    fae4:	0146303a 	nor	r3,zero,r5
    fae8:	1884703a 	and	r2,r3,r2
    faec:	98800115 	stw	r2,4(r19)
    faf0:	294b883a 	add	r5,r5,r5
    faf4:	117f2836 	bltu	r2,r5,f798 <__alt_data_end+0xfc00f798>
    faf8:	283f2726 	beq	r5,zero,f798 <__alt_data_end+0xfc00f798>
    fafc:	2886703a 	and	r3,r5,r2
    fb00:	5809883a 	mov	r4,r11
    fb04:	183ec31e 	bne	r3,zero,f614 <__alt_data_end+0xfc00f614>
    fb08:	294b883a 	add	r5,r5,r5
    fb0c:	2886703a 	and	r3,r5,r2
    fb10:	21000104 	addi	r4,r4,4
    fb14:	183ffc26 	beq	r3,zero,fb08 <__alt_data_end+0xfc00fb08>
    fb18:	003ebe06 	br	f614 <__alt_data_end+0xfc00f614>
    fb1c:	00c05504 	movi	r3,340
    fb20:	18801236 	bltu	r3,r2,fb6c <_malloc_r+0x6f8>
    fb24:	8804d3fa 	srli	r2,r17,15
    fb28:	12001e04 	addi	r8,r2,120
    fb2c:	11c01dc4 	addi	r7,r2,119
    fb30:	4209883a 	add	r4,r8,r8
    fb34:	003e6d06 	br	f4ec <__alt_data_end+0xfc00f4ec>
    fb38:	00c40004 	movi	r3,4096
    fb3c:	003f4606 	br	f858 <__alt_data_end+0xfc00f858>
    fb40:	00800044 	movi	r2,1
    fb44:	a0800115 	stw	r2,4(r20)
    fb48:	003f7406 	br	f91c <__alt_data_end+0xfc00f91c>
    fb4c:	1805d0ba 	srai	r2,r3,2
    fb50:	01c00044 	movi	r7,1
    fb54:	30c00117 	ldw	r3,4(r6)
    fb58:	388e983a 	sll	r7,r7,r2
    fb5c:	2805883a 	mov	r2,r5
    fb60:	38c6b03a 	or	r3,r7,r3
    fb64:	30c00115 	stw	r3,4(r6)
    fb68:	003f9b06 	br	f9d8 <__alt_data_end+0xfc00f9d8>
    fb6c:	00c15504 	movi	r3,1364
    fb70:	18801a36 	bltu	r3,r2,fbdc <_malloc_r+0x768>
    fb74:	8804d4ba 	srli	r2,r17,18
    fb78:	12001f44 	addi	r8,r2,125
    fb7c:	11c01f04 	addi	r7,r2,124
    fb80:	4209883a 	add	r4,r8,r8
    fb84:	003e5906 	br	f4ec <__alt_data_end+0xfc00f4ec>
    fb88:	ad400404 	addi	r21,r21,16
    fb8c:	003f1706 	br	f7ec <__alt_data_end+0xfc00f7ec>
    fb90:	00c01504 	movi	r3,84
    fb94:	18802336 	bltu	r3,r2,fc24 <_malloc_r+0x7b0>
    fb98:	3804d33a 	srli	r2,r7,12
    fb9c:	11401bc4 	addi	r5,r2,111
    fba0:	10c01b84 	addi	r3,r2,110
    fba4:	294b883a 	add	r5,r5,r5
    fba8:	003f7b06 	br	f998 <__alt_data_end+0xfc00f998>
    fbac:	9c000217 	ldw	r16,8(r19)
    fbb0:	00bfff04 	movi	r2,-4
    fbb4:	80c00117 	ldw	r3,4(r16)
    fbb8:	1886703a 	and	r3,r3,r2
    fbbc:	003f5306 	br	f90c <__alt_data_end+0xfc00f90c>
    fbc0:	3083ffcc 	andi	r2,r6,4095
    fbc4:	103f181e 	bne	r2,zero,f828 <__alt_data_end+0xfc00f828>
    fbc8:	99000217 	ldw	r4,8(r19)
    fbcc:	b545883a 	add	r2,r22,r21
    fbd0:	10800054 	ori	r2,r2,1
    fbd4:	20800115 	stw	r2,4(r4)
    fbd8:	003f3e06 	br	f8d4 <__alt_data_end+0xfc00f8d4>
    fbdc:	01003f84 	movi	r4,254
    fbe0:	02001fc4 	movi	r8,127
    fbe4:	01c01f84 	movi	r7,126
    fbe8:	003e4006 	br	f4ec <__alt_data_end+0xfc00f4ec>
    fbec:	008000f4 	movhi	r2,3
    fbf0:	10bb3d04 	addi	r2,r2,-4876
    fbf4:	15000015 	stw	r20,0(r2)
    fbf8:	003f1106 	br	f840 <__alt_data_end+0xfc00f840>
    fbfc:	00800044 	movi	r2,1
    fc00:	002b883a 	mov	r21,zero
    fc04:	003f1f06 	br	f884 <__alt_data_end+0xfc00f884>
    fc08:	81400204 	addi	r5,r16,8
    fc0c:	9009883a 	mov	r4,r18
    fc10:	0016dd80 	call	16dd8 <_free_r>
    fc14:	008000f4 	movhi	r2,3
    fc18:	10882e04 	addi	r2,r2,8376
    fc1c:	10c00017 	ldw	r3,0(r2)
    fc20:	003f2c06 	br	f8d4 <__alt_data_end+0xfc00f8d4>
    fc24:	00c05504 	movi	r3,340
    fc28:	18800536 	bltu	r3,r2,fc40 <_malloc_r+0x7cc>
    fc2c:	3804d3fa 	srli	r2,r7,15
    fc30:	11401e04 	addi	r5,r2,120
    fc34:	10c01dc4 	addi	r3,r2,119
    fc38:	294b883a 	add	r5,r5,r5
    fc3c:	003f5606 	br	f998 <__alt_data_end+0xfc00f998>
    fc40:	00c15504 	movi	r3,1364
    fc44:	18800536 	bltu	r3,r2,fc5c <_malloc_r+0x7e8>
    fc48:	3804d4ba 	srli	r2,r7,18
    fc4c:	11401f44 	addi	r5,r2,125
    fc50:	10c01f04 	addi	r3,r2,124
    fc54:	294b883a 	add	r5,r5,r5
    fc58:	003f4f06 	br	f998 <__alt_data_end+0xfc00f998>
    fc5c:	01403f84 	movi	r5,254
    fc60:	00c01f84 	movi	r3,126
    fc64:	003f4c06 	br	f998 <__alt_data_end+0xfc00f998>
    fc68:	98800117 	ldw	r2,4(r19)
    fc6c:	003fa006 	br	faf0 <__alt_data_end+0xfc00faf0>
    fc70:	8808d0fa 	srli	r4,r17,3
    fc74:	20800044 	addi	r2,r4,1
    fc78:	1085883a 	add	r2,r2,r2
    fc7c:	003e9006 	br	f6c0 <__alt_data_end+0xfc00f6c0>

0000fc80 <memcpy>:
    fc80:	defffd04 	addi	sp,sp,-12
    fc84:	dfc00215 	stw	ra,8(sp)
    fc88:	dc400115 	stw	r17,4(sp)
    fc8c:	dc000015 	stw	r16,0(sp)
    fc90:	00c003c4 	movi	r3,15
    fc94:	2005883a 	mov	r2,r4
    fc98:	1980452e 	bgeu	r3,r6,fdb0 <memcpy+0x130>
    fc9c:	2906b03a 	or	r3,r5,r4
    fca0:	18c000cc 	andi	r3,r3,3
    fca4:	1800441e 	bne	r3,zero,fdb8 <memcpy+0x138>
    fca8:	347ffc04 	addi	r17,r6,-16
    fcac:	8822d13a 	srli	r17,r17,4
    fcb0:	28c00104 	addi	r3,r5,4
    fcb4:	23400104 	addi	r13,r4,4
    fcb8:	8820913a 	slli	r16,r17,4
    fcbc:	2b000204 	addi	r12,r5,8
    fcc0:	22c00204 	addi	r11,r4,8
    fcc4:	84000504 	addi	r16,r16,20
    fcc8:	2a800304 	addi	r10,r5,12
    fccc:	22400304 	addi	r9,r4,12
    fcd0:	2c21883a 	add	r16,r5,r16
    fcd4:	2811883a 	mov	r8,r5
    fcd8:	200f883a 	mov	r7,r4
    fcdc:	41000017 	ldw	r4,0(r8)
    fce0:	1fc00017 	ldw	ra,0(r3)
    fce4:	63c00017 	ldw	r15,0(r12)
    fce8:	39000015 	stw	r4,0(r7)
    fcec:	53800017 	ldw	r14,0(r10)
    fcf0:	6fc00015 	stw	ra,0(r13)
    fcf4:	5bc00015 	stw	r15,0(r11)
    fcf8:	4b800015 	stw	r14,0(r9)
    fcfc:	18c00404 	addi	r3,r3,16
    fd00:	39c00404 	addi	r7,r7,16
    fd04:	42000404 	addi	r8,r8,16
    fd08:	6b400404 	addi	r13,r13,16
    fd0c:	63000404 	addi	r12,r12,16
    fd10:	5ac00404 	addi	r11,r11,16
    fd14:	52800404 	addi	r10,r10,16
    fd18:	4a400404 	addi	r9,r9,16
    fd1c:	1c3fef1e 	bne	r3,r16,fcdc <__alt_data_end+0xfc00fcdc>
    fd20:	89c00044 	addi	r7,r17,1
    fd24:	380e913a 	slli	r7,r7,4
    fd28:	310003cc 	andi	r4,r6,15
    fd2c:	02c000c4 	movi	r11,3
    fd30:	11c7883a 	add	r3,r2,r7
    fd34:	29cb883a 	add	r5,r5,r7
    fd38:	5900212e 	bgeu	r11,r4,fdc0 <memcpy+0x140>
    fd3c:	1813883a 	mov	r9,r3
    fd40:	2811883a 	mov	r8,r5
    fd44:	200f883a 	mov	r7,r4
    fd48:	42800017 	ldw	r10,0(r8)
    fd4c:	4a400104 	addi	r9,r9,4
    fd50:	39ffff04 	addi	r7,r7,-4
    fd54:	4abfff15 	stw	r10,-4(r9)
    fd58:	42000104 	addi	r8,r8,4
    fd5c:	59fffa36 	bltu	r11,r7,fd48 <__alt_data_end+0xfc00fd48>
    fd60:	213fff04 	addi	r4,r4,-4
    fd64:	2008d0ba 	srli	r4,r4,2
    fd68:	318000cc 	andi	r6,r6,3
    fd6c:	21000044 	addi	r4,r4,1
    fd70:	2109883a 	add	r4,r4,r4
    fd74:	2109883a 	add	r4,r4,r4
    fd78:	1907883a 	add	r3,r3,r4
    fd7c:	290b883a 	add	r5,r5,r4
    fd80:	30000626 	beq	r6,zero,fd9c <memcpy+0x11c>
    fd84:	198d883a 	add	r6,r3,r6
    fd88:	29c00003 	ldbu	r7,0(r5)
    fd8c:	18c00044 	addi	r3,r3,1
    fd90:	29400044 	addi	r5,r5,1
    fd94:	19ffffc5 	stb	r7,-1(r3)
    fd98:	19bffb1e 	bne	r3,r6,fd88 <__alt_data_end+0xfc00fd88>
    fd9c:	dfc00217 	ldw	ra,8(sp)
    fda0:	dc400117 	ldw	r17,4(sp)
    fda4:	dc000017 	ldw	r16,0(sp)
    fda8:	dec00304 	addi	sp,sp,12
    fdac:	f800283a 	ret
    fdb0:	2007883a 	mov	r3,r4
    fdb4:	003ff206 	br	fd80 <__alt_data_end+0xfc00fd80>
    fdb8:	2007883a 	mov	r3,r4
    fdbc:	003ff106 	br	fd84 <__alt_data_end+0xfc00fd84>
    fdc0:	200d883a 	mov	r6,r4
    fdc4:	003fee06 	br	fd80 <__alt_data_end+0xfc00fd80>

0000fdc8 <memset>:
    fdc8:	20c000cc 	andi	r3,r4,3
    fdcc:	2005883a 	mov	r2,r4
    fdd0:	18004426 	beq	r3,zero,fee4 <memset+0x11c>
    fdd4:	31ffffc4 	addi	r7,r6,-1
    fdd8:	30004026 	beq	r6,zero,fedc <memset+0x114>
    fddc:	2813883a 	mov	r9,r5
    fde0:	200d883a 	mov	r6,r4
    fde4:	2007883a 	mov	r3,r4
    fde8:	00000406 	br	fdfc <memset+0x34>
    fdec:	3a3fffc4 	addi	r8,r7,-1
    fdf0:	31800044 	addi	r6,r6,1
    fdf4:	38003926 	beq	r7,zero,fedc <memset+0x114>
    fdf8:	400f883a 	mov	r7,r8
    fdfc:	18c00044 	addi	r3,r3,1
    fe00:	32400005 	stb	r9,0(r6)
    fe04:	1a0000cc 	andi	r8,r3,3
    fe08:	403ff81e 	bne	r8,zero,fdec <__alt_data_end+0xfc00fdec>
    fe0c:	010000c4 	movi	r4,3
    fe10:	21c02d2e 	bgeu	r4,r7,fec8 <memset+0x100>
    fe14:	29003fcc 	andi	r4,r5,255
    fe18:	200c923a 	slli	r6,r4,8
    fe1c:	3108b03a 	or	r4,r6,r4
    fe20:	200c943a 	slli	r6,r4,16
    fe24:	218cb03a 	or	r6,r4,r6
    fe28:	010003c4 	movi	r4,15
    fe2c:	21c0182e 	bgeu	r4,r7,fe90 <memset+0xc8>
    fe30:	3b3ffc04 	addi	r12,r7,-16
    fe34:	6018d13a 	srli	r12,r12,4
    fe38:	1a000104 	addi	r8,r3,4
    fe3c:	1ac00204 	addi	r11,r3,8
    fe40:	6008913a 	slli	r4,r12,4
    fe44:	1a800304 	addi	r10,r3,12
    fe48:	1813883a 	mov	r9,r3
    fe4c:	21000504 	addi	r4,r4,20
    fe50:	1909883a 	add	r4,r3,r4
    fe54:	49800015 	stw	r6,0(r9)
    fe58:	41800015 	stw	r6,0(r8)
    fe5c:	59800015 	stw	r6,0(r11)
    fe60:	51800015 	stw	r6,0(r10)
    fe64:	42000404 	addi	r8,r8,16
    fe68:	4a400404 	addi	r9,r9,16
    fe6c:	5ac00404 	addi	r11,r11,16
    fe70:	52800404 	addi	r10,r10,16
    fe74:	413ff71e 	bne	r8,r4,fe54 <__alt_data_end+0xfc00fe54>
    fe78:	63000044 	addi	r12,r12,1
    fe7c:	6018913a 	slli	r12,r12,4
    fe80:	39c003cc 	andi	r7,r7,15
    fe84:	010000c4 	movi	r4,3
    fe88:	1b07883a 	add	r3,r3,r12
    fe8c:	21c00e2e 	bgeu	r4,r7,fec8 <memset+0x100>
    fe90:	1813883a 	mov	r9,r3
    fe94:	3811883a 	mov	r8,r7
    fe98:	010000c4 	movi	r4,3
    fe9c:	49800015 	stw	r6,0(r9)
    fea0:	423fff04 	addi	r8,r8,-4
    fea4:	4a400104 	addi	r9,r9,4
    fea8:	223ffc36 	bltu	r4,r8,fe9c <__alt_data_end+0xfc00fe9c>
    feac:	393fff04 	addi	r4,r7,-4
    feb0:	2008d0ba 	srli	r4,r4,2
    feb4:	39c000cc 	andi	r7,r7,3
    feb8:	21000044 	addi	r4,r4,1
    febc:	2109883a 	add	r4,r4,r4
    fec0:	2109883a 	add	r4,r4,r4
    fec4:	1907883a 	add	r3,r3,r4
    fec8:	38000526 	beq	r7,zero,fee0 <memset+0x118>
    fecc:	19cf883a 	add	r7,r3,r7
    fed0:	19400005 	stb	r5,0(r3)
    fed4:	18c00044 	addi	r3,r3,1
    fed8:	38fffd1e 	bne	r7,r3,fed0 <__alt_data_end+0xfc00fed0>
    fedc:	f800283a 	ret
    fee0:	f800283a 	ret
    fee4:	2007883a 	mov	r3,r4
    fee8:	300f883a 	mov	r7,r6
    feec:	003fc706 	br	fe0c <__alt_data_end+0xfc00fe0c>

0000fef0 <_printf_r>:
    fef0:	defffd04 	addi	sp,sp,-12
    fef4:	2805883a 	mov	r2,r5
    fef8:	dfc00015 	stw	ra,0(sp)
    fefc:	d9800115 	stw	r6,4(sp)
    ff00:	d9c00215 	stw	r7,8(sp)
    ff04:	21400217 	ldw	r5,8(r4)
    ff08:	d9c00104 	addi	r7,sp,4
    ff0c:	100d883a 	mov	r6,r2
    ff10:	00128a40 	call	128a4 <___vfprintf_internal_r>
    ff14:	dfc00017 	ldw	ra,0(sp)
    ff18:	dec00304 	addi	sp,sp,12
    ff1c:	f800283a 	ret

0000ff20 <printf>:
    ff20:	defffc04 	addi	sp,sp,-16
    ff24:	dfc00015 	stw	ra,0(sp)
    ff28:	d9400115 	stw	r5,4(sp)
    ff2c:	d9800215 	stw	r6,8(sp)
    ff30:	d9c00315 	stw	r7,12(sp)
    ff34:	008000f4 	movhi	r2,3
    ff38:	10bb3c04 	addi	r2,r2,-4880
    ff3c:	10800017 	ldw	r2,0(r2)
    ff40:	200b883a 	mov	r5,r4
    ff44:	d9800104 	addi	r6,sp,4
    ff48:	11000217 	ldw	r4,8(r2)
    ff4c:	0014b800 	call	14b80 <__vfprintf_internal>
    ff50:	dfc00017 	ldw	ra,0(sp)
    ff54:	dec00404 	addi	sp,sp,16
    ff58:	f800283a 	ret

0000ff5c <_putchar_r>:
    ff5c:	21800217 	ldw	r6,8(r4)
    ff60:	0018cc81 	jmpi	18cc8 <_putc_r>

0000ff64 <putchar>:
    ff64:	008000f4 	movhi	r2,3
    ff68:	10bb3c04 	addi	r2,r2,-4880
    ff6c:	200b883a 	mov	r5,r4
    ff70:	11000017 	ldw	r4,0(r2)
    ff74:	21800217 	ldw	r6,8(r4)
    ff78:	0018cc81 	jmpi	18cc8 <_putc_r>

0000ff7c <_puts_r>:
    ff7c:	defff604 	addi	sp,sp,-40
    ff80:	dc000715 	stw	r16,28(sp)
    ff84:	2021883a 	mov	r16,r4
    ff88:	2809883a 	mov	r4,r5
    ff8c:	dc400815 	stw	r17,32(sp)
    ff90:	dfc00915 	stw	ra,36(sp)
    ff94:	2823883a 	mov	r17,r5
    ff98:	00105480 	call	10548 <strlen>
    ff9c:	10c00044 	addi	r3,r2,1
    ffa0:	d8800115 	stw	r2,4(sp)
    ffa4:	008000f4 	movhi	r2,3
    ffa8:	10ae3604 	addi	r2,r2,-18216
    ffac:	d8800215 	stw	r2,8(sp)
    ffb0:	00800044 	movi	r2,1
    ffb4:	d8800315 	stw	r2,12(sp)
    ffb8:	00800084 	movi	r2,2
    ffbc:	dc400015 	stw	r17,0(sp)
    ffc0:	d8c00615 	stw	r3,24(sp)
    ffc4:	dec00415 	stw	sp,16(sp)
    ffc8:	d8800515 	stw	r2,20(sp)
    ffcc:	80000226 	beq	r16,zero,ffd8 <_puts_r+0x5c>
    ffd0:	80800e17 	ldw	r2,56(r16)
    ffd4:	10001426 	beq	r2,zero,10028 <_puts_r+0xac>
    ffd8:	81400217 	ldw	r5,8(r16)
    ffdc:	2880030b 	ldhu	r2,12(r5)
    ffe0:	10c8000c 	andi	r3,r2,8192
    ffe4:	1800061e 	bne	r3,zero,10000 <_puts_r+0x84>
    ffe8:	29001917 	ldw	r4,100(r5)
    ffec:	00f7ffc4 	movi	r3,-8193
    fff0:	10880014 	ori	r2,r2,8192
    fff4:	20c6703a 	and	r3,r4,r3
    fff8:	2880030d 	sth	r2,12(r5)
    fffc:	28c01915 	stw	r3,100(r5)
   10000:	d9800404 	addi	r6,sp,16
   10004:	8009883a 	mov	r4,r16
   10008:	00170e80 	call	170e8 <__sfvwrite_r>
   1000c:	1000091e 	bne	r2,zero,10034 <_puts_r+0xb8>
   10010:	00800284 	movi	r2,10
   10014:	dfc00917 	ldw	ra,36(sp)
   10018:	dc400817 	ldw	r17,32(sp)
   1001c:	dc000717 	ldw	r16,28(sp)
   10020:	dec00a04 	addi	sp,sp,40
   10024:	f800283a 	ret
   10028:	8009883a 	mov	r4,r16
   1002c:	0016c640 	call	16c64 <__sinit>
   10030:	003fe906 	br	ffd8 <__alt_data_end+0xfc00ffd8>
   10034:	00bfffc4 	movi	r2,-1
   10038:	003ff606 	br	10014 <__alt_data_end+0xfc010014>

0001003c <puts>:
   1003c:	008000f4 	movhi	r2,3
   10040:	10bb3c04 	addi	r2,r2,-4880
   10044:	200b883a 	mov	r5,r4
   10048:	11000017 	ldw	r4,0(r2)
   1004c:	000ff7c1 	jmpi	ff7c <_puts_r>

00010050 <_sbrk_r>:
   10050:	defffd04 	addi	sp,sp,-12
   10054:	dc000015 	stw	r16,0(sp)
   10058:	040000f4 	movhi	r16,3
   1005c:	dc400115 	stw	r17,4(sp)
   10060:	8407d704 	addi	r16,r16,8028
   10064:	2023883a 	mov	r17,r4
   10068:	2809883a 	mov	r4,r5
   1006c:	dfc00215 	stw	ra,8(sp)
   10070:	80000015 	stw	zero,0(r16)
   10074:	00208600 	call	20860 <sbrk>
   10078:	00ffffc4 	movi	r3,-1
   1007c:	10c00526 	beq	r2,r3,10094 <_sbrk_r+0x44>
   10080:	dfc00217 	ldw	ra,8(sp)
   10084:	dc400117 	ldw	r17,4(sp)
   10088:	dc000017 	ldw	r16,0(sp)
   1008c:	dec00304 	addi	sp,sp,12
   10090:	f800283a 	ret
   10094:	80c00017 	ldw	r3,0(r16)
   10098:	183ff926 	beq	r3,zero,10080 <__alt_data_end+0xfc010080>
   1009c:	88c00015 	stw	r3,0(r17)
   100a0:	003ff706 	br	10080 <__alt_data_end+0xfc010080>

000100a4 <_init_signal_r>:
   100a4:	2080b717 	ldw	r2,732(r4)
   100a8:	10000226 	beq	r2,zero,100b4 <_init_signal_r+0x10>
   100ac:	0005883a 	mov	r2,zero
   100b0:	f800283a 	ret
   100b4:	defffe04 	addi	sp,sp,-8
   100b8:	01402004 	movi	r5,128
   100bc:	dc000015 	stw	r16,0(sp)
   100c0:	dfc00115 	stw	ra,4(sp)
   100c4:	2021883a 	mov	r16,r4
   100c8:	000f4740 	call	f474 <_malloc_r>
   100cc:	8080b715 	stw	r2,732(r16)
   100d0:	10000d26 	beq	r2,zero,10108 <_init_signal_r+0x64>
   100d4:	0007883a 	mov	r3,zero
   100d8:	01002004 	movi	r4,128
   100dc:	00000106 	br	100e4 <_init_signal_r+0x40>
   100e0:	8080b717 	ldw	r2,732(r16)
   100e4:	10c5883a 	add	r2,r2,r3
   100e8:	10000015 	stw	zero,0(r2)
   100ec:	18c00104 	addi	r3,r3,4
   100f0:	193ffb1e 	bne	r3,r4,100e0 <__alt_data_end+0xfc0100e0>
   100f4:	0005883a 	mov	r2,zero
   100f8:	dfc00117 	ldw	ra,4(sp)
   100fc:	dc000017 	ldw	r16,0(sp)
   10100:	dec00204 	addi	sp,sp,8
   10104:	f800283a 	ret
   10108:	00bfffc4 	movi	r2,-1
   1010c:	003ffa06 	br	100f8 <__alt_data_end+0xfc0100f8>

00010110 <_signal_r>:
   10110:	00c007c4 	movi	r3,31
   10114:	19401536 	bltu	r3,r5,1016c <_signal_r+0x5c>
   10118:	2080b717 	ldw	r2,732(r4)
   1011c:	defffc04 	addi	sp,sp,-16
   10120:	dc800215 	stw	r18,8(sp)
   10124:	dc400115 	stw	r17,4(sp)
   10128:	dc000015 	stw	r16,0(sp)
   1012c:	dfc00315 	stw	ra,12(sp)
   10130:	3023883a 	mov	r17,r6
   10134:	2021883a 	mov	r16,r4
   10138:	2825883a 	mov	r18,r5
   1013c:	10000f26 	beq	r2,zero,1017c <_signal_r+0x6c>
   10140:	948b883a 	add	r5,r18,r18
   10144:	294b883a 	add	r5,r5,r5
   10148:	114b883a 	add	r5,r2,r5
   1014c:	28800017 	ldw	r2,0(r5)
   10150:	2c400015 	stw	r17,0(r5)
   10154:	dfc00317 	ldw	ra,12(sp)
   10158:	dc800217 	ldw	r18,8(sp)
   1015c:	dc400117 	ldw	r17,4(sp)
   10160:	dc000017 	ldw	r16,0(sp)
   10164:	dec00404 	addi	sp,sp,16
   10168:	f800283a 	ret
   1016c:	00c00584 	movi	r3,22
   10170:	20c00015 	stw	r3,0(r4)
   10174:	00bfffc4 	movi	r2,-1
   10178:	f800283a 	ret
   1017c:	00100a40 	call	100a4 <_init_signal_r>
   10180:	1000021e 	bne	r2,zero,1018c <_signal_r+0x7c>
   10184:	8080b717 	ldw	r2,732(r16)
   10188:	003fed06 	br	10140 <__alt_data_end+0xfc010140>
   1018c:	00bfffc4 	movi	r2,-1
   10190:	003ff006 	br	10154 <__alt_data_end+0xfc010154>

00010194 <_raise_r>:
   10194:	008007c4 	movi	r2,31
   10198:	11402936 	bltu	r2,r5,10240 <_raise_r+0xac>
   1019c:	20c0b717 	ldw	r3,732(r4)
   101a0:	defffd04 	addi	sp,sp,-12
   101a4:	dc400115 	stw	r17,4(sp)
   101a8:	dc000015 	stw	r16,0(sp)
   101ac:	dfc00215 	stw	ra,8(sp)
   101b0:	2021883a 	mov	r16,r4
   101b4:	2823883a 	mov	r17,r5
   101b8:	18001726 	beq	r3,zero,10218 <_raise_r+0x84>
   101bc:	2945883a 	add	r2,r5,r5
   101c0:	1085883a 	add	r2,r2,r2
   101c4:	1887883a 	add	r3,r3,r2
   101c8:	19800017 	ldw	r6,0(r3)
   101cc:	30001226 	beq	r6,zero,10218 <_raise_r+0x84>
   101d0:	00800044 	movi	r2,1
   101d4:	30800e26 	beq	r6,r2,10210 <_raise_r+0x7c>
   101d8:	013fffc4 	movi	r4,-1
   101dc:	31000926 	beq	r6,r4,10204 <_raise_r+0x70>
   101e0:	18000015 	stw	zero,0(r3)
   101e4:	2809883a 	mov	r4,r5
   101e8:	303ee83a 	callr	r6
   101ec:	0005883a 	mov	r2,zero
   101f0:	dfc00217 	ldw	ra,8(sp)
   101f4:	dc400117 	ldw	r17,4(sp)
   101f8:	dc000017 	ldw	r16,0(sp)
   101fc:	dec00304 	addi	sp,sp,12
   10200:	f800283a 	ret
   10204:	00c00584 	movi	r3,22
   10208:	80c00015 	stw	r3,0(r16)
   1020c:	003ff806 	br	101f0 <__alt_data_end+0xfc0101f0>
   10210:	0005883a 	mov	r2,zero
   10214:	003ff606 	br	101f0 <__alt_data_end+0xfc0101f0>
   10218:	8009883a 	mov	r4,r16
   1021c:	00103a40 	call	103a4 <_getpid_r>
   10220:	880d883a 	mov	r6,r17
   10224:	100b883a 	mov	r5,r2
   10228:	8009883a 	mov	r4,r16
   1022c:	dfc00217 	ldw	ra,8(sp)
   10230:	dc400117 	ldw	r17,4(sp)
   10234:	dc000017 	ldw	r16,0(sp)
   10238:	dec00304 	addi	sp,sp,12
   1023c:	00103481 	jmpi	10348 <_kill_r>
   10240:	00800584 	movi	r2,22
   10244:	20800015 	stw	r2,0(r4)
   10248:	00bfffc4 	movi	r2,-1
   1024c:	f800283a 	ret

00010250 <__sigtramp_r>:
   10250:	008007c4 	movi	r2,31
   10254:	11402436 	bltu	r2,r5,102e8 <__sigtramp_r+0x98>
   10258:	20c0b717 	ldw	r3,732(r4)
   1025c:	defffd04 	addi	sp,sp,-12
   10260:	dc400115 	stw	r17,4(sp)
   10264:	dc000015 	stw	r16,0(sp)
   10268:	dfc00215 	stw	ra,8(sp)
   1026c:	2021883a 	mov	r16,r4
   10270:	2823883a 	mov	r17,r5
   10274:	18001826 	beq	r3,zero,102d8 <__sigtramp_r+0x88>
   10278:	8c45883a 	add	r2,r17,r17
   1027c:	1085883a 	add	r2,r2,r2
   10280:	1885883a 	add	r2,r3,r2
   10284:	10c00017 	ldw	r3,0(r2)
   10288:	18001126 	beq	r3,zero,102d0 <__sigtramp_r+0x80>
   1028c:	013fffc4 	movi	r4,-1
   10290:	19000d26 	beq	r3,r4,102c8 <__sigtramp_r+0x78>
   10294:	01000044 	movi	r4,1
   10298:	19000926 	beq	r3,r4,102c0 <__sigtramp_r+0x70>
   1029c:	10000015 	stw	zero,0(r2)
   102a0:	8809883a 	mov	r4,r17
   102a4:	183ee83a 	callr	r3
   102a8:	0005883a 	mov	r2,zero
   102ac:	dfc00217 	ldw	ra,8(sp)
   102b0:	dc400117 	ldw	r17,4(sp)
   102b4:	dc000017 	ldw	r16,0(sp)
   102b8:	dec00304 	addi	sp,sp,12
   102bc:	f800283a 	ret
   102c0:	008000c4 	movi	r2,3
   102c4:	003ff906 	br	102ac <__alt_data_end+0xfc0102ac>
   102c8:	00800084 	movi	r2,2
   102cc:	003ff706 	br	102ac <__alt_data_end+0xfc0102ac>
   102d0:	00800044 	movi	r2,1
   102d4:	003ff506 	br	102ac <__alt_data_end+0xfc0102ac>
   102d8:	00100a40 	call	100a4 <_init_signal_r>
   102dc:	1000041e 	bne	r2,zero,102f0 <__sigtramp_r+0xa0>
   102e0:	80c0b717 	ldw	r3,732(r16)
   102e4:	003fe406 	br	10278 <__alt_data_end+0xfc010278>
   102e8:	00bfffc4 	movi	r2,-1
   102ec:	f800283a 	ret
   102f0:	00bfffc4 	movi	r2,-1
   102f4:	003fed06 	br	102ac <__alt_data_end+0xfc0102ac>

000102f8 <raise>:
   102f8:	008000f4 	movhi	r2,3
   102fc:	10bb3c04 	addi	r2,r2,-4880
   10300:	200b883a 	mov	r5,r4
   10304:	11000017 	ldw	r4,0(r2)
   10308:	00101941 	jmpi	10194 <_raise_r>

0001030c <signal>:
   1030c:	008000f4 	movhi	r2,3
   10310:	10bb3c04 	addi	r2,r2,-4880
   10314:	280d883a 	mov	r6,r5
   10318:	200b883a 	mov	r5,r4
   1031c:	11000017 	ldw	r4,0(r2)
   10320:	00101101 	jmpi	10110 <_signal_r>

00010324 <_init_signal>:
   10324:	008000f4 	movhi	r2,3
   10328:	10bb3c04 	addi	r2,r2,-4880
   1032c:	11000017 	ldw	r4,0(r2)
   10330:	00100a41 	jmpi	100a4 <_init_signal_r>

00010334 <__sigtramp>:
   10334:	008000f4 	movhi	r2,3
   10338:	10bb3c04 	addi	r2,r2,-4880
   1033c:	200b883a 	mov	r5,r4
   10340:	11000017 	ldw	r4,0(r2)
   10344:	00102501 	jmpi	10250 <__sigtramp_r>

00010348 <_kill_r>:
   10348:	defffd04 	addi	sp,sp,-12
   1034c:	2805883a 	mov	r2,r5
   10350:	dc000015 	stw	r16,0(sp)
   10354:	040000f4 	movhi	r16,3
   10358:	dc400115 	stw	r17,4(sp)
   1035c:	8407d704 	addi	r16,r16,8028
   10360:	2023883a 	mov	r17,r4
   10364:	300b883a 	mov	r5,r6
   10368:	1009883a 	mov	r4,r2
   1036c:	dfc00215 	stw	ra,8(sp)
   10370:	80000015 	stw	zero,0(r16)
   10374:	00202a40 	call	202a4 <kill>
   10378:	00ffffc4 	movi	r3,-1
   1037c:	10c00526 	beq	r2,r3,10394 <_kill_r+0x4c>
   10380:	dfc00217 	ldw	ra,8(sp)
   10384:	dc400117 	ldw	r17,4(sp)
   10388:	dc000017 	ldw	r16,0(sp)
   1038c:	dec00304 	addi	sp,sp,12
   10390:	f800283a 	ret
   10394:	80c00017 	ldw	r3,0(r16)
   10398:	183ff926 	beq	r3,zero,10380 <__alt_data_end+0xfc010380>
   1039c:	88c00015 	stw	r3,0(r17)
   103a0:	003ff706 	br	10380 <__alt_data_end+0xfc010380>

000103a4 <_getpid_r>:
   103a4:	00201601 	jmpi	20160 <getpid>

000103a8 <_sprintf_r>:
   103a8:	deffe404 	addi	sp,sp,-112
   103ac:	2807883a 	mov	r3,r5
   103b0:	dfc01a15 	stw	ra,104(sp)
   103b4:	d9c01b15 	stw	r7,108(sp)
   103b8:	00a00034 	movhi	r2,32768
   103bc:	10bfffc4 	addi	r2,r2,-1
   103c0:	02008204 	movi	r8,520
   103c4:	d8800215 	stw	r2,8(sp)
   103c8:	d8800515 	stw	r2,20(sp)
   103cc:	d9c01b04 	addi	r7,sp,108
   103d0:	d80b883a 	mov	r5,sp
   103d4:	00bfffc4 	movi	r2,-1
   103d8:	d8c00015 	stw	r3,0(sp)
   103dc:	d8c00415 	stw	r3,16(sp)
   103e0:	da00030d 	sth	r8,12(sp)
   103e4:	d880038d 	sth	r2,14(sp)
   103e8:	00105e00 	call	105e0 <___svfprintf_internal_r>
   103ec:	d8c00017 	ldw	r3,0(sp)
   103f0:	18000005 	stb	zero,0(r3)
   103f4:	dfc01a17 	ldw	ra,104(sp)
   103f8:	dec01c04 	addi	sp,sp,112
   103fc:	f800283a 	ret

00010400 <sprintf>:
   10400:	deffe304 	addi	sp,sp,-116
   10404:	2007883a 	mov	r3,r4
   10408:	dfc01a15 	stw	ra,104(sp)
   1040c:	d9801b15 	stw	r6,108(sp)
   10410:	d9c01c15 	stw	r7,112(sp)
   10414:	010000f4 	movhi	r4,3
   10418:	213b3c04 	addi	r4,r4,-4880
   1041c:	21000017 	ldw	r4,0(r4)
   10420:	00a00034 	movhi	r2,32768
   10424:	10bfffc4 	addi	r2,r2,-1
   10428:	280d883a 	mov	r6,r5
   1042c:	02008204 	movi	r8,520
   10430:	d8800215 	stw	r2,8(sp)
   10434:	d8800515 	stw	r2,20(sp)
   10438:	d9c01b04 	addi	r7,sp,108
   1043c:	d80b883a 	mov	r5,sp
   10440:	00bfffc4 	movi	r2,-1
   10444:	d8c00015 	stw	r3,0(sp)
   10448:	d8c00415 	stw	r3,16(sp)
   1044c:	da00030d 	sth	r8,12(sp)
   10450:	d880038d 	sth	r2,14(sp)
   10454:	00105e00 	call	105e0 <___svfprintf_internal_r>
   10458:	d8c00017 	ldw	r3,0(sp)
   1045c:	18000005 	stb	zero,0(r3)
   10460:	dfc01a17 	ldw	ra,104(sp)
   10464:	dec01d04 	addi	sp,sp,116
   10468:	f800283a 	ret

0001046c <strcmp>:
   1046c:	2144b03a 	or	r2,r4,r5
   10470:	108000cc 	andi	r2,r2,3
   10474:	1000171e 	bne	r2,zero,104d4 <strcmp+0x68>
   10478:	20800017 	ldw	r2,0(r4)
   1047c:	28c00017 	ldw	r3,0(r5)
   10480:	10c0141e 	bne	r2,r3,104d4 <strcmp+0x68>
   10484:	027fbff4 	movhi	r9,65279
   10488:	4a7fbfc4 	addi	r9,r9,-257
   1048c:	0086303a 	nor	r3,zero,r2
   10490:	02202074 	movhi	r8,32897
   10494:	1245883a 	add	r2,r2,r9
   10498:	42202004 	addi	r8,r8,-32640
   1049c:	10c4703a 	and	r2,r2,r3
   104a0:	1204703a 	and	r2,r2,r8
   104a4:	10000226 	beq	r2,zero,104b0 <strcmp+0x44>
   104a8:	00002306 	br	10538 <strcmp+0xcc>
   104ac:	1000221e 	bne	r2,zero,10538 <strcmp+0xcc>
   104b0:	21000104 	addi	r4,r4,4
   104b4:	20c00017 	ldw	r3,0(r4)
   104b8:	29400104 	addi	r5,r5,4
   104bc:	29800017 	ldw	r6,0(r5)
   104c0:	1a4f883a 	add	r7,r3,r9
   104c4:	00c4303a 	nor	r2,zero,r3
   104c8:	3884703a 	and	r2,r7,r2
   104cc:	1204703a 	and	r2,r2,r8
   104d0:	19bff626 	beq	r3,r6,104ac <__alt_data_end+0xfc0104ac>
   104d4:	20800003 	ldbu	r2,0(r4)
   104d8:	10c03fcc 	andi	r3,r2,255
   104dc:	18c0201c 	xori	r3,r3,128
   104e0:	18ffe004 	addi	r3,r3,-128
   104e4:	18000c26 	beq	r3,zero,10518 <strcmp+0xac>
   104e8:	29800007 	ldb	r6,0(r5)
   104ec:	19800326 	beq	r3,r6,104fc <strcmp+0x90>
   104f0:	00001306 	br	10540 <strcmp+0xd4>
   104f4:	29800007 	ldb	r6,0(r5)
   104f8:	11800b1e 	bne	r2,r6,10528 <strcmp+0xbc>
   104fc:	21000044 	addi	r4,r4,1
   10500:	20c00003 	ldbu	r3,0(r4)
   10504:	29400044 	addi	r5,r5,1
   10508:	18803fcc 	andi	r2,r3,255
   1050c:	1080201c 	xori	r2,r2,128
   10510:	10bfe004 	addi	r2,r2,-128
   10514:	103ff71e 	bne	r2,zero,104f4 <__alt_data_end+0xfc0104f4>
   10518:	0007883a 	mov	r3,zero
   1051c:	28800003 	ldbu	r2,0(r5)
   10520:	1885c83a 	sub	r2,r3,r2
   10524:	f800283a 	ret
   10528:	28800003 	ldbu	r2,0(r5)
   1052c:	18c03fcc 	andi	r3,r3,255
   10530:	1885c83a 	sub	r2,r3,r2
   10534:	f800283a 	ret
   10538:	0005883a 	mov	r2,zero
   1053c:	f800283a 	ret
   10540:	10c03fcc 	andi	r3,r2,255
   10544:	003ff506 	br	1051c <__alt_data_end+0xfc01051c>

00010548 <strlen>:
   10548:	208000cc 	andi	r2,r4,3
   1054c:	10002026 	beq	r2,zero,105d0 <strlen+0x88>
   10550:	20800007 	ldb	r2,0(r4)
   10554:	10002026 	beq	r2,zero,105d8 <strlen+0x90>
   10558:	2005883a 	mov	r2,r4
   1055c:	00000206 	br	10568 <strlen+0x20>
   10560:	10c00007 	ldb	r3,0(r2)
   10564:	18001826 	beq	r3,zero,105c8 <strlen+0x80>
   10568:	10800044 	addi	r2,r2,1
   1056c:	10c000cc 	andi	r3,r2,3
   10570:	183ffb1e 	bne	r3,zero,10560 <__alt_data_end+0xfc010560>
   10574:	10c00017 	ldw	r3,0(r2)
   10578:	01ffbff4 	movhi	r7,65279
   1057c:	39ffbfc4 	addi	r7,r7,-257
   10580:	00ca303a 	nor	r5,zero,r3
   10584:	01a02074 	movhi	r6,32897
   10588:	19c7883a 	add	r3,r3,r7
   1058c:	31a02004 	addi	r6,r6,-32640
   10590:	1946703a 	and	r3,r3,r5
   10594:	1986703a 	and	r3,r3,r6
   10598:	1800091e 	bne	r3,zero,105c0 <strlen+0x78>
   1059c:	10800104 	addi	r2,r2,4
   105a0:	10c00017 	ldw	r3,0(r2)
   105a4:	19cb883a 	add	r5,r3,r7
   105a8:	00c6303a 	nor	r3,zero,r3
   105ac:	28c6703a 	and	r3,r5,r3
   105b0:	1986703a 	and	r3,r3,r6
   105b4:	183ff926 	beq	r3,zero,1059c <__alt_data_end+0xfc01059c>
   105b8:	00000106 	br	105c0 <strlen+0x78>
   105bc:	10800044 	addi	r2,r2,1
   105c0:	10c00007 	ldb	r3,0(r2)
   105c4:	183ffd1e 	bne	r3,zero,105bc <__alt_data_end+0xfc0105bc>
   105c8:	1105c83a 	sub	r2,r2,r4
   105cc:	f800283a 	ret
   105d0:	2005883a 	mov	r2,r4
   105d4:	003fe706 	br	10574 <__alt_data_end+0xfc010574>
   105d8:	0005883a 	mov	r2,zero
   105dc:	f800283a 	ret

000105e0 <___svfprintf_internal_r>:
   105e0:	deffb704 	addi	sp,sp,-292
   105e4:	dfc04815 	stw	ra,288(sp)
   105e8:	ddc04615 	stw	r23,280(sp)
   105ec:	d9402d15 	stw	r5,180(sp)
   105f0:	d9003915 	stw	r4,228(sp)
   105f4:	302f883a 	mov	r23,r6
   105f8:	d9c02e15 	stw	r7,184(sp)
   105fc:	df004715 	stw	fp,284(sp)
   10600:	dd804515 	stw	r22,276(sp)
   10604:	dd404415 	stw	r21,272(sp)
   10608:	dd004315 	stw	r20,268(sp)
   1060c:	dcc04215 	stw	r19,264(sp)
   10610:	dc804115 	stw	r18,260(sp)
   10614:	dc404015 	stw	r17,256(sp)
   10618:	dc003f15 	stw	r16,252(sp)
   1061c:	00177e40 	call	177e4 <_localeconv_r>
   10620:	10800017 	ldw	r2,0(r2)
   10624:	1009883a 	mov	r4,r2
   10628:	d8803415 	stw	r2,208(sp)
   1062c:	00105480 	call	10548 <strlen>
   10630:	d8c02d17 	ldw	r3,180(sp)
   10634:	d8803815 	stw	r2,224(sp)
   10638:	1880030b 	ldhu	r2,12(r3)
   1063c:	1080200c 	andi	r2,r2,128
   10640:	10000226 	beq	r2,zero,1064c <___svfprintf_internal_r+0x6c>
   10644:	18800417 	ldw	r2,16(r3)
   10648:	1006b126 	beq	r2,zero,12110 <___svfprintf_internal_r+0x1b30>
   1064c:	dcc03917 	ldw	r19,228(sp)
   10650:	d8c00404 	addi	r3,sp,16
   10654:	054000f4 	movhi	r21,3
   10658:	d9001e04 	addi	r4,sp,120
   1065c:	ad6e4784 	addi	r21,r21,-18146
   10660:	d8c01e15 	stw	r3,120(sp)
   10664:	d8002015 	stw	zero,128(sp)
   10668:	d8001f15 	stw	zero,124(sp)
   1066c:	d8003315 	stw	zero,204(sp)
   10670:	d8003615 	stw	zero,216(sp)
   10674:	d8003715 	stw	zero,220(sp)
   10678:	1811883a 	mov	r8,r3
   1067c:	d8003a15 	stw	zero,232(sp)
   10680:	d8003b15 	stw	zero,236(sp)
   10684:	d8002f15 	stw	zero,188(sp)
   10688:	d9002815 	stw	r4,160(sp)
   1068c:	b8800007 	ldb	r2,0(r23)
   10690:	10027726 	beq	r2,zero,11070 <___svfprintf_internal_r+0xa90>
   10694:	00c00944 	movi	r3,37
   10698:	b823883a 	mov	r17,r23
   1069c:	10c0021e 	bne	r2,r3,106a8 <___svfprintf_internal_r+0xc8>
   106a0:	00001406 	br	106f4 <___svfprintf_internal_r+0x114>
   106a4:	10c00326 	beq	r2,r3,106b4 <___svfprintf_internal_r+0xd4>
   106a8:	8c400044 	addi	r17,r17,1
   106ac:	88800007 	ldb	r2,0(r17)
   106b0:	103ffc1e 	bne	r2,zero,106a4 <__alt_data_end+0xfc0106a4>
   106b4:	8de1c83a 	sub	r16,r17,r23
   106b8:	80000e26 	beq	r16,zero,106f4 <___svfprintf_internal_r+0x114>
   106bc:	d8c02017 	ldw	r3,128(sp)
   106c0:	d8801f17 	ldw	r2,124(sp)
   106c4:	45c00015 	stw	r23,0(r8)
   106c8:	1c07883a 	add	r3,r3,r16
   106cc:	10800044 	addi	r2,r2,1
   106d0:	d8c02015 	stw	r3,128(sp)
   106d4:	44000115 	stw	r16,4(r8)
   106d8:	d8801f15 	stw	r2,124(sp)
   106dc:	00c001c4 	movi	r3,7
   106e0:	18809916 	blt	r3,r2,10948 <___svfprintf_internal_r+0x368>
   106e4:	42000204 	addi	r8,r8,8
   106e8:	d9402f17 	ldw	r5,188(sp)
   106ec:	2c0b883a 	add	r5,r5,r16
   106f0:	d9402f15 	stw	r5,188(sp)
   106f4:	88800007 	ldb	r2,0(r17)
   106f8:	10009a26 	beq	r2,zero,10964 <___svfprintf_internal_r+0x384>
   106fc:	8dc00044 	addi	r23,r17,1
   10700:	8c400047 	ldb	r17,1(r17)
   10704:	0021883a 	mov	r16,zero
   10708:	00bfffc4 	movi	r2,-1
   1070c:	0025883a 	mov	r18,zero
   10710:	dc002905 	stb	r16,164(sp)
   10714:	d8002785 	stb	zero,158(sp)
   10718:	d8002b05 	stb	zero,172(sp)
   1071c:	d8802a15 	stw	r2,168(sp)
   10720:	d8003115 	stw	zero,196(sp)
   10724:	05001604 	movi	r20,88
   10728:	05800244 	movi	r22,9
   1072c:	4039883a 	mov	fp,r8
   10730:	9021883a 	mov	r16,r18
   10734:	bdc00044 	addi	r23,r23,1
   10738:	88bff804 	addi	r2,r17,-32
   1073c:	a0831e36 	bltu	r20,r2,113b8 <___svfprintf_internal_r+0xdd8>
   10740:	100490ba 	slli	r2,r2,2
   10744:	00c00074 	movhi	r3,1
   10748:	18c1d604 	addi	r3,r3,1880
   1074c:	10c5883a 	add	r2,r2,r3
   10750:	10800017 	ldw	r2,0(r2)
   10754:	1000683a 	jmp	r2
   10758:	00011300 	call	1130 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x19c>
   1075c:	000113b8 	rdprs	zero,zero,1102
   10760:	000113b8 	rdprs	zero,zero,1102
   10764:	000112f4 	movhi	zero,1099
   10768:	000113b8 	rdprs	zero,zero,1102
   1076c:	000113b8 	rdprs	zero,zero,1102
   10770:	000113b8 	rdprs	zero,zero,1102
   10774:	000113b8 	rdprs	zero,zero,1102
   10778:	000113b8 	rdprs	zero,zero,1102
   1077c:	000113b8 	rdprs	zero,zero,1102
   10780:	000109c0 	call	109c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x108>
   10784:	00011204 	movi	zero,1096
   10788:	000113b8 	rdprs	zero,zero,1102
   1078c:	000108cc 	andi	zero,zero,1059
   10790:	000109e4 	muli	zero,zero,1063
   10794:	000113b8 	rdprs	zero,zero,1102
   10798:	00010a70 	cmpltui	zero,zero,1065
   1079c:	00010a34 	movhi	zero,1064
   107a0:	00010a34 	movhi	zero,1064
   107a4:	00010a34 	movhi	zero,1064
   107a8:	00010a34 	movhi	zero,1064
   107ac:	00010a34 	movhi	zero,1064
   107b0:	00010a34 	movhi	zero,1064
   107b4:	00010a34 	movhi	zero,1064
   107b8:	00010a34 	movhi	zero,1064
   107bc:	00010a34 	movhi	zero,1064
   107c0:	000113b8 	rdprs	zero,zero,1102
   107c4:	000113b8 	rdprs	zero,zero,1102
   107c8:	000113b8 	rdprs	zero,zero,1102
   107cc:	000113b8 	rdprs	zero,zero,1102
   107d0:	000113b8 	rdprs	zero,zero,1102
   107d4:	000113b8 	rdprs	zero,zero,1102
   107d8:	000113b8 	rdprs	zero,zero,1102
   107dc:	000113b8 	rdprs	zero,zero,1102
   107e0:	000113b8 	rdprs	zero,zero,1102
   107e4:	000113b8 	rdprs	zero,zero,1102
   107e8:	00010b34 	movhi	zero,1068
   107ec:	00010a7c 	xorhi	zero,zero,1065
   107f0:	000113b8 	rdprs	zero,zero,1102
   107f4:	00010a7c 	xorhi	zero,zero,1065
   107f8:	000113b8 	rdprs	zero,zero,1102
   107fc:	000113b8 	rdprs	zero,zero,1102
   10800:	000113b8 	rdprs	zero,zero,1102
   10804:	000113b8 	rdprs	zero,zero,1102
   10808:	00010b28 	cmpgeui	zero,zero,1068
   1080c:	000113b8 	rdprs	zero,zero,1102
   10810:	000113b8 	rdprs	zero,zero,1102
   10814:	00010bfc 	xorhi	zero,zero,1071
   10818:	000113b8 	rdprs	zero,zero,1102
   1081c:	000113b8 	rdprs	zero,zero,1102
   10820:	000113b8 	rdprs	zero,zero,1102
   10824:	000113b8 	rdprs	zero,zero,1102
   10828:	000113b8 	rdprs	zero,zero,1102
   1082c:	00011078 	rdprs	zero,zero,1089
   10830:	000113b8 	rdprs	zero,zero,1102
   10834:	000113b8 	rdprs	zero,zero,1102
   10838:	000110e4 	muli	zero,zero,1091
   1083c:	000113b8 	rdprs	zero,zero,1102
   10840:	000113b8 	rdprs	zero,zero,1102
   10844:	000113b8 	rdprs	zero,zero,1102
   10848:	000113b8 	rdprs	zero,zero,1102
   1084c:	000113b8 	rdprs	zero,zero,1102
   10850:	000113b8 	rdprs	zero,zero,1102
   10854:	000113b8 	rdprs	zero,zero,1102
   10858:	000113b8 	rdprs	zero,zero,1102
   1085c:	000113b8 	rdprs	zero,zero,1102
   10860:	000113b8 	rdprs	zero,zero,1102
   10864:	000111a0 	cmpeqi	zero,zero,1094
   10868:	00011320 	cmpeqi	zero,zero,1100
   1086c:	00010a7c 	xorhi	zero,zero,1065
   10870:	00010a7c 	xorhi	zero,zero,1065
   10874:	00010a7c 	xorhi	zero,zero,1065
   10878:	00011394 	movui	zero,1102
   1087c:	00011320 	cmpeqi	zero,zero,1100
   10880:	000113b8 	rdprs	zero,zero,1102
   10884:	000113b8 	rdprs	zero,zero,1102
   10888:	00011340 	call	1134 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1a0>
   1088c:	000113b8 	rdprs	zero,zero,1102
   10890:	00011354 	movui	zero,1101
   10894:	000111e4 	muli	zero,zero,1095
   10898:	000108d8 	cmpnei	zero,zero,1059
   1089c:	0001121c 	xori	zero,zero,1096
   108a0:	000113b8 	rdprs	zero,zero,1102
   108a4:	00011228 	cmpgeui	zero,zero,1096
   108a8:	000113b8 	rdprs	zero,zero,1102
   108ac:	0001128c 	andi	zero,zero,1098
   108b0:	000113b8 	rdprs	zero,zero,1102
   108b4:	000113b8 	rdprs	zero,zero,1102
   108b8:	000112ac 	andhi	zero,zero,1098
   108bc:	d8c03117 	ldw	r3,196(sp)
   108c0:	d8802e15 	stw	r2,184(sp)
   108c4:	00c7c83a 	sub	r3,zero,r3
   108c8:	d8c03115 	stw	r3,196(sp)
   108cc:	84000114 	ori	r16,r16,4
   108d0:	bc400007 	ldb	r17,0(r23)
   108d4:	003f9706 	br	10734 <__alt_data_end+0xfc010734>
   108d8:	00800c04 	movi	r2,48
   108dc:	d8802705 	stb	r2,156(sp)
   108e0:	00801e04 	movi	r2,120
   108e4:	d8802745 	stb	r2,157(sp)
   108e8:	d9002a17 	ldw	r4,168(sp)
   108ec:	d8802e17 	ldw	r2,184(sp)
   108f0:	d8002785 	stb	zero,158(sp)
   108f4:	e011883a 	mov	r8,fp
   108f8:	10c00104 	addi	r3,r2,4
   108fc:	15000017 	ldw	r20,0(r2)
   10900:	002d883a 	mov	r22,zero
   10904:	80800094 	ori	r2,r16,2
   10908:	2002b616 	blt	r4,zero,113e4 <___svfprintf_internal_r+0xe04>
   1090c:	00bfdfc4 	movi	r2,-129
   10910:	80a4703a 	and	r18,r16,r2
   10914:	d8c02e15 	stw	r3,184(sp)
   10918:	94800094 	ori	r18,r18,2
   1091c:	a002a01e 	bne	r20,zero,113a0 <___svfprintf_internal_r+0xdc0>
   10920:	014000f4 	movhi	r5,3
   10924:	296e4004 	addi	r5,r5,-18176
   10928:	d9403a15 	stw	r5,232(sp)
   1092c:	04401e04 	movi	r17,120
   10930:	d8c02a17 	ldw	r3,168(sp)
   10934:	0039883a 	mov	fp,zero
   10938:	1801e626 	beq	r3,zero,110d4 <___svfprintf_internal_r+0xaf4>
   1093c:	0029883a 	mov	r20,zero
   10940:	002d883a 	mov	r22,zero
   10944:	00020506 	br	1115c <___svfprintf_internal_r+0xb7c>
   10948:	d9402d17 	ldw	r5,180(sp)
   1094c:	d9801e04 	addi	r6,sp,120
   10950:	9809883a 	mov	r4,r19
   10954:	00195440 	call	19544 <__ssprint_r>
   10958:	1000081e 	bne	r2,zero,1097c <___svfprintf_internal_r+0x39c>
   1095c:	da000404 	addi	r8,sp,16
   10960:	003f6106 	br	106e8 <__alt_data_end+0xfc0106e8>
   10964:	d8802017 	ldw	r2,128(sp)
   10968:	10000426 	beq	r2,zero,1097c <___svfprintf_internal_r+0x39c>
   1096c:	d9402d17 	ldw	r5,180(sp)
   10970:	d9003917 	ldw	r4,228(sp)
   10974:	d9801e04 	addi	r6,sp,120
   10978:	00195440 	call	19544 <__ssprint_r>
   1097c:	d8802d17 	ldw	r2,180(sp)
   10980:	10c0030b 	ldhu	r3,12(r2)
   10984:	d8802f17 	ldw	r2,188(sp)
   10988:	18c0100c 	andi	r3,r3,64
   1098c:	1806251e 	bne	r3,zero,12224 <___svfprintf_internal_r+0x1c44>
   10990:	dfc04817 	ldw	ra,288(sp)
   10994:	df004717 	ldw	fp,284(sp)
   10998:	ddc04617 	ldw	r23,280(sp)
   1099c:	dd804517 	ldw	r22,276(sp)
   109a0:	dd404417 	ldw	r21,272(sp)
   109a4:	dd004317 	ldw	r20,268(sp)
   109a8:	dcc04217 	ldw	r19,264(sp)
   109ac:	dc804117 	ldw	r18,260(sp)
   109b0:	dc404017 	ldw	r17,256(sp)
   109b4:	dc003f17 	ldw	r16,252(sp)
   109b8:	dec04904 	addi	sp,sp,292
   109bc:	f800283a 	ret
   109c0:	d9002e17 	ldw	r4,184(sp)
   109c4:	d9402e17 	ldw	r5,184(sp)
   109c8:	21000017 	ldw	r4,0(r4)
   109cc:	28800104 	addi	r2,r5,4
   109d0:	d9003115 	stw	r4,196(sp)
   109d4:	203fb916 	blt	r4,zero,108bc <__alt_data_end+0xfc0108bc>
   109d8:	d8802e15 	stw	r2,184(sp)
   109dc:	bc400007 	ldb	r17,0(r23)
   109e0:	003f5406 	br	10734 <__alt_data_end+0xfc010734>
   109e4:	bc400007 	ldb	r17,0(r23)
   109e8:	01000a84 	movi	r4,42
   109ec:	b8c00044 	addi	r3,r23,1
   109f0:	89076926 	beq	r17,r4,12798 <___svfprintf_internal_r+0x21b8>
   109f4:	8cbff404 	addi	r18,r17,-48
   109f8:	b486b936 	bltu	r22,r18,124e0 <___svfprintf_internal_r+0x1f00>
   109fc:	0009883a 	mov	r4,zero
   10a00:	1823883a 	mov	r17,r3
   10a04:	01400284 	movi	r5,10
   10a08:	000d8e00 	call	d8e0 <__mulsi3>
   10a0c:	88c00007 	ldb	r3,0(r17)
   10a10:	1489883a 	add	r4,r2,r18
   10a14:	8dc00044 	addi	r23,r17,1
   10a18:	1cbff404 	addi	r18,r3,-48
   10a1c:	b823883a 	mov	r17,r23
   10a20:	b4bff82e 	bgeu	r22,r18,10a04 <__alt_data_end+0xfc010a04>
   10a24:	1823883a 	mov	r17,r3
   10a28:	20060416 	blt	r4,zero,1223c <___svfprintf_internal_r+0x1c5c>
   10a2c:	d9002a15 	stw	r4,168(sp)
   10a30:	003f4106 	br	10738 <__alt_data_end+0xfc010738>
   10a34:	8cbff404 	addi	r18,r17,-48
   10a38:	d8003115 	stw	zero,196(sp)
   10a3c:	0009883a 	mov	r4,zero
   10a40:	b823883a 	mov	r17,r23
   10a44:	01400284 	movi	r5,10
   10a48:	000d8e00 	call	d8e0 <__mulsi3>
   10a4c:	88c00007 	ldb	r3,0(r17)
   10a50:	9089883a 	add	r4,r18,r2
   10a54:	bdc00044 	addi	r23,r23,1
   10a58:	1cbff404 	addi	r18,r3,-48
   10a5c:	b823883a 	mov	r17,r23
   10a60:	b4bff82e 	bgeu	r22,r18,10a44 <__alt_data_end+0xfc010a44>
   10a64:	1823883a 	mov	r17,r3
   10a68:	d9003115 	stw	r4,196(sp)
   10a6c:	003f3206 	br	10738 <__alt_data_end+0xfc010738>
   10a70:	84002014 	ori	r16,r16,128
   10a74:	bc400007 	ldb	r17,0(r23)
   10a78:	003f2e06 	br	10734 <__alt_data_end+0xfc010734>
   10a7c:	8025883a 	mov	r18,r16
   10a80:	dc002903 	ldbu	r16,164(sp)
   10a84:	e011883a 	mov	r8,fp
   10a88:	84003fcc 	andi	r16,r16,255
   10a8c:	8007721e 	bne	r16,zero,12858 <___svfprintf_internal_r+0x2278>
   10a90:	9080020c 	andi	r2,r18,8
   10a94:	1004a526 	beq	r2,zero,11d2c <___svfprintf_internal_r+0x174c>
   10a98:	d9002e17 	ldw	r4,184(sp)
   10a9c:	d9402e17 	ldw	r5,184(sp)
   10aa0:	d8802e17 	ldw	r2,184(sp)
   10aa4:	21000017 	ldw	r4,0(r4)
   10aa8:	29400117 	ldw	r5,4(r5)
   10aac:	10800204 	addi	r2,r2,8
   10ab0:	d9003615 	stw	r4,216(sp)
   10ab4:	d9403715 	stw	r5,220(sp)
   10ab8:	d8802e15 	stw	r2,184(sp)
   10abc:	d9003617 	ldw	r4,216(sp)
   10ac0:	d9403717 	ldw	r5,220(sp)
   10ac4:	da003e15 	stw	r8,248(sp)
   10ac8:	04000044 	movi	r16,1
   10acc:	00193940 	call	19394 <__fpclassifyd>
   10ad0:	da003e17 	ldw	r8,248(sp)
   10ad4:	1404731e 	bne	r2,r16,11ca4 <___svfprintf_internal_r+0x16c4>
   10ad8:	d9003617 	ldw	r4,216(sp)
   10adc:	d9403717 	ldw	r5,220(sp)
   10ae0:	000d883a 	mov	r6,zero
   10ae4:	000f883a 	mov	r7,zero
   10ae8:	001ea980 	call	1ea98 <__ledf2>
   10aec:	da003e17 	ldw	r8,248(sp)
   10af0:	10061b16 	blt	r2,zero,12360 <___svfprintf_internal_r+0x1d80>
   10af4:	df002783 	ldbu	fp,158(sp)
   10af8:	008011c4 	movi	r2,71
   10afc:	1445810e 	bge	r2,r17,12104 <___svfprintf_internal_r+0x1b24>
   10b00:	040000f4 	movhi	r16,3
   10b04:	842e3804 	addi	r16,r16,-18208
   10b08:	00c000c4 	movi	r3,3
   10b0c:	00bfdfc4 	movi	r2,-129
   10b10:	d8c02915 	stw	r3,164(sp)
   10b14:	90a4703a 	and	r18,r18,r2
   10b18:	d8c02b15 	stw	r3,172(sp)
   10b1c:	d8002a15 	stw	zero,168(sp)
   10b20:	d8003215 	stw	zero,200(sp)
   10b24:	00006c06 	br	10cd8 <___svfprintf_internal_r+0x6f8>
   10b28:	84000214 	ori	r16,r16,8
   10b2c:	bc400007 	ldb	r17,0(r23)
   10b30:	003f0006 	br	10734 <__alt_data_end+0xfc010734>
   10b34:	8025883a 	mov	r18,r16
   10b38:	dc002903 	ldbu	r16,164(sp)
   10b3c:	e011883a 	mov	r8,fp
   10b40:	84003fcc 	andi	r16,r16,255
   10b44:	80073f1e 	bne	r16,zero,12844 <___svfprintf_internal_r+0x2264>
   10b48:	94800414 	ori	r18,r18,16
   10b4c:	9080080c 	andi	r2,r18,32
   10b50:	1003bb26 	beq	r2,zero,11a40 <___svfprintf_internal_r+0x1460>
   10b54:	d9002e17 	ldw	r4,184(sp)
   10b58:	20800117 	ldw	r2,4(r4)
   10b5c:	25000017 	ldw	r20,0(r4)
   10b60:	21000204 	addi	r4,r4,8
   10b64:	d9002e15 	stw	r4,184(sp)
   10b68:	102d883a 	mov	r22,r2
   10b6c:	1003bd16 	blt	r2,zero,11a64 <___svfprintf_internal_r+0x1484>
   10b70:	d9002a17 	ldw	r4,168(sp)
   10b74:	df002783 	ldbu	fp,158(sp)
   10b78:	2003d016 	blt	r4,zero,11abc <___svfprintf_internal_r+0x14dc>
   10b7c:	00ffdfc4 	movi	r3,-129
   10b80:	a584b03a 	or	r2,r20,r22
   10b84:	90e4703a 	and	r18,r18,r3
   10b88:	10015026 	beq	r2,zero,110cc <___svfprintf_internal_r+0xaec>
   10b8c:	b0037026 	beq	r22,zero,11950 <___svfprintf_internal_r+0x1370>
   10b90:	dc402915 	stw	r17,164(sp)
   10b94:	dc001e04 	addi	r16,sp,120
   10b98:	b023883a 	mov	r17,r22
   10b9c:	402d883a 	mov	r22,r8
   10ba0:	a009883a 	mov	r4,r20
   10ba4:	880b883a 	mov	r5,r17
   10ba8:	01800284 	movi	r6,10
   10bac:	000f883a 	mov	r7,zero
   10bb0:	001d0f40 	call	1d0f4 <__umoddi3>
   10bb4:	10800c04 	addi	r2,r2,48
   10bb8:	843fffc4 	addi	r16,r16,-1
   10bbc:	a009883a 	mov	r4,r20
   10bc0:	880b883a 	mov	r5,r17
   10bc4:	80800005 	stb	r2,0(r16)
   10bc8:	01800284 	movi	r6,10
   10bcc:	000f883a 	mov	r7,zero
   10bd0:	001caf80 	call	1caf8 <__udivdi3>
   10bd4:	1029883a 	mov	r20,r2
   10bd8:	10c4b03a 	or	r2,r2,r3
   10bdc:	1823883a 	mov	r17,r3
   10be0:	103fef1e 	bne	r2,zero,10ba0 <__alt_data_end+0xfc010ba0>
   10be4:	d8c02817 	ldw	r3,160(sp)
   10be8:	dc402917 	ldw	r17,164(sp)
   10bec:	b011883a 	mov	r8,r22
   10bf0:	1c07c83a 	sub	r3,r3,r16
   10bf4:	d8c02b15 	stw	r3,172(sp)
   10bf8:	00003106 	br	10cc0 <___svfprintf_internal_r+0x6e0>
   10bfc:	8025883a 	mov	r18,r16
   10c00:	dc002903 	ldbu	r16,164(sp)
   10c04:	e011883a 	mov	r8,fp
   10c08:	84003fcc 	andi	r16,r16,255
   10c0c:	80070a1e 	bne	r16,zero,12838 <___svfprintf_internal_r+0x2258>
   10c10:	94800414 	ori	r18,r18,16
   10c14:	9080080c 	andi	r2,r18,32
   10c18:	1002f626 	beq	r2,zero,117f4 <___svfprintf_internal_r+0x1214>
   10c1c:	d9002e17 	ldw	r4,184(sp)
   10c20:	d9402a17 	ldw	r5,168(sp)
   10c24:	d8002785 	stb	zero,158(sp)
   10c28:	20800204 	addi	r2,r4,8
   10c2c:	25000017 	ldw	r20,0(r4)
   10c30:	25800117 	ldw	r22,4(r4)
   10c34:	28043716 	blt	r5,zero,11d14 <___svfprintf_internal_r+0x1734>
   10c38:	013fdfc4 	movi	r4,-129
   10c3c:	a586b03a 	or	r3,r20,r22
   10c40:	d8802e15 	stw	r2,184(sp)
   10c44:	9124703a 	and	r18,r18,r4
   10c48:	1802f71e 	bne	r3,zero,11828 <___svfprintf_internal_r+0x1248>
   10c4c:	d9402a17 	ldw	r5,168(sp)
   10c50:	0039883a 	mov	fp,zero
   10c54:	2806df26 	beq	r5,zero,127d4 <___svfprintf_internal_r+0x21f4>
   10c58:	0029883a 	mov	r20,zero
   10c5c:	002d883a 	mov	r22,zero
   10c60:	dc001e04 	addi	r16,sp,120
   10c64:	a006d0fa 	srli	r3,r20,3
   10c68:	b008977a 	slli	r4,r22,29
   10c6c:	b02cd0fa 	srli	r22,r22,3
   10c70:	a50001cc 	andi	r20,r20,7
   10c74:	a0800c04 	addi	r2,r20,48
   10c78:	843fffc4 	addi	r16,r16,-1
   10c7c:	20e8b03a 	or	r20,r4,r3
   10c80:	80800005 	stb	r2,0(r16)
   10c84:	a586b03a 	or	r3,r20,r22
   10c88:	183ff61e 	bne	r3,zero,10c64 <__alt_data_end+0xfc010c64>
   10c8c:	90c0004c 	andi	r3,r18,1
   10c90:	18013f26 	beq	r3,zero,11190 <___svfprintf_internal_r+0xbb0>
   10c94:	10803fcc 	andi	r2,r2,255
   10c98:	1080201c 	xori	r2,r2,128
   10c9c:	10bfe004 	addi	r2,r2,-128
   10ca0:	00c00c04 	movi	r3,48
   10ca4:	10c13a26 	beq	r2,r3,11190 <___svfprintf_internal_r+0xbb0>
   10ca8:	80ffffc5 	stb	r3,-1(r16)
   10cac:	d8c02817 	ldw	r3,160(sp)
   10cb0:	80bfffc4 	addi	r2,r16,-1
   10cb4:	1021883a 	mov	r16,r2
   10cb8:	1887c83a 	sub	r3,r3,r2
   10cbc:	d8c02b15 	stw	r3,172(sp)
   10cc0:	d8802b17 	ldw	r2,172(sp)
   10cc4:	d9002a17 	ldw	r4,168(sp)
   10cc8:	1100010e 	bge	r2,r4,10cd0 <___svfprintf_internal_r+0x6f0>
   10ccc:	2005883a 	mov	r2,r4
   10cd0:	d8802915 	stw	r2,164(sp)
   10cd4:	d8003215 	stw	zero,200(sp)
   10cd8:	e7003fcc 	andi	fp,fp,255
   10cdc:	e700201c 	xori	fp,fp,128
   10ce0:	e73fe004 	addi	fp,fp,-128
   10ce4:	e0000326 	beq	fp,zero,10cf4 <___svfprintf_internal_r+0x714>
   10ce8:	d8c02917 	ldw	r3,164(sp)
   10cec:	18c00044 	addi	r3,r3,1
   10cf0:	d8c02915 	stw	r3,164(sp)
   10cf4:	90c0008c 	andi	r3,r18,2
   10cf8:	d8c02c15 	stw	r3,176(sp)
   10cfc:	18000326 	beq	r3,zero,10d0c <___svfprintf_internal_r+0x72c>
   10d00:	d8c02917 	ldw	r3,164(sp)
   10d04:	18c00084 	addi	r3,r3,2
   10d08:	d8c02915 	stw	r3,164(sp)
   10d0c:	90c0210c 	andi	r3,r18,132
   10d10:	d8c03015 	stw	r3,192(sp)
   10d14:	1801c31e 	bne	r3,zero,11424 <___svfprintf_internal_r+0xe44>
   10d18:	d9003117 	ldw	r4,196(sp)
   10d1c:	d8c02917 	ldw	r3,164(sp)
   10d20:	20e9c83a 	sub	r20,r4,r3
   10d24:	0501bf0e 	bge	zero,r20,11424 <___svfprintf_internal_r+0xe44>
   10d28:	02400404 	movi	r9,16
   10d2c:	d8c02017 	ldw	r3,128(sp)
   10d30:	d8801f17 	ldw	r2,124(sp)
   10d34:	4d053d0e 	bge	r9,r20,1222c <___svfprintf_internal_r+0x1c4c>
   10d38:	014000f4 	movhi	r5,3
   10d3c:	296e4b84 	addi	r5,r5,-18130
   10d40:	dc403c15 	stw	r17,240(sp)
   10d44:	d9403515 	stw	r5,212(sp)
   10d48:	a023883a 	mov	r17,r20
   10d4c:	482d883a 	mov	r22,r9
   10d50:	9029883a 	mov	r20,r18
   10d54:	070001c4 	movi	fp,7
   10d58:	8025883a 	mov	r18,r16
   10d5c:	dc002d17 	ldw	r16,180(sp)
   10d60:	00000306 	br	10d70 <___svfprintf_internal_r+0x790>
   10d64:	8c7ffc04 	addi	r17,r17,-16
   10d68:	42000204 	addi	r8,r8,8
   10d6c:	b440130e 	bge	r22,r17,10dbc <___svfprintf_internal_r+0x7dc>
   10d70:	010000f4 	movhi	r4,3
   10d74:	18c00404 	addi	r3,r3,16
   10d78:	10800044 	addi	r2,r2,1
   10d7c:	212e4b84 	addi	r4,r4,-18130
   10d80:	41000015 	stw	r4,0(r8)
   10d84:	45800115 	stw	r22,4(r8)
   10d88:	d8c02015 	stw	r3,128(sp)
   10d8c:	d8801f15 	stw	r2,124(sp)
   10d90:	e0bff40e 	bge	fp,r2,10d64 <__alt_data_end+0xfc010d64>
   10d94:	d9801e04 	addi	r6,sp,120
   10d98:	800b883a 	mov	r5,r16
   10d9c:	9809883a 	mov	r4,r19
   10da0:	00195440 	call	19544 <__ssprint_r>
   10da4:	103ef51e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   10da8:	8c7ffc04 	addi	r17,r17,-16
   10dac:	d8c02017 	ldw	r3,128(sp)
   10db0:	d8801f17 	ldw	r2,124(sp)
   10db4:	da000404 	addi	r8,sp,16
   10db8:	b47fed16 	blt	r22,r17,10d70 <__alt_data_end+0xfc010d70>
   10dbc:	9021883a 	mov	r16,r18
   10dc0:	a025883a 	mov	r18,r20
   10dc4:	8829883a 	mov	r20,r17
   10dc8:	dc403c17 	ldw	r17,240(sp)
   10dcc:	d9403517 	ldw	r5,212(sp)
   10dd0:	a0c7883a 	add	r3,r20,r3
   10dd4:	10800044 	addi	r2,r2,1
   10dd8:	41400015 	stw	r5,0(r8)
   10ddc:	45000115 	stw	r20,4(r8)
   10de0:	d8c02015 	stw	r3,128(sp)
   10de4:	d8801f15 	stw	r2,124(sp)
   10de8:	010001c4 	movi	r4,7
   10dec:	2082c116 	blt	r4,r2,118f4 <___svfprintf_internal_r+0x1314>
   10df0:	df002787 	ldb	fp,158(sp)
   10df4:	42000204 	addi	r8,r8,8
   10df8:	e0000c26 	beq	fp,zero,10e2c <___svfprintf_internal_r+0x84c>
   10dfc:	d8801f17 	ldw	r2,124(sp)
   10e00:	d9002784 	addi	r4,sp,158
   10e04:	18c00044 	addi	r3,r3,1
   10e08:	10800044 	addi	r2,r2,1
   10e0c:	41000015 	stw	r4,0(r8)
   10e10:	01000044 	movi	r4,1
   10e14:	41000115 	stw	r4,4(r8)
   10e18:	d8c02015 	stw	r3,128(sp)
   10e1c:	d8801f15 	stw	r2,124(sp)
   10e20:	010001c4 	movi	r4,7
   10e24:	20825a16 	blt	r4,r2,11790 <___svfprintf_internal_r+0x11b0>
   10e28:	42000204 	addi	r8,r8,8
   10e2c:	d8802c17 	ldw	r2,176(sp)
   10e30:	10000c26 	beq	r2,zero,10e64 <___svfprintf_internal_r+0x884>
   10e34:	d8801f17 	ldw	r2,124(sp)
   10e38:	d9002704 	addi	r4,sp,156
   10e3c:	18c00084 	addi	r3,r3,2
   10e40:	10800044 	addi	r2,r2,1
   10e44:	41000015 	stw	r4,0(r8)
   10e48:	01000084 	movi	r4,2
   10e4c:	41000115 	stw	r4,4(r8)
   10e50:	d8c02015 	stw	r3,128(sp)
   10e54:	d8801f15 	stw	r2,124(sp)
   10e58:	010001c4 	movi	r4,7
   10e5c:	20825416 	blt	r4,r2,117b0 <___svfprintf_internal_r+0x11d0>
   10e60:	42000204 	addi	r8,r8,8
   10e64:	d9003017 	ldw	r4,192(sp)
   10e68:	00802004 	movi	r2,128
   10e6c:	2081b926 	beq	r4,r2,11554 <___svfprintf_internal_r+0xf74>
   10e70:	d9402a17 	ldw	r5,168(sp)
   10e74:	d8802b17 	ldw	r2,172(sp)
   10e78:	28adc83a 	sub	r22,r5,r2
   10e7c:	05802f0e 	bge	zero,r22,10f3c <___svfprintf_internal_r+0x95c>
   10e80:	07000404 	movi	fp,16
   10e84:	d8801f17 	ldw	r2,124(sp)
   10e88:	e583e20e 	bge	fp,r22,11e14 <___svfprintf_internal_r+0x1834>
   10e8c:	014000f4 	movhi	r5,3
   10e90:	296e4784 	addi	r5,r5,-18146
   10e94:	dc402a15 	stw	r17,168(sp)
   10e98:	d9402c15 	stw	r5,176(sp)
   10e9c:	b023883a 	mov	r17,r22
   10ea0:	050001c4 	movi	r20,7
   10ea4:	902d883a 	mov	r22,r18
   10ea8:	8025883a 	mov	r18,r16
   10eac:	dc002d17 	ldw	r16,180(sp)
   10eb0:	00000306 	br	10ec0 <___svfprintf_internal_r+0x8e0>
   10eb4:	8c7ffc04 	addi	r17,r17,-16
   10eb8:	42000204 	addi	r8,r8,8
   10ebc:	e440110e 	bge	fp,r17,10f04 <___svfprintf_internal_r+0x924>
   10ec0:	18c00404 	addi	r3,r3,16
   10ec4:	10800044 	addi	r2,r2,1
   10ec8:	45400015 	stw	r21,0(r8)
   10ecc:	47000115 	stw	fp,4(r8)
   10ed0:	d8c02015 	stw	r3,128(sp)
   10ed4:	d8801f15 	stw	r2,124(sp)
   10ed8:	a0bff60e 	bge	r20,r2,10eb4 <__alt_data_end+0xfc010eb4>
   10edc:	d9801e04 	addi	r6,sp,120
   10ee0:	800b883a 	mov	r5,r16
   10ee4:	9809883a 	mov	r4,r19
   10ee8:	00195440 	call	19544 <__ssprint_r>
   10eec:	103ea31e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   10ef0:	8c7ffc04 	addi	r17,r17,-16
   10ef4:	d8c02017 	ldw	r3,128(sp)
   10ef8:	d8801f17 	ldw	r2,124(sp)
   10efc:	da000404 	addi	r8,sp,16
   10f00:	e47fef16 	blt	fp,r17,10ec0 <__alt_data_end+0xfc010ec0>
   10f04:	9021883a 	mov	r16,r18
   10f08:	b025883a 	mov	r18,r22
   10f0c:	882d883a 	mov	r22,r17
   10f10:	dc402a17 	ldw	r17,168(sp)
   10f14:	d9002c17 	ldw	r4,176(sp)
   10f18:	1d87883a 	add	r3,r3,r22
   10f1c:	10800044 	addi	r2,r2,1
   10f20:	41000015 	stw	r4,0(r8)
   10f24:	45800115 	stw	r22,4(r8)
   10f28:	d8c02015 	stw	r3,128(sp)
   10f2c:	d8801f15 	stw	r2,124(sp)
   10f30:	010001c4 	movi	r4,7
   10f34:	20820e16 	blt	r4,r2,11770 <___svfprintf_internal_r+0x1190>
   10f38:	42000204 	addi	r8,r8,8
   10f3c:	9080400c 	andi	r2,r18,256
   10f40:	10013a1e 	bne	r2,zero,1142c <___svfprintf_internal_r+0xe4c>
   10f44:	d9402b17 	ldw	r5,172(sp)
   10f48:	d8801f17 	ldw	r2,124(sp)
   10f4c:	44000015 	stw	r16,0(r8)
   10f50:	1947883a 	add	r3,r3,r5
   10f54:	10800044 	addi	r2,r2,1
   10f58:	41400115 	stw	r5,4(r8)
   10f5c:	d8c02015 	stw	r3,128(sp)
   10f60:	d8801f15 	stw	r2,124(sp)
   10f64:	010001c4 	movi	r4,7
   10f68:	2081f316 	blt	r4,r2,11738 <___svfprintf_internal_r+0x1158>
   10f6c:	42000204 	addi	r8,r8,8
   10f70:	9480010c 	andi	r18,r18,4
   10f74:	90003226 	beq	r18,zero,11040 <___svfprintf_internal_r+0xa60>
   10f78:	d9403117 	ldw	r5,196(sp)
   10f7c:	d8802917 	ldw	r2,164(sp)
   10f80:	28a1c83a 	sub	r16,r5,r2
   10f84:	04002e0e 	bge	zero,r16,11040 <___svfprintf_internal_r+0xa60>
   10f88:	04400404 	movi	r17,16
   10f8c:	d8801f17 	ldw	r2,124(sp)
   10f90:	8c04db0e 	bge	r17,r16,12300 <___svfprintf_internal_r+0x1d20>
   10f94:	014000f4 	movhi	r5,3
   10f98:	296e4b84 	addi	r5,r5,-18130
   10f9c:	d9403515 	stw	r5,212(sp)
   10fa0:	048001c4 	movi	r18,7
   10fa4:	dd002d17 	ldw	r20,180(sp)
   10fa8:	00000306 	br	10fb8 <___svfprintf_internal_r+0x9d8>
   10fac:	843ffc04 	addi	r16,r16,-16
   10fb0:	42000204 	addi	r8,r8,8
   10fb4:	8c00130e 	bge	r17,r16,11004 <___svfprintf_internal_r+0xa24>
   10fb8:	010000f4 	movhi	r4,3
   10fbc:	18c00404 	addi	r3,r3,16
   10fc0:	10800044 	addi	r2,r2,1
   10fc4:	212e4b84 	addi	r4,r4,-18130
   10fc8:	41000015 	stw	r4,0(r8)
   10fcc:	44400115 	stw	r17,4(r8)
   10fd0:	d8c02015 	stw	r3,128(sp)
   10fd4:	d8801f15 	stw	r2,124(sp)
   10fd8:	90bff40e 	bge	r18,r2,10fac <__alt_data_end+0xfc010fac>
   10fdc:	d9801e04 	addi	r6,sp,120
   10fe0:	a00b883a 	mov	r5,r20
   10fe4:	9809883a 	mov	r4,r19
   10fe8:	00195440 	call	19544 <__ssprint_r>
   10fec:	103e631e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   10ff0:	843ffc04 	addi	r16,r16,-16
   10ff4:	d8c02017 	ldw	r3,128(sp)
   10ff8:	d8801f17 	ldw	r2,124(sp)
   10ffc:	da000404 	addi	r8,sp,16
   11000:	8c3fed16 	blt	r17,r16,10fb8 <__alt_data_end+0xfc010fb8>
   11004:	d9403517 	ldw	r5,212(sp)
   11008:	1c07883a 	add	r3,r3,r16
   1100c:	10800044 	addi	r2,r2,1
   11010:	41400015 	stw	r5,0(r8)
   11014:	44000115 	stw	r16,4(r8)
   11018:	d8c02015 	stw	r3,128(sp)
   1101c:	d8801f15 	stw	r2,124(sp)
   11020:	010001c4 	movi	r4,7
   11024:	2080060e 	bge	r4,r2,11040 <___svfprintf_internal_r+0xa60>
   11028:	d9402d17 	ldw	r5,180(sp)
   1102c:	d9801e04 	addi	r6,sp,120
   11030:	9809883a 	mov	r4,r19
   11034:	00195440 	call	19544 <__ssprint_r>
   11038:	103e501e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   1103c:	d8c02017 	ldw	r3,128(sp)
   11040:	d8803117 	ldw	r2,196(sp)
   11044:	d9002917 	ldw	r4,164(sp)
   11048:	1100010e 	bge	r2,r4,11050 <___svfprintf_internal_r+0xa70>
   1104c:	2005883a 	mov	r2,r4
   11050:	d9402f17 	ldw	r5,188(sp)
   11054:	288b883a 	add	r5,r5,r2
   11058:	d9402f15 	stw	r5,188(sp)
   1105c:	1801be1e 	bne	r3,zero,11758 <___svfprintf_internal_r+0x1178>
   11060:	b8800007 	ldb	r2,0(r23)
   11064:	d8001f15 	stw	zero,124(sp)
   11068:	da000404 	addi	r8,sp,16
   1106c:	103d891e 	bne	r2,zero,10694 <__alt_data_end+0xfc010694>
   11070:	b823883a 	mov	r17,r23
   11074:	003d9f06 	br	106f4 <__alt_data_end+0xfc0106f4>
   11078:	8025883a 	mov	r18,r16
   1107c:	dc002903 	ldbu	r16,164(sp)
   11080:	e011883a 	mov	r8,fp
   11084:	84003fcc 	andi	r16,r16,255
   11088:	8005e61e 	bne	r16,zero,12824 <___svfprintf_internal_r+0x2244>
   1108c:	94800414 	ori	r18,r18,16
   11090:	9080080c 	andi	r2,r18,32
   11094:	10022026 	beq	r2,zero,11918 <___svfprintf_internal_r+0x1338>
   11098:	d9002e17 	ldw	r4,184(sp)
   1109c:	d9402a17 	ldw	r5,168(sp)
   110a0:	d8002785 	stb	zero,158(sp)
   110a4:	20c00204 	addi	r3,r4,8
   110a8:	25000017 	ldw	r20,0(r4)
   110ac:	25800117 	ldw	r22,4(r4)
   110b0:	2803ad16 	blt	r5,zero,11f68 <___svfprintf_internal_r+0x1988>
   110b4:	013fdfc4 	movi	r4,-129
   110b8:	a584b03a 	or	r2,r20,r22
   110bc:	d8c02e15 	stw	r3,184(sp)
   110c0:	9124703a 	and	r18,r18,r4
   110c4:	0039883a 	mov	fp,zero
   110c8:	103eb01e 	bne	r2,zero,10b8c <__alt_data_end+0xfc010b8c>
   110cc:	d8802a17 	ldw	r2,168(sp)
   110d0:	1002e71e 	bne	r2,zero,11c70 <___svfprintf_internal_r+0x1690>
   110d4:	d8002a15 	stw	zero,168(sp)
   110d8:	d8002b15 	stw	zero,172(sp)
   110dc:	dc001e04 	addi	r16,sp,120
   110e0:	003ef706 	br	10cc0 <__alt_data_end+0xfc010cc0>
   110e4:	8025883a 	mov	r18,r16
   110e8:	dc002903 	ldbu	r16,164(sp)
   110ec:	e011883a 	mov	r8,fp
   110f0:	84003fcc 	andi	r16,r16,255
   110f4:	8005c81e 	bne	r16,zero,12818 <___svfprintf_internal_r+0x2238>
   110f8:	010000f4 	movhi	r4,3
   110fc:	212e3b04 	addi	r4,r4,-18196
   11100:	d9003a15 	stw	r4,232(sp)
   11104:	9080080c 	andi	r2,r18,32
   11108:	10007226 	beq	r2,zero,112d4 <___svfprintf_internal_r+0xcf4>
   1110c:	d9402e17 	ldw	r5,184(sp)
   11110:	2d000017 	ldw	r20,0(r5)
   11114:	2d800117 	ldw	r22,4(r5)
   11118:	29400204 	addi	r5,r5,8
   1111c:	d9402e15 	stw	r5,184(sp)
   11120:	9080004c 	andi	r2,r18,1
   11124:	1001aa26 	beq	r2,zero,117d0 <___svfprintf_internal_r+0x11f0>
   11128:	a584b03a 	or	r2,r20,r22
   1112c:	10032526 	beq	r2,zero,11dc4 <___svfprintf_internal_r+0x17e4>
   11130:	d8c02a17 	ldw	r3,168(sp)
   11134:	00800c04 	movi	r2,48
   11138:	d8802705 	stb	r2,156(sp)
   1113c:	dc402745 	stb	r17,157(sp)
   11140:	d8002785 	stb	zero,158(sp)
   11144:	90800094 	ori	r2,r18,2
   11148:	1804a316 	blt	r3,zero,123d8 <___svfprintf_internal_r+0x1df8>
   1114c:	00bfdfc4 	movi	r2,-129
   11150:	90a4703a 	and	r18,r18,r2
   11154:	94800094 	ori	r18,r18,2
   11158:	0039883a 	mov	fp,zero
   1115c:	d9003a17 	ldw	r4,232(sp)
   11160:	dc001e04 	addi	r16,sp,120
   11164:	a08003cc 	andi	r2,r20,15
   11168:	b006973a 	slli	r3,r22,28
   1116c:	2085883a 	add	r2,r4,r2
   11170:	a028d13a 	srli	r20,r20,4
   11174:	10800003 	ldbu	r2,0(r2)
   11178:	b02cd13a 	srli	r22,r22,4
   1117c:	843fffc4 	addi	r16,r16,-1
   11180:	1d28b03a 	or	r20,r3,r20
   11184:	80800005 	stb	r2,0(r16)
   11188:	a584b03a 	or	r2,r20,r22
   1118c:	103ff51e 	bne	r2,zero,11164 <__alt_data_end+0xfc011164>
   11190:	d8c02817 	ldw	r3,160(sp)
   11194:	1c07c83a 	sub	r3,r3,r16
   11198:	d8c02b15 	stw	r3,172(sp)
   1119c:	003ec806 	br	10cc0 <__alt_data_end+0xfc010cc0>
   111a0:	d8c02e17 	ldw	r3,184(sp)
   111a4:	d9002e17 	ldw	r4,184(sp)
   111a8:	8025883a 	mov	r18,r16
   111ac:	18800017 	ldw	r2,0(r3)
   111b0:	21000104 	addi	r4,r4,4
   111b4:	00c00044 	movi	r3,1
   111b8:	e011883a 	mov	r8,fp
   111bc:	d8c02915 	stw	r3,164(sp)
   111c0:	d8002785 	stb	zero,158(sp)
   111c4:	d8801405 	stb	r2,80(sp)
   111c8:	d9002e15 	stw	r4,184(sp)
   111cc:	d8c02b15 	stw	r3,172(sp)
   111d0:	d8002a15 	stw	zero,168(sp)
   111d4:	d8003215 	stw	zero,200(sp)
   111d8:	dc001404 	addi	r16,sp,80
   111dc:	0039883a 	mov	fp,zero
   111e0:	003ec406 	br	10cf4 <__alt_data_end+0xfc010cf4>
   111e4:	8025883a 	mov	r18,r16
   111e8:	dc002903 	ldbu	r16,164(sp)
   111ec:	e011883a 	mov	r8,fp
   111f0:	84003fcc 	andi	r16,r16,255
   111f4:	803e8726 	beq	r16,zero,10c14 <__alt_data_end+0xfc010c14>
   111f8:	d8c02b03 	ldbu	r3,172(sp)
   111fc:	d8c02785 	stb	r3,158(sp)
   11200:	003e8406 	br	10c14 <__alt_data_end+0xfc010c14>
   11204:	00c00044 	movi	r3,1
   11208:	d8c02905 	stb	r3,164(sp)
   1120c:	00c00ac4 	movi	r3,43
   11210:	d8c02b05 	stb	r3,172(sp)
   11214:	bc400007 	ldb	r17,0(r23)
   11218:	003d4606 	br	10734 <__alt_data_end+0xfc010734>
   1121c:	84000814 	ori	r16,r16,32
   11220:	bc400007 	ldb	r17,0(r23)
   11224:	003d4306 	br	10734 <__alt_data_end+0xfc010734>
   11228:	d8802e17 	ldw	r2,184(sp)
   1122c:	8025883a 	mov	r18,r16
   11230:	d8002785 	stb	zero,158(sp)
   11234:	14000017 	ldw	r16,0(r2)
   11238:	e011883a 	mov	r8,fp
   1123c:	15000104 	addi	r20,r2,4
   11240:	80042126 	beq	r16,zero,122c8 <___svfprintf_internal_r+0x1ce8>
   11244:	d8c02a17 	ldw	r3,168(sp)
   11248:	1803ee16 	blt	r3,zero,12204 <___svfprintf_internal_r+0x1c24>
   1124c:	180d883a 	mov	r6,r3
   11250:	000b883a 	mov	r5,zero
   11254:	8009883a 	mov	r4,r16
   11258:	df003e15 	stw	fp,248(sp)
   1125c:	00179d00 	call	179d0 <memchr>
   11260:	da003e17 	ldw	r8,248(sp)
   11264:	10046a26 	beq	r2,zero,12410 <___svfprintf_internal_r+0x1e30>
   11268:	1405c83a 	sub	r2,r2,r16
   1126c:	d8802b15 	stw	r2,172(sp)
   11270:	1003ea16 	blt	r2,zero,1221c <___svfprintf_internal_r+0x1c3c>
   11274:	df002783 	ldbu	fp,158(sp)
   11278:	d8802915 	stw	r2,164(sp)
   1127c:	dd002e15 	stw	r20,184(sp)
   11280:	d8002a15 	stw	zero,168(sp)
   11284:	d8003215 	stw	zero,200(sp)
   11288:	003e9306 	br	10cd8 <__alt_data_end+0xfc010cd8>
   1128c:	8025883a 	mov	r18,r16
   11290:	dc002903 	ldbu	r16,164(sp)
   11294:	e011883a 	mov	r8,fp
   11298:	84003fcc 	andi	r16,r16,255
   1129c:	803f7c26 	beq	r16,zero,11090 <__alt_data_end+0xfc011090>
   112a0:	d8c02b03 	ldbu	r3,172(sp)
   112a4:	d8c02785 	stb	r3,158(sp)
   112a8:	003f7906 	br	11090 <__alt_data_end+0xfc011090>
   112ac:	8025883a 	mov	r18,r16
   112b0:	dc002903 	ldbu	r16,164(sp)
   112b4:	e011883a 	mov	r8,fp
   112b8:	84003fcc 	andi	r16,r16,255
   112bc:	8005741e 	bne	r16,zero,12890 <___svfprintf_internal_r+0x22b0>
   112c0:	010000f4 	movhi	r4,3
   112c4:	212e4004 	addi	r4,r4,-18176
   112c8:	d9003a15 	stw	r4,232(sp)
   112cc:	9080080c 	andi	r2,r18,32
   112d0:	103f8e1e 	bne	r2,zero,1110c <__alt_data_end+0xfc01110c>
   112d4:	9080040c 	andi	r2,r18,16
   112d8:	1002a726 	beq	r2,zero,11d78 <___svfprintf_internal_r+0x1798>
   112dc:	d8802e17 	ldw	r2,184(sp)
   112e0:	002d883a 	mov	r22,zero
   112e4:	15000017 	ldw	r20,0(r2)
   112e8:	10800104 	addi	r2,r2,4
   112ec:	d8802e15 	stw	r2,184(sp)
   112f0:	003f8b06 	br	11120 <__alt_data_end+0xfc011120>
   112f4:	84000054 	ori	r16,r16,1
   112f8:	bc400007 	ldb	r17,0(r23)
   112fc:	003d0d06 	br	10734 <__alt_data_end+0xfc010734>
   11300:	d8802b07 	ldb	r2,172(sp)
   11304:	1002a41e 	bne	r2,zero,11d98 <___svfprintf_internal_r+0x17b8>
   11308:	00c00044 	movi	r3,1
   1130c:	d8c02905 	stb	r3,164(sp)
   11310:	00c00804 	movi	r3,32
   11314:	d8c02b05 	stb	r3,172(sp)
   11318:	bc400007 	ldb	r17,0(r23)
   1131c:	003d0506 	br	10734 <__alt_data_end+0xfc010734>
   11320:	8025883a 	mov	r18,r16
   11324:	dc002903 	ldbu	r16,164(sp)
   11328:	e011883a 	mov	r8,fp
   1132c:	84003fcc 	andi	r16,r16,255
   11330:	803e0626 	beq	r16,zero,10b4c <__alt_data_end+0xfc010b4c>
   11334:	d8c02b03 	ldbu	r3,172(sp)
   11338:	d8c02785 	stb	r3,158(sp)
   1133c:	003e0306 	br	10b4c <__alt_data_end+0xfc010b4c>
   11340:	bc400007 	ldb	r17,0(r23)
   11344:	00801b04 	movi	r2,108
   11348:	88830a26 	beq	r17,r2,11f74 <___svfprintf_internal_r+0x1994>
   1134c:	84000414 	ori	r16,r16,16
   11350:	003cf806 	br	10734 <__alt_data_end+0xfc010734>
   11354:	8025883a 	mov	r18,r16
   11358:	dc002903 	ldbu	r16,164(sp)
   1135c:	e011883a 	mov	r8,fp
   11360:	84003fcc 	andi	r16,r16,255
   11364:	8005471e 	bne	r16,zero,12884 <___svfprintf_internal_r+0x22a4>
   11368:	9080080c 	andi	r2,r18,32
   1136c:	10028c26 	beq	r2,zero,11da0 <___svfprintf_internal_r+0x17c0>
   11370:	d9002e17 	ldw	r4,184(sp)
   11374:	d9402f17 	ldw	r5,188(sp)
   11378:	20800017 	ldw	r2,0(r4)
   1137c:	2807d7fa 	srai	r3,r5,31
   11380:	21000104 	addi	r4,r4,4
   11384:	d9002e15 	stw	r4,184(sp)
   11388:	11400015 	stw	r5,0(r2)
   1138c:	10c00115 	stw	r3,4(r2)
   11390:	003cbe06 	br	1068c <__alt_data_end+0xfc01068c>
   11394:	84001014 	ori	r16,r16,64
   11398:	bc400007 	ldb	r17,0(r23)
   1139c:	003ce506 	br	10734 <__alt_data_end+0xfc010734>
   113a0:	010000f4 	movhi	r4,3
   113a4:	212e4004 	addi	r4,r4,-18176
   113a8:	0039883a 	mov	fp,zero
   113ac:	d9003a15 	stw	r4,232(sp)
   113b0:	04401e04 	movi	r17,120
   113b4:	003f6906 	br	1115c <__alt_data_end+0xfc01115c>
   113b8:	8025883a 	mov	r18,r16
   113bc:	dc002903 	ldbu	r16,164(sp)
   113c0:	e011883a 	mov	r8,fp
   113c4:	84003fcc 	andi	r16,r16,255
   113c8:	8005261e 	bne	r16,zero,12864 <___svfprintf_internal_r+0x2284>
   113cc:	883d6526 	beq	r17,zero,10964 <__alt_data_end+0xfc010964>
   113d0:	00c00044 	movi	r3,1
   113d4:	d8c02915 	stw	r3,164(sp)
   113d8:	dc401405 	stb	r17,80(sp)
   113dc:	d8002785 	stb	zero,158(sp)
   113e0:	003f7a06 	br	111cc <__alt_data_end+0xfc0111cc>
   113e4:	010000f4 	movhi	r4,3
   113e8:	212e4004 	addi	r4,r4,-18176
   113ec:	d9003a15 	stw	r4,232(sp)
   113f0:	d8c02e15 	stw	r3,184(sp)
   113f4:	1025883a 	mov	r18,r2
   113f8:	04401e04 	movi	r17,120
   113fc:	a584b03a 	or	r2,r20,r22
   11400:	1000fa1e 	bne	r2,zero,117ec <___svfprintf_internal_r+0x120c>
   11404:	0039883a 	mov	fp,zero
   11408:	00800084 	movi	r2,2
   1140c:	10803fcc 	andi	r2,r2,255
   11410:	00c00044 	movi	r3,1
   11414:	10c21626 	beq	r2,r3,11c70 <___svfprintf_internal_r+0x1690>
   11418:	00c00084 	movi	r3,2
   1141c:	10fe0e1e 	bne	r2,r3,10c58 <__alt_data_end+0xfc010c58>
   11420:	003d4606 	br	1093c <__alt_data_end+0xfc01093c>
   11424:	d8c02017 	ldw	r3,128(sp)
   11428:	003e7306 	br	10df8 <__alt_data_end+0xfc010df8>
   1142c:	00801944 	movi	r2,101
   11430:	14407c0e 	bge	r2,r17,11624 <___svfprintf_internal_r+0x1044>
   11434:	d9003617 	ldw	r4,216(sp)
   11438:	d9403717 	ldw	r5,220(sp)
   1143c:	000d883a 	mov	r6,zero
   11440:	000f883a 	mov	r7,zero
   11444:	d8c03d15 	stw	r3,244(sp)
   11448:	da003e15 	stw	r8,248(sp)
   1144c:	001e9340 	call	1e934 <__eqdf2>
   11450:	d8c03d17 	ldw	r3,244(sp)
   11454:	da003e17 	ldw	r8,248(sp)
   11458:	1000f51e 	bne	r2,zero,11830 <___svfprintf_internal_r+0x1250>
   1145c:	d8801f17 	ldw	r2,124(sp)
   11460:	010000f4 	movhi	r4,3
   11464:	212e4704 	addi	r4,r4,-18148
   11468:	18c00044 	addi	r3,r3,1
   1146c:	10800044 	addi	r2,r2,1
   11470:	41000015 	stw	r4,0(r8)
   11474:	01000044 	movi	r4,1
   11478:	41000115 	stw	r4,4(r8)
   1147c:	d8c02015 	stw	r3,128(sp)
   11480:	d8801f15 	stw	r2,124(sp)
   11484:	010001c4 	movi	r4,7
   11488:	20826616 	blt	r4,r2,11e24 <___svfprintf_internal_r+0x1844>
   1148c:	42000204 	addi	r8,r8,8
   11490:	d8802617 	ldw	r2,152(sp)
   11494:	d9403317 	ldw	r5,204(sp)
   11498:	11400216 	blt	r2,r5,114a4 <___svfprintf_internal_r+0xec4>
   1149c:	9080004c 	andi	r2,r18,1
   114a0:	103eb326 	beq	r2,zero,10f70 <__alt_data_end+0xfc010f70>
   114a4:	d8803817 	ldw	r2,224(sp)
   114a8:	d9003417 	ldw	r4,208(sp)
   114ac:	d9403817 	ldw	r5,224(sp)
   114b0:	1887883a 	add	r3,r3,r2
   114b4:	d8801f17 	ldw	r2,124(sp)
   114b8:	41000015 	stw	r4,0(r8)
   114bc:	41400115 	stw	r5,4(r8)
   114c0:	10800044 	addi	r2,r2,1
   114c4:	d8c02015 	stw	r3,128(sp)
   114c8:	d8801f15 	stw	r2,124(sp)
   114cc:	010001c4 	movi	r4,7
   114d0:	2082af16 	blt	r4,r2,11f90 <___svfprintf_internal_r+0x19b0>
   114d4:	42000204 	addi	r8,r8,8
   114d8:	d8803317 	ldw	r2,204(sp)
   114dc:	143fffc4 	addi	r16,r2,-1
   114e0:	043ea30e 	bge	zero,r16,10f70 <__alt_data_end+0xfc010f70>
   114e4:	04400404 	movi	r17,16
   114e8:	d8801f17 	ldw	r2,124(sp)
   114ec:	8c00860e 	bge	r17,r16,11708 <___svfprintf_internal_r+0x1128>
   114f0:	014000f4 	movhi	r5,3
   114f4:	296e4784 	addi	r5,r5,-18146
   114f8:	d9402c15 	stw	r5,176(sp)
   114fc:	058001c4 	movi	r22,7
   11500:	dd002d17 	ldw	r20,180(sp)
   11504:	00000306 	br	11514 <___svfprintf_internal_r+0xf34>
   11508:	42000204 	addi	r8,r8,8
   1150c:	843ffc04 	addi	r16,r16,-16
   11510:	8c00800e 	bge	r17,r16,11714 <___svfprintf_internal_r+0x1134>
   11514:	18c00404 	addi	r3,r3,16
   11518:	10800044 	addi	r2,r2,1
   1151c:	45400015 	stw	r21,0(r8)
   11520:	44400115 	stw	r17,4(r8)
   11524:	d8c02015 	stw	r3,128(sp)
   11528:	d8801f15 	stw	r2,124(sp)
   1152c:	b0bff60e 	bge	r22,r2,11508 <__alt_data_end+0xfc011508>
   11530:	d9801e04 	addi	r6,sp,120
   11534:	a00b883a 	mov	r5,r20
   11538:	9809883a 	mov	r4,r19
   1153c:	00195440 	call	19544 <__ssprint_r>
   11540:	103d0e1e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11544:	d8c02017 	ldw	r3,128(sp)
   11548:	d8801f17 	ldw	r2,124(sp)
   1154c:	da000404 	addi	r8,sp,16
   11550:	003fee06 	br	1150c <__alt_data_end+0xfc01150c>
   11554:	d9403117 	ldw	r5,196(sp)
   11558:	d8802917 	ldw	r2,164(sp)
   1155c:	28adc83a 	sub	r22,r5,r2
   11560:	05be430e 	bge	zero,r22,10e70 <__alt_data_end+0xfc010e70>
   11564:	07000404 	movi	fp,16
   11568:	d8801f17 	ldw	r2,124(sp)
   1156c:	e583a20e 	bge	fp,r22,123f8 <___svfprintf_internal_r+0x1e18>
   11570:	014000f4 	movhi	r5,3
   11574:	296e4784 	addi	r5,r5,-18146
   11578:	dc403015 	stw	r17,192(sp)
   1157c:	d9402c15 	stw	r5,176(sp)
   11580:	b023883a 	mov	r17,r22
   11584:	050001c4 	movi	r20,7
   11588:	902d883a 	mov	r22,r18
   1158c:	8025883a 	mov	r18,r16
   11590:	dc002d17 	ldw	r16,180(sp)
   11594:	00000306 	br	115a4 <___svfprintf_internal_r+0xfc4>
   11598:	8c7ffc04 	addi	r17,r17,-16
   1159c:	42000204 	addi	r8,r8,8
   115a0:	e440110e 	bge	fp,r17,115e8 <___svfprintf_internal_r+0x1008>
   115a4:	18c00404 	addi	r3,r3,16
   115a8:	10800044 	addi	r2,r2,1
   115ac:	45400015 	stw	r21,0(r8)
   115b0:	47000115 	stw	fp,4(r8)
   115b4:	d8c02015 	stw	r3,128(sp)
   115b8:	d8801f15 	stw	r2,124(sp)
   115bc:	a0bff60e 	bge	r20,r2,11598 <__alt_data_end+0xfc011598>
   115c0:	d9801e04 	addi	r6,sp,120
   115c4:	800b883a 	mov	r5,r16
   115c8:	9809883a 	mov	r4,r19
   115cc:	00195440 	call	19544 <__ssprint_r>
   115d0:	103cea1e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   115d4:	8c7ffc04 	addi	r17,r17,-16
   115d8:	d8c02017 	ldw	r3,128(sp)
   115dc:	d8801f17 	ldw	r2,124(sp)
   115e0:	da000404 	addi	r8,sp,16
   115e4:	e47fef16 	blt	fp,r17,115a4 <__alt_data_end+0xfc0115a4>
   115e8:	9021883a 	mov	r16,r18
   115ec:	b025883a 	mov	r18,r22
   115f0:	882d883a 	mov	r22,r17
   115f4:	dc403017 	ldw	r17,192(sp)
   115f8:	d9002c17 	ldw	r4,176(sp)
   115fc:	1d87883a 	add	r3,r3,r22
   11600:	10800044 	addi	r2,r2,1
   11604:	41000015 	stw	r4,0(r8)
   11608:	45800115 	stw	r22,4(r8)
   1160c:	d8c02015 	stw	r3,128(sp)
   11610:	d8801f15 	stw	r2,124(sp)
   11614:	010001c4 	movi	r4,7
   11618:	20819a16 	blt	r4,r2,11c84 <___svfprintf_internal_r+0x16a4>
   1161c:	42000204 	addi	r8,r8,8
   11620:	003e1306 	br	10e70 <__alt_data_end+0xfc010e70>
   11624:	d9403317 	ldw	r5,204(sp)
   11628:	00800044 	movi	r2,1
   1162c:	18c00044 	addi	r3,r3,1
   11630:	1141710e 	bge	r2,r5,11bf8 <___svfprintf_internal_r+0x1618>
   11634:	dc401f17 	ldw	r17,124(sp)
   11638:	00800044 	movi	r2,1
   1163c:	40800115 	stw	r2,4(r8)
   11640:	8c400044 	addi	r17,r17,1
   11644:	44000015 	stw	r16,0(r8)
   11648:	d8c02015 	stw	r3,128(sp)
   1164c:	dc401f15 	stw	r17,124(sp)
   11650:	008001c4 	movi	r2,7
   11654:	14417416 	blt	r2,r17,11c28 <___svfprintf_internal_r+0x1648>
   11658:	42000204 	addi	r8,r8,8
   1165c:	d8803817 	ldw	r2,224(sp)
   11660:	d9003417 	ldw	r4,208(sp)
   11664:	8c400044 	addi	r17,r17,1
   11668:	10c7883a 	add	r3,r2,r3
   1166c:	40800115 	stw	r2,4(r8)
   11670:	41000015 	stw	r4,0(r8)
   11674:	d8c02015 	stw	r3,128(sp)
   11678:	dc401f15 	stw	r17,124(sp)
   1167c:	008001c4 	movi	r2,7
   11680:	14417216 	blt	r2,r17,11c4c <___svfprintf_internal_r+0x166c>
   11684:	45800204 	addi	r22,r8,8
   11688:	d9003617 	ldw	r4,216(sp)
   1168c:	d9403717 	ldw	r5,220(sp)
   11690:	000d883a 	mov	r6,zero
   11694:	000f883a 	mov	r7,zero
   11698:	d8c03d15 	stw	r3,244(sp)
   1169c:	001e9340 	call	1e934 <__eqdf2>
   116a0:	d8c03d17 	ldw	r3,244(sp)
   116a4:	1000b326 	beq	r2,zero,11974 <___svfprintf_internal_r+0x1394>
   116a8:	d9403317 	ldw	r5,204(sp)
   116ac:	84000044 	addi	r16,r16,1
   116b0:	8c400044 	addi	r17,r17,1
   116b4:	28bfffc4 	addi	r2,r5,-1
   116b8:	1887883a 	add	r3,r3,r2
   116bc:	b0800115 	stw	r2,4(r22)
   116c0:	b4000015 	stw	r16,0(r22)
   116c4:	d8c02015 	stw	r3,128(sp)
   116c8:	dc401f15 	stw	r17,124(sp)
   116cc:	008001c4 	movi	r2,7
   116d0:	1440d216 	blt	r2,r17,11a1c <___svfprintf_internal_r+0x143c>
   116d4:	b5800204 	addi	r22,r22,8
   116d8:	d9003b17 	ldw	r4,236(sp)
   116dc:	df0022c4 	addi	fp,sp,139
   116e0:	8c400044 	addi	r17,r17,1
   116e4:	20c7883a 	add	r3,r4,r3
   116e8:	b7000015 	stw	fp,0(r22)
   116ec:	b1000115 	stw	r4,4(r22)
   116f0:	d8c02015 	stw	r3,128(sp)
   116f4:	dc401f15 	stw	r17,124(sp)
   116f8:	008001c4 	movi	r2,7
   116fc:	14400e16 	blt	r2,r17,11738 <___svfprintf_internal_r+0x1158>
   11700:	b2000204 	addi	r8,r22,8
   11704:	003e1a06 	br	10f70 <__alt_data_end+0xfc010f70>
   11708:	010000f4 	movhi	r4,3
   1170c:	212e4784 	addi	r4,r4,-18146
   11710:	d9002c15 	stw	r4,176(sp)
   11714:	d9002c17 	ldw	r4,176(sp)
   11718:	1c07883a 	add	r3,r3,r16
   1171c:	44000115 	stw	r16,4(r8)
   11720:	41000015 	stw	r4,0(r8)
   11724:	10800044 	addi	r2,r2,1
   11728:	d8c02015 	stw	r3,128(sp)
   1172c:	d8801f15 	stw	r2,124(sp)
   11730:	010001c4 	movi	r4,7
   11734:	20be0d0e 	bge	r4,r2,10f6c <__alt_data_end+0xfc010f6c>
   11738:	d9402d17 	ldw	r5,180(sp)
   1173c:	d9801e04 	addi	r6,sp,120
   11740:	9809883a 	mov	r4,r19
   11744:	00195440 	call	19544 <__ssprint_r>
   11748:	103c8c1e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   1174c:	d8c02017 	ldw	r3,128(sp)
   11750:	da000404 	addi	r8,sp,16
   11754:	003e0606 	br	10f70 <__alt_data_end+0xfc010f70>
   11758:	d9402d17 	ldw	r5,180(sp)
   1175c:	d9801e04 	addi	r6,sp,120
   11760:	9809883a 	mov	r4,r19
   11764:	00195440 	call	19544 <__ssprint_r>
   11768:	103e3d26 	beq	r2,zero,11060 <__alt_data_end+0xfc011060>
   1176c:	003c8306 	br	1097c <__alt_data_end+0xfc01097c>
   11770:	d9402d17 	ldw	r5,180(sp)
   11774:	d9801e04 	addi	r6,sp,120
   11778:	9809883a 	mov	r4,r19
   1177c:	00195440 	call	19544 <__ssprint_r>
   11780:	103c7e1e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11784:	d8c02017 	ldw	r3,128(sp)
   11788:	da000404 	addi	r8,sp,16
   1178c:	003deb06 	br	10f3c <__alt_data_end+0xfc010f3c>
   11790:	d9402d17 	ldw	r5,180(sp)
   11794:	d9801e04 	addi	r6,sp,120
   11798:	9809883a 	mov	r4,r19
   1179c:	00195440 	call	19544 <__ssprint_r>
   117a0:	103c761e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   117a4:	d8c02017 	ldw	r3,128(sp)
   117a8:	da000404 	addi	r8,sp,16
   117ac:	003d9f06 	br	10e2c <__alt_data_end+0xfc010e2c>
   117b0:	d9402d17 	ldw	r5,180(sp)
   117b4:	d9801e04 	addi	r6,sp,120
   117b8:	9809883a 	mov	r4,r19
   117bc:	00195440 	call	19544 <__ssprint_r>
   117c0:	103c6e1e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   117c4:	d8c02017 	ldw	r3,128(sp)
   117c8:	da000404 	addi	r8,sp,16
   117cc:	003da506 	br	10e64 <__alt_data_end+0xfc010e64>
   117d0:	d9402a17 	ldw	r5,168(sp)
   117d4:	d8002785 	stb	zero,158(sp)
   117d8:	283f0816 	blt	r5,zero,113fc <__alt_data_end+0xfc0113fc>
   117dc:	00ffdfc4 	movi	r3,-129
   117e0:	a584b03a 	or	r2,r20,r22
   117e4:	90e4703a 	and	r18,r18,r3
   117e8:	103c5126 	beq	r2,zero,10930 <__alt_data_end+0xfc010930>
   117ec:	0039883a 	mov	fp,zero
   117f0:	003e5a06 	br	1115c <__alt_data_end+0xfc01115c>
   117f4:	9080040c 	andi	r2,r18,16
   117f8:	10013d26 	beq	r2,zero,11cf0 <___svfprintf_internal_r+0x1710>
   117fc:	d8c02e17 	ldw	r3,184(sp)
   11800:	d9002a17 	ldw	r4,168(sp)
   11804:	d8002785 	stb	zero,158(sp)
   11808:	18800104 	addi	r2,r3,4
   1180c:	1d000017 	ldw	r20,0(r3)
   11810:	002d883a 	mov	r22,zero
   11814:	20013f16 	blt	r4,zero,11d14 <___svfprintf_internal_r+0x1734>
   11818:	00ffdfc4 	movi	r3,-129
   1181c:	d8802e15 	stw	r2,184(sp)
   11820:	90e4703a 	and	r18,r18,r3
   11824:	a03d0926 	beq	r20,zero,10c4c <__alt_data_end+0xfc010c4c>
   11828:	0039883a 	mov	fp,zero
   1182c:	003d0c06 	br	10c60 <__alt_data_end+0xfc010c60>
   11830:	dc402617 	ldw	r17,152(sp)
   11834:	0441830e 	bge	zero,r17,11e44 <___svfprintf_internal_r+0x1864>
   11838:	dc403217 	ldw	r17,200(sp)
   1183c:	d8803317 	ldw	r2,204(sp)
   11840:	1440010e 	bge	r2,r17,11848 <___svfprintf_internal_r+0x1268>
   11844:	1023883a 	mov	r17,r2
   11848:	04400a0e 	bge	zero,r17,11874 <___svfprintf_internal_r+0x1294>
   1184c:	d8801f17 	ldw	r2,124(sp)
   11850:	1c47883a 	add	r3,r3,r17
   11854:	44000015 	stw	r16,0(r8)
   11858:	10800044 	addi	r2,r2,1
   1185c:	44400115 	stw	r17,4(r8)
   11860:	d8c02015 	stw	r3,128(sp)
   11864:	d8801f15 	stw	r2,124(sp)
   11868:	010001c4 	movi	r4,7
   1186c:	20827516 	blt	r4,r2,12244 <___svfprintf_internal_r+0x1c64>
   11870:	42000204 	addi	r8,r8,8
   11874:	88027b16 	blt	r17,zero,12264 <___svfprintf_internal_r+0x1c84>
   11878:	d9003217 	ldw	r4,200(sp)
   1187c:	2463c83a 	sub	r17,r4,r17
   11880:	0440990e 	bge	zero,r17,11ae8 <___svfprintf_internal_r+0x1508>
   11884:	05800404 	movi	r22,16
   11888:	d8801f17 	ldw	r2,124(sp)
   1188c:	b441530e 	bge	r22,r17,11ddc <___svfprintf_internal_r+0x17fc>
   11890:	010000f4 	movhi	r4,3
   11894:	212e4784 	addi	r4,r4,-18146
   11898:	d9002c15 	stw	r4,176(sp)
   1189c:	070001c4 	movi	fp,7
   118a0:	dd002d17 	ldw	r20,180(sp)
   118a4:	00000306 	br	118b4 <___svfprintf_internal_r+0x12d4>
   118a8:	42000204 	addi	r8,r8,8
   118ac:	8c7ffc04 	addi	r17,r17,-16
   118b0:	b4414d0e 	bge	r22,r17,11de8 <___svfprintf_internal_r+0x1808>
   118b4:	18c00404 	addi	r3,r3,16
   118b8:	10800044 	addi	r2,r2,1
   118bc:	45400015 	stw	r21,0(r8)
   118c0:	45800115 	stw	r22,4(r8)
   118c4:	d8c02015 	stw	r3,128(sp)
   118c8:	d8801f15 	stw	r2,124(sp)
   118cc:	e0bff60e 	bge	fp,r2,118a8 <__alt_data_end+0xfc0118a8>
   118d0:	d9801e04 	addi	r6,sp,120
   118d4:	a00b883a 	mov	r5,r20
   118d8:	9809883a 	mov	r4,r19
   118dc:	00195440 	call	19544 <__ssprint_r>
   118e0:	103c261e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   118e4:	d8c02017 	ldw	r3,128(sp)
   118e8:	d8801f17 	ldw	r2,124(sp)
   118ec:	da000404 	addi	r8,sp,16
   118f0:	003fee06 	br	118ac <__alt_data_end+0xfc0118ac>
   118f4:	d9402d17 	ldw	r5,180(sp)
   118f8:	d9801e04 	addi	r6,sp,120
   118fc:	9809883a 	mov	r4,r19
   11900:	00195440 	call	19544 <__ssprint_r>
   11904:	103c1d1e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11908:	d8c02017 	ldw	r3,128(sp)
   1190c:	df002787 	ldb	fp,158(sp)
   11910:	da000404 	addi	r8,sp,16
   11914:	003d3806 	br	10df8 <__alt_data_end+0xfc010df8>
   11918:	9080040c 	andi	r2,r18,16
   1191c:	10005c26 	beq	r2,zero,11a90 <___svfprintf_internal_r+0x14b0>
   11920:	d8c02e17 	ldw	r3,184(sp)
   11924:	d9002a17 	ldw	r4,168(sp)
   11928:	d8002785 	stb	zero,158(sp)
   1192c:	18800104 	addi	r2,r3,4
   11930:	1d000017 	ldw	r20,0(r3)
   11934:	002d883a 	mov	r22,zero
   11938:	20005e16 	blt	r4,zero,11ab4 <___svfprintf_internal_r+0x14d4>
   1193c:	00ffdfc4 	movi	r3,-129
   11940:	d8802e15 	stw	r2,184(sp)
   11944:	90e4703a 	and	r18,r18,r3
   11948:	0039883a 	mov	fp,zero
   1194c:	a03ddf26 	beq	r20,zero,110cc <__alt_data_end+0xfc0110cc>
   11950:	00800244 	movi	r2,9
   11954:	153c8e36 	bltu	r2,r20,10b90 <__alt_data_end+0xfc010b90>
   11958:	a5000c04 	addi	r20,r20,48
   1195c:	dc001dc4 	addi	r16,sp,119
   11960:	dd001dc5 	stb	r20,119(sp)
   11964:	d8c02817 	ldw	r3,160(sp)
   11968:	1c07c83a 	sub	r3,r3,r16
   1196c:	d8c02b15 	stw	r3,172(sp)
   11970:	003cd306 	br	10cc0 <__alt_data_end+0xfc010cc0>
   11974:	d8803317 	ldw	r2,204(sp)
   11978:	143fffc4 	addi	r16,r2,-1
   1197c:	043f560e 	bge	zero,r16,116d8 <__alt_data_end+0xfc0116d8>
   11980:	07000404 	movi	fp,16
   11984:	e403530e 	bge	fp,r16,126d4 <___svfprintf_internal_r+0x20f4>
   11988:	014000f4 	movhi	r5,3
   1198c:	296e4784 	addi	r5,r5,-18146
   11990:	d9402c15 	stw	r5,176(sp)
   11994:	01c001c4 	movi	r7,7
   11998:	dd002d17 	ldw	r20,180(sp)
   1199c:	00000306 	br	119ac <___svfprintf_internal_r+0x13cc>
   119a0:	843ffc04 	addi	r16,r16,-16
   119a4:	b5800204 	addi	r22,r22,8
   119a8:	e400130e 	bge	fp,r16,119f8 <___svfprintf_internal_r+0x1418>
   119ac:	18c00404 	addi	r3,r3,16
   119b0:	8c400044 	addi	r17,r17,1
   119b4:	b5400015 	stw	r21,0(r22)
   119b8:	b7000115 	stw	fp,4(r22)
   119bc:	d8c02015 	stw	r3,128(sp)
   119c0:	dc401f15 	stw	r17,124(sp)
   119c4:	3c7ff60e 	bge	r7,r17,119a0 <__alt_data_end+0xfc0119a0>
   119c8:	d9801e04 	addi	r6,sp,120
   119cc:	a00b883a 	mov	r5,r20
   119d0:	9809883a 	mov	r4,r19
   119d4:	d9c03d15 	stw	r7,244(sp)
   119d8:	00195440 	call	19544 <__ssprint_r>
   119dc:	d9c03d17 	ldw	r7,244(sp)
   119e0:	103be61e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   119e4:	843ffc04 	addi	r16,r16,-16
   119e8:	d8c02017 	ldw	r3,128(sp)
   119ec:	dc401f17 	ldw	r17,124(sp)
   119f0:	dd800404 	addi	r22,sp,16
   119f4:	e43fed16 	blt	fp,r16,119ac <__alt_data_end+0xfc0119ac>
   119f8:	d8802c17 	ldw	r2,176(sp)
   119fc:	1c07883a 	add	r3,r3,r16
   11a00:	8c400044 	addi	r17,r17,1
   11a04:	b0800015 	stw	r2,0(r22)
   11a08:	b4000115 	stw	r16,4(r22)
   11a0c:	d8c02015 	stw	r3,128(sp)
   11a10:	dc401f15 	stw	r17,124(sp)
   11a14:	008001c4 	movi	r2,7
   11a18:	147f2e0e 	bge	r2,r17,116d4 <__alt_data_end+0xfc0116d4>
   11a1c:	d9402d17 	ldw	r5,180(sp)
   11a20:	d9801e04 	addi	r6,sp,120
   11a24:	9809883a 	mov	r4,r19
   11a28:	00195440 	call	19544 <__ssprint_r>
   11a2c:	103bd31e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11a30:	d8c02017 	ldw	r3,128(sp)
   11a34:	dc401f17 	ldw	r17,124(sp)
   11a38:	dd800404 	addi	r22,sp,16
   11a3c:	003f2606 	br	116d8 <__alt_data_end+0xfc0116d8>
   11a40:	9080040c 	andi	r2,r18,16
   11a44:	1000c326 	beq	r2,zero,11d54 <___svfprintf_internal_r+0x1774>
   11a48:	d9402e17 	ldw	r5,184(sp)
   11a4c:	2d000017 	ldw	r20,0(r5)
   11a50:	29400104 	addi	r5,r5,4
   11a54:	d9402e15 	stw	r5,184(sp)
   11a58:	a02dd7fa 	srai	r22,r20,31
   11a5c:	b005883a 	mov	r2,r22
   11a60:	103c430e 	bge	r2,zero,10b70 <__alt_data_end+0xfc010b70>
   11a64:	d9402a17 	ldw	r5,168(sp)
   11a68:	0529c83a 	sub	r20,zero,r20
   11a6c:	07000b44 	movi	fp,45
   11a70:	a004c03a 	cmpne	r2,r20,zero
   11a74:	05adc83a 	sub	r22,zero,r22
   11a78:	df002785 	stb	fp,158(sp)
   11a7c:	b0adc83a 	sub	r22,r22,r2
   11a80:	28022e16 	blt	r5,zero,1233c <___svfprintf_internal_r+0x1d5c>
   11a84:	00bfdfc4 	movi	r2,-129
   11a88:	90a4703a 	and	r18,r18,r2
   11a8c:	003c3f06 	br	10b8c <__alt_data_end+0xfc010b8c>
   11a90:	9080100c 	andi	r2,r18,64
   11a94:	d8002785 	stb	zero,158(sp)
   11a98:	10012526 	beq	r2,zero,11f30 <___svfprintf_internal_r+0x1950>
   11a9c:	d9402e17 	ldw	r5,184(sp)
   11aa0:	d8c02a17 	ldw	r3,168(sp)
   11aa4:	002d883a 	mov	r22,zero
   11aa8:	28800104 	addi	r2,r5,4
   11aac:	2d00000b 	ldhu	r20,0(r5)
   11ab0:	183fa20e 	bge	r3,zero,1193c <__alt_data_end+0xfc01193c>
   11ab4:	d8802e15 	stw	r2,184(sp)
   11ab8:	0039883a 	mov	fp,zero
   11abc:	a584b03a 	or	r2,r20,r22
   11ac0:	103c321e 	bne	r2,zero,10b8c <__alt_data_end+0xfc010b8c>
   11ac4:	00800044 	movi	r2,1
   11ac8:	003e5006 	br	1140c <__alt_data_end+0xfc01140c>
   11acc:	d9402d17 	ldw	r5,180(sp)
   11ad0:	d9801e04 	addi	r6,sp,120
   11ad4:	9809883a 	mov	r4,r19
   11ad8:	00195440 	call	19544 <__ssprint_r>
   11adc:	103ba71e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11ae0:	d8c02017 	ldw	r3,128(sp)
   11ae4:	da000404 	addi	r8,sp,16
   11ae8:	d9003217 	ldw	r4,200(sp)
   11aec:	d8802617 	ldw	r2,152(sp)
   11af0:	d9403317 	ldw	r5,204(sp)
   11af4:	8123883a 	add	r17,r16,r4
   11af8:	11400216 	blt	r2,r5,11b04 <___svfprintf_internal_r+0x1524>
   11afc:	9100004c 	andi	r4,r18,1
   11b00:	20000d26 	beq	r4,zero,11b38 <___svfprintf_internal_r+0x1558>
   11b04:	d9003817 	ldw	r4,224(sp)
   11b08:	d9403417 	ldw	r5,208(sp)
   11b0c:	1907883a 	add	r3,r3,r4
   11b10:	d9001f17 	ldw	r4,124(sp)
   11b14:	41400015 	stw	r5,0(r8)
   11b18:	d9403817 	ldw	r5,224(sp)
   11b1c:	21000044 	addi	r4,r4,1
   11b20:	d8c02015 	stw	r3,128(sp)
   11b24:	41400115 	stw	r5,4(r8)
   11b28:	d9001f15 	stw	r4,124(sp)
   11b2c:	014001c4 	movi	r5,7
   11b30:	2901dc16 	blt	r5,r4,122a4 <___svfprintf_internal_r+0x1cc4>
   11b34:	42000204 	addi	r8,r8,8
   11b38:	d9003317 	ldw	r4,204(sp)
   11b3c:	8121883a 	add	r16,r16,r4
   11b40:	2085c83a 	sub	r2,r4,r2
   11b44:	8461c83a 	sub	r16,r16,r17
   11b48:	1400010e 	bge	r2,r16,11b50 <___svfprintf_internal_r+0x1570>
   11b4c:	1021883a 	mov	r16,r2
   11b50:	04000a0e 	bge	zero,r16,11b7c <___svfprintf_internal_r+0x159c>
   11b54:	d9001f17 	ldw	r4,124(sp)
   11b58:	1c07883a 	add	r3,r3,r16
   11b5c:	44400015 	stw	r17,0(r8)
   11b60:	21000044 	addi	r4,r4,1
   11b64:	44000115 	stw	r16,4(r8)
   11b68:	d8c02015 	stw	r3,128(sp)
   11b6c:	d9001f15 	stw	r4,124(sp)
   11b70:	014001c4 	movi	r5,7
   11b74:	2901e616 	blt	r5,r4,12310 <___svfprintf_internal_r+0x1d30>
   11b78:	42000204 	addi	r8,r8,8
   11b7c:	8001f616 	blt	r16,zero,12358 <___svfprintf_internal_r+0x1d78>
   11b80:	1421c83a 	sub	r16,r2,r16
   11b84:	043cfa0e 	bge	zero,r16,10f70 <__alt_data_end+0xfc010f70>
   11b88:	04400404 	movi	r17,16
   11b8c:	d8801f17 	ldw	r2,124(sp)
   11b90:	8c3edd0e 	bge	r17,r16,11708 <__alt_data_end+0xfc011708>
   11b94:	014000f4 	movhi	r5,3
   11b98:	296e4784 	addi	r5,r5,-18146
   11b9c:	d9402c15 	stw	r5,176(sp)
   11ba0:	058001c4 	movi	r22,7
   11ba4:	dd002d17 	ldw	r20,180(sp)
   11ba8:	00000306 	br	11bb8 <___svfprintf_internal_r+0x15d8>
   11bac:	42000204 	addi	r8,r8,8
   11bb0:	843ffc04 	addi	r16,r16,-16
   11bb4:	8c3ed70e 	bge	r17,r16,11714 <__alt_data_end+0xfc011714>
   11bb8:	18c00404 	addi	r3,r3,16
   11bbc:	10800044 	addi	r2,r2,1
   11bc0:	45400015 	stw	r21,0(r8)
   11bc4:	44400115 	stw	r17,4(r8)
   11bc8:	d8c02015 	stw	r3,128(sp)
   11bcc:	d8801f15 	stw	r2,124(sp)
   11bd0:	b0bff60e 	bge	r22,r2,11bac <__alt_data_end+0xfc011bac>
   11bd4:	d9801e04 	addi	r6,sp,120
   11bd8:	a00b883a 	mov	r5,r20
   11bdc:	9809883a 	mov	r4,r19
   11be0:	00195440 	call	19544 <__ssprint_r>
   11be4:	103b651e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11be8:	d8c02017 	ldw	r3,128(sp)
   11bec:	d8801f17 	ldw	r2,124(sp)
   11bf0:	da000404 	addi	r8,sp,16
   11bf4:	003fee06 	br	11bb0 <__alt_data_end+0xfc011bb0>
   11bf8:	9088703a 	and	r4,r18,r2
   11bfc:	203e8d1e 	bne	r4,zero,11634 <__alt_data_end+0xfc011634>
   11c00:	dc401f17 	ldw	r17,124(sp)
   11c04:	40800115 	stw	r2,4(r8)
   11c08:	44000015 	stw	r16,0(r8)
   11c0c:	8c400044 	addi	r17,r17,1
   11c10:	d8c02015 	stw	r3,128(sp)
   11c14:	dc401f15 	stw	r17,124(sp)
   11c18:	008001c4 	movi	r2,7
   11c1c:	147f7f16 	blt	r2,r17,11a1c <__alt_data_end+0xfc011a1c>
   11c20:	45800204 	addi	r22,r8,8
   11c24:	003eac06 	br	116d8 <__alt_data_end+0xfc0116d8>
   11c28:	d9402d17 	ldw	r5,180(sp)
   11c2c:	d9801e04 	addi	r6,sp,120
   11c30:	9809883a 	mov	r4,r19
   11c34:	00195440 	call	19544 <__ssprint_r>
   11c38:	103b501e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11c3c:	d8c02017 	ldw	r3,128(sp)
   11c40:	dc401f17 	ldw	r17,124(sp)
   11c44:	da000404 	addi	r8,sp,16
   11c48:	003e8406 	br	1165c <__alt_data_end+0xfc01165c>
   11c4c:	d9402d17 	ldw	r5,180(sp)
   11c50:	d9801e04 	addi	r6,sp,120
   11c54:	9809883a 	mov	r4,r19
   11c58:	00195440 	call	19544 <__ssprint_r>
   11c5c:	103b471e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11c60:	d8c02017 	ldw	r3,128(sp)
   11c64:	dc401f17 	ldw	r17,124(sp)
   11c68:	dd800404 	addi	r22,sp,16
   11c6c:	003e8606 	br	11688 <__alt_data_end+0xfc011688>
   11c70:	0029883a 	mov	r20,zero
   11c74:	a5000c04 	addi	r20,r20,48
   11c78:	dc001dc4 	addi	r16,sp,119
   11c7c:	dd001dc5 	stb	r20,119(sp)
   11c80:	003f3806 	br	11964 <__alt_data_end+0xfc011964>
   11c84:	d9402d17 	ldw	r5,180(sp)
   11c88:	d9801e04 	addi	r6,sp,120
   11c8c:	9809883a 	mov	r4,r19
   11c90:	00195440 	call	19544 <__ssprint_r>
   11c94:	103b391e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11c98:	d8c02017 	ldw	r3,128(sp)
   11c9c:	da000404 	addi	r8,sp,16
   11ca0:	003c7306 	br	10e70 <__alt_data_end+0xfc010e70>
   11ca4:	d9003617 	ldw	r4,216(sp)
   11ca8:	d9403717 	ldw	r5,220(sp)
   11cac:	da003e15 	stw	r8,248(sp)
   11cb0:	00193940 	call	19394 <__fpclassifyd>
   11cb4:	da003e17 	ldw	r8,248(sp)
   11cb8:	1000bd1e 	bne	r2,zero,11fb0 <___svfprintf_internal_r+0x19d0>
   11cbc:	008011c4 	movi	r2,71
   11cc0:	14411e0e 	bge	r2,r17,1213c <___svfprintf_internal_r+0x1b5c>
   11cc4:	040000f4 	movhi	r16,3
   11cc8:	842e3a04 	addi	r16,r16,-18200
   11ccc:	00c000c4 	movi	r3,3
   11cd0:	00bfdfc4 	movi	r2,-129
   11cd4:	d8c02915 	stw	r3,164(sp)
   11cd8:	90a4703a 	and	r18,r18,r2
   11cdc:	df002783 	ldbu	fp,158(sp)
   11ce0:	d8c02b15 	stw	r3,172(sp)
   11ce4:	d8002a15 	stw	zero,168(sp)
   11ce8:	d8003215 	stw	zero,200(sp)
   11cec:	003bfa06 	br	10cd8 <__alt_data_end+0xfc010cd8>
   11cf0:	9080100c 	andi	r2,r18,64
   11cf4:	d8002785 	stb	zero,158(sp)
   11cf8:	10009426 	beq	r2,zero,11f4c <___svfprintf_internal_r+0x196c>
   11cfc:	d9402e17 	ldw	r5,184(sp)
   11d00:	d8c02a17 	ldw	r3,168(sp)
   11d04:	002d883a 	mov	r22,zero
   11d08:	28800104 	addi	r2,r5,4
   11d0c:	2d00000b 	ldhu	r20,0(r5)
   11d10:	183ec10e 	bge	r3,zero,11818 <__alt_data_end+0xfc011818>
   11d14:	a586b03a 	or	r3,r20,r22
   11d18:	d8802e15 	stw	r2,184(sp)
   11d1c:	183ec21e 	bne	r3,zero,11828 <__alt_data_end+0xfc011828>
   11d20:	0039883a 	mov	fp,zero
   11d24:	0005883a 	mov	r2,zero
   11d28:	003db806 	br	1140c <__alt_data_end+0xfc01140c>
   11d2c:	d8c02e17 	ldw	r3,184(sp)
   11d30:	d9002e17 	ldw	r4,184(sp)
   11d34:	d9402e17 	ldw	r5,184(sp)
   11d38:	18c00017 	ldw	r3,0(r3)
   11d3c:	21000117 	ldw	r4,4(r4)
   11d40:	29400204 	addi	r5,r5,8
   11d44:	d8c03615 	stw	r3,216(sp)
   11d48:	d9003715 	stw	r4,220(sp)
   11d4c:	d9402e15 	stw	r5,184(sp)
   11d50:	003b5a06 	br	10abc <__alt_data_end+0xfc010abc>
   11d54:	9080100c 	andi	r2,r18,64
   11d58:	10010726 	beq	r2,zero,12178 <___svfprintf_internal_r+0x1b98>
   11d5c:	d8802e17 	ldw	r2,184(sp)
   11d60:	1500000f 	ldh	r20,0(r2)
   11d64:	10800104 	addi	r2,r2,4
   11d68:	d8802e15 	stw	r2,184(sp)
   11d6c:	a02dd7fa 	srai	r22,r20,31
   11d70:	b005883a 	mov	r2,r22
   11d74:	003b7d06 	br	10b6c <__alt_data_end+0xfc010b6c>
   11d78:	9080100c 	andi	r2,r18,64
   11d7c:	10010526 	beq	r2,zero,12194 <___svfprintf_internal_r+0x1bb4>
   11d80:	d8c02e17 	ldw	r3,184(sp)
   11d84:	002d883a 	mov	r22,zero
   11d88:	1d00000b 	ldhu	r20,0(r3)
   11d8c:	18c00104 	addi	r3,r3,4
   11d90:	d8c02e15 	stw	r3,184(sp)
   11d94:	003ce206 	br	11120 <__alt_data_end+0xfc011120>
   11d98:	bc400007 	ldb	r17,0(r23)
   11d9c:	003a6506 	br	10734 <__alt_data_end+0xfc010734>
   11da0:	9080040c 	andi	r2,r18,16
   11da4:	10010126 	beq	r2,zero,121ac <___svfprintf_internal_r+0x1bcc>
   11da8:	d8c02e17 	ldw	r3,184(sp)
   11dac:	d9002f17 	ldw	r4,188(sp)
   11db0:	18800017 	ldw	r2,0(r3)
   11db4:	18c00104 	addi	r3,r3,4
   11db8:	d8c02e15 	stw	r3,184(sp)
   11dbc:	11000015 	stw	r4,0(r2)
   11dc0:	003a3206 	br	1068c <__alt_data_end+0xfc01068c>
   11dc4:	d9002a17 	ldw	r4,168(sp)
   11dc8:	d8002785 	stb	zero,158(sp)
   11dcc:	203d8d16 	blt	r4,zero,11404 <__alt_data_end+0xfc011404>
   11dd0:	00bfdfc4 	movi	r2,-129
   11dd4:	90a4703a 	and	r18,r18,r2
   11dd8:	003ad506 	br	10930 <__alt_data_end+0xfc010930>
   11ddc:	014000f4 	movhi	r5,3
   11de0:	296e4784 	addi	r5,r5,-18146
   11de4:	d9402c15 	stw	r5,176(sp)
   11de8:	d9402c17 	ldw	r5,176(sp)
   11dec:	1c47883a 	add	r3,r3,r17
   11df0:	10800044 	addi	r2,r2,1
   11df4:	41400015 	stw	r5,0(r8)
   11df8:	44400115 	stw	r17,4(r8)
   11dfc:	d8c02015 	stw	r3,128(sp)
   11e00:	d8801f15 	stw	r2,124(sp)
   11e04:	010001c4 	movi	r4,7
   11e08:	20bf3016 	blt	r4,r2,11acc <__alt_data_end+0xfc011acc>
   11e0c:	42000204 	addi	r8,r8,8
   11e10:	003f3506 	br	11ae8 <__alt_data_end+0xfc011ae8>
   11e14:	010000f4 	movhi	r4,3
   11e18:	212e4784 	addi	r4,r4,-18146
   11e1c:	d9002c15 	stw	r4,176(sp)
   11e20:	003c3c06 	br	10f14 <__alt_data_end+0xfc010f14>
   11e24:	d9402d17 	ldw	r5,180(sp)
   11e28:	d9801e04 	addi	r6,sp,120
   11e2c:	9809883a 	mov	r4,r19
   11e30:	00195440 	call	19544 <__ssprint_r>
   11e34:	103ad11e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11e38:	d8c02017 	ldw	r3,128(sp)
   11e3c:	da000404 	addi	r8,sp,16
   11e40:	003d9306 	br	11490 <__alt_data_end+0xfc011490>
   11e44:	d8801f17 	ldw	r2,124(sp)
   11e48:	014000f4 	movhi	r5,3
   11e4c:	01000044 	movi	r4,1
   11e50:	18c00044 	addi	r3,r3,1
   11e54:	10800044 	addi	r2,r2,1
   11e58:	296e4704 	addi	r5,r5,-18148
   11e5c:	41000115 	stw	r4,4(r8)
   11e60:	41400015 	stw	r5,0(r8)
   11e64:	d8c02015 	stw	r3,128(sp)
   11e68:	d8801f15 	stw	r2,124(sp)
   11e6c:	010001c4 	movi	r4,7
   11e70:	2080b516 	blt	r4,r2,12148 <___svfprintf_internal_r+0x1b68>
   11e74:	42000204 	addi	r8,r8,8
   11e78:	8800041e 	bne	r17,zero,11e8c <___svfprintf_internal_r+0x18ac>
   11e7c:	d8803317 	ldw	r2,204(sp)
   11e80:	1000021e 	bne	r2,zero,11e8c <___svfprintf_internal_r+0x18ac>
   11e84:	9080004c 	andi	r2,r18,1
   11e88:	103c3926 	beq	r2,zero,10f70 <__alt_data_end+0xfc010f70>
   11e8c:	d9003817 	ldw	r4,224(sp)
   11e90:	d8801f17 	ldw	r2,124(sp)
   11e94:	d9403417 	ldw	r5,208(sp)
   11e98:	20c7883a 	add	r3,r4,r3
   11e9c:	10800044 	addi	r2,r2,1
   11ea0:	41000115 	stw	r4,4(r8)
   11ea4:	41400015 	stw	r5,0(r8)
   11ea8:	d8c02015 	stw	r3,128(sp)
   11eac:	d8801f15 	stw	r2,124(sp)
   11eb0:	010001c4 	movi	r4,7
   11eb4:	20818016 	blt	r4,r2,124b8 <___svfprintf_internal_r+0x1ed8>
   11eb8:	42000204 	addi	r8,r8,8
   11ebc:	0463c83a 	sub	r17,zero,r17
   11ec0:	0440cb0e 	bge	zero,r17,121f0 <___svfprintf_internal_r+0x1c10>
   11ec4:	05800404 	movi	r22,16
   11ec8:	b440e80e 	bge	r22,r17,1226c <___svfprintf_internal_r+0x1c8c>
   11ecc:	014000f4 	movhi	r5,3
   11ed0:	296e4784 	addi	r5,r5,-18146
   11ed4:	d9402c15 	stw	r5,176(sp)
   11ed8:	070001c4 	movi	fp,7
   11edc:	dd002d17 	ldw	r20,180(sp)
   11ee0:	00000306 	br	11ef0 <___svfprintf_internal_r+0x1910>
   11ee4:	42000204 	addi	r8,r8,8
   11ee8:	8c7ffc04 	addi	r17,r17,-16
   11eec:	b440e20e 	bge	r22,r17,12278 <___svfprintf_internal_r+0x1c98>
   11ef0:	18c00404 	addi	r3,r3,16
   11ef4:	10800044 	addi	r2,r2,1
   11ef8:	45400015 	stw	r21,0(r8)
   11efc:	45800115 	stw	r22,4(r8)
   11f00:	d8c02015 	stw	r3,128(sp)
   11f04:	d8801f15 	stw	r2,124(sp)
   11f08:	e0bff60e 	bge	fp,r2,11ee4 <__alt_data_end+0xfc011ee4>
   11f0c:	d9801e04 	addi	r6,sp,120
   11f10:	a00b883a 	mov	r5,r20
   11f14:	9809883a 	mov	r4,r19
   11f18:	00195440 	call	19544 <__ssprint_r>
   11f1c:	103a971e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11f20:	d8c02017 	ldw	r3,128(sp)
   11f24:	d8801f17 	ldw	r2,124(sp)
   11f28:	da000404 	addi	r8,sp,16
   11f2c:	003fee06 	br	11ee8 <__alt_data_end+0xfc011ee8>
   11f30:	d9002e17 	ldw	r4,184(sp)
   11f34:	d9402a17 	ldw	r5,168(sp)
   11f38:	002d883a 	mov	r22,zero
   11f3c:	20800104 	addi	r2,r4,4
   11f40:	25000017 	ldw	r20,0(r4)
   11f44:	283e7d0e 	bge	r5,zero,1193c <__alt_data_end+0xfc01193c>
   11f48:	003eda06 	br	11ab4 <__alt_data_end+0xfc011ab4>
   11f4c:	d9002e17 	ldw	r4,184(sp)
   11f50:	d9402a17 	ldw	r5,168(sp)
   11f54:	002d883a 	mov	r22,zero
   11f58:	20800104 	addi	r2,r4,4
   11f5c:	25000017 	ldw	r20,0(r4)
   11f60:	283e2d0e 	bge	r5,zero,11818 <__alt_data_end+0xfc011818>
   11f64:	003f6b06 	br	11d14 <__alt_data_end+0xfc011d14>
   11f68:	d8c02e15 	stw	r3,184(sp)
   11f6c:	0039883a 	mov	fp,zero
   11f70:	003ed206 	br	11abc <__alt_data_end+0xfc011abc>
   11f74:	bc400043 	ldbu	r17,1(r23)
   11f78:	84000814 	ori	r16,r16,32
   11f7c:	bdc00044 	addi	r23,r23,1
   11f80:	8c403fcc 	andi	r17,r17,255
   11f84:	8c40201c 	xori	r17,r17,128
   11f88:	8c7fe004 	addi	r17,r17,-128
   11f8c:	0039e906 	br	10734 <__alt_data_end+0xfc010734>
   11f90:	d9402d17 	ldw	r5,180(sp)
   11f94:	d9801e04 	addi	r6,sp,120
   11f98:	9809883a 	mov	r4,r19
   11f9c:	00195440 	call	19544 <__ssprint_r>
   11fa0:	103a761e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   11fa4:	d8c02017 	ldw	r3,128(sp)
   11fa8:	da000404 	addi	r8,sp,16
   11fac:	003d4a06 	br	114d8 <__alt_data_end+0xfc0114d8>
   11fb0:	d9002a17 	ldw	r4,168(sp)
   11fb4:	05bff7c4 	movi	r22,-33
   11fb8:	00bfffc4 	movi	r2,-1
   11fbc:	8dac703a 	and	r22,r17,r22
   11fc0:	20806a26 	beq	r4,r2,1216c <___svfprintf_internal_r+0x1b8c>
   11fc4:	008011c4 	movi	r2,71
   11fc8:	b0813726 	beq	r22,r2,124a8 <___svfprintf_internal_r+0x1ec8>
   11fcc:	d9003717 	ldw	r4,220(sp)
   11fd0:	90c04014 	ori	r3,r18,256
   11fd4:	d8c02c15 	stw	r3,176(sp)
   11fd8:	20015d16 	blt	r4,zero,12550 <___svfprintf_internal_r+0x1f70>
   11fdc:	dd003717 	ldw	r20,220(sp)
   11fe0:	d8002905 	stb	zero,164(sp)
   11fe4:	00801984 	movi	r2,102
   11fe8:	88814026 	beq	r17,r2,124ec <___svfprintf_internal_r+0x1f0c>
   11fec:	00801184 	movi	r2,70
   11ff0:	88817126 	beq	r17,r2,125b8 <___svfprintf_internal_r+0x1fd8>
   11ff4:	00801144 	movi	r2,69
   11ff8:	b0816226 	beq	r22,r2,12584 <___svfprintf_internal_r+0x1fa4>
   11ffc:	d8c02a17 	ldw	r3,168(sp)
   12000:	d8802104 	addi	r2,sp,132
   12004:	d8800315 	stw	r2,12(sp)
   12008:	d9403617 	ldw	r5,216(sp)
   1200c:	d8802504 	addi	r2,sp,148
   12010:	d8800215 	stw	r2,8(sp)
   12014:	d8802604 	addi	r2,sp,152
   12018:	d8c00015 	stw	r3,0(sp)
   1201c:	d8800115 	stw	r2,4(sp)
   12020:	01c00084 	movi	r7,2
   12024:	a00d883a 	mov	r6,r20
   12028:	9809883a 	mov	r4,r19
   1202c:	d8c03d15 	stw	r3,244(sp)
   12030:	da003e15 	stw	r8,248(sp)
   12034:	0014fd40 	call	14fd4 <_dtoa_r>
   12038:	1021883a 	mov	r16,r2
   1203c:	008019c4 	movi	r2,103
   12040:	d8c03d17 	ldw	r3,244(sp)
   12044:	da003e17 	ldw	r8,248(sp)
   12048:	8880e726 	beq	r17,r2,123e8 <___svfprintf_internal_r+0x1e08>
   1204c:	008011c4 	movi	r2,71
   12050:	8880d426 	beq	r17,r2,123a4 <___svfprintf_internal_r+0x1dc4>
   12054:	80f9883a 	add	fp,r16,r3
   12058:	d9003617 	ldw	r4,216(sp)
   1205c:	000d883a 	mov	r6,zero
   12060:	000f883a 	mov	r7,zero
   12064:	a00b883a 	mov	r5,r20
   12068:	da003e15 	stw	r8,248(sp)
   1206c:	001e9340 	call	1e934 <__eqdf2>
   12070:	da003e17 	ldw	r8,248(sp)
   12074:	1000e426 	beq	r2,zero,12408 <___svfprintf_internal_r+0x1e28>
   12078:	d8802117 	ldw	r2,132(sp)
   1207c:	1700062e 	bgeu	r2,fp,12098 <___svfprintf_internal_r+0x1ab8>
   12080:	01000c04 	movi	r4,48
   12084:	10c00044 	addi	r3,r2,1
   12088:	d8c02115 	stw	r3,132(sp)
   1208c:	11000005 	stb	r4,0(r2)
   12090:	d8802117 	ldw	r2,132(sp)
   12094:	173ffb36 	bltu	r2,fp,12084 <__alt_data_end+0xfc012084>
   12098:	1405c83a 	sub	r2,r2,r16
   1209c:	d8803315 	stw	r2,204(sp)
   120a0:	008011c4 	movi	r2,71
   120a4:	b080c526 	beq	r22,r2,123bc <___svfprintf_internal_r+0x1ddc>
   120a8:	00801944 	movi	r2,101
   120ac:	1441d80e 	bge	r2,r17,12810 <___svfprintf_internal_r+0x2230>
   120b0:	d8c02617 	ldw	r3,152(sp)
   120b4:	00801984 	movi	r2,102
   120b8:	d8c03215 	stw	r3,200(sp)
   120bc:	88813426 	beq	r17,r2,12590 <___svfprintf_internal_r+0x1fb0>
   120c0:	d8c03217 	ldw	r3,200(sp)
   120c4:	d9003317 	ldw	r4,204(sp)
   120c8:	19012516 	blt	r3,r4,12560 <___svfprintf_internal_r+0x1f80>
   120cc:	9480004c 	andi	r18,r18,1
   120d0:	9001841e 	bne	r18,zero,126e4 <___svfprintf_internal_r+0x2104>
   120d4:	1805883a 	mov	r2,r3
   120d8:	1801cb16 	blt	r3,zero,12808 <___svfprintf_internal_r+0x2228>
   120dc:	d8c03217 	ldw	r3,200(sp)
   120e0:	044019c4 	movi	r17,103
   120e4:	d8c02b15 	stw	r3,172(sp)
   120e8:	df002907 	ldb	fp,164(sp)
   120ec:	e000a61e 	bne	fp,zero,12388 <___svfprintf_internal_r+0x1da8>
   120f0:	df002783 	ldbu	fp,158(sp)
   120f4:	d8802915 	stw	r2,164(sp)
   120f8:	dc802c17 	ldw	r18,176(sp)
   120fc:	d8002a15 	stw	zero,168(sp)
   12100:	003af506 	br	10cd8 <__alt_data_end+0xfc010cd8>
   12104:	040000f4 	movhi	r16,3
   12108:	842e3704 	addi	r16,r16,-18212
   1210c:	003a7e06 	br	10b08 <__alt_data_end+0xfc010b08>
   12110:	d9003917 	ldw	r4,228(sp)
   12114:	04001004 	movi	r16,64
   12118:	800b883a 	mov	r5,r16
   1211c:	000f4740 	call	f474 <_malloc_r>
   12120:	d9002d17 	ldw	r4,180(sp)
   12124:	20800015 	stw	r2,0(r4)
   12128:	20800415 	stw	r2,16(r4)
   1212c:	1001d026 	beq	r2,zero,12870 <___svfprintf_internal_r+0x2290>
   12130:	d8802d17 	ldw	r2,180(sp)
   12134:	14000515 	stw	r16,20(r2)
   12138:	00394406 	br	1064c <__alt_data_end+0xfc01064c>
   1213c:	040000f4 	movhi	r16,3
   12140:	842e3904 	addi	r16,r16,-18204
   12144:	003ee106 	br	11ccc <__alt_data_end+0xfc011ccc>
   12148:	d9402d17 	ldw	r5,180(sp)
   1214c:	d9801e04 	addi	r6,sp,120
   12150:	9809883a 	mov	r4,r19
   12154:	00195440 	call	19544 <__ssprint_r>
   12158:	103a081e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   1215c:	dc402617 	ldw	r17,152(sp)
   12160:	d8c02017 	ldw	r3,128(sp)
   12164:	da000404 	addi	r8,sp,16
   12168:	003f4306 	br	11e78 <__alt_data_end+0xfc011e78>
   1216c:	01400184 	movi	r5,6
   12170:	d9402a15 	stw	r5,168(sp)
   12174:	003f9506 	br	11fcc <__alt_data_end+0xfc011fcc>
   12178:	d8c02e17 	ldw	r3,184(sp)
   1217c:	1d000017 	ldw	r20,0(r3)
   12180:	18c00104 	addi	r3,r3,4
   12184:	d8c02e15 	stw	r3,184(sp)
   12188:	a02dd7fa 	srai	r22,r20,31
   1218c:	b005883a 	mov	r2,r22
   12190:	003a7606 	br	10b6c <__alt_data_end+0xfc010b6c>
   12194:	d9002e17 	ldw	r4,184(sp)
   12198:	002d883a 	mov	r22,zero
   1219c:	25000017 	ldw	r20,0(r4)
   121a0:	21000104 	addi	r4,r4,4
   121a4:	d9002e15 	stw	r4,184(sp)
   121a8:	003bdd06 	br	11120 <__alt_data_end+0xfc011120>
   121ac:	9480100c 	andi	r18,r18,64
   121b0:	90006e26 	beq	r18,zero,1236c <___svfprintf_internal_r+0x1d8c>
   121b4:	d9402e17 	ldw	r5,184(sp)
   121b8:	d8c02f17 	ldw	r3,188(sp)
   121bc:	28800017 	ldw	r2,0(r5)
   121c0:	29400104 	addi	r5,r5,4
   121c4:	d9402e15 	stw	r5,184(sp)
   121c8:	10c0000d 	sth	r3,0(r2)
   121cc:	00392f06 	br	1068c <__alt_data_end+0xfc01068c>
   121d0:	d9402d17 	ldw	r5,180(sp)
   121d4:	d9801e04 	addi	r6,sp,120
   121d8:	9809883a 	mov	r4,r19
   121dc:	00195440 	call	19544 <__ssprint_r>
   121e0:	1039e61e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   121e4:	d8c02017 	ldw	r3,128(sp)
   121e8:	d8801f17 	ldw	r2,124(sp)
   121ec:	da000404 	addi	r8,sp,16
   121f0:	d9403317 	ldw	r5,204(sp)
   121f4:	10800044 	addi	r2,r2,1
   121f8:	44000015 	stw	r16,0(r8)
   121fc:	28c7883a 	add	r3,r5,r3
   12200:	003b5506 	br	10f58 <__alt_data_end+0xfc010f58>
   12204:	8009883a 	mov	r4,r16
   12208:	df003e15 	stw	fp,248(sp)
   1220c:	00105480 	call	10548 <strlen>
   12210:	d8802b15 	stw	r2,172(sp)
   12214:	da003e17 	ldw	r8,248(sp)
   12218:	103c160e 	bge	r2,zero,11274 <__alt_data_end+0xfc011274>
   1221c:	0005883a 	mov	r2,zero
   12220:	003c1406 	br	11274 <__alt_data_end+0xfc011274>
   12224:	00bfffc4 	movi	r2,-1
   12228:	0039d906 	br	10990 <__alt_data_end+0xfc010990>
   1222c:	010000f4 	movhi	r4,3
   12230:	212e4b84 	addi	r4,r4,-18130
   12234:	d9003515 	stw	r4,212(sp)
   12238:	003ae406 	br	10dcc <__alt_data_end+0xfc010dcc>
   1223c:	013fffc4 	movi	r4,-1
   12240:	0039fa06 	br	10a2c <__alt_data_end+0xfc010a2c>
   12244:	d9402d17 	ldw	r5,180(sp)
   12248:	d9801e04 	addi	r6,sp,120
   1224c:	9809883a 	mov	r4,r19
   12250:	00195440 	call	19544 <__ssprint_r>
   12254:	1039c91e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   12258:	d8c02017 	ldw	r3,128(sp)
   1225c:	da000404 	addi	r8,sp,16
   12260:	003d8406 	br	11874 <__alt_data_end+0xfc011874>
   12264:	0023883a 	mov	r17,zero
   12268:	003d8306 	br	11878 <__alt_data_end+0xfc011878>
   1226c:	010000f4 	movhi	r4,3
   12270:	212e4784 	addi	r4,r4,-18146
   12274:	d9002c15 	stw	r4,176(sp)
   12278:	d9002c17 	ldw	r4,176(sp)
   1227c:	1c47883a 	add	r3,r3,r17
   12280:	10800044 	addi	r2,r2,1
   12284:	41000015 	stw	r4,0(r8)
   12288:	44400115 	stw	r17,4(r8)
   1228c:	d8c02015 	stw	r3,128(sp)
   12290:	d8801f15 	stw	r2,124(sp)
   12294:	010001c4 	movi	r4,7
   12298:	20bfcd16 	blt	r4,r2,121d0 <__alt_data_end+0xfc0121d0>
   1229c:	42000204 	addi	r8,r8,8
   122a0:	003fd306 	br	121f0 <__alt_data_end+0xfc0121f0>
   122a4:	d9402d17 	ldw	r5,180(sp)
   122a8:	d9801e04 	addi	r6,sp,120
   122ac:	9809883a 	mov	r4,r19
   122b0:	00195440 	call	19544 <__ssprint_r>
   122b4:	1039b11e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   122b8:	d8802617 	ldw	r2,152(sp)
   122bc:	d8c02017 	ldw	r3,128(sp)
   122c0:	da000404 	addi	r8,sp,16
   122c4:	003e1c06 	br	11b38 <__alt_data_end+0xfc011b38>
   122c8:	d8802a17 	ldw	r2,168(sp)
   122cc:	00c00184 	movi	r3,6
   122d0:	1880012e 	bgeu	r3,r2,122d8 <___svfprintf_internal_r+0x1cf8>
   122d4:	1805883a 	mov	r2,r3
   122d8:	d8802b15 	stw	r2,172(sp)
   122dc:	1000f316 	blt	r2,zero,126ac <___svfprintf_internal_r+0x20cc>
   122e0:	040000f4 	movhi	r16,3
   122e4:	d8802915 	stw	r2,164(sp)
   122e8:	dd002e15 	stw	r20,184(sp)
   122ec:	d8002a15 	stw	zero,168(sp)
   122f0:	d8003215 	stw	zero,200(sp)
   122f4:	842e4504 	addi	r16,r16,-18156
   122f8:	0039883a 	mov	fp,zero
   122fc:	003a7d06 	br	10cf4 <__alt_data_end+0xfc010cf4>
   12300:	010000f4 	movhi	r4,3
   12304:	212e4b84 	addi	r4,r4,-18130
   12308:	d9003515 	stw	r4,212(sp)
   1230c:	003b3d06 	br	11004 <__alt_data_end+0xfc011004>
   12310:	d9402d17 	ldw	r5,180(sp)
   12314:	d9801e04 	addi	r6,sp,120
   12318:	9809883a 	mov	r4,r19
   1231c:	00195440 	call	19544 <__ssprint_r>
   12320:	1039961e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   12324:	d8802617 	ldw	r2,152(sp)
   12328:	d9403317 	ldw	r5,204(sp)
   1232c:	d8c02017 	ldw	r3,128(sp)
   12330:	da000404 	addi	r8,sp,16
   12334:	2885c83a 	sub	r2,r5,r2
   12338:	003e1006 	br	11b7c <__alt_data_end+0xfc011b7c>
   1233c:	00800044 	movi	r2,1
   12340:	10803fcc 	andi	r2,r2,255
   12344:	00c00044 	movi	r3,1
   12348:	10fa1026 	beq	r2,r3,10b8c <__alt_data_end+0xfc010b8c>
   1234c:	00c00084 	movi	r3,2
   12350:	10fb8226 	beq	r2,r3,1115c <__alt_data_end+0xfc01115c>
   12354:	003a4206 	br	10c60 <__alt_data_end+0xfc010c60>
   12358:	0021883a 	mov	r16,zero
   1235c:	003e0806 	br	11b80 <__alt_data_end+0xfc011b80>
   12360:	07000b44 	movi	fp,45
   12364:	df002785 	stb	fp,158(sp)
   12368:	0039e306 	br	10af8 <__alt_data_end+0xfc010af8>
   1236c:	d9002e17 	ldw	r4,184(sp)
   12370:	d9402f17 	ldw	r5,188(sp)
   12374:	20800017 	ldw	r2,0(r4)
   12378:	21000104 	addi	r4,r4,4
   1237c:	d9002e15 	stw	r4,184(sp)
   12380:	11400015 	stw	r5,0(r2)
   12384:	0038c106 	br	1068c <__alt_data_end+0xfc01068c>
   12388:	00c00b44 	movi	r3,45
   1238c:	d8c02785 	stb	r3,158(sp)
   12390:	d8802915 	stw	r2,164(sp)
   12394:	dc802c17 	ldw	r18,176(sp)
   12398:	d8002a15 	stw	zero,168(sp)
   1239c:	07000b44 	movi	fp,45
   123a0:	003a5106 	br	10ce8 <__alt_data_end+0xfc010ce8>
   123a4:	9080004c 	andi	r2,r18,1
   123a8:	1000941e 	bne	r2,zero,125fc <___svfprintf_internal_r+0x201c>
   123ac:	d8802117 	ldw	r2,132(sp)
   123b0:	1405c83a 	sub	r2,r2,r16
   123b4:	d8803315 	stw	r2,204(sp)
   123b8:	b441151e 	bne	r22,r17,12810 <___svfprintf_internal_r+0x2230>
   123bc:	dd802617 	ldw	r22,152(sp)
   123c0:	00bfff44 	movi	r2,-3
   123c4:	b0801a16 	blt	r22,r2,12430 <___svfprintf_internal_r+0x1e50>
   123c8:	d9402a17 	ldw	r5,168(sp)
   123cc:	2d801816 	blt	r5,r22,12430 <___svfprintf_internal_r+0x1e50>
   123d0:	dd803215 	stw	r22,200(sp)
   123d4:	003f3a06 	br	120c0 <__alt_data_end+0xfc0120c0>
   123d8:	1025883a 	mov	r18,r2
   123dc:	0039883a 	mov	fp,zero
   123e0:	00800084 	movi	r2,2
   123e4:	003fd606 	br	12340 <__alt_data_end+0xfc012340>
   123e8:	9080004c 	andi	r2,r18,1
   123ec:	103f191e 	bne	r2,zero,12054 <__alt_data_end+0xfc012054>
   123f0:	d8802117 	ldw	r2,132(sp)
   123f4:	003f2806 	br	12098 <__alt_data_end+0xfc012098>
   123f8:	010000f4 	movhi	r4,3
   123fc:	212e4784 	addi	r4,r4,-18146
   12400:	d9002c15 	stw	r4,176(sp)
   12404:	003c7c06 	br	115f8 <__alt_data_end+0xfc0115f8>
   12408:	e005883a 	mov	r2,fp
   1240c:	003f2206 	br	12098 <__alt_data_end+0xfc012098>
   12410:	d9002a17 	ldw	r4,168(sp)
   12414:	df002783 	ldbu	fp,158(sp)
   12418:	dd002e15 	stw	r20,184(sp)
   1241c:	d9002915 	stw	r4,164(sp)
   12420:	d9002b15 	stw	r4,172(sp)
   12424:	d8002a15 	stw	zero,168(sp)
   12428:	d8003215 	stw	zero,200(sp)
   1242c:	003a2a06 	br	10cd8 <__alt_data_end+0xfc010cd8>
   12430:	8c7fff84 	addi	r17,r17,-2
   12434:	b5bfffc4 	addi	r22,r22,-1
   12438:	dd802615 	stw	r22,152(sp)
   1243c:	dc4022c5 	stb	r17,139(sp)
   12440:	b000c316 	blt	r22,zero,12750 <___svfprintf_internal_r+0x2170>
   12444:	00800ac4 	movi	r2,43
   12448:	d8802305 	stb	r2,140(sp)
   1244c:	00800244 	movi	r2,9
   12450:	15806e16 	blt	r2,r22,1260c <___svfprintf_internal_r+0x202c>
   12454:	00800c04 	movi	r2,48
   12458:	b5800c04 	addi	r22,r22,48
   1245c:	d8802345 	stb	r2,141(sp)
   12460:	dd802385 	stb	r22,142(sp)
   12464:	d88023c4 	addi	r2,sp,143
   12468:	df0022c4 	addi	fp,sp,139
   1246c:	d8c03317 	ldw	r3,204(sp)
   12470:	1739c83a 	sub	fp,r2,fp
   12474:	d9003317 	ldw	r4,204(sp)
   12478:	e0c7883a 	add	r3,fp,r3
   1247c:	df003b15 	stw	fp,236(sp)
   12480:	d8c02b15 	stw	r3,172(sp)
   12484:	00800044 	movi	r2,1
   12488:	1100b70e 	bge	r2,r4,12768 <___svfprintf_internal_r+0x2188>
   1248c:	d8c02b17 	ldw	r3,172(sp)
   12490:	18c00044 	addi	r3,r3,1
   12494:	d8c02b15 	stw	r3,172(sp)
   12498:	1805883a 	mov	r2,r3
   1249c:	1800b016 	blt	r3,zero,12760 <___svfprintf_internal_r+0x2180>
   124a0:	d8003215 	stw	zero,200(sp)
   124a4:	003f1006 	br	120e8 <__alt_data_end+0xfc0120e8>
   124a8:	d8802a17 	ldw	r2,168(sp)
   124ac:	103ec71e 	bne	r2,zero,11fcc <__alt_data_end+0xfc011fcc>
   124b0:	dc002a15 	stw	r16,168(sp)
   124b4:	003ec506 	br	11fcc <__alt_data_end+0xfc011fcc>
   124b8:	d9402d17 	ldw	r5,180(sp)
   124bc:	d9801e04 	addi	r6,sp,120
   124c0:	9809883a 	mov	r4,r19
   124c4:	00195440 	call	19544 <__ssprint_r>
   124c8:	10392c1e 	bne	r2,zero,1097c <__alt_data_end+0xfc01097c>
   124cc:	dc402617 	ldw	r17,152(sp)
   124d0:	d8c02017 	ldw	r3,128(sp)
   124d4:	d8801f17 	ldw	r2,124(sp)
   124d8:	da000404 	addi	r8,sp,16
   124dc:	003e7706 	br	11ebc <__alt_data_end+0xfc011ebc>
   124e0:	182f883a 	mov	r23,r3
   124e4:	d8002a15 	stw	zero,168(sp)
   124e8:	00389306 	br	10738 <__alt_data_end+0xfc010738>
   124ec:	d8c02a17 	ldw	r3,168(sp)
   124f0:	d8802104 	addi	r2,sp,132
   124f4:	d8800315 	stw	r2,12(sp)
   124f8:	d9403617 	ldw	r5,216(sp)
   124fc:	d8802504 	addi	r2,sp,148
   12500:	d8800215 	stw	r2,8(sp)
   12504:	d8802604 	addi	r2,sp,152
   12508:	d8c00015 	stw	r3,0(sp)
   1250c:	9809883a 	mov	r4,r19
   12510:	d8800115 	stw	r2,4(sp)
   12514:	01c000c4 	movi	r7,3
   12518:	a00d883a 	mov	r6,r20
   1251c:	da003e15 	stw	r8,248(sp)
   12520:	0014fd40 	call	14fd4 <_dtoa_r>
   12524:	d9002a17 	ldw	r4,168(sp)
   12528:	da003e17 	ldw	r8,248(sp)
   1252c:	1021883a 	mov	r16,r2
   12530:	1139883a 	add	fp,r2,r4
   12534:	2007883a 	mov	r3,r4
   12538:	81000007 	ldb	r4,0(r16)
   1253c:	00800c04 	movi	r2,48
   12540:	20806f26 	beq	r4,r2,12700 <___svfprintf_internal_r+0x2120>
   12544:	d8c02617 	ldw	r3,152(sp)
   12548:	e0f9883a 	add	fp,fp,r3
   1254c:	003ec206 	br	12058 <__alt_data_end+0xfc012058>
   12550:	00c00b44 	movi	r3,45
   12554:	2520003c 	xorhi	r20,r4,32768
   12558:	d8c02905 	stb	r3,164(sp)
   1255c:	003ea106 	br	11fe4 <__alt_data_end+0xfc011fe4>
   12560:	d8c03217 	ldw	r3,200(sp)
   12564:	00c0890e 	bge	zero,r3,1278c <___svfprintf_internal_r+0x21ac>
   12568:	00800044 	movi	r2,1
   1256c:	d9003317 	ldw	r4,204(sp)
   12570:	1105883a 	add	r2,r2,r4
   12574:	d8802b15 	stw	r2,172(sp)
   12578:	10005f16 	blt	r2,zero,126f8 <___svfprintf_internal_r+0x2118>
   1257c:	044019c4 	movi	r17,103
   12580:	003ed906 	br	120e8 <__alt_data_end+0xfc0120e8>
   12584:	d9002a17 	ldw	r4,168(sp)
   12588:	20c00044 	addi	r3,r4,1
   1258c:	003e9c06 	br	12000 <__alt_data_end+0xfc012000>
   12590:	d9002a17 	ldw	r4,168(sp)
   12594:	00c0680e 	bge	zero,r3,12738 <___svfprintf_internal_r+0x2158>
   12598:	2000461e 	bne	r4,zero,126b4 <___svfprintf_internal_r+0x20d4>
   1259c:	9480004c 	andi	r18,r18,1
   125a0:	9000441e 	bne	r18,zero,126b4 <___svfprintf_internal_r+0x20d4>
   125a4:	1805883a 	mov	r2,r3
   125a8:	1800a116 	blt	r3,zero,12830 <___svfprintf_internal_r+0x2250>
   125ac:	d8c03217 	ldw	r3,200(sp)
   125b0:	d8c02b15 	stw	r3,172(sp)
   125b4:	003ecc06 	br	120e8 <__alt_data_end+0xfc0120e8>
   125b8:	d9402a17 	ldw	r5,168(sp)
   125bc:	d8802104 	addi	r2,sp,132
   125c0:	d8800315 	stw	r2,12(sp)
   125c4:	d9400015 	stw	r5,0(sp)
   125c8:	d8802504 	addi	r2,sp,148
   125cc:	d9403617 	ldw	r5,216(sp)
   125d0:	d8800215 	stw	r2,8(sp)
   125d4:	d8802604 	addi	r2,sp,152
   125d8:	d8800115 	stw	r2,4(sp)
   125dc:	01c000c4 	movi	r7,3
   125e0:	a00d883a 	mov	r6,r20
   125e4:	9809883a 	mov	r4,r19
   125e8:	da003e15 	stw	r8,248(sp)
   125ec:	0014fd40 	call	14fd4 <_dtoa_r>
   125f0:	d8c02a17 	ldw	r3,168(sp)
   125f4:	da003e17 	ldw	r8,248(sp)
   125f8:	1021883a 	mov	r16,r2
   125fc:	00801184 	movi	r2,70
   12600:	80f9883a 	add	fp,r16,r3
   12604:	88bfcc26 	beq	r17,r2,12538 <__alt_data_end+0xfc012538>
   12608:	003e9306 	br	12058 <__alt_data_end+0xfc012058>
   1260c:	df0022c4 	addi	fp,sp,139
   12610:	dc002a15 	stw	r16,168(sp)
   12614:	9829883a 	mov	r20,r19
   12618:	e021883a 	mov	r16,fp
   1261c:	4027883a 	mov	r19,r8
   12620:	b009883a 	mov	r4,r22
   12624:	01400284 	movi	r5,10
   12628:	000d7b00 	call	d7b0 <__modsi3>
   1262c:	10800c04 	addi	r2,r2,48
   12630:	843fffc4 	addi	r16,r16,-1
   12634:	b009883a 	mov	r4,r22
   12638:	01400284 	movi	r5,10
   1263c:	80800005 	stb	r2,0(r16)
   12640:	000d72c0 	call	d72c <__divsi3>
   12644:	102d883a 	mov	r22,r2
   12648:	00800244 	movi	r2,9
   1264c:	15bff416 	blt	r2,r22,12620 <__alt_data_end+0xfc012620>
   12650:	9811883a 	mov	r8,r19
   12654:	b0800c04 	addi	r2,r22,48
   12658:	a027883a 	mov	r19,r20
   1265c:	8029883a 	mov	r20,r16
   12660:	a17fffc4 	addi	r5,r20,-1
   12664:	a0bfffc5 	stb	r2,-1(r20)
   12668:	dc002a17 	ldw	r16,168(sp)
   1266c:	2f00782e 	bgeu	r5,fp,12850 <___svfprintf_internal_r+0x2270>
   12670:	d9c02384 	addi	r7,sp,142
   12674:	3d0fc83a 	sub	r7,r7,r20
   12678:	d9002344 	addi	r4,sp,141
   1267c:	e1cf883a 	add	r7,fp,r7
   12680:	00000106 	br	12688 <___svfprintf_internal_r+0x20a8>
   12684:	28800003 	ldbu	r2,0(r5)
   12688:	20800005 	stb	r2,0(r4)
   1268c:	21000044 	addi	r4,r4,1
   12690:	29400044 	addi	r5,r5,1
   12694:	21fffb1e 	bne	r4,r7,12684 <__alt_data_end+0xfc012684>
   12698:	d8802304 	addi	r2,sp,140
   1269c:	1505c83a 	sub	r2,r2,r20
   126a0:	d8c02344 	addi	r3,sp,141
   126a4:	1885883a 	add	r2,r3,r2
   126a8:	003f7006 	br	1246c <__alt_data_end+0xfc01246c>
   126ac:	0005883a 	mov	r2,zero
   126b0:	003f0b06 	br	122e0 <__alt_data_end+0xfc0122e0>
   126b4:	d9002a17 	ldw	r4,168(sp)
   126b8:	d8c03217 	ldw	r3,200(sp)
   126bc:	20800044 	addi	r2,r4,1
   126c0:	1885883a 	add	r2,r3,r2
   126c4:	d8802b15 	stw	r2,172(sp)
   126c8:	103e870e 	bge	r2,zero,120e8 <__alt_data_end+0xfc0120e8>
   126cc:	0005883a 	mov	r2,zero
   126d0:	003e8506 	br	120e8 <__alt_data_end+0xfc0120e8>
   126d4:	010000f4 	movhi	r4,3
   126d8:	212e4784 	addi	r4,r4,-18146
   126dc:	d9002c15 	stw	r4,176(sp)
   126e0:	003cc506 	br	119f8 <__alt_data_end+0xfc0119f8>
   126e4:	d8c03217 	ldw	r3,200(sp)
   126e8:	18c00044 	addi	r3,r3,1
   126ec:	d8c02b15 	stw	r3,172(sp)
   126f0:	1805883a 	mov	r2,r3
   126f4:	183fa10e 	bge	r3,zero,1257c <__alt_data_end+0xfc01257c>
   126f8:	0005883a 	mov	r2,zero
   126fc:	003f9f06 	br	1257c <__alt_data_end+0xfc01257c>
   12700:	d9003617 	ldw	r4,216(sp)
   12704:	000d883a 	mov	r6,zero
   12708:	000f883a 	mov	r7,zero
   1270c:	a00b883a 	mov	r5,r20
   12710:	d8c03d15 	stw	r3,244(sp)
   12714:	da003e15 	stw	r8,248(sp)
   12718:	001e9340 	call	1e934 <__eqdf2>
   1271c:	d8c03d17 	ldw	r3,244(sp)
   12720:	da003e17 	ldw	r8,248(sp)
   12724:	103f8726 	beq	r2,zero,12544 <__alt_data_end+0xfc012544>
   12728:	00800044 	movi	r2,1
   1272c:	10c7c83a 	sub	r3,r2,r3
   12730:	d8c02615 	stw	r3,152(sp)
   12734:	003f8406 	br	12548 <__alt_data_end+0xfc012548>
   12738:	20000e1e 	bne	r4,zero,12774 <___svfprintf_internal_r+0x2194>
   1273c:	9480004c 	andi	r18,r18,1
   12740:	90000c1e 	bne	r18,zero,12774 <___svfprintf_internal_r+0x2194>
   12744:	00800044 	movi	r2,1
   12748:	d8802b15 	stw	r2,172(sp)
   1274c:	003e6606 	br	120e8 <__alt_data_end+0xfc0120e8>
   12750:	00800b44 	movi	r2,45
   12754:	05adc83a 	sub	r22,zero,r22
   12758:	d8802305 	stb	r2,140(sp)
   1275c:	003f3b06 	br	1244c <__alt_data_end+0xfc01244c>
   12760:	0005883a 	mov	r2,zero
   12764:	003f4e06 	br	124a0 <__alt_data_end+0xfc0124a0>
   12768:	90a4703a 	and	r18,r18,r2
   1276c:	903f4a26 	beq	r18,zero,12498 <__alt_data_end+0xfc012498>
   12770:	003f4606 	br	1248c <__alt_data_end+0xfc01248c>
   12774:	d8c02a17 	ldw	r3,168(sp)
   12778:	18c00084 	addi	r3,r3,2
   1277c:	d8c02b15 	stw	r3,172(sp)
   12780:	1805883a 	mov	r2,r3
   12784:	183e580e 	bge	r3,zero,120e8 <__alt_data_end+0xfc0120e8>
   12788:	003fd006 	br	126cc <__alt_data_end+0xfc0126cc>
   1278c:	00800084 	movi	r2,2
   12790:	10c5c83a 	sub	r2,r2,r3
   12794:	003f7506 	br	1256c <__alt_data_end+0xfc01256c>
   12798:	d9402e17 	ldw	r5,184(sp)
   1279c:	d9002e17 	ldw	r4,184(sp)
   127a0:	bc400043 	ldbu	r17,1(r23)
   127a4:	29400017 	ldw	r5,0(r5)
   127a8:	20800104 	addi	r2,r4,4
   127ac:	d8802e15 	stw	r2,184(sp)
   127b0:	d9402a15 	stw	r5,168(sp)
   127b4:	182f883a 	mov	r23,r3
   127b8:	283df10e 	bge	r5,zero,11f80 <__alt_data_end+0xfc011f80>
   127bc:	8c403fcc 	andi	r17,r17,255
   127c0:	017fffc4 	movi	r5,-1
   127c4:	8c40201c 	xori	r17,r17,128
   127c8:	d9402a15 	stw	r5,168(sp)
   127cc:	8c7fe004 	addi	r17,r17,-128
   127d0:	0037d806 	br	10734 <__alt_data_end+0xfc010734>
   127d4:	9080004c 	andi	r2,r18,1
   127d8:	0039883a 	mov	fp,zero
   127dc:	10000726 	beq	r2,zero,127fc <___svfprintf_internal_r+0x221c>
   127e0:	d8c02817 	ldw	r3,160(sp)
   127e4:	dc001dc4 	addi	r16,sp,119
   127e8:	00800c04 	movi	r2,48
   127ec:	1c07c83a 	sub	r3,r3,r16
   127f0:	d8801dc5 	stb	r2,119(sp)
   127f4:	d8c02b15 	stw	r3,172(sp)
   127f8:	00393106 	br	10cc0 <__alt_data_end+0xfc010cc0>
   127fc:	d8002b15 	stw	zero,172(sp)
   12800:	dc001e04 	addi	r16,sp,120
   12804:	00392e06 	br	10cc0 <__alt_data_end+0xfc010cc0>
   12808:	0005883a 	mov	r2,zero
   1280c:	003e3306 	br	120dc <__alt_data_end+0xfc0120dc>
   12810:	dd802617 	ldw	r22,152(sp)
   12814:	003f0706 	br	12434 <__alt_data_end+0xfc012434>
   12818:	d8c02b03 	ldbu	r3,172(sp)
   1281c:	d8c02785 	stb	r3,158(sp)
   12820:	003a3506 	br	110f8 <__alt_data_end+0xfc0110f8>
   12824:	d8c02b03 	ldbu	r3,172(sp)
   12828:	d8c02785 	stb	r3,158(sp)
   1282c:	003a1706 	br	1108c <__alt_data_end+0xfc01108c>
   12830:	0005883a 	mov	r2,zero
   12834:	003f5d06 	br	125ac <__alt_data_end+0xfc0125ac>
   12838:	d8c02b03 	ldbu	r3,172(sp)
   1283c:	d8c02785 	stb	r3,158(sp)
   12840:	0038f306 	br	10c10 <__alt_data_end+0xfc010c10>
   12844:	d8c02b03 	ldbu	r3,172(sp)
   12848:	d8c02785 	stb	r3,158(sp)
   1284c:	0038be06 	br	10b48 <__alt_data_end+0xfc010b48>
   12850:	d8802344 	addi	r2,sp,141
   12854:	003f0506 	br	1246c <__alt_data_end+0xfc01246c>
   12858:	d8c02b03 	ldbu	r3,172(sp)
   1285c:	d8c02785 	stb	r3,158(sp)
   12860:	00388b06 	br	10a90 <__alt_data_end+0xfc010a90>
   12864:	d8c02b03 	ldbu	r3,172(sp)
   12868:	d8c02785 	stb	r3,158(sp)
   1286c:	003ad706 	br	113cc <__alt_data_end+0xfc0113cc>
   12870:	d9403917 	ldw	r5,228(sp)
   12874:	00800304 	movi	r2,12
   12878:	28800015 	stw	r2,0(r5)
   1287c:	00bfffc4 	movi	r2,-1
   12880:	00384306 	br	10990 <__alt_data_end+0xfc010990>
   12884:	d8c02b03 	ldbu	r3,172(sp)
   12888:	d8c02785 	stb	r3,158(sp)
   1288c:	003ab606 	br	11368 <__alt_data_end+0xfc011368>
   12890:	d8c02b03 	ldbu	r3,172(sp)
   12894:	d8c02785 	stb	r3,158(sp)
   12898:	003a8906 	br	112c0 <__alt_data_end+0xfc0112c0>

0001289c <_times_r>:
   1289c:	2809883a 	mov	r4,r5
   128a0:	002094c1 	jmpi	2094c <times>

000128a4 <___vfprintf_internal_r>:
   128a4:	deffb804 	addi	sp,sp,-288
   128a8:	dfc04715 	stw	ra,284(sp)
   128ac:	ddc04515 	stw	r23,276(sp)
   128b0:	dd404315 	stw	r21,268(sp)
   128b4:	d9002d15 	stw	r4,180(sp)
   128b8:	282f883a 	mov	r23,r5
   128bc:	302b883a 	mov	r21,r6
   128c0:	d9c02e15 	stw	r7,184(sp)
   128c4:	df004615 	stw	fp,280(sp)
   128c8:	dd804415 	stw	r22,272(sp)
   128cc:	dd004215 	stw	r20,264(sp)
   128d0:	dcc04115 	stw	r19,260(sp)
   128d4:	dc804015 	stw	r18,256(sp)
   128d8:	dc403f15 	stw	r17,252(sp)
   128dc:	dc003e15 	stw	r16,248(sp)
   128e0:	00177e40 	call	177e4 <_localeconv_r>
   128e4:	10800017 	ldw	r2,0(r2)
   128e8:	1009883a 	mov	r4,r2
   128ec:	d8803415 	stw	r2,208(sp)
   128f0:	00105480 	call	10548 <strlen>
   128f4:	d8803715 	stw	r2,220(sp)
   128f8:	d8802d17 	ldw	r2,180(sp)
   128fc:	10000226 	beq	r2,zero,12908 <___vfprintf_internal_r+0x64>
   12900:	10800e17 	ldw	r2,56(r2)
   12904:	1000fb26 	beq	r2,zero,12cf4 <___vfprintf_internal_r+0x450>
   12908:	b880030b 	ldhu	r2,12(r23)
   1290c:	10c8000c 	andi	r3,r2,8192
   12910:	1800061e 	bne	r3,zero,1292c <___vfprintf_internal_r+0x88>
   12914:	b9001917 	ldw	r4,100(r23)
   12918:	00f7ffc4 	movi	r3,-8193
   1291c:	10880014 	ori	r2,r2,8192
   12920:	20c6703a 	and	r3,r4,r3
   12924:	b880030d 	sth	r2,12(r23)
   12928:	b8c01915 	stw	r3,100(r23)
   1292c:	10c0020c 	andi	r3,r2,8
   12930:	1800c326 	beq	r3,zero,12c40 <___vfprintf_internal_r+0x39c>
   12934:	b8c00417 	ldw	r3,16(r23)
   12938:	1800c126 	beq	r3,zero,12c40 <___vfprintf_internal_r+0x39c>
   1293c:	1080068c 	andi	r2,r2,26
   12940:	00c00284 	movi	r3,10
   12944:	10c0c626 	beq	r2,r3,12c60 <___vfprintf_internal_r+0x3bc>
   12948:	d8c00404 	addi	r3,sp,16
   1294c:	050000f4 	movhi	r20,3
   12950:	d9001e04 	addi	r4,sp,120
   12954:	a52e4f84 	addi	r20,r20,-18114
   12958:	d8c01e15 	stw	r3,120(sp)
   1295c:	d8002015 	stw	zero,128(sp)
   12960:	d8001f15 	stw	zero,124(sp)
   12964:	d8003315 	stw	zero,204(sp)
   12968:	d8003615 	stw	zero,216(sp)
   1296c:	d8003815 	stw	zero,224(sp)
   12970:	1811883a 	mov	r8,r3
   12974:	d8003915 	stw	zero,228(sp)
   12978:	d8003a15 	stw	zero,232(sp)
   1297c:	d8002f15 	stw	zero,188(sp)
   12980:	d9002815 	stw	r4,160(sp)
   12984:	a8800007 	ldb	r2,0(r21)
   12988:	10028b26 	beq	r2,zero,133b8 <___vfprintf_internal_r+0xb14>
   1298c:	00c00944 	movi	r3,37
   12990:	a823883a 	mov	r17,r21
   12994:	10c0021e 	bne	r2,r3,129a0 <___vfprintf_internal_r+0xfc>
   12998:	00001406 	br	129ec <___vfprintf_internal_r+0x148>
   1299c:	10c00326 	beq	r2,r3,129ac <___vfprintf_internal_r+0x108>
   129a0:	8c400044 	addi	r17,r17,1
   129a4:	88800007 	ldb	r2,0(r17)
   129a8:	103ffc1e 	bne	r2,zero,1299c <__alt_data_end+0xfc01299c>
   129ac:	8d61c83a 	sub	r16,r17,r21
   129b0:	80000e26 	beq	r16,zero,129ec <___vfprintf_internal_r+0x148>
   129b4:	d8c02017 	ldw	r3,128(sp)
   129b8:	d8801f17 	ldw	r2,124(sp)
   129bc:	45400015 	stw	r21,0(r8)
   129c0:	1c07883a 	add	r3,r3,r16
   129c4:	10800044 	addi	r2,r2,1
   129c8:	d8c02015 	stw	r3,128(sp)
   129cc:	44000115 	stw	r16,4(r8)
   129d0:	d8801f15 	stw	r2,124(sp)
   129d4:	00c001c4 	movi	r3,7
   129d8:	1880a916 	blt	r3,r2,12c80 <___vfprintf_internal_r+0x3dc>
   129dc:	42000204 	addi	r8,r8,8
   129e0:	d9402f17 	ldw	r5,188(sp)
   129e4:	2c0b883a 	add	r5,r5,r16
   129e8:	d9402f15 	stw	r5,188(sp)
   129ec:	88800007 	ldb	r2,0(r17)
   129f0:	1000aa26 	beq	r2,zero,12c9c <___vfprintf_internal_r+0x3f8>
   129f4:	8d400044 	addi	r21,r17,1
   129f8:	8c400047 	ldb	r17,1(r17)
   129fc:	0021883a 	mov	r16,zero
   12a00:	00bfffc4 	movi	r2,-1
   12a04:	0025883a 	mov	r18,zero
   12a08:	dc002905 	stb	r16,164(sp)
   12a0c:	d8002785 	stb	zero,158(sp)
   12a10:	d8002b05 	stb	zero,172(sp)
   12a14:	d8802a15 	stw	r2,168(sp)
   12a18:	d8003115 	stw	zero,196(sp)
   12a1c:	04c01604 	movi	r19,88
   12a20:	05800244 	movi	r22,9
   12a24:	9021883a 	mov	r16,r18
   12a28:	4039883a 	mov	fp,r8
   12a2c:	ad400044 	addi	r21,r21,1
   12a30:	88bff804 	addi	r2,r17,-32
   12a34:	98833236 	bltu	r19,r2,13700 <___vfprintf_internal_r+0xe5c>
   12a38:	100490ba 	slli	r2,r2,2
   12a3c:	00c00074 	movhi	r3,1
   12a40:	18ca9404 	addi	r3,r3,10832
   12a44:	10c5883a 	add	r2,r2,r3
   12a48:	10800017 	ldw	r2,0(r2)
   12a4c:	1000683a 	jmp	r2
   12a50:	000135f8 	rdprs	zero,zero,1239
   12a54:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12a58:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12a5c:	00013618 	cmpnei	zero,zero,1240
   12a60:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12a64:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12a68:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12a6c:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12a70:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12a74:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12a78:	00012d00 	call	12d0 <_ZN3USB11outTransferEhhtPh+0x90>
   12a7c:	00013508 	cmpgei	zero,zero,1236
   12a80:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12a84:	00012bc4 	movi	zero,1199
   12a88:	00012d24 	muli	zero,zero,1204
   12a8c:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12a90:	00012d74 	movhi	zero,1205
   12a94:	00012d80 	call	12d8 <_ZN3USB11outTransferEhhtPh+0x98>
   12a98:	00012d80 	call	12d8 <_ZN3USB11outTransferEhhtPh+0x98>
   12a9c:	00012d80 	call	12d8 <_ZN3USB11outTransferEhhtPh+0x98>
   12aa0:	00012d80 	call	12d8 <_ZN3USB11outTransferEhhtPh+0x98>
   12aa4:	00012d80 	call	12d8 <_ZN3USB11outTransferEhhtPh+0x98>
   12aa8:	00012d80 	call	12d8 <_ZN3USB11outTransferEhhtPh+0x98>
   12aac:	00012d80 	call	12d8 <_ZN3USB11outTransferEhhtPh+0x98>
   12ab0:	00012d80 	call	12d8 <_ZN3USB11outTransferEhhtPh+0x98>
   12ab4:	00012d80 	call	12d8 <_ZN3USB11outTransferEhhtPh+0x98>
   12ab8:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12abc:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12ac0:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12ac4:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12ac8:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12acc:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12ad0:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12ad4:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12ad8:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12adc:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12ae0:	00012dbc 	xorhi	zero,zero,1206
   12ae4:	00012e84 	movi	zero,1210
   12ae8:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12aec:	00012e84 	movi	zero,1210
   12af0:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12af4:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12af8:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12afc:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b00:	00012f30 	cmpltui	zero,zero,1212
   12b04:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b08:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b0c:	00012f3c 	xorhi	zero,zero,1212
   12b10:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b14:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b18:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b1c:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b20:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b24:	000133c0 	call	133c <_ZN3USB11OutTransferEP6EpInfottPh+0x4c>
   12b28:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b2c:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b30:	0001342c 	andhi	zero,zero,1232
   12b34:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b38:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b3c:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b40:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b44:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b48:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b4c:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b50:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b54:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b58:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b5c:	000136a4 	muli	zero,zero,1242
   12b60:	00013624 	muli	zero,zero,1240
   12b64:	00012e84 	movi	zero,1210
   12b68:	00012e84 	movi	zero,1210
   12b6c:	00012e84 	movi	zero,1210
   12b70:	00013644 	movi	zero,1241
   12b74:	00013624 	muli	zero,zero,1240
   12b78:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b7c:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b80:	00013650 	cmplti	zero,zero,1241
   12b84:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b88:	00013664 	muli	zero,zero,1241
   12b8c:	000134e8 	cmpgeui	zero,zero,1235
   12b90:	00012bd0 	cmplti	zero,zero,1199
   12b94:	00013520 	cmpeqi	zero,zero,1236
   12b98:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12b9c:	0001352c 	andhi	zero,zero,1236
   12ba0:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12ba4:	00013590 	cmplti	zero,zero,1238
   12ba8:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12bac:	00013700 	call	1370 <_ZN3USB11OutTransferEP6EpInfottPh+0x80>
   12bb0:	000135b0 	cmpltui	zero,zero,1238
   12bb4:	d8c03117 	ldw	r3,196(sp)
   12bb8:	d8802e15 	stw	r2,184(sp)
   12bbc:	00c7c83a 	sub	r3,zero,r3
   12bc0:	d8c03115 	stw	r3,196(sp)
   12bc4:	84000114 	ori	r16,r16,4
   12bc8:	ac400007 	ldb	r17,0(r21)
   12bcc:	003f9706 	br	12a2c <__alt_data_end+0xfc012a2c>
   12bd0:	00800c04 	movi	r2,48
   12bd4:	d8802705 	stb	r2,156(sp)
   12bd8:	00801e04 	movi	r2,120
   12bdc:	d8802745 	stb	r2,157(sp)
   12be0:	d9002a17 	ldw	r4,168(sp)
   12be4:	d8802e17 	ldw	r2,184(sp)
   12be8:	d8002785 	stb	zero,158(sp)
   12bec:	e011883a 	mov	r8,fp
   12bf0:	10c00104 	addi	r3,r2,4
   12bf4:	14c00017 	ldw	r19,0(r2)
   12bf8:	002d883a 	mov	r22,zero
   12bfc:	80800094 	ori	r2,r16,2
   12c00:	2002ca16 	blt	r4,zero,1372c <___vfprintf_internal_r+0xe88>
   12c04:	00bfdfc4 	movi	r2,-129
   12c08:	80a4703a 	and	r18,r16,r2
   12c0c:	d8c02e15 	stw	r3,184(sp)
   12c10:	94800094 	ori	r18,r18,2
   12c14:	9802b41e 	bne	r19,zero,136e8 <___vfprintf_internal_r+0xe44>
   12c18:	014000f4 	movhi	r5,3
   12c1c:	296e4004 	addi	r5,r5,-18176
   12c20:	d9403915 	stw	r5,228(sp)
   12c24:	04401e04 	movi	r17,120
   12c28:	d8802a17 	ldw	r2,168(sp)
   12c2c:	0039883a 	mov	fp,zero
   12c30:	1001fa26 	beq	r2,zero,1341c <___vfprintf_internal_r+0xb78>
   12c34:	0027883a 	mov	r19,zero
   12c38:	002d883a 	mov	r22,zero
   12c3c:	00021906 	br	134a4 <___vfprintf_internal_r+0xc00>
   12c40:	d9002d17 	ldw	r4,180(sp)
   12c44:	b80b883a 	mov	r5,r23
   12c48:	0014c580 	call	14c58 <__swsetup_r>
   12c4c:	1005dc1e 	bne	r2,zero,143c0 <___vfprintf_internal_r+0x1b1c>
   12c50:	b880030b 	ldhu	r2,12(r23)
   12c54:	00c00284 	movi	r3,10
   12c58:	1080068c 	andi	r2,r2,26
   12c5c:	10ff3a1e 	bne	r2,r3,12948 <__alt_data_end+0xfc012948>
   12c60:	b880038f 	ldh	r2,14(r23)
   12c64:	103f3816 	blt	r2,zero,12948 <__alt_data_end+0xfc012948>
   12c68:	d9c02e17 	ldw	r7,184(sp)
   12c6c:	d9002d17 	ldw	r4,180(sp)
   12c70:	a80d883a 	mov	r6,r21
   12c74:	b80b883a 	mov	r5,r23
   12c78:	0014b9c0 	call	14b9c <__sbprintf>
   12c7c:	00001106 	br	12cc4 <___vfprintf_internal_r+0x420>
   12c80:	d9002d17 	ldw	r4,180(sp)
   12c84:	d9801e04 	addi	r6,sp,120
   12c88:	b80b883a 	mov	r5,r23
   12c8c:	001abb00 	call	1abb0 <__sprint_r>
   12c90:	1000081e 	bne	r2,zero,12cb4 <___vfprintf_internal_r+0x410>
   12c94:	da000404 	addi	r8,sp,16
   12c98:	003f5106 	br	129e0 <__alt_data_end+0xfc0129e0>
   12c9c:	d8802017 	ldw	r2,128(sp)
   12ca0:	10000426 	beq	r2,zero,12cb4 <___vfprintf_internal_r+0x410>
   12ca4:	d9002d17 	ldw	r4,180(sp)
   12ca8:	d9801e04 	addi	r6,sp,120
   12cac:	b80b883a 	mov	r5,r23
   12cb0:	001abb00 	call	1abb0 <__sprint_r>
   12cb4:	b880030b 	ldhu	r2,12(r23)
   12cb8:	1080100c 	andi	r2,r2,64
   12cbc:	1005c01e 	bne	r2,zero,143c0 <___vfprintf_internal_r+0x1b1c>
   12cc0:	d8802f17 	ldw	r2,188(sp)
   12cc4:	dfc04717 	ldw	ra,284(sp)
   12cc8:	df004617 	ldw	fp,280(sp)
   12ccc:	ddc04517 	ldw	r23,276(sp)
   12cd0:	dd804417 	ldw	r22,272(sp)
   12cd4:	dd404317 	ldw	r21,268(sp)
   12cd8:	dd004217 	ldw	r20,264(sp)
   12cdc:	dcc04117 	ldw	r19,260(sp)
   12ce0:	dc804017 	ldw	r18,256(sp)
   12ce4:	dc403f17 	ldw	r17,252(sp)
   12ce8:	dc003e17 	ldw	r16,248(sp)
   12cec:	dec04804 	addi	sp,sp,288
   12cf0:	f800283a 	ret
   12cf4:	d9002d17 	ldw	r4,180(sp)
   12cf8:	0016c640 	call	16c64 <__sinit>
   12cfc:	003f0206 	br	12908 <__alt_data_end+0xfc012908>
   12d00:	d9002e17 	ldw	r4,184(sp)
   12d04:	d9402e17 	ldw	r5,184(sp)
   12d08:	21000017 	ldw	r4,0(r4)
   12d0c:	28800104 	addi	r2,r5,4
   12d10:	d9003115 	stw	r4,196(sp)
   12d14:	203fa716 	blt	r4,zero,12bb4 <__alt_data_end+0xfc012bb4>
   12d18:	d8802e15 	stw	r2,184(sp)
   12d1c:	ac400007 	ldb	r17,0(r21)
   12d20:	003f4206 	br	12a2c <__alt_data_end+0xfc012a2c>
   12d24:	ac400007 	ldb	r17,0(r21)
   12d28:	01000a84 	movi	r4,42
   12d2c:	a8c00044 	addi	r3,r21,1
   12d30:	89075826 	beq	r17,r4,14a94 <___vfprintf_internal_r+0x21f0>
   12d34:	8cbff404 	addi	r18,r17,-48
   12d38:	b486ae36 	bltu	r22,r18,147f4 <___vfprintf_internal_r+0x1f50>
   12d3c:	0009883a 	mov	r4,zero
   12d40:	1823883a 	mov	r17,r3
   12d44:	01400284 	movi	r5,10
   12d48:	000d8e00 	call	d8e0 <__mulsi3>
   12d4c:	88c00007 	ldb	r3,0(r17)
   12d50:	1489883a 	add	r4,r2,r18
   12d54:	8d400044 	addi	r21,r17,1
   12d58:	1cbff404 	addi	r18,r3,-48
   12d5c:	a823883a 	mov	r17,r21
   12d60:	b4bff82e 	bgeu	r22,r18,12d44 <__alt_data_end+0xfc012d44>
   12d64:	1823883a 	mov	r17,r3
   12d68:	2005f616 	blt	r4,zero,14544 <___vfprintf_internal_r+0x1ca0>
   12d6c:	d9002a15 	stw	r4,168(sp)
   12d70:	003f2f06 	br	12a30 <__alt_data_end+0xfc012a30>
   12d74:	84002014 	ori	r16,r16,128
   12d78:	ac400007 	ldb	r17,0(r21)
   12d7c:	003f2b06 	br	12a2c <__alt_data_end+0xfc012a2c>
   12d80:	8cbff404 	addi	r18,r17,-48
   12d84:	d8003115 	stw	zero,196(sp)
   12d88:	0009883a 	mov	r4,zero
   12d8c:	a823883a 	mov	r17,r21
   12d90:	01400284 	movi	r5,10
   12d94:	000d8e00 	call	d8e0 <__mulsi3>
   12d98:	88c00007 	ldb	r3,0(r17)
   12d9c:	9089883a 	add	r4,r18,r2
   12da0:	ad400044 	addi	r21,r21,1
   12da4:	1cbff404 	addi	r18,r3,-48
   12da8:	a823883a 	mov	r17,r21
   12dac:	b4bff82e 	bgeu	r22,r18,12d90 <__alt_data_end+0xfc012d90>
   12db0:	1823883a 	mov	r17,r3
   12db4:	d9003115 	stw	r4,196(sp)
   12db8:	003f1d06 	br	12a30 <__alt_data_end+0xfc012a30>
   12dbc:	8025883a 	mov	r18,r16
   12dc0:	dc002903 	ldbu	r16,164(sp)
   12dc4:	e011883a 	mov	r8,fp
   12dc8:	84003fcc 	andi	r16,r16,255
   12dcc:	8007531e 	bne	r16,zero,14b1c <___vfprintf_internal_r+0x2278>
   12dd0:	94800414 	ori	r18,r18,16
   12dd4:	9080080c 	andi	r2,r18,32
   12dd8:	1003a326 	beq	r2,zero,13c68 <___vfprintf_internal_r+0x13c4>
   12ddc:	d9002e17 	ldw	r4,184(sp)
   12de0:	20800117 	ldw	r2,4(r4)
   12de4:	24c00017 	ldw	r19,0(r4)
   12de8:	21000204 	addi	r4,r4,8
   12dec:	d9002e15 	stw	r4,184(sp)
   12df0:	102d883a 	mov	r22,r2
   12df4:	10047316 	blt	r2,zero,13fc4 <___vfprintf_internal_r+0x1720>
   12df8:	d9002a17 	ldw	r4,168(sp)
   12dfc:	df002783 	ldbu	fp,158(sp)
   12e00:	2003e416 	blt	r4,zero,13d94 <___vfprintf_internal_r+0x14f0>
   12e04:	00ffdfc4 	movi	r3,-129
   12e08:	9d84b03a 	or	r2,r19,r22
   12e0c:	90e4703a 	and	r18,r18,r3
   12e10:	10018026 	beq	r2,zero,13414 <___vfprintf_internal_r+0xb70>
   12e14:	b003ab26 	beq	r22,zero,13cc4 <___vfprintf_internal_r+0x1420>
   12e18:	dc402915 	stw	r17,164(sp)
   12e1c:	dc001e04 	addi	r16,sp,120
   12e20:	b023883a 	mov	r17,r22
   12e24:	402d883a 	mov	r22,r8
   12e28:	9809883a 	mov	r4,r19
   12e2c:	880b883a 	mov	r5,r17
   12e30:	01800284 	movi	r6,10
   12e34:	000f883a 	mov	r7,zero
   12e38:	001d0f40 	call	1d0f4 <__umoddi3>
   12e3c:	10800c04 	addi	r2,r2,48
   12e40:	843fffc4 	addi	r16,r16,-1
   12e44:	9809883a 	mov	r4,r19
   12e48:	880b883a 	mov	r5,r17
   12e4c:	80800005 	stb	r2,0(r16)
   12e50:	01800284 	movi	r6,10
   12e54:	000f883a 	mov	r7,zero
   12e58:	001caf80 	call	1caf8 <__udivdi3>
   12e5c:	1027883a 	mov	r19,r2
   12e60:	10c4b03a 	or	r2,r2,r3
   12e64:	1823883a 	mov	r17,r3
   12e68:	103fef1e 	bne	r2,zero,12e28 <__alt_data_end+0xfc012e28>
   12e6c:	d8c02817 	ldw	r3,160(sp)
   12e70:	dc402917 	ldw	r17,164(sp)
   12e74:	b011883a 	mov	r8,r22
   12e78:	1c07c83a 	sub	r3,r3,r16
   12e7c:	d8c02b15 	stw	r3,172(sp)
   12e80:	00005f06 	br	13000 <___vfprintf_internal_r+0x75c>
   12e84:	8025883a 	mov	r18,r16
   12e88:	dc002903 	ldbu	r16,164(sp)
   12e8c:	e011883a 	mov	r8,fp
   12e90:	84003fcc 	andi	r16,r16,255
   12e94:	80071e1e 	bne	r16,zero,14b10 <___vfprintf_internal_r+0x226c>
   12e98:	9080020c 	andi	r2,r18,8
   12e9c:	1004af26 	beq	r2,zero,1415c <___vfprintf_internal_r+0x18b8>
   12ea0:	d9002e17 	ldw	r4,184(sp)
   12ea4:	d9402e17 	ldw	r5,184(sp)
   12ea8:	d8802e17 	ldw	r2,184(sp)
   12eac:	21000017 	ldw	r4,0(r4)
   12eb0:	29400117 	ldw	r5,4(r5)
   12eb4:	10800204 	addi	r2,r2,8
   12eb8:	d9003615 	stw	r4,216(sp)
   12ebc:	d9403815 	stw	r5,224(sp)
   12ec0:	d8802e15 	stw	r2,184(sp)
   12ec4:	d9003617 	ldw	r4,216(sp)
   12ec8:	d9403817 	ldw	r5,224(sp)
   12ecc:	da003d15 	stw	r8,244(sp)
   12ed0:	04000044 	movi	r16,1
   12ed4:	00193940 	call	19394 <__fpclassifyd>
   12ed8:	da003d17 	ldw	r8,244(sp)
   12edc:	1404441e 	bne	r2,r16,13ff0 <___vfprintf_internal_r+0x174c>
   12ee0:	d9003617 	ldw	r4,216(sp)
   12ee4:	d9403817 	ldw	r5,224(sp)
   12ee8:	000d883a 	mov	r6,zero
   12eec:	000f883a 	mov	r7,zero
   12ef0:	001ea980 	call	1ea98 <__ledf2>
   12ef4:	da003d17 	ldw	r8,244(sp)
   12ef8:	1005e316 	blt	r2,zero,14688 <___vfprintf_internal_r+0x1de4>
   12efc:	df002783 	ldbu	fp,158(sp)
   12f00:	008011c4 	movi	r2,71
   12f04:	1445580e 	bge	r2,r17,14468 <___vfprintf_internal_r+0x1bc4>
   12f08:	040000f4 	movhi	r16,3
   12f0c:	842e3804 	addi	r16,r16,-18208
   12f10:	00c000c4 	movi	r3,3
   12f14:	00bfdfc4 	movi	r2,-129
   12f18:	d8c02915 	stw	r3,164(sp)
   12f1c:	90a4703a 	and	r18,r18,r2
   12f20:	d8c02b15 	stw	r3,172(sp)
   12f24:	d8002a15 	stw	zero,168(sp)
   12f28:	d8003215 	stw	zero,200(sp)
   12f2c:	00003a06 	br	13018 <___vfprintf_internal_r+0x774>
   12f30:	84000214 	ori	r16,r16,8
   12f34:	ac400007 	ldb	r17,0(r21)
   12f38:	003ebc06 	br	12a2c <__alt_data_end+0xfc012a2c>
   12f3c:	8025883a 	mov	r18,r16
   12f40:	dc002903 	ldbu	r16,164(sp)
   12f44:	e011883a 	mov	r8,fp
   12f48:	84003fcc 	andi	r16,r16,255
   12f4c:	8007001e 	bne	r16,zero,14b50 <___vfprintf_internal_r+0x22ac>
   12f50:	94800414 	ori	r18,r18,16
   12f54:	9080080c 	andi	r2,r18,32
   12f58:	1002fa26 	beq	r2,zero,13b44 <___vfprintf_internal_r+0x12a0>
   12f5c:	d9002e17 	ldw	r4,184(sp)
   12f60:	d9402a17 	ldw	r5,168(sp)
   12f64:	d8002785 	stb	zero,158(sp)
   12f68:	20800204 	addi	r2,r4,8
   12f6c:	24c00017 	ldw	r19,0(r4)
   12f70:	25800117 	ldw	r22,4(r4)
   12f74:	2804b116 	blt	r5,zero,1423c <___vfprintf_internal_r+0x1998>
   12f78:	013fdfc4 	movi	r4,-129
   12f7c:	9d86b03a 	or	r3,r19,r22
   12f80:	d8802e15 	stw	r2,184(sp)
   12f84:	9124703a 	and	r18,r18,r4
   12f88:	1802fb1e 	bne	r3,zero,13b78 <___vfprintf_internal_r+0x12d4>
   12f8c:	d8c02a17 	ldw	r3,168(sp)
   12f90:	0039883a 	mov	fp,zero
   12f94:	1805e526 	beq	r3,zero,1472c <___vfprintf_internal_r+0x1e88>
   12f98:	0027883a 	mov	r19,zero
   12f9c:	002d883a 	mov	r22,zero
   12fa0:	dc001e04 	addi	r16,sp,120
   12fa4:	9806d0fa 	srli	r3,r19,3
   12fa8:	b008977a 	slli	r4,r22,29
   12fac:	b02cd0fa 	srli	r22,r22,3
   12fb0:	9cc001cc 	andi	r19,r19,7
   12fb4:	98800c04 	addi	r2,r19,48
   12fb8:	843fffc4 	addi	r16,r16,-1
   12fbc:	20e6b03a 	or	r19,r4,r3
   12fc0:	80800005 	stb	r2,0(r16)
   12fc4:	9d86b03a 	or	r3,r19,r22
   12fc8:	183ff61e 	bne	r3,zero,12fa4 <__alt_data_end+0xfc012fa4>
   12fcc:	90c0004c 	andi	r3,r18,1
   12fd0:	18014126 	beq	r3,zero,134d8 <___vfprintf_internal_r+0xc34>
   12fd4:	10803fcc 	andi	r2,r2,255
   12fd8:	1080201c 	xori	r2,r2,128
   12fdc:	10bfe004 	addi	r2,r2,-128
   12fe0:	00c00c04 	movi	r3,48
   12fe4:	10c13c26 	beq	r2,r3,134d8 <___vfprintf_internal_r+0xc34>
   12fe8:	80ffffc5 	stb	r3,-1(r16)
   12fec:	d8c02817 	ldw	r3,160(sp)
   12ff0:	80bfffc4 	addi	r2,r16,-1
   12ff4:	1021883a 	mov	r16,r2
   12ff8:	1887c83a 	sub	r3,r3,r2
   12ffc:	d8c02b15 	stw	r3,172(sp)
   13000:	d8802b17 	ldw	r2,172(sp)
   13004:	d9002a17 	ldw	r4,168(sp)
   13008:	1100010e 	bge	r2,r4,13010 <___vfprintf_internal_r+0x76c>
   1300c:	2005883a 	mov	r2,r4
   13010:	d8802915 	stw	r2,164(sp)
   13014:	d8003215 	stw	zero,200(sp)
   13018:	e7003fcc 	andi	fp,fp,255
   1301c:	e700201c 	xori	fp,fp,128
   13020:	e73fe004 	addi	fp,fp,-128
   13024:	e0000326 	beq	fp,zero,13034 <___vfprintf_internal_r+0x790>
   13028:	d8c02917 	ldw	r3,164(sp)
   1302c:	18c00044 	addi	r3,r3,1
   13030:	d8c02915 	stw	r3,164(sp)
   13034:	90c0008c 	andi	r3,r18,2
   13038:	d8c02c15 	stw	r3,176(sp)
   1303c:	18000326 	beq	r3,zero,1304c <___vfprintf_internal_r+0x7a8>
   13040:	d8c02917 	ldw	r3,164(sp)
   13044:	18c00084 	addi	r3,r3,2
   13048:	d8c02915 	stw	r3,164(sp)
   1304c:	90c0210c 	andi	r3,r18,132
   13050:	d8c03015 	stw	r3,192(sp)
   13054:	1801c51e 	bne	r3,zero,1376c <___vfprintf_internal_r+0xec8>
   13058:	d9003117 	ldw	r4,196(sp)
   1305c:	d8c02917 	ldw	r3,164(sp)
   13060:	20e7c83a 	sub	r19,r4,r3
   13064:	04c1c10e 	bge	zero,r19,1376c <___vfprintf_internal_r+0xec8>
   13068:	02400404 	movi	r9,16
   1306c:	d8c02017 	ldw	r3,128(sp)
   13070:	d8801f17 	ldw	r2,124(sp)
   13074:	4cc52f0e 	bge	r9,r19,14534 <___vfprintf_internal_r+0x1c90>
   13078:	014000f4 	movhi	r5,3
   1307c:	296e5384 	addi	r5,r5,-18098
   13080:	dc403b15 	stw	r17,236(sp)
   13084:	d9403515 	stw	r5,212(sp)
   13088:	9823883a 	mov	r17,r19
   1308c:	482d883a 	mov	r22,r9
   13090:	9027883a 	mov	r19,r18
   13094:	070001c4 	movi	fp,7
   13098:	8025883a 	mov	r18,r16
   1309c:	dc002d17 	ldw	r16,180(sp)
   130a0:	00000306 	br	130b0 <___vfprintf_internal_r+0x80c>
   130a4:	8c7ffc04 	addi	r17,r17,-16
   130a8:	42000204 	addi	r8,r8,8
   130ac:	b440130e 	bge	r22,r17,130fc <___vfprintf_internal_r+0x858>
   130b0:	010000f4 	movhi	r4,3
   130b4:	18c00404 	addi	r3,r3,16
   130b8:	10800044 	addi	r2,r2,1
   130bc:	212e5384 	addi	r4,r4,-18098
   130c0:	41000015 	stw	r4,0(r8)
   130c4:	45800115 	stw	r22,4(r8)
   130c8:	d8c02015 	stw	r3,128(sp)
   130cc:	d8801f15 	stw	r2,124(sp)
   130d0:	e0bff40e 	bge	fp,r2,130a4 <__alt_data_end+0xfc0130a4>
   130d4:	d9801e04 	addi	r6,sp,120
   130d8:	b80b883a 	mov	r5,r23
   130dc:	8009883a 	mov	r4,r16
   130e0:	001abb00 	call	1abb0 <__sprint_r>
   130e4:	103ef31e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   130e8:	8c7ffc04 	addi	r17,r17,-16
   130ec:	d8c02017 	ldw	r3,128(sp)
   130f0:	d8801f17 	ldw	r2,124(sp)
   130f4:	da000404 	addi	r8,sp,16
   130f8:	b47fed16 	blt	r22,r17,130b0 <__alt_data_end+0xfc0130b0>
   130fc:	9021883a 	mov	r16,r18
   13100:	9825883a 	mov	r18,r19
   13104:	8827883a 	mov	r19,r17
   13108:	dc403b17 	ldw	r17,236(sp)
   1310c:	d9403517 	ldw	r5,212(sp)
   13110:	98c7883a 	add	r3,r19,r3
   13114:	10800044 	addi	r2,r2,1
   13118:	41400015 	stw	r5,0(r8)
   1311c:	44c00115 	stw	r19,4(r8)
   13120:	d8c02015 	stw	r3,128(sp)
   13124:	d8801f15 	stw	r2,124(sp)
   13128:	010001c4 	movi	r4,7
   1312c:	2082c516 	blt	r4,r2,13c44 <___vfprintf_internal_r+0x13a0>
   13130:	df002787 	ldb	fp,158(sp)
   13134:	42000204 	addi	r8,r8,8
   13138:	e0000c26 	beq	fp,zero,1316c <___vfprintf_internal_r+0x8c8>
   1313c:	d8801f17 	ldw	r2,124(sp)
   13140:	d9002784 	addi	r4,sp,158
   13144:	18c00044 	addi	r3,r3,1
   13148:	10800044 	addi	r2,r2,1
   1314c:	41000015 	stw	r4,0(r8)
   13150:	01000044 	movi	r4,1
   13154:	41000115 	stw	r4,4(r8)
   13158:	d8c02015 	stw	r3,128(sp)
   1315c:	d8801f15 	stw	r2,124(sp)
   13160:	010001c4 	movi	r4,7
   13164:	20825e16 	blt	r4,r2,13ae0 <___vfprintf_internal_r+0x123c>
   13168:	42000204 	addi	r8,r8,8
   1316c:	d8802c17 	ldw	r2,176(sp)
   13170:	10000c26 	beq	r2,zero,131a4 <___vfprintf_internal_r+0x900>
   13174:	d8801f17 	ldw	r2,124(sp)
   13178:	d9002704 	addi	r4,sp,156
   1317c:	18c00084 	addi	r3,r3,2
   13180:	10800044 	addi	r2,r2,1
   13184:	41000015 	stw	r4,0(r8)
   13188:	01000084 	movi	r4,2
   1318c:	41000115 	stw	r4,4(r8)
   13190:	d8c02015 	stw	r3,128(sp)
   13194:	d8801f15 	stw	r2,124(sp)
   13198:	010001c4 	movi	r4,7
   1319c:	20825816 	blt	r4,r2,13b00 <___vfprintf_internal_r+0x125c>
   131a0:	42000204 	addi	r8,r8,8
   131a4:	d9003017 	ldw	r4,192(sp)
   131a8:	00802004 	movi	r2,128
   131ac:	2081bb26 	beq	r4,r2,1389c <___vfprintf_internal_r+0xff8>
   131b0:	d9402a17 	ldw	r5,168(sp)
   131b4:	d8802b17 	ldw	r2,172(sp)
   131b8:	28adc83a 	sub	r22,r5,r2
   131bc:	0580310e 	bge	zero,r22,13284 <___vfprintf_internal_r+0x9e0>
   131c0:	07000404 	movi	fp,16
   131c4:	d8801f17 	ldw	r2,124(sp)
   131c8:	e584360e 	bge	fp,r22,142a4 <___vfprintf_internal_r+0x1a00>
   131cc:	014000f4 	movhi	r5,3
   131d0:	296e4f84 	addi	r5,r5,-18114
   131d4:	dc402a15 	stw	r17,168(sp)
   131d8:	d9402c15 	stw	r5,176(sp)
   131dc:	b023883a 	mov	r17,r22
   131e0:	04c001c4 	movi	r19,7
   131e4:	a82d883a 	mov	r22,r21
   131e8:	902b883a 	mov	r21,r18
   131ec:	8025883a 	mov	r18,r16
   131f0:	dc002d17 	ldw	r16,180(sp)
   131f4:	00000306 	br	13204 <___vfprintf_internal_r+0x960>
   131f8:	8c7ffc04 	addi	r17,r17,-16
   131fc:	42000204 	addi	r8,r8,8
   13200:	e440110e 	bge	fp,r17,13248 <___vfprintf_internal_r+0x9a4>
   13204:	18c00404 	addi	r3,r3,16
   13208:	10800044 	addi	r2,r2,1
   1320c:	45000015 	stw	r20,0(r8)
   13210:	47000115 	stw	fp,4(r8)
   13214:	d8c02015 	stw	r3,128(sp)
   13218:	d8801f15 	stw	r2,124(sp)
   1321c:	98bff60e 	bge	r19,r2,131f8 <__alt_data_end+0xfc0131f8>
   13220:	d9801e04 	addi	r6,sp,120
   13224:	b80b883a 	mov	r5,r23
   13228:	8009883a 	mov	r4,r16
   1322c:	001abb00 	call	1abb0 <__sprint_r>
   13230:	103ea01e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13234:	8c7ffc04 	addi	r17,r17,-16
   13238:	d8c02017 	ldw	r3,128(sp)
   1323c:	d8801f17 	ldw	r2,124(sp)
   13240:	da000404 	addi	r8,sp,16
   13244:	e47fef16 	blt	fp,r17,13204 <__alt_data_end+0xfc013204>
   13248:	9021883a 	mov	r16,r18
   1324c:	a825883a 	mov	r18,r21
   13250:	b02b883a 	mov	r21,r22
   13254:	882d883a 	mov	r22,r17
   13258:	dc402a17 	ldw	r17,168(sp)
   1325c:	d9002c17 	ldw	r4,176(sp)
   13260:	1d87883a 	add	r3,r3,r22
   13264:	10800044 	addi	r2,r2,1
   13268:	41000015 	stw	r4,0(r8)
   1326c:	45800115 	stw	r22,4(r8)
   13270:	d8c02015 	stw	r3,128(sp)
   13274:	d8801f15 	stw	r2,124(sp)
   13278:	010001c4 	movi	r4,7
   1327c:	20821016 	blt	r4,r2,13ac0 <___vfprintf_internal_r+0x121c>
   13280:	42000204 	addi	r8,r8,8
   13284:	9080400c 	andi	r2,r18,256
   13288:	10013a1e 	bne	r2,zero,13774 <___vfprintf_internal_r+0xed0>
   1328c:	d9402b17 	ldw	r5,172(sp)
   13290:	d8801f17 	ldw	r2,124(sp)
   13294:	44000015 	stw	r16,0(r8)
   13298:	1947883a 	add	r3,r3,r5
   1329c:	10800044 	addi	r2,r2,1
   132a0:	41400115 	stw	r5,4(r8)
   132a4:	d8c02015 	stw	r3,128(sp)
   132a8:	d8801f15 	stw	r2,124(sp)
   132ac:	010001c4 	movi	r4,7
   132b0:	2081f516 	blt	r4,r2,13a88 <___vfprintf_internal_r+0x11e4>
   132b4:	42000204 	addi	r8,r8,8
   132b8:	9480010c 	andi	r18,r18,4
   132bc:	90003226 	beq	r18,zero,13388 <___vfprintf_internal_r+0xae4>
   132c0:	d9403117 	ldw	r5,196(sp)
   132c4:	d8802917 	ldw	r2,164(sp)
   132c8:	28a1c83a 	sub	r16,r5,r2
   132cc:	04002e0e 	bge	zero,r16,13388 <___vfprintf_internal_r+0xae4>
   132d0:	04400404 	movi	r17,16
   132d4:	d8801f17 	ldw	r2,124(sp)
   132d8:	8c04c40e 	bge	r17,r16,145ec <___vfprintf_internal_r+0x1d48>
   132dc:	014000f4 	movhi	r5,3
   132e0:	296e5384 	addi	r5,r5,-18098
   132e4:	d9403515 	stw	r5,212(sp)
   132e8:	048001c4 	movi	r18,7
   132ec:	dcc02d17 	ldw	r19,180(sp)
   132f0:	00000306 	br	13300 <___vfprintf_internal_r+0xa5c>
   132f4:	843ffc04 	addi	r16,r16,-16
   132f8:	42000204 	addi	r8,r8,8
   132fc:	8c00130e 	bge	r17,r16,1334c <___vfprintf_internal_r+0xaa8>
   13300:	010000f4 	movhi	r4,3
   13304:	18c00404 	addi	r3,r3,16
   13308:	10800044 	addi	r2,r2,1
   1330c:	212e5384 	addi	r4,r4,-18098
   13310:	41000015 	stw	r4,0(r8)
   13314:	44400115 	stw	r17,4(r8)
   13318:	d8c02015 	stw	r3,128(sp)
   1331c:	d8801f15 	stw	r2,124(sp)
   13320:	90bff40e 	bge	r18,r2,132f4 <__alt_data_end+0xfc0132f4>
   13324:	d9801e04 	addi	r6,sp,120
   13328:	b80b883a 	mov	r5,r23
   1332c:	9809883a 	mov	r4,r19
   13330:	001abb00 	call	1abb0 <__sprint_r>
   13334:	103e5f1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13338:	843ffc04 	addi	r16,r16,-16
   1333c:	d8c02017 	ldw	r3,128(sp)
   13340:	d8801f17 	ldw	r2,124(sp)
   13344:	da000404 	addi	r8,sp,16
   13348:	8c3fed16 	blt	r17,r16,13300 <__alt_data_end+0xfc013300>
   1334c:	d9403517 	ldw	r5,212(sp)
   13350:	1c07883a 	add	r3,r3,r16
   13354:	10800044 	addi	r2,r2,1
   13358:	41400015 	stw	r5,0(r8)
   1335c:	44000115 	stw	r16,4(r8)
   13360:	d8c02015 	stw	r3,128(sp)
   13364:	d8801f15 	stw	r2,124(sp)
   13368:	010001c4 	movi	r4,7
   1336c:	2080060e 	bge	r4,r2,13388 <___vfprintf_internal_r+0xae4>
   13370:	d9002d17 	ldw	r4,180(sp)
   13374:	d9801e04 	addi	r6,sp,120
   13378:	b80b883a 	mov	r5,r23
   1337c:	001abb00 	call	1abb0 <__sprint_r>
   13380:	103e4c1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13384:	d8c02017 	ldw	r3,128(sp)
   13388:	d8803117 	ldw	r2,196(sp)
   1338c:	d9002917 	ldw	r4,164(sp)
   13390:	1100010e 	bge	r2,r4,13398 <___vfprintf_internal_r+0xaf4>
   13394:	2005883a 	mov	r2,r4
   13398:	d9402f17 	ldw	r5,188(sp)
   1339c:	288b883a 	add	r5,r5,r2
   133a0:	d9402f15 	stw	r5,188(sp)
   133a4:	1801c01e 	bne	r3,zero,13aa8 <___vfprintf_internal_r+0x1204>
   133a8:	a8800007 	ldb	r2,0(r21)
   133ac:	d8001f15 	stw	zero,124(sp)
   133b0:	da000404 	addi	r8,sp,16
   133b4:	103d751e 	bne	r2,zero,1298c <__alt_data_end+0xfc01298c>
   133b8:	a823883a 	mov	r17,r21
   133bc:	003d8b06 	br	129ec <__alt_data_end+0xfc0129ec>
   133c0:	8025883a 	mov	r18,r16
   133c4:	dc002903 	ldbu	r16,164(sp)
   133c8:	e011883a 	mov	r8,fp
   133cc:	84003fcc 	andi	r16,r16,255
   133d0:	8005e51e 	bne	r16,zero,14b68 <___vfprintf_internal_r+0x22c4>
   133d4:	94800414 	ori	r18,r18,16
   133d8:	9080080c 	andi	r2,r18,32
   133dc:	10022b26 	beq	r2,zero,13c8c <___vfprintf_internal_r+0x13e8>
   133e0:	d9002e17 	ldw	r4,184(sp)
   133e4:	d9402a17 	ldw	r5,168(sp)
   133e8:	d8002785 	stb	zero,158(sp)
   133ec:	20c00204 	addi	r3,r4,8
   133f0:	24c00017 	ldw	r19,0(r4)
   133f4:	25800117 	ldw	r22,4(r4)
   133f8:	28042e16 	blt	r5,zero,144b4 <___vfprintf_internal_r+0x1c10>
   133fc:	013fdfc4 	movi	r4,-129
   13400:	9d84b03a 	or	r2,r19,r22
   13404:	d8c02e15 	stw	r3,184(sp)
   13408:	9124703a 	and	r18,r18,r4
   1340c:	0039883a 	mov	fp,zero
   13410:	103e801e 	bne	r2,zero,12e14 <__alt_data_end+0xfc012e14>
   13414:	d9002a17 	ldw	r4,168(sp)
   13418:	2002e01e 	bne	r4,zero,13f9c <___vfprintf_internal_r+0x16f8>
   1341c:	d8002a15 	stw	zero,168(sp)
   13420:	d8002b15 	stw	zero,172(sp)
   13424:	dc001e04 	addi	r16,sp,120
   13428:	003ef506 	br	13000 <__alt_data_end+0xfc013000>
   1342c:	8025883a 	mov	r18,r16
   13430:	dc002903 	ldbu	r16,164(sp)
   13434:	e011883a 	mov	r8,fp
   13438:	84003fcc 	andi	r16,r16,255
   1343c:	8005ba1e 	bne	r16,zero,14b28 <___vfprintf_internal_r+0x2284>
   13440:	010000f4 	movhi	r4,3
   13444:	212e3b04 	addi	r4,r4,-18196
   13448:	d9003915 	stw	r4,228(sp)
   1344c:	9080080c 	andi	r2,r18,32
   13450:	10006126 	beq	r2,zero,135d8 <___vfprintf_internal_r+0xd34>
   13454:	d9402e17 	ldw	r5,184(sp)
   13458:	2cc00017 	ldw	r19,0(r5)
   1345c:	2d800117 	ldw	r22,4(r5)
   13460:	29400204 	addi	r5,r5,8
   13464:	d9402e15 	stw	r5,184(sp)
   13468:	9080004c 	andi	r2,r18,1
   1346c:	1001ac26 	beq	r2,zero,13b20 <___vfprintf_internal_r+0x127c>
   13470:	9d84b03a 	or	r2,r19,r22
   13474:	10038526 	beq	r2,zero,1428c <___vfprintf_internal_r+0x19e8>
   13478:	d8c02a17 	ldw	r3,168(sp)
   1347c:	00800c04 	movi	r2,48
   13480:	d8802705 	stb	r2,156(sp)
   13484:	dc402745 	stb	r17,157(sp)
   13488:	d8002785 	stb	zero,158(sp)
   1348c:	90800094 	ori	r2,r18,2
   13490:	18047916 	blt	r3,zero,14678 <___vfprintf_internal_r+0x1dd4>
   13494:	00bfdfc4 	movi	r2,-129
   13498:	90a4703a 	and	r18,r18,r2
   1349c:	94800094 	ori	r18,r18,2
   134a0:	0039883a 	mov	fp,zero
   134a4:	d9003917 	ldw	r4,228(sp)
   134a8:	dc001e04 	addi	r16,sp,120
   134ac:	988003cc 	andi	r2,r19,15
   134b0:	b006973a 	slli	r3,r22,28
   134b4:	2085883a 	add	r2,r4,r2
   134b8:	9826d13a 	srli	r19,r19,4
   134bc:	10800003 	ldbu	r2,0(r2)
   134c0:	b02cd13a 	srli	r22,r22,4
   134c4:	843fffc4 	addi	r16,r16,-1
   134c8:	1ce6b03a 	or	r19,r3,r19
   134cc:	80800005 	stb	r2,0(r16)
   134d0:	9d84b03a 	or	r2,r19,r22
   134d4:	103ff51e 	bne	r2,zero,134ac <__alt_data_end+0xfc0134ac>
   134d8:	d8c02817 	ldw	r3,160(sp)
   134dc:	1c07c83a 	sub	r3,r3,r16
   134e0:	d8c02b15 	stw	r3,172(sp)
   134e4:	003ec606 	br	13000 <__alt_data_end+0xfc013000>
   134e8:	8025883a 	mov	r18,r16
   134ec:	dc002903 	ldbu	r16,164(sp)
   134f0:	e011883a 	mov	r8,fp
   134f4:	84003fcc 	andi	r16,r16,255
   134f8:	803e9626 	beq	r16,zero,12f54 <__alt_data_end+0xfc012f54>
   134fc:	d8c02b03 	ldbu	r3,172(sp)
   13500:	d8c02785 	stb	r3,158(sp)
   13504:	003e9306 	br	12f54 <__alt_data_end+0xfc012f54>
   13508:	00c00044 	movi	r3,1
   1350c:	d8c02905 	stb	r3,164(sp)
   13510:	00c00ac4 	movi	r3,43
   13514:	d8c02b05 	stb	r3,172(sp)
   13518:	ac400007 	ldb	r17,0(r21)
   1351c:	003d4306 	br	12a2c <__alt_data_end+0xfc012a2c>
   13520:	84000814 	ori	r16,r16,32
   13524:	ac400007 	ldb	r17,0(r21)
   13528:	003d4006 	br	12a2c <__alt_data_end+0xfc012a2c>
   1352c:	d8802e17 	ldw	r2,184(sp)
   13530:	8025883a 	mov	r18,r16
   13534:	d8002785 	stb	zero,158(sp)
   13538:	14000017 	ldw	r16,0(r2)
   1353c:	e011883a 	mov	r8,fp
   13540:	14c00104 	addi	r19,r2,4
   13544:	80042d26 	beq	r16,zero,145fc <___vfprintf_internal_r+0x1d58>
   13548:	d8c02a17 	ldw	r3,168(sp)
   1354c:	1803e416 	blt	r3,zero,144e0 <___vfprintf_internal_r+0x1c3c>
   13550:	180d883a 	mov	r6,r3
   13554:	000b883a 	mov	r5,zero
   13558:	8009883a 	mov	r4,r16
   1355c:	df003d15 	stw	fp,244(sp)
   13560:	00179d00 	call	179d0 <memchr>
   13564:	da003d17 	ldw	r8,244(sp)
   13568:	10046826 	beq	r2,zero,1470c <___vfprintf_internal_r+0x1e68>
   1356c:	1405c83a 	sub	r2,r2,r16
   13570:	d8802b15 	stw	r2,172(sp)
   13574:	1003e016 	blt	r2,zero,144f8 <___vfprintf_internal_r+0x1c54>
   13578:	df002783 	ldbu	fp,158(sp)
   1357c:	d8802915 	stw	r2,164(sp)
   13580:	dcc02e15 	stw	r19,184(sp)
   13584:	d8002a15 	stw	zero,168(sp)
   13588:	d8003215 	stw	zero,200(sp)
   1358c:	003ea206 	br	13018 <__alt_data_end+0xfc013018>
   13590:	8025883a 	mov	r18,r16
   13594:	dc002903 	ldbu	r16,164(sp)
   13598:	e011883a 	mov	r8,fp
   1359c:	84003fcc 	andi	r16,r16,255
   135a0:	803f8d26 	beq	r16,zero,133d8 <__alt_data_end+0xfc0133d8>
   135a4:	d8c02b03 	ldbu	r3,172(sp)
   135a8:	d8c02785 	stb	r3,158(sp)
   135ac:	003f8a06 	br	133d8 <__alt_data_end+0xfc0133d8>
   135b0:	8025883a 	mov	r18,r16
   135b4:	dc002903 	ldbu	r16,164(sp)
   135b8:	e011883a 	mov	r8,fp
   135bc:	84003fcc 	andi	r16,r16,255
   135c0:	8005661e 	bne	r16,zero,14b5c <___vfprintf_internal_r+0x22b8>
   135c4:	010000f4 	movhi	r4,3
   135c8:	212e4004 	addi	r4,r4,-18176
   135cc:	d9003915 	stw	r4,228(sp)
   135d0:	9080080c 	andi	r2,r18,32
   135d4:	103f9f1e 	bne	r2,zero,13454 <__alt_data_end+0xfc013454>
   135d8:	9080040c 	andi	r2,r18,16
   135dc:	1002eb26 	beq	r2,zero,1418c <___vfprintf_internal_r+0x18e8>
   135e0:	d8802e17 	ldw	r2,184(sp)
   135e4:	002d883a 	mov	r22,zero
   135e8:	14c00017 	ldw	r19,0(r2)
   135ec:	10800104 	addi	r2,r2,4
   135f0:	d8802e15 	stw	r2,184(sp)
   135f4:	003f9c06 	br	13468 <__alt_data_end+0xfc013468>
   135f8:	d8802b07 	ldb	r2,172(sp)
   135fc:	1002e11e 	bne	r2,zero,14184 <___vfprintf_internal_r+0x18e0>
   13600:	00c00044 	movi	r3,1
   13604:	d8c02905 	stb	r3,164(sp)
   13608:	00c00804 	movi	r3,32
   1360c:	d8c02b05 	stb	r3,172(sp)
   13610:	ac400007 	ldb	r17,0(r21)
   13614:	003d0506 	br	12a2c <__alt_data_end+0xfc012a2c>
   13618:	84000054 	ori	r16,r16,1
   1361c:	ac400007 	ldb	r17,0(r21)
   13620:	003d0206 	br	12a2c <__alt_data_end+0xfc012a2c>
   13624:	8025883a 	mov	r18,r16
   13628:	dc002903 	ldbu	r16,164(sp)
   1362c:	e011883a 	mov	r8,fp
   13630:	84003fcc 	andi	r16,r16,255
   13634:	803de726 	beq	r16,zero,12dd4 <__alt_data_end+0xfc012dd4>
   13638:	d8c02b03 	ldbu	r3,172(sp)
   1363c:	d8c02785 	stb	r3,158(sp)
   13640:	003de406 	br	12dd4 <__alt_data_end+0xfc012dd4>
   13644:	84001014 	ori	r16,r16,64
   13648:	ac400007 	ldb	r17,0(r21)
   1364c:	003cf706 	br	12a2c <__alt_data_end+0xfc012a2c>
   13650:	ac400007 	ldb	r17,0(r21)
   13654:	00801b04 	movi	r2,108
   13658:	88838f26 	beq	r17,r2,14498 <___vfprintf_internal_r+0x1bf4>
   1365c:	84000414 	ori	r16,r16,16
   13660:	003cf206 	br	12a2c <__alt_data_end+0xfc012a2c>
   13664:	8025883a 	mov	r18,r16
   13668:	dc002903 	ldbu	r16,164(sp)
   1366c:	e011883a 	mov	r8,fp
   13670:	84003fcc 	andi	r16,r16,255
   13674:	80053f1e 	bne	r16,zero,14b74 <___vfprintf_internal_r+0x22d0>
   13678:	9080080c 	andi	r2,r18,32
   1367c:	1002d226 	beq	r2,zero,141c8 <___vfprintf_internal_r+0x1924>
   13680:	d9002e17 	ldw	r4,184(sp)
   13684:	d9402f17 	ldw	r5,188(sp)
   13688:	20800017 	ldw	r2,0(r4)
   1368c:	2807d7fa 	srai	r3,r5,31
   13690:	21000104 	addi	r4,r4,4
   13694:	d9002e15 	stw	r4,184(sp)
   13698:	11400015 	stw	r5,0(r2)
   1369c:	10c00115 	stw	r3,4(r2)
   136a0:	003cb806 	br	12984 <__alt_data_end+0xfc012984>
   136a4:	d8c02e17 	ldw	r3,184(sp)
   136a8:	d9002e17 	ldw	r4,184(sp)
   136ac:	8025883a 	mov	r18,r16
   136b0:	18800017 	ldw	r2,0(r3)
   136b4:	21000104 	addi	r4,r4,4
   136b8:	00c00044 	movi	r3,1
   136bc:	e011883a 	mov	r8,fp
   136c0:	d8c02915 	stw	r3,164(sp)
   136c4:	d8002785 	stb	zero,158(sp)
   136c8:	d8801405 	stb	r2,80(sp)
   136cc:	d9002e15 	stw	r4,184(sp)
   136d0:	d8c02b15 	stw	r3,172(sp)
   136d4:	d8002a15 	stw	zero,168(sp)
   136d8:	d8003215 	stw	zero,200(sp)
   136dc:	dc001404 	addi	r16,sp,80
   136e0:	0039883a 	mov	fp,zero
   136e4:	003e5306 	br	13034 <__alt_data_end+0xfc013034>
   136e8:	010000f4 	movhi	r4,3
   136ec:	212e4004 	addi	r4,r4,-18176
   136f0:	0039883a 	mov	fp,zero
   136f4:	d9003915 	stw	r4,228(sp)
   136f8:	04401e04 	movi	r17,120
   136fc:	003f6906 	br	134a4 <__alt_data_end+0xfc0134a4>
   13700:	8025883a 	mov	r18,r16
   13704:	dc002903 	ldbu	r16,164(sp)
   13708:	e011883a 	mov	r8,fp
   1370c:	84003fcc 	andi	r16,r16,255
   13710:	8005081e 	bne	r16,zero,14b34 <___vfprintf_internal_r+0x2290>
   13714:	883d6126 	beq	r17,zero,12c9c <__alt_data_end+0xfc012c9c>
   13718:	00c00044 	movi	r3,1
   1371c:	d8c02915 	stw	r3,164(sp)
   13720:	dc401405 	stb	r17,80(sp)
   13724:	d8002785 	stb	zero,158(sp)
   13728:	003fe906 	br	136d0 <__alt_data_end+0xfc0136d0>
   1372c:	014000f4 	movhi	r5,3
   13730:	296e4004 	addi	r5,r5,-18176
   13734:	d9403915 	stw	r5,228(sp)
   13738:	d8c02e15 	stw	r3,184(sp)
   1373c:	1025883a 	mov	r18,r2
   13740:	04401e04 	movi	r17,120
   13744:	9d84b03a 	or	r2,r19,r22
   13748:	1000fc1e 	bne	r2,zero,13b3c <___vfprintf_internal_r+0x1298>
   1374c:	0039883a 	mov	fp,zero
   13750:	00800084 	movi	r2,2
   13754:	10803fcc 	andi	r2,r2,255
   13758:	00c00044 	movi	r3,1
   1375c:	10c20f26 	beq	r2,r3,13f9c <___vfprintf_internal_r+0x16f8>
   13760:	00c00084 	movi	r3,2
   13764:	10fd3326 	beq	r2,r3,12c34 <__alt_data_end+0xfc012c34>
   13768:	003e0b06 	br	12f98 <__alt_data_end+0xfc012f98>
   1376c:	d8c02017 	ldw	r3,128(sp)
   13770:	003e7106 	br	13138 <__alt_data_end+0xfc013138>
   13774:	00801944 	movi	r2,101
   13778:	14407e0e 	bge	r2,r17,13974 <___vfprintf_internal_r+0x10d0>
   1377c:	d9003617 	ldw	r4,216(sp)
   13780:	d9403817 	ldw	r5,224(sp)
   13784:	000d883a 	mov	r6,zero
   13788:	000f883a 	mov	r7,zero
   1378c:	d8c03c15 	stw	r3,240(sp)
   13790:	da003d15 	stw	r8,244(sp)
   13794:	001e9340 	call	1e934 <__eqdf2>
   13798:	d8c03c17 	ldw	r3,240(sp)
   1379c:	da003d17 	ldw	r8,244(sp)
   137a0:	1000f71e 	bne	r2,zero,13b80 <___vfprintf_internal_r+0x12dc>
   137a4:	d8801f17 	ldw	r2,124(sp)
   137a8:	010000f4 	movhi	r4,3
   137ac:	212e4704 	addi	r4,r4,-18148
   137b0:	18c00044 	addi	r3,r3,1
   137b4:	10800044 	addi	r2,r2,1
   137b8:	41000015 	stw	r4,0(r8)
   137bc:	01000044 	movi	r4,1
   137c0:	41000115 	stw	r4,4(r8)
   137c4:	d8c02015 	stw	r3,128(sp)
   137c8:	d8801f15 	stw	r2,124(sp)
   137cc:	010001c4 	movi	r4,7
   137d0:	2082b816 	blt	r4,r2,142b4 <___vfprintf_internal_r+0x1a10>
   137d4:	42000204 	addi	r8,r8,8
   137d8:	d8802617 	ldw	r2,152(sp)
   137dc:	d9403317 	ldw	r5,204(sp)
   137e0:	11400216 	blt	r2,r5,137ec <___vfprintf_internal_r+0xf48>
   137e4:	9080004c 	andi	r2,r18,1
   137e8:	103eb326 	beq	r2,zero,132b8 <__alt_data_end+0xfc0132b8>
   137ec:	d8803717 	ldw	r2,220(sp)
   137f0:	d9003417 	ldw	r4,208(sp)
   137f4:	d9403717 	ldw	r5,220(sp)
   137f8:	1887883a 	add	r3,r3,r2
   137fc:	d8801f17 	ldw	r2,124(sp)
   13800:	41000015 	stw	r4,0(r8)
   13804:	41400115 	stw	r5,4(r8)
   13808:	10800044 	addi	r2,r2,1
   1380c:	d8c02015 	stw	r3,128(sp)
   13810:	d8801f15 	stw	r2,124(sp)
   13814:	010001c4 	movi	r4,7
   13818:	20832916 	blt	r4,r2,144c0 <___vfprintf_internal_r+0x1c1c>
   1381c:	42000204 	addi	r8,r8,8
   13820:	d8803317 	ldw	r2,204(sp)
   13824:	143fffc4 	addi	r16,r2,-1
   13828:	043ea30e 	bge	zero,r16,132b8 <__alt_data_end+0xfc0132b8>
   1382c:	04400404 	movi	r17,16
   13830:	d8801f17 	ldw	r2,124(sp)
   13834:	8c00880e 	bge	r17,r16,13a58 <___vfprintf_internal_r+0x11b4>
   13838:	014000f4 	movhi	r5,3
   1383c:	296e4f84 	addi	r5,r5,-18114
   13840:	d9402c15 	stw	r5,176(sp)
   13844:	058001c4 	movi	r22,7
   13848:	dcc02d17 	ldw	r19,180(sp)
   1384c:	00000306 	br	1385c <___vfprintf_internal_r+0xfb8>
   13850:	42000204 	addi	r8,r8,8
   13854:	843ffc04 	addi	r16,r16,-16
   13858:	8c00820e 	bge	r17,r16,13a64 <___vfprintf_internal_r+0x11c0>
   1385c:	18c00404 	addi	r3,r3,16
   13860:	10800044 	addi	r2,r2,1
   13864:	45000015 	stw	r20,0(r8)
   13868:	44400115 	stw	r17,4(r8)
   1386c:	d8c02015 	stw	r3,128(sp)
   13870:	d8801f15 	stw	r2,124(sp)
   13874:	b0bff60e 	bge	r22,r2,13850 <__alt_data_end+0xfc013850>
   13878:	d9801e04 	addi	r6,sp,120
   1387c:	b80b883a 	mov	r5,r23
   13880:	9809883a 	mov	r4,r19
   13884:	001abb00 	call	1abb0 <__sprint_r>
   13888:	103d0a1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   1388c:	d8c02017 	ldw	r3,128(sp)
   13890:	d8801f17 	ldw	r2,124(sp)
   13894:	da000404 	addi	r8,sp,16
   13898:	003fee06 	br	13854 <__alt_data_end+0xfc013854>
   1389c:	d9403117 	ldw	r5,196(sp)
   138a0:	d8802917 	ldw	r2,164(sp)
   138a4:	28adc83a 	sub	r22,r5,r2
   138a8:	05be410e 	bge	zero,r22,131b0 <__alt_data_end+0xfc0131b0>
   138ac:	07000404 	movi	fp,16
   138b0:	d8801f17 	ldw	r2,124(sp)
   138b4:	e5838f0e 	bge	fp,r22,146f4 <___vfprintf_internal_r+0x1e50>
   138b8:	014000f4 	movhi	r5,3
   138bc:	296e4f84 	addi	r5,r5,-18114
   138c0:	dc403015 	stw	r17,192(sp)
   138c4:	d9402c15 	stw	r5,176(sp)
   138c8:	b023883a 	mov	r17,r22
   138cc:	04c001c4 	movi	r19,7
   138d0:	a82d883a 	mov	r22,r21
   138d4:	902b883a 	mov	r21,r18
   138d8:	8025883a 	mov	r18,r16
   138dc:	dc002d17 	ldw	r16,180(sp)
   138e0:	00000306 	br	138f0 <___vfprintf_internal_r+0x104c>
   138e4:	8c7ffc04 	addi	r17,r17,-16
   138e8:	42000204 	addi	r8,r8,8
   138ec:	e440110e 	bge	fp,r17,13934 <___vfprintf_internal_r+0x1090>
   138f0:	18c00404 	addi	r3,r3,16
   138f4:	10800044 	addi	r2,r2,1
   138f8:	45000015 	stw	r20,0(r8)
   138fc:	47000115 	stw	fp,4(r8)
   13900:	d8c02015 	stw	r3,128(sp)
   13904:	d8801f15 	stw	r2,124(sp)
   13908:	98bff60e 	bge	r19,r2,138e4 <__alt_data_end+0xfc0138e4>
   1390c:	d9801e04 	addi	r6,sp,120
   13910:	b80b883a 	mov	r5,r23
   13914:	8009883a 	mov	r4,r16
   13918:	001abb00 	call	1abb0 <__sprint_r>
   1391c:	103ce51e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13920:	8c7ffc04 	addi	r17,r17,-16
   13924:	d8c02017 	ldw	r3,128(sp)
   13928:	d8801f17 	ldw	r2,124(sp)
   1392c:	da000404 	addi	r8,sp,16
   13930:	e47fef16 	blt	fp,r17,138f0 <__alt_data_end+0xfc0138f0>
   13934:	9021883a 	mov	r16,r18
   13938:	a825883a 	mov	r18,r21
   1393c:	b02b883a 	mov	r21,r22
   13940:	882d883a 	mov	r22,r17
   13944:	dc403017 	ldw	r17,192(sp)
   13948:	d9002c17 	ldw	r4,176(sp)
   1394c:	1d87883a 	add	r3,r3,r22
   13950:	10800044 	addi	r2,r2,1
   13954:	41000015 	stw	r4,0(r8)
   13958:	45800115 	stw	r22,4(r8)
   1395c:	d8c02015 	stw	r3,128(sp)
   13960:	d8801f15 	stw	r2,124(sp)
   13964:	010001c4 	movi	r4,7
   13968:	20818e16 	blt	r4,r2,13fa4 <___vfprintf_internal_r+0x1700>
   1396c:	42000204 	addi	r8,r8,8
   13970:	003e0f06 	br	131b0 <__alt_data_end+0xfc0131b0>
   13974:	d9403317 	ldw	r5,204(sp)
   13978:	00800044 	movi	r2,1
   1397c:	18c00044 	addi	r3,r3,1
   13980:	1141530e 	bge	r2,r5,13ed0 <___vfprintf_internal_r+0x162c>
   13984:	dc401f17 	ldw	r17,124(sp)
   13988:	00800044 	movi	r2,1
   1398c:	40800115 	stw	r2,4(r8)
   13990:	8c400044 	addi	r17,r17,1
   13994:	44000015 	stw	r16,0(r8)
   13998:	d8c02015 	stw	r3,128(sp)
   1399c:	dc401f15 	stw	r17,124(sp)
   139a0:	008001c4 	movi	r2,7
   139a4:	14416b16 	blt	r2,r17,13f54 <___vfprintf_internal_r+0x16b0>
   139a8:	42000204 	addi	r8,r8,8
   139ac:	d8803717 	ldw	r2,220(sp)
   139b0:	d9003417 	ldw	r4,208(sp)
   139b4:	8c400044 	addi	r17,r17,1
   139b8:	10c7883a 	add	r3,r2,r3
   139bc:	40800115 	stw	r2,4(r8)
   139c0:	41000015 	stw	r4,0(r8)
   139c4:	d8c02015 	stw	r3,128(sp)
   139c8:	dc401f15 	stw	r17,124(sp)
   139cc:	008001c4 	movi	r2,7
   139d0:	14416916 	blt	r2,r17,13f78 <___vfprintf_internal_r+0x16d4>
   139d4:	45800204 	addi	r22,r8,8
   139d8:	d9003617 	ldw	r4,216(sp)
   139dc:	d9403817 	ldw	r5,224(sp)
   139e0:	000d883a 	mov	r6,zero
   139e4:	000f883a 	mov	r7,zero
   139e8:	d8c03c15 	stw	r3,240(sp)
   139ec:	001e9340 	call	1e934 <__eqdf2>
   139f0:	d8c03c17 	ldw	r3,240(sp)
   139f4:	1000bc26 	beq	r2,zero,13ce8 <___vfprintf_internal_r+0x1444>
   139f8:	d9403317 	ldw	r5,204(sp)
   139fc:	84000044 	addi	r16,r16,1
   13a00:	8c400044 	addi	r17,r17,1
   13a04:	28bfffc4 	addi	r2,r5,-1
   13a08:	1887883a 	add	r3,r3,r2
   13a0c:	b0800115 	stw	r2,4(r22)
   13a10:	b4000015 	stw	r16,0(r22)
   13a14:	d8c02015 	stw	r3,128(sp)
   13a18:	dc401f15 	stw	r17,124(sp)
   13a1c:	008001c4 	movi	r2,7
   13a20:	14414316 	blt	r2,r17,13f30 <___vfprintf_internal_r+0x168c>
   13a24:	b5800204 	addi	r22,r22,8
   13a28:	d9003a17 	ldw	r4,232(sp)
   13a2c:	df0022c4 	addi	fp,sp,139
   13a30:	8c400044 	addi	r17,r17,1
   13a34:	20c7883a 	add	r3,r4,r3
   13a38:	b7000015 	stw	fp,0(r22)
   13a3c:	b1000115 	stw	r4,4(r22)
   13a40:	d8c02015 	stw	r3,128(sp)
   13a44:	dc401f15 	stw	r17,124(sp)
   13a48:	008001c4 	movi	r2,7
   13a4c:	14400e16 	blt	r2,r17,13a88 <___vfprintf_internal_r+0x11e4>
   13a50:	b2000204 	addi	r8,r22,8
   13a54:	003e1806 	br	132b8 <__alt_data_end+0xfc0132b8>
   13a58:	010000f4 	movhi	r4,3
   13a5c:	212e4f84 	addi	r4,r4,-18114
   13a60:	d9002c15 	stw	r4,176(sp)
   13a64:	d9002c17 	ldw	r4,176(sp)
   13a68:	1c07883a 	add	r3,r3,r16
   13a6c:	44000115 	stw	r16,4(r8)
   13a70:	41000015 	stw	r4,0(r8)
   13a74:	10800044 	addi	r2,r2,1
   13a78:	d8c02015 	stw	r3,128(sp)
   13a7c:	d8801f15 	stw	r2,124(sp)
   13a80:	010001c4 	movi	r4,7
   13a84:	20be0b0e 	bge	r4,r2,132b4 <__alt_data_end+0xfc0132b4>
   13a88:	d9002d17 	ldw	r4,180(sp)
   13a8c:	d9801e04 	addi	r6,sp,120
   13a90:	b80b883a 	mov	r5,r23
   13a94:	001abb00 	call	1abb0 <__sprint_r>
   13a98:	103c861e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13a9c:	d8c02017 	ldw	r3,128(sp)
   13aa0:	da000404 	addi	r8,sp,16
   13aa4:	003e0406 	br	132b8 <__alt_data_end+0xfc0132b8>
   13aa8:	d9002d17 	ldw	r4,180(sp)
   13aac:	d9801e04 	addi	r6,sp,120
   13ab0:	b80b883a 	mov	r5,r23
   13ab4:	001abb00 	call	1abb0 <__sprint_r>
   13ab8:	103e3b26 	beq	r2,zero,133a8 <__alt_data_end+0xfc0133a8>
   13abc:	003c7d06 	br	12cb4 <__alt_data_end+0xfc012cb4>
   13ac0:	d9002d17 	ldw	r4,180(sp)
   13ac4:	d9801e04 	addi	r6,sp,120
   13ac8:	b80b883a 	mov	r5,r23
   13acc:	001abb00 	call	1abb0 <__sprint_r>
   13ad0:	103c781e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13ad4:	d8c02017 	ldw	r3,128(sp)
   13ad8:	da000404 	addi	r8,sp,16
   13adc:	003de906 	br	13284 <__alt_data_end+0xfc013284>
   13ae0:	d9002d17 	ldw	r4,180(sp)
   13ae4:	d9801e04 	addi	r6,sp,120
   13ae8:	b80b883a 	mov	r5,r23
   13aec:	001abb00 	call	1abb0 <__sprint_r>
   13af0:	103c701e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13af4:	d8c02017 	ldw	r3,128(sp)
   13af8:	da000404 	addi	r8,sp,16
   13afc:	003d9b06 	br	1316c <__alt_data_end+0xfc01316c>
   13b00:	d9002d17 	ldw	r4,180(sp)
   13b04:	d9801e04 	addi	r6,sp,120
   13b08:	b80b883a 	mov	r5,r23
   13b0c:	001abb00 	call	1abb0 <__sprint_r>
   13b10:	103c681e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13b14:	d8c02017 	ldw	r3,128(sp)
   13b18:	da000404 	addi	r8,sp,16
   13b1c:	003da106 	br	131a4 <__alt_data_end+0xfc0131a4>
   13b20:	d9402a17 	ldw	r5,168(sp)
   13b24:	d8002785 	stb	zero,158(sp)
   13b28:	283f0616 	blt	r5,zero,13744 <__alt_data_end+0xfc013744>
   13b2c:	00ffdfc4 	movi	r3,-129
   13b30:	9d84b03a 	or	r2,r19,r22
   13b34:	90e4703a 	and	r18,r18,r3
   13b38:	103c3b26 	beq	r2,zero,12c28 <__alt_data_end+0xfc012c28>
   13b3c:	0039883a 	mov	fp,zero
   13b40:	003e5806 	br	134a4 <__alt_data_end+0xfc0134a4>
   13b44:	9080040c 	andi	r2,r18,16
   13b48:	1001b326 	beq	r2,zero,14218 <___vfprintf_internal_r+0x1974>
   13b4c:	d8c02e17 	ldw	r3,184(sp)
   13b50:	d9002a17 	ldw	r4,168(sp)
   13b54:	d8002785 	stb	zero,158(sp)
   13b58:	18800104 	addi	r2,r3,4
   13b5c:	1cc00017 	ldw	r19,0(r3)
   13b60:	002d883a 	mov	r22,zero
   13b64:	2001b516 	blt	r4,zero,1423c <___vfprintf_internal_r+0x1998>
   13b68:	00ffdfc4 	movi	r3,-129
   13b6c:	d8802e15 	stw	r2,184(sp)
   13b70:	90e4703a 	and	r18,r18,r3
   13b74:	983d0526 	beq	r19,zero,12f8c <__alt_data_end+0xfc012f8c>
   13b78:	0039883a 	mov	fp,zero
   13b7c:	003d0806 	br	12fa0 <__alt_data_end+0xfc012fa0>
   13b80:	dc402617 	ldw	r17,152(sp)
   13b84:	0441d30e 	bge	zero,r17,142d4 <___vfprintf_internal_r+0x1a30>
   13b88:	dc403217 	ldw	r17,200(sp)
   13b8c:	d8803317 	ldw	r2,204(sp)
   13b90:	1440010e 	bge	r2,r17,13b98 <___vfprintf_internal_r+0x12f4>
   13b94:	1023883a 	mov	r17,r2
   13b98:	04400a0e 	bge	zero,r17,13bc4 <___vfprintf_internal_r+0x1320>
   13b9c:	d8801f17 	ldw	r2,124(sp)
   13ba0:	1c47883a 	add	r3,r3,r17
   13ba4:	44000015 	stw	r16,0(r8)
   13ba8:	10800044 	addi	r2,r2,1
   13bac:	44400115 	stw	r17,4(r8)
   13bb0:	d8c02015 	stw	r3,128(sp)
   13bb4:	d8801f15 	stw	r2,124(sp)
   13bb8:	010001c4 	movi	r4,7
   13bbc:	20826516 	blt	r4,r2,14554 <___vfprintf_internal_r+0x1cb0>
   13bc0:	42000204 	addi	r8,r8,8
   13bc4:	88026116 	blt	r17,zero,1454c <___vfprintf_internal_r+0x1ca8>
   13bc8:	d9003217 	ldw	r4,200(sp)
   13bcc:	2463c83a 	sub	r17,r4,r17
   13bd0:	04407b0e 	bge	zero,r17,13dc0 <___vfprintf_internal_r+0x151c>
   13bd4:	05800404 	movi	r22,16
   13bd8:	d8801f17 	ldw	r2,124(sp)
   13bdc:	b4419d0e 	bge	r22,r17,14254 <___vfprintf_internal_r+0x19b0>
   13be0:	010000f4 	movhi	r4,3
   13be4:	212e4f84 	addi	r4,r4,-18114
   13be8:	d9002c15 	stw	r4,176(sp)
   13bec:	070001c4 	movi	fp,7
   13bf0:	dcc02d17 	ldw	r19,180(sp)
   13bf4:	00000306 	br	13c04 <___vfprintf_internal_r+0x1360>
   13bf8:	42000204 	addi	r8,r8,8
   13bfc:	8c7ffc04 	addi	r17,r17,-16
   13c00:	b441970e 	bge	r22,r17,14260 <___vfprintf_internal_r+0x19bc>
   13c04:	18c00404 	addi	r3,r3,16
   13c08:	10800044 	addi	r2,r2,1
   13c0c:	45000015 	stw	r20,0(r8)
   13c10:	45800115 	stw	r22,4(r8)
   13c14:	d8c02015 	stw	r3,128(sp)
   13c18:	d8801f15 	stw	r2,124(sp)
   13c1c:	e0bff60e 	bge	fp,r2,13bf8 <__alt_data_end+0xfc013bf8>
   13c20:	d9801e04 	addi	r6,sp,120
   13c24:	b80b883a 	mov	r5,r23
   13c28:	9809883a 	mov	r4,r19
   13c2c:	001abb00 	call	1abb0 <__sprint_r>
   13c30:	103c201e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13c34:	d8c02017 	ldw	r3,128(sp)
   13c38:	d8801f17 	ldw	r2,124(sp)
   13c3c:	da000404 	addi	r8,sp,16
   13c40:	003fee06 	br	13bfc <__alt_data_end+0xfc013bfc>
   13c44:	d9002d17 	ldw	r4,180(sp)
   13c48:	d9801e04 	addi	r6,sp,120
   13c4c:	b80b883a 	mov	r5,r23
   13c50:	001abb00 	call	1abb0 <__sprint_r>
   13c54:	103c171e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13c58:	d8c02017 	ldw	r3,128(sp)
   13c5c:	df002787 	ldb	fp,158(sp)
   13c60:	da000404 	addi	r8,sp,16
   13c64:	003d3406 	br	13138 <__alt_data_end+0xfc013138>
   13c68:	9080040c 	andi	r2,r18,16
   13c6c:	10016126 	beq	r2,zero,141f4 <___vfprintf_internal_r+0x1950>
   13c70:	d9402e17 	ldw	r5,184(sp)
   13c74:	2cc00017 	ldw	r19,0(r5)
   13c78:	29400104 	addi	r5,r5,4
   13c7c:	d9402e15 	stw	r5,184(sp)
   13c80:	982dd7fa 	srai	r22,r19,31
   13c84:	b005883a 	mov	r2,r22
   13c88:	003c5a06 	br	12df4 <__alt_data_end+0xfc012df4>
   13c8c:	9080040c 	andi	r2,r18,16
   13c90:	10003526 	beq	r2,zero,13d68 <___vfprintf_internal_r+0x14c4>
   13c94:	d8c02e17 	ldw	r3,184(sp)
   13c98:	d9002a17 	ldw	r4,168(sp)
   13c9c:	d8002785 	stb	zero,158(sp)
   13ca0:	18800104 	addi	r2,r3,4
   13ca4:	1cc00017 	ldw	r19,0(r3)
   13ca8:	002d883a 	mov	r22,zero
   13cac:	20003716 	blt	r4,zero,13d8c <___vfprintf_internal_r+0x14e8>
   13cb0:	00ffdfc4 	movi	r3,-129
   13cb4:	d8802e15 	stw	r2,184(sp)
   13cb8:	90e4703a 	and	r18,r18,r3
   13cbc:	0039883a 	mov	fp,zero
   13cc0:	983dd426 	beq	r19,zero,13414 <__alt_data_end+0xfc013414>
   13cc4:	00800244 	movi	r2,9
   13cc8:	14fc5336 	bltu	r2,r19,12e18 <__alt_data_end+0xfc012e18>
   13ccc:	d8c02817 	ldw	r3,160(sp)
   13cd0:	dc001dc4 	addi	r16,sp,119
   13cd4:	9cc00c04 	addi	r19,r19,48
   13cd8:	1c07c83a 	sub	r3,r3,r16
   13cdc:	dcc01dc5 	stb	r19,119(sp)
   13ce0:	d8c02b15 	stw	r3,172(sp)
   13ce4:	003cc606 	br	13000 <__alt_data_end+0xfc013000>
   13ce8:	d8803317 	ldw	r2,204(sp)
   13cec:	143fffc4 	addi	r16,r2,-1
   13cf0:	043f4d0e 	bge	zero,r16,13a28 <__alt_data_end+0xfc013a28>
   13cf4:	07000404 	movi	fp,16
   13cf8:	e400810e 	bge	fp,r16,13f00 <___vfprintf_internal_r+0x165c>
   13cfc:	014000f4 	movhi	r5,3
   13d00:	296e4f84 	addi	r5,r5,-18114
   13d04:	d9402c15 	stw	r5,176(sp)
   13d08:	01c001c4 	movi	r7,7
   13d0c:	dcc02d17 	ldw	r19,180(sp)
   13d10:	00000306 	br	13d20 <___vfprintf_internal_r+0x147c>
   13d14:	b5800204 	addi	r22,r22,8
   13d18:	843ffc04 	addi	r16,r16,-16
   13d1c:	e4007b0e 	bge	fp,r16,13f0c <___vfprintf_internal_r+0x1668>
   13d20:	18c00404 	addi	r3,r3,16
   13d24:	8c400044 	addi	r17,r17,1
   13d28:	b5000015 	stw	r20,0(r22)
   13d2c:	b7000115 	stw	fp,4(r22)
   13d30:	d8c02015 	stw	r3,128(sp)
   13d34:	dc401f15 	stw	r17,124(sp)
   13d38:	3c7ff60e 	bge	r7,r17,13d14 <__alt_data_end+0xfc013d14>
   13d3c:	d9801e04 	addi	r6,sp,120
   13d40:	b80b883a 	mov	r5,r23
   13d44:	9809883a 	mov	r4,r19
   13d48:	d9c03c15 	stw	r7,240(sp)
   13d4c:	001abb00 	call	1abb0 <__sprint_r>
   13d50:	d9c03c17 	ldw	r7,240(sp)
   13d54:	103bd71e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13d58:	d8c02017 	ldw	r3,128(sp)
   13d5c:	dc401f17 	ldw	r17,124(sp)
   13d60:	dd800404 	addi	r22,sp,16
   13d64:	003fec06 	br	13d18 <__alt_data_end+0xfc013d18>
   13d68:	9080100c 	andi	r2,r18,64
   13d6c:	d8002785 	stb	zero,158(sp)
   13d70:	10010e26 	beq	r2,zero,141ac <___vfprintf_internal_r+0x1908>
   13d74:	d9402e17 	ldw	r5,184(sp)
   13d78:	d8c02a17 	ldw	r3,168(sp)
   13d7c:	002d883a 	mov	r22,zero
   13d80:	28800104 	addi	r2,r5,4
   13d84:	2cc0000b 	ldhu	r19,0(r5)
   13d88:	183fc90e 	bge	r3,zero,13cb0 <__alt_data_end+0xfc013cb0>
   13d8c:	d8802e15 	stw	r2,184(sp)
   13d90:	0039883a 	mov	fp,zero
   13d94:	9d84b03a 	or	r2,r19,r22
   13d98:	103c1e1e 	bne	r2,zero,12e14 <__alt_data_end+0xfc012e14>
   13d9c:	00800044 	movi	r2,1
   13da0:	003e6c06 	br	13754 <__alt_data_end+0xfc013754>
   13da4:	d9002d17 	ldw	r4,180(sp)
   13da8:	d9801e04 	addi	r6,sp,120
   13dac:	b80b883a 	mov	r5,r23
   13db0:	001abb00 	call	1abb0 <__sprint_r>
   13db4:	103bbf1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13db8:	d8c02017 	ldw	r3,128(sp)
   13dbc:	da000404 	addi	r8,sp,16
   13dc0:	d9003217 	ldw	r4,200(sp)
   13dc4:	d8802617 	ldw	r2,152(sp)
   13dc8:	d9403317 	ldw	r5,204(sp)
   13dcc:	8123883a 	add	r17,r16,r4
   13dd0:	11400216 	blt	r2,r5,13ddc <___vfprintf_internal_r+0x1538>
   13dd4:	9100004c 	andi	r4,r18,1
   13dd8:	20000d26 	beq	r4,zero,13e10 <___vfprintf_internal_r+0x156c>
   13ddc:	d9003717 	ldw	r4,220(sp)
   13de0:	d9403417 	ldw	r5,208(sp)
   13de4:	1907883a 	add	r3,r3,r4
   13de8:	d9001f17 	ldw	r4,124(sp)
   13dec:	41400015 	stw	r5,0(r8)
   13df0:	d9403717 	ldw	r5,220(sp)
   13df4:	21000044 	addi	r4,r4,1
   13df8:	d8c02015 	stw	r3,128(sp)
   13dfc:	41400115 	stw	r5,4(r8)
   13e00:	d9001f15 	stw	r4,124(sp)
   13e04:	014001c4 	movi	r5,7
   13e08:	2901e816 	blt	r5,r4,145ac <___vfprintf_internal_r+0x1d08>
   13e0c:	42000204 	addi	r8,r8,8
   13e10:	d9003317 	ldw	r4,204(sp)
   13e14:	8121883a 	add	r16,r16,r4
   13e18:	2085c83a 	sub	r2,r4,r2
   13e1c:	8461c83a 	sub	r16,r16,r17
   13e20:	1400010e 	bge	r2,r16,13e28 <___vfprintf_internal_r+0x1584>
   13e24:	1021883a 	mov	r16,r2
   13e28:	04000a0e 	bge	zero,r16,13e54 <___vfprintf_internal_r+0x15b0>
   13e2c:	d9001f17 	ldw	r4,124(sp)
   13e30:	1c07883a 	add	r3,r3,r16
   13e34:	44400015 	stw	r17,0(r8)
   13e38:	21000044 	addi	r4,r4,1
   13e3c:	44000115 	stw	r16,4(r8)
   13e40:	d8c02015 	stw	r3,128(sp)
   13e44:	d9001f15 	stw	r4,124(sp)
   13e48:	014001c4 	movi	r5,7
   13e4c:	2901fb16 	blt	r5,r4,1463c <___vfprintf_internal_r+0x1d98>
   13e50:	42000204 	addi	r8,r8,8
   13e54:	8001f716 	blt	r16,zero,14634 <___vfprintf_internal_r+0x1d90>
   13e58:	1421c83a 	sub	r16,r2,r16
   13e5c:	043d160e 	bge	zero,r16,132b8 <__alt_data_end+0xfc0132b8>
   13e60:	04400404 	movi	r17,16
   13e64:	d8801f17 	ldw	r2,124(sp)
   13e68:	8c3efb0e 	bge	r17,r16,13a58 <__alt_data_end+0xfc013a58>
   13e6c:	014000f4 	movhi	r5,3
   13e70:	296e4f84 	addi	r5,r5,-18114
   13e74:	d9402c15 	stw	r5,176(sp)
   13e78:	058001c4 	movi	r22,7
   13e7c:	dcc02d17 	ldw	r19,180(sp)
   13e80:	00000306 	br	13e90 <___vfprintf_internal_r+0x15ec>
   13e84:	42000204 	addi	r8,r8,8
   13e88:	843ffc04 	addi	r16,r16,-16
   13e8c:	8c3ef50e 	bge	r17,r16,13a64 <__alt_data_end+0xfc013a64>
   13e90:	18c00404 	addi	r3,r3,16
   13e94:	10800044 	addi	r2,r2,1
   13e98:	45000015 	stw	r20,0(r8)
   13e9c:	44400115 	stw	r17,4(r8)
   13ea0:	d8c02015 	stw	r3,128(sp)
   13ea4:	d8801f15 	stw	r2,124(sp)
   13ea8:	b0bff60e 	bge	r22,r2,13e84 <__alt_data_end+0xfc013e84>
   13eac:	d9801e04 	addi	r6,sp,120
   13eb0:	b80b883a 	mov	r5,r23
   13eb4:	9809883a 	mov	r4,r19
   13eb8:	001abb00 	call	1abb0 <__sprint_r>
   13ebc:	103b7d1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13ec0:	d8c02017 	ldw	r3,128(sp)
   13ec4:	d8801f17 	ldw	r2,124(sp)
   13ec8:	da000404 	addi	r8,sp,16
   13ecc:	003fee06 	br	13e88 <__alt_data_end+0xfc013e88>
   13ed0:	9088703a 	and	r4,r18,r2
   13ed4:	203eab1e 	bne	r4,zero,13984 <__alt_data_end+0xfc013984>
   13ed8:	dc401f17 	ldw	r17,124(sp)
   13edc:	40800115 	stw	r2,4(r8)
   13ee0:	44000015 	stw	r16,0(r8)
   13ee4:	8c400044 	addi	r17,r17,1
   13ee8:	d8c02015 	stw	r3,128(sp)
   13eec:	dc401f15 	stw	r17,124(sp)
   13ef0:	008001c4 	movi	r2,7
   13ef4:	14400e16 	blt	r2,r17,13f30 <___vfprintf_internal_r+0x168c>
   13ef8:	45800204 	addi	r22,r8,8
   13efc:	003eca06 	br	13a28 <__alt_data_end+0xfc013a28>
   13f00:	010000f4 	movhi	r4,3
   13f04:	212e4f84 	addi	r4,r4,-18114
   13f08:	d9002c15 	stw	r4,176(sp)
   13f0c:	d8802c17 	ldw	r2,176(sp)
   13f10:	1c07883a 	add	r3,r3,r16
   13f14:	8c400044 	addi	r17,r17,1
   13f18:	b0800015 	stw	r2,0(r22)
   13f1c:	b4000115 	stw	r16,4(r22)
   13f20:	d8c02015 	stw	r3,128(sp)
   13f24:	dc401f15 	stw	r17,124(sp)
   13f28:	008001c4 	movi	r2,7
   13f2c:	147ebd0e 	bge	r2,r17,13a24 <__alt_data_end+0xfc013a24>
   13f30:	d9002d17 	ldw	r4,180(sp)
   13f34:	d9801e04 	addi	r6,sp,120
   13f38:	b80b883a 	mov	r5,r23
   13f3c:	001abb00 	call	1abb0 <__sprint_r>
   13f40:	103b5c1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13f44:	d8c02017 	ldw	r3,128(sp)
   13f48:	dc401f17 	ldw	r17,124(sp)
   13f4c:	dd800404 	addi	r22,sp,16
   13f50:	003eb506 	br	13a28 <__alt_data_end+0xfc013a28>
   13f54:	d9002d17 	ldw	r4,180(sp)
   13f58:	d9801e04 	addi	r6,sp,120
   13f5c:	b80b883a 	mov	r5,r23
   13f60:	001abb00 	call	1abb0 <__sprint_r>
   13f64:	103b531e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13f68:	d8c02017 	ldw	r3,128(sp)
   13f6c:	dc401f17 	ldw	r17,124(sp)
   13f70:	da000404 	addi	r8,sp,16
   13f74:	003e8d06 	br	139ac <__alt_data_end+0xfc0139ac>
   13f78:	d9002d17 	ldw	r4,180(sp)
   13f7c:	d9801e04 	addi	r6,sp,120
   13f80:	b80b883a 	mov	r5,r23
   13f84:	001abb00 	call	1abb0 <__sprint_r>
   13f88:	103b4a1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13f8c:	d8c02017 	ldw	r3,128(sp)
   13f90:	dc401f17 	ldw	r17,124(sp)
   13f94:	dd800404 	addi	r22,sp,16
   13f98:	003e8f06 	br	139d8 <__alt_data_end+0xfc0139d8>
   13f9c:	0027883a 	mov	r19,zero
   13fa0:	003f4a06 	br	13ccc <__alt_data_end+0xfc013ccc>
   13fa4:	d9002d17 	ldw	r4,180(sp)
   13fa8:	d9801e04 	addi	r6,sp,120
   13fac:	b80b883a 	mov	r5,r23
   13fb0:	001abb00 	call	1abb0 <__sprint_r>
   13fb4:	103b3f1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   13fb8:	d8c02017 	ldw	r3,128(sp)
   13fbc:	da000404 	addi	r8,sp,16
   13fc0:	003c7b06 	br	131b0 <__alt_data_end+0xfc0131b0>
   13fc4:	d9402a17 	ldw	r5,168(sp)
   13fc8:	04e7c83a 	sub	r19,zero,r19
   13fcc:	07000b44 	movi	fp,45
   13fd0:	9804c03a 	cmpne	r2,r19,zero
   13fd4:	05adc83a 	sub	r22,zero,r22
   13fd8:	df002785 	stb	fp,158(sp)
   13fdc:	b0adc83a 	sub	r22,r22,r2
   13fe0:	28017b16 	blt	r5,zero,145d0 <___vfprintf_internal_r+0x1d2c>
   13fe4:	00bfdfc4 	movi	r2,-129
   13fe8:	90a4703a 	and	r18,r18,r2
   13fec:	003b8906 	br	12e14 <__alt_data_end+0xfc012e14>
   13ff0:	d9003617 	ldw	r4,216(sp)
   13ff4:	d9403817 	ldw	r5,224(sp)
   13ff8:	da003d15 	stw	r8,244(sp)
   13ffc:	00193940 	call	19394 <__fpclassifyd>
   14000:	da003d17 	ldw	r8,244(sp)
   14004:	1000f026 	beq	r2,zero,143c8 <___vfprintf_internal_r+0x1b24>
   14008:	d9002a17 	ldw	r4,168(sp)
   1400c:	05bff7c4 	movi	r22,-33
   14010:	00bfffc4 	movi	r2,-1
   14014:	8dac703a 	and	r22,r17,r22
   14018:	20820026 	beq	r4,r2,1481c <___vfprintf_internal_r+0x1f78>
   1401c:	008011c4 	movi	r2,71
   14020:	b081f726 	beq	r22,r2,14800 <___vfprintf_internal_r+0x1f5c>
   14024:	d9003817 	ldw	r4,224(sp)
   14028:	90c04014 	ori	r3,r18,256
   1402c:	d8c02c15 	stw	r3,176(sp)
   14030:	20021516 	blt	r4,zero,14888 <___vfprintf_internal_r+0x1fe4>
   14034:	dcc03817 	ldw	r19,224(sp)
   14038:	d8002905 	stb	zero,164(sp)
   1403c:	00801984 	movi	r2,102
   14040:	8881f926 	beq	r17,r2,14828 <___vfprintf_internal_r+0x1f84>
   14044:	00801184 	movi	r2,70
   14048:	88821c26 	beq	r17,r2,148bc <___vfprintf_internal_r+0x2018>
   1404c:	00801144 	movi	r2,69
   14050:	b081ef26 	beq	r22,r2,14810 <___vfprintf_internal_r+0x1f6c>
   14054:	d8c02a17 	ldw	r3,168(sp)
   14058:	d8802104 	addi	r2,sp,132
   1405c:	d8800315 	stw	r2,12(sp)
   14060:	d9403617 	ldw	r5,216(sp)
   14064:	d8802504 	addi	r2,sp,148
   14068:	d9002d17 	ldw	r4,180(sp)
   1406c:	d8800215 	stw	r2,8(sp)
   14070:	d8802604 	addi	r2,sp,152
   14074:	d8c00015 	stw	r3,0(sp)
   14078:	d8800115 	stw	r2,4(sp)
   1407c:	01c00084 	movi	r7,2
   14080:	980d883a 	mov	r6,r19
   14084:	d8c03c15 	stw	r3,240(sp)
   14088:	da003d15 	stw	r8,244(sp)
   1408c:	0014fd40 	call	14fd4 <_dtoa_r>
   14090:	1021883a 	mov	r16,r2
   14094:	008019c4 	movi	r2,103
   14098:	d8c03c17 	ldw	r3,240(sp)
   1409c:	da003d17 	ldw	r8,244(sp)
   140a0:	88817126 	beq	r17,r2,14668 <___vfprintf_internal_r+0x1dc4>
   140a4:	008011c4 	movi	r2,71
   140a8:	88829126 	beq	r17,r2,14af0 <___vfprintf_internal_r+0x224c>
   140ac:	80f9883a 	add	fp,r16,r3
   140b0:	d9003617 	ldw	r4,216(sp)
   140b4:	000d883a 	mov	r6,zero
   140b8:	000f883a 	mov	r7,zero
   140bc:	980b883a 	mov	r5,r19
   140c0:	da003d15 	stw	r8,244(sp)
   140c4:	001e9340 	call	1e934 <__eqdf2>
   140c8:	da003d17 	ldw	r8,244(sp)
   140cc:	10018d26 	beq	r2,zero,14704 <___vfprintf_internal_r+0x1e60>
   140d0:	d8802117 	ldw	r2,132(sp)
   140d4:	1700062e 	bgeu	r2,fp,140f0 <___vfprintf_internal_r+0x184c>
   140d8:	01000c04 	movi	r4,48
   140dc:	10c00044 	addi	r3,r2,1
   140e0:	d8c02115 	stw	r3,132(sp)
   140e4:	11000005 	stb	r4,0(r2)
   140e8:	d8802117 	ldw	r2,132(sp)
   140ec:	173ffb36 	bltu	r2,fp,140dc <__alt_data_end+0xfc0140dc>
   140f0:	1405c83a 	sub	r2,r2,r16
   140f4:	d8803315 	stw	r2,204(sp)
   140f8:	008011c4 	movi	r2,71
   140fc:	b0817626 	beq	r22,r2,146d8 <___vfprintf_internal_r+0x1e34>
   14100:	00801944 	movi	r2,101
   14104:	1442800e 	bge	r2,r17,14b08 <___vfprintf_internal_r+0x2264>
   14108:	d8c02617 	ldw	r3,152(sp)
   1410c:	00801984 	movi	r2,102
   14110:	d8c03215 	stw	r3,200(sp)
   14114:	8881fe26 	beq	r17,r2,14910 <___vfprintf_internal_r+0x206c>
   14118:	d8c03217 	ldw	r3,200(sp)
   1411c:	d9003317 	ldw	r4,204(sp)
   14120:	1901dd16 	blt	r3,r4,14898 <___vfprintf_internal_r+0x1ff4>
   14124:	9480004c 	andi	r18,r18,1
   14128:	90022b1e 	bne	r18,zero,149d8 <___vfprintf_internal_r+0x2134>
   1412c:	1805883a 	mov	r2,r3
   14130:	18028316 	blt	r3,zero,14b40 <___vfprintf_internal_r+0x229c>
   14134:	d8c03217 	ldw	r3,200(sp)
   14138:	044019c4 	movi	r17,103
   1413c:	d8c02b15 	stw	r3,172(sp)
   14140:	df002907 	ldb	fp,164(sp)
   14144:	e001531e 	bne	fp,zero,14694 <___vfprintf_internal_r+0x1df0>
   14148:	df002783 	ldbu	fp,158(sp)
   1414c:	d8802915 	stw	r2,164(sp)
   14150:	dc802c17 	ldw	r18,176(sp)
   14154:	d8002a15 	stw	zero,168(sp)
   14158:	003baf06 	br	13018 <__alt_data_end+0xfc013018>
   1415c:	d8c02e17 	ldw	r3,184(sp)
   14160:	d9002e17 	ldw	r4,184(sp)
   14164:	d9402e17 	ldw	r5,184(sp)
   14168:	18c00017 	ldw	r3,0(r3)
   1416c:	21000117 	ldw	r4,4(r4)
   14170:	29400204 	addi	r5,r5,8
   14174:	d8c03615 	stw	r3,216(sp)
   14178:	d9003815 	stw	r4,224(sp)
   1417c:	d9402e15 	stw	r5,184(sp)
   14180:	003b5006 	br	12ec4 <__alt_data_end+0xfc012ec4>
   14184:	ac400007 	ldb	r17,0(r21)
   14188:	003a2806 	br	12a2c <__alt_data_end+0xfc012a2c>
   1418c:	9080100c 	andi	r2,r18,64
   14190:	1000a826 	beq	r2,zero,14434 <___vfprintf_internal_r+0x1b90>
   14194:	d8c02e17 	ldw	r3,184(sp)
   14198:	002d883a 	mov	r22,zero
   1419c:	1cc0000b 	ldhu	r19,0(r3)
   141a0:	18c00104 	addi	r3,r3,4
   141a4:	d8c02e15 	stw	r3,184(sp)
   141a8:	003caf06 	br	13468 <__alt_data_end+0xfc013468>
   141ac:	d9002e17 	ldw	r4,184(sp)
   141b0:	d9402a17 	ldw	r5,168(sp)
   141b4:	002d883a 	mov	r22,zero
   141b8:	20800104 	addi	r2,r4,4
   141bc:	24c00017 	ldw	r19,0(r4)
   141c0:	283ebb0e 	bge	r5,zero,13cb0 <__alt_data_end+0xfc013cb0>
   141c4:	003ef106 	br	13d8c <__alt_data_end+0xfc013d8c>
   141c8:	9080040c 	andi	r2,r18,16
   141cc:	1000921e 	bne	r2,zero,14418 <___vfprintf_internal_r+0x1b74>
   141d0:	9480100c 	andi	r18,r18,64
   141d4:	90013926 	beq	r18,zero,146bc <___vfprintf_internal_r+0x1e18>
   141d8:	d9402e17 	ldw	r5,184(sp)
   141dc:	d8c02f17 	ldw	r3,188(sp)
   141e0:	28800017 	ldw	r2,0(r5)
   141e4:	29400104 	addi	r5,r5,4
   141e8:	d9402e15 	stw	r5,184(sp)
   141ec:	10c0000d 	sth	r3,0(r2)
   141f0:	0039e406 	br	12984 <__alt_data_end+0xfc012984>
   141f4:	9080100c 	andi	r2,r18,64
   141f8:	10008026 	beq	r2,zero,143fc <___vfprintf_internal_r+0x1b58>
   141fc:	d8802e17 	ldw	r2,184(sp)
   14200:	14c0000f 	ldh	r19,0(r2)
   14204:	10800104 	addi	r2,r2,4
   14208:	d8802e15 	stw	r2,184(sp)
   1420c:	982dd7fa 	srai	r22,r19,31
   14210:	b005883a 	mov	r2,r22
   14214:	003af706 	br	12df4 <__alt_data_end+0xfc012df4>
   14218:	9080100c 	andi	r2,r18,64
   1421c:	d8002785 	stb	zero,158(sp)
   14220:	10008a1e 	bne	r2,zero,1444c <___vfprintf_internal_r+0x1ba8>
   14224:	d9002e17 	ldw	r4,184(sp)
   14228:	d9402a17 	ldw	r5,168(sp)
   1422c:	002d883a 	mov	r22,zero
   14230:	20800104 	addi	r2,r4,4
   14234:	24c00017 	ldw	r19,0(r4)
   14238:	283e4b0e 	bge	r5,zero,13b68 <__alt_data_end+0xfc013b68>
   1423c:	9d86b03a 	or	r3,r19,r22
   14240:	d8802e15 	stw	r2,184(sp)
   14244:	183e4c1e 	bne	r3,zero,13b78 <__alt_data_end+0xfc013b78>
   14248:	0039883a 	mov	fp,zero
   1424c:	0005883a 	mov	r2,zero
   14250:	003d4006 	br	13754 <__alt_data_end+0xfc013754>
   14254:	014000f4 	movhi	r5,3
   14258:	296e4f84 	addi	r5,r5,-18114
   1425c:	d9402c15 	stw	r5,176(sp)
   14260:	d9402c17 	ldw	r5,176(sp)
   14264:	1c47883a 	add	r3,r3,r17
   14268:	10800044 	addi	r2,r2,1
   1426c:	41400015 	stw	r5,0(r8)
   14270:	44400115 	stw	r17,4(r8)
   14274:	d8c02015 	stw	r3,128(sp)
   14278:	d8801f15 	stw	r2,124(sp)
   1427c:	010001c4 	movi	r4,7
   14280:	20bec816 	blt	r4,r2,13da4 <__alt_data_end+0xfc013da4>
   14284:	42000204 	addi	r8,r8,8
   14288:	003ecd06 	br	13dc0 <__alt_data_end+0xfc013dc0>
   1428c:	d9002a17 	ldw	r4,168(sp)
   14290:	d8002785 	stb	zero,158(sp)
   14294:	203d2d16 	blt	r4,zero,1374c <__alt_data_end+0xfc01374c>
   14298:	00bfdfc4 	movi	r2,-129
   1429c:	90a4703a 	and	r18,r18,r2
   142a0:	003a6106 	br	12c28 <__alt_data_end+0xfc012c28>
   142a4:	010000f4 	movhi	r4,3
   142a8:	212e4f84 	addi	r4,r4,-18114
   142ac:	d9002c15 	stw	r4,176(sp)
   142b0:	003bea06 	br	1325c <__alt_data_end+0xfc01325c>
   142b4:	d9002d17 	ldw	r4,180(sp)
   142b8:	d9801e04 	addi	r6,sp,120
   142bc:	b80b883a 	mov	r5,r23
   142c0:	001abb00 	call	1abb0 <__sprint_r>
   142c4:	103a7b1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   142c8:	d8c02017 	ldw	r3,128(sp)
   142cc:	da000404 	addi	r8,sp,16
   142d0:	003d4106 	br	137d8 <__alt_data_end+0xfc0137d8>
   142d4:	d8801f17 	ldw	r2,124(sp)
   142d8:	014000f4 	movhi	r5,3
   142dc:	01000044 	movi	r4,1
   142e0:	18c00044 	addi	r3,r3,1
   142e4:	10800044 	addi	r2,r2,1
   142e8:	296e4704 	addi	r5,r5,-18148
   142ec:	41000115 	stw	r4,4(r8)
   142f0:	41400015 	stw	r5,0(r8)
   142f4:	d8c02015 	stw	r3,128(sp)
   142f8:	d8801f15 	stw	r2,124(sp)
   142fc:	010001c4 	movi	r4,7
   14300:	20805c16 	blt	r4,r2,14474 <___vfprintf_internal_r+0x1bd0>
   14304:	42000204 	addi	r8,r8,8
   14308:	8800041e 	bne	r17,zero,1431c <___vfprintf_internal_r+0x1a78>
   1430c:	d8803317 	ldw	r2,204(sp)
   14310:	1000021e 	bne	r2,zero,1431c <___vfprintf_internal_r+0x1a78>
   14314:	9080004c 	andi	r2,r18,1
   14318:	103be726 	beq	r2,zero,132b8 <__alt_data_end+0xfc0132b8>
   1431c:	d9003717 	ldw	r4,220(sp)
   14320:	d8801f17 	ldw	r2,124(sp)
   14324:	d9403417 	ldw	r5,208(sp)
   14328:	20c7883a 	add	r3,r4,r3
   1432c:	10800044 	addi	r2,r2,1
   14330:	41000115 	stw	r4,4(r8)
   14334:	41400015 	stw	r5,0(r8)
   14338:	d8c02015 	stw	r3,128(sp)
   1433c:	d8801f15 	stw	r2,124(sp)
   14340:	010001c4 	movi	r4,7
   14344:	20812116 	blt	r4,r2,147cc <___vfprintf_internal_r+0x1f28>
   14348:	42000204 	addi	r8,r8,8
   1434c:	0463c83a 	sub	r17,zero,r17
   14350:	0440730e 	bge	zero,r17,14520 <___vfprintf_internal_r+0x1c7c>
   14354:	05800404 	movi	r22,16
   14358:	b440860e 	bge	r22,r17,14574 <___vfprintf_internal_r+0x1cd0>
   1435c:	014000f4 	movhi	r5,3
   14360:	296e4f84 	addi	r5,r5,-18114
   14364:	d9402c15 	stw	r5,176(sp)
   14368:	070001c4 	movi	fp,7
   1436c:	dcc02d17 	ldw	r19,180(sp)
   14370:	00000306 	br	14380 <___vfprintf_internal_r+0x1adc>
   14374:	42000204 	addi	r8,r8,8
   14378:	8c7ffc04 	addi	r17,r17,-16
   1437c:	b440800e 	bge	r22,r17,14580 <___vfprintf_internal_r+0x1cdc>
   14380:	18c00404 	addi	r3,r3,16
   14384:	10800044 	addi	r2,r2,1
   14388:	45000015 	stw	r20,0(r8)
   1438c:	45800115 	stw	r22,4(r8)
   14390:	d8c02015 	stw	r3,128(sp)
   14394:	d8801f15 	stw	r2,124(sp)
   14398:	e0bff60e 	bge	fp,r2,14374 <__alt_data_end+0xfc014374>
   1439c:	d9801e04 	addi	r6,sp,120
   143a0:	b80b883a 	mov	r5,r23
   143a4:	9809883a 	mov	r4,r19
   143a8:	001abb00 	call	1abb0 <__sprint_r>
   143ac:	103a411e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   143b0:	d8c02017 	ldw	r3,128(sp)
   143b4:	d8801f17 	ldw	r2,124(sp)
   143b8:	da000404 	addi	r8,sp,16
   143bc:	003fee06 	br	14378 <__alt_data_end+0xfc014378>
   143c0:	00bfffc4 	movi	r2,-1
   143c4:	003a3f06 	br	12cc4 <__alt_data_end+0xfc012cc4>
   143c8:	008011c4 	movi	r2,71
   143cc:	1440b816 	blt	r2,r17,146b0 <___vfprintf_internal_r+0x1e0c>
   143d0:	040000f4 	movhi	r16,3
   143d4:	842e3904 	addi	r16,r16,-18204
   143d8:	00c000c4 	movi	r3,3
   143dc:	00bfdfc4 	movi	r2,-129
   143e0:	d8c02915 	stw	r3,164(sp)
   143e4:	90a4703a 	and	r18,r18,r2
   143e8:	df002783 	ldbu	fp,158(sp)
   143ec:	d8c02b15 	stw	r3,172(sp)
   143f0:	d8002a15 	stw	zero,168(sp)
   143f4:	d8003215 	stw	zero,200(sp)
   143f8:	003b0706 	br	13018 <__alt_data_end+0xfc013018>
   143fc:	d8c02e17 	ldw	r3,184(sp)
   14400:	1cc00017 	ldw	r19,0(r3)
   14404:	18c00104 	addi	r3,r3,4
   14408:	d8c02e15 	stw	r3,184(sp)
   1440c:	982dd7fa 	srai	r22,r19,31
   14410:	b005883a 	mov	r2,r22
   14414:	003a7706 	br	12df4 <__alt_data_end+0xfc012df4>
   14418:	d8c02e17 	ldw	r3,184(sp)
   1441c:	d9002f17 	ldw	r4,188(sp)
   14420:	18800017 	ldw	r2,0(r3)
   14424:	18c00104 	addi	r3,r3,4
   14428:	d8c02e15 	stw	r3,184(sp)
   1442c:	11000015 	stw	r4,0(r2)
   14430:	00395406 	br	12984 <__alt_data_end+0xfc012984>
   14434:	d9002e17 	ldw	r4,184(sp)
   14438:	002d883a 	mov	r22,zero
   1443c:	24c00017 	ldw	r19,0(r4)
   14440:	21000104 	addi	r4,r4,4
   14444:	d9002e15 	stw	r4,184(sp)
   14448:	003c0706 	br	13468 <__alt_data_end+0xfc013468>
   1444c:	d9402e17 	ldw	r5,184(sp)
   14450:	d8c02a17 	ldw	r3,168(sp)
   14454:	002d883a 	mov	r22,zero
   14458:	28800104 	addi	r2,r5,4
   1445c:	2cc0000b 	ldhu	r19,0(r5)
   14460:	183dc10e 	bge	r3,zero,13b68 <__alt_data_end+0xfc013b68>
   14464:	003f7506 	br	1423c <__alt_data_end+0xfc01423c>
   14468:	040000f4 	movhi	r16,3
   1446c:	842e3704 	addi	r16,r16,-18212
   14470:	003aa706 	br	12f10 <__alt_data_end+0xfc012f10>
   14474:	d9002d17 	ldw	r4,180(sp)
   14478:	d9801e04 	addi	r6,sp,120
   1447c:	b80b883a 	mov	r5,r23
   14480:	001abb00 	call	1abb0 <__sprint_r>
   14484:	103a0b1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   14488:	dc402617 	ldw	r17,152(sp)
   1448c:	d8c02017 	ldw	r3,128(sp)
   14490:	da000404 	addi	r8,sp,16
   14494:	003f9c06 	br	14308 <__alt_data_end+0xfc014308>
   14498:	ac400043 	ldbu	r17,1(r21)
   1449c:	84000814 	ori	r16,r16,32
   144a0:	ad400044 	addi	r21,r21,1
   144a4:	8c403fcc 	andi	r17,r17,255
   144a8:	8c40201c 	xori	r17,r17,128
   144ac:	8c7fe004 	addi	r17,r17,-128
   144b0:	00395e06 	br	12a2c <__alt_data_end+0xfc012a2c>
   144b4:	d8c02e15 	stw	r3,184(sp)
   144b8:	0039883a 	mov	fp,zero
   144bc:	003e3506 	br	13d94 <__alt_data_end+0xfc013d94>
   144c0:	d9002d17 	ldw	r4,180(sp)
   144c4:	d9801e04 	addi	r6,sp,120
   144c8:	b80b883a 	mov	r5,r23
   144cc:	001abb00 	call	1abb0 <__sprint_r>
   144d0:	1039f81e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   144d4:	d8c02017 	ldw	r3,128(sp)
   144d8:	da000404 	addi	r8,sp,16
   144dc:	003cd006 	br	13820 <__alt_data_end+0xfc013820>
   144e0:	8009883a 	mov	r4,r16
   144e4:	df003d15 	stw	fp,244(sp)
   144e8:	00105480 	call	10548 <strlen>
   144ec:	d8802b15 	stw	r2,172(sp)
   144f0:	da003d17 	ldw	r8,244(sp)
   144f4:	103c200e 	bge	r2,zero,13578 <__alt_data_end+0xfc013578>
   144f8:	0005883a 	mov	r2,zero
   144fc:	003c1e06 	br	13578 <__alt_data_end+0xfc013578>
   14500:	d9002d17 	ldw	r4,180(sp)
   14504:	d9801e04 	addi	r6,sp,120
   14508:	b80b883a 	mov	r5,r23
   1450c:	001abb00 	call	1abb0 <__sprint_r>
   14510:	1039e81e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   14514:	d8c02017 	ldw	r3,128(sp)
   14518:	d8801f17 	ldw	r2,124(sp)
   1451c:	da000404 	addi	r8,sp,16
   14520:	d9403317 	ldw	r5,204(sp)
   14524:	10800044 	addi	r2,r2,1
   14528:	44000015 	stw	r16,0(r8)
   1452c:	28c7883a 	add	r3,r5,r3
   14530:	003b5b06 	br	132a0 <__alt_data_end+0xfc0132a0>
   14534:	010000f4 	movhi	r4,3
   14538:	212e5384 	addi	r4,r4,-18098
   1453c:	d9003515 	stw	r4,212(sp)
   14540:	003af206 	br	1310c <__alt_data_end+0xfc01310c>
   14544:	013fffc4 	movi	r4,-1
   14548:	003a0806 	br	12d6c <__alt_data_end+0xfc012d6c>
   1454c:	0023883a 	mov	r17,zero
   14550:	003d9d06 	br	13bc8 <__alt_data_end+0xfc013bc8>
   14554:	d9002d17 	ldw	r4,180(sp)
   14558:	d9801e04 	addi	r6,sp,120
   1455c:	b80b883a 	mov	r5,r23
   14560:	001abb00 	call	1abb0 <__sprint_r>
   14564:	1039d31e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   14568:	d8c02017 	ldw	r3,128(sp)
   1456c:	da000404 	addi	r8,sp,16
   14570:	003d9406 	br	13bc4 <__alt_data_end+0xfc013bc4>
   14574:	010000f4 	movhi	r4,3
   14578:	212e4f84 	addi	r4,r4,-18114
   1457c:	d9002c15 	stw	r4,176(sp)
   14580:	d9002c17 	ldw	r4,176(sp)
   14584:	1c47883a 	add	r3,r3,r17
   14588:	10800044 	addi	r2,r2,1
   1458c:	41000015 	stw	r4,0(r8)
   14590:	44400115 	stw	r17,4(r8)
   14594:	d8c02015 	stw	r3,128(sp)
   14598:	d8801f15 	stw	r2,124(sp)
   1459c:	010001c4 	movi	r4,7
   145a0:	20bfd716 	blt	r4,r2,14500 <__alt_data_end+0xfc014500>
   145a4:	42000204 	addi	r8,r8,8
   145a8:	003fdd06 	br	14520 <__alt_data_end+0xfc014520>
   145ac:	d9002d17 	ldw	r4,180(sp)
   145b0:	d9801e04 	addi	r6,sp,120
   145b4:	b80b883a 	mov	r5,r23
   145b8:	001abb00 	call	1abb0 <__sprint_r>
   145bc:	1039bd1e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   145c0:	d8802617 	ldw	r2,152(sp)
   145c4:	d8c02017 	ldw	r3,128(sp)
   145c8:	da000404 	addi	r8,sp,16
   145cc:	003e1006 	br	13e10 <__alt_data_end+0xfc013e10>
   145d0:	00800044 	movi	r2,1
   145d4:	10803fcc 	andi	r2,r2,255
   145d8:	00c00044 	movi	r3,1
   145dc:	10fa0d26 	beq	r2,r3,12e14 <__alt_data_end+0xfc012e14>
   145e0:	00c00084 	movi	r3,2
   145e4:	10fbaf26 	beq	r2,r3,134a4 <__alt_data_end+0xfc0134a4>
   145e8:	003a6d06 	br	12fa0 <__alt_data_end+0xfc012fa0>
   145ec:	010000f4 	movhi	r4,3
   145f0:	212e5384 	addi	r4,r4,-18098
   145f4:	d9003515 	stw	r4,212(sp)
   145f8:	003b5406 	br	1334c <__alt_data_end+0xfc01334c>
   145fc:	d8802a17 	ldw	r2,168(sp)
   14600:	00c00184 	movi	r3,6
   14604:	1880012e 	bgeu	r3,r2,1460c <___vfprintf_internal_r+0x1d68>
   14608:	1805883a 	mov	r2,r3
   1460c:	d8802b15 	stw	r2,172(sp)
   14610:	1000ef16 	blt	r2,zero,149d0 <___vfprintf_internal_r+0x212c>
   14614:	040000f4 	movhi	r16,3
   14618:	d8802915 	stw	r2,164(sp)
   1461c:	dcc02e15 	stw	r19,184(sp)
   14620:	d8002a15 	stw	zero,168(sp)
   14624:	d8003215 	stw	zero,200(sp)
   14628:	842e4504 	addi	r16,r16,-18156
   1462c:	0039883a 	mov	fp,zero
   14630:	003a8006 	br	13034 <__alt_data_end+0xfc013034>
   14634:	0021883a 	mov	r16,zero
   14638:	003e0706 	br	13e58 <__alt_data_end+0xfc013e58>
   1463c:	d9002d17 	ldw	r4,180(sp)
   14640:	d9801e04 	addi	r6,sp,120
   14644:	b80b883a 	mov	r5,r23
   14648:	001abb00 	call	1abb0 <__sprint_r>
   1464c:	1039991e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   14650:	d8802617 	ldw	r2,152(sp)
   14654:	d9403317 	ldw	r5,204(sp)
   14658:	d8c02017 	ldw	r3,128(sp)
   1465c:	da000404 	addi	r8,sp,16
   14660:	2885c83a 	sub	r2,r5,r2
   14664:	003dfb06 	br	13e54 <__alt_data_end+0xfc013e54>
   14668:	9080004c 	andi	r2,r18,1
   1466c:	103e8f1e 	bne	r2,zero,140ac <__alt_data_end+0xfc0140ac>
   14670:	d8802117 	ldw	r2,132(sp)
   14674:	003e9e06 	br	140f0 <__alt_data_end+0xfc0140f0>
   14678:	1025883a 	mov	r18,r2
   1467c:	0039883a 	mov	fp,zero
   14680:	00800084 	movi	r2,2
   14684:	003fd306 	br	145d4 <__alt_data_end+0xfc0145d4>
   14688:	07000b44 	movi	fp,45
   1468c:	df002785 	stb	fp,158(sp)
   14690:	003a1b06 	br	12f00 <__alt_data_end+0xfc012f00>
   14694:	00c00b44 	movi	r3,45
   14698:	d8c02785 	stb	r3,158(sp)
   1469c:	d8802915 	stw	r2,164(sp)
   146a0:	dc802c17 	ldw	r18,176(sp)
   146a4:	d8002a15 	stw	zero,168(sp)
   146a8:	07000b44 	movi	fp,45
   146ac:	003a5e06 	br	13028 <__alt_data_end+0xfc013028>
   146b0:	040000f4 	movhi	r16,3
   146b4:	842e3a04 	addi	r16,r16,-18200
   146b8:	003f4706 	br	143d8 <__alt_data_end+0xfc0143d8>
   146bc:	d9002e17 	ldw	r4,184(sp)
   146c0:	d9402f17 	ldw	r5,188(sp)
   146c4:	20800017 	ldw	r2,0(r4)
   146c8:	21000104 	addi	r4,r4,4
   146cc:	d9002e15 	stw	r4,184(sp)
   146d0:	11400015 	stw	r5,0(r2)
   146d4:	0038ab06 	br	12984 <__alt_data_end+0xfc012984>
   146d8:	dd802617 	ldw	r22,152(sp)
   146dc:	00bfff44 	movi	r2,-3
   146e0:	b0801c16 	blt	r22,r2,14754 <___vfprintf_internal_r+0x1eb0>
   146e4:	d9402a17 	ldw	r5,168(sp)
   146e8:	2d801a16 	blt	r5,r22,14754 <___vfprintf_internal_r+0x1eb0>
   146ec:	dd803215 	stw	r22,200(sp)
   146f0:	003e8906 	br	14118 <__alt_data_end+0xfc014118>
   146f4:	010000f4 	movhi	r4,3
   146f8:	212e4f84 	addi	r4,r4,-18114
   146fc:	d9002c15 	stw	r4,176(sp)
   14700:	003c9106 	br	13948 <__alt_data_end+0xfc013948>
   14704:	e005883a 	mov	r2,fp
   14708:	003e7906 	br	140f0 <__alt_data_end+0xfc0140f0>
   1470c:	d9002a17 	ldw	r4,168(sp)
   14710:	df002783 	ldbu	fp,158(sp)
   14714:	dcc02e15 	stw	r19,184(sp)
   14718:	d9002915 	stw	r4,164(sp)
   1471c:	d9002b15 	stw	r4,172(sp)
   14720:	d8002a15 	stw	zero,168(sp)
   14724:	d8003215 	stw	zero,200(sp)
   14728:	003a3b06 	br	13018 <__alt_data_end+0xfc013018>
   1472c:	9080004c 	andi	r2,r18,1
   14730:	0039883a 	mov	fp,zero
   14734:	10000426 	beq	r2,zero,14748 <___vfprintf_internal_r+0x1ea4>
   14738:	00800c04 	movi	r2,48
   1473c:	dc001dc4 	addi	r16,sp,119
   14740:	d8801dc5 	stb	r2,119(sp)
   14744:	003b6406 	br	134d8 <__alt_data_end+0xfc0134d8>
   14748:	d8002b15 	stw	zero,172(sp)
   1474c:	dc001e04 	addi	r16,sp,120
   14750:	003a2b06 	br	13000 <__alt_data_end+0xfc013000>
   14754:	8c7fff84 	addi	r17,r17,-2
   14758:	b5bfffc4 	addi	r22,r22,-1
   1475c:	dd802615 	stw	r22,152(sp)
   14760:	dc4022c5 	stb	r17,139(sp)
   14764:	b000bf16 	blt	r22,zero,14a64 <___vfprintf_internal_r+0x21c0>
   14768:	00800ac4 	movi	r2,43
   1476c:	d8802305 	stb	r2,140(sp)
   14770:	00800244 	movi	r2,9
   14774:	15807016 	blt	r2,r22,14938 <___vfprintf_internal_r+0x2094>
   14778:	00800c04 	movi	r2,48
   1477c:	b5800c04 	addi	r22,r22,48
   14780:	d8802345 	stb	r2,141(sp)
   14784:	dd802385 	stb	r22,142(sp)
   14788:	d88023c4 	addi	r2,sp,143
   1478c:	df0022c4 	addi	fp,sp,139
   14790:	d8c03317 	ldw	r3,204(sp)
   14794:	1739c83a 	sub	fp,r2,fp
   14798:	d9003317 	ldw	r4,204(sp)
   1479c:	e0c7883a 	add	r3,fp,r3
   147a0:	df003a15 	stw	fp,232(sp)
   147a4:	d8c02b15 	stw	r3,172(sp)
   147a8:	00800044 	movi	r2,1
   147ac:	1100b30e 	bge	r2,r4,14a7c <___vfprintf_internal_r+0x21d8>
   147b0:	d8c02b17 	ldw	r3,172(sp)
   147b4:	18c00044 	addi	r3,r3,1
   147b8:	d8c02b15 	stw	r3,172(sp)
   147bc:	1805883a 	mov	r2,r3
   147c0:	1800ac16 	blt	r3,zero,14a74 <___vfprintf_internal_r+0x21d0>
   147c4:	d8003215 	stw	zero,200(sp)
   147c8:	003e5d06 	br	14140 <__alt_data_end+0xfc014140>
   147cc:	d9002d17 	ldw	r4,180(sp)
   147d0:	d9801e04 	addi	r6,sp,120
   147d4:	b80b883a 	mov	r5,r23
   147d8:	001abb00 	call	1abb0 <__sprint_r>
   147dc:	1039351e 	bne	r2,zero,12cb4 <__alt_data_end+0xfc012cb4>
   147e0:	dc402617 	ldw	r17,152(sp)
   147e4:	d8c02017 	ldw	r3,128(sp)
   147e8:	d8801f17 	ldw	r2,124(sp)
   147ec:	da000404 	addi	r8,sp,16
   147f0:	003ed606 	br	1434c <__alt_data_end+0xfc01434c>
   147f4:	182b883a 	mov	r21,r3
   147f8:	d8002a15 	stw	zero,168(sp)
   147fc:	00388c06 	br	12a30 <__alt_data_end+0xfc012a30>
   14800:	d8802a17 	ldw	r2,168(sp)
   14804:	103e071e 	bne	r2,zero,14024 <__alt_data_end+0xfc014024>
   14808:	dc002a15 	stw	r16,168(sp)
   1480c:	003e0506 	br	14024 <__alt_data_end+0xfc014024>
   14810:	d9002a17 	ldw	r4,168(sp)
   14814:	20c00044 	addi	r3,r4,1
   14818:	003e0f06 	br	14058 <__alt_data_end+0xfc014058>
   1481c:	01400184 	movi	r5,6
   14820:	d9402a15 	stw	r5,168(sp)
   14824:	003dff06 	br	14024 <__alt_data_end+0xfc014024>
   14828:	d8802104 	addi	r2,sp,132
   1482c:	d8800315 	stw	r2,12(sp)
   14830:	d8802504 	addi	r2,sp,148
   14834:	d8800215 	stw	r2,8(sp)
   14838:	d8802604 	addi	r2,sp,152
   1483c:	d8800115 	stw	r2,4(sp)
   14840:	d8802a17 	ldw	r2,168(sp)
   14844:	d9403617 	ldw	r5,216(sp)
   14848:	d9002d17 	ldw	r4,180(sp)
   1484c:	d8800015 	stw	r2,0(sp)
   14850:	01c000c4 	movi	r7,3
   14854:	980d883a 	mov	r6,r19
   14858:	da003d15 	stw	r8,244(sp)
   1485c:	0014fd40 	call	14fd4 <_dtoa_r>
   14860:	d8c02a17 	ldw	r3,168(sp)
   14864:	da003d17 	ldw	r8,244(sp)
   14868:	1021883a 	mov	r16,r2
   1486c:	10f9883a 	add	fp,r2,r3
   14870:	81000007 	ldb	r4,0(r16)
   14874:	00800c04 	movi	r2,48
   14878:	20805e26 	beq	r4,r2,149f4 <___vfprintf_internal_r+0x2150>
   1487c:	d8c02617 	ldw	r3,152(sp)
   14880:	e0f9883a 	add	fp,fp,r3
   14884:	003e0a06 	br	140b0 <__alt_data_end+0xfc0140b0>
   14888:	00c00b44 	movi	r3,45
   1488c:	24e0003c 	xorhi	r19,r4,32768
   14890:	d8c02905 	stb	r3,164(sp)
   14894:	003de906 	br	1403c <__alt_data_end+0xfc01403c>
   14898:	d8c03217 	ldw	r3,200(sp)
   1489c:	00c07a0e 	bge	zero,r3,14a88 <___vfprintf_internal_r+0x21e4>
   148a0:	00800044 	movi	r2,1
   148a4:	d9003317 	ldw	r4,204(sp)
   148a8:	1105883a 	add	r2,r2,r4
   148ac:	d8802b15 	stw	r2,172(sp)
   148b0:	10004e16 	blt	r2,zero,149ec <___vfprintf_internal_r+0x2148>
   148b4:	044019c4 	movi	r17,103
   148b8:	003e2106 	br	14140 <__alt_data_end+0xfc014140>
   148bc:	d9002a17 	ldw	r4,168(sp)
   148c0:	d8802104 	addi	r2,sp,132
   148c4:	d8800315 	stw	r2,12(sp)
   148c8:	d9000015 	stw	r4,0(sp)
   148cc:	d8802504 	addi	r2,sp,148
   148d0:	d9403617 	ldw	r5,216(sp)
   148d4:	d9002d17 	ldw	r4,180(sp)
   148d8:	d8800215 	stw	r2,8(sp)
   148dc:	d8802604 	addi	r2,sp,152
   148e0:	d8800115 	stw	r2,4(sp)
   148e4:	01c000c4 	movi	r7,3
   148e8:	980d883a 	mov	r6,r19
   148ec:	da003d15 	stw	r8,244(sp)
   148f0:	0014fd40 	call	14fd4 <_dtoa_r>
   148f4:	d8c02a17 	ldw	r3,168(sp)
   148f8:	da003d17 	ldw	r8,244(sp)
   148fc:	1021883a 	mov	r16,r2
   14900:	00801184 	movi	r2,70
   14904:	80f9883a 	add	fp,r16,r3
   14908:	88bfd926 	beq	r17,r2,14870 <__alt_data_end+0xfc014870>
   1490c:	003de806 	br	140b0 <__alt_data_end+0xfc0140b0>
   14910:	d9002a17 	ldw	r4,168(sp)
   14914:	00c04d0e 	bge	zero,r3,14a4c <___vfprintf_internal_r+0x21a8>
   14918:	2000441e 	bne	r4,zero,14a2c <___vfprintf_internal_r+0x2188>
   1491c:	9480004c 	andi	r18,r18,1
   14920:	9000421e 	bne	r18,zero,14a2c <___vfprintf_internal_r+0x2188>
   14924:	1805883a 	mov	r2,r3
   14928:	18006f16 	blt	r3,zero,14ae8 <___vfprintf_internal_r+0x2244>
   1492c:	d8c03217 	ldw	r3,200(sp)
   14930:	d8c02b15 	stw	r3,172(sp)
   14934:	003e0206 	br	14140 <__alt_data_end+0xfc014140>
   14938:	df0022c4 	addi	fp,sp,139
   1493c:	dc002a15 	stw	r16,168(sp)
   14940:	4027883a 	mov	r19,r8
   14944:	e021883a 	mov	r16,fp
   14948:	b009883a 	mov	r4,r22
   1494c:	01400284 	movi	r5,10
   14950:	000d7b00 	call	d7b0 <__modsi3>
   14954:	10800c04 	addi	r2,r2,48
   14958:	843fffc4 	addi	r16,r16,-1
   1495c:	b009883a 	mov	r4,r22
   14960:	01400284 	movi	r5,10
   14964:	80800005 	stb	r2,0(r16)
   14968:	000d72c0 	call	d72c <__divsi3>
   1496c:	102d883a 	mov	r22,r2
   14970:	00800244 	movi	r2,9
   14974:	15bff416 	blt	r2,r22,14948 <__alt_data_end+0xfc014948>
   14978:	9811883a 	mov	r8,r19
   1497c:	b0800c04 	addi	r2,r22,48
   14980:	8027883a 	mov	r19,r16
   14984:	997fffc4 	addi	r5,r19,-1
   14988:	98bfffc5 	stb	r2,-1(r19)
   1498c:	dc002a17 	ldw	r16,168(sp)
   14990:	2f006d2e 	bgeu	r5,fp,14b48 <___vfprintf_internal_r+0x22a4>
   14994:	d9c02384 	addi	r7,sp,142
   14998:	3ccfc83a 	sub	r7,r7,r19
   1499c:	d9002344 	addi	r4,sp,141
   149a0:	e1cf883a 	add	r7,fp,r7
   149a4:	00000106 	br	149ac <___vfprintf_internal_r+0x2108>
   149a8:	28800003 	ldbu	r2,0(r5)
   149ac:	20800005 	stb	r2,0(r4)
   149b0:	21000044 	addi	r4,r4,1
   149b4:	29400044 	addi	r5,r5,1
   149b8:	393ffb1e 	bne	r7,r4,149a8 <__alt_data_end+0xfc0149a8>
   149bc:	d8802304 	addi	r2,sp,140
   149c0:	14c5c83a 	sub	r2,r2,r19
   149c4:	d8c02344 	addi	r3,sp,141
   149c8:	1885883a 	add	r2,r3,r2
   149cc:	003f7006 	br	14790 <__alt_data_end+0xfc014790>
   149d0:	0005883a 	mov	r2,zero
   149d4:	003f0f06 	br	14614 <__alt_data_end+0xfc014614>
   149d8:	d8c03217 	ldw	r3,200(sp)
   149dc:	18c00044 	addi	r3,r3,1
   149e0:	d8c02b15 	stw	r3,172(sp)
   149e4:	1805883a 	mov	r2,r3
   149e8:	183fb20e 	bge	r3,zero,148b4 <__alt_data_end+0xfc0148b4>
   149ec:	0005883a 	mov	r2,zero
   149f0:	003fb006 	br	148b4 <__alt_data_end+0xfc0148b4>
   149f4:	d9003617 	ldw	r4,216(sp)
   149f8:	000d883a 	mov	r6,zero
   149fc:	000f883a 	mov	r7,zero
   14a00:	980b883a 	mov	r5,r19
   14a04:	d8c03c15 	stw	r3,240(sp)
   14a08:	da003d15 	stw	r8,244(sp)
   14a0c:	001e9340 	call	1e934 <__eqdf2>
   14a10:	d8c03c17 	ldw	r3,240(sp)
   14a14:	da003d17 	ldw	r8,244(sp)
   14a18:	103f9826 	beq	r2,zero,1487c <__alt_data_end+0xfc01487c>
   14a1c:	00800044 	movi	r2,1
   14a20:	10c7c83a 	sub	r3,r2,r3
   14a24:	d8c02615 	stw	r3,152(sp)
   14a28:	003f9506 	br	14880 <__alt_data_end+0xfc014880>
   14a2c:	d9002a17 	ldw	r4,168(sp)
   14a30:	d8c03217 	ldw	r3,200(sp)
   14a34:	20800044 	addi	r2,r4,1
   14a38:	1885883a 	add	r2,r3,r2
   14a3c:	d8802b15 	stw	r2,172(sp)
   14a40:	103dbf0e 	bge	r2,zero,14140 <__alt_data_end+0xfc014140>
   14a44:	0005883a 	mov	r2,zero
   14a48:	003dbd06 	br	14140 <__alt_data_end+0xfc014140>
   14a4c:	2000201e 	bne	r4,zero,14ad0 <___vfprintf_internal_r+0x222c>
   14a50:	9480004c 	andi	r18,r18,1
   14a54:	90001e1e 	bne	r18,zero,14ad0 <___vfprintf_internal_r+0x222c>
   14a58:	00800044 	movi	r2,1
   14a5c:	d8802b15 	stw	r2,172(sp)
   14a60:	003db706 	br	14140 <__alt_data_end+0xfc014140>
   14a64:	00800b44 	movi	r2,45
   14a68:	05adc83a 	sub	r22,zero,r22
   14a6c:	d8802305 	stb	r2,140(sp)
   14a70:	003f3f06 	br	14770 <__alt_data_end+0xfc014770>
   14a74:	0005883a 	mov	r2,zero
   14a78:	003f5206 	br	147c4 <__alt_data_end+0xfc0147c4>
   14a7c:	90a4703a 	and	r18,r18,r2
   14a80:	903f4e26 	beq	r18,zero,147bc <__alt_data_end+0xfc0147bc>
   14a84:	003f4a06 	br	147b0 <__alt_data_end+0xfc0147b0>
   14a88:	00800084 	movi	r2,2
   14a8c:	10c5c83a 	sub	r2,r2,r3
   14a90:	003f8406 	br	148a4 <__alt_data_end+0xfc0148a4>
   14a94:	d9402e17 	ldw	r5,184(sp)
   14a98:	d9002e17 	ldw	r4,184(sp)
   14a9c:	ac400043 	ldbu	r17,1(r21)
   14aa0:	29400017 	ldw	r5,0(r5)
   14aa4:	20800104 	addi	r2,r4,4
   14aa8:	d8802e15 	stw	r2,184(sp)
   14aac:	d9402a15 	stw	r5,168(sp)
   14ab0:	182b883a 	mov	r21,r3
   14ab4:	283e7b0e 	bge	r5,zero,144a4 <__alt_data_end+0xfc0144a4>
   14ab8:	8c403fcc 	andi	r17,r17,255
   14abc:	017fffc4 	movi	r5,-1
   14ac0:	8c40201c 	xori	r17,r17,128
   14ac4:	d9402a15 	stw	r5,168(sp)
   14ac8:	8c7fe004 	addi	r17,r17,-128
   14acc:	0037d706 	br	12a2c <__alt_data_end+0xfc012a2c>
   14ad0:	d8c02a17 	ldw	r3,168(sp)
   14ad4:	18c00084 	addi	r3,r3,2
   14ad8:	d8c02b15 	stw	r3,172(sp)
   14adc:	1805883a 	mov	r2,r3
   14ae0:	183d970e 	bge	r3,zero,14140 <__alt_data_end+0xfc014140>
   14ae4:	003fd706 	br	14a44 <__alt_data_end+0xfc014a44>
   14ae8:	0005883a 	mov	r2,zero
   14aec:	003f8f06 	br	1492c <__alt_data_end+0xfc01492c>
   14af0:	9080004c 	andi	r2,r18,1
   14af4:	103f821e 	bne	r2,zero,14900 <__alt_data_end+0xfc014900>
   14af8:	d8802117 	ldw	r2,132(sp)
   14afc:	1405c83a 	sub	r2,r2,r16
   14b00:	d8803315 	stw	r2,204(sp)
   14b04:	b47ef426 	beq	r22,r17,146d8 <__alt_data_end+0xfc0146d8>
   14b08:	dd802617 	ldw	r22,152(sp)
   14b0c:	003f1206 	br	14758 <__alt_data_end+0xfc014758>
   14b10:	d8c02b03 	ldbu	r3,172(sp)
   14b14:	d8c02785 	stb	r3,158(sp)
   14b18:	0038df06 	br	12e98 <__alt_data_end+0xfc012e98>
   14b1c:	d8c02b03 	ldbu	r3,172(sp)
   14b20:	d8c02785 	stb	r3,158(sp)
   14b24:	0038aa06 	br	12dd0 <__alt_data_end+0xfc012dd0>
   14b28:	d8c02b03 	ldbu	r3,172(sp)
   14b2c:	d8c02785 	stb	r3,158(sp)
   14b30:	003a4306 	br	13440 <__alt_data_end+0xfc013440>
   14b34:	d8c02b03 	ldbu	r3,172(sp)
   14b38:	d8c02785 	stb	r3,158(sp)
   14b3c:	003af506 	br	13714 <__alt_data_end+0xfc013714>
   14b40:	0005883a 	mov	r2,zero
   14b44:	003d7b06 	br	14134 <__alt_data_end+0xfc014134>
   14b48:	d8802344 	addi	r2,sp,141
   14b4c:	003f1006 	br	14790 <__alt_data_end+0xfc014790>
   14b50:	d8c02b03 	ldbu	r3,172(sp)
   14b54:	d8c02785 	stb	r3,158(sp)
   14b58:	0038fd06 	br	12f50 <__alt_data_end+0xfc012f50>
   14b5c:	d8c02b03 	ldbu	r3,172(sp)
   14b60:	d8c02785 	stb	r3,158(sp)
   14b64:	003a9706 	br	135c4 <__alt_data_end+0xfc0135c4>
   14b68:	d8c02b03 	ldbu	r3,172(sp)
   14b6c:	d8c02785 	stb	r3,158(sp)
   14b70:	003a1806 	br	133d4 <__alt_data_end+0xfc0133d4>
   14b74:	d8c02b03 	ldbu	r3,172(sp)
   14b78:	d8c02785 	stb	r3,158(sp)
   14b7c:	003abe06 	br	13678 <__alt_data_end+0xfc013678>

00014b80 <__vfprintf_internal>:
   14b80:	008000f4 	movhi	r2,3
   14b84:	10bb3c04 	addi	r2,r2,-4880
   14b88:	300f883a 	mov	r7,r6
   14b8c:	280d883a 	mov	r6,r5
   14b90:	200b883a 	mov	r5,r4
   14b94:	11000017 	ldw	r4,0(r2)
   14b98:	00128a41 	jmpi	128a4 <___vfprintf_internal_r>

00014b9c <__sbprintf>:
   14b9c:	2880030b 	ldhu	r2,12(r5)
   14ba0:	2ac01917 	ldw	r11,100(r5)
   14ba4:	2a80038b 	ldhu	r10,14(r5)
   14ba8:	2a400717 	ldw	r9,28(r5)
   14bac:	2a000917 	ldw	r8,36(r5)
   14bb0:	defee204 	addi	sp,sp,-1144
   14bb4:	00c10004 	movi	r3,1024
   14bb8:	dc011a15 	stw	r16,1128(sp)
   14bbc:	10bfff4c 	andi	r2,r2,65533
   14bc0:	2821883a 	mov	r16,r5
   14bc4:	d8cb883a 	add	r5,sp,r3
   14bc8:	dc811c15 	stw	r18,1136(sp)
   14bcc:	dc411b15 	stw	r17,1132(sp)
   14bd0:	dfc11d15 	stw	ra,1140(sp)
   14bd4:	2025883a 	mov	r18,r4
   14bd8:	d881030d 	sth	r2,1036(sp)
   14bdc:	dac11915 	stw	r11,1124(sp)
   14be0:	da81038d 	sth	r10,1038(sp)
   14be4:	da410715 	stw	r9,1052(sp)
   14be8:	da010915 	stw	r8,1060(sp)
   14bec:	dec10015 	stw	sp,1024(sp)
   14bf0:	dec10415 	stw	sp,1040(sp)
   14bf4:	d8c10215 	stw	r3,1032(sp)
   14bf8:	d8c10515 	stw	r3,1044(sp)
   14bfc:	d8010615 	stw	zero,1048(sp)
   14c00:	00128a40 	call	128a4 <___vfprintf_internal_r>
   14c04:	1023883a 	mov	r17,r2
   14c08:	10000416 	blt	r2,zero,14c1c <__sbprintf+0x80>
   14c0c:	d9410004 	addi	r5,sp,1024
   14c10:	9009883a 	mov	r4,r18
   14c14:	00168780 	call	16878 <_fflush_r>
   14c18:	10000d1e 	bne	r2,zero,14c50 <__sbprintf+0xb4>
   14c1c:	d881030b 	ldhu	r2,1036(sp)
   14c20:	1080100c 	andi	r2,r2,64
   14c24:	10000326 	beq	r2,zero,14c34 <__sbprintf+0x98>
   14c28:	8080030b 	ldhu	r2,12(r16)
   14c2c:	10801014 	ori	r2,r2,64
   14c30:	8080030d 	sth	r2,12(r16)
   14c34:	8805883a 	mov	r2,r17
   14c38:	dfc11d17 	ldw	ra,1140(sp)
   14c3c:	dc811c17 	ldw	r18,1136(sp)
   14c40:	dc411b17 	ldw	r17,1132(sp)
   14c44:	dc011a17 	ldw	r16,1128(sp)
   14c48:	dec11e04 	addi	sp,sp,1144
   14c4c:	f800283a 	ret
   14c50:	047fffc4 	movi	r17,-1
   14c54:	003ff106 	br	14c1c <__alt_data_end+0xfc014c1c>

00014c58 <__swsetup_r>:
   14c58:	008000f4 	movhi	r2,3
   14c5c:	defffd04 	addi	sp,sp,-12
   14c60:	10bb3c04 	addi	r2,r2,-4880
   14c64:	dc400115 	stw	r17,4(sp)
   14c68:	2023883a 	mov	r17,r4
   14c6c:	11000017 	ldw	r4,0(r2)
   14c70:	dc000015 	stw	r16,0(sp)
   14c74:	dfc00215 	stw	ra,8(sp)
   14c78:	2821883a 	mov	r16,r5
   14c7c:	20000226 	beq	r4,zero,14c88 <__swsetup_r+0x30>
   14c80:	20800e17 	ldw	r2,56(r4)
   14c84:	10003126 	beq	r2,zero,14d4c <__swsetup_r+0xf4>
   14c88:	8080030b 	ldhu	r2,12(r16)
   14c8c:	10c0020c 	andi	r3,r2,8
   14c90:	1009883a 	mov	r4,r2
   14c94:	18000f26 	beq	r3,zero,14cd4 <__swsetup_r+0x7c>
   14c98:	80c00417 	ldw	r3,16(r16)
   14c9c:	18001526 	beq	r3,zero,14cf4 <__swsetup_r+0x9c>
   14ca0:	1100004c 	andi	r4,r2,1
   14ca4:	20001c1e 	bne	r4,zero,14d18 <__swsetup_r+0xc0>
   14ca8:	1080008c 	andi	r2,r2,2
   14cac:	1000291e 	bne	r2,zero,14d54 <__swsetup_r+0xfc>
   14cb0:	80800517 	ldw	r2,20(r16)
   14cb4:	80800215 	stw	r2,8(r16)
   14cb8:	18001c26 	beq	r3,zero,14d2c <__swsetup_r+0xd4>
   14cbc:	0005883a 	mov	r2,zero
   14cc0:	dfc00217 	ldw	ra,8(sp)
   14cc4:	dc400117 	ldw	r17,4(sp)
   14cc8:	dc000017 	ldw	r16,0(sp)
   14ccc:	dec00304 	addi	sp,sp,12
   14cd0:	f800283a 	ret
   14cd4:	2080040c 	andi	r2,r4,16
   14cd8:	10002e26 	beq	r2,zero,14d94 <__swsetup_r+0x13c>
   14cdc:	2080010c 	andi	r2,r4,4
   14ce0:	10001e1e 	bne	r2,zero,14d5c <__swsetup_r+0x104>
   14ce4:	80c00417 	ldw	r3,16(r16)
   14ce8:	20800214 	ori	r2,r4,8
   14cec:	8080030d 	sth	r2,12(r16)
   14cf0:	183feb1e 	bne	r3,zero,14ca0 <__alt_data_end+0xfc014ca0>
   14cf4:	1100a00c 	andi	r4,r2,640
   14cf8:	01408004 	movi	r5,512
   14cfc:	217fe826 	beq	r4,r5,14ca0 <__alt_data_end+0xfc014ca0>
   14d00:	800b883a 	mov	r5,r16
   14d04:	8809883a 	mov	r4,r17
   14d08:	00178140 	call	17814 <__smakebuf_r>
   14d0c:	8080030b 	ldhu	r2,12(r16)
   14d10:	80c00417 	ldw	r3,16(r16)
   14d14:	003fe206 	br	14ca0 <__alt_data_end+0xfc014ca0>
   14d18:	80800517 	ldw	r2,20(r16)
   14d1c:	80000215 	stw	zero,8(r16)
   14d20:	0085c83a 	sub	r2,zero,r2
   14d24:	80800615 	stw	r2,24(r16)
   14d28:	183fe41e 	bne	r3,zero,14cbc <__alt_data_end+0xfc014cbc>
   14d2c:	80c0030b 	ldhu	r3,12(r16)
   14d30:	0005883a 	mov	r2,zero
   14d34:	1900200c 	andi	r4,r3,128
   14d38:	203fe126 	beq	r4,zero,14cc0 <__alt_data_end+0xfc014cc0>
   14d3c:	18c01014 	ori	r3,r3,64
   14d40:	80c0030d 	sth	r3,12(r16)
   14d44:	00bfffc4 	movi	r2,-1
   14d48:	003fdd06 	br	14cc0 <__alt_data_end+0xfc014cc0>
   14d4c:	0016c640 	call	16c64 <__sinit>
   14d50:	003fcd06 	br	14c88 <__alt_data_end+0xfc014c88>
   14d54:	0005883a 	mov	r2,zero
   14d58:	003fd606 	br	14cb4 <__alt_data_end+0xfc014cb4>
   14d5c:	81400c17 	ldw	r5,48(r16)
   14d60:	28000626 	beq	r5,zero,14d7c <__swsetup_r+0x124>
   14d64:	80801004 	addi	r2,r16,64
   14d68:	28800326 	beq	r5,r2,14d78 <__swsetup_r+0x120>
   14d6c:	8809883a 	mov	r4,r17
   14d70:	0016dd80 	call	16dd8 <_free_r>
   14d74:	8100030b 	ldhu	r4,12(r16)
   14d78:	80000c15 	stw	zero,48(r16)
   14d7c:	80c00417 	ldw	r3,16(r16)
   14d80:	00bff6c4 	movi	r2,-37
   14d84:	1108703a 	and	r4,r2,r4
   14d88:	80000115 	stw	zero,4(r16)
   14d8c:	80c00015 	stw	r3,0(r16)
   14d90:	003fd506 	br	14ce8 <__alt_data_end+0xfc014ce8>
   14d94:	00800244 	movi	r2,9
   14d98:	88800015 	stw	r2,0(r17)
   14d9c:	20801014 	ori	r2,r4,64
   14da0:	8080030d 	sth	r2,12(r16)
   14da4:	00bfffc4 	movi	r2,-1
   14da8:	003fc506 	br	14cc0 <__alt_data_end+0xfc014cc0>

00014dac <quorem>:
   14dac:	defff204 	addi	sp,sp,-56
   14db0:	ddc00b15 	stw	r23,44(sp)
   14db4:	20800417 	ldw	r2,16(r4)
   14db8:	2dc00417 	ldw	r23,16(r5)
   14dbc:	dfc00d15 	stw	ra,52(sp)
   14dc0:	df000c15 	stw	fp,48(sp)
   14dc4:	dd800a15 	stw	r22,40(sp)
   14dc8:	dd400915 	stw	r21,36(sp)
   14dcc:	dd000815 	stw	r20,32(sp)
   14dd0:	dcc00715 	stw	r19,28(sp)
   14dd4:	dc800615 	stw	r18,24(sp)
   14dd8:	dc400515 	stw	r17,20(sp)
   14ddc:	dc000415 	stw	r16,16(sp)
   14de0:	15c07a16 	blt	r2,r23,14fcc <quorem+0x220>
   14de4:	bdffffc4 	addi	r23,r23,-1
   14de8:	bde9883a 	add	r20,r23,r23
   14dec:	28c00504 	addi	r3,r5,20
   14df0:	a529883a 	add	r20,r20,r20
   14df4:	1d39883a 	add	fp,r3,r20
   14df8:	24c00504 	addi	r19,r4,20
   14dfc:	d9400215 	stw	r5,8(sp)
   14e00:	9d29883a 	add	r20,r19,r20
   14e04:	e1400017 	ldw	r5,0(fp)
   14e08:	d9000015 	stw	r4,0(sp)
   14e0c:	a1000017 	ldw	r4,0(r20)
   14e10:	29400044 	addi	r5,r5,1
   14e14:	d8c00115 	stw	r3,4(sp)
   14e18:	dd000315 	stw	r20,12(sp)
   14e1c:	000d8240 	call	d824 <__udivsi3>
   14e20:	1025883a 	mov	r18,r2
   14e24:	10003026 	beq	r2,zero,14ee8 <quorem+0x13c>
   14e28:	dc400117 	ldw	r17,4(sp)
   14e2c:	9829883a 	mov	r20,r19
   14e30:	002d883a 	mov	r22,zero
   14e34:	0021883a 	mov	r16,zero
   14e38:	8d400017 	ldw	r21,0(r17)
   14e3c:	900b883a 	mov	r5,r18
   14e40:	8c400104 	addi	r17,r17,4
   14e44:	a93fffcc 	andi	r4,r21,65535
   14e48:	000d8e00 	call	d8e0 <__mulsi3>
   14e4c:	a808d43a 	srli	r4,r21,16
   14e50:	900b883a 	mov	r5,r18
   14e54:	15ad883a 	add	r22,r2,r22
   14e58:	000d8e00 	call	d8e0 <__mulsi3>
   14e5c:	a1000017 	ldw	r4,0(r20)
   14e60:	b00cd43a 	srli	r6,r22,16
   14e64:	b0ffffcc 	andi	r3,r22,65535
   14e68:	217fffcc 	andi	r5,r4,65535
   14e6c:	2c21883a 	add	r16,r5,r16
   14e70:	80c7c83a 	sub	r3,r16,r3
   14e74:	2008d43a 	srli	r4,r4,16
   14e78:	1185883a 	add	r2,r2,r6
   14e7c:	1821d43a 	srai	r16,r3,16
   14e80:	117fffcc 	andi	r5,r2,65535
   14e84:	2149c83a 	sub	r4,r4,r5
   14e88:	2421883a 	add	r16,r4,r16
   14e8c:	8008943a 	slli	r4,r16,16
   14e90:	18ffffcc 	andi	r3,r3,65535
   14e94:	102cd43a 	srli	r22,r2,16
   14e98:	20c8b03a 	or	r4,r4,r3
   14e9c:	a1000015 	stw	r4,0(r20)
   14ea0:	8021d43a 	srai	r16,r16,16
   14ea4:	a5000104 	addi	r20,r20,4
   14ea8:	e47fe32e 	bgeu	fp,r17,14e38 <__alt_data_end+0xfc014e38>
   14eac:	d8c00317 	ldw	r3,12(sp)
   14eb0:	18800017 	ldw	r2,0(r3)
   14eb4:	10000c1e 	bne	r2,zero,14ee8 <quorem+0x13c>
   14eb8:	18bfff04 	addi	r2,r3,-4
   14ebc:	9880082e 	bgeu	r19,r2,14ee0 <quorem+0x134>
   14ec0:	18ffff17 	ldw	r3,-4(r3)
   14ec4:	18000326 	beq	r3,zero,14ed4 <quorem+0x128>
   14ec8:	00000506 	br	14ee0 <quorem+0x134>
   14ecc:	10c00017 	ldw	r3,0(r2)
   14ed0:	1800031e 	bne	r3,zero,14ee0 <quorem+0x134>
   14ed4:	10bfff04 	addi	r2,r2,-4
   14ed8:	bdffffc4 	addi	r23,r23,-1
   14edc:	98bffb36 	bltu	r19,r2,14ecc <__alt_data_end+0xfc014ecc>
   14ee0:	d8c00017 	ldw	r3,0(sp)
   14ee4:	1dc00415 	stw	r23,16(r3)
   14ee8:	d9400217 	ldw	r5,8(sp)
   14eec:	d9000017 	ldw	r4,0(sp)
   14ef0:	00185940 	call	18594 <__mcmp>
   14ef4:	10002816 	blt	r2,zero,14f98 <quorem+0x1ec>
   14ef8:	dc400117 	ldw	r17,4(sp)
   14efc:	94800044 	addi	r18,r18,1
   14f00:	980d883a 	mov	r6,r19
   14f04:	0007883a 	mov	r3,zero
   14f08:	31000017 	ldw	r4,0(r6)
   14f0c:	89400017 	ldw	r5,0(r17)
   14f10:	31800104 	addi	r6,r6,4
   14f14:	20bfffcc 	andi	r2,r4,65535
   14f18:	10c7883a 	add	r3,r2,r3
   14f1c:	28bfffcc 	andi	r2,r5,65535
   14f20:	1885c83a 	sub	r2,r3,r2
   14f24:	280ad43a 	srli	r5,r5,16
   14f28:	2008d43a 	srli	r4,r4,16
   14f2c:	1007d43a 	srai	r3,r2,16
   14f30:	10bfffcc 	andi	r2,r2,65535
   14f34:	2149c83a 	sub	r4,r4,r5
   14f38:	20c9883a 	add	r4,r4,r3
   14f3c:	200a943a 	slli	r5,r4,16
   14f40:	8c400104 	addi	r17,r17,4
   14f44:	2007d43a 	srai	r3,r4,16
   14f48:	2884b03a 	or	r2,r5,r2
   14f4c:	30bfff15 	stw	r2,-4(r6)
   14f50:	e47fed2e 	bgeu	fp,r17,14f08 <__alt_data_end+0xfc014f08>
   14f54:	bdc5883a 	add	r2,r23,r23
   14f58:	1085883a 	add	r2,r2,r2
   14f5c:	9887883a 	add	r3,r19,r2
   14f60:	18800017 	ldw	r2,0(r3)
   14f64:	10000c1e 	bne	r2,zero,14f98 <quorem+0x1ec>
   14f68:	18bfff04 	addi	r2,r3,-4
   14f6c:	9880082e 	bgeu	r19,r2,14f90 <quorem+0x1e4>
   14f70:	18ffff17 	ldw	r3,-4(r3)
   14f74:	18000326 	beq	r3,zero,14f84 <quorem+0x1d8>
   14f78:	00000506 	br	14f90 <quorem+0x1e4>
   14f7c:	10c00017 	ldw	r3,0(r2)
   14f80:	1800031e 	bne	r3,zero,14f90 <quorem+0x1e4>
   14f84:	10bfff04 	addi	r2,r2,-4
   14f88:	bdffffc4 	addi	r23,r23,-1
   14f8c:	98bffb36 	bltu	r19,r2,14f7c <__alt_data_end+0xfc014f7c>
   14f90:	d8c00017 	ldw	r3,0(sp)
   14f94:	1dc00415 	stw	r23,16(r3)
   14f98:	9005883a 	mov	r2,r18
   14f9c:	dfc00d17 	ldw	ra,52(sp)
   14fa0:	df000c17 	ldw	fp,48(sp)
   14fa4:	ddc00b17 	ldw	r23,44(sp)
   14fa8:	dd800a17 	ldw	r22,40(sp)
   14fac:	dd400917 	ldw	r21,36(sp)
   14fb0:	dd000817 	ldw	r20,32(sp)
   14fb4:	dcc00717 	ldw	r19,28(sp)
   14fb8:	dc800617 	ldw	r18,24(sp)
   14fbc:	dc400517 	ldw	r17,20(sp)
   14fc0:	dc000417 	ldw	r16,16(sp)
   14fc4:	dec00e04 	addi	sp,sp,56
   14fc8:	f800283a 	ret
   14fcc:	0005883a 	mov	r2,zero
   14fd0:	003ff206 	br	14f9c <__alt_data_end+0xfc014f9c>

00014fd4 <_dtoa_r>:
   14fd4:	20801017 	ldw	r2,64(r4)
   14fd8:	deffde04 	addi	sp,sp,-136
   14fdc:	df002015 	stw	fp,128(sp)
   14fe0:	dcc01b15 	stw	r19,108(sp)
   14fe4:	dc801a15 	stw	r18,104(sp)
   14fe8:	dc401915 	stw	r17,100(sp)
   14fec:	dc001815 	stw	r16,96(sp)
   14ff0:	dfc02115 	stw	ra,132(sp)
   14ff4:	ddc01f15 	stw	r23,124(sp)
   14ff8:	dd801e15 	stw	r22,120(sp)
   14ffc:	dd401d15 	stw	r21,116(sp)
   15000:	dd001c15 	stw	r20,112(sp)
   15004:	d9c00315 	stw	r7,12(sp)
   15008:	2039883a 	mov	fp,r4
   1500c:	3023883a 	mov	r17,r6
   15010:	2825883a 	mov	r18,r5
   15014:	dc002417 	ldw	r16,144(sp)
   15018:	3027883a 	mov	r19,r6
   1501c:	10000826 	beq	r2,zero,15040 <_dtoa_r+0x6c>
   15020:	21801117 	ldw	r6,68(r4)
   15024:	00c00044 	movi	r3,1
   15028:	100b883a 	mov	r5,r2
   1502c:	1986983a 	sll	r3,r3,r6
   15030:	11800115 	stw	r6,4(r2)
   15034:	10c00215 	stw	r3,8(r2)
   15038:	0017cb80 	call	17cb8 <_Bfree>
   1503c:	e0001015 	stw	zero,64(fp)
   15040:	88002e16 	blt	r17,zero,150fc <_dtoa_r+0x128>
   15044:	80000015 	stw	zero,0(r16)
   15048:	889ffc2c 	andhi	r2,r17,32752
   1504c:	00dffc34 	movhi	r3,32752
   15050:	10c01c26 	beq	r2,r3,150c4 <_dtoa_r+0xf0>
   15054:	000d883a 	mov	r6,zero
   15058:	000f883a 	mov	r7,zero
   1505c:	9009883a 	mov	r4,r18
   15060:	980b883a 	mov	r5,r19
   15064:	001e9340 	call	1e934 <__eqdf2>
   15068:	10002b1e 	bne	r2,zero,15118 <_dtoa_r+0x144>
   1506c:	d9c02317 	ldw	r7,140(sp)
   15070:	00800044 	movi	r2,1
   15074:	38800015 	stw	r2,0(r7)
   15078:	d8802517 	ldw	r2,148(sp)
   1507c:	10019e26 	beq	r2,zero,156f8 <_dtoa_r+0x724>
   15080:	d8c02517 	ldw	r3,148(sp)
   15084:	008000f4 	movhi	r2,3
   15088:	10ae4744 	addi	r2,r2,-18147
   1508c:	18800015 	stw	r2,0(r3)
   15090:	10bfffc4 	addi	r2,r2,-1
   15094:	dfc02117 	ldw	ra,132(sp)
   15098:	df002017 	ldw	fp,128(sp)
   1509c:	ddc01f17 	ldw	r23,124(sp)
   150a0:	dd801e17 	ldw	r22,120(sp)
   150a4:	dd401d17 	ldw	r21,116(sp)
   150a8:	dd001c17 	ldw	r20,112(sp)
   150ac:	dcc01b17 	ldw	r19,108(sp)
   150b0:	dc801a17 	ldw	r18,104(sp)
   150b4:	dc401917 	ldw	r17,100(sp)
   150b8:	dc001817 	ldw	r16,96(sp)
   150bc:	dec02204 	addi	sp,sp,136
   150c0:	f800283a 	ret
   150c4:	d8c02317 	ldw	r3,140(sp)
   150c8:	0089c3c4 	movi	r2,9999
   150cc:	18800015 	stw	r2,0(r3)
   150d0:	90017726 	beq	r18,zero,156b0 <_dtoa_r+0x6dc>
   150d4:	008000f4 	movhi	r2,3
   150d8:	10ae5b04 	addi	r2,r2,-18068
   150dc:	d9002517 	ldw	r4,148(sp)
   150e0:	203fec26 	beq	r4,zero,15094 <__alt_data_end+0xfc015094>
   150e4:	10c000c7 	ldb	r3,3(r2)
   150e8:	1801781e 	bne	r3,zero,156cc <_dtoa_r+0x6f8>
   150ec:	10c000c4 	addi	r3,r2,3
   150f0:	d9802517 	ldw	r6,148(sp)
   150f4:	30c00015 	stw	r3,0(r6)
   150f8:	003fe606 	br	15094 <__alt_data_end+0xfc015094>
   150fc:	04e00034 	movhi	r19,32768
   15100:	9cffffc4 	addi	r19,r19,-1
   15104:	00800044 	movi	r2,1
   15108:	8ce6703a 	and	r19,r17,r19
   1510c:	80800015 	stw	r2,0(r16)
   15110:	9823883a 	mov	r17,r19
   15114:	003fcc06 	br	15048 <__alt_data_end+0xfc015048>
   15118:	d8800204 	addi	r2,sp,8
   1511c:	d8800015 	stw	r2,0(sp)
   15120:	d9c00104 	addi	r7,sp,4
   15124:	900b883a 	mov	r5,r18
   15128:	980d883a 	mov	r6,r19
   1512c:	e009883a 	mov	r4,fp
   15130:	8820d53a 	srli	r16,r17,20
   15134:	00189600 	call	18960 <__d2b>
   15138:	d8800915 	stw	r2,36(sp)
   1513c:	8001651e 	bne	r16,zero,156d4 <_dtoa_r+0x700>
   15140:	dd800217 	ldw	r22,8(sp)
   15144:	dc000117 	ldw	r16,4(sp)
   15148:	00800804 	movi	r2,32
   1514c:	b421883a 	add	r16,r22,r16
   15150:	80c10c84 	addi	r3,r16,1074
   15154:	10c2d10e 	bge	r2,r3,15c9c <_dtoa_r+0xcc8>
   15158:	00801004 	movi	r2,64
   1515c:	81010484 	addi	r4,r16,1042
   15160:	10c7c83a 	sub	r3,r2,r3
   15164:	9108d83a 	srl	r4,r18,r4
   15168:	88e2983a 	sll	r17,r17,r3
   1516c:	2448b03a 	or	r4,r4,r17
   15170:	001fe500 	call	1fe50 <__floatunsidf>
   15174:	017f8434 	movhi	r5,65040
   15178:	01800044 	movi	r6,1
   1517c:	1009883a 	mov	r4,r2
   15180:	194b883a 	add	r5,r3,r5
   15184:	843fffc4 	addi	r16,r16,-1
   15188:	d9801115 	stw	r6,68(sp)
   1518c:	000d883a 	mov	r6,zero
   15190:	01cffe34 	movhi	r7,16376
   15194:	001f3f80 	call	1f3f8 <__subdf3>
   15198:	0198dbf4 	movhi	r6,25455
   1519c:	01cff4f4 	movhi	r7,16339
   151a0:	3190d844 	addi	r6,r6,17249
   151a4:	39e1e9c4 	addi	r7,r7,-30809
   151a8:	1009883a 	mov	r4,r2
   151ac:	180b883a 	mov	r5,r3
   151b0:	001eb8c0 	call	1eb8c <__muldf3>
   151b4:	01a2d874 	movhi	r6,35681
   151b8:	01cff1f4 	movhi	r7,16327
   151bc:	31b22cc4 	addi	r6,r6,-14157
   151c0:	39e28a04 	addi	r7,r7,-30168
   151c4:	180b883a 	mov	r5,r3
   151c8:	1009883a 	mov	r4,r2
   151cc:	001d6b80 	call	1d6b8 <__adddf3>
   151d0:	8009883a 	mov	r4,r16
   151d4:	1029883a 	mov	r20,r2
   151d8:	1823883a 	mov	r17,r3
   151dc:	001fd740 	call	1fd74 <__floatsidf>
   151e0:	019427f4 	movhi	r6,20639
   151e4:	01cff4f4 	movhi	r7,16339
   151e8:	319e7ec4 	addi	r6,r6,31227
   151ec:	39d104c4 	addi	r7,r7,17427
   151f0:	1009883a 	mov	r4,r2
   151f4:	180b883a 	mov	r5,r3
   151f8:	001eb8c0 	call	1eb8c <__muldf3>
   151fc:	100d883a 	mov	r6,r2
   15200:	180f883a 	mov	r7,r3
   15204:	a009883a 	mov	r4,r20
   15208:	880b883a 	mov	r5,r17
   1520c:	001d6b80 	call	1d6b8 <__adddf3>
   15210:	1009883a 	mov	r4,r2
   15214:	180b883a 	mov	r5,r3
   15218:	1029883a 	mov	r20,r2
   1521c:	1823883a 	mov	r17,r3
   15220:	001fcf40 	call	1fcf4 <__fixdfsi>
   15224:	000d883a 	mov	r6,zero
   15228:	000f883a 	mov	r7,zero
   1522c:	a009883a 	mov	r4,r20
   15230:	880b883a 	mov	r5,r17
   15234:	d8800515 	stw	r2,20(sp)
   15238:	001ea980 	call	1ea98 <__ledf2>
   1523c:	10028716 	blt	r2,zero,15c5c <_dtoa_r+0xc88>
   15240:	d8c00517 	ldw	r3,20(sp)
   15244:	00800584 	movi	r2,22
   15248:	10c27536 	bltu	r2,r3,15c20 <_dtoa_r+0xc4c>
   1524c:	180490fa 	slli	r2,r3,3
   15250:	00c000f4 	movhi	r3,3
   15254:	18ee7604 	addi	r3,r3,-17960
   15258:	1885883a 	add	r2,r3,r2
   1525c:	11000017 	ldw	r4,0(r2)
   15260:	11400117 	ldw	r5,4(r2)
   15264:	900d883a 	mov	r6,r18
   15268:	980f883a 	mov	r7,r19
   1526c:	001e9bc0 	call	1e9bc <__gedf2>
   15270:	00828d0e 	bge	zero,r2,15ca8 <_dtoa_r+0xcd4>
   15274:	d9000517 	ldw	r4,20(sp)
   15278:	d8000e15 	stw	zero,56(sp)
   1527c:	213fffc4 	addi	r4,r4,-1
   15280:	d9000515 	stw	r4,20(sp)
   15284:	b42dc83a 	sub	r22,r22,r16
   15288:	b5bfffc4 	addi	r22,r22,-1
   1528c:	b0026f16 	blt	r22,zero,15c4c <_dtoa_r+0xc78>
   15290:	d8000815 	stw	zero,32(sp)
   15294:	d9c00517 	ldw	r7,20(sp)
   15298:	38026416 	blt	r7,zero,15c2c <_dtoa_r+0xc58>
   1529c:	b1ed883a 	add	r22,r22,r7
   152a0:	d9c00d15 	stw	r7,52(sp)
   152a4:	d8000a15 	stw	zero,40(sp)
   152a8:	d9800317 	ldw	r6,12(sp)
   152ac:	00800244 	movi	r2,9
   152b0:	11811436 	bltu	r2,r6,15704 <_dtoa_r+0x730>
   152b4:	00800144 	movi	r2,5
   152b8:	1184e10e 	bge	r2,r6,16640 <_dtoa_r+0x166c>
   152bc:	31bfff04 	addi	r6,r6,-4
   152c0:	d9800315 	stw	r6,12(sp)
   152c4:	0023883a 	mov	r17,zero
   152c8:	d9800317 	ldw	r6,12(sp)
   152cc:	008000c4 	movi	r2,3
   152d0:	30836726 	beq	r6,r2,16070 <_dtoa_r+0x109c>
   152d4:	1183410e 	bge	r2,r6,15fdc <_dtoa_r+0x1008>
   152d8:	d9c00317 	ldw	r7,12(sp)
   152dc:	00800104 	movi	r2,4
   152e0:	38827c26 	beq	r7,r2,15cd4 <_dtoa_r+0xd00>
   152e4:	00800144 	movi	r2,5
   152e8:	3884c41e 	bne	r7,r2,165fc <_dtoa_r+0x1628>
   152ec:	00800044 	movi	r2,1
   152f0:	d8800b15 	stw	r2,44(sp)
   152f4:	d8c00517 	ldw	r3,20(sp)
   152f8:	d9002217 	ldw	r4,136(sp)
   152fc:	1907883a 	add	r3,r3,r4
   15300:	19800044 	addi	r6,r3,1
   15304:	d8c00c15 	stw	r3,48(sp)
   15308:	d9800615 	stw	r6,24(sp)
   1530c:	0183a40e 	bge	zero,r6,161a0 <_dtoa_r+0x11cc>
   15310:	d9800617 	ldw	r6,24(sp)
   15314:	3021883a 	mov	r16,r6
   15318:	e0001115 	stw	zero,68(fp)
   1531c:	008005c4 	movi	r2,23
   15320:	1184c92e 	bgeu	r2,r6,16648 <_dtoa_r+0x1674>
   15324:	00c00044 	movi	r3,1
   15328:	00800104 	movi	r2,4
   1532c:	1085883a 	add	r2,r2,r2
   15330:	11000504 	addi	r4,r2,20
   15334:	180b883a 	mov	r5,r3
   15338:	18c00044 	addi	r3,r3,1
   1533c:	313ffb2e 	bgeu	r6,r4,1532c <__alt_data_end+0xfc01532c>
   15340:	e1401115 	stw	r5,68(fp)
   15344:	e009883a 	mov	r4,fp
   15348:	0017c100 	call	17c10 <_Balloc>
   1534c:	d8800715 	stw	r2,28(sp)
   15350:	e0801015 	stw	r2,64(fp)
   15354:	00800384 	movi	r2,14
   15358:	1400f736 	bltu	r2,r16,15738 <_dtoa_r+0x764>
   1535c:	8800f626 	beq	r17,zero,15738 <_dtoa_r+0x764>
   15360:	d9c00517 	ldw	r7,20(sp)
   15364:	01c39a0e 	bge	zero,r7,161d0 <_dtoa_r+0x11fc>
   15368:	388003cc 	andi	r2,r7,15
   1536c:	100490fa 	slli	r2,r2,3
   15370:	382bd13a 	srai	r21,r7,4
   15374:	00c000f4 	movhi	r3,3
   15378:	18ee7604 	addi	r3,r3,-17960
   1537c:	1885883a 	add	r2,r3,r2
   15380:	a8c0040c 	andi	r3,r21,16
   15384:	12400017 	ldw	r9,0(r2)
   15388:	12000117 	ldw	r8,4(r2)
   1538c:	18037926 	beq	r3,zero,16174 <_dtoa_r+0x11a0>
   15390:	008000f4 	movhi	r2,3
   15394:	10ae6c04 	addi	r2,r2,-18000
   15398:	11800817 	ldw	r6,32(r2)
   1539c:	11c00917 	ldw	r7,36(r2)
   153a0:	9009883a 	mov	r4,r18
   153a4:	980b883a 	mov	r5,r19
   153a8:	da001715 	stw	r8,92(sp)
   153ac:	da401615 	stw	r9,88(sp)
   153b0:	001df640 	call	1df64 <__divdf3>
   153b4:	da001717 	ldw	r8,92(sp)
   153b8:	da401617 	ldw	r9,88(sp)
   153bc:	ad4003cc 	andi	r21,r21,15
   153c0:	040000c4 	movi	r16,3
   153c4:	1023883a 	mov	r17,r2
   153c8:	1829883a 	mov	r20,r3
   153cc:	a8001126 	beq	r21,zero,15414 <_dtoa_r+0x440>
   153d0:	05c000f4 	movhi	r23,3
   153d4:	bdee6c04 	addi	r23,r23,-18000
   153d8:	4805883a 	mov	r2,r9
   153dc:	4007883a 	mov	r3,r8
   153e0:	a980004c 	andi	r6,r21,1
   153e4:	1009883a 	mov	r4,r2
   153e8:	a82bd07a 	srai	r21,r21,1
   153ec:	180b883a 	mov	r5,r3
   153f0:	30000426 	beq	r6,zero,15404 <_dtoa_r+0x430>
   153f4:	b9800017 	ldw	r6,0(r23)
   153f8:	b9c00117 	ldw	r7,4(r23)
   153fc:	84000044 	addi	r16,r16,1
   15400:	001eb8c0 	call	1eb8c <__muldf3>
   15404:	bdc00204 	addi	r23,r23,8
   15408:	a83ff51e 	bne	r21,zero,153e0 <__alt_data_end+0xfc0153e0>
   1540c:	1013883a 	mov	r9,r2
   15410:	1811883a 	mov	r8,r3
   15414:	480d883a 	mov	r6,r9
   15418:	400f883a 	mov	r7,r8
   1541c:	8809883a 	mov	r4,r17
   15420:	a00b883a 	mov	r5,r20
   15424:	001df640 	call	1df64 <__divdf3>
   15428:	d8800f15 	stw	r2,60(sp)
   1542c:	d8c01015 	stw	r3,64(sp)
   15430:	d8c00e17 	ldw	r3,56(sp)
   15434:	18000626 	beq	r3,zero,15450 <_dtoa_r+0x47c>
   15438:	d9000f17 	ldw	r4,60(sp)
   1543c:	d9401017 	ldw	r5,64(sp)
   15440:	000d883a 	mov	r6,zero
   15444:	01cffc34 	movhi	r7,16368
   15448:	001ea980 	call	1ea98 <__ledf2>
   1544c:	10040b16 	blt	r2,zero,1647c <_dtoa_r+0x14a8>
   15450:	8009883a 	mov	r4,r16
   15454:	001fd740 	call	1fd74 <__floatsidf>
   15458:	d9800f17 	ldw	r6,60(sp)
   1545c:	d9c01017 	ldw	r7,64(sp)
   15460:	1009883a 	mov	r4,r2
   15464:	180b883a 	mov	r5,r3
   15468:	001eb8c0 	call	1eb8c <__muldf3>
   1546c:	000d883a 	mov	r6,zero
   15470:	01d00734 	movhi	r7,16412
   15474:	1009883a 	mov	r4,r2
   15478:	180b883a 	mov	r5,r3
   1547c:	001d6b80 	call	1d6b8 <__adddf3>
   15480:	1021883a 	mov	r16,r2
   15484:	d8800617 	ldw	r2,24(sp)
   15488:	047f3034 	movhi	r17,64704
   1548c:	1c63883a 	add	r17,r3,r17
   15490:	10031826 	beq	r2,zero,160f4 <_dtoa_r+0x1120>
   15494:	d8c00517 	ldw	r3,20(sp)
   15498:	db000617 	ldw	r12,24(sp)
   1549c:	d8c01315 	stw	r3,76(sp)
   154a0:	d9000b17 	ldw	r4,44(sp)
   154a4:	20038f26 	beq	r4,zero,162e4 <_dtoa_r+0x1310>
   154a8:	60bfffc4 	addi	r2,r12,-1
   154ac:	100490fa 	slli	r2,r2,3
   154b0:	00c000f4 	movhi	r3,3
   154b4:	18ee7604 	addi	r3,r3,-17960
   154b8:	1885883a 	add	r2,r3,r2
   154bc:	11800017 	ldw	r6,0(r2)
   154c0:	11c00117 	ldw	r7,4(r2)
   154c4:	d8800717 	ldw	r2,28(sp)
   154c8:	0009883a 	mov	r4,zero
   154cc:	014ff834 	movhi	r5,16352
   154d0:	db001615 	stw	r12,88(sp)
   154d4:	15c00044 	addi	r23,r2,1
   154d8:	001df640 	call	1df64 <__divdf3>
   154dc:	800d883a 	mov	r6,r16
   154e0:	880f883a 	mov	r7,r17
   154e4:	1009883a 	mov	r4,r2
   154e8:	180b883a 	mov	r5,r3
   154ec:	001f3f80 	call	1f3f8 <__subdf3>
   154f0:	d9401017 	ldw	r5,64(sp)
   154f4:	d9000f17 	ldw	r4,60(sp)
   154f8:	102b883a 	mov	r21,r2
   154fc:	d8c01215 	stw	r3,72(sp)
   15500:	001fcf40 	call	1fcf4 <__fixdfsi>
   15504:	1009883a 	mov	r4,r2
   15508:	1029883a 	mov	r20,r2
   1550c:	001fd740 	call	1fd74 <__floatsidf>
   15510:	d9000f17 	ldw	r4,60(sp)
   15514:	d9401017 	ldw	r5,64(sp)
   15518:	100d883a 	mov	r6,r2
   1551c:	180f883a 	mov	r7,r3
   15520:	001f3f80 	call	1f3f8 <__subdf3>
   15524:	1823883a 	mov	r17,r3
   15528:	d8c00717 	ldw	r3,28(sp)
   1552c:	d9401217 	ldw	r5,72(sp)
   15530:	a2000c04 	addi	r8,r20,48
   15534:	1021883a 	mov	r16,r2
   15538:	1a000005 	stb	r8,0(r3)
   1553c:	800d883a 	mov	r6,r16
   15540:	880f883a 	mov	r7,r17
   15544:	a809883a 	mov	r4,r21
   15548:	4029883a 	mov	r20,r8
   1554c:	001e9bc0 	call	1e9bc <__gedf2>
   15550:	00841d16 	blt	zero,r2,165c8 <_dtoa_r+0x15f4>
   15554:	800d883a 	mov	r6,r16
   15558:	880f883a 	mov	r7,r17
   1555c:	0009883a 	mov	r4,zero
   15560:	014ffc34 	movhi	r5,16368
   15564:	001f3f80 	call	1f3f8 <__subdf3>
   15568:	d9401217 	ldw	r5,72(sp)
   1556c:	100d883a 	mov	r6,r2
   15570:	180f883a 	mov	r7,r3
   15574:	a809883a 	mov	r4,r21
   15578:	001e9bc0 	call	1e9bc <__gedf2>
   1557c:	db001617 	ldw	r12,88(sp)
   15580:	00840e16 	blt	zero,r2,165bc <_dtoa_r+0x15e8>
   15584:	00800044 	movi	r2,1
   15588:	13006b0e 	bge	r2,r12,15738 <_dtoa_r+0x764>
   1558c:	d9000717 	ldw	r4,28(sp)
   15590:	dd800f15 	stw	r22,60(sp)
   15594:	dcc01015 	stw	r19,64(sp)
   15598:	2319883a 	add	r12,r4,r12
   1559c:	dcc01217 	ldw	r19,72(sp)
   155a0:	602d883a 	mov	r22,r12
   155a4:	dc801215 	stw	r18,72(sp)
   155a8:	b825883a 	mov	r18,r23
   155ac:	00000906 	br	155d4 <_dtoa_r+0x600>
   155b0:	001f3f80 	call	1f3f8 <__subdf3>
   155b4:	a80d883a 	mov	r6,r21
   155b8:	980f883a 	mov	r7,r19
   155bc:	1009883a 	mov	r4,r2
   155c0:	180b883a 	mov	r5,r3
   155c4:	001ea980 	call	1ea98 <__ledf2>
   155c8:	1003e816 	blt	r2,zero,1656c <_dtoa_r+0x1598>
   155cc:	b825883a 	mov	r18,r23
   155d0:	bd83e926 	beq	r23,r22,16578 <_dtoa_r+0x15a4>
   155d4:	a809883a 	mov	r4,r21
   155d8:	980b883a 	mov	r5,r19
   155dc:	000d883a 	mov	r6,zero
   155e0:	01d00934 	movhi	r7,16420
   155e4:	001eb8c0 	call	1eb8c <__muldf3>
   155e8:	000d883a 	mov	r6,zero
   155ec:	01d00934 	movhi	r7,16420
   155f0:	8009883a 	mov	r4,r16
   155f4:	880b883a 	mov	r5,r17
   155f8:	102b883a 	mov	r21,r2
   155fc:	1827883a 	mov	r19,r3
   15600:	001eb8c0 	call	1eb8c <__muldf3>
   15604:	180b883a 	mov	r5,r3
   15608:	1009883a 	mov	r4,r2
   1560c:	1821883a 	mov	r16,r3
   15610:	1023883a 	mov	r17,r2
   15614:	001fcf40 	call	1fcf4 <__fixdfsi>
   15618:	1009883a 	mov	r4,r2
   1561c:	1029883a 	mov	r20,r2
   15620:	001fd740 	call	1fd74 <__floatsidf>
   15624:	8809883a 	mov	r4,r17
   15628:	800b883a 	mov	r5,r16
   1562c:	100d883a 	mov	r6,r2
   15630:	180f883a 	mov	r7,r3
   15634:	001f3f80 	call	1f3f8 <__subdf3>
   15638:	a5000c04 	addi	r20,r20,48
   1563c:	a80d883a 	mov	r6,r21
   15640:	980f883a 	mov	r7,r19
   15644:	1009883a 	mov	r4,r2
   15648:	180b883a 	mov	r5,r3
   1564c:	95000005 	stb	r20,0(r18)
   15650:	1021883a 	mov	r16,r2
   15654:	1823883a 	mov	r17,r3
   15658:	001ea980 	call	1ea98 <__ledf2>
   1565c:	bdc00044 	addi	r23,r23,1
   15660:	800d883a 	mov	r6,r16
   15664:	880f883a 	mov	r7,r17
   15668:	0009883a 	mov	r4,zero
   1566c:	014ffc34 	movhi	r5,16368
   15670:	103fcf0e 	bge	r2,zero,155b0 <__alt_data_end+0xfc0155b0>
   15674:	d8c01317 	ldw	r3,76(sp)
   15678:	d8c00515 	stw	r3,20(sp)
   1567c:	d9400917 	ldw	r5,36(sp)
   15680:	e009883a 	mov	r4,fp
   15684:	0017cb80 	call	17cb8 <_Bfree>
   15688:	d9000517 	ldw	r4,20(sp)
   1568c:	d9802317 	ldw	r6,140(sp)
   15690:	d9c02517 	ldw	r7,148(sp)
   15694:	b8000005 	stb	zero,0(r23)
   15698:	20800044 	addi	r2,r4,1
   1569c:	30800015 	stw	r2,0(r6)
   156a0:	3802aa26 	beq	r7,zero,1614c <_dtoa_r+0x1178>
   156a4:	3dc00015 	stw	r23,0(r7)
   156a8:	d8800717 	ldw	r2,28(sp)
   156ac:	003e7906 	br	15094 <__alt_data_end+0xfc015094>
   156b0:	00800434 	movhi	r2,16
   156b4:	10bfffc4 	addi	r2,r2,-1
   156b8:	88a2703a 	and	r17,r17,r2
   156bc:	883e851e 	bne	r17,zero,150d4 <__alt_data_end+0xfc0150d4>
   156c0:	008000f4 	movhi	r2,3
   156c4:	10ae5804 	addi	r2,r2,-18080
   156c8:	003e8406 	br	150dc <__alt_data_end+0xfc0150dc>
   156cc:	10c00204 	addi	r3,r2,8
   156d0:	003e8706 	br	150f0 <__alt_data_end+0xfc0150f0>
   156d4:	01400434 	movhi	r5,16
   156d8:	297fffc4 	addi	r5,r5,-1
   156dc:	994a703a 	and	r5,r19,r5
   156e0:	9009883a 	mov	r4,r18
   156e4:	843f0044 	addi	r16,r16,-1023
   156e8:	294ffc34 	orhi	r5,r5,16368
   156ec:	dd800217 	ldw	r22,8(sp)
   156f0:	d8001115 	stw	zero,68(sp)
   156f4:	003ea506 	br	1518c <__alt_data_end+0xfc01518c>
   156f8:	008000f4 	movhi	r2,3
   156fc:	10ae4704 	addi	r2,r2,-18148
   15700:	003e6406 	br	15094 <__alt_data_end+0xfc015094>
   15704:	e0001115 	stw	zero,68(fp)
   15708:	000b883a 	mov	r5,zero
   1570c:	e009883a 	mov	r4,fp
   15710:	0017c100 	call	17c10 <_Balloc>
   15714:	01bfffc4 	movi	r6,-1
   15718:	01c00044 	movi	r7,1
   1571c:	d8800715 	stw	r2,28(sp)
   15720:	d9800c15 	stw	r6,48(sp)
   15724:	e0801015 	stw	r2,64(fp)
   15728:	d8000315 	stw	zero,12(sp)
   1572c:	d9c00b15 	stw	r7,44(sp)
   15730:	d9800615 	stw	r6,24(sp)
   15734:	d8002215 	stw	zero,136(sp)
   15738:	d8800117 	ldw	r2,4(sp)
   1573c:	10008916 	blt	r2,zero,15964 <_dtoa_r+0x990>
   15740:	d9000517 	ldw	r4,20(sp)
   15744:	00c00384 	movi	r3,14
   15748:	19008616 	blt	r3,r4,15964 <_dtoa_r+0x990>
   1574c:	200490fa 	slli	r2,r4,3
   15750:	00c000f4 	movhi	r3,3
   15754:	d9802217 	ldw	r6,136(sp)
   15758:	18ee7604 	addi	r3,r3,-17960
   1575c:	1885883a 	add	r2,r3,r2
   15760:	14000017 	ldw	r16,0(r2)
   15764:	14400117 	ldw	r17,4(r2)
   15768:	30016316 	blt	r6,zero,15cf8 <_dtoa_r+0xd24>
   1576c:	800d883a 	mov	r6,r16
   15770:	880f883a 	mov	r7,r17
   15774:	9009883a 	mov	r4,r18
   15778:	980b883a 	mov	r5,r19
   1577c:	001df640 	call	1df64 <__divdf3>
   15780:	180b883a 	mov	r5,r3
   15784:	1009883a 	mov	r4,r2
   15788:	001fcf40 	call	1fcf4 <__fixdfsi>
   1578c:	1009883a 	mov	r4,r2
   15790:	102b883a 	mov	r21,r2
   15794:	001fd740 	call	1fd74 <__floatsidf>
   15798:	800d883a 	mov	r6,r16
   1579c:	880f883a 	mov	r7,r17
   157a0:	1009883a 	mov	r4,r2
   157a4:	180b883a 	mov	r5,r3
   157a8:	001eb8c0 	call	1eb8c <__muldf3>
   157ac:	100d883a 	mov	r6,r2
   157b0:	180f883a 	mov	r7,r3
   157b4:	9009883a 	mov	r4,r18
   157b8:	980b883a 	mov	r5,r19
   157bc:	001f3f80 	call	1f3f8 <__subdf3>
   157c0:	d9c00717 	ldw	r7,28(sp)
   157c4:	1009883a 	mov	r4,r2
   157c8:	a8800c04 	addi	r2,r21,48
   157cc:	38800005 	stb	r2,0(r7)
   157d0:	3dc00044 	addi	r23,r7,1
   157d4:	d9c00617 	ldw	r7,24(sp)
   157d8:	01800044 	movi	r6,1
   157dc:	180b883a 	mov	r5,r3
   157e0:	2005883a 	mov	r2,r4
   157e4:	39803826 	beq	r7,r6,158c8 <_dtoa_r+0x8f4>
   157e8:	000d883a 	mov	r6,zero
   157ec:	01d00934 	movhi	r7,16420
   157f0:	001eb8c0 	call	1eb8c <__muldf3>
   157f4:	000d883a 	mov	r6,zero
   157f8:	000f883a 	mov	r7,zero
   157fc:	1009883a 	mov	r4,r2
   15800:	180b883a 	mov	r5,r3
   15804:	1025883a 	mov	r18,r2
   15808:	1827883a 	mov	r19,r3
   1580c:	001e9340 	call	1e934 <__eqdf2>
   15810:	103f9a26 	beq	r2,zero,1567c <__alt_data_end+0xfc01567c>
   15814:	d9c00617 	ldw	r7,24(sp)
   15818:	d8c00717 	ldw	r3,28(sp)
   1581c:	b829883a 	mov	r20,r23
   15820:	38bfffc4 	addi	r2,r7,-1
   15824:	18ad883a 	add	r22,r3,r2
   15828:	00000a06 	br	15854 <_dtoa_r+0x880>
   1582c:	001eb8c0 	call	1eb8c <__muldf3>
   15830:	000d883a 	mov	r6,zero
   15834:	000f883a 	mov	r7,zero
   15838:	1009883a 	mov	r4,r2
   1583c:	180b883a 	mov	r5,r3
   15840:	1025883a 	mov	r18,r2
   15844:	1827883a 	mov	r19,r3
   15848:	b829883a 	mov	r20,r23
   1584c:	001e9340 	call	1e934 <__eqdf2>
   15850:	103f8a26 	beq	r2,zero,1567c <__alt_data_end+0xfc01567c>
   15854:	800d883a 	mov	r6,r16
   15858:	880f883a 	mov	r7,r17
   1585c:	9009883a 	mov	r4,r18
   15860:	980b883a 	mov	r5,r19
   15864:	001df640 	call	1df64 <__divdf3>
   15868:	180b883a 	mov	r5,r3
   1586c:	1009883a 	mov	r4,r2
   15870:	001fcf40 	call	1fcf4 <__fixdfsi>
   15874:	1009883a 	mov	r4,r2
   15878:	102b883a 	mov	r21,r2
   1587c:	001fd740 	call	1fd74 <__floatsidf>
   15880:	800d883a 	mov	r6,r16
   15884:	880f883a 	mov	r7,r17
   15888:	1009883a 	mov	r4,r2
   1588c:	180b883a 	mov	r5,r3
   15890:	001eb8c0 	call	1eb8c <__muldf3>
   15894:	100d883a 	mov	r6,r2
   15898:	180f883a 	mov	r7,r3
   1589c:	9009883a 	mov	r4,r18
   158a0:	980b883a 	mov	r5,r19
   158a4:	001f3f80 	call	1f3f8 <__subdf3>
   158a8:	aa000c04 	addi	r8,r21,48
   158ac:	a2000005 	stb	r8,0(r20)
   158b0:	000d883a 	mov	r6,zero
   158b4:	01d00934 	movhi	r7,16420
   158b8:	1009883a 	mov	r4,r2
   158bc:	180b883a 	mov	r5,r3
   158c0:	a5c00044 	addi	r23,r20,1
   158c4:	b53fd91e 	bne	r22,r20,1582c <__alt_data_end+0xfc01582c>
   158c8:	100d883a 	mov	r6,r2
   158cc:	180f883a 	mov	r7,r3
   158d0:	1009883a 	mov	r4,r2
   158d4:	180b883a 	mov	r5,r3
   158d8:	001d6b80 	call	1d6b8 <__adddf3>
   158dc:	100d883a 	mov	r6,r2
   158e0:	180f883a 	mov	r7,r3
   158e4:	8009883a 	mov	r4,r16
   158e8:	880b883a 	mov	r5,r17
   158ec:	1027883a 	mov	r19,r2
   158f0:	1825883a 	mov	r18,r3
   158f4:	001ea980 	call	1ea98 <__ledf2>
   158f8:	10000816 	blt	r2,zero,1591c <_dtoa_r+0x948>
   158fc:	980d883a 	mov	r6,r19
   15900:	900f883a 	mov	r7,r18
   15904:	8009883a 	mov	r4,r16
   15908:	880b883a 	mov	r5,r17
   1590c:	001e9340 	call	1e934 <__eqdf2>
   15910:	103f5a1e 	bne	r2,zero,1567c <__alt_data_end+0xfc01567c>
   15914:	ad40004c 	andi	r21,r21,1
   15918:	a83f5826 	beq	r21,zero,1567c <__alt_data_end+0xfc01567c>
   1591c:	bd3fffc3 	ldbu	r20,-1(r23)
   15920:	b8bfffc4 	addi	r2,r23,-1
   15924:	1007883a 	mov	r3,r2
   15928:	01400e44 	movi	r5,57
   1592c:	d9800717 	ldw	r6,28(sp)
   15930:	00000506 	br	15948 <_dtoa_r+0x974>
   15934:	18ffffc4 	addi	r3,r3,-1
   15938:	11824726 	beq	r2,r6,16258 <_dtoa_r+0x1284>
   1593c:	1d000003 	ldbu	r20,0(r3)
   15940:	102f883a 	mov	r23,r2
   15944:	10bfffc4 	addi	r2,r2,-1
   15948:	a1003fcc 	andi	r4,r20,255
   1594c:	2100201c 	xori	r4,r4,128
   15950:	213fe004 	addi	r4,r4,-128
   15954:	217ff726 	beq	r4,r5,15934 <__alt_data_end+0xfc015934>
   15958:	a2000044 	addi	r8,r20,1
   1595c:	12000005 	stb	r8,0(r2)
   15960:	003f4606 	br	1567c <__alt_data_end+0xfc01567c>
   15964:	d9000b17 	ldw	r4,44(sp)
   15968:	2000c826 	beq	r4,zero,15c8c <_dtoa_r+0xcb8>
   1596c:	d9800317 	ldw	r6,12(sp)
   15970:	00c00044 	movi	r3,1
   15974:	1980f90e 	bge	r3,r6,15d5c <_dtoa_r+0xd88>
   15978:	d8800617 	ldw	r2,24(sp)
   1597c:	d8c00a17 	ldw	r3,40(sp)
   15980:	157fffc4 	addi	r21,r2,-1
   15984:	1d41f316 	blt	r3,r21,16154 <_dtoa_r+0x1180>
   15988:	1d6bc83a 	sub	r21,r3,r21
   1598c:	d9c00617 	ldw	r7,24(sp)
   15990:	3802aa16 	blt	r7,zero,1643c <_dtoa_r+0x1468>
   15994:	dd000817 	ldw	r20,32(sp)
   15998:	d8800617 	ldw	r2,24(sp)
   1599c:	d8c00817 	ldw	r3,32(sp)
   159a0:	01400044 	movi	r5,1
   159a4:	e009883a 	mov	r4,fp
   159a8:	1887883a 	add	r3,r3,r2
   159ac:	d8c00815 	stw	r3,32(sp)
   159b0:	b0ad883a 	add	r22,r22,r2
   159b4:	00180440 	call	18044 <__i2b>
   159b8:	1023883a 	mov	r17,r2
   159bc:	a0000826 	beq	r20,zero,159e0 <_dtoa_r+0xa0c>
   159c0:	0580070e 	bge	zero,r22,159e0 <_dtoa_r+0xa0c>
   159c4:	a005883a 	mov	r2,r20
   159c8:	b500b916 	blt	r22,r20,15cb0 <_dtoa_r+0xcdc>
   159cc:	d9000817 	ldw	r4,32(sp)
   159d0:	a0a9c83a 	sub	r20,r20,r2
   159d4:	b0adc83a 	sub	r22,r22,r2
   159d8:	2089c83a 	sub	r4,r4,r2
   159dc:	d9000815 	stw	r4,32(sp)
   159e0:	d9800a17 	ldw	r6,40(sp)
   159e4:	0181810e 	bge	zero,r6,15fec <_dtoa_r+0x1018>
   159e8:	d9c00b17 	ldw	r7,44(sp)
   159ec:	3800b326 	beq	r7,zero,15cbc <_dtoa_r+0xce8>
   159f0:	a800b226 	beq	r21,zero,15cbc <_dtoa_r+0xce8>
   159f4:	880b883a 	mov	r5,r17
   159f8:	a80d883a 	mov	r6,r21
   159fc:	e009883a 	mov	r4,fp
   15a00:	001830c0 	call	1830c <__pow5mult>
   15a04:	d9800917 	ldw	r6,36(sp)
   15a08:	100b883a 	mov	r5,r2
   15a0c:	e009883a 	mov	r4,fp
   15a10:	1023883a 	mov	r17,r2
   15a14:	00180800 	call	18080 <__multiply>
   15a18:	1021883a 	mov	r16,r2
   15a1c:	d8800a17 	ldw	r2,40(sp)
   15a20:	d9400917 	ldw	r5,36(sp)
   15a24:	e009883a 	mov	r4,fp
   15a28:	1545c83a 	sub	r2,r2,r21
   15a2c:	d8800a15 	stw	r2,40(sp)
   15a30:	0017cb80 	call	17cb8 <_Bfree>
   15a34:	d8c00a17 	ldw	r3,40(sp)
   15a38:	18009f1e 	bne	r3,zero,15cb8 <_dtoa_r+0xce4>
   15a3c:	05c00044 	movi	r23,1
   15a40:	e009883a 	mov	r4,fp
   15a44:	b80b883a 	mov	r5,r23
   15a48:	00180440 	call	18044 <__i2b>
   15a4c:	d9000d17 	ldw	r4,52(sp)
   15a50:	102b883a 	mov	r21,r2
   15a54:	2000ce26 	beq	r4,zero,15d90 <_dtoa_r+0xdbc>
   15a58:	200d883a 	mov	r6,r4
   15a5c:	100b883a 	mov	r5,r2
   15a60:	e009883a 	mov	r4,fp
   15a64:	001830c0 	call	1830c <__pow5mult>
   15a68:	d9800317 	ldw	r6,12(sp)
   15a6c:	102b883a 	mov	r21,r2
   15a70:	b981810e 	bge	r23,r6,16078 <_dtoa_r+0x10a4>
   15a74:	0027883a 	mov	r19,zero
   15a78:	a8800417 	ldw	r2,16(r21)
   15a7c:	05c00804 	movi	r23,32
   15a80:	10800104 	addi	r2,r2,4
   15a84:	1085883a 	add	r2,r2,r2
   15a88:	1085883a 	add	r2,r2,r2
   15a8c:	a885883a 	add	r2,r21,r2
   15a90:	11000017 	ldw	r4,0(r2)
   15a94:	0017f2c0 	call	17f2c <__hi0bits>
   15a98:	b885c83a 	sub	r2,r23,r2
   15a9c:	1585883a 	add	r2,r2,r22
   15aa0:	108007cc 	andi	r2,r2,31
   15aa4:	1000b326 	beq	r2,zero,15d74 <_dtoa_r+0xda0>
   15aa8:	00c00804 	movi	r3,32
   15aac:	1887c83a 	sub	r3,r3,r2
   15ab0:	01000104 	movi	r4,4
   15ab4:	20c2cd0e 	bge	r4,r3,165ec <_dtoa_r+0x1618>
   15ab8:	00c00704 	movi	r3,28
   15abc:	1885c83a 	sub	r2,r3,r2
   15ac0:	d8c00817 	ldw	r3,32(sp)
   15ac4:	a0a9883a 	add	r20,r20,r2
   15ac8:	b0ad883a 	add	r22,r22,r2
   15acc:	1887883a 	add	r3,r3,r2
   15ad0:	d8c00815 	stw	r3,32(sp)
   15ad4:	d9800817 	ldw	r6,32(sp)
   15ad8:	0180040e 	bge	zero,r6,15aec <_dtoa_r+0xb18>
   15adc:	800b883a 	mov	r5,r16
   15ae0:	e009883a 	mov	r4,fp
   15ae4:	001844c0 	call	1844c <__lshift>
   15ae8:	1021883a 	mov	r16,r2
   15aec:	0580050e 	bge	zero,r22,15b04 <_dtoa_r+0xb30>
   15af0:	a80b883a 	mov	r5,r21
   15af4:	b00d883a 	mov	r6,r22
   15af8:	e009883a 	mov	r4,fp
   15afc:	001844c0 	call	1844c <__lshift>
   15b00:	102b883a 	mov	r21,r2
   15b04:	d9c00e17 	ldw	r7,56(sp)
   15b08:	3801211e 	bne	r7,zero,15f90 <_dtoa_r+0xfbc>
   15b0c:	d9800617 	ldw	r6,24(sp)
   15b10:	0181380e 	bge	zero,r6,15ff4 <_dtoa_r+0x1020>
   15b14:	d8c00b17 	ldw	r3,44(sp)
   15b18:	1800ab1e 	bne	r3,zero,15dc8 <_dtoa_r+0xdf4>
   15b1c:	dc800717 	ldw	r18,28(sp)
   15b20:	dcc00617 	ldw	r19,24(sp)
   15b24:	9029883a 	mov	r20,r18
   15b28:	00000206 	br	15b34 <_dtoa_r+0xb60>
   15b2c:	0017ce00 	call	17ce0 <__multadd>
   15b30:	1021883a 	mov	r16,r2
   15b34:	a80b883a 	mov	r5,r21
   15b38:	8009883a 	mov	r4,r16
   15b3c:	0014dac0 	call	14dac <quorem>
   15b40:	10800c04 	addi	r2,r2,48
   15b44:	90800005 	stb	r2,0(r18)
   15b48:	94800044 	addi	r18,r18,1
   15b4c:	9507c83a 	sub	r3,r18,r20
   15b50:	000f883a 	mov	r7,zero
   15b54:	01800284 	movi	r6,10
   15b58:	800b883a 	mov	r5,r16
   15b5c:	e009883a 	mov	r4,fp
   15b60:	1cfff216 	blt	r3,r19,15b2c <__alt_data_end+0xfc015b2c>
   15b64:	1011883a 	mov	r8,r2
   15b68:	d8800617 	ldw	r2,24(sp)
   15b6c:	0082370e 	bge	zero,r2,1644c <_dtoa_r+0x1478>
   15b70:	d9000717 	ldw	r4,28(sp)
   15b74:	0025883a 	mov	r18,zero
   15b78:	20af883a 	add	r23,r4,r2
   15b7c:	01800044 	movi	r6,1
   15b80:	800b883a 	mov	r5,r16
   15b84:	e009883a 	mov	r4,fp
   15b88:	da001715 	stw	r8,92(sp)
   15b8c:	001844c0 	call	1844c <__lshift>
   15b90:	a80b883a 	mov	r5,r21
   15b94:	1009883a 	mov	r4,r2
   15b98:	d8800915 	stw	r2,36(sp)
   15b9c:	00185940 	call	18594 <__mcmp>
   15ba0:	da001717 	ldw	r8,92(sp)
   15ba4:	0081800e 	bge	zero,r2,161a8 <_dtoa_r+0x11d4>
   15ba8:	b93fffc3 	ldbu	r4,-1(r23)
   15bac:	b8bfffc4 	addi	r2,r23,-1
   15bb0:	1007883a 	mov	r3,r2
   15bb4:	01800e44 	movi	r6,57
   15bb8:	d9c00717 	ldw	r7,28(sp)
   15bbc:	00000506 	br	15bd4 <_dtoa_r+0xc00>
   15bc0:	18ffffc4 	addi	r3,r3,-1
   15bc4:	11c12326 	beq	r2,r7,16054 <_dtoa_r+0x1080>
   15bc8:	19000003 	ldbu	r4,0(r3)
   15bcc:	102f883a 	mov	r23,r2
   15bd0:	10bfffc4 	addi	r2,r2,-1
   15bd4:	21403fcc 	andi	r5,r4,255
   15bd8:	2940201c 	xori	r5,r5,128
   15bdc:	297fe004 	addi	r5,r5,-128
   15be0:	29bff726 	beq	r5,r6,15bc0 <__alt_data_end+0xfc015bc0>
   15be4:	21000044 	addi	r4,r4,1
   15be8:	11000005 	stb	r4,0(r2)
   15bec:	a80b883a 	mov	r5,r21
   15bf0:	e009883a 	mov	r4,fp
   15bf4:	0017cb80 	call	17cb8 <_Bfree>
   15bf8:	883ea026 	beq	r17,zero,1567c <__alt_data_end+0xfc01567c>
   15bfc:	90000426 	beq	r18,zero,15c10 <_dtoa_r+0xc3c>
   15c00:	94400326 	beq	r18,r17,15c10 <_dtoa_r+0xc3c>
   15c04:	900b883a 	mov	r5,r18
   15c08:	e009883a 	mov	r4,fp
   15c0c:	0017cb80 	call	17cb8 <_Bfree>
   15c10:	880b883a 	mov	r5,r17
   15c14:	e009883a 	mov	r4,fp
   15c18:	0017cb80 	call	17cb8 <_Bfree>
   15c1c:	003e9706 	br	1567c <__alt_data_end+0xfc01567c>
   15c20:	01800044 	movi	r6,1
   15c24:	d9800e15 	stw	r6,56(sp)
   15c28:	003d9606 	br	15284 <__alt_data_end+0xfc015284>
   15c2c:	d8800817 	ldw	r2,32(sp)
   15c30:	d8c00517 	ldw	r3,20(sp)
   15c34:	d8000d15 	stw	zero,52(sp)
   15c38:	10c5c83a 	sub	r2,r2,r3
   15c3c:	00c9c83a 	sub	r4,zero,r3
   15c40:	d8800815 	stw	r2,32(sp)
   15c44:	d9000a15 	stw	r4,40(sp)
   15c48:	003d9706 	br	152a8 <__alt_data_end+0xfc0152a8>
   15c4c:	05adc83a 	sub	r22,zero,r22
   15c50:	dd800815 	stw	r22,32(sp)
   15c54:	002d883a 	mov	r22,zero
   15c58:	003d8e06 	br	15294 <__alt_data_end+0xfc015294>
   15c5c:	d9000517 	ldw	r4,20(sp)
   15c60:	001fd740 	call	1fd74 <__floatsidf>
   15c64:	100d883a 	mov	r6,r2
   15c68:	180f883a 	mov	r7,r3
   15c6c:	a009883a 	mov	r4,r20
   15c70:	880b883a 	mov	r5,r17
   15c74:	001e9340 	call	1e934 <__eqdf2>
   15c78:	103d7126 	beq	r2,zero,15240 <__alt_data_end+0xfc015240>
   15c7c:	d9c00517 	ldw	r7,20(sp)
   15c80:	39ffffc4 	addi	r7,r7,-1
   15c84:	d9c00515 	stw	r7,20(sp)
   15c88:	003d6d06 	br	15240 <__alt_data_end+0xfc015240>
   15c8c:	dd400a17 	ldw	r21,40(sp)
   15c90:	dd000817 	ldw	r20,32(sp)
   15c94:	0023883a 	mov	r17,zero
   15c98:	003f4806 	br	159bc <__alt_data_end+0xfc0159bc>
   15c9c:	10e3c83a 	sub	r17,r2,r3
   15ca0:	9448983a 	sll	r4,r18,r17
   15ca4:	003d3206 	br	15170 <__alt_data_end+0xfc015170>
   15ca8:	d8000e15 	stw	zero,56(sp)
   15cac:	003d7506 	br	15284 <__alt_data_end+0xfc015284>
   15cb0:	b005883a 	mov	r2,r22
   15cb4:	003f4506 	br	159cc <__alt_data_end+0xfc0159cc>
   15cb8:	dc000915 	stw	r16,36(sp)
   15cbc:	d9800a17 	ldw	r6,40(sp)
   15cc0:	d9400917 	ldw	r5,36(sp)
   15cc4:	e009883a 	mov	r4,fp
   15cc8:	001830c0 	call	1830c <__pow5mult>
   15ccc:	1021883a 	mov	r16,r2
   15cd0:	003f5a06 	br	15a3c <__alt_data_end+0xfc015a3c>
   15cd4:	01c00044 	movi	r7,1
   15cd8:	d9c00b15 	stw	r7,44(sp)
   15cdc:	d8802217 	ldw	r2,136(sp)
   15ce0:	0081280e 	bge	zero,r2,16184 <_dtoa_r+0x11b0>
   15ce4:	100d883a 	mov	r6,r2
   15ce8:	1021883a 	mov	r16,r2
   15cec:	d8800c15 	stw	r2,48(sp)
   15cf0:	d8800615 	stw	r2,24(sp)
   15cf4:	003d8806 	br	15318 <__alt_data_end+0xfc015318>
   15cf8:	d8800617 	ldw	r2,24(sp)
   15cfc:	00be9b16 	blt	zero,r2,1576c <__alt_data_end+0xfc01576c>
   15d00:	10010f1e 	bne	r2,zero,16140 <_dtoa_r+0x116c>
   15d04:	880b883a 	mov	r5,r17
   15d08:	000d883a 	mov	r6,zero
   15d0c:	01d00534 	movhi	r7,16404
   15d10:	8009883a 	mov	r4,r16
   15d14:	001eb8c0 	call	1eb8c <__muldf3>
   15d18:	900d883a 	mov	r6,r18
   15d1c:	980f883a 	mov	r7,r19
   15d20:	1009883a 	mov	r4,r2
   15d24:	180b883a 	mov	r5,r3
   15d28:	001e9bc0 	call	1e9bc <__gedf2>
   15d2c:	002b883a 	mov	r21,zero
   15d30:	0023883a 	mov	r17,zero
   15d34:	1000bf16 	blt	r2,zero,16034 <_dtoa_r+0x1060>
   15d38:	d9802217 	ldw	r6,136(sp)
   15d3c:	ddc00717 	ldw	r23,28(sp)
   15d40:	018c303a 	nor	r6,zero,r6
   15d44:	d9800515 	stw	r6,20(sp)
   15d48:	a80b883a 	mov	r5,r21
   15d4c:	e009883a 	mov	r4,fp
   15d50:	0017cb80 	call	17cb8 <_Bfree>
   15d54:	883e4926 	beq	r17,zero,1567c <__alt_data_end+0xfc01567c>
   15d58:	003fad06 	br	15c10 <__alt_data_end+0xfc015c10>
   15d5c:	d9c01117 	ldw	r7,68(sp)
   15d60:	3801bc26 	beq	r7,zero,16454 <_dtoa_r+0x1480>
   15d64:	10810cc4 	addi	r2,r2,1075
   15d68:	dd400a17 	ldw	r21,40(sp)
   15d6c:	dd000817 	ldw	r20,32(sp)
   15d70:	003f0a06 	br	1599c <__alt_data_end+0xfc01599c>
   15d74:	00800704 	movi	r2,28
   15d78:	d9000817 	ldw	r4,32(sp)
   15d7c:	a0a9883a 	add	r20,r20,r2
   15d80:	b0ad883a 	add	r22,r22,r2
   15d84:	2089883a 	add	r4,r4,r2
   15d88:	d9000815 	stw	r4,32(sp)
   15d8c:	003f5106 	br	15ad4 <__alt_data_end+0xfc015ad4>
   15d90:	d8c00317 	ldw	r3,12(sp)
   15d94:	b8c1fc0e 	bge	r23,r3,16588 <_dtoa_r+0x15b4>
   15d98:	0027883a 	mov	r19,zero
   15d9c:	b805883a 	mov	r2,r23
   15da0:	003f3e06 	br	15a9c <__alt_data_end+0xfc015a9c>
   15da4:	880b883a 	mov	r5,r17
   15da8:	e009883a 	mov	r4,fp
   15dac:	000f883a 	mov	r7,zero
   15db0:	01800284 	movi	r6,10
   15db4:	0017ce00 	call	17ce0 <__multadd>
   15db8:	d9000c17 	ldw	r4,48(sp)
   15dbc:	1023883a 	mov	r17,r2
   15dc0:	0102040e 	bge	zero,r4,165d4 <_dtoa_r+0x1600>
   15dc4:	d9000615 	stw	r4,24(sp)
   15dc8:	0500050e 	bge	zero,r20,15de0 <_dtoa_r+0xe0c>
   15dcc:	880b883a 	mov	r5,r17
   15dd0:	a00d883a 	mov	r6,r20
   15dd4:	e009883a 	mov	r4,fp
   15dd8:	001844c0 	call	1844c <__lshift>
   15ddc:	1023883a 	mov	r17,r2
   15de0:	9801241e 	bne	r19,zero,16274 <_dtoa_r+0x12a0>
   15de4:	8829883a 	mov	r20,r17
   15de8:	d9000617 	ldw	r4,24(sp)
   15dec:	dcc00717 	ldw	r19,28(sp)
   15df0:	9480004c 	andi	r18,r18,1
   15df4:	20bfffc4 	addi	r2,r4,-1
   15df8:	9885883a 	add	r2,r19,r2
   15dfc:	d8800415 	stw	r2,16(sp)
   15e00:	dc800615 	stw	r18,24(sp)
   15e04:	a80b883a 	mov	r5,r21
   15e08:	8009883a 	mov	r4,r16
   15e0c:	0014dac0 	call	14dac <quorem>
   15e10:	880b883a 	mov	r5,r17
   15e14:	8009883a 	mov	r4,r16
   15e18:	102f883a 	mov	r23,r2
   15e1c:	00185940 	call	18594 <__mcmp>
   15e20:	a80b883a 	mov	r5,r21
   15e24:	a00d883a 	mov	r6,r20
   15e28:	e009883a 	mov	r4,fp
   15e2c:	102d883a 	mov	r22,r2
   15e30:	00185f40 	call	185f4 <__mdiff>
   15e34:	1007883a 	mov	r3,r2
   15e38:	10800317 	ldw	r2,12(r2)
   15e3c:	bc800c04 	addi	r18,r23,48
   15e40:	180b883a 	mov	r5,r3
   15e44:	10004e1e 	bne	r2,zero,15f80 <_dtoa_r+0xfac>
   15e48:	8009883a 	mov	r4,r16
   15e4c:	d8c01615 	stw	r3,88(sp)
   15e50:	00185940 	call	18594 <__mcmp>
   15e54:	d8c01617 	ldw	r3,88(sp)
   15e58:	e009883a 	mov	r4,fp
   15e5c:	d8801615 	stw	r2,88(sp)
   15e60:	180b883a 	mov	r5,r3
   15e64:	0017cb80 	call	17cb8 <_Bfree>
   15e68:	d8801617 	ldw	r2,88(sp)
   15e6c:	1000041e 	bne	r2,zero,15e80 <_dtoa_r+0xeac>
   15e70:	d9800317 	ldw	r6,12(sp)
   15e74:	3000021e 	bne	r6,zero,15e80 <_dtoa_r+0xeac>
   15e78:	d8c00617 	ldw	r3,24(sp)
   15e7c:	18003726 	beq	r3,zero,15f5c <_dtoa_r+0xf88>
   15e80:	b0002016 	blt	r22,zero,15f04 <_dtoa_r+0xf30>
   15e84:	b000041e 	bne	r22,zero,15e98 <_dtoa_r+0xec4>
   15e88:	d9000317 	ldw	r4,12(sp)
   15e8c:	2000021e 	bne	r4,zero,15e98 <_dtoa_r+0xec4>
   15e90:	d8c00617 	ldw	r3,24(sp)
   15e94:	18001b26 	beq	r3,zero,15f04 <_dtoa_r+0xf30>
   15e98:	00810716 	blt	zero,r2,162b8 <_dtoa_r+0x12e4>
   15e9c:	d8c00417 	ldw	r3,16(sp)
   15ea0:	9d800044 	addi	r22,r19,1
   15ea4:	9c800005 	stb	r18,0(r19)
   15ea8:	b02f883a 	mov	r23,r22
   15eac:	98c10626 	beq	r19,r3,162c8 <_dtoa_r+0x12f4>
   15eb0:	800b883a 	mov	r5,r16
   15eb4:	000f883a 	mov	r7,zero
   15eb8:	01800284 	movi	r6,10
   15ebc:	e009883a 	mov	r4,fp
   15ec0:	0017ce00 	call	17ce0 <__multadd>
   15ec4:	1021883a 	mov	r16,r2
   15ec8:	000f883a 	mov	r7,zero
   15ecc:	01800284 	movi	r6,10
   15ed0:	880b883a 	mov	r5,r17
   15ed4:	e009883a 	mov	r4,fp
   15ed8:	8d002526 	beq	r17,r20,15f70 <_dtoa_r+0xf9c>
   15edc:	0017ce00 	call	17ce0 <__multadd>
   15ee0:	a00b883a 	mov	r5,r20
   15ee4:	000f883a 	mov	r7,zero
   15ee8:	01800284 	movi	r6,10
   15eec:	e009883a 	mov	r4,fp
   15ef0:	1023883a 	mov	r17,r2
   15ef4:	0017ce00 	call	17ce0 <__multadd>
   15ef8:	1029883a 	mov	r20,r2
   15efc:	b027883a 	mov	r19,r22
   15f00:	003fc006 	br	15e04 <__alt_data_end+0xfc015e04>
   15f04:	9011883a 	mov	r8,r18
   15f08:	00800e0e 	bge	zero,r2,15f44 <_dtoa_r+0xf70>
   15f0c:	800b883a 	mov	r5,r16
   15f10:	01800044 	movi	r6,1
   15f14:	e009883a 	mov	r4,fp
   15f18:	da001715 	stw	r8,92(sp)
   15f1c:	001844c0 	call	1844c <__lshift>
   15f20:	a80b883a 	mov	r5,r21
   15f24:	1009883a 	mov	r4,r2
   15f28:	1021883a 	mov	r16,r2
   15f2c:	00185940 	call	18594 <__mcmp>
   15f30:	da001717 	ldw	r8,92(sp)
   15f34:	0081960e 	bge	zero,r2,16590 <_dtoa_r+0x15bc>
   15f38:	00800e44 	movi	r2,57
   15f3c:	40817026 	beq	r8,r2,16500 <_dtoa_r+0x152c>
   15f40:	ba000c44 	addi	r8,r23,49
   15f44:	8825883a 	mov	r18,r17
   15f48:	9dc00044 	addi	r23,r19,1
   15f4c:	9a000005 	stb	r8,0(r19)
   15f50:	a023883a 	mov	r17,r20
   15f54:	dc000915 	stw	r16,36(sp)
   15f58:	003f2406 	br	15bec <__alt_data_end+0xfc015bec>
   15f5c:	00800e44 	movi	r2,57
   15f60:	9011883a 	mov	r8,r18
   15f64:	90816626 	beq	r18,r2,16500 <_dtoa_r+0x152c>
   15f68:	05bff516 	blt	zero,r22,15f40 <__alt_data_end+0xfc015f40>
   15f6c:	003ff506 	br	15f44 <__alt_data_end+0xfc015f44>
   15f70:	0017ce00 	call	17ce0 <__multadd>
   15f74:	1023883a 	mov	r17,r2
   15f78:	1029883a 	mov	r20,r2
   15f7c:	003fdf06 	br	15efc <__alt_data_end+0xfc015efc>
   15f80:	e009883a 	mov	r4,fp
   15f84:	0017cb80 	call	17cb8 <_Bfree>
   15f88:	00800044 	movi	r2,1
   15f8c:	003fbc06 	br	15e80 <__alt_data_end+0xfc015e80>
   15f90:	a80b883a 	mov	r5,r21
   15f94:	8009883a 	mov	r4,r16
   15f98:	00185940 	call	18594 <__mcmp>
   15f9c:	103edb0e 	bge	r2,zero,15b0c <__alt_data_end+0xfc015b0c>
   15fa0:	800b883a 	mov	r5,r16
   15fa4:	000f883a 	mov	r7,zero
   15fa8:	01800284 	movi	r6,10
   15fac:	e009883a 	mov	r4,fp
   15fb0:	0017ce00 	call	17ce0 <__multadd>
   15fb4:	1021883a 	mov	r16,r2
   15fb8:	d8800517 	ldw	r2,20(sp)
   15fbc:	d8c00b17 	ldw	r3,44(sp)
   15fc0:	10bfffc4 	addi	r2,r2,-1
   15fc4:	d8800515 	stw	r2,20(sp)
   15fc8:	183f761e 	bne	r3,zero,15da4 <__alt_data_end+0xfc015da4>
   15fcc:	d9000c17 	ldw	r4,48(sp)
   15fd0:	0101730e 	bge	zero,r4,165a0 <_dtoa_r+0x15cc>
   15fd4:	d9000615 	stw	r4,24(sp)
   15fd8:	003ed006 	br	15b1c <__alt_data_end+0xfc015b1c>
   15fdc:	00800084 	movi	r2,2
   15fe0:	3081861e 	bne	r6,r2,165fc <_dtoa_r+0x1628>
   15fe4:	d8000b15 	stw	zero,44(sp)
   15fe8:	003f3c06 	br	15cdc <__alt_data_end+0xfc015cdc>
   15fec:	dc000917 	ldw	r16,36(sp)
   15ff0:	003e9206 	br	15a3c <__alt_data_end+0xfc015a3c>
   15ff4:	d9c00317 	ldw	r7,12(sp)
   15ff8:	00800084 	movi	r2,2
   15ffc:	11fec50e 	bge	r2,r7,15b14 <__alt_data_end+0xfc015b14>
   16000:	d9000617 	ldw	r4,24(sp)
   16004:	20013c1e 	bne	r4,zero,164f8 <_dtoa_r+0x1524>
   16008:	a80b883a 	mov	r5,r21
   1600c:	000f883a 	mov	r7,zero
   16010:	01800144 	movi	r6,5
   16014:	e009883a 	mov	r4,fp
   16018:	0017ce00 	call	17ce0 <__multadd>
   1601c:	100b883a 	mov	r5,r2
   16020:	8009883a 	mov	r4,r16
   16024:	102b883a 	mov	r21,r2
   16028:	00185940 	call	18594 <__mcmp>
   1602c:	dc000915 	stw	r16,36(sp)
   16030:	00bf410e 	bge	zero,r2,15d38 <__alt_data_end+0xfc015d38>
   16034:	d9c00717 	ldw	r7,28(sp)
   16038:	00800c44 	movi	r2,49
   1603c:	38800005 	stb	r2,0(r7)
   16040:	d8800517 	ldw	r2,20(sp)
   16044:	3dc00044 	addi	r23,r7,1
   16048:	10800044 	addi	r2,r2,1
   1604c:	d8800515 	stw	r2,20(sp)
   16050:	003f3d06 	br	15d48 <__alt_data_end+0xfc015d48>
   16054:	d9800517 	ldw	r6,20(sp)
   16058:	d9c00717 	ldw	r7,28(sp)
   1605c:	00800c44 	movi	r2,49
   16060:	31800044 	addi	r6,r6,1
   16064:	d9800515 	stw	r6,20(sp)
   16068:	38800005 	stb	r2,0(r7)
   1606c:	003edf06 	br	15bec <__alt_data_end+0xfc015bec>
   16070:	d8000b15 	stw	zero,44(sp)
   16074:	003c9f06 	br	152f4 <__alt_data_end+0xfc0152f4>
   16078:	903e7e1e 	bne	r18,zero,15a74 <__alt_data_end+0xfc015a74>
   1607c:	00800434 	movhi	r2,16
   16080:	10bfffc4 	addi	r2,r2,-1
   16084:	9884703a 	and	r2,r19,r2
   16088:	1000ea1e 	bne	r2,zero,16434 <_dtoa_r+0x1460>
   1608c:	9cdffc2c 	andhi	r19,r19,32752
   16090:	9800e826 	beq	r19,zero,16434 <_dtoa_r+0x1460>
   16094:	d9c00817 	ldw	r7,32(sp)
   16098:	b5800044 	addi	r22,r22,1
   1609c:	04c00044 	movi	r19,1
   160a0:	39c00044 	addi	r7,r7,1
   160a4:	d9c00815 	stw	r7,32(sp)
   160a8:	d8800d17 	ldw	r2,52(sp)
   160ac:	103e721e 	bne	r2,zero,15a78 <__alt_data_end+0xfc015a78>
   160b0:	00800044 	movi	r2,1
   160b4:	003e7906 	br	15a9c <__alt_data_end+0xfc015a9c>
   160b8:	8009883a 	mov	r4,r16
   160bc:	001fd740 	call	1fd74 <__floatsidf>
   160c0:	d9800f17 	ldw	r6,60(sp)
   160c4:	d9c01017 	ldw	r7,64(sp)
   160c8:	1009883a 	mov	r4,r2
   160cc:	180b883a 	mov	r5,r3
   160d0:	001eb8c0 	call	1eb8c <__muldf3>
   160d4:	000d883a 	mov	r6,zero
   160d8:	01d00734 	movhi	r7,16412
   160dc:	1009883a 	mov	r4,r2
   160e0:	180b883a 	mov	r5,r3
   160e4:	001d6b80 	call	1d6b8 <__adddf3>
   160e8:	047f3034 	movhi	r17,64704
   160ec:	1021883a 	mov	r16,r2
   160f0:	1c63883a 	add	r17,r3,r17
   160f4:	d9000f17 	ldw	r4,60(sp)
   160f8:	d9401017 	ldw	r5,64(sp)
   160fc:	000d883a 	mov	r6,zero
   16100:	01d00534 	movhi	r7,16404
   16104:	001f3f80 	call	1f3f8 <__subdf3>
   16108:	800d883a 	mov	r6,r16
   1610c:	880f883a 	mov	r7,r17
   16110:	1009883a 	mov	r4,r2
   16114:	180b883a 	mov	r5,r3
   16118:	102b883a 	mov	r21,r2
   1611c:	1829883a 	mov	r20,r3
   16120:	001e9bc0 	call	1e9bc <__gedf2>
   16124:	00806c16 	blt	zero,r2,162d8 <_dtoa_r+0x1304>
   16128:	89e0003c 	xorhi	r7,r17,32768
   1612c:	800d883a 	mov	r6,r16
   16130:	a809883a 	mov	r4,r21
   16134:	a00b883a 	mov	r5,r20
   16138:	001ea980 	call	1ea98 <__ledf2>
   1613c:	103d7e0e 	bge	r2,zero,15738 <__alt_data_end+0xfc015738>
   16140:	002b883a 	mov	r21,zero
   16144:	0023883a 	mov	r17,zero
   16148:	003efb06 	br	15d38 <__alt_data_end+0xfc015d38>
   1614c:	d8800717 	ldw	r2,28(sp)
   16150:	003bd006 	br	15094 <__alt_data_end+0xfc015094>
   16154:	d9000a17 	ldw	r4,40(sp)
   16158:	d9800d17 	ldw	r6,52(sp)
   1615c:	dd400a15 	stw	r21,40(sp)
   16160:	a905c83a 	sub	r2,r21,r4
   16164:	308d883a 	add	r6,r6,r2
   16168:	d9800d15 	stw	r6,52(sp)
   1616c:	002b883a 	mov	r21,zero
   16170:	003e0606 	br	1598c <__alt_data_end+0xfc01598c>
   16174:	9023883a 	mov	r17,r18
   16178:	9829883a 	mov	r20,r19
   1617c:	04000084 	movi	r16,2
   16180:	003c9206 	br	153cc <__alt_data_end+0xfc0153cc>
   16184:	04000044 	movi	r16,1
   16188:	dc000c15 	stw	r16,48(sp)
   1618c:	dc000615 	stw	r16,24(sp)
   16190:	dc002215 	stw	r16,136(sp)
   16194:	e0001115 	stw	zero,68(fp)
   16198:	000b883a 	mov	r5,zero
   1619c:	003c6906 	br	15344 <__alt_data_end+0xfc015344>
   161a0:	3021883a 	mov	r16,r6
   161a4:	003ffb06 	br	16194 <__alt_data_end+0xfc016194>
   161a8:	1000021e 	bne	r2,zero,161b4 <_dtoa_r+0x11e0>
   161ac:	4200004c 	andi	r8,r8,1
   161b0:	403e7d1e 	bne	r8,zero,15ba8 <__alt_data_end+0xfc015ba8>
   161b4:	01000c04 	movi	r4,48
   161b8:	00000106 	br	161c0 <_dtoa_r+0x11ec>
   161bc:	102f883a 	mov	r23,r2
   161c0:	b8bfffc4 	addi	r2,r23,-1
   161c4:	10c00007 	ldb	r3,0(r2)
   161c8:	193ffc26 	beq	r3,r4,161bc <__alt_data_end+0xfc0161bc>
   161cc:	003e8706 	br	15bec <__alt_data_end+0xfc015bec>
   161d0:	d8800517 	ldw	r2,20(sp)
   161d4:	00a3c83a 	sub	r17,zero,r2
   161d8:	8800a426 	beq	r17,zero,1646c <_dtoa_r+0x1498>
   161dc:	888003cc 	andi	r2,r17,15
   161e0:	100490fa 	slli	r2,r2,3
   161e4:	00c000f4 	movhi	r3,3
   161e8:	18ee7604 	addi	r3,r3,-17960
   161ec:	1885883a 	add	r2,r3,r2
   161f0:	11800017 	ldw	r6,0(r2)
   161f4:	11c00117 	ldw	r7,4(r2)
   161f8:	9009883a 	mov	r4,r18
   161fc:	980b883a 	mov	r5,r19
   16200:	8823d13a 	srai	r17,r17,4
   16204:	001eb8c0 	call	1eb8c <__muldf3>
   16208:	d8800f15 	stw	r2,60(sp)
   1620c:	d8c01015 	stw	r3,64(sp)
   16210:	8800e826 	beq	r17,zero,165b4 <_dtoa_r+0x15e0>
   16214:	050000f4 	movhi	r20,3
   16218:	a52e6c04 	addi	r20,r20,-18000
   1621c:	04000084 	movi	r16,2
   16220:	8980004c 	andi	r6,r17,1
   16224:	1009883a 	mov	r4,r2
   16228:	8823d07a 	srai	r17,r17,1
   1622c:	180b883a 	mov	r5,r3
   16230:	30000426 	beq	r6,zero,16244 <_dtoa_r+0x1270>
   16234:	a1800017 	ldw	r6,0(r20)
   16238:	a1c00117 	ldw	r7,4(r20)
   1623c:	84000044 	addi	r16,r16,1
   16240:	001eb8c0 	call	1eb8c <__muldf3>
   16244:	a5000204 	addi	r20,r20,8
   16248:	883ff51e 	bne	r17,zero,16220 <__alt_data_end+0xfc016220>
   1624c:	d8800f15 	stw	r2,60(sp)
   16250:	d8c01015 	stw	r3,64(sp)
   16254:	003c7606 	br	15430 <__alt_data_end+0xfc015430>
   16258:	00c00c04 	movi	r3,48
   1625c:	10c00005 	stb	r3,0(r2)
   16260:	d8c00517 	ldw	r3,20(sp)
   16264:	bd3fffc3 	ldbu	r20,-1(r23)
   16268:	18c00044 	addi	r3,r3,1
   1626c:	d8c00515 	stw	r3,20(sp)
   16270:	003db906 	br	15958 <__alt_data_end+0xfc015958>
   16274:	89400117 	ldw	r5,4(r17)
   16278:	e009883a 	mov	r4,fp
   1627c:	0017c100 	call	17c10 <_Balloc>
   16280:	89800417 	ldw	r6,16(r17)
   16284:	89400304 	addi	r5,r17,12
   16288:	11000304 	addi	r4,r2,12
   1628c:	31800084 	addi	r6,r6,2
   16290:	318d883a 	add	r6,r6,r6
   16294:	318d883a 	add	r6,r6,r6
   16298:	1027883a 	mov	r19,r2
   1629c:	000fc800 	call	fc80 <memcpy>
   162a0:	01800044 	movi	r6,1
   162a4:	980b883a 	mov	r5,r19
   162a8:	e009883a 	mov	r4,fp
   162ac:	001844c0 	call	1844c <__lshift>
   162b0:	1029883a 	mov	r20,r2
   162b4:	003ecc06 	br	15de8 <__alt_data_end+0xfc015de8>
   162b8:	00800e44 	movi	r2,57
   162bc:	90809026 	beq	r18,r2,16500 <_dtoa_r+0x152c>
   162c0:	92000044 	addi	r8,r18,1
   162c4:	003f1f06 	br	15f44 <__alt_data_end+0xfc015f44>
   162c8:	9011883a 	mov	r8,r18
   162cc:	8825883a 	mov	r18,r17
   162d0:	a023883a 	mov	r17,r20
   162d4:	003e2906 	br	15b7c <__alt_data_end+0xfc015b7c>
   162d8:	002b883a 	mov	r21,zero
   162dc:	0023883a 	mov	r17,zero
   162e0:	003f5406 	br	16034 <__alt_data_end+0xfc016034>
   162e4:	61bfffc4 	addi	r6,r12,-1
   162e8:	300490fa 	slli	r2,r6,3
   162ec:	00c000f4 	movhi	r3,3
   162f0:	18ee7604 	addi	r3,r3,-17960
   162f4:	1885883a 	add	r2,r3,r2
   162f8:	11000017 	ldw	r4,0(r2)
   162fc:	11400117 	ldw	r5,4(r2)
   16300:	d8800717 	ldw	r2,28(sp)
   16304:	880f883a 	mov	r7,r17
   16308:	d9801215 	stw	r6,72(sp)
   1630c:	800d883a 	mov	r6,r16
   16310:	db001615 	stw	r12,88(sp)
   16314:	15c00044 	addi	r23,r2,1
   16318:	001eb8c0 	call	1eb8c <__muldf3>
   1631c:	d9401017 	ldw	r5,64(sp)
   16320:	d9000f17 	ldw	r4,60(sp)
   16324:	d8c01515 	stw	r3,84(sp)
   16328:	d8801415 	stw	r2,80(sp)
   1632c:	001fcf40 	call	1fcf4 <__fixdfsi>
   16330:	1009883a 	mov	r4,r2
   16334:	1021883a 	mov	r16,r2
   16338:	001fd740 	call	1fd74 <__floatsidf>
   1633c:	d9000f17 	ldw	r4,60(sp)
   16340:	d9401017 	ldw	r5,64(sp)
   16344:	100d883a 	mov	r6,r2
   16348:	180f883a 	mov	r7,r3
   1634c:	001f3f80 	call	1f3f8 <__subdf3>
   16350:	1829883a 	mov	r20,r3
   16354:	d8c00717 	ldw	r3,28(sp)
   16358:	84000c04 	addi	r16,r16,48
   1635c:	1023883a 	mov	r17,r2
   16360:	1c000005 	stb	r16,0(r3)
   16364:	db001617 	ldw	r12,88(sp)
   16368:	00800044 	movi	r2,1
   1636c:	60802226 	beq	r12,r2,163f8 <_dtoa_r+0x1424>
   16370:	d9c00717 	ldw	r7,28(sp)
   16374:	8805883a 	mov	r2,r17
   16378:	b82b883a 	mov	r21,r23
   1637c:	3b19883a 	add	r12,r7,r12
   16380:	6023883a 	mov	r17,r12
   16384:	a007883a 	mov	r3,r20
   16388:	dc800f15 	stw	r18,60(sp)
   1638c:	000d883a 	mov	r6,zero
   16390:	01d00934 	movhi	r7,16420
   16394:	1009883a 	mov	r4,r2
   16398:	180b883a 	mov	r5,r3
   1639c:	001eb8c0 	call	1eb8c <__muldf3>
   163a0:	180b883a 	mov	r5,r3
   163a4:	1009883a 	mov	r4,r2
   163a8:	1829883a 	mov	r20,r3
   163ac:	1025883a 	mov	r18,r2
   163b0:	001fcf40 	call	1fcf4 <__fixdfsi>
   163b4:	1009883a 	mov	r4,r2
   163b8:	1021883a 	mov	r16,r2
   163bc:	001fd740 	call	1fd74 <__floatsidf>
   163c0:	100d883a 	mov	r6,r2
   163c4:	180f883a 	mov	r7,r3
   163c8:	9009883a 	mov	r4,r18
   163cc:	a00b883a 	mov	r5,r20
   163d0:	84000c04 	addi	r16,r16,48
   163d4:	001f3f80 	call	1f3f8 <__subdf3>
   163d8:	ad400044 	addi	r21,r21,1
   163dc:	ac3fffc5 	stb	r16,-1(r21)
   163e0:	ac7fea1e 	bne	r21,r17,1638c <__alt_data_end+0xfc01638c>
   163e4:	1023883a 	mov	r17,r2
   163e8:	d8801217 	ldw	r2,72(sp)
   163ec:	dc800f17 	ldw	r18,60(sp)
   163f0:	1829883a 	mov	r20,r3
   163f4:	b8af883a 	add	r23,r23,r2
   163f8:	d9001417 	ldw	r4,80(sp)
   163fc:	d9401517 	ldw	r5,84(sp)
   16400:	000d883a 	mov	r6,zero
   16404:	01cff834 	movhi	r7,16352
   16408:	001d6b80 	call	1d6b8 <__adddf3>
   1640c:	880d883a 	mov	r6,r17
   16410:	a00f883a 	mov	r7,r20
   16414:	1009883a 	mov	r4,r2
   16418:	180b883a 	mov	r5,r3
   1641c:	001ea980 	call	1ea98 <__ledf2>
   16420:	10003e0e 	bge	r2,zero,1651c <_dtoa_r+0x1548>
   16424:	d9001317 	ldw	r4,76(sp)
   16428:	bd3fffc3 	ldbu	r20,-1(r23)
   1642c:	d9000515 	stw	r4,20(sp)
   16430:	003d3b06 	br	15920 <__alt_data_end+0xfc015920>
   16434:	0027883a 	mov	r19,zero
   16438:	003f1b06 	br	160a8 <__alt_data_end+0xfc0160a8>
   1643c:	d8800817 	ldw	r2,32(sp)
   16440:	11e9c83a 	sub	r20,r2,r7
   16444:	0005883a 	mov	r2,zero
   16448:	003d5406 	br	1599c <__alt_data_end+0xfc01599c>
   1644c:	00800044 	movi	r2,1
   16450:	003dc706 	br	15b70 <__alt_data_end+0xfc015b70>
   16454:	d8c00217 	ldw	r3,8(sp)
   16458:	00800d84 	movi	r2,54
   1645c:	dd400a17 	ldw	r21,40(sp)
   16460:	10c5c83a 	sub	r2,r2,r3
   16464:	dd000817 	ldw	r20,32(sp)
   16468:	003d4c06 	br	1599c <__alt_data_end+0xfc01599c>
   1646c:	dc800f15 	stw	r18,60(sp)
   16470:	dcc01015 	stw	r19,64(sp)
   16474:	04000084 	movi	r16,2
   16478:	003bed06 	br	15430 <__alt_data_end+0xfc015430>
   1647c:	d9000617 	ldw	r4,24(sp)
   16480:	203f0d26 	beq	r4,zero,160b8 <__alt_data_end+0xfc0160b8>
   16484:	d9800c17 	ldw	r6,48(sp)
   16488:	01bcab0e 	bge	zero,r6,15738 <__alt_data_end+0xfc015738>
   1648c:	d9401017 	ldw	r5,64(sp)
   16490:	d9000f17 	ldw	r4,60(sp)
   16494:	000d883a 	mov	r6,zero
   16498:	01d00934 	movhi	r7,16420
   1649c:	001eb8c0 	call	1eb8c <__muldf3>
   164a0:	81000044 	addi	r4,r16,1
   164a4:	d8800f15 	stw	r2,60(sp)
   164a8:	d8c01015 	stw	r3,64(sp)
   164ac:	001fd740 	call	1fd74 <__floatsidf>
   164b0:	d9800f17 	ldw	r6,60(sp)
   164b4:	d9c01017 	ldw	r7,64(sp)
   164b8:	1009883a 	mov	r4,r2
   164bc:	180b883a 	mov	r5,r3
   164c0:	001eb8c0 	call	1eb8c <__muldf3>
   164c4:	01d00734 	movhi	r7,16412
   164c8:	000d883a 	mov	r6,zero
   164cc:	1009883a 	mov	r4,r2
   164d0:	180b883a 	mov	r5,r3
   164d4:	001d6b80 	call	1d6b8 <__adddf3>
   164d8:	d9c00517 	ldw	r7,20(sp)
   164dc:	047f3034 	movhi	r17,64704
   164e0:	1021883a 	mov	r16,r2
   164e4:	39ffffc4 	addi	r7,r7,-1
   164e8:	d9c01315 	stw	r7,76(sp)
   164ec:	1c63883a 	add	r17,r3,r17
   164f0:	db000c17 	ldw	r12,48(sp)
   164f4:	003bea06 	br	154a0 <__alt_data_end+0xfc0154a0>
   164f8:	dc000915 	stw	r16,36(sp)
   164fc:	003e0e06 	br	15d38 <__alt_data_end+0xfc015d38>
   16500:	01000e44 	movi	r4,57
   16504:	8825883a 	mov	r18,r17
   16508:	9dc00044 	addi	r23,r19,1
   1650c:	99000005 	stb	r4,0(r19)
   16510:	a023883a 	mov	r17,r20
   16514:	dc000915 	stw	r16,36(sp)
   16518:	003da406 	br	15bac <__alt_data_end+0xfc015bac>
   1651c:	d9801417 	ldw	r6,80(sp)
   16520:	d9c01517 	ldw	r7,84(sp)
   16524:	0009883a 	mov	r4,zero
   16528:	014ff834 	movhi	r5,16352
   1652c:	001f3f80 	call	1f3f8 <__subdf3>
   16530:	880d883a 	mov	r6,r17
   16534:	a00f883a 	mov	r7,r20
   16538:	1009883a 	mov	r4,r2
   1653c:	180b883a 	mov	r5,r3
   16540:	001e9bc0 	call	1e9bc <__gedf2>
   16544:	00bc7c0e 	bge	zero,r2,15738 <__alt_data_end+0xfc015738>
   16548:	01000c04 	movi	r4,48
   1654c:	00000106 	br	16554 <_dtoa_r+0x1580>
   16550:	102f883a 	mov	r23,r2
   16554:	b8bfffc4 	addi	r2,r23,-1
   16558:	10c00007 	ldb	r3,0(r2)
   1655c:	193ffc26 	beq	r3,r4,16550 <__alt_data_end+0xfc016550>
   16560:	d9801317 	ldw	r6,76(sp)
   16564:	d9800515 	stw	r6,20(sp)
   16568:	003c4406 	br	1567c <__alt_data_end+0xfc01567c>
   1656c:	d9801317 	ldw	r6,76(sp)
   16570:	d9800515 	stw	r6,20(sp)
   16574:	003cea06 	br	15920 <__alt_data_end+0xfc015920>
   16578:	dd800f17 	ldw	r22,60(sp)
   1657c:	dcc01017 	ldw	r19,64(sp)
   16580:	dc801217 	ldw	r18,72(sp)
   16584:	003c6c06 	br	15738 <__alt_data_end+0xfc015738>
   16588:	903e031e 	bne	r18,zero,15d98 <__alt_data_end+0xfc015d98>
   1658c:	003ebb06 	br	1607c <__alt_data_end+0xfc01607c>
   16590:	103e6c1e 	bne	r2,zero,15f44 <__alt_data_end+0xfc015f44>
   16594:	4080004c 	andi	r2,r8,1
   16598:	103e6a26 	beq	r2,zero,15f44 <__alt_data_end+0xfc015f44>
   1659c:	003e6606 	br	15f38 <__alt_data_end+0xfc015f38>
   165a0:	d8c00317 	ldw	r3,12(sp)
   165a4:	00800084 	movi	r2,2
   165a8:	10c02916 	blt	r2,r3,16650 <_dtoa_r+0x167c>
   165ac:	d9000c17 	ldw	r4,48(sp)
   165b0:	003e8806 	br	15fd4 <__alt_data_end+0xfc015fd4>
   165b4:	04000084 	movi	r16,2
   165b8:	003b9d06 	br	15430 <__alt_data_end+0xfc015430>
   165bc:	d9001317 	ldw	r4,76(sp)
   165c0:	d9000515 	stw	r4,20(sp)
   165c4:	003cd606 	br	15920 <__alt_data_end+0xfc015920>
   165c8:	d8801317 	ldw	r2,76(sp)
   165cc:	d8800515 	stw	r2,20(sp)
   165d0:	003c2a06 	br	1567c <__alt_data_end+0xfc01567c>
   165d4:	d9800317 	ldw	r6,12(sp)
   165d8:	00800084 	movi	r2,2
   165dc:	11801516 	blt	r2,r6,16634 <_dtoa_r+0x1660>
   165e0:	d9c00c17 	ldw	r7,48(sp)
   165e4:	d9c00615 	stw	r7,24(sp)
   165e8:	003df706 	br	15dc8 <__alt_data_end+0xfc015dc8>
   165ec:	193d3926 	beq	r3,r4,15ad4 <__alt_data_end+0xfc015ad4>
   165f0:	00c00f04 	movi	r3,60
   165f4:	1885c83a 	sub	r2,r3,r2
   165f8:	003ddf06 	br	15d78 <__alt_data_end+0xfc015d78>
   165fc:	e009883a 	mov	r4,fp
   16600:	e0001115 	stw	zero,68(fp)
   16604:	000b883a 	mov	r5,zero
   16608:	0017c100 	call	17c10 <_Balloc>
   1660c:	d8800715 	stw	r2,28(sp)
   16610:	d8c00717 	ldw	r3,28(sp)
   16614:	00bfffc4 	movi	r2,-1
   16618:	01000044 	movi	r4,1
   1661c:	d8800c15 	stw	r2,48(sp)
   16620:	e0c01015 	stw	r3,64(fp)
   16624:	d9000b15 	stw	r4,44(sp)
   16628:	d8800615 	stw	r2,24(sp)
   1662c:	d8002215 	stw	zero,136(sp)
   16630:	003c4106 	br	15738 <__alt_data_end+0xfc015738>
   16634:	d8c00c17 	ldw	r3,48(sp)
   16638:	d8c00615 	stw	r3,24(sp)
   1663c:	003e7006 	br	16000 <__alt_data_end+0xfc016000>
   16640:	04400044 	movi	r17,1
   16644:	003b2006 	br	152c8 <__alt_data_end+0xfc0152c8>
   16648:	000b883a 	mov	r5,zero
   1664c:	003b3d06 	br	15344 <__alt_data_end+0xfc015344>
   16650:	d8800c17 	ldw	r2,48(sp)
   16654:	d8800615 	stw	r2,24(sp)
   16658:	003e6906 	br	16000 <__alt_data_end+0xfc016000>

0001665c <__sflush_r>:
   1665c:	2880030b 	ldhu	r2,12(r5)
   16660:	defffb04 	addi	sp,sp,-20
   16664:	dcc00315 	stw	r19,12(sp)
   16668:	dc400115 	stw	r17,4(sp)
   1666c:	dfc00415 	stw	ra,16(sp)
   16670:	dc800215 	stw	r18,8(sp)
   16674:	dc000015 	stw	r16,0(sp)
   16678:	10c0020c 	andi	r3,r2,8
   1667c:	2823883a 	mov	r17,r5
   16680:	2027883a 	mov	r19,r4
   16684:	1800311e 	bne	r3,zero,1674c <__sflush_r+0xf0>
   16688:	28c00117 	ldw	r3,4(r5)
   1668c:	10820014 	ori	r2,r2,2048
   16690:	2880030d 	sth	r2,12(r5)
   16694:	00c04b0e 	bge	zero,r3,167c4 <__sflush_r+0x168>
   16698:	8a000a17 	ldw	r8,40(r17)
   1669c:	40002326 	beq	r8,zero,1672c <__sflush_r+0xd0>
   166a0:	9c000017 	ldw	r16,0(r19)
   166a4:	10c4000c 	andi	r3,r2,4096
   166a8:	98000015 	stw	zero,0(r19)
   166ac:	18004826 	beq	r3,zero,167d0 <__sflush_r+0x174>
   166b0:	89801417 	ldw	r6,80(r17)
   166b4:	10c0010c 	andi	r3,r2,4
   166b8:	18000626 	beq	r3,zero,166d4 <__sflush_r+0x78>
   166bc:	88c00117 	ldw	r3,4(r17)
   166c0:	88800c17 	ldw	r2,48(r17)
   166c4:	30cdc83a 	sub	r6,r6,r3
   166c8:	10000226 	beq	r2,zero,166d4 <__sflush_r+0x78>
   166cc:	88800f17 	ldw	r2,60(r17)
   166d0:	308dc83a 	sub	r6,r6,r2
   166d4:	89400717 	ldw	r5,28(r17)
   166d8:	000f883a 	mov	r7,zero
   166dc:	9809883a 	mov	r4,r19
   166e0:	403ee83a 	callr	r8
   166e4:	00ffffc4 	movi	r3,-1
   166e8:	10c04426 	beq	r2,r3,167fc <__sflush_r+0x1a0>
   166ec:	88c0030b 	ldhu	r3,12(r17)
   166f0:	89000417 	ldw	r4,16(r17)
   166f4:	88000115 	stw	zero,4(r17)
   166f8:	197dffcc 	andi	r5,r3,63487
   166fc:	8940030d 	sth	r5,12(r17)
   16700:	89000015 	stw	r4,0(r17)
   16704:	18c4000c 	andi	r3,r3,4096
   16708:	18002c1e 	bne	r3,zero,167bc <__sflush_r+0x160>
   1670c:	89400c17 	ldw	r5,48(r17)
   16710:	9c000015 	stw	r16,0(r19)
   16714:	28000526 	beq	r5,zero,1672c <__sflush_r+0xd0>
   16718:	88801004 	addi	r2,r17,64
   1671c:	28800226 	beq	r5,r2,16728 <__sflush_r+0xcc>
   16720:	9809883a 	mov	r4,r19
   16724:	0016dd80 	call	16dd8 <_free_r>
   16728:	88000c15 	stw	zero,48(r17)
   1672c:	0005883a 	mov	r2,zero
   16730:	dfc00417 	ldw	ra,16(sp)
   16734:	dcc00317 	ldw	r19,12(sp)
   16738:	dc800217 	ldw	r18,8(sp)
   1673c:	dc400117 	ldw	r17,4(sp)
   16740:	dc000017 	ldw	r16,0(sp)
   16744:	dec00504 	addi	sp,sp,20
   16748:	f800283a 	ret
   1674c:	2c800417 	ldw	r18,16(r5)
   16750:	903ff626 	beq	r18,zero,1672c <__alt_data_end+0xfc01672c>
   16754:	2c000017 	ldw	r16,0(r5)
   16758:	108000cc 	andi	r2,r2,3
   1675c:	2c800015 	stw	r18,0(r5)
   16760:	84a1c83a 	sub	r16,r16,r18
   16764:	1000131e 	bne	r2,zero,167b4 <__sflush_r+0x158>
   16768:	28800517 	ldw	r2,20(r5)
   1676c:	88800215 	stw	r2,8(r17)
   16770:	04000316 	blt	zero,r16,16780 <__sflush_r+0x124>
   16774:	003fed06 	br	1672c <__alt_data_end+0xfc01672c>
   16778:	90a5883a 	add	r18,r18,r2
   1677c:	043feb0e 	bge	zero,r16,1672c <__alt_data_end+0xfc01672c>
   16780:	88800917 	ldw	r2,36(r17)
   16784:	89400717 	ldw	r5,28(r17)
   16788:	800f883a 	mov	r7,r16
   1678c:	900d883a 	mov	r6,r18
   16790:	9809883a 	mov	r4,r19
   16794:	103ee83a 	callr	r2
   16798:	80a1c83a 	sub	r16,r16,r2
   1679c:	00bff616 	blt	zero,r2,16778 <__alt_data_end+0xfc016778>
   167a0:	88c0030b 	ldhu	r3,12(r17)
   167a4:	00bfffc4 	movi	r2,-1
   167a8:	18c01014 	ori	r3,r3,64
   167ac:	88c0030d 	sth	r3,12(r17)
   167b0:	003fdf06 	br	16730 <__alt_data_end+0xfc016730>
   167b4:	0005883a 	mov	r2,zero
   167b8:	003fec06 	br	1676c <__alt_data_end+0xfc01676c>
   167bc:	88801415 	stw	r2,80(r17)
   167c0:	003fd206 	br	1670c <__alt_data_end+0xfc01670c>
   167c4:	28c00f17 	ldw	r3,60(r5)
   167c8:	00ffb316 	blt	zero,r3,16698 <__alt_data_end+0xfc016698>
   167cc:	003fd706 	br	1672c <__alt_data_end+0xfc01672c>
   167d0:	89400717 	ldw	r5,28(r17)
   167d4:	000d883a 	mov	r6,zero
   167d8:	01c00044 	movi	r7,1
   167dc:	9809883a 	mov	r4,r19
   167e0:	403ee83a 	callr	r8
   167e4:	100d883a 	mov	r6,r2
   167e8:	00bfffc4 	movi	r2,-1
   167ec:	30801426 	beq	r6,r2,16840 <__sflush_r+0x1e4>
   167f0:	8880030b 	ldhu	r2,12(r17)
   167f4:	8a000a17 	ldw	r8,40(r17)
   167f8:	003fae06 	br	166b4 <__alt_data_end+0xfc0166b4>
   167fc:	98c00017 	ldw	r3,0(r19)
   16800:	183fba26 	beq	r3,zero,166ec <__alt_data_end+0xfc0166ec>
   16804:	01000744 	movi	r4,29
   16808:	19000626 	beq	r3,r4,16824 <__sflush_r+0x1c8>
   1680c:	01000584 	movi	r4,22
   16810:	19000426 	beq	r3,r4,16824 <__sflush_r+0x1c8>
   16814:	88c0030b 	ldhu	r3,12(r17)
   16818:	18c01014 	ori	r3,r3,64
   1681c:	88c0030d 	sth	r3,12(r17)
   16820:	003fc306 	br	16730 <__alt_data_end+0xfc016730>
   16824:	8880030b 	ldhu	r2,12(r17)
   16828:	88c00417 	ldw	r3,16(r17)
   1682c:	88000115 	stw	zero,4(r17)
   16830:	10bdffcc 	andi	r2,r2,63487
   16834:	8880030d 	sth	r2,12(r17)
   16838:	88c00015 	stw	r3,0(r17)
   1683c:	003fb306 	br	1670c <__alt_data_end+0xfc01670c>
   16840:	98800017 	ldw	r2,0(r19)
   16844:	103fea26 	beq	r2,zero,167f0 <__alt_data_end+0xfc0167f0>
   16848:	00c00744 	movi	r3,29
   1684c:	10c00226 	beq	r2,r3,16858 <__sflush_r+0x1fc>
   16850:	00c00584 	movi	r3,22
   16854:	10c0031e 	bne	r2,r3,16864 <__sflush_r+0x208>
   16858:	9c000015 	stw	r16,0(r19)
   1685c:	0005883a 	mov	r2,zero
   16860:	003fb306 	br	16730 <__alt_data_end+0xfc016730>
   16864:	88c0030b 	ldhu	r3,12(r17)
   16868:	3005883a 	mov	r2,r6
   1686c:	18c01014 	ori	r3,r3,64
   16870:	88c0030d 	sth	r3,12(r17)
   16874:	003fae06 	br	16730 <__alt_data_end+0xfc016730>

00016878 <_fflush_r>:
   16878:	defffd04 	addi	sp,sp,-12
   1687c:	dc000115 	stw	r16,4(sp)
   16880:	dfc00215 	stw	ra,8(sp)
   16884:	2021883a 	mov	r16,r4
   16888:	20000226 	beq	r4,zero,16894 <_fflush_r+0x1c>
   1688c:	20800e17 	ldw	r2,56(r4)
   16890:	10000c26 	beq	r2,zero,168c4 <_fflush_r+0x4c>
   16894:	2880030f 	ldh	r2,12(r5)
   16898:	1000051e 	bne	r2,zero,168b0 <_fflush_r+0x38>
   1689c:	0005883a 	mov	r2,zero
   168a0:	dfc00217 	ldw	ra,8(sp)
   168a4:	dc000117 	ldw	r16,4(sp)
   168a8:	dec00304 	addi	sp,sp,12
   168ac:	f800283a 	ret
   168b0:	8009883a 	mov	r4,r16
   168b4:	dfc00217 	ldw	ra,8(sp)
   168b8:	dc000117 	ldw	r16,4(sp)
   168bc:	dec00304 	addi	sp,sp,12
   168c0:	001665c1 	jmpi	1665c <__sflush_r>
   168c4:	d9400015 	stw	r5,0(sp)
   168c8:	0016c640 	call	16c64 <__sinit>
   168cc:	d9400017 	ldw	r5,0(sp)
   168d0:	003ff006 	br	16894 <__alt_data_end+0xfc016894>

000168d4 <fflush>:
   168d4:	20000526 	beq	r4,zero,168ec <fflush+0x18>
   168d8:	008000f4 	movhi	r2,3
   168dc:	10bb3c04 	addi	r2,r2,-4880
   168e0:	200b883a 	mov	r5,r4
   168e4:	11000017 	ldw	r4,0(r2)
   168e8:	00168781 	jmpi	16878 <_fflush_r>
   168ec:	008000f4 	movhi	r2,3
   168f0:	10bb3b04 	addi	r2,r2,-4884
   168f4:	11000017 	ldw	r4,0(r2)
   168f8:	01400074 	movhi	r5,1
   168fc:	295a1e04 	addi	r5,r5,26744
   16900:	00176741 	jmpi	17674 <_fwalk_reent>

00016904 <__fp_unlock>:
   16904:	0005883a 	mov	r2,zero
   16908:	f800283a 	ret

0001690c <_cleanup_r>:
   1690c:	014000b4 	movhi	r5,2
   16910:	29712504 	addi	r5,r5,-15212
   16914:	00176741 	jmpi	17674 <_fwalk_reent>

00016918 <__sinit.part.1>:
   16918:	defff704 	addi	sp,sp,-36
   1691c:	00c00074 	movhi	r3,1
   16920:	dfc00815 	stw	ra,32(sp)
   16924:	ddc00715 	stw	r23,28(sp)
   16928:	dd800615 	stw	r22,24(sp)
   1692c:	dd400515 	stw	r21,20(sp)
   16930:	dd000415 	stw	r20,16(sp)
   16934:	dcc00315 	stw	r19,12(sp)
   16938:	dc800215 	stw	r18,8(sp)
   1693c:	dc400115 	stw	r17,4(sp)
   16940:	dc000015 	stw	r16,0(sp)
   16944:	18da4304 	addi	r3,r3,26892
   16948:	24000117 	ldw	r16,4(r4)
   1694c:	20c00f15 	stw	r3,60(r4)
   16950:	2080bb04 	addi	r2,r4,748
   16954:	00c000c4 	movi	r3,3
   16958:	20c0b915 	stw	r3,740(r4)
   1695c:	2080ba15 	stw	r2,744(r4)
   16960:	2000b815 	stw	zero,736(r4)
   16964:	05c00204 	movi	r23,8
   16968:	00800104 	movi	r2,4
   1696c:	2025883a 	mov	r18,r4
   16970:	b80d883a 	mov	r6,r23
   16974:	81001704 	addi	r4,r16,92
   16978:	000b883a 	mov	r5,zero
   1697c:	80000015 	stw	zero,0(r16)
   16980:	80000115 	stw	zero,4(r16)
   16984:	80000215 	stw	zero,8(r16)
   16988:	8080030d 	sth	r2,12(r16)
   1698c:	80001915 	stw	zero,100(r16)
   16990:	8000038d 	sth	zero,14(r16)
   16994:	80000415 	stw	zero,16(r16)
   16998:	80000515 	stw	zero,20(r16)
   1699c:	80000615 	stw	zero,24(r16)
   169a0:	000fdc80 	call	fdc8 <memset>
   169a4:	058000b4 	movhi	r22,2
   169a8:	94400217 	ldw	r17,8(r18)
   169ac:	054000b4 	movhi	r21,2
   169b0:	050000b4 	movhi	r20,2
   169b4:	04c000b4 	movhi	r19,2
   169b8:	b5a50204 	addi	r22,r22,-27640
   169bc:	ad651904 	addi	r21,r21,-27548
   169c0:	a5253804 	addi	r20,r20,-27424
   169c4:	9ce54f04 	addi	r19,r19,-27332
   169c8:	85800815 	stw	r22,32(r16)
   169cc:	85400915 	stw	r21,36(r16)
   169d0:	85000a15 	stw	r20,40(r16)
   169d4:	84c00b15 	stw	r19,44(r16)
   169d8:	84000715 	stw	r16,28(r16)
   169dc:	00800284 	movi	r2,10
   169e0:	8880030d 	sth	r2,12(r17)
   169e4:	00800044 	movi	r2,1
   169e8:	b80d883a 	mov	r6,r23
   169ec:	89001704 	addi	r4,r17,92
   169f0:	000b883a 	mov	r5,zero
   169f4:	88000015 	stw	zero,0(r17)
   169f8:	88000115 	stw	zero,4(r17)
   169fc:	88000215 	stw	zero,8(r17)
   16a00:	88001915 	stw	zero,100(r17)
   16a04:	8880038d 	sth	r2,14(r17)
   16a08:	88000415 	stw	zero,16(r17)
   16a0c:	88000515 	stw	zero,20(r17)
   16a10:	88000615 	stw	zero,24(r17)
   16a14:	000fdc80 	call	fdc8 <memset>
   16a18:	94000317 	ldw	r16,12(r18)
   16a1c:	00800484 	movi	r2,18
   16a20:	8c400715 	stw	r17,28(r17)
   16a24:	8d800815 	stw	r22,32(r17)
   16a28:	8d400915 	stw	r21,36(r17)
   16a2c:	8d000a15 	stw	r20,40(r17)
   16a30:	8cc00b15 	stw	r19,44(r17)
   16a34:	8080030d 	sth	r2,12(r16)
   16a38:	00800084 	movi	r2,2
   16a3c:	80000015 	stw	zero,0(r16)
   16a40:	80000115 	stw	zero,4(r16)
   16a44:	80000215 	stw	zero,8(r16)
   16a48:	80001915 	stw	zero,100(r16)
   16a4c:	8080038d 	sth	r2,14(r16)
   16a50:	80000415 	stw	zero,16(r16)
   16a54:	80000515 	stw	zero,20(r16)
   16a58:	80000615 	stw	zero,24(r16)
   16a5c:	b80d883a 	mov	r6,r23
   16a60:	000b883a 	mov	r5,zero
   16a64:	81001704 	addi	r4,r16,92
   16a68:	000fdc80 	call	fdc8 <memset>
   16a6c:	00800044 	movi	r2,1
   16a70:	84000715 	stw	r16,28(r16)
   16a74:	85800815 	stw	r22,32(r16)
   16a78:	85400915 	stw	r21,36(r16)
   16a7c:	85000a15 	stw	r20,40(r16)
   16a80:	84c00b15 	stw	r19,44(r16)
   16a84:	90800e15 	stw	r2,56(r18)
   16a88:	dfc00817 	ldw	ra,32(sp)
   16a8c:	ddc00717 	ldw	r23,28(sp)
   16a90:	dd800617 	ldw	r22,24(sp)
   16a94:	dd400517 	ldw	r21,20(sp)
   16a98:	dd000417 	ldw	r20,16(sp)
   16a9c:	dcc00317 	ldw	r19,12(sp)
   16aa0:	dc800217 	ldw	r18,8(sp)
   16aa4:	dc400117 	ldw	r17,4(sp)
   16aa8:	dc000017 	ldw	r16,0(sp)
   16aac:	dec00904 	addi	sp,sp,36
   16ab0:	f800283a 	ret

00016ab4 <__fp_lock>:
   16ab4:	0005883a 	mov	r2,zero
   16ab8:	f800283a 	ret

00016abc <__sfmoreglue>:
   16abc:	defffc04 	addi	sp,sp,-16
   16ac0:	dc800215 	stw	r18,8(sp)
   16ac4:	2825883a 	mov	r18,r5
   16ac8:	dc000015 	stw	r16,0(sp)
   16acc:	01401a04 	movi	r5,104
   16ad0:	2021883a 	mov	r16,r4
   16ad4:	913fffc4 	addi	r4,r18,-1
   16ad8:	dfc00315 	stw	ra,12(sp)
   16adc:	dc400115 	stw	r17,4(sp)
   16ae0:	000d8e00 	call	d8e0 <__mulsi3>
   16ae4:	8009883a 	mov	r4,r16
   16ae8:	11401d04 	addi	r5,r2,116
   16aec:	1023883a 	mov	r17,r2
   16af0:	000f4740 	call	f474 <_malloc_r>
   16af4:	1021883a 	mov	r16,r2
   16af8:	10000726 	beq	r2,zero,16b18 <__sfmoreglue+0x5c>
   16afc:	11000304 	addi	r4,r2,12
   16b00:	10000015 	stw	zero,0(r2)
   16b04:	14800115 	stw	r18,4(r2)
   16b08:	11000215 	stw	r4,8(r2)
   16b0c:	89801a04 	addi	r6,r17,104
   16b10:	000b883a 	mov	r5,zero
   16b14:	000fdc80 	call	fdc8 <memset>
   16b18:	8005883a 	mov	r2,r16
   16b1c:	dfc00317 	ldw	ra,12(sp)
   16b20:	dc800217 	ldw	r18,8(sp)
   16b24:	dc400117 	ldw	r17,4(sp)
   16b28:	dc000017 	ldw	r16,0(sp)
   16b2c:	dec00404 	addi	sp,sp,16
   16b30:	f800283a 	ret

00016b34 <__sfp>:
   16b34:	defffb04 	addi	sp,sp,-20
   16b38:	dc000015 	stw	r16,0(sp)
   16b3c:	040000f4 	movhi	r16,3
   16b40:	843b3b04 	addi	r16,r16,-4884
   16b44:	dcc00315 	stw	r19,12(sp)
   16b48:	2027883a 	mov	r19,r4
   16b4c:	81000017 	ldw	r4,0(r16)
   16b50:	dfc00415 	stw	ra,16(sp)
   16b54:	dc800215 	stw	r18,8(sp)
   16b58:	20800e17 	ldw	r2,56(r4)
   16b5c:	dc400115 	stw	r17,4(sp)
   16b60:	1000021e 	bne	r2,zero,16b6c <__sfp+0x38>
   16b64:	00169180 	call	16918 <__sinit.part.1>
   16b68:	81000017 	ldw	r4,0(r16)
   16b6c:	2480b804 	addi	r18,r4,736
   16b70:	047fffc4 	movi	r17,-1
   16b74:	91000117 	ldw	r4,4(r18)
   16b78:	94000217 	ldw	r16,8(r18)
   16b7c:	213fffc4 	addi	r4,r4,-1
   16b80:	20000a16 	blt	r4,zero,16bac <__sfp+0x78>
   16b84:	8080030f 	ldh	r2,12(r16)
   16b88:	10000c26 	beq	r2,zero,16bbc <__sfp+0x88>
   16b8c:	80c01d04 	addi	r3,r16,116
   16b90:	00000206 	br	16b9c <__sfp+0x68>
   16b94:	18bfe60f 	ldh	r2,-104(r3)
   16b98:	10000826 	beq	r2,zero,16bbc <__sfp+0x88>
   16b9c:	213fffc4 	addi	r4,r4,-1
   16ba0:	1c3ffd04 	addi	r16,r3,-12
   16ba4:	18c01a04 	addi	r3,r3,104
   16ba8:	247ffa1e 	bne	r4,r17,16b94 <__alt_data_end+0xfc016b94>
   16bac:	90800017 	ldw	r2,0(r18)
   16bb0:	10001d26 	beq	r2,zero,16c28 <__sfp+0xf4>
   16bb4:	1025883a 	mov	r18,r2
   16bb8:	003fee06 	br	16b74 <__alt_data_end+0xfc016b74>
   16bbc:	00bfffc4 	movi	r2,-1
   16bc0:	8080038d 	sth	r2,14(r16)
   16bc4:	00800044 	movi	r2,1
   16bc8:	8080030d 	sth	r2,12(r16)
   16bcc:	80001915 	stw	zero,100(r16)
   16bd0:	80000015 	stw	zero,0(r16)
   16bd4:	80000215 	stw	zero,8(r16)
   16bd8:	80000115 	stw	zero,4(r16)
   16bdc:	80000415 	stw	zero,16(r16)
   16be0:	80000515 	stw	zero,20(r16)
   16be4:	80000615 	stw	zero,24(r16)
   16be8:	01800204 	movi	r6,8
   16bec:	000b883a 	mov	r5,zero
   16bf0:	81001704 	addi	r4,r16,92
   16bf4:	000fdc80 	call	fdc8 <memset>
   16bf8:	8005883a 	mov	r2,r16
   16bfc:	80000c15 	stw	zero,48(r16)
   16c00:	80000d15 	stw	zero,52(r16)
   16c04:	80001115 	stw	zero,68(r16)
   16c08:	80001215 	stw	zero,72(r16)
   16c0c:	dfc00417 	ldw	ra,16(sp)
   16c10:	dcc00317 	ldw	r19,12(sp)
   16c14:	dc800217 	ldw	r18,8(sp)
   16c18:	dc400117 	ldw	r17,4(sp)
   16c1c:	dc000017 	ldw	r16,0(sp)
   16c20:	dec00504 	addi	sp,sp,20
   16c24:	f800283a 	ret
   16c28:	01400104 	movi	r5,4
   16c2c:	9809883a 	mov	r4,r19
   16c30:	0016abc0 	call	16abc <__sfmoreglue>
   16c34:	90800015 	stw	r2,0(r18)
   16c38:	103fde1e 	bne	r2,zero,16bb4 <__alt_data_end+0xfc016bb4>
   16c3c:	00800304 	movi	r2,12
   16c40:	98800015 	stw	r2,0(r19)
   16c44:	0005883a 	mov	r2,zero
   16c48:	003ff006 	br	16c0c <__alt_data_end+0xfc016c0c>

00016c4c <_cleanup>:
   16c4c:	008000f4 	movhi	r2,3
   16c50:	10bb3b04 	addi	r2,r2,-4884
   16c54:	11000017 	ldw	r4,0(r2)
   16c58:	014000b4 	movhi	r5,2
   16c5c:	29712504 	addi	r5,r5,-15212
   16c60:	00176741 	jmpi	17674 <_fwalk_reent>

00016c64 <__sinit>:
   16c64:	20800e17 	ldw	r2,56(r4)
   16c68:	10000126 	beq	r2,zero,16c70 <__sinit+0xc>
   16c6c:	f800283a 	ret
   16c70:	00169181 	jmpi	16918 <__sinit.part.1>

00016c74 <__sfp_lock_acquire>:
   16c74:	f800283a 	ret

00016c78 <__sfp_lock_release>:
   16c78:	f800283a 	ret

00016c7c <__sinit_lock_acquire>:
   16c7c:	f800283a 	ret

00016c80 <__sinit_lock_release>:
   16c80:	f800283a 	ret

00016c84 <__fp_lock_all>:
   16c84:	008000f4 	movhi	r2,3
   16c88:	10bb3c04 	addi	r2,r2,-4880
   16c8c:	11000017 	ldw	r4,0(r2)
   16c90:	01400074 	movhi	r5,1
   16c94:	295aad04 	addi	r5,r5,27316
   16c98:	00175b01 	jmpi	175b0 <_fwalk>

00016c9c <__fp_unlock_all>:
   16c9c:	008000f4 	movhi	r2,3
   16ca0:	10bb3c04 	addi	r2,r2,-4880
   16ca4:	11000017 	ldw	r4,0(r2)
   16ca8:	01400074 	movhi	r5,1
   16cac:	295a4104 	addi	r5,r5,26884
   16cb0:	00175b01 	jmpi	175b0 <_fwalk>

00016cb4 <_malloc_trim_r>:
   16cb4:	defffb04 	addi	sp,sp,-20
   16cb8:	dcc00315 	stw	r19,12(sp)
   16cbc:	04c000f4 	movhi	r19,3
   16cc0:	dc800215 	stw	r18,8(sp)
   16cc4:	dc400115 	stw	r17,4(sp)
   16cc8:	dc000015 	stw	r16,0(sp)
   16ccc:	dfc00415 	stw	ra,16(sp)
   16cd0:	2821883a 	mov	r16,r5
   16cd4:	9cefd904 	addi	r19,r19,-16540
   16cd8:	2025883a 	mov	r18,r4
   16cdc:	00206540 	call	20654 <__malloc_lock>
   16ce0:	98800217 	ldw	r2,8(r19)
   16ce4:	14400117 	ldw	r17,4(r2)
   16ce8:	00bfff04 	movi	r2,-4
   16cec:	88a2703a 	and	r17,r17,r2
   16cf0:	8c21c83a 	sub	r16,r17,r16
   16cf4:	8403fbc4 	addi	r16,r16,4079
   16cf8:	8020d33a 	srli	r16,r16,12
   16cfc:	0083ffc4 	movi	r2,4095
   16d00:	843fffc4 	addi	r16,r16,-1
   16d04:	8020933a 	slli	r16,r16,12
   16d08:	1400060e 	bge	r2,r16,16d24 <_malloc_trim_r+0x70>
   16d0c:	000b883a 	mov	r5,zero
   16d10:	9009883a 	mov	r4,r18
   16d14:	00100500 	call	10050 <_sbrk_r>
   16d18:	98c00217 	ldw	r3,8(r19)
   16d1c:	1c47883a 	add	r3,r3,r17
   16d20:	10c00a26 	beq	r2,r3,16d4c <_malloc_trim_r+0x98>
   16d24:	9009883a 	mov	r4,r18
   16d28:	00206780 	call	20678 <__malloc_unlock>
   16d2c:	0005883a 	mov	r2,zero
   16d30:	dfc00417 	ldw	ra,16(sp)
   16d34:	dcc00317 	ldw	r19,12(sp)
   16d38:	dc800217 	ldw	r18,8(sp)
   16d3c:	dc400117 	ldw	r17,4(sp)
   16d40:	dc000017 	ldw	r16,0(sp)
   16d44:	dec00504 	addi	sp,sp,20
   16d48:	f800283a 	ret
   16d4c:	040bc83a 	sub	r5,zero,r16
   16d50:	9009883a 	mov	r4,r18
   16d54:	00100500 	call	10050 <_sbrk_r>
   16d58:	00ffffc4 	movi	r3,-1
   16d5c:	10c00d26 	beq	r2,r3,16d94 <_malloc_trim_r+0xe0>
   16d60:	00c000f4 	movhi	r3,3
   16d64:	18c82e04 	addi	r3,r3,8376
   16d68:	18800017 	ldw	r2,0(r3)
   16d6c:	99000217 	ldw	r4,8(r19)
   16d70:	8c23c83a 	sub	r17,r17,r16
   16d74:	8c400054 	ori	r17,r17,1
   16d78:	1421c83a 	sub	r16,r2,r16
   16d7c:	24400115 	stw	r17,4(r4)
   16d80:	9009883a 	mov	r4,r18
   16d84:	1c000015 	stw	r16,0(r3)
   16d88:	00206780 	call	20678 <__malloc_unlock>
   16d8c:	00800044 	movi	r2,1
   16d90:	003fe706 	br	16d30 <__alt_data_end+0xfc016d30>
   16d94:	000b883a 	mov	r5,zero
   16d98:	9009883a 	mov	r4,r18
   16d9c:	00100500 	call	10050 <_sbrk_r>
   16da0:	99000217 	ldw	r4,8(r19)
   16da4:	014003c4 	movi	r5,15
   16da8:	1107c83a 	sub	r3,r2,r4
   16dac:	28ffdd0e 	bge	r5,r3,16d24 <__alt_data_end+0xfc016d24>
   16db0:	014000f4 	movhi	r5,3
   16db4:	297b3d04 	addi	r5,r5,-4876
   16db8:	29400017 	ldw	r5,0(r5)
   16dbc:	18c00054 	ori	r3,r3,1
   16dc0:	20c00115 	stw	r3,4(r4)
   16dc4:	00c000f4 	movhi	r3,3
   16dc8:	1145c83a 	sub	r2,r2,r5
   16dcc:	18c82e04 	addi	r3,r3,8376
   16dd0:	18800015 	stw	r2,0(r3)
   16dd4:	003fd306 	br	16d24 <__alt_data_end+0xfc016d24>

00016dd8 <_free_r>:
   16dd8:	28004126 	beq	r5,zero,16ee0 <_free_r+0x108>
   16ddc:	defffd04 	addi	sp,sp,-12
   16de0:	dc400115 	stw	r17,4(sp)
   16de4:	dc000015 	stw	r16,0(sp)
   16de8:	2023883a 	mov	r17,r4
   16dec:	2821883a 	mov	r16,r5
   16df0:	dfc00215 	stw	ra,8(sp)
   16df4:	00206540 	call	20654 <__malloc_lock>
   16df8:	81ffff17 	ldw	r7,-4(r16)
   16dfc:	00bfff84 	movi	r2,-2
   16e00:	010000f4 	movhi	r4,3
   16e04:	81bffe04 	addi	r6,r16,-8
   16e08:	3884703a 	and	r2,r7,r2
   16e0c:	212fd904 	addi	r4,r4,-16540
   16e10:	308b883a 	add	r5,r6,r2
   16e14:	2a400117 	ldw	r9,4(r5)
   16e18:	22000217 	ldw	r8,8(r4)
   16e1c:	00ffff04 	movi	r3,-4
   16e20:	48c6703a 	and	r3,r9,r3
   16e24:	2a005726 	beq	r5,r8,16f84 <_free_r+0x1ac>
   16e28:	28c00115 	stw	r3,4(r5)
   16e2c:	39c0004c 	andi	r7,r7,1
   16e30:	3800091e 	bne	r7,zero,16e58 <_free_r+0x80>
   16e34:	823ffe17 	ldw	r8,-8(r16)
   16e38:	22400204 	addi	r9,r4,8
   16e3c:	320dc83a 	sub	r6,r6,r8
   16e40:	31c00217 	ldw	r7,8(r6)
   16e44:	1205883a 	add	r2,r2,r8
   16e48:	3a406526 	beq	r7,r9,16fe0 <_free_r+0x208>
   16e4c:	32000317 	ldw	r8,12(r6)
   16e50:	3a000315 	stw	r8,12(r7)
   16e54:	41c00215 	stw	r7,8(r8)
   16e58:	28cf883a 	add	r7,r5,r3
   16e5c:	39c00117 	ldw	r7,4(r7)
   16e60:	39c0004c 	andi	r7,r7,1
   16e64:	38003a26 	beq	r7,zero,16f50 <_free_r+0x178>
   16e68:	10c00054 	ori	r3,r2,1
   16e6c:	30c00115 	stw	r3,4(r6)
   16e70:	3087883a 	add	r3,r6,r2
   16e74:	18800015 	stw	r2,0(r3)
   16e78:	00c07fc4 	movi	r3,511
   16e7c:	18801936 	bltu	r3,r2,16ee4 <_free_r+0x10c>
   16e80:	1004d0fa 	srli	r2,r2,3
   16e84:	01c00044 	movi	r7,1
   16e88:	21400117 	ldw	r5,4(r4)
   16e8c:	10c00044 	addi	r3,r2,1
   16e90:	18c7883a 	add	r3,r3,r3
   16e94:	1005d0ba 	srai	r2,r2,2
   16e98:	18c7883a 	add	r3,r3,r3
   16e9c:	18c7883a 	add	r3,r3,r3
   16ea0:	1907883a 	add	r3,r3,r4
   16ea4:	3884983a 	sll	r2,r7,r2
   16ea8:	19c00017 	ldw	r7,0(r3)
   16eac:	1a3ffe04 	addi	r8,r3,-8
   16eb0:	1144b03a 	or	r2,r2,r5
   16eb4:	32000315 	stw	r8,12(r6)
   16eb8:	31c00215 	stw	r7,8(r6)
   16ebc:	20800115 	stw	r2,4(r4)
   16ec0:	19800015 	stw	r6,0(r3)
   16ec4:	39800315 	stw	r6,12(r7)
   16ec8:	8809883a 	mov	r4,r17
   16ecc:	dfc00217 	ldw	ra,8(sp)
   16ed0:	dc400117 	ldw	r17,4(sp)
   16ed4:	dc000017 	ldw	r16,0(sp)
   16ed8:	dec00304 	addi	sp,sp,12
   16edc:	00206781 	jmpi	20678 <__malloc_unlock>
   16ee0:	f800283a 	ret
   16ee4:	100ad27a 	srli	r5,r2,9
   16ee8:	00c00104 	movi	r3,4
   16eec:	19404a36 	bltu	r3,r5,17018 <_free_r+0x240>
   16ef0:	100ad1ba 	srli	r5,r2,6
   16ef4:	28c00e44 	addi	r3,r5,57
   16ef8:	18c7883a 	add	r3,r3,r3
   16efc:	29400e04 	addi	r5,r5,56
   16f00:	18c7883a 	add	r3,r3,r3
   16f04:	18c7883a 	add	r3,r3,r3
   16f08:	1909883a 	add	r4,r3,r4
   16f0c:	20c00017 	ldw	r3,0(r4)
   16f10:	01c000f4 	movhi	r7,3
   16f14:	213ffe04 	addi	r4,r4,-8
   16f18:	39efd904 	addi	r7,r7,-16540
   16f1c:	20c04426 	beq	r4,r3,17030 <_free_r+0x258>
   16f20:	01ffff04 	movi	r7,-4
   16f24:	19400117 	ldw	r5,4(r3)
   16f28:	29ca703a 	and	r5,r5,r7
   16f2c:	1140022e 	bgeu	r2,r5,16f38 <_free_r+0x160>
   16f30:	18c00217 	ldw	r3,8(r3)
   16f34:	20fffb1e 	bne	r4,r3,16f24 <__alt_data_end+0xfc016f24>
   16f38:	19000317 	ldw	r4,12(r3)
   16f3c:	31000315 	stw	r4,12(r6)
   16f40:	30c00215 	stw	r3,8(r6)
   16f44:	21800215 	stw	r6,8(r4)
   16f48:	19800315 	stw	r6,12(r3)
   16f4c:	003fde06 	br	16ec8 <__alt_data_end+0xfc016ec8>
   16f50:	29c00217 	ldw	r7,8(r5)
   16f54:	10c5883a 	add	r2,r2,r3
   16f58:	00c000f4 	movhi	r3,3
   16f5c:	18efdb04 	addi	r3,r3,-16532
   16f60:	38c03b26 	beq	r7,r3,17050 <_free_r+0x278>
   16f64:	2a000317 	ldw	r8,12(r5)
   16f68:	11400054 	ori	r5,r2,1
   16f6c:	3087883a 	add	r3,r6,r2
   16f70:	3a000315 	stw	r8,12(r7)
   16f74:	41c00215 	stw	r7,8(r8)
   16f78:	31400115 	stw	r5,4(r6)
   16f7c:	18800015 	stw	r2,0(r3)
   16f80:	003fbd06 	br	16e78 <__alt_data_end+0xfc016e78>
   16f84:	39c0004c 	andi	r7,r7,1
   16f88:	10c5883a 	add	r2,r2,r3
   16f8c:	3800071e 	bne	r7,zero,16fac <_free_r+0x1d4>
   16f90:	81fffe17 	ldw	r7,-8(r16)
   16f94:	31cdc83a 	sub	r6,r6,r7
   16f98:	30c00317 	ldw	r3,12(r6)
   16f9c:	31400217 	ldw	r5,8(r6)
   16fa0:	11c5883a 	add	r2,r2,r7
   16fa4:	28c00315 	stw	r3,12(r5)
   16fa8:	19400215 	stw	r5,8(r3)
   16fac:	10c00054 	ori	r3,r2,1
   16fb0:	30c00115 	stw	r3,4(r6)
   16fb4:	00c000f4 	movhi	r3,3
   16fb8:	18fb3e04 	addi	r3,r3,-4872
   16fbc:	18c00017 	ldw	r3,0(r3)
   16fc0:	21800215 	stw	r6,8(r4)
   16fc4:	10ffc036 	bltu	r2,r3,16ec8 <__alt_data_end+0xfc016ec8>
   16fc8:	008000f4 	movhi	r2,3
   16fcc:	1087d604 	addi	r2,r2,8024
   16fd0:	11400017 	ldw	r5,0(r2)
   16fd4:	8809883a 	mov	r4,r17
   16fd8:	0016cb40 	call	16cb4 <_malloc_trim_r>
   16fdc:	003fba06 	br	16ec8 <__alt_data_end+0xfc016ec8>
   16fe0:	28c9883a 	add	r4,r5,r3
   16fe4:	21000117 	ldw	r4,4(r4)
   16fe8:	2100004c 	andi	r4,r4,1
   16fec:	2000391e 	bne	r4,zero,170d4 <_free_r+0x2fc>
   16ff0:	29c00217 	ldw	r7,8(r5)
   16ff4:	29000317 	ldw	r4,12(r5)
   16ff8:	1885883a 	add	r2,r3,r2
   16ffc:	10c00054 	ori	r3,r2,1
   17000:	39000315 	stw	r4,12(r7)
   17004:	21c00215 	stw	r7,8(r4)
   17008:	30c00115 	stw	r3,4(r6)
   1700c:	308d883a 	add	r6,r6,r2
   17010:	30800015 	stw	r2,0(r6)
   17014:	003fac06 	br	16ec8 <__alt_data_end+0xfc016ec8>
   17018:	00c00504 	movi	r3,20
   1701c:	19401536 	bltu	r3,r5,17074 <_free_r+0x29c>
   17020:	28c01704 	addi	r3,r5,92
   17024:	18c7883a 	add	r3,r3,r3
   17028:	294016c4 	addi	r5,r5,91
   1702c:	003fb406 	br	16f00 <__alt_data_end+0xfc016f00>
   17030:	280bd0ba 	srai	r5,r5,2
   17034:	00c00044 	movi	r3,1
   17038:	38800117 	ldw	r2,4(r7)
   1703c:	194a983a 	sll	r5,r3,r5
   17040:	2007883a 	mov	r3,r4
   17044:	2884b03a 	or	r2,r5,r2
   17048:	38800115 	stw	r2,4(r7)
   1704c:	003fbb06 	br	16f3c <__alt_data_end+0xfc016f3c>
   17050:	21800515 	stw	r6,20(r4)
   17054:	21800415 	stw	r6,16(r4)
   17058:	10c00054 	ori	r3,r2,1
   1705c:	31c00315 	stw	r7,12(r6)
   17060:	31c00215 	stw	r7,8(r6)
   17064:	30c00115 	stw	r3,4(r6)
   17068:	308d883a 	add	r6,r6,r2
   1706c:	30800015 	stw	r2,0(r6)
   17070:	003f9506 	br	16ec8 <__alt_data_end+0xfc016ec8>
   17074:	00c01504 	movi	r3,84
   17078:	19400536 	bltu	r3,r5,17090 <_free_r+0x2b8>
   1707c:	100ad33a 	srli	r5,r2,12
   17080:	28c01bc4 	addi	r3,r5,111
   17084:	18c7883a 	add	r3,r3,r3
   17088:	29401b84 	addi	r5,r5,110
   1708c:	003f9c06 	br	16f00 <__alt_data_end+0xfc016f00>
   17090:	00c05504 	movi	r3,340
   17094:	19400536 	bltu	r3,r5,170ac <_free_r+0x2d4>
   17098:	100ad3fa 	srli	r5,r2,15
   1709c:	28c01e04 	addi	r3,r5,120
   170a0:	18c7883a 	add	r3,r3,r3
   170a4:	29401dc4 	addi	r5,r5,119
   170a8:	003f9506 	br	16f00 <__alt_data_end+0xfc016f00>
   170ac:	00c15504 	movi	r3,1364
   170b0:	19400536 	bltu	r3,r5,170c8 <_free_r+0x2f0>
   170b4:	100ad4ba 	srli	r5,r2,18
   170b8:	28c01f44 	addi	r3,r5,125
   170bc:	18c7883a 	add	r3,r3,r3
   170c0:	29401f04 	addi	r5,r5,124
   170c4:	003f8e06 	br	16f00 <__alt_data_end+0xfc016f00>
   170c8:	00c03f84 	movi	r3,254
   170cc:	01401f84 	movi	r5,126
   170d0:	003f8b06 	br	16f00 <__alt_data_end+0xfc016f00>
   170d4:	10c00054 	ori	r3,r2,1
   170d8:	30c00115 	stw	r3,4(r6)
   170dc:	308d883a 	add	r6,r6,r2
   170e0:	30800015 	stw	r2,0(r6)
   170e4:	003f7806 	br	16ec8 <__alt_data_end+0xfc016ec8>

000170e8 <__sfvwrite_r>:
   170e8:	30800217 	ldw	r2,8(r6)
   170ec:	10006726 	beq	r2,zero,1728c <__sfvwrite_r+0x1a4>
   170f0:	28c0030b 	ldhu	r3,12(r5)
   170f4:	defff404 	addi	sp,sp,-48
   170f8:	dd400715 	stw	r21,28(sp)
   170fc:	dd000615 	stw	r20,24(sp)
   17100:	dc000215 	stw	r16,8(sp)
   17104:	dfc00b15 	stw	ra,44(sp)
   17108:	df000a15 	stw	fp,40(sp)
   1710c:	ddc00915 	stw	r23,36(sp)
   17110:	dd800815 	stw	r22,32(sp)
   17114:	dcc00515 	stw	r19,20(sp)
   17118:	dc800415 	stw	r18,16(sp)
   1711c:	dc400315 	stw	r17,12(sp)
   17120:	1880020c 	andi	r2,r3,8
   17124:	2821883a 	mov	r16,r5
   17128:	202b883a 	mov	r21,r4
   1712c:	3029883a 	mov	r20,r6
   17130:	10002726 	beq	r2,zero,171d0 <__sfvwrite_r+0xe8>
   17134:	28800417 	ldw	r2,16(r5)
   17138:	10002526 	beq	r2,zero,171d0 <__sfvwrite_r+0xe8>
   1713c:	1880008c 	andi	r2,r3,2
   17140:	a4400017 	ldw	r17,0(r20)
   17144:	10002a26 	beq	r2,zero,171f0 <__sfvwrite_r+0x108>
   17148:	05a00034 	movhi	r22,32768
   1714c:	0027883a 	mov	r19,zero
   17150:	0025883a 	mov	r18,zero
   17154:	b5bf0004 	addi	r22,r22,-1024
   17158:	980d883a 	mov	r6,r19
   1715c:	a809883a 	mov	r4,r21
   17160:	90004626 	beq	r18,zero,1727c <__sfvwrite_r+0x194>
   17164:	900f883a 	mov	r7,r18
   17168:	b480022e 	bgeu	r22,r18,17174 <__sfvwrite_r+0x8c>
   1716c:	01e00034 	movhi	r7,32768
   17170:	39ff0004 	addi	r7,r7,-1024
   17174:	80800917 	ldw	r2,36(r16)
   17178:	81400717 	ldw	r5,28(r16)
   1717c:	103ee83a 	callr	r2
   17180:	00805a0e 	bge	zero,r2,172ec <__sfvwrite_r+0x204>
   17184:	a0c00217 	ldw	r3,8(r20)
   17188:	98a7883a 	add	r19,r19,r2
   1718c:	90a5c83a 	sub	r18,r18,r2
   17190:	1885c83a 	sub	r2,r3,r2
   17194:	a0800215 	stw	r2,8(r20)
   17198:	103fef1e 	bne	r2,zero,17158 <__alt_data_end+0xfc017158>
   1719c:	0005883a 	mov	r2,zero
   171a0:	dfc00b17 	ldw	ra,44(sp)
   171a4:	df000a17 	ldw	fp,40(sp)
   171a8:	ddc00917 	ldw	r23,36(sp)
   171ac:	dd800817 	ldw	r22,32(sp)
   171b0:	dd400717 	ldw	r21,28(sp)
   171b4:	dd000617 	ldw	r20,24(sp)
   171b8:	dcc00517 	ldw	r19,20(sp)
   171bc:	dc800417 	ldw	r18,16(sp)
   171c0:	dc400317 	ldw	r17,12(sp)
   171c4:	dc000217 	ldw	r16,8(sp)
   171c8:	dec00c04 	addi	sp,sp,48
   171cc:	f800283a 	ret
   171d0:	800b883a 	mov	r5,r16
   171d4:	a809883a 	mov	r4,r21
   171d8:	0014c580 	call	14c58 <__swsetup_r>
   171dc:	1000ee1e 	bne	r2,zero,17598 <__sfvwrite_r+0x4b0>
   171e0:	80c0030b 	ldhu	r3,12(r16)
   171e4:	a4400017 	ldw	r17,0(r20)
   171e8:	1880008c 	andi	r2,r3,2
   171ec:	103fd61e 	bne	r2,zero,17148 <__alt_data_end+0xfc017148>
   171f0:	1880004c 	andi	r2,r3,1
   171f4:	1000421e 	bne	r2,zero,17300 <__sfvwrite_r+0x218>
   171f8:	0039883a 	mov	fp,zero
   171fc:	0025883a 	mov	r18,zero
   17200:	90001a26 	beq	r18,zero,1726c <__sfvwrite_r+0x184>
   17204:	1880800c 	andi	r2,r3,512
   17208:	84c00217 	ldw	r19,8(r16)
   1720c:	10002126 	beq	r2,zero,17294 <__sfvwrite_r+0x1ac>
   17210:	982f883a 	mov	r23,r19
   17214:	94c09636 	bltu	r18,r19,17470 <__sfvwrite_r+0x388>
   17218:	1881200c 	andi	r2,r3,1152
   1721c:	1000a11e 	bne	r2,zero,174a4 <__sfvwrite_r+0x3bc>
   17220:	81000017 	ldw	r4,0(r16)
   17224:	b80d883a 	mov	r6,r23
   17228:	e00b883a 	mov	r5,fp
   1722c:	0017ab40 	call	17ab4 <memmove>
   17230:	80c00217 	ldw	r3,8(r16)
   17234:	81000017 	ldw	r4,0(r16)
   17238:	9005883a 	mov	r2,r18
   1723c:	1ce7c83a 	sub	r19,r3,r19
   17240:	25cf883a 	add	r7,r4,r23
   17244:	84c00215 	stw	r19,8(r16)
   17248:	81c00015 	stw	r7,0(r16)
   1724c:	a0c00217 	ldw	r3,8(r20)
   17250:	e0b9883a 	add	fp,fp,r2
   17254:	90a5c83a 	sub	r18,r18,r2
   17258:	18a7c83a 	sub	r19,r3,r2
   1725c:	a4c00215 	stw	r19,8(r20)
   17260:	983fce26 	beq	r19,zero,1719c <__alt_data_end+0xfc01719c>
   17264:	80c0030b 	ldhu	r3,12(r16)
   17268:	903fe61e 	bne	r18,zero,17204 <__alt_data_end+0xfc017204>
   1726c:	8f000017 	ldw	fp,0(r17)
   17270:	8c800117 	ldw	r18,4(r17)
   17274:	8c400204 	addi	r17,r17,8
   17278:	003fe106 	br	17200 <__alt_data_end+0xfc017200>
   1727c:	8cc00017 	ldw	r19,0(r17)
   17280:	8c800117 	ldw	r18,4(r17)
   17284:	8c400204 	addi	r17,r17,8
   17288:	003fb306 	br	17158 <__alt_data_end+0xfc017158>
   1728c:	0005883a 	mov	r2,zero
   17290:	f800283a 	ret
   17294:	81000017 	ldw	r4,0(r16)
   17298:	80800417 	ldw	r2,16(r16)
   1729c:	11005a36 	bltu	r2,r4,17408 <__sfvwrite_r+0x320>
   172a0:	85c00517 	ldw	r23,20(r16)
   172a4:	95c05836 	bltu	r18,r23,17408 <__sfvwrite_r+0x320>
   172a8:	00a00034 	movhi	r2,32768
   172ac:	10bfffc4 	addi	r2,r2,-1
   172b0:	9009883a 	mov	r4,r18
   172b4:	1480012e 	bgeu	r2,r18,172bc <__sfvwrite_r+0x1d4>
   172b8:	1009883a 	mov	r4,r2
   172bc:	b80b883a 	mov	r5,r23
   172c0:	000d72c0 	call	d72c <__divsi3>
   172c4:	b80b883a 	mov	r5,r23
   172c8:	1009883a 	mov	r4,r2
   172cc:	000d8e00 	call	d8e0 <__mulsi3>
   172d0:	81400717 	ldw	r5,28(r16)
   172d4:	80c00917 	ldw	r3,36(r16)
   172d8:	100f883a 	mov	r7,r2
   172dc:	e00d883a 	mov	r6,fp
   172e0:	a809883a 	mov	r4,r21
   172e4:	183ee83a 	callr	r3
   172e8:	00bfd816 	blt	zero,r2,1724c <__alt_data_end+0xfc01724c>
   172ec:	8080030b 	ldhu	r2,12(r16)
   172f0:	10801014 	ori	r2,r2,64
   172f4:	8080030d 	sth	r2,12(r16)
   172f8:	00bfffc4 	movi	r2,-1
   172fc:	003fa806 	br	171a0 <__alt_data_end+0xfc0171a0>
   17300:	0027883a 	mov	r19,zero
   17304:	0011883a 	mov	r8,zero
   17308:	0039883a 	mov	fp,zero
   1730c:	0025883a 	mov	r18,zero
   17310:	90001f26 	beq	r18,zero,17390 <__sfvwrite_r+0x2a8>
   17314:	40005a26 	beq	r8,zero,17480 <__sfvwrite_r+0x398>
   17318:	982d883a 	mov	r22,r19
   1731c:	94c0012e 	bgeu	r18,r19,17324 <__sfvwrite_r+0x23c>
   17320:	902d883a 	mov	r22,r18
   17324:	81000017 	ldw	r4,0(r16)
   17328:	80800417 	ldw	r2,16(r16)
   1732c:	b02f883a 	mov	r23,r22
   17330:	81c00517 	ldw	r7,20(r16)
   17334:	1100032e 	bgeu	r2,r4,17344 <__sfvwrite_r+0x25c>
   17338:	80c00217 	ldw	r3,8(r16)
   1733c:	38c7883a 	add	r3,r7,r3
   17340:	1d801816 	blt	r3,r22,173a4 <__sfvwrite_r+0x2bc>
   17344:	b1c03e16 	blt	r22,r7,17440 <__sfvwrite_r+0x358>
   17348:	80800917 	ldw	r2,36(r16)
   1734c:	81400717 	ldw	r5,28(r16)
   17350:	e00d883a 	mov	r6,fp
   17354:	da000115 	stw	r8,4(sp)
   17358:	a809883a 	mov	r4,r21
   1735c:	103ee83a 	callr	r2
   17360:	102f883a 	mov	r23,r2
   17364:	da000117 	ldw	r8,4(sp)
   17368:	00bfe00e 	bge	zero,r2,172ec <__alt_data_end+0xfc0172ec>
   1736c:	9de7c83a 	sub	r19,r19,r23
   17370:	98001f26 	beq	r19,zero,173f0 <__sfvwrite_r+0x308>
   17374:	a0800217 	ldw	r2,8(r20)
   17378:	e5f9883a 	add	fp,fp,r23
   1737c:	95e5c83a 	sub	r18,r18,r23
   17380:	15efc83a 	sub	r23,r2,r23
   17384:	a5c00215 	stw	r23,8(r20)
   17388:	b83f8426 	beq	r23,zero,1719c <__alt_data_end+0xfc01719c>
   1738c:	903fe11e 	bne	r18,zero,17314 <__alt_data_end+0xfc017314>
   17390:	8f000017 	ldw	fp,0(r17)
   17394:	8c800117 	ldw	r18,4(r17)
   17398:	0011883a 	mov	r8,zero
   1739c:	8c400204 	addi	r17,r17,8
   173a0:	003fdb06 	br	17310 <__alt_data_end+0xfc017310>
   173a4:	180d883a 	mov	r6,r3
   173a8:	e00b883a 	mov	r5,fp
   173ac:	da000115 	stw	r8,4(sp)
   173b0:	d8c00015 	stw	r3,0(sp)
   173b4:	0017ab40 	call	17ab4 <memmove>
   173b8:	d8c00017 	ldw	r3,0(sp)
   173bc:	80800017 	ldw	r2,0(r16)
   173c0:	800b883a 	mov	r5,r16
   173c4:	a809883a 	mov	r4,r21
   173c8:	10c5883a 	add	r2,r2,r3
   173cc:	80800015 	stw	r2,0(r16)
   173d0:	d8c00015 	stw	r3,0(sp)
   173d4:	00168780 	call	16878 <_fflush_r>
   173d8:	d8c00017 	ldw	r3,0(sp)
   173dc:	da000117 	ldw	r8,4(sp)
   173e0:	103fc21e 	bne	r2,zero,172ec <__alt_data_end+0xfc0172ec>
   173e4:	182f883a 	mov	r23,r3
   173e8:	9de7c83a 	sub	r19,r19,r23
   173ec:	983fe11e 	bne	r19,zero,17374 <__alt_data_end+0xfc017374>
   173f0:	800b883a 	mov	r5,r16
   173f4:	a809883a 	mov	r4,r21
   173f8:	00168780 	call	16878 <_fflush_r>
   173fc:	103fbb1e 	bne	r2,zero,172ec <__alt_data_end+0xfc0172ec>
   17400:	0011883a 	mov	r8,zero
   17404:	003fdb06 	br	17374 <__alt_data_end+0xfc017374>
   17408:	94c0012e 	bgeu	r18,r19,17410 <__sfvwrite_r+0x328>
   1740c:	9027883a 	mov	r19,r18
   17410:	980d883a 	mov	r6,r19
   17414:	e00b883a 	mov	r5,fp
   17418:	0017ab40 	call	17ab4 <memmove>
   1741c:	80800217 	ldw	r2,8(r16)
   17420:	80c00017 	ldw	r3,0(r16)
   17424:	14c5c83a 	sub	r2,r2,r19
   17428:	1cc7883a 	add	r3,r3,r19
   1742c:	80800215 	stw	r2,8(r16)
   17430:	80c00015 	stw	r3,0(r16)
   17434:	10004326 	beq	r2,zero,17544 <__sfvwrite_r+0x45c>
   17438:	9805883a 	mov	r2,r19
   1743c:	003f8306 	br	1724c <__alt_data_end+0xfc01724c>
   17440:	b00d883a 	mov	r6,r22
   17444:	e00b883a 	mov	r5,fp
   17448:	da000115 	stw	r8,4(sp)
   1744c:	0017ab40 	call	17ab4 <memmove>
   17450:	80800217 	ldw	r2,8(r16)
   17454:	80c00017 	ldw	r3,0(r16)
   17458:	da000117 	ldw	r8,4(sp)
   1745c:	1585c83a 	sub	r2,r2,r22
   17460:	1dad883a 	add	r22,r3,r22
   17464:	80800215 	stw	r2,8(r16)
   17468:	85800015 	stw	r22,0(r16)
   1746c:	003fbf06 	br	1736c <__alt_data_end+0xfc01736c>
   17470:	81000017 	ldw	r4,0(r16)
   17474:	9027883a 	mov	r19,r18
   17478:	902f883a 	mov	r23,r18
   1747c:	003f6906 	br	17224 <__alt_data_end+0xfc017224>
   17480:	900d883a 	mov	r6,r18
   17484:	01400284 	movi	r5,10
   17488:	e009883a 	mov	r4,fp
   1748c:	00179d00 	call	179d0 <memchr>
   17490:	10003e26 	beq	r2,zero,1758c <__sfvwrite_r+0x4a4>
   17494:	10800044 	addi	r2,r2,1
   17498:	1727c83a 	sub	r19,r2,fp
   1749c:	02000044 	movi	r8,1
   174a0:	003f9d06 	br	17318 <__alt_data_end+0xfc017318>
   174a4:	80800517 	ldw	r2,20(r16)
   174a8:	81400417 	ldw	r5,16(r16)
   174ac:	81c00017 	ldw	r7,0(r16)
   174b0:	10a7883a 	add	r19,r2,r2
   174b4:	9885883a 	add	r2,r19,r2
   174b8:	1026d7fa 	srli	r19,r2,31
   174bc:	396dc83a 	sub	r22,r7,r5
   174c0:	b1000044 	addi	r4,r22,1
   174c4:	9885883a 	add	r2,r19,r2
   174c8:	1027d07a 	srai	r19,r2,1
   174cc:	2485883a 	add	r2,r4,r18
   174d0:	980d883a 	mov	r6,r19
   174d4:	9880022e 	bgeu	r19,r2,174e0 <__sfvwrite_r+0x3f8>
   174d8:	1027883a 	mov	r19,r2
   174dc:	100d883a 	mov	r6,r2
   174e0:	18c1000c 	andi	r3,r3,1024
   174e4:	18001c26 	beq	r3,zero,17558 <__sfvwrite_r+0x470>
   174e8:	300b883a 	mov	r5,r6
   174ec:	a809883a 	mov	r4,r21
   174f0:	000f4740 	call	f474 <_malloc_r>
   174f4:	102f883a 	mov	r23,r2
   174f8:	10002926 	beq	r2,zero,175a0 <__sfvwrite_r+0x4b8>
   174fc:	81400417 	ldw	r5,16(r16)
   17500:	b00d883a 	mov	r6,r22
   17504:	1009883a 	mov	r4,r2
   17508:	000fc800 	call	fc80 <memcpy>
   1750c:	8080030b 	ldhu	r2,12(r16)
   17510:	00fedfc4 	movi	r3,-1153
   17514:	10c4703a 	and	r2,r2,r3
   17518:	10802014 	ori	r2,r2,128
   1751c:	8080030d 	sth	r2,12(r16)
   17520:	bd89883a 	add	r4,r23,r22
   17524:	9d8fc83a 	sub	r7,r19,r22
   17528:	85c00415 	stw	r23,16(r16)
   1752c:	84c00515 	stw	r19,20(r16)
   17530:	81000015 	stw	r4,0(r16)
   17534:	9027883a 	mov	r19,r18
   17538:	81c00215 	stw	r7,8(r16)
   1753c:	902f883a 	mov	r23,r18
   17540:	003f3806 	br	17224 <__alt_data_end+0xfc017224>
   17544:	800b883a 	mov	r5,r16
   17548:	a809883a 	mov	r4,r21
   1754c:	00168780 	call	16878 <_fflush_r>
   17550:	103fb926 	beq	r2,zero,17438 <__alt_data_end+0xfc017438>
   17554:	003f6506 	br	172ec <__alt_data_end+0xfc0172ec>
   17558:	a809883a 	mov	r4,r21
   1755c:	0018e300 	call	18e30 <_realloc_r>
   17560:	102f883a 	mov	r23,r2
   17564:	103fee1e 	bne	r2,zero,17520 <__alt_data_end+0xfc017520>
   17568:	81400417 	ldw	r5,16(r16)
   1756c:	a809883a 	mov	r4,r21
   17570:	0016dd80 	call	16dd8 <_free_r>
   17574:	8080030b 	ldhu	r2,12(r16)
   17578:	00ffdfc4 	movi	r3,-129
   1757c:	1884703a 	and	r2,r3,r2
   17580:	00c00304 	movi	r3,12
   17584:	a8c00015 	stw	r3,0(r21)
   17588:	003f5906 	br	172f0 <__alt_data_end+0xfc0172f0>
   1758c:	94c00044 	addi	r19,r18,1
   17590:	02000044 	movi	r8,1
   17594:	003f6006 	br	17318 <__alt_data_end+0xfc017318>
   17598:	00bfffc4 	movi	r2,-1
   1759c:	003f0006 	br	171a0 <__alt_data_end+0xfc0171a0>
   175a0:	00800304 	movi	r2,12
   175a4:	a8800015 	stw	r2,0(r21)
   175a8:	8080030b 	ldhu	r2,12(r16)
   175ac:	003f5006 	br	172f0 <__alt_data_end+0xfc0172f0>

000175b0 <_fwalk>:
   175b0:	defff704 	addi	sp,sp,-36
   175b4:	dd000415 	stw	r20,16(sp)
   175b8:	dfc00815 	stw	ra,32(sp)
   175bc:	ddc00715 	stw	r23,28(sp)
   175c0:	dd800615 	stw	r22,24(sp)
   175c4:	dd400515 	stw	r21,20(sp)
   175c8:	dcc00315 	stw	r19,12(sp)
   175cc:	dc800215 	stw	r18,8(sp)
   175d0:	dc400115 	stw	r17,4(sp)
   175d4:	dc000015 	stw	r16,0(sp)
   175d8:	2500b804 	addi	r20,r4,736
   175dc:	a0002326 	beq	r20,zero,1766c <_fwalk+0xbc>
   175e0:	282b883a 	mov	r21,r5
   175e4:	002f883a 	mov	r23,zero
   175e8:	05800044 	movi	r22,1
   175ec:	04ffffc4 	movi	r19,-1
   175f0:	a4400117 	ldw	r17,4(r20)
   175f4:	a4800217 	ldw	r18,8(r20)
   175f8:	8c7fffc4 	addi	r17,r17,-1
   175fc:	88000d16 	blt	r17,zero,17634 <_fwalk+0x84>
   17600:	94000304 	addi	r16,r18,12
   17604:	94800384 	addi	r18,r18,14
   17608:	8080000b 	ldhu	r2,0(r16)
   1760c:	8c7fffc4 	addi	r17,r17,-1
   17610:	813ffd04 	addi	r4,r16,-12
   17614:	b080042e 	bgeu	r22,r2,17628 <_fwalk+0x78>
   17618:	9080000f 	ldh	r2,0(r18)
   1761c:	14c00226 	beq	r2,r19,17628 <_fwalk+0x78>
   17620:	a83ee83a 	callr	r21
   17624:	b8aeb03a 	or	r23,r23,r2
   17628:	84001a04 	addi	r16,r16,104
   1762c:	94801a04 	addi	r18,r18,104
   17630:	8cfff51e 	bne	r17,r19,17608 <__alt_data_end+0xfc017608>
   17634:	a5000017 	ldw	r20,0(r20)
   17638:	a03fed1e 	bne	r20,zero,175f0 <__alt_data_end+0xfc0175f0>
   1763c:	b805883a 	mov	r2,r23
   17640:	dfc00817 	ldw	ra,32(sp)
   17644:	ddc00717 	ldw	r23,28(sp)
   17648:	dd800617 	ldw	r22,24(sp)
   1764c:	dd400517 	ldw	r21,20(sp)
   17650:	dd000417 	ldw	r20,16(sp)
   17654:	dcc00317 	ldw	r19,12(sp)
   17658:	dc800217 	ldw	r18,8(sp)
   1765c:	dc400117 	ldw	r17,4(sp)
   17660:	dc000017 	ldw	r16,0(sp)
   17664:	dec00904 	addi	sp,sp,36
   17668:	f800283a 	ret
   1766c:	002f883a 	mov	r23,zero
   17670:	003ff206 	br	1763c <__alt_data_end+0xfc01763c>

00017674 <_fwalk_reent>:
   17674:	defff704 	addi	sp,sp,-36
   17678:	dd000415 	stw	r20,16(sp)
   1767c:	dfc00815 	stw	ra,32(sp)
   17680:	ddc00715 	stw	r23,28(sp)
   17684:	dd800615 	stw	r22,24(sp)
   17688:	dd400515 	stw	r21,20(sp)
   1768c:	dcc00315 	stw	r19,12(sp)
   17690:	dc800215 	stw	r18,8(sp)
   17694:	dc400115 	stw	r17,4(sp)
   17698:	dc000015 	stw	r16,0(sp)
   1769c:	2500b804 	addi	r20,r4,736
   176a0:	a0002326 	beq	r20,zero,17730 <_fwalk_reent+0xbc>
   176a4:	282b883a 	mov	r21,r5
   176a8:	2027883a 	mov	r19,r4
   176ac:	002f883a 	mov	r23,zero
   176b0:	05800044 	movi	r22,1
   176b4:	04bfffc4 	movi	r18,-1
   176b8:	a4400117 	ldw	r17,4(r20)
   176bc:	a4000217 	ldw	r16,8(r20)
   176c0:	8c7fffc4 	addi	r17,r17,-1
   176c4:	88000c16 	blt	r17,zero,176f8 <_fwalk_reent+0x84>
   176c8:	84000304 	addi	r16,r16,12
   176cc:	8080000b 	ldhu	r2,0(r16)
   176d0:	8c7fffc4 	addi	r17,r17,-1
   176d4:	817ffd04 	addi	r5,r16,-12
   176d8:	b080052e 	bgeu	r22,r2,176f0 <_fwalk_reent+0x7c>
   176dc:	8080008f 	ldh	r2,2(r16)
   176e0:	9809883a 	mov	r4,r19
   176e4:	14800226 	beq	r2,r18,176f0 <_fwalk_reent+0x7c>
   176e8:	a83ee83a 	callr	r21
   176ec:	b8aeb03a 	or	r23,r23,r2
   176f0:	84001a04 	addi	r16,r16,104
   176f4:	8cbff51e 	bne	r17,r18,176cc <__alt_data_end+0xfc0176cc>
   176f8:	a5000017 	ldw	r20,0(r20)
   176fc:	a03fee1e 	bne	r20,zero,176b8 <__alt_data_end+0xfc0176b8>
   17700:	b805883a 	mov	r2,r23
   17704:	dfc00817 	ldw	ra,32(sp)
   17708:	ddc00717 	ldw	r23,28(sp)
   1770c:	dd800617 	ldw	r22,24(sp)
   17710:	dd400517 	ldw	r21,20(sp)
   17714:	dd000417 	ldw	r20,16(sp)
   17718:	dcc00317 	ldw	r19,12(sp)
   1771c:	dc800217 	ldw	r18,8(sp)
   17720:	dc400117 	ldw	r17,4(sp)
   17724:	dc000017 	ldw	r16,0(sp)
   17728:	dec00904 	addi	sp,sp,36
   1772c:	f800283a 	ret
   17730:	002f883a 	mov	r23,zero
   17734:	003ff206 	br	17700 <__alt_data_end+0xfc017700>

00017738 <_setlocale_r>:
   17738:	30001b26 	beq	r6,zero,177a8 <_setlocale_r+0x70>
   1773c:	014000f4 	movhi	r5,3
   17740:	defffe04 	addi	sp,sp,-8
   17744:	296e5c04 	addi	r5,r5,-18064
   17748:	3009883a 	mov	r4,r6
   1774c:	dc000015 	stw	r16,0(sp)
   17750:	dfc00115 	stw	ra,4(sp)
   17754:	3021883a 	mov	r16,r6
   17758:	001046c0 	call	1046c <strcmp>
   1775c:	1000061e 	bne	r2,zero,17778 <_setlocale_r+0x40>
   17760:	008000f4 	movhi	r2,3
   17764:	10ae3504 	addi	r2,r2,-18220
   17768:	dfc00117 	ldw	ra,4(sp)
   1776c:	dc000017 	ldw	r16,0(sp)
   17770:	dec00204 	addi	sp,sp,8
   17774:	f800283a 	ret
   17778:	014000f4 	movhi	r5,3
   1777c:	296e3504 	addi	r5,r5,-18220
   17780:	8009883a 	mov	r4,r16
   17784:	001046c0 	call	1046c <strcmp>
   17788:	103ff526 	beq	r2,zero,17760 <__alt_data_end+0xfc017760>
   1778c:	014000f4 	movhi	r5,3
   17790:	296e3f04 	addi	r5,r5,-18180
   17794:	8009883a 	mov	r4,r16
   17798:	001046c0 	call	1046c <strcmp>
   1779c:	103ff026 	beq	r2,zero,17760 <__alt_data_end+0xfc017760>
   177a0:	0005883a 	mov	r2,zero
   177a4:	003ff006 	br	17768 <__alt_data_end+0xfc017768>
   177a8:	008000f4 	movhi	r2,3
   177ac:	10ae3504 	addi	r2,r2,-18220
   177b0:	f800283a 	ret

000177b4 <__locale_charset>:
   177b4:	008000f4 	movhi	r2,3
   177b8:	10b0e304 	addi	r2,r2,-15476
   177bc:	f800283a 	ret

000177c0 <__locale_mb_cur_max>:
   177c0:	008000f4 	movhi	r2,3
   177c4:	10bb3f04 	addi	r2,r2,-4868
   177c8:	10800017 	ldw	r2,0(r2)
   177cc:	f800283a 	ret

000177d0 <__locale_msgcharset>:
   177d0:	008000f4 	movhi	r2,3
   177d4:	10b0db04 	addi	r2,r2,-15508
   177d8:	f800283a 	ret

000177dc <__locale_cjk_lang>:
   177dc:	0005883a 	mov	r2,zero
   177e0:	f800283a 	ret

000177e4 <_localeconv_r>:
   177e4:	008000f4 	movhi	r2,3
   177e8:	10b0eb04 	addi	r2,r2,-15444
   177ec:	f800283a 	ret

000177f0 <setlocale>:
   177f0:	008000f4 	movhi	r2,3
   177f4:	10bb3c04 	addi	r2,r2,-4880
   177f8:	280d883a 	mov	r6,r5
   177fc:	200b883a 	mov	r5,r4
   17800:	11000017 	ldw	r4,0(r2)
   17804:	00177381 	jmpi	17738 <_setlocale_r>

00017808 <localeconv>:
   17808:	008000f4 	movhi	r2,3
   1780c:	10b0eb04 	addi	r2,r2,-15444
   17810:	f800283a 	ret

00017814 <__smakebuf_r>:
   17814:	2880030b 	ldhu	r2,12(r5)
   17818:	10c0008c 	andi	r3,r2,2
   1781c:	1800411e 	bne	r3,zero,17924 <__smakebuf_r+0x110>
   17820:	deffec04 	addi	sp,sp,-80
   17824:	dc000f15 	stw	r16,60(sp)
   17828:	2821883a 	mov	r16,r5
   1782c:	2940038f 	ldh	r5,14(r5)
   17830:	dc401015 	stw	r17,64(sp)
   17834:	dfc01315 	stw	ra,76(sp)
   17838:	dcc01215 	stw	r19,72(sp)
   1783c:	dc801115 	stw	r18,68(sp)
   17840:	2023883a 	mov	r17,r4
   17844:	28001c16 	blt	r5,zero,178b8 <__smakebuf_r+0xa4>
   17848:	d80d883a 	mov	r6,sp
   1784c:	001c7a00 	call	1c7a0 <_fstat_r>
   17850:	10001816 	blt	r2,zero,178b4 <__smakebuf_r+0xa0>
   17854:	d8800117 	ldw	r2,4(sp)
   17858:	00e00014 	movui	r3,32768
   1785c:	10bc000c 	andi	r2,r2,61440
   17860:	14c80020 	cmpeqi	r19,r2,8192
   17864:	10c03726 	beq	r2,r3,17944 <__smakebuf_r+0x130>
   17868:	80c0030b 	ldhu	r3,12(r16)
   1786c:	18c20014 	ori	r3,r3,2048
   17870:	80c0030d 	sth	r3,12(r16)
   17874:	00c80004 	movi	r3,8192
   17878:	10c0521e 	bne	r2,r3,179c4 <__smakebuf_r+0x1b0>
   1787c:	8140038f 	ldh	r5,14(r16)
   17880:	8809883a 	mov	r4,r17
   17884:	001c7fc0 	call	1c7fc <_isatty_r>
   17888:	10004c26 	beq	r2,zero,179bc <__smakebuf_r+0x1a8>
   1788c:	8080030b 	ldhu	r2,12(r16)
   17890:	80c010c4 	addi	r3,r16,67
   17894:	80c00015 	stw	r3,0(r16)
   17898:	10800054 	ori	r2,r2,1
   1789c:	8080030d 	sth	r2,12(r16)
   178a0:	00800044 	movi	r2,1
   178a4:	80c00415 	stw	r3,16(r16)
   178a8:	80800515 	stw	r2,20(r16)
   178ac:	04810004 	movi	r18,1024
   178b0:	00000706 	br	178d0 <__smakebuf_r+0xbc>
   178b4:	8080030b 	ldhu	r2,12(r16)
   178b8:	10c0200c 	andi	r3,r2,128
   178bc:	18001f1e 	bne	r3,zero,1793c <__smakebuf_r+0x128>
   178c0:	04810004 	movi	r18,1024
   178c4:	10820014 	ori	r2,r2,2048
   178c8:	8080030d 	sth	r2,12(r16)
   178cc:	0027883a 	mov	r19,zero
   178d0:	900b883a 	mov	r5,r18
   178d4:	8809883a 	mov	r4,r17
   178d8:	000f4740 	call	f474 <_malloc_r>
   178dc:	10002c26 	beq	r2,zero,17990 <__smakebuf_r+0x17c>
   178e0:	80c0030b 	ldhu	r3,12(r16)
   178e4:	01000074 	movhi	r4,1
   178e8:	211a4304 	addi	r4,r4,26892
   178ec:	89000f15 	stw	r4,60(r17)
   178f0:	18c02014 	ori	r3,r3,128
   178f4:	80c0030d 	sth	r3,12(r16)
   178f8:	80800015 	stw	r2,0(r16)
   178fc:	80800415 	stw	r2,16(r16)
   17900:	84800515 	stw	r18,20(r16)
   17904:	98001a1e 	bne	r19,zero,17970 <__smakebuf_r+0x15c>
   17908:	dfc01317 	ldw	ra,76(sp)
   1790c:	dcc01217 	ldw	r19,72(sp)
   17910:	dc801117 	ldw	r18,68(sp)
   17914:	dc401017 	ldw	r17,64(sp)
   17918:	dc000f17 	ldw	r16,60(sp)
   1791c:	dec01404 	addi	sp,sp,80
   17920:	f800283a 	ret
   17924:	288010c4 	addi	r2,r5,67
   17928:	28800015 	stw	r2,0(r5)
   1792c:	28800415 	stw	r2,16(r5)
   17930:	00800044 	movi	r2,1
   17934:	28800515 	stw	r2,20(r5)
   17938:	f800283a 	ret
   1793c:	04801004 	movi	r18,64
   17940:	003fe006 	br	178c4 <__alt_data_end+0xfc0178c4>
   17944:	81000a17 	ldw	r4,40(r16)
   17948:	00c000b4 	movhi	r3,2
   1794c:	18e53804 	addi	r3,r3,-27424
   17950:	20ffc51e 	bne	r4,r3,17868 <__alt_data_end+0xfc017868>
   17954:	8080030b 	ldhu	r2,12(r16)
   17958:	04810004 	movi	r18,1024
   1795c:	84801315 	stw	r18,76(r16)
   17960:	1484b03a 	or	r2,r2,r18
   17964:	8080030d 	sth	r2,12(r16)
   17968:	0027883a 	mov	r19,zero
   1796c:	003fd806 	br	178d0 <__alt_data_end+0xfc0178d0>
   17970:	8140038f 	ldh	r5,14(r16)
   17974:	8809883a 	mov	r4,r17
   17978:	001c7fc0 	call	1c7fc <_isatty_r>
   1797c:	103fe226 	beq	r2,zero,17908 <__alt_data_end+0xfc017908>
   17980:	8080030b 	ldhu	r2,12(r16)
   17984:	10800054 	ori	r2,r2,1
   17988:	8080030d 	sth	r2,12(r16)
   1798c:	003fde06 	br	17908 <__alt_data_end+0xfc017908>
   17990:	8080030b 	ldhu	r2,12(r16)
   17994:	10c0800c 	andi	r3,r2,512
   17998:	183fdb1e 	bne	r3,zero,17908 <__alt_data_end+0xfc017908>
   1799c:	10800094 	ori	r2,r2,2
   179a0:	80c010c4 	addi	r3,r16,67
   179a4:	8080030d 	sth	r2,12(r16)
   179a8:	00800044 	movi	r2,1
   179ac:	80c00015 	stw	r3,0(r16)
   179b0:	80c00415 	stw	r3,16(r16)
   179b4:	80800515 	stw	r2,20(r16)
   179b8:	003fd306 	br	17908 <__alt_data_end+0xfc017908>
   179bc:	04810004 	movi	r18,1024
   179c0:	003fc306 	br	178d0 <__alt_data_end+0xfc0178d0>
   179c4:	0027883a 	mov	r19,zero
   179c8:	04810004 	movi	r18,1024
   179cc:	003fc006 	br	178d0 <__alt_data_end+0xfc0178d0>

000179d0 <memchr>:
   179d0:	208000cc 	andi	r2,r4,3
   179d4:	280f883a 	mov	r7,r5
   179d8:	10003426 	beq	r2,zero,17aac <memchr+0xdc>
   179dc:	30bfffc4 	addi	r2,r6,-1
   179e0:	30001a26 	beq	r6,zero,17a4c <memchr+0x7c>
   179e4:	20c00003 	ldbu	r3,0(r4)
   179e8:	29803fcc 	andi	r6,r5,255
   179ec:	30c0051e 	bne	r6,r3,17a04 <memchr+0x34>
   179f0:	00001806 	br	17a54 <memchr+0x84>
   179f4:	10001526 	beq	r2,zero,17a4c <memchr+0x7c>
   179f8:	20c00003 	ldbu	r3,0(r4)
   179fc:	10bfffc4 	addi	r2,r2,-1
   17a00:	30c01426 	beq	r6,r3,17a54 <memchr+0x84>
   17a04:	21000044 	addi	r4,r4,1
   17a08:	20c000cc 	andi	r3,r4,3
   17a0c:	183ff91e 	bne	r3,zero,179f4 <__alt_data_end+0xfc0179f4>
   17a10:	020000c4 	movi	r8,3
   17a14:	40801136 	bltu	r8,r2,17a5c <memchr+0x8c>
   17a18:	10000c26 	beq	r2,zero,17a4c <memchr+0x7c>
   17a1c:	20c00003 	ldbu	r3,0(r4)
   17a20:	29403fcc 	andi	r5,r5,255
   17a24:	28c00b26 	beq	r5,r3,17a54 <memchr+0x84>
   17a28:	20c00044 	addi	r3,r4,1
   17a2c:	39803fcc 	andi	r6,r7,255
   17a30:	2089883a 	add	r4,r4,r2
   17a34:	00000306 	br	17a44 <memchr+0x74>
   17a38:	18c00044 	addi	r3,r3,1
   17a3c:	197fffc3 	ldbu	r5,-1(r3)
   17a40:	31400526 	beq	r6,r5,17a58 <memchr+0x88>
   17a44:	1805883a 	mov	r2,r3
   17a48:	20fffb1e 	bne	r4,r3,17a38 <__alt_data_end+0xfc017a38>
   17a4c:	0005883a 	mov	r2,zero
   17a50:	f800283a 	ret
   17a54:	2005883a 	mov	r2,r4
   17a58:	f800283a 	ret
   17a5c:	28c03fcc 	andi	r3,r5,255
   17a60:	1812923a 	slli	r9,r3,8
   17a64:	02ffbff4 	movhi	r11,65279
   17a68:	02a02074 	movhi	r10,32897
   17a6c:	48d2b03a 	or	r9,r9,r3
   17a70:	4806943a 	slli	r3,r9,16
   17a74:	5affbfc4 	addi	r11,r11,-257
   17a78:	52a02004 	addi	r10,r10,-32640
   17a7c:	48d2b03a 	or	r9,r9,r3
   17a80:	20c00017 	ldw	r3,0(r4)
   17a84:	48c6f03a 	xor	r3,r9,r3
   17a88:	1acd883a 	add	r6,r3,r11
   17a8c:	00c6303a 	nor	r3,zero,r3
   17a90:	30c6703a 	and	r3,r6,r3
   17a94:	1a86703a 	and	r3,r3,r10
   17a98:	183fe01e 	bne	r3,zero,17a1c <__alt_data_end+0xfc017a1c>
   17a9c:	10bfff04 	addi	r2,r2,-4
   17aa0:	21000104 	addi	r4,r4,4
   17aa4:	40bff636 	bltu	r8,r2,17a80 <__alt_data_end+0xfc017a80>
   17aa8:	003fdb06 	br	17a18 <__alt_data_end+0xfc017a18>
   17aac:	3005883a 	mov	r2,r6
   17ab0:	003fd706 	br	17a10 <__alt_data_end+0xfc017a10>

00017ab4 <memmove>:
   17ab4:	2005883a 	mov	r2,r4
   17ab8:	29000b2e 	bgeu	r5,r4,17ae8 <memmove+0x34>
   17abc:	298f883a 	add	r7,r5,r6
   17ac0:	21c0092e 	bgeu	r4,r7,17ae8 <memmove+0x34>
   17ac4:	2187883a 	add	r3,r4,r6
   17ac8:	198bc83a 	sub	r5,r3,r6
   17acc:	30004826 	beq	r6,zero,17bf0 <memmove+0x13c>
   17ad0:	39ffffc4 	addi	r7,r7,-1
   17ad4:	39000003 	ldbu	r4,0(r7)
   17ad8:	18ffffc4 	addi	r3,r3,-1
   17adc:	19000005 	stb	r4,0(r3)
   17ae0:	28fffb1e 	bne	r5,r3,17ad0 <__alt_data_end+0xfc017ad0>
   17ae4:	f800283a 	ret
   17ae8:	00c003c4 	movi	r3,15
   17aec:	1980412e 	bgeu	r3,r6,17bf4 <memmove+0x140>
   17af0:	2886b03a 	or	r3,r5,r2
   17af4:	18c000cc 	andi	r3,r3,3
   17af8:	1800401e 	bne	r3,zero,17bfc <memmove+0x148>
   17afc:	33fffc04 	addi	r15,r6,-16
   17b00:	781ed13a 	srli	r15,r15,4
   17b04:	28c00104 	addi	r3,r5,4
   17b08:	13400104 	addi	r13,r2,4
   17b0c:	781c913a 	slli	r14,r15,4
   17b10:	2b000204 	addi	r12,r5,8
   17b14:	12c00204 	addi	r11,r2,8
   17b18:	73800504 	addi	r14,r14,20
   17b1c:	2a800304 	addi	r10,r5,12
   17b20:	12400304 	addi	r9,r2,12
   17b24:	2b9d883a 	add	r14,r5,r14
   17b28:	2811883a 	mov	r8,r5
   17b2c:	100f883a 	mov	r7,r2
   17b30:	41000017 	ldw	r4,0(r8)
   17b34:	39c00404 	addi	r7,r7,16
   17b38:	18c00404 	addi	r3,r3,16
   17b3c:	393ffc15 	stw	r4,-16(r7)
   17b40:	193ffc17 	ldw	r4,-16(r3)
   17b44:	6b400404 	addi	r13,r13,16
   17b48:	5ac00404 	addi	r11,r11,16
   17b4c:	693ffc15 	stw	r4,-16(r13)
   17b50:	61000017 	ldw	r4,0(r12)
   17b54:	4a400404 	addi	r9,r9,16
   17b58:	42000404 	addi	r8,r8,16
   17b5c:	593ffc15 	stw	r4,-16(r11)
   17b60:	51000017 	ldw	r4,0(r10)
   17b64:	63000404 	addi	r12,r12,16
   17b68:	52800404 	addi	r10,r10,16
   17b6c:	493ffc15 	stw	r4,-16(r9)
   17b70:	1bbfef1e 	bne	r3,r14,17b30 <__alt_data_end+0xfc017b30>
   17b74:	79000044 	addi	r4,r15,1
   17b78:	2008913a 	slli	r4,r4,4
   17b7c:	328003cc 	andi	r10,r6,15
   17b80:	02c000c4 	movi	r11,3
   17b84:	1107883a 	add	r3,r2,r4
   17b88:	290b883a 	add	r5,r5,r4
   17b8c:	5a801e2e 	bgeu	r11,r10,17c08 <memmove+0x154>
   17b90:	1813883a 	mov	r9,r3
   17b94:	2811883a 	mov	r8,r5
   17b98:	500f883a 	mov	r7,r10
   17b9c:	41000017 	ldw	r4,0(r8)
   17ba0:	4a400104 	addi	r9,r9,4
   17ba4:	39ffff04 	addi	r7,r7,-4
   17ba8:	493fff15 	stw	r4,-4(r9)
   17bac:	42000104 	addi	r8,r8,4
   17bb0:	59fffa36 	bltu	r11,r7,17b9c <__alt_data_end+0xfc017b9c>
   17bb4:	513fff04 	addi	r4,r10,-4
   17bb8:	2008d0ba 	srli	r4,r4,2
   17bbc:	318000cc 	andi	r6,r6,3
   17bc0:	21000044 	addi	r4,r4,1
   17bc4:	2109883a 	add	r4,r4,r4
   17bc8:	2109883a 	add	r4,r4,r4
   17bcc:	1907883a 	add	r3,r3,r4
   17bd0:	290b883a 	add	r5,r5,r4
   17bd4:	30000b26 	beq	r6,zero,17c04 <memmove+0x150>
   17bd8:	198d883a 	add	r6,r3,r6
   17bdc:	29c00003 	ldbu	r7,0(r5)
   17be0:	18c00044 	addi	r3,r3,1
   17be4:	29400044 	addi	r5,r5,1
   17be8:	19ffffc5 	stb	r7,-1(r3)
   17bec:	19bffb1e 	bne	r3,r6,17bdc <__alt_data_end+0xfc017bdc>
   17bf0:	f800283a 	ret
   17bf4:	1007883a 	mov	r3,r2
   17bf8:	003ff606 	br	17bd4 <__alt_data_end+0xfc017bd4>
   17bfc:	1007883a 	mov	r3,r2
   17c00:	003ff506 	br	17bd8 <__alt_data_end+0xfc017bd8>
   17c04:	f800283a 	ret
   17c08:	500d883a 	mov	r6,r10
   17c0c:	003ff106 	br	17bd4 <__alt_data_end+0xfc017bd4>

00017c10 <_Balloc>:
   17c10:	20801317 	ldw	r2,76(r4)
   17c14:	defffc04 	addi	sp,sp,-16
   17c18:	dc400115 	stw	r17,4(sp)
   17c1c:	dc000015 	stw	r16,0(sp)
   17c20:	dfc00315 	stw	ra,12(sp)
   17c24:	dc800215 	stw	r18,8(sp)
   17c28:	2023883a 	mov	r17,r4
   17c2c:	2821883a 	mov	r16,r5
   17c30:	10000f26 	beq	r2,zero,17c70 <_Balloc+0x60>
   17c34:	8407883a 	add	r3,r16,r16
   17c38:	18c7883a 	add	r3,r3,r3
   17c3c:	10c7883a 	add	r3,r2,r3
   17c40:	18800017 	ldw	r2,0(r3)
   17c44:	10001126 	beq	r2,zero,17c8c <_Balloc+0x7c>
   17c48:	11000017 	ldw	r4,0(r2)
   17c4c:	19000015 	stw	r4,0(r3)
   17c50:	10000415 	stw	zero,16(r2)
   17c54:	10000315 	stw	zero,12(r2)
   17c58:	dfc00317 	ldw	ra,12(sp)
   17c5c:	dc800217 	ldw	r18,8(sp)
   17c60:	dc400117 	ldw	r17,4(sp)
   17c64:	dc000017 	ldw	r16,0(sp)
   17c68:	dec00404 	addi	sp,sp,16
   17c6c:	f800283a 	ret
   17c70:	01800844 	movi	r6,33
   17c74:	01400104 	movi	r5,4
   17c78:	001c3b80 	call	1c3b8 <_calloc_r>
   17c7c:	88801315 	stw	r2,76(r17)
   17c80:	103fec1e 	bne	r2,zero,17c34 <__alt_data_end+0xfc017c34>
   17c84:	0005883a 	mov	r2,zero
   17c88:	003ff306 	br	17c58 <__alt_data_end+0xfc017c58>
   17c8c:	01400044 	movi	r5,1
   17c90:	2c24983a 	sll	r18,r5,r16
   17c94:	8809883a 	mov	r4,r17
   17c98:	91800144 	addi	r6,r18,5
   17c9c:	318d883a 	add	r6,r6,r6
   17ca0:	318d883a 	add	r6,r6,r6
   17ca4:	001c3b80 	call	1c3b8 <_calloc_r>
   17ca8:	103ff626 	beq	r2,zero,17c84 <__alt_data_end+0xfc017c84>
   17cac:	14000115 	stw	r16,4(r2)
   17cb0:	14800215 	stw	r18,8(r2)
   17cb4:	003fe606 	br	17c50 <__alt_data_end+0xfc017c50>

00017cb8 <_Bfree>:
   17cb8:	28000826 	beq	r5,zero,17cdc <_Bfree+0x24>
   17cbc:	28c00117 	ldw	r3,4(r5)
   17cc0:	20801317 	ldw	r2,76(r4)
   17cc4:	18c7883a 	add	r3,r3,r3
   17cc8:	18c7883a 	add	r3,r3,r3
   17ccc:	10c5883a 	add	r2,r2,r3
   17cd0:	10c00017 	ldw	r3,0(r2)
   17cd4:	28c00015 	stw	r3,0(r5)
   17cd8:	11400015 	stw	r5,0(r2)
   17cdc:	f800283a 	ret

00017ce0 <__multadd>:
   17ce0:	defff704 	addi	sp,sp,-36
   17ce4:	dc800215 	stw	r18,8(sp)
   17ce8:	2c800417 	ldw	r18,16(r5)
   17cec:	dd800615 	stw	r22,24(sp)
   17cf0:	dd400515 	stw	r21,20(sp)
   17cf4:	dd000415 	stw	r20,16(sp)
   17cf8:	dcc00315 	stw	r19,12(sp)
   17cfc:	dc400115 	stw	r17,4(sp)
   17d00:	dc000015 	stw	r16,0(sp)
   17d04:	dfc00815 	stw	ra,32(sp)
   17d08:	ddc00715 	stw	r23,28(sp)
   17d0c:	2827883a 	mov	r19,r5
   17d10:	2029883a 	mov	r20,r4
   17d14:	3023883a 	mov	r17,r6
   17d18:	3821883a 	mov	r16,r7
   17d1c:	2d400504 	addi	r21,r5,20
   17d20:	002d883a 	mov	r22,zero
   17d24:	adc00017 	ldw	r23,0(r21)
   17d28:	880b883a 	mov	r5,r17
   17d2c:	ad400104 	addi	r21,r21,4
   17d30:	b93fffcc 	andi	r4,r23,65535
   17d34:	000d8e00 	call	d8e0 <__mulsi3>
   17d38:	b808d43a 	srli	r4,r23,16
   17d3c:	880b883a 	mov	r5,r17
   17d40:	1421883a 	add	r16,r2,r16
   17d44:	000d8e00 	call	d8e0 <__mulsi3>
   17d48:	800ed43a 	srli	r7,r16,16
   17d4c:	80ffffcc 	andi	r3,r16,65535
   17d50:	b5800044 	addi	r22,r22,1
   17d54:	11c5883a 	add	r2,r2,r7
   17d58:	100e943a 	slli	r7,r2,16
   17d5c:	1020d43a 	srli	r16,r2,16
   17d60:	38c7883a 	add	r3,r7,r3
   17d64:	a8ffff15 	stw	r3,-4(r21)
   17d68:	b4bfee16 	blt	r22,r18,17d24 <__alt_data_end+0xfc017d24>
   17d6c:	80000926 	beq	r16,zero,17d94 <__multadd+0xb4>
   17d70:	98800217 	ldw	r2,8(r19)
   17d74:	9080130e 	bge	r18,r2,17dc4 <__multadd+0xe4>
   17d78:	90800144 	addi	r2,r18,5
   17d7c:	1085883a 	add	r2,r2,r2
   17d80:	1085883a 	add	r2,r2,r2
   17d84:	9885883a 	add	r2,r19,r2
   17d88:	14000015 	stw	r16,0(r2)
   17d8c:	94800044 	addi	r18,r18,1
   17d90:	9c800415 	stw	r18,16(r19)
   17d94:	9805883a 	mov	r2,r19
   17d98:	dfc00817 	ldw	ra,32(sp)
   17d9c:	ddc00717 	ldw	r23,28(sp)
   17da0:	dd800617 	ldw	r22,24(sp)
   17da4:	dd400517 	ldw	r21,20(sp)
   17da8:	dd000417 	ldw	r20,16(sp)
   17dac:	dcc00317 	ldw	r19,12(sp)
   17db0:	dc800217 	ldw	r18,8(sp)
   17db4:	dc400117 	ldw	r17,4(sp)
   17db8:	dc000017 	ldw	r16,0(sp)
   17dbc:	dec00904 	addi	sp,sp,36
   17dc0:	f800283a 	ret
   17dc4:	99400117 	ldw	r5,4(r19)
   17dc8:	a009883a 	mov	r4,r20
   17dcc:	29400044 	addi	r5,r5,1
   17dd0:	0017c100 	call	17c10 <_Balloc>
   17dd4:	99800417 	ldw	r6,16(r19)
   17dd8:	99400304 	addi	r5,r19,12
   17ddc:	11000304 	addi	r4,r2,12
   17de0:	31800084 	addi	r6,r6,2
   17de4:	318d883a 	add	r6,r6,r6
   17de8:	318d883a 	add	r6,r6,r6
   17dec:	1023883a 	mov	r17,r2
   17df0:	000fc800 	call	fc80 <memcpy>
   17df4:	98000a26 	beq	r19,zero,17e20 <__multadd+0x140>
   17df8:	98c00117 	ldw	r3,4(r19)
   17dfc:	a0801317 	ldw	r2,76(r20)
   17e00:	18c7883a 	add	r3,r3,r3
   17e04:	18c7883a 	add	r3,r3,r3
   17e08:	10c5883a 	add	r2,r2,r3
   17e0c:	10c00017 	ldw	r3,0(r2)
   17e10:	98c00015 	stw	r3,0(r19)
   17e14:	14c00015 	stw	r19,0(r2)
   17e18:	8827883a 	mov	r19,r17
   17e1c:	003fd606 	br	17d78 <__alt_data_end+0xfc017d78>
   17e20:	8827883a 	mov	r19,r17
   17e24:	003fd406 	br	17d78 <__alt_data_end+0xfc017d78>

00017e28 <__s2b>:
   17e28:	defff904 	addi	sp,sp,-28
   17e2c:	dc400115 	stw	r17,4(sp)
   17e30:	dc000015 	stw	r16,0(sp)
   17e34:	2023883a 	mov	r17,r4
   17e38:	2821883a 	mov	r16,r5
   17e3c:	39000204 	addi	r4,r7,8
   17e40:	01400244 	movi	r5,9
   17e44:	dcc00315 	stw	r19,12(sp)
   17e48:	dc800215 	stw	r18,8(sp)
   17e4c:	dfc00615 	stw	ra,24(sp)
   17e50:	dd400515 	stw	r21,20(sp)
   17e54:	dd000415 	stw	r20,16(sp)
   17e58:	3825883a 	mov	r18,r7
   17e5c:	3027883a 	mov	r19,r6
   17e60:	000d72c0 	call	d72c <__divsi3>
   17e64:	00c00044 	movi	r3,1
   17e68:	000b883a 	mov	r5,zero
   17e6c:	1880030e 	bge	r3,r2,17e7c <__s2b+0x54>
   17e70:	18c7883a 	add	r3,r3,r3
   17e74:	29400044 	addi	r5,r5,1
   17e78:	18bffd16 	blt	r3,r2,17e70 <__alt_data_end+0xfc017e70>
   17e7c:	8809883a 	mov	r4,r17
   17e80:	0017c100 	call	17c10 <_Balloc>
   17e84:	d8c00717 	ldw	r3,28(sp)
   17e88:	10c00515 	stw	r3,20(r2)
   17e8c:	00c00044 	movi	r3,1
   17e90:	10c00415 	stw	r3,16(r2)
   17e94:	00c00244 	movi	r3,9
   17e98:	1cc0210e 	bge	r3,r19,17f20 <__s2b+0xf8>
   17e9c:	80eb883a 	add	r21,r16,r3
   17ea0:	a829883a 	mov	r20,r21
   17ea4:	84e1883a 	add	r16,r16,r19
   17ea8:	a1c00007 	ldb	r7,0(r20)
   17eac:	01800284 	movi	r6,10
   17eb0:	a5000044 	addi	r20,r20,1
   17eb4:	100b883a 	mov	r5,r2
   17eb8:	39fff404 	addi	r7,r7,-48
   17ebc:	8809883a 	mov	r4,r17
   17ec0:	0017ce00 	call	17ce0 <__multadd>
   17ec4:	a43ff81e 	bne	r20,r16,17ea8 <__alt_data_end+0xfc017ea8>
   17ec8:	ace1883a 	add	r16,r21,r19
   17ecc:	843ffe04 	addi	r16,r16,-8
   17ed0:	9c800a0e 	bge	r19,r18,17efc <__s2b+0xd4>
   17ed4:	94e5c83a 	sub	r18,r18,r19
   17ed8:	84a5883a 	add	r18,r16,r18
   17edc:	81c00007 	ldb	r7,0(r16)
   17ee0:	01800284 	movi	r6,10
   17ee4:	84000044 	addi	r16,r16,1
   17ee8:	100b883a 	mov	r5,r2
   17eec:	39fff404 	addi	r7,r7,-48
   17ef0:	8809883a 	mov	r4,r17
   17ef4:	0017ce00 	call	17ce0 <__multadd>
   17ef8:	84bff81e 	bne	r16,r18,17edc <__alt_data_end+0xfc017edc>
   17efc:	dfc00617 	ldw	ra,24(sp)
   17f00:	dd400517 	ldw	r21,20(sp)
   17f04:	dd000417 	ldw	r20,16(sp)
   17f08:	dcc00317 	ldw	r19,12(sp)
   17f0c:	dc800217 	ldw	r18,8(sp)
   17f10:	dc400117 	ldw	r17,4(sp)
   17f14:	dc000017 	ldw	r16,0(sp)
   17f18:	dec00704 	addi	sp,sp,28
   17f1c:	f800283a 	ret
   17f20:	84000284 	addi	r16,r16,10
   17f24:	1827883a 	mov	r19,r3
   17f28:	003fe906 	br	17ed0 <__alt_data_end+0xfc017ed0>

00017f2c <__hi0bits>:
   17f2c:	20bfffec 	andhi	r2,r4,65535
   17f30:	1000141e 	bne	r2,zero,17f84 <__hi0bits+0x58>
   17f34:	2008943a 	slli	r4,r4,16
   17f38:	00800404 	movi	r2,16
   17f3c:	20ffc02c 	andhi	r3,r4,65280
   17f40:	1800021e 	bne	r3,zero,17f4c <__hi0bits+0x20>
   17f44:	2008923a 	slli	r4,r4,8
   17f48:	10800204 	addi	r2,r2,8
   17f4c:	20fc002c 	andhi	r3,r4,61440
   17f50:	1800021e 	bne	r3,zero,17f5c <__hi0bits+0x30>
   17f54:	2008913a 	slli	r4,r4,4
   17f58:	10800104 	addi	r2,r2,4
   17f5c:	20f0002c 	andhi	r3,r4,49152
   17f60:	1800031e 	bne	r3,zero,17f70 <__hi0bits+0x44>
   17f64:	2109883a 	add	r4,r4,r4
   17f68:	10800084 	addi	r2,r2,2
   17f6c:	2109883a 	add	r4,r4,r4
   17f70:	20000316 	blt	r4,zero,17f80 <__hi0bits+0x54>
   17f74:	2110002c 	andhi	r4,r4,16384
   17f78:	2000041e 	bne	r4,zero,17f8c <__hi0bits+0x60>
   17f7c:	00800804 	movi	r2,32
   17f80:	f800283a 	ret
   17f84:	0005883a 	mov	r2,zero
   17f88:	003fec06 	br	17f3c <__alt_data_end+0xfc017f3c>
   17f8c:	10800044 	addi	r2,r2,1
   17f90:	f800283a 	ret

00017f94 <__lo0bits>:
   17f94:	20c00017 	ldw	r3,0(r4)
   17f98:	188001cc 	andi	r2,r3,7
   17f9c:	10000826 	beq	r2,zero,17fc0 <__lo0bits+0x2c>
   17fa0:	1880004c 	andi	r2,r3,1
   17fa4:	1000211e 	bne	r2,zero,1802c <__lo0bits+0x98>
   17fa8:	1880008c 	andi	r2,r3,2
   17fac:	1000211e 	bne	r2,zero,18034 <__lo0bits+0xa0>
   17fb0:	1806d0ba 	srli	r3,r3,2
   17fb4:	00800084 	movi	r2,2
   17fb8:	20c00015 	stw	r3,0(r4)
   17fbc:	f800283a 	ret
   17fc0:	18bfffcc 	andi	r2,r3,65535
   17fc4:	10001326 	beq	r2,zero,18014 <__lo0bits+0x80>
   17fc8:	0005883a 	mov	r2,zero
   17fcc:	19403fcc 	andi	r5,r3,255
   17fd0:	2800021e 	bne	r5,zero,17fdc <__lo0bits+0x48>
   17fd4:	1806d23a 	srli	r3,r3,8
   17fd8:	10800204 	addi	r2,r2,8
   17fdc:	194003cc 	andi	r5,r3,15
   17fe0:	2800021e 	bne	r5,zero,17fec <__lo0bits+0x58>
   17fe4:	1806d13a 	srli	r3,r3,4
   17fe8:	10800104 	addi	r2,r2,4
   17fec:	194000cc 	andi	r5,r3,3
   17ff0:	2800021e 	bne	r5,zero,17ffc <__lo0bits+0x68>
   17ff4:	1806d0ba 	srli	r3,r3,2
   17ff8:	10800084 	addi	r2,r2,2
   17ffc:	1940004c 	andi	r5,r3,1
   18000:	2800081e 	bne	r5,zero,18024 <__lo0bits+0x90>
   18004:	1806d07a 	srli	r3,r3,1
   18008:	1800051e 	bne	r3,zero,18020 <__lo0bits+0x8c>
   1800c:	00800804 	movi	r2,32
   18010:	f800283a 	ret
   18014:	1806d43a 	srli	r3,r3,16
   18018:	00800404 	movi	r2,16
   1801c:	003feb06 	br	17fcc <__alt_data_end+0xfc017fcc>
   18020:	10800044 	addi	r2,r2,1
   18024:	20c00015 	stw	r3,0(r4)
   18028:	f800283a 	ret
   1802c:	0005883a 	mov	r2,zero
   18030:	f800283a 	ret
   18034:	1806d07a 	srli	r3,r3,1
   18038:	00800044 	movi	r2,1
   1803c:	20c00015 	stw	r3,0(r4)
   18040:	f800283a 	ret

00018044 <__i2b>:
   18044:	defffd04 	addi	sp,sp,-12
   18048:	dc000015 	stw	r16,0(sp)
   1804c:	04000044 	movi	r16,1
   18050:	dc400115 	stw	r17,4(sp)
   18054:	2823883a 	mov	r17,r5
   18058:	800b883a 	mov	r5,r16
   1805c:	dfc00215 	stw	ra,8(sp)
   18060:	0017c100 	call	17c10 <_Balloc>
   18064:	14400515 	stw	r17,20(r2)
   18068:	14000415 	stw	r16,16(r2)
   1806c:	dfc00217 	ldw	ra,8(sp)
   18070:	dc400117 	ldw	r17,4(sp)
   18074:	dc000017 	ldw	r16,0(sp)
   18078:	dec00304 	addi	sp,sp,12
   1807c:	f800283a 	ret

00018080 <__multiply>:
   18080:	deffef04 	addi	sp,sp,-68
   18084:	dc400815 	stw	r17,32(sp)
   18088:	dc000715 	stw	r16,28(sp)
   1808c:	34400417 	ldw	r17,16(r6)
   18090:	2c000417 	ldw	r16,16(r5)
   18094:	dd800d15 	stw	r22,52(sp)
   18098:	dc800915 	stw	r18,36(sp)
   1809c:	dfc01015 	stw	ra,64(sp)
   180a0:	df000f15 	stw	fp,60(sp)
   180a4:	ddc00e15 	stw	r23,56(sp)
   180a8:	dd400c15 	stw	r21,48(sp)
   180ac:	dd000b15 	stw	r20,44(sp)
   180b0:	dcc00a15 	stw	r19,40(sp)
   180b4:	2825883a 	mov	r18,r5
   180b8:	302d883a 	mov	r22,r6
   180bc:	8440050e 	bge	r16,r17,180d4 <__multiply+0x54>
   180c0:	8007883a 	mov	r3,r16
   180c4:	3025883a 	mov	r18,r6
   180c8:	8821883a 	mov	r16,r17
   180cc:	282d883a 	mov	r22,r5
   180d0:	1823883a 	mov	r17,r3
   180d4:	90800217 	ldw	r2,8(r18)
   180d8:	8447883a 	add	r3,r16,r17
   180dc:	d8c00215 	stw	r3,8(sp)
   180e0:	91400117 	ldw	r5,4(r18)
   180e4:	10c0010e 	bge	r2,r3,180ec <__multiply+0x6c>
   180e8:	29400044 	addi	r5,r5,1
   180ec:	0017c100 	call	17c10 <_Balloc>
   180f0:	d8c00217 	ldw	r3,8(sp)
   180f4:	d8800615 	stw	r2,24(sp)
   180f8:	18eb883a 	add	r21,r3,r3
   180fc:	ad6b883a 	add	r21,r21,r21
   18100:	10c00504 	addi	r3,r2,20
   18104:	1d6b883a 	add	r21,r3,r21
   18108:	d8c00115 	stw	r3,4(sp)
   1810c:	dd400315 	stw	r21,12(sp)
   18110:	1805883a 	mov	r2,r3
   18114:	1d40042e 	bgeu	r3,r21,18128 <__multiply+0xa8>
   18118:	d8c00317 	ldw	r3,12(sp)
   1811c:	10000015 	stw	zero,0(r2)
   18120:	10800104 	addi	r2,r2,4
   18124:	10fffc36 	bltu	r2,r3,18118 <__alt_data_end+0xfc018118>
   18128:	8c63883a 	add	r17,r17,r17
   1812c:	b5800504 	addi	r22,r22,20
   18130:	8c63883a 	add	r17,r17,r17
   18134:	94800504 	addi	r18,r18,20
   18138:	8421883a 	add	r16,r16,r16
   1813c:	b463883a 	add	r17,r22,r17
   18140:	8421883a 	add	r16,r16,r16
   18144:	dd800015 	stw	r22,0(sp)
   18148:	dc800415 	stw	r18,16(sp)
   1814c:	dc400515 	stw	r17,20(sp)
   18150:	9429883a 	add	r20,r18,r16
   18154:	b4404f2e 	bgeu	r22,r17,18294 <__multiply+0x214>
   18158:	d8c00017 	ldw	r3,0(sp)
   1815c:	1c800017 	ldw	r18,0(r3)
   18160:	947fffcc 	andi	r17,r18,65535
   18164:	88001e26 	beq	r17,zero,181e0 <__multiply+0x160>
   18168:	dd800117 	ldw	r22,4(sp)
   1816c:	dd400417 	ldw	r21,16(sp)
   18170:	0027883a 	mov	r19,zero
   18174:	ac800017 	ldw	r18,0(r21)
   18178:	b4000017 	ldw	r16,0(r22)
   1817c:	880b883a 	mov	r5,r17
   18180:	913fffcc 	andi	r4,r18,65535
   18184:	000d8e00 	call	d8e0 <__mulsi3>
   18188:	9008d43a 	srli	r4,r18,16
   1818c:	84bfffcc 	andi	r18,r16,65535
   18190:	1485883a 	add	r2,r2,r18
   18194:	14e5883a 	add	r18,r2,r19
   18198:	8020d43a 	srli	r16,r16,16
   1819c:	9026d43a 	srli	r19,r18,16
   181a0:	880b883a 	mov	r5,r17
   181a4:	000d8e00 	call	d8e0 <__mulsi3>
   181a8:	1405883a 	add	r2,r2,r16
   181ac:	14e1883a 	add	r16,r2,r19
   181b0:	90ffffcc 	andi	r3,r18,65535
   181b4:	8024943a 	slli	r18,r16,16
   181b8:	ad400104 	addi	r21,r21,4
   181bc:	b005883a 	mov	r2,r22
   181c0:	90c6b03a 	or	r3,r18,r3
   181c4:	b0c00015 	stw	r3,0(r22)
   181c8:	8026d43a 	srli	r19,r16,16
   181cc:	b5800104 	addi	r22,r22,4
   181d0:	ad3fe836 	bltu	r21,r20,18174 <__alt_data_end+0xfc018174>
   181d4:	d8c00017 	ldw	r3,0(sp)
   181d8:	14c00115 	stw	r19,4(r2)
   181dc:	1c800017 	ldw	r18,0(r3)
   181e0:	9024d43a 	srli	r18,r18,16
   181e4:	90002226 	beq	r18,zero,18270 <__multiply+0x1f0>
   181e8:	d8c00117 	ldw	r3,4(sp)
   181ec:	dd800417 	ldw	r22,16(sp)
   181f0:	002f883a 	mov	r23,zero
   181f4:	1f000017 	ldw	fp,0(r3)
   181f8:	1823883a 	mov	r17,r3
   181fc:	182b883a 	mov	r21,r3
   18200:	e021883a 	mov	r16,fp
   18204:	00000106 	br	1820c <__multiply+0x18c>
   18208:	982b883a 	mov	r21,r19
   1820c:	b100000b 	ldhu	r4,0(r22)
   18210:	8020d43a 	srli	r16,r16,16
   18214:	900b883a 	mov	r5,r18
   18218:	000d8e00 	call	d8e0 <__mulsi3>
   1821c:	1405883a 	add	r2,r2,r16
   18220:	15ef883a 	add	r23,r2,r23
   18224:	b804943a 	slli	r2,r23,16
   18228:	e0ffffcc 	andi	r3,fp,65535
   1822c:	8c400104 	addi	r17,r17,4
   18230:	10c6b03a 	or	r3,r2,r3
   18234:	88ffff15 	stw	r3,-4(r17)
   18238:	b5800104 	addi	r22,r22,4
   1823c:	b13fff17 	ldw	r4,-4(r22)
   18240:	acc00104 	addi	r19,r21,4
   18244:	900b883a 	mov	r5,r18
   18248:	2008d43a 	srli	r4,r4,16
   1824c:	9c000017 	ldw	r16,0(r19)
   18250:	000d8e00 	call	d8e0 <__mulsi3>
   18254:	b806d43a 	srli	r3,r23,16
   18258:	813fffcc 	andi	r4,r16,65535
   1825c:	1105883a 	add	r2,r2,r4
   18260:	10f9883a 	add	fp,r2,r3
   18264:	e02ed43a 	srli	r23,fp,16
   18268:	b53fe736 	bltu	r22,r20,18208 <__alt_data_end+0xfc018208>
   1826c:	af000115 	stw	fp,4(r21)
   18270:	d8c00017 	ldw	r3,0(sp)
   18274:	d9000517 	ldw	r4,20(sp)
   18278:	18c00104 	addi	r3,r3,4
   1827c:	d8c00015 	stw	r3,0(sp)
   18280:	d8c00117 	ldw	r3,4(sp)
   18284:	18c00104 	addi	r3,r3,4
   18288:	d8c00115 	stw	r3,4(sp)
   1828c:	d8c00017 	ldw	r3,0(sp)
   18290:	193fb136 	bltu	r3,r4,18158 <__alt_data_end+0xfc018158>
   18294:	d8c00217 	ldw	r3,8(sp)
   18298:	00c00c0e 	bge	zero,r3,182cc <__multiply+0x24c>
   1829c:	d8c00317 	ldw	r3,12(sp)
   182a0:	18bfff17 	ldw	r2,-4(r3)
   182a4:	1d7fff04 	addi	r21,r3,-4
   182a8:	10000326 	beq	r2,zero,182b8 <__multiply+0x238>
   182ac:	00000706 	br	182cc <__multiply+0x24c>
   182b0:	a8800017 	ldw	r2,0(r21)
   182b4:	1000051e 	bne	r2,zero,182cc <__multiply+0x24c>
   182b8:	d8c00217 	ldw	r3,8(sp)
   182bc:	ad7fff04 	addi	r21,r21,-4
   182c0:	18ffffc4 	addi	r3,r3,-1
   182c4:	d8c00215 	stw	r3,8(sp)
   182c8:	183ff91e 	bne	r3,zero,182b0 <__alt_data_end+0xfc0182b0>
   182cc:	d8c00617 	ldw	r3,24(sp)
   182d0:	d9000217 	ldw	r4,8(sp)
   182d4:	1805883a 	mov	r2,r3
   182d8:	19000415 	stw	r4,16(r3)
   182dc:	dfc01017 	ldw	ra,64(sp)
   182e0:	df000f17 	ldw	fp,60(sp)
   182e4:	ddc00e17 	ldw	r23,56(sp)
   182e8:	dd800d17 	ldw	r22,52(sp)
   182ec:	dd400c17 	ldw	r21,48(sp)
   182f0:	dd000b17 	ldw	r20,44(sp)
   182f4:	dcc00a17 	ldw	r19,40(sp)
   182f8:	dc800917 	ldw	r18,36(sp)
   182fc:	dc400817 	ldw	r17,32(sp)
   18300:	dc000717 	ldw	r16,28(sp)
   18304:	dec01104 	addi	sp,sp,68
   18308:	f800283a 	ret

0001830c <__pow5mult>:
   1830c:	defffa04 	addi	sp,sp,-24
   18310:	dcc00315 	stw	r19,12(sp)
   18314:	dc000015 	stw	r16,0(sp)
   18318:	dfc00515 	stw	ra,20(sp)
   1831c:	dd000415 	stw	r20,16(sp)
   18320:	dc800215 	stw	r18,8(sp)
   18324:	dc400115 	stw	r17,4(sp)
   18328:	308000cc 	andi	r2,r6,3
   1832c:	3021883a 	mov	r16,r6
   18330:	2027883a 	mov	r19,r4
   18334:	10002f1e 	bne	r2,zero,183f4 <__pow5mult+0xe8>
   18338:	2825883a 	mov	r18,r5
   1833c:	8021d0ba 	srai	r16,r16,2
   18340:	80001a26 	beq	r16,zero,183ac <__pow5mult+0xa0>
   18344:	9c401217 	ldw	r17,72(r19)
   18348:	8800061e 	bne	r17,zero,18364 <__pow5mult+0x58>
   1834c:	00003406 	br	18420 <__pow5mult+0x114>
   18350:	8021d07a 	srai	r16,r16,1
   18354:	80001526 	beq	r16,zero,183ac <__pow5mult+0xa0>
   18358:	88800017 	ldw	r2,0(r17)
   1835c:	10001c26 	beq	r2,zero,183d0 <__pow5mult+0xc4>
   18360:	1023883a 	mov	r17,r2
   18364:	8080004c 	andi	r2,r16,1
   18368:	103ff926 	beq	r2,zero,18350 <__alt_data_end+0xfc018350>
   1836c:	880d883a 	mov	r6,r17
   18370:	900b883a 	mov	r5,r18
   18374:	9809883a 	mov	r4,r19
   18378:	00180800 	call	18080 <__multiply>
   1837c:	90001b26 	beq	r18,zero,183ec <__pow5mult+0xe0>
   18380:	91000117 	ldw	r4,4(r18)
   18384:	98c01317 	ldw	r3,76(r19)
   18388:	8021d07a 	srai	r16,r16,1
   1838c:	2109883a 	add	r4,r4,r4
   18390:	2109883a 	add	r4,r4,r4
   18394:	1907883a 	add	r3,r3,r4
   18398:	19000017 	ldw	r4,0(r3)
   1839c:	91000015 	stw	r4,0(r18)
   183a0:	1c800015 	stw	r18,0(r3)
   183a4:	1025883a 	mov	r18,r2
   183a8:	803feb1e 	bne	r16,zero,18358 <__alt_data_end+0xfc018358>
   183ac:	9005883a 	mov	r2,r18
   183b0:	dfc00517 	ldw	ra,20(sp)
   183b4:	dd000417 	ldw	r20,16(sp)
   183b8:	dcc00317 	ldw	r19,12(sp)
   183bc:	dc800217 	ldw	r18,8(sp)
   183c0:	dc400117 	ldw	r17,4(sp)
   183c4:	dc000017 	ldw	r16,0(sp)
   183c8:	dec00604 	addi	sp,sp,24
   183cc:	f800283a 	ret
   183d0:	880d883a 	mov	r6,r17
   183d4:	880b883a 	mov	r5,r17
   183d8:	9809883a 	mov	r4,r19
   183dc:	00180800 	call	18080 <__multiply>
   183e0:	88800015 	stw	r2,0(r17)
   183e4:	10000015 	stw	zero,0(r2)
   183e8:	003fdd06 	br	18360 <__alt_data_end+0xfc018360>
   183ec:	1025883a 	mov	r18,r2
   183f0:	003fd706 	br	18350 <__alt_data_end+0xfc018350>
   183f4:	10bfffc4 	addi	r2,r2,-1
   183f8:	1085883a 	add	r2,r2,r2
   183fc:	00c000f4 	movhi	r3,3
   18400:	18ee5f04 	addi	r3,r3,-18052
   18404:	1085883a 	add	r2,r2,r2
   18408:	1885883a 	add	r2,r3,r2
   1840c:	11800017 	ldw	r6,0(r2)
   18410:	000f883a 	mov	r7,zero
   18414:	0017ce00 	call	17ce0 <__multadd>
   18418:	1025883a 	mov	r18,r2
   1841c:	003fc706 	br	1833c <__alt_data_end+0xfc01833c>
   18420:	05000044 	movi	r20,1
   18424:	a00b883a 	mov	r5,r20
   18428:	9809883a 	mov	r4,r19
   1842c:	0017c100 	call	17c10 <_Balloc>
   18430:	1023883a 	mov	r17,r2
   18434:	00809c44 	movi	r2,625
   18438:	88800515 	stw	r2,20(r17)
   1843c:	8d000415 	stw	r20,16(r17)
   18440:	9c401215 	stw	r17,72(r19)
   18444:	88000015 	stw	zero,0(r17)
   18448:	003fc606 	br	18364 <__alt_data_end+0xfc018364>

0001844c <__lshift>:
   1844c:	defff904 	addi	sp,sp,-28
   18450:	dd400515 	stw	r21,20(sp)
   18454:	dcc00315 	stw	r19,12(sp)
   18458:	302bd17a 	srai	r21,r6,5
   1845c:	2cc00417 	ldw	r19,16(r5)
   18460:	28800217 	ldw	r2,8(r5)
   18464:	dd000415 	stw	r20,16(sp)
   18468:	ace7883a 	add	r19,r21,r19
   1846c:	dc800215 	stw	r18,8(sp)
   18470:	dc400115 	stw	r17,4(sp)
   18474:	dc000015 	stw	r16,0(sp)
   18478:	dfc00615 	stw	ra,24(sp)
   1847c:	9c000044 	addi	r16,r19,1
   18480:	2823883a 	mov	r17,r5
   18484:	3029883a 	mov	r20,r6
   18488:	2025883a 	mov	r18,r4
   1848c:	29400117 	ldw	r5,4(r5)
   18490:	1400030e 	bge	r2,r16,184a0 <__lshift+0x54>
   18494:	1085883a 	add	r2,r2,r2
   18498:	29400044 	addi	r5,r5,1
   1849c:	143ffd16 	blt	r2,r16,18494 <__alt_data_end+0xfc018494>
   184a0:	9009883a 	mov	r4,r18
   184a4:	0017c100 	call	17c10 <_Balloc>
   184a8:	10c00504 	addi	r3,r2,20
   184ac:	0540070e 	bge	zero,r21,184cc <__lshift+0x80>
   184b0:	ad6b883a 	add	r21,r21,r21
   184b4:	ad6b883a 	add	r21,r21,r21
   184b8:	1809883a 	mov	r4,r3
   184bc:	1d47883a 	add	r3,r3,r21
   184c0:	20000015 	stw	zero,0(r4)
   184c4:	21000104 	addi	r4,r4,4
   184c8:	193ffd1e 	bne	r3,r4,184c0 <__alt_data_end+0xfc0184c0>
   184cc:	8a000417 	ldw	r8,16(r17)
   184d0:	89000504 	addi	r4,r17,20
   184d4:	a18007cc 	andi	r6,r20,31
   184d8:	4211883a 	add	r8,r8,r8
   184dc:	4211883a 	add	r8,r8,r8
   184e0:	2211883a 	add	r8,r4,r8
   184e4:	30002326 	beq	r6,zero,18574 <__lshift+0x128>
   184e8:	02400804 	movi	r9,32
   184ec:	4993c83a 	sub	r9,r9,r6
   184f0:	000b883a 	mov	r5,zero
   184f4:	21c00017 	ldw	r7,0(r4)
   184f8:	1815883a 	mov	r10,r3
   184fc:	18c00104 	addi	r3,r3,4
   18500:	398e983a 	sll	r7,r7,r6
   18504:	21000104 	addi	r4,r4,4
   18508:	394ab03a 	or	r5,r7,r5
   1850c:	197fff15 	stw	r5,-4(r3)
   18510:	217fff17 	ldw	r5,-4(r4)
   18514:	2a4ad83a 	srl	r5,r5,r9
   18518:	223ff636 	bltu	r4,r8,184f4 <__alt_data_end+0xfc0184f4>
   1851c:	51400115 	stw	r5,4(r10)
   18520:	28001a1e 	bne	r5,zero,1858c <__lshift+0x140>
   18524:	843fffc4 	addi	r16,r16,-1
   18528:	14000415 	stw	r16,16(r2)
   1852c:	88000826 	beq	r17,zero,18550 <__lshift+0x104>
   18530:	89000117 	ldw	r4,4(r17)
   18534:	90c01317 	ldw	r3,76(r18)
   18538:	2109883a 	add	r4,r4,r4
   1853c:	2109883a 	add	r4,r4,r4
   18540:	1907883a 	add	r3,r3,r4
   18544:	19000017 	ldw	r4,0(r3)
   18548:	89000015 	stw	r4,0(r17)
   1854c:	1c400015 	stw	r17,0(r3)
   18550:	dfc00617 	ldw	ra,24(sp)
   18554:	dd400517 	ldw	r21,20(sp)
   18558:	dd000417 	ldw	r20,16(sp)
   1855c:	dcc00317 	ldw	r19,12(sp)
   18560:	dc800217 	ldw	r18,8(sp)
   18564:	dc400117 	ldw	r17,4(sp)
   18568:	dc000017 	ldw	r16,0(sp)
   1856c:	dec00704 	addi	sp,sp,28
   18570:	f800283a 	ret
   18574:	21400017 	ldw	r5,0(r4)
   18578:	18c00104 	addi	r3,r3,4
   1857c:	21000104 	addi	r4,r4,4
   18580:	197fff15 	stw	r5,-4(r3)
   18584:	223ffb36 	bltu	r4,r8,18574 <__alt_data_end+0xfc018574>
   18588:	003fe606 	br	18524 <__alt_data_end+0xfc018524>
   1858c:	9c000084 	addi	r16,r19,2
   18590:	003fe406 	br	18524 <__alt_data_end+0xfc018524>

00018594 <__mcmp>:
   18594:	20800417 	ldw	r2,16(r4)
   18598:	28c00417 	ldw	r3,16(r5)
   1859c:	10c5c83a 	sub	r2,r2,r3
   185a0:	1000111e 	bne	r2,zero,185e8 <__mcmp+0x54>
   185a4:	18c7883a 	add	r3,r3,r3
   185a8:	18c7883a 	add	r3,r3,r3
   185ac:	21000504 	addi	r4,r4,20
   185b0:	29400504 	addi	r5,r5,20
   185b4:	20c5883a 	add	r2,r4,r3
   185b8:	28cb883a 	add	r5,r5,r3
   185bc:	00000106 	br	185c4 <__mcmp+0x30>
   185c0:	20800a2e 	bgeu	r4,r2,185ec <__mcmp+0x58>
   185c4:	10bfff04 	addi	r2,r2,-4
   185c8:	297fff04 	addi	r5,r5,-4
   185cc:	11800017 	ldw	r6,0(r2)
   185d0:	28c00017 	ldw	r3,0(r5)
   185d4:	30fffa26 	beq	r6,r3,185c0 <__alt_data_end+0xfc0185c0>
   185d8:	30c00236 	bltu	r6,r3,185e4 <__mcmp+0x50>
   185dc:	00800044 	movi	r2,1
   185e0:	f800283a 	ret
   185e4:	00bfffc4 	movi	r2,-1
   185e8:	f800283a 	ret
   185ec:	0005883a 	mov	r2,zero
   185f0:	f800283a 	ret

000185f4 <__mdiff>:
   185f4:	28c00417 	ldw	r3,16(r5)
   185f8:	30800417 	ldw	r2,16(r6)
   185fc:	defffa04 	addi	sp,sp,-24
   18600:	dcc00315 	stw	r19,12(sp)
   18604:	dc800215 	stw	r18,8(sp)
   18608:	dfc00515 	stw	ra,20(sp)
   1860c:	dd000415 	stw	r20,16(sp)
   18610:	dc400115 	stw	r17,4(sp)
   18614:	dc000015 	stw	r16,0(sp)
   18618:	1887c83a 	sub	r3,r3,r2
   1861c:	2825883a 	mov	r18,r5
   18620:	3027883a 	mov	r19,r6
   18624:	1800141e 	bne	r3,zero,18678 <__mdiff+0x84>
   18628:	1085883a 	add	r2,r2,r2
   1862c:	1085883a 	add	r2,r2,r2
   18630:	2a000504 	addi	r8,r5,20
   18634:	34000504 	addi	r16,r6,20
   18638:	4087883a 	add	r3,r8,r2
   1863c:	8085883a 	add	r2,r16,r2
   18640:	00000106 	br	18648 <__mdiff+0x54>
   18644:	40c0592e 	bgeu	r8,r3,187ac <__mdiff+0x1b8>
   18648:	18ffff04 	addi	r3,r3,-4
   1864c:	10bfff04 	addi	r2,r2,-4
   18650:	19c00017 	ldw	r7,0(r3)
   18654:	11400017 	ldw	r5,0(r2)
   18658:	397ffa26 	beq	r7,r5,18644 <__alt_data_end+0xfc018644>
   1865c:	3940592e 	bgeu	r7,r5,187c4 <__mdiff+0x1d0>
   18660:	9005883a 	mov	r2,r18
   18664:	4023883a 	mov	r17,r8
   18668:	9825883a 	mov	r18,r19
   1866c:	05000044 	movi	r20,1
   18670:	1027883a 	mov	r19,r2
   18674:	00000406 	br	18688 <__mdiff+0x94>
   18678:	18005616 	blt	r3,zero,187d4 <__mdiff+0x1e0>
   1867c:	34400504 	addi	r17,r6,20
   18680:	2c000504 	addi	r16,r5,20
   18684:	0029883a 	mov	r20,zero
   18688:	91400117 	ldw	r5,4(r18)
   1868c:	0017c100 	call	17c10 <_Balloc>
   18690:	92400417 	ldw	r9,16(r18)
   18694:	9b000417 	ldw	r12,16(r19)
   18698:	12c00504 	addi	r11,r2,20
   1869c:	4a51883a 	add	r8,r9,r9
   186a0:	6319883a 	add	r12,r12,r12
   186a4:	4211883a 	add	r8,r8,r8
   186a8:	6319883a 	add	r12,r12,r12
   186ac:	15000315 	stw	r20,12(r2)
   186b0:	8211883a 	add	r8,r16,r8
   186b4:	8b19883a 	add	r12,r17,r12
   186b8:	0007883a 	mov	r3,zero
   186bc:	81400017 	ldw	r5,0(r16)
   186c0:	89c00017 	ldw	r7,0(r17)
   186c4:	59800104 	addi	r6,r11,4
   186c8:	293fffcc 	andi	r4,r5,65535
   186cc:	20c7883a 	add	r3,r4,r3
   186d0:	393fffcc 	andi	r4,r7,65535
   186d4:	1909c83a 	sub	r4,r3,r4
   186d8:	280ad43a 	srli	r5,r5,16
   186dc:	380ed43a 	srli	r7,r7,16
   186e0:	2007d43a 	srai	r3,r4,16
   186e4:	213fffcc 	andi	r4,r4,65535
   186e8:	29cbc83a 	sub	r5,r5,r7
   186ec:	28c7883a 	add	r3,r5,r3
   186f0:	180a943a 	slli	r5,r3,16
   186f4:	8c400104 	addi	r17,r17,4
   186f8:	84000104 	addi	r16,r16,4
   186fc:	2908b03a 	or	r4,r5,r4
   18700:	59000015 	stw	r4,0(r11)
   18704:	1807d43a 	srai	r3,r3,16
   18708:	3015883a 	mov	r10,r6
   1870c:	3017883a 	mov	r11,r6
   18710:	8b3fea36 	bltu	r17,r12,186bc <__alt_data_end+0xfc0186bc>
   18714:	8200162e 	bgeu	r16,r8,18770 <__mdiff+0x17c>
   18718:	8017883a 	mov	r11,r16
   1871c:	59400017 	ldw	r5,0(r11)
   18720:	31800104 	addi	r6,r6,4
   18724:	5ac00104 	addi	r11,r11,4
   18728:	293fffcc 	andi	r4,r5,65535
   1872c:	20c7883a 	add	r3,r4,r3
   18730:	280ed43a 	srli	r7,r5,16
   18734:	180bd43a 	srai	r5,r3,16
   18738:	193fffcc 	andi	r4,r3,65535
   1873c:	3947883a 	add	r3,r7,r5
   18740:	180a943a 	slli	r5,r3,16
   18744:	1807d43a 	srai	r3,r3,16
   18748:	2908b03a 	or	r4,r5,r4
   1874c:	313fff15 	stw	r4,-4(r6)
   18750:	5a3ff236 	bltu	r11,r8,1871c <__alt_data_end+0xfc01871c>
   18754:	0406303a 	nor	r3,zero,r16
   18758:	1a07883a 	add	r3,r3,r8
   1875c:	1806d0ba 	srli	r3,r3,2
   18760:	18c00044 	addi	r3,r3,1
   18764:	18c7883a 	add	r3,r3,r3
   18768:	18c7883a 	add	r3,r3,r3
   1876c:	50d5883a 	add	r10,r10,r3
   18770:	50ffff04 	addi	r3,r10,-4
   18774:	2000041e 	bne	r4,zero,18788 <__mdiff+0x194>
   18778:	18ffff04 	addi	r3,r3,-4
   1877c:	19000017 	ldw	r4,0(r3)
   18780:	4a7fffc4 	addi	r9,r9,-1
   18784:	203ffc26 	beq	r4,zero,18778 <__alt_data_end+0xfc018778>
   18788:	12400415 	stw	r9,16(r2)
   1878c:	dfc00517 	ldw	ra,20(sp)
   18790:	dd000417 	ldw	r20,16(sp)
   18794:	dcc00317 	ldw	r19,12(sp)
   18798:	dc800217 	ldw	r18,8(sp)
   1879c:	dc400117 	ldw	r17,4(sp)
   187a0:	dc000017 	ldw	r16,0(sp)
   187a4:	dec00604 	addi	sp,sp,24
   187a8:	f800283a 	ret
   187ac:	000b883a 	mov	r5,zero
   187b0:	0017c100 	call	17c10 <_Balloc>
   187b4:	00c00044 	movi	r3,1
   187b8:	10c00415 	stw	r3,16(r2)
   187bc:	10000515 	stw	zero,20(r2)
   187c0:	003ff206 	br	1878c <__alt_data_end+0xfc01878c>
   187c4:	8023883a 	mov	r17,r16
   187c8:	0029883a 	mov	r20,zero
   187cc:	4021883a 	mov	r16,r8
   187d0:	003fad06 	br	18688 <__alt_data_end+0xfc018688>
   187d4:	9005883a 	mov	r2,r18
   187d8:	94400504 	addi	r17,r18,20
   187dc:	9c000504 	addi	r16,r19,20
   187e0:	9825883a 	mov	r18,r19
   187e4:	05000044 	movi	r20,1
   187e8:	1027883a 	mov	r19,r2
   187ec:	003fa606 	br	18688 <__alt_data_end+0xfc018688>

000187f0 <__ulp>:
   187f0:	295ffc2c 	andhi	r5,r5,32752
   187f4:	00bf3034 	movhi	r2,64704
   187f8:	2887883a 	add	r3,r5,r2
   187fc:	00c0020e 	bge	zero,r3,18808 <__ulp+0x18>
   18800:	0005883a 	mov	r2,zero
   18804:	f800283a 	ret
   18808:	00c7c83a 	sub	r3,zero,r3
   1880c:	1807d53a 	srai	r3,r3,20
   18810:	008004c4 	movi	r2,19
   18814:	10c00b0e 	bge	r2,r3,18844 <__ulp+0x54>
   18818:	18bffb04 	addi	r2,r3,-20
   1881c:	01000784 	movi	r4,30
   18820:	0007883a 	mov	r3,zero
   18824:	20800516 	blt	r4,r2,1883c <__ulp+0x4c>
   18828:	010007c4 	movi	r4,31
   1882c:	2089c83a 	sub	r4,r4,r2
   18830:	00800044 	movi	r2,1
   18834:	1104983a 	sll	r2,r2,r4
   18838:	f800283a 	ret
   1883c:	00800044 	movi	r2,1
   18840:	f800283a 	ret
   18844:	01400234 	movhi	r5,8
   18848:	28c7d83a 	sra	r3,r5,r3
   1884c:	0005883a 	mov	r2,zero
   18850:	f800283a 	ret

00018854 <__b2d>:
   18854:	defffa04 	addi	sp,sp,-24
   18858:	dc000015 	stw	r16,0(sp)
   1885c:	24000417 	ldw	r16,16(r4)
   18860:	dc400115 	stw	r17,4(sp)
   18864:	24400504 	addi	r17,r4,20
   18868:	8421883a 	add	r16,r16,r16
   1886c:	8421883a 	add	r16,r16,r16
   18870:	8c21883a 	add	r16,r17,r16
   18874:	dc800215 	stw	r18,8(sp)
   18878:	84bfff17 	ldw	r18,-4(r16)
   1887c:	dd000415 	stw	r20,16(sp)
   18880:	dcc00315 	stw	r19,12(sp)
   18884:	9009883a 	mov	r4,r18
   18888:	2829883a 	mov	r20,r5
   1888c:	dfc00515 	stw	ra,20(sp)
   18890:	0017f2c0 	call	17f2c <__hi0bits>
   18894:	00c00804 	movi	r3,32
   18898:	1889c83a 	sub	r4,r3,r2
   1889c:	a1000015 	stw	r4,0(r20)
   188a0:	01000284 	movi	r4,10
   188a4:	84ffff04 	addi	r19,r16,-4
   188a8:	20801216 	blt	r4,r2,188f4 <__b2d+0xa0>
   188ac:	018002c4 	movi	r6,11
   188b0:	308dc83a 	sub	r6,r6,r2
   188b4:	9186d83a 	srl	r3,r18,r6
   188b8:	18cffc34 	orhi	r3,r3,16368
   188bc:	8cc0212e 	bgeu	r17,r19,18944 <__b2d+0xf0>
   188c0:	813ffe17 	ldw	r4,-8(r16)
   188c4:	218cd83a 	srl	r6,r4,r6
   188c8:	10800544 	addi	r2,r2,21
   188cc:	9084983a 	sll	r2,r18,r2
   188d0:	1184b03a 	or	r2,r2,r6
   188d4:	dfc00517 	ldw	ra,20(sp)
   188d8:	dd000417 	ldw	r20,16(sp)
   188dc:	dcc00317 	ldw	r19,12(sp)
   188e0:	dc800217 	ldw	r18,8(sp)
   188e4:	dc400117 	ldw	r17,4(sp)
   188e8:	dc000017 	ldw	r16,0(sp)
   188ec:	dec00604 	addi	sp,sp,24
   188f0:	f800283a 	ret
   188f4:	8cc00f2e 	bgeu	r17,r19,18934 <__b2d+0xe0>
   188f8:	117ffd44 	addi	r5,r2,-11
   188fc:	80bffe17 	ldw	r2,-8(r16)
   18900:	28000e26 	beq	r5,zero,1893c <__b2d+0xe8>
   18904:	1949c83a 	sub	r4,r3,r5
   18908:	9164983a 	sll	r18,r18,r5
   1890c:	1106d83a 	srl	r3,r2,r4
   18910:	81bffe04 	addi	r6,r16,-8
   18914:	948ffc34 	orhi	r18,r18,16368
   18918:	90c6b03a 	or	r3,r18,r3
   1891c:	89800e2e 	bgeu	r17,r6,18958 <__b2d+0x104>
   18920:	81bffd17 	ldw	r6,-12(r16)
   18924:	1144983a 	sll	r2,r2,r5
   18928:	310ad83a 	srl	r5,r6,r4
   1892c:	2884b03a 	or	r2,r5,r2
   18930:	003fe806 	br	188d4 <__alt_data_end+0xfc0188d4>
   18934:	10bffd44 	addi	r2,r2,-11
   18938:	1000041e 	bne	r2,zero,1894c <__b2d+0xf8>
   1893c:	90cffc34 	orhi	r3,r18,16368
   18940:	003fe406 	br	188d4 <__alt_data_end+0xfc0188d4>
   18944:	000d883a 	mov	r6,zero
   18948:	003fdf06 	br	188c8 <__alt_data_end+0xfc0188c8>
   1894c:	90a4983a 	sll	r18,r18,r2
   18950:	0005883a 	mov	r2,zero
   18954:	003ff906 	br	1893c <__alt_data_end+0xfc01893c>
   18958:	1144983a 	sll	r2,r2,r5
   1895c:	003fdd06 	br	188d4 <__alt_data_end+0xfc0188d4>

00018960 <__d2b>:
   18960:	defff804 	addi	sp,sp,-32
   18964:	dc000215 	stw	r16,8(sp)
   18968:	3021883a 	mov	r16,r6
   1896c:	dc400315 	stw	r17,12(sp)
   18970:	8022907a 	slli	r17,r16,1
   18974:	dd000615 	stw	r20,24(sp)
   18978:	2829883a 	mov	r20,r5
   1897c:	01400044 	movi	r5,1
   18980:	dcc00515 	stw	r19,20(sp)
   18984:	dc800415 	stw	r18,16(sp)
   18988:	dfc00715 	stw	ra,28(sp)
   1898c:	3825883a 	mov	r18,r7
   18990:	8822d57a 	srli	r17,r17,21
   18994:	0017c100 	call	17c10 <_Balloc>
   18998:	1027883a 	mov	r19,r2
   1899c:	00800434 	movhi	r2,16
   189a0:	10bfffc4 	addi	r2,r2,-1
   189a4:	808c703a 	and	r6,r16,r2
   189a8:	88000126 	beq	r17,zero,189b0 <__d2b+0x50>
   189ac:	31800434 	orhi	r6,r6,16
   189b0:	d9800015 	stw	r6,0(sp)
   189b4:	a0002426 	beq	r20,zero,18a48 <__d2b+0xe8>
   189b8:	d9000104 	addi	r4,sp,4
   189bc:	dd000115 	stw	r20,4(sp)
   189c0:	0017f940 	call	17f94 <__lo0bits>
   189c4:	d8c00017 	ldw	r3,0(sp)
   189c8:	10002f1e 	bne	r2,zero,18a88 <__d2b+0x128>
   189cc:	d9000117 	ldw	r4,4(sp)
   189d0:	99000515 	stw	r4,20(r19)
   189d4:	1821003a 	cmpeq	r16,r3,zero
   189d8:	01000084 	movi	r4,2
   189dc:	2421c83a 	sub	r16,r4,r16
   189e0:	98c00615 	stw	r3,24(r19)
   189e4:	9c000415 	stw	r16,16(r19)
   189e8:	88001f1e 	bne	r17,zero,18a68 <__d2b+0x108>
   189ec:	10bef384 	addi	r2,r2,-1074
   189f0:	90800015 	stw	r2,0(r18)
   189f4:	00900034 	movhi	r2,16384
   189f8:	10bfffc4 	addi	r2,r2,-1
   189fc:	8085883a 	add	r2,r16,r2
   18a00:	1085883a 	add	r2,r2,r2
   18a04:	1085883a 	add	r2,r2,r2
   18a08:	9885883a 	add	r2,r19,r2
   18a0c:	11000517 	ldw	r4,20(r2)
   18a10:	8020917a 	slli	r16,r16,5
   18a14:	0017f2c0 	call	17f2c <__hi0bits>
   18a18:	d8c00817 	ldw	r3,32(sp)
   18a1c:	8085c83a 	sub	r2,r16,r2
   18a20:	18800015 	stw	r2,0(r3)
   18a24:	9805883a 	mov	r2,r19
   18a28:	dfc00717 	ldw	ra,28(sp)
   18a2c:	dd000617 	ldw	r20,24(sp)
   18a30:	dcc00517 	ldw	r19,20(sp)
   18a34:	dc800417 	ldw	r18,16(sp)
   18a38:	dc400317 	ldw	r17,12(sp)
   18a3c:	dc000217 	ldw	r16,8(sp)
   18a40:	dec00804 	addi	sp,sp,32
   18a44:	f800283a 	ret
   18a48:	d809883a 	mov	r4,sp
   18a4c:	0017f940 	call	17f94 <__lo0bits>
   18a50:	d8c00017 	ldw	r3,0(sp)
   18a54:	04000044 	movi	r16,1
   18a58:	9c000415 	stw	r16,16(r19)
   18a5c:	98c00515 	stw	r3,20(r19)
   18a60:	10800804 	addi	r2,r2,32
   18a64:	883fe126 	beq	r17,zero,189ec <__alt_data_end+0xfc0189ec>
   18a68:	00c00d44 	movi	r3,53
   18a6c:	8c7ef344 	addi	r17,r17,-1075
   18a70:	88a3883a 	add	r17,r17,r2
   18a74:	1885c83a 	sub	r2,r3,r2
   18a78:	d8c00817 	ldw	r3,32(sp)
   18a7c:	94400015 	stw	r17,0(r18)
   18a80:	18800015 	stw	r2,0(r3)
   18a84:	003fe706 	br	18a24 <__alt_data_end+0xfc018a24>
   18a88:	01000804 	movi	r4,32
   18a8c:	2089c83a 	sub	r4,r4,r2
   18a90:	1908983a 	sll	r4,r3,r4
   18a94:	d9400117 	ldw	r5,4(sp)
   18a98:	1886d83a 	srl	r3,r3,r2
   18a9c:	2148b03a 	or	r4,r4,r5
   18aa0:	99000515 	stw	r4,20(r19)
   18aa4:	d8c00015 	stw	r3,0(sp)
   18aa8:	003fca06 	br	189d4 <__alt_data_end+0xfc0189d4>

00018aac <__ratio>:
   18aac:	defff904 	addi	sp,sp,-28
   18ab0:	dc400315 	stw	r17,12(sp)
   18ab4:	2823883a 	mov	r17,r5
   18ab8:	d9400104 	addi	r5,sp,4
   18abc:	dfc00615 	stw	ra,24(sp)
   18ac0:	dcc00515 	stw	r19,20(sp)
   18ac4:	dc800415 	stw	r18,16(sp)
   18ac8:	2027883a 	mov	r19,r4
   18acc:	dc000215 	stw	r16,8(sp)
   18ad0:	00188540 	call	18854 <__b2d>
   18ad4:	d80b883a 	mov	r5,sp
   18ad8:	8809883a 	mov	r4,r17
   18adc:	1025883a 	mov	r18,r2
   18ae0:	1821883a 	mov	r16,r3
   18ae4:	00188540 	call	18854 <__b2d>
   18ae8:	8a000417 	ldw	r8,16(r17)
   18aec:	99000417 	ldw	r4,16(r19)
   18af0:	d9400117 	ldw	r5,4(sp)
   18af4:	2209c83a 	sub	r4,r4,r8
   18af8:	2010917a 	slli	r8,r4,5
   18afc:	d9000017 	ldw	r4,0(sp)
   18b00:	2909c83a 	sub	r4,r5,r4
   18b04:	4109883a 	add	r4,r8,r4
   18b08:	01000e0e 	bge	zero,r4,18b44 <__ratio+0x98>
   18b0c:	2008953a 	slli	r4,r4,20
   18b10:	2421883a 	add	r16,r4,r16
   18b14:	100d883a 	mov	r6,r2
   18b18:	180f883a 	mov	r7,r3
   18b1c:	9009883a 	mov	r4,r18
   18b20:	800b883a 	mov	r5,r16
   18b24:	001df640 	call	1df64 <__divdf3>
   18b28:	dfc00617 	ldw	ra,24(sp)
   18b2c:	dcc00517 	ldw	r19,20(sp)
   18b30:	dc800417 	ldw	r18,16(sp)
   18b34:	dc400317 	ldw	r17,12(sp)
   18b38:	dc000217 	ldw	r16,8(sp)
   18b3c:	dec00704 	addi	sp,sp,28
   18b40:	f800283a 	ret
   18b44:	2008953a 	slli	r4,r4,20
   18b48:	1907c83a 	sub	r3,r3,r4
   18b4c:	003ff106 	br	18b14 <__alt_data_end+0xfc018b14>

00018b50 <_mprec_log10>:
   18b50:	defffe04 	addi	sp,sp,-8
   18b54:	dc000015 	stw	r16,0(sp)
   18b58:	dfc00115 	stw	ra,4(sp)
   18b5c:	008005c4 	movi	r2,23
   18b60:	2021883a 	mov	r16,r4
   18b64:	11000d0e 	bge	r2,r4,18b9c <_mprec_log10+0x4c>
   18b68:	0005883a 	mov	r2,zero
   18b6c:	00cffc34 	movhi	r3,16368
   18b70:	843fffc4 	addi	r16,r16,-1
   18b74:	000d883a 	mov	r6,zero
   18b78:	01d00934 	movhi	r7,16420
   18b7c:	1009883a 	mov	r4,r2
   18b80:	180b883a 	mov	r5,r3
   18b84:	001eb8c0 	call	1eb8c <__muldf3>
   18b88:	803ff91e 	bne	r16,zero,18b70 <__alt_data_end+0xfc018b70>
   18b8c:	dfc00117 	ldw	ra,4(sp)
   18b90:	dc000017 	ldw	r16,0(sp)
   18b94:	dec00204 	addi	sp,sp,8
   18b98:	f800283a 	ret
   18b9c:	202090fa 	slli	r16,r4,3
   18ba0:	008000f4 	movhi	r2,3
   18ba4:	10ae7604 	addi	r2,r2,-17960
   18ba8:	1421883a 	add	r16,r2,r16
   18bac:	80800017 	ldw	r2,0(r16)
   18bb0:	80c00117 	ldw	r3,4(r16)
   18bb4:	dfc00117 	ldw	ra,4(sp)
   18bb8:	dc000017 	ldw	r16,0(sp)
   18bbc:	dec00204 	addi	sp,sp,8
   18bc0:	f800283a 	ret

00018bc4 <__copybits>:
   18bc4:	297fffc4 	addi	r5,r5,-1
   18bc8:	280fd17a 	srai	r7,r5,5
   18bcc:	30c00417 	ldw	r3,16(r6)
   18bd0:	30800504 	addi	r2,r6,20
   18bd4:	39c00044 	addi	r7,r7,1
   18bd8:	18c7883a 	add	r3,r3,r3
   18bdc:	39cf883a 	add	r7,r7,r7
   18be0:	18c7883a 	add	r3,r3,r3
   18be4:	39cf883a 	add	r7,r7,r7
   18be8:	10c7883a 	add	r3,r2,r3
   18bec:	21cf883a 	add	r7,r4,r7
   18bf0:	10c00d2e 	bgeu	r2,r3,18c28 <__copybits+0x64>
   18bf4:	200b883a 	mov	r5,r4
   18bf8:	12000017 	ldw	r8,0(r2)
   18bfc:	29400104 	addi	r5,r5,4
   18c00:	10800104 	addi	r2,r2,4
   18c04:	2a3fff15 	stw	r8,-4(r5)
   18c08:	10fffb36 	bltu	r2,r3,18bf8 <__alt_data_end+0xfc018bf8>
   18c0c:	1985c83a 	sub	r2,r3,r6
   18c10:	10bffac4 	addi	r2,r2,-21
   18c14:	1004d0ba 	srli	r2,r2,2
   18c18:	10800044 	addi	r2,r2,1
   18c1c:	1085883a 	add	r2,r2,r2
   18c20:	1085883a 	add	r2,r2,r2
   18c24:	2089883a 	add	r4,r4,r2
   18c28:	21c0032e 	bgeu	r4,r7,18c38 <__copybits+0x74>
   18c2c:	20000015 	stw	zero,0(r4)
   18c30:	21000104 	addi	r4,r4,4
   18c34:	21fffd36 	bltu	r4,r7,18c2c <__alt_data_end+0xfc018c2c>
   18c38:	f800283a 	ret

00018c3c <__any_on>:
   18c3c:	20c00417 	ldw	r3,16(r4)
   18c40:	2805d17a 	srai	r2,r5,5
   18c44:	21000504 	addi	r4,r4,20
   18c48:	18800d0e 	bge	r3,r2,18c80 <__any_on+0x44>
   18c4c:	18c7883a 	add	r3,r3,r3
   18c50:	18c7883a 	add	r3,r3,r3
   18c54:	20c7883a 	add	r3,r4,r3
   18c58:	20c0192e 	bgeu	r4,r3,18cc0 <__any_on+0x84>
   18c5c:	18bfff17 	ldw	r2,-4(r3)
   18c60:	18ffff04 	addi	r3,r3,-4
   18c64:	1000041e 	bne	r2,zero,18c78 <__any_on+0x3c>
   18c68:	20c0142e 	bgeu	r4,r3,18cbc <__any_on+0x80>
   18c6c:	18ffff04 	addi	r3,r3,-4
   18c70:	19400017 	ldw	r5,0(r3)
   18c74:	283ffc26 	beq	r5,zero,18c68 <__alt_data_end+0xfc018c68>
   18c78:	00800044 	movi	r2,1
   18c7c:	f800283a 	ret
   18c80:	10c00a0e 	bge	r2,r3,18cac <__any_on+0x70>
   18c84:	1085883a 	add	r2,r2,r2
   18c88:	1085883a 	add	r2,r2,r2
   18c8c:	294007cc 	andi	r5,r5,31
   18c90:	2087883a 	add	r3,r4,r2
   18c94:	283ff026 	beq	r5,zero,18c58 <__alt_data_end+0xfc018c58>
   18c98:	19800017 	ldw	r6,0(r3)
   18c9c:	3144d83a 	srl	r2,r6,r5
   18ca0:	114a983a 	sll	r5,r2,r5
   18ca4:	317ff41e 	bne	r6,r5,18c78 <__alt_data_end+0xfc018c78>
   18ca8:	003feb06 	br	18c58 <__alt_data_end+0xfc018c58>
   18cac:	1085883a 	add	r2,r2,r2
   18cb0:	1085883a 	add	r2,r2,r2
   18cb4:	2087883a 	add	r3,r4,r2
   18cb8:	003fe706 	br	18c58 <__alt_data_end+0xfc018c58>
   18cbc:	f800283a 	ret
   18cc0:	0005883a 	mov	r2,zero
   18cc4:	f800283a 	ret

00018cc8 <_putc_r>:
   18cc8:	defffc04 	addi	sp,sp,-16
   18ccc:	dc000215 	stw	r16,8(sp)
   18cd0:	dfc00315 	stw	ra,12(sp)
   18cd4:	2021883a 	mov	r16,r4
   18cd8:	20000226 	beq	r4,zero,18ce4 <_putc_r+0x1c>
   18cdc:	20800e17 	ldw	r2,56(r4)
   18ce0:	10001b26 	beq	r2,zero,18d50 <_putc_r+0x88>
   18ce4:	30800217 	ldw	r2,8(r6)
   18ce8:	10bfffc4 	addi	r2,r2,-1
   18cec:	30800215 	stw	r2,8(r6)
   18cf0:	10000a16 	blt	r2,zero,18d1c <_putc_r+0x54>
   18cf4:	30800017 	ldw	r2,0(r6)
   18cf8:	11400005 	stb	r5,0(r2)
   18cfc:	30800017 	ldw	r2,0(r6)
   18d00:	10c00044 	addi	r3,r2,1
   18d04:	30c00015 	stw	r3,0(r6)
   18d08:	10800003 	ldbu	r2,0(r2)
   18d0c:	dfc00317 	ldw	ra,12(sp)
   18d10:	dc000217 	ldw	r16,8(sp)
   18d14:	dec00404 	addi	sp,sp,16
   18d18:	f800283a 	ret
   18d1c:	30c00617 	ldw	r3,24(r6)
   18d20:	10c00616 	blt	r2,r3,18d3c <_putc_r+0x74>
   18d24:	30800017 	ldw	r2,0(r6)
   18d28:	00c00284 	movi	r3,10
   18d2c:	11400005 	stb	r5,0(r2)
   18d30:	30800017 	ldw	r2,0(r6)
   18d34:	11400003 	ldbu	r5,0(r2)
   18d38:	28fff11e 	bne	r5,r3,18d00 <__alt_data_end+0xfc018d00>
   18d3c:	8009883a 	mov	r4,r16
   18d40:	dfc00317 	ldw	ra,12(sp)
   18d44:	dc000217 	ldw	r16,8(sp)
   18d48:	dec00404 	addi	sp,sp,16
   18d4c:	001c1ac1 	jmpi	1c1ac <__swbuf_r>
   18d50:	d9400015 	stw	r5,0(sp)
   18d54:	d9800115 	stw	r6,4(sp)
   18d58:	0016c640 	call	16c64 <__sinit>
   18d5c:	d9800117 	ldw	r6,4(sp)
   18d60:	d9400017 	ldw	r5,0(sp)
   18d64:	003fdf06 	br	18ce4 <__alt_data_end+0xfc018ce4>

00018d68 <putc>:
   18d68:	008000f4 	movhi	r2,3
   18d6c:	defffc04 	addi	sp,sp,-16
   18d70:	10bb3c04 	addi	r2,r2,-4880
   18d74:	dc000115 	stw	r16,4(sp)
   18d78:	14000017 	ldw	r16,0(r2)
   18d7c:	dc400215 	stw	r17,8(sp)
   18d80:	dfc00315 	stw	ra,12(sp)
   18d84:	2023883a 	mov	r17,r4
   18d88:	80000226 	beq	r16,zero,18d94 <putc+0x2c>
   18d8c:	80800e17 	ldw	r2,56(r16)
   18d90:	10001a26 	beq	r2,zero,18dfc <putc+0x94>
   18d94:	28800217 	ldw	r2,8(r5)
   18d98:	10bfffc4 	addi	r2,r2,-1
   18d9c:	28800215 	stw	r2,8(r5)
   18da0:	10000b16 	blt	r2,zero,18dd0 <putc+0x68>
   18da4:	28800017 	ldw	r2,0(r5)
   18da8:	14400005 	stb	r17,0(r2)
   18dac:	28800017 	ldw	r2,0(r5)
   18db0:	10c00044 	addi	r3,r2,1
   18db4:	28c00015 	stw	r3,0(r5)
   18db8:	10800003 	ldbu	r2,0(r2)
   18dbc:	dfc00317 	ldw	ra,12(sp)
   18dc0:	dc400217 	ldw	r17,8(sp)
   18dc4:	dc000117 	ldw	r16,4(sp)
   18dc8:	dec00404 	addi	sp,sp,16
   18dcc:	f800283a 	ret
   18dd0:	28c00617 	ldw	r3,24(r5)
   18dd4:	10c00e16 	blt	r2,r3,18e10 <putc+0xa8>
   18dd8:	28800017 	ldw	r2,0(r5)
   18ddc:	01000284 	movi	r4,10
   18de0:	14400005 	stb	r17,0(r2)
   18de4:	28800017 	ldw	r2,0(r5)
   18de8:	10c00003 	ldbu	r3,0(r2)
   18dec:	193ff01e 	bne	r3,r4,18db0 <__alt_data_end+0xfc018db0>
   18df0:	280d883a 	mov	r6,r5
   18df4:	180b883a 	mov	r5,r3
   18df8:	00000706 	br	18e18 <putc+0xb0>
   18dfc:	8009883a 	mov	r4,r16
   18e00:	d9400015 	stw	r5,0(sp)
   18e04:	0016c640 	call	16c64 <__sinit>
   18e08:	d9400017 	ldw	r5,0(sp)
   18e0c:	003fe106 	br	18d94 <__alt_data_end+0xfc018d94>
   18e10:	280d883a 	mov	r6,r5
   18e14:	880b883a 	mov	r5,r17
   18e18:	8009883a 	mov	r4,r16
   18e1c:	dfc00317 	ldw	ra,12(sp)
   18e20:	dc400217 	ldw	r17,8(sp)
   18e24:	dc000117 	ldw	r16,4(sp)
   18e28:	dec00404 	addi	sp,sp,16
   18e2c:	001c1ac1 	jmpi	1c1ac <__swbuf_r>

00018e30 <_realloc_r>:
   18e30:	defff604 	addi	sp,sp,-40
   18e34:	dc800215 	stw	r18,8(sp)
   18e38:	dfc00915 	stw	ra,36(sp)
   18e3c:	df000815 	stw	fp,32(sp)
   18e40:	ddc00715 	stw	r23,28(sp)
   18e44:	dd800615 	stw	r22,24(sp)
   18e48:	dd400515 	stw	r21,20(sp)
   18e4c:	dd000415 	stw	r20,16(sp)
   18e50:	dcc00315 	stw	r19,12(sp)
   18e54:	dc400115 	stw	r17,4(sp)
   18e58:	dc000015 	stw	r16,0(sp)
   18e5c:	3025883a 	mov	r18,r6
   18e60:	2800b726 	beq	r5,zero,19140 <_realloc_r+0x310>
   18e64:	282b883a 	mov	r21,r5
   18e68:	2029883a 	mov	r20,r4
   18e6c:	00206540 	call	20654 <__malloc_lock>
   18e70:	a8bfff17 	ldw	r2,-4(r21)
   18e74:	043fff04 	movi	r16,-4
   18e78:	90c002c4 	addi	r3,r18,11
   18e7c:	01000584 	movi	r4,22
   18e80:	acfffe04 	addi	r19,r21,-8
   18e84:	1420703a 	and	r16,r2,r16
   18e88:	20c0332e 	bgeu	r4,r3,18f58 <_realloc_r+0x128>
   18e8c:	047ffe04 	movi	r17,-8
   18e90:	1c62703a 	and	r17,r3,r17
   18e94:	8807883a 	mov	r3,r17
   18e98:	88005816 	blt	r17,zero,18ffc <_realloc_r+0x1cc>
   18e9c:	8c805736 	bltu	r17,r18,18ffc <_realloc_r+0x1cc>
   18ea0:	80c0300e 	bge	r16,r3,18f64 <_realloc_r+0x134>
   18ea4:	070000f4 	movhi	fp,3
   18ea8:	e72fd904 	addi	fp,fp,-16540
   18eac:	e1c00217 	ldw	r7,8(fp)
   18eb0:	9c09883a 	add	r4,r19,r16
   18eb4:	22000117 	ldw	r8,4(r4)
   18eb8:	21c06326 	beq	r4,r7,19048 <_realloc_r+0x218>
   18ebc:	017fff84 	movi	r5,-2
   18ec0:	414a703a 	and	r5,r8,r5
   18ec4:	214b883a 	add	r5,r4,r5
   18ec8:	29800117 	ldw	r6,4(r5)
   18ecc:	3180004c 	andi	r6,r6,1
   18ed0:	30003f26 	beq	r6,zero,18fd0 <_realloc_r+0x1a0>
   18ed4:	1080004c 	andi	r2,r2,1
   18ed8:	10008326 	beq	r2,zero,190e8 <_realloc_r+0x2b8>
   18edc:	900b883a 	mov	r5,r18
   18ee0:	a009883a 	mov	r4,r20
   18ee4:	000f4740 	call	f474 <_malloc_r>
   18ee8:	1025883a 	mov	r18,r2
   18eec:	10011e26 	beq	r2,zero,19368 <_realloc_r+0x538>
   18ef0:	a93fff17 	ldw	r4,-4(r21)
   18ef4:	10fffe04 	addi	r3,r2,-8
   18ef8:	00bfff84 	movi	r2,-2
   18efc:	2084703a 	and	r2,r4,r2
   18f00:	9885883a 	add	r2,r19,r2
   18f04:	1880ee26 	beq	r3,r2,192c0 <_realloc_r+0x490>
   18f08:	81bfff04 	addi	r6,r16,-4
   18f0c:	00800904 	movi	r2,36
   18f10:	1180b836 	bltu	r2,r6,191f4 <_realloc_r+0x3c4>
   18f14:	00c004c4 	movi	r3,19
   18f18:	19809636 	bltu	r3,r6,19174 <_realloc_r+0x344>
   18f1c:	9005883a 	mov	r2,r18
   18f20:	a807883a 	mov	r3,r21
   18f24:	19000017 	ldw	r4,0(r3)
   18f28:	11000015 	stw	r4,0(r2)
   18f2c:	19000117 	ldw	r4,4(r3)
   18f30:	11000115 	stw	r4,4(r2)
   18f34:	18c00217 	ldw	r3,8(r3)
   18f38:	10c00215 	stw	r3,8(r2)
   18f3c:	a80b883a 	mov	r5,r21
   18f40:	a009883a 	mov	r4,r20
   18f44:	0016dd80 	call	16dd8 <_free_r>
   18f48:	a009883a 	mov	r4,r20
   18f4c:	00206780 	call	20678 <__malloc_unlock>
   18f50:	9005883a 	mov	r2,r18
   18f54:	00001206 	br	18fa0 <_realloc_r+0x170>
   18f58:	00c00404 	movi	r3,16
   18f5c:	1823883a 	mov	r17,r3
   18f60:	003fce06 	br	18e9c <__alt_data_end+0xfc018e9c>
   18f64:	a825883a 	mov	r18,r21
   18f68:	8445c83a 	sub	r2,r16,r17
   18f6c:	00c003c4 	movi	r3,15
   18f70:	18802636 	bltu	r3,r2,1900c <_realloc_r+0x1dc>
   18f74:	99800117 	ldw	r6,4(r19)
   18f78:	9c07883a 	add	r3,r19,r16
   18f7c:	3180004c 	andi	r6,r6,1
   18f80:	3420b03a 	or	r16,r6,r16
   18f84:	9c000115 	stw	r16,4(r19)
   18f88:	18800117 	ldw	r2,4(r3)
   18f8c:	10800054 	ori	r2,r2,1
   18f90:	18800115 	stw	r2,4(r3)
   18f94:	a009883a 	mov	r4,r20
   18f98:	00206780 	call	20678 <__malloc_unlock>
   18f9c:	9005883a 	mov	r2,r18
   18fa0:	dfc00917 	ldw	ra,36(sp)
   18fa4:	df000817 	ldw	fp,32(sp)
   18fa8:	ddc00717 	ldw	r23,28(sp)
   18fac:	dd800617 	ldw	r22,24(sp)
   18fb0:	dd400517 	ldw	r21,20(sp)
   18fb4:	dd000417 	ldw	r20,16(sp)
   18fb8:	dcc00317 	ldw	r19,12(sp)
   18fbc:	dc800217 	ldw	r18,8(sp)
   18fc0:	dc400117 	ldw	r17,4(sp)
   18fc4:	dc000017 	ldw	r16,0(sp)
   18fc8:	dec00a04 	addi	sp,sp,40
   18fcc:	f800283a 	ret
   18fd0:	017fff04 	movi	r5,-4
   18fd4:	414a703a 	and	r5,r8,r5
   18fd8:	814d883a 	add	r6,r16,r5
   18fdc:	30c01f16 	blt	r6,r3,1905c <_realloc_r+0x22c>
   18fe0:	20800317 	ldw	r2,12(r4)
   18fe4:	20c00217 	ldw	r3,8(r4)
   18fe8:	a825883a 	mov	r18,r21
   18fec:	3021883a 	mov	r16,r6
   18ff0:	18800315 	stw	r2,12(r3)
   18ff4:	10c00215 	stw	r3,8(r2)
   18ff8:	003fdb06 	br	18f68 <__alt_data_end+0xfc018f68>
   18ffc:	00800304 	movi	r2,12
   19000:	a0800015 	stw	r2,0(r20)
   19004:	0005883a 	mov	r2,zero
   19008:	003fe506 	br	18fa0 <__alt_data_end+0xfc018fa0>
   1900c:	98c00117 	ldw	r3,4(r19)
   19010:	9c4b883a 	add	r5,r19,r17
   19014:	11000054 	ori	r4,r2,1
   19018:	18c0004c 	andi	r3,r3,1
   1901c:	1c62b03a 	or	r17,r3,r17
   19020:	9c400115 	stw	r17,4(r19)
   19024:	29000115 	stw	r4,4(r5)
   19028:	2885883a 	add	r2,r5,r2
   1902c:	10c00117 	ldw	r3,4(r2)
   19030:	29400204 	addi	r5,r5,8
   19034:	a009883a 	mov	r4,r20
   19038:	18c00054 	ori	r3,r3,1
   1903c:	10c00115 	stw	r3,4(r2)
   19040:	0016dd80 	call	16dd8 <_free_r>
   19044:	003fd306 	br	18f94 <__alt_data_end+0xfc018f94>
   19048:	017fff04 	movi	r5,-4
   1904c:	414a703a 	and	r5,r8,r5
   19050:	89800404 	addi	r6,r17,16
   19054:	8151883a 	add	r8,r16,r5
   19058:	4180590e 	bge	r8,r6,191c0 <_realloc_r+0x390>
   1905c:	1080004c 	andi	r2,r2,1
   19060:	103f9e1e 	bne	r2,zero,18edc <__alt_data_end+0xfc018edc>
   19064:	adbffe17 	ldw	r22,-8(r21)
   19068:	00bfff04 	movi	r2,-4
   1906c:	9dadc83a 	sub	r22,r19,r22
   19070:	b1800117 	ldw	r6,4(r22)
   19074:	3084703a 	and	r2,r6,r2
   19078:	20002026 	beq	r4,zero,190fc <_realloc_r+0x2cc>
   1907c:	80af883a 	add	r23,r16,r2
   19080:	b96f883a 	add	r23,r23,r5
   19084:	21c05f26 	beq	r4,r7,19204 <_realloc_r+0x3d4>
   19088:	b8c01c16 	blt	r23,r3,190fc <_realloc_r+0x2cc>
   1908c:	20800317 	ldw	r2,12(r4)
   19090:	20c00217 	ldw	r3,8(r4)
   19094:	81bfff04 	addi	r6,r16,-4
   19098:	01000904 	movi	r4,36
   1909c:	18800315 	stw	r2,12(r3)
   190a0:	10c00215 	stw	r3,8(r2)
   190a4:	b0c00217 	ldw	r3,8(r22)
   190a8:	b0800317 	ldw	r2,12(r22)
   190ac:	b4800204 	addi	r18,r22,8
   190b0:	18800315 	stw	r2,12(r3)
   190b4:	10c00215 	stw	r3,8(r2)
   190b8:	21801b36 	bltu	r4,r6,19128 <_realloc_r+0x2f8>
   190bc:	008004c4 	movi	r2,19
   190c0:	1180352e 	bgeu	r2,r6,19198 <_realloc_r+0x368>
   190c4:	a8800017 	ldw	r2,0(r21)
   190c8:	b0800215 	stw	r2,8(r22)
   190cc:	a8800117 	ldw	r2,4(r21)
   190d0:	b0800315 	stw	r2,12(r22)
   190d4:	008006c4 	movi	r2,27
   190d8:	11807f36 	bltu	r2,r6,192d8 <_realloc_r+0x4a8>
   190dc:	b0800404 	addi	r2,r22,16
   190e0:	ad400204 	addi	r21,r21,8
   190e4:	00002d06 	br	1919c <_realloc_r+0x36c>
   190e8:	adbffe17 	ldw	r22,-8(r21)
   190ec:	00bfff04 	movi	r2,-4
   190f0:	9dadc83a 	sub	r22,r19,r22
   190f4:	b1000117 	ldw	r4,4(r22)
   190f8:	2084703a 	and	r2,r4,r2
   190fc:	b03f7726 	beq	r22,zero,18edc <__alt_data_end+0xfc018edc>
   19100:	80af883a 	add	r23,r16,r2
   19104:	b8ff7516 	blt	r23,r3,18edc <__alt_data_end+0xfc018edc>
   19108:	b0800317 	ldw	r2,12(r22)
   1910c:	b0c00217 	ldw	r3,8(r22)
   19110:	81bfff04 	addi	r6,r16,-4
   19114:	01000904 	movi	r4,36
   19118:	18800315 	stw	r2,12(r3)
   1911c:	10c00215 	stw	r3,8(r2)
   19120:	b4800204 	addi	r18,r22,8
   19124:	21bfe52e 	bgeu	r4,r6,190bc <__alt_data_end+0xfc0190bc>
   19128:	a80b883a 	mov	r5,r21
   1912c:	9009883a 	mov	r4,r18
   19130:	0017ab40 	call	17ab4 <memmove>
   19134:	b821883a 	mov	r16,r23
   19138:	b027883a 	mov	r19,r22
   1913c:	003f8a06 	br	18f68 <__alt_data_end+0xfc018f68>
   19140:	300b883a 	mov	r5,r6
   19144:	dfc00917 	ldw	ra,36(sp)
   19148:	df000817 	ldw	fp,32(sp)
   1914c:	ddc00717 	ldw	r23,28(sp)
   19150:	dd800617 	ldw	r22,24(sp)
   19154:	dd400517 	ldw	r21,20(sp)
   19158:	dd000417 	ldw	r20,16(sp)
   1915c:	dcc00317 	ldw	r19,12(sp)
   19160:	dc800217 	ldw	r18,8(sp)
   19164:	dc400117 	ldw	r17,4(sp)
   19168:	dc000017 	ldw	r16,0(sp)
   1916c:	dec00a04 	addi	sp,sp,40
   19170:	000f4741 	jmpi	f474 <_malloc_r>
   19174:	a8c00017 	ldw	r3,0(r21)
   19178:	90c00015 	stw	r3,0(r18)
   1917c:	a8c00117 	ldw	r3,4(r21)
   19180:	90c00115 	stw	r3,4(r18)
   19184:	00c006c4 	movi	r3,27
   19188:	19804536 	bltu	r3,r6,192a0 <_realloc_r+0x470>
   1918c:	90800204 	addi	r2,r18,8
   19190:	a8c00204 	addi	r3,r21,8
   19194:	003f6306 	br	18f24 <__alt_data_end+0xfc018f24>
   19198:	9005883a 	mov	r2,r18
   1919c:	a8c00017 	ldw	r3,0(r21)
   191a0:	b821883a 	mov	r16,r23
   191a4:	b027883a 	mov	r19,r22
   191a8:	10c00015 	stw	r3,0(r2)
   191ac:	a8c00117 	ldw	r3,4(r21)
   191b0:	10c00115 	stw	r3,4(r2)
   191b4:	a8c00217 	ldw	r3,8(r21)
   191b8:	10c00215 	stw	r3,8(r2)
   191bc:	003f6a06 	br	18f68 <__alt_data_end+0xfc018f68>
   191c0:	9c67883a 	add	r19,r19,r17
   191c4:	4445c83a 	sub	r2,r8,r17
   191c8:	e4c00215 	stw	r19,8(fp)
   191cc:	10800054 	ori	r2,r2,1
   191d0:	98800115 	stw	r2,4(r19)
   191d4:	a8bfff17 	ldw	r2,-4(r21)
   191d8:	a009883a 	mov	r4,r20
   191dc:	1080004c 	andi	r2,r2,1
   191e0:	1462b03a 	or	r17,r2,r17
   191e4:	ac7fff15 	stw	r17,-4(r21)
   191e8:	00206780 	call	20678 <__malloc_unlock>
   191ec:	a805883a 	mov	r2,r21
   191f0:	003f6b06 	br	18fa0 <__alt_data_end+0xfc018fa0>
   191f4:	a80b883a 	mov	r5,r21
   191f8:	9009883a 	mov	r4,r18
   191fc:	0017ab40 	call	17ab4 <memmove>
   19200:	003f4e06 	br	18f3c <__alt_data_end+0xfc018f3c>
   19204:	89000404 	addi	r4,r17,16
   19208:	b93fbc16 	blt	r23,r4,190fc <__alt_data_end+0xfc0190fc>
   1920c:	b0800317 	ldw	r2,12(r22)
   19210:	b0c00217 	ldw	r3,8(r22)
   19214:	81bfff04 	addi	r6,r16,-4
   19218:	01000904 	movi	r4,36
   1921c:	18800315 	stw	r2,12(r3)
   19220:	10c00215 	stw	r3,8(r2)
   19224:	b4800204 	addi	r18,r22,8
   19228:	21804336 	bltu	r4,r6,19338 <_realloc_r+0x508>
   1922c:	008004c4 	movi	r2,19
   19230:	11803f2e 	bgeu	r2,r6,19330 <_realloc_r+0x500>
   19234:	a8800017 	ldw	r2,0(r21)
   19238:	b0800215 	stw	r2,8(r22)
   1923c:	a8800117 	ldw	r2,4(r21)
   19240:	b0800315 	stw	r2,12(r22)
   19244:	008006c4 	movi	r2,27
   19248:	11803f36 	bltu	r2,r6,19348 <_realloc_r+0x518>
   1924c:	b0800404 	addi	r2,r22,16
   19250:	ad400204 	addi	r21,r21,8
   19254:	a8c00017 	ldw	r3,0(r21)
   19258:	10c00015 	stw	r3,0(r2)
   1925c:	a8c00117 	ldw	r3,4(r21)
   19260:	10c00115 	stw	r3,4(r2)
   19264:	a8c00217 	ldw	r3,8(r21)
   19268:	10c00215 	stw	r3,8(r2)
   1926c:	b447883a 	add	r3,r22,r17
   19270:	bc45c83a 	sub	r2,r23,r17
   19274:	e0c00215 	stw	r3,8(fp)
   19278:	10800054 	ori	r2,r2,1
   1927c:	18800115 	stw	r2,4(r3)
   19280:	b0800117 	ldw	r2,4(r22)
   19284:	a009883a 	mov	r4,r20
   19288:	1080004c 	andi	r2,r2,1
   1928c:	1462b03a 	or	r17,r2,r17
   19290:	b4400115 	stw	r17,4(r22)
   19294:	00206780 	call	20678 <__malloc_unlock>
   19298:	9005883a 	mov	r2,r18
   1929c:	003f4006 	br	18fa0 <__alt_data_end+0xfc018fa0>
   192a0:	a8c00217 	ldw	r3,8(r21)
   192a4:	90c00215 	stw	r3,8(r18)
   192a8:	a8c00317 	ldw	r3,12(r21)
   192ac:	90c00315 	stw	r3,12(r18)
   192b0:	30801126 	beq	r6,r2,192f8 <_realloc_r+0x4c8>
   192b4:	90800404 	addi	r2,r18,16
   192b8:	a8c00404 	addi	r3,r21,16
   192bc:	003f1906 	br	18f24 <__alt_data_end+0xfc018f24>
   192c0:	90ffff17 	ldw	r3,-4(r18)
   192c4:	00bfff04 	movi	r2,-4
   192c8:	a825883a 	mov	r18,r21
   192cc:	1884703a 	and	r2,r3,r2
   192d0:	80a1883a 	add	r16,r16,r2
   192d4:	003f2406 	br	18f68 <__alt_data_end+0xfc018f68>
   192d8:	a8800217 	ldw	r2,8(r21)
   192dc:	b0800415 	stw	r2,16(r22)
   192e0:	a8800317 	ldw	r2,12(r21)
   192e4:	b0800515 	stw	r2,20(r22)
   192e8:	31000a26 	beq	r6,r4,19314 <_realloc_r+0x4e4>
   192ec:	b0800604 	addi	r2,r22,24
   192f0:	ad400404 	addi	r21,r21,16
   192f4:	003fa906 	br	1919c <__alt_data_end+0xfc01919c>
   192f8:	a9000417 	ldw	r4,16(r21)
   192fc:	90800604 	addi	r2,r18,24
   19300:	a8c00604 	addi	r3,r21,24
   19304:	91000415 	stw	r4,16(r18)
   19308:	a9000517 	ldw	r4,20(r21)
   1930c:	91000515 	stw	r4,20(r18)
   19310:	003f0406 	br	18f24 <__alt_data_end+0xfc018f24>
   19314:	a8c00417 	ldw	r3,16(r21)
   19318:	ad400604 	addi	r21,r21,24
   1931c:	b0800804 	addi	r2,r22,32
   19320:	b0c00615 	stw	r3,24(r22)
   19324:	a8ffff17 	ldw	r3,-4(r21)
   19328:	b0c00715 	stw	r3,28(r22)
   1932c:	003f9b06 	br	1919c <__alt_data_end+0xfc01919c>
   19330:	9005883a 	mov	r2,r18
   19334:	003fc706 	br	19254 <__alt_data_end+0xfc019254>
   19338:	a80b883a 	mov	r5,r21
   1933c:	9009883a 	mov	r4,r18
   19340:	0017ab40 	call	17ab4 <memmove>
   19344:	003fc906 	br	1926c <__alt_data_end+0xfc01926c>
   19348:	a8800217 	ldw	r2,8(r21)
   1934c:	b0800415 	stw	r2,16(r22)
   19350:	a8800317 	ldw	r2,12(r21)
   19354:	b0800515 	stw	r2,20(r22)
   19358:	31000726 	beq	r6,r4,19378 <_realloc_r+0x548>
   1935c:	b0800604 	addi	r2,r22,24
   19360:	ad400404 	addi	r21,r21,16
   19364:	003fbb06 	br	19254 <__alt_data_end+0xfc019254>
   19368:	a009883a 	mov	r4,r20
   1936c:	00206780 	call	20678 <__malloc_unlock>
   19370:	0005883a 	mov	r2,zero
   19374:	003f0a06 	br	18fa0 <__alt_data_end+0xfc018fa0>
   19378:	a8c00417 	ldw	r3,16(r21)
   1937c:	ad400604 	addi	r21,r21,24
   19380:	b0800804 	addi	r2,r22,32
   19384:	b0c00615 	stw	r3,24(r22)
   19388:	a8ffff17 	ldw	r3,-4(r21)
   1938c:	b0c00715 	stw	r3,28(r22)
   19390:	003fb006 	br	19254 <__alt_data_end+0xfc019254>

00019394 <__fpclassifyd>:
   19394:	00a00034 	movhi	r2,32768
   19398:	10bfffc4 	addi	r2,r2,-1
   1939c:	2884703a 	and	r2,r5,r2
   193a0:	10000726 	beq	r2,zero,193c0 <__fpclassifyd+0x2c>
   193a4:	00fffc34 	movhi	r3,65520
   193a8:	019ff834 	movhi	r6,32736
   193ac:	28c7883a 	add	r3,r5,r3
   193b0:	31bfffc4 	addi	r6,r6,-1
   193b4:	30c00536 	bltu	r6,r3,193cc <__fpclassifyd+0x38>
   193b8:	00800104 	movi	r2,4
   193bc:	f800283a 	ret
   193c0:	2000021e 	bne	r4,zero,193cc <__fpclassifyd+0x38>
   193c4:	00800084 	movi	r2,2
   193c8:	f800283a 	ret
   193cc:	00dffc34 	movhi	r3,32752
   193d0:	019ff834 	movhi	r6,32736
   193d4:	28cb883a 	add	r5,r5,r3
   193d8:	31bfffc4 	addi	r6,r6,-1
   193dc:	317ff62e 	bgeu	r6,r5,193b8 <__alt_data_end+0xfc0193b8>
   193e0:	01400434 	movhi	r5,16
   193e4:	297fffc4 	addi	r5,r5,-1
   193e8:	28800236 	bltu	r5,r2,193f4 <__fpclassifyd+0x60>
   193ec:	008000c4 	movi	r2,3
   193f0:	f800283a 	ret
   193f4:	10c00226 	beq	r2,r3,19400 <__fpclassifyd+0x6c>
   193f8:	0005883a 	mov	r2,zero
   193fc:	f800283a 	ret
   19400:	2005003a 	cmpeq	r2,r4,zero
   19404:	f800283a 	ret

00019408 <__sread>:
   19408:	defffe04 	addi	sp,sp,-8
   1940c:	dc000015 	stw	r16,0(sp)
   19410:	2821883a 	mov	r16,r5
   19414:	2940038f 	ldh	r5,14(r5)
   19418:	dfc00115 	stw	ra,4(sp)
   1941c:	001c8b00 	call	1c8b0 <_read_r>
   19420:	10000716 	blt	r2,zero,19440 <__sread+0x38>
   19424:	80c01417 	ldw	r3,80(r16)
   19428:	1887883a 	add	r3,r3,r2
   1942c:	80c01415 	stw	r3,80(r16)
   19430:	dfc00117 	ldw	ra,4(sp)
   19434:	dc000017 	ldw	r16,0(sp)
   19438:	dec00204 	addi	sp,sp,8
   1943c:	f800283a 	ret
   19440:	80c0030b 	ldhu	r3,12(r16)
   19444:	18fbffcc 	andi	r3,r3,61439
   19448:	80c0030d 	sth	r3,12(r16)
   1944c:	dfc00117 	ldw	ra,4(sp)
   19450:	dc000017 	ldw	r16,0(sp)
   19454:	dec00204 	addi	sp,sp,8
   19458:	f800283a 	ret

0001945c <__seofread>:
   1945c:	0005883a 	mov	r2,zero
   19460:	f800283a 	ret

00019464 <__swrite>:
   19464:	2880030b 	ldhu	r2,12(r5)
   19468:	defffb04 	addi	sp,sp,-20
   1946c:	dcc00315 	stw	r19,12(sp)
   19470:	dc800215 	stw	r18,8(sp)
   19474:	dc400115 	stw	r17,4(sp)
   19478:	dc000015 	stw	r16,0(sp)
   1947c:	dfc00415 	stw	ra,16(sp)
   19480:	10c0400c 	andi	r3,r2,256
   19484:	2821883a 	mov	r16,r5
   19488:	2023883a 	mov	r17,r4
   1948c:	3025883a 	mov	r18,r6
   19490:	3827883a 	mov	r19,r7
   19494:	18000526 	beq	r3,zero,194ac <__swrite+0x48>
   19498:	2940038f 	ldh	r5,14(r5)
   1949c:	01c00084 	movi	r7,2
   194a0:	000d883a 	mov	r6,zero
   194a4:	001c8500 	call	1c850 <_lseek_r>
   194a8:	8080030b 	ldhu	r2,12(r16)
   194ac:	8140038f 	ldh	r5,14(r16)
   194b0:	10bbffcc 	andi	r2,r2,61439
   194b4:	980f883a 	mov	r7,r19
   194b8:	900d883a 	mov	r6,r18
   194bc:	8809883a 	mov	r4,r17
   194c0:	8080030d 	sth	r2,12(r16)
   194c4:	dfc00417 	ldw	ra,16(sp)
   194c8:	dcc00317 	ldw	r19,12(sp)
   194cc:	dc800217 	ldw	r18,8(sp)
   194d0:	dc400117 	ldw	r17,4(sp)
   194d4:	dc000017 	ldw	r16,0(sp)
   194d8:	dec00504 	addi	sp,sp,20
   194dc:	001c3041 	jmpi	1c304 <_write_r>

000194e0 <__sseek>:
   194e0:	defffe04 	addi	sp,sp,-8
   194e4:	dc000015 	stw	r16,0(sp)
   194e8:	2821883a 	mov	r16,r5
   194ec:	2940038f 	ldh	r5,14(r5)
   194f0:	dfc00115 	stw	ra,4(sp)
   194f4:	001c8500 	call	1c850 <_lseek_r>
   194f8:	00ffffc4 	movi	r3,-1
   194fc:	10c00826 	beq	r2,r3,19520 <__sseek+0x40>
   19500:	80c0030b 	ldhu	r3,12(r16)
   19504:	80801415 	stw	r2,80(r16)
   19508:	18c40014 	ori	r3,r3,4096
   1950c:	80c0030d 	sth	r3,12(r16)
   19510:	dfc00117 	ldw	ra,4(sp)
   19514:	dc000017 	ldw	r16,0(sp)
   19518:	dec00204 	addi	sp,sp,8
   1951c:	f800283a 	ret
   19520:	80c0030b 	ldhu	r3,12(r16)
   19524:	18fbffcc 	andi	r3,r3,61439
   19528:	80c0030d 	sth	r3,12(r16)
   1952c:	dfc00117 	ldw	ra,4(sp)
   19530:	dc000017 	ldw	r16,0(sp)
   19534:	dec00204 	addi	sp,sp,8
   19538:	f800283a 	ret

0001953c <__sclose>:
   1953c:	2940038f 	ldh	r5,14(r5)
   19540:	001c3641 	jmpi	1c364 <_close_r>

00019544 <__ssprint_r>:
   19544:	30800217 	ldw	r2,8(r6)
   19548:	defff604 	addi	sp,sp,-40
   1954c:	dc800215 	stw	r18,8(sp)
   19550:	dfc00915 	stw	ra,36(sp)
   19554:	df000815 	stw	fp,32(sp)
   19558:	ddc00715 	stw	r23,28(sp)
   1955c:	dd800615 	stw	r22,24(sp)
   19560:	dd400515 	stw	r21,20(sp)
   19564:	dd000415 	stw	r20,16(sp)
   19568:	dcc00315 	stw	r19,12(sp)
   1956c:	dc400115 	stw	r17,4(sp)
   19570:	dc000015 	stw	r16,0(sp)
   19574:	3025883a 	mov	r18,r6
   19578:	10005826 	beq	r2,zero,196dc <__ssprint_r+0x198>
   1957c:	2027883a 	mov	r19,r4
   19580:	35c00017 	ldw	r23,0(r6)
   19584:	29000017 	ldw	r4,0(r5)
   19588:	28800217 	ldw	r2,8(r5)
   1958c:	2823883a 	mov	r17,r5
   19590:	0039883a 	mov	fp,zero
   19594:	0021883a 	mov	r16,zero
   19598:	80003926 	beq	r16,zero,19680 <__ssprint_r+0x13c>
   1959c:	102b883a 	mov	r21,r2
   195a0:	102d883a 	mov	r22,r2
   195a4:	80803a36 	bltu	r16,r2,19690 <__ssprint_r+0x14c>
   195a8:	88c0030b 	ldhu	r3,12(r17)
   195ac:	1881200c 	andi	r2,r3,1152
   195b0:	10002626 	beq	r2,zero,1964c <__ssprint_r+0x108>
   195b4:	88800517 	ldw	r2,20(r17)
   195b8:	89400417 	ldw	r5,16(r17)
   195bc:	81800044 	addi	r6,r16,1
   195c0:	108f883a 	add	r7,r2,r2
   195c4:	3885883a 	add	r2,r7,r2
   195c8:	100ed7fa 	srli	r7,r2,31
   195cc:	216dc83a 	sub	r22,r4,r5
   195d0:	3589883a 	add	r4,r6,r22
   195d4:	3885883a 	add	r2,r7,r2
   195d8:	102bd07a 	srai	r21,r2,1
   195dc:	a80d883a 	mov	r6,r21
   195e0:	a900022e 	bgeu	r21,r4,195ec <__ssprint_r+0xa8>
   195e4:	202b883a 	mov	r21,r4
   195e8:	200d883a 	mov	r6,r4
   195ec:	18c1000c 	andi	r3,r3,1024
   195f0:	18002a26 	beq	r3,zero,1969c <__ssprint_r+0x158>
   195f4:	300b883a 	mov	r5,r6
   195f8:	9809883a 	mov	r4,r19
   195fc:	000f4740 	call	f474 <_malloc_r>
   19600:	1029883a 	mov	r20,r2
   19604:	10002c26 	beq	r2,zero,196b8 <__ssprint_r+0x174>
   19608:	89400417 	ldw	r5,16(r17)
   1960c:	b00d883a 	mov	r6,r22
   19610:	1009883a 	mov	r4,r2
   19614:	000fc800 	call	fc80 <memcpy>
   19618:	8880030b 	ldhu	r2,12(r17)
   1961c:	00fedfc4 	movi	r3,-1153
   19620:	10c4703a 	and	r2,r2,r3
   19624:	10802014 	ori	r2,r2,128
   19628:	8880030d 	sth	r2,12(r17)
   1962c:	a589883a 	add	r4,r20,r22
   19630:	adadc83a 	sub	r22,r21,r22
   19634:	8d400515 	stw	r21,20(r17)
   19638:	8d800215 	stw	r22,8(r17)
   1963c:	8d000415 	stw	r20,16(r17)
   19640:	89000015 	stw	r4,0(r17)
   19644:	802b883a 	mov	r21,r16
   19648:	802d883a 	mov	r22,r16
   1964c:	b00d883a 	mov	r6,r22
   19650:	e00b883a 	mov	r5,fp
   19654:	0017ab40 	call	17ab4 <memmove>
   19658:	88800217 	ldw	r2,8(r17)
   1965c:	89000017 	ldw	r4,0(r17)
   19660:	90c00217 	ldw	r3,8(r18)
   19664:	1545c83a 	sub	r2,r2,r21
   19668:	2589883a 	add	r4,r4,r22
   1966c:	88800215 	stw	r2,8(r17)
   19670:	89000015 	stw	r4,0(r17)
   19674:	1c21c83a 	sub	r16,r3,r16
   19678:	94000215 	stw	r16,8(r18)
   1967c:	80001726 	beq	r16,zero,196dc <__ssprint_r+0x198>
   19680:	bf000017 	ldw	fp,0(r23)
   19684:	bc000117 	ldw	r16,4(r23)
   19688:	bdc00204 	addi	r23,r23,8
   1968c:	003fc206 	br	19598 <__alt_data_end+0xfc019598>
   19690:	802b883a 	mov	r21,r16
   19694:	802d883a 	mov	r22,r16
   19698:	003fec06 	br	1964c <__alt_data_end+0xfc01964c>
   1969c:	9809883a 	mov	r4,r19
   196a0:	0018e300 	call	18e30 <_realloc_r>
   196a4:	1029883a 	mov	r20,r2
   196a8:	103fe01e 	bne	r2,zero,1962c <__alt_data_end+0xfc01962c>
   196ac:	89400417 	ldw	r5,16(r17)
   196b0:	9809883a 	mov	r4,r19
   196b4:	0016dd80 	call	16dd8 <_free_r>
   196b8:	88c0030b 	ldhu	r3,12(r17)
   196bc:	00800304 	movi	r2,12
   196c0:	98800015 	stw	r2,0(r19)
   196c4:	18c01014 	ori	r3,r3,64
   196c8:	88c0030d 	sth	r3,12(r17)
   196cc:	00bfffc4 	movi	r2,-1
   196d0:	90000215 	stw	zero,8(r18)
   196d4:	90000115 	stw	zero,4(r18)
   196d8:	00000206 	br	196e4 <__ssprint_r+0x1a0>
   196dc:	90000115 	stw	zero,4(r18)
   196e0:	0005883a 	mov	r2,zero
   196e4:	dfc00917 	ldw	ra,36(sp)
   196e8:	df000817 	ldw	fp,32(sp)
   196ec:	ddc00717 	ldw	r23,28(sp)
   196f0:	dd800617 	ldw	r22,24(sp)
   196f4:	dd400517 	ldw	r21,20(sp)
   196f8:	dd000417 	ldw	r20,16(sp)
   196fc:	dcc00317 	ldw	r19,12(sp)
   19700:	dc800217 	ldw	r18,8(sp)
   19704:	dc400117 	ldw	r17,4(sp)
   19708:	dc000017 	ldw	r16,0(sp)
   1970c:	dec00a04 	addi	sp,sp,40
   19710:	f800283a 	ret

00019714 <___svfiprintf_internal_r>:
   19714:	2880030b 	ldhu	r2,12(r5)
   19718:	deffc804 	addi	sp,sp,-224
   1971c:	dcc03115 	stw	r19,196(sp)
   19720:	dfc03715 	stw	ra,220(sp)
   19724:	df003615 	stw	fp,216(sp)
   19728:	ddc03515 	stw	r23,212(sp)
   1972c:	dd803415 	stw	r22,208(sp)
   19730:	dd403315 	stw	r21,204(sp)
   19734:	dd003215 	stw	r20,200(sp)
   19738:	dc803015 	stw	r18,192(sp)
   1973c:	dc402f15 	stw	r17,188(sp)
   19740:	dc002e15 	stw	r16,184(sp)
   19744:	d9402315 	stw	r5,140(sp)
   19748:	d9002715 	stw	r4,156(sp)
   1974c:	1080200c 	andi	r2,r2,128
   19750:	d9c02415 	stw	r7,144(sp)
   19754:	3027883a 	mov	r19,r6
   19758:	10000226 	beq	r2,zero,19764 <___svfiprintf_internal_r+0x50>
   1975c:	28800417 	ldw	r2,16(r5)
   19760:	10046d26 	beq	r2,zero,1a918 <___svfiprintf_internal_r+0x1204>
   19764:	d8801a04 	addi	r2,sp,104
   19768:	d8c019c4 	addi	r3,sp,103
   1976c:	058000f4 	movhi	r22,3
   19770:	10c9c83a 	sub	r4,r2,r3
   19774:	b5aea804 	addi	r22,r22,-17760
   19778:	d8801e15 	stw	r2,120(sp)
   1977c:	d8c01f15 	stw	r3,124(sp)
   19780:	dec01a15 	stw	sp,104(sp)
   19784:	d8001c15 	stw	zero,112(sp)
   19788:	d8001b15 	stw	zero,108(sp)
   1978c:	d811883a 	mov	r8,sp
   19790:	d8002915 	stw	zero,164(sp)
   19794:	d8002615 	stw	zero,152(sp)
   19798:	d9002c15 	stw	r4,176(sp)
   1979c:	98800007 	ldb	r2,0(r19)
   197a0:	10031426 	beq	r2,zero,1a3f4 <___svfiprintf_internal_r+0xce0>
   197a4:	00c00944 	movi	r3,37
   197a8:	9825883a 	mov	r18,r19
   197ac:	10c0021e 	bne	r2,r3,197b8 <___svfiprintf_internal_r+0xa4>
   197b0:	00001406 	br	19804 <___svfiprintf_internal_r+0xf0>
   197b4:	10c00326 	beq	r2,r3,197c4 <___svfiprintf_internal_r+0xb0>
   197b8:	94800044 	addi	r18,r18,1
   197bc:	90800007 	ldb	r2,0(r18)
   197c0:	103ffc1e 	bne	r2,zero,197b4 <__alt_data_end+0xfc0197b4>
   197c4:	94e1c83a 	sub	r16,r18,r19
   197c8:	80000e26 	beq	r16,zero,19804 <___svfiprintf_internal_r+0xf0>
   197cc:	d8c01c17 	ldw	r3,112(sp)
   197d0:	d8801b17 	ldw	r2,108(sp)
   197d4:	44c00015 	stw	r19,0(r8)
   197d8:	1c07883a 	add	r3,r3,r16
   197dc:	10800044 	addi	r2,r2,1
   197e0:	d8c01c15 	stw	r3,112(sp)
   197e4:	44000115 	stw	r16,4(r8)
   197e8:	d8801b15 	stw	r2,108(sp)
   197ec:	00c001c4 	movi	r3,7
   197f0:	18835c16 	blt	r3,r2,1a564 <___svfiprintf_internal_r+0xe50>
   197f4:	42000204 	addi	r8,r8,8
   197f8:	d9402617 	ldw	r5,152(sp)
   197fc:	2c0b883a 	add	r5,r5,r16
   19800:	d9402615 	stw	r5,152(sp)
   19804:	90800007 	ldb	r2,0(r18)
   19808:	1002fc26 	beq	r2,zero,1a3fc <___svfiprintf_internal_r+0xce8>
   1980c:	0023883a 	mov	r17,zero
   19810:	00bfffc4 	movi	r2,-1
   19814:	0021883a 	mov	r16,zero
   19818:	94c00044 	addi	r19,r18,1
   1981c:	90c00047 	ldb	r3,1(r18)
   19820:	dc402105 	stb	r17,132(sp)
   19824:	d8001d85 	stb	zero,118(sp)
   19828:	002b883a 	mov	r21,zero
   1982c:	d8802015 	stw	r2,128(sp)
   19830:	d8002515 	stw	zero,148(sp)
   19834:	04801604 	movi	r18,88
   19838:	05000244 	movi	r20,9
   1983c:	402f883a 	mov	r23,r8
   19840:	8023883a 	mov	r17,r16
   19844:	9cc00044 	addi	r19,r19,1
   19848:	18bff804 	addi	r2,r3,-32
   1984c:	9081fb36 	bltu	r18,r2,1a03c <___svfiprintf_internal_r+0x928>
   19850:	100490ba 	slli	r2,r2,2
   19854:	010000b4 	movhi	r4,2
   19858:	21261a04 	addi	r4,r4,-26520
   1985c:	1105883a 	add	r2,r2,r4
   19860:	10800017 	ldw	r2,0(r2)
   19864:	1000683a 	jmp	r2
   19868:	00019a68 	cmpgeui	zero,zero,1641
   1986c:	0001a03c 	xorhi	zero,zero,1664
   19870:	0001a03c 	xorhi	zero,zero,1664
   19874:	00019a5c 	xori	zero,zero,1641
   19878:	0001a03c 	xorhi	zero,zero,1664
   1987c:	0001a03c 	xorhi	zero,zero,1664
   19880:	0001a03c 	xorhi	zero,zero,1664
   19884:	0001a03c 	xorhi	zero,zero,1664
   19888:	0001a03c 	xorhi	zero,zero,1664
   1988c:	0001a03c 	xorhi	zero,zero,1664
   19890:	000199cc 	andi	zero,zero,1639
   19894:	00019bc8 	cmpgei	zero,zero,1647
   19898:	0001a03c 	xorhi	zero,zero,1664
   1989c:	000199f4 	movhi	zero,1639
   198a0:	0001a078 	rdprs	zero,zero,1665
   198a4:	0001a03c 	xorhi	zero,zero,1664
   198a8:	0001a06c 	andhi	zero,zero,1665
   198ac:	0001a000 	call	1a00 <_ZN3USB4TaskEv+0x1e4>
   198b0:	0001a000 	call	1a00 <_ZN3USB4TaskEv+0x1e4>
   198b4:	0001a000 	call	1a00 <_ZN3USB4TaskEv+0x1e4>
   198b8:	0001a000 	call	1a00 <_ZN3USB4TaskEv+0x1e4>
   198bc:	0001a000 	call	1a00 <_ZN3USB4TaskEv+0x1e4>
   198c0:	0001a000 	call	1a00 <_ZN3USB4TaskEv+0x1e4>
   198c4:	0001a000 	call	1a00 <_ZN3USB4TaskEv+0x1e4>
   198c8:	0001a000 	call	1a00 <_ZN3USB4TaskEv+0x1e4>
   198cc:	0001a000 	call	1a00 <_ZN3USB4TaskEv+0x1e4>
   198d0:	0001a03c 	xorhi	zero,zero,1664
   198d4:	0001a03c 	xorhi	zero,zero,1664
   198d8:	0001a03c 	xorhi	zero,zero,1664
   198dc:	0001a03c 	xorhi	zero,zero,1664
   198e0:	0001a03c 	xorhi	zero,zero,1664
   198e4:	0001a03c 	xorhi	zero,zero,1664
   198e8:	0001a03c 	xorhi	zero,zero,1664
   198ec:	0001a03c 	xorhi	zero,zero,1664
   198f0:	0001a03c 	xorhi	zero,zero,1664
   198f4:	0001a03c 	xorhi	zero,zero,1664
   198f8:	00019f84 	movi	zero,1662
   198fc:	0001a03c 	xorhi	zero,zero,1664
   19900:	0001a03c 	xorhi	zero,zero,1664
   19904:	0001a03c 	xorhi	zero,zero,1664
   19908:	0001a03c 	xorhi	zero,zero,1664
   1990c:	0001a03c 	xorhi	zero,zero,1664
   19910:	0001a03c 	xorhi	zero,zero,1664
   19914:	0001a03c 	xorhi	zero,zero,1664
   19918:	0001a03c 	xorhi	zero,zero,1664
   1991c:	0001a03c 	xorhi	zero,zero,1664
   19920:	0001a03c 	xorhi	zero,zero,1664
   19924:	0001a134 	movhi	zero,1668
   19928:	0001a03c 	xorhi	zero,zero,1664
   1992c:	0001a03c 	xorhi	zero,zero,1664
   19930:	0001a03c 	xorhi	zero,zero,1664
   19934:	0001a03c 	xorhi	zero,zero,1664
   19938:	0001a03c 	xorhi	zero,zero,1664
   1993c:	0001a0c0 	call	1a0c <_ZN3USB4TaskEv+0x1f0>
   19940:	0001a03c 	xorhi	zero,zero,1664
   19944:	0001a03c 	xorhi	zero,zero,1664
   19948:	00019dc0 	call	19dc <_ZN3USB4TaskEv+0x1c0>
   1994c:	0001a03c 	xorhi	zero,zero,1664
   19950:	0001a03c 	xorhi	zero,zero,1664
   19954:	0001a03c 	xorhi	zero,zero,1664
   19958:	0001a03c 	xorhi	zero,zero,1664
   1995c:	0001a03c 	xorhi	zero,zero,1664
   19960:	0001a03c 	xorhi	zero,zero,1664
   19964:	0001a03c 	xorhi	zero,zero,1664
   19968:	0001a03c 	xorhi	zero,zero,1664
   1996c:	0001a03c 	xorhi	zero,zero,1664
   19970:	0001a03c 	xorhi	zero,zero,1664
   19974:	00019c8c 	andi	zero,zero,1650
   19978:	00019e70 	cmpltui	zero,zero,1657
   1997c:	0001a03c 	xorhi	zero,zero,1664
   19980:	0001a03c 	xorhi	zero,zero,1664
   19984:	0001a03c 	xorhi	zero,zero,1664
   19988:	00019e64 	muli	zero,zero,1657
   1998c:	00019e70 	cmpltui	zero,zero,1657
   19990:	0001a03c 	xorhi	zero,zero,1664
   19994:	0001a03c 	xorhi	zero,zero,1664
   19998:	00019e50 	cmplti	zero,zero,1657
   1999c:	0001a03c 	xorhi	zero,zero,1664
   199a0:	00019e10 	cmplti	zero,zero,1656
   199a4:	00019bdc 	xori	zero,zero,1647
   199a8:	00019a00 	call	19a0 <_ZN3USB4TaskEv+0x184>
   199ac:	00019f78 	rdprs	zero,zero,1661
   199b0:	0001a03c 	xorhi	zero,zero,1664
   199b4:	00019f24 	muli	zero,zero,1660
   199b8:	0001a03c 	xorhi	zero,zero,1664
   199bc:	00019b40 	call	19b4 <_ZN3USB4TaskEv+0x198>
   199c0:	0001a03c 	xorhi	zero,zero,1664
   199c4:	0001a03c 	xorhi	zero,zero,1664
   199c8:	00019a8c 	andi	zero,zero,1642
   199cc:	d9002417 	ldw	r4,144(sp)
   199d0:	d9402417 	ldw	r5,144(sp)
   199d4:	21000017 	ldw	r4,0(r4)
   199d8:	28800104 	addi	r2,r5,4
   199dc:	d9002515 	stw	r4,148(sp)
   199e0:	20032b0e 	bge	r4,zero,1a690 <___svfiprintf_internal_r+0xf7c>
   199e4:	d8c02517 	ldw	r3,148(sp)
   199e8:	d8802415 	stw	r2,144(sp)
   199ec:	00c7c83a 	sub	r3,zero,r3
   199f0:	d8c02515 	stw	r3,148(sp)
   199f4:	8c400114 	ori	r17,r17,4
   199f8:	98c00007 	ldb	r3,0(r19)
   199fc:	003f9106 	br	19844 <__alt_data_end+0xfc019844>
   19a00:	00800c04 	movi	r2,48
   19a04:	d9402417 	ldw	r5,144(sp)
   19a08:	d9002017 	ldw	r4,128(sp)
   19a0c:	d8801d05 	stb	r2,116(sp)
   19a10:	00801e04 	movi	r2,120
   19a14:	d8801d45 	stb	r2,117(sp)
   19a18:	d8001d85 	stb	zero,118(sp)
   19a1c:	b811883a 	mov	r8,r23
   19a20:	28c00104 	addi	r3,r5,4
   19a24:	2c800017 	ldw	r18,0(r5)
   19a28:	0029883a 	mov	r20,zero
   19a2c:	88800094 	ori	r2,r17,2
   19a30:	20036316 	blt	r4,zero,1a7c0 <___svfiprintf_internal_r+0x10ac>
   19a34:	00bfdfc4 	movi	r2,-129
   19a38:	88a0703a 	and	r16,r17,r2
   19a3c:	d8c02415 	stw	r3,144(sp)
   19a40:	84000094 	ori	r16,r16,2
   19a44:	90031c26 	beq	r18,zero,1a6b8 <___svfiprintf_internal_r+0xfa4>
   19a48:	014000f4 	movhi	r5,3
   19a4c:	296e4004 	addi	r5,r5,-18176
   19a50:	002b883a 	mov	r21,zero
   19a54:	d9402915 	stw	r5,164(sp)
   19a58:	00002906 	br	19b00 <___svfiprintf_internal_r+0x3ec>
   19a5c:	8c400054 	ori	r17,r17,1
   19a60:	98c00007 	ldb	r3,0(r19)
   19a64:	003f7706 	br	19844 <__alt_data_end+0xfc019844>
   19a68:	a8803fcc 	andi	r2,r21,255
   19a6c:	1080201c 	xori	r2,r2,128
   19a70:	10bfe004 	addi	r2,r2,-128
   19a74:	10032a1e 	bne	r2,zero,1a720 <___svfiprintf_internal_r+0x100c>
   19a78:	00c00044 	movi	r3,1
   19a7c:	d8c02105 	stb	r3,132(sp)
   19a80:	05400804 	movi	r21,32
   19a84:	98c00007 	ldb	r3,0(r19)
   19a88:	003f6e06 	br	19844 <__alt_data_end+0xfc019844>
   19a8c:	8821883a 	mov	r16,r17
   19a90:	dc402103 	ldbu	r17,132(sp)
   19a94:	b811883a 	mov	r8,r23
   19a98:	8c403fcc 	andi	r17,r17,255
   19a9c:	8803f01e 	bne	r17,zero,1aa60 <___svfiprintf_internal_r+0x134c>
   19aa0:	008000f4 	movhi	r2,3
   19aa4:	10ae4004 	addi	r2,r2,-18176
   19aa8:	d8802915 	stw	r2,164(sp)
   19aac:	8080080c 	andi	r2,r16,32
   19ab0:	1000cd26 	beq	r2,zero,19de8 <___svfiprintf_internal_r+0x6d4>
   19ab4:	d9002417 	ldw	r4,144(sp)
   19ab8:	24800017 	ldw	r18,0(r4)
   19abc:	25000117 	ldw	r20,4(r4)
   19ac0:	21000204 	addi	r4,r4,8
   19ac4:	d9002415 	stw	r4,144(sp)
   19ac8:	8080004c 	andi	r2,r16,1
   19acc:	1002c726 	beq	r2,zero,1a5ec <___svfiprintf_internal_r+0xed8>
   19ad0:	9504b03a 	or	r2,r18,r20
   19ad4:	1003061e 	bne	r2,zero,1a6f0 <___svfiprintf_internal_r+0xfdc>
   19ad8:	d9002017 	ldw	r4,128(sp)
   19adc:	d8001d85 	stb	zero,118(sp)
   19ae0:	20033e16 	blt	r4,zero,1a7dc <___svfiprintf_internal_r+0x10c8>
   19ae4:	00bfdfc4 	movi	r2,-129
   19ae8:	80a0703a 	and	r16,r16,r2
   19aec:	d9402017 	ldw	r5,128(sp)
   19af0:	002b883a 	mov	r21,zero
   19af4:	28002826 	beq	r5,zero,19b98 <___svfiprintf_internal_r+0x484>
   19af8:	0025883a 	mov	r18,zero
   19afc:	0029883a 	mov	r20,zero
   19b00:	d9002917 	ldw	r4,164(sp)
   19b04:	dc401a04 	addi	r17,sp,104
   19b08:	908003cc 	andi	r2,r18,15
   19b0c:	a006973a 	slli	r3,r20,28
   19b10:	2085883a 	add	r2,r4,r2
   19b14:	9024d13a 	srli	r18,r18,4
   19b18:	10800003 	ldbu	r2,0(r2)
   19b1c:	a028d13a 	srli	r20,r20,4
   19b20:	8c7fffc4 	addi	r17,r17,-1
   19b24:	1ca4b03a 	or	r18,r3,r18
   19b28:	88800005 	stb	r2,0(r17)
   19b2c:	9504b03a 	or	r2,r18,r20
   19b30:	103ff51e 	bne	r2,zero,19b08 <__alt_data_end+0xfc019b08>
   19b34:	d8801e17 	ldw	r2,120(sp)
   19b38:	1469c83a 	sub	r20,r2,r17
   19b3c:	00001906 	br	19ba4 <___svfiprintf_internal_r+0x490>
   19b40:	8821883a 	mov	r16,r17
   19b44:	dc402103 	ldbu	r17,132(sp)
   19b48:	b811883a 	mov	r8,r23
   19b4c:	8c403fcc 	andi	r17,r17,255
   19b50:	8803d01e 	bne	r17,zero,1aa94 <___svfiprintf_internal_r+0x1380>
   19b54:	8080080c 	andi	r2,r16,32
   19b58:	10016126 	beq	r2,zero,1a0e0 <___svfiprintf_internal_r+0x9cc>
   19b5c:	d9002417 	ldw	r4,144(sp)
   19b60:	d9402017 	ldw	r5,128(sp)
   19b64:	d8001d85 	stb	zero,118(sp)
   19b68:	20c00204 	addi	r3,r4,8
   19b6c:	24800017 	ldw	r18,0(r4)
   19b70:	25000117 	ldw	r20,4(r4)
   19b74:	28030f16 	blt	r5,zero,1a7b4 <___svfiprintf_internal_r+0x10a0>
   19b78:	013fdfc4 	movi	r4,-129
   19b7c:	9504b03a 	or	r2,r18,r20
   19b80:	d8c02415 	stw	r3,144(sp)
   19b84:	8120703a 	and	r16,r16,r4
   19b88:	002b883a 	mov	r21,zero
   19b8c:	1000cd1e 	bne	r2,zero,19ec4 <___svfiprintf_internal_r+0x7b0>
   19b90:	d8c02017 	ldw	r3,128(sp)
   19b94:	1803141e 	bne	r3,zero,1a7e8 <___svfiprintf_internal_r+0x10d4>
   19b98:	d8002015 	stw	zero,128(sp)
   19b9c:	0029883a 	mov	r20,zero
   19ba0:	dc401a04 	addi	r17,sp,104
   19ba4:	dc802017 	ldw	r18,128(sp)
   19ba8:	9500010e 	bge	r18,r20,19bb0 <___svfiprintf_internal_r+0x49c>
   19bac:	a025883a 	mov	r18,r20
   19bb0:	ad403fcc 	andi	r21,r21,255
   19bb4:	ad40201c 	xori	r21,r21,128
   19bb8:	ad7fe004 	addi	r21,r21,-128
   19bbc:	a8003f26 	beq	r21,zero,19cbc <___svfiprintf_internal_r+0x5a8>
   19bc0:	94800044 	addi	r18,r18,1
   19bc4:	00003d06 	br	19cbc <___svfiprintf_internal_r+0x5a8>
   19bc8:	00c00044 	movi	r3,1
   19bcc:	d8c02105 	stb	r3,132(sp)
   19bd0:	05400ac4 	movi	r21,43
   19bd4:	98c00007 	ldb	r3,0(r19)
   19bd8:	003f1a06 	br	19844 <__alt_data_end+0xfc019844>
   19bdc:	8821883a 	mov	r16,r17
   19be0:	dc402103 	ldbu	r17,132(sp)
   19be4:	b811883a 	mov	r8,r23
   19be8:	8c403fcc 	andi	r17,r17,255
   19bec:	8803a71e 	bne	r17,zero,1aa8c <___svfiprintf_internal_r+0x1378>
   19bf0:	8080080c 	andi	r2,r16,32
   19bf4:	10015726 	beq	r2,zero,1a154 <___svfiprintf_internal_r+0xa40>
   19bf8:	d8c02417 	ldw	r3,144(sp)
   19bfc:	d9002017 	ldw	r4,128(sp)
   19c00:	d8001d85 	stb	zero,118(sp)
   19c04:	18800204 	addi	r2,r3,8
   19c08:	1c800017 	ldw	r18,0(r3)
   19c0c:	1d000117 	ldw	r20,4(r3)
   19c10:	2002db16 	blt	r4,zero,1a780 <___svfiprintf_internal_r+0x106c>
   19c14:	013fdfc4 	movi	r4,-129
   19c18:	9506b03a 	or	r3,r18,r20
   19c1c:	d8802415 	stw	r2,144(sp)
   19c20:	8120703a 	and	r16,r16,r4
   19c24:	18015826 	beq	r3,zero,1a188 <___svfiprintf_internal_r+0xa74>
   19c28:	002b883a 	mov	r21,zero
   19c2c:	dc401a04 	addi	r17,sp,104
   19c30:	9006d0fa 	srli	r3,r18,3
   19c34:	a008977a 	slli	r4,r20,29
   19c38:	a028d0fa 	srli	r20,r20,3
   19c3c:	948001cc 	andi	r18,r18,7
   19c40:	90800c04 	addi	r2,r18,48
   19c44:	8c7fffc4 	addi	r17,r17,-1
   19c48:	20e4b03a 	or	r18,r4,r3
   19c4c:	88800005 	stb	r2,0(r17)
   19c50:	9506b03a 	or	r3,r18,r20
   19c54:	183ff61e 	bne	r3,zero,19c30 <__alt_data_end+0xfc019c30>
   19c58:	80c0004c 	andi	r3,r16,1
   19c5c:	18028926 	beq	r3,zero,1a684 <___svfiprintf_internal_r+0xf70>
   19c60:	10803fcc 	andi	r2,r2,255
   19c64:	1080201c 	xori	r2,r2,128
   19c68:	10bfe004 	addi	r2,r2,-128
   19c6c:	00c00c04 	movi	r3,48
   19c70:	10ffb026 	beq	r2,r3,19b34 <__alt_data_end+0xfc019b34>
   19c74:	88ffffc5 	stb	r3,-1(r17)
   19c78:	d8c01e17 	ldw	r3,120(sp)
   19c7c:	88bfffc4 	addi	r2,r17,-1
   19c80:	1023883a 	mov	r17,r2
   19c84:	18a9c83a 	sub	r20,r3,r2
   19c88:	003fc606 	br	19ba4 <__alt_data_end+0xfc019ba4>
   19c8c:	d8c02417 	ldw	r3,144(sp)
   19c90:	04800044 	movi	r18,1
   19c94:	8821883a 	mov	r16,r17
   19c98:	18800017 	ldw	r2,0(r3)
   19c9c:	18c00104 	addi	r3,r3,4
   19ca0:	b811883a 	mov	r8,r23
   19ca4:	d8001d85 	stb	zero,118(sp)
   19ca8:	d8801005 	stb	r2,64(sp)
   19cac:	d8c02415 	stw	r3,144(sp)
   19cb0:	9029883a 	mov	r20,r18
   19cb4:	dc401004 	addi	r17,sp,64
   19cb8:	d8002015 	stw	zero,128(sp)
   19cbc:	80c0008c 	andi	r3,r16,2
   19cc0:	d8c02115 	stw	r3,132(sp)
   19cc4:	18000126 	beq	r3,zero,19ccc <___svfiprintf_internal_r+0x5b8>
   19cc8:	94800084 	addi	r18,r18,2
   19ccc:	80c0210c 	andi	r3,r16,132
   19cd0:	d8c02215 	stw	r3,136(sp)
   19cd4:	1801321e 	bne	r3,zero,1a1a0 <___svfiprintf_internal_r+0xa8c>
   19cd8:	d9002517 	ldw	r4,148(sp)
   19cdc:	24b9c83a 	sub	fp,r4,r18
   19ce0:	07012f0e 	bge	zero,fp,1a1a0 <___svfiprintf_internal_r+0xa8c>
   19ce4:	02400404 	movi	r9,16
   19ce8:	d8c01c17 	ldw	r3,112(sp)
   19cec:	d8801b17 	ldw	r2,108(sp)
   19cf0:	4f03250e 	bge	r9,fp,1a988 <___svfiprintf_internal_r+0x1274>
   19cf4:	010000f4 	movhi	r4,3
   19cf8:	212eac04 	addi	r4,r4,-17744
   19cfc:	dc002a15 	stw	r16,168(sp)
   19d00:	dc402b15 	stw	r17,172(sp)
   19d04:	d9002815 	stw	r4,160(sp)
   19d08:	e023883a 	mov	r17,fp
   19d0c:	482f883a 	mov	r23,r9
   19d10:	9839883a 	mov	fp,r19
   19d14:	054001c4 	movi	r21,7
   19d18:	9027883a 	mov	r19,r18
   19d1c:	dc002717 	ldw	r16,156(sp)
   19d20:	dc802317 	ldw	r18,140(sp)
   19d24:	00000306 	br	19d34 <___svfiprintf_internal_r+0x620>
   19d28:	8c7ffc04 	addi	r17,r17,-16
   19d2c:	42000204 	addi	r8,r8,8
   19d30:	bc40130e 	bge	r23,r17,19d80 <___svfiprintf_internal_r+0x66c>
   19d34:	014000f4 	movhi	r5,3
   19d38:	18c00404 	addi	r3,r3,16
   19d3c:	10800044 	addi	r2,r2,1
   19d40:	296eac04 	addi	r5,r5,-17744
   19d44:	41400015 	stw	r5,0(r8)
   19d48:	45c00115 	stw	r23,4(r8)
   19d4c:	d8c01c15 	stw	r3,112(sp)
   19d50:	d8801b15 	stw	r2,108(sp)
   19d54:	a8bff40e 	bge	r21,r2,19d28 <__alt_data_end+0xfc019d28>
   19d58:	d9801a04 	addi	r6,sp,104
   19d5c:	900b883a 	mov	r5,r18
   19d60:	8009883a 	mov	r4,r16
   19d64:	00195440 	call	19544 <__ssprint_r>
   19d68:	1001aa1e 	bne	r2,zero,1a414 <___svfiprintf_internal_r+0xd00>
   19d6c:	8c7ffc04 	addi	r17,r17,-16
   19d70:	d8c01c17 	ldw	r3,112(sp)
   19d74:	d8801b17 	ldw	r2,108(sp)
   19d78:	d811883a 	mov	r8,sp
   19d7c:	bc7fed16 	blt	r23,r17,19d34 <__alt_data_end+0xfc019d34>
   19d80:	9825883a 	mov	r18,r19
   19d84:	dc002a17 	ldw	r16,168(sp)
   19d88:	e027883a 	mov	r19,fp
   19d8c:	8839883a 	mov	fp,r17
   19d90:	dc402b17 	ldw	r17,172(sp)
   19d94:	d9002817 	ldw	r4,160(sp)
   19d98:	e0c7883a 	add	r3,fp,r3
   19d9c:	10800044 	addi	r2,r2,1
   19da0:	41000015 	stw	r4,0(r8)
   19da4:	47000115 	stw	fp,4(r8)
   19da8:	d8c01c15 	stw	r3,112(sp)
   19dac:	d8801b15 	stw	r2,108(sp)
   19db0:	010001c4 	movi	r4,7
   19db4:	20821616 	blt	r4,r2,1a610 <___svfiprintf_internal_r+0xefc>
   19db8:	42000204 	addi	r8,r8,8
   19dbc:	0000fa06 	br	1a1a8 <___svfiprintf_internal_r+0xa94>
   19dc0:	8821883a 	mov	r16,r17
   19dc4:	dc402103 	ldbu	r17,132(sp)
   19dc8:	b811883a 	mov	r8,r23
   19dcc:	8c403fcc 	andi	r17,r17,255
   19dd0:	8803361e 	bne	r17,zero,1aaac <___svfiprintf_internal_r+0x1398>
   19dd4:	014000f4 	movhi	r5,3
   19dd8:	296e3b04 	addi	r5,r5,-18196
   19ddc:	d9402915 	stw	r5,164(sp)
   19de0:	8080080c 	andi	r2,r16,32
   19de4:	103f331e 	bne	r2,zero,19ab4 <__alt_data_end+0xfc019ab4>
   19de8:	8080040c 	andi	r2,r16,16
   19dec:	1002551e 	bne	r2,zero,1a744 <___svfiprintf_internal_r+0x1030>
   19df0:	8080100c 	andi	r2,r16,64
   19df4:	1002a626 	beq	r2,zero,1a890 <___svfiprintf_internal_r+0x117c>
   19df8:	d8802417 	ldw	r2,144(sp)
   19dfc:	0029883a 	mov	r20,zero
   19e00:	1480000b 	ldhu	r18,0(r2)
   19e04:	10800104 	addi	r2,r2,4
   19e08:	d8802415 	stw	r2,144(sp)
   19e0c:	003f2e06 	br	19ac8 <__alt_data_end+0xfc019ac8>
   19e10:	8821883a 	mov	r16,r17
   19e14:	dc402103 	ldbu	r17,132(sp)
   19e18:	b811883a 	mov	r8,r23
   19e1c:	8c403fcc 	andi	r17,r17,255
   19e20:	88030b1e 	bne	r17,zero,1aa50 <___svfiprintf_internal_r+0x133c>
   19e24:	8080080c 	andi	r2,r16,32
   19e28:	1002271e 	bne	r2,zero,1a6c8 <___svfiprintf_internal_r+0xfb4>
   19e2c:	8080040c 	andi	r2,r16,16
   19e30:	10028e26 	beq	r2,zero,1a86c <___svfiprintf_internal_r+0x1158>
   19e34:	d8c02417 	ldw	r3,144(sp)
   19e38:	d9002617 	ldw	r4,152(sp)
   19e3c:	18800017 	ldw	r2,0(r3)
   19e40:	18c00104 	addi	r3,r3,4
   19e44:	d8c02415 	stw	r3,144(sp)
   19e48:	11000015 	stw	r4,0(r2)
   19e4c:	003e5306 	br	1979c <__alt_data_end+0xfc01979c>
   19e50:	98c00007 	ldb	r3,0(r19)
   19e54:	01401b04 	movi	r5,108
   19e58:	19424f26 	beq	r3,r5,1a798 <___svfiprintf_internal_r+0x1084>
   19e5c:	8c400414 	ori	r17,r17,16
   19e60:	003e7806 	br	19844 <__alt_data_end+0xfc019844>
   19e64:	8c401014 	ori	r17,r17,64
   19e68:	98c00007 	ldb	r3,0(r19)
   19e6c:	003e7506 	br	19844 <__alt_data_end+0xfc019844>
   19e70:	8821883a 	mov	r16,r17
   19e74:	dc402103 	ldbu	r17,132(sp)
   19e78:	b811883a 	mov	r8,r23
   19e7c:	8c403fcc 	andi	r17,r17,255
   19e80:	8802fe1e 	bne	r17,zero,1aa7c <___svfiprintf_internal_r+0x1368>
   19e84:	8080080c 	andi	r2,r16,32
   19e88:	10004626 	beq	r2,zero,19fa4 <___svfiprintf_internal_r+0x890>
   19e8c:	d9002417 	ldw	r4,144(sp)
   19e90:	20800117 	ldw	r2,4(r4)
   19e94:	24800017 	ldw	r18,0(r4)
   19e98:	21000204 	addi	r4,r4,8
   19e9c:	d9002415 	stw	r4,144(sp)
   19ea0:	1029883a 	mov	r20,r2
   19ea4:	10004a16 	blt	r2,zero,19fd0 <___svfiprintf_internal_r+0x8bc>
   19ea8:	d9002017 	ldw	r4,128(sp)
   19eac:	dd401d83 	ldbu	r21,118(sp)
   19eb0:	2001eb16 	blt	r4,zero,1a660 <___svfiprintf_internal_r+0xf4c>
   19eb4:	00ffdfc4 	movi	r3,-129
   19eb8:	9504b03a 	or	r2,r18,r20
   19ebc:	80e0703a 	and	r16,r16,r3
   19ec0:	103f3326 	beq	r2,zero,19b90 <__alt_data_end+0xfc019b90>
   19ec4:	a0009426 	beq	r20,zero,1a118 <___svfiprintf_internal_r+0xa04>
   19ec8:	dc401a04 	addi	r17,sp,104
   19ecc:	402f883a 	mov	r23,r8
   19ed0:	9009883a 	mov	r4,r18
   19ed4:	a00b883a 	mov	r5,r20
   19ed8:	01800284 	movi	r6,10
   19edc:	000f883a 	mov	r7,zero
   19ee0:	001d0f40 	call	1d0f4 <__umoddi3>
   19ee4:	10800c04 	addi	r2,r2,48
   19ee8:	8c7fffc4 	addi	r17,r17,-1
   19eec:	9009883a 	mov	r4,r18
   19ef0:	a00b883a 	mov	r5,r20
   19ef4:	88800005 	stb	r2,0(r17)
   19ef8:	01800284 	movi	r6,10
   19efc:	000f883a 	mov	r7,zero
   19f00:	001caf80 	call	1caf8 <__udivdi3>
   19f04:	1025883a 	mov	r18,r2
   19f08:	10c4b03a 	or	r2,r2,r3
   19f0c:	1829883a 	mov	r20,r3
   19f10:	103fef1e 	bne	r2,zero,19ed0 <__alt_data_end+0xfc019ed0>
   19f14:	d9001e17 	ldw	r4,120(sp)
   19f18:	b811883a 	mov	r8,r23
   19f1c:	2469c83a 	sub	r20,r4,r17
   19f20:	003f2006 	br	19ba4 <__alt_data_end+0xfc019ba4>
   19f24:	d8802417 	ldw	r2,144(sp)
   19f28:	8821883a 	mov	r16,r17
   19f2c:	d8001d85 	stb	zero,118(sp)
   19f30:	14400017 	ldw	r17,0(r2)
   19f34:	b811883a 	mov	r8,r23
   19f38:	15c00104 	addi	r23,r2,4
   19f3c:	88026c26 	beq	r17,zero,1a8f0 <___svfiprintf_internal_r+0x11dc>
   19f40:	d8c02017 	ldw	r3,128(sp)
   19f44:	18025f16 	blt	r3,zero,1a8c4 <___svfiprintf_internal_r+0x11b0>
   19f48:	180d883a 	mov	r6,r3
   19f4c:	000b883a 	mov	r5,zero
   19f50:	8809883a 	mov	r4,r17
   19f54:	da002d15 	stw	r8,180(sp)
   19f58:	00179d00 	call	179d0 <memchr>
   19f5c:	da002d17 	ldw	r8,180(sp)
   19f60:	1002a526 	beq	r2,zero,1a9f8 <___svfiprintf_internal_r+0x12e4>
   19f64:	1469c83a 	sub	r20,r2,r17
   19f68:	dd401d83 	ldbu	r21,118(sp)
   19f6c:	ddc02415 	stw	r23,144(sp)
   19f70:	d8002015 	stw	zero,128(sp)
   19f74:	003f0b06 	br	19ba4 <__alt_data_end+0xfc019ba4>
   19f78:	8c400814 	ori	r17,r17,32
   19f7c:	98c00007 	ldb	r3,0(r19)
   19f80:	003e3006 	br	19844 <__alt_data_end+0xfc019844>
   19f84:	8821883a 	mov	r16,r17
   19f88:	dc402103 	ldbu	r17,132(sp)
   19f8c:	b811883a 	mov	r8,r23
   19f90:	8c403fcc 	andi	r17,r17,255
   19f94:	8802b01e 	bne	r17,zero,1aa58 <___svfiprintf_internal_r+0x1344>
   19f98:	84000414 	ori	r16,r16,16
   19f9c:	8080080c 	andi	r2,r16,32
   19fa0:	103fba1e 	bne	r2,zero,19e8c <__alt_data_end+0xfc019e8c>
   19fa4:	8080040c 	andi	r2,r16,16
   19fa8:	1001df1e 	bne	r2,zero,1a728 <___svfiprintf_internal_r+0x1014>
   19fac:	8080100c 	andi	r2,r16,64
   19fb0:	10023d26 	beq	r2,zero,1a8a8 <___svfiprintf_internal_r+0x1194>
   19fb4:	d8802417 	ldw	r2,144(sp)
   19fb8:	1480000f 	ldh	r18,0(r2)
   19fbc:	10800104 	addi	r2,r2,4
   19fc0:	d8802415 	stw	r2,144(sp)
   19fc4:	9029d7fa 	srai	r20,r18,31
   19fc8:	a005883a 	mov	r2,r20
   19fcc:	103fb60e 	bge	r2,zero,19ea8 <__alt_data_end+0xfc019ea8>
   19fd0:	d9402017 	ldw	r5,128(sp)
   19fd4:	04a5c83a 	sub	r18,zero,r18
   19fd8:	05400b44 	movi	r21,45
   19fdc:	9004c03a 	cmpne	r2,r18,zero
   19fe0:	0529c83a 	sub	r20,zero,r20
   19fe4:	dd401d85 	stb	r21,118(sp)
   19fe8:	a0a9c83a 	sub	r20,r20,r2
   19fec:	28026c16 	blt	r5,zero,1a9a0 <___svfiprintf_internal_r+0x128c>
   19ff0:	00bfdfc4 	movi	r2,-129
   19ff4:	80a0703a 	and	r16,r16,r2
   19ff8:	a03fb31e 	bne	r20,zero,19ec8 <__alt_data_end+0xfc019ec8>
   19ffc:	00004606 	br	1a118 <___svfiprintf_internal_r+0xa04>
   1a000:	9839883a 	mov	fp,r19
   1a004:	d8002515 	stw	zero,148(sp)
   1a008:	1c3ff404 	addi	r16,r3,-48
   1a00c:	0009883a 	mov	r4,zero
   1a010:	01400284 	movi	r5,10
   1a014:	000d8e00 	call	d8e0 <__mulsi3>
   1a018:	e0c00007 	ldb	r3,0(fp)
   1a01c:	8089883a 	add	r4,r16,r2
   1a020:	9cc00044 	addi	r19,r19,1
   1a024:	1c3ff404 	addi	r16,r3,-48
   1a028:	9839883a 	mov	fp,r19
   1a02c:	a43ff82e 	bgeu	r20,r16,1a010 <__alt_data_end+0xfc01a010>
   1a030:	d9002515 	stw	r4,148(sp)
   1a034:	18bff804 	addi	r2,r3,-32
   1a038:	90be052e 	bgeu	r18,r2,19850 <__alt_data_end+0xfc019850>
   1a03c:	8821883a 	mov	r16,r17
   1a040:	dc402103 	ldbu	r17,132(sp)
   1a044:	b811883a 	mov	r8,r23
   1a048:	8c403fcc 	andi	r17,r17,255
   1a04c:	88028d1e 	bne	r17,zero,1aa84 <___svfiprintf_internal_r+0x1370>
   1a050:	1800ea26 	beq	r3,zero,1a3fc <___svfiprintf_internal_r+0xce8>
   1a054:	04800044 	movi	r18,1
   1a058:	d8c01005 	stb	r3,64(sp)
   1a05c:	d8001d85 	stb	zero,118(sp)
   1a060:	9029883a 	mov	r20,r18
   1a064:	dc401004 	addi	r17,sp,64
   1a068:	003f1306 	br	19cb8 <__alt_data_end+0xfc019cb8>
   1a06c:	8c402014 	ori	r17,r17,128
   1a070:	98c00007 	ldb	r3,0(r19)
   1a074:	003df306 	br	19844 <__alt_data_end+0xfc019844>
   1a078:	98c00007 	ldb	r3,0(r19)
   1a07c:	01000a84 	movi	r4,42
   1a080:	9f000044 	addi	fp,r19,1
   1a084:	19026326 	beq	r3,r4,1aa14 <___svfiprintf_internal_r+0x1300>
   1a088:	1c3ff404 	addi	r16,r3,-48
   1a08c:	0009883a 	mov	r4,zero
   1a090:	a4025636 	bltu	r20,r16,1a9ec <___svfiprintf_internal_r+0x12d8>
   1a094:	01400284 	movi	r5,10
   1a098:	000d8e00 	call	d8e0 <__mulsi3>
   1a09c:	e0c00007 	ldb	r3,0(fp)
   1a0a0:	1409883a 	add	r4,r2,r16
   1a0a4:	e4c00044 	addi	r19,fp,1
   1a0a8:	1c3ff404 	addi	r16,r3,-48
   1a0ac:	9839883a 	mov	fp,r19
   1a0b0:	a43ff82e 	bgeu	r20,r16,1a094 <__alt_data_end+0xfc01a094>
   1a0b4:	20020c16 	blt	r4,zero,1a8e8 <___svfiprintf_internal_r+0x11d4>
   1a0b8:	d9002015 	stw	r4,128(sp)
   1a0bc:	003de206 	br	19848 <__alt_data_end+0xfc019848>
   1a0c0:	8821883a 	mov	r16,r17
   1a0c4:	dc402103 	ldbu	r17,132(sp)
   1a0c8:	b811883a 	mov	r8,r23
   1a0cc:	8c403fcc 	andi	r17,r17,255
   1a0d0:	8802721e 	bne	r17,zero,1aa9c <___svfiprintf_internal_r+0x1388>
   1a0d4:	84000414 	ori	r16,r16,16
   1a0d8:	8080080c 	andi	r2,r16,32
   1a0dc:	103e9f1e 	bne	r2,zero,19b5c <__alt_data_end+0xfc019b5c>
   1a0e0:	8080040c 	andi	r2,r16,16
   1a0e4:	10015326 	beq	r2,zero,1a634 <___svfiprintf_internal_r+0xf20>
   1a0e8:	d8c02417 	ldw	r3,144(sp)
   1a0ec:	d9002017 	ldw	r4,128(sp)
   1a0f0:	d8001d85 	stb	zero,118(sp)
   1a0f4:	18800104 	addi	r2,r3,4
   1a0f8:	1c800017 	ldw	r18,0(r3)
   1a0fc:	0029883a 	mov	r20,zero
   1a100:	20015516 	blt	r4,zero,1a658 <___svfiprintf_internal_r+0xf44>
   1a104:	00ffdfc4 	movi	r3,-129
   1a108:	d8802415 	stw	r2,144(sp)
   1a10c:	80e0703a 	and	r16,r16,r3
   1a110:	002b883a 	mov	r21,zero
   1a114:	903e9e26 	beq	r18,zero,19b90 <__alt_data_end+0xfc019b90>
   1a118:	00800244 	movi	r2,9
   1a11c:	14bf6a36 	bltu	r2,r18,19ec8 <__alt_data_end+0xfc019ec8>
   1a120:	94800c04 	addi	r18,r18,48
   1a124:	dc8019c5 	stb	r18,103(sp)
   1a128:	dd002c17 	ldw	r20,176(sp)
   1a12c:	dc4019c4 	addi	r17,sp,103
   1a130:	003e9c06 	br	19ba4 <__alt_data_end+0xfc019ba4>
   1a134:	8821883a 	mov	r16,r17
   1a138:	dc402103 	ldbu	r17,132(sp)
   1a13c:	b811883a 	mov	r8,r23
   1a140:	8c403fcc 	andi	r17,r17,255
   1a144:	8802571e 	bne	r17,zero,1aaa4 <___svfiprintf_internal_r+0x1390>
   1a148:	84000414 	ori	r16,r16,16
   1a14c:	8080080c 	andi	r2,r16,32
   1a150:	103ea91e 	bne	r2,zero,19bf8 <__alt_data_end+0xfc019bf8>
   1a154:	8080040c 	andi	r2,r16,16
   1a158:	10018026 	beq	r2,zero,1a75c <___svfiprintf_internal_r+0x1048>
   1a15c:	d9402417 	ldw	r5,144(sp)
   1a160:	d8c02017 	ldw	r3,128(sp)
   1a164:	d8001d85 	stb	zero,118(sp)
   1a168:	28800104 	addi	r2,r5,4
   1a16c:	2c800017 	ldw	r18,0(r5)
   1a170:	0029883a 	mov	r20,zero
   1a174:	18018216 	blt	r3,zero,1a780 <___svfiprintf_internal_r+0x106c>
   1a178:	00ffdfc4 	movi	r3,-129
   1a17c:	d8802415 	stw	r2,144(sp)
   1a180:	80e0703a 	and	r16,r16,r3
   1a184:	903ea81e 	bne	r18,zero,19c28 <__alt_data_end+0xfc019c28>
   1a188:	d8802017 	ldw	r2,128(sp)
   1a18c:	002b883a 	mov	r21,zero
   1a190:	1001f226 	beq	r2,zero,1a95c <___svfiprintf_internal_r+0x1248>
   1a194:	0025883a 	mov	r18,zero
   1a198:	0029883a 	mov	r20,zero
   1a19c:	003ea306 	br	19c2c <__alt_data_end+0xfc019c2c>
   1a1a0:	d8c01c17 	ldw	r3,112(sp)
   1a1a4:	d8801b17 	ldw	r2,108(sp)
   1a1a8:	d9001d87 	ldb	r4,118(sp)
   1a1ac:	20000b26 	beq	r4,zero,1a1dc <___svfiprintf_internal_r+0xac8>
   1a1b0:	d9001d84 	addi	r4,sp,118
   1a1b4:	18c00044 	addi	r3,r3,1
   1a1b8:	10800044 	addi	r2,r2,1
   1a1bc:	41000015 	stw	r4,0(r8)
   1a1c0:	01000044 	movi	r4,1
   1a1c4:	41000115 	stw	r4,4(r8)
   1a1c8:	d8c01c15 	stw	r3,112(sp)
   1a1cc:	d8801b15 	stw	r2,108(sp)
   1a1d0:	010001c4 	movi	r4,7
   1a1d4:	2080f316 	blt	r4,r2,1a5a4 <___svfiprintf_internal_r+0xe90>
   1a1d8:	42000204 	addi	r8,r8,8
   1a1dc:	d9402117 	ldw	r5,132(sp)
   1a1e0:	28000b26 	beq	r5,zero,1a210 <___svfiprintf_internal_r+0xafc>
   1a1e4:	d9001d04 	addi	r4,sp,116
   1a1e8:	18c00084 	addi	r3,r3,2
   1a1ec:	10800044 	addi	r2,r2,1
   1a1f0:	41000015 	stw	r4,0(r8)
   1a1f4:	01000084 	movi	r4,2
   1a1f8:	41000115 	stw	r4,4(r8)
   1a1fc:	d8c01c15 	stw	r3,112(sp)
   1a200:	d8801b15 	stw	r2,108(sp)
   1a204:	010001c4 	movi	r4,7
   1a208:	2080ef16 	blt	r4,r2,1a5c8 <___svfiprintf_internal_r+0xeb4>
   1a20c:	42000204 	addi	r8,r8,8
   1a210:	d9402217 	ldw	r5,136(sp)
   1a214:	01002004 	movi	r4,128
   1a218:	29008f26 	beq	r5,r4,1a458 <___svfiprintf_internal_r+0xd44>
   1a21c:	d9002017 	ldw	r4,128(sp)
   1a220:	252fc83a 	sub	r23,r4,r20
   1a224:	05c0310e 	bge	zero,r23,1a2ec <___svfiprintf_internal_r+0xbd8>
   1a228:	07000404 	movi	fp,16
   1a22c:	e5c17d0e 	bge	fp,r23,1a824 <___svfiprintf_internal_r+0x1110>
   1a230:	010000f4 	movhi	r4,3
   1a234:	212ea804 	addi	r4,r4,-17760
   1a238:	dc002015 	stw	r16,128(sp)
   1a23c:	dc402215 	stw	r17,136(sp)
   1a240:	d9002115 	stw	r4,132(sp)
   1a244:	b823883a 	mov	r17,r23
   1a248:	054001c4 	movi	r21,7
   1a24c:	982f883a 	mov	r23,r19
   1a250:	dc002717 	ldw	r16,156(sp)
   1a254:	9027883a 	mov	r19,r18
   1a258:	dc802317 	ldw	r18,140(sp)
   1a25c:	00000306 	br	1a26c <___svfiprintf_internal_r+0xb58>
   1a260:	8c7ffc04 	addi	r17,r17,-16
   1a264:	42000204 	addi	r8,r8,8
   1a268:	e440110e 	bge	fp,r17,1a2b0 <___svfiprintf_internal_r+0xb9c>
   1a26c:	18c00404 	addi	r3,r3,16
   1a270:	10800044 	addi	r2,r2,1
   1a274:	45800015 	stw	r22,0(r8)
   1a278:	47000115 	stw	fp,4(r8)
   1a27c:	d8c01c15 	stw	r3,112(sp)
   1a280:	d8801b15 	stw	r2,108(sp)
   1a284:	a8bff60e 	bge	r21,r2,1a260 <__alt_data_end+0xfc01a260>
   1a288:	d9801a04 	addi	r6,sp,104
   1a28c:	900b883a 	mov	r5,r18
   1a290:	8009883a 	mov	r4,r16
   1a294:	00195440 	call	19544 <__ssprint_r>
   1a298:	10005e1e 	bne	r2,zero,1a414 <___svfiprintf_internal_r+0xd00>
   1a29c:	8c7ffc04 	addi	r17,r17,-16
   1a2a0:	d8c01c17 	ldw	r3,112(sp)
   1a2a4:	d8801b17 	ldw	r2,108(sp)
   1a2a8:	d811883a 	mov	r8,sp
   1a2ac:	e47fef16 	blt	fp,r17,1a26c <__alt_data_end+0xfc01a26c>
   1a2b0:	9825883a 	mov	r18,r19
   1a2b4:	dc002017 	ldw	r16,128(sp)
   1a2b8:	b827883a 	mov	r19,r23
   1a2bc:	882f883a 	mov	r23,r17
   1a2c0:	dc402217 	ldw	r17,136(sp)
   1a2c4:	d9402117 	ldw	r5,132(sp)
   1a2c8:	1dc7883a 	add	r3,r3,r23
   1a2cc:	10800044 	addi	r2,r2,1
   1a2d0:	41400015 	stw	r5,0(r8)
   1a2d4:	45c00115 	stw	r23,4(r8)
   1a2d8:	d8c01c15 	stw	r3,112(sp)
   1a2dc:	d8801b15 	stw	r2,108(sp)
   1a2e0:	010001c4 	movi	r4,7
   1a2e4:	2080a616 	blt	r4,r2,1a580 <___svfiprintf_internal_r+0xe6c>
   1a2e8:	42000204 	addi	r8,r8,8
   1a2ec:	a0c7883a 	add	r3,r20,r3
   1a2f0:	10800044 	addi	r2,r2,1
   1a2f4:	44400015 	stw	r17,0(r8)
   1a2f8:	45000115 	stw	r20,4(r8)
   1a2fc:	d8c01c15 	stw	r3,112(sp)
   1a300:	d8801b15 	stw	r2,108(sp)
   1a304:	010001c4 	movi	r4,7
   1a308:	20808816 	blt	r4,r2,1a52c <___svfiprintf_internal_r+0xe18>
   1a30c:	42000204 	addi	r8,r8,8
   1a310:	8400010c 	andi	r16,r16,4
   1a314:	80002c26 	beq	r16,zero,1a3c8 <___svfiprintf_internal_r+0xcb4>
   1a318:	d8802517 	ldw	r2,148(sp)
   1a31c:	14a1c83a 	sub	r16,r2,r18
   1a320:	0400290e 	bge	zero,r16,1a3c8 <___svfiprintf_internal_r+0xcb4>
   1a324:	04400404 	movi	r17,16
   1a328:	d8801b17 	ldw	r2,108(sp)
   1a32c:	8c01a70e 	bge	r17,r16,1a9cc <___svfiprintf_internal_r+0x12b8>
   1a330:	014000f4 	movhi	r5,3
   1a334:	296eac04 	addi	r5,r5,-17744
   1a338:	d9402815 	stw	r5,160(sp)
   1a33c:	050001c4 	movi	r20,7
   1a340:	dd402717 	ldw	r21,156(sp)
   1a344:	ddc02317 	ldw	r23,140(sp)
   1a348:	00000306 	br	1a358 <___svfiprintf_internal_r+0xc44>
   1a34c:	843ffc04 	addi	r16,r16,-16
   1a350:	42000204 	addi	r8,r8,8
   1a354:	8c00130e 	bge	r17,r16,1a3a4 <___svfiprintf_internal_r+0xc90>
   1a358:	010000f4 	movhi	r4,3
   1a35c:	18c00404 	addi	r3,r3,16
   1a360:	10800044 	addi	r2,r2,1
   1a364:	212eac04 	addi	r4,r4,-17744
   1a368:	41000015 	stw	r4,0(r8)
   1a36c:	44400115 	stw	r17,4(r8)
   1a370:	d8c01c15 	stw	r3,112(sp)
   1a374:	d8801b15 	stw	r2,108(sp)
   1a378:	a0bff40e 	bge	r20,r2,1a34c <__alt_data_end+0xfc01a34c>
   1a37c:	d9801a04 	addi	r6,sp,104
   1a380:	b80b883a 	mov	r5,r23
   1a384:	a809883a 	mov	r4,r21
   1a388:	00195440 	call	19544 <__ssprint_r>
   1a38c:	1000211e 	bne	r2,zero,1a414 <___svfiprintf_internal_r+0xd00>
   1a390:	843ffc04 	addi	r16,r16,-16
   1a394:	d8c01c17 	ldw	r3,112(sp)
   1a398:	d8801b17 	ldw	r2,108(sp)
   1a39c:	d811883a 	mov	r8,sp
   1a3a0:	8c3fed16 	blt	r17,r16,1a358 <__alt_data_end+0xfc01a358>
   1a3a4:	d9402817 	ldw	r5,160(sp)
   1a3a8:	1c07883a 	add	r3,r3,r16
   1a3ac:	10800044 	addi	r2,r2,1
   1a3b0:	41400015 	stw	r5,0(r8)
   1a3b4:	44000115 	stw	r16,4(r8)
   1a3b8:	d8c01c15 	stw	r3,112(sp)
   1a3bc:	d8801b15 	stw	r2,108(sp)
   1a3c0:	010001c4 	movi	r4,7
   1a3c4:	2080b516 	blt	r4,r2,1a69c <___svfiprintf_internal_r+0xf88>
   1a3c8:	d8802517 	ldw	r2,148(sp)
   1a3cc:	1480010e 	bge	r2,r18,1a3d4 <___svfiprintf_internal_r+0xcc0>
   1a3d0:	9005883a 	mov	r2,r18
   1a3d4:	d9002617 	ldw	r4,152(sp)
   1a3d8:	2089883a 	add	r4,r4,r2
   1a3dc:	d9002615 	stw	r4,152(sp)
   1a3e0:	18005a1e 	bne	r3,zero,1a54c <___svfiprintf_internal_r+0xe38>
   1a3e4:	98800007 	ldb	r2,0(r19)
   1a3e8:	d8001b15 	stw	zero,108(sp)
   1a3ec:	d811883a 	mov	r8,sp
   1a3f0:	103cec1e 	bne	r2,zero,197a4 <__alt_data_end+0xfc0197a4>
   1a3f4:	9825883a 	mov	r18,r19
   1a3f8:	003d0206 	br	19804 <__alt_data_end+0xfc019804>
   1a3fc:	d8801c17 	ldw	r2,112(sp)
   1a400:	10000426 	beq	r2,zero,1a414 <___svfiprintf_internal_r+0xd00>
   1a404:	d9402317 	ldw	r5,140(sp)
   1a408:	d9002717 	ldw	r4,156(sp)
   1a40c:	d9801a04 	addi	r6,sp,104
   1a410:	00195440 	call	19544 <__ssprint_r>
   1a414:	d9402317 	ldw	r5,140(sp)
   1a418:	d8802617 	ldw	r2,152(sp)
   1a41c:	28c0030b 	ldhu	r3,12(r5)
   1a420:	18c0100c 	andi	r3,r3,64
   1a424:	18015c1e 	bne	r3,zero,1a998 <___svfiprintf_internal_r+0x1284>
   1a428:	dfc03717 	ldw	ra,220(sp)
   1a42c:	df003617 	ldw	fp,216(sp)
   1a430:	ddc03517 	ldw	r23,212(sp)
   1a434:	dd803417 	ldw	r22,208(sp)
   1a438:	dd403317 	ldw	r21,204(sp)
   1a43c:	dd003217 	ldw	r20,200(sp)
   1a440:	dcc03117 	ldw	r19,196(sp)
   1a444:	dc803017 	ldw	r18,192(sp)
   1a448:	dc402f17 	ldw	r17,188(sp)
   1a44c:	dc002e17 	ldw	r16,184(sp)
   1a450:	dec03804 	addi	sp,sp,224
   1a454:	f800283a 	ret
   1a458:	d9002517 	ldw	r4,148(sp)
   1a45c:	24afc83a 	sub	r23,r4,r18
   1a460:	05ff6e0e 	bge	zero,r23,1a21c <__alt_data_end+0xfc01a21c>
   1a464:	07000404 	movi	fp,16
   1a468:	e5c15c0e 	bge	fp,r23,1a9dc <___svfiprintf_internal_r+0x12c8>
   1a46c:	010000f4 	movhi	r4,3
   1a470:	212ea804 	addi	r4,r4,-17760
   1a474:	dc002215 	stw	r16,136(sp)
   1a478:	dc402815 	stw	r17,160(sp)
   1a47c:	d9002115 	stw	r4,132(sp)
   1a480:	b823883a 	mov	r17,r23
   1a484:	054001c4 	movi	r21,7
   1a488:	982f883a 	mov	r23,r19
   1a48c:	dc002717 	ldw	r16,156(sp)
   1a490:	9027883a 	mov	r19,r18
   1a494:	dc802317 	ldw	r18,140(sp)
   1a498:	00000306 	br	1a4a8 <___svfiprintf_internal_r+0xd94>
   1a49c:	8c7ffc04 	addi	r17,r17,-16
   1a4a0:	42000204 	addi	r8,r8,8
   1a4a4:	e440110e 	bge	fp,r17,1a4ec <___svfiprintf_internal_r+0xdd8>
   1a4a8:	18c00404 	addi	r3,r3,16
   1a4ac:	10800044 	addi	r2,r2,1
   1a4b0:	45800015 	stw	r22,0(r8)
   1a4b4:	47000115 	stw	fp,4(r8)
   1a4b8:	d8c01c15 	stw	r3,112(sp)
   1a4bc:	d8801b15 	stw	r2,108(sp)
   1a4c0:	a8bff60e 	bge	r21,r2,1a49c <__alt_data_end+0xfc01a49c>
   1a4c4:	d9801a04 	addi	r6,sp,104
   1a4c8:	900b883a 	mov	r5,r18
   1a4cc:	8009883a 	mov	r4,r16
   1a4d0:	00195440 	call	19544 <__ssprint_r>
   1a4d4:	103fcf1e 	bne	r2,zero,1a414 <__alt_data_end+0xfc01a414>
   1a4d8:	8c7ffc04 	addi	r17,r17,-16
   1a4dc:	d8c01c17 	ldw	r3,112(sp)
   1a4e0:	d8801b17 	ldw	r2,108(sp)
   1a4e4:	d811883a 	mov	r8,sp
   1a4e8:	e47fef16 	blt	fp,r17,1a4a8 <__alt_data_end+0xfc01a4a8>
   1a4ec:	9825883a 	mov	r18,r19
   1a4f0:	dc002217 	ldw	r16,136(sp)
   1a4f4:	b827883a 	mov	r19,r23
   1a4f8:	882f883a 	mov	r23,r17
   1a4fc:	dc402817 	ldw	r17,160(sp)
   1a500:	d9402117 	ldw	r5,132(sp)
   1a504:	1dc7883a 	add	r3,r3,r23
   1a508:	10800044 	addi	r2,r2,1
   1a50c:	41400015 	stw	r5,0(r8)
   1a510:	45c00115 	stw	r23,4(r8)
   1a514:	d8c01c15 	stw	r3,112(sp)
   1a518:	d8801b15 	stw	r2,108(sp)
   1a51c:	010001c4 	movi	r4,7
   1a520:	2080b716 	blt	r4,r2,1a800 <___svfiprintf_internal_r+0x10ec>
   1a524:	42000204 	addi	r8,r8,8
   1a528:	003f3c06 	br	1a21c <__alt_data_end+0xfc01a21c>
   1a52c:	d9402317 	ldw	r5,140(sp)
   1a530:	d9002717 	ldw	r4,156(sp)
   1a534:	d9801a04 	addi	r6,sp,104
   1a538:	00195440 	call	19544 <__ssprint_r>
   1a53c:	103fb51e 	bne	r2,zero,1a414 <__alt_data_end+0xfc01a414>
   1a540:	d8c01c17 	ldw	r3,112(sp)
   1a544:	d811883a 	mov	r8,sp
   1a548:	003f7106 	br	1a310 <__alt_data_end+0xfc01a310>
   1a54c:	d9402317 	ldw	r5,140(sp)
   1a550:	d9002717 	ldw	r4,156(sp)
   1a554:	d9801a04 	addi	r6,sp,104
   1a558:	00195440 	call	19544 <__ssprint_r>
   1a55c:	103fa126 	beq	r2,zero,1a3e4 <__alt_data_end+0xfc01a3e4>
   1a560:	003fac06 	br	1a414 <__alt_data_end+0xfc01a414>
   1a564:	d9402317 	ldw	r5,140(sp)
   1a568:	d9002717 	ldw	r4,156(sp)
   1a56c:	d9801a04 	addi	r6,sp,104
   1a570:	00195440 	call	19544 <__ssprint_r>
   1a574:	103fa71e 	bne	r2,zero,1a414 <__alt_data_end+0xfc01a414>
   1a578:	d811883a 	mov	r8,sp
   1a57c:	003c9e06 	br	197f8 <__alt_data_end+0xfc0197f8>
   1a580:	d9402317 	ldw	r5,140(sp)
   1a584:	d9002717 	ldw	r4,156(sp)
   1a588:	d9801a04 	addi	r6,sp,104
   1a58c:	00195440 	call	19544 <__ssprint_r>
   1a590:	103fa01e 	bne	r2,zero,1a414 <__alt_data_end+0xfc01a414>
   1a594:	d8c01c17 	ldw	r3,112(sp)
   1a598:	d8801b17 	ldw	r2,108(sp)
   1a59c:	d811883a 	mov	r8,sp
   1a5a0:	003f5206 	br	1a2ec <__alt_data_end+0xfc01a2ec>
   1a5a4:	d9402317 	ldw	r5,140(sp)
   1a5a8:	d9002717 	ldw	r4,156(sp)
   1a5ac:	d9801a04 	addi	r6,sp,104
   1a5b0:	00195440 	call	19544 <__ssprint_r>
   1a5b4:	103f971e 	bne	r2,zero,1a414 <__alt_data_end+0xfc01a414>
   1a5b8:	d8c01c17 	ldw	r3,112(sp)
   1a5bc:	d8801b17 	ldw	r2,108(sp)
   1a5c0:	d811883a 	mov	r8,sp
   1a5c4:	003f0506 	br	1a1dc <__alt_data_end+0xfc01a1dc>
   1a5c8:	d9402317 	ldw	r5,140(sp)
   1a5cc:	d9002717 	ldw	r4,156(sp)
   1a5d0:	d9801a04 	addi	r6,sp,104
   1a5d4:	00195440 	call	19544 <__ssprint_r>
   1a5d8:	103f8e1e 	bne	r2,zero,1a414 <__alt_data_end+0xfc01a414>
   1a5dc:	d8c01c17 	ldw	r3,112(sp)
   1a5e0:	d8801b17 	ldw	r2,108(sp)
   1a5e4:	d811883a 	mov	r8,sp
   1a5e8:	003f0906 	br	1a210 <__alt_data_end+0xfc01a210>
   1a5ec:	d9402017 	ldw	r5,128(sp)
   1a5f0:	d8001d85 	stb	zero,118(sp)
   1a5f4:	28007716 	blt	r5,zero,1a7d4 <___svfiprintf_internal_r+0x10c0>
   1a5f8:	00ffdfc4 	movi	r3,-129
   1a5fc:	9504b03a 	or	r2,r18,r20
   1a600:	80e0703a 	and	r16,r16,r3
   1a604:	103d3926 	beq	r2,zero,19aec <__alt_data_end+0xfc019aec>
   1a608:	002b883a 	mov	r21,zero
   1a60c:	003d3c06 	br	19b00 <__alt_data_end+0xfc019b00>
   1a610:	d9402317 	ldw	r5,140(sp)
   1a614:	d9002717 	ldw	r4,156(sp)
   1a618:	d9801a04 	addi	r6,sp,104
   1a61c:	00195440 	call	19544 <__ssprint_r>
   1a620:	103f7c1e 	bne	r2,zero,1a414 <__alt_data_end+0xfc01a414>
   1a624:	d8c01c17 	ldw	r3,112(sp)
   1a628:	d8801b17 	ldw	r2,108(sp)
   1a62c:	d811883a 	mov	r8,sp
   1a630:	003edd06 	br	1a1a8 <__alt_data_end+0xfc01a1a8>
   1a634:	8080100c 	andi	r2,r16,64
   1a638:	d8001d85 	stb	zero,118(sp)
   1a63c:	10008426 	beq	r2,zero,1a850 <___svfiprintf_internal_r+0x113c>
   1a640:	d9402417 	ldw	r5,144(sp)
   1a644:	d8c02017 	ldw	r3,128(sp)
   1a648:	0029883a 	mov	r20,zero
   1a64c:	28800104 	addi	r2,r5,4
   1a650:	2c80000b 	ldhu	r18,0(r5)
   1a654:	183eab0e 	bge	r3,zero,1a104 <__alt_data_end+0xfc01a104>
   1a658:	d8802415 	stw	r2,144(sp)
   1a65c:	002b883a 	mov	r21,zero
   1a660:	9504b03a 	or	r2,r18,r20
   1a664:	103e171e 	bne	r2,zero,19ec4 <__alt_data_end+0xfc019ec4>
   1a668:	00800044 	movi	r2,1
   1a66c:	10803fcc 	andi	r2,r2,255
   1a670:	00c00044 	movi	r3,1
   1a674:	10c05c26 	beq	r2,r3,1a7e8 <___svfiprintf_internal_r+0x10d4>
   1a678:	00c00084 	movi	r3,2
   1a67c:	10fd1e26 	beq	r2,r3,19af8 <__alt_data_end+0xfc019af8>
   1a680:	003ec406 	br	1a194 <__alt_data_end+0xfc01a194>
   1a684:	d9401e17 	ldw	r5,120(sp)
   1a688:	2c69c83a 	sub	r20,r5,r17
   1a68c:	003d4506 	br	19ba4 <__alt_data_end+0xfc019ba4>
   1a690:	d8802415 	stw	r2,144(sp)
   1a694:	98c00007 	ldb	r3,0(r19)
   1a698:	003c6a06 	br	19844 <__alt_data_end+0xfc019844>
   1a69c:	d9402317 	ldw	r5,140(sp)
   1a6a0:	d9002717 	ldw	r4,156(sp)
   1a6a4:	d9801a04 	addi	r6,sp,104
   1a6a8:	00195440 	call	19544 <__ssprint_r>
   1a6ac:	103f591e 	bne	r2,zero,1a414 <__alt_data_end+0xfc01a414>
   1a6b0:	d8c01c17 	ldw	r3,112(sp)
   1a6b4:	003f4406 	br	1a3c8 <__alt_data_end+0xfc01a3c8>
   1a6b8:	014000f4 	movhi	r5,3
   1a6bc:	296e4004 	addi	r5,r5,-18176
   1a6c0:	d9402915 	stw	r5,164(sp)
   1a6c4:	003d0906 	br	19aec <__alt_data_end+0xfc019aec>
   1a6c8:	d8c02417 	ldw	r3,144(sp)
   1a6cc:	d9002617 	ldw	r4,152(sp)
   1a6d0:	d9402417 	ldw	r5,144(sp)
   1a6d4:	18800017 	ldw	r2,0(r3)
   1a6d8:	2007d7fa 	srai	r3,r4,31
   1a6dc:	29400104 	addi	r5,r5,4
   1a6e0:	d9402415 	stw	r5,144(sp)
   1a6e4:	11000015 	stw	r4,0(r2)
   1a6e8:	10c00115 	stw	r3,4(r2)
   1a6ec:	003c2b06 	br	1979c <__alt_data_end+0xfc01979c>
   1a6f0:	d8c01d45 	stb	r3,117(sp)
   1a6f4:	d8c02017 	ldw	r3,128(sp)
   1a6f8:	00800c04 	movi	r2,48
   1a6fc:	d8801d05 	stb	r2,116(sp)
   1a700:	d8001d85 	stb	zero,118(sp)
   1a704:	80800094 	ori	r2,r16,2
   1a708:	1800ac16 	blt	r3,zero,1a9bc <___svfiprintf_internal_r+0x12a8>
   1a70c:	00bfdfc4 	movi	r2,-129
   1a710:	80a0703a 	and	r16,r16,r2
   1a714:	84000094 	ori	r16,r16,2
   1a718:	002b883a 	mov	r21,zero
   1a71c:	003cf806 	br	19b00 <__alt_data_end+0xfc019b00>
   1a720:	98c00007 	ldb	r3,0(r19)
   1a724:	003c4706 	br	19844 <__alt_data_end+0xfc019844>
   1a728:	d9402417 	ldw	r5,144(sp)
   1a72c:	2c800017 	ldw	r18,0(r5)
   1a730:	29400104 	addi	r5,r5,4
   1a734:	d9402415 	stw	r5,144(sp)
   1a738:	9029d7fa 	srai	r20,r18,31
   1a73c:	a005883a 	mov	r2,r20
   1a740:	003dd806 	br	19ea4 <__alt_data_end+0xfc019ea4>
   1a744:	d9402417 	ldw	r5,144(sp)
   1a748:	0029883a 	mov	r20,zero
   1a74c:	2c800017 	ldw	r18,0(r5)
   1a750:	29400104 	addi	r5,r5,4
   1a754:	d9402415 	stw	r5,144(sp)
   1a758:	003cdb06 	br	19ac8 <__alt_data_end+0xfc019ac8>
   1a75c:	8080100c 	andi	r2,r16,64
   1a760:	d8001d85 	stb	zero,118(sp)
   1a764:	10003326 	beq	r2,zero,1a834 <___svfiprintf_internal_r+0x1120>
   1a768:	d9002417 	ldw	r4,144(sp)
   1a76c:	d9402017 	ldw	r5,128(sp)
   1a770:	0029883a 	mov	r20,zero
   1a774:	20800104 	addi	r2,r4,4
   1a778:	2480000b 	ldhu	r18,0(r4)
   1a77c:	283e7e0e 	bge	r5,zero,1a178 <__alt_data_end+0xfc01a178>
   1a780:	9506b03a 	or	r3,r18,r20
   1a784:	d8802415 	stw	r2,144(sp)
   1a788:	183d271e 	bne	r3,zero,19c28 <__alt_data_end+0xfc019c28>
   1a78c:	002b883a 	mov	r21,zero
   1a790:	0005883a 	mov	r2,zero
   1a794:	003fb506 	br	1a66c <__alt_data_end+0xfc01a66c>
   1a798:	98c00043 	ldbu	r3,1(r19)
   1a79c:	8c400814 	ori	r17,r17,32
   1a7a0:	9cc00044 	addi	r19,r19,1
   1a7a4:	18c03fcc 	andi	r3,r3,255
   1a7a8:	18c0201c 	xori	r3,r3,128
   1a7ac:	18ffe004 	addi	r3,r3,-128
   1a7b0:	003c2406 	br	19844 <__alt_data_end+0xfc019844>
   1a7b4:	d8c02415 	stw	r3,144(sp)
   1a7b8:	002b883a 	mov	r21,zero
   1a7bc:	003fa806 	br	1a660 <__alt_data_end+0xfc01a660>
   1a7c0:	010000f4 	movhi	r4,3
   1a7c4:	212e4004 	addi	r4,r4,-18176
   1a7c8:	d9002915 	stw	r4,164(sp)
   1a7cc:	d8c02415 	stw	r3,144(sp)
   1a7d0:	1021883a 	mov	r16,r2
   1a7d4:	9504b03a 	or	r2,r18,r20
   1a7d8:	103f8b1e 	bne	r2,zero,1a608 <__alt_data_end+0xfc01a608>
   1a7dc:	002b883a 	mov	r21,zero
   1a7e0:	00800084 	movi	r2,2
   1a7e4:	003fa106 	br	1a66c <__alt_data_end+0xfc01a66c>
   1a7e8:	0025883a 	mov	r18,zero
   1a7ec:	94800c04 	addi	r18,r18,48
   1a7f0:	dc8019c5 	stb	r18,103(sp)
   1a7f4:	dd002c17 	ldw	r20,176(sp)
   1a7f8:	dc4019c4 	addi	r17,sp,103
   1a7fc:	003ce906 	br	19ba4 <__alt_data_end+0xfc019ba4>
   1a800:	d9402317 	ldw	r5,140(sp)
   1a804:	d9002717 	ldw	r4,156(sp)
   1a808:	d9801a04 	addi	r6,sp,104
   1a80c:	00195440 	call	19544 <__ssprint_r>
   1a810:	103f001e 	bne	r2,zero,1a414 <__alt_data_end+0xfc01a414>
   1a814:	d8c01c17 	ldw	r3,112(sp)
   1a818:	d8801b17 	ldw	r2,108(sp)
   1a81c:	d811883a 	mov	r8,sp
   1a820:	003e7e06 	br	1a21c <__alt_data_end+0xfc01a21c>
   1a824:	014000f4 	movhi	r5,3
   1a828:	296ea804 	addi	r5,r5,-17760
   1a82c:	d9402115 	stw	r5,132(sp)
   1a830:	003ea406 	br	1a2c4 <__alt_data_end+0xfc01a2c4>
   1a834:	d8c02417 	ldw	r3,144(sp)
   1a838:	d9002017 	ldw	r4,128(sp)
   1a83c:	0029883a 	mov	r20,zero
   1a840:	18800104 	addi	r2,r3,4
   1a844:	1c800017 	ldw	r18,0(r3)
   1a848:	203e4b0e 	bge	r4,zero,1a178 <__alt_data_end+0xfc01a178>
   1a84c:	003fcc06 	br	1a780 <__alt_data_end+0xfc01a780>
   1a850:	d9002417 	ldw	r4,144(sp)
   1a854:	d9402017 	ldw	r5,128(sp)
   1a858:	0029883a 	mov	r20,zero
   1a85c:	20800104 	addi	r2,r4,4
   1a860:	24800017 	ldw	r18,0(r4)
   1a864:	283e270e 	bge	r5,zero,1a104 <__alt_data_end+0xfc01a104>
   1a868:	003f7b06 	br	1a658 <__alt_data_end+0xfc01a658>
   1a86c:	8400100c 	andi	r16,r16,64
   1a870:	80003326 	beq	r16,zero,1a940 <___svfiprintf_internal_r+0x122c>
   1a874:	d9402417 	ldw	r5,144(sp)
   1a878:	d8c02617 	ldw	r3,152(sp)
   1a87c:	28800017 	ldw	r2,0(r5)
   1a880:	29400104 	addi	r5,r5,4
   1a884:	d9402415 	stw	r5,144(sp)
   1a888:	10c0000d 	sth	r3,0(r2)
   1a88c:	003bc306 	br	1979c <__alt_data_end+0xfc01979c>
   1a890:	d9002417 	ldw	r4,144(sp)
   1a894:	0029883a 	mov	r20,zero
   1a898:	24800017 	ldw	r18,0(r4)
   1a89c:	21000104 	addi	r4,r4,4
   1a8a0:	d9002415 	stw	r4,144(sp)
   1a8a4:	003c8806 	br	19ac8 <__alt_data_end+0xfc019ac8>
   1a8a8:	d8c02417 	ldw	r3,144(sp)
   1a8ac:	1c800017 	ldw	r18,0(r3)
   1a8b0:	18c00104 	addi	r3,r3,4
   1a8b4:	d8c02415 	stw	r3,144(sp)
   1a8b8:	9029d7fa 	srai	r20,r18,31
   1a8bc:	a005883a 	mov	r2,r20
   1a8c0:	003d7806 	br	19ea4 <__alt_data_end+0xfc019ea4>
   1a8c4:	8809883a 	mov	r4,r17
   1a8c8:	da002d15 	stw	r8,180(sp)
   1a8cc:	00105480 	call	10548 <strlen>
   1a8d0:	1029883a 	mov	r20,r2
   1a8d4:	dd401d83 	ldbu	r21,118(sp)
   1a8d8:	ddc02415 	stw	r23,144(sp)
   1a8dc:	d8002015 	stw	zero,128(sp)
   1a8e0:	da002d17 	ldw	r8,180(sp)
   1a8e4:	003caf06 	br	19ba4 <__alt_data_end+0xfc019ba4>
   1a8e8:	013fffc4 	movi	r4,-1
   1a8ec:	003df206 	br	1a0b8 <__alt_data_end+0xfc01a0b8>
   1a8f0:	dd002017 	ldw	r20,128(sp)
   1a8f4:	00800184 	movi	r2,6
   1a8f8:	1500012e 	bgeu	r2,r20,1a900 <___svfiprintf_internal_r+0x11ec>
   1a8fc:	1029883a 	mov	r20,r2
   1a900:	a025883a 	mov	r18,r20
   1a904:	a0004116 	blt	r20,zero,1aa0c <___svfiprintf_internal_r+0x12f8>
   1a908:	044000f4 	movhi	r17,3
   1a90c:	ddc02415 	stw	r23,144(sp)
   1a910:	8c6e4504 	addi	r17,r17,-18156
   1a914:	003ce806 	br	19cb8 <__alt_data_end+0xfc019cb8>
   1a918:	04001004 	movi	r16,64
   1a91c:	800b883a 	mov	r5,r16
   1a920:	000f4740 	call	f474 <_malloc_r>
   1a924:	d8c02317 	ldw	r3,140(sp)
   1a928:	18800015 	stw	r2,0(r3)
   1a92c:	18800415 	stw	r2,16(r3)
   1a930:	10004d26 	beq	r2,zero,1aa68 <___svfiprintf_internal_r+0x1354>
   1a934:	d9402317 	ldw	r5,140(sp)
   1a938:	2c000515 	stw	r16,20(r5)
   1a93c:	003b8906 	br	19764 <__alt_data_end+0xfc019764>
   1a940:	d9002417 	ldw	r4,144(sp)
   1a944:	d9402617 	ldw	r5,152(sp)
   1a948:	20800017 	ldw	r2,0(r4)
   1a94c:	21000104 	addi	r4,r4,4
   1a950:	d9002415 	stw	r4,144(sp)
   1a954:	11400015 	stw	r5,0(r2)
   1a958:	003b9006 	br	1979c <__alt_data_end+0xfc01979c>
   1a95c:	8080004c 	andi	r2,r16,1
   1a960:	002b883a 	mov	r21,zero
   1a964:	10000526 	beq	r2,zero,1a97c <___svfiprintf_internal_r+0x1268>
   1a968:	00800c04 	movi	r2,48
   1a96c:	d88019c5 	stb	r2,103(sp)
   1a970:	dd002c17 	ldw	r20,176(sp)
   1a974:	dc4019c4 	addi	r17,sp,103
   1a978:	003c8a06 	br	19ba4 <__alt_data_end+0xfc019ba4>
   1a97c:	0029883a 	mov	r20,zero
   1a980:	dc401a04 	addi	r17,sp,104
   1a984:	003c8706 	br	19ba4 <__alt_data_end+0xfc019ba4>
   1a988:	014000f4 	movhi	r5,3
   1a98c:	296eac04 	addi	r5,r5,-17744
   1a990:	d9402815 	stw	r5,160(sp)
   1a994:	003cff06 	br	19d94 <__alt_data_end+0xfc019d94>
   1a998:	00bfffc4 	movi	r2,-1
   1a99c:	003ea206 	br	1a428 <__alt_data_end+0xfc01a428>
   1a9a0:	00800044 	movi	r2,1
   1a9a4:	10803fcc 	andi	r2,r2,255
   1a9a8:	00c00044 	movi	r3,1
   1a9ac:	10fd4526 	beq	r2,r3,19ec4 <__alt_data_end+0xfc019ec4>
   1a9b0:	00c00084 	movi	r3,2
   1a9b4:	10fc5226 	beq	r2,r3,19b00 <__alt_data_end+0xfc019b00>
   1a9b8:	003c9c06 	br	19c2c <__alt_data_end+0xfc019c2c>
   1a9bc:	1021883a 	mov	r16,r2
   1a9c0:	002b883a 	mov	r21,zero
   1a9c4:	00800084 	movi	r2,2
   1a9c8:	003ff606 	br	1a9a4 <__alt_data_end+0xfc01a9a4>
   1a9cc:	010000f4 	movhi	r4,3
   1a9d0:	212eac04 	addi	r4,r4,-17744
   1a9d4:	d9002815 	stw	r4,160(sp)
   1a9d8:	003e7206 	br	1a3a4 <__alt_data_end+0xfc01a3a4>
   1a9dc:	014000f4 	movhi	r5,3
   1a9e0:	296ea804 	addi	r5,r5,-17760
   1a9e4:	d9402115 	stw	r5,132(sp)
   1a9e8:	003ec506 	br	1a500 <__alt_data_end+0xfc01a500>
   1a9ec:	e027883a 	mov	r19,fp
   1a9f0:	d8002015 	stw	zero,128(sp)
   1a9f4:	003b9406 	br	19848 <__alt_data_end+0xfc019848>
   1a9f8:	dd002017 	ldw	r20,128(sp)
   1a9fc:	dd401d83 	ldbu	r21,118(sp)
   1aa00:	ddc02415 	stw	r23,144(sp)
   1aa04:	d8002015 	stw	zero,128(sp)
   1aa08:	003c6606 	br	19ba4 <__alt_data_end+0xfc019ba4>
   1aa0c:	0025883a 	mov	r18,zero
   1aa10:	003fbd06 	br	1a908 <__alt_data_end+0xfc01a908>
   1aa14:	d9402417 	ldw	r5,144(sp)
   1aa18:	d8c02417 	ldw	r3,144(sp)
   1aa1c:	29400017 	ldw	r5,0(r5)
   1aa20:	19000104 	addi	r4,r3,4
   1aa24:	d9002415 	stw	r4,144(sp)
   1aa28:	d9402015 	stw	r5,128(sp)
   1aa2c:	98c00043 	ldbu	r3,1(r19)
   1aa30:	e027883a 	mov	r19,fp
   1aa34:	283f5b0e 	bge	r5,zero,1a7a4 <__alt_data_end+0xfc01a7a4>
   1aa38:	18c03fcc 	andi	r3,r3,255
   1aa3c:	013fffc4 	movi	r4,-1
   1aa40:	18c0201c 	xori	r3,r3,128
   1aa44:	d9002015 	stw	r4,128(sp)
   1aa48:	18ffe004 	addi	r3,r3,-128
   1aa4c:	003b7d06 	br	19844 <__alt_data_end+0xfc019844>
   1aa50:	dd401d85 	stb	r21,118(sp)
   1aa54:	003cf306 	br	19e24 <__alt_data_end+0xfc019e24>
   1aa58:	dd401d85 	stb	r21,118(sp)
   1aa5c:	003d4e06 	br	19f98 <__alt_data_end+0xfc019f98>
   1aa60:	dd401d85 	stb	r21,118(sp)
   1aa64:	003c0e06 	br	19aa0 <__alt_data_end+0xfc019aa0>
   1aa68:	d9002717 	ldw	r4,156(sp)
   1aa6c:	00800304 	movi	r2,12
   1aa70:	20800015 	stw	r2,0(r4)
   1aa74:	00bfffc4 	movi	r2,-1
   1aa78:	003e6b06 	br	1a428 <__alt_data_end+0xfc01a428>
   1aa7c:	dd401d85 	stb	r21,118(sp)
   1aa80:	003d0006 	br	19e84 <__alt_data_end+0xfc019e84>
   1aa84:	dd401d85 	stb	r21,118(sp)
   1aa88:	003d7106 	br	1a050 <__alt_data_end+0xfc01a050>
   1aa8c:	dd401d85 	stb	r21,118(sp)
   1aa90:	003c5706 	br	19bf0 <__alt_data_end+0xfc019bf0>
   1aa94:	dd401d85 	stb	r21,118(sp)
   1aa98:	003c2e06 	br	19b54 <__alt_data_end+0xfc019b54>
   1aa9c:	dd401d85 	stb	r21,118(sp)
   1aaa0:	003d8c06 	br	1a0d4 <__alt_data_end+0xfc01a0d4>
   1aaa4:	dd401d85 	stb	r21,118(sp)
   1aaa8:	003da706 	br	1a148 <__alt_data_end+0xfc01a148>
   1aaac:	dd401d85 	stb	r21,118(sp)
   1aab0:	003cc806 	br	19dd4 <__alt_data_end+0xfc019dd4>

0001aab4 <__sprint_r.part.0>:
   1aab4:	28801917 	ldw	r2,100(r5)
   1aab8:	defff604 	addi	sp,sp,-40
   1aabc:	dd400515 	stw	r21,20(sp)
   1aac0:	dfc00915 	stw	ra,36(sp)
   1aac4:	df000815 	stw	fp,32(sp)
   1aac8:	ddc00715 	stw	r23,28(sp)
   1aacc:	dd800615 	stw	r22,24(sp)
   1aad0:	dd000415 	stw	r20,16(sp)
   1aad4:	dcc00315 	stw	r19,12(sp)
   1aad8:	dc800215 	stw	r18,8(sp)
   1aadc:	dc400115 	stw	r17,4(sp)
   1aae0:	dc000015 	stw	r16,0(sp)
   1aae4:	1088000c 	andi	r2,r2,8192
   1aae8:	302b883a 	mov	r21,r6
   1aaec:	10002e26 	beq	r2,zero,1aba8 <__sprint_r.part.0+0xf4>
   1aaf0:	30800217 	ldw	r2,8(r6)
   1aaf4:	35800017 	ldw	r22,0(r6)
   1aaf8:	10002926 	beq	r2,zero,1aba0 <__sprint_r.part.0+0xec>
   1aafc:	2827883a 	mov	r19,r5
   1ab00:	2029883a 	mov	r20,r4
   1ab04:	b5c00104 	addi	r23,r22,4
   1ab08:	04bfffc4 	movi	r18,-1
   1ab0c:	bc400017 	ldw	r17,0(r23)
   1ab10:	b4000017 	ldw	r16,0(r22)
   1ab14:	0039883a 	mov	fp,zero
   1ab18:	8822d0ba 	srli	r17,r17,2
   1ab1c:	8800031e 	bne	r17,zero,1ab2c <__sprint_r.part.0+0x78>
   1ab20:	00001806 	br	1ab84 <__sprint_r.part.0+0xd0>
   1ab24:	84000104 	addi	r16,r16,4
   1ab28:	8f001526 	beq	r17,fp,1ab80 <__sprint_r.part.0+0xcc>
   1ab2c:	81400017 	ldw	r5,0(r16)
   1ab30:	980d883a 	mov	r6,r19
   1ab34:	a009883a 	mov	r4,r20
   1ab38:	001c6fc0 	call	1c6fc <_fputwc_r>
   1ab3c:	e7000044 	addi	fp,fp,1
   1ab40:	14bff81e 	bne	r2,r18,1ab24 <__alt_data_end+0xfc01ab24>
   1ab44:	9005883a 	mov	r2,r18
   1ab48:	a8000215 	stw	zero,8(r21)
   1ab4c:	a8000115 	stw	zero,4(r21)
   1ab50:	dfc00917 	ldw	ra,36(sp)
   1ab54:	df000817 	ldw	fp,32(sp)
   1ab58:	ddc00717 	ldw	r23,28(sp)
   1ab5c:	dd800617 	ldw	r22,24(sp)
   1ab60:	dd400517 	ldw	r21,20(sp)
   1ab64:	dd000417 	ldw	r20,16(sp)
   1ab68:	dcc00317 	ldw	r19,12(sp)
   1ab6c:	dc800217 	ldw	r18,8(sp)
   1ab70:	dc400117 	ldw	r17,4(sp)
   1ab74:	dc000017 	ldw	r16,0(sp)
   1ab78:	dec00a04 	addi	sp,sp,40
   1ab7c:	f800283a 	ret
   1ab80:	a8800217 	ldw	r2,8(r21)
   1ab84:	8c63883a 	add	r17,r17,r17
   1ab88:	8c63883a 	add	r17,r17,r17
   1ab8c:	1445c83a 	sub	r2,r2,r17
   1ab90:	a8800215 	stw	r2,8(r21)
   1ab94:	b5800204 	addi	r22,r22,8
   1ab98:	bdc00204 	addi	r23,r23,8
   1ab9c:	103fdb1e 	bne	r2,zero,1ab0c <__alt_data_end+0xfc01ab0c>
   1aba0:	0005883a 	mov	r2,zero
   1aba4:	003fe806 	br	1ab48 <__alt_data_end+0xfc01ab48>
   1aba8:	00170e80 	call	170e8 <__sfvwrite_r>
   1abac:	003fe606 	br	1ab48 <__alt_data_end+0xfc01ab48>

0001abb0 <__sprint_r>:
   1abb0:	30c00217 	ldw	r3,8(r6)
   1abb4:	18000126 	beq	r3,zero,1abbc <__sprint_r+0xc>
   1abb8:	001aab41 	jmpi	1aab4 <__sprint_r.part.0>
   1abbc:	30000115 	stw	zero,4(r6)
   1abc0:	0005883a 	mov	r2,zero
   1abc4:	f800283a 	ret

0001abc8 <___vfiprintf_internal_r>:
   1abc8:	deffca04 	addi	sp,sp,-216
   1abcc:	dd403115 	stw	r21,196(sp)
   1abd0:	dfc03515 	stw	ra,212(sp)
   1abd4:	df003415 	stw	fp,208(sp)
   1abd8:	ddc03315 	stw	r23,204(sp)
   1abdc:	dd803215 	stw	r22,200(sp)
   1abe0:	dd003015 	stw	r20,192(sp)
   1abe4:	dcc02f15 	stw	r19,188(sp)
   1abe8:	dc802e15 	stw	r18,184(sp)
   1abec:	dc402d15 	stw	r17,180(sp)
   1abf0:	dc002c15 	stw	r16,176(sp)
   1abf4:	d9002115 	stw	r4,132(sp)
   1abf8:	d9402015 	stw	r5,128(sp)
   1abfc:	d9c02215 	stw	r7,136(sp)
   1ac00:	302b883a 	mov	r21,r6
   1ac04:	20000226 	beq	r4,zero,1ac10 <___vfiprintf_internal_r+0x48>
   1ac08:	20800e17 	ldw	r2,56(r4)
   1ac0c:	1000cf26 	beq	r2,zero,1af4c <___vfiprintf_internal_r+0x384>
   1ac10:	d8c02017 	ldw	r3,128(sp)
   1ac14:	1880030b 	ldhu	r2,12(r3)
   1ac18:	10c8000c 	andi	r3,r2,8192
   1ac1c:	1800071e 	bne	r3,zero,1ac3c <___vfiprintf_internal_r+0x74>
   1ac20:	d9402017 	ldw	r5,128(sp)
   1ac24:	00f7ffc4 	movi	r3,-8193
   1ac28:	10880014 	ori	r2,r2,8192
   1ac2c:	29001917 	ldw	r4,100(r5)
   1ac30:	2880030d 	sth	r2,12(r5)
   1ac34:	20c6703a 	and	r3,r4,r3
   1ac38:	28c01915 	stw	r3,100(r5)
   1ac3c:	10c0020c 	andi	r3,r2,8
   1ac40:	1800a526 	beq	r3,zero,1aed8 <___vfiprintf_internal_r+0x310>
   1ac44:	d9002017 	ldw	r4,128(sp)
   1ac48:	20c00417 	ldw	r3,16(r4)
   1ac4c:	1800a226 	beq	r3,zero,1aed8 <___vfiprintf_internal_r+0x310>
   1ac50:	1080068c 	andi	r2,r2,26
   1ac54:	00c00284 	movi	r3,10
   1ac58:	10c0a826 	beq	r2,r3,1aefc <___vfiprintf_internal_r+0x334>
   1ac5c:	d9001a04 	addi	r4,sp,104
   1ac60:	d94019c4 	addi	r5,sp,103
   1ac64:	048000f4 	movhi	r18,3
   1ac68:	2145c83a 	sub	r2,r4,r5
   1ac6c:	94aeb004 	addi	r18,r18,-17728
   1ac70:	d9001e15 	stw	r4,120(sp)
   1ac74:	d9401f15 	stw	r5,124(sp)
   1ac78:	dec01a15 	stw	sp,104(sp)
   1ac7c:	d8001c15 	stw	zero,112(sp)
   1ac80:	d8001b15 	stw	zero,108(sp)
   1ac84:	d811883a 	mov	r8,sp
   1ac88:	d8002615 	stw	zero,152(sp)
   1ac8c:	d8002415 	stw	zero,144(sp)
   1ac90:	d8802815 	stw	r2,160(sp)
   1ac94:	a82d883a 	mov	r22,r21
   1ac98:	b0800007 	ldb	r2,0(r22)
   1ac9c:	10040d26 	beq	r2,zero,1bcd4 <___vfiprintf_internal_r+0x110c>
   1aca0:	00c00944 	movi	r3,37
   1aca4:	b029883a 	mov	r20,r22
   1aca8:	10c0021e 	bne	r2,r3,1acb4 <___vfiprintf_internal_r+0xec>
   1acac:	00001606 	br	1ad08 <___vfiprintf_internal_r+0x140>
   1acb0:	10c00326 	beq	r2,r3,1acc0 <___vfiprintf_internal_r+0xf8>
   1acb4:	a5000044 	addi	r20,r20,1
   1acb8:	a0800007 	ldb	r2,0(r20)
   1acbc:	103ffc1e 	bne	r2,zero,1acb0 <__alt_data_end+0xfc01acb0>
   1acc0:	a5a1c83a 	sub	r16,r20,r22
   1acc4:	80001026 	beq	r16,zero,1ad08 <___vfiprintf_internal_r+0x140>
   1acc8:	d8c01c17 	ldw	r3,112(sp)
   1accc:	d8801b17 	ldw	r2,108(sp)
   1acd0:	45800015 	stw	r22,0(r8)
   1acd4:	80c7883a 	add	r3,r16,r3
   1acd8:	10800044 	addi	r2,r2,1
   1acdc:	44000115 	stw	r16,4(r8)
   1ace0:	d8c01c15 	stw	r3,112(sp)
   1ace4:	d8801b15 	stw	r2,108(sp)
   1ace8:	010001c4 	movi	r4,7
   1acec:	2080750e 	bge	r4,r2,1aec4 <___vfiprintf_internal_r+0x2fc>
   1acf0:	1803951e 	bne	r3,zero,1bb48 <___vfiprintf_internal_r+0xf80>
   1acf4:	d8c02417 	ldw	r3,144(sp)
   1acf8:	d8001b15 	stw	zero,108(sp)
   1acfc:	d811883a 	mov	r8,sp
   1ad00:	1c07883a 	add	r3,r3,r16
   1ad04:	d8c02415 	stw	r3,144(sp)
   1ad08:	a0800007 	ldb	r2,0(r20)
   1ad0c:	1002e026 	beq	r2,zero,1b890 <___vfiprintf_internal_r+0xcc8>
   1ad10:	a5800044 	addi	r22,r20,1
   1ad14:	a0c00047 	ldb	r3,1(r20)
   1ad18:	d8001d85 	stb	zero,118(sp)
   1ad1c:	0027883a 	mov	r19,zero
   1ad20:	d8002305 	stb	zero,140(sp)
   1ad24:	043fffc4 	movi	r16,-1
   1ad28:	d8002515 	stw	zero,148(sp)
   1ad2c:	0023883a 	mov	r17,zero
   1ad30:	05001604 	movi	r20,88
   1ad34:	05400244 	movi	r21,9
   1ad38:	402f883a 	mov	r23,r8
   1ad3c:	b5800044 	addi	r22,r22,1
   1ad40:	18bff804 	addi	r2,r3,-32
   1ad44:	a0827736 	bltu	r20,r2,1b724 <___vfiprintf_internal_r+0xb5c>
   1ad48:	100490ba 	slli	r2,r2,2
   1ad4c:	010000b4 	movhi	r4,2
   1ad50:	212b5804 	addi	r4,r4,-21152
   1ad54:	1105883a 	add	r2,r2,r4
   1ad58:	10800017 	ldw	r2,0(r2)
   1ad5c:	1000683a 	jmp	r2
   1ad60:	0001b424 	muli	zero,zero,1744
   1ad64:	0001b724 	muli	zero,zero,1756
   1ad68:	0001b724 	muli	zero,zero,1756
   1ad6c:	0001b440 	call	1b44 <_ZN3USB4TaskEv+0x328>
   1ad70:	0001b724 	muli	zero,zero,1756
   1ad74:	0001b724 	muli	zero,zero,1756
   1ad78:	0001b724 	muli	zero,zero,1756
   1ad7c:	0001b724 	muli	zero,zero,1756
   1ad80:	0001b724 	muli	zero,zero,1756
   1ad84:	0001b724 	muli	zero,zero,1756
   1ad88:	0001b648 	cmpgei	zero,zero,1753
   1ad8c:	0001b66c 	andhi	zero,zero,1753
   1ad90:	0001b724 	muli	zero,zero,1756
   1ad94:	0001af64 	muli	zero,zero,1725
   1ad98:	0001b680 	call	1b68 <_ZN3USB4TaskEv+0x34c>
   1ad9c:	0001b724 	muli	zero,zero,1756
   1ada0:	0001b44c 	andi	zero,zero,1745
   1ada4:	0001b458 	cmpnei	zero,zero,1745
   1ada8:	0001b458 	cmpnei	zero,zero,1745
   1adac:	0001b458 	cmpnei	zero,zero,1745
   1adb0:	0001b458 	cmpnei	zero,zero,1745
   1adb4:	0001b458 	cmpnei	zero,zero,1745
   1adb8:	0001b458 	cmpnei	zero,zero,1745
   1adbc:	0001b458 	cmpnei	zero,zero,1745
   1adc0:	0001b458 	cmpnei	zero,zero,1745
   1adc4:	0001b458 	cmpnei	zero,zero,1745
   1adc8:	0001b724 	muli	zero,zero,1756
   1adcc:	0001b724 	muli	zero,zero,1756
   1add0:	0001b724 	muli	zero,zero,1756
   1add4:	0001b724 	muli	zero,zero,1756
   1add8:	0001b724 	muli	zero,zero,1756
   1addc:	0001b724 	muli	zero,zero,1756
   1ade0:	0001b724 	muli	zero,zero,1756
   1ade4:	0001b724 	muli	zero,zero,1756
   1ade8:	0001b724 	muli	zero,zero,1756
   1adec:	0001b724 	muli	zero,zero,1756
   1adf0:	0001b498 	cmpnei	zero,zero,1746
   1adf4:	0001b724 	muli	zero,zero,1756
   1adf8:	0001b724 	muli	zero,zero,1756
   1adfc:	0001b724 	muli	zero,zero,1756
   1ae00:	0001b724 	muli	zero,zero,1756
   1ae04:	0001b724 	muli	zero,zero,1756
   1ae08:	0001b724 	muli	zero,zero,1756
   1ae0c:	0001b724 	muli	zero,zero,1756
   1ae10:	0001b724 	muli	zero,zero,1756
   1ae14:	0001b724 	muli	zero,zero,1756
   1ae18:	0001b724 	muli	zero,zero,1756
   1ae1c:	0001b4d4 	movui	zero,1747
   1ae20:	0001b724 	muli	zero,zero,1756
   1ae24:	0001b724 	muli	zero,zero,1756
   1ae28:	0001b724 	muli	zero,zero,1756
   1ae2c:	0001b724 	muli	zero,zero,1756
   1ae30:	0001b724 	muli	zero,zero,1756
   1ae34:	0001b530 	cmpltui	zero,zero,1748
   1ae38:	0001b724 	muli	zero,zero,1756
   1ae3c:	0001b724 	muli	zero,zero,1756
   1ae40:	0001b5a4 	muli	zero,zero,1750
   1ae44:	0001b724 	muli	zero,zero,1756
   1ae48:	0001b724 	muli	zero,zero,1756
   1ae4c:	0001b724 	muli	zero,zero,1756
   1ae50:	0001b724 	muli	zero,zero,1756
   1ae54:	0001b724 	muli	zero,zero,1756
   1ae58:	0001b724 	muli	zero,zero,1756
   1ae5c:	0001b724 	muli	zero,zero,1756
   1ae60:	0001b724 	muli	zero,zero,1756
   1ae64:	0001b724 	muli	zero,zero,1756
   1ae68:	0001b724 	muli	zero,zero,1756
   1ae6c:	0001b34c 	andi	zero,zero,1741
   1ae70:	0001b37c 	xorhi	zero,zero,1741
   1ae74:	0001b724 	muli	zero,zero,1756
   1ae78:	0001b724 	muli	zero,zero,1756
   1ae7c:	0001b724 	muli	zero,zero,1756
   1ae80:	0001b6cc 	andi	zero,zero,1755
   1ae84:	0001b37c 	xorhi	zero,zero,1741
   1ae88:	0001b724 	muli	zero,zero,1756
   1ae8c:	0001b724 	muli	zero,zero,1756
   1ae90:	0001b224 	muli	zero,zero,1736
   1ae94:	0001b724 	muli	zero,zero,1756
   1ae98:	0001b238 	rdprs	zero,zero,1736
   1ae9c:	0001b270 	cmpltui	zero,zero,1737
   1aea0:	0001af70 	cmpltui	zero,zero,1725
   1aea4:	0001b218 	cmpnei	zero,zero,1736
   1aea8:	0001b724 	muli	zero,zero,1756
   1aeac:	0001b5e4 	muli	zero,zero,1751
   1aeb0:	0001b724 	muli	zero,zero,1756
   1aeb4:	0001b630 	cmpltui	zero,zero,1752
   1aeb8:	0001b724 	muli	zero,zero,1756
   1aebc:	0001b724 	muli	zero,zero,1756
   1aec0:	0001b2f4 	movhi	zero,1739
   1aec4:	42000204 	addi	r8,r8,8
   1aec8:	d8c02417 	ldw	r3,144(sp)
   1aecc:	1c07883a 	add	r3,r3,r16
   1aed0:	d8c02415 	stw	r3,144(sp)
   1aed4:	003f8c06 	br	1ad08 <__alt_data_end+0xfc01ad08>
   1aed8:	d9402017 	ldw	r5,128(sp)
   1aedc:	d9002117 	ldw	r4,132(sp)
   1aee0:	0014c580 	call	14c58 <__swsetup_r>
   1aee4:	1003c11e 	bne	r2,zero,1bdec <___vfiprintf_internal_r+0x1224>
   1aee8:	d9402017 	ldw	r5,128(sp)
   1aeec:	00c00284 	movi	r3,10
   1aef0:	2880030b 	ldhu	r2,12(r5)
   1aef4:	1080068c 	andi	r2,r2,26
   1aef8:	10ff581e 	bne	r2,r3,1ac5c <__alt_data_end+0xfc01ac5c>
   1aefc:	d8c02017 	ldw	r3,128(sp)
   1af00:	1880038f 	ldh	r2,14(r3)
   1af04:	103f5516 	blt	r2,zero,1ac5c <__alt_data_end+0xfc01ac5c>
   1af08:	d9c02217 	ldw	r7,136(sp)
   1af0c:	d9002117 	ldw	r4,132(sp)
   1af10:	a80d883a 	mov	r6,r21
   1af14:	180b883a 	mov	r5,r3
   1af18:	001c0f00 	call	1c0f0 <__sbprintf>
   1af1c:	dfc03517 	ldw	ra,212(sp)
   1af20:	df003417 	ldw	fp,208(sp)
   1af24:	ddc03317 	ldw	r23,204(sp)
   1af28:	dd803217 	ldw	r22,200(sp)
   1af2c:	dd403117 	ldw	r21,196(sp)
   1af30:	dd003017 	ldw	r20,192(sp)
   1af34:	dcc02f17 	ldw	r19,188(sp)
   1af38:	dc802e17 	ldw	r18,184(sp)
   1af3c:	dc402d17 	ldw	r17,180(sp)
   1af40:	dc002c17 	ldw	r16,176(sp)
   1af44:	dec03604 	addi	sp,sp,216
   1af48:	f800283a 	ret
   1af4c:	0016c640 	call	16c64 <__sinit>
   1af50:	003f2f06 	br	1ac10 <__alt_data_end+0xfc01ac10>
   1af54:	d8c02517 	ldw	r3,148(sp)
   1af58:	d8802215 	stw	r2,136(sp)
   1af5c:	00c7c83a 	sub	r3,zero,r3
   1af60:	d8c02515 	stw	r3,148(sp)
   1af64:	8c400114 	ori	r17,r17,4
   1af68:	b0c00007 	ldb	r3,0(r22)
   1af6c:	003f7306 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1af70:	00800c04 	movi	r2,48
   1af74:	d9402217 	ldw	r5,136(sp)
   1af78:	d8801d05 	stb	r2,116(sp)
   1af7c:	00801e04 	movi	r2,120
   1af80:	d8801d45 	stb	r2,117(sp)
   1af84:	d8001d85 	stb	zero,118(sp)
   1af88:	b811883a 	mov	r8,r23
   1af8c:	28c00104 	addi	r3,r5,4
   1af90:	2cc00017 	ldw	r19,0(r5)
   1af94:	0029883a 	mov	r20,zero
   1af98:	88800094 	ori	r2,r17,2
   1af9c:	80032516 	blt	r16,zero,1bc34 <___vfiprintf_internal_r+0x106c>
   1afa0:	00bfdfc4 	movi	r2,-129
   1afa4:	88a2703a 	and	r17,r17,r2
   1afa8:	d8c02215 	stw	r3,136(sp)
   1afac:	8c400094 	ori	r17,r17,2
   1afb0:	98032a1e 	bne	r19,zero,1bc5c <___vfiprintf_internal_r+0x1094>
   1afb4:	008000f4 	movhi	r2,3
   1afb8:	10ae4004 	addi	r2,r2,-18176
   1afbc:	d8802615 	stw	r2,152(sp)
   1afc0:	002b883a 	mov	r21,zero
   1afc4:	8001741e 	bne	r16,zero,1b598 <___vfiprintf_internal_r+0x9d0>
   1afc8:	0021883a 	mov	r16,zero
   1afcc:	0029883a 	mov	r20,zero
   1afd0:	ddc01a04 	addi	r23,sp,104
   1afd4:	8027883a 	mov	r19,r16
   1afd8:	8500010e 	bge	r16,r20,1afe0 <___vfiprintf_internal_r+0x418>
   1afdc:	a027883a 	mov	r19,r20
   1afe0:	ad403fcc 	andi	r21,r21,255
   1afe4:	ad40201c 	xori	r21,r21,128
   1afe8:	ad7fe004 	addi	r21,r21,-128
   1afec:	a8000126 	beq	r21,zero,1aff4 <___vfiprintf_internal_r+0x42c>
   1aff0:	9cc00044 	addi	r19,r19,1
   1aff4:	89c0008c 	andi	r7,r17,2
   1aff8:	38000126 	beq	r7,zero,1b000 <___vfiprintf_internal_r+0x438>
   1affc:	9cc00084 	addi	r19,r19,2
   1b000:	88c0210c 	andi	r3,r17,132
   1b004:	1801dd1e 	bne	r3,zero,1b77c <___vfiprintf_internal_r+0xbb4>
   1b008:	d9402517 	ldw	r5,148(sp)
   1b00c:	2cebc83a 	sub	r21,r5,r19
   1b010:	0541da0e 	bge	zero,r21,1b77c <___vfiprintf_internal_r+0xbb4>
   1b014:	07000404 	movi	fp,16
   1b018:	d8801c17 	ldw	r2,112(sp)
   1b01c:	e543be0e 	bge	fp,r21,1bf18 <___vfiprintf_internal_r+0x1350>
   1b020:	014000f4 	movhi	r5,3
   1b024:	296eb404 	addi	r5,r5,-17712
   1b028:	dc002715 	stw	r16,156(sp)
   1b02c:	d9801b17 	ldw	r6,108(sp)
   1b030:	a821883a 	mov	r16,r21
   1b034:	d9402315 	stw	r5,140(sp)
   1b038:	028001c4 	movi	r10,7
   1b03c:	d9c02915 	stw	r7,164(sp)
   1b040:	182b883a 	mov	r21,r3
   1b044:	00000506 	br	1b05c <___vfiprintf_internal_r+0x494>
   1b048:	31000084 	addi	r4,r6,2
   1b04c:	42000204 	addi	r8,r8,8
   1b050:	180d883a 	mov	r6,r3
   1b054:	843ffc04 	addi	r16,r16,-16
   1b058:	e4000f0e 	bge	fp,r16,1b098 <___vfiprintf_internal_r+0x4d0>
   1b05c:	010000f4 	movhi	r4,3
   1b060:	10800404 	addi	r2,r2,16
   1b064:	30c00044 	addi	r3,r6,1
   1b068:	212eb404 	addi	r4,r4,-17712
   1b06c:	41000015 	stw	r4,0(r8)
   1b070:	47000115 	stw	fp,4(r8)
   1b074:	d8801c15 	stw	r2,112(sp)
   1b078:	d8c01b15 	stw	r3,108(sp)
   1b07c:	50fff20e 	bge	r10,r3,1b048 <__alt_data_end+0xfc01b048>
   1b080:	1001b21e 	bne	r2,zero,1b74c <___vfiprintf_internal_r+0xb84>
   1b084:	843ffc04 	addi	r16,r16,-16
   1b088:	000d883a 	mov	r6,zero
   1b08c:	01000044 	movi	r4,1
   1b090:	d811883a 	mov	r8,sp
   1b094:	e43ff116 	blt	fp,r16,1b05c <__alt_data_end+0xfc01b05c>
   1b098:	a807883a 	mov	r3,r21
   1b09c:	d9c02917 	ldw	r7,164(sp)
   1b0a0:	802b883a 	mov	r21,r16
   1b0a4:	dc002717 	ldw	r16,156(sp)
   1b0a8:	d9402317 	ldw	r5,140(sp)
   1b0ac:	a885883a 	add	r2,r21,r2
   1b0b0:	45400115 	stw	r21,4(r8)
   1b0b4:	41400015 	stw	r5,0(r8)
   1b0b8:	d8801c15 	stw	r2,112(sp)
   1b0bc:	d9001b15 	stw	r4,108(sp)
   1b0c0:	014001c4 	movi	r5,7
   1b0c4:	29026216 	blt	r5,r4,1ba50 <___vfiprintf_internal_r+0xe88>
   1b0c8:	d9801d87 	ldb	r6,118(sp)
   1b0cc:	42000204 	addi	r8,r8,8
   1b0d0:	21400044 	addi	r5,r4,1
   1b0d4:	3001ae1e 	bne	r6,zero,1b790 <___vfiprintf_internal_r+0xbc8>
   1b0d8:	3801bb26 	beq	r7,zero,1b7c8 <___vfiprintf_internal_r+0xc00>
   1b0dc:	d9001d04 	addi	r4,sp,116
   1b0e0:	10800084 	addi	r2,r2,2
   1b0e4:	41000015 	stw	r4,0(r8)
   1b0e8:	01000084 	movi	r4,2
   1b0ec:	41000115 	stw	r4,4(r8)
   1b0f0:	d8801c15 	stw	r2,112(sp)
   1b0f4:	d9401b15 	stw	r5,108(sp)
   1b0f8:	010001c4 	movi	r4,7
   1b0fc:	2142680e 	bge	r4,r5,1baa0 <___vfiprintf_internal_r+0xed8>
   1b100:	1002b11e 	bne	r2,zero,1bbc8 <___vfiprintf_internal_r+0x1000>
   1b104:	01802004 	movi	r6,128
   1b108:	01400044 	movi	r5,1
   1b10c:	0009883a 	mov	r4,zero
   1b110:	d811883a 	mov	r8,sp
   1b114:	1981ae1e 	bne	r3,r6,1b7d0 <___vfiprintf_internal_r+0xc08>
   1b118:	d8c02517 	ldw	r3,148(sp)
   1b11c:	1cf9c83a 	sub	fp,r3,r19
   1b120:	0701ab0e 	bge	zero,fp,1b7d0 <___vfiprintf_internal_r+0xc08>
   1b124:	05400404 	movi	r21,16
   1b128:	af03a90e 	bge	r21,fp,1bfd0 <___vfiprintf_internal_r+0x1408>
   1b12c:	014000f4 	movhi	r5,3
   1b130:	296eb004 	addi	r5,r5,-17728
   1b134:	d9402315 	stw	r5,140(sp)
   1b138:	01c001c4 	movi	r7,7
   1b13c:	00000506 	br	1b154 <___vfiprintf_internal_r+0x58c>
   1b140:	21800084 	addi	r6,r4,2
   1b144:	42000204 	addi	r8,r8,8
   1b148:	1809883a 	mov	r4,r3
   1b14c:	e73ffc04 	addi	fp,fp,-16
   1b150:	af000d0e 	bge	r21,fp,1b188 <___vfiprintf_internal_r+0x5c0>
   1b154:	10800404 	addi	r2,r2,16
   1b158:	20c00044 	addi	r3,r4,1
   1b15c:	44800015 	stw	r18,0(r8)
   1b160:	45400115 	stw	r21,4(r8)
   1b164:	d8801c15 	stw	r2,112(sp)
   1b168:	d8c01b15 	stw	r3,108(sp)
   1b16c:	38fff40e 	bge	r7,r3,1b140 <__alt_data_end+0xfc01b140>
   1b170:	10022b1e 	bne	r2,zero,1ba20 <___vfiprintf_internal_r+0xe58>
   1b174:	e73ffc04 	addi	fp,fp,-16
   1b178:	01800044 	movi	r6,1
   1b17c:	0009883a 	mov	r4,zero
   1b180:	d811883a 	mov	r8,sp
   1b184:	af3ff316 	blt	r21,fp,1b154 <__alt_data_end+0xfc01b154>
   1b188:	d8c02317 	ldw	r3,140(sp)
   1b18c:	1705883a 	add	r2,r2,fp
   1b190:	47000115 	stw	fp,4(r8)
   1b194:	40c00015 	stw	r3,0(r8)
   1b198:	d8801c15 	stw	r2,112(sp)
   1b19c:	d9801b15 	stw	r6,108(sp)
   1b1a0:	00c001c4 	movi	r3,7
   1b1a4:	19829416 	blt	r3,r6,1bbf8 <___vfiprintf_internal_r+0x1030>
   1b1a8:	8521c83a 	sub	r16,r16,r20
   1b1ac:	42000204 	addi	r8,r8,8
   1b1b0:	31400044 	addi	r5,r6,1
   1b1b4:	3009883a 	mov	r4,r6
   1b1b8:	04018716 	blt	zero,r16,1b7d8 <___vfiprintf_internal_r+0xc10>
   1b1bc:	a085883a 	add	r2,r20,r2
   1b1c0:	45c00015 	stw	r23,0(r8)
   1b1c4:	45000115 	stw	r20,4(r8)
   1b1c8:	d8801c15 	stw	r2,112(sp)
   1b1cc:	d9401b15 	stw	r5,108(sp)
   1b1d0:	00c001c4 	movi	r3,7
   1b1d4:	1941c20e 	bge	r3,r5,1b8e0 <___vfiprintf_internal_r+0xd18>
   1b1d8:	1002531e 	bne	r2,zero,1bb28 <___vfiprintf_internal_r+0xf60>
   1b1dc:	d8001b15 	stw	zero,108(sp)
   1b1e0:	8c40010c 	andi	r17,r17,4
   1b1e4:	88023226 	beq	r17,zero,1bab0 <___vfiprintf_internal_r+0xee8>
   1b1e8:	d9002517 	ldw	r4,148(sp)
   1b1ec:	24e3c83a 	sub	r17,r4,r19
   1b1f0:	04432916 	blt	zero,r17,1be98 <___vfiprintf_internal_r+0x12d0>
   1b1f4:	d8802517 	ldw	r2,148(sp)
   1b1f8:	14c0010e 	bge	r2,r19,1b200 <___vfiprintf_internal_r+0x638>
   1b1fc:	9805883a 	mov	r2,r19
   1b200:	d8c02417 	ldw	r3,144(sp)
   1b204:	1887883a 	add	r3,r3,r2
   1b208:	d8c02415 	stw	r3,144(sp)
   1b20c:	d8001b15 	stw	zero,108(sp)
   1b210:	d811883a 	mov	r8,sp
   1b214:	003ea006 	br	1ac98 <__alt_data_end+0xfc01ac98>
   1b218:	8c400814 	ori	r17,r17,32
   1b21c:	b0c00007 	ldb	r3,0(r22)
   1b220:	003ec606 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1b224:	b0c00007 	ldb	r3,0(r22)
   1b228:	00801b04 	movi	r2,108
   1b22c:	18832026 	beq	r3,r2,1beb0 <___vfiprintf_internal_r+0x12e8>
   1b230:	8c400414 	ori	r17,r17,16
   1b234:	003ec106 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1b238:	9cc03fcc 	andi	r19,r19,255
   1b23c:	b811883a 	mov	r8,r23
   1b240:	9803981e 	bne	r19,zero,1c0a4 <___vfiprintf_internal_r+0x14dc>
   1b244:	8880080c 	andi	r2,r17,32
   1b248:	1002be26 	beq	r2,zero,1bd44 <___vfiprintf_internal_r+0x117c>
   1b24c:	d9002217 	ldw	r4,136(sp)
   1b250:	d9402417 	ldw	r5,144(sp)
   1b254:	20800017 	ldw	r2,0(r4)
   1b258:	2807d7fa 	srai	r3,r5,31
   1b25c:	21000104 	addi	r4,r4,4
   1b260:	d9002215 	stw	r4,136(sp)
   1b264:	11400015 	stw	r5,0(r2)
   1b268:	10c00115 	stw	r3,4(r2)
   1b26c:	003e8a06 	br	1ac98 <__alt_data_end+0xfc01ac98>
   1b270:	9cc03fcc 	andi	r19,r19,255
   1b274:	b811883a 	mov	r8,r23
   1b278:	9803871e 	bne	r19,zero,1c098 <___vfiprintf_internal_r+0x14d0>
   1b27c:	8880080c 	andi	r2,r17,32
   1b280:	10009a26 	beq	r2,zero,1b4ec <___vfiprintf_internal_r+0x924>
   1b284:	d9002217 	ldw	r4,136(sp)
   1b288:	d8001d85 	stb	zero,118(sp)
   1b28c:	20800204 	addi	r2,r4,8
   1b290:	24c00017 	ldw	r19,0(r4)
   1b294:	25000117 	ldw	r20,4(r4)
   1b298:	8002a416 	blt	r16,zero,1bd2c <___vfiprintf_internal_r+0x1164>
   1b29c:	013fdfc4 	movi	r4,-129
   1b2a0:	9d06b03a 	or	r3,r19,r20
   1b2a4:	d8802215 	stw	r2,136(sp)
   1b2a8:	8922703a 	and	r17,r17,r4
   1b2ac:	18009b26 	beq	r3,zero,1b51c <___vfiprintf_internal_r+0x954>
   1b2b0:	002b883a 	mov	r21,zero
   1b2b4:	ddc01a04 	addi	r23,sp,104
   1b2b8:	9806d0fa 	srli	r3,r19,3
   1b2bc:	a008977a 	slli	r4,r20,29
   1b2c0:	a028d0fa 	srli	r20,r20,3
   1b2c4:	9cc001cc 	andi	r19,r19,7
   1b2c8:	98800c04 	addi	r2,r19,48
   1b2cc:	bdffffc4 	addi	r23,r23,-1
   1b2d0:	20e6b03a 	or	r19,r4,r3
   1b2d4:	b8800005 	stb	r2,0(r23)
   1b2d8:	9d06b03a 	or	r3,r19,r20
   1b2dc:	183ff61e 	bne	r3,zero,1b2b8 <__alt_data_end+0xfc01b2b8>
   1b2e0:	88c0004c 	andi	r3,r17,1
   1b2e4:	18021f1e 	bne	r3,zero,1bb64 <___vfiprintf_internal_r+0xf9c>
   1b2e8:	d9401e17 	ldw	r5,120(sp)
   1b2ec:	2de9c83a 	sub	r20,r5,r23
   1b2f0:	003f3806 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1b2f4:	9cc03fcc 	andi	r19,r19,255
   1b2f8:	b811883a 	mov	r8,r23
   1b2fc:	98034f1e 	bne	r19,zero,1c03c <___vfiprintf_internal_r+0x1474>
   1b300:	008000f4 	movhi	r2,3
   1b304:	10ae4004 	addi	r2,r2,-18176
   1b308:	d8802615 	stw	r2,152(sp)
   1b30c:	8880080c 	andi	r2,r17,32
   1b310:	1000ac26 	beq	r2,zero,1b5c4 <___vfiprintf_internal_r+0x9fc>
   1b314:	d9002217 	ldw	r4,136(sp)
   1b318:	24c00017 	ldw	r19,0(r4)
   1b31c:	25000117 	ldw	r20,4(r4)
   1b320:	21000204 	addi	r4,r4,8
   1b324:	d9002215 	stw	r4,136(sp)
   1b328:	8880004c 	andi	r2,r17,1
   1b32c:	1001e726 	beq	r2,zero,1bacc <___vfiprintf_internal_r+0xf04>
   1b330:	9d04b03a 	or	r2,r19,r20
   1b334:	10025c1e 	bne	r2,zero,1bca8 <___vfiprintf_internal_r+0x10e0>
   1b338:	d8001d85 	stb	zero,118(sp)
   1b33c:	80024416 	blt	r16,zero,1bc50 <___vfiprintf_internal_r+0x1088>
   1b340:	00bfdfc4 	movi	r2,-129
   1b344:	88a2703a 	and	r17,r17,r2
   1b348:	003f1d06 	br	1afc0 <__alt_data_end+0xfc01afc0>
   1b34c:	d8c02217 	ldw	r3,136(sp)
   1b350:	04c00044 	movi	r19,1
   1b354:	b811883a 	mov	r8,r23
   1b358:	18800017 	ldw	r2,0(r3)
   1b35c:	18c00104 	addi	r3,r3,4
   1b360:	d8001d85 	stb	zero,118(sp)
   1b364:	d8801005 	stb	r2,64(sp)
   1b368:	d8c02215 	stw	r3,136(sp)
   1b36c:	9829883a 	mov	r20,r19
   1b370:	ddc01004 	addi	r23,sp,64
   1b374:	0021883a 	mov	r16,zero
   1b378:	003f1e06 	br	1aff4 <__alt_data_end+0xfc01aff4>
   1b37c:	9cc03fcc 	andi	r19,r19,255
   1b380:	b811883a 	mov	r8,r23
   1b384:	9803331e 	bne	r19,zero,1c054 <___vfiprintf_internal_r+0x148c>
   1b388:	8880080c 	andi	r2,r17,32
   1b38c:	10004826 	beq	r2,zero,1b4b0 <___vfiprintf_internal_r+0x8e8>
   1b390:	d9002217 	ldw	r4,136(sp)
   1b394:	20800117 	ldw	r2,4(r4)
   1b398:	24c00017 	ldw	r19,0(r4)
   1b39c:	21000204 	addi	r4,r4,8
   1b3a0:	d9002215 	stw	r4,136(sp)
   1b3a4:	1029883a 	mov	r20,r2
   1b3a8:	10024c16 	blt	r2,zero,1bcdc <___vfiprintf_internal_r+0x1114>
   1b3ac:	dd401d83 	ldbu	r21,118(sp)
   1b3b0:	80007116 	blt	r16,zero,1b578 <___vfiprintf_internal_r+0x9b0>
   1b3b4:	00ffdfc4 	movi	r3,-129
   1b3b8:	9d04b03a 	or	r2,r19,r20
   1b3bc:	88e2703a 	and	r17,r17,r3
   1b3c0:	1000d126 	beq	r2,zero,1b708 <___vfiprintf_internal_r+0xb40>
   1b3c4:	a0023526 	beq	r20,zero,1bc9c <___vfiprintf_internal_r+0x10d4>
   1b3c8:	ddc01a04 	addi	r23,sp,104
   1b3cc:	4039883a 	mov	fp,r8
   1b3d0:	9809883a 	mov	r4,r19
   1b3d4:	a00b883a 	mov	r5,r20
   1b3d8:	01800284 	movi	r6,10
   1b3dc:	000f883a 	mov	r7,zero
   1b3e0:	001d0f40 	call	1d0f4 <__umoddi3>
   1b3e4:	10800c04 	addi	r2,r2,48
   1b3e8:	bdffffc4 	addi	r23,r23,-1
   1b3ec:	9809883a 	mov	r4,r19
   1b3f0:	a00b883a 	mov	r5,r20
   1b3f4:	b8800005 	stb	r2,0(r23)
   1b3f8:	01800284 	movi	r6,10
   1b3fc:	000f883a 	mov	r7,zero
   1b400:	001caf80 	call	1caf8 <__udivdi3>
   1b404:	1027883a 	mov	r19,r2
   1b408:	10c4b03a 	or	r2,r2,r3
   1b40c:	1829883a 	mov	r20,r3
   1b410:	103fef1e 	bne	r2,zero,1b3d0 <__alt_data_end+0xfc01b3d0>
   1b414:	d9001e17 	ldw	r4,120(sp)
   1b418:	e011883a 	mov	r8,fp
   1b41c:	25e9c83a 	sub	r20,r4,r23
   1b420:	003eec06 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1b424:	d8802307 	ldb	r2,140(sp)
   1b428:	1002361e 	bne	r2,zero,1bd04 <___vfiprintf_internal_r+0x113c>
   1b42c:	00c00804 	movi	r3,32
   1b430:	d8c02305 	stb	r3,140(sp)
   1b434:	04c00044 	movi	r19,1
   1b438:	b0c00007 	ldb	r3,0(r22)
   1b43c:	003e3f06 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1b440:	8c400054 	ori	r17,r17,1
   1b444:	b0c00007 	ldb	r3,0(r22)
   1b448:	003e3c06 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1b44c:	8c402014 	ori	r17,r17,128
   1b450:	b0c00007 	ldb	r3,0(r22)
   1b454:	003e3906 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1b458:	dc002715 	stw	r16,156(sp)
   1b45c:	d8002515 	stw	zero,148(sp)
   1b460:	1f3ff404 	addi	fp,r3,-48
   1b464:	0009883a 	mov	r4,zero
   1b468:	b021883a 	mov	r16,r22
   1b46c:	01400284 	movi	r5,10
   1b470:	000d8e00 	call	d8e0 <__mulsi3>
   1b474:	80c00007 	ldb	r3,0(r16)
   1b478:	e089883a 	add	r4,fp,r2
   1b47c:	b5800044 	addi	r22,r22,1
   1b480:	1f3ff404 	addi	fp,r3,-48
   1b484:	b021883a 	mov	r16,r22
   1b488:	af3ff82e 	bgeu	r21,fp,1b46c <__alt_data_end+0xfc01b46c>
   1b48c:	d9002515 	stw	r4,148(sp)
   1b490:	dc002717 	ldw	r16,156(sp)
   1b494:	003e2a06 	br	1ad40 <__alt_data_end+0xfc01ad40>
   1b498:	9cc03fcc 	andi	r19,r19,255
   1b49c:	b811883a 	mov	r8,r23
   1b4a0:	9802e91e 	bne	r19,zero,1c048 <___vfiprintf_internal_r+0x1480>
   1b4a4:	8c400414 	ori	r17,r17,16
   1b4a8:	8880080c 	andi	r2,r17,32
   1b4ac:	103fb81e 	bne	r2,zero,1b390 <__alt_data_end+0xfc01b390>
   1b4b0:	8880040c 	andi	r2,r17,16
   1b4b4:	10022e26 	beq	r2,zero,1bd70 <___vfiprintf_internal_r+0x11a8>
   1b4b8:	d9402217 	ldw	r5,136(sp)
   1b4bc:	2cc00017 	ldw	r19,0(r5)
   1b4c0:	29400104 	addi	r5,r5,4
   1b4c4:	d9402215 	stw	r5,136(sp)
   1b4c8:	9829d7fa 	srai	r20,r19,31
   1b4cc:	a005883a 	mov	r2,r20
   1b4d0:	003fb506 	br	1b3a8 <__alt_data_end+0xfc01b3a8>
   1b4d4:	9cc03fcc 	andi	r19,r19,255
   1b4d8:	b811883a 	mov	r8,r23
   1b4dc:	9802fa1e 	bne	r19,zero,1c0c8 <___vfiprintf_internal_r+0x1500>
   1b4e0:	8c400414 	ori	r17,r17,16
   1b4e4:	8880080c 	andi	r2,r17,32
   1b4e8:	103f661e 	bne	r2,zero,1b284 <__alt_data_end+0xfc01b284>
   1b4ec:	8880040c 	andi	r2,r17,16
   1b4f0:	10020626 	beq	r2,zero,1bd0c <___vfiprintf_internal_r+0x1144>
   1b4f4:	d9402217 	ldw	r5,136(sp)
   1b4f8:	d8001d85 	stb	zero,118(sp)
   1b4fc:	0029883a 	mov	r20,zero
   1b500:	28800104 	addi	r2,r5,4
   1b504:	2cc00017 	ldw	r19,0(r5)
   1b508:	80020816 	blt	r16,zero,1bd2c <___vfiprintf_internal_r+0x1164>
   1b50c:	00ffdfc4 	movi	r3,-129
   1b510:	d8802215 	stw	r2,136(sp)
   1b514:	88e2703a 	and	r17,r17,r3
   1b518:	983f651e 	bne	r19,zero,1b2b0 <__alt_data_end+0xfc01b2b0>
   1b51c:	002b883a 	mov	r21,zero
   1b520:	8002cf26 	beq	r16,zero,1c060 <___vfiprintf_internal_r+0x1498>
   1b524:	0027883a 	mov	r19,zero
   1b528:	0029883a 	mov	r20,zero
   1b52c:	003f6106 	br	1b2b4 <__alt_data_end+0xfc01b2b4>
   1b530:	9cc03fcc 	andi	r19,r19,255
   1b534:	b811883a 	mov	r8,r23
   1b538:	9802e01e 	bne	r19,zero,1c0bc <___vfiprintf_internal_r+0x14f4>
   1b53c:	8c400414 	ori	r17,r17,16
   1b540:	8880080c 	andi	r2,r17,32
   1b544:	1000641e 	bne	r2,zero,1b6d8 <___vfiprintf_internal_r+0xb10>
   1b548:	8880040c 	andi	r2,r17,16
   1b54c:	1001c81e 	bne	r2,zero,1bc70 <___vfiprintf_internal_r+0x10a8>
   1b550:	8880100c 	andi	r2,r17,64
   1b554:	d8001d85 	stb	zero,118(sp)
   1b558:	1002281e 	bne	r2,zero,1bdfc <___vfiprintf_internal_r+0x1234>
   1b55c:	d9002217 	ldw	r4,136(sp)
   1b560:	0029883a 	mov	r20,zero
   1b564:	20800104 	addi	r2,r4,4
   1b568:	24c00017 	ldw	r19,0(r4)
   1b56c:	8001c60e 	bge	r16,zero,1bc88 <___vfiprintf_internal_r+0x10c0>
   1b570:	d8802215 	stw	r2,136(sp)
   1b574:	002b883a 	mov	r21,zero
   1b578:	9d04b03a 	or	r2,r19,r20
   1b57c:	103f911e 	bne	r2,zero,1b3c4 <__alt_data_end+0xfc01b3c4>
   1b580:	00800044 	movi	r2,1
   1b584:	10803fcc 	andi	r2,r2,255
   1b588:	00c00044 	movi	r3,1
   1b58c:	10c05f26 	beq	r2,r3,1b70c <___vfiprintf_internal_r+0xb44>
   1b590:	00c00084 	movi	r3,2
   1b594:	10ffe31e 	bne	r2,r3,1b524 <__alt_data_end+0xfc01b524>
   1b598:	0027883a 	mov	r19,zero
   1b59c:	0029883a 	mov	r20,zero
   1b5a0:	00015106 	br	1bae8 <___vfiprintf_internal_r+0xf20>
   1b5a4:	9cc03fcc 	andi	r19,r19,255
   1b5a8:	b811883a 	mov	r8,r23
   1b5ac:	9802c01e 	bne	r19,zero,1c0b0 <___vfiprintf_internal_r+0x14e8>
   1b5b0:	014000f4 	movhi	r5,3
   1b5b4:	296e3b04 	addi	r5,r5,-18196
   1b5b8:	d9402615 	stw	r5,152(sp)
   1b5bc:	8880080c 	andi	r2,r17,32
   1b5c0:	103f541e 	bne	r2,zero,1b314 <__alt_data_end+0xfc01b314>
   1b5c4:	8880040c 	andi	r2,r17,16
   1b5c8:	1001f226 	beq	r2,zero,1bd94 <___vfiprintf_internal_r+0x11cc>
   1b5cc:	d9402217 	ldw	r5,136(sp)
   1b5d0:	0029883a 	mov	r20,zero
   1b5d4:	2cc00017 	ldw	r19,0(r5)
   1b5d8:	29400104 	addi	r5,r5,4
   1b5dc:	d9402215 	stw	r5,136(sp)
   1b5e0:	003f5106 	br	1b328 <__alt_data_end+0xfc01b328>
   1b5e4:	d8c02217 	ldw	r3,136(sp)
   1b5e8:	b811883a 	mov	r8,r23
   1b5ec:	d8001d85 	stb	zero,118(sp)
   1b5f0:	1dc00017 	ldw	r23,0(r3)
   1b5f4:	1f000104 	addi	fp,r3,4
   1b5f8:	b8025926 	beq	r23,zero,1bf60 <___vfiprintf_internal_r+0x1398>
   1b5fc:	80023316 	blt	r16,zero,1becc <___vfiprintf_internal_r+0x1304>
   1b600:	800d883a 	mov	r6,r16
   1b604:	000b883a 	mov	r5,zero
   1b608:	b809883a 	mov	r4,r23
   1b60c:	da002a15 	stw	r8,168(sp)
   1b610:	00179d00 	call	179d0 <memchr>
   1b614:	da002a17 	ldw	r8,168(sp)
   1b618:	10026826 	beq	r2,zero,1bfbc <___vfiprintf_internal_r+0x13f4>
   1b61c:	15e9c83a 	sub	r20,r2,r23
   1b620:	dd401d83 	ldbu	r21,118(sp)
   1b624:	df002215 	stw	fp,136(sp)
   1b628:	0021883a 	mov	r16,zero
   1b62c:	003e6906 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1b630:	9cc03fcc 	andi	r19,r19,255
   1b634:	b811883a 	mov	r8,r23
   1b638:	983fc126 	beq	r19,zero,1b540 <__alt_data_end+0xfc01b540>
   1b63c:	d8c02303 	ldbu	r3,140(sp)
   1b640:	d8c01d85 	stb	r3,118(sp)
   1b644:	003fbe06 	br	1b540 <__alt_data_end+0xfc01b540>
   1b648:	d9002217 	ldw	r4,136(sp)
   1b64c:	d9402217 	ldw	r5,136(sp)
   1b650:	21000017 	ldw	r4,0(r4)
   1b654:	28800104 	addi	r2,r5,4
   1b658:	d9002515 	stw	r4,148(sp)
   1b65c:	203e3d16 	blt	r4,zero,1af54 <__alt_data_end+0xfc01af54>
   1b660:	d8802215 	stw	r2,136(sp)
   1b664:	b0c00007 	ldb	r3,0(r22)
   1b668:	003db406 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1b66c:	00c00ac4 	movi	r3,43
   1b670:	d8c02305 	stb	r3,140(sp)
   1b674:	04c00044 	movi	r19,1
   1b678:	b0c00007 	ldb	r3,0(r22)
   1b67c:	003daf06 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1b680:	b0c00007 	ldb	r3,0(r22)
   1b684:	01000a84 	movi	r4,42
   1b688:	b4000044 	addi	r16,r22,1
   1b68c:	19025e26 	beq	r3,r4,1c008 <___vfiprintf_internal_r+0x1440>
   1b690:	1f3ff404 	addi	fp,r3,-48
   1b694:	0009883a 	mov	r4,zero
   1b698:	af025236 	bltu	r21,fp,1bfe4 <___vfiprintf_internal_r+0x141c>
   1b69c:	01400284 	movi	r5,10
   1b6a0:	000d8e00 	call	d8e0 <__mulsi3>
   1b6a4:	80c00007 	ldb	r3,0(r16)
   1b6a8:	1709883a 	add	r4,r2,fp
   1b6ac:	85800044 	addi	r22,r16,1
   1b6b0:	1f3ff404 	addi	fp,r3,-48
   1b6b4:	b021883a 	mov	r16,r22
   1b6b8:	af3ff82e 	bgeu	r21,fp,1b69c <__alt_data_end+0xfc01b69c>
   1b6bc:	2021883a 	mov	r16,r4
   1b6c0:	203d9f0e 	bge	r4,zero,1ad40 <__alt_data_end+0xfc01ad40>
   1b6c4:	043fffc4 	movi	r16,-1
   1b6c8:	003d9d06 	br	1ad40 <__alt_data_end+0xfc01ad40>
   1b6cc:	8c401014 	ori	r17,r17,64
   1b6d0:	b0c00007 	ldb	r3,0(r22)
   1b6d4:	003d9906 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1b6d8:	d9002217 	ldw	r4,136(sp)
   1b6dc:	d8001d85 	stb	zero,118(sp)
   1b6e0:	20c00204 	addi	r3,r4,8
   1b6e4:	24c00017 	ldw	r19,0(r4)
   1b6e8:	25000117 	ldw	r20,4(r4)
   1b6ec:	8001e716 	blt	r16,zero,1be8c <___vfiprintf_internal_r+0x12c4>
   1b6f0:	013fdfc4 	movi	r4,-129
   1b6f4:	9d04b03a 	or	r2,r19,r20
   1b6f8:	d8c02215 	stw	r3,136(sp)
   1b6fc:	8922703a 	and	r17,r17,r4
   1b700:	002b883a 	mov	r21,zero
   1b704:	103f2f1e 	bne	r2,zero,1b3c4 <__alt_data_end+0xfc01b3c4>
   1b708:	803e2f26 	beq	r16,zero,1afc8 <__alt_data_end+0xfc01afc8>
   1b70c:	0027883a 	mov	r19,zero
   1b710:	9cc00c04 	addi	r19,r19,48
   1b714:	dcc019c5 	stb	r19,103(sp)
   1b718:	dd002817 	ldw	r20,160(sp)
   1b71c:	ddc019c4 	addi	r23,sp,103
   1b720:	003e2c06 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1b724:	9cc03fcc 	andi	r19,r19,255
   1b728:	b811883a 	mov	r8,r23
   1b72c:	9802571e 	bne	r19,zero,1c08c <___vfiprintf_internal_r+0x14c4>
   1b730:	18005726 	beq	r3,zero,1b890 <___vfiprintf_internal_r+0xcc8>
   1b734:	04c00044 	movi	r19,1
   1b738:	d8c01005 	stb	r3,64(sp)
   1b73c:	d8001d85 	stb	zero,118(sp)
   1b740:	9829883a 	mov	r20,r19
   1b744:	ddc01004 	addi	r23,sp,64
   1b748:	003f0a06 	br	1b374 <__alt_data_end+0xfc01b374>
   1b74c:	d9402017 	ldw	r5,128(sp)
   1b750:	d9002117 	ldw	r4,132(sp)
   1b754:	d9801a04 	addi	r6,sp,104
   1b758:	da802a15 	stw	r10,168(sp)
   1b75c:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1b760:	da802a17 	ldw	r10,168(sp)
   1b764:	1000501e 	bne	r2,zero,1b8a8 <___vfiprintf_internal_r+0xce0>
   1b768:	d9801b17 	ldw	r6,108(sp)
   1b76c:	d8801c17 	ldw	r2,112(sp)
   1b770:	d811883a 	mov	r8,sp
   1b774:	31000044 	addi	r4,r6,1
   1b778:	003e3606 	br	1b054 <__alt_data_end+0xfc01b054>
   1b77c:	d9001b17 	ldw	r4,108(sp)
   1b780:	d8801c17 	ldw	r2,112(sp)
   1b784:	21400044 	addi	r5,r4,1
   1b788:	d9801d87 	ldb	r6,118(sp)
   1b78c:	303e5226 	beq	r6,zero,1b0d8 <__alt_data_end+0xfc01b0d8>
   1b790:	01800044 	movi	r6,1
   1b794:	d9001d84 	addi	r4,sp,118
   1b798:	1185883a 	add	r2,r2,r6
   1b79c:	41000015 	stw	r4,0(r8)
   1b7a0:	41800115 	stw	r6,4(r8)
   1b7a4:	d8801c15 	stw	r2,112(sp)
   1b7a8:	d9401b15 	stw	r5,108(sp)
   1b7ac:	010001c4 	movi	r4,7
   1b7b0:	2140b00e 	bge	r4,r5,1ba74 <___vfiprintf_internal_r+0xeac>
   1b7b4:	1000f61e 	bne	r2,zero,1bb90 <___vfiprintf_internal_r+0xfc8>
   1b7b8:	3800b31e 	bne	r7,zero,1ba88 <___vfiprintf_internal_r+0xec0>
   1b7bc:	0009883a 	mov	r4,zero
   1b7c0:	300b883a 	mov	r5,r6
   1b7c4:	d811883a 	mov	r8,sp
   1b7c8:	01802004 	movi	r6,128
   1b7cc:	19be5226 	beq	r3,r6,1b118 <__alt_data_end+0xfc01b118>
   1b7d0:	8521c83a 	sub	r16,r16,r20
   1b7d4:	043e790e 	bge	zero,r16,1b1bc <__alt_data_end+0xfc01b1bc>
   1b7d8:	05400404 	movi	r21,16
   1b7dc:	ac01b00e 	bge	r21,r16,1bea0 <___vfiprintf_internal_r+0x12d8>
   1b7e0:	014000f4 	movhi	r5,3
   1b7e4:	296eb004 	addi	r5,r5,-17728
   1b7e8:	d9402315 	stw	r5,140(sp)
   1b7ec:	070001c4 	movi	fp,7
   1b7f0:	00000506 	br	1b808 <___vfiprintf_internal_r+0xc40>
   1b7f4:	21400084 	addi	r5,r4,2
   1b7f8:	42000204 	addi	r8,r8,8
   1b7fc:	1809883a 	mov	r4,r3
   1b800:	843ffc04 	addi	r16,r16,-16
   1b804:	ac000d0e 	bge	r21,r16,1b83c <___vfiprintf_internal_r+0xc74>
   1b808:	10800404 	addi	r2,r2,16
   1b80c:	20c00044 	addi	r3,r4,1
   1b810:	44800015 	stw	r18,0(r8)
   1b814:	45400115 	stw	r21,4(r8)
   1b818:	d8801c15 	stw	r2,112(sp)
   1b81c:	d8c01b15 	stw	r3,108(sp)
   1b820:	e0fff40e 	bge	fp,r3,1b7f4 <__alt_data_end+0xfc01b7f4>
   1b824:	1000101e 	bne	r2,zero,1b868 <___vfiprintf_internal_r+0xca0>
   1b828:	843ffc04 	addi	r16,r16,-16
   1b82c:	01400044 	movi	r5,1
   1b830:	0009883a 	mov	r4,zero
   1b834:	d811883a 	mov	r8,sp
   1b838:	ac3ff316 	blt	r21,r16,1b808 <__alt_data_end+0xfc01b808>
   1b83c:	d8c02317 	ldw	r3,140(sp)
   1b840:	1405883a 	add	r2,r2,r16
   1b844:	44000115 	stw	r16,4(r8)
   1b848:	40c00015 	stw	r3,0(r8)
   1b84c:	d8801c15 	stw	r2,112(sp)
   1b850:	d9401b15 	stw	r5,108(sp)
   1b854:	00c001c4 	movi	r3,7
   1b858:	19401916 	blt	r3,r5,1b8c0 <___vfiprintf_internal_r+0xcf8>
   1b85c:	42000204 	addi	r8,r8,8
   1b860:	29400044 	addi	r5,r5,1
   1b864:	003e5506 	br	1b1bc <__alt_data_end+0xfc01b1bc>
   1b868:	d9402017 	ldw	r5,128(sp)
   1b86c:	d9002117 	ldw	r4,132(sp)
   1b870:	d9801a04 	addi	r6,sp,104
   1b874:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1b878:	10000b1e 	bne	r2,zero,1b8a8 <___vfiprintf_internal_r+0xce0>
   1b87c:	d9001b17 	ldw	r4,108(sp)
   1b880:	d8801c17 	ldw	r2,112(sp)
   1b884:	d811883a 	mov	r8,sp
   1b888:	21400044 	addi	r5,r4,1
   1b88c:	003fdc06 	br	1b800 <__alt_data_end+0xfc01b800>
   1b890:	d8801c17 	ldw	r2,112(sp)
   1b894:	10000426 	beq	r2,zero,1b8a8 <___vfiprintf_internal_r+0xce0>
   1b898:	d9402017 	ldw	r5,128(sp)
   1b89c:	d9002117 	ldw	r4,132(sp)
   1b8a0:	d9801a04 	addi	r6,sp,104
   1b8a4:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1b8a8:	d9402017 	ldw	r5,128(sp)
   1b8ac:	2880030b 	ldhu	r2,12(r5)
   1b8b0:	1080100c 	andi	r2,r2,64
   1b8b4:	10014d1e 	bne	r2,zero,1bdec <___vfiprintf_internal_r+0x1224>
   1b8b8:	d8802417 	ldw	r2,144(sp)
   1b8bc:	003d9706 	br	1af1c <__alt_data_end+0xfc01af1c>
   1b8c0:	1000d21e 	bne	r2,zero,1bc0c <___vfiprintf_internal_r+0x1044>
   1b8c4:	00c00044 	movi	r3,1
   1b8c8:	a005883a 	mov	r2,r20
   1b8cc:	ddc00015 	stw	r23,0(sp)
   1b8d0:	dd000115 	stw	r20,4(sp)
   1b8d4:	dd001c15 	stw	r20,112(sp)
   1b8d8:	d8c01b15 	stw	r3,108(sp)
   1b8dc:	d811883a 	mov	r8,sp
   1b8e0:	42000204 	addi	r8,r8,8
   1b8e4:	8c40010c 	andi	r17,r17,4
   1b8e8:	88004026 	beq	r17,zero,1b9ec <___vfiprintf_internal_r+0xe24>
   1b8ec:	d9002517 	ldw	r4,148(sp)
   1b8f0:	24e3c83a 	sub	r17,r4,r19
   1b8f4:	04403d0e 	bge	zero,r17,1b9ec <___vfiprintf_internal_r+0xe24>
   1b8f8:	04000404 	movi	r16,16
   1b8fc:	8441a90e 	bge	r16,r17,1bfa4 <___vfiprintf_internal_r+0x13dc>
   1b900:	00c000f4 	movhi	r3,3
   1b904:	18eeb404 	addi	r3,r3,-17712
   1b908:	d9001b17 	ldw	r4,108(sp)
   1b90c:	d8c02315 	stw	r3,140(sp)
   1b910:	050001c4 	movi	r20,7
   1b914:	dd402117 	ldw	r21,132(sp)
   1b918:	ddc02017 	ldw	r23,128(sp)
   1b91c:	00000506 	br	1b934 <___vfiprintf_internal_r+0xd6c>
   1b920:	21400084 	addi	r5,r4,2
   1b924:	42000204 	addi	r8,r8,8
   1b928:	1809883a 	mov	r4,r3
   1b92c:	8c7ffc04 	addi	r17,r17,-16
   1b930:	84400f0e 	bge	r16,r17,1b970 <___vfiprintf_internal_r+0xda8>
   1b934:	014000f4 	movhi	r5,3
   1b938:	10800404 	addi	r2,r2,16
   1b93c:	20c00044 	addi	r3,r4,1
   1b940:	296eb404 	addi	r5,r5,-17712
   1b944:	41400015 	stw	r5,0(r8)
   1b948:	44000115 	stw	r16,4(r8)
   1b94c:	d8801c15 	stw	r2,112(sp)
   1b950:	d8c01b15 	stw	r3,108(sp)
   1b954:	a0fff20e 	bge	r20,r3,1b920 <__alt_data_end+0xfc01b920>
   1b958:	1000141e 	bne	r2,zero,1b9ac <___vfiprintf_internal_r+0xde4>
   1b95c:	8c7ffc04 	addi	r17,r17,-16
   1b960:	01400044 	movi	r5,1
   1b964:	0009883a 	mov	r4,zero
   1b968:	d811883a 	mov	r8,sp
   1b96c:	847ff116 	blt	r16,r17,1b934 <__alt_data_end+0xfc01b934>
   1b970:	d8c02317 	ldw	r3,140(sp)
   1b974:	1445883a 	add	r2,r2,r17
   1b978:	44400115 	stw	r17,4(r8)
   1b97c:	40c00015 	stw	r3,0(r8)
   1b980:	d8801c15 	stw	r2,112(sp)
   1b984:	d9401b15 	stw	r5,108(sp)
   1b988:	00c001c4 	movi	r3,7
   1b98c:	1940170e 	bge	r3,r5,1b9ec <___vfiprintf_internal_r+0xe24>
   1b990:	1000101e 	bne	r2,zero,1b9d4 <___vfiprintf_internal_r+0xe0c>
   1b994:	d8802517 	ldw	r2,148(sp)
   1b998:	14c11616 	blt	r2,r19,1bdf4 <___vfiprintf_internal_r+0x122c>
   1b99c:	d9002417 	ldw	r4,144(sp)
   1b9a0:	2089883a 	add	r4,r4,r2
   1b9a4:	d9002415 	stw	r4,144(sp)
   1b9a8:	003e1806 	br	1b20c <__alt_data_end+0xfc01b20c>
   1b9ac:	d9801a04 	addi	r6,sp,104
   1b9b0:	b80b883a 	mov	r5,r23
   1b9b4:	a809883a 	mov	r4,r21
   1b9b8:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1b9bc:	103fba1e 	bne	r2,zero,1b8a8 <__alt_data_end+0xfc01b8a8>
   1b9c0:	d9001b17 	ldw	r4,108(sp)
   1b9c4:	d8801c17 	ldw	r2,112(sp)
   1b9c8:	d811883a 	mov	r8,sp
   1b9cc:	21400044 	addi	r5,r4,1
   1b9d0:	003fd606 	br	1b92c <__alt_data_end+0xfc01b92c>
   1b9d4:	d9402017 	ldw	r5,128(sp)
   1b9d8:	d9002117 	ldw	r4,132(sp)
   1b9dc:	d9801a04 	addi	r6,sp,104
   1b9e0:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1b9e4:	103fb01e 	bne	r2,zero,1b8a8 <__alt_data_end+0xfc01b8a8>
   1b9e8:	d8801c17 	ldw	r2,112(sp)
   1b9ec:	d8c02517 	ldw	r3,148(sp)
   1b9f0:	1cc0010e 	bge	r3,r19,1b9f8 <___vfiprintf_internal_r+0xe30>
   1b9f4:	9807883a 	mov	r3,r19
   1b9f8:	d9002417 	ldw	r4,144(sp)
   1b9fc:	20c9883a 	add	r4,r4,r3
   1ba00:	d9002415 	stw	r4,144(sp)
   1ba04:	103e0126 	beq	r2,zero,1b20c <__alt_data_end+0xfc01b20c>
   1ba08:	d9402017 	ldw	r5,128(sp)
   1ba0c:	d9002117 	ldw	r4,132(sp)
   1ba10:	d9801a04 	addi	r6,sp,104
   1ba14:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1ba18:	103dfc26 	beq	r2,zero,1b20c <__alt_data_end+0xfc01b20c>
   1ba1c:	003fa206 	br	1b8a8 <__alt_data_end+0xfc01b8a8>
   1ba20:	d9402017 	ldw	r5,128(sp)
   1ba24:	d9002117 	ldw	r4,132(sp)
   1ba28:	d9801a04 	addi	r6,sp,104
   1ba2c:	d9c02b15 	stw	r7,172(sp)
   1ba30:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1ba34:	d9c02b17 	ldw	r7,172(sp)
   1ba38:	103f9b1e 	bne	r2,zero,1b8a8 <__alt_data_end+0xfc01b8a8>
   1ba3c:	d9001b17 	ldw	r4,108(sp)
   1ba40:	d8801c17 	ldw	r2,112(sp)
   1ba44:	d811883a 	mov	r8,sp
   1ba48:	21800044 	addi	r6,r4,1
   1ba4c:	003dbf06 	br	1b14c <__alt_data_end+0xfc01b14c>
   1ba50:	1000d81e 	bne	r2,zero,1bdb4 <___vfiprintf_internal_r+0x11ec>
   1ba54:	d9001d87 	ldb	r4,118(sp)
   1ba58:	20000a26 	beq	r4,zero,1ba84 <___vfiprintf_internal_r+0xebc>
   1ba5c:	00800044 	movi	r2,1
   1ba60:	d9001d84 	addi	r4,sp,118
   1ba64:	100b883a 	mov	r5,r2
   1ba68:	d9000015 	stw	r4,0(sp)
   1ba6c:	d8800115 	stw	r2,4(sp)
   1ba70:	d811883a 	mov	r8,sp
   1ba74:	2809883a 	mov	r4,r5
   1ba78:	42000204 	addi	r8,r8,8
   1ba7c:	29400044 	addi	r5,r5,1
   1ba80:	003d9506 	br	1b0d8 <__alt_data_end+0xfc01b0d8>
   1ba84:	3800fd26 	beq	r7,zero,1be7c <___vfiprintf_internal_r+0x12b4>
   1ba88:	00800084 	movi	r2,2
   1ba8c:	d9001d04 	addi	r4,sp,116
   1ba90:	d9000015 	stw	r4,0(sp)
   1ba94:	d8800115 	stw	r2,4(sp)
   1ba98:	01400044 	movi	r5,1
   1ba9c:	d811883a 	mov	r8,sp
   1baa0:	2809883a 	mov	r4,r5
   1baa4:	42000204 	addi	r8,r8,8
   1baa8:	29400044 	addi	r5,r5,1
   1baac:	003f4606 	br	1b7c8 <__alt_data_end+0xfc01b7c8>
   1bab0:	d8802517 	ldw	r2,148(sp)
   1bab4:	14c0010e 	bge	r2,r19,1babc <___vfiprintf_internal_r+0xef4>
   1bab8:	9805883a 	mov	r2,r19
   1babc:	d9402417 	ldw	r5,144(sp)
   1bac0:	288b883a 	add	r5,r5,r2
   1bac4:	d9402415 	stw	r5,144(sp)
   1bac8:	003dd006 	br	1b20c <__alt_data_end+0xfc01b20c>
   1bacc:	d8001d85 	stb	zero,118(sp)
   1bad0:	80005d16 	blt	r16,zero,1bc48 <___vfiprintf_internal_r+0x1080>
   1bad4:	00ffdfc4 	movi	r3,-129
   1bad8:	9d04b03a 	or	r2,r19,r20
   1badc:	88e2703a 	and	r17,r17,r3
   1bae0:	103d3726 	beq	r2,zero,1afc0 <__alt_data_end+0xfc01afc0>
   1bae4:	002b883a 	mov	r21,zero
   1bae8:	d9002617 	ldw	r4,152(sp)
   1baec:	ddc01a04 	addi	r23,sp,104
   1baf0:	988003cc 	andi	r2,r19,15
   1baf4:	a006973a 	slli	r3,r20,28
   1baf8:	2085883a 	add	r2,r4,r2
   1bafc:	9826d13a 	srli	r19,r19,4
   1bb00:	10800003 	ldbu	r2,0(r2)
   1bb04:	a028d13a 	srli	r20,r20,4
   1bb08:	bdffffc4 	addi	r23,r23,-1
   1bb0c:	1ce6b03a 	or	r19,r3,r19
   1bb10:	b8800005 	stb	r2,0(r23)
   1bb14:	9d04b03a 	or	r2,r19,r20
   1bb18:	103ff51e 	bne	r2,zero,1baf0 <__alt_data_end+0xfc01baf0>
   1bb1c:	d8801e17 	ldw	r2,120(sp)
   1bb20:	15e9c83a 	sub	r20,r2,r23
   1bb24:	003d2b06 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1bb28:	d9402017 	ldw	r5,128(sp)
   1bb2c:	d9002117 	ldw	r4,132(sp)
   1bb30:	d9801a04 	addi	r6,sp,104
   1bb34:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1bb38:	103f5b1e 	bne	r2,zero,1b8a8 <__alt_data_end+0xfc01b8a8>
   1bb3c:	d8801c17 	ldw	r2,112(sp)
   1bb40:	d811883a 	mov	r8,sp
   1bb44:	003f6706 	br	1b8e4 <__alt_data_end+0xfc01b8e4>
   1bb48:	d9402017 	ldw	r5,128(sp)
   1bb4c:	d9002117 	ldw	r4,132(sp)
   1bb50:	d9801a04 	addi	r6,sp,104
   1bb54:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1bb58:	103f531e 	bne	r2,zero,1b8a8 <__alt_data_end+0xfc01b8a8>
   1bb5c:	d811883a 	mov	r8,sp
   1bb60:	003cd906 	br	1aec8 <__alt_data_end+0xfc01aec8>
   1bb64:	10803fcc 	andi	r2,r2,255
   1bb68:	1080201c 	xori	r2,r2,128
   1bb6c:	10bfe004 	addi	r2,r2,-128
   1bb70:	00c00c04 	movi	r3,48
   1bb74:	10ffe926 	beq	r2,r3,1bb1c <__alt_data_end+0xfc01bb1c>
   1bb78:	b8ffffc5 	stb	r3,-1(r23)
   1bb7c:	d8c01e17 	ldw	r3,120(sp)
   1bb80:	b8bfffc4 	addi	r2,r23,-1
   1bb84:	102f883a 	mov	r23,r2
   1bb88:	18a9c83a 	sub	r20,r3,r2
   1bb8c:	003d1106 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1bb90:	d9402017 	ldw	r5,128(sp)
   1bb94:	d9002117 	ldw	r4,132(sp)
   1bb98:	d9801a04 	addi	r6,sp,104
   1bb9c:	d8c02a15 	stw	r3,168(sp)
   1bba0:	d9c02b15 	stw	r7,172(sp)
   1bba4:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1bba8:	d8c02a17 	ldw	r3,168(sp)
   1bbac:	d9c02b17 	ldw	r7,172(sp)
   1bbb0:	103f3d1e 	bne	r2,zero,1b8a8 <__alt_data_end+0xfc01b8a8>
   1bbb4:	d9001b17 	ldw	r4,108(sp)
   1bbb8:	d8801c17 	ldw	r2,112(sp)
   1bbbc:	d811883a 	mov	r8,sp
   1bbc0:	21400044 	addi	r5,r4,1
   1bbc4:	003d4406 	br	1b0d8 <__alt_data_end+0xfc01b0d8>
   1bbc8:	d9402017 	ldw	r5,128(sp)
   1bbcc:	d9002117 	ldw	r4,132(sp)
   1bbd0:	d9801a04 	addi	r6,sp,104
   1bbd4:	d8c02a15 	stw	r3,168(sp)
   1bbd8:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1bbdc:	d8c02a17 	ldw	r3,168(sp)
   1bbe0:	103f311e 	bne	r2,zero,1b8a8 <__alt_data_end+0xfc01b8a8>
   1bbe4:	d9001b17 	ldw	r4,108(sp)
   1bbe8:	d8801c17 	ldw	r2,112(sp)
   1bbec:	d811883a 	mov	r8,sp
   1bbf0:	21400044 	addi	r5,r4,1
   1bbf4:	003ef406 	br	1b7c8 <__alt_data_end+0xfc01b7c8>
   1bbf8:	1000bd1e 	bne	r2,zero,1bef0 <___vfiprintf_internal_r+0x1328>
   1bbfc:	01400044 	movi	r5,1
   1bc00:	0009883a 	mov	r4,zero
   1bc04:	d811883a 	mov	r8,sp
   1bc08:	003ef106 	br	1b7d0 <__alt_data_end+0xfc01b7d0>
   1bc0c:	d9402017 	ldw	r5,128(sp)
   1bc10:	d9002117 	ldw	r4,132(sp)
   1bc14:	d9801a04 	addi	r6,sp,104
   1bc18:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1bc1c:	103f221e 	bne	r2,zero,1b8a8 <__alt_data_end+0xfc01b8a8>
   1bc20:	d9401b17 	ldw	r5,108(sp)
   1bc24:	d8801c17 	ldw	r2,112(sp)
   1bc28:	d811883a 	mov	r8,sp
   1bc2c:	29400044 	addi	r5,r5,1
   1bc30:	003d6206 	br	1b1bc <__alt_data_end+0xfc01b1bc>
   1bc34:	014000f4 	movhi	r5,3
   1bc38:	296e4004 	addi	r5,r5,-18176
   1bc3c:	d9402615 	stw	r5,152(sp)
   1bc40:	d8c02215 	stw	r3,136(sp)
   1bc44:	1023883a 	mov	r17,r2
   1bc48:	9d04b03a 	or	r2,r19,r20
   1bc4c:	103fa51e 	bne	r2,zero,1bae4 <__alt_data_end+0xfc01bae4>
   1bc50:	002b883a 	mov	r21,zero
   1bc54:	00800084 	movi	r2,2
   1bc58:	003e4a06 	br	1b584 <__alt_data_end+0xfc01b584>
   1bc5c:	014000f4 	movhi	r5,3
   1bc60:	296e4004 	addi	r5,r5,-18176
   1bc64:	002b883a 	mov	r21,zero
   1bc68:	d9402615 	stw	r5,152(sp)
   1bc6c:	003f9e06 	br	1bae8 <__alt_data_end+0xfc01bae8>
   1bc70:	d9402217 	ldw	r5,136(sp)
   1bc74:	d8001d85 	stb	zero,118(sp)
   1bc78:	0029883a 	mov	r20,zero
   1bc7c:	28800104 	addi	r2,r5,4
   1bc80:	2cc00017 	ldw	r19,0(r5)
   1bc84:	803e3a16 	blt	r16,zero,1b570 <__alt_data_end+0xfc01b570>
   1bc88:	00ffdfc4 	movi	r3,-129
   1bc8c:	d8802215 	stw	r2,136(sp)
   1bc90:	88e2703a 	and	r17,r17,r3
   1bc94:	002b883a 	mov	r21,zero
   1bc98:	983e9b26 	beq	r19,zero,1b708 <__alt_data_end+0xfc01b708>
   1bc9c:	00800244 	movi	r2,9
   1bca0:	14fdc936 	bltu	r2,r19,1b3c8 <__alt_data_end+0xfc01b3c8>
   1bca4:	003e9a06 	br	1b710 <__alt_data_end+0xfc01b710>
   1bca8:	00800c04 	movi	r2,48
   1bcac:	d8c01d45 	stb	r3,117(sp)
   1bcb0:	d8801d05 	stb	r2,116(sp)
   1bcb4:	d8001d85 	stb	zero,118(sp)
   1bcb8:	88c00094 	ori	r3,r17,2
   1bcbc:	80009c16 	blt	r16,zero,1bf30 <___vfiprintf_internal_r+0x1368>
   1bcc0:	00bfdfc4 	movi	r2,-129
   1bcc4:	88a2703a 	and	r17,r17,r2
   1bcc8:	8c400094 	ori	r17,r17,2
   1bccc:	002b883a 	mov	r21,zero
   1bcd0:	003f8506 	br	1bae8 <__alt_data_end+0xfc01bae8>
   1bcd4:	b029883a 	mov	r20,r22
   1bcd8:	003c0b06 	br	1ad08 <__alt_data_end+0xfc01ad08>
   1bcdc:	04e7c83a 	sub	r19,zero,r19
   1bce0:	05400b44 	movi	r21,45
   1bce4:	9804c03a 	cmpne	r2,r19,zero
   1bce8:	0529c83a 	sub	r20,zero,r20
   1bcec:	dd401d85 	stb	r21,118(sp)
   1bcf0:	a0a9c83a 	sub	r20,r20,r2
   1bcf4:	80009716 	blt	r16,zero,1bf54 <___vfiprintf_internal_r+0x138c>
   1bcf8:	00bfdfc4 	movi	r2,-129
   1bcfc:	88a2703a 	and	r17,r17,r2
   1bd00:	003db006 	br	1b3c4 <__alt_data_end+0xfc01b3c4>
   1bd04:	b0c00007 	ldb	r3,0(r22)
   1bd08:	003c0c06 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1bd0c:	8880100c 	andi	r2,r17,64
   1bd10:	d8001d85 	stb	zero,118(sp)
   1bd14:	1000461e 	bne	r2,zero,1be30 <___vfiprintf_internal_r+0x1268>
   1bd18:	d9002217 	ldw	r4,136(sp)
   1bd1c:	0029883a 	mov	r20,zero
   1bd20:	20800104 	addi	r2,r4,4
   1bd24:	24c00017 	ldw	r19,0(r4)
   1bd28:	803df80e 	bge	r16,zero,1b50c <__alt_data_end+0xfc01b50c>
   1bd2c:	9d06b03a 	or	r3,r19,r20
   1bd30:	d8802215 	stw	r2,136(sp)
   1bd34:	183d5e1e 	bne	r3,zero,1b2b0 <__alt_data_end+0xfc01b2b0>
   1bd38:	002b883a 	mov	r21,zero
   1bd3c:	0005883a 	mov	r2,zero
   1bd40:	003e1006 	br	1b584 <__alt_data_end+0xfc01b584>
   1bd44:	8880040c 	andi	r2,r17,16
   1bd48:	1000321e 	bne	r2,zero,1be14 <___vfiprintf_internal_r+0x124c>
   1bd4c:	8c40100c 	andi	r17,r17,64
   1bd50:	88008d26 	beq	r17,zero,1bf88 <___vfiprintf_internal_r+0x13c0>
   1bd54:	d9402217 	ldw	r5,136(sp)
   1bd58:	d8c02417 	ldw	r3,144(sp)
   1bd5c:	28800017 	ldw	r2,0(r5)
   1bd60:	29400104 	addi	r5,r5,4
   1bd64:	d9402215 	stw	r5,136(sp)
   1bd68:	10c0000d 	sth	r3,0(r2)
   1bd6c:	003bca06 	br	1ac98 <__alt_data_end+0xfc01ac98>
   1bd70:	8880100c 	andi	r2,r17,64
   1bd74:	10003a26 	beq	r2,zero,1be60 <___vfiprintf_internal_r+0x1298>
   1bd78:	d8802217 	ldw	r2,136(sp)
   1bd7c:	14c0000f 	ldh	r19,0(r2)
   1bd80:	10800104 	addi	r2,r2,4
   1bd84:	d8802215 	stw	r2,136(sp)
   1bd88:	9829d7fa 	srai	r20,r19,31
   1bd8c:	a005883a 	mov	r2,r20
   1bd90:	003d8506 	br	1b3a8 <__alt_data_end+0xfc01b3a8>
   1bd94:	8880100c 	andi	r2,r17,64
   1bd98:	10002b26 	beq	r2,zero,1be48 <___vfiprintf_internal_r+0x1280>
   1bd9c:	d8802217 	ldw	r2,136(sp)
   1bda0:	0029883a 	mov	r20,zero
   1bda4:	14c0000b 	ldhu	r19,0(r2)
   1bda8:	10800104 	addi	r2,r2,4
   1bdac:	d8802215 	stw	r2,136(sp)
   1bdb0:	003d5d06 	br	1b328 <__alt_data_end+0xfc01b328>
   1bdb4:	d9402017 	ldw	r5,128(sp)
   1bdb8:	d9002117 	ldw	r4,132(sp)
   1bdbc:	d9801a04 	addi	r6,sp,104
   1bdc0:	d8c02a15 	stw	r3,168(sp)
   1bdc4:	d9c02b15 	stw	r7,172(sp)
   1bdc8:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1bdcc:	d8c02a17 	ldw	r3,168(sp)
   1bdd0:	d9c02b17 	ldw	r7,172(sp)
   1bdd4:	103eb41e 	bne	r2,zero,1b8a8 <__alt_data_end+0xfc01b8a8>
   1bdd8:	d9001b17 	ldw	r4,108(sp)
   1bddc:	d8801c17 	ldw	r2,112(sp)
   1bde0:	d811883a 	mov	r8,sp
   1bde4:	21400044 	addi	r5,r4,1
   1bde8:	003e6706 	br	1b788 <__alt_data_end+0xfc01b788>
   1bdec:	00bfffc4 	movi	r2,-1
   1bdf0:	003c4a06 	br	1af1c <__alt_data_end+0xfc01af1c>
   1bdf4:	9805883a 	mov	r2,r19
   1bdf8:	003ee806 	br	1b99c <__alt_data_end+0xfc01b99c>
   1bdfc:	d8c02217 	ldw	r3,136(sp)
   1be00:	0029883a 	mov	r20,zero
   1be04:	18800104 	addi	r2,r3,4
   1be08:	1cc0000b 	ldhu	r19,0(r3)
   1be0c:	803f9e0e 	bge	r16,zero,1bc88 <__alt_data_end+0xfc01bc88>
   1be10:	003dd706 	br	1b570 <__alt_data_end+0xfc01b570>
   1be14:	d8c02217 	ldw	r3,136(sp)
   1be18:	d9002417 	ldw	r4,144(sp)
   1be1c:	18800017 	ldw	r2,0(r3)
   1be20:	18c00104 	addi	r3,r3,4
   1be24:	d8c02215 	stw	r3,136(sp)
   1be28:	11000015 	stw	r4,0(r2)
   1be2c:	003b9a06 	br	1ac98 <__alt_data_end+0xfc01ac98>
   1be30:	d8c02217 	ldw	r3,136(sp)
   1be34:	0029883a 	mov	r20,zero
   1be38:	18800104 	addi	r2,r3,4
   1be3c:	1cc0000b 	ldhu	r19,0(r3)
   1be40:	803db20e 	bge	r16,zero,1b50c <__alt_data_end+0xfc01b50c>
   1be44:	003fb906 	br	1bd2c <__alt_data_end+0xfc01bd2c>
   1be48:	d9002217 	ldw	r4,136(sp)
   1be4c:	0029883a 	mov	r20,zero
   1be50:	24c00017 	ldw	r19,0(r4)
   1be54:	21000104 	addi	r4,r4,4
   1be58:	d9002215 	stw	r4,136(sp)
   1be5c:	003d3206 	br	1b328 <__alt_data_end+0xfc01b328>
   1be60:	d8c02217 	ldw	r3,136(sp)
   1be64:	1cc00017 	ldw	r19,0(r3)
   1be68:	18c00104 	addi	r3,r3,4
   1be6c:	d8c02215 	stw	r3,136(sp)
   1be70:	9829d7fa 	srai	r20,r19,31
   1be74:	a005883a 	mov	r2,r20
   1be78:	003d4b06 	br	1b3a8 <__alt_data_end+0xfc01b3a8>
   1be7c:	0009883a 	mov	r4,zero
   1be80:	01400044 	movi	r5,1
   1be84:	d811883a 	mov	r8,sp
   1be88:	003e4f06 	br	1b7c8 <__alt_data_end+0xfc01b7c8>
   1be8c:	d8c02215 	stw	r3,136(sp)
   1be90:	002b883a 	mov	r21,zero
   1be94:	003db806 	br	1b578 <__alt_data_end+0xfc01b578>
   1be98:	d811883a 	mov	r8,sp
   1be9c:	003e9606 	br	1b8f8 <__alt_data_end+0xfc01b8f8>
   1bea0:	010000f4 	movhi	r4,3
   1bea4:	212eb004 	addi	r4,r4,-17728
   1bea8:	d9002315 	stw	r4,140(sp)
   1beac:	003e6306 	br	1b83c <__alt_data_end+0xfc01b83c>
   1beb0:	b0c00043 	ldbu	r3,1(r22)
   1beb4:	8c400814 	ori	r17,r17,32
   1beb8:	b5800044 	addi	r22,r22,1
   1bebc:	18c03fcc 	andi	r3,r3,255
   1bec0:	18c0201c 	xori	r3,r3,128
   1bec4:	18ffe004 	addi	r3,r3,-128
   1bec8:	003b9c06 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1becc:	b809883a 	mov	r4,r23
   1bed0:	da002a15 	stw	r8,168(sp)
   1bed4:	00105480 	call	10548 <strlen>
   1bed8:	1029883a 	mov	r20,r2
   1bedc:	dd401d83 	ldbu	r21,118(sp)
   1bee0:	df002215 	stw	fp,136(sp)
   1bee4:	0021883a 	mov	r16,zero
   1bee8:	da002a17 	ldw	r8,168(sp)
   1beec:	003c3906 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1bef0:	d9402017 	ldw	r5,128(sp)
   1bef4:	d9002117 	ldw	r4,132(sp)
   1bef8:	d9801a04 	addi	r6,sp,104
   1befc:	001aab40 	call	1aab4 <__sprint_r.part.0>
   1bf00:	103e691e 	bne	r2,zero,1b8a8 <__alt_data_end+0xfc01b8a8>
   1bf04:	d9001b17 	ldw	r4,108(sp)
   1bf08:	d8801c17 	ldw	r2,112(sp)
   1bf0c:	d811883a 	mov	r8,sp
   1bf10:	21400044 	addi	r5,r4,1
   1bf14:	003e2e06 	br	1b7d0 <__alt_data_end+0xfc01b7d0>
   1bf18:	010000f4 	movhi	r4,3
   1bf1c:	212eb404 	addi	r4,r4,-17712
   1bf20:	d9002315 	stw	r4,140(sp)
   1bf24:	d9001b17 	ldw	r4,108(sp)
   1bf28:	21000044 	addi	r4,r4,1
   1bf2c:	003c5e06 	br	1b0a8 <__alt_data_end+0xfc01b0a8>
   1bf30:	002b883a 	mov	r21,zero
   1bf34:	00800084 	movi	r2,2
   1bf38:	10803fcc 	andi	r2,r2,255
   1bf3c:	01000044 	movi	r4,1
   1bf40:	11002b26 	beq	r2,r4,1bff0 <___vfiprintf_internal_r+0x1428>
   1bf44:	01000084 	movi	r4,2
   1bf48:	11002b1e 	bne	r2,r4,1bff8 <___vfiprintf_internal_r+0x1430>
   1bf4c:	1823883a 	mov	r17,r3
   1bf50:	003ee506 	br	1bae8 <__alt_data_end+0xfc01bae8>
   1bf54:	8807883a 	mov	r3,r17
   1bf58:	00800044 	movi	r2,1
   1bf5c:	003ff606 	br	1bf38 <__alt_data_end+0xfc01bf38>
   1bf60:	00800184 	movi	r2,6
   1bf64:	1400012e 	bgeu	r2,r16,1bf6c <___vfiprintf_internal_r+0x13a4>
   1bf68:	1021883a 	mov	r16,r2
   1bf6c:	8029883a 	mov	r20,r16
   1bf70:	8027883a 	mov	r19,r16
   1bf74:	80002216 	blt	r16,zero,1c000 <___vfiprintf_internal_r+0x1438>
   1bf78:	05c000f4 	movhi	r23,3
   1bf7c:	df002215 	stw	fp,136(sp)
   1bf80:	bdee4504 	addi	r23,r23,-18156
   1bf84:	003cfb06 	br	1b374 <__alt_data_end+0xfc01b374>
   1bf88:	d9002217 	ldw	r4,136(sp)
   1bf8c:	d9402417 	ldw	r5,144(sp)
   1bf90:	20800017 	ldw	r2,0(r4)
   1bf94:	21000104 	addi	r4,r4,4
   1bf98:	d9002215 	stw	r4,136(sp)
   1bf9c:	11400015 	stw	r5,0(r2)
   1bfa0:	003b3d06 	br	1ac98 <__alt_data_end+0xfc01ac98>
   1bfa4:	014000f4 	movhi	r5,3
   1bfa8:	296eb404 	addi	r5,r5,-17712
   1bfac:	d9402315 	stw	r5,140(sp)
   1bfb0:	d9401b17 	ldw	r5,108(sp)
   1bfb4:	29400044 	addi	r5,r5,1
   1bfb8:	003e6d06 	br	1b970 <__alt_data_end+0xfc01b970>
   1bfbc:	8029883a 	mov	r20,r16
   1bfc0:	dd401d83 	ldbu	r21,118(sp)
   1bfc4:	df002215 	stw	fp,136(sp)
   1bfc8:	0021883a 	mov	r16,zero
   1bfcc:	003c0106 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1bfd0:	00c000f4 	movhi	r3,3
   1bfd4:	18eeb004 	addi	r3,r3,-17728
   1bfd8:	d8c02315 	stw	r3,140(sp)
   1bfdc:	280d883a 	mov	r6,r5
   1bfe0:	003c6906 	br	1b188 <__alt_data_end+0xfc01b188>
   1bfe4:	802d883a 	mov	r22,r16
   1bfe8:	0021883a 	mov	r16,zero
   1bfec:	003b5406 	br	1ad40 <__alt_data_end+0xfc01ad40>
   1bff0:	1823883a 	mov	r17,r3
   1bff4:	003cf306 	br	1b3c4 <__alt_data_end+0xfc01b3c4>
   1bff8:	1823883a 	mov	r17,r3
   1bffc:	003cad06 	br	1b2b4 <__alt_data_end+0xfc01b2b4>
   1c000:	0027883a 	mov	r19,zero
   1c004:	003fdc06 	br	1bf78 <__alt_data_end+0xfc01bf78>
   1c008:	d9402217 	ldw	r5,136(sp)
   1c00c:	8005883a 	mov	r2,r16
   1c010:	b0c00043 	ldbu	r3,1(r22)
   1c014:	2c000017 	ldw	r16,0(r5)
   1c018:	29000104 	addi	r4,r5,4
   1c01c:	d9002215 	stw	r4,136(sp)
   1c020:	102d883a 	mov	r22,r2
   1c024:	803fa50e 	bge	r16,zero,1bebc <__alt_data_end+0xfc01bebc>
   1c028:	18c03fcc 	andi	r3,r3,255
   1c02c:	18c0201c 	xori	r3,r3,128
   1c030:	043fffc4 	movi	r16,-1
   1c034:	18ffe004 	addi	r3,r3,-128
   1c038:	003b4006 	br	1ad3c <__alt_data_end+0xfc01ad3c>
   1c03c:	d9402303 	ldbu	r5,140(sp)
   1c040:	d9401d85 	stb	r5,118(sp)
   1c044:	003cae06 	br	1b300 <__alt_data_end+0xfc01b300>
   1c048:	d8c02303 	ldbu	r3,140(sp)
   1c04c:	d8c01d85 	stb	r3,118(sp)
   1c050:	003d1406 	br	1b4a4 <__alt_data_end+0xfc01b4a4>
   1c054:	d8c02303 	ldbu	r3,140(sp)
   1c058:	d8c01d85 	stb	r3,118(sp)
   1c05c:	003cca06 	br	1b388 <__alt_data_end+0xfc01b388>
   1c060:	8880004c 	andi	r2,r17,1
   1c064:	002b883a 	mov	r21,zero
   1c068:	10000526 	beq	r2,zero,1c080 <___vfiprintf_internal_r+0x14b8>
   1c06c:	00800c04 	movi	r2,48
   1c070:	d88019c5 	stb	r2,103(sp)
   1c074:	dd002817 	ldw	r20,160(sp)
   1c078:	ddc019c4 	addi	r23,sp,103
   1c07c:	003bd506 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1c080:	0029883a 	mov	r20,zero
   1c084:	ddc01a04 	addi	r23,sp,104
   1c088:	003bd206 	br	1afd4 <__alt_data_end+0xfc01afd4>
   1c08c:	d9002303 	ldbu	r4,140(sp)
   1c090:	d9001d85 	stb	r4,118(sp)
   1c094:	003da606 	br	1b730 <__alt_data_end+0xfc01b730>
   1c098:	d8c02303 	ldbu	r3,140(sp)
   1c09c:	d8c01d85 	stb	r3,118(sp)
   1c0a0:	003c7606 	br	1b27c <__alt_data_end+0xfc01b27c>
   1c0a4:	d8c02303 	ldbu	r3,140(sp)
   1c0a8:	d8c01d85 	stb	r3,118(sp)
   1c0ac:	003c6506 	br	1b244 <__alt_data_end+0xfc01b244>
   1c0b0:	d9002303 	ldbu	r4,140(sp)
   1c0b4:	d9001d85 	stb	r4,118(sp)
   1c0b8:	003d3d06 	br	1b5b0 <__alt_data_end+0xfc01b5b0>
   1c0bc:	d8c02303 	ldbu	r3,140(sp)
   1c0c0:	d8c01d85 	stb	r3,118(sp)
   1c0c4:	003d1d06 	br	1b53c <__alt_data_end+0xfc01b53c>
   1c0c8:	d8c02303 	ldbu	r3,140(sp)
   1c0cc:	d8c01d85 	stb	r3,118(sp)
   1c0d0:	003d0306 	br	1b4e0 <__alt_data_end+0xfc01b4e0>

0001c0d4 <__vfiprintf_internal>:
   1c0d4:	008000f4 	movhi	r2,3
   1c0d8:	10bb3c04 	addi	r2,r2,-4880
   1c0dc:	300f883a 	mov	r7,r6
   1c0e0:	280d883a 	mov	r6,r5
   1c0e4:	200b883a 	mov	r5,r4
   1c0e8:	11000017 	ldw	r4,0(r2)
   1c0ec:	001abc81 	jmpi	1abc8 <___vfiprintf_internal_r>

0001c0f0 <__sbprintf>:
   1c0f0:	2880030b 	ldhu	r2,12(r5)
   1c0f4:	2ac01917 	ldw	r11,100(r5)
   1c0f8:	2a80038b 	ldhu	r10,14(r5)
   1c0fc:	2a400717 	ldw	r9,28(r5)
   1c100:	2a000917 	ldw	r8,36(r5)
   1c104:	defee204 	addi	sp,sp,-1144
   1c108:	00c10004 	movi	r3,1024
   1c10c:	dc011a15 	stw	r16,1128(sp)
   1c110:	10bfff4c 	andi	r2,r2,65533
   1c114:	2821883a 	mov	r16,r5
   1c118:	d8cb883a 	add	r5,sp,r3
   1c11c:	dc811c15 	stw	r18,1136(sp)
   1c120:	dc411b15 	stw	r17,1132(sp)
   1c124:	dfc11d15 	stw	ra,1140(sp)
   1c128:	2025883a 	mov	r18,r4
   1c12c:	d881030d 	sth	r2,1036(sp)
   1c130:	dac11915 	stw	r11,1124(sp)
   1c134:	da81038d 	sth	r10,1038(sp)
   1c138:	da410715 	stw	r9,1052(sp)
   1c13c:	da010915 	stw	r8,1060(sp)
   1c140:	dec10015 	stw	sp,1024(sp)
   1c144:	dec10415 	stw	sp,1040(sp)
   1c148:	d8c10215 	stw	r3,1032(sp)
   1c14c:	d8c10515 	stw	r3,1044(sp)
   1c150:	d8010615 	stw	zero,1048(sp)
   1c154:	001abc80 	call	1abc8 <___vfiprintf_internal_r>
   1c158:	1023883a 	mov	r17,r2
   1c15c:	10000416 	blt	r2,zero,1c170 <__sbprintf+0x80>
   1c160:	d9410004 	addi	r5,sp,1024
   1c164:	9009883a 	mov	r4,r18
   1c168:	00168780 	call	16878 <_fflush_r>
   1c16c:	10000d1e 	bne	r2,zero,1c1a4 <__sbprintf+0xb4>
   1c170:	d881030b 	ldhu	r2,1036(sp)
   1c174:	1080100c 	andi	r2,r2,64
   1c178:	10000326 	beq	r2,zero,1c188 <__sbprintf+0x98>
   1c17c:	8080030b 	ldhu	r2,12(r16)
   1c180:	10801014 	ori	r2,r2,64
   1c184:	8080030d 	sth	r2,12(r16)
   1c188:	8805883a 	mov	r2,r17
   1c18c:	dfc11d17 	ldw	ra,1140(sp)
   1c190:	dc811c17 	ldw	r18,1136(sp)
   1c194:	dc411b17 	ldw	r17,1132(sp)
   1c198:	dc011a17 	ldw	r16,1128(sp)
   1c19c:	dec11e04 	addi	sp,sp,1144
   1c1a0:	f800283a 	ret
   1c1a4:	047fffc4 	movi	r17,-1
   1c1a8:	003ff106 	br	1c170 <__alt_data_end+0xfc01c170>

0001c1ac <__swbuf_r>:
   1c1ac:	defffb04 	addi	sp,sp,-20
   1c1b0:	dcc00315 	stw	r19,12(sp)
   1c1b4:	dc800215 	stw	r18,8(sp)
   1c1b8:	dc000015 	stw	r16,0(sp)
   1c1bc:	dfc00415 	stw	ra,16(sp)
   1c1c0:	dc400115 	stw	r17,4(sp)
   1c1c4:	2025883a 	mov	r18,r4
   1c1c8:	2827883a 	mov	r19,r5
   1c1cc:	3021883a 	mov	r16,r6
   1c1d0:	20000226 	beq	r4,zero,1c1dc <__swbuf_r+0x30>
   1c1d4:	20800e17 	ldw	r2,56(r4)
   1c1d8:	10004226 	beq	r2,zero,1c2e4 <__swbuf_r+0x138>
   1c1dc:	80800617 	ldw	r2,24(r16)
   1c1e0:	8100030b 	ldhu	r4,12(r16)
   1c1e4:	80800215 	stw	r2,8(r16)
   1c1e8:	2080020c 	andi	r2,r4,8
   1c1ec:	10003626 	beq	r2,zero,1c2c8 <__swbuf_r+0x11c>
   1c1f0:	80c00417 	ldw	r3,16(r16)
   1c1f4:	18003426 	beq	r3,zero,1c2c8 <__swbuf_r+0x11c>
   1c1f8:	2088000c 	andi	r2,r4,8192
   1c1fc:	9c403fcc 	andi	r17,r19,255
   1c200:	10001a26 	beq	r2,zero,1c26c <__swbuf_r+0xc0>
   1c204:	80800017 	ldw	r2,0(r16)
   1c208:	81000517 	ldw	r4,20(r16)
   1c20c:	10c7c83a 	sub	r3,r2,r3
   1c210:	1900200e 	bge	r3,r4,1c294 <__swbuf_r+0xe8>
   1c214:	18c00044 	addi	r3,r3,1
   1c218:	81000217 	ldw	r4,8(r16)
   1c21c:	11400044 	addi	r5,r2,1
   1c220:	81400015 	stw	r5,0(r16)
   1c224:	213fffc4 	addi	r4,r4,-1
   1c228:	81000215 	stw	r4,8(r16)
   1c22c:	14c00005 	stb	r19,0(r2)
   1c230:	80800517 	ldw	r2,20(r16)
   1c234:	10c01e26 	beq	r2,r3,1c2b0 <__swbuf_r+0x104>
   1c238:	8080030b 	ldhu	r2,12(r16)
   1c23c:	1080004c 	andi	r2,r2,1
   1c240:	10000226 	beq	r2,zero,1c24c <__swbuf_r+0xa0>
   1c244:	00800284 	movi	r2,10
   1c248:	88801926 	beq	r17,r2,1c2b0 <__swbuf_r+0x104>
   1c24c:	8805883a 	mov	r2,r17
   1c250:	dfc00417 	ldw	ra,16(sp)
   1c254:	dcc00317 	ldw	r19,12(sp)
   1c258:	dc800217 	ldw	r18,8(sp)
   1c25c:	dc400117 	ldw	r17,4(sp)
   1c260:	dc000017 	ldw	r16,0(sp)
   1c264:	dec00504 	addi	sp,sp,20
   1c268:	f800283a 	ret
   1c26c:	81401917 	ldw	r5,100(r16)
   1c270:	00b7ffc4 	movi	r2,-8193
   1c274:	21080014 	ori	r4,r4,8192
   1c278:	2884703a 	and	r2,r5,r2
   1c27c:	80801915 	stw	r2,100(r16)
   1c280:	80800017 	ldw	r2,0(r16)
   1c284:	8100030d 	sth	r4,12(r16)
   1c288:	81000517 	ldw	r4,20(r16)
   1c28c:	10c7c83a 	sub	r3,r2,r3
   1c290:	193fe016 	blt	r3,r4,1c214 <__alt_data_end+0xfc01c214>
   1c294:	800b883a 	mov	r5,r16
   1c298:	9009883a 	mov	r4,r18
   1c29c:	00168780 	call	16878 <_fflush_r>
   1c2a0:	1000071e 	bne	r2,zero,1c2c0 <__swbuf_r+0x114>
   1c2a4:	80800017 	ldw	r2,0(r16)
   1c2a8:	00c00044 	movi	r3,1
   1c2ac:	003fda06 	br	1c218 <__alt_data_end+0xfc01c218>
   1c2b0:	800b883a 	mov	r5,r16
   1c2b4:	9009883a 	mov	r4,r18
   1c2b8:	00168780 	call	16878 <_fflush_r>
   1c2bc:	103fe326 	beq	r2,zero,1c24c <__alt_data_end+0xfc01c24c>
   1c2c0:	00bfffc4 	movi	r2,-1
   1c2c4:	003fe206 	br	1c250 <__alt_data_end+0xfc01c250>
   1c2c8:	800b883a 	mov	r5,r16
   1c2cc:	9009883a 	mov	r4,r18
   1c2d0:	0014c580 	call	14c58 <__swsetup_r>
   1c2d4:	103ffa1e 	bne	r2,zero,1c2c0 <__alt_data_end+0xfc01c2c0>
   1c2d8:	8100030b 	ldhu	r4,12(r16)
   1c2dc:	80c00417 	ldw	r3,16(r16)
   1c2e0:	003fc506 	br	1c1f8 <__alt_data_end+0xfc01c1f8>
   1c2e4:	0016c640 	call	16c64 <__sinit>
   1c2e8:	003fbc06 	br	1c1dc <__alt_data_end+0xfc01c1dc>

0001c2ec <__swbuf>:
   1c2ec:	008000f4 	movhi	r2,3
   1c2f0:	10bb3c04 	addi	r2,r2,-4880
   1c2f4:	280d883a 	mov	r6,r5
   1c2f8:	200b883a 	mov	r5,r4
   1c2fc:	11000017 	ldw	r4,0(r2)
   1c300:	001c1ac1 	jmpi	1c1ac <__swbuf_r>

0001c304 <_write_r>:
   1c304:	defffd04 	addi	sp,sp,-12
   1c308:	2805883a 	mov	r2,r5
   1c30c:	dc000015 	stw	r16,0(sp)
   1c310:	040000f4 	movhi	r16,3
   1c314:	dc400115 	stw	r17,4(sp)
   1c318:	300b883a 	mov	r5,r6
   1c31c:	8407d704 	addi	r16,r16,8028
   1c320:	2023883a 	mov	r17,r4
   1c324:	380d883a 	mov	r6,r7
   1c328:	1009883a 	mov	r4,r2
   1c32c:	dfc00215 	stw	ra,8(sp)
   1c330:	80000015 	stw	zero,0(r16)
   1c334:	0020a300 	call	20a30 <write>
   1c338:	00ffffc4 	movi	r3,-1
   1c33c:	10c00526 	beq	r2,r3,1c354 <_write_r+0x50>
   1c340:	dfc00217 	ldw	ra,8(sp)
   1c344:	dc400117 	ldw	r17,4(sp)
   1c348:	dc000017 	ldw	r16,0(sp)
   1c34c:	dec00304 	addi	sp,sp,12
   1c350:	f800283a 	ret
   1c354:	80c00017 	ldw	r3,0(r16)
   1c358:	183ff926 	beq	r3,zero,1c340 <__alt_data_end+0xfc01c340>
   1c35c:	88c00015 	stw	r3,0(r17)
   1c360:	003ff706 	br	1c340 <__alt_data_end+0xfc01c340>

0001c364 <_close_r>:
   1c364:	defffd04 	addi	sp,sp,-12
   1c368:	dc000015 	stw	r16,0(sp)
   1c36c:	040000f4 	movhi	r16,3
   1c370:	dc400115 	stw	r17,4(sp)
   1c374:	8407d704 	addi	r16,r16,8028
   1c378:	2023883a 	mov	r17,r4
   1c37c:	2809883a 	mov	r4,r5
   1c380:	dfc00215 	stw	ra,8(sp)
   1c384:	80000015 	stw	zero,0(r16)
   1c388:	001ff340 	call	1ff34 <close>
   1c38c:	00ffffc4 	movi	r3,-1
   1c390:	10c00526 	beq	r2,r3,1c3a8 <_close_r+0x44>
   1c394:	dfc00217 	ldw	ra,8(sp)
   1c398:	dc400117 	ldw	r17,4(sp)
   1c39c:	dc000017 	ldw	r16,0(sp)
   1c3a0:	dec00304 	addi	sp,sp,12
   1c3a4:	f800283a 	ret
   1c3a8:	80c00017 	ldw	r3,0(r16)
   1c3ac:	183ff926 	beq	r3,zero,1c394 <__alt_data_end+0xfc01c394>
   1c3b0:	88c00015 	stw	r3,0(r17)
   1c3b4:	003ff706 	br	1c394 <__alt_data_end+0xfc01c394>

0001c3b8 <_calloc_r>:
   1c3b8:	defffe04 	addi	sp,sp,-8
   1c3bc:	2805883a 	mov	r2,r5
   1c3c0:	dc000015 	stw	r16,0(sp)
   1c3c4:	300b883a 	mov	r5,r6
   1c3c8:	2021883a 	mov	r16,r4
   1c3cc:	1009883a 	mov	r4,r2
   1c3d0:	dfc00115 	stw	ra,4(sp)
   1c3d4:	000d8e00 	call	d8e0 <__mulsi3>
   1c3d8:	100b883a 	mov	r5,r2
   1c3dc:	8009883a 	mov	r4,r16
   1c3e0:	000f4740 	call	f474 <_malloc_r>
   1c3e4:	10002926 	beq	r2,zero,1c48c <_calloc_r+0xd4>
   1c3e8:	11bfff17 	ldw	r6,-4(r2)
   1c3ec:	1021883a 	mov	r16,r2
   1c3f0:	00bfff04 	movi	r2,-4
   1c3f4:	308c703a 	and	r6,r6,r2
   1c3f8:	00c00904 	movi	r3,36
   1c3fc:	308d883a 	add	r6,r6,r2
   1c400:	19801636 	bltu	r3,r6,1c45c <_calloc_r+0xa4>
   1c404:	008004c4 	movi	r2,19
   1c408:	11800b2e 	bgeu	r2,r6,1c438 <_calloc_r+0x80>
   1c40c:	80000015 	stw	zero,0(r16)
   1c410:	80000115 	stw	zero,4(r16)
   1c414:	008006c4 	movi	r2,27
   1c418:	11801a2e 	bgeu	r2,r6,1c484 <_calloc_r+0xcc>
   1c41c:	80000215 	stw	zero,8(r16)
   1c420:	80000315 	stw	zero,12(r16)
   1c424:	30c0151e 	bne	r6,r3,1c47c <_calloc_r+0xc4>
   1c428:	80000415 	stw	zero,16(r16)
   1c42c:	80800604 	addi	r2,r16,24
   1c430:	80000515 	stw	zero,20(r16)
   1c434:	00000106 	br	1c43c <_calloc_r+0x84>
   1c438:	8005883a 	mov	r2,r16
   1c43c:	10000015 	stw	zero,0(r2)
   1c440:	10000115 	stw	zero,4(r2)
   1c444:	10000215 	stw	zero,8(r2)
   1c448:	8005883a 	mov	r2,r16
   1c44c:	dfc00117 	ldw	ra,4(sp)
   1c450:	dc000017 	ldw	r16,0(sp)
   1c454:	dec00204 	addi	sp,sp,8
   1c458:	f800283a 	ret
   1c45c:	000b883a 	mov	r5,zero
   1c460:	8009883a 	mov	r4,r16
   1c464:	000fdc80 	call	fdc8 <memset>
   1c468:	8005883a 	mov	r2,r16
   1c46c:	dfc00117 	ldw	ra,4(sp)
   1c470:	dc000017 	ldw	r16,0(sp)
   1c474:	dec00204 	addi	sp,sp,8
   1c478:	f800283a 	ret
   1c47c:	80800404 	addi	r2,r16,16
   1c480:	003fee06 	br	1c43c <__alt_data_end+0xfc01c43c>
   1c484:	80800204 	addi	r2,r16,8
   1c488:	003fec06 	br	1c43c <__alt_data_end+0xfc01c43c>
   1c48c:	0005883a 	mov	r2,zero
   1c490:	003fee06 	br	1c44c <__alt_data_end+0xfc01c44c>

0001c494 <_fclose_r>:
   1c494:	28003926 	beq	r5,zero,1c57c <_fclose_r+0xe8>
   1c498:	defffc04 	addi	sp,sp,-16
   1c49c:	dc400115 	stw	r17,4(sp)
   1c4a0:	dc000015 	stw	r16,0(sp)
   1c4a4:	dfc00315 	stw	ra,12(sp)
   1c4a8:	dc800215 	stw	r18,8(sp)
   1c4ac:	2023883a 	mov	r17,r4
   1c4b0:	2821883a 	mov	r16,r5
   1c4b4:	20000226 	beq	r4,zero,1c4c0 <_fclose_r+0x2c>
   1c4b8:	20800e17 	ldw	r2,56(r4)
   1c4bc:	10002726 	beq	r2,zero,1c55c <_fclose_r+0xc8>
   1c4c0:	8080030f 	ldh	r2,12(r16)
   1c4c4:	1000071e 	bne	r2,zero,1c4e4 <_fclose_r+0x50>
   1c4c8:	0005883a 	mov	r2,zero
   1c4cc:	dfc00317 	ldw	ra,12(sp)
   1c4d0:	dc800217 	ldw	r18,8(sp)
   1c4d4:	dc400117 	ldw	r17,4(sp)
   1c4d8:	dc000017 	ldw	r16,0(sp)
   1c4dc:	dec00404 	addi	sp,sp,16
   1c4e0:	f800283a 	ret
   1c4e4:	800b883a 	mov	r5,r16
   1c4e8:	8809883a 	mov	r4,r17
   1c4ec:	001665c0 	call	1665c <__sflush_r>
   1c4f0:	1025883a 	mov	r18,r2
   1c4f4:	80800b17 	ldw	r2,44(r16)
   1c4f8:	10000426 	beq	r2,zero,1c50c <_fclose_r+0x78>
   1c4fc:	81400717 	ldw	r5,28(r16)
   1c500:	8809883a 	mov	r4,r17
   1c504:	103ee83a 	callr	r2
   1c508:	10001616 	blt	r2,zero,1c564 <_fclose_r+0xd0>
   1c50c:	8080030b 	ldhu	r2,12(r16)
   1c510:	1080200c 	andi	r2,r2,128
   1c514:	1000151e 	bne	r2,zero,1c56c <_fclose_r+0xd8>
   1c518:	81400c17 	ldw	r5,48(r16)
   1c51c:	28000526 	beq	r5,zero,1c534 <_fclose_r+0xa0>
   1c520:	80801004 	addi	r2,r16,64
   1c524:	28800226 	beq	r5,r2,1c530 <_fclose_r+0x9c>
   1c528:	8809883a 	mov	r4,r17
   1c52c:	0016dd80 	call	16dd8 <_free_r>
   1c530:	80000c15 	stw	zero,48(r16)
   1c534:	81401117 	ldw	r5,68(r16)
   1c538:	28000326 	beq	r5,zero,1c548 <_fclose_r+0xb4>
   1c53c:	8809883a 	mov	r4,r17
   1c540:	0016dd80 	call	16dd8 <_free_r>
   1c544:	80001115 	stw	zero,68(r16)
   1c548:	0016c740 	call	16c74 <__sfp_lock_acquire>
   1c54c:	8000030d 	sth	zero,12(r16)
   1c550:	0016c780 	call	16c78 <__sfp_lock_release>
   1c554:	9005883a 	mov	r2,r18
   1c558:	003fdc06 	br	1c4cc <__alt_data_end+0xfc01c4cc>
   1c55c:	0016c640 	call	16c64 <__sinit>
   1c560:	003fd706 	br	1c4c0 <__alt_data_end+0xfc01c4c0>
   1c564:	04bfffc4 	movi	r18,-1
   1c568:	003fe806 	br	1c50c <__alt_data_end+0xfc01c50c>
   1c56c:	81400417 	ldw	r5,16(r16)
   1c570:	8809883a 	mov	r4,r17
   1c574:	0016dd80 	call	16dd8 <_free_r>
   1c578:	003fe706 	br	1c518 <__alt_data_end+0xfc01c518>
   1c57c:	0005883a 	mov	r2,zero
   1c580:	f800283a 	ret

0001c584 <fclose>:
   1c584:	008000f4 	movhi	r2,3
   1c588:	10bb3c04 	addi	r2,r2,-4880
   1c58c:	200b883a 	mov	r5,r4
   1c590:	11000017 	ldw	r4,0(r2)
   1c594:	001c4941 	jmpi	1c494 <_fclose_r>

0001c598 <__fputwc>:
   1c598:	defff804 	addi	sp,sp,-32
   1c59c:	dcc00415 	stw	r19,16(sp)
   1c5a0:	dc800315 	stw	r18,12(sp)
   1c5a4:	dc000115 	stw	r16,4(sp)
   1c5a8:	dfc00715 	stw	ra,28(sp)
   1c5ac:	dd400615 	stw	r21,24(sp)
   1c5b0:	dd000515 	stw	r20,20(sp)
   1c5b4:	dc400215 	stw	r17,8(sp)
   1c5b8:	2027883a 	mov	r19,r4
   1c5bc:	2825883a 	mov	r18,r5
   1c5c0:	3021883a 	mov	r16,r6
   1c5c4:	00177c00 	call	177c0 <__locale_mb_cur_max>
   1c5c8:	00c00044 	movi	r3,1
   1c5cc:	10c03e26 	beq	r2,r3,1c6c8 <__fputwc+0x130>
   1c5d0:	81c01704 	addi	r7,r16,92
   1c5d4:	900d883a 	mov	r6,r18
   1c5d8:	d80b883a 	mov	r5,sp
   1c5dc:	9809883a 	mov	r4,r19
   1c5e0:	001c9100 	call	1c910 <_wcrtomb_r>
   1c5e4:	1029883a 	mov	r20,r2
   1c5e8:	00bfffc4 	movi	r2,-1
   1c5ec:	a0802026 	beq	r20,r2,1c670 <__fputwc+0xd8>
   1c5f0:	d9400003 	ldbu	r5,0(sp)
   1c5f4:	a0001c26 	beq	r20,zero,1c668 <__fputwc+0xd0>
   1c5f8:	0023883a 	mov	r17,zero
   1c5fc:	05400284 	movi	r21,10
   1c600:	00000906 	br	1c628 <__fputwc+0x90>
   1c604:	80800017 	ldw	r2,0(r16)
   1c608:	11400005 	stb	r5,0(r2)
   1c60c:	80c00017 	ldw	r3,0(r16)
   1c610:	18c00044 	addi	r3,r3,1
   1c614:	80c00015 	stw	r3,0(r16)
   1c618:	8c400044 	addi	r17,r17,1
   1c61c:	dc45883a 	add	r2,sp,r17
   1c620:	8d00112e 	bgeu	r17,r20,1c668 <__fputwc+0xd0>
   1c624:	11400003 	ldbu	r5,0(r2)
   1c628:	80c00217 	ldw	r3,8(r16)
   1c62c:	18ffffc4 	addi	r3,r3,-1
   1c630:	80c00215 	stw	r3,8(r16)
   1c634:	183ff30e 	bge	r3,zero,1c604 <__alt_data_end+0xfc01c604>
   1c638:	80800617 	ldw	r2,24(r16)
   1c63c:	18801916 	blt	r3,r2,1c6a4 <__fputwc+0x10c>
   1c640:	80800017 	ldw	r2,0(r16)
   1c644:	11400005 	stb	r5,0(r2)
   1c648:	80800017 	ldw	r2,0(r16)
   1c64c:	10c00003 	ldbu	r3,0(r2)
   1c650:	10800044 	addi	r2,r2,1
   1c654:	1d402326 	beq	r3,r21,1c6e4 <__fputwc+0x14c>
   1c658:	80800015 	stw	r2,0(r16)
   1c65c:	8c400044 	addi	r17,r17,1
   1c660:	dc45883a 	add	r2,sp,r17
   1c664:	8d3fef36 	bltu	r17,r20,1c624 <__alt_data_end+0xfc01c624>
   1c668:	9005883a 	mov	r2,r18
   1c66c:	00000406 	br	1c680 <__fputwc+0xe8>
   1c670:	80c0030b 	ldhu	r3,12(r16)
   1c674:	a005883a 	mov	r2,r20
   1c678:	18c01014 	ori	r3,r3,64
   1c67c:	80c0030d 	sth	r3,12(r16)
   1c680:	dfc00717 	ldw	ra,28(sp)
   1c684:	dd400617 	ldw	r21,24(sp)
   1c688:	dd000517 	ldw	r20,20(sp)
   1c68c:	dcc00417 	ldw	r19,16(sp)
   1c690:	dc800317 	ldw	r18,12(sp)
   1c694:	dc400217 	ldw	r17,8(sp)
   1c698:	dc000117 	ldw	r16,4(sp)
   1c69c:	dec00804 	addi	sp,sp,32
   1c6a0:	f800283a 	ret
   1c6a4:	800d883a 	mov	r6,r16
   1c6a8:	29403fcc 	andi	r5,r5,255
   1c6ac:	9809883a 	mov	r4,r19
   1c6b0:	001c1ac0 	call	1c1ac <__swbuf_r>
   1c6b4:	10bfffe0 	cmpeqi	r2,r2,-1
   1c6b8:	10803fcc 	andi	r2,r2,255
   1c6bc:	103fd626 	beq	r2,zero,1c618 <__alt_data_end+0xfc01c618>
   1c6c0:	00bfffc4 	movi	r2,-1
   1c6c4:	003fee06 	br	1c680 <__alt_data_end+0xfc01c680>
   1c6c8:	90ffffc4 	addi	r3,r18,-1
   1c6cc:	01003f84 	movi	r4,254
   1c6d0:	20ffbf36 	bltu	r4,r3,1c5d0 <__alt_data_end+0xfc01c5d0>
   1c6d4:	900b883a 	mov	r5,r18
   1c6d8:	dc800005 	stb	r18,0(sp)
   1c6dc:	1029883a 	mov	r20,r2
   1c6e0:	003fc506 	br	1c5f8 <__alt_data_end+0xfc01c5f8>
   1c6e4:	800d883a 	mov	r6,r16
   1c6e8:	a80b883a 	mov	r5,r21
   1c6ec:	9809883a 	mov	r4,r19
   1c6f0:	001c1ac0 	call	1c1ac <__swbuf_r>
   1c6f4:	10bfffe0 	cmpeqi	r2,r2,-1
   1c6f8:	003fef06 	br	1c6b8 <__alt_data_end+0xfc01c6b8>

0001c6fc <_fputwc_r>:
   1c6fc:	3080030b 	ldhu	r2,12(r6)
   1c700:	10c8000c 	andi	r3,r2,8192
   1c704:	1800051e 	bne	r3,zero,1c71c <_fputwc_r+0x20>
   1c708:	30c01917 	ldw	r3,100(r6)
   1c70c:	10880014 	ori	r2,r2,8192
   1c710:	3080030d 	sth	r2,12(r6)
   1c714:	18880014 	ori	r2,r3,8192
   1c718:	30801915 	stw	r2,100(r6)
   1c71c:	001c5981 	jmpi	1c598 <__fputwc>

0001c720 <fputwc>:
   1c720:	008000f4 	movhi	r2,3
   1c724:	defffc04 	addi	sp,sp,-16
   1c728:	10bb3c04 	addi	r2,r2,-4880
   1c72c:	dc000115 	stw	r16,4(sp)
   1c730:	14000017 	ldw	r16,0(r2)
   1c734:	dc400215 	stw	r17,8(sp)
   1c738:	dfc00315 	stw	ra,12(sp)
   1c73c:	2023883a 	mov	r17,r4
   1c740:	80000226 	beq	r16,zero,1c74c <fputwc+0x2c>
   1c744:	80800e17 	ldw	r2,56(r16)
   1c748:	10001026 	beq	r2,zero,1c78c <fputwc+0x6c>
   1c74c:	2880030b 	ldhu	r2,12(r5)
   1c750:	10c8000c 	andi	r3,r2,8192
   1c754:	1800051e 	bne	r3,zero,1c76c <fputwc+0x4c>
   1c758:	28c01917 	ldw	r3,100(r5)
   1c75c:	10880014 	ori	r2,r2,8192
   1c760:	2880030d 	sth	r2,12(r5)
   1c764:	18880014 	ori	r2,r3,8192
   1c768:	28801915 	stw	r2,100(r5)
   1c76c:	280d883a 	mov	r6,r5
   1c770:	8009883a 	mov	r4,r16
   1c774:	880b883a 	mov	r5,r17
   1c778:	dfc00317 	ldw	ra,12(sp)
   1c77c:	dc400217 	ldw	r17,8(sp)
   1c780:	dc000117 	ldw	r16,4(sp)
   1c784:	dec00404 	addi	sp,sp,16
   1c788:	001c5981 	jmpi	1c598 <__fputwc>
   1c78c:	8009883a 	mov	r4,r16
   1c790:	d9400015 	stw	r5,0(sp)
   1c794:	0016c640 	call	16c64 <__sinit>
   1c798:	d9400017 	ldw	r5,0(sp)
   1c79c:	003feb06 	br	1c74c <__alt_data_end+0xfc01c74c>

0001c7a0 <_fstat_r>:
   1c7a0:	defffd04 	addi	sp,sp,-12
   1c7a4:	2805883a 	mov	r2,r5
   1c7a8:	dc000015 	stw	r16,0(sp)
   1c7ac:	040000f4 	movhi	r16,3
   1c7b0:	dc400115 	stw	r17,4(sp)
   1c7b4:	8407d704 	addi	r16,r16,8028
   1c7b8:	2023883a 	mov	r17,r4
   1c7bc:	300b883a 	mov	r5,r6
   1c7c0:	1009883a 	mov	r4,r2
   1c7c4:	dfc00215 	stw	ra,8(sp)
   1c7c8:	80000015 	stw	zero,0(r16)
   1c7cc:	00200a80 	call	200a8 <fstat>
   1c7d0:	00ffffc4 	movi	r3,-1
   1c7d4:	10c00526 	beq	r2,r3,1c7ec <_fstat_r+0x4c>
   1c7d8:	dfc00217 	ldw	ra,8(sp)
   1c7dc:	dc400117 	ldw	r17,4(sp)
   1c7e0:	dc000017 	ldw	r16,0(sp)
   1c7e4:	dec00304 	addi	sp,sp,12
   1c7e8:	f800283a 	ret
   1c7ec:	80c00017 	ldw	r3,0(r16)
   1c7f0:	183ff926 	beq	r3,zero,1c7d8 <__alt_data_end+0xfc01c7d8>
   1c7f4:	88c00015 	stw	r3,0(r17)
   1c7f8:	003ff706 	br	1c7d8 <__alt_data_end+0xfc01c7d8>

0001c7fc <_isatty_r>:
   1c7fc:	defffd04 	addi	sp,sp,-12
   1c800:	dc000015 	stw	r16,0(sp)
   1c804:	040000f4 	movhi	r16,3
   1c808:	dc400115 	stw	r17,4(sp)
   1c80c:	8407d704 	addi	r16,r16,8028
   1c810:	2023883a 	mov	r17,r4
   1c814:	2809883a 	mov	r4,r5
   1c818:	dfc00215 	stw	ra,8(sp)
   1c81c:	80000015 	stw	zero,0(r16)
   1c820:	00201bc0 	call	201bc <isatty>
   1c824:	00ffffc4 	movi	r3,-1
   1c828:	10c00526 	beq	r2,r3,1c840 <_isatty_r+0x44>
   1c82c:	dfc00217 	ldw	ra,8(sp)
   1c830:	dc400117 	ldw	r17,4(sp)
   1c834:	dc000017 	ldw	r16,0(sp)
   1c838:	dec00304 	addi	sp,sp,12
   1c83c:	f800283a 	ret
   1c840:	80c00017 	ldw	r3,0(r16)
   1c844:	183ff926 	beq	r3,zero,1c82c <__alt_data_end+0xfc01c82c>
   1c848:	88c00015 	stw	r3,0(r17)
   1c84c:	003ff706 	br	1c82c <__alt_data_end+0xfc01c82c>

0001c850 <_lseek_r>:
   1c850:	defffd04 	addi	sp,sp,-12
   1c854:	2805883a 	mov	r2,r5
   1c858:	dc000015 	stw	r16,0(sp)
   1c85c:	040000f4 	movhi	r16,3
   1c860:	dc400115 	stw	r17,4(sp)
   1c864:	300b883a 	mov	r5,r6
   1c868:	8407d704 	addi	r16,r16,8028
   1c86c:	2023883a 	mov	r17,r4
   1c870:	380d883a 	mov	r6,r7
   1c874:	1009883a 	mov	r4,r2
   1c878:	dfc00215 	stw	ra,8(sp)
   1c87c:	80000015 	stw	zero,0(r16)
   1c880:	00204fc0 	call	204fc <lseek>
   1c884:	00ffffc4 	movi	r3,-1
   1c888:	10c00526 	beq	r2,r3,1c8a0 <_lseek_r+0x50>
   1c88c:	dfc00217 	ldw	ra,8(sp)
   1c890:	dc400117 	ldw	r17,4(sp)
   1c894:	dc000017 	ldw	r16,0(sp)
   1c898:	dec00304 	addi	sp,sp,12
   1c89c:	f800283a 	ret
   1c8a0:	80c00017 	ldw	r3,0(r16)
   1c8a4:	183ff926 	beq	r3,zero,1c88c <__alt_data_end+0xfc01c88c>
   1c8a8:	88c00015 	stw	r3,0(r17)
   1c8ac:	003ff706 	br	1c88c <__alt_data_end+0xfc01c88c>

0001c8b0 <_read_r>:
   1c8b0:	defffd04 	addi	sp,sp,-12
   1c8b4:	2805883a 	mov	r2,r5
   1c8b8:	dc000015 	stw	r16,0(sp)
   1c8bc:	040000f4 	movhi	r16,3
   1c8c0:	dc400115 	stw	r17,4(sp)
   1c8c4:	300b883a 	mov	r5,r6
   1c8c8:	8407d704 	addi	r16,r16,8028
   1c8cc:	2023883a 	mov	r17,r4
   1c8d0:	380d883a 	mov	r6,r7
   1c8d4:	1009883a 	mov	r4,r2
   1c8d8:	dfc00215 	stw	ra,8(sp)
   1c8dc:	80000015 	stw	zero,0(r16)
   1c8e0:	00206d80 	call	206d8 <read>
   1c8e4:	00ffffc4 	movi	r3,-1
   1c8e8:	10c00526 	beq	r2,r3,1c900 <_read_r+0x50>
   1c8ec:	dfc00217 	ldw	ra,8(sp)
   1c8f0:	dc400117 	ldw	r17,4(sp)
   1c8f4:	dc000017 	ldw	r16,0(sp)
   1c8f8:	dec00304 	addi	sp,sp,12
   1c8fc:	f800283a 	ret
   1c900:	80c00017 	ldw	r3,0(r16)
   1c904:	183ff926 	beq	r3,zero,1c8ec <__alt_data_end+0xfc01c8ec>
   1c908:	88c00015 	stw	r3,0(r17)
   1c90c:	003ff706 	br	1c8ec <__alt_data_end+0xfc01c8ec>

0001c910 <_wcrtomb_r>:
   1c910:	defff604 	addi	sp,sp,-40
   1c914:	008000f4 	movhi	r2,3
   1c918:	dc800815 	stw	r18,32(sp)
   1c91c:	dc400715 	stw	r17,28(sp)
   1c920:	dc000615 	stw	r16,24(sp)
   1c924:	10bb4004 	addi	r2,r2,-4864
   1c928:	dfc00915 	stw	ra,36(sp)
   1c92c:	2021883a 	mov	r16,r4
   1c930:	3823883a 	mov	r17,r7
   1c934:	14800017 	ldw	r18,0(r2)
   1c938:	28001426 	beq	r5,zero,1c98c <_wcrtomb_r+0x7c>
   1c93c:	d9400415 	stw	r5,16(sp)
   1c940:	d9800515 	stw	r6,20(sp)
   1c944:	00177b40 	call	177b4 <__locale_charset>
   1c948:	d9800517 	ldw	r6,20(sp)
   1c94c:	d9400417 	ldw	r5,16(sp)
   1c950:	100f883a 	mov	r7,r2
   1c954:	dc400015 	stw	r17,0(sp)
   1c958:	8009883a 	mov	r4,r16
   1c95c:	903ee83a 	callr	r18
   1c960:	00ffffc4 	movi	r3,-1
   1c964:	10c0031e 	bne	r2,r3,1c974 <_wcrtomb_r+0x64>
   1c968:	88000015 	stw	zero,0(r17)
   1c96c:	00c02284 	movi	r3,138
   1c970:	80c00015 	stw	r3,0(r16)
   1c974:	dfc00917 	ldw	ra,36(sp)
   1c978:	dc800817 	ldw	r18,32(sp)
   1c97c:	dc400717 	ldw	r17,28(sp)
   1c980:	dc000617 	ldw	r16,24(sp)
   1c984:	dec00a04 	addi	sp,sp,40
   1c988:	f800283a 	ret
   1c98c:	00177b40 	call	177b4 <__locale_charset>
   1c990:	100f883a 	mov	r7,r2
   1c994:	dc400015 	stw	r17,0(sp)
   1c998:	000d883a 	mov	r6,zero
   1c99c:	d9400104 	addi	r5,sp,4
   1c9a0:	8009883a 	mov	r4,r16
   1c9a4:	903ee83a 	callr	r18
   1c9a8:	003fed06 	br	1c960 <__alt_data_end+0xfc01c960>

0001c9ac <wcrtomb>:
   1c9ac:	defff604 	addi	sp,sp,-40
   1c9b0:	008000f4 	movhi	r2,3
   1c9b4:	dc800615 	stw	r18,24(sp)
   1c9b8:	dc400515 	stw	r17,20(sp)
   1c9bc:	10bb3c04 	addi	r2,r2,-4880
   1c9c0:	dfc00915 	stw	ra,36(sp)
   1c9c4:	dd000815 	stw	r20,32(sp)
   1c9c8:	dcc00715 	stw	r19,28(sp)
   1c9cc:	dc000415 	stw	r16,16(sp)
   1c9d0:	3025883a 	mov	r18,r6
   1c9d4:	14400017 	ldw	r17,0(r2)
   1c9d8:	20001926 	beq	r4,zero,1ca40 <wcrtomb+0x94>
   1c9dc:	008000f4 	movhi	r2,3
   1c9e0:	10bb4004 	addi	r2,r2,-4864
   1c9e4:	15000017 	ldw	r20,0(r2)
   1c9e8:	2021883a 	mov	r16,r4
   1c9ec:	2827883a 	mov	r19,r5
   1c9f0:	00177b40 	call	177b4 <__locale_charset>
   1c9f4:	100f883a 	mov	r7,r2
   1c9f8:	dc800015 	stw	r18,0(sp)
   1c9fc:	980d883a 	mov	r6,r19
   1ca00:	800b883a 	mov	r5,r16
   1ca04:	8809883a 	mov	r4,r17
   1ca08:	a03ee83a 	callr	r20
   1ca0c:	00ffffc4 	movi	r3,-1
   1ca10:	10c0031e 	bne	r2,r3,1ca20 <wcrtomb+0x74>
   1ca14:	90000015 	stw	zero,0(r18)
   1ca18:	00c02284 	movi	r3,138
   1ca1c:	88c00015 	stw	r3,0(r17)
   1ca20:	dfc00917 	ldw	ra,36(sp)
   1ca24:	dd000817 	ldw	r20,32(sp)
   1ca28:	dcc00717 	ldw	r19,28(sp)
   1ca2c:	dc800617 	ldw	r18,24(sp)
   1ca30:	dc400517 	ldw	r17,20(sp)
   1ca34:	dc000417 	ldw	r16,16(sp)
   1ca38:	dec00a04 	addi	sp,sp,40
   1ca3c:	f800283a 	ret
   1ca40:	008000f4 	movhi	r2,3
   1ca44:	10bb4004 	addi	r2,r2,-4864
   1ca48:	14000017 	ldw	r16,0(r2)
   1ca4c:	00177b40 	call	177b4 <__locale_charset>
   1ca50:	100f883a 	mov	r7,r2
   1ca54:	dc800015 	stw	r18,0(sp)
   1ca58:	000d883a 	mov	r6,zero
   1ca5c:	d9400104 	addi	r5,sp,4
   1ca60:	8809883a 	mov	r4,r17
   1ca64:	803ee83a 	callr	r16
   1ca68:	003fe806 	br	1ca0c <__alt_data_end+0xfc01ca0c>

0001ca6c <__ascii_wctomb>:
   1ca6c:	28000526 	beq	r5,zero,1ca84 <__ascii_wctomb+0x18>
   1ca70:	00803fc4 	movi	r2,255
   1ca74:	11800536 	bltu	r2,r6,1ca8c <__ascii_wctomb+0x20>
   1ca78:	29800005 	stb	r6,0(r5)
   1ca7c:	00800044 	movi	r2,1
   1ca80:	f800283a 	ret
   1ca84:	0005883a 	mov	r2,zero
   1ca88:	f800283a 	ret
   1ca8c:	00802284 	movi	r2,138
   1ca90:	20800015 	stw	r2,0(r4)
   1ca94:	00bfffc4 	movi	r2,-1
   1ca98:	f800283a 	ret

0001ca9c <_wctomb_r>:
   1ca9c:	008000f4 	movhi	r2,3
   1caa0:	defff904 	addi	sp,sp,-28
   1caa4:	10bb4004 	addi	r2,r2,-4864
   1caa8:	dfc00615 	stw	ra,24(sp)
   1caac:	dc400515 	stw	r17,20(sp)
   1cab0:	dc000415 	stw	r16,16(sp)
   1cab4:	3823883a 	mov	r17,r7
   1cab8:	14000017 	ldw	r16,0(r2)
   1cabc:	d9000115 	stw	r4,4(sp)
   1cac0:	d9400215 	stw	r5,8(sp)
   1cac4:	d9800315 	stw	r6,12(sp)
   1cac8:	00177b40 	call	177b4 <__locale_charset>
   1cacc:	d9800317 	ldw	r6,12(sp)
   1cad0:	d9400217 	ldw	r5,8(sp)
   1cad4:	d9000117 	ldw	r4,4(sp)
   1cad8:	100f883a 	mov	r7,r2
   1cadc:	dc400015 	stw	r17,0(sp)
   1cae0:	803ee83a 	callr	r16
   1cae4:	dfc00617 	ldw	ra,24(sp)
   1cae8:	dc400517 	ldw	r17,20(sp)
   1caec:	dc000417 	ldw	r16,16(sp)
   1caf0:	dec00704 	addi	sp,sp,28
   1caf4:	f800283a 	ret

0001caf8 <__udivdi3>:
   1caf8:	defff404 	addi	sp,sp,-48
   1cafc:	dcc00515 	stw	r19,20(sp)
   1cb00:	dc000215 	stw	r16,8(sp)
   1cb04:	dfc00b15 	stw	ra,44(sp)
   1cb08:	df000a15 	stw	fp,40(sp)
   1cb0c:	ddc00915 	stw	r23,36(sp)
   1cb10:	dd800815 	stw	r22,32(sp)
   1cb14:	dd400715 	stw	r21,28(sp)
   1cb18:	dd000615 	stw	r20,24(sp)
   1cb1c:	dc800415 	stw	r18,16(sp)
   1cb20:	dc400315 	stw	r17,12(sp)
   1cb24:	2027883a 	mov	r19,r4
   1cb28:	2821883a 	mov	r16,r5
   1cb2c:	3800461e 	bne	r7,zero,1cc48 <__udivdi3+0x150>
   1cb30:	3023883a 	mov	r17,r6
   1cb34:	2025883a 	mov	r18,r4
   1cb38:	2980572e 	bgeu	r5,r6,1cc98 <__udivdi3+0x1a0>
   1cb3c:	00bfffd4 	movui	r2,65535
   1cb40:	282d883a 	mov	r22,r5
   1cb44:	1180b236 	bltu	r2,r6,1ce10 <__udivdi3+0x318>
   1cb48:	00803fc4 	movi	r2,255
   1cb4c:	1185803a 	cmpltu	r2,r2,r6
   1cb50:	100490fa 	slli	r2,r2,3
   1cb54:	3086d83a 	srl	r3,r6,r2
   1cb58:	010000f4 	movhi	r4,3
   1cb5c:	212df504 	addi	r4,r4,-18476
   1cb60:	20c7883a 	add	r3,r4,r3
   1cb64:	18c00003 	ldbu	r3,0(r3)
   1cb68:	1885883a 	add	r2,r3,r2
   1cb6c:	00c00804 	movi	r3,32
   1cb70:	1887c83a 	sub	r3,r3,r2
   1cb74:	18000526 	beq	r3,zero,1cb8c <__udivdi3+0x94>
   1cb78:	80e0983a 	sll	r16,r16,r3
   1cb7c:	9884d83a 	srl	r2,r19,r2
   1cb80:	30e2983a 	sll	r17,r6,r3
   1cb84:	98e4983a 	sll	r18,r19,r3
   1cb88:	142cb03a 	or	r22,r2,r16
   1cb8c:	882ad43a 	srli	r21,r17,16
   1cb90:	b009883a 	mov	r4,r22
   1cb94:	8d3fffcc 	andi	r20,r17,65535
   1cb98:	a80b883a 	mov	r5,r21
   1cb9c:	000d8880 	call	d888 <__umodsi3>
   1cba0:	b009883a 	mov	r4,r22
   1cba4:	a80b883a 	mov	r5,r21
   1cba8:	1027883a 	mov	r19,r2
   1cbac:	000d8240 	call	d824 <__udivsi3>
   1cbb0:	100b883a 	mov	r5,r2
   1cbb4:	a009883a 	mov	r4,r20
   1cbb8:	102d883a 	mov	r22,r2
   1cbbc:	000d8e00 	call	d8e0 <__mulsi3>
   1cbc0:	9826943a 	slli	r19,r19,16
   1cbc4:	9006d43a 	srli	r3,r18,16
   1cbc8:	1cc6b03a 	or	r3,r3,r19
   1cbcc:	1880052e 	bgeu	r3,r2,1cbe4 <__udivdi3+0xec>
   1cbd0:	1c47883a 	add	r3,r3,r17
   1cbd4:	b13fffc4 	addi	r4,r22,-1
   1cbd8:	1c400136 	bltu	r3,r17,1cbe0 <__udivdi3+0xe8>
   1cbdc:	18814236 	bltu	r3,r2,1d0e8 <__udivdi3+0x5f0>
   1cbe0:	202d883a 	mov	r22,r4
   1cbe4:	18a1c83a 	sub	r16,r3,r2
   1cbe8:	8009883a 	mov	r4,r16
   1cbec:	a80b883a 	mov	r5,r21
   1cbf0:	000d8880 	call	d888 <__umodsi3>
   1cbf4:	1027883a 	mov	r19,r2
   1cbf8:	8009883a 	mov	r4,r16
   1cbfc:	a80b883a 	mov	r5,r21
   1cc00:	9826943a 	slli	r19,r19,16
   1cc04:	000d8240 	call	d824 <__udivsi3>
   1cc08:	100b883a 	mov	r5,r2
   1cc0c:	a009883a 	mov	r4,r20
   1cc10:	94bfffcc 	andi	r18,r18,65535
   1cc14:	1021883a 	mov	r16,r2
   1cc18:	94e4b03a 	or	r18,r18,r19
   1cc1c:	000d8e00 	call	d8e0 <__mulsi3>
   1cc20:	9080052e 	bgeu	r18,r2,1cc38 <__udivdi3+0x140>
   1cc24:	8ca5883a 	add	r18,r17,r18
   1cc28:	80ffffc4 	addi	r3,r16,-1
   1cc2c:	94410c36 	bltu	r18,r17,1d060 <__udivdi3+0x568>
   1cc30:	90810b2e 	bgeu	r18,r2,1d060 <__udivdi3+0x568>
   1cc34:	843fff84 	addi	r16,r16,-2
   1cc38:	b004943a 	slli	r2,r22,16
   1cc3c:	0007883a 	mov	r3,zero
   1cc40:	1404b03a 	or	r2,r2,r16
   1cc44:	00005e06 	br	1cdc0 <__udivdi3+0x2c8>
   1cc48:	29c05b36 	bltu	r5,r7,1cdb8 <__udivdi3+0x2c0>
   1cc4c:	00bfffd4 	movui	r2,65535
   1cc50:	11c0672e 	bgeu	r2,r7,1cdf0 <__udivdi3+0x2f8>
   1cc54:	00804034 	movhi	r2,256
   1cc58:	10bfffc4 	addi	r2,r2,-1
   1cc5c:	11c10a36 	bltu	r2,r7,1d088 <__udivdi3+0x590>
   1cc60:	00800404 	movi	r2,16
   1cc64:	3886d83a 	srl	r3,r7,r2
   1cc68:	010000f4 	movhi	r4,3
   1cc6c:	212df504 	addi	r4,r4,-18476
   1cc70:	20c7883a 	add	r3,r4,r3
   1cc74:	18c00003 	ldbu	r3,0(r3)
   1cc78:	05c00804 	movi	r23,32
   1cc7c:	1885883a 	add	r2,r3,r2
   1cc80:	b8afc83a 	sub	r23,r23,r2
   1cc84:	b800671e 	bne	r23,zero,1ce24 <__udivdi3+0x32c>
   1cc88:	3c010536 	bltu	r7,r16,1d0a0 <__udivdi3+0x5a8>
   1cc8c:	9985403a 	cmpgeu	r2,r19,r6
   1cc90:	0007883a 	mov	r3,zero
   1cc94:	00004a06 	br	1cdc0 <__udivdi3+0x2c8>
   1cc98:	3000041e 	bne	r6,zero,1ccac <__udivdi3+0x1b4>
   1cc9c:	000b883a 	mov	r5,zero
   1cca0:	01000044 	movi	r4,1
   1cca4:	000d8240 	call	d824 <__udivsi3>
   1cca8:	1023883a 	mov	r17,r2
   1ccac:	00bfffd4 	movui	r2,65535
   1ccb0:	1440532e 	bgeu	r2,r17,1ce00 <__udivdi3+0x308>
   1ccb4:	00804034 	movhi	r2,256
   1ccb8:	10bfffc4 	addi	r2,r2,-1
   1ccbc:	1440f436 	bltu	r2,r17,1d090 <__udivdi3+0x598>
   1ccc0:	00800404 	movi	r2,16
   1ccc4:	8886d83a 	srl	r3,r17,r2
   1ccc8:	010000f4 	movhi	r4,3
   1cccc:	212df504 	addi	r4,r4,-18476
   1ccd0:	20c7883a 	add	r3,r4,r3
   1ccd4:	18c00003 	ldbu	r3,0(r3)
   1ccd8:	1885883a 	add	r2,r3,r2
   1ccdc:	00c00804 	movi	r3,32
   1cce0:	1887c83a 	sub	r3,r3,r2
   1cce4:	1800a51e 	bne	r3,zero,1cf7c <__udivdi3+0x484>
   1cce8:	882ad43a 	srli	r21,r17,16
   1ccec:	8461c83a 	sub	r16,r16,r17
   1ccf0:	8d3fffcc 	andi	r20,r17,65535
   1ccf4:	00c00044 	movi	r3,1
   1ccf8:	a80b883a 	mov	r5,r21
   1ccfc:	8009883a 	mov	r4,r16
   1cd00:	d8c00115 	stw	r3,4(sp)
   1cd04:	000d8880 	call	d888 <__umodsi3>
   1cd08:	a80b883a 	mov	r5,r21
   1cd0c:	8009883a 	mov	r4,r16
   1cd10:	1027883a 	mov	r19,r2
   1cd14:	000d8240 	call	d824 <__udivsi3>
   1cd18:	a00b883a 	mov	r5,r20
   1cd1c:	1009883a 	mov	r4,r2
   1cd20:	102d883a 	mov	r22,r2
   1cd24:	000d8e00 	call	d8e0 <__mulsi3>
   1cd28:	9826943a 	slli	r19,r19,16
   1cd2c:	900ed43a 	srli	r7,r18,16
   1cd30:	d8c00117 	ldw	r3,4(sp)
   1cd34:	3cceb03a 	or	r7,r7,r19
   1cd38:	3880052e 	bgeu	r7,r2,1cd50 <__udivdi3+0x258>
   1cd3c:	3c4f883a 	add	r7,r7,r17
   1cd40:	b13fffc4 	addi	r4,r22,-1
   1cd44:	3c400136 	bltu	r7,r17,1cd4c <__udivdi3+0x254>
   1cd48:	3880e436 	bltu	r7,r2,1d0dc <__udivdi3+0x5e4>
   1cd4c:	202d883a 	mov	r22,r4
   1cd50:	38a1c83a 	sub	r16,r7,r2
   1cd54:	8009883a 	mov	r4,r16
   1cd58:	a80b883a 	mov	r5,r21
   1cd5c:	d8c00115 	stw	r3,4(sp)
   1cd60:	000d8880 	call	d888 <__umodsi3>
   1cd64:	1027883a 	mov	r19,r2
   1cd68:	8009883a 	mov	r4,r16
   1cd6c:	a80b883a 	mov	r5,r21
   1cd70:	9826943a 	slli	r19,r19,16
   1cd74:	000d8240 	call	d824 <__udivsi3>
   1cd78:	a00b883a 	mov	r5,r20
   1cd7c:	1009883a 	mov	r4,r2
   1cd80:	94bfffcc 	andi	r18,r18,65535
   1cd84:	1021883a 	mov	r16,r2
   1cd88:	94e4b03a 	or	r18,r18,r19
   1cd8c:	000d8e00 	call	d8e0 <__mulsi3>
   1cd90:	d8c00117 	ldw	r3,4(sp)
   1cd94:	9080052e 	bgeu	r18,r2,1cdac <__udivdi3+0x2b4>
   1cd98:	8ca5883a 	add	r18,r17,r18
   1cd9c:	813fffc4 	addi	r4,r16,-1
   1cda0:	9440ad36 	bltu	r18,r17,1d058 <__udivdi3+0x560>
   1cda4:	9080ac2e 	bgeu	r18,r2,1d058 <__udivdi3+0x560>
   1cda8:	843fff84 	addi	r16,r16,-2
   1cdac:	b004943a 	slli	r2,r22,16
   1cdb0:	1404b03a 	or	r2,r2,r16
   1cdb4:	00000206 	br	1cdc0 <__udivdi3+0x2c8>
   1cdb8:	0007883a 	mov	r3,zero
   1cdbc:	0005883a 	mov	r2,zero
   1cdc0:	dfc00b17 	ldw	ra,44(sp)
   1cdc4:	df000a17 	ldw	fp,40(sp)
   1cdc8:	ddc00917 	ldw	r23,36(sp)
   1cdcc:	dd800817 	ldw	r22,32(sp)
   1cdd0:	dd400717 	ldw	r21,28(sp)
   1cdd4:	dd000617 	ldw	r20,24(sp)
   1cdd8:	dcc00517 	ldw	r19,20(sp)
   1cddc:	dc800417 	ldw	r18,16(sp)
   1cde0:	dc400317 	ldw	r17,12(sp)
   1cde4:	dc000217 	ldw	r16,8(sp)
   1cde8:	dec00c04 	addi	sp,sp,48
   1cdec:	f800283a 	ret
   1cdf0:	00803fc4 	movi	r2,255
   1cdf4:	11c5803a 	cmpltu	r2,r2,r7
   1cdf8:	100490fa 	slli	r2,r2,3
   1cdfc:	003f9906 	br	1cc64 <__alt_data_end+0xfc01cc64>
   1ce00:	00803fc4 	movi	r2,255
   1ce04:	1445803a 	cmpltu	r2,r2,r17
   1ce08:	100490fa 	slli	r2,r2,3
   1ce0c:	003fad06 	br	1ccc4 <__alt_data_end+0xfc01ccc4>
   1ce10:	00804034 	movhi	r2,256
   1ce14:	10bfffc4 	addi	r2,r2,-1
   1ce18:	11809f36 	bltu	r2,r6,1d098 <__udivdi3+0x5a0>
   1ce1c:	00800404 	movi	r2,16
   1ce20:	003f4c06 	br	1cb54 <__alt_data_end+0xfc01cb54>
   1ce24:	3dce983a 	sll	r7,r7,r23
   1ce28:	30b8d83a 	srl	fp,r6,r2
   1ce2c:	80a2d83a 	srl	r17,r16,r2
   1ce30:	35cc983a 	sll	r6,r6,r23
   1ce34:	3f38b03a 	or	fp,r7,fp
   1ce38:	e024d43a 	srli	r18,fp,16
   1ce3c:	9884d83a 	srl	r2,r19,r2
   1ce40:	85e0983a 	sll	r16,r16,r23
   1ce44:	8809883a 	mov	r4,r17
   1ce48:	900b883a 	mov	r5,r18
   1ce4c:	d9800015 	stw	r6,0(sp)
   1ce50:	1420b03a 	or	r16,r2,r16
   1ce54:	000d8880 	call	d888 <__umodsi3>
   1ce58:	900b883a 	mov	r5,r18
   1ce5c:	8809883a 	mov	r4,r17
   1ce60:	1029883a 	mov	r20,r2
   1ce64:	e5bfffcc 	andi	r22,fp,65535
   1ce68:	000d8240 	call	d824 <__udivsi3>
   1ce6c:	100b883a 	mov	r5,r2
   1ce70:	b009883a 	mov	r4,r22
   1ce74:	102b883a 	mov	r21,r2
   1ce78:	000d8e00 	call	d8e0 <__mulsi3>
   1ce7c:	a028943a 	slli	r20,r20,16
   1ce80:	8006d43a 	srli	r3,r16,16
   1ce84:	1d06b03a 	or	r3,r3,r20
   1ce88:	1880042e 	bgeu	r3,r2,1ce9c <__udivdi3+0x3a4>
   1ce8c:	1f07883a 	add	r3,r3,fp
   1ce90:	a93fffc4 	addi	r4,r21,-1
   1ce94:	1f00892e 	bgeu	r3,fp,1d0bc <__udivdi3+0x5c4>
   1ce98:	202b883a 	mov	r21,r4
   1ce9c:	18a3c83a 	sub	r17,r3,r2
   1cea0:	8809883a 	mov	r4,r17
   1cea4:	900b883a 	mov	r5,r18
   1cea8:	000d8880 	call	d888 <__umodsi3>
   1ceac:	1029883a 	mov	r20,r2
   1ceb0:	8809883a 	mov	r4,r17
   1ceb4:	900b883a 	mov	r5,r18
   1ceb8:	a028943a 	slli	r20,r20,16
   1cebc:	000d8240 	call	d824 <__udivsi3>
   1cec0:	100b883a 	mov	r5,r2
   1cec4:	b009883a 	mov	r4,r22
   1cec8:	843fffcc 	andi	r16,r16,65535
   1cecc:	1023883a 	mov	r17,r2
   1ced0:	8520b03a 	or	r16,r16,r20
   1ced4:	000d8e00 	call	d8e0 <__mulsi3>
   1ced8:	8080042e 	bgeu	r16,r2,1ceec <__udivdi3+0x3f4>
   1cedc:	8721883a 	add	r16,r16,fp
   1cee0:	88ffffc4 	addi	r3,r17,-1
   1cee4:	8700712e 	bgeu	r16,fp,1d0ac <__udivdi3+0x5b4>
   1cee8:	1823883a 	mov	r17,r3
   1ceec:	a80e943a 	slli	r7,r21,16
   1cef0:	d8c00017 	ldw	r3,0(sp)
   1cef4:	80a1c83a 	sub	r16,r16,r2
   1cef8:	3c64b03a 	or	r18,r7,r17
   1cefc:	1d3fffcc 	andi	r20,r3,65535
   1cf00:	9022d43a 	srli	r17,r18,16
   1cf04:	95bfffcc 	andi	r22,r18,65535
   1cf08:	a00b883a 	mov	r5,r20
   1cf0c:	b009883a 	mov	r4,r22
   1cf10:	182ad43a 	srli	r21,r3,16
   1cf14:	000d8e00 	call	d8e0 <__mulsi3>
   1cf18:	a00b883a 	mov	r5,r20
   1cf1c:	8809883a 	mov	r4,r17
   1cf20:	1039883a 	mov	fp,r2
   1cf24:	000d8e00 	call	d8e0 <__mulsi3>
   1cf28:	8809883a 	mov	r4,r17
   1cf2c:	a80b883a 	mov	r5,r21
   1cf30:	1029883a 	mov	r20,r2
   1cf34:	000d8e00 	call	d8e0 <__mulsi3>
   1cf38:	a80b883a 	mov	r5,r21
   1cf3c:	b009883a 	mov	r4,r22
   1cf40:	1023883a 	mov	r17,r2
   1cf44:	000d8e00 	call	d8e0 <__mulsi3>
   1cf48:	e006d43a 	srli	r3,fp,16
   1cf4c:	1505883a 	add	r2,r2,r20
   1cf50:	1887883a 	add	r3,r3,r2
   1cf54:	1d00022e 	bgeu	r3,r20,1cf60 <__udivdi3+0x468>
   1cf58:	00800074 	movhi	r2,1
   1cf5c:	88a3883a 	add	r17,r17,r2
   1cf60:	1804d43a 	srli	r2,r3,16
   1cf64:	1463883a 	add	r17,r2,r17
   1cf68:	84404436 	bltu	r16,r17,1d07c <__udivdi3+0x584>
   1cf6c:	84403e26 	beq	r16,r17,1d068 <__udivdi3+0x570>
   1cf70:	9005883a 	mov	r2,r18
   1cf74:	0007883a 	mov	r3,zero
   1cf78:	003f9106 	br	1cdc0 <__alt_data_end+0xfc01cdc0>
   1cf7c:	88e2983a 	sll	r17,r17,r3
   1cf80:	80aed83a 	srl	r23,r16,r2
   1cf84:	80e0983a 	sll	r16,r16,r3
   1cf88:	882ad43a 	srli	r21,r17,16
   1cf8c:	9884d83a 	srl	r2,r19,r2
   1cf90:	b809883a 	mov	r4,r23
   1cf94:	a80b883a 	mov	r5,r21
   1cf98:	98e4983a 	sll	r18,r19,r3
   1cf9c:	142cb03a 	or	r22,r2,r16
   1cfa0:	000d8880 	call	d888 <__umodsi3>
   1cfa4:	b809883a 	mov	r4,r23
   1cfa8:	a80b883a 	mov	r5,r21
   1cfac:	1027883a 	mov	r19,r2
   1cfb0:	8d3fffcc 	andi	r20,r17,65535
   1cfb4:	000d8240 	call	d824 <__udivsi3>
   1cfb8:	a009883a 	mov	r4,r20
   1cfbc:	100b883a 	mov	r5,r2
   1cfc0:	102f883a 	mov	r23,r2
   1cfc4:	000d8e00 	call	d8e0 <__mulsi3>
   1cfc8:	9826943a 	slli	r19,r19,16
   1cfcc:	b008d43a 	srli	r4,r22,16
   1cfd0:	24c8b03a 	or	r4,r4,r19
   1cfd4:	2080062e 	bgeu	r4,r2,1cff0 <__udivdi3+0x4f8>
   1cfd8:	2449883a 	add	r4,r4,r17
   1cfdc:	b8ffffc4 	addi	r3,r23,-1
   1cfe0:	24403c36 	bltu	r4,r17,1d0d4 <__udivdi3+0x5dc>
   1cfe4:	20803b2e 	bgeu	r4,r2,1d0d4 <__udivdi3+0x5dc>
   1cfe8:	bdffff84 	addi	r23,r23,-2
   1cfec:	2449883a 	add	r4,r4,r17
   1cff0:	20a1c83a 	sub	r16,r4,r2
   1cff4:	a80b883a 	mov	r5,r21
   1cff8:	8009883a 	mov	r4,r16
   1cffc:	000d8880 	call	d888 <__umodsi3>
   1d000:	a80b883a 	mov	r5,r21
   1d004:	8009883a 	mov	r4,r16
   1d008:	1027883a 	mov	r19,r2
   1d00c:	000d8240 	call	d824 <__udivsi3>
   1d010:	a009883a 	mov	r4,r20
   1d014:	100b883a 	mov	r5,r2
   1d018:	9826943a 	slli	r19,r19,16
   1d01c:	1039883a 	mov	fp,r2
   1d020:	000d8e00 	call	d8e0 <__mulsi3>
   1d024:	b13fffcc 	andi	r4,r22,65535
   1d028:	24c8b03a 	or	r4,r4,r19
   1d02c:	2080062e 	bgeu	r4,r2,1d048 <__udivdi3+0x550>
   1d030:	2449883a 	add	r4,r4,r17
   1d034:	e0ffffc4 	addi	r3,fp,-1
   1d038:	24402436 	bltu	r4,r17,1d0cc <__udivdi3+0x5d4>
   1d03c:	2080232e 	bgeu	r4,r2,1d0cc <__udivdi3+0x5d4>
   1d040:	e73fff84 	addi	fp,fp,-2
   1d044:	2449883a 	add	r4,r4,r17
   1d048:	b82e943a 	slli	r23,r23,16
   1d04c:	20a1c83a 	sub	r16,r4,r2
   1d050:	bf06b03a 	or	r3,r23,fp
   1d054:	003f2806 	br	1ccf8 <__alt_data_end+0xfc01ccf8>
   1d058:	2021883a 	mov	r16,r4
   1d05c:	003f5306 	br	1cdac <__alt_data_end+0xfc01cdac>
   1d060:	1821883a 	mov	r16,r3
   1d064:	003ef406 	br	1cc38 <__alt_data_end+0xfc01cc38>
   1d068:	1806943a 	slli	r3,r3,16
   1d06c:	9de6983a 	sll	r19,r19,r23
   1d070:	e73fffcc 	andi	fp,fp,65535
   1d074:	1f07883a 	add	r3,r3,fp
   1d078:	98ffbd2e 	bgeu	r19,r3,1cf70 <__alt_data_end+0xfc01cf70>
   1d07c:	90bfffc4 	addi	r2,r18,-1
   1d080:	0007883a 	mov	r3,zero
   1d084:	003f4e06 	br	1cdc0 <__alt_data_end+0xfc01cdc0>
   1d088:	00800604 	movi	r2,24
   1d08c:	003ef506 	br	1cc64 <__alt_data_end+0xfc01cc64>
   1d090:	00800604 	movi	r2,24
   1d094:	003f0b06 	br	1ccc4 <__alt_data_end+0xfc01ccc4>
   1d098:	00800604 	movi	r2,24
   1d09c:	003ead06 	br	1cb54 <__alt_data_end+0xfc01cb54>
   1d0a0:	0007883a 	mov	r3,zero
   1d0a4:	00800044 	movi	r2,1
   1d0a8:	003f4506 	br	1cdc0 <__alt_data_end+0xfc01cdc0>
   1d0ac:	80bf8e2e 	bgeu	r16,r2,1cee8 <__alt_data_end+0xfc01cee8>
   1d0b0:	8c7fff84 	addi	r17,r17,-2
   1d0b4:	8721883a 	add	r16,r16,fp
   1d0b8:	003f8c06 	br	1ceec <__alt_data_end+0xfc01ceec>
   1d0bc:	18bf762e 	bgeu	r3,r2,1ce98 <__alt_data_end+0xfc01ce98>
   1d0c0:	ad7fff84 	addi	r21,r21,-2
   1d0c4:	1f07883a 	add	r3,r3,fp
   1d0c8:	003f7406 	br	1ce9c <__alt_data_end+0xfc01ce9c>
   1d0cc:	1839883a 	mov	fp,r3
   1d0d0:	003fdd06 	br	1d048 <__alt_data_end+0xfc01d048>
   1d0d4:	182f883a 	mov	r23,r3
   1d0d8:	003fc506 	br	1cff0 <__alt_data_end+0xfc01cff0>
   1d0dc:	b5bfff84 	addi	r22,r22,-2
   1d0e0:	3c4f883a 	add	r7,r7,r17
   1d0e4:	003f1a06 	br	1cd50 <__alt_data_end+0xfc01cd50>
   1d0e8:	b5bfff84 	addi	r22,r22,-2
   1d0ec:	1c47883a 	add	r3,r3,r17
   1d0f0:	003ebc06 	br	1cbe4 <__alt_data_end+0xfc01cbe4>

0001d0f4 <__umoddi3>:
   1d0f4:	defff304 	addi	sp,sp,-52
   1d0f8:	df000b15 	stw	fp,44(sp)
   1d0fc:	dc400415 	stw	r17,16(sp)
   1d100:	dc000315 	stw	r16,12(sp)
   1d104:	dfc00c15 	stw	ra,48(sp)
   1d108:	ddc00a15 	stw	r23,40(sp)
   1d10c:	dd800915 	stw	r22,36(sp)
   1d110:	dd400815 	stw	r21,32(sp)
   1d114:	dd000715 	stw	r20,28(sp)
   1d118:	dcc00615 	stw	r19,24(sp)
   1d11c:	dc800515 	stw	r18,20(sp)
   1d120:	2021883a 	mov	r16,r4
   1d124:	2823883a 	mov	r17,r5
   1d128:	2839883a 	mov	fp,r5
   1d12c:	3800401e 	bne	r7,zero,1d230 <__umoddi3+0x13c>
   1d130:	3027883a 	mov	r19,r6
   1d134:	2029883a 	mov	r20,r4
   1d138:	2980552e 	bgeu	r5,r6,1d290 <__umoddi3+0x19c>
   1d13c:	00bfffd4 	movui	r2,65535
   1d140:	1180a236 	bltu	r2,r6,1d3cc <__umoddi3+0x2d8>
   1d144:	01003fc4 	movi	r4,255
   1d148:	2189803a 	cmpltu	r4,r4,r6
   1d14c:	200890fa 	slli	r4,r4,3
   1d150:	3104d83a 	srl	r2,r6,r4
   1d154:	00c000f4 	movhi	r3,3
   1d158:	18edf504 	addi	r3,r3,-18476
   1d15c:	1885883a 	add	r2,r3,r2
   1d160:	10c00003 	ldbu	r3,0(r2)
   1d164:	00800804 	movi	r2,32
   1d168:	1909883a 	add	r4,r3,r4
   1d16c:	1125c83a 	sub	r18,r2,r4
   1d170:	90000526 	beq	r18,zero,1d188 <__umoddi3+0x94>
   1d174:	8ca2983a 	sll	r17,r17,r18
   1d178:	8108d83a 	srl	r4,r16,r4
   1d17c:	34a6983a 	sll	r19,r6,r18
   1d180:	84a8983a 	sll	r20,r16,r18
   1d184:	2478b03a 	or	fp,r4,r17
   1d188:	982cd43a 	srli	r22,r19,16
   1d18c:	e009883a 	mov	r4,fp
   1d190:	9dffffcc 	andi	r23,r19,65535
   1d194:	b00b883a 	mov	r5,r22
   1d198:	000d8880 	call	d888 <__umodsi3>
   1d19c:	b00b883a 	mov	r5,r22
   1d1a0:	e009883a 	mov	r4,fp
   1d1a4:	102b883a 	mov	r21,r2
   1d1a8:	000d8240 	call	d824 <__udivsi3>
   1d1ac:	100b883a 	mov	r5,r2
   1d1b0:	b809883a 	mov	r4,r23
   1d1b4:	000d8e00 	call	d8e0 <__mulsi3>
   1d1b8:	a82a943a 	slli	r21,r21,16
   1d1bc:	a006d43a 	srli	r3,r20,16
   1d1c0:	1d46b03a 	or	r3,r3,r21
   1d1c4:	1880032e 	bgeu	r3,r2,1d1d4 <__umoddi3+0xe0>
   1d1c8:	1cc7883a 	add	r3,r3,r19
   1d1cc:	1cc00136 	bltu	r3,r19,1d1d4 <__umoddi3+0xe0>
   1d1d0:	18813136 	bltu	r3,r2,1d698 <__umoddi3+0x5a4>
   1d1d4:	18a1c83a 	sub	r16,r3,r2
   1d1d8:	b00b883a 	mov	r5,r22
   1d1dc:	8009883a 	mov	r4,r16
   1d1e0:	000d8880 	call	d888 <__umodsi3>
   1d1e4:	b00b883a 	mov	r5,r22
   1d1e8:	8009883a 	mov	r4,r16
   1d1ec:	1023883a 	mov	r17,r2
   1d1f0:	000d8240 	call	d824 <__udivsi3>
   1d1f4:	100b883a 	mov	r5,r2
   1d1f8:	b809883a 	mov	r4,r23
   1d1fc:	8822943a 	slli	r17,r17,16
   1d200:	000d8e00 	call	d8e0 <__mulsi3>
   1d204:	a0ffffcc 	andi	r3,r20,65535
   1d208:	1c46b03a 	or	r3,r3,r17
   1d20c:	1880042e 	bgeu	r3,r2,1d220 <__umoddi3+0x12c>
   1d210:	1cc7883a 	add	r3,r3,r19
   1d214:	1cc00236 	bltu	r3,r19,1d220 <__umoddi3+0x12c>
   1d218:	1880012e 	bgeu	r3,r2,1d220 <__umoddi3+0x12c>
   1d21c:	1cc7883a 	add	r3,r3,r19
   1d220:	1885c83a 	sub	r2,r3,r2
   1d224:	1484d83a 	srl	r2,r2,r18
   1d228:	0007883a 	mov	r3,zero
   1d22c:	00005306 	br	1d37c <__umoddi3+0x288>
   1d230:	29c05036 	bltu	r5,r7,1d374 <__umoddi3+0x280>
   1d234:	00bfffd4 	movui	r2,65535
   1d238:	11c05c2e 	bgeu	r2,r7,1d3ac <__umoddi3+0x2b8>
   1d23c:	00804034 	movhi	r2,256
   1d240:	10bfffc4 	addi	r2,r2,-1
   1d244:	11c10636 	bltu	r2,r7,1d660 <__umoddi3+0x56c>
   1d248:	01000404 	movi	r4,16
   1d24c:	3904d83a 	srl	r2,r7,r4
   1d250:	00c000f4 	movhi	r3,3
   1d254:	18edf504 	addi	r3,r3,-18476
   1d258:	1885883a 	add	r2,r3,r2
   1d25c:	14c00003 	ldbu	r19,0(r2)
   1d260:	00c00804 	movi	r3,32
   1d264:	9927883a 	add	r19,r19,r4
   1d268:	1ce9c83a 	sub	r20,r3,r19
   1d26c:	a0005c1e 	bne	r20,zero,1d3e0 <__umoddi3+0x2ec>
   1d270:	3c400136 	bltu	r7,r17,1d278 <__umoddi3+0x184>
   1d274:	81810a36 	bltu	r16,r6,1d6a0 <__umoddi3+0x5ac>
   1d278:	8185c83a 	sub	r2,r16,r6
   1d27c:	89e3c83a 	sub	r17,r17,r7
   1d280:	8089803a 	cmpltu	r4,r16,r2
   1d284:	8939c83a 	sub	fp,r17,r4
   1d288:	e007883a 	mov	r3,fp
   1d28c:	00003b06 	br	1d37c <__umoddi3+0x288>
   1d290:	3000041e 	bne	r6,zero,1d2a4 <__umoddi3+0x1b0>
   1d294:	000b883a 	mov	r5,zero
   1d298:	01000044 	movi	r4,1
   1d29c:	000d8240 	call	d824 <__udivsi3>
   1d2a0:	1027883a 	mov	r19,r2
   1d2a4:	00bfffd4 	movui	r2,65535
   1d2a8:	14c0442e 	bgeu	r2,r19,1d3bc <__umoddi3+0x2c8>
   1d2ac:	00804034 	movhi	r2,256
   1d2b0:	10bfffc4 	addi	r2,r2,-1
   1d2b4:	14c0ec36 	bltu	r2,r19,1d668 <__umoddi3+0x574>
   1d2b8:	00800404 	movi	r2,16
   1d2bc:	9886d83a 	srl	r3,r19,r2
   1d2c0:	010000f4 	movhi	r4,3
   1d2c4:	212df504 	addi	r4,r4,-18476
   1d2c8:	20c7883a 	add	r3,r4,r3
   1d2cc:	18c00003 	ldbu	r3,0(r3)
   1d2d0:	1887883a 	add	r3,r3,r2
   1d2d4:	00800804 	movi	r2,32
   1d2d8:	10e5c83a 	sub	r18,r2,r3
   1d2dc:	9000ab1e 	bne	r18,zero,1d58c <__umoddi3+0x498>
   1d2e0:	982cd43a 	srli	r22,r19,16
   1d2e4:	8ce3c83a 	sub	r17,r17,r19
   1d2e8:	9dffffcc 	andi	r23,r19,65535
   1d2ec:	b00b883a 	mov	r5,r22
   1d2f0:	8809883a 	mov	r4,r17
   1d2f4:	000d8880 	call	d888 <__umodsi3>
   1d2f8:	b00b883a 	mov	r5,r22
   1d2fc:	8809883a 	mov	r4,r17
   1d300:	102b883a 	mov	r21,r2
   1d304:	000d8240 	call	d824 <__udivsi3>
   1d308:	b80b883a 	mov	r5,r23
   1d30c:	1009883a 	mov	r4,r2
   1d310:	000d8e00 	call	d8e0 <__mulsi3>
   1d314:	a82a943a 	slli	r21,r21,16
   1d318:	a006d43a 	srli	r3,r20,16
   1d31c:	1d46b03a 	or	r3,r3,r21
   1d320:	1880042e 	bgeu	r3,r2,1d334 <__umoddi3+0x240>
   1d324:	1cc7883a 	add	r3,r3,r19
   1d328:	1cc00236 	bltu	r3,r19,1d334 <__umoddi3+0x240>
   1d32c:	1880012e 	bgeu	r3,r2,1d334 <__umoddi3+0x240>
   1d330:	1cc7883a 	add	r3,r3,r19
   1d334:	18a1c83a 	sub	r16,r3,r2
   1d338:	b00b883a 	mov	r5,r22
   1d33c:	8009883a 	mov	r4,r16
   1d340:	000d8880 	call	d888 <__umodsi3>
   1d344:	1023883a 	mov	r17,r2
   1d348:	b00b883a 	mov	r5,r22
   1d34c:	8009883a 	mov	r4,r16
   1d350:	000d8240 	call	d824 <__udivsi3>
   1d354:	8822943a 	slli	r17,r17,16
   1d358:	b80b883a 	mov	r5,r23
   1d35c:	1009883a 	mov	r4,r2
   1d360:	000d8e00 	call	d8e0 <__mulsi3>
   1d364:	a53fffcc 	andi	r20,r20,65535
   1d368:	a446b03a 	or	r3,r20,r17
   1d36c:	18bfac2e 	bgeu	r3,r2,1d220 <__alt_data_end+0xfc01d220>
   1d370:	003fa706 	br	1d210 <__alt_data_end+0xfc01d210>
   1d374:	2005883a 	mov	r2,r4
   1d378:	2807883a 	mov	r3,r5
   1d37c:	dfc00c17 	ldw	ra,48(sp)
   1d380:	df000b17 	ldw	fp,44(sp)
   1d384:	ddc00a17 	ldw	r23,40(sp)
   1d388:	dd800917 	ldw	r22,36(sp)
   1d38c:	dd400817 	ldw	r21,32(sp)
   1d390:	dd000717 	ldw	r20,28(sp)
   1d394:	dcc00617 	ldw	r19,24(sp)
   1d398:	dc800517 	ldw	r18,20(sp)
   1d39c:	dc400417 	ldw	r17,16(sp)
   1d3a0:	dc000317 	ldw	r16,12(sp)
   1d3a4:	dec00d04 	addi	sp,sp,52
   1d3a8:	f800283a 	ret
   1d3ac:	04c03fc4 	movi	r19,255
   1d3b0:	99c9803a 	cmpltu	r4,r19,r7
   1d3b4:	200890fa 	slli	r4,r4,3
   1d3b8:	003fa406 	br	1d24c <__alt_data_end+0xfc01d24c>
   1d3bc:	00803fc4 	movi	r2,255
   1d3c0:	14c5803a 	cmpltu	r2,r2,r19
   1d3c4:	100490fa 	slli	r2,r2,3
   1d3c8:	003fbc06 	br	1d2bc <__alt_data_end+0xfc01d2bc>
   1d3cc:	00804034 	movhi	r2,256
   1d3d0:	10bfffc4 	addi	r2,r2,-1
   1d3d4:	1180a636 	bltu	r2,r6,1d670 <__umoddi3+0x57c>
   1d3d8:	01000404 	movi	r4,16
   1d3dc:	003f5c06 	br	1d150 <__alt_data_end+0xfc01d150>
   1d3e0:	3d0e983a 	sll	r7,r7,r20
   1d3e4:	34ead83a 	srl	r21,r6,r19
   1d3e8:	8cc6d83a 	srl	r3,r17,r19
   1d3ec:	8d10983a 	sll	r8,r17,r20
   1d3f0:	3d6ab03a 	or	r21,r7,r21
   1d3f4:	a82cd43a 	srli	r22,r21,16
   1d3f8:	84e2d83a 	srl	r17,r16,r19
   1d3fc:	1809883a 	mov	r4,r3
   1d400:	b00b883a 	mov	r5,r22
   1d404:	8a22b03a 	or	r17,r17,r8
   1d408:	3524983a 	sll	r18,r6,r20
   1d40c:	dc400015 	stw	r17,0(sp)
   1d410:	d8c00115 	stw	r3,4(sp)
   1d414:	000d8880 	call	d888 <__umodsi3>
   1d418:	d8c00117 	ldw	r3,4(sp)
   1d41c:	b00b883a 	mov	r5,r22
   1d420:	1039883a 	mov	fp,r2
   1d424:	1809883a 	mov	r4,r3
   1d428:	000d8240 	call	d824 <__udivsi3>
   1d42c:	adffffcc 	andi	r23,r21,65535
   1d430:	100b883a 	mov	r5,r2
   1d434:	b809883a 	mov	r4,r23
   1d438:	1023883a 	mov	r17,r2
   1d43c:	000d8e00 	call	d8e0 <__mulsi3>
   1d440:	d9400017 	ldw	r5,0(sp)
   1d444:	e008943a 	slli	r4,fp,16
   1d448:	8520983a 	sll	r16,r16,r20
   1d44c:	2806d43a 	srli	r3,r5,16
   1d450:	1906b03a 	or	r3,r3,r4
   1d454:	1880042e 	bgeu	r3,r2,1d468 <__umoddi3+0x374>
   1d458:	1d47883a 	add	r3,r3,r21
   1d45c:	893fffc4 	addi	r4,r17,-1
   1d460:	1d40892e 	bgeu	r3,r21,1d688 <__umoddi3+0x594>
   1d464:	2023883a 	mov	r17,r4
   1d468:	18b9c83a 	sub	fp,r3,r2
   1d46c:	b00b883a 	mov	r5,r22
   1d470:	e009883a 	mov	r4,fp
   1d474:	000d8880 	call	d888 <__umodsi3>
   1d478:	b00b883a 	mov	r5,r22
   1d47c:	e009883a 	mov	r4,fp
   1d480:	d8800215 	stw	r2,8(sp)
   1d484:	000d8240 	call	d824 <__udivsi3>
   1d488:	100b883a 	mov	r5,r2
   1d48c:	b809883a 	mov	r4,r23
   1d490:	102d883a 	mov	r22,r2
   1d494:	000d8e00 	call	d8e0 <__mulsi3>
   1d498:	d9800217 	ldw	r6,8(sp)
   1d49c:	d8c00017 	ldw	r3,0(sp)
   1d4a0:	300c943a 	slli	r6,r6,16
   1d4a4:	1a3fffcc 	andi	r8,r3,65535
   1d4a8:	4190b03a 	or	r8,r8,r6
   1d4ac:	4080042e 	bgeu	r8,r2,1d4c0 <__umoddi3+0x3cc>
   1d4b0:	4551883a 	add	r8,r8,r21
   1d4b4:	b0ffffc4 	addi	r3,r22,-1
   1d4b8:	45406f2e 	bgeu	r8,r21,1d678 <__umoddi3+0x584>
   1d4bc:	182d883a 	mov	r22,r3
   1d4c0:	880e943a 	slli	r7,r17,16
   1d4c4:	9006d43a 	srli	r3,r18,16
   1d4c8:	91bfffcc 	andi	r6,r18,65535
   1d4cc:	3dacb03a 	or	r22,r7,r22
   1d4d0:	b02ed43a 	srli	r23,r22,16
   1d4d4:	b5bfffcc 	andi	r22,r22,65535
   1d4d8:	300b883a 	mov	r5,r6
   1d4dc:	b009883a 	mov	r4,r22
   1d4e0:	40a3c83a 	sub	r17,r8,r2
   1d4e4:	d8c00115 	stw	r3,4(sp)
   1d4e8:	d9800215 	stw	r6,8(sp)
   1d4ec:	000d8e00 	call	d8e0 <__mulsi3>
   1d4f0:	d9800217 	ldw	r6,8(sp)
   1d4f4:	b809883a 	mov	r4,r23
   1d4f8:	1039883a 	mov	fp,r2
   1d4fc:	300b883a 	mov	r5,r6
   1d500:	000d8e00 	call	d8e0 <__mulsi3>
   1d504:	d8c00117 	ldw	r3,4(sp)
   1d508:	b809883a 	mov	r4,r23
   1d50c:	d8800215 	stw	r2,8(sp)
   1d510:	180b883a 	mov	r5,r3
   1d514:	000d8e00 	call	d8e0 <__mulsi3>
   1d518:	d8c00117 	ldw	r3,4(sp)
   1d51c:	b009883a 	mov	r4,r22
   1d520:	102f883a 	mov	r23,r2
   1d524:	180b883a 	mov	r5,r3
   1d528:	000d8e00 	call	d8e0 <__mulsi3>
   1d52c:	d9800217 	ldw	r6,8(sp)
   1d530:	e006d43a 	srli	r3,fp,16
   1d534:	1185883a 	add	r2,r2,r6
   1d538:	1885883a 	add	r2,r3,r2
   1d53c:	1180022e 	bgeu	r2,r6,1d548 <__umoddi3+0x454>
   1d540:	00c00074 	movhi	r3,1
   1d544:	b8ef883a 	add	r23,r23,r3
   1d548:	1006d43a 	srli	r3,r2,16
   1d54c:	1004943a 	slli	r2,r2,16
   1d550:	e73fffcc 	andi	fp,fp,65535
   1d554:	1dc7883a 	add	r3,r3,r23
   1d558:	1739883a 	add	fp,r2,fp
   1d55c:	88c03a36 	bltu	r17,r3,1d648 <__umoddi3+0x554>
   1d560:	88c05126 	beq	r17,r3,1d6a8 <__umoddi3+0x5b4>
   1d564:	88c9c83a 	sub	r4,r17,r3
   1d568:	e00f883a 	mov	r7,fp
   1d56c:	81cfc83a 	sub	r7,r16,r7
   1d570:	81c7803a 	cmpltu	r3,r16,r7
   1d574:	20c7c83a 	sub	r3,r4,r3
   1d578:	1cc4983a 	sll	r2,r3,r19
   1d57c:	3d0ed83a 	srl	r7,r7,r20
   1d580:	1d06d83a 	srl	r3,r3,r20
   1d584:	11c4b03a 	or	r2,r2,r7
   1d588:	003f7c06 	br	1d37c <__alt_data_end+0xfc01d37c>
   1d58c:	9ca6983a 	sll	r19,r19,r18
   1d590:	88f8d83a 	srl	fp,r17,r3
   1d594:	80c4d83a 	srl	r2,r16,r3
   1d598:	982cd43a 	srli	r22,r19,16
   1d59c:	8ca2983a 	sll	r17,r17,r18
   1d5a0:	e009883a 	mov	r4,fp
   1d5a4:	b00b883a 	mov	r5,r22
   1d5a8:	146ab03a 	or	r21,r2,r17
   1d5ac:	000d8880 	call	d888 <__umodsi3>
   1d5b0:	b00b883a 	mov	r5,r22
   1d5b4:	e009883a 	mov	r4,fp
   1d5b8:	1029883a 	mov	r20,r2
   1d5bc:	9dffffcc 	andi	r23,r19,65535
   1d5c0:	000d8240 	call	d824 <__udivsi3>
   1d5c4:	b809883a 	mov	r4,r23
   1d5c8:	100b883a 	mov	r5,r2
   1d5cc:	000d8e00 	call	d8e0 <__mulsi3>
   1d5d0:	a008943a 	slli	r4,r20,16
   1d5d4:	a806d43a 	srli	r3,r21,16
   1d5d8:	84a8983a 	sll	r20,r16,r18
   1d5dc:	1906b03a 	or	r3,r3,r4
   1d5e0:	1880042e 	bgeu	r3,r2,1d5f4 <__umoddi3+0x500>
   1d5e4:	1cc7883a 	add	r3,r3,r19
   1d5e8:	1cc00236 	bltu	r3,r19,1d5f4 <__umoddi3+0x500>
   1d5ec:	1880012e 	bgeu	r3,r2,1d5f4 <__umoddi3+0x500>
   1d5f0:	1cc7883a 	add	r3,r3,r19
   1d5f4:	18a3c83a 	sub	r17,r3,r2
   1d5f8:	b00b883a 	mov	r5,r22
   1d5fc:	8809883a 	mov	r4,r17
   1d600:	000d8880 	call	d888 <__umodsi3>
   1d604:	b00b883a 	mov	r5,r22
   1d608:	8809883a 	mov	r4,r17
   1d60c:	1021883a 	mov	r16,r2
   1d610:	000d8240 	call	d824 <__udivsi3>
   1d614:	100b883a 	mov	r5,r2
   1d618:	b809883a 	mov	r4,r23
   1d61c:	8020943a 	slli	r16,r16,16
   1d620:	000d8e00 	call	d8e0 <__mulsi3>
   1d624:	a8ffffcc 	andi	r3,r21,65535
   1d628:	1c06b03a 	or	r3,r3,r16
   1d62c:	1880042e 	bgeu	r3,r2,1d640 <__umoddi3+0x54c>
   1d630:	1cc7883a 	add	r3,r3,r19
   1d634:	1cc00236 	bltu	r3,r19,1d640 <__umoddi3+0x54c>
   1d638:	1880012e 	bgeu	r3,r2,1d640 <__umoddi3+0x54c>
   1d63c:	1cc7883a 	add	r3,r3,r19
   1d640:	18a3c83a 	sub	r17,r3,r2
   1d644:	003f2906 	br	1d2ec <__alt_data_end+0xfc01d2ec>
   1d648:	e48fc83a 	sub	r7,fp,r18
   1d64c:	1d49c83a 	sub	r4,r3,r21
   1d650:	e1f9803a 	cmpltu	fp,fp,r7
   1d654:	2739c83a 	sub	fp,r4,fp
   1d658:	8f09c83a 	sub	r4,r17,fp
   1d65c:	003fc306 	br	1d56c <__alt_data_end+0xfc01d56c>
   1d660:	01000604 	movi	r4,24
   1d664:	003ef906 	br	1d24c <__alt_data_end+0xfc01d24c>
   1d668:	00800604 	movi	r2,24
   1d66c:	003f1306 	br	1d2bc <__alt_data_end+0xfc01d2bc>
   1d670:	01000604 	movi	r4,24
   1d674:	003eb606 	br	1d150 <__alt_data_end+0xfc01d150>
   1d678:	40bf902e 	bgeu	r8,r2,1d4bc <__alt_data_end+0xfc01d4bc>
   1d67c:	b5bfff84 	addi	r22,r22,-2
   1d680:	4551883a 	add	r8,r8,r21
   1d684:	003f8e06 	br	1d4c0 <__alt_data_end+0xfc01d4c0>
   1d688:	18bf762e 	bgeu	r3,r2,1d464 <__alt_data_end+0xfc01d464>
   1d68c:	8c7fff84 	addi	r17,r17,-2
   1d690:	1d47883a 	add	r3,r3,r21
   1d694:	003f7406 	br	1d468 <__alt_data_end+0xfc01d468>
   1d698:	1cc7883a 	add	r3,r3,r19
   1d69c:	003ecd06 	br	1d1d4 <__alt_data_end+0xfc01d1d4>
   1d6a0:	8005883a 	mov	r2,r16
   1d6a4:	003ef806 	br	1d288 <__alt_data_end+0xfc01d288>
   1d6a8:	873fe736 	bltu	r16,fp,1d648 <__alt_data_end+0xfc01d648>
   1d6ac:	e00f883a 	mov	r7,fp
   1d6b0:	0009883a 	mov	r4,zero
   1d6b4:	003fad06 	br	1d56c <__alt_data_end+0xfc01d56c>

0001d6b8 <__adddf3>:
   1d6b8:	02c00434 	movhi	r11,16
   1d6bc:	5affffc4 	addi	r11,r11,-1
   1d6c0:	2806d7fa 	srli	r3,r5,31
   1d6c4:	2ad4703a 	and	r10,r5,r11
   1d6c8:	3ad2703a 	and	r9,r7,r11
   1d6cc:	3804d53a 	srli	r2,r7,20
   1d6d0:	3018d77a 	srli	r12,r6,29
   1d6d4:	280ad53a 	srli	r5,r5,20
   1d6d8:	501490fa 	slli	r10,r10,3
   1d6dc:	2010d77a 	srli	r8,r4,29
   1d6e0:	481290fa 	slli	r9,r9,3
   1d6e4:	380ed7fa 	srli	r7,r7,31
   1d6e8:	defffb04 	addi	sp,sp,-20
   1d6ec:	dc800215 	stw	r18,8(sp)
   1d6f0:	dc400115 	stw	r17,4(sp)
   1d6f4:	dc000015 	stw	r16,0(sp)
   1d6f8:	dfc00415 	stw	ra,16(sp)
   1d6fc:	dcc00315 	stw	r19,12(sp)
   1d700:	1c803fcc 	andi	r18,r3,255
   1d704:	2c01ffcc 	andi	r16,r5,2047
   1d708:	5210b03a 	or	r8,r10,r8
   1d70c:	202290fa 	slli	r17,r4,3
   1d710:	1081ffcc 	andi	r2,r2,2047
   1d714:	4b12b03a 	or	r9,r9,r12
   1d718:	300c90fa 	slli	r6,r6,3
   1d71c:	91c07526 	beq	r18,r7,1d8f4 <__adddf3+0x23c>
   1d720:	8087c83a 	sub	r3,r16,r2
   1d724:	00c0ab0e 	bge	zero,r3,1d9d4 <__adddf3+0x31c>
   1d728:	10002a1e 	bne	r2,zero,1d7d4 <__adddf3+0x11c>
   1d72c:	4984b03a 	or	r2,r9,r6
   1d730:	1000961e 	bne	r2,zero,1d98c <__adddf3+0x2d4>
   1d734:	888001cc 	andi	r2,r17,7
   1d738:	10000726 	beq	r2,zero,1d758 <__adddf3+0xa0>
   1d73c:	888003cc 	andi	r2,r17,15
   1d740:	00c00104 	movi	r3,4
   1d744:	10c00426 	beq	r2,r3,1d758 <__adddf3+0xa0>
   1d748:	88c7883a 	add	r3,r17,r3
   1d74c:	1c63803a 	cmpltu	r17,r3,r17
   1d750:	4451883a 	add	r8,r8,r17
   1d754:	1823883a 	mov	r17,r3
   1d758:	4080202c 	andhi	r2,r8,128
   1d75c:	10005926 	beq	r2,zero,1d8c4 <__adddf3+0x20c>
   1d760:	84000044 	addi	r16,r16,1
   1d764:	0081ffc4 	movi	r2,2047
   1d768:	8080ba26 	beq	r16,r2,1da54 <__adddf3+0x39c>
   1d76c:	00bfe034 	movhi	r2,65408
   1d770:	10bfffc4 	addi	r2,r2,-1
   1d774:	4090703a 	and	r8,r8,r2
   1d778:	4004977a 	slli	r2,r8,29
   1d77c:	4010927a 	slli	r8,r8,9
   1d780:	8822d0fa 	srli	r17,r17,3
   1d784:	8401ffcc 	andi	r16,r16,2047
   1d788:	4010d33a 	srli	r8,r8,12
   1d78c:	9007883a 	mov	r3,r18
   1d790:	1444b03a 	or	r2,r2,r17
   1d794:	8401ffcc 	andi	r16,r16,2047
   1d798:	8020953a 	slli	r16,r16,20
   1d79c:	18c03fcc 	andi	r3,r3,255
   1d7a0:	01000434 	movhi	r4,16
   1d7a4:	213fffc4 	addi	r4,r4,-1
   1d7a8:	180697fa 	slli	r3,r3,31
   1d7ac:	4110703a 	and	r8,r8,r4
   1d7b0:	4410b03a 	or	r8,r8,r16
   1d7b4:	40c6b03a 	or	r3,r8,r3
   1d7b8:	dfc00417 	ldw	ra,16(sp)
   1d7bc:	dcc00317 	ldw	r19,12(sp)
   1d7c0:	dc800217 	ldw	r18,8(sp)
   1d7c4:	dc400117 	ldw	r17,4(sp)
   1d7c8:	dc000017 	ldw	r16,0(sp)
   1d7cc:	dec00504 	addi	sp,sp,20
   1d7d0:	f800283a 	ret
   1d7d4:	0081ffc4 	movi	r2,2047
   1d7d8:	80bfd626 	beq	r16,r2,1d734 <__alt_data_end+0xfc01d734>
   1d7dc:	4a402034 	orhi	r9,r9,128
   1d7e0:	00800e04 	movi	r2,56
   1d7e4:	10c09f16 	blt	r2,r3,1da64 <__adddf3+0x3ac>
   1d7e8:	008007c4 	movi	r2,31
   1d7ec:	10c0c216 	blt	r2,r3,1daf8 <__adddf3+0x440>
   1d7f0:	00800804 	movi	r2,32
   1d7f4:	10c5c83a 	sub	r2,r2,r3
   1d7f8:	488a983a 	sll	r5,r9,r2
   1d7fc:	30c8d83a 	srl	r4,r6,r3
   1d800:	3084983a 	sll	r2,r6,r2
   1d804:	48c6d83a 	srl	r3,r9,r3
   1d808:	290cb03a 	or	r6,r5,r4
   1d80c:	1004c03a 	cmpne	r2,r2,zero
   1d810:	308cb03a 	or	r6,r6,r2
   1d814:	898dc83a 	sub	r6,r17,r6
   1d818:	89a3803a 	cmpltu	r17,r17,r6
   1d81c:	40d1c83a 	sub	r8,r8,r3
   1d820:	4451c83a 	sub	r8,r8,r17
   1d824:	3023883a 	mov	r17,r6
   1d828:	4080202c 	andhi	r2,r8,128
   1d82c:	10002326 	beq	r2,zero,1d8bc <__adddf3+0x204>
   1d830:	04c02034 	movhi	r19,128
   1d834:	9cffffc4 	addi	r19,r19,-1
   1d838:	44e6703a 	and	r19,r8,r19
   1d83c:	98007626 	beq	r19,zero,1da18 <__adddf3+0x360>
   1d840:	9809883a 	mov	r4,r19
   1d844:	000f3840 	call	f384 <__clzsi2>
   1d848:	10fffe04 	addi	r3,r2,-8
   1d84c:	010007c4 	movi	r4,31
   1d850:	20c07716 	blt	r4,r3,1da30 <__adddf3+0x378>
   1d854:	00800804 	movi	r2,32
   1d858:	10c5c83a 	sub	r2,r2,r3
   1d85c:	8884d83a 	srl	r2,r17,r2
   1d860:	98d0983a 	sll	r8,r19,r3
   1d864:	88e2983a 	sll	r17,r17,r3
   1d868:	1204b03a 	or	r2,r2,r8
   1d86c:	1c007416 	blt	r3,r16,1da40 <__adddf3+0x388>
   1d870:	1c21c83a 	sub	r16,r3,r16
   1d874:	82000044 	addi	r8,r16,1
   1d878:	00c007c4 	movi	r3,31
   1d87c:	1a009116 	blt	r3,r8,1dac4 <__adddf3+0x40c>
   1d880:	00c00804 	movi	r3,32
   1d884:	1a07c83a 	sub	r3,r3,r8
   1d888:	8a08d83a 	srl	r4,r17,r8
   1d88c:	88e2983a 	sll	r17,r17,r3
   1d890:	10c6983a 	sll	r3,r2,r3
   1d894:	1210d83a 	srl	r8,r2,r8
   1d898:	8804c03a 	cmpne	r2,r17,zero
   1d89c:	1906b03a 	or	r3,r3,r4
   1d8a0:	18a2b03a 	or	r17,r3,r2
   1d8a4:	0021883a 	mov	r16,zero
   1d8a8:	003fa206 	br	1d734 <__alt_data_end+0xfc01d734>
   1d8ac:	1890b03a 	or	r8,r3,r2
   1d8b0:	40017d26 	beq	r8,zero,1dea8 <__adddf3+0x7f0>
   1d8b4:	1011883a 	mov	r8,r2
   1d8b8:	1823883a 	mov	r17,r3
   1d8bc:	888001cc 	andi	r2,r17,7
   1d8c0:	103f9e1e 	bne	r2,zero,1d73c <__alt_data_end+0xfc01d73c>
   1d8c4:	4004977a 	slli	r2,r8,29
   1d8c8:	8822d0fa 	srli	r17,r17,3
   1d8cc:	4010d0fa 	srli	r8,r8,3
   1d8d0:	9007883a 	mov	r3,r18
   1d8d4:	1444b03a 	or	r2,r2,r17
   1d8d8:	0101ffc4 	movi	r4,2047
   1d8dc:	81002426 	beq	r16,r4,1d970 <__adddf3+0x2b8>
   1d8e0:	8120703a 	and	r16,r16,r4
   1d8e4:	01000434 	movhi	r4,16
   1d8e8:	213fffc4 	addi	r4,r4,-1
   1d8ec:	4110703a 	and	r8,r8,r4
   1d8f0:	003fa806 	br	1d794 <__alt_data_end+0xfc01d794>
   1d8f4:	8089c83a 	sub	r4,r16,r2
   1d8f8:	01005e0e 	bge	zero,r4,1da74 <__adddf3+0x3bc>
   1d8fc:	10002b26 	beq	r2,zero,1d9ac <__adddf3+0x2f4>
   1d900:	0081ffc4 	movi	r2,2047
   1d904:	80bf8b26 	beq	r16,r2,1d734 <__alt_data_end+0xfc01d734>
   1d908:	4a402034 	orhi	r9,r9,128
   1d90c:	00800e04 	movi	r2,56
   1d910:	1100a40e 	bge	r2,r4,1dba4 <__adddf3+0x4ec>
   1d914:	498cb03a 	or	r6,r9,r6
   1d918:	300ac03a 	cmpne	r5,r6,zero
   1d91c:	0013883a 	mov	r9,zero
   1d920:	2c4b883a 	add	r5,r5,r17
   1d924:	2c63803a 	cmpltu	r17,r5,r17
   1d928:	4a11883a 	add	r8,r9,r8
   1d92c:	8a11883a 	add	r8,r17,r8
   1d930:	2823883a 	mov	r17,r5
   1d934:	4080202c 	andhi	r2,r8,128
   1d938:	103fe026 	beq	r2,zero,1d8bc <__alt_data_end+0xfc01d8bc>
   1d93c:	84000044 	addi	r16,r16,1
   1d940:	0081ffc4 	movi	r2,2047
   1d944:	8080d226 	beq	r16,r2,1dc90 <__adddf3+0x5d8>
   1d948:	00bfe034 	movhi	r2,65408
   1d94c:	10bfffc4 	addi	r2,r2,-1
   1d950:	4090703a 	and	r8,r8,r2
   1d954:	880ad07a 	srli	r5,r17,1
   1d958:	400897fa 	slli	r4,r8,31
   1d95c:	88c0004c 	andi	r3,r17,1
   1d960:	28e2b03a 	or	r17,r5,r3
   1d964:	4010d07a 	srli	r8,r8,1
   1d968:	2462b03a 	or	r17,r4,r17
   1d96c:	003f7106 	br	1d734 <__alt_data_end+0xfc01d734>
   1d970:	4088b03a 	or	r4,r8,r2
   1d974:	20014526 	beq	r4,zero,1de8c <__adddf3+0x7d4>
   1d978:	01000434 	movhi	r4,16
   1d97c:	42000234 	orhi	r8,r8,8
   1d980:	213fffc4 	addi	r4,r4,-1
   1d984:	4110703a 	and	r8,r8,r4
   1d988:	003f8206 	br	1d794 <__alt_data_end+0xfc01d794>
   1d98c:	18ffffc4 	addi	r3,r3,-1
   1d990:	1800491e 	bne	r3,zero,1dab8 <__adddf3+0x400>
   1d994:	898bc83a 	sub	r5,r17,r6
   1d998:	8963803a 	cmpltu	r17,r17,r5
   1d99c:	4251c83a 	sub	r8,r8,r9
   1d9a0:	4451c83a 	sub	r8,r8,r17
   1d9a4:	2823883a 	mov	r17,r5
   1d9a8:	003f9f06 	br	1d828 <__alt_data_end+0xfc01d828>
   1d9ac:	4984b03a 	or	r2,r9,r6
   1d9b0:	103f6026 	beq	r2,zero,1d734 <__alt_data_end+0xfc01d734>
   1d9b4:	213fffc4 	addi	r4,r4,-1
   1d9b8:	2000931e 	bne	r4,zero,1dc08 <__adddf3+0x550>
   1d9bc:	898d883a 	add	r6,r17,r6
   1d9c0:	3463803a 	cmpltu	r17,r6,r17
   1d9c4:	4251883a 	add	r8,r8,r9
   1d9c8:	8a11883a 	add	r8,r17,r8
   1d9cc:	3023883a 	mov	r17,r6
   1d9d0:	003fd806 	br	1d934 <__alt_data_end+0xfc01d934>
   1d9d4:	1800541e 	bne	r3,zero,1db28 <__adddf3+0x470>
   1d9d8:	80800044 	addi	r2,r16,1
   1d9dc:	1081ffcc 	andi	r2,r2,2047
   1d9e0:	00c00044 	movi	r3,1
   1d9e4:	1880a00e 	bge	r3,r2,1dc68 <__adddf3+0x5b0>
   1d9e8:	8989c83a 	sub	r4,r17,r6
   1d9ec:	8905803a 	cmpltu	r2,r17,r4
   1d9f0:	4267c83a 	sub	r19,r8,r9
   1d9f4:	98a7c83a 	sub	r19,r19,r2
   1d9f8:	9880202c 	andhi	r2,r19,128
   1d9fc:	10006326 	beq	r2,zero,1db8c <__adddf3+0x4d4>
   1da00:	3463c83a 	sub	r17,r6,r17
   1da04:	4a07c83a 	sub	r3,r9,r8
   1da08:	344d803a 	cmpltu	r6,r6,r17
   1da0c:	19a7c83a 	sub	r19,r3,r6
   1da10:	3825883a 	mov	r18,r7
   1da14:	983f8a1e 	bne	r19,zero,1d840 <__alt_data_end+0xfc01d840>
   1da18:	8809883a 	mov	r4,r17
   1da1c:	000f3840 	call	f384 <__clzsi2>
   1da20:	10800804 	addi	r2,r2,32
   1da24:	10fffe04 	addi	r3,r2,-8
   1da28:	010007c4 	movi	r4,31
   1da2c:	20ff890e 	bge	r4,r3,1d854 <__alt_data_end+0xfc01d854>
   1da30:	10bff604 	addi	r2,r2,-40
   1da34:	8884983a 	sll	r2,r17,r2
   1da38:	0023883a 	mov	r17,zero
   1da3c:	1c3f8c0e 	bge	r3,r16,1d870 <__alt_data_end+0xfc01d870>
   1da40:	023fe034 	movhi	r8,65408
   1da44:	423fffc4 	addi	r8,r8,-1
   1da48:	80e1c83a 	sub	r16,r16,r3
   1da4c:	1210703a 	and	r8,r2,r8
   1da50:	003f3806 	br	1d734 <__alt_data_end+0xfc01d734>
   1da54:	9007883a 	mov	r3,r18
   1da58:	0011883a 	mov	r8,zero
   1da5c:	0005883a 	mov	r2,zero
   1da60:	003f4c06 	br	1d794 <__alt_data_end+0xfc01d794>
   1da64:	498cb03a 	or	r6,r9,r6
   1da68:	300cc03a 	cmpne	r6,r6,zero
   1da6c:	0007883a 	mov	r3,zero
   1da70:	003f6806 	br	1d814 <__alt_data_end+0xfc01d814>
   1da74:	20009c1e 	bne	r4,zero,1dce8 <__adddf3+0x630>
   1da78:	80800044 	addi	r2,r16,1
   1da7c:	1141ffcc 	andi	r5,r2,2047
   1da80:	01000044 	movi	r4,1
   1da84:	2140670e 	bge	r4,r5,1dc24 <__adddf3+0x56c>
   1da88:	0101ffc4 	movi	r4,2047
   1da8c:	11007f26 	beq	r2,r4,1dc8c <__adddf3+0x5d4>
   1da90:	898d883a 	add	r6,r17,r6
   1da94:	4247883a 	add	r3,r8,r9
   1da98:	3451803a 	cmpltu	r8,r6,r17
   1da9c:	40d1883a 	add	r8,r8,r3
   1daa0:	402297fa 	slli	r17,r8,31
   1daa4:	300cd07a 	srli	r6,r6,1
   1daa8:	4010d07a 	srli	r8,r8,1
   1daac:	1021883a 	mov	r16,r2
   1dab0:	89a2b03a 	or	r17,r17,r6
   1dab4:	003f1f06 	br	1d734 <__alt_data_end+0xfc01d734>
   1dab8:	0081ffc4 	movi	r2,2047
   1dabc:	80bf481e 	bne	r16,r2,1d7e0 <__alt_data_end+0xfc01d7e0>
   1dac0:	003f1c06 	br	1d734 <__alt_data_end+0xfc01d734>
   1dac4:	843ff844 	addi	r16,r16,-31
   1dac8:	01000804 	movi	r4,32
   1dacc:	1406d83a 	srl	r3,r2,r16
   1dad0:	41005026 	beq	r8,r4,1dc14 <__adddf3+0x55c>
   1dad4:	01001004 	movi	r4,64
   1dad8:	2211c83a 	sub	r8,r4,r8
   1dadc:	1204983a 	sll	r2,r2,r8
   1dae0:	88a2b03a 	or	r17,r17,r2
   1dae4:	8822c03a 	cmpne	r17,r17,zero
   1dae8:	1c62b03a 	or	r17,r3,r17
   1daec:	0011883a 	mov	r8,zero
   1daf0:	0021883a 	mov	r16,zero
   1daf4:	003f7106 	br	1d8bc <__alt_data_end+0xfc01d8bc>
   1daf8:	193ff804 	addi	r4,r3,-32
   1dafc:	00800804 	movi	r2,32
   1db00:	4908d83a 	srl	r4,r9,r4
   1db04:	18804526 	beq	r3,r2,1dc1c <__adddf3+0x564>
   1db08:	00801004 	movi	r2,64
   1db0c:	10c5c83a 	sub	r2,r2,r3
   1db10:	4886983a 	sll	r3,r9,r2
   1db14:	198cb03a 	or	r6,r3,r6
   1db18:	300cc03a 	cmpne	r6,r6,zero
   1db1c:	218cb03a 	or	r6,r4,r6
   1db20:	0007883a 	mov	r3,zero
   1db24:	003f3b06 	br	1d814 <__alt_data_end+0xfc01d814>
   1db28:	80002a26 	beq	r16,zero,1dbd4 <__adddf3+0x51c>
   1db2c:	0101ffc4 	movi	r4,2047
   1db30:	11006826 	beq	r2,r4,1dcd4 <__adddf3+0x61c>
   1db34:	00c7c83a 	sub	r3,zero,r3
   1db38:	42002034 	orhi	r8,r8,128
   1db3c:	01000e04 	movi	r4,56
   1db40:	20c07c16 	blt	r4,r3,1dd34 <__adddf3+0x67c>
   1db44:	010007c4 	movi	r4,31
   1db48:	20c0da16 	blt	r4,r3,1deb4 <__adddf3+0x7fc>
   1db4c:	01000804 	movi	r4,32
   1db50:	20c9c83a 	sub	r4,r4,r3
   1db54:	4114983a 	sll	r10,r8,r4
   1db58:	88cad83a 	srl	r5,r17,r3
   1db5c:	8908983a 	sll	r4,r17,r4
   1db60:	40c6d83a 	srl	r3,r8,r3
   1db64:	5162b03a 	or	r17,r10,r5
   1db68:	2008c03a 	cmpne	r4,r4,zero
   1db6c:	8922b03a 	or	r17,r17,r4
   1db70:	3463c83a 	sub	r17,r6,r17
   1db74:	48c7c83a 	sub	r3,r9,r3
   1db78:	344d803a 	cmpltu	r6,r6,r17
   1db7c:	1991c83a 	sub	r8,r3,r6
   1db80:	1021883a 	mov	r16,r2
   1db84:	3825883a 	mov	r18,r7
   1db88:	003f2706 	br	1d828 <__alt_data_end+0xfc01d828>
   1db8c:	24d0b03a 	or	r8,r4,r19
   1db90:	40001b1e 	bne	r8,zero,1dc00 <__adddf3+0x548>
   1db94:	0005883a 	mov	r2,zero
   1db98:	0007883a 	mov	r3,zero
   1db9c:	0021883a 	mov	r16,zero
   1dba0:	003f4d06 	br	1d8d8 <__alt_data_end+0xfc01d8d8>
   1dba4:	008007c4 	movi	r2,31
   1dba8:	11003c16 	blt	r2,r4,1dc9c <__adddf3+0x5e4>
   1dbac:	00800804 	movi	r2,32
   1dbb0:	1105c83a 	sub	r2,r2,r4
   1dbb4:	488e983a 	sll	r7,r9,r2
   1dbb8:	310ad83a 	srl	r5,r6,r4
   1dbbc:	3084983a 	sll	r2,r6,r2
   1dbc0:	4912d83a 	srl	r9,r9,r4
   1dbc4:	394ab03a 	or	r5,r7,r5
   1dbc8:	1004c03a 	cmpne	r2,r2,zero
   1dbcc:	288ab03a 	or	r5,r5,r2
   1dbd0:	003f5306 	br	1d920 <__alt_data_end+0xfc01d920>
   1dbd4:	4448b03a 	or	r4,r8,r17
   1dbd8:	20003e26 	beq	r4,zero,1dcd4 <__adddf3+0x61c>
   1dbdc:	00c6303a 	nor	r3,zero,r3
   1dbe0:	18003a1e 	bne	r3,zero,1dccc <__adddf3+0x614>
   1dbe4:	3463c83a 	sub	r17,r6,r17
   1dbe8:	4a07c83a 	sub	r3,r9,r8
   1dbec:	344d803a 	cmpltu	r6,r6,r17
   1dbf0:	1991c83a 	sub	r8,r3,r6
   1dbf4:	1021883a 	mov	r16,r2
   1dbf8:	3825883a 	mov	r18,r7
   1dbfc:	003f0a06 	br	1d828 <__alt_data_end+0xfc01d828>
   1dc00:	2023883a 	mov	r17,r4
   1dc04:	003f0d06 	br	1d83c <__alt_data_end+0xfc01d83c>
   1dc08:	0081ffc4 	movi	r2,2047
   1dc0c:	80bf3f1e 	bne	r16,r2,1d90c <__alt_data_end+0xfc01d90c>
   1dc10:	003ec806 	br	1d734 <__alt_data_end+0xfc01d734>
   1dc14:	0005883a 	mov	r2,zero
   1dc18:	003fb106 	br	1dae0 <__alt_data_end+0xfc01dae0>
   1dc1c:	0007883a 	mov	r3,zero
   1dc20:	003fbc06 	br	1db14 <__alt_data_end+0xfc01db14>
   1dc24:	4444b03a 	or	r2,r8,r17
   1dc28:	8000871e 	bne	r16,zero,1de48 <__adddf3+0x790>
   1dc2c:	1000ba26 	beq	r2,zero,1df18 <__adddf3+0x860>
   1dc30:	4984b03a 	or	r2,r9,r6
   1dc34:	103ebf26 	beq	r2,zero,1d734 <__alt_data_end+0xfc01d734>
   1dc38:	8985883a 	add	r2,r17,r6
   1dc3c:	4247883a 	add	r3,r8,r9
   1dc40:	1451803a 	cmpltu	r8,r2,r17
   1dc44:	40d1883a 	add	r8,r8,r3
   1dc48:	40c0202c 	andhi	r3,r8,128
   1dc4c:	1023883a 	mov	r17,r2
   1dc50:	183f1a26 	beq	r3,zero,1d8bc <__alt_data_end+0xfc01d8bc>
   1dc54:	00bfe034 	movhi	r2,65408
   1dc58:	10bfffc4 	addi	r2,r2,-1
   1dc5c:	2021883a 	mov	r16,r4
   1dc60:	4090703a 	and	r8,r8,r2
   1dc64:	003eb306 	br	1d734 <__alt_data_end+0xfc01d734>
   1dc68:	4444b03a 	or	r2,r8,r17
   1dc6c:	8000291e 	bne	r16,zero,1dd14 <__adddf3+0x65c>
   1dc70:	10004b1e 	bne	r2,zero,1dda0 <__adddf3+0x6e8>
   1dc74:	4990b03a 	or	r8,r9,r6
   1dc78:	40008b26 	beq	r8,zero,1dea8 <__adddf3+0x7f0>
   1dc7c:	4811883a 	mov	r8,r9
   1dc80:	3023883a 	mov	r17,r6
   1dc84:	3825883a 	mov	r18,r7
   1dc88:	003eaa06 	br	1d734 <__alt_data_end+0xfc01d734>
   1dc8c:	1021883a 	mov	r16,r2
   1dc90:	0011883a 	mov	r8,zero
   1dc94:	0005883a 	mov	r2,zero
   1dc98:	003f0f06 	br	1d8d8 <__alt_data_end+0xfc01d8d8>
   1dc9c:	217ff804 	addi	r5,r4,-32
   1dca0:	00800804 	movi	r2,32
   1dca4:	494ad83a 	srl	r5,r9,r5
   1dca8:	20807d26 	beq	r4,r2,1dea0 <__adddf3+0x7e8>
   1dcac:	00801004 	movi	r2,64
   1dcb0:	1109c83a 	sub	r4,r2,r4
   1dcb4:	4912983a 	sll	r9,r9,r4
   1dcb8:	498cb03a 	or	r6,r9,r6
   1dcbc:	300cc03a 	cmpne	r6,r6,zero
   1dcc0:	298ab03a 	or	r5,r5,r6
   1dcc4:	0013883a 	mov	r9,zero
   1dcc8:	003f1506 	br	1d920 <__alt_data_end+0xfc01d920>
   1dccc:	0101ffc4 	movi	r4,2047
   1dcd0:	113f9a1e 	bne	r2,r4,1db3c <__alt_data_end+0xfc01db3c>
   1dcd4:	4811883a 	mov	r8,r9
   1dcd8:	3023883a 	mov	r17,r6
   1dcdc:	1021883a 	mov	r16,r2
   1dce0:	3825883a 	mov	r18,r7
   1dce4:	003e9306 	br	1d734 <__alt_data_end+0xfc01d734>
   1dce8:	8000161e 	bne	r16,zero,1dd44 <__adddf3+0x68c>
   1dcec:	444ab03a 	or	r5,r8,r17
   1dcf0:	28005126 	beq	r5,zero,1de38 <__adddf3+0x780>
   1dcf4:	0108303a 	nor	r4,zero,r4
   1dcf8:	20004d1e 	bne	r4,zero,1de30 <__adddf3+0x778>
   1dcfc:	89a3883a 	add	r17,r17,r6
   1dd00:	4253883a 	add	r9,r8,r9
   1dd04:	898d803a 	cmpltu	r6,r17,r6
   1dd08:	3251883a 	add	r8,r6,r9
   1dd0c:	1021883a 	mov	r16,r2
   1dd10:	003f0806 	br	1d934 <__alt_data_end+0xfc01d934>
   1dd14:	1000301e 	bne	r2,zero,1ddd8 <__adddf3+0x720>
   1dd18:	4984b03a 	or	r2,r9,r6
   1dd1c:	10007126 	beq	r2,zero,1dee4 <__adddf3+0x82c>
   1dd20:	4811883a 	mov	r8,r9
   1dd24:	3023883a 	mov	r17,r6
   1dd28:	3825883a 	mov	r18,r7
   1dd2c:	0401ffc4 	movi	r16,2047
   1dd30:	003e8006 	br	1d734 <__alt_data_end+0xfc01d734>
   1dd34:	4462b03a 	or	r17,r8,r17
   1dd38:	8822c03a 	cmpne	r17,r17,zero
   1dd3c:	0007883a 	mov	r3,zero
   1dd40:	003f8b06 	br	1db70 <__alt_data_end+0xfc01db70>
   1dd44:	0141ffc4 	movi	r5,2047
   1dd48:	11403b26 	beq	r2,r5,1de38 <__adddf3+0x780>
   1dd4c:	0109c83a 	sub	r4,zero,r4
   1dd50:	42002034 	orhi	r8,r8,128
   1dd54:	01400e04 	movi	r5,56
   1dd58:	29006716 	blt	r5,r4,1def8 <__adddf3+0x840>
   1dd5c:	014007c4 	movi	r5,31
   1dd60:	29007016 	blt	r5,r4,1df24 <__adddf3+0x86c>
   1dd64:	01400804 	movi	r5,32
   1dd68:	290bc83a 	sub	r5,r5,r4
   1dd6c:	4154983a 	sll	r10,r8,r5
   1dd70:	890ed83a 	srl	r7,r17,r4
   1dd74:	894a983a 	sll	r5,r17,r5
   1dd78:	4108d83a 	srl	r4,r8,r4
   1dd7c:	51e2b03a 	or	r17,r10,r7
   1dd80:	280ac03a 	cmpne	r5,r5,zero
   1dd84:	8962b03a 	or	r17,r17,r5
   1dd88:	89a3883a 	add	r17,r17,r6
   1dd8c:	2253883a 	add	r9,r4,r9
   1dd90:	898d803a 	cmpltu	r6,r17,r6
   1dd94:	3251883a 	add	r8,r6,r9
   1dd98:	1021883a 	mov	r16,r2
   1dd9c:	003ee506 	br	1d934 <__alt_data_end+0xfc01d934>
   1dda0:	4984b03a 	or	r2,r9,r6
   1dda4:	103e6326 	beq	r2,zero,1d734 <__alt_data_end+0xfc01d734>
   1dda8:	8987c83a 	sub	r3,r17,r6
   1ddac:	88c9803a 	cmpltu	r4,r17,r3
   1ddb0:	4245c83a 	sub	r2,r8,r9
   1ddb4:	1105c83a 	sub	r2,r2,r4
   1ddb8:	1100202c 	andhi	r4,r2,128
   1ddbc:	203ebb26 	beq	r4,zero,1d8ac <__alt_data_end+0xfc01d8ac>
   1ddc0:	3463c83a 	sub	r17,r6,r17
   1ddc4:	4a07c83a 	sub	r3,r9,r8
   1ddc8:	344d803a 	cmpltu	r6,r6,r17
   1ddcc:	1991c83a 	sub	r8,r3,r6
   1ddd0:	3825883a 	mov	r18,r7
   1ddd4:	003e5706 	br	1d734 <__alt_data_end+0xfc01d734>
   1ddd8:	4984b03a 	or	r2,r9,r6
   1dddc:	10002e26 	beq	r2,zero,1de98 <__adddf3+0x7e0>
   1dde0:	4004d0fa 	srli	r2,r8,3
   1dde4:	8822d0fa 	srli	r17,r17,3
   1dde8:	4010977a 	slli	r8,r8,29
   1ddec:	10c0022c 	andhi	r3,r2,8
   1ddf0:	4462b03a 	or	r17,r8,r17
   1ddf4:	18000826 	beq	r3,zero,1de18 <__adddf3+0x760>
   1ddf8:	4808d0fa 	srli	r4,r9,3
   1ddfc:	20c0022c 	andhi	r3,r4,8
   1de00:	1800051e 	bne	r3,zero,1de18 <__adddf3+0x760>
   1de04:	300cd0fa 	srli	r6,r6,3
   1de08:	4806977a 	slli	r3,r9,29
   1de0c:	2005883a 	mov	r2,r4
   1de10:	3825883a 	mov	r18,r7
   1de14:	19a2b03a 	or	r17,r3,r6
   1de18:	8810d77a 	srli	r8,r17,29
   1de1c:	100490fa 	slli	r2,r2,3
   1de20:	882290fa 	slli	r17,r17,3
   1de24:	0401ffc4 	movi	r16,2047
   1de28:	4090b03a 	or	r8,r8,r2
   1de2c:	003e4106 	br	1d734 <__alt_data_end+0xfc01d734>
   1de30:	0141ffc4 	movi	r5,2047
   1de34:	117fc71e 	bne	r2,r5,1dd54 <__alt_data_end+0xfc01dd54>
   1de38:	4811883a 	mov	r8,r9
   1de3c:	3023883a 	mov	r17,r6
   1de40:	1021883a 	mov	r16,r2
   1de44:	003e3b06 	br	1d734 <__alt_data_end+0xfc01d734>
   1de48:	10002f26 	beq	r2,zero,1df08 <__adddf3+0x850>
   1de4c:	4984b03a 	or	r2,r9,r6
   1de50:	10001126 	beq	r2,zero,1de98 <__adddf3+0x7e0>
   1de54:	4004d0fa 	srli	r2,r8,3
   1de58:	8822d0fa 	srli	r17,r17,3
   1de5c:	4010977a 	slli	r8,r8,29
   1de60:	10c0022c 	andhi	r3,r2,8
   1de64:	4462b03a 	or	r17,r8,r17
   1de68:	183feb26 	beq	r3,zero,1de18 <__alt_data_end+0xfc01de18>
   1de6c:	4808d0fa 	srli	r4,r9,3
   1de70:	20c0022c 	andhi	r3,r4,8
   1de74:	183fe81e 	bne	r3,zero,1de18 <__alt_data_end+0xfc01de18>
   1de78:	300cd0fa 	srli	r6,r6,3
   1de7c:	4806977a 	slli	r3,r9,29
   1de80:	2005883a 	mov	r2,r4
   1de84:	19a2b03a 	or	r17,r3,r6
   1de88:	003fe306 	br	1de18 <__alt_data_end+0xfc01de18>
   1de8c:	0011883a 	mov	r8,zero
   1de90:	0005883a 	mov	r2,zero
   1de94:	003e3f06 	br	1d794 <__alt_data_end+0xfc01d794>
   1de98:	0401ffc4 	movi	r16,2047
   1de9c:	003e2506 	br	1d734 <__alt_data_end+0xfc01d734>
   1dea0:	0013883a 	mov	r9,zero
   1dea4:	003f8406 	br	1dcb8 <__alt_data_end+0xfc01dcb8>
   1dea8:	0005883a 	mov	r2,zero
   1deac:	0007883a 	mov	r3,zero
   1deb0:	003e8906 	br	1d8d8 <__alt_data_end+0xfc01d8d8>
   1deb4:	197ff804 	addi	r5,r3,-32
   1deb8:	01000804 	movi	r4,32
   1debc:	414ad83a 	srl	r5,r8,r5
   1dec0:	19002426 	beq	r3,r4,1df54 <__adddf3+0x89c>
   1dec4:	01001004 	movi	r4,64
   1dec8:	20c7c83a 	sub	r3,r4,r3
   1decc:	40c6983a 	sll	r3,r8,r3
   1ded0:	1c46b03a 	or	r3,r3,r17
   1ded4:	1806c03a 	cmpne	r3,r3,zero
   1ded8:	28e2b03a 	or	r17,r5,r3
   1dedc:	0007883a 	mov	r3,zero
   1dee0:	003f2306 	br	1db70 <__alt_data_end+0xfc01db70>
   1dee4:	0007883a 	mov	r3,zero
   1dee8:	5811883a 	mov	r8,r11
   1deec:	00bfffc4 	movi	r2,-1
   1def0:	0401ffc4 	movi	r16,2047
   1def4:	003e7806 	br	1d8d8 <__alt_data_end+0xfc01d8d8>
   1def8:	4462b03a 	or	r17,r8,r17
   1defc:	8822c03a 	cmpne	r17,r17,zero
   1df00:	0009883a 	mov	r4,zero
   1df04:	003fa006 	br	1dd88 <__alt_data_end+0xfc01dd88>
   1df08:	4811883a 	mov	r8,r9
   1df0c:	3023883a 	mov	r17,r6
   1df10:	0401ffc4 	movi	r16,2047
   1df14:	003e0706 	br	1d734 <__alt_data_end+0xfc01d734>
   1df18:	4811883a 	mov	r8,r9
   1df1c:	3023883a 	mov	r17,r6
   1df20:	003e0406 	br	1d734 <__alt_data_end+0xfc01d734>
   1df24:	21fff804 	addi	r7,r4,-32
   1df28:	01400804 	movi	r5,32
   1df2c:	41ced83a 	srl	r7,r8,r7
   1df30:	21400a26 	beq	r4,r5,1df5c <__adddf3+0x8a4>
   1df34:	01401004 	movi	r5,64
   1df38:	2909c83a 	sub	r4,r5,r4
   1df3c:	4108983a 	sll	r4,r8,r4
   1df40:	2448b03a 	or	r4,r4,r17
   1df44:	2008c03a 	cmpne	r4,r4,zero
   1df48:	3922b03a 	or	r17,r7,r4
   1df4c:	0009883a 	mov	r4,zero
   1df50:	003f8d06 	br	1dd88 <__alt_data_end+0xfc01dd88>
   1df54:	0007883a 	mov	r3,zero
   1df58:	003fdd06 	br	1ded0 <__alt_data_end+0xfc01ded0>
   1df5c:	0009883a 	mov	r4,zero
   1df60:	003ff706 	br	1df40 <__alt_data_end+0xfc01df40>

0001df64 <__divdf3>:
   1df64:	defff004 	addi	sp,sp,-64
   1df68:	dc800815 	stw	r18,32(sp)
   1df6c:	2824d53a 	srli	r18,r5,20
   1df70:	dd800c15 	stw	r22,48(sp)
   1df74:	282cd7fa 	srli	r22,r5,31
   1df78:	dc000615 	stw	r16,24(sp)
   1df7c:	04000434 	movhi	r16,16
   1df80:	843fffc4 	addi	r16,r16,-1
   1df84:	dfc00f15 	stw	ra,60(sp)
   1df88:	df000e15 	stw	fp,56(sp)
   1df8c:	ddc00d15 	stw	r23,52(sp)
   1df90:	dd400b15 	stw	r21,44(sp)
   1df94:	dd000a15 	stw	r20,40(sp)
   1df98:	dcc00915 	stw	r19,36(sp)
   1df9c:	dc400715 	stw	r17,28(sp)
   1dfa0:	9481ffcc 	andi	r18,r18,2047
   1dfa4:	2c20703a 	and	r16,r5,r16
   1dfa8:	b2003fcc 	andi	r8,r22,255
   1dfac:	90006126 	beq	r18,zero,1e134 <__divdf3+0x1d0>
   1dfb0:	0081ffc4 	movi	r2,2047
   1dfb4:	202b883a 	mov	r21,r4
   1dfb8:	90803726 	beq	r18,r2,1e098 <__divdf3+0x134>
   1dfbc:	80800434 	orhi	r2,r16,16
   1dfc0:	100490fa 	slli	r2,r2,3
   1dfc4:	2020d77a 	srli	r16,r4,29
   1dfc8:	202a90fa 	slli	r21,r4,3
   1dfcc:	94bf0044 	addi	r18,r18,-1023
   1dfd0:	80a0b03a 	or	r16,r16,r2
   1dfd4:	0013883a 	mov	r9,zero
   1dfd8:	000b883a 	mov	r5,zero
   1dfdc:	3806d53a 	srli	r3,r7,20
   1dfe0:	382ed7fa 	srli	r23,r7,31
   1dfe4:	04400434 	movhi	r17,16
   1dfe8:	8c7fffc4 	addi	r17,r17,-1
   1dfec:	18c1ffcc 	andi	r3,r3,2047
   1dff0:	3029883a 	mov	r20,r6
   1dff4:	3c62703a 	and	r17,r7,r17
   1dff8:	bf003fcc 	andi	fp,r23,255
   1dffc:	18006e26 	beq	r3,zero,1e1b8 <__divdf3+0x254>
   1e000:	0081ffc4 	movi	r2,2047
   1e004:	18806626 	beq	r3,r2,1e1a0 <__divdf3+0x23c>
   1e008:	88800434 	orhi	r2,r17,16
   1e00c:	100490fa 	slli	r2,r2,3
   1e010:	3022d77a 	srli	r17,r6,29
   1e014:	302890fa 	slli	r20,r6,3
   1e018:	18ff0044 	addi	r3,r3,-1023
   1e01c:	88a2b03a 	or	r17,r17,r2
   1e020:	000f883a 	mov	r7,zero
   1e024:	b5e6f03a 	xor	r19,r22,r23
   1e028:	3a4cb03a 	or	r6,r7,r9
   1e02c:	008003c4 	movi	r2,15
   1e030:	9809883a 	mov	r4,r19
   1e034:	90c7c83a 	sub	r3,r18,r3
   1e038:	9cc03fcc 	andi	r19,r19,255
   1e03c:	11809636 	bltu	r2,r6,1e298 <__divdf3+0x334>
   1e040:	300c90ba 	slli	r6,r6,2
   1e044:	008000b4 	movhi	r2,2
   1e048:	10b81604 	addi	r2,r2,-8104
   1e04c:	308d883a 	add	r6,r6,r2
   1e050:	30800017 	ldw	r2,0(r6)
   1e054:	1000683a 	jmp	r2
   1e058:	0001e298 	cmpnei	zero,zero,1930
   1e05c:	0001e0d0 	cmplti	zero,zero,1923
   1e060:	0001e288 	cmpgei	zero,zero,1930
   1e064:	0001e0c4 	movi	zero,1923
   1e068:	0001e288 	cmpgei	zero,zero,1930
   1e06c:	0001e25c 	xori	zero,zero,1929
   1e070:	0001e288 	cmpgei	zero,zero,1930
   1e074:	0001e0c4 	movi	zero,1923
   1e078:	0001e0d0 	cmplti	zero,zero,1923
   1e07c:	0001e0d0 	cmplti	zero,zero,1923
   1e080:	0001e25c 	xori	zero,zero,1929
   1e084:	0001e0c4 	movi	zero,1923
   1e088:	0001e0b4 	movhi	zero,1922
   1e08c:	0001e0b4 	movhi	zero,1922
   1e090:	0001e0b4 	movhi	zero,1922
   1e094:	0001e620 	cmpeqi	zero,zero,1944
   1e098:	2404b03a 	or	r2,r4,r16
   1e09c:	10006c1e 	bne	r2,zero,1e250 <__divdf3+0x2ec>
   1e0a0:	02400204 	movi	r9,8
   1e0a4:	0021883a 	mov	r16,zero
   1e0a8:	002b883a 	mov	r21,zero
   1e0ac:	01400084 	movi	r5,2
   1e0b0:	003fca06 	br	1dfdc <__alt_data_end+0xfc01dfdc>
   1e0b4:	8023883a 	mov	r17,r16
   1e0b8:	a829883a 	mov	r20,r21
   1e0bc:	4039883a 	mov	fp,r8
   1e0c0:	280f883a 	mov	r7,r5
   1e0c4:	00800084 	movi	r2,2
   1e0c8:	3881601e 	bne	r7,r2,1e64c <__divdf3+0x6e8>
   1e0cc:	e027883a 	mov	r19,fp
   1e0d0:	9900004c 	andi	r4,r19,1
   1e0d4:	0081ffc4 	movi	r2,2047
   1e0d8:	0021883a 	mov	r16,zero
   1e0dc:	002b883a 	mov	r21,zero
   1e0e0:	1004953a 	slli	r2,r2,20
   1e0e4:	20c03fcc 	andi	r3,r4,255
   1e0e8:	01400434 	movhi	r5,16
   1e0ec:	297fffc4 	addi	r5,r5,-1
   1e0f0:	180697fa 	slli	r3,r3,31
   1e0f4:	8160703a 	and	r16,r16,r5
   1e0f8:	80a0b03a 	or	r16,r16,r2
   1e0fc:	80c6b03a 	or	r3,r16,r3
   1e100:	a805883a 	mov	r2,r21
   1e104:	dfc00f17 	ldw	ra,60(sp)
   1e108:	df000e17 	ldw	fp,56(sp)
   1e10c:	ddc00d17 	ldw	r23,52(sp)
   1e110:	dd800c17 	ldw	r22,48(sp)
   1e114:	dd400b17 	ldw	r21,44(sp)
   1e118:	dd000a17 	ldw	r20,40(sp)
   1e11c:	dcc00917 	ldw	r19,36(sp)
   1e120:	dc800817 	ldw	r18,32(sp)
   1e124:	dc400717 	ldw	r17,28(sp)
   1e128:	dc000617 	ldw	r16,24(sp)
   1e12c:	dec01004 	addi	sp,sp,64
   1e130:	f800283a 	ret
   1e134:	2404b03a 	or	r2,r4,r16
   1e138:	2023883a 	mov	r17,r4
   1e13c:	10003f26 	beq	r2,zero,1e23c <__divdf3+0x2d8>
   1e140:	80015e26 	beq	r16,zero,1e6bc <__divdf3+0x758>
   1e144:	8009883a 	mov	r4,r16
   1e148:	d9800215 	stw	r6,8(sp)
   1e14c:	d9c00515 	stw	r7,20(sp)
   1e150:	da000415 	stw	r8,16(sp)
   1e154:	000f3840 	call	f384 <__clzsi2>
   1e158:	d9800217 	ldw	r6,8(sp)
   1e15c:	d9c00517 	ldw	r7,20(sp)
   1e160:	da000417 	ldw	r8,16(sp)
   1e164:	113ffd44 	addi	r4,r2,-11
   1e168:	00c00704 	movi	r3,28
   1e16c:	19014f16 	blt	r3,r4,1e6ac <__divdf3+0x748>
   1e170:	00c00744 	movi	r3,29
   1e174:	157ffe04 	addi	r21,r2,-8
   1e178:	1907c83a 	sub	r3,r3,r4
   1e17c:	8560983a 	sll	r16,r16,r21
   1e180:	88c6d83a 	srl	r3,r17,r3
   1e184:	8d6a983a 	sll	r21,r17,r21
   1e188:	1c20b03a 	or	r16,r3,r16
   1e18c:	1080fcc4 	addi	r2,r2,1011
   1e190:	00a5c83a 	sub	r18,zero,r2
   1e194:	0013883a 	mov	r9,zero
   1e198:	000b883a 	mov	r5,zero
   1e19c:	003f8f06 	br	1dfdc <__alt_data_end+0xfc01dfdc>
   1e1a0:	3444b03a 	or	r2,r6,r17
   1e1a4:	1000231e 	bne	r2,zero,1e234 <__divdf3+0x2d0>
   1e1a8:	0023883a 	mov	r17,zero
   1e1ac:	0029883a 	mov	r20,zero
   1e1b0:	01c00084 	movi	r7,2
   1e1b4:	003f9b06 	br	1e024 <__alt_data_end+0xfc01e024>
   1e1b8:	3444b03a 	or	r2,r6,r17
   1e1bc:	10001926 	beq	r2,zero,1e224 <__divdf3+0x2c0>
   1e1c0:	88014b26 	beq	r17,zero,1e6f0 <__divdf3+0x78c>
   1e1c4:	8809883a 	mov	r4,r17
   1e1c8:	d9400115 	stw	r5,4(sp)
   1e1cc:	d9800215 	stw	r6,8(sp)
   1e1d0:	da000415 	stw	r8,16(sp)
   1e1d4:	da400315 	stw	r9,12(sp)
   1e1d8:	000f3840 	call	f384 <__clzsi2>
   1e1dc:	d9400117 	ldw	r5,4(sp)
   1e1e0:	d9800217 	ldw	r6,8(sp)
   1e1e4:	da000417 	ldw	r8,16(sp)
   1e1e8:	da400317 	ldw	r9,12(sp)
   1e1ec:	113ffd44 	addi	r4,r2,-11
   1e1f0:	00c00704 	movi	r3,28
   1e1f4:	19013a16 	blt	r3,r4,1e6e0 <__divdf3+0x77c>
   1e1f8:	00c00744 	movi	r3,29
   1e1fc:	153ffe04 	addi	r20,r2,-8
   1e200:	1907c83a 	sub	r3,r3,r4
   1e204:	8d22983a 	sll	r17,r17,r20
   1e208:	30c6d83a 	srl	r3,r6,r3
   1e20c:	3528983a 	sll	r20,r6,r20
   1e210:	1c62b03a 	or	r17,r3,r17
   1e214:	1080fcc4 	addi	r2,r2,1011
   1e218:	0087c83a 	sub	r3,zero,r2
   1e21c:	000f883a 	mov	r7,zero
   1e220:	003f8006 	br	1e024 <__alt_data_end+0xfc01e024>
   1e224:	0023883a 	mov	r17,zero
   1e228:	0029883a 	mov	r20,zero
   1e22c:	01c00044 	movi	r7,1
   1e230:	003f7c06 	br	1e024 <__alt_data_end+0xfc01e024>
   1e234:	01c000c4 	movi	r7,3
   1e238:	003f7a06 	br	1e024 <__alt_data_end+0xfc01e024>
   1e23c:	02400104 	movi	r9,4
   1e240:	0021883a 	mov	r16,zero
   1e244:	002b883a 	mov	r21,zero
   1e248:	01400044 	movi	r5,1
   1e24c:	003f6306 	br	1dfdc <__alt_data_end+0xfc01dfdc>
   1e250:	02400304 	movi	r9,12
   1e254:	014000c4 	movi	r5,3
   1e258:	003f6006 	br	1dfdc <__alt_data_end+0xfc01dfdc>
   1e25c:	04000434 	movhi	r16,16
   1e260:	0009883a 	mov	r4,zero
   1e264:	843fffc4 	addi	r16,r16,-1
   1e268:	057fffc4 	movi	r21,-1
   1e26c:	0081ffc4 	movi	r2,2047
   1e270:	003f9b06 	br	1e0e0 <__alt_data_end+0xfc01e0e0>
   1e274:	00c00044 	movi	r3,1
   1e278:	1887c83a 	sub	r3,r3,r2
   1e27c:	01000e04 	movi	r4,56
   1e280:	20c1530e 	bge	r4,r3,1e7d0 <__divdf3+0x86c>
   1e284:	9900004c 	andi	r4,r19,1
   1e288:	0005883a 	mov	r2,zero
   1e28c:	0021883a 	mov	r16,zero
   1e290:	002b883a 	mov	r21,zero
   1e294:	003f9206 	br	1e0e0 <__alt_data_end+0xfc01e0e0>
   1e298:	8c012e36 	bltu	r17,r16,1e754 <__divdf3+0x7f0>
   1e29c:	84412c26 	beq	r16,r17,1e750 <__divdf3+0x7ec>
   1e2a0:	a82f883a 	mov	r23,r21
   1e2a4:	18ffffc4 	addi	r3,r3,-1
   1e2a8:	002b883a 	mov	r21,zero
   1e2ac:	a004d63a 	srli	r2,r20,24
   1e2b0:	8822923a 	slli	r17,r17,8
   1e2b4:	a028923a 	slli	r20,r20,8
   1e2b8:	8009883a 	mov	r4,r16
   1e2bc:	88acb03a 	or	r22,r17,r2
   1e2c0:	dd000015 	stw	r20,0(sp)
   1e2c4:	b028d43a 	srli	r20,r22,16
   1e2c8:	d8c00215 	stw	r3,8(sp)
   1e2cc:	b4bfffcc 	andi	r18,r22,65535
   1e2d0:	a00b883a 	mov	r5,r20
   1e2d4:	000d8240 	call	d824 <__udivsi3>
   1e2d8:	100b883a 	mov	r5,r2
   1e2dc:	9009883a 	mov	r4,r18
   1e2e0:	1023883a 	mov	r17,r2
   1e2e4:	000d8e00 	call	d8e0 <__mulsi3>
   1e2e8:	8009883a 	mov	r4,r16
   1e2ec:	a00b883a 	mov	r5,r20
   1e2f0:	1039883a 	mov	fp,r2
   1e2f4:	000d8880 	call	d888 <__umodsi3>
   1e2f8:	1004943a 	slli	r2,r2,16
   1e2fc:	b808d43a 	srli	r4,r23,16
   1e300:	d8c00217 	ldw	r3,8(sp)
   1e304:	2084b03a 	or	r2,r4,r2
   1e308:	1700062e 	bgeu	r2,fp,1e324 <__divdf3+0x3c0>
   1e30c:	1585883a 	add	r2,r2,r22
   1e310:	893fffc4 	addi	r4,r17,-1
   1e314:	15811d36 	bltu	r2,r22,1e78c <__divdf3+0x828>
   1e318:	17011c2e 	bgeu	r2,fp,1e78c <__divdf3+0x828>
   1e31c:	8c7fff84 	addi	r17,r17,-2
   1e320:	1585883a 	add	r2,r2,r22
   1e324:	1739c83a 	sub	fp,r2,fp
   1e328:	a00b883a 	mov	r5,r20
   1e32c:	e009883a 	mov	r4,fp
   1e330:	d8c00215 	stw	r3,8(sp)
   1e334:	000d8240 	call	d824 <__udivsi3>
   1e338:	100b883a 	mov	r5,r2
   1e33c:	9009883a 	mov	r4,r18
   1e340:	1021883a 	mov	r16,r2
   1e344:	000d8e00 	call	d8e0 <__mulsi3>
   1e348:	a00b883a 	mov	r5,r20
   1e34c:	e009883a 	mov	r4,fp
   1e350:	d8800415 	stw	r2,16(sp)
   1e354:	000d8880 	call	d888 <__umodsi3>
   1e358:	1004943a 	slli	r2,r2,16
   1e35c:	da000417 	ldw	r8,16(sp)
   1e360:	bdffffcc 	andi	r23,r23,65535
   1e364:	b884b03a 	or	r2,r23,r2
   1e368:	d8c00217 	ldw	r3,8(sp)
   1e36c:	1200062e 	bgeu	r2,r8,1e388 <__divdf3+0x424>
   1e370:	1585883a 	add	r2,r2,r22
   1e374:	813fffc4 	addi	r4,r16,-1
   1e378:	15810236 	bltu	r2,r22,1e784 <__divdf3+0x820>
   1e37c:	1201012e 	bgeu	r2,r8,1e784 <__divdf3+0x820>
   1e380:	843fff84 	addi	r16,r16,-2
   1e384:	1585883a 	add	r2,r2,r22
   1e388:	8822943a 	slli	r17,r17,16
   1e38c:	d9800017 	ldw	r6,0(sp)
   1e390:	1211c83a 	sub	r8,r2,r8
   1e394:	8c22b03a 	or	r17,r17,r16
   1e398:	373fffcc 	andi	fp,r6,65535
   1e39c:	8abfffcc 	andi	r10,r17,65535
   1e3a0:	8820d43a 	srli	r16,r17,16
   1e3a4:	5009883a 	mov	r4,r10
   1e3a8:	e00b883a 	mov	r5,fp
   1e3ac:	302ed43a 	srli	r23,r6,16
   1e3b0:	d8c00215 	stw	r3,8(sp)
   1e3b4:	da000415 	stw	r8,16(sp)
   1e3b8:	da800115 	stw	r10,4(sp)
   1e3bc:	000d8e00 	call	d8e0 <__mulsi3>
   1e3c0:	800b883a 	mov	r5,r16
   1e3c4:	e009883a 	mov	r4,fp
   1e3c8:	d8800515 	stw	r2,20(sp)
   1e3cc:	000d8e00 	call	d8e0 <__mulsi3>
   1e3d0:	8009883a 	mov	r4,r16
   1e3d4:	b80b883a 	mov	r5,r23
   1e3d8:	d8800315 	stw	r2,12(sp)
   1e3dc:	000d8e00 	call	d8e0 <__mulsi3>
   1e3e0:	da800117 	ldw	r10,4(sp)
   1e3e4:	b80b883a 	mov	r5,r23
   1e3e8:	1021883a 	mov	r16,r2
   1e3ec:	5009883a 	mov	r4,r10
   1e3f0:	000d8e00 	call	d8e0 <__mulsi3>
   1e3f4:	d9c00517 	ldw	r7,20(sp)
   1e3f8:	da400317 	ldw	r9,12(sp)
   1e3fc:	d8c00217 	ldw	r3,8(sp)
   1e400:	3808d43a 	srli	r4,r7,16
   1e404:	1245883a 	add	r2,r2,r9
   1e408:	da000417 	ldw	r8,16(sp)
   1e40c:	2085883a 	add	r2,r4,r2
   1e410:	1240022e 	bgeu	r2,r9,1e41c <__divdf3+0x4b8>
   1e414:	01000074 	movhi	r4,1
   1e418:	8121883a 	add	r16,r16,r4
   1e41c:	1008d43a 	srli	r4,r2,16
   1e420:	1004943a 	slli	r2,r2,16
   1e424:	39ffffcc 	andi	r7,r7,65535
   1e428:	2409883a 	add	r4,r4,r16
   1e42c:	11c5883a 	add	r2,r2,r7
   1e430:	4100bb36 	bltu	r8,r4,1e720 <__divdf3+0x7bc>
   1e434:	4100d726 	beq	r8,r4,1e794 <__divdf3+0x830>
   1e438:	4109c83a 	sub	r4,r8,r4
   1e43c:	a8a1c83a 	sub	r16,r21,r2
   1e440:	ac2b803a 	cmpltu	r21,r21,r16
   1e444:	256bc83a 	sub	r21,r4,r21
   1e448:	b540d926 	beq	r22,r21,1e7b0 <__divdf3+0x84c>
   1e44c:	a00b883a 	mov	r5,r20
   1e450:	a809883a 	mov	r4,r21
   1e454:	d8c00215 	stw	r3,8(sp)
   1e458:	000d8240 	call	d824 <__udivsi3>
   1e45c:	100b883a 	mov	r5,r2
   1e460:	9009883a 	mov	r4,r18
   1e464:	d8800515 	stw	r2,20(sp)
   1e468:	000d8e00 	call	d8e0 <__mulsi3>
   1e46c:	a809883a 	mov	r4,r21
   1e470:	a00b883a 	mov	r5,r20
   1e474:	d8800415 	stw	r2,16(sp)
   1e478:	000d8880 	call	d888 <__umodsi3>
   1e47c:	1004943a 	slli	r2,r2,16
   1e480:	8008d43a 	srli	r4,r16,16
   1e484:	da000417 	ldw	r8,16(sp)
   1e488:	d8c00217 	ldw	r3,8(sp)
   1e48c:	2084b03a 	or	r2,r4,r2
   1e490:	d9c00517 	ldw	r7,20(sp)
   1e494:	1200062e 	bgeu	r2,r8,1e4b0 <__divdf3+0x54c>
   1e498:	1585883a 	add	r2,r2,r22
   1e49c:	393fffc4 	addi	r4,r7,-1
   1e4a0:	1580c536 	bltu	r2,r22,1e7b8 <__divdf3+0x854>
   1e4a4:	1200c42e 	bgeu	r2,r8,1e7b8 <__divdf3+0x854>
   1e4a8:	39ffff84 	addi	r7,r7,-2
   1e4ac:	1585883a 	add	r2,r2,r22
   1e4b0:	122bc83a 	sub	r21,r2,r8
   1e4b4:	a00b883a 	mov	r5,r20
   1e4b8:	a809883a 	mov	r4,r21
   1e4bc:	d8c00215 	stw	r3,8(sp)
   1e4c0:	d9c00515 	stw	r7,20(sp)
   1e4c4:	000d8240 	call	d824 <__udivsi3>
   1e4c8:	9009883a 	mov	r4,r18
   1e4cc:	100b883a 	mov	r5,r2
   1e4d0:	d8800415 	stw	r2,16(sp)
   1e4d4:	000d8e00 	call	d8e0 <__mulsi3>
   1e4d8:	a809883a 	mov	r4,r21
   1e4dc:	a00b883a 	mov	r5,r20
   1e4e0:	1025883a 	mov	r18,r2
   1e4e4:	000d8880 	call	d888 <__umodsi3>
   1e4e8:	1004943a 	slli	r2,r2,16
   1e4ec:	813fffcc 	andi	r4,r16,65535
   1e4f0:	d8c00217 	ldw	r3,8(sp)
   1e4f4:	20a0b03a 	or	r16,r4,r2
   1e4f8:	d9c00517 	ldw	r7,20(sp)
   1e4fc:	da000417 	ldw	r8,16(sp)
   1e500:	8480062e 	bgeu	r16,r18,1e51c <__divdf3+0x5b8>
   1e504:	85a1883a 	add	r16,r16,r22
   1e508:	40bfffc4 	addi	r2,r8,-1
   1e50c:	8580ac36 	bltu	r16,r22,1e7c0 <__divdf3+0x85c>
   1e510:	8480ab2e 	bgeu	r16,r18,1e7c0 <__divdf3+0x85c>
   1e514:	423fff84 	addi	r8,r8,-2
   1e518:	85a1883a 	add	r16,r16,r22
   1e51c:	3804943a 	slli	r2,r7,16
   1e520:	84a1c83a 	sub	r16,r16,r18
   1e524:	e009883a 	mov	r4,fp
   1e528:	1228b03a 	or	r20,r2,r8
   1e52c:	a1ffffcc 	andi	r7,r20,65535
   1e530:	a024d43a 	srli	r18,r20,16
   1e534:	380b883a 	mov	r5,r7
   1e538:	d8c00215 	stw	r3,8(sp)
   1e53c:	d9c00515 	stw	r7,20(sp)
   1e540:	000d8e00 	call	d8e0 <__mulsi3>
   1e544:	900b883a 	mov	r5,r18
   1e548:	e009883a 	mov	r4,fp
   1e54c:	102b883a 	mov	r21,r2
   1e550:	000d8e00 	call	d8e0 <__mulsi3>
   1e554:	900b883a 	mov	r5,r18
   1e558:	b809883a 	mov	r4,r23
   1e55c:	1039883a 	mov	fp,r2
   1e560:	000d8e00 	call	d8e0 <__mulsi3>
   1e564:	d9c00517 	ldw	r7,20(sp)
   1e568:	b80b883a 	mov	r5,r23
   1e56c:	1025883a 	mov	r18,r2
   1e570:	3809883a 	mov	r4,r7
   1e574:	000d8e00 	call	d8e0 <__mulsi3>
   1e578:	a808d43a 	srli	r4,r21,16
   1e57c:	1705883a 	add	r2,r2,fp
   1e580:	d8c00217 	ldw	r3,8(sp)
   1e584:	2085883a 	add	r2,r4,r2
   1e588:	1700022e 	bgeu	r2,fp,1e594 <__divdf3+0x630>
   1e58c:	01000074 	movhi	r4,1
   1e590:	9125883a 	add	r18,r18,r4
   1e594:	1008d43a 	srli	r4,r2,16
   1e598:	1004943a 	slli	r2,r2,16
   1e59c:	ad7fffcc 	andi	r21,r21,65535
   1e5a0:	2489883a 	add	r4,r4,r18
   1e5a4:	1545883a 	add	r2,r2,r21
   1e5a8:	81003836 	bltu	r16,r4,1e68c <__divdf3+0x728>
   1e5ac:	81003626 	beq	r16,r4,1e688 <__divdf3+0x724>
   1e5b0:	a5000054 	ori	r20,r20,1
   1e5b4:	1880ffc4 	addi	r2,r3,1023
   1e5b8:	00bf2e0e 	bge	zero,r2,1e274 <__alt_data_end+0xfc01e274>
   1e5bc:	a10001cc 	andi	r4,r20,7
   1e5c0:	20000726 	beq	r4,zero,1e5e0 <__divdf3+0x67c>
   1e5c4:	a10003cc 	andi	r4,r20,15
   1e5c8:	01400104 	movi	r5,4
   1e5cc:	21400426 	beq	r4,r5,1e5e0 <__divdf3+0x67c>
   1e5d0:	a149883a 	add	r4,r20,r5
   1e5d4:	2529803a 	cmpltu	r20,r4,r20
   1e5d8:	8d23883a 	add	r17,r17,r20
   1e5dc:	2029883a 	mov	r20,r4
   1e5e0:	8900402c 	andhi	r4,r17,256
   1e5e4:	20000426 	beq	r4,zero,1e5f8 <__divdf3+0x694>
   1e5e8:	18810004 	addi	r2,r3,1024
   1e5ec:	00ffc034 	movhi	r3,65280
   1e5f0:	18ffffc4 	addi	r3,r3,-1
   1e5f4:	88e2703a 	and	r17,r17,r3
   1e5f8:	00c1ff84 	movi	r3,2046
   1e5fc:	18beb416 	blt	r3,r2,1e0d0 <__alt_data_end+0xfc01e0d0>
   1e600:	a028d0fa 	srli	r20,r20,3
   1e604:	882a977a 	slli	r21,r17,29
   1e608:	8820927a 	slli	r16,r17,9
   1e60c:	1081ffcc 	andi	r2,r2,2047
   1e610:	ad2ab03a 	or	r21,r21,r20
   1e614:	8020d33a 	srli	r16,r16,12
   1e618:	9900004c 	andi	r4,r19,1
   1e61c:	003eb006 	br	1e0e0 <__alt_data_end+0xfc01e0e0>
   1e620:	8080022c 	andhi	r2,r16,8
   1e624:	10001226 	beq	r2,zero,1e670 <__divdf3+0x70c>
   1e628:	8880022c 	andhi	r2,r17,8
   1e62c:	1000101e 	bne	r2,zero,1e670 <__divdf3+0x70c>
   1e630:	00800434 	movhi	r2,16
   1e634:	8c000234 	orhi	r16,r17,8
   1e638:	10bfffc4 	addi	r2,r2,-1
   1e63c:	b809883a 	mov	r4,r23
   1e640:	80a0703a 	and	r16,r16,r2
   1e644:	a02b883a 	mov	r21,r20
   1e648:	003f0806 	br	1e26c <__alt_data_end+0xfc01e26c>
   1e64c:	008000c4 	movi	r2,3
   1e650:	3880b126 	beq	r7,r2,1e918 <__divdf3+0x9b4>
   1e654:	00800044 	movi	r2,1
   1e658:	38805b1e 	bne	r7,r2,1e7c8 <__divdf3+0x864>
   1e65c:	e009883a 	mov	r4,fp
   1e660:	0005883a 	mov	r2,zero
   1e664:	0021883a 	mov	r16,zero
   1e668:	002b883a 	mov	r21,zero
   1e66c:	003e9c06 	br	1e0e0 <__alt_data_end+0xfc01e0e0>
   1e670:	00800434 	movhi	r2,16
   1e674:	84000234 	orhi	r16,r16,8
   1e678:	10bfffc4 	addi	r2,r2,-1
   1e67c:	b009883a 	mov	r4,r22
   1e680:	80a0703a 	and	r16,r16,r2
   1e684:	003ef906 	br	1e26c <__alt_data_end+0xfc01e26c>
   1e688:	103fca26 	beq	r2,zero,1e5b4 <__alt_data_end+0xfc01e5b4>
   1e68c:	b421883a 	add	r16,r22,r16
   1e690:	a17fffc4 	addi	r5,r20,-1
   1e694:	8580422e 	bgeu	r16,r22,1e7a0 <__divdf3+0x83c>
   1e698:	2829883a 	mov	r20,r5
   1e69c:	813fc41e 	bne	r16,r4,1e5b0 <__alt_data_end+0xfc01e5b0>
   1e6a0:	d9800017 	ldw	r6,0(sp)
   1e6a4:	30bfc21e 	bne	r6,r2,1e5b0 <__alt_data_end+0xfc01e5b0>
   1e6a8:	003fc206 	br	1e5b4 <__alt_data_end+0xfc01e5b4>
   1e6ac:	143ff604 	addi	r16,r2,-40
   1e6b0:	8c20983a 	sll	r16,r17,r16
   1e6b4:	002b883a 	mov	r21,zero
   1e6b8:	003eb406 	br	1e18c <__alt_data_end+0xfc01e18c>
   1e6bc:	d9800215 	stw	r6,8(sp)
   1e6c0:	d9c00515 	stw	r7,20(sp)
   1e6c4:	da000415 	stw	r8,16(sp)
   1e6c8:	000f3840 	call	f384 <__clzsi2>
   1e6cc:	10800804 	addi	r2,r2,32
   1e6d0:	da000417 	ldw	r8,16(sp)
   1e6d4:	d9c00517 	ldw	r7,20(sp)
   1e6d8:	d9800217 	ldw	r6,8(sp)
   1e6dc:	003ea106 	br	1e164 <__alt_data_end+0xfc01e164>
   1e6e0:	147ff604 	addi	r17,r2,-40
   1e6e4:	3462983a 	sll	r17,r6,r17
   1e6e8:	0029883a 	mov	r20,zero
   1e6ec:	003ec906 	br	1e214 <__alt_data_end+0xfc01e214>
   1e6f0:	3009883a 	mov	r4,r6
   1e6f4:	d9400115 	stw	r5,4(sp)
   1e6f8:	d9800215 	stw	r6,8(sp)
   1e6fc:	da000415 	stw	r8,16(sp)
   1e700:	da400315 	stw	r9,12(sp)
   1e704:	000f3840 	call	f384 <__clzsi2>
   1e708:	10800804 	addi	r2,r2,32
   1e70c:	da400317 	ldw	r9,12(sp)
   1e710:	da000417 	ldw	r8,16(sp)
   1e714:	d9800217 	ldw	r6,8(sp)
   1e718:	d9400117 	ldw	r5,4(sp)
   1e71c:	003eb306 	br	1e1ec <__alt_data_end+0xfc01e1ec>
   1e720:	d9800017 	ldw	r6,0(sp)
   1e724:	a9ab883a 	add	r21,r21,r6
   1e728:	a98b803a 	cmpltu	r5,r21,r6
   1e72c:	2d8b883a 	add	r5,r5,r22
   1e730:	2a11883a 	add	r8,r5,r8
   1e734:	897fffc4 	addi	r5,r17,-1
   1e738:	b2000c2e 	bgeu	r22,r8,1e76c <__divdf3+0x808>
   1e73c:	41003f36 	bltu	r8,r4,1e83c <__divdf3+0x8d8>
   1e740:	22006c26 	beq	r4,r8,1e8f4 <__divdf3+0x990>
   1e744:	4109c83a 	sub	r4,r8,r4
   1e748:	2823883a 	mov	r17,r5
   1e74c:	003f3b06 	br	1e43c <__alt_data_end+0xfc01e43c>
   1e750:	ad3ed336 	bltu	r21,r20,1e2a0 <__alt_data_end+0xfc01e2a0>
   1e754:	a804d07a 	srli	r2,r21,1
   1e758:	802e97fa 	slli	r23,r16,31
   1e75c:	a82a97fa 	slli	r21,r21,31
   1e760:	8020d07a 	srli	r16,r16,1
   1e764:	b8aeb03a 	or	r23,r23,r2
   1e768:	003ed006 	br	1e2ac <__alt_data_end+0xfc01e2ac>
   1e76c:	b23ff51e 	bne	r22,r8,1e744 <__alt_data_end+0xfc01e744>
   1e770:	d9800017 	ldw	r6,0(sp)
   1e774:	a9bff12e 	bgeu	r21,r6,1e73c <__alt_data_end+0xfc01e73c>
   1e778:	b109c83a 	sub	r4,r22,r4
   1e77c:	2823883a 	mov	r17,r5
   1e780:	003f2e06 	br	1e43c <__alt_data_end+0xfc01e43c>
   1e784:	2021883a 	mov	r16,r4
   1e788:	003eff06 	br	1e388 <__alt_data_end+0xfc01e388>
   1e78c:	2023883a 	mov	r17,r4
   1e790:	003ee406 	br	1e324 <__alt_data_end+0xfc01e324>
   1e794:	a8bfe236 	bltu	r21,r2,1e720 <__alt_data_end+0xfc01e720>
   1e798:	0009883a 	mov	r4,zero
   1e79c:	003f2706 	br	1e43c <__alt_data_end+0xfc01e43c>
   1e7a0:	81002d36 	bltu	r16,r4,1e858 <__divdf3+0x8f4>
   1e7a4:	24005626 	beq	r4,r16,1e900 <__divdf3+0x99c>
   1e7a8:	2829883a 	mov	r20,r5
   1e7ac:	003f8006 	br	1e5b0 <__alt_data_end+0xfc01e5b0>
   1e7b0:	053fffc4 	movi	r20,-1
   1e7b4:	003f7f06 	br	1e5b4 <__alt_data_end+0xfc01e5b4>
   1e7b8:	200f883a 	mov	r7,r4
   1e7bc:	003f3c06 	br	1e4b0 <__alt_data_end+0xfc01e4b0>
   1e7c0:	1011883a 	mov	r8,r2
   1e7c4:	003f5506 	br	1e51c <__alt_data_end+0xfc01e51c>
   1e7c8:	e027883a 	mov	r19,fp
   1e7cc:	003f7906 	br	1e5b4 <__alt_data_end+0xfc01e5b4>
   1e7d0:	010007c4 	movi	r4,31
   1e7d4:	20c02816 	blt	r4,r3,1e878 <__divdf3+0x914>
   1e7d8:	00800804 	movi	r2,32
   1e7dc:	10c5c83a 	sub	r2,r2,r3
   1e7e0:	888a983a 	sll	r5,r17,r2
   1e7e4:	a0c8d83a 	srl	r4,r20,r3
   1e7e8:	a084983a 	sll	r2,r20,r2
   1e7ec:	88e2d83a 	srl	r17,r17,r3
   1e7f0:	2906b03a 	or	r3,r5,r4
   1e7f4:	1004c03a 	cmpne	r2,r2,zero
   1e7f8:	1886b03a 	or	r3,r3,r2
   1e7fc:	188001cc 	andi	r2,r3,7
   1e800:	10000726 	beq	r2,zero,1e820 <__divdf3+0x8bc>
   1e804:	188003cc 	andi	r2,r3,15
   1e808:	01000104 	movi	r4,4
   1e80c:	11000426 	beq	r2,r4,1e820 <__divdf3+0x8bc>
   1e810:	1805883a 	mov	r2,r3
   1e814:	10c00104 	addi	r3,r2,4
   1e818:	1885803a 	cmpltu	r2,r3,r2
   1e81c:	88a3883a 	add	r17,r17,r2
   1e820:	8880202c 	andhi	r2,r17,128
   1e824:	10002926 	beq	r2,zero,1e8cc <__divdf3+0x968>
   1e828:	9900004c 	andi	r4,r19,1
   1e82c:	00800044 	movi	r2,1
   1e830:	0021883a 	mov	r16,zero
   1e834:	002b883a 	mov	r21,zero
   1e838:	003e2906 	br	1e0e0 <__alt_data_end+0xfc01e0e0>
   1e83c:	d9800017 	ldw	r6,0(sp)
   1e840:	8c7fff84 	addi	r17,r17,-2
   1e844:	a9ab883a 	add	r21,r21,r6
   1e848:	a98b803a 	cmpltu	r5,r21,r6
   1e84c:	2d8b883a 	add	r5,r5,r22
   1e850:	2a11883a 	add	r8,r5,r8
   1e854:	003ef806 	br	1e438 <__alt_data_end+0xfc01e438>
   1e858:	d9800017 	ldw	r6,0(sp)
   1e85c:	318f883a 	add	r7,r6,r6
   1e860:	398b803a 	cmpltu	r5,r7,r6
   1e864:	2d8d883a 	add	r6,r5,r22
   1e868:	81a1883a 	add	r16,r16,r6
   1e86c:	a17fff84 	addi	r5,r20,-2
   1e870:	d9c00015 	stw	r7,0(sp)
   1e874:	003f8806 	br	1e698 <__alt_data_end+0xfc01e698>
   1e878:	013ff844 	movi	r4,-31
   1e87c:	2085c83a 	sub	r2,r4,r2
   1e880:	8888d83a 	srl	r4,r17,r2
   1e884:	00800804 	movi	r2,32
   1e888:	18802126 	beq	r3,r2,1e910 <__divdf3+0x9ac>
   1e88c:	04001004 	movi	r16,64
   1e890:	80c7c83a 	sub	r3,r16,r3
   1e894:	88e0983a 	sll	r16,r17,r3
   1e898:	8504b03a 	or	r2,r16,r20
   1e89c:	1004c03a 	cmpne	r2,r2,zero
   1e8a0:	2084b03a 	or	r2,r4,r2
   1e8a4:	144001cc 	andi	r17,r2,7
   1e8a8:	88000d1e 	bne	r17,zero,1e8e0 <__divdf3+0x97c>
   1e8ac:	0021883a 	mov	r16,zero
   1e8b0:	102ad0fa 	srli	r21,r2,3
   1e8b4:	9900004c 	andi	r4,r19,1
   1e8b8:	0005883a 	mov	r2,zero
   1e8bc:	ac6ab03a 	or	r21,r21,r17
   1e8c0:	003e0706 	br	1e0e0 <__alt_data_end+0xfc01e0e0>
   1e8c4:	1007883a 	mov	r3,r2
   1e8c8:	0023883a 	mov	r17,zero
   1e8cc:	8820927a 	slli	r16,r17,9
   1e8d0:	1805883a 	mov	r2,r3
   1e8d4:	8822977a 	slli	r17,r17,29
   1e8d8:	8020d33a 	srli	r16,r16,12
   1e8dc:	003ff406 	br	1e8b0 <__alt_data_end+0xfc01e8b0>
   1e8e0:	10c003cc 	andi	r3,r2,15
   1e8e4:	01000104 	movi	r4,4
   1e8e8:	193ff626 	beq	r3,r4,1e8c4 <__alt_data_end+0xfc01e8c4>
   1e8ec:	0023883a 	mov	r17,zero
   1e8f0:	003fc806 	br	1e814 <__alt_data_end+0xfc01e814>
   1e8f4:	a8bfd136 	bltu	r21,r2,1e83c <__alt_data_end+0xfc01e83c>
   1e8f8:	2823883a 	mov	r17,r5
   1e8fc:	003fa606 	br	1e798 <__alt_data_end+0xfc01e798>
   1e900:	d9800017 	ldw	r6,0(sp)
   1e904:	30bfd436 	bltu	r6,r2,1e858 <__alt_data_end+0xfc01e858>
   1e908:	2829883a 	mov	r20,r5
   1e90c:	003f6406 	br	1e6a0 <__alt_data_end+0xfc01e6a0>
   1e910:	0021883a 	mov	r16,zero
   1e914:	003fe006 	br	1e898 <__alt_data_end+0xfc01e898>
   1e918:	00800434 	movhi	r2,16
   1e91c:	8c000234 	orhi	r16,r17,8
   1e920:	10bfffc4 	addi	r2,r2,-1
   1e924:	e009883a 	mov	r4,fp
   1e928:	80a0703a 	and	r16,r16,r2
   1e92c:	a02b883a 	mov	r21,r20
   1e930:	003e4e06 	br	1e26c <__alt_data_end+0xfc01e26c>

0001e934 <__eqdf2>:
   1e934:	2804d53a 	srli	r2,r5,20
   1e938:	3806d53a 	srli	r3,r7,20
   1e93c:	02000434 	movhi	r8,16
   1e940:	423fffc4 	addi	r8,r8,-1
   1e944:	1081ffcc 	andi	r2,r2,2047
   1e948:	0281ffc4 	movi	r10,2047
   1e94c:	2a12703a 	and	r9,r5,r8
   1e950:	18c1ffcc 	andi	r3,r3,2047
   1e954:	3a10703a 	and	r8,r7,r8
   1e958:	280ad7fa 	srli	r5,r5,31
   1e95c:	380ed7fa 	srli	r7,r7,31
   1e960:	12801026 	beq	r2,r10,1e9a4 <__eqdf2+0x70>
   1e964:	0281ffc4 	movi	r10,2047
   1e968:	1a800a26 	beq	r3,r10,1e994 <__eqdf2+0x60>
   1e96c:	10c00226 	beq	r2,r3,1e978 <__eqdf2+0x44>
   1e970:	00800044 	movi	r2,1
   1e974:	f800283a 	ret
   1e978:	4a3ffd1e 	bne	r9,r8,1e970 <__alt_data_end+0xfc01e970>
   1e97c:	21bffc1e 	bne	r4,r6,1e970 <__alt_data_end+0xfc01e970>
   1e980:	29c00c26 	beq	r5,r7,1e9b4 <__eqdf2+0x80>
   1e984:	103ffa1e 	bne	r2,zero,1e970 <__alt_data_end+0xfc01e970>
   1e988:	2244b03a 	or	r2,r4,r9
   1e98c:	1004c03a 	cmpne	r2,r2,zero
   1e990:	f800283a 	ret
   1e994:	3214b03a 	or	r10,r6,r8
   1e998:	503ff426 	beq	r10,zero,1e96c <__alt_data_end+0xfc01e96c>
   1e99c:	00800044 	movi	r2,1
   1e9a0:	f800283a 	ret
   1e9a4:	2254b03a 	or	r10,r4,r9
   1e9a8:	503fee26 	beq	r10,zero,1e964 <__alt_data_end+0xfc01e964>
   1e9ac:	00800044 	movi	r2,1
   1e9b0:	f800283a 	ret
   1e9b4:	0005883a 	mov	r2,zero
   1e9b8:	f800283a 	ret

0001e9bc <__gedf2>:
   1e9bc:	2804d53a 	srli	r2,r5,20
   1e9c0:	3806d53a 	srli	r3,r7,20
   1e9c4:	02000434 	movhi	r8,16
   1e9c8:	423fffc4 	addi	r8,r8,-1
   1e9cc:	1081ffcc 	andi	r2,r2,2047
   1e9d0:	0241ffc4 	movi	r9,2047
   1e9d4:	2a14703a 	and	r10,r5,r8
   1e9d8:	18c1ffcc 	andi	r3,r3,2047
   1e9dc:	3a10703a 	and	r8,r7,r8
   1e9e0:	280ad7fa 	srli	r5,r5,31
   1e9e4:	380ed7fa 	srli	r7,r7,31
   1e9e8:	12401d26 	beq	r2,r9,1ea60 <__gedf2+0xa4>
   1e9ec:	0241ffc4 	movi	r9,2047
   1e9f0:	1a401226 	beq	r3,r9,1ea3c <__gedf2+0x80>
   1e9f4:	1000081e 	bne	r2,zero,1ea18 <__gedf2+0x5c>
   1e9f8:	2296b03a 	or	r11,r4,r10
   1e9fc:	5813003a 	cmpeq	r9,r11,zero
   1ea00:	1800091e 	bne	r3,zero,1ea28 <__gedf2+0x6c>
   1ea04:	3218b03a 	or	r12,r6,r8
   1ea08:	6000071e 	bne	r12,zero,1ea28 <__gedf2+0x6c>
   1ea0c:	0005883a 	mov	r2,zero
   1ea10:	5800101e 	bne	r11,zero,1ea54 <__gedf2+0x98>
   1ea14:	f800283a 	ret
   1ea18:	18000c1e 	bne	r3,zero,1ea4c <__gedf2+0x90>
   1ea1c:	3212b03a 	or	r9,r6,r8
   1ea20:	48000c26 	beq	r9,zero,1ea54 <__gedf2+0x98>
   1ea24:	0013883a 	mov	r9,zero
   1ea28:	39c03fcc 	andi	r7,r7,255
   1ea2c:	48000826 	beq	r9,zero,1ea50 <__gedf2+0x94>
   1ea30:	38000926 	beq	r7,zero,1ea58 <__gedf2+0x9c>
   1ea34:	00800044 	movi	r2,1
   1ea38:	f800283a 	ret
   1ea3c:	3212b03a 	or	r9,r6,r8
   1ea40:	483fec26 	beq	r9,zero,1e9f4 <__alt_data_end+0xfc01e9f4>
   1ea44:	00bfff84 	movi	r2,-2
   1ea48:	f800283a 	ret
   1ea4c:	39c03fcc 	andi	r7,r7,255
   1ea50:	29c00626 	beq	r5,r7,1ea6c <__gedf2+0xb0>
   1ea54:	283ff726 	beq	r5,zero,1ea34 <__alt_data_end+0xfc01ea34>
   1ea58:	00bfffc4 	movi	r2,-1
   1ea5c:	f800283a 	ret
   1ea60:	2292b03a 	or	r9,r4,r10
   1ea64:	483fe126 	beq	r9,zero,1e9ec <__alt_data_end+0xfc01e9ec>
   1ea68:	003ff606 	br	1ea44 <__alt_data_end+0xfc01ea44>
   1ea6c:	18bff916 	blt	r3,r2,1ea54 <__alt_data_end+0xfc01ea54>
   1ea70:	10c00316 	blt	r2,r3,1ea80 <__gedf2+0xc4>
   1ea74:	42bff736 	bltu	r8,r10,1ea54 <__alt_data_end+0xfc01ea54>
   1ea78:	52000326 	beq	r10,r8,1ea88 <__gedf2+0xcc>
   1ea7c:	5200042e 	bgeu	r10,r8,1ea90 <__gedf2+0xd4>
   1ea80:	283fec1e 	bne	r5,zero,1ea34 <__alt_data_end+0xfc01ea34>
   1ea84:	003ff406 	br	1ea58 <__alt_data_end+0xfc01ea58>
   1ea88:	313ff236 	bltu	r6,r4,1ea54 <__alt_data_end+0xfc01ea54>
   1ea8c:	21bffc36 	bltu	r4,r6,1ea80 <__alt_data_end+0xfc01ea80>
   1ea90:	0005883a 	mov	r2,zero
   1ea94:	f800283a 	ret

0001ea98 <__ledf2>:
   1ea98:	2804d53a 	srli	r2,r5,20
   1ea9c:	3810d53a 	srli	r8,r7,20
   1eaa0:	00c00434 	movhi	r3,16
   1eaa4:	18ffffc4 	addi	r3,r3,-1
   1eaa8:	1081ffcc 	andi	r2,r2,2047
   1eaac:	0241ffc4 	movi	r9,2047
   1eab0:	28d4703a 	and	r10,r5,r3
   1eab4:	4201ffcc 	andi	r8,r8,2047
   1eab8:	38c6703a 	and	r3,r7,r3
   1eabc:	280ad7fa 	srli	r5,r5,31
   1eac0:	380ed7fa 	srli	r7,r7,31
   1eac4:	12401f26 	beq	r2,r9,1eb44 <__ledf2+0xac>
   1eac8:	0241ffc4 	movi	r9,2047
   1eacc:	42401426 	beq	r8,r9,1eb20 <__ledf2+0x88>
   1ead0:	1000091e 	bne	r2,zero,1eaf8 <__ledf2+0x60>
   1ead4:	2296b03a 	or	r11,r4,r10
   1ead8:	5813003a 	cmpeq	r9,r11,zero
   1eadc:	29403fcc 	andi	r5,r5,255
   1eae0:	40000a1e 	bne	r8,zero,1eb0c <__ledf2+0x74>
   1eae4:	30d8b03a 	or	r12,r6,r3
   1eae8:	6000081e 	bne	r12,zero,1eb0c <__ledf2+0x74>
   1eaec:	0005883a 	mov	r2,zero
   1eaf0:	5800111e 	bne	r11,zero,1eb38 <__ledf2+0xa0>
   1eaf4:	f800283a 	ret
   1eaf8:	29403fcc 	andi	r5,r5,255
   1eafc:	40000c1e 	bne	r8,zero,1eb30 <__ledf2+0x98>
   1eb00:	30d2b03a 	or	r9,r6,r3
   1eb04:	48000c26 	beq	r9,zero,1eb38 <__ledf2+0xa0>
   1eb08:	0013883a 	mov	r9,zero
   1eb0c:	39c03fcc 	andi	r7,r7,255
   1eb10:	48000826 	beq	r9,zero,1eb34 <__ledf2+0x9c>
   1eb14:	38001126 	beq	r7,zero,1eb5c <__ledf2+0xc4>
   1eb18:	00800044 	movi	r2,1
   1eb1c:	f800283a 	ret
   1eb20:	30d2b03a 	or	r9,r6,r3
   1eb24:	483fea26 	beq	r9,zero,1ead0 <__alt_data_end+0xfc01ead0>
   1eb28:	00800084 	movi	r2,2
   1eb2c:	f800283a 	ret
   1eb30:	39c03fcc 	andi	r7,r7,255
   1eb34:	39400726 	beq	r7,r5,1eb54 <__ledf2+0xbc>
   1eb38:	2800081e 	bne	r5,zero,1eb5c <__ledf2+0xc4>
   1eb3c:	00800044 	movi	r2,1
   1eb40:	f800283a 	ret
   1eb44:	2292b03a 	or	r9,r4,r10
   1eb48:	483fdf26 	beq	r9,zero,1eac8 <__alt_data_end+0xfc01eac8>
   1eb4c:	00800084 	movi	r2,2
   1eb50:	f800283a 	ret
   1eb54:	4080030e 	bge	r8,r2,1eb64 <__ledf2+0xcc>
   1eb58:	383fef26 	beq	r7,zero,1eb18 <__alt_data_end+0xfc01eb18>
   1eb5c:	00bfffc4 	movi	r2,-1
   1eb60:	f800283a 	ret
   1eb64:	123feb16 	blt	r2,r8,1eb14 <__alt_data_end+0xfc01eb14>
   1eb68:	1abff336 	bltu	r3,r10,1eb38 <__alt_data_end+0xfc01eb38>
   1eb6c:	50c00326 	beq	r10,r3,1eb7c <__ledf2+0xe4>
   1eb70:	50c0042e 	bgeu	r10,r3,1eb84 <__ledf2+0xec>
   1eb74:	283fe81e 	bne	r5,zero,1eb18 <__alt_data_end+0xfc01eb18>
   1eb78:	003ff806 	br	1eb5c <__alt_data_end+0xfc01eb5c>
   1eb7c:	313fee36 	bltu	r6,r4,1eb38 <__alt_data_end+0xfc01eb38>
   1eb80:	21bffc36 	bltu	r4,r6,1eb74 <__alt_data_end+0xfc01eb74>
   1eb84:	0005883a 	mov	r2,zero
   1eb88:	f800283a 	ret

0001eb8c <__muldf3>:
   1eb8c:	deffee04 	addi	sp,sp,-72
   1eb90:	dd000c15 	stw	r20,48(sp)
   1eb94:	2828d53a 	srli	r20,r5,20
   1eb98:	ddc00f15 	stw	r23,60(sp)
   1eb9c:	282ed7fa 	srli	r23,r5,31
   1eba0:	dc000815 	stw	r16,32(sp)
   1eba4:	04000434 	movhi	r16,16
   1eba8:	dcc00b15 	stw	r19,44(sp)
   1ebac:	843fffc4 	addi	r16,r16,-1
   1ebb0:	dfc01115 	stw	ra,68(sp)
   1ebb4:	df001015 	stw	fp,64(sp)
   1ebb8:	dd800e15 	stw	r22,56(sp)
   1ebbc:	dd400d15 	stw	r21,52(sp)
   1ebc0:	dc800a15 	stw	r18,40(sp)
   1ebc4:	dc400915 	stw	r17,36(sp)
   1ebc8:	a501ffcc 	andi	r20,r20,2047
   1ebcc:	2c20703a 	and	r16,r5,r16
   1ebd0:	b827883a 	mov	r19,r23
   1ebd4:	ba403fcc 	andi	r9,r23,255
   1ebd8:	a0006026 	beq	r20,zero,1ed5c <__muldf3+0x1d0>
   1ebdc:	0081ffc4 	movi	r2,2047
   1ebe0:	202d883a 	mov	r22,r4
   1ebe4:	a0803626 	beq	r20,r2,1ecc0 <__muldf3+0x134>
   1ebe8:	84000434 	orhi	r16,r16,16
   1ebec:	200ad77a 	srli	r5,r4,29
   1ebf0:	800490fa 	slli	r2,r16,3
   1ebf4:	202c90fa 	slli	r22,r4,3
   1ebf8:	a53f0044 	addi	r20,r20,-1023
   1ebfc:	28a0b03a 	or	r16,r5,r2
   1ec00:	002b883a 	mov	r21,zero
   1ec04:	000b883a 	mov	r5,zero
   1ec08:	3804d53a 	srli	r2,r7,20
   1ec0c:	3838d7fa 	srli	fp,r7,31
   1ec10:	04400434 	movhi	r17,16
   1ec14:	8c7fffc4 	addi	r17,r17,-1
   1ec18:	1081ffcc 	andi	r2,r2,2047
   1ec1c:	3025883a 	mov	r18,r6
   1ec20:	3c62703a 	and	r17,r7,r17
   1ec24:	e2803fcc 	andi	r10,fp,255
   1ec28:	10006d26 	beq	r2,zero,1ede0 <__muldf3+0x254>
   1ec2c:	00c1ffc4 	movi	r3,2047
   1ec30:	10c06526 	beq	r2,r3,1edc8 <__muldf3+0x23c>
   1ec34:	8c400434 	orhi	r17,r17,16
   1ec38:	300ed77a 	srli	r7,r6,29
   1ec3c:	880690fa 	slli	r3,r17,3
   1ec40:	302490fa 	slli	r18,r6,3
   1ec44:	10bf0044 	addi	r2,r2,-1023
   1ec48:	38e2b03a 	or	r17,r7,r3
   1ec4c:	000f883a 	mov	r7,zero
   1ec50:	a087883a 	add	r3,r20,r2
   1ec54:	010003c4 	movi	r4,15
   1ec58:	3d44b03a 	or	r2,r7,r21
   1ec5c:	e5ccf03a 	xor	r6,fp,r23
   1ec60:	1a000044 	addi	r8,r3,1
   1ec64:	20809b36 	bltu	r4,r2,1eed4 <__muldf3+0x348>
   1ec68:	100490ba 	slli	r2,r2,2
   1ec6c:	010000b4 	movhi	r4,2
   1ec70:	213b2004 	addi	r4,r4,-4992
   1ec74:	1105883a 	add	r2,r2,r4
   1ec78:	10800017 	ldw	r2,0(r2)
   1ec7c:	1000683a 	jmp	r2
   1ec80:	0001eed4 	movui	zero,1979
   1ec84:	0001ece0 	cmpeqi	zero,zero,1971
   1ec88:	0001ece0 	cmpeqi	zero,zero,1971
   1ec8c:	0001ecdc 	xori	zero,zero,1971
   1ec90:	0001eeb0 	cmpltui	zero,zero,1978
   1ec94:	0001eeb0 	cmpltui	zero,zero,1978
   1ec98:	0001ee98 	cmpnei	zero,zero,1978
   1ec9c:	0001ecdc 	xori	zero,zero,1971
   1eca0:	0001eeb0 	cmpltui	zero,zero,1978
   1eca4:	0001ee98 	cmpnei	zero,zero,1978
   1eca8:	0001eeb0 	cmpltui	zero,zero,1978
   1ecac:	0001ecdc 	xori	zero,zero,1971
   1ecb0:	0001eec0 	call	1eec <_ZN3USB13AttemptConfigEhhhb+0x180>
   1ecb4:	0001eec0 	call	1eec <_ZN3USB13AttemptConfigEhhhb+0x180>
   1ecb8:	0001eec0 	call	1eec <_ZN3USB13AttemptConfigEhhhb+0x180>
   1ecbc:	0001f220 	cmpeqi	zero,zero,1992
   1ecc0:	2404b03a 	or	r2,r4,r16
   1ecc4:	1000711e 	bne	r2,zero,1ee8c <__muldf3+0x300>
   1ecc8:	05400204 	movi	r21,8
   1eccc:	0021883a 	mov	r16,zero
   1ecd0:	002d883a 	mov	r22,zero
   1ecd4:	01400084 	movi	r5,2
   1ecd8:	003fcb06 	br	1ec08 <__alt_data_end+0xfc01ec08>
   1ecdc:	500d883a 	mov	r6,r10
   1ece0:	00800084 	movi	r2,2
   1ece4:	38805926 	beq	r7,r2,1ee4c <__muldf3+0x2c0>
   1ece8:	008000c4 	movi	r2,3
   1ecec:	3881bb26 	beq	r7,r2,1f3dc <__muldf3+0x850>
   1ecf0:	00800044 	movi	r2,1
   1ecf4:	3881961e 	bne	r7,r2,1f350 <__muldf3+0x7c4>
   1ecf8:	3027883a 	mov	r19,r6
   1ecfc:	0005883a 	mov	r2,zero
   1ed00:	0021883a 	mov	r16,zero
   1ed04:	002d883a 	mov	r22,zero
   1ed08:	1004953a 	slli	r2,r2,20
   1ed0c:	98c03fcc 	andi	r3,r19,255
   1ed10:	04400434 	movhi	r17,16
   1ed14:	8c7fffc4 	addi	r17,r17,-1
   1ed18:	180697fa 	slli	r3,r3,31
   1ed1c:	8460703a 	and	r16,r16,r17
   1ed20:	80a0b03a 	or	r16,r16,r2
   1ed24:	80c6b03a 	or	r3,r16,r3
   1ed28:	b005883a 	mov	r2,r22
   1ed2c:	dfc01117 	ldw	ra,68(sp)
   1ed30:	df001017 	ldw	fp,64(sp)
   1ed34:	ddc00f17 	ldw	r23,60(sp)
   1ed38:	dd800e17 	ldw	r22,56(sp)
   1ed3c:	dd400d17 	ldw	r21,52(sp)
   1ed40:	dd000c17 	ldw	r20,48(sp)
   1ed44:	dcc00b17 	ldw	r19,44(sp)
   1ed48:	dc800a17 	ldw	r18,40(sp)
   1ed4c:	dc400917 	ldw	r17,36(sp)
   1ed50:	dc000817 	ldw	r16,32(sp)
   1ed54:	dec01204 	addi	sp,sp,72
   1ed58:	f800283a 	ret
   1ed5c:	2404b03a 	or	r2,r4,r16
   1ed60:	202b883a 	mov	r21,r4
   1ed64:	10004426 	beq	r2,zero,1ee78 <__muldf3+0x2ec>
   1ed68:	80015126 	beq	r16,zero,1f2b0 <__muldf3+0x724>
   1ed6c:	8009883a 	mov	r4,r16
   1ed70:	d9800715 	stw	r6,28(sp)
   1ed74:	d9c00215 	stw	r7,8(sp)
   1ed78:	da400415 	stw	r9,16(sp)
   1ed7c:	000f3840 	call	f384 <__clzsi2>
   1ed80:	d9800717 	ldw	r6,28(sp)
   1ed84:	d9c00217 	ldw	r7,8(sp)
   1ed88:	da400417 	ldw	r9,16(sp)
   1ed8c:	113ffd44 	addi	r4,r2,-11
   1ed90:	00c00704 	movi	r3,28
   1ed94:	19014216 	blt	r3,r4,1f2a0 <__muldf3+0x714>
   1ed98:	00c00744 	movi	r3,29
   1ed9c:	15bffe04 	addi	r22,r2,-8
   1eda0:	1907c83a 	sub	r3,r3,r4
   1eda4:	85a0983a 	sll	r16,r16,r22
   1eda8:	a8c6d83a 	srl	r3,r21,r3
   1edac:	adac983a 	sll	r22,r21,r22
   1edb0:	1c20b03a 	or	r16,r3,r16
   1edb4:	1080fcc4 	addi	r2,r2,1011
   1edb8:	00a9c83a 	sub	r20,zero,r2
   1edbc:	002b883a 	mov	r21,zero
   1edc0:	000b883a 	mov	r5,zero
   1edc4:	003f9006 	br	1ec08 <__alt_data_end+0xfc01ec08>
   1edc8:	3446b03a 	or	r3,r6,r17
   1edcc:	1800281e 	bne	r3,zero,1ee70 <__muldf3+0x2e4>
   1edd0:	0023883a 	mov	r17,zero
   1edd4:	0025883a 	mov	r18,zero
   1edd8:	01c00084 	movi	r7,2
   1eddc:	003f9c06 	br	1ec50 <__alt_data_end+0xfc01ec50>
   1ede0:	3446b03a 	or	r3,r6,r17
   1ede4:	18001e26 	beq	r3,zero,1ee60 <__muldf3+0x2d4>
   1ede8:	88012126 	beq	r17,zero,1f270 <__muldf3+0x6e4>
   1edec:	8809883a 	mov	r4,r17
   1edf0:	d9400215 	stw	r5,8(sp)
   1edf4:	d9800715 	stw	r6,28(sp)
   1edf8:	da400415 	stw	r9,16(sp)
   1edfc:	da800315 	stw	r10,12(sp)
   1ee00:	000f3840 	call	f384 <__clzsi2>
   1ee04:	d9400217 	ldw	r5,8(sp)
   1ee08:	d9800717 	ldw	r6,28(sp)
   1ee0c:	da400417 	ldw	r9,16(sp)
   1ee10:	da800317 	ldw	r10,12(sp)
   1ee14:	113ffd44 	addi	r4,r2,-11
   1ee18:	00c00704 	movi	r3,28
   1ee1c:	19011016 	blt	r3,r4,1f260 <__muldf3+0x6d4>
   1ee20:	00c00744 	movi	r3,29
   1ee24:	14bffe04 	addi	r18,r2,-8
   1ee28:	1907c83a 	sub	r3,r3,r4
   1ee2c:	8ca2983a 	sll	r17,r17,r18
   1ee30:	30c6d83a 	srl	r3,r6,r3
   1ee34:	34a4983a 	sll	r18,r6,r18
   1ee38:	1c62b03a 	or	r17,r3,r17
   1ee3c:	1080fcc4 	addi	r2,r2,1011
   1ee40:	0085c83a 	sub	r2,zero,r2
   1ee44:	000f883a 	mov	r7,zero
   1ee48:	003f8106 	br	1ec50 <__alt_data_end+0xfc01ec50>
   1ee4c:	3027883a 	mov	r19,r6
   1ee50:	0081ffc4 	movi	r2,2047
   1ee54:	0021883a 	mov	r16,zero
   1ee58:	002d883a 	mov	r22,zero
   1ee5c:	003faa06 	br	1ed08 <__alt_data_end+0xfc01ed08>
   1ee60:	0023883a 	mov	r17,zero
   1ee64:	0025883a 	mov	r18,zero
   1ee68:	01c00044 	movi	r7,1
   1ee6c:	003f7806 	br	1ec50 <__alt_data_end+0xfc01ec50>
   1ee70:	01c000c4 	movi	r7,3
   1ee74:	003f7606 	br	1ec50 <__alt_data_end+0xfc01ec50>
   1ee78:	05400104 	movi	r21,4
   1ee7c:	0021883a 	mov	r16,zero
   1ee80:	002d883a 	mov	r22,zero
   1ee84:	01400044 	movi	r5,1
   1ee88:	003f5f06 	br	1ec08 <__alt_data_end+0xfc01ec08>
   1ee8c:	05400304 	movi	r21,12
   1ee90:	014000c4 	movi	r5,3
   1ee94:	003f5c06 	br	1ec08 <__alt_data_end+0xfc01ec08>
   1ee98:	04000434 	movhi	r16,16
   1ee9c:	0027883a 	mov	r19,zero
   1eea0:	843fffc4 	addi	r16,r16,-1
   1eea4:	05bfffc4 	movi	r22,-1
   1eea8:	0081ffc4 	movi	r2,2047
   1eeac:	003f9606 	br	1ed08 <__alt_data_end+0xfc01ed08>
   1eeb0:	8023883a 	mov	r17,r16
   1eeb4:	b025883a 	mov	r18,r22
   1eeb8:	280f883a 	mov	r7,r5
   1eebc:	003f8806 	br	1ece0 <__alt_data_end+0xfc01ece0>
   1eec0:	8023883a 	mov	r17,r16
   1eec4:	b025883a 	mov	r18,r22
   1eec8:	480d883a 	mov	r6,r9
   1eecc:	280f883a 	mov	r7,r5
   1eed0:	003f8306 	br	1ece0 <__alt_data_end+0xfc01ece0>
   1eed4:	b026d43a 	srli	r19,r22,16
   1eed8:	902ed43a 	srli	r23,r18,16
   1eedc:	b5bfffcc 	andi	r22,r22,65535
   1eee0:	94bfffcc 	andi	r18,r18,65535
   1eee4:	b00b883a 	mov	r5,r22
   1eee8:	9009883a 	mov	r4,r18
   1eeec:	d8c00515 	stw	r3,20(sp)
   1eef0:	d9800715 	stw	r6,28(sp)
   1eef4:	da000615 	stw	r8,24(sp)
   1eef8:	000d8e00 	call	d8e0 <__mulsi3>
   1eefc:	980b883a 	mov	r5,r19
   1ef00:	9009883a 	mov	r4,r18
   1ef04:	1029883a 	mov	r20,r2
   1ef08:	000d8e00 	call	d8e0 <__mulsi3>
   1ef0c:	b80b883a 	mov	r5,r23
   1ef10:	9809883a 	mov	r4,r19
   1ef14:	102b883a 	mov	r21,r2
   1ef18:	000d8e00 	call	d8e0 <__mulsi3>
   1ef1c:	b809883a 	mov	r4,r23
   1ef20:	b00b883a 	mov	r5,r22
   1ef24:	1039883a 	mov	fp,r2
   1ef28:	000d8e00 	call	d8e0 <__mulsi3>
   1ef2c:	a008d43a 	srli	r4,r20,16
   1ef30:	1545883a 	add	r2,r2,r21
   1ef34:	d8c00517 	ldw	r3,20(sp)
   1ef38:	2085883a 	add	r2,r4,r2
   1ef3c:	d9800717 	ldw	r6,28(sp)
   1ef40:	da000617 	ldw	r8,24(sp)
   1ef44:	1540022e 	bgeu	r2,r21,1ef50 <__muldf3+0x3c4>
   1ef48:	01000074 	movhi	r4,1
   1ef4c:	e139883a 	add	fp,fp,r4
   1ef50:	100e943a 	slli	r7,r2,16
   1ef54:	1004d43a 	srli	r2,r2,16
   1ef58:	882ad43a 	srli	r21,r17,16
   1ef5c:	a53fffcc 	andi	r20,r20,65535
   1ef60:	8c7fffcc 	andi	r17,r17,65535
   1ef64:	3d29883a 	add	r20,r7,r20
   1ef68:	b00b883a 	mov	r5,r22
   1ef6c:	8809883a 	mov	r4,r17
   1ef70:	d8c00515 	stw	r3,20(sp)
   1ef74:	d9800715 	stw	r6,28(sp)
   1ef78:	da000615 	stw	r8,24(sp)
   1ef7c:	dd000115 	stw	r20,4(sp)
   1ef80:	d8800015 	stw	r2,0(sp)
   1ef84:	000d8e00 	call	d8e0 <__mulsi3>
   1ef88:	980b883a 	mov	r5,r19
   1ef8c:	8809883a 	mov	r4,r17
   1ef90:	d8800215 	stw	r2,8(sp)
   1ef94:	000d8e00 	call	d8e0 <__mulsi3>
   1ef98:	9809883a 	mov	r4,r19
   1ef9c:	a80b883a 	mov	r5,r21
   1efa0:	1029883a 	mov	r20,r2
   1efa4:	000d8e00 	call	d8e0 <__mulsi3>
   1efa8:	b00b883a 	mov	r5,r22
   1efac:	a809883a 	mov	r4,r21
   1efb0:	d8800415 	stw	r2,16(sp)
   1efb4:	000d8e00 	call	d8e0 <__mulsi3>
   1efb8:	d9c00217 	ldw	r7,8(sp)
   1efbc:	1505883a 	add	r2,r2,r20
   1efc0:	d8c00517 	ldw	r3,20(sp)
   1efc4:	3826d43a 	srli	r19,r7,16
   1efc8:	d9800717 	ldw	r6,28(sp)
   1efcc:	da000617 	ldw	r8,24(sp)
   1efd0:	9885883a 	add	r2,r19,r2
   1efd4:	da400417 	ldw	r9,16(sp)
   1efd8:	1500022e 	bgeu	r2,r20,1efe4 <__muldf3+0x458>
   1efdc:	01000074 	movhi	r4,1
   1efe0:	4913883a 	add	r9,r9,r4
   1efe4:	1028d43a 	srli	r20,r2,16
   1efe8:	1004943a 	slli	r2,r2,16
   1efec:	802cd43a 	srli	r22,r16,16
   1eff0:	843fffcc 	andi	r16,r16,65535
   1eff4:	3cffffcc 	andi	r19,r7,65535
   1eff8:	9009883a 	mov	r4,r18
   1effc:	800b883a 	mov	r5,r16
   1f000:	a269883a 	add	r20,r20,r9
   1f004:	d8c00515 	stw	r3,20(sp)
   1f008:	d9800715 	stw	r6,28(sp)
   1f00c:	da000615 	stw	r8,24(sp)
   1f010:	14e7883a 	add	r19,r2,r19
   1f014:	000d8e00 	call	d8e0 <__mulsi3>
   1f018:	9009883a 	mov	r4,r18
   1f01c:	b00b883a 	mov	r5,r22
   1f020:	d8800315 	stw	r2,12(sp)
   1f024:	000d8e00 	call	d8e0 <__mulsi3>
   1f028:	b809883a 	mov	r4,r23
   1f02c:	b00b883a 	mov	r5,r22
   1f030:	d8800215 	stw	r2,8(sp)
   1f034:	000d8e00 	call	d8e0 <__mulsi3>
   1f038:	b80b883a 	mov	r5,r23
   1f03c:	8009883a 	mov	r4,r16
   1f040:	d8800415 	stw	r2,16(sp)
   1f044:	000d8e00 	call	d8e0 <__mulsi3>
   1f048:	da800317 	ldw	r10,12(sp)
   1f04c:	d9c00217 	ldw	r7,8(sp)
   1f050:	d9000017 	ldw	r4,0(sp)
   1f054:	502ed43a 	srli	r23,r10,16
   1f058:	11c5883a 	add	r2,r2,r7
   1f05c:	24e5883a 	add	r18,r4,r19
   1f060:	b885883a 	add	r2,r23,r2
   1f064:	d8c00517 	ldw	r3,20(sp)
   1f068:	d9800717 	ldw	r6,28(sp)
   1f06c:	da000617 	ldw	r8,24(sp)
   1f070:	da400417 	ldw	r9,16(sp)
   1f074:	11c0022e 	bgeu	r2,r7,1f080 <__muldf3+0x4f4>
   1f078:	01000074 	movhi	r4,1
   1f07c:	4913883a 	add	r9,r9,r4
   1f080:	100ed43a 	srli	r7,r2,16
   1f084:	1004943a 	slli	r2,r2,16
   1f088:	55ffffcc 	andi	r23,r10,65535
   1f08c:	3a53883a 	add	r9,r7,r9
   1f090:	8809883a 	mov	r4,r17
   1f094:	800b883a 	mov	r5,r16
   1f098:	d8c00515 	stw	r3,20(sp)
   1f09c:	d9800715 	stw	r6,28(sp)
   1f0a0:	da000615 	stw	r8,24(sp)
   1f0a4:	da400415 	stw	r9,16(sp)
   1f0a8:	15ef883a 	add	r23,r2,r23
   1f0ac:	000d8e00 	call	d8e0 <__mulsi3>
   1f0b0:	8809883a 	mov	r4,r17
   1f0b4:	b00b883a 	mov	r5,r22
   1f0b8:	d8800215 	stw	r2,8(sp)
   1f0bc:	000d8e00 	call	d8e0 <__mulsi3>
   1f0c0:	b00b883a 	mov	r5,r22
   1f0c4:	a809883a 	mov	r4,r21
   1f0c8:	d8800315 	stw	r2,12(sp)
   1f0cc:	000d8e00 	call	d8e0 <__mulsi3>
   1f0d0:	8009883a 	mov	r4,r16
   1f0d4:	a80b883a 	mov	r5,r21
   1f0d8:	1023883a 	mov	r17,r2
   1f0dc:	000d8e00 	call	d8e0 <__mulsi3>
   1f0e0:	d9c00217 	ldw	r7,8(sp)
   1f0e4:	da800317 	ldw	r10,12(sp)
   1f0e8:	d8c00517 	ldw	r3,20(sp)
   1f0ec:	3808d43a 	srli	r4,r7,16
   1f0f0:	1285883a 	add	r2,r2,r10
   1f0f4:	d9800717 	ldw	r6,28(sp)
   1f0f8:	2085883a 	add	r2,r4,r2
   1f0fc:	da000617 	ldw	r8,24(sp)
   1f100:	da400417 	ldw	r9,16(sp)
   1f104:	1280022e 	bgeu	r2,r10,1f110 <__muldf3+0x584>
   1f108:	01000074 	movhi	r4,1
   1f10c:	8923883a 	add	r17,r17,r4
   1f110:	1008943a 	slli	r4,r2,16
   1f114:	39ffffcc 	andi	r7,r7,65535
   1f118:	e4b9883a 	add	fp,fp,r18
   1f11c:	21cf883a 	add	r7,r4,r7
   1f120:	e4e7803a 	cmpltu	r19,fp,r19
   1f124:	3d0f883a 	add	r7,r7,r20
   1f128:	bf39883a 	add	fp,r23,fp
   1f12c:	99c9883a 	add	r4,r19,r7
   1f130:	e5ef803a 	cmpltu	r23,fp,r23
   1f134:	490b883a 	add	r5,r9,r4
   1f138:	1004d43a 	srli	r2,r2,16
   1f13c:	b965883a 	add	r18,r23,r5
   1f140:	24c9803a 	cmpltu	r4,r4,r19
   1f144:	3d29803a 	cmpltu	r20,r7,r20
   1f148:	a128b03a 	or	r20,r20,r4
   1f14c:	95ef803a 	cmpltu	r23,r18,r23
   1f150:	2a53803a 	cmpltu	r9,r5,r9
   1f154:	a0a9883a 	add	r20,r20,r2
   1f158:	4deeb03a 	or	r23,r9,r23
   1f15c:	a5ef883a 	add	r23,r20,r23
   1f160:	bc63883a 	add	r17,r23,r17
   1f164:	e004927a 	slli	r2,fp,9
   1f168:	d9000117 	ldw	r4,4(sp)
   1f16c:	882e927a 	slli	r23,r17,9
   1f170:	9022d5fa 	srli	r17,r18,23
   1f174:	e038d5fa 	srli	fp,fp,23
   1f178:	1104b03a 	or	r2,r2,r4
   1f17c:	9024927a 	slli	r18,r18,9
   1f180:	1004c03a 	cmpne	r2,r2,zero
   1f184:	bc62b03a 	or	r17,r23,r17
   1f188:	1738b03a 	or	fp,r2,fp
   1f18c:	8880402c 	andhi	r2,r17,256
   1f190:	e4a4b03a 	or	r18,fp,r18
   1f194:	10000726 	beq	r2,zero,1f1b4 <__muldf3+0x628>
   1f198:	9006d07a 	srli	r3,r18,1
   1f19c:	880497fa 	slli	r2,r17,31
   1f1a0:	9480004c 	andi	r18,r18,1
   1f1a4:	8822d07a 	srli	r17,r17,1
   1f1a8:	1ca4b03a 	or	r18,r3,r18
   1f1ac:	14a4b03a 	or	r18,r2,r18
   1f1b0:	4007883a 	mov	r3,r8
   1f1b4:	1880ffc4 	addi	r2,r3,1023
   1f1b8:	0080460e 	bge	zero,r2,1f2d4 <__muldf3+0x748>
   1f1bc:	910001cc 	andi	r4,r18,7
   1f1c0:	20000726 	beq	r4,zero,1f1e0 <__muldf3+0x654>
   1f1c4:	910003cc 	andi	r4,r18,15
   1f1c8:	01400104 	movi	r5,4
   1f1cc:	21400426 	beq	r4,r5,1f1e0 <__muldf3+0x654>
   1f1d0:	9149883a 	add	r4,r18,r5
   1f1d4:	24a5803a 	cmpltu	r18,r4,r18
   1f1d8:	8ca3883a 	add	r17,r17,r18
   1f1dc:	2025883a 	mov	r18,r4
   1f1e0:	8900402c 	andhi	r4,r17,256
   1f1e4:	20000426 	beq	r4,zero,1f1f8 <__muldf3+0x66c>
   1f1e8:	18810004 	addi	r2,r3,1024
   1f1ec:	00ffc034 	movhi	r3,65280
   1f1f0:	18ffffc4 	addi	r3,r3,-1
   1f1f4:	88e2703a 	and	r17,r17,r3
   1f1f8:	00c1ff84 	movi	r3,2046
   1f1fc:	18bf1316 	blt	r3,r2,1ee4c <__alt_data_end+0xfc01ee4c>
   1f200:	882c977a 	slli	r22,r17,29
   1f204:	9024d0fa 	srli	r18,r18,3
   1f208:	8822927a 	slli	r17,r17,9
   1f20c:	1081ffcc 	andi	r2,r2,2047
   1f210:	b4acb03a 	or	r22,r22,r18
   1f214:	8820d33a 	srli	r16,r17,12
   1f218:	3027883a 	mov	r19,r6
   1f21c:	003eba06 	br	1ed08 <__alt_data_end+0xfc01ed08>
   1f220:	8080022c 	andhi	r2,r16,8
   1f224:	10000926 	beq	r2,zero,1f24c <__muldf3+0x6c0>
   1f228:	8880022c 	andhi	r2,r17,8
   1f22c:	1000071e 	bne	r2,zero,1f24c <__muldf3+0x6c0>
   1f230:	00800434 	movhi	r2,16
   1f234:	8c000234 	orhi	r16,r17,8
   1f238:	10bfffc4 	addi	r2,r2,-1
   1f23c:	e027883a 	mov	r19,fp
   1f240:	80a0703a 	and	r16,r16,r2
   1f244:	902d883a 	mov	r22,r18
   1f248:	003f1706 	br	1eea8 <__alt_data_end+0xfc01eea8>
   1f24c:	00800434 	movhi	r2,16
   1f250:	84000234 	orhi	r16,r16,8
   1f254:	10bfffc4 	addi	r2,r2,-1
   1f258:	80a0703a 	and	r16,r16,r2
   1f25c:	003f1206 	br	1eea8 <__alt_data_end+0xfc01eea8>
   1f260:	147ff604 	addi	r17,r2,-40
   1f264:	3462983a 	sll	r17,r6,r17
   1f268:	0025883a 	mov	r18,zero
   1f26c:	003ef306 	br	1ee3c <__alt_data_end+0xfc01ee3c>
   1f270:	3009883a 	mov	r4,r6
   1f274:	d9400215 	stw	r5,8(sp)
   1f278:	d9800715 	stw	r6,28(sp)
   1f27c:	da400415 	stw	r9,16(sp)
   1f280:	da800315 	stw	r10,12(sp)
   1f284:	000f3840 	call	f384 <__clzsi2>
   1f288:	10800804 	addi	r2,r2,32
   1f28c:	da800317 	ldw	r10,12(sp)
   1f290:	da400417 	ldw	r9,16(sp)
   1f294:	d9800717 	ldw	r6,28(sp)
   1f298:	d9400217 	ldw	r5,8(sp)
   1f29c:	003edd06 	br	1ee14 <__alt_data_end+0xfc01ee14>
   1f2a0:	143ff604 	addi	r16,r2,-40
   1f2a4:	ac20983a 	sll	r16,r21,r16
   1f2a8:	002d883a 	mov	r22,zero
   1f2ac:	003ec106 	br	1edb4 <__alt_data_end+0xfc01edb4>
   1f2b0:	d9800715 	stw	r6,28(sp)
   1f2b4:	d9c00215 	stw	r7,8(sp)
   1f2b8:	da400415 	stw	r9,16(sp)
   1f2bc:	000f3840 	call	f384 <__clzsi2>
   1f2c0:	10800804 	addi	r2,r2,32
   1f2c4:	da400417 	ldw	r9,16(sp)
   1f2c8:	d9c00217 	ldw	r7,8(sp)
   1f2cc:	d9800717 	ldw	r6,28(sp)
   1f2d0:	003eae06 	br	1ed8c <__alt_data_end+0xfc01ed8c>
   1f2d4:	00c00044 	movi	r3,1
   1f2d8:	1887c83a 	sub	r3,r3,r2
   1f2dc:	01000e04 	movi	r4,56
   1f2e0:	20fe8516 	blt	r4,r3,1ecf8 <__alt_data_end+0xfc01ecf8>
   1f2e4:	010007c4 	movi	r4,31
   1f2e8:	20c01b16 	blt	r4,r3,1f358 <__muldf3+0x7cc>
   1f2ec:	00800804 	movi	r2,32
   1f2f0:	10c5c83a 	sub	r2,r2,r3
   1f2f4:	888a983a 	sll	r5,r17,r2
   1f2f8:	90c8d83a 	srl	r4,r18,r3
   1f2fc:	9084983a 	sll	r2,r18,r2
   1f300:	88e2d83a 	srl	r17,r17,r3
   1f304:	2906b03a 	or	r3,r5,r4
   1f308:	1004c03a 	cmpne	r2,r2,zero
   1f30c:	1886b03a 	or	r3,r3,r2
   1f310:	188001cc 	andi	r2,r3,7
   1f314:	10000726 	beq	r2,zero,1f334 <__muldf3+0x7a8>
   1f318:	188003cc 	andi	r2,r3,15
   1f31c:	01000104 	movi	r4,4
   1f320:	11000426 	beq	r2,r4,1f334 <__muldf3+0x7a8>
   1f324:	1805883a 	mov	r2,r3
   1f328:	10c00104 	addi	r3,r2,4
   1f32c:	1885803a 	cmpltu	r2,r3,r2
   1f330:	88a3883a 	add	r17,r17,r2
   1f334:	8880202c 	andhi	r2,r17,128
   1f338:	10001c26 	beq	r2,zero,1f3ac <__muldf3+0x820>
   1f33c:	3027883a 	mov	r19,r6
   1f340:	00800044 	movi	r2,1
   1f344:	0021883a 	mov	r16,zero
   1f348:	002d883a 	mov	r22,zero
   1f34c:	003e6e06 	br	1ed08 <__alt_data_end+0xfc01ed08>
   1f350:	4007883a 	mov	r3,r8
   1f354:	003f9706 	br	1f1b4 <__alt_data_end+0xfc01f1b4>
   1f358:	017ff844 	movi	r5,-31
   1f35c:	2885c83a 	sub	r2,r5,r2
   1f360:	888ad83a 	srl	r5,r17,r2
   1f364:	00800804 	movi	r2,32
   1f368:	18801a26 	beq	r3,r2,1f3d4 <__muldf3+0x848>
   1f36c:	01001004 	movi	r4,64
   1f370:	20c7c83a 	sub	r3,r4,r3
   1f374:	88e2983a 	sll	r17,r17,r3
   1f378:	8ca4b03a 	or	r18,r17,r18
   1f37c:	9004c03a 	cmpne	r2,r18,zero
   1f380:	2884b03a 	or	r2,r5,r2
   1f384:	144001cc 	andi	r17,r2,7
   1f388:	88000d1e 	bne	r17,zero,1f3c0 <__muldf3+0x834>
   1f38c:	0021883a 	mov	r16,zero
   1f390:	102cd0fa 	srli	r22,r2,3
   1f394:	3027883a 	mov	r19,r6
   1f398:	0005883a 	mov	r2,zero
   1f39c:	b46cb03a 	or	r22,r22,r17
   1f3a0:	003e5906 	br	1ed08 <__alt_data_end+0xfc01ed08>
   1f3a4:	1007883a 	mov	r3,r2
   1f3a8:	0023883a 	mov	r17,zero
   1f3ac:	8820927a 	slli	r16,r17,9
   1f3b0:	1805883a 	mov	r2,r3
   1f3b4:	8822977a 	slli	r17,r17,29
   1f3b8:	8020d33a 	srli	r16,r16,12
   1f3bc:	003ff406 	br	1f390 <__alt_data_end+0xfc01f390>
   1f3c0:	10c003cc 	andi	r3,r2,15
   1f3c4:	01000104 	movi	r4,4
   1f3c8:	193ff626 	beq	r3,r4,1f3a4 <__alt_data_end+0xfc01f3a4>
   1f3cc:	0023883a 	mov	r17,zero
   1f3d0:	003fd506 	br	1f328 <__alt_data_end+0xfc01f328>
   1f3d4:	0023883a 	mov	r17,zero
   1f3d8:	003fe706 	br	1f378 <__alt_data_end+0xfc01f378>
   1f3dc:	00800434 	movhi	r2,16
   1f3e0:	8c000234 	orhi	r16,r17,8
   1f3e4:	10bfffc4 	addi	r2,r2,-1
   1f3e8:	3027883a 	mov	r19,r6
   1f3ec:	80a0703a 	and	r16,r16,r2
   1f3f0:	902d883a 	mov	r22,r18
   1f3f4:	003eac06 	br	1eea8 <__alt_data_end+0xfc01eea8>

0001f3f8 <__subdf3>:
   1f3f8:	02000434 	movhi	r8,16
   1f3fc:	423fffc4 	addi	r8,r8,-1
   1f400:	defffb04 	addi	sp,sp,-20
   1f404:	2a14703a 	and	r10,r5,r8
   1f408:	3812d53a 	srli	r9,r7,20
   1f40c:	3a10703a 	and	r8,r7,r8
   1f410:	2006d77a 	srli	r3,r4,29
   1f414:	3004d77a 	srli	r2,r6,29
   1f418:	dc000015 	stw	r16,0(sp)
   1f41c:	501490fa 	slli	r10,r10,3
   1f420:	2820d53a 	srli	r16,r5,20
   1f424:	401090fa 	slli	r8,r8,3
   1f428:	dc800215 	stw	r18,8(sp)
   1f42c:	dc400115 	stw	r17,4(sp)
   1f430:	dfc00415 	stw	ra,16(sp)
   1f434:	202290fa 	slli	r17,r4,3
   1f438:	dcc00315 	stw	r19,12(sp)
   1f43c:	4a41ffcc 	andi	r9,r9,2047
   1f440:	0101ffc4 	movi	r4,2047
   1f444:	2824d7fa 	srli	r18,r5,31
   1f448:	8401ffcc 	andi	r16,r16,2047
   1f44c:	50c6b03a 	or	r3,r10,r3
   1f450:	380ed7fa 	srli	r7,r7,31
   1f454:	408ab03a 	or	r5,r8,r2
   1f458:	300c90fa 	slli	r6,r6,3
   1f45c:	49009626 	beq	r9,r4,1f6b8 <__subdf3+0x2c0>
   1f460:	39c0005c 	xori	r7,r7,1
   1f464:	8245c83a 	sub	r2,r16,r9
   1f468:	3c807426 	beq	r7,r18,1f63c <__subdf3+0x244>
   1f46c:	0080af0e 	bge	zero,r2,1f72c <__subdf3+0x334>
   1f470:	48002a1e 	bne	r9,zero,1f51c <__subdf3+0x124>
   1f474:	2988b03a 	or	r4,r5,r6
   1f478:	20009a1e 	bne	r4,zero,1f6e4 <__subdf3+0x2ec>
   1f47c:	888001cc 	andi	r2,r17,7
   1f480:	10000726 	beq	r2,zero,1f4a0 <__subdf3+0xa8>
   1f484:	888003cc 	andi	r2,r17,15
   1f488:	01000104 	movi	r4,4
   1f48c:	11000426 	beq	r2,r4,1f4a0 <__subdf3+0xa8>
   1f490:	890b883a 	add	r5,r17,r4
   1f494:	2c63803a 	cmpltu	r17,r5,r17
   1f498:	1c47883a 	add	r3,r3,r17
   1f49c:	2823883a 	mov	r17,r5
   1f4a0:	1880202c 	andhi	r2,r3,128
   1f4a4:	10005926 	beq	r2,zero,1f60c <__subdf3+0x214>
   1f4a8:	84000044 	addi	r16,r16,1
   1f4ac:	0081ffc4 	movi	r2,2047
   1f4b0:	8080be26 	beq	r16,r2,1f7ac <__subdf3+0x3b4>
   1f4b4:	017fe034 	movhi	r5,65408
   1f4b8:	297fffc4 	addi	r5,r5,-1
   1f4bc:	1946703a 	and	r3,r3,r5
   1f4c0:	1804977a 	slli	r2,r3,29
   1f4c4:	1806927a 	slli	r3,r3,9
   1f4c8:	8822d0fa 	srli	r17,r17,3
   1f4cc:	8401ffcc 	andi	r16,r16,2047
   1f4d0:	180ad33a 	srli	r5,r3,12
   1f4d4:	9100004c 	andi	r4,r18,1
   1f4d8:	1444b03a 	or	r2,r2,r17
   1f4dc:	80c1ffcc 	andi	r3,r16,2047
   1f4e0:	1820953a 	slli	r16,r3,20
   1f4e4:	20c03fcc 	andi	r3,r4,255
   1f4e8:	180897fa 	slli	r4,r3,31
   1f4ec:	00c00434 	movhi	r3,16
   1f4f0:	18ffffc4 	addi	r3,r3,-1
   1f4f4:	28c6703a 	and	r3,r5,r3
   1f4f8:	1c06b03a 	or	r3,r3,r16
   1f4fc:	1906b03a 	or	r3,r3,r4
   1f500:	dfc00417 	ldw	ra,16(sp)
   1f504:	dcc00317 	ldw	r19,12(sp)
   1f508:	dc800217 	ldw	r18,8(sp)
   1f50c:	dc400117 	ldw	r17,4(sp)
   1f510:	dc000017 	ldw	r16,0(sp)
   1f514:	dec00504 	addi	sp,sp,20
   1f518:	f800283a 	ret
   1f51c:	0101ffc4 	movi	r4,2047
   1f520:	813fd626 	beq	r16,r4,1f47c <__alt_data_end+0xfc01f47c>
   1f524:	29402034 	orhi	r5,r5,128
   1f528:	01000e04 	movi	r4,56
   1f52c:	2080a316 	blt	r4,r2,1f7bc <__subdf3+0x3c4>
   1f530:	010007c4 	movi	r4,31
   1f534:	2080c616 	blt	r4,r2,1f850 <__subdf3+0x458>
   1f538:	01000804 	movi	r4,32
   1f53c:	2089c83a 	sub	r4,r4,r2
   1f540:	2910983a 	sll	r8,r5,r4
   1f544:	308ed83a 	srl	r7,r6,r2
   1f548:	3108983a 	sll	r4,r6,r4
   1f54c:	2884d83a 	srl	r2,r5,r2
   1f550:	41ccb03a 	or	r6,r8,r7
   1f554:	2008c03a 	cmpne	r4,r4,zero
   1f558:	310cb03a 	or	r6,r6,r4
   1f55c:	898dc83a 	sub	r6,r17,r6
   1f560:	89a3803a 	cmpltu	r17,r17,r6
   1f564:	1887c83a 	sub	r3,r3,r2
   1f568:	1c47c83a 	sub	r3,r3,r17
   1f56c:	3023883a 	mov	r17,r6
   1f570:	1880202c 	andhi	r2,r3,128
   1f574:	10002326 	beq	r2,zero,1f604 <__subdf3+0x20c>
   1f578:	04c02034 	movhi	r19,128
   1f57c:	9cffffc4 	addi	r19,r19,-1
   1f580:	1ce6703a 	and	r19,r3,r19
   1f584:	98007a26 	beq	r19,zero,1f770 <__subdf3+0x378>
   1f588:	9809883a 	mov	r4,r19
   1f58c:	000f3840 	call	f384 <__clzsi2>
   1f590:	113ffe04 	addi	r4,r2,-8
   1f594:	00c007c4 	movi	r3,31
   1f598:	19007b16 	blt	r3,r4,1f788 <__subdf3+0x390>
   1f59c:	00800804 	movi	r2,32
   1f5a0:	1105c83a 	sub	r2,r2,r4
   1f5a4:	8884d83a 	srl	r2,r17,r2
   1f5a8:	9906983a 	sll	r3,r19,r4
   1f5ac:	8922983a 	sll	r17,r17,r4
   1f5b0:	10c4b03a 	or	r2,r2,r3
   1f5b4:	24007816 	blt	r4,r16,1f798 <__subdf3+0x3a0>
   1f5b8:	2421c83a 	sub	r16,r4,r16
   1f5bc:	80c00044 	addi	r3,r16,1
   1f5c0:	010007c4 	movi	r4,31
   1f5c4:	20c09516 	blt	r4,r3,1f81c <__subdf3+0x424>
   1f5c8:	01400804 	movi	r5,32
   1f5cc:	28cbc83a 	sub	r5,r5,r3
   1f5d0:	88c8d83a 	srl	r4,r17,r3
   1f5d4:	8962983a 	sll	r17,r17,r5
   1f5d8:	114a983a 	sll	r5,r2,r5
   1f5dc:	10c6d83a 	srl	r3,r2,r3
   1f5e0:	8804c03a 	cmpne	r2,r17,zero
   1f5e4:	290ab03a 	or	r5,r5,r4
   1f5e8:	28a2b03a 	or	r17,r5,r2
   1f5ec:	0021883a 	mov	r16,zero
   1f5f0:	003fa206 	br	1f47c <__alt_data_end+0xfc01f47c>
   1f5f4:	2090b03a 	or	r8,r4,r2
   1f5f8:	40018e26 	beq	r8,zero,1fc34 <__subdf3+0x83c>
   1f5fc:	1007883a 	mov	r3,r2
   1f600:	2023883a 	mov	r17,r4
   1f604:	888001cc 	andi	r2,r17,7
   1f608:	103f9e1e 	bne	r2,zero,1f484 <__alt_data_end+0xfc01f484>
   1f60c:	1804977a 	slli	r2,r3,29
   1f610:	8822d0fa 	srli	r17,r17,3
   1f614:	1810d0fa 	srli	r8,r3,3
   1f618:	9100004c 	andi	r4,r18,1
   1f61c:	1444b03a 	or	r2,r2,r17
   1f620:	00c1ffc4 	movi	r3,2047
   1f624:	80c02826 	beq	r16,r3,1f6c8 <__subdf3+0x2d0>
   1f628:	01400434 	movhi	r5,16
   1f62c:	297fffc4 	addi	r5,r5,-1
   1f630:	80e0703a 	and	r16,r16,r3
   1f634:	414a703a 	and	r5,r8,r5
   1f638:	003fa806 	br	1f4dc <__alt_data_end+0xfc01f4dc>
   1f63c:	0080630e 	bge	zero,r2,1f7cc <__subdf3+0x3d4>
   1f640:	48003026 	beq	r9,zero,1f704 <__subdf3+0x30c>
   1f644:	0101ffc4 	movi	r4,2047
   1f648:	813f8c26 	beq	r16,r4,1f47c <__alt_data_end+0xfc01f47c>
   1f64c:	29402034 	orhi	r5,r5,128
   1f650:	01000e04 	movi	r4,56
   1f654:	2080a90e 	bge	r4,r2,1f8fc <__subdf3+0x504>
   1f658:	298cb03a 	or	r6,r5,r6
   1f65c:	3012c03a 	cmpne	r9,r6,zero
   1f660:	0005883a 	mov	r2,zero
   1f664:	4c53883a 	add	r9,r9,r17
   1f668:	4c63803a 	cmpltu	r17,r9,r17
   1f66c:	10c7883a 	add	r3,r2,r3
   1f670:	88c7883a 	add	r3,r17,r3
   1f674:	4823883a 	mov	r17,r9
   1f678:	1880202c 	andhi	r2,r3,128
   1f67c:	1000d026 	beq	r2,zero,1f9c0 <__subdf3+0x5c8>
   1f680:	84000044 	addi	r16,r16,1
   1f684:	0081ffc4 	movi	r2,2047
   1f688:	8080fe26 	beq	r16,r2,1fa84 <__subdf3+0x68c>
   1f68c:	00bfe034 	movhi	r2,65408
   1f690:	10bfffc4 	addi	r2,r2,-1
   1f694:	1886703a 	and	r3,r3,r2
   1f698:	880ad07a 	srli	r5,r17,1
   1f69c:	180497fa 	slli	r2,r3,31
   1f6a0:	8900004c 	andi	r4,r17,1
   1f6a4:	2922b03a 	or	r17,r5,r4
   1f6a8:	1806d07a 	srli	r3,r3,1
   1f6ac:	1462b03a 	or	r17,r2,r17
   1f6b0:	3825883a 	mov	r18,r7
   1f6b4:	003f7106 	br	1f47c <__alt_data_end+0xfc01f47c>
   1f6b8:	2984b03a 	or	r2,r5,r6
   1f6bc:	103f6826 	beq	r2,zero,1f460 <__alt_data_end+0xfc01f460>
   1f6c0:	39c03fcc 	andi	r7,r7,255
   1f6c4:	003f6706 	br	1f464 <__alt_data_end+0xfc01f464>
   1f6c8:	4086b03a 	or	r3,r8,r2
   1f6cc:	18015226 	beq	r3,zero,1fc18 <__subdf3+0x820>
   1f6d0:	00c00434 	movhi	r3,16
   1f6d4:	41400234 	orhi	r5,r8,8
   1f6d8:	18ffffc4 	addi	r3,r3,-1
   1f6dc:	28ca703a 	and	r5,r5,r3
   1f6e0:	003f7e06 	br	1f4dc <__alt_data_end+0xfc01f4dc>
   1f6e4:	10bfffc4 	addi	r2,r2,-1
   1f6e8:	1000491e 	bne	r2,zero,1f810 <__subdf3+0x418>
   1f6ec:	898fc83a 	sub	r7,r17,r6
   1f6f0:	89e3803a 	cmpltu	r17,r17,r7
   1f6f4:	1947c83a 	sub	r3,r3,r5
   1f6f8:	1c47c83a 	sub	r3,r3,r17
   1f6fc:	3823883a 	mov	r17,r7
   1f700:	003f9b06 	br	1f570 <__alt_data_end+0xfc01f570>
   1f704:	2988b03a 	or	r4,r5,r6
   1f708:	203f5c26 	beq	r4,zero,1f47c <__alt_data_end+0xfc01f47c>
   1f70c:	10bfffc4 	addi	r2,r2,-1
   1f710:	1000931e 	bne	r2,zero,1f960 <__subdf3+0x568>
   1f714:	898d883a 	add	r6,r17,r6
   1f718:	3463803a 	cmpltu	r17,r6,r17
   1f71c:	1947883a 	add	r3,r3,r5
   1f720:	88c7883a 	add	r3,r17,r3
   1f724:	3023883a 	mov	r17,r6
   1f728:	003fd306 	br	1f678 <__alt_data_end+0xfc01f678>
   1f72c:	1000541e 	bne	r2,zero,1f880 <__subdf3+0x488>
   1f730:	80800044 	addi	r2,r16,1
   1f734:	1081ffcc 	andi	r2,r2,2047
   1f738:	01000044 	movi	r4,1
   1f73c:	2080a20e 	bge	r4,r2,1f9c8 <__subdf3+0x5d0>
   1f740:	8989c83a 	sub	r4,r17,r6
   1f744:	8905803a 	cmpltu	r2,r17,r4
   1f748:	1967c83a 	sub	r19,r3,r5
   1f74c:	98a7c83a 	sub	r19,r19,r2
   1f750:	9880202c 	andhi	r2,r19,128
   1f754:	10006326 	beq	r2,zero,1f8e4 <__subdf3+0x4ec>
   1f758:	3463c83a 	sub	r17,r6,r17
   1f75c:	28c7c83a 	sub	r3,r5,r3
   1f760:	344d803a 	cmpltu	r6,r6,r17
   1f764:	19a7c83a 	sub	r19,r3,r6
   1f768:	3825883a 	mov	r18,r7
   1f76c:	983f861e 	bne	r19,zero,1f588 <__alt_data_end+0xfc01f588>
   1f770:	8809883a 	mov	r4,r17
   1f774:	000f3840 	call	f384 <__clzsi2>
   1f778:	10800804 	addi	r2,r2,32
   1f77c:	113ffe04 	addi	r4,r2,-8
   1f780:	00c007c4 	movi	r3,31
   1f784:	193f850e 	bge	r3,r4,1f59c <__alt_data_end+0xfc01f59c>
   1f788:	10bff604 	addi	r2,r2,-40
   1f78c:	8884983a 	sll	r2,r17,r2
   1f790:	0023883a 	mov	r17,zero
   1f794:	243f880e 	bge	r4,r16,1f5b8 <__alt_data_end+0xfc01f5b8>
   1f798:	00ffe034 	movhi	r3,65408
   1f79c:	18ffffc4 	addi	r3,r3,-1
   1f7a0:	8121c83a 	sub	r16,r16,r4
   1f7a4:	10c6703a 	and	r3,r2,r3
   1f7a8:	003f3406 	br	1f47c <__alt_data_end+0xfc01f47c>
   1f7ac:	9100004c 	andi	r4,r18,1
   1f7b0:	000b883a 	mov	r5,zero
   1f7b4:	0005883a 	mov	r2,zero
   1f7b8:	003f4806 	br	1f4dc <__alt_data_end+0xfc01f4dc>
   1f7bc:	298cb03a 	or	r6,r5,r6
   1f7c0:	300cc03a 	cmpne	r6,r6,zero
   1f7c4:	0005883a 	mov	r2,zero
   1f7c8:	003f6406 	br	1f55c <__alt_data_end+0xfc01f55c>
   1f7cc:	10009a1e 	bne	r2,zero,1fa38 <__subdf3+0x640>
   1f7d0:	82400044 	addi	r9,r16,1
   1f7d4:	4881ffcc 	andi	r2,r9,2047
   1f7d8:	02800044 	movi	r10,1
   1f7dc:	5080670e 	bge	r10,r2,1f97c <__subdf3+0x584>
   1f7e0:	0081ffc4 	movi	r2,2047
   1f7e4:	4880af26 	beq	r9,r2,1faa4 <__subdf3+0x6ac>
   1f7e8:	898d883a 	add	r6,r17,r6
   1f7ec:	1945883a 	add	r2,r3,r5
   1f7f0:	3447803a 	cmpltu	r3,r6,r17
   1f7f4:	1887883a 	add	r3,r3,r2
   1f7f8:	182297fa 	slli	r17,r3,31
   1f7fc:	300cd07a 	srli	r6,r6,1
   1f800:	1806d07a 	srli	r3,r3,1
   1f804:	4821883a 	mov	r16,r9
   1f808:	89a2b03a 	or	r17,r17,r6
   1f80c:	003f1b06 	br	1f47c <__alt_data_end+0xfc01f47c>
   1f810:	0101ffc4 	movi	r4,2047
   1f814:	813f441e 	bne	r16,r4,1f528 <__alt_data_end+0xfc01f528>
   1f818:	003f1806 	br	1f47c <__alt_data_end+0xfc01f47c>
   1f81c:	843ff844 	addi	r16,r16,-31
   1f820:	01400804 	movi	r5,32
   1f824:	1408d83a 	srl	r4,r2,r16
   1f828:	19405026 	beq	r3,r5,1f96c <__subdf3+0x574>
   1f82c:	01401004 	movi	r5,64
   1f830:	28c7c83a 	sub	r3,r5,r3
   1f834:	10c4983a 	sll	r2,r2,r3
   1f838:	88a2b03a 	or	r17,r17,r2
   1f83c:	8822c03a 	cmpne	r17,r17,zero
   1f840:	2462b03a 	or	r17,r4,r17
   1f844:	0007883a 	mov	r3,zero
   1f848:	0021883a 	mov	r16,zero
   1f84c:	003f6d06 	br	1f604 <__alt_data_end+0xfc01f604>
   1f850:	11fff804 	addi	r7,r2,-32
   1f854:	01000804 	movi	r4,32
   1f858:	29ced83a 	srl	r7,r5,r7
   1f85c:	11004526 	beq	r2,r4,1f974 <__subdf3+0x57c>
   1f860:	01001004 	movi	r4,64
   1f864:	2089c83a 	sub	r4,r4,r2
   1f868:	2904983a 	sll	r2,r5,r4
   1f86c:	118cb03a 	or	r6,r2,r6
   1f870:	300cc03a 	cmpne	r6,r6,zero
   1f874:	398cb03a 	or	r6,r7,r6
   1f878:	0005883a 	mov	r2,zero
   1f87c:	003f3706 	br	1f55c <__alt_data_end+0xfc01f55c>
   1f880:	80002a26 	beq	r16,zero,1f92c <__subdf3+0x534>
   1f884:	0101ffc4 	movi	r4,2047
   1f888:	49006626 	beq	r9,r4,1fa24 <__subdf3+0x62c>
   1f88c:	0085c83a 	sub	r2,zero,r2
   1f890:	18c02034 	orhi	r3,r3,128
   1f894:	01000e04 	movi	r4,56
   1f898:	20807e16 	blt	r4,r2,1fa94 <__subdf3+0x69c>
   1f89c:	010007c4 	movi	r4,31
   1f8a0:	2080e716 	blt	r4,r2,1fc40 <__subdf3+0x848>
   1f8a4:	01000804 	movi	r4,32
   1f8a8:	2089c83a 	sub	r4,r4,r2
   1f8ac:	1914983a 	sll	r10,r3,r4
   1f8b0:	8890d83a 	srl	r8,r17,r2
   1f8b4:	8908983a 	sll	r4,r17,r4
   1f8b8:	1884d83a 	srl	r2,r3,r2
   1f8bc:	5222b03a 	or	r17,r10,r8
   1f8c0:	2006c03a 	cmpne	r3,r4,zero
   1f8c4:	88e2b03a 	or	r17,r17,r3
   1f8c8:	3463c83a 	sub	r17,r6,r17
   1f8cc:	2885c83a 	sub	r2,r5,r2
   1f8d0:	344d803a 	cmpltu	r6,r6,r17
   1f8d4:	1187c83a 	sub	r3,r2,r6
   1f8d8:	4821883a 	mov	r16,r9
   1f8dc:	3825883a 	mov	r18,r7
   1f8e0:	003f2306 	br	1f570 <__alt_data_end+0xfc01f570>
   1f8e4:	24d0b03a 	or	r8,r4,r19
   1f8e8:	40001b1e 	bne	r8,zero,1f958 <__subdf3+0x560>
   1f8ec:	0005883a 	mov	r2,zero
   1f8f0:	0009883a 	mov	r4,zero
   1f8f4:	0021883a 	mov	r16,zero
   1f8f8:	003f4906 	br	1f620 <__alt_data_end+0xfc01f620>
   1f8fc:	010007c4 	movi	r4,31
   1f900:	20803a16 	blt	r4,r2,1f9ec <__subdf3+0x5f4>
   1f904:	01000804 	movi	r4,32
   1f908:	2089c83a 	sub	r4,r4,r2
   1f90c:	2912983a 	sll	r9,r5,r4
   1f910:	3090d83a 	srl	r8,r6,r2
   1f914:	3108983a 	sll	r4,r6,r4
   1f918:	2884d83a 	srl	r2,r5,r2
   1f91c:	4a12b03a 	or	r9,r9,r8
   1f920:	2008c03a 	cmpne	r4,r4,zero
   1f924:	4912b03a 	or	r9,r9,r4
   1f928:	003f4e06 	br	1f664 <__alt_data_end+0xfc01f664>
   1f92c:	1c48b03a 	or	r4,r3,r17
   1f930:	20003c26 	beq	r4,zero,1fa24 <__subdf3+0x62c>
   1f934:	0084303a 	nor	r2,zero,r2
   1f938:	1000381e 	bne	r2,zero,1fa1c <__subdf3+0x624>
   1f93c:	3463c83a 	sub	r17,r6,r17
   1f940:	28c5c83a 	sub	r2,r5,r3
   1f944:	344d803a 	cmpltu	r6,r6,r17
   1f948:	1187c83a 	sub	r3,r2,r6
   1f94c:	4821883a 	mov	r16,r9
   1f950:	3825883a 	mov	r18,r7
   1f954:	003f0606 	br	1f570 <__alt_data_end+0xfc01f570>
   1f958:	2023883a 	mov	r17,r4
   1f95c:	003f0906 	br	1f584 <__alt_data_end+0xfc01f584>
   1f960:	0101ffc4 	movi	r4,2047
   1f964:	813f3a1e 	bne	r16,r4,1f650 <__alt_data_end+0xfc01f650>
   1f968:	003ec406 	br	1f47c <__alt_data_end+0xfc01f47c>
   1f96c:	0005883a 	mov	r2,zero
   1f970:	003fb106 	br	1f838 <__alt_data_end+0xfc01f838>
   1f974:	0005883a 	mov	r2,zero
   1f978:	003fbc06 	br	1f86c <__alt_data_end+0xfc01f86c>
   1f97c:	1c44b03a 	or	r2,r3,r17
   1f980:	80008e1e 	bne	r16,zero,1fbbc <__subdf3+0x7c4>
   1f984:	1000c826 	beq	r2,zero,1fca8 <__subdf3+0x8b0>
   1f988:	2984b03a 	or	r2,r5,r6
   1f98c:	103ebb26 	beq	r2,zero,1f47c <__alt_data_end+0xfc01f47c>
   1f990:	8989883a 	add	r4,r17,r6
   1f994:	1945883a 	add	r2,r3,r5
   1f998:	2447803a 	cmpltu	r3,r4,r17
   1f99c:	1887883a 	add	r3,r3,r2
   1f9a0:	1880202c 	andhi	r2,r3,128
   1f9a4:	2023883a 	mov	r17,r4
   1f9a8:	103f1626 	beq	r2,zero,1f604 <__alt_data_end+0xfc01f604>
   1f9ac:	00bfe034 	movhi	r2,65408
   1f9b0:	10bfffc4 	addi	r2,r2,-1
   1f9b4:	5021883a 	mov	r16,r10
   1f9b8:	1886703a 	and	r3,r3,r2
   1f9bc:	003eaf06 	br	1f47c <__alt_data_end+0xfc01f47c>
   1f9c0:	3825883a 	mov	r18,r7
   1f9c4:	003f0f06 	br	1f604 <__alt_data_end+0xfc01f604>
   1f9c8:	1c44b03a 	or	r2,r3,r17
   1f9cc:	8000251e 	bne	r16,zero,1fa64 <__subdf3+0x66c>
   1f9d0:	1000661e 	bne	r2,zero,1fb6c <__subdf3+0x774>
   1f9d4:	2990b03a 	or	r8,r5,r6
   1f9d8:	40009626 	beq	r8,zero,1fc34 <__subdf3+0x83c>
   1f9dc:	2807883a 	mov	r3,r5
   1f9e0:	3023883a 	mov	r17,r6
   1f9e4:	3825883a 	mov	r18,r7
   1f9e8:	003ea406 	br	1f47c <__alt_data_end+0xfc01f47c>
   1f9ec:	127ff804 	addi	r9,r2,-32
   1f9f0:	01000804 	movi	r4,32
   1f9f4:	2a52d83a 	srl	r9,r5,r9
   1f9f8:	11008c26 	beq	r2,r4,1fc2c <__subdf3+0x834>
   1f9fc:	01001004 	movi	r4,64
   1fa00:	2085c83a 	sub	r2,r4,r2
   1fa04:	2884983a 	sll	r2,r5,r2
   1fa08:	118cb03a 	or	r6,r2,r6
   1fa0c:	300cc03a 	cmpne	r6,r6,zero
   1fa10:	4992b03a 	or	r9,r9,r6
   1fa14:	0005883a 	mov	r2,zero
   1fa18:	003f1206 	br	1f664 <__alt_data_end+0xfc01f664>
   1fa1c:	0101ffc4 	movi	r4,2047
   1fa20:	493f9c1e 	bne	r9,r4,1f894 <__alt_data_end+0xfc01f894>
   1fa24:	2807883a 	mov	r3,r5
   1fa28:	3023883a 	mov	r17,r6
   1fa2c:	4821883a 	mov	r16,r9
   1fa30:	3825883a 	mov	r18,r7
   1fa34:	003e9106 	br	1f47c <__alt_data_end+0xfc01f47c>
   1fa38:	80001f1e 	bne	r16,zero,1fab8 <__subdf3+0x6c0>
   1fa3c:	1c48b03a 	or	r4,r3,r17
   1fa40:	20005a26 	beq	r4,zero,1fbac <__subdf3+0x7b4>
   1fa44:	0084303a 	nor	r2,zero,r2
   1fa48:	1000561e 	bne	r2,zero,1fba4 <__subdf3+0x7ac>
   1fa4c:	89a3883a 	add	r17,r17,r6
   1fa50:	1945883a 	add	r2,r3,r5
   1fa54:	898d803a 	cmpltu	r6,r17,r6
   1fa58:	3087883a 	add	r3,r6,r2
   1fa5c:	4821883a 	mov	r16,r9
   1fa60:	003f0506 	br	1f678 <__alt_data_end+0xfc01f678>
   1fa64:	10002b1e 	bne	r2,zero,1fb14 <__subdf3+0x71c>
   1fa68:	2984b03a 	or	r2,r5,r6
   1fa6c:	10008026 	beq	r2,zero,1fc70 <__subdf3+0x878>
   1fa70:	2807883a 	mov	r3,r5
   1fa74:	3023883a 	mov	r17,r6
   1fa78:	3825883a 	mov	r18,r7
   1fa7c:	0401ffc4 	movi	r16,2047
   1fa80:	003e7e06 	br	1f47c <__alt_data_end+0xfc01f47c>
   1fa84:	3809883a 	mov	r4,r7
   1fa88:	0011883a 	mov	r8,zero
   1fa8c:	0005883a 	mov	r2,zero
   1fa90:	003ee306 	br	1f620 <__alt_data_end+0xfc01f620>
   1fa94:	1c62b03a 	or	r17,r3,r17
   1fa98:	8822c03a 	cmpne	r17,r17,zero
   1fa9c:	0005883a 	mov	r2,zero
   1faa0:	003f8906 	br	1f8c8 <__alt_data_end+0xfc01f8c8>
   1faa4:	3809883a 	mov	r4,r7
   1faa8:	4821883a 	mov	r16,r9
   1faac:	0011883a 	mov	r8,zero
   1fab0:	0005883a 	mov	r2,zero
   1fab4:	003eda06 	br	1f620 <__alt_data_end+0xfc01f620>
   1fab8:	0101ffc4 	movi	r4,2047
   1fabc:	49003b26 	beq	r9,r4,1fbac <__subdf3+0x7b4>
   1fac0:	0085c83a 	sub	r2,zero,r2
   1fac4:	18c02034 	orhi	r3,r3,128
   1fac8:	01000e04 	movi	r4,56
   1facc:	20806e16 	blt	r4,r2,1fc88 <__subdf3+0x890>
   1fad0:	010007c4 	movi	r4,31
   1fad4:	20807716 	blt	r4,r2,1fcb4 <__subdf3+0x8bc>
   1fad8:	01000804 	movi	r4,32
   1fadc:	2089c83a 	sub	r4,r4,r2
   1fae0:	1914983a 	sll	r10,r3,r4
   1fae4:	8890d83a 	srl	r8,r17,r2
   1fae8:	8908983a 	sll	r4,r17,r4
   1faec:	1884d83a 	srl	r2,r3,r2
   1faf0:	5222b03a 	or	r17,r10,r8
   1faf4:	2006c03a 	cmpne	r3,r4,zero
   1faf8:	88e2b03a 	or	r17,r17,r3
   1fafc:	89a3883a 	add	r17,r17,r6
   1fb00:	1145883a 	add	r2,r2,r5
   1fb04:	898d803a 	cmpltu	r6,r17,r6
   1fb08:	3087883a 	add	r3,r6,r2
   1fb0c:	4821883a 	mov	r16,r9
   1fb10:	003ed906 	br	1f678 <__alt_data_end+0xfc01f678>
   1fb14:	2984b03a 	or	r2,r5,r6
   1fb18:	10004226 	beq	r2,zero,1fc24 <__subdf3+0x82c>
   1fb1c:	1808d0fa 	srli	r4,r3,3
   1fb20:	8822d0fa 	srli	r17,r17,3
   1fb24:	1806977a 	slli	r3,r3,29
   1fb28:	2080022c 	andhi	r2,r4,8
   1fb2c:	1c62b03a 	or	r17,r3,r17
   1fb30:	10000826 	beq	r2,zero,1fb54 <__subdf3+0x75c>
   1fb34:	2812d0fa 	srli	r9,r5,3
   1fb38:	4880022c 	andhi	r2,r9,8
   1fb3c:	1000051e 	bne	r2,zero,1fb54 <__subdf3+0x75c>
   1fb40:	300cd0fa 	srli	r6,r6,3
   1fb44:	2804977a 	slli	r2,r5,29
   1fb48:	4809883a 	mov	r4,r9
   1fb4c:	3825883a 	mov	r18,r7
   1fb50:	11a2b03a 	or	r17,r2,r6
   1fb54:	8806d77a 	srli	r3,r17,29
   1fb58:	200890fa 	slli	r4,r4,3
   1fb5c:	882290fa 	slli	r17,r17,3
   1fb60:	0401ffc4 	movi	r16,2047
   1fb64:	1906b03a 	or	r3,r3,r4
   1fb68:	003e4406 	br	1f47c <__alt_data_end+0xfc01f47c>
   1fb6c:	2984b03a 	or	r2,r5,r6
   1fb70:	103e4226 	beq	r2,zero,1f47c <__alt_data_end+0xfc01f47c>
   1fb74:	8989c83a 	sub	r4,r17,r6
   1fb78:	8911803a 	cmpltu	r8,r17,r4
   1fb7c:	1945c83a 	sub	r2,r3,r5
   1fb80:	1205c83a 	sub	r2,r2,r8
   1fb84:	1200202c 	andhi	r8,r2,128
   1fb88:	403e9a26 	beq	r8,zero,1f5f4 <__alt_data_end+0xfc01f5f4>
   1fb8c:	3463c83a 	sub	r17,r6,r17
   1fb90:	28c5c83a 	sub	r2,r5,r3
   1fb94:	344d803a 	cmpltu	r6,r6,r17
   1fb98:	1187c83a 	sub	r3,r2,r6
   1fb9c:	3825883a 	mov	r18,r7
   1fba0:	003e3606 	br	1f47c <__alt_data_end+0xfc01f47c>
   1fba4:	0101ffc4 	movi	r4,2047
   1fba8:	493fc71e 	bne	r9,r4,1fac8 <__alt_data_end+0xfc01fac8>
   1fbac:	2807883a 	mov	r3,r5
   1fbb0:	3023883a 	mov	r17,r6
   1fbb4:	4821883a 	mov	r16,r9
   1fbb8:	003e3006 	br	1f47c <__alt_data_end+0xfc01f47c>
   1fbbc:	10003626 	beq	r2,zero,1fc98 <__subdf3+0x8a0>
   1fbc0:	2984b03a 	or	r2,r5,r6
   1fbc4:	10001726 	beq	r2,zero,1fc24 <__subdf3+0x82c>
   1fbc8:	1808d0fa 	srli	r4,r3,3
   1fbcc:	8822d0fa 	srli	r17,r17,3
   1fbd0:	1806977a 	slli	r3,r3,29
   1fbd4:	2080022c 	andhi	r2,r4,8
   1fbd8:	1c62b03a 	or	r17,r3,r17
   1fbdc:	10000726 	beq	r2,zero,1fbfc <__subdf3+0x804>
   1fbe0:	2812d0fa 	srli	r9,r5,3
   1fbe4:	4880022c 	andhi	r2,r9,8
   1fbe8:	1000041e 	bne	r2,zero,1fbfc <__subdf3+0x804>
   1fbec:	300cd0fa 	srli	r6,r6,3
   1fbf0:	2804977a 	slli	r2,r5,29
   1fbf4:	4809883a 	mov	r4,r9
   1fbf8:	11a2b03a 	or	r17,r2,r6
   1fbfc:	8806d77a 	srli	r3,r17,29
   1fc00:	200890fa 	slli	r4,r4,3
   1fc04:	882290fa 	slli	r17,r17,3
   1fc08:	3825883a 	mov	r18,r7
   1fc0c:	1906b03a 	or	r3,r3,r4
   1fc10:	0401ffc4 	movi	r16,2047
   1fc14:	003e1906 	br	1f47c <__alt_data_end+0xfc01f47c>
   1fc18:	000b883a 	mov	r5,zero
   1fc1c:	0005883a 	mov	r2,zero
   1fc20:	003e2e06 	br	1f4dc <__alt_data_end+0xfc01f4dc>
   1fc24:	0401ffc4 	movi	r16,2047
   1fc28:	003e1406 	br	1f47c <__alt_data_end+0xfc01f47c>
   1fc2c:	0005883a 	mov	r2,zero
   1fc30:	003f7506 	br	1fa08 <__alt_data_end+0xfc01fa08>
   1fc34:	0005883a 	mov	r2,zero
   1fc38:	0009883a 	mov	r4,zero
   1fc3c:	003e7806 	br	1f620 <__alt_data_end+0xfc01f620>
   1fc40:	123ff804 	addi	r8,r2,-32
   1fc44:	01000804 	movi	r4,32
   1fc48:	1a10d83a 	srl	r8,r3,r8
   1fc4c:	11002526 	beq	r2,r4,1fce4 <__subdf3+0x8ec>
   1fc50:	01001004 	movi	r4,64
   1fc54:	2085c83a 	sub	r2,r4,r2
   1fc58:	1884983a 	sll	r2,r3,r2
   1fc5c:	1444b03a 	or	r2,r2,r17
   1fc60:	1004c03a 	cmpne	r2,r2,zero
   1fc64:	40a2b03a 	or	r17,r8,r2
   1fc68:	0005883a 	mov	r2,zero
   1fc6c:	003f1606 	br	1f8c8 <__alt_data_end+0xfc01f8c8>
   1fc70:	02000434 	movhi	r8,16
   1fc74:	0009883a 	mov	r4,zero
   1fc78:	423fffc4 	addi	r8,r8,-1
   1fc7c:	00bfffc4 	movi	r2,-1
   1fc80:	0401ffc4 	movi	r16,2047
   1fc84:	003e6606 	br	1f620 <__alt_data_end+0xfc01f620>
   1fc88:	1c62b03a 	or	r17,r3,r17
   1fc8c:	8822c03a 	cmpne	r17,r17,zero
   1fc90:	0005883a 	mov	r2,zero
   1fc94:	003f9906 	br	1fafc <__alt_data_end+0xfc01fafc>
   1fc98:	2807883a 	mov	r3,r5
   1fc9c:	3023883a 	mov	r17,r6
   1fca0:	0401ffc4 	movi	r16,2047
   1fca4:	003df506 	br	1f47c <__alt_data_end+0xfc01f47c>
   1fca8:	2807883a 	mov	r3,r5
   1fcac:	3023883a 	mov	r17,r6
   1fcb0:	003df206 	br	1f47c <__alt_data_end+0xfc01f47c>
   1fcb4:	123ff804 	addi	r8,r2,-32
   1fcb8:	01000804 	movi	r4,32
   1fcbc:	1a10d83a 	srl	r8,r3,r8
   1fcc0:	11000a26 	beq	r2,r4,1fcec <__subdf3+0x8f4>
   1fcc4:	01001004 	movi	r4,64
   1fcc8:	2085c83a 	sub	r2,r4,r2
   1fccc:	1884983a 	sll	r2,r3,r2
   1fcd0:	1444b03a 	or	r2,r2,r17
   1fcd4:	1004c03a 	cmpne	r2,r2,zero
   1fcd8:	40a2b03a 	or	r17,r8,r2
   1fcdc:	0005883a 	mov	r2,zero
   1fce0:	003f8606 	br	1fafc <__alt_data_end+0xfc01fafc>
   1fce4:	0005883a 	mov	r2,zero
   1fce8:	003fdc06 	br	1fc5c <__alt_data_end+0xfc01fc5c>
   1fcec:	0005883a 	mov	r2,zero
   1fcf0:	003ff706 	br	1fcd0 <__alt_data_end+0xfc01fcd0>

0001fcf4 <__fixdfsi>:
   1fcf4:	280cd53a 	srli	r6,r5,20
   1fcf8:	00c00434 	movhi	r3,16
   1fcfc:	18ffffc4 	addi	r3,r3,-1
   1fd00:	3181ffcc 	andi	r6,r6,2047
   1fd04:	01c0ff84 	movi	r7,1022
   1fd08:	28c6703a 	and	r3,r5,r3
   1fd0c:	280ad7fa 	srli	r5,r5,31
   1fd10:	3980120e 	bge	r7,r6,1fd5c <__fixdfsi+0x68>
   1fd14:	00810744 	movi	r2,1053
   1fd18:	11800c16 	blt	r2,r6,1fd4c <__fixdfsi+0x58>
   1fd1c:	00810cc4 	movi	r2,1075
   1fd20:	1185c83a 	sub	r2,r2,r6
   1fd24:	01c007c4 	movi	r7,31
   1fd28:	18c00434 	orhi	r3,r3,16
   1fd2c:	38800d16 	blt	r7,r2,1fd64 <__fixdfsi+0x70>
   1fd30:	31befb44 	addi	r6,r6,-1043
   1fd34:	2084d83a 	srl	r2,r4,r2
   1fd38:	1986983a 	sll	r3,r3,r6
   1fd3c:	1884b03a 	or	r2,r3,r2
   1fd40:	28000726 	beq	r5,zero,1fd60 <__fixdfsi+0x6c>
   1fd44:	0085c83a 	sub	r2,zero,r2
   1fd48:	f800283a 	ret
   1fd4c:	00a00034 	movhi	r2,32768
   1fd50:	10bfffc4 	addi	r2,r2,-1
   1fd54:	2885883a 	add	r2,r5,r2
   1fd58:	f800283a 	ret
   1fd5c:	0005883a 	mov	r2,zero
   1fd60:	f800283a 	ret
   1fd64:	008104c4 	movi	r2,1043
   1fd68:	1185c83a 	sub	r2,r2,r6
   1fd6c:	1884d83a 	srl	r2,r3,r2
   1fd70:	003ff306 	br	1fd40 <__alt_data_end+0xfc01fd40>

0001fd74 <__floatsidf>:
   1fd74:	defffd04 	addi	sp,sp,-12
   1fd78:	dfc00215 	stw	ra,8(sp)
   1fd7c:	dc400115 	stw	r17,4(sp)
   1fd80:	dc000015 	stw	r16,0(sp)
   1fd84:	20002b26 	beq	r4,zero,1fe34 <__floatsidf+0xc0>
   1fd88:	2023883a 	mov	r17,r4
   1fd8c:	2020d7fa 	srli	r16,r4,31
   1fd90:	20002d16 	blt	r4,zero,1fe48 <__floatsidf+0xd4>
   1fd94:	8809883a 	mov	r4,r17
   1fd98:	000f3840 	call	f384 <__clzsi2>
   1fd9c:	01410784 	movi	r5,1054
   1fda0:	288bc83a 	sub	r5,r5,r2
   1fda4:	01010cc4 	movi	r4,1075
   1fda8:	2149c83a 	sub	r4,r4,r5
   1fdac:	00c007c4 	movi	r3,31
   1fdb0:	1900160e 	bge	r3,r4,1fe0c <__floatsidf+0x98>
   1fdb4:	00c104c4 	movi	r3,1043
   1fdb8:	1947c83a 	sub	r3,r3,r5
   1fdbc:	88c6983a 	sll	r3,r17,r3
   1fdc0:	00800434 	movhi	r2,16
   1fdc4:	10bfffc4 	addi	r2,r2,-1
   1fdc8:	1886703a 	and	r3,r3,r2
   1fdcc:	2941ffcc 	andi	r5,r5,2047
   1fdd0:	800d883a 	mov	r6,r16
   1fdd4:	0005883a 	mov	r2,zero
   1fdd8:	280a953a 	slli	r5,r5,20
   1fddc:	31803fcc 	andi	r6,r6,255
   1fde0:	01000434 	movhi	r4,16
   1fde4:	300c97fa 	slli	r6,r6,31
   1fde8:	213fffc4 	addi	r4,r4,-1
   1fdec:	1906703a 	and	r3,r3,r4
   1fdf0:	1946b03a 	or	r3,r3,r5
   1fdf4:	1986b03a 	or	r3,r3,r6
   1fdf8:	dfc00217 	ldw	ra,8(sp)
   1fdfc:	dc400117 	ldw	r17,4(sp)
   1fe00:	dc000017 	ldw	r16,0(sp)
   1fe04:	dec00304 	addi	sp,sp,12
   1fe08:	f800283a 	ret
   1fe0c:	00c002c4 	movi	r3,11
   1fe10:	1887c83a 	sub	r3,r3,r2
   1fe14:	88c6d83a 	srl	r3,r17,r3
   1fe18:	8904983a 	sll	r2,r17,r4
   1fe1c:	01000434 	movhi	r4,16
   1fe20:	213fffc4 	addi	r4,r4,-1
   1fe24:	2941ffcc 	andi	r5,r5,2047
   1fe28:	1906703a 	and	r3,r3,r4
   1fe2c:	800d883a 	mov	r6,r16
   1fe30:	003fe906 	br	1fdd8 <__alt_data_end+0xfc01fdd8>
   1fe34:	000d883a 	mov	r6,zero
   1fe38:	000b883a 	mov	r5,zero
   1fe3c:	0007883a 	mov	r3,zero
   1fe40:	0005883a 	mov	r2,zero
   1fe44:	003fe406 	br	1fdd8 <__alt_data_end+0xfc01fdd8>
   1fe48:	0123c83a 	sub	r17,zero,r4
   1fe4c:	003fd106 	br	1fd94 <__alt_data_end+0xfc01fd94>

0001fe50 <__floatunsidf>:
   1fe50:	defffe04 	addi	sp,sp,-8
   1fe54:	dc000015 	stw	r16,0(sp)
   1fe58:	dfc00115 	stw	ra,4(sp)
   1fe5c:	2021883a 	mov	r16,r4
   1fe60:	20002226 	beq	r4,zero,1feec <__floatunsidf+0x9c>
   1fe64:	000f3840 	call	f384 <__clzsi2>
   1fe68:	01010784 	movi	r4,1054
   1fe6c:	2089c83a 	sub	r4,r4,r2
   1fe70:	01810cc4 	movi	r6,1075
   1fe74:	310dc83a 	sub	r6,r6,r4
   1fe78:	00c007c4 	movi	r3,31
   1fe7c:	1980120e 	bge	r3,r6,1fec8 <__floatunsidf+0x78>
   1fe80:	00c104c4 	movi	r3,1043
   1fe84:	1907c83a 	sub	r3,r3,r4
   1fe88:	80ca983a 	sll	r5,r16,r3
   1fe8c:	00800434 	movhi	r2,16
   1fe90:	10bfffc4 	addi	r2,r2,-1
   1fe94:	2101ffcc 	andi	r4,r4,2047
   1fe98:	0021883a 	mov	r16,zero
   1fe9c:	288a703a 	and	r5,r5,r2
   1fea0:	2008953a 	slli	r4,r4,20
   1fea4:	00c00434 	movhi	r3,16
   1fea8:	18ffffc4 	addi	r3,r3,-1
   1feac:	28c6703a 	and	r3,r5,r3
   1feb0:	8005883a 	mov	r2,r16
   1feb4:	1906b03a 	or	r3,r3,r4
   1feb8:	dfc00117 	ldw	ra,4(sp)
   1febc:	dc000017 	ldw	r16,0(sp)
   1fec0:	dec00204 	addi	sp,sp,8
   1fec4:	f800283a 	ret
   1fec8:	00c002c4 	movi	r3,11
   1fecc:	188bc83a 	sub	r5,r3,r2
   1fed0:	814ad83a 	srl	r5,r16,r5
   1fed4:	00c00434 	movhi	r3,16
   1fed8:	18ffffc4 	addi	r3,r3,-1
   1fedc:	81a0983a 	sll	r16,r16,r6
   1fee0:	2101ffcc 	andi	r4,r4,2047
   1fee4:	28ca703a 	and	r5,r5,r3
   1fee8:	003fed06 	br	1fea0 <__alt_data_end+0xfc01fea0>
   1feec:	0009883a 	mov	r4,zero
   1fef0:	000b883a 	mov	r5,zero
   1fef4:	003fea06 	br	1fea0 <__alt_data_end+0xfc01fea0>

0001fef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1fef8:	defffe04 	addi	sp,sp,-8
   1fefc:	dfc00115 	stw	ra,4(sp)
   1ff00:	df000015 	stw	fp,0(sp)
   1ff04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ff08:	d0a5bd17 	ldw	r2,-26892(gp)
   1ff0c:	10000326 	beq	r2,zero,1ff1c <alt_get_errno+0x24>
   1ff10:	d0a5bd17 	ldw	r2,-26892(gp)
   1ff14:	103ee83a 	callr	r2
   1ff18:	00000106 	br	1ff20 <alt_get_errno+0x28>
   1ff1c:	d0b24e04 	addi	r2,gp,-14024
}
   1ff20:	e037883a 	mov	sp,fp
   1ff24:	dfc00117 	ldw	ra,4(sp)
   1ff28:	df000017 	ldw	fp,0(sp)
   1ff2c:	dec00204 	addi	sp,sp,8
   1ff30:	f800283a 	ret

0001ff34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1ff34:	defffb04 	addi	sp,sp,-20
   1ff38:	dfc00415 	stw	ra,16(sp)
   1ff3c:	df000315 	stw	fp,12(sp)
   1ff40:	df000304 	addi	fp,sp,12
   1ff44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1ff48:	e0bfff17 	ldw	r2,-4(fp)
   1ff4c:	10000816 	blt	r2,zero,1ff70 <close+0x3c>
   1ff50:	01400304 	movi	r5,12
   1ff54:	e13fff17 	ldw	r4,-4(fp)
   1ff58:	000d8e00 	call	d8e0 <__mulsi3>
   1ff5c:	1007883a 	mov	r3,r2
   1ff60:	008000f4 	movhi	r2,3
   1ff64:	10b10304 	addi	r2,r2,-15348
   1ff68:	1885883a 	add	r2,r3,r2
   1ff6c:	00000106 	br	1ff74 <close+0x40>
   1ff70:	0005883a 	mov	r2,zero
   1ff74:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1ff78:	e0bffd17 	ldw	r2,-12(fp)
   1ff7c:	10001926 	beq	r2,zero,1ffe4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1ff80:	e0bffd17 	ldw	r2,-12(fp)
   1ff84:	10800017 	ldw	r2,0(r2)
   1ff88:	10800417 	ldw	r2,16(r2)
   1ff8c:	10000626 	beq	r2,zero,1ffa8 <close+0x74>
   1ff90:	e0bffd17 	ldw	r2,-12(fp)
   1ff94:	10800017 	ldw	r2,0(r2)
   1ff98:	10800417 	ldw	r2,16(r2)
   1ff9c:	e13ffd17 	ldw	r4,-12(fp)
   1ffa0:	103ee83a 	callr	r2
   1ffa4:	00000106 	br	1ffac <close+0x78>
   1ffa8:	0005883a 	mov	r2,zero
   1ffac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1ffb0:	e13fff17 	ldw	r4,-4(fp)
   1ffb4:	00207dc0 	call	207dc <alt_release_fd>
    if (rval < 0)
   1ffb8:	e0bffe17 	ldw	r2,-8(fp)
   1ffbc:	1000070e 	bge	r2,zero,1ffdc <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1ffc0:	001fef80 	call	1fef8 <alt_get_errno>
   1ffc4:	1007883a 	mov	r3,r2
   1ffc8:	e0bffe17 	ldw	r2,-8(fp)
   1ffcc:	0085c83a 	sub	r2,zero,r2
   1ffd0:	18800015 	stw	r2,0(r3)
      return -1;
   1ffd4:	00bfffc4 	movi	r2,-1
   1ffd8:	00000706 	br	1fff8 <close+0xc4>
    }
    return 0;
   1ffdc:	0005883a 	mov	r2,zero
   1ffe0:	00000506 	br	1fff8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1ffe4:	001fef80 	call	1fef8 <alt_get_errno>
   1ffe8:	1007883a 	mov	r3,r2
   1ffec:	00801444 	movi	r2,81
   1fff0:	18800015 	stw	r2,0(r3)
    return -1;
   1fff4:	00bfffc4 	movi	r2,-1
  }
}
   1fff8:	e037883a 	mov	sp,fp
   1fffc:	dfc00117 	ldw	ra,4(sp)
   20000:	df000017 	ldw	fp,0(sp)
   20004:	dec00204 	addi	sp,sp,8
   20008:	f800283a 	ret

0002000c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2000c:	defffc04 	addi	sp,sp,-16
   20010:	df000315 	stw	fp,12(sp)
   20014:	df000304 	addi	fp,sp,12
   20018:	e13ffd15 	stw	r4,-12(fp)
   2001c:	e17ffe15 	stw	r5,-8(fp)
   20020:	e1bfff15 	stw	r6,-4(fp)
  return len;
   20024:	e0bfff17 	ldw	r2,-4(fp)
}
   20028:	e037883a 	mov	sp,fp
   2002c:	df000017 	ldw	fp,0(sp)
   20030:	dec00104 	addi	sp,sp,4
   20034:	f800283a 	ret

00020038 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   20038:	defffd04 	addi	sp,sp,-12
   2003c:	df000215 	stw	fp,8(sp)
   20040:	df000204 	addi	fp,sp,8
   20044:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   20048:	0001883a 	nop
   2004c:	e0bfff17 	ldw	r2,-4(fp)
   20050:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   20054:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   20058:	10000226 	beq	r2,zero,20064 <_exit+0x2c>
    ALT_SIM_FAIL();
   2005c:	002af070 	cmpltui	zero,zero,43969
   20060:	00000106 	br	20068 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   20064:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   20068:	003fff06 	br	20068 <__alt_data_end+0xfc020068>

0002006c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2006c:	defffe04 	addi	sp,sp,-8
   20070:	dfc00115 	stw	ra,4(sp)
   20074:	df000015 	stw	fp,0(sp)
   20078:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2007c:	d0a5bd17 	ldw	r2,-26892(gp)
   20080:	10000326 	beq	r2,zero,20090 <alt_get_errno+0x24>
   20084:	d0a5bd17 	ldw	r2,-26892(gp)
   20088:	103ee83a 	callr	r2
   2008c:	00000106 	br	20094 <alt_get_errno+0x28>
   20090:	d0b24e04 	addi	r2,gp,-14024
}
   20094:	e037883a 	mov	sp,fp
   20098:	dfc00117 	ldw	ra,4(sp)
   2009c:	df000017 	ldw	fp,0(sp)
   200a0:	dec00204 	addi	sp,sp,8
   200a4:	f800283a 	ret

000200a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   200a8:	defffb04 	addi	sp,sp,-20
   200ac:	dfc00415 	stw	ra,16(sp)
   200b0:	df000315 	stw	fp,12(sp)
   200b4:	df000304 	addi	fp,sp,12
   200b8:	e13ffe15 	stw	r4,-8(fp)
   200bc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   200c0:	e0bffe17 	ldw	r2,-8(fp)
   200c4:	10000816 	blt	r2,zero,200e8 <fstat+0x40>
   200c8:	01400304 	movi	r5,12
   200cc:	e13ffe17 	ldw	r4,-8(fp)
   200d0:	000d8e00 	call	d8e0 <__mulsi3>
   200d4:	1007883a 	mov	r3,r2
   200d8:	008000f4 	movhi	r2,3
   200dc:	10b10304 	addi	r2,r2,-15348
   200e0:	1885883a 	add	r2,r3,r2
   200e4:	00000106 	br	200ec <fstat+0x44>
   200e8:	0005883a 	mov	r2,zero
   200ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   200f0:	e0bffd17 	ldw	r2,-12(fp)
   200f4:	10001026 	beq	r2,zero,20138 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   200f8:	e0bffd17 	ldw	r2,-12(fp)
   200fc:	10800017 	ldw	r2,0(r2)
   20100:	10800817 	ldw	r2,32(r2)
   20104:	10000726 	beq	r2,zero,20124 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   20108:	e0bffd17 	ldw	r2,-12(fp)
   2010c:	10800017 	ldw	r2,0(r2)
   20110:	10800817 	ldw	r2,32(r2)
   20114:	e17fff17 	ldw	r5,-4(fp)
   20118:	e13ffd17 	ldw	r4,-12(fp)
   2011c:	103ee83a 	callr	r2
   20120:	00000a06 	br	2014c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   20124:	e0bfff17 	ldw	r2,-4(fp)
   20128:	00c80004 	movi	r3,8192
   2012c:	10c00115 	stw	r3,4(r2)
      return 0;
   20130:	0005883a 	mov	r2,zero
   20134:	00000506 	br	2014c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   20138:	002006c0 	call	2006c <alt_get_errno>
   2013c:	1007883a 	mov	r3,r2
   20140:	00801444 	movi	r2,81
   20144:	18800015 	stw	r2,0(r3)
    return -1;
   20148:	00bfffc4 	movi	r2,-1
  }
}
   2014c:	e037883a 	mov	sp,fp
   20150:	dfc00117 	ldw	ra,4(sp)
   20154:	df000017 	ldw	fp,0(sp)
   20158:	dec00204 	addi	sp,sp,8
   2015c:	f800283a 	ret

00020160 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   20160:	deffff04 	addi	sp,sp,-4
   20164:	df000015 	stw	fp,0(sp)
   20168:	d839883a 	mov	fp,sp
  return 0;
   2016c:	0005883a 	mov	r2,zero
}
   20170:	e037883a 	mov	sp,fp
   20174:	df000017 	ldw	fp,0(sp)
   20178:	dec00104 	addi	sp,sp,4
   2017c:	f800283a 	ret

00020180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20180:	defffe04 	addi	sp,sp,-8
   20184:	dfc00115 	stw	ra,4(sp)
   20188:	df000015 	stw	fp,0(sp)
   2018c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20190:	d0a5bd17 	ldw	r2,-26892(gp)
   20194:	10000326 	beq	r2,zero,201a4 <alt_get_errno+0x24>
   20198:	d0a5bd17 	ldw	r2,-26892(gp)
   2019c:	103ee83a 	callr	r2
   201a0:	00000106 	br	201a8 <alt_get_errno+0x28>
   201a4:	d0b24e04 	addi	r2,gp,-14024
}
   201a8:	e037883a 	mov	sp,fp
   201ac:	dfc00117 	ldw	ra,4(sp)
   201b0:	df000017 	ldw	fp,0(sp)
   201b4:	dec00204 	addi	sp,sp,8
   201b8:	f800283a 	ret

000201bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   201bc:	deffed04 	addi	sp,sp,-76
   201c0:	dfc01215 	stw	ra,72(sp)
   201c4:	df001115 	stw	fp,68(sp)
   201c8:	df001104 	addi	fp,sp,68
   201cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   201d0:	e0bfff17 	ldw	r2,-4(fp)
   201d4:	10000816 	blt	r2,zero,201f8 <isatty+0x3c>
   201d8:	01400304 	movi	r5,12
   201dc:	e13fff17 	ldw	r4,-4(fp)
   201e0:	000d8e00 	call	d8e0 <__mulsi3>
   201e4:	1007883a 	mov	r3,r2
   201e8:	008000f4 	movhi	r2,3
   201ec:	10b10304 	addi	r2,r2,-15348
   201f0:	1885883a 	add	r2,r3,r2
   201f4:	00000106 	br	201fc <isatty+0x40>
   201f8:	0005883a 	mov	r2,zero
   201fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   20200:	e0bfef17 	ldw	r2,-68(fp)
   20204:	10000e26 	beq	r2,zero,20240 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   20208:	e0bfef17 	ldw	r2,-68(fp)
   2020c:	10800017 	ldw	r2,0(r2)
   20210:	10800817 	ldw	r2,32(r2)
   20214:	1000021e 	bne	r2,zero,20220 <isatty+0x64>
    {
      return 1;
   20218:	00800044 	movi	r2,1
   2021c:	00000d06 	br	20254 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   20220:	e0bff004 	addi	r2,fp,-64
   20224:	100b883a 	mov	r5,r2
   20228:	e13fff17 	ldw	r4,-4(fp)
   2022c:	00200a80 	call	200a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   20230:	e0bff117 	ldw	r2,-60(fp)
   20234:	10880020 	cmpeqi	r2,r2,8192
   20238:	10803fcc 	andi	r2,r2,255
   2023c:	00000506 	br	20254 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   20240:	00201800 	call	20180 <alt_get_errno>
   20244:	1007883a 	mov	r3,r2
   20248:	00801444 	movi	r2,81
   2024c:	18800015 	stw	r2,0(r3)
    return 0;
   20250:	0005883a 	mov	r2,zero
  }
}
   20254:	e037883a 	mov	sp,fp
   20258:	dfc00117 	ldw	ra,4(sp)
   2025c:	df000017 	ldw	fp,0(sp)
   20260:	dec00204 	addi	sp,sp,8
   20264:	f800283a 	ret

00020268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20268:	defffe04 	addi	sp,sp,-8
   2026c:	dfc00115 	stw	ra,4(sp)
   20270:	df000015 	stw	fp,0(sp)
   20274:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20278:	d0a5bd17 	ldw	r2,-26892(gp)
   2027c:	10000326 	beq	r2,zero,2028c <alt_get_errno+0x24>
   20280:	d0a5bd17 	ldw	r2,-26892(gp)
   20284:	103ee83a 	callr	r2
   20288:	00000106 	br	20290 <alt_get_errno+0x28>
   2028c:	d0b24e04 	addi	r2,gp,-14024
}
   20290:	e037883a 	mov	sp,fp
   20294:	dfc00117 	ldw	ra,4(sp)
   20298:	df000017 	ldw	fp,0(sp)
   2029c:	dec00204 	addi	sp,sp,8
   202a0:	f800283a 	ret

000202a4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   202a4:	defffb04 	addi	sp,sp,-20
   202a8:	dfc00415 	stw	ra,16(sp)
   202ac:	df000315 	stw	fp,12(sp)
   202b0:	df000304 	addi	fp,sp,12
   202b4:	e13ffe15 	stw	r4,-8(fp)
   202b8:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   202bc:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   202c0:	e0bffe17 	ldw	r2,-8(fp)
   202c4:	00802f16 	blt	zero,r2,20384 <kill+0xe0>
  {
    switch (sig)
   202c8:	e0bfff17 	ldw	r2,-4(fp)
   202cc:	10800828 	cmpgeui	r2,r2,32
   202d0:	1000291e 	bne	r2,zero,20378 <kill+0xd4>
   202d4:	e0bfff17 	ldw	r2,-4(fp)
   202d8:	100690ba 	slli	r3,r2,2
   202dc:	008000b4 	movhi	r2,2
   202e0:	1080bc04 	addi	r2,r2,752
   202e4:	1885883a 	add	r2,r3,r2
   202e8:	10800017 	ldw	r2,0(r2)
   202ec:	1000683a 	jmp	r2
   202f0:	00020398 	cmpnei	zero,zero,2062
   202f4:	00020378 	rdprs	zero,zero,2061
   202f8:	00020378 	rdprs	zero,zero,2061
   202fc:	00020370 	cmpltui	zero,zero,2061
   20300:	00020370 	cmpltui	zero,zero,2061
   20304:	00020370 	cmpltui	zero,zero,2061
   20308:	00020370 	cmpltui	zero,zero,2061
   2030c:	00020378 	rdprs	zero,zero,2061
   20310:	00020370 	cmpltui	zero,zero,2061
   20314:	00020370 	cmpltui	zero,zero,2061
   20318:	00020370 	cmpltui	zero,zero,2061
   2031c:	00020370 	cmpltui	zero,zero,2061
   20320:	00020370 	cmpltui	zero,zero,2061
   20324:	00020370 	cmpltui	zero,zero,2061
   20328:	00020370 	cmpltui	zero,zero,2061
   2032c:	00020370 	cmpltui	zero,zero,2061
   20330:	00020398 	cmpnei	zero,zero,2062
   20334:	00020378 	rdprs	zero,zero,2061
   20338:	00020378 	rdprs	zero,zero,2061
   2033c:	00020378 	rdprs	zero,zero,2061
   20340:	00020398 	cmpnei	zero,zero,2062
   20344:	00020378 	rdprs	zero,zero,2061
   20348:	00020378 	rdprs	zero,zero,2061
   2034c:	00020370 	cmpltui	zero,zero,2061
   20350:	00020370 	cmpltui	zero,zero,2061
   20354:	00020370 	cmpltui	zero,zero,2061
   20358:	00020370 	cmpltui	zero,zero,2061
   2035c:	00020370 	cmpltui	zero,zero,2061
   20360:	00020378 	rdprs	zero,zero,2061
   20364:	00020378 	rdprs	zero,zero,2061
   20368:	00020370 	cmpltui	zero,zero,2061
   2036c:	00020370 	cmpltui	zero,zero,2061
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   20370:	0009883a 	mov	r4,zero
   20374:	00200380 	call	20038 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   20378:	00800584 	movi	r2,22
   2037c:	e0bffd15 	stw	r2,-12(fp)
   20380:	00000606 	br	2039c <kill+0xf8>
    }
  }

  else if (pid > 0)
   20384:	e0bffe17 	ldw	r2,-8(fp)
   20388:	0080040e 	bge	zero,r2,2039c <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   2038c:	008000c4 	movi	r2,3
   20390:	e0bffd15 	stw	r2,-12(fp)
   20394:	00000106 	br	2039c <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   20398:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   2039c:	e0bffd17 	ldw	r2,-12(fp)
   203a0:	10000626 	beq	r2,zero,203bc <kill+0x118>
  {
    ALT_ERRNO = status;
   203a4:	00202680 	call	20268 <alt_get_errno>
   203a8:	1007883a 	mov	r3,r2
   203ac:	e0bffd17 	ldw	r2,-12(fp)
   203b0:	18800015 	stw	r2,0(r3)
    return -1;
   203b4:	00bfffc4 	movi	r2,-1
   203b8:	00000106 	br	203c0 <kill+0x11c>
  }

  return 0;
   203bc:	0005883a 	mov	r2,zero
}
   203c0:	e037883a 	mov	sp,fp
   203c4:	dfc00117 	ldw	ra,4(sp)
   203c8:	df000017 	ldw	fp,0(sp)
   203cc:	dec00204 	addi	sp,sp,8
   203d0:	f800283a 	ret

000203d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   203d4:	defffc04 	addi	sp,sp,-16
   203d8:	df000315 	stw	fp,12(sp)
   203dc:	df000304 	addi	fp,sp,12
   203e0:	e13ffd15 	stw	r4,-12(fp)
   203e4:	e17ffe15 	stw	r5,-8(fp)
   203e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   203ec:	e0fffe17 	ldw	r3,-8(fp)
   203f0:	e0bffd17 	ldw	r2,-12(fp)
   203f4:	18800c26 	beq	r3,r2,20428 <alt_load_section+0x54>
  {
    while( to != end )
   203f8:	00000806 	br	2041c <alt_load_section+0x48>
    {
      *to++ = *from++;
   203fc:	e0bffe17 	ldw	r2,-8(fp)
   20400:	10c00104 	addi	r3,r2,4
   20404:	e0fffe15 	stw	r3,-8(fp)
   20408:	e0fffd17 	ldw	r3,-12(fp)
   2040c:	19000104 	addi	r4,r3,4
   20410:	e13ffd15 	stw	r4,-12(fp)
   20414:	18c00017 	ldw	r3,0(r3)
   20418:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2041c:	e0fffe17 	ldw	r3,-8(fp)
   20420:	e0bfff17 	ldw	r2,-4(fp)
   20424:	18bff51e 	bne	r3,r2,203fc <__alt_data_end+0xfc0203fc>
    {
      *to++ = *from++;
    }
  }
}
   20428:	0001883a 	nop
   2042c:	e037883a 	mov	sp,fp
   20430:	df000017 	ldw	fp,0(sp)
   20434:	dec00104 	addi	sp,sp,4
   20438:	f800283a 	ret

0002043c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2043c:	defffe04 	addi	sp,sp,-8
   20440:	dfc00115 	stw	ra,4(sp)
   20444:	df000015 	stw	fp,0(sp)
   20448:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2044c:	018000f4 	movhi	r6,3
   20450:	31bb4d04 	addi	r6,r6,-4812
   20454:	014000f4 	movhi	r5,3
   20458:	296ed004 	addi	r5,r5,-17600
   2045c:	010000f4 	movhi	r4,3
   20460:	213b4d04 	addi	r4,r4,-4812
   20464:	00203d40 	call	203d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   20468:	01800034 	movhi	r6,0
   2046c:	31808c04 	addi	r6,r6,560
   20470:	01400034 	movhi	r5,0
   20474:	29400804 	addi	r5,r5,32
   20478:	01000034 	movhi	r4,0
   2047c:	21000804 	addi	r4,r4,32
   20480:	00203d40 	call	203d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   20484:	018000f4 	movhi	r6,3
   20488:	31aed004 	addi	r6,r6,-17600
   2048c:	014000b4 	movhi	r5,2
   20490:	2952cc04 	addi	r5,r5,19248
   20494:	010000b4 	movhi	r4,2
   20498:	2112cc04 	addi	r4,r4,19248
   2049c:	00203d40 	call	203d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   204a0:	00238040 	call	23804 <alt_dcache_flush_all>
  alt_icache_flush_all();
   204a4:	0023a540 	call	23a54 <alt_icache_flush_all>
}
   204a8:	0001883a 	nop
   204ac:	e037883a 	mov	sp,fp
   204b0:	dfc00117 	ldw	ra,4(sp)
   204b4:	df000017 	ldw	fp,0(sp)
   204b8:	dec00204 	addi	sp,sp,8
   204bc:	f800283a 	ret

000204c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   204c0:	defffe04 	addi	sp,sp,-8
   204c4:	dfc00115 	stw	ra,4(sp)
   204c8:	df000015 	stw	fp,0(sp)
   204cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   204d0:	d0a5bd17 	ldw	r2,-26892(gp)
   204d4:	10000326 	beq	r2,zero,204e4 <alt_get_errno+0x24>
   204d8:	d0a5bd17 	ldw	r2,-26892(gp)
   204dc:	103ee83a 	callr	r2
   204e0:	00000106 	br	204e8 <alt_get_errno+0x28>
   204e4:	d0b24e04 	addi	r2,gp,-14024
}
   204e8:	e037883a 	mov	sp,fp
   204ec:	dfc00117 	ldw	ra,4(sp)
   204f0:	df000017 	ldw	fp,0(sp)
   204f4:	dec00204 	addi	sp,sp,8
   204f8:	f800283a 	ret

000204fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   204fc:	defff904 	addi	sp,sp,-28
   20500:	dfc00615 	stw	ra,24(sp)
   20504:	df000515 	stw	fp,20(sp)
   20508:	df000504 	addi	fp,sp,20
   2050c:	e13ffd15 	stw	r4,-12(fp)
   20510:	e17ffe15 	stw	r5,-8(fp)
   20514:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   20518:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2051c:	e0bffd17 	ldw	r2,-12(fp)
   20520:	10000816 	blt	r2,zero,20544 <lseek+0x48>
   20524:	01400304 	movi	r5,12
   20528:	e13ffd17 	ldw	r4,-12(fp)
   2052c:	000d8e00 	call	d8e0 <__mulsi3>
   20530:	1007883a 	mov	r3,r2
   20534:	008000f4 	movhi	r2,3
   20538:	10b10304 	addi	r2,r2,-15348
   2053c:	1885883a 	add	r2,r3,r2
   20540:	00000106 	br	20548 <lseek+0x4c>
   20544:	0005883a 	mov	r2,zero
   20548:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2054c:	e0bffc17 	ldw	r2,-16(fp)
   20550:	10001026 	beq	r2,zero,20594 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   20554:	e0bffc17 	ldw	r2,-16(fp)
   20558:	10800017 	ldw	r2,0(r2)
   2055c:	10800717 	ldw	r2,28(r2)
   20560:	10000926 	beq	r2,zero,20588 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   20564:	e0bffc17 	ldw	r2,-16(fp)
   20568:	10800017 	ldw	r2,0(r2)
   2056c:	10800717 	ldw	r2,28(r2)
   20570:	e1bfff17 	ldw	r6,-4(fp)
   20574:	e17ffe17 	ldw	r5,-8(fp)
   20578:	e13ffc17 	ldw	r4,-16(fp)
   2057c:	103ee83a 	callr	r2
   20580:	e0bffb15 	stw	r2,-20(fp)
   20584:	00000506 	br	2059c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   20588:	00bfde84 	movi	r2,-134
   2058c:	e0bffb15 	stw	r2,-20(fp)
   20590:	00000206 	br	2059c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   20594:	00bfebc4 	movi	r2,-81
   20598:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2059c:	e0bffb17 	ldw	r2,-20(fp)
   205a0:	1000070e 	bge	r2,zero,205c0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   205a4:	00204c00 	call	204c0 <alt_get_errno>
   205a8:	1007883a 	mov	r3,r2
   205ac:	e0bffb17 	ldw	r2,-20(fp)
   205b0:	0085c83a 	sub	r2,zero,r2
   205b4:	18800015 	stw	r2,0(r3)
    rc = -1;
   205b8:	00bfffc4 	movi	r2,-1
   205bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   205c0:	e0bffb17 	ldw	r2,-20(fp)
}
   205c4:	e037883a 	mov	sp,fp
   205c8:	dfc00117 	ldw	ra,4(sp)
   205cc:	df000017 	ldw	fp,0(sp)
   205d0:	dec00204 	addi	sp,sp,8
   205d4:	f800283a 	ret

000205d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   205d8:	defffd04 	addi	sp,sp,-12
   205dc:	dfc00215 	stw	ra,8(sp)
   205e0:	df000115 	stw	fp,4(sp)
   205e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   205e8:	0009883a 	mov	r4,zero
   205ec:	0020b640 	call	20b64 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   205f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   205f4:	0020b9c0 	call	20b9c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   205f8:	018000f4 	movhi	r6,3
   205fc:	31aebb04 	addi	r6,r6,-17684
   20600:	014000f4 	movhi	r5,3
   20604:	296ebb04 	addi	r5,r5,-17684
   20608:	010000f4 	movhi	r4,3
   2060c:	212ebb04 	addi	r4,r4,-17684
   20610:	0023df80 	call	23df8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20614:	00239040 	call	23904 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20618:	010000b4 	movhi	r4,2
   2061c:	210e5904 	addi	r4,r4,14692
   20620:	00247900 	call	24790 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20624:	d0b25217 	ldw	r2,-14008(gp)
   20628:	d0f25317 	ldw	r3,-14004(gp)
   2062c:	d1325417 	ldw	r4,-14000(gp)
   20630:	200d883a 	mov	r6,r4
   20634:	180b883a 	mov	r5,r3
   20638:	1009883a 	mov	r4,r2
   2063c:	000ac200 	call	ac20 <main>
   20640:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   20644:	01000044 	movi	r4,1
   20648:	001ff340 	call	1ff34 <close>
  exit (result);
   2064c:	e13fff17 	ldw	r4,-4(fp)
   20650:	00247a40 	call	247a4 <exit>

00020654 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   20654:	defffe04 	addi	sp,sp,-8
   20658:	df000115 	stw	fp,4(sp)
   2065c:	df000104 	addi	fp,sp,4
   20660:	e13fff15 	stw	r4,-4(fp)
}
   20664:	0001883a 	nop
   20668:	e037883a 	mov	sp,fp
   2066c:	df000017 	ldw	fp,0(sp)
   20670:	dec00104 	addi	sp,sp,4
   20674:	f800283a 	ret

00020678 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   20678:	defffe04 	addi	sp,sp,-8
   2067c:	df000115 	stw	fp,4(sp)
   20680:	df000104 	addi	fp,sp,4
   20684:	e13fff15 	stw	r4,-4(fp)
}
   20688:	0001883a 	nop
   2068c:	e037883a 	mov	sp,fp
   20690:	df000017 	ldw	fp,0(sp)
   20694:	dec00104 	addi	sp,sp,4
   20698:	f800283a 	ret

0002069c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2069c:	defffe04 	addi	sp,sp,-8
   206a0:	dfc00115 	stw	ra,4(sp)
   206a4:	df000015 	stw	fp,0(sp)
   206a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   206ac:	d0a5bd17 	ldw	r2,-26892(gp)
   206b0:	10000326 	beq	r2,zero,206c0 <alt_get_errno+0x24>
   206b4:	d0a5bd17 	ldw	r2,-26892(gp)
   206b8:	103ee83a 	callr	r2
   206bc:	00000106 	br	206c4 <alt_get_errno+0x28>
   206c0:	d0b24e04 	addi	r2,gp,-14024
}
   206c4:	e037883a 	mov	sp,fp
   206c8:	dfc00117 	ldw	ra,4(sp)
   206cc:	df000017 	ldw	fp,0(sp)
   206d0:	dec00204 	addi	sp,sp,8
   206d4:	f800283a 	ret

000206d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   206d8:	defff904 	addi	sp,sp,-28
   206dc:	dfc00615 	stw	ra,24(sp)
   206e0:	df000515 	stw	fp,20(sp)
   206e4:	df000504 	addi	fp,sp,20
   206e8:	e13ffd15 	stw	r4,-12(fp)
   206ec:	e17ffe15 	stw	r5,-8(fp)
   206f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   206f4:	e0bffd17 	ldw	r2,-12(fp)
   206f8:	10000816 	blt	r2,zero,2071c <read+0x44>
   206fc:	01400304 	movi	r5,12
   20700:	e13ffd17 	ldw	r4,-12(fp)
   20704:	000d8e00 	call	d8e0 <__mulsi3>
   20708:	1007883a 	mov	r3,r2
   2070c:	008000f4 	movhi	r2,3
   20710:	10b10304 	addi	r2,r2,-15348
   20714:	1885883a 	add	r2,r3,r2
   20718:	00000106 	br	20720 <read+0x48>
   2071c:	0005883a 	mov	r2,zero
   20720:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   20724:	e0bffb17 	ldw	r2,-20(fp)
   20728:	10002226 	beq	r2,zero,207b4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2072c:	e0bffb17 	ldw	r2,-20(fp)
   20730:	10800217 	ldw	r2,8(r2)
   20734:	108000cc 	andi	r2,r2,3
   20738:	10800060 	cmpeqi	r2,r2,1
   2073c:	1000181e 	bne	r2,zero,207a0 <read+0xc8>
        (fd->dev->read))
   20740:	e0bffb17 	ldw	r2,-20(fp)
   20744:	10800017 	ldw	r2,0(r2)
   20748:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2074c:	10001426 	beq	r2,zero,207a0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   20750:	e0bffb17 	ldw	r2,-20(fp)
   20754:	10800017 	ldw	r2,0(r2)
   20758:	10800517 	ldw	r2,20(r2)
   2075c:	e0ffff17 	ldw	r3,-4(fp)
   20760:	180d883a 	mov	r6,r3
   20764:	e17ffe17 	ldw	r5,-8(fp)
   20768:	e13ffb17 	ldw	r4,-20(fp)
   2076c:	103ee83a 	callr	r2
   20770:	e0bffc15 	stw	r2,-16(fp)
   20774:	e0bffc17 	ldw	r2,-16(fp)
   20778:	1000070e 	bge	r2,zero,20798 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   2077c:	002069c0 	call	2069c <alt_get_errno>
   20780:	1007883a 	mov	r3,r2
   20784:	e0bffc17 	ldw	r2,-16(fp)
   20788:	0085c83a 	sub	r2,zero,r2
   2078c:	18800015 	stw	r2,0(r3)
          return -1;
   20790:	00bfffc4 	movi	r2,-1
   20794:	00000c06 	br	207c8 <read+0xf0>
        }
        return rval;
   20798:	e0bffc17 	ldw	r2,-16(fp)
   2079c:	00000a06 	br	207c8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   207a0:	002069c0 	call	2069c <alt_get_errno>
   207a4:	1007883a 	mov	r3,r2
   207a8:	00800344 	movi	r2,13
   207ac:	18800015 	stw	r2,0(r3)
   207b0:	00000406 	br	207c4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   207b4:	002069c0 	call	2069c <alt_get_errno>
   207b8:	1007883a 	mov	r3,r2
   207bc:	00801444 	movi	r2,81
   207c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   207c4:	00bfffc4 	movi	r2,-1
}
   207c8:	e037883a 	mov	sp,fp
   207cc:	dfc00117 	ldw	ra,4(sp)
   207d0:	df000017 	ldw	fp,0(sp)
   207d4:	dec00204 	addi	sp,sp,8
   207d8:	f800283a 	ret

000207dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   207dc:	defffc04 	addi	sp,sp,-16
   207e0:	dfc00315 	stw	ra,12(sp)
   207e4:	df000215 	stw	fp,8(sp)
   207e8:	dc000115 	stw	r16,4(sp)
   207ec:	df000204 	addi	fp,sp,8
   207f0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   207f4:	e0bffe17 	ldw	r2,-8(fp)
   207f8:	108000d0 	cmplti	r2,r2,3
   207fc:	1000111e 	bne	r2,zero,20844 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   20800:	040000f4 	movhi	r16,3
   20804:	84310304 	addi	r16,r16,-15348
   20808:	e0bffe17 	ldw	r2,-8(fp)
   2080c:	01400304 	movi	r5,12
   20810:	1009883a 	mov	r4,r2
   20814:	000d8e00 	call	d8e0 <__mulsi3>
   20818:	8085883a 	add	r2,r16,r2
   2081c:	10800204 	addi	r2,r2,8
   20820:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   20824:	040000f4 	movhi	r16,3
   20828:	84310304 	addi	r16,r16,-15348
   2082c:	e0bffe17 	ldw	r2,-8(fp)
   20830:	01400304 	movi	r5,12
   20834:	1009883a 	mov	r4,r2
   20838:	000d8e00 	call	d8e0 <__mulsi3>
   2083c:	8085883a 	add	r2,r16,r2
   20840:	10000015 	stw	zero,0(r2)
  }
}
   20844:	0001883a 	nop
   20848:	e6ffff04 	addi	sp,fp,-4
   2084c:	dfc00217 	ldw	ra,8(sp)
   20850:	df000117 	ldw	fp,4(sp)
   20854:	dc000017 	ldw	r16,0(sp)
   20858:	dec00304 	addi	sp,sp,12
   2085c:	f800283a 	ret

00020860 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   20860:	defff904 	addi	sp,sp,-28
   20864:	df000615 	stw	fp,24(sp)
   20868:	df000604 	addi	fp,sp,24
   2086c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20870:	0005303a 	rdctl	r2,status
   20874:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20878:	e0fffe17 	ldw	r3,-8(fp)
   2087c:	00bfff84 	movi	r2,-2
   20880:	1884703a 	and	r2,r3,r2
   20884:	1001703a 	wrctl	status,r2
  
  return context;
   20888:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2088c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   20890:	d0a5be17 	ldw	r2,-26888(gp)
   20894:	10c000c4 	addi	r3,r2,3
   20898:	00bfff04 	movi	r2,-4
   2089c:	1884703a 	and	r2,r3,r2
   208a0:	d0a5be15 	stw	r2,-26888(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   208a4:	d0e5be17 	ldw	r3,-26888(gp)
   208a8:	e0bfff17 	ldw	r2,-4(fp)
   208ac:	1887883a 	add	r3,r3,r2
   208b0:	00810034 	movhi	r2,1024
   208b4:	10800004 	addi	r2,r2,0
   208b8:	10c0062e 	bgeu	r2,r3,208d4 <sbrk+0x74>
   208bc:	e0bffb17 	ldw	r2,-20(fp)
   208c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   208c4:	e0bffa17 	ldw	r2,-24(fp)
   208c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   208cc:	00bfffc4 	movi	r2,-1
   208d0:	00000b06 	br	20900 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   208d4:	d0a5be17 	ldw	r2,-26888(gp)
   208d8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   208dc:	d0e5be17 	ldw	r3,-26888(gp)
   208e0:	e0bfff17 	ldw	r2,-4(fp)
   208e4:	1885883a 	add	r2,r3,r2
   208e8:	d0a5be15 	stw	r2,-26888(gp)
   208ec:	e0bffb17 	ldw	r2,-20(fp)
   208f0:	e0bffc15 	stw	r2,-16(fp)
   208f4:	e0bffc17 	ldw	r2,-16(fp)
   208f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   208fc:	e0bffd17 	ldw	r2,-12(fp)
} 
   20900:	e037883a 	mov	sp,fp
   20904:	df000017 	ldw	fp,0(sp)
   20908:	dec00104 	addi	sp,sp,4
   2090c:	f800283a 	ret

00020910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20910:	defffe04 	addi	sp,sp,-8
   20914:	dfc00115 	stw	ra,4(sp)
   20918:	df000015 	stw	fp,0(sp)
   2091c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20920:	d0a5bd17 	ldw	r2,-26892(gp)
   20924:	10000326 	beq	r2,zero,20934 <alt_get_errno+0x24>
   20928:	d0a5bd17 	ldw	r2,-26892(gp)
   2092c:	103ee83a 	callr	r2
   20930:	00000106 	br	20938 <alt_get_errno+0x28>
   20934:	d0b24e04 	addi	r2,gp,-14024
}
   20938:	e037883a 	mov	sp,fp
   2093c:	dfc00117 	ldw	ra,4(sp)
   20940:	df000017 	ldw	fp,0(sp)
   20944:	dec00204 	addi	sp,sp,8
   20948:	f800283a 	ret

0002094c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   2094c:	defffc04 	addi	sp,sp,-16
   20950:	dfc00315 	stw	ra,12(sp)
   20954:	df000215 	stw	fp,8(sp)
   20958:	df000204 	addi	fp,sp,8
   2095c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   20960:	d0b25717 	ldw	r2,-13988(gp)
  clock_t ticks = alt_nticks(); 
   20964:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20968:	d0b25617 	ldw	r2,-13992(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   2096c:	1000061e 	bne	r2,zero,20988 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   20970:	00209100 	call	20910 <alt_get_errno>
   20974:	1007883a 	mov	r3,r2
   20978:	00801604 	movi	r2,88
   2097c:	18800015 	stw	r2,0(r3)
    return 0;
   20980:	0005883a 	mov	r2,zero
   20984:	00000a06 	br	209b0 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   20988:	e0bfff17 	ldw	r2,-4(fp)
   2098c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   20990:	e0bfff17 	ldw	r2,-4(fp)
   20994:	e0fffe17 	ldw	r3,-8(fp)
   20998:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   2099c:	e0bfff17 	ldw	r2,-4(fp)
   209a0:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   209a4:	e0bfff17 	ldw	r2,-4(fp)
   209a8:	10000315 	stw	zero,12(r2)

  return ticks;
   209ac:	e0bffe17 	ldw	r2,-8(fp)
}
   209b0:	e037883a 	mov	sp,fp
   209b4:	dfc00117 	ldw	ra,4(sp)
   209b8:	df000017 	ldw	fp,0(sp)
   209bc:	dec00204 	addi	sp,sp,8
   209c0:	f800283a 	ret

000209c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   209c4:	defffd04 	addi	sp,sp,-12
   209c8:	dfc00215 	stw	ra,8(sp)
   209cc:	df000115 	stw	fp,4(sp)
   209d0:	df000104 	addi	fp,sp,4
   209d4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   209d8:	e13fff17 	ldw	r4,-4(fp)
   209dc:	00236ac0 	call	236ac <alt_busy_sleep>
}
   209e0:	e037883a 	mov	sp,fp
   209e4:	dfc00117 	ldw	ra,4(sp)
   209e8:	df000017 	ldw	fp,0(sp)
   209ec:	dec00204 	addi	sp,sp,8
   209f0:	f800283a 	ret

000209f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   209f4:	defffe04 	addi	sp,sp,-8
   209f8:	dfc00115 	stw	ra,4(sp)
   209fc:	df000015 	stw	fp,0(sp)
   20a00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20a04:	d0a5bd17 	ldw	r2,-26892(gp)
   20a08:	10000326 	beq	r2,zero,20a18 <alt_get_errno+0x24>
   20a0c:	d0a5bd17 	ldw	r2,-26892(gp)
   20a10:	103ee83a 	callr	r2
   20a14:	00000106 	br	20a1c <alt_get_errno+0x28>
   20a18:	d0b24e04 	addi	r2,gp,-14024
}
   20a1c:	e037883a 	mov	sp,fp
   20a20:	dfc00117 	ldw	ra,4(sp)
   20a24:	df000017 	ldw	fp,0(sp)
   20a28:	dec00204 	addi	sp,sp,8
   20a2c:	f800283a 	ret

00020a30 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   20a30:	defff904 	addi	sp,sp,-28
   20a34:	dfc00615 	stw	ra,24(sp)
   20a38:	df000515 	stw	fp,20(sp)
   20a3c:	df000504 	addi	fp,sp,20
   20a40:	e13ffd15 	stw	r4,-12(fp)
   20a44:	e17ffe15 	stw	r5,-8(fp)
   20a48:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20a4c:	e0bffd17 	ldw	r2,-12(fp)
   20a50:	10000816 	blt	r2,zero,20a74 <write+0x44>
   20a54:	01400304 	movi	r5,12
   20a58:	e13ffd17 	ldw	r4,-12(fp)
   20a5c:	000d8e00 	call	d8e0 <__mulsi3>
   20a60:	1007883a 	mov	r3,r2
   20a64:	008000f4 	movhi	r2,3
   20a68:	10b10304 	addi	r2,r2,-15348
   20a6c:	1885883a 	add	r2,r3,r2
   20a70:	00000106 	br	20a78 <write+0x48>
   20a74:	0005883a 	mov	r2,zero
   20a78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   20a7c:	e0bffb17 	ldw	r2,-20(fp)
   20a80:	10002126 	beq	r2,zero,20b08 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   20a84:	e0bffb17 	ldw	r2,-20(fp)
   20a88:	10800217 	ldw	r2,8(r2)
   20a8c:	108000cc 	andi	r2,r2,3
   20a90:	10001826 	beq	r2,zero,20af4 <write+0xc4>
   20a94:	e0bffb17 	ldw	r2,-20(fp)
   20a98:	10800017 	ldw	r2,0(r2)
   20a9c:	10800617 	ldw	r2,24(r2)
   20aa0:	10001426 	beq	r2,zero,20af4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   20aa4:	e0bffb17 	ldw	r2,-20(fp)
   20aa8:	10800017 	ldw	r2,0(r2)
   20aac:	10800617 	ldw	r2,24(r2)
   20ab0:	e0ffff17 	ldw	r3,-4(fp)
   20ab4:	180d883a 	mov	r6,r3
   20ab8:	e17ffe17 	ldw	r5,-8(fp)
   20abc:	e13ffb17 	ldw	r4,-20(fp)
   20ac0:	103ee83a 	callr	r2
   20ac4:	e0bffc15 	stw	r2,-16(fp)
   20ac8:	e0bffc17 	ldw	r2,-16(fp)
   20acc:	1000070e 	bge	r2,zero,20aec <write+0xbc>
      {
        ALT_ERRNO = -rval;
   20ad0:	00209f40 	call	209f4 <alt_get_errno>
   20ad4:	1007883a 	mov	r3,r2
   20ad8:	e0bffc17 	ldw	r2,-16(fp)
   20adc:	0085c83a 	sub	r2,zero,r2
   20ae0:	18800015 	stw	r2,0(r3)
        return -1;
   20ae4:	00bfffc4 	movi	r2,-1
   20ae8:	00000c06 	br	20b1c <write+0xec>
      }
      return rval;
   20aec:	e0bffc17 	ldw	r2,-16(fp)
   20af0:	00000a06 	br	20b1c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   20af4:	00209f40 	call	209f4 <alt_get_errno>
   20af8:	1007883a 	mov	r3,r2
   20afc:	00800344 	movi	r2,13
   20b00:	18800015 	stw	r2,0(r3)
   20b04:	00000406 	br	20b18 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   20b08:	00209f40 	call	209f4 <alt_get_errno>
   20b0c:	1007883a 	mov	r3,r2
   20b10:	00801444 	movi	r2,81
   20b14:	18800015 	stw	r2,0(r3)
  }
  return -1;
   20b18:	00bfffc4 	movi	r2,-1
}
   20b1c:	e037883a 	mov	sp,fp
   20b20:	dfc00117 	ldw	ra,4(sp)
   20b24:	df000017 	ldw	fp,0(sp)
   20b28:	dec00204 	addi	sp,sp,8
   20b2c:	f800283a 	ret

00020b30 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   20b30:	defffd04 	addi	sp,sp,-12
   20b34:	dfc00215 	stw	ra,8(sp)
   20b38:	df000115 	stw	fp,4(sp)
   20b3c:	df000104 	addi	fp,sp,4
   20b40:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20b44:	d165ba04 	addi	r5,gp,-26904
   20b48:	e13fff17 	ldw	r4,-4(fp)
   20b4c:	00238600 	call	23860 <alt_dev_llist_insert>
}
   20b50:	e037883a 	mov	sp,fp
   20b54:	dfc00117 	ldw	ra,4(sp)
   20b58:	df000017 	ldw	fp,0(sp)
   20b5c:	dec00204 	addi	sp,sp,8
   20b60:	f800283a 	ret

00020b64 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20b64:	defffd04 	addi	sp,sp,-12
   20b68:	dfc00215 	stw	ra,8(sp)
   20b6c:	df000115 	stw	fp,4(sp)
   20b70:	df000104 	addi	fp,sp,4
   20b74:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   20b78:	00245040 	call	24504 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20b7c:	00800044 	movi	r2,1
   20b80:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20b84:	0001883a 	nop
   20b88:	e037883a 	mov	sp,fp
   20b8c:	dfc00117 	ldw	ra,4(sp)
   20b90:	df000017 	ldw	fp,0(sp)
   20b94:	dec00204 	addi	sp,sp,8
   20b98:	f800283a 	ret

00020b9c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20b9c:	defffe04 	addi	sp,sp,-8
   20ba0:	dfc00115 	stw	ra,4(sp)
   20ba4:	df000015 	stw	fp,0(sp)
   20ba8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   20bac:	01c0fa04 	movi	r7,1000
   20bb0:	01800084 	movi	r6,2
   20bb4:	000b883a 	mov	r5,zero
   20bb8:	01010034 	movhi	r4,1024
   20bbc:	21042004 	addi	r4,r4,4224
   20bc0:	00235040 	call	23504 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   20bc4:	010000f4 	movhi	r4,3
   20bc8:	21316304 	addi	r4,r4,-14964
   20bcc:	0020e600 	call	20e60 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   20bd0:	01800044 	movi	r6,1
   20bd4:	000b883a 	mov	r5,zero
   20bd8:	010000f4 	movhi	r4,3
   20bdc:	21317b04 	addi	r4,r4,-14868
   20be0:	002298c0 	call	2298c <altera_avalon_jtag_uart_init>
   20be4:	010000f4 	movhi	r4,3
   20be8:	21317104 	addi	r4,r4,-14908
   20bec:	0020b300 	call	20b30 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   20bf0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   20bf4:	0001883a 	nop
}
   20bf8:	0001883a 	nop
   20bfc:	e037883a 	mov	sp,fp
   20c00:	dfc00117 	ldw	ra,4(sp)
   20c04:	df000017 	ldw	fp,0(sp)
   20c08:	dec00204 	addi	sp,sp,8
   20c0c:	f800283a 	ret

00020c10 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   20c10:	defff904 	addi	sp,sp,-28
   20c14:	dfc00615 	stw	ra,24(sp)
   20c18:	df000515 	stw	fp,20(sp)
   20c1c:	df000504 	addi	fp,sp,20
   20c20:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   20c24:	008000b4 	movhi	r2,2
   20c28:	10a1a804 	addi	r2,r2,-31072
   20c2c:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   20c30:	e0bfff17 	ldw	r2,-4(fp)
   20c34:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   20c38:	e0bffc17 	ldw	r2,-16(fp)
   20c3c:	10800717 	ldw	r2,28(r2)
   20c40:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   20c44:	e0bffd17 	ldw	r2,-12(fp)
   20c48:	10800217 	ldw	r2,8(r2)
   20c4c:	10800098 	cmpnei	r2,r2,2
   20c50:	1000251e 	bne	r2,zero,20ce8 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   20c54:	e0bffd17 	ldw	r2,-12(fp)
   20c58:	10c00017 	ldw	r3,0(r2)
   20c5c:	e0bffd17 	ldw	r2,-12(fp)
   20c60:	10800117 	ldw	r2,4(r2)
   20c64:	e13ffe04 	addi	r4,fp,-8
   20c68:	200f883a 	mov	r7,r4
   20c6c:	100d883a 	mov	r6,r2
   20c70:	180b883a 	mov	r5,r3
   20c74:	e13ffc17 	ldw	r4,-16(fp)
   20c78:	00213c00 	call	213c0 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   20c7c:	e0bffd17 	ldw	r2,-12(fp)
   20c80:	10c00117 	ldw	r3,4(r2)
   20c84:	e0bffe17 	ldw	r2,-8(fp)
   20c88:	1887c83a 	sub	r3,r3,r2
   20c8c:	e0bffd17 	ldw	r2,-12(fp)
   20c90:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   20c94:	e0bffd17 	ldw	r2,-12(fp)
   20c98:	10c00017 	ldw	r3,0(r2)
   20c9c:	e0bffe17 	ldw	r2,-8(fp)
   20ca0:	1887883a 	add	r3,r3,r2
   20ca4:	e0bffd17 	ldw	r2,-12(fp)
   20ca8:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   20cac:	e0bffd17 	ldw	r2,-12(fp)
   20cb0:	10800117 	ldw	r2,4(r2)
   20cb4:	10000c26 	beq	r2,zero,20ce8 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20cb8:	01400704 	movi	r5,28
   20cbc:	e13ffc17 	ldw	r4,-16(fp)
   20cc0:	00225780 	call	22578 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   20cc4:	01400084 	movi	r5,2
   20cc8:	e13ffc17 	ldw	r4,-16(fp)
   20ccc:	002261c0 	call	2261c <alt_avalon_i2c_int_enable>
   20cd0:	00000e06 	br	20d0c <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   20cd4:	e0bffb17 	ldw	r2,-20(fp)
   20cd8:	10bfffc4 	addi	r2,r2,-1
   20cdc:	e0bffb15 	stw	r2,-20(fp)
   20ce0:	e0bffb17 	ldw	r2,-20(fp)
   20ce4:	10000426 	beq	r2,zero,20cf8 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   20ce8:	e13ffc17 	ldw	r4,-16(fp)
   20cec:	002137c0 	call	2137c <alt_avalon_i2c_is_busy>
   20cf0:	103ff81e 	bne	r2,zero,20cd4 <__alt_data_end+0xfc020cd4>
   20cf4:	00000106 	br	20cfc <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   20cf8:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   20cfc:	e13ffc17 	ldw	r4,-16(fp)
   20d00:	00210240 	call	21024 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   20d04:	e0bffd17 	ldw	r2,-12(fp)
   20d08:	10000215 	stw	zero,8(r2)
}
   20d0c:	e037883a 	mov	sp,fp
   20d10:	dfc00117 	ldw	ra,4(sp)
   20d14:	df000017 	ldw	fp,0(sp)
   20d18:	dec00204 	addi	sp,sp,8
   20d1c:	f800283a 	ret

00020d20 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   20d20:	defffc04 	addi	sp,sp,-16
   20d24:	dfc00315 	stw	ra,12(sp)
   20d28:	df000215 	stw	fp,8(sp)
   20d2c:	df000204 	addi	fp,sp,8
   20d30:	e13ffe15 	stw	r4,-8(fp)
   20d34:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   20d38:	e0bfff17 	ldw	r2,-4(fp)
   20d3c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   20d40:	e1ffff17 	ldw	r7,-4(fp)
   20d44:	000d883a 	mov	r6,zero
   20d48:	014000b4 	movhi	r5,2
   20d4c:	29430404 	addi	r5,r5,3088
   20d50:	e13ffe17 	ldw	r4,-8(fp)
   20d54:	0020e0c0 	call	20e0c <alt_avalon_i2c_register_callback>
}
   20d58:	0001883a 	nop
   20d5c:	e037883a 	mov	sp,fp
   20d60:	dfc00117 	ldw	ra,4(sp)
   20d64:	df000017 	ldw	fp,0(sp)
   20d68:	dec00204 	addi	sp,sp,8
   20d6c:	f800283a 	ret

00020d70 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   20d70:	defff904 	addi	sp,sp,-28
   20d74:	dfc00615 	stw	ra,24(sp)
   20d78:	df000515 	stw	fp,20(sp)
   20d7c:	df000504 	addi	fp,sp,20
   20d80:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   20d84:	e0bfff17 	ldw	r2,-4(fp)
   20d88:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   20d8c:	014007c4 	movi	r5,31
   20d90:	e13ffb17 	ldw	r4,-20(fp)
   20d94:	00225b40 	call	225b4 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20d98:	01400704 	movi	r5,28
   20d9c:	e13ffb17 	ldw	r4,-20(fp)
   20da0:	00225780 	call	22578 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   20da4:	e0bffb17 	ldw	r2,-20(fp)
   20da8:	10800617 	ldw	r2,24(r2)
   20dac:	10001126 	beq	r2,zero,20df4 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20db0:	0005303a 	rdctl	r2,status
   20db4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20db8:	e0fffd17 	ldw	r3,-12(fp)
   20dbc:	00bfff84 	movi	r2,-2
   20dc0:	1884703a 	and	r2,r3,r2
   20dc4:	1001703a 	wrctl	status,r2
  
  return context;
   20dc8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   20dcc:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   20dd0:	e0bffb17 	ldw	r2,-20(fp)
   20dd4:	10800617 	ldw	r2,24(r2)
   20dd8:	e13ffb17 	ldw	r4,-20(fp)
   20ddc:	103ee83a 	callr	r2
   20de0:	e0bffc17 	ldw	r2,-16(fp)
   20de4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20de8:	e0bffe17 	ldw	r2,-8(fp)
   20dec:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   20df0:	0001883a 	nop
   20df4:	0001883a 	nop
}
   20df8:	e037883a 	mov	sp,fp
   20dfc:	dfc00117 	ldw	ra,4(sp)
   20e00:	df000017 	ldw	fp,0(sp)
   20e04:	dec00204 	addi	sp,sp,8
   20e08:	f800283a 	ret

00020e0c <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   20e0c:	defffb04 	addi	sp,sp,-20
   20e10:	df000415 	stw	fp,16(sp)
   20e14:	df000404 	addi	fp,sp,16
   20e18:	e13ffc15 	stw	r4,-16(fp)
   20e1c:	e17ffd15 	stw	r5,-12(fp)
   20e20:	e1bffe15 	stw	r6,-8(fp)
   20e24:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   20e28:	e0bffc17 	ldw	r2,-16(fp)
   20e2c:	e0fffd17 	ldw	r3,-12(fp)
   20e30:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   20e34:	e0bffc17 	ldw	r2,-16(fp)
   20e38:	e0ffff17 	ldw	r3,-4(fp)
   20e3c:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   20e40:	e0bffc17 	ldw	r2,-16(fp)
   20e44:	e0fffe17 	ldw	r3,-8(fp)
   20e48:	10c00815 	stw	r3,32(r2)

    return ;
   20e4c:	0001883a 	nop
}
   20e50:	e037883a 	mov	sp,fp
   20e54:	df000017 	ldw	fp,0(sp)
   20e58:	dec00104 	addi	sp,sp,4
   20e5c:	f800283a 	ret

00020e60 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   20e60:	defff704 	addi	sp,sp,-36
   20e64:	dfc00815 	stw	ra,32(sp)
   20e68:	df000715 	stw	fp,28(sp)
   20e6c:	df000704 	addi	fp,sp,28
   20e70:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   20e74:	e13fff17 	ldw	r4,-4(fp)
   20e78:	00210240 	call	21024 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   20e7c:	014007c4 	movi	r5,31
   20e80:	e13fff17 	ldw	r4,-4(fp)
   20e84:	00225b40 	call	225b4 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20e88:	01400704 	movi	r5,28
   20e8c:	e13fff17 	ldw	r4,-4(fp)
   20e90:	00225780 	call	22578 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   20e94:	014000c4 	movi	r5,3
   20e98:	e13fff17 	ldw	r4,-4(fp)
   20e9c:	00227c00 	call	227c0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   20ea0:	014000c4 	movi	r5,3
   20ea4:	e13fff17 	ldw	r4,-4(fp)
   20ea8:	00227100 	call	22710 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   20eac:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   20eb0:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   20eb4:	e0bffb04 	addi	r2,fp,-20
   20eb8:	018000b4 	movhi	r6,2
   20ebc:	31a1a804 	addi	r6,r6,-31072
   20ec0:	100b883a 	mov	r5,r2
   20ec4:	e13fff17 	ldw	r4,-4(fp)
   20ec8:	00212800 	call	21280 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   20ecc:	e0bffb04 	addi	r2,fp,-20
   20ed0:	100b883a 	mov	r5,r2
   20ed4:	e13fff17 	ldw	r4,-4(fp)
   20ed8:	00211200 	call	21120 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   20edc:	d165bf04 	addi	r5,gp,-26884
   20ee0:	e13fff17 	ldw	r4,-4(fp)
   20ee4:	00238600 	call	23860 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   20ee8:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   20eec:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   20ef0:	e0bffa17 	ldw	r2,-24(fp)
   20ef4:	10000c1e 	bne	r2,zero,20f28 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   20ef8:	e0bfff17 	ldw	r2,-4(fp)
   20efc:	10c00417 	ldw	r3,16(r2)
   20f00:	e0bfff17 	ldw	r2,-4(fp)
   20f04:	10800517 	ldw	r2,20(r2)
   20f08:	d8000015 	stw	zero,0(sp)
   20f0c:	e1ffff17 	ldw	r7,-4(fp)
   20f10:	018000b4 	movhi	r6,2
   20f14:	31835c04 	addi	r6,r6,3440
   20f18:	100b883a 	mov	r5,r2
   20f1c:	1809883a 	mov	r4,r3
   20f20:	0023a740 	call	23a74 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   20f24:	00000406 	br	20f38 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   20f28:	010000f4 	movhi	r4,3
   20f2c:	212ec804 	addi	r4,r4,-17632
   20f30:	00240f80 	call	240f8 <alt_printf>
    }

    return;
   20f34:	0001883a 	nop

}
   20f38:	e037883a 	mov	sp,fp
   20f3c:	dfc00117 	ldw	ra,4(sp)
   20f40:	df000017 	ldw	fp,0(sp)
   20f44:	dec00204 	addi	sp,sp,8
   20f48:	f800283a 	ret

00020f4c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   20f4c:	defffc04 	addi	sp,sp,-16
   20f50:	dfc00315 	stw	ra,12(sp)
   20f54:	df000215 	stw	fp,8(sp)
   20f58:	df000204 	addi	fp,sp,8
   20f5c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   20f60:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   20f64:	d165bf04 	addi	r5,gp,-26884
   20f68:	e13fff17 	ldw	r4,-4(fp)
   20f6c:	00239c40 	call	239c4 <alt_find_dev>
   20f70:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   20f74:	e0bffe17 	ldw	r2,-8(fp)
}
   20f78:	e037883a 	mov	sp,fp
   20f7c:	dfc00117 	ldw	ra,4(sp)
   20f80:	df000017 	ldw	fp,0(sp)
   20f84:	dec00204 	addi	sp,sp,8
   20f88:	f800283a 	ret

00020f8c <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20f8c:	defffc04 	addi	sp,sp,-16
   20f90:	df000315 	stw	fp,12(sp)
   20f94:	df000304 	addi	fp,sp,12
   20f98:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   20f9c:	e0bfff17 	ldw	r2,-4(fp)
   20fa0:	10800717 	ldw	r2,28(r2)
   20fa4:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   20fa8:	e0bfff17 	ldw	r2,-4(fp)
   20fac:	10800317 	ldw	r2,12(r2)
   20fb0:	10800204 	addi	r2,r2,8
   20fb4:	10800037 	ldwio	r2,0(r2)
   20fb8:	1080004c 	andi	r2,r2,1
   20fbc:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   20fc0:	e0bffe17 	ldw	r2,-8(fp)
   20fc4:	10000226 	beq	r2,zero,20fd0 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   20fc8:	00bffe44 	movi	r2,-7
   20fcc:	00001106 	br	21014 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   20fd0:	e0bfff17 	ldw	r2,-4(fp)
   20fd4:	10c00617 	ldw	r3,24(r2)
   20fd8:	008000b4 	movhi	r2,2
   20fdc:	10830404 	addi	r2,r2,3088
   20fe0:	1880021e 	bne	r3,r2,20fec <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   20fe4:	e0bffd17 	ldw	r2,-12(fp)
   20fe8:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   20fec:	e0bfff17 	ldw	r2,-4(fp)
   20ff0:	10800317 	ldw	r2,12(r2)
   20ff4:	10800204 	addi	r2,r2,8
   20ff8:	e0ffff17 	ldw	r3,-4(fp)
   20ffc:	18c00317 	ldw	r3,12(r3)
   21000:	18c00204 	addi	r3,r3,8
   21004:	18c00037 	ldwio	r3,0(r3)
   21008:	18c00054 	ori	r3,r3,1
   2100c:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   21010:	0005883a 	mov	r2,zero
}
   21014:	e037883a 	mov	sp,fp
   21018:	df000017 	ldw	fp,0(sp)
   2101c:	dec00104 	addi	sp,sp,4
   21020:	f800283a 	ret

00021024 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   21024:	defffe04 	addi	sp,sp,-8
   21028:	df000115 	stw	fp,4(sp)
   2102c:	df000104 	addi	fp,sp,4
   21030:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   21034:	e0bfff17 	ldw	r2,-4(fp)
   21038:	10800317 	ldw	r2,12(r2)
   2103c:	10800204 	addi	r2,r2,8
   21040:	e0ffff17 	ldw	r3,-4(fp)
   21044:	18c00317 	ldw	r3,12(r3)
   21048:	18c00204 	addi	r3,r3,8
   2104c:	19000037 	ldwio	r4,0(r3)
   21050:	00ffff84 	movi	r3,-2
   21054:	20c6703a 	and	r3,r4,r3
   21058:	10c00035 	stwio	r3,0(r2)

}
   2105c:	0001883a 	nop
   21060:	e037883a 	mov	sp,fp
   21064:	df000017 	ldw	fp,0(sp)
   21068:	dec00104 	addi	sp,sp,4
   2106c:	f800283a 	ret

00021070 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   21070:	defffd04 	addi	sp,sp,-12
   21074:	df000215 	stw	fp,8(sp)
   21078:	df000204 	addi	fp,sp,8
   2107c:	e13ffe15 	stw	r4,-8(fp)
   21080:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   21084:	e0bffe17 	ldw	r2,-8(fp)
   21088:	10c00d17 	ldw	r3,52(r2)
   2108c:	e0bfff17 	ldw	r2,-4(fp)
   21090:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   21094:	e0bffe17 	ldw	r2,-8(fp)
   21098:	10800317 	ldw	r2,12(r2)
   2109c:	10800204 	addi	r2,r2,8
   210a0:	10800037 	ldwio	r2,0(r2)
   210a4:	1080008c 	andi	r2,r2,2
   210a8:	1005d07a 	srai	r2,r2,1
   210ac:	1007883a 	mov	r3,r2
   210b0:	e0bfff17 	ldw	r2,-4(fp)
   210b4:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   210b8:	e0bffe17 	ldw	r2,-8(fp)
   210bc:	10800317 	ldw	r2,12(r2)
   210c0:	10800904 	addi	r2,r2,36
   210c4:	10800037 	ldwio	r2,0(r2)
   210c8:	1007883a 	mov	r3,r2
   210cc:	e0bfff17 	ldw	r2,-4(fp)
   210d0:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   210d4:	e0bffe17 	ldw	r2,-8(fp)
   210d8:	10800317 	ldw	r2,12(r2)
   210dc:	10800804 	addi	r2,r2,32
   210e0:	10800037 	ldwio	r2,0(r2)
   210e4:	1007883a 	mov	r3,r2
   210e8:	e0bfff17 	ldw	r2,-4(fp)
   210ec:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   210f0:	e0bffe17 	ldw	r2,-8(fp)
   210f4:	10800317 	ldw	r2,12(r2)
   210f8:	10800a04 	addi	r2,r2,40
   210fc:	10800037 	ldwio	r2,0(r2)
   21100:	1007883a 	mov	r3,r2
   21104:	e0bfff17 	ldw	r2,-4(fp)
   21108:	10c0030d 	sth	r3,12(r2)
}
   2110c:	0001883a 	nop
   21110:	e037883a 	mov	sp,fp
   21114:	df000017 	ldw	fp,0(sp)
   21118:	dec00104 	addi	sp,sp,4
   2111c:	f800283a 	ret

00021120 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   21120:	defffd04 	addi	sp,sp,-12
   21124:	df000215 	stw	fp,8(sp)
   21128:	df000204 	addi	fp,sp,8
   2112c:	e13ffe15 	stw	r4,-8(fp)
   21130:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   21134:	e0bfff17 	ldw	r2,-4(fp)
   21138:	10c00017 	ldw	r3,0(r2)
   2113c:	e0bffe17 	ldw	r2,-8(fp)
   21140:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   21144:	e0bffe17 	ldw	r2,-8(fp)
   21148:	10800317 	ldw	r2,12(r2)
   2114c:	10c00204 	addi	r3,r2,8
   21150:	e0bffe17 	ldw	r2,-8(fp)
   21154:	10800317 	ldw	r2,12(r2)
   21158:	10800204 	addi	r2,r2,8
   2115c:	10800037 	ldwio	r2,0(r2)
   21160:	1009883a 	mov	r4,r2
   21164:	00bfff44 	movi	r2,-3
   21168:	2088703a 	and	r4,r4,r2
   2116c:	e0bfff17 	ldw	r2,-4(fp)
   21170:	10800117 	ldw	r2,4(r2)
   21174:	1085883a 	add	r2,r2,r2
   21178:	1080008c 	andi	r2,r2,2
   2117c:	2084b03a 	or	r2,r4,r2
   21180:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   21184:	e0bffe17 	ldw	r2,-8(fp)
   21188:	10800317 	ldw	r2,12(r2)
   2118c:	10800904 	addi	r2,r2,36
   21190:	e0ffff17 	ldw	r3,-4(fp)
   21194:	18c0020b 	ldhu	r3,8(r3)
   21198:	18ffffcc 	andi	r3,r3,65535
   2119c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   211a0:	e0bffe17 	ldw	r2,-8(fp)
   211a4:	10800317 	ldw	r2,12(r2)
   211a8:	10800804 	addi	r2,r2,32
   211ac:	e0ffff17 	ldw	r3,-4(fp)
   211b0:	18c0028b 	ldhu	r3,10(r3)
   211b4:	18ffffcc 	andi	r3,r3,65535
   211b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   211bc:	e0bffe17 	ldw	r2,-8(fp)
   211c0:	10800317 	ldw	r2,12(r2)
   211c4:	10800a04 	addi	r2,r2,40
   211c8:	e0ffff17 	ldw	r3,-4(fp)
   211cc:	18c0030b 	ldhu	r3,12(r3)
   211d0:	18ffffcc 	andi	r3,r3,65535
   211d4:	10c00035 	stwio	r3,0(r2)
}
   211d8:	0001883a 	nop
   211dc:	e037883a 	mov	sp,fp
   211e0:	df000017 	ldw	fp,0(sp)
   211e4:	dec00104 	addi	sp,sp,4
   211e8:	f800283a 	ret

000211ec <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   211ec:	defffb04 	addi	sp,sp,-20
   211f0:	dfc00415 	stw	ra,16(sp)
   211f4:	df000315 	stw	fp,12(sp)
   211f8:	df000304 	addi	fp,sp,12
   211fc:	e13ffd15 	stw	r4,-12(fp)
   21200:	e17ffe15 	stw	r5,-8(fp)
   21204:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   21208:	e0bffe17 	ldw	r2,-8(fp)
   2120c:	1080028b 	ldhu	r2,10(r2)
   21210:	10bfffcc 	andi	r2,r2,65535
   21214:	10000426 	beq	r2,zero,21228 <alt_avalon_i2c_master_config_speed_get+0x3c>
   21218:	e0bffe17 	ldw	r2,-8(fp)
   2121c:	1080020b 	ldhu	r2,8(r2)
   21220:	10bfffcc 	andi	r2,r2,65535
   21224:	1000021e 	bne	r2,zero,21230 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   21228:	00bfff44 	movi	r2,-3
   2122c:	00000f06 	br	2126c <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   21230:	e0bffd17 	ldw	r2,-12(fp)
   21234:	11000c17 	ldw	r4,48(r2)
   21238:	e0bffe17 	ldw	r2,-8(fp)
   2123c:	1080028b 	ldhu	r2,10(r2)
   21240:	10ffffcc 	andi	r3,r2,65535
   21244:	e0bffe17 	ldw	r2,-8(fp)
   21248:	1080020b 	ldhu	r2,8(r2)
   2124c:	10bfffcc 	andi	r2,r2,65535
   21250:	1885883a 	add	r2,r3,r2
   21254:	100b883a 	mov	r5,r2
   21258:	000d8240 	call	d824 <__udivsi3>
   2125c:	1007883a 	mov	r3,r2
   21260:	e0bfff17 	ldw	r2,-4(fp)
   21264:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   21268:	0005883a 	mov	r2,zero
}
   2126c:	e037883a 	mov	sp,fp
   21270:	dfc00117 	ldw	ra,4(sp)
   21274:	df000017 	ldw	fp,0(sp)
   21278:	dec00204 	addi	sp,sp,8
   2127c:	f800283a 	ret

00021280 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   21280:	defff904 	addi	sp,sp,-28
   21284:	dfc00615 	stw	ra,24(sp)
   21288:	df000515 	stw	fp,20(sp)
   2128c:	df000504 	addi	fp,sp,20
   21290:	e13ffd15 	stw	r4,-12(fp)
   21294:	e17ffe15 	stw	r5,-8(fp)
   21298:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   2129c:	e0ffff17 	ldw	r3,-4(fp)
   212a0:	008001b4 	movhi	r2,6
   212a4:	1086a004 	addi	r2,r2,6784
   212a8:	10c00436 	bltu	r2,r3,212bc <alt_avalon_i2c_master_config_speed_set+0x3c>
   212ac:	e0bfff17 	ldw	r2,-4(fp)
   212b0:	10000226 	beq	r2,zero,212bc <alt_avalon_i2c_master_config_speed_set+0x3c>
   212b4:	e0bfff17 	ldw	r2,-4(fp)
   212b8:	1000021e 	bne	r2,zero,212c4 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   212bc:	00bfff04 	movi	r2,-4
   212c0:	00002906 	br	21368 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   212c4:	e0bffd17 	ldw	r2,-12(fp)
   212c8:	10c00c17 	ldw	r3,48(r2)
   212cc:	e0bfff17 	ldw	r2,-4(fp)
   212d0:	1085883a 	add	r2,r2,r2
   212d4:	100b883a 	mov	r5,r2
   212d8:	1809883a 	mov	r4,r3
   212dc:	000d8240 	call	d824 <__udivsi3>
   212e0:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   212e4:	e0bffb17 	ldw	r2,-20(fp)
   212e8:	10800f04 	addi	r2,r2,60
   212ec:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   212f0:	e0bffb17 	ldw	r2,-20(fp)
   212f4:	10bff104 	addi	r2,r2,-60
   212f8:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   212fc:	e0ffff17 	ldw	r3,-4(fp)
   21300:	008000b4 	movhi	r2,2
   21304:	10a1a804 	addi	r2,r2,-31072
   21308:	10c0042e 	bgeu	r2,r3,2131c <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   2130c:	e0bffe17 	ldw	r2,-8(fp)
   21310:	00c00044 	movi	r3,1
   21314:	10c00115 	stw	r3,4(r2)
   21318:	00000206 	br	21324 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   2131c:	e0bffe17 	ldw	r2,-8(fp)
   21320:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   21324:	e0bffb17 	ldw	r2,-20(fp)
   21328:	1007883a 	mov	r3,r2
   2132c:	e0bffe17 	ldw	r2,-8(fp)
   21330:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   21334:	e0bffc17 	ldw	r2,-16(fp)
   21338:	1007883a 	mov	r3,r2
   2133c:	e0bffe17 	ldw	r2,-8(fp)
   21340:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   21344:	e0bffb17 	ldw	r2,-20(fp)
   21348:	1007883a 	mov	r3,r2
   2134c:	e0bffb17 	ldw	r2,-20(fp)
   21350:	1004d07a 	srli	r2,r2,1
   21354:	1885c83a 	sub	r2,r3,r2
   21358:	1007883a 	mov	r3,r2
   2135c:	e0bffe17 	ldw	r2,-8(fp)
   21360:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   21364:	0005883a 	mov	r2,zero

}
   21368:	e037883a 	mov	sp,fp
   2136c:	dfc00117 	ldw	ra,4(sp)
   21370:	df000017 	ldw	fp,0(sp)
   21374:	dec00204 	addi	sp,sp,8
   21378:	f800283a 	ret

0002137c <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2137c:	defffe04 	addi	sp,sp,-8
   21380:	df000115 	stw	fp,4(sp)
   21384:	df000104 	addi	fp,sp,4
   21388:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   2138c:	e0bfff17 	ldw	r2,-4(fp)
   21390:	10800317 	ldw	r2,12(r2)
   21394:	10800504 	addi	r2,r2,20
   21398:	10800037 	ldwio	r2,0(r2)
   2139c:	1080004c 	andi	r2,r2,1
   213a0:	10000226 	beq	r2,zero,213ac <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   213a4:	00800044 	movi	r2,1
   213a8:	00000106 	br	213b0 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   213ac:	0005883a 	mov	r2,zero
}
   213b0:	e037883a 	mov	sp,fp
   213b4:	df000017 	ldw	fp,0(sp)
   213b8:	dec00104 	addi	sp,sp,4
   213bc:	f800283a 	ret

000213c0 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   213c0:	defffb04 	addi	sp,sp,-20
   213c4:	df000415 	stw	fp,16(sp)
   213c8:	df000404 	addi	fp,sp,16
   213cc:	e13ffc15 	stw	r4,-16(fp)
   213d0:	e17ffd15 	stw	r5,-12(fp)
   213d4:	e1bffe15 	stw	r6,-8(fp)
   213d8:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   213dc:	e0bfff17 	ldw	r2,-4(fp)
   213e0:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   213e4:	00001406 	br	21438 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   213e8:	e0bfff17 	ldw	r2,-4(fp)
   213ec:	10800017 	ldw	r2,0(r2)
   213f0:	e0fffd17 	ldw	r3,-12(fp)
   213f4:	1885883a 	add	r2,r3,r2
   213f8:	e0fffc17 	ldw	r3,-16(fp)
   213fc:	18c00317 	ldw	r3,12(r3)
   21400:	18c00104 	addi	r3,r3,4
   21404:	18c00037 	ldwio	r3,0(r3)
   21408:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   2140c:	e0bfff17 	ldw	r2,-4(fp)
   21410:	10800017 	ldw	r2,0(r2)
   21414:	10c00044 	addi	r3,r2,1
   21418:	e0bfff17 	ldw	r2,-4(fp)
   2141c:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   21420:	e0bfff17 	ldw	r2,-4(fp)
   21424:	10c00017 	ldw	r3,0(r2)
   21428:	e0bffe17 	ldw	r2,-8(fp)
   2142c:	1880021e 	bne	r3,r2,21438 <alt_avalon_i2c_rx_read_available+0x78>
   21430:	e0bffe17 	ldw	r2,-8(fp)
   21434:	1000061e 	bne	r2,zero,21450 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   21438:	e0bffc17 	ldw	r2,-16(fp)
   2143c:	10800317 	ldw	r2,12(r2)
   21440:	10800704 	addi	r2,r2,28
   21444:	10800037 	ldwio	r2,0(r2)
   21448:	103fe71e 	bne	r2,zero,213e8 <__alt_data_end+0xfc0213e8>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   2144c:	00000106 	br	21454 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   21450:	0001883a 	nop
    }
}
   21454:	0001883a 	nop
   21458:	e037883a 	mov	sp,fp
   2145c:	df000017 	ldw	fp,0(sp)
   21460:	dec00104 	addi	sp,sp,4
   21464:	f800283a 	ret

00021468 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   21468:	defffa04 	addi	sp,sp,-24
   2146c:	dfc00515 	stw	ra,20(sp)
   21470:	df000415 	stw	fp,16(sp)
   21474:	df000404 	addi	fp,sp,16
   21478:	e13ffe15 	stw	r4,-8(fp)
   2147c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   21480:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   21484:	008000b4 	movhi	r2,2
   21488:	10a1a804 	addi	r2,r2,-31072
   2148c:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   21490:	00000d06 	br	214c8 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   21494:	e0bffd17 	ldw	r2,-12(fp)
   21498:	108002a8 	cmpgeui	r2,r2,10
   2149c:	1000021e 	bne	r2,zero,214a8 <alt_avalon_i2c_rx_read+0x40>
   214a0:	0109c404 	movi	r4,10000
   214a4:	00236ac0 	call	236ac <alt_busy_sleep>
      if (--timeout == 0)
   214a8:	e0bffd17 	ldw	r2,-12(fp)
   214ac:	10bfffc4 	addi	r2,r2,-1
   214b0:	e0bffd15 	stw	r2,-12(fp)
   214b4:	e0bffd17 	ldw	r2,-12(fp)
   214b8:	1000031e 	bne	r2,zero,214c8 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   214bc:	00bfff84 	movi	r2,-2
   214c0:	e0bffc15 	stw	r2,-16(fp)
        break;
   214c4:	00000506 	br	214dc <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   214c8:	e0bffe17 	ldw	r2,-8(fp)
   214cc:	10800317 	ldw	r2,12(r2)
   214d0:	10800704 	addi	r2,r2,28
   214d4:	10800037 	ldwio	r2,0(r2)
   214d8:	103fee26 	beq	r2,zero,21494 <__alt_data_end+0xfc021494>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   214dc:	e0bffe17 	ldw	r2,-8(fp)
   214e0:	10800317 	ldw	r2,12(r2)
   214e4:	10800104 	addi	r2,r2,4
   214e8:	10800037 	ldwio	r2,0(r2)
   214ec:	1007883a 	mov	r3,r2
   214f0:	e0bfff17 	ldw	r2,-4(fp)
   214f4:	10c00005 	stb	r3,0(r2)
        
    return status;
   214f8:	e0bffc17 	ldw	r2,-16(fp)
}
   214fc:	e037883a 	mov	sp,fp
   21500:	dfc00117 	ldw	ra,4(sp)
   21504:	df000017 	ldw	fp,0(sp)
   21508:	dec00204 	addi	sp,sp,8
   2150c:	f800283a 	ret

00021510 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   21510:	defff804 	addi	sp,sp,-32
   21514:	dfc00715 	stw	ra,28(sp)
   21518:	df000615 	stw	fp,24(sp)
   2151c:	df000604 	addi	fp,sp,24
   21520:	e13ffc15 	stw	r4,-16(fp)
   21524:	2809883a 	mov	r4,r5
   21528:	3007883a 	mov	r3,r6
   2152c:	3805883a 	mov	r2,r7
   21530:	e13ffd05 	stb	r4,-12(fp)
   21534:	e0fffe05 	stb	r3,-8(fp)
   21538:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   2153c:	0089c404 	movi	r2,10000
   21540:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21544:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   21548:	00000c06 	br	2157c <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   2154c:	e0bffa17 	ldw	r2,-24(fp)
   21550:	108002a8 	cmpgeui	r2,r2,10
   21554:	1000021e 	bne	r2,zero,21560 <alt_avalon_i2c_cmd_write+0x50>
   21558:	0109c404 	movi	r4,10000
   2155c:	00236ac0 	call	236ac <alt_busy_sleep>
      if (--timeout == 0)
   21560:	e0bffa17 	ldw	r2,-24(fp)
   21564:	10bfffc4 	addi	r2,r2,-1
   21568:	e0bffa15 	stw	r2,-24(fp)
   2156c:	e0bffa17 	ldw	r2,-24(fp)
   21570:	1000021e 	bne	r2,zero,2157c <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   21574:	00bfff84 	movi	r2,-2
   21578:	00001906 	br	215e0 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   2157c:	e0bffc17 	ldw	r2,-16(fp)
   21580:	10800317 	ldw	r2,12(r2)
   21584:	10800404 	addi	r2,r2,16
   21588:	10800037 	ldwio	r2,0(r2)
   2158c:	1080004c 	andi	r2,r2,1
   21590:	103fee26 	beq	r2,zero,2154c <__alt_data_end+0xfc02154c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   21594:	e0bffc17 	ldw	r2,-16(fp)
   21598:	10800317 	ldw	r2,12(r2)
   2159c:	e13ffd03 	ldbu	r4,-12(fp)
   215a0:	e0fffe03 	ldbu	r3,-8(fp)
   215a4:	1806927a 	slli	r3,r3,9
   215a8:	20c8b03a 	or	r4,r4,r3
   215ac:	e0ffff03 	ldbu	r3,-4(fp)
   215b0:	1806923a 	slli	r3,r3,8
   215b4:	20c6b03a 	or	r3,r4,r3
   215b8:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   215bc:	e0bffb04 	addi	r2,fp,-20
   215c0:	100b883a 	mov	r5,r2
   215c4:	e13ffc17 	ldw	r4,-16(fp)
   215c8:	00217500 	call	21750 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   215cc:	e0bffb04 	addi	r2,fp,-20
   215d0:	100b883a 	mov	r5,r2
   215d4:	e13ffc17 	ldw	r4,-16(fp)
   215d8:	002179c0 	call	2179c <alt_avalon_i2c_check_arblost>
    
    return status;
   215dc:	e0bffb17 	ldw	r2,-20(fp)
}
   215e0:	e037883a 	mov	sp,fp
   215e4:	dfc00117 	ldw	ra,4(sp)
   215e8:	df000017 	ldw	fp,0(sp)
   215ec:	dec00204 	addi	sp,sp,8
   215f0:	f800283a 	ret

000215f4 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   215f4:	defffa04 	addi	sp,sp,-24
   215f8:	dfc00515 	stw	ra,20(sp)
   215fc:	df000415 	stw	fp,16(sp)
   21600:	df000404 	addi	fp,sp,16
   21604:	e13ffd15 	stw	r4,-12(fp)
   21608:	e17ffe15 	stw	r5,-8(fp)
   2160c:	3005883a 	mov	r2,r6
   21610:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   21614:	e0bffd17 	ldw	r2,-12(fp)
   21618:	10800d17 	ldw	r2,52(r2)
   2161c:	10800058 	cmpnei	r2,r2,1
   21620:	10001c1e 	bne	r2,zero,21694 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   21624:	e0bffd17 	ldw	r2,-12(fp)
   21628:	10800917 	ldw	r2,36(r2)
   2162c:	109e0014 	ori	r2,r2,30720
   21630:	1004d1fa 	srli	r2,r2,7
   21634:	1007883a 	mov	r3,r2
   21638:	00bfff84 	movi	r2,-2
   2163c:	1884703a 	and	r2,r3,r2
   21640:	1007883a 	mov	r3,r2
   21644:	e0bffe17 	ldw	r2,-8(fp)
   21648:	1884b03a 	or	r2,r3,r2
   2164c:	10803fcc 	andi	r2,r2,255
   21650:	e0ffff03 	ldbu	r3,-4(fp)
   21654:	000f883a 	mov	r7,zero
   21658:	180d883a 	mov	r6,r3
   2165c:	100b883a 	mov	r5,r2
   21660:	e13ffd17 	ldw	r4,-12(fp)
   21664:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   21668:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   2166c:	e0bffd17 	ldw	r2,-12(fp)
   21670:	10800917 	ldw	r2,36(r2)
   21674:	10803fcc 	andi	r2,r2,255
   21678:	000f883a 	mov	r7,zero
   2167c:	000d883a 	mov	r6,zero
   21680:	100b883a 	mov	r5,r2
   21684:	e13ffd17 	ldw	r4,-12(fp)
   21688:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   2168c:	e0bffc15 	stw	r2,-16(fp)
   21690:	00000e06 	br	216cc <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   21694:	e0bffd17 	ldw	r2,-12(fp)
   21698:	10800917 	ldw	r2,36(r2)
   2169c:	1085883a 	add	r2,r2,r2
   216a0:	1007883a 	mov	r3,r2
   216a4:	e0bffe17 	ldw	r2,-8(fp)
   216a8:	1884b03a 	or	r2,r3,r2
   216ac:	10803fcc 	andi	r2,r2,255
   216b0:	e0ffff03 	ldbu	r3,-4(fp)
   216b4:	000f883a 	mov	r7,zero
   216b8:	180d883a 	mov	r6,r3
   216bc:	100b883a 	mov	r5,r2
   216c0:	e13ffd17 	ldw	r4,-12(fp)
   216c4:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   216c8:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   216cc:	e0bffc17 	ldw	r2,-16(fp)
}
   216d0:	e037883a 	mov	sp,fp
   216d4:	dfc00117 	ldw	ra,4(sp)
   216d8:	df000017 	ldw	fp,0(sp)
   216dc:	dec00204 	addi	sp,sp,8
   216e0:	f800283a 	ret

000216e4 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   216e4:	defffd04 	addi	sp,sp,-12
   216e8:	df000215 	stw	fp,8(sp)
   216ec:	df000204 	addi	fp,sp,8
   216f0:	e13ffe15 	stw	r4,-8(fp)
   216f4:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   216f8:	e0bffe17 	ldw	r2,-8(fp)
   216fc:	10c00917 	ldw	r3,36(r2)
   21700:	e0bfff17 	ldw	r2,-4(fp)
   21704:	10c00015 	stw	r3,0(r2)
}
   21708:	0001883a 	nop
   2170c:	e037883a 	mov	sp,fp
   21710:	df000017 	ldw	fp,0(sp)
   21714:	dec00104 	addi	sp,sp,4
   21718:	f800283a 	ret

0002171c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   2171c:	defffd04 	addi	sp,sp,-12
   21720:	df000215 	stw	fp,8(sp)
   21724:	df000204 	addi	fp,sp,8
   21728:	e13ffe15 	stw	r4,-8(fp)
   2172c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   21730:	e0bffe17 	ldw	r2,-8(fp)
   21734:	e0ffff17 	ldw	r3,-4(fp)
   21738:	10c00915 	stw	r3,36(r2)
}
   2173c:	0001883a 	nop
   21740:	e037883a 	mov	sp,fp
   21744:	df000017 	ldw	fp,0(sp)
   21748:	dec00104 	addi	sp,sp,4
   2174c:	f800283a 	ret

00021750 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   21750:	defffd04 	addi	sp,sp,-12
   21754:	df000215 	stw	fp,8(sp)
   21758:	df000204 	addi	fp,sp,8
   2175c:	e13ffe15 	stw	r4,-8(fp)
   21760:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   21764:	e0bffe17 	ldw	r2,-8(fp)
   21768:	10800317 	ldw	r2,12(r2)
   2176c:	10800404 	addi	r2,r2,16
   21770:	10800037 	ldwio	r2,0(r2)
   21774:	1080010c 	andi	r2,r2,4
   21778:	10000326 	beq	r2,zero,21788 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   2177c:	e0bfff17 	ldw	r2,-4(fp)
   21780:	00fffec4 	movi	r3,-5
   21784:	10c00015 	stw	r3,0(r2)
    }
}
   21788:	0001883a 	nop
   2178c:	e037883a 	mov	sp,fp
   21790:	df000017 	ldw	fp,0(sp)
   21794:	dec00104 	addi	sp,sp,4
   21798:	f800283a 	ret

0002179c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   2179c:	defffd04 	addi	sp,sp,-12
   217a0:	df000215 	stw	fp,8(sp)
   217a4:	df000204 	addi	fp,sp,8
   217a8:	e13ffe15 	stw	r4,-8(fp)
   217ac:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   217b0:	e0bffe17 	ldw	r2,-8(fp)
   217b4:	10800317 	ldw	r2,12(r2)
   217b8:	10800404 	addi	r2,r2,16
   217bc:	10800037 	ldwio	r2,0(r2)
   217c0:	1080020c 	andi	r2,r2,8
   217c4:	10000326 	beq	r2,zero,217d4 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   217c8:	e0bfff17 	ldw	r2,-4(fp)
   217cc:	00fffe84 	movi	r3,-6
   217d0:	10c00015 	stw	r3,0(r2)
    }
}
   217d4:	0001883a 	nop
   217d8:	e037883a 	mov	sp,fp
   217dc:	df000017 	ldw	fp,0(sp)
   217e0:	dec00104 	addi	sp,sp,4
   217e4:	f800283a 	ret

000217e8 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   217e8:	defff804 	addi	sp,sp,-32
   217ec:	dfc00715 	stw	ra,28(sp)
   217f0:	df000615 	stw	fp,24(sp)
   217f4:	df000604 	addi	fp,sp,24
   217f8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   217fc:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   21800:	e0bfff17 	ldw	r2,-4(fp)
   21804:	10800717 	ldw	r2,28(r2)
   21808:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   2180c:	e0bffb17 	ldw	r2,-20(fp)
   21810:	10800117 	ldw	r2,4(r2)
   21814:	10800044 	addi	r2,r2,1
   21818:	0149c404 	movi	r5,10000
   2181c:	1009883a 	mov	r4,r2
   21820:	000d8e00 	call	d8e0 <__mulsi3>
   21824:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   21828:	e0bffd04 	addi	r2,fp,-12
   2182c:	100b883a 	mov	r5,r2
   21830:	e13fff17 	ldw	r4,-4(fp)
   21834:	00226800 	call	22680 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   21838:	e0bffd17 	ldw	r2,-12(fp)
   2183c:	100b883a 	mov	r5,r2
   21840:	e13fff17 	ldw	r4,-4(fp)
   21844:	00225b40 	call	225b4 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   21848:	e0bffc04 	addi	r2,fp,-16
   2184c:	100b883a 	mov	r5,r2
   21850:	e13fff17 	ldw	r4,-4(fp)
   21854:	00217500 	call	21750 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   21858:	e0bffc17 	ldw	r2,-16(fp)
   2185c:	10002226 	beq	r2,zero,218e8 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   21860:	e0bffb17 	ldw	r2,-20(fp)
   21864:	10800217 	ldw	r2,8(r2)
   21868:	10001d26 	beq	r2,zero,218e0 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2186c:	00000d06 	br	218a4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   21870:	e0bffa17 	ldw	r2,-24(fp)
   21874:	108002a8 	cmpgeui	r2,r2,10
   21878:	1000021e 	bne	r2,zero,21884 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   2187c:	0109c404 	movi	r4,10000
   21880:	00236ac0 	call	236ac <alt_busy_sleep>
              if (--timeout == 0)
   21884:	e0bffa17 	ldw	r2,-24(fp)
   21888:	10bfffc4 	addi	r2,r2,-1
   2188c:	e0bffa15 	stw	r2,-24(fp)
   21890:	e0bffa17 	ldw	r2,-24(fp)
   21894:	1000031e 	bne	r2,zero,218a4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   21898:	00bfff84 	movi	r2,-2
   2189c:	e0bffc15 	stw	r2,-16(fp)
                 break;
   218a0:	00000306 	br	218b0 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   218a4:	e13fff17 	ldw	r4,-4(fp)
   218a8:	002137c0 	call	2137c <alt_avalon_i2c_is_busy>
   218ac:	103ff01e 	bne	r2,zero,21870 <__alt_data_end+0xfc021870>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   218b0:	e0bffb17 	ldw	r2,-20(fp)
   218b4:	10800017 	ldw	r2,0(r2)
   218b8:	e0fffe04 	addi	r3,fp,-8
   218bc:	180f883a 	mov	r7,r3
   218c0:	000d883a 	mov	r6,zero
   218c4:	100b883a 	mov	r5,r2
   218c8:	e13fff17 	ldw	r4,-4(fp)
   218cc:	00213c00 	call	213c0 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   218d0:	e13fff17 	ldw	r4,-4(fp)
   218d4:	00210240 	call	21024 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   218d8:	e0bffb17 	ldw	r2,-20(fp)
   218dc:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   218e0:	e0bffc17 	ldw	r2,-16(fp)
   218e4:	00000a06 	br	21910 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   218e8:	e0bffb17 	ldw	r2,-20(fp)
   218ec:	10800217 	ldw	r2,8(r2)
   218f0:	10000626 	beq	r2,zero,2190c <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   218f4:	e0bffd17 	ldw	r2,-12(fp)
   218f8:	100b883a 	mov	r5,r2
   218fc:	e13fff17 	ldw	r4,-4(fp)
   21900:	002261c0 	call	2261c <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   21904:	00bffe44 	movi	r2,-7
   21908:	00000106 	br	21910 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   2190c:	0005883a 	mov	r2,zero
}
   21910:	e037883a 	mov	sp,fp
   21914:	dfc00117 	ldw	ra,4(sp)
   21918:	df000017 	ldw	fp,0(sp)
   2191c:	dec00204 	addi	sp,sp,8
   21920:	f800283a 	ret

00021924 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   21924:	defff704 	addi	sp,sp,-36
   21928:	dfc00815 	stw	ra,32(sp)
   2192c:	df000715 	stw	fp,28(sp)
   21930:	df000704 	addi	fp,sp,28
   21934:	e13ffc15 	stw	r4,-16(fp)
   21938:	e17ffd15 	stw	r5,-12(fp)
   2193c:	e1bffe15 	stw	r6,-8(fp)
   21940:	3805883a 	mov	r2,r7
   21944:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21948:	0089c404 	movi	r2,10000
   2194c:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   21950:	00002206 	br	219dc <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   21954:	e0bffb17 	ldw	r2,-20(fp)
   21958:	108002a8 	cmpgeui	r2,r2,10
   2195c:	1000021e 	bne	r2,zero,21968 <alt_avalon_i2c_master_tx+0x44>
   21960:	0109c404 	movi	r4,10000
   21964:	00236ac0 	call	236ac <alt_busy_sleep>
      if (use_interrupts)
   21968:	e0bfff03 	ldbu	r2,-4(fp)
   2196c:	10000926 	beq	r2,zero,21994 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   21970:	00800044 	movi	r2,1
   21974:	d8800015 	stw	r2,0(sp)
   21978:	000f883a 	mov	r7,zero
   2197c:	e1bffe17 	ldw	r6,-8(fp)
   21980:	e17ffd17 	ldw	r5,-12(fp)
   21984:	e13ffc17 	ldw	r4,-16(fp)
   21988:	0021ed00 	call	21ed0 <alt_avalon_i2c_master_transmit_using_interrupts>
   2198c:	e0bffa15 	stw	r2,-24(fp)
   21990:	00000806 	br	219b4 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   21994:	00800044 	movi	r2,1
   21998:	d8800015 	stw	r2,0(sp)
   2199c:	000f883a 	mov	r7,zero
   219a0:	e1bffe17 	ldw	r6,-8(fp)
   219a4:	e17ffd17 	ldw	r5,-12(fp)
   219a8:	e13ffc17 	ldw	r4,-16(fp)
   219ac:	0021d100 	call	21d10 <alt_avalon_i2c_master_transmit>
   219b0:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   219b4:	e0bffa17 	ldw	r2,-24(fp)
   219b8:	10bffea0 	cmpeqi	r2,r2,-6
   219bc:	1000061e 	bne	r2,zero,219d8 <alt_avalon_i2c_master_tx+0xb4>
   219c0:	e0bffa17 	ldw	r2,-24(fp)
   219c4:	10bffee0 	cmpeqi	r2,r2,-5
   219c8:	1000031e 	bne	r2,zero,219d8 <alt_avalon_i2c_master_tx+0xb4>
   219cc:	e0bffa17 	ldw	r2,-24(fp)
   219d0:	10bffe58 	cmpnei	r2,r2,-7
   219d4:	1000061e 	bne	r2,zero,219f0 <alt_avalon_i2c_master_tx+0xcc>
   219d8:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   219dc:	e0bffb17 	ldw	r2,-20(fp)
   219e0:	10ffffc4 	addi	r3,r2,-1
   219e4:	e0fffb15 	stw	r3,-20(fp)
   219e8:	103fda1e 	bne	r2,zero,21954 <__alt_data_end+0xfc021954>
   219ec:	00000106 	br	219f4 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   219f0:	0001883a 	nop
    }

    return status;
   219f4:	e0bffa17 	ldw	r2,-24(fp)
}        
   219f8:	e037883a 	mov	sp,fp
   219fc:	dfc00117 	ldw	ra,4(sp)
   21a00:	df000017 	ldw	fp,0(sp)
   21a04:	dec00204 	addi	sp,sp,8
   21a08:	f800283a 	ret

00021a0c <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   21a0c:	defff704 	addi	sp,sp,-36
   21a10:	dfc00815 	stw	ra,32(sp)
   21a14:	df000715 	stw	fp,28(sp)
   21a18:	df000704 	addi	fp,sp,28
   21a1c:	e13ffc15 	stw	r4,-16(fp)
   21a20:	e17ffd15 	stw	r5,-12(fp)
   21a24:	e1bffe15 	stw	r6,-8(fp)
   21a28:	3805883a 	mov	r2,r7
   21a2c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21a30:	0089c404 	movi	r2,10000
   21a34:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   21a38:	e0bfff03 	ldbu	r2,-4(fp)
   21a3c:	10003426 	beq	r2,zero,21b10 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   21a40:	00001706 	br	21aa0 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   21a44:	e0bffb17 	ldw	r2,-20(fp)
   21a48:	108002a8 	cmpgeui	r2,r2,10
   21a4c:	1000021e 	bne	r2,zero,21a58 <alt_avalon_i2c_master_rx+0x4c>
   21a50:	0109c404 	movi	r4,10000
   21a54:	00236ac0 	call	236ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21a58:	00800044 	movi	r2,1
   21a5c:	d8800015 	stw	r2,0(sp)
   21a60:	000f883a 	mov	r7,zero
   21a64:	e1bffe17 	ldw	r6,-8(fp)
   21a68:	e17ffd17 	ldw	r5,-12(fp)
   21a6c:	e13ffc17 	ldw	r4,-16(fp)
   21a70:	00222ec0 	call	222ec <alt_avalon_i2c_master_receive_using_interrupts>
   21a74:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21a78:	e0bffa17 	ldw	r2,-24(fp)
   21a7c:	10bffea0 	cmpeqi	r2,r2,-6
   21a80:	1000061e 	bne	r2,zero,21a9c <alt_avalon_i2c_master_rx+0x90>
   21a84:	e0bffa17 	ldw	r2,-24(fp)
   21a88:	10bffee0 	cmpeqi	r2,r2,-5
   21a8c:	1000031e 	bne	r2,zero,21a9c <alt_avalon_i2c_master_rx+0x90>
   21a90:	e0bffa17 	ldw	r2,-24(fp)
   21a94:	10bffe58 	cmpnei	r2,r2,-7
   21a98:	1000221e 	bne	r2,zero,21b24 <alt_avalon_i2c_master_rx+0x118>
   21a9c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   21aa0:	e0bffb17 	ldw	r2,-20(fp)
   21aa4:	10ffffc4 	addi	r3,r2,-1
   21aa8:	e0fffb15 	stw	r3,-20(fp)
   21aac:	103fe51e 	bne	r2,zero,21a44 <__alt_data_end+0xfc021a44>
   21ab0:	00001f06 	br	21b30 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   21ab4:	e0bffb17 	ldw	r2,-20(fp)
   21ab8:	108002a8 	cmpgeui	r2,r2,10
   21abc:	1000021e 	bne	r2,zero,21ac8 <alt_avalon_i2c_master_rx+0xbc>
   21ac0:	0109c404 	movi	r4,10000
   21ac4:	00236ac0 	call	236ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21ac8:	00800044 	movi	r2,1
   21acc:	d8800015 	stw	r2,0(sp)
   21ad0:	000f883a 	mov	r7,zero
   21ad4:	e1bffe17 	ldw	r6,-8(fp)
   21ad8:	e17ffd17 	ldw	r5,-12(fp)
   21adc:	e13ffc17 	ldw	r4,-16(fp)
   21ae0:	00220dc0 	call	220dc <alt_avalon_i2c_master_receive>
   21ae4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21ae8:	e0bffa17 	ldw	r2,-24(fp)
   21aec:	10bffea0 	cmpeqi	r2,r2,-6
   21af0:	1000061e 	bne	r2,zero,21b0c <alt_avalon_i2c_master_rx+0x100>
   21af4:	e0bffa17 	ldw	r2,-24(fp)
   21af8:	10bffee0 	cmpeqi	r2,r2,-5
   21afc:	1000031e 	bne	r2,zero,21b0c <alt_avalon_i2c_master_rx+0x100>
   21b00:	e0bffa17 	ldw	r2,-24(fp)
   21b04:	10bffe58 	cmpnei	r2,r2,-7
   21b08:	1000081e 	bne	r2,zero,21b2c <alt_avalon_i2c_master_rx+0x120>
   21b0c:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   21b10:	e0bffb17 	ldw	r2,-20(fp)
   21b14:	10ffffc4 	addi	r3,r2,-1
   21b18:	e0fffb15 	stw	r3,-20(fp)
   21b1c:	103fe51e 	bne	r2,zero,21ab4 <__alt_data_end+0xfc021ab4>
   21b20:	00000306 	br	21b30 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   21b24:	0001883a 	nop
   21b28:	00000106 	br	21b30 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   21b2c:	0001883a 	nop
      }
    }
    
    return status;
   21b30:	e0bffa17 	ldw	r2,-24(fp)
}        
   21b34:	e037883a 	mov	sp,fp
   21b38:	dfc00117 	ldw	ra,4(sp)
   21b3c:	df000017 	ldw	fp,0(sp)
   21b40:	dec00204 	addi	sp,sp,8
   21b44:	f800283a 	ret

00021b48 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   21b48:	defff604 	addi	sp,sp,-40
   21b4c:	dfc00915 	stw	ra,36(sp)
   21b50:	df000815 	stw	fp,32(sp)
   21b54:	df000804 	addi	fp,sp,32
   21b58:	e13ffb15 	stw	r4,-20(fp)
   21b5c:	e17ffc15 	stw	r5,-16(fp)
   21b60:	e1bffd15 	stw	r6,-12(fp)
   21b64:	e1fffe15 	stw	r7,-8(fp)
   21b68:	e0800317 	ldw	r2,12(fp)
   21b6c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21b70:	0089c404 	movi	r2,10000
   21b74:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   21b78:	e0bfff03 	ldbu	r2,-4(fp)
   21b7c:	10005626 	beq	r2,zero,21cd8 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   21b80:	00002806 	br	21c24 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   21b84:	e0bffa17 	ldw	r2,-24(fp)
   21b88:	108002a8 	cmpgeui	r2,r2,10
   21b8c:	1000021e 	bne	r2,zero,21b98 <alt_avalon_i2c_master_tx_rx+0x50>
   21b90:	0109c404 	movi	r4,10000
   21b94:	00236ac0 	call	236ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   21b98:	d8000015 	stw	zero,0(sp)
   21b9c:	000f883a 	mov	r7,zero
   21ba0:	e1bffd17 	ldw	r6,-12(fp)
   21ba4:	e17ffc17 	ldw	r5,-16(fp)
   21ba8:	e13ffb17 	ldw	r4,-20(fp)
   21bac:	0021ed00 	call	21ed0 <alt_avalon_i2c_master_transmit_using_interrupts>
   21bb0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21bb4:	e0bff917 	ldw	r2,-28(fp)
   21bb8:	10bffea0 	cmpeqi	r2,r2,-6
   21bbc:	1000191e 	bne	r2,zero,21c24 <alt_avalon_i2c_master_tx_rx+0xdc>
   21bc0:	e0bff917 	ldw	r2,-28(fp)
   21bc4:	10bffee0 	cmpeqi	r2,r2,-5
   21bc8:	1000161e 	bne	r2,zero,21c24 <alt_avalon_i2c_master_tx_rx+0xdc>
   21bcc:	e0bff917 	ldw	r2,-28(fp)
   21bd0:	10bffe58 	cmpnei	r2,r2,-7
   21bd4:	1000011e 	bne	r2,zero,21bdc <alt_avalon_i2c_master_tx_rx+0x94>
   21bd8:	00001206 	br	21c24 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21bdc:	00800044 	movi	r2,1
   21be0:	d8800015 	stw	r2,0(sp)
   21be4:	01c00044 	movi	r7,1
   21be8:	e1800217 	ldw	r6,8(fp)
   21bec:	e17ffe17 	ldw	r5,-8(fp)
   21bf0:	e13ffb17 	ldw	r4,-20(fp)
   21bf4:	00222ec0 	call	222ec <alt_avalon_i2c_master_receive_using_interrupts>
   21bf8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21bfc:	e0bff917 	ldw	r2,-28(fp)
   21c00:	10bffea0 	cmpeqi	r2,r2,-6
   21c04:	1000061e 	bne	r2,zero,21c20 <alt_avalon_i2c_master_tx_rx+0xd8>
   21c08:	e0bff917 	ldw	r2,-28(fp)
   21c0c:	10bffee0 	cmpeqi	r2,r2,-5
   21c10:	1000031e 	bne	r2,zero,21c20 <alt_avalon_i2c_master_tx_rx+0xd8>
   21c14:	e0bff917 	ldw	r2,-28(fp)
   21c18:	10bffe58 	cmpnei	r2,r2,-7
   21c1c:	1000331e 	bne	r2,zero,21cec <alt_avalon_i2c_master_tx_rx+0x1a4>
   21c20:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   21c24:	e0bffa17 	ldw	r2,-24(fp)
   21c28:	10ffffc4 	addi	r3,r2,-1
   21c2c:	e0fffa15 	stw	r3,-24(fp)
   21c30:	103fd41e 	bne	r2,zero,21b84 <__alt_data_end+0xfc021b84>
   21c34:	00003006 	br	21cf8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   21c38:	e0bffa17 	ldw	r2,-24(fp)
   21c3c:	108002a8 	cmpgeui	r2,r2,10
   21c40:	1000021e 	bne	r2,zero,21c4c <alt_avalon_i2c_master_tx_rx+0x104>
   21c44:	0109c404 	movi	r4,10000
   21c48:	00236ac0 	call	236ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   21c4c:	d8000015 	stw	zero,0(sp)
   21c50:	000f883a 	mov	r7,zero
   21c54:	e1bffd17 	ldw	r6,-12(fp)
   21c58:	e17ffc17 	ldw	r5,-16(fp)
   21c5c:	e13ffb17 	ldw	r4,-20(fp)
   21c60:	0021d100 	call	21d10 <alt_avalon_i2c_master_transmit>
   21c64:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21c68:	e0bff917 	ldw	r2,-28(fp)
   21c6c:	10bffea0 	cmpeqi	r2,r2,-6
   21c70:	1000191e 	bne	r2,zero,21cd8 <alt_avalon_i2c_master_tx_rx+0x190>
   21c74:	e0bff917 	ldw	r2,-28(fp)
   21c78:	10bffee0 	cmpeqi	r2,r2,-5
   21c7c:	1000161e 	bne	r2,zero,21cd8 <alt_avalon_i2c_master_tx_rx+0x190>
   21c80:	e0bff917 	ldw	r2,-28(fp)
   21c84:	10bffe58 	cmpnei	r2,r2,-7
   21c88:	1000011e 	bne	r2,zero,21c90 <alt_avalon_i2c_master_tx_rx+0x148>
   21c8c:	00001206 	br	21cd8 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21c90:	00800044 	movi	r2,1
   21c94:	d8800015 	stw	r2,0(sp)
   21c98:	01c00044 	movi	r7,1
   21c9c:	e1800217 	ldw	r6,8(fp)
   21ca0:	e17ffe17 	ldw	r5,-8(fp)
   21ca4:	e13ffb17 	ldw	r4,-20(fp)
   21ca8:	00220dc0 	call	220dc <alt_avalon_i2c_master_receive>
   21cac:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21cb0:	e0bff917 	ldw	r2,-28(fp)
   21cb4:	10bffea0 	cmpeqi	r2,r2,-6
   21cb8:	1000061e 	bne	r2,zero,21cd4 <alt_avalon_i2c_master_tx_rx+0x18c>
   21cbc:	e0bff917 	ldw	r2,-28(fp)
   21cc0:	10bffee0 	cmpeqi	r2,r2,-5
   21cc4:	1000031e 	bne	r2,zero,21cd4 <alt_avalon_i2c_master_tx_rx+0x18c>
   21cc8:	e0bff917 	ldw	r2,-28(fp)
   21ccc:	10bffe58 	cmpnei	r2,r2,-7
   21cd0:	1000081e 	bne	r2,zero,21cf4 <alt_avalon_i2c_master_tx_rx+0x1ac>
   21cd4:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   21cd8:	e0bffa17 	ldw	r2,-24(fp)
   21cdc:	10ffffc4 	addi	r3,r2,-1
   21ce0:	e0fffa15 	stw	r3,-24(fp)
   21ce4:	103fd41e 	bne	r2,zero,21c38 <__alt_data_end+0xfc021c38>
   21ce8:	00000306 	br	21cf8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   21cec:	0001883a 	nop
   21cf0:	00000106 	br	21cf8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   21cf4:	0001883a 	nop
      }
    }
    
    return status;
   21cf8:	e0bff917 	ldw	r2,-28(fp)
}                                       
   21cfc:	e037883a 	mov	sp,fp
   21d00:	dfc00117 	ldw	ra,4(sp)
   21d04:	df000017 	ldw	fp,0(sp)
   21d08:	dec00204 	addi	sp,sp,8
   21d0c:	f800283a 	ret

00021d10 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   21d10:	defff704 	addi	sp,sp,-36
   21d14:	dfc00815 	stw	ra,32(sp)
   21d18:	df000715 	stw	fp,28(sp)
   21d1c:	df000704 	addi	fp,sp,28
   21d20:	e13ffb15 	stw	r4,-20(fp)
   21d24:	e17ffc15 	stw	r5,-16(fp)
   21d28:	e1bffd15 	stw	r6,-12(fp)
   21d2c:	3807883a 	mov	r3,r7
   21d30:	e0800217 	ldw	r2,8(fp)
   21d34:	e0fffe05 	stb	r3,-8(fp)
   21d38:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21d3c:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   21d40:	0149c404 	movi	r5,10000
   21d44:	e13ffd17 	ldw	r4,-12(fp)
   21d48:	000d8e00 	call	d8e0 <__mulsi3>
   21d4c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   21d50:	e0bffd17 	ldw	r2,-12(fp)
   21d54:	1000021e 	bne	r2,zero,21d60 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21d58:	0005883a 	mov	r2,zero
   21d5c:	00005706 	br	21ebc <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21d60:	e0bffe03 	ldbu	r2,-8(fp)
   21d64:	10000a1e 	bne	r2,zero,21d90 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21d68:	e13ffb17 	ldw	r4,-20(fp)
   21d6c:	0020f8c0 	call	20f8c <alt_avalon_i2c_enable>
   21d70:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21d74:	e0bffa17 	ldw	r2,-24(fp)
   21d78:	10000226 	beq	r2,zero,21d84 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   21d7c:	e0bffa17 	ldw	r2,-24(fp)
   21d80:	00004e06 	br	21ebc <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21d84:	01400704 	movi	r5,28
   21d88:	e13ffb17 	ldw	r4,-20(fp)
   21d8c:	00225780 	call	22578 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21d90:	e0bffe03 	ldbu	r2,-8(fp)
   21d94:	100d883a 	mov	r6,r2
   21d98:	000b883a 	mov	r5,zero
   21d9c:	e13ffb17 	ldw	r4,-20(fp)
   21da0:	00215f40 	call	215f4 <alt_avalon_i2c_send_address>
   21da4:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   21da8:	e0bffa17 	ldw	r2,-24(fp)
   21dac:	1000271e 	bne	r2,zero,21e4c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21db0:	00000f06 	br	21df0 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21db4:	e0bffc17 	ldw	r2,-16(fp)
   21db8:	10800003 	ldbu	r2,0(r2)
   21dbc:	10803fcc 	andi	r2,r2,255
   21dc0:	000f883a 	mov	r7,zero
   21dc4:	000d883a 	mov	r6,zero
   21dc8:	100b883a 	mov	r5,r2
   21dcc:	e13ffb17 	ldw	r4,-20(fp)
   21dd0:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   21dd4:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   21dd8:	e0bffc17 	ldw	r2,-16(fp)
   21ddc:	10800044 	addi	r2,r2,1
   21de0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21de4:	e0bffd17 	ldw	r2,-12(fp)
   21de8:	10bfffc4 	addi	r2,r2,-1
   21dec:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21df0:	e0bffd17 	ldw	r2,-12(fp)
   21df4:	108000b0 	cmpltui	r2,r2,2
   21df8:	1000021e 	bne	r2,zero,21e04 <alt_avalon_i2c_master_transmit+0xf4>
   21dfc:	e0bffa17 	ldw	r2,-24(fp)
   21e00:	103fec26 	beq	r2,zero,21db4 <__alt_data_end+0xfc021db4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21e04:	e0bffa17 	ldw	r2,-24(fp)
   21e08:	1000101e 	bne	r2,zero,21e4c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21e0c:	e0bffc17 	ldw	r2,-16(fp)
   21e10:	10800003 	ldbu	r2,0(r2)
   21e14:	10803fcc 	andi	r2,r2,255
   21e18:	e0ffff03 	ldbu	r3,-4(fp)
   21e1c:	180f883a 	mov	r7,r3
   21e20:	000d883a 	mov	r6,zero
   21e24:	100b883a 	mov	r5,r2
   21e28:	e13ffb17 	ldw	r4,-20(fp)
   21e2c:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   21e30:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   21e34:	e0bffc17 	ldw	r2,-16(fp)
   21e38:	10800044 	addi	r2,r2,1
   21e3c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21e40:	e0bffd17 	ldw	r2,-12(fp)
   21e44:	10bfffc4 	addi	r2,r2,-1
   21e48:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21e4c:	e0bfff03 	ldbu	r2,-4(fp)
   21e50:	1000101e 	bne	r2,zero,21e94 <alt_avalon_i2c_master_transmit+0x184>
   21e54:	e0bffa17 	ldw	r2,-24(fp)
   21e58:	10001726 	beq	r2,zero,21eb8 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21e5c:	00000d06 	br	21e94 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21e60:	e0bff917 	ldw	r2,-28(fp)
   21e64:	108002a8 	cmpgeui	r2,r2,10
   21e68:	1000021e 	bne	r2,zero,21e74 <alt_avalon_i2c_master_transmit+0x164>
   21e6c:	0109c404 	movi	r4,10000
   21e70:	00236ac0 	call	236ac <alt_busy_sleep>
            if (--timeout == 0)
   21e74:	e0bff917 	ldw	r2,-28(fp)
   21e78:	10bfffc4 	addi	r2,r2,-1
   21e7c:	e0bff915 	stw	r2,-28(fp)
   21e80:	e0bff917 	ldw	r2,-28(fp)
   21e84:	1000031e 	bne	r2,zero,21e94 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21e88:	00bfff84 	movi	r2,-2
   21e8c:	e0bffa15 	stw	r2,-24(fp)
               break;
   21e90:	00000306 	br	21ea0 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21e94:	e13ffb17 	ldw	r4,-20(fp)
   21e98:	002137c0 	call	2137c <alt_avalon_i2c_is_busy>
   21e9c:	103ff01e 	bne	r2,zero,21e60 <__alt_data_end+0xfc021e60>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   21ea0:	e0bffa04 	addi	r2,fp,-24
   21ea4:	100b883a 	mov	r5,r2
   21ea8:	e13ffb17 	ldw	r4,-20(fp)
   21eac:	00217500 	call	21750 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21eb0:	e13ffb17 	ldw	r4,-20(fp)
   21eb4:	00210240 	call	21024 <alt_avalon_i2c_disable>
    }


    return status;
   21eb8:	e0bffa17 	ldw	r2,-24(fp)
}
   21ebc:	e037883a 	mov	sp,fp
   21ec0:	dfc00117 	ldw	ra,4(sp)
   21ec4:	df000017 	ldw	fp,0(sp)
   21ec8:	dec00204 	addi	sp,sp,8
   21ecc:	f800283a 	ret

00021ed0 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   21ed0:	defff604 	addi	sp,sp,-40
   21ed4:	dfc00915 	stw	ra,36(sp)
   21ed8:	df000815 	stw	fp,32(sp)
   21edc:	df000804 	addi	fp,sp,32
   21ee0:	e13ffb15 	stw	r4,-20(fp)
   21ee4:	e17ffc15 	stw	r5,-16(fp)
   21ee8:	e1bffd15 	stw	r6,-12(fp)
   21eec:	3807883a 	mov	r3,r7
   21ef0:	e0800217 	ldw	r2,8(fp)
   21ef4:	e0fffe05 	stb	r3,-8(fp)
   21ef8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21efc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   21f00:	0149c404 	movi	r5,10000
   21f04:	e13ffd17 	ldw	r4,-12(fp)
   21f08:	000d8e00 	call	d8e0 <__mulsi3>
   21f0c:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   21f10:	e0bffb17 	ldw	r2,-20(fp)
   21f14:	10800717 	ldw	r2,28(r2)
   21f18:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   21f1c:	e0bffd17 	ldw	r2,-12(fp)
   21f20:	1000021e 	bne	r2,zero,21f2c <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21f24:	0005883a 	mov	r2,zero
   21f28:	00006706 	br	220c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   21f2c:	e0bffb17 	ldw	r2,-20(fp)
   21f30:	10c00617 	ldw	r3,24(r2)
   21f34:	008000b4 	movhi	r2,2
   21f38:	10830404 	addi	r2,r2,3088
   21f3c:	18800226 	beq	r3,r2,21f48 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   21f40:	00bfff44 	movi	r2,-3
   21f44:	00006006 	br	220c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21f48:	e0bffe03 	ldbu	r2,-8(fp)
   21f4c:	10000a1e 	bne	r2,zero,21f78 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21f50:	e13ffb17 	ldw	r4,-20(fp)
   21f54:	0020f8c0 	call	20f8c <alt_avalon_i2c_enable>
   21f58:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21f5c:	e0bff817 	ldw	r2,-32(fp)
   21f60:	10000226 	beq	r2,zero,21f6c <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   21f64:	e0bff817 	ldw	r2,-32(fp)
   21f68:	00005706 	br	220c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21f6c:	01400704 	movi	r5,28
   21f70:	e13ffb17 	ldw	r4,-20(fp)
   21f74:	00225780 	call	22578 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21f78:	e0bffe03 	ldbu	r2,-8(fp)
   21f7c:	100d883a 	mov	r6,r2
   21f80:	000b883a 	mov	r5,zero
   21f84:	e13ffb17 	ldw	r4,-20(fp)
   21f88:	00215f40 	call	215f4 <alt_avalon_i2c_send_address>
   21f8c:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   21f90:	e0bff817 	ldw	r2,-32(fp)
   21f94:	1000271e 	bne	r2,zero,22034 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21f98:	00000f06 	br	21fd8 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21f9c:	e0bffc17 	ldw	r2,-16(fp)
   21fa0:	10800003 	ldbu	r2,0(r2)
   21fa4:	10803fcc 	andi	r2,r2,255
   21fa8:	000f883a 	mov	r7,zero
   21fac:	000d883a 	mov	r6,zero
   21fb0:	100b883a 	mov	r5,r2
   21fb4:	e13ffb17 	ldw	r4,-20(fp)
   21fb8:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   21fbc:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   21fc0:	e0bffc17 	ldw	r2,-16(fp)
   21fc4:	10800044 	addi	r2,r2,1
   21fc8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21fcc:	e0bffd17 	ldw	r2,-12(fp)
   21fd0:	10bfffc4 	addi	r2,r2,-1
   21fd4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21fd8:	e0bffd17 	ldw	r2,-12(fp)
   21fdc:	108000b0 	cmpltui	r2,r2,2
   21fe0:	1000021e 	bne	r2,zero,21fec <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   21fe4:	e0bff817 	ldw	r2,-32(fp)
   21fe8:	103fec26 	beq	r2,zero,21f9c <__alt_data_end+0xfc021f9c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21fec:	e0bff817 	ldw	r2,-32(fp)
   21ff0:	1000101e 	bne	r2,zero,22034 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21ff4:	e0bffc17 	ldw	r2,-16(fp)
   21ff8:	10800003 	ldbu	r2,0(r2)
   21ffc:	10803fcc 	andi	r2,r2,255
   22000:	e0ffff03 	ldbu	r3,-4(fp)
   22004:	180f883a 	mov	r7,r3
   22008:	000d883a 	mov	r6,zero
   2200c:	100b883a 	mov	r5,r2
   22010:	e13ffb17 	ldw	r4,-20(fp)
   22014:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   22018:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   2201c:	e0bffc17 	ldw	r2,-16(fp)
   22020:	10800044 	addi	r2,r2,1
   22024:	e0bffc15 	stw	r2,-16(fp)
            --size;
   22028:	e0bffd17 	ldw	r2,-12(fp)
   2202c:	10bfffc4 	addi	r2,r2,-1
   22030:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   22034:	e0bff817 	ldw	r2,-32(fp)
   22038:	10001426 	beq	r2,zero,2208c <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2203c:	00000d06 	br	22074 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   22040:	e0bff917 	ldw	r2,-28(fp)
   22044:	108002a8 	cmpgeui	r2,r2,10
   22048:	1000021e 	bne	r2,zero,22054 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   2204c:	0109c404 	movi	r4,10000
   22050:	00236ac0 	call	236ac <alt_busy_sleep>
            if (--timeout == 0)
   22054:	e0bff917 	ldw	r2,-28(fp)
   22058:	10bfffc4 	addi	r2,r2,-1
   2205c:	e0bff915 	stw	r2,-28(fp)
   22060:	e0bff917 	ldw	r2,-28(fp)
   22064:	1000031e 	bne	r2,zero,22074 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   22068:	00bfff84 	movi	r2,-2
   2206c:	e0bff815 	stw	r2,-32(fp)
               break;
   22070:	00000306 	br	22080 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   22074:	e13ffb17 	ldw	r4,-20(fp)
   22078:	002137c0 	call	2137c <alt_avalon_i2c_is_busy>
   2207c:	103ff01e 	bne	r2,zero,22040 <__alt_data_end+0xfc022040>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   22080:	e13ffb17 	ldw	r4,-20(fp)
   22084:	00210240 	call	21024 <alt_avalon_i2c_disable>
   22088:	00000e06 	br	220c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   2208c:	e0bfff03 	ldbu	r2,-4(fp)
   22090:	10000c26 	beq	r2,zero,220c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22094:	01400704 	movi	r5,28
   22098:	e13ffb17 	ldw	r4,-20(fp)
   2209c:	00225780 	call	22578 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   220a0:	000b883a 	mov	r5,zero
   220a4:	e13ffb17 	ldw	r4,-20(fp)
   220a8:	00227c00 	call	227c0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   220ac:	e0bffa17 	ldw	r2,-24(fp)
   220b0:	00c00044 	movi	r3,1
   220b4:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   220b8:	01400044 	movi	r5,1
   220bc:	e13ffb17 	ldw	r4,-20(fp)
   220c0:	002261c0 	call	2261c <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   220c4:	e0bff817 	ldw	r2,-32(fp)
}
   220c8:	e037883a 	mov	sp,fp
   220cc:	dfc00117 	ldw	ra,4(sp)
   220d0:	df000017 	ldw	fp,0(sp)
   220d4:	dec00204 	addi	sp,sp,8
   220d8:	f800283a 	ret

000220dc <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   220dc:	defff404 	addi	sp,sp,-48
   220e0:	dfc00b15 	stw	ra,44(sp)
   220e4:	df000a15 	stw	fp,40(sp)
   220e8:	df000a04 	addi	fp,sp,40
   220ec:	e13ffb15 	stw	r4,-20(fp)
   220f0:	e17ffc15 	stw	r5,-16(fp)
   220f4:	e1bffd15 	stw	r6,-12(fp)
   220f8:	3807883a 	mov	r3,r7
   220fc:	e0800217 	ldw	r2,8(fp)
   22100:	e0fffe05 	stb	r3,-8(fp)
   22104:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   22108:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   2210c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   22110:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   22114:	e0bffd17 	ldw	r2,-12(fp)
   22118:	1000021e 	bne	r2,zero,22124 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2211c:	0005883a 	mov	r2,zero
   22120:	00006d06 	br	222d8 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   22124:	e0bffe03 	ldbu	r2,-8(fp)
   22128:	10000a1e 	bne	r2,zero,22154 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2212c:	e13ffb17 	ldw	r4,-20(fp)
   22130:	0020f8c0 	call	20f8c <alt_avalon_i2c_enable>
   22134:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   22138:	e0bff917 	ldw	r2,-28(fp)
   2213c:	10000226 	beq	r2,zero,22148 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   22140:	e0bff917 	ldw	r2,-28(fp)
   22144:	00006406 	br	222d8 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22148:	01400704 	movi	r5,28
   2214c:	e13ffb17 	ldw	r4,-20(fp)
   22150:	00225780 	call	22578 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   22154:	e0bffe03 	ldbu	r2,-8(fp)
   22158:	100d883a 	mov	r6,r2
   2215c:	01400044 	movi	r5,1
   22160:	e13ffb17 	ldw	r4,-20(fp)
   22164:	00215f40 	call	215f4 <alt_avalon_i2c_send_address>
   22168:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2216c:	e0bff917 	ldw	r2,-28(fp)
   22170:	1000341e 	bne	r2,zero,22244 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   22174:	00001906 	br	221dc <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   22178:	000f883a 	mov	r7,zero
   2217c:	000d883a 	mov	r6,zero
   22180:	000b883a 	mov	r5,zero
   22184:	e13ffb17 	ldw	r4,-20(fp)
   22188:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   2218c:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   22190:	e0bff817 	ldw	r2,-32(fp)
   22194:	10800044 	addi	r2,r2,1
   22198:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   2219c:	e0bff917 	ldw	r2,-28(fp)
   221a0:	10000e1e 	bne	r2,zero,221dc <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   221a4:	e0bffa04 	addi	r2,fp,-24
   221a8:	100f883a 	mov	r7,r2
   221ac:	000d883a 	mov	r6,zero
   221b0:	e17ffc17 	ldw	r5,-16(fp)
   221b4:	e13ffb17 	ldw	r4,-20(fp)
   221b8:	00213c00 	call	213c0 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   221bc:	e0bffa17 	ldw	r2,-24(fp)
   221c0:	e0fffc17 	ldw	r3,-16(fp)
   221c4:	1885883a 	add	r2,r3,r2
   221c8:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   221cc:	e0bffa17 	ldw	r2,-24(fp)
   221d0:	e0fff717 	ldw	r3,-36(fp)
   221d4:	1885883a 	add	r2,r3,r2
   221d8:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   221dc:	e0bffd17 	ldw	r2,-12(fp)
   221e0:	10bfffc4 	addi	r2,r2,-1
   221e4:	e0fff817 	ldw	r3,-32(fp)
   221e8:	1880022e 	bgeu	r3,r2,221f4 <alt_avalon_i2c_master_receive+0x118>
   221ec:	e0bff917 	ldw	r2,-28(fp)
   221f0:	103fe126 	beq	r2,zero,22178 <__alt_data_end+0xfc022178>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   221f4:	e0bff917 	ldw	r2,-28(fp)
   221f8:	1000121e 	bne	r2,zero,22244 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   221fc:	e0bfff03 	ldbu	r2,-4(fp)
   22200:	100f883a 	mov	r7,r2
   22204:	000d883a 	mov	r6,zero
   22208:	000b883a 	mov	r5,zero
   2220c:	e13ffb17 	ldw	r4,-20(fp)
   22210:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   22214:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   22218:	00000a06 	br	22244 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   2221c:	e17ffc17 	ldw	r5,-16(fp)
   22220:	e13ffb17 	ldw	r4,-20(fp)
   22224:	00214680 	call	21468 <alt_avalon_i2c_rx_read>
   22228:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   2222c:	e0bffc17 	ldw	r2,-16(fp)
   22230:	10800044 	addi	r2,r2,1
   22234:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   22238:	e0bff717 	ldw	r2,-36(fp)
   2223c:	10800044 	addi	r2,r2,1
   22240:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   22244:	e0fff717 	ldw	r3,-36(fp)
   22248:	e0bffd17 	ldw	r2,-12(fp)
   2224c:	1880022e 	bgeu	r3,r2,22258 <alt_avalon_i2c_master_receive+0x17c>
   22250:	e0bff917 	ldw	r2,-28(fp)
   22254:	103ff126 	beq	r2,zero,2221c <__alt_data_end+0xfc02221c>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   22258:	e0bfff03 	ldbu	r2,-4(fp)
   2225c:	1000021e 	bne	r2,zero,22268 <alt_avalon_i2c_master_receive+0x18c>
   22260:	e0bff917 	ldw	r2,-28(fp)
   22264:	10001b26 	beq	r2,zero,222d4 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   22268:	0149c404 	movi	r5,10000
   2226c:	e13ffd17 	ldw	r4,-12(fp)
   22270:	000d8e00 	call	d8e0 <__mulsi3>
   22274:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   22278:	00000d06 	br	222b0 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2227c:	e0bff617 	ldw	r2,-40(fp)
   22280:	108002a8 	cmpgeui	r2,r2,10
   22284:	1000021e 	bne	r2,zero,22290 <alt_avalon_i2c_master_receive+0x1b4>
   22288:	0109c404 	movi	r4,10000
   2228c:	00236ac0 	call	236ac <alt_busy_sleep>
            if (--timeout == 0)
   22290:	e0bff617 	ldw	r2,-40(fp)
   22294:	10bfffc4 	addi	r2,r2,-1
   22298:	e0bff615 	stw	r2,-40(fp)
   2229c:	e0bff617 	ldw	r2,-40(fp)
   222a0:	1000031e 	bne	r2,zero,222b0 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   222a4:	00bfff84 	movi	r2,-2
   222a8:	e0bff915 	stw	r2,-28(fp)
               break;
   222ac:	00000306 	br	222bc <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   222b0:	e13ffb17 	ldw	r4,-20(fp)
   222b4:	002137c0 	call	2137c <alt_avalon_i2c_is_busy>
   222b8:	103ff01e 	bne	r2,zero,2227c <__alt_data_end+0xfc02227c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   222bc:	e0bff904 	addi	r2,fp,-28
   222c0:	100b883a 	mov	r5,r2
   222c4:	e13ffb17 	ldw	r4,-20(fp)
   222c8:	00217500 	call	21750 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   222cc:	e13ffb17 	ldw	r4,-20(fp)
   222d0:	00210240 	call	21024 <alt_avalon_i2c_disable>
    }

    return status;
   222d4:	e0bff917 	ldw	r2,-28(fp)
}
   222d8:	e037883a 	mov	sp,fp
   222dc:	dfc00117 	ldw	ra,4(sp)
   222e0:	df000017 	ldw	fp,0(sp)
   222e4:	dec00204 	addi	sp,sp,8
   222e8:	f800283a 	ret

000222ec <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   222ec:	defff504 	addi	sp,sp,-44
   222f0:	dfc00a15 	stw	ra,40(sp)
   222f4:	df000915 	stw	fp,36(sp)
   222f8:	df000904 	addi	fp,sp,36
   222fc:	e13ffb15 	stw	r4,-20(fp)
   22300:	e17ffc15 	stw	r5,-16(fp)
   22304:	e1bffd15 	stw	r6,-12(fp)
   22308:	3807883a 	mov	r3,r7
   2230c:	e0800217 	ldw	r2,8(fp)
   22310:	e0fffe05 	stb	r3,-8(fp)
   22314:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   22318:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   2231c:	e0bffb17 	ldw	r2,-20(fp)
   22320:	10800717 	ldw	r2,28(r2)
   22324:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   22328:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   2232c:	e0bffd17 	ldw	r2,-12(fp)
   22330:	1000021e 	bne	r2,zero,2233c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   22334:	0005883a 	mov	r2,zero
   22338:	00006306 	br	224c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   2233c:	e0bffb17 	ldw	r2,-20(fp)
   22340:	10c00617 	ldw	r3,24(r2)
   22344:	008000b4 	movhi	r2,2
   22348:	10830404 	addi	r2,r2,3088
   2234c:	18800226 	beq	r3,r2,22358 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   22350:	00bfff44 	movi	r2,-3
   22354:	00005c06 	br	224c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   22358:	e0bffe03 	ldbu	r2,-8(fp)
   2235c:	10000a1e 	bne	r2,zero,22388 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   22360:	e13ffb17 	ldw	r4,-20(fp)
   22364:	0020f8c0 	call	20f8c <alt_avalon_i2c_enable>
   22368:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2236c:	e0bff717 	ldw	r2,-36(fp)
   22370:	10000226 	beq	r2,zero,2237c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   22374:	e0bff717 	ldw	r2,-36(fp)
   22378:	00005306 	br	224c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2237c:	01400704 	movi	r5,28
   22380:	e13ffb17 	ldw	r4,-20(fp)
   22384:	00225780 	call	22578 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   22388:	e0bffe03 	ldbu	r2,-8(fp)
   2238c:	100d883a 	mov	r6,r2
   22390:	01400044 	movi	r5,1
   22394:	e13ffb17 	ldw	r4,-20(fp)
   22398:	00215f40 	call	215f4 <alt_avalon_i2c_send_address>
   2239c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   223a0:	e0bff717 	ldw	r2,-36(fp)
   223a4:	1000191e 	bne	r2,zero,2240c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   223a8:	00000906 	br	223d0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   223ac:	000f883a 	mov	r7,zero
   223b0:	000d883a 	mov	r6,zero
   223b4:	000b883a 	mov	r5,zero
   223b8:	e13ffb17 	ldw	r4,-20(fp)
   223bc:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   223c0:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   223c4:	e0bff917 	ldw	r2,-28(fp)
   223c8:	10800044 	addi	r2,r2,1
   223cc:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   223d0:	e0bffd17 	ldw	r2,-12(fp)
   223d4:	10bfffc4 	addi	r2,r2,-1
   223d8:	e0fff917 	ldw	r3,-28(fp)
   223dc:	1880022e 	bgeu	r3,r2,223e8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   223e0:	e0bff717 	ldw	r2,-36(fp)
   223e4:	103ff126 	beq	r2,zero,223ac <__alt_data_end+0xfc0223ac>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   223e8:	e0bff717 	ldw	r2,-36(fp)
   223ec:	1000071e 	bne	r2,zero,2240c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   223f0:	e0bfff03 	ldbu	r2,-4(fp)
   223f4:	100f883a 	mov	r7,r2
   223f8:	000d883a 	mov	r6,zero
   223fc:	000b883a 	mov	r5,zero
   22400:	e13ffb17 	ldw	r4,-20(fp)
   22404:	00215100 	call	21510 <alt_avalon_i2c_cmd_write>
   22408:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2240c:	e0bff717 	ldw	r2,-36(fp)
   22410:	10001826 	beq	r2,zero,22474 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   22414:	0149c404 	movi	r5,10000
   22418:	e13ffd17 	ldw	r4,-12(fp)
   2241c:	000d8e00 	call	d8e0 <__mulsi3>
   22420:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   22424:	00000d06 	br	2245c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   22428:	e0bff817 	ldw	r2,-32(fp)
   2242c:	108002a8 	cmpgeui	r2,r2,10
   22430:	1000021e 	bne	r2,zero,2243c <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   22434:	0109c404 	movi	r4,10000
   22438:	00236ac0 	call	236ac <alt_busy_sleep>
            if (--timeout == 0)
   2243c:	e0bff817 	ldw	r2,-32(fp)
   22440:	10bfffc4 	addi	r2,r2,-1
   22444:	e0bff815 	stw	r2,-32(fp)
   22448:	e0bff817 	ldw	r2,-32(fp)
   2244c:	1000031e 	bne	r2,zero,2245c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   22450:	00bfff84 	movi	r2,-2
   22454:	e0bff715 	stw	r2,-36(fp)
               break;
   22458:	00000306 	br	22468 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2245c:	e13ffb17 	ldw	r4,-20(fp)
   22460:	002137c0 	call	2137c <alt_avalon_i2c_is_busy>
   22464:	103ff01e 	bne	r2,zero,22428 <__alt_data_end+0xfc022428>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   22468:	e13ffb17 	ldw	r4,-20(fp)
   2246c:	00210240 	call	21024 <alt_avalon_i2c_disable>
   22470:	00001406 	br	224c4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   22474:	e0bfff03 	ldbu	r2,-4(fp)
   22478:	10001226 	beq	r2,zero,224c4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2247c:	01400704 	movi	r5,28
   22480:	e13ffb17 	ldw	r4,-20(fp)
   22484:	00225780 	call	22578 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   22488:	000b883a 	mov	r5,zero
   2248c:	e13ffb17 	ldw	r4,-20(fp)
   22490:	00227100 	call	22710 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   22494:	e0bffa17 	ldw	r2,-24(fp)
   22498:	00c00084 	movi	r3,2
   2249c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   224a0:	e0bffa17 	ldw	r2,-24(fp)
   224a4:	e0fffc17 	ldw	r3,-16(fp)
   224a8:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   224ac:	e0bffa17 	ldw	r2,-24(fp)
   224b0:	e0fffd17 	ldw	r3,-12(fp)
   224b4:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   224b8:	01400084 	movi	r5,2
   224bc:	e13ffb17 	ldw	r4,-20(fp)
   224c0:	002261c0 	call	2261c <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   224c4:	e0bff717 	ldw	r2,-36(fp)
}
   224c8:	e037883a 	mov	sp,fp
   224cc:	dfc00117 	ldw	ra,4(sp)
   224d0:	df000017 	ldw	fp,0(sp)
   224d4:	dec00204 	addi	sp,sp,8
   224d8:	f800283a 	ret

000224dc <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   224dc:	defffd04 	addi	sp,sp,-12
   224e0:	df000215 	stw	fp,8(sp)
   224e4:	df000204 	addi	fp,sp,8
   224e8:	e13ffe15 	stw	r4,-8(fp)
   224ec:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   224f0:	e0bffe17 	ldw	r2,-8(fp)
   224f4:	10800317 	ldw	r2,12(r2)
   224f8:	10800404 	addi	r2,r2,16
   224fc:	10c00037 	ldwio	r3,0(r2)
   22500:	e0bffe17 	ldw	r2,-8(fp)
   22504:	10800317 	ldw	r2,12(r2)
   22508:	10800304 	addi	r2,r2,12
   2250c:	10800037 	ldwio	r2,0(r2)
   22510:	1884703a 	and	r2,r3,r2
   22514:	1007883a 	mov	r3,r2
   22518:	e0bfff17 	ldw	r2,-4(fp)
   2251c:	10c00015 	stw	r3,0(r2)
}
   22520:	0001883a 	nop
   22524:	e037883a 	mov	sp,fp
   22528:	df000017 	ldw	fp,0(sp)
   2252c:	dec00104 	addi	sp,sp,4
   22530:	f800283a 	ret

00022534 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   22534:	defffd04 	addi	sp,sp,-12
   22538:	df000215 	stw	fp,8(sp)
   2253c:	df000204 	addi	fp,sp,8
   22540:	e13ffe15 	stw	r4,-8(fp)
   22544:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   22548:	e0bffe17 	ldw	r2,-8(fp)
   2254c:	10800317 	ldw	r2,12(r2)
   22550:	10800404 	addi	r2,r2,16
   22554:	10800037 	ldwio	r2,0(r2)
   22558:	1007883a 	mov	r3,r2
   2255c:	e0bfff17 	ldw	r2,-4(fp)
   22560:	10c00015 	stw	r3,0(r2)
}
   22564:	0001883a 	nop
   22568:	e037883a 	mov	sp,fp
   2256c:	df000017 	ldw	fp,0(sp)
   22570:	dec00104 	addi	sp,sp,4
   22574:	f800283a 	ret

00022578 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   22578:	defffd04 	addi	sp,sp,-12
   2257c:	df000215 	stw	fp,8(sp)
   22580:	df000204 	addi	fp,sp,8
   22584:	e13ffe15 	stw	r4,-8(fp)
   22588:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   2258c:	e0bffe17 	ldw	r2,-8(fp)
   22590:	10800317 	ldw	r2,12(r2)
   22594:	10800404 	addi	r2,r2,16
   22598:	e0ffff17 	ldw	r3,-4(fp)
   2259c:	10c00035 	stwio	r3,0(r2)
}
   225a0:	0001883a 	nop
   225a4:	e037883a 	mov	sp,fp
   225a8:	df000017 	ldw	fp,0(sp)
   225ac:	dec00104 	addi	sp,sp,4
   225b0:	f800283a 	ret

000225b4 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   225b4:	defffb04 	addi	sp,sp,-20
   225b8:	dfc00415 	stw	ra,16(sp)
   225bc:	df000315 	stw	fp,12(sp)
   225c0:	df000304 	addi	fp,sp,12
   225c4:	e13ffe15 	stw	r4,-8(fp)
   225c8:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   225cc:	e17ffd04 	addi	r5,fp,-12
   225d0:	e13ffe17 	ldw	r4,-8(fp)
   225d4:	00226800 	call	22680 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   225d8:	e0bfff17 	ldw	r2,-4(fp)
   225dc:	0086303a 	nor	r3,zero,r2
   225e0:	e0bffd17 	ldw	r2,-12(fp)
   225e4:	1884703a 	and	r2,r3,r2
   225e8:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   225ec:	e0bffe17 	ldw	r2,-8(fp)
   225f0:	10800317 	ldw	r2,12(r2)
   225f4:	10800304 	addi	r2,r2,12
   225f8:	e0fffd17 	ldw	r3,-12(fp)
   225fc:	18c007cc 	andi	r3,r3,31
   22600:	10c00035 	stwio	r3,0(r2)
}
   22604:	0001883a 	nop
   22608:	e037883a 	mov	sp,fp
   2260c:	dfc00117 	ldw	ra,4(sp)
   22610:	df000017 	ldw	fp,0(sp)
   22614:	dec00204 	addi	sp,sp,8
   22618:	f800283a 	ret

0002261c <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2261c:	defffb04 	addi	sp,sp,-20
   22620:	dfc00415 	stw	ra,16(sp)
   22624:	df000315 	stw	fp,12(sp)
   22628:	df000304 	addi	fp,sp,12
   2262c:	e13ffe15 	stw	r4,-8(fp)
   22630:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   22634:	e17ffd04 	addi	r5,fp,-12
   22638:	e13ffe17 	ldw	r4,-8(fp)
   2263c:	00226800 	call	22680 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   22640:	e0fffd17 	ldw	r3,-12(fp)
   22644:	e0bfff17 	ldw	r2,-4(fp)
   22648:	1884b03a 	or	r2,r3,r2
   2264c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   22650:	e0bffe17 	ldw	r2,-8(fp)
   22654:	10800317 	ldw	r2,12(r2)
   22658:	10800304 	addi	r2,r2,12
   2265c:	e0fffd17 	ldw	r3,-12(fp)
   22660:	18c007cc 	andi	r3,r3,31
   22664:	10c00035 	stwio	r3,0(r2)
}
   22668:	0001883a 	nop
   2266c:	e037883a 	mov	sp,fp
   22670:	dfc00117 	ldw	ra,4(sp)
   22674:	df000017 	ldw	fp,0(sp)
   22678:	dec00204 	addi	sp,sp,8
   2267c:	f800283a 	ret

00022680 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   22680:	defffd04 	addi	sp,sp,-12
   22684:	df000215 	stw	fp,8(sp)
   22688:	df000204 	addi	fp,sp,8
   2268c:	e13ffe15 	stw	r4,-8(fp)
   22690:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   22694:	e0bffe17 	ldw	r2,-8(fp)
   22698:	10800317 	ldw	r2,12(r2)
   2269c:	10800304 	addi	r2,r2,12
   226a0:	10800037 	ldwio	r2,0(r2)
   226a4:	10c007cc 	andi	r3,r2,31
   226a8:	e0bfff17 	ldw	r2,-4(fp)
   226ac:	10c00015 	stw	r3,0(r2)
}
   226b0:	0001883a 	nop
   226b4:	e037883a 	mov	sp,fp
   226b8:	df000017 	ldw	fp,0(sp)
   226bc:	dec00104 	addi	sp,sp,4
   226c0:	f800283a 	ret

000226c4 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   226c4:	defffd04 	addi	sp,sp,-12
   226c8:	df000215 	stw	fp,8(sp)
   226cc:	df000204 	addi	fp,sp,8
   226d0:	e13ffe15 	stw	r4,-8(fp)
   226d4:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   226d8:	e0bffe17 	ldw	r2,-8(fp)
   226dc:	10800317 	ldw	r2,12(r2)
   226e0:	10800204 	addi	r2,r2,8
   226e4:	10800037 	ldwio	r2,0(r2)
   226e8:	10800c0c 	andi	r2,r2,48
   226ec:	1005d13a 	srai	r2,r2,4
   226f0:	1007883a 	mov	r3,r2
   226f4:	e0bfff17 	ldw	r2,-4(fp)
   226f8:	10c00015 	stw	r3,0(r2)
}
   226fc:	0001883a 	nop
   22700:	e037883a 	mov	sp,fp
   22704:	df000017 	ldw	fp,0(sp)
   22708:	dec00104 	addi	sp,sp,4
   2270c:	f800283a 	ret

00022710 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   22710:	defffd04 	addi	sp,sp,-12
   22714:	df000215 	stw	fp,8(sp)
   22718:	df000204 	addi	fp,sp,8
   2271c:	e13ffe15 	stw	r4,-8(fp)
   22720:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   22724:	e0bffe17 	ldw	r2,-8(fp)
   22728:	10800317 	ldw	r2,12(r2)
   2272c:	10800204 	addi	r2,r2,8
   22730:	e0fffe17 	ldw	r3,-8(fp)
   22734:	18c00317 	ldw	r3,12(r3)
   22738:	18c00204 	addi	r3,r3,8
   2273c:	18c00037 	ldwio	r3,0(r3)
   22740:	1809883a 	mov	r4,r3
   22744:	00fff3c4 	movi	r3,-49
   22748:	20c8703a 	and	r4,r4,r3
   2274c:	e0ffff17 	ldw	r3,-4(fp)
   22750:	1806913a 	slli	r3,r3,4
   22754:	18c00c0c 	andi	r3,r3,48
   22758:	20c6b03a 	or	r3,r4,r3
   2275c:	10c00035 	stwio	r3,0(r2)
}
   22760:	0001883a 	nop
   22764:	e037883a 	mov	sp,fp
   22768:	df000017 	ldw	fp,0(sp)
   2276c:	dec00104 	addi	sp,sp,4
   22770:	f800283a 	ret

00022774 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   22774:	defffd04 	addi	sp,sp,-12
   22778:	df000215 	stw	fp,8(sp)
   2277c:	df000204 	addi	fp,sp,8
   22780:	e13ffe15 	stw	r4,-8(fp)
   22784:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   22788:	e0bffe17 	ldw	r2,-8(fp)
   2278c:	10800317 	ldw	r2,12(r2)
   22790:	10800204 	addi	r2,r2,8
   22794:	10800037 	ldwio	r2,0(r2)
   22798:	1080030c 	andi	r2,r2,12
   2279c:	1005d0ba 	srai	r2,r2,2
   227a0:	1007883a 	mov	r3,r2
   227a4:	e0bfff17 	ldw	r2,-4(fp)
   227a8:	10c00015 	stw	r3,0(r2)
}
   227ac:	0001883a 	nop
   227b0:	e037883a 	mov	sp,fp
   227b4:	df000017 	ldw	fp,0(sp)
   227b8:	dec00104 	addi	sp,sp,4
   227bc:	f800283a 	ret

000227c0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   227c0:	defffd04 	addi	sp,sp,-12
   227c4:	df000215 	stw	fp,8(sp)
   227c8:	df000204 	addi	fp,sp,8
   227cc:	e13ffe15 	stw	r4,-8(fp)
   227d0:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   227d4:	e0bffe17 	ldw	r2,-8(fp)
   227d8:	10800317 	ldw	r2,12(r2)
   227dc:	10c00204 	addi	r3,r2,8
   227e0:	e0bffe17 	ldw	r2,-8(fp)
   227e4:	10800317 	ldw	r2,12(r2)
   227e8:	10800204 	addi	r2,r2,8
   227ec:	10800037 	ldwio	r2,0(r2)
   227f0:	1009883a 	mov	r4,r2
   227f4:	00bffcc4 	movi	r2,-13
   227f8:	2088703a 	and	r4,r4,r2
   227fc:	e0bfff17 	ldw	r2,-4(fp)
   22800:	1085883a 	add	r2,r2,r2
   22804:	1085883a 	add	r2,r2,r2
   22808:	1080030c 	andi	r2,r2,12
   2280c:	2084b03a 	or	r2,r4,r2
   22810:	18800035 	stwio	r2,0(r3)
}
   22814:	0001883a 	nop
   22818:	e037883a 	mov	sp,fp
   2281c:	df000017 	ldw	fp,0(sp)
   22820:	dec00104 	addi	sp,sp,4
   22824:	f800283a 	ret

00022828 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   22828:	defffa04 	addi	sp,sp,-24
   2282c:	dfc00515 	stw	ra,20(sp)
   22830:	df000415 	stw	fp,16(sp)
   22834:	df000404 	addi	fp,sp,16
   22838:	e13ffd15 	stw	r4,-12(fp)
   2283c:	e17ffe15 	stw	r5,-8(fp)
   22840:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22844:	e0bffd17 	ldw	r2,-12(fp)
   22848:	10800017 	ldw	r2,0(r2)
   2284c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   22850:	e0bffc17 	ldw	r2,-16(fp)
   22854:	10c00a04 	addi	r3,r2,40
   22858:	e0bffd17 	ldw	r2,-12(fp)
   2285c:	10800217 	ldw	r2,8(r2)
   22860:	100f883a 	mov	r7,r2
   22864:	e1bfff17 	ldw	r6,-4(fp)
   22868:	e17ffe17 	ldw	r5,-8(fp)
   2286c:	1809883a 	mov	r4,r3
   22870:	0022e500 	call	22e50 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   22874:	e037883a 	mov	sp,fp
   22878:	dfc00117 	ldw	ra,4(sp)
   2287c:	df000017 	ldw	fp,0(sp)
   22880:	dec00204 	addi	sp,sp,8
   22884:	f800283a 	ret

00022888 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   22888:	defffa04 	addi	sp,sp,-24
   2288c:	dfc00515 	stw	ra,20(sp)
   22890:	df000415 	stw	fp,16(sp)
   22894:	df000404 	addi	fp,sp,16
   22898:	e13ffd15 	stw	r4,-12(fp)
   2289c:	e17ffe15 	stw	r5,-8(fp)
   228a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   228a4:	e0bffd17 	ldw	r2,-12(fp)
   228a8:	10800017 	ldw	r2,0(r2)
   228ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   228b0:	e0bffc17 	ldw	r2,-16(fp)
   228b4:	10c00a04 	addi	r3,r2,40
   228b8:	e0bffd17 	ldw	r2,-12(fp)
   228bc:	10800217 	ldw	r2,8(r2)
   228c0:	100f883a 	mov	r7,r2
   228c4:	e1bfff17 	ldw	r6,-4(fp)
   228c8:	e17ffe17 	ldw	r5,-8(fp)
   228cc:	1809883a 	mov	r4,r3
   228d0:	002306c0 	call	2306c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   228d4:	e037883a 	mov	sp,fp
   228d8:	dfc00117 	ldw	ra,4(sp)
   228dc:	df000017 	ldw	fp,0(sp)
   228e0:	dec00204 	addi	sp,sp,8
   228e4:	f800283a 	ret

000228e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   228e8:	defffc04 	addi	sp,sp,-16
   228ec:	dfc00315 	stw	ra,12(sp)
   228f0:	df000215 	stw	fp,8(sp)
   228f4:	df000204 	addi	fp,sp,8
   228f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   228fc:	e0bfff17 	ldw	r2,-4(fp)
   22900:	10800017 	ldw	r2,0(r2)
   22904:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   22908:	e0bffe17 	ldw	r2,-8(fp)
   2290c:	10c00a04 	addi	r3,r2,40
   22910:	e0bfff17 	ldw	r2,-4(fp)
   22914:	10800217 	ldw	r2,8(r2)
   22918:	100b883a 	mov	r5,r2
   2291c:	1809883a 	mov	r4,r3
   22920:	0022cf80 	call	22cf8 <altera_avalon_jtag_uart_close>
}
   22924:	e037883a 	mov	sp,fp
   22928:	dfc00117 	ldw	ra,4(sp)
   2292c:	df000017 	ldw	fp,0(sp)
   22930:	dec00204 	addi	sp,sp,8
   22934:	f800283a 	ret

00022938 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   22938:	defffa04 	addi	sp,sp,-24
   2293c:	dfc00515 	stw	ra,20(sp)
   22940:	df000415 	stw	fp,16(sp)
   22944:	df000404 	addi	fp,sp,16
   22948:	e13ffd15 	stw	r4,-12(fp)
   2294c:	e17ffe15 	stw	r5,-8(fp)
   22950:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   22954:	e0bffd17 	ldw	r2,-12(fp)
   22958:	10800017 	ldw	r2,0(r2)
   2295c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   22960:	e0bffc17 	ldw	r2,-16(fp)
   22964:	10800a04 	addi	r2,r2,40
   22968:	e1bfff17 	ldw	r6,-4(fp)
   2296c:	e17ffe17 	ldw	r5,-8(fp)
   22970:	1009883a 	mov	r4,r2
   22974:	0022d600 	call	22d60 <altera_avalon_jtag_uart_ioctl>
}
   22978:	e037883a 	mov	sp,fp
   2297c:	dfc00117 	ldw	ra,4(sp)
   22980:	df000017 	ldw	fp,0(sp)
   22984:	dec00204 	addi	sp,sp,8
   22988:	f800283a 	ret

0002298c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2298c:	defffa04 	addi	sp,sp,-24
   22990:	dfc00515 	stw	ra,20(sp)
   22994:	df000415 	stw	fp,16(sp)
   22998:	df000404 	addi	fp,sp,16
   2299c:	e13ffd15 	stw	r4,-12(fp)
   229a0:	e17ffe15 	stw	r5,-8(fp)
   229a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   229a8:	e0bffd17 	ldw	r2,-12(fp)
   229ac:	00c00044 	movi	r3,1
   229b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   229b4:	e0bffd17 	ldw	r2,-12(fp)
   229b8:	10800017 	ldw	r2,0(r2)
   229bc:	10800104 	addi	r2,r2,4
   229c0:	1007883a 	mov	r3,r2
   229c4:	e0bffd17 	ldw	r2,-12(fp)
   229c8:	10800817 	ldw	r2,32(r2)
   229cc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   229d0:	e0bffe17 	ldw	r2,-8(fp)
   229d4:	e0ffff17 	ldw	r3,-4(fp)
   229d8:	d8000015 	stw	zero,0(sp)
   229dc:	e1fffd17 	ldw	r7,-12(fp)
   229e0:	018000b4 	movhi	r6,2
   229e4:	318a9304 	addi	r6,r6,10828
   229e8:	180b883a 	mov	r5,r3
   229ec:	1009883a 	mov	r4,r2
   229f0:	0023a740 	call	23a74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   229f4:	e0bffd17 	ldw	r2,-12(fp)
   229f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   229fc:	e0bffd17 	ldw	r2,-12(fp)
   22a00:	10800204 	addi	r2,r2,8
   22a04:	d0f25617 	ldw	r3,-13992(gp)
   22a08:	e1fffd17 	ldw	r7,-12(fp)
   22a0c:	018000b4 	movhi	r6,2
   22a10:	318b1604 	addi	r6,r6,11352
   22a14:	180b883a 	mov	r5,r3
   22a18:	1009883a 	mov	r4,r2
   22a1c:	00235800 	call	23580 <alt_alarm_start>
   22a20:	1000040e 	bge	r2,zero,22a34 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   22a24:	e0fffd17 	ldw	r3,-12(fp)
   22a28:	00a00034 	movhi	r2,32768
   22a2c:	10bfffc4 	addi	r2,r2,-1
   22a30:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   22a34:	0001883a 	nop
   22a38:	e037883a 	mov	sp,fp
   22a3c:	dfc00117 	ldw	ra,4(sp)
   22a40:	df000017 	ldw	fp,0(sp)
   22a44:	dec00204 	addi	sp,sp,8
   22a48:	f800283a 	ret

00022a4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   22a4c:	defff804 	addi	sp,sp,-32
   22a50:	df000715 	stw	fp,28(sp)
   22a54:	df000704 	addi	fp,sp,28
   22a58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   22a5c:	e0bfff17 	ldw	r2,-4(fp)
   22a60:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   22a64:	e0bffb17 	ldw	r2,-20(fp)
   22a68:	10800017 	ldw	r2,0(r2)
   22a6c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22a70:	e0bffc17 	ldw	r2,-16(fp)
   22a74:	10800104 	addi	r2,r2,4
   22a78:	10800037 	ldwio	r2,0(r2)
   22a7c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   22a80:	e0bffd17 	ldw	r2,-12(fp)
   22a84:	1080c00c 	andi	r2,r2,768
   22a88:	10006d26 	beq	r2,zero,22c40 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   22a8c:	e0bffd17 	ldw	r2,-12(fp)
   22a90:	1080400c 	andi	r2,r2,256
   22a94:	10003526 	beq	r2,zero,22b6c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   22a98:	00800074 	movhi	r2,1
   22a9c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22aa0:	e0bffb17 	ldw	r2,-20(fp)
   22aa4:	10800a17 	ldw	r2,40(r2)
   22aa8:	10800044 	addi	r2,r2,1
   22aac:	1081ffcc 	andi	r2,r2,2047
   22ab0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   22ab4:	e0bffb17 	ldw	r2,-20(fp)
   22ab8:	10c00b17 	ldw	r3,44(r2)
   22abc:	e0bffe17 	ldw	r2,-8(fp)
   22ac0:	18801526 	beq	r3,r2,22b18 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   22ac4:	e0bffc17 	ldw	r2,-16(fp)
   22ac8:	10800037 	ldwio	r2,0(r2)
   22acc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   22ad0:	e0bff917 	ldw	r2,-28(fp)
   22ad4:	10a0000c 	andi	r2,r2,32768
   22ad8:	10001126 	beq	r2,zero,22b20 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   22adc:	e0bffb17 	ldw	r2,-20(fp)
   22ae0:	10800a17 	ldw	r2,40(r2)
   22ae4:	e0fff917 	ldw	r3,-28(fp)
   22ae8:	1809883a 	mov	r4,r3
   22aec:	e0fffb17 	ldw	r3,-20(fp)
   22af0:	1885883a 	add	r2,r3,r2
   22af4:	10800e04 	addi	r2,r2,56
   22af8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22afc:	e0bffb17 	ldw	r2,-20(fp)
   22b00:	10800a17 	ldw	r2,40(r2)
   22b04:	10800044 	addi	r2,r2,1
   22b08:	10c1ffcc 	andi	r3,r2,2047
   22b0c:	e0bffb17 	ldw	r2,-20(fp)
   22b10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   22b14:	003fe206 	br	22aa0 <__alt_data_end+0xfc022aa0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   22b18:	0001883a 	nop
   22b1c:	00000106 	br	22b24 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   22b20:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   22b24:	e0bff917 	ldw	r2,-28(fp)
   22b28:	10bfffec 	andhi	r2,r2,65535
   22b2c:	10000f26 	beq	r2,zero,22b6c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22b30:	e0bffb17 	ldw	r2,-20(fp)
   22b34:	10c00817 	ldw	r3,32(r2)
   22b38:	00bfff84 	movi	r2,-2
   22b3c:	1886703a 	and	r3,r3,r2
   22b40:	e0bffb17 	ldw	r2,-20(fp)
   22b44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   22b48:	e0bffc17 	ldw	r2,-16(fp)
   22b4c:	10800104 	addi	r2,r2,4
   22b50:	1007883a 	mov	r3,r2
   22b54:	e0bffb17 	ldw	r2,-20(fp)
   22b58:	10800817 	ldw	r2,32(r2)
   22b5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22b60:	e0bffc17 	ldw	r2,-16(fp)
   22b64:	10800104 	addi	r2,r2,4
   22b68:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   22b6c:	e0bffd17 	ldw	r2,-12(fp)
   22b70:	1080800c 	andi	r2,r2,512
   22b74:	103fbe26 	beq	r2,zero,22a70 <__alt_data_end+0xfc022a70>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   22b78:	e0bffd17 	ldw	r2,-12(fp)
   22b7c:	1004d43a 	srli	r2,r2,16
   22b80:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   22b84:	00001406 	br	22bd8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   22b88:	e0bffc17 	ldw	r2,-16(fp)
   22b8c:	e0fffb17 	ldw	r3,-20(fp)
   22b90:	18c00d17 	ldw	r3,52(r3)
   22b94:	e13ffb17 	ldw	r4,-20(fp)
   22b98:	20c7883a 	add	r3,r4,r3
   22b9c:	18c20e04 	addi	r3,r3,2104
   22ba0:	18c00003 	ldbu	r3,0(r3)
   22ba4:	18c03fcc 	andi	r3,r3,255
   22ba8:	18c0201c 	xori	r3,r3,128
   22bac:	18ffe004 	addi	r3,r3,-128
   22bb0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22bb4:	e0bffb17 	ldw	r2,-20(fp)
   22bb8:	10800d17 	ldw	r2,52(r2)
   22bbc:	10800044 	addi	r2,r2,1
   22bc0:	10c1ffcc 	andi	r3,r2,2047
   22bc4:	e0bffb17 	ldw	r2,-20(fp)
   22bc8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   22bcc:	e0bffa17 	ldw	r2,-24(fp)
   22bd0:	10bfffc4 	addi	r2,r2,-1
   22bd4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   22bd8:	e0bffa17 	ldw	r2,-24(fp)
   22bdc:	10000526 	beq	r2,zero,22bf4 <altera_avalon_jtag_uart_irq+0x1a8>
   22be0:	e0bffb17 	ldw	r2,-20(fp)
   22be4:	10c00d17 	ldw	r3,52(r2)
   22be8:	e0bffb17 	ldw	r2,-20(fp)
   22bec:	10800c17 	ldw	r2,48(r2)
   22bf0:	18bfe51e 	bne	r3,r2,22b88 <__alt_data_end+0xfc022b88>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   22bf4:	e0bffa17 	ldw	r2,-24(fp)
   22bf8:	103f9d26 	beq	r2,zero,22a70 <__alt_data_end+0xfc022a70>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   22bfc:	e0bffb17 	ldw	r2,-20(fp)
   22c00:	10c00817 	ldw	r3,32(r2)
   22c04:	00bfff44 	movi	r2,-3
   22c08:	1886703a 	and	r3,r3,r2
   22c0c:	e0bffb17 	ldw	r2,-20(fp)
   22c10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22c14:	e0bffb17 	ldw	r2,-20(fp)
   22c18:	10800017 	ldw	r2,0(r2)
   22c1c:	10800104 	addi	r2,r2,4
   22c20:	1007883a 	mov	r3,r2
   22c24:	e0bffb17 	ldw	r2,-20(fp)
   22c28:	10800817 	ldw	r2,32(r2)
   22c2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22c30:	e0bffc17 	ldw	r2,-16(fp)
   22c34:	10800104 	addi	r2,r2,4
   22c38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   22c3c:	003f8c06 	br	22a70 <__alt_data_end+0xfc022a70>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   22c40:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   22c44:	0001883a 	nop
   22c48:	e037883a 	mov	sp,fp
   22c4c:	df000017 	ldw	fp,0(sp)
   22c50:	dec00104 	addi	sp,sp,4
   22c54:	f800283a 	ret

00022c58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   22c58:	defff804 	addi	sp,sp,-32
   22c5c:	df000715 	stw	fp,28(sp)
   22c60:	df000704 	addi	fp,sp,28
   22c64:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   22c68:	e0bffb17 	ldw	r2,-20(fp)
   22c6c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   22c70:	e0bff917 	ldw	r2,-28(fp)
   22c74:	10800017 	ldw	r2,0(r2)
   22c78:	10800104 	addi	r2,r2,4
   22c7c:	10800037 	ldwio	r2,0(r2)
   22c80:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   22c84:	e0bffa17 	ldw	r2,-24(fp)
   22c88:	1081000c 	andi	r2,r2,1024
   22c8c:	10000b26 	beq	r2,zero,22cbc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   22c90:	e0bff917 	ldw	r2,-28(fp)
   22c94:	10800017 	ldw	r2,0(r2)
   22c98:	10800104 	addi	r2,r2,4
   22c9c:	1007883a 	mov	r3,r2
   22ca0:	e0bff917 	ldw	r2,-28(fp)
   22ca4:	10800817 	ldw	r2,32(r2)
   22ca8:	10810014 	ori	r2,r2,1024
   22cac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   22cb0:	e0bff917 	ldw	r2,-28(fp)
   22cb4:	10000915 	stw	zero,36(r2)
   22cb8:	00000a06 	br	22ce4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   22cbc:	e0bff917 	ldw	r2,-28(fp)
   22cc0:	10c00917 	ldw	r3,36(r2)
   22cc4:	00a00034 	movhi	r2,32768
   22cc8:	10bfff04 	addi	r2,r2,-4
   22ccc:	10c00536 	bltu	r2,r3,22ce4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   22cd0:	e0bff917 	ldw	r2,-28(fp)
   22cd4:	10800917 	ldw	r2,36(r2)
   22cd8:	10c00044 	addi	r3,r2,1
   22cdc:	e0bff917 	ldw	r2,-28(fp)
   22ce0:	10c00915 	stw	r3,36(r2)
   22ce4:	d0b25617 	ldw	r2,-13992(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   22ce8:	e037883a 	mov	sp,fp
   22cec:	df000017 	ldw	fp,0(sp)
   22cf0:	dec00104 	addi	sp,sp,4
   22cf4:	f800283a 	ret

00022cf8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   22cf8:	defffd04 	addi	sp,sp,-12
   22cfc:	df000215 	stw	fp,8(sp)
   22d00:	df000204 	addi	fp,sp,8
   22d04:	e13ffe15 	stw	r4,-8(fp)
   22d08:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22d0c:	00000506 	br	22d24 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   22d10:	e0bfff17 	ldw	r2,-4(fp)
   22d14:	1090000c 	andi	r2,r2,16384
   22d18:	10000226 	beq	r2,zero,22d24 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   22d1c:	00bffd44 	movi	r2,-11
   22d20:	00000b06 	br	22d50 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22d24:	e0bffe17 	ldw	r2,-8(fp)
   22d28:	10c00d17 	ldw	r3,52(r2)
   22d2c:	e0bffe17 	ldw	r2,-8(fp)
   22d30:	10800c17 	ldw	r2,48(r2)
   22d34:	18800526 	beq	r3,r2,22d4c <altera_avalon_jtag_uart_close+0x54>
   22d38:	e0bffe17 	ldw	r2,-8(fp)
   22d3c:	10c00917 	ldw	r3,36(r2)
   22d40:	e0bffe17 	ldw	r2,-8(fp)
   22d44:	10800117 	ldw	r2,4(r2)
   22d48:	18bff136 	bltu	r3,r2,22d10 <__alt_data_end+0xfc022d10>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   22d4c:	0005883a 	mov	r2,zero
}
   22d50:	e037883a 	mov	sp,fp
   22d54:	df000017 	ldw	fp,0(sp)
   22d58:	dec00104 	addi	sp,sp,4
   22d5c:	f800283a 	ret

00022d60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   22d60:	defffa04 	addi	sp,sp,-24
   22d64:	df000515 	stw	fp,20(sp)
   22d68:	df000504 	addi	fp,sp,20
   22d6c:	e13ffd15 	stw	r4,-12(fp)
   22d70:	e17ffe15 	stw	r5,-8(fp)
   22d74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   22d78:	00bff9c4 	movi	r2,-25
   22d7c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   22d80:	e0bffe17 	ldw	r2,-8(fp)
   22d84:	10da8060 	cmpeqi	r3,r2,27137
   22d88:	1800031e 	bne	r3,zero,22d98 <altera_avalon_jtag_uart_ioctl+0x38>
   22d8c:	109a80a0 	cmpeqi	r2,r2,27138
   22d90:	1000181e 	bne	r2,zero,22df4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   22d94:	00002906 	br	22e3c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   22d98:	e0bffd17 	ldw	r2,-12(fp)
   22d9c:	10c00117 	ldw	r3,4(r2)
   22da0:	00a00034 	movhi	r2,32768
   22da4:	10bfffc4 	addi	r2,r2,-1
   22da8:	18802126 	beq	r3,r2,22e30 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   22dac:	e0bfff17 	ldw	r2,-4(fp)
   22db0:	10800017 	ldw	r2,0(r2)
   22db4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   22db8:	e0bffc17 	ldw	r2,-16(fp)
   22dbc:	10800090 	cmplti	r2,r2,2
   22dc0:	1000061e 	bne	r2,zero,22ddc <altera_avalon_jtag_uart_ioctl+0x7c>
   22dc4:	e0fffc17 	ldw	r3,-16(fp)
   22dc8:	00a00034 	movhi	r2,32768
   22dcc:	10bfffc4 	addi	r2,r2,-1
   22dd0:	18800226 	beq	r3,r2,22ddc <altera_avalon_jtag_uart_ioctl+0x7c>
   22dd4:	e0bffc17 	ldw	r2,-16(fp)
   22dd8:	00000206 	br	22de4 <altera_avalon_jtag_uart_ioctl+0x84>
   22ddc:	00a00034 	movhi	r2,32768
   22de0:	10bfff84 	addi	r2,r2,-2
   22de4:	e0fffd17 	ldw	r3,-12(fp)
   22de8:	18800115 	stw	r2,4(r3)
      rc = 0;
   22dec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22df0:	00000f06 	br	22e30 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   22df4:	e0bffd17 	ldw	r2,-12(fp)
   22df8:	10c00117 	ldw	r3,4(r2)
   22dfc:	00a00034 	movhi	r2,32768
   22e00:	10bfffc4 	addi	r2,r2,-1
   22e04:	18800c26 	beq	r3,r2,22e38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   22e08:	e0bffd17 	ldw	r2,-12(fp)
   22e0c:	10c00917 	ldw	r3,36(r2)
   22e10:	e0bffd17 	ldw	r2,-12(fp)
   22e14:	10800117 	ldw	r2,4(r2)
   22e18:	1885803a 	cmpltu	r2,r3,r2
   22e1c:	10c03fcc 	andi	r3,r2,255
   22e20:	e0bfff17 	ldw	r2,-4(fp)
   22e24:	10c00015 	stw	r3,0(r2)
      rc = 0;
   22e28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22e2c:	00000206 	br	22e38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   22e30:	0001883a 	nop
   22e34:	00000106 	br	22e3c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   22e38:	0001883a 	nop

  default:
    break;
  }

  return rc;
   22e3c:	e0bffb17 	ldw	r2,-20(fp)
}
   22e40:	e037883a 	mov	sp,fp
   22e44:	df000017 	ldw	fp,0(sp)
   22e48:	dec00104 	addi	sp,sp,4
   22e4c:	f800283a 	ret

00022e50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   22e50:	defff304 	addi	sp,sp,-52
   22e54:	dfc00c15 	stw	ra,48(sp)
   22e58:	df000b15 	stw	fp,44(sp)
   22e5c:	df000b04 	addi	fp,sp,44
   22e60:	e13ffc15 	stw	r4,-16(fp)
   22e64:	e17ffd15 	stw	r5,-12(fp)
   22e68:	e1bffe15 	stw	r6,-8(fp)
   22e6c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   22e70:	e0bffd17 	ldw	r2,-12(fp)
   22e74:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   22e78:	00004706 	br	22f98 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   22e7c:	e0bffc17 	ldw	r2,-16(fp)
   22e80:	10800a17 	ldw	r2,40(r2)
   22e84:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   22e88:	e0bffc17 	ldw	r2,-16(fp)
   22e8c:	10800b17 	ldw	r2,44(r2)
   22e90:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   22e94:	e0fff717 	ldw	r3,-36(fp)
   22e98:	e0bff817 	ldw	r2,-32(fp)
   22e9c:	18800536 	bltu	r3,r2,22eb4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   22ea0:	e0fff717 	ldw	r3,-36(fp)
   22ea4:	e0bff817 	ldw	r2,-32(fp)
   22ea8:	1885c83a 	sub	r2,r3,r2
   22eac:	e0bff615 	stw	r2,-40(fp)
   22eb0:	00000406 	br	22ec4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   22eb4:	00c20004 	movi	r3,2048
   22eb8:	e0bff817 	ldw	r2,-32(fp)
   22ebc:	1885c83a 	sub	r2,r3,r2
   22ec0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   22ec4:	e0bff617 	ldw	r2,-40(fp)
   22ec8:	10001e26 	beq	r2,zero,22f44 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   22ecc:	e0fffe17 	ldw	r3,-8(fp)
   22ed0:	e0bff617 	ldw	r2,-40(fp)
   22ed4:	1880022e 	bgeu	r3,r2,22ee0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   22ed8:	e0bffe17 	ldw	r2,-8(fp)
   22edc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   22ee0:	e0bffc17 	ldw	r2,-16(fp)
   22ee4:	10c00e04 	addi	r3,r2,56
   22ee8:	e0bff817 	ldw	r2,-32(fp)
   22eec:	1885883a 	add	r2,r3,r2
   22ef0:	e1bff617 	ldw	r6,-40(fp)
   22ef4:	100b883a 	mov	r5,r2
   22ef8:	e13ff517 	ldw	r4,-44(fp)
   22efc:	000fc800 	call	fc80 <memcpy>
      ptr   += n;
   22f00:	e0fff517 	ldw	r3,-44(fp)
   22f04:	e0bff617 	ldw	r2,-40(fp)
   22f08:	1885883a 	add	r2,r3,r2
   22f0c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   22f10:	e0fffe17 	ldw	r3,-8(fp)
   22f14:	e0bff617 	ldw	r2,-40(fp)
   22f18:	1885c83a 	sub	r2,r3,r2
   22f1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22f20:	e0fff817 	ldw	r3,-32(fp)
   22f24:	e0bff617 	ldw	r2,-40(fp)
   22f28:	1885883a 	add	r2,r3,r2
   22f2c:	10c1ffcc 	andi	r3,r2,2047
   22f30:	e0bffc17 	ldw	r2,-16(fp)
   22f34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   22f38:	e0bffe17 	ldw	r2,-8(fp)
   22f3c:	00bfcf16 	blt	zero,r2,22e7c <__alt_data_end+0xfc022e7c>
   22f40:	00000106 	br	22f48 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   22f44:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   22f48:	e0fff517 	ldw	r3,-44(fp)
   22f4c:	e0bffd17 	ldw	r2,-12(fp)
   22f50:	1880141e 	bne	r3,r2,22fa4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   22f54:	e0bfff17 	ldw	r2,-4(fp)
   22f58:	1090000c 	andi	r2,r2,16384
   22f5c:	1000131e 	bne	r2,zero,22fac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   22f60:	0001883a 	nop
   22f64:	e0bffc17 	ldw	r2,-16(fp)
   22f68:	10c00a17 	ldw	r3,40(r2)
   22f6c:	e0bff717 	ldw	r2,-36(fp)
   22f70:	1880051e 	bne	r3,r2,22f88 <altera_avalon_jtag_uart_read+0x138>
   22f74:	e0bffc17 	ldw	r2,-16(fp)
   22f78:	10c00917 	ldw	r3,36(r2)
   22f7c:	e0bffc17 	ldw	r2,-16(fp)
   22f80:	10800117 	ldw	r2,4(r2)
   22f84:	18bff736 	bltu	r3,r2,22f64 <__alt_data_end+0xfc022f64>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   22f88:	e0bffc17 	ldw	r2,-16(fp)
   22f8c:	10c00a17 	ldw	r3,40(r2)
   22f90:	e0bff717 	ldw	r2,-36(fp)
   22f94:	18800726 	beq	r3,r2,22fb4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   22f98:	e0bffe17 	ldw	r2,-8(fp)
   22f9c:	00bfb716 	blt	zero,r2,22e7c <__alt_data_end+0xfc022e7c>
   22fa0:	00000506 	br	22fb8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   22fa4:	0001883a 	nop
   22fa8:	00000306 	br	22fb8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   22fac:	0001883a 	nop
   22fb0:	00000106 	br	22fb8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   22fb4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   22fb8:	e0fff517 	ldw	r3,-44(fp)
   22fbc:	e0bffd17 	ldw	r2,-12(fp)
   22fc0:	18801826 	beq	r3,r2,23024 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22fc4:	0005303a 	rdctl	r2,status
   22fc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22fcc:	e0fffb17 	ldw	r3,-20(fp)
   22fd0:	00bfff84 	movi	r2,-2
   22fd4:	1884703a 	and	r2,r3,r2
   22fd8:	1001703a 	wrctl	status,r2
  
  return context;
   22fdc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   22fe0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22fe4:	e0bffc17 	ldw	r2,-16(fp)
   22fe8:	10800817 	ldw	r2,32(r2)
   22fec:	10c00054 	ori	r3,r2,1
   22ff0:	e0bffc17 	ldw	r2,-16(fp)
   22ff4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22ff8:	e0bffc17 	ldw	r2,-16(fp)
   22ffc:	10800017 	ldw	r2,0(r2)
   23000:	10800104 	addi	r2,r2,4
   23004:	1007883a 	mov	r3,r2
   23008:	e0bffc17 	ldw	r2,-16(fp)
   2300c:	10800817 	ldw	r2,32(r2)
   23010:	18800035 	stwio	r2,0(r3)
   23014:	e0bffa17 	ldw	r2,-24(fp)
   23018:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2301c:	e0bff917 	ldw	r2,-28(fp)
   23020:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   23024:	e0fff517 	ldw	r3,-44(fp)
   23028:	e0bffd17 	ldw	r2,-12(fp)
   2302c:	18800426 	beq	r3,r2,23040 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   23030:	e0fff517 	ldw	r3,-44(fp)
   23034:	e0bffd17 	ldw	r2,-12(fp)
   23038:	1885c83a 	sub	r2,r3,r2
   2303c:	00000606 	br	23058 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   23040:	e0bfff17 	ldw	r2,-4(fp)
   23044:	1090000c 	andi	r2,r2,16384
   23048:	10000226 	beq	r2,zero,23054 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2304c:	00bffd44 	movi	r2,-11
   23050:	00000106 	br	23058 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   23054:	00bffec4 	movi	r2,-5
}
   23058:	e037883a 	mov	sp,fp
   2305c:	dfc00117 	ldw	ra,4(sp)
   23060:	df000017 	ldw	fp,0(sp)
   23064:	dec00204 	addi	sp,sp,8
   23068:	f800283a 	ret

0002306c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2306c:	defff304 	addi	sp,sp,-52
   23070:	dfc00c15 	stw	ra,48(sp)
   23074:	df000b15 	stw	fp,44(sp)
   23078:	df000b04 	addi	fp,sp,44
   2307c:	e13ffc15 	stw	r4,-16(fp)
   23080:	e17ffd15 	stw	r5,-12(fp)
   23084:	e1bffe15 	stw	r6,-8(fp)
   23088:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2308c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   23090:	e0bffd17 	ldw	r2,-12(fp)
   23094:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23098:	00003706 	br	23178 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2309c:	e0bffc17 	ldw	r2,-16(fp)
   230a0:	10800c17 	ldw	r2,48(r2)
   230a4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   230a8:	e0bffc17 	ldw	r2,-16(fp)
   230ac:	10800d17 	ldw	r2,52(r2)
   230b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   230b4:	e0fff917 	ldw	r3,-28(fp)
   230b8:	e0bff517 	ldw	r2,-44(fp)
   230bc:	1880062e 	bgeu	r3,r2,230d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   230c0:	e0fff517 	ldw	r3,-44(fp)
   230c4:	e0bff917 	ldw	r2,-28(fp)
   230c8:	1885c83a 	sub	r2,r3,r2
   230cc:	10bfffc4 	addi	r2,r2,-1
   230d0:	e0bff615 	stw	r2,-40(fp)
   230d4:	00000b06 	br	23104 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   230d8:	e0bff517 	ldw	r2,-44(fp)
   230dc:	10000526 	beq	r2,zero,230f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   230e0:	00c20004 	movi	r3,2048
   230e4:	e0bff917 	ldw	r2,-28(fp)
   230e8:	1885c83a 	sub	r2,r3,r2
   230ec:	e0bff615 	stw	r2,-40(fp)
   230f0:	00000406 	br	23104 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   230f4:	00c1ffc4 	movi	r3,2047
   230f8:	e0bff917 	ldw	r2,-28(fp)
   230fc:	1885c83a 	sub	r2,r3,r2
   23100:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   23104:	e0bff617 	ldw	r2,-40(fp)
   23108:	10001e26 	beq	r2,zero,23184 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2310c:	e0fffe17 	ldw	r3,-8(fp)
   23110:	e0bff617 	ldw	r2,-40(fp)
   23114:	1880022e 	bgeu	r3,r2,23120 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   23118:	e0bffe17 	ldw	r2,-8(fp)
   2311c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   23120:	e0bffc17 	ldw	r2,-16(fp)
   23124:	10c20e04 	addi	r3,r2,2104
   23128:	e0bff917 	ldw	r2,-28(fp)
   2312c:	1885883a 	add	r2,r3,r2
   23130:	e1bff617 	ldw	r6,-40(fp)
   23134:	e17ffd17 	ldw	r5,-12(fp)
   23138:	1009883a 	mov	r4,r2
   2313c:	000fc800 	call	fc80 <memcpy>
      ptr   += n;
   23140:	e0fffd17 	ldw	r3,-12(fp)
   23144:	e0bff617 	ldw	r2,-40(fp)
   23148:	1885883a 	add	r2,r3,r2
   2314c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   23150:	e0fffe17 	ldw	r3,-8(fp)
   23154:	e0bff617 	ldw	r2,-40(fp)
   23158:	1885c83a 	sub	r2,r3,r2
   2315c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23160:	e0fff917 	ldw	r3,-28(fp)
   23164:	e0bff617 	ldw	r2,-40(fp)
   23168:	1885883a 	add	r2,r3,r2
   2316c:	10c1ffcc 	andi	r3,r2,2047
   23170:	e0bffc17 	ldw	r2,-16(fp)
   23174:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23178:	e0bffe17 	ldw	r2,-8(fp)
   2317c:	00bfc716 	blt	zero,r2,2309c <__alt_data_end+0xfc02309c>
   23180:	00000106 	br	23188 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   23184:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23188:	0005303a 	rdctl	r2,status
   2318c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23190:	e0fffb17 	ldw	r3,-20(fp)
   23194:	00bfff84 	movi	r2,-2
   23198:	1884703a 	and	r2,r3,r2
   2319c:	1001703a 	wrctl	status,r2
  
  return context;
   231a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   231a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   231a8:	e0bffc17 	ldw	r2,-16(fp)
   231ac:	10800817 	ldw	r2,32(r2)
   231b0:	10c00094 	ori	r3,r2,2
   231b4:	e0bffc17 	ldw	r2,-16(fp)
   231b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   231bc:	e0bffc17 	ldw	r2,-16(fp)
   231c0:	10800017 	ldw	r2,0(r2)
   231c4:	10800104 	addi	r2,r2,4
   231c8:	1007883a 	mov	r3,r2
   231cc:	e0bffc17 	ldw	r2,-16(fp)
   231d0:	10800817 	ldw	r2,32(r2)
   231d4:	18800035 	stwio	r2,0(r3)
   231d8:	e0bffa17 	ldw	r2,-24(fp)
   231dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   231e0:	e0bff817 	ldw	r2,-32(fp)
   231e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   231e8:	e0bffe17 	ldw	r2,-8(fp)
   231ec:	0080100e 	bge	zero,r2,23230 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   231f0:	e0bfff17 	ldw	r2,-4(fp)
   231f4:	1090000c 	andi	r2,r2,16384
   231f8:	1000101e 	bne	r2,zero,2323c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   231fc:	0001883a 	nop
   23200:	e0bffc17 	ldw	r2,-16(fp)
   23204:	10c00d17 	ldw	r3,52(r2)
   23208:	e0bff517 	ldw	r2,-44(fp)
   2320c:	1880051e 	bne	r3,r2,23224 <altera_avalon_jtag_uart_write+0x1b8>
   23210:	e0bffc17 	ldw	r2,-16(fp)
   23214:	10c00917 	ldw	r3,36(r2)
   23218:	e0bffc17 	ldw	r2,-16(fp)
   2321c:	10800117 	ldw	r2,4(r2)
   23220:	18bff736 	bltu	r3,r2,23200 <__alt_data_end+0xfc023200>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   23224:	e0bffc17 	ldw	r2,-16(fp)
   23228:	10800917 	ldw	r2,36(r2)
   2322c:	1000051e 	bne	r2,zero,23244 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   23230:	e0bffe17 	ldw	r2,-8(fp)
   23234:	00bfd016 	blt	zero,r2,23178 <__alt_data_end+0xfc023178>
   23238:	00000306 	br	23248 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2323c:	0001883a 	nop
   23240:	00000106 	br	23248 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   23244:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   23248:	e0fffd17 	ldw	r3,-12(fp)
   2324c:	e0bff717 	ldw	r2,-36(fp)
   23250:	18800426 	beq	r3,r2,23264 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   23254:	e0fffd17 	ldw	r3,-12(fp)
   23258:	e0bff717 	ldw	r2,-36(fp)
   2325c:	1885c83a 	sub	r2,r3,r2
   23260:	00000606 	br	2327c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   23264:	e0bfff17 	ldw	r2,-4(fp)
   23268:	1090000c 	andi	r2,r2,16384
   2326c:	10000226 	beq	r2,zero,23278 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   23270:	00bffd44 	movi	r2,-11
   23274:	00000106 	br	2327c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   23278:	00bffec4 	movi	r2,-5
}
   2327c:	e037883a 	mov	sp,fp
   23280:	dfc00117 	ldw	ra,4(sp)
   23284:	df000017 	ldw	fp,0(sp)
   23288:	dec00204 	addi	sp,sp,8
   2328c:	f800283a 	ret

00023290 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   23290:	defff404 	addi	sp,sp,-48
   23294:	df000b15 	stw	fp,44(sp)
   23298:	df000b04 	addi	fp,sp,44
   2329c:	e13ffc15 	stw	r4,-16(fp)
   232a0:	e17ffd15 	stw	r5,-12(fp)
   232a4:	e1bffe15 	stw	r6,-8(fp)
   232a8:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   232ac:	e0ffff17 	ldw	r3,-4(fp)
   232b0:	e0bffe17 	ldw	r2,-8(fp)
   232b4:	1885883a 	add	r2,r3,r2
   232b8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   232bc:	e0c00217 	ldw	r3,8(fp)
   232c0:	e0800117 	ldw	r2,4(fp)
   232c4:	1885883a 	add	r2,r3,r2
   232c8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   232cc:	e0800117 	ldw	r2,4(fp)
   232d0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   232d4:	e0bffe17 	ldw	r2,-8(fp)
   232d8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   232dc:	00800044 	movi	r2,1
   232e0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   232e4:	e0bffc17 	ldw	r2,-16(fp)
   232e8:	10800504 	addi	r2,r2,20
   232ec:	1009883a 	mov	r4,r2
   232f0:	00c00044 	movi	r3,1
   232f4:	e0bffd17 	ldw	r2,-12(fp)
   232f8:	1884983a 	sll	r2,r3,r2
   232fc:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   23300:	e0800317 	ldw	r2,12(fp)
   23304:	1080008c 	andi	r2,r2,2
   23308:	1000051e 	bne	r2,zero,23320 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   2330c:	e0bffc17 	ldw	r2,-16(fp)
   23310:	10800304 	addi	r2,r2,12
   23314:	1007883a 	mov	r3,r2
   23318:	00810004 	movi	r2,1024
   2331c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   23320:	e0bffc17 	ldw	r2,-16(fp)
   23324:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   23328:	e0bffc17 	ldw	r2,-16(fp)
   2332c:	10800204 	addi	r2,r2,8
   23330:	10800037 	ldwio	r2,0(r2)
   23334:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   23338:	e0bffa17 	ldw	r2,-24(fp)
   2333c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   23340:	10000226 	beq	r2,zero,2334c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   23344:	e0bff717 	ldw	r2,-36(fp)
   23348:	1000031e 	bne	r2,zero,23358 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   2334c:	e0bffa17 	ldw	r2,-24(fp)
   23350:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   23354:	103ff426 	beq	r2,zero,23328 <__alt_data_end+0xfc023328>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   23358:	e0bffa17 	ldw	r2,-24(fp)
   2335c:	1080100c 	andi	r2,r2,64
   23360:	10001e26 	beq	r2,zero,233dc <alt_avalon_spi_command+0x14c>
   23364:	e0bff717 	ldw	r2,-36(fp)
   23368:	00801c0e 	bge	zero,r2,233dc <alt_avalon_spi_command+0x14c>
    {
      credits--;
   2336c:	e0bff717 	ldw	r2,-36(fp)
   23370:	10bfffc4 	addi	r2,r2,-1
   23374:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   23378:	e0ffff17 	ldw	r3,-4(fp)
   2337c:	e0bff817 	ldw	r2,-32(fp)
   23380:	18800a2e 	bgeu	r3,r2,233ac <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   23384:	e0bffc17 	ldw	r2,-16(fp)
   23388:	10800104 	addi	r2,r2,4
   2338c:	1009883a 	mov	r4,r2
   23390:	e0bfff17 	ldw	r2,-4(fp)
   23394:	10c00044 	addi	r3,r2,1
   23398:	e0ffff15 	stw	r3,-4(fp)
   2339c:	10800003 	ldbu	r2,0(r2)
   233a0:	10803fcc 	andi	r2,r2,255
   233a4:	20800035 	stwio	r2,0(r4)
   233a8:	00000c06 	br	233dc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   233ac:	e0bff517 	ldw	r2,-44(fp)
   233b0:	10000826 	beq	r2,zero,233d4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   233b4:	e0bff517 	ldw	r2,-44(fp)
   233b8:	10bfffc4 	addi	r2,r2,-1
   233bc:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   233c0:	e0bffc17 	ldw	r2,-16(fp)
   233c4:	10800104 	addi	r2,r2,4
   233c8:	0007883a 	mov	r3,zero
   233cc:	10c00035 	stwio	r3,0(r2)
   233d0:	00000206 	br	233dc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   233d4:	00bf0004 	movi	r2,-1024
   233d8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   233dc:	e0bffa17 	ldw	r2,-24(fp)
   233e0:	1080200c 	andi	r2,r2,128
   233e4:	103fd026 	beq	r2,zero,23328 <__alt_data_end+0xfc023328>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   233e8:	e0bffc17 	ldw	r2,-16(fp)
   233ec:	10800037 	ldwio	r2,0(r2)
   233f0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   233f4:	e0bff617 	ldw	r2,-40(fp)
   233f8:	10000426 	beq	r2,zero,2340c <alt_avalon_spi_command+0x17c>
        read_ignore--;
   233fc:	e0bff617 	ldw	r2,-40(fp)
   23400:	10bfffc4 	addi	r2,r2,-1
   23404:	e0bff615 	stw	r2,-40(fp)
   23408:	00000506 	br	23420 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   2340c:	e0800217 	ldw	r2,8(fp)
   23410:	10c00044 	addi	r3,r2,1
   23414:	e0c00215 	stw	r3,8(fp)
   23418:	e0fffb17 	ldw	r3,-20(fp)
   2341c:	10c00005 	stb	r3,0(r2)
      credits++;
   23420:	e0bff717 	ldw	r2,-36(fp)
   23424:	10800044 	addi	r2,r2,1
   23428:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   2342c:	e0bff617 	ldw	r2,-40(fp)
   23430:	103fbd1e 	bne	r2,zero,23328 <__alt_data_end+0xfc023328>
   23434:	e0c00217 	ldw	r3,8(fp)
   23438:	e0bff917 	ldw	r2,-28(fp)
   2343c:	18bfba1e 	bne	r3,r2,23328 <__alt_data_end+0xfc023328>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   23440:	e0bffc17 	ldw	r2,-16(fp)
   23444:	10800204 	addi	r2,r2,8
   23448:	10800037 	ldwio	r2,0(r2)
   2344c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   23450:	e0bffa17 	ldw	r2,-24(fp)
   23454:	1080080c 	andi	r2,r2,32
   23458:	103ff926 	beq	r2,zero,23440 <__alt_data_end+0xfc023440>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   2345c:	e0800317 	ldw	r2,12(fp)
   23460:	1080004c 	andi	r2,r2,1
   23464:	1000041e 	bne	r2,zero,23478 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   23468:	e0bffc17 	ldw	r2,-16(fp)
   2346c:	10800304 	addi	r2,r2,12
   23470:	0007883a 	mov	r3,zero
   23474:	10c00035 	stwio	r3,0(r2)

  return read_length;
   23478:	e0800117 	ldw	r2,4(fp)
}
   2347c:	e037883a 	mov	sp,fp
   23480:	df000017 	ldw	fp,0(sp)
   23484:	dec00104 	addi	sp,sp,4
   23488:	f800283a 	ret

0002348c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2348c:	defffa04 	addi	sp,sp,-24
   23490:	dfc00515 	stw	ra,20(sp)
   23494:	df000415 	stw	fp,16(sp)
   23498:	df000404 	addi	fp,sp,16
   2349c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   234a0:	0007883a 	mov	r3,zero
   234a4:	e0bfff17 	ldw	r2,-4(fp)
   234a8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   234ac:	e0bfff17 	ldw	r2,-4(fp)
   234b0:	10800104 	addi	r2,r2,4
   234b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   234b8:	0005303a 	rdctl	r2,status
   234bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   234c0:	e0fffd17 	ldw	r3,-12(fp)
   234c4:	00bfff84 	movi	r2,-2
   234c8:	1884703a 	and	r2,r3,r2
   234cc:	1001703a 	wrctl	status,r2
  
  return context;
   234d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   234d4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   234d8:	00243fc0 	call	243fc <alt_tick>
   234dc:	e0bffc17 	ldw	r2,-16(fp)
   234e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   234e4:	e0bffe17 	ldw	r2,-8(fp)
   234e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   234ec:	0001883a 	nop
   234f0:	e037883a 	mov	sp,fp
   234f4:	dfc00117 	ldw	ra,4(sp)
   234f8:	df000017 	ldw	fp,0(sp)
   234fc:	dec00204 	addi	sp,sp,8
   23500:	f800283a 	ret

00023504 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   23504:	defff804 	addi	sp,sp,-32
   23508:	dfc00715 	stw	ra,28(sp)
   2350c:	df000615 	stw	fp,24(sp)
   23510:	df000604 	addi	fp,sp,24
   23514:	e13ffc15 	stw	r4,-16(fp)
   23518:	e17ffd15 	stw	r5,-12(fp)
   2351c:	e1bffe15 	stw	r6,-8(fp)
   23520:	e1ffff15 	stw	r7,-4(fp)
   23524:	e0bfff17 	ldw	r2,-4(fp)
   23528:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2352c:	d0b25617 	ldw	r2,-13992(gp)
   23530:	1000021e 	bne	r2,zero,2353c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   23534:	e0bffb17 	ldw	r2,-20(fp)
   23538:	d0b25615 	stw	r2,-13992(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2353c:	e0bffc17 	ldw	r2,-16(fp)
   23540:	10800104 	addi	r2,r2,4
   23544:	00c001c4 	movi	r3,7
   23548:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2354c:	d8000015 	stw	zero,0(sp)
   23550:	e1fffc17 	ldw	r7,-16(fp)
   23554:	018000b4 	movhi	r6,2
   23558:	318d2304 	addi	r6,r6,13452
   2355c:	e17ffe17 	ldw	r5,-8(fp)
   23560:	e13ffd17 	ldw	r4,-12(fp)
   23564:	0023a740 	call	23a74 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   23568:	0001883a 	nop
   2356c:	e037883a 	mov	sp,fp
   23570:	dfc00117 	ldw	ra,4(sp)
   23574:	df000017 	ldw	fp,0(sp)
   23578:	dec00204 	addi	sp,sp,8
   2357c:	f800283a 	ret

00023580 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   23580:	defff504 	addi	sp,sp,-44
   23584:	df000a15 	stw	fp,40(sp)
   23588:	df000a04 	addi	fp,sp,40
   2358c:	e13ffc15 	stw	r4,-16(fp)
   23590:	e17ffd15 	stw	r5,-12(fp)
   23594:	e1bffe15 	stw	r6,-8(fp)
   23598:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2359c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   235a0:	d0b25617 	ldw	r2,-13992(gp)
  
  if (alt_ticks_per_second ())
   235a4:	10003c26 	beq	r2,zero,23698 <alt_alarm_start+0x118>
  {
    if (alarm)
   235a8:	e0bffc17 	ldw	r2,-16(fp)
   235ac:	10003826 	beq	r2,zero,23690 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   235b0:	e0bffc17 	ldw	r2,-16(fp)
   235b4:	e0fffe17 	ldw	r3,-8(fp)
   235b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   235bc:	e0bffc17 	ldw	r2,-16(fp)
   235c0:	e0ffff17 	ldw	r3,-4(fp)
   235c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   235c8:	0005303a 	rdctl	r2,status
   235cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   235d0:	e0fff917 	ldw	r3,-28(fp)
   235d4:	00bfff84 	movi	r2,-2
   235d8:	1884703a 	and	r2,r3,r2
   235dc:	1001703a 	wrctl	status,r2
  
  return context;
   235e0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   235e4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   235e8:	d0b25717 	ldw	r2,-13988(gp)
      
      current_nticks = alt_nticks();
   235ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   235f0:	e0fffd17 	ldw	r3,-12(fp)
   235f4:	e0bff617 	ldw	r2,-40(fp)
   235f8:	1885883a 	add	r2,r3,r2
   235fc:	10c00044 	addi	r3,r2,1
   23600:	e0bffc17 	ldw	r2,-16(fp)
   23604:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   23608:	e0bffc17 	ldw	r2,-16(fp)
   2360c:	10c00217 	ldw	r3,8(r2)
   23610:	e0bff617 	ldw	r2,-40(fp)
   23614:	1880042e 	bgeu	r3,r2,23628 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   23618:	e0bffc17 	ldw	r2,-16(fp)
   2361c:	00c00044 	movi	r3,1
   23620:	10c00405 	stb	r3,16(r2)
   23624:	00000206 	br	23630 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   23628:	e0bffc17 	ldw	r2,-16(fp)
   2362c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   23630:	e0bffc17 	ldw	r2,-16(fp)
   23634:	d0e5c204 	addi	r3,gp,-26872
   23638:	e0fffa15 	stw	r3,-24(fp)
   2363c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23640:	e0bffb17 	ldw	r2,-20(fp)
   23644:	e0fffa17 	ldw	r3,-24(fp)
   23648:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2364c:	e0bffa17 	ldw	r2,-24(fp)
   23650:	10c00017 	ldw	r3,0(r2)
   23654:	e0bffb17 	ldw	r2,-20(fp)
   23658:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2365c:	e0bffa17 	ldw	r2,-24(fp)
   23660:	10800017 	ldw	r2,0(r2)
   23664:	e0fffb17 	ldw	r3,-20(fp)
   23668:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2366c:	e0bffa17 	ldw	r2,-24(fp)
   23670:	e0fffb17 	ldw	r3,-20(fp)
   23674:	10c00015 	stw	r3,0(r2)
   23678:	e0bff817 	ldw	r2,-32(fp)
   2367c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23680:	e0bff717 	ldw	r2,-36(fp)
   23684:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   23688:	0005883a 	mov	r2,zero
   2368c:	00000306 	br	2369c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   23690:	00bffa84 	movi	r2,-22
   23694:	00000106 	br	2369c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   23698:	00bfde84 	movi	r2,-134
  }
}
   2369c:	e037883a 	mov	sp,fp
   236a0:	df000017 	ldw	fp,0(sp)
   236a4:	dec00104 	addi	sp,sp,4
   236a8:	f800283a 	ret

000236ac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   236ac:	defffa04 	addi	sp,sp,-24
   236b0:	dfc00515 	stw	ra,20(sp)
   236b4:	df000415 	stw	fp,16(sp)
   236b8:	df000404 	addi	fp,sp,16
   236bc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   236c0:	00800244 	movi	r2,9
   236c4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   236c8:	014003f4 	movhi	r5,15
   236cc:	29509004 	addi	r5,r5,16960
   236d0:	e13ffd17 	ldw	r4,-12(fp)
   236d4:	000d8e00 	call	d8e0 <__mulsi3>
   236d8:	100b883a 	mov	r5,r2
   236dc:	01017db4 	movhi	r4,1526
   236e0:	21384004 	addi	r4,r4,-7936
   236e4:	000d8240 	call	d824 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   236e8:	100b883a 	mov	r5,r2
   236ec:	01200034 	movhi	r4,32768
   236f0:	213fffc4 	addi	r4,r4,-1
   236f4:	000d8240 	call	d824 <__udivsi3>
   236f8:	100b883a 	mov	r5,r2
   236fc:	e13fff17 	ldw	r4,-4(fp)
   23700:	000d8240 	call	d824 <__udivsi3>
   23704:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   23708:	e0bffe17 	ldw	r2,-8(fp)
   2370c:	10002a26 	beq	r2,zero,237b8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   23710:	e03ffc15 	stw	zero,-16(fp)
   23714:	00001706 	br	23774 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   23718:	00a00034 	movhi	r2,32768
   2371c:	10bfffc4 	addi	r2,r2,-1
   23720:	10bfffc4 	addi	r2,r2,-1
   23724:	103ffe1e 	bne	r2,zero,23720 <__alt_data_end+0xfc023720>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   23728:	014003f4 	movhi	r5,15
   2372c:	29509004 	addi	r5,r5,16960
   23730:	e13ffd17 	ldw	r4,-12(fp)
   23734:	000d8e00 	call	d8e0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   23738:	100b883a 	mov	r5,r2
   2373c:	01017db4 	movhi	r4,1526
   23740:	21384004 	addi	r4,r4,-7936
   23744:	000d8240 	call	d824 <__udivsi3>
   23748:	100b883a 	mov	r5,r2
   2374c:	01200034 	movhi	r4,32768
   23750:	213fffc4 	addi	r4,r4,-1
   23754:	000d8240 	call	d824 <__udivsi3>
   23758:	1007883a 	mov	r3,r2
   2375c:	e0bfff17 	ldw	r2,-4(fp)
   23760:	10c5c83a 	sub	r2,r2,r3
   23764:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   23768:	e0bffc17 	ldw	r2,-16(fp)
   2376c:	10800044 	addi	r2,r2,1
   23770:	e0bffc15 	stw	r2,-16(fp)
   23774:	e0fffc17 	ldw	r3,-16(fp)
   23778:	e0bffe17 	ldw	r2,-8(fp)
   2377c:	18bfe616 	blt	r3,r2,23718 <__alt_data_end+0xfc023718>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23780:	014003f4 	movhi	r5,15
   23784:	29509004 	addi	r5,r5,16960
   23788:	e13ffd17 	ldw	r4,-12(fp)
   2378c:	000d8e00 	call	d8e0 <__mulsi3>
   23790:	100b883a 	mov	r5,r2
   23794:	01017db4 	movhi	r4,1526
   23798:	21384004 	addi	r4,r4,-7936
   2379c:	000d8240 	call	d824 <__udivsi3>
   237a0:	e17fff17 	ldw	r5,-4(fp)
   237a4:	1009883a 	mov	r4,r2
   237a8:	000d8e00 	call	d8e0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   237ac:	10bfffc4 	addi	r2,r2,-1
   237b0:	103ffe1e 	bne	r2,zero,237ac <__alt_data_end+0xfc0237ac>
   237b4:	00000d06 	br	237ec <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   237b8:	014003f4 	movhi	r5,15
   237bc:	29509004 	addi	r5,r5,16960
   237c0:	e13ffd17 	ldw	r4,-12(fp)
   237c4:	000d8e00 	call	d8e0 <__mulsi3>
   237c8:	100b883a 	mov	r5,r2
   237cc:	01017db4 	movhi	r4,1526
   237d0:	21384004 	addi	r4,r4,-7936
   237d4:	000d8240 	call	d824 <__udivsi3>
   237d8:	e17fff17 	ldw	r5,-4(fp)
   237dc:	1009883a 	mov	r4,r2
   237e0:	000d8e00 	call	d8e0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   237e4:	10bfffc4 	addi	r2,r2,-1
   237e8:	00bffe16 	blt	zero,r2,237e4 <__alt_data_end+0xfc0237e4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   237ec:	0005883a 	mov	r2,zero
}
   237f0:	e037883a 	mov	sp,fp
   237f4:	dfc00117 	ldw	ra,4(sp)
   237f8:	df000017 	ldw	fp,0(sp)
   237fc:	dec00204 	addi	sp,sp,8
   23800:	f800283a 	ret

00023804 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23804:	deffff04 	addi	sp,sp,-4
   23808:	df000015 	stw	fp,0(sp)
   2380c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23810:	0001883a 	nop
   23814:	e037883a 	mov	sp,fp
   23818:	df000017 	ldw	fp,0(sp)
   2381c:	dec00104 	addi	sp,sp,4
   23820:	f800283a 	ret

00023824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23824:	defffe04 	addi	sp,sp,-8
   23828:	dfc00115 	stw	ra,4(sp)
   2382c:	df000015 	stw	fp,0(sp)
   23830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23834:	d0a5bd17 	ldw	r2,-26892(gp)
   23838:	10000326 	beq	r2,zero,23848 <alt_get_errno+0x24>
   2383c:	d0a5bd17 	ldw	r2,-26892(gp)
   23840:	103ee83a 	callr	r2
   23844:	00000106 	br	2384c <alt_get_errno+0x28>
   23848:	d0b24e04 	addi	r2,gp,-14024
}
   2384c:	e037883a 	mov	sp,fp
   23850:	dfc00117 	ldw	ra,4(sp)
   23854:	df000017 	ldw	fp,0(sp)
   23858:	dec00204 	addi	sp,sp,8
   2385c:	f800283a 	ret

00023860 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23860:	defffa04 	addi	sp,sp,-24
   23864:	dfc00515 	stw	ra,20(sp)
   23868:	df000415 	stw	fp,16(sp)
   2386c:	df000404 	addi	fp,sp,16
   23870:	e13ffe15 	stw	r4,-8(fp)
   23874:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   23878:	e0bffe17 	ldw	r2,-8(fp)
   2387c:	10000326 	beq	r2,zero,2388c <alt_dev_llist_insert+0x2c>
   23880:	e0bffe17 	ldw	r2,-8(fp)
   23884:	10800217 	ldw	r2,8(r2)
   23888:	1000061e 	bne	r2,zero,238a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2388c:	00238240 	call	23824 <alt_get_errno>
   23890:	1007883a 	mov	r3,r2
   23894:	00800584 	movi	r2,22
   23898:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2389c:	00bffa84 	movi	r2,-22
   238a0:	00001306 	br	238f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   238a4:	e0bffe17 	ldw	r2,-8(fp)
   238a8:	e0ffff17 	ldw	r3,-4(fp)
   238ac:	e0fffc15 	stw	r3,-16(fp)
   238b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   238b4:	e0bffd17 	ldw	r2,-12(fp)
   238b8:	e0fffc17 	ldw	r3,-16(fp)
   238bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   238c0:	e0bffc17 	ldw	r2,-16(fp)
   238c4:	10c00017 	ldw	r3,0(r2)
   238c8:	e0bffd17 	ldw	r2,-12(fp)
   238cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   238d0:	e0bffc17 	ldw	r2,-16(fp)
   238d4:	10800017 	ldw	r2,0(r2)
   238d8:	e0fffd17 	ldw	r3,-12(fp)
   238dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   238e0:	e0bffc17 	ldw	r2,-16(fp)
   238e4:	e0fffd17 	ldw	r3,-12(fp)
   238e8:	10c00015 	stw	r3,0(r2)

  return 0;  
   238ec:	0005883a 	mov	r2,zero
}
   238f0:	e037883a 	mov	sp,fp
   238f4:	dfc00117 	ldw	ra,4(sp)
   238f8:	df000017 	ldw	fp,0(sp)
   238fc:	dec00204 	addi	sp,sp,8
   23900:	f800283a 	ret

00023904 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   23904:	defffd04 	addi	sp,sp,-12
   23908:	dfc00215 	stw	ra,8(sp)
   2390c:	df000115 	stw	fp,4(sp)
   23910:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23914:	008000b4 	movhi	r2,2
   23918:	1092cb04 	addi	r2,r2,19244
   2391c:	e0bfff15 	stw	r2,-4(fp)
   23920:	00000606 	br	2393c <_do_ctors+0x38>
        (*ctor) (); 
   23924:	e0bfff17 	ldw	r2,-4(fp)
   23928:	10800017 	ldw	r2,0(r2)
   2392c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23930:	e0bfff17 	ldw	r2,-4(fp)
   23934:	10bfff04 	addi	r2,r2,-4
   23938:	e0bfff15 	stw	r2,-4(fp)
   2393c:	e0ffff17 	ldw	r3,-4(fp)
   23940:	008000b4 	movhi	r2,2
   23944:	1092ca04 	addi	r2,r2,19240
   23948:	18bff62e 	bgeu	r3,r2,23924 <__alt_data_end+0xfc023924>
        (*ctor) (); 
}
   2394c:	0001883a 	nop
   23950:	e037883a 	mov	sp,fp
   23954:	dfc00117 	ldw	ra,4(sp)
   23958:	df000017 	ldw	fp,0(sp)
   2395c:	dec00204 	addi	sp,sp,8
   23960:	f800283a 	ret

00023964 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23964:	defffd04 	addi	sp,sp,-12
   23968:	dfc00215 	stw	ra,8(sp)
   2396c:	df000115 	stw	fp,4(sp)
   23970:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23974:	008000b4 	movhi	r2,2
   23978:	1092cb04 	addi	r2,r2,19244
   2397c:	e0bfff15 	stw	r2,-4(fp)
   23980:	00000606 	br	2399c <_do_dtors+0x38>
        (*dtor) (); 
   23984:	e0bfff17 	ldw	r2,-4(fp)
   23988:	10800017 	ldw	r2,0(r2)
   2398c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23990:	e0bfff17 	ldw	r2,-4(fp)
   23994:	10bfff04 	addi	r2,r2,-4
   23998:	e0bfff15 	stw	r2,-4(fp)
   2399c:	e0ffff17 	ldw	r3,-4(fp)
   239a0:	008000b4 	movhi	r2,2
   239a4:	1092cc04 	addi	r2,r2,19248
   239a8:	18bff62e 	bgeu	r3,r2,23984 <__alt_data_end+0xfc023984>
        (*dtor) (); 
}
   239ac:	0001883a 	nop
   239b0:	e037883a 	mov	sp,fp
   239b4:	dfc00117 	ldw	ra,4(sp)
   239b8:	df000017 	ldw	fp,0(sp)
   239bc:	dec00204 	addi	sp,sp,8
   239c0:	f800283a 	ret

000239c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   239c4:	defffa04 	addi	sp,sp,-24
   239c8:	dfc00515 	stw	ra,20(sp)
   239cc:	df000415 	stw	fp,16(sp)
   239d0:	df000404 	addi	fp,sp,16
   239d4:	e13ffe15 	stw	r4,-8(fp)
   239d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   239dc:	e0bfff17 	ldw	r2,-4(fp)
   239e0:	10800017 	ldw	r2,0(r2)
   239e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   239e8:	e13ffe17 	ldw	r4,-8(fp)
   239ec:	00105480 	call	10548 <strlen>
   239f0:	10800044 	addi	r2,r2,1
   239f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   239f8:	00000d06 	br	23a30 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   239fc:	e0bffc17 	ldw	r2,-16(fp)
   23a00:	10800217 	ldw	r2,8(r2)
   23a04:	e0fffd17 	ldw	r3,-12(fp)
   23a08:	180d883a 	mov	r6,r3
   23a0c:	e17ffe17 	ldw	r5,-8(fp)
   23a10:	1009883a 	mov	r4,r2
   23a14:	00247dc0 	call	247dc <memcmp>
   23a18:	1000021e 	bne	r2,zero,23a24 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   23a1c:	e0bffc17 	ldw	r2,-16(fp)
   23a20:	00000706 	br	23a40 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   23a24:	e0bffc17 	ldw	r2,-16(fp)
   23a28:	10800017 	ldw	r2,0(r2)
   23a2c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23a30:	e0fffc17 	ldw	r3,-16(fp)
   23a34:	e0bfff17 	ldw	r2,-4(fp)
   23a38:	18bff01e 	bne	r3,r2,239fc <__alt_data_end+0xfc0239fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   23a3c:	0005883a 	mov	r2,zero
}
   23a40:	e037883a 	mov	sp,fp
   23a44:	dfc00117 	ldw	ra,4(sp)
   23a48:	df000017 	ldw	fp,0(sp)
   23a4c:	dec00204 	addi	sp,sp,8
   23a50:	f800283a 	ret

00023a54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23a54:	deffff04 	addi	sp,sp,-4
   23a58:	df000015 	stw	fp,0(sp)
   23a5c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   23a60:	0001883a 	nop
   23a64:	e037883a 	mov	sp,fp
   23a68:	df000017 	ldw	fp,0(sp)
   23a6c:	dec00104 	addi	sp,sp,4
   23a70:	f800283a 	ret

00023a74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23a74:	defff904 	addi	sp,sp,-28
   23a78:	dfc00615 	stw	ra,24(sp)
   23a7c:	df000515 	stw	fp,20(sp)
   23a80:	df000504 	addi	fp,sp,20
   23a84:	e13ffc15 	stw	r4,-16(fp)
   23a88:	e17ffd15 	stw	r5,-12(fp)
   23a8c:	e1bffe15 	stw	r6,-8(fp)
   23a90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   23a94:	e0800217 	ldw	r2,8(fp)
   23a98:	d8800015 	stw	r2,0(sp)
   23a9c:	e1ffff17 	ldw	r7,-4(fp)
   23aa0:	e1bffe17 	ldw	r6,-8(fp)
   23aa4:	e17ffd17 	ldw	r5,-12(fp)
   23aa8:	e13ffc17 	ldw	r4,-16(fp)
   23aac:	0023c240 	call	23c24 <alt_iic_isr_register>
}  
   23ab0:	e037883a 	mov	sp,fp
   23ab4:	dfc00117 	ldw	ra,4(sp)
   23ab8:	df000017 	ldw	fp,0(sp)
   23abc:	dec00204 	addi	sp,sp,8
   23ac0:	f800283a 	ret

00023ac4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   23ac4:	defff904 	addi	sp,sp,-28
   23ac8:	df000615 	stw	fp,24(sp)
   23acc:	df000604 	addi	fp,sp,24
   23ad0:	e13ffe15 	stw	r4,-8(fp)
   23ad4:	e17fff15 	stw	r5,-4(fp)
   23ad8:	e0bfff17 	ldw	r2,-4(fp)
   23adc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23ae0:	0005303a 	rdctl	r2,status
   23ae4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23ae8:	e0fffb17 	ldw	r3,-20(fp)
   23aec:	00bfff84 	movi	r2,-2
   23af0:	1884703a 	and	r2,r3,r2
   23af4:	1001703a 	wrctl	status,r2
  
  return context;
   23af8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23afc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   23b00:	00c00044 	movi	r3,1
   23b04:	e0bffa17 	ldw	r2,-24(fp)
   23b08:	1884983a 	sll	r2,r3,r2
   23b0c:	1007883a 	mov	r3,r2
   23b10:	d0b25517 	ldw	r2,-13996(gp)
   23b14:	1884b03a 	or	r2,r3,r2
   23b18:	d0b25515 	stw	r2,-13996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23b1c:	d0b25517 	ldw	r2,-13996(gp)
   23b20:	100170fa 	wrctl	ienable,r2
   23b24:	e0bffc17 	ldw	r2,-16(fp)
   23b28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23b2c:	e0bffd17 	ldw	r2,-12(fp)
   23b30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23b34:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   23b38:	0001883a 	nop
}
   23b3c:	e037883a 	mov	sp,fp
   23b40:	df000017 	ldw	fp,0(sp)
   23b44:	dec00104 	addi	sp,sp,4
   23b48:	f800283a 	ret

00023b4c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   23b4c:	defff904 	addi	sp,sp,-28
   23b50:	df000615 	stw	fp,24(sp)
   23b54:	df000604 	addi	fp,sp,24
   23b58:	e13ffe15 	stw	r4,-8(fp)
   23b5c:	e17fff15 	stw	r5,-4(fp)
   23b60:	e0bfff17 	ldw	r2,-4(fp)
   23b64:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23b68:	0005303a 	rdctl	r2,status
   23b6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23b70:	e0fffb17 	ldw	r3,-20(fp)
   23b74:	00bfff84 	movi	r2,-2
   23b78:	1884703a 	and	r2,r3,r2
   23b7c:	1001703a 	wrctl	status,r2
  
  return context;
   23b80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23b84:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   23b88:	00c00044 	movi	r3,1
   23b8c:	e0bffa17 	ldw	r2,-24(fp)
   23b90:	1884983a 	sll	r2,r3,r2
   23b94:	0084303a 	nor	r2,zero,r2
   23b98:	1007883a 	mov	r3,r2
   23b9c:	d0b25517 	ldw	r2,-13996(gp)
   23ba0:	1884703a 	and	r2,r3,r2
   23ba4:	d0b25515 	stw	r2,-13996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23ba8:	d0b25517 	ldw	r2,-13996(gp)
   23bac:	100170fa 	wrctl	ienable,r2
   23bb0:	e0bffc17 	ldw	r2,-16(fp)
   23bb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23bb8:	e0bffd17 	ldw	r2,-12(fp)
   23bbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23bc0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   23bc4:	0001883a 	nop
}
   23bc8:	e037883a 	mov	sp,fp
   23bcc:	df000017 	ldw	fp,0(sp)
   23bd0:	dec00104 	addi	sp,sp,4
   23bd4:	f800283a 	ret

00023bd8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   23bd8:	defffc04 	addi	sp,sp,-16
   23bdc:	df000315 	stw	fp,12(sp)
   23be0:	df000304 	addi	fp,sp,12
   23be4:	e13ffe15 	stw	r4,-8(fp)
   23be8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   23bec:	000530fa 	rdctl	r2,ienable
   23bf0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   23bf4:	00c00044 	movi	r3,1
   23bf8:	e0bfff17 	ldw	r2,-4(fp)
   23bfc:	1884983a 	sll	r2,r3,r2
   23c00:	1007883a 	mov	r3,r2
   23c04:	e0bffd17 	ldw	r2,-12(fp)
   23c08:	1884703a 	and	r2,r3,r2
   23c0c:	1004c03a 	cmpne	r2,r2,zero
   23c10:	10803fcc 	andi	r2,r2,255
}
   23c14:	e037883a 	mov	sp,fp
   23c18:	df000017 	ldw	fp,0(sp)
   23c1c:	dec00104 	addi	sp,sp,4
   23c20:	f800283a 	ret

00023c24 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23c24:	defff504 	addi	sp,sp,-44
   23c28:	dfc00a15 	stw	ra,40(sp)
   23c2c:	df000915 	stw	fp,36(sp)
   23c30:	df000904 	addi	fp,sp,36
   23c34:	e13ffc15 	stw	r4,-16(fp)
   23c38:	e17ffd15 	stw	r5,-12(fp)
   23c3c:	e1bffe15 	stw	r6,-8(fp)
   23c40:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   23c44:	00bffa84 	movi	r2,-22
   23c48:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   23c4c:	e0bffd17 	ldw	r2,-12(fp)
   23c50:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23c54:	e0bff817 	ldw	r2,-32(fp)
   23c58:	10800808 	cmpgei	r2,r2,32
   23c5c:	1000271e 	bne	r2,zero,23cfc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23c60:	0005303a 	rdctl	r2,status
   23c64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23c68:	e0fffb17 	ldw	r3,-20(fp)
   23c6c:	00bfff84 	movi	r2,-2
   23c70:	1884703a 	and	r2,r3,r2
   23c74:	1001703a 	wrctl	status,r2
  
  return context;
   23c78:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   23c7c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   23c80:	008000f4 	movhi	r2,3
   23c84:	10883804 	addi	r2,r2,8416
   23c88:	e0fff817 	ldw	r3,-32(fp)
   23c8c:	180690fa 	slli	r3,r3,3
   23c90:	10c5883a 	add	r2,r2,r3
   23c94:	e0fffe17 	ldw	r3,-8(fp)
   23c98:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   23c9c:	008000f4 	movhi	r2,3
   23ca0:	10883804 	addi	r2,r2,8416
   23ca4:	e0fff817 	ldw	r3,-32(fp)
   23ca8:	180690fa 	slli	r3,r3,3
   23cac:	10c5883a 	add	r2,r2,r3
   23cb0:	10800104 	addi	r2,r2,4
   23cb4:	e0ffff17 	ldw	r3,-4(fp)
   23cb8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   23cbc:	e0bffe17 	ldw	r2,-8(fp)
   23cc0:	10000526 	beq	r2,zero,23cd8 <alt_iic_isr_register+0xb4>
   23cc4:	e0bff817 	ldw	r2,-32(fp)
   23cc8:	100b883a 	mov	r5,r2
   23ccc:	e13ffc17 	ldw	r4,-16(fp)
   23cd0:	0023ac40 	call	23ac4 <alt_ic_irq_enable>
   23cd4:	00000406 	br	23ce8 <alt_iic_isr_register+0xc4>
   23cd8:	e0bff817 	ldw	r2,-32(fp)
   23cdc:	100b883a 	mov	r5,r2
   23ce0:	e13ffc17 	ldw	r4,-16(fp)
   23ce4:	0023b4c0 	call	23b4c <alt_ic_irq_disable>
   23ce8:	e0bff715 	stw	r2,-36(fp)
   23cec:	e0bffa17 	ldw	r2,-24(fp)
   23cf0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23cf4:	e0bff917 	ldw	r2,-28(fp)
   23cf8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   23cfc:	e0bff717 	ldw	r2,-36(fp)
}
   23d00:	e037883a 	mov	sp,fp
   23d04:	dfc00117 	ldw	ra,4(sp)
   23d08:	df000017 	ldw	fp,0(sp)
   23d0c:	dec00204 	addi	sp,sp,8
   23d10:	f800283a 	ret

00023d14 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   23d14:	defff804 	addi	sp,sp,-32
   23d18:	dfc00715 	stw	ra,28(sp)
   23d1c:	df000615 	stw	fp,24(sp)
   23d20:	dc000515 	stw	r16,20(sp)
   23d24:	df000604 	addi	fp,sp,24
   23d28:	e13ffb15 	stw	r4,-20(fp)
   23d2c:	e17ffc15 	stw	r5,-16(fp)
   23d30:	e1bffd15 	stw	r6,-12(fp)
   23d34:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   23d38:	e1bffe17 	ldw	r6,-8(fp)
   23d3c:	e17ffd17 	ldw	r5,-12(fp)
   23d40:	e13ffc17 	ldw	r4,-16(fp)
   23d44:	0023f9c0 	call	23f9c <open>
   23d48:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   23d4c:	e0bffa17 	ldw	r2,-24(fp)
   23d50:	10002216 	blt	r2,zero,23ddc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   23d54:	040000f4 	movhi	r16,3
   23d58:	84310304 	addi	r16,r16,-15348
   23d5c:	e0bffa17 	ldw	r2,-24(fp)
   23d60:	01400304 	movi	r5,12
   23d64:	1009883a 	mov	r4,r2
   23d68:	000d8e00 	call	d8e0 <__mulsi3>
   23d6c:	8085883a 	add	r2,r16,r2
   23d70:	10c00017 	ldw	r3,0(r2)
   23d74:	e0bffb17 	ldw	r2,-20(fp)
   23d78:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23d7c:	040000f4 	movhi	r16,3
   23d80:	84310304 	addi	r16,r16,-15348
   23d84:	e0bffa17 	ldw	r2,-24(fp)
   23d88:	01400304 	movi	r5,12
   23d8c:	1009883a 	mov	r4,r2
   23d90:	000d8e00 	call	d8e0 <__mulsi3>
   23d94:	8085883a 	add	r2,r16,r2
   23d98:	10800104 	addi	r2,r2,4
   23d9c:	10c00017 	ldw	r3,0(r2)
   23da0:	e0bffb17 	ldw	r2,-20(fp)
   23da4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23da8:	040000f4 	movhi	r16,3
   23dac:	84310304 	addi	r16,r16,-15348
   23db0:	e0bffa17 	ldw	r2,-24(fp)
   23db4:	01400304 	movi	r5,12
   23db8:	1009883a 	mov	r4,r2
   23dbc:	000d8e00 	call	d8e0 <__mulsi3>
   23dc0:	8085883a 	add	r2,r16,r2
   23dc4:	10800204 	addi	r2,r2,8
   23dc8:	10c00017 	ldw	r3,0(r2)
   23dcc:	e0bffb17 	ldw	r2,-20(fp)
   23dd0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23dd4:	e13ffa17 	ldw	r4,-24(fp)
   23dd8:	00207dc0 	call	207dc <alt_release_fd>
  }
} 
   23ddc:	0001883a 	nop
   23de0:	e6ffff04 	addi	sp,fp,-4
   23de4:	dfc00217 	ldw	ra,8(sp)
   23de8:	df000117 	ldw	fp,4(sp)
   23dec:	dc000017 	ldw	r16,0(sp)
   23df0:	dec00304 	addi	sp,sp,12
   23df4:	f800283a 	ret

00023df8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23df8:	defffb04 	addi	sp,sp,-20
   23dfc:	dfc00415 	stw	ra,16(sp)
   23e00:	df000315 	stw	fp,12(sp)
   23e04:	df000304 	addi	fp,sp,12
   23e08:	e13ffd15 	stw	r4,-12(fp)
   23e0c:	e17ffe15 	stw	r5,-8(fp)
   23e10:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23e14:	01c07fc4 	movi	r7,511
   23e18:	01800044 	movi	r6,1
   23e1c:	e17ffd17 	ldw	r5,-12(fp)
   23e20:	010000f4 	movhi	r4,3
   23e24:	21310604 	addi	r4,r4,-15336
   23e28:	0023d140 	call	23d14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   23e2c:	01c07fc4 	movi	r7,511
   23e30:	000d883a 	mov	r6,zero
   23e34:	e17ffe17 	ldw	r5,-8(fp)
   23e38:	010000f4 	movhi	r4,3
   23e3c:	21310304 	addi	r4,r4,-15348
   23e40:	0023d140 	call	23d14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   23e44:	01c07fc4 	movi	r7,511
   23e48:	01800044 	movi	r6,1
   23e4c:	e17fff17 	ldw	r5,-4(fp)
   23e50:	010000f4 	movhi	r4,3
   23e54:	21310904 	addi	r4,r4,-15324
   23e58:	0023d140 	call	23d14 <alt_open_fd>
}  
   23e5c:	0001883a 	nop
   23e60:	e037883a 	mov	sp,fp
   23e64:	dfc00117 	ldw	ra,4(sp)
   23e68:	df000017 	ldw	fp,0(sp)
   23e6c:	dec00204 	addi	sp,sp,8
   23e70:	f800283a 	ret

00023e74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23e74:	defffe04 	addi	sp,sp,-8
   23e78:	dfc00115 	stw	ra,4(sp)
   23e7c:	df000015 	stw	fp,0(sp)
   23e80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23e84:	d0a5bd17 	ldw	r2,-26892(gp)
   23e88:	10000326 	beq	r2,zero,23e98 <alt_get_errno+0x24>
   23e8c:	d0a5bd17 	ldw	r2,-26892(gp)
   23e90:	103ee83a 	callr	r2
   23e94:	00000106 	br	23e9c <alt_get_errno+0x28>
   23e98:	d0b24e04 	addi	r2,gp,-14024
}
   23e9c:	e037883a 	mov	sp,fp
   23ea0:	dfc00117 	ldw	ra,4(sp)
   23ea4:	df000017 	ldw	fp,0(sp)
   23ea8:	dec00204 	addi	sp,sp,8
   23eac:	f800283a 	ret

00023eb0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   23eb0:	defffb04 	addi	sp,sp,-20
   23eb4:	dfc00415 	stw	ra,16(sp)
   23eb8:	df000315 	stw	fp,12(sp)
   23ebc:	dc000215 	stw	r16,8(sp)
   23ec0:	df000304 	addi	fp,sp,12
   23ec4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   23ec8:	e0bffe17 	ldw	r2,-8(fp)
   23ecc:	10800217 	ldw	r2,8(r2)
   23ed0:	10d00034 	orhi	r3,r2,16384
   23ed4:	e0bffe17 	ldw	r2,-8(fp)
   23ed8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23edc:	e03ffd15 	stw	zero,-12(fp)
   23ee0:	00002306 	br	23f70 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23ee4:	040000f4 	movhi	r16,3
   23ee8:	84310304 	addi	r16,r16,-15348
   23eec:	e0bffd17 	ldw	r2,-12(fp)
   23ef0:	01400304 	movi	r5,12
   23ef4:	1009883a 	mov	r4,r2
   23ef8:	000d8e00 	call	d8e0 <__mulsi3>
   23efc:	8085883a 	add	r2,r16,r2
   23f00:	10c00017 	ldw	r3,0(r2)
   23f04:	e0bffe17 	ldw	r2,-8(fp)
   23f08:	10800017 	ldw	r2,0(r2)
   23f0c:	1880151e 	bne	r3,r2,23f64 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23f10:	040000f4 	movhi	r16,3
   23f14:	84310304 	addi	r16,r16,-15348
   23f18:	e0bffd17 	ldw	r2,-12(fp)
   23f1c:	01400304 	movi	r5,12
   23f20:	1009883a 	mov	r4,r2
   23f24:	000d8e00 	call	d8e0 <__mulsi3>
   23f28:	8085883a 	add	r2,r16,r2
   23f2c:	10800204 	addi	r2,r2,8
   23f30:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23f34:	10000b0e 	bge	r2,zero,23f64 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   23f38:	01400304 	movi	r5,12
   23f3c:	e13ffd17 	ldw	r4,-12(fp)
   23f40:	000d8e00 	call	d8e0 <__mulsi3>
   23f44:	1007883a 	mov	r3,r2
   23f48:	008000f4 	movhi	r2,3
   23f4c:	10b10304 	addi	r2,r2,-15348
   23f50:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23f54:	e0bffe17 	ldw	r2,-8(fp)
   23f58:	18800226 	beq	r3,r2,23f64 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   23f5c:	00bffcc4 	movi	r2,-13
   23f60:	00000806 	br	23f84 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23f64:	e0bffd17 	ldw	r2,-12(fp)
   23f68:	10800044 	addi	r2,r2,1
   23f6c:	e0bffd15 	stw	r2,-12(fp)
   23f70:	d0a5bc17 	ldw	r2,-26896(gp)
   23f74:	1007883a 	mov	r3,r2
   23f78:	e0bffd17 	ldw	r2,-12(fp)
   23f7c:	18bfd92e 	bgeu	r3,r2,23ee4 <__alt_data_end+0xfc023ee4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   23f80:	0005883a 	mov	r2,zero
}
   23f84:	e6ffff04 	addi	sp,fp,-4
   23f88:	dfc00217 	ldw	ra,8(sp)
   23f8c:	df000117 	ldw	fp,4(sp)
   23f90:	dc000017 	ldw	r16,0(sp)
   23f94:	dec00304 	addi	sp,sp,12
   23f98:	f800283a 	ret

00023f9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   23f9c:	defff604 	addi	sp,sp,-40
   23fa0:	dfc00915 	stw	ra,36(sp)
   23fa4:	df000815 	stw	fp,32(sp)
   23fa8:	df000804 	addi	fp,sp,32
   23fac:	e13ffd15 	stw	r4,-12(fp)
   23fb0:	e17ffe15 	stw	r5,-8(fp)
   23fb4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   23fb8:	00bfffc4 	movi	r2,-1
   23fbc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   23fc0:	00bffb44 	movi	r2,-19
   23fc4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   23fc8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   23fcc:	d165ba04 	addi	r5,gp,-26904
   23fd0:	e13ffd17 	ldw	r4,-12(fp)
   23fd4:	00239c40 	call	239c4 <alt_find_dev>
   23fd8:	e0bff815 	stw	r2,-32(fp)
   23fdc:	e0bff817 	ldw	r2,-32(fp)
   23fe0:	1000051e 	bne	r2,zero,23ff8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   23fe4:	e13ffd17 	ldw	r4,-12(fp)
   23fe8:	00245280 	call	24528 <alt_find_file>
   23fec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   23ff0:	00800044 	movi	r2,1
   23ff4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   23ff8:	e0bff817 	ldw	r2,-32(fp)
   23ffc:	10002b26 	beq	r2,zero,240ac <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24000:	e13ff817 	ldw	r4,-32(fp)
   24004:	00246300 	call	24630 <alt_get_fd>
   24008:	e0bff915 	stw	r2,-28(fp)
   2400c:	e0bff917 	ldw	r2,-28(fp)
   24010:	1000030e 	bge	r2,zero,24020 <open+0x84>
    {
      status = index;
   24014:	e0bff917 	ldw	r2,-28(fp)
   24018:	e0bffa15 	stw	r2,-24(fp)
   2401c:	00002506 	br	240b4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   24020:	01400304 	movi	r5,12
   24024:	e13ff917 	ldw	r4,-28(fp)
   24028:	000d8e00 	call	d8e0 <__mulsi3>
   2402c:	1007883a 	mov	r3,r2
   24030:	008000f4 	movhi	r2,3
   24034:	10b10304 	addi	r2,r2,-15348
   24038:	1885883a 	add	r2,r3,r2
   2403c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24040:	e0fffe17 	ldw	r3,-8(fp)
   24044:	00900034 	movhi	r2,16384
   24048:	10bfffc4 	addi	r2,r2,-1
   2404c:	1886703a 	and	r3,r3,r2
   24050:	e0bffc17 	ldw	r2,-16(fp)
   24054:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24058:	e0bffb17 	ldw	r2,-20(fp)
   2405c:	1000051e 	bne	r2,zero,24074 <open+0xd8>
   24060:	e13ffc17 	ldw	r4,-16(fp)
   24064:	0023eb00 	call	23eb0 <alt_file_locked>
   24068:	e0bffa15 	stw	r2,-24(fp)
   2406c:	e0bffa17 	ldw	r2,-24(fp)
   24070:	10001016 	blt	r2,zero,240b4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24074:	e0bff817 	ldw	r2,-32(fp)
   24078:	10800317 	ldw	r2,12(r2)
   2407c:	10000826 	beq	r2,zero,240a0 <open+0x104>
   24080:	e0bff817 	ldw	r2,-32(fp)
   24084:	10800317 	ldw	r2,12(r2)
   24088:	e1ffff17 	ldw	r7,-4(fp)
   2408c:	e1bffe17 	ldw	r6,-8(fp)
   24090:	e17ffd17 	ldw	r5,-12(fp)
   24094:	e13ffc17 	ldw	r4,-16(fp)
   24098:	103ee83a 	callr	r2
   2409c:	00000106 	br	240a4 <open+0x108>
   240a0:	0005883a 	mov	r2,zero
   240a4:	e0bffa15 	stw	r2,-24(fp)
   240a8:	00000206 	br	240b4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   240ac:	00bffb44 	movi	r2,-19
   240b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   240b4:	e0bffa17 	ldw	r2,-24(fp)
   240b8:	1000090e 	bge	r2,zero,240e0 <open+0x144>
  {
    alt_release_fd (index);  
   240bc:	e13ff917 	ldw	r4,-28(fp)
   240c0:	00207dc0 	call	207dc <alt_release_fd>
    ALT_ERRNO = -status;
   240c4:	0023e740 	call	23e74 <alt_get_errno>
   240c8:	1007883a 	mov	r3,r2
   240cc:	e0bffa17 	ldw	r2,-24(fp)
   240d0:	0085c83a 	sub	r2,zero,r2
   240d4:	18800015 	stw	r2,0(r3)
    return -1;
   240d8:	00bfffc4 	movi	r2,-1
   240dc:	00000106 	br	240e4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   240e0:	e0bff917 	ldw	r2,-28(fp)
}
   240e4:	e037883a 	mov	sp,fp
   240e8:	dfc00117 	ldw	ra,4(sp)
   240ec:	df000017 	ldw	fp,0(sp)
   240f0:	dec00204 	addi	sp,sp,8
   240f4:	f800283a 	ret

000240f8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   240f8:	defff204 	addi	sp,sp,-56
   240fc:	dfc00a15 	stw	ra,40(sp)
   24100:	df000915 	stw	fp,36(sp)
   24104:	df000904 	addi	fp,sp,36
   24108:	e13fff15 	stw	r4,-4(fp)
   2410c:	e1400215 	stw	r5,8(fp)
   24110:	e1800315 	stw	r6,12(fp)
   24114:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   24118:	e0800204 	addi	r2,fp,8
   2411c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   24120:	e0bfff17 	ldw	r2,-4(fp)
   24124:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   24128:	00006f06 	br	242e8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   2412c:	e0bff807 	ldb	r2,-32(fp)
   24130:	10800960 	cmpeqi	r2,r2,37
   24134:	1000041e 	bne	r2,zero,24148 <alt_printf+0x50>
        {
            alt_putchar(c);
   24138:	e0bff807 	ldb	r2,-32(fp)
   2413c:	1009883a 	mov	r4,r2
   24140:	00243240 	call	24324 <alt_putchar>
   24144:	00006806 	br	242e8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   24148:	e0bff717 	ldw	r2,-36(fp)
   2414c:	10c00044 	addi	r3,r2,1
   24150:	e0fff715 	stw	r3,-36(fp)
   24154:	10800003 	ldbu	r2,0(r2)
   24158:	e0bff805 	stb	r2,-32(fp)
   2415c:	e0bff807 	ldb	r2,-32(fp)
   24160:	10006926 	beq	r2,zero,24308 <alt_printf+0x210>
            {
                if (c == '%')
   24164:	e0bff807 	ldb	r2,-32(fp)
   24168:	10800958 	cmpnei	r2,r2,37
   2416c:	1000041e 	bne	r2,zero,24180 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   24170:	e0bff807 	ldb	r2,-32(fp)
   24174:	1009883a 	mov	r4,r2
   24178:	00243240 	call	24324 <alt_putchar>
   2417c:	00005a06 	br	242e8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   24180:	e0bff807 	ldb	r2,-32(fp)
   24184:	108018d8 	cmpnei	r2,r2,99
   24188:	1000081e 	bne	r2,zero,241ac <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   2418c:	e0bffe17 	ldw	r2,-8(fp)
   24190:	10c00104 	addi	r3,r2,4
   24194:	e0fffe15 	stw	r3,-8(fp)
   24198:	10800017 	ldw	r2,0(r2)
   2419c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   241a0:	e13ffd17 	ldw	r4,-12(fp)
   241a4:	00243240 	call	24324 <alt_putchar>
   241a8:	00004f06 	br	242e8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   241ac:	e0bff807 	ldb	r2,-32(fp)
   241b0:	10801e18 	cmpnei	r2,r2,120
   241b4:	1000341e 	bne	r2,zero,24288 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   241b8:	e0bffe17 	ldw	r2,-8(fp)
   241bc:	10c00104 	addi	r3,r2,4
   241c0:	e0fffe15 	stw	r3,-8(fp)
   241c4:	10800017 	ldw	r2,0(r2)
   241c8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   241cc:	e0bffb17 	ldw	r2,-20(fp)
   241d0:	1000031e 	bne	r2,zero,241e0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   241d4:	01000c04 	movi	r4,48
   241d8:	00243240 	call	24324 <alt_putchar>
                        continue;
   241dc:	00004206 	br	242e8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   241e0:	00800704 	movi	r2,28
   241e4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   241e8:	00000306 	br	241f8 <alt_printf+0x100>
                        digit_shift -= 4;
   241ec:	e0bff917 	ldw	r2,-28(fp)
   241f0:	10bfff04 	addi	r2,r2,-4
   241f4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   241f8:	00c003c4 	movi	r3,15
   241fc:	e0bff917 	ldw	r2,-28(fp)
   24200:	1884983a 	sll	r2,r3,r2
   24204:	1007883a 	mov	r3,r2
   24208:	e0bffb17 	ldw	r2,-20(fp)
   2420c:	1884703a 	and	r2,r3,r2
   24210:	103ff626 	beq	r2,zero,241ec <__alt_data_end+0xfc0241ec>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   24214:	00001906 	br	2427c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   24218:	00c003c4 	movi	r3,15
   2421c:	e0bff917 	ldw	r2,-28(fp)
   24220:	1884983a 	sll	r2,r3,r2
   24224:	1007883a 	mov	r3,r2
   24228:	e0bffb17 	ldw	r2,-20(fp)
   2422c:	1886703a 	and	r3,r3,r2
   24230:	e0bff917 	ldw	r2,-28(fp)
   24234:	1884d83a 	srl	r2,r3,r2
   24238:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   2423c:	e0bffc17 	ldw	r2,-16(fp)
   24240:	108002a8 	cmpgeui	r2,r2,10
   24244:	1000041e 	bne	r2,zero,24258 <alt_printf+0x160>
                            c = '0' + digit;
   24248:	e0bffc17 	ldw	r2,-16(fp)
   2424c:	10800c04 	addi	r2,r2,48
   24250:	e0bff805 	stb	r2,-32(fp)
   24254:	00000306 	br	24264 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   24258:	e0bffc17 	ldw	r2,-16(fp)
   2425c:	108015c4 	addi	r2,r2,87
   24260:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   24264:	e0bff807 	ldb	r2,-32(fp)
   24268:	1009883a 	mov	r4,r2
   2426c:	00243240 	call	24324 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   24270:	e0bff917 	ldw	r2,-28(fp)
   24274:	10bfff04 	addi	r2,r2,-4
   24278:	e0bff915 	stw	r2,-28(fp)
   2427c:	e0bff917 	ldw	r2,-28(fp)
   24280:	103fe50e 	bge	r2,zero,24218 <__alt_data_end+0xfc024218>
   24284:	00001806 	br	242e8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   24288:	e0bff807 	ldb	r2,-32(fp)
   2428c:	10801cd8 	cmpnei	r2,r2,115
   24290:	1000151e 	bne	r2,zero,242e8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   24294:	e0bffe17 	ldw	r2,-8(fp)
   24298:	10c00104 	addi	r3,r2,4
   2429c:	e0fffe15 	stw	r3,-8(fp)
   242a0:	10800017 	ldw	r2,0(r2)
   242a4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   242a8:	00000906 	br	242d0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   242ac:	e0bffa17 	ldw	r2,-24(fp)
   242b0:	10c00044 	addi	r3,r2,1
   242b4:	e0fffa15 	stw	r3,-24(fp)
   242b8:	10800003 	ldbu	r2,0(r2)
   242bc:	10803fcc 	andi	r2,r2,255
   242c0:	1080201c 	xori	r2,r2,128
   242c4:	10bfe004 	addi	r2,r2,-128
   242c8:	1009883a 	mov	r4,r2
   242cc:	00243240 	call	24324 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   242d0:	e0bffa17 	ldw	r2,-24(fp)
   242d4:	10800003 	ldbu	r2,0(r2)
   242d8:	10803fcc 	andi	r2,r2,255
   242dc:	1080201c 	xori	r2,r2,128
   242e0:	10bfe004 	addi	r2,r2,-128
   242e4:	103ff11e 	bne	r2,zero,242ac <__alt_data_end+0xfc0242ac>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   242e8:	e0bff717 	ldw	r2,-36(fp)
   242ec:	10c00044 	addi	r3,r2,1
   242f0:	e0fff715 	stw	r3,-36(fp)
   242f4:	10800003 	ldbu	r2,0(r2)
   242f8:	e0bff805 	stb	r2,-32(fp)
   242fc:	e0bff807 	ldb	r2,-32(fp)
   24300:	103f8a1e 	bne	r2,zero,2412c <__alt_data_end+0xfc02412c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   24304:	00000106 	br	2430c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   24308:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   2430c:	0001883a 	nop
   24310:	e037883a 	mov	sp,fp
   24314:	dfc00117 	ldw	ra,4(sp)
   24318:	df000017 	ldw	fp,0(sp)
   2431c:	dec00504 	addi	sp,sp,20
   24320:	f800283a 	ret

00024324 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   24324:	defffd04 	addi	sp,sp,-12
   24328:	dfc00215 	stw	ra,8(sp)
   2432c:	df000115 	stw	fp,4(sp)
   24330:	df000104 	addi	fp,sp,4
   24334:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   24338:	d0a5b317 	ldw	r2,-26932(gp)
   2433c:	10800217 	ldw	r2,8(r2)
   24340:	100b883a 	mov	r5,r2
   24344:	e13fff17 	ldw	r4,-4(fp)
   24348:	0018d680 	call	18d68 <putc>
#endif
#endif
}
   2434c:	e037883a 	mov	sp,fp
   24350:	dfc00117 	ldw	ra,4(sp)
   24354:	df000017 	ldw	fp,0(sp)
   24358:	dec00204 	addi	sp,sp,8
   2435c:	f800283a 	ret

00024360 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24360:	defffa04 	addi	sp,sp,-24
   24364:	df000515 	stw	fp,20(sp)
   24368:	df000504 	addi	fp,sp,20
   2436c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24370:	0005303a 	rdctl	r2,status
   24374:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24378:	e0fffc17 	ldw	r3,-16(fp)
   2437c:	00bfff84 	movi	r2,-2
   24380:	1884703a 	and	r2,r3,r2
   24384:	1001703a 	wrctl	status,r2
  
  return context;
   24388:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2438c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24390:	e0bfff17 	ldw	r2,-4(fp)
   24394:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24398:	e0bffd17 	ldw	r2,-12(fp)
   2439c:	10800017 	ldw	r2,0(r2)
   243a0:	e0fffd17 	ldw	r3,-12(fp)
   243a4:	18c00117 	ldw	r3,4(r3)
   243a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   243ac:	e0bffd17 	ldw	r2,-12(fp)
   243b0:	10800117 	ldw	r2,4(r2)
   243b4:	e0fffd17 	ldw	r3,-12(fp)
   243b8:	18c00017 	ldw	r3,0(r3)
   243bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   243c0:	e0bffd17 	ldw	r2,-12(fp)
   243c4:	e0fffd17 	ldw	r3,-12(fp)
   243c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   243cc:	e0bffd17 	ldw	r2,-12(fp)
   243d0:	e0fffd17 	ldw	r3,-12(fp)
   243d4:	10c00015 	stw	r3,0(r2)
   243d8:	e0bffb17 	ldw	r2,-20(fp)
   243dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   243e0:	e0bffe17 	ldw	r2,-8(fp)
   243e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   243e8:	0001883a 	nop
   243ec:	e037883a 	mov	sp,fp
   243f0:	df000017 	ldw	fp,0(sp)
   243f4:	dec00104 	addi	sp,sp,4
   243f8:	f800283a 	ret

000243fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   243fc:	defffb04 	addi	sp,sp,-20
   24400:	dfc00415 	stw	ra,16(sp)
   24404:	df000315 	stw	fp,12(sp)
   24408:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2440c:	d0a5c217 	ldw	r2,-26872(gp)
   24410:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24414:	d0b25717 	ldw	r2,-13988(gp)
   24418:	10800044 	addi	r2,r2,1
   2441c:	d0b25715 	stw	r2,-13988(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24420:	00002e06 	br	244dc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   24424:	e0bffd17 	ldw	r2,-12(fp)
   24428:	10800017 	ldw	r2,0(r2)
   2442c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24430:	e0bffd17 	ldw	r2,-12(fp)
   24434:	10800403 	ldbu	r2,16(r2)
   24438:	10803fcc 	andi	r2,r2,255
   2443c:	10000426 	beq	r2,zero,24450 <alt_tick+0x54>
   24440:	d0b25717 	ldw	r2,-13988(gp)
   24444:	1000021e 	bne	r2,zero,24450 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   24448:	e0bffd17 	ldw	r2,-12(fp)
   2444c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24450:	e0bffd17 	ldw	r2,-12(fp)
   24454:	10800217 	ldw	r2,8(r2)
   24458:	d0f25717 	ldw	r3,-13988(gp)
   2445c:	18801d36 	bltu	r3,r2,244d4 <alt_tick+0xd8>
   24460:	e0bffd17 	ldw	r2,-12(fp)
   24464:	10800403 	ldbu	r2,16(r2)
   24468:	10803fcc 	andi	r2,r2,255
   2446c:	1000191e 	bne	r2,zero,244d4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24470:	e0bffd17 	ldw	r2,-12(fp)
   24474:	10800317 	ldw	r2,12(r2)
   24478:	e0fffd17 	ldw	r3,-12(fp)
   2447c:	18c00517 	ldw	r3,20(r3)
   24480:	1809883a 	mov	r4,r3
   24484:	103ee83a 	callr	r2
   24488:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2448c:	e0bfff17 	ldw	r2,-4(fp)
   24490:	1000031e 	bne	r2,zero,244a0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   24494:	e13ffd17 	ldw	r4,-12(fp)
   24498:	00243600 	call	24360 <alt_alarm_stop>
   2449c:	00000d06 	br	244d4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   244a0:	e0bffd17 	ldw	r2,-12(fp)
   244a4:	10c00217 	ldw	r3,8(r2)
   244a8:	e0bfff17 	ldw	r2,-4(fp)
   244ac:	1887883a 	add	r3,r3,r2
   244b0:	e0bffd17 	ldw	r2,-12(fp)
   244b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   244b8:	e0bffd17 	ldw	r2,-12(fp)
   244bc:	10c00217 	ldw	r3,8(r2)
   244c0:	d0b25717 	ldw	r2,-13988(gp)
   244c4:	1880032e 	bgeu	r3,r2,244d4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   244c8:	e0bffd17 	ldw	r2,-12(fp)
   244cc:	00c00044 	movi	r3,1
   244d0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   244d4:	e0bffe17 	ldw	r2,-8(fp)
   244d8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   244dc:	e0fffd17 	ldw	r3,-12(fp)
   244e0:	d0a5c204 	addi	r2,gp,-26872
   244e4:	18bfcf1e 	bne	r3,r2,24424 <__alt_data_end+0xfc024424>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   244e8:	0001883a 	nop
}
   244ec:	0001883a 	nop
   244f0:	e037883a 	mov	sp,fp
   244f4:	dfc00117 	ldw	ra,4(sp)
   244f8:	df000017 	ldw	fp,0(sp)
   244fc:	dec00204 	addi	sp,sp,8
   24500:	f800283a 	ret

00024504 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24504:	deffff04 	addi	sp,sp,-4
   24508:	df000015 	stw	fp,0(sp)
   2450c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24510:	000170fa 	wrctl	ienable,zero
}
   24514:	0001883a 	nop
   24518:	e037883a 	mov	sp,fp
   2451c:	df000017 	ldw	fp,0(sp)
   24520:	dec00104 	addi	sp,sp,4
   24524:	f800283a 	ret

00024528 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24528:	defffb04 	addi	sp,sp,-20
   2452c:	dfc00415 	stw	ra,16(sp)
   24530:	df000315 	stw	fp,12(sp)
   24534:	df000304 	addi	fp,sp,12
   24538:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2453c:	d0a5b817 	ldw	r2,-26912(gp)
   24540:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24544:	00003106 	br	2460c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24548:	e0bffd17 	ldw	r2,-12(fp)
   2454c:	10800217 	ldw	r2,8(r2)
   24550:	1009883a 	mov	r4,r2
   24554:	00105480 	call	10548 <strlen>
   24558:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2455c:	e0bffd17 	ldw	r2,-12(fp)
   24560:	10c00217 	ldw	r3,8(r2)
   24564:	e0bffe17 	ldw	r2,-8(fp)
   24568:	10bfffc4 	addi	r2,r2,-1
   2456c:	1885883a 	add	r2,r3,r2
   24570:	10800003 	ldbu	r2,0(r2)
   24574:	10803fcc 	andi	r2,r2,255
   24578:	1080201c 	xori	r2,r2,128
   2457c:	10bfe004 	addi	r2,r2,-128
   24580:	10800bd8 	cmpnei	r2,r2,47
   24584:	1000031e 	bne	r2,zero,24594 <alt_find_file+0x6c>
    {
      len -= 1;
   24588:	e0bffe17 	ldw	r2,-8(fp)
   2458c:	10bfffc4 	addi	r2,r2,-1
   24590:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24594:	e0bffe17 	ldw	r2,-8(fp)
   24598:	e0ffff17 	ldw	r3,-4(fp)
   2459c:	1885883a 	add	r2,r3,r2
   245a0:	10800003 	ldbu	r2,0(r2)
   245a4:	10803fcc 	andi	r2,r2,255
   245a8:	1080201c 	xori	r2,r2,128
   245ac:	10bfe004 	addi	r2,r2,-128
   245b0:	10800be0 	cmpeqi	r2,r2,47
   245b4:	1000081e 	bne	r2,zero,245d8 <alt_find_file+0xb0>
   245b8:	e0bffe17 	ldw	r2,-8(fp)
   245bc:	e0ffff17 	ldw	r3,-4(fp)
   245c0:	1885883a 	add	r2,r3,r2
   245c4:	10800003 	ldbu	r2,0(r2)
   245c8:	10803fcc 	andi	r2,r2,255
   245cc:	1080201c 	xori	r2,r2,128
   245d0:	10bfe004 	addi	r2,r2,-128
   245d4:	10000a1e 	bne	r2,zero,24600 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   245d8:	e0bffd17 	ldw	r2,-12(fp)
   245dc:	10800217 	ldw	r2,8(r2)
   245e0:	e0fffe17 	ldw	r3,-8(fp)
   245e4:	180d883a 	mov	r6,r3
   245e8:	e17fff17 	ldw	r5,-4(fp)
   245ec:	1009883a 	mov	r4,r2
   245f0:	00247dc0 	call	247dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   245f4:	1000021e 	bne	r2,zero,24600 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   245f8:	e0bffd17 	ldw	r2,-12(fp)
   245fc:	00000706 	br	2461c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   24600:	e0bffd17 	ldw	r2,-12(fp)
   24604:	10800017 	ldw	r2,0(r2)
   24608:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2460c:	e0fffd17 	ldw	r3,-12(fp)
   24610:	d0a5b804 	addi	r2,gp,-26912
   24614:	18bfcc1e 	bne	r3,r2,24548 <__alt_data_end+0xfc024548>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24618:	0005883a 	mov	r2,zero
}
   2461c:	e037883a 	mov	sp,fp
   24620:	dfc00117 	ldw	ra,4(sp)
   24624:	df000017 	ldw	fp,0(sp)
   24628:	dec00204 	addi	sp,sp,8
   2462c:	f800283a 	ret

00024630 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24630:	defffa04 	addi	sp,sp,-24
   24634:	dfc00515 	stw	ra,20(sp)
   24638:	df000415 	stw	fp,16(sp)
   2463c:	dc000315 	stw	r16,12(sp)
   24640:	df000404 	addi	fp,sp,16
   24644:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   24648:	00bffa04 	movi	r2,-24
   2464c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24650:	e03ffc15 	stw	zero,-16(fp)
   24654:	00001d06 	br	246cc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   24658:	040000f4 	movhi	r16,3
   2465c:	84310304 	addi	r16,r16,-15348
   24660:	e0bffc17 	ldw	r2,-16(fp)
   24664:	01400304 	movi	r5,12
   24668:	1009883a 	mov	r4,r2
   2466c:	000d8e00 	call	d8e0 <__mulsi3>
   24670:	8085883a 	add	r2,r16,r2
   24674:	10800017 	ldw	r2,0(r2)
   24678:	1000111e 	bne	r2,zero,246c0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   2467c:	040000f4 	movhi	r16,3
   24680:	84310304 	addi	r16,r16,-15348
   24684:	e0bffc17 	ldw	r2,-16(fp)
   24688:	01400304 	movi	r5,12
   2468c:	1009883a 	mov	r4,r2
   24690:	000d8e00 	call	d8e0 <__mulsi3>
   24694:	8085883a 	add	r2,r16,r2
   24698:	e0fffe17 	ldw	r3,-8(fp)
   2469c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   246a0:	d0e5bc17 	ldw	r3,-26896(gp)
   246a4:	e0bffc17 	ldw	r2,-16(fp)
   246a8:	1880020e 	bge	r3,r2,246b4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   246ac:	e0bffc17 	ldw	r2,-16(fp)
   246b0:	d0a5bc15 	stw	r2,-26896(gp)
      }
      rc = i;
   246b4:	e0bffc17 	ldw	r2,-16(fp)
   246b8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   246bc:	00000606 	br	246d8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   246c0:	e0bffc17 	ldw	r2,-16(fp)
   246c4:	10800044 	addi	r2,r2,1
   246c8:	e0bffc15 	stw	r2,-16(fp)
   246cc:	e0bffc17 	ldw	r2,-16(fp)
   246d0:	10800810 	cmplti	r2,r2,32
   246d4:	103fe01e 	bne	r2,zero,24658 <__alt_data_end+0xfc024658>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   246d8:	e0bffd17 	ldw	r2,-12(fp)
}
   246dc:	e6ffff04 	addi	sp,fp,-4
   246e0:	dfc00217 	ldw	ra,8(sp)
   246e4:	df000117 	ldw	fp,4(sp)
   246e8:	dc000017 	ldw	r16,0(sp)
   246ec:	dec00304 	addi	sp,sp,12
   246f0:	f800283a 	ret

000246f4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   246f4:	defffe04 	addi	sp,sp,-8
   246f8:	df000115 	stw	fp,4(sp)
   246fc:	df000104 	addi	fp,sp,4
   24700:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   24704:	e0bfff17 	ldw	r2,-4(fp)
   24708:	10bffe84 	addi	r2,r2,-6
   2470c:	10c00428 	cmpgeui	r3,r2,16
   24710:	18001a1e 	bne	r3,zero,2477c <alt_exception_cause_generated_bad_addr+0x88>
   24714:	100690ba 	slli	r3,r2,2
   24718:	008000b4 	movhi	r2,2
   2471c:	1091cb04 	addi	r2,r2,18220
   24720:	1885883a 	add	r2,r3,r2
   24724:	10800017 	ldw	r2,0(r2)
   24728:	1000683a 	jmp	r2
   2472c:	0002476c 	andhi	zero,zero,2333
   24730:	0002476c 	andhi	zero,zero,2333
   24734:	0002477c 	xorhi	zero,zero,2333
   24738:	0002477c 	xorhi	zero,zero,2333
   2473c:	0002477c 	xorhi	zero,zero,2333
   24740:	0002476c 	andhi	zero,zero,2333
   24744:	00024774 	movhi	zero,2333
   24748:	0002477c 	xorhi	zero,zero,2333
   2474c:	0002476c 	andhi	zero,zero,2333
   24750:	0002476c 	andhi	zero,zero,2333
   24754:	0002477c 	xorhi	zero,zero,2333
   24758:	0002476c 	andhi	zero,zero,2333
   2475c:	00024774 	movhi	zero,2333
   24760:	0002477c 	xorhi	zero,zero,2333
   24764:	0002477c 	xorhi	zero,zero,2333
   24768:	0002476c 	andhi	zero,zero,2333
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2476c:	00800044 	movi	r2,1
   24770:	00000306 	br	24780 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   24774:	0005883a 	mov	r2,zero
   24778:	00000106 	br	24780 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2477c:	0005883a 	mov	r2,zero
  }
}
   24780:	e037883a 	mov	sp,fp
   24784:	df000017 	ldw	fp,0(sp)
   24788:	dec00104 	addi	sp,sp,4
   2478c:	f800283a 	ret

00024790 <atexit>:
   24790:	200b883a 	mov	r5,r4
   24794:	000f883a 	mov	r7,zero
   24798:	000d883a 	mov	r6,zero
   2479c:	0009883a 	mov	r4,zero
   247a0:	00248581 	jmpi	24858 <__register_exitproc>

000247a4 <exit>:
   247a4:	defffe04 	addi	sp,sp,-8
   247a8:	000b883a 	mov	r5,zero
   247ac:	dc000015 	stw	r16,0(sp)
   247b0:	dfc00115 	stw	ra,4(sp)
   247b4:	2021883a 	mov	r16,r4
   247b8:	00249700 	call	24970 <__call_exitprocs>
   247bc:	008000f4 	movhi	r2,3
   247c0:	10bb3b04 	addi	r2,r2,-4884
   247c4:	11000017 	ldw	r4,0(r2)
   247c8:	20800f17 	ldw	r2,60(r4)
   247cc:	10000126 	beq	r2,zero,247d4 <exit+0x30>
   247d0:	103ee83a 	callr	r2
   247d4:	8009883a 	mov	r4,r16
   247d8:	00200380 	call	20038 <_exit>

000247dc <memcmp>:
   247dc:	01c000c4 	movi	r7,3
   247e0:	3980192e 	bgeu	r7,r6,24848 <memcmp+0x6c>
   247e4:	2144b03a 	or	r2,r4,r5
   247e8:	11c4703a 	and	r2,r2,r7
   247ec:	10000f26 	beq	r2,zero,2482c <memcmp+0x50>
   247f0:	20800003 	ldbu	r2,0(r4)
   247f4:	28c00003 	ldbu	r3,0(r5)
   247f8:	10c0151e 	bne	r2,r3,24850 <memcmp+0x74>
   247fc:	31bfff84 	addi	r6,r6,-2
   24800:	01ffffc4 	movi	r7,-1
   24804:	00000406 	br	24818 <memcmp+0x3c>
   24808:	20800003 	ldbu	r2,0(r4)
   2480c:	28c00003 	ldbu	r3,0(r5)
   24810:	31bfffc4 	addi	r6,r6,-1
   24814:	10c00e1e 	bne	r2,r3,24850 <memcmp+0x74>
   24818:	21000044 	addi	r4,r4,1
   2481c:	29400044 	addi	r5,r5,1
   24820:	31fff91e 	bne	r6,r7,24808 <__alt_data_end+0xfc024808>
   24824:	0005883a 	mov	r2,zero
   24828:	f800283a 	ret
   2482c:	20c00017 	ldw	r3,0(r4)
   24830:	28800017 	ldw	r2,0(r5)
   24834:	18bfee1e 	bne	r3,r2,247f0 <__alt_data_end+0xfc0247f0>
   24838:	31bfff04 	addi	r6,r6,-4
   2483c:	21000104 	addi	r4,r4,4
   24840:	29400104 	addi	r5,r5,4
   24844:	39bff936 	bltu	r7,r6,2482c <__alt_data_end+0xfc02482c>
   24848:	303fe91e 	bne	r6,zero,247f0 <__alt_data_end+0xfc0247f0>
   2484c:	003ff506 	br	24824 <__alt_data_end+0xfc024824>
   24850:	10c5c83a 	sub	r2,r2,r3
   24854:	f800283a 	ret

00024858 <__register_exitproc>:
   24858:	defffa04 	addi	sp,sp,-24
   2485c:	dc000315 	stw	r16,12(sp)
   24860:	040000f4 	movhi	r16,3
   24864:	843b3b04 	addi	r16,r16,-4884
   24868:	80c00017 	ldw	r3,0(r16)
   2486c:	dc400415 	stw	r17,16(sp)
   24870:	dfc00515 	stw	ra,20(sp)
   24874:	18805217 	ldw	r2,328(r3)
   24878:	2023883a 	mov	r17,r4
   2487c:	10003726 	beq	r2,zero,2495c <__register_exitproc+0x104>
   24880:	10c00117 	ldw	r3,4(r2)
   24884:	010007c4 	movi	r4,31
   24888:	20c00e16 	blt	r4,r3,248c4 <__register_exitproc+0x6c>
   2488c:	1a000044 	addi	r8,r3,1
   24890:	8800221e 	bne	r17,zero,2491c <__register_exitproc+0xc4>
   24894:	18c00084 	addi	r3,r3,2
   24898:	18c7883a 	add	r3,r3,r3
   2489c:	18c7883a 	add	r3,r3,r3
   248a0:	12000115 	stw	r8,4(r2)
   248a4:	10c7883a 	add	r3,r2,r3
   248a8:	19400015 	stw	r5,0(r3)
   248ac:	0005883a 	mov	r2,zero
   248b0:	dfc00517 	ldw	ra,20(sp)
   248b4:	dc400417 	ldw	r17,16(sp)
   248b8:	dc000317 	ldw	r16,12(sp)
   248bc:	dec00604 	addi	sp,sp,24
   248c0:	f800283a 	ret
   248c4:	00800074 	movhi	r2,1
   248c8:	10bd1304 	addi	r2,r2,-2996
   248cc:	10002626 	beq	r2,zero,24968 <__register_exitproc+0x110>
   248d0:	01006404 	movi	r4,400
   248d4:	d9400015 	stw	r5,0(sp)
   248d8:	d9800115 	stw	r6,4(sp)
   248dc:	d9c00215 	stw	r7,8(sp)
   248e0:	000f44c0 	call	f44c <malloc>
   248e4:	d9400017 	ldw	r5,0(sp)
   248e8:	d9800117 	ldw	r6,4(sp)
   248ec:	d9c00217 	ldw	r7,8(sp)
   248f0:	10001d26 	beq	r2,zero,24968 <__register_exitproc+0x110>
   248f4:	81000017 	ldw	r4,0(r16)
   248f8:	10000115 	stw	zero,4(r2)
   248fc:	02000044 	movi	r8,1
   24900:	22405217 	ldw	r9,328(r4)
   24904:	0007883a 	mov	r3,zero
   24908:	12400015 	stw	r9,0(r2)
   2490c:	20805215 	stw	r2,328(r4)
   24910:	10006215 	stw	zero,392(r2)
   24914:	10006315 	stw	zero,396(r2)
   24918:	883fde26 	beq	r17,zero,24894 <__alt_data_end+0xfc024894>
   2491c:	18c9883a 	add	r4,r3,r3
   24920:	2109883a 	add	r4,r4,r4
   24924:	1109883a 	add	r4,r2,r4
   24928:	21802215 	stw	r6,136(r4)
   2492c:	01800044 	movi	r6,1
   24930:	12406217 	ldw	r9,392(r2)
   24934:	30cc983a 	sll	r6,r6,r3
   24938:	4992b03a 	or	r9,r9,r6
   2493c:	12406215 	stw	r9,392(r2)
   24940:	21c04215 	stw	r7,264(r4)
   24944:	01000084 	movi	r4,2
   24948:	893fd21e 	bne	r17,r4,24894 <__alt_data_end+0xfc024894>
   2494c:	11006317 	ldw	r4,396(r2)
   24950:	218cb03a 	or	r6,r4,r6
   24954:	11806315 	stw	r6,396(r2)
   24958:	003fce06 	br	24894 <__alt_data_end+0xfc024894>
   2495c:	18805304 	addi	r2,r3,332
   24960:	18805215 	stw	r2,328(r3)
   24964:	003fc606 	br	24880 <__alt_data_end+0xfc024880>
   24968:	00bfffc4 	movi	r2,-1
   2496c:	003fd006 	br	248b0 <__alt_data_end+0xfc0248b0>

00024970 <__call_exitprocs>:
   24970:	defff504 	addi	sp,sp,-44
   24974:	df000915 	stw	fp,36(sp)
   24978:	dd400615 	stw	r21,24(sp)
   2497c:	dc800315 	stw	r18,12(sp)
   24980:	dfc00a15 	stw	ra,40(sp)
   24984:	ddc00815 	stw	r23,32(sp)
   24988:	dd800715 	stw	r22,28(sp)
   2498c:	dd000515 	stw	r20,20(sp)
   24990:	dcc00415 	stw	r19,16(sp)
   24994:	dc400215 	stw	r17,8(sp)
   24998:	dc000115 	stw	r16,4(sp)
   2499c:	d9000015 	stw	r4,0(sp)
   249a0:	2839883a 	mov	fp,r5
   249a4:	04800044 	movi	r18,1
   249a8:	057fffc4 	movi	r21,-1
   249ac:	008000f4 	movhi	r2,3
   249b0:	10bb3b04 	addi	r2,r2,-4884
   249b4:	12000017 	ldw	r8,0(r2)
   249b8:	45005217 	ldw	r20,328(r8)
   249bc:	44c05204 	addi	r19,r8,328
   249c0:	a0001c26 	beq	r20,zero,24a34 <__call_exitprocs+0xc4>
   249c4:	a0800117 	ldw	r2,4(r20)
   249c8:	15ffffc4 	addi	r23,r2,-1
   249cc:	b8000d16 	blt	r23,zero,24a04 <__call_exitprocs+0x94>
   249d0:	14000044 	addi	r16,r2,1
   249d4:	8421883a 	add	r16,r16,r16
   249d8:	8421883a 	add	r16,r16,r16
   249dc:	84402004 	addi	r17,r16,128
   249e0:	a463883a 	add	r17,r20,r17
   249e4:	a421883a 	add	r16,r20,r16
   249e8:	e0001e26 	beq	fp,zero,24a64 <__call_exitprocs+0xf4>
   249ec:	80804017 	ldw	r2,256(r16)
   249f0:	e0801c26 	beq	fp,r2,24a64 <__call_exitprocs+0xf4>
   249f4:	bdffffc4 	addi	r23,r23,-1
   249f8:	843fff04 	addi	r16,r16,-4
   249fc:	8c7fff04 	addi	r17,r17,-4
   24a00:	bd7ff91e 	bne	r23,r21,249e8 <__alt_data_end+0xfc0249e8>
   24a04:	00800074 	movhi	r2,1
   24a08:	10bd1804 	addi	r2,r2,-2976
   24a0c:	10000926 	beq	r2,zero,24a34 <__call_exitprocs+0xc4>
   24a10:	a0800117 	ldw	r2,4(r20)
   24a14:	1000301e 	bne	r2,zero,24ad8 <__call_exitprocs+0x168>
   24a18:	a0800017 	ldw	r2,0(r20)
   24a1c:	10003226 	beq	r2,zero,24ae8 <__call_exitprocs+0x178>
   24a20:	a009883a 	mov	r4,r20
   24a24:	98800015 	stw	r2,0(r19)
   24a28:	000f4600 	call	f460 <free>
   24a2c:	9d000017 	ldw	r20,0(r19)
   24a30:	a03fe41e 	bne	r20,zero,249c4 <__alt_data_end+0xfc0249c4>
   24a34:	dfc00a17 	ldw	ra,40(sp)
   24a38:	df000917 	ldw	fp,36(sp)
   24a3c:	ddc00817 	ldw	r23,32(sp)
   24a40:	dd800717 	ldw	r22,28(sp)
   24a44:	dd400617 	ldw	r21,24(sp)
   24a48:	dd000517 	ldw	r20,20(sp)
   24a4c:	dcc00417 	ldw	r19,16(sp)
   24a50:	dc800317 	ldw	r18,12(sp)
   24a54:	dc400217 	ldw	r17,8(sp)
   24a58:	dc000117 	ldw	r16,4(sp)
   24a5c:	dec00b04 	addi	sp,sp,44
   24a60:	f800283a 	ret
   24a64:	a0800117 	ldw	r2,4(r20)
   24a68:	80c00017 	ldw	r3,0(r16)
   24a6c:	10bfffc4 	addi	r2,r2,-1
   24a70:	15c01426 	beq	r2,r23,24ac4 <__call_exitprocs+0x154>
   24a74:	80000015 	stw	zero,0(r16)
   24a78:	183fde26 	beq	r3,zero,249f4 <__alt_data_end+0xfc0249f4>
   24a7c:	95c8983a 	sll	r4,r18,r23
   24a80:	a0806217 	ldw	r2,392(r20)
   24a84:	a5800117 	ldw	r22,4(r20)
   24a88:	2084703a 	and	r2,r4,r2
   24a8c:	10000b26 	beq	r2,zero,24abc <__call_exitprocs+0x14c>
   24a90:	a0806317 	ldw	r2,396(r20)
   24a94:	2088703a 	and	r4,r4,r2
   24a98:	20000c1e 	bne	r4,zero,24acc <__call_exitprocs+0x15c>
   24a9c:	89400017 	ldw	r5,0(r17)
   24aa0:	d9000017 	ldw	r4,0(sp)
   24aa4:	183ee83a 	callr	r3
   24aa8:	a0800117 	ldw	r2,4(r20)
   24aac:	15bfbf1e 	bne	r2,r22,249ac <__alt_data_end+0xfc0249ac>
   24ab0:	98800017 	ldw	r2,0(r19)
   24ab4:	153fcf26 	beq	r2,r20,249f4 <__alt_data_end+0xfc0249f4>
   24ab8:	003fbc06 	br	249ac <__alt_data_end+0xfc0249ac>
   24abc:	183ee83a 	callr	r3
   24ac0:	003ff906 	br	24aa8 <__alt_data_end+0xfc024aa8>
   24ac4:	a5c00115 	stw	r23,4(r20)
   24ac8:	003feb06 	br	24a78 <__alt_data_end+0xfc024a78>
   24acc:	89000017 	ldw	r4,0(r17)
   24ad0:	183ee83a 	callr	r3
   24ad4:	003ff406 	br	24aa8 <__alt_data_end+0xfc024aa8>
   24ad8:	a0800017 	ldw	r2,0(r20)
   24adc:	a027883a 	mov	r19,r20
   24ae0:	1029883a 	mov	r20,r2
   24ae4:	003fb606 	br	249c0 <__alt_data_end+0xfc0249c0>
   24ae8:	0005883a 	mov	r2,zero
   24aec:	003ffb06 	br	24adc <__alt_data_end+0xfc024adc>
   24af0:	01110bff 	0x1110bff
   24af4:	01010004 	movi	r4,1024
   24af8:	7f000105 	stb	fp,4(r15)
   24afc:	007d0000 	call	7d000 <_gp+0x479dc>
   24b00:	00000000 	call	0 <__alt_mem_sdram>
   24b04:	01883a00 	call	1883a0 <_gp+0x152d7c>
   24b08:	010d0bff 	0x10d0bff
   24b0c:	01010002 	0x1010002
	...
   24b18:	010d0bff 	0x10d0bff
   24b1c:	01010004 	movi	r4,1024
   24b20:	00000100 	call	10 <__alt_mem_sdram+0x10>
   24b24:	00000000 	call	0 <__alt_mem_sdram>
   24b28:	0000adf4 	movhi	zero,695
   24b2c:	0000d5c8 	cmpgei	zero,zero,855
